发布的免费软件，它们大都是笔者为了开发后面的OSASK操作系统而根据需要自己编写的。这
些工具的源代码也是公开的。除此之外，我们还会用到其他一些免费软件，所有这些软件的功能
21
我们会在使用的时候详细介绍。
66 操作系统开发中的困难 22
现在市面上众多的C编译器都是以开发Windows或Linux上的应用程序为前提而设计的，几乎
7
从来没有人想过要用它们来开发其他的软件，比如自己的操作系统。笔者所提供的编译器，也是
以Windows版的gcc②为基础稍加改造而做成的，与gcc几乎没什么不同。或许也有为开发操作系统
8
而设计的C编译器，不过就算有，恐怕也只有开发操作系统的公司才会买，所以当然会很贵。这
次我们用不了这么高价的软件。
9
因为这些原因，我们只能靠开发应用程序用的C编译器想方设法编写出一个操作系统来。这
实际上是在硬来，所以当中就会有很多不方便的地方。
10
就比如说printf(“hello\n”);吧，这个函数总是出现在C语言教科书的第一章，但我们现在就
连它也无法使用。为什么呢？因为printf这个函数是以操作系统提供的功能为前提编写的，而我
们最开始的操作系统可是什么功能都没有。因此，如果我们硬要执行这个函数的话，CPU会发生 11
一般保护性异常③，直接罢工。刚开始的时候不仅是printf，几乎所有的函数都无法使用。
12
关于这次开发语言的选择，如果非要说出个所以然的话，其实也是因为C语言还算是很
少依赖操作系统功能的语言，基本上只要不用函数就可以了。如果用C++的话，像new/delete
13
这种基本而重要的运算符都不能用了，另外对于类的做法也会有很多要求，这样就无法发挥
C++语言的优势了。当然，为了使用这些函数去开发操作系统，只要我们想办法，还是能够
克服种种困难的。但是如果做到这个份上，我们不禁会想，到底是在用C++做操作系统呢， 14
——————————
15
① http://hrb.osask.jp。
② GNU项目组开发的免费C编译器，GNU C Compiler的简称。有时也指GUN开发的各种编译器的集合（GNU Compiler
Collection）。
15
③ 电脑的CPU非常优秀，如果接到无视OS保护的指令或不可能执行的指令时，首先会保存当前状态，中断正在执行
的程序，然后调用事先设定的函数。这种机制称为异常保护功能，比如除法异常、未定义指令异常、栈异常等。
不能归类到任何异常类型中去的异常事态被称为一般保护异常。这种异常保护功能或许会让老Windows用户想起 16
那噩梦般的蓝屏画面，但是如果经历过操作系统开发以后，大家就会觉得这种机制实在是太有用了。
图灵社区会员 metorm 专享 尊重版权
8 …… 第0天：着手开发之前
还是在为了C++而做操作系统呢。对别的语言而言这个问题会更加突出，所以这次还是决定
使用C语言，希望大家予以理解。
顺便插一句，在开发操作系统时不会受到限制的语言大概就只有汇编语言①了。还是汇编语
言最厉害②（笑）。但是如果本书仅用汇编来编写操作系统的话，恐怕没几个人会看，所以就算是
做事管前不顾后的笔者也不得不想想后果。
另外，在开发操作系统时，需要用到CPU上的许多控制操作系统的寄存器③。一般的C
编译器都是用于开发应用程序的，所以根本没有任何操作这些寄存器的命令。另外，C编译
器还具有非常优秀的自动优化功能，但有时候这反而会给我们带来麻烦。
归根到底，为了克服以上这些困难，有些没法用C语言来编写的部分，我们就只好用汇编语
言来写了。这个时候，我们就必须要知道C编译器到底是怎样把程序编译成机器语言的。如果不
能够与C编译器保持一致的话，就不能将汇编语言编写的部分与C语言编写的部分很好地衔接起
来。这可是在编写普通的C语言程序时所体会不到哦！不过相比之下，今后的麻烦可比这种好处
多得多啊（苦笑）。
同样，如果用C++来编写操作系统，也必须知道C++是如何把程序编译成机器语言的。
当然，C++比C功能更多更强，编译规则也更复杂，所以解释起来也更麻烦，我们选用C语言
也有这一层理由。总之，如果不理解自己所使用的语言是如何进行编译的，就没法用这种语
言来编写操作系统。
书店里有不少C语言、C++的书，当然也还有Delphi、Java等其他各种编程语言的书，但这么
多书里没有一本提到过“这些源代码编译过后生成的机器语言到底是什么样的”。不仅如此，虽
然我们是在通过程序向CPU发指令的，但连CPU的基本结构都没有人肯给我们讲一讲。作为一个
研究操作系统的人，真觉得心里不是滋味。为了弥补这一空缺，我们这本书就从这些基础讲起（但
也仅限于此次开发操作系统所必备的基础知识）。
我们具备了这样的知识以后，说不定还会改变对程序设计的看法。以前也许只想着怎么写出
漂亮的源代码来，以后也许就会更注重编译出来的是怎样的机器语言。源代码写得再漂亮，如果
不能编译成自己希望的机器语言，不能正常运行的话，也是毫无意义的。反过来说，即便源代码
写得难看点儿，即便只有特定的C编译器才能编译，但只要能够得到自己想要的机器语言就没有
问题了。虽然不至于说“只要编译出了想要的机器语言，源代码就成了一张废纸”，但从某种意
——————————
① Assembler，与机器语言最接近的一种编程语言。过去掌握这种语言的人会备受尊敬，而现在这种人恐怕要被当作
怪人了，真是可悲啊。原本汇编语言的正式名称应该是Assembly语言，而Assembler一般指的是编译程序。不过像
笔者这样的老程序员，往往不对这两个词进行区分，统称为Assembler。
② 读到这里，大家可能还不理解为什么这么说，越往后看就越能慢慢体会到了。
③ Register，有些类似机器语言中的变量。对CPU而言，内存是外部存储装置，在CPU内核之中，存储装置只有寄存
器。全部寄存器的容量加起来也不到1KB。
图灵社区会员 metorm 专享 尊重版权
7 学习本书时的注意事项（重要！） …… 9
义上说还真就是这样。 0
对于开发操作系统的人而言，源程序无非是用来得到机器语言的“手段”，而不是目的。浪
费太多时间在手段上就是本末倒置了。 3
对了，还有一点或许会有人担心，所以在这里事先说明一下：虽然操作系统是用C语言和汇
编语言编写的，但并不是用C++编写的应用程序就无法在这个操作系统上运行。编写应用程序所
20
用的语言，与开发操作系统所使用的语言是没有任何关系的，大家大可不必担心。
21
77 学习本书时的注意事项（重要！）
本书从第1章开始，写的是每一天实际开发的内容，虽然一共分成了30天，但这些都是根据 22
笔者现在的能力和讲解的长度来大概切分的，并不是说读者也必须得一天完成一章。每个人觉
得难的地方各不相同，有时学习一章可能要花上一星期的时间，也有时可能一天就能学会三章 7
的内容。
当然，学习过程中可能会遇到看不太懂的章节，这种时候不要停下来，先接着往下读上个 8
一两章也许会突然明白过来。如果往后看还是不明白的话，就先确认一下自己已经理解到哪一
部分了，然后回过头来再从不懂的地方重新看就是了。千万别着急，看第二遍时，没准就会豁
9
然开朗了。
如果已经弄清了哪里没理解，而且没理解的部分看了很多遍还是不明白的话，大家可以参阅
10
我们的帮助与支持页面①，或许“问题与解答”（Q&A）页里会有解说。
11
■■■■■
本书对C语言的指针和结构体的说明与其他书籍有很大区别。这是因为本书先讲CPU的基本
12
结构，然后讲汇编，最后再讲C语言，而其他的书都不讲这些基础知识，刚一提到指针，马上就
转到变量地址如何如何了。所以就算大家“觉得”已经明白了那些书里讲的指针，也不要把本书
的指针部分跳过去，相信这次大家能真正地理解指针。当然，如果真的已经弄明白了的话，大概 13
看看就可以了。
14
■■■■■
从现在开始我们来一点一点地开发操作系统，我们会将每个阶段的进展情况总结出来，这些
15
中间成果都刻在附带光盘里了，只要简单地复制一下就能马上运行。关于这些程序，有些需要注
意的地方，我们在这里简单说明一下。
15
比如最初出现的程序是“helloos0”，下一个出现的程序是“helloos1”。 即使我们以helloos0
——————————
16
① http://hrb.osask.jp。
图灵社区会员 metorm 专享 尊重版权
10 …… 第0天：着手开发之前
为基础，把书中讲解的内容一个不漏地全部做上一遍，也不能保证肯定可以得到后面的helloos1。
书中可能偶尔有讲解得很完整的地方，但其实大多部分都讲得不够明确，这主要是因为笔者觉得
这些地方不讲那么仔细大家肯定也能明白。
笔者说这些主要就是想要告诉大家，不仅要看书里的内容，更要好好看程序。有时候书上写
得很含糊，读起来晦涩难懂，但一看程序马上就明白了。本书的主角不是正文内容，而是附录中
的程序。正文仅仅是介绍程序是如何做出来的。
所以说从这个意义上讲，与其说这是“一本附带光盘的书”，倒不如说这是“一张附带一本
大厚书的光盘”（笑）。
■■■■■
关于程序还有一点要说明的——这里收录的程序的版权全部归笔者所有。可是，读了这本书
后打算开发自己的操作系统的话，可能有不少地方要仿照着附带程序来做；也有人可能想把程序
的前期部分全盘照搬过来用；还有人可能想接着本书最后的部分继续开发自己的操作系统。
这是一本关于操作系统的教材，如果大家有上面这些想法却不能自由使用附录程序的话，这
教材也就没什么意义了，所以大家可以随意使用这些程序，也不用事先提出任何申请。尽管大家
最后做出来的操作系统中可能会包含笔者编写的程序，不过也不用在版权声明中署上笔者的名
字。大家可以把它当作自己独立开发的操作系统，也可以卖了它去赚钱。就算大家靠这个系统成
了亿万富翁，笔者也不会要分毫的分成，大家大可放心①。
而且这不只是买了本书的人才能享受的特权，从图书馆或朋友那儿借书看的人，甚至在书店
里站着只看不买的人，也都享有以上权利。当然，大家要是买了这本书，对笔者、对出版社都是
一个帮助。（笑）
在引用本书程序时，只有一点需要注意，那就是大家开发的操作系统的名字。因为它已经不
是笔者所开发的操作系统了，所以请适当地改个名字，以免让人误解，仅此一点请务必留意。不
管程序的内部是多么相像，它都是大家自己负责发布的另外一个不同的操作系统。给它起个响亮
的名字吧。
以上声明仅适用于书中的程序，以及附带光盘中收录的用作操作系统教材的程序。本书正文
和附带光盘中的其他工具软件不在此列。复制或修改都受到著作权法的保护。请在法律允许范围
内使用这些内容。与光盘中的工具软件相关的许可权会放在本书最后一章予以说明。
——————————
① 在版权署名时，如果有人执意要署上笔者的名字，笔者也不反对。另外，要是大家一不小心发了大财，一定要给
笔者分红的话，笔者当然也会心存感激地接受下来（笑）。
图灵社区会员 metorm 专享 尊重版权
8 各章内容摘要 …… 11
88 各章内容摘要
0
估计看过目录大家就能大概了解各章内容了，但因为目录里项目太多，所以在这里概括总结
3
一下。如果有人想要保留一份神秘感，想边看边猜“后面的内容会是什么”，那么可以跳过本节
不读（笑）。这一部分可以说是全书的灯塔，当大家在阅读本书的过程中感觉有什么不放心的时
候，就回过头来重新看看本节内容吧。 20
第一周（第1天 ～ 第7天） 21
一开始首先要考虑怎么来写一个“只要一通电就能运行的程序”。这部分用C语言写起来有些
22
困难，所以主要还是用汇编语言来写。
这步完成之后，下一步就要写一个从磁盘读取操作系统的程序。这时即便打开电脑电源，它
7
也不会自动地将操作系统全部都读进来，它只能读取磁盘上最开始的512字节的内容，所以我们
要编写剩余部分的载入程序。这个程序也要用汇编语言编写。
8
一旦完成了这一步，以后的程序就可以用C语言来编写了。我们就尽快使用C语言来学习开
发显示画面的程序。同时，我们也能慢慢熟悉C语言语法。这个时候我们好像在做自己想做的事，
9
但事实上我们还没有自由操纵C语言。
接下来，为了实现“移动鼠标”这一雄心，我们要对CPU进行细致的设定，并掌握中断处理
10
程序的写法。从全书总体看来，这一部分是水平相当高的部分，笔者也觉得放在这里有些不妥，
但从本书条理上讲，这些内容必须放在这里，所以只好请大家忍耐一下了。在这里，CPU的规格
以及电脑复杂的规格都会给我们带来各种各样的麻烦。而且开发语言既有C语言，又有汇编语言， 11
这又给我们造成了更大的混乱。这个时候我们一点儿也不会觉得这是在做自己想做的事，怎么看
都像是在“受人摆布”。 12
渡过这个痛苦的时期，第一周就该结束了。
13
第二周（第8天 ～ 第14天）
14
一周的苦战还是很有意义的，回头一看，我们就会发现自己还是斩获颇丰的。这时我们已经
基本掌握了C语言的语法，连汇编语言的水平也能达到本书的要求了。
15
所以现在我们就可以着手开发像样的操作系统了。但是这一次我们又要为算法头痛了。即使
掌握了编程语言的语法，如果不懂得好的算法的话，也还是不能开发出来自己想要的操作系统。
15
所以这一周我们就边学习算法边慢慢地开发操作系统。不过到了这一阶段，我们就能感觉到基本
上不会再受技术问题限制了。
16
图灵社区会员 metorm 专享 尊重版权
12 …… 第0天：着手开发之前
第三周（第15天 ～ 第21天）
现在我们的技术已经相当厉害了，可以随心所欲地开发自己的操作系统了。首先是要支持多
任务，然后是开发命令行窗口，之后就可以着手开发应用程序了。到本周结束时，就算还不够完
备，我们也能拿出一个可以称之为操作系统的软件了。
第四周（第22天 ～ 第28天）
在这个阶段，我们可以尽情地给操作系统增加各种各样的功能，同时还可以开发出大量像模
像样的应用程序来。这个阶段我们已经能做得很好了，这可能也是我们最高兴的时期。这部分要
讲解的内容很少，笔者也不用再煞费苦心地去写那些文字说明了，可以把精力都集中在编程上
（笑）。对了，说起文字才想起来，正好在这个时期可以让我们的操作系统显示文字了。
免费赠送两天（第29天 ～ 第30天）
剩下的两天用来润色加工。这两天我们来做一些之前没来得及做，但做起来既简单又有趣的
内容。
■■■■■
以上就是从第1天到第30天的内容摘要，越到后面介绍越短，这也说明最开始的内容是最复
杂的。那么，就让我们做好准备，开始第一天的学习吧。啊，大家不用紧张，放松！放松！
图灵社区会员 metorm 专享 尊重版权
第 1 天
从计算机结构到汇编程序入门
 先动手操作
 究竟做了些什么
 初次体验汇编程序
 加工润色
11 先动手操作
与其啰啰嗦嗦地写上一大堆，还不如实际动手开发来得轻松，我们这就开始吧。而且我们一
上来就完全抛开前面的说明，既不用C语言，也不用汇编程序，而是采用一个迥然不同的工具来
进行开发（笑）。
■■■■■
有一种工具软件名为“二进制编辑器”（Binary Editor）①，是一种能够直接对二进制数进行
编辑的软件。我们现在要用它来编辑出下图这样的文件。
也许有人会说“这样的工具我从来没有见过呀”，没关系，下面我们来详细地介绍一下。
首先打开下面这个网页：
http://www.vcraft.jp/soft/bz.html②
——————————
① 原文直译为“二进制编辑器”（Binary Editor），在中国“二进制编辑器”、“十六进制编辑器”这两种说法都有，
这里尊重原著保留了“二进制编辑器”的说法。——译者注
② 如果此网页连接不上，也可用google等检索工具来搜索一下，从别处下载Bz1621.lzh。
图灵社区会员 metorm 专享 尊重版权
14 …… 第1天：从计算机结构到汇编程序入门
用BZ打开helloos.img时的画面
点击“在此下载”（Download）的链接，下载文件Bz1621.lzh （在此非常感谢c.mos公司无偿
公开这么好的软件）。当你读到本书的时候，也许会有新的版本发布，所以文件名可能会有所不
同。接下来，安装下载下来的文件，然后双击启动Bz.exe程序。如果不能正常启动的话，可以参
考上面网页的“★注意★”一项，按照上面的安装指导进行操作。
顺利启动的话屏幕上会出现如下画面。
BZ起动时的画面
好，让我们赶紧来输入吧，只要从键盘上直接输入EB4E904845……就可以了，简单吧。其
中字符之间的空格是这个软件在显示时为方便阅读自动插入的，不用自己从键盘上输入。另外，
右边的.N.HELLOIPL……部分，也不用从键盘输入，这是软件自动显示的。可能版本或者显示模
式不一样的时候，右侧显示的内容会与下面的截图有所不同。不过不用往心里去，这些内容完全
是锦上添花的东西，即使不一样也没事。
输入到000037位置时的画面
图灵社区会员 metorm 专享 尊重版权
1 先动手操作 …… 15
从000090开始后面全都是00，一直输入到最后168000这个地址。如果一直按着键盘上的“0”
1
不放手的话，画面上的0就会不停地增加，但因为个数相当多，也还是挺花时间的。如果家里有