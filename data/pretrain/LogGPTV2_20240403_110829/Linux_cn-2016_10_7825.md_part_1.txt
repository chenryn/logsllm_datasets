---
author: Min Ni
category: 软件开发
comments_data:
- date: '2016-10-02 01:41:36'
  message: 看看
  postip: 171.15.195.208
  username: 来自河南郑州的 Firefox 45.0|GNU/Linux 用户
- date: '2017-09-29 17:47:18'
  message: agsgs
  postip: 218.20.6.192
  username: 来自广东广州的 Chrome 61.0|Windows 7 用户
count:
  commentnum: 2
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 8471
date: '2016-10-01 19:14:38'
editorchoice: false
excerpt: 在过去的六个月，我们已经能够做到无需向我们的 Django 层（Django tiers）添加新的容量来维持我们的用户增长。我们将在本文分享一些由我们构建的工具以及如何使用它们来优化我们的日常部署流程。
fromurl: https://engineering.instagram.com/web-service-efficiency-at-instagram-with-python-4976d078e366#.tiakuoi4p
id: 7825
islctt: true
largepic: /data/attachment/album/201610/01/191407toztmksy76nei0t8.jpg
permalink: /article-7825-1.html
pic: /data/attachment/album/201610/01/191407toztmksy76nei0t8.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在过去的六个月，我们已经能够做到无需向我们的 Django 层（Django tiers）添加新的容量来维持我们的用户增长。我们将在本文分享一些由我们构建的工具以及如何使用它们来优化我们的日常部署流程。
tags:
- Python
- 回归分析
- 性能
- Django
thumb: false
title: Instagram 基于 Python 语言的 Web Service 效率提升之道
titlepic: true
translator: ChrisLeeGit
updated: '2016-10-01 19:14:38'
---
Instagram 目前部署了世界上最大规模的 Django Web 框架（该框架完全使用 Python 编写）。我们最初选用 Python 是因为它久负盛名的简洁性与实用性，这非常符合我们的哲学思想——“先做简单的事情”。但简洁性也会带来效率方面的折衷。Instagram 的规模在过去两年中已经翻番，并且最近已突破 5 亿用户，所以急需最大程度地提升 web 服务效率以便我们的平台能够继续顺利地扩大。在过去的一年，我们已经将 效率计划   （    efficiency program    ） 提上日程，并在过去的六个月，我们已经能够做到无需向我们的  Django 层   （    Django tiers    ） 添加新的容量来维持我们的用户增长。我们将在本文分享一些由我们构建的工具以及如何使用它们来优化我们的日常部署流程。
![](/data/attachment/album/201610/01/191407toztmksy76nei0t8.jpg)
### 为何需要提升效率？
Instagram，正如所有的软件，受限于像服务器和数据中心能源这样的物理限制。鉴于这些限制，在我们的效率计划中有两个我们希望实现的主要目标：
1. Instagram 应当能够利用持续代码发布正常地提供通信服务，防止因为自然灾害、区域性网络问题等造成某一个数据中心区丢失。
2. Instagram 应当能够自由地滚动发布新产品和新功能，不必因容量而受阻。
想要实现这些目标，我们意识到我们需要持续不断地监控我们的系统并与 回归   （    regressions    ） 进行战斗。
### 定义效率
Web services 的瓶颈通常在于每台服务器上可用的 CPU 时间。在这种环境下，效率就意味着利用相同的 CPU 资源完成更多的任务，也就是说， 每秒处理更多的用户请求   （    requests per second，RPS    ） 。当我们寻找优化方法时，我们面临的第一个最大的挑战就是尝试量化我们当前的效率。到目前为止，我们一直在使用“每次请求的平均 CPU 时间”来评估效率，但使用这种指标也有其固有限制：
1. **设备多样性**。使用 CPU 时间来测量 CPU 资源并非理想方案，因为它同时受到 CPU 型号与 CPU 负载的影响。
2. **请求影响数据**。测量每次请求的 CPU 资源并非理想方案，因为在使用 每次请求测量   （    per-request measurement    ） 方案时，添加或移除轻量级或重量级的请求也会影响到效率指标。
相对于 CPU 时间来说，CPU 指令是一种更好的指标，因为对于相同的请求，它会报告相同的数字，不管 CPU 型号和 CPU 负载情况如何。我们选择使用了一种叫做” 每个活动用户   （    per active user    ） “的指标，而不是将我们所有的数据关联到每个用户请求上。我们最终采用“ 每个活动用户在高峰期间的 CPU 指令   （    CPU instruction per active user during peak minute    ） ”来测量效率。我们建立好新的度量标准后，下一步就是通过对 Django 的分析来更多的了解一下我们的回归。