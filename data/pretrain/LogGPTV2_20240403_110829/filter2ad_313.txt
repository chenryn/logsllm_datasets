# Incremental SDN Deployment in Enterprise Networks

**Authors:**
- Dan Levin
- Marco Canini
- Stefan Schmid
- Anja Feldmann

**Affiliation:**
TU Berlin / T-Labs
Email: @net.t-labs.tu-berlin.de

## Categories and Subject Descriptors
C.2.4 [Distributed Systems]: Network Operating Systems

## Keywords
Software-Defined Networking (SDN), Incremental Deployment

## 1. Introduction
Mid to large enterprise campus networks must operate reliably, provide high-performance connectivity, and enforce organizational policies. They must also offer isolation across complex boundaries while remaining easy to manage. Additionally, operational and capital costs must be kept low. Software-Defined Networking (SDN) has the potential to address these challenges. However, most existing work on leveraging SDN assumes a full deployment.

Unlike data center networks, enterprise network upgrades typically start with an existing infrastructure and proceed in stages due to budget constraints. This leads us to question:
1. What are the benefits of upgrading to a partial SDN deployment?
2. How do the benefits of principled network orchestration depend on the location of SDN switches?
3. Given budget constraints, which subset of legacy switches or routers should be upgraded to SDN to maximize benefits?

To address these questions, we present Panopticon, an architecture and methodology for planning and operating networks that combine legacy and SDN switches. We call such networks "transitional networks." Panopticon provides an abstraction of a fully-deployed SDN in a partially upgraded transitional network, extending SDN benefits potentially over the entire network. Panopticon overcomes many limitations of current approaches for transitional SDN deployments, which we will now briefly review.

*Note: Dan Levin is the only student author.*

## 2. Transitional SDN Deployment

### 2.1 Dual-Stack Approach
The first SDN deployment approach (Figure 1a) partitions the flow space into disjoint slices, assigning each slice to either SDN or legacy processing. This dual-stack approach does not integrate legacy and SDN hardware effectively and requires contiguous deployment of hybrid programmable switches.

### 2.2 Full Edge SDN Deployment
The second approach (Figure 1b) involves deploying SDN at the network access edge. This enables full control over access policies and the introduction of new network functionality, such as data center network virtualization. However, this approach is costly and limits the ability to control forwarding decisions within the network core.

## 3. The Panopticon Approach

In contrast to existing approaches, Panopticon (Figure 1c) integrates legacy and SDN switches and exposes a logical SDN abstraction to the control platform. Our key insight is that the benefits of SDN can be realized for any source-destination path that includes at least one SDN switch. Thus, a full SDN deployment is not necessary; a relatively small subset of switches may suffice.

### 3.1 Key Features
- **Cost-Aware Optimization Tool:** A tool for determining the topological location of partial SDN deployment based on objectives like CAPEX or forwarding efficiency.
- **Panopticon Architecture:** Guarantees that traffic destined for operator-selected endpoints passes through at least one SDN switch, using VLANs to isolate end-hosts and restrict their traffic to strategically upgraded SDN switches.
- **Compatibility and Scalability:** Maintains compatibility with legacy switches and protocols, and scales by managing VLAN and flow table state.

### 3.2 Feasibility
We evaluated Panopticon's feasibility through a prototype implementation and simulations on real enterprise campus network topologies. Results suggest that with a small fraction (80%) of the network as a single SDN while meeting key VLAN and flow table resource constraints.

### 3.3 SDN Abstraction
In Panopticon, links are pseudo-wires composed of legacy switches and links running STP. The SDN controller must account for STP behaviors. The SDN control platform can hide the nature of the partial deployment from applications, presenting a logical SDN abstraction.

## 4. References
1. Nicira Network Virtualization Platform. http://nicira.com/en/network-virtualization-platform.
2. M. Casado, M. J. Freedman, J. Pettit, J. Luo, N. McKeown, and S. Shenker. Ethane: Taking control of the enterprise. In SIGCOMM, 2007.
3. M. Casado, T. Koponen, S. Shenker, and A. Tootoonchian. Fabric: a retrospective on evolving SDN. In HotSDN, 2012.
4. N. Foster, R. Harrison, M. J. Freedman, C. Monsanto, J. Rexford, A. Story, and D. Walker. Frenetic: A network programming language. In ICFP, 2011.
5. D. Levin, M. Canini, S. Schmid, and A. Feldmann. Panopticon: Reaping the Benefits of Partial SDN Deployment in Enterprise Networks. Technical report, TU Berlin / T-Labs, May 2013.
6. N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner. OpenFlow: enabling innovation in campus networks. SIGCOMM CCR, 38(2), 2008.
7. M. Reitblatt, N. Foster, J. Rexford, C. Schlesinger, and D. Walker. Abstractions for network update. In SIGCOMM, 2012.

---

This optimized version of the text aims to improve clarity, coherence, and professionalism, making it more suitable for academic and technical audiences.