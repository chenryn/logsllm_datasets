a stream of other encrypted values according to these split points.
Using this amount of client working-set storage we can ensure that
the depth of the buffer tree remains O(1), allowing for low amor-
tized latency per client query. Note that any elements stored in the
same unsorted buffer at the end of the procedure remain incompa-
rable.
2. PRELIMINARIES
2.1 Security with No Search Queries
The security deﬁnitions of OPE variants consider how much in-
formation is revealed by the ciphertexts that are created when data
is inserted. This measure is important since OPE ciphertexts must
inherently reveal ordering information. The ideal security achiev-
able even without any search queries is revealing ordering infor-
mation of the underlying plaintexts but nothing more. Our POPE
scheme, however, gives much stronger guarantee of revealing no
information about the underlying plaintexts during insertion. In-
stead, ordering information is gradually leaked as more and more
search queries are performed. In this section, we brieﬂy discuss
the security guarantees that OPE variants and our scheme provide,
before any search queries are performed.
Security of OPE. The security notion for OPE schemes is IND-
OCPA (indistinguishability under ordered chosen-plaintext attack)
[7, 35]: Ciphertexts reveal no additional information beyond the
order of the plaintexts. However, Naveed et al. [33] demonstrated
this level of security is sometimes insufﬁcient, by showing how
the revealed order can be used to statistically recover a signiﬁcant
amount of plaintext data in an OPE-protected medical database.
Security of frequency-hiding OPE. To address the above issue,
Kerschbaum [29] proposed a stronger security notion, called indis-
tinguishability under frequency-analyzing ordered chosen plaintext
attack (IND-FAOCPA). Informally, the deﬁnition requires that ci-
phertexts reveal no additional information beyond a randomized
order of the plaintexts. A randomized order Y (some permutation
of [n] for n-element sequences) of some sequence X of possibly
non-distinct elements is an ordering you can obtain from the se-
quence by breaking ties randomly. For example, the randomized
order of X1 = (1, 4, 2, 9) or X2 = (2, 8, 5, 20) could only be
Y1 = (1, 3, 2, 4) (meaning “ﬁrst in sorted order was inserted ﬁrst,
third in sorted order was inserted next,” and so on) because X1, X2
began totally ordered. However, the sequence X3 = (1, 2, 2, 3)
has two possible randomized orders, namely Y2 = (1, 2, 3, 4) and
Y3 = (1, 3, 2, 4).
Note that for any randomized order, e.g. Y1 = (1, 3, 2, 4), there
are many sequences that could map onto it (depending only on the
domain of the sequence and the constraints imposed by known par-
tial order information on the sequence). This property of a ran-
domized order is useful for hiding frequency. The motivating ex-
ample for frequency-hiding security is a database that stores a large
number n of encodings for which the underlying label space L =
{(cid:96)1, ..., (cid:96)T} is small, i.e., T (cid:28) n. For example, [29] considered a
setting where each label is either (cid:96)1 = “female” (F ) or (cid:96)2 = “male”
(M ), with the sequence (F, F, M, M ) ideally encoded as, say,
(2, 1, 3, 4). Examining only (2, 1, 3, 4) does not reveal if the under-
lying sequence was originally (F, F, F, F ), (F, F, F, M ), (F, F,
M, M ), (M, F, M, M ), or (M, M, M, M ).
To turn an OPE scheme into a frequency-hiding OPE scheme,
consider adding a small, random fractional component to the OPE-
ordered ﬁeld during encoding, e.g. X1 = (1, 1, 2, 2) becomes e.g.
X(cid:48)
1 = (1.12, 1.36, 2.41, 2.30), which randomly maps X1 to the
ordering Y = (1, 2, 4, 3), and then X(cid:48)
1 is encoded under the OPE
scheme. In [29], this type of scheme is shown IND-FAOCPA secure
in the programmable random oracle model.
 0 200 400 600 800 10000500000100000015000002000000number of queriessorted elementsWe use this approach to add frequency hiding in POPE. How-
ever, even this stronger deﬁnition fails to protect against all known
attacks as it still reveals the order between all distinct plaintexts in
the database, allowing for sorting-based attacks.
Security of POPE. POPE, on the other hand, fully hides all in-
serted plaintexts until search queries are performed. Looking ahead,
our POPE scheme encrypts an item using semantically secure en-
cryption. This implies in the POPE construction, ciphertexts reveal
no information about the underlying plaintexts. Of course, it is not
sufﬁcient to just discuss security on insert without considering what
happens on queries. Thus, we give a security deﬁnition below cap-
turing what happens both on insertion and during search queries.
2.2 Security with Search Queries
We propose a simulation-based deﬁnition that captures both ideal
OPE security and frequency-hiding even when considering what
happens during the search procedure. Speciﬁcally, we require the
existence of a simulator simulating the view of the protocol execu-
tion given only a randomized order of (some of) the plaintexts. We
model this by a random order oracle rord which just takes the in-
dices of two data items and returns which item is larger according
to some ﬁxed randomized order. Since the simulated view is con-
structed using only this oracle, the only information leaked in the
real protocol corresponds to the oracle queries made to the rord
oracle, i.e., the randomized order on the queried plaintexts.
To formalize the simulation tasks, for a sequence seq of inser-
tion and search operations, we deﬁne the proﬁle proﬁle(seq) of
sequence seq to be a sequence where each value in seq is replaced
with a unique index (simply incrementing starting from 1) to iden-
tify the operation. An example sequence and its proﬁle can be:
seq : (insert 10, insert 100, range [8, 20], insert 41).
proﬁle(seq) : (insert 1, insert 2, range [3, 4], insert 5).
DEFINITION 1. A range query protocol Π is called frequency-
hiding order-preserving, for any honest-but-curious server S, if
there is a simulator Sim such that for any sequence seq of inser-
tions and searches, the following two distributions are computa-
tionally indistinguishable:
VIEWΠ,S(seq) ≈c Simrordseq(·,·)
Π
(proﬁle(seq)),
where the left-hand side denotes the real view of S when executing
the protocol Π with seq as the client’s input, and the right-hand
side is the output of the simulator Sim taking as input proﬁle(seq)
and referring to oracle rord. The oracle rordseq(·,·) works as
follows:
rordseq(i, j): It is initialized with a randomized order π of the
labels in seq by breaking ties randomly. Then, for each query
(i, j), return whether the ith label has a higher ranking than
the jth, according to π.
Since the simulator refers to only the proﬁle and the oracle, we
can say that for any protocol satisfying the above deﬁnition, the
protocol transcript leaks to the server only the proﬁle and the ran-
domized order of the queried plaintexts. One beneﬁt of this def-
inition is it covers both non-interactive FH-OPE schemes and our
interactive POPE scheme.
Leaking only a partial order. Recall that our POPE scheme grad-
ually leaks the ordering information as more comparisons are made
in order to execute the queries. To formally treat the amount of in-
formation that remains hidden after some number of range queries,
we introduce a deﬁnition that captures the number of points that
remain incomparable even after some queries are performed.
(cid:1) = 6 initially
of four labels labels = ((cid:96)1, (cid:96)2, (cid:96)3, (cid:96)4). There are(cid:0)4
First, we explain what we mean by the number of incomparable
element pairs with transitivity. For example, consider a sequence
unordered pairs: {(cid:96)1, (cid:96)2}, {(cid:96)1, (cid:96)3}, {(cid:96)1, (cid:96)4}, {(cid:96)2, (cid:96)3}, {(cid:96)2, (cid:96)4},
{(cid:96)3, (cid:96)4}. During query execution the order of some of these pairs
may become known to the server, i.e., if it queries the rord oracle
on the indices of some such pair or if the order can be inferred from
its previous queries. For example, given info = ((cid:96)1 > (cid:96)2, (cid:96)2 > (cid:96)4),
then due to transitivity, the server can infer (cid:96)1 > (cid:96)4. However, the
following pairs still remain incomparable:
2
{(cid:96)1, (cid:96)3},{(cid:96)2, (cid:96)3},{(cid:96)3, (cid:96)4}
Armed with this notion of incomparable pairs with transitivity, we
give the following deﬁnition:
DEFINITION 2. Let n, m denote the number of insertions and
range searches respectively. A range query protocol Π is frequency-
hiding partial order preserving with u incomparable element pairs
with transitivity, if for any operation sequence seq with n inserts
and m range queries, the simulator successfully creates a simu-
lated view required by Deﬁnition 1 while leaving at least u pairs
of elements that are incomparable with transitivity based on the
queries made by the simulator to rord.
In this paper, whenever we consider incomparable pairs, we con-
sider it with transitivity, and from now on, we will omit the phrase
“with transitivity”. Note that both the OPE scheme by Popa et
al. [35] and the FH-OPE scheme by Kerschbaum [29] have 0 in-
comparable element pairs for any n inserts, even with 0 searches.
However, our POPE scheme shows a more gradual information
leakage. We discuss this in more detail in Section 4.
3. MAIN CONSTRUCTION
3.1 Overview
Our scheme consists of a client and a server, which we denote by
Cl and Ser respectively. Cl holds an encryption key and performs
insertions and range query operations through interactive protocols
with Ser. (In fact, only the range query operation is interactive,
which is a key beneﬁt of our construction!)
As Cl is stateless and needs to remember nothing (other than the
secret key), all data is stored encrypted by Ser. To organize this
data and facilitate fast lookups, Ser maintains a POPE tree to hold
the ciphertexts. The high-level structure of this tree is similar to a
B-tree, where each node has a bounded number of children and all
leaf nodes are at the same depth. In fact, the number of children of
any POPE tree internal node is between L/2 + 1 and L + 1, where
L is the local temporary storage capacity of Cl.
Where the POPE tree differs from a standard B-tree is that ev-
ery node contains an unsorted buffer of ciphertexts with unbounded
size. The beneﬁts of our construction, both in terms of efﬁciency
and security, stem from the use of these unsorted buffers. For ef-
ﬁciency, they allow to delay expensive sorting and data movement
operations until necessary to execute a range query. Security ben-
eﬁts stem from the fact that the relative order of elements in the
same unsorted buffer is not revealed to an attacker.
The insertion protocol is trivial: Cl encrypts the plaintext value
to be inserted and sends it to Ser, who simply appends the new ci-
phertext to the root node’s unsorted buffer. Because semantically
secure encryption is used, the ciphertexts do not reveal anything
about their true values or order, not even whether two inserted val-
ues are the same or different. All of the actual sorting and ordering
is delayed until queries are performed.
Before completing a range query, Ser interacts with Cl to split
the tree according to each of the two query endpoints. This sub-
routine — the most sophisticated in our entire construction — has
three stages. First, for all the internal POPE tree nodes along the
search path for the query endpoint, the unsorted buffers are cleared
out. This clearing of the buffers proceeds from root to leaf, and
involves streaming all buffer ciphertexts back from Ser to Cl, who
responds for each one with the index of which child node that ci-
phertext should ﬂow down to. Recall that we maintain each internal
node having at most L + 1 children; this allows the operation to be
performed efﬁciently by Cl without overﬂowing the client’s size-L
local storage.
This initial stage of the split ends at a leaf node. The second
stage involves reducing the size of that leaf node’s buffer to at most
L, the size of Cl’s local storage. This leaf node buffer reduction
proceeds by selecting L random ciphertexts from the leaf node’s
buffer, and using Cl to split the single leaf into L + 1 new sibling
leaf nodes, according to these randomly-selected elements. These
L randomly sampled ciphertexts are inserted into the parent node
as partition elements between the new leaf nodes. This leaf node
splitting procedure is repeated until the resulting leaf node has a
buffer of size at most L.
However, we may have inserted too many new children into the
parent node, causing it to have more than the limit of L+1 children.
So a rebalance operation must ﬁnally be completed, from the leaf
back up to the root node, creating new internal nodes as necessary
until they all have at most L + 1 children as required. Note that this
stage does not require any further ordering or consultation with Cl.
After performing this split operation for both endpoints, the ac-
tual range query can now be completed by Ser returning to Cl
all the ciphertexts in all buffers of nodes between the two query
endpoints. Again, this does not require any further ordering infor-
mation from Cl. Of particular importance for security is that there
may be large unsorted buffers even after the range query completes,
because all contents of those buffers lie entirely within or outside
of the desired range. The server either returns all of none of the
ciphertexts in these buffers, but still does not (and does not need to)
learn their order.
Parameters. Recall that the parameter n represents the total num-
ber of items inserted into the database, and the parameter m rep-
resents the total number of range query operations performed. The
client can temporarily store L+O(1) labels in its local memory for
the duration of a given query. Let L = n for constant 0 <  < 1.
Notation. To support realistic application scenarios, we distin-
guish between two types of data that Ser holds: (i) labels (cid:96) and
(ii) blocks that are composed of a POPE-encoded label (cid:96) and an
arbitrary, encrypted payload v(cid:96). This models the case when range
searches over POPE-encoded labels are used to retrieve the pay-
loads. No searching directly over the payloads is supported.
We remark that, in principle, for every distinct label (cid:96), there
could be many distinct blocks ((cid:96), v(cid:96)1 ), ((cid:96), v(cid:96)2 ), ... stored by Ser.
However, we will restrict to the special case when for each label (cid:96)
there is at most one block ((cid:96), v(cid:96)) in order to convey the main ideas
more clearly. (Note this distinctness property holds w.h.p. if we use
the tie-breaking procedure described in Section 2.1.)
3.2 Encryption of Labels
In our system, whenever Cl communicates a label (cid:96) to Ser we
have Cl always send a ciphertext ¯(cid:96) to Ser, where ¯(cid:96)← Enck((cid:96)).
Besides an encryption of the label itself, this ciphertext must also
encrypt (a) the tie-breaking random value necessary for frequency-
hiding POPE and (b) an indication of the label’s origin (left or right
query endpoint, or insertion).
Tie-breaking randomness. Consider for example that the labels
(1, 2, 2, 3) have been inserted, followed by a range query for all
values between 2 and 3, requiring a total of six encryptions. From
Section 2.1, tie-breaking randomness can be thought of as adding
a random fractional part to each plaintext before encrypting, so
for example we encrypt the labels (1.89, 2.15, 2.35, 3.93) and the
range query endpoints 2.23 and 3.38.
Origin bits. This hides the repeated label 2, but creates a new
problem: the labels 2.15 and 3.93 which should be included in a
range search between 2 and 3, would be excluded because of the
tie-breaking. So we also include two bits π for the origin of the
plaintext: πl = 00 and πr = 11 for left and right query endpoints
respectively, and πm = 01 for an insertion. These bits are inserted
between the actual label and the tie-breaking values, so (contin-
uing the previous example), we would insert the encryptions of
(1.01.89, 2.01.15, 2.01.35, 3.01.93) and query endpoints 2.00.23
and 3.11.38. This forces the range search to return the three correct