### Nepenthes Platform: An Efficient Approach to Collect Malware

#### 1. Introduction
Nepenthes is a honeypot platform designed to emulate vulnerabilities and collect malware. However, the large number of emulated vulnerabilities and open TCP ports can make it suspicious to attackers during the reconnaissance phase. Current automated malware does not check the plausibility of the target, but future malware might. To address this, the stealthiness of Nepenthes can be improved by using only vulnerability modules that match a specific real system configuration, such as Windows 2000 Service Pack 1. This trade-off reduces the expressiveness and the number of samples collected. Additionally, publishing unmodified results from Nepenthes can compromise its stealthiness. A solution to this is outlined in [16].

Nepenthes also has limitations in analyzing which exploits a particular piece of malware targets. It responds to incoming exploitation attempts and can only react to network packets. Once a binary executable is downloaded, static or dynamic analysis can overcome this limitation, though this is outside the current scope of Nepenthes.

#### 2. Results

##### 2.1 Vulnerability Modules
Vulnerability modules are a crucial component of the Nepenthes architecture, responsible for the emulation process. As of now, there are 21 vulnerability modules available. Table 1 provides an overview of selected modules, including references to related security advisories or brief summaries of their functions.

**Table 1. Overview of Selected Emulated Vulnerable Services**

| Name          | Reference/Summary                                                                 |
|---------------|-----------------------------------------------------------------------------------|
| vuln-asn1     | ASN.1 Vulnerability Could Allow Code Execution (MS04-007)                         |
| vuln-bagle    | Emulation of backdoor from Bagle worm                                             |
| vuln-dcom     | Buffer Overrun In RPC Interface (MS03-026)                                        |
| vuln-iis      | IIS SSL Vulnerability (MS04-011 and CAN-2004-0120)                                |
| vuln-kuang2   | Emulation of backdoor from Kuang2 worm                                            |
| vuln-lsass    | LSASS vulnerability (MS04-011 and CAN-2003-0533)                                  |
| vuln-msdtc    | Vulnerabilities in MSDTC Could Allow Remote Code Execution (MS05-051)             |
| vuln-msmq     | Vulnerability in Message Queuing Could Allow Code Execution (MS05-017)            |
| vuln-mssql    | Buffer Overruns in SQL Server 2000 Resolution Service (MS02-039)                  |
| vuln-mydoom   | Emulation of backdoor from myDoom/Novarg worm                                     |
| vuln-optix    | Emulation of backdoor from Optix Pro trojan                                       |
| vuln-pnp      | Vulnerability in Plug and Play Could Allow Remote Code Execution (MS05-039)       |
| vuln-sasserftpd | Sasser Worm FTP Server Buffer Overflow (OSVDB ID: 6197)                          |
| vuln-ssh      | Logging of SSH password brute-forcing attacks                                     |
| vuln-sub7     | Emulation of backdoor from Sub7 trojan                                            |
| vuln-wins     | Vulnerability in WINS Could Allow Remote Code Execution (MS04-045)                |

This selection of emulated vulnerabilities has proven sufficient to handle most autonomous spreading malware observed in the wild. These modules allow us to gather more information about propagating malware. If a certain packet flow cannot be handled by any vulnerability module, all collected information is stored on disk for later analysis. This helps in detecting changes in attack patterns, indicating new trends, and developing new modules. For zero-day vulnerabilities, this approach enables rapid analysis since the initial stages of the attack are already captured.

A drawback of this approach is that an attacker can send random data to a network port, causing Nepenthes to store this data, potentially leading to a Denial-of-Service condition. This issue can be mitigated by implementing upper bounds on the amount of traffic stored.

##### 2.2 Developing New Vulnerability Modules
Creating a new vulnerability module to emulate a novel security vulnerability or capture a propagating zero-day exploit is a straightforward process. On average, writing less than 500 lines of C++ code (including comments and blank lines) is required. This task can be completed with some experience in a short amount of time, sometimes in just a few minutes.

For example, when the Zotob worm exploited the MS05-039 vulnerability in the Plug and Play service of Windows 2000 and Windows XP, a proof-of-concept exploit was released two days after the security advisory. This exploit provided enough information to implement a vulnerability module for Nepenthes, allowing it to capture malware using this vulnerability. Without the proof-of-concept, it would have been more complex to develop a module based solely on the security advisory. Nonetheless, it is feasible, as attackers also developed a proof-of-concept exploit based on the advisory.

##### 2.3 Scalability
To evaluate the scalability of the Nepenthes platform, we used a testbed with a 2.4GHz Pentium III, 2 GB of physical memory, and a 100 MB Ethernet NIC running Debian Linux 3.0 and version 2.6.12 of the Linux kernel. The system ran Nepenthes 0.1.5 in default configuration, using all 21 vulnerability modules, resulting in 29 TCP sockets.

We tested the implementation with varying numbers of emulated systems, ranging from 256 to 32,000 honeypots. For each configuration, we measured the number of established TCP connections, system load, and memory consumption over one hour. We repeated the measurements several times to cancel out statistical fluctuations.

**Figures 3 (a) and (b)** show the results. The x-axis represents the number of IP addresses assigned to Nepenthes, and the y-axis represents the number of established TCP connections (a) and the average system load (b). The scalability is nearly linear up to 8,192 IP addresses, with the system load below 1. Beyond this, the number of established TCP connections decreases due to a system load above 1, indicating the system is fully occupied with I/O operations.

For a long-term performance evaluation, we set up Nepenthes to emulate a /18 network (about 16,000 IP addresses) and ran it for over five months. The system is stable, with occasional kernel crashes due to handling a large number of IP addresses. **Figure 4 (a)** shows the five-minute average of established TCP connections for a 30-hour period, with an average of 796 connections and peaks of up to 1,172. **Figure 4 (b)** depicts the five-minute average of network throughput, with an average incoming traffic of 308.8 kB/s and outgoing traffic of 86.6 kB/s.

##### 2.4 Statistics for Collected Malware
Nepenthes is optimized for automated collection of malware. **Figure 5 (a) and (b)** show the cumulative number of download attempts and successful downloads for a Nepenthes instance assigned to a /18 network. Within about 33 hours, over 5.5 million exploitation attempts were handled, with about 1.5 million binaries successfully downloaded. Most of these binaries are duplicates, but Nepenthes must download them to determine uniqueness. In this period, 508 new unique binaries were downloaded.

Over four months, we collected more than 15,500 unique binaries, corresponding to about 1,400 MB of data. Uniqueness is based on different MD5 sums. All collected files are PE or MZ files, targeting Windows systems. About 7% of the collected binaries are broken, mainly due to faulty propagation attempts, such as TFTP transfers or interrupted downloads.

**Table 2** shows the detection rates of different antivirus engines for the complete set and the latest 24 hours. The detection rates range from 73.1% to 90.2%, indicating that signature-based AV engines miss a significant amount of malware, especially for "fresh" threats.

**Table 3** lists the top ten types of collected malware, identified using ClamAV. Bots dominate the samples, likely due to the large number of botnets and aggressive spreading.

**Table 2. Detection Rates of Different Antivirus Engines**

| AV Engine | Complete Set (14,414 binaries) | Latest 24 Hours (460 binaries) |
|-----------|--------------------------------|--------------------------------|
| AV engine 1 | 78.1%                          | 85.0%                          |
| AV engine 2 | 73.1%                          | 82.6%                          |
| AV engine 3 | 90.2%                          | 85.3%                          |
| AV engine 4 | 84.1%                          | 77.8%                          |

**Table 3. Top Ten Types of Collected Malware**

| Place | Name according to ClamAV        | Number of Captured Samples |
|-------|---------------------------------|----------------------------|
| 1     | Worm.Padobot.M                  | 1,360                      |
| 2     | Trojan.Gobot-3                  | 906                        |
| 3     | Worm.Padobot.N                  | 698                        |
| 4     | Trojan.Gobot-4                  | 639                        |
| 5     | Trojan.Poebot-3                 | 540                        |
| 6     | Trojan.IRCBot-16                | 501                        |
| 7     | Worm.Padobot.P                  | 497                        |
| 8     | Trojan.Downloader.Delf-35       | 442                        |
| 9     | Trojan.Mybot-1411               | 386                        |
| 10    | Trojan.Ghostbot.A               | 357                        |