# 九、探索网络特性
在本章中，我们将介绍以下食谱:
*   使用预发行版本的 Docker
*   理解 MacVLAN 接口
*   使用 Docker MacVLAN 网络驱动程序
*   了解 IPVLAN 接口
*   使用 Docker IPVLAN 网络驱动程序
*   用 MacVLAN 和 IPVLAN 网络标记 VLAN 标识
# 简介
虽然我们在前面章节中讨论的许多特性从第一天就已经存在了，但是许多特性是最近才引入的。Docker 是一个快速发展的开源软件，有许多贡献者。为了管理特性的引入、测试和潜在的发布，Docker 以两种不同的方式发布代码。在本章中，我们将向您展示如何探索该软件的生产或发布版本中尚未包含的功能。作为其中的一部分，我们将回顾 Docker 引入的两个较新的网络功能。其中一个，MacVLAN，最近被合并到 1.12 版本的软件发布版本中。第二个，IPVLAN，还在预发行软件通道。在我们回顾了如何使用 Docker 预发行软件通道之后，我们将讨论 MacVLAN 和 IPVLAN 网络接口的基本操作，然后讨论它们如何作为驱动程序在 Docker 中实现。
# 使用预发行版本的 Docker
Docker 提供了两个不同的频道，您可以在其中预览未发布的代码。这给了用户一个机会去回顾那些已经计划发布的特性，以及那些完全是实验性的特性，可能永远也不会成为一个真正的发布版本。回顾这些特性并提供反馈是开源软件开发的一个重要部分。Docker 认真对待收到的反馈，许多在这些渠道中测试过的伟大想法都被纳入了产品代码版本。在这个食谱中，我们将回顾如何安装测试和实验性的 Docker 版本。
## 做好准备
在这个食谱中，我们将使用新安装的 Ubuntu 16.04 主机。尽管不是必需的，但建议您在当前未安装 Docker 的主机上安装 Docker 的预发行版本。如果安装程序脚本检测到 Docker 已经安装，它将警告您不要安装实验或测试代码。也就是说，我建议在专用的开发服务器上测试来自这些渠道的软件。在许多情况下，虚拟机用于此目的。如果您使用虚拟机，我建议您安装基本操作系统，然后对虚拟机进行快照，为自己提供一个还原点。如果安装出现问题，您始终可以恢复到此快照，从已知良好的系统启动。
正如 Docker 在他们的文档中所说:
> *实验特性还没有准备好生产。它们是为您的沙盒环境中的测试和评估而提供的。*
当使用任一非生产代码序列时，请记住这一点。强烈建议您在 GitHub 上提供任何一个频道中的所有功能的反馈。
## 怎么做…
如上所述，终端用户可以使用两种不同的预发行软件渠道。
*   [https://experimental.docker.com/](https://experimental.docker.com/):这是脚本下载安装 Docker 实验版的 URL。这个版本包括完全实验性的特性。这些期货中的许多可能在稍后的某个时间点被集成到产品发布中。然而，许多人不会也不会仅仅为了实验而进入这个渠道。
*   [https://test.docker.com/](https://test.docker.com/):这是脚本下载和安装 Docker 测试版的 URL。Docker 也称之为**发布候选** ( **RC** )版本的代码。这是具有特性的代码，这些特性计划发布，但尚未集成到 Docker 的生产或发布版本中。
要安装任一版本，只需从网址下载脚本并将其传递给外壳。例如:
*   要安装实验版本，运行以下命令:
    ```
    curl -sSL https://experimental.docker.com/ | sh
    ```
*   要安装测试或发布候选，发布运行该命令:
    ```
    curl -sSL https://test.docker.com/ | sh
    ```
### 注
有趣的是，您还可以使用类似的配置来下载 Docker 的生产版本。除了[https://test.docker.com/](https://test.docker.com/)和[https://experimental.docker.com/](https://experimental.docker.com/)之外，还有[https://get.docker.com/](https://get.docker.com/)将安装该软件的生产版本。
如上所述，这些脚本的使用应该在当前没有安装 Docker 的机器上完成。安装后，您可以通过检查`docker info`的输出来验证是否安装了适当的版本。例如，在安装实验版本时，您可以在输出中看到实验标志集:
```
user@docker-test:~$ sudo docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 1.12.2
……
Experimental: true
Insecure Registries:
 127.0.0.0/8
user@docker-test:~$
```
在测试或 RC 版本中，您会看到类似的输出；但是，在 Docker info 的输出中不会列出实验变量:
```
user@docker-test:~$ sudo docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 1.12.2-rc3
……
Insecure Registries:
 127.0.0.0/8
user@docker-test:~$
```
通过脚本安装后，您应该会发现 Docker 已经安装并运行，就像您已经通过操作系统的默认软件包管理器安装了 Docker 一样。虽然脚本应该在安装结束时提示您，但建议将您的用户帐户添加到 Docker 组。这可以防止您必须通过`sudo`升级您的权限才能使用 Docker CLI 命令。要将您的用户帐户添加到 Docker 组，请使用以下命令:
```
user@docker-test:~$ sudo usermod -aG docker 
```
确保您注销并重新登录，以使设置生效。
请记住，这些脚本也可以用于更新到任一渠道的最新版本。在这些情况下，该脚本仍然会提示您是否有可能在现有的 Docker 安装上进行安装，但它会提供冗长的说明，表明您可以忽略以下消息:
```
user@docker-test:~$ curl -sSL https://test.docker.com/ | sh
Warning: the "docker" command appears to already exist on this system.
If you already have Docker installed, this script can cause trouble, which is why we're displaying this warning and provide the opportunity to cancel the installation.
If you installed the current Docker package using this script and are using it again to update Docker, you can safely ignore this message.
You may press Ctrl+C now to abort this script.
+ sleep 20
```
虽然这不是获得测试和实验代码的唯一方法，但肯定是最简单的。您也可以下载预构建的二进制文件或自己构建二进制文件。关于如何做到这两点的信息可以在 Docker 位于[https://github.com/docker/docker/tree/master/experimental](https://github.com/docker/docker/tree/master/experimental)的 GitHub 页面上找到。
# 了解 MacVLAN 接口
我们将看到的第一个功能是 MacVLAN。在这个食谱中，我们将在 Docker 之外实现 MacVLAN，以便更好地理解它是如何工作的。理解 MacVLAN 在 Docker 之外如何工作对于理解 Docker 如何使用 MacVLAN 至关重要。在下一个食谱中，我们将介绍 MacVLAN 的 Docker 网络驱动程序实现。
## 做好准备
在本食谱中，我们将使用两台 Linux 主机(`net1`和`net2`)来演示 MacVLAN 功能。我们的实验室拓扑如下所示:
![Getting ready](img/5453_09_01.jpg)
假设主机处于基本配置，并且每台主机都有两个网络接口。`eth0`接口将定义一个静态 IP 地址，并作为每个主机的默认网关。`eth1`接口将配置无 IP 地址。作为参考，您可以找到以下每台主机的网络配置文件(`/etc/network/interfaces`):
*   `net1.lab.lab`
    ```
    auto eth0
    iface eth0 inet static
            address 172.16.10.2
            netmask 255.255.255.0
            gateway 172.16.10.1
            dns-nameservers 10.20.30.13
            dns-search lab.lab
    auto eth1
    iface eth1 inet manual
    ```
*   `net2.lab.lab`
    ```
    auto eth0
    iface eth0 inet static
            address 172.16.10.3
            netmask 255.255.255.0
            gateway 172.16.10.1
            dns-nameservers 10.20.30.13
            dns-search lab.lab
    auto eth1
    iface eth1 inet manual
    ```
### 注
虽然我们将在本食谱中介绍创建拓扑所需的所有步骤，但如果有些步骤不清楚，您可能希望参考[第 1 章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络结构*。[第 1 章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络结构*，更深入地介绍了基本的 Linux 网络结构和 CLI 工具。
## 怎么做…
MacVLAN 代表了一种完全不同的配置接口的方式，这种方式与我们到目前为止所看到的完全不同。我们研究的早期 Linux 网络配置依赖于松散模拟物理网络结构的结构。MacVLAN 接口本质上是逻辑的，并且绑定到现有的网络接口。支持 MacVLAN 接口的接口称为**父级**接口，可以支持一个或多个 MacVLAN 逻辑接口。让我们看一个在我们的实验室主机上配置一个 MacVLAN 接口的快速例子。
配置 MacVLAN 类型接口的方式与 Linux 网络接口上的所有其他类型非常相似。使用`ip`命令行工具，我们可以使用`link`子命令定义界面:
```
user@net1:~$ sudo ip link add macvlan1 link eth0 type macvlan 
```
在本书的第一章中，我们定义了多种不同的接口类型，您应该对这个语法很熟悉。创建后，下一步是为其配置一个 IP 地址。这也是通过`ip`命令完成的:
```