Untrusted memory as a read/write gadget oracle.
The last oracle we build is the memory-based one to find
a function that can copy data between the enclave and the
untrusted memory.
To find such a function, we build an ROP chain that
copies data from the memory in the enclave to the un-
trusted area only if the probed address (set as a return
address) is matched with the starting of the memcpy()
function. In particular, we set the stack to have an ad-
dress at the untrusted area for the first argument (i.e., the
destination of memcpy()), an address in the enclave for
the second argument (i.e., the source of memcpy()), and
the size of data to be copied for the third argument in
order to probe the return address as one of the functions
in the memcpy() family. Then, we set the value of the
destination address (at the untrusted area) with all zero
bytes. After this, we probe each address of the enclave
to find the memcpy() function. The probing finishes when
we detect any change in the untrusted memory because
the change proves that the memory copy is executed.
The memcpy() ROP gadget allows attackers to have
an arbitrary read/write in both directions in between the
enclave and the untrusted memory space because the at-
tacker can set the source and destination addresses arbi-
trarily at the attack stack.
4.2 A proof-of-concept Dark-ROP attack
After finding all gadgets, including the register pop gadget,
ENCLU, and memcpy(), an attacker can control the enclave
in two ways. First, the attacker can run any leaf function
through ENCLU by setting arbitrary values in the registers
that are used for setting parameters. Second, the attacker
can copy-in and copy-out the data from the untrusted
memory to the trusted in-enclave memory by using the
memcpy() gadget. In the Dark-ROP attack, we chain those
two capabilities together to run the security-critical op-
erations in SGX and then extract generated (secret) data
from the enclave to the untrusted space solely based on
launching the ROP attack. In particular, for the proof-
of-concept demonstration, we execute EGETKEY, a leaf
function for encryption key derivation, and extract the
generated key from the enclave Note that EGETKEY must
be executed in the enclave because the return value, which
is an encryption key, is unique to the enclave and tied to
the hardware.
Leaking the encryption key for data sealing.
The
EGETKEY leaf function handles the generation of the en-
cryption key used for data sealing and verifying the
REPORT in attestation. The requirement for calling the
EGETKEY function is that, first, the value of rax regis-
ter, which is the selector of ENCLU, should be set as 0x1.
Second, the rbx register should point to the address of
KEYREQUEST, which is a metadata that contains configura-
tions for key generation, and the address must be aligned
in 128 bytes. Third, the rcx register should point to a
writable address in the enclave because the processor will
store the generated key into that address.
To call EGETKEY through ROP gadgets correctly, we do
use the following steps. We first construct a KEYREQUEST
metadata object in the untrusted space and place a
memcpy() gadget to the attack stack to copy this object
to an 128-byte aligned in-enclave address that is both
writable and readable. Finding such memory area in the
enclave is not difficult. In the SGX security model, the
attacker already knows the region of the memory that is
used by the enclave because all the memory allocation is
handled by the untrusted operating system. Even though
the page permission in the page table entry could not be
matched with the permission on EPCM, the attacker can
scan the entire address space to find the in-enclave address
that can be used for a buffer. Second, we place multiple
pop gadgets to change the value of the registers. We set
rbx to be the in-enclave destination address and rcx to be
both a readable and writable region in the enclave. At the
same time, we set the rax register to 0x1, the index of the
EGETKEY leaf function. Third, we place the ENCLU gadget
to execute the EGETKEY leaf function. Finally, we put the
memcpy() gadget again by chaining the pop gadgets to set
rdi to a writable untrusted memory address and rsi to
the address of the generated key in the enclave, which is
the value of rcx on the second step.
The chain of gadgets will first call memcpy() to copy
the KEYREQUEST data from the untrusted space to the
in-enclave memory, execute EGETKEY with the prepared
KEYREQUEST as a parameter, and then call memcpy() again
to copy the generated key from the enclave to the un-
trusted space. At the end of the chain, the attacker can
extract the key at the untrusted memory address that is set
on rdi at the final step of memcpy() chaining. Using the
extracted key, the attacker can freely encrypt/decrypt the
data as well as generate the MAC to seal the data at the un-
trusted space because SGX uses the standard encryption
algorithm (e.g., AES-256-GCM), which can be replicated
anywhere if the same encryption key is supplied.
USENIX Association
26th USENIX Security Symposium    531
5 The SGX Malware
In this section, we demonstrate how the Dark-ROP attack
can be applied in the real world to completely disarm the
security guarantees of SGX.
From the proof-of-concept attack, the attacker can ob-
tain the ability to call any leaf functions of SGX within
the enclave to extract the secret data and inject data into
the (trusted) enclave space. In addition to calling leaf
functions to invoke the security-critical functions of SGX,
we present techniques to implement the SGX malware,
which can perform the man-in-the-middle (MiTM) attack
to mimic the real enclave program for running security-
critical operations within the enclave and to freely run
attackers’ code outside the enclave without any restric-
tions.
To achieve full control of the enclave, we construct the
SGX malware as follows: 1) By using the memcpy() gad-
get, the attacker can extract any secret data in the enclave,
including the program binary and data. Additionally, the
attacker runs the extracted program binary outside the
enclave to replicate the enclave execution. Moreover, the
attacker can inject any arbitrary code to this extracted
binary because it runs outside the enclave, which is fully
controllable by the attacker. 2) The attacker is able to
launch the security-critical operations of SGX that must
be run in the enclave at any time. This can be done by
launching the Dark-ROP attack to call the target leaf func-
tion with arbitrary register values. 3) The remote party
must not know that the enclave is under attack, even with
the remote attestation feature provided by SGX. This can
be achieved by hijacking remote attestation by calling
the EREPORT leaf function and constructing the correct
measurement data outside the enclave.
In the following, we illustrate how we construct the
SGX malware with preserving such requirements so that
the SGX malware can run at the attacker’s discretion
while bypassing attack detection using the remote attesta-
tion.
Extracting the hidden binary/data from the enclave.
The Dark-ROP attack allows the attacker to call the
memcpy() function with arbitrary source and destination
addresses (i.e., arbitrary read/write functionality). By uti-
lizing this, the attacker can set the source address to be
the start address of the binary section of the enclave, the
destination to be untrusted memory region, and the size
to be the entire mapped space for the enclave. Then, an
execution of the memcpy() gadget will copy the hidden
content of the binary from the enclave to the untrusted
area. After obtaining the binary by dumping the area, the
attacker can analyze the dump and run it to mimic the real
enclave program. Moreover, because this binary does not
run in the protected space, the attacker can freely inject
the code to alter the program for his/her own purpose.
Using a similar method, by setting the source address
to be the address of the secret data in the enclave, the
attacker can extract them to process them outside the
enclave without being protected by SGX.
Man-in-the-Middle ROP for launching the leaf func-
tions. While running extracted binary at the untrusted
space can mimic the execution of the regular instructions,
however, the leaf functions of SGX must be run inside
the enclave. Thus, when the extracted binary requires
calling the leaf functions, the SGX malware invokes the
function by launching the Dark-ROP attack against the
real enclave.
To this end, we construct the SGX malware as a Man-
in-the-Middle (MitM) architecture.
In particular, the
general mechanism for calling the leaf function in the
enclave by exploiting the ROP attack works as follows.
The SGX malware first injects required data for the target
leaf function into the enclave using the memcpy() gadget.
Next, the SGX malware loads the required parameters
of the leaf function at the general purpose registers by
using pop gadgets, and then jumps into ENCLU to call the
leaf function. Finally, the malware copies the generated
data by the leaf function from the enclave to the untrusted
memory.
After this process, the SGX malware can continue to
execute the code in the extracted binary by supplying
the (extracted) return values of the leaf function (e.g., a
derived encryption key for EGETKEY) to the current (un-
trusted) execution. This shows that the attacker has full
control over the binary because the untrusted execution
can run the regular instructions as well as the leaf func-
tions whenever they are required.
Bypassing remote attestation. The last attack target of
the SGX malware is to bypass remote attestation while
running the binary at the untrusted area. Since the attesta-
tion requires generating the report in the enclave, primar-
ily, we call the EREPORT leaf function by the Dark-ROP
attack to generate the measurement report, and we em-
ulate the entire process of the remote attestation in the
binary outside the enclave to reply the correct measure-
ment report to the remote server.
Before describing the emulation step, we present the
background on how remote attestation typically works, as
in Intel SGX SDK.
Remote attestation in Intel SGX SDK. The purpose
of remote attestation is to ensure the correct settings and
running of the enclave before conducting secret operations
such as provisioning secrets and establishing a secure
communication channel with the enclave in the remote
machine.
The Intel SGX SDK uses the protocol in Figure 6 for
532    26th USENIX Security Symposium
USENIX Association
Figure 6: The (simplified) remote attestation protocol of SGX.
the remote attestation of the enclave and establishing
a secure communication channel between the remote
server and the enclave. First, (1) the untrusted part of the
application deployed by an Independent Software Ven-
dor (ISV, i.e., software distributor), called the untrusted
program isv_app, launches the enclave program (we
call this trusted program isv_enclave). On launching
isv_enclave, isv_app requests the generation of Elliptic-
Curve Diffie-Hellman (ECDH) public/private key pair to
the enclave. The ECDH key pair will be used for sharing
secret with the remote server. Then, the isv_enclave gen-
erates the key pair, securely stores the private key in the
enclave memory and returns the public key to isv_app.
This public key will be sent to the remote server for later
use of sharing the secret for establishing a secure commu-
nication channel.
Second, on receiving the “hello” message from
isv_enclave, (2) the remote server generates its own
ECDH key pair that the server will use.
Third, (3) the server sends a quote request to the
isv_app, to verify if the public key that the server re-
ceived is from isv_enclave. Also, the server sends back
the public key (of the remote server) to isv_enclave.
To process the request, isv_app will invoke the func-
tion named Compute_DH_Key in isv_enclave to generate
the shared secret and the measurement report (we re-
fer this as REPORT).
It contains the ECDH public key
that isv_enclave uses as one of the parameters to bind
the public key with the REPORT.
Inside the enclave,
isv_enclave uses the EREPORT leaf function to generate
REPORT. On calling the leaf function, isv_enclave sets
the REPORTDATA, an object that passed as an argument to
the EREPORT leaf function, to bind the generated ECDH
public key to the REPORT. After isv_enclave generates
the REPORT, the untrusted isv_app delivers this to a Quot-
ing Enclave(QE), a new enclave (trusted) for verifying
the REPORT and then signs it with Intel EPID securely. As
a result, the REPORT generated by isv_enclave contains
the information for the ECDH public key that the enclave
uses, and this information is signed by the QE.
Fourth, (4) the signed REPORT will be delivered to the
remote server. The remote server can ensure that the
isv_enclave runs correctly at the client side and then use
the ECDH public key received at step (1) if the signed
REPORT is verified correctly.
Finally, the server run Compute_DH_Key to generate the
shared secret. (5) the remote server and isv_enclave
can communicate securely because they securely shared
the secret through the ECDH key exchange (with mutual
authentication).
Controlling the REPORT generation. To defeat the re-
mote attestation, and finally defeat the secure communica-
tion channel between the remote server and isv_enclave,
in the SGX malware, we aim to generate the REPORT from
isv_enclave with an arbitrary ECDH public key. For
this, we especially focus on part (3), how isv_enclave
binds the generated ECDH public key with the REPORT on
calling the EREPORT leaf function.
The Dark-ROP attack allows the SGX malware to have
the power of invoking the EREPORT leaf function with any
parameters. Thus, we can alter the parameter to generate
the REPORT that contains the ECDH public key that we