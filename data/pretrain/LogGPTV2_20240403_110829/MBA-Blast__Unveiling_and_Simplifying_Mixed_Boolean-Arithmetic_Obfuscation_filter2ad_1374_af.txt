plementation only handles simple dependence cases, i.e., sub-
stituting all common sub-expressions. A more precise depen-
dency analysis will be helpful to address this limitation.
It is also possible that attackers combine MBA obfuscation
with other data encoding techniques to create complex expres-
sions with bitwise and arithmetic operations but does not meet
1714    30th USENIX Security Symposium
USENIX Association
the MBA deﬁnition in this paper. MBA-Blast is designed for
resolving MBA expressions, so unfortunately it does not have
the capacity to directly reverse other obfuscation methods. It
is interesting to further investigate whether MBA-Blast can
beneﬁt other de-obfuscation techniques.
9 Conclusion
This paper tackles a data obfuscation scheme, Mixed Boolean-
Arithmetic (MBA) obfuscation, which uses both bitwise and
arithmetic operations to generate an unintelligible expression.
The cost of applying MBA obfuscation is rather low, but the
resulting expression becomes a tough challenge for reverse en-
gineering attempts, including advanced binary code analysis
utilizing SMT solvers. The existing efforts to counter MBA
obfuscation either work in an ad-hoc manner or suffer from
heavy overhead. In this paper, we investigate the underlying
mechanism of MBA obfuscation and prove a hidden two-way
transformation feature between 1-bit and n-bit variables. This
ﬁnding enlightens us to develop MBA-Blast, a novel MBA
deobfuscation technique. The key idea is to simplify MBA
expressions to normal forms and then perform arithmetic re-
duction in 1-bit space. Our large-scale MBA deobfuscation
experiment and real-world malware study demonstrate MBA-
Blast’s efﬁcacy and generality. Developing MBA-Blast not
only advances automated software reverse engineering, but
also delivers a benchmark serving as a baseline for future
research in this direction.
Acknowledgments
We would like to thank our shepherd Lorenzo Cavallaro and
the anonymous paper and artifact reviewers for their help-
ful feedback. We especially thank Thorsten Holz for the in-
sightful suggestions. We also thank VirusTotal for providing
the academic API and malware samples. This research was
supported by NSF grant CNS-1948489. Jiang Ming was sup-
ported by NSF grant CNS-1850434.
References
[1] Sebastian Schrittwieser, Stefan Katzenbeisser, Johannes Kinder, Georg
Merzdovnik, and Edgar Weippl. Protecting Software Through Ob-
fuscation: Can It Keep Pace with Progress in Code Analysis? ACM
Computing Surveys, 49(1), April 2016.
[2] Christian Collberg and Jasvir Nagra. Surreptitious Software: Obfus-
cation, Watermarking, and Tamperprooﬁng for Software Protection,
chapter 4.4, pages 258–276. Addison-Wesley Professional, 2009.
[3] Michael Sikorski and Andrew Honig. Practical Malware Analysis: The
Hands-On Guide to Dissecting Malicious Software, chapter 13, pages
269–296. No Starch Press, 2012.
[5] Christian Collberg, Clark Thomborson, and Douglas Low. Manufactur-
ing Cheap, Resilient, and Stealthy Opaque Constructs. In Proceedings
of the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Pro-
gramming Languages (POPL’98), 1998.
[6] Dongpeng Xu, Jiang Ming, and Dinghao Wu. Generalized Dynamic
In
Opaque Predicates: A New Control Flow Obfuscation Method.
Proceedings of the 19th Information Security Conference (ISC’16),
2016.
[7] Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pablo G
Bringas. SoK: Deep Packer Inspection: A Longitudinal Study of the
Complexity of Run-Time Packers. In Proceedings of the 36th IEEE
Symposium on Security and Privacy (S&P’15), 2015.
[8] Oreans Technologies. Code Virtualizer: Total Obfuscation against Re-
verse Engineering. http://oreans.com/codevirtualizer.php,
2019.
[9] VMProtect Software. VMProtect software protection. http://
vmpsoft.com, 2019.
[10] Kevin A. Roundy and Barton P. Miller. Binary-code Obfuscations in
Prevalent Packer Tools. ACM Computing Surveys, 46(1), 2013.
[11] Philip OKane, Sakir Sezer, and Kieran McLaughlin. Obfuscation: The
Hidden Malware. IEEE Security and Privacy, 9(5), 2011.
[12] Christian Collberg and Clark Thomborson. Software Watermarking:
Models and Dynamic Embeddings. In Proceedings of the 26th ACM
SIGPLAN-SIGACT Symposium on Principles of Programming Lan-
guages (POPL’99), 1999.
[13] Haoyu Ma, Chunfu Jia, Shijia Li, Wantong Zheng, and Dinghao Wu.
Xmark: Dynamic Software Watermarking Using Collatz Conjecture.
IEEE Transactions on Information Forensics and Security, 14(11),
March 2019.
[14] Stanley Chow, Philip Eisen, Harold Johnson, and Paul C Van Oorschot.
White-Box Cryptography and an AES Implementation. In International
Workshop on Selected Areas in Cryptography, 2002.
[15] Stanley Chow, Phil Eisen, Harold Johnson, and Paul C Van Oorschot.
A White-Box DES Implementation for DRM Applications. In ACM
Workshop on Digital Rights Management, 2002.
[16] Monirul Sharif, Andrea Lanzi, Jonathon Gifﬁn, and Wenke Lee. Auto-
matic Reverse Engineering of Malware Emulators. In Proceedings of
the 30th IEEE Symposium on Security and Privacy (S&P’09), 2009.
[17] Kevin Coogan, Gen Lu, and Saumya Debray. Deobfuscation of
Virtualization-obfuscated Software: A Semantics-based Approach. In
Proceedings of the 18th ACM Conference on Computer and Communi-
cations Security (CCS’11), 2011.
[18] Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya De-
bray. A Generic Approach to Automatic Deobfuscation of Executable
Code. In Proceedings of the 36th IEEE Symposium on Security and
Privacy (S&P’15), 2015.
[19] Babak Yadegari and Saumya Debray. Symbolic Execution of Obfus-
cated Code. In Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security (CCS’15), 2015.
[20] Sébastien Bardin, Robin David, and Jean-Yves Marion. Backward-
Bounded DSE: Targeting Infeasibility Questions on Obfuscated Codes.
In Proceedings of the 38th IEEE Symposium on Security and Privacy
(S&P’17), 2017.
[21] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten
Holz. Syntia: Synthesizing the Semantics of Obfuscated Code. In
Proceedings of the 26th USENIX Security Symposium (USENIX Secu-
rity’17), 2017.
[4] Chenxi Wang, Jonathan Hill, John C. Knight, and Jack W. Davidson.
Protection of Software-Based Survivability Mechanisms. In Proceed-
ings of International Conference on Dependable Systems and Networks
(DSN’01), 2001.
[22] Dongpeng Xu, Jiang Ming, Yu Fu, and Dinghao Wu. VMHunt: A
Veriﬁable Approach to Partial-Virtualized Binary Code Simpliﬁcation.
In Proceedings of the 25th ACM Conference on Computer and Com-
munications Security (CCS’18), 2018.
USENIX Association
30th USENIX Security Symposium    1715
[23] Binlin Cheng, Jiang Ming, Jianming Fu, Guojun Peng, Ting Chen,
Xiaosong Zhang, and Jean-Yves Marion. Towards Paving the Way for
Large-Scale Windows Malware Analysis: Generic Binary Unpacking
with Orders-of-Magnitude Performance Boost. In Proceedings of the
25th ACM Conference on Computer and Communications Security
(CCS’18), 2018.
[24] Yongxin Zhou, Alec Main, Yuan X. Gu, and Harold Johnson. Informa-
tion Hiding in Software with Mixed Boolean-Arithmetic Transforms.
In Proceedings of the 8th International Conference on Information
Security Applications (WISA’07), 2007.
[25] Christian Collberg, Sam Martin, Jonathan Myers, and Bill Zim-
in Ti-
http://tigress.cs.arizona.edu/transformPage/
Documentation for Arithmetic Encodings
merman.
gress.
docs/encodeArithmetic.
[26] Christian Collberg, Sam Martin, Jonathan Myers, and Bill Zimmerman.
Documentation for Data Encodings in Tigress. http://tigress.cs.
arizona.edu/transformPage/docs/encodeData.
[27] Quarkslab. Epona Application Protection v1.5. https://epona.
quarkslab.com, July 2019.
[28] Clifford Liem, Yuan Xiang Gu, and Harold Johnson. A Compiler-based
Infrastructure for Software-protection. In Proceedings of the 3rd ACM
SIGPLAN Workshop on Programming Languages and Analysis for
Security (PLAS’08), 2008.
[29] Irdeto. Irdeto Cloaked CA: a secure, ﬂexible and cost-effective condi-
tional access system. www.irdeto.com, 2017.
[30] Camille Mougey and Francis Gabriel. DRM Obfuscation Versus Aux-
iliary Attacks. In REcon Conference, 2014.
[31] Hamilton E. Link and William D. Neumann. Clarifying Obfuscation:
Improving the Security of White-Box DES. In International Confer-
ence on Information Technology: Coding and Computing, 2005.
[32] Andrey Bogdanov and Takanori Isobe. White-Box Cryptography Re-
visited: Space-Hard Ciphers. In Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security (CCS’15),
2015.
[33] Adrien Guinet, Ninon Eyrolles, and Marion Videau. Arybo: Manipula-
tion, Canonicalization and Identiﬁcation of Mixed Boolean-Arithmetic
Symbolic Expressions. In Proceedings of GreHack 2016, 2016.
[34] Ninon Eyrolles, Louis Goubin, and Marion Videau. Defeating MBA-
based Obfuscation. In Proceedings of the 2016 ACM Workshop on
Software PROtection (SPRO’16), 2016.
[35] Fabrizio Biondi, Sébastien Josse, Axel Legay, and Thomas Sirvent.
Effectiveness of Synthesis in Concolic Deobfuscation. Computers &
Security, 70, 2017.
[36] Michael Beeler, R William Gosper, and Richard Schroeppel. Hakmem.
Technical report, Massachusetts Institute of Technology, Artiﬁcial In-
telligence Laboratory, 1972.
[37] H.S. Warren. Hacker’s Delight. Addison-Wesley, 2003.
[38] Yongxin Zhou and Alec Main. Diversity via Code Transformations:
A Solution for NGNA Renewable Security. The National Cable and
Telecommunications Association Show, 2006.
[39] Ninon Eyrolles. Obfuscation with Mixed Boolean-Arithmetic Expres-
sions: Reconstruction, Analysis and Simpliﬁcation Tools. PhD thesis,
Université Paris-Saclay, 2017.
[40] Sebastian Banescu and Alexander Pretschner. Chapter Five - A Tutorial
on Software Obfuscation. Advances in Computers. 2018.
[41] Christian Collberg, Sam Martin, Jonathan Myers, and Jasvir Nagra.
Distributed Application Tamper Detection via Continuous Software
Updates. In Proceedings of the 28th Annual Computer Security Appli-
cations Conference, ACSAC ’12, 2012.
[42] Sandrine Blazy and Rémi Hutin. Formal Veriﬁcation of a Program
Obfuscation Based on Mixed Boolean-arithmetic Expressions.
In
Proceedings of the 8th ACM SIGPLAN International Conference on
Certiﬁed Programs and Proofs (CPP’19), 2019.
[43] Xavier Leroy. Formal Veriﬁcation of a Realistic Compiler. Communi-
cations of the ACM, 52(7), July 2009.
[44] Fabrizio Biondi, Sébastien Josse, and Axel Legay.
with Dynamic
By-
Synthe-
https://ercim-news.ercim.eu/en106/special/
passing Malware
sis.
bypassing-malware-obfuscation-with-dynamic-synthesis,
July 2016.
Obfuscation
[45] Dongpeng Xu, Jiang Ming, and Dinghao Wu. Cryptographic Function
Detection in Obfuscated Binaries via Bit-precise Symbolic Loop Map-
ping. In Proceedings of the 38th IEEE Symposium on Security and
Privacy (S&P’17), 2017.
[46] Eugene Kolodenker, William Koch, Gianluca Stringhini, and Manuel
Egele. PayBreak: Defense Against Cryptographic Ransomware. In
Proceedings of the 2017 ACM on Asia Conference on Computer and
Communications Security (ASIACCS’17), 2017.
[47] Christian Collberg, Clark Thomborson, and Douglas Low. A Taxonomy
of Obfuscating Transformations. Technical report, The University of
Auckland, 1997.
[48] Asia Slowinska, Traian Stancescu, and Herbert Bos. Howard: A Dy-
namic Excavator for Reverse Engineering Data Structures. In Pro-
ceedings of the 18th Annual Network and Distributed System Security
Symposium (NDSS’11), 2011.
[49] Andreas Moser Christopher Kruegel and Engin Kirda. Limits of Static
Analysis for Malware Detection. In Proceedings of the 23rd Annual
Computer Security Applications Conference (ACSAC’07), 2007.
[50] Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves
Marion. How to Kill Symbolic Deobfuscation for Free (or: Unleashing
the Potential of Path-oriented Protections). In Proceedings of the 35th
Annual Computer Security Applications Conference (ACSAC’19), 2019.
[51] Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves
Marion. Obfuscation: Where Are We in anti-DSE Protections? (a First
Attempt). In Proceedings of the 9th Workshop on Software Security,
Protection, and Reverse Engineering (SSPREW’19), 2019.
[52] Leonardo De Moura and Nikolaj Bjørner. Z3: an efﬁcient SMT solver.
In Proceedings of the 14th International Conference on Tools and
Algorithms for the Construction and Analysis of Systems (TACAS’08),
2008.
[53] Pei Wang, Shuai Wang, Jiang Ming, Yufei Jiang, and Dinghao Wu.
Translingual Obfuscation. In Proceedings of the 1st IEEE European
Symposium on Security and Privacy (Euro S&P’16), 2016.
[54] The Coq development team. The Coq proof assistant reference manual
Version 8.9.1. http://coq.inria.fr, 2019.
[55] MapleSoft. The Essential Tool for Mathematics. https://www.
maplesoft.com/products/maple/, 2020.
[56] WOLFRAM. WOLFRAM MATHEMATICA.
http://www.
wolfram.com/mathematica/, 2020.
[57] sagemath. SageMath. http://www.sagemath.org/, 2020.
[58] Peter Garba and Matteo Favaro. SATURN – Software Deobfuscation
Framework Based on LLVM. In Proceedings of the 3rd International
Workshop on Software Protection (SPRO’19), 2019.
[59] Sumit Gulwani, Oleksandr Polozov, and Rishabh Singh. Program
Synthesis. Foundations and Trends R(cid:13) in Programming Languages,
4(1-2):1–119, 2017.
[60] Chris Eagle. The IDA Pro Book: The Unofﬁcial Guide to the World’s
Most Popular Disassembler. No Starch Press, 2011.
1716    30th USENIX Security Symposium
USENIX Association
[61] Pascal Junod, Julien Rinaldini, Johan Wehrli, and Julie Michielin.
Obfuscator-LLVM–Software Protection for the Masses. In Proceedings
of the IEEE/ACM 1st International Workshop on Software Protection
(SPRO’15), 2015.
[62] Jiang Ming, Dongpeng Xu, Li Wang, and Dinghao Wu. LOOP: Logic-
Oriented Opaque Predicate Detection in Obfuscated Binary Code. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security (CCS’15), 2015.
[63] Ramtine Toﬁghi-Shirazi, Philippe Elbaz-Vincent, Irina Mariuca
Asavoae, and Thanh-Ha Le. Defeating Opaque Predicates Statically
through Machine Learning and Binary Analysis. In Proceedings of the
3rd International Workshop on Software Protection (SPRO’19), 2019.
[64] Lindsey O’Donnell. 50k Servers Infected with Cryptomining Malware
in Nansh0u Campaign. http://tiny.cc/vj9zsz, May 2019.
[65] Ed Targett. Chinese Hackers Dropped Rootkit in 50,000 Servers: Then
Left Theirs Wide Open. https://www.cbronline.com/news/
guardicore-chinese-hackers-servers, May 2019.
[66] VirusTotal. VirusTotal Intelligence: Combine Google and Facebook
and apply it to the ﬁeld of Malware. https://www.virustotal.
com/gui/intelligence-overview, 2020.
[67] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser,
Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazel-
wood. Pin: Building customized program analysis tools with dynamic
instrumentation. In Proceedings of the ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI), 2005.
(a) 8-bit result.
A MBA Samples from VMProtect malware
(b) 16-bit result.
We list more complex MBA samples found in VMProtect
malware as follows.
-x-y = ~(~(~(-1+x)|~(-1+x))+y)&~(~(~(-1+x)|~(-1+x))+y)
= ~(~(~(-1+x)&~(-1+x))+y)&~(~(~(-1+x)&~(-1+x))+y)
x+1-y = ~(~(x+1)+y)|~(~(x+1)+y)
= ~(~(x+1)+y)&~(~(x+1)+y)
a+b = ~(~(a+b)|~(a+b))|~(~(a+b)|~(a+b))
-x+~y = (~(-1+x)|~(-1+x))+(~y&~y)
~a+x&y = (~a&~a)+(~(~x|~y)|~(~x|~y))
x&y+a&b = (~(~x|~y)|~(~x|~y)) + (~(~a|~b)|~(~a|~b))
= (~(~x&~x)&~(~y&~y)) + (~(~a&~a)&~(~b&~b))
x|y+a|b = (~(~x&~y)&~(~x&~y)) + (~(~a&~b)&~(~a&~b))
= (~(~x|~x)|~(~y|~y)) + (~(~a|~a)|~(~b|~b))
B Z3 Solving Time Comparison on Dataset 2
Figure 8 presents the complete simpliﬁcation result of 8-bit,
16-bit, 32-bit, and 64-bit MBA samples in Dataset 2.
C A Complex MBA Example
Figure 9 shows the procedure of using MBA-Blast to simplify
the MBA sample in Figure 1.
(c) 32-bit result.
(d) 64-bit result.
Figure 8: Compare Z3 solving time when handling all differ-
ent data length in Dataset 2.
USENIX Association
30th USENIX Security Symposium    1717
050010001500200025008-bit MBA expressions10−210−1100101102103104Z3 Solve Time (Seconds)OriginalSSPAMSyntiaMBA-Blast0500100015002000250016-bit MBA expressions10−210−1100101102103104Z3 Solve Time (Seconds)OriginalSSPAMSyntiaMBA-Blast0500100015002000250032-bit MBA expressions10−210−1100101102103104Z3 Solve Time (Seconds)OriginalSSPAMSyntiaMBA-Blast0500100015002000250064-bit MBA expressions10−210−1100101102103104Z3 Solve Time (Seconds)OriginalSSPAMSyntiaMBA-Blast4 ∗ (¬x ∧ y) − (x ⊕ y) − (x ∨ y) + 4 ∗ ¬(x ∨ y) − ¬(x ⊕ y) − ¬y − (x ∨ ¬y) + 1 + 6 ∗ x + 5 ∗ ¬z + (¬(x ⊕ z)) − (x ∨ z) − 2 ∗ ¬x
− 4 ∗ (¬(x ∨ z)) − 4 ∗ (x ∧ ¬z) + 3 ∗ (¬(x ∨ ¬z))
= 4 ∗ (y − (x ∧ y)) − (x + y − 2 ∗ (x ∧ y)) − (x + y − (x ∧ y)) + 4 ∗ (−x − y + (x ∧ y) − 1) − (−x − y + 2 ∗ (x ∧ y) − 1) − (−y − 1)
− (−y + (x ∧ y) − 1) + 1 + 6 ∗ x + 5 ∗ (−z − 1) + (−x − z + 2 ∗ (x ∧ z) − 1) − 1 ∗ (x + z − (x ∧ z)) − 2 ∗ (−x − 1)
− 4 ∗ (−x − z + (x ∧ z) − 1) + 3 ∗ (z − (x ∧ z)) − 4 ∗ (x − (x ∧ z))
= 4 ∗ y − 4 ∗ (x ∧ y) − x − y + 2 ∗ (x ∧ y) − x − y + (x ∧ y) − 4 ∗ x − 4 ∗ y + 4 ∗ (x ∧ y) − 4 + x + y − 2 ∗ (x ∧ y) + 1 + y + 1 + y−
(x ∧ y) + 1 + 1 + 6 ∗ x − 5 ∗ z − 5 − x − z + 2 ∗ (x ∧ z) − 1 − x − z + (x ∧ z) + 2 ∗ x + 2 + 4 ∗ x + 4 ∗ z − 4 ∗ (x ∧ z) + 4 + 3 ∗ z
− 3 ∗ (x ∧ z) − 4 ∗ x + 4 ∗ (x ∧ z)
= x + y
Figure 9: MBA-Blast simpliﬁcation procedure of the example in Figure 1.
1718    30th USENIX Security Symposium
USENIX Association