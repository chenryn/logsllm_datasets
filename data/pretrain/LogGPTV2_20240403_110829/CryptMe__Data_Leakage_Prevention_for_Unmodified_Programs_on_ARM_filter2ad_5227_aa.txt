title:CryptMe: Data Leakage Prevention for Unmodified Programs on ARM
Devices
author:Chen Cao and
Le Guan and
Ning Zhang and
Neng Gao and
Jingqiang Lin and
Bo Luo and
Peng Liu and
Ji Xiang and
Wenjing Lou
CryptMe: Data Leakage Prevention for
Unmodiﬁed Programs on ARM Devices
Chen Cao1(B), Le Guan1, Ning Zhang2, Neng Gao3, Jingqiang Lin3, Bo Luo4,
Peng Liu1, Ji Xiang3, and Wenjing Lou2
1 The Pennsylvania State University, University Park, USA
{cuc96,lug14,pliu}@ist.psu.edu
2 Virginia Polytechnic Institute and State University, Blacksburg, USA
{ningzh,wjlou}@vt.edu
3 Institute of Information Engineering, CAS, Beijing, China
{gaoneng,linjingqiang,xiangji}@iie.ac.cn
4 The University of Kansas, Kansas City, USA
PI:EMAIL
Abstract. Sensitive data (e.g., passwords, health data and private
videos) can be leaked due to many reasons, including (1) the misuse
of legitimate operating system (OS) functions such as core dump, swap
and hibernation, and (2) physical attacks to the DRAM chip such as
cold-boot attacks and DMA attacks. While existing software-based mem-
ory encryption is eﬀective in defeating physical attacks, none of them can
prevent a legitimate OS function from accidentally leaking sensitive data
in the memory. This paper introduces CryptMe that integrates memory
encryption and ARM TrustZone-based memory access controls to pro-
tect sensitive data against both attacks. CryptMe essentially extends the
Linux kernel with the ability to accommodate the execution of unmodiﬁed
programs in an isolated execution domain (to defeat OS function mis-
use), and at the same time transparently encrypt sensitive data appeared
in the DRAM chip (to defeat physical attacks). We have conducted
extensive experiments on our prototype implementation. The evaluation
results show the eﬃciency and added security of our design.
1 Introduction
Driven by the pressures of time-to-market and development cost, Internet-of-
Things (IoT) manufacturers tend to build their systems atop existing open-
source software stacks, notably the Linux kernel. Millions of IoT devices are
running Linux kernel on ARM-based System-On-Chip (SoC), ranging from smart
IP cameras, in-vehicle infotainment systems, to smart routers, etc. However,
the swift prototyping process often comes at the cost of security and privacy.
With full-blown software stacks, these devices often expose a much larger attack
surface than we anticipated. Recent attacks against IoT devices have further
indicated that our IoT devices are at higher and higher risk of being hacked.
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 380–400, 2018.
https://doi.org/10.1007/978-3-030-00470-5_18
CryptMe: Data Leakage Prevention on ARM Devices
381
With a full-blown software stack deployed on IoT devices, sensitive data con-
tained in programs often spread across all layers of the memory system [7]. A
vulnerability in any layer can lead to the exposure of sensitive data. Unautho-
rized access to sensitive data residing on a DRAM chip is particularly serious
because the data contained in the DRAM frequently include unprotected sensi-
tive information (e.g., user credentials, video frames in an IP camera, Internet
traﬃc with health data). Its exposure can be a major security concern for IoT
device users.
In this paper, we aim to address two common types of DRAM-based memory
disclosure attacks. First, in a software-based attack, private data in a program
could be exposed to an attacker by misusing of benign OS functions or exploiting
read-only memory disclosure vulnerabilities. For example, attackers can trig-
ger normal OS functions such as coredump [22], hibernation/swap [12,21,34],
and logging [7] to export otherwise isolated private memory to external stor-
age. The second type of DRAM-based memory disclosure attack roots in the
cyber-physical characteristic of IoT devices. Speciﬁcally, IoT devices are often
deployed in diverse, and sometimes ambient environments; as a result, they
are usually physically unmonitored. Attackers could physically access them and
extract secrets contained in the DRAM chip [11]. Cold boot attack [16], bus-
monitoring attack [10] and DMA attack [5] are quite common forms of physical
attack. They can break the system even if the software is free of bugs.
Memory Encryption (ME) is a promising solution to address the aforemen-
tioned memory disclosure attacks. It operates on DRAM, and encrypts a por-
tion or all of the address space of a program at runtime [19]. However, on
one hand, ME solutions relying on hardware redesign increase the cost of the
chip [24], and are not feasible for incremental Commercial Oﬀ-The-Shelf (COTS)
defense deployment. On the other hand, existing general software-based ME
solutions [8,13,29] all leave a small working set (memory that is currently being
accessed) in clear-text to ensure the correct execution of a program. As a con-
sequence, it is still possible for the working set to be exposed.
Gap Statement. An ME solution that really works on defeating the associated
threats should protect both the non-working set memory and the working set
memory at all time. In particular, it should have the following features: (1)
The non-working set memory is encrypted; (2) The working set memory is in
clear-text, but does not appear in the vulnerable DRAM. (3) The working set
memory cannot be accessed by other software, including the OS. Unfortunately,
to the best of our knowledge, a ME solution meeting all these requirements is
still missing in the literature.
Software-based ME solutions can be classiﬁed into three types, as shown in
Fig. 1. Cryptkeeper [29] and RamCrypt [13] belong to Type A (see Fig. 1a). In
this category, most of the program data are encrypted while a small working set is
left unprotected (e.g., four pages in RamCrypt) in the DRAM. As a result, Type
A ME solutions are subject to both software and physical memory disclosure
attacks. Type B solutions (see Fig. 1b) eliminate all the occurrences of clear-
382
C. Cao et al.
SoC
Clear-text
DRAM
Clear-text
SoC
Clear-text
DRAM
SoC
DRAM
Cipher-text
Clear-text
Cipher-text
iRAM
or
Cache
DMA-capable 
Device
BUS
Cipher-text
User Space
Kernel Space
BUS
iRAM
or
Cache
DMA-capable 
Device
User Space
Kernel Space
BUS
iRAM
or
Cache
X
DMA-capable 
Device
X
User Space
Kernel Space
(a) ME solution with par-
tial data remaining in the
DRAM
(b) ME solution with-
out data remaining in the
DRAM
(c) ME solution with-
out data remaining in the
DRAM and immune to
software memory disclo-
sure attacks
Fig. 1. Classiﬁcation of ME solutions.
text program data in the DRAM chip by further protecting the working set by
constraining them in the System-on-Chip (SoC) components such as iRAM) [18]
or processor cache [8]. The SoC components are commonly believed to be much
more diﬃcult to attack compared with the DRAM chip [8]. Type B ME solutions
are eﬀective in defeating cold-boot attacks to DRAM chips. Unfortunately, the
clear-text working set residing in the SoC components can still be exposed by
software memory disclosure or DMA-capable devices.
As shown in Fig. 1c, Type C ME solutions disable both the OS kernel and
DMA-capable devices to access iRAM. To implement a Type C ME system, a
straightforward solution would be to further isolate clear-text program data in
iRAM/cache from the OS kernel. In the ARM platform, the TrustZone architec-
tural extension seems to be an ideal solution. With TrustZone, an ARM processor
could run in two diﬀerent execution domains – secure world or normal world. The
OS in the normal world cannot access iRAM monopolized by the secure world.
Therefore, if we execute the program in the secure world, and integrate existing
type B ME solution, the problem seems to be solved. However, this is actually
very challenging based on the following observations.
– O1: A legacy program runs in the same world with the OS. If the iRAM is a
secure resource only accessible by the secure world, the legacy program in the
normal world would simply crash; on the other hand, if the iRAM is designated
to be a non-secure resource, the OS can still reveal the contents of the iRAM.
– O2: If we instead execute the legacy program in the secure world, there is
no execution environment in the secure world. In particular, system services
including system calls, interruptions, and page fault, etc., are all missing in
the secure world.
– O3: To tackle the problem mentioned in O2, we could duplicate a full ﬂedged
OS in the secure world. However, the code base in the secure world will be
inﬂated, making it prone to exploits.
Our Solution. In this work, we present CryptMe, the ﬁrst type C ME solution
for COTS ARM platforms. CryptMe addresses the aforementioned challenges
CryptMe: Data Leakage Prevention on ARM Devices
383
by oﬄoading a program in the secure world. Instead of employing a ﬂedged OS
to respond to the system service requests, we build a thin privileged layer in the
secure world. The privileged layer does not provide system services itself, but
forwards the requests to the OS in the normal world. By further incorporating
type B ME solution, we ensure that both the non-working set and working set
memory do not appear in clear-text in the DRAM chip, and the working set
memory cannot be accessed by any software in the normal world.
Speciﬁcally, we protect sensitive data (called SenData) by encrypting all the
anonymous memory segments (i.e., memory not backed a ﬁle, such as bss, heap,
stack, and anonymously mapped memory segments) and private Copy-On-Write
(COW) segments (such as data segment containing global and static variables).
When the encrypted data are accessed, they are transparently decrypted in the
iRAM. The program code in the DRAM chip is not protected. The key insight
behind this is that the code segment of a program is usually publicly available so
there is no need to protect its conﬁdentiality. To further protect data in the iRAM
from software attacks, CryptMe sets iRAM to be a secure resource. Therefore,
even the OS kernel cannot access the data in it. To execute a protected process
(called SenProcess), CryptMe oﬄoads it to an isolated execution domain –
TrustZone secure world, and a lightweight trusted execution runtime residing in
the secure world is responsible for maintaining the execution environment of the
process (such as setting up page tables). In summary, CryptMe ensures that
clear-text program data only exists in iRAM, and we restrict accesses to iRAM
from the Linux kernel by TrustZone conﬁguration.
In summary, we made the following contributions.
– We have designed CryptMe, an ME system that prevents the clear-text
sensitive data of unmodiﬁed programs from leaking to the DRAM for ARM-
based IoT devices.
– CryptMe is the ﬁrst ME system that is able to tackle both physical mem-
ory disclosure attacks and software attacks, including misuse of benign OS
functions and real-only memory disclosure attacks.
– We have implemented CryptMe prototype on a Freescale i.MX6q experiment
board. Security validation shows that CryptMe eﬀectively eliminates all the
occurrence of private program data in the DRAM, and thwarts software-based
memory disclosure attacks.
2 Background
2.1 Memory Disclosure Attack
Though full system memory encryption has been a topic of interest, the privacy
concerns for memory disclosure have not been a real threat until demonstrations
of hardware-based memory disclosure attacks [5,10,16]. DMA capable devices
such as Firewire were leveraged to read system memory [5]. Since DMA engine
is independent of the processor, and directly talks to the DRAM chips, as long
as the device is powered on, all the DRAM contents can be read out. In [16],
384
C. Cao et al.
Halderman et al. transplanted the memory chip of a laptop onto a diﬀerent one
where there was no software protection on the physical memory. Using a simple
dust blower to keep the memory chip cool, it was possible to extract almost all
of the information from the memory. The signiﬁcance of this attack is that it
can bypass all the software system protections. The remanence eﬀect of DRAM
was also exploited in [6,26] to launch cold-boot attacks to smartphones, where
the system is rebooted into a rouge OS to bypass the memory protection. For
advanced adversaries, it might even be possible to snoop the communication
between the CPU and the DRAM [10].
Memory disclosure can also occur due to misuse of legitimate OS functions
or passive read-only memory disclosure attacks. For example, the memory dump
function is a very useful feature in modern OSes. A core dump image provides
valuable information about the execution state when a crash happens which helps
developer identify the crash point. However, attackers exploited this feature to
dump sensitive data of a process [22]. Taking advantage of read-only memory
disclosure vulnerabilities, the authors in [17] successfully exposed the private
keys of an OpenSSH server and an Apache HTTP server.