end
func1
func2
func3
```
代码很简单，3 个方法，用 sleep 模拟耗时的 IO 操作。 运行代码（环境 MRI Ruby 1.9.3） 结果是：
```
$ time ruby block_io1.rb
sleep 3 seconds in func1
sleep 2 seconds in func2
sleep 5 seconds in func3
real  0m11.681s
user  0m3.086s
sys 0m0.152s
```
比较慢，时间都耗在 sleep 上了，总共花了 10 多秒。
采用多线程的方式，改写如下：
```ruby
def func1
  puts "sleep 3 seconds in func1\n"
  sleep(3)
end
def func2
  puts "sleep 2 seconds in func2\n"
  sleep(2)
end
def func3
  puts "sleep 5 seconds in func3\n"
  sleep(5)
end
threads = []
threads << Thread.new { func1 }
threads << Thread.new { func2 }
threads << Thread.new { func3 }
threads.each { |t| t.join }
```
运行的结果是：
```
$ time ruby block_io2.rb
sleep 3 seconds in func1
sleep 2 seconds in func2
sleep 5 seconds in func3
real  0m6.543s
user  0m3.169s
sys 0m0.147s
```
总共花了 6 秒多，明显快了许多，只比最长的 sleep 5 秒多了一点。
上面的例子说明，Ruby 的多线程能够应付 IO Block，当某个线程处于 IO Block 状态时，其它的线程还可以继续执行，从而使整体处理时间大幅缩短。
- 另一种写的方式
    ```ruby
    def func1
    puts "sleep 3 seconds in func1\n"
    sleep(3)
    end
    threads = []
    10.times do
    threads << Thread.new { func1 }
    end
    threads.each { |t| t.join }
    ```
# Ruby GIL 的影响
```
require 'securerandom'
require 'zlib'
data = SecureRandom.hex(4096000)
16.times { Zlib::Deflate.deflate(data) }
```
代码先随机生成一些数据，然后对其进行压缩，压缩是非常耗 CPU 的，在我机器 (双核 CPU, MRI Ruby 1.9.3) 运行结果如下：
```
$ time ruby gil1.rb
real  0m8.572s
user  0m8.359s
sys 0m0.102s
```
更改为多线程版本，代码如下：
```
require 'securerandom'
require 'zlib'
data = SecureRandom.hex(4096000)
threads = []
16.times do
  threads << Thread.new { Zlib::Deflate.deflate(data) }
end
threads.each {|t| t.join}
```
多线程的版本运行结果如下：
```
$ time ruby gil2.rb
real  0m8.616s
user  0m8.377s
sys 0m0.211s
```
从结果可以看出，由于 MRI Ruby GIL 的存在，Ruby 多线程并不能重复利用多核 CPU，使用多线程后整体所花时间并不缩短，反而由于线程切换的影响，所花时间还略有增加。
# JRuby 去除了 GIL
使用 JRuby (我的机器上是 JRuby 1.7.0) 运行 gil1.rb 和 gil2.rb，得到很不一样的结果。
```
$ time jruby gil1.rb
real  0m12.225s
user  0m14.060s
sys 0m0.615s
```
```
$ time jruby gil2.rb
real  0m7.584s
user  0m22.822s
sys 0m0.819s
```
可以看到，JRuby 使用多线程时，整体运行时间有明显缩短（7.58 比 12.22），这是由于 JRuby 去除了 GIL，可以真正并行的执行多线程，充分利用了多核 CPU。
补充说明，Ruby 2.0 Zlib 库去除了 GIL
在 Ruby 2.0 下，由于 Zlib 去除了 GIL，见：https://github.com/ruby/ruby/blob/v2_0_0_0/NEWS#L512-L513/，执行多线程版本 gil2.rb 有非常大的性能提升。 详细数据见：
```
time ruby gil1.rb
real    0m8.708s
user    0m8.664s
sys 0m0.025s
time ruby gil2.rb
real    0m2.102s
user    0m17.630s
sys 0m0.147s
```
这是在一台 单 CPU 6 核（带超线程）机器，在 ruby-2.0.0-p195 的执行结果。 但是对于普通的 Ruby 代码 和 类库，Ruby 2.0 还是有 GIL 存在，限制利用多线程并行能力。 我另外构建了例子 gil_digest1.rb 和 gil_digest2.rb （见 Github 项目），在 Ruby 2.0 下运行并没有性能提升。 感谢 @zj0713001 @hooopo @5long 的提醒和说明。
总结：Ruby 多线程可以在某个线程 IO Block 时，依然能够执行其它线程，从而降低 IO Block 对整体的影响，但由于 MRI Ruby GIL 的存在，MRI Ruby 并不是真正的并行执行，JRuby 去除了 GIL，可以做到真正的多线程并行执行。
---
# GIL
MRI 里有个东西叫全局解释器锁(global interpreter lock)。这个锁环绕着 Ruby 代码的执行。即是说在一个多线程的上下文中，在任何时候只有一个线程可以执行 Ruby 代码。 因此，假如一台8核机器上跑着8个线程，在特定的时间点上也只有一个线程和一个核心在忙碌。GIL 一直保护着 Ruby 内核，以免竞争条件造成数据混乱。把警告和优化放一边，这就是它的主旨了。
**数组附加是非线程安全的**
几乎没什么事在 Ruby 里是隐式线程安全的。以附加数组为例：
```
array = []
5.times.map do
  Thread.new do
    1000.times do
      array << nil
    end
  end
end.each(&:join)
puts array.size
```
这里有 5 个线程共享一个数组对象。每个线程将 nil 放入数组 1000 次。因此，数组里应该有 5000 个元素，对吧？
```
$ ruby pushing_nil.rb
5000
$ jruby pushing_nil.rb
4446
$ rbx pushing_nil.rb
3088
```
即使这个微不足道的例子，也足以揭示 Ruby 里的一个操作并非隐式线程安全的。或许是？实际上发生什么了呢？
请注意 MRI 的结果是正确的, 5000。但是 JRuby 和 Rubinius 都错了。如果你再跑一遍，你很可能会看到 MRI 依然正确，但是 JRuby 和 Rubinius 给出了不同的错误结果。
这些不同的结果是 GIL 造成的。因为 MRI 有 GIL，即使同时有 5 个线程在跑，在一个时间点上也只有一个线程是活动的。JRuby 和 Rubinius 没有 GIL，所以当你有 5 个线程在跑，你就真的有 5 个线程通过获取核心在并行地跑。
**多线程如何腐化数据**
无论你是用 MRI,JRuby 或是 Rubinius，Ruby 语言是用其他语言实现的。 MRI 是用 C 实现的，JRuby 用 Java,Rubinius 是 Ruby 和 C++ 的混合体。于是当你有这样一个 Ruby 操作时：
```
array <<< nil
```
实际上在底层实现上会扩展为一大堆代码。例如，下面是 Array#<<在 MRI 中的实现：
```
VALUE
rb_ary_push(VALUE ary, VALUE iterm)
{
   long idx = RARRAY_LEN(ary);
   ary_ensure_room_for_push(ary, 1);
   RARRAY_ASET(ary, idx, item);
   ARY_SET_LEN(ary, idx + 1);
   return ary;
}
```
注意至少 4 个不同的底层操作。
- 获取数组的当前长度
- 检查数组里是否有空间容纳其他元素。
- 将元素附件到数组
- 将数组的长度属性置为原值 +1。
每个操作还回调用别的函数或者宏。我提到这些是为了向你们展示多线程是如何能够破坏数据的。在但线程环境中，你可以观察并简单地跟踪这个短代码的轨迹。
话句话说，我们已经习惯了以线性的方式逐句执行代码并推断"真实世界"的状态。我们通常就是这么写代码的。
当多线程乱入，这就不可行了。这很像物理变化的规则。当有两个线程，每个线程维护这个自己的代码轨迹。由于线程共享同一个内存空间，而这些线程可以同时改变"真实世界"中的状态。
一个线程可能会打扰另一个线程，从此改变事物的状态，之后原先的线程完全不知状态已经被改变了。
这里是我的小系统的基本状态：
有两个活跃线程，同时进入这个函数 (C 语言中的)。将 1-4 步看做 MRI 中 Array#<< 的伪代码实现，之前你见过的。一旦两个线程进入这个函数，就可能出现一系列事件，假设从线程 A 开始：
这看着更复杂了，但是只要跟着箭头的方向，你就可以穿过这个流程。我还加了在每个步骤上一些标签从每个线程的角度来显示各种状态。
这只是其中一种可能性。
于是线程 A 沿着函数的常规路径执行，但当执行到步骤 3 时，发生了上下文切换！线程 A 被暂停在当前位置。之后线程 B 接管了进程并运行整个函数，附加它自己的元素并增加length属性。
一旦线程 B 完事了，线程 A 就恢复执行。A 会在其中断的位置走起。记住，线程 A 是在增加length属性前被暂停的，自然会从往下增加length属性。只不过，A 并不知道线程 B 已经改变了事物的状态。
于是线程 B 设置length为 1，之后线程 A 又把length设为 1，尽管它们格子的元素都已经被附加到了 Array 上。数据已经被玩坏了。看到图中的小闪电了吗，就这这个意思。
如图中例子所示，JRuby 和 Rubinius 中的这一系列的事件会带来错误的结果。
除此之外，在 JRuby 和 Rubinius 里，事情要更为复杂，因为线程实际可以平行跑。在该图中，一个线程被暂停，另一个在运行，而在真正并行的环境里，多个线程可以同时运行。
所以，为什么 Ruby 不保护我们远离这些？ 出于同样的原因，其他一些编程语言内核也不提供线程安全保护：它成本太高。对所有的 Ruby 实现提供线程安全的数据结构不是不可能，但这需要额外的开销，拖了单线程代码的后腿。
上下文切换源于操作系统的线程调度程序。在所有我展示过的 Ruby 语言实现中，一个 Ruby 线程依托于一个原生的操作系统线程。操作系统必须保证没有一个线程可以独霸所有可用资源，如 CPU 时间，于是它实现了调度算法，使得雨露均沾。
这表现为一系列的暂停会恢复。每个线程都有机会消耗资源，之后它暂停在其轨道上，以便其他线程可以有机可乘。随着时间推移，这个线程经会被不断被恢复。
这一做法提高了操作系统的效率，但也引入和一定程度的不确定性和程序正确性的难度。例如，Array#<<操作现在需要考虑到它可以随时暂停，另一个线程可以并行地执行相同的操作，改变脚下"世界"的状态。
如果想确保这样的线程间中断不发生，就应该使操作具有原子性。通过原子性操作，可以保证线程在完成动作前不会被打断，这就防止了我们例子中的，在步骤 3 被打断，并最终在步骤 4 时恢复导致的数据误。
是操作具有原子性的最简方案是使用锁。下面的代码会确保结果的正确，不论是在 MRI,JRuby 还是 Rubinius 里。
```
array = []
mutex = Mutex.new
5.times.map do
  Thread.new do
    mutex.synchronize do
      1000.times do
        array << nil
      end
    end
   end
end.each(&:join)
puts array.size
```