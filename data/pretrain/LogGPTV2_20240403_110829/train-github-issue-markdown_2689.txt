# Checklist
- I have read the relevant section in the contribution guide on reporting bugs.
- I have checked the issues list for similar or identical bug reports.
- I have checked the pull requests list for existing proposed fixes.
- I have checked the commit log to determine if the bug was already fixed in the master branch.
- I have included all related issues and possible duplicate issues in this report (if there are none, check this box anyway).

## Mandatory Debugging Information
- I have included the output of `celery -A proj report` in the issue. (If you are unable to do this, at least specify the Celery version affected).
- I have verified that the issue exists against the `master` branch of Celery.
- I have included the contents of `pip freeze` in the issue.
- I have included all the versions of all the external dependencies required to reproduce this bug.

## Optional Debugging Information
- I have tried reproducing the issue on more than one Python version and/or implementation.
- I have tried reproducing the issue on more than one message broker and/or result backend.
- I have tried reproducing the issue on more than one version of the message broker and/or result backend.
- I have tried reproducing the issue on more than one operating system.
- I have tried reproducing the issue on more than one worker pool.
- I have tried reproducing the issue with autoscaling, retries, ETA/Countdown, and rate limits disabled.
- I have tried reproducing the issue after downgrading and/or upgrading Celery and its dependencies.

## Related Issues and Possible Duplicates
### Related Issues
- #5265

### Possible Duplicates
- None

## Environment & Settings
- **Celery Version**: 4.3.0
- **`celery report` Output**:
  ```
  [Insert `celery -A proj report` output here]
  ```

## Steps to Reproduce
1. [Step 1]
2. [Step 2]
3. [Step 3]

## Required Dependencies
- **Minimal Python Version**: N/A or Unknown
- **Minimal Celery Version**: 4.3.0
- **Minimal Kombu Version**: N/A or Unknown
- **Minimal Broker Version**: N/A or Unknown
- **Minimal Result Backend Version**: N/A or Unknown
- **Minimal OS and/or Kernel Version**: N/A or Unknown
- **Minimal Broker Client Version**: N/A or Unknown
- **Minimal Result Backend Client Version**: N/A or Unknown

### Python Packages
- **`pip freeze` Output**:
  ```
  [Insert `pip freeze` output here]
  ```

### Other Dependencies
- N/A

## Minimally Reproducible Test Case
[Provide a minimal test case that reproduces the issue.]

## Expected Behavior
The `signature.link` method should raise an `AttributeError` if the signature is built with the `from_dict` class method. It should call the `from_dict` class method if this happens to transform the dictionary into a `Signature` instance. The call should be recursive to rebuild all sub-signatures if they are dictionary instances instead of `Signature` instances.

## Actual Behavior
```
[2019-10-31 15:35:07,882: ERROR/ForkPoolWorker-8] Task cancel[5eaedd7c-9d11-42e6-88fd-952b2526ab2a] raised unexpected: AttributeError("'dict' object has no attribute 'link'")
Traceback (most recent call last):
  File "/home/[...]/python3.7/site-packages/celery/app/trace.py", line 385, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/[...]/venv/lib/python3.7/site-packages/celery/app/trace.py", line 650, in __protected_call__
    return self.run(*args, **kwargs)
  [...]
  File "/home/[...]/venv/lib/python3.7/site-packages/celery/canvas.py", line 1351, in link
    self.body.link(callback)
  File "/home/[...]/venv/lib/python3.7/site-packages/celery/canvas.py", line 1041, in link
    return self.tasks[0].link(sig)
AttributeError: 'dict' object has no attribute 'link'
```

## Suggested Fix
I am not an expert in Celery code, but perhaps it would be possible to replace:
```python
def link(self, sig):
    # Simply link to first task
    sig = sig.clone().set(immutable=True)
    return self.tasks[0].link(sig)
```
with:
```python
def link(self, sig):
    # Simply link to first task
    sig = sig.clone().set(immutable=True)
    try:
        return self.tasks[0].link(sig)
    except AttributeError:
        return Signature.from_dict(self.tasks[0]).link(sig)
```
The same approach should apply to `link_error`.