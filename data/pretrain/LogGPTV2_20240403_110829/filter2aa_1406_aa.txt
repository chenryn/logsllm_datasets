INTRODUCTION TO 
HARDWARE HACKING
HOW YOU TOO CAN FIND A DECADE OLD BUG IN WIDELY DEPLOYED DEVICES
AVAYA 9600 DESKPHONE ‚ÄîA CASE STUDY
WHO AM I ?
‚Ä¢ PHILIPPE LAULHERET
‚Ä¢ SENIOR SECURITY RESEARCHER FOR MCAFEE'S ADVANCED THREAT RESEARCH
‚Ä¢ @PHLAUL
‚Ä¢ 2 YEARS EMBEDDED SECURITY, 4 YEARS C++ DEV
WHY SHOULD YOU CARE ABOUT HARDWARE HACKING?
AVAYA
9600 SERIES IP DESKPHONE
‚Ä¢ 2ND LARGEST VOIP SOLUTION PROVIDER
‚Ä¢ 90% OF FORTUNE 100
‚Ä¢ 9600 SERIES STARTED IN 2006, SOON EOL
PRIOR ART
‚Ä¢
LOTS OF DOCUMENTATION ABOUT HARDWARE HACKING (SEE LAST SLIDE FOR LINKS)
‚Ä¢
INTRODUCTION TO ARM
‚Ä¢
HARDWARE HACKING BLOGS (ROUTERS, IOT, ‚Ä¶)
‚Ä¢
ACCESSIBLE INTRODUCTION TO ELECTRONICS (ADAFRUIT, SPARKFUN)
‚Ä¢
EMBEDDED CAPTURE THE FLAG
‚Ä¢
HARDWARE HACKING VILLAGE
‚Ä¢
‚Ä¶
‚Ä¢
RED BALLOON SECURITY FOUND 2 RCE IN THE SAME SERIES OF PHONE
‚Ä¢
‚ÄúSTEPPING P3WNS‚Äù, RSA 2014
THE NEXT 40 MINUTES
‚Ä¢ USE THE PHONE AS A SPRINGBOARD TO TALK ABOUT HARDWARE HACKING
‚Ä¢ SHARE THE HOW, WHY, WHAT IF, FAILED ATTEMPTS, ETC. 
‚Ä¢ IF I CAN DO IT, SO CAN YOU!
HOW DID THIS PROJECT START?
FIRST STEP: RECON
‚Ä¢ IF IT HAS RADIO (WIFI, BLUETOOTH,‚Ä¶) IT WILL BE ON THE FCC WEBSITE
Source: https://fccid.io/TYM-9641GS (not our phone model, but part of the same 96xx series)
Source: https://fccid.io/TYM-9641GS
FIRST STEP: RECON
‚Ä¢ IF IT HAS RADIO (WIFI, BLUETOOTH,‚Ä¶) IT WILL BE ON THE FCC WEBSITE
‚Ä¢ FIND ONLINE MANUALS, MARKETING MATERIAL, ETC.
FIRST STEP: RECON
‚Ä¢ IF IT HAS RADIO (WIFI, BLUETOOTH,‚Ä¶) IT WILL BE ON THE FCC WEBSITE
‚Ä¢ FIND ONLINE MANUALS, MARKETING MATERIAL, ETC.
‚Ä¢ FIND FORUM OF USERS (SYSADMIN, ‚Ä¶)
‚Ä¢ LOOK ONLINE FOR FIRMWARE DOWNLOADS
WHAT DO WE DO NOW? 
LET‚ÄôS VOID WARRANTIES!
IDENTIFYING THE MAIN COMPONENTS
‚Ä¢ USUALLY WE CAN FIND
‚Ä¢
CPU (MAYBE MORE THAN ONE) OR SYSTEM ON CHIP (SOC)
‚Ä¢
RAM
‚Ä¢
ON BOARD STORAGE (FLASH CHIP, EEPROM, SDCARD, ‚Ä¶)
‚Ä¢
WIFI/BLUETOOTH MODULE (MAYBE UNDER A METALLIC SHIELD)
‚Ä¢
‚Ä¶
‚Ä¢ COMPONENTS HAVE LABELS PRINTED ON THEM
‚Ä¢
GOOGLE THE LABEL TO FIND MORE INFORMATION
‚Ä¢
DATASHEET TELL YOU HOW TO USE THE COMPONENT
‚Ä¢
SOMETIMES DATASHEET ARE NOT PUBLICLY AVAILABLE 
RAM
CPU
???
UART
UART
Keyed RJ45
EEPROM
TEST POINTS AND DEBUG 
HEADERS
‚Ä¢ WHY WOULD YOU EXPECT THEM?
‚Ä¢
USE SAME PCB AS THE DEVELOPMENT ONES
‚Ä¢
MANUFACTURING PROCESS (FLASH, VERIFICATION)
‚Ä¢
POST MORTEM
‚Ä¢ WHAT TO LOOK FOR? 
‚Ä¢
UART (CONVENIENTLY LABELED HERE ‚ò∫)
‚Ä¢
JTAG
‚Ä¢
TEST POINTS
‚Ä¢
DEBUG HEADERS
‚Ä¢ UART
‚Ä¢
4 (SOMETIMES 3) PINS (RX, TX, 3.3/5V, GND)
‚Ä¢
USED FOR SERIAL COMMUNICATION
‚Ä¢
USUALLY THE TEST POINTS ARE ALIGNED; NOT ALWAYS
‚Ä¢
VCC (3.3V, 5V, ‚Ä¶) IS OPTIONAL (AKA USUALLY BETTER NOT TO CONNECT IT)
‚Ä¢
NEED TO KNOW/FIND CONNECTION SPEED (THE BAUD RATE)
‚Ä¢
IF YOU SEE SOMETHING, LIKE RANDOM BYTES, JUST TRY DIFFERENT BAUD RATE
‚Ä¢
ONLY SO MANY COMMON ONES
‚Ä¢
‚ÄúAUTO-BAUD‚Äù FEATURE
TEST POINTS AND DEBUG 
HEADERS
‚Ä¢ JTAG
‚Ä¢
USED FOR DEBUGGING HARDWARE
‚Ä¢
LOTS OF DIFFERENT PINOUTS, BUT ONLY A FEW PINS NEEDED
‚Ä¢
STANDARD CONNECTORS, BUT NOT ALWAYS THERE
‚Ä¢
MAY HAVE TO SOLDER RESISTOR ON UNPOPULATED HEADERS
‚Ä¢
CAN BE USED TO DUMP MEMORY (SOMETIMES)
TEST POINTS AND DEBUG 
HEADERS
http://www.keil.com/support/man/docs/ulink2/ulink2_hw_connectors.htm
THE HARDWARE HACKING TOOLSET 
THE HARDWARE HACKING 
TOOLSET 
‚Ä¢ MULTIMETER
‚Ä¢
FIND VOLTAGE OF UNKNOWN CHIP
(3.3V,5V)
‚Ä¢
USE CONTINUITY TESTING TO FIND WHERE
TEST POINTS ARE CONNECTED TO
‚Ä¢
AND VERIFY PROPER CONNECTION
THE HARDWARE HACKING 
TOOLSET 
‚Ä¢ LOGIC ANALYZER
‚Ä¢
DIGITAL ELECTRONIC IS 1 AND 0
‚Ä¢
(IN THE FORM OF 3.3V AND 0V OR 5V AND 0V, OR ‚Ä¶)
‚Ä¢
CAN DECODE PROTOCOLS AND PROVIDE AN HIGHER
LEVEL OF ABSTRACTION (UART TO ‚ÄúDATA‚Äù, ‚Ä¶)
THE HARDWARE HACKING 
TOOLSET 
‚Ä¢ SERIAL CONSOLE CABLE (‚ÄúFTDI CABLE‚Äù)
‚Ä¢
CONNECTS TO UART
‚Ä¢
USUALLY HANDLE EITHER 3.3V OR 5V
‚Ä¢
NOT BOTH! 
‚Ä¢
THE SPARK FUN ONE CAN BE CONVERTED
ONE TO ANOTHER BY CUTTING A TRACE
‚Ä¢
CAN POWER DEVICES SOMETIMES
‚Ä¢
(HENCE THE VCC PIN FROM BEFORE)
THE HARDWARE HACKING 
TOOLSET 
‚Ä¢
BUSPIRATE
‚Ä¢
TALKS LOTS OF PROTOCOLS
‚Ä¢
UART
‚Ä¢
SPI
‚Ä¢
I2C
‚Ä¢
‚Ä¶
‚Ä¢
CAN USE PYTHON TO CONTROL IT
‚Ä¢
EXTREMELY VERSATILE
‚Ä¢
DUMP FLASH
‚Ä¢
MODIFY EEPROM
‚Ä¢
PROGRAM AVR 
‚Ä¢
‚Ä¶
THE HARDWARE HACKING 
TOOLSET 
‚Ä¢ JTAG DEBUGGER
‚Ä¢
FROM SUPER CHEAP TO EXTREMELY
EXPENSIVE
‚Ä¢
FLYSWATTER WITH OPENOCD IS CHEAP
‚Ä¢
JLINK AND ITS GDB STUB IS OK
‚Ä¢
LAUTERBACH AND TRACE32 IS PRO BUT $$$
‚Ä¢ JTAGULATOR
‚Ä¢
AWESOME TOOL TO FIND JTAG
THE HARDWARE HACKING 
TOOLSET 
‚Ä¢ FLASH READER
‚Ä¢
LOTS OF USEFUL THINGS STORED ON
EXTERNAL MEMORY
‚Ä¢
IN CIRCUIT PROGRAMMING VS DESOLDER
‚Ä¢
SPI VS PARALLEL (NAND FLASH)
‚Ä¢
‚Ä¶MORE ABOUT IT IN A SEC
THE HARDWARE HACKING 
TOOLSET 
‚Ä¢ FAULT INJECTION AND SIDE CHANNEL
‚Ä¢
MORE ADVANCED AND USUALLY EXPENSIVE
‚Ä¢
LAST RESORT SOLUTION
‚Ä¢
USEFUL FOR HARDENED TARGETS
‚Ä¢
GAMING CONSOLES
‚Ä¢
SECURE BOOT AND CHAIN OF TRUST
WHAT DO WE DO NOW? 
UART? FLASH? FIRMWARE?
INSPECTING THE UART
‚Ä¢ FROM THE TWO UART PORTS, ONLY UART0 IS INTERESTING
‚Ä¢ BUT WE FACE A COUPLE OF CHALLENGES
‚Ä¢
NOTHING SHOWS UP AFTER LINUX IS BOOTED
‚Ä¢
PROBABLY LINKED TO THE /DEV/NULL CONSOLE
‚Ä¢
WE SHOULD BE ABLE TO INTERRUPT THE BOOT PROCESS, BUT KEY PRESS IS NOT WORKING?
‚Ä¢
WE‚ÄôLL ADDRESS THAT IN ~10 MINUTES
WHAT DO WE DO NOW? 
RECOVER THE FIRMWARE!
RECOVERING THE FIRMWARE 
‚Ä¢ TO RECOVER A DEVICE FIRMWARE, THE USUAL TRICKS:
‚Ä¢
FIND IT ONLINE (CAN BE ENCRYPTED‚Ä¶)
‚Ä¢
SNIFF A FIRMWARE UPDATE (USING PORT MIRRORING, NETWORK TAP, ‚Ä¶)
‚Ä¢
HTTPS GETS MORE AND MORE IN THE WAY FOR THAT
‚Ä¢
DUMP THE FLASH
‚Ä¢
FLASHROM RECOGNIZES DOZENS OF FLASH CHIPS
‚Ä¢
OTHER DEDICATED TOOLS
‚Ä¢
MORE ADVANCED TRICKS
HOW TO DUMP A FLASH?
‚Ä¢
IN CIRCUIT PROGRAMMING
‚Ä¢
USING CLIPS, POGO PINS, DIRECT SOLDER
‚Ä¢
COMES WITH POTENTIAL TROUBLE
‚Ä¢
YOU NEED TO POWER THE CHIP, WHICH IS CONNECTED TO THE REST OF THE DEVICE
‚Ä¢
FLASH READER MAY LACK THE AMPS FOR THAT, OR CPU BOOTS AND MESS WITH READER
‚Ä¢
FIND WAYS TO KEEP THE SYSTEM IN RESET (CPU‚ÄôS RESET PIN, GROUND MYSTERIOUS TESTPOINTS, ‚Ä¶)
‚Ä¢
DESOLDER THE CHIP
‚Ä¢
MIGHT BE HARD TO PUT IT BACK
‚Ä¢
USE KAPTON TAPE OR FOIL TO SHIELD COMPONENTS AROUND
‚Ä¢
FLUX MIGHT HELP
‚Ä¢
CAREFUL NOT TO BEND PINS
HOW TO DUMP A FLASH? 
‚Ä¢ POLITELY ASK U-BOOT
‚Ä¢
MOST COMMON BOOTLOADER (BUT NOT THE ONE USED HERE )
‚Ä¢
NEED A SERIAL CONSOLE
‚Ä¢
HAS AN OPTION TO LOAD FLASH IN MEMORY AND DISPLAY HEX DUMP üëç
‚Ä¢
ACCESS TO U-BOOT MIGHT BE DISABLED
‚Ä¢ GLITCH U-BOOT (YOLO APPROACH)
‚Ä¢
SHORT NAND WHEN U-BOOT LOADS THE OS
‚Ä¢
MAKES IT PANIC AND GIVE YOU A PROMPT üòà
https://twitter.com/dyngnosis/status/647534881820438529
HOW TO DUMP A FLASH? 
‚Ä¢
USE JTAG
‚Ä¢
SOMETIMES INTERNAL/EXTERNAL MEMORY CAN BE READ VIA JTAG/SWD
‚Ä¢
DUMP RAM (WHICH MAY HAVE THE WHOLE FLASH LOADED IN MEMORY)
‚Ä¢
ANTI-READBACK CAN BE BYPASSED IF YOU CAN CONTROL EXECUTION
‚Ä¢
GLITCH THE DEVICE
‚Ä¢
USE THE CHIPWHISPERER TO CAUSE A FAULT DURING A PRINT AND LEAK EXTRA DATA
‚Ä¢
OR MAYBE TO BYPASS SECURITY BITS
‚Ä¢
‚ÄúGLITCHY DESCRIPTOR FRMWARE GRAB‚Äù (SCANLIME) HTTPS://WWW.YOUTUBE.COM/WATCH?V=TECQATNCF20
WE HAVE THE FIRMWARE‚Ä¶
LET‚ÄôS ANALYZE IT!
ANALYZING THE FIRMWARE FILE
‚Ä¢
BINWALK
‚Ä¢
ACT LIKE A BIG DICTIONARY OF KNOWN FILE FORMAT
‚Ä¢
CAN MEASURE ENTROPY (=HOW RANDOM DATA IS) TO FIND COMPRESSED/ENCRYPTED SECTIONS
‚Ä¢ COMPRESSED FILESYSTEM
‚Ä¢
SQUASHFS
‚Ä¢
JFFS
‚Ä¢
‚Ä¶
‚Ä¢ ELF HEADER / ARM CODE
‚Ä¢
COULD BE A BOOTLOADER
Firmware already separated
Binwalk extracts the files
False positive
Firmware for a different model
U-Boot strings ‚ò∫
Filesystem
ANALYZING THE FIRMWARE FILE
‚Ä¢ WHAT TO LOOK FOR?
‚Ä¢
FIRMWARE UPDATE MECHANISM (LIKELY TO CONTAIN KEY IF FW UPDATE IS ENCRYPTED)
‚Ä¢
/ETC/PASSWD, INIT SCRIPT, CERTIFICATES
‚Ä¢
‚ÄúMAIN BINARY‚Äù
‚Ä¢
THE BOOTLOADER IS ALSO INTERESTING
‚Ä¢
TELLS LINUX HOW TO BOOT
‚Ä¢
MAY HAVE HIDDEN COMMANDS, DEBUG FLAGS, ETC.
WHAT NOW?
WE WANT A SHELL ON THE DEVICE!
GETTING A SHELL
‚Ä¢ HOW TO GET A SHELL üêö
‚Ä¢
FIX THE SERIAL CONSOLE (REMEMBER THE UART LOG)
‚Ä¢
NEED TO LOOK AT WHAT THE BOOTLOADER IS DOING
‚Ä¢
MESS WITH BOOT ARGUMENTS (THE U-BOOT TRICK)
‚Ä¢
PATCH THE FIRMWARE / FILESYSTEM
‚Ä¢
PATCHING THE FIRMWARE WON‚ÄôT WORK HERE BECAUSE IT IS SIGNED
‚Ä¢
PATCHING THE NAND FLASH
‚Ä¢ TOTALLY DOABLE BUT A BIT OF A HASSLE
‚Ä¢ THE SAME WAY WE CAN DUMP THE FLASH, WE CAN WRITE THE FLASH BACK
‚Ä¢ USE JFFS TOOL TO RECREATE A MODIFIED IMAGE AND FLASH IT BACK
REVERSING THE BOOTLOADER
‚Ä¢ ARM ASSEMBLY 101 (GENERALIZED STATEMENT, TRUE MOST OF THE TIME):
‚Ä¢
THUMB IS 2 BYTES, ARM IS 4 BYTES
‚Ä¢
JUMPING (BX, BLX) TO ODD (+1) ADDRESSES MEANS THUMB, ELSE ARM
‚Ä¢
IF IDA IS WRONG (HAPPENS OFTEN), ALT+G AND CHANGE ‚ÄúT‚Äù REGISTER TO 0 OR 1 (ARM OR THUMB)
‚Ä¢
LR (LINK REGISTER) STORES RETURN ADDRESS (FOR BL, BLX INSTRUCTIONS)
‚Ä¢
ARM USES LITERAL POOL (DATA AMONG CODE TO BE DIRECTLY LOADED INTO REGISTERS)
‚Ä¢
ADDRESSES, MAGIC VALUES, OFFSETS, ‚Ä¶.
‚Ä¢
FOR FUNCTION CALLS: ARGUMENTS GO IN R0-R3, RETURN VALUE IN R0 
‚Ä¢
DATA CACHE VS INSTRUCTION CACHE
‚Ä¢ CHECK AZERIA LABS TUTORIALS
REVERSING THE BOOTLOADER
‚Ä¢ THE LOAD ADDRESS SITUATION‚Ä¶
‚Ä¢
WHEN LOADING A BINARY BLOB INTO IDA, IDA WANTS A LOADING ADDRESS
‚Ä¢
SOMETIMES THE ADDRESS IS PRINTED ON SCREEN WHILE THE DEVICE BOOTS
‚Ä¢
OR DATA CAN HINT TO THE ADDRESS
‚Ä¢
HEADER FOR CUSTOM FILE FORMAT
‚Ä¢
RESET VECTORS
‚Ä¢