# Introduction to Hardware Hacking: Finding Decade-Old Bugs in Widely Deployed Devices

## Case Study: Avaya 9600 Deskphone

### About Me
- **Philippe Laulheret**
- Senior Security Researcher at McAfee's Advanced Threat Research
- Twitter: @PhLaul
- 2 years in Embedded Security, 4 years in C++ Development

### Why Should You Care About Hardware Hacking?

**Avaya 9600 Series IP Deskphone:**
- Second-largest VoIP solution provider.
- Used by 90% of Fortune 100 companies.
- The 9600 series was introduced in 2006 and is nearing end-of-life (EOL).

### Prior Art
- Extensive documentation on hardware hacking (see last slide for links).
- Introduction to ARM architecture.
- Blogs and resources on hardware hacking (routers, IoT, etc.).
- Accessible introductions to electronics (Adafruit, Sparkfun).
- Embedded Capture the Flag (CTF) competitions.
- Hardware Hacking Villages.
- Red Balloon Security discovered two Remote Code Execution (RCE) vulnerabilities in the same phone series.
- "Stepping Pwns," RSA 2014.

### Overview of the Next 40 Minutes
- Use the Avaya 9600 deskphone as a case study to discuss hardware hacking.
- Share insights on the process, including successes and failures.
- Empower you with the knowledge that if I can do it, so can you!

### Project Initiation: Reconnaissance
- **Step 1: Check FCC Website**
  - If the device has radio capabilities (Wi-Fi, Bluetooth, etc.), it will be listed on the FCC website.
  - Example: [https://fccid.io/TYM-9641GS](https://fccid.io/TYM-9641GS) (Note: This is not our exact model but part of the same 96xx series).

- **Step 2: Gather Documentation**
  - Find online manuals, marketing materials, and other relevant documents.
  - Locate forums and communities where system administrators and users discuss the device.
  - Search for firmware downloads.

### Identifying Main Components
- **Common Components:**
  - CPU (possibly multiple) or System on Chip (SoC)
  - RAM
  - On-board storage (Flash chip, EEPROM, SD card, etc.)
  - Wi-Fi/Bluetooth module (often under a metallic shield)

- **Component Identification:**
  - Labels on components can be googled for more information.
  - Datasheets provide detailed usage instructions, though they may not always be publicly available.

### Test Points and Debug Headers
- **Why Expect Them?**
  - PCBs often use the same design as development boards.
  - Manufacturing processes (flash, verification, post-mortem analysis) require access points.
  
- **What to Look For:**
  - UART (labeled here for convenience)
  - JTAG
  - Test points
  - Debug headers

- **UART:**
  - 4 (sometimes 3) pins (RX, TX, 3.3V/5V, GND)
  - Used for serial communication
  - Test points are usually aligned but not always.
  - VCC (3.3V, 5V, etc.) is optional; it's usually better not to connect it.
  - Determine the connection speed (baud rate). If you see random bytes, try different baud rates.
  - Some tools have an "auto-baud" feature.

- **JTAG:**
  - Used for debugging hardware.
  - Various pinouts, but only a few pins are needed.
  - Standard connectors, but they may not always be present.
  - May need to solder resistors on unpopulated headers.
  - Can be used to dump memory (sometimes).

### Hardware Hacking Toolset
- **Multimeter:**
  - Measure voltage of unknown chips (3.3V, 5V).
  - Use continuity testing to find connections.
  - Verify proper connections.

- **Logic Analyzer:**
  - Decode digital electronic signals (1 and 0, represented as 3.3V and 0V, 5V and 0V, etc.).
  - Provide a higher level of abstraction (e.g., UART to "data").

- **Serial Console Cable (FTDI Cable):**
  - Connects to UART.
  - Handles either 3.3V or 5V, not both.
  - Some models can be converted by cutting a trace.
  - Can power devices (hence the VCC pin).

- **Bus Pirate:**
  - Supports various protocols (UART, SPI, I2C, etc.).
  - Can be controlled using Python.
  - Versatile for tasks like dumping flash, modifying EEPROM, programming AVR, etc.

- **JTAG Debugger:**
  - Ranges from very cheap to extremely expensive.
  - Examples: Flyswatter with OpenOCD, JLink with its GDB stub, Lauterbach and Trace32 (professional but costly).
  - JTAGulator: A great tool for finding JTAG.

- **Flash Reader:**
  - Useful for accessing external memory.
  - In-circuit programming vs. desoldering.
  - SPI vs. parallel (NAND flash).

- **Fault Injection and Side Channel:**
  - More advanced and typically expensive.
  - Last resort for hardened targets (e.g., gaming consoles, secure boot, chain of trust).

### Initial Steps: UART, Flash, Firmware
- **Inspecting the UART:**
  - From the two UART ports, only UART0 is interesting.
  - Challenges:
    - No output after Linux boots (likely linked to /dev/null console).
    - Key presses do not interrupt the boot process.
    - We'll address this in about 10 minutes.

- **Recovering the Firmware:**
  - Common methods:
    - Find it online (may be encrypted).
    - Sniff a firmware update (using port mirroring, network tap, etc.).
    - Dump the flash (Flashrom recognizes dozens of flash chips).
    - More advanced techniques.

- **Dumping the Flash:**
  - In-circuit programming (clips, pogo pins, direct solder).
  - Potential issues: powering the chip, which is connected to the rest of the device.
  - Solutions: keep the system in reset (CPUâ€™s reset pin, grounding mysterious test points, etc.).
  - Desolder the chip (careful not to bend pins, use Kapton tape or foil to shield surrounding components).

- **Polite U-Boot Request:**
  - Most common bootloader (not used here).
  - Requires a serial console.
  - Option to load flash into memory and display hex dump.
  - Access to U-Boot might be disabled.

- **Glitching U-Boot:**
  - Short NAND when U-Boot loads the OS.
  - Causes panic and gives a prompt.

- **Using JTAG:**
  - Sometimes internal/external memory can be read via JTAG/SWD.
  - Dump RAM (which may have the whole flash loaded in memory).
  - Bypass anti-readback if you can control execution.
  - Glitch the device (e.g., using ChipWhisperer to cause a fault during a print and leak extra data).

### Analyzing the Firmware
- **Binwalk:**
  - Acts like a dictionary of known file formats.
  - Measures entropy to find compressed/encrypted sections.
  - Compressed filesystems (SquashFS, JFFS, etc.).
  - ELF header/ARM code (could be a bootloader).

- **What to Look For:**
  - Firmware update mechanism (likely contains key if updates are encrypted).
  - `/etc/passwd`, init scripts, certificates.
  - "Main binary."
  - Bootloader (tells Linux how to boot, may have hidden commands, debug flags, etc.).

### Getting a Shell
- **Fix the Serial Console:**
  - Review the UART log.
  - Examine what the bootloader is doing.
  - Modify boot arguments (U-Boot trick).
  - Patch the firmware/filesystem (patching the firmware won't work here because it is signed).
  - Patch the NAND flash (doable but requires effort).

- **Reversing the Bootloader:**
  - **ARM Assembly Basics:**
    - Thumb mode is 2 bytes, ARM mode is 4 bytes.
    - Jumping (BX, BLX) to odd (+1) addresses means Thumb mode, else ARM mode.
    - If IDA is wrong, use Alt+G and change the "T" register to 0 or 1 (ARM or Thumb).
    - Link Register (LR) stores the return address (for BL, BLX instructions).
    - ARM uses literal pools (data among code to be directly loaded into registers).
    - Function calls: arguments go in R0-R3, return value in R0.
    - Data cache vs. instruction cache.
    - Check Azeria Labs tutorials for more details.

- **Load Address Situation:**
  - When loading a binary blob into IDA, a loading address is required.
  - The address may be printed on the screen during boot.
  - Data can hint at the address (header for custom file format, reset vectors).

This comprehensive guide should help you get started with hardware hacking and give you the confidence to tackle similar projects.