### 3. 密码重用率分析

#### 3.1 密码重用率数据
以下是密码重用率的统计结果：
- 3.36% 0.67% 1.44% 19.11% 0.10% 13.64%
- 2.43% 0.73% 1.34% 16.51% 0.11% 7.88%
- 1.53% 0.10% 1.01% 12.69% 0.15% 1.53%
- 总体：2.54% 0.80% 1.37% 18.31% 0.38% 12.82%
- 总体：2.43% 0.56% 1.31% 16.15% 0.17% 6.54%

对于基于马尔可夫模型的NLE，我们实现了一个类似的解决方案。如果实现不正确，即NLE输出的密码重用率不现实，则可以将其作为真实密码库的指示器。类似于第5.1节中的相关性特征，初步测试表明，重用是一个相对较弱的指标。因此，我们仅使用一个小权重，主要用于在KL散度中打破平局。

对于每个密码库，我们计算重用率，即从密码库中随机选择两个密码，这两个密码相同的概率。此外，我们还计算了“相似”密码的重用率，其中相似性通过Levenshtein编辑距离来衡量，阈值范围为1到5。这一度量方法之前已被[2]用于重用分析。最后，我们使用这六个重用率的加权平均值作为最终指标。

这些实验的结果总结在表3中。我们看到结果并没有显著变化。NoCrack的真实密码库的中位排名为1.99%，没有改善KL散度攻击的结果（中位数为1.97%）。对于马尔可夫模型，我们也看到了同样的结果，中位排名为14.28%，而KL散度攻击的中位数为14.24%。这些结果表明，无论是NoCrack NLE还是马尔可夫NLE都能准确模拟PBVault中的可用数据。然而，没有其他数据可供交叉验证这些结果，我们预计这种攻击在新鲜数据上会表现更好，因为新数据可能具有不同的密码重用行为。

### 5. 密码策略

许多网站对其用户的密码施加了密码组合策略。这些规则因站点而异，并且可能会随时间变化。因此，对于NLE来说，创建符合特定站点规则的密码而不“过度”选择过于强大的密码是困难的。Bojinov等人[3]对Kamouflage系统进行了政策调查，发现大多数大型站点都应用了最小长度标准，例如至少8个字符，这是NLE需要考虑的。我们发现Chatterjee等人[9]报告了UNIF NLE的政策合规性，该NLE生成计算机生成的密码，但主要的NLE——密码库生成SG并未报告。

在以下实验中，我们假设用户至少有一个存储在密码库中的账户要求最小密码长度为8个字符。如果解密密码库后得到的密码较短，则我们将该密码库视为不符合要求并丢弃。

表3中总结了一些实验结果。结果显示，NoCrack的真实密码库的中位排名为1.37%，改进了KL散度攻击的结果（中位数为1.97%）。对于马尔可夫模型，我们也看到了同样的结果，中位排名为12.82%，而KL散度攻击的中位数为14.24%。

原则上，可以通过跟踪感兴趣站点的密码策略并修改编码器以仅生成符合要求的密码来防止基于违反密码策略的攻击。然而，由于策略会随时间变化，因此可能需要在策略更改时重新编码密码库。此外，密码策略尚未以机器可读格式提供。不过，Horsch等人[16]已经提出了这个问题的第一个解决方案。

### 5.4 最佳：结合多个因素

最后，我们将策略、相关性和KL散度结合成一个总体分类器。实验结果总结在表3中。结果显示，NoCrack的真实密码库的中位排名为1.31%，改进了KL散度攻击的结果（中位数为1.97%）。对于马尔可夫模型，我们也看到了同样的结果，中位排名为6.54%，而KL散度攻击的中位数为14.24%。图3展示了针对不同训练集大小的NoCrack NLE的攻击结果汇总，类似于第4.3节所示，增加训练集可以提高所有分类器的排名。

### 5.5 其他注意事项

除了已经讨论的密码结构差异外，还有一些其他可能需要考虑的标准。首先，知道某个网站泄露的密码可能是区分真实和诱饵密码库的好方法。此外，正如Chatterjee等人[9]所提到的，如果密码库被盗两次，安全性将退回到传统的PBE水平。缺乏真实世界样本数据使得无法对主密码和相应域密码的相关性进行实验。此外，NoCrack的安全承诺有些反直觉，因为使用更独特（安全）的自选域密码实际上有助于区分。最后，如果一个网站报告输入的密码在过去是正确的（如Facebook），这可能会进一步帮助攻击者找到真实密码库，即使用户在密码库被盗后更改了一些域密码。

### 6. 基于马尔可夫模型的自适应NLE

接下来，我们描述了一种基于马尔可夫模型的静态NLE，其性能优于NoCrack的PCFG-based NLE。然后，我们展示如何将这种NLE转变为自适应NLE，并说明这如何能提高对排名攻击的抵抗力。

#### 6.1 基于马尔可夫模型的静态NLE

马尔可夫模型是建模随机过程的工具，广泛用于自然语言处理，如自动语音识别。最近，它们已成为密码猜测[23, 11, 30, 21]和测量密码强度[7]的重要工具。事实上，NoCrack的作者[9]曾简要测试过基于马尔可夫模型的NLE，但最终选择了基于PCFG的NLE。

**马尔可夫模型**

在n-gram马尔可夫模型中，我们根据长度为n-1的前缀来建模字符串中下一个标记的概率。因此，对于给定的标记序列c1, . . . , cm，n-gram马尔可夫模型估计其概率为：
\[ P(c_1, \ldots, c_m) = P(c_1, \ldots, c_{n-1}) \cdot \prod_{i=n}^m P(c_i | c_{i-n+1}, \ldots, c_{i-1}) \]

我们使用4-gram，它在内存消耗、速度和准确性之间提供了良好的折衷[11, 21]，并且我们使用完整的可打印ASCII字符集（95个字符）。所需的初始概率（IP）P(c1, . . . , c3)和转移概率（TP）P(c4|c1, . . . , c3)是从训练数据中估计的相对频率，我们使用RockYou数据集。我们应用简单的加法平滑来处理未见过的n-gram。我们为每个长度在4到12个字符之间的密码训练单独的马尔可夫模型。

**密码pwd的编码**

编码是从密码集合到比特串的（概率）映射。为了计算此编码，我们固定一个n-gram的顺序（例如，字母顺序）。对于每个转移概率，即对于每个长度为3的前缀，固定的顺序将区间[0, 1)划分为段，这些段的长度对应于转移概率。对于pwd中的给定转移，我们确定相应的段[a, b)（其中b - a = P(x4|x1, . . . , x3)）。从此段中，我们采样一个均匀选择的值s。这个过程重复进行，直到处理完字符串pwd中的所有转移，同样适用于初始概率和密码长度。最终，这个过程产生一个向量\(\vec{S} = (s_1, \ldots, s_{\text{len(pwd)}-1})\)，包含\(\text{len(pwd)} - 1\)个值。该向量\(\vec{S}\)可以使用类似于先前工作[9]的技术编码成二进制字符串。

**向量\(\vec{S}\)的解码**

向量\(\vec{S}\)的（确定性）解码是直接的。第一个值s1决定了密码的长度l，通过决定它落在哪个段中。此外，这告诉我们应该使用哪个马尔可夫模型。值s2决定了pwd的第一个3-gram，随后的值s3, . . . , sl−1决定了剩余的转移n-gram。

**处理密码库**

为了以类似于NoCrack的SG模型的方式模拟密码重用，我们生成包含相关密码的密码库。我们从PBVault集合中的密码库中确定所需的密码重用程度。我们测量了精确重用以及具有小Levenshtein距离的类似密码的重用（参见[2]）。测得的重用率为(48.52, 9.81, 4.17, 2.74, 2.08, 2.72)，分别对应于Levenshtein距离为0到5的情况。构造与给定向量匹配的密码库并不简单，因为相似密码之间存在高度交互。我们通过选择一个“基础密码”，并将其用于密码库中的一部分密码（精确重用）。此外，我们添加一部分具有Levenshtein距离为1, . . . , 5的基础密码，其余部分填充无关密码。所有这些密码相互关联，因此实际具有编辑距离为1的密码比例通常会高于M0。我们通过经验确定了\(\vec{M} = (M_i)\)的值，使重用率与上述经验结果匹配。我们使用的值为\(\vec{M} = (0.66, 0.06, 0.02, 0.01, 0.015)\)，并添加了方差分别为(0.06, 0.034, 0.008, 0.004, 0.012)的高斯噪声。

相关的密码是通过修改最后一个转移概率来确定的，这在实践中模拟了大部分修改后的重用[10]。更复杂的方法可以在实际实现中进行测试。例如，考虑不止最后一个n-gram位置，并更精确地模拟用户行为[32, 33]。

### 表4：基于整个密码库的KL散度攻击的排名结果，较小的数字表示更有效的攻击。诱饵密码库从静态马尔可夫或自适应马尔可夫分布中选择；真实密码库从PBVault分布中选择。为了更好地与之前的工作[9]进行比较，我们列出了不同密码库大小类别的结果。

### 表5：重新创建的ML分类器的排名结果，包括NoCrack和静态马尔可夫，两者都使用MPW和SG。为了便于比较原始SVM和我们的重新实现，我们还列出了Chatterjee等人[9]的NoCrack结果。

**KL散度攻击**
| 特征 | [9] | NoCrack | S. Markov |
| --- | --- | --- | --- |
| ML Single (MPW) | 31.50 % | 0.45 % | 16.83 % |
| ML Vaults (SG) | 42.21 % | 12.66 % | 33.01 % |
| PBVault | 9.71 % | 39.55 % | 11.36 % |
| Static Markov | 32.32 % | - | - |
| Adaptive Markov | - | - | - |
| 密码库大小 | 平均 | Q0.25 | 中位数 | 平均 | Q0.25 | 中位数 |
| 2-3 | 26.88 % | 0.17 % | - | - | - | - |
| 4-8 | 24.81 % | 1.21 % | 12.49 % | 38.63 % | 4.46 % | 36.83 % |
| 9-50 | 27.77 % | 0.39 % | 14.24 % | 40.12 % | 9.12 % | 35.14 % |

### 6.2 基线性能

首先，我们确定这种静态NLE的性能。为此，我们重新运行了基于KL散度的实验，这些实验在第4.3节和第4.4节中已经介绍过。

#### 6.2.1 KL散度攻击

首先描述整个密码库的结果。设置类似于第4.3节中的设置，即我们从PBVault列表中选择真实密码库，并根据马尔可夫模型生成的分布选择诱饵密码库。

为了确定参考分布，我们稍微偏离了以前的经验采样方法。有两个原因。首先，对于马尔可夫模型，很容易从代码中提取概率分布的显式描述，即复制IP和TP表。这些信息比基于采样的近似值更准确，因此更可取。其次，事实证明，马尔可夫模型生成的概率分布比NoCrack生成的分布更加“分散”，后者更集中在较少的值上。（为了说明这一点，我们为两种分布各采样了150万个密码。NoCrack获得了25万个唯一密码，而马尔可夫模型获得了125万个唯一密码。）

结果如表4所示。NoCrack的可比结果见表1。我们看到，马尔可夫NLE在此攻击下更为稳健，平均排名为27.8%（NoCrack：6.2%），中位数为14.2%（NoCrack：2.0%）。有趣的是，对于弱密码库，差异不大：Q0.25分别为0.4和1.0。

独立选择的人工密码库（大小为10）的结果见表2。我们看到，马尔可夫模型的表现与NoCrack类似，中位数为0.1%，平均数略有优势。唯一的例外是对RockYou的比较，其表现接近随机。对于其他列表，中位数均为0.1%，等于NoCrack，只是中位数略好，介于5.3%到11.9%之间。

#### 6.2.2 机器学习攻击

我们还重新创建了基于机器学习的原始攻击，以检查马尔可夫NLE在这种攻击下的表现。NoCrack论文只提供了有限的细节。在完整版本[9]中，他们报告了最佳性能的ML引擎是带有径向基函数核的支持向量机（SVM）。他们构建了四个基于SVM的分类器，每个分类器对应以下特征向量之一：

- 重复计数（包括密码唯一性的数字、leet语转换、大写和密码库中的令牌）
- 编辑距离（包括密码唯一性的数字、leet语转换、大写和密码库中的令牌）

表5显示了这些特征向量的排名结果。