R7), it is important to model them in a proper way so that different
kinds of relations can be better and easier handled. We introduce
how to use HIN, which is capable to be composed of different types
of entities and relations, to represent the code snippets in Stack
Overflow by using the features extracted above. We first present
the concepts related to HIN as follows.
Definition 3.1. Heterogeneous information network (HIN) [40].
A HIN is defined as a graph G = (V, E) with an entity type map-
ping ϕ: V → A and a relation type mapping ψ : E → R, where
V denotes the entity set and E is the relation set, A denotes the
entity type set and R is the relation type set, and the number of
entity types |A | > 1 or the number of relation types |R | > 1. The
network schema [40] for a HIN G, denoted as TG = (A, R), is
a graph with nodes as entity types from A and edges as relation
types from R.
HIN not only provides the network structure of the data associa-
tions, but also provides a high-level abstraction of the categorical
association. For our case, i.e., the detection of insecure code snippets
in Stack Overflow, we have six entity types (i.e., user, badge, ques-
tion, answer, code snippet, keyword) and seven types of relations
among them (i.e., R1-R7). Based on the definitions above, the net-
work schema for HIN in our application is shown in Figure 4, which
enables the code snippets in Stack Overflow to be represented in a
comprehensive way that utilizes both their content-based informa-
tion and social coding properties.
Figure 4: Network schema for HIN in our application.
The different types of entities and relations motivate us to use
a machine-readable representation to enrich the semantics of re-
latedness among code snippets in Stack Overflow. To handle this,
the concept of meta-path has been proposed [41] to formulate the
higher-order relationships among entities in HIN. Here, we fol-
low this concept and extend it to our application of insecure code
snippet detection in Stack Overflow.
Definition 3.2. Meta-path [41]. A meta-path P is a path defined
on the graph of network schema TG = (A, R), and is denoted in the
RL−−→ AL+1, which defines a composite
form of A1
relation R = R1 · R2 · . . . · RL between types A1 and AL+1, where ·
denotes relation composition operator, and L is the length of P.
R1−−→ A2
R2−−→ ...
Figure 5: Meta-paths built for insecure code snippet detec-
tion (The symbols are the abbreviations shown in Figure 4).
ICSD: An Automatic System for Insecure Code Snippet Detection
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Supply −1
−−−−−−−−→ user
I nclude −1
−−−−−−−−−→ answer
Given a network schema with different types of entities and
relations, we can enumerate a lot of meta-paths. In our application,
based on the collected data, resting on the seven different kinds of
relationships, we design nine meaningful meta-paths for character-
izing relatedness over code snippets in Stack Overflow, i.e., PID1-
PID9 shown in Figure 5. Different meta-paths depict the related-
ness between two code snippets at different views. For example, the
meta-path PID2 formulates the relatedness over code snippets in
Supply
Stack Overflow: code
−−−−−−→
I nclude
−−−−−−−→ code which means that two code snippets can
answer
be connected as they are included in the answers supplied by
I nclude −1
the same user; while another meta-path PID6: code
−−−−−−−−−→
Supply
−−−−−−→
Supply −1
−−−−−−−−→ user
I nclude
answer
−−−−−−−→ code denotes that two code snippets are related
as they are included in the answers supplied by the users with
the same kind of badge (e.g., “illuminator” badge) indicating sim-
ilar expertise or contribution. In our application, meta-path is a
straightforward method to connect code snippets via different rela-
tionships among different entities in HIN, and enables us to depict
the relatedness over code snippets in Stack Overflow utilizing both
their content-based information and social coding properties in a
comprehensive way.
Gain
−−−−−→ reputation
Gain−1
−−−−−−→ user
answer
3.3 snippet2vec: HIN Representation Learning
To measure the relatedness over HIN entities (e.g., code snippets),
traditional representation learning for HIN [20, 41, 46, 48] mainly
focuses on factorizing the matrix (e.g., adjacency matrix) of a HIN
to generate latent-dimension features for the nodes (e.g., code snip-
pets) in the HIN. However, the computational cost of decomposing
a large-scale matrix is usually very expensive, and also suffers from
its statistical performance drawback [19]. To reduce the high com-
putation and space cost, it calls for scalable representation learning
method for HIN. Given a HIN G = (V, E), the HIN representation
d
learning task [13, 18] is to learn a function f : V → R
that maps
d
each node v ∈ V to a vector in a d-dimensional space R
, d (cid:7) |V |
that are capable to preserve the structural and semantic relations
among them.
To solve the problem of HIN representation learning, due to
the heterogeneous property of HIN (i.e., network consisting of
multi-typed entities and relations), it is difficult to directly apply
the conventional homogeneous network embedding techniques
(e.g., DeepWalk [34], LINE [43], node2vec [19]) to learn the latent
representations for HIN. To address this issue, HIN embedding
methods such as metapath2vec [13] was proposed. In metapath2vec,
given a meta-path scheme, it employs meta-path based random walk
and heterogeneous skip-gram to learn the latent representations
for HIN such that the semantic and structural correlations between
different types of nodes could be persevered. The metapath2vec
was proposed to support one meta-path scheme to guide the walker
traversing HIN; however, in our application, the code snippets in
Stack Overflow can be connected through nine different meta-path
schemes. It may not be feasible to directly employ metapath2vec
in our case for insecure code snippet detection. To put this into
perspective, as shown in Figure 6, we gain further insight into Stack
Overflow data and have following interesting findings:
Figure 6: Random walk guided by single meta-path vs. ran-
dom walk guided by multiple meta-paths.
• Finding 1: Both insecure Code-1 and Code-2 (i.e., they can both
cause potential confidential information leakage) are posted by
User-1 “Ke***a” (we here anonymize his user name) answering the
questions about string access for Android app. Actually, Code-
1 and Code-2 can be connected by the Path-A guided by the
designed meta-path PID2.
• Finding 2: The insecure codes of Code-3 (i.e., it may allow users
to remotely execute the malicious code) and Code-4 (i.e., it can
cause potential data breach) are connected in the way that (1)
Code-3 and Code-5 are related as they were posted by User-2 and
User-3 who only had the bronze badge of “student” (i.e., first
question with score of 1 or more); and then (2) User-4 copied
and pasted Code-5 while also provided Code-4 to answer another
user’s posted question. In this way, Code-3 and Code-4 can be
connected by the Path-B guided by meta-paths of PID6 and PID2.
Based on the above observations, metapath2vec [13] fails to gen-
erate the path such as Path-B to represent the relatedness between
code snippets like Code-3 and Code-4. To address this issue, we
design a new network embedding model snippet2vec to learn desir-
able node representations in HIN: first, a new random walk method
guided by different meta-paths is proposed to map the word-context
concept in a text corpus into a HIN; then skip-gram is leveraged to
learn effective node representation for a HIN.
Random walk guided by different meta-paths. Given a source
node vj in a homogeneous network, the traditional random walk
is a stochastic process with random variables v1
j such
that vk +1
is a node chosen at random from the neighbors of node
vk . The transition probability p(vi +1
j ) at step i is the normalized
probability distributed over the neighbors of vi
j by ignoring their
node types. However, this mechanism is unable to capture the
semantic and structural correlations among different types of nodes
in a HIN. Here, we show how we use different built meta-paths
to guide the random walker in a HIN to generate the paths of
multiple types of nodes. Given a HIN G = (V, E) with schema
TG = (A, R), and a set of different meta-paths S = {Pj }n
j=1 (e.g.,
in Finding2, S = {PID6, PID2}), each of which is in the form of
j , ..., vk
j , v2
|vi
j
j
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Y. Ye et al.
A1 → ...At → At +1... → Al , we put a random walker to traverse
the HIN. The random walker will first randomly choose a meta-path
Pk from S and the transition probabilities at step i are defined as
follows:
p(v i +1 |v i
, S) =
At
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
λ
|S|
(v i
1
|NAt +1
At
)|
if (v i +1, v i
At
1
|NAt +1
(v i
At
)|
0
) ∈ E, ϕ(v i
At
) = Ac, ϕ(v i +1) = At +1
(1)
) ∈ E, ϕ(v i
) (cid:2) Ac,
if (v i +1, v i
At
ϕ(v i +1) = At +1, (At , At +1) ∈ Pk
otherwise,
At
(vi
At
where ϕ is the node type mapping function, NAt +1
) denotes
the At +1 type of neighborhood of node vi
, Ac is entity type of
At
Code, and λ is the number of meta-paths starting with Ac → At +1
in the given meta-path set S. The walk paths generated by the
above strategy are able to preserve both the semantic and structural
relations between different types of nodes in the HIN, and thus will
facilitate the transformation of HIN structures into skip-gram.
Skip-gram. After mapping the word-context concept in a text
corpus into a HIN via meta-path guided random walk strategy (i.e.,
a sentence in the corpus corresponds to a sampled path and a word
corresponds to a node), skip-gram [31, 34] is then applied on the
paths to minimize the loss of observing a node’s neighbourhood
(within a window w) conditioned on its current representation. The
objective function of skip-gram is:

arg min
Y
−w ≤k ≤w, j(cid:2)k
− log p(vj+k |Y (vj )),
(2)
where Y (vj ) is the current representation vector of vj , p(vj+k |Y (vj ))
is defined using the softmax function:
p(vj+k |Y (vj )) =
 | V |
exp(Y (vj+k ) · Y (vj ))
q=1 exp(Y (vq ) · Y (vj ))
.
(3)
Due to its efficiency, we first apply hierarchical softmax technique
[32] to solve Eq. 3; then the stochastic gradient descent [4] is em-
ployed to train the skip-gram.
3.4 Multi-view Fusion Classifier
Given a set of different meta-path schemes, by using the above
proposed snippet2vec, the node (i.e., code snippet) representations
will be learned in the HIN. In our application, as described in Sec-
tion 3.2, we have nine meta-paths (i.e., PID1–MID9) which char-
acterize the relatedness over code snippets at different views (i.e.,
with different semantic meanings). Based on our observations on
the Stack Overflow data and leveraging the domain expertise, we
generate m sets of meta-path schemes S = {Si }m
i =1 for snippet2vec
to learn the node representations in the HIN, where m = 4 and
S = {(PID1, PID2, PID6), (PID1, PID3, PID7), (PID1, PID4, PID8),
(PID1, PID5, PID9)}. Given these different sets of meta-paths, us-
ing snippet2vec, different node representations will be learned in
the HIN. Here, we propose to use multi-view fusion to aggregate
these different learned node representations for code snippet clas-
sification.
i =1
m
Given m kinds of node representations Yi (i = 1, ..., m) learned
based on m sets of meta-path schemes, the incorporated node
representations can be denoted as: Y (cid:9) =
(αi × Yi ), where
αi (i = 1, ..., m) is the weight of Yi . To determine the weight of αi
for each mapped low-dimensional vector space Yi , we measure the
geometric distances among them. The distance measure based on
the principal angles between two vector spaces is significant if and
only if the vector spaces have the same dimensions [49]. In our case,
the m mapped vector spaces are all with the same dimensions of d.
Therefore, we apply the geodesic distance based on principal angles
[25] to measure the geometric distances between the mapped vector
spaces. The principal angle between space Yi and Yj is defined as
the number 0 ≤ θ ≤ π
2 that satisfies:
cos θ = max

y∈Yi, y(cid:9) ∈Yj
yT y(cid:9).
(4)
The angle θ is 0 if and only if Yi
2 if and only
if Yi ⊥ Yj . Let θ1, θ2, ..., θd be the d principal angles between space
(cid:9)
Yi and Yj , the geodesic distance between them is formulated as:
Yj (cid:2) 0, while θ = π
Thus, we compute αi for each mapped vector space Yi as:
d(Yi , Yj ) =
θ 2
1
+ θ 2
2
+ ... + θ 2
d
.
m
m
m
j=1,i(cid:2)j d(Yi , Yj )
j=1,i(cid:2)j d(Yi , Yj )
i =1
.
αi =
(5)
(6)
To this end, the incorporated node representations Y (cid:9)
will be
fed to the Support Vector Machine (SVM) to train the classification
model, based on which the unlabeled code snippets can be predicted
if they are insecure or not. Algorithm 1 shows the implementation
of the our developed insecure code snippet detection system ICSD.
Algorithm 1: ICSD – Insecure code snippet detection in Stack
Overflow based on structured HIN.
Input: The HIN G = (V, E), network schema TG = (A, R), m
sets of meta-path schemes S = {Si }m
walk paths per node r , walk length l, and vector
dimension d, traning data set Dt , testing data set De
i =1, number of
Output: f: The labels for the testing code snippets.
for i = 1 → m do
for j = 1 → |V | do
for k = 1 → r do
get l-length random walks guided by Si (Eq. 1);
end
end
d
Generate Yi ∈ R
using skip-gram (Eq. 2) ;
end