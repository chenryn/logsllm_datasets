      HostName jump1.example.com
    ```
    ::: itemizedlist
    -   `Host`{.literal} 参数定义您可以在 `ssh`{.literal}
        命令中使用的主机的名称或别名。该值可以匹配真实的主机名，但也可以是任意字符串。
    -   `HostName`{.literal} 参数设置跳过主机的实际主机名或 IP 地址。
    :::
2.  使用 `ProxyJump`{.literal}
    指令将远程服务器跳过配置添加到本地系统上的 `~/.ssh/config`{.literal}
    文件中，例如：
    ``` screen
    Host remote-server
      HostName remote1.example.com
      ProxyJump jump-server1
    ```
3.  使用您的本地系统通过跳过服务器连接到远程服务器：
    ``` screen
    $ ssh remote-server
    ```
    如果省略了配置步骤 1 和 2，则上一命令等同于
    `ssh -J skip-server1 remote-server`{.literal} 命令。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以指定更多跳过服务器，您也可以在提供其完整主机名时跳过在配置文件中添加主机定义，例如：
``` screen
$ ssh -J jump1.example.com,jump2.example.com,jump3.example.com remote1.example.com
```
如果跳过服务器上的用户名或 SSH
端口与远程服务器上的名称和端口不同，请更改上一命令中的主机名或 SSH
端口，例如：
``` screen
$ ssh -J PI:EMAIL:75,PI:EMAIL:75,PI:EMAIL:75 PI:EMAIL:220
```
:::
::: itemizedlist
**其它资源**
-   `ssh_config(5)`{.literal} 和 `ssh(1)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#using-secure-communications-between-two-systems-with-openssh_securing-networks.html#connecting-to-remote-machines-with-ssh-keys-using-ssh-agent_using-secure-communications-between-two-systems-with-openssh}使用 ssh-agent 使用 SSH 密钥连接到远程机器 {.title}
:::
为了避免每次发起 SSH 连接时输入密语，您可以使用 `ssh-agent`{.literal}
实用程序缓存 SSH 私钥。私钥和密语保持安全。
::: itemizedlist
**先决条件**
-   您有一个远程主机正在运行 SSH 守护进程，并可通过网络访问。
-   您知道登录到远程主机的 IP 地址或者主机名以及凭证。
-   您已用密码生成了 SSH
    密钥对，并将公钥传送到远程机器。如需更多信息，请参阅 [生成 SSH
    密钥对](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/using-secure-communications-between-two-systems-with-openssh_securing-networks.xml#generating-ssh-key-pairs_using-secure-communications-between-two-systems-with-openssh){.link}。
:::
::: orderedlist
**流程**
1.  可选：验证您可以使用密钥在远程主机中进行身份验证：
    ::: orderedlist
    1.  使用 SSH 连接到远程主机：
        ``` screen
        $ ssh example.user1@198.51.100.1 hostname
        ```
    2.  输入您在创建密钥时设定的密码短语以授予对私钥的访问权限。
        ``` screen
        $ ssh example.user1@198.51.100.1 hostname
         host.example.com
        ```
    :::
2.  启动 `ssh-agent`{.literal}。
    ``` screen
    $ eval $(ssh-agent)
    Agent pid 20062
    ```
3.  将密钥添加到 `ssh-agent`{.literal}。
    ``` screen
    $ ssh-add ~/.ssh/id_rsa
    Enter passphrase for ~/.ssh/id_rsa:
    Identity added: ~/.ssh/id_rsa (PI:EMAIL)
    ```
:::
::: itemizedlist
**验证**
-   可选：使用 SSH 登录到主机机器。
    ``` screen
    $ ssh example.user1@198.51.100.1
    Last login: Mon Sep 14 12:56:37 2020
    ```
    请注意您不必输入密码短语。
:::
:::
::: section
::: titlepage
# []{#using-secure-communications-between-two-systems-with-openssh_securing-networks.html#_additional_resources}其它资源 {.title}
:::
::: itemizedlist
-   `sshd(8)`{.literal}、`ssh(1)、`{.literal} `sftp(1)、`{.literal}
    `sftp(1)、`{.literal} ssh `-keygen(1)、ssh`{.literal}
    `-copy-id(1)、ssh`{.literal} `_config(5)`{.literal}、ssh
    `_config(5)`{.literal}、update `-crypto-policies(8)和`{.literal}
    `crypto-policies(7)`{.literal} man page.
-   [OpenSSH 主页](http://www.openssh.com/){.link} 。
-   [为使用非标准配置的应用程序和服务配置
    SELinux](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/using_selinux/index#configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux){.link}。
-   [使用 firewalld
    控制网络流量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/securing_networks/index#controlling-network-traffic-using-firewalld_using-and-configuring-firewalls){.link}。
:::
:::
:::
[]{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html}
::: chapter
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html#configuring-secure-communication-with-the-ssh-system-roles_securing-networks}第 2 章 使用 SSH 系统角色配置安全通信 {.title}
:::
作为管理员，您可以使用 SSHD 系统角色来配置 SSH 服务器，使用 SSH
系统角色来通过Red Hat Ansible Automation Platform 在任意数量的 RHEL
系统上同时配置 SSH 客户端。
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html#sshd-system-role-variables_configuring-secure-communication-with-the-ssh-system-roles}SSHD 系统角色变量 {.title}
:::
在 SSHD 系统角色 playbook 中，您可以根据您的偏好和限制来定义 SSH
配置文件的参数。
如果没有配置这些变量，系统角色会生成一个与 RHEL 默认值匹配的
`sshd_config`{.literal} 文件。
在所有情况下，布尔值在 `sshd`{.literal} 配置中都正确呈现为
`yes`{.literal} 和 `no`{.literal}。您可以使用 list
来定义多行配置项。例如：
``` screen
sshd_ListenAddress:
  - 0.0.0.0
  - '::'
```
呈现为：
``` screen
ListenAddress 0.0.0.0
ListenAddress ::
```
::: variablelist
**SSHD 系统角色的变量**
[`sshd_enable`{.literal}]{.term}
:   如果设置为 `False`{.literal}，则角色将被完全禁用。默认值为
    `True`{.literal}。
[`sshd_skip_defaults`{.literal}]{.term}
:   如果设置为
    `True`{.literal}，则系统角色不会应用默认值。相反，您可以使用
    `sshd`{.literal} dict 或 `sshd_Key`{.literal}
    变量来指定完整的配置默认值集合。默认值为 `False`{.literal}。
[`sshd_manage_service`{.literal}]{.term}
:   如果设置为
    `False`{.literal}，则服务不会被管理，这意味着它不会在引导时启用，也不会启动或重新加载。除非在容器内或
    AIX 中运行，否则默认为 `True`{.literal}，因为 Ansible
    服务模块目前不支持对 AIX 的 `启用`{.literal} 。
[`sshd_allow_reload`{.literal}]{.term}
:   如果设置为 `False`{.literal}，则`sshd`{.literal}
    不会在配置更改后重新加载。这可帮助进行故障排除。要应用更改后的配置，请手动重新加载
    `sshd`{.literal}。默认为与 `sshd_manage_service`{.literal}
    相同的值，但 AIX 除外，其中 `sshd_manage_service`{.literal} 默认为
    `False`{.literal}，但 `sshd_allow_reload`{.literal} 默认为
    `True`{.literal}。
[`sshd_install_service`{.literal}]{.term}
:   如果设置为 `True`{.literal}，该角色将为 `sshd`{.literal}
    服务安装服务文件。这会覆盖操作系统中提供的文件。除非您要配置第二个实例，否则不要设置为
    `True`{.literal}，您也可以更改 `sshd_service`{.literal}
    变量，。默认值为 `False`{.literal}。
    该角色使用以下变量指向的文件作为模板：
    ``` screen
    sshd_service_template_service (default: templates/sshd.service.j2)
    sshd_service_template_at_service (default: templates/PI:EMAIL)
    sshd_service_template_socket (default: templates/sshd.socket.j2)
    ```
[`sshd_service`{.literal}]{.term}
:   此变量更改 `sshd`{.literal} 服务名称，这对于配置第二个
    `sshd`{.literal} 服务实例非常有用。
[`sshd`{.literal}]{.term}
:   包含配置的字典。例如：
    ``` screen
    sshd:
      Compression: yes
      ListenAddress:
        - 0.0.0.0
    ```
[`sshd_OptionName`{.literal}]{.term}
:   您可以使用由 `sshd_`{.literal} 前缀和选项名称而不是 dict
    组成的简单变量来定义选项。简单的变量覆盖 `sshd`{.literal}
    字典中的值。例如：
    ``` screen
    sshd_Compression: no
    ```
[`sshd_match`{.literal} 和 `sshd_match_1`{.literal} 到 `sshd_match_9`{.literal}]{.term}
:   字典列表或 只是匹配部分的字典。请注意，这些变量不会覆盖
    `sshd`{.literal}
    字典中定义的匹配块。所有源都会反映在生成的配置文件中。
:::
::: title
**SSHD 系统角色的辅助变量**
:::
您可以使用这些变量来覆盖与每个支持的平台对应的默认值。
::: variablelist
[`sshd_packages`{.literal}]{.term}
:   您可以使用此变量来覆盖安装的软件包的默认列表。
[`sshd_config_owner`{.literal}、`sshd_config_group`{.literal} 和 `sshd_config_mode`{.literal}]{.term}
:   您可以使用这些变量为该角色生成的 `openssh`{.literal}
    配置文件设置所有权和权限。
[`sshd_config_file`{.literal}]{.term}
:   此角色保存生成的 `openssh`{.literal} 服务器配置的路径。
[`sshd_binary`{.literal}]{.term}
:   `openssh`{.literal} 的 `sshd`{.literal} 可执行文件的路径。
[`sshd_service`{.literal}]{.term}
:   `sshd`{.literal} 服务的名称。默认情况下，此变量包含目标平台所使用的
    `sshd`{.literal} 服务的名称。当角色使用
    `sshd_install_service`{.literal} 变量时，您还可以使用它来设置自定义
    `sshd`{.literal} 服务的名称。
[`sshd_verify_hostkeys`{.literal}]{.term}
:   默认值为 `auto`{.literal}。当设置为 `auto`{.literal}
    时，这将列出生成的配置文件中存在的所有主机密钥，并生成所有不存在的路径。此外，权限和文件所有者被设置为默认值。如果该角色用于部署阶段来确保服务能够在第一次尝试时启动，则这非常有用。若要禁用此检查，可将此变量设置为空列表
    `[]`{.literal}。
[`sshd_hostkey_owner`{.literal},`sshd_hostkey_group`{.literal},`sshd_hostkey_mode`{.literal}]{.term}
:   使用这些变量来设置 `sshd_verify_hostkeys`{.literal}
    的主机密钥的所有权和权限。
[`sshd_sysconfig`{.literal}]{.term}
:   在基于 RHEL 的系统上，这个变量配置 `sshd`{.literal}
    服务的其它详细信息。如果设置为
    `true`{.literal}，则此角色还会根据以下配置来管理
    `/etc/sysconfig/sshd`{.literal} 配置文件：默认值为
    `false`{.literal}。
[`sshd_sysconfig_override_crypto_policy`{.literal}]{.term}
:   在 RHEL 8 中，当设置为 `true`{.literal}
    时，这个变量会覆盖系统范围的加密策略。默认值为 `false`{.literal}。
[`sshd_sysconfig_use_strong_rng`{.literal}]{.term}
:   在基于 RHEL 的系统上，此变量可以强制 `sshd`{.literal}
    使用给定的字节数作为参数来重新设置 `openssl`{.literal}
    随机数字生成器的种子。默认值为
    `0`{.literal}，它会禁用此功能。如果系统没有硬件随机数字生成器，请不要打开此选项。
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html#configuring-openssh-servers-using-the-sshd-system-role_configuring-secure-communication-with-the-ssh-system-roles}使用 SSHD 系统角色来配置 OpenSSH 服务器 {.title}
:::
您可以通过运行 Ansible playbook，使用 SSHD 系统角色来配置多个 SSH
服务器。
::: itemizedlist
**先决条件**
-   可以访问一个或多个 [*受管节点*]{.emphasis}，它们是您要使用 SSHD
    系统角色来配置的系统。
-   [*对控制节点的访问和权限*]{.emphasis}，这是 Red Hat Ansible Engine
    配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   Red Hat Ansible Engine 已安装。
    -   `rhel-system-roles`{.literal} 软件包已安装。
    -   列出受管节点的清单文件。
    :::
:::
::: orderedlist
**流程**
1.  为 SSHD 系统角色复制示例 playbook:
    ``` screen
    # cp /usr/share/doc/rhel-system-roles/sshd/example-root-login-playbook.yml path/custom-playbook.yml
    ```
2.  使用文本编辑器打开复制的 playbook，例如：
    ``` screen
    # vim path/custom-playbook.yml
    ---
    - hosts: all
      tasks:
      - name: Configure sshd to prevent root and password login except from particular subnet
        include_role:
          name: rhel-system-roles.sshd
        vars:
          sshd:
            # root login and password login is enabled only from a particular subnet
            PermitRootLogin: no
            PasswordAuthentication: no
            Match:
            - Condition: "Address 192.0.2.0/24"
              PermitRootLogin: yes
              PasswordAuthentication: yes
    ```
    playbook 将受管节点配置为 SSH 服务器，以便：