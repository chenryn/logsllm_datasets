Certainly! Here is the optimized and more professional version of your text:

---

### Script for Decrypting and Validating PNG Data

We start by defining the expected header bytes for a valid PNG file:
```python
expected = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52]
```

Next, we read the byte data from a file and convert it into an integer list:
```python
with open("bytes.txt") as f:
    bytes_arr = list(map(int, f.read().split(" ")))
```

We then iterate over each byte in the expected header and test different shift values to find the correct key. The shift value that matches the expected byte is stored in the `shifters` list:
```python
shifters = [[] for _ in range(len(expected))]
for i in range(len(expected)):
    for shifter in range(10):
        j = 0
        offset = (((j + shifter) * KEY_LEN) % len(bytes_arr)) + i
        if bytes_arr[offset] == expected[i]:
            shifters[i].append(shifter)
print(shifters)
```

Using the `itertools.product` function, we generate all possible combinations of the shift values and create a key. We use 'a' as a filler value for the key:
```python
import itertools

for p in itertools.product(*shifters):
    key = "".join(f"{n}a" for n in p)
    create_png(bytes_arr, key, "out")
```

### Running the Script

When running the script, we get the following output:
```console
root@kali:/media/sf_CTFs/pico/Java_Script_Kiddie_2# python3 solve.py
[[1], [8], [4], [1, 5], [0], [6], [9], [5], [4, 5], [2, 3, 4], [2, 3, 4, 5], [3], [1], [6], [9], [6]]
Key 1a8a4a1a0a6a9a5a4a2a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a2a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a2a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a2a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a3a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a3a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a3a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a3a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a4a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a4a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a4a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a4a4a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a2a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a2a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a2a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a2a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a3a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a3a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a3a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a3a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a4a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a4a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a4a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a1a0a6a9a5a5a4a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a2a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a2a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a2a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a2a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a3a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a3a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a3a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a3a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a4a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a4a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a4a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a4a4a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a2a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a2a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a2a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a2a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a3a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a3a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a3a4a3a1a6a9a6a produces a valid PNG - Saving
Key 1a8a4a5a0a6a9a5a5a3a5a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a4a2a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a4a3a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a4a4a3a1a6a9a6a produces an invalid PNG - Ignoring
Key 1a8a4a5a0a6a9a5a5a4a5a3a1a6a9a6a produces an invalid PNG - Ignoring
```

The key that produced a valid image is `1a8a4a5a0a6a9a5a5a3a4a3a1a6a9a6a`:
![](images/qr2.png)

This key, when used, results in the following QR code:
```console
root@kali:/media/sf_CTFs/pico/Java_Script_Kiddie_2# zbarimg out/1a8a4a5a0a6a9a5a5a3a4a3a1a6a9a6a.png
QR-Code:picoCTF{e1f443bfe40e958050e0d74aec4daa48}
scanned 1 barcode symbols from 1 images in 0.05 seconds
```

---