# 四、使用存储和资源
[第三章](03.html#22O7C0-6c8359cae3d4492eb9973d94ec3e4f1e)*Kubernetes 入门*我们介绍了 Kubernetes 的基本功能。一旦开始部署 Kubernetes 的一些容器，就需要考虑应用的数据生命周期和 CPU/内存资源管理。
在本章中，我们将讨论以下主题:
*   容器如何随体积变化
*   介绍 Kubernetes 音量功能
*   Kubernetes 持久卷的最佳实践和陷阱
*   Kubernetes 资源管理
# 不可分割的卷管理
默认情况下，Kubernetes 和 Docker 使用本地主机磁盘。Docker 应用可以将任何数据存储和加载到磁盘上，例如日志数据、临时文件和应用数据。只要主机有足够的空间，应用有必要的权限，只要容器存在，数据就会存在。换句话说，当容器关闭时，应用退出，崩溃，并将容器重新分配给另一个主机，数据将丢失。
# 容器容积生命周期
为了理解 Kubernetes 卷管理，您需要了解 Docker 卷生命周期。以下示例显示了容器重新启动时 Docker 如何处理卷:
```
//run CentOS Container
$ docker run -it centos
# ls
anaconda-post.log  dev  home  lib64       media  opt   root  sbin  sys  usr
bin                etc  lib   lost+found  mnt    proc  run   srv   tmp  var
//create one file (/I_WAS_HERE) at root directory
# touch /I_WAS_HERE
# ls /
I_WAS_HERE         bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var
anaconda-post.log  dev  home  lib64  media       opt  root  sbin  sys  usr 
//Exit container
# exit
exit 
//re-run CentOS Container
# docker run -it centos 
//previous file (/I_WAS_HERE) was disappeared
# ls /
anaconda-post.log  dev  home  lib64       media  opt   root  sbin  sys  usr
bin                etc  lib   lost+found  mnt    proc  run   srv   tmp  var  
```
在 Kubernetes 上，它还需要 care pod 重启。在资源短缺的情况下，Kubernetes 可能会停止一个容器，然后在同一或另一个 Kubernetes 节点上重新启动一个容器。
以下示例显示了当资源短缺时，Kubernetes 的行为。当收到内存不足错误时，一个 pod 被终止并重新启动:
```
//there are 2 pod on the same Node
$ kubectl get pods
NAME                          READY     STATUS    RESTARTS   AGE
Besteffort                    1/1       Running   0          1h
guaranteed                    1/1       Running   0          1h 
//when application consumes a lot of memory, one Pod has been killed
$ kubectl get pods
NAME                          READY     STATUS    RESTARTS   AGE
Besteffort                    0/1       Error     0          1h
guaranteed                    1/1       Running   0          1h 
//clashed Pod is restarting
$ kubectl get pods
NAME                          READY     STATUS             RESTARTS   AGE
Besteffort                    0/1       CrashLoopBackOff   0          1h
guaranteed                    1/1       Running            0          1h
//few moment later, Pod has been restarted 
$ kubectl get pods
NAME                          READY     STATUS    RESTARTS   AGE
Besteffort                    1/1       Running   1          1h
guaranteed                    1/1       Running   0          1h
```
# 在一个容器内的容器之间共享容积
[第 3 章](03.html#22O7C0-6c8359cae3d4492eb9973d94ec3e4f1e)、*Kubernetes 入门*描述了同一 Kubernetes pod 内的多个容器可以共享相同的 pod IP 地址、网络端口和 IPC，因此应用可以通过本地主机网络相互通信；但是，文件系统是隔离的。
下图显示**雄猫**和 **nginx** 在同一个 Pod 中。这些应用可以通过 localhost 相互通信。但是，他们不能访问对方的`config`文件:
![](img/00046.jpeg)
有些应用不会影响这些场景和行为，但是有些应用可能有一些用例要求它们使用共享目录或文件。因此，开发人员和 Kubernetes 管理员需要了解无状态和有状态应用的不同类型。
# 无状态和有状态应用
就无状态应用而言，在这种情况下使用临时卷。容器上的应用不需要保存数据。虽然无状态应用可能会在容器存在时将数据写入文件系统，但就应用的生命周期而言，这并不重要。
例如，`tomcat`容器运行一些 web 应用。它也在`/usr/local/tomcat/logs/`下写一个应用日志，但是如果丢失了一个`log`文件，它不会受到影响。
但是，如果您开始分析应用日志会怎么样？出于审计目的需要保存吗？在这个场景中，Tomcat 仍然可以是无状态的，但是将`/usr/local/tomcat/logs`卷共享给另一个容器，比如 Logstash([https://www.elastic.co/products/logstash](https://www.elastic.co/products/logstash))。然后 Logstash 会发送一个日志到选择的分析商店，比如 elastic search([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch))。
在这种情况下，`tomcat`容器和`logstash`容器*必须在同一个 Kubernetes 荚*中，并共享`/usr/local/tomcat/logs`体积，如下所示:
![](img/00047.jpeg)
上图显示了 Tomcat 和 Logstash 如何使用 Kubernetes `emptyDir`卷([https://Kubernetes . io/docs/concepts/storage/volumes/# emptydir)](https://kubernetes.io/docs/concepts/storage/volumes/)共享`log`文件。
Tomcat 和 Logstash 没有通过本地主机使用网络，而是通过 Kubernetes `emptyDir`卷在 Tomcat 容器的`/usr/local/tomcat/logs`和 Logstash 容器的`/mnt`之间共享文件系统:
![](img/00048.jpeg)
让我们创建`tomcat`和`logstash` pod，然后看看 Logstash 是否可以看到`/mnt`下的 Tomcat 应用日志:
![](img/00049.jpeg)
在这种情况下，在最终目标中，弹性搜索必须是有状态的。就有状态而言，意味着使用持久卷。即使容器重新启动，弹性搜索容器也必须保留数据。此外，您不需要在与 Tomcat/Logstash 相同的容器中配置 Elasticsearch 容器。因为 Elasticsearch 应该是一个集中的日志数据存储，所以它可以从 Tomcat/Logsstash 窗格中分离出来并独立扩展。
一旦您确定您的应用需要一个持久卷，就有一些不同类型的卷和不同的方法来管理持久卷。
# Kubernetes 持久卷和动态资源调配
Kubernetes 支持多种持久卷。比如 AWS EBS、谷歌持久盘等公共云存储。它还支持网络(分布式)文件系统，如 NFS、GlusterFS 和 Ceph。此外，它还可以支持块设备，如 iSCSI 和光纤通道。根据环境和基础架构，Kubernetes 管理员可以选择持久性卷的最佳匹配类型。
以下示例使用 GCP 永久磁盘作为永久卷。第一步是创建一个 GCP 永久磁盘并命名为`gce-pd-1`。
If you use AWS EBS or Google Persistent Disk, the Kubernetes node must be in the AWS or Google Cloud Platform.
![](img/00050.jpeg)
然后在`Deployment`定义中指定名称`gce-pd-1`:
![](img/00051.jpeg)
它会将永久磁盘从 GCE 永久磁盘挂载到`/usr/local/tomcat/logs`，可以持久化 Tomcat 应用日志。
# 声称抽象层的持久卷
将持久卷直接指定到配置文件中，这与特定的基础架构紧密结合。在前面的例子中，这是谷歌云平台，也是磁盘名称(`gce-pd-1`)。从容器管理的角度来看，pod 定义不应该被锁定在特定的环境中，因为基础设施可能会因环境而异。理想的 pod 定义应该是灵活的，或者抽象出只指定卷名和装载点的实际基础结构。
因此，Kubernetes 提供了一个在 pod 和持久卷之间关联的抽象层，称为**持久卷声明** ( **PVC** )。它允许我们与基础设施分离。Kubernetes 管理员只需要提前预分配一个必要大小的持久卷。那么 Kubernetes 将结合在持久体积和聚氯乙烯之间:
![](img/00052.jpeg)
以下示例是使用聚氯乙烯的 pod 的定义；让我们重复前面的例子(`gce-pd-1`)首先向 Kubernetes 注册:
![](img/00053.jpeg)
然后，创建一个与持久卷(`pv-1`)相关联的聚氯乙烯。
Note that setting it as `storageClassName: ""` means, that it should explicitly use static provisioning. Some of the Kubernetes environments such as **Google Container Engine** (**GKE**), are already set up with Dynamic Provisioning. If we don't specify `storageClassName: ""`, Kubernetes will ignore the existing `PersistentVolume` and allocates a new `PersistentVolume` when creating the `PersistentVolumeClaim`.
![](img/00054.jpeg)
现在，`tomcat`设置已经从特定音量解耦到“`pvc-1`”:
![](img/00055.jpeg)
# 动态资源调配和存储类
聚氯乙烯为持久卷管理提供了一定程度的灵活性。但是，预分配一些持久性卷池可能不经济，尤其是在公共云中。
Kubernetes 还通过支持持久卷的动态供应来帮助解决这种情况。Kubernetes 管理员定义了持久卷的*提供程序*，称为`StorageClass`。然后，永久卷声明要求`StorageClass`动态分配一个永久卷，然后将其与永久卷相关联:
![](img/00056.jpeg)
在以下示例中，AWS EBS 被用作`StorageClass`，然后，在创建聚氯乙烯时，`StorageClass`动态创建 EBS，并将其注册到 Kubernetes 持久卷，然后连接到聚氯乙烯:
![](img/00057.jpeg)
一旦`StorageClass`创建成功，创建一个没有 PV 的 PVC，但是指定`StorageClass`名称。在本例中，这将是“`aws-sc`”，如下图所示:
![](img/00058.jpeg)
然后，聚氯乙烯要求`StorageClass`在 AWS 上自动创建一个永久卷，如下所示:
![](img/00059.jpeg)
请注意，默认情况下，kops([https://github.com/kubernetes/kops](https://github.com/kubernetes/kops))和谷歌容器引擎([https://cloud.google.com/container-engine/](https://cloud.google.com/container-engine/))等 Kubernetes 供应工具会创建一个`StorageClass`。例如，kops 在 AWS 环境中将默认`StorageClass`设置为 AWS EBS。以及 GKE 的谷歌云持久盘。更多信息请参考 AWS 上的[第 9 章](09.html#6NGV40-6c8359cae3d4492eb9973d94ec3e4f1e)、 *Kubernetes 和 GCP* 上的[第 10 章](10.html#7BHQU0-6c8359cae3d4492eb9973d94ec3e4f1e)、 *Kubernetes:*
```
//default Storage Class on AWS
$ kubectl get sc
NAME            TYPE
default         kubernetes.io/aws-ebs
gp2 (default)   kubernetes.io/aws-ebs
//default Storage Class on GKE
$ kubectl get sc
NAME                 TYPE
standard (default)   kubernetes.io/gce-pd   
```
# 短暂而持久的环境问题
您可以将您的应用确定为无状态，因为`datastore`功能由另一个 pod 或系统处理。然而，有时应用实际上存储了您不知道的重要文件，这有一些陷阱。比如 Grafana([https://grafana.com/grafana](https://grafana.com/grafana))，它连接了石墨([https://graphiteapp.org](https://graphiteapp.org))和 influxb([https://www.influxdata.com/time-series-database/](https://www.influxdata.com/time-series-database/)等时间序列数据源，让人们可以判断 Grafana 是否是无状态应用。
但是，Grafana 本身也使用数据库来存储用户、组织和仪表板元数据。默认情况下，Grafana 使用 SQLite3 组件，并将数据库存储为`/var/lib/grafana/grafana.db`。因此，当容器重新启动时，Grafana 设置将全部重置。
以下示例演示了 Grafana 如何处理短暂的卷:
![](img/00060.jpeg)
让我们创建一个名为`kubernetes org`的 Grafana `organizations`，如下所示:
![](img/00061.jpeg)