be further reduced by using multiple random parame-
ters). After ﬁnding the cookie on the stack and thus
the address of the parameter, we know the exact offset
USENIX Association  
25th USENIX Security Symposium  147
9
f u n c t i o n c h e c k _ a d d r e s s ( cookie ) {
// ESP_ : Any address on stack
// N E E D E D _ A D D R E S S : address where
//
while ( m e m _ r e a d ( ESP_ ) != cookie )
call must reside
ESP_ -= 4; // Check next value
// get return address from p a r a m e t e r
var ret_ = m e m _ r e a d ( ESP_ - 0 xC ) ;
// get call i n s t r u c t i o n address
var c a l l _ a d d r = ret_ - 5;
return c a l l _ a d d r == N E E D E D _ A D D R E S S ;
}
Listing 3: JavaScript function check address
from the parameter’s address, and from there we can tell
where the return address is located. Reading the return
instruction pointer, we recover the address of the corre-
sponding call instruction and verify that it is at the correct
place (NEEDED ADDRESS in this case). We can add another
call to check address before i=Math.random() to verify
if NOPs are inserted between the emitted call instruc-
tions of i=Math.random() and check address(). If both
checks (check address) succeed, we will be guaranteed
that no NOPs were inserted.
IE summary: An attacker can evade both aforemen-
tioned defenses and emit three-byte gadgets even in IE.
To demonstrate this, we ﬁrst dynamically create many
JavaScript functions to get the correct third byte (0xc3).
After ﬁnding the function at the correct distance from the
callee, we replace it with a special function, which, af-
ter compilation, emits direct call instructions and checks
their positions. We trigger the recompilation of the lat-
ter function multiple times, until the checks are true,
which means that the gadget is found.
In our experi-
ments, spamming the code pages with functions took ap-
proximately four seconds, and for most of the time, we
found the correct third byte on the ﬁrst try. Triggering
the recompilation of a function takes the following steps:
(i) Remove the included JavaScript ﬁle from the head of
the HTML ﬁle, (ii) wait until the function gets removed
by the garbage collector, and (iii) include the JavaScript
ﬁle again and trigger the compilation of the same func-
tion. Each iteration of the above steps takes around 2
seconds, most of the delay coming from the second step
(waiting for the garbage collector).
For two-byte gadgets, on the other hand, an attacker
can discard the third byte. In this case, she can directly
compile multiple functions at once, check the positions
of emitted direct calls and use the ones with the required
displacements.
4.4.1 Proof-of-Concept Gadget Generation
To demonstrate the practicality of the aforementioned
gadget emitting techniques, we crafted a special
JavaScript code for Chrome and IE, which generated the
gadgets required for the exploit. The gadgets that we
aimed to generate are the ones used by Athanasakis et al.
Namely, the set of gadgets to load the registers with the
arguments used in a system call and one for the system
call itself. We created these gadgets in Chrome 51 (64
bit) and IE 11 (32 bit).
Chrome: For Chrome, we targeted for the follow-
ing instructions: pop r8; pop r9; pop rcx; pop rdx
(to prepare the system call arguments) and int 0x80 (to
execute the system call). Being able to emit three-byte
gadgets, we encoded these instructions into the follow-
ing gadgets:
r8, ret
pop
r9, ret
pop
rcx, ret
pop
pop
rdx, ret
int 0x80, ret
; 4158c3
; 4159c3
59c3
;
;
5ac3
; cd80c3
We used both our proposed techniques for the emis-
sion of these gadgets. We generated a system call gad-
get via direct calls. First, we created a string represen-
tation of a JavaScript function containing 0x80000 j++
statements (j++ takes 0x20 bytes), then we created a
JavaScript function from it via eval, and ﬁnally we com-
piled it by calling the generated function. This gave us
a system call gadget, together with all possible two-byte
gadgets, hence also covering pop rcx and pop rdx.
For the generation of pop r8 and pop r9 gadgets,
we used cascaded if statements (also created with
eval). The JavaScript function generating the afore-
mentioned gadgets is shown in Listing 4. As gad-
gets pop r8 and pop r9 differ by 0x100, their corre-
sponding if statements also have to be 0x100 bytes
apart. Note however that in the ﬁrst if body (F1), we
add 0xed bytes to ﬁll up the space instead of 0x100.
This is due to the fact that an if statement is com-
piled to 0x13 bytes, which is also added to the dis-
tance between relative jumps. To get 0xed bytes, we use
j=0x1010101 7 times (0x1b*7=0xbd) and j++;j=i;j=i
(0x20+0x8+0x8=0x30). To generate 0xc35841 bytes (F2),
we use j=0x1010101 0xd3 times (0x1b*0xd3=0x1641),
and ﬁll the remaining 0xC34200 bytes by using j++
0x61A10 times (0x20*0x61A10=0xC34200).
The entire gadget generation process in Chrome took
≈1.3 seconds, in a VirtualBox Virtual Machine running
Windows 10 (Intel Core i5-4690 CPU 3.50GHz).
Internet Explorer: As we have mentioned earlier, In-
ternet Explorer, by default, comes with a 32-bit JIT com-
piler. Therefore, for gadget generation we chose gadgets
that would be used in a 32-bit system. For simplicity
148  25th USENIX Security Symposium 
USENIX Association
10
f u n c t i o n popr8r9 ( r8 , r9 ) {
var i =0 , j =0;
if ( r9 ) {
/* F1 : fillup 0 xed Bytes */
if ( r8 ) {
/* F2 : fillup 0 xc35841 Bytes */
}
}
}
f u n c t i o n p o p a r e t I E () {
var i =0;
i = Math . random () ;
... /* 232 times in total */
c h e c k _ a d d r e s s () ;
i = Math . random () ;
... /*
return i ;
28 times in total */
}
Listing 4: JavaScript function popr8r9
Listing 6: JavaScript function poparetIE
f u n c t i o n s y s c a l l I E () {
var i =0;
i = Math . random () ;
... /* 240 times in total */
c h e c k _ a d d r e s s () ;
i = Math . random () ;
... /* 10 times in total */
return i ;
}
Listing 5: JavaScript function syscallIE
we used the set: popa; int 0x80, where popa sets the
contents all x86 registers from the stack and int 0x80
performs the system call.
The ﬁrst part of the gadget emission process in IE is
ﬁnding the right distance from the callee, i.e., a page
that is 0xc3 bytes away from the callee. This part
was done by a JavaScript code, which simply creates
and compiles big functions (in our case 200 of them,
≈0x10 000 bytes each). After ﬁnding the correct page,
we deallocated it and spammed the page with 16 spe-
cially crafted JavaScript functions, each of them cov-
ering 0x1000 bytes. For example, the JavaScript func-
tion used for emitting a system call (Listing 5) contains
250 Math.random calls (each of them compiling to 0xc
bytes). At the correct place between these calls, i.e.,
when the caller is at approximately the correct distance
from Math.random, we inserted a call to check address
to verify the correctness of the gadget. In case the emit-
ted call is not at the correct place, we deallocated the
function and reallocated it again. Note that the reallo-
cation is only needed for three-byte gadgets, where we
also want to control the least signiﬁcant byte. For two-
byte gadgets (e.g., for popa;ret), we only need to call
check address to compute the address of the call instruc-
tion, for which we already know that is at the correct
place (Listing 6).
In comparison to Chrome, gadget generation in IE is
probabilistic and thus the time required for it also dif-
fers. There are two sources of the variance. First, gen-
erating the large functions to search for the correct third-
byte distance from the callee; and second, compiling the
gadget-emitting function in the found (correct) page, and
Defense
Const. Blinding
NOP Insertion
Code Size Limit
(cid:31)
×
×
Chrome Firefox
IE
(cid:31)
(cid:31)
(cid:31)
×
×
×
Table 1: Current defenses in modern browsers
recompiling it until the correct gadget is emitted. In our
experiments, we created 200 large functions and got the
required third-byte distance for the ﬁrst time in most of
the cases. Compilation of these 200 functions took ≈4
seconds on a physical machine running Windows 10 (In-
tel Core i5-6200U CPU 2.3GHz). Each recompilation
in the second step took 2-3 seconds. We ran the gadget
generator in IE 10 times. Generating popa; ret and int
0x80; ret took on average 32 seconds, 11 and 47 sec-
onds being the fastest and the slowest respectively.
4.4.2 Summary of Defenses and Vulnerabilities
We have shown that an attacker can encode arbitrary
gadgets by triggering implicit constants with specially-
crafted JavaScript code. Combining this with the abil-
ity to leak code pointers, an adversary can guess the ad-
dresses of the emitted gadgets without reading any code,
thus making the attack possible even if code pages are
non-readable.
Table 1 summarizes the defense techniques of mod-
ern browsers against code-reuse attacks in JIT-compiled
code. Both IE and Chrome deploy constant blinding.
Furthermore, IE uses NOP insertion as a ﬁne-grained
code randomization scheme, as also suggested in li-
brando [17]. However, as Table 2 shows, none of the
modern browsers sufﬁciently protect against the pro-
posed attacks. Only Firefox “avoids” implicit constants
by not using direct calls in baseline JIT compiler, but still
exposes implicit constants in relative jumps.
1Gadgets up to two bytes can be emitted.
11
USENIX Association  
25th USENIX Security Symposium  149
Attack
Relative Jumps
Direct calls
Chrome Firefox
(cid:31)
(cid:31)
(cid:31)
–
IE
(cid:31)1
(cid:31)
Table 2: Browsers vulnerable to implicit constants
5 Defense
Seeing the threat of implicit constants, we now propose
a technique to defend against it. We identify two steps
that the attacker needs to take for using implicit con-
stants as gadgets: (i) The attacker must be able to emit
the required gadgets, and (ii) she must be able to acquire
the necessary information (e.g., leak function pointers)
to compute the addresses of the emitted gadgets.
One solution to tackle this problem would be to hide
code pointers, e.g., by extending Readactor(++) to also
cover the JIT-compiled code, as Crane et al. suggested.
This would hinder the attacker from executing step (ii).
However, this would still allow the attacker to emit arbi-
trary gadgets by leveraging the implicit constants (step
(i)). Furthermore, the fact that the JIT compiler runs
in the same process as the attacker makes it challeng-
ing to remove all possible code pointers that could, di-
rectly or indirectly, reveal the addresses of emitted gad-
gets. Therefore, we propose an orthogonal defense tech-
nique that forbids the attacker to emit the gadgets in the
ﬁrst place (i.e., step (i)). Our defense could be comple-
mented with holistic code pointer hiding techniques to
get additional security guarantees.
The main idea of our defense can be split in two parts:
(i) We convert direct calls and jumps into indirect ones,
such that their destination is taken from a register, and
(ii) we use constant blinding to obfuscate the constants
that are emitted by step (i) and may potentially contain
attacker-controlled gadgets. For step (ii), we use the
same cookie that is used by V8 to blind integer con-
stants, and is generated anew before the compilation of
each function. Note that the cookie is encoded in non-
readable code and cannot be leaked. However, even if
the attacker was able to leak the cookie, she could only
guess the immediate values emitted in the current func-
tion, and any future function will have a different cookie
value.
5.1 Removing Implicit Constants from V8
We integrated our defense into V8, Chrome’s JavaScript
engine. We have chosen V8 due to its popularity and due
to the fact that it is vulnerable to both our suggested at-
tacks. Moreover, since V8 JIT-compiles JavaScript di-
rectly to the native code, it emits many checks (con-
ditional jumps) and function calls (e.g., calls to inline
caches), which makes V8 a suitable candidate for our
defense prototype evaluation. For our defense technique,
we changed the functions of V8 that are responsible for
emitting native code. In total, we modiﬁed ≈200 lines
of code to account for all the cases of attacker controlled
relative calls or jumps.
5.1.1 Conditional Jumps
To harden conditional jumps, we modiﬁed the native
code that is emitted when JavaScript conditionals (such
as if,while,for,do-while) are compiled. Our basic
idea is to switch from relative to absolute jumps, and
blind the resulting immediate values. To this end, we
ﬁrst add a padding (a sequence of NOP instructions) to
each compiled conditional to reserve the space for later
changes. For the hardened version of the conditional
jump we need 19 bytes (instead of 6 bytes). We thus ap-
pend 13 NOP instructions after the existing conditional
jump. At the end of the compilation, when the constants
of all jumps are calculated, we convert all relative jumps
to absolute jumps, eliminating the need to ﬁll a displace-
ment with potential gadgets.
Figure 4 illustrates the steps of the aforementioned
modiﬁcations. Figure 4(A) shows the compiled if state-
ment in original V8. Figure 4(B) shows the same state-
ment with the NOP padding. Finally, Figure 4(C) shows
the assembly of the hardened if statement. In this ﬁnal
form, the condition of the original jump is inverted and
the original long jump (having 4 byte jump distance) is
replaced with the 1-byte short jump. Consequently, the
new jump is taken if the original condition was false, i.e.,
the fall-through case. Otherwise, we convert the relative