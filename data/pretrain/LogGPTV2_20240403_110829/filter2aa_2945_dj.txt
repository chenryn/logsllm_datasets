object, 199, 215
operator, 504, 518
out, 194–195, 207, 405, 409
override, 275–276, 288, 307, 313
params, 256, 258, 731
partial, 166
Download from finelybook PI:EMAIL
1139
private, 65, 162–163, 278, 313
protected, 278, 313
public, 162–163, 164, 278, 313, 505, 522
ref, 193–194, 207
sbyte, 215
sealed, 306–307, 313, 314
short, 215
static, 522
StaticResource, 647
string, 184, 215
struct, 216, 227
table of, 36–37
this, 284, 288, 368, 378
uint, 215
ulong, 215
unchecked, 144–145
expressions, 146–148
statements, 145
unsafe, 205–206
ushort, 215
value, 369
var, 54, 62, 179, 484
virtual, 275, 288, 313
void, 63
when, 138–142
where, 401, 408, 489, 501
yield, 444, 448
L
lambda (=>) operator, 64, 425
lambda calculus, 425
Download from finelybook PI:EMAIL
1140
lambda expressions
anonymous methods and, 426–427
defined, 423–424
delegates and, 464
features of, 426
forms of, 425–426
syntax, 424–425
Land method, 279
language interoperability, operators and, 507
Language-Integrated Query. See LINQ (Language-Integrated Query)
Download from finelybook PI:EMAIL
1141
left-shift ( class, 412, 415–416
LINQ (Language-Integrated Query). See also IEnumerable interface
data aggregation, 485–487
data filtering, 484–485, 501
data grouping, 485–487, 501
data joins, 487–488, 502
data ordering, 485–487, 501
data selection, 482–484, 501
deferred evaluation, 497–500
defined, 479–480
examples of, 480–482
order of expressions, 491
PLINQ (Parallel LINQ)
overview, 585
parallelized query over simple collection, 585–587
parallelized query that joins two collections, 587–590
query cancellation, 587–590
Download from finelybook PI:EMAIL
1142
quick reference, 608
query operators, 489–491
quick reference, 501–502
Tree objects and, 491–497
Linq namespace, 489
List class, 412, 413–416
ListenFor element (CustomerVoiceCommands.xml), 689
literals, enumeration
names, 210
values, 211
local scope, 71
local variables
implicitly typed, 57–58
unassigned, 40
lock statement, 332–333, 593, 609
locking data, 593–594, 607, 609
logical operators, 97
logical AND (&&), 97
associativity, 99
precedence, 99
short-circuiting, 97–98
syntax, 97
logical OR (||)
associativity, 99
precedence, 99
short-circuiting, 97–98
syntax, 97
long data type, 40
long keyword, 215
loops
do
blocks, 124
Download from finelybook PI:EMAIL
1143
example of, 132
stepping through, 127–131
syntax, 124
writing, 125–127
exiting
break statement, 124
continue statement, 124
for
blocks, 122
Cards project, 247–248
iteration through arrays, 233–235
multiple initializations and updates in loop, 123
scope, 123
syntax, 121–122
foreach, 234–235, 252, 433
canceling, 557–558
Dictionary419
LinkedList class, 415
List class, 413
Stack class, 417–418
Parallel.For method, 557–558
quick reference, 132
while
blocks, 118
example of, 132
nesting, 117
sentinel variable, 117
syntax, 117
terminating, 117
writing, 118–121
&lt; entity, 109
Download from finelybook PI:EMAIL
1144
M
MachineOverheating event, 466, 467
macros, varargs, 258
Main method, 35
array parameters, 236
asynchronous operations and, 573
BinaryTreeTest project, 398–399, 402
console applications, 8–10
MainPage.xaml files, 27–28, 639
MainPage.xaml.cs file, 27–28
Mammal class
base-class constructors, 270
declaring, 268–269
managed code, 226
managed execution environment, 226
Manifest Designer, 614
ManualResetEventSlim class, 594, 609
Math class
PI field, 160, 175
Sqrt method, 171, 173–174
mathematical operators. See arithmetic operators
MathsOperators project
creating, 49–54
exception handling, 139–142, 149–151
MaxValue property (int data type), 144
memory
allocation, asynchronous methods and, 582–583
boxing, 199–200, 207
garbage collection, 189–190, 324. See also destructors
advantages of, 318–320
finalization, 320
Download from finelybook PI:EMAIL
1145
forcing, 320
freachable queue, 320–321
how it works, 320–321
object lifetimes and, 319
when to use, 321
heap
purpose of, 196–198
storing data on, 198–199
OutOfMemoryException, 198
pointers, 204–206
resource management, 321–324
disposal methods, 321–322
Dispose method, 324–326
exception-safe disposal, 322–323, 326–328, 335
IDisposable interface, 324, 328–330
preventing objects being disposed of more than once, 330–332
thread safety, 332–333
using statements, 323–324, 335
verifying disposal after exception, 333–334
stack
purpose of, 196–198
storing data on, 198–199
unboxing, 200–201
MessageDialog object, 580
methods. See also individual method names
abstract, 306
accessor
indexers, 368
properties, 342–343
adapters, 464–465
anonymous, 426–427
asynchronous
Download from finelybook PI:EMAIL
1146
common errors with, 579–580
Main method and, 573
overview, 567, 568
problem solved by, 568–577
return values, 578–579
scalability and, 568
Windows Runtime APIs and, 580–582
calling, 93
generics, 409
multiple return values, 68–70, 93
from other objects, 68
syntax, 65–68
constructors
base-class, 270–271, 288
calling, 181
declaring, 163–164, 180
default, 164
order of, 165
overloading, 164–165
public versus private, 164
declaring, 62–63, 93
extension methods, 283–287, 288
new methods, 273–274
override methods, 275–276, 288
virtual methods, 274–275, 277, 288
deconstructors, 172–173
defined, 61
defining, 313
delegates
Action452
adding methods to, 455
in automated factory scenario, 453–456
Download from finelybook PI:EMAIL
1147
declaring, 450–451, 454, 456–464, 475
defined, 450
examples of, 451–452
Func, 451–452
Func452
function pointers compared to, 451
instantiating, 475
invoking, 454–455, 475
lambda expressions and, 464
method adapters, 464–465
overview, 450–451
performCalculationDelegate, 450–451
quick reference, 475
removing methods from, 455
destructors
calling, 335
restrictions on, 317–318
writing, 316–318, 335
expression-bodied, 64–65, 93
extracting, 78
generics
calling, 409
creating, 399–400, 408
InsertIntoTree, 400–402
global, 62
instance, 170
length of, 65
naming conventions, 62
nesting, 81–84, 94
overloading, 72–73, 255–256
override
declaring, 275–276, 288
Download from finelybook PI:EMAIL
1148
sealed override, 307
parameters
defining, 62
named arguments, 86–92, 94
optional, 84–86, 87–92, 94
public versus private, 162
quick reference, 93–94
refactoring, 78
replacing with properties, 349–353
returning values from, 93
method declarations, 63–64
multiple return values, 68–70
return types, 235–236
void keyword, 63
scope
class, 72
local, 71
overview, 71
sealed, 307
serializing, 607
signatures, 273
static, 173–174, 181
stepping through, 78–81, 94
syntax, 62–63
WriteLine, 73
writing, 73–77
Methods project
expression-bodied methods, 64–65
method calls, 67
multiple return values, 68–70
Microsoft Patterns & Practices Git repository, 568
Microsoft Visual Studio 2017. See Visual Studio 2017
Download from finelybook PI:EMAIL
1149
Min method, 256–257
MinValue property (int data type), 144
Model-View-ViewModel (MVVM) pattern, 657–658
modulus operators
compound modulus (%=), 116
modulus (%), 48
Moore, Gordon E.526
Moore's Law, 526
MoveNext method, 436, 439, 448
mscorlib.dll file, 17
multicore processors, 526–527. See also tasks
multidimensional arrays, 238, 253, 258
multiple interfaces, 293
multiple return values, calling, 68–70, 93
multiplication (*) operator, 47
multiplyValues method, 53
multitasking
advantages of, 525–526
multicore processors, 526–527
.NET Framework and, 527
tasks
abstracting, 545–549
canceling, 551–561, 566
continuations, 530–531, 563–564, 565
CPU bottlenecks, 533–545
creating, 529, 564
exception handling, 562–563, 565
faulted, 557, 563–564
Parallel class, 545–551
parallelism, 531–538, 545–551, 565
quick reference, 564–566
running, 530, 564
Download from finelybook PI:EMAIL
1150
synchronizing, 531
Task class, 528–529
threads, 528–529
waiting for, 531, 564–565
MVVM (Model-View-ViewModel) pattern, 657–658
N
Name structure, 373
named arguments
interfaces, 291
passing, 86–87, 94
resolving ambiguities with, 87–92
nameof operator, 668–669
namespace keyword, 15
namespaces
assemblies and, 17
bringing into scope, 15
Collections, 412
declaring, 616
defining classes in, 14–15
Generic, 386–387, 411
Linq, 489
longhand names, 16
Numerics, 511
Tasks, 527
Threading, 528, 594
naming conventions
camelCase, 163
case sensitivity, 36
fields, 343–344
methods, 62
Download from finelybook PI:EMAIL
1151
operators, 505
PascalCase, 163
properties, 343–344
reserved words, 36–37
variables, 38
NaN (not a number), 49
narrowing conversions, 517
native code, 226
Navigate element (CustomerVoiceCommands.xml), 689
Navigate method, 693, 697
NavigationArgs class, 698
NegInt32 class, 283–284
nesting
if statements, 101–106
methods, 81–84, 94
while statements, 117
.NET Core template, 4
.NET Framework. See also multitasking
CLR (common language runtime), 85
IAsyncResult design pattern, 584–585
Windows Runtime, compatibility with, 226, 311
New command (File menu), 4
new keyword, 232, 315
array creation, 230, 252
class creation, 161, 179
delegate creation, 450–451, 475
method declarations, 273–274, 313
object creation, 197, 271
New Project dialog box, 4–5, 18, 34
New Universal Windows Project dialog box, 615
Next buttons, adding to forms, 682–685
Next method, 231, 680–681
Download from finelybook PI:EMAIL
1152
NextCustomer command, 679–682
NextCustomer property (ViewModel), 681–682
NodeData property (Tree class), 393–394
nodes, binary tree, 388
NOT (!) operator, 96