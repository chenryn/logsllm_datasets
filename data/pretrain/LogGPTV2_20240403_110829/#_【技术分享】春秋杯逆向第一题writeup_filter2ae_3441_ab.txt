        {
            for(int j=pos_max; j>0; )
            {             if((r_sum[(i - 1) * len + j] > r_sum[(i - 1) * len + j - 1]) && ((i - 1) >= j))
                {
                    cout > i % 6)) != 0;}
最后，根据得到的路径数列串反推得到key，简单使用测试位的方式：
    //路径映射位转换void transfer_step(char *p, char *output) {
        for (int i=5; i>=0; i--)
        {
            output[5 - i] = (p[i] == 'r' ? 1 : 0);
        }} 
    init_map(); //初始化关系映射数组 FILE* f = fopen("dumped.dmp", "rb");unsigned char * buf = (unsigned char *)new unsigned char[0x7D8320 + 1024];memset(buf, 0, 0x7D8320 + 1024);for (int i=0; i0; i-=6){
        char r_path[6] = {0};
        transfer_step(&(path_reverse[i - 5]), r_path); //路径映射位转换
        for (int i=0; i<64; i++)
        {
            char test_char = transfer[i];
            if (get_step(test_char, 0) == r_path[0]) //位步进测试
            {
                if (get_step(test_char, 1) == r_path[1])
                {
                    if (get_step(test_char, 2) == r_path[2])
                    {
                        if (get_step(test_char, 3) == r_path[3])
                        {
                            if (get_step(test_char, 4) == r_path[4])
                            {
                                if (get_step(test_char, 5) == r_path[5])
                                {
                                    cout << test_char; //成功则输出匹配字符
                                }
                            }
                        }
                    }
                }
            }
        }}
输出得到最终KEY：“IpEvtWVLK+N6NAZPKgf6IDtNK6PTR6vB4EEE8NcyJri1Gng+02nnAdTa0ufQNq23KGG3seTdIkhuBTubKZAPKEpEEYc9RqQlgkPmu0QBbNWLINSHlIWxXo0sXJtrZsCoApoe7pqMGANFpFEzEp6I6tDpwsHD0KRAZXKN/d/sC”。