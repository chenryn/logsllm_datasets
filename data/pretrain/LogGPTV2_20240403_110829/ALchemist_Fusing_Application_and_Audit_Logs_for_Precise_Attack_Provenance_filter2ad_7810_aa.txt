title:ALchemist: Fusing Application and Audit Logs for Precise Attack Provenance
without Instrumentation
author:Le Yu and
Shiqing Ma and
Zhuo Zhang and
Guanhong Tao and
Xiangyu Zhang and
Dongyan Xu and
Vincent E. Urias and
Han Wei Lin and
Gabriela F. Ciocarlie and
Vinod Yegneswaran and
Ashish Gehani
ALchemist: Fusing Application and Audit Logs for
Precise Attack Provenance without Instrumentation
Vincent E. Urias‡, Han Wei Lin‡, Gabriela Ciocarlie§, Vinod Yegneswaran§ and Ashish Gehani§
Le Yu∗, Shiqing Ma†, Zhuo Zhang∗, Guanhong Tao∗, Xiangyu Zhang∗, Dongyan Xu∗,
∗Purdue University; †Rutgers University; ‡Sandia National Laboratories; §SRI International
†PI:EMAIL, ‡{veuria, hwlin}@sandia.gov, §{gabriela, vinod, gehani}@csl.sri.com
∗{yu759, zhan3299, taog, xyzhang, dxu}@cs.purdue.edu,
Abstract—Cyber-attacks are becoming more persistent and
complex. Most state-of-the-art attack forensics techniques either
require annotating and instrumenting software applications or
rely on high quality execution proﬁling to serve as the basis
for anomaly detection. We propose a novel attack forensics
technique ALchemist. It is based on the observations that built-
in application logs provide critical high-level semantics and audit
logs provide low-level ﬁne-grained information; and the two share
a lot of common elements. ALchemist
is hence a log fusion
technique that couples application logs and audit logs to derive
critical attack information invisible in either log. It is based on a
relational reasoning engine Datalog and features the capabilities
of inferring new relations such as the task structure of execution
(e.g., tabs in ﬁrefox), especially in the presence of complex asyn-
chronous execution models, and high-level dependencies between
log events. Our evaluation on 15 popular applications including
ﬁrefox, Chromium, and OpenOfﬁce, and 14 APT attacks from the
literature demonstrates that although ALchemist does not require
instrumentation, it is highly effective in partitioning execution
to autonomous tasks (in order to avoid bogus dependencies)
and deriving precise attack provenance graphs, with very small
overhead. It also outperforms NoDoze and OmegaLog, two state-
of-the-art techniques that do not require instrumentation.
I.
INTRODUCTION
Advanced Persistent Threat (APT) is a complex form
of threat that contains multiple phases and targets speciﬁc
organization or institute [4]. A popular method for attack
investigation is to perform dependency analysis on system
audit
logs to reconstruct attack provenance. In [41], [42],
[14], researchers analyzed dependencies among system objects
(e.g., ﬁles and sockets) and subjects (i.e., processes) using
system call
these approaches have limita-
tions in analyzing attacks that involve long running processes
(e.g., browsers). In particular, they all assume that an output
operation depends on all the prior input operations in the
same process, introducing substantial false dependencies. For
example, the write to a downloaded ﬁle by ﬁrefox is considered
dependent on all the websites ﬁrefox has visited before the
download, which is very imprecise. This is known as the
dependency explosion problem.
logs. However,
To solve this problem, researchers proposed using program
analysis to enhance the collected log and partition long running
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24445
www.ndss-symposium.org
processes into execution units/tasks [53], [45]. Each unit/task
is an autonomous portion of the whole execution such as a tab
in ﬁrefox. An output operation is considered dependent on all
the preceding input operations within the same unit. Doing so,
they can preclude a lot of false dependencies. Researchers have
demonstrated the effectiveness of these unit partitioning based
techniques, which yield very few dependence false positives
and false negatives [53], [45]. However, these approaches re-
quire third-party instrumentation, which may not be acceptable
in enterprise environments. In practice, software providers
(e.g., Microsoft) provide maintenance services to their cus-
tomers only when the integrity of their software is guaranteed.
As instrumentation entails changing software (by some third
party), it shifts the responsibility of maintaining the correctness
of software from its original producer to the third party, which
is undesirable. In fact, many vendors provide mechanisms to
proactively prevent their software from being instrumented
such as the Kernel Patch Protection by Microsoft [10]. In
addition,
these techniques record low-level events such as
memory accesses such that the entailed overhead, especially
the space overhead, is high [45]. Another line of work does
not require third-party instrumentation. Instead,
tries to
solve the dependency explosion problem by pruning graphs
with heuristics such as prioritizing low frequency events [49],
[31]. Depending on the quality of execution proﬁle used to
establish the baseline, these methods may ﬂag rarely seen
benign operations as malicious and attack steps leveraging
benign software/IPs as normal (e.g., an APT attack using
phishing pages on Github may evade such methods due to
the frequent visits to Github). In addition, asynchronous and
background behaviors pose signiﬁcant challenges to learning
based methods due to their non-deterministic nature.
it
Our goal is to develop a new attack investigation technique
that can achieve the same accuracy as instrumentation based
methods without requiring instrumentation. We observe that
many widely used applications, especially those that are long-
running and tend to cause dependence explosion, have well-
designed built-in logs. These application logs record important
events with application-speciﬁc semantics (e.g., switching-
to/opening a tab in ﬁrefox). As such, they can be parsed and
analyzed to reconstruct the unit structure of an execution,
which is critical to precise dependence analysis as shown by
the literature [53], [33]. On the other hand, the low level audit
log provides ﬁne-grained information that is invisible in appli-
cation logs and typically corresponds to background activities
(e.g., using JavaScript for background network communica-
tion). Therefore, we propose a novel log fusion technique,
ALchemist, that couples application logs and the audit log,
to produce precise attack provenance. It does not require any
instrumentation and the entailed overhead is low compared to
existing techniques. During attack investigation, ALchemist
ﬁrst normalizes the raw application logs and the audit log to a
canonical form such that their correlations can be inferred. The
canonical form is general such that it can express all the execu-
tion models of common applications, including those having
complex asynchronous/background behaviors. The canonical
log entries are loaded into a Datalog engine [38] to derive
new relations based on a set of pre-deﬁned rules, which we
call the log fusion rules. Precise dependency graphs can be
easily constructed from the inferred relations. In summary, we
make the following contributions:
• We propose a novel log fusion technique that features the
capabilities of inferring new relations from existing logs.
• We develop a set of parsers that can normalize various
logs to an expressive canonical form. We study the exe-
cution models of a set of popular applications from [54],
[53], [45], [52] and their built-in application logs, and
determine that their executions can be expressed by the
canonical form that preserves the critical unit related in-
formation. In addition, we study the log format changes of
these applications (Appendix A) and ﬁnd that log formats
rarely change, much less frequently compared to software
releases. Note that for instrumentation based techniques,
each software release entails re-instrumentation.
• We develop a comprehensive set of log fusion rules
general for all applications. We devise a demand-driven
inference algorithm to handle a large volume of log events
in the Datalog engine.
• We develop a prototype on Linux and evaluate it on 8
machines for 7 days. The results show that ALchemist
achieves 92.8% precision and 99.6% recall with only
1.1% run time overhead and 6.8% storage overhead, im-
plying that ALchemist can achieve similar accuracy and
lower overhead, when compared to instrumentation based
approaches. In the study of 14 attacks collected from the
literature, ALchemist outperforms NoDoze [31], a state-
of-the-art technique that does not require instrumentation,
and OmegaLog [33], another state-of-the-art technique
that makes use of both application and audit logs.
Comparison with OmegaLog, NoDoze and Commercial
Log Analysis Tools. OmegaLog [33] leverages application
logs to recover execution paths, which can be used to par-
tition execution to avoid dependence explosion. Particularly,
a sequence of application log entries (e.g., those produced
by fprintf()) can be used to recover an approximate
program path, Repetition of such paths indicate an appli-
cation is handling (independent) tasks. OmegaLog identiﬁes
such paths, projects each path to a corresponding audit log
entry sequence, and then enables partitioning the audit log.
It does not derive high level semantics from application logs
except control ﬂow path. Its dependence analysis is exclusively
performed on the audit log. As such, although it works very
well on server applications in which control ﬂow paths of
independent
it can hardly handle
asynchronous/background behaviors that are very common in
complex applications such as ﬁrefox. In contrast, ALchemist
infers rich semantic information such as interleaving atomic
tasks do not
interleave,
sections from concurrent tasks and dependences invisible in
either application log or the audit log alone, through log fusion.
Please see our comparative results in Section V-D.
NoDoze [31] uses unsupervised learning to predict if a
dependence edge is normal. It only includes the abnormal
edges in the provenance graph. In our example, if x.x.x.x is
rarely visited, it will be included. With NoDoze, most normal
browsing behaviors (e.g., visiting CNN.com) are recognized
as normal and precluded. While it can substantially reduce
the graph size, depending on the quality of normal behav-
ior proﬁle, it may have both false positives (e.g., including
benign websites that people rarely visit as part of the attack
graph) and false negatives (e.g., missing malicious behaviors
involving benign sites/IPs/applications). Similar to OmegaLog,
it can hardly handle bogus dependencies caused by asyn-
chronous/background behaviors.
Commercial log analysis tools such as Splunk [13] and
Elasticsearch [8] use pre-built parsers to process unstructured
application built-in logs to structured databases that can be
queried. Multiple application logs can be correlated (e.g.,
through common ﬁle names). However, they do not construct
a canonical representation. Neither do they derive new and
implicit relations from existing ones. They are not designed
for forensics and hence they cannnot directly generate attack
provenance graphs or handle dependence explosion.
Threat Model. ALchemist aims to detect attacks which ex-
ploit application vulnerabilities or leverage social engineering
techniques to get
into victim systems for data exﬁltration
or manipulation. And we consider hardware or side channel
related attacks to be out of scope of this paper. Similar to many
existing works [19], [62], [61], [45], [44], [54], [31], [33], we
assume the Linux kernel and the components associated with
the audit logging system, which may be in the user space, are
part of our trusted computing base (TCB). We also assume the
application logs can be trusted. Note that existing works [53],
[45], [33] also trust the (instrumented) applications or their
built-in logs. As pointed out in [53], [45], [31], [61], although
the attackers can subvert applications or even the kernel such
that logs are compromised, the subversion procedure can be
precisely captured (by the logs before they are compromised).
Existing software and kernel hardening techniques (e.g., [30],
[19]) can be used to secure log storage. Cryptographic hash
values can be computed for log events (or event blocks) and
stored as part of the application logs [51], [50], [16] such
that tampering efforts can be detected. They are orthogonal to
ALchemist and beyond the scope of our paper.
II. MOTIVATION
One day, a user receives an email with a phishing link. She
clicks the link and a compromised software repository website
is opened in a new tab. During page loading, a malicious
JS script is executed to download a compromised fcopy from
x.x.x.x. Later, the user executes fcopy without realizing that it
has been compromised. Upon execution, the malware copies
sensitive data ﬁles to a shared folder /var/www/html. In order
to remove the attack trace, it also creates a php ﬁle cleaner.php
which deletes attack-related ﬁles after sending them to the
attacker (i.e., site z.z.z.z). The suspicious connection to z.z.z.z
is detected, leading to investigation. The example is different
2
Fig. 1: Causal graph by syscall only methods (e.g., [41])
Fig. 2: (a) ﬁrefox tab switch log (b) thunderbird email open
log (c) apache request log (d) thunderbird email open audit
log
from attacks discussed in existing works [53], [31], [33] as it
involves background JS execution as part of its attack chain,
which is difﬁcult for many existing works.
A. Syscall Only Approaches
Many existing approaches analyze only system logs gen-
erated by OS level logging tools (e.g., Linux Audit and Event
Tracing for Windows) [41], [28], [39]. They consider a whole
process as a subject and hence an output event is dependent on
all the preceding input events. In a long running process such
as ﬁrefox, such design leads to substantial bogus dependencies.
This is the dependence explosion problem [45]. Fig. 1 shows
the attack causal graph generated by these techniques. In this
graph and also the rest of the paper, we use diamonds to
represent sockets, oval nodes to represent ﬁles or application
data structures, and boxes to represent processes or execution
units. An execution unit is a part of process execution that
handles an individual task (e.g., a tab in ﬁrefox). Existing
works [31], [33], [45], [53], [46] have shown its importance in
attack investigation. Edges correspond to causality oriented in
the direction of data ﬂow. Starting from the symptom, namely,
the connection to z.z.z.z in Fig. 1, these approaches back-
trace the depending subjects and objects. Speciﬁcally, as the
connection is established by apache, a process node denoting
apache is included in the graph. And all the related objects
(e.g., info.html) are included too. Furthermore, process fcopy
which updates these objects is included. It is determined that
fcopy is downloaded via ﬁrefox. However, as ﬁrefox interacts
with multiple IPs simultaneously (through foreground/back-
ground activities), all these IPs are included in the graph. Such
dependence explosion causes substantial difﬁculty locating the
root cause IP x.x.x.x.
B. Our approach
The inaccuracy of syscall-only approaches is because they
are not aware of application semantics. The overarching idea
of our technique is to couple the high level semantics in
application log and the low level details in the audit log.
Built-in Application Log Providing Critical High Level Se-
mantics. We observe that built-in application logs provide rich
3
Fig. 3: Causal graphs by (a) NoDoze and (b) ALchemist
semantics regardless of the programming languages. In our ex-
ample, the three applications involved, ﬁrefox, thunderbird, and
apache all have built-in logs that provide critical information
for execution partitioning and dependence identiﬁcation, which
are the key to the success of attack provenance tracking. For
example, ﬁrefox by-default logs any tab creation and switch,
allowing precise identiﬁcation of execution unit boundaries.
Fig. 2(a) shows a ﬁrefox log entry that records opening a
new tab with a tab id 200000001. Note that such operation
is oblivious at the syscall level. Similarly, thunderbird logs
the opening of each individual email as shown in Fig. 2(b)
with the folderID and messageID uniquely identifying
an email. In contrast, since all emails are stored in the same
INBOX ﬁle, accesses to different emails are indistinguishable
at the syscall level. Fig. 2(c) shows an apache built-in log entry
that records a new request, which is a natural execution unit
for apache.
Besides task structure, application logs also contain critical
dependence information that is not available at the system
call level. For example in ﬁrefox, a tab’s execution is broken
down to smaller sub-tasks (e.g., requesting a page, rendering
an image, and executing a JS code blob) that are dispatched to
various concurrent worker threads, which may further break
down these subtasks. Subtask executions from different tabs
interleave and are hence extremely difﬁcult for existing tech-
niques to separate at the system call level. To help developers
debug and maintain the code base, ﬁrefox uniquely identiﬁes
each atomic sub-task internally and logs their creation. From
such information, ALchemist can extract precise depenen-
dences among sub-tasks through log fusion (see Section IV-B).
Syscall Log Providing Low Level Details. On the other
hand, audit logs are irreplaceable as they record low-level
and background information that is invisible or less interesting