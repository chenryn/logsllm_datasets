title:Adaptive on-line software aging prediction based on machine learning
author:Javier Alonso and
Jordi Torres and
Josep Lluis Berral and
Ricard Gavaldà
201O IEEEIIFIP 
International 
Conference 
on Dependable 
Systems & Networks 
(DSN) 
Adaptive on-line software aging prediction 
based on Machine Learning 
Javier Alonso and Jordi Torres 
J osep Ll. Berral and Ricard Gavalda 
Barcelona Supercomputing 
Dept. of Computer Architecture 
Technical 
of Catalonia 
University 
Center 
Dept. of Software 
Technical 
University 
{jlberral,gavalda} 
of Catalonia 
@lsi.upc.edu 
{alonso,torres}@ac.upc.edu 
and image. For this rea­
It is now well known that currently, 
availability. 
systems 
nesses and critical 
loss due to the downtime 
the average 
for a typical 
outages 
could affect 
have a negative 
is clear, 
huge 
given the industry 
per hour. A recent study1showed 
cost per hour 
degradation 
is around US$125,000. 
impact on the company image that 
downtime or service 
enterprise 
profits indirectly. 
Moreover, 
computer 
rather than hard­
system 
still appear and 
[3, 4], the faults 
tools are appearing 
impact over the application 
and debugging 
faults 
more sophisticated 
develop­
to help devel­
outages are more often due to software, 
ware, faults [1,2]. Although, 
ing/testing 
opers avoid software 
have an important 
In fact, fixing all faults during the testing 
phase is  a titanic 
task with an unaffordable 
these tools often cannot access third-party 
Even more, the transient 
ficult to fix because it is highly complicated 
to reproduce 
them. Design faults too often dormant and they activate 
only under unknown or rare circumstances 
ture transient 
cost, because 
modules code. 
and intermittent 
faults 
or intermittent 
and debugging 
becoming 
in na­
are too dif­
Several 
provoking 
contention, 
software 
[5, 6] have reported 
software outages is the software 
to the accumulation 
errors. 
that one of the causes 
aging 
This term refers 
resource 
executions, 
studies 
of the unplanned 
phenomena. 
usually 
application 
mally cause applications/systems 
ual performance  degradation 
ware aging phenomena. 
are often related 
unterminated 
and overruns. 
servers 
tems [10], with severe consequences 
like web applications, 
which nor­
hang or crash [7]. Grad­
could also accompany 
soft­
unreleased 
in web­
sys­
Software aging has been observed 
systems [9], and even military 
data corruption, 
[8], spacecraft 
The software 
to others, 
threads, 
aging phenomenon 
during long running 
of errors, 
file-locks 
such as loss of lives. 
have to deal with the 
For this reason, 
the applications 
software aging problem in production 
ware rejuvenation 
nation strategies 
techniques 
can be divided 
necessary. 
stage, making soft­
Software rejuve­
into two basic categories: 
such us memory bloating/leaks, 
1 IDC #31513, July 2004 
Abstract 
The growing complexity 
of software 
systems 
is resulting 
faults. 
According 
to 
one of the main 
and have an impor­
are becoming 
number of software 
or server  redundancy) 
faults 
system outages, 
failures, 
are those due to the software 
in an increasing 
the literature, 
software 
sources of unplanned 
tant impact on company benefits 
son, a lot of techniques 
niques, 
software 
failures 
this work, we present 
algorithm 
machine learning prediction 
dynamic and non-deterministic 
software 
tested our prediction 
achieving 
plication 
complex scenarios 
more, we have found an interesting 
termine 
the root cause failure: 
chine learning algorithms. 
a detailed 
model on a three-tier 
web 12EE ap­
acceptable 
with small training data sets. F urther­
prediction 
accuracy against 
approach to help to 
de­
The model generated 
by ma­
(such as clustering, 
fail-over 
have been proposed to avoid 
tech­
and yet they still happen. Many software 
aging phenomena. 
of our chosen 
evaluation 
In 
(M5P) in front of 
aging. We have 
1. Introduction 
to 
them. More­
As the complexity 
of software systems continues 
of managing 
the difficulty 
and growing reliance 
and ordinary 
on these software 
tasks in our lives 
not only to offer an accept­
but continuous 
availability 
also. To meet 
these software 
grow, so increases 
over, our current 
systems to manage critical 
requires 
able performance 
these social needs, more skilled 
tors are needed to maintain 
neous software systems, 
total cost of ownership 
systems 
resulting 
in a large fraction 
of the 
(TeO) of these systems. 
developers 
and administra­
these complex and heteroge­
Because system complexity 
number of failures 
plexity 
haviors, 
need to prevent 
has also been growing, 
poor levels of service, 
or gracefully 
is growing day by day, the 
or indirectly) 
to this com­
be­
resulting 
and even total outages. 
The 
deal with outages of busi-
due (directly 
in undesirable 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
507 
DSN 2010: Alonso et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:59:15 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems & Networks 
(DSN) 
ter accuracy, 
that M5P offers a good trade-off 
between accuracy, interpretability, 
and computational 
but we believe 
The rest of the paper is organized 
as follows: 
2 
and strategy. 
3 
cost. 
Section 
Section 
our prediction 
modelling 
setup. In Section 
the experimental 
4 we present 
the 
describes 
presents 
results 
the time to failure. 
finally, 
Section 
of our experimental 
Section 
study of the accuracy 
5 presents 
the related 
the paper. 
to predict 
work; and, 
6 concludes 
the crash and apply rejuvenation 
2 Our modelling assumptions 
and prediction 
strategy 
and ProactivelPredictive-based 
strategies, 
In 
and 
In fact, time-based 
strategies. 
regularly 
strate­
Time-based 
Time-based 
at predetermined 
gies are widely used in real environments, 
[ 11]. 
time intervals. 
rejuvenation 
such web servers 
is applied 
is a better technique, 
ag­
monitored 
This approach 
rejuvenation, 
and the rejuvenation 
In PredictivelProactive 
only in these cases, we reduce the number of reju­
system metrics 
are 
continuously 
action is trig­
gered when a crash or system hang up due to software 
ing seem to approach. 
because if we can predict 
actions 
venation 
Software 
tentially, 
ally, software 
rejuvenation 
application/system 
more sophisticated 
rebooting 
reduces 
a restart 
of the 
but, there are 
like micro-reboot 
application 
action. 
has been based on 
or even a whole machine, 
techniques, 
actions 
rejuvenation 
on the revenue 
the impact of the rejuvenation 
has an impact on the system and po­
[12], i.e. 
component; 
this 
only the suspicious 
to the time-based 
with respect 
of the company as well. Tradition­
approach. 
In a perfect 
and easy world, resource 
exhaustion 
due to 
software aging or to some other factor would be a linear 
phenomenon 
with respect 
could be then predicted 
to time. The time until failure 
easily by: 
(1) 
or even the type of the workload. 
aging could be re­
Predicting 
the time until resource 
due to soft­
exhaustion 
resource 
consump­
or the degradation 
trend 
aging could also be masked inside periodic 
a fraction of memory 
load peak). Another 
(i.e. leaving 
re­
only after a periodic 
ware aging is far from easy. Progressive 
tion over time could be non-linear, 
could change along the time. Software 
lated to the workload, 
Software 
source usage patterns 
used allocated 
situation 
that the phenomenon 
the perspective 
we will provide specific examples 
specially, 
could be relevant, 
tualized 
as we do in Section 
ficulty for software aging prediction 
two or more resources 
vice failure 
that complicates 
or granularity 
resources, 
used to monitor 
resource 
[13]. 
can look very different 
when we are working with vir­
3. Still another 
dif­
is that it can be due to 
in the ser­
involved 
simultaneously 
of this later on. This 
exhaustion 
is 
prediction 
if we change 
the resources; 
In this paper, we focus on our software 
aging prediction 
Where Rmax is the maximum available 
amount of re­
i used at  instant 
source i, Ri,t is the amount of resource 
t, and Si is the consumption 
this is a very simplistic 
are assuming 
Moreover, 
software aging a priori. 
rate is constant 
we assume we know the resource 
consumption 
approach. 
First, 
in this approach 
we 
along the time. 
involved 
on the 
speed per second. However, 
But software aging 
could have several 
unknown reasons. 
resources, 
all the significant 
metrics 
rate could change over 
of several 
from an interaction 
It could originate 
or we might not be monitoring 
from the system, or consumption 
time, and could also depend on the, possibly 
workload. 
resource 
we are working with virtualized 
hand, the system actions 
themselves 
lection) 
adding more life time to the system. 
Or even, the perspective 
is not the appropriate 
can mask or mitigate 
resources. 
the software 
used in monitoring 
the 
one; this is mainly true when 
changing, 
On the other 
(such as garbage col­
aging process, 
(ML) (Lin­
previous 
Decision 
Trees, and M5P) to check whether 
three algorithms 
of Machine Learning 
In our preliminary 
ag­
work [14], we 
ML algorithm) 
and its 
in front of a varied and complex software 
model based on M5P (a well-known 
evaluation 
ing scenarios. 
evaluated 
ear Regression, 
they offered the right capabilities 
to model software aging 
In this 
phenomena, 
and M5P offered the best performance. 
paper we have thus decided to use M5P to predict 
the re­
source exhaustion 
ments, reproducing 
ios. Furthermore, 
training 
on-line 
easy to interpret 
niques (i.e. Support Vector Machines, 
Bayesian 
because it has low 
want 
models that are 
by humans. More sophisticated 
ML tech­
time, and try it in a new set of experi­
more complex software aging scenar­
M5P was selected 
and prediction 
processing, 
costs and we will eventually 
Nets, Bagging or Boosting) 
can surely obtain bet-
and because 
it produces 
Neural Networks, 
2.1 Motivating Examples 
To understand 
the complexity 
and problems 
when build­
consumption 
ing a resource 
ples that we found when we tried to model the Java Memory 
exhaustion 
of a J2EE application 
model, we describe 
server. 
two exam­
2.1.1 Example 1: Nonlinear Resource Behavior 
a resource 
the time until resource 
and progressive 
at constant 
Given a deterministic 
consumes 
predict 
the rate (constant 
One simple method to automatically 
ear Regression. 
software aging that 
rate, our first approach 
would compute 
above. 
in this case) and apply the formula 
Linear regression 
obtain this slope is Lin­
exhaustion 
has been used in several 
to 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
508 
DSN 2010: Alonso et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:59:15 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks 
(DSN) 
works, like [15], to predict 
normal circumstances. 
capacity 
However, 
tion. Even if the resource 
system may exhibit 
planning. 
the resource 
It is  a powerful 
consumption 
under 
tool in the area of 
linearity 
consumption 
is  a strong assump­
is linear 
a priori, 
the 
For example, 
nonlinear 
we performed 
behaviors. 
an experiment 
in which we 
rates under a constant 
In Figure 1 we can observe 
(a Tomcat web server, 
as 
in a Java Application 
memory leaks at regular 
in next section). 
injected 
workload 
we described 
the memory actually 
gressive 
line). 
memory exhaustion. 
our memory leak injection 
of the underlying 
memory consumption 
We let the application 
has constant 
system introduces 
and constant 
with a pro­
workload 
run until the server fails due to 
that even if 
used during the experiment 
In a few words, we observe 
a nonlinear 
behavior. 
(dark 
not yet see that fact. We can observe 
monitor 
behavior, 
accurate 
ing fact in the next example. 
the Heap internal 
system description. 
that fact only if we 
hence obtaining 
a more 
We come back to this interest­
In the example, 
from the initial 
the normal Heap behavior 
to run for about 16 extra minutes, 
plication 
would predict 
more, this figure is strongly 
ness of the memory leak and the workload; 
leaks or lighter 
this extra time, 
diction 
error of a naive prediction 
consumption 
loads increase 
dependent 
strategy. 
allows the ap­
over what we 
rate. Further­
on the aggressive­
less aggressive 
hence the pre­
rate, the complexity 
2.1.2 Example 2: Different Viewpoints on a Resource 
.... 
 ... 
r .. · .............. ·· 
200 
oo§§
GC resizes 
action 
<Wld release 
memory  
I 
"
Figure 1. Progressive 
of the Java Application. 
memory consumption 
In more detail: 
In Java applications, 
the Java Heap Mem­
it, allocating 
system de­
(grey line) in three moments of the execution: 
When the Old 
that have been alive 
Heap management 
zone, that for objects 
of the maximum 
zone 
size for this zone, a fraction 
for the application. 
into three main zones: Young, Old and Per­
ory is divided 
it is stored in the 
manent. When a Java Object is created, 
Young zone. When the Young Zone is full, alive objects 
are 
moved to the Old 
for a long time. The default 
fines an initial 
memory available 
is full, the Heap Management 
more memory to it if available. 
resizing 