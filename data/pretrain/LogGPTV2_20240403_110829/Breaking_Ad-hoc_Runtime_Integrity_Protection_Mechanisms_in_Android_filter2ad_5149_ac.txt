that check device rooting, we installed each app on a rooted device
and executed it. To ﬁnd apps that perform an app binary integrity
check, we disassembled the app binary, added an empty class to the
code, reassembled a DEX ﬁle of the app, and executed the modi-
ﬁed app binary. If the activity had a button, such as “Press to start,”
we pressed the button to see whether the app proceeded to the next
activity. If the app’s execution was blocked, we concluded that the
app performs a self-defense mechanism and added it to the list of
apps to analyze.
Additionally, we excluded the following apps for further analy-
sis: (a) 8 apps without a main activity: these apps run like a dae-
mon process or need to run with another app; (b) 14 malfunctioning
apps: these apps crash after app repackaging upon launching; (c) 1
Groups
SDMGraphs
generated: 67
SDMGraphs
not generated: 6
R_Group_API
R_Group_Native_Predictable_Return
R_Group_Native_Unpredictable_Return
Limit_Case_2
Limit_Case_3
(a) Device rooting checks
# of
apps
14
57
6
1
5
Groups
SDMGraphs
generated: 39
SDMGraphs
not generated: 5
I_Group_Predictable_Return
I_Group_Signature
I_Group_APK_Path
I_Group_APK_Path_Context
Limit_Case_1
Limit_Case_2
(b) App integrity checks
# of
apps
16
2
14
10
3
2
Table 4: The number of apps in each group for the device rooting
checks (73 apps in total) and the app integrity checks (44 apps in
total). Note that some apps check device rooting and app integrity
more than once. We categorize the self-defense mechanisms for
which a SDMGraph is generated into X_Group_Y, where X is R
for device rooting check and I for app integrity check, and Y is a
characteristic of the group. We explain the Limit_Case groups in
Section 5.2.
app that could not be disassembled or reassembled with the apktool
and the smali tools; and (d) 1 app requiring an Android platform
whose version is higher than 4.4.
We found 76 apps that perform one or more self-defense mech-
anisms: 73 of the 76 apps check device rooting, and 44 of the 76
apps check app integrity. We ran all 76 apps using MERCIDroid to
analyze and bypass the self-defense mechanisms.
4.2 Traits of Self-defense Mechanisms
Using MERCIDroid, we successfully constructed the SDM-
Graphs for 67 out of 73 apps that check device rooting and 39 out
of 44 apps that check app integrity (See Section 5 for more details).
We then successfully bypassed every self-defense mechanism for
which an SDMGraph has been generated.
We found that the self-defense mechanisms can be grouped by
how they use the Android APIs and the system calls described in
Tables 1 and 2 and how difﬁcult they were to bypass. Based on the
ﬂowcharts described in Appendix C, we ran through each marked
method in an SDMGraph, bypassing the self-defense mechanisms
by rewriting the app’s Dalvik bytecode using the techniques de-
scribed in Figure 4 and then grouped the apps. Table 4 shows the
number of apps included in each group.
Next, we describe the traits of the self-defense mechanisms in
each group and how we bypassed them.
4.2.1 Device rooting checks
R_Group_API.
Apps in this group use Java methods to check device rooting.
They use the Android APIs in Table 1 to detect the existence of
binaries or apps related to device rooting. For example, some
apps check the presence of the “su” binary or command using the
1841
2
3
4
5
6
7
8
1
2
3
4
5
6
7
8
1
2
3
4
5
new-instance v0, Ljava/io/File;
const-string v1, "su"
const-string v1, "us"
invoke-direct {v0, v1}, Ljava/io/File;->
(Ljava/lang/String)V;
invoke-virtual {v0}, Ljava/io/File;->
exists()Z
move-result v2
(a) Modify an argument for an Android API
new-instance v0, Ljava/io/File;
sget-object v1, Lcom/execution/environment;->su;
invoke-direct {v0, v1}, Ljava/io/File;->
(Ljava/lang/String)V;
invoke-virtual {v0}, Ljava/io/File;->
exists()Z
move-result v2
const v2, 0x0
(b) Overwrite a return value
#.method public native integritycheck()Z;
.method public integritycheck()Z;
const v0, 0x0
return v0
.end method
(c) Change a native method declaration to a Java method, which
returns a ﬁxed value
1
2
3
4
5
1
2
3
4
5
6
7
1
2
3
4
.method public integritycheck()Z;
const v0, 0x0
return v0
# The rest are ignored...
.end method
(d) Fix a return value
invoke-virtual {p0},
Lcom/execution/MainActivity;->
getPackageCodePath()Ljava/lang/String;
move-result-object v0
invoke-static
p0, Lcom/execution/FakeActivityManager;
->getUntamperedPackageCodePath
(Landroid/content/Context;)
Ljava/lang/String;
move-result-object v0
invoke-static {v0}, Lcom/execution/environment;->
integritycheck(Ljava/lang/String;)Z;
(e) Generate a ﬁle path for the original app package
new-instance v0, Lcom/execution/FakeContext;
invoke-direct v0,
p0, Lcom/execution/FakeContext;->
(Landroid/content/Context;)V
invoke-static {v0}, Lcom/execution/environment;->
integritycheck(Landroid/content/Context)Z;
(f) Generate a FakeContext
Figure 4: Example smali [16] code to bypass self-defense mecha-
nisms. The lines added to bypass the self-defense mechanism are
presented in bold.
File.exists() or Runtime.exec() methods, respectively.
Apps also use PackageManager.getPackageInfo() to
check whether apps related to device rooting (e.g., SuperSU) have
been installed.
How to bypass. We modify an argument or the return value of an
Android API (Figure 4a or 4b). We change the name of a ﬁle the
apps try to ﬁnd (e.g., “su” to “us”) or ﬁx the return value to false,
based on the property of the API.
R_Group_Native_Predictable_Return.
This group contains apps that check device rooting in native li-
braries. The Java code in the apps includes the declaration of the
native methods mapped to functions in native libraries. The apps
use the native functions by calling the native methods. For exam-
ple, apps use open() or stat() to check for the existence of the
“su” binary. We list the native functions used by the self-defense
mechanisms at the native level in Tables 1 and 2.
How to bypass. We change the native method’s declaration to a
fake Java method that returns a ﬁxed value (Figure 4c). This is
made possible because it is easy to predict the return values of the
native methods when a device is not rooted.
R_Group_Native_Unpredictable_Return.
Device rooting checks for apps in this group are similar to
those in R_Group_Native_Predictable_Return, except that the na-
tive methods return unpredictable values. If a native method returns
a byte array or a string that contains randomly generated values,
predicting the value when a device is not rooted and overwriting
the return value is difﬁcult.
How to bypass. In this case, we modify the native code directly
using IDA Pro [11] to rewrite bytes in the text section to skip the
check.
4.2.2 App integrity checks
I_Group_Predictable_Return.
Similar to the R_Group_Native_Predictable_Return, checking
part methods in the apps in this group returns predictable values,
such as false or 0, when the apps are not forged.
How to bypass. When the marked method is a native method, we
change the method’s declaration to a Java method that returns a
ﬁxed value (Figure 4c). In the case of an Android API, we ﬁnd the
caller and make the method return a ﬁxed value (Figure 4d).
I_Group_Signature.
Apps can get
This group includes apps that
try to verify their signa-
ture.
their signature using PackageMan-
ager.getPackageInfo() with a GET SIGNATURES ﬂag
(see Table 2). The signature of the rewritten app is different from
that of the unmodiﬁed one. Therefore, examining the signature can
be a way to check app integrity.
How to bypass. To bypass the app integrity checks using signa-
tures, we obtain the pure app’s signature and overwrite the return
value of Signature.hashCode() to the obtained signature.
I_Group_APK_Path.
This group contains apps that check app integrity by reading the
app’s package ﬁle or library. The apps get the ﬁle path of the APK
ﬁle or library ﬁle using Android APIs, as shown in Table 2. The
apps then read the ﬁle using File, RamdomAccessFile, or ZipFile
185Name
# of apps that adopt the libraries
All Device rooting App integrity Malware Anti-reverse
engineering
detection
check
check
Additional features
Other
features
Server communication
to check/report
the result
8
7
6
30
11
7
7
5
4
3
2
2
30
11
10
7
6
4
3
2
2
3
1
1
Lib0
Lib1
Lib2
Lib3
Lib4
Lib5
Lib6
Lib7
Lib8 §
Lib9
Lib10
Lib11
§ Written in Java. Other libraries are native libraries.
2
3
1
1
1
O
O
O
O
O
O
O
O
O
O
Secure session ID
Cryptography algorithms
One-time veriﬁcation token
O
O
O
O
O
O
O
O
Table 5: List of libraries that contain self-defense mechanisms.
classes to compute the hash value (see Table 2). The apps send it
to an external server to check their tampering.
How to bypass. To allow the tampered app to read the unmodi-
ﬁed app’s package and native library ﬁle instead, we ﬁrst copy the
unmodiﬁed ﬁles into the tampered APK ﬁle. Then, we implement
the getUnmodifiedPackageCodePath(), which copies the
unmodiﬁed ﬁles to its private storage and returns the ﬁle path. We
use this method to bypass the checks (Figure 4e).
I_Group_APK_Path_Context.
Apps in this group perform checks through a native code
takes a Context, which contains the APK ﬁle path, as
that
an argument. The APK ﬁle path in the Context can be ob-
tained with Context.getPackageCodePath(), Con-
text.getApplicationInfo().sourceDir,
or Con-