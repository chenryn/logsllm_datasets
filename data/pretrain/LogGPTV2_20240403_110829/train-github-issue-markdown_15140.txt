 **Describe the bug**  
We had a legacy enum with names that have spaces so we added some aliases to
make coding easier.  
Notice the aliases have repeated values so they will not create enum elements.
E.g:
    Names = enum.Enum(
        value='Names',
        names=[
            ('Name A', 1), ('a', 1),
            ('Name B', 2), ('b', 2),
            ('Name C', 3), ('c', 3),
        ]
    )
So when you `list(Names)`, you only see the 3 original enum names and :
`Names["Name A"] is Names.a` meaning that `a` is just an alias and points to
the same object.
When you pass this to `name = Column(Enum(Names))`, it will create the 6 names
on the column because  
`sqlalchemy.Enum._parse_into_values` is using the `__members__` atribute from
enum which shows everything, including aliases.
SQL output for that column:  
``name` ENUM('Name A','Name B','Name C','a','b','c') NOT NULL,`
**Expected behavior**  
``name` ENUM('Name A','Name B','Name C') NOT NULL,`
I propose to use `[e.name for e in enum_class]`  
instead of `enum_class.__members__`  
sqlalchemy/lib/sqlalchemy/sql/sqltypes.py
Line 1509 in 93ea31d
|  members = self.enum_class.__members__  
---|---  
**Versions.**
  * OS: MacOS
  * Python: 3.8
  * SQLAlchemy: 1.3.23
  * Database: MySQL
  * DBAPI: pymysql