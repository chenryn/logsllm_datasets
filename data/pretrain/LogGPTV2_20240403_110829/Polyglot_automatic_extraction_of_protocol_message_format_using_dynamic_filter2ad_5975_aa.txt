title:Polyglot: automatic extraction of protocol message format using dynamic
binary analysis
author:Juan Caballero and
Heng Yin and
Zhenkai Liang and
Dawn Xiaodong Song
Polyglot: Automatic Extraction of Protocol Message
Format using Dynamic Binary Analysis
∗Carnegie Mellon University
‡UC Berkeley
Juan Caballero∗, Heng Yin†∗, Zhenkai Liang∗, Dawn Song‡ ∗
{jcaballero, zliang, dawnsong}@cmu.edu PI:EMAIL
†College of William and Mary
ABSTRACT
Protocol reverse engineering, the process of extracting the
application-level protocol used by an implementation, with-
out access to the protocol speciﬁcation,
is important for
many network security applications. Recent work [17] has
proposed protocol reverse engineering by using clustering on
network traces. That kind of approach is limited by the lack
of semantic information on network traces.
In this paper
we propose a new approach using program binaries. Our
approach, shadowing, uses dynamic analysis and is based
on a unique intuition—the way that an implementation of
the protocol processes the received application data reveals
a wealth of information about the protocol message format.
We have implemented our approach in a system called Poly-
glot and evaluated it extensively using real-world implemen-
tations of ﬁve diﬀerent protocols: DNS, HTTP, IRC, Samba
and ICQ. We compare our results with the manually crafted
message format, included in Wireshark, one of the state-of-
the-art protocol analyzers. The diﬀerences we ﬁnd are small
and usually due to diﬀerent implementations handling ﬁelds
in diﬀerent ways. Finding such diﬀerences between imple-
mentations is an added beneﬁt, as they are important for
problems such as ﬁngerprint generation, fuzzing, and error
detection.
Categories and Subject Descriptors
C.2 [Computer Systems Organization]: COMPUTER-
COMMUNICATION NETWORKS
∗This material is based upon work partially supported by
the National Science Foundation under Grants No. 0311808,
No. 0433540, No. 0448452, No. 0627511, and CCF-0424422.
Partial support was also provided by the International Tech-
nology Alliance, and by the U.S. Army Research Oﬃce
under the Cyber-TA Research Grant No. W911NF-06-1-
0316, and under grant DAAD19-02-1-0389 through CyLab
at Carnegie Mellon. The views and conclusions contained
here are those of the authors and should not be interpreted
as necessarily representing the oﬃcial policies or endorse-
ments, either expressed or implied, of ARO, NSF, or the
U.S. Government or any of its agencies.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010 ...$5.00.
General Terms
Security
Keywords
protocol reverse engineering, binary analysis
1.
INTRODUCTION
Protocol reverse engineering, the process of extracting
the application-level protocol used by an implementation
without access to the protocol speciﬁcation, has become in-
creasingly important for network security. Knowledge of
application-level protocol message format is essential for many
network security applications, such as vulnerability discov-
ery [11, 20, 26, 31], intrusion detection systems [19], pro-
tocol analyzers for network monitoring and signature-based
ﬁltering [10, 33], ﬁngerprint generation [12], application dia-
logue replay [18, 23, 30], detecting services running on non-
standard ports [25], and mapping traﬃc to applications [21].
Many protocols in use, especially on the enterprise net-
work [25, 32], are closed protocols (i.e., no publicly available
protocol speciﬁcation). Even for protocols with a publicly
available speciﬁcation, certain implementations may not ex-
actly follow the speciﬁcation. Protocol reverse engineering
aims to extract the application-level protocol used by an im-
plementation, without access to the protocol speciﬁcation.
Thus, protocol reverse engineering is an invaluable tool for
the above network security applications.
Currently, protocol reverse engineering is mostly a painstak-
ing manual task. Attempts to reverse engineer closed proto-
cols such as the MSN Messenger and Samba protocols from
Microsoft [4, 1], the Yahoo Messenger protocol [3], or the
OSCAR and ICQ protocols from AOL [7, 2], have all been
long term eﬀorts lasting many years.
In addition, proto-
col reverse engineering is not a once-and-done eﬀort, since
existing protocols are often extended to support new func-
tionality. Thus, to successfully reverse engineer a protocol
in a timely manner and keep up the eﬀort through time, we
need automatic methods for protocol reverse engineering.
Despite the importance of the problem of automatic pro-
tocol reverse engineering, there has been very little research
done on the topic. Recently, Cui et. al. [17] proposed using
clustering to extract the protocol message format from net-
work traces. The fundamental limitation of their approach
is the lack of protocol semantics in network traces, which in
turn generates other problems, as we explain at the end of
the section.
In this paper we propose shadowing, a new
Approach:
approach for automatic protocol reverse engineering.
In-
stead of extracting protocol information purely from net-
317work traces, we leverage the availability of a program binary
implementing the protocol. Compared to network traces,
which only contain syntactic information, program binaries
also contain semantic information about how the program
processes and operates on the protocol data. In addition,
they are the main source of information about the imple-
mentation of a protocol. Thus, by extracting protocol in-
formation from the program binary implementing the pro-
tocol, rather than purely from network traces, our approach
can be more accurate and provide richer information about
the protocol and its implementation. We call our approach
shadowing because we closely monitor the program as it pro-
cesses an input.
Given the program binary, we could extract protocol in-
formation from it by using either static or dynamic anal-
ysis. Purely static analysis of binaries is diﬃcult due to
challenges such as memory aliasing analysis or unresolved
indirect jumps. In this paper, we focus on using dynamic
analysis for automatic protocol reverse engineering. In the
near future, we plan to extend our work to combine dynamic
analysis with static analysis.
Shadowing uses dynamic analysis and is based on a unique
intuition—the way that an implementation of the protocol
processes the received application data reveals a wealth of
information about the protocol. In particular, by monitoring
all the operations done by a program while processing its
input, we can extract the format of the received data.
Protocol reverse engineering
Scope of the problem:
is a complex task that involves extracting: 1) the protocol
message format, which describes the message format for the
messages that comprise the protocol, and 2) the protocol’s
state machine, which speciﬁes the protocol states and the
transitions between states according to the messages sent or
received. In this paper, we focus on extracting the protocol
message format, because 1) it is a necessary step to extract
the protocol’s state machine, and 2) as we will show, it is
challenging enough in its own right.
Our approach to extract the protocol message format is
to process one message at a time and output the message
format for each given message. Our problem is then to auto-
matically extract the message format, when given as input a
program binary implementing the protocol, and a message
received by that program. The main challenge to extract
the message format is to ﬁnd the ﬁeld boundaries in the
message. Protocols include both ﬁxed-length and variable-
length ﬁelds. The diﬃculty with ﬁxed-length ﬁelds is to
determine the boundary between consecutive ﬁelds to avoid
joining two ﬁxed-length ﬁelds together or splitting a single
ﬁxed-length ﬁeld into many. The diﬃculty with variable-
length ﬁelds is that protocols can use diﬀerent elements to
mark the ﬁeld boundary such as 1) direction ﬁelds, that store
information about the location of another target ﬁeld in the
message, for example length ﬁelds and pointer ﬁelds, and 2)
separators, i.e., constant values that mark the boundary of
the ﬁeld. Thus, we ﬁrst need to locate those elements to
identify the ﬁeld boundaries. Another challenge in extract-
ing the protocol message format is to identify the protocol
keywords. Keywords are protocol constants that appear in
the messages sent over the network. In this paper we present
techniques to address all these challenges.
To realize our shadowing approach, we have designed and
implemented a system, called Polyglot. Our system works
on stripped binaries and does not require the availability of
source code or any debugging information in the binaries.
We have extensively evaluated our approach using eleven
implementations from ﬁve diﬀerent protocols: DNS, HTTP,
IRC, Samba and ICQ. We have included both clients and
servers working under Windows and Linux. The protocols
analyzed, include diﬃcult to ﬁnd elements such as length
ﬁelds, pointer ﬁelds, separators and keywords. We com-
pare our results with the manually crafted message format,
included in Wireshark, one of the state-of-the-art protocol
analyzers. The diﬀerences we ﬁnd are small and usually
due to diﬀerent implementations handling ﬁelds in diﬀerent
ways. Finding these diﬀerences between implementations is
an added beneﬁt, as they are important for problems such
as fuzzing [31], error detection [11] and ﬁngerprint genera-
tion [12].
Contributions:
lowing contributions:
In summary, this paper makes the fol-
• New approach for extracting the protocol mes-
sage format using program binaries: We pro-
pose to use a new paradigm called shadowing to auto-
matically extract the message format from some input
application data. Our approach is based on the intu-
ition that analyzing how a program processes its in-
put allows us to understand the format of the received
data. This is in contrast to previous techniques that
try to infer protocol information purely from network
traces [17].
• New techniques for detecting direction ﬁelds:
Direction ﬁelds are ﬁelds used to mark the boundary
of variable-length ﬁelds, such as length ﬁelds or pointer
ﬁelds. Currently, the only available techniques to de-
tect some types of direction ﬁelds are the ones used
in [17, 18]. Those techniques are limited because they
need to assume the encoding of the length ﬁeld. We
propose the ﬁrst techniques to detect direction ﬁelds,
without making assumptions about the encoding used
by the direction ﬁeld.
• New techniques for detecting separators: Sep-
arators are constant values that can be used, instead
of direction ﬁelds, to mark the boundary of variable-
length ﬁelds. We propose what we believe are the ﬁrst
techniques to discover separators using no prior as-
sumption about the separator values. Thus, our tech-
niques can handle unknown protocols that use separa-
tors, independently of the separator value. In contrast,
previous work assumes separators can only be used in
text protocols and assume that separators only take a
few predeﬁned values such as white space or tab [17].
• Finding multi-byte ﬁxed-length ﬁelds: We present
a method to ﬁnd the boundary of multi-byte ﬁxed-
length ﬁelds, by examining how the program groups to-
gether the input bytes. The intuition is that ﬁelds are
semantic units and thus programs need to use multi-
byte ﬁelds as a single unit. Even though our tech-
nique has limitations, it is still a signiﬁcant improve-
ment over previous work, which cannot ﬁnd bound-
aries between consecutive binary ﬁelds, and thus have
to assume that each byte that shows binary encoding
is a separate ﬁeld [17].
• New techniques for extracting protocol keywords:
Current techniques for extracting keywords ﬁnd proto-
col keywords by looking for tokens that occur repeat-
edly at the same position in multiple messages [17,
21, 25]. In contrast, our techniques extract the key-
words present on a single message. Thus, previous
work might miss keywords which appear in diﬀerent
positions across multiple messages (e.g., in HTTP).
Our solution would still identify the keywords in each
message and the diﬀerent locations where they occur.
The remainder of the paper is organized as follows. Sec-
tion 2 deﬁnes our problem.
In Section 3 we describe the
approach and system architecture. Then, in Sections 4–6
we present our techniques to ﬁnd the ﬁeld boundaries and
the protocol keywords. We evaluate our system in Section 7
and summarize related work in Section 8. Finally, we present
future work in Section 9 and conclude in Section 10.
2. PROBLEM DEFINITION
In this section we introduce the terminology used in this
paper, then the scope of the problem, and ﬁnally, the prob-
lem deﬁnition.
2.1 Terminology and Scope of the Problem
Protocol terminology can sometimes be intricate and may
not be standard. Thus, for clarity, we ﬁrst introduce the
terminology we will use in this paper.
Protocol elements: Protocols have a hierarchical struc-
ture comprised of sessions, which are comprised of a se-
quence of messages which are in turn comprised of a se-
quence of ﬁelds, where a ﬁeld is the smallest contiguous se-
quence of application data with some meaning. For exam-
ple, an HTTP session may contain multiple messages such
as several GET requests to fetch diﬀerent contents (e.g., one
for the HTML ﬁle, another for an image, etc), and an HTTP
GET message may contain several ﬁelds such as the method,
the URL, and the version, as illustrated in Figure 2.
Scope of the problem: Reversing a protocol is a complex
task that involves extracting: 1) the protocol message for-
mat, which describes the format of the messages that com-
prise the protocol, and 2) the protocol’s state machine, that
depicts the diﬀerent protocol states and the transitions be-
tween states according to the messages sent or received. As
explained in Section 1, in this paper we focus on extract-
ing the protocol message format and leave the study of the
protocol’s state machine for future work.
The protocol message format is the set of the protocol’s
message formats, where a message format is a sequence of
ﬁeld formats and a ﬁeld format is a group of attribute-value
pairs.
Our approach to extract the protocol message format is
to process one message at a time and output the message
format for the given message. We assume synchronous pro-
tocols to identify the message boundaries.
In this paper,
we consider ﬁve pivotal attributes in the ﬁeld format: the
ﬁeld start position in the message, the ﬁeld length, the ﬁeld
boundary, the ﬁeld type and the ﬁeld keywords. Table 1
shows these ﬁve attributes. The ﬁeld start attribute cap-
tures the position of the ﬁeld in the given message. The ﬁeld
length attribute states if the ﬁeld has a ﬁxed length (and the
corresponding value) or if it has variable length. Then, the
ﬁeld boundary attribute determines how the program ﬁnds
the boundary of the ﬁeld (i.e., where the ﬁeld ends). For
ﬁxed-length ﬁelds, the value is always Fixed since the pro-
gram knows a priori the length. For variable-length ﬁelds,
it can be separator, i.e., a constant value that marks the
boundary of the ﬁeld, or direction, i.e., a ﬁeld that stores
information about the location of another target ﬁeld in the
message.
The ﬁeld type attribute provides semantic information
about the ﬁeld. Currently, we only consider whether a ﬁeld
is, or is not, a direction ﬁeld. Finally, the ﬁeld keywords at-
tribute contains a list of protocol keywords contained in the
ﬁeld, speciﬁcally their value and position. We deﬁne key-
words to be protocol constants that appear in the protocol
Value
Start position in message
Fixed-size, Variable-size
Attribute
Field Start
Field Length