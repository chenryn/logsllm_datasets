FUZZIFICATION can introduce a sufficient number of
unproductive paths and make coverage feedback less ef-
fective. Also, BranchTrap guarantees the same control-
flow on the same input (i.e., deterministic path) so that
the fuzzer will not ignore these fake paths.
• Low overhead: BranchTrap introduces low overhead
to normal user operations (e.g., less than 1% overhead)
due to its lightweight operations (Store argument; XOR;
Resolve jump address; Jump to gadget).
• Robust: The ROP-based design significantly increases
the complexity for an adversary to identify or patch
the binary. We evaluate the robustness of BranchTrap
against adversarial analysis in §6.4.
USENIX Association
28th USENIX Security Symposium    1919
epilogue  pop rbp  pop r15  retfunc1 (arg1, arg2)gadget2   pop rbp   pop r15   ret select jmp address❷❸❶calculate index❹return....call func1next inst....caller gadget1   pop rbp   pop r15   retgadgetN ...          = arg1^arg2index jmp  table[index]...(a) readelf with different bitmap
(b) Impact of different number of branches
s
h
t
a
p
l
a
e
r
1400
1200
1000
800
600
400
200
0
0%
40%
80%
0 1 2 3 4 5 6 7 8 9 10
time (hour)
)
%
(
n
o
i
t
a
r
u
t
a
s
90
80
70
60
50
40
30
20
10
10 20 30 40 50 60 70 80 90
number of branches (k)
Figure 7: (a) AFL performance with different initial bitmap satura-
tion. (b) Impact on bitmap with different number of branches.
contains plenty of functions. For binaries with fewer func-
tions, we provide an option for developers to split existing
basic blocks into multiple ones, each connected with condi-
tional branches. Second, the size of the injected branches
for saturating the coverage is also controllable. Figure 7(b)
shows how the bitmap can be saturated in AFL by increasing
the branch number. It clearly shows that more branches can
fill up more bitmap entries. For example, 100K branches can
fill up more than 90% of a bitmap entry. Injecting a massive
number of branches into the program increases the output
binary size. When we inject 100k branches, the size of the
protected binary is 4.6MB larger than the original binary. To
avoid high code size overhead, we inject a huge number of
branches into only one or two of the most rarely executed
basic blocks. As long as one fuzzed execution reaches such
branches, the coverage storage will be filled and the following
fuzzing will find fewer interesting inputs.
5 AntiHybrid: Thwarting Hybrid Fuzzers
A hybrid fuzzing method utilizes either symbolic execution
or dynamic taint analysis to improve fuzzing efficiency. Sym-
bolic (or concolic) execution is good at solving complicated
branch conditions (e.g., magic number and checksum), and
therefore can help fuzzers bypass these hard-to-mutate road-
blocks. DTA (Dynamic Taint Analysis) helps find input bytes
that are related to branch conditions. Recently, several hybrid
fuzzing methods have been proposed and successfully discov-
ered security-critical bugs. For example, Driller [57] adapted
selective symbolic execution and proved its efficacy during
the DARPA Cyber Grand Challenge (CGC). VUzzer [52]
utilized dynamic taint analysis to identify path-critical in-
put bytes for effective input mutation. QSym [67] suggested
a fast concolic execution technique that can be scalable on
real-world applications.
Nevertheless, hybrid approaches have well-known weak-
nesses. First, both symbolic execution and taint analysis
consume a large amount of resources such as CPU and mem-
ory, limiting them to analyzing simple programs. Second,
symbolic execution is limited by the path explosion problem.
If complex operation is required for processing symbols, the
symbolic execution engine has to exhaustively explore and
evaluate all execution states; then, most of the symbolic ex-
original code: if (!strcmp(input, "condition!")) { ... }
temp = input[i];
temp2 = temp & (1<<j);
if (temp2 != 0) ch |= 1<<j;
1 char input[] = ...; /* user input */
2 int value
= ...; /* user input */
3
4 // 1. using implicit data-flow to copy input to antistr
5 //
6 char antistr[strlen(input)];
7 for (int i = 0; i<strlen(input); i++){
8
9
10
11
12
13
14
15 }
16 if (!strcmp(antistr, "condition!")) { ... }
17
18 // 2. exploding path constraints
19 //
20 if (CRC_LOOP(value) == OUTPUT_CRC) { ... }
Figure 8: Example of AntiHybrid techniques. We use implicit data-
flow (line 6-15) to copy strings to hinder dynamic taint analysis. We
inject hash function around equal comparison (line 20) to cripple
symbolic execution engine.
int ch = 0, temp = 0, temp2 = 0;
for (int j = 0; j<8; j++){
}
antistr[i] = ch;
original code: if (value == 12345)
ecution engines fail to run to the end of the execution path.
Third, DTA analysis has difficulty in tracking implicit data
dependencies, such as covert channels, control channels, or
timing-based channels. For example, to cover data depen-
dency through a control channel, the DTA engine has to
aggressively propagate the taint attribute to any variable after
a conditional branch, making the analysis more expensive and
the result less accurate.
Introducing implicit data-flow dependencies. We trans-
form the explicit data-flows in the original program into im-
plicit data-flows to hinder taint analysis. FUZZIFICATION first
identifies branch conditions and interesting information sinks
(e.g., strcmp) and then injects data-flow transformation code
according to the variable type. Figure 8 shows an example ap-
plication of AntiHybrid, where array input is used to decide
branch condition and strcmp is an interesting sink function.
Therefore, FUZZIFICATION uses implicit data-flows to copy
the array (line 6-15) and replaces the original variable to the
new one (line 16). Due to the transformed implicit data-flow,
the DTA technique cannot identify the correct input bytes that
affect the branch condition at line 16.
Implicit data-flow hinders data-flow analysis that tracks di-
rect data propagation. However, it cannot prevent data depen-
dency inference through differential analysis. For example,
recent work, RedQueen [2], infers the potential relationship
between input and branch conditions through pattern match-
ing, and thus can bypass the implicit data-flow transformation.
However, RedQueen requires the branch condition value to
be explicitly shown in the input, which can be easily fooled
through simple data modification (e.g., adding the same con-
stant value to both operands of the comparison).
Exploding path constraints.
To hinder hybrid fuzzers
using symbolic execution, FUZZIFICATION injects multiple
code chunks to intentionally trigger path explosions. Specifi-
1920    28th USENIX Security Symposium
USENIX Association
Project Version Program Arg. Seeds
Speed
Overhead (Binary size)
BranchTrap AntiHybrid
All
libjpeg
libpng
libtiff
pcre2
2017.7
1.6.27
4.0.6
10
binutils 2.23
Average
djpeg
readpng
tiffinfo
pcre2test
readelf
objdump
nm
objcopy
GIT
GIT
GIT
built-in
9.0% (0.1M) 101.5% (1.2M) 0.3% (0.0M) 103.2% (1.3M)
65.7% (1.5M)
6.2% (0.1M)
56.0% (1.3M) 0.9% (0.0M)
72.5% (1.5M) 0.8% (0.0M)
9.2% (0.2M)
77.3% (1.6M)
12.9% (0.2M)
85.3% (1.3M) 0.8% (0.0M) 108.6% (1.7M)
-a
-d
-S
ELF
files
9.6% (0.2M)
1.4% (0.1M)
1.9% (0.1M)
1.7% (0.1M)
77.3% (1.3M) 0.2% (0.0M)
17.0% (1.3M) 0.1% (0.0M)
23.1% (1.2M) 0.1% (0.0M)
20.2% (1.3M) 0.1% (0.0M)
81.0% (1.4M)
17.5% (1.3M)
23.3% (1.2M)
20.6% (1.3M)
6.5%
56.6%
0.4%
62.1%
Overhead (CPU)
Speed BranchTrap AntiHybrid All
2.4%
1.5%
4.0%
1.8%
4.8%
1.0%
1.2%
3.1%
0.9%
2.0%
2.1%
1.2%
0.3%
0.3%
0.5%
1.0%
1.0%
1.6%
1.8%
1.7%
1.4%
0.9%
2.0%
1.6%
0.8%
1.4%
0.9%
0.9%
1.1%
0.5%
0.7%
3.1%
4.6%
4.5%
2.9%
3.7%
Table 2: Code size overhead and performance overhead of fuzzified binaries. GIT means Google Image Test-suite. We set performance
overhead budget as 5%. For size overhead, we show the percentage and the increased size.
cally, we replace each comparison instruction by comparing
the hash values of the original comparison operands. We
adopt the hash function because symbolic execution can-
not easily determine the original operand with the given
hash value. As hash functions usually introduce non-
negligible overhead to program execution, we utilize the
lightweight cyclic redundancy checking (CRC) loop iter-
ation to transform the branch condition to reduce perfor-
mance overhead. Although theoretically CRC is not as
strong as hash functions for hindering symbolic execution,
it also introduces significant slow down. Figure 8 shows
an example of the path explosion instrumentation. To be
specific, FUZZIFICATION changes the original condition
(value == 12345) to (CRC_LOOP(value) == OUTPUT_CRC)
(at line 20). If symbolic execution decides to solve the con-
straint of the CRC, it will mostly return a timeout error due to
the complicated mathematics. For example, QSym, a state-of-
the-art fast symbolic execution engine, is armed with many
heuristics to scale on real-world applications. When QSym
first tries to solve the complicated constraint that we injected,
it will fail due to the timeout or path explosion. Once injected
codes are run by the fuzzer multiple times, QSym identifies
the repetitive basic blocks (i.e., injected hash function) and
performs basic block pruning, which decides not to generate
a further constraint from it to assign resources into a new
constraint. After that, QSym will not explore the condition
with the injected hash function; thus, the code in the branch
can be explored rarely.
6 Evaluation
We evaluate our FUZZIFICATION techniques to understand
their effectiveness on hindering fuzzers from exploring pro-
gram code paths (§6.1) and detecting bugs (§6.2), their practi-
cality of protecting real-world large programs (§6.3), and their
robustness against adversarial analysis techniques (§6.4).
Implementation. Our FUZZIFICATION framework is imple-
mented in a total of 6,559 lines of Python code and 758 lines
of C++ code. We implement the SpeedBump technique as an
Target
Tasks
Coverage 8 binaries O,S,B,H,A O,S,B,H,A O,S,B,H,A –
–
HonggFuzz QSym
MuPDF
O,A
AFL
O,A
VUzzer
O,A
Crash
4 binaries O,A
LAVA-M O,A
O,A
O,A
O,A
O,A
–
O,A
Table 3: Experiments summary. Protection options: Original,
SpeedBump, BranchTrap, AntiHybrid, All. We use 4 binutils bina-
ries, 4 binaries from Google OSS project and MuPDF to measure the
code coverage. We use binutils binaries and LAVA-M programs to
measure the number of unique crashes.
LLVM pass and use it to inject delays into cold blocks during
the compilation. For the BranchTrap, we analyze the assem-
bly code and modify it directly. For the AntiHybrid technique,
we use an LLVM pass to introduce the path explosion and uti-
lize a python script to automatically inject implicit data-flows.
Currently, our system supports all three FUZZIFICATION tech-
niques on 64bit applications, and is able to protect 32bit ap-
plications except for the ROP-based BranchTrap.
Experimental setup. We evaluate FUZZIFICATION against
four state-of-the-art fuzzers that work on binaries, specifi-
cally, AFL in QEMU mode, HonggFuzz in Intel-PT mode,
VUzzer 321, and QSym with AFL-QEMU. We set up the
evaluation on two machines, one with Intel Xeon CPU E7-
8890 PI:EMAIL, 192 processors and 504 GB of RAM,
and another with Intel Xeon CPU PI:EMAIL, 32
processors and 128 GB of RAM.
To get reproducible results, we tried to eliminate the non-
deterministic factors from fuzzers: we disable the address
space layout randomization of the experiment machine and
force the deterministic mode for AFL. However, we have to
leave the randomness in HonggFuzz and VUzzer, as they do
not support deterministic fuzzing. Second, we used the same
set of test cases for basic block profiling in FUZZIFICATION,
and fed the same seed inputs for different fuzzers. Third,
1We also tried to use VUzzer64 to fuzz different programs, but it did not
find any crashes even for any original binary after three-day fuzzing. Since
VUzzer64 is still experimental, we will try the stable version in the future.
USENIX Association
28th USENIX Security Symposium    1921
12k
9k
6k
3k
0k
20k
16k
12k
8k
4k
0k
s
h
t
a
p
l
a
e
r
#
(a) libjpeg
8 16 24 32 40 48 56 64 72
(e) readelf
8 16 24 32 40 48 56 64 72
Time (hours)
Original