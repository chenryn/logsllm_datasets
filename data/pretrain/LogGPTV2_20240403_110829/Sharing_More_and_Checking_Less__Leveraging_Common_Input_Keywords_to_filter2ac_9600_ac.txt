void *data= user_input ;
void * usbname ;
action = Extract (data ," action " ,& unk_F213C );
passwd = Extract (data ," password ","admin");
premit = Extract (data ," premitEn ","0");
intport = Extract (data ," internetPort ","21");
usbname = Extract (data ," usbName " ,& unk_F213C );
if (! strcmp (action ,"del")) {
doSystemCmd ("cfm post netctrl %d?op=%d, string_info =%s"
,51,3, usbname );
}
11
12 }
Listing 3: Pseudocode of implicit keyword sample. Both action
and usbName are missing in the front-end ﬁles. SaTC will identify
them as implicit keywords and thus can detect the bug inline 10.
Based on the shared keyword we can connect different bina-
ries or functions that set or use the same user input. Compared
with the original input reference point (line 2), the second re-
trieval of the user input at line 14 is much closer to the real
sink function (skipped in the list). Starting taint-track from
this point will signiﬁcantly save the analysis effort.
SaTC uses the cross-process entry ﬁnder (or CPEF) to
track the user input across ﬁrmware binaries or components.
Speciﬁcally, it searches various inter-process communication
paradigms that use shared strings to label the data, and estab-
lishes the data-ﬂow from a set point to a use point. CPEF pro-
vides the necessary logic to detect communication paradigms
(e.g., NVRAM communication) for sharing data between bina-
ries or functions. It mainly supports two types of inter-process
communication paradigms:
• NVRAM. NVRAM is a type of RAM that retains data
after the host device is power off. It usually keeps the
devices’ user conﬁgurations. The CPEF identiﬁes all
nvram_safe_set and nvram_safe_get functions in order
to build cross-process data-ﬂows. In the example of List-
ing 2, the data dependency between prog.cgi and rc is
built through NVRAM operations.
• Environment variables. Processes can share data via envi-
ronment variables, where the keyword is the variable name.
CPEF walks the program path, and collects all function
calls that set or get environment variables (e.g., setenv or
getenv). It establishes a data-ﬂow between an environment
setter and a getter if they share the same variable name.
5 Input Sensitive Taint Analysis
SaTC leverages path exploration and taint analysis technology
to track input data to detect dangerous use in the back-end.
As Table 2 shows, we design three optimizations based on the
unique features of the ﬁrmware to balance the efﬁciency and
accuracy, and to speed up the path exploration.
5.1 Coarse-Grained Taint Engine
To perform lightweight data-ﬂow analysis on the user input,
we build the taint engine with three principles: (i) the taint
Table 2: Optimizations for efﬁcient taint analysis. We embed
three techniques to traditional taint analysis techniques to make it
efﬁcient and accurate to analyze embedded devices.
Optimization Method
Challenge
Balance the efﬁcacy and accuracy Coarse-grained taint
Speed up the path exploration
Handle inﬁnite loop
1 Sensitive-trace guidance
2 Trace merging
Path prioritization
Section
§5.1
§5.2
§5.3
function TAINT_SPECIFICATION(Ins, Taint_Map)
func ← GETFUNCADDR(Ins)
(retv, params) ← GETPARAMS(Ins)
taint_set ← HAS_TAINT(params)
if taint_set == NULL then return
end if
if HAS_SUMMARY(func) then TAINT_RULE(func, Taint_Map)
else if IS_NESTFUNC(func) then
if IS_POINTER(retv) && IS_USED(retv) then
if IS_FUNCALL(Ins) then
Algorithm 1 Taint Speciﬁcations
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21: end function
TAINT_RULE(Ins, Taint_Map)
else
end if
else
end if
else
end if
T(retv)
T(params)
STEPINTO(func, Taint_Map, taint_set)
source should be related to user input; (ii) it should balance
the accuracy and efﬁciency of the analysis; (iii) it only tracks
the data ﬂow from the source to the potential sink.
Taint Source. The taint engine marks taint sources based
on the results of the input entry recognition. A taint source
can be a variable or a parameter of a target function. As
Listing 1 shows, string deviceName is used as the parameter
of the function WebsGetVar, and thus its memory location will
be set as the taint source. Since the starting point of SaTC’s
analysis is a code fragment of a binary, it is usually hard to
identify the variable or structure that stores the user-supplied
data. However, with our taint source based on input keywords,
SaTC could obtain the data ﬂow of the user input data easily.
Taint Speciﬁcation. SaTC’s taint engine propagates taint
attributes in the instruction level. We implemented it based on
the multi-architecture binary analysis framework angr [38].
The main factor that affects the efﬁciency and accuracy of taint
analysis is the taint speciﬁcation for function call. To handle
the function call appropriately, we ﬁrst divided the functions
into the following categories: summarizable function, general
function, and nested function. The summarizable functions
are standard library functions related to operations on memory
regions, such as strcpy and memcpy. We can easily summarize
the effect of these functions. The general functions contain no
function call instructions in its body or only contain branches
to summarizable functions (e.g., funcA in Figure 3). The rest
USENIX Association
30th USENIX Security Symposium    309
Figure 4: Call tree of an input entry.
5.2 Efﬁcient Path Exploration
SaTC focuses on detecting two classes of vulnerabilities:
memory-corruption bugs (e.g., buffer overﬂows) and com-
mand injection. To detect the former class, we ﬁrst ﬁnd
memcpy-like functions within a binary and treat them as sink
functions. memcpy-like function means a function that is se-
mantically equivalent to memcpy, like strcpy. Then, if attacker-
controlled data unsafely reaches a memcpy-like function, like
without being sanitized, we raise an alert. For example, for a
memcpy function, if the attacker-controlled data could affect
the value of the source buffer’s length, SaTC will raise an
alert. To detect the latter class of vulnerabilities, we retrieve
the conditions that guard the sink functions (e.g., system-like
function). Then, we check whether the attacker can construct
a proof of concept (PoC) to bypass the constraints. If so, we
raise an alert.
Sensitive Trace Guiding. Although previous modules re-
duce the targets of taint analysis, there could be still a consid-
erable number of input entries that need to be analyzed. To
promote the analysis efﬁciency, SaTC searches the sink call
traces for each target before exploring any path. A sink call
trace represents a function call sequence in the call graph from
the input entry to a potential sink function. SaTC searches the
sink call traces of a function based on its call tree, which takes
the function as the root node. If one function does not contain
a call trace, there is no reachable path from this function to
the sink point. SaTC will delete all input entries inside this
function from the target set. During the exploration, SaTC
checks each function call instruction to see whether the target
belongs to the call trace. If so, we direct the exploration into
the function body.
Call Trace Merging. Starting from one input entry there
could be massive call traces, where many call traces share
some common paths. To reduce the analysis effort, SaTC
merges the call traces with the same input entry as much
as possible. To be speciﬁc, as Figure 4 shows, we ﬁrst clus-
ter all traces based on their start points and input keywords.
Secondly, we divide all functions in the call traces into two
categories: sink functions and guiding functions, and record
the types and addresses of the function call instructions. The
guiding function represents the dominator of a sink function
in a sink call trace. During the exploration, after we encounter
a call instruction that jumps to a guiding function, SaTC will
step into the function for ﬁne-grained analysis. Otherwise, it
Figure 3: Taint speciﬁcation for different types of functions. The
left-hand side shows an example program, while the right-hand side
shows the application of taint propagation rules. T(A) indicates the
taint tag of A.
of the functions, which contain function call instructions to
general functions, are nested functions. In the code of Figure 3,
function strcpy and strlen are treated as summarizable func-
tions. funcA does not call non-summarizable functions, and
thus it is a general function. funcB calls to another general
function funcC and thus is a nested function.
We designed Algorithm 1 to handle a variety of function
calls and instructions. If an instruction Ins is not a function
call, the taint engine will handle it with the corresponding
taint rule (line 19) and update taint map Taint_Map. For the
data movement instruction, the taint engine will propagate
the taint attribute from the source operand to the destination
operand. For an instruction Ins that calls function func, if one
actual parameter param contains the taint attribute (line 5), the
taint engine will track func’s effect on the taint map. If func is
a summarizable function, SaTC treats it as an instruction and
applies its taint rule (line 8) that is built based on its semantic.
If func is a general function, the taint engine will step into
its function body and track the data ﬂow from the entry point
to the end (line 16). For nested functions, if the taint engine
steps into its function body and tracks the data ﬂow for more
nested functions, the analysis will be too time-consuming.
Hence, we directly propagate the attribute of the argument to
its calculation results to balance efﬁciency and accuracy (line
9∼14). Speciﬁcally, if the function returns its results in the
return value retv, we will label with retv with attributes of
all arguments; otherwise, we propagate the taint attributes to
all pointer arguments.
310    30th USENIX Security Symposium
USENIX Association
Disassembly CodeTaint AnalysisGuiding Function SetSink Function SetCall TreeFuncEFuncAFuncFStartSinkXSinkYFuncCFuncBFuncAFuncBFuncCSinkXSinkYfunction SANITIZER_CONS_COLLECTION(totalNodes, Max, N, rootNode)
Algorithm 2 Sanitizer Constraints Collection
1:
2:
3:
4:
5:
6:
7:
8:
9:
Tree ← /0
visitedNodes ← /0
basicNodes ← totalNodes
times ← 0
if !HASSUCCESSOR(rootNode) then return /0;
end if
while visitedNodes != basicNodes and times  N then
Tree ← REMOVE(basicNodes, leafNode)
end for
Cons ← GET_PATH_CONSTRAINTS(Tree)
return Cons
applies the taint speciﬁcation and strategy (deﬁned in Algo-
rithm 1) to the instruction.
5.3 Path Prioritization Strategy
During our evaluation, we ﬁnd that some particular functions
have a signiﬁcant impact on the accuracy and efﬁciency of
the path exploration. For example, sanitizer function could
result in inﬁnite loops, while parser functions may introduce
under-taint problem [34]. To mitigate the negative impact of
these particular functions, we identify them and apply special
rules. Speciﬁcally, if 1) a function contains at least a loop; 2)
the number of the function’s compare instructions is greater
than the threshold; 3) parts of the compare instructions could
restrict the content (i.e.,value) of the memory region pointed
by the function’s arguments, we will treat it as memcmp-like
function. Based on the amount of information preservation,
we can divide these functions into two categories: parsers and
sanitizers.
Parsers. A parser function usually contains a loop, such
as funcA in Figure 3. If the variable s1 is unconstrained,
there will always be a path from the default statement to the
head of the for loop. Among these paths, only those passing
through the ﬁrst case statement (line 5) would propagate the
taint outside the function. In other words, an analysis missing
these paths would mistakenly establish that the user input
cannot affect variable s2 and later execution paths. SaTC uses
the same solution with KARONTE to handle this problem,
which valorizes those paths within a function that potentially
propagate the taint also outside the function.
Sanitizers. A sanitizer function either cleans malicious data
or warns about the potential threat. Consider the sample in Fig-
ure 5, to ﬁlter the speciﬁc strings, such as ?, Netgear inserts a
sanitizer function FUN_7b83c before the system-like function.
It contains a complex check on the user_input (line 7). The
while loop and comparing operations result in many paths.
However, to get the complete constraints on the user_input,
we are only interested in the longest path.
Figure 5: Pseudocode of sanitizer function. This function tries to
remove invalid characters from the user input before the program
invokes a system-like function.
We use Algorithm 2 to explore the longest path and get the
constraints. The rootNode is the start basic block of the func-
tion. Firstly, it uses Random_Walk_Search function to explore
the reachable paths and basic blocks visitedNodes in lim-
ited total times Max (line 8). Random_Walk_Search randomly
chooses a successor from the rootNode and recursively calls
itself until encountering a leafNode and records the leafNode
(line 9). The leafNode represents the basic block that has no
successor or the source basic block of the back edge of a loop.
Secondly, it scans all leafNodes and removes a leafNode if
the number of its in-degree is more than the threshold value N
(line 13). Finally, it re-explores the function and outputs the
constraints of the longest path (line 17). As Figure 5 shows,
the else branch of the complex check is a leafNode.
6
Implementation
We implemented the prototype system with around 9800 lines
of Python code. The input keyword extraction module is im-
plemented based on standard XML processing library and
JavaScript parsing library Js2Py [16]. The input entry recog-
nition module is implemented based on Ghidra library and
extended KARONTE’s CPF which covers shared tainted vari-
able with NVRAM [10]. The taint engine of the input sensitive
analysis is built on top of angr [38], a multi-architecture binary
analysis framework. The path selection part is implemented
based on Ghidra library [31]. To make SaTC more available
for MIPS architecture, we ﬁx the binary loader of angr and the
register misuse problem of KARONTE. Now, the prototype
system supports multiple architectures, including x86, ARM
and MIPS.
USENIX Association
30th USENIX Security Symposium    311
leafNodeTable 3: Dataset of device samples. We selected 39 device samples
from six vendors, including 37 routers and two cameras on two
architectures. SaTC found 33 previously unknown bugs, and 30
have been conﬁrmed by developers. SizeP and SizeUP represent the
average size before and after unpacking, respectively.
Table 4: Vulnerabilities discovered by SaTC. For the bug type,
BoF means buffer overﬂow; CI represents command injection; IAC
indicates incorrect access control. Ksrc represents the type of the
front-end ﬁle where the vulnerability-related keyword is found. Ser-
vice represents the service where the vulnerability occurs.
Vendor
Type
Series
#
SizeP
SizeUP Arch
Bugs
Vendor
Router
Netgear
Tenda
Router
TOTOLink Router
Router
D-Link
Motorola
Router
Camera P/Q
Axis
Total