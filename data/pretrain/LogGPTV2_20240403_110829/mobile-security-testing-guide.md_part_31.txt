String textMessage = "Updated Password from: "+decryptedPassword+" to: "+newpass;
SmsManager smsManager = SmsManager.getDefault();
System.out.println("For the changepassword - phonenumber: "+textPhoneno+" password is: "+textMe
ssage);
smsManager.sendTextMessage(textPhoneno, null, textMessage, null, null);
}
}
}
}
BroadcastReceivers should use the android:permission attribute; otherwise, other applications can invoke them. You
can use Context.sendBroadcast(intent, receiverPermission); to specify permissions a receiver must have to read the
broadcast. You can also set an explicit application package name that limits the components this Intent will resolve to.
If left as the default value (null), all components in all applications will be considered. If non-null, the Intent can match
only the components in the given application package.
Dynamic Analysis
You can enumerate IPC components with Drozer. To list all exported IPC components, use the module
app.package.attacksurface :
dz> run app.package.attacksurface com.mwr.example.sieve
Attack Surface:
3 activities exported
0 broadcast receivers exported
2 content providers exported
2 services exported
is debuggable
Content Providers
The "Sieve" application implements a vulnerable content provider. To list the content providers exported by the Sieve
app, execute the following command:
dz> run app.provider.finduri com.mwr.example.sieve
Scanning com.mwr.example.sieve...
content://com.mwr.example.sieve.DBContentProvider/
content://com.mwr.example.sieve.FileBackupProvider/
content://com.mwr.example.sieve.DBContentProvider
content://com.mwr.example.sieve.DBContentProvider/Passwords/
225
Android Platform APIs
content://com.mwr.example.sieve.DBContentProvider/Keys/
content://com.mwr.example.sieve.FileBackupProvider
content://com.mwr.example.sieve.DBContentProvider/Passwords
content://com.mwr.example.sieve.DBContentProvider/Keys
Content providers with names like "Passwords" and "Keys" are prime suspects for sensitive information leaks. After
all, it wouldn't be good if sensitive keys and passwords could simply be queried from the provider!
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys
Permission Denial: reading com.mwr.example.sieve.DBContentProvider uri content://com.mwr.example.sieve.DBConten
tProvider/Keys from pid=4268, uid=10054 requires com.mwr.example.sieve.READ_KEYS, or grantUriPermission()
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/
| Password | pin |
| SuperPassword1234 | 1234 |
This content provider can be accessed without permission.
dz> run app.provider.update content://com.mwr.example.sieve.DBContentProvider/Keys/ --selection "pin=1234" --st
ring Password "newpassword"
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/
| Password | pin |
| newpassword | 1234 |
Activities
To list activities exported by an application, use the module app.activity.info . Specify the target package with -a
or omit the option to target all apps on the device:
dz> run app.activity.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
com.mwr.example.sieve.FileSelectActivity
Permission: null
com.mwr.example.sieve.MainLoginActivity
Permission: null
com.mwr.example.sieve.PWList
Permission: null
Enumerating activities in the vulnerable password manager "Sieve" shows that the activity
com.mwr.example.sieve.PWList is exported with no required permissions. It is possible to use the module
app.activity.start to launch this activity.
dz> run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList
Since the activity is called directly in this example, the login form protecting the password manager would be
bypassed, and the data contained within the password manager could be accessed.
Services
Services can be enumerated with the Drozer module app.service.info :
dz> run app.service.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
com.mwr.example.sieve.AuthService
Permission: null
com.mwr.example.sieve.CryptoService
Permission: null
226
Android Platform APIs
To communicate with a service, you must first use static analysis to identify the required inputs.
Because this service is exported, you can use the module app.service.send to communicate with the service and
change the password stored in the target application:
dz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve.AuthService --msg 6345 7452 1 --extra stri
ng com.mwr.example.sieve.PASSWORD "abcdabcdabcdabcd" --bundle-as-obj
Got a reply from com.mwr.example.sieve/com.mwr.example.sieve.AuthService:
what: 4
arg1: 42
arg2: 0
Empty
Broadcast Receivers
Broadcasts can be enumerated via the Drozer module app.broadcast.info . The target package should be specified
via the -a parameter:
dz> run app.broadcast.info -a com.android.insecurebankv2
Package: com.android.insecurebankv2
com.android.insecurebankv2.MyBroadCastReceiver
Permission: null
In the example app "Android Insecure Bank", one broadcast receiver is exported without requiring any permissions,
indicating that we can formulate an intent to trigger the broadcast receiver. When testing broadcast receivers, you
must also use static analysis to understand the functionality of the broadcast receiver, as we did before.
With the Drozer module app.broadcast.send , we can formulate an intent to trigger the broadcast and send the
password to a phone number within our control:
dz> run app.broadcast.send --action theBroadcast --extra string phonenumber 07123456789 --extra string newpass
12345
This generates the following SMS:
Updated Password from: SecretPassword@ to: 12345
Sniffing Intents
If an Android application broadcasts intents without setting a required permission or specifying the destination
package, the intents can be monitored by any application that runs on the device.
To register a broadcast receiver to sniff intents, use the Drozer module app.broadcast.sniff and specify the action to
monitor with the --action parameter:
dz> run app.broadcast.sniff --action theBroadcast
[*] Broadcast receiver registered to sniff matching intents
[*] Output is updated once a second. Press Control+C to exit.
Action: theBroadcast
Raw: Intent { act=theBroadcast flg=0x10 (has extras) }
Extra: phonenumber=07123456789 (java.lang.String)
Extra: newpass=12345 (java.lang.String)`
Testing JavaScript Execution in WebViews (MSTG-PLATFORM-5)
Overview
227
Android Platform APIs
JavaScript can be injected into web applications via reflected, stored, or DOM-based Cross-Site Scripting (XSS).
Mobile apps are executed in a sandboxed environment and don't have this vulnerability when implemented natively.
Nevertheless, WebViews may be part of a native app to allow web page viewing. Every app has its own WebView
cache, which isn't shared with the native Browser or other apps. On Android, WebViews use the WebKit rendering
engine to display web pages, but the pages are stripped down to minimal functions, for example, pages don't have
address bars. If the WebView implementation is too lax and allows usage of JavaScript, JavaScript can be used to
attack the app and gain access to its data.
Static Analysis
The source code must be checked for usage and implementations of the WebView class. To create and use a
WebView, you must create an instance of the WebView class.
WebView webview = new WebView(this);
setContentView(webview);
webview.loadUrl("https://www.owasp.org/");
Various settings can be applied to the WebView (activating/deactivating JavaScript is one example). JavaScript is
disabled by default for WebViews and must be explicitly enabled. Look for the method setJavaScriptEnabled to check
for JavaScript activation.
webview.getSettings().setJavaScriptEnabled(true);
This allows the WebView to interpret JavaScript. It should be enabled only if necessary to reduce the attack surface to
the app. If JavaScript is necessary, you should make sure that
the communication to the endpoints consistently relies on HTTPS (or other protocols that allow encryption) to
protect HTML and JavaScript from tampering during transmission
JavaScript and HTML are loaded locally, from within the app data directory or from trusted web servers only.
To remove all JavaScript source code and locally stored data, clear the WebView's cache with clearCache when the
app closes.
Devices running platforms older than Android 4.4 (API level 19) use a version of WebKit that has several security
issues. As a workaround, the app must confirm that WebView objects display only trusted content if the app runs on
these devices.
Dynamic Analysis
Dynamic Analysis depends on operating conditions. There are several ways to inject JavaScript into an app's
WebView:
Stored Cross-Site Scripting vulnerabilities in an endpoint; the exploit will be sent to the mobile app's WebView
when the user navigates to the vulnerable function.
Attacker takes a man-in-the-middle (MITM) position and tampers with the response by injecting JavaScript.
Malware tampering with local files that are loaded by the WebView.
To address these attack vectors, check the following:
All functions offered by the endpoint should be free of stored XSS.
Only files that are in the app data directory should be rendered in a WebView (see test case "Testing for Local
File Inclusion in WebViews").
The HTTPS communication must be implemented according to best practices to avoid MITM attacks. This
means:
228
Android Platform APIs
all communication is encrypted via TLS (see test case "Testing for Unencrypted Sensitive Data on the
Network"),
the certificate is checked properly (see test case "Testing Endpoint Identify Verification"), and/or
the certificate should be pinned (see "Testing Custom Certificate Stores and SSL Pinning").
Testing WebView Protocol Handlers (MSTG-PLATFORM-6)
Overview
Several default schemas are available for Android URLs. They can be triggered within a WebView with the following:
http(s)://
file://
tel://
WebViews can load remote content from an endpoint, but they can also load local content from the app data directory
or external storage. If the local content is loaded, the user shouldn't be able to influence the filename or the path used
to load the file, and users shouldn't be able to edit the loaded file.
Static Analysis
Check the source code for WebView usage. The following WebView settings control resource access:
setAllowContentAccess : Content URL access allows WebViews to load content from a content provider installed
on the system, which is enabled by default .
setAllowFileAccess : Enables and disables file access within a WebView. File access is enabled by default. Note
that this enables and disables file system access only. Asset and resource access is unaffected and accessible
via file:///android_asset and file:///android_res .
setAllowFileAccessFromFileURLs : Does or does not allow JavaScript running in the context of a file scheme URL
to access content from other file scheme URLs. The default value is true for API level 15 (Ice Cream Sandwich)
and below and false for API level 16 (Jelly Bean) and above.
setAllowUniversalAccessFromFileURLs : Does or does not allow JavaScript running in the context of a file scheme
URL to access content from any origin. The default value is true for API level 15 (Ice Cream Sandwich) and
below and false for API level 16 (Jelly Bean) and above.
If one or more of the above methods is/are activated, you should determine whether the method(s) is/are really
necessary for the app to work properly.
If a WebView instance can be identified, find out whether local files are loaded with the loadURL method.
WebView = new WebView(this);
webView.loadUrl("file:///android_asset/filename.html");
The location from which the HTML file is loaded must be verified. If the file is loaded from external storage, for
example, the file is readable and writable by everyone. This is considered a bad practice. Instead, the file should be
placed in the app's assets directory.
webview.loadUrl("file:///" +
Environment.getExternalStorageDirectory().getPath() +
"filename.html");
The URL specified in loadURL should be checked for dynamic parameters that can be manipulated; their
manipulation may lead to local file inclusion.
229
Android Platform APIs
Use the following code snippet and best practices to deactivate protocol handlers, if applicable:
//If attackers can inject script into a WebView, they could access local resources. This can be prevented by di
sabling local file system access, which is enabled by default. You can use the Android WebSettings class to dis
able local file system access via the public method `setAllowFileAccess`.
webView.getSettings().setAllowFileAccess(false);
webView.getSettings().setAllowFileAccessFromFileURLs(false);
webView.getSettings().setAllowUniversalAccessFromFileURLs(false);
webView.getSettings().setAllowContentAccess(false);
Create a whitelist that defines local and remote web pages and protocols that are allowed to be loaded.
Create checksums of the local HTML/JavaScript files and check them while the app is starting up. Minify
JavaScript files to make them harder to read.
Dynamic Analysis
To identify the usage of protocol handlers, look for ways to trigger phone calls and ways to access files from the file
system while you're using the app.
Determining Whether Java Objects Are Exposed Through WebViews (MSTG-
PLATFORM-7)
Overview
Android offers a way for JavaScript executed in a WebView to call and use native functions of an Android app:
addJavascriptInterface .
The addJavascriptInterface method allows you to expose Java Objects to WebViews. When you use this method in
an Android app, JavaScript in a WebView can invoke the Android app's native methods.
Before Android 4.2 Jelly Bean (API Level 17), a vulnerability was discovered in the implementation of
addJavascriptInterface : a reflection that leads to remote code execution when malicious JavaScript is injected into a
WebView.
This vulnerability was fixed by API Level 17, and the access to Java Object methods granted to JavaScript was
changed. When you use addJavascriptInterface , methods of Java Objects are only accessible to JavaScript when
the annotation @JavascriptInterface is added. Before API Level 17, all Java Object methods were accessible by
default.
An app that targets an Android version older than Android 4.2 is still vulnerable to the flaw in addJavascriptInterface
and should be used only with extreme care. Several best practices should be used when this method is necessary.
Static Analysis
You need to determine whether the method addJavascriptInterface is used, how it is used, and whether an attacker
can inject malicious JavaScript.
The following example shows how addJavascriptInterface is used to bridge a Java Object and JavaScript in a
WebView:
WebView webview = new WebView(this);
WebSettings webSettings = webview.getSettings();
webSettings.setJavaScriptEnabled(true);
230
Android Platform APIs
MSTG_ENV_008_JS_Interface jsInterface = new MSTG_ENV_008_JS_Interface(this);
myWebView.addJavascriptInterface(jsInterface, "Android");
myWebView.loadURL("http://example.com/file.html");
setContentView(myWebView);
In Android API levels 17 and above, an annotation called JavascriptInterface explicitly allows JavaScript to access a
Java method.
public class MSTG_ENV_008_JS_Interface {
Context mContext;
/** Instantiate the interface and set the context */
MSTG_ENV_005_JS_Interface(Context c) {
mContext = c;
}
@JavascriptInterface
public String returnString () {
return "Secret String";
}
/** Show a toast from the web page */
@JavascriptInterface
public void showToast(String toast) {
Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();
}
}
If the annotation @JavascriptInterface is defined for a method, it can be called by JavaScript. If the app targets API
level 
...
Dynamic Analysis
Dynamic analysis of the app can show you which HTML or JavaScript files are loaded and which vulnerabilities are
present. The procedure for exploiting the vulnerability starts with producing a JavaScript payload and injecting it into
the file that the app is requesting. The injection can be accomplished via a MITM attack or direct modification of the
231
Android Platform APIs