dress up data that Beacon must send or receive with each transaction. You may add extraneous 
indicators to each transaction too.  
In an HTTP GET or POST request, these extraneous indicators come in the form of headers or 
parameters. Use the parameter statement within the client block to add an arbitrary parameter to 
an HTTP GET or POST transaction.  
www.cobaltstrike.com/
/
72/
This code will force Beacon to add ?bar=blah to the /foobar URI when it makes a request.  
http-get { 
client { 
parameter "bar" "blah"; 
Use the header statement within the client or server blocks to add an arbitrary HTTP header to 
the client’s request or server’s response. This header statement adds an indicator to put network 
security monitoring teams at ease. 
http-get { 
server { 
header "X-Not-Malware" "I promise!"; 
The Profile Interpreter will Interpret your header and parameter statements In order. That said, 
the WinINet library (client) and Cobalt Strike web server have the final say about where in the 
transaction these indicators will appear. 
Options 
You may configure Beacon’s defaults through the profile file. There are two types of options: 
global and local options. The global options change a global Beacon setting. Local options are 
transaction specific. You must set local options in the right context. Use the set statement to set 
an option. 
set "sleeptime" "1000"; 
Here are a few options: 
Option 
Context 
Default Value 
Changes 
data_jitter 
0 
Append random-length string 
(up to data_jitter value) to 
http-get and http-post server 
output. 
dns_idle 
0.0.0.0 
IP address used to indicate no 
tasks are available to DNS 
Beacon; Mask for other DNS 
C2 values 
dns_max_txt 
252 
Maximum length of DNS 
TXT responses for tasks 
dns_sleep 
0 
Force a sleep prior to each 
individual DNS request. (in 
milliseconds) 
dns_stager_prepend 
Prepend text to payload stage 
delivered to DNS TXT record 
stager 
dns_stager_subhost 
.stage.123456. 
Subdomain used by DNS TXT 
www.cobaltstrike.com/
/
73/
record stager. 
dns_ttl 
1 
TTL for DNS replies 
headers_remove 
Comma-separated list of 
HTTP client headers to 
remove from Beacon C2 
host_stage 
true 
Host payload for staging over 
HTTP, HTTPS, or DNS. 
Required by stagers. 
jitter 
0 
Default jitter factor (0-99%) 
maxdns 
255 
Maximum length of hostname 
when uploading data over 
DNS (0-255) 
pipename 
msagent_## 
Default name of pipe to use 
for SMB Beacon’s peer-to-
peer communication. Each # 
is replaced with a random hex 
value. 
pipename_stager 
status_## 
Name of pipe to use for SMB 
Beacon’s named pipe stager. 
Each # is replaced with a 
random hex value. 
sample_name 
My Profile 
The name of this profile (used 
in the Indicators of 
Compromise report) 
sleeptime 
60000 
Default sleep time (in 
milliseconds) 
smb_frame_header 
Prepend header to SMB 
Beacon messages 
ssh_banner 
Cobalt Strike 4.2 
SSH client banner 
ssh_pipename 
postex_ssh_#### 
Name of pipe for SSH 
sessions. Each # is replaced 
with a random hex value. 
tcp_frame_header 
Prepend header to TCP 
Beacon messages 
tcp_port 
4444 
Default TCP Beacon listen 
port 
uri 
http-get,  
http-post 
[required option] 
Transaction URI 
uri_x86 
http-stager 
x86 payload stage URI 
uri_x64 
http-stager 
x64 payload stage URI 
useragent 
Internet Explorer (Random) 
Default User-Agent for HTTP 
comms.  
verb 
http-get, 
http-post 
GET, POST 
HTTP Verb to use for 
transaction 
www.cobaltstrike.com/
/
74/
With the uri option, you may specify multiple URIs as a space separated string. Cobalt Strike’s 
web server will bind all of these URIs and it will assign one of these URIs to each Beacon host 
when the Beacon stage is built. 
Even though the useragent option exists; you may use the header statement to override this 
option.  
11.4 HTTP Staging 
Beacon is a staged payload. This means the payload is downloaded by a stager and injected into 
memory. Your http-get and http-post indicators will not take effect until Beacon is in memory on 
your target. Malleable C2’s http-stager block customizes the HTTP staging process.  
http-stager { 
set uri_x86 "/get32.gif"; 
set uri_x64 "/get64.gif"; 
The uri_x86 option sets the URI to download the x86 payload stage. The uri_x64 option sets the 
URI to download the x64 payload stage.  
client { 
parameter "id" "1234"; 
header "Cookie" "SomeValue"; 
} 
The client keyword under the context of http-stager defines the client side of the HTTP 
transaction. Use the parameter keyword to add a parameter to the URI. Use the header keyword 
to add a header to the stager’s HTTP GET request. 
server { 
header "Content-Type" "image/gif"; 
output { 
prepend "GIF89a"; 
print; 
} 
} 
} 
The server keyword under the context of http-stager defines the server side of the HTTP 
transaction. The header keyword adds a server header to the server’s response. The output 
keyword under the server context of http-stager is a data transform to change the payload stage. 
This transform may only prepend and append strings to the stage. Use the print termination 
statement to close this output block. 
11.5 A Beacon HTTP Transaction Walk-through 
To put all of this together, it helps to know what a Beacon transaction looks like and which data 
is sent with each request. 
www.cobaltstrike.com/
/
75/
A transaction starts when a Beacon makes an HTTP GET request to Cobalt Strike’s web server. 
At this time, Beacon must send metadata that contains information about the compromised 
system.  
Tip:>session>metadata>is>an>encrypted>blob>of>data.>Without>encoding,>it>is>not>suitable>
for>transport>in>a>header>or>URI>parameter.>Always>apply>a>base64,>base64url,>or>
netbios>statement>to>encode>your>metadata.>
Cobalt Strike’s web server responds to this HTTP GET with tasks that the Beacon must execute. 
These tasks are, initially, sent as one encrypted binary blob. You may transform this information 
with the output keyword under the server context of http-get. 
As Beacon executes its tasks, it accumulates output. After all tasks are complete, Beacon checks 
if there is output to send. If there is no output, Beacon goes to sleep. If there is output, Beacon 
initiates an HTTP POST transaction. 
The HTTP POST request must contain a session id in a URI parameter or header. Cobalt Strike 
uses this information to associate the output with the right session. The posted content is, 
initially, an encrypted binary blob. You may transform this information with the output keyword 
under the client context of http-post. 
Cobalt Strike’s web server may respond to an HTTP POST with anything it likes. Beacon does 
not consume or use this information. You may specify the output of HTTP POST with the 
output block under the server context of http-post. 
Note:>while>http-get>uses>GET>by>default>and>http-post>uses>POST>by>default,>you’re>not>
stuck>with>these>options.>Use>the>verb>option>to>change>these>defaults.>There’s>a>lot>of>
flexibility>here.>
This table summarizes these keywords and the data they send: 
Request 
Component 
Block 
Data 
http-get 
client 
metadata 
Session metadata 
http-get 
server 
output 
Beacon’s tasks 
http-post 
client 
id 
Session ID 
http-post 
client 
output 
Beacon’s responses 
http-post 
server 
output 
Empty 
http-stager 
server 
output 
Encoded payload stage 
www.cobaltstrike.com/
/
76/
11.6 HTTP Server Configuration 
The http-config block has influence over all HTTP responses served by Cobalt Strike’s web 
server. Here, you may specify additional HTTP headers and the HTTP header order. 
http-config { 
set headers "Date, Server, Content-Length, Keep-Alive,  
Connection, Content-Type"; 
header "Server" "Apache"; 
header "Keep-Alive" "timeout=5, max=100"; 
header "Connection" "Keep-Alive”; 
set trust_x_forwarded_for "true"; 
} 
The header keyword adds a header value to each of Cobalt Strike’s HTTP responses. If the 
header value is already defined in a response, this value is ignored.  
The set headers option specifies the order these HTTP headers are delivered in an HTTP 
response. Any headers not in this list are added to the end. 
The set trust_x_forwarded_for option decides if Cobalt Strike uses the X-Forwarded-For 
HTTP header to determine the remote address of a request. Use this option if your Cobalt Strike 
server is behind an HTTP redirector. 
11.7 Self-signed SSL Certificates with SSL Beacon 
The HTTPS Beacon uses the HTTP Beacon’s indicators in its communication. Malleable C2 
profiles may also specify parameters for the Beacon C2 server’s self-signed SSL certificate. This 
is useful if you want to replicate an actor with unique indicators in their SSL certificate: 
https-certificate { 
set CN       "bobsmalware.com"; 
set O        "Bob’s Malware"; 
} 
The certificate parameters under your profile’s control are: 
Option 
Example 
Description 
C 
US 
Country 
CN 
beacon.cobaltstrike.com 
Common Name; Your callback domain 
L 
Washington 
Locality 
O 
Strategic Cyber LLC 
Organization Name 
OU 
Certificate Department 
Organizational Unit Name 
ST 
DC 
State or Province 
validity 
365 
Number of days certificate is valid for 
www.cobaltstrike.com/
/
77/
11.8 Valid SSL Certificates with SSL Beacon 
You have the option to use a Valid SSL certificate with Beacon. Use a Malleable C2 profile to 
specify a Java Keystore file and a password for the keystore. This keystore must contain your 