### Dressing Up Data for Beacon Transactions

When configuring the data that Beacon must send or receive with each transaction, you can add extraneous indicators to enhance the stealth and flexibility of your operations. In an HTTP GET or POST request, these indicators can be added as headers or parameters.

#### Adding Parameters
To add an arbitrary parameter to an HTTP GET or POST transaction, use the `parameter` statement within the `client` block. For example:

```plaintext
http-get {
  client {
    parameter "bar" "blah";
  }
}
```

This code will force Beacon to append `?bar=blah` to the `/foobar` URI when making a request.

#### Adding Headers
To add an arbitrary HTTP header to the client’s request or server’s response, use the `header` statement within the `client` or `server` blocks. This can help in evading detection by network security monitoring teams. For example:

```plaintext
http-get {
  server {
    header "X-Not-Malware" "I promise!";
  }
}
```

The Profile Interpreter processes these `header` and `parameter` statements in order. However, the WinINet library (client) and Cobalt Strike web server ultimately determine where in the transaction these indicators will appear.

### Configuring Beacon Options

Beacon's default settings can be configured through the profile file. There are two types of options: global and local. Global options change a global Beacon setting, while local options are specific to transactions. Use the `set` statement to configure an option. For example:

```plaintext
set "sleeptime" "1000";
```

Here are some common options:

| Option                | Context       | Default Value | Description                                                                 |
|-----------------------|---------------|---------------|-----------------------------------------------------------------------------|
| `data_jitter`         | -             | 0             | Append a random-length string (up to `data_jitter` value) to HTTP responses. |
| `dns_idle`            | -             | 0.0.0.0       | IP address used to indicate no tasks are available to DNS Beacon.            |
| `dns_max_txt`         | -             | 252           | Maximum length of DNS TXT responses for tasks.                              |
| `dns_sleep`           | -             | 0             | Force a sleep prior to each individual DNS request (in milliseconds).        |
| `dns_stager_prepend`  | -             | -             | Prepend text to payload stage delivered to DNS TXT record stager.           |
| `dns_stager_subhost`  | -             | .stage.123456. | Subdomain used by DNS TXT record stager.                                    |
| `dns_ttl`             | -             | 1             | TTL for DNS replies.                                                        |
| `headers_remove`      | -             | -             | Comma-separated list of HTTP client headers to remove from Beacon C2.       |
| `host_stage`          | -             | true          | Host payload for staging over HTTP, HTTPS, or DNS.                          |
| `jitter`              | -             | 0             | Default jitter factor (0-99%).                                              |
| `maxdns`              | -             | 255           | Maximum length of hostname when uploading data over DNS (0-255).            |
| `pipename`            | -             | msagent_##     | Default name of pipe for SMB Beacon’s peer-to-peer communication.           |
| `pipename_stager`     | -             | status_##     | Name of pipe for SMB Beacon’s named pipe stager.                            |
| `sample_name`         | -             | My Profile    | The name of this profile (used in the Indicators of Compromise report).      |
| `sleeptime`           | -             | 60000         | Default sleep time (in milliseconds).                                       |
| `smb_frame_header`    | -             | -             | Prepend header to SMB Beacon messages.                                      |
| `ssh_banner`          | -             | Cobalt Strike 4.2 | SSH client banner.                                                         |
| `ssh_pipename`        | -             | postex_ssh_#### | Name of pipe for SSH sessions.                                              |
| `tcp_frame_header`    | -             | -             | Prepend header to TCP Beacon messages.                                      |
| `tcp_port`            | -             | 4444          | Default TCP Beacon listen port.                                             |
| `uri`                 | http-get, http-post | [required] | Transaction URI.                                                            |
| `uri_x86`             | http-stager   | -             | x86 payload stage URI.                                                      |
| `uri_x64`             | http-stager   | -             | x64 payload stage URI.                                                      |
| `useragent`           | -             | Internet Explorer (Random) | Default User-Agent for HTTP comms.                                        |
| `verb`                | http-get, http-post | GET, POST | HTTP Verb to use for transaction.                                           |

With the `uri` option, you can specify multiple URIs as a space-separated string. Cobalt Strike’s web server will bind all these URIs and assign one of them to each Beacon host when the Beacon stage is built.

### Overriding User-Agent

Although the `useragent` option exists, you can override it using the `header` statement.

### HTTP Staging

Beacon is a staged payload, meaning the payload is downloaded by a stager and injected into memory. The `http-stager` block customizes the HTTP staging process. For example:

```plaintext
http-stager {
  set uri_x86 "/get32.gif";
  set uri_x64 "/get64.gif";

  client {
    parameter "id" "1234";
    header "Cookie" "SomeValue";
  }

  server {
    header "Content-Type" "image/gif";
    output {
      prepend "GIF89a";
      print;
    }
  }
}
```

- `uri_x86` sets the URI to download the x86 payload stage.
- `uri_x64` sets the URI to download the x64 payload stage.
- The `client` keyword under `http-stager` defines the client side of the HTTP transaction.
- The `server` keyword under `http-stager` defines the server side of the HTTP transaction.
- The `output` keyword under the `server` context is a data transform to change the payload stage, allowing only prepending and appending strings.

### A Beacon HTTP Transaction Walk-through

A Beacon transaction starts with an HTTP GET request to Cobalt Strike’s web server, where Beacon sends metadata about the compromised system. The metadata is an encrypted blob of data, so it should be encoded using `base64`, `base64url`, or `netbios`.

Cobalt Strike’s web server responds with tasks for the Beacon to execute, initially sent as an encrypted binary blob. You can transform this information with the `output` keyword under the `server` context of `http-get`.

As Beacon executes its tasks, it accumulates output. If there is output, Beacon initiates an HTTP POST transaction. The HTTP POST request must contain a session ID in a URI parameter or header. The posted content is an encrypted binary blob, which can be transformed with the `output` keyword under the `client` context of `http-post`.

Cobalt Strike’s web server may respond to an HTTP POST with any content, but Beacon does not consume or use this information. You can specify the output of HTTP POST with the `output` block under the `server` context of `http-post`.

### HTTP Server Configuration

The `http-config` block influences all HTTP responses served by Cobalt Strike’s web server. You can specify additional HTTP headers and their order. For example:

```plaintext
http-config {
  set headers "Date, Server, Content-Length, Keep-Alive, Connection, Content-Type";
  header "Server" "Apache";
  header "Keep-Alive" "timeout=5, max=100";
  header "Connection" "Keep-Alive";
  set trust_x_forwarded_for "true";
}
```

- The `header` keyword adds a header value to each HTTP response.
- The `set headers` option specifies the order of HTTP headers in the response.
- The `set trust_x_forwarded_for` option determines if Cobalt Strike uses the `X-Forwarded-For` header to determine the remote address of a request.

### Self-signed SSL Certificates with SSL Beacon

The HTTPS Beacon uses the HTTP Beacon’s indicators in its communication. Malleable C2 profiles can also specify parameters for the Beacon C2 server’s self-signed SSL certificate. For example:

```plaintext
https-certificate {
  set CN "bobsmalware.com";
  set O "Bob’s Malware";
}
```

- `CN`: Common Name; your callback domain.
- `O`: Organization Name.
- `L`: Locality.
- `ST`: State or Province.
- `validity`: Number of days the certificate is valid for.

### Valid SSL Certificates with SSL Beacon

You can use a valid SSL certificate with Beacon. Use a Malleable C2 profile to specify a Java Keystore file and a password for the keystore. The keystore must contain your SSL certificate and private key.