I, a test input from the input queue of 1dVul-Fuzzer
T, a speciﬁed target branch
Output: H, a set of new inputs
1: H ← φ
2: t ← record_orig_trace(P, I)
3: f un ← compute_f arthest_f unc(t, P, T)
4: seqs ← compute_dominator_seqs(f un, T)
5: for seq in seqs do
6:
7: N ← compute_chopped_area(P, t, d1, d2)
(d1, d2) ← compute_f arthest_dom(t, f un, seq)
br ← get_missing_branch(t, N )
repeat
else
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: end for
19: return H
if is_satisf iable(br, t) then
Iθ ← chopped_explore(br, N )
Iθ ← backtrack_explore(br, t)
end if
add Iθ to H if Iθ is not None
br ← get_missing_branch(t, N )
until br is None
follow, including three major steps:
1) Dominator-sequence-based Branch Selection: Based
on the above example, in order to reach target T, one should
ﬁrst ﬁnd inputs that could get through the dominator sequence
of T. However, calculating dominator sequence based on the
interprocedural CFG is inaccurate due to the context insen-
sitive issue mentioned in Section II-A. Therefore, we extend
the distance evaluation method of 1dVul-Fuzzer to compute
dominator sequences and select branches to be explored.
Details are described as follow.
a) Compute dominator sequence (line 2-4): For the given
input I, Algorithm 2 ﬁrst re-executes the program symbolically
using the concrete input I and records the corresponding
execution trace accompanying with the constraints generated
during the execution in t on the basis of binary instrumentation
(line 2). It then employs the function-level distance evaluation
method introduced in Section II-A to get the function that
has the shortest distance from itself to t on the execution
trace (line 3). Such a function is called the farthest function.
The dominator sequence is computed based on the farthest
function (line 4): if the farthest function is the target function
that involves the target branch T, then the algorithm computes
the dominator sequence for T based on the CFG of the
target function; Otherwise, the algorithm computes dominator
sequence for each call site in the farthest function.
b) Branch selection (line 6-8): For each dominator se-
quence, the algorithm further computes the farthest dominator
(d1) that the current execution trace can reach (line 6). Given
a dominator sequence seqi → seqi+1 → ... → seqk →
610
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply. 
seqk+1 → ... → seqj, seqk is considered as the farthest
dominator of trace t if t covers each dominator in subsequence
seqi → seqi+1 → ... → seqk but does not cover seqk+1. The
successor of the farthest dominator, i.e. seqk+1, is the goal that
the following steps of the algorithm try to generate inputs for.
In line 6, it is denoted as d2. Based on the farthest dominator
and its successor, the algorithm computes the exploring area
to look up missing branches (line 7). The area is a chopped
CFG [18] that is consisted of basic blocks on paths from d1 to
d2. The basic blocks are stored in block set N. When selecting
branches to be explored, the algorithm only looks up missing
branches that is unexplored yet and could lead to at least one
of nodes in block set N (line 8).
2) Chopped Symbolic Execution (line 10-11): For a se-
lected branch br, the algorithm ﬁrst checks if the branch
condition is satisﬁable on the under exploring path (line 10).
That means if the conjunction of the branch condition and the
constraints generated at the program point before the branch
is solvable. If it is, the algorithm keeps exploring paths from
the current branch to d2 and tries to generate a valid input for
the paths (line 11). If such an input is generated, it is added
into H.
that could reach T. However,
Note that the algorithm restricts the path exploration in the
chopped CFG node set N in order to discover such an input
that could reach the successor of the farthest dominator (i.e.
d2). In this way, the 1dVul-Explorer decomposes the ToIG
problem into a group of dominator exploration problems in
order to alleviate the path explosion problem of symbolic
execution. Theoretically, by invoking Algorithm 2 repeatedly,
1dVul-Explorer will keep discovering inputs that could reach
more dominators on the dominator sequence of T, and ﬁnally
discover an input
to fully
use the advantages of both fuzzing and symbolic execution,
1dVul transfers the control back to 1dVul-Fuzzer when the
number of new explored blocks reaches a threshold. In our
implementation and evaluation, we set the threshold as 1024.
3) Backtracking Conﬂict constraints (line 10, 13): For a
given branch br, if its branch condition can not be satisﬁable
on the current exploring path (line 10), then there must be
a certain previously generated constraint that conﬂicts with
the underconsidering branch condition. In this situation, the
algorithm backtracks the current exploring path and try to
discover such an input that could both negate the conﬂict
constraint and make br be taken (line 13). We use binary
search algorithm to discover the conﬂict constraint. If the
conﬂict constraint
is
generated by a conditional branch, then the corresponding
branch will be negated to resolve the conﬂict. If the conﬂict
constraint is not a path condition, we should ﬁrst look up
assignment statements for variables in br that could resolve the
conﬂict, and then explore paths that could make the controlling
branches of the assignment statements be executed.
is a path condition, which means it
Take the code snippet shown in Listing 2 as an example.
Suppose the given input
is “acbb”, so the corresponding
execution trace should be line1 → 2 → 5 → 7. The missing
611
branch to be explored is the true branch of the if-statement
in line 5. As one can see, the branch condition that could
make the missing branch be executed is res! = 0. However,
the branch condition can not be satisﬁable on the current
execution trace, and no conﬂict path condition can be found
by backtracking the current execution trace. To resolve the
conﬂict, we ﬁrst employ static data-ﬂow analysis to ﬁnd other
possible assignment for variable res (line 3) and the branch
that directly control the assignment (the false branch of the
if-statement in line 1). Based on the above observation, we
negate the branch in line 1 to resolve the conﬂict and generate
inputs that could reach the missing branch.
Note that there might be multiple assignments for variables
used in the missing branch. In order to control time consuming
and increase the opportunities of ﬁnding other assignments
for variables used in the missing branch, our algorithm only
backtracks to the direct predecessor of d1 on the dominator
sequence to see if it can resolve the conﬂict.
1
2
3
4
5
6
7
( i n p u t [ 0 ] =’a’ || input[1]= ’ b ’ )
/* missing branch */
e l s e { . . . }
i f
( r e s )
i f
e l s e
r e s = 0 ;
r e s = 1 ;
Listing 2. Example for backtracking.
IV. IMPLEMENTATION
1dVul is implemented in three components: a target branch
identiﬁer, a target-oriented input generator, and a vulnerability
veriﬁer.
The target branch identiﬁer is implemented on the basis of
state-of-the-art binary difﬁng tool BinDiff [3]. For different
functions identiﬁed by BinDiff in binary level, we further
apply the heuristic rules described in Section II-B to extract
target branches.
The target-oriented input generator is implemented based on
Driller. For the directed fuzzing engine, we utilize angr’s CG
and CFG generation API [19] to evaluate the distance between
each CFG node and the target branch. The distance is saved
into a distance ﬁle. The ﬁle is loaded into share memory as
a hash table when the directed fuzzing engine is invoked for
the ﬁrst time. Each entry of the hash table is 5 byte width, 4
bytes for the distance and the other 1 byte is saved for hit state.
During fuzzing, we use AFL’s QEMU mode [20] to instrument
and collect basic blocks executed by each test input. For each
basic block, we further evaluate the distance between it and the
target branch based on the method introduced in Section III-
A. The mininum distance is recorded as the distance between
the test input and the target. If the underconsidering test input
hits the target branch, it is saved into the resulting directory
and then quits the whole ToIG process. Otherwise, the input
is inserted into the fuzzing queue and its perf_score value is
set based on its distance to the target. The time threshold of
determining whether there the fuzzing procedure can generate
inputs with shorter distance is set to 3 minutes. For the directed
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply. 
symbolic execution engine, we compute a function closure that
could reach the target function by utilizing a depth-ﬁrst search
algorithm starting from the root node of CG and evaluate the
dominator sequence for the local target in the current function
using python’s networkx package. For certain infeasible paths
which we can’t ﬁnd the conﬂict constraint, angr’s Dynamic
Dependence Graph construction API is invoked to get all
related assignments to assist backtracking.
The vulnerability veriﬁer modiﬁes AFL to further check
whether a test input generated for the unpatched program can
reach the target branch in the patched program. Only test
inputs that pass the check are saved to the fuzzing queue.
V. EVALUATION
A. Experiment Setup
We evaluate 1dVul on applications from the qualifying event
of the DAPRA Cyber Grand Challenge (CGC) [21]. Applica-
tions in CGC contain a wide range of obstacles which are
specially created to improve the difﬁculties of binary analysis,
such as large input spaces and multiple loops [22], and are
not simply toy applications for hacking entertainment. For
fairness, we only consider the 126 single-object applications
from all 131 applications in CGC as Driller does in its paper
[10]. Each application is compiled to a pair of binaries, one of
which is the original version involving vulnerabilities and the
other is the patched version. For each application, the patched
binary is used to evaluate the efﬁciency of 1dVul’s ability
of ToIG, while the original one is used to evaluate 1dVul’s
ability of vulnerability veriﬁcation after ToIG. For each pair of
binaries, target branches are obtained by applying the heuristic
rules introduced in Section II on the result of binary difﬁng.
We ran our experiments on a cluster with 1 master and 24
slave machines. Each slave is with a 4-core CPU and 8GB
memory. A schedule process is running on the master node
to assign fuzzing tasks to each slave. And symbolic execution
tasks are assigned on demand. For each target branch, we set
a time limit of 8 hours for ToIG and 4 hours for veriﬁcation
if it is needed.
We evaluate 1dVul against the two well-known tools for
ToIG, Driller [10] and AFLGo [8]. As previously mentioned,
Driller combines fuzzing and concolic execution straightfor-
wardly without any directed strategy. We compare with Driller
to show the effectiveness of directed strategies both in the
fuzzing and symbolic execution component of 1dVul. AFLGo
is a target-directed fuzzing tool that utilizes power scheduling
and seed prioritization to gain better directedness as 1dVul-
Fuzzer. We compare 1dVul with AFLGo to show the necessity
of integrating symbolic execution in the solution of ToIG
problem and the efﬁciency of our directed fuzzing strategies
in 1dVul-Fuzzer. In fact, APEG is the most similar work with
this paper, which leverages symbolic execution to generate
patch-based exploits. Considering the tool is unavaliable, we
don’t compare 1dVul with it here. Both Driller and AFLGo
ran on the same machine cluster as 1dVul. Their time limit
thresholds set for each target are also 8 hours.
B. Overall Results
By applying the heuristic target branch identiﬁcation rule
mentioned in Section II-B to our dataset of 126 binaries, we
obtained a total of 209 target branches between the original
binaries and their patched binaries. The number of binary
programs and the number of target branches are not equal,
because some binaries have more than one vulnerability and
each vulnerability corresponds to a target branch, and there are
also some vulnerabilities involve more than one piece of patch
code. These branches are then used as the targets for ToIG.
Fig. 3 shows the number of target branches each approach has
successfully generated inputs for. As we can see, the three
competitors totally generated inputs for 131 targets within the
8-hour time limit for each target. Out of the 131 targets, 1dVul
successfully generated inputs for 130 targets, while Driller and
AFLGo reached 107 and 99 targets, respectively. For 91 out
of the 131 targets, all three competitors could successfully
generate inputs. There were also 17 targets that can only be
handled by 1dVul.
Fig. 3. Number of targets reached by 1dVul, Driller and AFLGo respectively.
Fig. 4 further compares the efﬁciency of the three competi-
tors. As we can see, for the 130 targets that 1dVul successfully
handled, it took 2526 seconds on average to generate input
for each target, while Driller and AFLGo took 4173 and
3420 seconds on average for each target they successfully
handled, respectively. For 91 out of the 131 targets that all
three competitors could reach, 1dVul took 954 seconds on
average for each target, while Driller and AFLGo took 3423
and 2113 seconds for each target on average, respectively,
meaning that 1dVul has achieved a 260% improvement over
Driller and a 120% improvement over AFLGo.
By applying the inputs generated by 1dVul to the original
binaries of the 130 targets, we conﬁrmed 96 vulnerabilities.
For 47 out of the 96 vulnerabilities, the inputs generated for
the corresponding target branches made the original binaries
crash. For the rest 49 vulnerabilities, by the generated inputs
as the seed inputs of fuzzing, we also discovered new inputs
that could make the original binaries crash.
612
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply. 
The above mentioned 10 branches that could only be
handled by 1dVul are shown in the ﬁrst two lines of Fig. 5. As
we can see, when applying our approach to them, the distances
to the target branches drop rapidly, meaning that our directed
fuzzing process converge to the targets more effectively than
the other two competitors. The 6 subgraphs shown in the third
line of Fig. 5 correspond to branches that Driller failed to deal
with but both 1dVul and AFLGo succeeded. As we can see,
the overall distance decreasing trend is that 1dVul converges
faster than AFLGo while Driller performs worst, showing
the importance of applying a guidance strategy to traditional
fuzzing. The 4 subgraphs shown in the last line are branches
that AFLGo failed to handle but 1dVul and Driller succeeded,
indicating to some extent that mutation order adjustment is
more signiﬁcant than mutation frequency modiﬁcation.
2) Effectiveness of Directed Symbolic Execution: There
are 22 branches that 1dVul requires invoking its directed
symbolic execution engine. As shown in TABLE II, among
the 22 branches, AFLGo failed to generate inputs for 18 of
them. By looking into the 18 branches, we found that 16
of them involve resolving complex checks on paths leading
to the targets, 2 of them are guarded by complex check.
The observation shows the necessity of invoking symbolic
execution. As we can see, Driller also failed in dealing with 8
branches, and among the 14 branches shown in that TABLE
II both 1dVul and Driller could successfully handle during
the time limit, 1dVul performed better than Driller for 13
branches. For 5 out of the 14 branches, 1dVul run 2X faster
than Driller. These observations further indicate the necessity
of directed symbolic execution.
We further discuss how the interaction strategy and the
directed symbolic execution strategy contribute to ToIG. Fig.
6 shows how the distance between the exploring path and
the target branch changes over time when applying 1dVul to
each of the branches. Since we evaluate the distances in each
15 minutes, only branches whose input generation take more
than 15 minutes are shown in the ﬁgure. To further show how
the interaction strategy help improve the efﬁciency of ToIG,
we highlight the moment of syncing inputs from our directed
symbolic execution engine to the directed fuzzing engine in
each subgraph with blue dot. As we can see, in almost all
cases, each time the two engine of 1dVul interact with each
other, the distance from the exploring paths to the target branch