Note Tuples are a work in progress and are not yet fully integrated into
the build of C# included with Visual Studio 2017. You must install an
additional package if you want to use them. The steps for doing this are
covered in the exercise.
Create and call a method that returns a tuple
1. Return to the Methods project and display the code for
MainPage.xaml.cs in the Code and Text Editor window.
2. Locate the divideValues and remainderValues methods and delete them.
3. In place of these two methods, add the following method:
Click here to view code image
private (int, int) divide(int leftHandSide, int rightHandSide)
{
}
This method returns a tuple containing two values. These values will
contain the results of dividing the leftHandSide variable by the
rightHandSide variable, and also the remainder.
Download from finelybook PI:EMAIL
135
4. In the body of the method, add the code shown below in bold. This code
performs the calculations and returns a tuple containing the results:
Click here to view code image
private (int, int) divide(int leftHandSide, int rightHandSide)
{
    expression.Text = $" / ";
    int division = leftHandSide / rightHandSide;
    int remainder = leftHandSide % rightHandSide;
    return (division, remainder);
}
Note Visual Studio will display red squiggles under the code that
defines the tuples. If you hover over this code you will see the
message “Predefined Type ‘System.ValueTuple’2’ is not defined
or imported.” This is fine. As explained before the exercise, you
have to add another package to the solution before Visual Studio
can use tuples. You will do this shortly.  
5. Scroll up to the calculateClick method, and locate the following code
near the end of the method:
Click here to view code image
else if (division.IsChecked.HasValue &&
division.IsChecked.Value)
{
    calculatedValue = divideValues(leftHandSide, rightHandSide);
    showResult(calculatedValue);
}
else if (remainder.IsChecked.HasValue &&
remainder.IsChecked.Value)
{
    calculatedValue = remainderValues(leftHandSide,
rightHandSide);
    showResult(calculatedValue);
}
6. Delete this code; the divideValues and remainderValues methods no
longer exist and have been replaced with the single divide method.
Download from finelybook PI:EMAIL
136
7. Add the following statements in place of the code you have just deleted:
Click here to view code image
else if (division.IsChecked.HasValue &&
division.IsChecked.Value)
{
    int division, remainder;
    (division, remainder) = divide(leftHandSide, rightHandSide);
    result.Text = $" remainder ";
}
This code calls the divide method. The values returned are displayed in
the results text box.
8. In Solution Explorer, double-click the MainPage.xaml file to display the
form in the Design View window.
9. Click the % Remainder radio button, and then press Delete to remove it
from the form. This radio button is no longer required.
10. In the Tools menu above the Design View window, point to NuGet
Package Manager, and then click Manage NuGet Packages for Solution.
The NuGet package manager enables you to install additional packages
and libraries for a project. This is how you install support for tuples.
11. In the Manage Packages for Solution window, click Browse.
12. In the Search box, type ValueTuple.
13. In the list of packages that appears, click System.ValueTuple (this
should be the first item in the list).
14. In the right-hand pane, check the Project check box, and then click
Install.
15. In the Preview Changes dialog box, click OK to confirm that you want
to install the package.
16. When the package has been installed, on the Debug menu, click Start
Debugging to build and run the application.
17. In the Left Operand text box, enter 59; in the Right Operand text box,
enter 13; click Division, and then click Calculate.
Download from finelybook PI:EMAIL
137
18. Verify that the Result text box contains the message “4 remainder 7”:
19. Return to Visual Studio. On the Debug menu, click Stop Debugging.
Applying scope
You create variables to hold values. You can create variables at various
points in your applications. For example, the calculateClick method in the
Methods project creates an int variable called calculatedValue and assigns it
an initial value of zero, like this:
Click here to view code image
private void calculateClick(object sender, RoutedEventArgs e)
{
    int calculatedValue = 0;
    ...
}
This variable comes into existence at the point where it is defined, and
subsequent statements in the calculateClick method can then use this
variable. This is an important point: a variable can be used only after it has
Download from finelybook PI:EMAIL
138
been created. When the method has finished, this variable disappears and
cannot be used elsewhere.
When a variable can be accessed at a particular location in a program, the
variable is said to be in scope at that location. The calculatedValue variable
has method scope; it can be accessed throughout the calculateClick method
but not outside that method. You can also define variables with different
scope; for example, you can define a variable outside a method but within a
class, and this variable can be accessed by any method within that class. Such
a variable is said to have class scope.
To put it another way, the scope of a variable is simply the region of the
program in which that variable is usable. Scope applies to methods as well as
variables. The scope of an identifier (of a variable or method) is linked to the
location of the declaration that introduces the identifier in the program, as
you will learn next.
Defining local scope
The opening and closing braces that form the body of a method define the
scope of the method. Any variables you declare inside the body of a method
are scoped to that method; they disappear when the method ends and can be
accessed only by code running in that method. These variables are called
local variables because they are local to the method in which they are
declared; they are not in scope in any other method.
The scope of local variables means that you cannot use them to share
information between methods. Consider this example:
Click here to view code image
class Example
{
    void firstMethod()
    {
        int myVar;
        ...
    }
    void anotherMethod()
    {
        myVar = 42; // error - variable not in scope
        ...
    }
Download from finelybook PI:EMAIL
139
}
This code fails to compile because anotherMethod is trying to use the
variable myVar, which is not in scope. The variable myVar is available only
to statements in firstMethod that occur after the line of code that declares
myVar.
Defining class scope
The opening and closing braces that form the body of a class define the scope
of that class. Any variables you declare within the body of a class (but not
within a method) are scoped to that class. The proper C# term for a variable
defined by a class is field. As mentioned earlier, in contrast with local
variables, you can use fields to share information between methods. Here is
an example:
Click here to view code image
class Example
{
    void firstMethod()
    {
        myField = 42; // ok
        ...
    }
    void anotherMethod()
    {
        myField++; // ok
        ...
    }
    int myField = 0;
}
The variable myField is defined in the class but outside the methods
firstMethod and anotherMethod. Therefore, myField has class scope and is
available for use by all methods in that class.
There is one other point to notice about this example. In a method, you
must declare a variable before you can use it. Fields are a little different. A
method can use a field before the statement that defines the field; the
compiler sorts out the details for you.
Download from finelybook PI:EMAIL
140
Overloading methods
If two identifiers have the same name and are declared in the same scope,
they are said to be overloaded. Often an overloaded identifier is a bug that is
trapped as a compile-time error. For example, if you declare two local
variables with the same name in the same method, the compiler reports an
error. Similarly, if you declare two fields with the same name in the same
class or two identical methods in the same class, you also get a compile-time
error. This fact might seem hardly worth mentioning given that everything so
far has turned out to be a compile-time error. However, there is a way that
you can overload an identifier for a method that is both useful and important.
Consider the WriteLine method of the Console class. You have already
used this method for writing a string to the screen. However, when you type
WriteLine in the Code and Text Editor window when writing C# code, notice
that Microsoft IntelliSense gives you 19 different options! Each version of
the WriteLine method takes a different set of parameters. One version takes
no parameters and simply outputs a blank line. Another version takes a bool
parameter and outputs a string representation of its value (True or False). Yet
another implementation takes a decimal parameter and outputs it as a string,
and so on. At compile time, the compiler looks at the types of the arguments
you are passing in and then arranges for your application to call the version
of the method that has a matching set of parameters. Here is an example:
Click here to view code image
static void Main()
{
    Console.WriteLine("The answer is ");
    Console.WriteLine(42);
}
Overloading is primarily useful when you need to perform the same
operation on different data types or varying groups of information. You can
overload a method when the different implementations have different sets of
parameters; that is, when they have the same name but a different number of
parameters or when the types of the parameters differ. When you call a
method, you supply a comma-separated list of arguments, and the number
and type of the arguments are used by the compiler to select one of the
overloaded methods. However, keep in mind that although you can overload
the parameters of a method, you can’t overload the return type of a method.
Download from finelybook PI:EMAIL
141
In other words, you can’t declare two methods with the same name that differ
only in their return type. (The compiler is clever, but not that clever.)
Writing methods
In the following exercises, you’ll create a method that calculates how much a
consultant would charge for a given number of consultancy days at a fixed
daily rate. You will start by developing the logic for the application and then
use the Generate Method Stub Wizard to help you write the methods that are
used by this logic. Next, you’ll run these methods in a console application to
get a feel for the program. Finally, you’ll use the Visual Studio 2017
debugger to step into and out of the method calls as they run.
Develop the logic for the application
1. Using Visual Studio 2017, open the DailyRate project, which is in the
\Microsoft Press\VCSBS\Chapter 3\DailyRate folder in your Documents
folder.
2. In Solution Explorer, in the DailyRate project, double-click the file
Program.cs to display the code for the program in the Code and Text
Editor window.
This program is simply a test harness for you to try out your code. When
the application starts running, it calls the run method. You add to the run
method the code that you want to try. (The way in which the method is
called requires an understanding of classes, which you look at in
Chapter 7.)
3. Add the following statements shown in bold to the body of the run
method, between the opening and closing braces:
Click here to view code image
void run()
{
    double dailyRate = readDouble("Enter your daily rate: ");
    int noOfDays = readInt("Enter the number of days: ");
    writeFee(calculateFee(dailyRate, noOfDays));
}
The block of code you have just added to the run method calls the
Download from finelybook PI:EMAIL
142
readDouble method (which you will write shortly) to ask the user for the
daily rate for the consultant. The next statement calls the readInt method
(which you will also write) to obtain the number of days. Finally, the
writeFee method (to be written) is called to display the results on the
screen. Notice that the value passed to writeFee is the value returned by
the calculateFee method (the last one you will need to write), which
takes the daily rate and the number of days and calculates the total fee
payable.
Note You have not yet written the readDouble, readInt, writeFee, and
calculateFee methods, so IntelliSense does not display these methods
when you type this code. Do not try to build the application yet, because
it will fail.
Write the methods by using the Generate Method Stub Wizard
1. In the Code and Text Editor window, in the run method, right-click the
readDouble method call.
A shortcut menu appears that contains useful commands for generating
and editing code, as shown here:
Download from finelybook PI:EMAIL
143
2. On the shortcut menu, click Quick Actions and Refactorings.
Visual Studio verifies that the readDouble method does not exist and
displays a wizard that enables you to generate a stub for this method.
Visual Studio examines the call to the readDouble method, ascertains
the type of its parameters and return value, and suggests a default
implementation, as shown in the following image:
Download from finelybook PI:EMAIL
144
3. Click Generate Method ‘Program.readDouble’. Visual Studio adds the
following method to your code:
Click here to view code image
private double readDouble(string v)
{
    throw new NotImplementedException();
}
The new method is created with the private qualifier, which is described
in Chapter 7. The body of the method currently just throws a
NotImplementedException exception. (Exceptions are described in
Chapter 6.) You replace the body with your own code in the next step.
4. Delete the throw new NotImplementedException(); statement from the
readDouble method and replace it with the following lines of code
shown in bold:
Click here to view code image
Download from finelybook PI:EMAIL
145
private double readDouble(string v)
{
    Console.Write(v);
    string line = Console.ReadLine();
    return double.Parse(line);
}
This block of code displays the string in variable v to the screen. This
variable is the string parameter passed in when the method is called; it
contains the message prompting the user to type in the daily rate.
Note The Console.Write method is similar to the
Console.WriteLine statement that you have used in earlier
exercises, except that it does not output a newline character after
the message.
The user types a value, which is read into a string using the ReadLine
method and converted to a double using the double.Parse method. The
result is passed back as the return value of the method call.
Note The ReadLine method is the companion method to
WriteLine; it reads user input from the keyboard, finishing when
the user presses the Enter key. The text typed by the user is passed
back as the return value. The text is returned as a string value.
5. In the run method, right-click the call to the readInt method, click Quick
Actions and Refactorings, and then click Generate Method
‘Program.readInt.’
The readInt method is generated like this:
Click here to view code image
Download from finelybook PI:EMAIL
146
private int readInt(string v)
{
    throw new NotImplementedException();
}
6. Replace the throw new NotImplementedException(); statement in the
body of the readInt method with the following code shown in bold:
Click here to view code image
private int readInt(string v)
{
    Console.Write(v);
    string line = Console.ReadLine();
    return int.Parse(line);
}
This block of code is similar to the code for the readDouble method.
The only difference is that the method returns an int value, so the string
typed by the user is converted to a number using the int.Parse method.
7. Right-click the call to the calculateFee method in the run method, click
Quick Actions and Refactorings, and then click Generate Method
‘Program.calculateFee.’
The calculateFee method is generated like this:
Click here to view code image
private object calculateFee(double dailyRate, int noOfDays)
{
    throw new NotImplementedException();
}
Notice in this case that Visual Studio uses the names of the arguments
passed in to generate names for the parameters. (You can, of course,
change the parameter names if they are not suitable.) What is more
intriguing is the type returned by the method, which is object. Visual
Studio is unable to determine exactly which type of value should be
returned by the method from the context in which it is called. The object
type just means a “thing,” and you should change it to the type you
require when you add the code to the method. Chapter 7 covers the
object type in greater detail.
8. Change the definition of the calculateFee method so that it returns a
double, as shown in bold type here:
Download from finelybook PI:EMAIL
147
Click here to view code image
private double calculateFee(double dailyRate, int noOfDays)
{
    throw new NotImplementedException();
}
9. Replace the body of the calculateFee method and change it to an
expression-bodied method with the following expression shown in bold;
remove the curly braces and use => to indicate the expression that
defines the body of the method. This statement calculates the fee
payable by multiplying the two parameters together:
Click here to view code image
private double calculateFee(double dailyRate, int noOfDays) =>
dailyRate * noOfDays;
10. Right-click the call to the writeFee method in the run method, click
Quick Actions and Refactorings, and then click Generate Method
‘Program.writeFee.’
Notice that Visual Studio uses the definition of the writeFee method to
work out that its parameter should be a double. Also, the method call
does not use a return value, so the type of the method is void:
Click here to view code image
private void writeFee(double v)
{
    ...
}
Tip If you feel sufficiently comfortable with the syntax, you can
also write methods by typing them directly into the Code and Text
Editor window. You do not always have to use the Generate menu
option.
11. Replace the code in the body of the writeFee method with the following
statement, which calculates the fee and adds a 10 percent commission
Download from finelybook PI:EMAIL
148
before displaying the result. Again, notice that this is now an expression-
bodied method:
Click here to view code image
private void writeFee(double v) => Console.WriteLine($"The
consultant's fee is: {v * 1.1}");
12. On the Build menu, click Build Solution.
Refactoring code
A very useful feature of Visual Studio 2017 is the ability to refactor code.
Occasionally, you will find yourself writing the same (or similar) code in
more than one place in an application. When this occurs, highlight and right-
click the block of code you have just typed, click Quick Actions and
Refactoring, and then click Extract Method. The selected code is moved to a
new method named NewMethod. The Extract Method Wizard is also able to
determine whether the method should take any parameters and return a value.
After the method has been generated, you should change its name (by
overtyping) to something meaningful and also change the statement that has
been generated to call this method with the new name.
Test the program
1. On the Debug menu, click Start Without Debugging.
Visual Studio 2017 builds the program and then runs it. A console
window appears.
2. At the Enter Your Daily Rate prompt, type 525 and then press Enter.
3. At the Enter The Number of Days prompt, type 17 and then press Enter.
The program writes the following message to the console window:
The consultant's fee is: 9817.5
4. Press the Enter key to close the application and return to Visual Studio
2017.
In the next exercise, you’ll use the Visual Studio 2017 debugger to run
your program in slow motion. You’ll see when each method is called (which
Download from finelybook PI:EMAIL
149
is referred to as stepping into the method) and then see how each return
statement transfers control back to the caller (also known as stepping out of
the method). While you are stepping into and out of methods, you can use the
tools on the Debug toolbar. However, the same commands are also available