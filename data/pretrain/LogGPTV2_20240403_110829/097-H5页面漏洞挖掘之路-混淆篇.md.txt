⻚⾯漏洞挖掘之路 混
H5 -
淆篇 安全
- SecPulse.COM |
脉搏
“ 复制代码混淆过后：
前⾔
针对上次我们提交漏洞之后，我们再次查看 JS 代码，定
位加密函数和解密函数的位置，发现已经不是⾚裸裸没有
任何防护，⽽是已经进⾏的了 JS 混淆，接下来我们针对
遇到 JS 混淆后，我们该如何破解 JS 混淆后的代码进⾏
加解密，继续进⾏渗透测试。笔者在这⾥提供⼀个思路和
⽅法。
前置知识
⾸先我们先了解下代码混淆的具体原理是什么？其实很简
单，就是去除代码中尽可能多的有意义的信息，⽐如注
释、换⾏、空格、代码负号、变量重命名、属性重命名
（允许的情况下）、⽆⽤代码的移除等等。因为代码是公
开的，我们必须承认没有任何⼀种算法可以完全不被破
解，所以，我们只能尽可能增加攻击者阅读代码的成本。
我将混淆类型分为两类：
变量名混淆
将变量名混淆成阅读⽐较难阅读的字符，增加代码阅读难
度，⽽现在⼤部分⼚商的混淆，都会将其混淆成 16 进制
变量名。
效果如下：
`var test = 'helloworld';`
混淆后：
`var _0x7deb = 'helloworld';`
常量提取
将 JS 中的常量提取到数组中，调⽤的时候⽤数组下标的
⽅式调⽤，这样的话直接读懂基本不可能了，要么反
AST 处理下，要么⼀步⼀步调试，⼯作量⼤增。
以上⾯的代码为例：
`var test = 'helloworld';`
复制代码混淆过后：
常量混淆
每个⽂件开头会有⼀个很⻓的字符数组，然后会有⼀段代
码对这个数组进⾏加⼯，然后还有⼀个函数接收⼀个或两
个参数输出⼀个字符串，这个字符串更接近原始的代码。
将常量进⾏加密处理，上⾯的代码中，虽然已经是混淆过
后的代码了，但是 helloworld 字符串还是以明⽂的形式
出现在代码中，例如将关键字进⾏ Unicode16 进制编
码。如下：
`var test = 'helloworld';`
结合常量提取得到混淆结果：
案例
第⼀部分: 变量名称存储数组
这⾥存储了⼀些在函数中⽤到的变量和字符串。
第⼆部分 数组处理函数
第三部分 数组字符串处理函数
// 这个是数组内容解码的函数, 实际上第⼆个参数是没有⽤到的
var _0x523d = function (_0x4c10d0, _0x393bf7) {
_0x4c10d0 = _0x4c10d0 - 0; // 这⾥第⼀个参数是通过字符串
var _0x70d87b = _0x2ec2[_0x4c10d0]; // 这⾥ _0x70d87b
// 接下来判断有没有进⾏过初始化操作, 如果没有的话, 先初始化
if (_0x523d['CuFQcU'] === undefined) {
(function () {
var _0x5b57a4 = function () {
var _0x29e588;
try {
_0x29e588 = Function('return (function() ' + '{}.
} catch (_0x4956c9) {
_0x29e588 = window;
}
return _0x29e588;
};
var _0x2b121a = _0x5b57a4(); // 这⾥实际上返回的是 Wind
var _0x6c99b9 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi
// 下⾯这个是判断Window有没有atob这个函数, 如果没有的话⽣成
_0x2b121a['atob'] || (_0x2b121a['atob'] = function (
var _0x901f5e = String(_0x13f6f4) ['replace'](/=+$
for (var _0x240979 = 0, _0x43e3e8, _0x42ec25, _0x6e
_0x42ec25 = _0x6c99b9['indexOf'](_0x42ec25);
}
return _0x1c0a86;
});
}());
_0x523d['ZEesoG'] = function (_0x1de802) {
var _0x216ff1 = atob(_0x1de802);
var _0x42331f = [
];
for (var _0x3a392f = 0, _0x2319db = _0x216ff1['le
_0x42331f += '%' + ('00' + _0x216ff1['charCodeA
}
return decodeURIComponent(_0x42331f);
};
// 到这⾥完成初始化操作, 置CuFQcU为true, 添加VgXLDn属性
_0x523d['VgXLDn'] = {};
_0x523d['CuFQcU'] = !![];
}
// 后⾯这段是先判断之前有没有对传⼊的参数进⾏解密过, 如果解密
var _0x22ee7f = _0x523d['VgXLDn'][_0x4c10d0];
if (_0x22ee7f === undefined) {
_0x70d87b = _0x523d['ZEesoG'](_0x70d87b);
_0x523d['VgXLDn'][_0x4c10d0] = _0x70d87b;
} else {
_0x70d87b = _0x22ee7f;
}
return _0x70d87b;
};
第四部分 加解密函数
function encrypt(_0xd0a5dd) {
var _0x2d682e = CryptoJS[_0x523d('0x0')][_0x523d('0x1
var _0x2d053c = CryptoJS[_0x523d('0x0')][_0x523d('0x1
var _0xa5c781 = CryptoJS[_0x523d('0x0')][_0x523d('0x1
var _0x17d14e = CryptoJS[_0x523d('0x5')][_0x523d('0x6
'iv': _0x2d053c,
'mode': CryptoJS[_0x523d('0x7')][_0x523d('0x8')],
'padding': CryptoJS[_0x523d('0x9')][_0x523d('0xa')]
});
return _0x17d14e[_0x523d('0xb')]();
}
function decrypt(_0x363945) {
var _0x41412c = CryptoJS[_0x523d('0x0')][_0x523d('0x
var _0xf43728 = CryptoJS[_0x523d('0x0')][_0x523d('0x
var _0x2f2c26 = CryptoJS[_0x523d('0x5')][_0x523d('0x
'iv': _0xf43728,
'mode': CryptoJS[_0x523d('0x7')][_0x523d('0x8')],
'padding': CryptoJS[_0x523d('0x9')][_0x523d('0xa')]
});
return CryptoJS[_0x523d('0x0')][_0x523d('0x1')][_0x5
}
当我们分析整个混淆后的代码后, 我们可以⼿动断点调试,
来看看具体的解密之后每参数是什么。我们⾸先将整个混
淆后的 js 代码 copy 下来，定义 main() 函数，调⽤加密
encrypt 和 decrypt 解密这两个函数，在浏览器下调试运
⾏。
代码完美运⾏，在第三部分数组字符串处理函数的位置我
们⼿动断点 F10 进⾏调试。
密钥 key 成功拿到：
向量 IV 成功拿到：
得知加密算法为 AES：
AES 加密算法使⽤的模式：mode=CBC
AES 加密算法使⽤的填充⽅式：Pkcs7
⾄此混淆后的加密算法已破解，拿到加密算法的明⽂，我
们可以编写 python 加解密脚本, 加解密结果⼀致。
总结
JS 混淆在安全对抗中必不可少，⼀是对保护前端⻚⾯的
代码逻辑，⼆是对前端登陆的算法密钥和向量 IV 进⾏保
护。⽽我们通过反混淆还原代码或者直接调⽤混淆后的
JS 代码进⾏调试，获取密钥和向量 IV，从⽽达到解密密
⽂，篡改数据包继续进⾏漏洞挖掘。
参考
https://www.52pojie.cn/thread-1104122-1-1.html#2985657
全⽂完
本⽂由 简悦 SimpRead 优化，⽤以提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看详细说明