(crash-prone) 
 Referring  to  figure  4,  the  order  latencies  stay 
nearly  constant  for  large  values  of  the  batching 
intervals, indicating that the system operates in steady-
state  (i.e.,  in  light  or  normal  load  conditions).  They 
stay constant at 10 ms for CT, but increase drastically 
for BFT and SC when the batching interval decreases 
below a threshold, pushing the system operation into a 
‘saturation’ 
are 
represented  in  log  scale  along  y-axis.)  Further,  the 
threshold  for  BFT  is  larger  than  that  for  SC.  This 
indicates that BFT has a tendency to push the system 
into  saturation  earlier  due  to  the  large  number  of 
latencies 
region. 
(Note 
that 
messages it places in the system and the cryptographic 
operations performed on each message.  For the same 
reason,  the  steady-state  latency  for  BFT  is  always 
more than that for SC. However, it is interesting to see 
that the differences in steady-state latencies of SC and 
BFT  increase  considerably  when  crypto-technique  is 
changed  from  RSA  (Figures  4a,  4b)  to  DSA  scheme 
(Figure  4c).  For  example,  RSA  with  key  size  1024 
gives  a  difference  of  21ms  between  steady-state 
latencies of SC and BFT while the difference is 37ms 
when  DSA  scheme  is  used  for  authentication.  The 
explanation is as follows. In both the schemes the time 
taken  to  sign  a  given  message  is  similar;  however, 
signature  verification  is  much  faster  in  the  RSA 
scheme compared to DSA.  Furthermore, in a typical n 
to  n  message  exchange,  each  process  signs  one 
message  while  it  needs  to  verify  at  least  (n-f) 
messages.  Therefore,  there  is  a  more  pronounced 
slowing  down  of  BFT  due  to  the  slowness  of  DSA 
verification.  This  suggests  that  DSA  is  generally  not 
suited for Byzantine order protocols.  
thresholds  are  encountered  at 
As we increase f to 3 (not shown here due to space 
constraints), we observe similar trends, except that the 
saturation 
larger 
batching_intervals,  and  the  order  latencies  in  the 
steady  state  increase.  These  observations  can  be 
attributed  to  the  fact  that  as  n  increases,  each 
individual  process  receives  more  messages  which 
need to be authenticated and processed. 
Throughput: Throughput was observed to be low for 
larger  batching  intervals  for  all  the  three  crypto-
techniques  with  f=2.  Figure  5  shows  that  with 
decreasing  batching  intervals,  throughput  increases 
until  the  system  reaches  the  saturation  point  after 
which  it  starts  dropping  down.  This  behavior  was 
observed for both SC and BFT whereas the drop could 
not  be  observed  for  CT  for  the  range  of  batching 
intervals used. 
Observing  the  behavior  of  the  three  protocols  for 
the 
the  crypto-technique,  we  confirm 
any  of 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:38 UTC from IEEE Xplore.  Restrictions apply. 
Figure 5: Throughput for f = 2 using (a) MD5 with RSA key size 1024 (b) MD5 with RSA key size 
1536 (c)  SHA1 with DSA key size 1024. 
conclusion  drawn  about  BFT  above  that  it  causes 
system  saturation  earlier  than  the  other  two  and 
throughput starts dropping immediately after entering 
saturation  point  which  is  found  to  stay  stable  for  a 
while in case of SC. Here also saturation was observed 
to  occur  earlier  with  more  expensive  crypto-
techniques. 
Fail-Over  Latency:  Experiments  were  run  to  assess 
the effect of occurrences of faults on the performance 
of  SC  and  SCR.  A  single  value-domain  fault  was 
injected in the system and the duration for switching 
between  the  coordinators  was  measured  for  all  three 
cryptographic  schemes.  It  can  be  observed  that  the 
fail-over  latency  increases  linearly  with  backlog  size 
which was varied from 1 to 5 KB.  
Figure 6: Fail-Over Latency in SC and SCR for 
f = 2 using all three crypto techniques
6. Related work and Conclusions 
 The  FLP  impossibility  is  typically  circumvented 
by  making  synchrony  assumptions  (e.g.,  Rampart 
[15],  SecureRing  [8],  TTCB  [21],  ITUA  [16]), 
through  quorum  systems  [12]  or  randomisation  [3]. 
We note that some of the systems in the first category, 
like our protocol with assumption 3(a)(i), can violate 
safety if strong synchrony assumptions they make are 
not  met,  where  safety  is  the  property  that  non-faulty 
processes  do  not  order  requests  differently.  On  the 
other  hand,  the  BFT  [2]  and  our  extended  protocol 
with  assumption  3(b)(i),  require  weak  synchrony 
assumptions  only  to  guarantee  liveness.  Randomised 
protocols  make  no  synchrony  assumptions  and 
liveness  is  guaranteed  in  probabilistic  terms  to  be  a 
certainty with the passage of time. Our protocols also 
make  no  synchrony  assumptions  between  unpaired 
processes  but  offer  deterministic  liveness  guarantees. 
(Assumptions  3(a)(i)  and  3(b)(i)  are  concerned  only 
with the paired processes.) 
 On  the  optimistic  order  protocols,  some  of  the 
earlier  work  was  done  by  Pedone  and  Schiper  [14], 
which exploits not just the absence of failures but also 
the  possibility  of  multicasts  over  a  LAN  being 
naturally  received  in  the  same  order  (spontaneous 
total-order).  Following  BFT  [2],  several  optimistic 
Byzantine 
fault-tolerant  order  protocols  were 
published  (e.g.,  [23,  10,  17]),  but  none  of  them  has 
been  experimentally  evaluated  to  the  best  of  our 
knowledge. These protocols have the following design 
flavour: they are coordinator based in the normal part 
and  when  optimistic  conditions  are  deemed  not  to 
hold,  a  (randomized)  consensus  protocol  is  executed 
to remedy the situation.  
We  have  here  developed  an  optimistic  Byzantine 
fault-Tolerant  order  protocol  that  is  demonstrated  to 
perform better than a protocol best-known for its fail-
free performance and practicability. We have achieved 
this by carefully applying a technique long-known for 
building  robust  process  abstractions  [19]  that  are 
easier to program with; abstract processes with signal-
on-crash property, are deployed to act as coordinators 
for order protocols. Consequently, not only the order 
latency  and  the  message  overhead  fall  but  also  the 
protocol  becomes  easier 
implement  and  no 
synchrony  assumptions  need  to  be  made  among  the 
(un-paired) processes that do not have to cooperate to 
build  the  signal-on-crash  abstraction.  These  benefits 
come  at  a  cost:  paired-up  processes  cannot  fail 
simultaneously.  We  meet 
requirement  by 
assuming  that  if  both  processes  fail,  the  failure 
occurrences  are  separated  by  a  threshold  interval 
(assumption 3(a)(ii)) or that at least one process never 
this 
to 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:38 UTC from IEEE Xplore.  Restrictions apply. 
fails (assumption 3(b)(ii)). We have argued that both 
the  assumptions  require  implementation  of  measures 
that  assure  failure-independence, 
is 
realistic,  and  that  a  robust  realisation  of  3(b)(ii) 
involves  using  more  than  two  processes  to  build  the 
signal-on-crash abstraction. The latter in turn calls for 
making a trade-off between the (falling) hardware cost 
and the (much desired) performance benefits. 
that  3(a)(ii) 
is 
from 
the  EPSRC  platform  grant 
supported 
Acknowledgements:  We  thank  Paul  Murray  for  his 
this  paper.  Financial 
meticulous  shepherding  of 
is 
support 
acknowledged.  Qurat-ul-Ain 
by 
Commonwealth Scholarship Commission for her PhD. 
7. References 
[1]  F.  Cristian  and  C.  Fetzer,  "The  Timed  Asynchronous 
Distributed  System  Model",  In  IEEE  Transactions  on 
Parallel and Distributed Systems, Vol. 10 (6), June 1999, pp. 
642-57. 
[2]  M.  Castro  and  B.  Liskov,  “Practical  Byzantine  Fault 
Tolerance”, In Proceedings of the 3rd ACM Symposium on 
Operating  Systems  Design  and  Implementation  (OSDI), 
February 1999, pp. 173-186. 
[3] C. Cachin, K. Kursawe and V. Shoup, “Random Oracles 
in  Constantinople:  Practical  Asynchronous  Byzantine 
Agreement Using Cryptography”, Proceedings of 19th ACM 
Symposium  on  Principles  of  Distributed  Computing,  2000, 
pp. 123-132. 
[4] C. Dwork , N. Lynch , L. Stockmeyer, “Consensus in the 
presence  of  partial  synchrony”,  Journal  of  the  ACM 
(JACM), v.35 n.2, p.288-323, April 1988.  
[5]  M.J.  Fischer,  N.A.  Lynch,  and  M.S.  Paterson, 
“Impossibility  of  Distributed  Consensus  with  one  faulty 
Process,” Journal of the ACM, Vol. 32, No. 2, pp. 374-382, 
April 1985. 
[6] S. Haddad and F. Nguilla, “Combining Different Failure 
Detectors for Solving a Large-Scale Consensus Problem” In 
the proceedings of the  14th ISCA-CATA Cancun, Mexico, 
April 1999. 
[7] F. Junqueira and K. Marzullo, “The virtue of dependent 
failures in multi-site systems”, In Proceedings of the IEEE 
Workshop  on  Hot  Topics 
in  System  Dependability, 
Supplemental  volume  of  DSN’05,  pages  242–247,  June 
2005.  
[8] K. P. Kihlstrom, L. E. Moser, P. M. Melliar-Smith, “The 
SecureRing Protocols for Securing Group Communication”, 
In Proc. of the 31st Annual Hawaii International Conference 
on System Sciences (HICSS), pp. 317-26, Jan. 1998. 
[9]  Kopetz  H.  Real-Time  Systems:  Design  Principles  for 
Distributed  Embedded  Applications.  Kluwer  Academic 
Publishers, 1997, ISBN 0-7923-9894-7. 
[10]  K  Kursawe  and  V  Shoup,  “Optimistic  Asynchronous 
Atomic  Broadcast”,  in  the  Proceedings  of  International 
Colloqium  on  Automata,  Languages  and  Programming 
(ICALP05)  (L  Caires,  G.F.  Italiano,  L.  Monteiro,  Eds.) 
pp. 
2005. 
3580, 
Springer, 
204-215, 
LNCS 
(http://www.shoup.net/papers/ks.pdf). 
[11]  M.  G.  Merideth,  A.  Iyengar,  T.  Mikalsen,  S.  Tai,  I. 
Rouvellou,  P.  Narasimhan,  “Thema:  Byzantine-Fault-
Tolerant  Middleware  for  Web-Service  Applications”,  IEEE 
Symposium  on  Reliable  Distributed Systems, Orlando, FL, 
2005.  
[12]  D.  Malkhi  and  M.  Reiter,  “Byzantine  Quorum 
Systems”, Distributed Computing, 11(4), pp.203-213, 1998. 
[13]  D.  Mpoeleng,  P.D.  Ezhilchelvan  and  N.A.  Speirs, 
“From  Crash-tolerance 
to  Authenticated  Byzantine 
Tolerance: a Structured Approach, the costs and Benefits”, 
Proc. 2003 International Conference on Dependable Systems 
and Networks (DSN2003), June 2003, pp.227-236. 
[14]  F.  Pedone  and  A  Schiper,  “Optimistic  Atomic 
in  Theoretical 
Broadcast:  A  Pragmatic  View-point” 
Computer  Science  (Elsevier),  Vol.  291  (1),  pp.  79-101, 
2003. 
[15]  M.  Reiter,  “The  Rampart  Toolkit  for  Building  High-
Integrity Services”. In Theory and practice of in Distributed 
Systems (LNCS 938), pp. 99 -110, Springer-Verlag, 1995. 
[16] H. V. Ramasamy, P. Pandey, J. Lyons, M. Cukier, and 
W. H. Sanders, “Quantifying the Cost of Providing Intrusion 
Tolerance  in  Group  Communication  Systems”  Proceedings 
of the International Conference on Dependable Systems and 
Networks (DSN-2002), Washington, DC, June 23-26, 2002, 
pp. 229-238. 
[17]  H V.  Ramasamy  and  Christian  Cachin,  “Parsimonious 
asynchronous Byzantine-fault-tolerant atomic broadcast”, In 
Proc.  OPODIS  2005,  9th  Intl.  Conference  on  Principles  of 
Distributed Systems, December 2005.  
[18] F. Schneider and S. Toueg, “Replication Management 
Using the State-Machine Approach”, in Distributed Systems, 
Second Edition, (Ed. S Mullender), Addison-Wesley, ISBN 
0-201-62427-3, pp. 169-198. 
[19] R. Schlichting and F. Schneider, “Fail-Stop Processors: 
An  Approach 
to  Designing  Fault-Tolerant  Computing 
Systems”,  ACM  Transactions  on  Computer  Systems,  Vol. 
1(3), pp. 222-238, August 1983. 
[20]  G  Tsudik,  “Message  Authentication  Using  one-way 
Hash Functions”, ACM Computer Communications Review, 
22(5), 1992. 
[21] P. Verissimo and A. Casimiro, “The Timely Computing 
Base  Model  and  Architecture”,  IEEE  Transaction  on 
Computing Systems, 51(8), pp. 916-930, 2002. 
[22] J.Yin, J.-P. Martin, A. Venkataramani, L. Alvisi, and M 
Dahlin,  “Seperating  Agreement 
for 
Byzantine Tolerant Services”, In proceedings of SOSP, pp. 
253-267, 2003. 
[23]  K.  Kursawe,  “Optimistic  Byzantine  Agreement”,  In 
Proceedings of the 21st Symposium on Reliable Distributed 
Systems (SRDS 2002), October 2002, pp 262-267. 
from  Execution 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:38 UTC from IEEE Xplore.  Restrictions apply.