medium using the default sensing window of 2 ms. We
then make the same sender transmit a stream of synchro-
nization packets while the receiver senses these packets
using a 2 ms window. For both cases, we compute the
fractional occupancy in each sensing window. We repeat
the experiment with multiple node pairs and compare the
fractional occupancy during back-to-back packets and
synchronization packets.
Result 2. Fig. 10 compares the CDF of the fractional
occupancy during a synchronization packet and the CDF
of the fractional occupancy when the sensing window in-
cludes back-to-back packets separated by a DIFS,8 taken
over 100K synchronization packets and 100K DIFS oc-
currences. The ﬁgure shows that the two CDFs are suf-
ﬁciently separate making it unlikely that TEP confuses
back-to-back packets as a synchronization packet.
8Sometimes the DIFS may be split between two consecutive sensing
windows, in this case we include in the CDF whichever of these two
window has the lower fractional energy. This is because it is sufﬁcient
that one sensing window shows a relatively low fractional occupancy to
declare the end of energy burst.
14
Figure 12: Number of attempts required for TEP to successfully
pair in the presence of an interfering Bluetooth device.
7.4 Performance with Non-802.11 Trafﬁc
Finally, while 802.11 nodes comply with the rules of CTS-
to-SELF, and abstain from transmitting during TEA’s ON-
OFF slots, other devices may continue to transmit, caus-
ing TEA nodes to detect tampering. Fig. 11 shows a
collision between a TEA and a Bluetooth transmission
from an Android phone as captured by a USRP2. Blue-
tooth devices do not typically decode 802.11 CTS-to-
SELF packets, and hence, as shown in the ﬁgure, end up
transmitting during the ON-OFF slots. In this section we
examine the impact of a nearby Bluetooth device on TEA.
Experiment. We place a TEA sender in location 1
(Fig. 5) and make other nodes act as TEA receivers. We
co-locate a Bluetooth device next to the TEA sender. The
sender periodically sends an announcement. The receivers
ﬁrst detect the synchronization packets, decode the CTS-
to-SELF, and then try to verify the slots. If the receiver
can successfully verify, it declares success. Otherwise, it
attempts to verify the slots in the next time period.
Results. Fig. 12 shows the CDF of the number of
required attempts before a TEA receiver succeeds in re-
ceiving a correct TEA. Bluetooth transceivers operate on
79 bands in 2402-2480 MHz and frequently jump across
these bands. Thus, the probability that they interfere with
TEA in successive runs of the protocol is relatively low.
The ﬁgure shows that, even in the presence of Bluetooth
devices which cannot decode a CTS-to-SELF, a TEA re-
ceiver requires 1.4 attempts on average, and 4 attempts
maximum, before it receives the announcement.
8 CONCLUSION
This paper presented Tamper-Evident Pairing (TEP), the
ﬁrst wireless pairing protocol that works in-band, with
no pre-shared keys, and protects against MITM attacks.
TEP relies on a Tamper-Evident Announcement (TEA)
mechanism, which guarantees that an adversary cannot
tamper with either the payload in a transmitted message,
or with the fact that the message was sent. We formally
proved that the design protects from MITM attacks. Fur-
ther, we implemented a prototype of TEA and TEP for the
802.11 wireless protocol using off-the-shelf WiFi devices,
and showed that TEP is practical on real-world 802.11
networks and devices.
ACKNOWLEDGMENTS
We thank Ramesh Chandra, James Cowling, Haitham Hassaneih,
Nate Kushman, Jad Naous, Benjamin Ransford, and our shep-
herd Diana Smetters for their insightful comments. We also
thank Jukka Suomela and Piotr Indyk for help with the efﬁcient
bit-balancing algorithm in the Appendix. This work is funded
by NSF and SMART-FM.
REFERENCES
[1] Atheros linux wireless driver. http://wireless.
kernel.org/en/users/Drivers/ath5k.
[2] D. Balfanz, G. Durfee, D.K.Smetters, and R. Grinter. In
search of usable security – ﬁve lessons from the ﬁeld. IEEE
Journal on Security and Privacy, 2(5):19–24, September–
October 2004.
[3] S. M. Bellovin and M. Merritt. Encrypted key exchange:
Password-based protocols secure against dictionary at-
tacks. In Proceedings of the 13th IEEE Symposium on
Security and Privacy, Oakland, CA, May 1992.
[4] V. Boyko, P. MacKenzie, and S. Patel. Provably secure
password-authenticated key exchange using difﬁe-hellman.
In B. Preneel, editor, Advances in Cryptology—Eurocrypt
2000, volume 1807 of Lecture Notes in Computer Science,
pages 156–171. Springer-Verlag, 2000.
[5] M. ˇCagalj, J.-P. Hubaux, S. ˇCapkun, R. Rangaswamy,
I. Tsigkogiannia, and M. Srivastava. Integrity codes: Mes-
sage integrity protection and authentication over insecure
channels. In Proceedings of the 27th IEEE Symposium on
Security and Privacy, pages 280–294, Oakland, CA, May
2006.
[6] S. ˇCapkun, M. ˇCagalj, R. Rengaswamy, I. Tsigkogiannis,
J.-P. Hubaux, and M. Srivastava. Integrity codes: Mes-
sage integrity protection and authentication over insecure
channels. IEEE Transactions on Dependable and Secure
Computing, 5(4):208–223, October–December 2008.
[7] W. Difﬁe and M. E. Hellman. New directions in cryptogra-
phy. IEEE Transactions on Information Theory, 22(6):644–
654, November 1976.
[8] W. Difﬁe, P. C. van Oorschot, and M. J. Wiener. Authenti-
cation and authenticated key exchanges. Designs, Codes,
and Cryptography, 2(2):107–125, 1992.
[9] Ettus Inc. Universal software radio peripheral. http:
//ettus.com.
[10] M. T. Goodrich, M. Sirivianos, J. Solis, G. Tsudik, and
E. Uzun. Loud and clear: human-veriﬁable authentication
based on audio. In Proceedings of the 26th International
Conference on Distributed Computing Systems, Lisboa,
Portugal, July 2006.
[11] J. D. Halamka.
Telemonitoring for
the home.
http://geekdoctor.blogspot.com/2010/
04/telemonitoring-for-home.html,
2010.
April
[12] IEEE. 802.15.1 speciﬁcation: Personal area networks,
2002.
[13] IEEE. 802.11i speciﬁcation: Amendent 6: MAC security
enhancements, 2004.
[14] Kelton Research.
Survey:
network an essential
element of home
Protecting wireless
security.
http://www.wi-fi.org/news_articles.
php?f=media_news&news_id=1, November 2006.
[15] C. Kuo, J. Walker, and A. Perrig. Low-cost manufac-
turing, usability and security: An analysis of bluetooth
simple pairing and wi-ﬁ protected setup. In Proceedings
of the Usable Security Workshop, Lowlands, Scarborough,
Trinidad/Tobago, February 2007.
[16] R. Li. WiFi hitting the security camera scene. eZine Ar-
ticles, March 2010. http://ezinearticles.com/
?id=3963601.
[17] R. Mayrhofer and H. Gellersen. Shake well before use: Au-
thentication based on accelerometer data. In Proceedings
of the 5th International Conference on Pervasive Comput-
ing, Toronto, Canada, May 2007.
[18] J. M. McCune, A. Perrig, and M. K. Reiter. Seeing-is-
believing: using camera phones for human-veriﬁable au-
thentication. In Proceedings of the 26th IEEE Symposium
on Security and Privacy, Oakland, CA, May 2005.
[19] D. A. Norman. The way I see it: When security gets in the
way. Interactions, 16(6), November–December 2009.
[20] V. Roth, W. Polak, E. Rieffel, and T. Turner. Simple and
effective defense againgst evil twin access points. In Pro-
ceedings of the 1st ACM Conference on Wireless Network
Security, Alexandria, VA, March–April 2008.
[21] SensorMetrics, Inc.
Intellisense WiFi products: Tem-
perature sensors, motion sensors, power sensors. http:
//www.sensormetrics.com/wifi.html.
[22] F. Stajano and R. Anderson. The Resurrecting Duckling:
Security Issues for Ad-hoc Wireless Networks. In Pro-
ceedings of the 7th International Workshop on Security
Protocols, 1999.
[23] J. K. Tan. An Adaptive Orthogonal Frequency Division
Multiplexing Baseband Modem for Wideband Wireless
Channels. Master’s thesis, MIT, 2006.
[24] C. Ware, J. Judge, J. Chicharo, and E. Dutkiewicz. Un-
fairness and capture behavior in 802.11 adhoc networks.
In Proceedings of the IEEE International Conference on
Communications, 2000.
[25] WiFi Alliance. WPS Certiﬁed Products. http://www.
wi-fi.org/search_products.php.
[26] WiFi Alliance. WiFi protected setup speciﬁcation, version
1.0h, 2006.
[27] WiFi Alliance. WiFi Alliance to ease setup of home
WiFi networks with new industry wide program.
http://www.wi-fi.org/news_articles.
php?f=media_news&news_id=263, January 2007.
A BIT-BALANCING ALGORITHM
TEA’s bit-balancing algorithm takes an even number, N, of input
bits and produces M = N + 2⌈logN⌉ output bits which have an
equal number of zeros and ones. If the input sequence has an
odd number of bits, we pad a 1 bit to it to make it an even length
sequence.
Let the input bit sequence of our algorithm be denoted by
IN, and the output bit-balanced sequence be denoted by OUT.
We deﬁne D0 to be the difference between the number of ones
and zeros in the input IN. Also Di is deﬁned as the difference
between the number of ones and zeros after ﬂipping the ﬁrst i
15
Input Sequence:
1 0 0 0, D0 = −2
i = 1 :
i = 2 :
i = 3 :
1 0 0 0 → 0 0 0 0, D1 = −4
0 0 0 0 → 0 1 0 0, D2 = −2
0 1 0 0 → 0 1 1 0, D3 = 0
Output Sequence: 0 1 1 0 1 0 0 1
Table 2: Example run of our 0-1 balanced function
bits in the input IN. Our algorithm works as follows.
• Step 1: Compute the difference D0 between the number of
ones and number of zeros in IN. Set i to 1 and S0 to IN.
• Step 2: Flip the ith bit in Si−1 to get Si. Then compute the
new difference, Di as Di = Di−1 ± 2 depending on whether
the ith bit is one or zero.
• Step 3: If Di = 0, then set INDEX to i and OUT temp to Si and
go to Step 4. Otherwise increment i and go to Step 2.
• Step 4: Set the output OUT to be the concatenation of
OUT temp and the Manchester encoding of the bit represen-
tation of INDEX − 1. Since SINDEX is N bits long and the
Manchester encoding of INDEX − 1 is 2⌈log(N)⌉ bits long,
the output OUT is N + 2⌈log(N)⌉ bits long.
To see how the above algorithm works, let us take the 4 bit
input sequence, 1000, shown in Table 2. The difference D0 for
this sequence is −2. In the ﬁrst iteration, we ﬂip the ﬁrst bit to
get the bit sequence 0000 which has a difference D1 = −4. In
the second iteration, we ﬂip the second bit to get 0100 which has
a difference D2 = −2. Finally, in the third iteration, we ﬂip the
third bit to get 0110 which has a difference D3 = 0. Thus, we
output this sequence concatenated with the Manchester encoding
of 3 − 1, which is 1001. Thus, the bit balanced output sequence
is 01101001.
The above algorithm relies on the fact that there exists an
INDEX bit position for which DINDEX = 0. Such an INDEX al-
ways exists for the following reason. First, because the sequence
S0 has an even number of bits, D0 is even. Further, for every bit
ﬂipped, Di differs from Di−1 by exactly ±2. Finally, since SN is
the bitwise opposite of S0 and thus DN = −D0, there must exist
an INDEX for which DINDEX = 0.
Note that this is a one-to-one mapping and the decoding
can be done in linear time. Speciﬁcally the decoder takes the
last 2⌈log(N)⌉ bits and constructs INDEX from its Manchester
encoding. Then it takes the ﬁrst N bits and ﬂips the ﬁrst INDEX
bits in the ﬁrst N bits to get the original bit sequence.
B REDUCING MEDIUM OCCUPANCY
TEP’s speciﬁcations in §5.2 ensure that if there is any possibility
that a registrar missed a TEA request (i.e., if TEA RECV GET
returned RETRY or OVERLAP), that registrar will immediately
transmit a TEA reply, without regard for carrier-sense. Thus, if,
by some chance, multiple registrars transmit overlapping replies
at almost the same time, each of them will then assume it may
have missed a request from some enrollee (since it sensed a
concurrent TEA message), and each will re-send its reply. This
cycle of replies may continue until each registrar’s PBC walk
time (120 sec) expires. This section shows how to modify the
basic TEP protocol to avoid occupying the medium for 120
seconds in this situation.
To address this issue, we make two changes to the TEP pro-
tocol from §5.2. First, the registrar does not re-transmit replies
if all of the possibly-missed TEA requests overlapped with its
previous transmission. In other words, the registrar performs
TEA SEND only if m 6= OVERLAP. Not re-sending the reply
is safe only if enrollees whose requests may not get a reply
also learn of the TEA overlap (and thus return a session overlap
error). To guarantee this, we make a second change, to the
enrollee, so that it listens for tea duration both before and af-
ter transmitting its request. This ensures that an enrollee hears
any TEA replies (from registrars) that overlap its own TEA
request. (As before, if an enrollee detects a TEA message it
cannot decode, it triggers a session overlap error.) Thus, the en-
rollee pseudo-code is augmented as follows (changing the loop
duration and introducing an additional SLEEP before sending):
r ← ∅
for 120 sec + #channels × (tx tmo + 3 × tea duration) do
⊲ walk time + max enrollee scan period
switch to next 802.11 channel
h ← TEA RECV START (reply)
SLEEP (tea duration)
TEA SEND (request, enroll info, now + tx tmo)
SLEEP (tea duration)
r ← r ∪ TEA RECV GET (h)
end for
The registrar must also wait for the same increased loop time
to accommodate the modiﬁed enrollee. With these changes,
TEP safely avoids occupying the medium for the whole walk
time in cases when multiple registrars hear each other’s replies.
B.1 Extending the Security Proof
Next, we prove that the above optimization is secure.
Proposition B.1 An enrollee and registrar following the opti-
mized TEP protocol (from Appendix B) cannot be tricked into
accepting an incorrect public key, as in Prop. 7.4.
Proof The only change in the optimized protocol that affects
the proof for Prop. 7.4 is that the registrar does not resend its
reply when m = OVERLAP. The registrar still computes the
same set e of enrollee messages as in Prop. 7.4, and therefore
cannot be tricked into accepting an incorrect public key.
We prove that the enrollee also cannot be tricked, by contra-
diction. Suppose that the enrollee is tricked into accepting the
wrong key. From the proof of Prop. 7.4, this must be because
the registrar did not respond to the enrollee’s request. This must
be because the registrar’s TEA RECV GET returned OVERLAP,
i.e., the registrar missed zero or more requests, all of which
overlapped the registrar’s TEA SEND. Thus, the enrollee must
have transmitted its request within tea duration of the registrar
transmitting a reply.
By the enrollee pseudo-code in Appendix B, the enrollee was
listening for TEA messages for tea duration before and after
sending its request. If the enrollee’s TEA RECV GET returned
the registrar’s reply, the enrollee could not have accepted a dif-
ferent key (by Prop. 7.4). Thus, the enrollee’s TEA RECV GET
must have returned RETRY or OVERLAP . But in both of these
cases, the enrollee would not have accepted any key. Thus, by
contradiction, the enrollee cannot be tricked, and the optimized
TEP protocol is secure. (cid:3)
16