FETCH [ direction { FROM | IN } ] cursor INTO target;  
例子  
FETCH curs1 INTO rowvar;  
FETCH curs2 INTO foo, bar, baz;  
FETCH LAST FROM curs3 INTO x, y;  
FETCH RELATIVE -2 FROM curs4 INTO x;  
```  
移动游标位置   
```  
MOVE [ direction { FROM | IN } ] cursor;  
例子  
MOVE curs1;  
MOVE LAST FROM curs3;  
MOVE RELATIVE -2 FROM curs4;  
MOVE FORWARD 2 FROM curs4;  
```  
更新、删除游标当前记录  
```  
UPDATE table SET ... WHERE CURRENT OF cursor;  
DELETE FROM table WHERE CURRENT OF cursor;  
例子  
UPDATE foo SET dataval = myval WHERE CURRENT OF curs1;  
```  
关闭游标  
```  
CLOSE cursor;  
例子  
CLOSE curs1;  
```  
返回游标  
```  
CREATE TABLE test (col text);  
INSERT INTO test VALUES ('123');  
CREATE FUNCTION reffunc(refcursor) RETURNS refcursor AS '  
BEGIN  
    OPEN $1 FOR SELECT col FROM test;  
    RETURN $1;  
END;  
' LANGUAGE plpgsql;  
BEGIN;  
SELECT reffunc('funccursor');  
FETCH ALL IN funccursor;  
COMMIT;  
CREATE FUNCTION reffunc2() RETURNS refcursor AS '  
DECLARE  
    ref refcursor;  
BEGIN  
    OPEN ref FOR SELECT col FROM test;  
    RETURN ref;  
END;  
' LANGUAGE plpgsql;  
-- need to be in a transaction to use cursors.  
BEGIN;  
SELECT reffunc2();  
      reffunc2  
--------------------  
(1 row)  
FETCH ALL IN "";  
COMMIT;  
CREATE FUNCTION myfunc(refcursor, refcursor) RETURNS SETOF refcursor AS $$  
BEGIN  
    OPEN $1 FOR SELECT * FROM table_1;  
    RETURN NEXT $1;  
    OPEN $2 FOR SELECT * FROM table_2;  
    RETURN NEXT $2;  
END;  
$$ LANGUAGE plpgsql;  
-- need to be in a transaction to use cursors.  
BEGIN;  
SELECT * FROM myfunc('a', 'b');  
FETCH ALL FROM a;  
FETCH ALL FROM b;  
COMMIT;  
```  
for游标循环  
```  
[ > ]  
FOR recordvar IN bound_cursorvar [ ( [ argument_name := ] argument_value [, ...] ) ] LOOP  
    statements  
END LOOP [ label ];  
```  
#### 异常消息处理  
抛出异常  
```  
RAISE [ level ] 'format' [, expression [, ... ]] [ USING option = expression [, ... ] ];  
RAISE [ level ] condition_name [ USING option = expression [, ... ] ];  
RAISE [ level ] SQLSTATE 'sqlstate' [ USING option = expression [, ... ] ];  
RAISE [ level ] USING option = expression [, ... ];  
RAISE ;  
```  
option取值范围  
```  
MESSAGE  
    Sets the error message text.   
    This option can't be used in the form of RAISE that includes a format string before USING.  
DETAIL  
    Supplies an error detail message.  
HINT  
    Supplies a hint message.  
ERRCODE  
    Specifies the error code (SQLSTATE) to report, either by condition name, as shown in Appendix A,   
    or directly as a five-character SQLSTATE code.  
COLUMN  
CONSTRAINT  
DATATYPE  
TABLE  
SCHEMA  
    Supplies the name of a related object.  
```  
例子  
```  
RAISE EXCEPTION 'Nonexistent ID --> %', user_id  
      USING HINT = 'Please check your user ID';  
RAISE 'Duplicate user ID: %', user_id USING ERRCODE = 'unique_violation';  
RAISE 'Duplicate user ID: %', user_id USING ERRCODE = '23505';  
RAISE division_by_zero;  
RAISE SQLSTATE '22012';  
RAISE unique_violation USING MESSAGE = 'Duplicate user ID: ' || user_id;  
```  
断言  
```  
ASSERT condition [ , message ];  
```  
#### plpgsql触发器函数  
参考触发器部分  
### 3. 解析一个存储过程  
#### 检查存储过程(函数)内容  
```  
postgres=# create or replace function f() returns void as $$  
declare  
begin  
  raise notice 'this is a test';  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
postgres=# select * from pg_get_functiondef('f'::regproc);  
          pg_get_functiondef             
---------------------------------------  
 CREATE OR REPLACE FUNCTION public.f()+  
  RETURNS void                        +  
  LANGUAGE plpgsql                    +  
 AS $function$                        +  
 declare                              +  
 begin                                +  
   raise notice 'this is a test';     +  
 end;                                 +  
 $function$                           +  
(1 row)  
```  
#### 调试plpgsql存储过程，输出每一次调用的QUERY详细执行计划  
1\. LOAD 'auto_explain' ;     
只在当前SESSION生效，不需要重启数据库, 需要超级用户权限。    
普通用户不允许加载auto_explain模块. (普通用户只允许加载$libdir/plugins目录下的模块,但是auto_explain即使拷贝到这个目录也不行)    
```  
load 'auto_explain';  
set client_min_messages='log';  
set auto_explain.log_min_duration = 0;  
set auto_explain.log_analyze = true;  
set auto_explain.log_verbose = true;  
set auto_explain.log_buffers = true;  
set auto_explain.log_nested_statements = true;  
输出函数内的所有被调用的QUERY的执行计划。  
postgres=# do language plpgsql $$          
declare  
begin  
  perform 1 from pg_class where oid=1;  
end;  
$$;  
LOG:  duration: 0.008 ms  plan:  
Query Text: SELECT 1 from pg_class where oid=1  
Index Only Scan using pg_class_oid_index on pg_catalog.pg_class  (cost=0.27..1.29 rows=1 width=4) (actual time=0.006..0.006 rows=0 loops=1)  
  Output: 1  
  Index Cond: (pg_class.oid = '1'::oid)  
  Heap Fetches: 0  
  Buffers: shared hit=2  
DO  
```  
#### 调试plpgsql函数  
安装plugin_debugger  
https://git.postgresql.org/gitweb/?p=pldebugger.git;a=summary  
配置postgresql.conf  
```  
shared_preload_libraries = '$libdir/plugin_debugger'  
```  
重启数据库  
创建extension  
```  
CREATE EXTENSION pldbgapi;  
```  
调试函数  
![pic](20170412_02_pic_091.jpg)  
![pic](20170412_02_pic_092.jpg)  
### 4. SQL 函数  
sql函数支持的语法较少  
例子  
```  
postgres=# create or replace function f1(int,int) returns int as $$  
select $1+$2;  
$$ language sql strict;  
CREATE FUNCTION  
postgres=# select f1(1,2);  
 f1   
----  
  3  
(1 row)  
```  
### 5. 触发器  
#### 触发器函数  
PostgreSQL 触发器支持行级、语句级触发器。支持insert,update,delete,truncate触发。  
语法  
```  
postgres=# \h create trigger  
Command:     CREATE TRIGGER  
Description: define a new trigger  
Syntax:  
CREATE [ CONSTRAINT ] TRIGGER name { BEFORE | AFTER | INSTEAD OF } { event [ OR ... ] }  
    ON table_name  
    [ FROM referenced_table_name ]  
    [ NOT DEFERRABLE | [ DEFERRABLE ] [ INITIALLY IMMEDIATE | INITIALLY DEFERRED ] ]  
    [ FOR [ EACH ] { ROW | STATEMENT } ]  
    [ WHEN ( condition ) ]  
    EXECUTE PROCEDURE function_name ( arguments )  
where event can be one of:  
    INSERT  
    UPDATE [ OF column_name [, ... ] ]  
    DELETE  
    TRUNCATE  
```  
触发器分类  
When|   Event|  Row-level|      Statement-level    
---|---|---|---    
BEFORE  |INSERT/UPDATE/DELETE|  Tables| Tables and views    
TRUNCATE|       —       |Tables| -     
AFTER|  INSERT/UPDATE/DELETE|   Tables| Tables and views    
TRUNCATE|       —       |Tables| -    
INSTEAD OF|     |INSERT/UPDATE/DELETE|  Views|  —    
TRUNCATE|       |—|     —| -     
同一个表或视图上可以创建多个触发器, 调用的顺序和触发器的类型有关.     
表上各种触发器的调用先后顺序如下 :     
```    
1. before for each statement    
2. before for each row    
3. after for each row    
4. after for each statement    
```   
视图上各种触发器的调用先后顺序如下 :     
```    
1. before for each statement    
2. instead for each row    
3. after for each statement    
```    
同类触发器如果有多个, 调用顺序则和触发器的名字有关, 按照名字的排序进行调用.   
首先需要编写触发器函数，支持plpgsql, plpython, C等函数编写的触发器函数。然后创建触发器。  
plpgsql支持的触发器函数变量  
```  
NEW  
Data type RECORD; variable holding the new database row for INSERT/UPDATE operations in row-level triggers.   
This variable is NULL in statement-level triggers and for DELETE operations.  
OLD  
Data type RECORD; variable holding the old database row for UPDATE/DELETE operations in row-level triggers.   
This variable is NULL in statement-level triggers and for INSERT operations.  
TG_NAME  
Data type name; variable that contains the name of the trigger actually fired.  
TG_WHEN  
Data type text; a string of BEFORE, AFTER, or INSTEAD OF, depending on the trigger's definition.  
TG_LEVEL  
Data type text; a string of either ROW or STATEMENT depending on the trigger's definition.  
TG_OP  
Data type text; a string of INSERT, UPDATE, DELETE, or TRUNCATE telling for which operation the trigger was fired.  
TG_RELID  
Data type oid; the object ID of the table that caused the trigger invocation.  
TG_RELNAME  
Data type name; the name of the table that caused the trigger invocation.   
This is now deprecated, and could disappear in a future release. Use TG_TABLE_NAME instead.  
TG_TABLE_NAME  
Data type name; the name of the table that caused the trigger invocation.  
TG_TABLE_SCHEMA  
Data type name; the name of the schema of the table that caused the trigger invocation.  
TG_NARGS  
Data type integer; the number of arguments given to the trigger procedure in the CREATE TRIGGER statement.  
TG_ARGV[]  
Data type array of text; the arguments from the CREATE TRIGGER statement.   
The index counts from 0. Invalid indexes (less than 0 or greater than or equal to tg_nargs) result in a null value.  
A trigger function must return either NULL or a record/row value having exactly the structure of the table the trigger was fired for.  
```  
以plpgsql为例，触发器函数范例。  
使用hstore 和触发器跟踪敏感数据的DML。  
创建需要被跟踪的测试表  
```  
CREATE TABLE test (id int primary key, info text, crt_time timestamp(0));  
```  
创建hstore extension;  
```  
CREATE EXTENSION hstore;  
```  
创建通用的存储跟踪记录的记录表  
```  
CREATE TABLE table_change_rec (  
id serial8 primary key,  
relid oid,  
table_schema text,  
table_name text,  
when_tg text,  
level text,  
op text,  
old_rec hstore,  
new_rec hstore,  
crt_time timestamp without time zone DEFAULT now(),  
username text,  
client_addr inet,  
client_port int  
);  
```  
创建通用的触发器函数  
```  
CREATE OR REPLACE FUNCTION dml_trace()  
RETURNS trigger  
LANGUAGE plpgsql  
AS $BODY$  
DECLARE  
v_new_rec hstore;  
v_old_rec hstore;  
v_username text := session_user;  
v_client_addr inet := inet_client_addr();  
v_client_port int := inet_client_port();  
BEGIN  
case TG_OP  
when 'DELETE' then   
  v_old_rec := hstore(OLD.*);  
  insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, old_rec, username, client_addr, client_port)  
    values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_old_rec, v_username, v_client_addr, v_client_port);  
when 'INSERT' then   
  v_new_rec := hstore(NEW.*);  
  insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, new_rec, username, client_addr, client_port)  
    values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_new_rec, v_username, v_client_addr, v_client_port);  
when 'UPDATE' then   
  v_old_rec := hstore(OLD.*);  
  v_new_rec := hstore(NEW.*);  
  insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, old_rec, new_rec, username, client_addr, client_port)  
    values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_old_rec, v_new_rec, v_username, v_client_addr, v_client_port);  
else  
  return null;  
end case;  
  RETURN null;  
END;  
$BODY$ strict;  
```  
在测试表上分别创建插入, 更新, 删除的三个触发器.  
```  
CREATE TRIGGER tg AFTER DELETE or INSERT or UPDATE ON test FOR EACH ROW EXECUTE PROCEDURE dml_trace();  
```  
测试插入, 删除, 更新操作是否被跟踪.  
(已更新dml_trace, 以下例子未包含client_addr和client_port)  
```  
postgres=# insert into test values (1, 'digoal', now());  
INSERT 0 1  
postgres=# select * from test;  
 id |  info  |      crt_time         
----+--------+---------------------  
  1 | digoal | 2012-06-25 10:54:43  
(1 row)  
postgres=# select * from table_change_rec;  
 id | relid | table_schema | table_name | when_tg | level |   op   | old_rec |                            new_rec                     
          |          crt_time          | username   
----+-------+--------------+------------+---------+-------+--------+---------+------------------------------------------------------  
----------+----------------------------+----------  
  4 | 23731 | public       | test       | AFTER   | ROW   | INSERT |         | "id"=>"1", "info"=>"digoal", "crt_time"=>"2012-06-25   
10:54:43" | 2012-06-25 10:54:42.839553 | postgres  
(1 row)  
postgres=# update test set info='DIGOAL' where id=1;  
UPDATE 1  
postgres=# select * from test;  
 id |  info  |      crt_time         
----+--------+---------------------  
  1 | DIGOAL | 2012-06-25 10:54:43  
(1 row)  
postgres=# select * from table_change_rec;  
 id | relid | table_schema | table_name | when_tg | level |   op   |                            old_rec                               
|                            new_rec                             |          crt_time          | username   
----+-------+--------------+------------+---------+-------+--------+----------------------------------------------------------------  