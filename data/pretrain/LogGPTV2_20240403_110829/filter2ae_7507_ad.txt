        DiagnosticTrapWriter diagWriter = this.dw.getDiagnosticTrapWriter();
        if (diagWriter != null) {
            Iterator var14 = fileObjects.iterator();
            while(var14.hasNext()) {
                JavaFileObject jfo = (JavaFileObject)var14.next();
                diagWriter.writeFileArgument(jfo);
            }
        }
        /* 通过javac解析源代码文件，拿到上下文信息 */
        javac_extend.com.sun.tools.javac.util.List parsedFiles = compiler.parseFiles(fileObjects);
        compiler.enterTrees(compiler.initModules(parsedFiles));
        Queue>> groupedTodos = Todo.instance(context).groupByFile();
        long javacInitTime = System.nanoTime() - time;
        long javacInitCpuTime = getCurrentThreadCpuTime() - cpuTime;
        if (diagWriter != null) {
            diagWriter.writeCompilationFileTime((double)javacInitCpuTime / 1.0E9D, (double)javacInitTime / 1.0E9D, 0.0D, 0.0D);
        }
        int prevErr = 0;
        while(true) {
            long currJavacCpu;
            long cpu;
            long currJavacTime;
            while(true) {
                JCCompilationUnit cu;
                while(true) {
                    Queue todo;
                    do {
                        /* 检查待做事项，没有的话就返回 */
                        if ((todo = (Queue)groupedTodos.poll()) == null) {
                            long totalExtractorTime = System.nanoTime() - this.extractorStartTime;
                            this.log(String.format("Javac init time: %.1fs", (double)javacInitTime / 1.0E9D));
                            this.log(String.format("Javac attr time: %.1fs", (double)this.javacTime / 1.0E9D));
                            this.log(String.format("Extractor time: %.1fs", (double)this.extractorTime / 1.0E9D));
                            long otherTime = totalExtractorTime - javacInitTime - this.javacTime - this.extractorTime;
                            this.log(String.format("Other time: %.1fs", (double)otherTime / 1.0E9D));
                            this.log(String.format("Total time: %.1fs", (double)totalExtractorTime / 1.0E9D));
                            int totalErrors = compiler.errorCount();
                            compiler.close();
                            if (diagWriter != null) {
                                diagWriter.writeCompilationFinished((double)getCurrentThreadCpuTime() / 1.0E9D, (double)totalExtractorTime / 1.0E9D);
                            }
                            if (totalErrors != 0) {
                                this.log.error(LOG_ID, totalErrors + " errors were reported by javac.");
                                return false;
                            }
                            return true;
                        }
                        cu = null;
                        Iterator var23 = todo.iterator();
                        while(var23.hasNext()) {
                            javac_extend.com.sun.tools.javac.comp.Env env = (javac_extend.com.sun.tools.javac.comp.Env)var23.next();
                            if (cu == null) {
                                cu = env.toplevel;
                            } else if (cu != env.toplevel) {
                                throw new CatastrophicError("Not grouped by file: CUs " + cu + " and " + env.toplevel);
                            }
                        }
                    } while(cu == null);
                    if (diagWriter != null) {
                        diagWriter.writeCompilationFileStart(cu);
                    }
                    cpu = getCurrentThreadCpuTime();
                    time = System.nanoTime();
                    try {
                        Queue> queue = compiler.attribute(todo);
                        String envFlowChecks = System.getenv("CODEQL_EXTRACTOR_JAVA_FLOW_CHECKS");
                        if (envFlowChecks == null || Boolean.valueOf(envFlowChecks)) {
                            compiler.flow(queue);
                        }
                        break;
                    } catch (StackOverflowError | Exception var36) {
                        this.logThrowable(cu, var36);
                    }
                }
                currJavacTime = System.nanoTime() - time;
                this.javacTime += currJavacTime;
                currJavacCpu = getCurrentThreadCpuTime() - cpu;
                cpu = getCurrentThreadCpuTime();
                time = System.nanoTime();
                try {
                    CharSequence cachedContent = dfm.getCachedContent(cu.getSourceFile());
                    if (cachedContent == null) {
                        try {
                            cachedContent = cu.getSourceFile().getCharContent(false);
                        } catch (IOException var37) {
                            this.logThrowable(cu, var37);
                            continue;
                        }
                    }
                    String contents = ((CharSequence)cachedContent).toString();
                    /** 
                     * 根据compiler处理的结果，进行extractor操作
                     * this.output 存有`trap`和`src`文件的保存路径
                     *    trapFolder=E:\Documents\databases\app2\trap\java
                     *    sourceArchiveFolder=E:\Documents\databases\app2\src
                     */
                    (new CompilationUnitExtractor(this.output, cu, this.dw)).process(contents);
                } catch (StackOverflowError | Exception var38) {
                    this.logThrowable(cu, var38);
                }
                break;
            }
            long currExtractorTime = System.nanoTime() - time;
            this.extractorTime += currExtractorTime;
            long currExtractorCpu = getCurrentThreadCpuTime() - cpu;
            if (diagWriter != null) {
                diagWriter.writeCompilationFileTime((double)currJavacCpu / 1.0E9D, (double)currJavacTime / 1.0E9D, (double)currExtractorCpu / 1.0E9D, (double)currExtractorTime / 1.0E9D);
                int currErr = compiler.errorCount();
                int deltaErr = currErr - prevErr;
                if (deltaErr > 0) {
                    String errorMsg = String.valueOf(deltaErr);
                    diagWriter.writeDiagnostic(DiagSeverity.ErrorHigh, errorMsg, DiagKind.SOURCE, (Label)null);
                }
                prevErr = currErr;
            }
        }
    }
`process`函数的内容如下，根据输入的源代码文件内容进行处理，而`CompilationUnitExtractor`在创建时传入的`cu(JCCompilationUnit)`对象，保存着编辑器处理后的上下文信息。
以`ClassDeclExtractor#visitClassDef`为例，会通过调用`this.onDemand.getClassKey`得到当前类的唯一标签，其它方法也是类似的。
    public void visitClassDef(JCClassDecl that) {
        if (this.onDemand.getOutput().getTrackClassOrigins()) {
            this.attributeClassFile(that);
        }
        if (this.extractedClasses.add(that)) {
            this.enclosingCallables.push((Object)null);
            this.enclosingStatements.push((Object)null);
            if (that.type instanceof ClassType) {
                this.onDemand.extractPrivateMembers((ClassType)that.type);
            } else {
                this.log.error(DiagKind.SOURCE, this.treeUtil, "Unexpected type for class " + that.name + ": " + that.type, that);
            }
            Label classId;
            if (that.sym != null) {
                /* 获取标签#10012 */
                classId = this.onDemand.getClassKey(that.sym);
                this.treeUtil.writeKeyedLocation(this.writer, that, classId);
                this.treeUtil.writeJavadocAssociation(this.writer, classId, that);
        ...
    }
整个`java
extractor`的代码量太多，我没有深入研究各个部分。`Extractor`有用到名为`javac_extend.com.sun.tools.javac`的包来进行`javac`的操作，但是`jdk`中只有`com.sun.tools.javac`，并不清楚两者的差异具体体现在哪里，但可以看出是进行了一定修改的。整个`jar`包就像缝合怪，将很多功能修改后嵌入在里面。
这样整个`Extractor`的工作流程大概了解，
  * 根据`javac`配置文件创建`javac compiler`对象
  * `javac`对源码一次进行预处理
  * 根据前一步出的处理结果，构造`trap`文件
由于涉及到的内容较多且广泛，继续深入可能会让我陷入泥沼，了解其作用和用法即可，如果有缘会再回来看看。
从前面的分析大致能看出，数据的构建过程中，`codeql`并不需要完整的去编译源代码，只是借助`javac`从源码中那拿点东西。其次，只要能够根据源码文件构造正确的`javac.args`，就可以生成`trap`文件了。之后再通过`codeql
database finalize`即可得到一个数据库。
这种想法在[2]中已经提及，只是可能由于反编译时代码的正确性无法保证完美，其次编译时各个文件编译的先后顺序不同都会导致构造`trap`出现错误。但另一种更简单直接的方式是根据反编译结果，构造编译命令，然后通过`codeql
database create`并指定构造好的编译命令即可，在`github`中也有相关项目。
## Tools
按照前面的分析结果，`CodeQL`创建数据库的过程中并不关心整个编译过程和结果，只是借用编译过程中的部分数据。那么对于任何`java`代码，无论其构建系统为何，只要能够让编译该`java`文件时，编译器不应错误而退出，那么数据库的创建过程就可以正常进行下去。
可以通过下面的脚本来创建数据库，这里以`dubbo`项目为实例，使用先需要下载好[ecj.jar](https://mvnrepository.com/artifact/org.eclipse.jdt.core.compiler/ecj/4.6.1)，这里使用`ecj`的目的是，相比`javac`而言，它更能容忍编译错误，从而避免创建数据库过程失败。
    import pathlib
    import os
    def compile_cmd_file_create(save_path, ecj_path):
        with open("{}/file.txt".format(save_path), "w+") as f:
            for java_path in pathlib.Path(save_path).glob('**/*.java'):
                f.write(str(java_path) + "\n")
        ecj_absolute_path = pathlib.Path(ecj_path).resolve()
        compile_cmd = "java -jar {} -encoding UTF-8 -8 " \
                      "-warn:none -noExit @{}/file.txt".format(ecj_absolute_path, save_path)
        with open("{}/run.cmd".format(save_path), "w+") as f:
            f.write(compile_cmd)
        with open("{}/run.sh".format(save_path), "w+") as f:
            f.write(compile_cmd)
    if __name__ == '__main__':
        self_ecj_path = os.getcwd() + r"/ecj-4.6.1.jar"
        compile_cmd_file_create(os.getcwd() + r"/dubbo", self_ecj_path)
运行后会在`os.getcwd() + r"/dubbo"`中生成`run.sh/run.cmd`文件，之后进入`os.getcwd() +
r"/dubbo"`运行
    codeql database create --language=java -c "bash run.sh"  
~~就可以快速创建数据库，当然它与通过正常方式创建的结果是否一致尚未验证。~~
这种不顾编译错误情况的方式创建的数据库，会丢失数据流的信息从而导致失去它存在的意义，因为当编译某个文件它的依赖未找到时，生成的`trap`文件也是不完整的。
## References
1.  
2\.   
3\. 
* * *