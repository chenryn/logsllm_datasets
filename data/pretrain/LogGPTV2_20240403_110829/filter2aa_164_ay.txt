 The original idea was that you could change the CPU/GPU memory split by overwriting the “live”
start.elf file with one of the arm* files. Thus, by running the following example statement:
Click here to view code image
cp /boot/arm240_start.elf /boot/start.elf
you configure your Pi with a 240MB ARM/15MB GPU split. Nowadays the /boot partition contains
just a single start.elf GPU firmware image. You can see the Raspberry Pi kernel, firmware, and
configuration files in Figure 18.4.
FIGURE 18.4 The Raspberry Pi kernel, firmware, and boot files are located on the FAT32 /boot
partition (the only part of the SD card that is readable by Windows).
Just for the sake of completeness, I want to provide you with a brief description of the /boot partition
contents; check out Table 18.2 for that useful nugget of information.
TABLE 18.2 Raspberry Pi /boot Partition Contents
Remember our friend Hexxeh (http://is.gd/Rrh2bS)? This is the individual who gave us a splendid,
easy-to-implement method for updating Raspberry Pi’s firmware:
Click here to view code image
sudo apt-get install rpi-update
sudo apt-get install git-core
sudo wget https://raw.github.com/Hexxeh/rpi-update/master/rpi-update -O /usr/bin/
rpi-update && sudo chmod +x /usr/bin/rpi-update
sudo rpi-update
Note: What Is Git?
You probably noticed that many of the installation recipes in this book use a software
product called Git. Git (http://is.gd/5vKXkJ) is a free, open source, distributed software
version control system. Git enables developers to publish their projects and source code so
that people can access their stuff in myriad ways. If you have any interest in writing your
own open source software, you want to spend time getting to know Git.
The reason I mention Hexxeh’s tool is that it once allowed you to change the ARM/GPU memory
split. Now, however, Hexxeh recommends using the Raspi-config or manual methods as previously
outlined.
Various and Sundry Performance Tweaks
The IT security and performance principle of least service means that if your computer does not need
to have a particular background service (daemon) running, then prevent it from doing so. Not only
will your computer run faster, but you also reduce the attack surface of the machine. After all, an
attacker can’t compromise a service that isn’t running!
 To that end, you can use the sysv-rc-conf utility (http://is.gd/1VjHLP) to analyze your startup services
and disable any that you identify as unnecessary.
Click here to view code image
sudo apt-get install -y sysv-rc-conf
sudo sysv-rc-conf
As you can see in Figure 18.5, the sysv-rc-conf presents a table showing you everything that’s running
in the background on your Pi. You can use the keyboard arrow keys to move around the table and
press the Spacebar to toggle services on and off for the various run levels (that’s what the 1–6 and S
mean in the column headings). Press Q to quit the tool and to return to your shell prompt.
FIGURE 18.5 You can use the sysv-rc-conf utility to disable startup services that you don’t need
and thereby boost the performance and security of your Raspberry Pi.
Naturally, you’ll want to do some research on what these services actually do before you disable
anything.
Note: About Run Levels
The Linux operating system can run under different levels of processing priority and
system access; these are reasonably called runlevels. Only one runlevel is executed on
each startup. For instance, runlevel 0 is used to shut down the system. Runlevel 1 is single-
user mode, in which only one login is allowed. Runlevels 2–5 are for multi-user access.
Runlevel 6 denotes a reboot condition. You can read more about runlevels on Wikipedia at
http://is.gd/rTxUO6.
By default, the Raspberry Pi reserves six connection terminals (called tty connections) for
simultaneous user access. If you are the only person logging into your Pi, then you can save some
system resources by reducing this number.
 Open the /etc/inittab file in nano or your favorite text editor:
sudo nano /etc/inittab
Now, comment out the unneeded terminal reservations. On my system, I want to reserve only two
connections:
Click here to view code image
1:2345:respawn:/sbin/getty --noclear 38400 tty1
2:23:respawn:/sbin/getty 38400 tty2
# 3:23:respawn:/sbin/getty 38400 tty3
# 4:23:respawn:/sbin/getty 38400 tty4
# 5:23:respawn:/sbin/getty 38400 tty5
# 6:23:respawn:/sbin/getty 38400 tty6
Save your changes, close the /etc/inittab file, and reboot your Pi to put the change into effect.
 Finally, you can make use of a couple cool apt-get parameters to keep your installed software and
repository cache nice and tidy:
sudo apt-get autoremove
sudo apt-get autoclean
The autoremove parameter removes software packages that were installed by apt-get automatically to
satisfy dependencies for some installed and potentially removed software.
 The autoclean parameter clears out your local repository of retrieved package files, removing only
package files that are no longer valid.
 For best performance, I suggest you run those apt-get statements on your Pi every month or so.
Chapter 19. Raspberry Pi and Arduino
As novel as the Raspberry Pi is, you have to remember that the device is simply another Linux box. In
other words, the Raspberry Pi, despite its tiny form factor, contains all of the trappings of a full-sized
computer.
 As nice as it is to have the input/output (I/O) capability of a full Linux machine, you still must deal
with the unfortunate side-effect of system overhead. At times the Raspberry Pi cannot get out of its
own way, so to speak, when you need it to perform certain tasks, especially those tasks that require
precise timing and calibration.
 Single-board microcontrollers like the Arduino are perfect for more direct applications that do not
require intensive computing or graphical processing power. For instance, what if you wanted to
design a wearable microcontroller that lights up a row of LEDs sewn into a leather jacket?
 As it happens, the Arduino team in Italy made just such a microcontroller: the Lily Pad
(http://is.gd/80MqhJ).
 What if you wanted to design and control a robot composed almost entirely of paper? Again, the
Arduino community has you covered with the PAPERduino (http://is.gd/5dSyJd).
 As far as I am personally concerned, the Arduino is totally awesome. The good news is that you can
integrate the Arduino with the Raspberry Pi in a number of different ways.
 In this chapter I start by providing a bit of history on the Arduino platform. Next, I dig into the
Arduino Uno, the reference Arduino model. I then show you how to get the Uno and Raspberry Pi
talking to each other and exchanging data. Finally, I introduce an excellent Arduino clone that is about
as easy to use with the Pi as any hardware I’ve ever seen.
 Shall we get started?
Introducing the Arduino
Massimo Banzi, the cofounder of Arduino, said it best when he stated, “The Arduino philosophy is
based on making designs rather than talking about them.”
 The Arduino is a family of single-board microcontrollers that are completely open source. Yes, you
heard me correctly: In contrast to the Raspberry Pi, which contains Broadcom-proprietary pieces and
parts, the Arduino boards are completely open to the public.
 This open source approach and Arduino’s Creative Commons-based licensing means that anybody in
the world can design (and sell) their own Arduino clones. The only licensing aspect that the Arduino
team feels strongly about is that clones must not contain the entire word “Arduino” in their names; this
term is reserved for the official boards.
 Speaking of boards, the Arduino team, which is based in Italy, manufactures and sells a large number
of them. Check them out at the Arduino website at http://is.gd/6P6WSe; here are some of my favorite
models:
 Arduino Uno (http://is.gd/SiSPg1): This is their most popular board and is ideal both for
learning as well as for practical application.
 Arduino Mega 2560 (http://is.gd/VPzRMr): This is a much bigger board intended for more
comprehensive projects.
 Arduino LilyPad (http://is.gd/80MqhJ): This is a cute, wearable microcontroller (see Figure
19.1).
FIGURE 19.1 Arduino LilyPad top, and Arduino Esplora bottom
 Arduino Esplora (http://is.gd/YeZIIg): This board, which is also pictured in Figure 19.1, has
lots of I/O possibilities and is focused squarely at game system designers.
 Okay. Thus far we understand that Arduino represents a family of microcontroller boards and that
their hardware is open source and anybody can download the schematics and build Arduino clones.
Stepping back for a moment, what exactly is a “single-board microcontroller”?
 A single-board microcontroller is a microcontroller that is soldered onto a single printed circuit
board (PCB). Going further, a microcontroller, such as the 8-bit ATmel AVR used in the Uno, is an
integrated circuit DIP chip that contains a processor core, a small amount of memory, and the
capability to communicate with I/O peripherals that are located elsewhere on the PCB.
 Note the decided absence of a video controller; microcontrollers have no built-in graphics capability,
nor do they contain an operating system. This means you must program and control an Arduino from
outside the Arduino, such as from a connected personal computer.
 As a matter of fact, the mechanics of connecting an Arduino to the Raspberry Pi are exactly the same
as those that govern connecting an Arduino to your Windows, OS X, or Linux-based PC. But I am
getting a bit ahead of myself.
 For me, the two coolest things about Arduino are (a) its analog inputs; and (b) shields.
 The Arduino’s analog input pins mean that you can take analog measurements—for instance,
temperature, volume, and so on...and convert them to digital values for processing. This means you
can use the Arduino to interact with the real world, which is largely analog.
Note: Analog Versus Digital Signals
The reason quantities such as volume are analog is because their values change
constantly over time over a wide range of values. By contrast, in the digital world there are
only two values: 0 and 1, off and on, low and high, and so forth. When you convert an
analog signal to digital, you try to approximate the wave-like pattern of analog to the up and
down zig-zag of digital. The more data you feed into the translation, the more faithful the
digital signal is of its analog counterpart (and vice versa).
A shield is an add-on board that extends the functionality of the Arduino. Typically, shields connect
directly on top of the Arduino’s I/O pins...like a soldier holding a shield in front of him, actually.
 Shields put the Arduino board on some serious steroids, let me tell you. It seems that either the
Arduino team or a third party has developed an add-on shield for every conceivable computing (or
noncomputing) purpose. For instance, take a look at this representative smattering of popular Arduino
shields:
 Ethernet Shield (http://is.gd/PU2D0c): Gives your Arduino a wired Ethernet connection (see
Figure 19.2).
FIGURE 19.2 Arduino Uno with Ethernet shield attached on top
 Wi-Fi Shield (http://is.gd/URoZZ9): Gives your Arduino connectivity to 802.1 b/g wireless
networks.
 GSM Shield (http://is.gd/JFB4NV): Gives your Arduino access to carrier networks (you also
need a cellular service carrier’s SIM card).
 Relay Shield (http://is.gd/P63Pb4): Gives your Arduino the ability to control devices that use
higher voltage circuits (perfect for home automation projects).
 Proto Shield (http://is.gd/nkmvNI): Gives you the ability to create your own shield from
scratch—this is simply an unpopulated PCB with header connectivity to Arduino.
 The AlaMode that you learn how to use toward the end of this chapter is actually an Arduino shield.
 Before we proceed into studying the Arduino Uno in great detail, let me return to the concept of the
powerful Arduino community. You don’t have to have lots of money and manufacturing resources at
hand to build your own Arduino.
 As it happens, you can design and create an Arduino either from individual parts or by making use of
several starter kits. Here, have a look:
 DIY Arduino (http://is.gd/70D1hc): This project is pretty novel, but is likely to require quite
a bit of time to undertake.
 Build an Arduino on a Breadboard (http://is.gd/AeVfiP): Believe it or not, it is feasible to
build yourself an Arduino clone for all of $5 in parts.
 Adafruit Arduino Starter Pack (http://is.gd/7qFOJw): This kit includes an Uno R3 and
myriad doo-dads for your experimenting and project prototyping pleasure.
 Arduino Starter Kit (http://is.gd/NS4ff2): This project kit, which includes an Uno R3, is sold
by the Arduino team directly.
 Okay, then. Let’s drill into the Arduino Uno so we can begin to appreciate what the Arduino can do in
Technicolor.
Digging into the Arduino Uno
The word Uno, as you probably already know, means one in Italian, and the Arduino Uno is called
Uno to denote its association with the upcoming Arduino 1.0 PCB. According to the Arduino website,
they are positioning the Uno and the Arduino 1.0 as the reference PCBs going forward.
 As of this writing, the Arduino team has made three revisions to the Uno, with each subsequent
revision adding features. Thus, I advise you to purchase an R3 board if you have anything to say about
it.
 You can easily tell which Uno revision you have by turning the board over and looking for the Rx
label (where x is the revision number). For example, the Revision 3 board is labeled R3.
 Now what’s on the front of the Uno? Figure 19.3 provides an annotated picture for you, but let me
break the components down in a bit more detail:
1: USB for data/power
2: Reset button
3: Pin #13 “blink” LED
4: Digital input/output pins
5: 7V-12V DC power
6: 3.3V and 5V power pins
7: Analog input pins
8: ATmega microcontroller
FIGURE 19.3 Arduino Uno PCB, front view
 ATmel ATmega328P AVR Microcontroller: The “brains” of the Arduino. The chip has a 16
MHz clock speed and 32KB of flash memory.
 14 digital output pins: Six of these pins support Pulse Width Modulation, or PWM. PWM
enables you to take digital input and produce analog output. For instance, you can use PWM to
dim LEDs instead of turning them on and off completely.
 6 analog inputs: This is how you get analog sensor data (think of volume, temperature,
brightness, motion, and so on) into the Arduino.
 USB-to-serial chip: The ATmega16U2 enables the Uno’s USB bus to send and receive serial
data.
 Power supply: The Arduino itself operates at 5V, which means you need to be careful when
you work with the 3.3V Raspberry Pi. The good news here is that the power output pins on the
Uno support both voltages. Incidentally, the 3V3 pin supplies up to 50mA of power.
 Reset: You can use this tactile button switch to reboot the Arduino.
 Power-wise, the Arduino Uno can accept power either through its dedicated power supply or through
USB. If both are connected, the Uno defaults to using the dedicated 5V power supply.
Note: What’s a “Wall Wart”?
The Arduino Uno uses a standard 9V–12V, 250mA or more, AC-to-DC power supply
with a 2.1mm plug. You can learn more about Uno-compatible power supplies by visiting
Arduino Playground at http://is.gd/9WYgSK. The reason why these power supplies, which
are ubiquitous in today’s portable electronics age, are called wall warts is because of the
plug itself. As you doubtless know and much to your chagrin, the bulky transformer tends to
block additional ports in your wall power receptacle or surge protector. Hence the
disparaging term.
As I stated earlier, you can program the Arduino from an external computer. Sure, you could connect
your Uno to your Windows or Mac computer, but in this book I focus squarely on the Raspberry Pi.
Therefore, let’s now turn your attention to how you can link these two wondrous devices.
Connecting the Arduino and the Raspberry Pi
One of the fundamental lessons about physical computing that you should have picked up thus far is
that any given task has several different valid methods of approach.
 Some ways of solving a problem may be more efficient than others; yet others are more or less
expensive to undertake. As long as you’re satisfied with the end result, there is no single, best way.
 The reason I mention this is that there exist several methods for connecting the Arduino Uno to your
Raspberry Pi. Again, you have some ways that are more or less efficient (and dangerous!) than others.
Let me describe for you how some of these different types of connections work.
Connecting the Raspberry Pi GPIO Pins to the Arduino Serial Pins
 This method requires the use of a voltage divider or logic level converter (buy one from Sparkfun at
http://is.gd/Ws16r8) to manage the 3.3V/5V voltage difference between the two devices.
 The advantage to this approach is that you free up the Raspberry Pi’s USB port for another use. The
disadvantage is, as I just said, you must account for the voltage difference; doing this typically
involves the introduction of a breadboard to host the logic level converter and jumper wires.
 If you’re brave, you can study Oscar Liang’s tutorial on connecting the Raspberry Pi and Arduino Uno
via serial GPIO, found at http://is.gd/I2QY7T.
Connecting the Raspberry Pi GPIO Pins to the Arduino I2C
 This connection method does not require a logic level converter, as long as you configure the Pi as a
master device and the Arduino as a slave device. Here are step-by-step instructions, again from
Oscar Liang: http://is.gd/XBDg13.
 The advantage to this method is that you free up both the USB bus as well as the serial pins on both
devices. The disadvantage is that configuration is difficult. For instance, if you mess up the
master/slave I2C communication between the devices you can easily fry your Pi with an overvoltage.
Connecting the Raspberry Pi to the Arduino via USB
 Ah yes...simplicity itself. This is the cleanest connection method insofar as you can literally plug the
Arduino Uno into one of the Pi’s USB ports and access the Uno as a serial USB device.
 The issue with this connection method, naturally, is one of power. If you have a wall wart power
supply for your Arduino, you’re all set. Another solution is to plug your Uno into a powered USB hub
that is in turn connected to the Pi’s USB port. That’s actually the method I use.
Connecting the Raspberry Pi to the Arduino via a Shield or Bridge Board
 You now know what Arduino shields are, and it should come as no surprise to you that developers
have taken it upon themselves to create Arduino-Raspberry Pi connection shields.
 One of the most popular shields in this category is the Ponte (http://is.gd/nAvtEi). This shield is in a
“currently experimental” state as of this writing, but it looks like a promising project.
 Imagine the possibilities of stacking a Ponte on top of a Raspberry Pi, an Arduino on top of the Ponte,
and another Arduino shield stacked on top of the Arduino!
Connecting the Raspberry Pi to an Arduino Clone
 The AlaMode shield and the Gertboard are both Arduino clones. Although the AlaMode is an
Arduino clone that fits on top of the Raspberry Pi’s GPIO header like any traditional shield, the
Gertboard’s ATmega microcontroller is just one of a number of widgets soldered into this
multipurpose experimentation board. I show you how to use the AlaMode in this chapter, and you
learn more about the Gertboard in Chapter 20, “Raspberry Pi and the Gertboard.”
 Simply connecting the Arduino and the Raspberry Pi is only half the battle. You also have to take a
look at the software side of the equation. This involves three discrete tasks:
 Configuring the Pi to recognize the Arduino
 Installing the Arduino IDE software
 Developing sketches on the Pi and uploading them to the Arduino
Note: All About Sketch
In Arduino nomenclature, a sketch is nothing more than a script file that constitutes your
program source code. Sketch scripts, which will come up again, in the section “Task:
Install and Configure Arduino IDE on the Raspberry Pi,” later in this chapter, are plain text
files with an .ino extension that are readable in any text editor.
I believe the term sketch is meant to denote the programmer’s ability to quickly and
easily sketch out his or her ideas in code and to be able to test the code immediately on a
connected Arduino device.
Understanding the Arduino Development Workflow
You already know that the Arduino has no operating system of its own. I myself look at the Arduino
as basically a dumb terminal. You can compose a set of instructions on a remote device, and then
upload that script to the Arduino, where the script is stored in flash memory.
 Immediately, the Arduino begins executing what’s in the script. Assuming the script is error-free and
the Arduino does not suffer a hardware problem, the device will dutifully perform that work,
theoretically forever.
 Even if you press the hardware button to reset the Arduino, the currently loaded sketch continues to