Caffeine Monkey: 
Automated Collection, Detection and 
nalysis of Malicious JavaScript 
A
Ben Feinstein, CISSP 
Daniel Peck 
{bfeinstein, dpeck}@secureworks.com 
SecureWorks, Inc. 
Introduction 
In recent years, the web browser has likely become the single most ubiquitous computing 
application. Web browsers can be found everywhere, from being embedded in video game 
consoles and handheld devices to being installed on large servers supporting the 
enterprise. As with any widely deployed type of software, web browsers have become an 
increasingly popular target for attack. This trend will only continue. Today’s browsers 
represent a complex application stack foisted atop the Operating System’s (OS) stack. 
Putting aside the complexity of achieving robust, cross‐browser compatibility, web 
developers are essentially coding to the browser’s stack, with the goal of portability across 
both browsers and OS platforms. The growth in popularity of “Web 2.0” sites that leverage 
the most advanced capabilities of the browser stack has contributed to blurring the 
distinction between data and executable code. This is especially apparent when 
considering support for dynamically interpreted scripting, in particular JavaScript. Due to 
the nature of dynamic script interpretation in the browser, it is difficult for many widely 
adopted security technologies to mitigate the client‐side browser attack vector. 
In our research, we examined the current state of JavaScript obfuscation and evasion 
techniques, approaches for collecting JavaScript samples from the wild, and methods for 
analyzing the collected scripts. We developed a suite of tools for collecting and indexing 
JavaScript, interpreting the scripting in a sandboxed environment, and performing 
functional analysis for manual, as well as automated detection mechanisms. 
At the outset, we believed that investigating new approaches was warranted. Current 
methods tend to fall into two large categories: fully automated client honeypot systems or 
manual human analysis. Client honeypot technology offers a powerful way to actively 
identify sites attempting to exploit the browser, and has reportedly been used to find a 
number of zero‐day attacks. However there are significant drawbacks to typical, high‐
interaction client honeypots, as they tend to result in a lot of overhead. In general, a client 
honeypot requires heavy‐weight processing in order to detect exploits and recreate the 
virtual machine after each completed test. These systems usually produce very good 
results, but may not be feasible for the independent researcher or small organization to 
Feinstein & Peck 
applicable to other scripting languages. 
Whitespace randomization is likely the simplest obfuscation technique to implement. 
Taking advantage of the fact that JavaScript ignores whitespace, an attacker can 
strategically scatter whitespace characters throughout their code. Without changing the 
semantics of the JavaScript, this technique will yield large changes in the script’s on‐the‐
wire binary representation. It is trivial at runtime to determine the behavior of a script. 
However, many security technologies rely on content matching for detection and would be 
blinded by this obfuscation technique. Whitespace randomization is demonstrated by the 
following scripting: 
2 
Black Hat USA 2007
deploy and maintain. Additional processing is still required to move beyond elementary 
behavioral analysis. For example, if a malicious JavaScript sample only affects a particular 
version of Internet Explorer which is not being tested against, a previously unknown 
exploit could go undetected. 
On the other side of the spectrum is the manual analysis performed by human researchers. 
These tedious techniques include walking through each layer of obfuscation, wrapping the 
sample script in a  HTML tag, or replacing document.write() with 
alert(). Some of the more recently crafted malicious scripts are explicitly designed to 
bypass these manual analysis techniques. Using these techniques can be both labor 
intensive and dangerous. With the increasing number of browser attacks, analysts run the 
risk of being exploited themselves. While these methods still have a useful place in the 
analyst’s toolbox, we felt that a hybrid approach might prove to be more valuable.  
Thus was born the Caffeine Monkey system. The core JavaScript engine, a safe JavaScript 
deobfuscator, logger and profiler, is based on extensions to the open source SpiderMonkey 
JavaScript implementation. The Monkey was hungry and needed to be fed, so we deployed 
an open source web crawling solution. A MySQL database served to organize the crawls, 
the retrieved documents, and our analysis results. The other assorted processing tasks 
were handled by a collection of custom Python, Perl, and shell scripting. 
The source code and documentation for the Caffeine Monkey system will be made available 
during Black Hat USA 2007 at http://www.secureworks.com/research/tools/. All code will 
be released under an as‐yet‐to‐be‐determined OSI approved open source license. 
This paper will explore the predominant obfuscation techniques and how Caffeine Monkey 
can find them, dissect them, and reveal their true functionality. We will also share our 
houghts for future research in this area. 
t
JavaScript Obfuscation & Evasion Techniques 
To begin, we will examine some of the basic forms of obfuscation, going from the least 
effective, and most easily detected, to the most effective. While we are looking at these 
techniques in the context of the JavaScript language, in many case these same concepts are 
As you can see, the on‐the‐wire binary representation is significantly different but the 
ASCII: var i = “foooo”; 
Hex: 7661 7220 6920 3d20 2266 6f6f 6f6f 223b 0a 
ASCII: var  i 
= 
“foooo”; 
Hex: 7661 7209 2069 2009 2020 3d20 2020 2020 2022 666f 6f6f 6f22 3b 
Figure 1 
semantics of the scripts are identical. 
Another basic evasion technique involves the addition of random comments and the 
manipulation of existing comments in scripting. Just like whitespace, comments are ignored 
by JavaScript. This is very similar to whitespace randomization, in that the actual code 
remains unchanged while the on‐the‐wire binary representation is dramatically altered. 
Manipulation of comments can also be effective in confusing an analyst. Just as in the case 
of whitespace randomization, runtime analysis of the script’s behavior is straightforward. 
However, content matching would have difficulty determining the runtime behavior. 
Other, more sophisticated obfuscation techniques exist offering even better abilities of 
evasion. String obfuscation usually involves a custom decoder, anywhere from a simple 
XOR function to a more complex Caesar cipher or even more elaborate methods.  Although 
this technique is normally not needed to bypass detection mechanisms, it can make 
analysis much more difficult for the researcher and help maintain the script’s effectiveness 
over a longer period of time. This technique can also be as simple as splitting the string into 
multiple variables and concatenating them later in the script, perhaps using the 
document.write() method in combination with String.fromCharCode(). These 
strings can also be encoded using various hexadecimal and Unicode representations. The 
following example shows several ways in which the string “we’ve got a problem” can be 
represented. 
F
3 
B
As you can see, there are many ways to represent this textual phrase, making purely 
signature based detection impractical due to the large number of different variations.  With 
“we%27ve%20got%20a%20problem” 
“%77%65%27%76%65%20%67%6F%74%20%61%20%70%72%6F%62%6C%65%6D” 
“\x77\x65\x27\x76\x65\x20\x67\x6F” + 
“\x74\x20\x61\x20\x70\x72\x6F\x62\x6C\x65\x6D” 
“%u0077\u0065\x27%76%65%20\x67%6F%74\u0020%61%20%70%72%u006F%62\x6C%65\x
6D” 
Figure 2 
einstein & Peck
lack Hat USA 2007
just the example string and the few encoding forms we’ve mentioned there are more than 
519 possible combinations! 
Another obfuscation technique is variable name randomization and function pointer 
reassignment. A variable or function can be reassigned to another variable or function, 
potentially misleading analysts trying to decipher the code. This technique has also proved 
effective at bypassing a variety of security technologies. Short of keeping track of all the 
variable and function assignments at runtime, a security device would have no assurance 
that a function named unescape() is actually the function defined in by JavaScript 
specification as unescape(). With most security devices suffering from upper‐bound 
requirements on space and time complexity this task becomes increasingly infeasible. For 
example: 
As shown above, detection is becoming more and more difficult. Integer obfuscation is yet 
another technique used for evasion. Suppose a certain memory address was needed by a 
script, but the presence of this memory location in the code could be flagged as suspicious 
by a variety of detection mechanisms. Using integer obfuscation we can generate the same 
number with simple mathematical functions. For instance, “0x04000000” could be 
randomFunctionName = unescape; 
function2 = eval; 
var A1 = 
randomFunctionName(“%61%6c%65%72%74%28%22%77%65%27%72%65%20%67%6f%74%2
0%61%20%70%72%6f%62%6c%65%6d%20%58%65%72%65%22%29”); 
function2(A1); 
Figure 3 
Feinstein & Peck 
4 
Black Hat USA 2007
expressed as 16,777,216 * 42, or any number of other ways. 
One of the most sophisticated obfuscation techniques is block randomization. This involves 
structurally changing a script’s statements and code paths to be functionally identical but 
syntactically different. Typically a script’s if/else block and while/for loops are 
restructured, however other constructs can also be altered. while, for, and do-while 
loops can be transformed in a number of ways: 
for (i = 0; i < 100; i++) { /* for loop */ } 
while (i < 100) { i++; /* while loop */ } 
do { i++; /* do..while loop */ } while (i < 100) 
Figure 4 
Feinstein & Pec
SecureWorks Research. 
Using a single seed of www.myspace.com we collected approximately 225,000 web 
documents over a continuous period of about three and a half days, with a total yield of 7.9 
GB. Of these, 364 documents (4.5 MB) were of Content‐Type application/x-
javascript or text/javascript, comprising about 0.2% of the total. This comprised 
our sample. 
k 
5 
Black Hat USA 2007