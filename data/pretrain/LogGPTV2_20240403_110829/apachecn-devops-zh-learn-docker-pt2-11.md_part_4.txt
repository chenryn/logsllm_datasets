### 使用 TUF 进行映像签名和验证
Docker 社区希望对 Docker 化软件的代码和版本有一个强有力的加密保证。DCT 是与 Docker 平台的 1.8 版本相关联的新的安全相关功能。DCT 本质上将**更新框架** ( **TUF** )集成到 Docker 中，使用了一个开源工具——公证人，它提供了对任何内容的信任。
TUF 帮助开发人员保护新的或现有的软件更新系统，这些系统经常容易受到许多已知攻击。TUF 通过提供一个全面而灵活的安全框架来解决这个普遍存在的问题，开发人员可以将其与任何软件更新系统集成。软件更新系统是在客户端系统上运行的应用，用于获取和安装软件。这可以包括对已经安装的软件的更新，甚至是全新的软件。
**防止映像伪造**:一旦建立信任，DCT 就提供了抵御具有特权网络位置的恶意演员的能力，也称为**中间人** ( **MitM** )攻击。
**防止重放攻击**:在典型的重放攻击中，以前有效的有效载荷被重放以欺骗另一个系统。在软件更新系统的情况下，旧版本的签名软件可以作为最新版本出现。如果用户被骗安装了特定软件的旧版本，恶意行为者可以利用已知的安全漏洞危害用户**的主机。DCT 在发布映像时使用时间戳密钥，提供防止重放攻击的保护。这确保了用户收到的是最新的。**
 ****防止密钥泄露**:如果密钥泄露，您可以利用该离线密钥执行密钥轮换。该密钥轮换只能由具有离线密钥的密钥来完成。在这种情况下，您需要创建一个新的密钥，并使用您的离线密钥对其进行签名。
其他加强安全的项目包括:
*   **Clair** :这是一个开源项目，针对应用 Docker 容器([https://github.com/coreos/clair](https://github.com/coreos/clair))中的漏洞进行静态分析。它在本地审核 Docker 映像，并检查容器注册表集成中的漏洞。最后，在第一次运行期间，Clair 将使用来自其数据源的漏洞数据引导其数据库。
*   **公证**:Docker 公证项目是一个框架，允许任何人通过潜在的不安全网络安全地发布和访问内容(例如，Docker 映像)。公证允许用户对内容进行数字签名和验证。
*   **鹦鹉螺项目**:鹦鹉螺是 Docker 的映像扫描功能，可以在 Docker Hub 中检查映像，帮助发现 Docker 容器中可能存在的漏洞。如今，鹦鹉螺只与 Docker Hub 一起工作。它不支持私有或内部注册。
*   **AuthZ Plugins** :原生 Docker 访问控制是全有或全无——你要么可以访问所有 Docker 资源，要么不可以。AuthZ 框架是 Twistlock 对 Docker 代码库的贡献。AuthZ 允许任何人为 Docker 编写授权插件，以提供对 Docker 资源的细粒度访问控制。
*   **Docker 可信注册** ( **DTR** ):这是 Docker 的企业版 Docker Hub。您可以在内部或虚拟私有云中运行 DTR，以支持安全性或合规性要求。Docker Hub 是开源的，而 DTR 是 Docker 销售的基于订阅的产品。与注册管理机构的通信使用顶级域名系统，以确保机密性和内容完整性。默认情况下，使用公共公钥基础设施信任的证书是强制性的，但是 Docker 允许将公司内部 CA 根证书添加到信任存储中。
### 新兴的安全方法
众所周知，Docker 平台使开发人员可以轻松地更新和控制容器中的数据和软件。同样，Docker 能够有效地确保构成应用的所有组件始终是最新的和一致的。Docker 还天生提供了在同一物理主机上运行的应用的逻辑隔离。这种著名的隔离完美地促进了安全策略的细粒度和高效实施。然而，与传统环境一样，静态数据容易受到来自网络和内部攻击者的各种攻击。Docker 环境遭受猛烈轰炸还有其他负面机会和可能性。因此，人们坚持要有适当的保障措施。容器和数据更快、更容易的扩散可以显著扩大以容器化云为目标的威胁数量和类型。
About Vormetric transparent encryption
Organizations can establish strong controls around their sensitive data in Docker implementations in an efficient manner. This solution enables data-at-rest encryption, privileged user access control, and the collection of security intelligence logs for structured databases and unstructured files. With these capabilities, organizations can establish persistent, strong controls around their stored Docker images and protect all data generated by Docker containers when the data is being written to the Docker host storage on an NFS mount or a local folder.
## 容器安全的最佳实践
有强大而有弹性的安全解决方案来增强提供商和用户的信心，让他们能够清晰、敏捷地迎接容器化的旅程。在本节中，我们提供了从不同来源收集的许多提示、最佳实践和关键指南，以便安全管理员和顾问能够严密保护 Docker 容器。归根结底，如果容器在多租户系统中运行，而您没有使用经过验证的安全实践，那么在安全方面肯定存在潜在的危险。
首要的建议是，不要在你的系统上运行随机的和未经测试的 Docker 映像。制定策略并利用 Docker 映像和容器的可信存储库，以订阅和使用应用和数据容器进行应用开发、打包、运输、部署和交付。从过去的经验来看，任何从公共领域下载的不受信任的容器都可能导致恶意和混乱的情况。Linux 发行版，如**红帽企业版 Linux** ( **RHEL** )具有以下机制，以帮助管理员确保最高的安全性。
Docker 专家(丹尼尔·沃尔什咨询工程师，红帽)广泛推荐的最佳实践如下:
*   仅运行来自受信任方的容器映像
*   只要有可能，容器应用就应该放弃特权或在没有特权的情况下运行
*   确保内核总是用最新的安全修复程序更新；安全内核至关重要
*   确保有支持团队在关注内核中的安全缺陷
*   使用高质量支持的主机系统来运行容器，并定期进行安全更新
*   不要禁用主机操作系统的安全功能
*   检查您的容器映像是否存在安全缺陷，并确保提供商及时修复它们
如前所述，最大的问题是 Linux 中的所有东西都没有命名空间。目前，Docker 使用五个名称空间来改变任何系统的进程视图:进程、网络、挂载、主机名和共享内存。虽然这些为用户提供了一定程度的安全性，但绝不是全面的安全性，如 KVM。在 KVM 环境中，虚拟机中的进程不直接与主机内核对话。他们不能访问内核文件系统。设备节点可以与虚拟机内核对话，而不是与主机对话。因此，为了在虚拟机之外进行权限升级，该过程必须颠覆虚拟机的内核，在虚拟机管理程序中找到启用漏洞，突破 SELinux 控件(sVirt)，并攻击主机的内核。在容器环境中，方法是保护主机免受容器内进程的影响，并保护容器免受其他容器的影响。它是关于将多个安全控件组合或聚集在一起，以保护容器及其内容。
基本上，我们希望设置尽可能多的安全屏障，以防止任何形式的爆发。如果一个特权进程可以突破一个遏制机制，那么这个想法就是用层次结构中的下一个障碍来阻止它们。有了 Docker，就有可能利用尽可能多的 Linux 安全机制。以下是可能采取的安全措施:
*   **文件系统保护**:文件系统需要是只读的，以避免任何未经授权的写入。也就是说，特权容器进程不能写入它们，也不会影响主机系统。通常，大多数应用不需要向它们的文件系统写任何东西。有几种带有只读文件系统的 Linux 发行版。因此，可以阻止特权容器进程以读写方式重新装载文件系统。这完全是为了阻止在容器中装载任何文件系统的能力。
*   **写时拷贝文件系统** : Docker 一直在使用**高级多层统一文件系统** ( **AUFS** )作为容器的文件系统。AUFS 是一个分层的文件系统，可以透明地覆盖一个或多个现有的文件系统。当一个进程需要修改一个文件时，AUFS 首先创建该文件的一个副本，并且能够将多个层合并成一个文件系统的单一表示。这个过程被称为写时复制，这可以防止一个容器看到另一个容器的变化，即使它们写入相同的文件系统映像。一个容器不能更改映像内容来影响另一个容器中的进程。
*   **能力的选择**:通常有两种方式进行权限检查:特权进程和非特权进程。特权进程会绕过各种内核权限检查，而非特权进程会根据进程的凭据接受完全权限检查。最近的 Linux 内核将传统上与超级用户相关的特权划分为不同的单元，称为**功能**，可以独立启用和禁用。功能是每个线程的属性。移除功能会给 Docker 容器带来一些积极的变化。能力总是决定着 Docker 的功能、可访问性、可用性、安全性等等。因此，在开始添加和删除功能的旅程时，它需要更深入的思考。
*   **保持系统和数据安全**:在企业和服务提供商在生产环境中使用容器之前，需要解决一些安全问题。由于以下三个原因，容器化最终将使保护应用变得更加容易:
信息技术部门负责与基础设施相关的安全缺陷。应用团队修复容器内部的缺陷，并负责运行时依赖关系。缓解 IT 和应用开发团队之间的紧张关系有助于平稳过渡到混合云模式。为了保护容器和它们的运行时基础设施，每个团队的职责都有明确的划分。有了这样一个清晰的隔离，主动识别任何可见和不可见的危及安全的考验，并迅速消除时间，政策工程和执行，精确和完美的配置，利用适当的安全挖掘和缓解工具，等等，正在系统地完成。
*   **利用 Linux 内核功能**:一台普通的服务器(裸机或虚拟机)需要以 root 身份运行一堆进程。这些工具通常包括`ssh`、`cron`、`syslogd`、硬件管理工具(例如，加载模块)和网络配置工具(例如，处理 DHCP、WPA 或 VPN)。容器与众不同，因为几乎所有这些任务都是由承载和运行容器的基础设施来处理的。由安全专家撰写的各种博客中有一些最佳实践、关键指南、技术诀窍等。您可以在[https://docs.docker.com/](https://docs.docker.com/)找到一些最有趣、最鼓舞人心的安全相关细节。
### Docker 容器的安全部署指南
Docker 容器越来越多地托管在生产环境中，供许多人公开发现和使用。特别是，随着云技术的更快采用，全球组织和机构的 IT 环境正在得到有条不紊的优化和转变，以灵活、果断地托管更广泛的虚拟机和容器。为了加快将容器带到云环境(私有、公共、混合和社区)的过程，有了新的改进和实现，例如 Flocker 和 Clocker。部署容器时必须遵循一些建议。众所周知，容器允许开发人员和系统管理员无缝部署业务运营所需的应用和服务的容器，从而显著降低了开销。但是，由于 Docker 利用与主机系统相同的内核来减少对资源的需求，因此如果配置不当，容器可能会面临重大的安全风险。在部署容器时，开发人员和系统管理员都需要严格遵循一些经过仔细注释的准则。例如，[https://github . com/gdssesecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)以表格形式详细阐述了所有正确的细节。
一个不争的事实是，分布式和复杂应用中的软件缺陷为智能攻击者和黑客侵入托管关键、机密和客户数据的系统开辟了道路。因此，安全解决方案在信息技术栈的所有层中被坚持和根深蒂固，因此，在不同的级别和层出现了许多类型的安全漏洞。例如，外围安全仅解决了部分问题，因为不断变化的要求要求允许员工、客户和合作伙伴访问网络。同样，还有防火墙、入侵检测和防御系统、**应用交付控制器**(**ADC**)、访问控制、多因素身份验证和授权、打补丁等等。然后，为了在传输、持久化和被应用使用时保护数据，有加密、隐写术和混合安全模型。所有这些都是反应性和现实的机制，但日益增长的趋势都是关于虚拟企业坚持主动和先发制人的安全方法。随着信息技术趋向于备受期待的虚拟信息技术，安全专家对安全问题和影响给予了额外的重视。
### Docker 安全的未来
在不久的将来，容器化领域将会出现许多值得注意的即兴创作、变革和中断。通过大量的创新和集成，Docker 平台被定位为加强容器化进程的领先平台。以下是通过灵活利用 Docker 技术取得的主要成就:
*   **强化分布式范式**:虽然计算将越来越分布式和联邦化，但 MSA 在 IT 中扮演着非常决定性和更深层的角色。Docker 容器正在成为托管和交付越来越多的微服务的最有效容器。随着容器编排技术和工具获得更大的认可，微服务(特定的和通用的)得到识别、匹配、编排和编排，以形成业务感知的复合服务。
*   **赋能云范式**:云的理念正强烈地吸引着 IT 界，以引入备受推崇的 IT 基础架构合理化、简化、标准化、自动化和优化。抽象和虚拟化概念是云模式空前成功的关键，它们正在渗透到每一种信息技术模块中。最初，它始于服务器虚拟化，现在它完全是关于存储和网络虚拟化。随着我们周围所有技术的进步，人们普遍渴望实现软件定义的基础设施(软件定义的计算、存储和网络)。Docker 引擎是 Docker 平台的核心和关键部分，它被适当地固化，以便为容器在软件定义的环境中运行带来必要的资格，而没有任何障碍。
*   **实现 IT 弹性、可移植性、敏捷性和适应性**:容器正在成为灵活和未来的 IT 构件，带来更多的弹性、多功能性、优雅和柔软性。更快地提供信息技术资源以确保更高的可用性和实时可伸缩性，轻松消除开发和运营团队之间的各种摩擦，保证信息技术的本机性能，实现有组织和优化的信息技术以提高信息技术生产率，等等，这些都是 Docker 容器向更智能的信息技术发展的典范。
容器将是虚拟机和裸机服务器的战略性补充，以带来更深层次的信息技术自动化、加速和增强，从而实现备受宣传和期待的业务敏捷性、自主性和可负担性。
## 摘要
安全绝对是一个挑战，也是不可回避的重要方面。如果一个容器遭到破坏，那么关闭容器主机并不是一件难事。因此，确保容器和主机的安全对于容器化概念的繁荣是不可或缺的，尤其是当信息技术系统的集中化和联盟化在上升的时候。在这一章中，我们特别关注 Docker 容器令人作呕和毁灭性的安全问题，并解释了为承载动态、企业级和任务关键型应用的容器提供万无一失的安全解决方案的方式和方法。在即将展开的日子里，将会有新的安全方法和解决方案，以保证 Docker 容器和主机的不可穿透和牢不可破的安全性，因为容器及其内容物的安全性对于服务提供商和消费者来说是至关重要的。**