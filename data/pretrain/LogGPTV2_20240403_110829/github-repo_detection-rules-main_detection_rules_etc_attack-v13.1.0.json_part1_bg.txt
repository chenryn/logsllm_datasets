### Monitoring for Newly Executed Processes Interacting with the Windows Registry

**Objective:**
Monitor newly executed processes that may interact with the Windows Registry to gather information about the system, configuration, and installed software.

#### Implementation 1: Suspicious Processes with Registry Keys

**Detection Pseudocode:**
```python
suspicious_processes = filter(
    processes,
    (EventId == "1" OR EventId == "4688") AND
    (
        (ProcessCommandLine LIKE '%reg%' AND ProcessCommandLine LIKE '%query%') OR
        (ProcessCommandLine LIKE '%Registry%' AND
         (ProcessCommandLine LIKE '%HKEY_CLASSES_ROOT%' OR
          ProcessCommandLine LIKE '%HKCR%'))
    )
)
```

**Detection Notes:**
- The `New-PSDrive` PowerShell cmdlet creates temporary and persistent drives mapped to or associated with a location in a data store, such as a registry key (PSProvider "Registry"). The `Get-ChildItem` cmdlet retrieves items in one or more specified locations. By using both, you can enumerate COM objects in one or more specified locations.
- For Security Auditing event ID 4688, depending on the Windows version, you might need to enable the group policy `Administrative Templates\System\Audit Process Creation\Include command line in process creation events` to include the command line in process creation events.
- For Windows Sysmon event ID 1, installation of an application with a configuration file is required.
- For Windows Sysmon event ID 1, addition of `ProcessCreate` events in the configuration file is required.

#### Implementation 2: reg.exe Spawned from Suspicious cmd.exe

**Detection Pseudocode:**
```python
reg_processes = filter(
    processes,
    (EventId == "1" OR EventId == "4688") AND
    (ProcessFilePath LIKE '%reg.exe%' AND ProcessParentFilePath LIKE '%cmd.exe%')
)

cmd_processes = filter(
    command_line,
    (event_id == "1" OR event_id == "4688") AND
    (ProcessFilePath LIKE '%cmd.exe%' AND ProcessParentFilePath NOT LIKE '%explorer.exe%')
)

suspicious_processes = SELECT r.ProcessGuid, r.ProcessFilePath, c.ProcessFilePath AS ProcessParentFilePath
FROM reg_processes r
INNER JOIN cmd_processes c
ON r.ProcessParentGuid = c.ProcessGuid
```

**Detection Notes:**
- For Security Auditing event ID 4688, depending on the Windows version, you might need to enable the group policy `Administrative Templates\System\Audit Process Creation\Include command line in process creation events` to include the command line in process creation events.
- For Windows Sysmon event ID 1, installation of an application with a configuration file is required.
- For Windows Sysmon event ID 1, addition of `ProcessCreate` events in the configuration file is required.

#### Implementation 3: Rare LolBAS Command Lines

**Detection Pseudocode:**
```python
count_lolbas_processes = filter(
    processes,
    (EventId == "1" OR EventId == "4688") AND
    ProcessFilePath IN ('FilePathToLolbasProcess01.exe', 'FilePathToLolbasProcess02.exe')
).GROUP_BY(ProcessFilePath)

number_standard_deviations = 1.5

suspicious_processes = SELECT ProcessFilePath, ProcessCount,
       AVG(ProcessCount) Over() - STDEV(ProcessCount) Over() * number_standard_deviations as LowerBound
FROM count_lolbas_processes
WHERE ProcessCount < LowerBound
```

**Detection Notes:**
- Replace `FilePathToLolbasProcessXX.exe` with the actual lolBAS process names used by your organization.
- The `number_standard_deviations` parameter should be tuned accordingly.
- Identifying outliers by comparing the distance from a data point to the average value against a certain number of standard deviations is recommended for data values that are symmetrically distributed. If your data is not normally distributed, try a different algorithm such as the Interquartile Range (IQR).
- For Security Auditing event ID 4688, depending on the Windows version, you might need to enable the group policy `Administrative Templates\System\Audit Process Creation\Include command line in process creation events` to include the command line in process creation events.
- For Windows Sysmon event ID 1, installation of an application with a configuration file is required.
- For Windows Sysmon event ID 1, addition of `ProcessCreate` events in the configuration file is required.

---

### Threat Group Activities

#### Tropic Trooper
- **Description:** Tropic Trooper has installed a service pointing to a malicious DLL dropped to disk.
- **Reference:** [PWC KeyBoys Feb 2017](https://web.archive.org/web/20211129064701/https://www.pwc.co.uk/issues/cyber-security-services/research/the-keyboys-are-back-in-town.html)

#### FIN6
- **Description:** FIN6 has used encoded PowerShell commands.
- **Reference:** [Visa FIN6 Feb 2019](https://usa.visa.com/dam/VCOM/global/support-legal/documents/fin6-cybercrime-group-expands-threat-To-ecommerce-merchants.pdf)

#### APT32
- **Description:** APT32 has performed code obfuscation, including encoding payloads using Base64 and using a framework called "Dont-Kill-My-Cat (DKMC)." They also encrypt the library used for network exfiltration with AES-256 in CBC mode in their macOS backdoor.
- **References:**
  - [GitHub Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation)
  - [FireEye APT32 May 2017](https://www.fireeye.com/blog/threat-research/2017/05/cyber-espionage-apt32.html)
  - [Cybereason Oceanlotus May 2017](https://www.cybereason.com/blog/operation-cobalt-kitty-apt)
  - [ESET OceanLotus Mar 2019](https://www.welivesecurity.com/2019/03/20/fake-or-fake-keeping-up-with-oceanlotus-decoys/)
  - [ESET OceanLotus macOS April 2019](https://www.welivesecurity.com/2019/04/09/oceanlotus-macos-malware-update/)

#### CORALDECK
- **Description:** CORALDECK searches for specified files.
- **Reference:** [FireEye APT37 Feb 2018](https://www2.fireeye.com/rs/848-DID-242/images/rpt_APT37.pdf)

#### Rocke
- **Description:** Rocke used malware to download additional malicious files to the target system.
- **Reference:** [Talos Rocke August 2018](https://blog.talosintelligence.com/2018/08/rocke-champion-of-monero-miners.html)

#### GravityRAT
- **Description:** GravityRAT executes commands remotely on the infected host.
- **Reference:** [Talos GravityRAT](https://blog.talosintelligence.com/2018/04/gravityrat-two-year-evolution-of-apt.html)

#### Turla
- **Description:** Turla RPC backdoors can be used to transfer files to/from victim machines on the local network.
- **References:**
  - [ESET Turla PowerShell May 2019](https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/)
  - [Symantec Waterbug Jun 2019](https://www.symantec.com/blogs/threat-intelligence/waterbug-espionage-governments)

#### Waterbear
- **Description:** Waterbear has the ability to decrypt its RC4 encrypted payload for execution.
- **Reference:** [Trend Micro Waterbear December 2019](https://www.trendmicro.com/en_us/research/19/l/waterbear-is-back-uses-api-hooking-to-evade-security-product-detection.html)

#### HyperBro
- **Description:** HyperBro has used HTTPS for C2 communications.
- **Reference:** [Unit42 Emissary Panda May 2019](https://unit42.paloaltonetworks.com/emissary-panda-attacks-middle-east-government-sharepoint-servers/)

#### admin@338
- **Description:** admin@338 has sent emails with malicious Microsoft Office documents attached.
- **Reference:** [FireEye admin@338](https://www.fireeye.com/blog/threat-research/2015/11/china-based-threat.html)

#### QUADAGENT
- **Description:** QUADAGENT used the PowerShell filenames `Office365DCOMCheck.ps1` and `SystemDiskClean.ps1`.
- **Reference:** [Unit 42 QUADAGENT July 2018](https://researchcenter.paloaltonetworks.com/2018/07/unit42-oilrig-targets-technology-service-provider-government-agency-quadagent/)