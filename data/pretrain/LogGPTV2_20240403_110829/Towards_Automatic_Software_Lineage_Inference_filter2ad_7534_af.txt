lies using phylogenetic methods to understand statistical
relationships and to identify families [23]. Ma et al. stud-
ied diversity of exploits used by notorious worms and
constructed dendrograms to identify families and found
non-trivial code sharing among different families [31].
Lindorfer et al. investigated the malware evolution process
by comparing subsequent versions of malware samples
that were collected by exploiting embedded auto-update
functionality [29]. Hayes et al. pointed out the necessity
of systematic evaluation in malware phylogeny systems
and proposed two models to artiﬁcially generate refer-
ence sets of samples: mutation-based model and feature
accretion-based model [17].
11 Conclusion
In this paper, we proposed new algorithms to infer soft-
ware lineage of program binaries for two types of lineage:
straight line lineage and directed acyclic graph (DAG)
lineage. We built ILINE to systematically explore the
entire design space depicted in Figure 1 for software lin-
eage inference and performed over 2,000 different experi-
ments on large scale real-world programs—1,777 good-
ware spanning over a combined 110 years of development
history and 114 malware with known lineage. We also
built IEVAL to scientiﬁcally measure lineage quality with
respect to the ground truth. Using IEVAL, we evaluated
seven different metrics to assess diverse properties of lin-
eage, and recommended two metrics—partial order mis-
matches and graph arc edit distance. We showed ILINE
effectively extracted evolutionary relationships among
program binaries with over 84% mean accuracy for good-
ware and over 72% for malware.
12 Acknowledgment
We would like to thank our shepherd Fabian Monrose
for his support in ﬁnalizing this paper. We also would
like to thank the anonymous reviewers for their insightful
comments. This material is based upon work supported by
Lockheed Martin and DARPA under the Cyber Genome
Project grant FA975010C0170. Any opinions, ﬁndings
and conclusions or recommendations expressed in this
material are those of the authors and do not necessarily
reﬂect the views of Lockheed Martin or DARPA.
References
[1] M. Bailey, J. Oberheide, J. Andersen, F. J. Z. Morley Mao, and
J. Nazario. Automated classiﬁcation and analysis of internet
malware.
In International Symposium on Recent Advances in
Intrusion Detection, September 2007.
[2] U. Bayer, P. M. Comparetti, C. Hlauschek, C. Kruegel, and
E. Kirda. Scalable, behavior-based malware clustering. In Network
and Distributed System Security Symposium, 2009.
[3] L. A. Belady and M. M. Lehman. A model of large program
development. IBM Systems Journal, 15(3):225–252, 1976.
[4] M. Bender, M. Farach-Colton, G. Pemmasani, S. Skiena, and
P. Sumazin. Lowest common ancestors in trees and directed
acyclic graphs. Journal of Algorithms, 57(2):75–94, 2005.
[5] zynamics BinDiff.
http://www.zynamics.com/
bindiff.html. Page checked 5/23/2013.
[6] DARPA-BAA-10-36, Cyber Genome Program. https://www.
fbo.gov/spg/ODA/DARPA/CMO/DARPA-BAA-10-36/
listing.html. Page checked 5/23/2013.
94  22nd USENIX Security Symposium 
USENIX Association
[7] J. Davies, D. M. German, M. W. Godfrey, and A. Hindle. Software
bertillonage: ﬁnding the provenance of an entity.
In Working
Conference on Mining Software Repositories, New York, New
York, USA, 2011.
[8] F. de la Cuadra. The geneology of malware. Network Security,
2007(4):17–20, 2007.
[9] T. Dumitras and I. Neamtiu. Experimental challenges in cyber
security: a story of provenance and lineage for malware. In Cyber
Security Experimentation and Test, 2011.
[10] T. Dumitras and D. Shou. Toward a standard benchmark for
computer security research: the worldwide intelligence network
environment (WINE). In Building Analysis Datasets and Gather-
ing Experience Returns for Security, 2011.
[11] N. Edwards and L. Chen. An historical examination of open
source releases and their vulnerabilities. In ACM Conference on
Computer and Communications Security, 2012.
[12] H. Flake. Structural comparison of executable objects. In IEEE
Conference on Detection of Intrusions, Malware, and Vulnerability
Assessment, 2004.
[13] M. Fredrikson, S. Jha, M. Christodorescu, R. Sailer, and X. Yan.
Synthesizing Near-Optimal Malware Speciﬁcations from Suspi-
cious Behaviors. In IEEE Symposium on Security and Privacy,
2010.
[14] M. W. Godfrey and Q. Tu. Evolution in open source software: A
case study. In International Conference on Software Maintenance,
2000.
[15] F. Guo, P. Ferrie, and T.-C. Chiueh. A study of the packer problem
and its solutions. In International Symposium on Recent Advances
in Intrusion Detection, 2008.
[16] A. Gupta, P. Kuppili, A. Akella, and P. Barford. An empirical
In International Communication
study of malware evolution.
Systems and Networks and Workshops, 2009.
[17] M. Hayes, A. Walenstein, and A. Lakhotia. Evaluation of malware
phylogeny modelling systems using automated variant generation.
Journal in Computer Virology, 5(4):335–343, July 2008.
[18] X. Hu, T. Chiueh, and K. G. Shin. Large-scale malware indexing
using function call graphs. In ACM Conference on Computer and
Communications Security, 2009.
[19] J. Jang, A. Agrawal, and D. Brumley. ReDeBug: ﬁnding un-
patched code clones in entire os distributions. In IEEE Symposium
on Security and Privacy, 2012.
[20] J. Jang, D. Brumley, and S. Venkataraman. BitShred: feature
hashing malware for scalable triage and semantic analysis. In
ACM Conference on Computer and Communications Security,
2011.
[21] M. G. Kang, P. Poosankam, and H. Yin. Renovo: A hidden code
extractor for packed executables. In ACM Workshop on Rapid
Malcode, 2007.
[22] M. E. Karim, A. Walenstein, A. Lakhotia, and L. Parida. Malware
phylogeny generation using permutations of code. Journal in
Computer Virology, 1:13–23, 2005.
[23] W. M. Khoo and P. Lio. Unity in diversity: Phylogenetic-inspired
techniques for reverse engineering and detection of malware fami-
lies. In SysSec Workshop, 2011.
[24] W. M. Khoo, A. Mycroft, and R. Anderson. Rendezvous: A
search engine for binary code. In Working Conference on Mining
Software Repositories, 2013.
[25] M. Kim, V. Sazawal, D. Notkin, and G. C. Murphy. An empirical
study of code clone genealogies. In European software engineer-
ing conference - Foundations of software engineering, 2005.
[26] J. Z. Kolter and M. A. Maloof. Learning to detect and classify
malicious executables in the wild. Journal of Machine Learning
Research, 7:2721–2744, 2006.
[27] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna. Static disas-
sembly of obfuscated binaries. In USENIX Security Symposium,
2004.
[28] M. M. Lehman and J. F. Ramil. Rules and tools for software evo-
lution planning and management. Annals of Software Engineering,
11(1):15–44, 2001.
[29] M. Lindorfer, A. Di Federico, F. Maggi, P. M. Comparetti, and
S. Zanero. Lines of malicious code: insights into the malicious
software industry.
In Annual Computer Security Applications
Conference, 2012.
[30] C. Linn and S. Debray. Obfuscation of executable code to improve
resistance to static disassembly. In ACM Conference on Computer
and Communications Security, 2003.
[31] J. Ma, J. Dunagan, H. J. Wang, S. Savage, and G. M. Voelker.
Finding diversity in remote code injection exploits. In ACM SIG-
COMM on Internet Measurement, 2006.
[32] L. Martignoni, M. Christodorescu, and S. Jha. OmniUnpack: fast,
generic, and safe unpacking of malware. In Annual Computer
Security Applications Conference, 2007.
[33] F. Massacci, S. Neuhaus, and V. H. Nguyen. After-life vulnera-
bilities: a study on ﬁrefox evolution, its vulnerabilities, and ﬁxes.
In International Conference on Engineering Secure Software and
Systems, 2011.
[34] T. J. McCabe. A complexity measure. IEEE Transactions on
Software Engineering, SE-2(4):308–320, 1976.
[35] K. Rieck, P. Trinius, C. Willems, and T. Holz. Automatic analysis
of malware behavior using machine learning. Journal of Computer
Security, 19(4):639–668, 2011.
[36] N. Rosenblum, B. P. Miller, and X. Zhu. Recovering the toolchain
provenance of binary code. In International Symposium on Soft-
ware Testing and Analysis, 2011.
[37] C. Rossow, C. J. Dietrich, C. Grier, C. Kreibich, V. Paxson,
N. Pohlmann, H. Bos, and M. V. Steen. Prudent Practices for
Designing Malware Experiments: Status Quo and Outlook. In
IEEE Symposium on Security and Privacy, 2012.
[38] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and W. Lee. PolyUn-
pack: automating the hidden-code extraction of unpack-executing
malware. In Computer Security Applications Conference, Decem-
ber 2006.
[39] A. Sæ bjørnsen, J. Willcock, T. Panas, D. Quinlan, and Z. Su.
In International
Detecting code clones in binary executables.
Symposium on Software Testing and Analysis, 2009.
[40] S. Schleimer, D. Wilkerson, and A. Aiken. Winnowing: Local
algorithms for document ﬁngerprinting. In ACM SIGMOD/PODS
Conference, 2003.
[41] E. J. Schwartz, J. Lee, M. Woo, and D. Brumley. Native x86
decompilation using semantics-preserving structural analysis and
iterative control-ﬂow structuring. In USENIX Security Symposium,
2013.
[42] E. Shihab, C. Bird, and T. Zimmermann. The effect of branch-
ing strategies on software quality. In ACM/IEEE International
Symposium on Empirical Software Engineering and Measurement,
2012.
[43] Symantec.
Symantec internet security threat report, vol-
ume 17. http://www.symantec.com/threatreport/,
2012. Page checked 5/23/2013.
[44] K. Weinberger, A. Dasgupta, J. Langford, A. Smola, and J. At-
tenberg. Feature hashing for large scale multitask learning. In
International Conference on Machine Learning, 2009.
[45] G. Xie, J. Chen, and I. Neamtiu. Towards a better understanding of
software evolution: An empirical study on open source software.
In IEEE International Conference on Software Maintenance, 2009.
[46] Y. Ye, T. Li, Y. Chen, and Q. Jiang. Automatic malware catego-
rization using cluster ensemble. In ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining, 2010.
USENIX Association  
22nd USENIX Security Symposium  95
A Appendix
A.1 Straight Line Lineage
Distance Metric
Features
SD
WSD
DC
JD
JC
Multi
Mean accuracy with the inferred root Mean accuracy with the real root
Inversion Accuracy
ED
6.0
95.8%
6.7
95.4%
8.4
93.7%
8.4
93.7%
93.0%
9.1
Inversion Accuracy
98.4%
98.1%
97.1%
97.1%
97.1%
ED
8.6
9.0
9.7
9.7
12.2
Table 8: Mean accuracy for straight line lineage on goodware
Distance Metric
Features
SD
WSD
DC
JD
JC
SD
WSD
DC
JD
JC
Static
Multi
Dynamic
Multi
Mean accuracy with the inferred root (=real root)
ED
0.9
1.3
0.9
0.9
3.1
2.6
2.9
2.9
2.9
4.1
Inversion Accuracy
97.8%
94.2%
98.2%
98.2%
84.3%
86.7%
80.0%
85.5%
85.5%
70.9%
Table 9: Mean accuracy for straight line lineage on malware
A.2 DAG Lineage
Distance Metric
Features
SD
WSD
DC
JD
JC
Multi
Mean accuracy with no prior information Mean accuracy with real timestamp
GAED
20.3
23.0
20.0
20.0
35.0
PO Accuracy
84.0%
82.6%
83.8%
83.8%
74.5%
GAED
52.4
57.3
56.1
56.1
90.0
PO Accuracy
91.1%
90.0%
91.1%
91.1%
90.6%
Table 10: Mean accuracy for DAG lineage on goodware
Distance Metric
Features
SD
WSD
DC
JD
JC
SD
WSD
DC
JD
JC
Static
Multi
Dynamic
Multi
Mean accuracy with no prior information Mean accuracy with real timestamp
GAED
6.0
5.5
6.0
6.0
9.5
13.0
12.5
12.5
12.5
12.5
PO Accuracy
69.5%
72.0%
69.5%
69.5%
50.8%
61.4%
62.2%
59.8%
59.8%
55.3%
PO Accuracy
87.0%
90.2%
87.0%
87.0%
86.6%
70.3%
76.4%
72.8%
72.8%
72.8%
GAED
8.5
8.5
8.5
8.5
19.5
17.0
17.0
19.0
19.0
17.5
Table 11: Mean accuracy for DAG lineage on malware
96  22nd USENIX Security Symposium 
USENIX Association