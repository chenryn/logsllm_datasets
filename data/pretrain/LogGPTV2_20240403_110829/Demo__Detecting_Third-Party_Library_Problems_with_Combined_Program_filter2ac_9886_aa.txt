title:Demo: Detecting Third-Party Library Problems with Combined Program
Analysis
author:Grigoris Ntousakis and
Sotiris Ioannidis and
Nikos Vasilakis
Demo: Detecting Third-Party Library Problems with Combined
Program Analysis
Grigoris Ntousakis
TU Crete
PI:EMAIL
Sotiris Ioannidis
TU Crete
PI:EMAIL
Nikos Vasilakis
CSAIL, MIT
PI:EMAIL
ABSTRACT
Third-party libraries ease the software development process and
thus have become an integral part of modern software engineering.
Unfortunately, they are not usually vetted by human developers
and thus are often responsible for introducing bugs, vulnerabilities,
or attacks to programs that will eventually reach end-users. In this
demonstration, we present a combined static and dynamic program
analysis for inferring and enforcing third-party library permissions
in server-side JavaScript. This analysis is centered around a RWX
permission system across library boundaries. We demonstrate that
our tools can detect zero-day vulnerabilities injected into popular
libraries and often missed by state-of-the-art tools such as snyk
test and npm audit.
CCS CONCEPTS
• Software and its engineering → Automated static analysis;
Dynamic analysis; Scripting languages; • Security and privacy →
Software and application security.
KEYWORDS
Dynamic Program Analysis, Static Program Analysis
ACM Reference Format:
Grigoris Ntousakis, Sotiris Ioannidis, and Nikos Vasilakis. 2021. Demo: De-
tecting Third-Party Library Problems with Combined Program Analysis. In
Proceedings of the 2021 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’21), November 15–19, 2021, Virtual Event, Republic of
Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.
3485351
1 INTRODUCTION
Modern software development relies heavily on third-party libraries.
Applications use several dozens or even hundreds of libraries, cre-
ated by many different authors and accessed via public repositories.
The heavy use of libraries is particularly common in JavaScript
applications [6, 8, 12, 13, 15], and especially in those running on
the Node.js platform [16, 19], where developers have millions of
libraries at their fingertips through the npm package manager.
Security Problems: Reliance on libraries introduces several se-
curity risks—ranging from dynamic compromise, the runtime ex-
ploitation of a benign library via its inputs, to full-fledged malicious
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3485351
library operation—affecting the security of the entire application
and its broader operating environment. For example, consider a
(de)serialization library that uses JavaScript’s built-in eval function
to parse a string into a runtime object. While the library itself is
benign, accessing no other external API apart from eval, an at-
tacker may pass a malicious serialized object to the deserialization
function, which in turn will pass it to eval. As a result, the library
may be subverted into malicious behavior, e.g., accessing the file
system or the network, that goes far beyond what a (de)serialization
library is supposed to do. The underlying problem is that every li-
brary running on Node.js has all privileges offered by the JavaScript
language and its runtime environment. In particular, each library is
allowed to access any built-in API, global variables, APIs of other
imported libraries, and even import additional libraries.
Overview:
In this demo, we show how to leverage a combined
static and dynamic program analysis to understand program behav-
ior prior to the program’s production execution and enforce this be-
havior during the program’s production execution. Our techniques
form a sharp contrast to state-of-the-art vulnerability detection
tools such as npm audit [9] and snyk [11]: while these tools scan
a program’s dependencies to report on known attacks—collected
from vulnerability reports accessible publicly—our tools can detect
and notify developers of previously unseen, zero-day attacks, as
we show during the demonstration of our tools.
Demo Outline: The demonstration starts by exemplifying the use
of third-party libraries common in server-side Node.js development
today. It then shows the expected (normal and benign) behavior of
these libraries as part of larger applications, and then demonstrates
unexpected (abnormal and malicious) behavior of these libraries
when subverted by attackers—for example, an attacker can read and
exfiltrate the contents of /etc/passwd. It then applies state-of-the-
art vulnerability detection tools such as npm audit and snyk test,
which do not report any risks—due to the reason that both tools
report only known vulnerabilities. The demo finally demonstrates
the use of a combined program analysis designed to report on
the permissions used by third-party libraries—showing the set of
permissions required for the normal operation of a library, and thus
delineating between normal and malicious operation. All the tools
presented in this demonstration are open-source software.
2 RELATED WORK
This section briefly outlines static and dynamic analysis techniques.
Static analysis: Static program analysis is a technique for extract-
ing information about the behavior of a program by inspecting its
source code. Static analysis tends to focus on invariants related to
all executions of the program, but often misses information related
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea24294 A REAL EXAMPLE
This section exemplifies our techniques against dynamic library
subversion—a common attack vector in libraries that evaluate user
input.
A de-serialization library: Consider a Node.js application that
uses a third-party (de)serialization library for converting serialized
strings into in-memory objects. The (de)serialization library is fed
client-generated strings, which may lead to remote code execu-
tion (RCE) attacks. The code below shows the relevant application
fragment:
const serial = require('serialization');
http.createServer((req, res) => {
req.on('end', () => {
let val = serial.deserialization(data);
if (val.token == 'a1b2c33d4e5f6g7h8i9jakblc')
console.log('Api key:', val) });
The code above first imports the serialization library. It then
creates a web server that receives user-provided values arriving
from the network as strings, which get deserialized into in-memory
objects. Values containing a special token are printed in the console.
Unfortunately, this deserialization functionality is provided by
serial.dec which is implemented by a third-party library devel-
oped by programmers other than the application’s nominal devel-
opers. Internally, this function uses the unsafe eval primitive of
Node.js which evaluates any valid JavaScript code:
module.exports = {
dec: (str) => {
let obj;
obj = eval(str);
return obj;
} }
Benign vs. malicious operation: Benign user requests work as
expected—e.g., , the following request will cause the value to be
printed:
let key = 'a1b2c33d4e5f6g7h8i9jakblc');
request.write(payload); // part of a request
However, adversaries can pass Turing-complete programs that
will execute on the host environment—e.g., , the following input
will create a file pwned.txt using the fs library of Node.js:
let payload = 'require("fs").
writeFileSync("./pwned.txt","uh-oh!\\n")');
request.write(payload);
Applying state-of-the-art tools: We attempt to detect this mali-
cious operation using two state-of-art tools, Snyk [11] and NPM
audit [9]. Running snyk test in the folder that contains the vul-
nerable library does not report any vulnerabilities:
Tested 1 dependencies for known issues,
no vulnerable paths found
The results are similar for npm audit:
found 0 vulnerabilities in 1 scanned packages
The reason these tools fail to report any risks is that the dependen-
cies of our program do not have any known vulnerabilities.
Applying Static Analysis: We first run perm.js -s, our static
permission inference analysis, to extract the first set of permissions
for serialization:
Figure 1: A static analysis tool extracts the static permissions