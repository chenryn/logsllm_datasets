**作者：天融信阿尔法实验室  
公众号：**
### 一、前言
阿尔法实验在上一篇[文章](https://paper.seebug.org/841/)中向大家介绍了使用AFL开始模糊测试前要做的一些准备工作，以及AFL的几种工作方式，但是并没有提到何时结束测试过程，以及测试完成后又需要做些什么。本文中就继续介绍这些内容，并开始逐步介绍一些AFL相关原理。以下就是本文中主要讨论的问题：
  * 何时结束Fuzzing工作
  * afl-fuzz生成了哪些文件
  * 如何对产生的crash进行验证和分类
  * 用什么来评估Fuzzing的结果
  * 代码覆盖率及相关概念
  * AFL是如何记录代码覆盖率的
### 二、Fuzzer工作状态
因为 _afl-fuzz_ 永远不会停止，所以何时停止测试很多时候就是依靠 _afl-fuzz_ 提供的状态来决定的。除了前面提到过的通过状态窗口、
_afl-whatsup_ 查看 _afl-fuzz_ 状态外，这里再补充几种方法。
#### 1\. afl-stat
_afl-stat_ 是[afl-utils](https://gitlab.com/rc0r/afl-utils)这套工具AFL辅助工具中的一个（这套工具中还有其他更好用的程序，后面用到时会做介绍），该工具类似于 _afl-whatsup_ 的输出结果。
使用前需要一个配置文件，设置每个afl-fuzz实例的输出目录：
    {
        "fuzz_dirs": [
            "/root/syncdir/SESSION000",
            "/root/syncdir/SESSION001",
            ...
            "/root/syncdir/SESSION00x"
        ]
    }
然后指定配置文件运行即可：
    $ afl-stats -c afl-stats.conf
    [SESSION000 on fuzzer1]
     Alive:   1/1
     Execs:   64 m
     Speed:   0.3 x/s
     Pend:    6588/249
     Crashes: 101
    [SESSION001 on fuzzer1]
     Alive:   1/1
     Execs:   105 m
     Speed:   576.6 x/s
     Pend:    417/0
     Crashes: 291
    ...
#### 2\. 定制afl-whatsup
_afl-whatsup_ 是依靠读afl-fuzz输出目录中的 _fuzzer_stats_
文件来显示状态的，每次查看都要需要手动执行，十分麻烦。因此可以对其进行修改，让其实时显示fuzzer的状态。方法也很简答，基本思路就是在所有代码外面加个循环就好，还可以根据自己的喜好做些调整：
#### 3\. afl-plot
前面提到的都是基于命令行的工具，如果还想要更直观的结果，可以用 _afl-plot_ 绘制各种状态指标的直观变化趋势。
    #安装依赖工具gnuplot
    $ apt-get install gnuplot
    $ afl-plot afl_state_dir graph_output_dir
以测试libtiff的情况为例，进入afl-plot输出目录，打开 _index.html_ ，会看到下面三张图：
首先是路径覆盖的变化，当 **pending fav** 的数量变为零并且 **total paths**
数量基本上没有再增长时，说明fuzzer有新发现的可能性就很小了。
接着是崩溃和超时的变化
最后是执行速度的变化，这里要注意的是，如果随着时间的推移，执行速度越来越慢，有一种可能是因为fuzzer耗尽一些共享资源。
#### 4\. PYTHIA
笔者在查阅资料的过程中，还发现了[pythia](https://github.com/mboehme/pythia)这个AFL的扩展项目，虽然不知道效果如何，但这里还是顺便提一提。其特色在于可以估算发现新crash和path概率，其运行界面相比原版的AFL多出了下面几个字段：
correctness: 在没有发现crash时，发现一个导致crash输入的概率。 fuzzability:
表示在该程序中发现新路径的难度，该数值越高代表程序越容易Fuzz。 current paths: 显示当前发现的路径数。 path coverag:
路径覆盖率。
### 三、结束测试
#### 1.何时结束
检查 _afl-fuzz_ 工作状态的目的是为何时停止测试提供依据，通常来说符合下面几种情况时就可以停掉了。
(1) 状态窗口中”cycles
done”字段颜色变为绿色该字段的颜色可以作为何时停止测试的参考，随着周期数不断增大，其颜色也会由洋红色，逐步变为黄色、蓝色、绿色。当其变为绿色时，继续Fuzzing下去也很难有新的发现了，这时便可以通过Ctrl-C停止afl-fuzz。
(2) 距上一次发现新路径（或者崩溃）已经过去很长时间了，至于具体多少时间还是需要自己把握，比如长达一个星期或者更久估计大家也都没啥耐心了吧。
(3) 目标程序的代码几乎被测试用例完全覆盖，这种情况好像很少见，但是对于某些小型程序应该还是可能的，至于如何计算覆盖率将在下面介绍。
(4)上面提到的pythia提供的各种数据中，一旦 **path covera**
达到99％（通常来说不太可能），如果不期望再跑出更多crash的话就可以中止fuzz了，因为很多crash可能是因为相同的原因导致的；还有一点就是
**correctness** 的值达到 **1e-08** ，根据pythia开发者的说法，这时从上次发现path/uniq
crash到下一次发现之间大约需要1亿次执行，这一点也可以作为衡量依据。
#### 2\. 输出结果
_afl-fuzz_ 的输出目录中存在很多文件，有时想要写一个辅助工具可能就要用到其中的文件。下面以多个fuzz实例并行测试时的同步目录为例：
    $ tree -L 3
    .
    ├── fuzzer1
    │   ├── crashes
    │   │   ├── id:000000,sig:06,src:000019+000074,op:splice,rep:2
    │   │   ├── ...
    │   │   ├── id:000002,sig:06,src:000038+000125,op:splice,rep:4
    │   │   └── README.txt
    │   ├── fuzz_bitmap
    │   ├── fuzzer_stats
    │   ├── hangs
    │   │   └── id:000000,src:000007,op:flip1,pos:55595
    │   ├── plot_data
    │   └── queue
    │       ├── id:000000,orig:1.png
    │       ├── ....    
    │       └── id:000101,sync:fuzzer10,src:000102
    └── fuzzer2
        ├── crashes
        ├── ...
queue：存放所有具有独特执行路径的测试用例。  
crashes：导致目标接收致命signal而崩溃的独特测试用例。  
crashes/README.txt：保存了目标执行这些crash文件的命令行参数。  
hangs：导致目标超时的独特测试用例。  
fuzzer_stats：afl-fuzz的运行状态。  
plot_data：用于afl-plot绘图。
### 四、处理测试结果
到了这里，我们可能已经跑出了一大堆的crashes，那么接下来的步骤，自然是确定造成这些crashes的bug是否可以利用，怎么利用？这是另一个重要方面。当然，个人觉得这比前面提到的内容都要困难得多，这需要对常见的二进制漏洞类型、操作系统的安全机制、代码审计和调试等内容都有一定深度的了解。但如果只是对crash做简单的分析和分类，那么下面介绍的几种方法都可以给我们提供一些帮助。
#### 1\. crash exploration mode