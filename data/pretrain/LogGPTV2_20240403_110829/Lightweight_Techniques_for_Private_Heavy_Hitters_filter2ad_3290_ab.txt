learn the histogram for this set S1 (i.e., the number of client
strings that begin with a ‘0’ and the number of client strings
that being with a ‘1’). They prune from S1 all the preﬁxes that
occur fewer than t times. Let T1 ⊆ S1 be the remaining set of
preﬁxes. The servers then append a ‘0’ and a ‘1’ to every string
in T1 to obtain the set S2 = T1 × {0, 1}. In the second execution
of the subset-histogram protocol, the servers learn the histogram
for the set S2. Again, they prune from S2 all the elements that
occur fewer than t times. Let T2 ⊆ S2 be the remaining set of
preﬁxes. They compute S3 = T2 ×{0, 1}, and learn the histogram
for S3. They prune S3 and continue this way until ﬁnally after n
executions of the subset-histogram protocol, they obtain the set
Tn of all t-heavy hitters. At every step in this protocol, the size
of the set S(cid:96) is at most twice the size of the ﬁnal answer Tn.
The straightforward implementation of the above scheme
requires each client to communicate Ω(n2) bits to each server,
where n is the length of each client’s private string. This is
because each client participates in n instances of the private-
subset-histogram protocol, and each protocol run requires the
client to send a size-Ω(n) distributed-point-function key to the
servers. Since n ≈ 256 in our applications, the quadratic per-
client communication cost is substantial.
To reduce this cost, we introduce incremental distributed point
functions (“incremental DPFs”), a new cryptographic primitive
that reduces the client-to-server communication from quadratic
in the client’s string length n to linear in n. Conceptually, this
primitive gives the client a way to succinctly secret-share the
weights on a tree that has a single path of non-zero weight in an
incremental fashion.
Limitations. The main downside of our heavy-hitters protocols
is that they reveal some additional—though modest and precisely
quantiﬁed—information to the data-collection servers about the
distribution of client-held strings, in addition to the set of heavy
hitters itself. In particular, even when an arbitrary number of
malicious clients collude with a malicious server, this leakage
depends only on the multiset of strings held by the honest clients,
without revealing any association between clients and strings in
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
763
this multiset. Moreover, the amount of partial information leaked
about this multiset is comparable to the output length, and only
scales logarithmically with the number of clients C when the
servers search for strings that a constant fraction of clients hold.
See the precise deﬁnition of the leakage in Section 2.3.
To protect client privacy against even this modest leakage, we
can conﬁgure the system to provide -diﬀerential privacy [25],
in addition to its native MPC-style security properties. The
diﬀerential-privacy guarantee then ensures that the system will
never reveal “too much” about any client’s string, even accounting
for the leakage. To achieve -diﬀerential privacy with C clients,
our protocols introduce additive O(1/) error, compared with the
larger Ω(√
C/) error inherent to protocols based on randomized
response [3, 4, 12, 27, 29]. (Our protocols provide additional
privacy beneﬁts that cannot be obtained via randomized response,
such as the ability to securely compute on the secret-shared
histogram.)
An additional limitation is that our techniques require two non-
colluding servers and they do not eﬃciently scale to the setting
of k servers, tolerating k − 1 malicious servers. Overcoming this
limitation would either require constructing better multi-party
distributed point functions [11] or using a completely diﬀerent
approach.
Contributions. The main contributions of this work are:
1. a malicious-secure protocol for private heavy hitters in the
two-server setting,
2. a malicious-secure protocol for private subset histograms
in the two-server setting,
3. the deﬁnition and construction of incremental and ex-
tractable distributed point functions,
4. a new malicious-secure protocol for checking that a set of
parties hold shares of a vector of weight at most one, and
5. implementation and evaluation of our heavy-hitters protocol.
2 Problem statement
We work in a setting in which there are two data-collection servers.
Our system provides privacy as long as at least one of these two
servers executes the protocol faithfully. (The other server may
maliciously deviate from the protocol.) There is some number C
of participating clients. Each client i, for i ∈ {1, . . . ,C}, holds
a private input string αi ∈ {0, 1}n. The goal of the system is to
allow the servers to compute some useful aggregate statistic over
the private client-held strings (α1, . . . , αC), while leaking as little
as possible to the servers about any individual client’s string.
Notation. Throughout the paper we use F to denote a prime ﬁeld
and G a ﬁnite Abelian group, we use [n] to denote the set of
integers {1, . . . , n}, and N to denote the natural numbers. We
let 1{P} be the function that returns 1 when the predicate P is
true, and returns 0 otherwise. We denote assignments as x ← 4
and, for a ﬁnite set S, the notation x ←R S indicates a uniform
random draw from S. For strings a and b, a(cid:107)b denotes their
concatenation.
2.1 Private-aggregation tasks
In this setting, there are two tasks we consider.
Task I: Subset histogram. In this task, the servers hold a set
S ⊆ {0, 1}n of strings. For each string σ ∈ S, the servers want
to learn the number of clients who hold the string σ. In some of
our applications, both the clients and servers know the set S (i.e.,
the set is public). In other applications, the servers choose the
set S and may keep it secret.
As a concrete application, a web-browser vendor may want
to use subset histograms to privately measure the incidence of
homepage hijacking [41]. A user’s homepage has been “hijacked”
if malware changes the user’s homepage browser setting without
her consent. In this application, the browser vendor has a set
S of URLs it suspects are beneﬁting from homepage hijacking.
The vendor wants to know, for each URL u ∈ S, how many
clients have URL u as their homepage. For this application, it
is important that the browser vendor hide the set S of suspect
websites from the clients—both to avoid legal liability and to
prevent these sites from taking evasive action.
In this application then, each client i’s string αi would be
a representation of her homepage URL. The servers’ set S =
{σ1, σ2, . . . } would be the set of suspect URLs. And then the
output of the task would tell the browser vendor how many clients
use each of these suspect URLs as a homepage, without revealing
to the servers which client has which homepage.
Task II: Heavy hitters. In this task, the servers want to identify
which strings are “popular” among the clients. More precisely,
for an integer t ∈ N, we say that a string σ is a t-heavy hitter if σ
appears in the list (α1, . . . , αC) more than t times. The t-heavy
hitters task is for the servers to ﬁnd all such strings. Note that,
unlike the previous subset histogram task, here there is no a
priori set of candidate heavy hitters.
As an illustrative application, consider a web browser vendor
who wants to learn which URLs most crash the browser for more
than 1000 clients. Each client i’s string αi is a representation of
the last URL its browser loaded before crashing. The t-heavy
hitters in the list (α1, . . . , αC), for t = 1000, reveal to the servers
which URLs crashed the browser for more than 1000 clients. The
servers learn nothing about which client visited which URL, nor
do they learn anything about URLs that caused browser crashes
for fewer than 1000 clients.
2.2 Communication pattern
While we primarily focus on the two tasks mentioned above —
subset histogram and heavy hitters — the protocols we design
can be described more generally as protocols for privately com-
puting an aggregate statistic agg = f(α1, . . . , αC) over the data
α1, . . . , αC ∈ {0, 1}n of the C clients, where the function f is
known to the servers but possibly not to the clients.
Because we do not allow communication between clients, and
minimal communication between the clients and the servers,
the communication pattern for the private aggregation protocol
should be as follows:
• Setup: In an optional setup phase, the servers generate
public parameters, which they send to all clients.
764
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
• Upload: The clients proceed in an arbitrary order, where
each participating client sends a single message to Server 0
and a single message to Server 1. Alternatively, the client
can send a single message to Server 0 that includes an
encryption of its second message, which Server 0 then
routes to Server 1. We allow no other interaction with or
between the clients.
• Aggregate: Servers 0 and 1 execute a protocol among
themselves, and output the resulting aggregate statistic agg.
This step may involve multiple rounds of server-to-server
interaction.
All of the protocols that we consider in this paper obey the above
communication pattern.
2.3 Security properties
Our private-aggregation protocols are designed to provide the
following security guarantees. In the full version of this work [8],
we provide formal security deﬁnitions.
Completeness: If all clients and all servers honestly follow the
protocol, then the servers correctly learn agg = f(α1, . . . , αC).
Robustness to malicious clients: Informally, a malicious client
cannot bias the computed aggregate statistic agg beyond its ability
to choose its input α ∈ {0, 1}n arbitrarily. The same should hold
for a coalition of malicious clients working together, where each
can cast at most a single vote. Whether a malicious client’s vote
is counted or not may depend on the set S (for subset histogram)
or on other client inputs (for heavy hitters).
Privacy against a malicious server: Informally, if one of the
servers is malicious, and the other is honest, the malicious server
should learn nothing about the clients’ data beyond the aggregate
statistic agg. Furthermore, even if a malicious adversary corrupts
both a server and a subset of the clients, the adversary should
learn no more than it could have learned by choosing the inputs
of malicious clients and observing the output agg.
Our private subset-histogram protocol in Section 4 indeed
meets this ideal goal, revealing to the adversary only the subset
histogram of the participating honest clients. A malicious server
can choose to “disqualify” honest clients independently of their
input, so that their input does not count towards the output.
(As a simple example, the server could pretend to not receive
any message from a certain client.) The diﬀerentially private
mechanism in Section 7 protects honest clients from being
singled out via this attack. Alternatively, if too many clients are
disqualiﬁed, the honest server can abort the computation.
Our most eﬃcient heavy-hitters protocols in Section 5 reveal
to a malicious adversary, who corrupts one server and a subset
of the clients, a small amount of information about the honest
client data beyond the list of t-heavy hitters. We capture this
using a leakage function L : ({0, 1}n)C → {0, 1}(cid:96) that describes
the extra information the adversary obtains. A malicious server
should learn nothing about the client data beyond the agg and
L(α1, . . . , αC). While we defer the full speciﬁcation of the
leakage function L to the full version of this work [8], we note
here two important features of this function: ﬁrst, L is symmetric
in the sense that it only depends on the multiset of strings that the
non-disqualiﬁed honest clients hold. In particular, the leakage
reveals no association between clients and strings in this multiset.
Second, the output length of L is comparable to that of agg, and
only scales logarithmically with the number of clients C when
τ = t/C is ﬁxed. Thus, our protocol leaks typically much less
than a shuﬄing-based approach that reveals the entire multiset.
In particular, it does not often expose rare inputs, which are often
the most sensitive.
Remark (Non threat: Correctness against malicious servers).
If one of the servers maliciously deviates from the protocol,
we do not guarantee that the other (honest) server will re-
cover the correct value of the aggregate statistic. Prior private-
aggregation systems oﬀer a similarly relaxed correctness guar-
antee [2, 13, 14, 18, 22, 40, 45].
In practice, we typically run
these protocol with two organizations that gain no advantage by
corrupting the system’s output. (In contrast, the organizations do
potentially stand to beneﬁt by learning the client’s private data.)
So, protecting correctness is less crucial than protecting client
privacy. Protecting correctness in the presence of malicious
servers would be a useful extension that we leave for future work.
2.4 Alternative approaches
We discuss a few alternative ways to solve these problems.
Mix-net. If the servers want to compute the multiset of all client-
held strings (i.e., the threshold t = 1), the participants can just use
a two-server mix-net [15]. That is, each client onion encrypts her
string to the two servers, who each shuﬄe and decrypt the batch
of strings. Using veriﬁable shuﬄes [42] prevents misbehavior
by the servers. In the special case of t = 1 and with C clients,
this alternative has computation cost O(C) (hiding polynomial
factors in the security parameter), while our protocols would have
cost O(C2). However, without additional rounds of interaction
between the clients and servers, the mix-net-based approach does
not generalize to searching for t-heavy hitters with t > 1, where
all non t-heavy hitters remain hidden. Our approach does.
Generic MPC + ORAM. Another alternative solution uses
general-purpose malicious-secure two-party computation for
RAM programs [30,34,37,39]. Each client sends each server an
additive secret-sharing of its input string. The servers then run a
malicious-secure multiparty computation of a RAM program that
takes as input C strings (one from each client) and computes the
heavy hitters. This approach could have asymptotically optimal
computational complexity(cid:101)O(C + t), for heavy-hitters threshold t.
At the same time, multiparty computation of RAM programs—
even without malicious security—is extremely expensive in
concrete terms [23], as it requires implementing an oblivious
RAM [33] client in a multiparty computation. There may be
more sophisticated ways to, for example, eﬃciently implement
a streaming algorithm for heavy hitters [17] in a multiparty
computation. We expect that such techniques will be substantially
more complicated to implement and will be concretely more
expensive.
Counting data structures + secure aggregation. The count-
min sketch [17] is a data structure used for ﬁnding approximate
heavy hitters in the context of streaming algorithms. Melis et
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
765
al. [40] demonstrate that it is possible to use secure-aggregation
techniques to allow each client to anonymously insert its input
string into the data structure. When the set of candidate heavy
hitters is unknown, as in our setting, it is possible to use a set
of n such counting data structures (where each client holds an
n-bit string) to recover the heavy hitters. The drawbacks of this
approach are: (1) the concrete complexity is worse than our
schemes since each client must send a large data-structure update
message to each server (see Section 8), (2) the additional leakage
is substantially larger and more diﬃcult to quantify than in our
protocol, and (3) these techniques only give approximate answers,
where our techniques compute the heavy hitters exactly.
Local diﬀerential privacy. A beautiful line of work has consid-
ered protocols for computing heavy hitters in the local model of
diﬀerential privacy, often using sophisticated variants of random-
ized response [3,4,12,44,48]. The advantage of these protocols
is that they require only a single data-collection server. In con-
trast, our protocols and others based on multiparty computation
require at least two non-colluding servers. The downside of
these protocols is that they leak a non-negligible amount of
information about each client’s private string to the server. As we
describe in Section 2.3, the leakage in our schemes depends only
on the multiset of private client strings. Thus our protocols give
incomparably stronger privacy guarantees and, as we discuss in
Section 7, can also achieve diﬀerential privacy. In addition, when
conﬁgured to provide diﬀerential privacy our protocols introduce
less noise than those based on local diﬀerential privacy. (Since
we have two non-colluding servers, the noise grows essentially
as it would in the central model of diﬀerential privacy [25].)
3 Background
This section summarizes the existing techniques for private
aggregation that we build on in this work.
A long line of work [2, 13, 22, 26, 35, 36, 40, 43, 45] has con-
structed private-aggregation schemes in the client/server model
in which security holds as long as the adversary cannot control
all servers. To demonstrate how these techniques work, consider
the task of computing subset histograms (Task I of Section 2.1).
Each client i holds a private string αi ∈ {0, 1}n and the servers
hold a set S = {σ1, σ2, . . . , σk} of strings. For each σ ∈ S, the
servers want to know how many clients hold the string σ.
Distributed point functions (DPFs). We can use distributed
point functions [10,11,31] to accomplish this task in a privacy-