(cid:35)
-
(cid:35)
-
(cid:35)
-
(cid:32)
-
(cid:35)
-
(cid:32)
-
(cid:35)
Ƭ: .mp4 ﬁle
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
Ƨ: .ttf
EVALUATION RESULTS FOR EPUB READING SYSTEMS ON ANDROID.
TABLE V
JavaScript
Local
Remote
Existence
Local Resources
Render
Leak
Remote
communication
Persistent storage
Cookies
LocalStorage
Features
URI handles
Runs in background
ƭ: .html ﬁle
Ʃ: .png/.jpg ﬁle
o: .txt ﬁle
∗ Crashes when attempting to render resource on local ﬁle system.
† Opens all referenced resources in a new frame.
‡ Only executes inline JavaScript.
§ Allows access to LocalStorage of other EPUBs.
(cid:107) Requests user consent only when browser is launched.
EVALUATION RESULTS FOR EPUB READING EXTENSIONS FOR CHROME
TABLE VI
Application
JavaScript
Local
Remote
Existence
Local Resources
Render
Chrome extensions (3)
Chrome extensions (2)
Firefox extensions (5)
(cid:32)∗
(cid:35)
(cid:35)
∗ Only external JavaScript.
† Can access cookies and LocalStorage of other EPUBs.
‡ Requires user consent.
(cid:107) Requires user click, and only works for mailto:.
(cid:35)
(cid:35)
(cid:35)
-
-
-
-
-
-
Leak
-
-
-
Remote
communication
Persistent storage
Cookies
LocalStorage
Features
URI handles
(cid:32)
(cid:32)
(cid:32)
(cid:32)†
(cid:35)
(cid:35)
(cid:32)†
(cid:35)
(cid:35)
Microphone, Camera, Location‡
-
-
(cid:32)‡
(cid:32)(cid:107)
(cid:32)(cid:107)
1) iOS: Out of the 20 evaluated iOS reading systems, 11
support JavaScript and allow EPUBs to communicate with
servers over the Internet without user consent, as shown in
Table IV. Only Apple Books requires explicit user interaction
to permit
the EPUB to communicate remotely, which is
then remembered between sessions. Furthermore, two reading
systems allow EPUBs to share LocalStorage data, while four
reading systems allow it to access the GeoLocation API or
enable it to open other applications, which in most cases
requires user consent.
As a result of the iOS application platform design, the EPUB
is isolated from the rest of the ﬁle system: the user has to
select the EPUB that will be loaded, and the application can
only access this particular ﬁle. Consequently, access to local
resources is blocked by design as these are not available within
the application.
2) Android: In contrast to the iOS reading systems, almost
every reading system requests the permission “Photos, media
and ﬁles on your device”, either upon installation or when
attempting to import an EPUB. Interestingly, most also make
use of Android’s Storage Access Framework (SAF) [8], an
API to access user-selected ﬁles, which is more constrained but
subsequently does not need explicit permissions to facilitate
importing EPUBs. However, when SAF is used in combination
with the ﬁle permissions, which was the case for all but two
applications, this does not prevent attacks that leak arbitrary
ﬁle contents. In fact, for three Android applications we could
successfully leak arbitrary ﬁle contents to a remote server, as
shown in Table V.
Again, the results show that JavaScript support provides
additional capabilities that often can be abused. Seven reading
systems grant the ability to open other applications, of which
only one asks for user permission when this referred application
is the browser (i.e. by using the http or https scheme).
Furthermore, out of six applications that support access to the
LocalStorage API, ﬁve do not provide sufﬁcient isolation, thus
allowing access to content saved by other EPUBs.
C. Browser extensions
For both Chrome and Firefox, we evaluated ﬁve extensions
that are advertised as EPUB reading systems. As shown in
Table VI, three Chrome extensions allow JavaScript execu-
tion, giving them access to persistent storage, and even to
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1738
the microphone, camera or location (provided that the user
consents). Because all EPUBs opened by these applications
shared the same origin (chrome-extension://[extension id]),
EPUBs can access the persistent storage of e-books that were
opened previously.
The remaining seven extensions do not allow JavaScript
execution as a result of the imposed Content Security Policy
(CSP), prohibiting all inline JavaScript and only allowing
resources local to the extension [42]. Although remote resources
are blocked by the CSP, the extensions still provide functionality
to fetch these (hence the ability to perform remote communica-
tion). In Section VI we show how this functionality lead to a
universal XSS in EPUBReader (available on both Chrome and
Firefox). This was also the only extension that automatically
rendered an EPUB when a referring link is clicked (achievable
through JavaScript) in Chrome.
D. Physical e-reader devices
Only for the Kobo e-reader, our testbed conﬁrmed limited
JavaScript support, as is documented by Kobo [37]. Note
that the e-reader only executes embedded scripts for KEPUB
ﬁles (Kobo’s custom e-book format), these are created by
simply changing the .epub ﬁle extension to .kepub.epub.
Furthermore, we could use the e-reader’s internet connection
to contact remote servers without user consent. Finally, the
embedded browser engine framework was identiﬁed as QT
5.2.1 (released in 2014) for which several vulnerabilities have
been reported [26].
Amazon’s publishing guidelines afﬁrm that scripting is
not supported, and that all scripts are stripped from the
source during conversion [6]. However, as part of a manual
evaluation of the Kindle, we found this to be inaccurate: the
browser engine supports JavaScript execution, although it is
disabled by default (in Section VI-C we show how this can be
circumvented).
VI. CASE STUDIES
To complement our semi-automated evaluation, we manually
analyzed a select number of applications for implementational
ﬂaws. This selection was based on different characteristics:
Apple Books on macOS (popular pre-installed application
that supports JavaScript but prevents rendering local ﬁles),
EPUBReader (the most widely used browser extension on
both Chrome and Firefox), and Kindle (the most widely used
physical e-reader, with an 83.6% market share in the US [27]).
A. Apple Books
As we discussed in Section V-A2, the capabilities detected
by our semi-automated evaluation did not lead to direct local
ﬁle system access in Apple Books for macOS, even when
leveraging symbolic links. However, through manual evaluation,
we identiﬁed a user information disclosure vulnerability and
persistent denial of service vulnerability.
The user information disclosure vulnerability allows an
attacker to infer whether a speciﬁc EPUB is present in the
user’s library. When an EPUB is opened by Apple Books,
it is unpacked and stored in a folder (Books) alongside
other previously unpacked EPUBs. The contents of each
EPUB are stored in a separate folder named after the EPUB’s
deterministically assigned 32-character serial ID. While we
could not infer how this ID is generated exactly, we have
veriﬁed that an EPUB is assigned the same ID across multiple
devices or accounts. Although embedded symbolic links
referring outside of this directory are denied, these links would
still remain functional when pointing to a location within the
EPUB folder, or even within the Books directory. As a result,
to gain information about the contents of the user library, an
EPUB could include a series of symbolic links, referring to
potential locations of unpacked EPUBs. By verifying whether
an arbitrary ﬁle in such a folder can be rendered, the EPUB
can disclose whether any of the selected EPUBs is present in
the user’s library. We found that the iOS applications Gerty
and Marvin could be exploited in a similar way.
The persistent denial of service attack is achieved by simply
including a symbolic link that refers to the Books folder in
which the EPUBs are unpacked. This will cause Apple Books
to crash, reporting that it cannot access the user’s library, for
every subsequent reboot. Because Apple Books is an integral
part of the operating system, it cannot be reinstalled without
reinstalling macOS.
In response, Apple issued a CVE for both vulnerabilities
(CVE-2019-8789 and CVE-2019-8774, respectively), and dis-
tributed a ﬁx through operating system updates [11]–[14].
B. EPUBReader extension
The results of our semi-automated evaluation in Section V-C
show that all Firefox extensions and two Chrome extensions
block JavaScript execution, due to the imposed Content
Security Policy (CSP). Even more interesting; upon installation,
three extensions request permission to read and change all
data of visited websites, using the  permission
indicator [23]. This allows the extensions to send HTTP
requests to any visited website and read out the response.
Moreover, if the user is logged in on such a website, the request
will implicitly include session cookies, and thus authenticating
the user. By bypassing the CSP restrictions for embedded
JavaScript in EPUBReader for both Chrome and Firefox,
we were able to abuse this permission to steal user account
information of any website on which the user is logged in,
effectively leading to a universal XSS.
Although including remote resources directly is prevented
by EPUBReader’s CSP, it still tries to provide this functionality
by ﬁrst fetching the included images and referred media ﬁles,
and then making their content available through a blob://
URL (which is allowed by the default CSP). We leveraged this
functionality to trick EPUBReader to make a JavaScript ﬁle
available as a blob:// URL (by simply including this ﬁle as
an image). Because these URLs contain an unguessable UUID,
we ﬁrst used a CSS-based data exﬁltration technique to leak this
to the attacker server. Finally, the adversary can dynamically
generate another EPUB that refers to this blob:// URL,
and then tricks the reader to open this generated EPUB
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1739
(EPUBReader will automatically try to read EPUBs based
on the URL pattern). Finally, the JavaScript payload will be
executed, giving the attacker the same privileges as the browser
extension (access to all authenticated content on all websites). A
proof-of-concept implementation of our attack requires a single
user interaction, such as a click, from the victim on Chrome
in order to open a new window; on Firefox the attack can be
performed without any user interaction, and is unnoticeable.
Collectively, this affects almost 300,000 users.
C. Kindle
Our semi-automated evaluation indicated that Kindle does
not support JavaScript execution, as conﬁrmed by the publish-
ing guidelines [6]. By reverse engineering the application that
renders the converted AZW3 ﬁles (webreader), we found
that WebKit version 1.4.2 is used to render e-books, but that in
the browser engine’s settings, the enable-scripts property
is set to false. However, the application itself uses JavaScript
to extract information from the DOM or to change styles.
Before each JS execution, the enable-scripts property
is set to true, and immediately after it is set back to false.
Consequently, JavaScript code contained in the EPUB will
never be executed. Nevertheless, we found that in various
instances dynamic input, which could potentially be under the
control of an attacker, is not properly escaped or sanitized.
For instance, a script that is executed on every page refresh
includes the font that is used. This value can be controlled by
the attacker by changing the font, which is done by sending a
GET request to the webreader’s SOAP server. Another example
is the image viewer used to zoom in to images in e-books.
Here the reference to the image is not sanitized, allowing an
attacker to inject HTML code, including  elements.
This could also be initiated by sending a request to the SOAP
server. Although the rendering engine blocks web requests,
this can be circumvented by leveraging SVGs. Presumably
these are rendered outside of the browser engine, and thus an
 element with the xlink:href attribute can still
be used to issue requests. Consequently, it is possible to set the
font to any value and run arbitrary JavaScript code by escaping
the string context with a single quote3, or inject HTML in the
image viewer.
Once the attacker is able to execute JavaScript, WebSockets
can be leveraged to send arbitrary requests, as these are not
blocked either. Furthermore, in the image viewer both the
restriction that JavaScript code is only temporarily executed and
the restriction of sending remote requests are lifted. As various
applications on the Kindle are controlled via HTTP requests,
this means these now fall under the attacker’s control. For
instance, the ccat service, which provides an HTTP interface
on port 9101, is used to manage the user’s library. In a proof-
of-concept exploit we leveraged CVE-2011-3243, a UXSS
vulnerability that has been publicly known for over nine years
and only requires a few lines of code to mitigate4, to read out
the entire library of a victim, along with metadata. We also
showed that it is possible to leak the contents of documents
by interacting with the built-in KFX reader: through an HTTP
request the reader is instructed to open the document, after
which it is possible to obtain a rendered image showing the
contents of the document. These can then be extracted via a
remote request to an attacker-controlled server. We did not
explore the other, undocumented, closed-source services that
are controlled through HTTP requests. To defend against these
issues, most Kindle services now require a veriﬁcation token
that indicate the authenticity of requests, preventing an attacker
to arbitrarily interact with the services.
VII. REAL-WORLD ANALYSIS
In this section, we analyze the EPUB ecosystem by assessing
the presence of malicious and tracking EPUBs in the wild, and
the feasibility of distributing them through a self-publishing
service.
A. Malicious and tracking EPUBs in the wild
In order to investigate whether any of the discussed tech-
niques are currently being used in the wild to either attack or
track users, we performed an additional analysis of EPUBs
available in a real-world setting. To this end, we downloaded
several free EPUBs from ﬁve popular online e-book stores
(eBooks.com, Google Play Books, Project Gutenberg, Kobo,
Amazon). After a manual inspection of the e-books, we did
not ﬁnd any indication of abuse. It should be noted however
that this evaluation is limited, and only considers abuse by
the EPUB stores; abuse by individual publishers would be
infeasible to evaluate from an external perspective, as this
would require purchasing a very large number of e-books.
To further evaluate other types of abuse, we obtained a large
number of EPUBs from ﬁle sharing platforms. More precisely,
we downloaded the 1,000 most popular and most recent EPUB
torrents from The Pirate Bay and the same amount from 4shared
(these are marked as the most widely used sources to illegally
obtain an e-book according to a study by Digimarc [28]). In
total, we obtained 7,238 EPUB ﬁles from torrents (in several
cases, a single torrent contained multiple EPUBs), and 1,807
from 4shared. Next, we unpacked all EPUBs and parsed all
documents, looking for possible types of abuse (references to
ﬁles on the local ﬁle system, symbolic links, connections to
a remote server, and JavaScript inclusions). We did not ﬁnd
any evidence of abuse, either in terms of tracking or attempts
to compromise the EPUB reading system. Interestingly, we
found that only 65 e-books, less than one percent of all 7,238
considered EPUBs, made use of JavaScript. In most cases, the
code was minimal, and was used to change the background
color or font size. All e-books were completely functional
without executing the JavaScript code.
3Because the font name length is limited, the malicious payload has to use
eval() on the textContent of a (hidden) DOM element.
4The mitigation only adds one additional if-statement: https://trac.webkit.
org/changeset/88071/webkit
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1740
B. Malicious EPUB distribution through self-publishing
To explore the feasibility of publishing malicious EPUBs
through ofﬁcial e-book vendors, we submitted manuscripts to
the six most popular free self-publishing services. For each
service, we bought the published version of our manuscript to
check whether any of the embedded scripts were still present.
The following is a list of these services, along with their
associated vendor and its e-book market share according to
the 2017 AuthorEarnings report [15]: Kindle Direct Publishing
(Amazon, 80%), iBooks Author (Apple Books, 10%), Barnes
& Noble Press (Barnes & Noble, 3%), Kobo Writing Life
(Kobo, 2%), and Google Books Partner Centre (Google Play
Books, 1.4%). No exact ﬁgures were available for the sixth
tested service, Smashwords, however they also distribute self-
published titles through Apple Books, Barnes & Noble, and
Kobo in addition to their own website [55].
Of the six vendors, only Google Play Books rejected
our submitted manuscript. Although Amazon succeeded in
removing most scripts, we were still able to publish the exploit
discussed in Section VI-C, which could target millions of
Kindle devices. The remaining four vendors appeared to take no
vetting measures at all; embedding scripts in a published EPUB
was trivial. Of these, only Smashwords provides downloadable
EPUB ﬁles upon purchase, hence, any EPUB reading system
can be used to open them. The other three vendors deliver
e-books directly to their associated reading systems (however,
this can be circumvented). For Apple Books (application)
and Kobo (application and physical e-reader), the embedded
scripts were executed, and even allowed remote communication.
However, Barnes & Noble’s application crashed upon rendering
embedded scripts, curbing potential abuse.
In conclusion, our experiment shows that four out of six
evaluated self-publishing services can be abused to distribute
malicious EPUBs through ofﬁcial vendors. These vendors
account for approximately 94% of all EPUB sales, of which at
least 33% is attributed to self-published EPUBs according to
the 2017 AuthorEarnings report [15]. We notiﬁed all ﬁve self-
publishing services of which the vetting process was deemed
inadequate.
disclosed vulnerability could be leveraged to exploit the appli-
cation. Even applications that employ a more up-to-date engine
may still be affected by so-called n-day vulnerabilities [24],
[60], security issues that have been patched in the upstream
component (and thus known publicly), but that still affect
software that did not yet update this vulnerable component. As
it may take days, or even years (e.g. in the case of Calibre 3)
to update a known-vulnerable browser engine, we believe this
forms a signiﬁcant threat for EPUB reading systems.
For both mobile platforms, we found that applications relied
on the built-in renderer, and thus all share the same version.
Another key difference with desktop applications is that mobile
reading systems operate from a more sandboxed environment
by default. For instance, on iOS, none of the applications
requested permission to access other ﬁles on the system, and
consequently could not be abused to render or leak ﬁles on
the local system. Although a similar functionality is available
on Android, through the Storage Access Framework [8], most
applications still required ﬁle permissions, and as a result, we
managed to detect the existence of ﬁles in six applications,
and leak their contents in half of those. This highlights that
developers should try to use the minimal amount of privileges
to reduce the potential consequences of an attack. By further
analyzing the Android applications, we found that for two the
ﬁle-leak vulnerability was caused by conﬁguring the WebView
component to allow access to the local ﬁle system, using
setAllowFileAccessFromFileURLs [9].
Although several applications would render ﬁles on the local
ﬁlesystem, not all of them lead to extraction of their contents.
Our manual analysis of these cases showed a direct relation to
SOP enforcement: the EPUB content was served from a custom,
non-existent domain, preventing access to file:// resources.
Yet, not all reading systems implementing this practice were
able to achieve complete isolation of the local ﬁle system.
For instance, Adobe Digital Editions on Windows employs a
dedicated domain, but EPUBs are still allowed to render local
images or even HTML ﬁles on network shares. The latter is
especially dangerous, as it gives access to the file:// from
where the local ﬁlesystem can be accessed.
VIII. DISCUSSION
B. EPUB speciﬁcation
Our semi-automated evaluation shows that many of the
JavaScript-supporting EPUB reading systems do not correctly
enforce the speciﬁcation’s security recommendations, and thus
can be abused in several ways. Furthermore, a signiﬁcant part of
these reading systems does not prevent EPUBs from accessing
the local ﬁle system and even provide JavaScript APIs that
are not included in the EPUB speciﬁcation. In this section, we
elaborate on the underlying issues and make suggestions on
what can be improved to remedy the various issues.
A. EPUB reading system implementations
In contrast to mobile reading systems, we identiﬁed a high
variety of rendering engines for desktop reading systems.
Moreover, we ﬁnd that ﬁve of the evaluated desktop applications
employ an outdated engine, and consequently, a publicly
Although a valued effort has been made to include effective
security recommendations, we argue that the EPUB speci-