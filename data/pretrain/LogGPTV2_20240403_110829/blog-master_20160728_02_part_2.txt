观察数据盘和日志盘的数据写入量和sync量        
日志盘的写入量远远大于数据盘，日志盘没有write，全部是sync操作          
数据盘由于有write操作，所以write大于sync，这也佐证了我前面的论据      
```    
# cat blkio.throttle.io_service_bytes     
253:64 Read 69632    
253:64 Write 39504248832    
253:64 Sync 39504248832    
253:64 Async 69632    
253:64 Total 39504318464    
253:48 Read 0    
253:48 Write 522616832    
253:48 Sync 248053760    
253:48 Async 274563072    
253:48 Total 522616832    
253:0 Read 126976    
253:0 Write 0    
253:0 Sync 0    
253:0 Async 126976    
253:0 Total 126976    
Total 40027062272    
# cat blkio.throttle.io_serviced    
253:64 Read 17    
253:64 Write 2949886    
253:64 Sync 2949886    
253:64 Async 17    
253:64 Total 2949903    
253:48 Read 0    
253:48 Write 50796    
253:48 Sync 8722    
253:48 Async 42074    
253:48 Total 50796    
253:0 Read 25    
253:0 Write 0    
253:0 Sync 0    
253:0 Async 25    
253:0 Total 25    
Total 3000724    
```    
结论就是日志盘的写入量比数据盘大很多，这个CASE是75倍。      
## 如何解这个问题    
如果你的生产中是这么部署的，日志盘用了4块SSD，数据盘用了8块SSD，那么问题来了。       
每块SSD的写入量假设为10PB，那么SSD4块盘的SSD总的写入量为40PB，8快盘的总写入量为80PB。      
那么也许1年之后XLOG就写入40PB了，而数据盘才写入1PB不到。        
SSD的剩余寿命就会相差悬殊，如果因为日志盘的问题，直接下线整台主机就不对了，还有8快盘没磨损呢。         
![screenshot](20160728_02_pic_006.png)    
怎么解呢？      
XLOG的写入是无法避免的，但是我们有方法防止故障。      
1\. 在XLOG盘还有命的时候，提取更换，如果有RAID的话，一块块换，提前rebuild。      
    需要注意的是，热插拔可能会有短暂的IO堵塞，rebuild过程中也会造成性能影响。      
减少XLOG的写入方法      
2\.1\. 关闭full page write会少写一点XLOG，但是造成无法处理操作系统或硬件的数据库崩溃恢复。      
2\.2\. 拉长检查点会少些一点XLOG。     
均衡磨损的方法      
3\. 数据盘和日志盘不要分开，大家放在一起，一起磨损。这样就不会倾斜了，但是同样要解决一个问题，rebuild。        
## 其他    
1\. 机械盘也有机械盘的问题，例如某个场景导致的磁盘问题（例如Oracle数据库，一直读写的轮询使用的REDO区间），或者一直更新某一个数据块的记录。 这部分磁盘可能很容易损坏。      
  而SSD不存在这个问题，因为有磨损算法，即使你不停更新一个块，也不会出现这个CEIL坏掉导致不可用，肯定SSD内部已经提前将这个ceil的内容转移并更新映射关系了。      
2\. cgroup      
```    
Proportional Weight division of bandwidth    
-----------------------------------------    
You can do a very simple testing of running two dd threads in two different    
cgroups. Here is what you can do.    
- Enable Block IO controller    
        CONFIG_BLK_CGROUP=y    
- Enable group scheduling in CFQ    
        CONFIG_CFQ_GROUP_IOSCHED=y    
- Compile and boot into kernel and mount IO controller (blkio); see    
  cgroups.txt, Why are cgroups needed?.    
        mount -t tmpfs cgroup_root /sys/fs/cgroup    
        mkdir /sys/fs/cgroup/blkio    
        mount -t cgroup -o blkio none /sys/fs/cgroup/blkio    
        mkdir -p /sys/fs/cgroup/blkio/test1/    
- blkio.sectors    
        - number of sectors transferred to/from disk by the group. First    
          two fields specify the major and minor number of the device and    
          third field specifies the number of sectors transferred by the    
          group to/from the device.    
- blkio.io_service_bytes    
        - Number of bytes transferred to/from the disk by the group. These    
          are further divided by the type of operation - read or write, sync    
          or async. First two fields specify the major and minor number of the    
          device, third field specifies the operation type and the fourth field    
          specifies the number of bytes.    
- blkio.io_serviced    
        - Number of IOs completed to/from the disk by the group. These    
          are further divided by the type of operation - read or write, sync    
          or async. First two fields specify the major and minor number of the    
          device, third field specifies the operation type and the fourth field    
          specifies the number of IOs.    
```    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")