





SPS14[27]
B16 [3]
IM-DSSE
Table 1: Security and asymptotic complexity of some state-of-the-art DSSE schemes.
L4



KP13 [16]
CJK+14 [5] HK14 [12]
(1)
()
(1)
()
(⋅)
()
()
+ 
log 
(log) (+)
()
L3



L3



Scheme/Property
Update Privacy
Size Privacy
Forward Privacy
Backward Privacy
Client Storage
Index Size
Search Cost
Update Cost
Parallelizable
(1)
(+)
()
()
†
(log) (+)
()
(⋅)
()
()
log3  (+)
min+log

()
()
log2
† IM-DSSEII and IM-DSSEI+II schemes in our IM-DSSE framework o(cid:29)er backward-privacy (see Section 4).
ࢫ and denote the maximum number of keywords and (cid:27)les, respectively.< and< denote the actual number of keywords and (cid:27)les,
respectively.≤⋅ is # keyword-(cid:27)le pairs.= # unique keywords included in an updated (cid:27)le,= # (cid:27)les matching search query,= #
processors,0<<1,= # historical update (add/delete) operations on keyword,= (accumulated) # unique keywords being newly added.
ࢫ We omitted the security parameter for analyzed complexity cost. Update privacy levels{1,…,5} are described in Section 4.
detailed costs of IM-DSSE and IM-DSSEI schemes are the same as those of the desktop setting be-
to the total delay due to () number of AES-CTR decryptions, compared with that of ()/128 in
cause computations were performed by the server while the client only did lightweight computation to
generate the search token. In the IM-DSSEII scheme, the client computation contributed almost 100%
network setting when the server data were stored on a SSD hard drive. For the search operation, the
IM-DSSEI+II which was all dominated by the data transmission delay. The limitation of computational
capability of the mobile device is re(cid:30)ected clearly in Figure 7b, wherein the client computation cost ac-
counted for a considerable amount of the overall delay of most schemes except for IM-DSSEI+II scheme.
Asymptotic performance comparison. Compared to Kamara et al. in [18], which achieves optimal
sublinear search time but leaks signi(cid:27)cant information for update, our IM-DSSE framework has linear
search time but achieves highly secure updates. Moreover, the scheme in [18] can not be parallelized
whereas our schemes can be. Kamara et al. in [16] relies on red-black trees as the main data structure,
achieves parallel search and oblivious update. However, it incurs extreme server storage overhead due
to its large encrypted index size. The scheme of Stefanov et al. [27] requires relatively high client
storage (e.g., 210 MB for moderate size of (cid:27)le-keyword pairs), where the client fetches a non-negligible
amount of data from the server and performs an oblivious sort on it. We only require two hash tables
and three symmetric secret keys storage. The scheme in [27] also requires signi(cid:27)cant amount of data
storage (e.g., 2000–3200 bits) per keyword-(cid:27)le pair at the server side versus 1-2 bits per keyword-(cid:27)le pair
along with a hash table in our framework. The data structure in [27] grows linearly with the number
of deletion operations, which requires re-encrypting the data structure eventually. Our schemes do
not require re-encryption (but we assume an upper bound on the maximum number of (cid:27)les), and our
storage is constant regardless of the number of updates. Cash et al. introduced the most e(cid:28)cient DSSE
scheme [5] which achieves a sub-linear search complexity. Despite being asymptotically better than
our scheme, our simulated result showed that, it is only one order of magnitude faster in practice on
very-large databases with hundred millions of documents (as used in [5]). Remark that this scheme
does not o(cid:29)er forward-privacy and therefore, it is less secure than our schemes. Table 1 provides a
asymptotic comparison of our framework with several prominent DSSE schemes regarding security,
asymptotic complexity and some additional properties.
20
6 Related Work
SSE was (cid:27)rst introduced by Song et al. [26] and it was followed by several improvements (e.g., [9, 8]).
Curtmola et al. [9] proposed a sublinear SSE scheme and introduced the security notion for SSE called
adaptive security against chosen-keyword attacks (CKA2). Re(cid:27)nements of [9] have been proposed which
o(cid:29)er extended functionalities (e.g., [29]). However, the static nature of those schemes limited their
applicability to applications required dynamic (cid:27)le collections. Kamara et al. were among the (cid:27)rst
to develop a DSSE scheme in [18] that could handle dynamic (cid:27)le collections via an encrypted index.
However, it leaks signi(cid:27)cant information for updates and it is not parallelizable. Kamara et al. [16]
proposed a DSSE scheme, which leaked less information than that of [18] and it was parallelizable.
Recently, a series of new DSSE schemes (e.g., [27, 5, 24, 12, 3, 15]) have been proposed which o(cid:29)er
various trade-o(cid:29)s between security, functionality and e(cid:28)ciency properties such as small leakage (e.g.,
[27] ), scalable searches with extended query types (e.g., [6, 30, 15] ), or high e(cid:28)ciency (e.g., [24, 21]).
Among these state-of-the art DSSE schemes, we have already selected several typical ones (i.e.,[27, 5,
18, 17, 3, 12]) and compared their security and e(cid:28)ciency properties in Table 1 and Section 5. Inspired by
the work from [5], Kamara et al. in [15] proposed a new DSSE scheme which supports more complex
queries such as disjunctive and boolean queries and achieved sub-linear search time.
Due to the deterministic keyword-(cid:27)le relationship, most traditional DSSE schemes (including ours)
leak search and access patterns de(cid:27)ned in Section 4 which are vulnerable to statistical inference attacks.
A number of attacks (e.g., [14, 25, 4, 20, 23, 32]) have been demonstrated. Several DSSE schemes have
been proposed to deal with such leakages (e.g., [13, 2]) but they are neither e(cid:28)cient nor fully secure.
Oblivious Random Access Machine (ORAM) (e.g., [11, 28]) can hide search and access patterns in DSSE.
Despite a lot of progress on these techniques, their costs are still extremely high to be applied to DSSE
in practice [22]. Hence, hiding access pattern leakages in DSSE with more e(cid:28)cient approaches is still an
open research problem that needs to be resolved to make DSSE fully secure in real-world applications.
7 Conclusions
In this article, we presented IM-DSSE, a new DSSE framework which o(cid:29)ers very high privacy, e(cid:28)cient
updates, low search latency simultaneously. Our constructions rely on a simple yet e(cid:28)cient incidence
matrix data structure in combination with two hash tables that allow e(cid:28)cient and secure search and
update operations. Our framework o(cid:29)ers various DSSE construction, which are speci(cid:27)cally designed to
meet the needs of cloud infrastructure and personal usage in di(cid:29)erent applications and environments.
All of our schemes in IM-DSSE framework are proven to be secure and achieve the highest privacy
among their counterparts. We conducted a detailed experimental analysis to evaluate the performance
of our schemes on real Amazon EC2 cloud systems. The achieved results showed the high practicality of
our framework even when deployed on mobile devices with large datasets. We released the full-(cid:30)edged
implementation of our framework for public use and analysis.
References
[1] M. Bellare and P. Rogaway. Random oracles are practical: A paradigm for designing e(cid:28)cient protocols. In
Proceedings of the 1st ACM conference on Computer and Communications Security (CCS ’93), pages 62–73,
NY, USA, 1993. ACM.
21
[2] C. Bösch, A. Peter, B. Leenders, H. W. Lim, Q. Tang, H. Wang, P. Hartel, and W. Jonker. Distributed searchable
symmetric encryption. In Privacy, Security and Trust (PST), 2014 Twelfth Annual International Conference on,
pages 330–337. IEEE, 2014.
[3] R. Bost. Sophos âĂŞ forward secure searchable encryption. In Proceedings of the 2016 ACM Conference on
Computer and Communications Security. ACM, 2016.
[4] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. Leakage-abuse attacks against searchable encryption. In
Proceedings of the 22nd ACM CCS, pages 668–679, 2015.
[5] D. Cash, J. Jaeger, S. Jarecki, C. Jutla, H. Krawcyk, M.-C. Rosu, and M. Steiner. Dynamic searchable encryp-
tion in very-large databases: Data structures and implementation. In 21th Annual Network and Distributed
System Security Symposium — NDSS 2014. The Internet Society, February 23-26, 2014.
[6] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M.-C. Rosu, and M. Steiner. Highly-scalable searchable symmetric
In Advances in Cryptology, CRYPTO 2013, volume 8042 of
encryption with support for boolean queries.
Lecture Notes in Computer Science, pages 353–373, 2013.
[7] D. Cash and S. Tessaro. The locality of searchable symmetric encryption.
EUROCRYPT 2014, pages 351–368. Springer, 2014.
In Advances in Cryptology -
[8] M. Chase and S. Kamara. Structured encryption and controlled disclosure.
ASIACRYPT 2010, volume 6477 of Lecture Notes in Computer Science, pages 577–594, 2010.
In Advances in Cryptology -
[9] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky. Searchable symmetric encryption: improved de(cid:27)nitions
In Proceedings of the 13th ACM conference on Computer and communications
and e(cid:28)cient constructions.
security, CCS ’06, pages 79–88. ACM, 2006.
[10] N. Dukkipati, T. Re(cid:27)ce, Y. Cheng, J. Chu, T. Herbert, A. Agarwal, A. Jain, and N. Sutin. An argument for
increasing tcp’s initial congestion window. Computer Communication Review, 40(3):26–33, 2010.
[11] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious rams. J. ACM, 43(3):431–
473, 1996.
[12] F. Hahn and F. Kerschbaum. Searchable encryption with secure and e(cid:28)cient updates. In Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communications Security, pages 310–320. ACM, 2014.
[13] T. Hoang, A. Yavuz, and J. Guajardo. Practical and secure dynamic searchable encryption via oblivious access
on distributed data structure. In Proceedings of the 32nd Annual Computer Security Applications Conference
(ACSAC). ACM, 2016.
[14] M. S. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure on searchable encryption: Rami(cid:27)ca-
tion, attack and mitigation. In NDSS, volume 20, page 12, 2012.
[15] S. Kamara and T. Moataz. Boolean searchable symmetric encryption with worst-case sub-linear complexity.
EUROCRYPT 2017, 2017.
[16] S. Kamara and C. Papamanthou. Parallel and dynamic searchable symmetric encryption.
In Financial
Cryptography and Data Security (FC), volume 7859 of Lecture Notes in Computer Science, pages 258–274.
Springer Berlin Heidelberg, 2013.
[17] S. Kamara and C. Papamanthou. Parallel and dynamic searchable symmetric encryption.
Cryptography and Data Security, pages 258–274. Springer, 2013.
In Financial
[18] S. Kamara, C. Papamanthou, and T. Roeder. Dynamic searchable symmetric encryption. In Proceedings of
the 2012 ACM conference on Computer and communications security, pages 965–976, New York, NY, USA,
2012. ACM.
[19] H. Krawczyk. Cryptographic extraction and key derivation: The HKDF scheme. In Advances in Cryptology
- CRYPTO 2010, volume 6223 of LNCS, pages 631–648. Springer, August 15-19 2010.
22
[20] C. Liu, L. Zhu, M. Wang, and Y.-a. Tan. Search pattern leakage in searchable encryption: Attacks and new
construction. Information Sciences, 265:176–188, 2014.
[21] I. Miers and P. Mohassel. Io-dsse: Scaling dynamic searchable encryption to millions of indexes by improv-
ing locality. 2016.
[22] M. Naveed. The fallacy of composition of oblivious ram and searchable encryption. IACR Cryptology ePrint
Archive, 2015:668, 2015.
[23] M. Naveed, S. Kamara, and C. V. Wright. Inference attacks on property-preserving encrypted databases. In
Proceedings of the 22nd ACM CCS, pages 644–655, 2015.
[24] M. Naveed, M. Prabhakaran, and C. A. Gunter. Dynamic searchable encryption via blind storage. In 35th
IEEE Symposium on Security and Privacy, pages 48–62, May 2014.
[25] D. Pouliot and C. V. Wright. The shadow nemesis: Inference attacks on e(cid:28)ciently deployable, e(cid:28)ciently
searchable encryption. In Proceedings of the 2016 ACM Conference on Computer and Communications Secu-
rity. ACM, 2016.
[26] D. X. Song, D. Wagner, and A. Perrig. Practical techniques for searches on encrypted data. In Proceedings
of the 2000 IEEE Symposium on Security and Privacy, pages 44–55, 2000.
[27] E. Stefanov, C. Papamanthou, and E. Shi. Practical dynamic searchable encryption with small leakage. In 21st
Annual Network and Distributed System Security Symposium — NDSS 2014. The Internet Society, February
23-26, 2014.
[28] E. Stefanov, M. Van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu, and S. Devadas. Path oram: an extremely simple
oblivious ram protocol. In Proceedings of the 2013 ACM SIGSAC conference on Computer and Communications
security, pages 299–310. ACM, 2013.
[29] B. Wang, S. Yu, W. Lou, and Y. T. Hou. Privacy-preserving multi-keyword fuzzy search over encrypted data
in the cloud. In INFOCOM, 2014 Proceedings IEEE, pages 2112–2120. IEEE, 2014.
[30] Z. Xia, X. Wang, X. Sun, and Q. Wang. A secure and dynamic multi-keyword ranked search scheme over
encrypted cloud data. IEEE Transactions on Parallel and Distributed Systems, 27(2):340–352, 2016.
[31] A. A. Yavuz and J. Guajardo. Dynamic searchable symmetric encryption with minimal leakage and e(cid:28)cient
updates on commodity hardware. In International Conference on Selected Areas in Cryptography, pages 241–
259. Springer, 2015.
[32] Y. Zhang, J. Katz, and C. Papamanthou. All your queries are belong to us: The power of (cid:27)le-injection attacks
on searchable encryption. In 25th USENIX Security ’16, pages 707–720, Austin, TX, 2016.
23