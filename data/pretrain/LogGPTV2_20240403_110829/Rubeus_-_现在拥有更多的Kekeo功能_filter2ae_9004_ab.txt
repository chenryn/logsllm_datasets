    [*] Building TGS-REQ request for: 'cifs/primary.testlab.local'
    [*] Connecting to 192.168.52.100:88
    [*] Sent 1384 bytes
    [*] Received 1430 bytes
    [+] TGS request successful!
    [*] base64(ticket.kirbi):
          doIFSjCCBUagAwIBBaEDAgE...(snip)...
    [*] Action: Import Ticket
    [+] Ticket successfully imported!
    C:Temptickets>C:WindowsSystem32klist.exe tickets
    Current LogonId is 0:0x570ba
    Cached Tickets: (2)
    #0>     Client: harmj0y @ TESTLAB.LOCAL
            Server: cifs/primary.testlab.local @ TESTLAB.LOCAL
            KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
            Ticket Flags 0x40a50000 -> forwardable renewable pre_authent ok_as_delegate name_canonicalize
            Start Time: 9/30/2018 18:17:55 (local)
            End Time:   9/30/2018 23:17:01 (local)
            Renew Time: 10/7/2018 18:17:01 (local)
            Session Key Type: AES-128-CTS-HMAC-SHA1-96
            Cache Flags: 0
            Kdc Called:
    #1>     Client: harmj0y @ TESTLAB.LOCAL
            Server: LDAP/primary.testlab.local @ TESTLAB.LOCAL
            KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
            Ticket Flags 0x40a50000 -> forwardable renewable pre_authent ok_as_delegate name_canonicalize
            Start Time: 9/30/2018 18:17:55 (local)
            End Time:   9/30/2018 23:17:01 (local)
            Renew Time: 10/7/2018 18:17:01 (local)
            Session Key Type: AES-128-CTS-HMAC-SHA1-96
            Cache Flags: 0
            Kdc Called:
操作上来讲，如果不是管理员权限，并且不想用
[上一篇文章描述的方法](http://www.harmj0y.net/blog/redteaming/from-kekeo-to-rubeus/)
将一个新的TGT覆盖当前登录会话中现有的TGT，你可以为指定账户请求一个TGT，并使用其 blob 和 asktgs 功能来请求/应用需要的服务票据。
有关服务票据接管原语的更多信息，请参考 [Sean Metcalf](https://twitter.com/PyroTek3/) 的博文 “[How
Attackers Use Kerberos Silver Tickets to Exploit
Systems](https://adsecurity.org/?p=2011)”中 “Service to Silver Ticket
Reference” 部分。
## tgtdeleg
tgtdeleg 功能是对 Kekeo 的 tgt::deleg 函数的重新编码版本，允许你在非管理员权限下提取系统的当前登录用户的可用 TGT
.kirbi文件。这利用了 Benjamin 发明的一个很酷的技巧，我将尝试详细解释一下，最后再介绍一些操作实例。
通用安全服务应用程序接口（GSS-API）是应用程序用来与安全服务交互的一个通用 API。虽然微软没有 [正式 支持 GSS-API](https://msdn.microsoft.com/en-us/library/ms995352.aspx), 但是它确实实现了
Kerberos 安全服务提供程序接口（SSPI），此接口与 Kerberos GSS-API 相兼容，意味着它支持所有常见的 Kerberos GSS-API 结构/方法。本文中将多次引用 [RFC4121](https://tools.ietf.org/html/rfc4121) 作为参考。
基本上，简单来说，你可以使用 Windows API 来请求通过 SSPI/GSS-API 发送到远程 host/SPN 的委托
TGT。这些结构中的一个包含着 KRBCRED（.kirbi）格式的当前用户的转发TGT，该 KRBCRED 被加密包含在 AP-REQ
中，以用于发送到目标服务器。用于加密 Authenticator / KRB-CRED 的会话密钥包含在目标 SPN
的服务票据中，此票据缓存于一个可访问的位置。将这些结合在一起，我们就可以在非管理员权限下提取当前用户的可用 TGT 了！
首先，使用 [AcquireCredentialsHandle()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa374713\(v=vs.85).aspx) 来获取当前用户现有 Kerberos
凭据的句柄。我们要为 fCredentialUse 参数指定 SECPKG_CRED_OUTBOUND，这将 “允许本地客户端凭证准备一个传出令牌”。
然后，使用 AcquireCredentialsHandle() 返回的凭据句柄和
[InitializeSecurityContext()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa375507\(v=vs.85).aspx) 建立一个“客户端的，出站安全上下文
”。这里的技巧是为 fContextReq 参数指定 ISC_REQ_DELEGATE 和 ISC_REQ_MUTUAL_AUTH 标志。这将请求一个委派
TGT，意思是“服务器可以使用这个上下文来作为客户端向其他服务器进行认证。 ” 我们还为 pszTargetName 参数指定一个 SPN，此 SPN
代表的服务器应为无约束委派的（默认为 HOST/DC.domain.com）。这就是我们假装要进行委派请求的 SPN/服务器。
当触发这个 API 调用时将发生什么？
首先，将发生 TGS-REQ/TGS-REP 交换来请求我们假装要委派的 SPN
的服务票据。这样就将在目标服务器和我们发起连接的主机之间建立一个共享会话密钥。服务票据存储在本地的 Kerberos
缓存中，意味着我们稍后可以提取这个共享会话密钥。
接下来，将为当前用户请求一个转发TGT。转发票据的更多信息，请参考“什么是转发票据”的[章节](https://technet.microsoft.com/pt-pt/library/cc772815\(v=ws.10).aspx)。KDC将使用当前TGT的单独会话密钥返回一个新的
TGT。系统将使用这个转发TGT为目标服务器建立一个 AP-REQ 请求，此请求中的认证器包含着转发TGT的可用 KRB-CRED 编码。这在
RFC4121 的 “4.1.1. Authenticator Checksum” 章节有说明。
最终的结果是什么呢？如果所有步骤都成功，我们将得到以SSPI[ SecBuffer](https://docs.microsoft.com/en-us/windows/desktop/api/sspi/ns-sspi-_secbuffer) 结构编码的 AP-ERQ(包含新TGT的.kirbi)，被传递给 InitializeSecurityContext() 的 pOutput
指针所指向。我们可以在输出流中搜索 [ KerberosV5
OID](https://github.com/gentilkiwi/kekeo/blob/fd852374dfcfae4ddf5e19e4d8eeb03833f08963/kekeo/modules/kuhl_m_tgt.c#L329-L345)，并从
GSS-API 输出中提取 AP-REQ。
然后就可以
[从缓存中](https://github.com/GhostPack/Rubeus/blob/4c9145752395d48a73faf326c4ae57d2c565be7f/Rubeus/lib/LSA.cs#L1247-L1248)
提取服务票据会话密钥并使用此密钥解密从 AP-REQ 中提取的
[认证器](https://github.com/GhostPack/Rubeus/blob/4c9145752395d48a73faf326c4ae57d2c565be7f/Rubeus/lib/LSA.cs#L1468-L1469)。最后我们可以从认证器校验和中提取编码的
KRB-CRED，并输出为可用的 TGT .kirbi:
成功！m/
从操作的角度来看，这是一个比较小众的功能。我能想到的主要应用场景是，在一个环境中你已经控制了多个客户端，并且至少有一台主机你没有获取管理员权限。从这台主机上，你可以用Rubeus的
tgtdeleg 功能提取当前用户的 TGT，并将其和 /autorenew 标志一起传递给运行在另一台主机上的 Rubeus 的 renew
函数。这将允许你在不提权的情况下提取当前用户的凭证，并在另一台主机上进行最多7天（默认）的续订。
无论这个 TTP 是否有实际用处，理解和重新编码的过程给我带来了很多乐趣:)
## changepw
changepw 操作（即Kekeo中的 misc::changepw）是 @Aorato POC 的一个实现版本，允许攻击者利用一个 TGT .kirbi
修改用户的明文口令（无须知道口令的当前值）。将此与 asktgt 和用户的
rc4_hmac/aes128_cts_hmac_sha1/aes256_cts_hmac_sha1
哈希结合起来，意味着攻击者可以在已知用户口令hash的情况下轻松地强制重置一个用户的明文口令。或者，如果使用 Rubeus 的 dump
命令（管理员权限下）的话，攻击者只需用LSA API提取票据就能强制重置一个用户的口令。
在 [RFC3244](https://tools.ietf.org/html/rfc3244.html) (Microsoft Windows 2000
Kerberos Change Password and Set Password Protocols.)
中解释了这个过程。以下是发送到域控的464端口（kpasswd）的数据格式：
有两个主要的部分：一个 AP-REQ 和一个特殊构造的 [KRB-PRIV](https://github.com/gentilkiwi/kekeo/blob/fd852374dfcfae4ddf5e19e4d8eeb03833f08963/modules/asn1/KerberosV5Spec2.asn#L289-L294)
ASN.1 结构。AP-REQ 消息包含用户的 TGT blob，以及使用TGT .kribi中包含的TGT会话密钥加密的
[验证器](https://github.com/gentilkiwi/kekeo/blob/fd852374dfcfae4ddf5e19e4d8eeb03833f08963/modules/asn1/KerberosV5Spec2.asn#L248-L258)
。验证器必须具有随机
[子会话密钥](https://github.com/gentilkiwi/kekeo/blob/fd852374dfcfae4ddf5e19e4d8eeb03833f08963/modules/asn1/KerberosV5Spec2.asn#L255)集，用于加密后面的
KRB-PRIV 结构。KRB-PRIV
包含新的明文口令，[序列/随机数](https://github.com/gentilkiwi/kekeo/blob/fd852374dfcfae4ddf5e19e4d8eeb03833f08963/inc/globals.h#L34),
和
[发送者的主机地址](https://github.com/gentilkiwi/kekeo/blob/fd852374dfcfae4ddf5e19e4d8eeb03833f08963/modules/asn1/KerberosV5Spec2.asn#L301)
（可任意指定）。
如果口令设置成功，则将返回一个 KRB-PRIV 结构，结构代码为0（KRB5_KPASSWD_SUCCESS）。错误代码为 KRB-ERROR
或其他错误代码。（在 [RFC3244](https://tools.ietf.org/html/rfc3244.html) 的第二部分末尾处定义）
注意： 我不确定具体原因，使用 tgtdeleg 技巧提取的票据无法与此 changepw 方法一起使用，会返回一个
KRB5_KPASSWD_MALFORMED 错误。我用 Rubeus 和 Kekeo 都测试了，都是一样的结果。
## 其他变化
[其他更改/修复](https://github.com/GhostPack/Rubeus/blob/master/CHANGELOG.md#110---2018-09-31)
  1. s4u 操作现在接受多个可选 snames (/altservice:X,Y,… ) 
    * 仅执行一次 S4U2self/S4U2proxy 过程，并将多个可选服务名称替换到最终返回的服务票据结果中，以获得尽可能多的 snames。
  2. 修正了 kerberoast 操作的哈希输出的encType提取，并将 KerberosRequestorSecurityToken.GetRequest 方法归功于 @machosec。
  3. 修正了 asreproast hash的salt分界线，并添加了 Hashcat 的哈希输出格式。
  4. 修正了 dump 操作中的一个bug——现在可以正确提取完整的 ServiceName/TargetName 字符串。
  5. 我添加了一个基于 [CHANGELOG.md](https://github.com/GhostPack/Rubeus/blob/master/CHANGELOG.md) 的 [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) 来记录当前和将来的一些修改。