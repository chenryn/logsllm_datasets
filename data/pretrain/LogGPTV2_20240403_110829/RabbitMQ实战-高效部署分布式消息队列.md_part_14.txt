以至于一台订单处理服务器不够用了该怎么办呢？
---
## Page 95
4.1解耦风雨路：谁将我们推向消息通信
73
4.1.2提供扩展性：没有负载均衡器的世界
使用消息通信最大的好处之一是，为应用增加处理能力变得简单。假设你刚刚
将业务扩展到了日本，现在每秒接收1000000条遛狗订单。虽然前端订单接收器
能跟得上负载并且绰绰有余，但是订单处理器却在垂死挣扎。虽然接收客户订单已
经不会再耽搁你接收其他订单了，但是那些客户受够了等待预约的确认。你需要更
多的订单处理器。就像在CoffeeBean那样，你可以添加更多的咖啡调理师。在该
示例中，你增加了额外的dog_walk_proces服务器并将它们附加到接受订单的队列上。
像变戏法那样，无须更改一行代码，你就通过增加10台新的dog_walk_process服务
器增加了10倍的处理能力。最美妙的是，RabbitMQ会将请求在处理服务器间平均
地分发。这归因于我们在2.2节讨论过的自动轮询（round-robin）行为模式。这里
根本不需要昂贵的负载均衡器。
对任何组织，而不仅仅是金钱意识强烈的初创公司，这都很重要。负载均衡硬
件非常昂贵。这也意味着能在多少地方部署它来解耦和扩展应用是受到限制的。如
果你使用AMQP和Rabbit来替代，那么可以在任何想要的地方免费添加解耦和负
载均衡。更不用提，你可以实现更复杂的路由方案，臂如将一条消息发送到至少一
个目的地，或是轮询负载均衡。负载均衡器总是需要在前端一个固定地点分配来自
网络的请求；但是如果你能很好地利用消息通信，那么你就能在防火墙内减少对负
载均衡器的依赖，同时极大地增加应用程序的可解耦处。解耦了的应用才是可扩展
的。
4.1.3零成本API：语言不应成为锁
我们一直忽略了使用AMQP来解耦应用程序的最大好处：免费的API。当今所
有人都在讨论网络API，它允许你将应用程序功能集成到其他应用程序当中去。通
常来讲，这需要花费一点点努力，因为你最终需要写一大段代码来将传入的HTTP
请求转化为应用程序中的函数调用。如果你使用AMQP来连接应用程序的各个部分，
那么实际上你将无须额外的工作就能获得一套API一—这套API使用消息通信。
假设你扩展了吉娃娃遛狗，加人了洗狗业务。你有两个新的应用程序来支持这
项新业务：dog_wash_request 和dog_wash_process。然后你有了个绝妙的想法：为每
次洗狗赠送一次遛狗服务。由于洗狗和遛狗预约应用程序都使用AMQP，你所需要
做的是更新dog_wash_request产生一条额外的包含遛狗预约信息的AMQP消息。这
---
## Page 96
74
第4章解决Rabbit相关问题：编码与模式
意味着你不需要重写预约代码，也无须复制洗狗应用的代码。同样重要的是，遛狗
应用和洗狗应用不需要使用同一门语言编写。
当你编写遛狗应用时，你可能选择Erlang作为工作的最佳语言。但在之后的
几个月里，你发现自己非常喜欢使用Clojure来构建高并发应用程序。因此你用
Clojure来编写洗狗应用程序。如果使用Erlang内建的通信协议来连接dog_walk
request和dog_walk_process的话，那么让洗狗应用程序和dog_walk_process进行通
信将是非常困难的，因为它并不是用Erlang编写的。但是由于AMQP是语言无关的，
并且拥有数十种语言的本地语言绑定，因此你可以在Rabbit上轻松连接Clojure请
求接收器和Erlang请求处理器。使用AMQP连接应用程序给了你足够的灵活性来
为工作的每一部分选择正确的语言，并且即使之后改变了主意也能连接用完全不同
语言编写的应用程序。你能以想要的任何方式来连接基础架构的任何或者所有部分，
RabbitMQ让这一切变得简单。
所以，首先你要做的是问问你自己，如何将你的应用程序进行切分？或者说，
应用程序的哪部分是订单接收者，哪部分是订单处理者？记住这些，让我们深入到
一些现实世界的示例当中去，使用Rabbit和消息通信解决实际问题和回答这些疑问。
4.2发后即忘模型
当我们查看消息通信能够解决的问题类型时，消息通信适用的主要领域之一是
发后即忘的处理模式。不管是将联系方式添加到邮件列表中去，还是将1000张图片
转换成缩略图，你关心的是这些任务将会完成，但无须实时完成。事实上，你通常
想要避免阻塞触发任务的用户。我们描述了作为发后即忘的三种类型的任务：你创
建了任务，放置到交换器上，并让你的应用程序返回继续工作。根据你的需求，你
可能甚至都不需要通知用户任务已经完成。
匹配该模式的两种一般类型的任务：
·批处理（batch processing）一针对大型数据集合的工作或者转换。这种类
型的任务可以构建为单一的任务请求，或者多个任务对数据集合的独立部分
进行操作。
■通知（notifications）一—对发生事件的描述。内容可以是消息的日志，也可
以是真实的报告通知给另一个程序或者是管理员。
---
## Page 97
4.2发后即忘模型
75
我们将向你展示两个不同的现实世界中发后即忘的例子。这两个例子符合我们
之前提到的两种类别。第一个是告警框架，它允许基础架构中的应用生成管理员告
警通知。你不需要担心它们需要发送到哪里，以及如何到达。第二个例子是关于批
处理绝佳的示例：将单张图片上传并将其转换成众多图片尺寸和格式。当本节结束
的时候，你将学会RabbitMQ编程的最基本类型：用无须应答的消息来触发工作。
让我们开始生成些告警信息吧！
4.2.1-发送告警
不管你编写的是何种类型的应用程序，在发生错误时获得通知是非常必要的。
典型的情况下，你可能运行像Nagios这样的服务监控程序。它会在应用程序宕机或
者其依赖的服务不可用时通知你。但是，当应用程序正经历来自同一IP、非正常数
量的用户登录请求时，你是否能收到通知呢？或者也许你允许客户在他们的数据发
生不寻常事件时收到通知？你需要的是为应用程序生成告警信息，但是这开辟了一
套全新的问题，且会为应用程序带来不小的复杂度。什么样的事件需要告警？更重
要的是，你如何进行告警？SMS？IM？不管你如何对应用进行切分，你正打算加
要告警的Web应用程序需要错误处理代码以应对SMS服务器不可用。
别担心，RabbitMQ正赶来拯救你。本质上你的Web应用程序唯一要做的是生
成告警内容。它们无须知道告警信息应该去到哪里，怎么到达那里，或者当告警信
息投递失败该怎么办。所有你需要做的是写一个新的告警服务器应用程序，通过
Rabbit接收告警消息，然后在适当的时候增强Web应用以发布告警消息。
你怎样设计这个新的告警框架？特别是你应该使用什么AMQP交换器类型？你
应该使用fanout交换器，然后为每种告警传输类型（IM、Twitter、SMS等）创建队
列。好处是Web应用不需要知道告警信息是如何投递到最终接收者的。它只是发布
消息，然后继续工作。坏处是每个告警传输者都会得到一份拷贝，所以每次告警发
生的时候，你都会被IM、文本消息、Twitter直通消息淹没。
另一种更好的组织告警系统的方式是为其创建三种严重级别告警：info，
warning和critical。但是如果使用fanout类型交换器的话，则任何发布的告警都会
发送到所有这三个严重级别队列上。作为替代方案，你可以创建direct类型交换
---
## Page 98
76
第4章解决Rabbit相关问题：编码与模式
器。它允许应用程序为告警消息贴上严重等级的标签，用来作为路由键。不过，如
果你选择topic类型交换器会怎样呢？topic交换器使得你可以为消息创建灵活的标
签，从而将它们引导到多个队列。这些队列可以提供你所需的服务（而非fanout交
换器那样）。如果你为告警框架采用topic交换器，你就不会受限于每个alert只有一
种严重级别。事实上，你将可以为消息贴上严重级别标记和类型标记。举例来说，
假设有个叫JoeDon的黑客为了在你的遛狗预约里匹配数据，正以每秒10000次
请求的速度攻击你的数据统计服务器。在你的组织里，你需要将警告发送给基础设
施管理部门（他们会接收所有标记为critical的告警信息）和你的API开发团队
（他们会接收所有标记为rate_limiting的告警信息）。既然你已经为告警框架选
择了topic交换器，应用程序就可以为像这样卑劣行径的告警打上critical.rate_
limiting标记。你看！RabbitMQ自动将这条告警信息路由到了critical队列
和rate_limiting队列去了。这是因为你创建的交换器绑定规则：critical.*和
*.rate_limiting。图4.3展示了告警系统的工作流程。
告警生产者
critical.
rate_limit
RabbitMQ
critical."
*.rate_limit
critical,
rate_limi
PI:EMAIL
rate_limit_notify
critical_notify
告警消费者
PI:EMAIL
图4.3告警系统流程
---
## Page 99
4.2发后即忘模型
77
为了构造这个告警框架，你需要在第2章HelloWorld例子中安装的Pika库。
如果你跳过了那部分的话，这里有 Pika 快速安装步骤（假设你也没有安装easy_
install):
$ wget http://peak.telecommunity.com/dist/ez_setup.py
(25.9 KB/s) - ez_setup.py saved [10285/10285]
$pythonez_setup.py
Installed /Library/Python/2.6/site-packages/setuptools-0.6..:
$ easy_install pika
Processing dependencies for pika
Finished processing dependencies for pika
下一步需要为应用程序设置一套RabbitMQ用户名和密码来发布和接收告警消息。
让我们设置用户名为alert_user并且密码为alertme。同时也给alert_user用
户授予在默认vhost“”上的read/write/configure权限。
从RabbitMQ安装目录下的./sbin目录，运行以下命令：
$ ./rabbitmqctl add_user alert_user alertme
Creating user "alert_user" ...
.,.done.
$./rabbitmqctl set_permissions alert_user",*"".*"".*"
Setting permissions for user "alert_user" in vhost "/"..
...done.
设置好之后，你可以准备告警系统的最重要部分了：AMQP消费者会接收告警
消息并把它们传输到目的地。创建alert_consumer.py文件，并将下列代码复制
到文件内。
清单4.1连接到代理
import json, smtplib
importpika
代理
ueu==—aueu—
设置
AMQP_SERVER = "localhost"
---
## Page 100
78
第4章解决Rabbit相关问题：编码与模式
AMQP_USER ="alert_user"
AMQP_PASS ="alertme"
AMQP_VHOST="/"
建立到
AMQP_EXCHANGE="alerts"
代理的
creds_broker =pika.PlainCredentials(AMQP_USER,AMQP_PASS)
<一连接
conn_params = pika.ConnectionParameters(AMQP_SERVER,
virtual_host = AMQP_VHOST,
credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()
这段代码首先做的是包含了用于创建消费者的库，并告诉Python程序的主体位
置（if_name_=="__main_"：）。下一步，你进行设置并成功连接到代理服
务器（用户名、密码、虚拟主机等）。该设置假定RabbitMQ运行在你的开发工作站
上，同时使用你刚创建的用户名和密码。为简单起见，使用默认虚拟主机“”，并
在其上创建alerts交换器。让我们真正行动起来：
channel.exchange_declare( exchange=AMQP_EXCHANGE,
type="topic",
auto_delete=False)
通过将参数type="topic"传递给channel.exchange_declare，你声明了
topic类型的alerts交换器。传人的auto_delete参数意味着当最后一个消费者
断开连接后交换器仍然会存在。
记得我们讨论过告警的两种打标模式：
·用来为告警消息标记严重级别（即critical）
■用来为告警消息标记特定的类型，例如 rate_limiting
为了让告警消息正确到达队列，你需要创建绑定来实现这些规则。对该示例来
说，让我们创建一个绑定，将所有标记以critical．起始的消息路由到critical
队列。让我们创建另一个绑定，将所有标记以.rate_limit结尾的消息路由到
rate_limit队列。继续创建critical队列和rate_limit队列，并绑定它们,
就像下面展示的那样。
---
## Page 101
4.2发后即忘模型
79
清单4.2为告警topic声明并绑定队列和交换器
channel.queue_declare(queue="critical",auto_delete=False)
critical队列和
channel.queue_bind(queue="critical",
critical.* topic
exchange="alerts",
<绑定
routing_key="critical.*")
channel.queue_declare(queue="rate_limit", auto_delete=False)
channel.queue_bind(queue="rate_limit",
<rate_limit队列
exchange="alerts"
和*rate_limit
routing_key="*,rate_limit")
topic 绑定
你会注意到为critical创建的告警绑定的规则是critical.*而非critical*。
这是因为RabbitMQ使用“：”作为标记中不同部分的分隔符。如果你用critical*
作为规则的话，那么只有那些实实在在标以critical*的标记才能匹配。其实
你想要匹配的是critical.mywebapp、critical.rate_limit，或者任何以
critical，起始的标记。因此，绑定规则应为critical.*。当使用topic交换器时，
仔细设计标记模式很重要，使用“：”来分隔你想要分别匹配标记的各个部分。
你本可以将durable=True传入队列声明和绑定，这样就能确保它们幸免于
RabbitMQ重启。由于重启消费者会自动创建交换器、队列和绑定，因此你不必担
心告警系统的持久化。另一个你不关心队列持久化的原因是你同样不想持久化消息。
你的系统可能会处理大量的告警信息，所以你想要确保最高的性能，同时不使用持
久化消息通信。因为那会将消息存储到相对缓慢的硬盘上。
你也许会好奇：“我们有交换器、队列和绑定··.··我们在哪里将消息转换为真
实的告警呢？”你通过设置消费者订阅并启动监听循环来实现这一点，如下所示。
清单4.3将告警附加到处理器上
channel.basic_consume( critical_notify,
queue="critical",
no_ack=False,
consumer_tag="critical")
channel.basic_consume( rate_limit_notify,
queue="rate_limit",
no_ack=False,
consumer_tag="rate_limit")
print“Readyforalerts!“
channel.start_consuming()
让我们来剖析channel.basic_consume每个参数的含义：
---