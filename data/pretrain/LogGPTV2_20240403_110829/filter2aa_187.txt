# PLAYBACK: A TLS 1.3 STORY

## WHO ARE WE?
- Alfonso Garc√≠a Alguacil
- Alejo Murillo Moya

## INTRODUCING TLS 1.3

### The Good
- **KISS (Keep It Simple, Stupid)**: Only 5 ciphers are supported.
- **Enhanced Security**: Not vulnerable to attacks that affected previous versions.
- **Forward Secrecy**: Ensures that even if a long-term key is compromised, past session data remains secure.
- **Formal Security Analysis**: The protocol has undergone rigorous formal security analysis.
- **Improved Privacy**: Traffic inspection is more difficult compared to previous versions.

### The Bad
- **Compatibility Issues**: The protocol has faced some challenges due to compatibility with older systems.

### The Ugly
- **0-RTT (Zero Round Trip Time)**: This feature, while providing speed, comes with potential security risks.

## 0-RTT: SPEED AT A COST

Your browsers and CDNs may already support TLS 1.3 0-RTT, which can lead to replay attacks.

### TLS 1.3 Handshake
- **TLS 1.3 0-RTT**: As you can see, it may be possible to perform replay attacks.

### Anti-Replay Protections
- **Single-Use Tickets**: Each ticket can only be used once.
- **Client-Hello Recording**: The server records the Client-Hello messages to detect replays.
- **Freshness Checks**: Ensures that the data is fresh and not a replay.
- **Application Profiles**: Specific configurations for different applications.
- **Separate API**: A dedicated API for handling 0-RTT.

### Anti-Replay Protections (July 2018)
- **CDN 1**:
  - **Single-Use Tickets**
  - **Client-Hello Recording**
  - **Freshness Checks**
  - **Application Profiles**
  - **0-RTT Not Available**
  - **Different API for Handling 0-RTT**
  - **Other Protections**
  - **0-RTT Only on "Safe" Methods**
  - **0-RTT Only on "Safe" Methods, No Parameters**
  - **BoringSSL**: 0-RTT without protections

### Are These Protections Enough?
- **Single-Use Tickets**: While these provide some protection, they may not be sufficient.

## Anatomy of an Attack
- **Vantage Point in the Network**: An attacker needs a strategic position in the network.
- **Browser and Server with TLS 1.3 and 0-RTT Enabled**: Both the client and server must support 0-RTT.
- **GET Not Being a "Safe Method"**: In practice, GET requests may not always be safe, contrary to RFC standards.

## Improving Our Attack
- **Browser Control**: The browser decides when to send 0-RTT data, reducing the attack window.
- **Controlling When to Send 0-RTT Data**: Is it possible to control this timing? Yes, it is.

### Controlling the Browser
- **Demo**: Demonstration of controlling the browser to send 0-RTT data at specific times.

## Universal Replay Attack
- **Even with Perfect Protections**: If the TLS library and server perfectly prevent replay attacks, could it still be possible to perform a replay attack? Yes, it is.

### Demo
- **Tool: High-Level Description**:
  - **Network Vantage Point**: Assumes a strategic position in the network.
  - **Template Creation**: Provides creation of templates for encrypted traffic.
  - **Attack Support**: Supports the two attacks described in this presentation.
  - **Modes**:
    - **Monitor Mode**
    - **Active - No Protections**
    - **Active - Protections**
  - **Availability**: Available at [https://github.com/portcullislabs/tlsplayback](https://github.com/portcullislabs/tlsplayback)

## Side Effects of 0-RTT
- **Dependency**: 0-RTT creates a dependency between the application and the underlying TLS 1.3 protocol.
- **0-RTT Awareness**: The application needs to be 0-RTT aware.
- **Replay Vulnerability**: Enabling 0-RTT could leave your application vulnerable to replay attacks.
- **Last Line of Defense**: The application itself is the last line of defense.

## Mitigations
- **Disable 0-RTT**: If not needed, disable 0-RTT.
- **Prevent Replays**: Ensure that your application does not allow replays (e.g., strict CSRF). Ensure REST services are developed properly.
- **Strict Application Profile**: Create a strict application profile after careful analysis.

## Key Takeaways
- **TLS 1.3 is Awesome but Caution is Needed**: While TLS 1.3 is a significant improvement, using 0-RTT can make your application vulnerable.
- **0-RTT Awareness**: Your application (not just web apps) needs to be 0-RTT-aware to prevent side effects.
- **Configuration Changes**: You may need to change your application or server/CDN configuration to protect against replay attacks.

Thank you!