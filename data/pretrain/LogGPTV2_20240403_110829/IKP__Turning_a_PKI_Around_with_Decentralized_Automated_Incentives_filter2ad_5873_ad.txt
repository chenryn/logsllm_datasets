a + δ
m
tD
m
E − tD
• F denotes the global fund.
Note that R and C may be the same entity, and d may be any
entity (even one of D, R, or C).
To demonstrate the two central properties above, we con-
sider two scenarios of CA misbehavior. In the ﬁrst scenario,
which we call internal issuance, the certiﬁcate-issuing CA C
is registered in IKP and in the second scenario, which we
call external issuance, C is not registered in IKP. Considering
these scenarios separately simpliﬁes our analysis below. In
both scenarios, C issues a certiﬁcate to D, and can choose
whether or not to issue a certiﬁcate that complies with D’s
DCP or not. Detector d can then choose whether to report the
certiﬁcate as unauthorized or not.
For each case, we consider the payments made in the series
of events that must have occurred and can determine the net
reward of each entity by summing the payments it received
and subtracting the sum of the payments it made. We note
that we do not consider payments made outside of IKP, as we
cannot track or constrain these transactions.
Given our model, we can prove the following properties in
the two scenarios:
• Compensation of domains affected by misbehavior: a
domain with a DCP for whom an unauthorized certiﬁcate
is issued should receive a higher net payout after a
successful report.
• Rewards for successful detectors: a successful misbehav-
ior report results in a higher net payout for the detector
than an unsuccessful report or no report at all.
• Deterrence of internal misbehavior: a CA that has regis-
tered in IKP and issued an unauthorized certiﬁcate for a
domain has a negative net payout.
• Collusion-proofness for external misbehavior: in the sec-
ond scenario, a CA that has not registered in IKP cannot
417
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
collude with any set of other entities to gain a positive
net reward from issuing an unauthorized certiﬁcate.
The last property highlights the need to consider collusion
attacks in IKP. In particular, we must verify that a misbehaving
C cannot collude with other entities and sum their net rewards
to gain a proﬁt. We observe that C will only collude with
entities that receive a positive net payout on their own, but
can purposely misbehave in order to trigger RP payouts. To
ensure that no possible collusion can result in a proﬁt for C,
we sum the rewards of all positive-reward entities with those
of C to ﬁnd the maximum proﬁt that C can receive.
In our analysis, we assume that the CA R (who issued the
RP to D) has registered in IKP, and that the domain D has
registered a DCP. We do not consider these operations in our
analysis due to the fact that they occur once and thus should
not factor into the analysis of an individual RP’s lifetime,
which may occur (with its costs) many times.
B. Scenario #1: Certiﬁcate Issuance inside IKP
For the ﬁrst scenario, we consider whether or not C misbe-
haves by issuing a non-compliant certiﬁcate, and whether or
not a detector d reports this misbehavior. We assume that the
issuance has taken place and the appropriate payments have
been made. We observe that if no misbehavior is reported,
then the RP will eventually expire, regardless of whether C
misbehaves. Thus we consider only three cases: 1) no detector
reports misbehavior, 2) C issues a compliant certiﬁcate and
detector d reports it, and 3) C issues a rogue certiﬁcate and
detector d reports it.
The ﬁrst section of Table V shows the results for this
scenario, that is, how much is paid out to the involved entities,
according to Table IV, aggregated into the three cases.
Regarding the affected domain D, we observe that in the
case of reported misbehavior, D receives an additional a + tD
than it would if no misbehavior was reported. In order for D to
proﬁt, we require ρ  tD. Because of t ≥ tD from Equation 2, we simply let
(7)
ρ > t
and obtain a positive incentivization for R. Regarding the
misbehaving CA C, we simply require the values a and δ
to be positive, which is satisﬁed by deﬁnition.
Finally, to avoid collusion attacks in the ﬁrst scenario, we
consider the entities besides C receiving a positive reward.
We observe that although both D and d proﬁt in the case of
misbehavior, if we sum the rewards of D, d, R, and C, the
result is −m < 0, and thus a collusion between C and all
other parties does not proﬁt.
C. Scenario #2: Certiﬁcate Issuance outside IKP
In the external scenario, we assume that the certiﬁcate-
issuing CA C does not register with IKP. We investigate,
as before, whether or not C misbehaves, and whether or not
d reports misbehavior. We again assume that domain D has
purchased an RP from CA R, and we again observe that
if no misbehavior is reported, then the RP expires and C’s
misbehavior status does not matter.
The second area of Table V shows the results for the external
scenario, that is, how much is paid out to the involved entities,
according to Table IV, aggregated into three cases as above.
We concentrate on the differences from the previous sce-
the misbehaving domain C is not
nario. First, note that
punished and thus it is not deterred from misbehavior. The
reason is that external misbehavior cannot be deterred from
within IKP. On the other hand, the CA also does not receive
any payments for good behavior if outside IKP. Similarly,
detectors are not rewarded for spotting external misbehavior.
Handing out rewards would eventually drain the global fund.
Regarding the affected domain D, we have to consider
collusion attacks since a positive payout for an affected domain
might incentivize a malicious external CA to collude with that
domain. We thus consider again the entities besides C that
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
make a positive reward: As C does not need to pay anything,
colluding with any entity with a positive reward results in
net proﬁt. Colluding with R does result in a net proﬁt, but the
proﬁt is less than collusion would yield if C behaved, and thus
this is not a viable strategy for C. However, C can collude
with the affected domain D if the reward −ρ + tD is positive.
To avoid this, we set ρ ≥ tD, and since tD ≤ t and we
want this constraint to hold for all values of tD, we obtain the
stronger constraint ρ ≥ t which provides collusion-proofness
in the external scenario. However, this constraint is subsumed
by Equation 7. We note that this constraint does not imply that
an affected domain is losing money. The domain receives the
termination payout, which partially offsets the cost of the RP,
and additionally beneﬁts from the fast detection offered from
having an RP. For the same reason, we additionally set the
detector d’s reward to m instead of δ in the case of external
misbehavior (see Table IV), so that the detector’s expected
reward is zero (see Table V).
We observe that honest CAs issuing RPs beneﬁt from
joining IKP, as they receive rewards in any case. We further
stress that domains have no ﬁnancial loss when joining IKP
and purchasing RPs since they receive positive compensation
for internal misbehavior and offset their loss in case of external
misbehavior. We also observe that
the constraints set by
Equation 5, Equation 6, and Equation 7 can be easily satisﬁed
by C, who can select ρ, a, δ, and t based on the values of
the constants τ and m. We explore realistic values for these
parameters in Section IX-B.
VII. BLOCKCHAIN BACKGROUND
In this section, we provide a brief overview on blockchain-
based cryptocurrencies, which we use to instantiate IKP. In
particular, we describe the fundamental principles underlying
blockchains through Bitcoin, and then describe Ethereum
(which we use to implement IKP) and the advantages it
offers over Bitcoin. For further details on all issues related
to blockchains, we refer readers to a more complete view of
decentralized cryptocurrencies [21].
A. Blockchain Principles and Bitcoin
At a high level, decentralized cryptocurrencies such as
Bitcoin [67] are public ledgers created and maintained through
decentralized, peer-to-peer consensus. These ledgers are most
commonly implemented as blockchains, chains of blocks
linked by hash pointers to the previous blocks and containing
lists of transactions. This structure provides full history of
all past transactions and prevents the transactions from being
retroactively modiﬁed.
Bitcoin implements transactions with a small,
limited-
capability scripting language called Script [1]. The use of
Script enables a wider range of transactions such as paying
to any account, to no account (thus destroying the coin), or to
the ﬁrst account to solve a puzzle. Script is deliberately non-
Turing-complete because nodes must process Script to verify
transactions and malicious Script transactions could otherwise
cause nodes to loop forever. Script can also be used to store
non-ﬁnancial transactions in the ledger, such as a key-value
store (used by proposals such as Namecoin [68] to implement
a DNS-like system).
Most blockchains grow through the mining process,
in
which nodes in the network race to ﬁnd a value v that, when
hashed with the hash of the previous block and the transactions
since that previous block, results in a hash value of a certain
form [15]. In Bitcoin, the hash must be of a certain form
(i.e., the computed hash value must be smaller than a target
value tuned) so that a new block is found approximately every
ten minutes. Using a cryptographically secure hash function
requires a brute-force search to ﬁnd v, making mining a proof-
of-work scheme [32]. A node or miner is incentivized by the
block reward, a set amount of currency given to whomever
extends the blockchain by recording the new transactions,
ﬁnding v, and then broadcasting the new block.
Because multiple miners may ﬁnd v at different
times,
the blockchain can fork, resulting in different versions of the
blockchain. Miners decide on which version to mine on by
Nakamoto consensus: each miner picks the chain with the
greatest length. Though multiple chains may be tied for the
longest, one of the chains will eventually become longer than
the others due to the probablistic nature of mining. Nakamoto
consensus also ensures that an adversary cannot fork from
a much earlier block, as the adversary would have to mine
enough blocks to outrun the current
longest chain, which
becomes more difﬁcult the earlier the desired block is.
The security of blockchain-based cryptocurrencies relies on
the fact that no entity controls a majority of the hashing power
of the network. Otherwise, that adversary can reverse previous
transactions (called a double-spending attack) or selectively
suppress transactions by outpacing the rest of the network’s
mining power in the long run. Controlling the network in
this way is commonly called a 51% attack in the blockchain
community, though recent work has shown that with patholog-
ically malicious behavior, controlling a smaller percentage of
the hashing power is sufﬁcient to double-spend or to suppress
transactions [37, 40, 70, 79]. Blockchain proponents argue that
such an attack is unlikely to be sustained because doing so
would devalue the currency as the network loses trust in the
reliability of the currency.
B. Ethereum
Ethereum [87] generalizes the ideas behind blockchains
and Bitcoin Script, enabling the storage of arbitrary state and
Turing-complete computation in the blockchain. Transactions
in Ethereum represent computations in the Ethereum Virtual
Machine (EVM), and the language used for these computations
– in contrast to Bitcoin’s Script – is Turing-complete. To deter
malicious transactions that cause nodes to carry out expensive
or nonterminating computations, the sender of a transaction
must send gas, additional funds that compensate miners for
their computational and storage costs when executing the
transaction. Operations in the EVM are priced in units of gas
and each transaction speciﬁes a gas price, offering a tuneable
incentive for miners to execute the transaction. Ethereum thus
offers a richer computational environment than Bitcoin does.
419
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
Ethereum blockchain
…
Block
Block
Block
…
In this section, we ﬁrst describe the general changes we
made to IKP. We then describe the techniques we used to
ensure solvency and to prevent frontrunning.
send payout transactions
A. Modiﬁcations for Ethereum
CA
register RP
issue cert, RP
Domain