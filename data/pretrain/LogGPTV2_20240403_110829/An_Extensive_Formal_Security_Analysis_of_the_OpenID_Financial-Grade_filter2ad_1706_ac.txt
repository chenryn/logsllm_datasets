### Token Binding and OAuth in Detail

#### 1. Token Binding Mechanism
The Token Binding mechanism includes both the Token Binding ID (essentially, `kB,S`) and the signed EKM value from the TLS connection, as specified in [39]. The server `S` verifies the signature using `kB,S` included in this message and then generates a token, associating it with the Token Binding ID as the unique identifier of the browser.

When the browser `B` wants to use the token in a new TLS connection to `S`, it creates a new Token Binding Message using the same Token Binding ID but signs the new EKM value:
```
TB-Msg[kB,S, sig(EKM, kB,S)]
```

Since EKM values are unique to each TLS connection, `S` can conclude that the sender of the message knows the private key of the Token Binding ID. As the sender uses the same Token Binding ID as before, `S` confirms that the same party that requested the token initially is now using it.

In the simple case where `B` wants to redeem the token received from `S` at `S` (i.e., from the same origin), the token binding message in (1) is called a provided token binding message. If `B` wants to redeem the token received from `S` at another origin, say `C`, it would send both the provided token binding message and the referred token binding message:
```
TB-prov-Msg[kB,S, sig(EKM, kB,S)]
TB-ref-Msg[kB,C, sig(EKM, kB,C)]
```

Note that the EKM is the same in both messages, specifically the EKM value of the TLS connection between `B` and `S` (not `B` and `C`, which has not yet occurred). Later, when `B` wants to redeem the token at `C`, it uses `kB,C` in its (provided) token message to `C`.

#### 2. Token Binding for OAuth: App Clients
In the context of OAuth, token binding is used between the OAuth client and the authorization and resource servers. The browser is not involved in this flow, as shown in Figure 2.

The client has two token binding key pairs, one for the Authorization Server (AS) and one for the Resource Server (RS). When sending the authorization request (Step 2 of Figure 2), the client includes the hash of the Token Binding ID it uses for the AS as a PKCE challenge. When exchanging the code for an access token in Step 7, the client proves possession of the private key of this Token Binding ID, and the AS only accepts the request if the hash of the Token Binding ID matches the PKCE challenge. Thus, the code can only be exchanged by the participant that created the authorization request.

**Flow Diagram:**
- **Step 1-2:** Client initiates the process and redirects to the AS.
- **Step 3-5:** User authenticates, and the AS redirects back to the client with an authorization code.
- **Step 6-8:** Client exchanges the code for an access token.
- **Step 9-10:** Client uses the access token to access resources at the RS.

#### 3. Binding Authorization Codes for Web Server Clients
For web server clients, the authorization code is bound to the client through client authentication, as web server clients are always confidential. Therefore, the client does not include the hash of a Token Binding ID in the authorization request (Step 2 of Figure 2). Instead, the mechanism defined in OAUTB binds the authorization code to the browser/client pair.

The client includes an additional HTTP header in the first response to the browser, signaling the browser to provide the token binding ID it uses for the client to the authorization server. When the browser sends the authorization request to the AS in Step 3, it includes both a provided and a referred token binding message. The AS associates the authorization code with the token binding ID (`kB,C`).

When redirecting the code to the client in Step 6, the browser includes a token binding message for `kB,C`, proving possession of the private key. In Step 7, the client includes `kB,C` in the token request. The AS checks if this key is the same token binding ID it associated with the authorization code, ensuring the code was redirected to the client by the same browser that made the authorization request.

#### 4. JWT Secured Authorization Response Mode (JARM)
JARM aims to protect the OAuth authorization response by having the AS sign (and optionally encrypt) the response, encoding it as a JWT. This extension can be used with any OAuth 2.0 flow.

The JWT contains the issuer (identifying the AS) and the audience (client id). For example, in the Authorization Code Flow, the response JWT includes the issuer, audience, authorization code, and state values. JARM ensures the integrity of the authorization response and prevents the injection of leaked authorization codes.

### OpenID Financial-Grade API (FAPI)

#### A. Read-Only Profile
The Read-Only profile provides a secure way to access data requiring a higher degree of protection, such as financial data. It follows the OAuth Authorization Code flow and allows the client to request an ID Token by adding a scope parameter with the value `openid` to the authorization request.

The client must have a different set of redirection URIs for each authorization server to prevent mix-up attacks. When receiving the authorization response, the client checks if it was received at the expected redirection URI.

One of the main additions is the use of PKCE. The FAPI also requires confidential clients to authenticate at the token endpoint using either JWS Client Assertions or Mutual TLS. Public clients do not use client authentication.

#### B. Read-Write Profile
The Read-Write profile aims to be secure under stronger assumptions, suitable for scenarios like write access to financial data. The flow can be an OpenID Connect Hybrid flow, where both the authorization response and the token response contain an ID token. Alternatively, any other OAuth-based flow can be used with JARM.

The authorization request prepared by the client must contain a request JWS, a JWT signed by the client, containing all request parameters and the audience of the request.

A key security feature is the binding of the authorization code and the access token to the client, achieved using mTLS or OAUTB. Public clients must use OAUTB, while confidential clients can use either OAUTB or mTLS. If the client is a confidential client using mTLS, the request does not contain a PKCE challenge. When using OAUTB, the client uses a variant of PKCE depending on whether it is a web server client or an app client.