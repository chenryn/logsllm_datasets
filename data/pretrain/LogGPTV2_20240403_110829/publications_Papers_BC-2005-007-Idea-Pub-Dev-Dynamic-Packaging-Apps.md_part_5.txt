AIS, Solaris, Linux, and Windows), (2) it allows the construction of ontologies using
OWL, (3) it is supported by a strong community of developers, such as academic,
government, and biomedicine, and (4) it is a free and open source tool.
Ontology Development Methodology
Tourism is a data rich domain. This data is stored in many hundreds of data sources
and many of these sources need to be used in concert during the development of
the dynamic package and its applications. Our e-tourism ontologies provide a way
of viewing the world of tourism. They organize tourism-related information and
concepts. It will become clear later how the ontologies will allow us to achieve
integration and interoperability through the use of a shared vocabulary and mean-
ings for terms with respect to other terms. It should be noted that this is a work in
progress; our tourism ontologies are not complete yet. We are still gathering new
concepts for the taxonomies and developing new axioms.
Our ontologies were built to answer three main questions (Figure 10) that can be
asked when developing dynamic packages for a tourist: what, where, and when.
Figure 10. What, where, and when
When
What Where
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of
Idea Group Inc. is prohibited.
Developing Dynamic Packaging Applications 
• What. What can a tourist see, visit, and what can he do while staying at a
tourism destination?
• Where. Where are the interesting places to see and visit located?
• When. When can the tourist visit a particular place? This includes not only
the day of the week and the hours of the day, but also the atmospheric condi-
tions of the weather. For example, some activities cannot be undertaken if it
is raining.
There are several ways of building ontologies (Fernández López, 1999; Jones,
Bench-Capon, & Visser, 1998; Uschold & Gruninger, 1996). Our approach has
involved the following steps:
• We have devised a unique and explicit definition for concepts from the tourism
domain. Examples of concepts include nightlife, sightseeing, relaxation, and
shopping. These definitions were precise enough to discriminate the various
concepts in the ontologies.
• A root node concept has then been selected to embrace the variety of tourism
domain-relevant concepts.
• Concepts were arranged and structured using classes and subclasses. The result-
ing ontology was transformed into a hierarchical tree. For example, nightlife,
sightseeing, relaxation, and shopping are subclasses of the concept activity.
• Information concerning the disjointedness of classes was made explicit. Rela-
tions, such as inverse and transitivity, were also identified. For example, the
sightseeing concept is disjoint from the shopping concept.
• Background knowledge for each concept was added to express domain-relevant
properties. For example, a tourism organization has a telephone number, a fax
number, an address, and an e-mail.
Ontology Creation
In an early stage of our project, the ontologies were implemented using Protégé
(n.d.) editor. This was a very time-consuming task since it was necessary to find out
information about real tourism activities and infrastructures on the Web and feed
them into the knowledge base.
The main components of the tourism ontologies are concepts, relations, instances,
and axioms. A concept represents a set or class of entities within the tourism domain.
Activity, Organization, Weather, and Time are examples of concepts used. These
concepts were represented in OWL in the following way:
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission
of Idea Group Inc. is prohibited.
 Cardoso
…
…
The class Activity (which answers to the question “What”) refers to sports, such as
skiing, sightseeing or any other activity, such as shopping or visiting a theatre. The
class Organization (which answers to the question “Where”) refers to the places
where the tourist can carry out an activity. Examples of infrastructure that provide
the means for exerting an activity include restaurants, cinemas, or museums. The
classes Time and Weather (which answers to the question “When”) refers to the
time and weather conditions which allow a tourist to carry out an activity at a certain
place. The ontologies also include relations which describe the interactions between
concepts or the concept’s properties. For example, the concepts Fishing and Hiking
are subconcepts of the concept Sport.
…
…
The ontologies also include associative relationships. Relationships relate concepts
across a taxonomy of concepts. For example, the relationship hasActivity related
the class Organization with the class Activity. This means that an organization in
the tourism industry may supply a kind of activity to its customer, such as Hiking
and Surfing.
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of
Idea Group Inc. is prohibited.
Developing Dynamic Packaging Applications 
…
…
While classes describe concepts in the domain, specific elements of a class are
instances. For example, a class of WeatherConditon represents all the weather
conditions that can be verified. Specific weather conditions are instances of this
class, such as Cloudy, Showers, and Scattered Showers. However, deciding whether
something is a concept of an instance is difficult and often depends on the applica-
tion (Brachman, McGuinness, Patel-Schneider, Resnick, & Borgida, 1991).
Finally, axioms are used to constrain the values for classes and instances. Axioms
are used to associate classes and properties with either partial or complete specifica-
tions of their characteristics and to give other logical information about classes and
properties (W3C, 2004). For example:
…
…
This example expresses that instances belonging to one subclass, for example, Surf-
ing, cannot belong to another subclass, for example, Hiking. A partial view of one of
the e-tourism ontologies developed using Protégé (n.d.) is illustrated in Figure 11.
Creating Dynamic Packages
Dynamic packages are automatically created by the dynamic packaging engine.
Our architecture includes not only the dynamic packaging engine, but also the rule
editor, rule repository, and the rule engine (Figure 12).
The configuration of the dynamic packaging engine involves the following activi-
ties. During the rule development phase, the rule designer defines packaging rules
using the rule editor application. The rule editor, a component that provides an
interface to the rule repository, supports the creation and modification of packaging
rules through a graphical user interface. Packaging rules are codified and stored in
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission
of Idea Group Inc. is prohibited.
0 Cardoso
Figure 11. Using Protégé to develop e-tourism ontologies
an integrated repository, providing a central point for definition and change, which
can later drive dynamic package construction.
Packaging rules are logic statements that describe the policies and procedures to
create dynamic packages for travel consumers. When traditional rule programming
approaches are used, packaging rules are hard coded into the applications themselves,
making rules difficult to develop and expensive to modify. By contrast, using a rule
repository, packaging rules are stored externally and are separated from the dynamic
packaging application, making the creation and modification of rules easier.
The packaging rules engine and repository architecture provide a structure for separat-
ing dynamic packaging logic from dynamic packaging applications. This separation
is one of the main advantages of using a rule engine to implement packaging rules
since it allows changes to be made to the created packages to reflect new business
Figure 12. Dynamic packaging engine architecture
Dynamic Package A
Dynamic Package A Packaging rule
Dynamic Package A editor
Formal
Rule
Representation
Dynam eic n gp ia nc ekaging Pack ea ng gi in ng e rule Pa rc ek pa og sin itog r r yule -RuleML -
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of
Idea Group Inc. is prohibited.
Developing Dynamic Packaging Applications 
policies. Packaging rules can be used to define new travel products and services,
offer new promotions, or define high and low travel seasons.
Packaging Rules
A packaging rule is a statement that influences which tourism products will be part
of a dynamic package. Dynamic packages are constructed in real time based on a
set of constraints that are specified using packaging rules. For example, a travel
agency may define that a dynamic package, which includes a trip and 5-day stay in
New York, should cost less $3,000. In this example, three packaging rules define
dynamic packages to create: Rule1 (duration, 5 days), Rule2 (local, New York),
and Rule3 (less than, $3,000).
Since these rules are business oriented, they are defined and managed by business
people. This makes the packaging rule approach attractive to dynamic packaging
applications since users become an integral part of any package construction. The
use and management of explicit packaging rules has several benefits for dynamic
packaging applications:
• shorter time needed for changing packaging rules and making this change
effective in dynamic package construction decreases;
• increased profit on travel products by a faster reaction to changing market
demands and taking into account current market conditions; and
• improved customer satisfaction due to a better customization of travel products
and services according to customer preferences.
In the travel industry, most organizations do not formally identify or store rules.
Instead, although travel managers and travel agents use rules periodically, they ex-
ist only in the software code that runs packaging applications. Rules are “lost” in
application code. As a result, the people that are directly in contact with the rules
that dictate what sort of travel packages should be created, at a given time of year
under specific market conditions, are not travel managers or travel agents but rather
the information systems (IS) staff who convert packaging requirements into lines of
code. Moreover, when rules are embedded in application code it becomes difficult
to locate and change business logic and each alteration requires recompiling ap-
plication code. Separating packaging rules from application code allows packaging
policies to be easily communicated and understood by all employees, and rules can
be managed in isolation from application code.
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission
of Idea Group Inc. is prohibited.
 Cardoso
Formal Specification of Packaging Rules
Packaging rules can be expressed using formal languages. Examples of languages
include UML4, the ILOG rules language,5 the Business Rules Markup Language
(BRML6), and RuleML7. RuleML is an XML markup language for rules based on
declarative logic and allows rules to be expressed as modular components using
standard XML tags. Facilities are offered to specify different types of rules such
as derivation, transformation, and reaction rules. One very attractive capability is
the ability to specify queries and inferences on ontologies and mappings between
ontologies. This last feature was the main reason why we have selected RuleML to
model packaging rules. Since our shared global data model is expressed using an
ontology, it makes sense to use a rule modeling language that can express packag-
ing rules using the concepts present in our e-tourism ontologies. For example, the
sentence, “renting an AVIS car, class B, costs thirty euros per day,” is a packaging
rule which is modeled using RuleML in the following way,
renting
AVIS
car
class B
per day
30 euros
A more complex example would be to model the sentence, “a customer is premium
if he has spent a minimum of 5,000 euros on a travel package.”
premium
customer
spending
customer
minimum of 5000 euro
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of
Idea Group Inc. is prohibited.
Developing Dynamic Packaging Applications 
Packaging rules expressed in RuleML and semantics go hand in hand since they are
independent of the inference engine used to implement an application. This allows
exchange of rules between different engines. Before executing packaging rules, the
rules are translated to an inference engine language, such as Java Expert System
Shell (Jess)8, LISP, or Prolog.
Types of Packaging Rules