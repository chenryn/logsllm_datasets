### 问题描述

在使用 Symfony 和 Monolog 库时，遇到了以下致命错误：

```
PHP Fatal error: Can't inherit abstract function Symfony\Component\HttpKernel\Log\LoggerInterface::alert() (previously declared abstract in Psr\Log\LoggerInterface) in /home/olaurendeau/git/lafourchette-core/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php on line 23
```

### 问题分析

该错误表明 `Symfony\Component\HttpKernel\Log\LoggerInterface` 接口中的 `alert()` 方法与 `Psr\Log\LoggerInterface` 接口中的 `alert()` 方法存在冲突。具体来说，这两个接口都声明了一个名为 `alert()` 的抽象方法，但在继承过程中发生了冲突。

#### 涉及的类和接口

1. **Symfony 的 `LoggerInterface` 接口**：
   - 声明了 `alert()` 方法。
   
2. **PSR-3 的 `LoggerInterface` 接口**（由 `Psr\Log\LoggerInterface` 定义）：
   - 同样声明了 `alert()` 方法。

3. **Symfony 的 `Logger` 类**：
   ```php
   class Logger extends BaseLogger implements LoggerInterface, DebugLoggerInterface
   ```

4. **Monolog 的 `Logger` 类**：
   ```php
   class Logger implements LoggerInterface
   ```

### 解决方案

1. **检查依赖版本**：
   - 确保所有依赖库的版本兼容。特别是 Symfony 和 Monolog 的版本。
   - 可以尝试更新或回退到已知兼容的版本。

2. **修改接口实现**：
   - 如果需要自定义 `Logger` 类，可以考虑创建一个新的接口来扩展 `Psr\Log\LoggerInterface`，并在此基础上添加新的方法。
   - 例如：
     ```php
     interface CustomLoggerInterface extends Psr\Log\LoggerInterface {
         // 添加自定义方法
     }
     ```

3. **调整继承关系**：
   - 如果 `Symfony\Component\HttpKernel\Log\LoggerInterface` 和 `Psr\Log\LoggerInterface` 中的方法签名不一致，可以考虑只实现其中一个接口，并手动实现另一个接口中的方法。

### 示例代码

假设我们选择只实现 `Psr\Log\LoggerInterface`，并在 `Logger` 类中手动实现 `alert()` 方法：

```php
use Psr\Log\LoggerInterface;
use Psr\Log\LogLevel;

class CustomLogger implements LoggerInterface
{
    public function log($level, $message, array $context = [])
    {
        // 实现日志记录逻辑
    }

    public function alert($message, array $context = [])
    {
        $this->log(LogLevel::ALERT, $message, $context);
    }

    // 其他 PSR-3 接口方法
    public function emergency($message, array $context = [])
    {
        $this->log(LogLevel::EMERGENCY, $message, $context);
    }

    public function critical($message, array $context = [])
    {
        $this->log(LogLevel::CRITICAL, $message, $context);
    }

    public function error($message, array $context = [])
    {
        $this->log(LogLevel::ERROR, $message, $context);
    }

    public function warning($message, array $context = [])
    {
        $this->log(LogLevel::WARNING, $message, $context);
    }

    public function notice($message, array $context = [])
    {
        $this->log(LogLevel::NOTICE, $message, $context);
    }

    public function info($message, array $context = [])
    {
        $this->log(LogLevel::INFO, $message, $context);
    }

    public function debug($message, array $context = [])
    {
        $this->log(LogLevel::DEBUG, $message, $context);
    }
}
```

通过这种方式，可以避免接口冲突，并确保日志记录功能正常运行。