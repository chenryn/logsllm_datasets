recursive resolver seems stuck in an infinite cycle. We contacted
this operator and they reported that this recursive ran Windows
2008R2 and was marked to be phased out.
We have shown that we can identify specific problematic re-
solvers, and proven that at least one specific resolver will cycle
indefinitely. While the operator is resolving this case, it shows
TsuNAME is a problem today. We examine r 2 (Table 8) is in Appen-
dix H (omitted here due to space).
4.5 Revisiting Google Public DNS
We have seen that Google Public DNS was responsible for most
queries during both the .nz event (ğ3) and our experiments (ğ4).
Given how much traffic they handle, their role is not surprising.
Oddly, however, they show diverse behavior: some GDNS resolvers
seem to loop while others do not (Figure 3). We reached out to
them and other operators (ğ6), following responsible disclosure
406
#
1
2
3
4
5
6
Time
14:14:57
14:15:03
14:15:09
14:15:07
14:15:10
14:15:10
Median ∆t
901ms
901ms
RIPE Atlas Side
Query/Type
Resolver
19817.sub.verfwinkel.net/A
19817.sub.verfwinkel.net/A
19817.sub.verfwinkel.net/A
Authoritative Server Side from IP2
19817.sub.verfwinkel.net/A
ns.sub.cachetest.net/A
ns.sub.verfwinkel.net/A
Remaining queries
Query/Type
ns.sub.verfwinkel.net/A
ns.sub.cachetest.net/A
IP1
IP2
IP3
IP2
IP2
IP2
Total
17905
18169
Table 9: Query sequence for Probe 19817
guidelines. Our interaction with Google helped us understand how
the different components of the DNS system come together to make
TsuNAME amplification problematic.
Based on our input, Google engineers reproduced the problem.
They could not reproduce continuous looping, but did show an am-
plification factor of 10 from retries. While a powerful amplification,
this behavior conforms to limitations required by [25, 27].
But if GDNS does not loop by itself, why does it contribute large
traffic volumes during the .nz event and in our experiments? Google
engineers found it was a combination of two factors: first, retries oc-
cur outside Google’s recursive resolvers: GDNS clients themselves
can retry (for example, R1b in Figure 4). Secondly, Google’s recur-
sive resolver system did not cache the cyclic failure. Thus every
new external query would force Google’s resolvers to re-prove the
cycle, amplifying each external query by ten. This interaction of
DNS system components results in large traffic volumes.
This interaction also explains why we see only some Google
IP addresses during the .nz event (Figure 3): the clients retrying
queries produced much more traffic than those where clients do
minimal retries.
Google then fixed GDNS by implemeting negative caching of
cyclic dependent records. After Google reported their fix to us, we
confirmed they have mitigated the they TsuNAME vulnerability
in their service. When we repeated our experiments (ğ4.1 and Ap-
pendix B), wee see a much lower query volume (Appendix E). We
also thank Google for a bug bounty for reporting this problem; we
donated it to Wikipedia.
5 DETECTING CYCLIC DEPENDENCIES
TsuNAME attacks are intrinsically asymmetrical: the victims (au-
thoritative server operators) are different companies than the ampli-
fiers (vulnerable resolver operators). We discuss this threat model
in greater detail in Appendix F.
Next consider the side of the authoritative server operator, and
work on preventing TsuNAME attacks by detecting and removing
cyclic dependencies from their zones. We present CycleHunter, a
tool that we developed that proactively detects cyclic dependencies
in zone files, allowing operators to identify them before any vul-
nerable resolvers do. We make CycleHunter publicly available at
http://tsuname.io and [10].
CycleHunter uses active DNS measurements to detect cyclic
dependencies, given many NS records in a DNS zone are typically
out-of-zone (out-of-bailiwick) [55]. As such, it requires external
IMC ’21, November 2–4, 2021, Virtual Event, USA
G. C. M. Moura et al.
Zone
file
NS
list
Timeout
NSes
Cyclic
zones
1. Zone
Parser
2. Resolve
NS list
3. Find-
Cycle
4. Zone
Matcher
CycleHunter
DNS
Resolver
Cyclic
Domains
Figure 11: CycleHunter workflow
zone knowledge which can only be done if an operator has every
necessary zone file in possession (a condition we do not assume).
CycleHunter
5.1
CycleHunter begins with a bulk copy of the zone, processing it
(Figure 11):
1. Zone Parser: the first module reads a DNS zone file, such as the
.org zone and extracts records of interest. Zone files contain both
delegations and other data records (A, AAAA, NS, SOA, DNSSEC,
and so forth). The Zone Parser module extracts the NS records into
the łNS Listž (Figure 11). CycleHunter’s goal is to determine which
of these NS records are cyclically dependent, and what domain
names in the zone file use them. Given that many domain names
use the same authoritative servers [3, 24], this step significantly
reduces the search space. For instance, the .com zone has 151M
domain names, but only 2.19M unique NS records (Table 10).
2. Resolve NS list: this module tries to resolve every NS record
in the NS list. CycleHunter uses the local computer’s configured
resolver (BIND 9 in our experiments). CycleHunter retrieves the
start-of-authority (SOA) record [27] required of each zone, for each
NS in the NS list. Successful resolution of the domain’s SOA proves
that domain is resolvable and is not cyclically dependent. We are in-
terested in domains that fail this test, as these reveal which domains
have cyclically dependent NS records that are not resolvable.
3. Find Cycle: Since NS records fail for cycles, but also other
reasons (missing data, missing or łlamež servers [26], packet loss,
etc.), we next identify cycles.
To detect cycles, it first records each NS’s Authority informa-
tion [27] (an Authority object in the NS list). For example, suppose
that ns0.wikimedia.org was in the NS list (Figure 12). This module
will create an Authority object for this NS record, which will include
its parent zone wikimedia.org and its NS records (wikimedia.org:
[ns1,ns2].example,com). It does that by querying the parent au-
thoritative servers instead of the unresponsive, possibly cyclic, NS
records. For the ns0.wikimedia.org example, it retrieves the au-
thority data for wikimedia.org directly from .org’s authoritative
servers.
To detect cycles, we examine each NS record in the NS list,
identifying the parent zone and its NS records. We get this infor-
mation from the parent zone of the NS record. For example, if
ns0.wikimedia.org is in the NS list, we would check NS records for
wikimedia.org, perhaps finding ns1.example.com and ns2.example
.com. This query to the parent often succeeds even if the ns0.wiki
media.org is cyclic.
ns0.wikimedia.org
(unresolvable
NS)
wikimedia.org:
ns1.example.com
ns2.example.com
example.com:
ns1.wikimedia.org
ns2.wikimedia.org
Figure 12: CycleHunter Cyclic Dependency Detector
Then the Find Cycle module determines what zones this Au-
thority zone depends on by analyzing its own NS records. In our
fictional Figure 12 example, we see that wikimedia.org depends
on example.com so we also need to create an authority object for
example.com and determine what zones it depends on. The last step
consists of comparing these two authority objects: the example.com
NS records that depend on wikimedia.org, which in turn depends on
example.com, confirming a cyclic dependency between wikimedia.org
and example.com.
Note that although we start with one zone, we track all records
in other zones that are referenced.
CycleHunter can also detect other dependency types. For exam-
ple, if the wikimedia.org zone has an in-zone NS record (ns3.wikime
dia.org), but with an unresponsive or lame or missing glue record,
CycleHunter will classify this zone as cyclic dependent with an
in-zone NS record (łfullDepWithInZonež).
Zone Matcher: the last CycleHunter module identifies which
domain names in the DNS zone are requiring cyclic dependent NS
records identified by the Find Cycle module. For example, ns0.wi
kipedia.org could be the authoritative server for both dog.org and
cat.org.
Performance: CycleHunter is a concurrent and asynchronous
application that allows a user configurable number of threads/work-
ers. However, the largest performance bottleneck is in the resolver
used in Step 2. As such, we recommend operators use a high perfor-
mance resolver for faster results. To ensure accuracy, CycleHunter
should always start after the resolver’s cache has been cleared in
order to retrieve the most up to date DNS records. With 8 CPU
cores we can evaluate 10M domains per hour, and this work can
parallelizes with more cores.
Limitations: Currently CycleHunter detects cycles of length
two. We can detect longer cycles (see ğ4.3) and plan to extend it to
cover them. Fortunately, mitigations at other stages (see ğ2) help
for cycles that are not discovered.
5.2 Evaluation of DNS Zones
We use CycleHunter to evaluate the DNS Root zone and 7 TLDs
which are either public [20, 21] or available via ICANN CZDS [19].
Table 10 shows the number of domains (size) and the total number
of NS records (NSset) per zone.
From the evaluated 184M child domains, we obtained 3.6M dis-
tinct NS records. After processing, CycleHunter finds 44 cyclic-
dependent NS records (łCyclicž in Table 10). We manually verified
each of these cases, confirming the cycles. In total, we found 1435
unreachable domain names employing cyclic dependent domains.
This fairly a small number of domains most likely suffer simply
configuration errors that render them unresolvable. However, as
407
TsuNAME
IMC ’21, November 2–4, 2021, Virtual Event, USA
zone
.com
.net
.org
.nl
.se
.nz
.nu
Root
Total
Size
151445463
13444518
10797217
6072961
1655434
718254
274018
1506
184409371
NSSet Cyclic Affect.
1233
17
121
64
0
0
0
0
1435
2199652
708837
540819
79619
27540
35738
10519
115
3602839
21
6
13
4
0
0
0
0
44
Date
2020-12-05
2020-12-10
2020-12-10
2020-12-03
2020-12-10
2021-01-11
2020-12-10
2020-12-04
Table 10: CycleHunter: evaluated DNS Zones
Figure 13: Query timeseries for .nl domain with cyclic de-
pendency found with CycleHunter
we cover in Appendix F, adversaries could exploit the TsuNAME
vulnerability to incur damage.
5.2.1 Analyzing the .nl Cyclic Domains: The 6M domains in
.nl use 79k NS records (Table 10). CycleHunter identified 6 cyclic
dependent NSes in the .nl zone: 3 were .nl domain names, and
2 were within .com and 1 within .net. Final analysis showed 64
domains that employed these cyclic 6 NS records.
Of the 3 .nl domain names, two were our test domains. These
were not publicized and receive no more than 1k queries daily. The
remaining domain bugged-example.nl, however, is an old domain,
registered in 2004.
With access to .nl authoritative DNS traffic, we use the open-
source DNS analytics package ENTRADA [54, 64] to determine
the daily queries this cyclic domain received. Figure 13 shows the
results. Very few queries were seen until mid-June (<300 daily).
However, on May 19, the domain owner changed the NS records of
the domain to be cyclic dependent ś probably due to human error
as was the case of .nz (ğ3). After June 4th, we observe a significant
amount more queries: 2.2M, reaching 27M on June 8th. After that
point, we see three intervals of large query volumes, each averaging
42M daily queries to this domain. The first interval (July 3rdś July
13th), lasts for 10 days, the second for over a month (Sep. 13th ś Oct.
15th), and the last interval covers 43 days (Oct. 21st ś Dec. 3rd).
Figure 13 shows also that most of these queries come from
Google. To fix that, we notified the domain owner on Dec. 4th,
and they quickly fixed their NS settings, which after that, the num-
ber of queries reduced to 300 daily (we did this analysis prior to
GDNS being ś ğ4.5).
408
Simply having cyclic dependencies alone does not trigger large
volume of queries ś our two test cyclic domains have not expe-
rienced large query volumes ś this only happens in combination
with vulnerable resolvers.
5.3 Resolver software evaluation
Google repaired GDNS, significantly reducing the potential for
harm. However, as shown in Table 4, Google was not the only
affected resolver operator.
To determine how vulnerable current resolver software is to
TsuNAME, we create two tests: 1. determine if a resolver loops,
given a cyclic dependency (like r 1 in ğ4.4) and 2. if the resolver
caches these loops Appendix I).
With a test zone with cyclic dependency (ğ4), we evaluate popu-
lar DNS resolvers on an AWS EC2 (Fra) VM: Unbound (v 1.6.7) [36],
BIND (v 9.11.3) [22], and KnotDNS (v 5.1.3) [11]. We find that none
of these loop in the presence of cyclic dependent domains, and
hence are not vulnerable.
We also evaluated multiple public resolvers, finding that Quad9 [43]
and Quad1 [1] were not vulnerable. However, we did find that
Cisco’s OpenDNS [38] was vulnerable and notified the operators.
They fixed the issue on 2021-04-13.
6 RESPONSIBLE DISCLOSURE
We wish to protect zone operators from DDoS attacks using TsuNAME.