### Delay in Publishing CVEs and Patching by OEMs

Google typically takes two to three months to publish Common Vulnerabilities and Exposures (CVEs) on its security bulletin. As most Original Equipment Manufacturers (OEMs) follow Google's monthly schedule for updating security patch levels, this delay can cause unnecessary postponement of OEM patches.

### Patching Process in OEM Kernels

To understand the patching process in OEM kernels, we examined the Pixel source branches and a OnePlus repository that contained the complete commit history. We observed that these kernels selectively apply (cherry-pick) patches from Qualcomm (either mainline or stable) and sometimes from Linux. Additionally, when OEMs decide to upgrade the Android OS (e.g., from Android Oreo to Android Pie), they often abandon the old branch and develop a new stable branch (forked from upstream) corresponding to the new Android version. This strategy was also evident in the case study of the Samsung S8. We can infer that other OEMs follow a similar approach: 
1. Cherry-picking instead of merging.
2. Forking when upgrading.

This is because:
1. Firmware images often skip upstream patches, making it unlikely for a git merge to be performed.
2. OS upgrades are usually accompanied by kernel version updates, which is also the case with Qualcomm stable branches—OS upgrades lead to a new stable branch with an advanced kernel version. Furthermore, a significant number of kernel patches are applied when firmware is upgraded to a new Android OS.

Depending on the phone model, 30% to 75% of CVEs are patched through forking a new branch from upstream. This is not ideal, as Android OS upgrades typically occur annually, and there are often additional delays (e.g., carrier delays) before these upgrades reach user devices. Clearly, more patches should be cherry-picked between upgrades.

### Timeliness of Patches

For cherry-picked patches, we consider them timely if they are applied within a reasonable amount of time after Google or Qualcomm notifies the OEMs, typically expected to be one or two months. Unfortunately, OEMs often fall significantly behind this schedule. As shown in Figure 19, 80% of Qualcomm CVEs take OEMs 100 days or more to deploy corresponding patches. This is likely because OEMs ignore Qualcomm’s notifications and prefer to follow the monthly updated security patch level set by Google. We confirmed with Samsung that OEMs are bound to follow Android’s monthly bulletin, while no such strict requirements exist for Qualcomm. This is reflected in the figure, where more than 50% of the CVEs take OEMs less than a month (sometimes even beforehand) to patch after the Android security bulletin publication, which is within expectations [13].

Google's notification plays a crucial role in getting OEMs to patch. However, a small fraction (about 5%) of patches are delayed for 200 days or more after Google’s security bulletin is published. This is due to slow and infrequent security updates by some devices and occasionally skipped CVEs. For example, the Samsung S8 skipped CVE-2018-13900 from Google’s February 2019 security bulletin, which was eventually patched in 2020. From Figure 19, we do not find a significant correlation between the severity of vulnerabilities and the timeliness of patches being cherry-picked by OEMs. Note that the number of critical cherry-picked patches by OEMs is very limited, especially for some new phones, so we combined high and critical ones into a single line. CVE-2018-13900, a high-severity vulnerability, was skipped by the Samsung S8.

### Recommendations for Improvement

To improve the situation, OEMs should react more promptly to early notifications, such as those from Qualcomm. Additionally, similar to our suggestion for Qualcomm, OEMs can consider merging patches directly from upstream instead of cherry-picking them. We also hope that high-end and low-end phones will be treated equally, as low-end phones tend to receive patches more slowly, as shown in Figure 14. Ultimately, a better and more automated patching and testing process will help.

### Summary

Our analysis supports our hypothesis and identifies three general areas that need improvement:
1. **More efficient triage systems**: The current triage process for security vulnerabilities is largely manual. Better automated reasoning tools (e.g., [36]) can assist developers in identifying security-critical bugs and taking appropriate actions.
2. **More efficient knowledge propagation**: Even when information about an important security vulnerability becomes available, it either lacks a good mechanism for propagation (e.g., Linux) or is propagated with a delay (e.g., notifications by Google and Qualcomm). Ideally, this process should be more automated to reduce delays.
3. **Clean separation of changes in downstreams**: Current patching practices in downstreams rely heavily on cherry-picking. If a downstream kernel can cleanly separate its customization code from the upstream, or even better, upstream its customization (as is the case with Google [28]), the responsibility of patching upstream vulnerabilities can be completely automated with merging, i.e., Android common and Qualcomm mainlines.

### Discussion

#### Unpatched Kernels
By design, patch presence tests cannot equate the absence of patches with the target "being vulnerable." Throughout our measurements, we observed many cases where downstream kernels never apply patches from upstream. However, this could simply mean that the downstream kernel is not affected by the upstream vulnerability, e.g., due to customizations at the stops of the vulnerable function. Therefore, we focus on the patched cases, as they imply the downstream kernels are affected.

#### Further Delays After OEM Patches
Our patch propagation measurement uses kernel compilation (build) dates. However, in practice, there are additional delays before OEM updates reach user devices, including carrier certification delays (for carrier-locked phones) and users delaying firmware updates even if they are available over-the-air (OTA). Such delays are hard to quantify and are considered out of scope. To get a basic sense of carrier certification delays, we found that the average delay between build and release is about 20 days for the LG V30, Samsung S7, and Samsung S8 on T-Mobile and AT&T websites.

#### Chipset Vendors Other Than Qualcomm
In addition to Qualcomm, other major System-on-Chip (SoC) vendors include MediaTek, Kirin, and Exynos. Unfortunately, none of these vendors provide complete git repositories for their recent chipsets. Moreover, CVEs specific to Kirin and Exynos chipsets are published only on Huawei’s and Samsung’s official websites, without links to the corresponding patches. We suspect that reverse engineering on firmware images will be the only way to analyze the presence and absence of patches.

### Related Work

#### Code Similarity at the Source and Binary Level
To conduct our measurements, we need the ability to accurately test patch presence at both the source and binary levels. There is a large body of work aimed at computing source/binary code similarity (e.g., to find similar functions as a given vulnerable one) using various features [14, 27, 26, 34, 41]. In theory, these works can be used to test patch presence by computing a target function’s similarity to the patched/unpatched functions. However, similarity-based approaches are fundamentally fuzzy and not suitable for capturing the essence of a security patch, which often makes only minor changes to patched functions. Tuning the similarity-based approach for patch presence testing is an interesting but orthogonal problem.

#### FIBER: Binary Patch Presence Test
FIBER [42] is a state-of-the-art open-source tool for testing patch presence in binaries using fine-grained source-level patch information. It generates binary signatures that accurately capture the syntax and semantic information of the patch change sites and then matches them in the target binary. FIBER suits our needs perfectly, and we leverage and build on top of it to test patch presence for over 600 Android ROMs. To ensure it works well in our large-scale measurement, we enhanced the original FIBER to overcome several technical weaknesses, as detailed in §4.3.

#### Android Security Patch Investigation
Farhang et al. [19] recently conducted a measurement on Android security patches, including both user and kernel components, with some minor overlap with this paper. They analyzed the delay from the patch date (linked from the security bulletin, which we now know is often not the earliest date) to the release date on the bulletin and observed a large delay. However, this represents only a small part of the end-to-end patch propagation in the ecosystem from upstream Linux to end Android devices. They did not attempt to locate patches in the source or binary at all, so they could not identify the bottleneck of patch delay. On the other hand, we not only showed where the bottleneck is but also explained why it exists, providing actionable insights and takeaways. More importantly, we also offer suggestions on how to improve patch propagation in the ecosystem.

#### Patch and Vulnerability Lifecycle Analysis
There are several measurement studies focusing on various aspects of patch propagation in open-source software. Li et al. [31], Shahzad et al. [40], and Frei et al. [20] performed large-scale measurements regarding the vulnerability lifecycle and patching timeliness based on publicly available information from data sources like CVE databases [4] and open-source repositories. Some of these studies focus on specific open-source projects, such as Farhang et al. [19] on Android and Ozment et al. [32] on FreeBSD. No analysis has been dedicated to the Android kernel ecosystem, which involves the analysis of multiple parties in depth and the analysis of source and binary kernels.

### Conclusion

In this paper, we delved deep into the Android kernel patch ecosystem, revealing the relationships among different parties and the bottlenecks in patch propagation. This represents a first data point to measure such a huge, decentralized, fragmented, yet collaborative project. Our study is valuable in identifying deficiencies and opportunities to better manage such a project in the future.

### References

[1] Android Security Bulletin. https://source.android.com/security/bulletin/.

[2] Android Security Bulletin—January 2020. https://source.android.com/security/bulletin/2020-01-01.

[3] Linux Stable Kernel Patch Rules. https://www.kernel.org/doc/Documentation/process/stable-kernel-rules.rst.

[4] National Vulnerability Database. https://nvd.nist.gov/.

[5] Pixel Update Bulletins. https://source.android.com/security/bulletin/pixel.

[6] What to Do About CVE Numbers. https://lwn.net/Articles/801157/.

[7] Huawei-Firmware. http://huawei-firmware.com/phone-list/, 2019.

[8] Latest Official Android ROMs. https://www.cnroms.com/, 2019.

[9] MIUI Global ROM. http://c.mi.com/oc/miuidownload/index, 2019.

[10] Oppo Software Updates. https://oppo.custhelp.com/app/soft_update, 2019.

[11] Sammobile. www.sammobile.com, 2019.

[12] Stock ROM Files. https://stockromfiles.com/, 2019.

[13] Adam Conway. How Monthly Android Security Patch Updates Work. https://www.xda-developers.com/how-android-security-patch-updates-work/.

[14] B. S. Baker. Parameterized Duplication in Strings: Algorithms and an Application to Software Maintenance. SIAM J. Comput., 26(5):1343–1362, October 1997.

[15] I. D. Baxter, A. Yahin, L. Moura, M. Sant’Anna, and L. Bier. Clone Detection Using Abstract Syntax Trees. ICSM’98.

[16] Code Aurora. Android for MSM Project. https://wiki.codeaurora.org/xwiki/bin/QAEP/.

[17] Code Aurora. Android Releases. https://wiki.codeaurora.org/xwiki/bin/QAEP/release.

[18] Code Aurora. Security Bulletin. https://www.codeaurora.org/category/security-bulletin/page/3.

[19] S. Farhang, M. B. Kirdan, A. Laszka, and J. Grossklags. Hey Google, What Exactly Do Your Security Patches Tell Us? A Large-Scale Empirical Study on Android Patched Vulnerabilities. 2019.

[20] S. Frei, M. May, U. Fiedler, and B. Plattner. Large-Scale Vulnerability Analysis. In Proceedings of the 2006 SIGCOMM Workshop on Large-Scale Attack Defense, pages 131–138. ACM, 2006.

[21] Google. Distribution Dashboard. https://developer.android.com/about/dashboards.

[22] Google. Learn When You’ll Get Android Updates on Pixel Phones & Nexus Devices. https://support.google.com/pixelphone/answer/4457705?hl=en.

[23] Google. Stable Kernel Releases Updates - Security. https://source.android.com/devices/architecture/kernel/releases#security.

[24] Google Project Zero. Bad Binder: Android In-The-Wild Exploit. https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-in-wild-exploit.html.

[25] Google Project Zero. Issue 1942: Use-After-Free in Binder Driver. https://bugs.chromium.org/p/project-zero/issues/detail?id=1942.

[26] J. Jang, A. Agrawal, and D. Brumley. ReDebug: Finding Unpatched Code Clones in Entire OS Distributions. Oakland’12.

[27] L. Jiang, G. Misherghi, Z. Su, and S. Glondu. Deckard: Scalable and Accurate Tree-Based Detection of Code Clones. ICSE’07.

[28] Jonathan Corbet. Bringing the Android Kernel Back to the Mainline. https://lwn.net/Articles/771974/.

[29] A. Kernel. How Android Common Kernels Are Developed. https://source.android.com/devices/architecture/kernel/android-common, 2019.

[30] L. Kernel. How the Development Process Works. https://www.kernel.org/doc/html/latest/process/2.Process.html, 2019.

[31] F. Li and V. Paxson. A Large-Scale Empirical Study of Security Patches. CCS’17.

[32] A. Ozment and S. E. Schechter. Milk or Wine: Does Software Security Improve with Age? In USENIX Security Symposium, pages 93–104, 2006.

[33] I. Patel. Xiaomi Still Hasn’t Released Kernel Sources for the Mi A1. https://www.xda-developers.com/xiaomi-not-released-kernel-sources-mi-a1/, 2018.

[34] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz. Cross-Architecture Bug Search in Binary Executables. Oakland’15.

[35] piunikaweb. Asus Releases Botched Up Kernel Sources for Zenfone Max M2 Family on Launch Day. https://piunikaweb.com/2018/12/12/asus-releases-botched-up-kernel-sources-for-zenfone-max-m2-family-on-launch-day/, 2018.

[36] S. M. Qiushi Wu, Yang He, and K. Lu. Precisely Characterizing Security Impact in a Flood of Patches via Symbolic Rule Comparison. NDSS, 2020.

[37] Qualcomm. Security Bulletin. https://www.qualcomm.com/company/product-security/bulletins.

[38] Reddit. Samsung Issues Related to Kernel Source. https://www.reddit.com/r/Android/comments/94ol07/samsung_issues_related_to_kernel_source/, 2018.

[39] Samsung. Knox Deep Dive: Real-time Kernel Protection (RKP). https://www.samsungknox.com/en/blog/knox-deep-dive-real-time-kernel-protection-rkp, 2019.

[40] M. Shahzad, M. Z. Shafiq, and A. X. Liu. A Large Scale Exploratory Analysis of Software Vulnerability Life Cycles. In 2012 34th International Conference on Software Engineering (ICSE), pages 771–781. IEEE, 2012.

[41] X. Xu, C. Liu, Q. Feng, H. Yin, L. Song, and D. Song. Neural Network-Based Graph Embedding for Cross-Platform Binary Code Similarity Detection. CCS ’17.

[42] H. Zhang and Z. Qian. Precise and Accurate Patch Presence Test for Binaries. USENIX Security, 2018.

---

This optimized text aims to be more coherent, professional, and easier to read.