:::
:::
:::
:::
:::
::: section
::: titlepage
# []{#new-features-in-rhel-8_packaging-and-distributing-software.html#support-for-file-triggers_new-features-in-rhel-8}支持文件触发器 {.title}
:::
`File triggers`{.literal} 是某种 [RPM
脚本小程序](#advanced-topics.html#scriptlets-directives_scriptlets-new "scriptlets 指令"){.link}，在软件包的
SPEC 文件中定义。
与 [**Triggers**]{.strong}
类似，它们在一个软件包中声明，但在安装或删除包含匹配文件的另一软件包时执行。
`File triggers`{.literal} 的常见用途是更新 registry
或缓存。在这种情况下，包含或管理 registry
或缓存的软件包应该包含一个或多个
`File triggers`{.literal}。与软件包控制更新自身的情况相比，包含
`File triggers`{.literal} 可节省时间。
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#file-triggers-syntax}文件触发语法 {.title}
:::
`File triggers`{.literal} 具有以下语法：
``` literallayout
%file_trigger_tag [FILE_TRIGGER_OPTIONS] — PATHPREFIX…​
body_of_script
```
其中：
`file_trigger_tag`{.literal} 定义一种文件触发器类型。允许的类型有：
::: itemizedlist
-   `filetriggerin`{.literal}
-   `filetriggerun`{.literal}
-   `filetriggerpostun`{.literal}
-   `transfiletriggerin`{.literal}
-   `transfiletriggerun`{.literal}
-   `transfiletriggerpostun`{.literal}
:::
`FILE_TRIGGER_OPTIONS`{.literal} 与 RPM 脚本小程序选项的作用相同，但
`-P`{.literal} 选项除外。
触发器的优先级由数字定义。数值越大，文件触发脚本的执行越快。在标准
scriptlets 之前执行优先级大于 100000
的触发器，并在标准脚本小程序后执行其他触发器。默认优先级设置为 1000000。
每种类型的每个文件触发器都必须包含一个或多个路径前缀和脚本。
:::
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#file-triggers-syntax-examples}文件触发器语法示例 {.title}
:::
本节演示了 `File triggers`{.literal} 语法的具体示例：
``` literallayout
%filetriggerin — /lib, /lib64, /usr/lib, /usr/lib64
/usr/sbin/ldconfig
```
此文件触发器在安装包含路径以 `/usr/lib`{.literal} 或 `/lib`{.literal}
开头的文件的软件包后直接执行
`/usr/bin/ldconfig`{.literal}。即使软件包包含多个以 `/usr/lib`{.literal}
或 `/lib`{.literal}
开头的路径的文件，文件触发器只会执行一次。但是，所有以
`/usr/lib`{.literal} 或 `/lib`{.literal}
开头的文件名都会传递给触发器脚本的标准输入，以便您可以在脚本中过滤，如下所示：
``` literallayout
%filetriggerin — /lib, /lib64, /usr/lib, /usr/lib64
grep "foo" && /usr/sbin/ldconfig
```
这个文件触发器为每个软件包执行 `/usr/bin/ldconfig`{.literal}，其中包含以
`/usr/lib`{.literal} 开始并同时包含 `foo`{.literal}
的文件。请注意，前缀匹配的文件包括所有类型的文件，包括常规文件、目录、符号链接和其他文件。
:::
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#file-triggers-types}文件触发器类型 {.title}
:::
`File triggers`{.literal} 主要有两种类型：
::: itemizedlist
-   [每个软件包执行一次文件触发器](#new-features-in-rhel-8_packaging-and-distributing-software.html#file-triggers-executed-once-per-package "每个软件包文件触发一次"){.link}
-   [每个事务执行一次文件触发](#new-features-in-rhel-8_packaging-and-distributing-software.html#file-triggers-executed-once-per-transaction "每个事务文件触发一次"){.link}
:::
`File triggers`{.literal} 根据执行时间进一步划分，如下所示：
::: itemizedlist
-   在安装或删除软件包之前或之后
-   事务前后
:::
::: section
::: titlepage
### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#file-triggers-executed-once-per-package}每个软件包文件触发一次 {.title}
:::
`File triggers`{.literal} 每个软件包执行一次：
::: itemizedlist
-   %filetriggerin
-   %filetriggerun
-   %filetriggerpostun
:::
##### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#filetriggerin}%filetriggerin
如果此软件包包含一个或多个与此触发器前缀匹配的文件，则在安装软件包后执行此文件触发器。它还会在安装包含此文件触发器的软件包后执行，并在
`rpmdb`{.literal} 数据库中有一个或多个与此文件触发器前缀匹配的文件。
##### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#filetriggerun}%filetriggerun
如果此软件包包含一个或多个与此触发器前缀匹配的文件，则在卸载软件包之前执行此文件触发器。它还在卸载包含此文件触发器的软件包之前执行，并在
`rpmdb`{.literal} 中存在一个或多个与此文件触发器前缀匹配的文件。
##### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#filetriggerpostun}%filetriggerpostun
如果此软件包包含一个或多个与此触发器前缀匹配的文件，则在卸载软件包后执行此文件触发器。
:::
::: section
::: titlepage
### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#file-triggers-executed-once-per-transaction}每个事务文件触发一次 {.title}
:::
`File triggers`{.literal} 每个事务执行一次：
::: itemizedlist
-   %transfiletriggerin
-   %transfiletriggerun
-   %transfiletriggerpostun
:::
##### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#transfiletriggerin}%transfiletriggerin
对于包含与此触发器前缀匹配的一个或多个文件的所有已安装软件包的事务后，执行此文件触发器一次。如果事务中存在包含此文件的软件包，且
`rpmdb`{.literal}
中存在一个或多个与此触发器前缀匹配的文件，则也可以在事务后执行此操作。
#### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#transfiletriggerun}%transfiletriggerun
此文件触发器会在事务前对满足以下条件的所有软件包执行一次：
::: itemizedlist
-   此事务中将卸载软件包
-   软件包包含与此触发器前缀匹配的一个或多个文件
:::
如果事务中存在包含此文件的软件包，且 `rpmdb`{.literal}
中存在一个或多个与此触发器前缀匹配的文件，则也可以在事务前执行此操作。
##### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#transfiletriggerpostun}%transfiletriggerpostun
对于包含与此触发器前缀匹配的一个或多个文件的所有未卸载软件包进行事务后，将执行此文件触发器。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
触发文件列表在此触发器类型中不可用。
:::
因此，如果您安装或卸载包含库的多个软件包，则会在整个事务结束时更新
ldconfig 缓存。与 RHEL 7 相比，这显著提高了性能，通过 RHEL
7，每个软件包的缓存已单独更新。另外，每个软件包的 SPEC 文件中调用
ldconfig 的脚本let（在 %post 和 %postun 中称为 ldconfig）不再需要。
:::
:::
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#file-triggers-example-use}glibc 中使用文件触发器示例 {.title}
:::
本节显示了在 `glibc`{.literal} 软件包中使用 `File triggers`{.literal}
的实际示例。
在 RHEL 8 中，`File triggers`{.literal} 在 `glibc`{.literal}
中实现，以在安装或卸载事务结束时调用 `ldconfig`{.literal} 命令。
这可以通过在 `glibc’s`{.literal} SPEC 文件中包含以下脚本小程序来确保：
``` literallayout
%transfiletriggerin common -P 2000000 – /lib /usr/lib /lib64 /usr/lib64
/sbin/ldconfig
%end
%transfiletriggerpostun common -P 2000000 – /lib /usr/lib /lib64 /usr/lib64
/sbin/ldconfig
%end
```
因此，如果您安装或卸载多个软件包，整个事务完成后会为所有安装的库更新
`ldconfig`{.literal} 缓存。因此，不再需要将调用 `ldconfig`{.literal} 的
scriptlet 包括在单个软件包的 RPM SPEC 文件中。与 RHEL 7
相比，这提高了性能，在 RHEL 7 中为每个软件包单独更新缓存。
:::
:::
::: section
::: titlepage
# []{#new-features-in-rhel-8_packaging-and-distributing-software.html#stricter-spec-parser_new-features-in-rhel-8}更严格的 SPEC 解析器 {.title}
:::
SPEC 解析器现在已纳入了一些更改。因此，它可以识别之前被忽略的新功能。
:::
::: section
::: titlepage
# []{#new-features-in-rhel-8_packaging-and-distributing-software.html#support-for-big-files_new-features-in-rhel-8}支持 4 GB 以上文件 {.title}
:::
在 Red Hat Enterprise Linux 8 [**中，RPM**]{.strong} 可以使用 64
位变量和标签，它允许在大于 4 GB 的文件和软件包中运行。
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#long-bit-rpm-tags}64 位 RPM 标签 {.title}
:::
64 位版本和 32 位版本中都存在多个 RPM 标签。请注意，64
位版本的名称前面有 `LONG`{.literal} 字符串。
::: table
[]{#new-features-in-rhel-8_packaging-and-distributing-software.html#idm139867687490608}
**表 5.4. 32 位和 64 位版本中提供的 RPM 标签**
::: table-contents
  32 位变体标签名称    62-bit 变体标签名称      标签描述
  -------------------- ------------------------ -------------------------
  RPMTAG_SIGSIZE       RPMTAG_LONGSIGSIZE       标头和压缩有效负载大小.
  RPMTAG_ARCHIVESIZE   RPMTAG_LONGARCHIVESIZE   解压缩有效负载大小.
  RPMTAG_FILESIZES     RPMTAG_LONGFILESIZES     文件大小的数组.
  RPMTAG_SIZE          RPMTAG_LONGSIZE          所有文件大小的总和.
:::
:::
::: section
::: titlepage
### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#long-bits-on-cmd}在命令行中使用 64 位标签 {.title}
:::
`LONG`{.literal} 扩展总是在命令行中启用。如果您之前使用包含
`rpm -q --qf`{.literal} 命令的脚本，您可以在这些标签名称中添加
`long`{.literal} ：
``` literallayout
rpm -qp --qf="[%{filenames} %{longfilesizes}\n]"
```
:::
:::
:::
::: section
::: titlepage
# []{#new-features-in-rhel-8_packaging-and-distributing-software.html#other-features_new-features-in-rhel-8}其他功能 {.title}
:::
与 Red Hat Enterprise Linux 8 中的 RPM 打包相关的其他新功能有：
::: itemizedlist
-   简化了非verbose 模式中的签名检查输出
-   支持强制有效负载验证
-   支持 enforcing 签名检查模式
-   在宏中添加和弃用
:::
:::
:::
[]{#additional-resources-about-rpm-packaging_packaging-and-distributing-software.html}
::: chapter
::: titlepage
# []{#additional-resources-about-rpm-packaging_packaging-and-distributing-software.html#additional-resources-about-rpm-packaging_packaging-and-distributing-software}第 6 章 关于 RPM 打包的其他资源 {.title}
:::
本节介绍与 RPM、RPM 打包和 RPM
构建相关的各种主题。其中一些高级，并扩展本文档中包含的介绍材料。
[Red Hat Software Collections
Overview](https://developers.redhat.com/products/softwarecollections/overview/){.link} -
Red Hat Software Collections 产品以最新稳定版本提供持续更新的开发工具。
[红帽软件集合](https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/packaging_guide/){.link} -
打包指南提供了有关 Software Collections
的说明，并详细介绍了如何构建和打包它们。对 RPM
的软件打包有基本了解的开发人员和系统管理员可以使用本指南开始使用
Software Collections。
[Mock](https://rpm-packaging-guide.github.io/#mock){.link} - Mock
为各种架构和与构建主机不同的 Fedora 或 RHEL
版本提供社区支持的包构建解决方案。
[RPM 文档](http://rpm.org/documentation){.link} - 官方 RPM 文档.
[Fedora
打包指南](https://docs.fedoraproject.org/en-US/packaging-guidelines/){.link} -
Fedora 官方打包指南，适用于所有基于 RPM 的分发包。
:::