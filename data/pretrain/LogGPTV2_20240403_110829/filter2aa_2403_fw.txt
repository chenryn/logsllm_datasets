.text:0054148D    
mov    edi, [ebx+3] 
.text:00541490    
add    ebp, 0FFFFFFF9h 
.text:00541493    
lea    esi, [ebx+7] 
.text:00541496    
push    eax     
; Src 
.text:00541497    
push    ebp     
; int 
.text:00541498    
push    esi     
; int 
.text:00541499    
call    decrypt 
.text:0054149E    
mov    ecx, [esp+1Ch+arg_4] 
.text:005414A2    
push    offset aWb_0  
; "wb" 
.text:005414A7    
push    ecx     
; Filename 
.text:005414A8    
call    _fopen 
.text:005414AD    
mov    ebp, eax 
.text:005414AF    
push    ebp     
; File 
.text:005414B0    
push    1    
; Count 
.text:005414B2    
push    edi     
; Size 
.text:005414B3    
push    esi     
; Str 
.text:005414B4    
call    _fwrite 
.text:005414B9    
push    ebp     
; File 
.text:005414BA    
call    _fclose 
.text:005414BF    
push    ebx     
; Memory 
.text:005414C0    
call    _free 
.text:005414C5    
add    esp, 2Ch 
.text:005414C8    
pop    edi 
.text:005414C9    
pop    esi 
.text:005414CA    
pop    ebp 
.text:005414CB    
pop    ebx 
.text:005414CC    
retn 
.text:005414CC decrypt_file     endp 
通过上面的分析，我们可整理出 decrypt_file()的源代码如下： 
void decrypt_file(char *fin, char* fout, char *pw) 
{ 
        FILE *f; 
        int real_flen, flen; 
        BYTE *buf; 
        f=fopen(fin, "rb"); 
        if (f==NULL) 
        { 
                printf ("Cannot open input file!\n"); 
                return; 
        }; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
768 
逆向工程权威指南（下册） 
        fseek (f, 0, SEEK_END); 
        flen=ftell (f); 
        fseek (f, 0, SEEK_SET); 
        buf=(BYTE*)malloc (flen); 
        fread (buf, flen, 1, f); 
        fclose (f); 
        if (memcmp (buf, "QR9", 3)!=0) 
        { 
                printf ("File is not encrypted!\n"); 
                return; 
        }; 
        memcpy (&real_flen, buf+3, 4); 
        decrypt (buf+(3+4), flen-(3+4), pw); 
        f=fopen(fout, "wb"); 
        fwrite (buf+(3+4), real_flen, 1, f); 
        fclose (f); 
        free (buf); 
}; 
接下来，我们深入研究 crypt()函数： 
.text:00541260 crypt            
proc near       
.text:00541260  
.text:00541260 arg_0            
= dword ptr  4  
.text:00541260 arg_4            
= dword ptr  8  
.text:00541260 arg_8            
= dword ptr  0Ch  
.text:00541260  
.text:00541260                  
push     ebx  
.text:00541261                  
mov      ebx, [esp+4+arg_0]  
.text:00541265                  
push     ebp  
.text:00541266                  
push     esi  
.text:00541267                  
push     edi  
.text:00541268                  
xor      ebp, ebp  
.text:0054126A  
.text:0054126A loc_54126A: 
这段指令从输入缓冲区中读取部分数据（即消息块），把它传递到内部数组。为了方便讨论，笔者把内
部数组叫作“cube64”。信息的尺寸存储在 ECX 寄存器里。MOVSD 代表 move 32-bit dword。而 16 个 32
位 dwords 数据就是 64 个字节。 
.text:0054126A   
mov     eax, [esp+10h+arg_8] 
.text:0054126E   
mov     ecx, 10h 
.text:00541273   
mov     esi, ebx     ; EBX is pointer within input buffer 
.text:00541275   
mov     edi, offset cube64 
.text:0054127A   
push     1 
.text:0054127C   
push     eax 
.text:0054127D   
rep movsd 
调用 rotate_all_with_password(): 
.text:0054127F                  
call     rotate_all_with_password 
把加密内容从 cube64 复制到缓冲区： 
.text:00541284   
mov     eax, [esp+18h+arg_4] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
769 
.text:00541288   
mov     edi, ebx 
.text:0054128A   
add     ebp, 40h 
.text:0054128D   
add     esp, 8 
.text:00541290   
mov     ecx, 10h 
.text:00541295   
mov     esi, offset cube64 
.text:0054129A   
add     ebx, 40h   ; add 64 to input buffer pointer 
.text:0054129D   
cmp     ebp, eax   ; EBP contain amount of encrypted data. 
.text:0054129F   
rep movsd 
如果 EBP 不大于传入函数的文件大小，那么继续处理下一个消息块： 
.text:005412A1                  
jl 
   short loc_54126A 
.text:005412A3                  
pop     edi 
.text:005412A4                  
pop     esi 
.text:005412A5                  
pop     ebp 
.text:005412A6                  
pop     ebx 
.text:005412A7                  
retn 
.text:005412A7 crypt           
endp 
通过上面的分析，我们可整理出 crypt()的源代码如下： 
void crypt (BYTE *buf, int sz, char *pw) 
{ 
        int i=0; 
        do 
        { 
                memcpy (cube, buf+i, 8*8); 
                rotate_all (pw, 1); 
                memcpy (buf+i, cube, 8*8); 
                i+=64; 
        } 
        while (i<sz); 
}; 
然后我们再分析 rotate_all_with_password()函数。它有两个参数：密码字符串和数字参数。在加密 crypt()函
数里数字参数是 1，而在同样调用 rotate_all_with_password()函数的解密 decrypt()函数里，这个数字参数的值为 3。 
.text:005411B0 rotate_all_with_password proc near 
.text:005411B0 
.text:005411B0 arg_0   
= dword ptr 4 
.text:005411B0 arg_4   
= dword ptr 8 
.text:005411B0 
.text:005411B0   
mov     eax, [esp+arg_0] 
.text:005411B4   
push     ebp 
.text:005411B5   
mov     ebp, eax 
检测密码中的当前字符。如果是零字节，就退出： 
.text:005411B7   
cmp     byte ptr [eax], 0 
.text:005411BA   
jz     exit 
.text:005411C0  
push     ebx 
.text:005411C1   
mov     ebx, [esp+8+arg_4] 
.text:005411C5   
push     esi 
.text:005411C6   
push     edi 
.text:005411C7 
.text:005411C7 loop_begin: 
调用标准 C 函数 tolower()： 
.text:005411C7         
movsx    eax, byte ptr [ebp+0] 
.text:005411CB         
push     eax                ; C 
.text:005411CC       
call     _tolower 
.text:005411D1         
add     esp, 4 
这个函数会忽略（跳过）密码中的非拉丁字符。在进行程序测试的时候，加密工具确实忽略了非拉丁
字符。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
770 
逆向工程权威指南（下册） 
.text:005411D4         
cmp     al, 'a' 
.text:005411D6       
jl      short next_character_in_password 
.text:005411D8         
cmp     al, 'z' 
.text:005411DA       
jg       short next_character_in_password 
.text:005411DC         
movsx    ecx, al 
从当前字符的 ASCII 值中减去 97（即字母“a”）： 
.text:005411DF   
sub    ecx, 'a' ; 97 
经过刚才的处理，字母 a 的值就变成了 0，b 的值为 1，z 的值为 25: 
.text:005411E2       
cmp      ecx, 24 
.text:005411E5       
jle      short skip_subtracting 
.text:005411E7       
sub     ecx, 24 
似乎“y”和“z”是特例。在执行上述指令之后，“y”变成了 0，“z”变成了 1。这也就是说，26 个
拉丁字母最终被转换为了 0～23 之间（共计 24 个）的数字。 
.text:005411EA 
.text:005411EA skip_subtracting:  
;CODE XREF: rotate_all_ with_password+35 
接着，它以乘法指令实现除法运算。本书第 41 章介绍过“除以 9”的详细步骤。下面这段指令把密码
字符的值除以 3： 
.text:005411EA         
mov      eax, 55555556h 
.text:005411EF         
imul     ecx 
.text:005411F1         
mov     eax, edx 
.text:005411F3         
shr     eax, 1Fh 
.text:005411F6         
add     edx, eax 
.text:005411F8         
mov     eax, ecx 
.text:005411FA         
mov     esi, edx 
.text:005411FC         
mov     ecx, 3 
.text:00541201         
cdq 
.text:00541202         
idiv     ecx 
除法运算的余数存储在 EDX 寄存器里： 
.text:00541204 sub  
   edx, 0 
.text:00541207 jz  
   short call_rotate1 ; if remainder is zero, go to rotate1 
.text:00541209 dec  
   edx 
.text:0054120A jz  
   short call_rotate2 ; .. if it is 1, go to rotate2 
.text:0054120C dec  
   edx 
.text:0054120D jnz  
   short next_character_in_password 
.text:0054120F test     ebx, ebx 
.text:00541211 jle  
   short next_character_in_password 
.text:00541213 mov  
   edi, ebx 
如果余数为 2，那么就会调用 rotate3()。此时，EDI 寄存器存储的是 rotate_all_with_password()函数的
第二个参数。前文介绍过，在加密过程中这个值为 1，在解密过程中这个值为 3。函数进行了循环处理。在
加密时，rotate1/2/3 的调用次数与函数的第一个参数相等。 
.text:00541215 call_rotate3: 
.text:00541215   
push    esi 
.text:00541216   
call    rotate3 
.text:0054121B   
add    esp, 4 
.text:0054121E   
dec    edi 
.text:0054121F   
jnz    short call_rotate3 
.text:00541221   