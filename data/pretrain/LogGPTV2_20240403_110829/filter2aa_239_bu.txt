      {
        FirstName,
        LastName,
        Country,
        Wins
      }
      private CompareType _compareType;
      public RacerComparer(CompareType compareType)
      {
        _compareType = compareType;
      }
      public int Compare(Racer x, Racer y)
      {
        if (x == null && y == null) return 0;
        if (x == null) return -1;
        if (y == null) return 1;
        int result;
        switch (_compareType)
        {
          case CompareType.FirstName:
            return string.Compare(x.FirstName, y.FirstName);
          case CompareType.LastName:
            return string.Compare(x.LastName, y.LastName);
          case CompareType.Country:
            result = string.Compare(x.Country, y.Country);
            if (result == 0)
              return string.Compare(x.LastName, y.LastName);
            else
              return result;
          case CompareType.Wins:
            return x.Wins.CompareTo(y.Wins);
          default:
            throw new ArgumentException("Invalid Compare Type");
        }
      }
    }
  注意： 如果传递给Compare方法的两个元素的顺序相同，该方法则返回0。如
果返回值小于0，说明第一个参数小于第二个参数；如果返回值大于0，则第一个参数
大于第二个参数。传递null作为参数时，Compare方法并不会抛出一个
NullReferenceException异常。相反，因为null的位置在其他任何元素之前，所以如果第
一个参数为null，该方法返回-1，如果第二个参数为null，则返回+1。
现在，可以对RacerComparer类的一个实例使用Sort（）方法。传递枚举
RacerComparer. CompareType.Country，按属性Country对集合排序：
    racers.Sort(new RacerComparer(RacerComparer.CompareType.Country));
排序的另一种方式是使用重载的Sort（）方法，该方法需要一个Comparison委
托：
    public void List.Sort(Comparison);
Comparison是一个方法的委托，该方法有两个T类型的参数，返回类型为int。如
果参数值相等，该方法就必须返回0。如果第一个参数比第二个小，它就必须返回一个小
于0的值；否则，必须返回一个大于0的值。
    public delegate int Comparison(T x, T y);
现在可以把一个lambda表达式传递给Sort（）方法，按获胜次数排序。两个参数的类
型是Racer，在其实现代码中，使用int类型的CompareTo（）方法比较Wins属性。在实现
代码中，因为以逆序方式使用r2和r1，所以获胜次数以降序方式排序。调用方法之后，完
整的赛车手列表就按赛车手的获胜次数排序。
    racers.Sort((r1, r2) => r2.Wins.CompareTo(r1.Wins));
也可以调用Reverse（）方法，逆转整个集合的顺序。
11.3.2 只读集合
创建集合后，它们就是可读写的，否则就不能给它们填充值了。但是，在填充完集合
后，可以创建只读集合。List集合的AsReadOnly（）方法返回ReadOnlyCollection
类型的对象。ReadOnlyCollection类实现的接口与List集合相同，但所有修改集合
的方法和属性都抛出NotSupportedException异常。除了List的接口之外，
ReadOnlyCollection还实现了IReadOnlyCollection和IReadOnlyList接口。因为这
些接口的成员，集合不能修改。
11.4 队列
队列是其元素以先进先出（Firstin, Firstout, FIFO）的方式来处理的集合。先放入队列
中的元素会先读取。队列的例子有在机场排的队列、人力资源部中等待处理求职信的队列
和打印队列中等待处理的打印任务，以及按循环方式等待CPU处理的线程。另外，还常常
有元素根据其优先级来处理的队列。
例如，在机场的队列中，商务舱乘客的处理要优先于经济舱的乘客。这里可以使用多
个队列，一个队列对应一个优先级。在机场，这很常见，因为商务舱乘客和经济舱乘客有
不同的登记队列。打印队列和线程也是这样。可以为一组队列建立一个数组，数组中的一
项代表一个优先级。在每个数组项中都有一个队列，其中按照FIFO的方式进行处理。
  注意： 本章的后面将使用链表的另一种实现方式来定义优先级列表。
队列使用System.Collections.Generic名称空间中的泛型类Queue实现。在内部，
Queue类使用T类型的数组，这类似于List类型。它实现ICollection和
IEnumerable接口，但没有实现ICollection接口，因为这个接口定义的Add（）和
Remove（）方法不能用于队列。
因为Queue类没有实现IList接口，所以不能用索引器访问队列。队列只允许在
队列中添加元素，该元素会放在队列的尾部（使用Enqueue（）方法），从队列的头部获
取元素（使用Dequeue（）方法）。
图11-1显示了队列的元素。Enqueue（）方法在队列的一端添加元素，Dequeue（）方
法在队列的另一端读取和删除元素。再次调用Dequeue（）方法，会删除队列中的下一
项。
图11-1
Queue类的方法如表11-2所示。
表11-2
Queue类的成员
说明
Count
Count属性返回队列中的元素个数
Enqueue
Enqueue（）方法在队列一端添加一个元素
Dequeue
Dequeue（）方法在队列的头部读取和删除元素。
如果在调用Dequeue（）方法时，队列中不再有元
素，就抛出一个InvalidOperationException类型的异
常
Peek
Peek（）方法从队列的头部读取一个元素，但不删
除它
TrimExcess
TrimExcess（）方法重新设置队列的容量。
Dequeue（）方法从队列中删除元素，但它不会重
新设置队列的容量。要从队列的头部去除空元素，
应使用TrimExcess（）方法
在创建队列时，可以使用与List类型类似的构造函数。虽然默认的构造函数会创
建一个空队列，但也可以使用构造函数指定容量。在把元素添加到队列中时，如果没有定
义容量，容量就会递增，从而包含4、8、16和32个元素。类似于List类，队列的容量
也总是根据需要成倍增加。非泛型类Queue的默认构造函数与此不同，它会创建一个包含
32项空的初始数组。使用构造函数的重载版本，还可以将实现了IEnumerable接口的其
他集合复制到队列中。
下面的文档管理应用程序示例说明了Queue类的用法。使用一个线程将文档添加
到队列中，用另一个线程从队列中读取文档，并处理它们。
存储在队列中的项是Document类型。Document类定义了标题和内容（代码文件
QueueSample/Document.cs）：
    public class Document
    {
      public string Title { get; private set; }
      public string Content { get; private set; }
      public Document(string title, string content)
      {
        Title = title;
        Content = content;
      }
    }
DocumentManager类是Queue类外面的一层。DocumentManager类定义了如何处理
文档：用AddDocument（）方法将文档添加到队列中，用GetDocument（）方法从队列中
获得文档。
在AddDocument（）方法中，用Enqueue（）方法把文档添加到队列的尾部。在
GetDocument（）方法中，用Dequeue（）方法从队列中读取第一个文档。因为多个线程
可以同时访问DocumentManager类，所以用lock语句锁定对队列的访问。
  注意： 线程和lock语句参见第21章和第22章。
IsDocumentAvailable是一个只读类型的布尔属性，如果队列中还有文档，它就返回
true，否则返回false（代码文件QueueSample/DocumentManager.cs）。
    public class DocumentManager
    {
      private readonly Queue _documentQueue = new Queue();
      public void AddDocument(Document doc)
      {
        lock (this)
        {
          _documentQueue.Enqueue(doc);
        }
      }
      public Document GetDocument()
      {
        Document doc = null;
        lock (this)
        {
          doc = _documentQueue.Dequeue();
        }
        return doc;
      }
      public bool IsDocumentAvailable => _documentQueue.Count > 0;
    }
ProcessDocuments类在一个单独的任务中处理队列中的文档。能从外部访问的唯一方
法是Start（）。在Start（）方法中，实例化了一个新任务。创建一个ProcessDocuments对
象，来启动任务，定义Run（）方法作为任务的启动方法。TaskFactory（通过Task类的静
态属性Factory访问）的StartNew方法需要一个Action委托作为参数，用于接受Run方法传
递的地址。TaskFactory的StartNew方法会立即启动任务。
使用ProcessDocuments类的Run（）方法定义一个无限循环。在这个循环中，使用属
性IsDocumentAvailable确定队列中是否还有文档。如果队列中还有文档，就从
DocumentManager类中提取文档并处理。这里的处理仅是把信息写入控制台。在真正的应
用程序中，文档可以写入文件、数据库，或通过网络发送（代码文件
QueueSample/ProcessDocuments.cs）。
    public class ProcessDocuments
    {
      public static void Start(DocumentManager dm)
      {
        Task.Run(new ProcessDocuments(dm).Run);
      }
      protected ProcessDocuments(DocumentManager dm)
      {
        if (dm == null)
          throw new ArgumentNullException(nameof(dm));
        _documentManager = dm;
      }
      private DocumentManager _documentManager;
      protected async Task Run()
      {
        while (true)
        {
          if (_documentManager.IsDocumentAvailable)
          {
            Document doc = _documentManager.GetDocument();
            WriteLine("Processing document {0}", doc.Title);
          }
          await Task.Delay(new Random().Next(20));
        }
      }
    }
在应用程序的Main（）方法中，实例化一个DocumentManager对象，启动文档处理任
务。接着创建1000个文档，并添加到DocumentManager对象中（代码文件
QueueSample/Program.cs）：
    public class Program
    {
      public static void Main()
      {
        var dm = new DocumentManager();
        ProcessDocuments.Start(dm);
        // Create documents and add them to the DocumentManager
        for (int i = 0; i 类相似，Stack类实现IEnumerable和ICollection接口。
Stack类的成员如表11-3所示。
表11-3
Stack类的成员
说明
Count
返回栈中的元素个数
Push
在栈顶添加一个元素
Pop
从栈顶删除一个元素，并返回该元素。如果栈是空
的，就抛出InvalidOperationException异常
Peek
返回栈顶的元素，但不删除它
Contains
确定某个元素是否在栈中，如果是，就返回true
在下面的例子中，使用Push（）方法把3个元素添加到栈中。在foreach方法中，使用
IEnumerable接口迭代所有的元素。栈的枚举器不会删除元素，它只会逐个返回元素（代
码文件StackSample/Program.cs）。
    var alphabet = new Stack();
    alphabet.Push('A');
    alphabet.Push('B');
    alphabet.Push('C');
    foreach (char item in alphabet)
    {
      Write(item);
    }
    WriteLine();
因为元素的读取顺序是从最后一个添加到栈中的元素开始到第一个元素，所以得到的
结果如下：
    CBA
用枚举器读取元素不会改变元素的状态。使用Pop（）方法会从栈中读取每个元素，
然后删除它们。这样，就可以使用while循环迭代集合，检查Count属性，确定栈中是否还
有元素：
    var alphabet = new Stack();
    alphabet.Push('A');
    alphabet.Push('B');
    alphabet.Push('C');
    Write("First iteration: ");
    foreach (char item in alphabet)
    {
      Write(item);
    }
    WriteLine();
    Console.Write("Second iteration: ");
    while (alphabet.Count > 0)
    {
      Write(alphabet.Pop());
    }
    WriteLine();
结果是两个CBA，每次迭代对应一个CBA。在第二次迭代后，栈变空，因为第二次
迭代使用了Pop（）方法：
      First iteration: CBA
      Second iteration: CBA
11.6 链表