## 记录下 在 debian 宿主机中部署和使用 docker (常用docker命令、debian容器常用配置; debian容器部署duckdb和PostgreSQL例子)      
### 作者                                                    
digoal                                                    
### 日期                                                    
2023-03-18                                                
### 标签                                                    
PostgreSQL , PolarDB , debian , docker                     
----                                                    
## 背景     
[《记录下 debian 在带Nvidia显卡笔记本上的部署 - 用于测试 cuda 应用》](../202303/20230317_02.md)      
## 部署docker     
https://docs.docker.com/engine/install/debian/    
1、依赖    
```    
apt update    
apt install -y ca-certificates curl gnupg lsb-release    
```    
2、配置docker apt source key    
```    
mkdir -m 0755 -p /etc/apt/keyrings    
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg    
```    
3、配置docker apt source    
```    
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null    
apt update    
```    
4、部署docker    
```    
apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin    
```    
5、检查docker.service是否正常启动    
```    
root@localhost:~# systemctl -l|grep -i docker    
  sys-devices-virtual-net-docker0.device                                                 loaded active plugged   /sys/devices/virtual/net/docker0    
  sys-subsystem-net-devices-docker0.device                                               loaded active plugged   /sys/subsystem/net/devices/docker0    
  docker.service                                                                         loaded active running   Docker Application Container Engine    
  docker.socket                                                                          loaded active running   Docker Socket for the API    
```    
如果 docker.service 没启动的话先启动    
6、测试 docker     
```    
root@localhost:~# docker run hello-world    
Unable to find image 'hello-world:latest' locally    
latest: Pulling from library/hello-world    
2db29710123e: Pull complete     
Digest: sha256:ffb13da98453e0f04d33a6eee5bb8e46ee50d08ebe17735fc0779d0349e889e9    
Status: Downloaded newer image for hello-world:latest    
Hello from Docker!    
This message shows that your installation appears to be working correctly.    
To generate this message, Docker took the following steps:    
 1. The Docker client contacted the Docker daemon.    
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.    
    (amd64)    
 3. The Docker daemon created a new container from that image which runs the    
    executable that produces the output you are currently reading.    
 4. The Docker daemon streamed that output to the Docker client, which sent it    
    to your terminal.    
To try something more ambitious, you can run an Ubuntu container with:    
 $ docker run -it ubuntu bash    
Share images, automate workflows, and more with a free Docker ID:    
 https://hub.docker.com/    
For more examples and ideas, visit:    
 https://docs.docker.com/get-started/    
root@localhost:~# docker ps -a    
CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES    
3fa117a21085   hello-world   "/hello"   4 seconds ago   Exited (0) 3 seconds ago             hardcore_borg    
```    
7、清理测试docker容器和镜像    
```    
root@localhost:~# docker images    
REPOSITORY    TAG       IMAGE ID       CREATED         SIZE    
hello-world   latest    feb5d9fea6a5   18 months ago   13.3kB    
root@localhost:~# docker rm  3fa117a21085    
3fa117a21085    
root@localhost:~# docker rmi hello-world    
Untagged: hello-world:latest    
Untagged: hello-world@sha256:ffb13da98453e0f04d33a6eee5bb8e46ee50d08ebe17735fc0779d0349e889e9    
Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412    
Deleted: sha256:e07ee1baac5fae6a26f30cabfe54a36d3402f96afda318fe0a96cec4ca393359    
root@localhost:~# docker ps -a    
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES    
root@localhost:~# docker images    
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE    
```    
## 配置debian内核    
1、更多操作系统的参数介绍可参考:    
[《PostgreSQL on Linux 最佳部署手册 - 珍藏级》](../201611/20161121_01.md)      
```    
vi /etc/sysctl.conf     
vm.swappiness = 0    
vm.overcommit_memory = 1    
sysctl -p    
```    
## 一些常用docker命令  
[《microsoft sql server on docker 部署》](../202301/20230114_02.md)    
[《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB on Docker简单部署》](../202209/20220908_02.md)    
拉取镜像  
```  
docker pull debian:stable   
```  
创建容器  
```  
docker run -d -it --cap-add=SYS_PTRACE --privileged=true --name debian debian:stable  
```  
进入容器    
```    
docker exec -it -u root --privileged -w /root debian /bin/bash    
```   
运行中的容器  
```  
docker ps -a  
```  
停止容器  
```  
docker stop debian  
```  
删除容器  
```  
docker rm debian    
```  
启动容器  
```  
docker start debian  
```  
查看镜像  
```  
docker images  
```  
删除镜像  
```  
docker rm 3fa117a21085    
```  
设置变量(创建容器时)  
```  
docker run -d -it --cap-add=SYS_PTRACE --privileged=true --name mssql2022 -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=Mssql2o2o-" -e "MSSQL_PID=EnterpriseCore" -p 1433:1433 mcr.microsoft.com/mssql/server:2022-latest  
```  
映射端口(创建容器时)  
```  
docker run -d -it --cap-add=SYS_PTRACE --privileged=true -p 7860:7860 --name aigc debian:stable  
```  
拷贝文件到容器  
```  
docker cp /Users/digoal/Downloads/1.html mssql2019:/home/postgres/1.html  
```  
将容器的文件拷贝到宿主机  
```  
docker cp mssql2019:/home/postgres/1.html /Users/digoal/Downloads/1.html  
```  
## 例子, 在debian中启动一个debian docker, 并部署duckdb    
[《Debian学习入门 - (作为服务器使用, Debian 操作系统可能是长期更好的选择?)》](../202302/20230217_02.md)      
[《在debian中部署"人工智能生成内容"(Artificial Intelligence Generated Content,简称 AIGC)》](../202303/20230306_01.md)      
1、拉取debian stable images    
```    
docker pull debian:stable     
```    
2、创建容器    
```    
docker run -d -it --cap-add=SYS_PTRACE --privileged=true --name debian debian:stable    
```    
3、进入容器    
```    
docker exec -it -u root --privileged -w /root debian /bin/bash    
```    
### 一个debian容器创建后, 常用的配置:  
配置 apt 国内源:    
```    
sed -i "s@http://\(deb\|security\).debian.org@http://mirrors.nju.edu.cn@g" /etc/apt/sources.list      
apt update      
apt-get reinstall apt-transport-https ca-certificates       
sed -i "s@http://mirrors.nju.edu.cn@https://mirrors.nju.edu.cn@g" /etc/apt/sources.list      
apt update     
```    
安装常用包:  
```  
apt install -y locales wget glibc-source zlib1g-dev pkg-config libicu-dev icu-devtools libbison-dev libfl-dev git libreadline-dev libedit-dev g++ make cmake man-db vim dnsutils clang libssl-dev default-jdk unixodbc unixodbc-dev bash-completion 
```  
配置 bashrc:   
```  
#  add by digoal    
alias rm='rm -i'    
alias cp='cp -i'    
alias ll='ls -larth'    
alias mv='mv -i'
export LC_ALL=en_US.UTF-8
```  
配置 bash 补齐: 在`/etc/bash.bashrc`中编辑`enable bash completion in interactive shells`这一项配置，将其注释全部去掉.   
配置locale:   
https://people.debian.org/~schultmc/locales.html  
```
1、Edit /etc/locale.gen as root. If /etc/locale.gen does not exist, create it. An example /etc/locale.gen is below.
注释en_US.UTF-8 UTF-8
2、Run /usr/sbin/locale-gen as root
locale-gen en_US.UTF-8
```
创建用户:    
```  
useradd -s /bin/bash -d /home/postgres -m postgres    
```  
duckdb 测试:   
```    
git clone --depth 1 -b v0.7.1 https://github.com/duckdb/duckdb    
cd duckdb    