测试驱动开发
让测试代码跟上你的测试
剩下的工作就是完成的DBAccessor的实施供processOrder（）方法使
用，以及完成testSimpleOrder(测试方法。但是，DBAccessor的测
试实施实际上只被用于测试，因此，它属于你的测试类，而不是在你的
产品代码中。
所有运些代码都是在我们的测试类中
public class Test0rderProcessing (
每户品代码在不用的目录之中。
// other tests
public class TestAccessor implements DBAc
这置是单的DBAccero实
public GiftCard getGc（int gcId）（
施，它能返需我们步要的佳。
GiftCard gc=new GiftCard（）;
gc.setActivationDate(new Date()):
gc.setExpirationDate(new Date（)):
gc.setBalance（new BigDecimal(100));
//...the other DBAccessor methods go here...
由于送只为测试用。
义在我们的测试类中。
eTest
public void testSimpleOrder()(
//First create the order processor
抛OndePoce时象设置
OrderProcessor orderProcessor-new OrderProcessor():
orderProcessor.setDBAccessor(new TestAccessor()):
使用测试实施速行版播
送表示根本溢
// Then we need to describe the order we're about to place
OrderInformation orderInfo = new OrderInformation() 
orderInfo.setDrinkDescription (*Bold vith room") ;
orderInfo.setGiftCardNumber (12345) :
orderInfo,setPreferredStoreNumber (123) ;
// Hand it off to the order processor and check the receipt
幕，我们到供这方法，
Receipt receipt - orderProcessor.processOrder (orderInfo):  0) ; (
assertTrue (receipt. getGCBalance () .equals (0)) :
记住：这重的金都是可能最单
的代码以道冒预期的值。
目前位置
299
---
## Page 336
测试产生更好的代码
测试产生良好的代码
我们一直在做测试，我们先编写测试代码所完成的不只是测试我们的系统，它
也促使我们把代码组织好，让产品代码放在一个地方，其他东西则放在另外一
个地方。我们也已经编写了较简单的代码—虽然还不能使系统的每一部分都
能运行，但能够运行的部分都有效并且合理，而且没有什么多余的代码。
并且，由于我们系统的业务逻辑与数据库代码之间是紧耦合关系，我们实施了
一个设计模式，策略设计模式。这不仅使测试变得更为容易，而且去掉了代码
中的耦合关系，甚至也易于与不同类型的数据库一起工作。
因此，先测试给我们带来很多好处：
组织良好的代码。产品代码在一个地方，测试代码在另外一个地方。
甚至，用于测试的数据库访问代码的实施与产品代码是分开的。
代码总是做相同的事情。很多测试的方法都导致测试代码只微测试
的工作，产品代码只做产品代码的工作[你有看到if（debug）语
我们的别试使用DBAcce
句吗？】，TDD表示总是在编写产品代码。
的测试携定的实施，但是
行单处理器运行相用的代
码，国为我们使用了略
√
松散耦合的代码。紧耦合的系统太脆弱并且难于维护，更不用说很
模式（测试考用或户品号
难维护。因为我们想要测试我们的代码，我们在最后会把设计分解
为松散的耦合并且更为灵活的系统。
你曾听到计算机科学教授或首席结构师谈到过系统的低耦合度和高的
内聚度（Cohesion）吗？这正是他们读论的东西。因为接口和策略模式
>的使用，使我们有了低的系统耦合度，同时，通过把数据库和业务逻
辑集中于分开的、定义良好的类中，使我们有了高的系统内聚度。
还记得单一费任原则吗？
由于美略模贰的摇口方法
我们已经藏少了行单处理器
与监据席代码之用的属合度。
mDBAcceren.DAecess
(OBAcceeson) spid
tiox),Receipt
OuePce具有处理行单的务还辑，
科旦不用控心酸携库存取的事，图此，
具有高的内裂度。
这费存取器担心数据房仿间
只在激据库该间买有高的系统
300
内餐度：
---
## Page 337
测试驱动开发
你别开玩笑了？传没看过我们刚才编写的代码吗？
我们从来注意礼券上的有效期，而显我们总是把余
额设置为零。你怎么会说达是比较好的代码哦？
你的代码可能不完整，但仍然具有较佳的形态
还记得测试驱动开发的第二规则吗？
规则#2：编写最简明的代
码使其通过测试
即使不是每件事情都能运作，但是，可以运行的代码一定是可测
试的、简明的和整洁的。然而，很明显地，我们还有很多工作要
做。目标是让所有其他一切运作起来，并且让其他代码与你目前
拥有的代码一样具有较高的品质。
因此，一且有了基本的测试，就开始考虑你需要做哪些其他的测
所有这登，都是为了别试
试那会激发出要为它编写代码的下一个功能片段。有时候，
功能性、运界情况、假实
接下来要测试什么是很明显的，像增加一项测试以处理礼券上
构成了整的测试
的余额一样。有时候，需要参考使用情节所描述的其他功能。并
且，一且全部完成，就考虑一些像是测试边界状况、输人无效
值、可扩展性测试等。
X
我们已经为订单处理实施了基本的、成功案例测试，但是，在我们的
实施过程中还存在明显的问题。编写另外的测试程序发现其中的一个
问题，然后编写能通过测试的代码。
目前位置
301
---
## Page 338
测试=代码+很多程序代码
多测试意味着很多代码
Starbuzz项目中的礼券类有四个属性，所以，我们准备
用几项测试来运行这些属性。我们可以测试：
口
礼券有足够的余额支付订单
口
礼券没有足够的余额支付订单
在名一种情现中，我
们常星包含一组精微
口
无效的礼券号码
不同佳的私券对象，
礼券上的余额恰好支付订单
所以，我们可以在行
口
举经理类中测试备一
口
礼券还没有被启用
壹化
口
礼券已过期
这只是为了测试礼券。你也需要测试orderInformation类中的各种变
化另外，我们还没有测试较大的失败案例，例如，如果数据库保存订
单失败，会发生什么事情。
这些具的都是具别试的重要事项，但是，我们
不仪饮具为这些家例编写测试代码，而监还要
写很多系哈·
自动化的测试驱动开发意味着很多测试代码
系统的功能越多，你需要做的测试就越多。而
且，测试越多表示代码越多很多很多的代
码。但是，所有这些代码也表示有很高的稳定
性。你会知道你的系统是能运行的，在整个过
程中的每一步。
而且，有时候，你可能不需要一开始所认为的
那么多代码….
302
第8章
---
## Page 339
测试驱动开发
策略设计模式、松散的耦合：
对象替代…
假设我们再次使用策略设计模式，处理数据库可能返回的礼券类型
的所有不同的变化，像这样：
>
DBAcceesot
getGC(ge34
int).GestCetd
GistCetd).voia
这置是舍户生正常私
送 T是MySQL
的存取
券的美
TestGoodDBAcceeses
TestnsefficiexsDBAccerst
/
MySQLDBAcces
+segC(gc.int)GitCend
+setGC(gc
ixt),GiltCand
1
setGC(gc3
int),GifeCasd
saseCC(cend : GiftCand),woid
seseGC(cnd
GileCasd),veid
eGC(catf
GifeCasd),soid
这一个是户生含额
不足的礼类，
+setGC(gc4
ixt).GifeCatf
十seveGCCcatd
GileCasd),seid
送一个金损错误
不管你
给他付名样的0，
为了避免这些额外的类，你可以使用一个TestDBAcces8-
or实现，该实现会基于你给的ID不同，而返回礼券，但是，
那样会有损松散合：TestDBAccessor会需要与你的测试
代码保持同步，以确定它们同意每个ID的含义，
但是，每个到试礼券容取要会分
享很多代码，而显，那样也不好，
能以，我们该怎么办？
目前位置
303
---
## Page 340
模拟对象
我们需要很多不同，但相似的对象
现在的问题是，我们有一个像这样的序列：
Oudet
Teet DB
Peocessot
Qtilities
ptocessOtden(...)
这里我是问题所在，时每一种不购类
的情节，我们需是一个不用的测试
etGc(
类以返回正确的礼募是型。
tetutn 4 specific
tocessOtden
V
ueOtdes(.
valaet
4o nothing.
setGC(gcM
GC(cand
.int),GifeCasd
raveGC(...)
7
GifeCas).ssid
sve the GC
TestJnsufficiecDBAccess
这登都是假速的，但由于订单处
+seeGC（gc3d.
int),GiftCend
理器必场课用这些水法：我们需
一个0Accen实场，
Test3nulidDBAccessp
int).GiftCatd
GeftCend),waia
如果我们生成不同的对象呢？
你的别试代础告的工具常要什合
与编写所有的DBAccessor实现相反，如果我们有一个工
我想有一个DBAccessor实现，该实现能
我们能够要求该工具（或框架）根据特
定的接口（像DBAccessor），创建一个新的对象，该对
返回一个余额为零的礼券。
象会以一定的方式服务，像是在特定的输入后被返回余额
为零的礼券那样？
这里是一个对象
你的测供代码组像使用其他时
如果你用“12345”
累一样使用送个对·…他
调用getGC（）.它将
现DBAcce并且起来像你的
Mock
做你想要做的事情
已端写的系实的类。
对象
Mock对象框架
大多数语言都有一个像这样的
304
第8章
超等，只要你用google撞景一下
“Mack otects”，你航含发现。
---
## Page 341
测试驱动开发
模拟对象代替真实对象
实际上不需要三种不同的存取器，它们的作用都是为了创建一个新的GiftCard对象，
然后，为它填上不同的数据。实例化GiftCard类和调用某些setter方法需要很多额外
的代码。
由于我们有一个描述每个实现应该是什么样子的接口，所以，可以利用Mock对象框架
的优点去做繁重的工作。与实现我们全部的类相反，我们提供该框架我们想要实现的
接口，然后告诉它什么是我们所期待的。
这就是行单处理器所保秘的
*mock
DBAccessot描口，那进我们即将
>
（模拟）的东等，而不是继写实际
DBAcceseon
setGC(gc2d
.int) ,GifeCasf
teveGC(cand
GiteCasl);reid
送是卖物MySGL
这是会户生正常
礼泰的菜略。
MySQLDBAccess
F>5)pbz
iat) ,GifeCan
+ srtGC(gc3
(xt)-GitCana
setGC(sc3d
:ixt),GiieCand
rvt2)opes
GiitCend).weid
Test7wmaliuDs
iat)GileCar
给富什的0
我们真是不想端写和难护选些。相反
我们将用merck时累警代它们全部，
Mock对象框架会处理接口实现的创建，并且记录我们说应该调用的方法，当它被调用时应
该同传什么，以及什么不应该调用等。如果某件事不能按照我们给定的计划执行，我们接
口的Mock框架的实现会记录这些信息并报出错误。
*在站，我们将使用EasyMack框架，但大多数诵官都有Mock对象框等，并且他们的工作方式
目前位置
305
---
## Page 342
使用模拟对象框架
Mock对象是工作对象的替代物
让我们看看Mock对象框架的实际运行情况。以下是利用EasyMock的一项测试，一种
Java使用的Mock对象框架。一个好的Mock对象框架允许你模拟对象的行为，而且还无
需为该对象编写代码。
不管你使用哪种相架。
import org.easymock.*;≤
你常要导入正确的类，
// This test will test placing an order with a valid gift card
// with exactly the right amount of money on it.
@Test
public void testSimpleOrder() {
这是我们想暑使用的
// Set everything up and get ready
Onde3no别试对象的务
OrderInformation orderInfo = new OrderInformation();
个部分
orderInfo,setCustomerName (*Dan") ;
orderInfo.setDrinkDescription(*Bold with room*) ;
这是设定测试值
该值特用在我们准
的试代orderInfo.setPreferredStoreNumber (123);
务别试的礼券中。
对票还没有
Date activationDate = new Date () ; // Valid starting today
名含其中。 Date exiprationDate = new Date(activationDate.getTime()+ 3600);
BigDecimal gcValue = new BigDecimal(“2.75); // Exactly enough