arbitrary address instead of a string pointer, and returns a
handle of the module that contains this address. If the ad-
dress passed to this API is a converted address, the loader
would return a value indicating that the lookup has failed,
causing a semantic change to the program, if not a crash.
Therefore, we hook the call to this API, check the dwFlags,
and if its 0x4 bit is set, we convert back the address speci(cid:191)ed
as the argument lpModuleName.
• Restriction of Pin: Although this is not an issue directly re-
lated to the loader, we mention here that Pin has a limita-
tion where it becomes active only after kernel32.dll, kernel-
base.dll, and ntdll.dll have been loaded. Thus, it misses some
of the initial instructions executed by these DLLs, as men-
tioned in the paper published by its developers[22]. This is
most likely the cause for false negative and crashes when
trying to apply our system to these DLLs. Therefore, in our
prototype we will always be excluding these DLLs from our
target.
4.4 Hash Calculation
For this prototype we used a simple hashing algorithm which
just adds up each byte of the input value, adds a randomly gener-
ated byte value, and takes the modulo 2Nchk of the result, where Nchk
is the number of checksum bits. Note that such hash algorithm is
not considered secure in practice, as two disclosed addresses would
instantly reveal the secret random key, but for our threat model it
should be enough. Also, for performance reasons we cached the
pre-calculated hash values on a cache table which consumes mem-
ory size approximately equal to the memory size consumed by a
set of segments created for one program image. Still, note that
only one copy of this table is required, because it can be shared
among all diﬀerent images in the same process. Such table is feasi-
ble for 32-bit implementation, but considering that they fully con-
sume the equal size of physical pages unlike images, and that the
table size grows with 64-bit implementation, calculating hashes on-
the-(cid:192)y may be a better idea.
5. EVALUATION
In this section, we brie(cid:192)y evaluate our prototype from the two as-
pects we decided to focus on, which are security and compatibility.
Other issues are discussed in the next section.
5.1 Set-up for Experimental Evaluation
We have conducted simple experiments with our prototype. The
environment is Windows 7 Ultimate SP1 32bit, 2-core Intel Xeon
X5670 at 2.93GHz with 4.00GB RAM on VMWare Workstation
7.
It should be noted that our current implementation only par-
tially supports application to DLL images, due to some unanalyzed
crashes and restrictions of Pin. The number of input bits is 24, and
314
that of checksum bits is 2, implying 4 copied segments are created
for each image loaded for the process.
5.2 Security Evaluation
5.2.1 Address Disclosures and Partial Overwrite
Even if the attacker has gained an address pointing to a code in
the program image, without knowing the secret randomization key,
attacker cannot identify which segment the address of target code
exists. Guessing would only allow success at the rate of once every
2Nchk attempts on average, where Nchk is the length of checksum
bits. Partial overwrite would also not work for the same reason.
One may argue that, this scheme is not really byte-granular be-
cause a leaked address will reveal the checksum for all other ad-
dresses with the same input bits. In other words, using a leaked
address 0xKKYAAAAA, where Y and AAAAA are checksum bits
and input bits respectively, the attacker can designate all addreses
0xXXYAAAAA for arbitrary XX. However, in such a case, the re-
lated addresses are inter-modular, so that the leaked address and the
addresses targeted for code reuse can safely be isolated by ASLR.
The only concern is when the disclosed address turns out to match
the destination address of invalid transfer. However, as ROP usu-
ally requires multiples addresses, one of each gadget, so such case
should not be signi(cid:191)cant because the eﬀect is con(cid:191)ned to at most
one.
5.2.2 Experimental Evaluation
We have also run an experiment to see if it detects partial over-
write attacks, although it is somewhat already obvious that it does.
Assuming the case where there is an exploitable vulnerability in the
function LoadLibraryEx of kernel32.dll which is called by Firefox
5.0.1 executable, we simulated a partial overwrite attack that mod-
i(cid:191)es the lower 16 bits of the return address from this function, re-
turning into code on the Firefox main executable. We con(cid:191)rmed
that our prototype successfully detected this attack as expected.
5.3 Compatibility Evaluation
Here we present and analyze two examples of problematic cases
we encountered during experiments, generalize and clarify the prob-
lems our proposal has, and suggest workarounds.
5.3.1 Experimental Evaluation
To test compatibility, we ran various programs on our prototype.
Programs such as ftp.exe, calc.exe, mspaint.exe, and notepad.exe
from the folder C:\Windows\System32, and also Adobe Reader
10.1.1(Non-protected mode), Firefox 5.0.1, Internet Explorer 8.0,
Hover 6.1, etc. were con(cid:191)rmed to run without problems, except
for some that needed a workaround mentioned in case analysis 2.
Again, it should be noted that DLLs are not supported so perfect
compatibility is not yet assured. Some of the problems confronted
are analyzed below:
5.3.2 Case Analysis 1: Direct computation on ad-
dresses
The (cid:191)rst example we have is a false positive case which was
caused by the following instruction sequence.
mov ecx, [ptr]
add ecx, 5
call ecx
It loads a value from the memory to the ECX register, adds an im-
mediate value to it, and then calls a function it points to. This will
likely cause a false positive because the input bits of the address
are modi(cid:191)ed, but the checksum value no longer corresponds to it.
Our proposal compares the checksum calculated from lower bits
with that of higher bits, so when an already-generated address is di-
rectly modi(cid:191)ed, it would cause a false positive. A workaround for
this problem would be to detect such occurrences by static/dynamic
analysis and take it into consideration when calculating a check-
sum. It still cannot cover all cases, so for a perfect solution, it is
needed to restrict the compiler from generating such code.
5.3.3 Case Analysis 2: Mixture of data and code
Next, we present a case which caused a crash. It occurred in a
function that takes two data pointers, one holds the start address of
a function pointer table, and the other one holds the end address of
the same table. In the function, each function on the table is exe-
cuted by incrementing the starting pointer until the it reaches the
end address. The problem arises because both of these addresses
are subject to conversion because the table is located in the code
section despite that they are actually data. Therefore, with high
probability the two addresses would point to diﬀerent segments,
and the function will keep reading the table beyond its end as illus-
trated in Figure 8.
This is another example that illustrates a problem being caused
by the diﬃculty of separating code pointers from data pointers. To
overcome this problem, the compiler must add additional informa-
tion on the relocation information indicating if the address points
to data or code. For this particular case, the (cid:191)rst and the last entries
of the table turned to be always zero, so we evaded this problem
by skipping the conversion of addresses which points to value zero,
which is unlikely to be a valid code.
Figure 8: Pstart, Pend are pointers to the head and tail of the func-
tion table respectively.
(a) unmodi(cid:191)ed execution where each
function pointer on the table is executed consecutively, and (b)
execution with code shredding where a reference to function
pointer occurs outside of the table.
5.3.4 Other Crashes
Although most programs we tested ran properly when code shred-
ding is applied only to the main executable, there are still some
DLLs that causes crashes when code shredding is applied. These
cases are currently under analysis for their cause.
5.4 Runtime Performance
As our benchmarking application, we used Bzip2 1.0.5 for Win-
dows[19], which is part of GnuWin toolsets, compiled from source
315
code with Visual Studio 2010. This application loads 5 images,
bzip2.exe, msvcr100.dll, ntdll.dll, kernelbase.dll, kernel32.dll, and
the last three DLLs are not targeted due to the restriction of Pin
mentioned earlier in this paper. The executed command is: bzip2
-zkf rand_X.dat, where X represents the size of used data (cid:191)le in
bytes and is one of 100K, 1M, 10M, 100M, and 1000M. The con-
tent of data (cid:191)le is randomly generated by the command: head -c X
/dev/urandom > rand_X.dat.
For images not being targeted with code shredding, we hooked
all call instructions to perform dummy conversion procedure, and
also hooked all indirect control-(cid:192)ow transfer instructions jumping
to non-targeted images to perform dummy detection procedure to
arti(cid:191)cially introduce the overhead.
Table 1: Execution time and overheads
nat(s)
pin/nat
15.14
0.077
100K
5.73
1M
0.311
3.00
10M 2.590
2.66
100M 25.17
1000M 254.9
2.62
pin(s)
1.159
1.782
7.763
66.92
668.0
cs/nat
26.10
9.27
4.43
3.82
3.65
cs(s)
1.998
2.882
11.46
96.18
931.8
cs/pin
1.72
1.62
1.48
1.44
1.39
Table 2: Number of executed instructions and hook ratio
convert(%)
verify(%)
num. of inst.
1.25 x 108
100K
1.27 x 109
1M
1.27 x 1010
10M
100M 1.28 x 1011
1000M 1.27 x 1012
0.165
0.221
0.227
0.228
0.228
0.168
0.221
0.228
0.228
0.229
Table 1 shows the execution time and overhead of Bzip2 for com-
pressing each data (cid:191)le. Columns 2-4 show the execution time in
seconds, where nat: native execution, pin: pin without any instru-
mentation, and cs: code shredding. Columns 5-7 show their ratio,
so for example, cs/nat indicates the overhead of code shredding
over native execution, expressed as ratio. The results show that as
the execution time grows, the cs/nat overhead converges to around
3.6, and cs/pin overhead converges to around 1.4. The large over-
head with short execution is mainly because of how Pin works,
including Pin’s setup time and the initial execution JIT overhead,
as shown by the pin/native Pin without instrumentation.
We also pro(cid:191)led the execution frequency of hooked instructions
that cause overhead, i.e., the call conversion hooks (call instruc-
tions) and veri(cid:191)cation hooks(indirect control-(cid:192)ow transfers). Table
2 shows the percentage of such instructions executed out of all exe-
cuted instructions. It shows that they both converge to around 0.228
percent for this application.
We have also ran some GUI applications mentioned in the com-
patibility evaluation part, and although booting took longer than
usual, we were able to use them, (e.g. browse the web, edit texts)
without much stress once booted. There are some Pin-dependent
as well as Pin-independent optimizations which we have not yet
applied, so these results are only tentative.
6. DISCUSSIONS
In this section we discuss the limitations of our work as well as
related work.
316
6.1 Known Limitations
6.1.1 Non-Code Pointers
To change the control (cid:192)ow, the attacker may instead choose to
modify data pointers such as (cid:192)ag data or user information which
are referred to at conditional branching statements, but such attacks
are out of scope of this paper. However, there is a case where data
pointers can be indirect code pointers, which hold addresses of code
pointers. This will become a problem because since data is all in
the same segment, if we have an address disclosure of any of these
data, all such indirect code pointers will be targeted for code-reuse
attacks.
6.1.2 Memory Usage
Although consumption of physical memory space may be allevi-
ated to a certain extent, consumption of virtual memory space may
start to become an issue when larger number of copies is required
to satisfy strict security demands. We expect that this problem will
eventually be solved by the recent spread of 64-bit systems.
6.1.3 Dynamic Code Generation
Another type of dynamically generated addresses pointing to
code, is seen in applications that generate and execute code on-the-
(cid:192)y as in script language interpreters. Since it is not possible to de-
tect such generation of address without understanding the program
semantics, our current approach is not applicable to such programs.
This implies JIT spray attacks[21], which is a code reuse attack on
dynamically generated code, cannot be prevented by our defense,
although it can be claimed that JIT spray attacks are limited to spe-