List of all the nodes created by Docker Machine
在前面的截图中，我们可以看到我们最初在 VirtualBox 中创建的五个节点，以及我们在 AWS 中创建的五个新节点。显然，AWS 上的节点正在使用 Docker 的新版本；这里的版本是`18.02.0-ce`。我们在`URL`栏中看到的 IP 地址是我的 EC2 实例的公共 IP 地址。
由于我们的命令行界面仍然配置为远程访问节点`aws-node-1`，因此我们可以按如下方式运行`swarm init`命令:
```
$ docker swarm init
```
然后我们需要`join-token`:
```
$ export JOIN_TOKEN=$(docker swarm join-token -q worker)
```
领导的地址用以下命令:
```
$ export LEADER_ADDR=$(docker node inspect \
 --format "{{.ManagerStatus.Addr}}" self)
```
有了这些信息，我们现在可以将其他四个节点加入群领导:
```
$ for NODE in `seq 2 5`; do
  docker-machine ssh aws-node-${NODE} \
    sudo docker swarm join --token ${JOIN_TOKEN} ${LEADER_ADDR}
done
```
另一种无需在单个节点上进行 SSH 即可实现相同目的的方法是，每当我们想要访问不同的节点时，重新配置我们的客户端 CLI:
```
$ for NODE in `seq 2 5`; do
  eval $(docker-machine env aws-node-${NODE})
  docker swarm join --token ${JOIN_TOKEN} ${LEADER_ADDR}
done
```
作为最后一步，我们希望将节点 2 和 3 升级到 manager:
```
$ eval $(docker-machine env node-1)
$ docker node promote aws-node-2 aws-node-3
```
然后我们可以列出所有的群节点，如下图所示:
![](img/586f2333-770a-48ae-a9f9-e3e50fbbb8df.png)
List of all nodes of our swarm in the cloud
因此，我们在云中运行着一个高可用性的 Docker Swarm。为了清理云中的群集并避免产生不必要的成本，我们可以使用以下命令:
```
$ for NODE in `seq 1 5`; do
  docker-machine rm -f aws-node-${NODE}
done
```
# 部署第一个应用
我们已经在不同的平台上创建了一些 Docker 群集。一旦创建，群体在任何平台上的行为都是一样的。我们在群集上部署和更新应用的方式不依赖于平台。Docker 的主要目标之一是在使用集群时避免供应商锁定。可以毫不费力地将群就绪应用从内部运行的群迁移到基于云的群。从技术上讲，甚至可以在内部运行一部分集群，在云中运行另一部分集群。这是可行的，但是由于地理位置较远的节点之间的延迟较高，人们当然必须考虑可能的副作用。
现在我们已经有了一个高可用性的 Docker Swarm 并开始运行，是时候在它上面运行一些工作负载了。我使用的是用 Docker Machine 创建的本地集群。我们将首先创建一个服务。为此，我们需要 SSH 到一个管理器节点中。我选择`node-1`:
```
$ docker-machine ssh node-1
```
# 创建服务
服务可以作为栈的一部分创建，也可以直接使用 Docker CLI 创建。让我们首先看一下定义单个服务的示例栈文件:
```
version: "3.5"
services:
  whoami:
    image: training/whoami:latest
    networks:
      - test-net
    ports:
      - 81:8000
    deploy:
      replicas: 6
      update_config:
        parallelism: 2
        delay: 10s
      labels:
        app: sample-app
        environment: prod-south
networks:
  test-net:
    driver: overlay
```
在前面的例子中，我们看到了被称为`whoami`的服务的期望状态是什么:
*   基于映像`training/whoami:latest`
*   服务的容器连接到网络`test-net`
*   容器港口`8000`发布到港口`81`
*   它运行着六个副本(或任务)
*   在滚动更新期间，单个任务分两批更新，每个成功的批之间有 10 秒的延迟
*   服务(及其任务和容器)被分配了两个标签`app`和`environment`，值分别为`sample-app`和`prod-south`
我们可以为服务定义更多的设置，但是前面的设置是一些更重要的设置。大多数设置都有有意义的默认值。例如，如果我们没有指定副本的数量，那么 Docker 将其默认为`1`。服务的名称和形象当然是强制性的。请注意，服务的名称在群中必须是唯一的。
为了创建前面的服务，我们使用`docker stack deploy`命令。假设存储前面内容的文件叫做`stack.yaml`，我们有:
```
$ docker stack deploy -c stack.yaml sample-stack
```
这里，我们创建了一个名为`sample-stack`的栈，它由一个服务`whoami`组成。我们可以列出群中的所有栈，这样我们就可以得到:
```
$ docker stack ls
NAME             SERVICES
sample-stack     1
```
如果我们列出群中定义的服务，我们会得到以下输出:
![](img/65fb3b11-eb91-4b57-aa46-d43fa80a738c.png)
List of all services running in the swarm
在输出中，我们可以看到目前只有一个服务在运行，这是意料之中的。该服务有一个标识。相反，到目前为止，您对容器、网络或卷使用的标识格式是字母数字。我们还可以看到，服务的名称是我们在栈文件中定义的服务名称和栈名称的组合，栈名称用作前缀。这是有意义的，因为我们希望能够使用相同的栈文件将多个栈(具有不同的名称)部署到我们的群中。为了确保服务名是唯一的，Docker 决定将服务名和栈名结合起来。
在第三列我们看到了模式，也就是`replicated`。副本数量显示为`6/6`。这告诉我们，六个请求的副本中有六个正在运行。这对应于期望的状态。在输出中，我们还看到了服务使用的映像和服务的端口映射。
# 检查服务及其任务
在前面的输出中，我们看不到已经创建的`6`副本的细节。为了更深入地了解这一点，我们可以使用`docker service ps`命令。如果我们为我们的服务执行这个命令，我们将得到以下输出:
![](img/2cf2344f-41a9-4de6-a963-6faba3e3330d.png)
Details of the whoami service 
在前面的输出中，我们可以看到六个任务的列表，这些任务对应于我们的`whoami`服务的六个请求副本。在`NODE`列中，我们还可以看到每个任务已经部署到的节点。每个任务的名称是服务名称加上递增索引的组合。还要注意，与服务本身类似，每个任务都被分配了一个字母数字标识。
在我的情况下，显然名为`sample-stack_whoami.2`的任务 2 已经部署到`node-1`了，它是我们蜂群的首领。因此，我应该找到一个在这个节点上运行的容器。让我们看看如果我们列出所有在`node-1`上运行的容器会得到什么:
![](img/99a84053-01bd-4e5a-b99e-8374bd19e8f1.png)
List of containers on node-1
不出所料，我们发现一个从`training/whoami:latest`映像运行的容器，其名称是其父任务名称和 ID 的组合。我们可以尝试可视化部署示例栈时生成的整个对象层次结构:
![](img/5487f8f5-3dda-4a93-8e02-de2d2e4568fb.jpg)
Object hierarchy of a Docker Swarm stack
一个栈可以由一到多个服务组成。每个服务都有一组任务。每个任务都与一个容器一一对应。栈和服务被创建并存储在 Swarm 管理器节点上。然后，任务被调度到集群工作节点，在那里工作节点创建相应的容器。我们也可以通过检查来获得更多关于我们服务的信息。执行以下命令: