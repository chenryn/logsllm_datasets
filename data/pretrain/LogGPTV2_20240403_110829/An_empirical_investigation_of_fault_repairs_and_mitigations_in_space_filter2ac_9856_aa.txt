# An Empirical Investigation of Fault Repairs and Mitigations in Space Mission System Software

**Authors:**
- Javier Alonso, Duke University
- Michael Grottke, Friedrich-Alexander-Universität Erlangen-Nürnberg
- Allen P. Nikora, Jet Propulsion Laboratory, California Institute of Technology
- Kishor S. Trivedi, Duke University

**Abstract:**
Software faults can exhibit various characteristics. In previous work, anomaly reports from several JPL/NASA missions were analyzed, and the underlying faults were classified into Bohrbugs, non-aging-related Mandelbugs, and aging-related bugs. Another study examined the time-to-failure trends for these fault types within and across missions. These results are now providing guidance to enhance the dependability of space mission software.

Just as there are different types of faults, there are different kinds of mitigations for faults and failures. This paper analyzes the mitigations associated with each fault type studied in our earlier work. We identify trends in mitigation type proportions within and across missions and explore relationships between fault types and mitigation types. The findings will be used to increase the reliability of space mission software.

## I. Introduction

Advancements in spacecraft hardware have enabled more ambitious missions, which require more sophisticated and complex software. However, this increased complexity makes the software more prone to failures. The ability of spacecraft systems to handle software failures and underlying faults during operations is crucial for mission success.

Ambitious missions also necessitate autonomous operation or minimal human intervention. Spacecraft systems must make autonomous decisions during planetary missions due to the significant round-trip message delay and limited bandwidth. Therefore, on-board preprocessing of data and autonomous software fault tolerance mechanisms are essential.

To improve software fault tolerance and develop more reliable spacecraft systems, it is necessary to study the software failures experienced and the underlying faults responsible for them.

Grottke and Trivedi [4] proposed classifying software faults based on their inherent characteristics into Bohrbugs, non-aging-related Mandelbugs, and aging-related bugs. This classification is a sub-classification of operational, external, human-made, non-malicious, and non-deliberate software faults, as defined by Avižienis et al. [5]. Chillarege [6] used ODC Triggers to classify Bohrbugs and Mandelbugs, obtaining similar results but focusing on the specifics of failure occurrence rather than the inherent properties of the fault.

### Definitions of Fault Types

- **Bohrbug (BOH):** A fault that is easy to isolate and consistently manifests under well-defined conditions.
- **Mandelbug:** A fault with seemingly non-deterministic behavior, making it difficult to isolate and reproduce. Grottke and Trivedi [2], [3], [4] attribute these characteristics to the complexity of activation and error propagation. Mandelbugs are intrinsically related to software complexity.
- **Aging-Related Bug (ARB):** A subtype of Mandelbugs responsible for software aging, characterized by an increasing failure rate or progressively degrading performance over time. Aging-related bugs cause this phenomenon due to the increasing rate of activation and error propagation with system runtime, often due to the accumulation of internal error states.
- **Non-Aging-Related Mandelbug (NAM):** A Mandelbug that does not cause software aging.

Recent studies analyzed the software failure reports of 18 JPL/NASA space missions. Grottke et al. [14] classified the underlying software faults, finding that 61.4% were Bohrbugs, 32.1% were NAMs, and 4.4% were ARBs, with 2.2% unclassified. In [15], we studied the nature of the times to software failure for eight missions with a substantial number of software faults, analyzing reliability growth and determining the underlying distribution of times to failure.

The classification of software faults is not only theoretical but also has practical importance. Each type of fault requires different mitigation mechanisms during development, testing, and operations. For example, Bohrbugs can be easily isolated and removed during testing, while design diversity can prevent residual Bohrbugs from causing failures. For Mandelbugs, techniques like software replication, retrying, restarting, or rebooting can be effective. For ARBs, software rejuvenation approaches can prevent future failures.

This paper examines the failure reports of eight JPL/NASA missions with a significant number of faults, already analyzed in [14] and [15]. We classify the mitigation mechanisms applied by operators to deal with software faults and failures during operations. Our goal is to define guidelines for developers, testers, and operators to develop more reliable spacecraft software systems and improve their reliability during operations.

## II. Related Work

Several papers have addressed the study of complex system failures from different perspectives [7], [14], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30]. Studies have classified sources of failures into hardware, software, and human/operator errors, concluding that software is becoming the main cause of failures in complex systems. Some studies have focused on hard disk failures and their correlation with monitoring parameters.

Few papers have analyzed failure reports collected during system operations [14], [19], [25], [27], [28]. These studies highlighted that flight and ground software are the main causes of spacecraft failures. Grottke et al. [14] classified the software faults underlying flight software failure reports, revealing that Bohrbugs were the most common, followed by NAMs. Kaaniche and Kanoun [19] analyzed failure reports from a commercial telecommunications system.

However, no prior work has studied or classified the fault repair and mitigation approaches applied during operations. This paper aims to fill this gap.

## III. Mitigation Classification Process

We examined the same failure reports analyzed in [14] and [15], related to eight JPL/NASA spacecraft missions. Each report contains the incident description, analysis, verification, real-time actions, and corrective measures taken by the operators. The information was used to classify the mitigating actions.

### Mitigation Types

- **Fix/Patch:** One or more changes to the software system.
- **Reconfigure:** Reconfiguring the system to restore functionality.
- **Retry:** Retrying the failed component.
- **Restart:** Restarting the failed component.
- **Reboot:** Rebooting the failed component.
- **Failover to Identical:** Retrying with an identical but physically distinct component.
- **Failover to Non-Identical:** Retrying with a different and physically distinct component.
- **Workaround:** Modifying interactions to avoid future occurrences.
- **Use as Is:** Continuing without changes.
- **Unknown:** Insufficient information to categorize the mitigation.

The mitigating actions identified are those taken by the ground-based mission operations team. Autonomous actions by the spacecraft are not classified in this study.

Table II presents five typical failure reports and the mitigating actions taken by the operators. The reports have been sanitized to protect sensitive information.

## IV. Results

[This section would present the results obtained from the classification, including trends in mitigation type proportions within and across missions and relationships between fault types and mitigation types.]

## V. Discussion and Conclusion

[This section would discuss the results, provide insights on the most effective techniques for mitigating faults/errors and failures, and conclude the paper.]

---

This revised version aims to make the text more coherent, professional, and easier to read, while maintaining the technical depth and clarity of the original content.