title:An empirical investigation of fault repairs and mitigations in space
mission system software
author:Javier Alonso and
Michael Grottke and
Allen P. Nikora and
Kishor S. Trivedi
An Empirical Investigation of Fault Repairs and
Mitigations in Space Mission System Software
Javier Alonso
Duke University
Michael Grottke
Allen P. Nikora
Kishor S. Trivedi
Friedrich-Alexander-Universit¨at
Jet Propulsion Laboratory
Duke University
PI:EMAIL
Erlangen-N¨urnberg
California Institute of Technology
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Faults in software systems can have different char-
acteristics. In an earlier paper, the anomaly reports for a number
of JPL/NASA missions were analyzed and the underlying faults
were classiﬁed as Bohrbugs, non-aging-related Mandelbugs, and
aging-related bugs. In another paper the times to failure for
each of these fault types were examined to identify trends within
missions as well as across the missions. The results of those papers
are now starting to provide guidance to improve the dependability
of space mission software.
Just as there are different types of faults, there are different
kinds of mitigations of faults and failures. This paper analyzes
the mitigations associated with each fault studied in our previous
papers. We identify trends of mitigation type proportions within
missions as well as from mission to mission. We also look for
relationships between fault types and mitigation types. The results
will be used to increase the reliability of space mission software.
I. INTRODUCTION
The increasingly better hardware in spacecraft systems
makes it possible to plan and design more ambitious mis-
sions. This naturally leads to more sophisticated and complex
software being developed to achieve the mission goals [1].
However, the growing complexity of ﬂight software makes
it more prone to suffer software failures. Hence, the ability
of spacecraft systems to deal with software failures and the
underlying software faults during operations is a key aspect
determining the success or failure of a mission.
Ambitious missions also require spacecraft systems to run
autonomously, or with minimum human intervention. Space-
craft systems need to make autonomous decisions during
planetary missions, because there often is no time to wait
for the round-trip message delay. Moreover, the bandwidth
available is limited, which would in turn require the raw data
collected to be preprocessed on-board to reduce their volume.
As a consequence, spacecraft systems have to make use of
autonomous software fault tolerance mechanisms to deal with
software failures and their underlying faults during operations.
In order to improve the software fault tolerance mechanisms
deployed on spacecraft systems, and to develop more reliable
spacecraft systems,
is necessary to study the software
failures experienced, and the software faults responsible for
them.
it
Grottke and Trivedi
[4] proposed to classify
software faults based on their inherent characteristics into
Bohrbugs, non-aging related Mandelbugs, and aging-related
[2],
[3],
bugs. This can be considered as a sub-classiﬁcation of oper-
ational, external, human-made, non-malicious, non-deliberate
software faults in the context of Aviˇzienis et al. [5]. Chillarege
[6] used ODC Triggers to classify Bohrbugs and Mandelbugs.
While he obtained similar results as the classiﬁcation based
on the deﬁnitions presented in [4], his classiﬁcation related to
speciﬁcs of the failure occurrence observed, rather than the
inherent properties of the fault itself.
We here give a brief deﬁnition of each software fault type,
to contextualize the work presented by us in this paper. The
term Bohrbug (BOH) was coined by Gray [7] in 1985. It refers
to a fault that is easy to isolate and whose manifestation is
consistent under a well-deﬁned set of conditions.
In contrast to Bohrbug, the term Mandelbug refers to a fault
whose behavior seems to be “non-deterministic.” This means
that typically a Mandelbug is difﬁcult to isolate, and failures
caused by it are hard to reproduce. Grottke and Trivedi [2],
[3], [4] traced these characteristics of a Mandelbug to the
complexity of its activation and/or error propagation. Man-
delbugs are thus intrinsically related to software complexity:
The more complex a piece of software, the higher the risk of
its containing a large number of Mandelbugs.
A sub-type of Mandelbugs is responsible for the software
aging phenomenon [8],
i.e., an increasing failure rate or
progressively degrading performance, observed in many kinds
of long-running systems [9], [10], [11], [12], [13]. A so-
called aging-related bug is able to cause this phenomenon
because the rate with which it is activated and/or the rate with
which errors caused by it are propagated into (partial) failures
increases with the total time the system has been running.
Such an increasing error propagation rate is often caused by
the accumulation of internal error states.
Mandelbugs can thus be divided into aging-related bugs
(ARBs) on the one hand and those Mandelbugs that are not
capable of causing software aging, known as non-aging-related
Mandelbugs (NAMs), on the other hand.
Recent papers studied the software failure reports of 18
different JPL/NASA space missions. Grottke et al. [14] classi-
ﬁed the underlying software faults using the above-mentioned
fault types. The overall percentages of BOH, NAM, and ARB
were 61.4%, 32.1%, and 4.4%, respectively. 2.2% of the faults
could not be classiﬁed. In [15], we studied the nature of the
times to software failure for those eight JPL/NASA missions
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:42:07 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. Software fault/error and failure mitigation classiﬁcation tree
with a substantial number of software faults. Moreover, we
analyzed the reliability growth of the software during the
missions; for those missions that did not show any trend, we
tried to determine the underlying distribution of the times to
failure. We observed that reliability growth detected in the
time to failure datasets containing both Bohrbugs and non-
aging-related Mandelbugs could often be attributed to one of
the two fault types, or that it could even be a mere artifact
of pooling the data. Likewise, separating between Bohrbugs
and non-aging-related Mandelbugs helped to understand the
decreasing failure rates featured by the best-ﬁtting models for
the times to failure based on the combined Bohrbug/non-aging-
related Mandelbug datasets.
The software fault classiﬁcation is not only theoretical, it
also has practical importance. Each type of software fault
requires different types of mitigation mechanisms to deal with
it and its consequent failures during development, testing, and
operations [4], [16].
Typically, Bohrbugs may easily be isolated and removed
during testing. Design diversity (i.e., failure to nonidentical)
can prevent residual Bohrbugs in operational software from
causing failures, as long as the different software implemen-
tations do not contain Bohrbugs activated by the same inputs.
For Mandelbugs, which are difﬁcult to remove in the testing
phase, design diversity can help as well during operations.
However, due to the seemingly non-deterministic behavior
of Mandelbugs, it is possible that an operation which pre-
viously failed because of a Mandelbug will work perfectly on
re-execution. Therefore, techniques like software replication
(failover to a standby with an identical software copy), retrying
the operation, restarting the application, or rebooting the
physical system can be effective to deal with Mandelbugs.
In the special case of aging-related bugs, future failures
can be prevented via software rejuvenation approaches [17].
Software rejuvenation is a proactive “maintenance operation”
focused on stopping the system, cleaning up the internal state,
and restarting the system to an initial state.
The previous examples are mainly software failure miti-
gation approaches. On the other side, there are approaches
based on software fault/error mitigation. These approaches are
applicable to any type of software fault. Well-known examples
of software fault/error mitigation approaches are ﬁx or patch,
workaround, and use as is. The upper portion of Figure 1
shows the Bohr- and Mandelbug fault types described earlier.
The lower part of Figure 1 allocates the different fault/error
and failure mitigation approaches to these types of faults.
In this paper, we study the failure reports of those eight
JPL/NASA missions with a signiﬁcant number of faults,
already analyzed in [14] and [15]. We conduct a classiﬁcation
of the mitigation mechanisms applied by the operators to deal
with software faults and failures during operation. We are
interested in the proportions of the different mitigation ap-
proaches per mission and across the missions. We have studied
the frequency of each technique in order to determine if any
of the techniques (or a combination of them) is especially
effective to deal for a given type of software fault. The ultimate
goal is to deﬁne guidelines for developers, testers, and ﬁnally
operators to develop more reliable spacecraft software sys-
tems, and to improve the reliability of the spacecraft systems
during operation. The current paper allows us to identify the
most effective techniques to mitigate faults/errors and failures
according to the type of software fault encountered by the
operators. This paper will give insights on which techniques
need to be applied in the ﬁrst place by the operators to recover
the normal behavior of the system, reducing the recovery time
and thus increasing the availability of the spacecraft system.
Furthermore, the conclusions obtained will provide us with
information about what mechanisms are most suitable for
implementation as automatic software fault tolerance mech-
anisms to deal with faults and failures during operation.
The rest of the paper is organized as follows: Section II
reviews the related work in analyzing failure reports and fault
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:42:07 UTC from IEEE Xplore.  Restrictions apply. 
and failure mitigation techniques. Section III describes our
approach to classify the different software failure reports based
on the mitigation technique employed. In Section IV, we
present the results obtained from the classiﬁcation. Finally,
Section V discusses these results and concludes the paper.
II. RELATED WORK
Several papers have addressed the study of complex system
failures from different perspectives [7], [14], [18], [19], [20],
[21], [22], [23], [24], [25], [26], [27], [28], [29], [30]. In [7],
[18], [24] and [26], sources of failures of complex systems are
classiﬁed into hardware, software and human/operator errors.
These studies concluded that hardware represents 10–30% of
the sources of failures, human errors represent 30–50%, and
software represents 20–50%. If we analyze the evolution over
time (from [7] to [26]), it is clear that software is becoming
the main cause of failures in complex systems. However, hard
disk failures have received special attention: The authors of
[21], [29] and [30] have focused on understanding the causes
of the hard disk failures, and on correlating them with different
hard disk monitoring parameters.
We have found only few papers in which failure reports
collected during system operations are analyzed [14], [19],
[25], [27], [28]. In [25], [27], [28], failure reports from
different JPL/NASA missions were studied and classiﬁed.
These studies highlighted that the main causes of spacecraft
failures were ﬂight and ground software. However, they did
not extend the analysis of software failures. To ﬁll in this gap,
Grottke et al. [14] classiﬁed the software faults underlying
the ﬂight software failure reports according to the software
fault types presented in Section I; this paper revealed that
Bohrbugs represented the largest share of faults and the main
cause of software failures experienced, followed by non-aging-
related Mandelbugs. Kaˆaniche and Kanoun [19] analyzed the
failure reports from a commercial telecommunications system
for understanding the main causes of system failures.
However, to the best of our knowledge there has not been
any paper in which the fault repair and mitigation approaches
applied during operation have been studied or classiﬁed. The
current paper tries to shed some light onto this topic.
III. MITIGATION CLASSIFICATION PROCESS
We examined the same failure reports already analyzed
in [14] and [15]. These reports, related to eight JPL/NASA
spacecraft missions, were completed by the operators during
mission operations. Each report contains the description of
the incident, the analysis, veriﬁcation and real-time action
conducted by the operators from the ground, and also includes
the corrective action applied (if any) to mitigate the failure
and/or its underlying fault. The information supplied by the
operators was used to classify the mitigating actions taken.
The mitigation types are based on those shown in Figure 1,
which postulates relationships between different fault types
(i.e., Bohrbugs and Mandelbugs) and speciﬁc types of miti-
gating actions. These mitigation types, used in classifying the
failure reports, are described in Table I.
TABLE I
MITIGATION TYPE DESCRIPTIONS
Mitigation type Mitigation type description
Fix/Patch
Reconﬁgure
Retry
Restart
Reboot
Failover to iden-
tical
Failover to non-
identical
Workaround
Use as is
Unknown
One or more changes to the software system
were made. We do not differentiate between
changes to program logic or data
The system was reconﬁgured to restore func-
tionality in a way by adding or removing one
or more components from the system’s work-
ﬂow, or by changing the order components are
operated to accomplish a function.
Retry the failed component. For example, this
could be a restart from a checkpoint.
Restart the failed component. This could restart
an application from the beginning.
Reboot the failed component. Reboots can be
reactive or proactive. Proactive reboots are re-
ferred to as rejuvenation, and can be scheduled
or opportunistic. For the systems we analyzed,
this is generally a warm or cold boot of the
operating system.
Retry the failed computation with an identical
but physically distinct component.
Retry the failed computation with a different
and physically distinct component.
Modify the way in which other components in-
teract with the failed component to avoid future
occurrences of the problem. For the systems
we analyzed, many of these workarounds are
manual operations performed by members of
the operations team.
Continue using the system as is without making
any changes or developing any workarounds.
This is usually seen for a failure for which the
operations staff could not determine a cause
during analysis (e.g., the failure could not be
replicated in the test facility), or a failure for
which analysis or testing shows that it occurs
sufﬁciently infrequently and has a sufﬁciently
small effect that a ﬁx/patch is not justiﬁed by
the risk of changing the software and thereby
introducing new faults.
We assigned this classiﬁcation to those failure
reports for which there was insufﬁcient infor-
mation to categorize the mitigation. For exam-
ple, some failure reports contained a single-
sentence description of the anomalous behavior,
with no descriptive information given for the
analysis and corrective action(s) taken.
It
is important
to note that
the mitigating actions we
identiﬁed are those actions taken by members of the ground-
based mission operations team in response to the reported
failures. At this point we did not classify any autonomous
action that may have been taken by the spacecraft, leaving
that for future work.
This section describes how the classiﬁcation was conducted
to connect
the aforementioned mitigation types with real
failure reports. Table II presents ﬁve typical failure reports and
the mitigating action(s) taken in response by the operators.
Although the failure reports have been sanitized to provide