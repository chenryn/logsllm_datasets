title:Why Does Your Data Leak? Uncovering the Data Leakage in Cloud from
Mobile Apps
author:Chaoshun Zuo and
Zhiqiang Lin and
Yinqian Zhang
2019 IEEE Symposium on Security and Privacy
Why Does Your Data Leak? Uncovering the Data
Leakage in Cloud from Mobile Apps
Chaoshun Zuo
Zhiqiang Lin
Yinqian Zhang
The Ohio State University
The Ohio State University
The Ohio State University
Abstract—Increasingly, more and more mobile applications
(apps for short) are using the cloud as the back-end, in particular
the cloud APIs, for data storage, data analytics, message notiﬁca-
tion, and monitoring. Unfortunately, we have recently witnessed
massive data leaks from the cloud, ranging from personally iden-
tiﬁable information to corporate secrets. In this paper, we seek to
understand why such signiﬁcant leaks occur and design tools to
automatically identify them. To our surprise, our study reveals
that lack of authentication, misuse of various keys (e.g., normal
user keys and superuser keys) in authentication, or misconﬁgu-
ration of user permissions in authorization are the root causes.
Then, we design a set of automated program analysis techniques
including obfuscation-resilient cloud API identiﬁcation and string
value analysis, and implement them in a tool called LeakScope
to identify the potential data leakage vulnerabilities from mobile
apps based on how the cloud APIs are used. Our evaluation
with over 1.6 million mobile apps from the Google Play Store
has uncovered 15, 098 app servers managed by mainstream cloud
providers such as Amazon, Google, and Microsoft that are subject
to data leakage attacks. We have made responsible disclosure to
each of the cloud service providers, and they have all conﬁrmed
the vulnerabilities we have identiﬁed and are actively working
with the mobile app developers to patch their vulnerable services.
I.
INTRODUCTION
The cloud has signiﬁcantly changed the landscape of mod-
ern computing. It has been proven to be the go-to platform for
data storage, data processing, data analytics, and data backup
and recovery, due to its immense beneﬁts such as being highly
available, massively scalable, hugely cost-saving, and quickly
deployable. The cloud is everywhere, and “the cloud presence
is becoming a norm in almost 70% enterprises across the
globe, and they have at least one application running on the
cloud” [34].
With the rapid growth of cloud computing, there has also
been a tremendous growth of mobile apps. From an end-user
perspective, mobile apps can be considered the front-end of an
Internet service with the cloud as the back-end. By using the
cloud, service providers (e.g., news, weather, and shopping) do
not have to worry about the scalability and availability of their
back-end servers, and instead they can just focus on their core
business logic and develop their mobile apps. Almost all of our
daily used Internet services have their own dedicated mobile
apps. As of today, there are more than ﬁve million mobile
apps in only the Google Play Store and Apple App Store [20].
Unfortunately, with the use of the cloud as a mobile app
back-end, we have also witnessed massive data leaks from
the cloud recently, ranging from personal medical records to
corporate secrets. For example, it was reported that insecure
back-end databases of mobile apps were exposing an esti-
mated 280 million sensitive user records including personally
identiﬁable information (PII) such as user-names, passwords,
emails, phone numbers, and locations [36]. Such leakage also
applies to high proﬁle companies such as Verizon, which may
have leaked 100MB of its corporate secrets from a publicly
accessible Amazon S3 bucket [33].
A conventional wisdom is to get better security by using the
cloud, but this has actually led to massive data leaks. Conse-
quently, it has resulted in many questions to be answered. For
instance, what are the root causes of data leaks in the cloud?
Are they caused by cloud providers, app developers, or both?
Can we systematically identify data leakage vulnerabilities in
cloud services? How can they (i.e., both cloud providers and
app developers) prevent them from happening again?
In this paper, we seek to perform a systematic study and
answer these questions. Since we do not have lower-level
access to how each cloud provider manages the customers’
services, we can only analyze the front-end of the cloud
services. One such front-end is mobile apps. Increasingly, we
notice that more and more mobile apps are using cloud APIs
for various services such as authentication, authorization, and
storage, without directly setting up and managing those back-
end infrastructures. Therefore, by inspecting how the cloud
APIs are used, we can understand how each mobile app
manages its customer data and thus identify the data leakage
vulnerabilities.
In particular, we ﬁrst look into the typical APIs offered by
cloud providers for mobile app development, and examine how
app developers would develop their mobile apps and manage
their security with these APIs. From this study, we uncover
that a mobile app must perform an extra service authentication
when communicating with the cloud back-end, such that the
cloud provider knows which app issues the request and which
resource this app aims to access. Improper management of
user authentication and misconﬁguration of user permissions
in authorization are the root causes that lead to the various
data leaks from the cloud. In our study, we ﬁnd many cloud
services suffer from such vulnerabilities.
Having discovered the root causes of the data leaks in the
cloud, we also notice that it is possible to develop a principled
approach to automatically identify these data leakage vulner-
abilities by inspecting how mobile apps use the authentication
keys and how servers handle users’ requests. One challenge
lies in how to make sure there is no leakage of customer data
when performing our analysis, since we are a third party and
we certainly must not access any of the customer data. Also,
there are millions of mobile apps today, so we must design a
scalable, automated, and efﬁcient approach. We have addressed
these challenges and built a tool called LeakScope with a set
of program analysis techniques including obfuscation-resilient
cloud API identiﬁcation, string value analysis, and zero-data-
© 2019, Chaoshun Zuo. Under license to IEEE.
DOI 10.1109/SP.2019.00009
1296
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
1297
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
1298
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
ᬅᬅ Registration
(Listening Key)
ᬇ Notifications
ᬆ Notifications
(Full Access Key)
App Users
Notification Hub
Developers /
App Publisher
Figure 3: How to Use Azure Notiﬁcation Hub.
anonymized on purpose. The code is used for downloading
some images from the cloud storage. We can see that the key
(at line 31) used in this app is an account key (by looking at
its format at line 18), which means anyone with this key can
access the entire storage allocated to this particular account.
(II) Key Misuse in Azure Notiﬁcation Hubs. With cloud
APIs, developers can easily send messages to speciﬁc users or
broadcast to all users. Microsoft Azure provides a notiﬁcation
hub with two APIs for message notiﬁcation. As illustrated
in Figure 3, to use Azure Notiﬁcation Hub, developers ﬁrst
need to register a channel, and then the mobile app just
invokes the API to listen to the developer registered channel
using a listening key; after that,
the app server can push
notiﬁcations to the channel registered in the Hub (using a
full access key), which will further relay this message to all
channel listeners. There are two keys involved:
• Full Access Key. The full access key works like a “root”
key, and has full access to send or listen for notiﬁcations
on the channel. An example of such a key is shown in
the 3rd row of Table II.
• Listening Key. The listening key has limited privileges
and can only listen to the notiﬁcations registered in a
particular channel. The last row in Table II shows an
example of a listening key.
Clearly, a listening key should only be used by the mobile
app, whereas the full access key should only be used by app
servers. However, we ﬁnd that some developers are using full
access keys directly in the mobile apps. While the key misuse
in Azure Notiﬁcation Hubs may not directly lead to data
leakage attacks, we have to stress that once attackers extract the
full access key they still have access to powerful capabilities.
For example, they can easily push phishing messages to steal
data from other app users.
(III) Key Misuse in AWS. Amazon AWS also provides a
number of keys for mobile apps to access the AWS resources
(e.g., the S3 storage) billed to the developers. One of the keys
is the root access key (or root account key), which has full
access to all of the resources under a particular AWS account.
Since this root key has all privileges, it should be kept secret.
Unfortunately, we also noticed this root key being used in
mobile apps. Once an attacker extracts this root key, she has
full access to the entire storage.
B. Misconﬁguration of User Permissions in Authorization
In addition to the misuse of keys in authentication,
misconﬁguration of user permissions in authorization can also
result in data leaks. Typically, authentication only tells the
system who the user is, and it is authorization that decides
which speciﬁc resources an authenticated user can access.
Lack of authorization or incorrect conﬁguration can make the
authorization layer useless, thereby leading to data leaks.
{
"rules": {
"users": {
"$uid": {
".read": "$uid === auth.uid",
".write": "$uid === auth.uid"
}
}
}
}
Figure 4: A Correct Firebase Authorization Rule
{
{
"rules": {
"rules": {
".read": true,
".write": true
".read": "auth != null",
".write": "auth != null"
}
}
}
}
(a)
(b)
Figure 5: Two Misconﬁgured Firebase Authorization Rules
While misconﬁguration of authorization is not a new
problem and has been studied for many years, this problem
becomes more critical when using cloud APIs. In particular,
when developing mobile apps without cloud APIs, different
developers can implement authorization systems in completely
different ways. Even though vulnerabilities may be present,
it is quite challenging for attackers to systematically exploit
many diverse implementations. However, when developers
are using cloud APIs, adversaries can easily launch attacks;
since many developers are using the interfaces of only a few
cloud services, attackers can just focus on these interfaces to
systematically identify vulnerabilities.
Meanwhile, unlike in authentication, in which developers
have a limited playground when using cloud APIs (e.g., the
mistakes only come from key misuses), there are a variety
of ways for developers to conﬁgure authorization, making the
authorization conﬁguration much harder and more error-prone.
For instance, Google even provides a language for developers
to specify the user permissions in authorization. It
is not
surprising that developers will make mistakes: we found (i)
apps with Firebase that have misconﬁgured user permissions
in the back-end. In addition, we found (ii) apps with AWS that
suffer from this misconﬁguration problem as well.
(I) Misconﬁguration of User Permissions in Firebase. When
using Firebase, developers have to deﬁne user-speciﬁc access
control polices, i.e., the “rules”. An example of such a rule is
shown in Figure 4. Note that Firebase is a real time database
that organizes data in a hierarchy structure with JSON.
According to this example rule, there is a node named “users”
in the database: when a user attempts to access (read/write)
one of its child nodes that has an associated $uid,
the
system will only grant access if the user’s uid equals the
$uid of the child node for this speciﬁc read and write
operation. Unfortunately, we notice that not all developers
follow the correct way to write the rules. For instance, as
shown in Figure 5, a developer can write rules to just ignore
the checks, or just check whether a user is authenticated.
These are obviously insecure rules, as they imply that any
(authenticated) user has full access to the entire database.
(II) Misconﬁguration of User Permissions in AWS. With
AWS, Amazon provides Identity and Access Management
(IAM) for user management and permission conﬁgurations. To
securely access the resources billed to a particular mobile app
1299
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
developer, an IAM user needs to be created. The developer
can conﬁgure the permissions for
IAM users, and each
IAM user can generate two secret access keys to access the
speciﬁed resources. While using IAM users appears to be
secure, developers may in fact over provision the permissions
for an IAM user, such as granting full access to a particular
storage, which will lead to data leaks.
IV. PROBLEM STATEMENT AND OVERVIEW
After the discovery of the root causes of the data leaks
in the cloud, we would like to develop techniques to system-
atically identify the leaks. Since we do not have any access
to the mBaaS cloud implementations (only to their SDKs and
APIs), we can only start from the front-end of the services
(i.e., the mobile apps) to inspect how mobile apps use the
various keys and also infer the permission conﬁgurations based
on server responses. Therefore, we must design a mobile app
exclusive approach. In this section, we provide an overview
of the problem we aim to solve and the solutions and insights
we have. The detailed design and implementation of our tool
is presented in the next section.
A. Problem Statement
As illustrated in Figure 1, we notice that developers must
embed the app key in the app, and then use it to invoke cloud
mBaaS cloud APIs. The data leakage vulnerabilities we aim to
identify are mainly caused by key misuse and permission mis-
conﬁguration. Therefore, the ﬁrst problem we must solve is how
to systematically identify various keys used by mobile apps.
At ﬁrst it might appear trivial to identify the API keys
used by mobile apps by inspecting each cloud API (e.g,. the
CloudStorageAccount.parse API used at line 31 in
Figure 2). However, the keys might not be directly visible and
could have gone through multiple string acquisitions (e.g., at
line 9-12) and concatenations (e.g., at line 18-21). In addition,
there are millions of mobile apps, so we have to design a
scalable approach. Therefore, the second problem we must
solve is how to identify the relevant key strings that are used
by mobile apps.
Also,
increasingly mobile apps are using obfuscation
to thwart app reverse engineering and repackaging [45],
[43], [42]. It might be possible that app developers have
obfuscated the APIs we aim to inspect. As such, we
cannot simply scan the app code for API signatures (e.g.,
CloudStorageAccount.parse);
instead, we must
design an obfuscation-resilient approach. It would also be
interesting to know whether obfuscated apps are vulnerable
to data leaks, given the fact
that app developers using
obfuscation are potentially more aware of security issues.
Therefore, the third problem we need to solve is how to design
an obfuscation-resilient approach to identify cloud APIs and
key strings of our interest.
Finally, after we have extracted the keys, we have to
identify the type of each key (e.g., a root key or an app
key). Once we have determined the types of
the keys,
we must also verify whether the apps have misused them
without accidentally accessing any private data stored in
the cloud. Similarly, we also must identify user permission
misconﬁgurations during authorization without
leaking any
data. Therefore, the ﬁnal problem we (as third-parties) must
solve is to design a veriﬁcation approach with zero data-
leakage to conﬁrm the existence of data leaks in the cloud.
B. Our Solutions
Recognizing the Keys by Cloud API Identiﬁcation. To
identify keys that are used by an app, we can actually infer
them from the parameters of the well-known APIs that are used
by the app. Note that each cloud provider has offered a set of
APIs in their SDKs for mobile app development. As illustrated
in Table III, the APIs that take parameters with various keys
are actually quite limited, and we acquire this list based on
our best understanding of the corresponding SDKs. Therefore,
if we are able to recognize these APIs, then we can identify
the keys used by the app in the corresponding parameters.
However, the APIs listed in Table III can be obfuscated.
Interestingly, we ﬁnd that there are often two strategies used
in API obfuscation:
• Renaming names involved in the API, such as the sub-
package name, class name, function name, and variable
name, from the standard name to some meaningless
characters. This is often achieved by some automated
obfuscation tools (e.g., Dexprotector [7], Dexguard [5]).
• Removing the functions/APIs that are never used. Since
the non-used functions/APIs can often reveal the packages
and classes used by the app, removing these functions
from the apps by automated tools (e.g., Proguard [12],
[15]) can further help hide the APIs of interest.
Therefore, we propose to build an obfuscation-resilient func-
tion signature for each function in the APK (including its
library) in order to identify the cloud APIs in Table III. Our
signature ignores the names of packages, classes, functions,
and variables. Instead, a function’s signature is the hash of
the strings that are composed of the types of the parameters,
local variables, and return values, as well as the signatures of
callees.
Using String Analysis to Identify the Value of Keys. Having
identiﬁed the APIs of our interest, we cannot directly extract
the values of the corresponding parameters from the app code.
For instance, we cannot directly extract the value of v0 from
CloudStorageAccount.parse in Figure 2, as this value
is computed from multiple string operations. While we can
use dynamic analysis to execute the app and extract the value
at runtime, such an approach does not scale well, especially
considering that we have millions of mobile apps. Therefore,
eventually we decided to take a static analysis approach
and propose a targeted string value analysis to identify the
used keys. At a high level, our string value analysis can
be considered a particular case of value set analysis [24]. It
involves backward slicing and string related operation analysis.
Zero-data-leakage Vulnerability Veriﬁcation. After we
have retrieved the values of the keys used by the cloud APIs,