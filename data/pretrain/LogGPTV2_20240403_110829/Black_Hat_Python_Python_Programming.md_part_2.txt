### Source Code Examples
The source code examples from this book are available at [http://nostarch.com/blackhatpython/](http://nostarch.com/blackhatpython/).

---

## Preface

### Acknowledgments
I would like to extend my gratitude to my family—my beautiful wife, Clare, and my five children, Emily, Carter, Cohen, Brady, and Mason—for their unwavering encouragement and patience during the year and a half I spent writing this book. My brothers, sister, Mom, Dad, and Paulette have also provided immense motivation and support throughout this journey. I love you all.

To my colleagues at Immunity: thank you for your daily tolerance and support. You are an incredible team to work with. To the No Starch Press team—Tyler, Bill, Serena, and Leigh—thank you for your hard work and dedication to this book and the entire collection. Your efforts are greatly appreciated.

Special thanks go to my technical reviewers, Dan Frisch and Cliff Janzen. They meticulously reviewed every line of code, wrote supporting code, made edits, and provided invaluable support throughout the entire process. Their contributions were outstanding, and I highly recommend them to anyone writing an infosec book.

Lastly, to my friends who shared drinks, laughs, and GChats: thank you for listening to my rants and raves about writing this book.

---

## Chapter 1: Setting Up Your Python Environment

This chapter covers the essential but less exciting part of the book: setting up your Python development environment. We will guide you through the process of creating a Kali Linux virtual machine (VM) and installing a robust Integrated Development Environment (IDE). By the end of this chapter, you should be ready to tackle the exercises and code examples in the rest of the book.

### Prerequisites
Before you begin, download and install VMware Player from [http://www.vmware.com/](http://www.vmware.com/). Additionally, it is recommended to have some Windows VMs ready, such as Windows XP and Windows 7, preferably 32-bit versions.

### Installing Kali Linux
Kali Linux, the successor to BackTrack Linux, is a penetration testing operating system designed by Offensive Security. It comes preloaded with numerous tools and is based on Debian Linux, allowing for the installation of a wide variety of additional tools and libraries.

#### Download and Install Kali Linux
1. Download the Kali VM image from [http://images.offensive-security.com/kali-linux-1.0.9-vm-i486.7z](http://images.offensive-security.com/kali-linux-1.0.9-vm-i486.7z).
2. Decompress the image and double-click it to launch VMware Player.
3. The default username is `root` and the password is `toor`.

#### Verify Python Installation
Ensure that the correct version of Python is installed. This book uses Python 2.7. Open a terminal and execute:
```bash
python --version
```
You should see:
```
Python 2.7.3
```

#### Install Python Package Managers
Install `easy_install` and `pip` for managing Python packages:
```bash
apt-get install python-setuptools python-pip
```

#### Test Package Installation
Install the `github3.py` module, which we will use in Chapter 7:
```bash
pip install github3.py
```
Verify the installation by importing the module in a Python shell:
```python
import github3
```

### Installing WingIDE
WingIDE is a powerful IDE with excellent debugging capabilities. While it is a commercial product, it is highly recommended for Python development.

1. Download the 32-bit `.deb` package for WingIDE from [http://www.wingware.com/](http://www.wingware.com/).
2. Install the package using the following commands:
   ```bash
   dpkg -i wingide5_5.0.9-1_i386.deb
   apt-get -f install
   ```

#### WingIDE Features
- **Debugging**: Set breakpoints, inspect variables, and modify values during execution.
- **Stack Data**: View the state of local and global variables and the call stack.
- **Debug Probe**: Drop into a Python shell within the current context to test and troubleshoot.

### Conclusion
With your Kali Linux VM and WingIDE set up, you are now ready to start developing Python code. For Windows-specific chapters, ensure you have the necessary Windows VMs ready. Let's dive into the fun stuff!

---

## Chapter 2: The Network: Basics

The network is a critical arena for hackers, offering opportunities to scan for hosts, inject packets, sniff data, and remotely exploit systems. However, in many enterprise environments, you may find yourself without the usual tools. Python, often available, can be a powerful alternative.

### Python Networking with the `socket` Module
The `socket` module is the core tool for Python networking, providing the necessary functions to create TCP and UDP clients and servers.

#### TCP Client
Here is a simple TCP client that connects to a server and sends a request:
```python
import socket

target_host = "www.google.com"
target_port = 80

# Create a socket object
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect the client
client.connect((target_host, target_port))

# Send some data
client.send("GET / HTTP/1.1\r\nHost: google.com\r\n\r\n")

# Receive some data
response = client.recv(4096)
print(response)
```

#### UDP Client
A UDP client is similar but uses `SOCK_DGRAM` and `sendto()` and `recvfrom()` methods:
```python
import socket

target_host = "127.0.0.1"
target_port = 80

# Create a socket object
client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Send some data
client.sendto("AAABBBCCC", (target_host, target_port))

# Receive some data
data, addr = client.recvfrom(4096)
print(data)
```

#### TCP Server
Creating a multi-threaded TCP server:
```python
import socket
import threading

bind_ip = "0.0.0.0"
bind_port = 9999

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((bind_ip, bind_port))
server.listen(5)
print(f"[*] Listening on {bind_ip}:{bind_port}")

def handle_client(client_socket):
    request = client_socket.recv(1024)
    print(f"[*] Received: {request}")
    client_socket.send("ACK!")
    client_socket.close()

while True:
    client, addr = server.accept()
    print(f"[*] Accepted connection from: {addr[0]}:{addr[1]}")
    client_handler = threading.Thread(target=handle_client, args=(client,))
    client_handler.start()
```

This chapter lays the foundation for more advanced networking tasks, including host discovery, cross-platform sniffers, and remote trojan frameworks.