Duplicate #17432
Windows 10, CMake 3.18, CUDA 10.2. OpenCV rev. `0cbaaba`, contrib rev.
39ced2af67b5f76d5d2f3a9c1f9cebfc0ddd8c65.
During configuration CMake issues an error:
    CMake Error at cmake/OpenCVDetectCUDA.cmake:111 (string):
      string sub-command STRIP requires two arguments.
    Call Stack (most recent call first):
      cmake/OpenCVDetectCUDA.cmake:164 (ocv_filter_available_architecture)
      cmake/OpenCVFindLibsPerf.cmake:43 (include)
      CMakeLists.txt:688 (include)
    CMake Error at cmake/OpenCVDetectCUDA.cmake:125 (string):
      string sub-command REPLACE requires at least four arguments.
    Call Stack (most recent call first):
      cmake/OpenCVDetectCUDA.cmake:174 (ocv_wipeout_deprecated)
      cmake/OpenCVFindLibsPerf.cmake:43 (include)
      CMakeLists.txt:688 (include)
I investigated the latest changes and found that the error occurs after commit
`476aa44`.
@tomoaki0705, Could you please look.
Full log:
    Detected processor: AMD64
    Found PythonInterp: C:/Program Files/Python37/python.exe (found suitable version "3.7.7", minimum required is "2.7") 
    libjpeg-turbo: VERSION = 2.0.4, BUILD = opencv-4.4.0-pre-libjpeg-turbo
    Could NOT find OpenJPEG (minimal suitable version: 2.0, recommended version >= 2.3.1)
    IPPICV: Download: ippicv_2020_win_intel64_20191018_general.zip
    found Intel IPP (ICV version): 2020.0.0 [2020.0.0 Gold]
    at: E:/Lib_prebuild/opencv/prebuild_x64/3rdparty/ippicv/ippicv_win/icv
    found Intel IPP Integration Wrappers sources: 2020.0.0
    at: E:/Lib_prebuild/opencv/prebuild_x64/3rdparty/ippicv/ippicv_win/iw
    Found CUDNN: C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2/lib/x64/cudnn.lib (found suitable version "7.6.5", minimum required is "7.5") 
    CUDA detected: 10.2
    CMake Error at cmake/OpenCVDetectCUDA.cmake:111 (string):
      string sub-command STRIP requires two arguments.
    Call Stack (most recent call first):
      cmake/OpenCVDetectCUDA.cmake:164 (ocv_filter_available_architecture)
      cmake/OpenCVFindLibsPerf.cmake:43 (include)
      CMakeLists.txt:688 (include)
    CMake Error at cmake/OpenCVDetectCUDA.cmake:125 (string):
      string sub-command REPLACE requires at least four arguments.
    Call Stack (most recent call first):
      cmake/OpenCVDetectCUDA.cmake:174 (ocv_wipeout_deprecated)
      cmake/OpenCVFindLibsPerf.cmake:43 (include)
      CMakeLists.txt:688 (include)
    CUDA NVCC target flags: -D_FORCE_INLINES
    Check size of int
    Check size of int - done
    Found MKL 2019.0.3 at: E:/Lib_prebuild/MKL
    LAPACK(MKL): LAPACK_LIBRARIES: E:/Lib_prebuild/MKL/lib/mkl_intel_lp64.lib;E:/Lib_prebuild/MKL/lib/mkl_sequential.lib;E:/Lib_prebuild/MKL/lib/mkl_core.lib
    LAPACK(MKL): Support is enabled.
    Found JNI: C:/Program Files/Java/jdk-14.0.1/lib/jawt.lib  
    The following CMake options are exported from the Inference Engine build
        THREADING: TBB
    Detected InferenceEngine: cmake package (2.1.0)
    CMake Warning at cmake/OpenCVDetectInferenceEngine.cmake:132 (message):
      InferenceEngine version has not been set, 2020.3 will be used by default.
      Set INF_ENGINE_RELEASE variable if you experience build errors.
    Call Stack (most recent call first):
      CMakeLists.txt:750 (include)
    Found VTK 8.2.0 (C:/Lib/VTK/build_x64/lib/cmake/vtk-8.2/UseVTK.cmake)
    ADE: Download: v0.1.1f.zip
    OpenCV Python: during development append to PYTHONPATH: E:/Lib_prebuild/opencv/prebuild_x64/python_loader
    FFMPEG: Download: opencv_videoio_ffmpeg.dll
    FFMPEG: Download: opencv_videoio_ffmpeg_64.dll
    FFMPEG: Download: ffmpeg_version.cmake
    Looking for mfapi.h
    Looking for mfapi.h - found
    Looking for d3d11_4.h
    Looking for d3d11_4.h - found
    Caffe:   NO
    Protobuf:   NO
    Glog:   NO
    freetype2:   NO
    harfbuzz:    NO
    No preference for use of exported gflags CMake configuration set, and no hints for include/library directories provided. Defaulting to preferring an installed/exported gflags CMake configuration if available.
    Found installed version of gflags: C:/Lib/gflags/build_x64/lib/cmake/gflags
    Detected gflags version: 2.2.2
    Found installed version of Eigen: E:/Lib_prebuild/eigen/build_x64/share/eigen3/cmake
    Found required Ceres dependency: Eigen version 3.3.7 in E:/Lib_prebuild/eigen/build_x64/include/eigen3
    Found installed version of glog: E:/Lib_prebuild/glog/prebuild_x64
    Detected glog version: 0.4.0
    Found required Ceres dependency: glog
    Found installed version of gflags: C:/Lib/gflags/build_x64/lib/cmake/gflags
    Detected gflags version: 2.2.2
    Found required Ceres dependency: gflags
    Ceres version 1.14.0 detected here: E:/Lib_prebuild/ceres-solver/build_x64 was built with C++11. Ceres target will add C++11 flags to compile options for targets using it.
    Found Ceres version: 1.14.0 installed in: E:/Lib_prebuild/ceres-solver/build_x64 with components: [EigenSparse, SparseLinearAlgebraLibrary, LAPACK, SuiteSparse, SchurSpecializations, C++11, OpenMP, Multithreading]
    Checking SFM deps... TRUE
    Tesseract:   NO
    Allocator metrics storage type: 'long long'
    Registering hook 'INIT_MODULE_SOURCES_opencv_dnn': E:/Lib_prebuild/opencv/source/opencv/modules/dnn/cmake/hooks/INIT_MODULE_SOURCES_opencv_dnn.cmake
    DNN: Enabling Inference Engine NN Builder API support
    xfeatures2d/boostdesc: Download: boostdesc_bgm.i
    xfeatures2d/boostdesc: Download: boostdesc_bgm_bi.i
    xfeatures2d/boostdesc: Download: boostdesc_bgm_hd.i
    xfeatures2d/boostdesc: Download: boostdesc_binboost_064.i
    xfeatures2d/boostdesc: Download: boostdesc_binboost_128.i
    xfeatures2d/boostdesc: Download: boostdesc_binboost_256.i
    xfeatures2d/boostdesc: Download: boostdesc_lbgm.i
    xfeatures2d/vgg: Download: vgg_generated_48.i
    xfeatures2d/vgg: Download: vgg_generated_64.i
    xfeatures2d/vgg: Download: vgg_generated_80.i
    xfeatures2d/vgg: Download: vgg_generated_120.i
    data: Download: face_landmark_model.dat
    No preference for use of exported gflags CMake configuration set, and no hints for include/library directories provided. Defaulting to preferring an installed/exported gflags CMake configuration if available.
    Found installed version of gflags: C:/Lib/gflags/build_x64/lib/cmake/gflags
    Detected gflags version: 2.2.2
    Found installed version of Eigen: E:/Lib_prebuild/eigen/build_x64/share/eigen3/cmake
    Found required Ceres dependency: Eigen version 3.3.7 in E:/Lib_prebuild/eigen/build_x64/include/eigen3
    Found installed version of glog: E:/Lib_prebuild/glog/prebuild_x64
    Detected glog version: 0.4.0
    Found required Ceres dependency: glog
    Found installed version of gflags: C:/Lib/gflags/build_x64/lib/cmake/gflags
    Detected gflags version: 2.2.2
    Found required Ceres dependency: gflags
    Ceres version 1.14.0 detected here: E:/Lib_prebuild/ceres-solver/build_x64 was built with C++11. Ceres target will add C++11 flags to compile options for targets using it.
    Found Ceres version: 1.14.0 installed in: E:/Lib_prebuild/ceres-solver/build_x64 with components: [EigenSparse, SparseLinearAlgebraLibrary, LAPACK, SuiteSparse, SchurSpecializations, C++11, OpenMP, Multithreading]
    Checking SFM deps... TRUE
    NVIDIA_OPTICAL_FLOW: Download: 79c6cee80a2df9a196f20afd6b598a9810964c32.zip
    CMake Warning at cmake/OpenCVGenSetupVars.cmake:54 (message):
      CONFIGURATION IS NOT SUPPORTED: validate setupvars script in install
      directory