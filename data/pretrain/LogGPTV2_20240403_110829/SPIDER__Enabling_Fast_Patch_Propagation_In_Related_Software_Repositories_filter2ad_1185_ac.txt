### Preprocessor Mode (NoPP)

In the NoPP mode, SPIDER disregards any patches that affect statements controlled by preprocessor variables. Our analysis in Appendix I shows that the detection rate of SPIDER in NoPP mode does not significantly differ from the default mode, with only a 1.15% decrease (refer to Table IV, "Default - NoPP"). Additionally, users can specify the values of preprocessor variables, allowing for more accurate source file processing rather than relying on the conservative NoPP mode. The limitations discussed are inherent to our requirements R1 and R2. Nonetheless, we believe that SPIDER provides a reasonable approach to identifying safe patches. If these assumptions are too restrictive, users can revert to the more conservative Security Patch (SeP) mode, detailed in Section VI. Furthermore, SPIDER can be used to rank and prioritize patches for manual vetting and testing.

### Security Patch Mode

As mentioned in Section I, some security patches may not have corresponding CVE entries. To address this, SPIDER includes a Security Patch (SeP) mode, which identifies security patches with no false positives, ensuring that all identified patches are indeed security-related. SeP mode is based on the observation that most security patches add additional input validation checks. Therefore, it restricts itself to safe patches that affect only control-flow statements. When commit messages are available, we use the technique proposed by Zhou et al. [79] to filter out non-security related fixes. However, this mode may result in false negatives, where potential security patches are not detected.

While SeP mode is more limited in the types of patches it considers safe, it does not rely on the assumptions discussed in Section V. We believe that SeP mode represents a significant step towards a practical solution for automatically identifying security patches, which can be easily integrated into any source-control system. We plan to integrate SeP mode into GitHub security alerts [8], enhancing the ability of developers and maintainers to handle security patches. Note that our running example (Listing 1) is a security patch but is not detected by SeP mode because it also affects non-control flow instructions.

### Evaluation

We evaluate SPIDER's effectiveness in three ways:

1. **Large-scale Evaluation**: We run SPIDER on a dataset of 341,767 changes (commits) across 32 repositories, collected over 32 months starting from 2016, to determine its ability to detect safe patches (SPs) as defined in Section VII-A.
2. **Security Patches Evaluation**: We test SPIDER on a set of security patches (CVE patching commits) to assess its utility in accelerating the propagation of critical fixes.
3. **Vulnerability Finding Tool**: In Section VII-D, we demonstrate how SeP mode can be used to identify non-CVE security patches missing in various active forks of the analyzed projects.
4. **Real-World Examples**: In Section VII-E, we show that there are several non-CVE security patches in the Linux kernel, many of which remain unpatched in some Android-related forks, highlighting SPIDER's potential in addressing n-day vulnerabilities.

SPIDER performs an intra-procedural static analysis, focusing on patches that affect a single C source file (.c format) to isolate the effect of interactions between different modified functions. All patches in our evaluation are real changes extracted from widely used open-source project repositories (see Section VII-A for details).

**Performance**: On average, SPIDER took 3.4 seconds to analyze a patch on a machine with a two-core 2.40 GHz CPU and 8GB RAM, demonstrating its speed and scalability.

**Active Forks**: We considered only active forks, defined as those with at least ten new commits in the last six months, to avoid exaggerating results. For instance, in the case of the Linux kernel (ID 1), we considered only 269 active forks out of 23,854.

### Large-scale Evaluation

We ran SPIDER on a large set of patches from 32 open-source projects widely used in desktop, mobile, and embedded operating systems, collecting all single-C-file commits for the past 32 months. Project details are provided in Table II.

**Patch Applicability Check**: We use a syntactic approach to determine if a patch is applicable to a fork or other projects. Given a patch, we compare the affected file's source code before the patch (original file) to the latest version in the fork. If the file is present and the affected functions do not differ, the patch can be applied. We use `git diff` to ensure no modifications in the targeted functions.

Across all repositories, the percentage of SPs remains around 20%-25%, with some projects, such as IDs 15 and 16, having lower detection rates due to complex code and patches (detailed in Appendix C). Listing 6 shows an example of an SP, where the patch modifies error basic blocks and moves function calls, but the symbolic expressions of the arguments remain equivalent, making it an SP.

### Evaluation on CVEs

To determine how many security patches are SPs, we collected all patching commits linked as reference fixes for kernel CVEs from Android security bulletins and analyzed 809 CVE patches. Table III shows that 55.37% of CVE-patching commits are non-disruptive, compared to 19.72% for generic patches. This indicates SPIDER's potential in speeding up the selection and application of security patches. Listing 5 shows an example of a CVE patch identified as an SP.

### Effectiveness of Patch Analysis

Table II also shows the number of SPs identified by SPIDER. Out of 341,767 commits, SPIDER identified 67,408 (19.72%) SPs, with 58.72% of these patches missing in at least one active fork (MIAFs).

Using SPIDER in SeP mode, we identified security patches and checked for associated CVE numbers. Listings 6 and 4 show examples of security patches without CVE entries, detected by SeP mode.

### Security Patches Missing a CVE Number

We used SPIDER in SeP mode to identify security patches and verified their CVE status. Table II provides the number of SPs identified, and we found that 67,408 (19.72%) of the 341,767 commits were SPs. Additionally, 58.72% of these patches were missing in at least one active fork (MIAFs). Listings 6 and 4 provide examples of security patches without CVE entries, detected by the SeP mode of SPIDER.