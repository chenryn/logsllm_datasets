预期的9007199254740991
1987年出版的一本awk书里，对OFHT定义了默认值，不过这是非正式的语言定义，除
此之外该书并未提及其他的值。有可能各实现在认知上有所不同，POSIX宣称，如果
OFMT不是浮点格式规格的话，则转换结果是未指定的，因此在这里的gawk行为是被
允许的。
使用mawk，我们发现：
S mawk -f ofnt.awk
.Pt. = JO [z ]
1079958844
预期123
-PSC.=X40[6]
000000000000001079958844
1079958844
预期123
[11]OP*25d
[10] OFMr = *3.25d*
预期00-00123
[12]OPMT =
*#25d*
2147483647
1105199104
预期结录向右对齐
[13] OFMr =*25d*
预期9007199254740991
预期2147483648
1128267775
 + -
显然这里在处理格式为d与i的大型数字时会有不一致的特殊处理手法。幸好，改用
8.0f格式，便能从所有awk实现中，取得正确的输出。
9.10
数值函数
awk提供的基础数值函数参见表9-6。大部分都是在很多程序语言上常见的，且其精度
由底层本地数学函数库的品质而定。
表9-6：基础数值函数
函数
说明
atan2 (y, x)
返图y/x的反正切，值介于-与+之间。
cos (x)
返回x的余弦值（以弧度（radians）计算），该值介于-1与+1之间。
exp ( x)
返目x的指数，ex。
int (x)
返目x的整数部分，截去前置的0.
1og (x)
返目x的自然对数。
rand ()
返目平均分布的虚拟随机r，0≤r= high)
参数取序的健康检查
return (1ow)
在要求的区间里寻找值
do
n = 1ow + int (rand() * (high + 1 - 1ow))
whi1e ((n  do
avk 'BEGIN {
A
srand()
for (k = 1 k 
sleep 1
}"
>done
0.29994 0.00751 0.57271 0.26084 0.76031
0.32768 0.04868 0.58040 0.98001 0.44200
0.81381 0.52809 0.57656 0.12040 0.60115
0.84155 0.56929 0.58422 0.83956 0.28288
0.35539 0.08985 0.58806 0.69915 0.12372
投有sleep1语句的话，输出行很有可能会完全一样。
9.11小结
我们在本章所展现的awk子集，已经能做相当多的文本处理工作.当你了解awk的命令
行，并知道它如何自动处理输入文件，那么写程序的工作就简化到只需要标明记录的选
定与其相对应的操作。这类极简单的数据驱动程序语言相当具有效率。相比之下，大多
数传统的程序语言，都必须苦思如何使用循环处理一连申输入的文件，并针对每个文件
处理打开文件、读取、选定以及处理记录直到文件结尾，还有最后的关闭文件，然后把
这些写成一长串的例程。
当你看到使用awk处理记录与字段有多简单时，对数据处理的看法就会大大改变。你可
以开始将大型的任务，分割为更小、更易于管理的工作。例如，当你面临必须处理一个
极复杂的二进制文件时，可能是用于数据库的文件，或是字体、图片、幻灯片、电子表
格、排版软件及字处理器等文件，你可以设计或直接找一组可以将二进制格式转换为适
当标记的纯文本格式的工具，然后再在awk或其他脚本语言里写一个小小的过滤程序，
处理文本的显示。
www.TopSage.com
---
## Page 292
第10章
.com
文件处理
本章要讨论的是在处理文件时常见的一些命令，例如：列出文件、修改它们的时间戳、
建立临时性文件、在目录层级中寻找文件、将命令应用到文件列表、计算文件系统空间
的使用量以及比较文件。
10.1列出文件
echo命令提供简单的方式列出匹配模式的文件：
$ecbo /bin/*sh
显示/bin下的She11
/bin/ash /bin/bash /bin/bsh /bin/csh /bin/ksh /bin/sh /bin/tcsh /bin/zsh
Shell将通配字符模式替换为匹配的文件列表，而且echo以空格区分文件列表，在单一
行上显示它们。不过echo不会更进一步解释它的参数，因此与文件系统里的文件也没
有任何关联。
：
ls命令则比echo能作更多的处理，因为它知道自已的参数应该是文件。未提供命令行
选项时，18只会验证其参数是否存在，并显示它们，如果输出并非终端，则以一行一个
的方式显示，如果是终端，则为多栏显示模式。马上看看这三种有何不同：
$18/bln/*sb 1cat
在输出管道里显示Shel1
/bin/ash
/bin/bsh
/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/zsb
/bin/tcsh
280
www.TopSage.com
---
## Page 293
文件处理
281
Is
语法
1s [ options ] [ file(s) ]
用途
列出文件目录的内容。
主要选项
-1
数半1。强制为单栏输出。在交至式模式下，18一般会以适于当前窗口的
最小宽度，使用多个列。
-a
显示所有文件，包括照藏文件（文件名以点号起始的文件）。
-d
显示与目录本身相关的信息，而非它们包含的文件的信息。
-F
使用特殊结尾字持，标记特定的文件类型，
g
仅造用于组：省略所有老名称（隐含-1，小写L选项）。
-
列出inode编号：
-L
紧接着将号性连接，列出它们指向的文件。
-1
小写的L。以究长形式列出，带有类型、权限保护、所有老、组、字节计
数、最后修改时间和文件名。
-I
例置殿认的排序顺序。
-R
递归到出，下延进入每个子目最。
-S
按照由大到小的文件大小计数排序，仅GNU版本支持。
以块（与系统有美）为单位，到出文件的大小。
www.TopSage.com
---
## Page 294
282
第10章
Is(续）
-t
按照最后修改时间截排序。
--ful1-time
显示完整的时间数。仅GNU版本支持。
行为模式
1s通常只显示文件名称：扣须取得与文件属性相关的信息，必频提供额外选
项。文件是以辞典编排的暖序排序，不过可递过-吕或-七选项改变它，排序
的顺序是按照系统环境语言（locale）而定。
登告
评多18实例都提供比这里介绍还要多的选项：请参阅你本地系统里的使用手
册，了解更多信息。
$ 18/bln/*gh
/bin/bsh/bin/csh/bin/ksh/bin/sh/bin/tcsh
以80个字符宽度的终端窗口，显示Shel1
/bin/ash
/bin/bash
/bin/zsh
$ 1s /bin/*sh
以40个字符宽度的终端窗口，显示Shel1
/bin/ash
/bin/esh/bin/tcsh
/bin/bash/
/bin/ksh/bin/zsh
/bin/bsh
/bin/sh
为了终端输出时，1s会使用刚好适合的多栏，将数据依栏加以排列。这只是为了人们方
便检查；如果你要单栏输出到终端，可使用1s-1（数字1）强制执行。另外，处理18
的管道输出的程序，可预期得到一个文件名一行的模式。
在BSD、GNU/Linux，MacOSX与OSF/1的系统上，1s会将文件名里无法打印的字
符，在终端输出时转换为问号，但报告文件名到非终端输出则不做改变。来看看这个特
殊名称one\ntwo，n为换行字符。这里是GNU1s的处理方式：
$ 1e one*two
列出特定的文件名
one?tvo
$ 1e one*tvo 1 od -a -b
显示真实的文件名
0000000
157 156 145 012 164 167 157 012
nenl
t.onl
0000010
八进制输出工具程序od会显示真正的文件名：第一个报告换行字符为名称的一部分，第
二个则结束输出行。下游的程序会看到两个明显分开的名称：在稍后的10.4.3节里会说
明如何解决这样的错乱。