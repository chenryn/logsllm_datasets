2 × 104.
0.000.250.500.751.000.00.10.20.30.40.50.60.70.80.91.0Ratio of top singular valuesError of low rank approximationCountMinRevSketchDeltoidTwoLevelSIGCOMM ’17, August 21−25, 2017, Los Angeles, CA, USA
Huang et al.
constants mx and nx are numbers of rows and columns of vector
√2 × 104.
x, respectively. Since x is a 2104× 1 vector, we have β =
Finally, we consider γy. It denotes the measurement noise and is
estimated as the standard deviation of vector y.
Measurement task
Heavy hitter (HH) detection
6 IMPLEMENTATION
We have built a prototype of SketchVisor in C that supports various
measurement tasks and sketch-based solutions, as summarized in
Table 1. All sketches build on the hash function as in Snort [50].
Data plane: We have implemented SketchVisor’s data plane and
integrated it with Open vSwitch [41]. It has three components: (i) a
kernel module, which collects and dispatches packets to the normal
path and the fast path, (ii) a user-space daemon, which hosts the
normal path, and (iii) a shared memory block, which hosts both the
normal path’s FIFO buffer and the fast path, and is accessible by
both the kernel module and the user-space daemon.
The kernel module is an extension to the original datapath kernel
module of Open vSwitch. When a packet arrives, the kernel module
updates the shared memory block, by inserting the packet header
to the FIFO buffer or directly updating the fast path if the buffer is
full. It also exports a set of interfaces (e.g., open, close, and mmap)
to make it accessible by the user-space daemon. Our modification
of the datapath module is around 1,400 LOC.
The user-space daemon maintains all required sketches for the
normal path, and maps the shared memory block to its own memory
space via mmap. It continuously reads packet headers from the FIFO
buffer and updates sketches. Also, it periodically reports the results
of both the normal path and fast path to the control plane every
epoch, and resets all counters and variables for the next epoch.
The shared memory block provides a lightweight channel for the
kernel module and the user-space daemon to exchange information.
It eliminates context switching during measurement, as opposed to
the upcall mechanism in Open vSwitch (which is based on Linux
NetLink). One challenge is to efficiently synchronize the access
to the shared memory block between the kernel module and the
user-space daemon. For the FIFO buffer, since it has only a single
producer (i.e., the kernel module) and a single consumer (i.e., the
user-space daemon), we implement it as a lock-free circular buffer
that is optimized for cache-line efficiency [27]. For the fast path,
the user-space daemon makes a snapshot of the fast path and resets
the fast path immediately when reporting results. When it reports
the snapshot, the kernel module continues to update the fast path
without being blocked.
Note that Open vSwitch’s kernel-based packet forwarding mod-
ule works independently with SketchVisor’s measurement com-
ponents. Thus, SketchVisor can be deployed atop other software
packet processing frameworks with high packet forwarding per-
formance (e.g., Open vSwitch integrated with the Data Plane De-
velopment Kit (DPDK) [17]). In such environments, we expect that
SketchVisor provides even more performance and accuracy bene-
fits, as the sketch-based measurement overhead now becomes more
significant; we plan to study this issue in future work.
Control plane: The control plane implements network-wide re-
covery. It receives results from the data plane in each host through
ZeroMQ [58]. The compressive sensing solver is based on [9, 61],
and uses the svdcomp [53] library for singular value decomposition.
Sketch-based solutions
FlowRadar [28]
RevSketch [46]
UnivMon [30]
Deltoid [13]
FlowRadar [28]
RevSketch [46]
UnivMon [30]
Deltoid [13]
TwoLevel [56]
TwoLevel [56]
FM [20]
kMin [2]
Linear Counting (LC) [55]
FlowRadar [28]
MRAC [26]
FlowRadar [28]
UnivMon [30]
Heavy changer (HC) detection
DDoS detection
Superspreader (SS) detection
Cardinality estimation
Flow size distribution
Entropy estimation
Table 1: Measurement tasks and sketch-based solutions.
7 EVALUATION
We conduct experiments to demonstrate that SketchVisor can: (i)
achieve both high performance and high accuracy for various mea-
surement tasks, (ii) work seamlessly with various sketch-based
solutions, (iii) scale to a large number of hosts in stress tests, and
(iv) achieve comparable performance with much less memory to
[38], a recently proposed measurement framework based on simple
hash tables.
7.1 Methodology
Testbed: We deploy SketchVisor on a testbed composed of nine
hosts, each of which is equipped with Intel Xeon X5670 2.93GHz
CPU, 300GB memory, a Broadcom BCM5709 NetXtreme Gigabit
Ethernet NIC, and a Mellanox MT27710 10-Gigabit Ethernet NIC.
We run the data plane in eight hosts, which send traffic through
the 10Gb NICs, and the control plane in the remaining host, which
communicates with the data plane through the 1Gb NICs. In each
host, we run SketchVisor (either data plane or control plane) as a
single-threaded process on a dedicated CPU core.
In-memory tester: Our testbed is inadequate for scalability eval-
uation, as its scale is limited by the per-host NIC speed (10Gbps)
and the number of physical hosts in the data plane (eight hosts).
Thus, we also evaluate a SketchVisor variant called the in-memory
tester, which executes the core data plane and control plane log-
ics entirely in memory. For the data plane, the in-memory tester
processes traffic that is loaded into memory in advance, without
forwarding traffic to Open vSwitch and NIC; for the control plane,
the in-memory tester performs network-wide recovery from the
local measurement results that are again loaded into memory in
advance. We run the in-memory tester as a single-threaded pro-
cess on a dedicated CPU core. Our in-memory tester eliminates
network transfer overhead, so as to stress-test the computational
performance of SketchVisor.
Parameter settings: By default, we allocate 8KB memory for the
fast path (we study different fast path sizes in §7.5), and set the
parameters of our network-wide recovery algorithm as described
in §5. For the measurement tasks and sketch-based solutions in
SketchVisor: Robust Network Measurement for So(cid:129)ware Packet Processing
SIGCOMM ’17, August 21−25, 2017, Los Angeles, CA, USA
Table 1, we set their parameters such that the sketch-based solu-
tions for each measurement task have the same error bound based
on their theoretical analysis. For some sketch-based solutions (e.g.,
FlowRadar [30]) that address the worse-case scenario and require
excessive resources, we manually reduce their memory usage with-
out increasing their errors based on our experiments.
• Heavy hitter (HH) detection: We set the HH threshold as 0.05% of
the NIC capacity multiplied by the epoch length. We evaluate
four sketches. (i) Deltoid: we use four rows with 2/0.05% =
4,000 counters each, and the error probability is 1/24 = 1/16.
(ii) Reversible Sketch (RevSketch): similar to Deltoid, we use
four rows with 4,000 counters each, and partition a 104-bit five
tuple into 16-bit words. (iii) UnivMon: we allocate 4,000, 2,000,
1,000, 500 counters in the first, second, third sketches, and others,
respectively, and track top 500 flows in its heap. (iv) FlowRadar:
we use four hash functions in both the Bloom Filter and counter
array, and set the Bloom Filter length as 100,000 and the counter
array length as 40,000.
• Heavy changer (HC) detection: We set the threshold as 0.05% of
total changes over two adjacent epochs, and use the same sketch
settings as in HH detection.
• DDoS detection: We set the threshold as 0.5% of the total number
of IP addresses. We evaluate TwoLevel [56], which consists of a
Count-Min sketch and a RevSketch. For the Count-Min sketch,
we allocate two rows with 4,000 counters each, and for each
bucket in the Count-Min sketch, we allocate two rows with 250
counters each. For the RevSketch, we allocate two rows with
4,096 counters each to track candidate IP addresses, and partition
a 32-bit IP address into four 8-bit words.
• Superspreader (SS) detection: We use the same setting as DDoS
• Cardinality estimation: We evaluate FM, kMin, and Linear Count-
ing (LC). We allocate four rows with 65,536 counters each for
FM and kMin, and four rows with 10,000 counters each for LC.
• Flow size distribution: We evaluate MRAC and FlowRadar. For
MRAC, we allocate a single row with 4,000 counters; for FlowRadar,
we use the same setting as in HH detection.
• Entropy estimation: We evaluate FlowRadar and UnivMon with
detection.
the same setting as in HH detection.
Workloads: We use five one-hour public traffic traces collected
in 2015 from CAIDA [5]. In our testbed experiments, we evenly
partition the traces and distribute them across hosts. We modify
the MAC addresses of packets, and replay and forward the packets
across hosts. Before each experiment, we load the traces into mem-
ory to eliminate any disk IO overhead. Each host sends out traffic as
fast as possible to test the maximum throughput of SketchVisor. In
practice, the network utilization is often lower, so a higher portion
of network traffic can be handled by the normal path and we expect
to see better performance and accuracy.
We evaluate each sketch-based solution separately to show its
performance gain with SketchVisor; we do not explicitly evaluate
the combination of multiple sketch-based solutions, yet some of
them (e.g., TwoLevel) comprise multiple sketches by design. The
data plane reports measurement results to the controller in one-
second epochs. In each epoch, we find that each host generates
around 30K-70K flows, 370K-480K packets, and 260MB-330MB traf-
fic. We repeat each experiment 10 times and report the average of
all trials across all epochs. We find that the standard error of each
trial is insignificant and only deviates from the average by at most
5%, so we omit error bars in our plots.
Metrics: We consider the following metrics:
• Throughput: the total traffic volume processed per second (it
can be transformed into the packet rate, as the average packet
size in our dataset is 769 bytes).
• Recall: the ratio of true instances reported.
• Precision: the ratio of reported true instances.
• Relative error: 1
n
n−1
|vi− ˆvi |
z
vi
i =0
and ˆvi is the estimate of i.
• Mean Relative Difference (MRD): 1
z
where vi is the true value of i
|ni− ˆni |
(ni + ˆni)/2, where z is
i =1
the maximum flow size, and ni and ˆni are the true and estimated
numbers of flows with size i, respectively.
Throughput is used for all tasks, while the remaining metrics
are accuracy-related and are used based on the nature of the traffic
statistics:
• HH, HC, DDoS, SS: recall, precision, relative error.
• Cardinality, entropy: relative error.
• Flow size distribution: MRD.
7.2 Throughput
We evaluate the throughput of SketchVisor by deploying different
sketch-based solutions in the normal path. We compare three
alternatives: (i) NoFastPath, which only executes the normal path
without the fast path, (ii) MGFastPath, which uses the original
Misra-Gries’s top-k algorithm in the fast path, (iii) SketchVisor,
which uses our proposed top-k algorithm in the fast path.
Figure 6(a) shows the testbed results. SketchVisor achieves al-
most 10Gbps for all sketches. NoFastPath only achieves almost
10Gbps for MRAC and from 1.32Gbps to 6.41Gbps for others. MG-
FastPath is faster than NoFastPath, but still achieves no more than
5Gbps for four out of nine sketches. Figure 6(b) shows the in-
memory tester results. NoFastPath and MGFastPath still cannot
achieve 10Gbps for most sketches. In contrast, SketchVisor achieves
over 17Gbps for all sketches, and almost 40Gbps for MRAC in par-
ticular. Note that this result is measured in a single CPU core and is
much higher than five-core results (without the fast path) in §2. We
can further boost the throughput by parallelizing the normal path
and fast path with multiple CPU cores and merging their results
later in the control plane. Our results show that two CPU cores are
sufficient to achieve above 40Gbps for all sketches (not shown in
the figure).
7.3 Accuracy
We evaluate the accuracy of SketchVisor. We compare five alterna-
tives: (i) NoRecovery (NR), which only uses the normal path results
and discards the fast path results, (ii) LowerRecovery (LR), which
only combines the lower-bound estimates in the fast path with the
normal path results, (iii) UpperRecovery (UR), which only combines
the upper-bound estimates in the fast path with the normal path
results, (iv) SketchVisor, and (v) Ideal, which uses the normal path
to process all traffic, without adding extra errors due to the fast path
(i.e., all errors come from sketches themselves). To compute the
SIGCOMM ’17, August 21−25, 2017, Los Angeles, CA, USA
Huang et al.
(a) Testbed result
(b) In-memory tester result
Figure 6: Throughput of different sketch-based solutions.
(a) HH Recall
(b) HH Precision
(c) HH Relative error