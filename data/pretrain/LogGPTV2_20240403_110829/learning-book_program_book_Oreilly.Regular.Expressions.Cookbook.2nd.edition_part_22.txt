If MatchResult.Success Then
MatchStart = MatchResult .Index
MatchLength = MatchResult.Length
End If
Java
int matchStart, natchLength = -1;
Pattern regex = Pattern.compile("\\d+*);
Matcher regexMatcher = regex,matcher(subjectString);
1f (regexMatcher.find())(
matchStart = regexMatcher start ();
matchLength = regexMatcher ,end() - matchStart;
JavaScript
var matchstart = -1;
var matchlength = -1;
var match = /\d+/ ,exec(subject);
if (match) {
matchstart = match.index;
matchlength = match[o].length;
PHP
1f (preg_match(′/^\d+/', $subject, $groups, PREG_oFFSET_CAPTURE)) {
$matchstart = $groups[o][1];
$matchlength = strlen($groups[o][o]);
Perl
1f ($subject =~ n/\d+/g) {
$matchstart = $-[o];
$matchlength = $+[0] - $-[0];
Python
For quick one-off matches, you can use the global function:
matchobj = re search(r"\d+", subject)
if matchobj:
matchstart = matchobj-start()
matchlength = matchobj.end()
- matchstart
To use the same regex repeatedly, use a compiled object:
152 |Chapter 3: Programming with Regular Expressions
---
## Page 169
reobj = re.compile(r*\d+")
matchobj = reobj -search(subject)
1f natchobj:
matchstart = matchobj -start()
matchlength = natchobj.end() - matchstart
Ruby
You can use the =α operator and its magic $α variable:
if subject =~ /regex pattern/
matchstart = $~.begin()
matchlength = $~.end() - matchstart
end
Alternatively, you can call the match method on a Regexp object:
matchobj = /regex pattern/,match(subject)
if matchobj
matchstart = matchobj-begin()
matchlength = matchobj.end() - matchstart
end
Discussion
NET
To get the match index and length, we use the same Regex,Match() method described
in the previous recipe. This time, we use the Index and Length properties of the Match
object returned by Regex.,Match().
Index is the index in the subject string at which the regex match begins. If the regex
match begins at the start of the string, Index will be zero. If the match starts at the
second character in the string, Index will be one. The maximum value for Index is
the length of the string. That can happen when the regex finds a zero-length match at
the endof the string. For example, the regex consisting solely of the end-of-sring anchor
\Z always matches at the end of the string.
Length indicates the number of characters that were matched. It is possible for a valid
boundary b will find a zero-lengrh match at the start of the first word in the string.
match to be zero characters long. For example, the regex consisting only of the word
If the match attempt fails, Regex.Match() still returms a Match object. Its Index and
Length properties wil both be zero. These values can also happen with a successul
match. The regex consisting of the start-of-string anchor <\A: will find a zero-length
match at the start of the string. Thus, you cannot rely on Match.Index or
Match.Length to indicate whether the match attempt was successful. Use Match
.Success instead.
3.8 Determine the Position and Length of the Match | 153
---
## Page 170
Java
To get the position and length of the match, call Matcher ,find() as described in the
previous recipe. When find() returms true, call Matcher start() without any parame-
ters to obtain the index of the first character that is part of the regex match. Call
end() without any parameters to get the index of the first character after the match.
Subtract the start from the end to get the length of the match, which can be zero. If you
call start() or end() without a prior call to find(), youll get an IllegalStateException.
JavaScript
Call the exec() method on a regexp object to get an array with details about the match
This array has a few additional properties. The index property stores the position in
the subject string at which the regex match begins. If the match begins at the start of
the string, Iindex will be zero. Element zero in the array holds a string with the overall
ru ago ua au auap on us neoadod ulua aa oe xaa
If the regular expression cannot match the string at all, regexp-exec () returns nul1.
Do not use the lastIndex property of the array retumed by exec() to determine the
ending position of the match. In a strict JavaScript implementation, the lastIndex does
not exist in the returned array at all, but only in the regexp object itself. You shouldn’t
use regexp.lastIndex either. It is unreliable, due to cross-browser differences (see
Recipe 3.11 for more details). Instead, simply add up match.index and
match[o].length to determine where the regex match ended.
PHP
The previous recipe explains how you can get the text matched by the regular expres-
sion by passing a third parameter to preg_match(). You can get the position of the match
by passing the constant PREG_oFFSET_CAPTURE as a fourth parameter. This parameter
changes what preg_natch() stores in the third parameter when it returms 1.
When you either omit the fourth parameter or set it to zero, the variable passed as the
 se ndviasoaadssd no uu sus po ee ue saaa aeed p
fourth parameter, the variable receives an array of arrays. Element zero in the overall
array is still the overall match (see the preceding recipe), and elements one and beyond
are still capuring groups one and beyond (see the next recipe) But instead of holing
a sting with the text matched by the regex or a capruring group, the element holds an
array with two values: the text that was matched and the position in the string at which
it was matched.
To get the details of the overall match, subelement zero of element zero gives us the
text matched by the regex. We pass this to the strlen() function to calculate its length.
Subelement one of element zero holds aninteger with the position in the subject string
at which the match starts.
154 | Chapter3: Programming with RegularExpressions
---
## Page 171
Perl
Perl stores the position where the match of each capturing group starts in the array
@- and the position where each group ends in @-. The overall regex match is group
number zero. You can get starting position of the overall match with $-[o] and the
ending position with $+[o].
Python
The start() method of μatchobject returms the position in the string at which the
regular expression match begins. The end() method returns the position of the first
character after the match. Both methods return the same value when a zero-length
regular expression match is found.
You can pass a parameter to start() and end() to retrieve the range of text matched by
one of the capturing groups in the regular expressions. Call start (1) for the first cap-
turing group, end(2) for the second group, and so on. Python supports up to 99 cap-
turing groups. Group number O is the overall regular expression match. Any number
other than zero up to the number of capturing groups in the regular expression (with
99 being the ceiling) causes start() and end() to raise an IndexError exception. If the
group number is valid but the group did not participate in the regex match, start()
and end() both retum -1 for that group.
If you want to store both the starting and ending positions in a tuple, call the span()
method on the match object.
Ruby
Recipe 3.5 uses the =α operator to find the first regex match in a string. A side effect of
this operator is that it fills the special α variable with an instance of the MatchData class.
This variable is thread-local and method-local. That means you can use the contents
of this variable until your method exits or until the next time you use the =α operator
in your method, without worrying that another thread or another method in your
thread will overwrite it.
If you want to keep the details of multiple regex matches, call the match() method on
a Regexp object. This method takes a subject string as its only parameter. It returns a
MatchData instance when a match can be found, or nil otherwise. It also sets the $°
variable to the same Matchobject instance, but does not overwrite other Matchobject
instances stored in other variables.
The MatchData object stores all the details about a regular expression match. Recipes
3.7 and 3.9 explain how to get the text matched by the regular expression and by
capturing groups.
The begin() method returns the position in the subject string at which the regex match
begins. end() returms the position of the first character after the regex match.
offset() returms an array with the beginning and ending positions. These three meth-
3.8 Determine the Position and Length of the MatchI 155
---
## Page 172
ods take one parameter. Pass 0 to get the positions of the overall regex match, or pass
a positive number to get the positions of the specified capturing group. For example,
begin(1) retums the start of the first capruring group.
Do not use length() or size() to get the length of the match. Both these methods return
the number of elements in the array that RatchData evaluates to in array context, as
explained in Recipe 3.9.
See Also
Recipe 3.5 shows code to test whether a regex matches a subject string, without re-
trieving the actual match.
Recipe 3.7 shows code to get the text that was actually matched by the regex
Recipe 3.9 shows code to get the text matched by a particular par (capruring group)
of a regex.
3.9RetrievePartoftheMatchedText
Problem
As in Recipe 3.7, you have a regular expression that matches a substring of the subject
text, but this time you want to match just one part of that substring. To isolate the part
u paquosap se uorssadx e[n8au mo o dno8 Suumdeo  pappe nof uem nof
Recipe 2.9.
Forexample, the regular expression http:/([a-z0-9. -]+) matches http:/mregex
cookbook.com in the string Please visit http://wu,regexcookbook,con for more 1nfor
mation. The part of the regex inside the first capturing group matches waregexcook
book,com, and you want to retrieve the domain name captured by the first capturing
group into a string variable.
We'’re using this simple regex to ilustrate the concept of capruring groups. See Chap-
ter 8 for more accurate regular expressions for matching URLs.
Solution
C#
For quick one-off matches, you can use the static call:
string resultString = Regex.Match(subjectString,
anteA[]sdnox((+[-*6-oz-e])//:du
To use the same regex repeatedly, construct a Regex object:
Regex regex0bj = new Regex(*http://([a-z0-9.-]+)");
string resultString = regex0bj -Match(subjectString) .Groups[1].Value;
156 | Chapter 3: Programming with RegularExpressions
---
## Page 173
VB.NET
For quick one-off matches, you can use the static call:
Dim ResultString = Regex,Match (SubjectString,
"http://([a-z0-9 . - ]+)°) -Groups(1) .value
To use the same regex repeatedly, construct a Regex object:
Dim Regex0bj As New Regex("http://([a-z0-9. - ]+)*)
Dim ResultString = Regex0bj .Match(SubjectString) .Groups(1) .Value
Java
String resultString = null;
((+[- *6-oz-e])//:du,)atduo*uxaed = xa8ax uxaed
Matcher regexMatcher = regex,matcher(subjectString);
1f (regexMatcher.find()(
resultString = regexMatcher-group(1);
JavaScript
var result;
var match = /http:</</([a-z0-9 . - ]+)/,exec(subject);
if (match) (
result = match[1];
}else {
result = *";
PHP
1f (preg_match(*%http://([a-z0-9.-]+)%′, $subject, $groups)) {
$result = $groups[1];
}else {
$result - *';
Perl
if ($subject =~ m!http://([a-z0-9. -]+)!) {
}else {
$result = $1;
$result = *';
Python
For quick one-of matches, you can use the global function:
3.9 Retrieve Part ef the Matched Text I 157
---
## Page 174
matchobj = re-search(*http://([a-z0-9.-]+)°, subject)
if matchobj:
result = matchobj -group(1)
else:
result - **
To use the same regex repeatedly, use a compiled object:
reobj = re.compile("http://([a-z0-9.-]+)°)
matchobj = reobj .search(subject)
if match:
result = matchobj -group(1)
else:
result = *"
Ruby
You can use the =α operator and its magic numbered variables, such as $1:
1f subject =~ %r thttp:/([a-z0-9. -]+)!
result = $1
else
result = *"
end
Alternatively, you can call the match method on a Regexp object:
matchobj = %r!http://([a-z0-9. -]+)! match(subject)
if matchobj
result = matchobj[1]
else
result =
end
Discussion
regular expresson and the replacement text to match the same text again, or to inse
Recipe 2.10 and Recipe 2.21 explain how you can use numbered backreferences in the
part of the regex match into the replacement text. You can use the same reference
numbers to retrieve the text matched by one or more capturing groups in your code.
In regular expressions, capturing groups are numbered starting at one. Programming
languages typically start numbering arrays and lists at zero. All programming languages
discussed in this book that store capruring groups in an array or list use the same
numbering for capturing groups as the regular expression, starting at one. The zeroth
element in the array or list is used to store the overall regular expression match. This
means that ifyourregularexpressionhasthreecapuring groups harraystoringher
matches will have four elements. Element zero holds the overall match, and elements
one, rwo, and three store the text matched by the three capruring groups.
---
## Page 175
.NET
To retrieve details about capturing groups, we again resort to the Regex.Match() mem-
ber function, first explained in Recipe 3.7. The returmed Match object has a property
called Groups. This is a collection property of type GroupCollection. The collection
holdsthedetails forall the capruringgroupsinyouregular expression.Groups[1] holds
the details for the first capturing group, Groups[2] the second group, and so on.
The Groups collection holds one Group object for each capturing group. The Group class
has the same properties as the Match class, except for the Groups propery.
Match,Groups[1].value returns the text matched by the first capturing group, in the
Same way that Match.Value returns the overall regex match. Match,Groups[1] Index and
Match,Groups[1] Length return the starting position and length of the text matched by
the group. See Recipe 3.8 for more details on Index and Length.
Groups[ holdsthedetailsfortheoverallregex match, which are alsoheld bythematch
object directly. Match, Value and Match ,Groups[o] Value are equivalent.
The Groups collection does not throw an exception if you pass an invalid group number.
For example, Groups[ -1] still returms a Group object, but the properties of that Group
object will indicate that the fictional capruring group 1 failed to match. The best way
to test this is to use the Success property. Groups[-1] Success will retum false.
To determine how many capruring groups there are, check Match,Groups.Count. The
Count property follows the same convention as the Count property for all collection
objects in .NET: it returms the number of elements in the collection, which is the highest
allowed index plus one. In our example, the Groups collection holds Groups[o] and
Groups[1]. Groups .Count thus returns 2.
Java
The code for gerting either the text matched by a capruring group or the match details
ofa capuring group is practically the same as that forthe whole regexmatch, asshown
in the preceding two recipes. The group(), start() and end(), methods of the Matcher
class all take one optional parameter. Without this parameter, or with this parameter
set to zero, you get the match or positions of the whole regex match.
If you pass a positive number, you get the details of that capruring group. Groups are
numbered starting at one, just like backreferences in the regular expression itself. If you
specify a number higher than the number of capruring groups in your regular expres-
sion, these three functions throw an IndexoutofBoundsException. If the capruring group
exists but did not participate in the match, group(n) retums null, whereas start(n)
and end(n) both returm -1.
JavaScript