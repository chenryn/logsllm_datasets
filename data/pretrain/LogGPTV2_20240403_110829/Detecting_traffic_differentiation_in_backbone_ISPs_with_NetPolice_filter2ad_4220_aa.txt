title:Detecting traffic differentiation in backbone ISPs with NetPolice
author:Ying Zhang and
Zhuoqing Morley Mao and
Ming Zhang
Detecting Trafﬁc Differentiation in Backbone ISPs with
NetPolice
Ying Zhang
University of Michigan
2260 Hayward Street
Ann Arbor, MI, USA
PI:EMAIL
Zhuoqing Morley Mao
University of Michigan
2260 Hayward Street
Ann Arbor, MI, USA
PI:EMAIL
Ming Zhang
Microsoft Research
One Microsoft Way
Redmond, WA, USA
PI:EMAIL
ABSTRACT
Trafﬁc differentiations are known to be found at the edge of the
Internet in broadband ISPs and wireless carriers
[13, 2]. The
ability to detect trafﬁc differentiations is essential for customers to
develop effective strategies for improving their application perfor-
mance. We build a system, called NetPolice, that enables detection
of content- and routing-based differentiations in backbone ISPs.
NetPolice is easy to deploy since it only relies on loss measurement
launched from end hosts. The key challenges in building NetPo-
lice include selecting an appropriate set of probing destinations and
ensuring the robustness of detection results to measurement noise.
We use NetPolice to study 18 large ISPs spanning 3 major conti-
nents over 10 weeks in 2008. Our work provides concrete evidence
of trafﬁc differentiations based on application types and neighbor
ASes. We identify 4 ISPs that exhibit large degree of differentiation
on 4 applications and 10 ISPs that perform previous-AS hop based
differentiation, resulting in up to 5% actual loss rate differences.
The signiﬁcance of differences increases with network load. Some
ISPs simply differentiate trafﬁc based on port numbers irrespec-
tive of packet payload and the differentiation policies may only be
partially deployed within their networks. We also ﬁnd strong corre-
lation between performance differences and Type-of-Service value
differences in the trafﬁc.
Categories and Subject Descriptors: C.2.5 COMPUTER-
COMMUNICATION NETWORKS: Local and Wide-Area Net-
works
General Terms: Measurement, Experimentation
Keywords: Internet measurement, Trafﬁc differentiation
1.
INTRODUCTION
Since its early days, Internet is designed under the end-to-end
principle which argues for intelligent end systems and a “simple”
network. Under this principle, networks deliver trafﬁc with best
effort and do not treat trafﬁc preferentially based on various prop-
erties such as IP address, port number, or packet content [27]. In
recent years, a variety of new applications have emerged and pro-
liferated on the Internet. Some require high bandwidth (e.g., peer-
to-peer ﬁle sharing and video streaming) while others require low
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’09, November 4–6, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-770-7/09/11 ...$10.00.
latency and loss rate (e.g., voice-over-IP and online gaming). Such
trend has inspired ISPs to perform various types of trafﬁc shaping
to manage network resource usage and introduce tiered services to
meet the requirements of different customers and applications.
Residential broadband ISPs are known to treat trafﬁc differently,
e.g., by limiting the bandwidth usage of peer-to-peer ﬁle sharing ap-
plications [13]. Cellular network carriers have also been reported
to restrict the usage of video streaming services to preserve their
limited wireless spectrum [2]. Researchers have proposed various
techniques for detecting trafﬁc differentiation. Beverly et al. pre-
sented one of the ﬁrst measurement studies of port blocking be-
havior from the edge of the Internet [8]. POPI is another tool for
determining router trafﬁc differentiation policy based on port num-
bers via end-host measurements [19]. More recently, Dischinger
et al. developed tests for detecting whether broadband ISPs rate-
limit or block BitTorrent trafﬁc [13]. Besides these active measure-
ment techniques, Tariq et al. proposed to identify differentiation
by applying statistical method to passive measurements from end
hosts [32]. Yet so far, there has been no detailed and comprehensive
study on the current practice of trafﬁc differentiation inside the In-
ternet core. Trafﬁc differentiation in the core arguably has a much
wider scope of impact, as such policies affect much more trafﬁc
compared to the policies near the edge of the Internet.
In this paper, we consider the problem of detecting trafﬁc dif-
ferentiation in backbone ISPs. Different types of trafﬁc may expe-
rience different performance within the same ISP network due to
various reasons. An ISP may “passively” throttle the trafﬁc from
a neighbor (e.g., a peer) by carrying the trafﬁc over a low-capacity
link, since it may not have the economic incentive to provision or
upgrade the link [4]. It may also “actively” prevent the trafﬁc of
an application (e.g., BitTorrent) from disrupting other trafﬁc via
weighted fair queuing when the network is congested.
Regardless of the actual reasons behind the performance differ-
ences, it is important for customers to be able to reason about the
behaviors of their ISPs. The ability to detect trafﬁc differentiation
enables customers to develop appropriate strategies for improving
their application performance. For instance, large content providers
strive to ensure their Internet applications outperform those offered
by their competitors. If a content provider knows the average loss
rate of its trafﬁc traversing a particular ISP is twice that of its com-
petitor, it may want to negotiate better service level agreements
(SLA) with that ISP. Small customers will also beneﬁt from such
differentiation information. For instance, they may change port
numbers or encrypt packets to circumvent content-based differen-
tiation employed by their ISP.
Most ISPs do not reveal the details of their network policies and
conﬁgurations. Realizing this problem, we aim to develop an end-
host based system that can detect trafﬁc differentiation without any
103Type
Packet
headers
Application
layer info
Trafﬁc be-
havior
Routing
info
Available
resources
Examples
source & destination port numbers, protocol
type
application headers (e.g., HTTP header, BitTor-
rent header), application payload
ﬂow rate, ﬂow duration, packet size, packet in-
terval
previous-hop AS, next-hop AS, source & desti-
nation IP addresses
queue length,
memory
link utilization, router load &
Table 1: Information commonly used for trafﬁc differentiation.
ISP cooperation. Such a system is not only easily deployable but
also applicable to many different ISPs. To build such a system,
we face two key challenges:
i) unlike in the case of broadband
ISPs, most end hosts are not directly connected to backbone ISPs.
We need to intelligently select probing destinations to cover the
relevant internal paths of backbone ISPs while complying with the
requirement of limited network and CPU resources on end hosts;
ii) measurement data taken from end host is susceptible to various
types of noise on the host or in the network. We need to ensure our
detection results are not distorted by noise.
NetPolice is the ﬁrst operational system that can detect trafﬁc
differentiation in backbone ISPs by accurately and scalably mon-
itoring packet loss behavior. It relies on an intelligent path selec-
tion scheme to detect both content- and routing-based differenti-
ation while systematically balancing path coverage and probing
overhead.
It leverages statistical hypothesis tests to identify sig-
niﬁcant loss rate differences between different types of trafﬁc mea-
sured along the same ISP internal paths after discounting the effects
of measurement noise. Furthermore, it uses a novel technique for
cross-validating the statistical test results and the Type-of-Service
(TOS) value set by ISPs.
By studying 18 large ISPs spanning 3 major continents over a
period of 10 weeks in 2008, NetPolice provides concrete evidence
of trafﬁc differentiation based on application types and neighbor
ASes. We identiﬁed 4 ISPs that exhibit large degree of differenti-
ation on VoIP, BitTorrent, PPLive, and SMTP trafﬁc compared to
HTTP trafﬁc. We also identiﬁed 10 ISPs that treat trafﬁc differ-
ently based on its previous-hop ASes, reﬂecting different business
contracts. The signiﬁcance of differentiation increases with net-
work load, suggesting that differentiation is likely to be triggered
by resource competition. The actual loss rate difference between
certain pairs of applications or previous-hop ASes can exceed 5%,
large enough to impair the performance of many TCP-based appli-
cations. Interestingly, we ﬁnd a few ISPs simply rely on port num-
bers to perform trafﬁc differentiation irrespective of actual payload.
These ISPs may apply differentiation policies only to a subset of
routers in their networks. We further validate our detection results
on paths where we have two-ended control.
2. TRAFFIC DIFFERENTIATION
An ISP may use various information in trafﬁc and routers to con-
struct differentiation policies. Table 1 enumerates a list of such
potential factors [35]. First, an ISP may provide differentiated ser-
vices based on the application type for security or business rea-
sons.
It is well-known that broadband ISPs drop certain SMTP
trafﬁc to ﬁght spams and throttle P2P trafﬁc to manage bandwidth
usage. Application types can be determined from packet header
ﬁelds or application layer information [24]. Even with encrypted
trafﬁc, there are sophisticated techniques that can infer application
action: per-hop queuing/dropping
action: packet marking
Ingress router
Internal routers
ISP
Egress router
Figure 1: One common implementation of differentiation.
types by identifying certain trafﬁc behavior [34]. Second, an ISP
can differentiate trafﬁc according to routing information, reﬂecting
distinct business contracts with its customers and peers. An ISP
may assign high priority to trafﬁc from customers who pay for pre-
mium services or assign low priority to trafﬁc from peers. This type
of differentiation can be applied based on the previous-hop or next-
hop ASes, which can be easily extracted from packet headers and
routing state. Third, an ISP may enforce differentiation policies
according to available resources. Using the link utilization infor-
mation readily available from SNMP [11], it may slow down trafﬁc
with low priority to preserve sufﬁcient bandwidth for other trafﬁc.
It is feasible to implement trafﬁc differentiation in a backbone
network with many high-speed links. Today’s router already sup-
ports various queuing mechanisms to fulﬁll the need of trafﬁc en-
gineering, quality of service, and security guarantees. Figure 1 il-
lustrates a common architecture for implementing differentiation
within a backbone ISP. The ingress routers perform trafﬁc classi-
ﬁcation by marking packets according to packet header ﬁelds and
routing information, such as port numbers and previous-hop ASes.
The marking is usually applied to the Type-of-Service (TOS) ﬁeld
in the IP header. The internal routers perform trafﬁc shaping ac-
cording to the TOS value in the packets [17]. There are various
queuing and dropping mechanisms that provide different levels of
service to trafﬁc, e.g., priority queuing, proportional share schedul-
ing, and policing [10]. These mechanisms differ in details of how
and when differentiation is carried out. In §6.7, we demonstrate
trafﬁc differentiation can be easily implemented on today’s com-
mercial routers in testbed experiments.
Other than the router marking-based mechanisms using packet
header information, ISPs may perform deep packet inspection
(DPI) [14] to classify application types according to packet con-
tent. Some DPI devices can perform pattern matching in packet
payload with hardware support for 100 Gps links [1, 12]. Because
DPI devices can be quite expensive, they are usually deployed only
at selected locations.
In this work, we examine all types of differentiation listed in
Table 1 except for the one based on trafﬁc behavior (Table 1 row
4) due to limitations of end-host based probing (§3.2).
In fact,
behavior-based differentiation could be expensive to implement by
ISPs due to the required per-ﬂow state information and potentially
high false positives. Our goal of detecting these four types of dif-
ferentiation guides the design of path selection and probe packet
composition in NetPolice. By providing concrete evidence of dif-
ferentiation, we hope to stimulate more research to fully understand
possible differentiation policies in backbone ISPs.
3. METHODOLOGY
NetPolice detects trafﬁc differentiation inside a particular ISP by
launching probes from a distributed set of end systems. For this
purpose, we have to decide what paths to measure, how to measure
104Source s
Source 
Source s
AS  Pre1 AS Pre2
ing
ISP      I
egr
a1
a2
ISP     I
ISP      I
AS Nxt1 AS Nxt2
(a)
Destination d
(b)
Destination d
(c)
Figure 2: Detecting various types of differentiation with end-host
based probing
each path, and how to identify differentiation based on measure-
ment results. We address these three issues below.
3.1 Path selection
NetPolice is designed to detect trafﬁc differentiation based on
packet headers, application layer information, and routing infor-
mation (described in Table 1). Figure 2 illustrates how NetPolice
uses measurements from end systems to identify differentiation in
ISP I. In Figure 2(a), an end host probes two paths to different des-
tinations, sharing the same ingress and egress within ISP I, but di-
verging into two distinct next-hop ASes after leaving the egress. By
comparing the performance of the two internal paths between the
ingress and egress of ISP I, NetPolice can determine whether ISP I
treats trafﬁc differently based on the next-hop ASes. Similarly,
Figure 2(b) shows how NetPolice detects differentiation based on
previous-hop ASes. In Figure 2(c), an end host probes a path that
traverses the same ingress and egress of ISP I to the same desti-
nation. By comparing the internal path performance measured by
packets of different applications (e.g., a1 vs. a2), NetPolice can
detect differentiation based on content, such as packet headers and
application layer information. We leave the discussion of resource-
based differentiation to §6.5.
To detect trafﬁc differentiation inside an ISP, we devise an in-
telligent path selection strategy to ensure good coverage and low
overhead. On the one hand, a backbone ISP typically consists of
multiple PoPs (Points of Presence) at many geographic locations.
We want to cover as many distinct PoP pairs as possible in order
to quantify the scope of trafﬁc differentiation policies inside the
ISP. On the other hand, NetPolice relies on end hosts to perform
measurements. While this makes NetPolice easily deployable and
applicable to different ISPs, we must aggressively reduce the mea-
surement overhead to comply with the requirement of limited CPU
and network resources at each host.
Given a target ISP, a list of probing sources, and all the des-
tination preﬁxes on the Internet, a naive approach is to probe all
the preﬁxes from all the sources. This may lead to both wasteful
probes that do not traverse the target ISP and redundant probes that
traverse the same internal paths multiple times. To avoid these two
problems, we frame the path selection problem as follows.
1. Each three-tuple (src, ingress, egress) is traversed at least
R times by probes to different destinations.
2. Each three-tuple (ingress, egress, dst) is traversed at least
R times by probes from different sources;
3. A probing source does not send more than m probes.
Here, src is a probing source, dst is a destination preﬁx, and
ingress and egress are the PoPs in the ISP.
Conditions 1 and 2 allow us to detect differentiation based on
routing information, e.g., previous-hop and next-hop ASes. We can
also detect content-based differentiation by probing the same path
with packets of different applications. R is a tunable redundancy
factor that determines the tradeoff between probing overhead and
coverage. A larger R will increase not only the chance of detecting
routing-based differentiation but also the amount of probing trafﬁc.
Condition 3 restricts the total number of probes from each source.
Because a source needs to probe each three-tuple many times for
reliably detecting differentiation (explained in §3.3), this condition
ensures it will not take too much time for a source to complete all
the probes.
This problem is an instance of the set covering/packing prob-
lem [18, 23]: given multiple sets over a universe of elements, pick
a subset of input sets such that each element is included at least
R times (covering constraint), and no element is included more
than m times (packing constraint).
In our case, the input sets
are the probes between source-destination pairs, and the elements
are the probers and the three-tuples of (src, ingress, egress) and
(ingress, egress, dst). A probe typically contains all three el-
ement types. This formulation enables us to perform both re-
dundancy elimination and probing load assignment systematically.
While this problem is NP-hard, we use a greedy based approxi-
mation: at each step, we select the probe that covers the most un-
covered elements without exceeding the probing threshold m. This
process continues until all the elements are covered at least R times.
3.2 Loss rate measurement
NetPolice focuses on detecting trafﬁc differentiation that de-
grades application performance. Currently, it measures loss rate
in order to detect differentiation schemes based on rate-limiting in
backbone ISPs. We may extend it to measure other performance
metrics, e.g., delay, by applying the probing techniques developed
in Tulip [22]. We may also extend it to detect the differentiation
schemes used by broadband ISPs, e.g., trafﬁc blocking and TCP
SYN/RST [13].
Given a path, NetPolice measures the loss rate as follows. First,
to reduce probing overhead, NetPolice only probes the hops that
map to an ingress or an egress of a target ISP instead of all the
hops along the path, given that we are only interested in detecting
differentiation inside the ISP. We will describe the details of iden-
tifying the ingress and egress of an ISP in §4. Second, to measure
the loss rate to a particular hop, NetPolice sends probe packets with
pre-computed TTL (Time-to-Live) value which will trigger ICMP
time exceeded response from that hop. In essence, these packets
are similar to traceroute probes. Although an ICMP packet may be
forwarded on a slow path, it will not affect the loss measurement as
long as the packet is not dropped.
Because packet loss may occur in either direction, we use large
probe packets to ensure the measured loss is mostly due to forward
path loss. The assumption is that large probe packets are more
likely to be dropped than small ICMP packets on the reverse path.
This has also been adopted in previous work [22, 20]. To avoid
triggering ICMP rate limiting, NetPolice probes each hop once per
second for 200 times, allowing us to detect loss rate as small as
0.5%. Probing each hop more times increases the sensitivity of
loss rate detection but also the probing overhead. We subtract the
measured loss rate of the ingress from that of the egress to obtain
the loss rate of the internal path. In §5, we describe how to mitigate
the impact of reverse path loss and ICMP rate-limiting on our loss
rate measurements.
105To detect content-based differentiation, we measure loss rate of
an internal path using different application trafﬁc. We select ﬁve
representative applications with distinct QoS (Quality of Service)
requirements: HTTP (default port 80), BitTorrent (P2P ﬁle shar-
ing, port 6881), SMTP (email, port 25), PPLive (video streaming,
port 4004), and VoIP (port 5060). Except for HTTP, the remain-
ing four applications are selected based on how likely they will
be treated differently by backbone ISPs. HTTP, one of the most
commonly-used application, is used as the baseline to compare per-
formance with other applications. ISPs may slow down BitTorrent
and PPLive trafﬁc due their high volumes. Similarly, ISPs may dis-
favor SMTP trafﬁc due to email spam concerns. We also test VoIP
trafﬁc because many ISPs provide their own VoIP service, raising
incentives for preferential treatment.
We construct probe packets with application-speciﬁc content
captured from real application traces. This eliminates any need
to understand the protocols of proprietary applications, such as
PPLive or VoIP. To enable fair comparison between the loss rate
of different applications, all probe packets are chosen to have the
same size.
Because NetPolice relies on TTL-based probes to measure path
performance, it cannot fully mimic the temporal behavior of real
application trafﬁc. If it probes as fast as the packet rate of appli-
cations, it may easily trigger ICMP rate-limiting on routers. An
alternative is to run applications on end hosts and detect differen-
tiation based on observed application performance [32]. However,
such approach requires the participation of a large number of hosts
to cover the internal paths of the backbone ISPs of interest. Fur-
thermore, without directly probing routers, it is challenging to infer
the performance of ISP internal paths purely based on end-to-end
measurements.
3.3 Differentiation detection
NetPolice detects differentiation by observing the performance
differences measured along the same ISP internal path using dif-
ferent types of probe trafﬁc. Due to load variations on a path, the
same type of probes may experience different loss rates at different
times. This suggests we need to take a sufﬁciently large number
of loss rate measurements to ensure that the observed performance
differences accurately reﬂect how an ISP treats different types of
trafﬁc.
We ﬁrst introduce a few notions before describing the details of
our differentiation detection scheme. For a target ISP I, we deﬁne
l{s,d,a,t} to be a loss rate sample measured along an internal path of
ISP I from a probing source s to a destination d, using probes of ap-
plication a at time t. We use the term set to denote a set of samples
that are measured with a particular type of probes. For example,
set{s,d,a} includes all the samples measured along a path from s to
d using probes of application a. Similarly, set{pre,ing,d,a} includes
all the samples measured along the paths traversing previous-hop
AS pre and ingress ing to destination d, using probes of applica-
tion a.
Our basic assumption is that the loss rate samples in a set follow
a particular underlying distribution. This distribution reﬂects how
an ISP treats the corresponding type of trafﬁc. We can then de-
tect differentiation between two types of trafﬁc by comparing the
two corresponding distributions. We use pair{s,d,a1,a2} to denote
two candidate set{s,d,a1} and set{s,d,a2} (see Figure 2(c)). We
can compare the two distributions of an application pair{s,d,a1,a2}
to detect content-based differentiation between a1 and a2. Sim-
ilarly, we use pair{pre1,pre2,ing,d,a} to denote two candidate
set{pre1,ing,d,a} and set{pre2,ing,d,a} (see Figure 2(b)). We can
compare the two distributions of an AS pair{pre1,pre2,ing,d,a} to
Path views
Path Selector
Differentiation 
Detector
Task list
destinations, hops, app.
Prober i