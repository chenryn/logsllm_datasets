(0 rows)
```
#### 4. 分裂范围分区
例如某个分区太大了，想分裂为两个分区，可以使用这种方法  
仅支持范围分区表  
```
split_range_partition(partition      REGCLASS,            -- 分区oid
                      split_value    ANYELEMENT,          -- 分裂值
                      partition_name TEXT DEFAULT NULL)   -- 分裂后新增的分区表名
```
例子  
```
postgres=# \d+ part_test
                                  Table "public.part_test"
  Column  |            Type             | Modifiers | Storage  | Stats target | Description 
----------+-----------------------------+-----------+----------+--------------+-------------
 id       | integer                     |           | plain    |              | 
 info     | text                        |           | extended |              | 
 crt_time | timestamp without time zone | not null  | plain    |              | 
Child tables: part_test_1,
              part_test_10,
              part_test_11,
              part_test_12,
              part_test_13,
              part_test_14,
              part_test_15,
              part_test_16,
              part_test_17,
              part_test_18,
              part_test_19,
              part_test_2,
              part_test_20,
              part_test_21,
              part_test_22,
              part_test_23,
              part_test_24,
              part_test_3,
              part_test_4,
              part_test_5,
              part_test_6,
              part_test_7,
              part_test_8,
              part_test_9
postgres=# \d+ part_test_1
                                 Table "public.part_test_1"
  Column  |            Type             | Modifiers | Storage  | Stats target | Description 
----------+-----------------------------+-----------+----------+--------------+-------------
 id       | integer                     |           | plain    |              | 
 info     | text                        |           | extended |              | 
 crt_time | timestamp without time zone | not null  | plain    |              | 
Check constraints:
    "pathman_part_test_1_3_check" CHECK (crt_time >= '2016-10-25 00:00:00'::timestamp without time zone AND crt_time = '2016-10-25 00:00:00'::timestamp without time zone AND crt_time = '2016-11-10 00:00:00'::timestamp without time zone AND crt_time = '2016-10-25 00:00:00'::timestamp without time zone AND crt_time = '2018-10-25 00:00:00'::timestamp without time zone AND crt_time = '2018-09-25 00:00:00'::timestamp without time zone AND crt_time = '2016-09-25 00:00:00'::timestamp without time zone AND crt_time = '2016-10-25 00:00:00'::timestamp without time zone AND crt_time = '2020-01-01 00:00:00'::timestamp without time zone AND crt_time < '2020-02-01 00:00:00'::timestamp without time zone)
Inherits: part_test
```
#### 9. 删除分区
1\. 删除单个范围分区  
接口如下  
```
drop_range_partition(partition TEXT,   -- 分区名称
                    delete_data BOOLEAN DEFAULT TRUE)  -- 是否删除分区数据，如果false，表示分区数据迁移到主表。  
Drop RANGE partition and all of its data if delete_data is true.
```
例子  
```
删除分区， 数据迁移到主表  
postgres=# select drop_range_partition('part_test_1',false);
NOTICE:  733 rows copied from part_test_1
 drop_range_partition 
----------------------
 part_test_1
(1 row)
postgres=# select drop_range_partition('part_test_2',false);
NOTICE:  720 rows copied from part_test_2
 drop_range_partition 
----------------------
 part_test_2
(1 row)
postgres=# select count(*) from part_test;
 count 
-------
 10000
(1 row)
删除分区，分区数据也删除，不迁移到主表  
postgres=# select drop_range_partition('part_test_3',true);
 drop_range_partition 
----------------------
 part_test_3
(1 row)
postgres=# select count(*) from part_test;
 count 
-------