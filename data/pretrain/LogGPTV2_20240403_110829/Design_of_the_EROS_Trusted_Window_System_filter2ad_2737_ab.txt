### Request Handling and Latency

1. **Non-blocking Requests**:
   - Requests should generally not be blocked pending the completion of other requests. An exception to this rule is for requests that explicitly request blocking.
   - Blocking or queueing requests can lead to priority inversion, which in turn creates covert signaling opportunities, as discussed by Mercer [18].

2. **Low Latency**:
   - Requests executed by the server run on a different schedule than their client. This latency can introduce variance in real-time context switch latency.
   - For the EWS display server, it is more effective to establish a small upper bound on request latency rather than implementing priority queueing solutions that might require multilevel scheduling support from the operating system.

3. **Consistent Processing Latency**:
   - Requests should not incur large variances in processing latency, as such variances can be exploited for both resource denial of service and covert signaling.

### EWS Design Overview

- In the EWS design, the hardware frame buffer and input devices are "owned" by the display server process (Figure 2).
- Each input device has an associated process that waits for hardware-level input events. These events are then reprocessed into canonical form by a helper process, which invokes the display server to "post" the event using a synchronous RPC operation.
- From the display server's perspective, all interactions arrive as remote procedure calls from some process. Requests from device helpers and generic clients are distinguishable due to the distinct capabilities used for RPC invocations.

### Request Processing

- Unlike many other display servers, incoming requests are generally not queued by the EWS display server. Each request is processed immediately and enqueued on the outbound event queue of the receiving client.
- For mouse events, the events are delivered to the client session owning the window where the event occurred. A `MouseDown` event causes all subsequent mouse events until the corresponding `MouseUp` to be delivered to the same window (with exceptions for drag-and-drop operations, discussed in Section 6).

### Queueing Mechanisms

- While the display server does not generally enqueue requests, it does perform queueing for client-requested rendezvous and event delivery.
- When a client issues a `WaitMouseEvent` request, the server checks the per-client-session list of undelivered events. If an event exists, it is returned; otherwise, the client request is queued.
- EROS provides a `RETRY` operation that allows the server to redirect the client to a kernel stall queue, controlled by the display server. The desired input event will later wake up the client, which will reissue its request.
- The difference between `RETRY`-based queueing and application-level queueing is significant. Clients queued using `RETRY` are blocked on a kernel queue, ensuring they honor the operating system's scheduling policy. Application-level queue implementations, like X11's request dispatch queue, generally lack access to OS-level priority information and cannot safely reveal dynamic adjustments to priority.

### Sessions

- **Purpose and Hierarchy**:
  - Sessions serve as the means for creating windows and as the unit of containment for mandatory access controls.
  - Sessions are hierarchical, allowing top-level applications to implement their own mandatory control policies within a session, useful for debugging and separation of concerns.
  - The manager can restrict communication across session boundaries but cannot observe internal events and actions of subordinate applications.

- **Session/Window Hierarchy**:
  - Each EWS window is created by performing a `CreateWindow` operation on a `Session` capability.
  - Every session has an associated containing window, and child windows are created within the parent window.
  - Client sessions are hierarchical, and a `SessionCreator` capability can be used to create new sessions with a specified parent window (Figure 3).

- **Isolation and Validation**:
  - Operations in one session are not observable by other sessions, including parent sessions.
  - The `SessionCreator` provides a mechanism for validating isolation, ensuring that sessions created using this capability are exclusively held by the client and cannot be spied on by the parent window owner.

### Mandatory Access Controls

- While EWS does not currently implement mandatory access control, the session system is designed with such controls in mind.
- The unit of mandatory control labeling is the session, and communication between windows is permitted only if a label-checking predicate indicates it is allowed.
- The access predicate function can be implemented by a trusted source, allowing the same mandatory control agent to be used by multiple subsystems and isolating the implementations for assurance purposes.

### Rendering

- **Client-Side Rendering**:
  - To reduce server complexity, EWS implements drawing operations in the client rather than the server.
  - When a client wishes to create a window, it supplies a read-only shared memory region containing a bitmap. The display server maps this region and performs bitblt operations to transfer portions of the bitmap to the physical display.
  - The client renders directly into the bitmap and advises the server of changes via an `UpdateRectangle` request.
  - This design eliminates the channel associated with X11 update notices and allows the server to redraw the frame buffer at login time without communicating with clients.

- **Shared Memory Management**:
  - The client can rescind the shared memory region without notice to the display server. The display server handles invalid memory references by assuming the client has reneged on its interaction contract and rescinding the client session.

### Invisible Windows

- **Support for Isolation**:
  - EWS provides restricted support for invisible windows, which have no backing bitmap and do not receive input events.
  - Invisible windows provide a coordinate space for subordinate client sessions, helping to mitigate event hijacking.

### Interprocess Communication

- **Cut and Paste**:
  - Conventional window systems use a broadcast mechanism for cut and paste, leading to security issues. In EWS, no events are transmitted to the destination until the user performs a "paste" action, and only if the communication is permitted by mandatory access controls.
  - EWS introduces a new type of invisible window to handle cut and paste authority. These windows accept no events, but clicks passing through them result in clipboard authorization.
  - The display server uses a distinguished cursor to indicate when the mouse is above these regions and ensures positive user feedback by requiring the cursor to be visible for a minimum amount of time.

- **Drag and Drop**:
  - EWS provides direct support for drag and drop in the display server. After a `MouseDown` followed by a `MouseMove`, the origin client window can initiate a drag and drop operation, resolving the conflict with the handling of mouse events.

This revised text aims to provide a clearer, more coherent, and professional presentation of the EWS design and its key features.