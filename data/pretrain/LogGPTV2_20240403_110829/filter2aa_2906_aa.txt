# Attacking Oracle with the Metasploit Framework

## Presentation at DEF CON 17

### Who Are We?

#### Chris Gates
- **Role**: Penetration Tester, Security Blogger, and Security Twit
- **Blog**: [Carnal0wnage](http://carnal0wnage.attackresearch.com)
- **Twitter**: @Carnal0wnage
- **More Information**: Search for "Chris Gates + carnal0wnage + maltego"

#### Mario Ceballos
- **Roles**:
  - Vulnerability Researcher/Exploit Developer
  - Metasploit Framework Developer
  - Focus: Auxiliary and Exploit Modules
  - Pentester for a company

### Why Oracle?

Oracle is a frequent target in penetration tests due to its widespread use and potential vulnerabilities. The business model of Oracle allows for free downloads of products, but charges for updates, leading to many outdated and vulnerable installations. This makes it easier to escalate privileges and steal data, often through shells.

### Current Support in Metasploit

- **Exploit Modules**: A few memory corruption modules targeting earlier versions of Oracle and some of its applications.
- **Auxiliary Modules**: Tools for discovering the Service Identifier (SID), identifying the version, performing SQL injection, post-exploitation, and NTLM stealing.

### New Metasploit Support

#### TNS Mixin
- **Functionality**: Handles basic TNS packet structure.
- **Usage**: 
  - `"(CONNECT_DATA=(COMMAND=#{command}))"`
  - Used in auxiliary modules and TNS exploits.

#### ORACLE Mixin
- **Dependencies**:
  - Oracle Instant Client
  - ruby-dbi
  - ruby-oci8
- **Methods**:
  - `connect()`: Establishes a database handle.
  - `disconnect()`: Disconnects all database handles.
  - `prepare_exec()`: Prepares and executes a statement.

#### Example Usage
```ruby
msf auxiliary(sql) > set SQL "select * from global_name"
SQL => select * from global_name
msf auxiliary(sql) > run
[*] Sending SQL...
[*] ORCL.REGRESS.RDBMS.DEV.US.ORACLE.COM
[*] Done...
[*] Auxiliary module execution completed
msf auxiliary(sql) >
```

### Oracle Attack Methodology

To connect to an Oracle database, you need the following:
- IP Address
- Port
- Service Identifier (SID)
- Username/Password

#### Steps in the Attack Methodology

1. **Locate Oracle Systems**
   - **Tools**:
     - **Nmap**: Scan for common Oracle ports (e.g., 1521-1540, 1158, 5560).
       ```bash
       nmap -sV 192.168.0.100 -p 1521
       ```
     - **Google Dorks**: Use specific search terms to find Oracle systems.
       - `intitle:iSQL intitle:Release inurl:isqlplus intitle:10.1 inurl:pls/portal`
       - `"Index of" "Oracle-HTTP-Server" Server at Port "Last modified" 1.3.12`
     - **Yahoo Dorks**: Similar to Google dorks.
       - `intitle:iSQL intitle:Release inurl:isqlplus inurl:pls/portal`
       - `"Oracle-HTTP-Server" Server at Port "Last modified" 1.3.12`

2. **Determine Oracle Version**
   - **Method**: Send a TNS packet with the command `VERSION`.
   - **Example**:
     ```ruby
     msf auxiliary(tnslsnr_version) > set RHOSTS 172.10.1.107-172.10.1.110
     msf auxiliary(tnslsnr_version) > run
     ```

3. **Determine Oracle SID**
   - **Method**: Query the TNS Listener directly or use default SIDs.
   - **Tools**:
     - `sid_enum` and `sid_brute` auxiliary modules.
     - **Example**:
       ```ruby
       msf auxiliary(sid_enum) > run
       msf auxiliary(sid_brute) > run
       ```

4. **Guess/Bruteforce USER/PASS**
   - **Tool**: `brute_login` auxiliary module.
   - **Example**:
     ```ruby
     msf auxiliary(brute_login) > set SID ORCL
     msf auxiliary(brute_login) > run
     ```

5. **Privilege Escalation via SQL Injection**
   - **Vulnerabilities**: Default Oracle packages that can be exploited.
   - **Requirements**:
     - Regular SQLI: `CREATE PROCEDURE` privilege.
     - Cursor SQLI: `CREATE SESSION` privilege.

6. **Manipulate Data/Post-Exploitation**
   - Perform necessary actions on the compromised system.

7. **Cover Tracks**
   - Ensure no traces are left behind after the attack.

### Conclusion

This presentation provides an overview of attacking Oracle databases using the Metasploit Framework, highlighting the tools and techniques available for each step of the attack methodology.