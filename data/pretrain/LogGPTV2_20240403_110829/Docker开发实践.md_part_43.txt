Content-Type: application/json
{
"Resource":"test.txt"
}
用例返回：
HTTP/1.1 200 OK
Content-Type: application/x-tar
{{ TAR STREAM }}
参数：（无）
状态码：（略）
curl操作：
curl -X POST http://localhost:2376/containers/4fa6e0f0c678//copy
B.2 镜像相关API
镜像相关API主要和镜像的操作相对应，包括列出镜像、创建镜像、查看镜像详细信息等。
1. 列出镜像
方法： GET /images/json
用例请求： GET /images/json?all=0 HTTP/1.1
用例返回：
HTTP/1.1 200 OK
Content-Type: application/json
[
{
"RepoTags": [
"ubuntu:12.04",
"ubuntu:precise",
"ubuntu:latest"
],
"Id": "8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c",
"Created": 1365714795,
"Size": 131506275,
"VirtualSize": 131506275
},
...
]
参数
 all：其值为1/True/true或者0/False/false，表示是否返回所有，默认值为false。
附录B Docker API列表 273
 filters ：JSON形式的条件过滤。 1
状态码：（略）
2
curl操作：
curl -X POST http://localhost:2376/ images/json?all=0
3
2. 创建镜像
4
方法：POST /images/create
用例请求：POST /images/create?fromImage=base HTTP/1.1
5
用例返回：
6
HTTP/1.1 200 OK
Content-Type: application/json
{"status":"Pulling..."}
7
{"status":"Pulling", "progress":"1 B/ 100 B", "progressDetail":{"current":1, "total":100}}
{"error":"Invalid..."}
...
9
参数
 fromImage：基础镜像。 8
 fromSrc：导入源，一个可以获得镜像的URL地址。
 repo：仓库。 10
 tag：标签。
 registry：拉取镜像的注册服务器。 10
请求头
11
 X-Registry-Auth – base64-encoded：编码的认证对象。
状态码：（略） 13
curl操作：
14
curl -X POST http://localhost:2376/ images/create?fromImage=base
3. 查看镜像详细信息 15
方法：GET /images/(name)/json
16
用例请求：GET /images/base/json HTTP/1.1
用例返回：
17
HTTP/1.1 200 OK
Content-Type: application/json
18
{
274 附录B Docker API列表
"Created":"2013-03-23T22:24:18.818426-07:00",
"Container":"3d67245a8d72ecf13f33dffac9f79dcdf70f75acb84d308770391510e0c23ad0",
"ContainerConfig":
{
"Hostname":"",
"User":"",
"Memory":0,
"MemorySwap":0,
"AttachStdin":false,
"AttachStdout":false,
"AttachStderr":false,
"PortSpecs":null,
"Tty":true,
"OpenStdin":true,
"StdinOnce":false,
"Env":null,
"Cmd": ["/bin/bash"],
"Dns":null,
"Image":"base",
"Volumes":null,
"VolumesFrom":"",
"WorkingDir":""
},
"Id":"b750fe79269d2ec9a3c593ef05b4332b1d1a02a62b4accb2c21d589ff2f5f2dc",
"Parent":"27cf784147099545",
"Size": 6824592
}
参数：（无）
状态码
 404：无该镜像。
curl操作：
curl -X GET http://localhost:2376/ images/base/json
4. 获得镜像历史
方法：GET /images/(name)/history
用例请求：GET /images/base/history HTTP/1.1
用例返回：
HTTP/1.1 200 OK
Content-Type: application/json
[
{
"Id":"b750fe79269d",
"Created":1364102658,
"CreatedBy":"/bin/bash"
},
附录B Docker API列表 275
{
1
"Id":"27cf78414709",
"Created":1364068391,
"CreatedBy":""
2
}
]
参数：（无） 3
状态码：（略）
4
curl操作：
5
curl -X GET http://localhost:2376/ images/ base/history
5. 推送一个镜像到注册服务器
6
需要注意的是，如果你需要将一个镜像推送到一个私有注册服务器，那么该镜像必须是在引
用该注册服务器域名和端口的库标记过，库名也必须加上URL路径。
7
方法： POST /images/(name)/push
9
用例请求： POST /images/test/push HTTP/1.1
用例返回：
8
HTTP/1.1 200 OK
Content-Type: application/json
10
{"status":"Pushing..."}
{"status":"Pushing", "progress":"1/? (n/a)", "progressDetail":{"current":1}}}
{"error":"Invalid..."}
10
...
参数：（无）
11
状态码：（略）
curl操作： 13
curl -X GET http://localhost:2376/ images/test/push
14
6. 给镜像贴标签并入库
方法：POST /images/(name)/tag 15
用例请求： POST /images/test/tag?repo=myrepo&force=0&tag=v42 HTTP/1.1
16
用例返回：HTTP/1.1 201 OK
参数
17
 repo：镜像签入的库。
 force：其值为1/True/true或者0/False/false，表示是否强制更改，其默认值为false。 18
276 附录B Docker API列表
 tag：新的标签名。
状态码
 201：返回正常。
 400：错误参数。
 404：无该镜像。
 409：冲突。
 500：服务器错误。
curl操作：
curl -X POST http://localhost:2376 /images/test/tag?repo=myrepo&force=0&tag=v42
7. 删除镜像
方法：DELETE /images/(name)
用例请求：DELETE /images/test HTTP/1.1
用例返回：
HTTP/1.1 200 OK
Content-type: application/json
[
{"Untagged":"3e2f21a89f"},
{"Deleted":"3e2f21a89f"},
{"Deleted":"53b4f83ac9"}
]
参数
 force：其值为1/True/true或者0/False/false，默认值为false。
 noprune：其值为1/True/true或者0/False/false，默认值为false。
状态码：（略）
curl操作：
curl -X DELETE http://localhost:2376 /images/test
8. 搜索镜像
方法 ：GET /images/search
用例请求：GET /images/search?term=sshd HTTP/1.1
用例返回：
HTTP/1.1 200 OK
Content-Type: application/json
[
附录B Docker API列表 277
{
1
"description": "",
"is_official": false,
"is_automated": false,
2
"name": "wma55/u1210sshd",
"star_count": 0
},
3
{
"description": "",
"is_official": false,
4
"is_automated": false,
"name": "jdswinbank/sshd",
"star_count": 0
5
},
{
"description": "",
6
"is_official": false,
"is_automated": false,
"name": "vgauthier/sshd",
7
"star_count": 0
}
...
9
]
参数
8
 term：搜索关键字。
状态码：（略） 10
curl操作：
10
curl -X GET http://localhost:2376 //images/search?term=sshd
11
13
14
15
16
17
18
278 前 言
附录 C
参考资料
1. http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-7-ultimate-guide-for-docker-apis
2. https://clusterhq.com/blog/fig-flocker-multi-server-docker-apps/
3. https://docs.clusterhq.com/en/latest/gettingstarted/installation.html
4. http://www.vpsee.com/2013/11/shipyard-a-docker-web-ui/
5. http://vmking.blog.51cto.com/6433018/1537330
6. http://serverascode.com/2014/05/25/docker-shipyard-multihost.html
7. http://shipyard-project.com/docs/quickstart/
8. http://devopscube.com/docker-tutorial-getting-started-with-docker-swarm/
9. http://blog.daocloud.io/swarm_analysis_part1/
10. https://github.com/llitfkitfk/docker-tutorial-cn/blob/master/intro-to-docker-swarm-pt2-config-
options-requirements-cn.md
11. http://technolo-g.com/intro-to-docker-swarm-pt4-demo/
12. http://blog.remmelt.com/2014/12/07/docker-swarm-setup/
13. http://devopscube.com/docker-tutorial-getting-started-with-docker-swarm/
14. https://github.com/docker/docker/issues/9459
15. https://www.docker.com/
16. http://blog.daocloud.io/how-to-master-docker-image/
18. http://soft.zdnet.com.cn/techupdate/2008/0317/772069.shtml
19. http://docs.docker.com/articles/https/
20. http://www.21ops.com/linux/13512.html
21. http://segmentfault.com/a/1190000000801162
附录C 参考资料 279
22. http://blog.csdn.net/wsscy2004/article/details/26279569
1
23. http://market.aliyun.com/products/55528001/jxsc000057.html
24. http://help.aliyun.com/knowledge_detail.htm?knowledgeId=5974865
2
25. https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
26. http://www.expressjs.com.cn/4x/api.html#application
27. http://www.infoq.com/cn/news/2014/09/docker-safe 3
28. http://blog.csdn.net/wangpengqi/article/details/9821227
29. http://laokaddk.blog.51cto.com/368606/674256