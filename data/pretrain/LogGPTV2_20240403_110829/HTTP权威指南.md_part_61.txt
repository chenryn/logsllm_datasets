### 16.2.1 HTTP响应内容的二进制解码

在HTTP响应中，`Content-length: 18572`表示响应体的长度为225字节（十进制）。`Content-language: ar`表明响应的内容语言是阿拉伯语。以下是示例中的二进制数据片段：

```
00100101110100100101001001111101
01010010100111101001111110000110
01010101011100000101010001010011
01011111001000010101111101010...
```

这些二进制数据代表了特定字符编码下的字符。例如，在ISO-8859-6编码下，二进制值`11100001`对应于阿拉伯字母FEH。

#### 图16-1: charset参数的作用
`charset`参数告诉客户端如何将二进制数据转换为可读字符。与汉语和日语不同，阿拉伯语只有28个字符。8位空间可以容纳256个不同的值，足以包含拉丁字符、阿拉伯字符及其他符号。

### 16.2.2 字符集和编码的工作原理

为了将文档中的二进制数据转换为屏幕上的字符，我们需要一种标准方法来描述并应用解码算法。这个过程分为两个步骤：

1. **解码为字符代码**：文档中的二进制数据被转换成字符代码，该代码表示特定编码字符集中的某个编号。例如，二进制值`11100001`在ISO-8859-6编码下对应的字符代码是225。
2. **选择特定字符**：使用字符代码从编码字符集中选择特定字符。在ISO-8859-6中，值225对应阿拉伯字母FEH。

这两个步骤所使用的算法取决于MIME `charset`标记。

#### 示例
- ISO-8859-6 编码的字符集：
  - 65: 大写拉丁字母A
  - 66: 大写拉丁字母B
  - 224: 阿拉伯语中的占位对齐字符
  - 225: 阿拉伯字母FEH
  - 226: 阿拉伯字母QAF
  - 227: 阿拉伯字母KAF

### 16.2.3 错误字符集的影响

如果客户端使用了错误的字符集参数，将会显示乱码字符。例如，对于二进制值`11100001`：

- 如果浏览器认为主体是用ISO-8859-1西欧字符编码的，它会显示带有重音符号的小写拉丁字母“a”。
- 如果浏览器使用ISO-8859-6阿拉伯编码，它会显示阿拉伯字母“FEH”。
- 如果浏览器使用ISO-8859-7希腊编码，它会显示小写的希腊字母“Alpha”。
- 如果浏览器使用ISO-8859-8希伯来编码，它会显示希伯来字母“BET”。

### 16.2.4 标准化的MIME charset值

特定的字符编码方案和已编码字符集组合成一个MIME字符集（MIME charset）。HTTP在`Content-Type`和`Accept-Charset`首部中使用标准化的MIME charset标记。这些值都在IANA注册。表16-1列出了常用的MIME charset编码方案。

#### 表16-1: MIME charset 编码标记

| MIME charset 值 | 描述 |
|-----------------|------|
| us-ascii        | 美国标准ASCII编码，映射7位数值到128个字符。 |
| iso-8859-1      | 对ASCII的8位扩展，支持西欧多种语言。 |
| iso-8859-2      | 对ASCII扩展以包括中欧和东欧语言。 |
| iso-8859-5      | 对ASCII扩展以包括斯拉夫语字符。 |
| iso-8859-6      | 对ASCII扩展以包括阿拉伯语字符。 |
| iso-8859-7      | 对ASCII扩展以包括现代希腊语字符。 |
| iso-8859-8      | 对ASCII扩展以包括希伯来语和意第绪语字符。 |
| iso-8859-15     | 更新了iso-8859-1，添加了法语和芬兰语字母及欧元符号。 |
| iso-2022-jp     | 在日语电子邮件和网页中广泛使用的变长编码方案。 |
| euc-jp          | 变长编码，使用单字节、双字节和三字节序列标识日语字符。 |
| Shift_JIS       | 由微软开发的日语编码，复杂但常用。 |
| koi8-r          | 为俄语设计的8位因特网字符集编码。 |
| utf-8           | 变长编码方案，用于表示Unicode字符。 |
| windows-1252    | 微软Windows的代码页1252，扩展了iso-8859-1。 |

### 16.2.5 Content-Type首部和Charset首部以及META标签

Web服务器通过在`Content-Type`首部中使用`charset`参数来告知客户端字符集：

```http
Content-Type: text/html; charset=iso-2022-jp
```

如果没有显式列出字符集，接收方可能需要从文档内容中推断字符集。对于HTML文档，可以在`<meta>`标签中指定字符集。

#### 示例
```html
<meta http-equiv="Content-Type" content="text/html; charset=iso-2022-jp">
```

如果客户端无法推断出字符编码，通常默认使用ISO-8859-1。

### 16.2.6 Accept-Charset首部

HTTP客户端可以使用`Accept-Charset`请求首部来告知服务器它支持哪些字符编码方案。例如：

```http
Accept-Charset: iso-8859-1, utf-8
```

注意，没有`Content-Charset`这样的响应首部与`Accept-Charset`匹配。响应的字符集是由服务器通过`Content-Type`响应首部的`charset`参数返回的。

### 16.3 多语言字符编码入门

本节介绍客户端和服务器如何在HTTP的`Accept-Charset`首部和`Content-Type`首部的`charset`参数中携带字符编码信息。对于开发国际化应用的程序员来说，理解多语言字符系统非常重要。

#### 16.3.1 字符集术语

以下是一些重要的术语：

- **字符**：书写的最基本单元，如字母、数字、标点等。
- **字形**：字符的图形化形状。
- **编码后的字符**：分配给字符的唯一数字编号。
- **代码空间**：计划用于字符代码值的整数范围。
- **代码宽度**：每个字符代码所用的位数。
- **字符库**：特定工作字符集的一个子集。
- **编码后的字符集**：组成字符库的已编码字符，并为每个字符分配代码空间中的代码。
- **字符编码方案**：把数字化的字符代码编码成一系列二进制码的算法。

#### 16.3.2 字符集命名问题

MIME中的`charset`标记实际上描述的是字符编码方案和编码后的字符集的组合。这种术语的使用有时会引起混淆，因此在阅读标准文档时需要注意其定义。

#### 16.3.3 字符

字符是书写的最基本单元，与字体和风格无关。图16-3展示了同一个字符的不同字形。

---

通过上述优化，文本变得更加清晰、连贯和专业。希望这对你有帮助！