return Error("Failed to open file");
int size = 1 (size);
while (true) {
DWORD bytes = 0;
// error handling omitted
ReadFile(hFile, buffer.get(), size, &bytes, nullptr);
if (bytes)
Chapter 9: Process and Thread Notifications
281
DisplayInfo(buffer.get(), bytes);
// wait a bit before polling again
Sleep(400);
}
// never actually reached
CloseHandle(hFile);
return 0;
}
The DisplayInfo function must make sense of the buffer it’s given. Since all events start with a common
header, the function distinguishes the various events based on the ItemType. After the event has been
dealt with, the Size field in the header indicates where the next event starts:
void DisplayInfo(BYTE* buffer, DWORD size) {
while (size > 0) {
auto header = (ItemHeader*)buffer;
switch (header->Type) {
case ItemType::ProcessExit:
{
DisplayTime(header->Time);
auto info = (ProcessExitInfo*)buffer;
printf("Process %u Exited (Code: %u)\n",
info->ProcessId, info->ExitCode);
break;
}
case ItemType::ProcessCreate:
{
DisplayTime(header->Time);
auto info = (ProcessCreateInfo*)buffer;
std::wstring commandline(info->CommandLine,
info->CommandLineLength);
printf("Process %u Created. Command line: %ws\n",
info->ProcessId, commandline.c_str());
break;
}
}
buffer += header->Size;
size -= header->Size;
}
Chapter 9: Process and Thread Notifications
282
}
To extract the command line properly, the code uses the C++ wstring class constructor that can build a
string based on a pointer and the string length. The DisplayTime helper function formats the time in a
human-readable way:
void DisplayTime(const LARGE_INTEGER& time) {
//
// LARGE_INTEGER and FILETIME have the same size
// representing the same format in our case
//
FILETIME local;
//
// convert to local time first (KeQuerySystemTime(Procise) returns UTC)
//
FileTimeToLocalFileTime((FILETIME*)&time, &local);
SYSTEMTIME st;
FileTimeToSystemTime(&local, &st);
printf("%02d:%02d:%02d.%03d: ",
st.wHour, st.wMinute, st.wSecond, st.wMilliseconds);
}
SYSTEMTIME is a convenient structure to work with, as it contains all ingredients of a date and time. In
the above code, only the time is displayed, but the date components are present as well.
That’s all we need to begin testing the driver and the client.
The driver can be installed and started as done in earlier chapters, similar to the following:
sc create sysmon type= kernel binPath= C:\Test\SysMon.sys
sc start sysmon
Here is some sample output when running SysMonClient.exe:
16:18:51.961: Process 13124 Created. Command line: "C:\Program Files (x86)\Micr\
osoft\Edge\Application\97.0.1072.62\identity_helper.exe" --type=utility --utili\
ty-sub-type=winrt_app_id.mojom.WinrtAppIdService --field-trial-handle=2060,1091\
8786588500781911,4196358801973005731,131072 --lang=en-US --service-sandbox-type\
=none --mojo-platform-channel-handle=5404 /prefetch:8
16:18:51.967: Process 13124 Exited (Code: 3221226029)
16:18:51.969: Process 6216 Created. Command line: "C:\Program Files (x86)\Micro\
soft\Edge\Application\97.0.1072.62\identity_helper.exe" --type=utility --utilit\
Chapter 9: Process and Thread Notifications
283
y-sub-type=winrt_app_id.mojom.WinrtAppIdService --field-trial-handle=2060,10918\
786588500781911,4196358801973005731,131072 --lang=en-US --service-sandbox-type=\
none --mojo-platform-channel-handle=5404 /prefetch:8
16:18:53.836: Thread 12456 Created in process 10720
16:18:58.159: Process 10404 Exited (Code: 1)
16:19:02.033: Process 6216 Exited (Code: 0)
16:19:28.163: Process 9360 Exited (Code: 0)
Thread Notifications
The kernel provides thread creation and destruction callbacks, similarly to process callbacks. The API to
use for registration is PsSetCreateThreadNotifyRoutine and for unregistering there is another API,
PsRemoveCreateThreadNotifyRoutine:
NTSTATUS PsSetCreateThreadNotifyRoutine(
_In_ PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS PsRemoveCreateThreadNotifyRoutine (
_In_ PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine);
The arguments provided to the callback routine are the process ID, thread ID and whether the thread is
being created or destroyed:
typedef void (*PCREATE_THREAD_NOTIFY_ROUTINE)(
_In_ HANDLE ProcessId,
_In_ HANDLE ThreadId,
_In_ BOOLEAN Create);
If a thread is created, the callback is executed by the creator thread; if the thread exits, the callback executes
on that thread.
We’ll extend the existing SysMon driver to receive thread notifications as well as process notifications.
First, we’ll add enum values for thread events and a structure representing the information, all in the
SysMonCommon.h header file:
enum class ItemType : short {
None,
ProcessCreate,
ProcessExit,
ThreadCreate,
ThreadExit
};
struct ThreadCreateInfo : ItemHeader {
Chapter 9: Process and Thread Notifications
284
ULONG ThreadId;
ULONG ProcessId;
};
struct ThreadExitInfo : ThreadCreateInfo {
ULONG ExitCode;
};
It’s convenient to have ThreadExitInfo inherit from ThreadCreateInfo, as they share the thread
and process IDs. It’s certainly not mandatory, but it makes the thread notification callback a bit simpler to
write.
Now we can add the proper registration to DriverEntry, right after registering for process notifications:
status = PsSetCreateThreadNotifyRoutine(OnThreadNotify);
if (!NT_SUCCESS(status)) {
KdPrint((DRIVER_PREFIX "failed to set thread callbacks (0x%08X)\n",
status));
break;
}
Conversley, a call to PsRemoveCreateThreadNotifyRoutine is needed in the Unload routine:
// in SysMonUnload
PsRemoveCreateThreadNotifyRoutine(OnThreadNotify);
The callback routine itself is simpler than the process notification callback, since the event structures have
fixed sizes. Here is the thread callback routine in its entirety:
void OnThreadNotify(HANDLE ProcessId, HANDLE ThreadId, BOOLEAN Create) {
//
// handle create and exit with the same code block, tweaking as needed
//
auto size = Create ? sizeof(FullItem)
: sizeof(FullItem);
auto info = (FullItem*)ExAllocatePoolWithTag(
PagedPool, size, DRIVER_TAG);
if (info == nullptr) {
KdPrint((DRIVER_PREFIX "Failed to allocate memory\n"));
return;
}
auto& item = info->Data;
KeQuerySystemTimePrecise(&item.Time);
Chapter 9: Process and Thread Notifications
285
item.Size = Create ? sizeof(ThreadCreateInfo) : sizeof(ThreadExitInfo);
item.Type = Create ? ItemType::ThreadCreate : ItemType::ThreadExit;
item.ProcessId = HandleToULong(ProcessId);
item.ThreadId = HandleToULong(ThreadId);
if (!Create) {
PETHREAD thread;
if (NT_SUCCESS(PsLookupThreadByThreadId(ThreadId, &thread))) {
item.ExitCode = PsGetThreadExitStatus(thread);
ObDereferenceObject(thread);
}
}
g_State.AddItem(&info->Entry);
}
Most of this code should look pretty familiar. The slightly complex part if retrieving the thread exit code.
PsGetThreadExitStatus can be used for that, but that API requires a thread object pointer rather
than an ID. PsLookupThreadByThreadId is used to obtain the thread object that is passed to
PsGetThreadExitStatus. It’s important to remember to call ObDereferenceObject on the thread
object or else it will linger in memory until the next system restart.
To complete the implementation, we’ll add code to the client that knows how to display thread creation
and destruction (in the switch block inside DisplayInfo):
case ItemType::ThreadCreate:
{
DisplayTime(header->Time);
auto info = (ThreadCreateInfo*)buffer;
printf("Thread %u Created in process %u\n",
info->ThreadId, info->ProcessId);
break;
}
case ItemType::ThreadExit:
{
DisplayTime(header->Time);
auto info = (ThreadExitInfo*)buffer;
printf("Thread %u Exited from process %u (Code: %u)\n",
info->ThreadId, info->ProcessId, info->ExitCode);
break;
}
Here is some sample output given the updated driver and client:
Chapter 9: Process and Thread Notifications
286
16:19:41.500: Thread 10512 Created in process 9304
16:19:41.500: Thread 10512 Exited from process 9304 (Code: 0)
16:19:41.500: Thread 4424 Exited from process 9304 (Code: 0)
16:19:41.501: Thread 10180 Exited from process 9304 (Code: 0)
16:19:41.777: Process 14324 Created. Command line: "C:\WINDOWS\system32\defrag.\
exe" -p bf8 -s 00000000000003BC -b -OnlyPreferred C:
16:19:41.777: Thread 8120 Created in process 14324
16:19:41.780: Process 11572 Created. Command line: \??\C:\WINDOWS\system32\conh\
ost.exe 0xffffffff -ForceV1
16:19:41.780: Thread 7952 Created in process 11572
16:19:41.784: Thread 8748 Created in process 11572
16:19:41.784: Thread 6408 Created in process 11572
Add client code that displays the process image name for thread create and exit.
Windows 10 adds another registration function that provides additional flexibility.
typedef enum _PSCREATETHREADNOTIFYTYPE {
PsCreateThreadNotifyNonSystem = 0,
PsCreateThreadNotifySubsystems = 1
} PSCREATETHREADNOTIFYTYPE;
NTSTATUS PsSetCreateThreadNotifyRoutineEx(
_In_ PSCREATETHREADNOTIFYTYPE NotifyType,
_In_ PVOID NotifyInformation);
// PCREATE_THREAD_NOTIFY_ROUTINE
Using PsCreateThreadNotifyNonSystem indicates the callback for new threads should execute on
the newly created thread, rather than the creator.
Image Load Notifications
The last callback mechanism we’ll look at in this chapter is image load notifications. Whenever a PE image
(EXE, DLL, driver) file loads, the driver can receive a notification.
The PsSetLoadImageNotifyRoutine API registers for these notifications, and PsRemoveImageNo-
tifyRoutine is used for unregistering:
Chapter 9: Process and Thread Notifications
287
NTSTATUS PsSetLoadImageNotifyRoutine(
_In_ PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS PsRemoveLoadImageNotifyRoutine(
_In_ PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine);
The callback function has the following prototype:
typedef void (*PLOAD_IMAGE_NOTIFY_ROUTINE)(
_In_opt_ PUNICODE_STRING FullImageName,
_In_ HANDLE ProcessId,
// pid into which image is being mapped
_In_ PIMAGE_INFO ImageInfo);
Curiously enough, there is no callback mechanism for image unloads.
The FullImageName argument is somewhat tricky. As indicated by the SAL annotation, it’s optional and
can be NULL. Even if it’s not NULL, it doesn’t always produce the correct image file name before Windows
10. The reasons for that are rooted deep in the kernel, it’s I/O system and the file system cache. In most
cases, this works fine, and the format of the path is the internal NT format, starting with something like
“\Device\HadrdiskVolumex\…” rather than “c:\…”. Translation can be done in a few ways, we’ll see one way
when we look at the client code.
The ProcessId argument is the process ID into which the image is loaded. For drivers (kernel modules),
this value is zero.
The ImageInfo argument contains additional information on the image, declared as follows:
#define IMAGE_ADDRESSING_MODE_32BIT
3
typedef struct _IMAGE_INFO {
union {
ULONG Properties;
struct {
ULONG ImageAddressingMode
: 8;
// Code addressing mode
ULONG SystemModeImage
: 1;
// System mode image
ULONG ImageMappedToAllPids : 1;
// Image mapped into all processes
ULONG ExtendedInfoPresent
: 1;
// IMAGE_INFO_EX available
ULONG MachineTypeMismatch
: 1;
// Architecture type mismatch
ULONG resourcesignatureLevel
: 4;
// Signature level
ULONG resourcesignatureType
: 3;
// Signature type
ULONG ImagePartialMap
: 1;
// Nonzero if entire image is not \
mapped
Chapter 9: Process and Thread Notifications
288
ULONG Reserved
: 12;
};
};
PVOID
ImageBase;
ULONG
resourceselector;
SIZE_T
resourcesize;
ULONG
resourcesectionNumber;
} IMAGE_INFO, *PIMAGE_INFO;
Here is quick rundown of the important fields in this structure:
• SystemModeImage - this flag is set for a kernel image, and unset for a user mode image.
• resourcesignatureLevel - signing level for Protected Processes Light (PPL) (Windows 8.1 and later).
See SE_SIGNING_LEVEL_ constants in the WDK.
• resourcesignatureType - signature type for PPL (Windows 8.1 and later). See the SE_IMAGE_SIG-
NATURE_TYPE enumeration in the WDK.
• ImageBase - the virtual address into which the image is loaded.
• ImageSize - the size of the image.
• ExtendedInfoPresent - if this flag is set, then IMAGE_INFO is part of a larger structure, IMAGE_-
INFO_EX, shown here:
typedef struct _IMAGE_INFO_EX {
SIZE_T
Size;
IMAGE_INFO
ImageInfo;
struct _FILE_OBJECT *FileObject;
} IMAGE_INFO_EX, *PIMAGE_INFO_EX;
To access this larger structure, a driver can use the CONTAINING_RECORD macro like so:
if (ImageInfo->ExtendedInfoPresent) {
auto exinfo = CONTAINING_RECORD(ImageInfo, IMAGE_INFO_EX, ImageInfo);
// access FileObject
}
The extended structure adds just one meaningful member - the file object used to open the image. This