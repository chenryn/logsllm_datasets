### Abstract

In cryptography, randomness is essential for various applications, including key generation, initialization vector creation, and key exchange. The security of these cryptographic algorithms and protocols relies on a source of unbiased and uniformly distributed random bits. Practitioners often assume that parties have access to perfect randomness. However, in practice, this assumption is often unfeasible, and random bits are typically generated by Pseudo-Random Number Generators (PRNGs). The security of the system then depends critically on the quality of the (pseudo-)randomness produced. Unfortunately, few PRNGs used in practice have been thoroughly analyzed, making it difficult for practitioners and end users to assess their true security level.

In this thesis, we provide security models for the assessment of PRNGs and propose secure constructions. Specifically, we introduce a new definition of robustness and extend it to address memory attacks and side-channel attacks. On the practical side, we conduct a security evaluation of PRNGs commonly used in practice, such as those embedded in system kernels (e.g., Linux /dev/random) and cryptographic libraries (e.g., OpenSSL and Java SecureRandom). Our analysis reveals potential vulnerabilities in these generators.

**Keywords:** Pseudo-random number generators, security models, robustness, memory attacks, side-channel attacks, Linux /dev/random, OpenSSL, Java SecureRandom.

### Résumé

La génération d'aléa joue un rôle fondamental en cryptographie et en sécurité. Des nombres aléatoires sont nécessaires pour la production de clés cryptographiques, de vecteurs d'initialisation, et pour assurer que les protocoles d'échange de clé atteignent un niveau de sécurité satisfaisant. Dans la pratique, les bits aléatoires sont générés par un processus pseudo-aléatoire, et la sécurité finale du système dépend de manière cruciale de la qualité des bits produits par le générateur. Malgré cela, les générateurs utilisés en pratique n'ont souvent pas fait l'objet d'une analyse de sécurité approfondie, ce qui rend difficile pour les utilisateurs de connaître exactement leur niveau de fiabilité.

Dans cette thèse, nous proposons des modèles de sécurité pour l'analyse de ces générateurs et présentons des constructions prouvées sûres et efficaces répondant à des besoins de sécurité élevés. Nous introduisons notamment une nouvelle notion de robustesse et l'étendons pour couvrir les attaques sur la mémoire et les attaques par canaux cachés. Sur le plan pratique, nous effectuons une analyse de sécurité des générateurs couramment utilisés, tels que ceux intégrés dans les systèmes d'exploitation (e.g., /dev/random sur Linux) et les bibliothèques cryptographiques (e.g., OpenSSL et Java SecureRandom), et nous montrons que ces générateurs contiennent des vulnérabilités potentielles.

**Mots clés :** Générateurs de nombres pseudo-aléatoires, modèles de sécurité, robustesse, attaques contre la mémoire, attaques par canaux cachés, Linux /dev/random, OpenSSL, Java SecureRandom.