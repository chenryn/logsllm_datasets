For example,
好 好 [hao3] /good/well/proper/good to/easy to/very/so/(suffix indicating
completion or readiness)/
字典中的文本文件中一行的格式
繁体简体[拼音] /翻译/翻译/.../
例如，
好 好 [hao3] /good/well/proper/good to/easy to/very/so/(suffix indicating
completion or readiness)/
We store each line as an Entry within the Dictionary package:
我们的Dictionary包里存储的一行Entry：
type Entry struct {
Traditional string
Simplified string
Pinyin string
Translations []string
}
The dictionary itself is just an array of these entries:
字典本身只是一个entry 的数组：
type Dictionary struct {
Entries []*Entry
}
Building the dictionary is easy enough. Just read each line and break the line into
its various bits using simple string methods. Then add the line to the dictionary
slice.
构建字典是很容易的。只要使用简单的字符串方法读取一行然后进行分割。最后添加到dictionary
slice 中。
Looking up entries in this dictionary is straightforward: just search through until
we find the appropriate key. There are about 100,000 entries in this dictionary:
brute force by a linear search is fast enough. If it were necessary, faster storage
and search mechanisms could easily be used.
在这本词典中查找条目非常简单：只要通过搜索直到我们找到合适的答案。在这本字典有10 万左右
的条目：暴力的线性搜索速度不够快。如果有必要，可以使用更快的存储和搜索机制。
The original dictionary grows by people on the Web adding in entries as they see
fit. Consequently it isn't that well organised and contains repetitions and multiple
entries. So looking up any word - either by Pinyin or by English - may return multiple
matches. To cater for this, each lookup returns a "mini dictionary", just those lines
in the full dictionary that match.
原词典发展的人添加条目他们认为网络更适合。所以它不是有条理的和包含了多个重复的条目。因此
查找任何单词 - 无论是通过拼音或英语 - 可能返回多个匹配。为了应付这个问题，每个查询返回一
个“mini dictionary”，只有那些在字典中匹配的。
The Dictionary code is
Dictionary 代码
package dictionary
import (
"bufio"
//"fmt"
"os"
"strings"
)
type Entry struct {
Traditional string
Simplified string
Pinyin string
Translations []string
}
func (de Entry) String() string {
str := de.Traditional + ` ` + de.Simplified + ` ` + de.Pinyin
for _, t := range de.Translations {
str = str + "\n " + t
}
return str
}
type Dictionary struct {
Entries []*Entry
}
func (d *Dictionary) String() string {
str := ""
for n := 0; n < len(d.Entries); n++ {
de := d.Entries[n]
str += de.String() + "\n"
}
return str
}
func (d *Dictionary) LookupPinyin(py string) *Dictionary {
newD := new(Dictionary)
v := make([]*Entry, 0, 100)
for n := 0; n < len(d.Entries); n++ {
de := d.Entries[n]
if de.Pinyin == py {
v = append(v, de)
}
}
newD.Entries = v
return newD
}
func (d *Dictionary) LookupEnglish(eng string) *Dictionary {
newD := new(Dictionary)
v := make([]*Entry, 0, 100)
for n := 0; n < len(d.Entries); n++ {
de := d.Entries[n]
for _, e := range de.Translations {
if e == eng {
v = append(v, de)
}
}
}
newD.Entries = v
return newD
}
func (d *Dictionary) LookupSimplified(simp string) *Dictionary {
newD := new(Dictionary)
v := make([]*Entry, 0, 100)
for n := 0; n < len(d.Entries); n++ {
de := d.Entries[n]
if de.Simplified == simp {
v = append(v, de)
}
}
newD.Entries = v
return newD
}
func (d *Dictionary) Load(path string) {
f, err := os.Open(path)
r := bufio.NewReader(f)
if err != nil {
println(err.Error())
os.Exit(1)
}
v := make([]*Entry, 0, 100000)
numEntries := 0
for {
line, err := r.ReadString('\n')
if err != nil {
break
}
if line[0] == '#' {
continue
}
// fmt.Println(line)
trad, simp, pinyin, translations := parseDictEntry(line)
de := Entry{
Traditional: trad,
Simplified: simp,
Pinyin: pinyin,
Translations: translations}
v = append(v, &de)
numEntries++
}
// fmt.Printf("Num entries %d\n", numEntries)
d.Entries = v
}
func parseDictEntry(line string) (string, string, string, []string) {
// format is
// trad simp [pinyin] /trans/trans/.../
tradEnd := strings.Index(line, " ")
trad := line[0:tradEnd]
line = strings.TrimSpace(line[tradEnd:])
simpEnd := strings.Index(line, " ")
simp := line[0:simpEnd]
line = strings.TrimSpace(line[simpEnd:])
pinyinEnd := strings.Index(line, "]")
pinyin := line[1:pinyinEnd]
line = strings.TrimSpace(line[pinyinEnd+1:])
translations := strings.Split(line, "/")
// includes empty at start and end, so
translations = translations[1 : len(translations)-1]
return trad, simp, pinyin, translations
}
10.5 Flash cards Flash cards
Each individual flash card is of the type Flashcard
每个flash card 的类型Flashcard
type FlashCard struct {
Simplified string
English string
Dictionary *dictionary.Dictionary
}
At present we only store the simplified character and the english translation for
that character. We also have a Dictionary which will contain only one entry for the
entry we will have chosen somewhere.
目前我们只存储简体字符和该字符的英文翻译。我们将有选择性的加入一个entry 到这里的
Dictionary中。
A set of flash cards is defined by the type
flash cards 组的类型
type FlashCards struct {
Name string
CardOrder string
ShowHalf string
Cards []*FlashCard
}
where the CardOrder will be "random" or "sequential" and the ShowHalf will be
"RANDOM_HALF" or "ENGLISH_HALF" or "CHINESE_HALF" to determine which half of a new
card is shown first.
其中CardOrder将是“random”或者“sequential”和ShowHalf将是“RANDOM_HALF”或
“ENGLISH_HALF”或的“CHINESE_HALF”来确定一个新的卡中，意思是中文和英文其中有一个首先被
显示。
The code for flash cards has nothing novel in it. We get data from the client browser
and use JSON to create an object from the form data, and store the set of flashcards
as a JSON string.
flash cards 的代码并没有新意。我们从浏览器客户端获取数据并根据表单的数据使用JSON 来创建
一个对象，并将其存储于flashcards 中作为一个JSON 字符串。
10.6 The Complete Server 完整的服务器
The complete server is
服务器代码如下
/* Server
*/
package main
import (
"fmt"
"io/ioutil"
"net/http"
"os"
"regexp"
"text/template"
)
import (
"dictionary"
"flashcards"
"templatefuncs"
)
var d *dictionary.Dictionary
func main() {
if len(os.Args) != 2 {
fmt.Fprint(os.Stderr, "Usage: ", os.Args[0], ":port\n")
os.Exit(1)
}
port := os.Args[1]
// dictionaryPath := "/var/www/go/chinese/cedict_ts.u8"
dictionaryPath := "cedict_ts.u8"
d = new(dictionary.Dictionary)
d.Load(dictionaryPath)
fmt.Println("Loaded dict", len(d.Entries))
http.HandleFunc("/", listFlashCards)
//fileServer := http.FileServer("/var/www/go/chinese/jscript", "/jscript/")
fileServer := http.StripPrefix("/jscript/", http.FileServer(http.Dir("jscript")))
http.Handle("/jscript/", fileServer)
// fileServer = http.FileServer("/var/www/go/chinese/html", "/html/")
fileServer = http.StripPrefix("/html/", http.FileServer(http.Dir("html")))
http.Handle("/html/", fileServer)
http.HandleFunc("/wordlook", lookupWord)
http.HandleFunc("/flashcards.html", listFlashCards)
http.HandleFunc("/flashcardSets", manageFlashCards)
http.HandleFunc("/searchWord", searchWord)
http.HandleFunc("/addWord", addWord)
http.HandleFunc("/newFlashCardSet", newFlashCardSet)
// deliver requests to the handlers
err := http.ListenAndServe(port, nil)
checkError(err)
// That's it!
}
func indexPage(rw http.ResponseWriter, req *http.Request) {
index, _ := ioutil.ReadFile("html/index.html")
rw.Write([]byte(index))
}
func lookupWord(rw http.ResponseWriter, req *http.Request) {
word := req.FormValue("word")
words := d.LookupEnglish(word)
//t := template.New("PinyinTemplate")
t := template.New("DictionaryEntry.html")
t = t.Funcs(template.FuncMap{"pinyin": templatefuncs.PinyinFormatter})
t, err := t.ParseFiles("html/DictionaryEntry.html")
if err != nil {
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
t.Execute(rw, words)
}
type DictPlus struct {
*dictionary.Dictionary
Word string
CardName string
}
func searchWord(rw http.ResponseWriter, req *http.Request) {
word := req.FormValue("word")
searchType := req.FormValue("searchtype")
cardName := req.FormValue("cardname")
var words *dictionary.Dictionary
var dp []DictPlus
if searchType == "english" {
words = d.LookupEnglish(word)
d1 := DictPlus{Dictionary: words, Word: word, CardName: cardName}
dp = make([]DictPlus, 1)
dp[0] = d1
} else {
words = d.LookupPinyin(word)
numTrans := 0
for _, entry := range words.Entries {
numTrans += len(entry.Translations)
}
dp = make([]DictPlus, numTrans)
idx := 0
for _, entry := range words.Entries {
for _, trans := range entry.Translations {
dict := new(dictionary.Dictionary)
dict.Entries = make([]*dictionary.Entry, 1)
dict.Entries[0] = entry
dp[idx] = DictPlus{
Dictionary: dict,
Word: trans,
CardName: cardName}
idx++
}
}
}
//t := template.New("PinyinTemplate")
t := template.New("ChooseDictionaryEntry.html")
t = t.Funcs(template.FuncMap{"pinyin": templatefuncs.PinyinFormatter})
t, err := t.ParseFiles("html/ChooseDictionaryEntry.html")
if err != nil {
fmt.Println(err.Error())
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
t.Execute(rw, dp)
}
func newFlashCardSet(rw http.ResponseWriter, req *http.Request) {
defer http.Redirect(rw, req, "http:/flashcards.html", 200)
newSet := req.FormValue("NewFlashcard")
fmt.Println("New cards", newSet)
// check against nasties:
b, err := regexp.Match("[/$~]", []byte(newSet))
if err != nil {
return
}
if b {
fmt.Println("No good string")
return
}
flashcards.NewFlashCardSet(newSet)
return
}
func addWord(rw http.ResponseWriter, req *http.Request) {
url := req.URL
fmt.Println("url", url.String())
fmt.Println("query", url.RawQuery)
word := req.FormValue("word")
cardName := req.FormValue("cardname")
simplified := req.FormValue("simplified")
pinyin := req.FormValue("pinyin")
traditional := req.FormValue("traditional")