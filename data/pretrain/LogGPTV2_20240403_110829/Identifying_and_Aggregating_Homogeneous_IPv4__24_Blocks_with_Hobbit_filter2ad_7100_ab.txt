ing common traceroutes and check the relationships be-
4Per-destination load-balancing is often implemented
by installing route-cache entries for each of destinations
[9]. We do not consider them to be distinct. We only
consider route entries for diﬀerent destination networks
to be distinct.
5We use the term “sibling” in that distinct subnets
within a /24 subnet have a common /24 preﬁx (i.e.,
a common parent).
tween the groups.) Nevertheless, we focus on last-hop
routers. Reducing measurement loads (as we describe
in Section 3.4) is not the only reason. More impor-
tantly, the coverage of Hobbit is enhanced when applied
to last-hop routers compared to when applied to entire
traceroutes. We compare how many homogeneous /24s
Hobbit ﬁnds in each case. /24 blocks that have /31s of
which traceroutes are diﬀerent are likely to be homo-
geneous. Among these, we only select the /24s having
diﬀerent last-hop routers for fair comparison. If all the
last-hop routers of a /24 are the same, we can conclude
that it is a homogeneous block without checking the re-
lationships, which is an advantage for the case of when
applied to last-hop routers. We collect the traceroutes
of all the active addresses within the chosen /24s (from
a machine at UMD using Paris-traceroute MDA). We
then apply Hobbit using two metrics, last-hop routers
and entire traceroutes.
In terms of traceroutes, only
70% of the /24s were determined to be homogeneous,
which is quite low considering that we only selected /24s
that are likely to be homogeneous. On the other hand,
92% of the /24s were homogeneous in terms of last-hop
routers. We investigate what causes the diﬀerence.
Load-balancers use hashing to determine the next
hop. Thus there is a chance that load-balanced paths
appear to have hierarchical relationships. If this false
hierarchy appears, Hobbit may fail to recognize the ho-
mogeneity. The question is how often hashing falsely
suggests hierarchy, what it is related to, and how Hob-
bit can control it. We observe that its probability is
closely related to cardinality, that is, the number of dis-
tinct traceroutes (or last-hop routers) towards the ad-
dresses within /24. Figure 3a shows the CDF of the
cardinalities (in terms of traceroutes) of the homoge-
neous /24s that were detected and undetected by Hob-
bit (along with those of all the homogeneous /24s). We
can see that the undetected homogeneous /24s tend to
have higher cardinalities compared to the detected and
all homogeneous /24s. This implies that cardinality in-
ﬂuences the probability of failures. The cardinality of
/24s varies a lot depending upon the metrics that deﬁne
cardinality. Figure 3b shows the CDF of the cardinali-
ties of all the homogeneous /24s in terms of traceroutes,
last-hop routers and sub-paths which indicate the paths
from the routers that are common to all the destinations
within /24 and closest to the /24. As we use smaller
parts of traceroutes, cardinality tends to decrease. One
reason could be that there are multiple load-balancers
on the paths. The cardinality multiplicatively increases
as the number of load-balancers increases. For exam-
ple, if load-balancers L1 and L2 distribute traﬃc across
N1 and N2 paths, the total number of distinct paths
can be up to N1 ∗ N2. In comparison to the cardinal-
ities of entire traceroutes, those of last-hop routers are
very small, and this is why the coverage of Hobbit is en-
hanced by 22% when using last-hop routers compared
to using traceroutes.
154F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 1
 0.8
 0.6
 0.4
 0.2
F
D
C
Detected /24s
Undetected /24s
All /24s
 64
 128
 192
 256
 0
 0
 32
 64
Cardinality
(a)
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Last-hop
Sub-path
Entire path
 160
 192
 224
 96
 128
Cardinality
(b)
Undetected /24s
Detected /24s
All /24s
 64
 192
The Number of Probed Addresses
 128
 256
(c)
Figure 3: CDF of (a) cardinality and (c) the number of probed addresses for detected and undetected homogeneous
/24 blocks by our methodology. (b) CDF of cardinality in diﬀerent metrics, entire traceroute, last-hop router and
sub-path which indicates the path from a common router to destination.
3.2 How many destinations need to be
 40
 35
 30
 25
 20
 15
 10
 5
y
t
i
l
i
a
n
d
r
a
C
 1
 0.95
 0.9
 0.7
 0.4
 0
probed?
Although Hobbit may fail to detect some homoge-
neous blocks depending on the cardinality, the probabil-
ity of failures can be controlled by probing more destina-
tions (because the probability is related to the number
of probed addresses as shown in Figure 3c). The ques-
tion is how many destinations need to be probed for a
certain conﬁdence level. We decide the number of des-
tinations, by computing the probability of failures for
each  pair.
Although the probability function could be theoreti-
cally developed, we rely on empirical analysis in this
paper. We use the traceroute dataset collected for all
active addresses within homogeneous /24s (as described
in Section 3.1). For every combination of the destina-
tions within a homogeneous /24, we can predict whether
Hobbit will determine the /24 to be homogeneous if it
only probes the destinations corresponding to the com-
bination (simply by applying Hobbit to the partial in-
formation corresponding to the combination). All the
combinations that would be determined not to be ho-
mogeneous are failures (and the others are successes),
because all the combinations are chosen from homoge-
neous /24s. By classifying combinations by the num-
ber of destinations within them and cardinality (and
computing the failure ratio in each category), we can
obtain the probability of failures for each  pair. One issue is that
(The
the total number of combinations is excessive.
n
number of combinations for each /24 is
where
i
n is the total number of active addresses within the
/24, and we have data for more than 150k /24s.) To
deal with this, we choose a random sample of all com-
binations such that most of the  pairs have at least 16,588 sample
points6. Figure 4 depicts7 the distribution of degree of
conﬁdence, that is, 1 - failure ratio. As expected, the
(cid:2)n
i=1
(cid:3)
(cid:4)
6We obtain this number by computing the number of
samples required for 99% conﬁdence level, 1% margin
of error, 50% sample proportion estimate and inﬁnite
population size [10].
7The values of some pairs were not depicted because
they have less than 16,588 sample points at a chosen
sampling rate.
 5  10  15  20  25  30  35  40  45  50
The Number of Probed Addresses
Figure 4: Degree of conﬁdence that Hobbit will rec-
ognize a homogeneous /24 block per  pair.
conﬁdence tends to increase as the number of probed
addresses increases and cardinality decreases. We use
this data in deciding when to stop probing (as detailed
in Section 3.5).
3.3 How to select destinations?
Hobbit requires at least 4 active addresses to be eﬀec-
tive. It is because the relationships between less than
4 addresses are always hierarchical no matter how they
are grouped. We also require that every /26 within /24
has at least one active address, so that our result rep-
resents the entire /24. We identify all active addresses
using ZMap ICMP Echo Request dataset, and only se-
lect /24s that meet the criterion. For each chosen /24,
we group the active addresses within it by their /26 pre-
ﬁxes, and then probe each /26 group in a round-robin
fashion. We shuﬄe the order of the /26s to probe at
the end of each round.
3.4 How to identify last-hop routers?
The only information we need to gather by probing
the destinations are their last-hop routers. In order to
eﬃciently identify last-hop routers, we try to infer a hop
count between source and a last-hop router. We send
an ICMP Echo Request to a destination and inspect the
response’s TTL ﬁeld. If we know a default TTL value
of the destination host (that is, the initial TTL value
written by the destination host), we can compute the
hop count between source and destination. Although
155default TTL values are diﬀerent for diﬀerent operating
systems, the values of 64, 128 and 255 are commonplace
[11, 12, 13]. So we consider that a default TTL is 64
if the TTL value of the response (T T Lres) is less than
If 64 ≤ T T Lres  pair,
we probe all the active addresses.
4 MEASUREMENT RESULTS
We measure the homogeneity of /24 blocks using Hob-
bit. We choose 3.37M /24 blocks based on the ZMap
data (Section 3.3), and probe each of them from a ma-
chine located at UMD8. In this section, we present and
analyze the measurement results.
8We probed 64.45M destinations in total, and 54.05M
were responsive. We used a single machine (at UMD)
as a source, and generated a single snapshot.
Classiﬁcation
# of /24 blocks
Not analyzable
Homogeneous
Too few active
840,258 (24.9%)
Unresponsive last-hop
567,439 (16.8%)
Same last-hop router
616,719 (18.2%)
Non-hierarchical
1,153,628 (34.2%)
Diﬀerent but hierarchical
198,292 (5.9%)
Table 1: Measurement results of the homogeneity of /24
4.1 How homogeneous are /24 blocks?
Table 1 shows a summary of measurement results.
There have been /24 blocks that were not analyzable by
Hobbit. Although we only choose /24s having at least
4 active addresses using the ZMap data, some blocks
had less than 4 active addresses when we probed them.
Even when blocks have at least 4 active addresses, if
the number of active addresses are less than required for
achieving a desired conﬁdence level, that is, 95% (ﬁgure
4), we classify the blocks as “Not analyzable”. These
two cases account for about 25% of the /24s we probed.
Despite the large enough number of active addresses,
16.8% of the /24s were not analyzable because none of
their last-hop routers were responsive.
We have found 1.77M homogeneous /24 blocks. About
0.62M blocks had common last-hop routers, and 1.15M
blocks had diﬀerent last-hop routers but their relation-
ships were non-hierarchical. This result reinforces that
per-destination load-balancing is prevalent and it even
changes last-hop routers of destinations, and thus sim-
ply checking whether addresses have a common last-
hop router is not enough for determining homogeneity.
The remaining 0.2M blocks consist of the addresses that
have diﬀerent last-hop routers of which relationships are
hierarchical. Since we probed as many addresses as re-
quired for 95% conﬁdence level, the probability of these
blocks being homogeneous is less than or equal to 5%.
If we consider all these blocks as heterogeneous, we can
conclude that 1.77M out of 1.97M /24s, that is, 90% of
the /24s are homogeneous.
4.2 Analyzing heterogeneous /24s
Strictly speaking, the last category in table 1, a set
of /24s that have diﬀerent last-hop routers but the re-
lationships of their addresses appear to be hierarchi-
cal is a mixture of homogeneous and heterogeneous /24
blocks. There is a non-negligible chance (5%) that the
/24 blocks in the category are homogeneous. We have
examined this category to discover /24s that are “very
likely” to be heterogeneous, and found the criteria that
deﬁne a certain class of /24s that are “very likely” to be
heterogeneous.
The ﬁrst criterion is that, when the addresses within
/24 are grouped by their last-hop routers, the relation-
ship between any pair of the groups is disjoint (i.e., not
inclusive). Second, the groups are aligned. To be spe-
ciﬁc, when each group is represented by a subnet whose
network preﬁx is the longest common preﬁx of the ad-
156Composition
{/25, /25}
{/25, /26, /26}
{/26, /26, /26, /26}
{/25, /26, /27, /27}
{/26, /26, /26, /27, /27}
{/26, /26, /27, /27, /27, /27}
{/25, /26, /27, /28, /28}
{/25, /27, /27, /27, /27}
Ratio
50.48%
20.65%
15.79%
5.92%
4.63%
1.13%
0.81%
0.58%
Table 2: The distribution of homogeneous sub-blocks
within heterogeneous /24 blocks
dresses within group, every subnet contains only the
addresses that are within the corresponding group. For
example, if we observe that the addresses  and  have com-
mon last-hop routers respectively, then we will consider
that X.Y.Z.0/24 is a heterogeneous block, because the
two groups are disjoint and the two corresponding sub-