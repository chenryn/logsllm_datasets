anonymization technique for preserving link (edge) pri-
vacy. In this technique, an edge in the original graph is
replaced by a RW path.
2.2 Anonymization and Utility
Generally, an anonymization scheme can be evaluated
from two perspectives: data utility preservation and re-
sistance to DA attacks. However, most, if not all, existing
graph anonymization works have not been signiﬁcantly
evaluated with respect to their utility or resistance to DA
attacks. On one hand, most existing graph anonymiza-
tion works only conducted limited evaluations on their
utility preservation, e.g., degree distribution, path length
distribution, which are insufﬁcient to understand their
value for high-level data mining tasks and applications,
e.g., sense-making, search for similar users, user classi-
ﬁcation, reliable email, inﬂuence maximization. On the
other hand and more seriously, to the best of our knowl-
edge, no work (including existing DA works) actually
evaluated the resistance of state-of-the-art anonymiza-
tion techniques against modern SDA attacks.
To address these concerns, we comprehensively ana-
lyze the utility of existing graph data anonymization al-
gorithms in this subsection and defer the detailed resis-
tance analysis to Section 4. Before performing the anal-
ysis, we ﬁrst present the used utility metrics, which can
be classiﬁed as graph utility metrics or application utility
metrics.
2.2.1 Graph Utility Metrics
Graph utility captures how the anonymized data pre-
serves fundamental structural properties of the original
graph after applying an anonymization technique. Par-
ticularly, we examine 12 graph utility metrics of existing
anonymization schemes as follows1.
Degree (Deg.), which refers to the degree distribution;
Joint Degree (JD), which refers to the joint degree dis-
tribution of a graph; Effective Diameter (ED), which is
deﬁned as the minimum number of hops in which 90%
of all connected pairs of nodes can reach each other;
Path Length (PL), which refers to the distribution of the
1Without of causing confusion, we interchangeably use node and
user in this paper.
USENIX Association  
24th USENIX Security Symposium  305
3
shortest path lengths between all pairs of users; Local
Clustering Coefﬁcient (LCC) and Global Clustering Co-
efﬁcient (GCC). Clustering coefﬁcient measures the de-
gree to which users in graph data tend to cluster together.
Closeness Centrality (CC), which is deﬁned as the in-
verse of the farness of a user within a graph and mea-
sures how long it takes to spread information from a user
to all other users sequentially; Betweenness Centrality
(BC), which quantiﬁes the number of times a user acts as
a bridge along the shortest path between two other users;
EigenVector (EV). The EV of the adjacency matrix A of a
graph G is a non-zero vector v such that Av = λv, where
λ is some scalar multiplier; Network Constraint (NC),
which measures the extent to which a user links to others
that are already linked to each other; Network Resilience
(NR) [33], which measures how robust a graph is and is
deﬁned as the number of users in the largest connected
component when users are removed from the graph in the
degree decreasing order; and Infectiousness (Infe.) [34],
which measures the number of users infected by a dis-
ease, given that a randomly chosen user is infected and
each infected user transmits this disease to its neighbors
with some infection rate.
2.2.2 Application Utility Metrics
In reality, most data is published/shared for data/network
mining tasks, high-level applications, etc. Therefore, be-
sides examining data’s fundamental structural utility, it is
also crucial to ensure that the anonymized data is useful
for practical applications. Toward this objective, we eval-
uate 7 popular application utility metrics for anonymiza-
tion schemes as follows.
(a) Role eXtraction (RX) [35]. Based on users’ struc-
tural behavior, users in a graph can be labeled as having
different roles, e.g., clique members, periphery-nodes.
RX is an important operation for graph data that is use-
ful for many network mining tasks such as sense-making.
We measure the RX utility of an anonymization scheme
using the method in [35].
(b) Reliable Email (RE) [36]. RE is a whitelisting sys-
tem leveraging users’ neighborhoods to ﬁlter and block
spam emails. To evaluate the structural utility of an
anonymization scheme with respect to RE, we take a
similar method as in [15] to compute the number of users
who can be spammed by a ﬁxed number of compromised
neighbors in a graph.
(c) Inﬂuence Maximization (IM) [37]. The IM prob-
lem seeks to ﬁnd a set of θ users such that these θ users
have the maximum inﬂuence to the network under some
inﬂuence propagation model. IM is important for many
real world applications, e.g., advertisements.
(d) Minimum-sized Inﬂuential Node Set (MINS) [38].
MINS is another popular and important application util-
ity metric that leverages a graph’s structure to identify
the minimum-sized set of inﬂuential nodes, such that all
other nodes in the network could be inﬂuenced with a
probability above a threshold. MINS can be used in
many meaningful applications, e.g., social problems al-
leviation, new products promotion.
(e) Community Detection (CD) [39]. CD is a popular
application on graph data which enables comprehensive
analysis of a network structure and supports other appli-
cations, e.g., classiﬁcation, routing (information propa-
gation). To measure the CD utility of an anonymization
scheme, we employ the hierarchical agglomeration algo-
rithm proposed in [39].
(f) Secure Routing (SR) [40]. The structure of graph
data can also be used to improve the performance of
secure routing for systems such as P2P systems. For
our purpose, we evaluate the SR application utility of
an anonymization scheme using the method designed
in [40].
(g) Sybil Detection (SD) [41]. Sybil attacks are a se-
rious threat to both centralized and distributed systems,
e.g., recommendation systems, anonymity systems. For
our purpose, we evaluate the SD application utility of an
anonymization scheme using the method in [41].
2.2.3 Anonymization vs Utility
We are ready to analyze the utility performance of exist-
ing graph data anonymization techniques. We summa-
rize the graph and application utilities, and Resistance
to SDA attacks (R2SDA) (e.g., [2, 3, 25, 27]) of existing
graph anonymization schemes in Table 2. We analyze
the results in Table 2 as follows.
For the Naive ID removal scheme, it is straightforward
that it preserves all the data utility. However, it is also the
most vulnerable scheme to SDA attacks.
Since Add/Del randomly adds and deletes edges,
which is an global edge edition operation and thus it
may change many fundamental structural properties of
a graph. It follows that it can conditionally or partially
preserve both graph and application utilities. However,
utilities like JD, GCC, NC, CD, and MINS would be de-
stroyed if too many existing edges are deleted while new
edges are added. For Switch, it switches two randomly
selected qualiﬁed edges, which preserves the degree of
each user. Consequently, Switch can preserve Deg. and
partially preserve most other utilities. Furthermore, com-
pared to Add/Del, Switch can conditionally preserve the
RX and CD utilities which are destroyed in Add/Del.
This is because that Add/Del randomly changes users’
degree in the global edge edition process and thus some
global structure-sensitive application utility is lost or sig-
niﬁcantly affected. Furthermore, Add/Del and Switch
cannot defend against modern SDA attacks as shown
in [2, 3, 5].
306  24th USENIX Security Symposium 
USENIX Association
4
graph utility
application utility
R2SDA
Table 2: Analysis of existing graph anonymization techniques.  = preserving the utility, (cid:31)(cid:30)= partially preserving the
utility, (cid:31) = conditionally preserving the utility depending on parameters and considered data (based on our analysis,
it is necessary to distinguish partially and conditionally preserving a data utility. For instance, k-DA conditionally
preserves the Deg. utility depending on k while Add/Del can partially preserve the Deg. utility for an arbitrary k),  =
not preserving the utility, and n/a = evaluation not available in existing works.
Naive
Add/Del [6]
Switch [6]
k-NA [7]
k-DA [8]
k-auto [9]
k-iso [10]
(cid:31)(cid:30) (cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)
 (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31) (cid:31) (cid:31) (cid:31)
(cid:31)
(cid:31) (cid:31) (cid:31) (cid:31)
(cid:31)
(cid:31) (cid:31) (cid:31) (cid:31)
(cid:31)
(cid:31) (cid:31)  
Aggregation [12] (cid:31) (cid:31) (cid:31) (cid:31)
(cid:31)
(cid:31) (cid:31) (cid:31) (cid:31)
(cid:31)
(cid:31) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)
(cid:31) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)
(cid:31) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)
(cid:31) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)
(cid:31)
 (cid:31) (cid:31) (cid:31)
DP [18]
DP [19]
RW [20]
Cluster [14]
DP [16, 17]
DP [15]

         
Deg. JD ED PL LCC GCC CC BC EV NC NR Infe. RX RE IM MINS CD SR SD
  
    
 (cid:31) (cid:31)
(cid:31) (cid:31)(cid:30) (cid:31)(cid:30)
(cid:31) (cid:31) (cid:31)
(cid:31) (cid:31) (cid:31)
(cid:31) (cid:31) (cid:31)
(cid:31)  (cid:31)
(cid:31) (cid:31) (cid:31)
(cid:31) (cid:31) (cid:31)
 (cid:31) (cid:31)
 (cid:31) (cid:31)
 (cid:31) (cid:31)
 (cid:31) (cid:31)
 (cid:31)(cid:30) (cid:31)(cid:30) n/a
(cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31) (cid:31)(cid:30) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)
(cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31) (cid:31)(cid:30) (cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31)(cid:30) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31) (cid:31) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31) (cid:31) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31) (cid:31) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
(cid:31) (cid:31)(cid:30) (cid:31) (cid:31) (cid:31) (cid:31) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)
(cid:31)
 (cid:31)(cid:30) (cid:31) (cid:31) (cid:31)(cid:30) (cid:31) (cid:31)(cid:30)  (cid:31)(cid:30) (cid:31)




n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
 (cid:31) 
 





The k-anonymity based anonymization schemes k-NA
[7], k-DA [8], and k-auto [9] can partially/conditionally
preserve the graph and most application utilities ex-
cept for the RX utility. This is because the fundamen-
tal idea of k-anonymity based schemes is to make k
users/subgraphs structurally similar. Therefore, there is
a tradeoff between anonymity and utility. If k is large,
more users will be structurally similar while more util-
ity will be lost. On the other hand, if k is chosen to be
small, more utility will be preserved at the cost of lower
anonymity guarantee. Furthermore, since every user is
guaranteed to be structurally similar to at least k−1 other
users while the RX utility tries to distinguish users based
on their structural differences, it turns out k-anonymity
based schemes cannot preserve the RX utility. As we
discussed before, k-iso achieves structure anonymization
by partitioning the original graph into k isomorphic sub-
graphs. Therefore, several fundamental properties of a
graph will be destroyed, e.g., connectivity. It follows that
several important graph and application utilities are lost
in k-iso, e.g., PL, GCC, NR, Infe., RX, RE, IM, and SR.
Finally, compared with other schemes, k-NA, k-auto, and
k-iso have higher computational complexities.
Similar to k-anonymity based schemes, the cluster
based schemes [12, 14] can conditionally/partially pre-
serve graph and application utilities except for RX. This
is because the fundamental idea of cluster based schemes
is to make the users within a cluster structurally indistin-
guishable. Therefore, to what extent these schemes can
preserve data utility depends on the cluster size setting.
Again, since RX is achieved based on users’ structural
difference, this utility is not preserved in cluster based
schemes.
For DP based schemes (e.g., [15, 19]), their main ob-
jective is to protect link privacy by perturbing the edges
of a graph. The fundamental idea of these schemes is
to make an anonymized graph structurally similar to its
neighboring graphs and thus an adversary cannot infer
the existence of an edge. Therefore, they can condition-
ally/partially preserve most graph and application utili-
ties. However, if a high level of privacy is guaranteed,
many edges in the graph are changed. Furthermore, sim-
ilar to Add/Del, the edge perturbation in DP also belongs
to global edge edition. Therefore, the global structure-
sensitive high-level application utilities, e.g., RX, MINS,
and CD, are destroyed or signiﬁcantly reduced in DP
based schemes.
In the RW based scheme [20], link privacy is achieved
by replacing a random walk path with an edge, and thus
this scheme, theoretically, will not change the degree dis-
tribution of the original data. It follows that several util-
ities, e.g., Deg., RX, SD, NR, Infe., can be preserved or
partially preserved. However, some other global utilities,
e.g. JD, GCC, are lost in the RW based scheme due to
the signiﬁcant change of the overall graph structure.
From Table 2, no existing work evaluates the resis-
tance of state-of-the-art anonymization schemes against
modern SDA attacks. Although most of the schemes
have nice theoretical privacy guarantees, unfortunately,
that privacy analysis cannot guarantee that they can de-
fend against modern SDA attacks due to the improper
model of the adversary’s auxiliary information, problem-
atic assumptions, etc. Therefore, aiming to address this
open problem, we evaluate the effectiveness of existing
graph data anonymization schemes against modern SDA
attacks in Sections 4 and 5.
USENIX Association  
24th USENIX Security Symposium  307
5
3 Graph De-anonymization
3.1 Graph Data DA
3.1.1 Seed-based DA
When de-anonymizing graph data, it is intuitive to iden-
tify some users ﬁrst as seeds. Then, the large scale DA is
bootstrapped from these seeds. In [26], Backstrom et al.
presented both active attacks and passive attacks to graph
data. However, the attacks in [26] have several limita-
tions, e.g., they are not scalable and they leverage sybil
users that can be detected by modern sybil defense tech-
niques [41]. To improve the attacks in [26], Narayanan
and Shmatikov presented a scalable two-phase DA at-
tack to social networks [2]. In the ﬁrst phase, some seed
users are identiﬁed between the anonymized graph and
the auxiliary graph. In the second phase, starting from
the identiﬁed seeds, a self-reinforcing DA propagation
process is iteratively conducted based on both graphs’
structural characteristics, e.g., node degrees, nodes’ ec-
centricity, edge directionality. Later, Narayanan et al.
employed a simpliﬁed version of the attack in [2] (us-
ing less DA heuristics) for link prediction [21]. In [22],
Nilizadeh et al. extended Narayanan and Shmatikov’s
attack by proposing a community-enhanced DA scheme
of social networks. Actually, the community-level DA
in [22] can also be applied to enhance other seed-based
DA attacks (e.g., [5, 25]).
In [5], Srivatsa and Hicks presented three attacks to
de-anonymize mobility traces, which can be modeled
as contact graphs by applying multiple preprocessing
techniques (e.g., [5]). Similar to Narayanan et al.’s
attacks [2, 21], Srivatsa-Hicks’ attacks also consist of
two phases, where the ﬁrst phase is for seed identiﬁca-
tion and the second phase is for mapping (DA) propa-
gation. To achieve mapping propagation, Srivatsa and
Hicks proposed three heuristics based on Distance Vec-
tor (DV), Randomized Spanning Trees (RST), and Re-
cursive Subgraph Matching (RSM). In [25], Ji et al. pro-
posed two two-phase DA attack frameworks, namely De-
Anonymization (DeA) and Adaptive De-Anonymization
(ADA), which are workable when the auxiliary data only
has partial overlap with the anonymized data.
In [24,27], besides quantifying the de-anonymizability
of graph data, the authors also proposed DA attacks.
In [27], Yartseva and Grossglauser proposed a simple
percolation-based DA algorithm to graph data. Given
a seed mapping set, the algorithm incrementally maps
every pair of users (from the anonymized and auxiliary
graphs respectively) with at least r neighboring mapped
pairs, where r is a predeﬁned mapping threshold. An-
other similar attack was presented by Korula and Lat-
tanzi [24], which also starts from a seed set and iter-
atively maps a pair of users with the most number of
Table 3: Analysis of existing graph DA techniques.
SF = seed-free, AGF = auxiliary graph-free, SemF =
semantics-free, A/P = active/passive attack, Scal. = scal-
able, Prac. = practical, Rob. = robust to noise,  = true,
(cid:31)(cid:30)= partially true, (cid:31) = conditionally true, and  = false.