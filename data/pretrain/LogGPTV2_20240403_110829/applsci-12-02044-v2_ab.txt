| Overall |298.282 KB |880.501 KB |2025.211 KB |4551.821 KB |
Enh Huff
| Template dictionary | 3.832 KB | 4.45 KB | 4.606 KB | 4.461 KB ||---|---|---|---|---|
| Parameter dictionary |6.348 KB |21.743 KB |24.448 KB |25.206 KB |
| Huffman codec |0.362 KB |0.362 KB |0.362 KB |0.362 KB |
| Compressed file |105.48 KB |303.202 KB |699.61 KB |1606.879 KB |
| Overall |116.022 KB |329.757 KB |729.026 KB |1636.908 KB |It can be seen that the size of the template dictionary is small and constant. In the case of the second enhancement, we were also required to store the parameter dictionary. It is larger than the template dictionary but still negligible compared to the size of the uncompressed data. The use of the parameter dictionary resulted in a ≈80% compression rate, which is ≈20% more than the original algorithm’s. The joint use of the parameter dictionary approach and the Huffman coding provided the best compression rates, aroundnumbers and spaces, which results in a constant and small codec. It is also important to≈92%. This can be explained by the fact that the file to be compressed only contains
mention that this approach scales well for large datasets. In the case of all the enhancements, the MoLFI version has slightly better rates than the one that uses IPLoM.
5.2.2. Experiment 2: Comparing the Speeds of the Different EnhancementsThe time it takes for a compressor to compress a file is also an important factor. As a result of this, we found it important to compare the run times of the different enhancements. We also analyzed the time our algorithm took to decompress the data. We assume that the templates are present, so the evaluation of the speed needed to generate the templates is not part of this paper. The results can be seen in Figures 11–14.The compression and decompression speeds of the 
enhanced method on the Small dataset
Compression speed Decompression speed
IPLoM + Huffman
MoLFI + Huffman
IPLoM + 
Method Enhancement 
MoLFI + 
Enhancement
IPLoM + 
Enhancement + 
MoLFI + 
Enhancement + 
0 0.5 1 1.5 2
Elapsed time (s)
Figure 11. Speeds of the different enhancements used on the Small dataset.
Appl. Sci. 2022, 12, 2044 14 of 32Appl. Sci. 2022, 12, 2044 14 of 32
The compression and decompression speeds of the 
enhanced method on the Mid dataset
Compression speed Decompression speed
IPLoM + Huffman
MoLFI + Huffman
IPLoM + 
Method Enhancement 
MoLFI + 
Enhancement
IPLoM + 
Enhancement + 
MoLFI + 
Enhancement + 
0 1 2 3 4 5
Elapsed time (s)
Figure 12. Speeds of the different enhancements used on the Mid dataset.The compression and decompression speeds of the 
enhanced method on the Large dataset
Compression speed Decompression speed
IPLoM + Huffman
MoLFI + Huffman
IPLoM + 
Method Enhancement 
MoLFI + 
Enhancement
IPLoM + 
Enhancement + 
MoLFI + 
Enhancement + 
0 2 4 6 8 10 12
Elapsed time (s)
Figure 13. Speeds of the different enhancements used on the Large dataset.
The compression and decompression speeds of theenhanced method on the Big dataset
Compression speed Decompression speed
IPLoM + Huffman
MoLFI + Huffman
IPLoM + 
Method Enhancement 
MoLFI + 
Enhancement
IPLoM + 
Enhancement + 
MoLFI + 
Enhancement + 
0 5 10 15 20 25
Elapsed time (s)
Figure 14. Speeds of the different enhancements used on the Big dataset.
Appl. Sci. 2022, 12, 2044 15 of 32It can be seen that the creation of a parameter dictionary does not take much time, while the Huffman coding proves to be slower, especially when any kind of character could occur in the file to be compressed, so it takes more time to find the representation in the codec. In the case of the parameter dictionary approach, the decompression time is just slightly more than the time it takes to compress the file. The same cannot be said for the approaches that use Huffman coding, since it takes at least twice as much time to decompress the file when this method is involved. The MoLFI version is somewhat faster than the IPLoM one.5.2.3. Experiment 3: Comparing the Compression Rates of the New Enhanced Algorithm and General Compressors
In this experiment, we wanted to compare the compression rate achieved by our parameter dictionary and Huffman coding technique with the compression rates of general compressors. The results can be seen in Figures 15–18.
Compression rates on the Small dataset
100.000
75.000
Rate (%) 50.000100.000
75.000
Rate (%) 50.000
25.000
0.000
IPLoM MoLFI LZMA Bzip2 PPMd
Figure 15. The comparison of compression rates of the enhanced algorithm and general compressors
on the Small dataset.
Compression rates on the Mid dataset
100.000
75.000
Rate (%) 50.000
25.000
0.000
IPLoM MoLFI LZMA Bzip2 PPMd
Figure 16. The comparison of compression of the enhanced algorithm and general compressors onthe Mid dataset.
Appl. Sci. 2022, 12, 2044 16 of 32
Compression rates on the Large dataset
100.000
75.000
Rate (%) 50.000
25.000
0.000
IPLoM MoLFI LZMA Bzip2 PPMd
Figure 17. The comparison of compression rates of the enhanced algorithm and general compressors
on the Large dataset.
Compression rates on the Big dataset
100.000
75.000
Rate (%) 50.000
25.000
0.000
IPLoM MoLFI LZMA Bzip2 PPMd0.000
IPLoM MoLFI LZMA Bzip2 PPMd
Figure 18. The comparison of compression rates of the enhanced algorithm and general compressors
on the Big dataset.
Out of the three investigated general compressors, LZMA has the highest compression
rate, with an average of 98.97%, while PPMd has the least, with 97% on average. Our