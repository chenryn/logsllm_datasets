to prevent them.
Through side channels the attacker can disclose informa-
tion about the kernel memory layout. In particular, the attacker
discloses whether a kernel memory page is mapped. Hence, the
attacker, in user mode, will attempt to read or write to a kernel
memory page. Since kernel memory cannot be accessed by the
user-mode programs such an attempt will result in an access
violation. However, the time elapsing between the attempted
access and the access violation depends on whether the page
is mapped. Hund et al. [26] ﬁrst demonstrated the feasibility
10
of this attack by measuring the different timings the page fault
handler needs to deliver an exception to the user mode to
bypass kernel ASLR. Wojtczuk [56] improved this attack by
using Intel’s Transactional Synchronization Extensions (TSX)
which provides new instructions for hardware-aided transac-
tional memory. The advantage of using TSX instructions to
access kernel memory is that the faulting access does not
invoke the page fault handler, and hence, allows to execute the
previous attack of Hund et al. faster and with higher precision.
These timing-side channels exist because the user and
kernel mode share the same address space, i.e., they use the
same page tables. Hence, we can prevent such attacks by
ensuring that the user and kernel mode use different page tables
similar to Apple’s iOS [34].
Code-reuse attacks. PT-Rand is complementary to defenses
against code-reuse attacks, like CFI [1, 19], CPI [30], or ﬁne-
grained randomization [12, 31]. We applied the open-source
version of the CFI kernel protection for Linux RAP [52] to
prevent the attacker from hijacking the control ﬂow. Hence,
the attacker cannot use code-reuse attacks like ROP to leak
the randomization secret.
B. Performance
We measured the performance overhead incurred by PT-
Rand based on SPEC CPU2006, LMBench, Phoronix, and
Chromium benchmarks. All measurements are taken on an
Intel Core i7-4790 CPU running at 3.60GHz with 8 GB RAM
using Debian 8.2 with a recent Linux kernel, version 4.6.
SPEC CPU 2006. The SPEC CPU 2006 benchmarks measure
the performance impact of PT-Rand on CPU-intensive applica-
tions. We executed the entire benchmark suite with the default
parameters for reference tests: three iterations with reference
input. We did neither encounter any problems during the
execution (i.e., crashes) nor strong deviations in the results of
the benchmarks. Figure 6 summarizes the performance impact
of PT-Rand compared to a non-modiﬁed kernel. The average
performance overhead of PT-Rand is only 0.22% with worst-
case overhead of only 1.7%. This conﬁrms the high efﬁciency
and practicality of PT-Rand for contemporary systems.
Note that a few benchmarks perform marginally better
when PT-Rand is applied. Such deviations have been also
observed in prior work, and can be attributed to negligible
measurement variances.
LMBench. Most of our modiﬁcations affect the launch and
termination phase of an application’s lifecycle. This is due to
the fact that PT-Rand needs to randomize the page tables at
program start and remove them from the 1:1 mapping. When
an application terminates, PT-Rand needs to de-randomize its
page tables and make this memory again accessible through the
1:1 mapping. Hence, we additionally tested our approach using
the popular LMBench micro benchmark suite [35] to assess
the overhead for these critical phases. Speciﬁcally, LMBench
collects timing information for process launch, fork, and exit.
We measured an absolute overhead of less than 0.1 ms on
average which is hardly noticeable to the end-user of a PT-
Rand-hardened system
Benchmark Name Relative Overhead
IOZone
PostMark
OpenSSL
PyBench
PHPBench
Apache
1.0%
1.8%
-2%
-0.9%
-0.2%
0.8%
Table I: Phoronix benchmark results.
LMBench also includes other benchmarks, e.g., perfor-
mance impact on memory accesses, system calls or ﬂoating
point operations. We successfully executed all benchmarks and
observed no measurable impact on the performance.
Phoronix. Besides SPEC CPU2006 and LMBench we mea-
sured the performance impact of PT-Rand with the Phoronix
benchmark suite [41] which is widely used to benchmark
the performance of operating systems. Table I4 summarizes
the results which are consistent with the results of the SPEC
CPU2006 benchmarks.
Chromium. Finally, we measured the performance overhead
for Google’s Chromium in two scenarios: 1) we ran the popular
browser benchmarking frameworks JetStream, Octane, and
Kraken, to measure the run-time overhead for daily usage, and
2) we modiﬁed Chromium such that it terminates directly after
loading to measure the load-time overhead. We repeated both
experiments three times and determined the median to account
for small variances.
For the Chromium web browser, we report a run-time
overhead of -0.294% and a load-time overhead of 9.1%. The
run-time overhead represents the arithmetic mean of 0.76% for
JetStream, 1.183% for Kraken, and -2.825% for Octane.
The browser frameworks measure browser engine latency
and load, with a focus on JavaScript execution. While these
tests do not accurately measure the direct performance over-
head of PT-Rand, they provide a ﬁrst estimation of the per-
formance impact on the popular end-user applications such
as a web browser. Given only -0.294% overhead, we conﬁrm
that PT-Rand does not negatively impact performance of user
applications.
To measure the load-time overhead, we simply added a
return instruction in the main function of Chromium. This
ensures that Chromium immediately terminates after it
is
completely loaded. We measured the elapsed time based on
the Unix tool time. With less than 1 ms load-time overhead
we assert that PT-Rand does not impair the user experience.
We ﬁnd these results to be in line with our LMBench test
results for process creation and termination.
C. Robustness
To evaluate the robustness of PT-Rand we executed a
large number of popular user-mode applications, and the three
aforementioned benchmarking suites. We did not encounter
4 Note that we excluded some of the benchmarks because we got errors
when executing them on a vanilla system.
11
Figure 6: Overhead of page table randomization on SPEC CPU2006
any crashes during these tests, and all applications behaved as
expected. To further stress test our implementation we executed
the Linux Test Project (LTP) [32]. The LTP is comprised
of different stress tests that can be used to evaluate the
robustness and stability of the Linux kernel. We executed the
most important tests under PT-Rand, and did not encounter
any deviation in the behavior compared to the vanilla kernel.
Finally, we did not encounter any compatibility issues or
crashes when combining PT-Rand with RAP [52].
VII. DISCUSSION
Choice of 64-bit. The choice of 64 bit architectures is not
a conceptual
limitation. PT-Rand can be ported to 32 bit
architectures. However, similar to ASLR, PT-Rand relies on
the available randomization entropy which is known to be
low for 32 bit systems [47]. Hence, we focused our efforts
on hardening 64 bit-based architectures because nearly all
commodity desktops and servers feature 64 bit CPUs. Even
mobile devices are increasingly deploying 64 bit CPUs. As
of 2013, Apple’s iPhone embeds a 64 bit processor and iOS 9
runs exclusively on 64 bit processors. In a similar vein, Google
runs 64 bit processors for their latest Nexus smartphone.
Malicious Drivers. Our threat model does not consider in-
jection of malicious drivers. These would allow the attacker
to execute arbitrary code in kernel mode without requiring
exploitation of a memory corruption vulnerability. As such,
malicious drivers could access and leak the randomization se-
cret. However, note that all modern operating systems support
driver signing to prevent the loading of such malicious drivers
thereby ensuring that the randomization secret is not leaked to
the attacker.
Physical Attacks. Similar to previous work [13], the main
focus of this work is to prevent remote attacks against the
kernel. As a result, attacks that rely on physical access to
the victim system are beyond the scope of this work. For
instance, several attacks in the past utilized special hardware
(e.g., FireWire [44]) to create a snapshot of the physical
memory [22]. Such snapshots can be analyzed by means of
forensic tools to identify critical data structures such as the
page tables in the case of PT-Rand. However, they require
physical access to the RAM. Creating a memory snapshot
remotely to detect the location of page tables is not feasible
because the remote attacker has only access to virtual memory,
i.e., linearly scanning virtual memory will eventually lead to a
system crash since we move the page tables to a memory re-
gion where the majority of surrounding pages are not mapped.
No Disturbance of Workﬂow. As described in Section V, we
use a debug register to store the randomization secret. This
prevents the attacker from leaking the secret by means of a
memory disclosure. As a consequence, the chosen debug reg-
ister is no longer available for debugging purposes. However,
debug registers (DR0-DR2) are still available. Furthermore,
these debug registers are only used for hardware breakpoints.
Software breakpoints, which are far more common during
debugging, are not affected by our change.
Lastly, it is noteworthy to mention that PT-Rand does not
depend on any speciﬁc operating system features and can be
ported to other operating systems.
VIII. RELATED WORK
A. Data-only Attack and Defenses
Chen et al. [10] demonstrated the effectiveness of data-only
attacks against server applications. In particular, they showed
how to bypass authentication checks, and escalate privileges
to root without the need to hijack the application’s control
ﬂow. Hu et al. [23] created FLOWSTITCH to automatically
generate such data-only attacks. This is achieved by ﬁrst ana-
lyzing the execution ﬂow that leads to the memory-corruption
vulnerability, and then exploring how this vulnerability can be
exploited to manipulating existing data ﬂows of the application
to leak sensitive information or escalate privileges. In a follow-
up work, Hu et al. [24] introduced the notion of data-oriented
programming (DOP) which extends these attacks to a Turing-
complete machine.
To mitigate data-only attacks
a number of data-
randomization approaches have been proposed. Cadar et al. [9]
12
milcnamddealIIsoplexpovraylbmsphinx3perlbenchbzip2gccmcfgobmkhmmersjenglibquantumh264refomnetppastarxalancbmkMeanGeo Mean-101234Performance Slowdown (%)PT-Randand Bhatkar et al. [7] apply static analysis to divide data
accesses into equivalence classes. Next, they instrument all
data accesses to use a xor key per equivalence-classes for
reading and writing data from/to memory. This prevents the
attacker to exploit a memory-corruption vulnerability to access
arbitrary data. However, the instrumentation of data accesses
is expensive with up to 30% run-time overhead.
Giuffrida et al. constantly re-randomize the addresses of
data at run-time [21]. They implemented a live randomization
system for Minix3 and report a modest overhead of 5%.
However, between each randomization the attacker has a small
time window where the attacker can leak the address, and
manipulate content of the targeted data. Bigelow et al. [8]
avoid this time windows in the context of server applications
by re-randomizing the address space after the data was sent
over the network. Hence, all potentially leaked information are
re-randomized when they reach the attacker.
B. Register-based Information Hiding
Many defenses rely on a secret value that should not be
disclosed to the attacker. To do so, one possibility is to store the
secret value in a register. TRESOR [36] uses a debug register
of x86 to hide an AES key from attackers. Similar to PT-
Rand, Oxymoron [6], Code-Pointer Integrity [30], and ASLR-
Guard [33] use a register to hide the base address of a memory
region that contains sensitive data. In particular, these defenses
use a segmentation register to hide their trusted computing base
from the attacker.
C. Kernel and Page Table Protection
Several kernel defenses have been proposed that also
the page table against malicious manipulations [4,
protect
13, 20, 45, 54]. In general, existing approaches are based
on a dedicated kernel monitor that enforces a set of pre-
deﬁned policies at run time, including integrity policies for
page tables. To the best of our knowledge, PT-Rand is the
ﬁrst approach which follows a randomization-based approach
to defend against data-only attacks against page tables.
SecVisor [45] and HyperSafe [54] follow a hypervisor-
based approach. SecVisor enforces W⊕X for the kernel space
to ensure the integrity of the kernel code. This is done by using
memory virtualization to allow only certain physical pages to
be executable. SecVisor provides an interface to the kernel to
allow new physical pages to be marked as executable. These
requests are checked against a user-provided policy which is
not further speciﬁed. HyperSafe protects its page tables by
marking them read-only, and checks before updating the page
tables if the update conforms to a immutable set of policies
which should prevent malicious changes of page tables. Since
the hypervisor maintains its own memory domain, virtualized
guests cannot compromise its integrity by means of data-only
attacks. However, the page tables maintained in the hypervisor
itself can be compromised by the attacker. For instance,
evasion attacks can be deployed to attack the hypervisor from a
virtualized guest system [55]. Another practical shortcoming of
hypervisor approaches is the incurred performance overhead.
SecVisor reports 14.58% average overhead (SPECInt) and
HyperSafe 5% overhead (custom benchmarks). In contrast, PT-
Rand only incurs 0.22% for SPEC CPU benchmarks. Some of
the extra overhead of SecVisor and HyperSafe can be attributed
to additional checks that go beyond table protection. However,
the hypervisor itself will always add some extra execution
overhead. In addition, these approaches rely on extra hardware
features such as virtualization extensions.
Another recent example for a hypervisor-based approach
is KCoFI [13] which enables full-system CFI enforcement