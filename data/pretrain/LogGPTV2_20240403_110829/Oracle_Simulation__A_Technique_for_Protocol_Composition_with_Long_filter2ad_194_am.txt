65
Ax |= φ3[g3(φ1)a, g0(φ0)b] ∼
φ3[
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
i g3(φ1) = gbi ∧ g2(φ1) = pk(skR) then
else out(g3(φ1)a)
,
if g0(φ0) = ga ∧ g1(φ0) = pk(skI ) then
i g0(φ0) = gai ∧ g1(φ0) = pk(skI ) then
else out(g0(φ0)b)]
Ax |= ψ3[g1(ψ0)a, g3(ψ1)b] ∼
ψ3[
if g1(ψ0) = gb ∧ g0(ψ0) = pk(skR) then
i g1(ψ0) = gbi ∧ g0(ψ0) = pk(skR) then
else out(g1(ψ0)a)
,
if g3(ψ1) = ga ∧ g4(ψ1) = pk(skI ) then
i g3(ψ1) = gai ∧ g4(ψ1) = pk(skI ) then
else out(g3(ψ1)b)]
Ax |= χ3[g4(χ2)a, g0(χ0)b] ∼
χ3[
if g4(χ2) = gb ∧ g3(χ2) = pk(skR) then
i g4(χ2) = gbi ∧ g3(χ2) = pk(skR) then
else out(g4(χ2)a)
,
if g0(χ0) = ga ∧ g1(χ0) = pk(skI ) then
i g0(χ0) = gai ∧ g1(χ0) = pk(skI ) then
3.
4.
5.
else if ¬(cid:87)
out(k)
bad
else if ¬(cid:87)
out(k)
bad
else if ¬(cid:87)
out(k)
bad
else if ¬(cid:87)
out(k)
bad
else if ¬(cid:87)
out(k)
bad
else if ¬(cid:87)
out(k)
bad
else out(g0(χ0)b)]
We have that Ax = EUF-CMA
sound thanks to Proposition 27.
T I ,F,skI ,s ∧ EUF-CMA
T R,F,skR,s ∧ DDHs,skI ,skR
is OKE-
The simulatability also instantly follows from the deﬁnitions, as the attackers as access to
the ai and bi, and can produce signatures on them (but only on them).
We only provide the proof for the most diﬃcult frame φ3, where the attacker has the most
knowledge for each computation. ψ3 and χ3 can be handled exactly the same way, except that
on applications of the EUF-CMA axioms, the attacker does not have the honest signatures
in the frame (as the order of the agents has been mixed up), which simplify the proof.
66
C.2 Proof for φ3
We from now on omit Ax.
C.2.1 Real or random of the key
The real or random goal is:
φ3[
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
g3(φ1)a
else
g3(φ1)a
,
if g0(φ0) = ga ∧ g1(φ0) = pk(skI ) then
g0(φ0)b
else
g0(φ0)b
φ3[
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
k
else
g3(φ1)a
∼
,
if g0(φ0) = ga ∧ g1(φ0) = pk(skI ) then
k
else
g0(φ0)b
]
φ3[g3(φ1)a, g0(φ0)b]
]
There are by case disjunctions four possible cases, the ﬁrst one being:
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) = ga ∧ g1(φ0) = pk(skI ) then
We can deﬁne the substitution τ := {g3(φ1) ← gb, g2(φ1),← pk(skR), g0(φ0) ← ga, g1(φ0) ←
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) = ga ∧ g1(φ0) = pk(skI ) then
φ3[k, k]
pk(skI )}, the goal then becomes: φ3[gab, gab]τ ∼ φ3[k, k]τ .
Note that a, b is not included in s, skI , skR, we can thus use the DDH axiom on them.
Looking at φ3τ, we also see that all occurences of a and b are of the form ga or gb. Thus
applying DDH directly gives us:
∼
φ3[gab, gab]τ ∼ φ3[gc, gc]τ
We conclude by renaming of gc into k.
The second case is:
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) (cid:54)= ga ∨ g1(φ0) (cid:54)= pk(skI ) then
Here, we actually prove that we never go into the branch which reveals either the g3(φ1)a
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) (cid:54)= ga ∨ g1(φ0) (cid:54)= pk(skI ) then
φ3[g3(φ1)a, g0(φ0)b]
φ3[k, g0(φ0)b]
∼
or the k, thus yielding the equivalence.
We thus prove that:
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) (cid:54)= ga ∨ g1(φ0) (cid:54)= pk(skI ) then
checksign(g4(φ1), g2(φ1))
∧g3(φ1) = π2(getmess(g4(φ1)))
∧π1(getmess(g4(φ1))) = ga
∧π3(getmess(g4(φ1))) = pk(skI )
∼
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) (cid:54)= ga ∨ g1(φ0) (cid:54)= pk(skI ) then
false
67
We have by application of the equalities:
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) (cid:54)= ga ∨ g1(φ0) (cid:54)= pk(skI ) then
checksign(g4(φ1), g2(φ1))
∧g3(φ1) = π2(getmess(g4(φ1)))
∧π1(getmess(g4(φ1))) = ga
∧π3(getmess(g4(φ1))) = pk(skI )
∼
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) (cid:54)= ga ∨ g1(φ0) (cid:54)= pk(skI ) then
checksign(g4(φ1), pk(skR))
∧gb = π2(getmess(g4(φ1)))
∧π1(getmess(g4(φ1))) = ga
∧π3(getmess(g4(φ1))) = pk(skI )
We now apply EUF-CMA
to g4(φ1), so we either have g4(φ1) = sign((g0(φ0), gb, g1(φ0)), skR)
(the honest signature), which is a contradiction with g0(φ0) (cid:54)= ga and π1(getmess(g4(φ1))) =
ga, or the signature comes from the oracle and g4(φ1) = (A, gbi, A(cid:48)), in contradiction with
gb = π2(getmess(g4(φ1))).
T R,F,skR,s
We thus have:
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) (cid:54)= ga ∨ g1(φ0) (cid:54)= pk(skI ) then
checksign(g4(φ1), pk(skR))
∧gb = π2(getmess(g4(φ1)))
∧π1(getmess(g4(φ1))) = ga
∧π3(getmess(g4(φ1))) = pk(skI )
∼
if g3(φ1) = gb ∧ g2(φ1) = pk(skR) then
if g0(φ0) (cid:54)= ga ∨ g1(φ0) (cid:54)= pk(skI ) then
false
And we conclude by transitivity.
Of the two remaining cases, one is symmetrical to the previous one, and the last one is
trivial.
C.2.2 Authentication
The goal is:
φ3[ if g3(φ1) (cid:54)= gb then
if ¬(cid:87)
if ¬(cid:87)
g3(φ1)a
,
if g0(φ0) (cid:54)= ga then
g0(φ0)b
]
i g3(φ1) = gbi ∧ g2(φ1) = pk(skR) then
i g3(φ1) = gbi ∧ g2(φ1) = pk(skR) then
φ3[ if ¬g3(φ1) = gb then
i g0(φ0) = gai ∧ g1(φ0) = pk(skI ) then
i g0(φ0) = gai ∧ g1(φ0) = pk(skI ) then
∼
,
if g0(φ0) (cid:54)= ga then
if ¬(cid:87)
if ¬(cid:87)
bad
bad
]
We prove that each condition is never true using the EUF-CMA axioms. The four cases
are symmetrical, we only prove the ﬁrst one:
if checksign(g4(φ1), g2(φ1)) ∧ g3(φ1) = π2(getmess(g4(φ1))) then
if π1(getmess(g4(φ1))) = ga∧
π3(getmess(g4(φ1))) = pk(skI ) then
if g3(φ1) (cid:54)= gb then
i g3(φ1) = gbi ∧ g2(φ1) = pk(skR)
¬(cid:87)
if checksign(g4(φ1), g2(φ1)) ∧ g3(φ1) = π2(getmess(g4(φ1))) then
if π1(getmess(g4(φ1))) = ga∧
π3(getmess(g4(φ1))) = pk(skI ) then
if g3(φ1) (cid:54)= gb then
false
∼
68
By case disjunction g2(φ1) = pk(skR), the negative one being trivial, we must prove:
if checksign(g4(φ1), pk(skR)) ∧ g3(φ1) = π2(getmess(g4(φ1))) then
if π1(getmess(g4(φ1))) = ga∧
π3(getmess(g4(φ1))) = pk(skI ) then
if g3(φ1) (cid:54)= gb then
i g3(φ1) = gbi
¬(cid:87)
if checksign(g4(φ1), pk(skR)) ∧ g3(φ1) = π2(getmess(g4(φ1))) then
if π1(getmess(g4(φ1))) = ga∧
π3(getmess(g4(φ1))) = pk(skI ) then
if g3(φ1) (cid:54)= gb then
false
∼
We now apply EUF-CMA
to g4(φ1), so we either have g4(φ1) = sign((g0(φ0), gb, g1(φ0)), skR)
(the honest signature), which is a contradiction with g3(φ1) (cid:54)= gb and g3(φ1) = π2(getmess(g4(φ1))),
or the signature comes from the oracle and g4(φ1) = (A, gbi, A(cid:48)),
in contradiction with
T R,F,skR,s
¬(cid:87)
i g3(φ1) = gbi. This conclude the proof.
C.3 Conclusion for Signed DDH
We thus have the security of the signed DDH protocol.
If we want to use Corollary 2 to
compose it with for instance a record protocol RP := RPI (k)(cid:107)RPR(k), which simply exchange
encrypted messages using the exchanged key, and do not share any long term secret, it is trivial.
Indeed, without any shared secret, in(k); RPI (k)(cid:107)in(k); RPR(k) is simulatable without any
oracle, so we can take Op = ∅. This means that we have the ﬁrst set of hypothesis.
Now, RP would be proven secure with IND-CCA, and this can be proven easily, even if
many other session of RP with distinct keys are in parallel. So we can simply set Or as the
oracle which outputs all the ki,j and Ok as the oracle which output p, and obtain the multi
session security of RP , and the simulatability of the key exchange.
RP could be a single round trip enrypted exchange, or actually any number of round trip,
easily proved secure using Proposition 18.
D An application to SSH
D.1 Presentation of SSH
We only show here how the proof of security of SSH could be split up into smaller proofs
thanks to our framework, but we do not actually prove the smaller proofs. We will thus only
provide a high level point of view of SSH, not going into too many implementations details,
but rather focusing on the parts that represent a challenge for composition. SSH is a simple
key exchange which can be used to set up an authenticated and secret channel between a
user’s computer and a server, with ﬁrst an authentication of the server, and then an optional
authentication of the user, either through a password or a secret key. We provide in Figure 13
the basic SSH key exchange, with authentication through secret keys.
We can see that the indistinguishability of the key is not preserved through the protocol.
The diﬃculty of SSH is moreover that once a user has established a secure connection to a
server, he can from this server establish a secure connection to another server, while using the
69
P (skP, pk(skS))[_] :=
S(skS, pk(skP ))[_] :=
new a;
out(ga);
in()
let k = Ba in
let sid = hash() in
if checksign(sign, pk(skS))
∧ getmess(sign) = sid then
out(enc(sign(sid, skP ), k))
[_].
in(A);
new b;
let k = Ab in
let sid = hash() in
out()
in(enc(sign, k))
if checksign(sign, pk(skP ))
∧ getmess(sign) = sid then
[_].
SSH :=!P (skP, pk(skS))[0](cid:107)!S(skS, pk(skP ))[0]
Figure 13: Basic SSH key exchange
secure channel previously established to obtain the user credentials. We provide in Figure 14 a
model of the SSH with forwarding of agent (reusing the deﬁnitions of P and S from Figure 13),
where after a P is ran successufully, a F orwardAgent is started on the computer which can
receive on the secret channel a signing request and perform the signature of it. In parallel,
after the completion of some S, a distant session of P can be initiated by P Distant, which
will request on the previous secret channel the signature of the sid. Finally, as the forwarding
can be chained multiple time, at the end of a successful P Distant, a F orwardServer is set
up, which will accept to receive a signing request on the new secret channel of P Distant,
forward the request on the old secret channel, get the signature and forward it.
With the agent forwarding, we are faced with the new problem which is that we sequentially
compose a basic SSH exchange with other ones which use the same long term secret keys.
To summarize, to be able to prove the security of SSH with agent forwarding, we must be
able to handle key conﬁrmations and composition with shared long term secret.
D.2 The security of the protocol without forwarding agent
We show how we may apply Corollary 3 to the basic SSH protocol.
We provide in Figure 15, how we decompose the ssh protocols in order to prove its security.
To simplify, we directly specify that P and S may only relate to each other by hard-coding
the expected public keys inside them.
A ﬁrst step is to obtain the hypothesis A-3, relating to the security of the basic SSH key
exchange. We split this goal into two subgoals with a case study, the ﬁrst one capturing the
real or random of the key,
P 0(a, skP, pk(skS)); out(k)(cid:107)S0(b, skS, pk(skP )); out(k) ∼=O
P 0(a, skP, pk(skS)); [if B = gb then out(k(cid:48)) else out(k)]
(cid:107)S0(b, skS, pk(skP ))[if A = ga then out(k(cid:48)) else out(k)]
70
P Distant(oldk, pk(skS)) :=
SF orward(skS, pk(skP )) :=
in(A);
new b;
let k = Ab in
let sid = hash() in
out()
in(enc(sign, k))
if checksign(sign, pk(skP ))
∧ getmess(sign) = then
0.
new a;
out(ga);
in(B, pk(skS), sign)
let k = Ba in
let sid = hash() in
if checksign(sign, pk(skS))
∧ getmess(sign) = sid then
out(enc(sid, oldk))