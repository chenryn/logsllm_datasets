Given a kubernetes cluster that is running some number of pods, services,
deployments, etc, I would like to generate one or more files ( yml format
preferred) that would re-produce the current configuration, when applied to a
new cluster.
My use case is a promotion system. I have my 'stack files' as yml files in a
git repo, but I need to allow humans to approve changes before they are
applied to the cluster.
One way to do this is to use an 'open loop' system. I can use tags or other
mechanisms to determine which versions have been applied to the cluster, and
then compare the latest version available with the latest deployed version.
The problem with the open-loop system is that it does not consider that
changes could have been made outside the files, or that changes applied could
have had problems, etc.
If I could extract the 'equivalent' files from a running cluster, I could
compare them with the ones that are about to be applied. This is a much
stronger, 'closed loop' system-- it is able to correctly understand what will
happen when the changes are applied, even if we have lost track of the real
target state.
if there were such a thing as kubectl apply -f --dry-run, which lists only the
changes that will be made, rather than actually doing the changes, that would
work as well. That is already being discussed over at issue #11488
Does anyone have thoughts on this? We are new to kubernetes, but we have
created the the functionality I'm describing above for our RedHat/Satellite
rpm-based deployments, so i want to re-create it in K8s. Of course, in k8s, we
have the complexity that the infrastructure itself can change, not just
installed package versions!