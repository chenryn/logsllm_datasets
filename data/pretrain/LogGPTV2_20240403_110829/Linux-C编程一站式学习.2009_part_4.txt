然后保存成一个文件，
用C语言编写的程序必须经过编译
这意味着用C语言写的程序只需稍
可读性更强，
例如在第一条指令中，把movl
直接用某种体系结构的汇编或
不同的计算机体系结构有不同
一对应的，
也可以指操作系统
 C语言有些语法特性在C标
用不同的C编译器（或者
直接用这些助记符写
而且容易出错，
，汇编语言有三条指
由编译器
指令也不例外
出了错也更容易改
一对应关系
但是很麻烦，
 转换成机
，然后运
，然而更
，于是有
2
出
自
---
## Page 24
编程语言仍在发展演化。以上介绍的机器语言称为第一代语言（1GL，1st Generation
符下，也能得到同样的结果：
脚本，结果如下：
定义Shell变量vAR的初始值是1，然后自增1，然后打印vAR的值。用Shell程序/bin/sh解释执行这个
有些高级语言以解释（Interpret）的方式执行，
载运行，
例如编写一
些描述信息
行编译器对它进行编译，
图1.2.解释执行的过程
图1.1.编译执行的过程
S2
'S
S
$:2
VAr=$(($var+1) )
VAR=1
#
code
source
code
source
VAR=$(($var+1))
 /bin/sh script.sh
VAR=1
/bin/sh
个Shel脚本script.sh，内容如下：
源代码解释
解释器读取
源代码...
编译器读取
执行...
interprete
compile
一新的文件
，编译的过程并不执行程序，
可执行文件
文件再执行
在屏幕上
的结果出现
executable
它把脚本中的每
如果把脚本中
可执行文件..
加载运行这个
你让操作系统
，解释执行过程和C语言的编译执行过程很不一样。
这称为可执
loader
而是把源代码全部翻译成机器指令，
的这
的结果出现
在屏幕上
..程序运行
行文件，
可执行文件可以被操作系统加
作
条
条命令直接敲到Shell提示
命令解释执行.
而不需要
再加上
---
## Page 25
第1章程序的基本概念
可以帮你找到它是在哪一节定义的。
处。如果读到后面某一节看到一个讲过的概念，但是记不清在哪一节讲过了，没关系，书后的索引
希望读者掌握以概念为中心的阅读思考习惯，
现在回答这个思考题，根据编译和解释的不同原理，你能否在执行效率和平台无关性等方面做一下
译和解释的过程有哪些不同？主要的不同在于什么时候翻译和什么时候执行。
的指令（汇编语言的指令要先转成机器码才能执行)
这是我们的第一个思考题。本书的思考题通常要求读者系统地总结当前小节的知识，
1、解释执行的语言相比编译执行的语言有什么优缺点?
习题 请点评
语句编程而不直接用指令编程，但语句也分为输入、
Programming Language）。目前已经有了4GL（4th Generation Programming.
Language）
Programming Language)
比较？
不是一
洁
（SQL，Structured QueryLanguage，结构化查询语言）就是这样的例子。
一步一步怎么做（mperative），具体一步一步怎么做完全由编译器或解释器决定，
一对应的，
是平台？
关系来总结，
，并经过一定的推理,
一一对应的，
一种平台，
上文并没有用"-
，比如本节介绍了很多概念：程序由语句或指令组成，
因此高级语言是平台无关的,
就是一种体系结构，就是一种指令集，
 然后作答。本书强调的是基本概念，
汇编语言称为第二代语言（2GL，
_虽然有这样的不便，
全国嵌入式人才培训基地
，每读一节就总结一套概念之间的关系图画在书上空白
起始页
上一级
概念
、输出、基本运算、测试分支和循环等几种，
，高级语言要执行就必须先翻译成低级语言
但高级语言有一个好处是平台无关性。
，就是一种机器语言，
读者应该抓住概念的定义和概念之
）的概念。3GL的编程语言虽然是用
 2nd Generation Programming
，计算机只能执行低级语言中
2.自然语言和形式语言
而高级语言和它们
，这些都可看作是
，结合以前的知
例如SQL语
下一页
信
和
K
---
## Page 26
与字面意思的一致性
冗余性（Redundancy）
歧义性（Ambiguity）
虽然形式语言和自然语言有很多共同之处，包括Token、结构和语义，但是也有很多不一样的地
么上下文（Context）中说的，你还能理解这个句子主要暗示的内容，
于Token的规则称为词法（Lexical）规则，
式，3=+6$还有一个结构上的错误，
形式语言有严格的语法（Syntax）规则，例如，
形式语言，是专门设计用来表达计算过程的形式语言。
用而人为设计的语言。例如数学家用的数字和运算符号、
自然语言（Natural Language）就是人类讲的语言,
2.自然语言和形式语言：
旦解析完成，你就搞懂了句子的意思，
故
意
算符、化学分子式中的元素名和数字，
（Semantic）的范畴。
（Structure）的规则所组成的。
L
思，
阅读一个自然语言的句子或者一种形式语言的语句时，
不是说谁的鞋掉了。而形式语言中字面
自然语言充斥着成语和隐喻（Metaphor）
嗦，而形式语言则更加紧凑，
为了消除歧义减少误解，
要求是清晰的、
自然语言充满歧义,
尤其是在读外语时你肯定也意识到了）。这个分析句子结构的过程称为解析（Parse）。例
人试图强加-
毫无歧义的,
一些规则）而是自然进化的
人们通过上下文的线索和自己的常识来解决这个问题。，
自然语言引入了相当多的冗余。结果是自然语言经常说得啰里啰
Token的概念相当于自然语言中的单词和标点、数学式中的数和运
，极少有冗余。
，虽然加号和等号都是合法的运算符，
请点评
，如果知道shoe是什么东西，fall意味着什么，
 例如3=+6$的问题之-
第1章程序的基本概念
2.自然语言和形式语言
全国嵌入式人才培训基地
，而关于结构的规则称为语法（Grammar）规则[1]。
（Literal）意思基本上就是真实意思，
语法规则是由符号（Token）和结构
，3+3=6是一
，我在某种场合下说"The other shoe fell"，可能并
 你理解the other shoe是主语而fell是谓语动词,
形式语
比如汉语、
，你不仅要搞清楚每个词（Token）是什么
一个语法正确的数学等式,
化学家用的分子
一在于$不是一个合法的数也不是一个
(Formal Languaqe)
英语和法语。
，这些都属于语义 
但是不能在等号之后紧跟
式等。
这类语言不是人为设
，编程语言也是一种
形式语言的设计
，这句话是在什
而3=+6$则不
是为了特定应
下一页
℃
---
## Page 27
[1]很不幸，
误这些在自然语言中可以忽略的小毛病会把形
现在给出一些关于阅读程序（包括其它形式语言）的建议。
则，只要注意上下文就不会误解。另外，
程序
说明文
诗歌
形式语言和自然语言之间的不同正像诗歌和说明文的区别，
说自然语言长大的人（实际上没有人例外）
1. 程序和编程语言
如Token没有十分好的翻译，直接用英文名称。
该学会在大脑里解析：
奏
，所以要多花点时间来读。
计算机程序是毫无歧义的，
更适合逐字句分析，但仍然充满歧义。
词语的字面意思显得更重要，
非字面意思不仅是常见的而且是刻意使用的。
词语的发音和意思一样重要，
，Syntax和Grammar通常都翻译成"语法",
它们所表示的真实意思又是什么。
例如下一章要讲的C语言转义序列，
识别Token，
其次,
，还包含一部分语义的规则，
字面和本意高度一致，
，并且结构能传达更多的信息。诗歌只能看一个整体，而说明文
，全诗作为一个整体创造出一种效果或者表达一种感情。歧义和
结构很重要，
全国嵌入式人才培训基地
，本书在翻译容易引起混淆的时候通常直接用英文名称，例
往往有-
，但即使有例外也会明确规定哪些字面意思不是真实意
起始页
上一级
，在有些文献中Syntax的含义不包括Lexical规
从上到下从左到右读往往不是一
，这让初学者非常混乱,
，请记住细节的影响，
一个适应形式语言的困难过程。某种意义上
能够完全通过对Token和结构的分析加以理
当然，
例如在C程序中变量应先声明后使用。
首先请记住形式语言远比自然语言紧
，前者之间的区别比后者更明显:
诸如拼写错误和标点错
，Syntax的含义其实包
一个好办法，而
3.程序的调试
乙
---
## Page 28
索来推断是什么原因和过程导致了你所看到的结果。
逻辑错误和语义错误
运行时错误
进计算机中造成的。从此以后，
3.程序的调试 请点评
是编程中最需要动脑的、最有挑战和乐趣的部分。
通过本书你将掌握的最重要的技巧之一就是调试。
编译时错误
楚程序中的Bug分为哪几类。
晰、性格沉稳，还需要一
过程就叫做调试
算机体积都很大，
编程是一件复杂的工作，
上一页
出回过头来判断它到底在做什么。
序的意思（即语义）是错的。找到逻辑错误在哪需要十分清醒的头脑，要通过观察程序的输
去也不产生任何错误信息，
第三类错误是逻辑错误和语义错误。
分这两个概念，有些事情在编译时做，有些事情则在运行时做。
time）这两个概念，
到越来越多的运行时错误。
编译器检查不出这类错误，
易得多。
误
这样的错误，
的前几个星期，你可能会花大量的时间来纠正语法错误。等到有了一些经验之后，
就得不到你想要的结果。
宽容了，
编译器只能翻译语法正确的程序，
得
样，计算机只会按你写的程序去做，问题在于你写的程序不是你真正想要的，
导的也能够立刻找出真正的错误原因是什么。
来说，
，语法错误是最简单最低级的错误，
，但也有个别时候编译器给出的错误提示信息帮助不大，
只要有哪怕-
一点语法错误不是很严重的问题，
（Debug）
有一
不过会少得多，
一次一
一点运气。调试的技能我们在后续的学习中慢慢培养，
因为是人做的事情，
不仅在调试时需要区分这两个概念，
一台计算机不能正常
一个很小的语法错误，
有时候调试是-
 虽然大部分情况下编译器给出的错误提示信息就是你出错的代码
但是程序没有干它该干的事情，
_仍然可以生成可执行文件，
，而且你能更快地发现错误原因。等到经验更丰富之后你就会
第1章程序的基本概念
，否则将导致编译失败，
全国嵌入式人才培训基地
 如果程序里有逻辑错误，
3.程序的调试
，编译器的错误提示也就那么几种,
一件非常复杂的工作
所以难免经常出错。
编译器就会输出一条错误提示信息然后罢工，
因为我们仍然可以读懂句子。而编译器就没那
调试的过程可能会让你感到一
 调试也像是一门实验科学，
从某种角度看调试就像侦探工作，根据掌握的线
>
，相比下面两种错误，语法错误解决起来要容
工程师们找了
，但在运行时会出错而导致程序崩溃。
，无法生成可执行文件。
在学习C语言的很多语法时都需要区
，甚至会误导你。在开始学习编和
，编译和运行都会很顺利，
要求程序员概念明确、逻辑清
半天原因最后发现是一只臭虫钻
 据说有这样一个典故：早期的计
但首先我们要区分清
，每次想到哪里可能
一些泪丧.
即使错误提示是有
这意味着程
，对于自然
还是会犯
但调试也
看
下一页
8
究
怎
觉
程
7
语
---
## Page 29
也有一种观点认为，
也该看过柯南吧)
写
管
题
的全部剔除,
有错，
.自然语言和形式语言
一个Bug，
出更多关于调试和编程实践的建议。
序，
的小程序。据Larry Greenfield 说，
理、文件系统、网络等等大的模块,
。例如，
有一个正确的程序做参考：如果正确就继续编程,
该总是从一
，这玩意儿后来进化成了Linux。
 就修改程序然后再试一次。如果假设是对的，
Linux操作系统包含了成千上万行代码,
一个能正确运行的小规模程序开始，
剩下的-
一步一
一步逼近正确的程序；如果假设错误，
。
编程和调试是-
_即使看起来再怎么不可能一
，“Linus的早期工程之一是编写一个交替打印AAAA和BBBB的
一回事，
全国嵌入式人才培训基地
（引自The Linux User's Guide Beta1版）在后面的章节中会
一开始它仅仅是Linus Torvalds用来琢磨Intel 80386芯片而
编程的过程就是逐步调试直到获得期望的结果为止。
起始页
每做-
一级
但它也不是一开始就规划好了内存管理、设备
如果不正确，
就能得到预期的正确结果,
一步小的改动就立刻进行
-就一定是事实。
只好另外再找思路再做假设。“当你把不可能
，那么一定是刚才的小改动出了问
（即使你没看过福尔摩斯
行调试，
，就可以接着调试下
4.第一个程序
这样的好处是
下一页
8
是
你
---
## Page 30
printf语句的作用是把消息打印到屏幕。注意语句的末尾以;号（Semicolon）结束，下一条语
则，爱怎么写就怎么写，并且不管写多少都不会被编译进可执行文件中。
做什么。注释只是写给程序员看的，
的第一行，
执行文件的路径就可以执行它。如果不想把文件名叫a.out，
将这个程序保存成main.c，然后编译执行: