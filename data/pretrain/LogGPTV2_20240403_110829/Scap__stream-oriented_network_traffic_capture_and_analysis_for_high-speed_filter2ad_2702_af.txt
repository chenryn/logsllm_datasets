r
P
s
s
o
L
t
e
k
c
a
P
 1
 0.01
 0.0001
 1e-06
 1e-08
 1e-10
Medium-Priority Streams
High-Priority Streams
 20  40  60  80  100  120  140  160  180  200
N: free memory threshold (# packet slots) 
 5
 10
 15
 20
 25
 30
 35
 40
N: free memory threshold  (# packet slots) 
Figure 11: Packet loss probability for high-priority packets as a
function of N.
Figure 12: Packet
medium-priority packets as a function of N.
loss probability for high-priority and
Papadogiannakis et al. [35] show that memory access locality
in passive network monitoring applications can be improved when
reordering the packet stream based on source and destination port
numbers. Scap also improves memory access locality and cache
usage in a similar manner when grouping packets into streams.
8.2 Taking Advantage of Multi-core Systems
Fusco and Deri [17] utilize the receive-side scaling feature of
modern NICs in conjunction with multi-core systems to improve
packet capture performance. Sommer et al. [47] take advantage of
multi-core processors to parallelize event-based intrusion preven-
tion systems using multiple event queues that collect semantically
related events for in-order execution. Storing related events in a
single queue localizes memory access to shared state by the same
thread. Pesterev et al. [37] improve TCP connection locality in
multicore servers using the ﬂow director ﬁlters to optimally bal-
ance the TCP packets among the available cores. We view these
works as orthogonal to Scap: such advances in multi-core systems
can be easily used by Scap.
8.3 Packet Filtering
Dynamic packet ﬁltering reduces the cost of adding and remov-
ing ﬁlters at runtime [12, 49, 53]. Deri et al. [13] propose to use the
ﬂow director ﬁlters for common ﬁltering needs. Other approaches
allow applications to move simple tasks to the kernel packet ﬁlter to
improve performance [6, 8, 23]. Scap suggests a relatively different
approach: applications empowered with a Stream abstraction can
communicate their stream-oriented ﬁltering and processing needs
to the underlying kernel module at runtime through the Scap API,
to achieve lower complexity and better performance. For instance,
Scap is able to ﬁlter packets within the kernel or at the NIC layer
based on a ﬂow size cutoff limit, allowing to set dynamically dif-
ferent cutoff values per-stream, while the existing packet ﬁltering
systems are not able to support a similar functionality.
8.4 TCP Stream Reassembly
Libnids [2] is a user-level library on top of Libpcap for TCP
stream reassembly based on the emulation of a Linux network stack.
Similarly, the Stream5 [32] preprocessor, part of Snort NIDS [40],
performs TCP stream reassembly at user level, emulating the net-
work stacks of various operating systems. Scap shares similar goals
with Libnids and Stream5. However, previous works treat TCP
stream reassembly as a necessity [50], mostly for the avoidance of
evasion attacks against intrusion detection systems [14, 19, 51]. On
the contrary, Scap views transport-layer streams as the fundamen-
tal abstraction that is exported to network monitoring applications,
and as the right vehicle to implement aggressive optimizations.
8.5 Per-ﬂow Cutoff
The Time Machine network trafﬁc recording system [27] ex-
ploits the heavy-tailed nature of Internet trafﬁc to reduce the num-
ber of packets stored on disk for retrospective analysis, by applying
a per-ﬂow cutoff. Limiting the size of ﬂows can also improve the
performance of intrusion detection systems under load [26, 33], by
focusing detection on the beginning of each connection. Canini et
al. [9] propose a similar scheme for trafﬁc classiﬁcation, by sam-
pling more packets from the beginning of each ﬂow. Scap shares
a similar approach with these works, but implements it within a
general framework for fast and efﬁcient network trafﬁc monitor-
ing, using the Stream abstraction to enable the implementation of
performance improvements at the most appropriate level. For in-
stance, Scap implements the per-ﬂow cutoff inside the kernel or at
the NIC layer, while previous approaches have to implement it in
user space. As a result, they ﬁrst receive all packets from kernel in
user space, and then discard those that are not needed.
8.6 Overload Control
Load shedding is proposed as a defense against overload attacks
in Bro [36], whereby the NIDS operator is responsible for deﬁn-
ing a discarding strategy. Barlet-Ros et al. [7] also propose a load
shedding technique using an on-line prediction model for query re-
source requirements, so that the monitoring system sheds load un-
der conditions of excessive trafﬁc using uniform packet and ﬂow
sampling. Dreger et al. [16] deal with packet drops due to over-
loads in a NIDS using load levels, which are precompiled sets of
ﬁlters that correspond to different subsets of trafﬁc enabled by the
NIDS depending on the workload.
8.7 Summary
To place our work in context, Figure 13 categorizes Scap and re-
lated works along two dimensions: the main abstraction provided
to applications, i.e., packet, set of packets, or stream, and the level
at which this abstraction is implemented, i.e., user or kernel level.
Traditional systems such as Libpcap [29] use the packet as basic
abstraction and are implemented in user level. More sophisticated
systems such as netmap [39], FLAME [6], and PF_RING [11] also
use the packet as basic abstraction, but are implemented in kernel
and deliver better performance. MAPI [48] and FFPF [8] use higher
*Support for multiple CPU cores and advanced NIC features (RSS, filters) 
Acknowledgements
n
o
i
t
c
a
r
t
s
b
A
o
t
f
e
S
m
a
e
r
t
S
s
t
e
k
c
a
P
t
e
k
c
a
P
Libnids 
Stream5 
Scap* 
MAPI 
FFPF 
Libpcap 
netmap* 
PF_RING* 
FLAME 
User Level 
Kernel Level 
Implementation 
Figure 13: Categorization of network monitoring tools and sys-
tems that support commodity NICs.
level abstractions such as the set of packets. Libnids and Stream5
provide the transport-layer Stream as their basic abstraction, but
operate at user level and thus achieve poor performance and miss
several opportunities of efﬁciently implementing this abstraction.
We see Scap as the only system that provides a high-level abstrac-
tion, and at the same time implements it at the appropriate level,
enabling a wide range of performance optimizations and features.
9. CONCLUSION
In this paper, we have identiﬁed a gap in network trafﬁc mon-
itoring: applications usually need to express their monitoring re-
quirements at a high level, using notions from the transport layer
or even higher, while most monitoring tools still operate at the net-
work layer. To bridge this gap, we have presented the design, im-
plementation, and evaluation of Scap, a network monitoring frame-
work that offers an expressive API and signiﬁcant performance
improvements for applications that process trafﬁc at the transport
layer and beyond. Scap gives the stream abstraction a ﬁrst-class
status, and provides an OS subsystem for capturing transport-layer
streams while minimizing data copy operations by optimally plac-
ing network data into stream-speciﬁc memory regions.
The results of our experimental evaluation demonstrate that Scap
is able to deliver all streams for rates up to 5.5 Gbit/s using a single
core, two times higher than the other existing approaches. An Scap-
based application for pattern matching handles 33% higher trafﬁc
rates and processes three times more trafﬁc at 6 Gbit/s than Snort
and Libnids. Moreover, we observe that user-level implementa-
tions of per-ﬂow cutoff just reduce the packet loss rate, while Scap’s
kernel-level implementation and subzero copy eliminate completely
packet loss for stream cutoff values of up to 1MB when perform-
ing pattern matching operations at 4 Gbit/s. This outcome demon-
strates that cutting the long tails of large ﬂows can be extremely
beneﬁcial when trafﬁc is discarded at early stages, i.e., within the
kernel or even better at the NIC, in order to spend the minimum
possible number of CPU cycles for uninteresting packets. When
eight cores are used for parallel stream processing, Scap is able to
process 5.5 times higher trafﬁc rates with no packet loss.
As networks are getting increasingly faster and network moni-
toring applications are getting more sophisticated, we believe that
approaches like Scap, which enable aggressive optimizations at
kernel-level or even at the NIC level, will become increasingly
more important in the future.
We would like to thank our shepherd Katerina Argyraki, the anony-
mous reviewers, and Periklis Akritidis for their valuable feedback.
This research was performed with the ﬁnancial support of the Pre-
vention of and Fight against Crime Programme of the European
Commission – Directorate-General Home Affairs (project GCC).
This work was also supported in part by the FP7 project SysSec
and the FP7-PEOPLE-2009-IOF project MALCODE, funded by
the European Commission under Grant Agreements No. 254116
and No. 257007. This publication reﬂects the views only of the
authors, and the Commission cannot be held responsible for any
use which may be made of the information contained therein. An-
tonis Papadogiannakis and Evangelos Markatos are also with the
University of Crete.
10. REFERENCES
[1] Application Layer Packet Classiﬁer for Linux (L7-ﬁlter).
http://l7-filter.sourceforge.net/.
[2] Libnids. http://libnids.sourceforge.net/.
[3] Performance application programming interface. http://
icl.cs.utk.edu/papi/.
[4] Sourceﬁre vulnerability research team (vrt). http://www.
snort.org/vrt/.
[5] A. V. Aho and M. J. Corasick. Efﬁcient String Matching: An
Aid to Bibliographic Search. Communications of the ACM,
18, 1975.
[6] K. G. Anagnostakis, S. Ioannidis, S. Miltchev, J. Ioannidis,
M. B. Greenwald, and J. M. Smith. Efﬁcient Packet
Monitoring for Network Management. In IFIP/IEEE
Network Operations and Management Symposium (NOMS),
2002.
[7] P. Barlet-Ros, G. Iannaccone, J. Sanjuàs-Cuxart,
D. Amores-López, and J. Solé-Pareta. Load Shedding in
Network Monitoring Applications. In USENIX Annual
Technical Conference (ATC), 2007.
[8] H. Bos, W. de Bruijn, M. Cristea, T. Nguyen, and
G. Portokalidis. FFPF: Fairly Fast Packet Filters. In USENIX
Symposium on Operating System Design and Implementation
(OSDI), 2004.
[9] M. Canini, D. Fay, D. J. Miller, A. W. Moore, and R. Bolla.
Per Flow Packet Sampling for High-Speed Network
Monitoring. In International Conference on Communication
Systems and Networks (COMSNETS), 2009.
[10] Chelsio Communications. T4 uniﬁed wire adapters.
http://www.chelsio.com/adapters/t4_
unified_wire_adapters.
[11] L. Deri. Improving Passive Packet Capture: Beyond Device
Polling. In International System Administration and Network
Engineering Conference (SANE), 2004.
[12] L. Deri. High-Speed Dynamic Packet Filtering. Journal of
Network and Systems Management, 15(3), 2007.
[13] L. Deri, J. Gasparakis, P. Waskiewicz, and F. Fusco.
Wire-Speed Hardware-Assisted Trafﬁc Filtering with
Mainstream Network Adapters. Advances in
Network-Embedded Management and Applications, 2011.
[14] S. Dharmapurikar and V. Paxson. Robust TCP Stream
Reassembly in the Presence of Adversaries. In USENIX
Security Symposium, 2005.
[15] M. Dobrescu, N. Egi, K. Argyraki, B.-G. Chun, K. Fall,
G. Iannaccone, A. Knies, M. Manesh, and S. Ratnasamy.
RouteBricks: Exploiting Parallelism to Scale Software
Routers. In ACM SIGOPS Symposium on Operating Systems
Principles (SOSP), 2009.
[16] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer.
Operational Experiences with High-Volume Network
Intrusion Detection. In ACM Conference on Computer and
Communications Security (CCS), 2004.
[17] F. Fusco and L. Deri. High Speed Network Trafﬁc Analysis
with Commodity Multi-core Systems. In ACM SIGCOMM
Conference on Internet Measurement (IMC), 2010.
[18] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee.
BotHunter: Detecting Malware Infection Through
IDS-Driven Dialog Correlation. In USENIX Security
Symposium, 2007.
[35] A. Papadogiannakis, G. Vasiliadis, D. Antoniades,
M. Polychronakis, and E. P. Markatos. Improving the
Performance of Passive Network Monitoring Applications
with Memory Locality Enhancements. Computer
Communications, 35(1), 2012.
[36] V. Paxson. Bro: A System for Detecting Network Intruders
in Real-Time. Computer Networks, 31(23-24), 1999.
[37] A. Pesterev, J. Strauss, N. Zeldovich, and R. T. Morris.
Improving Network Connection Locality on Multicore
Systems. In ACM European Conference on Computer
Systems (EuroSys), 2012.
[19] M. Handley, V. Paxson, and C. Kreibich. Network Intrusion
Detection: Evasion, Trafﬁc Normalization, and End-to-End
Protocol Semantics. In USENIX Security Symposium, 2001.
[38] T. H. Ptacek and T. N. Newsham. Insertion, Evasion, and
Denial of Service: Eluding Network Intrusion Detection.
Technical report, Secure Networks, Inc., 1998.
[20] C. M. Inacio and B. Trammell. YAF: Yet Another
Flowmeter. In USENIX Large Installation System
Administration Conference (LISA), 2010.
[21] Intel. 82599 10 GbE Controller Datasheet. http://
download.intel.com/design/network/
datashts/82599_datasheet.pdf.
[22] Intel Server Adapters. Receive Side Scaling on Intel Network
Adapters. http://www.intel.com/support/
network/adapter/pro100/sb/cs-027574.htm.
[23] S. Ioannidis, K. G. Anagnostakis, J. Ioannidis, and A. D.
Keromytis. xPF: Packet Filtering for Low-Cost Network
Monitoring. In IEEE Workshop on High-Performance
Switching and Routing (HPSR), 2002.
[24] T. Karagiannis, A. Broido, M. Faloutsos, and K. claffy.
Transport Layer Identiﬁcation of P2P Trafﬁc. In ACM
SIGCOMM Conference on Internet Measurement (IMC),
2004.
[25] W. Lee, J. B. D. Cabrera, A. Thomas, N. Balwalli, S. Saluja,
and Y. Zhang. Performance Adaptation in Real-Time
Intrusion Detection Systems. In International Symposium on
Recent Advances in Intrusion Detection (RAID), 2002.
[26] T. Limmer and F. Dressler. Improving the Performance of
Intrusion Detection using Dialog-based Payload
Aggregation. In IEEE Global Internet Symposium (GI),
2011.
[27] G. Maier, R. Sommer, H. Dreger, A. Feldmann, V. Paxson,
and F. Schneider. Enriching Network Security Analysis with
Time Travel. In ACM SIGCOMM Conference on Data
Communication, 2008.
[28] S. McCanne and V. Jacobson. The BSD Packet Filter: A
New Architecture for User-level Packet Capture. In Winter
USENIX Conference, 1993.
[29] S. McCanne, C. Leres, and V. Jacobson. Libpcap. http://
www.tcpdump.org/. Lawrence Berkeley Laboratory.
[30] Myricom. 10G-PCIE-8B-S Single-Port 10-Gigabit Ethernet
Network Adapters. https://www.myricom.com/
images/stories/10G-PCIE-8B-S.pdf.
[31] Myricom. Myricom Sniffer10G. http://www.
myricom.com/scs/SNF/doc/, 2010.
[32] J. Novak and S. Sturges. Target-Based TCP Stream
Reassembly. http://assets.sourcefire.com/
snort/developmentpapers/
stream5-model-Aug032007.pdf, 2007.
[33] A. Papadogiannakis, M. Polychronakis, and E. P. Markatos.
Improving the Accuracy of Network Intrusion Detection
Systems Under Load Using Selective Packet Discarding. In
ACM European Workshop on System Security (EUROSEC),
2010.
[34] A. Papadogiannakis, M. Polychronakis, and E. P. Markatos.
Tolerating Overload Attacks Against Packet Capturing
Systems. In USENIX Annual Technical Conference (ATC),
2012.
[39] L. Rizzo. netmap: A Novel Framework for Fast Packet I/O.
In USENIX Annual Technical Conference (ATC), 2012.
[40] M. Roesch. Snort: Lightweight Intrusion Detection for
Networks. In USENIX Large Installation System
Administration Conference (LISA), 1999.
[41] S. Savage, N. Cardwell, D. Wetherall, and T. Anderson. TCP
Congestion Control with a Misbehaving Receiver. ACM
SIGCOMM Computer Communication Review, 29(5), 1999.
[42] U. Shankar and V. Paxson. Active Mapping: Resisting NIDS
Evasion without Altering Trafﬁc. In IEEE Symposium on
Security and Privacy, 2003.
[43] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated
worm ﬁngerprinting. In USENIX Symposium on Operating
System Design and Implementation (OSDI), 2004.
[44] SMC Networks. SMC10GPCIe-XFP Tiger Card 10G PCIe
10GbE XFP Server Adapter. http://www.smc.com/
files/AF/ds_SMC10GPCIe_XFP.pdf.
[45] R. Smith, C. Estan, and S. Jha. Backtracking Algorithmic
Complexity Attacks Against a NIDS. In Annual Computer
Security Applications Conference (ACSAC), 2006.
[46] Solarfrare. 10GbE LOM/Controller Family. http://www.
solarflare.com/Content/UserFiles/
Documents/Solarflare_SFC9000_10GbE_
Controller_Brief.pdf.
[47] R. Sommer, V. Paxson, and N. Weaver. An Architecture for
Exploiting Multi-Core Processors to Parallelize Network
Intrusion Prevention. Concurrency and Computation:
Practice and Experience, 21(10), 2009.
[48] P. Trimintzios, M. Polychronakis, A. Papadogiannakis,
M. Foukarakis, E. P. Markatos, and A. Øslebø. DiMAPI: An
Application Programming Interface for Distributed Network
Monitoring. In IFIP/IEEE Network Operations and
Management Symposium (NOMS), 2006.
[49] J. Van Der Merwe, R. Caceres, Y. Chu, and C. Sreenan.
mmdump: A Tool for Monitoring Internet Multimedia
Trafﬁc. ACM SIGCOMM CCR, 30(5), 2000.
[50] G. Varghese, J. A. Fingerhut, and F. Bonomi. Detecting
Evasion Attacks at High Speeds without Reassembly. In
ACM SIGCOMM Conference on Data Communication,
2006.
[51] M. Vutukuru, H. Balakrishnan, and V. Paxson. Efﬁcient and
Robust TCP Stream Normalization. In IEEE Symposium on
Security and Privacy, 2008.
[52] S. Woo and K. Park. Scalable TCP Session Monitoring with
Symmetric Receive-side Scaling. Technical report, Technical
report, KAIST, 2012.
[53] Z. Wu, M. Xie, and H. Wang. Swift: A Fast Dynamic Packet
Filter. In USENIX Symposium on Networked Systems Design
and Implementation (NSDI), 2008.