# Packet Loss Probability and Free Memory Threshold

The following values represent different packet loss probabilities for medium-priority and high-priority streams, as a function of the free memory threshold (N) in terms of packet slots.

- **Packet Loss Probabilities:**
  - 1
  - 0.01
  - 0.0001
  - 1e-06
  - 1e-08
  - 1e-10

- **Free Memory Threshold (N) in Packet Slots:**
  - 5
  - 10
  - 15
  - 20
  - 25
  - 30
  - 35
  - 40

- **Figures:**
  - **Figure 11:** Packet loss probability for high-priority packets as a function of N.
  - **Figure 12:** Packet loss probability for medium-priority packets as a function of N.

## 8. Related Work

### 8.1 Memory Access Locality
Papadogiannakis et al. [35] demonstrate that memory access locality in passive network monitoring applications can be improved by reordering the packet stream based on source and destination port numbers. Similarly, Scap enhances memory access locality and cache usage by grouping packets into streams.

### 8.2 Taking Advantage of Multi-core Systems
Fusco and Deri [17] leverage the receive-side scaling feature of modern NICs in conjunction with multi-core systems to enhance packet capture performance. Sommer et al. [47] utilize multi-core processors to parallelize event-based intrusion prevention systems using multiple event queues, which collect semantically related events for in-order execution. This approach localizes memory access to shared state by the same thread. Pesterev et al. [37] improve TCP connection locality in multi-core servers using flow director filters to optimally balance TCP packets among available cores. These works are complementary to Scap, as their advancements in multi-core systems can be easily integrated with Scap.

### 8.3 Dynamic Packet Filtering
Dynamic packet filtering reduces the cost of adding and removing filters at runtime [12, 49, 53]. Deri et al. [13] propose using flow director filters for common filtering needs. Other approaches allow applications to offload simple tasks to the kernel packet filter to improve performance [6, 8, 23]. Scap introduces a different approach: applications using the Stream abstraction can communicate their stream-oriented filtering and processing needs to the underlying kernel module through the Scap API, achieving lower complexity and better performance. For example, Scap can filter packets within the kernel or at the NIC layer based on a flow size cutoff limit, allowing dynamic cutoff values per-stream, a functionality not supported by existing packet filtering systems.

### 8.4 TCP Stream Reassembly
Libnids [2] is a user-level library built on top of Libpcap for TCP stream reassembly, emulating a Linux network stack. Similarly, the Stream5 [32] preprocessor, part of Snort NIDS [40], performs TCP stream reassembly at the user level, emulating various operating system network stacks. While these tools treat TCP stream reassembly as a necessity, primarily to avoid evasion attacks against intrusion detection systems [14, 19, 51], Scap views transport-layer streams as the fundamental abstraction for network monitoring applications, enabling aggressive optimizations.

### 8.5 Per-Flow Cutoff
The Time Machine network traffic recording system [27] exploits the heavy-tailed nature of Internet traffic to reduce the number of stored packets for retrospective analysis by applying a per-flow cutoff. Limiting flow sizes can also improve the performance of intrusion detection systems under load [26, 33] by focusing detection on the beginning of each connection. Canini et al. [9] propose a similar scheme for traffic classification by sampling more packets from the start of each flow. Scap shares this approach but implements it within a general framework for fast and efficient network traffic monitoring, using the Stream abstraction to enable performance improvements at the most appropriate level. For instance, Scap implements the per-flow cutoff inside the kernel or at the NIC layer, while previous approaches do so in user space, first receiving all packets and then discarding those not needed.

### 8.6 Overload Control
Load shedding is proposed as a defense against overload attacks in Bro [36], where the NIDS operator defines a discarding strategy. Barlet-Ros et al. [7] propose a load shedding technique using an online prediction model for query resource requirements, allowing the monitoring system to shed load under excessive traffic conditions using uniform packet and flow sampling. Dreger et al. [16] address packet drops due to overloads in NIDS using load levels, which are precompiled sets of filters corresponding to different subsets of traffic enabled by the NIDS depending on the workload.

### 8.7 Summary
To contextualize our work, Figure 13 categorizes Scap and related works along two dimensions: the main abstraction provided to applications (packet, set of packets, or stream) and the implementation level (user or kernel). Traditional systems like Libpcap [29] use the packet as the basic abstraction and are implemented at the user level. More advanced systems such as netmap [39], FLAME [6], and PF_RING [11] also use the packet as the basic abstraction but are implemented in the kernel, delivering better performance. MAPI [48] and FFPF [8] use higher-level abstractions such as the set of packets. Libnids and Stream5 provide the transport-layer stream as their basic abstraction but operate at the user level, leading to poor performance and missed opportunities for efficient implementation. Scap is unique in providing a high-level abstraction and implementing it at the appropriate level, enabling a wide range of performance optimizations and features.

## 9. Conclusion
In this paper, we identified a gap in network traffic monitoring: applications need to express their monitoring requirements at a high level using transport-layer or higher notions, while most monitoring tools still operate at the network layer. To bridge this gap, we presented the design, implementation, and evaluation of Scap, a network monitoring framework that offers an expressive API and significant performance improvements for applications processing traffic at the transport layer and beyond. Scap elevates the stream abstraction to a first-class status and provides an OS subsystem for capturing transport-layer streams while minimizing data copy operations by optimally placing network data into stream-specific memory regions.

Our experimental results show that Scap can deliver all streams at rates up to 5.5 Gbit/s using a single core, twice the rate of other existing approaches. An Scap-based application for pattern matching handles 33% higher traffic rates and processes three times more traffic at 6 Gbit/s than Snort and Libnids. Additionally, user-level implementations of per-flow cutoff only reduce the packet loss rate, while Scap's kernel-level implementation and subzero copy eliminate packet loss for stream cutoff values up to 1MB when performing pattern matching operations at 4 Gbit/s. This demonstrates that cutting the long tails of large flows can be extremely beneficial when traffic is discarded early, i.e., within the kernel or at the NIC, to minimize CPU cycles for uninteresting packets. When eight cores are used for parallel stream processing, Scap can process 5.5 times higher traffic rates with no packet loss.

As networks become faster and network monitoring applications more sophisticated, we believe that approaches like Scap, which enable aggressive optimizations at the kernel or even NIC level, will become increasingly important in the future.

We would like to thank our shepherd Katerina Argyraki, the anonymous reviewers, and Periklis Akritidis for their valuable feedback. This research was financially supported by the Prevention of and Fight against Crime Programme of the European Commission â€“ Directorate-General Home Affairs (project GCC), the FP7 project SysSec, and the FP7-PEOPLE-2009-IOF project MALCODE, funded by the European Commission under Grant Agreements No. 254116 and No. 257007. This publication reflects the views only of the authors, and the Commission cannot be held responsible for any use made of the information contained herein. Antonis Papadogiannakis and Evangelos Markatos are also with the University of Crete.

## 10. References
[References listed here as in the original text]

---

This revised version aims to make the text more coherent, clear, and professional.