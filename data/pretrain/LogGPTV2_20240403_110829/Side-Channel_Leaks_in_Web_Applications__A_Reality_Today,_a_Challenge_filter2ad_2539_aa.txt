title:Side-Channel Leaks in Web Applications: A Reality Today, a Challenge
Tomorrow
author:Shuo Chen and
Rui Wang and
XiaoFeng Wang and
Kehuan Zhang
2010 IEEE Symposium on Security and Privacy
Side-Channel Leaks in Web Applications: a Reality Today, a Challenge Tomorrow 
Shuo Chen 
Microsoft Research 
Microsoft Corporation 
Redmond, WA, USA 
PI:EMAIL 
taxation, 
Abstract–  With  software-as-a-service  becoming  mainstream, 
more and more applications are delivered to the client through 
the  Web.  Unlike  a  desktop  application,  a  web  application  is 
split into browser-side and server-side components. A subset of 
the  application’s  internal  information  flows  are  inevitably 
exposed on the network. We show that despite encryption, such 
a side-channel information leak is a realistic and serious threat 
to  user  privacy.  Specifically,  we  found  that  surprisingly 
detailed  sensitive  information  is  being  leaked  out  from  a 
number  of  high-profile,  top-of-the-line  web  applications  in 
healthcare, 
search:  an 
eavesdropper  can  infer  the  illnesses/medications/surgeries  of 
the  user,  her  family  income  and  investment  secrets,  despite 
HTTPS  protection;  a  stranger  on  the  street  can  glean 
enterprise employees' web search queries, despite WPA/WPA2 
Wi-Fi  encryption.  More  importantly,  the  root  causes  of  the 
problem  are  some 
fundamental  characteristics  of  web 
applications:  stateful  communication,  low  entropy  input  for 
better  interaction,  and  significant  traffic  distinctions.  As  a 
result,  the  scope  of  the  problem  seems  industry-wide.  We 
further  present  a  concrete  analysis  to  demonstrate  the 
challenges  of  mitigating  such  a  threat,  which  points  to  the 
necessity of a disciplined engineering practice for side-channel 
mitigations in future web application developments.  
investment  and  web 
Keywords– side-channel-leak; Software-as-a-Service (SaaS); web 
application; encrypted traffic; ambiguity set; padding 
I.  INTRODUCTION 
Regarding the pseudonyms used in the paper  
This  paper  reports  information  leaks  in  several  real-
world  web  applications.  We  have  notified  all  the 
affected  parties  of  our  findings.  Some  requested  us  to 
anonymize their product names. Throughout the paper, 
we use superscript “A” to denote such pseudonyms, e.g., 
OnlineHealthA, OnlineTaxA, and OnlineInvestA. 
The  drastic  evolution  in  web-based  computing  has 
come  to  the  stage  where  applications  are  increasingly 
delivered as services to web clients.  Such a software-as-a-
service  (SaaS)  paradigm  excites  the  software  industry. 
Compared  to  desktop  software,  web  applications  have  the 
advantage  of  not  requiring  client-side  installations  or 
updates, and thus are easier to deploy and maintain. Today 
web applications are  widely  used to process very sensitive 
user data including emails, health records, investments, etc. 
However, unlike its desktop counterpart, a web application 
is  split  into  browser-side  and  server-side  components.  A 
subset  of  the  application’s  internal  information  flows  (i.e., 
1081-6011/10 $26.00 © 2010 IEEE
DOI 10.1109/SP.2010.20
191
Rui Wang, XiaoFeng Wang, Kehuan Zhang 
School of Informatics and Computing 
Indiana University Bloomington 
Bloomington, IN, USA 
[wang63, xw7, kehzhang]@indiana.edu 
data flows and control flows) are inevitably exposed on the 
network,  which  may  reveal  application  states  and  state-
transitions.  To  protect 
in  critical 
applications against network sniffing, a common practice is 
to encrypt their network traffic. However, as discovered in 
our research, serious information leaks are still a reality.  
information 
the 
For  example,  consider  a  user  who  enters  her  health 
profile into OnlineHealthA by choosing an illness condition 
from a list provided by the application. Selection of a certain 
illness causes the browser to communicate with the server-
side component of the application, which in turn updates its 
state,  and  displays  the  illness  on  the  browser-side  user 
interface.  Even 
the  communications  generated 
during these state transitions are protected by HTTPS, their 
observable attributes, such as packet sizes and timings, can 
still give away the information about the user’s selection.   
though 
Side-channel  information  leaks.    It  is  well  known  that 
the  aforementioned  attributes  of  encrypted  traffic,  often 
referred  to  as  side-channel  information,  can  be  used  to 
obtain some insights about the communications. Such side-
channel information leaks have been extensively studied for 
a decade, in the context of secure shell (SSH) [15], video-
streaming  [13],  voice-over-IP  (VoIP)  [23],  web  browsing 
and  others.  Particularly,  a  line  of  research  conducted  by 
various  research  groups  has  studied  anonymity  issues  in 
encrypted web traffic. It has been shown that because each 
web  page  has  a  distinct  size,  and  usually  loads  some 
resource objects (e.g., images) of different sizes, the attacker 
can  fingerprint  the  page  so  that  even  when  a  user  visits  it 
through HTTPS, the page can be re-identified [7][16]. This 
is a concern for anonymity channels such as Tor [17], which 
are expected to hide users’ page-visits from eavesdroppers.  
       Although  such  side-channel  leaks  of  web  traffic  have 
been known for years, the whole issue seems to be neglected 
by  the  general  web  industry,  presumably  because  little 
evidence  exists  to  demonstrate  the  seriousness  of  their 
consequences  other 
the  users  of 
anonymity channels.  Today, the Web has evolved beyond a 
publishing  system  for  static  web  pages,  and  instead, 
becomes  a  platform  for  delivering  full-fledged  software 
applications.  The  side-channel  vulnerabilities  of  encrypted 
communications,  coupled  with  the  distinct  features  of  web 
applications  (e.g.,  stateful  communications)  are  becoming 
an  unprecedented  threat  to  the  confidentiality  of  user  data 
processed  by  these  applications,  which  are  often  far  more 
sensitive than the identifiability of web pages studied in the 
prior  anonymity  research.  In  the  OnlineHealthA  example, 
the  effect  on 
than 
the 
technical  challenges 
different  health  records  correspond  to  different  state-
transitions  in  the  application,  whose  traffic  features  allow 
the attacker to effectively infer a user’s health information. 
Despite the importance of this side-channel threat, little has 
been done in the  web application domain to understand its 
scope  and  gravity,  and 
in 
developing its mitigations.  
       Our work.  In this paper, we report our findings on the 
magnitude  of  such  side-channel  information  leaks.  Our 
research shows that surprisingly detailed sensitive user data 
can be reliably inferred from the web traffic of a number of 
high-profile, 
top-of-the-line  web  applications  such  as 
OnlineHealthA,  OnlineTaxA  Online,  OnlineInvestA  and 
Google/Yahoo/Bing  search  engines:  an  eavesdropper  can 
infer  the  medications/surgeries/illnesses  of  the  user,  her 
annual  family  income  and  investment  choices  and  money 
allocations,  even  though  the  web  traffic  is  protected  by 
HTTPS. We also show that even in a corporate building that 
deploys  the  up-to-date  WPA/WPA2  Wi-Fi  encryptions,  a 
stranger without any credential can sit outside the building 
to glean the query words entered into employees’ laptops, as 
if they were exposed in plain text in the air. This enables the 
attacker to profile people’s actual online activities.  
More importantly, we found that the root causes of the 
problem  are  certain  pervasive  design  features  of  Web  2.0 
applications: for example, AJAX GUI widgets that generate 
web traffic in response to even a single keystroke input or 
mouse click, diverse resource objects (scripts, images, Flash, 
etc.) that make the traffic features associated with each state 
transition distinct, and an application’s stateful interactions 
with  its  user  that  enable  the  attacker  to  link  multiple 
observations  together  to  infer  sensitive  user  data.    These 
features make the side-channel vulnerability fundamental to 
Web 2.0 applications.   
Regarding  the  defense,  our  analyses  of  real-world 
vulnerability scenarios suggest that mitigation of the threat 
requires  today’s  application  development  practice  to  be 
significantly  improved.  Although  it  is  easy  to  conceive 
high-level  mitigation  strategies  such  as  packet  padding, 
concrete mitigation policies have to be specific to individual 
applications.  This  need  of  case-by-case  remedies  indicates 
the challenges the problem presents: on one hand, detection 
of  the  side-channel  vulnerabilities  can  be  hard,  which 
requires developers to analyze application semantics, feature 
designs, traffic characteristics and publicly available domain 
knowledge.  On  the  other  hand,  we  show  that  without 
finding  the  vulnerabilities,  mitigation  policies  are  likely  to 
be  ineffective  or  incur  prohibitively  high  communication 
overheads.  These  technical  challenges  come  from  the  fact 
that  sensitive  information  can  be  leaked  out  at  many 
application  states  due  to  the  stateful  nature  of  web 
applications,  and  at  different 
the  SaaS 
infrastructure  due  to  its  complexities.  Therefore,  effective 
defense  against  the  side-channel  leaks  is  a  future  research 
topic with strong practical relevance.  
layers  of 
192
In  addition,  we  realized  that  enforcing  the  security 
policies to control side-channel leaks should be a joint work 
by  web  application,  browser  and  web  server.  Today’s 
browsers and web servers are not ready to enforce even the 
most  basic  policies,  due 
lack  of  cross-layer 
communications,  so  we  designed  a  side-channel  control 
infrastructure  and  prototyped  its  components  as  a  Firefox 
add-on and an IIS extension, as elaborated in Appendix C.  
      Contributions.  The  contributions  of  this  paper  are 
summarized as follows:  
•  Analysis  of 
the  side-channel  weakness 
the 
to 
features  of 
to  prominent  design 
in  web 
applications.  We present a model to analyze the side-
channel weakness in web applications and attribute the 
problem 
these 
applications.  We then show concrete vulnerabilities in 
several high-profile and really popular web applications, 
which disclose different types of sensitive information 
through various application features. These studies lead 
to  the  conclusion  that  the  side-channel  information 
leaks are likely to be fundamental to web applications.  
In-depth study on the challenges in mitigating the threat. 
We  evaluated  the  effectiveness  and  the  overhead  of 
common  mitigation  techniques.    Our  research  shows 
that  effective  solutions  to  the  side-channel  problem 
have  to  be  application-specific,  relying  on  an  in-depth 
understanding  of  the  application  being  protected.  This 
suggests  the  necessity  of  a  significant  improvement  of 
the current practice for developing web applications.  
• 
       Roadmap. The rest of the paper is organized as follows: 
Section II surveys related prior work and compares it with 
our research; Section III describes an abstract analysis of the 
side-channel  weaknesses  in  web  applications;  Section  IV 
reports such weaknesses in high-profile applications and our 
techniques  that  exploit  them;  Section  V  analyzes  the 
challenges  in  mitigating  such  a  threat  and  presents  our 
vision on a disciplined development practice for future web 
applications; Section VI concludes the paper.    
II. 
RELATED WORK 
Side  channel  leaks  have  been  known  for  decades.  A 
documented attack is dated back to 1943 [22]. Side-channel 
leaks  are  discussed  broadly 
in  many  contexts,  not 
necessarily  about  encrypted  communications.  Information 
can  be  leaked  through  electromagnetic  signals,  shared 
memory/registers/files  between  processes,  CPU  usage 
metrics,  etc.  Researchers  have  shown 
that  keystroke 
recoveries  are  feasible  due  to  keyboard  electromagnetic 
emanations  [18].  In  Linux,  the  stack  pointer  ESP  of  a 
process can be profiled by an attack process, and thus inter-
keystroke timing information can be estimated in the cross-
process manner [24]. Also related is the research on the co-
resident-VM  problem  within  commercial  cloud  computing 
infrastructures:  Ristenpart  et  al  demonstrated 
that  an 
Amazon EC2 user can intentionally place a VM on the same 
physical machine as another customer’s VM, which allows 
the  former  to  estimate  the  cache  usage,  traffic  load  and 
keystroke timing of the latter [12].  
In the context of encrypted communications, it has been 
shown  that  the  side-channel  information,  such  as  packet 
timing  and  sizes,  allows  a  network  eavesdropper  to  break 
cryptographic  systems  or  infer  keystrokes  in  SSH,  spoken 
phrases in VoIP and movie titles in video-streaming systems. 
Brumley et al showed a timing attack against OpenSSL that 
extracts  RSA  secret  keys  [2].  Song  et  al  showed  that 
because  SSH  is  an  interactive  remote  shell  service  and 
typing  different  keystroke-combinations  naturally  produces 
slight  timing  characteristics,  a  network  eavesdropper  can 
build  a  Hidden  Markov  Model  (HMM)  to  infer  the 
keystrokes  [15].  When  applied  to  guess  a  password,  the 
attack achieves a 50-time speedup compared to a brute-force 
guessing  attack,  i.e.,  more  than  6-bit  reduction  of  the 
password’s  entropy.  Wright  et  al  studied  the  side-channel 
leak  in  Voice-over-IP  systems  that  use  variable-bit-rate 
encoding  schemes  [23].  In  their  experiment,  simulated 
conversations  were  constructed  by  randomly  selecting 
sentences  from  a  standard  corpus  containing  thousands  of 
spoken  sentences.  They  tried  to  determine  if  a  target 
sentences, also from the corpus, exists in each conversation, 
and achieved 0.5 recall and 0.5 precision, i.e., when a target 
sentence is in a conversation, the attack algorithm says yes 
with a 0.5 probability; when the attack algorithm says yes, 
there  is  a  0.5  probability  that  the  target  sentence  is  in  the 
conversation.  Saponas  et  al  showed  that  the  side-channel 
leak  from  Slingbox  Pro,  a  device  for  encrypted  video-
streaming,  allows  the  attacker  to  determine  the  title  of  the 
movie being played [13].  
In  the  context  of  encrypted  web  communications, 
researchers  have  recognized  the  web  anonymity  issue  for 
many years, i.e., the attacker can fingerprint web pages by 
their  side-channel  characteristics,  then  eavesdrop  on  the 
victim user’s encrypted traffic to identify which web pages 
the  user  visits.  Wagner  and  Schneier  briefly  cited  their 
personal  communication  with  Yee  in  1996  about  the 
possibility  of  using  this  idea  against  SSL/TLS  [19].  An 
actual attack demo was described in a course project report 
in 1998 by Cheng et al [6]. Sun et al [16] and Danezis [7] 
both  indicated  that  this  type  of  side-channel  attack  defeats 
the goal of anonymity channels, such as Tor, MixMaster and 
WebMixes.  Sun  et  al’s  experiment  showed  that  100,000 
web  pages  from  a  wide  range  of  different  sites  could  be 
effectively  fingerprinted.  Besides  SSL/TLS,  Bissias  et  al 
conducted a similar experiment on WPA and IPSec [4].  
Our work is motivated by these anonymity studies, but 
is  different  in  a  number  of  major  aspects:  (1)  our  study 
focuses  on  web  applications  and  the  sensitive  user  data 
leaked  out  from  them,  rather  than  the  identifiability  of 
individual  web  pages;  (2)  application  state-transitions  and 
semantics are the focal point of our analyses, while the prior 
studies are agnostic to them;  (3) our target audience is the 
developers  of  sensitive  web  applications,  while  the  natural 
audience of the web-anonymity research is the providers of 
anonymity channels, as their objective is directly confronted 
by the anonymity issue studied in the prior research.  
FUNDAMENTALS OF WEB APPLICATION 
III. 
INFORMATION LEAKS  
is 
Conceptually,  a  web  application  is  quite  similar  to  a 
traditional  desktop  application.  They  both  work  on  input 
data  from  the  user  or  the  file  system/database,  and  their 
state-transitions  are  driven  by  their  internal  information 
flows  (both  data  flows  and  control  flows).  The  only 
fundamental  difference  between 
that  a  web 
application’s input points, program logic and program states 
are split between the browser and the server, so a subset of 
its information flows must go through the network. We refer 
to 
to 
eavesdropping  on  the  wire  and  in  the  air,  and  thus  often 
protected by HTTPS and Wi-Fi encryptions.  
flows.  Web  flows  are  subject 
them  as  web 
them 
The  attacker’s  goal  is  to  infer  sensitive  information 
from the encrypted web traffic. In other words, an attack can 