satisﬁes the following game. At the beginning, the challenger chooses uniformly at
5
random a bit b and a random d-bit string i. According to the value of b, he assigns ext
to a random function taken in F(n,ℓ), the set of all functions from {0, 1}n to {0, 1}ℓ, or
to the randomness extractor cExti. Then the adversary sends to the challenger an eﬃ-
ciently samplable probability distribution D over {0, 1}n whose min-entropy is greater
than m and possibly a label label ∈ Dom. The challenger chooses x according to
the distribution D and sends to the adversary (i, ext(x, label)). Finally, the adversary
outputs a random bit b′ for her guess of b. Her advantage, denoted advcre
cExt (A), is:
(cid:12)(cid:12)(cid:12)Pr[Aext ⇒ 1 : ext
$
← cExt] − Pr[Aext ⇒ 1 : ext
$
← F(n,ℓ)](cid:12)(cid:12)(cid:12)
This notion directly implies the semantic security, against a passive adversary, of a
key generated with a computational randomness extractor from a high-entropy random
source. Indeed, if an adversary is able to attack the semantic security of the key, then
it is able to distinguish this computational randomness extractor from a perfectly
random function. Therefore, if a good computational randomness extractor is used
to generate the key, the semantic security of the key is guaranteed. If authentication
techniques are used, the key exchange security against an active adversary reduces to
the security against a passive adversary and therefore the semantic security of the key
is guaranteed even against an active adversary.
Computational Almost Universality. Let F : Keys×Dom → Rng be a function
family. We generalize here the deﬁnition of [2]. The goal of a m-au adversary A is to
generate an eﬃciently samplable distribution D over Dom2 with min-entropy at least
m such that, for a random key K and a random couple (M1, M2) chosen according to
D in Dom2, FK (M1) and FK (M2) collision with high probability. Her m-au-advantage,
denoted advm−au
(A), is:
F
Pr" F (K, M1) = F (K, M2)
M1 6= M2
:
A ⇒ D; K $← Keys
(M1, M2) D← Dom2# .
Note that Bellare’s deﬁnition is the particular case when m, the min-entropy of D,
equals 0. When m ≥ 1, this is a weaker notion than the original one, because every
m-au adversary can be turned into a 0-au adversary with the same running-time and
the same advantage (the 0-au adversary runs the m-au adversary, chooses (M1, M2)
according to D and sends it to the challenger).
Pseudo-Random Function. Let F : Keys × Dom → Rng be a function family.
We denote by F = F(Dom,Rng) all the functions from Dom to Rng. The goal of a
prf-adversary A, which runs in time T , against F is to guess the value of b in the
following game. The challenger chooses a bit b at random; if b = 1 he assigns f to a
random function from F otherwise he chooses a random key K in Keys and assigns f
to F (K, ·). The adversary can interact with f making up to q queries xi and receives
f (xi). The prf-advantage of A, denoted advprf
F (A), is:
(cid:12)(cid:12)(cid:12)PrhAF (K,·) ⇒ 1 : K
← Keysi − PrhAf ⇒ 1 : f ← Fi(cid:12)(cid:12)(cid:12) .
preﬁx-free if for all couple (x, x′) ∈ S 2 such that Prh(X, X ′) = (x, x′) : X
Prefix-freeness. Let S be a set of bit strings and let x and x′ be a couple of bit string
from S, we denote by x ⊂ x′ the fact that x is a preﬁx of x′. A distribution D over S is
0, x ⊂ x′ implies x = x′. The set S is preﬁx-free if for all couples (x, x′) ∈ S 2, x ⊂ x′
implies that x = x′. An adversary is said preﬁx-free if the set of its queries form a
preﬁx-free set and if it outputs only preﬁx-free distributions.
← S, X ′ D
D
$
← Si >
6
3 Hmac Security as a Key Derivation Function
3.1 Description of Hmac
The cascade construction The cascade construction is the construction used for
iterated hash functions. We denote by H : {0, 1}κ × {0, 1}∗ → {0, 1}κ such a hash
function and by h : {0, 1}κ × {0, 1}b → {0, 1}κ the so-called compression function. The
→ {0, 1}κ, deﬁned
cascade construction of h is the function h∗ : {0, 1}κ ×(cid:0){0, 1}b(cid:1)∗
by:
y0 = a, yi = h(yi−1, xi) and h∗(a, x) = yn
where x = (x1, . . . , xn) is a n · b bit string and a ∈ {0, 1}κ. To construct H, a way
to pad messages to an exact multiple of b bits needs to be deﬁned. In practice this
padding is a function of the length of the input x, |x|. We denote by pad(|x|) the
function induced by the padding and by xpad = xkpad(|x|). The function H is deﬁned
by H(a, x) = h∗ (a, xpad).
Let 1 ≤ t ≤ κ be an integer. In the following, for any function with range {0, 1}κ,
we denote F the function F for which the κ − t least signiﬁcant bits of the output
are truncated, that is if msbt (·) denote the t most signiﬁcant bits of a bit string, for
every input x, F (x) = msbt (F (x)). We mostly use this notation for h∗ and H (the
reader may think about sha-384 which is a truncated iterated hash function for which
t = 384 and κ = 512).
Nmac Nmac is a hash function family from {0, 1}κ × {0, 1}κ × {0, 1}∗ to {0, 1}c. It
is constructed from a (possibly truncated) iterated hash function Hash from {0, 1}κ ×
{0, 1}∗ to {0, 1}c. If (k1, k2) ∈ ({0, 1}κ)2 is a couple of keys and x ∈ {0, 1}∗ the input,
the deﬁnition of Nmac is:
NmacHash(k1, k2, x) = Hash (k2, Hash(k1, x)) .
(1)
The hash function family Hash can be either a classical or a truncated iterated
hash function family, that is Hash = H and c = κ or Hash = H and c = t. In these
cases equation (1) becomes:
= h (k2, h∗(k1, xpad)pad) ,
NmacH(k1, k2, x) = h∗(cid:16)k2, h∗ (k1, xpad)pad(cid:17)
NmacH(k1, k2, x) = h∗(cid:16)k2, h∗ (k1, xpad)pad(cid:17)
= h(cid:0)k2, h∗(k1, xpad)pad(cid:1) .
From now on, we assume that the padded message obtained from any κ-bit query is
never larger then b bits (it is the case in practice). This explains the last equality of
the equations above.
Hmac Hmac is a hash function from {0, 1}∗ × {0, 1}∗ to {0, 1}κ. Let ipad and opad
be two b-bit strings and IV be a κ-bit string. If the key k is a bit string from {0, 1}b,
then HmacHash
IV (ipad, opad; k, x) is equal to:
Hash(cid:16)IV,(cid:2)k ⊕ opad(cid:3)(cid:13)(cid:13)Hash(cid:0)IV, [k ⊕ ipad]kx(cid:1)(cid:17).
(2)
7
The bit strings opad, ipad and IV are constants deﬁned in the Hmac standard [5],
but in the following we assume that ipad and opad could vary and are chosen uniformly
at random. In practice, these variables were chosen at random once for all when the
standard was deﬁned. The consequences of this assumption in practice are discussed
in details in subsection 4.2. In the following we denote as index of Hmac the ﬁxed
value IV and we put between the brackets variables ipad and opad which are chosen
randomly.
If k is a b-bit string, in the cases when Hash = H and Hash = H, deﬁnition (2) can
be restated using Nmac, and then HmacH
are respectively equal to:
IV (ipad, opad; k, x) and HmacH
IV (ipad, opad; k, x)
NmacH (h(IV, k ⊕ ipad), h(IV, k ⊕ opad), x) ,
NmacH (h(IV, k ⊕ ipad), h(IV, k ⊕ opad), x) .
Note that these equations are not exactly true because the padding is not exactly
the same in Hmac and in Nmac: in Hmac one block key is concatenated to the
message and this changes the length of the hash function input and then changes the
associated padding. However, to simplify the notations, we can omit this particularity
since it does not alterate the results.
If k is not a b-bit string, then it is ﬁrst transformed into a b-bit string. If k is
smaller than b bits, then it is ﬁrst padded with as many ’0’ as needed to obtain a b-bit
string ; the resulting bit string is used as a key, as deﬁned in (2). If k is longer than b
bits, as we explain in the introduction, the Hmac standard [5] imposes to ﬁrst hash k
using Hash to obtain a c key digest ; since c ≤ b in practice, the key digest is padded
with b − c ’0’ and the resulting b-bit string is used as a key, as deﬁned in (2).
The key extraction construction In this paper we study the following construction
used for key derivation: let pmk denote a high entropy s-bit string called the premaster-
secret, label some bit string possibly adversarily generated, opad the ﬁxed bit string
as described in the Hmac standard [5] and mk the master-key generated by this
construction. The variables ipad and opad are chosen uniformly at random and mk is
computed as follows:
mk = HmacHash
IV (ipad, opad; pmk, label).
We show that this construction is a good computational randomness extractor that is
that the triplet (ipad, opad; mk) is indistinguishable from a random bit string. As the
deﬁnition of Hmac depends on the size of the pmk, our proof is also pmk dependent:
the proof method is not exactly the same if pmk is smaller that the block size or if it
is longer.
3.2 When the Shared Key is Smaller Than the Block Length
The study of this case is motivated by the use in practice of elliptic curve Diﬃe-
Hellman key exchange. The premaster-secret pmk generated is then presumably 512-
bit long, and is smaller than the block-length. We directly show that Hmac is a
randomness extractor when it is used with H and H.
8
Hmac with H Firstly we show that, for a key smaller than the block size, Hmac is a
good randomness extractor when it is used with H. For the proof see the appendix A.
We underline that in this theorem we assume that ipad and opad are chosen uniformly
at random, that h(k, ·) is a prf when k is the key, and that h(IV, · ⊕ k) is a prf when
k is the key.
Theorem 2. Let IV be a ﬁxed κ-bit string and let h be a function family from
{0, 1}κ × {0, 1}b to {0, 1}κ, where the key is the ﬁrst input on κ bits. Let h′ be the
hash function deﬁned by h′
IV (pad, ·) = h(IV, · ⊕ pad) where the key is pad. Let A be a
cre-adversary against the construction that has time-complexity at most T , generates
labels of at most ℓ blocks and a key of at most 1 block and min-entropy m. Then there
exist one prf-adversary A1 against h′ and two prf-adversaries A2 and A3 against h
such that advcre
HmacH (A) is upper bounded by:
r22κ(cid:16)2−m + 2 · advprf
h′ (A1)(cid:17)
2
+
1
2κ
+ advprf
h
(A2) + 2ℓ · advprf
h
(A3)
where A1 makes two queries with time-complexity T + 2Th, A2 makes one query with
time-complexity T and A3 makes at most 2 queries with time-complexity O(ℓ · Th),
where Th is the time for one computation of h.
The main ideas of the proof is to show that the two bitstrings k1 = h(IV, ipad ⊕ k)
and k2 = h(IV, opad ⊕ k) are pseudorandom and independent and then to use them
to key Nmac as a prf. Firstly, contrary to [4] where it is assumed that k1 and k2 are
computationally independent, we prove it using the following hash function family:
F = (h(IV, · ⊕ ipad)kh(IV, · ⊕ opad))(ipad,opad)
which is a prf and therefore it is cau. More precisely, there exists a prf-adversary A1
against h′ such that the advantage of the cau-adversary against F is upper bounded
by 2advprf
h′ (A1) + 1/22κ. Then we can apply a computational variant of the Leftover
Hash Lemma to F to extract the entropy of the key and thus show that the output is
indistinguishable from a random bit string.
The computational Leftover Hash Lemma is the following:
Lemma 3 (computational LHL). Let H be a family of functions from {0, 1}k ×
Dom to {0, 1}t such that for every au-adversary B, running in time T and producing a
H (B) ≤ 1/2t + ε. Then
distribution over Dom × Dom of min-entropy at least 2m, advcau
for every adversary A running in time O(T ) producing a distribution of min-entropy
at least m:
advcre
H (A) ≤p2t · (2−m + ε).
The proof of this lemma is in appendix C. Note that if ε were greater than 2−2κ,
we would have 22κ · ε ≥ 1 and the upper bound would be meaningless. We need that
ε ≪ 2−2κ, that is why we make ipad and opad vary and not only IV as we would
have preferred to have one assumption on h. Indeed, making the IV vary is equivalent
to consider h as a prf when the key is IV . Yet, the exhaustive search prf-adversary
against h has a prf-advantage which is equal to O(2−κ). It means the better prf-
adversary against h has an advantage better than O(2−κ), where κ is the key size.
Therefore, assuming that h is a prf is not enough, whereas, since ipad and opad are
large, h′ security level may be suﬃcient.
In the previous step of the proof, we have generated with F , two (concatenated)
computationally pseudorandom and independent κ-bit strings which can be used to
key Nmac. Thus, we can use the fact that Nmac is a prf. When Nmac is used with
a classical iterated hash function, this fact was proved by Bellare [2]:
9
Lemma 4. Let h : {0, 1}κ × {0, 1}b → {0, 1}κ be a family of functions. Let ANmacH be
a prf-adversary against NmacH that makes at most q oracle queries, each of at most ℓ
blocks, and has time-complexity T . Then there exist prf-adversaries A1 and A2 against
h such that advprf
NmacH(cid:0)ANmacH(cid:1) is upper bounded by:
2(cid:19)(cid:20)2ℓ · advprf
(A1) +(cid:18)q
advprf
h
h
(A2) +
1
2κ(cid:21) .
Furthermore, A1 has time-complexity at most T and makes at most q oracle queries
while A2 has time-complexity at most O(ℓ · Th) and makes at most 2 oracle queries,
where Th is the time for one computation of h.
Hmac with H Secondly we show that, for a key smaller than the block size, Hmac
used with H is a good randomness extractor.