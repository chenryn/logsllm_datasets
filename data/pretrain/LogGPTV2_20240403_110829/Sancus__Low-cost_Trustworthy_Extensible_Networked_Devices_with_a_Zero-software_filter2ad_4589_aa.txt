title:Sancus: Low-cost Trustworthy Extensible Networked Devices with a Zero-software
Trusted Computing Base
author:Job Noorman and
Pieter Agten and
Wilfried Daniels and
Raoul Strackx and
Anthony Van Herrewege and
Christophe Huygens and
Bart Preneel and
Ingrid Verbauwhede and
Frank Piessens
Sancus: Low-cost Trustworthy Extensible 
Networked Devices with a Zero-software  
Trusted Computing Base
Job Noorman, Pieter Agten, Wilfried Daniels, Raoul Strackx, Anthony Van Herrewege, 
Christophe Huygens, Bart Preneel, Ingrid Verbauwhede, and Frank Piessens, KU Leuven
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Sancus: Low-cost trustworthy extensible networked devices with a
zero-software Trusted Computing Base
Job Noorman
Anthony Van Herrewege
Pieter Agten
Christophe Huygens
Wilfried Daniels
Bart Preneel
Raoul Strackx
Ingrid Verbauwhede
Frank Piessens
iMinds-DistriNet and iMinds-COSIC, KU Leuven
{Job.Noorman, Pieter.Agten, Wilfried.Daniels, Raoul.Strackx,
Christophe.Huygens, Frank.Piessens}@cs.kuleuven.be
{Anthony.VanHerrewege, Bart.Preneel, Ingrid.Verbauwhede}@esat.kuleuven.be
Abstract
In this paper we propose Sancus, a security architecture
for networked embedded devices. Sancus supports exten-
sibility in the form of remote (even third-party) software
installation on devices while maintaining strong security
guarantees. More speciﬁcally, Sancus can remotely attest
to a software provider that a speciﬁc software module
is running uncompromised, and can authenticate mes-
sages from software modules to software providers. Soft-
ware modules can securely maintain local state, and can
securely interact with other software modules that they
choose to trust. The most distinguishing feature of San-
cus is that it achieves these security guarantees without
trusting any infrastructural software on the device. The
Trusted Computing Base (TCB) on the device is only the
hardware. Moreover, the hardware cost of Sancus is low.
We describe the design of Sancus, and develop and
evaluate a prototype FPGA implementation of a Sancus-
enabled device. The prototype extends an MSP430 pro-
cessor with hardware support for the memory access con-
trol and cryptographic functionality required to run San-
cus. We also develop a C compiler that targets our device
and that can compile standard C modules to Sancus pro-
tected software modules.
1
Introduction
Computing devices and software are omnipresent in our
society, and society increasingly relies on the correct and
secure functioning of these devices and software. Two
important trends can be observed. First, network con-
nectivity of devices keeps increasing. More and more
(and smaller and smaller) devices get connected to the
Internet or local ad-hoc networks. Second, more and
more devices support extensibility of the software they
run – often even by third parties different from the de-
vice manufacturer or device owner. These two factors are
important because they enable a vast array of interesting
applications, ranging from over-the-air updates on smart
cards, over updateable implanted medical devices to pro-
grammable sensor networks. However, these two factors
also have a signiﬁcant impact on security threats. The
combination of connectivity and software extensibility
leads to malware threats. Researchers have already shown
how to perform code injection attacks against embedded
devices to build self-propagating worms [18, 19]. Viega
and Thompson [45] describe several recent incidents and
summarize the state of embedded device security as “a
mess”.
For high-end devices, such as servers or desktops, the
problems of dealing with connectivity and software exten-
sibility are relatively well-understood, and there is a rich
body of knowledge built up from decades of research; we
provide a brief survey in the related work section.
However, for low-end, resource-contrained devices, no
effective low-cost solutions are known. Many embed-
ded platforms lack the standard security features (such as
privilege levels or advanced memory management units
that support virtual memory) present in high-end proces-
sors. Depending on the overall system security goals,
as well as the context in which the system must operate,
there may be more optimal solutions than just porting
the general-purpose security features from high-end pro-
cessors. Several recent results show that researchers are
exploring this idea in a variety of settings. For instance,
El Defrawy et al. propose SMART, a simple and efﬁcient
hardware-software primitive to establish a dynamic root
of trust in an embedded processor [14], and Strackx et al.
propose a simple program-counter based memory access
control system to isolate software components [43].
In this paper we build on these primitives to propose
a security architecture that supports secure third-party
software extensibility for a network of low-end processors
(the prototypical example of such a network is a sensor
network). The architecture enables mutually distrusting
parties to run their software modules on the same nodes in
the network, while each party maintains strong assurance
USENIX Association  
22nd USENIX Security Symposium  479
that its modules run untampered. This kind of secure
software extensibility is very useful for applications of
sensor networks, for instance in the logistics and medical
domains. We discuss some application areas in more
detail in Section 2.4.
The main distinguishing feature of our approach is that
we achieve these security guarantees without any soft-
ware in the TCB on the device, and with only minimal
hardware extensions. Our attacker model assumes that an
attacker has complete control over the software state of
a device, and even for such attackers our security archi-
tecture ensures that any results a party receives from one
of its modules can be validated to be genuine. Obviously,
with such a strong attacker model, we can not guarantee
availability, so an attacker can bring the system down, but
if results are received their integrity and authenticity can
be veriﬁed.
More speciﬁcally, we make the following contribu-
tions:
• We propose Sancus1, a security architecture for
resource-constrained, extensible networked embed-
ded systems, that can provide remote attestation and
strong integrity and authenticity guarantees with a
minimal (hardware) TCB.
• We implement the hardware required for Sancus as
an extension of a mainstream microprocessor, and
we show that the cost of these hardware changes (in
terms of performance, area and power) is small.
• We implement a C compiler that targets Sancus-
enabled devices. Building software modules for San-
cus can be done by putting some simple annotations
on standard C ﬁles, showing that the cost in terms of
software development is also low.
To guarantee the reproducibility and veriﬁability of our
results, all our research materials, including the hardware
design of the processor, and the C compiler are publicly
available.
The remainder of this paper is structured as follows.
First, in Section 2 we clarify the problem we address by
deﬁning our system model, attacker model and the secu-
rity properties we aim for. The next two sections detail
the design of Sancus and some interesting implementation
aspects. Section 5 reports on our evaluation of Sancus and
the ﬁnal two sections discuss related work and conclude.
2 Problem statement
2.1 System model
We consider a setting where a single infrastructure
provider, IP, owns and administers a (potentially large)
1Sancus was the ancient Roman god of trust, honesty and oaths.
IP
N1
SM1,1
SM2,1
N2
SM2,2
SM j,k
···
···
...
SP1
SP2
...
Figure 1: Overview of our system model. IP provides a
number of nodes Ni on which software providers SP j can
deploy software modules SM j,k.
set of microprocessor-based systems that we refer to as
nodes Ni. A variety of third-party software providers SP j
are interested in using the infrastructure provided by IP.
They do so by deploying software modules SM j,k on the
nodes administered by IP. Figure 1 provides an overview.
This abstract setting is an adequate model for many ICT
systems today, and the nodes in such systems can range
from high-performance servers (for instance in a cloud
system), over smart cards (for instance in GlobalPlatform-
based systems) to tiny microprocessors (for instance in
sensor networks).
In this paper, we focus on the low
end of this spectrum, where nodes contain only a small
embedded processor.
Any system that supports extensibility (through instal-
lation of software modules) by several software providers
must implement measures to make sure that the different
modules can not interfere with each other in undesired
ways (either because of bugs in the software, or because
of malice). For high- to mid-end systems, this problem is
relatively well-understood and good solutions exist. Two
important classes of solutions are (1) the use of virtual
memory, where each software module gets its own virtual
address space, and where an operating system or hyper-
visor implements and guards communication channels
between them (for instance shared memory sections or
inter-process communication channels), and (2) the use of
a memory-safe virtual machine (for instance a Java VM)
where software modules are deployed in memory-safe
bytecode and a security architecture in the VM guards the
interactions between them.
For low-end systems with cheap microprocessors, pro-
viding adequate security measures for the setting sketched
480  22nd USENIX Security Symposium 
USENIX Association
above is still an open problem, and an active area of re-
search [16]. One straightforward solution is to transplant
the higher-end solutions to these low-end systems: one
can extend the processor with virtual memory, or one
can implement a Java VM. This will be an appropriate
solution in some contexts, but there are two important
disadvantages. First, the cost (in terms of required re-
sources such as chip surface, power or performance) is
non-negligible. And second, these solutions all require
the presence of a sizable trusted software layer (either the
OS or hypervisor, or the VM implementation).
The problem we address in this paper is the design,
implementation and evaluation of a novel security archi-
tecture for low-end systems that is inexpensive and that
does not rely on any trusted software layer. The TCB
on the networked device is only the hardware. More pre-
cisely, a software provider needs to trust only his own
software modules; he does not need to trust any infras-
tructural or third-party software on the nodes, only the
hardware of the infrastructure and his own modules.
2.2 Attacker model
We consider attackers with two powerful capabilities.
First, we assume attackers can manipulate all the soft-
ware on the nodes.
In particular, attackers can act as
a software provider and can deploy malicious modules
to nodes. Attackers can also tamper with the operating
system (for instance because they can exploit a buffer
overﬂow vulnerability in the operating system code), or
even install a completely new operating system.
Second, we assume attackers can control the commu-
nication network that is used by IP, software providers
and nodes to communicate with each other. Attackers
can sniff the network, can modify trafﬁc, or can mount
man-in-the-middle attacks.
With respect to the cryptographic capabilities of the
attacker, we follow the Dolev-Yao attacker model [11]:
attackers can not break cryptographic primitives, but they
can perform protocol-level attacks.
Finally, attacks against the hardware are out of scope.
We assume the attacker does not have physical access
to the hardware, can not place probes on the memory
bus, can not disconnect components and so forth. While
physical attacks are important, the addition of hardware-
level protections is an orthogonal problem that is an active
area of research in itself [2, 6, 25, 26]. The addition of
hardware-level protection will be useful for many prac-
tical applications (in particular for sensor networks) but
does not have any direct impact on our proposed architec-
ture or on the results of this paper.
2.3 Security properties
For the system and attacker model described above, we
want our security architecture to enforce the following
security properties:
• Software module isolation. Software modules on
a node run isolated in the sense that no software
outside the module can read or write its runtime state,
and no software outside the module can modify the
module’s code. The only way for other software on
the node to interact with a module is by calling one
of its designated entry points.
• Remote attestation. A software provider can verify
with high assurance that a speciﬁc software module
is loaded on a speciﬁc node of IP.
• Secure communication. A software provider can
receive messages from a speciﬁc software module
on a speciﬁc node with authenticity, integrity and
freshness guarantees. For simplicity we do not con-
sider conﬁdentiality properties in this paper, but our
approach could be extended to also provide conﬁ-
dentiality guarantees.
• Secure linking. A software module on a node can
link to and call another module on the same node
with high assurance that it is calling the intended
module. The runtime interactions between a module
A and a module B that A links to can not be observed
or tampered with by other software on the same
node.
Obviously, these security properties are not entirely
independent of each other. For instance, it does not make
sense to have secure communication but no isolation:
given the power of our attackers, any message could then
simply be modiﬁed right after its integrity was veriﬁed by
a software module.
2.4 Application scenarios
This section illustrates some real-world application sce-
narios where the security properties above are relevant.
Today’s ICT environments involve many parties using
shared resources. This is not different for the sensor
space where applications have moved from the mono-
lithic, often static, single application domain (such as
wildlife [13] or volcano monitoring [46]) to a dynamic and
long-lived setting characterized by platform-application
decoupling [24] and resource sharing [33].
We present two illustrating scenarios. First, consider
the logistics domain [48]. Given node cost and complex-
ity, powerful nodes can be attached to containers, but
nodes attached to packages are low-end and resource-
constrained. The package is under control of the package
USENIX Association  
22nd USENIX Security Symposium  481
owner, the IP, a pharmaceutical company in this example
scenario. This pharmaceutical wants a software module
for continuous cold-chain visibility of the package.2 In
the warehouse, the shipping company wants to load a
radio-location software module to expedite package pro-
cessing. In the harbor, because of customs regulations
like C-TPAT [44], the container owner needs to attest
manifest validity and package integrity, requiring yet a
different software module on the package node.
Another representative scenario is found in the medi-
cal domain, where a hospital is equipped with a variety
of nodes used for many processes simultaneously, with
most of those processes security sensitive [29]. Building
nodes, for example, support facility management with
software modules for Heating, Ventilation, and Air Condi-
tioning (HVAC) or ﬁre control and physical security, but
are also used for patient tracking and monitoring of vital
signals, an application where strong security requirements
are present with respect to health information. The same
nodes can even automate the supply chain by support-
ing asset and inventory management of medical goods
through a localization and tracking software module.
The above scenarios establish a clear need for isolation,
attestation, secure communication and secure linking of
the various software modules reﬂecting the dynamic ob-
jectives of the various stakeholders. We believe these
scenarios are strong evidence for the value of the Sancus
architecture.
3 Design of Sancus
The main design challenge is to realize the desired secu-
rity properties without trusting any software on the nodes,
and under the constraint that nodes are low-end resource
constrained devices. An important ﬁrst design choice that