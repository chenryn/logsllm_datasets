# Sancus: Low-Cost Trustworthy Extensible Networked Devices with a Zero-Software Trusted Computing Base

**Authors:**
- Job Noorman
- Pieter Agten
- Wilfried Daniels
- Raoul Strackx
- Anthony Van Herrewege
- Christophe Huygens
- Bart Preneel
- Ingrid Verbauwhede
- Frank Piessens

**Affiliations:**
- iMinds-DistriNet and iMinds-COSIC, KU Leuven

**Contact:**
- {Job.Noorman, Pieter.Agten, Wilfried.Daniels, Raoul.Strackx, Christophe.Huygens, Frank.Piessens}@cs.kuleuven.be
- {Anthony.VanHerrewege, Bart.Preneel, Ingrid.Verbauwhede}@esat.kuleuven.be

**Abstract:**
In this paper, we introduce Sancus, a security architecture for networked embedded devices. Sancus supports extensibility through remote (including third-party) software installation while maintaining robust security guarantees. Specifically, Sancus can remotely attest to a software provider that a specific module is running without compromise and can authenticate messages from these modules. Software modules can securely maintain local state and interact with other trusted modules. The key feature of Sancus is that it achieves these security guarantees without relying on any infrastructural software; the Trusted Computing Base (TCB) is purely hardware-based. Additionally, the hardware cost of Sancus is low. We detail the design of Sancus, develop and evaluate a prototype FPGA implementation, and create a C compiler for Sancus-enabled devices.

## 1. Introduction

Computing devices and software are ubiquitous in modern society, and their secure and correct operation is increasingly critical. Two significant trends are evident: the growing connectivity of devices and the increasing support for software extensibility, often by third parties. These trends enable a wide range of applications but also introduce new security threats. For high-end devices, such as servers or desktops, these challenges are well-understood. However, for low-end, resource-constrained devices, effective low-cost solutions are lacking. Many embedded platforms lack standard security features, and porting general-purpose security measures from high-end processors may not be optimal.

This paper proposes a security architecture, Sancus, that supports secure third-party software extensibility for networks of low-end processors, such as sensor networks. Sancus enables mutually distrusting parties to run their software modules on the same nodes, ensuring strong assurance that their modules run untampered. This is particularly useful in applications like logistics and medical domains.

The main contribution of our approach is achieving these security guarantees with a minimal (hardware) TCB, without trusting any software on the device. Our attacker model assumes complete control over the software state, yet Sancus ensures that any results received from a module can be validated for integrity and authenticity.

Specifically, our contributions include:
- **Sancus**: A security architecture for resource-constrained, extensible networked embedded systems, providing remote attestation and strong integrity and authenticity guarantees.
- **Hardware Implementation**: An extension of a mainstream microprocessor, demonstrating low performance, area, and power costs.
- **C Compiler**: A compiler for Sancus-enabled devices, allowing easy development of protected software modules.

All research materials, including the hardware design and C compiler, are publicly available to ensure reproducibility and verifiability.

## 2. Problem Statement

### 2.1 System Model

We consider a setting where an infrastructure provider (IP) administers a large set of microprocessor-based nodes. Various third-party software providers (SPs) deploy software modules (SMs) on these nodes. This abstract setting models many ICT systems, ranging from high-performance servers to tiny microprocessors in sensor networks. Our focus is on the low-end spectrum, where nodes contain small embedded processors.

For systems supporting multiple software providers, it is crucial to prevent undesirable interference between modules. High- to mid-end systems use virtual memory or memory-safe virtual machines, but these solutions are costly and require a trusted software layer. For low-end systems, a low-cost, zero-software TCB solution is needed.

### 2.2 Attacker Model

We assume attackers have two powerful capabilities:
1. **Software Manipulation**: Attackers can manipulate all software on the nodes, including deploying malicious modules and tampering with the operating system.
2. **Network Control**: Attackers can control the communication network, sniff traffic, modify data, and mount man-in-the-middle attacks.

Cryptographically, we follow the Dolev-Yao model, assuming attackers cannot break cryptographic primitives but can perform protocol-level attacks. Physical attacks on hardware are out of scope.

### 2.3 Security Properties

For the described system and attacker model, Sancus enforces the following security properties:
- **Software Module Isolation**: Modules run isolated, with no external access to their runtime state or code.
- **Remote Attestation**: SPs can verify with high assurance that a specific module is loaded on a specific node.
- **Secure Communication**: SPs can receive messages from modules with authenticity, integrity, and freshness guarantees.
- **Secure Linking**: Modules can link to and call other modules with high assurance, ensuring that interactions are not observed or tampered with by other software.

### 2.4 Application Scenarios

#### Logistics Domain
In logistics, powerful nodes can be attached to containers, while low-end nodes are attached to packages. For example, a pharmaceutical company may need a module for cold-chain visibility, a shipping company may need a radio-location module, and customs may need a manifest validation module.

#### Medical Domain
In hospitals, nodes support various processes, such as facility management, patient tracking, and supply chain automation. Strong security requirements are present, especially for health information. Nodes must support multiple, security-sensitive applications simultaneously.

These scenarios highlight the need for isolation, attestation, secure communication, and secure linking, underscoring the value of the Sancus architecture.

## 3. Design of Sancus

The main design challenge is to achieve the desired security properties without trusting any software on the nodes, and under the constraint of low-end, resource-constrained devices. A key design choice is to leverage minimal hardware extensions to provide the necessary security guarantees.