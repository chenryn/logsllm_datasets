# 优化后的文本

## 表 I: 存储和通信成本比较
| 总存储量 | 带宽 | 轮数 |
| --- | --- | --- |
| 8.8 TB | 8.2 KB | 1 |
| 137.4 GB | 12.3 KB | 2 |
| 4.0 MB | 102.4 KB | 968 |
| 262.1 KB | 20.5 KB | 3 |
| 8.6 MB | 286.7 KB | 2096 |
| 268.4 MB | 28.7 KB | 3675 |
| 8.6 GB | 36.9 KB | 5668 |
| 33.3 MB | 901.1 KB | 8122 |
| 1.5 MB | - | 8 |

**说明**：
- 总存储量是指服务器所需的存储空间。
- 带宽和轮数是按每个操作计算的。
- 每个存储项由一个4字节的标签和一个4字节的值组成。

### 实现
直到有2^19条目时，ORAM+AVL才开始优于简单的O(n)基线解决方案。如前所述，速度提升主要归功于减少了轮复杂度。与AVL树相比，HIRB树的高度要小得多，因为每个HIRB节点平均包含β个条目，而AVL树每个节点仅包含一个条目。此外，HIRB的高度是固定的，不需要填充来实现无意识性。每个AVL操作需要3 * 1.44 lg N次ORAM操作，而HIRB只需要2 logβ N次vORAM操作。表I中可以清楚地看到这种通信成本的差异。总体而言，vORAM+HIRB的存储和通信成本略高于提供安全删除但不隐藏访问模式的B树。

（表中的数值是在考虑最坏情况下的成本，并且只针对单个操作生成的。对于提供无意识性的构造，每次操作都必须遵循最坏情况的成本，因此比较是公平的。）

简而言之，vORAM+HIRB和SD-B-Tree是唯一适用于实际数据大小的实现方案，而vORAM+HIRB的优势在于其额外的安全保证，即无意识性和有限的历史独立性。

### VII. 结论
本文提出了一种新的安全云存储系统，结合了之前分离的安全属性：无意识性、安全删除和历史独立性。这是通过开发一种新的可变块大小ORAM（vORAM）和一种新的历史独立随机化数据结构（HIRB）实现的。vORAM+HIRB的理论性能与现有系统相当，这些系统提供的安全属性较少。我们的实现系统比目前最好的无意识映射数据结构（Wang等人在CCS 14上提出的，该结构不提供安全删除或历史独立性）快100倍（就访问时间而言），将合理大小数据库（> 2^19）的单次操作时间缩短到每秒不到一次访问。

未来工作有很多潜力。例如，可以考虑支持更丰富操作的数据结构，如范围查询，同时保持无意识性、安全删除和历史独立性。此外，vORAM本身可能为ORAM提供新颖且令人兴奋的新分析结果，因为它不需要固定桶大小。与使用固定大小块的现有ORAM模型相比，有可能提高整体利用率和通信成本。

尽管我们在总体每操作速度方面展示了实用性，但我们没有考虑一些额外的实际性能指标，如异步操作和优化上传与下载速率。在未来工作中，开发一个考虑这些因素的ODS映射将是很有用的方向。

### 致谢
本研究得到了海军研究办公室N0001415WX01532的支持，以及国家科学基金会第1406177和第1319994号奖励的支持。

### 参考文献
[略]

### 附录 A: vORAM 操作细节
我们提供了vORAM辅助函数的伪代码。

```plaintext
idgen()
1: 选择 r ← {0, 1}2T +γ
2: 返回 1(cid:4)r

loc(id, t)
1: 返回从根节点到标识为id的叶节点路径上级别t处节点的位置。这仅仅是id的(t + 1)个最高有效位所指示的索引。

evict(id)
1: key ← rootkey
2: B ← 空列表
3: for t = 0, 1, . . . T do
4:   从持久存储中移除loc(id, t)处的桶
5:   使用key对其进行解密
6:   将桶中的所有部分块附加到B的末尾
7:   key ← 根据loc(id, t + 1)从桶中获取子键
8: end for
9: 对B中的每个部分块 (id∗, (cid:3), blk) do
10:  如果 (id∗, (cid:3)0, blk0) 已经在stash中
11:    则替换为 (id∗, (cid:3)0 + (cid:3), blk0 blk)
12:  否则将 (id∗, (cid:3), blk) 添加到stash
13: end for

writeback(id)
1: key ← nil
2: for t = T, T − 1, . . . , 0 do
3:   W←{(id∗, (cid:3), blk) ∈ stash : loc(id∗, t) = loc(id, t)}
4:   合并
5: end for
```

希望这些改进使文本更加清晰、连贯和专业。