DMA-capable bus, e.g., FireWire.
2) The device initiates a DMA transfer to recover the
contents of physical memory.
3) The device analyzes the physical memory dump, and
identiﬁes the kernel paging structures and interrupt
descriptor table (IDT).
4) Using information derived from these structures, the
device prepares an attack payload.
5) The device performs a DMA transfer to inject the at-
tack payload into the memory of the target system.
6) The payload executes within a kernel context—i.e.,
ring 0—and copies the Tresor encryption key from
the CPU into a predetermined location in physical
memory.
7) The device initiates a ﬁnal DMA transfer to obtain the
disk encryption key from memory.
Note that each of the above steps makes no assumptions
on the target system aside from the presence of a DMA-
capable bus and an IA32-derived architecture. In particular,
virtually any modern OS for this architecture will make use
of hardware paging for features such as process isolation and
virtual memory, as well as interrupt handling for features
such as device service requests and scheduling.
In the following, we discuss details of the individual steps
of the attack.
3.2 Accessing System Memory
In our instantiation of the attack, we use a FireWire bus
to perform DMA transfers to and from system memory.
FireWire, or IEEE 1394,
is a hardware speciﬁcation for
high-speed peer-to-peer device communication. Most im-
portantly for our purposes, since FireWire is DMA-capable,
it allows for unimpeded access to main memory.
Our prototype extends Inception [13], an existing tool
for gaining privileged access to machines with an accessible
FireWire bus. The tool’s main purpose is to attack common
(non-CPU-bound) disk encryption systems by using physi-
cal memory overwrites to grant root access to an attacker.
The particular overwrites to perform are guided by a set of
hardcoded signatures for a set of popular Linux-based oper-
ating systems. However, we merely build upon Inception’s
ability to read and write to physical memory. The remain-
der of our attack is built as a novel extension to the tool,
and bears only superﬁcial resemblance to its approach.
A notable limitation of FireWire is that it is limited to
accessing the ﬁrst 4 GB of memory. This limitation, how-
ever, did not impede the ability of our attack to successfully
compromise Tresor keys. This is due to the fact that the
memory of interest resides at a relatively low physical ad-
dress for the systems we attacked. Additionally, given the
nature of the data structures we target, there is little reason
to expect that this condition will not hold in other environ-
ments.
3.3 Hijacking Kernel Control Flow
Given a physical memory dump of the system obtained
by Inception, the objective is then to analyze the dump in
order to successfully execute code in ring 0—i.e., within the
kernel context. An obvious approach here would be to use
standard kernel hooking techniques; that is, to overwrite
a known kernel function pointer to redirect control ﬂow to
code that we inject into physical memory. This approach,
however, requires OS-speciﬁc knowledge to identify these
function pointers and, therefore, is not suitable when the
target OS is not known a priori.
Instead, the approach we adopt is to rely only upon data
structures present in the target system’s memory that are
required by the IA32 architecture speciﬁcation. In partic-
ular, our attack uses a combination of the kernel paging
structures and interrupt descriptor table (IDT) to identify
suitable locations to a) inject an attack payload to execute
in ring 0, and b) to redirect control ﬂow to that payload.
In the following discussion, we refer to the IA32e—i.e., 64
bit—representation of these structures. Since it is relatively
straightforward to heuristically infer the machine word size
for a target architecture by examining a physical memory
dump, we assert that this is without loss of generality.
IA32e Interrupt Descriptor Table (IDT).
The IDT is an IA32-speciﬁc structure that allows software
to register handlers for system events such as interrupts and
exceptions. The IDT itself is a contiguous array of descrip-
tors that map an interrupt vector to an interrupt service
routine (ISR). Each vector serves as an index into the ar-
ray. Examples of standard interrupt vectors for the IA32
architecture include the breakpoint exception #BP (3), the
general protection exception #GP (13), and page fault excep-
tion #PF (14). In addition, system-speciﬁc handlers can be
mapped for vectors 32-255.
The CPU refers to the IDT’s location in memory through
the IDTR register, the value of which is loaded from memory
and stored to memory using the lidt and sidt instructions,
respectively. The IDTR speciﬁes both the size of the IDT
(minus 1), and the base of the table in memory.
The IDT serves as an ideal, OS-agnostic mechanism for lo-
cating code on IA32-based systems with the following prop-
erties: a) the code executes in ring 0, and b) it is potentially
executed very often. While directly overwriting an IDT in
memory is inadvisable due to the certain consequence that
the machine will reset itself, each IDT entry does point to a
function that can be hooked.
In particular, the approach we adopt is to select a system-
speciﬁc interrupt vector, resolve its handler, and extract the
ﬁrst 16 bytes. We save these for later restoration. Then, we
inject a jump to the location of our attack payload. This
payload will be responsible for implementing our attack, as
well as removing the hook and restoring the original initial
ISR instruction sequence.
Identifying the IDT.
While the attack is, in principle, straightforward, there
are several diﬃculties that arise. The ﬁrst has to do with
identifying the location of the IDT in memory. Recall that
the standard means for accomplishing this is to execute the
sidt instruction, which stores the value of the IDTR register
into a speciﬁc location in memory. For instance, the follow-
ing assembly routine would place the contents of IDTR in the
memory location speciﬁed by the ﬁrst argument in rdi.
; extern void __sidt(void *idtr)
bits 64
section .text
global __sidt
__sidt:
sidt [rdi]
ret
Unfortunately, this is a chicken-and-egg problem: to exe-
cute our attack, we need to locate the IDT, but before we
gain control of the system, we cannot execute any instruc-
tions. Similarly, our DMA-based access to the system does
not allow us to directly examine the state of the CPU.
74
Instead, we utilize a technique for heuristically identifying
an IDT by scanning a physical memory dump. Our heuris-
tics rely both on architectural constraints on IDTs as well
as the fact that there exists much regularity in the values
for each ﬁeld of each IDT entry. While these constraints are
certainly not foolproof, our experiments demonstrate that
our heuristics are eﬀective in practice.
In particular, our scan searches for a block of contiguous
memory that satisﬁes the following properties.
1) The memory region is page-aligned to a 4 KB bound-
ary.
2) The high-order bits of each entry’s ISR are self-similar.
3) The type of each entry is one of the three permissible
values—i.e., 5, 6, or 7.
We found that this approach was suﬃcient to reliably
identify IDT locations in our experiments. For more details,
please refer to Section 4.
Identifying IA32e Paging Structures.
Locating the IDT in memory is not the only challenge,
unfortunately. A second obstacle arises from the fact that
interrupt vector handlers are speciﬁed as linear addresses,
while the attacker’s device is restricted to a physical view
of memory. That is, the target kernel is executing in pro-
tected mode, with a set of paging structures mapping linear
addresses to physical addresses. In contrast, the attacker’s
device addresses physical memory. Therefore, without the
ability to associate linear addresses with physical addresses,
the device is unable to perform (at least) three critical tasks:
a) locate the physical address of a particular ISR given its
virtual addresses in the IDT, b) hook the ISR with the vir-
tual address of the attack payload, and c) construct the at-
tack payload such that it refers to the virtual address of the
original ISR in order to remove the hook.
Therefore, in addition to locating the IDT, it is necessary
to parse the kernel memory map as speciﬁed by the kernel
paging structures. However, we face a similar situation to
the case of the IDT and sidt instruction. The root of the
paging structures is usually contained in the cr3 register,
but accessing that value requires execution of multiple mov
instructions. Of course, the attacker is unable to do so at
this point.
Accordingly, we adopt a similar approach of heuristically
identifying the kernel’s paging structures. Here, we rely on a
combination of architectural constraints and OS-independent
characteristics of kernel memory maps.
In particular, we
scan physical memory for a hierarchical paging structure
that exhibits the following properties.
1) The paging structure tree is rooted at a valid page map
level 4 (PML4) table.
2) PML4 entries, if present, point to valid page directory
pointer tables (PDPTs).
3) PDPT entries, if present, point to valid page directo-
ries (PDs).
4) PD entries, if present, point to valid page tables (PTs).
5) Each node in the tree is page-aligned to a 4 KB bound-
ary.
6) Reserved bits in each entry at each node of the tree
are properly set to zero.
7) The ratio of pages with only ring 0 access to those with
ring 3 access is above a ﬁxed threshold.
8) The number of mapped pages is above a ﬁxed thresh-
old.
The ﬁrst two properties above are architectural constraints;
the second two are universal characteristics of kernel mem-
ory maps (most pages should only be accessible to the ker-
nel, and a minimum number of pages should be mapped
into physical memory). As in case of the IDT identiﬁcation
heuristics, the above was suﬃcient to uniquely identify the
kernel paging structures in our experiments.
3.4 Preparing an Attack Payload
After resolving the location of the IDT and kernel paging
structures, the next step is to construct the actual attack
payload—i.e., the code that will be injected into the system
to execute with ring 0 privileges. Given the address of the
ISR to hook and the ﬁrst 16 bytes of that ISR, this is quite
simply accomplished by patching a compiled attack template
such as shown in Figure 2. In particular, INT_ADDR_MARK is
a special byte sequence that marks the location of the attack
payload to patch with the address of the original ISR. Sim-
ilarly, INST_BUF_MARK is a special byte sequence that marks
the location to save the original initial instruction sequence
for the target ISR.
3.5 Executing the Attack Payload
Execution of the attack payload requires two additional
steps: a) injecting the payload into a writable and exe-
cutable page in kernel memory, and b) patching the target
ISR to redirect control ﬂow to the location of the injected
payload.
Our attack prototype accomplishes the ﬁrst task by travers-
ing the kernel memory map to discover a suitable physical
page. The second task is completed by selecting a tar-
get ISR and replacing its initial instructions with a jmp
ATTACK_PAYLOAD_ADDR instruction. At that point, the next
time that the selected interrupt is raised, control of the sys-
tem will be redirected to the attack payload. It will copy the
contents of the debug registers to a predetermined location
in RAM, unhook the targeted ISR, and continue execution
of that ISR. The attacker’s device will then copy out the en-
cryption key, defeating the CPU-bound property of the disk
encryption system.
4. EVALUATION
In the following section, we report on an evaluation of
Tresor-Hunt. In particular, we focus on two key aspects of
the attack: a) how eﬀective are the heuristics used to identify
IDTs and kernel paging structures, and b) how eﬀective is
the attack in practice.
4.1 Data Structure Identiﬁcation
The goal of this experiment is to quantify the accuracy
of the heuristics we use to identify IDTs and kernel pag-
ing structures. Accordingly, we extracted physical memory
dumps for several IA32-based operating systems, including
Linux 3.3.7, FreeBSD 9.0, and Mac OS X 10.7.3, and ap-
plied our heuristics. In each case, we successfully identiﬁed
75
global extract_key
; extract the disk encryption key
extract_key:
; copy debug registers
mov rax, dr0
mov [dbg_regs.dr0 wrt rip], rax
mov rax, dr1
mov [dbg_regs.dr1 wrt rip], rax
mov rax, dr2
mov [dbg_regs.dr2 wrt rip], rax
mov rax, dr3
mov [dbg_regs.dr3 wrt rip], rax
; restore original instructions
mov rdx, INT_ADDR_MARK
mov rax, [inst_buf.x0 wrt rip]
mov [rdx], rax
mov rax, [inst_buf.x1 wrt rip]
mov [rdx+0x08], rax
; jump to original handler
jmp [rdx]
; original instruction buffer
inst_buf:
.x0 dq INST_BUF_MARK
.x1 dq 0x00
; debug register dump
dbg_regs:
.dr0 dq 0x00
.dr1 dq 0x00
.dr2 dq 0x00
.dr3 dq 0x00
global attack_len
attack_len dq $-extract_key
Figure 2: Example Tresor-Hunt attack payload template.
OS Handler MSBs
Linux 3.3.7
FreeBSD 9.0
Mac OS X 10.7.3
0xffffffff81000000
0xffffffff80b00000
0xffffff80002d0000
Table 1: Common bits for IDT entry handler addresses for
a selection of IA32-based operating systems.
the IDT for each operating system when compared to the
ground truth of executing the sidt instruction.
Table 1 displays the results of one aspect of the heuristics,
namely the check for common bits of potential ISR handler
addresses. For each OS tested, it is clear that many of the
most-signiﬁcant bits are shared, and they clearly correspond
to kernel linear addresses, which tend to be located high in
virtual memory.
A similar experiment was performed for the heuristics to
resolve the location of the kernel paging structures. In this
case, kernel drivers were written to directly access cr3 as
appropriate, since (as opposed to the sidt instruction) ac-
76
cess to cr3 is architecturally restricted to ring 0 code. In
all cases, our heuristics were able to uniquely identify the