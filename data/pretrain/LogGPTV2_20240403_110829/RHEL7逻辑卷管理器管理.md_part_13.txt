#### [⁠]{#LVM_CLI.html#raid1-writebehind}4.4.3.7.5. 控制 RAID 逻辑卷中的 I/O 操作 {.title}
:::
::: para
可使用 `lvchange`{.command} 命令的 `--writemostly`{.literal} 和
`--writebehind`{.literal} 参数为 RAID1 逻辑卷中的设备控制 I/O 操作。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `--[raid]writemostly PhysicalVolume[:{t|y|n}]`{.literal}
    :::
    ::: para
    将 RAID1 逻辑卷中的设备标记为
    `write-mostly`{.literal}。除非必要，应避免读取这些驱动器。设定这个参数以保证该驱动器的最小
    I/O 操作数。默认行为是为了解决在指定的物理卷设定
    `write-mostly`{.literal} 刷新。可在该物理卷中附加 `:n`{.literal}
    删除 `write-mostly`{.literal} 标记。在单一命令中可多次指定
    `write-mostly`{.literal}
    参数，使其可以一次为逻辑卷中的所有物理卷触发 write-mostly 属性。
    :::
-   ::: para
    `--[raid]writebehind IOCount`{.literal}
    :::
    ::: para
    指定 RAID1 逻辑卷中设备允许的最大未完成写入数，将其标记为
    `write-mostly`{.literal}。超过此数值后，写入变为同步，导致所有对组成设备的写入会在阵列发出完成写入信号前完成。将该值设定为
    0 会清除该属性，并允许该系统随机选择该值。
    :::
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#mirror_create}4.4.4. 创建镜像卷 {.title}
:::
[]{#LVM_CLI.html#idm140426176171632
.indexterm}[]{#LVM_CLI.html#idm140426176170192 .indexterm}
::: para
从 Red Hat Enterprise Linux 7.0 发行本开始，LVM 支持 RAID 1/4/5/6/10，如
[第 4.4.3 节 "RAID 逻辑卷"](#LVM_CLI.html#raid_volume_create){.xref}
所述。集群无法识别 RAID 逻辑卷。虽然可只在一台机器中创建并激活 RAID
逻辑卷，也可以同时在一台以上机器中激活它们。如果需要非独占镜像卷，则必须使用
`mirror`{.literal} 片段类型创建卷，如本小节所述。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
有关使用 `mirror`{.literal} 片段类型将现有 LVM 设备转换为 RAID1 LVM
设备的详情，请查看 [第 4.4.3.3 节 "将镜像 LVM 卷转换为 RAID1
设备"](#LVM_CLI.html#convert-mirror-to-RAID1){.xref}。
:::
:::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**集群中的镜像 LVM 逻辑卷**
:::
::: admonition
::: para
在集群中创建镜像 LVM 逻辑卷的命令和步骤与在单一节点中使用
`mirror`{.literal} 片段类型创建镜像 LVM 逻辑卷相同。但要在集群中创建镜像
LVM 卷，则必须运行该集群和集群镜像基础结构，该集群必须处于 quorate
状态，且必须在 `lvm.conf`{.filename}
文件中正确设定锁定类型以便启用集群锁定。有关在集群中创建镜像卷的示例，请查看
[第 5.5 节 "在集群中创建镜像 LVM
逻辑卷"](#LVM_examples.html#mirvol_create_ex){.xref} 。
:::
::: para
尝试在集群的多个节点中连续创建并转换多个 LVM
镜像可能会造成这些命令积压。这样会造成需要的操作超时，并进而失败。为避免这个问题，建议只在集群的一个节点中运行创建镜像的命令。
:::
:::
:::
::: para
创建镜像卷时，可使用 `lvcreate`{.command} 命令的 `-m`{.option}
参数指定要生成的副本数。指定 `-m1`{.option}
则生成一个镜像，并产生两个文件系统副本：即一个线性逻辑卷外加一个副本。同样，指定
`-m2`{.option} 则生成两个镜像，并生成三个文件系统副本。
:::
::: para
下面的命令使用单一镜像创建镜像逻辑卷。该卷大小为 50GB，名为
`mirrorlv`{.filename}，是从卷组 `vg0`{.filename} 中产生：
:::
``` screen
# lvcreate --type mirror -L 50G -m 1 -n mirrorlv vg0
```
::: para
LVM 将要复制的设备分成默认为 512KB 大小的区域。可使用
`lvcreate`{.command} 命令的 `-R`{.option} 参数以 MB
为单位指定区域大小。还可以通过编辑 `lvm.conf`{.filename} 文件中的
`mirror_region_size`{.literal} 设定编辑默认区域大小。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
由于集群架构的限制，无法使用默的 512KB 区域大小创建大于 1.5TB
的镜像。需要较大镜像的用户应将该区域大小从默认值调整为较大的值。无法增大区域大小将造成
LVM 创建操作停滞，同时还可能造成其他 LVM 命令挂起。
:::
::: para
为超过 1.5TB 的镜像指定区域大小的一般方法是取镜像的 TB 数，并四舍五入到
2 的下一次幂，使用该数字作为 `lvcreate`{.command} 命令的 `-R`{.option}
参数值。例如：如果镜像大小为 1.5TB，则可以指定
`-R 2`{.command}。如果镜像大小为 3TB，则指定
`-R 4`{.command}。如果镜像大小为 5TB，则指定 `-R 8`{.command}。
:::
::: para
下面的命令创建区域大小为 2MB 的镜像逻辑卷：
:::
``` screen
# lvcreate --type mirror -m 1 -L 2T -R 2 -n mirror vol_group
```
:::
:::
::: para
创建镜像后，则会同步镜像区域。对于较大的镜像组件，同步过程可能会较长。创建不需要恢复的新镜像时，可指定
`--nosync`{.option} 参数，表示不需要根据第一个设备初始化同步。
:::
::: para
LVM
保留一个小日志以便用来记录那些区域与该镜像或多个镜像同步。默认情况下，这个日志是保存在磁盘中，以便其中重启后仍可用，并保证每次机器重启或崩溃后不需要重新同步该镜像。也可使用
`--mirrorlog core`{.option}
参数指定将该日志保存在内存中，这样就不需要额外的日志设备，但需要每次重启后重新同步整个镜像。
:::
::: para
下面的命令在卷组 `bigvg`{.filename} 中创建镜像逻辑卷。该逻辑卷名为
`ondiskmirvol`{.filename}，有一个单一镜像。该卷大小为
12MB，在内存中保存镜像日志。
:::
``` screen
# lvcreate --type mirror -L 12MB -m 1 --mirrorlog core -n ondiskmirvol bigvg
  Logical volume "ondiskmirvol" created
```
::: para
该镜像日志是在于创建该镜像分支设备不同的设备中创建。但也可以使用
`vgcreate`{.command} 命令的 `--alloc anywhere`{.option}
参数在创建该镜像分支设备的同一设备中创建该镜像日志。这样可能会降低性能，但可让您在只有两个底层设备的情况下创建镜像。
:::
::: para
下面的命令在创建镜像分支的同一设备中为单一镜像创建镜像逻辑卷。在这个示例中，卷组
`vg0`{.filename} 由两个设备组成。这个命令在卷组 `vg0`{.filename}
中创建名为 `mirrorlv`{.filename}，大小为 500MB 的卷。
:::
``` screen
# lvcreate --type mirror -L 500M -m 1 -n mirrorlv -alloc anywhere vg0
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在集群镜像中，镜像日志管理完全由目前集群 ID
最低的集群节点控制。因此，当存储集群镜像日志的设备在集群的某个子集中不可用时，只要
ID
数最小的集群节点可以访问该集群该日志，则该集群镜像可继续运行，不受任何影响。因为该镜像不会受到影响，因此也不会进行自动修正（修复）。但当
ID
数最低的集群节点无法访问该镜像日志后，则会执行自动操作（无论其他节点是否可以访问该日志）。
:::
:::
:::
::: para
要创建自我对称的镜像日志，可指定 `--mirrorlog mirrored`{.option}
参数。下面的命令在卷组 `bigvg`{.filename} 中创建镜像逻辑卷。该逻辑卷名为
`twologvol`{.filename}，有一个镜像。该卷大小为 12MB，镜像日志为对称的。
:::
``` screen
# lvcreate --type mirror -L 12MB -m 1 --mirrorlog mirrored -n twologvol bigvg
  Logical volume "twologvol" created
```
::: para
与标准镜像日志一样，可以使用 `vgcreate`{.command} 命令的
`--alloc anywhere`{.option}
参数在创建镜像分支的同一设备中创建冗余镜像日志。这样可能会降低性能，但可让您在没有足够底层设备以保证每个设备预期镜像分支处于不同设备的情况下创建冗余镜像日志。
:::
::: para
创建镜像后，则会同步镜像区域。对于较大的镜像组件，同步过程可能会较长。创建不需要恢复的新镜像时，可指定
`--nosync`{.option} 参数，表示不需要根据第一个设备初始化同步。
:::
::: para
可指定使用镜像分支及日志的设备以及该设备中要使用的扩展。要强制将日志记录在特定磁盘中，可指定保存日志的磁盘具体扩展。LVM
不需要遵守命令行中列出的顺序。如果列出任意物理卷，则只能在该设备中保存日志。列表中列出的已分配物理扩展将被忽略。
:::
::: para
下面的命令创建使用单一镜像的镜像逻辑卷，且单一日志为不对称。该卷大小为
500MB，名为 `mirrorlv`{.filename}，由卷组 `vg0`{.filename}
生成。该镜像的第一个分支位于设备
`/dev/sda1`{.filename}，第二个镜像位于设备
`/dev/sdb1`{.filename}，而第三个镜像位于设备 `/dev/sdc1`{.filename}。
:::
``` screen
# lvcreate --type mirror -L 500M -m 1 -n mirrorlv vg0 /dev/sda1 /dev/sdb1 /dev/sdc1
```
::: para
下面的命令创建使用单一镜像的镜像逻辑卷。其大小为 500MB，名为
`mirrorlv`{.filename}，由卷组 `vg0`{.filename}
生成。该镜像的第一个分支位于设备 `/dev/sda1`{.filename} 的第 0-499
扩展，第二个分支位于 `/dev/sdb1`{.filename} 的第 0-499
扩展，镜像日志起始点为设备 `/dev/sdc1`{.filename} 的扩展 0.这些是 1MB
扩展。如果任何指定的扩展已经被分配，则会将其忽略。
:::
``` screen
# lvcreate --type mirror -L 500M -m 1 -n mirrorlv vg0 /dev/sda1:0-499 /dev/sdb1:0-499 /dev/sdc1:0
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
可将条带和镜像卷合并为一个逻辑卷。创建逻辑卷的同时指定镜像数（`--mirrors X`{.option}）和条带数（`--stripes Y`{.option}）即可得到一个由条带连续设备组成的镜像设备。
:::
:::
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#mirror_failure_policy}4.4.4.1. 镜像逻辑卷失败策略 {.title}
:::
[]{#LVM_CLI.html#idm140426149248944
.indexterm}[]{#LVM_CLI.html#idm140426149247504
.indexterm}[]{#LVM_CLI.html#idm140426112600736 .indexterm}
::: para
您可以使用 `mirror_image_fault_policy`{.literal} 和
`mirror_log_fault_policy`{.literal} 参数在 `lvm.conf`{.filename} 文件的
`activation`{.literal}
部分定义逻辑卷在设备失败事件中的行为。将这些参数设定为
`activation`{.literal}
后，系统会尝试移除出错的设备，并在没有这些设备的情况下运行。将这些参数设定为
`allocate`{.literal}
后，系统会尝试移除出错的设备，并尝试在新设备中分配空间替换失败的设备。如果没有合适的设备，且没有可为替换失败的设备分配的空间，则这个策略与
`remove`{.literal} 策略的行为一致。
:::
::: para
默认情况下，`mirror_log_fault_policy`{.literal} 参数为
`allocate`{.literal}。在日志中使用这个策略非常迅速，并可保证在崩溃及重启后可记住同步状态。如果将这个策略设定为
`remove`{.literal}，则会在日志设备失败，镜像转而使用内存日志后，该镜像不会记住出现故障和重启后的同步状态，因而会重新同步整个镜像。
:::
::: para
默认情况下，`mirror_image_fault_policy`{.literal} 参数为
`remove`{.literal}。使用这个策略后，如果镜像映象失败，且只还有一个工作的副本，则该镜像会转而使用非镜像设备。为镜像设备将这个策略设定为
`allocate`{.literal}
后，则要求该镜像设备重新同步该设备。这样会让过程变缓，但会保留该设备的镜像特征。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
LVM
镜像卷有失败的设备时，会进行两个阶段的恢复。第一个阶段包括删除失败的设备。这样可得到成为线性设备的镜像。在第二个阶段中，如果将
`mirror_log_fault_policy`{.literal} 参数设定为
`allocate`{.literal}，则会尝试替换失败的设备。注：但不保证在第二阶段中会选取之前由该镜像使用，但不是失败设备一部分的设备可用。
:::
::: para
从 LVM 镜像失败中手动恢复的详情请查看 [第 6.3 节 "恢复 LVM
镜像错误"](#troubleshooting.html#mirrorrecover){.xref}。
:::
:::
:::
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#mirror_split}4.4.4.2. 拆分镜像逻辑卷的冗余映象 {.title}
:::
::: para
可拆分镜像逻辑卷的冗余映象以形成新逻辑卷。要拆分映象，可使用
`lvconvert`{.command} 命令的 `--splitmirrors`{.option}
参数，指定要拆分的冗余映象数。必须使用该命令的 `--name`{.option}
参数指定新拆分逻辑卷的名称。
:::
::: para
下面的命令从镜像逻辑卷 `vg/lv`{.literal} 中拆分名为 `copy`{.literal}
的新逻辑卷。新逻辑卷包含两个镜像分支。在这个示例中，LVM
选择要拆分的设备。
:::
``` screen
# lvconvert --splitmirrors 2 --name copy vg/lv
```
::: para
可指定要拆分的设备。下面的命令从镜像逻辑卷 `vg/lv`{.literal} 中拆分名为
`copy`{.literal} 的新逻辑卷。这个新逻辑卷包含两个镜像分支，由设备
`/dev/sdc1`{.literal} 和 `/dev/sde1`{.literal} 组成。
:::
``` screen
# lvconvert --splitmirrors 2 --name copy vg/lv /dev/sd[ce]1
```
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#mirror_repair}4.4.4.3. 修复镜像逻辑设备 {.title}
:::
::: para
可使用 `lvconvert --repair`{.command}
命令在磁盘失败后修复镜像。这样可让该镜像返回一致的状态。`lvconvert --repair`{.command}
命令是互动式命令，可提示您确定是否要让该系统尝试替换失败的设备。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    可在命令行中指定 `-y`{.option} 选项跳过提示并替换所有失败的设备。
    :::