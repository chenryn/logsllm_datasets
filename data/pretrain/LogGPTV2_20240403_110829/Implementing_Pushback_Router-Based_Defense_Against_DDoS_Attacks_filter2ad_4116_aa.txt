title:Implementing Pushback: Router-Based Defense Against DDoS Attacks
author:John Ioannidis and
Steven M. Bellovin
Implementing Pushback: Router-Based Defense Against DDoS Attacks
John Ioannidis
PI:EMAIL
AT&T Labs Research
Steven M. Bellovin
PI:EMAIL
AT&T Labs Research
Abstract
Pushback is a mechanism for defending against dis-
tributed denial-of-service (DDoS) attacks. DDoS attacks
are treated as a congestion-control problem, but because
most such congestion is caused by malicious hosts not obey-
ing traditional end-to-end congestion control, the problem
must be handled by the routers. Functionality is added to
each router to detect and preferentially drop packets that
probably belong to an attack. Upstream routers are also
notiﬁed to drop such packets (hence the term Pushback) in
order that the router’s resources be used to route legitimate
trafﬁc. In this paper we present an architecture for Push-
back, its implementation under FreeBSD, and suggestions
for how such a system can be implemented in core routers.
1. Introduction
Distributed Denial of Service (DDoS) attacks have be-
come an increasingly frequent disturbance of the global
Internet[15]. They are very hard to defend against because
they do not target speciﬁc vulnerabilities of systems, but
rather the very fact that the target is connected to the net-
work. All known DDoS attacks take advantage of the large
number of hosts on the Internet that have poor or no se-
curity; the perpetrators break into such hosts, install slave
programs, and at the right time instruct thousands of these
slave programs to attack a particular destination. The attack
does not have to exploit a security hole at the target to cause
a problem (although that would exacerbate the problem, to
the attacker’s beneﬁt), and there is almost nothing the vic-
tim can do to protect itself.
Under normal operating conditions, and assuming that
network links and router processing capacity have been ade-
quately provisioned, the standard, TCP-like congestion con-
trol ensures fair use of the available resources. Under a
DDoS attack, the arriving packets do not obey end-to-end
congestion control algorithms; rather, they incessantly bom-
bard the victim, causing the well-behaved ﬂows to back off
and eventually starve. In addition, a large-scale DDoS at-
tack not only causes trouble to its intended victim, but also
interferes with other trafﬁc that may happen to share a por-
tion of the network that is being heavily congested.
Mahajan et al. [13, 14] introduce a network-based solu-
tion, called Pushback, to address the question of whether
anything can be done inside the network to defend against
DDoS attacks, and evaluate the solution with extensive sim-
ulations.
In this paper, we present an implementation of
these concepts under Unix, along with experimental results
from our laboratory testbed. In the rest of this section we
give a very brief overview of the Pushback mechanism; the
reader should refer to [14] for all the details. Section 2
presents the architecture of a router that can support Push-
back; Section 3 gives implementation and performance de-
tails; we conclude with a discussion of deployment options,
as well as related work.
1.1. Overview of Pushback
If we could unequivocally detect packets belonging to an
attack and drop just those, the DDoS problem would be
solved. However, routers cannot tell with total certainty
whether a packet actually belongs to a ‘good’ or a ‘bad’
ﬂow; our goal will be to develop heuristics that try to iden-
tify most of the bad packets, while trying not to interfere
with the good ones. Again, Mahajan et al.
introduce the
concept of Aggregate-based Congestion Control (ACC); in
this context, an aggregate is deﬁned as a subset of the traf-
ﬁc with an identiﬁable property. For example, “packets to
destination D,” “TCP SYN packets,” or even “IP packets
with a bad checksum” are all descriptions of aggregates.
The task is to identify aggregates responsible for conges-
tion, and preferentially drop them at the routers.
To illustrate Pushback, consider the network in Fig-
ure 1.1. The server D is under attack; the routers R are
the last few routers by which trafﬁc reaches D. The thick
lines show links through which attack trafﬁc is ﬂowing; the
thin lines show links with no attack trafﬁc. Only the last
link is actually congested, as the inner part of the network is
adequately provisioned. In the absence of any special mea-
sures, hardly any non-attack trafﬁc would be reaching the
destination. Some non-attack trafﬁc is ﬂowing through the
links between R2-R5, R3-R6, R5-R8, R6-R8, and from R8
to D, but most of it is dropped due to congestion in R8-D.
R1
R2
R3
R4
R5
R6
R7
R8
D
Figure 1. A DDoS attack in progress.
Throughout this paper we shall be referring to ‘good,’
‘bad,’ and ‘poor’ trafﬁc and packets. Bad packets are those
sent by the attackers. Bad trafﬁc is characterized by an at-
tack signature, which we strive to identify; what can be re-
ally identiﬁed is the congestion signature, which is the set of
properties of the aggregate identiﬁed as causing problems.
Poor trafﬁc consists of packets that match the congestion
signature, but are not really part of an attack; they are just
unlucky enough to have the same destination, or some other
properties that cause them to be identiﬁed as belonging to
the attack. Good trafﬁc does not match the congestion sig-
nature, but shares links with the bad trafﬁc and may thus
suffer. Whether trafﬁc is considered ‘good,’ ‘bad,’ or ‘poor’
(or simply unaffected) depends on the congestion signature
employed; in the examples that follow, the congestion sig-
nature will be “UDP trafﬁc destined for D.”
Good trafﬁc in Figure 1.1 is, for example, TCP trafﬁc
entering from any of the links on top and destined for D;
because the link R8-D is congested, that trafﬁc suffers. If
the link R2-R5 were also congested, trafﬁc exiting from the
lower-left link of R5 might also suffer: according to our
deﬁnition, this would still constitute ‘good’ trafﬁc (it goes
through a link congested by the attack); the term “collateral
damage” has been used to describe it, in order to empha-
size that such trafﬁc is not going to the target of the attack.
One of the beneﬁts of Pushback, that no other mechanism
offers, is the ability to prevent such collateral damage from
happening. Returning to the example, some of the trafﬁc
entering R4 is good (non-UDP trafﬁc destined for D), some
is poor (legitimate UDP trafﬁc to D), and some is simply
unaffected (the fraction of trafﬁc exiting R7 that is not go-
ing to R8), but none is bad (there is no attack coming in
from that subtree). Trafﬁc entering from R1 through R3 is
a mixture of all four kinds of trafﬁc. Now, no matter how
smart ﬁlters R8 could employ, it cannot do anything to al-
low more good or poor trafﬁc originating from the left side
of the graph to reach D. All it can do is preferentially drop
trafﬁc arriving from R5 and R6, hoping that more non-bad
trafﬁc would ﬂow in from R7. With Pushback, R8 sends
messages to R5 and R6 telling them to rate-limit trafﬁc for
D. Even though the links downstream from R5 and R6 are
not congested, when packets arrive at R8 they are going to
be dropped anyway, so they may as well be dropped at R5
and R6. These two routers, in turn, propagate the request
up to R1, R2, and R3, telling them to rate-limit the bad traf-
ﬁc, allowing some of the poor trafﬁc, and more of the good
trafﬁc, to ﬂow through.
2. Architecture
Consider a typical router; Figure 2 gives the view of the
routing mechanism from one output interface. There are
several incoming links, and the routing subsystem is implic-
itly shown in the choice of the output interface. A rate lim-
iter is introduced before the output queue. In the FreeBSD
operating system [8], the IPFW ﬁrewall package also does
trafﬁc shaping and is in fact used in our prototype as the
rate limiter. Some form of rate limiting or trafﬁc shap-
ing is already in place in many commercial routers, so this
approach is not restricted to Unix-based routers only The
simplest way to view the rate limiter is as a predicate that
decides whether a packet is dropped or forwarded. In our
architecture, dropped packets are sent to the Pushback dae-
mon, pushbackd. The daemon, in turn, periodically up-
dates the parameters of the rate limiter, and also informs
the upstream daemons to update theirs. It is interesting to
point out that the actual Pushback daemon may not reside
on the router itself, but rather on an external ancillary piece
of equipment.
Input queues
. . .
output queue
P
D
Match
Congestion
Signature?
N
Y
rate limiter
P
adjust local ACC
D
update congestion signature
pushbackd
pushback
Figure 2. Partial view of a router.
Packets that are not dropped by the rate limiter are sent
to the output queue, and may be dropped then if there is
no available bandwidth for them to be transmitted. This has
the (desired) effect that packets that matched the congestion
signature but were not dropped by the rate limiter are not
treated preferentially over packets that did not.
The Pushback daemon receives dropped packets from
both the rate limiter and the output queue, as it needs to
know both how well the rate limiter is performing and how
many other packets are still being dropped in the output
queue. The information sent to the Pushback daemon is
shown in Figure 2. Most of the ﬁelds have the obvious pur-
pose. The magic number provides some protection against
synchronization problems between the kernel and the user-
level process. The timestamp is expressed in nanoseconds
since the router was last booted, and its purpose, along
with the packet size, is to allow the code to estimate the
bandwidth that would have been consumed by the dropped
packets. The ‘reason’ ﬁeld indicates whether this was a
rate-limiter drop or an output queue drop, and if the lat-
ter, whether it was a tail-queue drop, a RED drop, and so
on. Only packets dropped because of queue discipline re-
strictions are logged; packets dropped because, for exam-
ple, they were not routable, or even because no buffer space
could be allocated for them at the driver may not even reach
this part of the code, so they are not reported at all. This is
the desired behavior, as these other packets would not have
left the router anyway and thus would not have affected the
congestion of downstream links.
Magic number
IP Destination address
Input interface
Output interface
Timestamp
Packet size
Reason
Figure 3. Dropped packet report.
It is important to note that the design decision to separate
the rate-limiting and packet-dropping functionality from the
rest of the Pushback mechanism has implications for the
eventual deployment of such a mechanism in the Inter-
net. Routers can be designed1 to report information about
dropped packets, either to a process running on the router
CPU, or on a computer attached to the router using a local
interface. All the intelligence, which would have to evolve
rapidly as DDoS attacks change in nature, would reside in
easy to replace, generic PCs, and scarce router resources do
not have to be allocated to the Pushback task.
2.1. Aggregate Detection
Periodically, pushbackd processes the saved drop set
(i.e., the set of packets dropped by the rate limiter and the
output queue) to try to detect congestion. A large amount of
dropped packets obviously indicates congestion. If the rate
limiter has not been engaged yet, and all dropped packets
1in fact, some high-end routers already do that.
are coming from the output queue, congestion exists on the
link between this router and the next. If all drops are the
work of the rate limiter, this could indicate that rate-limiting
is working too well, perhaps the limits should be reduced.
The Pushback daemon now has to determine if there is
an attack going on, and whether to respond to it. The exact
algorithm(s) to run are will be an important research topic
for some time to come. We present such an algorithm here;
another can be found in [14].
We start by considering the drop set, that is, the set of
packets that are dropped by the rate limiter. These may
include packets dropped because of already-existing Push-
back activity, but as we shall see, this does not affect the
outcome of the algorithm. The size of the drop set should
be large enough to allow meaningful results, but also small
enough to be processed in a small amount of time. Fortu-
nately, it is not necessary to keep all the dropped packets; a
representative sample of them sufﬁces, as it is the most fre-
quent packets that will affect the outcome of the algorithm,
and these will be the most represented ones in the sample.
The important feature is that the algorithm should run in
less time that it takes to collect the packets.
This algorithm detects aggregates based only on IP desti-
nation address; the assumptions (the most pessimistic pos-
sible) are that source addresses cannot be trusted anyway,