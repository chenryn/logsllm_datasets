types of potential bugs (as shown in Table I) in the program
under testing. It then calculates the UBSan labels in each
code region as the quantitative metric for R2. As UBSan’s
conservative instrumentation may generate dummy labels,
SAVIOR incorporates a static ﬁlter to safely remove useless
labels. We discuss the details of this method in Section III-B1.
The above two solutions together ensure a sound analysis
for identifying potential bugs. First, our static reachability
analysis, as described in Section III-B1,
is built upon a
sound algorithm. It over-approximates all the code regions that
may be reached from a branch. Moreover, UBSan adopts a
conservative design, which counts all the operations that may
lead to the undeﬁned behavior issues listed in Table I [21, 35].
Facilitated by the two aspects of soundness, we can avoid
mistakenly underrating the bug-detecting potential of a seed.
Following the two solutions, SAVIOR computes the impor-
tance score for each seed as follows. Given a seed with n unex-
plored branches {e1, e2, . . . , en}, SAVIOR calculates the UB-
San labels in the code that are reachable from these branches,
respectively denoted as {L1, L2, . . . , Ln}. Also note that, in
the course of testing, SAVIOR has made {S1, S2, . . . , Sn}
attempts to solve those branches. With these pieces of infor-
mation, SAVIOR evaluates the importance score of this seed
i=1 e−0.05Si×Li. Li represents
with a weighted average 1
the potential of the ith unexplored branch. We penalize Li with
e−0.05Si to monotonically decrease its weight as the attempts
to solve this branch grow. The rationale is that more failed
n×(cid:80)n
Fig. 4: Solving the integer overﬂow in Figure 2. This shows
the case in a 32-bit system, but it applies to 64-bit as well.
attempts (usually from multiple paths) indicate a low success
possibility on resolving the branch. Hence, we decrease its
potential so that SAVIOR can gradually de-prioritize hard-
to-solve branches. Lastly, SAVIOR takes the average score
of each candidate branches in order to maximize the bug
detection gain per unit of time. To better understand this
scoring method, we show an example and explain the score
calculation in Figure 3.
This scoring method is to ensure that SAVIOR always
prioritizes seeds leading to more unveriﬁed bugs, while in
the long run it would not trap into those with hard-to-solve
branch conditions. First, it conservatively assesses a given
seed by the results of sound reachability and bug labeling
analysis. A seed which leads to more unexplored branches
where more unveriﬁed bugs can be reached from will earn a
higher score. Second, it takes into account runtime information
to continuously improve the precision of the assessment. This
online reﬁnement is important because statically SAVIOR
may hardly know whether a branch condition is satisﬁable
or not. Utilizing the history of constraint solving attempts,
SAVIOR can decide whether a seemingly high-score branch
is worth more resources in the future. As shown by our evalua-
tion in Section V, this scoring scheme signiﬁcantly accelerates
the detection of UBSan violations, which empirically supports
the effectiveness of our design.
Referring to our motivating example in Figure 1,
the
function packet_handler1 has few UBSan labels while
pcap_handler2 contains hundreds of labels. Hence, the
seed following Figure 1b has a lower score compared to the
other seed which runs the path in Figure 1c. This guides
SAVIOR to prioritize the latter seed, which can signiﬁcantly
expedite the exploration of vulnerable code.
Bug-guided veriﬁcation: This technique also ensures a sound
vulnerability detection on the explored paths that reach the
vulnerable sites. Given a seed from fuzz testing, SAVIOR
executes it and extracts the label of each vulnerability along
the execution path. After that, SAVIOR veriﬁes the predicates
implanted in each label by checking the satisﬁability under the
current path condition — if the predicate is satisﬁable then its
corresponding vulnerability is valid. This enables SAVIOR
to generate a proof of either vulnerability or non-existence
along a speciﬁc program path. Note that in concolic execution,
many new states with new branch constraints will be created.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
1583
b1b2b3b4b5b6b8b7reachablelabels:L2solveattempts:S2reachablelabels:L1solveattempts:S1\xfb\xfb\xf4\xf1\xxx\xxx\xxx\xxx\xfb\xf4\xf1\xf1section->sizeOverflowCondition:section->size+1size\xfb\xfb\xf4\xf1\xff\xff\xff\xff\xfb\xf4\xf1\xf1section->sizesolvesection->size+1 > 0xffffffff UB Families
Out-of-bound array access
Oversized shift
Signed integer overﬂow
Unsigned integer overﬂow
UBSan Labeling Details
Operation
x (cid:28) y, x (cid:29) y
array[x]
x ops y
x opu y
x  2n − 1
x ops y /∈ [−2n−1, 2n−1 − 1]
Fig. 5: System architecture of SAVIOR.
SAVIOR will prioritize the constraint solving for states who
require bug-guided veriﬁcation.
Going back to the example in Figure 2, classic hybrid
testing misses the integer overﬂow at line 15. In contrast,
SAVIOR is able to identify it with bug-guided veriﬁcation.
Aided by the Clang sanitizer [21], SAVIOR instruments
the potential overﬂows in a solver-friendly way (i. e., the
predicate of triggering this overﬂow is section->size +
1 > 0xffffffff). Due to the limited space, we present
the instrumented IR code in Figure 10 at Appendix A. As
demonstrated in Figure 4, following a seed to reach the
integer overﬂow location, SAVIOR tracks that the value of
section->size relies on a four-byte ﬁeld in the input.
By solving the vulnerability predicate, SAVIOR generates a
witness value 0xffffffff and triggers the vulnerability.
B. System Design
Figure 5 depicts the overall architecture of SAVIOR. It
consists of a compiling tool-chain built upon Clang and
LLVM, a fuzzer derived from AFL, a concolic executor
ported from KLEE, and a hybrid coordinator responsible for
the orchestration. We explain these components in details in
the following sections.
1) The Compilation Tool-chain: SAVIOR’s compilation
tool-chain has multiple purposes including vulnerability label-
ing, control ﬂow reachability analysis, and the targets building
of different components.
Sound Vulnerability Labeling: In our design, we use Clang’s
Undeﬁned Behavior Sanitizer (UBSan) [21] to label different
families of potential bugs2. Table I summarizes those families
used in SAVIOR and the operations pertaining to them.
We ignore other bug types listed in UBSan (e.g., misaligned
reference) since they are less likely to cause security issues.
For each inserted label, we patch the Clang front-end to attach
a !saviorBugNum metadata, aiding the reachability analysis
that we will shortly discuss.
As explained in Section III-A, UBSan over-approximates
the potential vulnerabilities. This approximation ensures
soundness since it never misses true bugs. UBSan also models
the conditional triggers of the labeled bugs as shown in Table I.
E.g., out-of-bound (OOB) array access happens when the
index x is not between zero and array size minus 1. At the time
of bug-guided veriﬁcation, SAVIOR solves each triggering
condition to produce a witness of the bug or, prove that the
bug never happens on current path in terms of the unsatisﬁable
2Clang supports enabling checks on each individual bug family.
TABLE I: Families of potential bugs that SAVIOR enables
UBSan to label. Here, x, y are n-bit integers; array is an
array, the size of which is speciﬁed as size(array); ops and
opu refers to binary operators +,−,×,÷, % over signed and
unsigned integers, respectively.
condition. In Figure 10 at Appendix A, we present the IR with
instrumented UBSan checks for the defect shown in Figure 2.
SAVIOR uses UBSan by default, while other labeling
methods may also apply if they meet the following two prop-
erties. First, they can comprehensively annotate the potential
vulnerabilities. Second, they can synthesize the triggering con-
dition of each labeled vulnerability. Note that such condition
must have data dependency on the program input. Otherwise,
our concolic execution cannot correlate the input with the
vulnerable conditions and hence, has no guidance for bug-
guided veriﬁcation. For instance, the AddressSanitizer [62]
builds checks upon the status of its own red-zone, which is
not applicable to SAVIOR at the moment.
UBSan’s conservative approximation inevitably introduces
false positives and might mislead SAVIOR’s prioritization.
In practice, we incorporate a static counter-measure to reduce
fake labels. Speciﬁcally, we trim a label when all the following
requirements hold: 1) The label’s parent (basic block) is its
immediate dominator [65]; 2) The IR variables involved in the
vulnerability conditions are not re-deﬁned between the label
and its parent; 3) The parent basic block has constraints that
conﬂict with the vulnerability conditions, and these constraints
are enforced by constant values. The ﬁrst two points ensure
that the constraints added by the parent will persist upon
reaching the label, and the third point indicates that the conﬂict
always arises, regardless of the input and the execution path.
Therefore, we can safely remove this label.
1 char array[MAX]; // 0 < MAX < INT_MAX
2 for(int i = 0; i < MAX;){
3
4
5 }
array[i] = getchar();//LABEL: OOB access
i++;//LABEL: integer-overflow
For instance, the code above has two labels that meet the three
requirements. In this example, the variable i ranges from 0
to MAX, meaning that neither the array access at line 3 can
be out-of-bound nor the self increment at line 4 can cause an
integer overﬂow. SAVIOR hence removes the two labels. In
Table IX at Appendix A, we summarize the number of labels
that are removed from each of our benchmark programs. On
average, we can conservatively reduce 5.36% of the labels.
Reachability Analysis: This analysis counts the number of
vulnerability labels that can be forwardly reached by each
basic block in the program control ﬂow graph (CFG). It
proceeds with two phases. The ﬁrst step constructs an inter-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
1584
qAnalysisqInstrument(AFL)qFuzzingqCoverageTestqBug-drivenPrioritization(KLEE)qConstraintSolvingqBug-guidedVerificationTargetProgramAFLbinarySAVIORbinaryLabelinfoKLEEbcseedskteststestcasesnewseedsClang+LLVMFuzzerCoordinatorConcolicExecutorprocedure CFG. The construction algorithm is close to the
method implemented in SVF [67]. It individually builds intra-
procedure CFGs for each function and then bridges function-
level CFGs by the caller-callee relation. To resolve indirect
calls, our algorithm iteratively performs Andersen’s point-to
analysis and expands the targets of the calls. This prevents
SAVIOR from discarding aliasing information of indirect
calls and therefore, our prioritization would not miscount the
number of vulnerability labels. By examining the CFGs, we
also extract the edge relations between a basic block and its
children for further use in the hybrid coordinator.
The second step is
to
calculate
the UBSan la-
bels that are reachable from
each basic block in the
constructed inter-procedure
CFG. Speciﬁcally, we iden-
tify the regions of code that
a basic block can reach and
count
the number of UB-
San labels in those regions.
In SAVIOR, we deem this
number as the importance
metric of that basic block
and use it for bug-driven prioritization. For example,
in
Figure 6 the basic block BB can reach 8 other basic blocks
while 3 of them have UBSan labels. Thereby we output 3 as
the number of reachable UBSan labels for BB. Note that each
basic block at most has one label after Clang’s compilation.
Fig. 6: A demonstrative ex-
ample of reachability analysis.
The target BB can “reach” 3
UBSan labels.
Target Building: After the labeling and the reachability
analysis, SAVIOR’s compiling tool-chain begins its building
process. It compiles three binaries from the source code
— a fuzzing-binary for the fuzzer, a SAVIOR-binary for
the coordinator, and a LLVM bitcode ﬁle for the concolic
executor. In particular, the SAVIOR-binary is instrumented
to print the unique IDs of the executed basic blocks. With
this design, SAVIOR completely decouples the fuzzer, the
concolic executor and the coordinator, thus it supports quick
replacement of any components.
2) The Coordinator: The coordinator bridges the fuzzer
and the concolic executor. It keeps polling seeds from the
fuzzer’s queue and prioritizes those with higher importance
for concolic execution. We explain the details as follows.
Bug-driven Prioritization: In a polling round, the coordi-
nator operates the new seeds in the fuzzer’s queue after
last round. Each seed is fed to the SAVIOR-binary and
the coordinator updates two pieces of information based
on the execution result. First,
it updates the global cov-
erage information. The coverage computation here follows
AFL’s original approach. That
is, we take the hit counts
of an edge in the following ranges as different cover-
age: [1], [2], [3], [4, 7], [8, 15], [16, 31], [32, 127], [128,∞). Sec-
ond, the coordinator records the sequence of basic blocks
Fig. 7: Fork server mode in KLEE. In this mode, KLEE only
performs initialization once and reuses the same executor for
all the received seeds.
visited by each seed. Using the updated coverage information,
the coordinator assigns a score to each seed following the
scheme presented in Section III-A. Here, we re-score all the
seeds except those already tested by our concolic executor,
since the coverage information is dynamically adjusted.
Finally, the coordinator selected the top-ranked seeds and
feed them into the input queue of the concolic executor. If
two seeds have the same score, the coordinator prefers the
seed with the +cov property. +cov indicates that the seed
brings new code coverage.
Post-processing of Concolic Execution: Going beyond seed
scheduling for concolic execution, the coordinator also need
to triage the new seeds generated by the concolic executor for
the fuzzer. First, it re-runs the new seeds and retains those
who provide new coverage or can reach uncovered bug labels.
As a result, SAVIOR transfers the valuable test cases from
the concolic executor to the fuzzer.
Second,
the coordinator updates the number of solving
attempts upon uncovered branches.
If a branch remains
uncovered, its solving attempts would be increased by 1. As
such, a branch having a much higher solving attempt value
will be de-prioritized.
3) The Concolic Executor: The concolic executor replays
the seeds scheduled by the coordinator and chooses to solve
branch conditions based on coverage information. In addition,
it also performs bug-guided veriﬁcation.
Independent Coverage Scheme: When encountering a branch
instruction the concolic executor needs to decide whether to
solve this branch’s condition. An intuitive design is to reuse
the coverage information from the coordinator. However, since
our coverage scheme is ID based, yet as KLEE invokes a
group of transformations on the target bitcode, this leads to
numerous mismatches between the edge IDs in the SAVIOR-
binary and the KLEE bitcode. To tackle this problem, we opt to
use KLEE’s internal coverage information to better decouple
the concolic executor and other components.
Fork Server Mode: Before running a seed, KLEE needs to
perform a group of initialization, including bitcode loading,
library bitcode linking, and global data preparation to place
the program under testing into the virtual machine. This
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
1585
BBBug#:3UBSan……UBSan…UBSan……Reachablecode…LoadAndLink()Initialization()TakeSeed()ConcolicExe()OutputAndClean()…S0S1S2S3…seedqueueKLEEinitialization process, however, typically takes a long time
on large bitcode ﬁles. For instance, the initialization time
for tcpdump is usually several times longer than the actual
concolic execution time. To address this issue, we introduce
an optimization named fork server mode for the KLEE con-
colic executor (as shown in Figure 7). Technical details are
explained in Section IV.
Bug-guided Veriﬁcation: Our concolic executor also performs
bug-guided veriﬁcation. Once an non-covered vulnerability
label is reached, we endeavor to solve the triggering constraint
following the current path. If the solving succeeds, KLEE
generates a seed as the proof of the vulnerability.
In certain cases,
the path constraints may conﬂict with
the vulnerability triggering conditions, while that vulnerability
can indeed happen following the same path (with fewer
constraints). QSYM [73] summarizes this issue as the over-
constraint problem. We adopt QSYM’s optimistic solving