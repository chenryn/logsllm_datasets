4.1. A trivial model 
We  illustrate  these  ideas  by  describing  a  minimalist 
example  of  an  intrusion  detection  system  following  this 
framework.  Let S  be  the  set of  system  calls  that  the  ap- 
plication  can ever make.  The set of allowable system call 
traces-i.e.,  our model of expected behavior-will 
then be 
exactly the regular language S*. If, at runtime, we ever ob- 
serve the application issuing some system call not in S ,  we 
prevent the system call from executing, kill the application, 
and sound the alarm. 
This model is easy to derive with automated source anal- 
ysis  tools.  Because in practice system calls may  be easily 
recognized in source code, the set S may be inferred easily 
by simply walking the parse tree and pattern-matching for 
system call invocations. 
Such an  approach is simple, easy  to implement, sound, 
and efficient, but it will fail to detect many attacks.  No at- 
tack that operates using just system calls from S will ever 
be detected, and in practice we can expect this failure mode 
to be common if S is too large. Another problem is that the 
approach is  too coarse-grained,  since many  common sys- 
tem  calls  are  too dangerous to  allow  without  any  restric- 
tions.  For example, if  the open() system  call  is  included 
in S, attackers will be free to modify any file whatsoever at 
any time without fear of detection.  Furthermore, this naive 
approach scales poorly to large applications, which are ex- 
actly the ones  at  greatest risk  for intrusions, because large 
applications yield  large sets S .  Consequently, a more pre- 
cise model is needed. 
4.2. The callgraph model 
The  foremost  problem  with  the  naive  model  described 
above is  that  we  have  thrown  away all  information  about 
the ordering  of the possible system calls. In this section we 
show how to retain some ordering information. 
One clean way  to represent information on the ordering 
of possible system calls is to express our model as a regular 
language over E, the set of system calls. For ease of model 
generation,  it  is convenient to  use  an equivalent represen- 
tation of the model as a non-deterministic finite automaton 
(NDFA). We describe  next  how to use  a NDFA to charac- 
terize the expected system call traces. 
Building the model  Deriving the model is a simple appli- 
cation  of control-flow analysis.  We  first build  the control- 
flow graph G = (V, E )  associated with the program source 
code. We assume that each node of the control-flow graph 
executes at most one system call and that we can recognize 
158 
f(ink  XI { 
1 
x  ?  g e t u i d o   : g e t e u i d o ;  
x++ ; 
> 
g o  c 
f d  =  open ("f ool',  0-RDONLY) ; 
f CO) ; close(fd) ;  f (1) ; 
e x i t  (0) ; 
'Figure 1. An  example C program (left), and its associated callgraph model (right).  Transitions to 
Wrong are omitted to  avoid cluttering the diagram.  Dashed lines indicate interprocedural edges, 
which are represented as €-transitions in the NDFA. 
where system calls occur.  Then we note that the  control- 
flow graph can  naturally be viewed as a specification  of a 
NDFA with statespace Vu{Wrong}, transitions induced by 
E ,  and alphabet C. Each edge w -+ w E  E  of the control- 
flow graph induces a transition w  % w of the automaton, if 
there is a system call a at node U ,  or the €-transition w  i w 
otherwise; €-transitions represent transfer of control where 
no system call  is executed.  Every proper  state  (i.e., each 
state w  # Wrong) is considered an accepting state. The spe- 
cial state Wrong is non-accepting and contains a self-loop 
Wrong  4 Wrong on every a  E  C; when  a node w  con- 
tains no outgoing transitions on  some symbol a  E  C, we 
add an  implicit  transition w 4 Wrong.  The resulting au- 
tomaton is non-deterministic because in general we cannot 
statically predict, for example, which branch of an if-then- 
else expression will  be taken  at runtime.  See Figure 1 for 
an example. 
We  use  this  automaton  as  our  model  of  expected  be- 
havior,  so that  an  observed  trace  is  accepted  only  if  it  is 
accepted  by  the NDFA. We  call  this  the  callgraph model. 
Note that this model throws away a lot of information about 
the execution  of  the  application:  in  particular,  we  ignore 
all  of  its  internal  state  other  than  the  program  counter. 
Nonetheless, it preserves a soundness property: 
Claim.  There are no false alarms when using the callgraph 
model. 
The  claim  follows  from  the  observation  that,  by  con- 
struction,  every  possible  path  of  execution  through  the 
control-flow graph corresponds to an accepting path of the 
NDFA, and thus every dynamically-possible execution trace 
will be accepted by the NDFA. 
Monitoring algorithm  When monitoring the application, 
we simulate the operation of the NDFA on the observed sys- 
tem call trace, resolving non-determinism by  exploring all 
possible paths in  breadth-first  order.  This requires O( IVI) 
operations  per  observed  system  call.  Note  that  more  ef- 
ficient  techniques  exist-for 
instance,  the  NDFA  may  be 
converted to a DFA, either ahead of time or on the fly, and 
caching  may  be  used  to  speed  up  the  simulation  [18]- 
but  we  have  not  explored  any  of  these  alternatives.  See 
Section  5  for more implementation details, and  Section 6 
for measurements of our implementation's performance and 
detection power. 
Function calls  One issue not mentioned so far is how to 
deal with  function calls.  After  we generate a control-flow 
graph  for  each procedure,  we connect  them together:  we 
split each call site w  into two nodes U ,  U'  and add extra edges 
w + Entry(!) 
and Exit(f) -+ w' for each function f that 
could  be called  from 'U.  See the dashed edges in  Figure  I 
for  an  example.  Here  Entry(f)  and  Exit(f)  denote  the 
unique  entry  and exit  nodes  for  f, as might be  expected. 
This so-called monomorphic (or context-insensitive) analy- 
sis produces  a single large  graph that may  be  analyzed as 
above. 
Imprecision in  the  model  One  limitation  of  the  call- 
graph  model  is  that  it  includes  impossible  paths,  due  to 
the monomorphic treatment of function calls.  In particular, 
consider two call sites v, w that both call the same function 
f ;  then  the expanded control-flow graph will contain  paths 
of the form w -+ Entry(f)  -+  . . .  + Exit(f) + w'. See 
Figure 1 for an illustrated example. Such an impossible path 
cannot  occur in any  real  execution, because function calls 
will  always return to the site where they  were called from. 
Unfortunately, a NDFA is unable to express this constraint, 
so we end up with impossible paths through the automaton. 
Impossible paths in the callgraph model are a problem in 
159 
f ( i n t  x) 
x  ?  g e t u i d 0   :  g e t e u i d o ;  
x++ ; 
> 
g o  c 
f d   =  open(”foo”,  O-RDONLY) ; 
f ( 0 )  ; close(fd) ; f(1) ; 
e x i t  ( 0 )  ; 
> 
Entry(f)  ::= getuid() Exit(f) 
I  geteuid()  Exit(f) 
Exit(f) 
Entry(g)  ::= open() v 
::= E 
::= Entry(f)  w’ 
::= close()  w 
::= Entry(f)  w‘ 
w 
v’ 
w 
w‘  ::= exit()  Exit(g) 
Exit(g) 
::= E 
while (true) 
case pop() of 
Entry(f) 3 push(Exit(f));  push(getuid()) 
Entry(f) * push(Exit(f));  push(geteuid()) 
Exit(f) 
Entry(g) 
U 
U /  
W 
W’ 
Exit(g) 
a E C 
otherwise + enter the error state, Wrong 
no-op 
push(v);  push(open()) 
+ push ( v’ ) ; push (Entry( f)) 
+ push(w);  push(close0) 
+ push(w’);  push(Entry(f)) 
push(Exit(g));  push(exit()) 
no-op 
read and consume a from the input 
Figure 2. The example C program again (left), with its associated context-free grammar (middle) and 
the resulting abstract stack model (right). 
practice.  This imprecision  causes  our NDFA  to be larger 
than  necessary,  and  attacks  that  follow  these  impossible 
paths  will  remain  undetected.  As  a  consequence,  intru- 
sion detection systems based on the callgraph  model may 
in some cases be more permissive than we would like. 
4.3. The abstract stack model 
We  next  introduce  the  abstract  stack  model, which  al- 
lows  us  to  characterize more precisely  the  set of possible 
system  call  traces  by  eliminating  impossible  paths.  The 
idea is  to model  not only the program counter  but also the 
state of the call stack.  We extend our model so that the set 
of possible system call traces is allowed to form a context- 
free language. It is then natural to represent this abstraction 
of the program as a non-deterministic pushdown automaton 
(NDPDA), or equivalently, a context-free grammar. 
Building the NDPDA  The pushdown automaton we con- 
struct will provide an intuitive model of program behavior. 
The state of the automaton will be an abstract summary of 
the  state of the application.  In  particular,  the  automaton’s 
stack will form an abstract version of the program call stack: 
each symbol on the automaton’s stack will correspond to a 
single stack frame in the application’s call stack, where ev- 
erything but the return address has been abstracted away. 
The construction is as follows.  We assume that we are 
given a global control-flow graph G = (V, E )  that includes 
interprocedural call  edges.  We  generate  a  NDPDA  with 
stack alphabet VUE, input alphabet C, and transitions given 
as follows.  Suppose first that there  is a node U  E  V  on the 
top of the stack. If v is a function call site referencing a pro- 
cedure  f ,  we pop  U  off  the  stack, push  the  corresponding 
return site U ’ ,  and finally push Entry( f )  on to the stack. If 
w is a function exit node, we pop w. If v is a non-call node, 
we pop w, push  s  if  w issues the system call s  E  C (other- 
wise, we do not push  anything for nodes that do not make 
system calls), non-deterministically  select some successor 
w  of ’U  with  ‘U  + w  E  E ,  and finally push w. On the other 
hand, i f s  E C is at the top of the stack, we attempt to match 
s against the current input symbol S I :  i f s  = s’,  we consume 
the current input symbol and pop s off the stack; otherwise, 
we enter the state Wrong and reject the input string. As in 
the callgraph model, all proper states are accepting states. 
See Figure 2 for an example. 
This construction of the NDPDA ensures that every se- 
quence of operations to the program call stack during a nor- 
mal application execution will be among the set of paths ex- 
plored during the simulation of NDPDA. Since the NDPDA 
is non-deterministic, other paths may  also be explored, but 
we can be sure that the correct one will not be omitted.  At 
the same time, the increased  precision of  the abstract stack 
model  makes  it  less likely  that  real  attacks  will  go unde- 
tected. 
In our implementation, the ND- 
The context-free model 
PDA is constructed directly. However, as the construction is 
rather detailed, it may be easier to consider building an (al- 
most, as explained below) equivalent context-free grammar 
for the program, with  non-terminals taken  from V ,  termi- 
nals  in  C  (the set of  system calls), and rules given  as fol- 
lows4. If U  is a function call site with corresponding return 
site U ’ ,  we add the rule U  ::= Entry(f)  ‘U’  for each function 
f that could be called from U .  For each non-call node U  and 
each successor w of U ,  we add the rule U  ::= a  w if there is 
a system call a  E  C at ‘U,  or the rule U  ::= w otherwise.  Fi- 
‘There  are some complications with setjmp0 and other non-standard 
forms of control flow; see Section 5.1 for extensions to handle them. 
160 
nally, for each function f in the program, we add the t-rule 
Exit(f) ::= E .  This grammar is quite natural [27, 28, 6,7]. 
The simplification referred to above is that the NDPDA, 