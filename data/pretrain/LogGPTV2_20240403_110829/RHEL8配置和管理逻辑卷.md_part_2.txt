:::
在 LVM
中，卷组被分成逻辑卷。管理员可以在不损坏数据的情况下增大或缩小逻辑卷，这与标准磁盘分区不同。如果卷组中的物理卷位于不同的驱动器或者
RAID 阵列中，那么管理员也可以跨存储设备分配逻辑卷。
如果您缩小逻辑卷到比卷中数据所需的容量小的容量时，则可能会丢失数据。为确保灵活性最大化，请创建逻辑卷以满足您的当前需求，并将过量存储容量保留为未分配。您可以根据需要安全地扩展逻辑卷使用未分配空间。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在 AMD、Intel、ARM 和 IBM Power Systems 服务器中,引导装载程序无法读取
LVM 卷。您必须为您的 /boot 分区创建一个标准的非 LVM 磁盘分区。在 IBM Z
中，zipl 引导装载程序使用线性映射支持 LVM 逻辑卷中的
/boot。默认情况下，安装过程总是在 LVM 卷中创建 / 和 swap
分区，在物理卷中有一个独立的 /boot 分区。
:::
下面的部分描述了不同类型的逻辑卷类型。
::: section
::: titlepage
## []{#logical_volumes-configuring-and-managing-logical-volumes.html#con_lvm_linear_volumes_lvm-logical-volumes}线性卷 {.title}
:::
线性卷将来自一个或多个物理卷的空间集合到一个逻辑卷中。例如：如果您有两个
60GB 的磁盘，您可以创建一个 120GB 的逻辑卷。物理存储是连在一起的。
创建一个线性卷，按顺序为逻辑卷的区域分配物理扩展范围。例如： [图 1.3
"扩展映射"](#logical_volumes-configuring-and-managing-logical-volumes.html#extent_mapping "图 1.3. 扩展映射"){.xref}
逻辑扩展 1 到 99 可以映射到一个物理卷，逻辑扩展 100 到 198
可以映射到第二个物理卷。从应用程序的角度来看，它是一个大小为 198
个扩展的设备。
::: figure
[]{#logical_volumes-configuring-and-managing-logical-volumes.html#extent_mapping}
**图 1.3. 扩展映射**
::: figure-contents
::: mediaobject
![Mapping extents in a linear volume](images/extent-map.png)
:::
:::
:::
构成逻辑卷的物理卷大小应该相同。[图 1.4
"使用物理卷的线性卷"](#logical_volumes-configuring-and-managing-logical-volumes.html#uneven_pvs "图 1.4. 使用物理卷的线性卷"){.xref}
显示卷组 `VG1`{.literal}，物理扩展大小为 4MB。这个卷组包括两个名为
`PV1`{.literal} 和 `PV2`{.literal} 的物理卷。物理卷被分成 4MB
单元，因为这是扩展的大小。在这个示例中，`PV1`{.literal} 的大小为 200
个扩展（800MB），`PV2`{.literal} 的大小为 100 个扩展（400MB）。您可以在
1 到 300 个扩展间创建线性卷（4MB 到 1200MB）。在这个示例中，名为
`LV1`{.literal} 的线性卷的大小为 300 个扩展。
::: figure
[]{#logical_volumes-configuring-and-managing-logical-volumes.html#uneven_pvs}
**图 1.4. 使用物理卷的线性卷**
::: figure-contents
::: mediaobject
![Linear volume with unequal physical volumes](images/uneven_pvs.png)
:::
:::
:::
您可以从物理扩展池配置多个线性逻辑卷，大小不限。[图 1.5
"多个逻辑卷"](#logical_volumes-configuring-and-managing-logical-volumes.html#uneven_lvs "图 1.5. 多个逻辑卷"){.xref}
显示与 [图 1.4
"使用物理卷的线性卷"](#logical_volumes-configuring-and-managing-logical-volumes.html#uneven_pvs "图 1.4. 使用物理卷的线性卷"){.xref}
中相同的卷组，但在这个示例中，有两个逻辑卷被从卷组中分离出来：
`LV1`{.literal}，大小为 250 个扩展(1000MB)和 `LV2`{.literal}，大小为 50
个扩展(200MB)。
::: figure
[]{#logical_volumes-configuring-and-managing-logical-volumes.html#uneven_lvs}
**图 1.5. 多个逻辑卷**
::: figure-contents
::: mediaobject
![Multiple logical volumes](images/uneven_vols.png)
:::
:::
:::
:::
::: section
::: titlepage
## []{#logical_volumes-configuring-and-managing-logical-volumes.html#con_lvm-striped-volumes_lvm-logical-volumes}条状逻辑卷 {.title}
:::
当您向 LVM
逻辑卷写入数据时，文件系统会在基本物理卷之间部署数据。您可以通过创建一个条状逻辑卷来控制将数据写入物理卷的方法。对于大量连续的读取和写入，这样可以提高数据输入/输出的效率。
条带化通过以 round-robin
模式向预定数目的物理卷写入数据来提高性能。使用条带，I/O
可以并行执行。在某些情况下，这可能会导致条带中的每个额外的物理卷提高近线的性能。
以下示例显示数据在三个物理卷之间进行条状分布。在这个图表中：
::: itemizedlist
-   数据的第一条写入第一个物理卷
-   数据的第二条写入第二个物理卷
-   数据的第三条被写入第三个物理卷
-   数据的第四条写入第一个物理卷
:::
在条状逻辑卷中，条的大小不能超过扩展的大小。
::: figure
[]{#logical_volumes-configuring-and-managing-logical-volumes.html#striped_voa}
**图 1.6. 在三个 PV 间对数据进行条状化**
::: figure-contents
::: mediaobject
![Striping data across three physical volumes](images/stripedvol.png)
:::
:::
:::
可以通过将另一组设备连接到第一个集合的末尾来扩展条状逻辑卷。要扩展条状逻辑卷，在基本物理卷集合中必须有足够的可用空间组成卷组来支持条带。例如：如果您有一个双向条带使用了整个卷组，那么向卷组中添加单一物理卷不会允许您扩展条带。反之，您必须在卷组中添加至少两个物理卷。
:::
::: section
::: titlepage
## []{#logical_volumes-configuring-and-managing-logical-volumes.html#con_raid-logical-volumes_lvm-logical-volumes}RAID 逻辑卷 {.title}
:::
LVM 支持 RAID 0、1、4、5、6 和 10。
LVM RAID 卷有以下特征：
::: itemizedlist
-   LVM 创建和管理的 RAID 逻辑卷利用多设备（MD）内核驱动程序。
-   您可以从阵列中临时分割 RAID1 镜像，并在之后将其合并到阵列中。
-   LVM RAID 卷支持快照。
:::
::: title
**集群**
:::
RAID 逻辑卷不是集群感知型逻辑卷。
您可以只在一台机器中创建和激活 RAID
逻辑卷，但不能在多台机器中同时激活它们。
::: title
**子卷**
:::
当您创建 RAID 逻辑卷时，LVM
会为阵列中的每个数据或奇偶校验子卷创建一个元数据子卷。
例如：创建一个双向 RAID1
阵列会导致两个元数据子卷（`lv_rmeta_0`{.literal} 和
`lv_rmeta_1`{.literal}）和两个数据子卷（`lv_rimage_0`{.literal} 和
`lv_rimage_1`{.literal}）。同样，创建三向条带（加 1
隐式奇偶校验设备）RAID4 会产生 4
个元数据子卷（`lv_rmeta_0`{.literal}、`lv_rmeta_1`{.literal}、`lv_rmeta_2`{.literal}和
`lv_rmeta_3`{.literal}）和 4
个数据子卷（`lv_rimage_0`{.literal}、`lv_rimage_1`{.literal}、`lv_rimage_2`{.literal}和
`lv_rimage_3`{.literal}）。
::: title
**完整性**
:::
当 RAID
设备失败或者发生软崩溃时，可能会丢失数据。数据存储中的软崩溃意味着，从存储设备中检索的数据与写入到那个设备中的数据不同。在
RAID LV
中添加完整性有助于缓解或防止软崩溃。要了解更多有关软崩溃以及如何在 RAID
LV 中添加完整性的信息，请参阅 ["使用带有 RAID LV 的 DM
完整性功能"一节](#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#using-dm-integrity-with-raid-lv_configure-manage-raid "使用带有 RAID LV 的 DM 完整性功能"){.xref}。
:::
::: section
::: titlepage
## []{#logical_volumes-configuring-and-managing-logical-volumes.html#con_thin-volumes_lvm-logical-volumes}精简配置的逻辑卷（精简卷） {.title}
:::
逻辑卷可以使用精简模式置备。这可让您创建大于可用扩展的逻辑卷。使用精简配置，您可以管理一个空闲空间的存储池，称为精简池，可在应用程序需要时将其分配给任意数量的设备。然后，当应用程序实际写入逻辑卷时，您可以创建可绑定到精简池的设备以便以后分配。可在需要时动态扩展精简池，以便有效分配存储空间。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
不支持集群中跨节点的精简卷。精简池及其所有精简卷必须只在一个集群节点中单独激活。
:::
通过使用精简配置，存储管理员可过量使用物理存储，从而避免购买额外的存储。例如：如果
10 个用户为每个应用程序请求一个 100GB
文件系统，存储管理员可以为每个用户创建一个 100GB
文件系统，但其后端的实际存储可以小于这个大小，它在需要时才使用实际的存储。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在使用精简配置时，存储管理员务必要监控存储池，并在其被完全占用时添加更多容量。
:::
要确定可以使用所有可用空间，LVM
支持数据丢弃功能。这允许重复使用丢弃文件或其他块范围使用的空间。
有关创建精简卷的详情，请参考
[创建精简置备的逻辑卷](#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#creating-thinly-provisioned-volumes_thinly-provisioned-logical-volumes "创建精简配置的逻辑卷"){.link}。
精简卷支持新的复制时写入（COW）快照逻辑卷部署，这将允许很多虚拟设备在精简池中共享相同数据。有关精简快照卷的详情，请参考
[精简配置的快照卷](#logical_volumes-configuring-and-managing-logical-volumes.html#thin-snapshot-volumes_lvm-logical-volumes "精简配置的快照卷"){.link}。
:::
::: section
::: titlepage
## []{#logical_volumes-configuring-and-managing-logical-volumes.html#con_snapshot_volumes_lvm-logical-volumes}快照卷 {.title}
:::
LVM
快照功能提供在特定时间创建设备的虚拟镜像且不会造成服务中断的功能。在提取快照后，当对原始设备进行修改时，快照功能会生成有变化的数据区域的副本，以便重建该设备的状态。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
LVM 支持精简配置的快照。
:::
因为快照只复制创建快照后修改的数据区域，快照功能需要的存储空间较小。例如，对于很少更新的原始卷，原始容量的
3-5% 就足以进行快照维护。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
文件系统的快照副本是虚拟副本，不是文件系统的实际介质备份。快照不能替代备份。
:::
预留用来存储原始卷更改的空间的大小取决于快照的大小。例如：如果您要创建快照，且要完全覆盖原始卷，则快照必须至少与原始卷大小方可保存更改。您需要根据预期的更改程度调整快照大小。例如，一个多数用于读取卷的简时间存在的快照（如
`/usr`{.literal}）的空间会比上时间存在的，与大量写入操作的卷的快照（如
`/home`{.literal}）要小。
如果快照已满，则快照就会变得无效，因为它无法跟踪原始卷中的更改。您应该定期监控快照的大小。快照可以完全重新定义大小，因此如果您有存储容量，则可以增大快照卷以避免丢失快照。另外，如果您发现快照卷超过您的需要，您可以减小卷的大小来为其它逻辑卷最大限度腾出空间。
当您创建快照文件系统时，仍可对原始系统有完全的读和写访问。如果更改了快照中的块，则会标记那个块，永远不会从原始卷中复制该块。
快照有几个用途：
::: itemizedlist
-   最典型的是。当您需要在逻辑卷中执行备份而不停止持续更新数据的 Live
    系统时会提取快照。
-   您可以在快照文件系统中执行 `fsck`{.literal}
    命令检查文件系统的完整性，并决定原始文件系统是否需要修复。
-   因为快照是可读/写的，您可以根据产品数据测试应用程序，方法是提取一个快照并根据快照运行测试，从而不会影响真实数据。
-   您可以为 Red Hat Virtualization 创建 LVM 卷。LVM
    快照可用来创建虚拟客体镜像的快照。这些快照可方便修改现有客户虚拟机或者使用最小附加存储创建新客户虚拟机。
:::
您可以使用 `lvconvert`{.literal} 的 `--merge`{.literal}
选项将快照合并到原始卷中。这个功能的一个作用是在您丢失数据或者文件或者需要将系统恢复到之前的状态时执行系统恢复。合并快照卷后，得到的逻辑卷将具有原始卷的名称、副号码和
UUID 并删除合并的快照。
:::
::: section
::: titlepage
## []{#logical_volumes-configuring-and-managing-logical-volumes.html#thin-snapshot-volumes_lvm-logical-volumes}精简配置的快照卷 {.title}
:::
Red Hat Enterprise Linux
支持精简配置的快照卷。精简快照卷允许将很多虚拟设备保存在同一个数据卷中。这简化了管理过程，并允许在快照卷间共享数据。
除了所有 LVM
快照卷以及所有精简卷一样，集群的节点不支持精简快照卷。快照卷必须在一个集群节点中完全激活。
精简快照卷提供以下优点：
::: itemizedlist
-   当有相同原始卷的多个快照时，精简快照卷就可以减少磁盘用量。
-   如果同一来源有多个快照，对原始卷的写入会导致 COW
    操作保留数据。增加原始卷的快照数量应该不会造成很大的性能下降。
-   精简快照卷可用于另一个快照的逻辑卷来源。这将可以实现任意深度的递归快照（一个快照的快照的快照...​）。
-   精简逻辑卷的快照也创建一个精简逻辑卷。在要求 COW
    操作前，或直到快照已写入前，并不会消耗数据空间。
-   精简快照卷不需要使用原始卷激活，因此当原始快照卷有很多不活跃时，用户可能只激活原始卷。
-   当您删除精简置备快照卷的原始卷时，该原始卷的每个快照都会变为独立的精简置备卷。这意味着，您不需要将快照与原始卷合并，而不必选择删除原始卷，然后使用该独立卷作为新快照的原始卷创建新置备快照。
:::
虽然使用精简快照卷有很多优点，但在有些情况下，旧的 LVM
快照卷功能可能更适合您的需要：
::: itemizedlist
-   您不能更改精简池的块大小。如果精简池的块大小较大（例如：
    1MB）,且您需要一个短期存在的快照且使用大块的效率不高时，可以选择使用旧的快照功能。
-   您不能限制精简快照卷的大小 ;
    如果需要，快照将使用精简池中所有空间。这可能不适用于您的需要。
:::
一般说来，在决定使用什么快照格式时，您应该考虑具体的要求。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在使用精简配置时，存储管理员务必要监控存储池，并在其被完全占用时添加更多容量。有关配置和显示精简配置的快照卷信息的详情，请参考