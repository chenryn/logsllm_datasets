G
(a)
v2
v3
v1
v4
m’
G*
(b)
m’
v2
v3
v1
v4
G
mi
(c)
Figure 2: Auxiliary graphs: (a) Original graph G;
(b) G∗ of G; (c) Gmi of G w.r.t. monitor mi.
b) only if for any set V ′ of up to k −1 non-monitors, each
connected component in G − V ′ contains a monitor.
Proof. Suppose condition (a) holds, and consider a can-
didate failure set V ′ and a non-monitor v (v 6∈ V ′). Since
the connected component in G − V ′ that contains v has a
monitor, there must exist a path connecting v to a monitor
that does not traverse any node in V ′. Following this path
from the monitor to v and then back to the monitor then
gives a path measurable under CAP that satisﬁes Lemma 3.
Thus, condition (a) is suﬃcient.
Suppose condition (b) does not hold, i.e., there exists a
non-monitor v that is disconnected from all monitors in G −
V ′ for a set V ′ of up to k − 1 non-monitors (v 6∈ V ′). Then if
nodes in V ′ fail, no remaining measurement path can probe
v, and thus it is impossible to determine whether v has failed
or not. This violates the condition in Lemma 4, and thus
condition (b) is necessary.
Simple as they look, these conditions still cannot be tested
eﬃciently because they enumerate over a combinatorial num-
ber of sets V ′. Fortunately, we are able to reduce them into
explicit conditions on the vertex-connectivity of a related
topology, which can then be tested in polynomial time. We
use the following notions from graph theory.
Definition 6.
[10] Graph G of |V | vertices is said to be
k-vertex-connected if k ≤ |V | − 1 and deleting any subset
of up to k − 1 vertices does not disconnect G. The vertex-
connectivity of G, denoted by δ(G), is the maximum k such
that G is k-vertex-connected.
In our problem, the key observation is that requiring each
connected component in G−V ′ to contain a monitor is equiv-
alent to requiring each connected component in G − M − V ′
(i.e., after removing all monitors) to contain a neighbor of a
monitor. Thus, if we add virtual links between these neigh-
bors, the resulting graph G − M − V ′ + L(N (M ), N (M ))
should be connected. However, this does not mean the con-
ditions are equivalent, because if G − M − V ′ is already
connected, G − M − V ′ + L(N (M ), N (M )) will certainly
be connected but G − M − V ′ may not contain any neigh-
bors of monitors. This special case can be avoided by in-
troducing a virtual monitor m′ connected to all neighbors
of monitors via virtual links, resulting in an auxiliary graph
G∗ := G − M + {m′} + L(cid:0)N (M ), N (M )(cid:1) + L(cid:0){m′}, N (M )(cid:1)
as illustrated in Fig. 2 (b). We will show that requiring
at least one monitor per connected component in G − V ′ is
equivalent to requiring G∗ − V ′ to be connected.
The beauty of this new condition is that it reduces the
tests over all possible V ′ to a single test of the vertex-
connectivity of G∗, as stated below.
Lemma 7. Each connected component in G − V ′ contains
a monitor for any set V ′ of up to s (s ≤ σ −1) non-monitors
if and only if G∗ is (s + 1)-vertex-connected.
Proof. We ﬁrst show the equivalence between the ﬁrst
condition and the connectivity of G∗ − V ′. If the ﬁrst con-
dition holds, then each connected component in G − M − V ′
contains a neighbor of a monitor. Since these neighbors are
connected with each other and also with m′ in G∗ − V ′, G∗ −
V ′ is connected. If the ﬁrst condition is violated, i.e., there
exists a connected component in G − M − V ′ without any
neighbor of any monitor, then this component must be dis-
connected from m′, and hence G∗ −V ′ must be disconnected.
We then show that requiring G∗ − V ′ to be connected for
any V ′ of up to s non-monitors is equivalent to requiring it
to be connected for any V ′ of up to s nodes in G∗, including
m′, i.e., requiring G∗ to be (s + 1)-vertex-connected. It suf-
ﬁces to show that G∗ − V ′ being connected for any V ′ of up
to s non-monitors implies the connectivity of G∗ −{m′}−V ′′
for any V ′′ of up to s − 1 non-monitors. Fixing a V ′′ of up
to s−1 non-monitors, we assert that each connected compo-
nent of G∗ −{m′}−V ′′ must contain a neighbor of a monitor,
as otherwise G∗ − V ′′ will be disconnected. Since all these
neighbors are connected via virtual links, G∗ − {m′} − V ′′
must be connected.
Lemma 7 allows us to rewrite the identiﬁability conditions
in Theorem 5 in terms of the vertex-connectivity of G∗.
Corollary 8. Network G is k-identiﬁable under CAP:
a) if G∗ is (k + 1)-vertex-connected (k ≤ σ − 1);
b) only if G∗ is k-vertex-connected (k ≤ σ).
A special case not covered by this corollary is the case of
k = σ (the total number of non-monitors), i.e., if we wish to
know whether the failure of any subset of non-monitors is
identiﬁable. We address this case separately in the following
proposition.
Proposition 9. Network G is σ-identiﬁable under CAP
if and only if each non-monitor is the neighbor of a monitor.
Proof. If each non-monitor has a monitor as a neighbor,
then their states can be determined independently through
1-hop probing, and hence any failure set is identiﬁable. On
the other hand, if there exists a non-monitor v that is only
reachable by monitors via other non-monitors, then the state
of v cannot be determined in the case that all the other non-
monitors fail, and hence G is not σ-identiﬁable.
Discussion: A previous study [16] has provided necessary
and suﬃcient conditions for a related problem of link failure
localization, under the assumption that probes can traverse
paths/cycles with possibly repeated nodes but no repeated
links. Although the problem is analogous to node failure
localization, the results of [16] do not apply to our problem4.
Testing algorithm: A key advantage of the newly de-
rived conditions over the abstract conditions in Section 3 is
that they can be tested eﬃciently. Given a value of k, we
4Solving node failure localization using the results of [16]
requires a topology transformation that maps each node to
a link while maintaining adjacency between nodes and fea-
sibility of measurement paths. To our knowledge, no such
transformation exists whose output satisﬁes the assumptions
of [16] (undirected graph, measurement paths not containing
repeated links).
200can evaluate the vertex-connectivity of G∗, δ(G∗), by the al-
gorithm for determining network vertex connectivity in [21]
in O(σ3.75) time and compare the result with k + 1 or k to
test the conditions in Corollary 8.
monitor m as illustrated in Fig. 2 (c), where m′ is again a
virtual monitor. We will show that the last condition is
equivalent to requiring Gm − F to be connected, and thus
the following holds.
4.2 Conditions under CSP
Under CSP, we restrict measurement paths P be the set of
simple paths between monitors, i.e., paths starting/ending
at distinct monitors and containing no cycles. As in the case
of CAP, our goal here is again to translate the abstract con-
ditions in Section 3 into concrete suﬃcient/necessary con-
ditions that can be eﬃciently veriﬁed. We ﬁrst give the
following result analogous to Theorem 5.
Theorem 10
(k-identifiability under CSP). Network
G is k-identiﬁable under CSP:
a) if for any node set V ′, |V ′| ≤ k + 1, containing at
most one monitor, each connected component in G −V ′
contains a monitor;
b) only if for any node set V ′, |V ′| ≤ k, containing at
most one monitor, each connected component in G −V ′
contains a monitor.
Proof. Suppose condition (a) holds, and consider a can-
didate failure set F , |F | ≤ k and a non-monitor v 6∈ F . We
argue that v must have two simple vertex disjoint paths to
monitors in G − F , and thus concatenating these paths pro-
vides a monitor-monitor simple path that traverses v but not
F , satisfying the abstract suﬃcient condition in Lemma 3.
Indeed, if such paths do not exist, i.e., ∃ a (monitor or non-
monitor) node w (w 6= v) that resides on all paths from v
to monitors in G − F , then v will be disconnected from all
monitors in G − F − {w}, i.e., the connected component con-
taining v in G − V ′, where V ′ = F ∪ {w}, has no monitor,
contradicting condition (a).
Suppose condition (b) does not hold, i.e., there exists a
non-monitor v, a (monitor or non-monitor) node w, and a
set of up to k − 1 non-monitors F (v 6= w and v, w 6∈ F )
such that the connected component containing v in G − V ′,
V ′ = F ∪ {w}, contains no monitor. Then any path from
v to monitors in G − F must traverse w, which means no
monitor-monitor simple path in G −F will traverse v (as any
monitor-monitor path traversing v must form a cycle at w).
This violates the necessary condition in Lemma 4 because if
node v fails, the failure cannot be identiﬁed in G − F .
As expected, due to the restriction to simple paths, the
identiﬁability conditions in Theorem 10 are stronger than
those in Theorem 5. As with Theorem 5, the conditions
in Theorem 10 do not directly lead to eﬃcient tests, and
we again seek equivalent conditions in terms of topological
properties. Each condition in the form of Theorem 10 (a–b)
covers two cases: (i) V ′ only contains non-monitors; (ii) V ′
contains a monitor and |V ′| − 1 non-monitors. The ﬁrst case
has been converted to a vertex-connectivity condition on an
auxiliary topology G∗ by Lemma 7; we now establish a sim-
ilar condition for the second case using similar arguments.
Fix a set V ′ = F ∪ {m}, where m is a monitor in M and
F a set of non-monitors. Again, the key observation is that
each connected component in G − V ′ containing a monitor
is equivalent to each connected component in G − M − F
containing a neighbor of a monitor other than m (i.e., a node
in N (M \ {m})). To capture this, we introduce another
auxiliary graph Gm := G − M + {m′} + L(cid:0)N (M \ {m}),
N (M \{m})(cid:1)+L(cid:0){m′}, N (M \{m})(cid:1) with respect to (w.r.t.)
Lemma 11. The following two conditions are equivalent:
(1) Each connected component in G − V ′ contains a mon-
itor for any set V ′ consisting of monitor m (m ∈ M )
and up to s (s ≤ σ − 1) non-monitors;
(2) Gm is (s + 1)-vertex-connected.
Proof. The proof is similar to that of Lemma 7. If the
ﬁrst condition holds, then each connected component in G −
M −F for F := V ′\{m} contains a node in N (M \{m}), and
thus Gm − F is connected. If the ﬁrst condition is violated,
then there is a connected component in G − M − F that does
not contain any node in N (M \{m}). This component must
be disconnected from m′ in Gm − F , and thus Gm − F must
be disconnected. Hence, the ﬁrst condition is equivalent
to Gm − F being connected for any set F of up to s non-
monitors. Moreover, Gm − F being connected for any set F
of up to s non-monitors implies that Gm − {m′} − F ′ (m′
is the virtual monitor in Gm) is connected for any F ′ of up
to s − 1 non-monitors, because otherwise Gm − F ′ will be
disconnected. Therefore, the ﬁrst condition is equivalent to
Gm − F being connected for any set F of up to s nodes in
Gm, i.e., the ﬁrst and second conditions in Lemma 11 are
equivalent.
Based on Lemmas 7 and 11, we can rewrite Theorem 10
as follows.
Corollary 12. Network G is k-identiﬁable under CSP:
a) if G∗ is (k + 2)-vertex-connected, and Gm is (k + 1)-
vertex-connected for each monitor m ∈ M (k ≤ σ − 2);
b) only if G∗ is (k + 1)-vertex-connected, and Gm is k-
vertex-connected for each monitor m ∈ M (k ≤ σ − 1).
Special cases left out by this corollary are the cases of k =
σ and k = σ − 1, which are addressed separately as follows.
Proposition 13. Network G is σ-identiﬁable under CSP
if and only if each non-monitor has at least two monitors as
neighbors.
Proof. If each non-monitor has at least two monitors
as neighbors, then their states can be determined indepen-
dently by cycle-free 2-hop probing between monitors, and
thus the network is σ-identiﬁable. On the other hand, sup-
pose ∃ a non-monitor v with zero or only one monitor neigh-
bor. Then ∄ simple paths going through v without travers-
ing another non-monitor, and hence the state of v cannot be
determined if all the other non-monitors fail.
Proposition 14. Network G is (σ − 1)-identiﬁable under
CSP if and only if all but one non-monitor, denoted by v,
have at least two monitors as neighbors, and v either has (i)
two or more monitors as neighbors, or (ii) one monitor and
all the other non-monitors (i.e., N \ {v}) as neighbors.
Proof. a) Necessity: Suppose that G is (σ−1)-identiﬁable
under CSP. If it is also σ-identiﬁable, then each non-monitor
must have at least two monitors as neighbors according to
Proposition 13. Otherwise, we have Ω(G) = σ − 1. In this
case, ∃ at least one non-monitor, denoted by v, with at most
one monitor neighbor. Let N (v) denote all neighbors of v
201including monitors. Suppose that v has λ neighbors (i.e.,
|N (v)| = λ). Then there are two cases:
(i) N (v) con-
tains a monitor, denoted by em; (ii) all nodes in N (v) are
non-monitors. In case (i), the sets F1 = N (v) \ {em} and
F2 = F1 ∪ {v} are not distinguishable because ∄ monitor-to-
monitor simple paths traversing v but not nodes in F1. In
case (ii), the sets F1 = N (v) \ {w} (where w is an arbitrary
node in N (v)) and F2 = F1 ∪ {v} are not distinguishable
as all monitor-to-monitor simple paths traversing v must go
through at least one node in F1. Based on (i–ii), we conclude
that Ω(G) ≤ λ − 1, where λ is the degree of any non-monitor
with at most one monitor neighbor. For Ω(G) = σ − 1, we
must have λ ≥ σ, which can only be satisﬁed if all such non-
monitors have one monitor and all the other non-monitors
as neighbors. Moreover, if there are two such non-monitors
v and u, then the sets F ∪{v} and F ∪{u}, where F = N \{v,
u}, are not distinguishable as all monitor-to-monitor simple
paths traversing v must go through F or u and vice versa.
Therefore, such non-monitor must be unique.
b) Suﬃciency: If each non-monitor has at least two moni-
tors as neighbors, then G is σ-identiﬁable (hence also (σ−1)-
identiﬁable) according to Proposition 13. If all but one non-
monitor v have at least two monitors as neighbors, and v has
one monitor em and all the other non-monitors (i.e., N \ {v})
as neighbors, then for any two failure sets F1 and F2 with
|Fi| ≤ σ − 1 (i = 1, 2), there are two cases: (i) F1 and F2
diﬀer on a non-monitor other than v; (ii) F1 and F2 only
diﬀer on v. In case (i), since the states of all non-monitors
other than v can be independently determined, F1 and F2
are distinguishable. In case (ii), suppose that F1 = F ∪ {v}
and F2 = F for F ⊆ N \ {v}. Since |F1| ≤ σ − 1, |F | ≤ σ − 2
and ∃ a non-monitor w ∈ (N \ {v}) \ F . We know that v
is a neighbor of w (as v is a neighbor of all the other non-
monitors) and w is a neighbor of a monitor m other than
em (as it has at least two monitor neighbors). Thus, emvwm
is a monitor-to-monitor simple path traversing v but not F ,
whose measurement can distinguish F1 and F2. Therefore,
G is (σ − 1)-identiﬁable under CSP.
Testing algorithm: Similar to the case of CAP, we can
use the algorithm in [21] to compute the vertex-connectivities
of the auxiliary graphs G∗ and Gm (∀m ∈ M ), and then com-
pare the results with k + 2 and k + 1 (or k + 1 and k) to test
the conditions in Corollary 12 for any given k. The overall
complexity of the test is O(µσ3.75).
4.3 Conditions under UP
Under UP, monitors have no control over the paths be-
tween monitors, and the set of measurement paths P is lim-
ited to the paths between monitors predetermined by the
network’s native routing protocol. In contrast to the pre-
vious cases (CAP, CSP), identiﬁability under UP can no
longer be characterized in terms of topological properties.
We can, nevertheless, establish conditions more explicit than
the abstract conditions in Section 3. The idea is to examine
how many non-monitors need to be removed to disconnect
all measurement paths traversing a given non-monitor v. If
the number is suﬃciently large (greater than k), then we
can still infer the state of v from some measurement path
when a set of other non-monitors fail; if the number is too
small (smaller than or equal to k − 1), then we will not be
able to determine the state of v as the failures of all paths
traversing v can already be explained by the failures of other
non-monitors. This intuition leads to the following results.
In the sequel, Pv ⊆ P denotes the set of measurement
paths traversing a non-monitor v, and Sv := {Pw : w ∈
N, w 6= v} denotes the collection of path sets traversing
non-monitors in N \ {v}. We use MSC(v) to denote the
minimum set cover of Pv by Sv, i.e., MSC(v) := |V ′| for
Note that covering is only feasible if v is not on any 2-hop
measurement path (i.e., monitor-v-monitor), in which case
the minimum set V ′ ⊆ N \ {v} such that Pv ⊆ Sw∈V ′ Pw.
we know Pv ⊆ Sw∈N,w6=v Pw and thus MSC(v) ≤ σ − 1. If
v is on a 2-hop path, then we deﬁne MSC(v) := σ.
Theorem 15
(k-identifiability under UP). Network
G is k-identiﬁable under UP with measurement paths P :
a) if MSC(v) > k for any non-monitor v;
b) only if MSC(v) > k − 1 for any non-monitor v.
Proof. Suppose condition (a) holds. Then for any candi-
date failure set F with |F | ≤ k and any other non-monitor v
(v 6∈ F ), there must be a path in Pv that is not in Sw∈F Pw,
i.e., traversing v but not F , which satisﬁes the abstract suf-
ﬁcient condition in Lemma 3.
Suppose condition (b) does not hold, i.e., there exists a
non-monitor v and a set of non-monitors V ′ with |V ′| ≤ k−1
and v 6∈ V ′, such that Pv ⊆ Sw∈V ′ Pw. Then given failures
of all nodes in V ′, the state of v has no impact on observed
path states and is thus unidentiﬁable, violating the abstract
necessary condition in Lemma 4.
Testing algorithm: The conditions in Theorem 15 pro-
vide an explicit way of testing the k-identiﬁability under UP,
using tests of the form MSC(v) > s. Unfortunately, evaluat-
ing such a test, known as the decision problem of the set cov-
ering problem, is known to be NP-complete. Nevertheless,
we can use approximation algorithms to compute bounds
on MSC(v). The best-known algorithm with approximation
guarantee is the greedy algorithm, which iteratively selects
the set in Sv that contains the largest number of uncovered
paths in Pv until all the paths in Pv are covered (assuming
that v is not on any 2-hop path).
Let GSC(v) denote the number of sets selected by the
greedy algorithm. This immediately provides an upper bound:
MSC(v) ≤ GSC(v). Moreover, since the greedy algorithm
has an approximation ratio of log(|Pv|) + 1 [22], we can also
bound MSC(v) from below: MSC(v) ≥ GSC(v)/(log(|Pv|)+
1). Applying these bounds to Theorem 15 yields a pair of
relaxed conditions:
• G is k-identiﬁable under UP if k  minv∈N GSC(v).