### 3.4 State Validation for Intrusion Detection

State validation of replicated applications on two replicas involves comparing the entire memory space, metadata, and critical files of the service application processes. For practical reasons, we select a subset of critical code and data sections that significantly affect the execution correctness of the service application.

1. **Code Segment Validation:**
   - Once the code segment is loaded into memory, it should remain unchanged.
   - The request processing routines of the two replicated applications must be identical.
   - Validating the code segment helps detect any compromise that exploits driver vulnerabilities to tamper with the service application's code.

2. **Metadata Validation:**
   - The metadata of the application process is maintained and updated by the OS kernel.
   - A compromised driver with unrestricted privileges can distort this metadata for commercial gain.
   - Key metadata can be manipulated by attackers to disrupt the correct execution of the service application.
   - Even with kernel privileges, the attacker’s primary target for commercial profit is the metadata of the service application.

3. **Data Verification:**
   - Sensitive or critical data of the service application must be verified through comparison, as it determines the correctness of the application's execution and the enterprise's revenue.
   - Service application developers or system administrators can configure which data should be verified, as they have a better understanding of what is most critical and valuable.
   - By default, global variables, static data, and function pointers of the service application are verified using bit-by-bit comparison.

Intensive state validation helps in quickly detecting compromises but also introduces runtime overhead. We design both fine-grained and coarse-grained time slice state validation, allowing dynamic switching between them to balance accuracy and performance.

- **Fine-Grained Time Slice State Validation:**
  - This method is based on system call synchronization and offline bitwise comparison.
  - Whenever a system call is issued by a service application process, its state (including code segment, metadata, and dependable files) is logged.
  - Since the two service applications are synchronized at the granularity of system calls, their states (as recorded in logs) must be identical.

- **Coarse-Grained Time Slice State Validation:**
  - This method is based on request synchronization and offline bitwise comparison.
  - The state of each service application is logged whenever a request is processed and then verified through comparison.

### 3.5 Operate-through Intrusion Response

With response and state validation, compromises to the service application through vulnerable driver code exploitation can be quickly detected. During normal execution, the two replicated applications are well-synchronized at least at the per-packet processing granularity. From the front-tier proxy's perspective, responses to incoming requests generally arrive simultaneously.

In the DRASP architecture, the service application on the front-stage replica will always be the victim, while the one on the back-stage replica survives. Even if the victim replica malfunctions due to exploitation, the other replica continues to perform correctly. Therefore, it is safe for the system administrator to transfer the following service workload to the surviving replica without losing any accumulated state, continuity, or correctness. Simultaneously, the system administrator should prepare to restart a new criteria replica from a clean VM image and configure the corresponding heterogeneous device emulation and service application to continue DRASP protection.

### 4. EVALUATION

#### 4.1 Capacity in Driver Vulnerability-Oriented Intrusion Detection

**Response Validation Based Detection:**
- Attackers can set existing driver function pointers to arbitrary code, either implemented by the attackers or from the OS kernel.
- We simulate such an attack by inserting a buffer overflow bug into the packet processing function of the Realtek RTL8139 NIC driver (8139too), while the Intel 82540EM NIC driver (e1000) does not have such a bug.
- The attacker exploits the bug in the 8139too driver and redirects the hard start xmit function pointer to the injected code.
- The injected code manipulates some payload data of each packet for commercial profit.
- Since the e1000 driver is not affected, the exploit fails, and the function pointer remains unaltered on the surviving replica.
- The response from the surviving replica is correct, and the response validator on the front-tier proxy detects the mismatch, confirming the compromise of the victim replica.

#### 4.2 Efficiency

To evaluate the runtime overhead introduced by state and response validation, we compare the performance of the dhttpd server running on native Xen-HVM Domain U and on Xen-HVM Domain U with our instrumentation (including request replication, response, and state validation functionalities).

- On another machine, we simulate clients sending continuous requests over concurrent connections to fetch a 24 KB file.
- The native Xen-HVM Domain U achieves a response time of approximately 45 ms.
- With coarse-grained time slice state validation, the response time is around 47 ms.
- With fine-grained time slice state validation, the response time is around 50 ms.
- We believe this overhead is reasonable and affordable for most service applications.

#### 4.3 Continuity, Accumulated State, and Correctness Preservation

We run the dhttpd server on our instrumentation platform and use Apache benchmark [1] on another machine to evaluate the continuity, accumulated state, and correctness preservation functionalities of DRASP.

- We configure Apache benchmark to simulate 50 concurrent connections sending requests to the dhttpd server for 600 seconds.
- During this period, tinyproxy continues to switch between the front-stage and back-stage replicas every 10 seconds.
- We repeat the experiment 10 times and do not find any missing or false responses for all requests.
- We conclude that once one replica is compromised, the service will continue without interruption by transferring the workload to the other replica.

### 5. RELATED WORK

#### Application State Preservation

Existing application recovery techniques ([13], [9], [14], [5]) can preserve continuity and accumulated states only when the application's vulnerability is exploited, not the OS kernel. Most of these techniques ([13] and [9]) take periodic snapshots of the application state and log system events during routine execution. Upon an exploit, dependency tracking ([10], [13], and [21]) is used to analyze the intrusion "footprint" across the system. Roll-back/roll-forward actions are performed to mitigate the intrusion harm, while the clean state of the application is preserved with best effort.

- **Failure-Oblivious Computing [14]:** Continues server execution through memory error exploits by inserting checks that dynamically detect invalid memory accesses.
- **Data Structure Consistency Specification [5]:** Automatically detects and repairs data structures, enabling the program to continue executing productively even in the face of otherwise crippling errors.

#### Diversity Approach

Software diversity for intrusion detection has been studied in several works, such as COTS [19], Behavioral Distance [8], and Detection of Split Personalities [2].

- **COTS Diversity [19]:** Proposes design diversity, such as N-version programming, and applies it to web servers to verify their interactions with the environment for anomalies, e.g., HTTP responses.
- **Behavioral Distance [8] and Detection of Split Personalities [2]:** Aim to detect intrusions or anomalies by comparing the system call sequences made by diverse applications.
- **N-variant [4]:** Proposes address space partitioning and instruction set tag diversities to detect divergences caused by intrusions.

While these approaches are effective in detecting compromised applications, they are limited in detecting compromises launched from driver code vulnerability exploitation. The N-variant approach and DRASP can achieve similar intrusion detection, but DRASP is more generic in server environments, especially with fault-tolerant systems deployed.

### 6. CONCLUSION

In this paper, we present DRASP, a novel approach to prevent compromised drivers from manipulating service applications for commercial profit and to preserve as much accumulated state, continuity, and correctness of the service as possible. DRASP relies on a virtual platform to emulate heterogeneous devices for guest operating systems, producing driver-diverse replicas. Service applications identically replicated on the two replicas are synchronized either at the system call or packet processing granularity. By validating the responses and states of the two applications on the two replicas, DRASP can swiftly detect intrusions through driver vulnerability exploitation. Our evaluation demonstrates that DRASP can achieve on-the-fly driver-oriented intrusion response and ensure the correctness of the applications' execution.

### Acknowledgment

This work was supported by AFOSR FA9550-07-1-0527 (MURI), NSF CNS-0905131, ARO W911NF-09-1-0525 (MURI), NSF CNS-0916469, ARO W911NF1210055, and AFRL FA8750-08-C-0137.

### 7. REFERENCES

[1] ab - Apache HTTP server benchmarking tool. http://httpd.apache.org/docs/2.0/programs/ab.html.

[2] Davide Balzarotti, Marco Cova, Christoph Karlberger, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. Efficient detection of split personalities in malware. In NDSS, 2010.

[3] Andy Chou, Junfeng Yang, Benjamin Chelf, Seth Hallem, and Dawson Engler. An empirical study of operating systems errors. In SOSP, pages 73–88, 2001.

[4] Benjamin Cox, David Evans, Adrian Filipi, Jonathan Rowanhill, Wei Hu, Jack Davidson, John Knight, Anh Nguyen-tuong, and Jason Hiser. N-variant systems: A secretless framework for security through diversity. In USENIX Security Symposium, pages 105–120, 2006.

[5] Brian Demsky and Martin Rinard. Automatic detection and repair of errors in data structures. In OOPSLA, pages 78–95, 2003.

[6] Alex Depoutovitch and Michael Stumm. Otherworld - giving applications a chance to survive OS kernel crashes. In Eurosys, 2010.

[7] Xiaoning Ding, Hai Huang, Yaoping Ruan, Anees Shaikh, Brian Peterson, and Xiaodong Zhang. Splitter: a proxy-based approach for post-migration testing of web applications. In Eurosys, 2010.

[8] Debin Gao, Michael K. Reiter, and Dawn Song. Behavioral distance for intrusion detection. In RAID, pages 63–81, 2005.

[9] Taesoo Kim, Xi Wang, Nickolai Zeldovich, and M. Frans Kaashoek. Intrusion recovery using selective re-execution. In OSDI, 2010.

[10] Samuel T. King and Peter M. Chen. Backtracking intrusions. In SOSP, 2003.

[11] Clemens Kolbitsch, Thorsten Holz, Christopher Kruegel, and Engin Kirda. Inspector gadget: Automated extraction of proprietary gadgets from malware binaries. In IEEE Symposium on Security and Privacy, 2010.

[12] Nicolas Palix, Gael Thomas, Suman Saha, Christophe Calvélès, Julia Lawall, and Gilles Muller. Faults in Linux: ten years later. In ASPLOS, 2011.

[13] Feng Qin, Joseph Tucek, and Yuanyuan Zhou. Rx: Treating bugs as allergies – a safe method to survive software failures. In SOSP, pages 235–248, 2005.

[14] Martin Rinard, Cristian Cadar, Daniel Dumitran, Daniel M. Roy, Tudor Leu, and William S. Beebee. Enhancing server availability and security through failure-oblivious computing. In OSDI, pages 303–316, 2004.

[15] Rodrigo Rodrigues, Miguel Castro, and Barbara Liskov. BASE: Using abstraction to improve fault tolerance. In SOSP, pages 15–28, 2001.

[16] Daniel J. Scales, Mike Nelson, and Ganesh Venkitachalam. The design of a practical system for fault-tolerant virtual machines. ACM SIGOPS Operating Systems Review, 44(4):30–39, 2010.

[17] R. Sekar. An efficient black-box technique for defeating web application attacks. In NDSS, 2009.

[18] Yuen-Lin Tan, Terrence Wong, John D. Strunk, and Gregory R. Ganger. Comparison-based file server verification. In USENIX Annual Technical Conference, 2005.

[19] Eric Totel, Frederic Majorczyk, and Ludovic Mé. COTS diversity based intrusion detection and application to web servers. In RAID, pages 43–62, 2005.

[20] Jian Yin, Jean-Philippe Martin, Arun Venkataramani, Lorenzo Alvisi, and Mike Dahlin. Separating agreement from execution for Byzantine fault tolerant services. In SOSP, pages 253–267, 2003.

[21] Shengzhi Zhang, Xiaoqi Jia, Peng Liu, and Jiwu Jing. Cross-layer comprehensive intrusion harm analysis for production workload server systems. In ACSAC, 2010.