反
下面两个表达式是等价的：
，（不过，可以用操作符来测试NULL值。）
8
128
L
0
1515
13
105
0
0
0
人
0
0
0
---
## Page 583
想把II当作字符串连接操作符来使用，需要启用SQL模式 PIPES_AS_CONCAT。
语言里规定的那样用来完成字符串连接操作。如果要连接字符串，需要使用CONCAT（）函数。如果
把操作数O解释为假，NULL解释为未知。
1；结果为假，则返回O；结果未知，则返回NULL。逻辑操作符把非零、非NULL 操作数解释为真，
C.1.6
在MySQL里，！、II和&&表示逻辑操作，与C语言里的含义一样。特别地，1I不像标准 SQL
逻辑操作符要求操作数为数字，因此字符串操作数在计算过程开始之前会被转换为数字。
逻辑操作符（即“布尔操作符”）用来测试表达式是否成立。如果逻辑操作的结果为真，则返回
OR或I1
AND或&&
NOT或！
口~
口vV
逻辑“或”操作符。如果两个操作数里有一个为真（非零，非NULL），则计算结果为1；如
NULLAND NULL
个操作数为假，
逻辑“与”操作符。如果两个操作数都为真（非零，非NULL），则计算结果为1；如果有一
操作符NOT的优先级可以按照C.1.1节的做法进行更改。
在上面的最后几个例子里，字符串操作数将被转换为数字后再计算。
NOTO
逻辑非操作符。如果随后的操作数为假，则计算结果为1；如果操作数为真，则计算结果为
对随后的操作数逐位取反。即把所有的0位翻转为1，而把所有的1位翻转为0。
NOT
NOT
~~（-1)
~（-1)
把左操作数的各位右移，移动次数由右操作数指定。如果右操作数为负值，则运算结果为
最后两个例子演示了64位计算的极限情况。
AND NULL
逻辑操作符
AND
AND
1
V
0
NULL
2
3
3
，则计算结果为0；否则，计算结果为NULL（结果不确定）。
→NULL
→18446744073709551615
→18446744073709551615
+
↓
↑
NULL
0
NULL
0
9223372036854775808
0
人
C.1操作符
563
---
## Page 584
C.1.7
564
BINARY str
类型转换操作符能够把数据值从一种类型转换为另一种类型。
口
XOR
口
及DISTINCT）产生影响。
字符集所对应的合法排序规则中的一种）。COLLATE 会对某些操作（如比较、排序、分组以
操作符COLLATE 会使给定的字符串str拥有给定的排序规则（该排序规则必须是str所属
在最后那个示例里，BINARY会强制进行一次由数值到字符串的转换。然后，这两个操作数
BINARY操作符用来把紧随其后的操作数转换为一个二进制串。对结果的比较将使用每个
转换结果的尾部可能会有一些空格。
对于多字节字符集的引导符，如果其操作数尾部字节的个数不够创建一个完整的字符，则
定的字符集进行解释。charset 必须是服务器所支持的某个字符集的名字。例如，下面的
操作符_charset 常被叫作“引导符”
_charset str
否则，计算结果为0。如果操作数中有NULL值，计算结果为NULL（未知）。
逻辑“异或”操作符。如果有且仅有一个操作数为真（非零，非NULL），
SELECT...WHERE utf8_str COLLATE utf8_icelandic_ci>M
strCOLLATEcollation
形式：
字节的数值逐个字节地进行。如果紧随其后的操作数是一个数值，就先把它转换为字符串
表达式将分别使用latin2、utf8字符集解释字符串abcd'：
类型转换操作符
NULL
果两个操作数都为假，则计算结果为O；否则，为NULL（结果不确定）。
SELECT
SELECT
SELECT
2
'abc'= BINARY
abc'=
utf8'abcd'
latin2'abcd'
附录C操作符与函数参考
按二进制串进行比较。
XOR
XOR
XOR
ORNULL
NULL
NULL
'ABC'
ORDER BY sjis_str COLLATE sjis_bin;
=
ABC
ABC
。它会导致紧跟其后面的字符串常量或列值会使用给
↓
↓
NULL
0
一
NULL
L
1
0
0
则计算结果为1；
---
## Page 585
只要能在字符串里找到匹配模式，正则表达式模式就算匹配成功。
REGEXP操作符的正则表达式模式匹配。
C.1.8
MySQL 提供了两种模式匹配机制：一种是使用LIKE 操作符的 SQL 模式匹配，另一种是使用
3.5.1.1节提供了更多与模式匹配有关的讨论和示例。
如果启用了 NO_BACKSLASH_ESCAPES，ESCAPE子句就不能指定空串。
字符，指定一个ESCAPE子句。
如果要解释
'100% pure'
殊含义。
如果想对通配符字符进行匹配，
200 LIKE'2
MySQL允许使用LIKE操作符对数值表达式进行匹配。
因为通配符“%”能够与任何一个字符序列相匹配，
非二进制串，则使用操作数的排序规则进行比较。
如果有一个操作数是二进制串，那么LIKE会按二进制串对字符串进行比较。如果操作数是
SQL模式允许混合使用这两种通配符：
在SQL模式里，有两个字符是有着特殊含义的通配符：
只要两个操作数里有一个是NULL，计算结果就为NULL。
LIKE操作符的计算情况则正好相反。下面两个表达式是等价的：
配时，它的计算结果将是1。如果没有得到匹配，LIKE 操作符的计算结果将是O。NOT
LIKE是SQL模式匹配操作的操作符，当匹配字符串pattern与整个字符串表达式str匹
100%pure'
'100%pure'
50+50LIKE*1%
BINARY'abc'LIKE
'catnip′LIKE‘cat%
str NOT LIKE pattern [ESCAPE c]
cat LIKE'cat%
abc'LIKE'ABC'
abc'LIKE'ABC'
模式匹配操作符
abc'
abc'
bird'LIKE
1“”。它能与除NULL以外的任意字符序列（包括空串）相匹配。
LIKE
“”
LIKE
ABC
LIKE
LIKE
，则需要启用 SQL 模式 NO_BACKSLASH_ESCAPES。或者，重新定义转义
100\%pure'
COLLATE latinl_general_cs
COLLATE
'100\
100%
'ABC
'ABC"
latinl_general_ci
，就必须给它们加上一个前导的反斜线字符“\”以取消其特
，只有整个字符串得到匹配时，SQL 模式才算匹配成功。而
c]）
所以它能与空串相匹配。
一
↑
↑
+
↑
↑
H
一
T
0
1
C.1操作符
565
---
## Page 586
566
 str REGEXP pattern
'abcde'REGEXP
'abcde' REGEXP'b
^和$分别用来匹配字符串的开头和末尾。
正则表达式模式不要求匹配模式与整个字符串相匹配，只要能在字符串里找到匹配模式就
'cats
'cats
'cats
足
用的模式序列。
正则表达式与 Unix 实用工具程序 grep 和 sed 使用的模式很相似。下表列出了各种允许使
REGEXP操作符目前尚不支持多字节字符集，
'abc'REGEXP'ABC'
数是非二进制串，则使用操作数的排序规则进行比较。
如果有一个操作数是
只要两个操作数里有一个为NULL，
的计算情况正好与 REGEXP 操作符相反。
字符串 pattern，它的计算结果就为1；否则，它的计算结果将为0。NOT REGEXP 操作符
REGEXP是正则表达式模式匹配操作的操作符。
abcde'
str NOT REGEXP pattern
abcde'
cats
够了。
abc'COLLATE latin1_bin REGEXP'ABC
abc'
abc'
附录C操作符与函数参考
其他
（..）
e(m,n)
e（，n}
e(m,
e(m)
ell
REGEXP BINARY 'ABC
and
and
and