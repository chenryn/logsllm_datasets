p_hiredate, p_comm, p_mgr, p_deptno);
END;
--
-- Procedure that deletes an employee record from the 'emp' table based
-- on the employee number.
--
PROCEDURE fire_emp (
p_empno NUMBER
)
AS
BEGIN
DELETE FROM emp WHERE empno = p_empno;
END;
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 23
Database Compatibility for Oracle® Developers
Built-in Package Guide
2.3 Referencing a Package
To reference the types, items and subprograms that are declared within a package
specification, we use the dot notation. For example:
package_name.type_name
package_name.item_name
package_name.subprogram_name
To invoke a function from the emp_admin package specification, we will execute the
following SQL command.
SELECT emp_admin.get_dept_name(10) FROM DUAL;
Here we are invoking the get_dept_name function declared within the package
emp_admin. We are passing the department number as an argument to the function,
which will return the name of the department. Here the value returned should be
ACCOUNTING, which corresponds to department number 10.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 24
Database Compatibility for Oracle® Developers
Built-in Package Guide
2.4 Using Packages With User Defined Types
The following example incorporates the various user-defined types discussed in earlier
chapters within the context of a package.
The package specification of emp_rpt shows the declaration of a record type,
emprec_typ, and a weakly-typed REF CURSOR, emp_refcur, as publicly accessible
along with two functions and two procedures. Function, open_emp_by_dept, returns
the REF CURSOR type, EMP_REFCUR. Procedures, fetch_emp and close_refcur,
both declare a weakly-typed REF CURSOR as a formal parameter.
CREATE OR REPLACE PACKAGE emp_rpt
IS
TYPE emprec_typ IS RECORD (
empno NUMBER(4),
ename VARCHAR(10)
);
TYPE emp_refcur IS REF CURSOR;
FUNCTION get_dept_name (
p_deptno IN NUMBER
) RETURN VARCHAR2;
FUNCTION open_emp_by_dept (
p_deptno IN emp.deptno%TYPE
) RETURN EMP_REFCUR;
PROCEDURE fetch_emp (
p_refcur IN OUT SYS_REFCURSOR
);
PROCEDURE close_refcur (
p_refcur IN OUT SYS_REFCURSOR
);
END emp_rpt;
The package body shows the declaration of several private variables - a static cursor,
dept_cur, a table type, depttab_typ, a table variable, t_dept, an integer variable,
t_dept_max, and a record variable, r_emp.
CREATE OR REPLACE PACKAGE BODY emp_rpt
IS
CURSOR dept_cur IS SELECT * FROM dept;
TYPE depttab_typ IS TABLE of dept%ROWTYPE
INDEX BY BINARY_INTEGER;
t_dept DEPTTAB_TYP;
t_dept_max INTEGER := 1;
r_emp EMPREC_TYP;
FUNCTION get_dept_name (
p_deptno IN NUMBER
) RETURN VARCHAR2
IS
BEGIN
FOR i IN 1..t_dept_max LOOP
IF p_deptno = t_dept(i).deptno THEN
RETURN t_dept(i).dname;
END IF;
END LOOP;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 25
Database Compatibility for Oracle® Developers
Built-in Package Guide
RETURN 'Unknown';
END;
FUNCTION open_emp_by_dept(
p_deptno IN emp.deptno%TYPE
) RETURN EMP_REFCUR
IS
emp_by_dept EMP_REFCUR;
BEGIN
OPEN emp_by_dept FOR SELECT empno, ename FROM emp
WHERE deptno = p_deptno;
RETURN emp_by_dept;
END;
PROCEDURE fetch_emp (
p_refcur IN OUT SYS_REFCURSOR
)
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
DBMS_OUTPUT.PUT_LINE('----- -------');
LOOP
FETCH p_refcur INTO r_emp;
EXIT WHEN p_refcur%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(r_emp.empno || ' ' || r_emp.ename);
END LOOP;
END;
PROCEDURE close_refcur (
p_refcur IN OUT SYS_REFCURSOR
)
IS
BEGIN
CLOSE p_refcur;
END;
BEGIN
OPEN dept_cur;
LOOP
FETCH dept_cur INTO t_dept(t_dept_max);
EXIT WHEN dept_cur%NOTFOUND;
t_dept_max := t_dept_max + 1;
END LOOP;
CLOSE dept_cur;
t_dept_max := t_dept_max - 1;
END emp_rpt;
This package contains an initialization section that loads the private table variable,
t_dept, using the private static cursor, dept_cur. t_dept serves as a department name
lookup table in function, get_dept_name.
Function, open_emp_by_dept returns a REF CURSOR variable for a result set of
employee numbers and names for a given department. This REF CURSOR variable can
then be passed to procedure, fetch_emp, to retrieve and list the individual rows of the
result set. Finally, procedure, close_refcur, can be used to close the REF CURSOR
variable associated with this result set.
The following anonymous block runs the package function and procedures. In the
anonymous block's declaration section, note the declaration of cursor variable,
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 26
Database Compatibility for Oracle® Developers
Built-in Package Guide
v_emp_cur, using the package’s public REF CURSOR type, EMP_REFCUR. v_emp_cur
contains the pointer to the result set that is passed between the package function and
procedures.
DECLARE
v_deptno dept.deptno%TYPE DEFAULT 30;
v_emp_cur emp_rpt.EMP_REFCUR;
BEGIN
v_emp_cur := emp_rpt.open_emp_by_dept(v_deptno);
DBMS_OUTPUT.PUT_LINE('EMPLOYEES IN DEPT #' || v_deptno ||
': ' || emp_rpt.get_dept_name(v_deptno));
emp_rpt.fetch_emp(v_emp_cur);
DBMS_OUTPUT.PUT_LINE('**********************');
DBMS_OUTPUT.PUT_LINE(v_emp_cur%ROWCOUNT || ' rows were retrieved');
emp_rpt.close_refcur(v_emp_cur);
END;
The following is the result of this anonymous block.
EMPLOYEES IN DEPT #30: SALES
EMPNO ENAME
----- -------
7499 ALLEN
7521 WARD
7654 MARTIN
7698 BLAKE
7844 TURNER
7900 JAMES
**********************
6 rows were retrieved
The following anonymous block illustrates another means of achieving the same result.
Instead of using the package procedures, fetch_emp and close_refcur, the logic of
these programs is coded directly into the anonymous block. In the anonymous block’s
declaration section, note the addition of record variable, r_emp, declared using the
package’s public record type, EMPREC_TYP.
DECLARE
v_deptno dept.deptno%TYPE DEFAULT 30;
v_emp_cur emp_rpt.EMP_REFCUR;
r_emp emp_rpt.EMPREC_TYP;
BEGIN
v_emp_cur := emp_rpt.open_emp_by_dept(v_deptno);
DBMS_OUTPUT.PUT_LINE('EMPLOYEES IN DEPT #' || v_deptno ||
': ' || emp_rpt.get_dept_name(v_deptno));
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
DBMS_OUTPUT.PUT_LINE('----- -------');
LOOP
FETCH v_emp_cur INTO r_emp;
EXIT WHEN v_emp_cur%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(r_emp.empno || ' ' ||
r_emp.ename);
END LOOP;
DBMS_OUTPUT.PUT_LINE('**********************');
DBMS_OUTPUT.PUT_LINE(v_emp_cur%ROWCOUNT || ' rows were retrieved');
CLOSE v_emp_cur;
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 27
Database Compatibility for Oracle® Developers
Built-in Package Guide
The following is the result of this anonymous block.
EMPLOYEES IN DEPT #30: SALES
EMPNO ENAME
----- -------
7499 ALLEN
7521 WARD
7654 MARTIN
7698 BLAKE
7844 TURNER
7900 JAMES
**********************
6 rows were retrieved
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 28
Database Compatibility for Oracle® Developers
Built-in Package Guide
2.5 Dropping a Package
The syntax for deleting an entire package or just the package body is as follows:
DROP PACKAGE [ BODY ] package_name;
If the keyword, BODY, is omitted, both the package specification and the package body
are deleted - i.e., the entire package is dropped. If the keyword, BODY, is specified, then
only the package body is dropped. The package specification remains intact.
package_name is the identifier of the package to be dropped.
Following statement will destroy only the package body of emp_admin:
DROP PACKAGE BODY emp_admin;
The following statement will drop the entire emp_admin package:
DROP PACKAGE emp_admin;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 29
Database Compatibility for Oracle® Developers
Built-in Package Guide
3 Built-In Packages
This chapter describes the built-in packages that are provided with Advanced Server. For
certain packages, non-superusers must be explicitly granted the EXECUTE privilege on the
package before using any of the package’s functions or procedures. For most of the built-
in packages, EXECUTE privilege has been granted to PUBLIC by default.
For information about using the GRANT command to provide access to a package, please
see the Database Compatibility for Oracle Developers Reference Guide, available at:
https://www.enterprisedb.com/resources/product-documentation
All built-in packages are owned by the special sys user which must be specified when
granting or revoking privileges on built-in packages:
GRANT EXECUTE ON PACKAGE SYS.UTL_FILE TO john;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 30
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.1 DBMS_ALERT
The DBMS_ALERT package provides the capability to register for, send, and receive alerts.
The following table lists the supported procedures:
Function/Procedure Return Description
Type
REGISTER(name) n/a Register to be able to receive alerts named,
name.
REMOVE(name) n/a Remove registration for the alert named, name.
REMOVEALL n/a Remove registration for all alerts.
SIGNAL(name, message) n/a Signals the alert named, name, with message.
WAITANY(name OUT, message OUT, n/a Wait for any registered alert to occur.
status OUT, timeout)
WAITONE(name, message OUT, status n/a Wait for the specified alert, name, to occur.
OUT, timeout)
Advanced Server's implementation of DBMS_ALERT is a partial implementation when
compared to Oracle's version. Only those functions and procedures listed in the table
above are supported.
Advanced Server allows a maximum of 500 concurrent alerts. You can use the
dbms_alert.max_alerts GUC variable (located in the postgresql.conf file) to
specify the maximum number of concurrent alerts allowed on a system.
To set a value for the dbms_alert.max_alerts variable, open the postgresql.conf file
(located by default in /opt/PostgresPlus/10AS/data) with your choice of editor,
and edit the dbms_alert.max_alerts parameter as shown:
dbms_alert.max_alerts = alert_count
alert_count
alert_count specifies the maximum number of concurrent alerts. By default, the value
of dbms_alert.max_alerts is 100. To disable this feature, set
dbms_alert.max_alerts to 0.
For the dbms_alert.max_alerts GUC to function correctly, the
custom_variable_classes parameter must contain dbms_alerts:
custom_variable_classes = 'dbms_alert, …'
After editing the postgresql.conf file parameters, you must restart the server for the
changes to take effect.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 31
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.1.1 REGISTER
The REGISTER procedure enables the current session to be notified of the specified alert.
REGISTER(name VARCHAR2)
Parameters
name
Name of the alert to be registered.
Examples
The following anonymous block registers for an alert named, alert_test, then waits
for the signal.
DECLARE
v_name VARCHAR2(30) := 'alert_test';
v_msg VARCHAR2(80);
v_status INTEGER;
v_timeout NUMBER(3) := 120;
BEGIN
DBMS_ALERT.REGISTER(v_name);
DBMS_OUTPUT.PUT_LINE('Registered for alert ' || v_name);
DBMS_OUTPUT.PUT_LINE('Waiting for signal...');
DBMS_ALERT.WAITONE(v_name,v_msg,v_status,v_timeout);
DBMS_OUTPUT.PUT_LINE('Alert name : ' || v_name);
DBMS_OUTPUT.PUT_LINE('Alert msg : ' || v_msg);
DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
DBMS_OUTPUT.PUT_LINE('Alert timeout: ' || v_timeout || ' seconds');
DBMS_ALERT.REMOVE(v_name);
END;
Registered for alert alert_test
Waiting for signal...
3.1.2 REMOVE
The REMOVE procedure unregisters the session for the named alert.
REMOVE(name VARCHAR2)
Parameters
name
Name of the alert to be unregistered.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 32
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.1.3 REMOVEALL
The REMOVEALL procedure unregisters the session for all alerts.
REMOVEALL
3.1.4 SIGNAL
The SIGNAL procedure signals the occurrence of the named alert.
SIGNAL(name VARCHAR2, message VARCHAR2)
Parameters
name
Name of the alert.
message
Information to pass with this alert.
Examples
The following anonymous block signals an alert for alert_test.
DECLARE
v_name VARCHAR2(30) := 'alert_test';
BEGIN
DBMS_ALERT.SIGNAL(v_name,'This is the message from ' || v_name);
DBMS_OUTPUT.PUT_LINE('Issued alert for ' || v_name);
END;
Issued alert for alert_test
3.1.5 WAITANY
The WAITANY procedure waits for any of the registered alerts to occur.
WAITANY(name OUT VARCHAR2, message OUT VARCHAR2,
status OUT INTEGER, timeout NUMBER)
Parameters
name
Variable receiving the name of the alert.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 33
Database Compatibility for Oracle® Developers
Built-in Package Guide
message
Variable receiving the message sent by the SIGNAL procedure.
status
Status code returned by the operation. Possible values are: 0 – alert occurred; 1 –
timeout occurred.
timeout
Time to wait for an alert in seconds.
Examples
The following anonymous block uses the WAITANY procedure to receive an alert named,
alert_test or any_alert:
DECLARE
v_name VARCHAR2(30);
v_msg VARCHAR2(80);
v_status INTEGER;
v_timeout NUMBER(3) := 120;
BEGIN
DBMS_ALERT.REGISTER('alert_test');
DBMS_ALERT.REGISTER('any_alert');
DBMS_OUTPUT.PUT_LINE('Registered for alert alert_test and any_alert');
DBMS_OUTPUT.PUT_LINE('Waiting for signal...');
DBMS_ALERT.WAITANY(v_name,v_msg,v_status,v_timeout);
DBMS_OUTPUT.PUT_LINE('Alert name : ' || v_name);
DBMS_OUTPUT.PUT_LINE('Alert msg : ' || v_msg);
DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
DBMS_OUTPUT.PUT_LINE('Alert timeout: ' || v_timeout || ' seconds');
DBMS_ALERT.REMOVEALL;
END;
Registered for alert alert_test and any_alert
Waiting for signal...
An anonymous block in a second session issues a signal for any_alert:
DECLARE
v_name VARCHAR2(30) := 'any_alert';
BEGIN
DBMS_ALERT.SIGNAL(v_name,'This is the message from ' || v_name);
DBMS_OUTPUT.PUT_LINE('Issued alert for ' || v_name);
END;
Issued alert for any_alert
Control returns to the first anonymous block and the remainder of the code is executed:
Registered for alert alert_test and any_alert
Waiting for signal...
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 34
Database Compatibility for Oracle® Developers
Built-in Package Guide
Alert name : any_alert
Alert msg : This is the message from any_alert
Alert status : 0
Alert timeout: 120 seconds
3.1.6 WAITONE
The WAITONE procedure waits for the specified registered alert to occur.
WAITONE(name VARCHAR2, message OUT VARCHAR2,
status OUT INTEGER, timeout NUMBER)
Parameters
name
Name of the alert.
message
Variable receiving the message sent by the SIGNAL procedure.
status
Status code returned by the operation. Possible values are: 0 – alert occurred; 1 –
timeout occurred.
timeout
Time to wait for an alert in seconds.
Examples