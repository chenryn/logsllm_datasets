### 2.3 Referencing a Package

To reference the types, items, and subprograms declared within a package specification, use the dot notation. For example:

- `package_name.type_name`
- `package_name.item_name`
- `package_name.subprogram_name`

To invoke a function from the `emp_admin` package, execute the following SQL command:

```sql
SELECT emp_admin.get_dept_name(10) FROM DUAL;
```

In this example, the `get_dept_name` function is called with the department number as an argument, which returns the name of the department. The expected return value for department number 10 is "ACCOUNTING".

### 2.4 Using Packages With User-Defined Types

The following example demonstrates how to incorporate various user-defined types within a package.

#### Package Specification: `emp_rpt`

The `emp_rpt` package includes the declaration of a record type `emprec_typ`, a weakly-typed REF CURSOR `emp_refcur`, and several functions and procedures.

```sql
CREATE OR REPLACE PACKAGE emp_rpt
IS
  TYPE emprec_typ IS RECORD (
    empno NUMBER(4),
    ename VARCHAR2(10)
  );
  TYPE emp_refcur IS REF CURSOR;

  FUNCTION get_dept_name (p_deptno IN NUMBER) RETURN VARCHAR2;
  FUNCTION open_emp_by_dept (p_deptno IN emp.deptno%TYPE) RETURN EMP_REFCUR;
  PROCEDURE fetch_emp (p_refcur IN OUT SYS_REFCURSOR);
  PROCEDURE close_refcur (p_refcur IN OUT SYS_REFCURSOR);
END emp_rpt;
/
```

#### Package Body: `emp_rpt`

The package body contains the implementation of the functions and procedures, along with the declaration of several private variables.

```sql
CREATE OR REPLACE PACKAGE BODY emp_rpt
IS
  CURSOR dept_cur IS SELECT * FROM dept;

  TYPE depttab_typ IS TABLE OF dept%ROWTYPE INDEX BY BINARY_INTEGER;
  t_dept DEPTTAB_TYP;
  t_dept_max INTEGER := 1;
  r_emp EMPREC_TYP;

  FUNCTION get_dept_name (p_deptno IN NUMBER) RETURN VARCHAR2
  IS
  BEGIN
    FOR i IN 1..t_dept_max LOOP
      IF p_deptno = t_dept(i).deptno THEN
        RETURN t_dept(i).dname;
      END IF;
    END LOOP;
    RETURN 'Unknown';
  END;

  FUNCTION open_emp_by_dept (p_deptno IN emp.deptno%TYPE) RETURN EMP_REFCUR
  IS
    emp_by_dept EMP_REFCUR;
  BEGIN
    OPEN emp_by_dept FOR SELECT empno, ename FROM emp WHERE deptno = p_deptno;
    RETURN emp_by_dept;
  END;

  PROCEDURE fetch_emp (p_refcur IN OUT SYS_REFCURSOR)
  IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    LOOP
      FETCH p_refcur INTO r_emp;
      EXIT WHEN p_refcur%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE(r_emp.empno || ' ' || r_emp.ename);
    END LOOP;
  END;

  PROCEDURE close_refcur (p_refcur IN OUT SYS_REFCURSOR)
  IS
  BEGIN
    CLOSE p_refcur;
  END;

  BEGIN
    OPEN dept_cur;
    LOOP
      FETCH dept_cur INTO t_dept(t_dept_max);
      EXIT WHEN dept_cur%NOTFOUND;
      t_dept_max := t_dept_max + 1;
    END LOOP;
    CLOSE dept_cur;
    t_dept_max := t_dept_max - 1;
  END emp_rpt;
/
```

This package initializes a private table variable `t_dept` using a static cursor `dept_cur`. The `get_dept_name` function uses `t_dept` as a lookup table to return the department name. The `open_emp_by_dept` function returns a REF CURSOR for a result set of employee numbers and names for a given department. This REF CURSOR can be passed to the `fetch_emp` procedure to retrieve and list the rows of the result set. Finally, the `close_refcur` procedure closes the REF CURSOR.

### Example Anonymous Block

The following anonymous block demonstrates how to use the `emp_rpt` package functions and procedures.

```sql
DECLARE
  v_deptno dept.deptno%TYPE DEFAULT 30;
  v_emp_cur emp_rpt.EMP_REFCUR;
BEGIN
  v_emp_cur := emp_rpt.open_emp_by_dept(v_deptno);
  DBMS_OUTPUT.PUT_LINE('EMPLOYEES IN DEPT #' || v_deptno || ': ' || emp_rpt.get_dept_name(v_deptno));
  emp_rpt.fetch_emp(v_emp_cur);
  DBMS_OUTPUT.PUT_LINE('**********************');
  DBMS_OUTPUT.PUT_LINE(v_emp_cur%ROWCOUNT || ' rows were retrieved');
  emp_rpt.close_refcur(v_emp_cur);
END;
/
```

### Output

```
EMPLOYEES IN DEPT #30: SALES
EMPNO ENAME
----- -------
7499 ALLEN
7521 WARD
7654 MARTIN
7698 BLAKE
7844 TURNER
7900 JAMES
**********************
6 rows were retrieved
```

### Dropping a Package

To delete an entire package or just the package body, use the following syntax:

- To drop the entire package:
  ```sql
  DROP PACKAGE emp_admin;
  ```

- To drop only the package body:
  ```sql
  DROP PACKAGE BODY emp_admin;
  ```

### 3 Built-In Packages

This chapter describes the built-in packages provided with Advanced Server. For certain packages, non-superusers must be explicitly granted the `EXECUTE` privilege on the package before using any of its functions or procedures. By default, the `EXECUTE` privilege has been granted to `PUBLIC` for most built-in packages.

For information about using the `GRANT` command to provide access to a package, see the [Database Compatibility for Oracle Developers Reference Guide](https://www.enterprisedb.com/resources/product-documentation).

All built-in packages are owned by the special `sys` user, which must be specified when granting or revoking privileges on built-in packages:

```sql
GRANT EXECUTE ON PACKAGE SYS.UTL_FILE TO john;
```

### 3.1 DBMS_ALERT

The `DBMS_ALERT` package provides the capability to register for, send, and receive alerts. The following table lists the supported procedures:

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `REGISTER(name)` | n/a | Register to receive alerts named `name`. |
| `REMOVE(name)` | n/a | Remove registration for the alert named `name`. |
| `REMOVEALL` | n/a | Remove registration for all alerts. |
| `SIGNAL(name, message)` | n/a | Signal the alert named `name` with the given `message`. |
| `WAITANY(name OUT, message OUT, status OUT, timeout)` | n/a | Wait for any registered alert to occur. |
| `WAITONE(name, message OUT, status OUT, timeout)` | n/a | Wait for the specified alert, `name`, to occur. |

Advanced Server's implementation of `DBMS_ALERT` is a partial implementation compared to Oracle's version. Only the functions and procedures listed in the table above are supported.

Advanced Server allows a maximum of 500 concurrent alerts. You can use the `dbms_alert.max_alerts` GUC variable (located in the `postgresql.conf` file) to specify the maximum number of concurrent alerts allowed on a system.

To set the value for the `dbms_alert.max_alerts` variable, edit the `postgresql.conf` file (located by default in `/opt/PostgresPlus/10AS/data`) and add or modify the following line:

```plaintext
dbms_alert.max_alerts = alert_count
```

- `alert_count` specifies the maximum number of concurrent alerts. The default value is 100.
- To disable this feature, set `dbms_alert.max_alerts` to 0.

For the `dbms_alert.max_alerts` GUC to function correctly, the `custom_variable_classes` parameter must contain `dbms_alert`:

```plaintext
custom_variable_classes = 'dbms_alert, ...'
```

After editing the `postgresql.conf` file, restart the server for the changes to take effect.

### 3.1.1 REGISTER

The `REGISTER` procedure enables the current session to be notified of the specified alert.

```sql
REGISTER(name VARCHAR2)
```

- **Parameters:**
  - `name`: Name of the alert to be registered.

**Example:**

```sql
DECLARE
  v_name VARCHAR2(30) := 'alert_test';
  v_msg VARCHAR2(80);
  v_status INTEGER;
  v_timeout NUMBER(3) := 120;
BEGIN
  DBMS_ALERT.REGISTER(v_name);
  DBMS_OUTPUT.PUT_LINE('Registered for alert ' || v_name);
  DBMS_OUTPUT.PUT_LINE('Waiting for signal...');
  DBMS_ALERT.WAITONE(v_name, v_msg, v_status, v_timeout);
  DBMS_OUTPUT.PUT_LINE('Alert name : ' || v_name);
  DBMS_OUTPUT.PUT_LINE('Alert msg : ' || v_msg);
  DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
  DBMS_OUTPUT.PUT_LINE('Alert timeout: ' || v_timeout || ' seconds');
  DBMS_ALERT.REMOVE(v_name);
END;
/
```

### 3.1.2 REMOVE

The `REMOVE` procedure unregisters the session for the named alert.

```sql
REMOVE(name VARCHAR2)
```

- **Parameters:**
  - `name`: Name of the alert to be unregistered.

### 3.1.3 REMOVEALL

The `REMOVEALL` procedure unregisters the session for all alerts.

```sql
REMOVEALL
```

### 3.1.4 SIGNAL

The `SIGNAL` procedure signals the occurrence of the named alert.

```sql
SIGNAL(name VARCHAR2, message VARCHAR2)
```

- **Parameters:**
  - `name`: Name of the alert.
  - `message`: Information to pass with the alert.

**Example:**

```sql
DECLARE
  v_name VARCHAR2(30) := 'alert_test';
BEGIN
  DBMS_ALERT.SIGNAL(v_name, 'This is the message from ' || v_name);
  DBMS_OUTPUT.PUT_LINE('Issued alert for ' || v_name);
END;
/
```

### 3.1.5 WAITANY

The `WAITANY` procedure waits for any of the registered alerts to occur.

```sql
WAITANY(name OUT VARCHAR2, message OUT VARCHAR2, status OUT INTEGER, timeout NUMBER)
```

- **Parameters:**
  - `name`: Variable receiving the name of the alert.
  - `message`: Variable receiving the message sent by the `SIGNAL` procedure.
  - `status`: Status code returned by the operation. Possible values are: 0 – alert occurred; 1 – timeout occurred.
  - `timeout`: Time to wait for an alert in seconds.

**Example:**

```sql
DECLARE
  v_name VARCHAR2(30);
  v_msg VARCHAR2(80);
  v_status INTEGER;
  v_timeout NUMBER(3) := 120;
BEGIN
  DBMS_ALERT.REGISTER('alert_test');
  DBMS_ALERT.REGISTER('any_alert');
  DBMS_OUTPUT.PUT_LINE('Registered for alert alert_test and any_alert');
  DBMS_OUTPUT.PUT_LINE('Waiting for signal...');
  DBMS_ALERT.WAITANY(v_name, v_msg, v_status, v_timeout);
  DBMS_OUTPUT.PUT_LINE('Alert name : ' || v_name);
  DBMS_OUTPUT.PUT_LINE('Alert msg : ' || v_msg);
  DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
  DBMS_OUTPUT.PUT_LINE('Alert timeout: ' || v_timeout || ' seconds');
  DBMS_ALERT.REMOVEALL;
END;
/
```

### 3.1.6 WAITONE

The `WAITONE` procedure waits for the specified registered alert to occur.

```sql
WAITONE(name VARCHAR2, message OUT VARCHAR2, status OUT INTEGER, timeout NUMBER)
```

- **Parameters:**
  - `name`: Name of the alert.
  - `message`: Variable receiving the message sent by the `SIGNAL` procedure.
  - `status`: Status code returned by the operation. Possible values are: 0 – alert occurred; 1 – timeout occurred.
  - `timeout`: Time to wait for an alert in seconds.

**Example:**

```sql
DECLARE
  v_name VARCHAR2(30) := 'alert_test';
  v_msg VARCHAR2(80);
  v_status INTEGER;
  v_timeout NUMBER(3) := 120;
BEGIN
  DBMS_ALERT.REGISTER(v_name);
  DBMS_OUTPUT.PUT_LINE('Registered for alert ' || v_name);
  DBMS_OUTPUT.PUT_LINE('Waiting for signal...');
  DBMS_ALERT.WAITONE(v_name, v_msg, v_status, v_timeout);
  DBMS_OUTPUT.PUT_LINE('Alert name : ' || v_name);
  DBMS_OUTPUT.PUT_LINE('Alert msg : ' || v_msg);
  DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
  DBMS_OUTPUT.PUT_LINE('Alert timeout: ' || v_timeout || ' seconds');
  DBMS_ALERT.REMOVE(v_name);
END;
/
```