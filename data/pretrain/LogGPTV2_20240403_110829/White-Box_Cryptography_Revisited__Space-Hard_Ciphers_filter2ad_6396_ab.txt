represent the block cipher EK as a network of look-ups in
randomized key-dependent tables, see Fig. 1. The key value
PBlock Cipher(e.g. AES-128)CPCK1060is masked by random variables and is scrambled into the
tables.
Each table is protected by applying secret invertible en-
codings before and after the table. For example, the white-
box implementation of AES [14] employs secret nonlinear
and linear components as secret encodings to protect the
tables. In order to preserve the functionality of the cipher,
the output encoding gi of the i-th table is the inverse func-
tion of the input encoding f i+1 of the (i + 1)-th input table,
that is, (gi)
−1 = f i+1.
Finally, external encodings IN and OU T are added to
the input and output of the block cipher EK . Therefore,
the action of the composite transform is OU T ◦ EK ◦ IN
−1,
where IN and OU T are secret bijections. The purpose of
external encodings is to protect the tables of the ﬁrst and
last rounds. This also mitigates code lifting by hiding the
actual block cipher EK between encodings.
Figure 2: External encodings for DRM: IN and OU T
are external encodings. Enc is the block cipher EK
and Dec is its inverse DK
′
For example, in the DRM setting, the external encoding
IN is ﬁrst applied on the server side after encrypting the
= IN ◦ EK (P ). Then, the DRM
content P and returns C
′
client software, running on the user’s device, decrypts C
= OU T ◦ DK ◦ IN
−1(C
to P
) and outputs the encoded
content P
= OU T (P ), where DK is the inverse of the block
cipher EK . The remaining encoding is removed in the user’s
content player which is placed closer to the playback device
to obtain the original content P , see Fig. 2.
′
′
′
Following the papers by Chow et al. [13, 14], several fur-
ther variants of white-box implementations of DES and AES
were proposed [12, 44, 23, 26].
3.1.1 Problems with Security
All published white-box implementations of DES and AES
are practically broken [3, 43, 35, 34, 25]. In addition to these
dedicated attacks, Michiels et al. [31] proposed a generic ta-
ble decomposition attack on a wide class of white-box im-
plementations of SPN ciphers.
As mentioned in [30], since AES and DES were designed
with the black-box security in mind, it seems diﬃcult to
provide white-box security at the same time. This is still an
open problem.
3.1.2 On External Encodings
The crucial drawback of this approach is the usage of ex-
ternal encodings. Due to external encodings at the input
and output of the block cipher EK , the algorithm becomes
an encoded variant of the cipher, i.e. a diﬀerent cipher. This
can be inappropriate when interoperability is necessary as
it is the case for the standard DRM platform Marlin which
speciﬁes AES-128 as the content protection algorithm [27].
Banking is also an application where interoperability plays
an important role.
Furthermore, to obtain original plaintexts after white-box
decryption, the additional decoding operation has to be per-
formed in a secure environment. The natural question arises
as to why the entire decryption is not performed in this
secure environment in the ﬁrst place. Therefore, as also
mentioned in [42, 33], the applications of white-box imple-
mentations with external encodings are mainly restricted to
proprietary DRM settings.
However, if the external encodings are removed to avoid
the issues mentioned above, the white-box implementation
becomes much weaker [14] because the ﬁrst- and last-round
tables become directly accessible to the attacker.
Figure 3: ASASA construction: 5 layers of inter-
leaved secret aﬃne and secret nonlinear (S-boxes)
operations
3.2 Dedicated Cipher: ASASA
Dedicated block ciphers for white-box environments were
proposed by Biryukov et al. in [4]. They are based on the
ASASA structure consisting of two secret nonlinear layers
(S-boxes, S) and three secret aﬃne layers (A) in the inter-
leaved order, see Fig. 3. The security of the block ciphers
against key recovery attacks relies on the hardness of de-
composing the ASASA structure. Unlike the white-box im-
plementations of AES and DES, the ASASA structure does
not require external encodings. To estimate the security
of ASASA against code lifting attacks, the notion of weak
white-box security was introduced.
Definition 1
(Weak White-box Security [4]).
The function F is an T -secure weak white-box implementa-
tion of EK if it is computationally hard to obtain an equiv-
alent key of size less than T given full access to F .
In other words, it should be computationally hard for an
attacker to ﬁnd any compact equivalent function which is
smaller than T . Accordingly, an attacker requires code of
size T to copy the functionality of the cipher completely.
Weak white-box security enables the estimation of the dif-
ﬁculty of code lifting by the amount of data needed to be
extracted from the white-box environment. This property
is also called incompressibility by De Mulder [33].
Biryukov et al. also deﬁne strong white-box security. This
property corresponds to MQ-problems used in public-key
cryptography and is related to one-wayness as deﬁned by
De Mulder [33].
Server SidePEncCINC’DecC’IN-1UntrustedOUTP’P’OUT-1PTrustedClient SoftwareplayerTrustedClient SideAAANonlinearNonlinearSSSSSSSSAffineAffineAffine10613.2.1 Security Issues
Decomposition and key recovery attacks on ASASA struc-
tures have recently been proposed [19, 32, 22]. The security
of constructions based on multiple secret nonlinear and lin-
ear layers is still to be explored and seems hard to evaluate,
despite several cryptanalytic eﬀorts [7, 11, 40]. Recent at-
tacks point out that even the 9-layer variant SASASASAS
does not oﬀer a suﬃcient security level [6]. The assurance
on the security of (AS)i against decomposition attacks is yet
to be provided.
4. OUR DESIGN GOALS
In this section, we outline our design goals for a new family
of white-box secure block ciphers.
4.1 Security
To quantitatively evaluate the diﬃculty of code lifting
without relying on external encodings, one could take the
notion of weak white-box security [4], which can assess the
amount of data required to copy the full functionality. How-
ever, the white-box security of a cipher when the size of the
available code (table) is less than M is unclear.
To reveal the tradeoﬀ between the data available and
attacker’s advantage, we introduce a novel security notion
coined (M, Z)-space hardness.
Definition 2
((M, Z)-space hardness). The imple-
mentation of a block cipher EK is (M, Z)-space hard if it
is infeasible to encrypt (decrypt) any randomly drawn plain-
−Z given any
text (ciphertext) with probability of more than 2
code (table) of size less than M .
(M, Z)-space hardness enables us to estimate the code size
M to be isolated from white-box environments to encrypt
(decrypt) any plaintext (ciphertext) with a success proba-
−Z as well as to derive more ﬁne-grained
bility larger than 2
security claims. Weak white-box security [4] can be seen as
a special case of (M ,Z)-space hardness and corresponds to
(M, 0)-space hardness.
Security requirements in the black- and white-box envi-
ronments are given as follows.
Security in the black box: The cipher should be secure
against key recovery attacks and distinguishing attacks,
i.e. there are no attacks more eﬃcient than generic
attacks such as brute force.
Security in the white box: The cipher should be secu-
rity against key extraction attacks, and mitigation of
code lifting attacks in terms of (M ,Z)-space hard-
ness: An attacker needs to obtain codes (tables) whose
size is larger than M to compute any plaintext or ci-
phertext with probability larger than 2
−Z .
4.2 Functionality
To be applicable to a wide range of situations and use
cases, the cipher should not require any additional functions
such as external encodings.
4.3 Performance
In both black-box and white-box environments, the per-
formance of the cipher should be competitive to known prim-
itives such as whitebox AES [14, 44] and ASASA construc-
tions [4].
Figure 4: Ciphers with ﬁxed code size: SPACE
To make our ciphers implementable in multiple settings
including those with restricted resources, we provide several
variants with diﬀerent code sizes (SPACE), and a variant
enabling multiple code sizes while keeping the cipher itself
unchanged (N-SPACE).
5. SPACE: FIXED SPACE
This section proposes a block cipher called SPACE, at-
taining our design goals in the black-box and white-box set-
tings as well as oﬀering several variants with diﬀerent but
ﬁxed code sizes.
5.1 The Design
SPACE is an ℓ-line target-heavy generalized Feistel net-
work [38] which encrypts an n-bit plaintext under a k-bit
secret key to an n-bit ciphertext, where the size of each line
is na (= n/ℓ) bits, as shown in Fig. 4.
},
Let the n-bit state of round r be X r = {xr
ℓ−1
i ∈ {0, 1}na . X 0 and X R are a plaintext and a ciphertext,
xr
respectively, where R is the number of rounds. Each round
updates the state as:
F r
na (xr
X r+1 =
na : {0, 1}na → {0, 1}nb . Here || denotes the con-
na (x) is deﬁned
2|| . . .||xr
ℓ−1)
where F r
catenation, and nb = n− na. The function F r
as
na (x) = (msbnb (EK (C0||x))) ⊕ r,
F r
)||xr
0) ⊕ (xr
1||xr
(
0, xr
1, . . . , xr
0,
where EK is a block cipher with n-bit block and k-bit key,
msbu(x) selects the most signiﬁcant u bits of x, and C0 is
an (nb (= n − na))-bit binary zero value. The last XOR of
r plays the role of a round constant (see Fig. 5).
na (x) = msbnb (EK (C0||x)). It is an na-bit to nb-
′
Let F
bit function. Each round updates the state by looking up
′
na (x), adding the
the leftmost line value in the table for F
constant r to the result to compute F r
na (x), XORing it to
the other lines, and rotating the lines by one position to the
left.
′
na (x) is implemented by
′
table look-ups. SPACE has only one table of F
na (x) that
is reused in each round. This single-table implementation
makes the evaluation of (M, Z)-space hardness easier.
In the white-box environment, F
x0r-1x1r-1x2r-1Fr-1FrFr+1n/lx3r-1xl-2r-1xl-1r-1x0r+2x1r+2x2r+2x3r+2xl-2r+2xl-1r+2nanana1062Figure 5: F-function: Fna (x) = F
na (x) ⊕ r
′
We instantiate the SPACE family with four concrete block
ciphers for k = 128 and AES-128 as the underlying block ci-
pher EK :
• SPACE-(8, R) : n = 128, ℓ = 16, na = 8, F r
8 :
{0, 1}8 → {0, 1}120
• SPACE-(16, R) : n = 128, ℓ = 8, na = 16, F r
16 :
{0, 1}16 → {0, 1}112
• SPACE-(24, R) *1 : n = 128, ℓ = 16, na = 24, F r
24 :
{0, 1}24 → {0, 1}104
• SPACE-(32, R) : n = 128, ℓ = 4, na = 32, F r
32 :
{0, 1}32 → {0, 1}96
5.2 Feistel
We aim to show security in the white box as deﬁned in
Section 4.1. Hence our approach is to construct the table
′
F
na (x) from a well-studied standard block cipher such as
AES by constraining the plaintext and truncating the ci-
phertext. Then, the hardness of extracting the key from the
table and ﬁnding a compact description of the table in the
white-box model relies on the diﬃculty of key recovery for
the underlying block cipher in the black-box model.
Since restricting the input and output of any secure un-
derlying block cipher is unlikely to deliver a permutation,
a Feistel-type construction is a natural candidate. We note
that the SPN structure adopted by the ASASA construc-
tion does require secret permutations as building blocks and,
therefore, cannot be based on the truncation of a standard
block cipher with a 128-bit block length such as AES-128
directly.
We also considered type-1, -2, -3 generalized Feistel con-
struction and source-heavy construction as the underlying
construction and opted for the target-heavy Feistel construc-
tion for performance reasons.
5.3 Security in the White Box
5.3.1 Key Extraction
In the white-box model, the attacker is able to fully access
inputs and outputs of tables in any round. To extract the
1Only in this variant, each round updates the state as
X r+1 = (xr
to keep the 128-bit block size.
)||xr
2)||(
0||xr
1||xr
1||xr
2) ⊕ (xr
3||xr
4|| . . .||xr
F r
24(xr
ℓ−1)
0
Figure 6: A compression attack on SPACE with
R ∈ {25, 64, 96, 128} in terms of (M, Z)-space hardness,
with T = (2na × nb) bits
na (x) = msbnb (EK (C0||x)) means to
′
key from the table F
recover the key of EK in the black-box model, with plain-
texts from a restricted space and truncated ciphertexts. The
underlying block cipher EK of our SPACE instantiation is
AES-128, for which no eﬃcient key recovery attack has been
published so far despite considerable cryptanalytic eﬀorts
over 15 years [9, 17, 20]. Thus, key extraction is computa-
tionally hard in the white-box model as long as the under-
lying block cipher is secure against key recovery attacks in
the black-box model.
More formally, the advantage of the key extraction in the
white-box model for SPACE, AdvKE-WB, is upper-bounded
by the advantage of the key recovery for the underlying block
cipher in the black-box model, AdvKR-BB:
AdvKE-WB ≤ AdvKR-BB.
5.3.2 Code Lifting: Space Hardness
As the attacker is unable to compute EK (C0||x) without
the knowledge of K if the underlying block cipher EK is
secure, it is computationally hard to ﬁnd any compact rep-
resentation of EK (C0||x). The table of EK (C0||x) consists