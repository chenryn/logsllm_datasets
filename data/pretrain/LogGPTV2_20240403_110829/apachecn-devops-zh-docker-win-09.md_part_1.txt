# 九、了解 Docker 的安全风险和优势
Docker 是一种新型的应用平台，它的构建非常注重安全性。您可以将现有的应用打包为 Docker 映像，在 Docker 容器中运行它，并在不更改任何代码的情况下获得显著的安全优势。
a。目前运行在 Windows Server 2003 上的. NET 2.0 网络表单应用将很乐意在下运行.NET 4.7 在基于 Windows Server Core 2019 的 Windows 容器中，没有代码更改:立即升级，应用了 16 年的安全补丁！仍然有大量运行在服务器 2003 上的 Windows 应用不受支持，或者服务器 2008 也将很快不受支持。转到 Docker 是将这些应用纳入现代技术栈的一个好方法。
Docker 中的安全性包含广泛的主题，我将在本章中介绍这些主题。我将解释容器和映像的安全方面， **Docker 可信注册表** ( **DTR** )中的扩展特性，以及集群模式下 Docker 的安全配置。
在本章中，我将研究 Docker 的一些内部结构，以展示安全性是如何实现的。我会报道:
*   了解容器安全
*   使用安全的 Docker 映像保护应用
*   保护与 DTR 的软件供应链
*   理解群体模式下的安全性
# 了解容器安全
在 Windows Server 容器中运行的应用进程实际上是在主机上运行的。如果您在容器中运行多个 ASP.NET 应用，您将在主机上的任务列表中看到多个`w3wp.exe`进程。在容器之间共享操作系统内核是 Docker 容器如此高效的原因——容器不加载自己的内核，因此启动和关闭时间非常快，运行时资源的开销也最小。
在容器内运行的软件可能存在安全漏洞，安全人员询问 Docker 的一个大问题是:容器之间的隔离有多安全？如果 Docker 容器中的应用被破坏，这意味着主机进程被破坏。攻击者能否利用该进程危害其他进程，从而可能劫持主机或主机上运行的其他容器？
如果操作系统内核中存在攻击者可以利用的漏洞，就有可能突破一个容器，危及其他容器和主机。Docker 平台是基于深度安全的原则构建的，因此即使这是可能的，该平台也提供了多种方法来减轻它。
The Docker platform has near feature parity between Linux and Windows, with a few gaps on the Windows side being actively worked on. But Docker has a longer history of production deployment on Linux and much of the guidance and tooling such as Docker Bench and the CIS Docker Benchmark is specific to Linux. It's useful to know the Linux side, but many of the practical points do not apply to Windows containers.
# 容器过程
所有 Windows 进程都是由用户帐户启动和拥有的。用户帐户的权限决定了进程是否可以访问文件和其他资源，以及它们是否可以修改或查看。在 Windows Server Core 的 Docker 基础映像中，有一个名为**容器管理员**的默认用户帐户。从该映像在容器中启动的任何进程都将使用该用户帐户，您可以运行`whoami`工具，该工具只需写出当前用户名:
```
> docker container run mcr.microsoft.com/windows/servercore:ltsc2019 whoami
user manager\containeradministrator
```
您可以通过启动 PowerShell 来运行交互式容器，并找到容器管理员帐户的用户标识(SID):
```
> docker container run -it --rm mcr.microsoft.com/windows/servercore:ltsc2019 powershell
> $user = New-Object System.Security.Principal.NTAccount("containeradministrator"); `
 $sid = $user.Translate([System.Security.Principal.SecurityIdentifier]); `
 $sid.Value
S-1-5-93-2-1
```
您会发现容器用户总是有相同的 SID，`S-1-5-93-2-1`，因为该帐户是 Windows 映像的一部分。因此，它在每个容器中都具有相同的属性。容器进程确实在主机上运行，但是主机上没有**容器管理员**用户。事实上，如果您查看主机上的容器进程，您会看到用户名的空白条目。我将在后台容器中启动一个长时间运行的`ping`进程，并检查容器中的**进程标识** ( **PID** ):
```
> docker container run -d --name pinger mcr.microsoft.com/windows/servercore:ltsc2019 ping -t localhost
f8060e0f95ba0f56224f1777973e9a66fc2ccb1b1ba5073ba1918b854491ee5b
> docker container exec pinger powershell Get-Process ping -IncludeUserName
Handles      WS(K)   CPU(s)     Id UserName               ProcessName
-------      -----   ------     -- --------               -----------
     86       3632     0.02   7704 User Manager\Contai... PING
```
这是一个运行在 Windows Server 2019 上 Docker 中的 Windows Server 容器，所以`ping`进程直接在主机上运行，容器内部的 PID 会和主机上的 PID 匹配。在服务器上，我可以查看同一个 PID 的详细信息，这里是`7704`:
```
> Get-Process -Id 7704 -IncludeUserName
Handles      WS(K)   CPU(s)     Id UserName               ProcessName
-------      -----   ------     -- --------               -----------
     86       3624     0.03   7704                        PING
```
没有用户名，因为容器用户没有映射主机上的任何用户。实际上，主机进程是在匿名用户下运行的，它对主机没有权限，它只有在一个容器的沙盒环境中配置的权限。如果发现允许攻击者突破容器的 Windows Server 漏洞，他们将运行无法访问主机资源的主机进程。
一个更极端的漏洞可能会让主机上的匿名用户获得更广泛的权限，但这将是 Windows 核心权限栈中的一个主要安全漏洞，微软通常会对此做出非常快速的响应。匿名主机用户方法是限制任何未知漏洞影响的良好缓解方法。
# 容器用户帐户和 ACL
在 Windows Server Core 容器中，默认用户帐户是容器管理员。该帐户位于容器的管理员组中，因此它可以完全访问整个文件系统和容器上的所有资源。Dockerfile 中的`CMD`或`ENTRYPOINT`指令中指定的进程将在容器管理员帐户下运行。
如果应用中存在漏洞，这可能会有问题。该应用可能会受到损害，尽管攻击者突破容器的可能性很小，但攻击者仍可能在应用容器内部造成大量破坏。管理访问意味着攻击者可以从互联网下载恶意软件，并在容器中运行它，或将容器中的状态复制到外部位置。
您可以通过在最低权限用户帐户下运行容器进程来缓解这一问题。纳米服务器映像使用这种方法—它们是由容器管理员用户设置的，但是容器进程的默认帐户是没有管理员权限的用户。您可以看到，通过在纳米服务器容器中回显用户名:
```
> docker container run mcr.microsoft.com/windows/nanoserver:1809 cmd /C echo %USERDOMAIN%\%USERNAME%
User Manager\ContainerUser
```
The Nano Server image doesn't have the `whoami` command, and it doesn't even have PowerShell installed. It is set up with the bare minimum that's necessary to run new applications. This is another part of security-in-depth with containers. If there was an exploit in the `whoami` command, then your container applications could be vulnerable, so Microsoft don't package the command at all. This makes sense because you wouldn't use it in a production application. It's still there in Windows Server Core to preserve backwards compatibility.
`ContainerUser`帐户在容器内没有管理员权限。如果您需要管理员权限来设置您的应用，您可以使用`USER ContainerAdministrator`命令切换到 Dockerfile 中的管理员帐户。但是如果你的应用不需要管理员访问，你应该在你的 Dockerfile 的末尾用`USER ContainerUser`切换回来，这样容器启动命令就可以作为最低权限的帐户运行。
来自微软的**互联网信息服务** ( **IIS** )和 ASP.NET 图片是作为最低权限用户运行的其他例子。面向外部的进程是 IIS Windows 服务，它在`IIS_IUSRS`组的本地帐户下运行。该组对 IIS 根路径`C:\inetpub\wwwroot`具有读访问权限，但没有写访问权限。攻击者可以危害 web 应用，但他们将无法写入文件，因此下载恶意软件的能力不复存在。
在某些情况下，web 应用需要写访问来保存状态，但是在 Dockerfile 中可以非常精细地授予它。举个例子，开源的**内容管理系统** ( **CMS** ) Umbraco 可以打包成 Docker 映像，但是 IIS 用户组需要内容文件夹的写权限。您可以使用`RUN`指令设置 ACL 权限，而不是更改 Dockerfile 以管理帐户运行服务:
```
RUN $acl = Get-Acl $env:UMBRACO_ROOT; `
 $newOwner = [System.Security.Principal.NTAccount]('BUILTIN\IIS_IUSRS'); `
 $acl.SetOwner($newOwner); `
 Set-Acl -Path $env:UMBRACO_ROOT -AclObject $acl; `
 Get-ChildItem -Path $env:UMBRACO_ROOT -Recurse | Set-Acl -AclObject $acl
```
I won't go into detail on Umbraco here, but it runs very nicely in a container. You can find sample Dockerfiles for Umbraco and lots of other open source software in my GitHub repository at [https://github.com/sixeyed/dockerfiles-windows](https://github.com/sixeyed/dockerfiles-windows).
您应该使用最低权限的用户帐户来运行进程，并尽可能严格地设置 ACL。这限制了任何能够访问容器内部进程的攻击者的范围，但是仍然有来自容器外部的攻击媒介需要考虑。
# 运行资源受限的容器
您可以在没有约束的情况下运行 Docker 容器，容器进程将根据需要使用尽可能多的主机资源。这是默认设置，但它可能是一个简单的攻击媒介。恶意用户可能会在容器中的应用上产生额外的负载，这可能会试图获取 100%的 CPU 和内存，使主机上的其他容器挨饿。如果您正在运行数百个服务于多个应用工作负载的容器，这一点尤其重要。