technique to make itself appear connected to BlackBerry Desktop Manager so it doesn't need to implement a full
USB stack.
The JVM interface utilized by the JDE provides all the functionality that the JDE needs, including loading and
executing CODs, reflection, and similar functionality.
The javaloader.exe utility, which ships with the JDE (http://btsc
.webapps.blackberry.com/btsc/viewdocument.do?externalId=KB25526), also communicates with this same JVM
interface. The javaloader.exe utility provides functionality for listing those COD files that are installed and
copies them from the device to the PC, among other things. This and other functionality will be of interest to
those looking to analyze apps, as shown here:
JavaLoader [-u] [-p[port]|[pin]] [-b[baud]] [-d0|-d1] [-w[password]] [-q]
[command]
-u Connect to USB handheld (default is serial)
-p[port] Specifies the serial port (serial handhelds only)
-p[pin] Specifies the handheld PIN (USB handhelds only; hex pin prefix '0x'
)
-b[baud] Specifies the baud rate (serial handhelds only)
-d0 Disables VM debug mode
-d1 Enables VM debug mode
-w[password] Connects using the specified password
-q Quiet mode
[command] is one of
dir [-d] [-s] [-1]
Lists modules on the handheld
-d Display dependency information
-s Display siblings
-1 Single column output
deviceinfo
Provides information on the handheld
load [.cod file] ...
Loads modules onto the handheld
load [.jad file]
Load modules described by JAD onto the handheld
load @[manifest] ...
Loads all modules named in [manifest] onto the handheld
save { [module] ... | -g [group] }
Retrieves modules from the handheld
-g Retrieves all modules in a specified group
info [-d] [-s] [-v] [.cod file] ...
Provides information on the specified modules
-d Display dependency information
-s Display sibling information
-v Display verbose module information
javaloader.exe functionality to save the CODs is useful when an over-the-air (OTA) installation occurs, and you
want to obtain a copy to reverse engineer or load it into the simulator.
App Code Signing
App code signing on BlackBerry is not for identifying publishers by a human- distinguishable name but instead
for identifying the publisher to the JVM. Yes, it is true that there are a number of internal signing keys, which
RIM uses to distinguish its own code and certain apps from third-party developers; however, third-party
developers use code signing to enforce certain platform security features only.
For example, when you use Protected Storage, access is based on code signing rather than anything else. It is no
more complex than that. If you are used to Microsoft Windows code-signing that includes details about the
originating organization, then keep in mind that, especially if you are analyzing malicious code, there won't be a
clear indicator as to the originating organization.
BlackBerry Mobile Data System
BlackBerry Mobile Data System (MDS) is how a BlackBerry gets a connection to the Internet. It acts as a proxy
between the device and the device's primary UDP transport and Internet services, which use UDP or TCP,
respectively.
An MDS acts as a proxy for higher-level protocols such as HTTP (and HTTPS when configured). When acting as
a proxy for these protocols, MDS also provides bandwidth-conserving functionality, including image
compression. Aside from higher-level protocols, MDS can also act as a UDP-to-TCP proxy.
Why is this architecture detail important? Most apps on BlackBerry interact with remote services via HTTP or
HTTPS. BlackBerry doesn't have the concept of native HTTP or HTTPS proxies as we understand them on the
desktop i.e., a configuration option that apps will obey will doing HTTP or HTTPS requests. Thus, to intercept
and observe or modify the traffic from these apps with tools such as BurpSuite, you chain a new HTTP proxy off
of the MDS or MDS simulator.
In the MDS configuration you include something similar to the following to have the requests that come from
the device sent to localhost on port 1234:
application.handler.http.proxyEnabled=true
application.handler.http.proxyHost=localhost
application.handler.http.proxyPort=1234
The MDS Simulator comes into play when you use the device simulator because it is required to provide the
connectivity. You should configure and start the MDS simulator on your PC prior to launching the device
simulator.
Device Event Log
The BlackBerry device has a non-persistent rolling log that developers and the system may make use of. This log
is worth checking during app analysis to see whether anything sensitive is revealed. To access the log, hold down
the ALT key and type lglg.
Understanding BlackBerry 10
BlackBerry 10 when compared to BlackBerry Legacy is a radical overhaul. Gone is the proprietary real-time
operating system known as BBOS; it is instead replaced by the POSIX-compatible QNX operating system that
BlackBerry acquired in April 2010. Gone, too, is the JVM (Java Virtual Machine); instead apps are produced
using a variety of technologies.
This section covers the BlackBerry 10 platform in some depth and the key technical aspects that enable you to
understand the technology and be in a position to analyze the applications.
The BlackBerry 10 Platform
BlackBerry 10 is based on the QNX POSIX (UNIX-like) –compatible micro kernel and associated OS-forming
userland components. Userland is a term which is used to describe the components of an operating system
which exist outside of the kernel.
We won't provide a detailed primer to the QNX architecture. Numerous resources can provide a fundamental
overview of QNX's design and implementation. If you are interested in these base concepts read the following:
QNX Neutrino System Architecture—
(http://support7.qnx.com/download/download/26183/QNX_Neutrino_RTOS_System_Architecture.pdf)
System Architecture—(http://www.qnx.com/developers/docs/6.5.0SP1/neutrino/sys_arch/about.html)
A Roadmap to QNX Software Development—
(http://www.qnx.com/developers/docs/6.5.0SP1/momentics/bookset.html)
QNX PPS Service (Persistent Publish/Subscribe)—(http://www.qnx
.co.uk/developers/docs/6.5.0/index.jsp?topic=%2Fcom.qnx.doc .neutrino_pps%2Fpps.html)
Going beyond the core operating system and platform concepts, we will discuss some apps and higher-level
concepts:
Apps are packaged in BAR files and can be written using a variety of programming languages and associated
frameworks. These are discussed in later sections.
Authman and Launcher are responsible for launching and enforcing capabilities when instructed to do so by
the graphical navigator.
PPS Objects (implemented via the PPS service) are used to provide a range of data sources and access to
peripherals such as Bluetooth and similar configurations.
The sections that follow dig into these concepts in more detail. But before doing so I want to acknowledge the
work of others who unlike me didn't get to spend years with QNX, PlayBook, and BlackBerry 10 and who instead
conducted their own research that has contributed so much to the public understanding of the platform from a
security perspective:
Andy Davis and Daniel Martin Gomez for their paper “BlackBerry PlayBook Security: Part One” —
https://www.nccgroup.com/media/18436/blackberry_playbook_security._part_one.pdf
Alex Plaskett for his presentation “An Introduction to Blackberry 10 Security (BB10 - QNX)” —
https://labs.mwrinfosecurity.com/system/assets/410/original/mwri_blackberry-10-security_2013-06-
03.pdf
Tim Brown for his general QNX research — http://seclists.org/fulldisclosure/2014/Mar/98
Ralf-Philipp Weinmann for his Blackhat presentation “BlackBerryOS 10 from a security perspective” —
http://www.youtube.com/watch?v=z5qXhgqw5Gc
Zach Lanier and Ben Nell for their CanSecWest presentation “Deconstructing BB10” —
https://cansecwest.com/slides/2014/NoApologyRequired-BB10-CanSecWest2014.pdf
Shivang Desa for his post “Get Started with Pentesting BlackBerry Apps” —
http://blog.attify.com/attifys-guide-to-get-started-with- pentesting-blackberry-apps/
The BerryLeaks Wikia — http://berryleaks.wikia.com/wiki/BerryLeaks_Wiki
Authman and Launcher
Authman and Launcher were originally two software components developed for the BlackBerry PlayBook.
Launcher is what actually executes the apps and authman is consulted as to the permissions they should be
assigned. They were then used in BlackBerry 10 and have subsequently been used in the QNX CAR platform.
Their being used in the QNX CAR platform provides a handy public reference as to their purpose and
functionality (http://www.qnx.com/developers/docs/qnxcar2/index.jsp?
topic=%2Fcom.qnx.doc.qnxcar2.hmi%2Ftopic%2Fhmi_authman.html).
Authman and Launcher are processes responsible for determining whether an app has permission to use a
set of requested capabilities and for launching the app if it has sufficient permissions
…
To launch an app, Navigator makes a request to Launcher. Launcher reads the app's manifest (MANIFEST.MF)
file and requests Authman to confirm that the app has permission to use the requested capabilities. Authman
checks these against the /etc/authman/sys.res file which lists the available system capabilities and the apps
that are entitled to use them.
This process is nearly identical on BlackBerry 10. The only real difference between BlackBerry 10 and QNX CAR
in the context of Navigator, Launcher, and Authman is an awareness of BlackBerry Balance. As a result you can
think of these software components (Authman, Launcher and Navigator) as core security components to the app
security framework, ensuring apps run as the correct user with the correct capabilities and permissions.
Apps Packages and BAR Files
BAR (BlackBerry Archive) format is simply a zip file with a well-defined structure. This well-defined structure
depends on the type of application whether native, Cascades, HTML5, JavaScript, or Android.
For native, Cascades, HTML5, and JavaScript this structure is:
+
|
+-- META-INF
|
+-- native
For Android the structure is:
+
|
+-- META-INF
|
+-- android
The META-INF directory contains a number of files containing metadata. This metadata varies but the common
files are:
MANIFEST.MF—Main manifest for the application
AUTHOR.SF—Signature file for the developer's signing key containing SHA-512 hashes for the assets and parts
of the manifest, which are protected
AUTHOR.EC—Signature for AUTHOR.SF
RDK.SF—Signature file for the BlackBerry signing key containing SHA-512 hashes for the assets and parts of
the manifest, which are protected
RDF.EC—Signature for RDK.SF
MANIFEST_[Language Code].BBR—Localization entry points
The MANIFEST.MF file is of the most interest and although BlackBerry doesn't publish a specification, the key
attributes contained in the file are
Entry-Point-User-Actions—The application's requested or required capabilities
(http://www.qnx.com/developers/docs/qnxcar2/index .jsp?
topic=%2Fcom.qnx.doc.qnxcar2.hmi%2Ftopic%2Fhmi_authman.html)
Entry-Point-System-Actions—The actions that the system will perform when launching the app; that is, that
it will run native
Entry-Point-Type—The type of app the values here include Qnx/Elf, Qnx/Cascades, Qnx/WebKit (for HTML5
and JavaScript or WebWorks apps), Qnx/Uri (for URL shortcuts), and Qnx/Android
Entry-Point — What the system will run when executing the program
The Entry-Point parameter can include a variety of possible values depending on the type of app. For example a
native app may look like this:
Entry-Point: [timeout=10 flags=a path=(p600)boot]
Whereas an Android app may look like this:
Entry-Point: android://com.nccgroup?activity-name=com.nccgroup.activity.Hi
Finally, an HTML5 and JavaScript app might look like this:
Entry-Point: WEBWORKS_VERSION=1.0.4.11 app/native/wwe
Recognizing that the ability to run arbitrary binaries or have libraries loaded by crafting your own manifest is
not considered a security issue is important. This is because all you would achieve is execution within the
context of the user and groups that the app would be assigned anyway. Numerous other ways exist to get
arbitrary code execution on a device or simulator within a contained sandbox, including Developer mode;
therefore, the ability to run code or navigate the filesystem is not considered a security issue.
What would be considered a security issue is if you are able to get code execution within the context of another
app, gain access to the private data directory for another app, or modify its BAR contents, and still satisfy
signature checks.
Native Applications
Native applications (http://developer.blackberry.com/native/documentation/ core/) are those typically
written in C or C++ via the Momentics IDE. The application code is compiled and linked to an ELF (Executable
and Linkable Format; see http://en.wikipedia.org/wiki/Executable_and_Linkable_Format) file that is run by
Launcher.
The resultant binaries are produced using the GCC tool chain, and due to the use of C and C++ are potentially
vulnerable to a range of memory corruption vulnerability classes. However, BlackBerry by default enables a
number of mitigations to try to complicate the exploitation of these vulnerability classes.
To mitigate or complicate the exploitation of any memory corruption vulnerabilities that may be present in an
app, BlackBerry provides a number of compiler- and linker-implemented or -enabling defenses. BlackBerry
provides an overview of these features in its development documentation (http://developer
.blackberry.com/native/documentation/core/com.qnx.doc.native_sdk
.security/topic/using_compiler_linker_defenses.html#dho1384790657335).
These defenses are enabled by default in the Momentics IDE for new projects to ensure protections are enabled.
However, they are not mandatory and as such you should understand what is available versus what is actually
enabled on a per-binary basis and audit for their presence. We cover how to audit for their presence later in this
chapter.
Cascades Applications
Cascades applications (http://developer.blackberry.com/native/
documentation/cascades/dev/fundamentals/) are also native applications; however, they utilize the Qt
framework to create the user interface (UI). Due to this use of Qt, a number of specific security considerations
exist over and above those for standard C/C++ apps. These considerations are due to the underlying QML
technology and the attack surface it introduces.
BlackBerry discusses some of these specific security considerations in a document titled “Security
considerations.” The most striking of these considerations is the possibility of UI spoofing due to HTML
injection, and more importantly the risk of script injection (a la JavaScript) into an app:
If a Cascades application executes QScript or JavaScript that's controlled by an attacker, it can allow the
attacker to access application data or control the behavior of the application. For this reason, it is important
that applications avoid executing untrusted data as a part of scripts.
When the QScriptEngine class is used to execute scripts, it is important that untrusted values are never
appended to the string of the script that's being executed. All scripts that are executed by a QScriptEngine
should be predefined when developing the application and should never be altered dynamically when the
application is running.
−http://developer.blackberry.com/native/documentation/cascades/best_practices/security/index.html
The Qt project itself also provides some advice around QML security; it helpfully provides a list of ways you can
shoot yourself in the foot.
Using import to import QML or JavaScript you do not control. BAD
Using Loader to import QML you do not control. BAD
Using XMLHttpRequest to load data you do not control and executing it. BAD
−http://qt-project.org/doc/qt-4.8/qdeclarativesecurity.html
This nonexhaustive list is important to keep in mind as we look at how to assess such apps later in this chapter.
Suffice it to say that although the use of Cascades will accelerate the development of UI aspects, it provides the
opportunity for extra security vulnerabilities to sneak in.
HTML5 and JavaScript Applications
HTML5 and JavaScript apps, also known as WebWorks (https://developer
.blackberry.com/html5/documentation/v2_1/), are locally run HTML5/JavaScript apps that use the Apache
Cordova framework to expose native device features such as the camera, GPS, and so on to apps. The
HTML5/JavaScript engine is provided by WebKit combined with some default restrictions around network
requests and the ability to access files or paths not inside the applications package.
From an app hacker's perspective, several interesting considerations exist with regard to WebWorks apps. The
first consideration is that BlackBerry doesn't provide anywhere near the same level of proactive security
guidance to developers that it does for other languages. The second is the possibility exists for developers to
write custom extensions and expose them to their HTML5/JavaScript app, which opens the opportunity for
security issues to arise. Details on how developers can write custom Cordova plug-ins are provided on the
BlackBerry developer site
(https://developer.blackberry.com/html5/documentation/v2_1/using_custom_plugins.html). These
extensions are comprised of a JavaScript interface and a native implementation. The ability to extend apps in
this way brings with it a wide range of possibilities from creating exploitable memory corruption conditions
from seemingly innocuous web technologies to a raft of potential logic vulnerabilities.
Android Applications
Android applications on BlackBerry 10 are simply repackaged. That is, the original APK (Android Package) is
retained and wrapped in a BAR structure.
The accomplishment for the Android run time on BlackBerry is pretty impressive when you consider that
BlackBerry ported the binder Linux kernel driver used on traditional Android devices to a QNX Resource
Manager. The Dalvik VM and Zygote concept were also ported across. As a result, the ability to run native
Android apps is indeed that—native. A vast majority of the Android run time is present, allowing near-seamless
compatibility with a wide variety of apps.
Android app security is covered extensively in other parts of this book and as a result won't be covered here.
However, you should understand that the same inter-app attack paths (that is, those that occur via Android IPC
mechanisms) translate due to the wholesale porting of the run time and framework.
Distributing Applications
Applications for BlackBerry 10 are solely distributed via BlackBerry World (formerly AppWorld), which is the
BlackBerry storefront. BlackBerry 10 does not provide the ability to sideload applications, unlike BlackBerry
Legacy. This restriction has in some cases been worked around via a variety of different methods, namely:
Developer mode—Using the mode intended for developers
(http://developer.blackberry.com/playbook/native/documentation/com
.qnx.doc.native_sdk.devguide/com.qnx.doc.native_sdk.devguide/topic/t_setup_enable_devmode_device.html
Sachesi—Originally DingleBerry, but dramatically enhanced to allow sideloading within Developer mode
(https://github.com/xsacha/Sachesi/releases)
SideSwype—A commercial service that uses a VPN (https://sideswype.me/)