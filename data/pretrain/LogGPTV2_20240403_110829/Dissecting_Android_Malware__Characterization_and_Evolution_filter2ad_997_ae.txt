once the root exploit is successfully launched. As a result,
the embedded app will be installed without user’s awareness.
An examination of this embedded app code shows that it is
almost identical to the malicious payload DroidKungFu adds
to the repackaged app. The installation of this embedded app
will ensure that even the repackaged app has been removed,
it can continue to be functional. Moreover, in DroidKungFu1,
the embedded app will show a fake Google Search icon
while in DroidKungFu2, the embedded app is encrypted and
will not display any icon on the phone.
4) Obfuscation, JNI, and Others As brieﬂy mentioned
earlier, DroidKungFu heavily makes use of encryption to hide
its existence. Geinimi is an earlier malware that encrypts
the constant strings to make it hard to analyze. DroidKungFu
instead encrypts not only those constant strings and C&C
servers, but also those native payloads and the embedded
app ﬁle. Moreover, it rapidly changes different keys for the
encryption, aggressively obfuscates the class name in the
malicious payload, and exploits JNI interfaces to increase
the difﬁculty for analysis and detection. For example, both
DroidKungFu2 and DroidKungFu4 uses a native program
(through JNI) to communicate with and fetch bot commands
from remote servers.
The latest version, i.e., DroidKungFuUpdate, employs the
update attack. With its stealthiness, it managed into the
ofﬁcial Android Market for users to download, reﬂecting
the evolution trend of Android malware to be more stealthy
104
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
THE OVERVIEW OF SIX DroidKungFu MALWARE FAMILIES
Table VI
DroidKungFu1
DroidKungFu2
DroidKungFu3
DroidKungFu4
DroidKungFuSapp
DroidKungFuUpdate
Root Exploits
Exploid
√
√
√
√
RATC
√
√
√
√
Encrypted
√
√
√
√
-
-
-
In Native
√
√
-
In Java
√
√
√
-
C&C
Encrypted
Number
√
√
-
1
3
3
3
1
-
Malicious
Component
com.google.ssearch
com.eguan.state
com.google.update
com.safesys
com.mjdc.sapp
-
Embedded
Apk
plaintext
none
encrypted
none
none
none
Samples
34
30
309
96
3
1
Discovered
Month
2011-06
2011-07
2011-08
2011-10
2011-10
2011-10
in their design and infection.
B. AnserverBot
AnserverBot was discovered in September 2011. This
malware piggybacks on legitimate apps and is being actively
distributed among a few third-party Android Markets in
China. The malware is considered one of the most sophisti-
cated Android malware as it aggressively exploits several
sophisticated techniques to evade detection and analysis,
which has not been seen before. Our full investigation of
this malware took more than one week to complete. After
the detailed analysis [33], we believe this malware evolves
from earlier BaseBridge malware. In the following, we will
highlight key techniques employed by AnserverBot. Our
current dataset has 187 AnserverBot samples.
1) Anti-Analysis
Though AnserverBot repackages
existing apps for infection, it aims to protect itself by actively
detecting whether the repackaged app has been tampered
with or not. More speciﬁcally, when it runs, it will check
the signature or the integrity of the current (repackaged) app
before unfolding its payloads. This mechanism is in place
to thwart possible reverse engineering efforts.
Moreover, AnserverBot aggressively obfuscates its inter-
nal classes, methods, and ﬁelds to make them humanly
unreadable. Also, it intentionally partitions the main payload
into three related apps: one is the host app and the other twos
are embedded apps. The two embedded apps share the same
name com.sec.android.touchScreen.server but with different
functionality. One such app will be installed through the
update attack while the other will be dynamically loaded
without being actually installed (similar to Plankton). The
functionality partitioning and coordination, as well as ag-
gressive obfuscation, make its analysis very challenging.
We have the reason to believe that AnserverBot is inspired
by the dynamic loading mechanism from Plankton. In
particular, the dynamic mechanisms to retrieve and load
remote code is not available in earlier BaseBridge malware.
In other words, it exploits the class loading feature in Dalvik
virtual machine to load and execute the malicious payload
at run time. By employing this dynamic loading behavior,
AnserverBot can greatly protect itself from being detected
by existing anti-virus software (Section V). Moreover, with
such dynamic capability in place, malware authors can
instantly upgrade the payloads while still taking advantage
of current infection base.
2) Security Software Detection Another related self-
protection feature used in AnserverBot is that it can de-
tect
the presence of certain mobile anti-virus software.
In particular,
it contains the encrypted names of three
mobile anti-virus software, i.e., com.qihoo360.mobilesafe,
com.tencent.qqpimsecure and com.lbe.security, and attempts
to match them with those installed apps on the phone. If
any of the three anti-virus software is detected, AnserverBot
will attempt to stop it by calling the restartPackage method
and displaying a dialog window informing the user that the
particular app is stopped unexpectedly.
3) C&C Servers One interesting aspect of AnserverBot
is its C&C servers. In particular, it supports two types of
C&C servers. The ﬁrst one is similar to traditional C&C
servers from which to receive the command. The second one
instead is used to upgrade its payload and/or the new address
of the ﬁrst type C&C server. Surprisingly, the second type
is based on (encrypted) blog contents, which are maintained
by popular blog service providers (i.e., Sina and Baidu). In
other words, AnserverBot connects to the public blog site
to fetch the (encrypted) current C&C server and the new
(encrypted) payload. This functionality can ensure that even
if the ﬁrst type C&C server is ofﬂine, the new C&C server
can still be pushed to the malware through this public blog,
which is still active as of this writing.
V. MALWARE DETECTION
The rapid growth and evolution of
recent Android
malware pose signiﬁcant challenges for their detection.
In this section, we attempt to measure the effectiveness
of existing mobile anti-virus software. To this end, we
choose four representative mobile anti-virus software, i.e.,
AVG Antivirus Free v2.9 (or AVG), Lookout Security &
Antivirus v6.9 (or Lookout), Norton Mobile Security
Lite v2.5.0.379
TrendMicro Mobile
(TrendMicro)
Security Personal Edition v2.0.0.1294
and download them from the ofﬁcial Android Market in the
ﬁrst week of November 2011.
(Norton),
and
We install each of them on a separate Nexus One phone
running Android version 2.3.7. Before running the security
app, we always update it with the latest virus database. In
the test, we apply the default setting and enable the real-time
protection. After that, we create a script that iterates each
app in our dataset and then installs it on the phone. We will
wait for 30 seconds for the detection result before trying
the next app. If detected, these anti-virus software will pop
up an alert window, which will be recorded by our script.
After the ﬁrst iteration, we further enable the second-round
scanning of those samples that are not detected in the ﬁrst
105
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
DETECTION RESULTS FROM FOUR REPRESENTATIVE MOBILE
ANTI-VIRUS SOFTWARE
Table VII
DroidKungFuSapp
3
DroidKungFuUpdate 1
1
ADRD
AnserverBot
Asroot
BaseBridge
BeanBot
Bgserv
CoinPirate
CruseWin
DogWars
DroidCoupon
DroidDeluxe
DroidDream
DroidDreamLight
DroidKungFu1
DroidKungFu2
DroidKungFu3
DroidKungFu4
Endofday
FakeNetﬂix
FakePlayer
GamblerSMS
Geinimi
GGTracker
GingerMaster
GoldDream
Gone60
GPSSMSSpy
HippoSMS
Jifake
jSMSHider
KMin
LoveTrap
NickyBot
NickySpy
Pjapps
Plankton
#
AVG
Lookout
Norton
#
%
#
% #
%
Trend
Micro
%
#
22 22 100.0 13 59.0 5
22.7
11 50.0
187 165 88.2 89 47.5 2
8
3
37.5
0
0.0
0
1.0
0.0
57 30.4
6
75.0
122 110 90.1 112 91.8 40 32.7 119 97.5
8
9
1
2
1
1
1
0
0.0
0
0.0
0
0.0
0
0.0
9 100.0 1
11.1 2
22.2
9 100.0
0
0
0.0
0.0
0
0.0
0
0.0
0
0.0
2 100.0 2 100.0
2 100.0
1 100.0 1 100.0 1 100.0
1 100.0
0
0.0
0
0.0
0
1 100.0 1 100.0 0
0.0
0.0
0
0.0
1 100.0
16 11 68.7 16 100.0 9
56.2
16 100.0
46 14 30.4 45 97.8 11 23.9
46 100.0
34 34 100.0 34 100.0 2
30 30 100.0 30 100.0 1
309 0
0.0 307 99.3 1
96
4
0
0
4.1
0.0
0.0
96 100.0 2
0
0.0
0
1 100.0 0
5.8
3.3
0.3
2.0
0.0
0.0
33 97.0
30 100.0
305 98.7
12 12.5
0
0
0.0
0.0
1 100.0 1 100.0 1 100.0
1 100.0
1
6
1
0
0.0
1 100.0 1 100.0
1 100.0
6 100.0 6 100.0 6 100.0
6 100.0
0
0.0
0
0.0
0
0.0
1 100.0
69 69 100.0 69 100.0 38 55.0
67 97.1
1
4
1 100.0 1 100.0 1 100.0
1 100.0
4 100.0 4 100.0 4 100.0
4 100.0
47 29 61.7 40 85.1 19 40.4
47 100.0
9 100.0 9 100.0 4
44.4
6 100.0 2
33.3
2
50.0 2
50.0
7
3
2
77.7
50.0
50.0
9
6
4
1
0
0
0
0.0
0.0
0.0
1 100.0 0
0.0
1 100.0
16 11 68.7 16 100.0 13 81.2
16 100.0
52 52 100.0 0
0.0 40 76.9
52 100.0
1
1
2
0
0
0.0
0.0
1 100.0 1 100.0
1 100.0
0
0.0
0
0.0
0
0.0
2 100.0 2 100.0 2 100.0
2 100.0
58 44 75.8 57 98.2 26 44.8
50 86.2
11 11 100.0 0
0
0.0
0
0.0
0.0
1
0
9 100.0 3
33.3 0
9.0
0.0
0.0
6
0
8
54.5
0.0
88.8