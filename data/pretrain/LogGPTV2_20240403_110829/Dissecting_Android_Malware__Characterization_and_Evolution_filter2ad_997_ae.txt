### Root Exploit and Embedded App Installation

Once the root exploit is successfully executed, the embedded application will be installed without the user's knowledge. An analysis of the code within this embedded app reveals that it closely resembles the malicious payload DroidKungFu adds to repackaged apps. This installation ensures that even if the repackaged app is removed, the embedded app can continue to function. In DroidKungFu1, the embedded app displays a fake Google Search icon, while in DroidKungFu2, the embedded app is encrypted and does not display any icon on the device.

### Obfuscation, JNI, and Other Techniques

As previously mentioned, DroidKungFu extensively uses encryption to conceal its presence. For instance, Geinimi, an earlier malware, encrypts constant strings to make analysis more difficult. DroidKungFu, however, encrypts not only these constant strings and command-and-control (C&C) server information but also native payloads and the embedded app file. Additionally, it frequently changes encryption keys, aggressively obfuscates class names in the malicious payload, and leverages Java Native Interface (JNI) to increase the complexity of analysis and detection. Both DroidKungFu2 and DroidKungFu4 use a native program through JNI to communicate with and fetch bot commands from remote servers.

The latest version, DroidKungFuUpdate, employs an update attack, which allows it to infiltrate the official Android Market, reflecting the trend of Android malware becoming increasingly stealthy in their design and infection methods.

### Overview of Six DroidKungFu Malware Families

| Feature                | DroidKungFu1 | DroidKungFu2 | DroidKungFu3 | DroidKungFu4 | DroidKungFuSapp | DroidKungFuUpdate |
|------------------------|--------------|--------------|--------------|--------------|-----------------|-------------------|
| Root Exploits          | Exploid      | √            | √            | √            | √               | -                 |
| RATC                   | √            | √            | √            | √            | -               | -                 |
| Encrypted              | √            | √            | √            | √            | -               | -                 |
| In Native              | √            | √            | -            | -            | -               | -                 |
| In Java                | √            | √            | √            | -            | -               | -                 |
| C&C Encrypted          | √            | √            | -            | 1            | 3               | 3                 |
| C&C Number             | 1            | 3            | 3            | 3            | 1               | -                 |
| Malicious Component    | com.google.ssearch | com.eguan.state | com.google.update | com.safesys | com.mjdc.sapp | -                 |
| Embedded Apk           | plaintext    | none         | encrypted    | none         | none            | none              |
| Samples                | 34           | 30           | 309          | 96           | 3               | 1                 |
| Discovered Month       | 2011-06      | 2011-07      | 2011-08      | 2011-10      | 2011-10         | 2011-10           |

### AnserverBot

AnserverBot, discovered in September 2011, piggybacks on legitimate applications and is actively distributed through several third-party Android markets in China. It is considered one of the most sophisticated Android malware, employing various advanced techniques to evade detection and analysis. Our full investigation of this malware took over a week to complete. After detailed analysis, we believe AnserverBot evolved from the earlier BaseBridge malware. Here are the key techniques employed by AnserverBot:

#### 1. Anti-Analysis

While AnserverBot repackages existing apps for infection, it includes mechanisms to detect tampering. Specifically, it checks the signature or integrity of the repackaged app before executing its payload, thwarting potential reverse engineering efforts. Additionally, AnserverBot obfuscates internal classes, methods, and fields to make them unreadable. The main payload is partitioned into three related apps: the host app and two embedded apps. These embedded apps share the same name, `com.sec.android.touchScreen.server`, but have different functionalities. One is installed through an update attack, while the other is dynamically loaded without being installed, similar to Plankton. This functionality partitioning and coordination, combined with aggressive obfuscation, make analysis very challenging.

#### 2. Security Software Detection

AnserverBot can detect the presence of certain mobile anti-virus software. It contains encrypted names of three anti-virus apps: `com.qihoo360.mobilesafe`, `com.tencent.qqpimsecure`, and `com.lbe.security`. If any of these are detected, AnserverBot attempts to stop them by calling the `restartPackage` method and displaying a dialog informing the user that the app has stopped unexpectedly.

#### 3. C&C Servers

AnserverBot supports two types of C&C servers. The first type is traditional, used for receiving commands. The second type is used for upgrading the payload and/or updating the address of the first type of C&C server. Surprisingly, the second type is based on encrypted blog contents hosted by popular blog service providers (Sina and Baidu). This ensures that even if the primary C&C server is offline, the new C&C server can still be pushed to the malware through the public blog, which remains active.

### Malware Detection

The rapid growth and evolution of recent Android malware pose significant challenges for detection. To measure the effectiveness of existing mobile anti-virus software, we selected four representative products: AVG Antivirus Free v2.9, Lookout Security & Antivirus v6.9, Norton Mobile Security Lite v2.5.0.379, and TrendMicro Mobile Security Personal Edition v2.0.0.1294. We installed each on a separate Nexus One phone running Android version 2.3.7, updated them with the latest virus databases, and enabled real-time protection. We then created a script to iterate through each app in our dataset, installing it on the phone and waiting 30 seconds for detection results. If detected, the anti-virus software would pop up an alert, which was recorded by our script.

### Detection Results from Four Representative Mobile Anti-Virus Software

| Malware Family        | AVG | Lookout | Norton | TrendMicro |
|-----------------------|-----|---------|--------|------------|
| DroidKungFuSapp       | 3   | 3       | 100.0% | 1          |
| DroidKungFuUpdate     | 1   | 1       | 100.0% | 1          |
| ADRD                  | 22  | 22      | 100.0% | 13         |
| AnserverBot           | 187 | 165     | 88.2%  | 89         |
| Asroot                | 57  | 6       | 10.5%  | 0          |
| BaseBridge            | 122 | 110     | 90.1%  | 112        |
| BeanBot               | 9   | 9       | 100.0% | 1          |
| Bgserv                | 9   | 9       | 100.0% | 1          |
| CoinPirate            | 2   | 2       | 100.0% | 2          |
| CruseWin              | 1   | 1       | 100.0% | 1          |
| DogWars               | 1   | 1       | 100.0% | 1          |
| DroidCoupon           | 16  | 11      | 68.7%  | 16         |
| DroidDeluxe           | 46  | 14      | 30.4%  | 45         |
| DroidDream            | 34  | 34      | 100.0% | 34         |
| DroidDreamLight       | 30  | 30      | 100.0% | 30         |
| DroidKungFu1          | 309 | 0       | 0.0%   | 307        |
| DroidKungFu2          | 96  | 4       | 4.1%   | 96         |
| DroidKungFu3          | 96  | 4       | 4.1%   | 96         |
| DroidKungFu4          | 96  | 4       | 4.1%   | 96         |
| Endofday              | 33  | 30      | 90.9%  | 30         |
| FakeNetflix           | 305 | 98.7%   | 1      | 305        |
| FakePlayer            | 12  | 12.5%   | 0      | 0          |
| GamblerSMS            | 1   | 1       | 100.0% | 1          |
| Geinimi               | 1   | 1       | 100.0% | 1          |
| GGTracker             | 1   | 1       | 100.0% | 1          |
| GingerMaster          | 1   | 1       | 100.0% | 1          |
| GoldDream             | 1   | 1       | 100.0% | 1          |
| Gone60                | 1   | 1       | 100.0% | 1          |
| GPSSMSSpy             | 47  | 29      | 61.7%  | 40         |
| HippoSMS              | 9   | 9       | 100.0% | 9          |
| Jifake                | 4   | 4       | 100.0% | 4          |
| jSMSHider             | 47  | 29      | 61.7%  | 40         |
| KMin                  | 9   | 9       | 100.0% | 9          |
| LoveTrap              | 1   | 1       | 100.0% | 1          |
| NickyBot              | 16  | 11      | 68.7%  | 16         |
| NickySpy              | 52  | 52      | 100.0% | 0          |
| Pjapps                | 1   | 1       | 100.0% | 1          |
| Plankton              | 2   | 2       | 100.0% | 2          |
| Total                 | 58  | 44      | 75.8%  | 57         |

This comprehensive overview highlights the sophistication and evolving nature of Android malware, emphasizing the need for robust and adaptive detection methods.