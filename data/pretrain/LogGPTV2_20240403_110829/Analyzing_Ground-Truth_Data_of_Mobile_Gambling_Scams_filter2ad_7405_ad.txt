### Table VIII and Table IX in Appendix C: Analysis of Gambling App Clusters

Table VIII and Table IX in Appendix C present the top-5 clusters of Android and iOS gambling apps. Notably, most apps within the same cluster share a common prefix in their package names and bundle IDs. For instance, in the largest cluster, over 81.4% of Android apps and all iOS apps have the package name prefix `com.yibo.*`. Additionally, 86.8% of the Android gambling scam apps in this cluster are issued by the same certificate with the Distinguished Name of `yibo`.

**Finding VIII:** The most prevalent scam app family in our dataset is Yibo, which comprises 555 Android apps and 191 iOS apps, spanning 733 backend domains.

### C. Permission Analysis

Both Android and iOS employ permission models to control apps' access to sensitive data and system resources. By default, apps are not permitted to perform sensitive operations without the corresponding permissions. We investigate the permissions declared and requested by scam apps.

#### Android Scam Apps

For Android, we use the `get_permissions()` API of Androguard to extract and analyze the permissions used by scam apps. This analysis identified 636 unique permissions, including 119 AOSP-defined permissions and 517 custom permissions defined by the app vendor or third-party services. Among the custom permissions, 446 (86.3%) are used for push services, such as `com.hgapp.bet365.permission.JPUSH_MESSAGE` for JPush SDK, which helps scammers maintain user engagement through push notifications. Another 6.19% of these permissions are used for reading or writing settings, such as creating a shortcut on the home screen.

We also focus on dangerous Android permissions, as they are closely related to user privacy. On average, scam apps request 4.6 dangerous AOSP permissions, with some declaring up to 15, including `READ_CONTACTS` and `READ_SMS`. Figure 2 illustrates the distribution of dangerous AOSP permissions requested by gambling scams and genuine gambling apps. Unlike legitimate apps, scam apps integrate Instant Messaging SDKs to create built-in IM channels, enabling uncensored communication for social engineering attacks. Therefore, they request permissions like `RECORD_AUDIO` and `READ_CONTACTS`.

**Finding IX:** Compared to genuine gambling apps, gambling scam apps request more dangerous permissions to facilitate social engineering tactics, such as maintaining user engagement through push messages or constructing built-in IM channels.

#### iOS Scam Apps

For iOS, developers must include specific key-value pairs in the app's `Info.plist` file to request permissions and state their purposes. We unzipped each `.ipa` file to extract the `Info.plist` and used `plistlib` to parse and analyze the declared permissions and purposes.

In total, we identified 419 iOS apps declaring 19 unique permissions. The number of permissions declared ranges from 0 to 17, with an average of 7.8 and a standard deviation of 5.9. The most frequently used permissions are for accessing the PhotoLibrary, Camera, and Microphone. We observed that 138 (32.9%) apps declare the same 16 permissions with a generic description string, "APP requires your consent to access your microphone, camera, etc." This suggests that developers often use online tutorials and fail to replace the purpose strings with their actual intentions.

Compared to genuine gambling apps, iOS scam apps rarely request `FaceIDUsage` for Face ID login. Additionally, genuine gambling apps more frequently request location permissions, possibly due to regional restrictions.

### D. Compatibility Analysis

To examine the compatibility of scam apps, we analyzed the development SDK versions. Specifically, we identified the `MinSdkVersion` and `TargetSdkVersion` for Android apps using Androguard, and the `MinimumOSVersion` and `DTPlatformVersion` for iOS apps from the `Info.plist` file.

Figure 4 compares the minimum OS version requirements for Android and iOS apps. Gambling scam apps tend to declare lower minimum OS versions to ensure broader compatibility and reach more victims. For example, almost all scam apps set their minimum SDK version to 19 (Android 4.4) or lower, while only 48.8%, 48.6%, and 67.8% of genuine gambling apps, reputable apps in Google Play, and MyApp, respectively, do the same. Some scam apps even support Android 4.0.4, released in 2012, with target SDK 28 and 29 (Android 9 and 10).

Similar findings apply to iOS apps: most scam apps set their minimum OS version to 9.0, released in 2015, while the mode for genuine gambling apps is 11.0, released in 2017. The median `minSdkVersion` and `targetSdkVersion` for genuine gambling apps are 21 and 29, respectively, indicating that their compatibility is consistent with benign apps but not with scam apps.

**Finding X:** Gambling scam apps tend to declare lower minimum OS version requirements to ensure compatibility across a wider range of devices, thereby reaching more potential victims, even though their development SDK versions are not outdated.

### E. Network Infrastructure Analysis

#### Backend Server Identification

Identifying the backend infrastructure is crucial for understanding how mobile scam apps operate. We designed and implemented a static analyzer to extract backend server URLs from scam apps and used mitmproxy to profile their network traffic.

#### Backend URL Identification

Scam apps either use network APIs to fetch data from backend servers or WebView components to display content from specific domains. For Android, we collected a list of network request APIs and WebView APIs, such as `WebView.loadUrl(String url)`, and used Androguard to locate the callers of these APIs. We then performed a backward taint analysis to find the corresponding URL values.

After extracting backend URLs, we filtered out CDN and third-party library requests. For iOS, we used keys from the Android backend server analysis to locate and extract backend URLs from static resource files (e.g., `Info.plist`). We also extracted strings from the Mach-O file and filtered out invalid URLs and domains.

#### Traffic Profiling

We wrote Python scripts to automatically spawn apps on physical devices and capture their traffic for 10 minutes. We installed and captured traffic from 1,068 Android apps and 19 iOS apps, collecting 21.28 GB of raw traffic logs. We filtered out irrelevant traffic and built traffic flow sequences based on request timestamps and target hosts.

Figure 5 shows typical traffic flow patterns. Some apps first connect to intermediate servers, which return HTTP 200 or 302 status codes, before fetching scam content from the actual backend server. We grouped the traffic into three clusters based on sequence similarity.

#### Infrastructure Profiling

Through our approach, we collected 1,161 backend URLs associated with 1,277 scam apps. Besides traditional infrastructure, we observed 223 scam apps using distributors to dynamically update backend servers. Distributors deliver domain information, while backend servers provide core gambling services like account management, betting, and drawing.

We found that over 55.1% of backend servers were registered less than two years ago, with 12.2% registered within the last month. In contrast, distributor domains were generally older, suggesting a more stable infrastructure.

**Finding XI:** Gambling scam apps leverage distributors (and sometimes distributor pools) to distribute backend servers, significantly enhancing the robustness and evasiveness of their operations.

### VII. Payment Channels

We analyzed the payment channels of mobile scam apps to understand their gambling deposit operations and estimate the revenue from online gambling scams. Since scam apps often use multi-factor authentication methods, it is challenging to automatically extract payment channels at scale.

We manually investigated 100 scam apps on physical devices to determine their payment channels. Once a channel was identified, we placed an initial test deposit to verify its authenticity. We did not send money to benefit the criminals; instead, we repeatedly placed and withdrew deposit requests to collect transaction information, such as cryptocurrency addresses.

**Finding XII:** Manual investigation of payment channels revealed that scam apps use various methods to process deposits, often involving dynamic recipients and multi-factor authentication to evade detection and maximize revenue.