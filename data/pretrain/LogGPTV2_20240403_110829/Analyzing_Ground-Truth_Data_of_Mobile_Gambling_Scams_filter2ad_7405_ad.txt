Table VIII and Table IX in Appendix C show the top-5 clusters
of Android and iOS gambling apps. We can ﬁnd that most apps
in the same cluster share the same preﬁx of package names
and bundle IDs. For example, for the largest cluster of Android
and iOS gambling apps, more than 81.4% of the Android
apps and all iOS apps share the common package name preﬁx
com.yibo.*.
In addition, 86.8% of Android gambling scam
apps in this cluster are issued by the same certiﬁcate with the
Distinct Name of yibo.
Finding VIII: The most popular scam app family of
Android and iOS (in our dataset) are Yibo, which consists
of 555 Android apps and 191 iOS apps, spreading over
733 backend domains.
C. Permission Analysis
Both Android and iOS implement permission models to
control apps’ access to sensitive data and system resources.
By default, apps are not allowed to perform any sensitive
operations without corresponding permissions. We investigate
the permissions declared and requested by scam apps.
Android scam apps. As for Android, we leverage the
get permissions() API of Androguard to extract and study
the usage of permissions by scam apps. In this way, we
successfully identify 636 unique permissions, including 119
AOSP–deﬁned permissions and 517 custom permissions de-
ﬁned by the app vendor or other third-party services from
Android scam apps. As for the custom permissions, we ob-
serve that 446 (86.3%) of them are used for push service,
such as “com.hgapp.bet365.permission.JPUSH MESSAGE”
for JPush SDK, which helps the scammers keep users’ “stick-
iness” by sending push messages, and 6.19% are permissions
used for reading or writing settings (e.g., create a shortcut on
home screen) deﬁned by each vendor.
Especially, we pay attention to the usage of dangerous
Android permissions [49] since they are closely related to
user privacy. The scam apps request 4.6 dangerous AOSP
permissions on average, while some apps even declared
15 dangerous permissions including READ CONTACTS and
READ SMS. Figure 2 shows the distribution of dangerous
AOSP permissions requested across gambling scams and gen-
uine gambling apps. Unlike genuine gambling apps, scam apps
integrated Instant Messaging SDKs to construct built-in IM
channels, which provide a steady and uncensored communica-
tion approach to launch social engineering attacks on victims.
Therefore, they request the corresponding permissions, such as
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:17 UTC from IEEE Xplore.  Restrictions apply. 
72182
Figure 2. Dangerous permissions requested by Android scam apps and
genuine gambling apps.
Figure 4. Development SDK version distribution. Benign Set1 and Set2 refer
to apps in Google Play and MyApp for Android, App Store US and App
Store China for iOS, respectively. Gambling scam apps tend to declare lower
requirements for minimum OS versions being supported (4.4 for Android
gambling scam apps vs. 5.0 for reputable apps in Google Play).
legal gambling usually has regional restrictions. In addition,
we observe that the genuine gambling iOS apps usually request
permissions FaceIDUsage for Face ID login, which is rarely
used by scam gambling apps.
Finding IX: Compared with genuine gambling apps, gam-
bling scam app request more dangerous permissions to
support social engineering tricks (e.g., keep users’ “stick-
iness” via sending push messages or constructing built-in
IM channels).
Figure 3. Permissions requested by iOS scam and genuine gambling apps.
D. Compatibility Analysis
RECORD AUDIO and READ CONTACTS, for this purpose.
On the contrary, genuine gambling apps rarely request these
permissions. As for GET ACCOUNTS, most genuine apps
request this permission for Google Mobile Services (GMS)
SDK integration, while most gambling scam apps do not
integrate such functionality.
iOS scam apps. As for iOS, to access users’ private data,
developers are required to include speciﬁc key-value pairs
in their app’s Info.plist ﬁle which indicates requesting per-
missions and corresponding purposes. To analyze permission
usage of iOS apps, we ﬁrst unzip each .ipa ﬁle to extract the
Info.plist ﬁle in our dataset. We leverage plistlib [50] to parse
it and investigate the declared permission and purpose.
Altogether, we identify 419 iOS apps declaring 19 unique
permissions. The number of permissions declared varies from
0 to 17, with an average of 7.8 and a standard deviation of
5.9. Similar to Android scam apps, the most frequently used
permissions are reading and writing PhotoLibrary, Camera,
and Microphone. We also observe 138 (32.9%) apps declaring
the same 16 permissions, with the required description string
“APP requires your consent
to access your microphone,
camera, etc.”. We ﬁnd that such purpose strings are generally
used by online tutorials [51], and developers are expected to
replace them with their true purposes. However, it is obvious
that the scam apps neither decrease the claims of permissions
as needed nor state their intention of using these permissions.
Compared to gambling scam apps, we also ﬁnd Android
and iOS genuine gambling apps request location permissions
more often than scam gambling apps, which may be because
To inspect
the compatibility of scam apps, we analyze
the development SDK version of these apps. More specif-
ically, we identify the MinSdkVersion, which speciﬁes
the minimum platform API level required for the app to
run, and the TargetSdkVersion, which designates the
platform API level that the app targets. As for Android apps,
we leverage Androguard to extract
the minSdkVersion
and targetSdkVersion attributes from the AndroidMan-
ifest.xml ﬁle. Considering iOS apps, we ﬁrst extract
the
Info.plist ﬁle and then inspect the MinimumOSVersion and
DTPlatformVersion ﬁeld from it, which are similar to
MinSdkVersion and TargetSdkVersion in Android.
To compare app compatibility between scam apps and genuine
apps, we additionally crawl the top-500 apps from Google
Play and a third-party App Store, MyApp [33], and the top-
200 free apps from Apple App Store in the U.S. and China on
December 10, 2020, to identify their MinSdkVersion and
TargetSdkVersion.
Figure 4 illustrates the comparison results for Android and
iOS apps. We ﬁnd gambling scam apps tend to declare lower
requirements for minimum OS versions to ensure compat-
ibility across versions and,
thus, can cover more victims,
even though their develop SDK versions are not outdated.
In particular, almost all scam apps declare their min SDK
version to be 19 (Android version 4.4) or lower, only 48.8%,
48.6%, and 67.8% for genuine gambling apps, reputable apps
in Google Play, and MyApp, respectively. What’s more, we
observe 80 scam apps that even support Android 4.0.4, which
was released in 2012, with target SDK 28 and 29 (Android 9
and 10). Similar ﬁndings can be observed in iOS apps: most
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:17 UTC from IEEE Xplore.  Restrictions apply. 
82183
0102030405060708090100Percent(%)PROCESS_OUTGOING_CALLSREAD_SMSRECEIVE_SMSSEND_SMSWRITE_CONTACTSGET_ACCOUNTSREAD_CONTACTSCALL_PHONEACCESS_BACKGROUND_LOCATIONACCESS_FINE_LOCATIONACCESS_COARSE_LOCATIONREAD_PHONE_STATERECORD_AUDIOCAMERAREAD_EXTERNAL_STORAGEWRITE_EXTERNAL_STORAGEScamGenuine Gambling0102030405060708090100Percent(%)BluetoothAlwaysUsageFaceIDUsageNFCReaderUsageRemindersUsageBluetoothPeripheralUsageCalendarsUsageHealthUpdateUsageHealthShareUsageAppleMusicUsageMotionUsageLocationAlwaysAndWhenInUseUsageLocationUsageContactsUsageLocationAlwaysUsageLocationWhenInUseUsageMicrophoneUsagePhotoLibraryAddUsageCameraUsagePhotoLibraryUsageScamGenuine GamblingAndroid Minimum SDK VersioniOS Minimum OS Version51015202530ScamGenuine GamblingBenign Set1Benign Set2Figure 5. Typical trafﬁc ﬂow sequence pattern. The x-axis represents the elapsed time since the app was launched, the y-axis indicates the different remote
server apps connects, while the number of rectangular boxes stands for the trafﬁc volume.
iOS scam apps declare their minimum OS version to be 9.0,
which was released in 2015, while the mode of minimum OS
version of genuine gambling app is 11.0, which was released
in 2017. In addition, the median number of min SDK version
and target SDK version in genuine gambling apps are 21 and
29, respectively, which indicates the compatibility of genuine
gambling apps is consistent with benign apps but not with
gambling scam apps.
domains requested by third-party libraries. Particularly, we ﬁrst
collect the top-10 SDKs in each category from AppBrain [55]
and the corresponding package namespace, then we ﬁlter out
the web requests initiated by SDKs rather than apps.
As for iOS apps, we use the keys obtained from Android
backend server analysis, locating whether they exist in iOS
static resource ﬁles (e.g., Info.plist). If they exist, we extract
the corresponding value as backend URL candidates. We also
extract the strings embedded in the Mach-O ﬁle and ﬁlter out
invalid URLs and domains by Python validators library [56].
Inspired by prior work [57], since iOS libraries and their
counterparts on Android will share common features, we also
ﬁlter out the domains used by third-party libraries, which were
collected in Android backend analysis.
Trafﬁc proﬁling. We ﬁrst write 403 lines of Python scripts to
automatically spawn an app in physical devices and capture its
trafﬁc for 10 minutes. To reduce interference between different
apps, we uninstall the previous app before installing the new
one. To this end, we install and capture trafﬁc of 1,068 Android
apps and 19 iOS apps and successfully collect 21.28 GB of
raw trafﬁc log ﬁles in total. Note that some iOS apps failed
to install due to revoked enterprise certiﬁcates. To reduce
irrelevant trafﬁc, we ﬁlter out the CDN static resources and
third-party service trafﬁc through the list of CDN domain [58]
and third-party domains acquired from the previous step.
Given those trafﬁc log ﬁles, we build the trafﬁc ﬂow
sequence by each request’s timestamp and map the target
host of requests to a number corresponding to the order they
ﬁrst appear in the app’s trafﬁc. Besides, inspired by related
works [59], [60], which show the ﬁrst few seconds of a
packet sequence indicating the most useful features for website
ﬁngerprint, we focus on the ﬁrst few packages (in our study,
we set the threshold to be 100 packages) after the backend
server appeared in network trafﬁc. By calculating the sequence
similarity (via Euclidean distance [61]) between each trafﬁc,
we successfully group them into three clusters.
As shown in Figure 5, apart from directly fetching scam
content from backend servers, shown in Figure 5-a, we notice
that some apps will ﬁrst connect to one or more intermediate
servers, and these servers will return with HTTP 200 or
302 (for redirection) status code. More concretely, if scam
apps receive responses with encrypted backend servers, they
will decrypt them ﬁrst. As shown in Figure 5-b or Figure 5-c,
after interacting with the intermediate server(s), apps will fetch
scam content from the actual backend server.
Limitation. Our backend URL identiﬁcation is implemented
by a static analysis approach, which cannot cover the code
loaded dynamically in nature. Besides, the native .so ﬁle was
Finding X: Gambling scam apps tend to declare lower
requirements for minimum OS versions to ensure compat-
ibility across versions and, thus, can cover more victims,
even though their develop SDK versions are not outdated.
E. Network Infrastructure Analysis
Backend server identiﬁcation. Identifying the backend in-
frastructure enables us to understand how mobile scam apps
operate. In particular, we (1) design and implement a static
analyzer to extract backend server URLs from scam apps
automatically and then (2) use mitmproxy [52] to proﬁle their
network trafﬁc. Our approach is elaborated on below.
Backend URL identiﬁcation. We observe that scam apps
either leverage network APIs to fetch data from the backend
servers or use the WebView component to display the content
of speciﬁc domains. To extract backend URLs for Android
apps, we ﬁrst collect a list of network request APIs and
WebView APIs, such as WebView.loadUrl(String url), from
ofﬁcial documents and previous works [53], [12], [54]. Then,
we use Androguard to traverse the target app and locate the
callers of these APIs.
After locating the position of API calls, we then perform
a backward taint analysis for the API’s parameter to ﬁnd the
corresponding value of the URL. To be more speciﬁc, we ﬁrst
build an inter-procedure control ﬂow graph (ICFG) for the app
and mark the local variable of candidate parameters of the
called API WebView.loadUrl as taint source. We then perform
a backward taint analysis along the ICFG to collect all tainted
instructions and variables. Speciﬁcally, we forward traverse
these instructions to reconstruct the string-related operations
such as initialization and concatenation of StringBuilder and
StringBuffer. Furthermore, in the case of calling Android-
speciﬁc APIs, which read the string from asset ﬁles, we extract
corresponding resources ﬁles from the decoded APK ﬁle to
resolve the string value. Meanwhile, we also record extra
semantic information for follow-up ﬁltering work. We extract
and save the ﬁeld name of tainted ﬁelds, and, for the used
resource strings, we extract their string id and string name
from the /res/values/strings.xml ﬁle. In our study, we ﬁlter out
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:17 UTC from IEEE Xplore.  Restrictions apply. 
92184
TimeaTimebTimecbackend serverintermediate server Aintermediate server Bintermediate server Cintermediate server Dmay imply that the distributor is much more stable than the
backend domain. More interestingly, as shown in Figure 6-c,
apart from using dynamic backend server fetching, we observe
that 108 scam apps leverage distributor pools to fetch their
backend domains. If any of the distributors in the pool are
available, scam apps can communicate with their backend
servers successfully. We ﬁnd that this infrastructure design
makes scam content delivery more evasive, i.e., the scammer
can easily migrate the backend service from one domain to
another without distributing new scam apps.
Besides, we cluster the backend servers based on extracted
domains. Then, we use passive DNS to query the IP address
of each backend server. To further study the cloud services
behind it, we use the ip2location dataset [62] to query the AS
corresponding to each IP address. Table XII shows the popular
ASes and the number of IP addresses of each AS. Although the
backend services are distributed on 102 different ASes, most
are concentrated on a few cloud services. For example, the top-
ﬁve cloud services provide services that were used by 79.5% of
the gambling scam backends. Most cloud services are located
in or around China, which is aligned with the regional nature
of the scam targets.
Finding XI: Gambling scam apps leverage distribu-
tors (even distributor pools) to distribute backend servers,
which signiﬁcantly improves scam apps’ robustness.
VII. PAYMENT CHANNELS
it
Next, we analyze the various payment channels of mobile
scam apps to understand their gambling deposit operations and
estimate the revenue of online gambling scam activities. Since
scam apps usually embed with multiple-factor authentication
methods (e.g., CAPTCHA and referral code) before displaying
payment details,
is challenging to automatically extract
payment channels on a large-scale.
In our study, we manually investigate 100 scam apps 3
to determine their payment channels. More speciﬁcally, we
install these apps on our ﬁve physical devices and manually
investigate the payment channels. Considering gambling scam
apps may hide malicious/improper behaviors or payment chan-
nels when detected in abnormal running environments, e.g.,
virtual machines, we conduct this study on physical devices.
Particularly, once we identify a payment channel, we place an
initial test deposit to determine the authenticity. If genuine, we
determine whether we should repeatedly perform deposits and
if this payment channel is associated with dynamic recipients.
It is worth noting that our deposit testing neither sent money
to beneﬁt the criminals nor attempted to communicate with
the scammers. In our research, we only repeatedly place
deposit requests and then withdraw those requests after col-
lecting transaction information (e.g., cryptocurrency address).
For those payment channels with dynamic recipients, we
conducted repeated deposits on a ﬁve-minute basis beginning
319 of the evaluated apps are iOS, which are in the same set of the iOS
apps in Section VI.E. Similarly, the rest of 81 Android apps are randomly
selected from the runnable Android apps.
Figure 6. Typical backend network architecture.
not covered in our implementation. In taint analysis, we use the
APIs collected from related work and documents as our source.
Even though we try our best to complete this list, the scammers
may choose rarely used API to bypass this identiﬁcation. In
trafﬁc proﬁling, we install our proxy certiﬁcate both in iOS
and Android systems to capture SSL trafﬁc. Even though this
approach could cover common cases, we could not guarantee
that all gambling scam apps are implemented without SSL
pinning.
We ﬁlter out the CDN and the third-party libraries based
on the existing CDN domain list and the top-10 SDK list
from AppBrain; it may lead to false positives if the scammer
uses a CDN or SDK not in the list. In addition, different
from applying the static taint analysis in Android, we use
strings util, which may lead to some false negatives due to
the lack of modelling string operation such as initialization
and concatenation.
Infrastructure proﬁling. Through the aforementioned ap-
proach, we collect 1,161 backend URLs associated with 1,277
scam apps. When analyzing their network infrastructure, be-
sides the traditional infrastructure as illustrated in Figure 6-a,
we observe 223 scam apps leveraging servers to update
backend servers dynamically, and we named them distributor.
To avoid being taken down, scammers use distributors to
dynamically deliver domains of backend servers while back-
end servers provide core gambling services, such as account
management, betting, and drawing, as shown in Figure 6-b
and Figure 6-c.
According to our observation, a gambling scam app imme-
diately communicates with a distributor after initialization, and
the payload between the distributor and the client is relatively
small. After the app loads the address of the backend server,
it
launches diverse gambling functions with much higher
trafﬁc volume. Thus, we differentiate distributors and backend
servers with their activation order and network trafﬁc volume.
After diving into these apps’ distributor and backend do-
mains’ life cycle, we ﬁnd more than 55.1% of backend servers
were registered less than two years ago — and 12.2% less than
one month — while the distributor domains were registered