# SymGDB: Symbolic Execution in GDB

## User Workflow
- **Restart Symbolic Execution from Breakpoint:**
  - Retrieve the debugged program's state using the GDB Python API.
  - Obtain the current program state and pass it to Triton.
  - Define symbolic variables.
  - Set the target address.
  - Execute symbolic execution and capture the output.
  - Inject the results back into the debugged program state.

## SymGDB System Structure
### Implementation of System Internals
- **Classes in SymGDB:**
  - **Arch:**
    - Provides different pointer sizes and register names.
  - **GdbUtil:**
    - Manages memory and register read/write operations.
    - Retrieves memory mappings, filenames, and architecture details.
    - Fetches argument lists.
  - **Symbolic:**
    - Sets constraints on the PC (Program Counter) register.
    - Executes symbolic execution.

### Relationship between SymGDB Classes
- **Supported Commands:**
  - **Command:** `symbolize argv`
    - **Option:** `memory [address] [size]`
    - **Functionality:** Makes the specified memory region symbolic.
  - **Command:** `target address`
    - **Option:** None
    - **Functionality:** Sets the target address for symbolic execution.
  - **Command:** `triton`
    - **Option:** None
    - **Functionality:** Runs symbolic execution.
  - **Command:** `answer`
    - **Option:** None
    - **Functionality:** Prints the symbolic variables.
  - **Command:** `debug symbolic gdb`
    - **Option:** None
    - **Functionality:** Displays debug messages.

## Symbolic Execution Process in GDB
- **Steps:**
  - Use `gdb.execute("info registers", to_string=True)` to get the current register values.
  - Use `gdb.selected_inferior().read_memory(address, length)` to read memory content.
  - Set the concrete memory and register values in Triton using `setConcreteMemoryAreaValue` and `setConcreteRegisterValue`.
  - For each instruction, use `isRegisterSymbolized` to check if the PC register is symbolic.
  - Set the target address as a constraint.
  - Call `getModel` to obtain the results.
  - Use `gdb.selected_inferior().write_memory(address, buf, length)` to inject the results back into the debugged program state.

## Symbolic Environment: Symbolic `argv`
- **Using `info proc all` to get the stack start address.**
- **Examining memory content from the stack start address:**
  - **argc:** Argument counter (integer)
  - **argv[0]:** Program name (pointer)
  - **argv[1]:** First program argument (pointer)
  - **...**
  - **argv[argc-1]:** End of arguments (null)
  - **env[0]:** First environment variable (pointer)
  - **...**
  - **env[n]:** End of environment variables (null)

## Debug Tips
- **Simplification Example:**
  - [Triton Simplification Example](https://github.com/JonathanSalwan/Triton/blob/master/src/examples/python/simplification.py)

## Demos
- **Examples:**
  - **Crackme Hash:**
    - **Source:** [crackme_hash.cpp](https://github.com/illera88/Ponce/blob/master/examples/crackme_hash.cpp)
    - **Description:**
      - The program passes `argv[1]` to a check function.
      - In the check function, `argv[1]` is XORed with a fixed string.
      - If the sum of the XOR result equals `0xABCD`, the program prints "Win"; otherwise, it prints "Fail".
  - **Crackme XOR:**
    - **Source:** [crackme_xor.cpp](https://github.com/illera88/Ponce/blob/master/examples/crackme_xor.cpp)
    - **Description:**
      - The program passes `argv[1]` to a check function.
      - In the check function, `argv[1]` is XORed with `0x55`.
      - If the XOR result does not match a fixed string, the program returns 1 and prints "Fail". Otherwise, it continues to the next loop.
      - If the program completes all loops, it returns 0 and prints "Win".

## GDB Commands
- **Combined with Peda:**
  - **Demo Video:** Same as the crackme hash demo.
  - **Commands:**
    - Use `find` (Peda command) to find the address of `argv[1]`.
    - Use `symbolize memory argv[1]_address argv[1]_length` to make `argv[1]` memory symbolic.

## Conclusion
- **Benefits:**
  - GDB provides essential information, saving effort.
  - The SymGDB plugin operates independently from the debugged program, except when injecting results.
  - With tracer support (e.g., GDB), concolic execution is possible.

## Concolic Execution
- **Definition:**
  - Concolic = Concrete + Symbolic
  - Uses both symbolic variables and concrete values.
  - Faster than full emulation, as it directly derives states from real CPU context.

## Drawbacks of Triton
- **Limitations:**
  - Does not support the GNU C library.
  - **Reason:**
    - SMT semantics supported: [SMT Semantics Supported](https://triton.quarkslab.com/documentation/doxygen/SMT_Semantics_Supported_page.html)
    - Triton needs to implement system call interfaces to support the GNU C library (i.e., support "int 0x80").
  - Manual state traversal is required.

## Comparison with Other Symbolic Execution Frameworks
- **KLEE:**
  - **Description:**
    - A symbolic virtual machine built on top of the LLVM compiler infrastructure.
    - **Website:** [KLEE](http://klee.github.io/)
    - **GitHub:** [KLEE GitHub](https://github.com/klee/klee)
    - **Paper:** [KLEE Paper](http://llvm.org/pubs/2008-12-OSDI-KLEE.pdf)
    - **Main Goals:**
      1. Hit every line of executable code in the program.
      2. Detect dangerous operations.
  - **Usage:**
    - KLEE generates test cases by compiling source code to LLVM bitcode.
    - **Steps:**
      - Replace input with KLEE functions to make memory regions symbolic.
      - Compile the source code to LLVM bitcode.
      - Run KLEE.
      - Get test cases and path information.

## Example: `get_sign.c`
```c
#include <stdio.h>

int get_sign(int x) {
  if (x == 0) return 0;
  if (x < 0) return -1;
  else return 1;
}

int main() {
  int a;
  klee_make_symbolic(&a, sizeof(a), "a");
  return get_sign(a);
}
```

## Diagram
1. Step the program until it meets a branch.
2. If all operands are concrete, return a constant expression. Otherwise, record the current condition constraints and clone the state.
3. Step the states until they hit an exit call or error.

**Constraints:**
- `X == 0`
- `X != 0`