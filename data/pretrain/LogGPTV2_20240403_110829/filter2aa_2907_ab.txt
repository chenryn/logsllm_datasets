•  User)could)restart)symbolic)execution)from)breakpoint)
Flow 
•  Get)debugged)program)state)by)calling)GDB)Python)API)
•  Get)the)current)program)state)and)yield)to)triton)
•  Set)symbolic)variable)
•  Set)the)target)address)
•  Run)symbolic)execution)and)get)output)
•  Inject)back)to)debugged)program)state)
SymGDB System Structure
Implementation of System Internals 
•  Three)classes)in)the)symGDB)
•  Arch(),)GdbUtil(),)Symbolic())
•  Arch())
•  Provide)different)pointer)sizeregister)name)
•  GdbUtil())
•  Read)write)memoryread)write)register)
•  Get)memory)mapping)of)program)
•  Get)filename)and)detect)architecture)
•  Get)argument)list)
•  Symbolic())
•  Set)constraint)on)pc)register)
•  Run)symbolic)execution)
Relationship between SymGDB classes 
Supported Commands 
Command)"
Option))))))))))"
Functionality))))))))))"
symbolize)
argv)
memory)[address][size]) Make)symbolic)
target)
address)
Set)target)address)
triton)))
None)
Run)symbolic)execution)))
answer)
None)
Print)symbolic)variables)
debug)
symbolic)
gdb)
Show)debug)messages)
Symbolic Execution Process in GDB 
•  gdb.execute("info"registers","to_string=True)"to)get)registers)
•  gdb.selected_inferior().read_memory(address,"length)"to)get)memory)
•  setConcreteMemoryAreaValue)and)setConcreteRegisterValue)to)set)
triton)state)
•  In)each)instruction,)use)isRegisterSymbolized)to)check)if)pc)register)is)
symbolized)or)not)
•  Set)target)address)as)constraint)
•  Call)getModel)to)get)answer)
•  gdb.selected_inferior().write_memory(address,"buf,"length)"to)inject)back)
to)debugged)program)state)
Symbolic Environment: symbolic argv 
•  Using)"info)proc)all")to)get)stack)
start)address)
•  Examining)memory)content)from)
stack)start)address)
•  argc)
•  argv[0])
•  argv[1])
•  ……)
•  null)
•  env[0])
•  env[1])
•  ……)
•  null)
argc
argument)counter(integer)
argv[0]
program)name)(pointer)
argv[1]
program)args)(pointers)
…
argv[argc-1]
null
end)of)args)(integer)
env[0]
environment)variables)(pointers)
env[1]
…
env[n]
null
end)of)environment)(integer)
Debug tips 
•  Simplify:)
https://github.com/JonathanSalwan/Triton/blob/master/src/
examples/python/simplification.py)
Demo
•  Examples)
•  crackme)hash)
•  crackme)xor)
•  GDB)commands)
•  Combined)with)Peda
crackme hash 
•  Source:)
https://github.com/illera88/Ponce/blob/master/examples/
crackme_hash.cpp)
•  Program)will)pass)argv[1])to)check)function)
•  In)check)function,)argv[1])xor)with)serial(fixed)string))
•  If)sum)of)xored)result)equals)to)0xABCD)
•  print)"Win")
•  else)
•  print)"fail")
crackme hash 
crackme hash
crackme hash
crackme xor 
•  Source:)
https://github.com/illera88/Ponce/blob/master/examples/crackme_xor.cpp)
•  Program)will)pass)argv[1])to)check)function)
•  In)check)function,)argv[1])xor)with)0x55)
•  If)xored)result)not)equals)to)serial(fixed)string)))
•  return)1)
•  print)"fail")
•  else)
•  go)to)next)loop)
•  If)program)go)through)all)the)loop))
•  return)0)
•  print)"Win")
crackme xor
crackme xor
crackme xor 
GDB commands 
GDB commands 
Combined with Peda 
•  Same)demo)video)of)crackme)hash)
•  Using)find(peda)command))to)find)argv[1])address)
•  Using)symbolize)memory)argv[1]_address)argv[1]_length)to)symbolic)
argv[1])memory)
Combined with Peda 
Conclusion
•  Using)GDB)as)the)debugger)to)provide)the)information.)Save)you)the)
endeavor)to)do)the)essential)things.)
•  SymGDB)plugin)is)independent)from)the)debugged)program)except)if)
you)inject)answer)back)to)it.)
•  With)the)tracer)support(i.e.)GDB),)we)could)have)the)concolic)
execution.
Concolic Execution
•  Concolic)=)Concrete)+)Symbolic"
•  Using)both)symbolic)variables)and)concrete)values)
•  It)is)fast.)Compare)to)Full)Emulation,)we)don’t)need)to)evaluate)
memory)or)register)state)from)SMT)formula,)directly)derived)from)
real)CPU)context.
Drawbacks of Triton 
•  Triton)doesn't)support)GNU)c)library)
•  Why?)
•  SMT)Semantics)Supported:)
https://triton.quarkslab.com/documentation/doxygen/
SMT_Semantics_Supported_page.html)
•  Triton)has)to)implement)system)call)interface)to)support)GNU)c)
library)a.k.a.)support)"int)0x80")
•  You)have)to)do)state)traversal)manually.)
Comparison between other symbolic 
execution framework 
•  KLEE)
•  Angr)
KLEE 
•  Symbolic)virtual)machine)built)on)top)of)the)LLVM)compiler)
infrastructure)
•  Website:)http://klee.github.io/)
•  Github:)https://github.com/klee/klee)
•  KLEE)paper:)http://llvm.org/pubs/2008-12-OSDI-KLEE.pdf)(Worth)
reading)))
•  Main)goal)of)KLEE:)
1.  Hit)every)line)of)executable)code)in)the)program)
2.  Detect)at)each)dangerous)operation)
Introduction 
•  KLEE)is)a)symbolic)machine)to)generate)test)cases.)
•  In)order)to)compiled)to)LLVM)bitcode,)source)code)is)needed.)
•  Steps:)
•  Replace)input)with)KLEE)function)to)make)memory)region)symbolic)
•  Compile)source)code)to)LLVM)bitcode)
•  Run)KLEE)
•  Get)the)test)cases)and)path's)information)
get_sign.c 
#include))
int)get_sign(int)x)){)
))if)(x)==)0))
)))))return)0;)
if)(x))
int)get_sign(int)x)){)
))if)(x)==)0))
)))))return)0;)
if)(x))
int)get_sign(int)x)){)
))if)(x)==)0))
)))))return)0;)
if)(x)<)0))
)))))return)-1;)
))else))
)))))return)1;)
}
int)main()){)
))int)a;)
))klee_make_symbolic(&a,)sizeof(a),)"a");)
))return)get_sign(a);)
}
Diagram 
1.  Step)the)program)until)it)
meets)the)branch)
2.  If)all)given)operands)are)
concrete,)return)constant)
expression.))If)not,)record)
current)condition)constraints)
and)clone)the)state)
3.  Step)the)states)until)they)hit)
exit)call)or)error)
X==0)
Constraints:)
X!=0)