This records the struct sockaddr pointer when the syscall begins from args->uservaddt, along with
a timestamp, so that these details can be fetched on the syscall exit. The sockaddr struct contains
the connection details, but it must first be recast to the IPv4 sockaddr_in or the IPv6 sockadd_in6
based on the sin_family member. A table of error codes that map to descriptions for connect(2) is
used, based on the descriptions in the connect(2) man page.
The port number is flipped from network to host order using bitwise operations.
---
## Page 459
422
Chapter 10 Networking
10.3.5
soaccept
soaccept(8)°* shows IP protocol socket accepts. For example:
Attaching 6 probes..
+ soacoept.bt
PID
Java
PROCESS
FAM ACDRESS
65062 Success
FORT RESULT
4225
100,85.215,60
4225
Java
100.85.54.16
11742 Success
4225
Java
2 
18500 Success
4225
Java
2
100.85.209,40
20150 Success
4225
Java
2 
100,82.21.89
27278 Succe.58
4225
Javs
100.85.192,93
32490 Succe55
[.--]
This shows many accepts by Java from different address. The port shown is the remote ephemeral
port. See the later tcpacept(8) tool for showing both endlpoint ports. The columns are:
• PID: Process ID calling connect(2)
 COMM: Process name calling connect(2)
• FAM: Address family number (see the description in Section 10.3.2)
=ADDRESS: IP address
• PORT: Remote port
 RESULT: Syscall error status
This works by instrumenting the accept(2) syscall tracepoint. As with soconnect(8), this occurs
in process context, so you can reliably identify who is making these accept(8) calls. These are
also relatively low frequency compared to packets and other events, and the overhead should be
negligible.
The source to soaccept(8) is:
#1/usx/local/bin/bpEtrace
#1nclude 
include 
BEGIN
printf (*6s 16s rAx 16s =5s s\n*, *10*, *rR0cEss*,
*ADORESS","FORT*,"RESULT") ;
 / / accept (2) bas more details:
14 0rigin: I created this for the 2011 DTrace book [Gregg 11] and created this bpftrace version on 13-Apr-201.9
---
## Page 460
10.3 BPF Tools
423
_sseoons。 - [0]aa7139g
Bex2str [EBADF] = "Invalid sockfd*;
qdaoe o uo - [va a3g
BezrZstr ENoMEN] - *out of menoxy*:
Berr2str [EFAULt] = *Sock struct addr invalid*;
pTTenuT sbxY =[Y1a xszxx98
Berr2str [ENFIlE] = *Systen FD linit*;
fg1TUTT 0a sse0oxd。 = [3TIaH3lx1szxaeg
Berr2str [EPRoro] = *Protocol error*:
a*x008 e 10u 1u = [x20s1083 x1s2xx98
Berr2str [EOPNOrSUPP] - *Not SOCK_STREAM*;
 (sa080N3) ouaN, - [sa0803|2a71398
tracepoint:syacalls:sys_enter_accept,
tracepoint:syscalls:sys_enter_accept4
Bsockaddr [tid] = args->upeer_sockaddr;
tracepoint:syscalls:sys_exit_accept,
tracepointisyscallsisys_exit_accept
/Bsockaddr [t1d]/
[pta]appesoos8(+ xppeoos 1onxs) = es$
if ($sa->sa_family == AF_IMET 11 $sa->ss_family == AE_INET6) 
printf (*s=6d 16s 3d *, pid, conm, Saa=>sa_fanLly1 
$error = args->ret > 0 ? 0 : - args->ret
if ($sa=>sa_fanily == AF_INET) 
$s = (stzuct sockaddr_in *)Bsockaddr[tld];
port = ($s->sin_port >> 8) 1
[($s=>sin_port sin_addr, s_addz) 
$port, Berr2str($error]):
] else |
$s6 = (struct sockaddr_in6 *)esockaddr[tid] ;
$port = ($s6=>sin6_poxt >> B) 1
[($s6>sin6_port a1n6_addr,1n5_u,u5_addx8) 
$port, Berr2str[$error]) 
delete (@sockadde[tid]) ;
EXD
clear (lerr2str)z clear (§aockaddx) :
This is similar to soconnect(8), processing and recasting the sockaddr on the return of the syscall.
The error code descriptions have been changed, based on the descriptions in the accept(2) man
page.
10.3.6 socketio
socketio(8)1 shows socket I/O counts by process, direction, protocol, and port. Example output:
 socketio.bt
Attach.ing 4 probes...
C
eio[sshd, 13348, vrite, TCP, 49076] : 1
lo zedis=server, 2583, vrite, TCP, 41154]: 5
eio[redis=server, 2583, read, TCP, 41154]: 5
1o[annpd, 1242, read, NETLINK, 0] : 6
eio snmpd, 1242, vrite, METLINK, 0]: f
p1o[systend-reso1ve, 1016, read, UDP, 53[: 52
eio[systend-resolve, 1016, read, UDP, 0] : 52
1o[java, 3929, read, TCP, 6001]: 136T
eio[javs, 3929, ￥rite, TCP, B980]: 24979
p1o[]ava, 3929, read, 7CP, 8980]: 44462
The final line in the output shows that Java PID 3929 performed 44,462 socket reads from TCP
port 89s0 while tracing. The five fields in each map key are process name, process ID, direction,
protocol, and port.
15 0rigin: 1 first created it as socketio.d for the 2011 DTrace book [Gregg 11], and I created the bpfrace version for
this book on 11-Apr-2019.
---
## Page 462
10.3 BPF Tools
425
This works by tracing the sock_recvmsg0 and sock_sendmsg() kernel functions. To explain why I
chose these functions, consider the socket_file_ops struct in net/socket.c:
/ *
8[Tg otaoue6 eqa se Tten se suotaexedo ,tetoeds, I0 1es e sneq soTTg aexoog
ones, These don*t appesr
1n the operatlon structures but are done dizectly via the socketcall(1
multiplexor.
static const struct flle_operations socket_file_ops =
oxner =
nN"SIHa
,1lseek =
no_11seek,
.read_iter =
sock_read_iter,
,vrlte_lter =
sock_xrite_iter,
[...]
This code defines the socket read and write functions as sock_read_iter() and sock_write_iter(),
and I tried tracing them first. But testing with a variety of workloads showed that tracing those
particular functions was missing some events. The block comment in the code excerpt explains
why: There are adlitional special operations that don’t appear in the operation struct, and these
can also perform I/O on sockets. These include sock_recvmsg0 and sock_sendmsg0, called
directly via syscalls or other code paths, including sock_read_iter() and sock_write_iter(). This
makes them a common point for tracing socket I/O.
For systems with busy network I/O, these socket functions may be called very frequently, causing
the overhead to become measurable.
The source to socketio(8) is:
#1/usx/local/bin/bpEtrace
#Include 
kprobe:sock_recmsg
$sock = (atruct socket *)arg0;
$dport = $sock->sk->_sk_common.skc_dport;
$dport =($dport >> B)1sk->_sk_conmon.skc_prot->nane, $dport] -
count (1 
kprobe 1sock_sendnsg
---
## Page 463
426
Chapter 10 Networking
$sock = (struct socket *)arg0;
sdport = $sock->sk=>__sk_common,skc_dport
$dport =($dport >> B)1(($dport sk->_sk_conmon,skc_pzot->nane, $dport] =
count (1 
The destination portis big endian, and is converted to little endian (for this x86 processor) by the
tool before inclusion in the @io map.° This script could be modified to show the bytes transferred
instead of the I/O counts; for an example, see the code in the following tool, socksize(8).
socketio(8) is based on kprobes, which instruments kernel implementation details that may
change, breaking the tool. With much more effort, it would be possible to rewrite this tool using
syscall tracepoints instead. It will be necessary to trace sendto(2), sendmsg(2), sendmmsg(2),
recvfrom(2), recvmsg(2), and recvmmsg(2). For some socket types, such as UNIX domain sockets,
the read(2) and write(2) family of syscalls must also be traced. It would be easier to instrument 
tracepoints for socket I/O instead, however, they do not yet exist.
10.3.7s0cksize
socksize(8)17 shows socket I/O counts and total bytes by process and direction. Example output
from a 48-CPU production edge server:
 socksize.bt
Attach.ing 2 probes. 
°C
pread_bytes [sshd] :
[32, 64)
1186988988 886 88 88988988988988988988 888e88988988980 1
s[java] :
[0]
431 186988
[1]
4 1
[2, 4)
101
[4, 8]
542 1889889
[8, 16}
3445 1eee88e8ee88e88ee8ee8ee8ee8ee88e8ee88e88eee
[16, 32)
2635 1869889889888 8889889889889889898
[32, 64)
[64, 128]
776 1869889889
(95z 8z1]
880880886881916
[256, 512}
3123 18ee88e88e886 88ee8ee8ee8ee8ee88e88e88e 
16 For this to work on big-endian processors, the tool should test for processor endiann
if necessary: for example, by use of #ifdef LTTLE_ENDIAN
1.7 0rigin: I created it for this book on 12-Apr-2019,inspired by my disk I/0 bitesize tool.
---
## Page 464
10.3 BPF Tools
427
[512, 1K)
4199 88888 888886988886 8868686980 1
[1K, 23)
2972 1ee8eee8ee8eeeeee8ee8e888
[2K, 4K)
1863 1869889889886 88898898698
[4K, 8K)
2501 1eeeeeeeeeeee eeeeeeeeeeeeeeeeee
[8K, 16K)
1422 188888888888e8
[16x, 32K]
14818
[32K, 64K]
29 1
x82*x91
61
pxrite_bytes [sshd] : 
[32, 64)
11889889889888 8889889889889889889889888 8889889889899881
xrite_bytes [Java] :
[8, 16}
361
[16, 32)
6 1
[32, 64)
6131 1eee8ee8ee88e 88ee8ee8ee8ee8ee8ee8ee88e88ee8ee8eeeeeee 1
[64, 128]
1382 188988988988
[128, 256}
301
[256, 512}
871
[512, 1K)
16918
[1K, 2K)
52218898
[2K, 4K)
886886886886886888888 88688688 .096
[4K, 8K)
2673 18898898898868889889869
[8K, 16K)
6881 b6c
[16K,32K)
815 189889
[323, 64K)
17518
[64K, 128K)
1 1
[128K, 25 6K)
11
The main application is Java, and both reads and writes show a bimodal distribution of socket
I/O sizes. There could be different reasons causing these modes: different code paths or message
contents. The tool can be modified to include stack traces and application context to answer this.
socksize(8) works by tracing the sock_recvmsg0 and sock_sendmsg0 kernel functions, as does
socketio(8). The source to socksize(8) is:
#1/usx/local/bin/bpEtrace
#1nclude 
include 
kprobe:seck_recvmsg
kprobe 1aock_sen.dnsg
---
## Page 465
428
 Chapter 10 Networking
Bsocket[tid] = arg0
kretprobe1sock_recvmsg
1f(retval= 0) test would seem appropriate; however, retval is not
type-aware: it is a 64-bit unsigned intege, whereas the sock_recvmsg( and sock_sendmsg() func-
tions return a 32-bit signed integer. The solution should be to cast retval to its correct type using
(int.) zetva1, but int casts are not yet available in bpftrace, so the Ox7fff test is a workaround. 1s
More keys can be added if desired, such as the PID, port number, and user stack trace. The maps
:ewuns jo ad1 suauagp e apraosd o (ses o O4sq uong pasueqo aq ose ue)
 socksize.bt
Attaching 2 pzobes...
eread_bytes [sshd] : count 1, average 36, tota] 36
xead_bytea[java]: count 19874, avezage 1584, total 31486578
@xrite_bytes[sshd] : count 1, avezage 36, total 36
exrite_bytes [Java] : count 11061, average 3741, tota] 41379939
18 bpftrace int casts have been prototyped by Bss Smit, and should be
erged soor
n. See bpftrace PR #772
---
## Page 466
10.3 BPF Tools
429
This shows the number of I/O (*count°), the average size in bytes (°average°), and the total
throughput in bytes (° total°). During tracing, Java wrote 41 Mbytes.
10.3.8
sormem
tunable limit, as histograms. If the receive queue exceeds the limit, packets are dropped, causing
performance issues. For example, running this tool on a production edge server:
 sornem.bt
Attach.ing 4 probes..
Tracing socket receive buffer size. Hit Ctxl-C to end.
C
?rmem_sl1oc1
[0]
72870 1e8e88e88e88e88ee8ee8ee8ee8ee88e88
[1]
0 1
[2, 4)
01
[4, 8]
0 1
[B, 16}
D 1
[16, 32]
0 1
[32, 64)
0 1
[64, 128]
0 1
(95z *8z1]
[256, 512}
0 1
[512,1K)
11383l 1eeeeeeeeee 88eeeee8eeeeeeeeeeeeeee 88eeeee8eeeeeee1
[1K,2K)
1131
[2K, 4K)
105|
[4K, 8K)
[BB, 16K]
26726 1889889889888
[16K,
32K)
58028189898888688869698
(x9*x21
880886886886081 9501C
[64K, 128K)
15039 1889889
[128K, 256K]
0881 2699
[256K, 512K)
169
[512K,18]
91 1
[1M, 2M)
451
[2M, 4H)
BD 1
prnen_linit:
[64K, 128K)
1444718
[128K, 256K]
262 1
n 14-Apr-2019
---