# 优化后的文本

## 代码片段
```assembly
0x4443, %ax
$0x10, %eax
$0x4241, %ax
0x80600a4, %eax
```

## 地址和跳转
- `jmp 0x8078177`
- `jmp 0x807838d`

## PLT 和 GOT 表
### PLT
- `0x80497d8`
- `0x80497e8`

### GOT
- `0x80600a4`: `0xf3b67045`
- `0x80600a8`: `0x87489732`

## 图 7. 启用 GOT 加密保护的示例易受攻击进程布局

### 1. 攻击自动化
为了评估，我们实现了一个原型工具 SARATOGA，该工具可以自动分析 ELF-32 或 ELF-64 可执行文件（分别对应 x86 和 x86-64 架构），检测程序是否容易受到这两种攻击变体中的任何一种，并生成可用于利用程序漏洞的堆栈配置。SARATOGA 使用 Shacham 等人提出的算法 [10] 来查找可执行文件中的代码块。SARATOGA 通过我们开发的一种自定义算法组合可用的代码块。该算法是目标导向和基于规则的。给定一个允许解引用或覆盖 GOT 条目的代码块，算法为每个可能的使用分配预定值（例如，指令中的源操作数）。算法使用一组组合规则并尝试递归应用它们来组合可用的代码块以执行所需的赋值。如果存在多种组合可能性，算法会选择占用较少堆栈空间的组合。SARATOGA 的输出是一个包含用于利用的 gadgets 的堆栈配置。

### 2. 利用实际漏洞
我们针对 Ghostscript 的一个易受攻击版本 [16] 测试了我们的攻击。我们首先开发了一个传统的 exploit 并在禁用了 W⊕X 和 ASLR 的情况下进行了测试。exploit 正常工作并为我们提供了 shell。随后，我们启用了这两种保护措施并验证了 exploit 不再有效。我们在被攻击程序的镜像上运行 SARATOGA，并在几秒钟内获得了两种攻击变体的堆栈配置。我们使用 SARATOGA 提供的结果构建了两个 exploit，并成功地利用了漏洞并在这两种情况下都获得了 shell。

### 3. 攻击的广泛适用性
评估针对以下发行版的 `/bin`、`/sbin`、`/usr/bin` 和 `/usr/sbin` 目录中的可执行文件：GNU/Debian “Squeeze” (x86)、GNU/Debian “Lenny” (x86-64)、Fedora “Cambridge” (x86) 和 OpenBSD 4.5 (x86-64)。对于每个发行版中找到的所有可执行文件，我们只选择了代码大小大于 20Kb 的那些进行评估。原因是过小的可执行文件功能有限且很少吸引攻击者。相反，常见的攻击目标（如 Ghostscript、Samba、Apache）通常更大，达到数十或数百千字节。

评估结果见表 II。对于每个发行版，表格报告了分析的可执行文件总数、位置依赖型可执行文件的百分比、具有可写 GOT 的可执行文件的百分比、易受 GOT 解引用攻击的可执行文件的百分比、易受 GOT 覆盖攻击的可执行文件的百分比以及易受任一攻击变体的可执行文件的百分比。所有三个测试的 Linux 发行版都支持 PIE 和不可写 GOT。不幸的是，我们的结果显示这些缓解技术尚未广泛应用。如表所示，大多数 x86 可执行文件至少易受这两种攻击变体之一的影响。第二种变体的应用范围更广，因为所需的代码块更为常见。虽然对 x86-64 可执行文件的攻击效果较差，但仍有超过一半的测试可执行文件易受攻击。除了 OpenBSD 可执行文件（其中 PIE 不可用），其他发行版中的所有可执行文件如果启用 PIE 就不会易受攻击。此外，考虑到易受 GOT 解引用攻击的程序数量远少于至少易受任一攻击变体影响的程序数量，只读 GOT 保护将带来不可忽视的好处。

值得注意的是，在易受我们攻击的可执行文件中发现的漏洞可能无法被利用。例如，漏洞可能没有暴露足够大的堆栈部分，或者可能不提供所需的堆栈操作（例如注入空字节）。这些情况并不被视为我们攻击的限制，而是漏洞本身的限制。

## 表 II. X86 和 X86-64 可执行文件上的攻击有效性实验评估

| 发行版 | 非 PIE | 可写 GOT | 攻击 1 | 攻击 2 | 任一攻击 |
|--------|--------|----------|--------|--------|----------|
| Debian (x86) | 333 | 97.3% | 100% | 17.8% | 57.4% | 58.3% |
| Debian (x86-64) | 509 | 95.7% | 99.8% | 64.0% | 96.1% | 96.3% |
| Fedora (x86) | 174 | 100% | 100% | 58.6% | 68.4% | 68.4% |
| OpenBSD (x86-64) | 590 | 85.8% | 99.0% | 49.5% | 95.0% | 95.0% |

## 表 III. PIE 和我们保护引入的开销（比较基准是非 PIE 可执行文件）

| 应用程序 | PIE 开销 | 加密 GOT 开销 |
|----------|-----------|----------------|
| bc | 10.55% | 0.21% |
| bogofilter | 3.46% | 15.49% |
| bzip2 | 0% | 0.63% |
| clamscan | 0.12% | 0.11% |
| convert | 0% | 1.41% |
| grep | 0.32% | 4.54% |
| oggenc | 0.16% | 0.12% |
| tar | 0.02% | 0.20% |
| 平均 | 1.98% | 2.69% |

## B. 拟议防御的评估
我们评估了我们提出的加密 GOT 保护的有效性和其带来的开销。结果显示，该解决方案能有效地阻止两种攻击变体，并且运行时开销很小（约为 2.69%）。

为了评估拟议缓解策略的有效性，我们测试了在有我们的 GOT 保护、W⊕X 和 ASLR 启用的情况下，使用我们的工具构建的两个 exploit 对易受攻击版本的 Ghostscript 的效果。两个 exploit 均未成功，易受攻击的进程因访问无效内存页而终止，导致页面错误异常。

我们评估了我们保护引入的开销，并与 PIE 引入的开销进行了比较。评估中使用的应用程序包括：bc、bogofilter、bzip2、clamscan、convert、grep、oggenc 和 tar。这些应用程序是 CPU 密集型的，并频繁使用共享库中的函数。实验在一个运行 GNU/Linux 2.6.27 的 x86 系统上进行。由于我们的保护完全在用户空间中运行，因此对于每个应用程序，我们测量了完成批处理作业所需的用户时间，平均多次运行的结果，并在三种不同配置下进行：(I) 使用默认选项编译的位置依赖型可执行文件，(II) 使用默认选项作为 PIE 编译的可执行文件，(III) 使用第一个版本的可执行文件但启用了我们的运行时保护。表 III 报告了每个应用程序的开销和平均值。表中的百分比表示相对于配置 (I) 的用户时间增量。从这些结果中我们可以得出两个主要结论。首先，PIE 引入的平均开销非常小，为 1.98%，最大为 bc 的 10.55%，并且可以通过更激进的编译器优化（例如省略帧指针）进一步减少。其次，我们的加密 GOT 保护引入的开销也非常小，与 PIE 引入的开销相当。观察到的平均开销为 2.69%，最大为 bogofilter 的 15.49%，后者以非常高的频率调用库函数。这种小开销意味着我们的保护可以在最终用户和生产系统中实际采用。

## VI. 相关工作
自从传统的栈溢出利用技术首次披露 [17] 以来，已经发明了许多其他利用技术，并发现了许多类型的漏洞。与我们工作最相关的技术已经在论文的主要部分详细介绍了。需要提及的最重要漏洞包括堆溢出 [18]、格式字符串漏洞 [19] 和整数溢出 [20]。

我们注意到防止内存错误利用的技术也在平行发展。在第四章中，我们讨论了与我们工作相关的几种主要攻击缓解策略，如 W⊕X、ASLR、各种 ASRL 扩展保护和 GOT 保护。除此之外，还提出了其他方法。StackGuard [21] 是一种编译时解决方案，通过在函数的局部变量和返回地址之间放置 canary 值来保护程序免受栈溢出攻击。canary 用于检测栈的损坏。ProPolice 扩展了 StackGuard，通过重新排序函数和局部变量并将代码指针重新定位到危险缓冲区之前的栈项中，以阻止覆盖 [22]。PointGuard 使用加密来保护指针 [23]。正如我们提议的 GOT 保护一样，指针在解引用时解密。StackShield 使用影子栈保存返回地址，并检查函数返回时它们是否被篡改。有关传统缓解技术的综述，请参阅 [24]。

另一种完全不同的检测内存损坏的方法是 N-Variant 系统 [25]。其思想是使用 ASLR 运行 n 个具有不同内存布局的同一程序实例。任何成功的攻击只能在一个实例上起作用，并会导致其他所有实例崩溃，因为攻击必须针对特定的进程布局。这个想法在 [26] 中得到了进一步扩展。

## VII. 结论
我们提出了一种针对栈溢出漏洞的新攻击，绕过了两种最广泛采用的保护技术，即写或执行 (W⊕X) 和地址空间布局随机化 (ASLR)。通过我们的攻击，可以从易受攻击进程的地址空间中提取加载库的随机基地址信息，然后使用这些信息进行 return-to-lib(c) 攻击。与基于暴力破解且需要与地址空间大小成比例的尝试次数的现有攻击相比，使用我们的攻击可以在一次尝试中攻破易受攻击的程序。我们分析了不同 UNIX 发行版中的可执行文件，并观察到大多数程序都容易受到攻击。我们还分析了可以与 W⊕X 和 ASLR 结合使用的几种现有保护措施。我们的发现是，只有当 ASLR 与位置独立可执行文件 (PIE) 结合使用时，才能有效抵御我们的攻击。不幸的是，后一种方法尚未普及，并且需要重新编译。我们提出了一种新的运行时保护，无需重新编译程序即可阻止我们的攻击，并且引入的开销很小。

## 参考文献
[1] E. H. Spafford, “The Internet Worm Program: an Analysis,” SIGCOMM Computer Communication Review, vol. 19, no. 1, pp. 17–57, 1989.
[2] The PaX Team, “PaX non-executable pages.” [Online]. Available: http://pax.grsecurity.net/docs/noexec.txt
[3] ——, “Address space layout randomization.” [Online]. Available: http://pax.grsecurity.net/docs/aslr.txt
[4] H. Shacham, M. Page, B. Pfaff, E. Goh, N. Modadugu, and D. Boneh, “On the Effectiveness of Address-Space Randomization,” in Proceedings of the 11th ACM Conference on Computer and Communications Security (CCS), 2004, pp. 298–307.
[5] S. Designer, “”return-to-libc” attack,” Bugtraq, 1997.
[6] “grsecurity.” [Online]. Available: http://grsecurity.net
[7] A. van de Ven, “New Security Enhancements in Red Hat Enterprise Linux v.3, update 3,” Aug. 2004.
[8] T. Durden, “Bypassing PaX ASLR protection,” Jul. 2002.
[9] S. Krahmer, “x86-64 buffer overflows exploits and the borrowed code chunks exploitation technique,” 2005.
[10] H. Shacham, “The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86),” in Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS), Oct. 2007, pp. 552–561.
[11] J. Levine, Linkers and Loaders. Morgan Kaufmann, 2000.
[12] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Address Obfuscation: an Efficient Approach to Combat a Broad Range of Memory Error Exploits,” in Proceedings of the 12th USENIX Security Symposium, 2003, pp. 105–120.
[13] J. Xu, Z. Kalbarczyk, and R. Iyer, “Transparent Runtime Randomization for Security,” University of Illinois at Urbana-Champaign, Tech. Rep. UILU-ENG-03-2207, May 2003.
[14] “GNU binutils,” http://www.gnu.org/software/binutils/.
[15] S. Bhatkar, R. Sekar, and D. C. DuVarney, “Efficient Techniques for Comprehensive Protection from Memory Error Exploits,” in Proceedings of the 14th USENIX Security Symposium, Aug. 2005.
[16] CVE-2008-0411, “Ghostscript zseticcspace() Function Buffer Overflow Vulnerability.”
[17] Aleph One, “Smashing The Stack For Fun And Profit,” Phrack Magazine, vol. 7, no. 49, 1996.
[18] Michel Kaempf, “Smashing The Heap For Fun And Profit,” Phrack Magazine, vol. 11, no. 57, 2001.
[19] Scut, Team Teso, “Exploiting Format String Vulnerabilities,” March 2001.
[20] blexim, “Basic Integer Overflows,” Phrack Magazine, vol. 11, no. 60, 2002.
[21] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton, “StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks,” in Proceedings of the 7th USENIX Security Symposium, 1998, pp. 63–78.
[22] H. Etoh, “GCC extension for protecting applications from stack-smashing attacks (ProPolice),” 2003. [Online]. Available: http://www.trl.ibm.com/projects/security/ssp/
[23] C. Cowan, S. Beattie, J. Johansen, and P. Wagle, “PointGuard: Protecting Pointers from Buffer Overflow Vulnerabilities,” in Proceedings of the 12th Usenix Security Symposium, 2003.
[24] C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole, “Buffer overflows: Attacks and defenses for the vulnerability of the decade,” in Proceedings of the DARPA Information Survivability Conference and Exposition, Jan. 2000, pp. 11–19.
[25] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. Davidson, J. Knight, A. Nguyen-Tuong, and J. Hiser, “N-Variant Systems: A Secretless Framework for Security through Diversity,” in Proceedings of the 15th USENIX Security Symposium, 2006, pp. 105–120.
[26] D. Bruschi, L. Cavallaro, and A. Lanzi, “Diversified Process Replicae for Defeating Memory Error Exploits,” in Proceedings of the 3rd International Workshop on Information Assurance, 2007, pp. 434–441.