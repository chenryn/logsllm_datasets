specify requirements of the overall system—
in this case, computer systems and the glob-
al Internet infrastructure.  Only then can we
hope to demonstrate vigorously that the plat-
form architecture satisﬁes or contributes to
the satisfaction of the overall requirements,
and that the platform’s actual implementation
satisﬁes the architecture’s design requirement.  
Unfortunately, neither of these two cru-
cial steps is feasible for security today. The
shape and the characteristics of the nation-
al (or global) system infrastructure are evolv-
ing rapidly. Consequently, such widely used
terms as “Internet security” cannot capture
the essence of the trustworthiness required
of such an infrastructure. (Admittedly, such
terms  were  not  very  helpful  in  the  past,
either.) Moreover, though formal methods
have been used successfully to verify some
hardware devices, they are not sufﬁciently
advanced to address correctness issues of
large-scale software systems.
Given this state of affairs, we must use an
alternative (albeit less scientiﬁc and idealis-
tic) set of criteria to examine platform trust-
worthiness.    From  an  industrial  point  of
view, such criteria must include the follow-
ing considerations:
400
(cid:129) Usability—To  be  ubiquitous  and
accepted in the marketplace, the plat-
form must be easy to use for building
small-  and  large-scale  systems  and
applications.
(cid:129) Simplicity—To inspire conﬁdence in its
correctness, the platform cannot be too
complex to analyze (by code inspection
or testing, for example) for critical prop-
erties.
(cid:129) Adequacy—The platform must contain
all  essential  features  and  building
blocks for supporting higher-level trust-
worthiness (security) requirements.
(cid:129) Adaptability—The  platform  must
evolve with ease, following demand
and market reality.
Judged by these (perhaps biased) criteria,
Java scores very favorably compared with
other existing languages and programming
systems. In particular, Java’s platform inde-
pendence greatly reduces the complexity—
and  thus  the  probability  of  design  and
implementation errors—of dealing with het-
erogeneous environments. The “write once,
run  everywhere”  philosophy  also  helps
improve availability.
Moreover,  the  encouragement  to  write
code exclusively in Java (Sun’s “100% pure
Java” initiative) is highly desirable because it
forces all security controls to go through the
Java Virtual Machine. This raises the chances
of putting the necessary protection mecha-
nisms in place and getting them (almost)
right. Other popular platform systems, such
as  MS-DOS/Windows,  typically  require
native methods with direct access to raw
system resources and devices. This makes
retroﬁtting nonbypassable protection mech-
anisms  with  backward  compatibility  an
almost insurmountable task.7,8
This article introduces Java’s existing secu-
rity features and the way they contribute to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:50 UTC from IEEE Xplore.  Restrictions apply. 
its overall usability, simplicity, adequacy, and adaptability in
the global computing arena. It also discusses JavaSoft’s plans
to make new features available as the technology evolves.  
The sandbox security model
The original security model that Java provides is known as
the sandbox, a very restricted environment in which to run
untrusted code (applets) obtained from the open network.
The essence of the sandbox model is that a computer entrusts
local code with full access to vital system resources (such as
the file system). It does not, however, trust downloaded
remote code, which can access only the limited resources
provided inside the sandbox.
We have deployed the sandbox model through the Java
Development Toolkit (JDK, the current version as of May 1997
is 1.1.2), and applications built with JDK generally adopt it.  
JDK enforces overall security through a number of mech-
anisms. First, the language is designed to be type safe1 and
easy to use.  The hope is that the burden on programmers
is such that they are less likely to make subtle mistakes than
they would using other programming languages such as C
or C++.
Second, compilers and a bytecode verifier ensure that
applications built with JDK execute only legitimate Java code.  
Moreover, a class loader deﬁnes a local name space and
ensures that an untrusted applet cannot interfere with the
operation of other Java programs.
Finally, the Java Virtual Machine mediates access to cru-
cial system resources, and a SecurityManager class checks
and restricts untrusted code’s actions to the bare minimum.  
The actual implementation of the Java language and the
runtime system is likely to contain bugs, at least for some
time, just as any large-scale software system would. This is
clearly manifested in the discovery of some well-known
bugs, perhaps most prominently those found by the research
team at Princeton University.9
Evolving the sandbox model
As Java gains popularity among users and developers,
requests for various security features have been ﬂowing in.
Among these are support for enabling ﬂexible and conﬁg-
urable security policies, support for cryptographic capabili-
ties, security protocols for network-based authentication and
secure communication, and easy-to-use administration tools.
Starting with JDK 1.1, JavaSoft will provide general Java
users and developers with a series of security features meet-
ing customer requirements.
Applet signing. A prominent new security feature in JDK
1.1 is built-in support for applet signing. Using this feature,
applet writers can digitally sign applets using their signature
keys. The person viewing the applet can use a known public
key to verify that the applet is correctly signed and then choose
to accept the applet as trusted. This will enable the trusted
applet to run as if it were local code. JDK 1.1 contains the nec-
essary tools for code signing, including support for digital sig-
natures, message digest, and certiﬁcate manipulation.
New architectural directions. The design of an overall
Java security architecture is constrained in a number of ways.
It must be backward compatible, but also ﬂexible enough
401
JavaOS
HotJava
Java Web
Server
JECF
JMAPI
Network
file
system
clients
Access
control
list
GUI
Servlet
admin.
Gate
object
Login
protocol
Authorization/
delegation
SSL/
SKIP
Code
signing
SSL/
SKIP
JDK
Protection
domain
Access
control
Signature
certification
Class loader/manager
DES/3DES
RSA/D-H
IDEA, etc.
Nonexportable encryption extension
Figure 1. Overall architecture. JECF: Java Electronic
Commerce Framework; JMAPI: Java Management API.
to accommodate rapidly emerging technologies based on
Java. It must function across a wide range of platforms. These
include JavaOS, which is a Java-based operating system that
runs directly on naked hardware, as well as native host sys-
tems such as Microsoft Windows and MacOS.
Figure 1 shows the relationships between various Java
components.
It is natural that JDK should serve as the base platform for
delivering security technologies to Java-based solutions.
Future releases of JDK will deliver at least the following secu-
rity features:
(cid:129) Basic language safety features (type safety, bytecode
veriﬁer, class loader);
(cid:129) Essential cryptographic primitives (MD5, SHA-1, DSA,
X.509, DES, triple-DES);
(cid:129) Fundamental  system  security  features  (protection
domain, access control, authorization and delegation,
security policy manager); and 
(cid:129) Necessary networking and Web-based security support
(user authentication protocols, code signing, secure
communication protocols such as SSL and SKIP).
Products built on top of JDK may need additional securi-
ty features. For example, the Java Web Server (previously
known as Jeeves) may provide an additional framework for
securely administering servlets, while the HotJava browser
may provide a browser-speciﬁc user interface for conﬁgur-
ing security policies.
This technical architecture is potentially limited by business
considerations such as licensing and exportability. The stan-
dard JDK will be fully exportable under US laws and thus
cannot  include  strong  encryption  technology.  The  Java
Cryptography Extensions will be the vehicle that makes
unexportable technology available to US domestic users.
JavaSoft will publish the API speciﬁcation and documenta-
tion and make them available in accordance with the appro-
priate laws and regulations.
Not shown in Figure 1 is a policy and certiﬁcation facility
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:50 UTC from IEEE Xplore.  Restrictions apply. 
Applications
Java security/cryptography APIs
Per site policy
Sun's
reference
implementation
in Java
Native
code
implementation
Reference
implementation
by
xyz.com
Per user configuration and
per installation configuration
Certificate
authority
Figure 2. Policy conﬁguration.
that helps reduce the complexity of system administration. We
envision that, as illustrated in Figure 2, a site security policy
may override or be a supplement to the user-speciﬁc policy.
A certiﬁcation authority (CA) will assist in policy decisions.
Cryptographic library. We designed the cryptographic
library architecture to allow different service providers to sup-
ply their own, compatible implementations of the same cryp-
Figure 3. Cryptographic support allowing alternative
providers. 
tographic functions. As illustrated in Figure 3, an application
developer programs to a generic security/cryptography API
obtained from JDK or its cryptographic extension package.
Depending on system installation (including the possibil-
ity of dynamic library downloading), the developer may have
a choice among several providers. One of these is Sun’s ref-
erence implementation in Java, which is typically shipped
together with the high-level APIs. Developers can use this
default or choose (by naming) a spe-
ciﬁc provider.
Glossary of cross-platform security
API
AWT
Application program interface, the calling conventions an
application uses to access the operating system and other
services
Abstract Windowing Toolkit, a package for building GUIs in
Java 
bytecode veriﬁer Mechanism to verify that Java language constraints are sat-
class loader
code signing
DES
Difﬁe-Hellman
DSA
JDK
JVM
MD5
SHA-1
SKIP
SSL
TCP/IP
type safety
isﬁed by the class bytecode
Mechanism to dynamically locate and resolve Java classes
Mechanism to ensure code authenticity by signing classes
with digital signatures
Data Encryption Standard, an encryption algorithm, cur-
rently a US federal information-processing standard
A key-agreement mechanism based on exponentiation mod-
ulo a prime number
Digital Signature Algorithm, produces digital signatures
based on arithmetic operations; a federal and NIST standard
Java Development Kit
Java Virtual Machine
A message digest algorithm; for digital signature applica-
tions where a large message must be compressed securely
before being signed; an Internet standard
Secure hash algorithm (revised 1994), developed by NIST
Simple key management for Internet protocols
secure sockets layer, TCP/IP security protocol 
Transmission Control Protocol/Internet Protocol, commu-
nications protocols that connect Internet hosts 
Mechanism to ensure that an object of one type cannot be