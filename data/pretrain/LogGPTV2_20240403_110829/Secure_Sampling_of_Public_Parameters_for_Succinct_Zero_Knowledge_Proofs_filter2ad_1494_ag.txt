0.035 · size(C) ms
n · (depthS(C) + 3)
0.072 · n · size(C) kB
1.03 · n · size(C) ms
Cost for
Example #1
3n + 3
14,124 s
6n
12,877 · n MB
196,208 · n s
Example #2
6n + 6
4,048 s
6n
906 · n MB
50,945 · n s
Fig. 6: Our system’s costs for the general case, Example #1, and Example #2; n is the number of parties.
r
× Fh
→ F(cid:5)
r, the generator does:
computing ( (cid:4)A, (cid:4)B, (cid:4)C, Z) := GetQAP(D) for a suitable
function GetQAP; if D has Nw wires and Ng gates, then
the resulting QAP has size m = Nw and degree d ≈ Ng.
The parameter generator. On input an Fr-arithmetic
circuit D : Fn
r
1) Compute ( (cid:4)A, (cid:4)B, (cid:4)C, Z) := GetQAP(D), and denote
by m and d the QAP’s size and degree; then construct
→ Fd+7m+n+22
an Fr-arithmetic circuit C : F8
r
such that C(τ, ρA, ρB, αA, αB, αC, β, γ) computes the
following outputs:
(cid:2)
1, τ, . . . , τ d,
A0(τ )ρA, . . . , Am(τ )ρA, Z(τ )ρA,
A0(τ )ρAαA, . . . , Am(τ )ρAαA, Z(τ )ρAαA,
B0(τ )ρB, . . . , Bm(τ )ρB, Z(τ )ρB,
B0(τ )ρBαB, . . . , Bm(τ )ρBαB, Z(τ )ρBαB,
C0(τ )ρAρB, . . . , Cm(τ )ρAρB, Z(τ )ρAρB,
C0(τ )ρAρBαC, . . . , Cm(τ )ρAρBαC, Z(τ )ρAρBαC,
(A0(τ )ρA + B0(τ )ρB + C0(τ )ρAρB)β, . . . ,
(Am(τ )ρA + Bm(τ )ρB + Cm(τ )ρAρB)β,
(Z(τ )ρA + Z(τ )ρB + Z(τ )ρAρB)β,
r
(cid:3)
αA, αB, αC, γ, γβ, Z(τ )ρAρB, A0(τ )ρA, . . . , An(τ )ρA
.
2) Sample (cid:4)α in F8
r at random.
3) Compute pp := C((cid:4)α) · G.
4) Output pp.6
B. Example for a SSP-based zk-SNARK
i.e.,
Supported NP relations. This zk-SNARK supports
relations RD =
boolean circuit satisﬁability,
{((cid:4)x, (cid:4)w) ∈ {0, 1}n × {0, 1}h : D((cid:4)x, (cid:4)w) = 0(cid:5)} where
D : {0, 1}n × {0, 1}h → {0, 1}(cid:5) is a boolean circuit.
SSPs.
The construction is based on square span
programs (SSP) [31]: a SSP of size m and degree d
over F is a tuple ( (cid:4)A, Z), where (cid:4)A is a vector of m + 1
≤d−1[z] and Z ∈ F[z] has degree
polynomials in F
exactly d. As shown in [31], each relation RD can
be reduced to a certain relation R
( (cid:6)A,Z), which captures
“SSP satisﬁability”, by computing ( (cid:4)A, Z) := GetSSP(D)
for a suitable function GetSSP; if D has Nw wires and
Ng gates, then the resulting SSP has size m = Nw and
degree d ≈ Nw + Ng.
The parameter generator. On input a boolean cir-
cuit D : {0, 1}n × {0, 1}h → {0, 1}(cid:5), the generator
does the following.
1) Compute ( (cid:4)A, (cid:4)B, (cid:4)C, Z) := GetSSP(D), and denote
by m and d the SSP’s size and degree; then construct
→ Fd+2m+n+9
an Fr-arithmetic circuit C : F3
such
r
that C(τ, β, γ) computes the following outputs:
r
(cid:2)
1, τ, . . . , τ d,
A0(τ ), . . . , Am(τ ), Z(τ ),
(cid:3)
A0(τ )β, . . . , Am(τ )β, Z(τ )β,
γ, γβ, Z(τ ), A0(τ ), . . . , An(τ )
.
We explain how the generator of [31]’s zk-SNARK can
be cast as computing the encoding of a random evaluation
of a certain circuit C that lies in CS.
2) Sample (cid:4)α in F3
r at random.
3) Compute pp := C((cid:4)α) · G.
4) Output pp.7
6The ﬁrst d + 7m + 15 elements in pp form the proving key pk,
while the remaining n + 7 form the veriﬁcation key vk.
7The ﬁrst d + 2m + 5 elements in pp form the proving key pk,
while the remaining n + 4 form the veriﬁcation key vk.
302302
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] S. Goldwasser, S. Micali, and C. Rackoff, “The knowledge
complexity of interactive proof systems,” SIAM J. Comp., 1989.
[2] O. Goldreich, S. Micali, and A. Wigderson, “Proofs that yield
nothing but their validity or all languages in NP have zero-
knowledge proof systems,” JACM, 1991.
[3] M. Bellare and O. Goldreich, “On deﬁning proofs of knowledge,”
in CRYPTO ’92, 1993.
[4] O. Goldreich and Y. Oren, “Deﬁnitions and properties of zero-
knowledge proof systems,” Journal of Cryptology, 1994.
[5] M. Blum, P. Feldman, and S. Micali, “Non-interactive zero-
knowledge and its applications,” in STOC ’88, 1988.
[6] M. Blum, A. De Santis, S. Micali, and G. Persiano, “Non-
interactive zero-knowledge,” SIAM J. Comp., 1991.
[7] U. Feige, D. Lapidot, and A. Shamir, “Multiple noninteractive
zero knowledge proofs under general assumptions,” SIAM J.
Comp., 1999.
[8] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers,
E. Tromer, and M. Virza, “Zerocash: Decentralized anonymous
payments from Bitcoin,” in SP ’14, 2014.
[9] R. Canetti, R. Pass, and A. Shelat, “Cryptography from sunspots:
How to use an imperfect reference string,” in FOCS ’07, 2007.
[10] J. Clark and U. Hengartner, “On the use of ﬁnancial data as a
random beacon,” in EVT/WOTE ’10, 2010.
[11] National Institute of Standards and Technology. (2014) NIST
randomness beacon. [Online]. Available: http://www.nist.gov/itl/
csd/ct/nist beacon.cfm
[12] O. Goldreich, S. Micali, and A. Wigderson, “How to play any
mental game or a completeness theorem for protocols with honest
majority,” in STOC ’87, 1987.
[13] M. Ben-Or, S. Goldwasser, and A. Wigderson, “Completeness
theorems for non-cryptographic fault-tolerant distributed compu-
tation (extended abstract),” in STOC ’88, 1988.
[14] S. Micali, “Computationally sound proofs,” SIAM J. Comp., 2000.
[15] C. Gentry and D. Wichs, “Separating succinct non-interactive
arguments from all falsiﬁable assumptions,” in STOC ’11, 2011.
[16] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer, “From ex-
tractable collision resistance to succinct non-interactive arguments
of knowledge, and back again,” in ITCS ’12, 2012.
[17] N. Bitansky, A. Chiesa, Y. Ishai, R. Ostrovsky, and O. Paneth,
“Succinct non-interactive arguments via linear interactive proofs,”
in TCC ’13, 2013.
[18] J. Groth, “Short pairing-based non-interactive zero-knowledge
arguments,” in ASIACRYPT ’10, 2010.
[19] H. Lipmaa, “Progression-free sets and sublinear pairing-based
non-interactive zero-knowledge arguments,” in TCC ’12, 2012.
[20] R. Gennaro, C. Gentry, B. Parno, and M. Raykova, “Quadratic
span programs and succinct NIZKs without PCPs,” in EURO-
CRYPT ’13, 2013.
[21] B. Parno, C. Gentry, J. Howell, and M. Raykova, “Pinocchio:
Nearly practical veriﬁable computation,” in SP ’13, 2013.
[22] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza,
“SNARKs for C: Verifying program executions succinctly and in
zero knowledge,” in CRYPTO ’13, 2013.
[23] H. Lipmaa, “Succinct non-interactive zero knowledge arguments
from span programs and linear error-correcting codes,” in
ASIACRYPT ’13, 2013.
[24] P. Fauzi, H. Lipmaa, and B. Zhang, “Efﬁcient modular NIZK
arguments from shift and product,” in CANS ’13, 2013.
[25] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza, “Succinct
non-interactive zero knowledge for a von Neumann architecture,”
in Security ’14, 2014, extended version at http://eprint.iacr.org/
2013/879.
[26] H. Lipmaa, “Efﬁcient NIZK arguments via parallel veriﬁcation
of Beneˇs networks,” in SCN ’14, 2014.
[27] A. E. Kosba, D. Papadopoulos, C. Papamanthou, M. F. Sayed,
E. Shi, and N. Triandopoulos, “TRUESET: Faster veriﬁable set
computations,” in Security ’14, 2014.
[28] M. Backes, D. Fiore, and R. M. Reischuk, “Nearly practical and
privacy-preserving proofs on authenticated data,” ePrint 2014/617,
2014.
[29] R. S. Wahby, S. Setty, Z. Ren, A. J. Blumberg, and M. Wal-
ﬁsh, “Efﬁcient RAM and control ﬂow in veriﬁable outsourced
computation,” ePrint 2014/674, 2014.
[30] Y. Zhang, C. Papamanthou, and J. Katz, “Alitheia: Towards
practical veriﬁable graph processing,” in CCS ’14, 2014.
[31] G. Danezis, C. Fournet, J. Groth, and M. Kohlweiss, “Square
span programs with applications to succinct NIZK arguments,”
in ASIACRYPT ’14, 2014.
[32] P. Valiant, “Incrementally veriﬁable computation or proofs of
knowledge imply time/space efﬁciency,” in TCC ’08, 2008.
[33] T. Mie, “Polylogarithmic two-round argument systems,” Journal
of Mathematical Cryptology, 2008.
[34] G. Di Crescenzo and H. Lipmaa, “Succinct NP proofs from an
extractability assumption,” in CiE ’08, 2008.
[35] I. Damg˚ard, S. Faust, and C. Hazay, “Secure two-party computa-
tion with low communication,” in TCC ’12, 2012.
[36] S. Goldwasser, H. Lin, and A. Rubinstein, “Delegation of
computation without rejection problem from designated veriﬁer
CS-proofs,” ePrint 2011/456, 2011.
[37] N. Bitansky and A. Chiesa, “Succinct arguments from multi-
prover interactive proofs and their efﬁciency beneﬁts,” in
CRYPTO ’12, 2012.
[38] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer, “Recursive
composition and bootstrapping for SNARKs and proof-carrying
data,” in STOC ’13, 2013.
[39] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza, “Scalable
zero knowledge via cycles of elliptic curves,” in CRYPTO ’14,
2014, extended version at http://eprint.iacr.org/2014/595.
[40] N. Bitansky, R. Canetti, A. Chiesa, S. Goldwasser, H. Lin,
A. Rubinstein, and E. Tromer, “The hunting of the SNARK,”
ePrint 2014/580, 2014.
[41] M. Chase, M. Kohlweiss, A. Lysyanskaya, and S. Meiklejohn,
“Succinct malleable NIZKs and an application to compact shufﬂes,”
in TCC ’13, 2013.
[42] B. Braun, A. J. Feldman, Z. Ren, S. Setty, A. J. Blumberg, and
M. Walﬁsh, “Verifying computations with state,” in SOSP ’13,
2013.
[43] G. Danezis, C. Fournet, M. Kohlweiss, and B. Parno, “Pinocchio
Coin: building Zerocoin from a succinct pairing-based proof
system,” in PETShop ’13, 2013.
[44] M. Fredrikson and B. Livshits, “Zø: An optimizing distributing
zero-knowledge compiler,” in Security ’14, 2014.
[45] SCIPR Lab.
libsnark: a C++ library for zkSNARK proofs.
[Online]. Available: https://github.com/scipr-lab/libsnark
[46] S. Nakamoto, “Bitcoin: a peer-to-peer electronic cash system,”
2009. [Online]. Available: http://www.bitcoin.org/bitcoin.pdf
[47] A. Fiat and A. Shamir, “How to prove yourself: practical solutions
to identiﬁcation and signature problems,” in CRYPTO ’87, 1987.
[48] J. Groth and R. Ostrovsky, “Cryptography in the multi-string
model,” in CRYPTO ’07, 2007.
[49] T. P. Pedersen, “Non-interactive and information-theoretic secure
veriﬁable secret sharing,” in CRYPTO ’91, 1992.
[50] J. F. Canny and S. Sorkin, “Practical large-scale distributed key
generation,” in EUROCRYPT ’04, 2004.
[51] J. Katz, A. Kiayias, H.-S. Zhou, and V. Zikas, “Distributing the
setup in universally composable multi-party computation,” in
PODC ’14, 2014.
[52] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella, “Fairplay — a
secure two-party computation system,” in SSYM ’04, 2004.
[53] a. shelat and C.-h. Shen, “Fast two-party secure computation
with minimal assumptions,” in CCS ’13, 2013.
[54] M. Bellare, V. T. Hoang, S. Keelveedhi, and P. Rogaway,
“Efﬁcient garbling from a ﬁxed-key blockcipher,” in SP ’13,
2013.
[55] A. C.-C. Yao, “How to generate and exchange secrets,” in
SFCS ’86, 1986.
[56] Y. Lindell and B. Pinkas, “A proof of security of Yao’s protocol
for two-party computation,” Journal of Cryptology, 2009.
[57] A. Ben-David, N. Nisan, and B. Pinkas, “FairplayMP: a system
for secure multi-party computation,” in CCS ’08, 2008.
[58] I. Damg˚ard, M. Geisler, M. Krøigaard, and J. B. Nielsen, “Asyn-
chronous multiparty computation: Theory and implementation,”
303303
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
in PKC ’09, 2009.
[59] J. Katz, R. Ostrovsky, and A. Smith, “Round efﬁciency of
multi-party computation with a dishonest majority,” in EURO-
CRYPT ’03. Springer-Verlag, 2003.
[60] R. Pass, “Bounded-concurrent secure multi-party computation
with a dishonest majority,” in STOC ’04. ACM, 2004.
[61] C. Orlandi, “Is multiparty computation any good in practice?” in
ICASSP ’11, 2011.
[62] I. Damg˚ard, M. Keller, E. Larraia, V. Pastro, P. Scholl, and N. P.
Smart, “Practical covertly secure MPC for dishonest majority -
Or: Breaking the SPDZ limits,” in ESORICS ’13, 2013.
[63] I. Damg˚ard, R. Lauritsen, and T. Toft, “An empirical study
and some improvements of the MiniMac protocol for secure
computation,” in SCN ’14, 2014.
[64] R. Bendlin, I. Damg˚ard, C. Orlandi, and S. Zakarias, “Semi-
homomorphic encryption and multiparty computation,” in EU-
ROCRYPT ’11, 2011.
[65] I. Damg˚ard, V. Pastro, N. P. Smart, and S. Zakarias, “Multi-
party computation from somewhat homomorphic encryption,” in
CRYPTO ’12, 2012.
[66] G. Asharov, A. Jain, A. L´opez-Alt, E. Tromer, V. Vaikun-
tanathan, and D. Wichs, “Multiparty computation with low
communication, computation and interaction via threshold fhe,”
in EUROCRYPT ’12, 2012.
[67] S. Garg, C. Gentry, S. Halevi, and M. Raykova, “Two-round
secure MPC from indistinguishability obfuscation,” in TCC ’14,
2014.
[68] G. Asharov and Y. Lindell, “A full proof of the BGW protocol
for perfectly-secure multiparty computation,” ePrint 2011/136,
2011.
[69] C. P. Schnorr, “Efﬁcient signature generation by smart cards,”
[70] D. Chaum and T. P. Pedersen, “Wallet databases with observers,”
Journal of Cryptology, 1991.
in CRYPTO ’92, 1992.
[71] P. S. L. M. Barreto and M. Naehrig, “Pairing-friendly elliptic
curves of prime order,” in SAC’05, 2006.
304304
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply.