### Cost Analysis

- **General Case:**
  - \(0.035 \cdot \text{size}(C) \, \text{ms}\)
  - \(n \cdot (\text{depth}_S(C) + 3)\)
  - \(0.072 \cdot n \cdot \text{size}(C) \, \text{kB}\)
  - \(1.03 \cdot n \cdot \text{size}(C) \, \text{ms}\)

- **Example #1:**
  - \(3n + 3\)
  - \(14,124 \, \text{s}\)
  - \(6n\)
  - \(12,877 \cdot n \, \text{MB}\)
  - \(196,208 \cdot n \, \text{s}\)

- **Example #2:**
  - \(6n + 6\)
  - \(4,048 \, \text{s}\)
  - \(6n\)
  - \(906 \cdot n \, \text{MB}\)
  - \(50,945 \cdot n \, \text{s}\)

**Figure 6:** Our system's costs for the general case, Example #1, and Example #2; \(n\) is the number of parties.

### Quadratic Arithmetic Programs (QAPs)

Given a function \(D : F_r^n \to F_r\), the generator computes:

1. \((\vec{A}, \vec{B}, \vec{C}, Z) := \text{GetQAP}(D)\). If \(D\) has \(N_w\) wires and \(N_g\) gates, the resulting QAP has size \(m = N_w\) and degree \(d \approx N_g\).

2. The parameter generator, on input an \(F_r\)-arithmetic circuit \(D : F_r^n \to F_r\), does:
   1. Compute \((\vec{A}, \vec{B}, \vec{C}, Z) := \text{GetQAP}(D)\), and denote by \(m\) and \(d\) the QAP’s size and degree. Construct an \(F_r\)-arithmetic circuit \(C : F_8^r \to F_{d+7m+n+22}^r\) such that \(C(\tau, \rho_A, \rho_B, \alpha_A, \alpha_B, \alpha_C, \beta, \gamma)\) computes the following outputs:
      \[
      \left(1, \tau, \ldots, \tau^d, A_0(\tau)\rho_A, \ldots, A_m(\tau)\rho_A, Z(\tau)\rho_A, A_0(\tau)\rho_A\alpha_A, \ldots, A_m(\tau)\rho_A\alpha_A, Z(\tau)\rho_A\alpha_A, B_0(\tau)\rho_B, \ldots, B_m(\tau)\rho_B, Z(\tau)\rho_B, B_0(\tau)\rho_B\alpha_B, \ldots, B_m(\tau)\rho_B\alpha_B, Z(\tau)\rho_B\alpha_B, C_0(\tau)\rho_A\rho_B, \ldots, C_m(\tau)\rho_A\rho_B, Z(\tau)\rho_A\rho_B, C_0(\tau)\rho_A\rho_B\alpha_C, \ldots, C_m(\tau)\rho_A\rho_B\alpha_C, Z(\tau)\rho_A\rho_B\alpha_C, (A_0(\tau)\rho_A + B_0(\tau)\rho_B + C_0(\tau)\rho_A\rho_B)\beta, \ldots, (A_m(\tau)\rho_A + B_m(\tau)\rho_B + C_m(\tau)\rho_A\rho_B)\beta, (Z(\tau)\rho_A + Z(\tau)\rho_B + Z(\tau)\rho_A\rho_B)\beta, \alpha_A, \alpha_B, \alpha_C, \gamma, \gamma\beta, Z(\tau)\rho_A\rho_B, A_0(\tau)\rho_A, \ldots, A_n(\tau)\rho_A\right)
      \]
   2. Sample \(\vec{\alpha} \in F_8^r\) at random.
   3. Compute \(pp := C(\vec{\alpha}) \cdot G\).
   4. Output \(pp\).

The first \(d + 7m + 15\) elements in \(pp\) form the proving key \(pk\), while the remaining \(n + 7\) form the verification key \(vk\).

### Square Span Programs (SSPs)

This zk-SNARK supports relations \(R_D = \{(\vec{x}, \vec{w}) \in \{0, 1\}^n \times \{0, 1\}^h : D(\vec{x}, \vec{w}) = 0\}\) where \(D : \{0, 1\}^n \times \{0, 1\}^h \to \{0, 1\}\) is a boolean circuit.

1. The construction is based on square span programs (SSP) [31]: a SSP of size \(m\) and degree \(d\) over \(F\) is a tuple \((\vec{A}, Z)\), where \(\vec{A}\) is a vector of \(m + 1\) polynomials in \(F_{\leq d-1}[z]\) and \(Z \in F[z]\) has degree exactly \(d\). As shown in [31], each relation \(R_D\) can be reduced to a certain relation \(R_{(\vec{A}, Z)}\), which captures "SSP satisfiability", by computing \((\vec{A}, Z) := \text{GetSSP}(D)\) for a suitable function \(\text{GetSSP}\); if \(D\) has \(N_w\) wires and \(N_g\) gates, then the resulting SSP has size \(m = N_w\) and degree \(d \approx N_w + N_g\).

2. The parameter generator, on input a boolean circuit \(D : \{0, 1\}^n \times \{0, 1\}^h \to \{0, 1\}\), does:
   1. Compute \((\vec{A}, \vec{B}, \vec{C}, Z) := \text{GetSSP}(D)\), and denote by \(m\) and \(d\) the SSP’s size and degree. Construct an \(F_r\)-arithmetic circuit \(C : F_3^r \to F_{d+2m+n+9}^r\) such that \(C(\tau, \beta, \gamma)\) computes the following outputs:
      \[
      \left(1, \tau, \ldots, \tau^d, A_0(\tau), \ldots, A_m(\tau), Z(\tau), A_0(\tau)\beta, \ldots, A_m(\tau)\beta, Z(\tau)\beta, \gamma, \gamma\beta, Z(\tau), A_0(\tau), \ldots, A_n(\tau)\right)
      \]
   2. Sample \(\vec{\alpha} \in F_3^r\) at random.
   3. Compute \(pp := C(\vec{\alpha}) \cdot G\).
   4. Output \(pp\).

The first \(d + 2m + 5\) elements in \(pp\) form the proving key \(pk\), while the remaining \(n + 4\) form the verification key \(vk\).

### References

[1] S. Goldwasser, S. Micali, and C. Rackoff, “The knowledge complexity of interactive proof systems,” SIAM J. Comp., 1989.
...
[71] P. S. L. M. Barreto and M. Naehrig, “Pairing-friendly elliptic curves of prime order,” in SAC’05, 2006.

---

This version of the text is more structured and clear, with improved formatting and coherence.