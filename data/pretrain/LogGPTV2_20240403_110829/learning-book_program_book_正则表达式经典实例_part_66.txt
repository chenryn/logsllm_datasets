标点符号的问题对URN也存在。假设你有如下的文本：
The URN is urn:nid:nss, isn't it?
这里存在的问题在于逗号是否是URN的一部分。用逗号结尾的URN从语法上来说是
合法的，但是任何人读这个英文句子时都会将这个逗号看成英文的标点，而不是URN
的一部分。解决方案中的最后一个正则表达式采用了比RFC2141更为严格的限制解
决了这个问题。它把URN的最后一个字符限制为在NSS部分中合法的字符，这样它
就不可能在用到URN的句子中以英文标点符号的身份出现。
要完成这个任务，还需要把加号量词（1个或多个）替换为星号量词（0个或多个），
并且为结尾字符添加第二个字符类。如果我们不更改量词而添加了这个字符类，那么
就会要求NSS至少有2个字符长，而这不是我们所想要的结果。
参见
实例2.3和实例2.12。
7.7通用URL的合法性验证
问题描述
你要检查一段给定的文本是否是一个符合RFC3986标准的URL。
解决方案
\A
（#通信协议方案
[a-z][a-z0-9+\-.]*:
（#授权和路径
//
（@+[='+（）9sig~-\6-0z-])
#用户名
{[a-z0-9\-._~]+
#命名主机
|\[[a-f0-9:.]+\]
#IPv6主机
1\[v[a-f0-9][a-z0-9\-._~!$&'()*+,=:]+\])
）#IPvFuture 主机
(:[0-9]+)?
#端口
/+（+[:=+（）.9$ig~·-\6-0z-e]/)
#路径
1不包含授权的路径
（/？[a-20-9\-._~名1$&’（）*+，;=:@]+(/[a-z0-9\-._~8!$&'（)*+,;=:@]+)*/？）？
）
1相对URL（不包含通信协议方案或授权）
（#相对路径
[a-z0-9\-._~!$&()*+,;=@]+（/[a-z0-9\-._~名1$&（）*+,;=：@]+)*/？
1#绝对路径
(/[a-z0-9\-._~!$&'() *+,;=:@]+)+/？
)
URL、路径和Internet地址
343
www.TopSage.com
---
## Page 360
#查询
-\6-0z-\
~!$&'（)*+，;=：@/？]*）？
#片段
-\6-0z-]#）
（[/:='+（），9i~
\Z
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
\A
（#通信协议方案
(?[a-z][a-z0-9+\-.]*):
（#授权和路径
//
-\6-0-<>
（@+[='+（）9$i~
#用户名
(?[a-z0-9\-._
~8] +
#命名主机
1
\[[a-f0-9:.]+\]
#IPv6主机
\[v[a-f0-9][a-z0-9\-.
~%！$&（）*+，;=：]+\]）#IPvFuture主机
(+[6-0]:)
口镶#
(?(/[a-z0-9\-
（/（+[：=+（），3$i
#路径
1#不包含授权的路径
(?/?[a-z0-9\-._
~%!$&'（）*+，;=：@]+
（/（+[:=+（）,9i~-\6-0z-]/)
1
1#相对URL（不包含通信协议方案或授权）
(?
#相对路径
[a-z0-9\-._
~g!$（）*+,;=@]+（/[a-z0-9\-
/（+[：='+（），9Sig
1绝对路径
(/[a-z0-9\-
名！$&*()*+,=:@]+)+/？
）
#查询
(?\？[a-z0-9\-._~g!$6'()*+,;=:@/？]*)?
#片段
(?\#[a-z0-9\-._~g!$&'(） *+,;=:@/？]*)？
\Z
正则选项：宽松排列、不区分大小写
正则流派：.NET
\A
（#通信协议方案
(?[a-z][a-z0-9+\-.]*):
（#授权和路径
//
（+[=+（）,i~-\6-0z-])
#用户名
(?[a-z0-9\-._~g]+
#命名主机
\[[a-f0-9:.}+\]
IPv6主机
\[v[a-f0-9][a-z0-9\-._~%!$&'（）*+,;=：]+\])#IPvFuture主机
（+[6-0]:)
口#
344
第7章
www.TopSage.com
---
## Page 361
(?(/[a-z0-9\-._
名！$&'（）*+，；=：@]+）*/？）路径
1不包含授权的路径
(?/?[a-z0-9\-._~!$&'()*+,;=:@]+
(/[a-20-9\-._
（/（+[：='+（),3Sig
1#相对URL（不包含通信协议方案或授权）
(?
#相对URL
[a-z0-9\-.~g!$'（)*+,;=@]+（/[a-20-9\-._~!$&*（)*+,;=：@]+)*/？
1#绝对URL
(/[a-z0-9\-
/+（+[：='+（），9i
）
#查询
-\6-0z-]\）
（[/:=+（),9Si
#片段
(?\#[a-z0-9\-._
（[/=+（），3$i
正则选项：宽松排列、不区分大小写
正则流派：.NET、PCRE 7、Per15.10、Ruby1.9
\A
（#通信协议方案
(?P[a-z][a-z0-9+\-.]*）:
（#授权和路径
//
(?P[a-z0-9\-._~!$&'()*+,;=]+@)？
#用户名
(?P[a-z09\-._~]+
#命名主机
\[[a-f0-9:.]+\]
#IPv6主机
\[v[a-f0-9][a-z0-9\-
!$&'（）*+，;=：]+\]）#IPvFuture主机
（+[6-0]:d)
#端口
(?P(/[a-z0-9\-
_~%!$&'（）*+，=：@]+）*/？）#路径
1#不包含授权的路径
(?P/？[a-z0-9\-._~!$&'（)*+,;=:@]+
(/[a-z0-9\-._
（/(+[:='+（),9Si~
1#相对URL（不包含通信协议方案或授权）
(?P
#相对URL
[a-z0-9\-._~g!$&'（)*+,;=@]+（/[a-z0-9\-
%！S&'
1#绝对URL
(/[a-z0-9\-，
/+（+[：=+*（)9$i
#查询
(?P\?[a-z0-9\-._
（[/:='+（)，9ig~
#片段
(?P\#[a-z0-9\-._~g!$&'（)*+,;=:@/?]*）?
\Z
URL、路径和Internet地址
345
www.TopSage.com
---
## Page 362
正则选项：宽松排列、不区分大小写
正则流派：PCRE4及更高版本、Per15.10、Python
([a-z][a-z0-9+\-.]*:(\/\/([a-z0-9\-._~!$'()*+,=]+@)？([a-z0-9\-._~]+|
\[[a-f0-9:.]+\]I\[v[a-f0~9][a-z0-9\-._~!$&'() *+,;=:]+\])(:[0-9]+) ?
（\/[a-z0-9\-._~g!$α'（)*+,;=:@]+)*\/？1(\/？[a-z0-9\-._~!$'（)*+,;=:@]+
（\/[a-z0-9\-._~!$() *+,=:@]+)*\/？)?) 1([a-20-9\-._~1$&（)*+,;=@]+
(\/[a-z0-9\-._~!$&*() *+,;=:@]+) *\/？1(\/[a-z0-9\-._~g!$*() *+,=:@]+)
+\/？))
（\？[a-z0-9\-._~!$&'()*+,=:@\/？]*)？(#[a-z0-9\-._~!$&'（)*+,=:@\/？]*)？S
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
讨论
本章中前面的许多实例处理的都是URL，并且这些实例中的正则表达式所处理的是特
定类型的URL。有时候出于-一些特定的自的，我们会选择采用某些特定的正则表达式，
例如要决定标点符号是URL的一部分还是引I用了该URL的文本的一部分。
本实例中的正则表达式处理的则是通用的URL。这些正则式的目的不是在一大段文本
中寻找URL，而是为了验证其中所包含的URL学符串的合法性，并且将URL分割成
不同的组成部分。前文的实例为各种类型的URL完成了这个任务，但是在实践中，你
经常会需要让正则式更有针对性。这之后的实例会展示更有针对性的正则式。
RFC3986标准描述了一个合法URL该是什么样的。它覆盖了每个可能的URL，包括
了相对URL和支持尚未问世的通信协议方案的URL。这样做的结果是，RFC3986是
非常宽泛的，实现它的正则表达式会相当长。本实例中的正则表达式只实现了其中最
基本的部分。它能够可靠地把URL分成不同的组成部分，但还没有对各个部分分别执
行合法性验证。
验证各部分的合法性需要对每个URL通信协议方案的特定知识。RFC3986并没有覆盖
你在现实生活中可能遇到的所有URL。例如，许多浏览器和Web服务器接受含有字面
空格的URL，但是RFC3986中则要求空格都必须被转义为%20。
一个绝对的URL必须以通信协议方案作为开始，例如http：或者ftp：。通信协议方案的
第一个字符必须是字母。余下的字符可以是字母、数字或者一些特定的标点符号字符。
我们能很容易地用2个字符类来匹配它：[a-z][a-z0-9+\-.]*>。
器的IP地址，可以有一个用户名作为前缀，还可以有一个端口号作为其后缀。
用户名可以由字母、数字和一些标点符号组成。它必须用一个@符号和域名或IP地址
分隔开。会匹配用户名和分隔符。
RFC3986对于所允许的域名的规定是相当自由的。实例7.15解释了域名一般允许哪些
346第7章
www.TopSage.com
---
## Page 363
字符：字母、数字、连字符和点号。RFC3986也允许波浪号（～）以及使用百分号引