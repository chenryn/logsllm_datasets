### By March 2019

#### Fire TV: Custom Remote Control API
Fire TV provides a custom remote control API over the network, allowing users to use their phones as remote controls. This feature is analyzed in Appendix F.

## 6. Discussion
Previous research on user privacy expectations regarding smart TVs has found that viewers generally find the sharing of their data with advertisers unacceptable [41]. Our findings indicate that concerned users have limited options to protect their privacy. As emerging platforms, Over-the-Top (OTT) services lack the tools, controls, and countermeasures available on web and mobile platforms. Users who can easily install ad blockers for their web browsers often lack effective defenses to protect their video privacy on OTT platforms. Furthermore, the widespread collection of persistent device identifiers, such as MAC addresses and serial numbers, undermines one of the few defenses available to users: resetting their advertising IDs. Trackers who collect these persistent IDs can still link users' activity even if they reset their advertising IDs.

Additionally, the tendency of companies to monetize user data makes it challenging to incentivize privacy-friendly practices. It often falls to regulators to hold platform and application developers accountable. Our tool can be used by regulators to inspect channels and devices, thereby enforcing privacy regulations on OTT platforms.

### 6.1 Recommendations
Based on our findings, we believe OTT vendors should adopt ideas from other platforms, such as the web, to provide a more privacy-friendly and secure experience for their users. Specifically, we make the following recommendations:

- **Enhanced Privacy Controls:** OTT platforms should offer better privacy controls, similar to the Incognito/Private Browsing Mode in modern web browsers. Platforms should ensure that linking private and non-private profiles of the same user is not possible by partitioning identifiers and their storage, and denying access to existing platform identifiers.
- **Network Traffic Monitoring:** Platforms should enable users to monitor the content of their network traffic, similar to how browsers and operating systems allow intercepting one's own traffic by installing a self-signed certificate. This would allow tech-savvy users and security researchers to analyze channel behavior, leading to a more transparent ecosystem. These features should require explicit user consent and display their status prominently to mitigate the risk of misuse.
- **Regulatory Updates:** To complement the limited technical protections available to users, regulators and policymakers should update privacy protections, such as those provided by the US Video Privacy Protection Act (VPPA), to cover emerging OTT platforms. Our research shows that users are constantly and pervasively tracked on these platforms.
- **Insecure Connection Policies:** OTT platforms should introduce policies to discourage insecure connections, for example, by blocking clear-text connections unless an exception is requested by the channel (similar to Apple’s App Transport Security feature [33]).

### 6.2 Limitations and Future Work
Below, we discuss the limitations of our work and potential future work to address these limitations.

#### 6.2.1 Channel Login
Our crawler cannot navigate beyond login or signup pages, which is a common limitation among similar automation tools. This prevents us from reaching video playback on some channels. In future work, we plan to integrate real-time image recognition to detect, fill, and submit login forms during crawls, thereby increasing the video playback rate. During manual crawls, we observed that some channels require sign-up through a web browser.

#### 6.2.2 Background Traffic
Our traffic captures may include background traffic from Roku and Amazon platforms. Preliminary analysis of this background traffic when no channel is active suggests that its effect on the results is minimal. Distinguishing background traffic for closed platforms like Roku is a challenge we plan to address in future studies.

#### 6.2.3 Smart TV Platforms
We studied two of the most popular OTT streaming devices, leaving out smart TV platforms such as Samsung, Vizio, and Apple TV. We believe our automated crawler can be easily modified to run experiments on these platforms, provided they have similar remote control APIs.

## 7. Conclusion
In this paper, we presented the first large-scale study of tracking by OTT streaming channels. Our measurement of over 2,000 OTT streaming channels revealed widespread user tracking and data collection. To conduct the study, we built a smart crawler that automatically installs, launches, and interacts with OTT channels.

Our measurements showed that tracking is prevalent on the OTT platforms we studied, with traffic to known trackers present on 69% of Roku channels and 89% of Amazon Fire TV channels. We also observed that certain OTT channels contact more than 60 tracking domains, and the data shared with these trackers includes video titles, WiFi SSIDs, MAC addresses, and device serial numbers. Analyzing the network data collected by our crawler, we discovered that 79% of Roku channels and 76% of Fire TV channels send at least one unencrypted HTTP request. Finally, we identified new tracking domains not seen in previous tracking studies.

Our analysis of the available privacy countermeasures showed that they are ineffective at preventing tracking. Such weak countermeasures should be supported by policies and regulations to ensure that users' viewership information remains private.

## 8. Acknowledgements
This paper was supported in part by NSF awards CPS-1739809, CNS-1553437, and CNS-1704105. We thank Kevin Borgolte and the anonymous CCS reviewers for their comments.

## References
[1] Gunes Acar, Danny Yuxing Huang, Frank Li, Arvind Narayanan, and Nick Feamster. 2018. Web-based Attacks to Discover and Control Local IoT Devices. In Proceedings of the 2018 Workshop on IoT Security and Privacy. ACM, 29–35.
...
[65] Roku. 2019. External Control Protocol (ECP). (2019). Retrieved August 25, 2019 from https://developer.roku.com/docs/references/brightscript/interfaces/ifdeviceinfo.md#getrida-as-dynamic