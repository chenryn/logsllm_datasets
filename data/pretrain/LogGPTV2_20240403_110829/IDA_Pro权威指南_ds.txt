rename_entry(ordinal, name);
RenameSeg
set_segm_name(get_seg(ea), "%s", name);
ResumeThread
return resume_thread(tid);
Rfirst
return get_first_cref_from(From);
Rfirst0
return get_first_fcref_from(From);
RfirstB
return get_first_cref_to(To);
RfirstB0
return get_first_fcref_to(To);
Rnext
return get_next_cref_from(From, current);
Rnext0
return get_next_fcref_from(From, current);
RnextB
return get_next_cref_to(To, current);
RnextB0
return get_next_fcref_to(To, current);
RunPlugin
run_plugin(load_plugin(name), arg);
RunTo
run_to(ea);
SaveBase
char  * fname = idbname ? idbname : database_idb;
uint32_t tflags = database_flags;
database_flags = (flags & 4) | (tflags & 0xfffffffb);
bool res = save_database(fname, 0);
database_flags = tflags;
return res; 
ScreenEA
return get_screen_ea();
SegAddrng
//deprecated, see SetSegAddressing
SegAlign
//macro, see SetSegmentAttr
SegBounds
//deprecated, see SetSegBounds
SegByBase
return get_segm_by_sel(base)->startEA;
SegByName
 sel_t seg;
atos(segname, *seg);
return seg; 
SegClass
//deprecated, see SetSegClass
SegComb
//macro, see SetSegmentAttr
SegCreate
//deprecated, see AddSeg
SegDefReg
//deprecated, see SetSegDefReg
SegDelete
//deprecated, see DelSeg
SegEnd
//macro, see GetSegmentAttr
SegName
segment_t * s = (segment_t* ) get_seg(ea);
get_true_segm_name(s, buf, sizeof(buf));
return qstrdup(buf); 
SegRename
//deprecated, see RenameSeg
SegStart
//macro, see GetSegmentAttr
SelEnd
 ea_t  ea1, ea2;
read_selection(&ea1, &ea2);
return ea2; 
SelStart
 ea_t  ea1, ea2;
read_selection(&ea1, &ea2);
return ea1; 
SelectThread
select_thread(tid);
SetArrayFormat
segment_t * s = get_seg(ea);
if (s)
   uint32_t format[3];
   netnode array(ea);
   format[0] = flags;
   format[1] = litems;
   format[2] = align;
   array.supset(5, format, sizeof(format)); 
SetArrayLong
netnode n(id).altset(idx, value);
SetArrayString
netnode n(id).supset(idx, str);
SetBmaskCmt
set_bmask_cmt(enum_id, bmask, cmt, repeatable);
SetBmaskName
set_bmask_name(enum_id, bmask, name);
SetBptAttr
 bpt_t bpt;
if (get_bpt(ea, &bpt) == 0) return;
if (bpattr == BPTATTR_SIZE) bpt.size = value;
else if (bpattr == BPTATTR_TYPE) bpt.type = value;
else if (bpattr == BPTATTR_COUNT) bpt.pass_count = value;
else if (bpattr == BPTATTR_FLAGS) bpt.flags = value;
update_bpt(&bpt); 
SetBptCnd
//macro for SetBptCndEx(ea, cnd, 0);
SetBptCndEx
 bpt_t bpt;
if (get_bpt(ea, &bpt) == 0) return;
bpt. cndbody = cnd;
if (is_lowcnd)
   bpt.flags |= BPT_LOWCND; 
else
   bpt.flags &= ~ BPT_LOWCND;
update_bpt(&bpt); 
SetCharPrm
if (offset >= 13 && offset 
SetColor
if (what == CIC_ITEM)
   set_item_color(ea, color);
else if (what == CIC_FUNC)
   func_t * f = get_func(ea);
   f->color = color;
    update_func(f);
else if (what == CIC_SEGM)
   segment_t  * s = get_seg(ea);
   s->color = color;
   s->update(); 
SetConstCmt
set_const_cmt(const_id, cmt, repeatable);
SetConstName
set_const_name(const_id, name);
SetDebuggerOptions
return set_debugger_options(options);
SetEnumBf
set_enum_bf(enum_id, flag ? 1 : 0);
SetEnumCmt
set_enum_cmt(enum_id, cmt, repeatable);
SetEnumFlag
set_enum_flag(enum_id, flag);
SetEnumIdx
set_enum_idx(enum_id, idx);