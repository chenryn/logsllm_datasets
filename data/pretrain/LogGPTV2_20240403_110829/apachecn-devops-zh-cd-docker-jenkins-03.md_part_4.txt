![](img/b1e20218-bee3-4352-a90f-5e613c98d421.png)
To prevent job executions on master, remember about turning the master node offline or setting **# of executors** to `0` in the Manage Nodes configuration.
看到代理正在执行我们的构建，我们已经确认它们配置正确。现在，让我们看看如何以及出于什么原因，我们可以创建自己的 Jenkins 映像。
# 自定义 Jenkins 映像
到目前为止，我们已经使用了从互联网上提取的 Jenkins 映像。我们使用`jenkins`作为主容器，使用`evarga/jenkins-slave`作为从容器。但是，我们可能希望构建自己的映像来满足特定的构建环境要求。在本节中，我们将介绍如何做到这一点。
# 建造 Jenkins 奴隶
让我们从奴隶形象开始，因为它更经常被定制。构建执行是在代理上执行的，因此需要根据我们想要构建的项目调整环境的是代理。例如，如果我们的项目是用 Python 编写的，它可能需要 Python 解释器。这同样适用于任何库、工具、测试框架或项目所需的任何东西。
You can check what is already installed inside the `evarga/jenkins-slave` image by looking at its Dockerfile at [https://github.com/evarga/docker-images](https://github.com/evarga/docker-images).
构建和使用自定义映像有三个步骤:
1.  创建一个 Dockerfile。
2.  建立形象。
3.  更改主机上的代理配置。
例如，让我们创建一个服务于 Python 项目的从属。为了简单起见，我们可以将其建立在`evarga/jenkins-slave`映像之上。让我们使用以下三个步骤来完成:
1.  **Dockerfile** : 让我们在 Dockerfile 内部创建一个新目录，内容如下:
```
 FROM evarga/jenkins-slave
 RUN apt-get update && \
 apt-get install -y python
```
The base Docker image `evarga/jenkins-slave` is suitable for the dynamically provisioned Docker agents solution. In case of permanent Docker agents, it's enough to use `alpine`, `ubuntu`, or any other image, since it's not the slave that is dockerized, but only the build execution environment.
2.  **构建映像**:我们可以通过执行以下命令来构建映像:
```
 $ docker build -t jenkins-slave-python .
```
3.  **配置主**:最后一步当然是在 Jenkins 主配置中设置`jenkins-slave-python`而不是`evarga/jenkins-slave`(如*设置 Docker 代理*部分所述)。
The slave Dockerfile should be kept in the source code repository and the image build can be performed automatically by Jenkins. There is nothing wrong with building the new Jenkins slave image using the old Jenkins slave.
如果我们需要 Jenkins 构建两种不同类型的项目，例如，一个基于 Python，另一个基于 Ruby，会怎么样？在这种情况下，我们可以准备一个代理，它足够通用以支持两者:Python 和 Ruby。但是在 Docker 的情况下，建议创建第二个从映像(【类比 T0】)。然后，在 Jenkins 配置中，我们需要创建两个 Docker 模板，并对它们进行相应的标记。
# 建筑大师 Jenkins
我们已经有了一个定制的奴隶形象。为什么我们也要建立自己的大师形象？其中一个原因可能是我们根本不想使用奴隶，而且，由于执行将在主服务器上完成，它的环境必须根据项目的需要进行调整。然而，这是一个非常罕见的案例。更多时候，我们会想要配置主服务器本身。
想象以下场景，您的组织水平扩展 Jenkins，每个团队都有自己的实例。但是，有一些常见的配置，例如:一组基本插件、备份策略或公司徽标。然后，为每个团队重复相同的配置是浪费时间。因此，我们可以准备共享的主映像，并让团队使用它。
Jenkins 是使用 XML 文件配置的，它提供了基于 Groovy 的 DSL 语言来操作它们。这就是为什么我们可以将 Groovy 脚本添加到 Dockerfile 中，以便操作 Jenkins 配置。此外，如果 Jenkins 配置需要的不仅仅是 XML 更改，比如插件安装，还有特殊的脚本来帮助它。
All possibilities of the Dockerfile instructions are well described on the GitHub page [https://github.com/jenkinsci/docker](https://github.com/jenkinsci/docker).
作为一个例子，让我们创建一个主映像，其中 docker 插件已经安装，并且一些执行器设置为 5。为了做到这一点，我们需要:
1.  创建要在`config.xml`上操作的 Groovy 脚本，并将执行器的数量设置为`5`。
2.  创建 docker 文件来安装 docker 插件并执行 Groovy 脚本。
3.  建立形象。
让我们使用上面提到的三个步骤，构建 Jenkins 大师形象。
1.  **Groovy 脚本**:让我们在`executors.groovy`文件内创建一个新目录，内容如下:
```
import jenkins.model.*
Jenkins.instance.setNumExecutors(5)
```
The complete Jenkins API can be found on the official page [http://javadoc.jenkins.io/](http://javadoc.jenkins.io/).
2.  **Dockerfile** :在同一个目录下，我们创建 Dockerfile:
```
FROM jenkins
COPY executors.groovy 
      /usr/share/jenkins/ref/init.groovy.d/executors.groovy
RUN /usr/local/bin/install-plugins.sh docker-plugin
```
3.  **构建形象**:我们终于可以构建形象了:
```
$ docker build -t jenkins-master .
```
创建映像后，组织中的每个团队都可以使用它来启动自己的 Jenkins 实例。
拥有自己的主映像和从映像可以让我们为组织中的团队提供配置和构建环境。在下一节中，我们将看到在 Jenkins 中还有哪些值得配置的地方。
# 配置和管理
我们已经介绍了 Jenkins 配置中最关键的部分:代理配置。由于 Jenkins 是高度可配置的，您可以期待更多的可能性来根据您的需求调整它。好消息是，配置是直观的，可以通过网络界面访问，因此不需要任何详细的描述。在“管理 Jenkins”子页面下，一切都可以更改。在这一节中，我们将只关注最有可能被改变的几个方面:插件、安全性和备份。
# 插件
Jenkins 是高度面向插件的，这意味着很多特性都是通过使用插件来实现的。他们几乎可以以无限的方式扩展 Jenkins，考虑到庞大的社区，这是 Jenkins 成为如此成功的工具的原因之一。Jenkins 的开放性带来了风险，最好只从可靠的来源下载插件或检查它们的源代码。
有大量的插件可供选择。其中一些已经在初始配置期间自动安装。设置 Docker 代理时安装了另一个插件(Docker 插件)。有云集成插件、源代码控制工具、代码覆盖等等。你也可以自己写插件，但是最好先检查一下你需要的插件是否已经写好了。
There is an official Jenkins page to browse plugins from [https://plugins.jenkins.io/](https://plugins.jenkins.io/).
# 安全
您应该如何对待 Jenkins 安全性取决于您在组织中选择的 Jenkins 体系结构。如果每个小团队都有一个 Jenkins 大师，那么你可能根本不需要它(假设公司网络是防火墙)。但是，如果整个组织只有一个 Jenkins 主实例，那么您最好确保它得到了很好的保护。
Jenkins 自带用户数据库——我们已经在初始配置过程中创建了一个用户。您可以通过打开“管理用户”设置页面来创建、删除和修改用户。在小型组织的情况下，内置数据库可以是一个解决方案；但是，对于庞大的用户群，您可能会希望改用 LDAP。您可以在“配置全局安全性”页面上选择它。在那里，您还可以分配角色、组和用户。默认情况下，登录用户可以做任何事情选项被设置，但是在大规模组织中，您可能应该考虑更详细的粒度。
# 支持
古语有云:有两种人:备份的人和会备份的人。信不信由你，备份可能是你想要配置的东西。哪些文件要备份，从哪些机器备份？幸运的是，代理会自动将所有相关数据发送回主服务器，因此我们不需要为它们费心。如果您在容器中运行 Jenkins，那么容器本身也没什么意思，因为它没有任何持久状态。我们唯一感兴趣的地方是 Jenkins 的主目录。
我们可以安装一个 Jenkins 插件(它将帮助我们设置定期备份)或者简单地设置一个 cron 作业来将目录存档到一个安全的地方。为了减少大小，我们可以排除不感兴趣的子文件夹(这将取决于您的需求；然而，几乎可以肯定的是，您不需要复制:“war”、“cache”、“tools”和“workspace”)。
There are quite a few plugins, which can help with the backup process; the most common one is called **Backup Plugin**.
# 蓝色海洋用户界面
哈德森(前 Jenkins)的第一版于 2005 年发布。它已经上市 10 多年了。然而，它的外观和感觉没有太大变化。我们已经用了一段时间了，很难否认它看起来已经过时了。蓝海是插件，重新定义了 Jenkins 的用户体验。如果 Jenkins 在美学上让你不愉快，那么它绝对值得一试。
You can read more on the Blue Ocean page at [https://jenkins.io/projects/blueocean/](https://jenkins.io/projects/blueocean/).
![](img/8bc21c85-2ef8-4974-8bdf-24d022228c4f.png)
# 练习
在本章中，我们已经了解了很多关于 Jenkins 配置的知识。为了巩固知识，我们推荐两个关于准备 Jenkins 映像和测试 Jenkins 环境的练习。
1.  创建 Jenkins 主和从 Docker 映像，并使用它们来运行能够构建 Ruby 项目的 Jenkins 基础架构:
    *   创建主 Docker 文件，它会自动安装 Docker 插件。
    *   构建主映像并运行 Jenkins 实例
    *   创建从属 Dockerfile(适用于动态从属配置)，它安装 Ruby 解释器
    *   建立奴隶形象
    *   更改 Jenkins 实例中的配置以使用从属映像
2.  创建一个管道，运行 Ruby 脚本打印`Hello World from Ruby`:
    *   创建新管道
    *   使用以下 shell 命令动态创建`hello.rb`脚本:
        `sh "echo "puts 'Hello World from Ruby'" > hello.rb"`
    *   使用 Ruby 解释器添加运行`hello.rb`的命令
    *   运行构建并观察控制台输出
# 摘要
在本章中，我们已经介绍了 Jenkins 环境及其配置。获得的知识足以建立完整的基于 Docker 的 Jenkins 基础架构。本章的要点如下:
*   Jenkins 是一个通用的自动化工具，可以用于任何语言或框架。
*   Jenkins 可以通过插件高度扩展，插件可以在互联网上编写或找到。
*   Jenkins 是用 Java 写的，所以可以安装在任何操作系统上。它也以 Docker 映像的形式正式交付。
*   Jenkins 可以使用主从架构进行扩展。主实例可以根据组织的需求进行水平或垂直缩放。
*   Jenkins 的代理可以使用 Docker 来实现，这有助于自动配置和动态从机分配。
*   可以为两者创建自定义 Docker 映像:Jenkins 主映像和 Jenkins 从映像。
*   Jenkins 是高度可配置的，应该始终考虑的方面是:安全性和备份。
在下一章中，我们将重点讨论我们已经在“hello world”示例中接触过的部分，管道。我们将描述构建完整的持续集成管道的思想和方法。