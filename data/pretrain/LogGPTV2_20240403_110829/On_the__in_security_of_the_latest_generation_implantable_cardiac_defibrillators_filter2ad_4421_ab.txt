cur, i.e. where each symbol starts and ends.
Fig 3 shows the instantaneous frequency of the device pro-
grammer’s signal. The symbol rate can then be obtained by
computing the inverse of the diﬀerence between the times
where two abrupt peaks occur. However, instead of giv-
ing only one symbol rate value, this approach gives a small
range of possible values. Therefore, the second step was to
create another program that performs a sweep over all pos-
sible symbol rate values within this range, increasing the
symbol rate by one symbol each time. For each iteration,
our program demodulates several of the messages previously
captured, and then checks whether the demodulated bits are
equal for all the messages. This allows us to ﬁnd the symbol
rate being used by the devices, as the correct symbol rate is
the one for which no bit errors are produced.
1We do not specify the exact transmission frequency as this
may implicitly reveal the manufacturer’s identity.
2Medical Implant Communications Service.
.
.
- .
- .
e
d
u
t
i
l
p
m
A
×
H
e
r
F
-
.
.
.
.
Time sec
.
.
-
×
.
.
Time sec
-
×
Figure 3: Symbol rate estimation based on the
Hilbert transform. In the top chart, the waveform
of the signal transmitted by the device programmer.
In the bottom chart, the instantaneous frequency of
the device programmer’s signal.
2.2 Reverse-engineering the long-range
communication protocol
In this section, we show how to reverse-engineer the pro-
prietary protocol between the device programmer and the
ICD to communicate over the long-range channel. We ﬁrst
activate the ICD and put the device in “interrogation” mode.
More details on how adversaries can activate the ICD are
given in Section 3.
We found that all messages have a common Start-of-Frame
(SoF) that consists of a series of alternating “1s” and “0s”
sent consecutively to indicate the presence of an incoming
message. This is followed by a preamble sequence which
indicates that the information bits are about to begin. To
distinguish the messages sent by the device programmer and
the ones sent by the ICD, we placed the device programmer
close to our USRP while keeping the ICD further away, thus
getting more power from the device programmer. Unlike
the messages sent by the ICD, which only use one preamble
sequence, two preamble sequences can be used in the mes-
sages sent by the device programmer; a speciﬁc sequence or
its inverse. Messages from device programmers have a ﬁxed
length and include a 3-bit End-of-Frame (EoF) sequence
whilst ICDs send messages with three possible lengths that
do not contain any EoF.
2.2.1 Transmissions device programmer - ICD
We intercepted the messages sent from the device pro-
grammer to the ICD while carrying out diﬀerent operations
(e.g. changing the therapy settings). For the sake of simplic-
ity, we will focus only on the messages sent from the device
programmer to the ICD in order to change the patient’s
name. This process typically includes 16 messages and is
always composed of two diﬀerentiated groups of messages
separated by a long message sent by the ICD, as shown in
Figure 4. The former group includes messages 1-8, whereas
the second group includes the 9th up to the 16th message.
We found that the 16 messages have a x-bit sequence that
In each of the two messages’
denotes the message type.
groups, there are three possible message types independently
of the operation being conducted: (i) an opening message,
(ii) intermediate messages and (iii) a closing message. We
determined that the ﬁrst and the nineth messages contain
the Serial Number (SN) of the device programmer. The
ICD SN appears only in the messages sent by the device
programmer when the ICD is in the “no telemetry” mode.
In other words, this is sent only if the ICD loses the connec-
tion with the device programmer during an ongoing session.
Each SN is represented by a 24-bit sequence. Subsequently,
we observed that there is a y-bit sequence to indicate the
message number within the ﬁrst group of messages. This
ﬁeld is kept static in the second group of messages. Since
the message number ﬁeld only has a short length and eight
messages are sent by the device programmer within the ﬁrst
group of messages, this ﬁeld is reset frequently. By cap-
turing and analysing the 16 messages sent by the device
programmer in several consecutive iterations within a re-
programming session, we found two short counters, in the
ﬁrst and ninth message respectively. Both counters are in-
creased every time an operation is performed and are reset
when a new reprogramming session is established.
FIRST GROUP
SECOND GROUP
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12) (13) (14) (15) (16)
e
d
u
t
i
l
p
m
A
0,02
0,01
0
-0,01
-0,02
200,00m
300,00m
400,00m
500,00m
600,00m
700,00m
800,00m
900,00m
1,00
Time
Figure 4: Messages exchanged between the device
programmer and the ICD while changing the pa-
tient’s name.
We discovered that there is a 16-bit sequence at the end of
each message that seems to be random and varies depending
on the headers and data being sent. This lead us to think
that a checksum, such as a Cyclic Redundancy Code (CRC),
is used. To validate our hypothesis, we took the GCD of sev-
eral of these messages (in polynomial form), and discovered
that the CRC-16-CCITT is being used [14]. Other mecha-
nisms, such as repetition codes, are used to help the ICD
detecting bit errors. We noted that if the patient’s name
contains less than 14 characters, it is sent three times, oth-
erwise it is sent twice within the ﬁrst group of messages.
Fig 5 shows the device programmer’s message format.
2.2.2 Data whitening
We carried out a series of experiments to ﬁnd how the
data is encoded in the message. For this we focused on the
messages sent by the device programmer when changing the
patient’s name.
The ﬁrst experiment consisted on ﬁnding where the let-
ters are within the messages and see how many bits are used
to represent each letter. In particular, we changed the pa-
tient’s name to “A”, “AA”, “AAA”, “AAAA” and “AAAAA”,
respectively. We then intercepted the messages and com-
pared them with the ones sent by the device programmer
when the patient’s name ﬁeld is left empty. We found that
the ﬁrst four letters are sent within the ﬁrst message and
that each letter is represented by an 8-bit sequence. In ad-
dition, we observed that there is no unique pattern to repre-
sent the “A”. The next step was to reprogram the patient’s
229
SoF
Preamble
Message type
Message number
Payload
CRC
EoF
49 bits
’(%&
’
31 bits
(%
&
’
x bits
(%
&
’
y bits
(%
&
’
z bits
(%
&
16 bits
’(%&
3 bits
’(%&
Figure 5: Device programmer’s message format. The exact bit lengths are not shown.
name while keeping a speciﬁc letter in more than one posi-
tion. We modiﬁed the patient’s name to “AAAA”, “ABAB”
and “ACAC”, respectively. This experiment demonstrated
that the way how each letter is encoded depends on its po-
sition within the patient’s name. In other words, an “A” in
the ﬁrst position is always represented in the same way but
diﬀerently to an “A” in another position. By comparing the
8-bit sequences of the “A”, “B” and “C” in the second and the
fourth position, respectively, we noticed that the Hamming
distance between the sequences is constant. This allowed
us to conclude that the data is XORed with an output se-
quence from a Linear Feedback Shift Register (LFSR) (see
Figure 6)3. The vendor states that this is a data whitening
operation to prevent long strings of “1s” and “0s” in the data.
However, this operation could also serve as data obfuscation.
In our experiments, we were able to recover the LFSR
sequence by intercepting the messages sent by the device
programmer when the patient’s name is left empty (i.e. only
spaces). We then computed the XOR between the ﬁrst mes-
sage sent by the device programmer when changing the pa-
tient’s name to “AAAA” and the LFSR sequence. After
performing this operation, we found a unique pattern to
represent each of the four “As” of the patient’s name. This
pattern turned out to be identical to its ASCII representa-
tion. Our experiments reveal that this LFSR sequence is
constant throughout sessions. Moreover, we found that the
LFSR sequence is the same for all the ICDs we studied in our
experiments. We validated our ﬁndings in 10 diﬀerent ICD
models, and concluded that all models use this technique to
encode the data that is sent over the air.
discovered that the ICD messages have a counter that helps
the device programmer to sort the incoming messages or de-
tect message losses. We observed that most of the informa-
tion bits seem random. Since the ICD’s leads are no longer
connected to the patient’s heart and are very sensitive to
low-frequency changes, we noticed that they were measur-
ing the ambient noise and treating it as random telemetry
data. To investigate where the telemetry data is within the
message, instead of injecting our own signal to the ICD’s
leads, we introduced the ICD’s leads into a Faraday cage to
isolate them. We then captured several messages sent by
the ICD, and noted that they have a more constant pattern
which is no longer random. Furthermore, we identiﬁed sev-
eral bit sequences that are common to the three types of ICD
message regardless of the operation being performed. These
sequences are most likely used for synchronization purposes.
Finally, we discovered that, similarly to the messages sent
by the device programmer to the ICD, all messages have a
16-bit checksum, which is based on the standard CRC-16-
CCITT.
3. HOW TO ACTIVATE THE ICD?
Before exploiting our ﬁndings to carry out attacks, we ﬁrst
need to activate the ICD. To demonstrate the feasibility of
these attacks, we describe several ways to bypass the current
activation procedure, which requires almost physical contact
with the patient and is carried out over a short-range com-
munication channel. For simplicity, in the next sections we
often use the term “external device” to denote both device
programmers and base stations.
(a)"A"
(b)
(c)
"AA"
"AAA"
(d)
(e)
"AAAA"
 LFSR seq
(f)
 ASCII
00101011 10111101 00011010 
01010001
00101011
01010001
00011010 
01101001 01010001
00101011
11101000 
11101000 
2h
00101011 11101000 
01111101
01001010
10001001 
00011100
-----------------------------------
01100001
01100001
01101001 
00001000 
01100001 
01100001 
Sleep mode
Interrogation 
mode
Reprogramming
 mode
A
A
A
A
Figure 6: LSFR XOR operation.
Standby
 mode
5min
2.2.3 Transmissions ICD - device programmer
We intercepted and examined several messages transmit-