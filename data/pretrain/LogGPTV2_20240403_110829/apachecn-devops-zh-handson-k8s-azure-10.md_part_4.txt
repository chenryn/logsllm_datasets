    18 驱动程序:secrets-store.csi.k8s.io
    19 只读:真
    20 卷属性:
    21 secretProviderClass:“密钥-保管库-机密-文件”
    让我们看看这个文件的关键部分:
    *   **第 5-6 行**:这是您将此 pod 链接到之前创建的托管身份的位置。
    *   **第 11-14 行**:这里，你定义一下你要在哪里挂载秘籍。
    *   **第 15-21 行**:这里定义了实际体积和到密钥库的链接。在第 21 行，您可以参考前面创建的 SecretProviderClass 类。
4.  You can create this pod using the following command:
    kubi KL create-f pod keyvault . YAML 文件
5.  Monitor the Pod's creation using the following command:
    忽必烈得到 pods -w
    这将返回类似于图 10.30 的输出:
    ![Verifying that the status of thecsi-demo-file pod changes to Running](img/B17338_10_30.jpg)
    图 10.30:CSI 演示文件舱的状态变为运行
6.  Once the pod is created and running, you can open a shell in the pod using the **kubectl exec** command and verify that the secret is present:
    cube exec-it CSI 演示文件- sh
    CD/mnt/机密商店
    cat k8s-机密-演示
    这将输出您在密钥库中创建的机密，如图 10.31 所示:
    ![Verifying that the Secret is mounted in the Pod](img/B17338_10_31.jpg)
    图 10.31:您在密钥库中配置的密钥以文件的形式装载在容器中
    不出所料，您可以获得在密钥库中配置的机密，并在 Kubernetes 中显示出来。
7.  现在，您可以使用**退出**命令退出外壳，进入容器。
如您所见，您成功地使用了密钥库的 CSI 驱动程序从密钥库中获取了一个机密，以文件的形式显示在窗格中。
还可以将密钥库中的机密同步到 Kubernetes 中的机密，然后将它们用作运行 Pod 中的环境变量。这就是你将在本章的下一节也是最后一节探讨的内容。
### 使用密钥库机密作为环境变量
在上一节中，您看到了如何在窗格中以文件形式访问密钥库机密。正如您在本章前面所学的，建议您将 Kubernetes 机密作为文件使用。
但是，在某些情况下，您不能修改应用以将机密用作文件，而需要将它们用作环境变量。这可以使用密钥库的 CSI 驱动程序来完成，您将在本节中以这种方式配置驱动程序。请注意，为了让 CSI 驱动程序将密钥库中的机密同步到 Kubernetes 中的机密，您需要在 Kubernetes 中将机密挂载为卷；你不能只依靠机密同步。
让我们配置所有这些:
1.  First, you'll create the SecretProviderClass. An example has been provided in the code files for this chapter, in the **secretproviderclass-env.yaml** file:
    1 API version:secret store . CSI . x-k8s . io/v1 alpha 1 机密存储库
    2 种:SecretProviderClass
    3 元数据:
    4 名称:密钥-保管库-机密-环境
    5 规格:
    6 提供商:azure
    7 个参数:
    8 usePodIdentity:“真”
    9 keyvaultname 名称:“”
    10 个对象:|
    11 阵列:
    12          - |
    13 对象名称:k8s-机密-演示
    14 对象类型：机密
    15 顽强:“T0”
    16 个机密项目:
    17 - secretName: key-vault-secret
    18 型:不透明
    19 项数据:
    20-object name:k8s-机密-演示
    21 密钥:机密内容
    让我们研究一下这个文件与您创建的上一个文件有什么不同:
    *   **第 16-21 行**:这是你将钥匙库机密与 Kubernetes 机密链接的地方。这里使用的名称很重要，因为它们提供了不同对象的关键信息:
    *   **第 17 行** **机密名称**:这里指的是 Kubernetes 将要创造的机密的名称。
    *   **第 20 行** **对象名**:这里指的是第 13 行**对象名**，是密钥库中机密的名称。
    *   **第 21 行** **钥匙**:这是 Kubernetes 秘籍中钥匙的名字。正如本章前面所解释的，Kubernetes 中的一个机密可以包含多个密钥。
    该文件的其余部分类似于您创建的早期 SecretProviderClass 类。
2.  You can create this SecretProviderClass using the following command:
    忽必烈 create-f secret providerclass-env . YAML
3.  Once the SecretProviderClass has been created, you can go ahead and create a pod that references that SecretProviderClass. You cannot rely solely on the syncing of the secrets, the SecretProviderClass has to be mounted in order for the CSI driver to sync the secrets. An example has been provided in the **pod-keyvault-env.yaml** file:
    1 堆叠版本:v1
    2 个孩子:Pod
    3 元数据:
    4 名称:CSI-演示-env
    5 个标签:
    6 aadpodidbinding:“CSI-to-key-vault”
    7 规格:
    8 个容器:
    9 -名称:nginx
    10 映像:nginx
    11 环境:
    12 -姓名:KEYVAULT_SECRET
    13 valueFrom:
    14 secretKeyRef:
    15 姓名:钥匙-金库-机密
    16 密钥:机密内容
    17 卷安装:
    18 -名称:keyvault
    19 mount path:"/mnt/secrets-store "
    20 只读:真
    21 卷:
    22 -名称:keyvault
    23 csi:
    24 驱动程序:secrets-store.csi.k8s.io
    25 只读:真
    26 卷属性:
    27 secretProviderClass:“密钥-保管库-机密-环境”
    这个 PODS 和你之前创建的 PODS 的区别在*第 11 到 16 行*上。这似乎很熟悉，因为这是使用机密作为环境变量的典型方式。
4.  You can create this pod using the following command:
    忽必烈 create -f pod-keyvault-env.yaml
5.  Monitor the Pod's creation using the following command:
    忽必烈得到 pods -w
    这将返回类似于图 10.32 的输出:
    ![Monitoring the creation of the csi-demo-env Pod](img/B17338_10_32.jpg)
    图 10.32:等待 csi-demo-env Pod 运行
6.  Once the pod is created and running, you can open a shell in the pod using the **kubectl exec** command and verify that the secret is present:
    忽必烈 exec -it csi 演示-env - sh
    echo $KEYVAULT_SECRET
    这将输出您在密钥库中创建的机密，如图 10.33 所示:
    ![The Secret you configured in Key Vaultis used as an environment variable](img/B17338_10_33.jpg)
    图 10.33:您在密钥库中配置的机密被用作环境变量
7.  现在，您可以使用**退出**命令退出外壳，进入容器。
8.  Finally, you can also verify that the secret was created in Kubernetes by running the following command:
    忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈
    这将向您显示类似于图 10.34 的输出:
    ![The synced secret is available using the kubectl get secret command](img/B17338_10_34.jpg)
    图 10.34:Kubernetes 中的密钥库机密与密钥库机密同步
9.  This secret will disappear once no more pods that mount the secret are present. You can verify this with the following commands:
    忽必烈 delete -f pod-keyvault-env.yaml
    忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈
    这将向您显示类似于图 10.35 的输出:
![Deleting the pod will automatically delete the Secret as well](img/B17338_10_35.jpg)
图 10.35:删除 pod 也会自动删除机密
这向您表明，虽然您有一个 secretprovider 类试图将密钥库机密同步到 Kubernetes 机密，但该同步仅在 pod 引用该 secretprovider 类并装载该机密时发生。
在本节中，您已经能够将密钥库中的一个机密同步到 Kubernetes 中的一个机密。您可以使用环境变量在 pod 中访问该机密的值。
这也结束了关于 Kubernetes 机密的这一章。让我们确保清理我们创建的所有对象:
kubectl delete -f .
删除犯罪现场调查机密
az aks pod-标识删除-资源-组 rg-handsonaks \
- cluster-name handsonaks -命名空间默认值\
-将 csi 命名为密钥库
az 组删除-n CSI-密钥-保管库-是
一旦资源被删除，你就可以进入下一章了。
## 总结
在这一章中，你学习了 Kubernetes 的机密。您既使用了 Kubernetes 中的默认加密机制，也使用了 Secrets Store CSI 驱动程序的 Azure 密钥库提供程序。
本章首先解释了 Kubernetes 中不同的机密类型。之后，你在 Kubernetes 中使用了不同的机制来创造机密。然后，您使用了两种方法来访问这些机密，将它们用作文件或环境变量。
之后，您创建了一个托管身份和一个密钥库，以实验密钥库的 CSI 驱动程序。您在集群上安装了它，并使用了两种机制来访问密钥库中的机密:使用文件或使用环境变量。
在下一章中，您将在 AKS 中了解更多关于网络安全的信息。