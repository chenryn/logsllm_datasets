::: chapter
::: titlepage
# []{#using-sssd-component-from-idm-to-cache-the-autofs-map_managing-file-systems.html#using-sssd-component-from-idm-to-cache-the-autofs-map_managing-file-systems}第 33 章 使用 IdM 中的 SSSD 组件来缓存 autofs 映射 {.title}
:::
系统安全服务守护进程(SSSD)是一种系统服务，来访问远程服务目录和身份验证机制。当网络连接较慢时，数据缓存非常有用。要将
SSSD 服务配置为缓存 autofs 映射，请按照本节中的以下步骤操作。
::: section
::: titlepage
# []{#using-sssd-component-from-idm-to-cache-the-autofs-map_managing-file-systems.html#configuring-autofs-manually-to-use-sssd-and-idm_using-sssd-component-from-idm-to-cache-the-autofs-map}手动配置 autofs ，来将 IdM 服务器用作 LDAP 服务器 {.title}
:::
这个流程演示了如何配置 `autofs`{.literal} ，来将 IdM 服务器用作 LDAP
服务器。
::: orderedlist
**流程**
1.  编辑 `/etc/autofs.conf`{.literal} 文件，来指定 `autofs`{.literal}
    搜索的模式属性：
    ``` literallayout
    #
    # Other common LDAP naming
    #
    map_object_class = "automountMap"
    entry_object_class = "automount"
    map_attribute = "automountMapName"
    entry_attribute = "automountKey"
    value_attribute = "automountInformation"
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    用户可以在 `/etc/autofs.conf`{.literal}
    文件中以小写和大写形式写入属性。
    :::
2.  （可选）指定 LDAP
    配置。有两种方法可以做到这一点：最简单的方法是让自动挂载服务自行发现
    LDAP 服务器和位置：
    ``` literallayout
    ldap_uri = "ldap:///dc=example,dc=com"
    ```
    [*这个选项要求 DNS 包含可发现服务器的 SRV 记录。*]{.emphasis}
    或者，明确设置要使用的 LDAP 服务器，以及用于 LDAP 搜索的基本 DN：
    ``` literallayout
    ldap_uri = "ldap://ipa.example.com"
    search_base = "cn=location,cn=automount,dc=example,dc=com"
    ```
3.  编辑 `/etc/autofs_ldap_auth.conf`{.literal} 文件，以便 autofs
    允许客户端通过 IdM LDAP 服务器进行身份验证。
    ::: itemizedlist
    -   将 `authrequired`{.literal} 更改为 yes。
    -   将主体设置为 IdM LDAP 服务器（[*host/fqdn@REALM*]{.emphasis}）的
        Kerberos 主机主体。主体名称用于连接 IdM 目录，来作为 GSS
        客户端身份验证的一部分。
        ``` literallayout
        ```
        有关主机主体的更多信息，请参阅在 [在 IdM 中使用规范化的 DNS
        主机名](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_and_managing_identity_management/index#using-canonicalized-dns-host-names-in-idm_configuring-and-managing-idm){.link}。
        如有必要，请运行 `klist -k`{.literal} 来获取确切的主机主体信息。
    :::
:::
:::
::: section
::: titlepage
# []{#using-sssd-component-from-idm-to-cache-the-autofs-map_managing-file-systems.html#configuring-sssd-to-cache-autofs-map_using-sssd-component-from-idm-to-cache-the-autofs-map}配置 SSSD 来缓存 autofs 映射 {.title}
:::
SSSD 服务可用于缓存存储在 IdM 服务器上的 `autofs`{.literal}
映射，而无需配置 `autofs`{.literal} 以使用 IdM 服务器。
::: itemizedlist
**先决条件**
-   `sssd`{.literal} 软件包已安装。
:::
::: orderedlist
**流程**
1.  打开 SSSD 配置文件：
    ``` literallayout
    # vim /etc/sssd/sssd.conf
    ```
2.  将 `autofs`{.literal} 服务添加到由 SSSD 处理的服务列表中。
    ``` literallayout
    [sssd]
    domains = ldap
    services = nss,pam,autofs
    ```
3.  创建一个新的 `[autofs]`{.literal} 部分。您可以将此留空，因为
    `autofs`{.literal} 服务的默认设置适用于大多数基础架构。
    ``` literallayout
    [nss]
    [pam]
    [sudo]
    [autofs]
    [ssh]
    [pac]
    ```
    如需更多信息，请参阅 `sssd.conf`{.literal} 手册页。
4.  （可选）为 `autofs`{.literal} 条目设置搜索库。默认情况下，这是 LDAP
    搜索库，但可以在 `ldap_autofs_search_base`{.literal}
    参数中指定子树。
    ``` literallayout
    [domain/EXAMPLE]
    ldap_search_base = "dc=example,dc=com"
    ldap_autofs_search_base = "ou=automount,dc=example,dc=com"
    ```
5.  重启 SSSD 服务：
    ``` literallayout
    # systemctl restart sssd.service
    ```
6.  检查 `/etc/nsswitch.conf`{.literal} 文件，以便 SSSD
    被列为自动挂载配置的源：
    ``` literallayout
    automount: sss files
    ```
7.  重启 `autofs`{.literal} 服务：
    ``` literallayout
    # systemctl restart autofs.service
    ```
8.  通过列出用户的 `/home`{.literal} 目录来测试配置，假设
    `/home`{.literal} 有一个主映射条目：
    ``` literallayout
    # ls /home/userName
    ```
    如果这没有挂载远程文件系统，请检查 `/var/log/messages`{.literal}
    文件是否有错误。如有必要，通过将 `logging`{.literal} 参数设为
    `debug`{.literal} 来提高 `/etc/sysconfig/autofs`{.literal} 文件的
    debug 级别。
:::
:::
:::
[]{#setting-read-only-permissions-for-the-root-file-system_managing-file-systems.html}
::: chapter
::: titlepage
# []{#setting-read-only-permissions-for-the-root-file-system_managing-file-systems.html#setting-read-only-permissions-for-the-root-file-system_managing-file-systems}第 34 章 为 root 文件系统设置只读权限 {.title}
:::
有时，您需要使用只读权限挂载 root
文件系统(`/`{.literal})。示例用例包括在系统意外断电后增强安全性或确保数据完整性。
::: section
::: titlepage
# []{#setting-read-only-permissions-for-the-root-file-system_managing-file-systems.html#files-and-directories-that-always-retain-write-permissions_setting-read-only-permissions-for-the-root-file-system}始终保留写入权限的文件和目录 {.title}
:::
要使系统正常工作，一些文件和目录需要保留写权限。当 root
文件系统以只读模式挂载时，这些文件将使用 `tmpfs`{.literal}
临时文件系统挂载到 RAM 中。
这些文件和目录的默认集合是从 `/etc/rwtab`{.literal}
文件中读取的。请注意，`readonly-root`{.literal}
需要在系统中存在这个文件。
``` screen
dirs	/var/cache/man
dirs	/var/gdm
empty	/tmp
empty	/var/cache/foomatic
files	/etc/adjtime
files	/etc/ntp.conf
```
`/etc/rwtab`{.literal} 文件中的条目遵循以下格式：
``` screen
copy-method    path
```
在这个语法中：
::: itemizedlist
-   用指定如何将文件或者目录复制到 tmpfs 的关键字之一替换
    [*[copy-method]{.replaceable}*]{.emphasis}。
-   使用到文件或目录的路径替换 [*[path]{.replaceable}*]{.emphasis}。
:::
`/etc/rwtab`{.literal} 文件可识别将文件或目录复制到 `tmpfs`{.literal}
的以下方法：
::: variablelist
[`empty`{.literal}]{.term}
:   一个空路径被复制到 `tmpfs`{.literal}。例如：
    ``` screen
    empty /tmp
    ```
[`dirs`{.literal}]{.term}
:   目录树被空复制到 `tmpfs`{.literal}。例如：
    ``` screen
    dirs /var/run
    ```
[`files`{.literal}]{.term}
:   将文件或目录树被完整地复制到 `tmpfs`{.literal}。例如：
    ``` screen
    files /etc/resolv.conf
    ```
:::
在向 `/etc/rwtab.d/`{.literal} 添加自定义路径时，也适用相同的格式。
:::
::: section
::: titlepage
# []{#setting-read-only-permissions-for-the-root-file-system_managing-file-systems.html#configuring-the-root-file-system-to-mount-with-read-only-permissions-on-boot_setting-read-only-permissions-for-the-root-file-system}将 root 文件系统配置为在引导时使用只读权限挂载 {.title}
:::
使用这个流程时，根文件系统将以只读方式安装在所有后续引导上。
::: orderedlist
**流程**
1.  在 `/etc/sysconfig/readonly-root`{.literal} 文件中，将
    `READONLY`{.literal} 选项设为 `yes`{.literal} ：
    ``` screen
    # Set to 'yes' to mount the file systems as read-only.
    READONLY=yes
    ```
2.  在 / `etc/fstab`{.literal} 文件中的 root 条目(`/`{.literal} )中添加
    `ro`{.literal} 选项：
    ``` screen
    /dev/mapper/luks-c376919e...  /  xfs  x-systemd.device-timeout=0,ro  1  1
    ```
3.  在 `/etc/default/grub`{.literal} 文件中的
    `GRUB_CMDLINE_LINUX`{.literal} 指令中添加 `ro`{.literal}
    选项，并确保该指令不包含 `rw`{.literal} ：
    ``` screen
    GRUB_CMDLINE_LINUX="rhgb quiet... ro"
    ```
4.  重新创建 GRUB2 配置文件：
    ``` screen
    # grub2-mkconfig -o /boot/grub2/grub.cfg
    ```
5.  如果您需要在 `tmpfs`{.literal}
    文件系统中添加需要挂载具有写权限的文件和目录，请在
    `/etc/rwtab.d/`{.literal} 目录中创建一个文本文件，并将配置放在其中。
    例如：要将 `/etc/example/file`{.literal}
    文件挂载为具有写权限，请将此行添加到
    `/etc/rwtab.d/example`{.literal} 文件中：
    ``` screen
    files /etc/example/file
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    对 `tmpfs`{.literal} 中的文件和目录所做的更改不会在启动后保留。
    :::
6.  重启系统以应用更改。
:::
::: itemizedlist
**故障排除**
-   如果您错误地将 root
    文件系统挂载为具有只读权限，则可以使用以下命令再次将其重新挂载为具有读写权限：
    ``` screen
    # mount -o remount,rw /
    ```
:::
:::
:::
[]{#assembly_limiting-storage-space-usage-on-xfs-with-quotas_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_limiting-storage-space-usage-on-xfs-with-quotas_managing-file-systems.html#assembly_limiting-storage-space-usage-on-xfs-with-quotas_managing-file-systems}第 35 章 对带有配额的 XFS 限制存储空间的使用 {.title}
:::
您可以使用磁盘配额来限制用户或组群可用的磁盘空间量。您还可以定义一个警告级别，在用户消耗太多磁盘空间或分区已满前通知系统管理员。
XFS 配额子系统管理对磁盘空间（块）和文件(inode)使用情况的限制。XFS
配额控制或报告在用户、组群、目录或项目级别使用这些项目的使用情况。组和项目配额只适用于旧的非默认
XFS 磁盘格式。
在按目录或按项目管理时，XFS
管理与特定项目相关联的目录层次结构的磁盘使用情况。
::: section
::: titlepage
# []{#assembly_limiting-storage-space-usage-on-xfs-with-quotas_managing-file-systems.html#con_disk-quotas_assembly_limiting-storage-space-usage-on-xfs-with-quotas}磁盘配额 {.title}
:::