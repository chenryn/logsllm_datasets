phishing attacks or making a proﬁt by selling personal data.
Speciﬁcally, the adversary must be in physical proximity
of its targets (similar to [88]) and have access to a device with
an off-the-shelf Wi-Fi card to communicate via AWDL [89].
We assume that the adversary has full control over the wire-
less channel and can, e.g., mount machine-in-the-middle at-
tacks [92]. The adversary may lie about its address book (AB)
entries and arbitrarily deviate from the protocol description,
but cannot break Apple’s contact identiﬁer ownership veriﬁ-
cation (cf. § 2.1), i.e., the adversary is unable to forge valid
certiﬁcates for arbitrary contact identiﬁers (IDs).
We assume that Apple is trustworthy as it acts as a certiﬁ-
cate authority (cf. § 2.4) and learns the contact identiﬁers, but
not the address book entries, from all of its users through the
ownership veriﬁcation process.
3.2 Recovering Hashed Contact Identiﬁers
Hashing is insufﬁcient to hide phone numbers or email ad-
dresses as the input space is small/predictable [35, 42, 66].
Phone numbers. Recovering the preimage of a hashed
phone number can be achieved using brute force because the
phone number space is relatively small. For example, a US
phone number contains an area code followed by 7 digits.
Given this small search space (107), it is feasible to check all
possible phone numbers on a PC within seconds.
More precisely, a recent work [42] studied three different
approaches for efﬁciently reversing phone number hashes:
lookups in large-scale key-value stores, brute-force attacks,
and optimized rainbow-table constructions. The authors also
modeled a worldwide database of valid mobile phone number
preﬁxes that revealed vast differences in terms of phone num-
ber structure between countries and, therefore, the size of the
search space (e.g., in Austria, the search space is in the order
of 1010 compared to 107 in the US). Each of the investigated
reversal methods was able to reverse SHA-1 hashes with an
amortized runtime in the order of milliseconds (e.g., 52 ms
for the optimized rainbow-table construction). These results
are directly applicable to estimate the effort required for an
attacker to recover a phone number from the hashes leaked
in AirDrop (cf. § 3.3 and § 3.4). However, since AirDrop
uses SHA-256 instead of SHA-1, the runtime and storage re-
quirements stated in [42] likely increase by around factors 3×
and 1.6×, respectively [49].
Email addresses. Recovering the preimage of a hashed
email address is less trivial but possible via dictionary attacks
that check common email formats such as first.lastname@{
gmail.com,yahoo.com,...}. Alternatively, an attacker could
generate an email lookup table from data breaches [48] or use
an online lookup service for hashed email addresses [34].
3.3 Contact Identiﬁer Leakage of Sender
During the AirDrop authentication handshake, the sender al-
ways discloses their own contact identiﬁers as part of the ini-
tial HTTPS POST /Discover message (cf. Fig. 1). A malicious
receiver can therefore learn all (hashed) contact identiﬁers
of the sender without requiring any prior knowledge of their
target. To obtain these identiﬁers, an attacker simply needs
to wait (e.g., at a public hot spot) until a target device scans
for AirDrop receivers, i.e., the user opens the AirDrop sharing
pane. The target device will freely send a discover message
to any AirDrop receiver found during the previous DNS-SD
service lookup. Therefore, an attacker can learn the target’s
validation record without any authentication by simply an-
nouncing an AirDrop service via multicast DNS (mDNS).
After collecting the validation record, the attacker can recover
the hashed contact identiﬁers ofﬂine.
3.4 Contact Identiﬁer Leakage of Receiver
AirDrop receivers present
in
identiﬁers
the HTTPS 200 OK response to the discover message if they
know any of the sender’s contact identiﬁers included in the val-
idation record (cf. Fig. 1). A malicious sender can thus learn
all contact identiﬁers without requiring any prior knowledge
of the receiver if the receiver knows the sender. Importantly,
the malicious sender does not have to know the receiver: A
popular person within a certain context (e.g., the manager of
a company) can exploit this design ﬂaw to learn all contact
identiﬁers of other people who have the popular person in
their address book (e.g., employees of the company).
4 PrivateDrop: PSI-based Mutual
their contact
Authentication for AirDrop
In the following, we describe how PSI can be applied to real-
ize PrivateDrop, our private mutual authentication protocol
for AirDrop that protects against both attacks described in § 3.
In general, given sender S and receiver R with veriﬁed con-
tact identiﬁers and size-constrained address books (IDsS, ABS)
and (IDsR, ABR), respectively, a privacy-preserving mutual
authentication protocol must ensure that S and R learn at most
those contact identiﬁers of the other party that they already
have in their address book, i.e., S learns at most ABS ∩ IDsR
and R learns at most ABR ∩ IDsS.4
Private set intersection (PSI) protocols are cryptographic
protocols that securely compute the intersection A∩ B for two
parties with respective private input sets A and B. For the
remainder of this paper, we denote the party obtaining the in-
tersection result as PSI receiver and the respective other party
as PSI sender.5 Importantly, with PSI, no elements outside
the intersection, i.e., from (A∪ B)\ (A∩ B), are leaked.
4During AirDrop authentication, S learns IDsR if IDsS ∩ ABR (cid:54)= /0 and R
learns IDsS unconditionally, resulting in the vulnerabilites described in § 3.
5There also exist PSI protocols where both parties can be receivers, but
this property is not required for our authentication purposes.
3580    30th USENIX Security Symposium
USENIX Association
To instantiate PrivateDrop, we ﬁrst ﬁx our requirements
for the authentication protocol, explore the different design
options when applying PSI, choose a suitable PSI protocol
from the literature, adapt and optimize it for our use case, and
seamlessly integrate it into AirDrop.
4.1 Requirements
Our primary goal is to prevent both attacks described in § 3
by protecting contact identiﬁers (Apple-veriﬁed phone num-
bers and email addresses assigned to a user’s Apple account,
cf. § 2.1) and validation records (Apple-signed lists of hashed
contact identiﬁers, cf. § 2.4). Concretely, in terms of function-
ality and privacy for the AirDrop authentication, we want to
simultaneously achieve the following properties:
(a) Disclose validation records only if both parties are mu-
tual contacts. If both parties are mutual contacts, they
already know at least one contact identiﬁer of the respec-
tive other party. Thus, the hash values enclosed in the
validation records do not leak personal information via
brute-force or dictionary attacks (cf. § 3.2).
(b) In the validation records, disclose only those contact
identiﬁers that the other party already knows. Even
though mutual contacts already know at least one con-
tact identiﬁer of the respective other party, the validation
records contain hash values of all registered identiﬁers.
Thus, the hash values of contact identiﬁers not known to
the respective other party leak additional personal infor-
mation via brute-force or dictionary attacks (cf. § 3.2).
We use A knows B as a shorthand for A has one of B’s veriﬁed
contact identiﬁers (IDsB) in their size-constrained (cf. § 4.5)
address book (ABA), or formally: ABA ∩ IDsB (cid:54)= /0.
In terms of performance, we want to minimize computa-
tion as well as communication overhead. This is important to
achieve a low energy consumption for battery-driven mobile
devices and to deliver a great user experience with immediate
responses. Since AirDrop is primarily used on mobile de-
vices, which might be ofﬂine from time to time, our solution
must be fully decentralized and cannot involve an external
server. Furthermore, we have to consider that parties might
act maliciously, i.e., may try to apply arbitrary strategies with
the intent to extract personal information.
4.2 Design Options and Final Design
We now describe how to apply PSI to realize private mu-
tual authentication for AirDrop, considering the requirements
deﬁned in § 4.1. The main task is to replace the insecure ex-
change of hash values that happens in the original authentica-
tion phase as a result of sending validation records (cf. § 2.4).
Our high-level idea summarized in Fig. 2 is to have two
consecutive PSI executions. The ﬁrst execution ensures
the AirDrop sender knows the receiver, the second that
the AirDrop receiver knows the sender. Afterward, as each
party is assured that it is stored in the respective other party’s
AirDrop Sender S
ABS
−−−−−−−−−−→
IDsS
−−−−−−−−−−→
Z=IDsS∩ABR
←−−−−−−−−−−
Z (cid:54)= /0 ⇒ RRR knows SSS
AirDrop Receiver R
IDsR
←−−−−−−−−−−
Z=ABS∩IDsR
−−−−−−−−−−→
Z (cid:54)= /0 ⇒ SSS knows RRR
ABR
←−−−−−−−−−−
PSI
(DO2)
PSI
(DO3)
Figure 2: PrivateDrop’s PSI-based mutual authentication protocol
for AirDrop. The PSI protocols are instantiated using DO2 (green)
and DO3 (orange), cf. § 4.2. Inputs are the parties’ contact identi-
ﬁers (IDs) and address books (AB).
Table 1: Available design options (DO) to use PSI for private mu-
tual authentication in AirDrop. Possible inputs are contact iden-
tiﬁers (IDs) and address books (AB). The parties can act as PSI
sender (PSI S) or PSI receiver (PSI R).
Design Option
DO1
DO2
DO3
DO4
Role of AirDrop Sender
Input of AirDrop Sender
Role of AirDrop Receiver
Input of AirDrop Receiver
PSI S
PSI S
IDs
AB
PSI R PSI R
IDs
AB
PSI R PSI R
AB
IDs
PSI S
PSI S
IDs
AB
address book, it is safe for them to reveal their contact identi-
ﬁers and validation records. In the following, we detail how to
conﬁgure the PSI executions to achieve the described outcome
by systematically analyzing all possible design options.
The design options (DOs) listed in Tab. 1 differ in
(a) the PSI inputs for the AirDrop sender and receiver, i.e.,
contact identiﬁers and address books, (b) the roles the parties
take in PSI, and (c) the order in which the DOs are executed.
Note that we exclude combinations where both parties input
their contact identiﬁers since the intersection will always be
empty. Likewise, we do not consider both parties using their
address book as input, since this variant (formalized in [32]
as private contact discovery between two users) yields the
parties’ common contacts (i.e., ﬁnds “friends of friends” [12])
but does not determine whether they are mutual contacts.
Regarding the assignment of the PSI roles and the execution
order, we can exclude further combinations. As both AirDrop
sender and receiver must be assured of being mutual contacts,
each must act as PSI receiver once. In the authentication pro-
cess, the AirDrop sender should be the ﬁrst to reveal informa-
tion as otherwise malicious senders could easily extract such
information from a large number of innocent receivers by trig-
gering the authentication process. Therefore, the options must
be chained such that the AirDrop receiver acts as PSI receiver
ﬁrst (DO1 or DO2) and as sender second (DO3 or DO4). In
the following, we discuss the two remaining possibilities.
DO1 →→→ DO4. Here, the PSI sender has their contact iden-
tiﬁers as input, whereas the PSI receiver has their address
book as input. As a result, each party is assured that the other
party is one of its contacts. This is the exact semantic as
USENIX Association
30th USENIX Security Symposium    3581
in the original (insecure) authentication protocol. However,
since malicious AirDrop receivers do not necessarily abort
after receiving an empty result set in the ﬁrst PSI execution,
AirDrop senders have no proof that the receivers know them
before revealing their contact identiﬁers. Since we strictly
want to avoid this information leakage (cf. § 3.3), we dis-
card DO1 → DO4.
DO2 →→→ DO3. Here, the PSI sender has their address book
as input, whereas the PSI receiver has their contact identiﬁers
as input. At the end of the authentication process, each party
can be assured that it is stored in the respective other party’s
address book. Thus, the AirDrop sender can safely share their
contact identiﬁers that appeared in the outcome of the DO3
execution since the other party already has them stored.
In conclusion, by executing DO2 → DO3 in that particular
order (as visualized in Fig. 2), we can fulﬁll the functional
and privacy requirements deﬁned in § 4.1, and prevent our
attacks described in § 3.
4.3 Choice of PSI Protocol
Now that we ﬁxed in which order two PSI protocols have
to be run, we need to ﬁnd instantiations. In the literature,
many two-party PSI protocols are proposed that could be ap-
plied (cf. § 7.2). Especially, a sub-category of PSI protocols
specializes in unbalanced set sizes, where one party has a
much larger input set than the other [26, 27, 55, 59, 82]. The
protocols [26, 27] are based on homomorphic encryption with
communication linear in the size of the smaller set, but they
are computationally expensive. The fastest unbalanced PSI
protocols for mobile clients [55, 59, 82] shift most public-
key operations to an input-independent precomputation phase
and send an encrypted and compressed representation of the
larger input set ahead of time to achieve fast online runtimes.
Moreover, the protocols of [55] provide security against mali-
cious PSI receivers but only work for semi-honest senders.
However, even though we deal with unbalanced sets, here,
the size of the larger input set is determined by the maxi-
mum number of address book entries. The size of address
books can be reasonably assumed to be well below 100 k
and is not in the order of hundreds of millions as consid-
ered for unbalanced PSI. Thus, protocols based entirely on
public-key encryption (which are extremely inefﬁcient at a
large scale) can achieve practical performance. In our setting,
both parties are not constrained by business incentives or se-
vere legal consequences to behave semi-honestly. Therefore,
we must choose a protocol with security against a malicious