(ISPASS). 2010. DOI: 10.1109/ISPASS.2010.5452024.
[22] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur
Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim
Hazelwood. “Pin: building customized program analysis tools with
dynamic instrumentation”. In: Acm sigplan notices. Vol. 40. ACM.
2005.
Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas
Hobor. “Making smart contracts smarter”. In: Proceedings of the
ACM SIGSAC Conference on Computer and Communications Security
(CCS). ACM. 2016.
[23]
[24] Mark Mossberg, Felipe Manzano, Eric Hennenfent, Alex Groce, Gus-
tavo Grieco, Josselin Feist, Trent Brunson, and Artem Dinaburg. “Man-
ticore: A User-Friendly Symbolic Execution Framework for Bina-
ries and Smart Contracts”. In: CoRR abs/1907.03890 (2019). arXiv:
1907.03890.
[25] ConsenSys. Mythril v0.19.7 - Security analysis tool for EVM bytecode.
https://github.com/ConsenSys/mythril.
[26] New burnOverﬂow Bug Identiﬁed in Multiple ERC20 Smart Contracts
(CVE-2018-11239). URL: https://blog.peckshield.com/2018/
05/18/burnOverflow (visited on 05/27/2019).
[27] New multiOverﬂow Bug Identiﬁed in Multiple ERC20 Smart Contracts
(CVE-2018-10706). URL: %7Bhttps://blog.peckshield.com/
2018/05/10/multiOverflow%7D (visited on 05/27/2019).
Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and
Aquinas Hobor. “Finding The Greedy, Prodigal, and Suicidal Contracts
at Scale”. In: 34th Annual Computer Security Applications Conference
(ACSAC). 2018. DOI: 10.1145/3274694.3274743.
[28]
[29] Mathias Payer, Boris Bluntschli, Thomas R Gross, et al. “DynSec:
On-the-ﬂy Code Rewriting and Repair”. In: HotSWUp. 2013.
PeckShield advisories. URL: https : / / blog . peckshield . com /
advisories.html (visited on 05/27/2019).
[30]
[31] Rob Price. Digital currency Ethereum is cratering because of a $50
million hack. June 2016. URL: https://www.businessinsider.
com/dao- hacked- ethereum- crashing- in- value- tens- of-
millions-allegedly-stolen-2016-6 (visited on 04/20/2018).
[33]
[34]
[35]
[32] Michael Rodler, Wenting Li, Ghassan O. Karame, and Lucas Davi.
“Sereum: Protecting Existing Smart Contracts Against Re-Entrancy
Attacks”. In: Proceedings of the Network and Distributed System Secu-
rity Symposium (NDSS). 2019. DOI: 10.14722/ndss.2019.23413.
SafeMath library - Wrappers over Solidity’s arithmetic operations
with added overﬂow checks. URL: https : / / github . com /
OpenZeppelin / openzeppelin - solidity / blob / master /
contracts/math/SafeMath.sol (visited on 06/03/2020).
SEI CERT C Coding Standard: INT30-C. Ensure that unsigned integer
operations do not wrap. URL: https : / / wiki . sei . cmu . edu /
confluence/display/c/INT30- C.+Ensure+that+unsigned+
integer+operations+do+not+wrap (visited on 06/03/2020).
Slither Wiki: Upgradeability Checks. URL: https://github.com/
crytic / slither / wiki / Upgradeability - Checks (visited on
06/02/2019).
SmartMeshICO. URL: https : / / etherscan . io / address /
0x55F93985431Fc9304077687a35A1BA103dC1e081.
Social Chain. URL: https : / / etherscan . io / address /
0xb75a5e36cc668bc8fe468e8f272cd4a0fd0fd773.
Parity Technologies. A Postmortem on the Parity Multi-Sig Library
Self-Destruct. Nov. 2017. URL: http : / / paritytech . io / a -
postmortem - on - the - parity - multi - sig - library - self -
destruct (visited on 06/03/2020).
Parity Technologies. Security Alert - Parity Wallet. Nov. 2017.
URL: http : / / paritytech . io / security - alert (visited on
04/06/2018).
[36]
[37]
[38]
[39]
[41]
[40] Christof Ferreira Torres, Mathis Baden, Robert Norvill, Beltran Borja
Fiz Pontiveros, Hugo Jonker, and Sjouke Mauw. “ÆGIS: Shielding
Vulnerable Smart Contracts Against Attacks”. In: (Mar. 2020). arXiv:
2003.05987 [cs.CR].
Trail of Bits Blog: How contract migration works. URL: https :
/ / blog . trailofbits . com / 2018 / 10 / 29 / how - contract -
migration-works (visited on 06/03/2020).
Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur Gervais,
Florian Buenzli, and Martin Vechev. “Securify: Practical security anal-
ysis of smart contracts”. In: Proceedings of the 2018 ACM SIGSAC
Conference on Computer and Communications Security. 2018.
[42]
[43] UselessEthereumToken. URL: https://etherscan.io/address/
0x27f706edde3aD952EF647Dd67E24e38CD0803DD6.
[44] Gavin Wood. Ethereum: A secure decentralised generalised transac-
tion ledger. Speciﬁcation. Version BYZANTIUM VERSION 7e819ec
- 2019-10-20. Ethereum Foundation, Oct. 20, 2019. URL: https://
ethereum.github.io/yellowpaper/paper.pdf.
ZeppelinOS Blog: Proxy Patterns. URL: https://blog.zeppelinos.
org/proxy-patterns (visited on 06/03/2020).
ZeppelinOS Documentation. URL: https://docs.zeppelinos.org
(visited on 06/03/2020).
[45]
[46]
[47] Yuyao Zhang, Siqi Ma, Juanru Li, Kailai Li, Surya Nepal, and Dawu
Gu. “SMARTSHIELD: Automatic Smart Contract Protection Made
Easy”. In: 27th IEEE International Conference on Software Analy-
sis, Evolution and Reengineering, (SANER). 2020. DOI: 10.1109/
SANER48275.2020.9054825.
USENIX Association
30th USENIX Security Symposium    1305
Table 5: Developer study questionnaire and answers by six developers (identiﬁed by the letters A to F).
Question
Did you write Solidity code in the last two weeks?
Have you previously worked
on a production-grade Solidity-based Ethereum contract?
Have you previously worked on a production-grade
smart contract on another Blockchain Platform?
How familiar are you with Blockchain technologies in general?
How
familiar are you with the Ethereum Blockchain in particular?
How familiar are you with the Solidity programming language?
How familiar are you with upgradable contracts in Solidity?
How
conﬁdent are you in the correctness of your patch to contract 1?
How
conﬁdent are you in the correctness of your patch to contract 2?
How
conﬁdent are you in the correctness of your patch to contract 3?
How much time did you need to patch all three contracts?
Have you previously
used the delegatecall-proxy pattern in a Solidity contract?
Have you previously
used a different pattern to make a Solidity contract upgradable?
Have you previously used a different upgradable smart contract?
How conﬁdent are you in the correctness of your conversion?
How difﬁcult was the manual conversion?
How difﬁcult was the conversion using the evmpatch tool?
How much time did you
need to convert the contract to an upgradable contract (Step 1)?
How much time
did you need to convert the contract using EVMPatch (Step 2)?
How conﬁdent are you in the correctness of your patch?
How difﬁcult was the conversion using the EVMPatch tool?
How much time
did you need to create and deploy the patch using EVMPatch?
Answers
E
D
no
no
no
yes
no
yes
F
no
no
yes
B
no
no
no
C
no
no
yes
Median
5
5
3
3
7
7
5
7
4
2
1
7
7
6
6
2
1
1
6
4
5
6
6
5
4
7
7
2
6
2
1
1
6
6
4
6
4.5
2.5
2
6.5
6.5
4.5
A
no
yes
no
6
6
6
5
Task 1
5
6
3
78
35
40
40
55
63
47.5
Task 2
no
no
no
5
4
1
110
3
Task 3
6
2
15
no
no
no
3
5
1
80
1
7
1
2
no
no
no
1
5
1
45
1
7
1
5
no
no
no
1
6
1
90
2
7
1
2
no
no
no
5
4
1
40
3
7
1
6
no
no
no
2
6
1
33
1
6
1
3
2.5
5
1
62.5
1.5
7
1
4
Q1
Q2
Q3
Q4
Q5
Q6
Q7
T1Q1
T1Q2
T1Q3
T1Q4
T2Q1
T2Q2
T2Q3
T2Q4
T2Q5
T2Q6
T2Q8
T2Q8
T3Q1
T3Q2
T3Q3
Scale
(yes/no)
(yes/no)
(yes/no)
(1 not familiar,
7 very familiar)
(1 not familiar,
7 very familiar)
(1 not familiar,
7 very familiar)
(1 not familiar,
7 very familiar)
(1 least conﬁdent,
7 most conﬁdent)
(1 least conﬁdent,
7 most conﬁdent)
(1 least conﬁdent,
7 most conﬁdent)
(Time in Minutes)
(yes/no)
(yes/no)
(yes/no)
(1 least conﬁdent,
7 most conﬁdent)
(1
easy, 7 most difﬁcult)
(1
easy, 7 most difﬁcult)
(Time in Minutes)
(Time in Minutes)
(1 least conﬁdent,
7 most conﬁdent)
(1
easy, 7 most difﬁcult)
(Time in Minutes)
1306    30th USENIX Security Symposium
USENIX Association