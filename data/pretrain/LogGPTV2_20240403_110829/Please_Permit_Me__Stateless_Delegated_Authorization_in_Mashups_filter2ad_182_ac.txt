[2] Mint.com personal ﬁnance website. Online at http://
www.mint.com.
[3] Web services delegation via MyProxy. Online at http://
grid.ncsa.uiuc.edu/myproxy/delegation/.
[4] OAuth Speciﬁcation 1.0. Online at http://oauth.net/
core/1.0, 2007.
[5] M. Altinel, P. Brown, S. Cline, R. Kartha, E. Louie, V. Markl,
L. Mau, Y. Ng, D. Simmen, and A. Singh. Damia: a data
mashup fabric for intranet applications. In Proceedings of the
33rd International Conference on Very Large Data Bases,
pages 1370–1373. VLDB Endowment, 2007.
[6] J. Basney, M. Humphrey, and V. Welch. The myproxy on-
line credential repository. Software- Practice & Experience,
35(9):801–816, 2005.
[7] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust
In Proceedings of the 1996 IEEE Sympo-
management.
sium on Security and Privacy, pages 164–173, Oakland, CA,
1996.
[8] M. Blaze, J. Ioannidis, and A. Keromytis. Experience with
the KeyNote trust management system: Applications and
In Proceedings of the 1st International
future directions.
Conference on Trust Management, pages 284–300. Springer,
2003.
[9] S. Cetin, N. Altintas, H. Oguztuzun, A. Dogru, O. Tufekci,
and S. Suloglu. A mashup-based strategy for migration to
service-oriented computing. In Proceedings of the IEEE In-
ternational Conference on Pervasive Services, pages 169–
172, 2007.
[10] D. Chadwick, A. Otenko, and E. Ball. Role-based access
control with x.509 attribute certiﬁcates. IEEE Internet Com-
puting, 07(2):62–69, 2003.
[11] M. Davidson and E. Yoran. Enterprise security for web 2.0.
COMPUTER, pages 117–119, 2007.
[12] R. Dhamija, J. Tygar, and M. Hearst. Why phishing works. In
Proceedings of the SIGCHI conference on Human Factors in
computing systems, pages 581–590. ACM Press New York,
NY, USA, 2006.
[13] Google. Google account authentication (authsub). Online
http://code.google.com/apis/accounts/
at
AuthForWebApps.html.
[14] T. Hornung, K. Simon, and G. Lausen. Mashing up the
deep web - research in progress. In 4th International Con-
ference on Web Information Systems and Technologies (WE-
BIST) 2008, pages 58–66, Funchal, Madeira, Portugal, May
2008.
[15] J. Howell, C. Jackson, H. Wang, and X. Fan. MashupOS:
In Pro-
Operating system abstractions for client mashups.
ceedings of the Workshop on Hot Topics in Operating Sys-
tems, May 2007.
[16] C. Jackson and H. Wang. Subspace: secure cross-domain
communication for web mashups. In Proceedings of the 16th
International Conference on World Wide Web, pages 611–
620. ACM Press New York, NY, USA, 2007.
[17] A. Jhingran. Enterprise information mashups: integrating in-
formation, simply. In Proceedings of the 32nd International
Conference on Very Large Data Bases, pages 3–4. VLDB
Endowment, 2006.
[18] J. Kahan. A capability-based authorization model for the
world-wide web. Computer Networks and ISDN Systems,
27(6):1055–1064, 1995.
[19] P. Karger. Mashups legitimize man-in-the-middle attacks:
In IEEE Web 2.0 Security and Privacy
A position paper.
Workshop. IEEE, 2007.
[20] F. D. Keukelaere, S. Bhola, M. Steiner, S. Chari, and
S. Yoshihama. Smash: secure component model for cross-
In WWW ’08:
domain mashups on unmodiﬁed browsers.
Proceeding of the 17th International Conference on World
Wide Web, pages 535–544, New York, NY, USA, 2008.
ACM.
[21] N. Kulathuramaiyer. Mashups: Emerging application devel-
opment paradigm for a digital journal. Journal of Universal
Computer Science, 13(4):531–542, April 2007.
[22] G. Lawton. Web 2.0 creates security challenges. IEEE COM-
PUTER, 40:13–16, 2007.
[23] N. Li, B. Grosof, and J. Feigenbaum. Delegation logic:
A logic-based approach to distributed authorization. ACM
Trans. Inf. Syst. Secur., 6(1):128–171, 2003.
[24] X. Liu, Y. Hui, W. Sun, and H. Liang. Towards service
composition based on mashup. In Proceedings of the IEEE
Congress on Services, pages 332–339, 2007.
[25] J. Lopez, R. Oppliger, and G. Pernul. Authentication and
authorization infrastructures (aais): a comparative survey.
Computers & Security, 23(7):578–590, 2004.
[26] S. K. Makki and J. Sangtani. Data mashups & their applica-
tions in enterprises. In Third IEEE International Conference
on Internet and Web Applications and Services, pages 445–
450, Athens, Greece, June 2008.
[27] D. Merrill. Mashups: The new breed of web app. IBM Web
Architecture Technical Library, 2006.
[28] D. Recordon and D. Reed. Openid 2.0: a platform for user-
centric identity management. In DIM ’06: Proceedings of
the second ACM workshop on Digital identity management,
pages 11–16, New York, NY, USA, 2006. ACM.
[29] C. Severance, G. Hardin, and A. Whyte. The coming func-
tionality: mash-up in personal learning environments. Inter-
active Learning Environments, 16(1):47–62, 2008.
[30] N. Zang, M. Rosson, and V. Nasser. Mashups: who? what?
why? In CHI ’08: CHI ’08 extended abstracts on Human
factors in computing systems, pages 3171–3176, New York,
NY, USA, 2008. ACM.
[31] J. Zou and C. Pavlovski. Towards accountable enterprise
In Proceedings of the IEEE Interna-
mashup services.
tional Conference on e-Business Engineering, pages 205–
212. IEEE Computer Society Washington, DC, USA, 2007.
170180
Appendix
This appendix contains details of our implementation of
the permit-based delegated authorization system.
Format of Delegation Permits
The format of the Delegation Permit is presented in Table
1, and an example is shown in Table 2. Each ﬁeld in a del-
egation permit (DP) is utf8 text; binary objects are base64-
encoded as noted. Fields are concatenated together into the
DP, demarcated by “|”. The DP data structure is intended
to allow for optional ﬁelds and does not enforce ﬁeld or-
dering (except for the preﬁx, which must come ﬁrst). The
initial optional ﬁelds that the PGS currently recognizes are
included below, but this does not represent an exhaustive list
of what may eventually be included. At this time the PGS
will simply ignore ﬁelds that it does not understand and it is
assumed that initial client libraries will do the same
Permit Grant Service (PGS)
The default behavior of the PGS is be to prompt for au-
thorization every time the mashup requests it. Decisions
will be remembered by storing a cookie in the PGS’s do-
main, where the cookie will store the information shown in
Table 3 (similarly to how that information is stored in the
permit). An example permit cookie is shown in Table 4.
When the PGS receives a request, it will inspect any pre-
sented state cookies to determine if the currently requested
permissions are a subset of those stored in the cookie. If
so, the user will not be re-prompted. If not, then the user
will be shown the delegate-permissions screen with indica-
tions of which permissions are currently granted and what
has changed, with the ability to grant or deny changes.
A set of permissions is a subset of what is stored in the
cookie only if:
• The user ID matches.
• The service matches.
• The destination URL in the request is a valid URL for
• The time since the last interactive authorization is not
• Each resource in the request is in the cookie, paired
too long (e.g., on the order of a month).
the speciﬁed service.
with the same permit descriptor.
Permit History Service (PHS)
The PHS can be used by the user to view what per-
mits the user has granted to various applications in the past.
When the user goes to the Permit History Service, a list of
application servers, and the group of permits granted to each
171181
Param Description
Permit
preﬁx
uid
g
ng
s
ds
pd
lt
pt
at
sig
This is a freeform text ﬁeld that represents the
permit’s protocol variant. This document de-
scribes preﬁx “permit v1”, but it is assumed
other permits will be similar
User ID for whom this permit was created
Requested LDAP groups for which the user’s
membership is veriﬁed, delimited by “,”
Requested LDAP groups for which the user is
not a member, delimited by “,”
The service for which this permit was created.
This will take the form of a DNS name plus
an HTTP URI preﬁx denoting what subsec-
tion of that site the ticket applies to. For ex-
ample: “abc.acme.com/” applies to the entire
abc.acme.com web site, “www.acme.com/eng”
applies to any URI on www.acme.com that
begins with “/eng”, “foobar.com:9999/” ap-
plies to any URI on foobar.com using the non-
standard port 9999
Delegated service label. A human-readable la-
bel representing the service which delegated
access was requested
Permit descriptor. A human-readable label rep-
resenting some level of authorization (for ex-
ample “MyBugTracker Read-Only Access” or
“MyProjectDB Read Self Access”)
Login time. The time that the user’s credentials
were veriﬁed (GMT formatted “YYYYMMD-
Dhhmmss”, e.g. “20040308162144”)
Permit issue time. The time at which the permit
was actually issued to the user (GMT formatted
“YYYYMMDDhhmmss”)
Permit approval time. The time at which the
user last saw the delegate-permissions screen
and actually authorized this permit (GMT for-
matted “YYYYMMDDhhmmss”)
A digital signature on the “|”-delimited con-
catenation of the other permit ﬁelds ordered as
they appear in the permit (with no pipe at the
beginning or end). The signature consists of
three ﬁelds separated by “|”:
‘DSA’)
• alg – the signature algorithm (typically
• kid – the key identiﬁer (as passed in the
• sig – the base-64-encoded SHA1withDSA
request)
digital signature
Table 1. Details of delegation permit format
permit_v1|uid=testuser|g=eng|ng=hip|
s=mycoolapp.com/|ds=MyCoolApp|pd=
MyBugTrackerRead-Only|lt=2007022912000|
pt=2007022912000|at=2007022912000|alg=
DSA|kid=FOO|sig=B64ENCODEDDSASIG|
|alice|mycoolapp.com/app|https:
//mycoolapp.com/app/start.html|
MyBugTracker:MyBugTrackerRead-OnlyAccess|
MyProjectDB:MyProjectDBRead-OnlyAccess|
SIGNATURE|
Table 2. Example delegation permit
Table 4. Example permit cookie
Parameter Description
UserID
service
authTime
PermitReq
sig
User for whom this permit was created.
The service for which this permit was cre-
ated.
The last time the user actually authorized
these permissions. In format “YYYYM-
MDDhhmmss”, e.g. “20040308162144”.
For each permit request, this ﬁeld records
the resource for which the permit is re-
quested, and the permit descriptor.
Signature for this cookie.
Table 3. Format of permit cookies
server, is displayed. The user can choose to delete any of the
permission groups. Permit grant history is maintained in a
cookie named “SSO P ERM IT HIST ORY ”. When the
user clicks on delete for a permit group, the corresponding
permit group is removed from the cookie. The PHS also
redirects to the permit handler service of the corresponding
mashup server and requests it to delete the selected permits
from its permit cookie.
Redirects to the Permit Granting Service
When an application requires a permit to access another
service on behalf of the user, it communicates that need by
redirecting the client browser to the PGS along with its re-
quirements. The parameters provided to the PGS as HTTP
GET-encoded parameters are shown in Table 5:
Redirects to the Mashup’s Permit Handler
Every relying application server is required to provide
the following support at its permit handler URL, which
is the name of its service as provided to the PGS +
“permithandler”, such as “https://mycoolapp.com/
app/permithandler”. The URL will receive requests
as GET or as POST with the parameters given in Table 6.
Typically the mashup’s permit handler will:
1. Parse the request to retrieve the permits (fails on parse
2. Ensure that the permit preﬁxes all match what was ex-
errors).
pected.
3. Validate the signatures on the permits.
Param Required?
v
required
s
d
g
required
required
optional, re-
peated
pi res
required
pi desc required
k
required
Description
The preﬁx indicating the ver-
sion/purpose of the permit
The name of the service issuing
the permit request
The destination URL to which
the user should be redirected af-
ter the permission granting pro-
cess is complete
Each parameter speciﬁes a group
for which the application wants
to know the user’s membership,
using the same “cn” or “ou/cn”
encoding as used in permits. If
not present, no group info is re-
turned.
foreach i = 1 ... n (where n is
the number of requested per-
mits)
The name of the resource for
which the request is seeking a
permit
The requested permit descriptor
The ﬁrst three characters of the
SHA-1 hash of the public key
corresponding to the requested
private signature key
Table 5. Redirect format
4. Ensure that the username matches across all permits
and with the login ticket.
5. Copy the validated permits into domain-restricted ses-
sion cookies.
6. Issue a redirect to the destination page.
Param Description
p
d
A new permit for this server to use when mak-
ing back-end requests (there can be one or more
p parameters, each representing a different per-
mit)
The URL to redirect to after processing the per-
mits.
Table 6. GET/POST Parameters for Redirects
to Mashup Permit Handlers
172182