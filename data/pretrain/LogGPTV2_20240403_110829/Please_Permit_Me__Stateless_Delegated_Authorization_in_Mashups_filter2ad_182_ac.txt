以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

[2] Mint.com 个人理财网站。在线访问：http://www.mint.com.

[3] MyProxy 的 Web 服务委托。在线访问：http://grid.ncsa.uiuc.edu/myproxy/delegation/.

[4] OAuth 规范 1.0。在线访问：http://oauth.net/core/1.0, 2007.

[5] M. Altinel, P. Brown, S. Cline, R. Kartha, E. Louie, V. Markl, L. Mau, Y. Ng, D. Simmen, 和 A. Singh. DAMIA: 一种用于内联网应用的数据混搭结构。第 33 届国际非常大型数据库会议论文集，第 1370-1373 页。VLDB Endowment, 2007.

[6] J. Basney, M. Humphrey, 和 V. Welch. MyProxy 在线证书库。Software-Practice & Experience, 35(9):801–816, 2005.

[7] M. Blaze, J. Feigenbaum, 和 J. Lacy. 去中心化信任管理。1996 IEEE 安全与隐私研讨会论文集，第 164-173 页，加利福尼亚州奥克兰市，1996 年。

[8] M. Blaze, J. Ioannidis, 和 A. Keromytis. KeyNote 信任管理系统经验：应用及未来方向。第一届国际信任管理会议论文集，第 284-300 页。Springer, 2003.

[9] S. Cetin, N. Altintas, H. Oguztuzun, A. Dogru, O. Tufekci, 和 S. Suloglu. 向面向服务计算迁移的基于混搭策略。IEEE 国际普适服务会议论文集，第 169-172 页，2007.

[10] D. Chadwick, A. Otenko, 和 E. Ball. 基于 X.509 属性证书的角色访问控制。IEEE Internet Computing, 07(2):62–69, 2003.

[11] M. Davidson 和 E. Yoran. Web 2.0 企业安全。COMPUTER, 第 117-119 页, 2007.

[12] R. Dhamija, J. Tygar, 和 M. Hearst. 网络钓鱼为何有效。SIGCHI 计算系统中的人为因素会议论文集，第 581-590 页。ACM Press New York, NY, USA, 2006.

[13] Google. Google 账户认证 (AuthSub)。在线访问：http://code.google.com/apis/accounts/AuthForWebApps.html.

[14] T. Hornung, K. Simon, 和 G. Lausen. 深网混搭 - 进行中的研究。第四届国际 Web 信息系统和技术会议 (WEBIST) 2008，第 58-66 页，马德拉丰沙尔，葡萄牙，2008 年 5 月。

[15] J. Howell, C. Jackson, H. Wang, 和 X. Fan. MashupOS: 面向客户端混搭的操作系统抽象。操作系统热门话题研讨会论文集，2007 年 5 月。

[16] C. Jackson 和 H. Wang. Subspace: Web 混搭的安全跨域通信。第 16 届国际万维网大会论文集，第 611-620 页。ACM Press New York, NY, USA, 2007.

[17] A. Jhingran. 企业信息混搭：简单的信息集成。第 32 届国际非常大型数据库会议论文集，第 3-4 页。VLDB Endowment, 2006.

[18] J. Kahan. 一种基于能力的世界范围网络授权模型。Computer Networks and ISDN Systems, 27(6):1055–1064, 1995.

[19] P. Karger. 混搭合法化中间人攻击：立场文件。IEEE Web 2.0 安全与隐私研讨会。IEEE, 2007.

[20] F. D. Keukelaere, S. Bhola, M. Steiner, S. Chari, 和 S. Yoshihama. Smash: 未修改浏览器上跨域混搭的安全组件模型。WWW '08: 第 17 届国际万维网大会论文集，第 535-544 页，纽约，美国，2008。ACM.

[21] N. Kulathuramaiyer. 混搭：数字期刊的应用开发新范式。Journal of Universal Computer Science, 13(4):531–542, 2007 年 4 月。

[22] G. Lawton. Web 2.0 带来的安全挑战。IEEE COMPUTER, 40:13–16, 2007.

[23] N. Li, B. Grosof, 和 J. Feigenbaum. 委托逻辑：一种基于逻辑的分布式授权方法。ACM Trans. Inf. Syst. Secur., 6(1):128–171, 2003.

[24] X. Liu, Y. Hui, W. Sun, 和 H. Liang. 朝向基于混搭的服务组合。IEEE 服务大会论文集，第 332-339 页，2007.

[25] J. Lopez, R. Oppliger, 和 G. Pernul. 认证和授权基础设施 (AAIs)：比较调查。Computers & Security, 23(7):578–590, 2004.

[26] S. K. Makki 和 J. Sangtani. 数据混搭及其在企业中的应用。第三届 IEEE 国际互联网和 Web 应用及服务会议论文集，第 445-450 页，希腊雅典，2008 年 6 月。

[27] D. Merrill. 混搭：新一代 Web 应用。IBM Web 架构技术库，2006.

[28] D. Recordon 和 D. Reed. OpenID 2.0: 用户为中心的身份管理平台。DIM '06: 第二届 ACM 数字身份管理研讨会论文集，第 11-16 页，纽约，美国，2006. ACM.

[29] C. Severance, G. Hardin, 和 A. Whyte. 即将到来的功能性：个人学习环境中的混搭。Interactive Learning Environments, 16(1):47–62, 2008.

[30] N. Zang, M. Rosson, 和 V. Nasser. 混搭：谁？什么？为什么？CHI '08: CHI '08 人类计算系统扩展摘要，第 3171-3176 页，纽约，美国，2008. ACM.

[31] J. Zou 和 C. Pavlovski. 朝向可问责的企业混搭服务。IEEE 国际电子商务工程会议论文集，第 205-212 页。IEEE Computer Society Washington, DC, USA, 2007.

附录
本附录包含我们实现的基于许可的委托授权系统的详细信息。
委托许可格式
表 1 中展示了委托许可 (DP) 的格式，并在表 2 中提供了一个示例。每个字段都是 UTF-8 文本；二进制对象按需使用 base64 编码。字段通过“|”连接在一起构成 DP。DP 数据结构允许可选字段且不强制字段顺序（前缀除外）。目前 PGS 识别的初始可选字段如下所示，但这并不表示最终可能包括的所有内容。目前 PGS 将忽略其无法理解的字段，假设初始客户端库也会这样做。
许可授予服务 (PGS)
PGS 的默认行为是在每次混搭请求时提示授权。决定将通过在 PGS 的域中存储 cookie 来记住，cookie 存储的信息如表 3 所示（类似于该信息在许可中的存储方式）。一个示例许可 cookie 如表 4 所示。当 PGS 收到请求时，它会检查任何呈现的状态 cookie 以确定当前请求的权限是否是存储在 cookie 中的权限的子集。如果是，则不会重新提示用户。否则，用户将看到带有当前已授予权限指示的委托权限屏幕以及发生了哪些更改，并能够批准或拒绝更改。
一组权限只有在以下情况下才是存储在 cookie 中的权限的子集：
- 用户 ID 匹配。
- 服务匹配。
- 请求中的目标 URL 是有效的 URL。
- 自上次交互式授权以来的时间不太长（例如，大约一个月）。
- 请求中的每个资源都在 cookie 中，与指定服务配对，并具有相同的许可描述符。
许可历史服务 (PHS)
用户可以使用 PHS 查看过去已授予各种应用程序的许可。当用户访问许可历史服务时，会显示应用程序服务器列表以及授予每个服务器的许可组。用户可以选择删除任何权限组。许可授予历史记录保存在一个名为“SSO PERMIT HISTORY”的 cookie 中。当用户点击删除某个许可组时，相应的许可组将从 cookie 中移除。PHS 还会重定向到相应混搭服务器的许可处理程序服务，并请求其从其许可 cookie 中删除所选许可。
重定向到许可授予服务
当应用程序需要许可来代表用户访问另一个服务时，它会通过将客户端浏览器重定向到 PGS 并附带其需求来传达这一需求。作为 HTTP GET 编码参数提供给 PGS 的参数如表 5 所示：
重定向到混搭的许可处理程序
每个依赖应用程序服务器都必须在其许可处理程序 URL 提供以下支持，该 URL 是提供给 PGS 的服务名称加上“permithandler”，例如“https://mycoolapp.com/app/permithandler”。URL 将接收 GET 或 POST 请求，参数如表 6 所示。通常混搭的许可处理程序将执行以下操作：
1. 解析请求以检索许可（解析错误时失败）。
2. 确保所有许可前缀都符合预期。
3. 验证许可上的签名。
4. 确保所有许可中的用户名与登录票据中的用户名一致。
5. 将验证过的许可复制到域限制的会话 cookie 中。
6. 重定向到目标页面。

表 5. 重定向格式

| 参数 | 必填? | 描述 |
| --- | --- | --- |
| v | 必须 | 表示许可版本/目的的前缀 |
| s | 必须 | 发出许可请求的服务名称 |
| d | 必须 | 用户在完成权限授予过程后应被重定向的目标 URL |
| g | 可选，重复 | 每个参数指定应用程序希望知道用户成员资格的组，使用与许可中相同的“cn”或“ou/cn”编码。如果不存在，则不返回组信息。 |
| pi res | 必须 | 请求许可的资源名称 |
| pi desc | 必须 | 请求的许可描述符 |
| k | 必须 | 对应于请求的私钥签名公钥的 SHA-1 哈希值的前三个字符 |

表 6. 重定向到混搭许可处理程序的 GET/POST 参数

| 参数 | 描述 |
| --- | --- |
| p | 此服务器在进行后端请求时使用的新的许可（可以有一个或多个 p 参数，每个参数代表不同的许可） |
| d | 处理完许可后要重定向到的 URL |