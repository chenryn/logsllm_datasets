    rdi=00000000000001e4
    kd> dd rbx+20 L1
    ffffc10c`9fe79e78  000001e4
这个相减之后，会将rbx结构体对应的长度变成0，随后，会到达一处cmp操作，这处cmp操作会将这个值作为一个判断条件。
    kd> p
    tcpip!TcpDeliverDataToClient+0x2de:
    fffff80a`72c21a7e 4c896b48        mov     qword ptr [rbx+48h],r13
    kd> p
    tcpip!TcpDeliverDataToClient+0x2e2:
    fffff80a`72c21a82 488b4320        mov     rax,qword ptr [rbx+20h]
    kd> dd rbx+18 L1
    ffffc10c`9fe79e70  00000000
    kd> dd rbx+20 L1
    ffffc10c`9fe79e78  00000000
    kd> p
    tcpip!TcpDeliverDataToClient+0x2e6:
    fffff80a`72c21a86 48034318        add     rax,qword ptr [rbx+18h]
    kd> p
    tcpip!TcpDeliverDataToClient+0x2ea:
    fffff80a`72c21a8a 0f858dfeffff    jne     tcpip!TcpDeliverDataToClient+0x17d (fffff80a`72c2191d)
    kd> p
    tcpip!TcpDeliverDataToClient+0x2f0:
    fffff80a`72c21a90 48837e2000      cmp     qword ptr [rsi+20h],0
来看一下这一段伪代码。
    while ( 1 )
      {
          v70 = v10;
          v69 = TcpSatisfyReceiveRequests(v7);
        if ( v24 >= v23 )
        {
        }
            else
        {
          v25 = (char *)ReceiveDpcTable + 24 * v21;
          v26 = v23 - v24;
          v27 = v7[2];
          v70 = v26;
          *(_QWORD *)(*(_QWORD *)(v27 + 128) + (v21  p
    tcpip!TcpDeliverDataToClient+0x2b9:
    fffff80a`72c21a59 48297b20        sub     qword ptr [rbx+20h],rdi
    kd> r rdi
    rdi=0000000000000404
    kd> dd rbx+20
    ffffc10c`a0643e78  00000504
显而易见，在我们加大Data长度的时候，到相减位置结构体对应位置的值是504，也就是1284，正好是Data的长度1200字节 ＋
刚才分析到的84字节，而此时rdi的值只有0x404，也就是944长度，这是一个Max值，如果Data长度超过0x404，这里会认为还有数据，因此相减后v6[4]的值不为0。
也就是说在SMB Tree
Connect数据交互过程中，TcpDeliverDataToClient中关于这个地方的逻辑处理是，会根据数据包的长度，如果数据包长度小于0x404，则相减时v26的值是长度本身，然后会break。如果数据包长度大于0x404，则v26的值为max值，也就是0x404，相减不为0，则不会break。
    kd> p
    tcpip!TcpDeliverDataToClient+0x2bd:
    fffff80a`72c21a5d 4533ed          xor     r13d,r13d
    kd> dd rbx+20
    ffffc10c`a0643e78  00000100
这造成了一个问题，就是刚才到的break位置由于v6[4]不为0，所以不执行break，而是进入后续的处理。
    kd> p
    tcpip!TcpDeliverDataToClient+0x2e2:
    fffff80a`72c21a82 488b4320        mov     rax,qword ptr [rbx+20h]
    kd> p
    tcpip!TcpDeliverDataToClient+0x2e6:
    fffff80a`72c21a86 48034318        add     rax,qword ptr [rbx+18h]
    kd> p
    tcpip!TcpDeliverDataToClient+0x2ea:
    fffff80a`72c21a8a 0f858dfeffff    jne     tcpip!TcpDeliverDataToClient+0x17d (fffff80a`72c2191d)
    kd> p
    tcpip!TcpDeliverDataToClient+0x17d:
    fffff80a`72c2191d 49833f00        cmp     qword ptr [r15],0
    kd> p
    tcpip!TcpDeliverDataToClient+0x181:
    fffff80a`72c21921 0f85e9010000    jne     tcpip!TcpDeliverDataToClient+0x370 (fffff80a`72c21b10)
接下来，程序会回到while入口位置，接下来会进入之前提到没有进入的if语句处理，这是由于刚才没有break结束循环的原因，此时会进入if语句的处理，函数中所调用的函数都是Complete，猜测都是和结束数据包相关处理有关。
    kd> p
    tcpip!TcpDeliverDataToClient+0x1c1:
    fffff80a`72c21961 e99bfeffff      jmp     tcpip!TcpDeliverDataToClient+0x61 (fffff80a`72c21801)
    kd> p
    tcpip!TcpDeliverDataToClient+0x61:
    fffff80a`72c21801 48837b0800      cmp     qword ptr [rbx+8],0
    kd> dd rbx+8
    ffffc10c`a0643e60  9d8c2fa0 ffffc10c 9d8c2fa0 ffffc10c
来看一下这个if语句。
      while ( 1 )
      {
        if ( v6[1] )
        {
          if ( !*v5 )
            break;
          v9 = v6[1];
          v10 = v6[2];
          *((_BYTE *)v6 + 98) &= 0xFEu;
          v69 = v9;