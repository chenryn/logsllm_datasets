提交之后得到源代码。查看phpinfo，发现disable_functions禁用很多，但是move_uploaded_file函数拼错了，所以可以利用其上传文件到指定目录，但open_basedir中的目录不存在，所以实际上无法使用。发现stream_socket_client、fputs、fgets、create_function这些函数没有禁止，所以可以利用其构造一个简易的phpshell。
查看index.php代码，通过混淆加密的方式加密代码，解密之后，查看源代码，提示“emmmmmm…Dont attack
me!”时应该是出现了栈溢出，采用srand函数使用时间戳对随机数进行布种，而时间戳可以通过phpinfo中的server变量得到，故本题中的随机数都可以预判。
预判其栈结构。
图38
修改index.php代码，将关键部分改掉，改成可以生成poc的程序。
图39
图40
图41
图42
这样就形成简易版poc程序，可以得到一个在30秒后执行命令的exp，由于php的create_function函数存在注入漏洞，通过该poc程序，调用create_function函数，就可以执行任意代码。
这就是构造完毕的exp，在服务器上观察一个端口，该exp成功执行后，就可以得到一个php的shell，可以执行任意php代码，执行结果通过ob_flush();flush();可以输出到页面上，也可以赋值给$s变量回显到shell上。
图43
图44
接下来就跟0ctf-2019一样，这里引用某篇文章说明。
图45
虽然这个没有真正做出来，但指明了方向，即使用php-fpm修改php_value来执行命令，php_value中虽然无法修改disable_functions，但是可以修改sendmail_path的地址达到命令执行的效果，而虽然禁用了mail，但是php中发送邮件的函数很多，例如error_log函数。
图46
然后在发送数据包的地方输出。（服务器禁用了fsocket系列函数，所以该poc无法正常运行。）
图47
然后在服务器上再观察一次端口，将phpshell中得到的BASE64_CODE通过stream_socket_client发送给php-fpm，这样就能在服务器上运行任意命令了，此时反弹一个cmdshell回来。
图48
得到cmdshell后，执行readflag，发现输出跟之前的题目类似，则使用之前题目readflag的程序，通过eval得到flag。
图49
图50
## 四、REVERSE
###  reverse1：yy
Do you love yy ?  
解题  
程序逻辑：  
根据给定的规则解析并处理输入。  
思路：  
根据yyec可以得到合法字符集： _CTF{abcdefghijklmnopqrstuvwxyz0123456789 _}；  
根据输入取表并更新buffer，使用round_key加密buffer(aes_cbc_encrypt)，字符_表示进行下一轮处理(重置buffer)，将得到的结果与加密串比较；  
输入字符与box的对应关系；  
aes_cbc_decrypt即可得到flag；  
flag: _CTF{yy_funct10n_1s_h4rd_and_n0_n33d_to_r3v3rs3} 。
###  reverse2：Obfuscating Macros II
You have seen something like this before,I guess.  
解题
程序类似表达式计算。  
程序逻辑：  
根据输入的两个DWORD64进行计算，并与给定的两个DWORD64比较。  
思路：  
程序有固定的处理模式： if (xx) { do stuff }；  
在对应的模式处下断即可得到完整的处理逻辑。  
flag：*CTF{fUnfl[@tCf9](https://github.com/tCf9 "@tCf9")}。
###  reverse3：Matr1x
What information is hidden in the matrix?  
解题  
3 _3魔方  
程序逻辑:  
魔方每个面上的点都有1个值，计为DWORD v[6][3][3]，根据输入旋转魔方，计算每个面上点的值。  
sum(corner + center) == 给定的值1，  
sum(middle + center) == 给定的值2，  
计算每个面上的点与另一个数组的点乘， 得到6个DWORD作为flag输出。  
思路:  
3个点集合：corner(4_6)、middle(4 _6)、center(6)。  
穷举可以确定每个面center、middle、center的值(每个点的具体顺序未确定)，计算flag并以_CTF{..}作为过滤条件即可得到flag。  
flag: *CTF{7h1S_Cu63_is_m4g1c}。
###  reverse4：fanoGo
Do you kown go & fano encode?  
$ nc 34.92.37.22 10001  
解题  
Go程序  
程序逻辑：  
以字典文件corpus.txt初始化编码器；  
if Fano.Decode(输入) == 给定字符串：输出flag。  
思路：  
程序中同时存在Fano.Encode函数，patch程序调用Fano.Encode(给定字符串)并输出。  
flag：*CTF{NUY4a3E5D9186hVzejoyItr7xHBcmOpv}。
## 五、PWN
###  pwn1：quicksort
I’m very quick!  
$ nc 34.92.96.238 10000  
解题  
1.输入存在栈溢出；
图51
2.栈溢出覆盖ptr即可实现任意地址任意写；  
3.修改ptr指向got表，即可泄漏libc基址；  
4.修改atoi为system，输入/bin/sh;即可获得shell。
py脚本：
图52
###  pwn2：girlfriend
new libc, new life.  
$ nc 34.92.96.238 10001  
解题  
1.Double free；
图53
2.申请大于0x400的堆，然后释放，可以获得main_aren_top的地址；  
3.Libc2.29在free时会检查free的地址是否已经在tcache中，要先填满tcache再触发double free；  
4.fastbin attack修改free_hook指向system；  
5.触发free(“/bin/sh;”)。
py脚本：
图54
图55
###  pwn3：babyshell
An easy shellcode  
$ nc 34.92.37.22 10002  
解题  
遇到0时就停止检查，在shellcode前加上push 0即可绕过检查。  
py脚本：
图56
###  pwn4：blindpwn
Close your eyes!  
$ nc 34.92.37.22 10000  
checksec：  
Arch：amd64-64-little  
RELRO：Partial RELRO  
Stack：No canary found  
NX：NX enabled  
PIE：No PIE (0x400000)  
file libc:  
libc-2.23.so： ELF 64-bit LSB shared object,  
x86-64, version 1 (GNU/Linux)，dynamically  
linked, interpreter /lib64/ld-linux-x86-64.so.2,  
BuildID[sha1]=b5381a457906d279073822a5ceb2
解题  
本题没有提供程序，给了服务器和端口，没有aslr和栈保护。  
1.链接后提示”Welcome to this blind pwn!”，输入任意内容，提示”Goodbye!”；  
2.输入1个超长字符串，没有看到”Goodbye!”，说明溢出了；  
3.确定返回地址的位置，修改返回地址(从0x400000开始)，直接有返回输出；  
4.从输出中得到libc基址，one_gadget get shell。
###  pwn5：upxofcpp
$ nc 34.92.121.149 10000  
解题  
1.用upx脱壳；  
2.存在UAF漏洞；  
3.upx加壳的堆可执行，可以在堆上构造shellcode；  
4.申请一个size为6的vec_0和一个size为10的vec_1，释放vec_0后，vec_0的vtb便指向堆，然后释放vec_1，再申请一个size为6的vec_3，直接输入-1，就可以不破坏vec_0的vtb；  
5.同上的方法可以使vtb+0x10也指向堆；  
6.在vtb+0x10指向的地方构造shellcode；  
7.调用show，触发vtb+0x10。
py脚本：
图57
官方题目地址如下，有需要的小伙伴可进行学习探讨：  
以上WriteUp，你get到了吗？  
欢迎大家文末留言，共同交流，  
也欢迎志同道合的朋友加入ISEC团队。  
未来安胜将继续砥砺前行，  
以专业的姿态守护网络安全！
安胜作为国内领先的网络安全类产品及服务提供商，秉承“创新为安，服务致胜”的经营理念，专注于网络安全类产品的生产与服务；以“研发+服务+销售”的经营模式，“装备+平台+服务”的产品体系，在技术研究、研发创新、产品化等方面已形成一套完整的流程化体系，为广大用户提供量体裁衣的综合解决方案！
我们拥有独立的技术及产品的预研基地—ISEC实验室，专注于网络安全前沿技术研究，提供网络安全培训、应急响应、安全检测等服务。此外，实验室打造独家资讯交流分享平台—“ISEC安全e站”，提供原创技术文章、网络安全信息资讯、实时热点独家解析等。