#all_structs-已定义结构的列表
all_structs :=
value_sep := XxSepxX
#S(call defstruct,struct._name,S（call defslot,slot_name,value),...)
define defstruct
S（eval all_structs +=$1)
S（eval $1_def_slotnames :=)
S（foreach v,S2 s3 $4 $5 $6 $7 $8 S9 S（10) $（11),
$（if $(Sv_name),
$(eval $1_def_slotnames
+= $(Sv_name))
S（eval S1_def_s（$v_name)_default:=$($v_value))))
endef
$（call defslot,slot_name,slot_value)
define defslot
S（eval tmp_id:=S（next_id))
$（eval $1_$（tmp_id)_name := $1）
（=:n（d）ss）
S1_s（tmp_id)
endef
all_structs变量是一份已（被defstruct）定义结构的列表。这份列表让new函数
能够对它所分配的结构进行类型检查。对每个结构来说，S是defstruct函数所定义的
一组变量：
S_def_slotnames
S_def_slotn_default
第一个变量为一个结构定义了一组槽，第二个变量为每个槽定义默认值。defstruct函
数的前两行会对all_structs进行附加的动作以及对槽列表进行初始化的动作。函数的
其余部分会反复处理槽，以便建立槽列表并存入默认值。
---
## Page 279
越过make的极限
269
每个槽的定义由defslot来处理。此函数首先会分配一个id，然后将槽名和值存人两
个变量，最后返回前缀。所返回的前缀可让defstruct的参数列表成为一串简单的符
号，符号列表中每个元素皆可用来访问每个槽的定义。如果有更多属性被加到槽之后，
要将他们并人defslot相当简单。这个技术还让默认值能够比“较简单的替代方案”具
有更大的值的范围（包括空格）。
defstruct中的foreach循环决定了槽数的上限。这个版本允许你使用10个槽。
foreach的主体处理每个参数的方式，就是将槽名附加到S_def_slotnames中，以及
把默认值赋值给-个变量。例如，我们的file-info结构将会被定义成：
file-info_def_slotnames:=path type host
file-info_def_path_default:=
file-info_def_type_default:=unix
file-info_def_host_default := oscar
于是就完成了结构的定义。
现在我们已经可以定义结构了，我们还需具备为结构创建实例的能力。new函数就是用
来执行此操作的：
#$(call new,struct_name)
define new
$(strip
S(if s（filter $1,S（all_structs)),,
.
$（eval instance :=$les（next-id))
$（eval all_instances +x S(instance))
S（foreach v,S(S(strip S1)_def_slotnames),
$（eval $（instance)_Sv:= $（s（strip $i)_def_$v_default)))
s(instance))
1
endef
首先，函数里的if会检查所指定的名称是否为已知的结构名称。如果在all_structs
中找不到相符的名称，就会发出错误信息。接着，我们会为新的实例构造独一无二的id
（将结构的名称与独一无二的整数后缀衔接在一起）。我们在结构名称与后缀之间使用了
一个@符号，所以稍后我们可以轻易地将它们分开。new函数接着会记录新实例的名称，
以便稍后让访问函数（accessor）进行类型检查，然后会使用默认值来初始化结构的槽。
这个进行初始化的程序代码值得介绍一下：
$（foreachv,$（s(strip $l)_def_slotnames),
S（eval S（instance)_Sv := S（S(strip S1)_def_Sv_default)))
foreach循环会反复处理结构的槽名。循环的主体会对结构的名称使用strip，这让用
户能够在cal1new的逗号之后加人空格。别忘了，每个槽可以被表示成：将实例名称
与槽名衔接在一起（例如file_info@1_path）。赋值运算符右边部分是默认值（可以
从结构名称与槽名求得）。最后，此函数会返回实例的名称。
---
## Page 280
270
附录二
请注意，尽管我称这些“语法结构”为函数，但是它们实际上是宏。也就是说，解析的
时候，new这个符号会被递归地扩展成一段新的文本插入makefile。defstruct宏之所
以能够完成我们想要的功能，主要是因为它被内置在eVa1调用中，会被扩展成空无一
物。同样地，new宏也会在eva1调用里完成它的重要工作。其实将它称为函数也是合
理的，因为将它扩展之后逻辑上会产生一个值，就是用来表示新实例的符号。
接下来，我们需要具备在结构中取值和设值的能力。为提供此功能，我们定义了两个新
函数：
#S（call get-value,instance_id,slot_name)
defineget-value
S(strip
$(ca11 check-params,$1,$2)
s（$(S(strip s1))_s（strip $2)))
endef
#$(call set-value,instance_id,slot_name,value)
define set-value
S(cal1check-params,$1,$2）\
S（eval $(S(strip $1）)_s(strip $2）:= $3）
endef
求值之前我们可以先使用check-params函数来检查实例id和槽名是否为有效字符串以
改进安全性。为了提升编排的美感以及确保额外的空格不会破坏槽值，我们会将这些参
数封装在strip调用中。
set函数也会在设值之前检查参数。同样地，我们会用strip来处理这两个函数参数，让
用户能够随意地在参数列表中加人空格。请注意，我们并没有对槽值使用strip，因为用
户可能真的需要用到空格。
#s(call check-params,instance_id,slot_name)
define check-params
s（if s（filter s(s(strip $1)),$（all_instances)).,
S（if $(filter $2,$($(call struct-name,$1)_def_slotnames)).,
/
$（error Instance‘$（$（strip $1))·does not have slot‘$(strip $2)·))
endef
#s(call struct-name,instance_id)
define struct-name
S（firstword $（subst @,，S（S（strip $1)）))
endef
check-params函数只是用来检查传递给设值和取值函数的实例id是否被包含在已知的
实例列表中。同样地，它会检查槽名是否被包含在隶属此结构的槽列表中。结构的名称
---
## Page 281
越过make的极限
271
可以从实例名称（一个被符号隔开的符号）中获得并取出第一个单词。这意味着结构
名称中不可以包含@符号。
最后，我们可以在实现中加人一对输出函数（print-instance与print-struct）和转储函数
（dump-instance与dump-struct）。输出函数可以把结构定义和结构实例显示成用户看得
懂的形式，然而转储函数所显示的是结构定义和结构实例的实现细节。详情参见例B-1。
在下面的例子中，你可以看到我们定义和使用file-info结构的方法：
include defstruct.mk
S（call defstruct,file-info,
$（call defslot.path,),
$（call defslot,type,unix),
$（call defslot,host,oscar))
before := S(call new,file-info)
S(call set-value,before,path,/etc/password）
$(call set-value,before,host,wasatch)
after :=S（call new,file-info)
$(call set-value,after,path,/etc/shadow)
$(call set-value,after,host,wasatch)
demo:
#before
=$（before)
before.path
=S（call get-value,before,path)
before.type
=S（call get-value,before，type)
#before.host
=S（call get-value,before,host)
#print before = S（call print-instance,before)
#dump before=S（call dump-instance,before）
#
#all_instances
=$（all_instances)
#all_structs
=$（all_structs）
print file-info=$（call print-struct,file-info)
#dump file-info= S（call dump-struct,file-info)
下面是它的运行结果：
$make
#before
=file-info@0
before.path=/etc/password
before.type
=unix
before.host=wasatch
print before={“/etc/password”"unix“wasatch"）
dumpbefore={（file-infoa0_path/etc/password）{file-info@0_type*unix"}
{file-info@o_host“wasatch"})
#
#all_inctances
=file-info@0 file-info@1
#all_structs
=file-info
#cump file-info=(file-info_def_slotnamespath type hostfile-info_def_path_
default ""file-info_def_type_default“unix*file-info_def_host_default"oscar*)
---
## Page 282
272
附录二
此外，注意非法的结构使用是如何受到限制的：
$cat badstruct.mk
include defstruct.mk
S(call new, no-such-structure)
$ make -f badstruct.mk
badstruct.mk:2:***new on unknowm struct'no-such-structure'.Stop
$ cat badslot.mk
include defstruct.mk
$（call defstruct,foo,defslot（size,0))
bar:= $(call new,foo)
S(call set-value,bar,siz,10)
$make -f badsiot.mk
badslot.mk:4:***Instance'foo@0'does not have slot'siz'.Stop.
当然，例B-1还有许多可以改进的地方：
对槽赋值进行确认检查。你可以使用一个挂钩函数来实现此功能，该函数必须在赋
值动作完成之后产生空值。此挂钩的用法会像这个样子：
#s（call set-value,instance_id,slot_name,value）
define set-value
S(cal1 check-params,$1,$2)
S（if S(call S（strip $1)_$（strip $2)_hook,value),
S（error set-value hook,S（strip s1)_s（strip S2)_hook,failed))\
S（eval $（S(strip $1))_S（strip $2）:= $3)
endef
支持继承的功能。defstruct的参数可以接受另一个defstruct名称而成为一个
超类（superclass），子类（subclass）可以复制超类的所有成员（member）。
对结构引用提供较好的支持。使用当前的实现，一个槽可以保存另一个结构的ID，
但是访问很麻烦。新版的get-va1ue函数应该能够检查引用（通过查找
defstruct@number）以及进行自动解除引l用。
算术运算
在前一节我提到过，只使用make的原生功能是无法在make中进行算术运算的。接着，
我还提到，如何通过“把单词添加到列表以及返回列表的长度”的方式来实现一个简单
的计数器。然后，我找到了递增数字的技巧，MichaelMounteney为“在make中以有
限的形式进行整数的加法”提供了个很酷的技巧。
他的技巧是运用一行数字来计算两个整数（值为1或更大）的总和。工作原理是这样的，
假设你有一行这样的数字：
23456789101112131415
---
## Page 283
越过make的极限
273
现在，请注意（如果我们所使用的索引值没问题的话），我们可以做加法运算，例如4加
5，首先从这行数字取出一个子集（范围从第4个元素到最后一个元素）、然后从子集中
选出第5个元素。我们可以使用原生的make函数来完成此功能：
number_1ine23456789101112131415
plus= S（word $2,S（wordlist $1,15,$（number_line））)
four+five=$（call plus,4,5)
Michael真聪明！注意，这行数字是从2开头而不是从0或1。如果你是以1和1来运行
plus函数，你就会发现必须这么做。这两个索引值最后将会取得第一个元素，并且答
案必须是2，因此数字列表的第一个元素必须是2。所以，对word和wordlist函数来
说，列表中第一个元素的索引值是1不是0（但是我们并不想证明此事）。
现在，有了这行数字之后，我们可以进行加法运算、但是我们如何在不手动键入或使用
处的所有可能值”组合在一起来创建从00到99间的所有数字。例如：
make-f-<<<'$（warning $（foreachi，012,$（addprefix$i,012）））
/c/TEMP/Gm002568:1:000102101112202122
只要纳人0到9间的所有数字，我们就可以产生00到99间的所有数字。通过再次组合
foreach与这100个数字（译注1），我们可以产生000到999间的所有数字，等等。最
后还必须除去数字中前导的零。
我们将Mounteney先生用来产生一行数字的程序代码做了如下的修改，并且定义了
plus和gt运算：
#combine—将一串数字与另-串数字衔接在一起
combine = $（foreach i，$1,S（addprefix $i,$2))
stripzero—从每个单词中移除一个前导的零
stripzero=$(patsubst 0,&,S1)
generate-从单词列表产生出三个元素的所有的数字排列
generate =$(call stripzero,
s(call stripzero,
$(callcombine,$1,
$（cal1 combine,$1，$1）))）
#number_line--创建从0到999间的所有数字
length
:=S（word $（words S（number_line)),$（number_line))
译注1:$make-f-<<<'$（warning$（foreachj，0123456789,S（addprefix
$j.$（foreachi,0123456789.$（addprefixSi，012345678
（（（（（6