    一旦您收到服务器已成功配置的消息，您可以通过按下 *Ctrl + C* 退出该命令。
4.  After the MySQL server, you can create the MySQL database. The definition of the MySQL database has been provided in the **mysql-database.yaml** file:
    1 apiVersion:蓝色。microsoft.com/v1alpha1
    2 种:MySQL 数据库
    3 元数据:
    4 名称:wordpress-db
    5 规格:
    6 资源组:aso-资源
    7 服务器:
    数据库的定义是提供一个名称并引用您之前创建的服务器。要创建数据库，可以使用以下命令:
    kube CTL create-f MySQL-database . YAML
    这将需要几秒钟来完成。您可以使用以下命令跟踪进度:
    忽必烈得到 mysqldatabase -w
    这将返回类似于图 12.22 的输出:
    ![Output confirming the successful creation of a MySQL database](img/B17338_12_22.jpg)
    图 12.22:监控 MySQL 数据库的创建
    一旦您收到数据库已成功设置的消息，您可以通过按下 *Ctrl + C* 退出该命令。
5.  You can create a firewall rule that will allow traffic to your database. In this example, you will create a rule that will allow traffic from all sources. In a production environment, this is not recommended. For the recommended networking configurations for Azure Database for MySQL, please refer to the documentation: [https://docs.microsoft.com/azure/mysql/flexible-server/concepts-networking](https://docs.microsoft.com/azure/mysql/flexible-server/concepts-networking).The configuration for the firewall rule has been provided in the **mysql-firewall.yaml** file:
    1 apiVersion:蓝色。microsoft.com/v1alpha1
    2 个孩子:MySQLFirewallRule
    3 元数据:
    4 名称:允许所有 mysql
    5 规格:
    6 资源组:aso-资源
    7 服务器:
    8 startIpAddress: 0.0.0.0
    9 endIpAddress: 255.255.255.255
    如您所见，我们指的是之前创建的 MySQL 服务器，允许来自所有 IP 地址的流量(意思是从 **0.0.0.0** 到 **255.255.255.255** )。
    要创建防火墙规则，您可以使用以下命令:
    kubi KL create-f MySQL 防火墙. yaml
    这将需要几秒钟来完成。您可以使用以下命令跟踪进度:
    多维数据集获取 mysqlfirewallrule -w
    这将返回类似于图 12.23 的输出:
    ![Output confirming the successful creation of a MySQL firewall rule](img/B17338_12_23.jpg)
    图 12.23:监控 MySQL 防火墙规则的创建
    一旦您收到防火墙规则已成功设置的消息，您可以通过按下 *Ctrl + C* 退出该命令。
6.  Let's verify that all of this was successfully created in the Azure portal. To do so, start by searching for the MySQL server name (**wp-helm-mysql** in this example) in the Azure search bar as shown in *Figure 12.24*. Click on the server to go to the details:
    ![Searching for the MySQL server using the Azure search bar](img/B17338_12_24.jpg)
    图 12.24:在 Azure 门户中搜索 MySQL 服务器
7.  This will take you to the Overview pane of the MySQL server. Scroll down in this pane and expand the Available resources section. Here you should see that wordpress-db was created, as shown in *Figure 12.25*:
    ![The database created through ASO as shown in the Azure portal](img/B17338_12_25.jpg)
    图 12.25:通过 ASO 创建的数据库显示在 Azure 门户中
8.  在 MySQL 服务器窗格中，单击左侧导航中的连接安全性以验证防火墙规则。您应该会在该窗格中看到您通过 ASO 创建的防火墙规则，如图*图 12.26* :
![The firewall rule created through ASO is set on the MySQL server](img/B17338_12_26.jpg)
图 12.26:通过 ASO 创建的防火墙规则设置在 MySQL 服务器上
这验证了您能够在 Azure 中使用数据库创建 MySQL 服务器并配置其防火墙设置。
在本节中，您已经使用 ASO 创建了一个 MySQL 服务器，以及该服务器上的一个数据库，然后最终配置了它的防火墙。你可以用 Kubernetes·YAML 的文件来完成所有这些。ASO 将这些 YAML 文件翻译成 Azure 并为您创建了资源。最后，您可以确认所有内容都是在 Azure 门户中创建和配置的。
在下一部分，也是最后一部分，您将使用这个数据库来支持 WordPress 应用。
## 使用 MySQL 数据库创建应用
现在你有了一个 MySQL 数据库。为了展示您可以使用这个数据库来配置应用，您将使用 WordPress 应用。您可以使用 Helm 安装它，并在 Helm 配置中向数据库提供连接信息:
1.  To start, you will need the connection information to your database server. When you installed ASO on your cluster, you configured it to use Key Vault as a secret store rather than Kubernetes secrets. You will need this connection information to connect WordPress to your Azure MySQL database.Search for **Key Vaults** in the Azure search bar, as shown in *Figure 12.27*, click on Key vaults, and then select the key vault you created earlier in the chapter:
    ![Searching for Key Vault using the Azure search bar](img/B17338_12_27.jpg)
    图 12.27:在 Azure 门户中搜索关键存储库
2.  In the resulting pane, click on Secrets in the left-hand navigation and then click on the secret, as shown in *Figure 12.28*. The name of this secret follows the naming convention **--**.
    ![The MySQL secret in the Azure portal](img/B17338_12_28.jpg)
    图 12.28:Azure 门户中的 MySQL 机密
3.  You will then get a view with multiple versions of your secret; click the current version as shown in *Figure 12.29*:
    ![Different versions of the secret in Key Vault](img/B17338_12_29.jpg)
    图 12.29:密钥库中不同的机密版本
    现在，复制机密的值，如图*图 12.30* :
    ![Clicking the Copy to clipboard button to copy the value of the secret](img/B17338_12_30.jpg)
    图 12.30:将机密的值复制到剪贴板
4.  The secret contains several pieces of information related to your database connection that you will need for the Helm installation. It contains the fully qualified server name, the username, and the password. The values in the secret are Base64 encoded. To make working with this secret easier, a shell script has been provided that will give you the required decoded values. To run this script, use the following command:
    sh decode-secret.sh
    *图 12.31* 举例说明:
    ![Running a script to generate decoded values of the secret](img/B17338_12_31.jpg)
    图 12.31:解码机密
5.  You can use the values outputted by the previous step to configure Helm to use your Azure MySQL database. The following Helm command will set up WordPress on your cluster, but use an external database:
    helm repo add bitnami https://charts . bitnami . com/bitnami
    头盔安装 wp bitnami/wordpress \
    -设置 mariadb.enabled=false \
    -设置 externalddatabase . host = '' \
    -设置外部数据库。用户=' ' \
    -设置外部数据库。密码=' ' \
    -设置 externalddatabase . database = ' WordPress-db ' \
    -设置 externalDatabase.port = ' 3306 '
    如您所见，使用此命令，您通过将 **mariadb.enabled** 值设置为 **false** 来禁用 MariaDB 安装，然后将连接信息提供给外部数据库。
    要监控 WordPress 的设置，可以使用以下命令:
    忽必烈得到 pods -w
    这将需要几分钟来完全设置，最后，您应该会看到 WordPress pod 处于运行状态并准备就绪，如图 12.32 所示:
    ![Output displaying the WordPress pod in a running state](img/B17338_12_32.jpg)
    图 12.32:运行状态下的 WordPress pod
    一旦 Pod 运行并准备好，您可以通过按下 *Ctrl + C* 来停止该命令。如果你还记得在第 3 章**中的 WordPress 部署，在 AKS* 上的应用部署，在 WordPress 安装中有第二个 pod，托管一个 MariaDB 数据库。自从我们用 Azure MySQL 数据库替换它后，这个 pod 就不再存在了。*
**   Let's now finally connect to this WordPress application. You can get the public IP address of the WordPress website using the following command:
    忽必烈得到服务
    这将向您显示公共 IP，如图*图 12.33* :
    ![Getting the public IP of the WordPress website from the output](img/B17338_12_33.jpg)
    图 12.33:获取 WordPress 网站的公共 IP
    在你的网络浏览器地址栏中输入这个 IP 地址，点击*进入*。你应该可以看到带有默认演示帖子的 WordPress 登陆页面，如图*图 12.34* :
    ![Browsing to the WordPress website](img/B17338_12_34.jpg)
    图 12.34:浏览 WordPress 网站
    你现在有了一个在 Kubernetes 上托管的功能齐全的 WordPress 网站，数据库由 MySQL 的 Azure 数据库支持。
    *   This concluded the examples from this chapter. You created a number of resources and installed a number of cluster components. Let's also clean them up from the cluster using the following commands:
    helm 卸载 wp
    忽必烈删除-f mysql 防火墙. yaml
    忽必烈 delete -f mysql 数据库. yaml
    忽必烈 delete -f mysql 服务器. yaml
    忽必烈 delete -f rg.yaml
    helm 卸载 aso-n azure operator-系统
    az aks pod-标识删除-资源-组 rg-handsonaks \
    -cluster-name handsonaks-namespace azure operator-system \
    -名称 aso-身份绑定
    kubectl delete 命名空间 azureoperator-system
    kube CTL delete-f[https://github . com/jet stack/cert-manager/releases/download/v 1 . 1 . 0/cert-manager . YAML](https://github.com/jetstack/cert-manager/releases/download/v1.1.0/cert-manager.yaml )
    az 组删除-n aso -是* 
 *您已经能够将 Kubernetes 上的应用连接到 Azure 管理的 MySQL 数据库。您使用了 WordPress Helm 图表，并提供了自定义值来配置该 Helm 图表，使其连接到托管数据库。
## 总结
本章介绍**蔚蓝服务运营商** ( **ASO** )。ASO 是一个开源项目，它使得使用 Kubernetes 创建 Azure 服务成为可能。这允许您作为用户不必在 Azure 门户或命令行界面与 Kubernetes 资源定义之间切换。
在本章中，您创建了一个新的 AKS 集群，然后在该集群上安装了 ASO。然后，您使用 ASO 在 Azure 上创建了一个 MySQL 数据库。您使用 Azure 门户验证了该数据库在 Azure 中可用。
最后，您在连接到外部数据库的 Kubernetes 集群上创建了一个 WordPress 应用。正如您在前面几章中看到的，您已经验证了应用正在运行并且可用。
在下一章中，您将了解 Azure 与 AKS 的其他集成，即 Azure 安全中心和用于 Kubernetes 的 Azure Defender，它们用于监控集群的安全配置并减轻威胁。*