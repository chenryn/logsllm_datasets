types (Max, Zero, and Random tiles), averaging the results
obtained with four values per each input type. For t-MxM, we
inject faults in the scheduler and pipeline registers but not in
the functional units. Faults in this latter module, as shown
in Figure 4, would not cause multiple threads corruptions
in t-MxM (there is no transcendental operation). The effects
of the single thread SDC would then be the same as the
ones observed injecting the FU syndrome in software, without
requiring a costly RTL injection.
Figure 7 shows the average AVF for DUEs, single and
multiple corrupted elements in the t-MxM output for injections
in the scheduler and pipeline. We recall that we inject one fault
per execution: the multiple corrupted elements are caused by
the single fault propagation.
A major difference from the micro-benchmarks AVF in Fig-
ure 4 is that, for t-MxM, the scheduler AVF is higher than the
pipeline one. As mentioned, while the micro-benchmarks are
very simple and do not implement threads interactions, t-MxM
also includes several instructions for computing memory ad-
dresses and threads indices. The higher strain on the scheduler
and the higher portion of time spent in scheduling operation
increases the AVF (for both SDCs and DUEs). On the contrary,
the pipeline AVF is higher in the micro-benchmarks because,
when a fault appears at the ﬁrst instruction output, it is marked
as SDCs, without further chances to be masked (there is no
other computation). In t-MxM an instruction’s wrong output
can be masked in a downstream operation (for instance, with
a multiplication by zero). This statement is supported by our
pipeline data in Figure 7, that shows a much lower SDC AVF
for the Z tile.
An additional interesting result from Figure 7 is that the
portion of SDCs that affect multiple elements is very high (at
least 70% of scheduler induced and 50% of pipeline induced
SDCs). We can further study the multiple errors at the t-
MxM output by visualizing the geometrical distribution of
the corrupted elements. In Figure 8 we plot the 6 different
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 08:56:48 UTC from IEEE Xplore.  Restrictions apply. 
300
SIZES, DOMAIN, AND PVF FOR ALL TESTED APPLICATIONS.
TABLE III
(cid:10)
(cid:9)
(cid:10)
(cid:10)
(cid:4)
(cid:1)
(cid:4)
(cid:13)
(cid:5)
(cid:11)
(cid:2)
(cid:4)
(cid:10)
(cid:6)
(cid:10)(cid:9)(cid:14)
(cid:3)(cid:9)(cid:6)(cid:12)(cid:7)(cid:8)
(cid:3)(cid:9)(cid:6)(cid:12)(cid:7)(cid:8)
(cid:10)(cid:9)(cid:14)
(cid:10)
(cid:9)
(cid:10)
(cid:10)
(cid:4)
(cid:1)
(cid:4)
(cid:13)
(cid:5)
(cid:11)
(cid:2)
(cid:4)
(cid:10)
(cid:6)
Size
512x512
2 3D boxes
4MB array
1024x1024
2048x2048
256x256
MNIST
VOC2012
Domain
Linear algebra
Particle simulation
Sorting
Physics simulation
Linear algebra
Linear algebra
Classiﬁcation
Object detection
Gaussian
Lava
Quicksort
Hotspot
LUD
MxM
LeNET
YoloV3
1.0
0.69
0.94
0.25
0.82
0.95
0.03
0.17
1.0
0.91
0.95
0.37
0.99
0.99
0.04
0.27
PVF
Single bit-ﬂip
Relative error
Fig. 9. Variance distribution of relative errors for an example of Row (left)
and Block (Right) patterns with multiple corrupted elements.
spatial multiple corrupted elements distribution patterns that
we have observed injecting faults in the scheduler and pipeline
registers. We have observed corrupted elements distributed in
a row, a column, a row and a column, a block of elements
(varying in size), randomly, and all (or almost all) elements
corrupted. Table II lists the percentage of occurrences of
the different patterns (single SDCs are not listed). As the
distribution of the observed patterns is very similar in the three
inputs we test (M, Z, R tiles), we list the average distributions.
Interestingly, pipeline injection mostly produces corrupted
rows, while scheduler injection is more likely to affect the
whole output matrix. Having a whole column corrupted is
very unlikely, for both injection sites. This is because t-MxM
calculation is row-major and, as mentioned, the distribution
of these error patterns depends not only on the way the
GPU hardware reacts to the faults, but also on the software
propagation. While this multiple elements distribution is not
generic, the choice of t-MxM extended evaluation is dictated
by its importance in CNNs execution. As shown in [28], [29],
the observed multiple errors patterns (but not single element
corruptions) can indeed induce misdetections in CNNs.
We have also characterized the syndrome of t-MxM. Most of
the syndromes are concentrated in few values, again following
a power-law distribution. In Figure 9 we plot the relative error
distribution for two examples: a row and a block error. As
shown, the relative error distribution varies among the cor-
rupted elements. To inject the t-MxM syndrome in software,
then, we use Equation 1 to select the range of the relative errors
for all the elements to corrupt. In this range, we again select
a power law distribution for the corruption of the individual
output elements.
VI. REAL-WORLD APPLICATIONS EVALUATION
In this section we present the results obtained injecting,
in software, the fault syndromes discussed in the previous
section. We inject at least 6,000 syndromes per application,
for a total of more than 48,000 injections that took 350 GPU
hours, ensuring 95% conﬁdence intervals to be lower than 5%.
the specially crafted
NVBiTFI version selects the most suitable fault syndrome to
apply depending on the opcode, the input, and the module
that we assume to be the cause of the fault. For this paper, we
inject a cocktail of fault syndromes following the power-law
As discussed in Section IV-B,
(cid:3)(cid:2)(cid:2)(cid:1)
(cid:7)(cid:2)(cid:1)
(cid:6)(cid:2)(cid:1)
(cid:5)(cid:2)(cid:1)
(cid:4)(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:6)(cid:11)(cid:13)(cid:10)(cid:12)(cid:8)(cid:1)(cid:3)(cid:11)(cid:17)(cid:1)(cid:9)(cid:12)(cid:11)(cid:15)
(cid:5)(cid:8)(cid:12)(cid:7)(cid:17)(cid:11)(cid:18)(cid:8)(cid:1)(cid:8)(cid:16)(cid:16)(cid:14)(cid:16)
(cid:17)(cid:2)(cid:4)(cid:19)(cid:4)
(cid:6)(cid:17)(cid:32)(cid:30)(cid:30)(cid:22)(cid:17)(cid:26) (cid:8)(cid:17)(cid:33)(cid:17) (cid:12)(cid:32)(cid:22)(cid:19)(cid:23)(cid:30)(cid:27)(cid:29)(cid:31) (cid:7)(cid:27)(cid:31)(cid:30)(cid:28)(cid:27)(cid:31)
(cid:8)(cid:14)(cid:3)
(cid:9)(cid:34)(cid:9) (cid:8)(cid:20)(cid:10)(cid:4)(cid:13) (cid:16)(cid:27)(cid:24)(cid:27)(cid:15)(cid:2)
(cid:29)
(cid:27)
(cid:31)
(cid:19)
(cid:17)
(cid:5)
(cid:1)
(cid:35)
(cid:31)
(cid:22)
(cid:24)
(cid:22)
(cid:24)
(cid:1)
(cid:18)
(cid:17)
(cid:29)
(cid:20)
(cid:26)
(cid:32)
(cid:15)
(cid:25)
(cid:17)
(cid:29)
(cid:21)
(cid:27)
(cid:29)
(cid:11)
Fig. 10. SDC Program Vulnerability Factor for HPC codes.
statistical distribution described in Section VI and depicted in
Figures 5 and 6. It is obviously possible to focus the software
fault injection in just one module or even to tune the syndrome
injection with the probabilities for the different modules and/or
instructions to be corrupted. While being potentially very
interesting, such an evaluation requires the area of the various
modules (as reported in Table I) but also the raw probability for
transient faults to be generated. Unfortunately, this information
is not publicly available and could only be measured through
beam experiments.
We select to characterize a set of applications, listed in Ta-
ble III, that are representative of different HPC computational
classes: Floating Matrix Multiplication (MxM), Lower Upper
Decomposition (LUD), Quicksort, particles simulation (Lava),
Gaussian elimination (Gaussian), ﬂuid dynamics (Hotspot).
We also consider CNNs for classiﬁcation and object detec-
tion (LeNET and YoloV3). Each code is likely to stimulate
speciﬁc GPU modules, according to the distribution of op-
codes depicted in Figure 3. Hence, results obtained with the
selected benchmarks could be representative also for similar
applications.
While NVBitFI could inject in multiple threads and the RTL
fault syndrome includes the information about the multiple
SDCs, to propose a better comparison with the traditional
single bit-ﬂip evaluation, we decide to inject only single thread
SDC using our fault syndrome. We want to highlight how
accurate a random single bit-ﬂip injection is compared to the
RTL fault syndrome. For CNNs, we also include an RTL fault-
injection on the execution of t-MxM to evaluate better the
effects of scheduler faults and multiple threads corruptions in
the detection and classiﬁcation of objects.
Figure 10 shows and Table III lists the SDC Program
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 08:56:48 UTC from IEEE Xplore.  Restrictions apply. 
301
Vulnerability Factor (PVF) for the HPC codes. PVF is the
probability of the faults injected in the software visible states
to generate an SDC at the end of execution. In other words,
when injecting in software, we assume that the fault injected
in RTL has corrupted the instruction output. For the data in
Figure 10 and Table III we inject only in the 12 opcodes we
characterize with RTL fault injection (that represent more than
70% of all executed opcodes, as shown in Figure 3).
RTL faults that generate DUEs (shown in Figure 4) are not
considered in software fault injection, as they simply hang the
application. We never observed DUEs caused by the injections
of the syndromes obtained from the RTL injections. This is
mainly because GPU applications are highly data intensive,
and avoid data driven condition statements. Thus, it is hard
for a data error to affect the control ﬂow in GPUs.
To compare our analysis with the traditional fault injection,
we consider two error models for our analysis, single bit-
ﬂip (randomly injected in the 32 bits values) and the fault
syndrome (injected using the power law distribution) from
RTL injection. For all
the codes presented in Figure 10,
the fault syndrome model generates a higher or equal PVF
compared with the traditional single bit-ﬂip error model.
Interestingly, we observe that the single bit-ﬂip injection would