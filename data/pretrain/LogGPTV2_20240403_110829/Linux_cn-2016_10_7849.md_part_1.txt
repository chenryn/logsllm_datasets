---
author: Nicolas Hoffmann
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6458
date: '2016-10-10 14:58:00'
editorchoice: false
excerpt: CSP 对你的用户来说是尤其重要的：他们在你的网站上不再需要遭受任何的未经请求的脚本，内容或 XSS 的威胁了。对于网站维护者来说 CSP 最重要的优势就是可感知。如果你对图片来源设置了严格的规则，这时一个脚本小子尝试在你的网站上插入一张未授权来源的图片，那么这张图片就会被禁止，并且你会在第一时间收到提醒。
fromurl: https://www.smashingmagazine.com/2016/09/content-security-policy-your-future-best-friend/
id: 7849
islctt: true
largepic: /data/attachment/album/201610/10/145649v0q1bm2a406wmkwq.png
permalink: /article-7849-1.html
pic: /data/attachment/album/201610/10/145649v0q1bm2a406wmkwq.png.thumb.jpg
related:
- displayorder: 0
  raid: 5848
- displayorder: 1
  raid: 6502
reviewer: ''
selector: ''
summary: CSP 对你的用户来说是尤其重要的：他们在你的网站上不再需要遭受任何的未经请求的脚本，内容或 XSS 的威胁了。对于网站维护者来说 CSP 最重要的优势就是可感知。如果你对图片来源设置了严格的规则，这时一个脚本小子尝试在你的网站上插入一张未授权来源的图片，那么这张图片就会被禁止，并且你会在第一时间收到提醒。
tags:
- XSS
- CSP
thumb: false
title: 内容安全策略（CSP），防御 XSS 攻击的好助手
titlepic: true
translator: wcnnbdk1
updated: '2016-10-10 14:58:00'
---
很久之前，我的个人网站被攻击了。我不知道它是如何发生的，但它确实发生了。幸运的是，攻击带来的破坏是很小的：一小段 JavaScript 被注入到了某些页面的底部。我更新了 FTP 和其它的口令，清理了一些文件，事情就这样结束了。
有一点使我很恼火：在当时，还没有一种简便的方案能够使我知道那里有问题，更重要的是能够保护网站的访客不被这段恼人的代码所扰。
现在有一种方案出现了，这种技术在上述两方面都十分的成功。它就是 内容安全策略   （    content security policy    ） （CSP）。
![](/data/attachment/album/201610/10/145649v0q1bm2a406wmkwq.png)
### 什么是 CSP?
其核心思想十分简单：网站通过发送一个 CSP 头部，来告诉浏览器什么是被授权执行的与什么是需要被禁止的。
这里有一个 PHP 的例子：
```
");
?>
```
#### 一些指令
你可以定义一些全局规则或者定义一些涉及某一类资源的规则：
```
default-src 'self' ;
     # self = 同端口，同域名，同协议 => 允许
```
基础参数是 `default-src`：如果没有为某一类资源设置指令规则，那么浏览器就会使用这个默认参数值。
```
script-src 'self' www.google-analytics.com ;
     # 来自这些域名的 JS 文件 => 允许
```
在这个例子中，我们已经授权了 www.google-analytics.com 这个域名来源的 JavaScript 文件使用到我们的网站上。我们也添加了 `'self'` 这个关键词；如果我们通过 `script-src` 来重新设置其它的规则指令，它将会覆盖 `default-src` 规则。
如果没有指明协议（scheme）或端口，它就会强制选择与当前页面相同的协议或端口。这样做防止了混合内容（LCTT 译注：混合内容指 HTTPS 页面中也有非 HTTPS 资源，可参见：  ）。如果页面是 https://example.com，那么你将无法加载 http://www.google-analytics.com/file.js 因为它已经被禁止了（协议不匹配）。然而，有一个例外就是协议的提升是被允许的。如果 http://example.com 尝试加载 https://www.google-analytics.com/file.js，接着协议或端口允许被更改以便协议的提升。
```
style-src 'self' data: ;
     # Data-Uri 嵌入 CSS => 允许
```
在这个例子中，关键词 `data:` 授权了在 CSS 文件中 data 内嵌内容。
在 CSP 1 规范下，你也可以设置如下规则：
* `img-src` 有效的图片来源
* `connect-src` 应用于 XMLHttpRequest（AJAX），WebSocket 或 EventSource
* `font-src` 有效的字体来源
* `object-src` 有效的插件来源（例如，``，``，``）
* `media-src` 有效的 `` 和 `` 来源
CSP 2 规范包含了如下规则：
* `child-src` 有效的 web workers 和 元素来源，如 `` 和 `` （这个指令用来替代 CSP 1 中废弃了的 `frame-src` 指令）
* `form-action` 可以作为 HTML `` 的 action 的有效来源
* `frame-ancestors` 使用 ``，``，``，`` 或 `` 内嵌资源的有效来源
* `upgrade-insecure-requests` 命令用户代理来重写 URL 协议，将 HTTP 改到 HTTPS （为一些需要重写大量陈旧 URL 的网站提供了方便）。
为了更好的向后兼容一些废弃的属性，你可以简单的复制当前指令的内容同时为那个废弃的指令创建一个相同的副本。例如，你可以复制 `child-src` 的内容同时在 `frame-src` 中添加一份相同的副本。
CSP 2 允许你添加路径到白名单中（CSP 1 只允许域名被添加到白名单中）。因此，相较于将整个 www.foo.com 域添加到白名单，你可以通过添加 www.foo.com/some/folder 这样的路径到白名单中来作更多的限制。这个需要浏览器中 CSP 2 的支持，但它很明显更安全。
#### 一个例子
我为 Web 2015 巴黎大会上我的演讲 “[CSP in Action](https://rocssti.net/en/example-csp-paris-web2015)”制作了一个简单的例子。
在没有 CSP 的情况下，页面展示如下图所示：
![](/data/attachment/album/201610/10/145806lyy9osomrvtnvoc4.jpg)
不是十分优美。要是我们启用了如下的 CSP 指令又会怎样呢？
```
```
浏览器将会作什么呢？它会（非常严格的）在 CSP 基础规则之下应用这些指令，这意味着**任何没有在 CSP 指令中被授权允许的都将会被禁止**（“blocked” 指的是不被执行、不被显示并且不被使用在网站中）。
在 CSP 的默认设置中，内联脚本和样式是不被授权的，意味着每一个 ``，`onclick` 事件属性或 `style` 属性都将会被禁止。你可以使用 `style-src 'unsafe-inline' ;` 指令来授权使用内联 CSS。
在一个支持 CSP 的现代浏览器中，上述示例看起来如下图：
![](/data/attachment/album/201610/10/145807tmhp7qg7uqploghz.jpg)
发生了什么？浏览器应用了指令并且拒绝了所有没有被授权的内容。它在浏览器调试终端中发送了这些通知：
![](/data/attachment/album/201610/10/145807liay2sf2f0ujtb9z.jpg)