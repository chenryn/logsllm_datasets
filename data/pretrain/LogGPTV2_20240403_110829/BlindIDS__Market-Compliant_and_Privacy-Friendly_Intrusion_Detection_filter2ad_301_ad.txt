to R, depending on the security policy enforced by SP.
• Validation and packet reconstitution (Receive)
R receives the set of encrypted tokens and runs the
reverse tokenization algorithm in order to reconstruct
the message, using the decryption procedure Dec. Ba-
sed on the tokenization procedure that is implemented
by the sender, the position of each decrypted keyword
may be forwarded with the encrypted token in order
to enable the receiver to reverse the tokenization algo-
rithm and to reconstruct the traﬃc in clear-text.
4.4 Detailed Description
Let (q, G1, g1, G2, g2, Gt, e(., .)) be a bilinear environment
and let F, G, H be three hash functions (modeled as random
oracles).
• Setup. The system setup consists in two independent
steps of key generation.
– The SE executes the DSE.KeyGen(1λ) procedure,
keeps only the trap generation key tk = x(cid:48) ← Zq.
It publishes pkRG = gx(cid:48)
1 , along with some random
string a ∈ Z∗
q .
It publishes the associated public key(cid:102)pkR = gx
(pkSE,(cid:102)pkR).
– The receiver R also executes DSE.KeyGen(1λ) to
obtain its secret decryption key skR = x ← Zq.
1 .
– The public key for a receiver R is the pair pkR =
• RuleGen. For each keyword wi to be searched for in
the traﬃc, the SE executes TrapGen(wi, tk) of the DSE
scheme. It returns Ti = F (wi)x(cid:48)
. The SE then sends
the set of traps T = {T1, ..Tl} to the SP.
• Send.
– S splits the traﬃc into tokens t1, . . . , tn.
– For each token ti, S draws ri uniformly at ran-
dom in Zq and executes Enc(ti, pkR) of our mod-
iﬁed DSE scheme. This procedure computes the
following:
c1,i = gri
1 ;
(s1, s2)i = G((cid:102)pk
ri
R );
c2,i = s1,i ⊕ ti;
c3,i = gs2,i
ui = e(pks2,i
c4,i = H(ui) + a mod q.
;
SE , F (ti));
1
The ciphertext for each token ti is the quadruplet
ci = (c1,i, c2,i, c3,i, c4,i).
– The encrypted traﬃc E is the collection of the
ciphertexts for each token. S sends E to R.
• Detect. When the Service Provider intercepts an en-
crypted traﬃc E between S and R, it executes the pro-
cedure DSE.Test(ci, Tj) on each ciphertext to look for
matching signatures. The Test procedure includes of
the following steps.
– The SP ﬁrst computes the value ui = e(c3,i, Tj),
and then computes a(cid:48) = c4,i − H(ui) mod q.
– If a (cid:54)= a(cid:48), it returns 1. This means that ti and rj
are diﬀerent and so that the signature does not
match with the traﬃc. Otherwise, it returns 0.
If the procedure returns 0 the Service Provider gener-
ates an alert. It may also return the auxiliary infor-
mation aux = Ti, which is the trapdoor that matched.
Otherwise, the traﬃc is forwarded to R.
• Receive. For each ciphertext, R executes Dec(ci, skR) of
the modiﬁed DSE scheme, made of the following steps.
568– R computes si = cx
1,i and use G to retrieve the
pair (s1,i, s2,i). Then, it calculates ti = c2,i ⊕ s1,i.
1
, the procedure returns ⊥.
SE , F (ti)).
– If c3,i (cid:54)= gs2,i
– Else, it computes ui = e(pks2,i
– If H(ui) − c4,i (cid:54)= a, then return ⊥.
– It returns ti.
While our protocol is primarily intended for pattern-match-
ing, we can use the same secret-key embedding technique as
BlindBox for evaluating regular expressions on suspicious
traﬃc. See [25] for details.
4.5 Security
Following the security model, we have the three following
theorems, where π is our intrusion detection system over
encrypted traﬃc. Proofs are given in Appendix A.
Theorem 1. Our scheme π is detectable provided that
there is no collision in the trapdoor generation function.
We prove the indistinguishability under two assumptions:
the computational Diﬃe-Hellman problem (CDH) and the
GDDHE assumption, the latter one being introduced in [11].
For the sake of simplicity, we give a slightly informal version
of the GDDHE assumption.
Definition 3
(CDH). Let g, ga, gb be three elements in
G, a probabilistic polynomial-time adversary has a negligible
probability to compute gab.
Definition 4
( ((P, Q, f ) − GDDHE)). Let s, n be pos-
itive integers and P, Q ∈ Fp[X1, . . . , Xn]s be two s-tuples
of n-variate polynomials over Fp. Let f ∈ Fp[X1, . . . , Xn]
a polynomial which is linearly independent from P and Q.
Given H(x1, . . . , xn) = (gP (x1,...,xn), ˜gQ(x1,...,xn)) ∈ Gs
1 × Gs
and T ∈ GT , a probabilistic polynomial-time adversary has a
negligible probability to successfully decide if T = gf (x1,...,xn)
.
2
T
Theorem 2. Our scheme π is traﬃc-indistinguishable un-
der the CDH and the GDDHE assumptions in the random
oracle model.
Theorem 3. Our scheme π is rule-indistinguishable for
rules of high min-entropy, in the random oracle model.
5. EXPERIMENTS
This section introduces our experimental setup, including
the implementation details and evaluation of our encryption
protocol. It aims at evaluating the functionalities and per-
formance of our solution, and to compare them with similar
state of the art solutions such as BlindBox.
5.1 Implementation
We implemented our protocol on an Intel(R) Xeon(R)
with a E5-1620 CPU with 4 cores running at 3.70GHz under
a 64-bit Linux OS. We used the optimal Ate library [21],
written in C, over their default 254-bits Barreto-Naehrig
curve. We implemented our protocol in Java 8, using the
Java API provided by [21] and built with Java Standard
Edition u112. We used SHA 256 as hash function, and Java
SecureRandom class to generate random numbers.
Dataset
Malware blocklists [1]
URL blacklists [3]
Yara rules [4]
Snort comm. rules [2]
Entries
1,250
4,546,341
256
3,467
Supported
entries
1,250
4,546,341
198
2,606
%
100%
100%
77.3%
75%
Figure 4: Datasets evaluated using our solution
5.2 Evaluation
We evaluate in this paragraph the functionalities and per-
formance of our solution. The functional evaluation lever-
ages the ability of our protocol to detect attacks using stan-
dard detection signatures such as malware blocklists, con-
tent ﬁltering and data leak protection, parental control, and
generic Snort IDS rules. The performance evaluation lever-
ages the overhead at the client-server side, and at the de-
tection appliance supplied by the service provider. It also
leverages the ability of our solution to scale under real world
network conﬁgurations and traﬃc rates.
5.2.1 Functional evaluation
Overall, our solution provides similar functional properties
as for Blindbox, while preserving in the same time the pri-
vacy of detection rules with respect to the service provider.
We refer to multiple public datasets in order to validate the
detection functionalities of our solution. These datasets, as
summarized in Figure 4, provide a wide range of function-
alities such as malware domains lists [1], parental control
through detection of illicit ads, pornography, and violent or
terrorist content [3], Yara rules providing malware detection
[4], and Snort community rules [2].
First, we evaluated the ability of our solution to imple-
ment the detection rules supplied by each separate dataset.
The malware blocklists dataset [1] provides a public list
of fully qualiﬁed URLs that supply malware infected con-
tent. The URL blacklists [3] dataset has a similar struc-
ture, but covers a wider range of illicit content including
also parental control. Both URL datasets may be applied
through comparison and perfect match with the URL header
ﬁelds for outgoing HTTP requests. Our solution, using
both delimiter- and window-based tokenization, perfectly
matches these URLs over encrypted traﬃc, providing a 100%
detection rate. The Yara rules dataset [4] has a diﬀerent
structure. It provides DPI rules that search for hexadeci-
mal strings, text keywords, and generic regular expressions
that characterize malware infected content in traﬃc payload.
The public Yara documentation provides general guidelines
to create Yara rules, and best practices to enhance detection
performance. In this scope, it deprecates the use of full regu-
lar expressions, unless when necessary. Regular expressions
are inherently slow, and so the Yara project recommends re-
placing them where possible with strings search, along with
jumps and wild-cards. Our Yara dataset includes 256 dis-
tinct rules, where 198 rules (77.3%) include only keyword
searches that can be fully detected over encrypted traﬃc
using our solution. Remaining rules include regular expres-
sions that require direct access to the traﬃc. These rules
are indeed supported by our solution using the decryption
property, which allows the SP to decrypt a suspect con-
nection when it contains malicious content detected using
keyword search. Snort rules [2] have similar properties as
for Yara rules, and so we obtained almost the same results
using Snort rules as for Yara rules. Using our DSE proto-
569col, we were able to evaluate 2,606 rules that do not contain
full regular expressions, out of the 3,467 initial Snort rules
(75%). The remaining rules are supported by our solution,
the same as for Yara rules, using the embedded decryption
property.
Second, we evaluated our ability to detect all attacks and
malicious content that are covered by the detection rules
in our public dataset. Since our DSE protocol perfectly
matches rule keywords with encrypted traﬃc tokens, as dis-
cussed in section 4.5, our ability to detect these attacks
solely depends on the tokenization strategy, the same as for
the BlindBox solution. To conﬁrm this hypothesis, we con-
ducted the same experiment as in the BlindBox paper [25],
using the same ICTF dataset [28]. This dataset includes
network traces collected during a capture the ﬂag exercise,
including multiple teams that each had the task of main-
taining a set of services such that they remain available and
uncompromised throughout the contest. The results of our
experiment conﬁrmed our initial hypothesis. We achieved
almost a similar detection accuracy as in BlindBox [25] (be-
cause for this experiment, our DSE protocol uses the same
tokenization strategy applied to the same dataset), includ-
ing 96.5% of the attack keywords and 98.3% of the attack
rules that would have been detected with Snort.
5.2.2 Performance evaluation
This section evaluates the performance of our solution
from the perspective of the diﬀerent actors. First, it lever-
ages the overhead on the sender and receiver when tokeniz-
ing and encrypting data using our DSE protocol. Second,
it leverages the overhead on the SP, including the time and
memory required to implement our detection protocol.
Our performance results, including also a benchmark with
the standard SSL inspection technique and the BlindBox
solution [25], are summarized in ﬁgure 5. As an overall as-
sessment, our solution drastically reduces, by 6 orders of
magnitude compared to BlindBox, the memory space re-
quired on the DPI appliance, making it much closer to real
world conﬁgurations. It also reduces, by 3 orders of mag-
nitude, the setup time for new HTTPS connections. The
setup time in our solution does not depend on the number
of detection rules as in BlindBox, and so it is similar to the
connection time for standard HTTPS connections. On the
other hand, and because of using a public-key encryption
protocol, our solution achieves a lower performance for data
encryption compared to BlindBox. Using our solution, a
sender would need 27ms to encrypt the content of a network
packet with an MTU of 1500 bytes. A typical web page such
as CNN would take in average 2.3s to be loaded using our
solution, whereas the same page would take nearly 97s to be
loaded using BlindBox (mostly because of the connection
setup time). We consider this additional overhead for data
encryption as a reasonable price to pay in order to reduce
the overall setup time for new HTTPS connections. Hence,
our solution is much more adapted to short and medium-
lived connections, which is the case for most standard web
pages on the Internet. In the remaining of this section, we
discuss more in details all these ﬁndings.
Overhead on the sender and receiver. The overhead on
the sender and receiver covers the time for connection setup
and encryption before the data is shared over the network.
Connection setup time. Since we use a public-key encryption
protocol that does not initially requires an SSL handshake,
the setup time is the same as for SSL/TLS connections, as
shown in ﬁgure 5. Compared to BlindBox, the setup time
using our solution does not depend on the detection rules
supplied by the SE. Our DSE protocol enables the SE to
generate a trapdoor key associated with its public-key pair
(pkR, skR). The trapdoor key is used only once by the SE
to encrypt the keywords in every new detection rule. The
trapdoors are further delivered by the SE to the SP, with
no participation from the sender and receiver. Hence, our
solution decreases by six orders of magnitude compared to
BlindBox the setup time when using 3 thousand detection
rules. More interestingly, it adds no overhead for connection
setup compared to the standard SSL/TLS protocol.
Data encryption time. This time, however, is longer using
our solution than both standard SSL/TLS and BlindBox.
For each token included in the traﬃc, it corresponds to the
time for encrypting this token using our DSE protocol, and
that we evaluated to 729µs in average for tokens of 128 bits
length. The overhead for data encryption is primarily due
to the use of the DSE protocol, which uses public-key cryp-
tography, as opposed to the symmetric-key cryptography
as used in SSL/TLS and BlindBox. To better qualify the
impact on end-user experience, we loaded multiple popu-
lar web sites such as CNN, Facebook, Twitter, BBC, and
Bank-of-America, and we evaluated the average overhead,
in terms of page load time, compared to both SSL/TLS and
BlindBox. The results of our experiment are summarized in
ﬁgure 6. Our solution adds a signiﬁcant overhead compared
to the standard HTTPS protocol because of its long data
encryption time. This data encryption time for our solu-
tion is rapidly compensated with the very long connection
setup time when using BlindBox. In the overall, the aver-
age loadtime using our solution remains acceptable for short
and medium-sized web pages, but it increases considerably