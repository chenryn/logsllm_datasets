title:Target generation for internet-wide IPv6 scanning
author:Austin Murdock and
Frank Li and
Paul Bramsen and
Zakir Durumeric and
Vern Paxson
Target Generation for Internet-wide IPv6 Scanning
Austin Murdock1,2, Frank Li1,2, Paul Bramsen1, Zakir Durumeric2, Vern Paxson1,2
{austinmurdock, frankli, paulbramsen, vern}@berkeley.edu, PI:EMAIL
1 University of California, Berkeley
2 International Computer Science Institute
ABSTRACT
Fast IPv4 scanning has enabled researchers to answer a wealth
of new security and measurement questions. However, while in-
creased network speeds and computational power have enabled
comprehensive scans of the IPv4 address space, a brute-force ap-
proach does not scale to IPv6. Systems are limited to scanning a
small fraction of the IPv6 address space and require an algorithmic
approach to determine a small set of candidate addresses to probe.
In this paper, we first explore the considerations that guide design-
ing such algorithms. We introduce a new approach that identifies
dense address space regions from a set of known “seed” addresses
and generates a set of candidates to scan. We compare our algorithm
6Gen against Entropy/IP—the current state of the art—finding that
we can recover between 1–8 times as many addresses for the five
candidate datasets considered in the prior work. However, during
our analysis, we uncover widespread IP aliasing in IPv6 networks.
We discuss its effect on target generation and explore preliminary
approaches for detecting aliased regions.
CCS CONCEPTS
• Networks → Network measurement; Network properties;
• Security and privacy → Network security;
KEYWORDS
IPv6, Scanning, Network Measurement
ACM Reference format:
Austin Murdock, Frank Li, Paul Bramsen, Zakir Durumeric, and Vern Paxson.
Target Generation for Internet-wide IPv6 Scanning. In Proceedings of IMC
’17, London, UK, November 1-3, 2017, 12 pages.
https://doi.org/10.1145/3131365.3131405
1 INTRODUCTION
Internet measurement has greatly benefited from recent advances
that facilitate effective exploration of the global IPv4 address space.
By exploiting the ability of modern hardware and connectivity to
transmit over a million packets per second, tools like ZMap [12]
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’17, November 1-3, 2017, London, UK
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11...$15.00
https://doi.org/10.1145/3131365.3131405
and Masscan [18] have fundamentally enhanced the ability of re-
searchers to conduct wide-ranging assessments of Internet ser-
vices, including the use of cryptography in practice [4], uncovering
network administrator behaviors [21], and tracking vulnerability
remediation [11].
These tools leverage the density and limited size of the IPv4
address space: today’s scanning speeds are such that it is feasi-
ble to exhaustively enumerate all possible IPv4 addresses in order
to conduct comprehensive scans. However, as has long been rec-
ognized [3], IPv6’s much larger address space renders exhaustive
probing completely infeasible. This then raises the question for mea-
surement researchers of how to obtain at least a degree of global
IPv6 address visibility somewhat comparable to the comprehensive
IPv4 visibility provided by tools such as ZMap.
While prior work has developed sophisticated techniques for
inferring the underlying structure of how IPv6 network operators
assign addresses in their networks [14], and, separately, for how
to leverage IPv6 address assignment policies to abet network re-
connaissance [17], the question of how to employ these insights to
facilitate effective global IPv6 scanning remains.
In this work we consider the basic problem of how to draw upon
a set of IPv6 seeds—i.e., collections of IPv6 addresses known to host
systems of a particular nature—to determine additional addresses
that are likely to prove fruitful for scanning. We consider the salient
properties pertinent for leveraging a given set of seeds, and develop
the general notion of Target Generation Algorithms (TGAs) that
extrapolate from the set of seeds to identify target addresses to
scan. To manage the intractable scale of the IPv6 address space,
our analysis incorporates the key notion of a probe budget that
specifies constraints on how many scan packets a researcher can
tractably send. TGAs strive to extrapolate from a set of seeds the
most promising IPv6 addresses to probe to find additional systems
of interest, given the constraint of a fixed probe budget.
As a concrete instantiation of a TGA, we develop 6Gen, an algo-
rithm that leverages a set of seeds to identify dense address space
regions. It operates under the assumption that dense regions of
seeds correlate with dense regions of active hosts. 6Gen clusters
similar seeds together into high density regions, generating scan
targets of addresses within those regions.
While 6Gen’s design is fairly simple, its utility becomes evident
when using real-world datasets as seed inputs. From a train-and-
test evaluation comparing 6Gen with Entropy/IP [14]—the state of
the art algorithm in analyzing IPv6 address structure—we find that
6Gen can recover between 1–8 times as many addresses for five
candidate seed datasets considered in the prior work; for one of
the network datasets, it was able to predict over 99% of addresses.
In addition, we employed 6Gen on an extensive DNS-based seed
dataset and conducted active IPv6 scans of the generated targets,
discovering over 55 M new active addresses. However, we also
IMC ’17, November 1-3, 2017, London, UK
Murdock et al.
uncover the presence of large-scale IP aliasing, where all addresses
within massive network prefixes respond. We develop an initial
technique for detecting large aliased regions, and find that even after
filtering discovered addresses in those regions, 6Gen still discovered
over a million new IPv6 addresses across thousands of networks.
While our preliminary evaluation indicates that 6Gen may gen-
erate more effective target lists than Entropy/IP, this comes with
the key consideration that Entropy/IP was designed specifically to
illuminate overall address structure, rather than to produce scan-
ning targets given a particular probe budget. An important item for
future work is to analyze the underpinnings of these differences
and subsequently refine such algorithms to enhance their efficacy
at identifying promising targets for IPv6 scanning. Additionally,
further developments in IPv6 scanning must contend with the IP
aliasing that occurs in the IPv6 address space, where responsive
addresses may not meaningfully equate to distinct hosts. A promis-
ing direction for more effective IPv6 scanning is tighter integration
between the TGA and the network scanner, where a feedback loop
can incorporate fresh scan results to inform the target generation as
a scan progresses. With such developments, we can move towards
wide-ranging assessments of the IPv6 Internet.
2 BACKGROUND
In this section, we provide a brief background on IPv6 addressing
and introduce the domain-specific terms we use in this paper. We
refer the reader to RFC 2460 [9] for a detailed description of the
protocol.
IPv6 has a much larger address space than IPv4; IPv6 addresses
are 128 bits. IPv6 unicast addresses consist of three parts: (1) a
global routing prefix, (2) a local subnet identifier and (3) an interface
identifier [20]. The interface identifier may be generated by the
client using Stateless Autoconfiguration [30], by the server using
DHCPv6 [10], or statically assigned [17].
We represent
IPv6 addresses in a human-readable text
format using eight groups of four hexadecimal digits, with
each group representing 16 bits and separated by colons
(“:”). We call each hexadecimal digit (corresponding to four
bits of
the address) a nybble. An example IPv6 address
is 2001:0db8:0000:0000:0000:0000:0011:2222. As IPv6 ad-
dresses often contain many zero-valued nybbles, a compressed
representation excludes leading zeros in each group, and substitutes
the longest sequence of all-zero groups with a double colon notation
(“::”). Thus, the example IPv6 address has a compressed representa-
tion of 2001:db8::11:222. CIDR notation for IPv4 is identically de-
fined for IPv6. We also denote an address range using nybbles with
the wildcard value “?”, indicating a dynamic nybble that can range
across multiple values. For example, 2001:db8::?:100? represents
256 addresses, including 2001:db8::5:1000, 2001:db8::8:100a,
and 2001:db8::1003.
3 RELATED WORK
Prior work on IPv6 scanning falls into three broad categories: (1) de-
veloping methods for extracting IPv6 addresses from publicly acces-
sible data sources (e.g., DNS records), (2) analyzing known addresses
to understand allocation patterns, and (3) designing algorithms that
generate address targets to scan.
3.1 Extracting IPv6 Addresses
When querying for the IPv6 PTR record for an address prefix, Fiebig
et al. [13] identified that many DNS servers respond differently if
there exists a PTR record for some address within that prefix, than
when such a record does not exist. Leveraging this insight, they
mined IPv6 addresses from DNS servers by recursively querying
for PTR records for address prefixes. However, not all DNS servers
conform to this observed behavior, preventing Fiebig et al. from
comprehensively extracting all IPv6 addresses in DNS records. In
total, they collected a dataset of 5.8 M unique addresses.
Gasser et al. [16] explored a more extensive collection of ad-
dresses from various active and passive sources. Passive sources
included network taps on a European Internet Exchange Point and
the Munich Scientific Network’s Internet uplink. Addresses were
also actively collected from crawls of the Alexa Top 1 Million do-
mains [2], TLD zone files, and DNS datasets from Rapid7 [26, 28]
and CAIDA [6]. In total, the authors collected 148.6 M addresses via
passive sources and 2.7 M addresses from active sources. To assess
the liveness of these addresses, Gasser et al. extended ZMap [12]
to support IPv6 scanning. They found that 76% of addresses from
active sources were responsive to ICMPv6 pings, compared to 13%
from passive network taps. They released their dataset of collected
addresses on their website [15].
3.2 Identifying Addressing Patterns
RFC 7707 [17] describes several known practices for assigning IPv6
addresses that a network scanner may be able to leverage. These
practices include embedding human-readable text in the address
(e.g., DEADBEEF), using only the least significant address bits, en-
coding the port of a network service, or inserting the network
interface’s MAC address. The RFC additionally enumerates several
methods for discovering active addresses, such as analyzing DNS
records, performing traceroutes to known addresses, and monitor-
ing peer-to-peer trackers.
Czyz et al. [8] compared the IPv4 and IPv6 firewall policies
of dual-stack hosts. They identified 520 K dual-stack servers by
performing DNS A and AAAA queries for domain names in the
Rapid7 DNS ANY dataset [28]. They also found 25 K dual-stack
routers by conducting the same DNS lookups on hosts in the CAIDA
Ark traceroute dataset [5]. The team noted that 55% of the routers
and 64% of the servers had addresses with non-zero values in only
the least significant 8 bits or the most significant 4 bits of the subnet
identifier. Furthermore, 80% of the routers and 22% of the servers
had addresses with non-zero values in only the least significant
16 bits of the interface identifier.
Plonka and Berger [25] developed an address visualization tech-
nique called Multi-Resolution Aggregate plots. The technique in-
volves analyzing a set of addresses to produce a novel metric that
quantifies how relevant each portion of an address is to grouping
addresses together into dense address space regions. The authors
showed that plots of this metric can be useful for manually discov-
ering network-specific addressing practices. They also introduced
a method for identifying dense network prefixes from the given
addresses that can be leveraged for scanning. We note that while
6Gen is similarly density-driven, it considers any address space
region, beyond just network prefixes.
Target Generation for Internet-wide IPv6 Scanning
IMC ’17, November 1-3, 2017, London, UK
3.3 Generating Scan Targets
The recursive algorithm developed by Ullrich et al. [31] takes a
set of seed addresses and a threshold N as input, and determines
values for all but N bits of an IPv6 address range. The algorithm
requires a user-specified address range to start, with at least one bit
determined (e.g., with a set value). Then in each level of recursion,
the algorithm finds all seed addresses encapsulated by the current
range, and identifies which bit and value pair matches the largest
number of such seeds. It sets that bit in the current range to the
corresponding value, and recurses until only N undetermined bits
remain. The addresses in the final range are used as scan targets.
The authors evaluated this algorithm against the target prediction
methods described in RFC 7707 [17], such as varying the low-order
bytes of seed addresses, and against brute-force guessing. Using 10-
fold cross validation, where they used a subset of seeds for training
and the rest for testing, the authors observed that their algorithm
outperformed the other strategies in predicting test addresses. This
algorithm shares similarities with 6Gen, as it produces targets from
address ranges. However, it can only output ranges of constant size
(dependent on the parameter N ) and requires an initial range as
input, whereas 6Gen automatically can produce multiple address
ranges of varying sizes.
Most recently, Foremski et al. [14] introduced Entropy/IP, an
algorithm for discovering structure in a set of IPv6 addresses. En-
tropy/IP identifies adjacent nybbles whose values have similar levels
of entropy across the addresses, and groups them together into seg-
ments. For each segment, it clusters segment values along several
metrics. Entropy/IP utilizes a Bayesian network to model the sta-
tistical dependencies between values of different segments. This
learned statistical model can then generate target addresses for
scanning. Across 10 datasets of router and server seed addresses,
the authors employed Entropy/IP on a 1 K random sample of each
dataset and generated 1 M targets each, finding 770 K addresses
in total were responsive on ICMPv6. 6Gen’s design contrasts with
Entropy/IP’s as it does not aim to learn structure in seed addresses.
Instead, it identifies dense regions of similar seeds to generate tar-
gets from, constrained by a user-provided probe budget.
4 IPV6 SCANNING CONSIDERATIONS
While increased network speeds and computational power have
enabled researchers to scan the full IPv4 address space in minutes
using a brute-force approach [12, 18], the IPv6 address space is
simply too expansive to ever comprehensively scan. To effectively
find active hosts, IPv6 scanners need to be more intelligent and
target ranges that are more likely to contain active hosts. In this
section, we highlight these challenges and explore considerations
for IPv6 target generation and scanning.
4.1 Seed Selection
Algorithms that generate a candidate set of addresses to scan typi-
cally consume a set of seeds—known addresses that are mined to
uncover allocation patterns in order to predict other hosts to scan.
Prior work [16] has typically categorized seeds by service provider
or data source. We observe that while one approach is to consume a
large number of seeds, Internet-wide scans are typically performed
horizontally in order to uncover a class of hosts for future analysis.
For example, one might seek all hosts that respond on TCP/443 in
order to measure a characteristic of HTTPS.
Algorithms may be able to more aptly generate targets for a
specific protocol with this additional data. To further the example,
it may be that an algorithm is better able to predict the IPs of
hosts that support TCP/443 by only considering known hosts that
support TCP/80 or TCP/443 (and potentially exclude hosts that
support TCP/22). Selecting seeds is an important question as they
can greatly influence the targets produced by a TGA.
4.2 Seed Analysis
At the core of IPv6 scanners is an algorithm that attempts to mine
structure in known addresses and generate additional candidates to
be scanned. We observe that there are two approaches to modeling
addresses: dependent and independent. In the dependent model,
there are (perhaps hidden) dependencies between seed addresses.
Thus, the existence of a particular address in the seed dataset affects
the probability that certain other non-seed addresses are also active.
Under such a model, TGAs may be able to leverage these dependen-
cies to uncover patterns that can be used for more efficient scans.
For example, a simple algorithm could perform a linear regression
on seeds (perhaps per network prefix), and predict target addresses
based on the linear model.
In the second model, seeds are treated as independent and iden-
tically distributed random samples of true active addresses. In this
model, the regions of address space with the highest density of ac-
tive addresses will likely have the highest density of seeds. Unlike
the first model, the observation of a specific seed has no implica-
tions on other potentially active addresses. Under this model, a
natural scanning approach would be to comprehensively scan the
most dense regions.
The dependent seeds model can lead to TGAs that may be more
efficient, as they attempt to model the seed data to identify patterns.
In comparison, it may seem that the independent seeds model