title:MAppGraph: Mobile-App Classification on Encrypted Network Traffic
using Deep Graph Convolution Neural Networks
author:Thai-Dien Pham and
Thien-Lac Ho and
Tram Truong-Huu and
Tien-Dung Cao and
Hong Linh Truong
MAppGraph: Mobile-App Classification on
Encrypted Network Traffic using Deep Graph
Convolution Neural Networks
Thai-Dien Pham∗
Tan Tao University
Long An, Vietnam
PI:EMAIL
Thien-Lac Ho∗
Tan Tao University
Long An, Vietnam
PI:EMAIL
Tram Truong-Huu†
Singapore Institute of Technology
Singapore, Singapore
PI:EMAIL
Tien-Dung Cao
Tan Tao University
Long An, Vietnam
PI:EMAIL
ABSTRACT
Identifying mobile apps based on network traffic has multiple bene-
fits for security and network management. However, it is a challeng-
ing task due to multiple reasons. First, network traffic is encrypted
using an end-to-end encryption mechanism to protect data privacy.
Second, user behavior changes dynamically when using different
functionalities of mobile apps. Third, it is hard to differentiate traf-
fic behavior due to common shared libraries and content delivery
within modern mobile apps. Existing techniques managed to ad-
dress the encryption issue but not the others, thus achieving low
detection/classification accuracy. In this paper, we present MApp-
Graph, a novel technique to classify mobile apps, addressing all the
above issues. Given a chunk of traffic generated by an app, MApp-
Graph constructs a communication graph whose nodes are defined
by tuples of IP address and port of the services connected by the
app, edges are established by the weighted communication correla-
tion among the nodes. We extract information from packet headers
without analyzing encrypted payload to form feature vectors of
the nodes. We leverage deep graph convolution neural networks
to learn the diverse communication behavior of mobile apps from
a large number of graphs and achieve a fast classification. To vali-
date our technique, we collect traffic of a hundred mobile apps on
the Android platform and run extensive experiments with various
experimental scenarios. The results show that MAppGraph signifi-
cantly improves classification accuracy by up to 20% compared to
recently developed techniques and demonstrates its practicality for
security and network management of mobile services.
∗Both authors contributed equally to the work.
†This work has been done when T. Truong-Huu was with Institute for Infocomm
Research (I2R), Agency for Science, Technology and Research (A*STAR), Singapore.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485925
Hong-Linh Truong
Aalto University
Espoo, Finland
PI:EMAIL
CCS CONCEPTS
• Security and privacy → Mobile and wireless security.
KEYWORDS
Mobile-App Classification, Graph Convolution Neural Networks
ACM Reference Format:
Thai-Dien Pham, Thien-Lac Ho, Tram Truong-Huu, Tien-Dung Cao, and Hong-
Linh Truong. 2021. MAppGraph: Mobile-App Classification on Encrypted
Network Traffic using Deep Graph Convolution Neural Networks. In An-
nual Computer Security Applications Conference (ACSAC ’21), December
6–10, 2021, Virtual Event, USA. ACM, New York, NY, USA, 14 pages. https:
//doi.org/10.1145/3485832.3485925
1 INTRODUCTION
The proliferation of communication technologies including 5G en-
ables a remarkable growth of smart and mobile devices. It is widely
predicted that the number of Internet of Things (IoT) devices in-
cluding smartphones will attain a few tens of billions by 2023 [18].
Besides daily functionalities such as financial payments, voice-over-
IP (VoIP) and video live streaming, today’s mobile applications are
increasingly being used for many real-time and high bandwidth
services such as virtual reality or augmented reality games. The
security of mobile devices and their applications has a great impact
on the security of the underlying networks, which are more and
more complex and vulnerable. Mobile service operators need to
protect not only their networks but also application and platform
services deployed in their infrastructures. However, they do not
have control over the applications installed on each device in their
network. Thus, addressing the problem of mobile and network secu-
rity becomes more challenging. A possible solution that operators
can still retain the capability of detection and monitoring of ac-
tive apps is to observe the network traffic behavior of each device.
Though this may lead to the problem of user privacy as mobile apps
can reveal a lot of sensitive information about users, it provides a
non-intrusive approach without requiring host (device) access.
Network traffic classification has been extensively studied in the
literature [29]. Most of existing techniques focused on the traffic of
traditional computer networks [10, 16, 24, 25, 35, 36, 39, 46]. Adopt-
ing such techniques to handle network traffic generated by modern
apps in smartphones faces several challenges. First, according to [5]
1025ACSAC ’21, December 6–10, 2021, Virtual Event, USA
T.-D. Pham et al.
more than 80% of mobile traffic is encrypted or adopts Transport
Layer Security (TLS), thus it might not be possible to classify traffic
using payload-based methods that analyze certain fields of applica-
tion layer protocols. Second, port-based classification methods fail
to classify mobile traffic as apps deliver their data predominantly
using HTTPS and send data back and forth using text formats such
as XML or JSON. Some information such as the number of files or
file size are not available to adopt web page classification. Third,
user behavior changes dynamically over time depending on the
used functionalities. The traffic captured in a short period (e.g.,
5 minutes) of a mobile app may not represent its complete traf-
fic behavior. For instance, a user surfs Facebook to update all the
new feeds for 10 minutes and then switches to Facebook Watch or
Facebook Live to watch available videos. Even though the user
uses the same app, the traffic behavior is much different between
updating new feeds from Facebook servers and streaming videos
from different sources (e.g., YouTube). Given the traffic of an app
captured at different times, it is challenging to identify a unique
signature that can be used to classify the app. Last but not least, to
optimize the performance, modern mobile apps are designed and
developed using micro-services that share the same libraries and
use content delivery networks (CDNs) and third-party services [50].
For such apps, using domain name resolution or IP address lookup
for app classification may not be useful. Yet, with local cache, DNS
and TLS exchanges may not be observed at all. This raises the need
for an effective approach to mobile-app classification that can deal
with encrypted traffic, and be aware of diverse functionalities and
the nature of sharing third-party services of mobile apps.
Existing works on mobile-app classification mostly overcome
the challenge of encrypted traffic but fail to address the remaining
issues. For instance, AppScanner [40] used a flow-based detection
approach that extracts side-channel features from the packet header
and computes statistical features to train a machine learning model
for mobile app classification. As apps use CDNs or shared services,
similar flow characteristics will be observed, thus confusing the
classification model [40, 41, 44]. Examples of shared services in-
clude crash analytics, mobile advertisement (ad) networks, social
networks. These services are often embedded through libraries
that are used by many apps: e.g., googleads.g.doubleclick.net,
lh4.googleusercontent.com and android.clients.google.com.
Motivated by this issue, the authors of FlowPrint [44] proposed to
construct the fingerprint of an app by considering the communica-
tion graph between the mobile device and other destinations (e.g.,
CDNs and third-party services) and the associated attributes such
as destination IP, destination port and TLS-certificates. At the infer-
ence stage, the fingerprint collected in the past is compared with
the new one to determine the app. However, due to the challenge
in building the communication graphs for all possible behavior of
an app, the author only considered a short communication period
(e.g., 5 minutes). Thus, it may not work well if the user changes her
usage behavior or uses different functionalities of the app.
In this paper, we develop MAppGraph, a novel technique for
mobile app classification addressing the above challenges. We col-
lect network traffic of mobile apps at different times, resulting in a
large amount of network traffic for each app to be processed. Each
chunk of traffic (e.g., within 5 minutes) forms a communication
graph where nodes are defined by the tuples of IP address and port
of the destination services, which are accessed by the apps during
that time window. We adopt the cross-correlation approach [32]
to establish the edges between nodes and compute their weight.
We extract information from packet headers such as packet size,
inter-arrival time of packets, etc., and derive statistical features,
which are used as attributes of the graph nodes to represent traffic
behavior of the communication between the app and a service.
With a large amount of traffic collected, one mobile app will
have a set of graphs, each representing traffic behavior at different
time instants. Learning or identifying the fingerprint of each mobile
app through this big set of graphs is challenging. The emergence of
graph neural networks (GNN), specifically deep graph convolution
neural networks (DGCNN) [49], has demonstrated the capability
of learning complex behavior and extracting high-level features
from big data to create the signature or fingerprint of analyzed
data. DGCNN can be naturally adapted to address the problem of
mobile-app classification and fingerprinting based on network traf-
fic, which can be represented as graphs. DGCNN can be used for
both supervised and unsupervised learning problems depending
on the problem objective. To this end, in MAppGraph, we exploit
the capability of DGCNN in a supervised learning manner for the
mobile-app classification problem and keep the unsupervised learn-
ing for future work. We collect traffic of 101 mobile apps, which
are popular in Google Play. For each app, more than 30 hours of
traffic were collected, resulting in more than 600 GB of traffic stored
in PCAP files. We run extensive experiments to demonstrate the
effectiveness of MAppGraph. We compare its performance with
recent techniques, specifically AppScanner [40] and FlowPrint [44]
as well as multi-layer perceptron (MLP). The main contribution of
the paper is summarized as follows:
• We develop a method for processing network traffic and
generating graphs with node features and edge weights that
better represent the communication behavior of mobile apps.
• We develop a DGCNN model that is able to learn the com-
munication behavior of mobile apps from a large number of
graphs and achieve a fast mobile-app classification.
• We collect traffic for 101 mobile apps and run extensive ex-
periments to demonstrate the effectiveness of MAppGraph.
• We enhance AppScanner and FlowPrint and use as baselines
for performance comparison with MAppGraph.
We have made both our prototype and a portion of dataset avail-
able at https://soeai.github.io/MAppGraph.
The rest of the paper is organized as follows. Section 2 presents
existing literature. Section 3 presents some background on deep
graph neural networks and their application to the problem of
mobile-app classification. Section 4 presents the details of MApp-
Graph. Section 5 present the experiments and analysis of results
before we conclude the paper in Section 6.
2 RELATED WORK
Network-centric techniques that are based on traffic analysis have
been used extensively in various problems such as network manage-
ment and cybersecurity in both traditional computer networks and
mobile (IoT) networks. In traditional computer networks, network-
centric techniques have been used extensively in cybersecurity
1026MAppGraph: Mobile-App Classification on Encrypted Network Traffic using Deep Graph Convolution Neural Networks ACSAC ’21, December 6–10, 2021, Virtual Event, USA
problems such as network anomaly detection and attack detec-
tion [22, 28, 43]. Those works focused on collecting basic traffic
features at the data link layer and network layer of the TCP/IP
network model and calculating additional statistical features such
as mean and standard deviation of packet rate, packet size, inter-
arrival time between packets, number of packets in a flow, flow
rate, flow duration, and number of flows in a session. Several works
such as [2, 3] also use traffic analysis-based techniques for malware
detection, applying in the scenarios where malware samples attack
the victim from a remote source, e.g., botnet traffic.
In IoT networks, traffic analysis-based techniques have been used
for multiple purposes. In [42], the authors developed a distributed
device fingerprinting technique to exploit the presence of common
IoT devices and detect new devices across smart home networks
and enterprise networks. In [4], the authors showed that sensitive
information can be inferred from the IoT devices in smart homes.
The authors also demonstrated that users’ usage patterns can be
identified by analyzing the traffic of user devices, MAC address, DNS
queries and traffic rates. As using traffic can identify IoT devices,
in [38], the authors developed a multivariate Gaussian distribution,
which is trained on device traffic in a supervised learning approach,
resulting in a machine learning model used to fingerprint device and
authentication. As they used machine learning, the performance of
the model may degrade due to changes in domains, i.e., from one
smart home to another smart home. The authors applied transfer
learning [30] to minimize the performance degradation and adapt to
new domains. Similar works have been presented in [26, 27], which
also proposed to extract traffic features from the network, transport
and application layers to train machine learning models for device
fingerprinting and security enforcement. In [26], the authors also
proposed to gather the data from external resources such as Alexa
top website ranking1 and geo-location of IP addresses. All of the
works aimed to identify IoT devices as soon as possible after they
join the network. Thus, in [27], the authors aimed to minimize
the number of traffic packets required to successfully identify the
devices. Nevertheless, too few packets may not be sufficient to
represent the device traffic pattern.
Mobile-app classification based on network traffic has been stud-
ied in the literature [9, 11–13, 40, 44]. In [11, 12], the authors pro-
posed to used machine learning and deep learning for mobile-app
classification based on HTTP headers. In [9, 13], the authors devel-
oped the techniques for creating fingerprints automatically. How-
ever, those approaches are based on deep packet inspection, which
will not work when traffic is encrypted. AppScanner [40] uses sta-
tistical features of packet sizes in the TCP streams to train Support
Vector Machine (SVM) and Random Forest (RF) to learn traffic
patterns of mobile apps and classify known apps during the in-
ference phase. Similar to AppScanner, BIND [1] uses supervised
learning techniques to learn traffic behavior of mobile apps based
on statistical features of TCP streams combined with temporal
features to achieve higher performance compared to AppScanner.
Unfortunately, to optimize app performance, most mobile apps
nowadays share the same third-party services such as Content
Delivery Networks, making their TCP streams much similar and
harder to recognize apps. Another supervised learning technique
1Alexa Top Site: https://www.alexa.com/topsites; accessed: May 2021
has been proposed in [31], which showed that mobile apps can also
be identified even though the traffic is anonymized through Tor.
Recently, FlowPrint [44] has been proposed. The authors con-
sidered the spatial correlation of traffic flows between the mobile
apps and other destinations such as app servers and third-party ser-
vices and developed a technique to create mobile-app fingerprints
for app identification. However, a mobile app may have multiple
fingerprints associated with various functionalities. Within a short
duration (e.g., 5 minutes), a user may not use all the functionalities
of the app so that its created fingerprint represents all its traffic
behavior. Inspired by FlowPrint with an aim to address the diverse
behavior of mobile apps, we leverage the capability of deep graph
convolution neural networks, which can represent both statistical
traffic features by the node attributes and communication correla-
tion among nodes by the edges. With multiple graphs captured at
different times, we train a deep learning model to classify mobile
apps regardless of the user behavior and functionalities used.
3 BACKGROUND
3.1 Graph for Data Representation and GNN
Graphs and their methods deal with abstract concepts such as rela-
tionships and interactions. They provide an intuitively visual way
of thinking about these concepts. With the prevalence of graph-
structured data, there is an increasing need for graph representa-
tion learning [8]. Mathematically, a graph G is defined by a tuple
(V, E) where V is the set of nodes, E is the set of edges linking
the nodes. Each node, v ∈ V is associated with a d-dimensional
vector of features, xv ∈ Rd and denote the set of all features of
nodes as matrix X := {xv : v ∈ V} ∈ Rd×|V|. For every edge that
connects nodes u, v ∈ V, we denote eu,v ∈ R to be a weight of
the edge (u, v) ∈ E. In Figure 1, we present an example of graph-
structured data. Analyzing graph-structured data is a challenging
task due to the fact that graphs do not exist in a Euclidean space
and they do not have a fixed form even though two graphs may
have the same adjacency matrix. In [6], Bruna et al. used convolu-
tional neural networks to represent graphs in the spectral domain.
In [49], Zhang et al. further improved the graph representation
with a new deep neural network architecture, namely Deep Graph
Convolution Neural Network (DGCNN), that can keep much more
vertex information and learn from the global graph topology. Such
generalization aims to learn meaningful embeddings (i.e., vector
representations) of nodes and/or (sub)graphs. Such embeddings
can be used in various downstream tasks, such as node classifica-
tion [45], link prediction [37], and graph classification [49]. Such
models are usually evaluated on chemical and social domains [47].
In this work, we adopt graph neural networks for cybersecurity
to represent mobile traffic in a meaningful manner and achieve
better performance for the mobile-app classification problem. As
DGCNN has demonstrated its superior performance compared to
existing approaches [49] in the graph classification problem, we
adopt DGCNN and carry out optimization on network architectures
and learning parameters.
3.2 DGCNN for Graph Classification
In general, graph classification involves differentiating graph in-
stances of different classes and predicting the label of an unknown
1027ACSAC ’21, December 6–10, 2021, Virtual Event, USA
T.-D. Pham et al.
Figure 1: An Example of Graph-structured Data.
graph. Mathematically, given D := {(G1, y1),(G2, y2), ...} where
yi ∈ Y is the class label of the graph Gi ∈ G, the goal of graph
classification is to learn a mapping f : G → Y that maps graphs
to the set of class labels and predicts the class labels of unknown
graphs. This task requires a graph representation vector distinctive
enough to distinguish graphs of different classes. There exist sev-
eral graph neural network architectures that can be used for graph
classification such as DiffPool [48], DGCNN [49] and 2STG+ [14].
The common point of those architectures is that they consist of
three sequential stages in the graph analysis process:
• First, a given graph is passed through the graph convolution
layers that extract local features and define a consistent
vertex ordering;
• Second, the pooling layers will process the output of the first
stage and build a vector representation of the entire graph
with predefined order and size;
• Third, they employ traditional convolutional or dense (fully
connected) layers that take the output of the second stage
and make the prediction.
For the sake of completeness, we present below the details of each
stage of the graph analysis process. We refer the reader to [49] for
further detailed mathematical proofs of the approach.