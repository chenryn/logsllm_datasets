The intuition for the ballot privacy component of the above
theorem is based on two key points. First, one can replace
with negligible loss of security a proof from a zero-knowledge
proof system with a simulated one, provided that the relation
is (with overwhelming probability) satisﬁed by a ballot privacy
this stage of the proof the relation is left
adversary. At
unspeciﬁed,
thus bounded by a voting friendly constraint.
Secondly, one uses the IND-1-CCA security assumption for
the encryption scheme to replace the view of the adversary on
the ballot box.
Theorem 3. (strong consistency) 6 Let V = MV(E, ΣR,
ValidInd, Publish, Flabel, ρ). Then, V is strongly consistent.
4Lemma scorr in ../MiniVotingSecurity.ec
5Lemma bpriv in ../MiniVotingSecurity.ec
6Lemmas consis1, consis2, consis3 in ../MiniVotingSecurity.ec
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
The proof for strong consistency easily follows from the
deﬁnition of the Labelled-MiniVoting scheme, using the ex-
tractor deﬁned by
∀ id , (cid:3), c. Extract((id, (cid:3), c), sk) = (id, Dec(sk, (cid:3), c)).
returns a ciphertext produced by E(cid:3) on v, together with a proof
of validity π that links the ciphertext, public key and label to
the underlying vote and randomness used during encryption.
The decryption algorithm checks the validity of the proof
before decrypting the ballot. A more formal description of
the construction is given in Figure 7.
IV. APPLICATIONS
We now show how to apply the general results discussed
in Section III to the security of several hundred variants
of Helios, including most of its existing versions–either im-
plemented, or mentioned in publications. We ﬁrst
instan-
tiate Labelled-MiniVoting to a scheme we call PreHelios,
instantiating the labelled public-key encryption scheme with
a construction that combines a public-key encryption scheme
with a proof of knowledge. PreHelios then serves as a basis
for further instantiations and reﬁnements.
In particular, we show that PreHelios corresponds, assuming
to the variant Helios-mix of Helios with
secure mixnets,
mixnets. We further prove that
the security of PreHelios
is equivalent, assuming a secure homomorphic encryption
scheme, to that of a variant Helios-hom, which uses homomor-
phic tally. In both cases, we show that remaining parameters
of Helios-mix and Helios-hom (for example, validity check or
result functions . . . ) can be instantiated in many ways, yielding
about 540 secure variants each, all equipped with a machine-
checked proof automatically based on our framework theorem.
Labelled-MiniVoting requires–quite strictly–that the ballot box
carefully discards duplicate ciphertexts. We also explain how
to (securely) relax this condition, yielding another variant
Helios-hom-IDweed that only discards duplicate ciphertexts
when they correspond to the same ID. This check is more
practical since it can easily done while deadling with revoting.
Finally, we point
implemented voting schemes,
whose privacy properties are directly captured as machine-
checked instantiations of one of our Theorems.
to several
Our results are summarized in Figure 6. We equip all the
schemes we discuss with machine-checked proofs of privacy.
Rectangular nodes are not fully instantiated, and represent
families of schemes whose privacy may rely on some non-
standard hypotheses. All
leaves represent fully-instantiated
schemes: their security relies only on that of their crypto-
graphic primitives (encryption scheme and proof systems).
return KGen(cid:3)(1λ)
KGen(1λ)
1 :
Enc(m, (cid:3), pk)
1 :
2 :
3 : π ← P(cid:3)((c, pk, (cid:3)), (m, r))
4 :
r ← Zq
c ← Enc(cid:3)(pk, m; r)
return (c, π)
Fig. 7. Algorithms of LPKE(E(cid:3), Σ(cid:3)
Dec(sk, (cid:3), (c, π))
1 :
2 :
3 :
return ⊥
if V(cid:3)((c, pk, (cid:3)), π) then
return Dec(cid:3)(sk, c)
R(cid:2) ), with Σ(cid:3)
R(cid:2) = (P
(cid:3), V
(cid:3)).
We deﬁne PreHelios as Labelled-MiniVoting instantiated
with an LPKE construction as its labelled public-key encryp-
tion scheme.
Deﬁnition 9. Let E(cid:3) be an encryption scheme, and ΣR, Σ(cid:3)
R(cid:2)
be two proof systems. Given Γ = LPKE(E(cid:3), Σ(cid:3)
R(cid:2) ), and some
algorithms ValidInd, Publish, Flabel and ρ,
the PreHelios
scheme constructed from these primitives is deﬁned as
PH (E(cid:3), Σ(cid:3)
R(cid:2) , ΣR, ValidInd, Publish, Flabel, ρ) =
MV (Γ, ΣR, ValidInd, Publish, Flabel, ρ) .
The following corollary of Theorems 1, 2, 3, states that
R(cid:2) , ΣR, ValidInd, Publish, Flabel, ρ) is
PreHelios inherits the security of Labelled-MiniVoting.
Corollary 1. Let E(cid:3) be an encryption scheme, and ΣR,
R(cid:2) be two proof systems. Let Γ = LPKE(E(cid:3), Σ(cid:3)
Σ(cid:3)
R(cid:2) ), and
ValidInd that returns true for valid ciphertexts. The scheme
PH (E(cid:3), Σ(cid:3)
• ballot private, provided that R is voting friendly, Γ is
• strongly consistent.
• strongly correct if Γ is IND-1-CCA
This follows directly from Theorems 1, 2, 3. A typical
example of an IND-1-CCA encryption scheme is El Gamal
encryption with Chaum-Pedersen proofs [15].
IND-1-CCA, the proof system ΣR is zero-knowledge.
A. PreHelios
Helios constructs its labelled public-key encryption scheme
by composing El Gamal encryption with a proof of knowl-
edge.7 Let us consider a labelled public-key encryption scheme
R(cid:2) ), built from a public-key encryption scheme E(cid:3)
LPKE(E(cid:3), Σ(cid:3)
and a proof system Σ(cid:3)
R(cid:2). The proof system typically proves
validity of the vote v (for example, that at most one candidate
is selected by the ballot), and may use a label (such as the
voter’s identity) inside the statement. The encryption algorithm
7Even for the mixnet variant of Helios, El Gamal is used in conjunction
with a proof of knowledge – of the randomness used in mixing rather than
the plaintext – in order to obtain an IND-1-CCA scheme.
B. Security by Reﬁnement
However, it should be clear from the deﬁnition of Labelled-
MiniVoting that only the most basic voting systems can be
produced purely by instantiating PreHelios further. Indeed,
Labelled-MiniVoting speciﬁes an ideal Tally algorithm that
decrypts the ballot box line-by-line before computing the
election result using ρ, whereas any voting system that means
to provide resilience against corrupted tallying servers cannot
follow this course of action.
To support
the application of our Theorem 2 to such
schemes–capturing in particular most published Helios vari-
ants, we show that privacy properties are preserved when
1000
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
Labelled-MiniVoting
PreHelios
Helios-mix
Thm 2 (cid:3)Thm 3
Helios-hom
Helios-hom-IDweed
Basic
v3-mix
323 var.
v3-hom
v4
160 var.
Helios-light-weed
53 var.
Fig. 6. Relations between our schemes. Arrows represent direct instantiations, o-arrows represent instantiations (where some equivalence property is used);
(cid:3) is observational equivalence. The leafs contain either concrete instances (e.g. Basic, (Helios) v3-mix), or the number of variants that have been obtained.
All constructions satisfy ballot privacy, strong consistency, strong correctness (under some assumptions).
substituting a functionally equivalent algorithm for Tally. We
now deﬁne the necessary notions of functional equivalence and
algorithm substitution.
Deﬁnition 10 (Functional Equivalence). Let f be a (stateful)
algorithm. We write
Pr[f (e), m (cid:2) (r, mr)]
for the probability that the execution of f (e) leads to the
ﬁnal memory mr with result r when executed in the initial
memory m. Given a predicate φ over inputs and memories,
two procedures f1 and f2 are functionally equivalent under φ,
written f1 (cid:9)φ f2, iff
Pr[f1(e), m (cid:2) (r, mr)] = Pr[f2(e), m (cid:2) (r, mr)]
for any input value e, output value r and memories m, mr such
that φ(e, m). For the constantly true predicate T, (cid:9)T expresses
unconditional functional equivalence, which we simply denote
with (cid:9).
(cid:3)
(cid:3)
We note that this notion of equivalence captures algorithms
that are both probabilistic and stateful, intuitively requiring
that equivalent algorithms produce the same joint distributions
on outputs and ﬁnal state given the same inputs and initial
state.
Given a voting scheme V = (S, Vo, Va, P, T, Ve) and
, we deﬁne the vari-
an alternative tallying algorithm Tally
ant of scheme V that uses algorithm Tally
for tallying as
V[T ← Tally
(cid:3)] = (S, Vo, Va, P, Tally
(cid:3), Ve). Similarly, given an
(cid:3)
, we deﬁne the variant
alternative validation algorithm Valid
of scheme V that uses algorithm Valid
(cid:3)
for ballot validation
as V[Va ← Valid
(cid:3)] = (S, Vo, Valid
(cid:3), P, T, Ve). When the
nature of the alternative algorithm is clear from context, we
(cid:3)] or V[Valid
simply write V[Tally
(cid:3)] for the relevant algorithm
substitution.
Lemma 2 (Tally-Equivalence preserves Privacy). Given a
voting scheme V with tallying algorithm Tally, and some
. If
alternative tallying algorithm Tally
V is ballot private (resp. strongly correct; strongly consistent)
then V[Tally
(cid:3)] is ballot private (resp. strongly correct; strongly
consistent).
such that Tally (cid:9) Tally
(cid:3)
(cid:3)
Proof. The theorem is a simple consequence of the deﬁni-
tions for the three properties. We note in particular,
that,
for β ∈ {0, 1}, Expbpriv,βA,V
(cid:2)] are strictly
equivalent until the adversary queries its Otally oracle, so the
necessarily occur in
corresponding queries to Tally and Tally
a pair of contexts where inputs and states are equal. A similar
observation applies for strong consistency. Finally, tallying is
not used for strong correctness.
and Expbpriv,βA,V[Tally
(cid:3)
C. Helios-mix
Mixnets were introduced by Chaum [19] as a method to
implement anonymous communications in the absence of a
trusted authority. A mixnet takes as input a set of encrypted
messages and outputs the underlying plaintexts in a way
that hides the relation between the input ciphertexts and
the output plaintexts. Interest in their applications (which go
signiﬁcantly beyond electronic voting) resulted in a large body
of literature that covers different constructions [30], [32], [36],
[37], [41], and security models and proofs for some of the
constructions [32], [33], [41].
Concrete implementations typically “chain” several mixers
so that the output of one is passed as input to the next.
Each intermediate shufﬂe comes with a proof that mixing
was implemented correctly. Since we are not concerned here
with dishonest tally authorities, we simply view mixnets as an
abstract algorithm TallyMix which, given a list of ballots and
the secret key, returns their decryptions in some order together
with a proof that the list of decrypted votes corresponds to
the initial list of ballots. Existing mixnet constructions return
the plaintexts either in random order [36] or in lexicographic
order [32].
The following deﬁnition ﬁxes the class of protocols obtained
by replacing the tally algorithm with a mixnet, whose opera-
tions are modelled as a probabilistic algorithm TallyMix. In our
deﬁnition, we make use of the Count function multiset that
can be instantiated with functions that return the sequence of
votes in lexicographic or random order.
Deﬁnition 11. Let E(cid:3) be an encryption scheme, Σ(cid:3)
R(cid:2) and ΣR
be two proof systems, ValidInd, Publish, Flabel, and Policy
be abstract algorithms as speciﬁed, and TallyMix be a mixnet
1001
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
functionality. Given ρ = multiset ◦ Policy, we deﬁne the
Helios-mix scheme constructed from these primitives as
R(cid:2) , ΣR, ValidInd, Publish, Flabel, Policy) =
R(cid:2) , ΣR, ValidInd, Publish, Flabel, ρ) [TallyMix].
HM (E(cid:3), Σ(cid:3)
PH (E(cid:3), Σ(cid:3)
Based on this deﬁnition, if one can ﬁnd an instance PH
of PreHelios whose Tally algorithm is such that TallyMix (cid:9)
Tally, the following corollary identiﬁes sufﬁcient conditions
for the privacy of the Helios-mix variants constructed from
the same primitives.
Corollary 2. Let E(cid:3) be an encryption scheme, ΣR, Σ(cid:3)
R(cid:2) be two
proof systems, Γ = LPKE(E(cid:3), Σ(cid:3)
R(cid:2) ), and ValidInd, Publish,
Flabel, and Policy be abstract algorithms as speciﬁed. The
scheme
HM (E(cid:3), Σ(cid:3)
R(cid:2) , ΣR, ValidInd, Publish, Flabel, Policy)
is ballot private, strongly consistent, and strongly correct pro-
i. TallyMix (cid:9) Tally (with the speciﬁed primitives);
vided that
ii. ValidInd returns true for valid ciphertexts; iii. R is voting-
friendly; iv. Γ is IND-1-CCA; and v. ΣR is zero-knowledge.
Our EasyCrypt formalization of the result supports two
separate instantiations for multiset, using either lexicographic
ordering (as Helios-mix-ord), or random ordering (as Helios-
mix-perm). In particular, we formally prove the required func-