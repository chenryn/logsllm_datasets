build processes rely on OS-specific scripts, for example. In other cases, you may need to perform a low-
level operation that is most easily done with an OS-level command.
9 http://ant.apache.org/
107
You can do this in Jenkins with the Execute Shell (for Unix) or Execute Windows Batch command
(for Windows). As an example, in Figure 5.28, “Configuring an Execute Shell step” we have added a
step to execute the Unix ls command.
Figure 5.28. Configuring an Execute Shell step
The output from this build step is shown here:
[workspace] $ /bin/sh -xe /var/folders/.../jenkins2542160238803334344.s
+ ls -al
total 64
drwxr-xr-x 14 johnsmart staff 476 30 Oct 15:21 .
drwxr-xr-x 9 johnsmart staff 306 30 Oct 15:21 ..
-rw-r--r--@ 1 johnsmart staff 294 22 Sep 01:40 .checkstyle
-rw-r--r--@ 1 johnsmart staff 651 22 Sep 01:40 .classpath
-rw-r--r--@ 1 johnsmart staff 947 22 Sep 01:40 .project
drwxr-xr-x 5 johnsmart staff 170 22 Sep 01:40 .settings
-rw-r--r--@ 1 johnsmart staff 437 22 Sep 01:40 .springBeans
drwxr-xr-x 9 johnsmart staff 306 30 Oct 15:21 .svn
-rw-r--r--@ 1 johnsmart staff 1228 22 Sep 01:40 build.xml
-rw-r--r--@ 1 johnsmart staff 50 22 Sep 01:40 infinitest.filters
-rw-r--r-- 1 johnsmart staff 6112 30 Oct 15:21 pom.xml
drwxr-xr-x 5 johnsmart staff 170 22 Sep 01:40 src
drwxr-xr-x 3 johnsmart staff 102 22 Sep 01:40 target
drwxr-xr-x 5 johnsmart staff 170 22 Sep 01:40 tools
You can either execute an OS-specific command (e.g., ls), or store a more complicated script as a file
in your version control system, and execute this script. If you are executing a script, you just need to
refer to the name of your script relative to the work directory.
Shell scripts are executed using the -ex option—the commands are printed to the console, as is the
resulting output. If any of the executed commands return a nonzero value, the build will fail.
When Jenkins executes a script, it sets a number of environment variables that you can use within the
script. We discuss these variable in more detail in the next section.
In fact, there are some very good reasons why you should avoid using OS-level scripts in your build jobs
if you can possibly avoid it. In particular, it makes your build job in the best of cases OS-specific, and
at worst dependant on the precise machine configuration. One more portable alternative to executing
OS scripts include writing an equivalent script in a more portable scripting language, such as Groovy
or Gant.
108
5.6.4. Using Jenkins Environment Variables in Your Builds
One useful trick that can be used in virtually any build step is to obtain information from Jenkins about
the current build job. In fact, when Jenkins starts a build step, it makes the following environment
variables available to the build script:
BUILD_NUMBER
The current build number, such as “153”.
BUILD_ID
A timestamp for the current build id, in the format YYYY-MM-DD_hh-mm-ss.
JOB_NAME
The name of the job, such as game-of-life.
BUILD_TAG
A convenient way to identify the current build job, in the form of jenkins-${JOB_NAME}-
${BUILD_NUMBER} (e.g., jenkins-game-of-life-2010-10-30_23-59-59).
EXECUTOR_NUMBER
A number identifying the executor running this build among the executors of the same machine.
This is the number you see in the “build executor status”, except that the number starts from
0, not 1.
NODE_NAME
The name of the slave if the build is running on a slave, or "" if the build is running on master.
NODE_LABELS
The list of labels associated with the node that this build is running on.
JAVA_HOME
If your job is configured to use a specific JDK, this variable is set to the JAVA_HOME of the
specified JDK. When this variable is set, PATH is also updated to have $JAVA_HOME/bin.
WORKSPACE
The absolute path of the workspace.
HUDSON_URL
The full URL of the Jenkins server, for example http://ci.acme.com:8080/jenkins/.
JOB_URL
The full URL for this build job, for example http://ci.acme.com:8080/jenkins/game-
of-life.
BUILD_URL
The full URL for this build, for example http://ci.acme.com:8080/jenkins/game-of-
life/20.
109
SVN_REVISION
For Subversion-based projects, this variable contains the current revision number.
CVS_BRANCH
For CVS-based projects, this variable contains the branch of the module. If CVS is configured
to check out the trunk, this environment variable will not be set.
These variables are easy to access. In an Ant script, you can access them using the  tag
as shown here:
In Maven, you can access the variables either in the same way (using the “env.” prefix), or directly
using the Jenkins environment variable. For example, in the following pom.xml file, the project URL
will point to the Jenkins build job that ran the mvn site build:
...
com.wakaleo.gameoflife
gameoflife-core
0.0.55-SNAPSHOT
gameoflife-core
${JOB_URL}
Alternatively, if you are building a web application, you can also use the maven-war-plugin to insert
the build job number into the web application manifest, e.g.:
...
...
maven-war-plugin
true
Continuous Integration with Hudson (Content)
1.0.0-SNAPSHOT
${BUILD_TAG}
...
110
...
This will produce a MANIFEST.MF file along the following lines:
Manifest-Version: 1.0
Archiver-Version: Plexus Archiver
Created-By: Apache Maven
Built-By: johnsmart
Build-Jdk: 1.6.0_22
Jenkins-Build-Number: 63
Jenkins-Project: game-of-life
Jenkins-Version: 1.382
Implementation-Version: jenkins-game-of-life-63
Specification-Title: gameoflife-web
Specification-Version: 0.0.55-SNAPSHOT
And in a Groovy script, they can be obtained via the System.getenv() method:
def env = System.getenv()
env.each {
println it
}
or:
def env = System.getenv()
println env['BUILD_NUMBER']
5.6.5. Running Groovy Scripts
Groovy is not only a popular JVM dynamic language, it is also a convenient language for low-level
scripting. The Jenkins Groovy Plugin10 lets you run arbitrary Groovy commands, or invoke Groovy
scripts, as part of your build process.
Once you have installed the Groovy plugin in the usual way, you need to add a reference to your
Groovy installation in the system configuration page (see Figure 5.29, “Adding a Groovy installation
to Jenkins”).
Figure 5.29. Adding a Groovy installation to Jenkins
10 http://wiki.jenkins-ci.org//display/HUDSON/Groovy+Plugin
111
Now you can add some Groovy scripting to your build job. When you click on “Add build step”, you
will see two new entries in the drop-down menu: “Execute Groovy script” and “Execute system Groovy
script”. The first option is generally what you want—this will simply execute a Groovy script in a
separate JVM, as if you were invoking Groovy from the command line. The second option runs Groovy
commands within Jenkins’s own JVM, with full access to Jenkins’s internals, and is mainly used to
manipulate the Jenkins build jobs or build process itself. This is a more advanced topic that we will
discuss later on in the book.
A Groovy build step can take one of two forms. For simple cases, you can just add a small snippet
of Groovy, as shown in Figure 5.30, “Running Groovy commands as part of a build job”. For more
involved or complicated cases, you would probably write a Groovy script and place it under version
control. Once your script is safely in your SCM, you can run it by selecting the “Groovy script file”
option and providing the path to your script (relative to your build job workspace).
Figure 5.30. Running Groovy commands as part of a build job
In Figure 5.31, “Running Groovy scripts as part of a build job”, you can see a slightly more complicated
example. Here we are running a Groovy script called run-fitness-tests.groovy, which can be
found in the scripts directory. This script takes the test suites to be executed as its parameters—we
provide these in the Script parameters field. If we want to provide any options for Groovy itself, we can
put these in the Groovy Parameters field. Alternatively, we can also provide command-line properties
in the Properties field—this is simply a more convenient way of using the -D command-line option to
pass property values to the Groovy script.
112
Figure 5.31. Running Groovy scripts as part of a build job
5.6.6. Building Projects in Other Languages
Jenkins is a flexible tool, and it can be used for much more than just Java and Groovy. For example,
Jenkins also works well with Grails, .Net, Ruby, Python and PHP, just to name a few. When using other
languages, you generally need to install a plugin to support your favorite language, which will add a
new build step type for this language. We will look at some examples in Section 5.10, “Using Jenkins
with Other Languages”.
5.7. Post-Build Actions
Once the build is completed, there are still a few things you need to look after. You might want to archive
some of the generated artifacts, to report on test results, and to notify people about the results. In this
section, we look at some of the more common tasks you need to configure after the build is done.
5.7.1. Reporting on Test Results
One of the most obvious requirements of a build job is to report on test results. Not only whether there
are any test failures, but also how many tests were executed, how long they took to execute, and so on.
In the Java world, JUnit is the most commonly-used testing library around, and the JUnit XML format
for test results is widely used and understood by other tools as well.
Jenkins provides great support for test reporting. In a freestyle build job, you need to tick the “Publish
JUnit test result report” option, and provide a path to your JUnit report files (see Figure 5.32, “Reporting
on test results”). You can use a wildcard expression (such as **/target/surefire-reports/*.xml
in a Maven project) to include JUnit reports from a number of different directories—Jenkins will
aggregate the results into a single report.
113
Figure 5.32. Reporting on test results
We look at automated tests in much more detail in Chapter 6, Automated Testing.
5.7.2. Archiving Build Results
With a few exceptions, the principal goal of a build job is generally to build something. In Jenkins, we
call this something an artifact. An artifact might be a binary executable (a JAR or WAR file for a Java
project, for example), or some other related deliverable, such as documentation or source code. A build
job can store one or many different artifacts, keeping only the latest copy or every artifact ever built.
Configuring Jenkins to store your artifacts is easy—just tick the “Archive the artifacts” checkbox in
the Post-build Actions, and specify which artifacts you want to store (see Figure 5.33, “Configuring
build artifacts”).
Figure 5.33. Configuring build artifacts
In the “Files to archive” field, you can provide the full paths of the files you want to archive (relative
to the job workspace), or, use Ant-like wild cards (e.g., **/*.jar, for all the JAR files, anywhere in
the workspace). One advantage of using wild cards is that it makes your build less dependent on your
version control set up. For example, if you are using Subversion (see Section 5.4, “Configuring Source
Code Management”), Jenkins will check out your project either directly in your workspace, or into a
subdirectory, depending on how you set it up. If you use a wild card expression like **/target/*.war,
Jenkins will find the file no matter what directory the project is located in.
As usual, the Advanced button give access to a few extra options. If you are using wild cards to find
your artifacts, you might need to exclude certain directories from the search. You can do this by filling
in the Excludes field. You enter a pattern to match any files that you don’t want to archive, even if they
would normally be included by the “Files to archive” field.
114
Archived artifacts can take a lot of disk space, especially if builds are frequent. For this reason, you may
want to only keep the last successful one. To do this, just tick the “Discard all but the last successful/
stable artifact” option. Jenkins will keep artifacts from the last stable build (if there where any). It will
also keep the artifacts of the latest unstable build following the stable build (if any), and also from the
last failed build that happened.
Archived build artifacts appear on the build results page (see Figure 5.34, “Build artifacts are displayed
on the build results page and on the build job home page”). The most recent build artifacts are also
displayed on the build job home page.
Figure 5.34. Build artifacts are displayed on the build results page and on the build job home page
You can also use permanent URLs to access the most recent build artifacts. This is a great way to reuse
the latest artifacts from your builds, either in other Jenkins build jobs or in external scripts, for example.
Three URLs are available: last stable build, last successful build and last completed build.
Before we look at the URLs, we should discuss the concept of stable and successful builds.
A build is successful when the compilation reported no errors.
A build is considered stable if it was built successfully, and no publisher reports it as unstable. For
example, depending on your project configuration, unit test failures, insufficient code coverage, or other
code quality metrics issues, could cause a build to be marked as unstable. So a stable build is always
successful, but the opposite is not necessarily true—a build can be successful without being stable.
A completed build is simply a build that has finished, no matter what its result. Note that the archiving
step will take place no matter what the outcome of the build was.
The format of the artifact URLs is intuitive, and takes the following form:
Latest stable build
/job//lastStableBuild/artifact/
115
Latest successful build
/job//lastSuccessfulBuild/artifact/
Latest completed build
/job//lastCompletedBuild/artifact/
This is best illustrated by some examples. Suppose your Jenkins server is running on http://
myserver:8080, your build job is called game-of-life, and you are storing a file called
gameoflife.war, which is in the target directory of your workspace. The URLs for this artifact would
be the following:
Latest stable build
http://myserver:8080/job/gameoflife/lastStableBuild/artifact/target/
gameoflife.war
Latest successful build
http://myserver:8080/job/gameoflife/lastSuccessfulBuild/artifact/
target/gameoflife.war
Latest completed build
http://myserver:8080/job/gameoflife/lastCompletedBuild/artifact/
target/gameoflife.war
Artifacts don’t just have to be executable binaries. Imagine, for example, that your build process involves
automatically deploying each build to a test server. For convenience, you want to keep a copy of the
exact source code associated with each deployed WAR file. One way to do this would be to generate the