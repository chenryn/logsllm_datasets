Deﬁnition 3.4 (Commitment schemes) A PPT machine Com = ⟨S; R⟩ is said to be a non-interactive
commitment scheme if the following two properties hold.
Computational hiding: For every (expected) PPT machine R
(cid:3), it holds that the following ensembles are
computationally indistinguishable.
(cid:3)
(cid:3)
(cid:15) fViewR
(cid:15) fViewR
where ViewR
commitment to m using Com.
Com(m1; z)g(cid:20)2N;m1;m22f0;1g(cid:20);z2f0;1g(cid:3)
Com(m2; z)g(cid:20)2N;m1;m22f0;1g(cid:20);z2f0;1g(cid:3)
(cid:3)
Com(m; z) denotes the random variable describing the output of R
(cid:3) after receiving a
Statistical binding: For any (computationally unbounded) malicious sender S
(cid:3) and auxiliary input z, it
holds that the probability that there exist valid decommitments to two different values for a view v,
(cid:3)
generated with an honest receiver while interacting with S
(z) using Com, is negligible.
We refer the reader to [Gol01] for more details. We recall that non-interactive perfectly binding commit-
ment schemes can be constructed based on one-way permutation, whereas two-round statistically binding
commitment schemes can be constructed based on one-way functions [Nao91]. To set up some notations,
we let comm   Com(m; rm) denote a commitment to a message m, where the sender uses uniform ran-
dom coins rm. The decommitment phase consists of the sender sending the decommitment information
decomm = (m; rm) which contains the message m together with the randomness rm. This enables the
receiver to verify whether decomm is consistent with the transcript comm. If so, it outputs m; otherwise
it outputs ?. For simplicity of exposition, in the sequel, we will assume that random coins are an implicit
input to the commitment functions, unless speciﬁed explicitly.
Deﬁnition 3.5 (Trapdoor commitment schemes) Let Com = (S; R) be a statistically binding commitment
scheme. We say that Com is a trapdoor commitment scheme is there exists an expected PPT oracle machine
(cid:3) and all m 2 f0; 1g(cid:20), the output ((cid:28); w) of the following experiments
S = (S1;S2) such that for any PPT R
is computationally indistinguishable:
- an honest sender S interacts with R
(cid:3) to commit to m, and then opens the commitment: (cid:28) is the view of R
(cid:3)
in the commit phase, and w is the message S sends in the open phase.
- the simulator S generates a simulated view (cid:28) for the commit phase, and then opens the commitment to m
in the open phase: formally ((cid:28); state)   S R
(cid:3)
1 (1(cid:20)), w   S2(state; m).
3.3 Randomness Extractors
The min-entropy of a random variable X is H1(X) = (cid:0) log(maxx Pr[X = x]).
Deﬁnition 3.6 (Extractors) A function Ext : f0; 1gn (cid:2)f0; 1gt ! f0; 1gm is a (k; ")-strong extractor if for
all pairs of random variables (X; I) such that X 2 f0; 1gn and H1(XjI) (cid:21) k it holds that
SD((Ext(X; S); S; I); (Um; S; I)) (cid:20) ";
where S is uniform over f0; 1gt and Um is the uniform distribution over f0; 1gm.
14
The Leftover Hash Lemma shows how to explicitly construct an extractor from a family of pairwise
independent functions H. The extractor uses a random hash function h   H as its seed and keeps this seed
in the output of the extractor.
Theorem 3.7 (Leftover Hash Lemma) If H = fh : f0; 1gn ! f0; 1gmg is a pairwise independent family
where m = n (cid:0) 2 log 1
" , then Ext(x; h) = (h; h(x)) is a strong (n; ")-extractor.
In this work we will consider the case where m = 1 and n (cid:21) 2(cid:20) + 1 where (cid:20) is the security parameter.
This yields " = 2
(cid:0) 2(cid:20)+1(cid:0)1
2 = 2
(cid:0)(cid:20).
3.4 Hardcore Predicates
Deﬁnition 3.8 (Hardcore predicate) Let f : f0; 1g(cid:20) ! f0; 1g(cid:3) and H : f0; 1g(cid:20) ! f0; 1g be a polynomial-
time computable functions. We say H is a hardcore predicate of f, if for every PPT machine A, there exists
a negligible function negl((cid:1)) such that
Pr[x   f0; 1g(cid:20); y = f (x) : A(1(cid:20); y) = H(x)] (cid:20) 1
2
+ negl((cid:20)):
An important theorem by Goldreich and Levin [GL89] states that if f is a one-way function over f0; 1g(cid:20)
(x; r) = (f (x); r), admits the following hardcore
then the one-way function f
predicate b(x; r) = ⟨x; r⟩ = (cid:6)xiri mod 2, where xi; ri is the ith bit of x; r respectively. In the following,
we refer to this predicate as the GL bit of f. We will use the following theorem that establishes the list-
decoding property of the GL bit.
′ over f0; 1g2(cid:20), deﬁned by f
′
Theorem 3.9 ([GL89]) There exists a PPT oracle machine Inv that on input ((cid:20); ") and oracle access to
a predictor PPT B, runs in time poly((cid:20); 1
"2 ) queries to B and outputs a list L with
jLj (cid:20) 4(cid:20)
" ), makes at most O( (cid:20)2
"2 such that if
then
Pr[r   f0; 1g(cid:20) : B(r) = ⟨x; r⟩] (cid:21) 1
2
Pr[L   InvB((cid:20); ") : x 2 L] (cid:21) 1
2
+
"
2
:
3.5 Secret-Sharing
A secret-sharing scheme allows distribution of a secret among a group of n players, each of whom in a
sharing phase receive a share (or piece) of the secret. In its simplest form, the goal of secret-sharing is to
allow only subsets of players of size at least t + 1 to reconstruct the secret. More formally a t + 1-out-of-n
secret sharing scheme comes with a sharing algorithm that on input a secret s outputs n shares s1; : : : ; sn
and a reconstruction algorithm that takes as input ((si)i2S; S) where jSj > t and outputs either a secret s
′
or ?. In this work, we will use the Shamir’s secret sharing scheme [Sha79] with secrets in F = GF (2(cid:20)).
We present the sharing and reconstruction algorithms below:
Sharing algorithm: For any input s 2 F, pick a random polynomial f ((cid:1)) of degree t in the polynomial-ﬁeld
F[x] with the condition that f (0) = s and output f (1); : : : ; f (n).
15
Reconstruction algorithm: For any input (s
i are ? and jSj > t, compute a
′
′
i)i2S where none of the s
i for every i 2 S. This is possible using Lagrange interpolation
′
polynomial g(x) such that g(i) = s
where g is given by
∑
′
i
∏
x (cid:0) j
i (cid:0) j
:
g(x) =
s
i2S
j2S=fig
Finally the reconstruction algorithm outputs g(0).
We will additionally rely on the following property of secret-sharing schemes. To this end, we view the
Shamir secret-sharing scheme as a linear code generated by the following n (cid:2) (t + 1) Vandermonde matrix
0BBB@ 1 12
1 22
...
...
1 n2
1CCCA
(cid:1)(cid:1)(cid:1)
1t
(cid:1)(cid:1)(cid:1)
2t
...
...
(cid:1)(cid:1)(cid:1) nt
A =
More formally, the shares of a secret s that are obtained via a polynomial f in the Shamir scheme, can be
obtained by computing Ac where c is the vector containing the coefﬁcients of f. Next, we recall that for any
linear code A, there exists a parity check matrix H of dimension (n(cid:0) t(cid:0) 1)(cid:2) n which satisﬁes the equation
HA = 0(n(cid:0)t(cid:0)1)(cid:2)(t+1), i.e. the all 0’s matrix. We thus deﬁne the linear operator ϕ(v) = Hv for any vector
v. Then it holds that any set of shares s is valid if and only if it satisﬁes the equation ϕ(s) = 0n(cid:0)t(cid:0)1.
The authors in [DZ13] were the ﬁrst to propose an algorithm for verifying membership in (binary) codes,
i.e., verifying the product of Boolean matrices in quadratic time with exponentially small error probability,
while previous methods only achieved constant error.
4 Two-Round Oblivious Transfer in the Stand-Alone Model
4.1 Building Blocks: Commitment Schemes
Trapdoor commitment schemes. A core building block of our protocol is a trapdoor commitment scheme
TCom (cf. Deﬁnition 3.5) introduced by Pass and Wee in [PW09]. In Figure 3 we describe their 4-round
trapdoor commitment scheme that is based on one-way permutations. In particular, the protocol comprises a
4-round challenge-response protocol where the receiver commits to its challenge in the ﬁrst message (using
a non-interactive perfectly binding commitment scheme). The knowledge of the receiver’s challenge enables
the simulator to cheat in the commit phase and equivocate the committed message into any bit (this notion
of “look ahead” trapdoor commitment is borrowed from the area of zero-knowledge proofs).
More speciﬁcally, the trapdoor commitment scheme TCom, described in Figure 3, proceeds as follows.
In order to commit to a bit m the sender commits to a matrix M of size 2 (cid:2) 2, so that m is split into two
shares which are committed within the two rows of M. Next, the receiver sends a challenge bit e where the
sender must open the two commitments that lie in the eth column (and must correspond to the same share
of m, thus it is easy to verify correctness). Later, in the decommit phase the sender opens the values to a
row of his choice enabling the receiver to reconstruct m. Note that if the sender knows the challenge bit
in advance it can commit to two distinct bits by making sure that one of the columns has different bits. In
order to decrease the soundness error this protocol is repeated multiple times in parallel. In this paper we
implement the internal commitment of Pass and Wee using a statistical hiding commitment scheme that is
based on pseudorandom functions; see details below.
16
Non-interactive commitment schemes. Our construction further relies on a non-interactive perfectly
binding commitment scheme that is incorporated inside the sender’s token TKcom
. Such commitments can
be build based on the existence of one-way permutations. Importantly, it is possible to relax our assumptions
to one-way functions by relying on a two-round statistically binding commitment scheme [Nao91], and al-
lowing the token TKcom
to take an additional input that will serve as the ﬁrst message of the commitment
scheme. Overall, that implies that we only need to assume one-way functions. For clarity of presentation,
we use a non-interactive commitment scheme that is based on one-way permutations; see Section 4.2.1 for
more details.
S
S
Trapdoor Commitment Scheme TCom [PW09]
The commitment scheme TCom uses a statistically binding commitment scheme Com and runs between
sender S and receiver R.
Input: S holds a message m 2 f0; 1g.
Commit Phase:
R ! S: R chooses a challenge e = e1; : : : ; e(cid:20)   f0; 1g and sends the commitment come  
S ! R: S proceeds as follows:
Com(e) to S.
1. S chooses (cid:17)1; : : : ; (cid:17)(cid:20)   f0; 1g(cid:20).
2. For all i 2 [(cid:20)], S commits to the following matrix:
0@ com00
(cid:17)i
com01
m(cid:8)(cid:17)i
com10
(cid:17)i
com11
m(cid:8)(cid:17)i
1A =
0@ Com((cid:17)i) Com(m (cid:8) (cid:17)i)
Com((cid:17)i) Com(m (cid:8) (cid:17)i)
1A
R ! S: R sends decome of the challenge e = e1; : : : ; e(cid:20)   f0; 1g to S.
S ! R: S proceeds as follows:
2
[(cid:20)],
S
; decom1ei
(ei(cid:1)m)(cid:8)(cid:17)i
1. For
the
2. For all i 2 [(cid:20)], R checks that the decommitments are valid and that decom0ei
all
(decom0ei
(ei(cid:1)m)(cid:8)(cid:17)i
decommitments
sends
the
of
).
i
column
(ei(cid:1)m)(cid:8)(cid:17)i
=
decom1ei
(ei(cid:1)m)(cid:8)(cid:17)i
.
Decommit Phase:
1. For all i 2 [(cid:20)], S chooses r = r1; : : : ; r(cid:20)   f0; 1g and sends the bit m and the decommit-
2. For i 2 [(cid:20)], R checks that the decommitments are valid and that m = decomri0
ments of the row (decomri0
(cid:8)decomri1
(cid:17)i ; decomri1
ri(cid:8)(cid:17)i).
ri(cid:8)(cid:17)i.
(cid:17)i
Figure 3: Trapdoor commitment scheme
17
4.2 Our Protocol
We are now ready to introduce our ﬁrst protocol that securely computes the functionality FOT : ((s0; s1); b)