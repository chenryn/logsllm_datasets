    }
它会被编译为如下形式：  
这里先将1,2,3保存到`rsp+80h+var_30`开始的位置，然后将其首地址，长度(3)，容量(3)放到栈上，之后调用VarArgDeme函数。
##### 3\. 匿名函数
匿名函数通常会以`外部函数名_funcX`来命名，除此之外和普通函数没什么不同，只是需要注意若使用了外部变量，即形成闭包时，这些变量会以引用形式传入，如在`os/exec/exec.go`中如下代码：
    go func() {
                select {
                case 
> 需要注意的是不能仅靠函数头部就断定参数个数，例如当参数为一个结构体时，可能头部的argX只代表了其首位的地址，因此需要具体分析函数retn指令前的指令来确定返回值大小。
#### Ⅴ. 写屏障
Go拥有垃圾回收，其三色标记法使用了写屏障的方法保证一致性，在垃圾收集过程中会将写屏障标志置位，此时会进入另一条逻辑，但是我们在逆向分析过程中可以认为该位未置位而直接分析无保护的情况：  
如上图，先判断标志，再决定是否进入，在分析时可以直接认为其永假并走左侧分支。
#### Ⅵ. 协程 go
使用go关键词可以创建并运行协程，它在汇编上会被表现为由`runtime_newproc(fn,args?)`，它会封装函数与参数并创建协程执行信息，并在适当时候被执行，如：  
这里执行了`go
loop()`，由于没有参数此处newproc只被传入了函数指针这一个参数，否则会传入继续传入函数所需的参数，在分析时直接将函数作为在新的线程里执行即可。
#### Ⅶ. 延迟执行 defer
延迟执行一般用于资源释放，它会先注册到链表中并在当前调用栈返回前执行所有链表中注册的函数，在汇编层面会表现为`runtime_deferproc`，例如常见的锁释放操作：  
这里它第一个参数代表延迟函数参数字节大小为8字节，第二个参数为函数指针，第三个参数为延迟执行函数的参数，若创建失败会直接返回，返回前会调用`runtime_deferreturn`去执行其他创建的延迟执行函数，一般我们是不需要关注该语句的，因此可以直接跳过相关指令并向左侧继续分析。
#### Ⅷ. 调用c库 cgo
Go可以调用C代码，但调用C会存在运行时不一致，Go统一将C调用看作系统调用来处理调度等问题，另一方类型不一致才是我们需要关注的重点，为了解决类型与命名空间等问题cgo会为C生成桩代码来桥接Go，于是这类函数在Go语言侧表现为`XXX_CFunc__YYY`，它封装参数并调用`runtime_cgocall`转换状态，在中间表示为`NNN_cgo_abcdef123456_CFunc__ZZZ`，这里它解包参数并调用实际c函数，例如：  
此处它调用了libc的`void* realloc(void*,
newsize)`，在Go侧它封装成了`os_user__Cfunc_realloc`，在该函数内部参数被封装成了结构体并作为指针与函数指针一起被传入了`cgocall`，而函数指针即`_cgo_3298b262a8f6_Cfunc_realloc`为中间层负责解包参数等并调用真正的C函数：  
#### Ⅸ. 其他
还有些内容，如看到以panic开头的分支不分析等不再演示，分析时遇到不认识的三方库函数和标准库函数直接看源码即可。
### 四、参考链接
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 