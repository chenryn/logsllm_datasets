function calls. To detect loops we use the algorithm
described in [32], which, unlike the classical Tarjan’s
interval-ﬁnding algorithm [33], is also able to identify
irreducible loops (i.e., loops with multiple entry points).
Contrary to popular belief, these appear frequently in
optimized binary code. Recursive function calls are
identiﬁed by applying a standard topological sort algo-
rithm on the function call graph of the program.
Finally, we need to resolve the name of library func-
tions used in a program in order to correctly model exe-
cution and identify exit points in the CFG. Since we as-
sume we are working with dynamically-linked ELF bi-
naries, we extract library function names by combining
information contained in the Procedure Linkage Table
(PLT) and the relocation table of the binary.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20063.2 Symbolic Execution
Our analysis technique is based on symbolic execu-
tion [16]. Symbolic execution consists of interpreta-
tively executing a program by supplying symbols repre-
senting arbitrary values instead of concrete inputs, e.g.,
strings or numbers. The execution is then performed as
in a concrete execution, except that the values processed
by the program can be symbolic expressions over the
input symbols. By doing this, the symbolic execution
approximates all possible concrete executions.
Execution State We extended the concrete execution
semantics of the x86 assembly language to deﬁne the ef-
fect of instructions on the execution state of a program.
In the current implementation of our approach, the ex-
ecution state models the content of processor registers
(the general registers eax, ebx, ecx, edx, esi, edi,
and the stack registers esp, ebp) and memory locations
(both stack and heap). Memory locations and registers
can hold both concrete values and symbolic expressions.
In the initial execution state, the program counter con-
tains the address of the ﬁrst instruction of the main pro-
cedure, the stack registers are initialized to a ﬁxed, con-
crete value, and all the remaining modeled registers and
memory locations are assigned symbolic values.
Symbolic values are introduced in the execution as
the result of reading from registers or memory locations
that have not been assigned a concrete value or after in-
voking library functions that read external input, e.g.,
from ﬁles, sockets, and the process environment. In the
example of Figure 1, the call to the getenv() function
introduces a new symbolic value, say v1, which will be
assigned to the register eax.
There are a number of limitations in our symbolic ex-
ecutions. In the current implementation of our approach,
all symbolic values are assumed to represent integers.
We further constrain the expressions to be linear combi-
nations of symbols. Instructions whose effect cannot be
modeled as a linear constraint, e.g., multiplication be-
tween symbolic values, produce as a result the special
symbol unknown, which is used to denote that nothing
can be asserted about the content of the affected register
or memory location.
Branches and Loops While the model described so
far would be sufﬁcient to symbolically execute linear
code, the presence of branch instructions requires the
extension of the execution state with path conditions.
Path conditions are Boolean expressions over the sym-
bolic input values used as parameters in branching in-
structions. More precisely, path conditions represent the
constraints that the symbolic values must satisfy for an
execution to explore the associated path.
In the initial execution state, the set of path con-
ditions is empty. When a branch instruction is exe-
cuted, both its Boolean condition—in general, a sym-
bolic expression—and its negation are evaluated. When
a condition is determined to be feasible, it is added to
the current set of path conditions and the execution is
“forked” to continue along the feasible branch.
In our running example, when the execution reaches
the branch instruction corresponding to the if state-
ment, the symbolic value v1 returned by getenv()
is checked to determine if it is equal to 0. Since the
set of path conditions is empty, both the “true” and
“false” branches are determined to be feasible. There-
fore, the execution is forked, and continues along the
“true” branch with the condition v1 6= 0 and along the
“false” branch with the condition v1 = 0.
To check the feasibility of path conditions, the anal-
ysis has to solve systems of linear expressions. Our cur-
rent prototype uses the Parma Polyhedra Library [1] as
its constraint solver.
The symbolic execution algorithm described so far
would terminate only for programs that contain loops
whose termination condition can be statically deter-
mined. Unfortunately, this is not often the case in prac-
tice. To handle such loops, we then use a simple heuris-
tic: an execution can visit the same loop no more than
three times. At the fourth visit, the execution is inter-
rupted, an approximation of the effects of an arbitrary
number of iterations of the loop is computed, and, ﬁ-
nally, the execution is restarted using the approximated
state.
In practice, all registers and memory locations
that were modiﬁed in the loop body are assigned the
unknown symbol.
Finally, recursive function calls are terminated imme-
diately, that is, recursive loops are explored only once.
Alias Analysis Two different expressions are said to
be aliases if they point to the same concrete memory
location. Clearly, write operations on the location repre-
sented by an expression should be reﬂected on all aliased
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006expressions. Unfortunately, the problem of determining
alias relationships is still open even in high-level lan-
guages [14], and is only exacerbated at the binary code
level. The current prototype takes the optimistic ap-
proach that different expressions refer to different mem-
ory locations. This is supported by the fact that most
compiler-generated code does not in fact use aliased ex-
pressions to point to the same location. A more sophisti-
cated approach could leverage the techniques proposed
in [2, 9] to guarantee sound results without sacriﬁcing
precision, at the cost, however, of a more complex and
expensive analysis.
A related problem is that of write operations on
unknown memory locations. Potentially, any mem-
ory location could be affected by such an operation.
Again, we take the optimistic approach and assume that
no aliasing occurs, i.e., the write operation only affects
a new memory location.
To summarize, the ideal goal of symbolic execution is
to traverse all feasible program execution paths. In prac-
tice, the set of traversed paths will both include infea-
sible paths—e.g., paths for which the constraint solver
cannot statically determine if the associated condition is
infeasible— and miss feasible paths—e.g., loops that are
not symbolically executed as many times as in a concrete
execution. Nonetheless, symbolic execution is valu-
able in that it provides a framework to implement path-
sensitive and context-sensitive interprocedural analysis.
The precision allowed by symbolic execution comes at
the expense of speed of analysis. We defer to the next
section a discussion of some techniques that we use to
control this problem.
4 Vulnerability Analysis
Our approach uses the information extracted by per-
forming symbolic execution to identify vulnerabilities
in binary code. In particular, we show how taint anal-
ysis can be used to statically detect the use of untrusted
data in sensitive operations. In the current implementa-
tion of our approach, we focus on identifying insecure
uses of the standard C library functions system() and
popen(). Both functions are infamous for being inse-
cure if not used carefully. The problem is that they in-
voke a subshell to execute a command supplied to them
as a string parameter. Thus, if the parameter originates
from an untrusted source and is not carefully sanitized,
system() and popen() can be used to execute arbi-
trary commands.
Despite their issues and constant abuse, system()
and popen() are still widely used. Unfortunately, in-
secure uses of these functions are still common. For ex-
ample, an insecure use of system was recently found
in the scp program of the OpenSSH and Dropbear ap-
plication suites [6].
4.1 Taint Analysis
We approach the problem of identifying insecure uses
of the system() and popen() functions as a gen-
eral taint analysis problem. In taint analysis, data orig-
inating from sources outside of the program’s control is
considered untrusted and is marked as tainted. Then, the
propagation of tainted data through the program is traced
to check whether it can reach security-critical program
points.
Our analysis follows the standard approach to taint
analysis and can be conceptually divided into four main
parts:
1) identiﬁcation of sources of untrusted data, such as
command line parameters, environment variables, data
read from ﬁles, etc.;
2) identiﬁcation of sensitive sinks (e.g., calls to the
system() and popen() functions);
3) propagation of tainted data;
4) generation of alerts when tainted data reaches a
sensitive sink.
In the current prototype, sources of untrusted data are
identiﬁed using various methods. For example, com-
mand line parameters are identiﬁed by locating the pa-
rameters passed to the main function. We consider a
parameter of a function to be any memory location that,
within that function, is accessed through a positive dis-
placement from the ebp register. Environment variables
are determined by tracking calls to the getenv() func-
tion provided by the standard C library. Similarly, other
untrusted data, such as the data read from the standard
input, ﬁles, or sockets, is identiﬁed by tracking calls to
speciﬁc library functions, such as read().
In our analysis, we are considering only two sensitive
sinks: the library functions system() and popen().
After library functions have been identiﬁed by analyzing
the PLT and the relocation table of a dynamically-linked
binary, any call to the system() or popen() func-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006tions can be easily traced. Our tool then raises an alert if
any tainted data is used as a parameter to these functions.
Propagation of tainted data from sources to sinks is
done by using the symbolic execution technique de-
scribed in Section 3.2. In particular, taint propagation
rules determine the effect of each instruction with regard
to the taintedness of its operands. For example, when-
ever a mov instruction is executed with a tainted source
operand, the corresponding destination operand also be-
comes tainted.
Similarly, we model how library functions propagate
taint information; in particular, we specify which param-
eters become tainted after their invocation and whether
their return value is tainted. To identify parameters
passed to library functions we assume that the binary
uses the cdecl calling convention. Then, if the mod-
eled function accepts a well-deﬁned number of parame-
ters, we simply read them from the execution stack. In-
stead, if the function is variadic and accepts a variable
number of parameters, e.g., snprintf(), the analysis
is more complex and relies on a number of simplify-
ing assumptions. First, we assume that the instructions
that move parameters on the stack are all in the same
basic block, i.e., they are not intermixed with branch
instructions. Second, we assume that no parameter is
preserved on the stack between two consequent library
function calls, even if the two calls share all or some of
the parameters. These assumptions hold in our standard
compilation model.
In the current implementation, we have models for
the most frequently used libc functions that may prop-
agate taint information. We taint data read from a
process’ environment (getenv()), from ﬁles (e.g.,
read(), fread(), fgets()) and from network
sockets (e.g., recv(), recvfrom()). Since we con-
sider all sources of external data as untrusted, our anal-
ysis is very conservative, thus limiting the possibility of
incurring in false negatives. We also model a number
of functions that can transfer taint information, such as
strdup() and snprintf(). All other library func-
tions are modeled as empty functions that immediately
return after performing the standard function epilogue.
In the example of Figure 1, the analysis identiﬁes
the call instruction corresponding to the invocation of
getenv() as a source and the call instruction corre-
sponding to the invocation of popen() as a sink. The
return value of getenv(), v1, is tainted. We have seen
that the symbolic execution proceeds along three paths.
Along two of these paths the value corresponding to the
variable site, v2, has a concrete value (the address of
the string localhost) and is not tainted. On the re-
maining path, however, taint is propagated from v1 to
v2. The call to snprintf() simply propagates the
taintedness status of its parameters to the symbolic value
associated with the destination buffer, say v3. Finally, v3
is passed as a parameter to the popen() function. Dur-
ing execution of the third path, along which v3 is tainted,
our tool will raise one alert. The other two executions do
not generate any alarm.
The libc library does not provide any well-deﬁned
functions to sanitize user input. From our experience
with C programs, in general, sanitization is done by
developer-written routines that iteratively parse strings
looking for suspicious characters. These routines are of-
ten ad-hoc and error-prone. As a consequence, in our
current implementation we take a conservative approach
and do not model untainting.
4.2 Optimizations
The symbolic execution performed by our tool ex-
plores all possible execution paths in a program. When
performing taint analysis, however, we are only inter-
ested in those paths through which a sensitive sink can
be reached. To this end, examining the remaining paths
would not provide any beneﬁt. To avoid this problem we
implemented a simple form of program slicing.
Program slicing is a well-known technique that ﬁnds
all statements in a program which might affect the value
of a given variable at a speciﬁc program point [35].
In general, the problem of computing a minimal pro-
gram slice is undecidable. However, there are sophis-
ticated methods that are able to compute highly precise
slices [15]. For our purposes, precision is not the main
issue. Instead, we simply want to conservatively reduce
the number of paths that are explored during taint anal-
ysis.
Therefore, starting from the function main(), we
ﬁnd all instructions in the binary that are on a path to
a sink (e.g., calls to system() or popen()). We
do this by ﬁrst constructing the interprocedural CFG of
the analyzed program and subsequently traversing it in
a context-sensitive manner starting from all identiﬁed
sinks, terminating when the beginning of main() has
been reached. Even though this technique is not able to
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Application
scp 0.47
a2ps 4.13
ppmcolors 10.33.0
irexec 0.7.2
autrace 1.0.14
Size (KB) Basic Blocks Basic Blocks
Code
after Slicing Time (sec) Coverage
Detection
46.3
570.6
12.0
7.0
57.7
1023
6403
41
88
315
599