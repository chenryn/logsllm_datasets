## PostgreSQL 黑科技 range 类型及 gist index 助力物联网(IoT)     
### 作者                                                                                                                       
digoal                                                                                                                        
### 日期                                                                                                                      
2012-05-17                                
### 标签                                                                                                                      
PostgreSQL , 物联网 , 智能DNS , range , iprange , intrange , 排他约束 , GiST索引 , 数字范围 , 数值范围 , 地理位置范围 , IP地址范围 , 温度范围                                                                                         
----                                                                                                                      
## 背景          
一位社区的兄弟跟我抱怨MYSQL里面查IP地址库并发几千每秒的查询数据库就抗不住了。    
于是问他要来了他们的IP地址库数据和查询用的SQL以及MYSQL里面的表结构。    
把数据转到PostgreSQL里面做一下相对应的压力测试，看看PostgreSQL的表现。    
在其他的业务中，这样的需求也是屡见不鲜，比如年龄范围，收入范围，频繁活动的范围，地理位置区块，几何区块，线段等。都是用范围来描述的，随着物联网的发展，这类查询需求会越来越旺盛。    
如果没有好的索引机制，查询需要消耗大量的CPU，很容易出现性能瓶颈。    
本文要给大家介绍的是PostgreSQL 9.2引入的范围类型，以及针对范围类型的索引，大幅提升范围查询的性能。    
## 正文  
注意range类型必须包含subtype, 例如int4的range类型叫int4range.  
例如1,2,3,4,5作为int4range类型可以写成'(0,6)'::int4range 或 '[1,6)'::int4range 或 '[1,5]'::int4range 或 '(0,5]'::int4range  
```  
postgres=# select '(0,6)'::int4range;  
 int4range   
-----------  
 [1,6)  
(1 row)  
postgres=# select '[1,6)'::int4range;  
 int4range   
-----------  
 [1,6)  
(1 row)  
postgres=# select '[1,5]'::int4range;  
 int4range   
-----------  
 [1,6)  
(1 row)  
postgres=# select '(0,5]'::int4range;  
 int4range   
-----------  
 [1,6)  
(1 row)  
```  
注意到稀疏类型的range类型, 内部存储的都是[).  
中括号表示包含, 大括号表示不包含.  
稀疏类型的range类型必须定义CANONICAL函数, 用来转换成[)格式的存储.  
稀疏类型可以理解为知道一个值的前一个值和后一个值是多少，例如INT类型的1的后面是2，前面是0.  
但是如果numeric的话,1的前面就不知道是多少了(0.9999999999..无穷...)，后面也不知道(1.00000000....无穷.1) 。  
但是对于连续类型的range类型, 内部存储则是精确存储的， 例如.  
```  
postgres=# select '(0,5]'::numrange;  
 numrange   
----------  
 (0,5]  
(1 row)  
postgres=# select '[0,5]'::numrange;  
 numrange   
----------  
 [0,5]  
(1 row)  
postgres=# select '[0,5)'::numrange;  
 numrange   
----------  
 [0,5)  
(1 row)  
postgres=# select '(0,5)'::numrange;  
 numrange   
----------  
 (0,5)  
(1 row)  
```  
## 范围类型的 操作符、索引功能、内置函数 等介绍  
PostgreSQL range类型提供了几个很好的功能, 例如包含，不包含，交叉等等。  
系统自定义的range类型有  
```  
INT4RANGE — Range of INTEGER  
INT8RANGE — Range of BIGINT  
NUMRANGE — Range of NUMERIC  
TSRANGE — Range of TIMESTAMP WITHOUT TIME ZONE  
TSTZRANGE — Range of TIMESTAMP WITH TIME ZONE  
DATERANGE — Range of DATE  
```  
系统表里面能查到的如下 :  
```  
digoal=# select oid ,typname from pg_type where typname ~ 'range';  
  oid  |  typname     
-------+------------  
  3904 | int4range  
  3905 | _int4range  
  3906 | numrange  
  3907 | _numrange  
  3908 | tsrange  
  3909 | _tsrange  
  3910 | tstzrange  
  3911 | _tstzrange  
  3912 | daterange  
  3913 | _daterange  
  3926 | int8range  
  3927 | _int8range  
  3831 | anyrange  
 11026 | pg_range  
```  
再来看一下有哪些函数和anyrange类型相关, 简单的介绍一下.  
```  
digoal=# select proname,proargtypes from pg_proc where proargtypes::text ~ '3831';  
         proname         |     proargtypes        
-------------------------+----------------------  
 anyrange_out            | 3831  
 range_out               | 3831  
 range_send              | 3831  
 lower                   | 3831   -- 这个range的底部的值, 稀疏和连续类型有区别. 见例子  
 upper                   | 3831  -- 这个range的顶部的值, 稀疏和连续类型有区别. 见例子  
 isempty                 | 3831  -- 这个range里面是否不包含任何元素  
 lower_inc               | 3831  -- 低位是否是包含的. , 稀疏和连续类型有区别. 见例子  
 upper_inc               | 3831  -- 高位是否是包含的. , 稀疏和连续类型有区别. 见例子  
 lower_inf               | 3831  -- 低位是否是无穷小. (注意这里指的不是subtype的无穷类型, 而是未定义低位的意思. 见例子)  
 upper_inf               | 3831  -- 高位是否是无穷大. (注意这里指的不是subtype的无穷类型, 而是未定义高位的意思. 见例子)  
 range_eq                | 3831 3831  
 range_ne                | 3831 3831  
 range_overlaps          | 3831 3831  
 range_contains_elem     | 3831 2283  
 range_contains          | 3831 3831  
 elem_contained_by_range | 2283 3831  
 range_contained_by      | 3831 3831  
 range_adjacent          | 3831 3831  
 range_before            | 3831 3831  
 range_after             | 3831 3831  
 range_overleft          | 3831 3831  
 range_overright         | 3831 3831  
 range_union             | 3831 3831  
 range_intersect         | 3831 3831  
 range_minus             | 3831 3831  
 range_cmp               | 3831 3831  
 range_lt                | 3831 3831  
 range_le                | 3831 3831  
 range_ge                | 3831 3831  
 range_gt                | 3831 3831  
 range_gist_consistent   | 2281 3831 23 26 2281  
 range_gist_same         | 3831 3831 2281  
 hash_range              | 3831  
```  
相关的操作符如下 :   
```  
postgres=# select oprname from pg_operator where oprleft=3831 or oprright=3831;  
 oprname   
---------  
 =  
 <>  
 =  
 >  
 &&  
 @>  
 @>  
 >  
 &  
 -|-  
 +  
 -  
 *  
```  
## 内置range类型的使用例子  
创建测试表  
```  
digoal=# CREATE TABLE reservation ( room int, during TSRANGE );  
```  
插入以timestamp为subtype的range类型的测试数据  
```  
digoal=# INSERT INTO reservation VALUES  
digoal-#   ( 1108, '[2010-01-01 14:30, 2010-01-01 15:30)' );  
INSERT 0 1  
```  
@>判断是否包含  
```  
digoal=# SELECT int4range(10, 20) @> 3;  
 ?column?   
----------  
 f  
(1 row)  
```  
&& 判断两个range是否有交叉  
```  
digoal=# SELECT numrange(11.1, 22.2) && numrange(20.0, 30.0);  
 ?column?   
----------  
 t  
(1 row)  
```  
upper查出顶端, int8range也是个稀疏range  
```  
digoal=# SELECT upper(int8range(15, 25));  
 upper   
-------  
    25  
(1 row)  
```  
使用numrange, 连续range查顶端, 与它一致.  
```  
digoal=# SELECT upper(numrange(15, 25));  
 upper   
-------  
    25  
(1 row)  
```  
换种写法可能更好理解, 稀疏输出的是不包含的顶端.换句话说是转换成 [) 后的里面的顶端和底部对应的值.  
```  
digoal=# SELECT upper('(15,25)'::int8range);  
 upper   
-------  
    25  
(1 row)  
digoal=# SELECT upper('(15,25]'::int8range);  
 upper   
-------  
    26  
(1 row)  
```  
连续range, 输入是什么样子的就是什么样子的.  
```  
digoal=# SELECT upper('(15,25]'::numrange);  
 upper   
-------  
    25  
(1 row)  
digoal=# SELECT upper('(15,25)'::numrange);  
 upper   
-------  
    25  
(1 row)  
```  
*符号输出两个range的交叉部分.  
```  
digoal=# SELECT int4range(10, 20) * int4range(15, 25);  
 ?column?   
----------  
 [15,20)  
(1 row)  
```  
isempty函数输出range是否为空  
```  
digoal=# SELECT isempty(numrange(1, 5));  
 isempty   
---------  
 f  
(1 row)  
```  
isempty函数输出range是否为空  
```  
digoal=# SELECT isempty(numrange(1, 1));  
 isempty   
---------  
 t  
(1 row)  
```  
### 介绍一下无穷大  
以下为例子  
表示从now到无穷大的时间范围。  
```  
digoal=# SELECT '(now,)'::tsrange;  
             tsrange               
---------------------------------  
 ("2012-05-17 16:32:43.055233",)  
(1 row)  
```  
表示从无穷小到无穷大的时间范围。  
```  
digoal=# SELECT '(,)'::tsrange;  
 tsrange   
---------  
 (,)  
(1 row)  
```  
从无穷小到now的时间范围.  
```  
digoal=# SELECT '(,now)'::tsrange;  
             tsrange               
---------------------------------  
 (,"2012-05-17 16:32:55.800172")  
(1 row)  
```  
### 介绍一下range类型的输入格式  
```  
(lower-bound,upper-bound)  
(lower-bound,upper-bound]  
[lower-bound,upper-bound)  
[lower-bound,upper-bound]  
empty  
```  
举个例子, 以下表示这个range为空.没有任何元素.  
```  
digoal=# SELECT 'empty'::tsrange;  
 tsrange   
---------  
 empty  
(1 row)  
```  
range类型的构造器函数, 这个函数的名字和range类型的名字一致, 带3个参数, 分别是底部值，顶部值，边界格式如( [], (], (), [) ).  
例如int4range的构造器函数也叫int4range.  
```  
digoal=# select int4range(1,2,'()');  
 int4range   
-----------  
 empty  
(1 row)  
digoal=# select int4range(1,2,'(]');  
 int4range   
-----------  
 [2,3)  
(1 row)  
digoal=# select int4range(null,2,'(]');  
 int4range   
-----------  
 (,3)  
(1 row)  