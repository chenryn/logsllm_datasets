Definition 4. Let Γ = {Si (cid:46)(SYM,E) ti, 1 ≤ i ≤ n}, be
any set of cap constraints (some of which may be special).
A substitution σ is a solution for Γ iﬀ σ is a solution for
every cap constraint in Γ.
From Protocol to Cap Constraints:.
We show here how to generate a set of cap constraints from
a strand space that ‘describes’ a protocol session. The idea
is similar to that given in [18]. We begin with a deﬁnition,
essentially as in [14]:
Definition 5. (i) Let A be a set, the elements of which
are the possible messages that can be exchanged between prin-
cipals in some given protocol session P . A signed term is a
pair (cid:104)σ, a(cid:105) with a ∈ A, and σ ∈ {+,−}. As usual, (±A)∗ is
the set of all ﬁnite sequences of signed terms, an element of
which will be typically denoted as (cid:104)(cid:104)σ1, a1(cid:105), . . . ,(cid:104)σn, an(cid:105)(cid:105). A
signed term (cid:104)σ, t(cid:105) is generally written as +t or −t.
(ii) A strand space for the protocol session P is then de-
ﬁned as a ﬁnite set S of signed terms (over some given sig-
nature), together with a trace mapping tr : S → (±A)∗.
Given a strand space S for P , we deﬁne a node n as a
pair (cid:104)s, i(cid:105), with s ∈ S and i an integer satisfying 1 ≤ i ≤
length(tr(s)); for any such node n, we set index(n) = i, and
sterm(n) = s. The set of all nodes will be denoted by N .
If n1, n2 ∈ N , then n1 → n2 means sterm(n1) = +a and
sterm(n2) = −a for some a ∈ A. Semantically this is to
be seen as: node n1 sends the message a, which is received
by n2, thus creating a causal link between their strands. If
n1, n2 ∈ N , then n1 ⇒ n2 means n1, n2 occur on the same
strand with index(n1) = index(n2) − 1. In other words, n1
is an immediate causal predecessor of n2 on the strand.
A strand space describing a protocol session P can be seen
as a directed graph G with two types of edges: n1 → n2
and n1 ⇒ n2. For our purposes here, we shall treat both
types of edges alike.
It should be clear that the graph is
acyclic and has a unique linear ordering (corresponding to
the sequential ordering of the messages exchanged, during
the given protocol session). We denote by P os(G) (resp.
N eg(G)) the total number of positive (resp. negative) nodes
in G; and by posi(G) (resp. negi(G)) the i-th positive (resp.
negative) node on G under the linear ordering. In intuitive
terms: posi(G) (resp. negi(G)) corresponds to the message
sent (resp. received) at the i-th step of the protocol session.
Let S be a strand space for a protocol session P , and
let G be the corresponding directed graph. Then, to any
given deduction problem on P , and any given set of random
natural numbers rand = {i1, i2, . . . , in | ik < P os(G), 1 ≤
k ≤ n}, we can associate, in a natural manner, a set of cap
constraints.
(Intuitively rand is a nondeterministic guess
on which message exchanges are useful to the intruder; the
idea is similar to that given in [18].) For instance, let the
random sequence rand be given, and suppose the deduction
problem is whether an intruder gets to know a message m
intended secret for him/her. Let Kinit be the set of (ground)
terms forming the intruder’s initial knowledge. We then
generate the following cap constraints (where, by Σ we mean
a superset of the set of symbols in the intruder theory E):
λk = Kinit ∪ {term(posi(G)) | i ∈ rand, i < ik}
for every 1 ≤ k ≤ n; and
λn+1 = Kinit ∪ {term(posi(G)) | i ∈ rand} (cid:46)(Σ,E) m
(cid:46)(Σ,E)term(negk(G)),
where term(posi(G)) (resp. term(negk(G))) denotes the un-
signed (usual) term at the i-th (resp. k-th) node on the
graph G.
Illustrative Example: As a concrete example, we con-
sider the following “NEEDHAM-SCHROEDER SYMMET-
RIC KEY PROTOCOL” ([9]), which aims to establish a
fresh shared symmetric key Kab, for mutual authentication
of the participants: in any session, the value of Kab is to be
known only to the participants playing the roles of A, B and
S in that session.
A, B, S: principals
Na, Nb: fresh nonces
Kas, Kbs: symmetric keys
succ: number → number
1. A → S : A, B, Na
2. S → A : {Na, B, Kab,{Kab, A}Kbs}Kas
3. A → B : {Kab, A}Kbs
4. B → A : {Nb}Kab
5. A → B : {succ(Nb)}Kab
The strand trace for A is:
(cid:104)+p(p(A, B), Na),−T, +y,−{Nb}z,{succ(Nb)}z(cid:105),
where T = e(p(p(Na, B), p(Kab, e(p(kab, A), Kbs))), Kas).
The strand trace for B is: (cid:104)−y, +{Nb}z,−{succ(Nb)}z(cid:105).
The strand trace for S is: (cid:104)+p(p(A, B), Na), +T(cid:105).
When encryption is based on the ECB block chaining tech-
nique (i.e., performed sequentially on a block decomposition
of the plaintext, and under the assumption that messages
are assigned a round number of blocks), it can be seen as an
homomorphism on ‘pair’.
The following is an attack based on homomorphism, where
A can be fooled into accepting the publicly known nonce Na
as a secret key shared with B.
i.1. A → S : A, B, Na
i.2. S → A : {Na, B, Kab,{Kab, A}Kbs}Kas
ii.3. I(B) → A : {Na, B}Kas
ii.4. A → I(B) : {N(cid:48)
a}Na
ii.5. I(B) → A : {succ(N(cid:48)
a)}Na
The point of the above attack – a priori on authentication,
but susceptible to lead to one on secrecy – is that we can
answer “yes” to the following two questions.
Na based on the initial knowledge {A, B, Na}?
i) Can the intruder know the concatenation of A, B and
ii) Can the intruder get to know both a message of the
form e(p(x, B), Kas) and x itself? (If yes, then the intruder
can convince A to accept x – that (s)he already knows – as
a secret key to be shared with B.)
As discussed above, we set p(e(p(x, B), Kas), x) as the se-
If we set rand = {1}, we then
cret message (the goal).
generate the following constraints, corresponding to the two
questions above.
i. {A, B, Na} (cid:46)({p,π1,π2,e,d},HE) p(p(A, B), Na)
ii. {A, B, Na, e(p(p(p(Na, B), Kab), e(p(Kab, A), Kbs)), Kas)}
(cid:46)({p,π1,π2,e,d},HE) p(e(p(x, B), Kas), x)
In Section 5.3, we shall show our cap uniﬁcation procedure
can be applied to solve these cap constraints.
4. UNIFICATION MODULO EH
Our ultimate objective is an algorithm for solving cap con-
straints over HE, which in particular will also solve uniﬁ-
cation problems modulo HE. For that, we ﬁrst need an
algorithm for uniﬁcation modulo the theory Eh deﬁned by
the single rule e(p(x, y), z) → p(e(x, z), e(y, z)); we give here
an inference procedure that is simpler than that given in [19]
for Uniﬁcation modulo One-sided Distributivity. Referred to
as Eh-Unifn in the sequel, it is a generalization of the stan-
dard algorithm for syntactic uniﬁcation. To the rest of this
section, Γ represents a set of equations modulo Eh; and =
will denote equality modulo Eh. (Syntactic equality will be
denoted as =id, when necessary.)
We ﬁrst formulate some ‘standard’ syntactic inference rules
dealing with usual uniﬁcation. Here we don’t consider ‘=’
as oriented; in other words, x = t and t = x are considered
the same.
• (Trivial) Γ (cid:116) {t = t} ⇒ Γ
• (Std Decomposition)
Γ (cid:116) {f (s1, s2, . . . , sm) = f (t1, t2, . . . , tm)} ⇒
Γ ∪ {s1 = t1} ∪ {s2 = t2} ∪ ··· ∪ {sm = tm}
• (Variable Substitution) Γ(cid:116){x = t} ⇒ Γσ∪{x = t}
if x (cid:54)∈ V ars(t), x occurs in Γ, and σ = [x (cid:55)→ t].
• (Clash) Γ (cid:116) {f (s1, . . . , sm) = g(t1, . . . , tn)} ⇒ f ail
if f (cid:54)= g; and if one of f and g is ‘e’(resp. ‘p’),
then the other is not ‘p’(resp. ‘e’).
• (Occur Check) Γ (cid:116) {x = t} ⇒ f ail,
if t (cid:54)= x and x ∈ V ars(t).
Note: The Std Decomposition rule covers, in particular, the
so-called Perfect Encryption assumption:
e(x, k) = e(x, k(cid:48)) ⇒ k = k(cid:48).
e(x, k) = e(y, k) ⇒ x = y;
Over the empty theory, two terms with diﬀerent function
symbols on top do not unify; but, modulo Eh, a term with
p on top may unify with a term with e on top. To handle
this, we shall introduce below some additional rules, referred
to as Homomorphic Pattern rules. We shall be needing a
few new notions, and some notational convention, for their
formulation.
Preliminaries for Homomorphic Pattern rules:.
We begin with the following deﬁnition.
Definition 6. The positions of a single variable term x
is pos(x) = {}; and the positions of a term f (t1,··· , tn)
are: pos(f (t1,··· , tn)) = {} ∪ {i · p|p ∈ pos(ti), 1 ≤ i ≤ n}
So a position is a sequence of integers indicating a path
in the tree representation of a term. For each position q
in a term t, we deﬁne new functions ppos and epos which
represent the subsequence of q representing p symbols and
e symbols respectively.
We deﬁne ppos(q, t) inductively as follows. The base case
is ppos(, t) = . The inductive step is ppos(i · q, t) = i ·
ppos(q, t|i) if the symbol at the top of t is ‘p’, and ppos(i ·
q, t) = ppos(q, t|i) if the symbol at the top of t is ‘e’.
Similarly we deﬁne epos(q, t) such that epos(, t) = ;
and, epos(i· q, t) = i· epos(q, t|i) if the symbol at the top of
t is ‘e’, and epos(i · q, t) = epos(q, t|i) if the top symbol of t
is ‘p’.
For example, consider the term t = p(e(p(x, y), k), z); the
variable y is at position 112 on t. We have:
ppos(112, t) = 1.ppos(12, e(p(x, y), k))
= 1.ppos(2, p(x, y)) = 1.2;
epos(112, t) = epos(12, e(p(x, y), k)
= 1.epos(2, p(x, y)) = 1.
Let t1, t2 be any two terms, q1 a position in t1, and q2 a
position in t2. The position-terms (q1, t1) and (q2, t2) are
said to be incompatible if at least one of the following holds:
1. ppos(q1, t1) is a proper preﬁx of ppos(q2, t2); or
2. ppos(q1, t1) = ppos(q2, t2), epos(q1, t1) (cid:54)= epos(q2, t2)
and epos(q1, t1) and epos(q2, t2) contain only 1’s in
their sequences.
Two position-term pairs are said to be compatible if they
are not incompatible.
A pair of terms t1, t2 are said to be in phase iﬀ for all posi-
tions q1 in t1 and q2 in t2 such that t1|q1 = t2|q2 , the position-
term pairs (q1, t1), (q2, t2) are compatible. The terms t1 and
t2 are said to be out of phase iﬀ they are not in phase;
they are out of phase on variable x iﬀ there exist positions
q1 in t1 and q2 in t2 such that t1|q1 = t2|q2 = x and the
position-term pairs (q1, t1), (q2, t2) are incompatible. (Note:
This actually is a generalized occur-check condition on the
variable x.) Note that every term is in phase with itself.
A position q in a term t is said to be a non-key position
iﬀ epos(q, t) contains only 1’s. For any two terms that are
equivalent to each other modulo Eh, we have the following
result:
Lemma 1. Let s and t be terms such that Eh |= s = t.
Then s and t are in phase on variables at non-key positions.
Proof. Let s and t be terms such that Eh |= s = t, then
there is an equational proof of s = t using the equation Eh.
Suppose that this proof has n steps. We will prove that s
and t are in phase, by induction on n.
In the base case,
suppose that n = 0, then s is syntactically equal to t, so
s and t are in phase. For the induction step, note that Eh
preserves the property of being in phase.
If two terms s, t are out of phase on some variable, then
for any substitution σ, the terms sσ, tσ are out of phase.
The Homomorphic Pattern inferences will contain a ‘Failure’
rule, such that the uniﬁcation problem will ‘Fail’ if applied
to an equation s = t where s and t are out of phase on a
variable at a non-key position. (Note however, that this is
an “if”, and not an “iﬀ”: indeed any two diﬀerent constants
a, b are in phase.)
a certain relationship if t1 is equivalent to t2 modulo Eh.
Next we show, that the non-key positions of t1 and t2 have
Lemma 2. Let t1 and t2 be terms such that Eh |= t1 =
t2. Let q1 be a non-key position in t1. Then there exists a
position q2 in t2 such that ppos(q1, t1) = ppos(q2, t2) and
epos(q1, t1) = epos(q2, t2).
Proof. Since Eh |= t1 = t2, there is an equational proof
of t1 = t2 using the single equation Eh. Suppose that this
proof has n steps. We prove by induction on n that the above
properties hold. If n = 0, then t1 is syntactically equal to
t2, so we can set q2 = q1. For the induction step, suﬃces to
note that Eh preserves the properties to be proved.
The Homomorphic Pattern rules will also incorporate the
following principle:
if e(x, k) is a pair, then the argument
encrypted – namely x – must itself split as a pair. But with
a view to not increase the number of unsolved variables of
the problem, these rules will be formulated as macro (or
hyper) rules, which group several such inferences into one
single inference.
The macro rules will be formulated by using a suitable
representation of terms, using two new symbols: E and Pv,
where v is some sequence of ﬁnite strings over the alpha-
bet {1, 2}; we agree to refer to such sequences simply as
bit string sequences. Informally, a term with Pv on top is
a certain representation for a term with p as top-symbol;
similarly, a term with E on top represents a term with e