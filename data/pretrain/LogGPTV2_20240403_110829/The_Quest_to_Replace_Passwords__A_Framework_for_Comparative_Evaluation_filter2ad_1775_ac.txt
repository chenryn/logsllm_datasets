and possibly weaken their own brand [28], a deployment
drawback not currently captured in our criteria.
5OpenID is often confused with OAuth, a technically unrelated protocol
for delegating access to one’s accounts to third parties. The recent OpenID
Connect proposal merges the two. We consider the OpenID 2.0 standard
here, though all current versions score identically in our framework.
Security-wise, OpenID reduces most attacks to only
the password authentication between a user and his or
her identity provider. This makes it somewhat difﬁcult to
rate; we consider it Quasi-Resilient-to-Throttled-Guessing,
Quasi-Resilient-to-Unthrottled-Guessing, Quasi-Resilient-
to-Targeted-Impersonation,
Quasi-Resilient-to-Physical-
Observation as these attacks are possible but only against
the single identity provider (typically cached in a cookie)
and not for each login to all veriﬁers. However, it is not
Resilient-to-Internal-Observation as malware can either
steal persistent login cookies or record the master password.
OpenID is also believed to be badly non-Resilient-to-
Phishing since it
re-direction to an identity
provider from a relying party [29]. OpenID is Resilient-to-
Leaks-from-Other-Veriﬁers, as relying parties don’t store
users passwords. Federated schemes have been criticized on
privacy grounds and, while OpenID does enable technically
savvy users to operate their own identity provider, we rate
OpenID as non-Unlinkable and non-No-Trusted-Third-Party
as the vast majority of users aren’t capable of doing so.
involves
D. Graphical passwords: Persuasive Cued Clickpoints
(PCCP)
Graphical passwords schemes attempt to leverage natural
human ability to remember images, which is believed to
exceed memory for text. We consider as a representative
PCCP [7] (Persuasive Cued Click-Points), a cued-recall
scheme. Users are sequentially presented with ﬁve images
on each of which they select one point, determining the
next image displayed. To log in, all selected points must be
correctly re-entered within a deﬁned tolerance. To ﬂatten the
password distribution, during password creation a randomly-
positioned portal covers a portion of each image; users
must select their point from therein (the rest of each image
is shaded slightly). Users may hit a “shufﬂe" button to
randomly reposition the portal to a different region—but
doing so consumes time, thus persuading otherwise. The
portal is absent on regular login. Published security analysis
and testing report reasonable usability and improved security
over earlier schemes, speciﬁcally in terms of resistance to
both hotspots and pattern-based attacks [11].
While not Memorywise-Effortless, nor Scalable-for-Users
due to extra cognitive load for each account password, PCCP
offers advantages over text passwords (and other uncued
schemes) due to per-account image cues reducing password
interference. It is Easy-to-Learn (usage and mental models
match web passwords, but interface details differ), but only
Quasi-Efﬁcient-to-Use (login times on the order of 5s to 20s
exceed text passwords) and at best Quasi-Infrequent-Errors.
PCCP is not Accessible (consider blind users) and
has Negligible-Cost-per-User. It is not Server-Compatible;
though it might be made so by having a proxy act as inter-
mediary (much as URRSA does). It is Browser-Compatible.
It is not Mature, but apparently Non-Proprietary.
559
PCCP is not Resilient-to-Physical-Observation (due to
video-camera shoulder surﬁng), but is Resilient-to-Targeted-
Impersonation (personal knowledge of a target user does
not help attacks). We rate it Quasi-Resilient-to-Throttled-
Guessing due to portal persuasion increasing password ran-
domness, but note individual users may repeatedly bypass
portal recommendations. Although the persuasion is also
intended to mitigate ofﬂine attacks, we rate it not Resilient-
to-Unthrottled-Guessing as studies to date have been limited
to full password spaces of 243 (which are within reach of
ofﬂine dictionary attack, especially for users choosing more
predictable passwords, assuming veriﬁer-stored hashes are
available). It is not Resilient-to-Internal-Observation (static
is Resilient-to-Leaks-from-
passwords are replayable). It
Other-Veriﬁers (distinct sites can insist on distinct image
sets). PCCP is Resilient-to-Phishing per our strict deﬁnition
of that beneﬁt;
to obtain the proper per-user images, a
phishing site must interact (e.g., by MITM) with a legitimate
server. PCCP matches text passwords on being Unlinkable.
E. Cognitive authentication: GrIDsure
Challenge-Response schemes attempt to address the re-
play attack on passwords by having the user deliver proof
that he knows the secret without divulging the secret itself.
If memorization and computation were no barrier then the
server might challenge the user to return a cryptographic
hash of the user’s secret combined with a server-selected
nonce. However, it is unclear if a scheme within the means
of human memory and calculating ability is achievable. We
examine the commercial offering GrIDsure (a variant of
which is described in a paper [30] by other authors) as
representative of the class.
At registration the user is presented with a grid (e.g., 5×5)
and selects a pattern, or sequence of cells. There are 254
possible length-4 patterns, for example. At login the user
is again presented with the grid, but now populated with
digits. To authenticate he transcribes the digits in the cells
corresponding to his pattern. Since the association of digits
to cells is randomized the string typed by the user is different
from login to login. Thus he reveals knowledge of his secret
without typing the secret itself.
This scheme is similar to passwords in terms of usability
and we (perhaps generously) rate it identically in terms of
many usability beneﬁts. An exception is that it’s only Quasi-
Efﬁcient-to-Use: unlike passwords, which can often be typed
from muscle memory, transcribing digits from the grid cells
requires effort and attention and is likely to be slower.
We consider the scheme as not Accessible as the two-
dimensional
layout seems unusable for blind users. The
scheme has Negligible-Cost-per-User, in terms of technol-
ogy. It is not Server-Compatible but is Browser-Compatible.
It is not Mature. We rate it not Non-Proprietary, as the
intellectual property status is unknown.
The security properties are, again, similar to passwords in
many respects. It is not Resilient-to-Physical-Observation, as
a camera that captures both the grid and user input quickly
learns the secret. It is an improvement on passwords in
that it is Resilient-to-Targeted-Impersonation: we assume
that an attacker is more likely to guess secret strings than
secret patterns based on knowledge of the user. However,
its small space of choices prevents it from being Resilient-
to-Throttled-Guessing or Resilient-to-Unthrottled-Guessing.
In spite of the one-time nature of what the user types the
scheme is not Resilient-to-Internal-Observation: too many
possible patterns are eliminated at each login for the secret
to withstand more than three or four observations. It shares
the remaining security beneﬁts with passwords.
F. Paper tokens: OTPW
Using paper to store long secrets is the cheapest form of
a physical login token. The concept is related to military
codebooks used throughout history, but interest in using
possession of paper tokens to authenticate humans was
spurred in the early 1980’s by Lamport’s hash-chaining
scheme [31], later developed into S/KEY [32]. OTPW is a
later reﬁnement, developed by Kuhn in 1998 [33], in which
the server stores a larger set of independent hash values,
consisting of about 4 kB per user. The user carries the hash
pre-images, printed as 8-character values like IZdB bqyH.
Logging in requires typing a “preﬁx password” as well as
one randomly-queried hash-preimage.
OTPW rates poorly for usability: the preﬁx password
means the scheme isn’t Memorywise-Effortless or Scalable-
for-Users;
it also isn’t Nothing-to-Carry because of the
paper token. The typing of random passwords means the
scheme also isn’t Physically-Effortless, Efﬁcient-to-Use or
Infrequent-Errors. We do expect that the scheme is Easy-
to-Learn, as typing in a numbered password upon request
is only marginally more difﬁcult than using text passwords.
It is also Easy-Recovery-from-Loss as we expect most users
can easily print a new sheet if needed.
Paper-based tokens are cheap and easy to deploy. We
rate OTPW as non-Accessible because plain printing may be
insufﬁcient for visually-impaired users, though alternatives
(e.g. braille) may be available. We consider the price of
printing to be Negligible-Cost-per-User. While not Server-
Compatible,
the scheme is Browser-Compatible. Finally,
OTPW has a mature open-source implementation, making
it Mature and Non-Proprietary.
it
Though OTPW is designed to resist human observa-
isn’t Resilient-to-Physical-
tion compared to S/KEY,
Observation because the printed sheet of one-time codes
can be completely captured by a camera. Otherwise,
OTPW achieves all other security beneﬁts. Because lo-
gin codes are used only once and randomly generated,
the scheme is Resilient-to-Throttled-Guessing, Resilient-to-
Unthrottled-Guessing and Resilient-to-Internal-Observation.
560
It is Resilient-to-Phishing as it is impractical for a user
to enter all of their secrets into a phishing website even
if asked, and Resilient-to-Theft thanks to the preﬁx pass-
word. As a one-to-one scheme with different secrets for
each server, it is Resilient-to-Leaks-from-Other-Veriﬁers, No-
Trusted-Third-Party and Unlinkable. Finally, the typing re-
quired makes it Requiring-Explicit-Consent.
captured passcodes expire after one minute; and Resilient-to-
Theft, because the PIN is checked at the veriﬁer, so guesses
could be rate-limited. It’s not No-Trusted-Third-Party, as
demonstrated by the March 2011 attack, since RSA keeps
the seed of each token. It’s Requiring-Explicit-Consent, as
the user must transcribe the passcode, and Unlinkable if each
veriﬁer requires its own token.
G. Hardware tokens: RSA SecurID
H. Mobile-Phone-based: Phoolproof
Hardware tokens store secrets in a dedicated tamper-
resistant module carried by the user; the RSA SecurID [34]
family of tokens is the long-established market leader. Here
we refer to the simplest dedicated-hardware version, which
has only a display and no buttons or I/O ports. Each instance
of the device holds a secret “seed” known to the back-end.
A cryptographically strong transform generates a new 6-
digit code from this secret every 60 seconds. The current
code is shown on the device’s display. On enrollment, the
user connects to the administrative back-end through a web
interface, where he selects a PIN and where the pairing
between username and token is conﬁrmed. From then on,
for authenticating, instead of username and password the
user shall type username and “passcode” (concatenation of a
static 4-digit PIN and the dynamic 6-digit code). RSA offers
an SSO facility to grant access to several corporate resources
with the same token; but we rate this scheme assuming there
won’t be a single SSO spanning all veriﬁers.
In March 2011 attackers compromised RSA’s back-end
database of seeds [35], which allowed them to predict the
codes issued by any token. This reduced the security of each
account to that of its PIN until the corresponding token was
recalled and reissued.
The scheme is not Memorywise-Effortless nor Scalable-
for-Users (it needs a new token and PIN per veriﬁer). It’s
not Physically-Effortless, because the user must transcribe
the passcode. It’s simple enough to be Easy-to-Learn, but
Quasi-Efﬁcient-to-Use because of the transcription. We rate
it as having Quasi-Infrequent-Errors, like passwords, though
it might be slightly worse. It is not Easy-Recovery-from-
Loss: the token must be revoked and a new one reissued.
The scheme is not Accessible: blind users cannot read
the code off the token. No token-based scheme can of-
fer Negligible-Cost-per-User. The scheme is not Server-
Compatible (a new back-end is required) but it is Browser-
Compatible. It is deﬁnitely Mature, but not Non-Proprietary.
As for security, because the code changes every minute,
SecurID is Resilient-to-Physical-Observation, Resilient-
to-Targeted-Impersonation, Resilient-to-Throttled-Guessing
and Resilient-to-Unthrottled-Guessing (unless we also as-
sume that the attacker broke into the server and stole the
seeds). It is Resilient-to-Internal-Observation: we assume
that dedicated devices can resist malware inﬁltration. It’s
Resilient-to-Leaks-from-Other-Veriﬁers, as different veriﬁers
would have their own seeds; Resilient-to-Phishing, because
561
Phoolproof Phishing Prevention [36] is another token-
based design, but one in which the token is a mobile
phone with special code and crypto keys. It uses public key
cryptography and an SSL-like authentication protocol and
was designed to be as compatible as possible with existing
systems.
Phoolproof was conceived as a system to secure banking
transactions against phishing, not as a password replacement.
The user selects a desired site from the whitelist on the
phone; the phone talks wirelessly to the browser, causing
the site to be visited; an end-to-end TLS-based mutual
authentication ensues between the phone and the bank’s
site; the user must still type the banking website password
into the browser. Thus the scheme is not Memorywise-
Effortless, nor Scalable-for-Users. It has Quasi-Nothing-to-
Carry (the mobile phone). It’s not Physically-Effortless as
one must type a password. We rate it Easy-to-Learn, perhaps
generously, and Quasi-Efﬁcient-to-Use as it requires both
typing a password and ﬁddling with a phone. It’s no better
than passwords on Quasi-Infrequent-Errors, since it still uses
one. The only recovery mechanism is revocation and reissue,
so it doesn’t have Easy-Recovery-from-Loss.
On deployability: it’s Quasi-Accessible insofar as most
disabled users, including blind people, can use a mobile
phone too (note the user doesn’t need to transcribe codes
from the phone). We assume most users will already have a
phone, though perhaps not one of the right type (with Java,
Bluetooth etc), hence it has Quasi-Negligible-Cost-per-User.
The scheme requires changes, albeit minor, to both ends,
so it’s Quasi-Server-Compatible but, by our deﬁnitions, not
Browser-Compatible because it uses a browser plugin. It’s
not really Mature (only a research prototype), but it is Non-
Proprietary.
On
security:
it’s Resilient-to-Physical-Observation,
Resilient-to-Targeted-Impersonation, Resilient-to-Throttled-
Guessing, Resilient-to-Unthrottled-Guessing because, even
after observing or guessing the correct password,
the
attacker can’t authenticate unless he also steals the user’s
phone, which holds the cryptographic keys. It’s Quasi-
Resilient-to-Internal-Observation because malware must
compromise both the phone (to capture the private keys)
and the computer (to keylog the password). It’s Resilient-to-
Leaks-from-Other-Veriﬁers because the phone has a key pair
per veriﬁer, so credentials are not recycled. It’s deﬁnitely
Resilient-to-Phishing, the main design requirement of the
scheme. It’s Resilient-to-Theft because possession of the
phone is insufﬁcient: the user still needs to type user ID and
password in the browser (for additional protection against
theft, the authors envisage an additional PIN or biometric
to authenticate the user to the device; we are not rating
this). The scheme is No-Trusted-Third-Party if we disregard
the CA that certiﬁes the TLS certiﬁcate of the bank. It’s
Requiring-Explicit-Consent because the user must type user
ID and password. Finally it’s Unlinkable because the phone
has a different key pair for each veriﬁer.
I. Biometrics: Fingerprint recognition
Biometrics [37] are the “what you are” means of authen-
tication, leveraging the uniqueness of physical or behavioral
characteristics across individuals. We discuss in detail ﬁn-
gerprint biometrics [38]; our summary table also rates iris
recognition [39] and voiceprint biometrics [40]. In rating
for our remote authentication application, and biometric
veriﬁcation (“Is this individual asserted to be Jane Doe really
Jane Doe?”), we assume unsupervised biometric hardware
as might be built into client devices, vs. veriﬁer-provided
hardware, e.g., at an airport supervised by ofﬁcials.
offer
usability
biometrics
Fingerprint
advantages
Memorywise-Effortless, Scalable-for-Users, Easy-to-Learn,
and Nothing-to-Carry (no secrets need be carried; we
charge elsewhere for client-side ﬁngerprint
readers not
being currently universal). Current products are at best
Quasi-Physically-Effortless and Quasi-Efﬁcient-to-Use due
to user experience of not Infrequent-Errors (the latter two
worse than web passwords) and fail to offer Easy-Recovery-
from-Loss (here equated with requiring an alternate scheme
in case of compromise, or users becoming unable to provide
the biometric for physical reasons).
Deployability is poor—we rate it at best Quasi-Accessible
due to common failure-to-register biometric issues; not
Negligible-Cost-per-User (ﬁngerprint reader has a cost);
neither Server-Compatible nor Browser-Compatible, needing
both client and server changes; at best Quasi-Mature for un-
supervised remote authentication; and not Non-Proprietary,
typically involving proprietary hardware and/or software.
We rate the ﬁngerprint biometric Resilient-to-Physical-
Observation but serious concerns include easily fooling
COTS devices, e.g., by lifting ﬁngerprints from glass
surfaces with gelatin-like substances
[41], which we
charge by rating not Resilient-to-Targeted-Impersonation.
It is Resilient-to-Throttled-Guessing, but not Resilient-to-
Unthrottled-Guessing for typical precisions used; estimated
“effective equivalent key spaces” [9, page 2032] for ﬁn-
gerprint, iris and voice are 13.3 bits, 19.9 bits and 11.7
bits respectively. It is not Resilient-to-Internal-Observation
(captured samples of static physical biometrics are subject
to replay in unsupervised environments), not Resilient-to-
Leaks-from-Other-Veriﬁers, not Resilient-to-Phishing (a seri-
ous concern as biometrics are by design supposed to be hard
to change), and not Resilient-to-Theft (see above re: targeted
impersonation). As a plus, it needs No-Trusted-Third-Party
and is Requiring-Explicit-Consent. Physical biometrics are
also a canonical example of schemes that are not Unlinkable.
V. DISCUSSION
A clear result of our exercise is that no scheme we
examined is perfect—or even comes close to perfect scores.
The incumbent (traditional passwords) achieves all beneﬁts
on deployability, and one scheme (the CAP reader, discussed
in the tech report [1]) achieves all
in security, but no
scheme achieves all usability beneﬁts. Not a single scheme
is dominant over passwords, i.e., does better on one or more
beneﬁts and does at least as well on all others. Almost all
schemes do better than passwords in some criteria, but all
are worse in others: as Table I shows, no row is free of red
(horizontal) stripes.
Thus, the current state of the world is a Pareto equilibrium.
Replacing passwords with any of the schemes examined
is not a question of giving up an inferior technology for
something unarguably better, but of giving up one set of
compromises and trade-offs in exchange for another. For
example, arguing that a hardware token like RSA SecurID
is better than passwords implicitly assumes that the security
criteria where it does better outweigh the usability and
deployability criteria where it does worse. For accounts
that require high assurance, security beneﬁts may indeed
outweigh the fact that the scheme doesn’t offer Nothing-
to-Carry nor Negligible-Cost-per-User, but this argument is
less compelling for lower value accounts.
The usability beneﬁts where passwords excel—namely,
Nothing-to-Carry, Efﬁcient-to-Use, Easy-Recovery-from-
Loss—are where essentially all of the stronger security
schemes need improvement. None of the paper token or