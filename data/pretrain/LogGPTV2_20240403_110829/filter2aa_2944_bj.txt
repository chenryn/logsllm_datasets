    };
}
You may be wondering why you would split out looking up the user’s groups during
authentication to then just use them in a second query against the permissions table
during access control. It would be more efficient instead to perform a single query
that automatically checked the groups for a user using a JOIN or sub-query against the
group membership table, such as the following:
SELECT perms FROM permissions
 WHERE space_id = ?
   AND (user_or_group_id = ?      
    OR user_or_group_id IN       
    (SELECT DISTINCT group_id    
       FROM group_members        
      WHERE user_id = ?))        
Although this query is more efficient, it is unlikely that the extra query of the original
design will become a significant performance bottleneck. But combining the queries
into one has a significant drawback in that it violates the layering of authentication
and access control. As far as possible, you should ensure that all user attributes
required for access control decisions are collected during the authentication step, and
then decide if the request is authorized using these attributes. As a concrete example
of how violating this layering can cause problems, consider what would happen if you
changed your API to use an external user store such as LDAP (discussed in the next
section) or an OpenID Connect identity provider (chapter 7). In these cases, the
groups that a user is a member of are likely to be returned as additional attributes
during authentication (such as in the ID token JWT) rather than exist in the API’s
own database.
8.1.1
LDAP groups
In many large organizations, including most companies, users are managed centrally
in an LDAP (Lightweight Directory Access Protocol) directory. LDAP is designed for
storing user information and has built-in support for groups. You can learn more
about LDAP at https://ldap.com/basic-ldap-concepts/. The LDAP standard defines
the following two forms of groups:
Include any
groups in
the query.
Fail if none of the permissions for
the user or groups allow this action.
Check for 
permissions for 
this user directly.
Check for permissions 
for any groups the user 
is a member of.
272
CHAPTER 8
Identity-based access control
1
Static groups are defined using the groupOfNames or groupOfUniqueNames object
classes,1 which explicitly list the members of the group using the member or
uniqueMember attributes. The difference between the two is that groupOfUnique-
Names forbids the same member being listed twice.
2
Dynamic groups are defined using the groupOfURLs object class, where the mem-
bership of the group is given by a collection of LDAP URLs that define search
queries against the directory. Any entry that matches one of the search URLs is
a member of the group.
Some directory servers also support virtual static groups, which look like static groups
but query a dynamic group to determine the membership. Dynamic groups can be
useful when groups become very large, because they avoid having to explicitly list
every member of the group, but they can cause performance problems as the server
needs to perform potentially expensive search operations to determine the mem-
bers of a group.
 To find which static groups a user is a member of in LDAP, you must perform a
search against the directory for all groups that have that user’s distinguished name as a
value of their member attribute, as shown in listing 8.3. First, you need to connect to
the LDAP server using the Java Naming and Directory Interface (JNDI) or another
LDAP client library. Normal LDAP users typically are not permitted to run searches,
so you should use a separate JNDI InitialDirContext for looking up a user’s groups,
configured to use a connection user that has appropriate permissions. To find the
groups that a user is in, you can use the following search filter, which finds all LDAP
groupOfNames entries that contain the given user as a member:
(&(objectClass=groupOfNames)(member=uid=test,dc=example,dc=org))
To avoid LDAP injection vulnerabilities (explained in chapter 2), you can use the
facilities in JNDI to let search filters have parameters. JNDI will then make sure that
any user input in these parameters is properly escaped before passing it to the LDAP
directory. To use this, replace the user input in the field with a numbered parameter
(starting at 0) in the form {0} or {1} or {2}, and so on, and then supply an Object
array with the actual arguments to the search method. The names of the groups can
then be found by looking up the CN (Common Name) attribute on the results.
import javax.naming.*;
import javax.naming.directory.*;
import java.util.*;
private List lookupGroups(String username)
        throws NamingException {
    var props = new Properties();
1 An object class in LDAP defines the schema of a directory entry, describing which attributes it contains.
Listing 8.3
Looking up LDAP groups for a user
273
Users and groups
    props.put(Context.INITIAL_CONTEXT_FACTORY,              
             "com.sun.jndi.ldap.LdapCtxFactory");           
    props.put(Context.PROVIDER_URL, ldapUrl);               
    props.put(Context.SECURITY_AUTHENTICATION, "simple");   
    props.put(Context.SECURITY_PRINCIPAL, connUser);        
    props.put(Context.SECURITY_CREDENTIALS, connPassword);  
    var directory = new InitialDirContext(props);           
    var searchControls = new SearchControls();
    searchControls.setSearchScope(
            SearchControls.SUBTREE_SCOPE);
    searchControls.setReturningAttributes(
            new String[]{"cn"});
    var groups = new ArrayList();
    var results = directory.search(
        "ou=groups,dc=example,dc=com",
        "(&(objectClass=groupOfNames)" +                  
        "(member=uid={0},ou=people,dc=example,dc=com))",  
        new Object[]{ username },     
        searchControls);
    while (results.hasMore()) {
        var result = results.next();
        groups.add((String) result.getAttributes()    
            .get("cn").get(0));                       
    }
    directory.close();
    return groups;
}
To make looking up the groups a user belongs to more efficient, many directory serv-
ers support a virtual attribute on the user entry itself that lists the groups that user is a
member of. The directory server automatically updates this attribute as the user is
added to and removed from groups (both static and dynamic). Because this attribute
is nonstandard, it can have different names but is often called isMemberOf or some-
thing similar. Check the documentation for your LDAP server to see if it provides such
an attribute. Typically, it is much more efficient to read this attribute than to search
for the groups that a user is a member of.
TIP
If you need to search for groups regularly, it can be worthwhile to cache
the results for a short period to prevent excessive searches on the directory.
Set up the 
connection details 
for the LDAP server.
Search for all 
groups with the 
user as a member.
Use query parameters 
to avoid LDAP injection 
vulnerabilities.
Extract the CN attribute 
of each group the user 
is a member of.
274
CHAPTER 8
Identity-based access control
8.2
Role-based access control
Although groups can make managing large numbers of users simpler, they do not
fully solve the difficulties of managing permissions for a complex API. First, almost all
implementations of groups still allow permissions to be assigned to individual users as
well as to groups. This means that to work out who has access to what, you still often
need to examine the permissions for all users as well as the groups they belong to. Sec-
ond, because groups are often used to organize users for a whole organization (such
as in a central LDAP directory), they sometimes cannot be very useful distinctions for
your API. For example, the LDAP directory might just have a group for all software
engineers, but your API needs to distinguish between backend and frontend engi-
neers, QA, and scrum masters. If you cannot change the centrally managed groups,
then you are back to managing permissions for individual users. Finally, even when
groups are a good fit for an API, there may be large numbers of fine-grained permis-
sions assigned to each group, making it difficult to review the permissions.
 To address these drawbacks, role-based access control (RBAC) introduces the notion
of role as an intermediary between users and permissions, as shown in figure 8.2.
Pop quiz
1
True or False: In general, can groups contain other groups as members?
2
Which three of the following are common types of LDAP groups?
a
Static groups
b
Abelian groups
c
Dynamic groups
d
Virtual static groups
e
Dynamic static groups
f
Virtual dynamic groups
3
Given the following LDAP filter:
(&(objectClass=#A)(member=uid=alice,dc=example,dc=com))
which one of the following object classes would be inserted into the position
marked #A to search for static groups Alice belongs to?
a
group
b
herdOfCats
c
groupOfURLs
d
groupOfNames
e
gameOfThrones
f
murderOfCrows
g
groupOfSubjects
The answers are at the end of the chapter.
275
Role-based access control
Permissions are no longer directly assigned to users (or to groups). Instead, permis-
sions are assigned to roles, and then roles are assigned to users. This can dramatically
simplify the management of permissions, because it is much simpler to assign some-
body the “moderator” role than to remember exactly which permissions a moderator
is supposed to have. If the permissions change over time, then you can simply change
the permissions associated with a role without needing to update the permissions for
many users and groups individually.
 In principle, everything that you can accomplish with RBAC could be accom-
plished with groups, but in practice there are several differences in how they are used,
including the following:
 Groups are used primarily to organize users, while roles are mainly used as a
way to organize permissions.
 As discussed in the previous section, groups tend to be assigned centrally,
whereas roles tend to be specific to a particular application or API. As an exam-
ple, every API may have an admin role, but the set of users that are administra-
tors may differ from API to API.
 Group-based systems often allow permissions to be assigned to individual users,
but RBAC systems typically don’t allow that. This restriction can dramatically
simplify the process of reviewing who has access to what.
 RBAC systems split the definition and assigning of permissions to roles from the
assignment of users to those roles. It is much less error-prone to assign a user to
a role than to work out which permissions each role should have, so this is a use-
ful separation of duties that improves security.
 Roles may have a dynamic element. For example, some military and other envi-
ronments have the concept of a duty officer, who has particular privileges and
responsibilities only during their shift. When the shift ends, they hand over to
the next duty officer, who takes on that role.
RBAC is almost always used as a form of mandatory access control, with roles being
described and assigned by whoever controls the systems that are being accessed. It is
much less common to allow users to assign roles to other users the way they can with
permissions in discretionary access control approaches. Instead, it is common to layer
User
Moderator
role
Permission
Permission
Permission
Permission
Admin role
Users are assigned roles.
Permissions are assigned to
roles, never directly to users.
Figure 8.2
In RBAC, permissions 
are assigned to roles rather than 
directly to users. Users are then 
assigned to roles, depending on 
their required level of access.
276
CHAPTER 8
Identity-based access control
a DAC mechanism such as OAuth2 (chapter 7) over an underlying RBAC system so
that a user with a moderator role, for example, can delegate some part of their per-
missions to a third party. Some RBAC systems give users some discretion over which
roles they use when performing API operations. For example, the same user may be
able to send messages to a chatroom as themselves or using their role as Chief Finan-
cial Officer when they want to post an official statement. The NIST (National Institute
of Standards and Technology) standard RBAC model (http://mng.bz/v9eJ) includes
a notion of session, in which a user can choose which of their roles are active at a
given time when making API requests. This works similarly to scoped tokens in
OAuth, allowing a session to activate only a subset of a user’s roles, reducing the dam-
age if the session is compromised. In this way, RBAC also better supports the principle
of least privilege than groups because a user can act with only a subset of their full
authority.
8.2.1
Mapping roles to permissions
There are two basic approaches to mapping roles to lower-level permissions inside
your API. The first is to do away with permissions altogether and instead to just anno-
tate each operation in your API with the role or roles that can call that operation. In
this case, you’d replace the existing requirePermission filter with a new requireRole
filter that enforced role requirements instead. This is the approach taken in Java
Enterprise Edition (Java EE) and the JAX-RS framework, where methods can be anno-
tated with the @RolesAllowed annotation to describe which roles can call that method
via an API, as shown in listing 8.4.
import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.annotation.security.*;    
@DeclareRoles({"owner", "moderator", "member"})     
@Path("/spaces/{spaceId}/members")
public class SpaceMembersResource {
    @POST
    @RolesAllowed("owner")                 
    public Response addMember() { .. }
    @GET
    @RolesAllowed({"owner", "moderator"})  
    public Response listMembers() { .. }
}
The second approach is to retain an explicit notion of lower-level permissions, like
those currently used in the Natter API, and to define an explicit mapping from roles
to permissions. This can be useful if you want to allow administrators or other users to
Listing 8.4
Annotating methods with roles in Java EE
Role annotations are in the 
javax.annotation.security package.
Declare roles with 
the @DeclareRoles 
annotation.
Describe role 
restrictions with the 
@RolesAllowed 
annotation.
277
Role-based access control
define new roles from scratch, and it also makes it easier to see exactly what permis-
sions a role has been granted without having to examine the source code of the API.
Listing 8.5 shows the SQL needed to define four new roles based on the existing Nat-
ter API permissions:
 The social space owner has full permissions.
 A moderator can read posts and delete offensive posts.
 A normal member can read and write posts, but not delete any.
 An observer is only allowed to read posts and not write their own.
Open src/main/resources/schema.sql in your editor and add the lines from listing
8.5 to the end of the file and click save. You can also delete the existing permissions
table (and associated GRANT statements) if you wish.
CREATE TABLE role_permissions(                 
    role_id VARCHAR(30) NOT NULL PRIMARY KEY,  
    perms VARCHAR(3) NOT NULL                  
);
INSERT INTO role_permissions(role_id, perms)
    VALUES ('owner', 'rwd'),         
           ('moderator', 'rd'),      
           ('member', 'rw'),         
           ('observer', 'r');        
GRANT SELECT ON role_permissions TO natter_api_user;      
8.2.2
Static roles
Now that you’ve defined how roles map to permissions, you just need to decide how to
map users to roles. The most common approach is to statically define which users (or
groups) are assigned to which roles. This is the approach taken by most Java EE appli-
cation servers, which define configuration files to list the users and groups that should
be assigned different roles. You can implement the same kind of approach in the Nat-
ter API by adding a new table to map users to roles within a social space. Roles in the
Natter API are scoped to each social space so that the owner of one social space can-
not make changes to another.
DEFINITION
When users, groups, or roles are confined to a subset of your
application, this is known as a security domain or realm.
Listing 8.6 shows the SQL to create a new table to map a user in a social space to a
role. Open schema.sql again and add the new table definition to the file. The
user_roles table, together with the role_permissions table, take the place of the old
permissions table. In the Natter API, you’ll restrict a user to having just one role
within a space, so you can add a primary key constraint on the space_id and user_id
fields. If you wanted to allow more than one role you could leave this out and manually
Listing 8.5
Role permissions for the Natter API
Each role grants a 
set of permissions.
Define roles
for Natter
social spaces.
Because the roles 
are fixed, the API is 
granted read-only 
access.
278
CHAPTER 8
Identity-based access control
add an index on those fields instead. Don’t forget to grant permissions to the Natter
API database user.
CREATE TABLE user_roles(                                                
    space_id INT NOT NULL REFERENCES spaces(space_id),                  
    user_id VARCHAR(30) NOT NULL REFERENCES users(user_id),             
    role_id VARCHAR(30) NOT NULL REFERENCES role_permissions(role_id),  
    PRIMARY KEY (space_id, user_id)                                   
);
GRANT SELECT, INSERT, DELETE ON user_roles TO natter_api_user;    
To grant roles to users, you need to update the two places where permissions are cur-
rently granted inside the SpaceController class:
 In the createSpace method, the owner of the new space is granted full permis-
sions. This should be updated to instead grant the owner role.
 In the addMember method, the request contains the permissions for the new
member. This should be changed to accept a role for the new member instead.
The first task is accomplished by opening the SpaceController.java file and finding the
line inside the createSpace method where the insert into the permissions table state-
ment is. Remove those lines and replace them instead with the following to insert a
new role assignment:
  database.updateUnique(
      "INSERT INTO user_roles(space_id, user_id, role_id) " +
              "VALUES(?, ?, ?)", spaceId, owner, "owner");
Updating addMember involves a little more code, because you should ensure that you
validate the new role. Add the following line to the top of the class to define the
valid roles:
  private static final Set DEFINED_ROLES =
          Set.of("owner", "moderator", "member", "observer");
You can now update the implementation of the addMember method to be role-based
instead of permission-based, as shown in listing 8.7. First, extract the desired role from
the request and ensure it is a valid role name. You can default to the member role if
none is specified as this is the normal role for most members. It is then simply a case
of inserting the role into the user_roles table instead of the old permissions table