### 25th USENIX Security Symposium

**Figure 6: HTC One Chase Banking Recovery**

- (a) Screen-10
- (b) Screen-9
- (c) Screen-8
- (d) Screen-7
- (e) Screen-6
- (f) Screen-5
- (g) Screen-4
- (h) Screen-3
- (i) Screen-2
- (j) Screen-1
- (k) Screen-0

#### 4.2 Case Study I: Behind the Logout

We now elaborate on the Chase Banking app case to highlight RetroScope’s ability to recreate an app’s previous screens even after the user has logged out. Table 1, Row 32, shows that RetroScope recovered all 11 screens (the highest of all cases). Unsurprisingly, this recovery required the most reanimated bytecode instructions (584,587) and JNI function invocations (12,591), as well as the most reallocated Java objects (2,091) and C/C++ structures (266,965).

The recovered screens are shown in Figure 6. Starting from the Account screen (Screen-10), the "suspect" looks up a nearby ATM (Screen-9). They then review their recent money transfers (Screen-8) and begin a new transfer to a friend via the app's options menu (Screen-7). Screens-6 to -4 fill in the transfer’s recipient and amount. Screen-3 asks the user to confirm the transfer. Screen-2 shows the app’s “Log Out” menu, Screen-1 presents a loading screen while the app logs out, and Screen-0 is (as expected) the app’s login screen.

This case yields some interesting observations:
1. It highlights the robustness of RetroScope in recovering a large number of screens when an app’s internal data continues to accumulate.
2. More importantly, the case shows that, after logging out, the Chase app (as well as many others we have tested) does not clear its internal data. This is not surprising because programmers usually consider their app’s memory to be private (compared to network communications or files on persistent storage). This is further evidenced by the TextSecure app, which also allows for significant post-logout recovery (of pre-logout screens), despite the app’s message database being locked in the device’s storage.

#### 4.3 Case Study II: Background Updates

Another interesting case is WhatsApp Messenger on the Samsung S4. Table 1, Row 15, shows that RetroScope re-animated 402,536 bytecode instructions and 8,186 JNI functions in 23 minutes and 10 seconds, yielding an average of 50,317 instructions and 1,023 JNI functions per screen. What was unexpected, however, is that RetroScope recovered an extra screen (8 out of the 7 expected screens) from the memory image.

Our investigation into this extra screen found that it was not a screen we had previously seen during our phone usage. Instead, after we had finished interacting with WhatsApp, the app received a new chat message while it was in the background. To our surprise, this prompted the app to prepare a new chat screen that appended the newly received message to the chat. Figure 7 presents the screens recovered by RetroScope, and again, we see a clear temporal progression through the app by the "suspect."

- First, Screen-6 shows the call log screen.
- The app’s Settings screen is seen in Screen-5, followed by a screen that is only accessible through the Settings: the device owner’s profile (our fictitious device owner is Dr. King Schultz) in Screen-4.
- Screen-3 shows the recent chats; Screen-2 shows the "suspect’s" chat with a friend; then Dr. Schultz places a call to that friend in Screen-1.
- Lastly, Screen-0 shows the friend’s profile.
- The extra Screen+1 shows the chat screen as prepared by the app while in the background. Indeed, it shows the newly received message, even time-stamped ("TODAY" and "4:51 AM" in Figure 7(h)) after the previous chat had taken place.

To ensure that this result was not an accident, we repeated the experiment (receiving chat messages while the app was in the background) six more times (twice per device). In every test, we found that RetroScope recovered the additional pre-built chat screen containing the new message. Strangely, after testing the other apps that can receive background updates, we found that WhatsApp is the only app among our 15 apps that exhibited this behavior. We suspect that this is a WhatsApp-specific implementation feature to speed up displaying the chat screen (Screen+1) when the device user clicks the "New Message" pop-up notification.

#### 4.4 Case Study III: Deleted Messages

In addition to the WhatsApp case above, RetroScope recovered extra screens for four other cases in Table 1: Telegram (Row 12), WeChat (Row 29), WhatsApp (Row 30), and TextSecure (Row 43). However, the extra screens here are for a different reason: RetroScope can recover explicitly deleted chat messages. In these tests, we began a chat in each app and then explicitly deleted one of the messages (as a suspect would do in an attempt to hide evidence), and then used RetroScope to recover the deleted message.

Additionally, RetroScope also recovered proof of the suspect’s intent to delete the message:
- For WeChat and WhatsApp, RetroScope recovered the app’s pop-up menu (just prior to the deleted message) which displays the "Delete Message" option.
- For TextSecure, RetroScope recovered both the pop-up menu and a loading screen showing the text "Deleting Messages."

Figure 8 shows one example: RetroScope’s recovery for the WeChat app on the LGG3.
- Screen-4 shows the "suspect’s" recent chats, followed by a chat conversation with a friend in Screen-3.
- Screen-2 is the pop-up menu displaying the "Delete" option.
- The deleted message (now disconnected from the previous chat window) is displayed in Screen-1.
- The friend’s profile page (which the "suspect" navigated to last) is shown in Screen-0.

This result, in particular, highlights one of the most powerful features of RetroScope, given that it works for many apps and even provides proof of the suspect’s intent. Further, all four apps tout their encrypted communication, and some (e.g., TextSecure) even encrypt the message database in the device. In light of this, law enforcement has routinely had trouble convincing developers of such apps to backdoor their encryption in support of investigations [4, 5]. Despite the few hardening measures discussed in Section 5, RetroScope can provide such alternative evidence, which would otherwise be unavailable to investigators.

### 5 Privacy Implications and Discussion

RetroScope provides a powerful new capability to forensic investigators. However, despite being developed to aid criminal investigations, RetroScope also raises privacy concerns. In digital forensics practice, the privacy of device users is protected by strict legal protocols and regulations [9, 21], the most important of which is the requirement to obtain a search warrant prior to performing "invasive" digital forensics such as memory image analysis.

Outside the forensics context, even some of the authors were surprised by the temporal depth of screens that RetroScope recovered for many privacy-sensitive apps (e.g., banking, tax, and healthcare). In light of this, we discuss possible mitigation techniques which, despite their significant drawbacks, might be considered worthwhile by privacy-conscientious users/developers.

RetroScope’s recovery is based on two fundamental features of Android app design:
1. All apps that present a GUI must draw that GUI through the provided View class’s draw function.
2. The Android framework calls drawing functions on-demand and prevents those drawing functions from performing blocking operations (file/network reads/writes, etc.).

As such, an app that aims to disrupt RetroScope’s recovery would need to hinder its own ability to draw screens.

Previous anti-memory-forensics schemes focused on encrypting in-memory data after its immediate use. This ensures that traditional memory scanning or data structure carving approaches (e.g., [25, 26, 37, 41]) would not find any useful evidence beyond the few pieces of decrypted in-use data. However, these solutions cannot hinder RetroScope’s recovery because RetroScope recovers evidence via the app’s existing draw functions, which would have to include decryption routines as part of building the app screen. App developers may add state-dependent conditions to their draw functions which would crash when executed by RetroScope, but as seen in Section 4, these can still be handled via additional debugging/reverse engineering efforts to skip/fix the conditions.

One approach that may disable RetroScope’s recovery is to overwrite (i.e., zero) all app-internal data immediately after they are drawn on screen. By doing so, RetroScope would find that the app’s internal state could not support the execution of any of its draw functions. Unfortunately, this approach would significantly degrade usability and increase implementation complexity:
- First, frequently overwriting app-internal data would incur execution overhead (especially during screen changes, which are expected to be fast and dynamic).
- More importantly, this would require the app to download its internal data from a remote server every time the app needs to draw a screen. An app may attempt to amortize these overheads (e.g., only zeroing a prior session’s memory upon logout) but this would require:
  - Tracking used/freed memory throughout the session (to be zeroed later).
  - Users to regularly log out, which is uncommon and inconvenient for frequently used apps such as email, messengers, etc.

### Current vs. Future Android Runtimes

It is worth noting that Google has begun shifting the Android framework’s runtime from the Dalvik JVM to a Java-to-native compilation and native execution environment (named ART). Our implementation of RetroScope was based on the original (and still the most widely used by far [17]) Dalvik JVM runtime. However, during our development of RetroScope, specific care was taken to design RetroScope to utilize only features present in both runtimes. Specifically, ART still provides the same Java runtime tracking and support as Dalvik does (implemented now via C/C++ libraries), and all apps’ implementations (e.g., their Views and draw functions) remain unchanged. Our study of ART revealed that the only engineering effort required to port RetroScope is the interception of state-changing instructions in the compiled bytecode, rather than the literal bytecode as it exists in Dalvik. We leave this as future work.

### 6 Related Work

RetroScope is most related to GUITAR [35], which, by recovering the remaining "puzzle pieces" (GUI data structures) from a memory image, is able to piece together an app’s Screen 0. Motivated by GUITAR’s "Screen 0-only" limitation (i.e., spatial recovery), RetroScope enables the fundamentally more powerful capability of recovering Screens 0, -1, -2, ... -N (i.e., spatial-temporal recovery). Technically, GUITAR is based on geometric matching of GUI pieces; whereas RetroScope is based on selective reanimation of GUI code and data.

A number of other (spatial) memory forensics tools have also been developed recently for Android. Many of these approaches recover raw instances of app-specific data structures to reveal evidence:
- App-specific login credentials were recovered by Apostolopoulos et al. [8].
- Macht [28] followed by Dalvik Inspector [6] involved techniques to recover Dalvik-JVM control structures and raw Java object content.
- Earlier, Thing et al. [42] found that text-based message contents could be recovered from memory images.
- Most recently, our VCR [36] technique made it possible to recover images/video/preview frames from a phone’s camera memory.

In a mobile device-agnostic effort, DEC0DE [44] involved an effective technique to carve plain-text call logs and address book entries from phone storage using probabilistic finite state machines.

### 7 Conclusion

We have presented RetroScope, a spatial-temporal memory forensics technique (and new paradigm) that recovers multiple previous screens of an app from an Android phone’s memory image. RetroScope is based on a novel interleaved re-execution engine which selectively reanimates an app’s screen redrawing functionality without requiring any app-specific knowledge. Our evaluation results show that RetroScope can recover visually accurate, temporally ordered screens (ranging from 3 to 11 screens) for a variety of apps on three different Android phones.

### Acknowledgments

We thank the anonymous reviewers for their insightful comments and suggestions. This work was supported in part by NSF under Award 1409668.

### References

[References listed here as in the original text]

### Appendix A: Memory Image Acquisition

A prerequisite of memory forensics is the timely acquisition of a memory image from the subject device. Memory images typically contain a byte-for-byte copy of the entire physical RAM of a device or the virtual memory of an operating system or specific process(es). Traditionally, acquisition is performed by investigators, before the subject device is powered down, using minimally invasive software (e.g., fmem [22], LiME [7]) or hardware (e.g., Tibble [14], CoPilot [31]) tools. Other notable techniques have used the DMA-capable Firewire port [10] to acquire memory images, existing hibernation or swap files [18, 23, 32, 33], or cold/warm booted devices [19, 20, 43], but such approaches are only employed for highly specialized investigations. A more comprehensive list of memory image acquisition tools can be found in [2].

Android memory forensics was initially proposed during the development of memory acquisition tools for the devices. Most known among these are the software-based LiME [7] and TrustDump [40] techniques. In an alternative approach, Hilgers et al. [20] proposed cold-booting Android phones to perform memory forensics. Our evaluation of RetroScope used both LiME and a ptrace-based tool we developed (also available with the open source RetroScope code). Meanwhile, hardware-based memory acquisition from a mobile device is often performed via the ARM processor’s JTAG port [1, 45].

[References listed here as in the original text]