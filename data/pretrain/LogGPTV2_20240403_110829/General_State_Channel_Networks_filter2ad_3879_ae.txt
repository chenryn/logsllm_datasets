starts with a “create” message from A (without loss of generality
we assume that A always initiates the creation process). The func-
tionality removes the coins that A wants to deposit in the ledger
state channel from A’s account on the ledger, and waits for B to
declare that he wants to create the ledger state channel as well. If
this happens within ∆ rounds, then B’s coins are removed from
the ledger and the ledger state channel is created which is com-
municated to the parties with the “created” message. Otherwise A
can get her money back by sending a “refund” message. Since both
parties have to send the message “create”, the consensus on creation
security property is clearly satisfied for ledger state channels.
The creation procedure for a virtual state channel γ works slightly
differently since its effects are visible on the subchannels of γ. The
intention to create γ is expressed by P ∈ γ .end–users∪{I} by send-
ing a “create” message to the functionality. Once such a message is
received from P, the coins that are needed to create γ are locked im-
mediately in the corresponding subchannel of γ (if P = I, then coins
are locked in both subchannels of γ). If the functionality receives
the “create” messages from all three parties within three rounds,
then the virtual state channel is created, which is communicated
to γ .end–users by the “created” message.11 Thus, the consensus on
creation security property is satisfied also for virtual state channels
and since the successful creation takes three rounds, the constant
round virtual state channel creation holds as well.
After the virtual state channel is created, γ .end–users can use it
until round γ .validity. When this round comes, the parties initiate
the closing procedure. The functionality then distributes the coins
of γ back to its subchannels according to the balance in γ’s last
version. In case there exists cid such that γ .cspace(cid) is a contract
instance with locked coins, then all of these coins go back to I in
11Note that the intermediary I is not informed whether the virtual channel has been
created. This choice is made to keep the protocol as simple as possible. Note also that
I does not need this information, as she is not allowed to update this virtual channel.
both subchannels of γ. This is to guarantee that I never loses coins
even if end-users of γ do not terminate their contract instance in γ
before γ .validity.
In both cases (“ledger” and “virtual”) we assume that all the
honest parties involved in channel creation initiate the procedure
in the same round and that they have enough funds for the new
state channel. In case of a virtual state channel, we additionally
assume that the length of its two subchannels differ at most by
one.12
Contract instance update. The procedure for updating a contract
instance is identical for ledger and virtual state channels (this proce-
dure is also used for creating new contract instances). It is initiated
by a party P ∈ γ .end–users that sends an “update” message to the
ideal functionality. This message has parameters id and cid that
identify a state channel γ and a contract instance in this state chan-
nel (respectively). The other parameters, ˜σ and C, denote the new
storage and code of the contract instance. The party Q := γ .other–
party(P) is asked to confirm the update via an “update-requested”
message. If Q replies with an “update-reply” message within 1 round
if both parties are honest and within T rounds otherwise (where T is
a function of state channel length, see Step 2), the contract instance
with identifier cid in γ gets replaced with a contract instance deter-
mined by the tuple ( ˜σ , C). In the next round, both parties in γ .end–
users get notified via an “updated” message. Note that Q always
has to confirm the update which implies the consensus on update
security property. The constant round optimistic update efficiency
property holds as well since the update takes exactly 2 rounds if
both parties are honest.
We assume that the environment never asks the parties to do
obviously illegal things, like updating a contract instance in a state
channel that does not exits, or creating a contract instance when
there are not enough coins in the subchannels. Moreover, we assume
that the environment never asks to update a contract instance when
it is already being updated or executed.13
Contract instance execution. The procedure for executing a con-
tract instance is initiated by one of the parties P ∈ γ .end–users that
sends an “execute” message to the ideal functionality in round τ0.
This message has parameters id and cid whose meaning is as in the
update procedure. Other parameters are: f denoting the contract
function to be executed, and z which is an additional input parame-
ter to the function f . The execution results in updating the contract
instance with identifier cid according to the result of computing
f (σ , P, τ , z), where σ is the current storage of the contract instance
and τ := τ0 in case P is honest and determined by the simulator
otherwise. The other party of the state channel is notified about
the execution request before round τ0 + 5 in the optimistic case and
before round τ0 + T1 otherwise. Both parties from the set γ .end–
users learn the result of the execution before round τ0 + 5 in the
optimistic case (which implies the constant round optimistic execute)
12As discussed in Sec. 2, we make this assumption to achieve pessimistic time com-
plexity which is linear in the state channel length.
13Although we forbid parallel updates of the same contract instance, we do not make
any restrictions about parallel updates of two different contract instances even if they
are in the same ledger state channel. This in particular means that we allow concurrent
creation of virtual state channels.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada958This functionality accepts messages from parties in P. We use the abbreviated notation defined in Sec. 4.1.
Functionality F (cid:98)L(∆)
ch
(i, C)
Ledger state channel creation
Upon (create, γ) τ0←−(cid:45) A where γ is a ledger state channel:
(1) Within ∆ rounds remove γ .cash(A) coins from A’s account on (cid:98)L.
(3) Otherwise upon (refund, γ) >τ0+2∆←−−−−−−(cid:45) A, within ∆ rounds add γ .cash(A) coins to A’s account on (cid:98)L.
τ1≤τ0+∆←−−−−−−−(cid:45) B, remove within 2∆ rounds γ .cash(B) coins from B’s account on (cid:98)L and then set Γ(γ .id) := γ, send
(created, γ) (cid:44)−→ γ .end–users and stop.
(2) If (create, γ)
Virtual state channel creation
(1) Upon (create, γ) ←−(cid:45) P, where P ∈ γ .end–users ∪ {I}, record the message and proceed as follows:
• If P ∈ γ .end–users proceed as follows: If you have not yet received (create, γ) from I, then remove γ .cash(P) coins from P’s
balance in γ .subchan(P) and γ .cash(γ .other-party(P)) coins from I’s balance in γ .subchan(P).
• If P = I, then for both P ∈ γ .end–users proceed as follows: If you have not yet received (create, γ) from P then remove
γ .cash(P) coins from P’s balance in γ .subchan(P), and γ .cash(γ .other-party(P)) coins from I’s balance in γ .subchan(P).
(2) If within 3 rounds you record (create, γ) from all users in γ .end–users∪{γ .Ingrid}, then define Γ(γ .id) := γ, send (created, γ) (cid:44)−→
γ .end–users and wait for channel closing in Step 4 (in the meanwhile accepting the update and execute messages concerning γ).
(3) Otherwise wait until round γ .validity. Then within 2 · (TimeExeReq(⌈j/2⌉) + TimeExe(⌈j/2⌉)) rounds, where j := γ .length,
refund the coins that you removed from the subchannels in Step 1.
Automatic closure of virtual state channel γ when round γ .validity comes:
(4) Let j := γ .length. Within 2 · (TimeExeReq(⌈j/2⌉) + TimeExe(⌈j/2⌉)) rounds proceed as follows. Let ˆγ be the current version of
the virtual state channel, i.e. ˆγ := Γ(γ .id), and let ˆcA := ˆγ .cash(A) and ˆcB := ˆγ .cash(B).
(5) Add ˆcA coins to A’s balance and ˆcB coins to I’s balance in γ .subchan(A). Add ˆcA coins to I’s balance and ˆcB coins to B’s balance
in γ .subchan(B). If there exists cid ∈ {0, 1}∗ such that σcid := ˆγ .cspace(cid).storage (cid:44) ⊥ and ˆc := σcid .locked > 0, then add ˆc
coins to I’s balance in both γ .subchan(A) and γ .subchan(B). Erase ˆγ from Γ and (closed, γ .id) (cid:44)−→ γ .end–users.
Contract instance update
Upon (update, id, cid, ˜σ , C) τ0←−(cid:45) P, let γ := Γ(id), j = γ .length. If P (cid:60) γ .end–users then stop. Else proceed as follows:
(2) If (update–reply, ok, id, cid)
(1) Send (update–requested, id, cid, ˜σ , C) τ0+1
users are honest. Else if j = 1, set T := τ0 + 3∆ + 1 and if j > 1, set T := τ0 + 4 · TimeExeReq(⌈j/2⌉) + 1.
(cid:44)−−−→ γ .other–party(P) and set T := τ0 + 1 in optimistic case when both parties in γ .end–
τ1≤T←−−−−(cid:45) γ .other–party(P), then set Γ := UpdateChanSpace(Γ, id, cid, ˜σ , C, addA, addB), where
addA := − ˜σ .cash(A) if γ .cspace(cid) = ⊥ and addA := σ .cash(A) − ˜σ .cash(A) otherwise for σ := γ .cspace(cid).storage.
The value addB is defined analogously. Then send (updated, id, cid) τ1+1
Contract instance execution
(cid:44)−−−→ γ .end–users and stop.
Upon (execute, id, cid, f , z) τ0←−(cid:45) P, let γ := Γ(id) and j = γ .length. If P (cid:60) γ .end–users then stop. Else set T1 and T2 as:
ExeReq(⌈j/2⌉) + 5, T2 := τ0 + 4 · TimeExeReq(⌈j/2⌉) + 5 if j > 1.
• In the optimistic case when both parties in γ .end–users are honest, set T1 := τ0 + 4 and T2 := τ0 + 5.
• In the pessimistic case when at least one party in γ .end–users is corrupt, set T1,T2 := τ0 +4∆ +5 if j = 1 and set T1 := τ0 +2·Time
(1) In round τ1 ≤ T1, send (execute–requested, id, cid, f , z) τ1
(2) In round τ2 ≤ T2, let γ := Γ(id), ν := γ .cspace(cid), σ := ν .storage, and τ := τ0 if P is honest and else τ is set by the simulator.
Compute ( ˜σ , addL, addR , m) := f (σ , P, τ , z). If m = ⊥, then stop. Else set Γ := UpdateChanSpace(Γ, id, cid, ˜σ , ν .code, addL,
addR) and send (executed, id, cid, ˜σ , addL, addR , m) τ3
(cid:44)−→ γ .other–party(P).
(cid:44)−→ γ .end–users.
Ledger state channel closure
Upon (close, id) τ0←−(cid:45) P, let γ = Γ(id). If P (cid:60) γ .end–users then stop. Else wait at most 7∆ rounds and distinguish the following two cases:
(1) If there exists cid ∈ {0, 1}∗ such that σcid := γ .cspace(cid).storage (cid:44) ⊥ and σcid .locked (cid:44) 0, then stop.
(2) Otherwise wait up to ∆ rounds to add γ .cash(A) coins to A’s account and γ .cash(B) coins to B’s account on the ledger L. Then
set Γ(id) := ⊥, send (closed, id) τ2≤τ0+8∆
(cid:44)−−−−−−−−→ γ .end–users and stop.
Figure 4: The state channel ideal functionality.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada959and before round τ0 + T2 otherwise. The values T1 and T2 are func-
tions of state channel length, see the formal description in Fig. 4.
Observe that contract instance execution initiated by party P does
not require approval of the other party of the channel (although the
other party is informed about the execution request). This implies
that the guarantee of execution security property is satisfied.
We would like to emphasize that if two different execute mes-
sages are received by the ideal functionality at the same time (or
not too many rounds from each other), then it is up to the adversary
to decide which function is executed first.14 Designers of contract
codes and users of the protocols should be aware of this possible
asynchronicity.
Ledger state channel closure. The procedure for closing a ledger
state channel γ starts when a party P ∈ γ .end–users sends to the
ideal functionality a message (close, id), where id is the identifier
of ledger state channel γ to be closed. The functionality checks (in
Step 1) if there are no contract instances that are open over γ. If
not, then in Step 2 the functionality distributes the coins from γ to
the ledger accounts of the parties according to γ’s latest balance,
and notifies the parties about a successful closure.
4.3 Using the state channel ideal functionality
Let us now demonstrate how to use our ideal functionality for
generalized state channel networks in practice. We do it on a con-
crete example of the two party lottery (already discussed in Sec. 2).
The first step is to define a contract code Clot(i) which allows two
parties to play the lottery in a state channel of length at most i.
A contract storage σ of Clot(i) has, in addition to the mandatory
attributes σ .userL, σ .userR , σ .cash and σ .locked (see Sec. 4.1), the
attribute σ .start ∈ N, whose purpose it to store the construction
round, the attribute σ .com ∈ {0, 1}∗, to store the commit value
when submitted by σ .userL, and the attribute σ .bit ∈ {0, 1} to store
the secret bit when provided by σ .userR.
The contract code has one constructor Initlot which generates
the initial contract storage σ such that both σ .cash(σ .userL) and
σ .cash(σ .userR) are equal to 1 (each user deposits 1 coin). The
contract functions are: (i) Com which, if executed by σ .userL on
input c, stores c in σ .com, (ii) Reveal which, if executed by σ .userR
on input rB, stores rB in σ .bit, (iii) Open which allows σ .userL to
open the commitment stored in σ .com and pays out 2 coins to the
winner, and (iv) Punish which allows a party to unlock coins from
the contract instance in case the other party misbehaves. See the
full version of this paper [13] for a formal definition of Clot(i).
channel γ created via the ideal functionality F (cid:98)L(∆)
Assume now that parties Alice and Bob have a virtual state
(i, C), where
Clot(i) ∈ C. If Alice wants to play the lottery using γ, she first lo-
cally executes the constructor Initlot to obtain the initial contract
storage σ. Then she sends the message (update, γ .id, cid, σ , Clot(i))
to F (cid:98)L(∆)
(i, C) for some contact instance identifier cid never used be-
fore. The ideal functionality informs Bob about Alice’s intention to
play by sending the message(update–requested, γ .id, cid, σ , Clot(i))
to him. If Bob agrees with playing the game, he sends the reply
(update–reply, ok, γ .id, cid). Alice and Bob can now start playing
in a way we describe below (let τ0 be the current round).
14Note that this is the case also for execution of smart contracts on the blockchain.
ch
ch
(1) Commit: In round τ0 Alice locally chooses a random bit
rA ∈ {0, 1} and a random string s ∈ {0, 1}λ, where λ is the
security parameter, locally computes the commit value c
using the randomness s. Then she submits c by sending the
message (execute, γ .id, cid, Com, c) to the ideal functionality.
(2) Reveal: If before round τ0 + TimeExe(i) Bob receives a mes-
sage from the ideal functionality that Alice committed to
her secret bit, Bob locally chooses a random bit rB ∈ {0, 1}
which he submits by sending the message (execute, γ .id,
cid, Reveal, rB) to the ideal functionality. Otherwise, in round
τ0 + TimeExe(i), he sends the message (execute, γ .id, cid,
Punish,⊥) to the ideal functionality to unlock all coins from
the lottery contract by which he punishes Alice for her mis-
behavior.
(3) Open: If before round τ0 + 2 · TimeExe(i) Alice receives a
message from the ideal functionality that Bob reveled his
secret bit rB, she opens her commitment by sending the mes-
sage (execute, γ .id, cid, Open,(rA, s)). Otherwise, in round
τ0 +2· TimeExe(i), she sends the message (execute, γ .id, cid,
Punish,⊥) to unlock all coins from the lottery contract by
which she punishes Bob for his misbehavior.
(4) Finalize: If until round τ0 +3·TimeExe(i) Bob did not receive
a message from the ideal functionality that Alice opened
her commitment, Bob sends the message (execute, γ .id, cid,
Punish,⊥) to the ideal functionality to unlock all coins from
the lottery contract and finalize the game.
5 AN OVERVIEW OF OUR APPROACH
In this section we provide a high level idea of the modular de-
F (cid:98)L(∆)
sign of our protocol realizing the state channel ideal functionality
(i, C) (the main ideas behind our construction were already
ch
presented in Sec. 2).
scc
tionality F (cid:98)L(∆)
Ledger state channels. Our first step is to define an ideal func-
(C) which models the behavior of a concrete smart
contract, which we call state channel contract. This contract allows
two parties to open, maintain and close a ledger state channel on
the blockchain. The ideal functionality is parametrized by the set of
contract codes C whose instances can be opened in the ledger state
F (cid:98)L(∆)
channels created via this ideal functionality. The ideal functionality
(C) together with the ledger functionality (cid:98)L can be imple-
(i.e. the protocol for ledger state channels).
scc
mented by a cryptocurrency which supports such state channel
contracts on its blockchain (a candidate cryptocurrency would be,
protocol Π(1, C) which realizes the ideal functionality F (cid:98)L(∆)
e.g., Ethereum). We use this contract ideal functionality to design a
(1, C)
scription of the protocol Π(1, C) and the ideal functionality F (cid:98)L(∆)
The outline of the protocol is given in Appx. A.1. The formal de-
(C)
can be found in the full version of this paper [13], where we also
prove that the protocol Π(1, C) emulates the ideal functionality
F (cid:98)L(∆)
(C) hybrid world. This statement is formal-
ch
ized by the following theorem.
(1, C) in the F (cid:98)L(∆)