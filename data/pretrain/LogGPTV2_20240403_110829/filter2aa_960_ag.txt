    }()
    { for i := 0; i  ")
    return os.Stdin.Read(b)w
}
// FooWriter defines an io.Writer to write to Stdout.
x type FooWriter struct{}
// Write writes data to Stdout.
y func (fooWriter *FooWriter) Write(b []byte) (int, error) {
    fmt.Print("out> ")
    return os.Stdout.Write(b)z
}
func main() {
    // Instantiate reader and writer.
    var (
        reader FooReader
        writer FooWriter
    )
    // Create buffer to hold input/output.
    { input := make([]byte, 4096)
前沿信安资讯阵地  公众号：i nf osrc
34   Chapter 2
    // Use reader to read input.
    s, err := reader.Read(input)|
    if err != nil {
        log.Fatalln("Unable to read data")
    }
    fmt.Printf("Read %d bytes from stdin\n", s)
    // Use writer to write output.
    s, err = writer.Write(input)}
    if err != nil {
        log.Fatalln("Unable to write data")
    }
    fmt.Printf("Wrote %d bytes to stdout\n", s)
}
Listing 2-9: A reader and writer demonstration (/ch-2/io-example/main.go)
The code defines two custom types: FooReader u and FooWriter x. On 
each type, you define a concrete implementation of the Read([]byte) func-
tion v for FooReader and the Write([]byte) function y for FooWriter. In this 
case, both functions are reading from stdin w and writing to stdout z.
Note that the Read functions on both FooReader and os.Stdin return 
the length of data and any errors. The data itself is copied into the byte 
slice passed to the function. This is consistent with the Reader interface 
prototype definition provided earlier in this section. The main() function  
creates that slice (named input) { and then proceeds to use it in calls to 
FooReader.Read([]byte) | and FooReader.Write([]byte) }.
A sample run of the program produces the following:
$ go run main.go 
in > hello world!!!
Read 15 bytes from stdin
out> hello world!!!
Wrote 4096 bytes to stdout
Copying data from a Reader to a Writer is a fairly common pattern—so 
much so that Go’s io package contains a Copy() function that can be used to 
simplify the main() function. The function prototype is as follows:
func Copy(dst io.Writer, src io.Reader) (written int64, error)
This convenience function allows you to achieve the same program-
matic behavior as before, replacing your main() function with the code in 
Listing 2-10.
func main() {
    var (
        reader FooReader
        writer FooWriter
    )
前沿信安资讯阵地  公众号：i nf osrc
TCP, Scanners, and Proxies   35
    if _, err := io.Copy(&writer, &reader)u; err != nil {
        log.Fatalln("Unable to read/write data")
    }
}
Listing 2-10: Using io.Copy (/ch-2/copy-example/main.go)
Notice that the explicit calls to reader.Read([]byte) and writer.Write([]
byte) have been replaced with a single call to io.Copy(writer, reader) u. 
Under the covers, io.Copy(writer, reader) calls the Read([]byte) function on 
the provided reader, triggering the FooReader to read from stdin. Subsequently, 
io.Copy(writer, reader) calls the Write([]byte) function on the provided 
writer, resulting in a call to your FooWriter, which writes the data to stdout. 
Essentially, io.Copy(writer, reader) handles the sequential read-then-write 
process without all the petty details.
This introductory section is by no means a comprehensive look at Go’s 
I/O and interfaces. Many convenience functions and custom readers and 
writers exist as part of the standard Go packages. In most cases, Go’s stan-
dard packages contain all the basic implementations to achieve the most 
common tasks. In the next section, let’s explore how to apply these funda-
mentals to TCP communications, eventually using the power vested in you 
to develop real-life, usable tools.
Creating the Echo Server
As is customary for most languages, you’ll start by building an echo server 
to learn how to read and write data to and from a socket. To do this, you’ll 
use net.Conn, Go’s stream-oriented network connection, which we introduced 
when you built a port scanner. Based on Go’s documentation for the data 
type, Conn implements the Read([]byte) and Write([]byte) functions as defined 
for the Reader and Writer interfaces. Therefore, Conn is both a Reader and a 
Writer (yes, this is possible). This makes sense logically, as TCP connections 
are bidirectional and can be used to send (write) or receive (read) data. 
After creating an instance of Conn, you’ll be able to send and receive 
data over a TCP socket. However, a TCP server can’t simply manufacture 
a connection; a client must establish a connection. In Go, you can use 
net.Listen(network, address string) to first open a TCP listener on a specific 
port. Once a client connects, the Accept() method creates and returns a 
Conn object that you can use for receiving and sending data.
Listing 2-11 shows a complete example of a server implementation. 
We’ve included comments inline for clarity. Don’t worry about understand-
ing the code in its entirety, as we’ll break it down momentarily.
package main
import (
    "log"
    "net"
)
前沿信安资讯阵地  公众号：i nf osrc
36   Chapter 2
// echo is a handler function that simply echoes received data.
func echo(conn net.Conn) {
    defer conn.Close()
    // Create a buffer to store received data.
    b := make([]byte, 512)
    u for {
        // Receive data via conn.Read into a buffer.
        size, err := conn.Readv(b[0:])
        if err == io.EOF {
            log.Println("Client disconnected")
            break
        }
        if err != nil {
            log.Println("Unexpected error")
            break
        }
        log.Printf("Received %d bytes: %s\n", size, string(b))
        // Send data via conn.Write.
        log.Println("Writing data")
        if _, err := conn.Writew(b[0:size]); err != nil {
            log.Fatalln("Unable to write data")
        }
    }
}
func main() {
    // Bind to TCP port 20080 on all interfaces.
    x listener, err := net.Listen("tcp", ":20080")
    if err != nil {
        log.Fatalln("Unable to bind to port")
    }
    log.Println("Listening on 0.0.0.0:20080")
    y for {
        // Wait for connection. Create net.Conn on connection established.
        z conn, err := listener.Accept()
        log.Println("Received connection")
        if err != nil {
            log.Fatalln("Unable to accept connection")
        }
        // Handle the connection. Using goroutine for concurrency.
        { go echo(conn)
    }
}
Listing 2-11: A basic echo server (/ch-2/echo-server /main.go)
Listing 2-11 begins by defining a function named echo(net.Conn), which 
accepts a Conn instance as a parameter. It behaves as a connection handler to 
perform all necessary I/O. The function loops indefinitely u, using a buffer 
to read v and write w data from and to the connection. The data is read 
into a variable named b and subsequently written back on the connection. 
前沿信安资讯阵地  公众号：i nf osrc
TCP, Scanners, and Proxies   37
Now you need to set up a listener that will call your handler. As men-
tioned previously, a server can’t manufacture a connection but must instead 
listen for a client to connect. Therefore, a listener, defined as tcp bound 
to port 20080, is started on all interfaces by using the net.Listen(network, 
address string) function x.
Next, an infinite loop y ensures that the server will continue to listen 
for connections even after one has been received. Within this loop, you 
call listener.Accept() z, a function that blocks execution as it awaits client 
connections. When a client connects, this function returns a Conn instance. 
Recall from earlier discussions in this section that Conn is both a Reader and 
a Writer (it implements the Read([]byte) and Write([]byte) interface methods). 
The Conn instance is then passed to the echo(net.Conn) handler func-
tion {. This call is prefaced with the go keyword, making it a concurrent 
call so that other connections don’t block while waiting for the handler 
function to complete. This is likely overkill for such a simple server, but 
we’ve included it again to demonstrate the simplicity of Go’s concurrency 
pattern, in case it wasn’t already clear. At this point, you have two light-
weight threads running concurrently: 
•
The main thread loops back and blocks on listener.Accept() while it 
awaits another connection. 
•
The handler goroutine, whose execution has been transferred to 
the echo(net.Conn) function, proceeds to run, processing the data.
The following shows an example using Telnet as the connecting client:
$ telnet localhost 20080
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
test of the echo server
test of the echo server
The server produces the following standard output:
$ go run main.go 
2020/01/01 06:22:09 Listening on 0.0.0.0:20080
2020/01/01 06:22:14 Received connection
2020/01/01 06:22:18 Received 25 bytes: test of the echo server
2020/01/01 06:22:18 Writing data
Revolutionary, right? A server that repeats back to the client exactly 
what the client sent to the server. What a useful and exciting example! It’s 
quite a time to be alive.
Improving the Code by Creating a Buffered Listener 
The example in Listing 2-11 works perfectly fine but relies on fairly low-level 
function calls, buffer tracking, and iterative reads/writes. This is a some-
what tedious, error-prone process. Fortunately, Go contains other packages 
前沿信安资讯阵地  公众号：i nf osrc
38   Chapter 2
that can simplify this process and reduce the complexity of the code. 
Specifically, the bufio package wraps Reader and Writer to create a buffered 
I/O mechanism. The updated echo(net.Conn) function is detailed here, and 
an explanation of the changes follows:  
func echo(conn net.Conn) {
    defer conn.Close()
    u reader := bufio.NewReader(conn)
    s, err := reader.ReadString('\n')v
    if err != nil {
        log.Fatalln("Unable to read data")
    }
    log.Printf("Read %d bytes: %s", len(s), s)
    log.Println("Writing data")
    w writer := bufio.NewWriter(conn)
    if _, err := writer.WriteString(s)x; err != nil {
        log.Fatalln("Unable to write data")
    }