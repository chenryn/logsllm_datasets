view in the ideal model, we consider two following cases based on whether all parties in C have item x:
12
• All parties in C have x and not all parties in H have x: if H contains only one honest party Pi, then
Pi does not have x. From the output of set intersection, C can deduce that Pi does not have x. Thus,
there is nothing to hide about whether Pi has x in this case.
Consider the case that H has more than one honest party, say Pi and Pj. Suppose Pi has x, while
party Pj does not. So, x does not appear in the intersection. We must show that the protocol must
hide the identity of which honest party is missing x.
In Step 2 of the protocol, there is an OPPRF instance with Pj as sender and Pi as receiver. Pj will not
program the OPPRF at point x, so Pi will receive a pseudorandom output for x that is independent of
the corrupt coalition’s view. This causes Si(x) to be independent of the coalition’s view.
Later in Step 4, if the dealer is corrupt, both Pi and Pj act as OPPRF senders with the dealer. Pi pro-
grams the OPPRF at x using the pseudorandom value Si(x). Pj doesn’t program the OPPRF at point
x. The security of OPPRF is that programming the PRF at x with a random output is indistinguish-
able from not programming at x at all. In other words, parties Pi and Pj have indistinguishable eﬀect
on the conditional reconstruction phase. If dealer is honest, the corrupt coalition’s view is simulated
from Step 2 based on the functionality of OPPRF.
• Not all corrupt parties in C have x: we must show that C should learn nothing about whether any of
the honest parties hold x.
Any honest party Pi who holds x generates corresponding shares si,j, to be conditionally distributed in
Step 2. But some corrupt party does not query the OPPRF on x in step 2. This makes all the si,j shares
corresponding to x distributed uniformly. All honest parties Pj who hold x will therefore have Sj(x)
uniformly distributed of the coalition’s view. In Step 4, the honest parties that hold x will program
the OPPRF on (x, Sj(x)). The honest parties that don’t hold x will not program the OPPRF on point
x. As above, programming the PRF with a random output is indistinguishable from not programming
at that point at all. Hence all honest parties have indistinguishable eﬀect on the reconstruction phase.
Cost and Optimizations. In the conditional sharing phase, each party performs a multi-query OPPRF
with every other party. In the reconstruction phase, each party performs just one multi-query OPPRF with
the leader P1. Recall that the cost of each of these is one instance of single-query OPPRF per Cuckoo-hashing
bin.
The multi-query OPPRF scales well when sender and receiver have diﬀerent number of elements. There-
fore, our multi-party PSI protocol allows each party’s set to have diﬀerent size. The number of OPPRF
instance depends on the number of bins for Cuckoo-hashing, and the OPPRF receiver is the one using
Cuckoo hashing (sender uses plain hashing). Thus, our PSI protocol is more eﬃcient by setting the leader
P1 as the party with the smallest input set.
We note that all of the OPPRF instances in the conditional sharing phase can be done in parallel, and
all the OPPRF instances in the reconstruction phase can as well. This leads to a constant-round protocol.
Finally, recall that the multi-query OPPRF uses Cuckoo hashing. It is safe for all such instances, between
all pairs of parties, to use the same Cuckoo hash functions. That way, a party only needs to hash their input
set twice at the beginning of the protocol (once with Cuckoo hashing for when they are OPPRF receiver,
and once with simple hashing for when they are OPPRF sender).
Generalization. Suppose we wish to secure the protocol against the possibility of at most t corrupt
(colluding) parties. The default case is to consider t = n − 1. For smaller t, we can simplify the protocol.
The idea is to modify the conditional zero-sharing protocol so that party Pi generates shares of zero only
for {Pi+1, . . . , Pi+t+1} (where indices on parties are mod n). The security analysis applies also to this
generalization, based on the fact that if Pi is honest, then at least one of Pi+1, . . . , Pi+t+1 must also be
honest.
13
 i−1(cid:77)
 ⊕
 n(cid:77)
F (ri,j, ind)
Initialization: Each party Pi picks random seeds ri,j for j = i + 1, . . . , n and sends seed ri,j to Pj
Generate zero-sharing: Given an index ind, each Pi computes
Si(ind) =
F (rj,i, ind)
j=1
j=i+1
Figure 9: The zero-sharing protocol
6 Further Optimizations
6.1 PSI in Augmented Semi-Honest Model
In this section we show an optimization to our PSI protocol which results in a protocol secure in the
augmented semi-honest model (cf. Section 2 and Appendix A).
Unconditional zero-sharing. The previous protocol starts with a conditional zero-sharing phase, where
parties obtain shares of zero or shares of a random value, based on whether they share an input item x. In
this section we propose an unconditional zero-sharing technique in which the parties always receive shares
of zero.
n − 1 keys. Then, whenever zero-sharing is needed, party Pi generates a share as Si(ind) =(cid:76)
We describe a method for generating an unlimited number of zero-sharings derived from short seeds that
can be shared in a one-time initialization step. The protocol is described in Figure 9. The protocol is based
on an initialization step where each pair of parties exchange keys for a PRF F , after which each party knows
r F (r, ind),
where ind is an index which identiﬁes this protocol invocation, and r ranges over all the keys shared with
other parties.
We ﬁrst observe that the XOR of all Si(ind) shares is indeed 0, since each term F (ri,j, ind) appears
exactly twice in the expression. As for security, consider a coalition of t  3 parties faces the following diﬃculty: If P1 and Pj collude, they will learn
16
the partial intersection X1 ∩ ··· ∩ Xj. Indeed, as an OPPRF receiver, Pj will receive the set of values which
can be cross-checked with the encodings generated by P1. More generally, colluding players Pi and Pj can
compute partial intersection Xi ∩ ··· ∩ Xj by comparing their encodings.
We note that this is not an issue in 3-PSI, since colluding P1 and P2 can compute X1 ∩ X2 anyway;
colluding P2 and P3 cannot learn any information about the decrypted key e1
i held by P1 thus the corrupted
parties compute X2 ∩ X3 anyway; and colluding P1 and P3 can compute X1 ∩ X2 ∩ X3 which is the desired
PSI output.
With the above optimization, our 3-PSI protocol needs only 3 OPPRF executions, compared to the 4
OPPRF executions for the general protocol described in Section 5. The performance gain of the optimized
protocol is not very strong when the network is slow since parties invoke OPPRF in turn and they have
to wait for the previous OPPRF completed. We implemented both 3-PSI protocol variants and found this
optimized variant to be 1.2 − 1.7× faster.
7
Implementation and Performance
In order to evaluate the performance of our multi-party PSI protocols, we implement many of the variants