9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
check :: Named Instruction -> Checker ()
check instr = case instr of
-- Save the size of the object
name := Call fName args | isAllocation fName -> do
let allocSize = args !! 0
saveSize name allocSize
-- Keep track of dependencies between LHS and RHS
-- variables of arithmatic instructions.
name := _ | isArith instr -> do
operands  do
let addrName = nameOf addr
addrSize  return ()
Figure 3: Simpliﬁed static extension for heap out-of-bounds errors. This
checker looks for index operations (e.g., indexing (pictured) or memset (not
pictured)) that are related to an object’s allocated size.
a control ﬂow graph from LLVM IR and then does a simple
ﬂow-sensitive traversal over it with the user’s extension. Ex-
tensions are written in Haskell, and use a library of built-in
routines to inspect and analyze the control ﬂow graph. If a
checker for a given bug already exists, clients can use that
checker off the shelf.
Sys is subtly different from traditional static checkers, how-
ever. Traditional systems check program rules like “no dead-
locks” by examining source code for buggy patterns like “two
lock calls in a row with no unlock,” and often aim to have a
relatively low false positive rate. In contrast, Sys extensions
should achieve high recall at identifying possible errorsites—
which means that extensions are often crude, leaving serious
reasoning (high precision) to the symbolic checker.
Figure 3 shows the static extension pass that marks the
SQLite bug as a potential error. This extension looks for
memory operations like malloc(x) and index operations like
memset(y) where there is some relationship between x and
y. Intuitively, the reason we look for this construct is that
the dependency gives us enough information to compensate
for unknown state (e.g., we probably won’t know the values
of x and y, but knowing their relationship can be enough to
ﬁnd bugs). The vast majority of these cases are not buggy, of
course, but we’ll use a symbolic checker to determine which
are and which aren’t later.
The extension itself uses Haskell’s matching syntax (case)
to do different actions depending on the IR instruction it is
applied to. The conditional in lines 5-7 matches allocation
calls and stores an association between the object’s name and
its allocated size. Then, the conditional on line 11 matches
on any arithmetic instruction. It keeps track of dependencies
USENIX Association
29th USENIX Security Symposium    201
1
2
3
4
5
6
7
8
9
10
11
12
13
symexCheck :: Name -> Name -> Symex ()
symexCheck arrSize arrInd = do
-- Turn the size into a symbolic bitvector
arrSizeSym <- getName arrSize
-- Turn the index into a symbolic bitvector
let indTy = typeOf arrInd
arrIndSym <- getName arrInd
arrIndSize <- toBytes indTy arrInd
-- Report a bug if the index size can be
-- larger than the allocation size
assert $ isUge byte arrIndSize arrSizeSym
Figure 5: A slightly simpliﬁed version of the heap out-of-bounds checker,
without the symbolic false positive suppression.
are designed to easily and safely encode constraints about
LLVM variables (§3). First, the checker translates its input
variables into their symbolic representations (line 5), and uses
toBytes to change the raw index value into its offset size in
bytes (line 9). Then, it asserts that arrIndSize should be
larger than arrSizeSym—indicating an out-of-bounds access
(line 13). Mechanically, these SysDSL functions add new
constraints to the logical formula, alongside the constraints
Sys automatically adds when symbolically executing the path.
Sys applies this particular checker once it has ﬁnished sym-
bolically executing a path.
Symbolic checkers have control over which code to skip,
where to start executing along the marked possible-error path,
and even which functions to enter or avoid.5 For example,
the checker in Figure 5 runs on each function with a marked
malloc call, and it runs after Sys has ﬁnished symbolically
executing the whole path; other checkers match on speciﬁc
LLVM IR instructions and run at different points along the
path. Users write short conﬁgurations to tell Sys where and
when to run their checkers.
The checker in Figure 5 looks at paths from the start of
functions with marked malloc calls, but it could start either
closer to main or closer to the malloc. The farther away it
starts, the more values it knows, but the higher the cost of
exploration. At one extreme, jumping right to the malloc
call is cheap, but will lack all context before the call. At the
other, starting at main and attempting to reach each site is the
equivalent of traditional symbolic execution.
Unknown state Sys’s approach of jumping over code to the
error site is both its strength and its weakness. By skipping
code, it also skips this code’s constraints and side-effects,
including memory allocation and initializations. Thus, the
struggle is how to (1) make up fake copies of skipped state,
and (2) ensure that missing constraints do not lead to explo-
sions of false positives.
Sys makes up state using lazy allocation, similar to the UC-
KLEE system [115]. If checked code dereferences a symbolic
5The checkers in this paper don’t enter non-inlined function calls, but the
implementation supports both behaviors.
Figure 4: Developers provide the LLVM ﬁles they wish to check
and a checker description in our framework. Their static extensions
mark relevant program points, and their symbolic checkers jump to
these points to symbolically execute in order to ﬁnd bugs.
between variables in these instructions (e.g., y = x + 1
would produce a dependency between x and y). Finally, when
it matches on indexing operations (GetElementPtr on line
17), it marks any path where the index size has a dependency
on the object’s allocated size.
Symbolic The static pass produces potentially buggy paths,
which Sys then feeds to the symbolic pass. This pass aims to
achieve high precision at determining whether or not the bug
actually exists by symbolically reasoning about all possible
values on a given path. It: (1) automatically symbolically
executes the entire path4 and (2) applies the user’s symbolic
checker to the path.
Our tool, like other bit-accurate symbolic tools before
it [47], aims to accurately track memory down to the level
of a single bit—i.e., to assert for sure that a bit must be 0,
must be 1, or may feasibly be either. Sys explores each poten-
tially buggy code path individually, and it can explore a path
either to termination or up to a window size. Each explored
path has its own private copy of all memory locations it has
read or written. As it advances down a path, Sys translates
LLVM IR instructions into constraints, logical formulas that
describe restrictions on values in the path. It also applies a
user-supplied symbolic checker as it advances along the path
(described below). Finally, Sys queries an SMT solver [37]
to ﬁgure out if the path is possible. It receives either UNSAT if
the path’s constraints can never evaluate to true, or SAT if the
path’s constraints can.
The symbolic checker, in Figure 5, uses information that
the static extension marked to ﬁgure out if an out-of-bounds
write is possible. Speciﬁcally, its inputs on line 2 are the object
size variable (arrSize) and index variable (arrInd) from the
static extension. The symbolic checker is built from functions
in Sys’s symbolic DSL—getName, toByes, isUge—which
4The static phase gives the symbolic phase a complete path to execute,
which can be a snippet of a loop or N unrolled iterations of a loop. Sys
transforms the ﬁnal path to single static assignment form to ensure that
variables in loops are handled correctly.
202    29th USENIX Security Symposium
USENIX Association
symbolic execcheckerstatic analysisLLVMparse to CFGextension0,…, M0,…,Nlocation, Sys allocates memory for it and continues. This
approach allows Sys to allocate exactly the locations that a
path needs without any user interaction. However, allowing
the contents of fake objects to be anything can cause false
errors because of impossible paths and values. Sys doesn’t
drown us in false positives for four main reasons:
1. Sys’s constraint solver eliminates all paths with internal
contradictions (e.g., a path that requires a pointer to be both
null and non-null); the only false positives that are left are
due to the external environment (e.g., callers).
2. We use Sys to target speciﬁc errors instead of full func-
tional correctness. As a result, many fake values that could
potentially cause problems do not, since they don’t affect the
checked property in any way. For example, Sys will ﬁnd the
bug in Figure 2 even if the elided code does many different
memory operations, as long as these operations don’t touch
the nColumn ﬁeld.
3. Sys checkers can also account for undeﬁned state in use-
ful ways. For example, the malloc checker looks for out-of-
bounds access in code snippets where there’s a dependency
between an object’s allocation size and its index size. The
dependency gives us important information—the relationship
between an object’s size and the index value—that allows us
to ﬁnd bugs without knowing what the object’s size and index
value actually are.
4. Large groups of false positives usually share a root cause,
and Sys checkers can address that cause with ad hoc, checkers-
speciﬁc tricks. For example, the checker that found the SQLite
bug makes different assumptions about integer inputs com-
pared to object ﬁelds: it assumes that integer inputs can be
anything, while object ﬁelds have been vetted, and so must
not be massive (§5.2). This one change eliminated many false
positives.
Next, we discuss design decisions (§3–§4) and results (§5).
3 SysDSL design
Our goal was to build a symbolic checking system that was
not just accurate, but also ﬂexible enough to express check-
ers that could ﬁnd bugs in huge codebases. Everything from
prototyping checkers to hacking on the core system to sup-
pressing false positives with ad hoc information—like the
massive-value suppression in the previous section—had to be
easy and fast. To that end, we aimed for a system that was:
1. Domain speciﬁc: at the highest level, the system should
make bug ﬁnding easy. There should be direct, high-level
ways to express both symbolic checks (e.g., “is x uninitial-
ized”) and ad hoc information (e.g., “all size arguments to
malloc are greater than zero.”). On the one hand, users should
not have to annotate the code that they’re checking; on the
other, they should not have to hack directly on the solver’s
internal representation of constraints. Even turning an LLVM
variable into a solver’s internal representation—a ﬁxed-width
vector of bits called a bitvector—is complicated: if the vari-
able is a struct, is it padded, and if so, how much padding
goes between each element?
2. Expressive: we can’t anticipate all the extensions and
checkers that Sys clients may want, so our challenge is to en-
sure that they can express any checkable property or take ad-
vantage of any latent program fact. We arrived at two rules for
ensuring that clients of extensible systems can express things
that their designers did not anticipate. First, to make sure that
clients can express anything computable, they must be able to
write Turing-complete code. Second, to make sure that their
interface to the system internals—in this case, the static exten-
sion and symbolic checkers’ interface to Sys internals—is suf-
ﬁciently powerful, core components of the system itself must
be built atop the same interface. In contrast, many checking
systems have a special, internal interface that built-in checkers
use, and a bolted-on, external interface for “extensions.” In-
variably, the extension interface lacks power that the internal
interface has.
3. Simple: it should be possible to iterate quickly not only
on checkers but also on components of the core system—and
changing 6,000 lines of code is easier than changing 60,000.
This is especially important for symbolic checking tools be-
cause they are inherently complex, built from tightly-coupled,
large subsystems, and often operate in feedback loops where
each symbolic bit is the child of thousands of low-level deci-
sions. A mistake in a single bit can cause an explosion of false
reports that are hard to understand and hard to ﬁx; mistakes
that lead to false negatives are hard to ﬁnd at all.
4. (Type) Safe: debugging symbolic execution errors can be
nightmarish, since ﬁfty constraints can deﬁne a single variable
that has a single incorrect bit. We want a system that makes it
as easy as possible to get constraints right, and types can help
us avoid malformed constraints early.
In the rest of this section, we quickly describe the design of
the static extension system. Then, we describe the challenges
of building symbolic checkers, and how SysDSL addresses
those challenges by fulﬁlling our design principles.
3.1 Static extensions
Building extensible static checking systems is already the
focus of signiﬁcant work in both academia and industry [27,
39, 60, 62, 65, 70, 84, 87, 122]. Since the details of our static
extension system are relatively standard, we only discuss
one idiosyncrasy of Sys’s static system here: Sys does both
its static and symbolic passes on LLVM IR (or bytecode).
Typically, static tools want to check the highest-level—most
semantics-preserving—representation possible, because the
more information they have, the easier it is to ﬁnd errors and
suppress false positives. For example, running checkers for the
C language after the preprocessor can cause challenges, since
checkers don’t know that, say, 127 is actually MAXBUF or that a
strange chunk of code is actually a macro. Running checkers
on bytecode is even more suboptimal in some ways, but we do
USENIX Association
29th USENIX Security Symposium    203
it because: (1) it makes communication between the static and
symbolic passes simple; (2) we can check any language that
emits LLVM IR; (3) it lets us “see inside” complicated C++
code for free; and (4) it allows our checkers to comprehend
and take advantage of compiler optimizations (§6).
3.2 Specifying symbolic constraints is hard
Users generate their own constraints differently depending on
which symex system they use: some systems require language-
level annotations, while others have users hack almost directly
on SMT constraints. We decided to build SysDSL because of
our experience building and using both kinds of tools, which
we describe below.
KLEE users express invariants by providing C annota-
tions like “a Bignum’s negative ﬁeld must be either one or
zero.” According to the main UC-KLEE implementer, David
Ramos, naively written annotations would cause KLEE to spin
forever—in effect, the annotations would generate LLVM IR
that was adversarial to the tool. To write useful annotations,
users needed to understand what LLVM IR the C compiler
would generate, and understand whether or not that IR was