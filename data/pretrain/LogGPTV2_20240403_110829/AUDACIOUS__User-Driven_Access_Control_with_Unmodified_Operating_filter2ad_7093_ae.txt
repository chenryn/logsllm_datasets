end of UI rendering for each toggle action for maximum
frequencies ranging from 400 milliseconds to 4000 millisec-
onds. Note that these frequencies are maxima: At 400 mil-
liseconds, the random check occurs at a frequency randomly
distributed between 0 milliseconds and 400 milliseconds (on
average, 200 milliseconds). We compare this to a control
version of Solar Compass with random checks disabled. We
compare the results in Figure 7.
Overall, we ﬁnd that the checks are only harmful to UI
performance when they occur at the same time as user in-
teraction. This causes a delay in processing the event and
rendering the UI. This happens more often for small frequen-
cies, which results in a larger variance of event times and a
larger mean. This becomes less likely as the frequency in-
creases, leading to better performance for larger frequencies.
6.4 Event Forgery in Real Applications
Applications sometimes create or modify events or clicks
for the sake of UI customization or upscaling. We run our
event analysis on the top 100 free applications in the Android
application store to determine how often this happens.
In total, our analysis ﬁnds 1060 errors across 88 of the top
100 applications (10.6 on average). Of these, 218 are from
advertisement libraries or their dependencies. Most errors
in these libraries appear related to unskippable video adver-
tisements and interstitial advertisements which may violate
user expectations. These errors require manual inspection.
We expect non-free applications to have fewer instances of
event and click forgery due to the lack of advertisements.
7. RELATED WORK
Prior work documents the shortcoming of permission mod-
els, particularly for Android [4, 8, 23, 30]. Our work builds
on the notions of user-driven access control and ACGs, in-
troduced by those names by Roesner et al. [23] but more
generally dating back to concepts like the powerbox [16, 26]
for secure ﬁle picking. ACGs for Android are supported by
LayerCake [22], requiring signiﬁcant modiﬁcations to An-
droid. In contrast, AUDACIOUS securely supports ACGs
for unmodiﬁed OSes.
Overhaul [17], like AUDACIOUS, addresses the diﬃculty
of deploying user-driven access control and implements a
variant into existing OSes retroactively. Other works ex-
plore ideas similar to user-driven access control, including
Gyrus [31], AppIntent [33], and the EROS Trusted Window
System [25].
Felt et al. [7] argue that secure UIs should be combined
with other permission granting approaches depending on the
permission type. In that spirit, by combining ACGs with
)
s
m
(
n
o
i
t
a
r
u
D
t
n
e
v
E
700
600
500
400
300
0
Random Checks
No Random Checks
800
1,600
2,400
3,200
4,000
Maximum Random Check Frequency (ms)
Figure 7: UI performance of Solar Compass. At
400 milliseconds, checks and events coincide so fre-
quently that performance is signiﬁcantly impaired.
At 4000 milliseconds, checks and events rarely coin-
cide, so there is minimal impact on performance.
information ﬂow, AUDACIOUS supports both user-driven
access control and install-time manifests for ﬂows that are
not well-suited for ACGs in a particular app’s context.
Recent work addresses unwanted resource ﬂow in Android.
SPARTA [5], which AUDACIOUS leverages, statically ver-
iﬁes that applications use only those information ﬂows de-
clared by the developer in a policy ﬁle. TaintDroid [4] dy-
namically tracks information ﬂows in Android. AppFence [9]
utilizes TaintDroid to introduce privacy controls that allow
users to withhold data from applications and prohibit select
resources from ﬂowing to the network. These tools provide
no guarantees that applications access the correct resources
at the correct times based on user interaction.
ClickRelease [15] uses symbolic execution to verify policies
that constrain the usage of resources based on user interac-
tion with the application. Rubin et al. [24] statically detect
covert communication in Android applications. Unlike AU-
DACIOUS, these works do not enforce any guarantees on
the appearance of the UI at the time of user interaction.
AsDroid [11] detects stealthy resource access by using pro-
gram and text analysis to determine whether program be-
havior matches the user’s expectations. Though similar in
spirit, AsDroid handles only a subset of the issues AUDA-
CIOUS does. Our techniques to handle dynamic UIs and
programmatic clicks could be applied to improve AsDroid.
Jekyll on iOS [28] details attacks that pass application
approval, but introduce illegal information ﬂows after in-
stallation. These attacks rely on violations of memory and
type safety (buﬀer overﬂows and incorrect type casts) for
which we are unaware of attacks in Java’s managed environ-
ment. As AUDACIOUS does not support native code, these
attacks are not relevant to AUDACIOUS.
Other relevant works include SUPOR [10], which stati-
cally detects leakage of sensitive user inputs; AutoCog [21]
and WHYPER [19], which assess permission-to-description
ﬁdelity; and Quire [3], which dynamically provides prove-
nance for on-device IPCs. Many other works have also used
program analysis to detect malicious behaviors in Android
applications (e.g., [29, 32, 34]).
8. CONCLUSIONS AND FUTURE WORK
Previous work on user-driven access control relies on ma-
jor OS modiﬁcations. This is a barrier to its deployability.
We design a system for user-driven access control without
modifying the OS. Our design combines a secure library with
program analysis to ensure that applications use ACGs cor-
rectly. Our approach enables applications to combine user-
driven access control with other access control models. We
demonstrate that this approach can handle most classes of
attacks with no OS support. Still, we ﬁnd that limited OS
support is particularly beneﬁcial in preventing some attacks.
We implement our design in Android and integrate it with
existing applications. In doing so, we identify techniques to
minimize the analysis burden for developers as well as design
considerations for future libraries. Our evaluation shows
that many applications already use ACG-like UI elements,
and that for those applications, integrating the library ac-
tually decreases code size. Furthermore, even the simplest
applications beneﬁt from ﬂexible permission models.
Future Work. Future work may assess acceptability of
a UI transformation statically; this would beneﬁt existing
works that rely on manual image comparison [9, 24]. A large-
scale evaluation of the ways in which applications interact
with resource APIs and ACG-like UI elements may better
inform future design decisions. In future design, rather than
rely on a secure library, we may provide developers with the
option to mark existing UI elements and verify their behav-
iors. Future work applying our design to desktop OSes may
need to consider that random checks are insuﬃcient for some
attacks involving mouse pointers [12]. A future implemen-
tation may repurpose FlowTwist [14], a static taint analysis
for Java, as an alternate to the conservative event analy-
sis; the primary barrier is in getting it to work with recent
Android APIs. A future implementation may extend ACGs
and the event analysis to cover accessibility and voice inter-
actions; the use of Fragments makes this possible with few
changes. Finally, we leave securely relaxing the restrictions
AUDACIOUS places on ACG UIs to future work.
9. ACKNOWLEDGEMENTS
We thank Michael Ernst and Suzanne Millstein for help in-
tegrating SPARTA into AUDACIOUS. We thank Julia Ru-
bin, Kris Micinski, and Zach Tatlock for the stimulating
discussions about acceptable UI transformations. We thank
all of the students in the UW PLSE and Security labs who
provided feedback on early revisions.
References
[1] Android.
http://developer.android.com/
about/dashboards/index.html, 2016. Accessed: 2016-05-03.
[2] P. Barros, R. Just, S. Millstein, P. Vines, W. Dietl,
M. d’Amorim, and M. D. Ernst. Static analysis of implicit
Dashboards.
control ﬂow: Resolving Java reﬂection and Android intents.
In 30th International Conference on Automated Software
Engineering, 2015.
[3] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach.
Quire: Lightweight provenance for smart phone operating
systems. In 20th USENIX Conference on Security, 2011.
[4] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. N. Sheth. Taintdroid: An information-ﬂow
tracking system for realtime privacy monitoring on smart-
phones. In 9th USENIX Conference on Operating Systems
Design and Implementation, 2010.
[5] M. D. Ernst, R. Just, S. Millstein, W. Dietl, S. Pernsteiner,
F. Roesner, K. Koscher, P. B. Barros, R. Bhoraskar, S. Han,
P. Vines, and E. X. Wu. Collaborative veriﬁcation of infor-
mation ﬂow for a high-assurance app store. In ACM Con-
ference on Computer and Communications Security, 2014.
[6] Federal Trade Commission. Android ﬂashlight app devel-
oper settles FTC charges it deceived consumers, Dec. 2013.
https://www.ftc.gov/news-events/press-releases/2013/12/
android-ﬂashlight-app-developer-settles-ftc-charges-it-deceived.
[7] A. P. Felt, S. Egelman, M. Finifter, D. Akhawe, and D. Wag-
ner. How to ask for permission. In 7th USENIX Workshop
on Hot Topics in Security, 2012.
[8] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and
D. Wagner. Android Permissions: User Attentions, Com-
prehension, and Behavior. In Symposium on Usable Privacy
and Security, 2012.
[9] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wether-
all. “These aren’t the droids you’re looking for:” retroﬁtting
Android to protect data from imperious applications.
In
ACM Conference on Computer and Communications Secu-
rity, 2011.
[10] J. Huang, Z. Li, X. Xiao, Z. Wu, K. Lu, X. Zhang, and
G. Jiang. Supor: Precise and scalable sensitive user input
detection for Android apps. In 24th USENIX Security Sym-
posium, 2015.
[11] J. Huang, X. Zhang, L. Tan, P. Wang, and B. Liang. Asdroid:
Detecting stealthy behaviors in android applications by user
interface and program behavior contradiction. In 36th Inter-
national Conference on Software Engineering, 2014.
[12] L.-S. Huang, A. Moshchuk, H. J. Wang, S. Schecter, and
In 21st
C. Jackson. Clickjacking: Attacks and defenses.
USENIX Security Symposium, 2012.
[13] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and
M. Peter. L4android: A generic operating system framework
for secure smartphones. In ACM Workshop on Security and
Privacy in Smartphones and Mobile Devices, 2011.
[14] J. Lerch, B. Hermann, E. Bodden, and M. Mezini. Flowtwist:
Eﬃcient context-sensitive inside-out taint analysis for large
codebases. In 22nd ACM SIGSOFT International Sympo-
sium on Foundations of Software Engineering, 2014.
[15] K. K. Micinski, J. Fetter-Degges, J. Jeon, J. S. Foster, and
M. R. Clarkson. Checking interaction-based declassiﬁca-
tion policies for android using symbolic execution. CoRR,
abs/1504.03711, 2015.
[16] M. S. Miller. Robust Composition: Towards a Uniﬁed Ap-
proach to Access Control and Concurrency Control. PhD
thesis, Johns Hopkins Univ., Baltimore, MD, USA, 2006.
[17] K. Onarlioglu, W. Robertson, and E. Kirda. Overhaul:
Input-Driven Access Control for Better Privacy on Tradi-
tional Operating Systems. In IEEE/IFIP International Con-
ference on Dependable Systems and Networks (DSN), 2016.
[18] Panda Security. Tapjacking - when the danger camou-
ﬂages itself on google play. http://www.pandasecurity.com/
mediacenter/tips/13973/, 2015.
[19] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie. Why-
per: Towards automating risk assessment of mobile applica-
tions. In 22nd USENIX Conference on Security, 2013.
[20] Y. Qiu. Tapjacking: An untapped threat in android. http:
//blog.trendmicro.com/trendlabs-security-intelligence/
tapjacking-an-untapped-threat-in-android/, 2012.
[21] Z. Qu, V. Rastogi, X. Zhang, Y. Chen, T. Zhu, and Z. Chen.
Autocog: Measuring the description-to-permission ﬁdelity in
android applications. In ACM Conference on Computer and
Communications Security, 2014.
[22] F. Roesner and T. Kohno. Securing Embedded User In-
terfaces: Android and Beyond. In 22nd USENIX Security
Symposium, 2013.
[23] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang,
and C. Cowan. User-driven access control: Rethinking per-
mission granting in modern operating systems.
In IEEE
Symposium on Security and Privacy, 2012.
[24] J. Rubin, M. I. Gordon, N. Nguyen, and M. Rinard. Covert
communication in mobile applications (t).
In Proceedings
of the 2015 30th IEEE/ACM International Conference on
Automated Software Engineering (ASE), 2015.
[25] J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chiz-
In
madia. Design of the EROS Trusted Window System.
USENIX Security Symposium, 2004.
[26] M. Stiegler, A. H. Karp, K.-P. Yee, T. Close, and M. S.
Miller. Polaris: Virus-Safe Computing for Windows XP.
Communications of the ACM, 49:83–88, Sept. 2006.
[27] H. J. Wang, A. Moshchuk, and A. Bush. Convergence of
Desktop and Web Applications on a Multi-Service OS. In
USENIX Workshop on Hot Topics in Security, 2009.
[28] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee. Jekyll on
ios: When benign apps become evil. In 22nd USENIX Con-
ference on Security, 2013.
[29] F. Wei, S. Roy, X. Ou, and Robby. Amandroid: A precise
and general inter-component data ﬂow analysis framework
for security vetting of android apps. In ACM Conference on
Computer and Communications Security, 2014.
[30] P. Wijesekera, A. Baokar, A. Hosseini, S. Egelman, D. Wag-
ner, and K. Beznosov. Android permissions remystiﬁed: A
ﬁeld study on contextual integrity. In 24th USENIX Security
Symposium, 2015.
[31] J. Yang, S. P. Chung, B. D. Payne, and W. Lee. Gyrus:
A framework for user-intent monitoring of text-based net-
worked applications. In NDSS Symposium, 2014.
[32] W. Yang, X. Xiao, B. Andow, S. Li, T. Xie, and W. Enck.
Appcontext: Diﬀerentiating malicious and benign mobile
app behaviors using context.
In 37th International Con-
ference on Software Engineering, 2015.
[33] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S.
Wang. Appintent: Analyzing sensitive data transmission in
android for privacy leakage detection. In ACM Conference
on Computer and Communications Security, 2013.
[34] M. Zhang, Y. Duan, H. Yin, and Z. Zhao. Semantics-aware
android malware classiﬁcation using weighted contextual api
dependency graphs. In ACM Conference on Computer and
Communications Security, 2014.
[35] Y. Zhou and X. Jiang. Dissecting android malware: Char-
acterization and evolution. In IEEE Symposium on Security
and Privacy, 2012.