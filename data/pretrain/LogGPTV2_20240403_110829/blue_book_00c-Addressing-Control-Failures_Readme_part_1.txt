## IMPORTANT: DevOps Kit (AzSK) is being sunset by end of FY21. More details [here](../ReleaseNotes/AzSKSunsetNotice.md)
----------------------------------------------
> The Secure DevOps Kit for Azure (AzSK) was created by the Core Services Engineering & Operations (CSEO) division at Microsoft, to help accelerate Microsoft IT's adoption of Azure. We have shared AzSK and its documentation with the community to provide guidance for rapidly scanning, deploying and operationalizing cloud resources, across the different stages of DevOps, while maintaining controls on security and governance.
AzSK is not an official Microsoft product â€“ rather an attempt to share Microsoft CSEO's best practices with the community..
# Addressing Control Failures
### Contents
### [Introduction](Readme.md#introduction)
### [Automatically Generating Fixes](Readme.md#automatically-generating-fixes)
- [Overview](Readme.md#overview)  
- [How to generate fix script?](Readme.md#how-to-generate-fix-script)  
- [Understand 'FixControlScripts' folder](Readme.md#understand-fixcontrolscripts-folder)
- [How to run fix script generated by AzSK?](Readme.md#how-to-run-fix-script-generated-by-azsk)  
- [Repair-AzSKSubscriptionSecurity](Readme.md#repair-azsksubscriptionsecurity)  
- [Repair-AzSKAzureServicesSecurity](Readme.md#repair-azskazureservicessecurity)  
### [Control Attestation](Readme.md#control-attestation-1)
- [Overview](Readme.md#overview-1)  
- [Starting attestation](Readme.md#starting-attestation)  
- [How AzSK determines the effective control result](Readme.md#how-azsk-determines-the-effective-control-result)  
- [Permissions required for attesting controls](Readme.md#permissions-required-for-attesting-controls) 
- [Attestation expiry](Readme.md#attestation-expiry) 
- [Bulk attestation](Readme.md#bulk-attestation)  
### [FAQs](Readme.md#faqs)
----------------------------------------------------------------
# Introduction
This section assumes that you have used the basic subscription and resource security scan commands from 
the Getting Started document. It focuses on what you can do next after you have run the scans. 
Recall that, once a manual scan completes, the CSV file in the output folder that is (auto-) opened 
provides a consolidated security report for all the resources that were evaluated in the scan. 
To actually improve the security of your application, you now need to look at each control's evaluation
details in the AzSK scan results and understand what actions you need to take. 
There are **2 important components** in the scan results that can help:
  a) The control summary in the CSV file and
  b) The detailed evaluation info in the LOG file.
For each control that was evaluated for a specific resource, the control summary line from the CSV file 
provides information such as the control id, overall control status (result), control description, 
recommended fix and other control-related info.
For controls other than a result of 'Passed' you will typically need to take some action. For this, apart
from the 'Recommendation' field, additional control evaluation info present in the LOG file should be used.
This can ensure that you take the right next steps for a control in the context of the specific resource. 
For example, if you are getting a 'Failed' for an RBAC related control, the LOG file is where you will have
additional details such as which accounts were found that caused AzSK to flag a failure.
You can use the 'DetailedLogFile' field to locate the LOG file where control evaluation info for each control 
is written by AzSK. (This file can be different for different resources/resource groups.) 
See the image below:
 ![CSV File](../Images/00_ACF_Basics_CSV.PNG) 
For some controls, AzSK can automatically generate scripts that can be run to address the control failures.
This can be done using the '-GenerateFixScript' flag in the scan commands. Whether AzSK has support for
auto-generating the fix script for a control is represented by the 'SupportsAutoFix' column for that control.
Also, sometimes, you will need to complement or override AzSK's control evaluation result with additional 
contextual knowledge. This is called 'Control Attestation' and is supported by the '-ControlsToAttest' flag in the scan commands. 
The rest of this section explains these two capabilities in detail.
# Automatically Generating Fixes
### Overview
For several security controls, the fix required to remediate a control failure is automatable. The AzSK supports this scenario through the 'FixControls' feature. 
For the controls where this feature is available, AzSK has the ability to generate a 'control fix' script that the user can review and run to apply the fixes. For many controls, fix automation is not feasible because the workflow involved in fixing a control may be complex. As a result, this feature may not be available/applicable for all controls. 
The overall sequence when using this feature is as follows:
1. A user runs one of the AzSK scan scripts with a flag requesting the AzSK to generate a 'control fix' script.
2. Once the scan completes, the user can review the control fix script. 
3. The user can update a parameters file to provide input values for the fix script. This is required for controls where the fix/remediation requires input params to be supplied by the user (e.g., IP addresses, user alias, etc.)
4. The user runs the script to remediate the relevant controls
5. (Optionally) The user can rerun the scan to confirm that the target controls were indeed remediated.    
[Back to top...](Readme.md#contents)
### How to generate fix script?
The script to automatically implement the recommendation for a control can be generated by passing the *'GenerateFixScript'* switch to the following SVT commands:
```PowerShell
	Get-AzSKAzureServicesSecurityStatus
	Get-AzSKSubscriptionSecurityStatus
	Get-AzSKControlsStatus
```
Upon completion of command execution, a folder 'FixControlScripts' will be created in output folder (only if one or more of the failed controls support automated fixing). 
> Note: This folder contains multiple files which are described in a README.txt file in the same folder.
Run the script 'RunFixScript.ps1' from folder 'FixControlScripts'.  
[Back to top...](Readme.md#contents)
### Understand 'FixControlScripts' folder
This section describes how to interpret the different files created when AzSK cmdlets are executed with 'GenerateFixScript' parameter.
To implement the recommendations for controls,  
1. The user can review the PowerShell files under 'Services' folder.  
2. The user can update a parameters file (FixControlConfig.json) to provide input values for the fix script. This is required for controls where the fix/remediation requires input params to be supplied by the user (e.g., IP addresses, user alias, etc.).  
3. The user runs the script (RunFixScript.ps1) to remediate the relevant controls.  
4. (Optionally) The user can rerun the scan to confirm that the target controls were indeed remediated.  
The contents of the 'FixControlScripts' folder are organized as under:  
- *\RunFixScript.ps1* - The file which starts implementing the recommendations. The file typically contains repair command which uses the files from current folder.  
- *\FixControlConfig.json* - The file contains the configuration of controls along with mandatory/optional parameters which are required for implementing the fix for control.  
- *\Services* - The folder contains the PowerShell files which are used to implement the fix for control.  
	- *\\\.ps1* - The file contains PowerShell code to implement the fix for control. The file can be referred for review.  
- *\FixControlConfig-\.json* - This file is generated when repair command is run. The file contains the input values provided by user while running the repair command. The file can be referred for review.
[Back to top...](Readme.md#contents)
### How to run fix script generated by AzSK?
The recommendation for a control can be implemented automatically by using following commands:
```PowerShell
	Repair-AzSKAzureServicesSecurity
	Repair-AzSKSubscriptionSecurity 
```
These commands use the 'FixControlConfig.JSON' file from the 'FixControlScripts' folder for the set of controls to auto-remediate. They are described further below:  
### Repair-AzSKSubscriptionSecurity
This command remediates the subscription security related controls using the automated fixing scripts generated by running the corresponding AzSK scan command with the '-GenerateFixScript' flag.
|Parameter|Name|Description|
|----|----|----|
|ParameterFilePath |Full file path to 'FixControlConfig.json' (by default generated in sub-folder 'FixControlScripts' of the AzSK scan command output folder).|Mandatory|
|ControlIds|List of control ids for which fixes should be applied.|Optional|
|Force|Switch to bypass user consent of modifying Azure resources|Optional|  
For example,
```PowerShell
Repair-AzSKSubscriptionSecurity -ParameterFilePath 
```
### Repair-AzSKAzureServicesSecurity 
This command remediates security controls for various Azure resources using the automated fixing scripts generated by running the corresponding AzSK scan command with the '-GenerateFixScript' flag.
|Parameter|Name|Description|
|----|----|----|
|ParameterFilePath |Full file path of  'FixControlConfig.json' (by default generated in sub-folder 'FixControlScripts' of the AzSK scan command output folder). |Mandatory |
|ResourceGroupNames	|List of resource groups for which fixes should be applied. |Optional |
|ResourceTypes |List of resource types for which fixes should be applied. E.g., Microsoft.Sql/servers. |Optional |
|ResourceTypeNames |List of resource type names for which fixes should be applied. E.g., SQLDatabase. |Optional |
|ResourceNames |List of resources for which fixes should be applied. |Optional |
|ControlIds |List of control ids for which fixes should be applied. |Optional |
|Force |Switch to bypass user consent prompts when modifying Azure resources |Optional |
For example,
```PowerShell
Repair-AzSKAzureServicesSecurity -ParameterFilePath 
```
[Back to top...](Readme.md#contents)
# Control Attestation
> **Note**: Please use utmost discretion when attesting controls. In particular, when choosing to not fix a failing control, you are taking accountability that nothing will go wrong even though security is not correctly/fully configured. 
> Also, please ensure that you provide an apt justification for each attested control to capture the rationale behind your decision.  
### Overview
The attestation feature empowers users to support scenarios where human input is required to augment or override the default control 
evaluation status from the AzSK. These may be situations such as:
- the AzSK has generated the list of 'Owners' or 'Contributors' for a resource but someone needs to have a look at the list and ratify that 
these are indeed the correct people, or
- the AzSK has marked a control as failed. However, given the additional contextual knowledge, the application owner wants to ignore the control failure, or
- the AzSK has marked a control as failed and the issue is a valid security concern. However, due to other constraints, 
the application owner wants to defer the fix for later and request a risk ack.
In all such situations, there is usually a control result that is based on the technical evaluation (e.g., Verify, Failed, etc.) that has to 
be combined with the user's input in order to determine the overall or effective control result. The user is said to have 'attested' such controls 
and, after the process is performed once, AzSK remembers it and generates an effective control result for subsequent control scans _until_ there 
is a state change.
The attestation feature is implemented via a new switch called *ControlsToAttest* which can be specified in any of the standard security scan cmdlets
of the AzSK. When this switch is specified, the AzSK first performs a scan of the target resource(s) like it is business as usual and, once
the scan is complete, it enters a special interactive 'attest mode' where it walks through each resource and relevant attestable controls
and captures inputs from the user and records them in the subscription (along with details about the person who attested, the time, etc.). 
After this, for all future scans on the resource(s), AzSK will show the effective control evaluation results. Various options are provided to support
different attestation scenarios (e.g., expiry of attestations, edit/change/delete previous attestations, attest only a subset of controls, etc.). 
These are described below. Also, for 'stateful' controls (e.g., "are these the right IP addresses to permit on the firewall?"), the attestation
state is auto-reset if there is any change in 'state' (e.g., someone added a new IP to the list).
Lastly, due to the governance implications, the ability to attest controls is available to a subset of subscription users. This is described in
the permissions required section below.  
[Back to top...](Readme.md#contents)
### Starting attestation
The AzSK subscription and services scan cmdlets now support a new switch called *ControlsToAttest*. When this switch is specified, 
AzSK enters 'attest' mode immediately after a scan is completed. This ensures that attestation is done on the basis of the most current
control statuses.
All controls that have a technical evaluation status of anything other than 'Passed' (i.e., 'Verify' or 'Failed' or 'Manual' or 'Error') are considered 
valid targets for attestation.
> **Note**: Some controls are very crucial from security stand point and hence AzSK does not support attesting them.
To manage attestation flow effectively, 4 options are provided for the *ControlsToAttest* switch to specify which subset of controls to target for attestation. These are described below:
|Attestation Option|Description|
|------------------|-----------|
|NotAttested|Attest only those controls which have not been attested yet.|
|AlreadyAttested|Attest those controls which have past attestations. To re-attest or clear attestation.|
|All|Attest all controls which can be attested (including those that have past attestations).|
|None|N/A.|
For example, to attest controls corresponding to a subscription security scan, run the command below:
```PowerShell  
$subscriptionId = 
Get-AzSKSubscriptionSecurityStatus -SubscriptionId $subscriptionId -ControlsToAttest NotAttested -DoNotOpenOutputFolder  
``` 
As shown in the images, the command enters 'attest' mode after completing a scan and does the following:
1. For each resource that was scanned, if a control is a target for attestation, control details (such as description, severity, etc.) and the current evaluation result are displayed (to help the user)
2. The user gets to choose whether they want to attest the control
3. If the user chooses to attest, attestation details (attest status, justification, etc.) are captured
4. This is repeated for all attestable controls and each resource.
5. After attestation workflow is completed, another scan is triggered for controls attested within the last 24 hrs so that the backend will get the latest control status.
 Sample attestation workflow in progress:
 ![02_SVT_Attest_1](../Images/02_SVT_Attest_1.PNG) 