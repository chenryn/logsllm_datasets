GoBypassAV
整理理了了基于Go的16种API免杀测试、8种加密测试、反沙盒测试、编译混淆、加壳、资源修改等免
杀技术，并搜集汇总了了⼀一些资料料和⼯工具。
免杀专题⽂文章及⼯工具：https://github.com/TideSec/BypassAntiVirus
免杀专题在线⽂文库：http://wiki.tidesec.com/docs/bypassav
本⽂文涉及的所有代码和资料料：https://github.com/TideSec/GoBypassAV/
0x01 基于Go的免杀
Go语⾔言是⾕谷歌2009发布的第⼆二款开源编程语⾔言，Go语⾔言专⻔门针对多处理理器器系统应⽤用程序的编程进
⾏行行了了优化，使⽤用Go编译的程序可以媲美C或C++代码的速度，⽽而且更更加安全、⽀支持并⾏行行进程。
基于Go的各种免杀也就是使⽤用不不同的windows API为shellcode申请⼀一段内存，然后把指令寄存器器
指向shellcode的开头，让机器器执⾏行行这段shellcode。除此之外，再加上⼀一些其他⽅方式，也可以有效
的提⾼高免杀效果。
本⽂文就这些常⽤用免杀⽅方式进⾏行行总结汇总。
0x02 使⽤用不不同API
在本系列列上⼀一篇⽂文章 《76.远控免杀专题(76)-基于Go的各种API免杀测试》 中，已经对常⻅见的 16
种API免杀 效果进⾏行行了了测试，⼤大家可以浏览参考。
测试使⽤用的平台为VT平台： https://virustotal.com/
0x03 反沙盒检测
在本系列列的第75篇⽂文章 《75.远控免杀专题(75)-基于Go的沙箱检测》 中，对常⻅见的8种沙盒检测
⽅方式进⾏行行了了总结。
具体沙盒检测代码在这⾥里里： https://github.com/TideSec/GoBypassAV/tree/main/SandBox
测试结果为如下。
未使⽤用沙箱检测技术的，VT查杀结果为：10/71
使⽤用了了沙箱检测技术的，VT查杀结果为：8/70
这些都属于⽐比较常规、简单且已经公开的⽅方式，所以差别不不是很⼤大，沙盒基本都能反反检测了了。
0x04 Go编译对免杀的影响
在使⽤用Go进⾏行行免杀的时候， go build 的编译选项也对免杀效果有较⼤大影响。
在编译时，常⽤用的编译命令为 go build -ldflags="-s -w -H=windowsgui"
测试使⽤用的平台为VT平台： https://virustotal.com/ ，使⽤用的是专题76中的 HelloTide 代
码。
L. 直接使⽤用 go build ，VT免杀率7/70，免杀效果最好的，但⽂文件相对⽐比较⼤大，⼀一
个 helloworld 都能1.8M。
N. -ldflags="-s -w" 参数：VT免杀率7/70，主要是减⼩小⽂文件⼤大⼩小， helloworld 能缩减到
1.2M，没有增强免杀效果。
O. -ldflags="-H=windowsgui" 参数：VT免杀率13/70，主要是隐藏窗⼝口，但会降低免杀效
果，VT查杀增加4。
Q. -race 参数：VT免杀率20/70，在2021年年的时候这个参数效果很好，但现在已经不不能⽤用了了，
正常的 helloworld 加上这个参数后VT平台直接16个报病毒。
所以⽐比较推荐的编译命令为 go build -ldflags="-s -w" ，但是这样就会有⿊黑窗⼝口，后⾯面会说如
何解决⿊黑窗⼝口的隐藏问题。
0x05 加壳混淆
对程序进⾏行行加壳或者混淆也是常⽤用的免杀⽅方式，本系列列⽂文章之前也介绍过⼀一些加壳软件，⽐比如upx
加壳之类的，这⾥里里对⽐比⼀一下对Go程序进⾏行行UPX加壳的免杀效果。
还是使⽤用上⾯面 go build ，VT免杀率7/70的程序进⾏行行加壳对⽐比。
5.1 upx加壳
使⽤用最优加壳 upx --best 00-HelloTide.exe -o upx-hello.exe
加壳后⼤大⼩小从1.8M降为1.08M，但是VT免杀率降到了了13/70。
5.2 shielden加壳
使⽤用 safengine shielden 加壳2.4.0.0 软件进⾏行行加壳，加壳后⽂文件居然变⼤大到了了2.5M，VT免杀
率居然降到了了33/70，可以直接放弃这个了了。
5.3 VMProtect加壳
使⽤用 VMProtect Ultimate 3.4.0  进⾏行行加壳，加壳后⽂文件居然6.3M，VT免杀率居然降到了了
19/70。⽂文件那么⼤大，免杀效果也⼀一般，也可以放弃了了。
5.4 garble代码混淆
使⽤用 garble 可对Go程序进⾏行行编译混淆，起到⼀一定的免杀作⽤用。 项⽬目地
址： https://github.com/burrowers/garble
在项⽬目中直接使⽤用 garble.exe build ，即可编译，编译⽂文件变⼩小为1.2M。
额，结果略略尴尬。
使⽤用两个参数 garble.exe -literals -seed=random build ，再次测试，还是略略尴尬。
0x06 对shellcode加密
在免杀中对payload进⾏行行先解密，然后运⾏行行时再解密，从⽽而逃避杀软的静态检测算是⽐比较常⻅见⽽而有
效的⼀一种⽅方式，我这⾥里里搜集整理理了了9种常⻅见的Golang的加解密⽅方法。
6.1 异或xor加密
这个⽐比较简单，设置个⾃自⼰己的密钥就可以，在 潮影在线免杀平台：http://bypass.tidesec.com/
中也使⽤用了了异或加密。
详细代码在这
⾥里里： https://github.com/TideSec/GoBypassAV/tree/main/Encryption/XOR_code
6.2 Base64编码
GO内置了了base64的包，可直接调⽤用，也可对shellcode进⾏行行多轮的base64编码。
package main
import (
"encoding/base64"
"fmt"
)
func main(){
var str = "tidesec"
strbytes := []byte(str)
encoded := base64.StdEncoding.EncodeToString(strbytes)
fmt.Println(encoded)
decoded, _ := base64.StdEncoding.DecodeString(encoded)
decodestr := string(decoded)
fmt.Println(decodestr)
}
6.3 AES加密
⾼高级加密标准（Advanced Encryption Standard，缩写：AES），是美国联邦政府采⽤用的⼀一种区块
加密标准。现在，⾼高级加密标准已然成为对称密钥加密中最流⾏行行的算法之⼀一。
AES实现的⽅方式有5种:
1.电码本模式（Electronic Codebook Book (ECB)）
2.密码分组链接模式（Cipher Block Chaining (CBC)）
3.计算器器模式（Counter (CTR)）
4.密码反馈模式（Cipher FeedBack (CFB)）
5.输出反馈模式（Output FeedBack (OFB)）
我这是采⽤用的是电码本模式Electronic Codebook Book (ECB)。
代码在这⾥里里： https://github.com/TideSec/GoBypassAV/tree/main/Encryption/AES_code
代码参考 http://liuqh.icu/2021/06/19/go/package/16-aes/