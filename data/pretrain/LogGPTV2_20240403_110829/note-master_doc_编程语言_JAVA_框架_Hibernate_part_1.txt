# Hibernate
>Hibernate 是由 Gavin King 于 2001 年创建的开放源代码的对象关系框架。它强大且高效的构建具有关系对象持久性和查询服务的 Java 应用程序。
Hibernate 将 Java 类映射到数据库表中，从 Java 数据类型中映射到 SQL 数据类型中
## 架构
![202022916348](/assets/202022916348.jpg)
## 配置
### ORM元数据配置
```xml
             -->
```
### 主配置
```xml
		com.mysql.cj.jdbc.Driver
		jdbc:mysql:///hibernate?characterEncoding=utf8
		root
		123
		org.hibernate.dialect.MySQLDialect
		true
		true
		update
```
### 使用
```java
// 加载配置文件
Configuration cfg = new Configuration().configure("hibernate.cfg.xml");
// 创建核心对象session的工厂
SessionFactory factory = cfg.buildSessionFactory();
// 获得session
Session session = factory.openSession();
// 开启事务
Transaction tx = session.beginTransaction();
Book book = new Book();
book.setBname("JAVASCRIPT hight level program");
book.setBauthor("nigolas");
// 保存对象
session.save(book);
// 提交事务
tx.commit();
// 关闭会话
session.close();
factory.close();
```
```java
// 根据ID查询
session.get(Book.class, 6)
// 根据ID修改
Book book = session.get(Book.class, 6);
book.setBauthor("cxk");
session.update(book);
// 根据ID删除
Book book = session.get(Book.class, 6);
session.delete(book);
```
```java
// 回滚事务
tx.rollback();
```
## 实体
### 实体类注意事项
- 持久类提供无参数构造方法
- 成员变量私有,提供有get/set方法访问.需提供属性
- 持久化类中的属性,应尽量使用包装类型
- 持久化类需要提供id.与数据库中的主键列对应
- 不要用final修饰class
### 主键类型
- 自然主键
  - 表的业务列中,有某业务列符合,必须有,并且不重复的特征时,该列可以作为主键使用.
- 代理主键
  - 表的业务列中,没有某业务列符合,必须有,并且不重复的特征时,创建一个没有业务意义的列作为主键
### 主键生成策略
#### 代理主键
identity : 主键自增.由数据库来维护主键值.录入时不需要指定主键.
sequence: Oracle中的主键生成策略.
increment(了解): 主键自增.由hibernate来维护.每次插入前会先查询表中id最大值.+1作为新主键值.
hilo(了解): 高低位算法.主键自增.由hibernate来维护.开发时不使用.
native:hilo+sequence+identity 自动三选一策略.
uuid: 产生随机字符串作为主键. 主键类型必须为string 类型.
#### 自然主键
assigned:自然主键生成策略. hibernate不会管理主键值.由开发人员自己录入.
## 对象状态
- 瞬时状态
  - 没有ID，没有在session缓存中
- 持久化状态
  - 有id,在session缓存中
  - 持久化对象的变化会同步到数据库中
- 游离|托管状态
  - 有id,没有在session缓存中
```java
Book book = new Book(); // 瞬时状态
book.setBauthor("unknown"); // 瞬时状态
session.save(book); // 持久化状态
tx.commit();
// 关闭会话
session.close(); // 游离|托管状态
```
![批注 2020-03-02 102153](/assets/批注%202020-03-02%20102153.png)
## 一级缓存
```java
Book book = session.get(Book.class, 1);
Book book1 = session.get(Book.class, 1);
System.out.println(book == book1); // true
```
### 快照
```java
Book book = session.get(Book.class, 1);
book.setBname("java learning"); 
tx.commit(); // 与快照中对象进行对比，如果对象发生改变，则更新对象
```
## 事务
### 设置事务隔离级别
```xml
4
```
### 在项目中管理事务
- 获取线程绑定session
```xml
thread
```
```java
// 获取线程绑定session
// 注意，线程绑定的session事务提交后会自动关闭
Session session = factory.getCurrentSession();
```
## 其他方式查询
### HQL查询
```java
String hql = "FROM Book";
Query query = session.createQuery(hql,Book.class);
System.out.println(query.list());