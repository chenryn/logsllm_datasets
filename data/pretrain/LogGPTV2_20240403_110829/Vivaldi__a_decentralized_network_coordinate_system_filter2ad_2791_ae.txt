f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
sphere r=40ms
sphere r=60ms
sphere r=80ms
sphere r=100ms
sphere r=120ms
2D
sphere r=40ms
sphere r=60ms
sphere r=80ms
sphere r=100ms
sphere r=120ms
2D
1
2
Relative Error
(a)
3
0.0
0
1
2
3
Relative Error
(b)
Figure 14: The cumulative distribution of prediction error for spherical coordinates of various radii chosen by Vivaldi for the (a)
PlanetLab and (b) King data sets.
Brazilian nodes are assigned coordinates at approximately 95 ms
above the United States. Using traceroute on these nodes we see
that 95 ms is approximately the distance to the nodes’ connection
to the backbone of the Internet2 network inside the United States.
Because the Brazilian nodes send their tra(cid:14)c via the United States
to other nodes in this small data set they are best represented as 95
ms “above” the continental U.S. If there were a larger variety of
Brazilian nodes and links in the data set, the nodes would be given
their own region of the Euclidean plane.
5.5 Graphical comparison
The plots in Figure 16 show the ﬁnal placement of nodes in two
and three dimensional Euclidean space and with height vectors.
The Euclidean plots have a cloud of nodes that are far away from
everyone and don’t seem to know where to go. These nodes are
also the bulk of the ones with large errors. The height plots have
a place for these nodes: high above the rest of the network. This
results in a smaller maximum node error for the height plots, as
well as a smaller median error. The smaller errors suggest that the
height vectors are a more accurate reﬂection of the structure of the
Internet for the nodes in the data sets.
6. RELATED WORK
A number of systems have been proposed for computing syn-
thetic coordinates. In addition, the mass-spring minimization used
by Vivaldi has also been used previously. Unlike any one of the
related systems, Vivaldi is fully decentralized, targets the Internet,
and adapts well to changes in the network. Vivaldi uses height
vectors to improve its latency predictions, while previous systems
mostly use Euclidean coordinates.
6.1 Centralized coordinate systems
Many existing synthetic coordinate systems involve a central-
ized component (such as a set of landmark nodes) or require global
knowledge of node measurements. Vivaldi’s main contribution rel-
ative to these systems is that it is decentralized and does not require
a ﬁxed infrastructure.
Vivaldi was inspired by GNP [17], which demonstrated the pos-
sibility of calculating synthetic coordinates to predict Internet la-
tencies. GNP relies on a small number (5-20) of “landmark” nodes;
other nodes choose coordinates based on RTT measurements to the
landmarks. The choice of landmarks signiﬁcantly a(cid:11)ects the accu-
racy of GNP’s RTT predictions. Requiring that certain nodes be
(a)
(c)
(b)
(d)
Figure 16: The node placement chosen by Vivaldi for the King
data set (a) in two dimensions, (b) in three dimensions, (c) with
height vectors projected onto the xy plane, and (d) with height
vectors rotated to show the heights. The “fringe nodes” in (a)
and (b) are not as prevalent in (c).
designated as landmarks may be a burden on symmetric systems
(such as peer-to-peer systems). In addition, landmark systems, un-
like Vivaldi, do not take advantage of all communication between
nodes: only measurements to landmarks are helpful in updating
coordinates.
NPS [16] is a version of GNP which addresses system-level is-
sues involved in deploying a coordinate system. NPS includes a
hierarchical system for reducing load on the landmark nodes, a
strategy for mitigating the e(cid:11)ects of malicious nodes, a conges-
tion control mechanism , and a work-around for NATs. NPS also
demonstrates how a landmark-based coordinate system can adapt to
changing network conditions by periodically communicating with
the landmark nodes and recomputing coordinates.
Lighthouse [19] is an extension of GNP that is intended to be
more scalable. Lighthouse, like GNP, has a special set of landmark
nodes. A node that joins Lighthouse does not have to query those
global landmarks. Instead, the new node can query any existing
set of nodes to ﬁnd its coordinates relative to that set, and then
transform those coordinates into coordinates relative to the global
landmarks.
Tang and Crovella propose a coordinate system based on “vir-
tual” landmarks [29]; this scheme is more computationally e(cid:14)cient
than GNP and is not as dependent on the positions of the land-
marks. The authors also present an analysis of the dimensionality
of their measured latencies which suggests that low-dimensional
coordinates can e(cid:11)ectively model Internet latencies. This result
agrees with the results presented in Section 5
6.2 Decentralized Internet coordinate systems
PIC [3], like Vivaldi, can use any node that knows its coordi-
nates as a landmark for future nodes: PIC does not require explic-
itly designated landmarks. A PIC node either knows or doesn’t
know its coordinates. Vivaldi incorporates a continuous measure
of how certain a node is about its coordinates; this approach helps
adapt to changing network conditions or network partitions. PIC
does not seem to be suited to very dynamic conditions: it runs the
Simplex minimization procedure completely after a node measures
the latencies to the landmarks. This makes PIC react very quickly
to new measurements. In building Vivaldi we found that reacting
too quickly to measurements (using a large time-step) caused the
coordinates to oscillate.
PIC defends the security of its coordinate system against ma-
licious participants using a test based on the triangle inequality.
Vivaldi defends against high-error nodes, but not malicious nodes.
PIC uses an active node discovery protocol to ﬁnd a set of nearby
nodes to use in computing coordinates. In contrast, Vivaldi piggy-
backs on application-level tra(cid:14)c, assuming that applications that
care about coordinate accuracy to nearby nodes will contact them
anyway.
NPS [16] uses a decentralized algorithm.
Instead of sending
measurements to a central node that runs the Simplex algorithm
to determine landmark coordinates (as GNP does), each NPS land-
mark re-runs the minimization itself each time it measures the la-
tency to a new node. Vivaldi operates in much the same manner,
but uses a mass-spring system instead of the Simplex algorithm to
perform the minimization.
6.3 Coordinate systems for wireless nets
The distributed systems described in this section target wireless
networks where distance, either in network latency or physical sep-
aration, reﬂects geographic proximity fairly closely. Vivaldi is in-
tended for use in the Internet, where the topology of the network is
much less obvious a priori.
AFL [21], a distributed node localization system for Cricket [22]
sensors, uses spring relaxation. The Cricket sensors use ultrasound
propagation times to measure inter-sensor distances and cooperate
to derive coordinates consistent with those distances. Most of the
complexity of AFL is dedicated to solving a problem that doesn’t
a(cid:11)ect Vivaldi: preventing the coordinate system from “folding”
over itself. Unlike the sensors used in the Cricket project, we as-
sume that Vivaldi hosts can measure the latency to distant nodes;
this eliminates the folding problem.
Other systems (such as ABC [25]) operate by propagating known
coordinates from a ﬁxed set of anchor nodes in the core of the net-
work. Each node can then ﬁnd its location in terms of the pro-
pogated coordinates using techniques like triangulation.
Rao et. al. [23] describe an algorithm for computing virtual coor-
dinates to enable geographic forwarding in a wireless ad-hoc net-
work. Their algorithm does not attempt to predict latencies; in-
stead, the purpose is to make sure that directional routing works.
6.4 Spring relaxation
Several systems use spring relaxation to ﬁnd minimal energy
conﬁgurations. Vivaldi’s use of spring relaxation was inspired by
an algorithm to recover a three dimensional model of a surface
from a set of unorganized points described by Hugues Hoppe [11].
Hoppe introduces spring forces to guide the optimization of a re-
constructed surface.
Mogul describes a spring relaxation algorithm to aid in the vi-
sualization of tra(cid:14)c patterns on local area networks [14]. Spring
relaxation is used to produce a 2-dimensional representation of the
graph of tra(cid:14)c patterns; the results of the relaxation are not used to
predict latencies or tra(cid:14)c patterns.
The Mithos [24, 30] overlay network uses a spring relaxation
technique to assign location-aware IDs to nodes.
Shavitt and Tankel’s Big Bang system [26] simulates a poten-
tial ﬁeld similar to Vivaldi’s mass-spring system. Their simulation
models each particle’s momentum explicitly and then introduces
friction in order to cause the simulation to converge to a stable state.
Vivaldi accomplishes the same e(cid:11)ect by ignoring the kinetic energy
of the springs. The Big Bang system is more complicated than Vi-
valdi and seems to require global knowledge of the system; it is not
clear to us how to decentralize it.
6.5 Internet models
Vivaldi improves its latency predictions with a new coordinate
space that places nodes some distance “above” a Euclidean space.
Previous synthetic coordinate systems have concentrated on pure
Euclidean spaces or other simple geometric spaces like the surfaces
of spheres and tori.
Shavitt and Tankel [27] recently proposed using a hyperbolic
coordinate space to model the Internet. Conceptually the height
vectors can be thought of as a rough approximation of hyperbolic
spaces. The hyperbolic model may address a shortcoming of the
height model; the height model implicitly assumes that each node
is behind its own access link. If two nodes are behind the same
high-latency access link, the height model will incorrectly predict
a large latency between the two nodes: the distance down to the
plane and back up. Comparing the height vectors and hyperbolic
model directly to determine which is a better model for the Internet
is future work.
6.6 Other location techniques
IDMaps [8] is an infrastructure to help hosts predict Internet RTT
to other hosts. The infrastructure consists of a few hundred or thou-
sand tracer nodes. Every tracer measures the Internet RTT to every
other tracer. The tracers also measure the RTT to every CIDR ad-
dress preﬁx, and jointly determine which tracer is closest to each
preﬁx. Then the RTT between host h1 and host h2 can be estimated
as the RTT from the preﬁx of h1 to that preﬁx’s tracer, plus the
RTT from the preﬁx of h2 to that preﬁx’s tracer, plus the RTT be-
tween the two tracers. An advantage of IDMaps over Vivaldi is that
IDMaps reasons about IP address preﬁxes, so it can make predic-
tions about hosts that are not aware of the IDMaps system.
The IP2Geo system [18] estimates the physical location of a re-
mote server using information from the content of DNS names,
whois queries, pings from ﬁxed locations, and BGP information.
IP2Geo di(cid:11)ers from Vivaldi mainly in that it attempts to predict
physical location rather than network latency.
7. CONCLUSIONS AND FUTURE WORK
Vivaldi is a simple, adaptive, decentralized algorithm for com-
puting synthetic coordinates for Internet hosts. Vivaldi requires no
ﬁxed infrastructure, supports a wide range of communication pat-
terns, and is able to piggy-back network sampling on application
tra(cid:14)c. Vivaldi includes reﬁnements that adaptively tune its time
step parameter to cause the system to converge to accurate solu-
tions quickly and to maintain accuracy even as large numbers of
new hosts join the network.
By evaluating the performance of Vivaldi on a large data set gen-
erated from measurements of Internet hosts, we have investigated
the extent to which the Internet can be represented in simple ge-
ometric spaces. We propose a new model, height vectors, which
should be of use to all coordinate algorithms. Attempting to un-
derstand characteristics of the Internet by studying the way it is
modeled by various geometric spaces is a promising line of future
research.
Because Vivaldi requires no infrastructure and is simple to im-
plement, it is easy to deploy in existing applications. We modiﬁed
DHash, a distributed hash table, to take advantage of Vivaldi and
reduced time required to fetch a block in DHash by 40% on a global
test-bed [7]. We hope that Vivaldi’s simplicity will allow other dis-
tributed systems to adopt it.
Acknowledgments
This research was conducted as part of the IRIS project
(http://project-iris.net/), supported by the National Sci-
ence Foundation under Cooperative Agreement No. ANI-0225660.
Russ Cox is supported by a fellowship from the Fannie and John
Hertz Foundation.
REFERENCES
[1] BitTorrent. http://bitconjurer.org/BitTorrent/protocol.html.
[2] K. L. Calvert, M. B. Doar, and E. W. Zegura. Modeling
Internet topology. IEEE Communications, 35(6):160–163,
June 1997.
[3] M. Costa, M. Castro, A. Rowstron, and P. Key. PIC: Practical
Internet coordinates for distance estimation. In International
Conference on Distributed Systems, Tokyo, Japan, March
2004.
[4] R. Cox and F. Dabek. Learning Euclidean coordinates for
Internet hosts. http://pdos.lcs.mit.edu/˜rsc/6867.pdf,
December 2002.
[5] R. Cox, F. Dabek, F. Kaashoek, J. Li, and R. Morris.
Practical, distributed network coordinates. In Proceedings of
the Second Workshop on Hot Topics in Networks
(HotNets-II), Cambridge, Massachusetts, November 2003.
[6] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris, and
I. Stoica. Wide-area cooperative storage with CFS. In Proc.
18th ACM Symposium on Operating Systems Principles
(SOSP ’01), pages 202–205, Oct. 2001.
[7] F. Dabek, J. Li, E. Sit, J. Robertson, M. F. Kaashoek, and
R. Morris. Designing a DHT for low latency and high
throughput. In Proceedings of the 1st USENIX Symposium
on Networked Systems Design and Implementation (NSDI
’04), San Francisco, California, March 2004.
[8] P. Francis, S. Jamin, C. Jin, Y. Jin, D. Raz, Y. Shavitt, and
L. Zhang. IDMaps: A global Internet host distance
estimation service. IEEE/ACM Transactions on Networking,
Oct. 2001.
[9] T. Gil, J. Li, F. Kaashoek, and R. Morris. Peer-to-peer
simulator, 2003. http://pdos.lcs.mit.edu/p2psim.
[10] K. P. Gummadi, S. Saroiu, and S. D. Gribble. King:
Estimating latency between arbitrary Internet end hosts. In
Proc. of SIGCOMM IMW 2002, pages 5–18, November
2002.
[11] H. Hoppe. Surface reconstruction from unorganized points.
PhD thesis, Department of Computer Science and
Engineering, University of Washington, 1994.
[12] KaZaA media dekstop. http://www.kazaa.com/.
[13] P. Mockapetris and K. J. Dunlap. Development of the
Domain Name System. In Proc. ACM SIGCOMM, pages
123–133, Stanford, CA, 1988.
[14] J. C. Mogul. E(cid:14)cient use of workstations for passive
monitoring of local area networks. Research Report 90/5,
Digital Western Research Laboratory, July 1990.
[15] E. Ng. GNP software, 2003. http://www-2.cs.cmu.edu/
~eugeneng/research/gnp/software.html.
[16] T. E. Ng and H. Zhang. A network positioning system for the
Internet. In Proc. USENIX Conference, June 2004.
[17] T. S. E. Ng and H. Zhang. Predicting Internet network
distance with coordinates-based approaches. In Proceedings
of IEEE Infocom, pages 170–179, 2002.
[18] V. Padmanabhan and L. Subramanian. An investigation of
geographic mapping techniques for Internet hosts. In Proc.
ACM SIGCOMM, pages 173–185, San Diego, Aug. 2001.
[19] M. Pias, J. Crowcroft, S. Wilbur, T. Harris, and S. Bhatti.
Lighthouses for scalable distributed location. In IPTPS,
2003.
[20] Planetlab. www.planet-lab.org.
[21] N. Priyantha, H. Balakrishnan, E. Demaine, and S. Teller.
Anchor-free distributed localization in sensor networks.
Technical Report TR-892, MIT LCS, Apr. 2003.
[22] N. Priyantha, A. Chakraborty, and H. Balakrishnan. The
Cricket Location-Support System. In Proc. 6th ACM
MOBICOM Conf., Boston, MA, Aug. 2000.
[23] A. Rao, S. Ratnasamy, C. Papadimitriou, S. Shenker, and
I. Stoica. Geographic routing without location information.
In ACM MobiCom Conference, pages 96 – 108, Sept. 2003.
[24] R. Rinaldi and M. Waldvogel. Routing and data location in
overlay peer-to-peer networks. Research Report RZ–3433,
IBM, July 2002.
[25] C. Savarese, J. M. Rabaey, and J. Beutel. Locationing in
distributed ad-hoc wireless sensor networks. In ICASSP,
pages 2037–2040, May 2001.
[26] Y. Shavitt and T. Tankel. Big-bang simulation for embedding
network distances in Euclidean space. In Proc. of IEEE
Infocom, April 2003.
[27] Y. Shavitt and T. Tankel. On the curvature of the Internet and
its usage for overlay construction and distance estimation. In
Proc. of IEEE Infocom, April 2004.
[28] J. Stribling. All-pairs-ping trace of PlanetLab, 2004.
http://pdos.lcs.mit.edu/ strib/.
[29] L. Tang and M. Crovella. Virtual landmarks for the Internet.
In Internet Measurement Conference, pages 143 – 152,
Miami Beach, FL, October 2003.
[30] M. Waldvogel and R. Rinaldi. E(cid:14)cient topology-aware
overlay network. In Hotnets-I, 2002.
[31] L. Wang, V. Pai, and L. Peterson. The E(cid:11)ectiveness of
Request Redirecion on CDN Robustness. In Proceedings of
the Fifth Symposium on Operating Systems Design and
Implementation, Boston, MA USA, December 2002.