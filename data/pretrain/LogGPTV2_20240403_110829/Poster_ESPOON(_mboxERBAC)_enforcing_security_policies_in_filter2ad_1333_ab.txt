### The Encrypted Role and Trapdoor Mechanism

The encrypted role serves as a trapdoor for the user's role, which is encrypted using the secret key of the Company RBAC (Role-Based Access Control) Manager. The Policy Decision Point (PDP) uses this trapdoor to check access permissions. If the access permission is not directly assigned to the Requester's role, the Server RBAC Manager can traverse the role hierarchy graph in an encrypted manner to determine if any base roles of the Requester's role have access to the requested resource.

### Role Hierarchy Traversal

For this traversal, the trapdoor of the Requester's role is matched against the SDE (Secure Data Encryption) information stored in each node of the graph. Once a match is found, the Server RBAC Manager retrieves the trapdoors of all base roles down to the matched role. The PDP then checks each retrieved base role to see if the access permission is assigned to it. This process continues until the access permission is either granted or all retrieved base roles have been traversed.

### Security Considerations

A malicious user might attempt a replay attack by saving a previously assigned role. To mitigate this, the Company RBAC Manager includes timing information in the SDE schema, allowing the PDP to detect and reject stale trapdoors during the matching process.

### Performance Evaluation

We implemented ESPOONERBAC and tested it on a single node with an Intel Core2 Duo 2.2 GHz processor, 2 GB of RAM, and Microsoft Windows XP Professional version 2002 Service Pack 3. Each test was performed 1000 times.

#### Role Hierarchy Graph Encryption

To measure the performance overhead of the Company RBAC Manager and Server RBAC Manager encryption, we increased the number of nodes in the role hierarchy graph from 10 to 50 in steps of 10. As shown in Figure 3(a), the time taken for both encryptions grows linearly with the number of nodes. The time complexity for both encryptions is \(\theta(n)\), where \(n\) is the number of nodes in the role hierarchy graph.

#### Trapdoor Generation

To measure the performance overhead of trapdoor generation, we again increased the number of nodes from 10 to 50 in steps of 10. Figure 3(b) shows that the trapdoor generation times for both the Company RBAC Manager and the Server RBAC Manager grow linearly with the number of nodes. The time complexity for trapdoor generation is also \(\theta(n)\).

- The Company RBAC Manager generates a trapdoor in 34.26 milliseconds.
- The Server RBAC Manager generates a server-side trapdoor in 4.67 milliseconds.

#### Traversal in the Encrypted Role Hierarchy Graph

Figure 3(c) illustrates the time taken by the Server RBAC Manager to traverse the encrypted role hierarchy graph. The traversal time increases linearly with the number of roles. The time complexity for traversal is \(O(n)\), where \(n\) is the number of nodes in the role hierarchy graph.

### Conclusions

In this work, we presented the ESPOONERBAC architecture, which supports the enforcement of RBAC-style authorization policies in outsourced environments. Future work will focus on enforcing separation of duties constraints and hiding the structure of the role hierarchy graph from the Service Provider.

### Acknowledgment

This work was supported by the EU FP7 programme, Research Grant 257063 (project Endorse).

### References

1. Muhammad Rizwan Asghar, Mihaela Ion, Giovanni Russello, and Bruno Crispo. "ESPOON: Enforcing encrypted security policies in outsourced environments." In The Sixth International Conference on Availability, Reliability and Security, ARES'11, 2011.
2. Jason Crampton. "Cryptographic enforcement of role-based access control." In Proceedings of the 7th International conference on Formal aspects of security and trust, FAST'10, pages 191–205, Berlin, Heidelberg, 2011. Springer-Verlag.
3. Sabrina De Capitani di Vimercati, Sara Foresti, Sushil Jajodia, Stefano Paraboschi, and Pierangela Samarati. "A data outsourcing architecture combining cryptography and access control." In Proceedings of the 2007 ACM workshop on Computer security architecture, CSAW '07, pages 63–69, New York, NY, USA, 2007. ACM.
4. Changyu Dong, Giovanni Russello, and Naranker Dulay. "Shared and searchable encrypted data for untrusted servers." Journal of Computer Security, 19(3):367–397, 2011.
5. Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and Charles E. Youman. "Role-based access control models." Computer, 29:38–47, February 1996.
6. R. Yavatkar, D. Pendarakis, and R. Guerin. "A Framework for Policy-based Admission Control." RFC 2753 (Informational), January 2000. http://www.ietf.org/rfc/rfc2753.txt.