The encrypted role is, in fact, a trapdoor of the user’s role. The
trapdoor is encrypted with the secret key of the Company RBAC
Manager. The PDP takes this trapdoor and checks the access per-
mission. In case if the access permission is not assigned directly
to the Requester’s role, the Server RBAC Manager may traverse
down in the role hierarchy graph, in an encrypted manner, in order
to ﬁnd if any base roles of the Requester’s role have access to the re-
quested resource. For this purpose, the trapdoor of the Requester’s
1The Company RBAC Manager is also assigned a user key similar
to that of a user.
842)
s
d
n
o
c
e
s
i
l
l
i
m
n
i
(
e
m
i
t
n
o
i
t
p
y
r
c
n
E
 900
 800
 700
 600
 500
 400
 300
 200
 100
 0
Encryption by the Company RBAC Manager
Encryption by the Server RBAC Manager
 10
 20
 30
 40
 50
Number of nodes
)
s
d
n
o
c
e
s
i
l
l
i
m
n
i
(
e
m
i
t
n
o
i
t
p
y
r
c
n
E
 800
 700
 600
 500
 400
 300
 200
 100
 0
Trapdoor generation by the Company RBAC Manager
Trapdoor generation by the Server RBAC Manager
 10
 20
 30
 40
 50
Number of nodes
)
s
d
n
o
c
e
s
i
l
l
i
m
n
i
(
e
m
i
t
l
a
s
r
e
v
a
r
T
 30
 25
 20
 15
 10
 5
 0
Traversal by the Server RBAC Manager
 10
 20
 30
 40
 50
Number of nodes
(a) Performance overhead of the role hierar-
chy graph encryption
(b) Performance overhead of the role hierarchy
graph trapdoor generation
(c) Performance overhead of traversal in the
role hierarchy graph
Figure 3: Performance evaluation of ESPOONERBAC
role is matched against the SDE information stored in each node
of the graph. Once the match is found, the Server RBAC Man-
ager retrieves trapdoor of all the base roles down to the matched
role. Next, the PDP checks for each retrieved base role if the ac-
cess permission is assigned to it. This continues until either the
access permission is permitted or the list of all retrieved base roles
is traversed.
We may notice that a malicious user may perform replay attack
by saving the role once assigned to him/her. In order to withstand
such an attack, the Company RBAC Manager includes timing in-
formation in the mathematical construction of the SDE schema in
such a way that the PDP can detect it while matching the trapdoor
against the SDE information.
4. DEMO
We have implemented ESPOONERBAC and tested it on a single
node based on an Intel Core2 Duo 2.2 GHz processor with 2 GB of
RAM, running Microsoft Windows XP Professional version 2002
Service Pack 3. The number of iterations performed for each of the
following results is 1000.
In order to measure the performance overhead incurred by the
Company RBAC Manager encryption and the Server RBAC Man-
ager encryption, we increased the number of nodes in the role hi-
erarchy graph from 10 to 50 with step size 10. In Figure 3(a), we
can see that the times taken by the Company RBAC Manager en-
cryption and the Server RBAC Manager encryption grow linearly
with increase in the number of nodes in the role hierarchy graph.
In general, the time complexity of both encryptions is θ(n), where
n is the number of nodes in the role hierarchy graph.
In order to measure the performance overhead incurred by the
trapdoor generation by the Company RBAC Manager as well as by
Server RBAC Manager, we increased the number of nodes in the
role hierarchy graph from 10 to 50 with step size 10.
In Figure
3(b), we can see that the trapdoor generation times taken by the
Company RBAC Manager and the Server RBAC Manager grow
linearly with increase in the number of nodes in the role hierarchy
graph. In general, the time complexity of the trapdoor generation,
in both cases, is θ(n), where n is the number of nodes in the role
hierarchy graph.
When a Requester wants to send a request, the Company RBAC
Manager generates a trapdoor of the role, which takes 34.26 mil-
liseconds. Afterwards, the Server RBAC Manager generates the
server side trapdoor, which takes 4.67 milliseconds.
Figure 3(c) shows the time taken by the Server RBAC Manager
in order to traverse in the encrypted role hierarchy graph. We can
see that the traversal time grows linearly with the increase in the
number of roles in the role hierarchy graph. In general, the time
complexity of both encryptions is O(n), where n is the number of
nodes in the role hierarchy graph.
5. CONCLUSIONS
In this work, we have presented the ESPOONERBAC architec-
ture for supporting the enforcement of RBAC style of authorisa-
tion policies by the outsourced environment. As future work, we
are working on the enforcement of separation of duties constraints.
Moreover, we are investigating how to hide the structure of the role
hierarchy graph from the Service Provider.
Acknowledgment
The work of the ﬁrst and second authors is supported by the EU
FP7 programme, Research Grant 257063 (project Endorse).
6. REFERENCES
[1] Muhammad Rizwan Asghar, Mihaela Ion, Giovanni Russello,
and Bruno Crispo. ESPOON: Enforcing encrypted security
policies in outsourced environments. In The Sixth
International Conference on Availability, Reliability and
Security, ARES’11, 2011.
[2] Jason Crampton. Cryptographic enforcement of role-based
access control. In Proceedings of the 7th International
conference on Formal aspects of security and trust, FAST’10,
pages 191–205, Berlin, Heidelberg, 2011. Springer-Verlag.
[3] Sabrina De Capitani di Vimercati, Sara Foresti, Sushil Jajodia,
Stefano Paraboschi, and Pierangela Samarati. A data
outsourcing architecture combining cryptography and access
control. In Proceedings of the 2007 ACM workshop on
Computer security architecture, CSAW ’07, pages 63–69,
New York, NY, USA, 2007. ACM.
[4] Changyu Dong, Giovanni Russello, and Naranker Dulay.
Shared and searchable encrypted data for untrusted servers.
Journal of Computer Security, 19(3):367–397, 2011.
[5] Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and
Charles E. Youman. Role-based access control models.
Computer, 29:38–47, February 1996.
[6] R. Yavatkar, D. Pendarakis, and R. Guerin. A Framework for
Policy-based Admission Control. RFC 2753 (Informational),
January 2000. http://www.ietf.org/rfc/rfc2753.txt.
843