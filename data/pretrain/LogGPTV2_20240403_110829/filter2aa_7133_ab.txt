end
puts sum
```
这时与使用 `for` 语句的程序有细微的区别。首先，变量 `i` 的条件指定方式不一样。`for` 语句的例子通过 `1..5` 指定条件的范围。`while` 语句使用比较运算符 ` 可以省略 do
```ruby
sum = 0
i = 1
until sum >= 50
  sum += i
  i+= 1
end
puts sum
```
本例是将使用 `while` 语句的程序用 `until` 语句改写了，与 `while` 语句所使用的条件刚好相反。
其实，在 `while` 语句的条件上使用表示否定的运算符 `!`，也能达到和 `until` 语句相同的效果。
```ruby
sum = 0
i = 1
while !(sum >= 50)
  sum += i
  i += 1
end
puts sum
```
虽然可以使用 `while` 语句的否定形式代替 `until` 语句。但是，有时对一些比较复杂的条件表达式使用否定，反而会不直观，影响程序理解，在这种情况下，我们应该考虑使用 `until` 语句。
# each 方法
`each` 方法将对象集合里的对象逐个取出，这与 `for` 语句循环取出数组元素非常相似。实际上，我们可以非常简单地将使用 for 语句的程序改写为使用 `each` 方法的程序
```ruby
names = ["awk","Perl","Python","Ruby"]
names.each do |name|
  puts name
end
```
each 方法的结构如下：
```ruby
对象.each do | 变量 |
 希望循环的处理
end
```
在说明 `times` 方法我们曾提到过，块的 `do ～ end` 部分可换成 `{ ～ }`。
```ruby
对象.each {| 变量 |
 希望循环的处理
}
```
这与下面的程序的效果是几乎一样。
```ruby
for 变量 in 对象
 希望循环的处理
end
```
在 Ruby 内部，`for` 语句是用 `each` 方法来实现的。因此，可以使用 `each` 方法的对象，同样也可以指定为 `for` 语句的循环对象。
在介绍 `for` 语句时我们举过使用范围对象的例子，我们试着用 `each` 方法改写一下。
```ruby
sum = 0
(1..5).each do |i|
  sum= sum + i
end
puts sum
```
# loop 方法
还有一种循环的方法，没有终止循环条件，只是不断执行循环处理。Ruby 中的 loop 就是这样的循环方法。
```ruby
loop do
  print "Ruby"
end
```
执行上面的程序后，整个屏幕会不停的输出文字 Ruby。为了避免这样的情况发生，在实际使用 `loop` 方法时，我们需要用到接下来将要介绍的 `break`，使程序可以中途跳出循环。
> 程序不小心执行了死循环时，我们可以使用 CTRL + c 来强行终止程序。
# 循环控制
在进行循环处理的途中，我们可以控制程序马上终止循环，或者跳到下一个循环等。Ruby 提供了如下表所示的三种控制循环的命令。
命令	| 用途
- | -
break	| 终止程序，跳出循环
next	| 跳到下一次循环
redo	| 在相同的条件下重复刚才的处理
```ruby
puts "break 的例子:"
i = 0
["Perl", "Python", "Ruby", "Scheme"].each do |lang|
  i += 1
  if i == 3
    break
  end
  p [i,lang]
end
puts "next 的例子:"
i = 0
["Perl", "Python", "Ruby", "Scheme"].each do |lang|
  i += 1
  if i == 3
    next
  end
  p [i,lang]
end
puts "redo 的例子:"
i = 0
["Perl", "Python", "Ruby", "Scheme"].each do |lang|
  i += 1
  if i == 3
    redo
  end
  p [i,lang]
end
```
我们来看看本例中的 break、next、redo 有什么不同。程序由三部分组成，除了 break、next、redo 这三部分的代码外，其他地方都是相同的。下面是执行后的结果。
```
> ruby break_next_redo.rb
break 的例子:
[1, "Perl"]
[2, "Python"]
next 的例子:
[1, "Perl"]
[2, "Python"]
[4, "Scheme"]
redo 的例子:
[1, "Perl"]
[2, "Python"]
[4, "Ruby"]
[5, "Scheme"]
```
**break**
`break` 会终止全体程序。在代码中，`i` 为 3 时，程序会执行第 6 行的 `break`。执行 `break` 后，程序跳出 `each` 方法循环，前进至程序的第 10 行。因此，程序没有输出 Ruby 和 Scheme。
我们再来介绍一个关于 `break` 的例子。下列程序代码使程序最多只能输出 10 行匹配到的内容。匹配的时候，累加变量 matches，当达到 max_matches 时，程序就会终止 each_line 方法的循环。
```ruby
pattern = Regexp.new(ARGV[0])
filename = ARGV[1]
max_matches = 10      # 输出的最大行数
matches = 0           # 已匹配的行数
file = File.open(filename)
file.each_line do |line|
  if matches >= max_matches
    break
  end
  if pattern =~ line
    matches += 1
    puts line
  end
end
file.close
```
**next**
使用 next 后，程序会忽略 next 后面的部分，跳到下一个循环开始的部分。在i 为 3 时在执行第 16 行的 next 后，程序前进到 each 方法的下个循环。也就是说，将 Scheme 赋值给 lang，并执行 i += 1。因此，程序并没有输出 Ruby，而是输出了 Scheme。
我们再来看看另外一个 next 的例子。程序逐行读取输入的内容，忽略空行或者以 # 开头的行，原封不动地输出除此以外所有行的内容。
strip.rb
```ruby
file = File.open(ARGV[0])
file.each_line do |line|
  next if /^\s*$/ =~ line  # 空行
  next if /^#/ =~ line     # 以“#”开头的行
  puts line
end
file.close
```
fact.rb
```ruby
# 求10 的阶乘
ans = 1
for i in 1..10
  ans *= i
end
# 输出
puts "10! = #{ans}"
```
stripped_fact.rb
```ruby
ans = 1
for i in 1..10
  ans *= i
end
puts "10! = #{ans}"
```
执行以下命令后，我们会得到去掉 fact.rb 的注释和空行后的 stripped_fact.rb。
```
> ruby strip.rb fact.rb > stripped_fact.rb
```
**redo**
`redo` 与 `next` 非常像，与 `next` 的不同之处是，`redo` 会再执行一次相同的循环。
与 `next` 时的情况不同，`redo` 会输出 Ruby。这是由于，`i` 为 3 时就执行了 `redo`，程序只是返回循环的开头，也就是从程序的 `i += 1` 部分开始重新再执行处理，所以 `lang` 的值并没有从 Ruby 变为 Scheme。由于重复执行了 `i += 1`，`i` 的值变为 4，这样 `if` 语句的条件 `i == 3` 就不成立了，redo 也不会再执行了，程序顺理成章地输出了 [4, "Ruby"] 以及 [5, "Scheme"]
另外，大家要注意 `redo` 的使用方法，稍不留神就会在同样的条件下，不断地重复处理，陷入死循环中。
`break`、`next` 和 `redo` 中，一般比较常用是 `break` 和 `next`。大家应该熟练掌握这两个命令的用法。即使是 Ruby 默认提供的库里面，实际上也很难找到 `redo` 的踪影，所以当我们在希望使用 `redo` 时，应该好好考虑是否真的有必要使用 `redo`。
# do～end 与 {～}
在 times 方法的示例中，我们介绍了块的两种写法，`do ～ end` 与 `{ ～ }`。从执行效果来看，两种方法虽然没有太大区别，但一般我们会遵守以下这个约定俗成的编码规则：
- 程序是跨行写的时候使用 `do ～ end`
- 程序写在 1 行的时候用 `{ ～ }`
以 times 方法来举例，会有以下两种写法。
```ruby
10.times do |i|
  puts i
end
```
或者，
```ruby
10.times{|i| puts i}
```
刚开始大家可能会有点不习惯。我们可以这样理解，`do ～ end` 表示程序要执行内容是多个处理的集合，而 `{ ～ }` 则表示程序需要执行的处理只有一个，即把整个带块的方法看作一个值。
如果用把 `do ～ end` 代码合并在一起，程序会变成下面这样：
```ruby
10.times do |i| puts i end
````
以上写法，怎么看都给人一种很难断句的感觉。虽然实际上使用哪种写法都不会影响程序的运行，但在刚开始编写程序时，还是建议大家先遵守这个编码规则。