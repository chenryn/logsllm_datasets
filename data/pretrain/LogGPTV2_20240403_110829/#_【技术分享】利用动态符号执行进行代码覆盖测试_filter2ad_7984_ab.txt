    148.        setMemValue(k, IDREF.CPUSIZE.BYTE, v)
    149.        convertMemToSymVar(k, IDREF.CPUSIZE.BYTE, "addr_%d" % k)
    150.
    151.    for idx, byte in enumerate(TritonExecution.input.data):
    152.        if argv1_addr + idx not in TritonExecution.input.dataAddr: # Not overwrite the previous setting
    153.            print "t[0x%x] = %x %c" % (argv1_addr + idx, ord(byte), ord(byte))
    154.            setMemValue(argv1_addr + idx, IDREF.CPUSIZE.BYTE, ord(byte))
    155.            convertMemToSymVar(argv1_addr + idx, IDREF.CPUSIZE.BYTE, "addr_%d" % idx)
下一个执行的代码是mainAnalysis回调函数，我们注入一些值到输入中（行148，154），我们能通过符号变量覆盖这些输入（行149，155）。
所有被选择的输入存储在全局变量TritonExecution.input中。然后我们开始代码检测。
    58. if instruction.getAddress() == TritonExecution.entryPoint and not isSnapshotEnabled():
    59.        print "[+] Take Snapshot"
    60.        takeSnapshot()
    61.        return
当我们在入口点时，我们做一个快照，为了用新的输入重新执行代码检测。
    52. if instruction.getAddress() == TritonExecution.entryPoint + 2:
    53.   TritonExecution.myPC = []                                  # Reset the path constraint
    54.   TritonExecution.input = TritonExecution.worklist.pop()     # Take the first input
    55.   TritonExecution.inputTested.append(TritonExecution.input)  # Add this input to the tested input
    56.   return
我们重置路径约束（行53），从工作列表中取出一个新的输入。
    63. if instruction.isBranch() and instruction.getRoutineName() in TritonExecution.whitelist:
    64.
    65.   addr1 = instruction.getAddress() + 2                # Address next to this one
    66.   addr2 = instruction.getOperands()[0].getValue()     # Address in the instruction condition
    67.
    68.   # [PC id, address taken, address not taken]
    69.   if instruction.isBranchTaken():
    70.     TritonExecution.myPC.append([ripId, addr2, addr1])
    71.   else:
    72.     TritonExecution.myPC.append([ripId, addr1, addr2])
    73.
    74.   return
上述代码检测是否位于分支指令（如jnz，jle等）或者位于白名单中的函数中。如果是，我们得到两种可能的地址（addr1和addr2），通过isBranchTaken()（行69）计算有效的地址。
然后，我们将条件约束存储在RIP表达式中。
    81. if instruction.getAddress() == TritonExecution.exitPoint:
    82.  print "[+] Exit point"
    83.
    84.  # SAGE algorithm
    85.  # http://research.microsoft.com/en-us/um/people/pg/public_psfiles/ndss2008.pdf
    86.  for j in range(TritonExecution.input.bound, len(TritonExecution.myPC)):
    87.      expr = []
    88.      for i in range(0,j):
    89.          ripId = TritonExecution.myPC[i][0]
    90.          symExp = getFullExpression(getSymExpr(ripId).getAst())
    91.          addr = TritonExecution.myPC[i][1]
    92.          expr.append(smt2lib.smtAssert(smt2lib.equal(symExp, smt2lib.bv(addr,  64))))
    93.
    94.      ripId = TritonExecution.myPC[j][0]
    95.      symExp = getFullExpression(getSymExpr(ripId).getAst())
    96.      addr = TritonExecution.myPC[j][2]
    97.      expr.append(smt2lib.smtAssert(smt2lib.equal(symExp, smt2lib.bv(addr,  64))))
    98.
    99.
    100.      expr = smt2lib.compound(expr)
    101.      model = getModel(expr)
    102.
    103.      if len(model) > 0:
    104.          newInput = TritonExecution.input
    105.          newInput.setBound(j + 1)
    106.
    107.          for k,v in model.items():
    108.              symVar = getSymVar(k)
    109.              newInput.addDataAddress(symVar.getKindValue(), v)
    110.          print newInput.dataAddr
    111.
    112.          isPresent = False
    113.
    114.          for inp in TritonExecution.worklist:
    115.              if inp.dataAddr == newInput.dataAddr:
    116.                  isPresent = True
    117.                  break
    118.          if not isPresent:
    119.              TritonExecution.worklist.append(newInput)
    120.
    121.  # If there is input to test in the worklist, we restore the snapshot
    122.  if len(TritonExecution.worklist) > 0 and isSnapshotEnabled():
    123.      print "[+] Restore snapshot"
    124.      restoreSnapshot()
    125.
    126.  return
当我们在出口点是是最后一步。行84-120是SAGE的实现。简言之，我们浏览路径约束列表，对于每个PC，我们尝试获得满足否定的模型。如果有不可靠的模型到达了新的目标块中，我们将这个模型添加到工作列表中。一旦所有的模型被插入工作列表中，我们恢复快照并且重新执行每个模型。
全部代码能在[这里](https://github.com/JonathanSalwan/Triton/blob/master/src/tools/code_coverage.py)找到，我们[例子](https://triton.quarkslab.com/blog/Code-coverage-using-dynamic-symbolic-execution/#3.1)的执行过程如下：
**0x03 总结**
尽管代码覆盖使用符号执行是一个好的方法，但它是个复杂的任务。路径遍历意味着内存消耗，并且一些情况下要计算的表达式太过复杂。目前，判定器非常慢，判定表达式非常慢。