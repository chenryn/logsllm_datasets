### Root of Trust and Admission Control

Trusted Execution Environments (TEEs) often employ a stringent admission control model, which may require costly licensing and non-disclosure agreements before app development and deployment. This can create a market where only large companies can afford to compete, effectively shutting out small businesses and individual developers. For some, this also raises concerns about consumer rights. Since the trust in TEE vendors is transitive—users trust the vendor, who in turn trusts the TEE licensees to provide opaque but non-malicious software—the lack of transparency makes it difficult to detect subtle attacks (e.g., spying and tracking) and hold the vendors accountable.

For cloud service providers, the ability to create and attest isolated execution environments might be appealing to customers. However, it remains unclear whether consumers would be willing to pay for a hardware technology they cannot control or opt-out of, especially when low-cost devices without these restrictions are more customizable and configurable.

### Related Work

#### App Weakness Analysis
Reaves et al. [43] conducted an analysis of seven branchless mobile banking applications, uncovering weak design and implementation practices such as inadequate authentication and authorization checks, weak or non-standard cryptographic primitive usage, predictable key usage, and sensitive information leakage.

#### Memory Dumping Attacks
The closest work to ours in the context of bypassing DRM content protection is the "Steal This Movie" paper [53]. While their attack focused on identifying data paths of cryptographic operations and dumping decrypted content streams, our focus is on the overall app lifecycle, particularly on commodity mobile devices lacking hardware protection capabilities.

#### Cryptographic Attacks
Biryukov et al. [8] presented a cryptanalysis of the weak cipher (PC1) used by Kindle for DRM protection, showing that the lack of avalanche effect in PC1 allows key extraction using known plaintext and ciphertext attacks. Crosby et al. [16] analyzed the High Bandwidth Digital Content Protection (HDCP) scheme, revealing that access to 40 public/private key pairs could break the security guarantees of the scheme.

#### Side Channel Attacks
Depending on their implementations, cryptographic code can leak secrets through various side channels, which can sometimes be exploited. Several AES implementations are known to be vulnerable to side channel attacks [7, 12], and even TEEs like SGX [13, 25] are not immune to such vulnerabilities.

### Implementation Challenges
From a purely technical perspective, cryptographic enforcement of DRM shares similarities with offline password managers and cryptographic ransomware, though each faces different challenges. Offline password managers aim to prevent illegal access to user passwords [4, 24, 50], analogous to DRM-protected content, but the underlying user is completely trusted, allowing for a neat key concealment approach. On the other hand, cryptographic ransomware shares the same adversarial view as DRM, resisting content recovery, but with relaxed decryption correctness guarantees, ransomware can simply delete the secret key, while DRM systems, especially those allowing offline playback, cannot.

Some have suggested that the large file size of high-definition multimedia content can act as a natural DRM [9], which we disagree with. While large file sizes slightly hinder internet sharing, DRM encompasses other objectives like copy control, license expiration checks, and authorization, which are beyond the scope of internet sharing, especially in the era of subscription-based streaming services.

### App Security Standard
OWASP recently released version 1 of its Mobile Application Security Verification Standard [40], which attempts to standardize security requirements and verification levels for different application and threat scenarios. For Intellectual Property protection, it recommends verification level L1+R. While R requires resilience against reverse engineering, L1 does not require key/certificate pinning, which, as discussed in Sections 3.3 and 3.4, allows for relatively easy TLS interception and potential content protection bypass.

### Conclusion
In this paper, we highlight the current practices and weaknesses of content delivery apps on mobile platforms, with concrete attacks on 141 apps. Due to unjustified trust assumptions and weak design patterns, it is often possible to bypass content protection mechanisms to achieve unrestricted access to raw content. Such attacks may contribute to the revenue struggles of conventional printed media. Content owners should evaluate the robustness of app designs before engaging developers.

Our findings present a dilemma for content distributors: either risk losing control over content by allowing untrustworthy devices to access their services or risk losing customer reach. We hope our work will raise awareness and spark further research on identifying more app weaknesses. With more sophisticated frameworks [49] and recent advancements in transparent debugging against anti-debugging and anti-instrumentation techniques [19, 42], we expect more apps can be reverse-engineered and analyzed.

### A Call to Arms
Another goal of this work is to summarize weakness patterns so that future app developments can benefit from the insights provided, consider various attack strategies, and avoid similar pitfalls. Penetration testing becomes especially important when content distributors are unwilling to completely shut off their services to customers with low-end devices without TEE capabilities, making obfuscation the only feasible partial solution. In the absence of a generic framework for quantifying the complexity of obfuscation, penetration testing may be the only way to empirically evaluate the difficulty of extracting secret states. Companies with in-house red teams could leverage them for this purpose.

### Acknowledgment
We thank the app vendors for responding to our vulnerability reports and collaborating on new releases. We also thank the anonymous reviewers for their helpful comments. Special thanks to Mr. Horace Tse for drawing our attention to medical journal apps, which sparked our interest in this topic. We are grateful to Prof. Gene Spaord for his advice on responsible disclosure and DMCA. This work was supported in part by NSF CRII 1657124 and ARO W911NF-16-1-0127.

### References
[References listed here]

### Appendix

#### A.1 Legal and Ethical Matters
This research is not aimed at assisting piracy. We have not and will not distribute any code or artifacts used in conducting the experiments. As this research was conducted in the United States, we believe the DMCA security research exemption [2] applies. Our research meets the four main requirements for this exemption: 1) the apps and devices were lawfully acquired; 2) the experiments were for good-faith security research; 3) the research was conducted in a controlled setting to avoid harm; 4) the research did not begin before October 28, 2016.

For ethical reasons, after demonstrating an attack, we stopped our experiments and did not perform mass content extraction for personal gain. For example, in the case of Amazon Music, we only tried content decryption on four songs to confirm that decryption with the same key would work across different subscription tiers, albums, and devices. Similarly, for each of the group-7–8 apps, we only downloaded two random pages from two magazine issues. The extracted raw content was subsequently deleted. We engaged in responsible disclosure with the app vendors, demonstrating good faith.

#### A.2 Table of Apps and CWEs
The complete list of publication apps studied and the list of Common Weakness Enumerations (CWEs) discussed in this paper can be found in Tables 1 and 2, respectively.