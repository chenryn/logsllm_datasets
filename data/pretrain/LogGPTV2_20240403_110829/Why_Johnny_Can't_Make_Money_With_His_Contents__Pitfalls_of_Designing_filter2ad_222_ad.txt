root of trust, and they often employ a tight admission control model
which might require potentially costly licensing and non-disclosure
agreements prior to app development and deployment. This could
potentially create a market where only big companies can aord to
compete in, shutting out small businesses and individual developers.
For some, this also presents a concern for consumer rights. Since
the trust on TEE vendors who enforce admission control on what
can be executed in the isolated environment is transitive (users
trust the vendor, which in turn trust the TEE licensees to provide
opaque but non-malicious software), the lack of transparency makes
it dicult to detect subtle attacks (e.g., spying and tracking) and
hold the vendors accountable. While for cloud service providers,
the ability to create and attest isolated execution environments
might add appeals to their customers, it remains unclear how, if
given the choice, consumers would be willing to pay for a hardware
technology that they cannot control and cannot opt-out, instead of
choosing the low cost devices without these hassles that are more
customizable and congurable.
6 RELATED WORK
App Weakness Analysis. Reaves et al. [43] have carried out an
analysis, that shares the same spirit as ours, for 7 branchless mo-
bile banking applications, and have uncovered weak design and
implementation practices including inadequate authentication and
authorization checks, weak (or, non-standard) cryptographic primi-
tive usage, predictable key usage, and sensitive information leakage.
Memory Dumping Aacks. From the perspective of attempting
to bypass DRM content protection, the closest work comparing to
ours is perhaps the Steal This Movie paper [53]. While their attack
on (AS5) is focused on identifying data paths of cryptographic op-
erations and the dumping and reconstruction of decrypted content
streams, we are more concerned about the overall app life cycles
(AS1–4), especially on commodity mobile devices that are lacking
in hardware protection capabilities.
Cryptographic Aacks. Biryukov et al. [8] present a cryptanaly-
sis of the weak cipher (PC1) employed by Kindle for DRM protection.
The authors have shown that due to the lack of avalanche eect
in PC1, one can extract the key using known plaintext and cipher-
text attacks. Crosby et al. [16] present a cryptanalysis for High
Bandwidth Digital Content Protection (HDCP) scheme, an identity-
based cryptosystem used for communication in the Digital Visual
Interface (DVI) bus, in which they identify that if an adversary has
access to 40 public/private key pairs they can essentially break all
the security guarantees promised by the scheme.
Side Channel Aacks. Depending on their implementations, cryp-
tographic code might leak secrets through various side channels,
which can sometimes be exploited. Several implementations of AES
are known to be vulnerable to side channel attacks [7, 12] Side
channels might still exist even if one uses a TEE like SGX [13, 25].
245
Why Johnny Can’t Make Money With His Contents:
Pitfalls of Designing and Implementing Content Delivery Apps
Implementation Challenges. From a purely technical perspec-
tive, a cryptographic enforcement of DRM has similarity with an of-
ine password managers and a cryptographic ransomware, though
the three face dierent challenges. Although oine password man-
agers try to prevent illegal access to user-passwords [4, 24, 50]—
analogous to contents under DRM protection—there is a major
dierence in the adversarial assumptions: the underlying user is
completely trusted in the context of the password managers but
is not the case for DRM. Such an assumption allows a neat key
concealment approach in which the secret key is not required to
be stored on the device, and can be derived at runtime from the
user’s master password using a key derivation function, making
password-manager somewhat easier to implement. On the other
hand, cryptographic ransomware shares the same view of adver-
sary as in DRM [28–31, 47, 48]—resisting recovery of contents—but
because of the relaxation on the decryption correctness guaran-
tees, ransomware can simply delete the secret key, while DRM
systems, particular those that allow oine playback for better user
experience, cannot.
Some have suggested that the large le size of high-denition
multimedia contents can be considered as a natural DRM [9], for
which we disagree with. While large le size slightly hinder Internet
sharing, DRM has a variety of other objections like copy control,
license expiration check and authorization that are beyond the
scope of Internet sharing, especially in the era that the subscription-
based stream business is dominant.
App Security Standard. OWASP recently released version 1 of
its Mobile Application Security Verication Standard [40], which
attempts to standardize security requirements and verication lev-
els that t dierent application and threat scenario. Interestingly,
for Intellectual Property protection, it recommends verication
level L1+R. While R requires resiliency against reverse engineering,
L1 does not require key/certicate pinning, which as discussed in
Sections 3.3 and 3.4, allows for relatively easy TLS interception and
potential content protection bypass.
7 CONCLUSION
In this paper, we shed light on the current practices and weaknesses
of content delivery apps on mobile platforms, with concrete attacks
on 141 apps. Due to some unjustied trust assumptions and weak
design patterns, given the right adversary capability, it is often
possible to bypass the content protection mechanism in place to
achieve unrestricted access to raw contents. Feasibility of such at-
tacks might have contributed to the conventional printed media’s
struggle for revenue. Content owners should evaluate the robust-
ness of the app design before retaining the service of a developer.
Our ndings present an interesting dilemma for content dis-
tributors to consider: either risk losing controls over contents by
allowing untrustworthy devices to access their services, or risk los-
ing customer reach. We hope that our work would bring awareness
to the situation, and spark further research on identifying more app
weaknesses. In particular, with more sophisticated frameworks like
[49] and recent advancements in transparent debugging against
anti-debugging and anti-instrumentation techniques [19, 42] we
expect more apps can be reverse engineered and analyzed.
246
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
A Call to Arms. Another goal of this work is to summarize weak-
ness patterns so that future developments of similar apps can ben-
et from the insights provided by this paper, take various attack
strategies into consideration, and avoid similar pitfalls.
Penetration testing becomes especially important in the case
when content distributors are unwilling to completely shut o their
services to customers who own only low-end devices without TEE
capabilities, making obfuscation the only feasible partial solution. In
the absence of a generic framework for quantifying the complexity
of obfuscation, penetration testing becomes perhaps the only way
to empirically evaluate how dicult it would be to extract secret
states. Companies who already have an in-house red team could
perhaps leverage it for this purpose.
ACKNOWLEDGMENT
We would like to thank the app vendors for responding to our vul-
nerability reports, and in many cases collaborated with us regarding
new releases. We thank the anonymous reviewers for their helpful
comments. Special thanks to Mr. Horace Tse for drawing our atten-
tion to apps of medical journals, which ignited our interests on this
topic. We are also very grateful to Prof. Gene Spaord for his advice
on responsible disclosure and DMCA. This work was supported in
part by NSF CRII 1657124 and ARO W911NF-16-1-0127.
REFERENCES
[1] 2010 (accessed Feb 07, 2018). DRM License cacheable. https://social.msdn.microsoft.
com/Forums/silverlight/en-US/b0220e8a-0660-49aa-8353-18d12ae285dd/
drm-license-cacheable.
[2] 2016 (accessed Feb 07, 2018). DMCA security research exemption for con-
https://www.ftc.gov/news-events/blogs/techftc/2016/10/
sumer devices.
dmca-security-research-exemption-consumer-devices.
[3] 2017 (accessed Feb 07, 2018). SuperSU - Android Apps on Google Play. https:
//play.google.com/store/apps/details?id=eu.chainre.supersu.
[4] Andrey Belenko and Dmitry Sklyarov. 2012. “Secure Password Managers” and
“Military-Grade Encryption” on Smartphones: Oh, Really? https://www.elcomsoft.
com/WP/BH-EU-2012-WP.pdf.
[5] Android Developers. (accessed Feb 02, 2018). Saving Files - Choose Internal or
External Storage. https://developer.android.com/training/data-storage/les.html#
InternalVsExternalStorage.
[6] Andy Boxall. 2015 (accessed Feb 06, 2018).
ers in China have rooted their device.
80-android-phone-owners-china-rooted-device/.
80% of Android phone own-
http://www.businessofapps.com/
[7] Daniel J Bernstein. 2005 (accessed Sep 19, 2018). Cache-timing attacks on AES.
https://cr.yp.to/antiforgery/cachetiming-20050414.pdf
[8] Alex Biryukov, Gaëtan Leurent, and Arnab Roy. 2012. Cryptanalysis of the
“kindle” cipher. In International Conference on Selected Areas in Cryptography.
Springer, 86–103.
[9] A. Blaich and A. Striegel. 2009. Is High Denition a natural DRM?. In Proceedings
of 18th International Conference on Computer Communications and Networks. 1–4.
[10] Jerey A Bloom and Christos Polyzois. 2004. Watermarking to track motion
picture theft. In Signals, Systems and Computers, 2004. Conference Record of the
Thirty-Eighth Asilomar Conference on, Vol. 1. IEEE, 363–367.
[11] Laurence Boney, Ahmed H Tewk, and Khaled N Hamdy. 1996. Digital water-
marks for audio signals. In Multimedia Computing and Systems, 1996., Proceedings
of the Third IEEE International Conference on. IEEE, 473–480.
[12] Joseph Bonneau and Ilya Mironov. 2006. Cache-collision timing attacks against
AES. In International Workshop on Cryptographic Hardware and Embedded Systems.
Springer, 201–215.
[13] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan
Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache
Attacks Are Practical. In 11th USENIX Workshop on Oensive Technologies.
[14] Chainre. 2012 (accessed Feb 07, 2018). [CENTRAL] CF-Auto-Root. https://forum.
xda-developers.com/showthread.php?t=1980683.
[15] Collin Mulliner and John Kozyrakis. 2017 (accessed Feb 06, 2018).
Inside An-
droid’s SafetyNet Attestation. https://www.blackhat.com/docs/eu-17/materials/
eu-17-Mulliner-Inside-Androids-SafetyNet-Attestation.pdf.
[16] Scott Crosby, Ian Goldberg, Robert Johnson, Dawn Song, and David Wagner.
2001. A cryptanalysis of the high-bandwidth digital content protection system.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
S. Chau et al.
In ACM Workshop on Digital Rights Management. Springer, 192–200.
[17] David Ruddock. 2014 (accessed Feb 06, 2018).
[Weekend Poll] Is Your Pri-
http://www.androidpolice.com/2014/11/23/
mary Android Device Rooted?
weekend-poll-is-your-primary-android-device-rooted-2/.
[18] X de Carné de Carnavalet and Mohammad Mannan. 2016. Killed by proxy:
Analyzing client-end TLS interception software. In Proc. Network and Distributed
System Security Symposium (NDSS).
[19] Zhui Deng, Xiangyu Zhang, and Dongyan Xu. 2013. Spider: Stealthy binary pro-
gram instrumentation and debugging via hardware virtualization. In Proceedings
of the 29th Annual Computer Security Applications Conference. ACM, 289–298.
[20] doridori. 2017 (accessed Feb 06, 2018). Android-Security-Reference/TEE.md.
https://github.com/doridori/Android-Security-Reference/blob/master/
hardware/TEE.md.
[21] Zakir Durumeric, Zane Ma, Drew Springall, Richard Barnes, Nick Sullivan, Elie
Bursztein, Michael Bailey, J Alex Halderman, and Vern Paxson. 2017. The security
impact of HTTPS interception. In Proc. Network and Distributed System Security
Symposium (NDSS).
[22] Editors of Inc. 2017. MAZ Systems - New York, NY. (2017). https://www.inc.
com/prole/maz-systems
[23] F Falcon and N Riva. 2012. Dynamic binary instrumentation frameworks: I know
you’re there spying on me. In Reverse Engineering Conference.
[24] Paolo Gasti and Kasper B. Rasmussen. 2012. On the Security of Password Manager
Database Formats. In Computer Security – ESORICS 2012. Springer, 770–787.
[25] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel, and Tilo Müller. 2017.
Cache attacks on Intel SGX. In Proceedings of the 10th European Workshop on
Systems Security. ACM.
[26] Christian Grotho, Krista Grotho, Ryan Stutsman, Ludmila Alkhutova, and
Mikhail Atallah. 2009. Translation-based steganography. Journal of Computer
Security 17, 3 (2009), 269–303.
[27] J Alex Halderman, Seth D Schoen, Nadia Heninger, William Clarkson, William
Paul, Joseph A Calandrino, Ariel J Feldman, Jacob Appelbaum, and Edward W
Felten. 2008. Lest we remember: cold boot attacks on encryption keys. In 17th
USENIX Security Symposium. 45–60.
[28] Jian Huang, Jun Xu, Xinyu Xing, Peng Liu, and Moinuddin K. Qureshi. 2017.
FlashGuard: Leveraging Intrinsic Flash Properties to Defend Against Encryption
Ransomware. In Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’17). 2231–2244.
[29] Amin Kharaz, Sajjad Arshad, Collin Mulliner, William Robertson, and Engin Kirda.
2016. UNVEIL: A Large-Scale, Automated Approach to Detecting Ransomware.
In 25th USENIX Security Symposium. 757–772.
[30] Amin Kharraz, William Robertson, Davide Balzarotti, Leyla Bilge, and Engin Kirda.
2015. Cutting the gordian knot: A look under the hood of ransomware attacks.
In 12th Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment (DIMVA 2015). Springer, 3–24.
[31] Eugene Kolodenker, William Koch, Gianluca Stringhini, and Manuel Egele. 2017.
PayBreak: Defense Against Cryptographic Ransomware. In Proceedings of the
2017 Asia Conference on Computer and Communications Security (ASIA CCS ’17).
599–611.
[32] Xiaoning Li and Kang Li. 2014. Defeating the transparency features of dynamic
binary instrumentation. BlackHat US. (2014).
[33] Magisk Manager. 2018 (accessed Feb 06, 2018). Download Magisk Manager Latest
https://magiskmanager.com/#Magisk_Root_
Version 5.5.5 For Android 2018.
Universal_Systemless_Interface.
[34] Jingran Wang Matt Joseph and contributors. 2016. RootCloak. (2016). https:
//github.com/devadvance/rootcloak
2010
[35] mediaarcadmin.
(accessed
ios_stack/Sources/Classes/DRM/drmenvelope.h.
mediaarcadmin/ios_stack/blob/master/Sources/Classes/DRM/drmenvelope.h.
2018).
https://github.com/
[36] Microsoft Corporation. 2015 (accessed Feb 07, 2018). Microsoft PlayReady Content
Protection Technology. https://www.microsoft.com/playready/documents/.
[37] Microsoft Corporation. 2017 (accessed Feb 07, 2018). PlayReady Header Specica-
Jan
29,
tion. https://www.microsoft.com/playready/documents/.
[38] Najmeh Miramirkhani, Mahathi Priya Appini, Nick Nikiforakis, and Michalis
Polychronakis. 2017. Spotless sandboxes: Evading malware analysis systems
using wear-and-tear artifacts. In IEEE Symposium on Security and Privacy.
[39] MITRE Corporation. 2018 (accessed Feb 05, 2018). CVE-2018-5686. https://cve.
mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-5686.
[40] Bernhard Mueller and Sven Schleier. 2018. OWASP Mobile App Security
Requirements and Verication v 1.0.
(2018). https://github.com/OWASP/
owasp-masvs/releases/download/1.0/OWASP_Mobile_AppSec_Verication_
Standard_v1.0.pdf
[41] Nahuel Cayetano Riva. 2015 (accessed Feb 06, 2018). Anti-instrumentation tech-
niques: I know you’re there, Frida! https://crackinglandia.wordpress.com/2015/11/
10/anti-instrumentation-techniques-i-know-youre-there-frida/.
[42] Zhenyu Ning and Fengwei Zhang. 2017. Ninja: Towards Transparent Tracing
and Debugging on ARM. In 26th USENIX Security Symposium. 33–49.
[43] Bradley Reaves, Nolen Scaife, Adam M Bates, Patrick Traynor, and Kevin RB
Butler. 2015. Mo (bile) Money, Mo (bile) Problems: Analysis of Branchless Banking
Applications in the Developing World.. In USENIX Security Symposium. 17–32.
[44] Rohit Salecha. 2017 (accessed Feb 06, 2018). Pentesting Android Apps Using Frida.
https://www.notsosecure.com/pentesting-android-apps-using-frida/.
[45] Ryne Hager. 2017 (accessed Feb 06, 2018). Google may have updated SafetyNet
detection, breaking some root hiding. http://www.androidpolice.com/2017/06/14/
google-may-updated-safetynet-detection-breaking-root-hiding-methods/.
[46] Ryne Hager. 2017 (accessed Feb 06, 2018).
again, but a x is in the works.
safetynet-can-detect-magisk-x-works/.
SafetyNet can detect Magisk
http://www.androidpolice.com/2017/07/16/
[47] N. Scaife, H. Carter, P. Traynor, and K. R. B. Butler. 2016. CryptoLock (and Drop
It): Stopping Ransomware Attacks on User Data. In 2016 IEEE 36th International
Conference on Distributed Computing Systems (ICDCS). 303–312.
[48] Daniele Sgandurra, Luis Muñoz-González, Rabih Mohsen, and Emil C Lupu. 2016.
Automated dynamic analysis of ransomware: Benets, limitations and use for
detection. arXiv preprint arXiv:1609.03020 (2016).
[49] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino,
Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel,
and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Oensive Techniques
in Binary Analysis. In IEEE Symposium on Security and Privacy.
[50] David Silver, Suman Jana, Dan Boneh, Eric Chen, and Collin Jackson. 2014.
Password Managers: Attacks and Defenses. In 23rd USENIX Security Symposium.
449–464.
[51] Synk Security Team. 2018. Zip Slip Vulnerability. (2018). https://github.com/
snyk/zip-slip-vulnerability
[52] Mercan Topkara, Umut Topkara, and Mikhail J Atallah. 2007. Information hiding
through errors: a confusing approach. In Security, Steganography, and Water-
marking of Multimedia Contents IX, Vol. 6505. International Society for Optics
and Photonics.
[53] Ruoyu Wang, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna.
2013. Steal This Movie: Automatically Bypassing DRM Protection in Streaming
Media Services. In USENIX Security Symposium. 687–702.
A APPENDIX
A.1 Legal and Ethical Matters
First and foremost, this research is denitely not aimed at assisting
piracy. We have not and will not distribute any code and other
artifacts used in conducting the experiments.
As this research was done inside the United States, it is our
understanding that the DMCA security research exemption [2]
should be applicable. We believe what we did in this paper meets
the four main requirements for the said exemption: 1) the apps and
the device of which the apps were running on were all lawfully
acquired; 2) the experiments were done solely for the purpose of
good-faith security research; 3) the research was conducted in a
controlled setting designed to avoid harm to individuals or the public;
4) the research did not begin before October 28, 2016.
For ethical reasons, after an attack has been demonstrated to
be working, we stop our experiments and did not perform mass
content extraction for our personal gains. For example, in the case of
Amazon Music, we tried content decryption on only four songs, in
order to gain condence that decryption with the same key would
work on songs that are: 1) from dierent tiers of subscription;
2) stored on the same device but dierent albums; 3) stored on
dierent devices. Similarly, for each of the group-7–8 apps, we
only downloaded 2 random pages from 2 magazine issues. The
extracted raw contents (e.g., audio tracks and magazine pages) have
been subsequently deleted. We have also engaged in responsible
disclosure with the app vendors, demonstrating good-faith.
A.2 Table of Apps and CWEs
The complete list of publication apps that we studied can be found
at the end of this paper in Table 1. The list of CWEs discussed in
this paper can be found in Table 2.
247
Why Johnny Can’t Make Money With His Contents:
Pitfalls of Designing and Implementing Content Delivery Apps
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Table 1: List of content distribution apps studied in this paper
App Name
Version
Publisher
† Latest In-App
Issue Cover Date
Latest In-App
Issue Price ($)
‡ Category
‡ Installs
Attacks and Adversaries
Discussed v
The Raspberry Pi
Foundation
Business Money
Promotions
The Chelsea Magazine
Company
MS-UK
Company
The Chelsea Magazine
Group-1 Apps (Vendor: Apazine)
3.99
Apr, 2018
Mar, 2018
Jun, 2018
Jan/Feb 2018
Spring, 2018
14.99
5.99
3.99
7.49
News & Magazines
50000+
News & Magazines
Lifestyle
News & Magazines
Lifestyle
1000+
1000+
100+
50+
EVA (Sect. 3.1, ANet(Sni))
PBA (Sect. 3.2, ANet(Sni))
PBA (Sect. 4.1, AExS(R))
KEA (Sect. 4.3, AExS(R))
Communications
International Group