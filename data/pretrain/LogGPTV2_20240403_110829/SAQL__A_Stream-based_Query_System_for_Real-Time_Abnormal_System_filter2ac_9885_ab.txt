nection events.
Entities and events have various attributes (Tables 1
and 2). The attributes of an entity include the properties
to describe the entities (e.g., ﬁle name, process name,
and IP addresses), and the unique identiﬁers to distin-
guish entities (e.g., ﬁle data ID and process ID). The at-
tributes of an event include event origins (i.e., agent ID
and start time/end time), operations (e.g., ﬁle read/write),
and other security-related properties (e.g., failure code).
In particular, agent ID refers to the unique ID of the host
where the entity/event is collected.
USENIX Association
27th USENIX Security Symposium    641
Table 2: Representative attributes of system events
Read/Write, Execute, Start/End, Rename/Delete.
Operation
Start Time/End Time, Event Sequence
Time/Sequence
Misc.
Subject ID, Object ID, Failure Code
2.2 SAQL Queries for Anomalies
We next present how to use SAQL as a uniﬁed interface
to specify various types of abnormal system behaviors.
Rule-based Anomaly: Advanced cyber attacks typi-
cally include a series of steps that exploit vulnerabilities
across multiple systems for stealing sensitive informa-
tion [2, 1]. Query 1 shows a SAQL query for describing
an attack step that reads external network (evt1), down-
loads a database cracking tool gsecdump.exe (evt2
), and executes (evt3) it to obtain database credentials.
It also speciﬁes these events should occur in ascending
temporal order (Line 4).
1 proc p1 read || write ip i1[src_ip != "
internal_address"] as evt1
2 proc p2["%powershell.exe"] write file f1["%gsecdump.
3 proc p3["%cmd.exe"] start proc p4["%gsecdump.exe"] as
exe"] as evt2
evt3
4 with evt1 -> evt2 -> evt3
5 return p1, i1, p2, f1, p3, p4 // p1 -> p1.exe_name,
i1 -> i1.dst_ip, f1 -> f1.name
Query 1: A rule-based SAQL query
Time-Series Anomaly: SAQL query provides the con-
structs of sliding windows to enable the speciﬁcation
of time-series anomaly models. For example, a SAQL
query may monitor the amount of data sent out by certain
processes and detect unexpectedly large amount of data
transferred within a short period. This type of query can
detect network spikes [24, 26], which often indicates a
data exﬁltration. Query 2 shows a SAQL query that mon-
itors network usage of each application and raises an alert
when the network usage is abnormally high. It speciﬁes a
10-minute sliding window (Line 1), collects the amount
of data sent through network within each window (Lines
2-4), and computes the moving average to detect spikes
of network data transfers (Line 5). In the query, ss[0]
means the state of the current window while ss[1] and
ss[2] represent the states of the two past windows respec-
tively (ss[2] occurs earlier than ss[1]). Existing stream
query systems and anomaly systems [51, 59, 30] lack
the expressiveness of stateful computation in sliding win-
dows to support such anomaly models.
1 proc p write ip i as evt #time(10 min)
2 state[3] ss {
3
4 } group by p
5 alert (ss[0].avg_amount > (ss[0].avg_amount + ss[1].
avg_amount := avg(evt.amount)
avg_amount + ss[2].avg_amount) / 3) && (ss[0].
avg_amount > 10000)
6 return p, ss[0].avg_amount, ss[1].avg_amount, ss[2].
avg_amount
Query 2: A time-series SAQL query
Invariant-based Anomaly: Invariant-based anomalies
capture the invariants during training periods as models,
and use the models later to detect anomalies. To achieve
invariant-based anomaly detection, SAQL provides con-
structs of invariant models and learning speciﬁcs to de-
ﬁne and learn invariants of system behaviors, which al-
lows users to combine both stateful computation and in-
variants learned under normal operations to detect more
types of abnormal system behaviors [35]. Query 3 shows
a SAQL query that speciﬁes a 10-second sliding window
(Line 1), maintains a set of child processes spawned by
the Apache process (Lines 2-4), uses the ﬁrst ten time
windows for training the model (Lines 5-8), and starts to
detect abnormal child processes spawned by the Apache
process (Line 10). The model speciﬁed in the Lines 5-8
is the set of names of the processes forked by the Apache
process in the training stage. During the online detec-
tion phase, this query generates alerts when a process
with a new name is forked by the Apache process. Gen-
eral stream query systems without the support of stateful
computation and invariant models cannot express such
types of anomaly models. Note that the invariant deﬁni-
tion allows multiple aggregates to be deﬁned.
1 proc p1["%apache.exe"] start proc p2 as evt #time(10
s)
set_proc := set(p2.exe_name)
2 state ss {
3
4 } group by p1
5 invariant[10][offline] {
6
7
8 }
9 alert |ss.set_proc diff a| > 0
10 return p1, ss.set_proc
a := empty_set // invariant init
a = a union ss.set_proc //invariant update
Query 3: An invariant-based SAQL query
Outlier-based Anomaly: Outlier-based anomalies al-
low users to identify abnormal system behavior through
peer comparison, e.g., ﬁnding outlier processes by com-
paring the abnormal processes with other peer processes.
To detect outlier-based anomalies, SAQL provides con-
structs of outlier models to deﬁne which information in
a time window forms a multidimensional point and com-
pute clusters to identify outliers. Query 4 shows a SAQL
query that (1) speciﬁes a 10-minute sliding window (Line
2), (2) computes the amount of data sent through net-
work by the sqlservr.exe process for each outgoing IP
address (Lines 3-5), and (3) identiﬁes the outliers using
DBSCAN clustering (Lines 6-8) to detect the suspicious
IP that triggers the database dump. Note that Line 6 spec-
iﬁes which information of the state forms a point and
how the “distance” among these points should be com-
puted (“ed” representing Euclidean Distance). These lan-
guage constructs enable SAQL to express models for peer
comparison, which has limited support from the existing
querying systems where only simple aggregation such as
max/min are supported [51, 20, 12].
642    27th USENIX Security Symposium
USENIX Association
Figure 2: The architecture of SAQL system
1 agentid = 1 // sqlserver host
2 proc p["%sqlservr.exe"] read || write ip i as evt #
time(10 min)
amt := sum(evt.amount)
3 state ss {
4
5 } group by i.dstip
6 cluster(points=all(ss.amt), distance="ed", method="
DBSCAN(100000, 5)")
7 alert cluster.outlier && ss.amt > 1000000
8 return i.dstip, ss.amt
Query 4: An outlier-based SAQL query using clustering
In addition to querying outliers through clustering,
SAQL also supports querying through aggregation com-
parison. For example, in Query 4, replacing the alert
statement with alert ss.amt>1.5*iqr(all(ss.amt))+q3(
all(ss.amt)) gives interquartile range (IQR)-based out-
lier detection [38], and replacing the alert statement
with alert ss.amt>3*stddev(all(ss.amt))+avg(all(ss.amt
)) gives 3-sigma-based outlier detection [38]. SAQL also
supports querying outliers through sorting, and reports
top sorted results as alerts, which is useful in querying
most active processes or IP addresses.
3 System Overview and Threat Model
Figure 2 shows the SAQL system architecture. We de-
ploy monitoring agents across servers, desktops and lap-
tops in the enterprise to monitor system-level activities
by collecting information about system calls from ker-
nels. System monitoring data for Windows, Linux, and
Mac OS are collected via ETW event tracing [13], Linux
Audit Framework [15], and DTrace [8]. The collected
data is sent to the central server, forming an event stream.
The SAQL system takes SAQL queries from users, and
reports the detected alerts over the event stream. The sys-
tem consists of two components: (1) the language parser,
implemented using ANTLR 4 [3], performs syntactic
and semantic analysis of the input queries and generates
an anomaly model context for each query. An anomaly
model context is an object abstraction of the input query
that contains all the required information for the query
execution and anomaly detection; (2) the execution en-
gine, built upon Siddhi [20], monitors the data stream
and reports the detected alerts based on the execution of
the anomaly model contexts.
The execution engine has four sub-modules: (1) the
multievent matcher matches the events in the stream
against the event patterns speciﬁed in the query; (2) the
state maintainer maintains the states of each sliding win-
dow computed from the matched events; (3) the concur-
rent query scheduler divides the concurrent queries into
groups based on the master-dependent-query scheme
(Section 5.2) to minimize the need for data copies; (4)
the error reporter reports errors during the execution.
Threat Model: SAQL is a stream-based query system
over system monitoring data, and thus we follow the
threat model of previous works on system monitoring
data [63, 64, 69, 68, 32, 50]. We assume that the system
monitoring data collected from kernel space [15, 13] are
not tampered, and that the kernel is trusted. Any kernel-
level attack that deliberately compromises security audit-
ing systems is beyond the scope of this work.
We do consider that insiders or external attackers have
full knowledge of the deployed SAQL queries and the
anomaly models. They can launch attacks with seem-
ingly “normal” activities to evade SAQL’s anomaly de-
tection, and may hide their attacks by mimicking peer
hosts’ behaviors to avoid SAQL’s outlier detection.
4 SAQL Language Design
SAQL is designed to facilitate the task of expressing
anomalies based on the domain knowledge of experts.
SAQL provides explicit constructs to specify system en-
tities/events, as well as event relationships. This facili-
tates the speciﬁcation of rule-based anomalies to detect
known attack behaviors or enforce enterprise-wide se-
curity policies. SAQL also provides constructs for slid-
ing windows and stateful computation that allow stateful
anomaly models to be computed in each sliding window
over the data stream. This facilitates the speciﬁcation
of time-series anomalies, invariant-based anomalies, and
outlier-based anomalies, which lack support from exist-
ing stream query systems and stream-based anomaly de-
USENIX Association
27th USENIX Security Symposium    643
Rule-based QueriesSAQL SystemParserMultieventMatcherState MaintainerSAQL Execution EngineConcurrentQuerySchedulerError ReporterAnomaliesSystemeventsSystemEvent StreamTime-SeriesQueriesInvariant-basedQueriesOutlier-basedQueriestection systems. Grammar 1 shows the representative
rules of SAQL. We omit the terminal symbols.
(cid:104)saql(cid:105)
::= ((cid:104)global cstr(cid:105))* ((cid:104)evt patt(cid:105))+ (cid:104)temp rel(cid:105)?
(cid:104)return(cid:105)
(cid:104)groupby(cid:105)?
(cid:104)alert(cid:105)?
(cid:104)state(cid:105)?
(cid:104)sortby(cid:105)? (cid:104)top(cid:105)?
::= (cid:104)int(cid:105) | (cid:104)ﬂoat(cid:105)
::= (cid:104)int(cid:105) | (cid:104)ﬂoat(cid:105) | (cid:104)string(cid:105)
::= ‘(’ (cid:104)val(cid:105) (‘,’ (cid:104)val(cid:105))* ‘)’
::= (cid:104)letter(cid:105)((cid:104)letter(cid:105) | (cid:104)digit(cid:105))*
::= (cid:104)id(cid:105) (‘[’ (cid:104)int(cid:105) ‘]’)? (‘.’ (cid:104)id(cid:105))?
Data types:
(cid:104)num(cid:105)
(cid:104)val(cid:105)
(cid:104)val set(cid:105)
(cid:104)id(cid:105)
(cid:104)attr(cid:105)
Multievent pattern matching:
(cid:104)global cstr(cid:105) ::= (cid:104)attr exp(cid:105)
(cid:104)evt patt(cid:105)
(cid:104)entity(cid:105)
(cid:104)op exp(cid:105)
::= (cid:104)entity(cid:105) (cid:104)op exp(cid:105) (cid:104)entity(cid:105) (cid:104)evt(cid:105)? (cid:104)wind(cid:105)?
::= (cid:104)entity type(cid:105) (cid:104)id(cid:105) (‘[’ (cid:104)attr exp(cid:105)‘]’)?
::= (cid:104)op(cid:105)
|
|
|
::= ‘as’ (cid:104)id(cid:105) (‘[’ (cid:104)attr exp(cid:105)‘]’)?
::= ‘#’ (cid:104)time wind(cid:105) | (cid:104)length wind(cid:105)
::= ‘time’
‘!’(cid:104)op exp(cid:105)
(cid:104)op exp(cid:105) (‘&&’ | ‘||’) (cid:104)op exp(cid:105)
‘(’ (cid:104)op exp(cid:105) ‘)’
(cid:104)num(cid:105)
(cid:104)time unit(cid:105)‘)’
(cid:104)evt(cid:105)
(cid:104)wind(cid:105)
(cid:104)time wind(cid:105)
(cid:104)length wind(cid:105) ::= ‘length’ ‘(’ (cid:104)int(cid:105)‘)’
(cid:104)attr exp(cid:105)
(‘[’(cid:104)num(cid:105) (cid:104)time unit(cid:105)‘]’)?
‘(’
::= (cid:104)attr(cid:105) | (cid:104)val(cid:105)
|
|
|
|
|
|
|
|
|
::= ‘with’ (cid:104)id(cid:105) ((‘->’|‘<-’) (‘[’ (cid:104)num(cid:105) ‘-’
(cid:104)attr exp(cid:105) (cid:104)bop(cid:105) (cid:104)attr exp(cid:105)
(cid:104)attr exp(cid:105) (‘&&’ | ‘||’) (cid:104)attr exp(cid:105)
‘!’(cid:104)attr exp(cid:105)
‘(’ (cid:104)attr exp(cid:105) ‘)’
(cid:104)attr(cid:105) ‘not’? ‘in’ (cid:104)val set(cid:105)
(cid:104)agg func(cid:105)
(cid:104)attr exp(cid:105))*‘)’
(cid:104)attr exp(cid:105) (cid:104)set op(cid:105) (cid:104)attr exp(cid:105)
‘|’ (cid:104)attr exp(cid:105) ‘|’
(cid:104)peer ref(cid:105) ‘(’ (cid:104)attr exp(cid:105)‘)’
(cid:104)num(cid:105) (cid:104)time unit(cid:105)‘]’)? (cid:104)id(cid:105))+
(cid:104)attr exp(cid:105)
(‘,’
‘(’
4.1 Multievent Pattern Matching
SAQL provides the event pattern syntax (in the format
of {subject-operation-object}) to describe system activ-
ities, where system entities are represented as subjects
and objects, and interactions are represented as opera-
tions initiated by subjects and targeted on objects. Be-
sides, the syntax directly supports the speciﬁcation of
event temporal relationships and attribute relationships,