## 前言
看到wonderkun师傅的新更的一篇[博客](http://wonderkun.cc/index.html/?p=747)，写[35c3CTF](https://35c3ctf.ccc.ac/challenges/)中的一道题：利用chrome
XSS Auditor机制，进行盲注，特别好玩儿。
博客简明扼要，但我这个前端瞎子看不太懂后半部分，留下了不懂技术的泪水……好在国外有位大表哥把解题思路写了出来，自己在摸索中收获颇多，于是打算写篇文章，把其中涉及的基础知识介绍一下。
一来，介绍这个不算严重，但在Web2.0厚客户端背景下， **有点儿意思** 的漏洞；  
二来，安利一下35c3CTF这个高水平、高质量的国际赛事。
## 题目背景
//很幸运，写文的时候题目环境还没关，
这道题在比赛期间，只有5支队伍成功做出来  
题目说明：  
从中我们可以得知，题目考察chrome-headless相关知识点，浏览器特性相关的话，大概率是XSS。
浏览一下`https://filemanager.appspot.com`  
（PS：CTF的好习惯，“访问任何题目地址，都顺便用源码泄露扫一遍；见到任何框框，都随便用sqlmap插一下”，在这道题里，不存在敏感信息泄露和SQL注入，所以就不再赘述了。）
填入admin之后，正常进入管理页面，可以任意登录admin？？原来网站是依赖Session识别用户，把session对应的资源展示出来，所以即使页面显示你是admin，也拿不到真正admin用户的资源。  
页面上有两个功能，一个查找文件，一个创建文件：
不好意思……本能地写一句话
文件创建成功，但貌似只是一个普通的文本，没有解析  
因为有`?filename=`，尝试一下文件读取，emmmm，放心，肯定是失败的（不然本文题目就不会是XSS盲注了，23333
后端代码解析不了，试试前端代码呗~发现还是没有任何解析  
那大概率就是xss了~
### DOM XSS
右击！查看源码！（PPS：这么晚才看前端源码，只是因为...我,似鸽前端瞎 ；我,没得感情）
这个看似神秘的地方，作用就是
  1. 给/create接口传个POST请求，把文件名和内容传过去
  2. 在页面添加一个指向该（假）文件的超链接  
像这样：
（PPPS：由于写入的POST请求携带了XSRF头，所以无法进行CSRF攻击
暂定create接口和超链接没问题，再看下search接口：
这里我们尝试搜索一些常用的关键字，如flag/root/admin等，当搜索`php`关键字时，可以看到有特殊回显，查看源码，发现有一段JavaScript代码，将我们搜索的内容赋给了q变量，随后使用DOM的方式输出到标签中。  
为什么只有php会有回显呢？因为我们在之前测试的时候，插入了php一句话密码的文本进去。也就是说，这里的`search`是一个文本搜索功能，当搜索到关键字时，返回被搜索到的文件内容，并把搜索关键字区域高亮显示。  
我们确定一下，这里是否存在漏洞，  
直接插入``然后搜索：  
发现尖括号被HTML实体编码了。尝试js十六进制编码绕过：  
js十六进制编码：
    str="";
    len=str.length;
    arr=[];
    for(var i=0;i 0){
                iframes[0].parentNode.removeChild(iframes[0]);
              }
              resolve();
            }};
            that.scan = function(){
              var port = that.q.shift(), id = 'firefox'+(that.pos%1000), iframe = document.getElementById(id) ? document.getElementById(id) : document.createElement('iframe'), timer;
              iframe.style.display = 'none';
              iframe.id = id;
              iframe.src = that.url + ":" + port;
              iframe.className = 'firefox';
              that.updateProgress(port);
              iframe.onload = function(){
                  that.openPorts.push(port);
                  clearTimeout(timer);
                  that.next();
              };
              timer = setTimeout(function(){
                that.next();
              }, 50);
              if(!document.body.contains(iframe)) {
                document.body.appendChild(iframe);
              }
            };
            that.scan();
        });
        return promise;
      }
创建1000个iframe异步/多线程地探测端口，可以试一下[Gareth
Heyes](https://portswigger.net/blog/exposing-intranets-with-reliable-browser-based-port-scanning)师傅的[Demo](http://portswigger-labs.net/portscan/)。  
可以看到探测的速度很快：  
[
但Chrome相对于Firefox有一些不同，提高了探测的难度。Chrome中即使访问对象不存在，也会返回success~只不过这个Success是Chrome浏览器特权域`chrome-error://chromewebdata/`的。大概是谷歌的安全研究员想要通过这种方式保护用户吧。  
但我们可以通过另一种[技巧](https://portswigger.net/blog/exposing-intranets-with-reliable-browser-based-port-scanning)来绕过这种保护：  
在前端中，iframe去请求一个页面，会触发onload事件，在Chrome中，无论目标端口是否开放，都会成功触发onload，只不过一个是目标端口成功加载的onload，一个是特权域`chrome-error://chromewebdata/`成功加载的onload。但在这时，如果我们在Url上加入一个锚定符`#`，再次加载，对于端口开放的页面，因为是同一个页面，所以onload事件不会再次加载。而对于端口不开放的页面，因为Url已经从目标页面换成了`chrome-error://chromewebdata/`，所以Onload事件会再次加载。  
这个差异就能被用来判断端口是否开放。
利用代码如下所示：
    async scanChromeWindows() {
        var that = this;
        let promise = new Promise(function(resolve,reject){
            that.hooks = {oncomplete:function(){
              var iframes = document.getElementsByClassName('chrome');
              while(iframes.length > 0){
                iframes[0].parentNode.removeChild(iframes[0]);
              }
              resolve();
            }};
            that.scan = function(){
              var port = that.q.shift(), id = 'chrome'+(that.pos%500), iframe = document.getElementById(id) ? document.getElementById(id) : document.createElement('iframe'), timer, calls = 0;
              iframe.style.display = 'none';
              iframe.id = iframe.name = id;
              iframe.src = that.url + ":" + port;
              iframe.className = 'chrome';
              that.updateProgress(port);