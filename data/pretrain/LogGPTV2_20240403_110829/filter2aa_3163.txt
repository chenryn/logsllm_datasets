BeaconEye的技术原理
0x00 前言
刚开始，群里小伙伴讨论BeaconEye的时候，我不以为然，无外乎就是内存扫描嘛，对抗手法一大堆，
分分钟给他搞搞失效。
最后呢，在我仔细研究之后，以后再也不敢装逼了。
0x01 前置知识
由于我二进制也是个菜逼，搞清楚BeaconEye需要掌握一些前置知识：
windows内存管理API
通过这个图我们知道，我们经常使用malloc等c库函数实际操作的是堆内存，而堆内存来源于虚拟内存。
这儿重点就在于堆内存的管理。在windows种堆内存是共享资源，是被所有线程共享的资源，因此不管
是主线程还是子线程，使用malloc等函数分配的内存都是在堆内存里面划出的一块儿区域，这个区域还
能被多个线程操作。
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 1 / 4 - Welcome to www.red-team.cn
这个堆内存的创建有2种方式，1种是进程创建的时候，系统会自动创建一个堆内存（默认堆），第2种
是程序使用HeapCreate等堆操作的函数自己创建。不管是系统创建还是自己创建的堆都可以通过PEB找
到堆内存的地址。
这就是BeaconEye的思路，通过PEB去查找堆地址，然后使用yara规则扫描堆内存。那为什么堆内存里
面有Beacon的配置信息呢？@d_infinite 同学的文章https://mp.weixin.qq.com/s/mh8iYU6lQohsVrIN
M2uvCg，详细的说了Beacon配置信息的组成以及被写入堆的过程，重点就是下图，这个就是
beacon.dll自身代码（引用@d_infinite 同学的图）：
我框住的内存分配函数，是的beacon.dll把自身配置写入到了堆内存中，而且是解密以后写入的，因此
在堆上beacon配置是明文的。
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 2 / 4 - Welcome to www.red-team.cn
我们通过以上思路基本让我们的植入体无处遁形。我们常见的对抗方式，大多以休眠加密混淆、修改内
存权限、抹去关键函数、花指令等等等，以上的对抗手法大多是针对beacon.dll在内存中的留存形式上
对抗，而beacon自身代码执行留下的痕迹，在不能自定义beacon的情况下很难操作beacon自身代码行
为，因此BeaconEye的这个思路（思路挺好，但是程序实现有小BUG，以及3.x版本yara规则也需要修
改）在4.3以及以前版本，真是神挡杀人、佛挡杀佛。我们只能修改beacon.dll代码让它不在堆上去保存
明文的beacon配置。而这需要cs4.4。
0x02 Beacon代码实现
堆内存查找，这涉及到PEB的数据结构以及堆的数据结构，小伙伴们自行google学习：
这个过程被@WBGlll发现了一个BUG，这也是为什么我们很多小伙伴在测试远程线程注入beacon的时
候，没有被侦测到的问题根源，原文：https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-gong-ji-fan
g-yu/untitled-1，@WBGlll大哥修改后的代码：
        public List Heaps { get {
                int numHeaps;
                long heapArray;
                if (Is64Bit) {
                    numHeaps = ReadMemory(PebAddress + 0xE8);
                    heapArray = ReadPointer(PebAddress + 0xF0);
                } else {
                    numHeaps = ReadMemory(PebAddress + 0x88);
                    heapArray = ReadPointer(PebAddress + 0x90);
                }
                var heaps = new List();
                for (int idx = 0; idx  Heaps { get {
                int numHeaps;
                long heapArray;
                if (Is64Bit) {
                    numHeaps = ReadMemory(PebAddress + 0xE8);
                    heapArray = ReadPointer(PebAddress + 0xF0);
                } else {
                    numHeaps = ReadMemory(PebAddress + 0x88);
                    heapArray = ReadPointer(PebAddress + 0x90);
                }
                var heaps = new List();
                for (int idx = 0; idx < numHeaps; ++idx)
                {
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 3 / 4 - Welcome to www.red-team.cn
0x03 总结
以前我始终认为静态yara的扫描方式是很容易绕过的，但是这次更新了我的认知，在万事万物中寻找不
变，特征扫描永不过时。但是随着CS4.4自定义beacon的出现，这种方式也有了很好的对抗方法。攻防
永远没有一招鲜的方式方法，不管是公鸡还是防御。公鸡队小伙伴不要把所有精力都放在学习攻击技术
上，了解防御原理，也是非常重要的。
                    var heap = ReadPointer((ulong)(heapArray + (idx * (Is64Bit ? 
8 : 4))));
                    var temp = ReadPointer((ulong)heap + 0x18);
                    var temp1 = ReadPointer((ulong)heap + 0x18+8);
                    do
                    {
                        if (ReadPointer((ulong)temp)== 
ReadPointer((ulong)temp1))
                        {
                            heaps.Add(temp);
                            break;
                     }
                        heaps.Add(temp);
                     temp = ReadPointer((ulong)temp + 8);
                    } while (temp1 != temp);
                }
                return heaps;
            }
        }
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 4 / 4 - Welcome to www.red-team.cn