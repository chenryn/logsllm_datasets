its part, VRASED is shown secure according to Definition 3.2 as
long as HMAC is a secure, i.e., existentially unforgeable [32], MAC
(see [10] for details). The proof of Theorem 5.1 is presented in
Appendix B.
Theorem 5.1. Construction 1 is TOCTOU-Secure according to
Definition 4.1 as long as VRASED is secure according to Definition 3.2.
5.2 RAT AA: Implementation & Verification
Construction 1 (and respective security proof) assumes that proper-
ties in Equations 11 and 12 are enforced by RAT AA. Figure 5 shows
a formally verified FSM corresponding to this implementation. It
enforces two properties of Equations 11 and 12. This FSM is imple-
mented as a Mealy machine, where output changes anytime based
on both the current state and current input values. The FSM takes
as an input a subset of signals, shown in Figure 4, and produces
two 1-bit outputs: reset to trigger an immediate reset and setLMT
to control the value of LMT memory location (see Construction 1).
reset is 1 whenever FSM transitions to RESET state and while it
remains in that state; it remains 0 otherwise. Whereas, setLMT is 1
when FSM transitions to MOD state, and becomes 0 whenever it
transitions out of MOD state. setLMT = 0 in all other cases.
The FSM works by monitoring write access to LMT and tran-
sitioning to RESET whenever such attempt happens. When the
system is running (i.e., reset = 0), FSM also monitors write ac-
cess to AR and transitions to MOD state whenever it happens. The
FSM transitions back to NotMOD state if AR is not being modified.
We design the FSM in Verilog HDL and automatically translate
into SMV using Verilog2SMV [33]. Finally, we use NuSMV model
checker [24] to prove that the FSM complies with invariants 11
and 12. The implementation and correspondent verification are
available in [18].
Remark 3: Since deletion is a “write” operation, malware can not
erase itself at runtime without being detected by RAT A. Conversely,
any attempt to reprogram flash (AR) directly via wired connection
requires device re-initialization. Both RAT AA/RAT AB always update
LMT on initialization/reset/reboot. Hence, these modifications are also
detected.
Remark 4: The ability to cause a reset by attempting to write to
LMT yields no advantage for Adv, since any bare-metal software
(including malware) can always trigger a reset on an unmodified
low-end device, e.g., by inducing software faults.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2927Construction 1 (RAT AA). Let LMT be a memory region within AR (LMT ∈ AR):
• RequestVrf→Prv(): Vrf generates a random l-bit challenge Chal ← ${0, 1}l and sends it to Prv.
• AttestPrv→Vrf (Chal): Upon receiving Chal, Prv calls VRASED SW-AttRA function to compute H = H MAC(K DF(K, Chal), AR) and sends tLMT ||H to Vrf,
where tLMT is the value stored in LMT .
At all times, RAT AA hardware in Prv enforces the following invariants:
– LMT is read-only to software:
– LMT is overwritten with the current time from RTC if, and only if, AR is modified:
(12)
where r eset is a 1-bit signal that triggers an immediate reset of the MCU, and setLMT is a 1-bit output signal of RAT AA controlling the value of LMT reserved
memory. Whenever setLMT = 1, LMT is updated with the current value from the real-time clock (RTC). LMT maintains its previous value otherwise.
• VerifyVrf (H, Chal, M, t0, tLMT ): t0 is an arbitrary time chosen by Vrf, as in Definition 4.1. Upon receiving tLMT ||H Vrf checks:
Formal statement (LTL): G{Mod_Mem(LMT) → r eset }
Formal statement (LTL): G{Mod_Mem(AR) ↔ setLMT }
where M is the expected value of AR reflecting LMT = tLMT , as received from Prv. Verify returns 1 if and only if both checks succeed.
tLMT  tP , return 1, otherwise, proceed to step 3;
(3) Set P = (LMT , curr ent _time) and return 0;
Prv. Hence, this checks also assures integrity of LMT in AR. If this check fails, return 0, otherwise, proceed to step 2;
valid response and compromised TOCTOU-Security. For example,
if we use LMT as a dirty-bit (instead of Chal), security can be
subverted in two Request-s, even if they are properly authenticated.
RAT AB is specified in Construction 2. Prv hardware module
controls the value of a 1-bit signal U PLMT . When set to 1, U PLMT
updates LMT with the current value of MR; otherwise, LMT
maintains its current value. RAT AB hardware detects successful
authentication of Vrf by checking whether the program counter
PC points to the instruction reached immediately after successful
authentication. Note that the instruction at location CRauth is
never reached unless authentication succeeds. Unlike RAT AA,
Vrf in RAT AB learns whether a modification occurred since a
previous successful attestation response, though not the exact time
of that modification. RAT AB security is stated in Theorem 6.1 and
the proof is deferred to Appendix C.
Theorem 6.1. Construction 2 is TOCTOU-Secure according to
Definition 4.1 as long as VRASED is secure according to Definition 3.2.
6.2 RAT AB: Implementation & Verification
Proof of Theorem 6.1 assumes that RAT AB hardware adheres to
properties in Equations 15 to 17. Figure 6 shows RAT AB implemen-
tation as an FSM formally verified to adhere to these properties. It
takes as input a subset of signals, shown in Figure 4 and outputs
two 1-bit signals: reset triggers an immediate system-wide reset
and U PLMT controls updates to LMT region. U PLMT = 1 whenever
the FSM transitions to state U PDAT E and has value 0 in all other
states. reset = 1 whenever the FSM transitions to state RESET and
remains unchanged while in this state; it remains 0 otherwise. The
FSM operates as follows:
(1) If a software modification of LMT is attempted, FSM triggers
reset immediately, regardless of what state it is in.
Figure 6: RAT AB FSM for clock-less TOCTOU-secure RA
(2) If no modifications are made to AR since the previous com-
putation of Attest, FSM remains in NotMOD state.
(3) At any point in time, if a modification to AR is detected, FSM
transitions to state MOD. This transition indicates that a
modification occurred, although it neither alters any output,
nor modifies LMT . This is because the information to be
written to LMT (the value of Chal in the next Request) is
not available at this time.
(4) When a call to Attest is made, two possible actions can occur:
(a) If FSM is in NotMOD state, Attest is computed normally
and FSM remains in the same state.
(b) Otherwise, FSM stays in MOD state until condition
PC = CRauth is met, implying successful authentication
of Vrf Request. Then, FSM transitions to state U PDAT E
causing U PLMT to be set during the transition. Hence,
LMT is overwritten with Chal passed as a parameter to
the current Attest call. Note that update to LMT happens
before the computation of the integrity-ensuring func-
tion (HMAC) over AR, which happens in state ATT EST .
NotMODUPDATEMODRESETMod_Mem(LMT)PC = CRauthPC = CRmax(PC = 0) ∧(   Mod_Mem(LMT))⎦LMTMRMUXRATABUPLMTProgram MemoryATTEST(PC = CRauth)⎦PC = CRauthMod_Mem(AR)Mod_Mem(AR)Mod_Mem(AR)Mod_Mem(LMT)Mod_Mem(LMT)Mod_Mem(LMT)Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2929Therefore, attestation result H will reflect LMT = Chal as
part of AR. Once Attest is completed (PC = CRmax ), FSM
transitions back to NotMOD.
The same verification tool-chain discussed in Section 5.2 is used to
prove that this FSM adheres to LTL statements in Equations 15, 16,
and 17.
7 EVALUATION
Our prototype is built upon a representative of the low-end class
of devices – TI MSP430 MCU family [34]. It extends VRASED (itself
built atop OpenMSP430 [19] – an open-source implementation of
MSP430) to enable TOCTOU detection. It is synthesized and executed
using Basys3 commodity FPGA prototyping board.
Hardware Overhead. Table 2 reflects the analysis of RAT A veri-
fied hardware overhead. Similar to some related work [1, 5, 6, 10,
35, 36], we consider the hardware overhead in terms of additional
LUTs and registers. The increase in the number of LUTs can be
used as an estimate of the additional chip cost and size required
for combinatorial logic, while the number of extra registers of-
fers an estimate on state registers required by sequential logic in
RAT A FSMs. Compared to VRASED, the verified implementation
of RAT AA module takes 4 additional registers and 13 additional
LUTs, while RAT AB increases the number of LUTs and registers
by 57 and 27, respectively. As far as the unmodified OpenMSP430
architecture, this represents the overhead of 1.4% LUTs and 1.4%
registers for RAT AA and 3.8% LUTs and 4.8% registers for RAT AB.
Verification
Architecture
OpenMSP430
VRASED
RAT AA
RAT AB
Hardware
LUT Reg Verified LoC Time (s) Memory (MB)
1849
1862
1875
1919
-
13.6
19.7
26.1
Table 2: Additional hardware and verification cost
692
698
702
725
-
474
601
656
-
0.4
0.6
0.8
Runtime Overhead. RAT A does not require any modification to
RA execution. It only ensures that information about the latest