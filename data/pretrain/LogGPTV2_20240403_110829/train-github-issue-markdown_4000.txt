It appears that export assignments (`export = x`) when compiling `amd` modules
for either `es5` or `es6` output to a single file, is broken?
For example, this file:
    import { Scribe } from "../../../scribe"
    /**
     * Sets the default content of the scribe so that each carriage return creates
     * a P.
     */
    export = function(scribe: Scribe) {
        // The content might have already been set, in which case we don't want
        // to apply.
        if (scribe.getHTML().trim() === '') {
            /**
             * We have to begin with the following HTML, because otherwise some
             * browsers(?) will position the caret outside of the P when the scribe is
             * focused.
             */
            scribe.setContent('')
        }
    }
Produces the following `.d.ts` output:
    declare module "scribe/plugins/core/set-root-p-element" {
        import { Scribe } from "scribe";
        declare var _default: (scribe: Scribe) => void;
        export = _default;
    }
Which, when I attempt to include that, complains that `declare` is not allowed
inside a `declare module` block. A nested `declare` statement is emitted for
every export assignment.
Interestingly, if I change the module type to `system`, the compiler complains
(at compile-time) about every export assignment - it's as though this was
supposed to be supported for `amd`, but isn't really? I would expect it should
be supported, as it's a very common pattern in amd modules in vanilla JS.
I'm using Typescript 1.8.10.
My tsconfig is set for `es6` and `amd` output to a single file.
The resulting `.d.ts` output is here.
The full project is available here.
Why doesn't this work?
Is there a viable way to build amd modules with `.d.ts` headers with TS and
package them as npm modules with typings?
I have been told I should use commonjs as my compile target, and then use
grunt and browserify to single-file the module - but I don't understand why I
should need a whole stack of tools on top of the language just to get it to
work? (I also don't understand how this supposedly leads to a working `.d.ts`
file...)
I really do not want a large, complicated build chain - I just want to compile
my module to a file, emit the matching header file, run uglifyjs and be done.
Please advise? How should I proceed?