    ADD             R2, PC, R2 ; "load_bias:%p base:%p\n"
    BL              printf_log
    LDRH            R3, [R11,#var_EE]
    MOV             R2, R3
    MOV             R3, R2
    MOV             R3, R3,LSL#1
    ADD             R3, R3, R2
    MOV             R3, R3,LSL#3
    MOV             R0, R3
    BL              malloc
### for循环，继续读取配置
    loc_B39189E8
    LDRH            R3, [R11,#var_EE]
    MOV             R2, R3
    MOV             R3, R2
    MOV             R3, R3,LSL#1
    ADD             R3, R3, R2
    MOV             R3, R3,LSL#3
    MOV             R2, R3
    LDRH            R3, [R11,#var_F0]
    MOV             R1, R3
    LDR             R3, =0xFFFFDD28
    SUB             R0, R11, #-var_4
    LDR             R3, [R0,R3]
    ADD             R3, R1, R3
    LDR             R0, [R11,#var_28]
    LDR             R1, [R11,#var_10]
    BL              pread
    MOV             R3, R0
    STR             R3, [R11,#var_8]
    LDR             R3, [R11,#var_8]
    MOV             R0, #6
    LDR             R2, =(aTxtag - 0xB3918A44)
    ADD             R2, PC, R2 ; "txtag"
    MOV             R1, R2
    LDR             R2, =(aReadCountX - 0xB3918A50)
    ADD             R2, PC, R2 ; "read count:%x"
    BL              printf_log
    loc_B3918A50
    LDRH            R3, [R11,#var_EE]
    MOV             R2, R3
    MOV             R3, R2
    MOV             R3, R3,LSL#1
    ADD             R3, R3, R2
    MOV             R3, R3,LSL#3
    MOV             R2, R3
    LDR             R3, [R11,#var_8]
    CMP             R2, R3
    BHI             loc_B39189E8
    loc_B3918A84
    LDR             R3, [R11,#var_10]
    LDR             R2, [R3]
    LDR             R3, [R11,#var_30]
    ADD             R3, R2, R3
    STR             R3, [R11,#var_38]
    LDR             R3, [R11,#var_10]
    LDR             R2, [R3,#4]
    LDR             R3, [R11,#var_38]
    ADD             R3, R2, R3
    STR             R3, [R11,#var_3C]
    LDR             R3, [R11,#var_38]
    BIC             R3, R3, #0xFF0
    BIC             R3, R3, #0xF
    STR             R3, [R11,#var_40]
    LDR             R3, [R11,#var_3C]
    ADD             R3, R3, #0xFF0
    ADD             R3, R3, #0xF
    BIC             R3, R3, #0xFF0
    BIC             R3, R3, #0xF
    STR             R3, [R11,#var_44]
    LDR             R2, [R11,#var_44]
    LDR             R3, [R11,#var_40]
    RSB             R3, R3, R2
    STR             R3, [R11,#var_48]
    MOV             R3, #0
    STR             R3, [R11,#var_8]
    MOV             R3, #0
    STR             R3, [R11,#var_18]
    LDR             R3, [R11,#var_10]
    LDR             R3, [R3,#0xC]
    CMP             R3, #0
    BEQ             loc_B3918E54
    loc_B3918ECC
    LDRH            R3, [R11,#var_EE]
    MOV             R2, R3
    LDR             R3, [R11,#var_14]
    CMP             R2, R3
    BGT             loc_B3918A84
### while循环解密
解密出待解压的数据，通过zlib库的inflate_0函数解压到指定位置
    loc_B3918BAC
    SUB             R3, R11, #-var_22C0
    SUB             R3, R3, #4
    SUB             R3, R3, #0x10
    MOV             R0, R3
    MOV             R1, #0xFFFFFFF1
    LDR             R3, =(a1_2_3 - 0xB3918BCC)
    ADD             R3, PC, R3 ; "1.2.3"
    MOV             R2, R3
    MOV             R3, #0x38
    BL              inflateInit2
    MOV             R3, R0
    CMP             R3, #0
    BNE             loc_B3918BAC
    B               loc_B3918DAC
    loc_B3918BE4
    LDR             R3, [R11,#var_8]
    ADD             R2, R3, #0x1000
    LDR             R3, [R11,#var_10]
    LDR             R3, [R3,#0xC]
    CMP             R2, R3
    BLS             loc_B3918C10
    LDR             R3, [R11,#var_10]
    LDR             R2, [R3,#0xC]
    LDR             R3, [R11,#var_8]
    RSB             R3, R3, R2
    B               loc_B3918C14
    loc_B3918C10
    MOV             R3, #0x1000
    loc_B3918C14
    STR             R3, [R11,#var_4C]
    LDR             R3, [R11,#var_8]
    ADD             R2, R3, #0x1000
    LDR             R3, [R11,#var_10]
    LDR             R3, [R3,#0x14]
    CMP             R2, R3
    BLS             loc_B3918C44
    LDR             R3, [R11,#var_10]
    LDR             R2, [R3,#0x14]
    LDR             R3, [R11,#var_8]
    RSB             R3, R3, R2
    B               loc_B3918C48
    loc_B3918C44
    MOV             R3, #0x1000
    loc_B3918C48
    STR             R3, [R11,#var_50]
    LDR             R3, [R11,#var_10]
    LDR             R2, [R3,#8]
    LDR             R3, =0xFFFFDD28
    SUB             R0, R11, #-var_4
    LDR             R3, [R0,R3]
    ADD             R2, R2, R3
    LDR             R3, [R11,#var_8]
    ADD             R3, R2, R3
    MOV             R12, R3
    SUB             R3, R11, #-var_2280
    SUB             R3, R3, #4
    SUB             R3, R3, #0x18
    LDR             R0, [R11,#var_28]
    MOV             R1, R3
    LDR             R2, [R11,#var_4C]
    MOV             R3, R12
    BL              pread
    MOV             R3, R0
    STR             R3, [R11,#var_4C]
    SUB             R3, R11, #-var_2280
    SUB             R3, R3, #4
    SUB             R3, R3, #0x18
    LDR             R2, =(aTx12345tx12345 - 0xB3918CB0)
    ADD             R2, PC, R2 ; "Tx:12345Tx:12345"
    MOV             R0, R2
    MOV             R1, R3
    LDR             R2, [R11,#var_50]
    MOV             R3, #0x10
    BL              decrypt
    LDR             R2, =0xFFFFDD30
    MOV             R3, #4
    SUB             R1, R11, #-var_4
    ADD             R2, R1, R2
    ADD             R3, R2, R3