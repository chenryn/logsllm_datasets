                  }                                   \
              }                                   \
          }                                       \
    }
如果我们可以伪装 `fd` 和 `bk` 过掉 `unlink` 的检查，就可以实现 `4` 字节写
### 利用
首先利用其它的漏洞伪造下面的内存布局
  * p0 = malloc(0x80), p1 = malloc(0x80), ptr = p0
  * 此时 `free(p1)` ，发现 `p1` 所在 `chunk` 的 `pre_size = 0` , 表明前一个 `chunk` 已经 `free`, 于是向前合并
  * 通过 `p1 - 0x10 - 0x80` ( **chunk_addr - pre_size** ) , 找到前面已经释放的 `chunk` , 也就是 我们 伪造的 `fake chunk p1`
  * 然后进行 `unlink`, 实现 `*ptr = ptr-0x18`
## Fastbin Attack 总结
### 原理
`Fastbin` 在分配 `chunk` 时，只检查 **p- >size&0xfffffffffffff000是否满足等于的 fastbin的大小**
，而且 **不检查指针是否对齐** 。所以我们只要找到 `size` 为 `fastbin` 的范围，然后修改 位于 `fastbin` 的 `chunk`
的 `fd` 到这 ，分配几次以后，就可以分配到这个位置
### 利用方式
#### 利用 libc 中的 现有的 数据
##### __malloc_hook 附近
64位下在 **__malloc_hook - 0x23 + 0x8** 处 的值 为 `p64(0x7f)` ，这些值可以通过 `gdb +
hexdump` 找找
然后想办法修改 位于 `0x70` 的 `fastbin` 的 `chunk` 的 `fd` 为 **__malloc_hook - 0x23**
，然后分配几次 0x70 的 chunk 就可以修改 `__malloc_hook`
##### main_arean->fastbinY 数组
该数组用于存放 指定大小的 `fastbin` 的表头指针，如果为空则为 `p64(0)` , 而堆的地址基本 是 `0x5x` 开头的（其在内存就是
`xx xx..... 5x`)， 此时如果在 `main_arean->fastbinY` 的 相邻项为 `0x0` (相邻大小的 `fastbin`),
就会出现 `5x 00 00 00...` , 所以就可以出现 `0x000000000000005x` ，可以把它作为 `fastbin` 的
`size` 进行 `fastbin attack` ， **不过作为 fastbin attack 的 size 不能 为 0x55**
于是想办法修改 位于 `0x50` 的 `fastbin` 的 `chunk` 的 `fd` 为 **__malloc_hook - 0x23**
，然后分配几次 `0x50` 的 chunk 就可以分配到 `main_arean`, 然后就可以修改 `main_arean->top` 。
##### std* 结构体
在 `std*` 类结构体中有很多字段都会被设置为 0x0 , 同时其中的某些字段会有 libc 的地址大多数情况下 libc 是加载在
`0x7f....` ， 配合着 `std*` 中的 其他 0x0 的字段，我们就可以有 `p64(0x7f)` ， 然后修改 位于 `0x70` 的
`fastbin` 的 `chunk` 的 `fd` 为该位置即可。
#### 自己构造 size
##### 利用 unsorted bin attack 往 __free_hook 构造 size
我们知道如果我们可以 修改 `unsorted bin` 的 `fd` 和 `bk` , 在对 `unsorted bin` 拆卸的 时候 我们就能实现
    *(bk + 0x10) = main_arean->unsorted_bin
利用这个我们就能往任意地址写入 `main_arean` 的地址， 由于 `libc` 的地址基本都是 `0x7fxxxxx`, 所以写完以后我们就可以在
`__free_hook` 的前面构造出 `p64(0x7f)` , 可以作为 `fastbin attack` 的目标，然后修改
`__free_hook`
有一个 **小坑** 要注意，在 `__free_hook-0x30` 开始 的 `0x30` 个字节 是 `_IO_stdfile_*_lock`
区域，用于 `std*` 类文件的锁操作，这个区域的内存会被 **经常清零** 。
所以 `unsorted bin attack` 应该往上面一点， 比如 **libc.symbols['__free_hook'] - 0x50**
还有一点就是在进行 `unsorted bin attack` 以后 ， `unsorted bin` 链表就被破坏了，所以 就只能通过 `fastbin`
或者 `smallbin` 进行内存的分配，所以我们应该先劫持 `fastbin` 的 `fd` 到 目标位置，然后触发 `unsorted bin
attack` 写入 `size`, 最后进行 `fastbin attack` ，修改 `__free_hook`
##### 利用 fastbin 往 main_arean 构造 size
  * 首先分配 `0x40` 的 `chunk p`, 然后释放掉 `p` ，进入 `0x40` 的 `fastbin`
  * 然后通过一些手段，修改 `p->fd = p64(0x71)`
  * 分配 `0x40` 的 `chunk` ，会拿到 `p` , 此时 `main_arean->fastbinY` 中 `0x40` 大小对应的项的值为 `p64(0x71)`
  * 然后分配 `0x71` 的 `chunk p2`, 释放掉
  * 修改 `p2->fd` 为 `main_arean->fastbinY` 的相应位置，然后分配两次，即可分配到 `main_arean->fastbinY`
  * 然后通过修改 `main_arean->top`, 即可分配到 **malloc_hook 或者 free_hook** 等
​
## Unsorted bin Attack
### 原理
因为 `unsorted bin` 的取出操作没有使用 `unlink` 宏，而是自己实现的几行代码
    bck = victim->bk;
    ...
    unsorted_chunks (av)->bk = bck;
    bck->fd = unsorted_chunks (av);
所以当我们控制了 victim的 bk 时，则 `bk + 0x10` 会被改写成 **unsorted bin 的地址** ，但是 `unsorted
bin` 的 `bk` **也会被破坏** ，下一次再到这里时就可能因为 `victim->bk->fd` 不可写而造成 `SIGSEGV`。
所以在触发 `unsorted bin attack` 以后就 **只能** 通过 **fastbin** 和 **smallbin** 来分配内存了(
**否则会进入 unsorted bin 的流程，会报错** )，所以在 触发 `unsorted bin attack` 需要把需要的内存布局好。
### 利用的方式
##### 写 stdin->_IO_buf_end
在 glibc中 scanf, gets 等函数默认是对 stdin 结构体进行操作。以 `scanf` 为例
  * 在调用 `scanf` 获取输入时，首先会把输入的东西复制到 `[_IO_buf_base , _IO_buf_end ]`, 最大大小为 `_IO_buf_end - _IO_buf_base`。
  * 修改 `unsorted bin` 的 `bck` 为 `_IO_base_end-0x10` ,就可以使 `_IO_base_end=main_arens+0x88`,我们就能修改很多东西了， **而且`malloc_hook` 就在这里面**。
##### __IO_list_all 和 abort 以及 修改虚表到 _IO_wstrn_jumps
###### 原理
**绕过虚表校验**
其实就是对 `house of orange` 在 `libc2.24` 里面的再利用。 在 `libc2.24` 里对 `vtable` 进行了校验。
对 `vtable` 进行校验的函数是 `IO_validate_vtable`
就是保证 `vtable` 要在 `__stop___libc_IO_vtables` 和 `__start___libc_IO_vtables` 之间。
这里的目标就是 `_IO_wstrn_jumps` ，这个也是一个 `vtable` ，能够满足 `IO_validate_vtable`的校验。
在 `_IO_wstrn_jumps` 有一个有趣的函数 `IO_wstr_finish` ， 位于
**libc.symbols['_IO_wstrn_jumps'] + 0x10**
    void __fastcall IO_wstr_finish(_IO_FILE_2 *fp, int dummy)
    {
      _IO_FILE_plus *fp_; // rbx
      wchar_t *io_buf_base; // rdi
      fp_ = fp;
      io_buf_base = fp->_wide_data->_IO_buf_base;
      if ( io_buf_base && !(fp_->file._flags2 & 8) )
        (fp_[1].file._IO_read_ptr)(io_buf_base, *&dummy); // call    qword ptr [fp+0E8h]
      fp_->file._wide_data->_IO_buf_base = 0LL;
      _GI__IO_wdefault_finish(fp_, 0);
    }
我们把 `fp->_wide_data` 改成 `fp` ， 然后设置 `fp->_IO_buf_base` 设置为 `/bin/sh`
的地址，`fp_[1].file._IO_read_ptr` ( **fp+0xe8** ) 改成 `system` 的地址，其他字段根据 `check`
设置好以便过掉检查， 之后调用该函数就会 `system('/bin/sh')`
###### 利用方案举例
以 **34c3ctf-300** 为例， 程序限制只能分配 `0x310` 的 `chunk`， 这里利用 `unsorted bin`
遍历的缺陷，伪造了一个 `0x60` 的 `smallbin` ，为后续做准备。
  * 首先分配 4个 `0x310` 的 `chunk （A X B K）` ，释放 `A , B` 此时 `A , B` 均进入 `unsorted bin` ,并且通过`bk` 链接起来
  * 修改 `A->bk` 为 `fake_bin` 的地址，并且 设置 **fake_bin- >size=0x61 and fake_bin->bk = B**, 此时 `unsorted bin` 的链表其实 **有 3 项** 。
  * 分配 一个 `0x310` 的 `chunk` ，此时 A 位于链表首部，且大小刚好，分配 A ，并且 把 fake_bin 置于链表首部
  * 再次 **分配** 一个 `0x310` 的 `chunk` ， 此时 **fake_bin 位于链表首部** ，大小不够于是把 fake_bin 放到 smallbin[4] , 然后继续遍历 ，分配到 `B`， 至此 在 **smallbin[4] 就存有 fake_bin 的地址**
fake_bin 的 内容为 （从 chunk 的开始地址开始
    payload = p64(0xfbad2084)    #伪造的 File 结构体的开始，fp->_flag
    payload += p64(0x61)
    payload += p64(0xb00bface)  
    payload += p64(B_addr) # bk ，设置为 B 的地址
    payload += p64(0x0)            # fp->_IO_write_base
    payload += p64(libc_base + sh_addr)     # fp->_IO_write_ptr 
    payload += p64(libc_base + sh_addr)     # fp->wide_data->buf_base
    payload += "A"*60
    payload += p64(0x0)            # fp->_flags2
    payload += "A"*36
    payload += p64(fake_bin)    # fp->_wide_data ，设置为 fake_bin, 复用 fake_bin
    payload += "A"*24
    payload += p64(0x0)            # fp->_mode
    payload += "A"*16
    payload += p64( libc.symbols['_IO_wstrn_jumps'] + 0x10 -0x18) # fake vtable
    payload += "A"*8
    payload += p64(libc_base + libc.symbols['system'])       # ((_IO_strfile *) fp)->_s._free_buffer
  * 然后利用 `unsorted bin attack` 修改 `__IO_list_all` 为 `main_arean+88`
  * 触发 `abort` （ **malloc_printerr内部会调用** ）， 就会触发 _`IO_flush_all_lockp` ,根据 `__IO_list_all` 和 `__chain` ，遍历调用 `_IO_OVERFLOW (fp, EOF)` ( 其实就是 **(fp- >vtable + 0x18)(fp, EOF)**
  * `___IO_list_all->_chain` 位于 `smallbin[4]` ，所以遍历第二次可以对 `fake_bin` 进行 `_IO_OVERFLOW (fp, EOF)`，此时就会调用 **IO_wstr_finish** ， 此时 fake_bin 中的相关数据已经设置好，最后会执行 **system("/bin/sh")**
**参考**  
[34c3ctf-300](http://blog.rh0gue.com/2017-12-31-34c3ctf-300/)  
[Pwn with File结构体
四](http://blog.hac425.top/2018/01/13/pwn_with_file_part4.html)
##### 组合 fastbin attack
###### 方案一
  * 把 `bk` 改成 `global_max_fast-0x10` 触发 `unsorted bin attack` 后， `global_max_fast`会被修改成一个很大的值（指针），所以之后的 内存 分配 和 释放 都会按 `fastbin` 来
  * 之后看情况进行 **伪fastbin attack**
###### 方案二
把 `bk` 改成 **libc.symbols['__free_hook'] - 0x50** 触发 `unsorted bin attack` 后，
`free_hook` 前面就会出现 `p64(0x7f)` ,之后就可以通过 `fastbin attack` 修改 `free_hook`
**参考**  
[0ctf-2016-zerostorage](http://brieflyx.me/2016/ctf-writeups/0ctf-2016-zerostorage/)
##### 结合 largebin 和 _dl_open_hook
###### 原理
在 遍历 `unsoted bin` 时， 是通过 bk 指针 进行遍历
    for (;; )
        {
          int iters = 0;
          //victim = unsorted_chunks (av)->bk
          while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av)) // 遍历 unsorted bin
            {
              bck = victim->bk;
            ............
            ............
            ............
              /* remove from unsorted list */
              unsorted_chunks (av)->bk = bck;  //unsorted_chunks (av)->bk =  victim->bk->bk
              bck->fd = unsorted_chunks (av);
              ......
              ......
              ......
            }
所以通过修改 `bk` 来伪造 `unsorted bin` 是可行的
同时在 遍历 `unsorted bin` 把 `chunk` 放入 `largebin` 的过程中， **也没有什么检查** ，于是可以利用 把
`chunk` 放入 `largebin` 的过程 **往 任意地址写入 chunk 的地址** 。
**PS: 因为要伪造 unsorted bin ，需要我们可以拿到 heap 的基地址**
###### 大体的思路
  * 在堆上通过修改 `unsorted bin` 的 `bk` 指针 伪造几个 `unsorted bin(A B C D)，(0x400, 0x30, 0x420, 0x30)`
  * 分配 `0x30` , **A 进入 largebin, B 被分配**
  * 修改 **A- >bk = _dl_open_hook - 0x10 and A->bk_nextsize = _dl_open_hook - 0x20**
  * 分配 `0x30` , `C` 进入 `largebin`, 会导致 `A->bk->fd = C , A->bk_nextsize->fd_nextsize = C` （其实就是 ***_dl_open_hook = C** )
  * 此时`_dl_open_hook` 指针被改成 `C` 的地址， 然后在 `C` 中设置 **p64(libc.symbols['__libc_dlsym'] + 4)+p64(one_gadget)+p64(one_gadget)** ， **伪造`dl_open_hook` 结构体。**
  * 后面的执行过程会调用 `_dl_open_hook`， 就会调用 `__libc_dlsym + 4`, 这里面会 **跳转到`dl_open_hook` 结构体偏移 8 的值**处 , 也就是 `one_gadget` 的地址
**参考**  
[0ctf 2018 babyheap challenge
exploit](https://twitter.com/Yannayli/status/980836566368210946)
## 特定写权限的利用
### 可写 main_arean
通过一些 `fastbin` 攻击， 我们可以分配到 `main_arean`， 此时一般都是改写 `main_arean->top`
#### 转换为写 __malloc_hook
**malloc_hook -0x10** 处存放的是指针，值很大，修改 **main_arean- >top 到这里**，然后控制程序 使得通过
`top_chunk` 分配， 就可以分配到 `malloc_hook`
#### 转换为写 __free_hook
在 `free_hook-0xb58` 处存放的也是一些地址，修改 **main_arean- >top 到这里**，然后控制程序 使得通过
`top_chunk` 分配几次内存（一次分配太多，会触发 `sysmalloc`, **可以一次分配 0x90 多分配几次** ），我们就可以分配到
`free_hook`
### 可写 __malloc_hook
#### 直接写one_gadget
写入 `one_gadget` ，不过触发的时候，用 `malloc_printerr` 来触发 `malloc`
此时用下面这样的 `one_gadget` **[rsp+0x50]**
    0xef6c4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
这样更稳定，成功率也高
#### 通过 __realloc_hook 中转
`__malloc_hook` 和 `__realloc_hook` 是相邻的， 且 `__realloc_hook` 在 `__malloc_hook`
的前面，所以基本上可以同时修改它们。
利用 `one_gadget` 时，对于 **栈的条件会有一些要求** ，利用 `realloc` 函数内部的 跳转 到 `__realloc_hook`
之前的栈操作，加上栈中原有的数据，可以对栈进行跳转，以满足 `one_gadget` 的要求
    realloc         proc near               ; DATA XREF: LOAD:0000000000006BA0↑o
    push    r15             
    push    r14
    push    r13
    push    r12
    mov     r13, rsi
    push    rbp
    push    rbx
    mov     rbx, rdi