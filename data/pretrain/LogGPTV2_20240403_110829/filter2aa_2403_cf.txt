a  
= 0 
addiu    $sp, -0x18 
sw     $fp, 0x18+var_4($sp) 
move     $fp, $sp 
sw     $a0, 0x18+a($fp) 
; initialize rt and i variables to zero: 
sw     $zero, 0x18+rt($fp) 
sw     $zero, 0x18+i($fp) 
; jump to loop check instructions: 
b 
   loc_68 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
294 
逆向工程权威指南（上册） 
or 
   $at, $zero ; branch delay slot, NOP 
loc_20: 
li 
   $v1, 1 
lw 
   $v0, 0x18+i($fp) 
or 
   $at, $zero ; load delay slot, NOP 
sllv    $v0, $v1, $v0 
; $v0 = 1>相对应，x86 指令集中有操作无符号数的 SHR/SHL 指令和操作
有符号数的 SAR/SHL 指令。 
在 ARM 平台上，对无符号数进行位移运算的指令是 LSR/LSL，对有符号数进行位移运算的指令是
ASR/LSL。而且，ARM 指令还可以通过“参数调节符”的形式使用“后缀型”位移运算指令。此类对其
他数进行运算的指令，又叫做“数据处理指令”。 
19.6.1 检测特定位（编译阶段） 
对某数值的二进制 1000000 位(即 16 进制的 0x40)进行检测的指令大体如下。 
指令清单 19.38  C/C++ 
if (input&0x40) 
    ... 
指令清单 19.39  x86 
TEST REG, 40h 
JNZ is_set 
; bit is not set 
指令清单 19.40  x86 
TEST REG, 40h 
JZ is_cleared 
; bit is set 
指令清单 19.41  ARM (ARM mode) 
TST REG, #0x40 
BNE is_set 
; bit is not set 
某些情况下，编译器会使用 AND 指令而不使用 TEST 指令。无论编译器选取了哪个指令，都不会影
响程序将要检测的标志位。 
19.6.2 检测特定位（runtime 阶段） 
在 C/C++代码编译而得的程序中，检测特定位的指令（右移 n 位，然后舍弃最低位）大体如下。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
296 
逆向工程权威指南（上册） 
指令清单 19.42  C/C++ 
if ((value>>n)&1) 
    ... 
相应的 x86 代码如下所示。 
指令清单 19.43  x86 
; REG=input_value 
; CL=n 
SHR REG, CL 
AND REG, 1 
此外还可以把 1 左移 n 次，逐次鉴定各位是否为零。 
指令清单 19.44  C/C++ 
if (value & (1<<n)) 
    ... 
上述源程序对应的 x86 指令如下所示。 
指令清单 19.45  x86 
; CL=n 
MOV REG, 1 
SHL REG, CL 
AND input_value, REG 
19.6.3 设置特定位（编译阶段） 
指令清单 19.46  C/C++ 
value=value|0x40; 
指令清单 19.47  x86 
OR REG, 40h 
指令清单 19.48  ARM (ARM mode) and ARM64 
ORR R0, R0, #0x40 
19.6.4 设置特定位（runtime 阶段） 
指令清单 19.49  C/C++ 
value=value|(1<<n); 
对应的 x86 指令大体如下所示。 
指令清单 19.50  x86 
; CL=n 
MOV REG, 1 
SHL REG, CL 
OR input_value, REG 
19.6.5 清除特定位（编译阶段） 
如需清除特定位，只需使用 AND 指令操作相应数值即可。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
297 
指令清单 19.51  C/C++ 
value=value&(~0x40); 
指令清单 19.52  x86 
AND REG, 0FFFFFFBFh 
指令清单 19.53  x64 
AND REG, 0FFFFFFFFFFFFFFBFh 
上述指令仅仅把被操作数的某个位置零，其他位保持不变。 
ARM 平台的 ARM 模式指令集有 BIC 指令。它相当于 NOT 和 AND 指令对。 
指令清单 19.54  ARM (ARM mode) 
BIC R0, R0, #0x40 
19.6.6 清除特定位（runtime 阶段） 
指令清单 19.55  C/C++ 
value=value&(~(1<<n)); 
指令清单 19.56  x86 
; CL=n 
MOV REG, 1 
SHL REG, CL 
NOT REG 
AND input_value, REG 
19.7 练习题 
19.7.1 题目 1 
请描述下述代码的功能。 
指令清单 19.57  Optimizing MSVC 2010 
_a$ = 8 
_f       PROC 
  mov     ecx, DWORD PTR _a$[esp-4] 
  mov     eax, ecx 
  mov     edx, ecx 
  shl     edx, 16         ; 00000010H 
  and     eax, 65280      ; 0000ff00H 
  or      eax, edx 
  mov     edx, ecx 
  and     edx, 16711680   ; 00ff0000H 
  shr     ecx, 16         ; 00000010H 
  or      edx, ecx 
  shl     eax, 8 
  shr     edx, 8 
  or      eax, edx 
  ret     0 
_f  
  ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
298 
逆向工程权威指南（上册） 
指令清单 19.58  Optimizing Keil 6/2013 (ARM mode) 
f PROC 
  MOV      r1,#0xff0000 
  AND      r1,r1,r0,LSL #8 
  MOV      r2,#0xff00 
  ORR      r1,r1,r0,LSR #24 
  AND      r2,r2,r0,LSR #8 
  ORR      r1,r1,r2 
  ORR      r0,r1,r0,LSL #24 
  BX       lr 
  ENDP 
指令清单 19.59  Optimizing Keil 6/2013 (Thumb mode) 
f  PROC 
  MOVS     r3,#0xff 
  LSLS     r2,r0,#8 
  LSLS     r3,r3,#16 
  ANDS     r2,r2,r3 
  LSRS     r1,r0,#24 
  ORRS     r1,r1,r2 
  LSRS     r2,r0,#8 
  ASRS     r3,r3,#8 
  ANDS     r2,r2,r3 
  ORRS     r1,r1,r2 
  LSLS     r0,r0,#24 
  ORRS     r0,r0,r1 
  BX       lr 
  ENDP 
指令清单 19.60  Optimizing GCC 4.9 (ARM64) 
f: 
  rev  
w0, w0 
  ret 
指令清单 19.61  Optimizing GCC 4.4.5 (MIPS) (IDA) 
f: 
srl     $v0, $a0, 24 
sll     $v1, $a0, 24 
sll     $a1, $a0, 8 
or      $v1, $v0 
lui     $v0, 0xFF 
and     $v0, $a1, $v0 
srl     $a0, 8 
or      $v0, $v1, $v0 
andi    $a0, 0xFF00 
jr      $ra 
or      $v0, $a0 
19.7.2  题目 2 
请描述下述程序的功能。 
指令清单 19.62  Optimizing MSVC 2010 
_a$ = 8 
; size = 4 
_f       PROC 
  push   esi 
  mov    esi, DWORD PTR _a$[esp] 
  xor    ecx, ecx 
  push   edi 
  lea    edx, DWORD PTR [ecx+1] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
299 
  xor    eax, eax 
  npad   3 ; align next label 
$LL3@f: 
  mov    edi, esi 
  shr    edi, cl 
  add    ecx, 4 
  and    edi, 15 
  imul   edi, edx 
  lea    edx, DWORD PTR [edx+edx*4] 
  add    eax, edi 
  add    edx, edx 
  cmp    ecx, 28 
  jle    SHORT $LL3@f 
  pop    edi 
  pop    esi 
  ret    0 
_f       ENDP 
指令清单 19.63  Optimizing Keil 6/2013 (ARM mode) 
f PROC 
  MOV    r3,r0 
  MOV    r1,#0 
  MOV    r2,#1 
  MOV    r0,r1 
|L0.16| 
  LSR    r12,r3,r1 
  AND    r12,r12,#0xf 
  MLA    r0,r12,r2,r0 
  ADD    r1,r1,#4 
  ADD    r2,r2,r2,LSL #2 
  CMP    r1,#0x1c 
  LSL    r2,r2,#1 
  BLE    |L0.16| 
  BX     lr 
  ENDP 