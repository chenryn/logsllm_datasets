  // 生成 salt
  function get_salt($id) {
    return $id . pack('H*', FIXEDSALT);  // 将用户的 ID 和固定字符串连接起来
  }
  function get_password_hash($id, $pwd) {
    $salt = get_salt($id);
    $hash = '';  // 默认的散列值
    for ($i = 0; $i 
    login successfulnext
在这个例子里自动登录后会依次进行下面的处理。
会话超时时间设为 1 星期（默认为 30 分钟）
将含有会话 ID 的 Cookie 的 Expires 属性设置为 1 星期后
不管是否是自动登录，都会执行下面这两步
将会话超时时长保存到 $_SESSION['timeout']
 中
将会话超时时刻保存到 $_SESSION['expires']
 中
下面是判断用户是否处于登录状态的代码。下面这部也会确认之前设置的会话超时相关的属性值。
代码清单 /51/51-003.php
    <?php
      session_start();
      function islogin() {
        if (! isset($_SESSION['id'])) {  // 还没设置 id 时
          return false;  // 没有登录
        }
        if ($_SESSION['expires'] < time()) {  // 该会话已经超时
          $_SESSION = array(); // 取消 $_SESSION 变量
          session_destroy();    // 放弃会话（退出登录）
          return false;
        }
        // 更新超时时刻
        $_SESSION['expires'] = time() + $_SESSION['timeout'];
        return true;  // 用户处于登录状态，即返回 true
      }
      if (islogin()) {
        // 用户登录中的处理内容（省略了后面的内容）
islogin
 方法用来判断用户是否处于登录状态。该处理中通过判断保存在会话里的超时时刻和现在时刻来判断用户会话是否已经超时了。
使用令牌实现自动登录
根据所使用的编程语言不同，有时候不能对保存着会话 ID 的 Cookie 的 Expires 属性进行设置，这时候如果浏览器一关掉的话对应的会话也自动被销毁了，也就不能通过编程语言在会话的管理机制上实现保持用户登录状态的功能了。
在这种情况下要实现同样的功能的话，则可以考虑使用 4.6.4 节里介绍过的令牌来实现保持用户的登录状态。