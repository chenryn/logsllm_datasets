that a single copy of the automaton for expr1 is used,
unlike the traditional construction step which repeats
the automaton n times. Structurally, the NXFAs rec-
ognizing (expr1){m,n} and (expr1)* are identical.
For example, for .{n} the compiler produces the (de-
terministic) XFA shown in Figure 4 which has the same
underlying structure as the DFA recognizing .*. On
the other hand, standard DFA construction produces an
automaton with n + 2 states shown in Figure 3.
4.2.3. From NXFAs to XFAs. Epsilon transition elim-
ination, given in Algorithm 1, is the ﬁrst step after
the NXFA is initially constructed. It extends standard
ε-elimination by composing update functions along
chains of “collapsed” ε transitions from the original
NXFA and places these new relations into the appro-
priate transition in the ε-free NXFA. These composed
functions keep track of the possible changes to the data
domain value along the collapsed edges. After running
Algorithm 1, we reduce the size of the NXFA by re-
moving states that are not accepting and have no paths
leading to accepting states.
EliminateEpsilon(Q,D,Σ,δ,Uδ, QD0,F):
δ(cid:2) ← /0;
δ ← /0;
(cid:2)
U
foreach (qi, s, q f ) ∈ δ∩ Q× Σ× Q do
foreach (di, d f ) ∈ Uδ(qi, s,q f ) do
foreach (qreachable, dreachable) ∈
ComputeEpsilonReachable (q f , d f ) do
δ(cid:2) ← δ(cid:2) ∪{(qi,s, qreachable)};
δ ← U
(cid:2)
U
← /0;
← QD
(cid:2)
0
δ∪{((qi,s, qreachable),(di, dreachable))};
(cid:2)
(cid:2)
0
(cid:2)
0
(cid:2)
δ, QD
∪ ComputeEpsilonReachable (q0, d0);
QD
foreach (q0, d0) ∈ QD0 do
QD
return (Q, D,Σ,δ(cid:2),U
ComputeEpsilonReachable(q, d)
Result ← {(q, d)};
foreach (qi, di) ∈ Result do
foreach q f ∈ {q|(qi,ε, q) ∈ δ} do
Result ← Result ∪{q f}×{d f|(di, d f ) ∈ Uδ(qi,ε, q f )};
, F);
(cid:2)
0
:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
return Result;
16
Algorithm 1. ε-elimination for NXFAs.
Determinization is divided into two algorithms,
which determinize transitions ﬁrst (Algorithm 2) and
update relations second (Algorithm 3). Note that the
output of Algorithm 2 is still an NXFA because nonde-
terminism still exists in the data domain. After consum-
ing an input string, the matching algorithm will know
the exact automaton state it is in, but multiple data do-
main values may be possible. Algorithm 2 is similar to
the algorithm for determinizing NFAs, but to preserve
the semantics of the input NXFA, the data domain D
(cid:2) = Q × D in the output NXFA. Fig-
is replaced by D
193
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
{0}
Ȉ
A
Ȉ
0ĺ0
a
0ĺ0
b
{0}
F={(C,1)}
C
[^a]
0ĺ1
B
1ĺ2
0ĺ0
2ĺ1
(A,0)ĺ(A,0)
(A,0)ĺ(C,0)
(C,0)ĺ(C,0)
(C,2)ĺ(C,1)
Determinize
Transitions
{(A,0),(C,0)}
{A,C}
[^a]
(A,0)ĺ(A,0)
(A,0)ĺ(C,0)
(C,0)ĺ(C,0)
(C,2)ĺ(C,1)
[^ab]
(A,0)ĺ(A,0)
(A,0)ĺ(C,0)
(A,0)ĺ(B,1)
a
b
F={({A,C}   ,(C,1)), 
({A,B,C},(C,1))}
(A,0)ĺ(A,0)
(A,0)ĺ(C,0)
(A,0)ĺ(B,1)
a
{A,B,C}
(A,0)ĺ(A,0)
(A,0)ĺ(C,0)
(C,0)ĺ(C,0)
(C,2)ĺ(C,1)
(B,1)ĺ(C,2)
Renaming 
to simplify 
next figure
{A,C}
G
{A,B,C}
H
(A,0)
(B,1)
(C,0)
(C,1)
(C,2)
3
4
5
6
7
Figure 8. Applying algorithm 2 (determinizing transitions) to a simple NXFA.
};
DeterminizeTransitions(Q,D,Σ,δ,Uδ, QD0,F):
(cid:2) ← Q× D;
D
// Data value in new NXFA = conﬁguration in old
← QD0 ;
(cid:2)
D
0
// New states are sets of old states
← {q0|∃d0 ∈ D.(q0, d0) ∈ QD0} ;
(cid:2)
q
(cid:2) ← {q
(cid:2)
0
Q
δ(cid:2) ← /0;
0
δ ← /0;
(cid:2)
U
(cid:2) do
(cid:2)
foreach q
foreach s ∈ Σ do
i
← {q f|∃qi ∈ q
(cid:2)
q
f
(cid:2) ∪{q
} ;
(cid:2) ← Q
(cid:2)
Q
f
// New states have 1 trans. per symbol
δ(cid:2) ← δ(cid:2) ∪{(q
(cid:2)
i
∧ q f ∈ q
U ← {((qi, di),(q f , d f ))|qi ∈ q
(cid:2)
(cid:2)
i
f
.(qi, s,q f ) ∈ δ};
// Accum. reachable sets of old states
)} ;
(cid:2)
,s, q
f
∈ Q
∧
(cid:2)
i
(di, d f ) ∈ Uδ(qi, s, q f )};
1
2
3
4
5
6
7
8
9
10
11
12
13
14
// Update relations preserve semantics
δ ← U
(cid:2)
U
(cid:2) ← {(q
F
return (Q
)}×U ;
(cid:2)
,s, q
f
(cid:2) ∈ Q
(cid:2) ∧ q ∈ q
}× D
δ,{q
(cid:2)
(cid:2),Σ,δ(cid:2),U
δ∪{(q
(cid:2)
(cid:2)
i
(cid:2),(q, d))|q
(cid:2), D
15
16
Algorithm 2. Determinizing transitions.
(cid:2) ∧ (q, d) ∈ F} ;
(cid:2)
, F
0
(cid:2));
(cid:2)
0
(cid:2)
ure 8 illustrates Algorithm 2 applied to an NXFA corre-
sponding to .*ab[ˆa]{1} and demonstrates why this
transformation is necessary. By not moving to a new do-
, a naive determinization algorithm would pro-
main D
duce an automaton that moves to state {A,B,C} on in-
put ‘a’, with possible data values being {0,1}. Since in
the input NXFA C accepts on a 1, this incorrectly de-
terminized automaton will accept the string a. But in
the input NXFA, the only way to get into the conﬁgura-
tion (C,1) is by going from A to B to C and looping in
C once, thus the language it recognizes is .*ab[ˆa]
and it does not include the string a . The NXFA pro-
duced by Algorithm 2 is in state {A,B,C} after reading
an ‘a’, but the possible values of the data domain are
{(A, 0),(B,1),(C,0)}. Since it only accepts on the data
domain value (C,1), this NXFA preserves the original
semantics.
1
2
3
4
5
6
7
8
9
10
11
// New data values = sets of old data values
)} ;
) ∈ QD do
DeterminizeData(Q,D,Σ,δ,Uδ,{q0}× D0, F):
← D0 ;
(cid:2)
d
(cid:2) ← {d
};
(cid:2)
0
D
0
// QD accumulates all reachable conﬁgurations
QD ← {(q0, d
(cid:2)
δ ← /0;
(cid:2)
0
U
(cid:2)
foreach (qi, d
foreach s ∈ Σ do
i
q f ← δ(qi, s);
← {d f|∃di ∈ d
.(di,d f ) ∈ Uδ(qi,s, q f )};
(cid:2)
d
f
} ;
(cid:2) ∪{d
(cid:2) ← D
(cid:2)
D
// Accum. reachable sets of old values
f
QD ← QD∪{(q f , d
)};
(cid:2)
f
// Build deterministic update functions
δ∪{((qi,s),(d
δ ← U
(cid:2)
(cid:2)
(cid:2)
U
i
(cid:2) ← {(q, d
(cid:2))|(q, d
F
(cid:2),Σ,δ,U
return ((Q,D
))} ;
(cid:2)) ∈ QD∧∃d ∈ d
), F
12
13
Algorithm 3. Determinizing NXFA data
domains.
(cid:2).(q, d) ∈ F};
(cid:2)), QD);
(cid:2)
δ,(q0,d
, d
(cid:2)
0
(cid:2)
f
(cid:2)
i
(cid:2)
Algorithm 3 determinizes the data domain of the
NXFA produced by Algorithm 2, yielding a determinis-
tic XFA. Figure 9 illustrates its operation when applied
to the resulting NXFA in Figure 8. Instead of replac-
(cid:2) = 2D, the
ing the data domain with a new domain D
algorithm assigns to D
the (typically small) subset of
2D that is reachable from the start conﬁgurations. Note
that while the update functions associated with transi-
(cid:2)
(cid:2)
δ are not deﬁned on the entire data domain D
,
tions U
they are deﬁned on all data values d
that can occur
in any state q. Algorithm 3 also computes an auxiliary
data structure QD, the set of conﬁgurations reachable
(cid:2)
). This data struc-
from the initial conﬁguration (q0, d