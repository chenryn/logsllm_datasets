(E2) Register credential: Users need to register credentials
(username and password) and associated domain within their man-
ager for later retrieval. Users may also need to link a credential with
multiple apps or domains (e.g., bitbucket.com and atlassian.com
use the same backend authentication system).
Tasks include directly registering a credential in the manager,
logging in with credentials not stored in the manager (triggering
autodetect mechanisms), or linking an already registered credential
to additional domains or apps.
(E3) Update credential: After registering credentials, users need
the ability to update those credentials. Updates can occur due to
account recovery (e.g., needing to access the account when the
manager was unavailable) or mandatory password resets.
Tasks include directly updating the credential in the manager
or logging in with credentials different than those stored in the
manager.
(E4) Remove credential: Users may wish to remove credentials
that they no longer wish to have stored by the manager. They may
also need to mass delete credentials if they are planning to migrate
away from the manager.
Tasks include manually removing an obsolete credential or hav-
ing the user migrate to a new manager.
(E5) Autofill credential: One key benefit of password managers
is that the manager can automatically enter and submit credentials,
obviating the need to enter credentials manually.
The primary task is to log in to a website/app. Furthermore,
tasks could explore situations where there are multiple credentials
associated with the website/app or multiple credentials for different
subdomains of a common parent domain.
(E6) Manually enter credential: Users need to enter creden-
tials on a range of devices, some of which may not have the manager
available—for example, entering Netflix credentials on a smart TV
or game console—or for which the user does not have a manager
installed—for example, a work computer or phone. In these cases,
they need to enter credentials stored in their manager manually.
Additionally, even if the manager is available, autofill can fail, ne-
cessitating the manual entry of credentials.
Tasks should include manually typing credentials as well as
copying and pasting credentials. The task of manually typing cre-
dentials can be conducted on a range of devices, with studies com-
paring the dynamics of entering different types of passwords—
i.e., human-generated, simple machine-generated, and complex
machine-generated—on these different devices.
(E7) Generate password: Generating credentials helps ensure
that users have strong and unique credentials. Credentials could
also be tailored to meet user needs, making them more memorable
or easy to enter on different devices.
Tasks that could prompt password generation include creat-
ing a new account updating an existing account, or creating a
PIN/password for a separate use case (e.g., generating a PIN for a
credit card).
(E8) Sync credentials: Users often have multiple devices where
they need to access stored credentials, such as desktops, laptops,
tablets, and phones. Managers support this by allowing users to
synchronize credentials between these devices.
Tasks include setting up a secondary device or creating/updating
a credential on one device then immediately using it on another
device.
(E8) Lock manage and (E9) Unlock manager: Users may need to
lock their manager to prevent other users of their computer from
accessing their credentials—for example, before letting a friend
borrow their laptop. They may also automatically set their manager
to deactivate after a set period or when some event occurs, such
as closing the browser. Eventually, they will need to reactivate the
manager before continuing to use it.
For each use case, there is a singular task to deactivate and
activate the manager, respectively. Studies could also explore what
situations would cause a user to feel the need to deactivate their
manager. Similarly, longitudinal studies could seek to understand
user perceptions of autolock by asking users about it during the
unlock process.
2.2 Recommended Use Cases
Recommended use cases identify use cases that we believe—based
on our review of the literature and personal experience—significantly
improve the usability and utility of managers. Unlike the essential
use cases, the uses cases are not supported by all managers.
(R1) Audit credentials: Auditing stored credentials can help
users identify reused passwords, weak passwords, or credentials
included in a password leak (commonly referred to as a “health
check”). This service is beneficial for passwords manually created
and stored by the user, as these are much more likely to be weak or
reused than generated passwords.
Tasks include asking users to periodically examine their creden-
tials or check credentials based on news of a password leak. When
exploring this use case, it is essential to consider the case where
the user stores primarily human-generated credentials [8, 16, 21],
causing the credential audits to return a large number of results.
(R2) Modify settings: Users modify settings to customize the
manager for themselves and to ensure secure behavior. For example,
Oesch and Ruoti [19] found that in some managers, users need to
manually require user interaction before autofill to prevent a range
of credential scraping and XSS attacks.
Tasks include updating settings as part of the initial setup or
disabling specific unsafe settings. Importantly, this latter should
also explore how users find relevant settings, understand what they
need to do, and ultimately change those settings.
(R3) Recover access: If users lose access to their password man-
ager (e.g., forget their master password), this represents a significant
challenge as they will lose access to all their accounts and need to
reset those passwords (where that is even possible). Managers can
provide options to help users recover access to their accounts in
these situations. Note, the password manager’s security will only
be as good as the security of the recovery mechanism.
530ACSAC ’21, December 6–10, 2021, Virtual Event, USA
James Simmons, Oumar Diallo, Sean Oesch, and Scott Ruoti
The singular task is to recover access when access has been lost.
In practice, it may be necessary to study this property in a longitu-
dinal study as many of the recovery mechanisms we observed do
not work in laboratory settings.
2.3 Extended Use Cases
Extended uses cases include situationally useful use cases, but for
which we find no evidence that they are widely used in practice.
(X1) Migrate manager: Over time, users may switch between
managers, such as moving from a browser-based manager to a
more feature-rich and secure extension-based manager. In this case,
they will need to export credentials from their old manager and
then import them into the new manager. They will also need to
discontinue the use of their old manager safely.
Tasks include migrating to a new tool or creating a backup of the
credential vault (effectively migrating from the current manager to
an offline store).
(X2) Share credentials: Users may need to share credentials
with each other—for example, family members that share access to
common video services like Netflix or Disney+. While this can be
done by manually sending credentials across secondary commu-
nication channels (e.g., email), this use case focuses on manager-
supported sharing.
Tasks include sharing a credential as well as updating, removing,
and using shared credentials.
(X3) Manage identities: Managers can allow credentials to be
segmented between multiple identities, only allowing access to
the credentials for the currently select identity. Segmentation can
include allowing a single user to separate credentials based on
context—for example, one identity for work and one for home. Al-
ternatively, multiple users could use this to share a single password
manager account—for example, a wife and husband who only want
to pay for one subscription to a password manager. Within this
use case, we include the creation and modification of identities and
switching between identities.
Tasks include creating initial identities to separate credentials,
adding/removing identities, moving credentials between identities,
and switching identities to log in to various websites/apps.
(X4) Store sensitive data: In addition to storing credentials,
users may need to store other sensitive information such as ad-
dresses and payment information. Storage could include unstruc-
tured data (i.e., storing arbitrary strings) or structured data (e.g.,
phone number, address).
Tasks include entering new sensitive information, updating that
information, viewing that information, and filling that information
into forms.
2.4 Coverage in Prior Work
We analyzed prior work to determine which use cases they had
considered in their studies. For the software security research, most
research has focused on the security of (E5) Autofill credential [9, 15,
18, 19, 30, 32], though some have also considered (X4) Store sensitive
data [11, 15, 19] and (E7) Generate password [19]. Interviews of
password manager users [8, 21, 22] touch on a wide variety of
topics, but the analysis of this data primarily focuses on three
uses cases: (E2) Register credential, (E5) Autofill credential, and (E7)
Generate password.
Finally, usability studies cover the broadest range of use cases,
with their coverage summarized in Table 3. While there is consistent
coverage of (E2) Register credential, (E3) Update credential, and (E5)
Autofill credential, coverage for the remaining use case is either
rare—three essential use cases are only covered by a single study—
or completely absent—including three essential use cases. This
lack of coverage clearly highlights a need for additional usability
studies exploring the understudied use cases. In particular, there is
a critical need for studies examining (E6) Manually enter credential,
(E7) Generate password, (E8) Sync credentials, (R1) Audit credentials,
and (R3) Recover access.
3 DESIGN PARADIGMS
In the last section, we established the need for additional studies of
password manager use cases. However, new studies will be most
impactful if they compare and contrast the ways—hereafter referred
to as design paradigms)—in which these use cases can be satisfied.
Comparing design paradigms makes it possible to identify their
relative strengths and weaknesses, forming the scientific basis for
designing and implementing modified and new password managers.
As an example of the importance of studying design paradigms, we
note that while the usability problems with secure email were long
known [27, 34], it was not until research focused on comparing
and contrasting design paradigms [1, 24, 25] that secure email was
finally made usable [26].
To help with the creation of such studies, we set out to system-
atize the design paradigms. This systematization was done by thor-
oughly analyzing the designs used in 12 popular desktop managers
and 12 popular mobile managers (see Tables 1 and 2, respectively).
We also reviewed the literature to identify any design paradigms
discussed there that might not be reflected in deployed managers.
When identifying design paradigms, we are primarily concerned
with the high-level design, not individual implementation details
for each manager.
Tables 4 and 5 summarized the design paradigms identified in
evaluation. It also includes a mapping showing which paradigms
are supported by the eight popular desktop managers evaluated
in our cognitive walkthroughs (see §4). This mapping helps to
demonstrate which paradigms are widely supported, which are
supported by a small number of managers, and which paradigms
often appear together. In the remainder of this section, we discuss
these paradigms in greater depth.
3.1 Essential Use Case Paradigms
(E1) Setup manager: There are three types of password managers,
each of which use a different setup paradigm: extension-based—(P2)
install an extension, thick client—(P1) install an app, and browser-
based—(P3) built into the browser. The most common setup para-
digm for extension-based and thick client managers is installing an
extension; however, this switches to installing an app on mobile
devices. Some desktop managers support installing both an app
and extension, providing additional features and security if both
setup paradigms are used. In some cases, the password manager
is (P4) built into the operating system, with a browser serving as
531Systematization of Password Manager Use Cases and Design Paradigms
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 3: Use cases examined in prior usability studies
an interface for that password manager (e.g., macOS Keychain and
Safari).
Finally, a manager often (P5) requires a cloud account to be created
and used to access the password manager or sync passwords. In
browsers, this is done using the same account used to log in to the
browser. While browsers do support using the password manager
without a linked account, this will prevent credential syncing and
may disable other features.
(E2) Register credential: All managers support (P1) manual
registration of credentials within the manager’s UI, with most also
able to (P2) auto-detect registration and offer to save the detected
credential. On desktop, this detection is primarily limited to use
with websites in a browser, whereas on mobile, detection works in
both browsers and apps. Stobert et al. [31] proposed and tested a
design paradigm where an (P3) internal registration tool can create
online accounts, though this has not been implemented in any
deployed manager. Finally, some managers allow users to (P4) link
additional domains or apps to a credential, addressing the case where
the same authentication backend is used by multiple domains/apps—
for example, LAN websites using a common LDAP backend. This
linking is helpful to avoid credentials being marked as reused in a
credential audit.
(E3) Update credential: As with registering credentials, man-
agers support (P1) manual update and may be able to (P2) auto-detect
update as well. Some managers also provide an (P3) internal update
tool that provides a one-click method for a user to update their
credentials, both changing the credential in the manager and at the
website/app.
(E4) Remove credential: All managers support (P1) manual re-
moval of credentials. Unlike registration and updating credentials,
managers do not support (E4) Remove credential, though it is easy
to imagine how such a feature could be implemented. Stobert et
al. [31] proposed and tested a design paradigm where an (P3) inter-
nal registration tool can delete online accounts, though this has not
been implemented in any deployed manager. Some managers also
allow users to entirely (P4) wipe the credential vault, allowing them