### 5.5 Impact of Optimizations

#### The Importance of Routing Optimizations
Minimal-upflow wiring and early forwarding alone do not provide high resilience; our WCMP (Weighted Cost Multi-Path) routing is also necessary. To demonstrate this, we conducted an experiment on a 128-port router with no failures. For minimal-upflow wiring, we configured the routing tables to use early forwarding when possible, but employed ECMP (Equal Cost Multi-Path) routing to split traffic equally to L2 switches for upflow traffic and egress ports for early forwarding traffic.

Figure 17 shows the resulting effective capacity across all trunk sets. Our minimal-upflow wiring, combined with compact routing tables, achieves an effective capacity of 1 across all trunk sets (not shown in the figure). However, the simpler routing technique using ECMP only achieves full capacity for 5 of the trunk sets, whose upflow is zero, with minimal upflow wiring, and much lower effective capacity with random wiring.

#### Canonicalization
Canonicalizing failure patterns often reduces the number of link failures by orders of magnitude. Figure 18 illustrates the average numbers of canonical forms across our 34 trunk sets under different numbers of link failures (y-axis in log scale). With 7 failures, the reduction is five orders of magnitude, from \(10^{11}\) to \(10^6\).

#### Upflow Approximation
For the 128-port router, our upflow approximation (§2) matches the optimal upflow computed using Equation 5 for all but 4 of the trunk sets (Figure 11). For those 4 cases, the differences are extremely small. To demonstrate that our approximation helps compute upflow for larger WAN routers and trunk sets, Figure 19 shows the upflow across all 5-trunk sets (480 such combinations) for a 512-port WAN router. The resulting upflow is 20-30 times lower than the baseline wiring. Additionally, our approximation significantly speeds up upflow computation (Table 3). For 4-trunk cases, the formulation of Equation 5 can take up to 38 minutes to find the minimal upflow using a multi-core desktop (20 cores, 2 Intel Xeon CPU E5-2650 @ 2.30GHz), while our approximation can compute this in a fraction of a second. It can also compute upflow for some 5-trunk configurations when the formulation of Equation 5 does not even complete.

Large providers may have resources to compute minimal-upflow wiring using Equation 5. When using a cluster of 500 multi-core machines, the computation for 4-trunk sets can complete in tens of minutes because the number of extreme traffic matrices ranges from 200 to about 1000 (Figure 20).

#### Computing Effective Capacity
Computing the effective capacity of a link failure pattern takes 30 seconds on a single core of a multi-core machine. This means the total time largely depends on the number of failure patterns. We can estimate this time from Figure 18. For example, finding effective capacities of all combinations of 7 link failures would take about 5.8 hours on a single 24-core machine with canonicalization. Without the optimization, it would take about 66 years.

#### Computing Routing Tables
Calculating a routing table is well within the compute power available to cloud and content providers. It takes at most 2 minutes for a given trunk wiring and a 2-link failure pattern for a 128-port WAN router, across all possible trunk sets and 2-link failure combinations.

#### Routing Approximation
For the 512-port router, we were unable to find optimal routing tables using our compute cluster. However, our approximation formulation (§4) completed in a few minutes for this size of router. Figure 21 shows the optimality gap for our approximation for a 128-port router. It reports, for each trunk set, the maximum number of L2 switch failures which preserve full capacity. We observe that the approximation underestimates this quantity by at most 2, relative to the optimal.

### 6 Related Work

Prior work has considered fault tolerance in multi-stage switching networks [2] (and references therein). This line of work considers interconnection networks where, unlike our setting, (a) packets traverse the network in one direction from the first stage and exit at the last stage, so early forwarding opportunities do not exist, and (b) do not incorporate trunks. Since early forwarding is not possible, designers over-provision the networks [1, 11, 14, 15, 26, 30, 35, 36], by replicating stages, links, or the entire network. Our work achieves fault tolerance without over-provisioning.

Our work might apply to FatTrees [4] and F10 [27]. The latter focuses on limiting the blast radius of failures in datacenters by carefully striping a Clos; it is complementary to our work, which seeks to improve failure resilience by adapting trunk wiring and routing to provide non-blocking behavior in the presence of failures. We do not know of WAN routers that incorporate other topology designs proposed for datacenters, such as FatClique [39], Jellyfish [37], Xpander [38], BCube [17], and DCell [18], so our work focuses on Clos-based WAN routers.

Our work draws inspiration from Google’s original B4 network [25] and more recent incarnations [19]. The B4 network uses various complementary techniques to improve availability and performance.

### 7 Discussion

#### External Link Failures
External links can fail in practice. Our work extends easily to cope with such failures in two different situations. A total trunk failure, in which every link of a trunk fails, neither decreases effective capacity nor changes internal routing. Therefore, our approach applies directly. However, a partial trunk failure, where some links in a trunk fail, requires recalculation of effective capacity and routing (§A.10), which can be pre-computed.

#### Non-Uniform Internal Path Length
Because some incoming traffic on a trunk can be early forwarded, flows within a trunk may experience slightly different latencies. However, packets within a flow do not experience re-ordering because WCMP hashes all packets in a flow to the same path.

#### Cell-Based Routing
Some multi-chip routers, such as Stardust [41] designed from Broadcom Jericho2 [22] and Ramon [23] chips, use cell-based routing. In this approach, the router’s ingress ports divide packets into fixed-size cells and spray them uniformly across the fabric, re-assembling the packet at the egress ports. For such routers, our optimal wiring can increase effective capacity (e.g., over random wiring in Figure 17), but it remains an open question how to compute WCMP-like forwarding tables for these fabrics.

### 8 Conclusion

This paper discusses an approach to optimizing trunk wiring and forwarding weights to increase the resilience of WAN routers in large content- and cloud-provider networks. Based on the observation that early forwarding in L2 switches can create excess internal capacity in the WAN router, enabling it to be more resilient to internal failures, we formulate an efficient optimization to derive the minimal-upflow trunk wiring. Given this wiring and an arbitrary failure pattern, we devise an efficient optimization to compute the effective capacity under failure and describe a technique to compute compact forwarding tables that ensure non-blocking behavior subject to this effective capacity. Our evaluations show that our approach can greatly increase the resilience of WAN routers without sacrificing a precious resource in today’s switches: routing tables.

### Acknowledgements
We thank Nathan Bronson, the SIGCOMM reviewers, and Subhasree Mandal for their comments and feedback that improved the paper greatly.

### References
[References are listed as provided in the original text.]

---

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the original content and structure.