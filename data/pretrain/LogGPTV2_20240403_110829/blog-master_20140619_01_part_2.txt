  exception when others then  
    return;  
end;  
$$ language plpgsql strict;  
CREATE FUNCTION  
$ vi test.sql  
\setrandom vid 1 5000000  
select f(:vid);  
```  
测试结果  
ZFS结果  
```  
pgbench -M prepared -n -r -f ./test.sql -c 8 -j 4 -T 30  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 4  
duration: 30 s  
number of transactions actually processed: 1529642  
tps = 50987.733547 (including connections establishing)  
tps = 50998.421896 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002064        \setrandom vid 1 5000000  
        0.153280        select f(:vid);  
postgres=# select count(*) from test;  
  count    
---------  
 1317641  
(1 row)  
```  
存储主机结果  
```  
pgbench -M prepared -n -r -f ./test.sql -c 8 -j 4 -T 30  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 4  
duration: 30 s  
number of transactions actually processed: 717486  
tps = 23915.516813 (including connections establishing)  
tps = 23921.744263 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003088        \setrandom vid 1 5000000  
        0.328250        select f(:vid);  
postgres=# select count(*) from test;  
 count    
--------  
 668395  
(1 row)  
```  
## 其他  
1\. 有slog和没有slog的pg_test_fsync的测试结果  
有slog  
```  
pg_test_fsync  
O_DIRECT supported on this platform for open_datasync and open_sync.  
Compare file sync methods using one 8kB write:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                         303.897 ops/sec    3291 usecs/op  
        fsync                             329.612 ops/sec    3034 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare file sync methods using two 8kB writes:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                         328.331 ops/sec    3046 usecs/op  
        fsync                             326.671 ops/sec    3061 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare open_sync with different write sizes:  
(This is designed to compare the cost of writing 16kB  
in different write open_sync sizes.)  
         1 * 16kB open_sync write                    n/a*  
         2 *  8kB open_sync writes                   n/a*  
         4 *  4kB open_sync writes                   n/a*  
         8 *  2kB open_sync writes                   n/a*  
        16 *  1kB open_sync writes                   n/a*  
Test if fsync on non-write file descriptor is honored:  
(If the times are similar, fsync() can sync data written  
on a different descriptor.)  
        write, fsync, close               324.818 ops/sec    3079 usecs/op  
        write, close, fsync               325.872 ops/sec    3069 usecs/op  
Non-Sync'ed 8kB writes:  
        write                           78023.363 ops/sec      13 usecs/op  
```  
没有slog  
```  
pg_test_fsync   
5 seconds per test  
O_DIRECT supported on this platform for open_datasync and open_sync.  
Compare file sync methods using one 8kB write:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                         325.150 ops/sec    3076 usecs/op  
        fsync                             320.737 ops/sec    3118 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare file sync methods using two 8kB writes:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                         313.791 ops/sec    3187 usecs/op  
        fsync                             313.884 ops/sec    3186 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare open_sync with different write sizes:  
(This is designed to compare the cost of writing 16kB  
in different write open_sync sizes.)  
         1 * 16kB open_sync write                    n/a*  
         2 *  8kB open_sync writes                   n/a*  
         4 *  4kB open_sync writes                   n/a*  
         8 *  2kB open_sync writes                   n/a*  
        16 *  1kB open_sync writes                   n/a*  
Test if fsync on non-write file descriptor is honored:  
(If the times are similar, fsync() can sync data written  
on a different descriptor.)  
        write, fsync, close               328.620 ops/sec    3043 usecs/op  
        write, close, fsync               328.271 ops/sec    3046 usecs/op  
Non-Sync'ed 8kB writes:  
        write                           71741.498 ops/sec      14 usecs/op  
```  
通过iostat可以看到, 有SLOG时, pg_test_fsync全压到slog那个块设备了, 而没有slog的情况下, 压力都在vdev的块设备上, 这里是raidz所以, 全部在所有的设备上.  
如果slog改成ssd, pg_test_fsync将会有很好的表现. 例如使用/dev/shm模拟ssd  
```  
# cd /dev/shm  
# dd if=/dev/zero of=./test.img bs=1k count=2048000  
# zpool add zp1 log /dev/shm/test.img   
# zpool status  
  pool: zp1  
 state: ONLINE  
  scan: none requested  
config:  
        NAME                 STATE     READ WRITE CKSUM  
        zp1                  ONLINE       0     0     0  
          raidz1-0           ONLINE       0     0     0  
            sda              ONLINE       0     0     0  
            sdb              ONLINE       0     0     0  
            sdc              ONLINE       0     0     0  
            sdd              ONLINE       0     0     0  
            sde              ONLINE       0     0     0  
            sdf              ONLINE       0     0     0  
            sdg              ONLINE       0     0     0  
            sdh              ONLINE       0     0     0  
            sdi              ONLINE       0     0     0  
        logs  
          /dev/shm/test.img  ONLINE       0     0     0  
        spares  
          sdj                AVAIL   
```  
使用内存作为slog后, fsync显然提高了.  
```  
pg_test_fsync   
5 seconds per test  
O_DIRECT supported on this platform for open_datasync and open_sync.  
Compare file sync methods using one 8kB write:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                        6695.657 ops/sec     149 usecs/op  
        fsync                            8079.750 ops/sec     124 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare file sync methods using two 8kB writes:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                        6247.616 ops/sec     160 usecs/op  
        fsync                            3140.959 ops/sec     318 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare open_sync with different write sizes:  
(This is designed to compare the cost of writing 16kB  