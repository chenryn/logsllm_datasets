时，寻找类似下面这段代码的东西是个不错的主意。
public Cursor query (Uri uri, String[1 projection, String
selection, String[] seleetionArgs, String sortOrder)
SQLiteDBHelper sdbh = nev StatementDBBelper (this .getContext ()) 
1
Cursor cursor:
try {
/ / 省鸣了些代码
Azenb·qqps = xosxno
(projection, selection, selectionArgs, sortOrder) ;
)finally {
sdbh, close () 
return cursor;
在上面这段代码中，projcction，sclection，sclectionArgs 以及 sortOrder这些变量
没有一个是直接来自外部app 的。如果content provider是导出的，而且被赋予了URI
权限，或者像我们前面看到的那样，不需要任何权限，这也就意味着攻击者可以注
入任意的SQL语句，扩大恶意查询的攻击点。
让我们来看看你可以怎样使用drozer，对有 SQL注入漏洞的 content provider 发
动攻击。
132
---
## Page 151
第4章利用app中的漏洞
怎么做.
在这个实验中，我将讨论两类SQL注入漏洞：一类是SQL语句中的查询条件子
句是可注入的：另一类是投影操作（projection）子句是可注入的。使用drozer，可以
很容易地找出查询条件子句可注入的content provider。
[=T. uoraoetes--[1a] Kzenb xaptaosd-de umz  run app provider query content: //com.example vulnerabledatabase .
被查询的整张表都会被返回出来，如图4.18这张截图所示。
2
37534618227
32324942225
886324
3
139388953876
1365244
4
04325175937
05915449439
991370
5
72011
86721944473
799103
71431128436
887634
8
02624948651
1973987674
09917736450
402726
10
56111075
869184
98536529734672801
图 4.18
当然，你也可以注入select 语句的投影操作部分，即 SQL语句 FROM之前的部
分。SQL语句的组成格式为：SELECT[投影操作子句]FROM[表名]WHERE[查询
条件子句]。
①指“逻辑同义反复的条件”—译者注
133
---
## Page 152
Android安全攻防实战
拓展阅读
·SQLite 语言参考指南网站中 SQLAs Understood By SQLite 一文的网址：
(http://www.sqlite.org/lang.html)
●《SQL 注入》这篇文章的网址: https:/www.owasp.org/index.php/SQL_Injection
4.11利用可调试的apP
app可以被标记为可调试，这样就允许你在app的执行过程中设置断点，使你在
完成功能测试、错误追踪等工作时方便很多。这样做，还可以让你在设备中运行时
观察VM栈以及挂起和唤醒线程。
不幸的是，在谷歌应用商店里的一些app仍然被标记为可调试。尽管这样做并不
总是意味着世界末日，但是如果 app想要保护认证数据，口令地址，或者其他 app
内存中存放的信息，把app标记为可调试也就意味着攻击者非常容易地就能访问到这
些信息。
这一实验讨论怎样获取一个可调试的app中的变量的值，攻击者或许也能通过
app触发远程代码的执行以及在app的上下文中运行一些代码。
这次使用的样本是“Wall StreetJourmal”这个Android app，而且截至本书编写之
时，它仍旧是发布在谷歌应用商店上的被标记为可调试的app之一。
怎么做·
你要做的第一件事就是确定app是不是可调试的。这很简单，因为app 是不是可
调试的是直接取决于 app 的 manifest 的，即由 Android app 的 manifest 中 application
元素中的 dcbuggable域决定的。要枚举和利用可调试的app，你需要执行如下步骤：
1.检查一个app是不是可调试的，你可以在直接提取app的manifest，也可以
在 drozer 的 console 中执行下面这条命令。
dz> run app -package .debuggable
这条命令会列出所有被设为可调试的package，以及它们被赋予的权限，图
4.19这张截图显示的就是这样一张package 的列表。
134
---
## Page 153
第4章利用app中的漏洞
Packaoe:com.evshar.prolect
UID:10147
Pernissions:
.None.
Package:com.exanple.readnycontacts
Pernisstons:
androtd.pernission.READ_CoNTACTS
Package:com.exanple.tabbedlistview
UID:10148
Pernisstons:
-None.
[董 4.19
你或许会问自己，像这样简单的漏洞会不会出现在实际生活中？好吧，千真
万确，这种漏洞确实存在！图4.20这张截图显示谷歌应用商店中发布的一个
相当知名的 app 也是被设置为可调试的。
Package: ws].reader_sp
UID: 10163
PernLssLons:
androLd.pernLssLon. INTERNET
androtd.perRf.ssLon.ACCESS_NETWORK_STATE
androLd.perRLssLon.WRITE_EXTERNAL_STORAGE
androtd.perntssLon.READ_LOGS
android.pernisston.ACCESS_HIFI_STATE
androLd.pernL.ssLon.RESTART_PACKAGES
androLd.perni.ssLon.RECEIVE_BooT_CoRPLETED
androLd.perntssLon.READ_EXTERNAL_STORAGE
[图 4.20
在这个例子中，debuggable 模块的输出结果说明“Wall Street Joumal Reader”
这个app 是可调试的。
2.在找到了一个好目标之后，你应该用下面这条命令去运行它。
com. example .readmycontacts . MainActivi ty
3.等它运行起来之后，你可以使用ADB连接Java调试连接协议（JavaDebug
WireProtocol）端口，它是一个在虚拟机（VM）实例上打开的专供调试使用
的端口。下面就是你该怎么做。
adb jdyp
135
---
## Page 154
Android安全攻防实战
你应该可以看到与图4.21所示的类似的信息。
[0]k3170nakang814ckwldow:
2863
图 4.21
4.ADB返回的这个数字就是你可以用来连接VM的端口，但是你在本地计算
机上连接它之前，你先得用adb转发这一端口。你应该执行下面这条命令：
adbora.rd tcp: [本地端]jdwp: [Android 设务上的 jdwp 编口]
就拿如图4.22所示的截图上的这个例子来说吧，你应该执行下面这条命令转
发端口。
[0]k3170nakan@Bl4ckWLd0w:-
Sadbforward tcp:31337jdwp:2863
图 4.22
5.现在你可以从你的本地计算机上访间运行着这个app的VM了。就这个角度
讲，你用Java调试器连上这台VM。可以用下面这条命令完成这一任务。。
jdb -attach 1ocalhost: [PORT]
[PORT]是你上一步中用来进行端口转发的那个端口。在这个例子中，它是
31337。所以这条通过jdb进行连接的命令应该写成如下。
jdb -attach 1ocalhost:31337
图4.23这张截图中就是上面这条命令的输出结果。
[0]k3170makan@B14ckWid8w:~
jdb-attachlocalhost:31337
Setd
deferred
Initializing jdb...
uncaught java.lang.Throwable
[ 4.23
6.这样你就连到了Android设备上，运行着这个app 的VM了。然后你就可以
做诸如提取这个app 中的类的相关信息这些事了。在你的jdb会话中，你可
以执行下面这条命令提取类信息。
classe8
这条命令的执行结果如图4.24所示。
136
---
## Page 155
第4章利用app中的漏润
classeslist**
android.accounts.Accounts1
androtd.accounts.AccountRanagerSAnsTask
android.accounts.AccountHanagerSAnsTaskSResponse
邯 4.24
7.你可以用下面这条命令，枚举出指定类中的所有方法。
> methods [class-path]
在上面这条命令中，[class-path]是指你想要了解的类的完整类路径（class path）。
8.图 4.25 就是对一个名为“com.cexample.readmycontacts”的 package 演示上面
这条命令的使用方法的截图。在这里，我们提取的是关于.MainActivity类的
信息，这个类是被用来运行activity的。
d..
图 4.25
9.你甚至可以玩得更深入些，列出指定类的域（field）或类属性（attribute）的
名称和值。你可以在jdb中执行下面这条命令来完成这一任务：
> fields [class name ]
例如：
> fields com.example.readmycontacts.MainActivity
137
---
## Page 156
Android安全攻防实战
作为一个Android应用黑客，你为什么会对读取一个类中一些域的值感兴趣呢？
嗯，因为开发者可能经常直接把一些敏感的细节存储在某个类文件中，而不是从云
端获取它们。所以你可以预计到一些值，比如口令，APItoken、单一系统登录的令
牌、默认的用户名，以及其他一些与登录行为或者其他敏感操作相关的数据会被存
放在某个类的域中。
对于某些Android操作系统面言，特别是没打过补丁的姜饼人系统（Gingerbread
device）“或者更低的版本，这一漏润意味着恶意app或许可以在另一个app的上下
文中执行任意命令。为什么说只是姜饼人或更低版本的呢？因为在姜饼人的Dalvik
虚拟机升级之前，即便是ADB 没有运行，Dalvik也会让可调试的app去会试连接Java
调试连接协议。这就使得能打开目标设备上网络端口的恶意app能够与可调试应用建
立连接，面且（由于Java调试器的工作方式使然）能够进而执行任意代码。欲知这
一行为的详细信息，请访问"拓展阅读”一节中的文章The Debuggable Apps in Android
Marker以及各个不同版本的Dalvik虚拟机源码的链接。
利用Java调试器，你可以做好多事，如果你想要学习这方面的知识，我在“拓
展阅读”一节中也给出了一些有用的链接。
拓展阅读
• The Jdb—The Java Debugger article at http://docs.oracle.com/javase/1.5.0/
docs/tooldocs/windows/jdb.html.
°The Java Platform Debugger Architecture article at http://docs.oracle
com/javase/1.5.0/docs/guide/jpda/index.html.
· The Android:debuggable—— Android Developer Reference guide at http:/
developer.android.com/guide/topics/manifest/applicationelement.htmlfdebug.
•The Debuggable Apps in Android Market article at MWRLabs (http:/
labs.mwrinfosecurity.com/blog/2011/07/07/debuggable-apps-inandroid-market/).
●The Exploit (& Fix) Android "Master Key* article by Saurik at http:/www.
saurik.com/id/17.
▪ The Debugging Java Programs using JDB article at http:/www.packtpub.
com/article/debugging-java-programs-using-jdb.
° JdwpAdb.cKitkat release, Android Source Code repository (htps:/android.
googlesource.com/platform/dalvik/+/kitkat-release/vm/jdwp/Jdwp.Adb.cpp)
* JdwpAdb.cEclair Passion release, Android Source Code repository (https:/
①即Android 2.3系统。—译者注
138
---
## Page 157
第4章利用app中的漏洞
android.googlesource.com/platform/dalvik/+/eclair-passionrelease/vm/jdwp/Jdwp
Adb.c).
sqpydmpf 。
Gingerbread relcase, Android Source Code repository (https:/
android.googlesource.com/platform/dalvik/+/gingerbrcad-release/vm/jdwp/JdwpA
db.c).
4.12对app做中间人攻击
手机用户经常会在咖啡店、图书馆或者其他提供W-Fi服务的地方使用公用的
Wi-Fi访间互联网。不幸的是，由于某些app开发不当，使得用户沦为中间人
（man-in-the-middle，MITM）攻击的受害者。对于那些还不了解中间人攻击的读者，
我简单解释一下：中间人攻击本质上讲就是攻击者用位于在你的网络上的设备，拦
截你通信的一类攻击。如果你想要了解更多在非移动环境中这类攻击的危害和技术
细节的话，请参考“拓展阅读”一节中的相关链接。
道传递的基于网络的资源，内容可信度是很差的，通过控制这些数据，攻击者可以
做任何事，他可以识别出你手机上运行的app，知道你曾经去过地方的精确位置，你