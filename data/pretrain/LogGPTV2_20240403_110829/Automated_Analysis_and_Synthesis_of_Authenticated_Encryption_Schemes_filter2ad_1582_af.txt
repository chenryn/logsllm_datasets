### Decryption Performance and Parallelizability Analysis

We evaluated the decryption performance for a 4096-bit message with no associated data, over 100 runs of each scheme. The experiments were conducted on a 4-core 2.90 GHz Intel Core i5-4210H CPU with TurboBoost disabled. The results include 95% confidence intervals.

#### Depth and Parallelizability

The depth of a node \( x \) in the computation graph represents the latency, measured in terms of the number of TBC (Tweakable Block Cipher) calls required to compute the value at that node. This concept can be extended to define the "depth" for decryption processes as well.

We define two types of parallelizability for an authenticated encryption (AE) scheme \( \Pi \):

1. **Weakly Parallelizable**: For any integer \( m \) and any node \( x \) in the computation graph, if \( \text{depth}(x) \leq \text{Cost}(\Pi) \) for both encryption and decryption, then the scheme is weakly parallelizable. Intuitively, this means that TBC calls can be parallelized across two-block chunks, but not necessarily within the processing of a single two-block chunk.
   
2. **Strongly Parallelizable**: If \( \text{depth}(x) \leq 1 \), the scheme is strongly parallelizable. This indicates that TBC calls can be fully parallelized, even within a two-block chunk.

For example, OTR (cf. Figure 3.8) is weakly parallelizable, while OCB (cf. Figure 3.2) is strongly parallelizable.

#### Efficient Checking of Parallelizability

To efficiently check these conditions, we only need to examine the OUT and FIN nodes, as the depth is strictly increasing. If the depth of the FIN nodes is zero, we compute \( t = \max\{\text{depth}(\text{OUT1}), \text{depth}(\text{OUT2})\} \) and check whether \( t \leq \text{Cost}(\Pi) \) or \( t \leq 1 \). If the FIN nodes have a non-zero depth \( c \), we rerun the analysis with the INI nodes set to depth \( c \). We then compute \( t' = \max\{\text{depth}(\text{OUT1}), \text{depth}(\text{OUT2})\} \). If \( t' \neq t \), the depth grows with \( m \), indicating the scheme is not parallelizable. Otherwise, we check \( t' \leq \text{Cost}(\Pi) \) or \( t' \leq 1 \) to determine parallelizability.

#### Experimental Results

From the results in Figure 4.2, we identified thirteen secure AE schemes of size twelve, five of which are strongly parallelizable. Among these, only OCB is known in the literature. In Figure 4.3, we present two newly synthesized schemes, along with one that is not parallelizable. For all schemes, encryption is strongly parallelizable, but the third scheme's decryption cannot be parallelized.

We implemented all three schemes and compared their performance with an optimized implementation of OCB using AES-NI (Figure 4.4). The preliminary timing results show that the encryption procedures of all four schemes are comparable. However, the decryption procedure of the third synthesized scheme is noticeably slower, as it is not parallelizable; specifically, decrypting ciphertext block \( C_i \) requires plaintext block \( M_{i-1} \).

#### Additional Findings

Among the weakly parallelizable schemes, we found eight that are inverse-free, whereas no such schemes exist among the strongly parallelizable ones. The schemes of size fourteen use one fewer XOR instruction than OTR, the fastest known inverse-free AE scheme.

We also ran our attack generation algorithm (cf. Appendix C) on schemes of sizes 12â€“15 and found that the number of schemes where no attack could be found closely matched the number of schemes our analysis deemed secure. This suggests that while our analysis is not sound, it captures most secure schemes. Specifically, we found 56 schemes for which we could neither prove security nor find a concrete attack.

#### Future Work

Our tool currently takes a given bound \( S \) and enumerates all schemes where decryption can be implemented using at most \( S \) instructions. Future work could involve assigning costs to different instructions (e.g., DUP with cost 0, TBC with a fixed multiple of XOR) and enumerating all schemes with a total cost below a given threshold.

### Conclusion

In this work, we presented a methodology for automatically proving the security of a large class of authenticated encryption (AE) schemes. Using our approach, we synthesized thousands of schemes, most of which have not been studied before. Among these, we discovered five new schemes that are as compact, efficient, and parallelizable as OCB, with competitive performance.

Future work includes further optimizing the synthesis procedure to generate more schemes and developing techniques to check for additional properties like misuse-resistance. It would also be interesting to apply similar techniques to more general classes of AE schemes.

### Acknowledgments

We thank Samuel Neves for pointing out the need to disable TurboBoost on Haswell CPUs for accurate timing measurements. We also thank the anonymous reviewers of CCS 2015 for their suggestions on automatic generation of attacks on schemes that fail our tests.

### References

[References listed here, formatted and cited appropriately]

### Appendix A: Correctness of Reverse

Recall that the decryption function \( \text{Dec} \) should reverse the encryption function \( \text{Enc} \): for any permutation \( f \in \text{Perm}(T, n) \), every tweak \( T \in T \), every initial state \( X \), and any input message \( M \), if \( (\text{Y}, \text{C}) = \text{Enc}_f(T, X, M) \), then \( (\text{Y}, M) = \text{Dec}_{f, f^{-1}}(T, X, \text{C}) \). This is known as the reversal condition.

We now prove that the `Reverse` function produces a correct encryption graph \( G_1 \) given a decryption graph \( G_2 \) as input. Specifically, for any labeling of \( G_2 \) such that the labels on TBC nodes are distinct positive integers, we can assign a corresponding labeling to \( G_1 \) to ensure that \( G_1 \) is a reversal of \( G_2 \).