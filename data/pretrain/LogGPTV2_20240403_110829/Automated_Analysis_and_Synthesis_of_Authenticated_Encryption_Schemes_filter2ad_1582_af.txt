decryption when processing a 4096-bit message with empty associated data, along with the 95% conﬁdence intervals
over 100 runs of each scheme. The experiments were run on a 4-core 2.90 GHz Intel Core i5-4210H CPU with
TurboBoost disabled.
(Intuitively, depth(x) represents the latency, in terms of the number of TBC calls, of computing the value at
node x.) We can use the same idea to compute a “depth” for decryption.
We now deﬁne our notion of parallelizability. We call an AE scheme Π weakly parallelizable if for any
integer m and any node x in the graph described above we have depth(x) ≤ Cost(Π) for both encryption
and decryption. A scheme is strongly parallelizable if depth(x) ≤ 1. Intuitively, weakly parallelizable schemes
are ones where the TBC calls can be parallelized across two-block chunks (but not necessarily within the
processing of a two-block chunk), and strongly parallelizable schemes are ones where the TBC calls can be
parallelized even within a two-block chunk. As an example, OTR (cf. Figure 3.8) is weakly parallelizable
while OCB (cf. Figure 3.2) is strongly parallelizable.
We can check these conditions eﬃciently by noting ﬁrst that we only need to look at the OUT and FIN
nodes, since depth is strictly increasing. Now, suppose we run the analysis on graph Gi. If the depth of the
FIN nodes is zero, then it suﬃces to compute t = max{depth(OUT1), depth(OUT2)} (where OUT1 and OUT2 are
the two OUT nodes) and check whether t ≤ Cost(Π) or t ≤ 1. If the FIN nodes have depth greater than
zero (say, c), we need to rerun the analysis, this time setting the depths of the INI nodes to c (rather than
zero). We can then compute t0 = max{depth(OUT1), depth(OUT2)}. If t0
6= t then this implies that depth
grows with m (and thus the scheme is not parallelizable); otherwise we can check whether t0 ≤ Cost(Π) or
t0 ≤ 1 to determine whether the scheme is parallelizable.
Looking at the results of Figure 4.2, we found thirteen secure AE schemes of size twelve, ﬁve of which
are strongly parallelizable. Of these schemes, as far as we know, only OCB exists in the literature.
In
Figure 4.3 we show two of these newly synthesized schemes, along with one which is not parallelizable. (For
all the schemes in the ﬁgure, encryption is strongly parallelizable; for the third scheme, however, decryption
cannot be parallelized.) We implemented all three schemes and compared their performance with that of
an optimized implementation of OCB by Krovetz11 using AES-NI; see Figure 4.4. (Note that the results in
Figure 4.4 are preliminary timing numbers; the purpose of these experiments is to show that our schemes
are competitive with, not necessarily better than, OCB.) We ﬁnd that the encryption procedure for all four
schemes is comparable. However, the decryption procedure of the third synthesized scheme is noticeably
slower than the others. This is because decryption for this scheme is not parallelizable; namely, to decrypt
ciphertext block Ci we need plaintext block Mi−1.
11See http://web.cs.ucdavis.edu/˜rogaway/ocb/news.
17
M1M2C1C2M3M4C3C4tagτM1M2C1C2M3M4C3C4tagΣ M1M2C1C2M3M4C3C4tagττIn addition, among the weakly parallelizable schemes, we found eight schemes which are inverse-free (we
found no such schemes for strongly parallelizable schemes). The schemes of size fourteen that we found use
one fewer XOR instruction than OTR, the fastest known inverse-free AE scheme we are aware of.
We also ran our attack generation algorithm (cf. Appendix C) over schemes of size 12–15 and found that
the number of schemes where no attack could be found closely matched the number of schemes our analysis
found secure, thus pointing to the fact that while our analysis is not sound, it appears to capture most
secure schemes. In particular, we found a total of 56 schemes which we could neither prove secure nor ﬁnd
a concrete attack for sizes between 12 and 15.
We remark that our tool currently takes a given bound S and enumerates all schemes in which decryption
can be implemented using at most S instructions. In future work one could consider assigning a cost to
diﬀerent instructions (e.g., letting DUP have cost 0, and letting TBC have cost some ﬁxed multiple of XOR)
and enumerating all schemes having at most some given cost.
5 Conclusion
In this work, we present a methodology for automatically proving the security of a large class of authenticated
encryption (AE) schemes. Using our approach, we are able to synthesize thousands of schemes, most of
which have never been studied in the literature. Among these, we discovered ﬁve new schemes which are as
“compact” (in terms of the number of instructions per message block), as “eﬃcient” (in terms of the number
of blockcipher calls per message block), and as parallelizable as OCB, with competitive performance.
There are several interesting avenues for future work. Further optimizing the synthesis procedure would
allow us to generate more schemes. Some of these schemes may have additional properties of interest,
such as misuse-resistance [11]; developing techniques for automatically checking schemes for these additional
properties would be very useful. Taking a diﬀerent approach, it would be interesting to see if similar
techniques can be applied to more general classes of AE schemes.
Acknowledgments
We thank Samuel Neves for pointing out that on Haswell CPUs, TurboBoost must be disabled to measure
the timing accurately. We also thank the anonymous reviewers of CCS 2015 for their suggestion of automatic
generation of attacks on schemes that fail our tests.
Work of Jonathan Katz was done for Exelis under contract number N00173-11-C-2045 to NRL. Work of
Alex J. Malozemoﬀ was conducted with Government support awarded by DoD, Air Force Oﬃce of Scientiﬁc
Research, National Defense Science and Engineering Graduate (NDSEG) Fellowship, 32 CFR 168a.
References
[1] Joseph A. Akinyele, Matthew Green, and Susan Hohenberger. Using SMT solvers to automate de-
sign tasks for encryption and signature schemes. In Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti
Yung, editors, 20th ACM Conference on Computer and Communications Security (CCS), pages 399–410,
Berlin, Germany, November 4–8, 2013. ACM Press.
[2] Joseph A. Akinyele, Matthew Green, Susan Hohenberger, and Matthew W. Pagano. Machine-generated
algorithms, proofs and software for the batch veriﬁcation of digital signature schemes.
In Ting Yu,
George Danezis, and Virgil D. Gligor, editors, 19th ACM Conference on Computer and Communications
Security (CCS), pages 474–487, Raleigh, NC, USA, October 16–18, 2012. ACM Press. Full version
available at https://eprint.iacr.org/2013/175.
[3] Elena Andreeva, Andrey Bogdanov, Atul Luykx, Bart Mennink, Elmar Tischhauser, and Kan Yasuda.
Parallelizable and authenticated online ciphers. In Kazue Sako and Palash Sarkar, editors, Advances
18
in Cryptology—Asiacrypt 2013, Part I, volume 8269 of Lecture Notes in Computer Science, pages 424–
443, Bengalore, India, December 1–5, 2013. Springer, Berlin, Germany. Full version available at https:
//eprint.iacr.org/2013/790.
[4] Gilles Barthe, Juan Manuel Crespo, Benjamin Gr´egoire, C´esar Kunz, Yassine Lakhnech, Benedikt
Schmidt, and Santiago Zanella B´eguelin. Fully automated analysis of padding-based encryption in the
computational model. In Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung, editors, 20th ACM
Conference on Computer and Communications Security (CCS), pages 1247–1260, Berlin, Germany,
November 4–8, 2013. ACM Press. Full version available at https://eprint.iacr.org/2012/695.
[5] Gilles Barthe, Edvard Fagerholm, Dario Fiore, John C. Mitchell, Andre Scedrov, and Benedikt Schmidt.
Automated analysis of cryptographic assumptions in generic group models.
In Juan A. Garay and
Rosario Gennaro, editors, Advances in Cryptology—Crypto 2014, Part I, volume 8616 of Lecture Notes
in Computer Science, pages 95–112, Santa Barbara, CA, USA, August 17–21, 2014. Springer, Berlin,
Germany. Full version available at https://eprint.iacr.org/2014/458.
[6] Gilles Barthe, Edvard Fagerholm, Dario Fiore, Andre Scedrov, Benedikt Schmidt, and Mehdi Ti-
bouchi. Strongly-optimal structure preserving signatures from type II pairings: Synthesis and lower
bounds. In Jonathan Katz, editor, 18th International Conference on Theory and Practice of Public Key
Cryptography (PKC), volume 9020 of Lecture Notes in Computer Science, pages 355–376, Gaithers-
burg, MD, USA, March 30 – April 1, 2015. Springer, Berlin, Germany. Full version available at
https://eprint.iacr.org/2015/019.
[7] Mihir Bellare and Chanathip Namprempre. Authenticated encryption: Relations among notions and
analysis of the generic composition paradigm. Journal of Cryptology, 21(4):469–491, October 2008.
[8] Mihir Bellare and Phillip Rogaway. The security of triple encryption and a framework for code-based
game-playing proofs. In Serge Vaudenay, editor, Advances in Cryptology—Eurocrypt 2006, volume 4004
of Lecture Notes in Computer Science, pages 409–426, St. Petersburg, Russia, May 28 – June 1, 2006.
Springer, Berlin, Germany. Full version available at https://eprint.iacr.org/2004/331.
[9] Dan Bernstein. Cryptographic competitions: CAESAR call for submissions, ﬁnal (2014.01.27). http:
//competitions.cr.yp.to/caesar-call.html.
[10] Morris Dworkin. Recommendations for block cipher modes of operation: The CCM mode for authenti-
cation and conﬁdentiality. NIST Special Publication 800-38C, July 2007.
[11] Ewan Fleischmann, Christian Forler, and Stefan Lucks. McOE: A family of almost foolproof on-line
authenticated encryption schemes. In Anne Canteaut, editor, Fast Software Encryption (FSE) 2012,
volume 7549 of Lecture Notes in Computer Science, pages 196–215, Washington, DC, USA, March 19–21,
2012. Springer, Berlin, Germany. Full version available at https://eprint.iacr.org/2011/644.
[12] Virgil D. Gligor and Pompiliu Donescu. Fast encryption and authentication: XCBC encryption and
XECB authentication modes. In Mitsuru Matsui, editor, Fast Software Encryption (FSE) 2001, volume
2355 of Lecture Notes in Computer Science, pages 92–108, Yokohama, Japan, April 2–4, 2002. Springer,
Berlin, Germany.
[13] Tetsu Iwata, Keisuke Ohashi, and Kazuhiko Minematsu. Breaking and repairing GCM security proofs.
In Reihaneh Safavi-Naini and Ran Canetti, editors, Advances in Cryptology—Crypto 2012, volume 7417
of Lecture Notes in Computer Science, pages 31–49, Santa Barbara, CA, USA, August 19–23, 2012.
Springer, Berlin, Germany. Full version available at https://eprint.iacr.org/2012/438.
[14] Tetsu Iwata and Kan Yasuda. BTM: A single-key, inverse-cipher-free mode for deterministic authenti-
cated encryption. In Michael J. Jacobson Jr., Vincent Rijmen, and Reihaneh Safavi-Naini, editors, SAC
2009: 16th Annual International Workshop on Selected Areas in Cryptography, volume 5867 of Lecture
Notes in Computer Science, pages 313–330, Calgary, Alberta, Canada, August 13–14, 2009. Springer,
Berlin, Germany.
19
[15] Jonathan Katz and Moti Yung. Unforgeable encryption and chosen ciphertext secure modes of operation.
In Bruce Schneier, editor, Fast Software Encryption (FSE) 2000, volume 1978 of Lecture Notes in
Computer Science, pages 284–299, New York, NY, USA, April 10–12, 2001. Springer, Berlin, Germany.
[16] Ted Krovetz and Phillip Rogaway. The software performance of authenticated-encryption modes. In
Antoine Joux, editor, Fast Software Encryption (FSE) 2011, volume 6733 of Lecture Notes in Computer
Science, pages 306–327. Springer, Berlin, Germany, 2011. Full version available at http://web.cs.
ucdavis.edu/˜rogaway/papers/ae.pdf.
[17] Moses Liskov, Ronald L. Rivest, and David Wagner. Tweakable block ciphers. In Moti Yung, editor,
Advances in Cryptology—Crypto 2002, volume 2442 of Lecture Notes in Computer Science, pages 31–46,
Santa Barbara, CA, USA, August 18–22, 2002. Springer, Berlin, Germany.
[18] Alex J. Malozemoﬀ, Jonathan Katz, and Matthew D. Green. Automated analysis and synthesis of
block-cipher modes of operation. In IEEE CSF 2014, pages 140–152, July 2014.
[19] David A. McGrew and John Viega. The security and performance of the Galois/counter mode
(GCM) of operation. In Anne Canteaut and Kapalee Viswanathan, editors, Progress in Cryptology—
Indocrypt 2004, volume 3348 of Lecture Notes in Computer Science, pages 343–355, Chennai, India,
December 20–22, 2004. Springer, Berlin, Germany. Full version available at https://eprint.iacr.
org/2004/193.
[20] Kazuhiko Minematsu. Parallelizable rate-1 authenticated encryption from pseudorandom functions. In
Phong Q. Nguyen and Elisabeth Oswald, editors, Advances in Cryptology—Eurocrypt 2014, volume
8441 of Lecture Notes in Computer Science, pages 275–292, Copenhagen, Denmark, May 11–15, 2014.
Springer, Berlin, Germany. Full version available at https://eprint.iacr.org/2013/628.
[21] Phillip Rogaway. Authenticated-encryption with associated-data. In Vijayalakshmi Atluri, editor, 9th
ACM Conference on Computer and Communications Security (CCS), pages 98–107, Washington D.C.,
USA, November 18–22, 2002. ACM Press. Full version available at http://web.cs.ucdavis.edu/
˜rogaway/papers/ad.pdf.
[22] Phillip Rogaway. Eﬃcient instantiations of tweakable blockciphers and reﬁnements to modes OCB and
PMAC.
In Pil Joong Lee, editor, Advances in Cryptology—Asiacrypt 2004, volume 3329 of Lecture
Notes in Computer Science, pages 16–31, Jeju Island, Korea, December 5–9, 2004. Springer, Berlin,
Germany. Full version available at http://web.cs.ucdavis.edu/˜rogaway/papers/offsets.pdf.
[23] Phillip Rogaway. Nonce-based symmetric encryption. In Bimal K. Roy and Willi Meier, editors, Fast
Software Encryption (FSE) 2004, volume 3017 of Lecture Notes in Computer Science, pages 348–359,
New Delhi, India, February 5–7, 2004. Springer, Berlin, Germany. Full version available at http:
//web.cs.ucdavis.edu/˜rogaway/papers/nonce.pdf.
[24] Phillip Rogaway, Mihir Bellare, John Black, and Ted Krovetz. OCB: A block-cipher mode of operation
for eﬃcient authenticated encryption.
In 8th ACM Conference on Computer and Communications
Security (CCS), pages 196–205. ACM Press, 2001. Full version available at http://web.cs.ucdavis.
edu/˜rogaway/papers/ocb-full.pdf.
[25] Ashish Tiwari, Adri`a Gasc´on, and Bruno Dutertre. Program synthesis using dual interpretation. In
CADE 2015, August 2015.
A Correctness of Reverse
Recall that Dec is supposed to reverse Enc: namely, for any f ∈ Perm(T , n), every T ∈ T , every initial
state X, and any input M, if (Y, C) = Encf(T, X, M) then (Y, M) = Decf,f−1(T, X, C). We call this the
20
1 (and thus an OUT node in G−
2 6= ⊥, then G−
1 given the labeling for G−
1 is a reversal of G−
2 .
Let G−
2 6= ⊥ denote the output of Reverse(G−
1 , then assign label ‘ to x in G−
1 ; otherwise assign x label −‘.
1 is a reversal of the output graph G−
2 . That is, for any labeling of G−
1 . Let ‘ be the label of x in G−
2 and let y be the parent of x in G−
1 ). Fix some f ∈ Perm(T , n), and a labeling on G−
reversal condition. We now prove that Reverse produces a “correct” Enc graph given a Dec graph as input, by
showing that the input graph G−
2 such
that the labels on TBC nodes are distinct positive integers, one can assign a corresponding labeling to G−
1