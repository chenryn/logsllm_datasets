---
author: Seth Kenlon
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 3697
date: '2020-01-25 22:07:00'
editorchoice: false
excerpt: 使用 Pygame 模块来使你的 Python 平台开启侧滚效果，来让你的玩家自由奔跑。
fromurl: https://opensource.com/article/19/12/python-platformer-game-run
id: 11819
islctt: true
largepic: /data/attachment/album/202001/25/220636x5mabbl47xvtsk55.jpg
permalink: /article-11819-1.html
pic: /data/attachment/album/202001/25/220636x5mabbl47xvtsk55.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11790
- displayorder: 0
  raid: 11828
reviewer: wxy
selector: lujun9972
summary: 使用 Pygame 模块来使你的 Python 平台开启侧滚效果，来让你的玩家自由奔跑。
tags:
- Pygame
thumb: false
title: 使你的 Python 游戏玩家能够向前和向后跑
titlepic: true
translator: robsean
updated: '2020-01-25 22:07:00'
---
> 
> 使用 Pygame 模块来使你的 Python 平台开启侧滚效果，来让你的玩家自由奔跑。
> 
> 
> 
![](/data/attachment/album/202001/25/220636x5mabbl47xvtsk55.jpg)
这是仍在进行中的关于使用 Pygame 模块来在 Python 3 中在创建电脑游戏的第九部分。先前的文章是：
* [通过构建一个简单的掷骰子游戏去学习怎么用 Python 编程](/article-9071-1.html)
* [使用 Python 和 Pygame 模块构建一个游戏框架](/article-10850-1.html)
* [如何在你的 Python 游戏中添加一个玩家](/article-10858-1.html)
* [用 Pygame 使你的游戏角色移动起来](/article-10874-1.html)
* [如何向你的 Python 游戏中添加一个敌人](/article-10883-1.html)
* [在 Pygame 游戏中放置平台](/article-10902-1.html)
* [在你的 Python 游戏中模拟引力](/article-11780-1.html)
* [为你的 Python 平台类游戏添加跳跃功能](/article-11790-1.html)
在这一系列关于使用 [Pygame](https://www.pygame.org/news) 模块来在 [Python 3](https://www.python.org/) 中创建电脑游戏的先前文章中，你已经设计了你的关卡设计布局，但是你的关卡的一些部分可能已近超出你的屏幕的可视区域。在平台类游戏中，这个问题的普遍解决方案是，像术语“ 侧滚   side-scroller ”表明的一样，滚动。
滚动的关键是当玩家精灵接近屏的幕边缘时，使在玩家精灵周围的平台移动。这样给予一种错觉，屏幕是一个在游戏世界中穿梭追拍的摄像机。
这个滚动技巧需要两个在屏幕边缘的绝对区域，在绝对区域内的点处，在世界滚动期间，你的化身静止不动。
### 在侧滚动条中放置卷轴
如果你希望你的玩家能够后退，你需要一个触发点来向前和向后。这两个点仅仅是两个变量。设置它们各个距各个屏幕边缘大约 100 或 200 像素。在你的设置部分中创建变量。在下面的代码中，前两行用于上下文说明，所以仅需要添加这行后的代码：
```
player_list.add(player)
steps = 10
forwardX  = 600
backwardX = 230
```
在主循环中，查看你的玩家精灵是否在 `forwardx` 或 `backwardx` 滚动点处。如果是这样，向左或向右移动使用的平台，取决于世界是向前或向后移动。在下面的代码中，代码的最后三行仅供你参考：
```
        # scroll the world forward
        if player.rect.x >= forwardx:
                scroll = player.rect.x - forwardx
                player.rect.x = forwardx
                for p in plat_list:
                        p.rect.x -= scroll
        # scroll the world backward
        if player.rect.x = forwardx:
        scroll = player.rect.x - forwardx
        player.rect.x = forwardx
        for p in plat_list:
            p.rect.x -= scroll
        for e in enemy_list:
            e.rect.x -= scroll
```
来滚向另一个方向：
```
    # scroll the world backward
    if player.rect.x  worldy and self.movey >= 0:
            self.movey = 0
            self.rect.y = worldy-ty
    def control(self,x,y):
        '''
        control player movement
        '''
        self.movex += x
        self.movey += y
    def update(self):
        '''
        Update sprite position
        '''
        self.rect.x = self.rect.x + self.movex
        self.rect.y = self.rect.y + self.movey
        # moving left
        if self.movex  ani*3:
                self.frame = 0
            self.image = self.images[self.frame//ani]
        # moving right
        if self.movex > 0:
            self.frame += 1
            if self.frame > ani*3:
                self.frame = 0