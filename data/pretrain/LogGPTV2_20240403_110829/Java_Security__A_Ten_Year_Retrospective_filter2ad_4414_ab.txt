### Environment

The divergence of opinions intensified over time. The Java security features within Netscape's browser releases were becoming increasingly distinct from the direction in which JDK 1.2 was heading. As the dispute dragged on, it became more challenging to resolve the differences. The debate with Netscape was not about whose work was right or wrong. Undoubtedly, the Netscape team had a deep understanding of the browser and aimed to do what was best for it. Instead, the key question was what should be built into the platform, what should be done as optional extensions, and what should be left to application developers. Answering this question required making a bet on the future direction of Java. We believed that, while the browser was very important, it was just one of many types of applications Java should support, and browser-specific security support should not override or replace general systems security.

### Building Better Relationships

To improve our working relationship, Jim Roskind and I were instructed by our respective management to visit each other’s offices on alternate weeks, which we did. However, we could not reconcile the work differences. Late into the JDK 1.2 project, news came that Jim Barksdale (CEO of Netscape) and Alan Baratz (President of JavaSoft) had made a deal in a New York hotel room to submit the dispute to arbitration by IBM. IBM quickly assembled a task force led by Bob Blakley, consisting of security experts. They requested and received design documents, code, test cases—everything that would help them evaluate the two different systems. After a few months of high suspense, the Sun and Netscape teams were called into a conference room at IBM’s Java building in Cupertino, a block away from JavaSoft. Bob led off their presentation, rating the systems à la Consumer Reports, complete with charts and stars. He then announced that JavaSoft’s design had won, abruptly ending the exhausting conflict.

### Safe Coding

David Wagner at UC Berkeley recently asked me how extensively the fine-grained access control mechanism, central to the JDK 1.2 security architecture, is used today. I have not conducted a survey, so I do not have a definitive answer. However, it is important to emphasize that, in addition to providing an implementation of the principle of least privilege, another key goal of this architecture was to make safe code easier to write.

For example, with a seemingly trivial binary security model, the implementation in JDK 1.0/1.1 was very fragile. Consider the case of a file system API being called to open a file. According to the model, if this request originated from an applet, it should be denied; otherwise, it was allowed. One problem was how to differentiate these two situations. Without a generalized security architecture in place, the JRE resorted to counting the number of call frames on the system execution stack at that moment, trying to determine if there was an applet on the call stack. It was figured out that, in most cases, if the stack count was 2 (or maybe 3, depending on various factors), the call must have come from an applet and thus should be disallowed. There were exceptions to this rule, and the whole system was patched together through trial and error. Any change to the system, such as adding a new class, could alter the system behavior in undesirable ways. Adding a new package to the system would require re-evaluating all existing assumptions. Thus, it is clear that basing security decisions on semi-blind stack counting is not the best approach and was the source of several security bugs.

JDK 1.2 introduced a uniform way to make access control decisions, based on the classic concept of protection domains and the well-known but rarely implemented principle of least privilege. This completely removed guesswork in security enforcement. A critical action is allowed if and only if all individual classes in the calling chain have the necessary privileges.

In conjunction with the principle of least privilege, JDK 1.2 introduced a “trusted” mode, where a programmer can specifically invoke all the privileges the code has, similar to the setuid feature in Unix. This is very useful for writing system code. However, unlike in Unix where setuid is turned on for an entire program, in Java, the special privilege lasts only during that specific part of the code. Programmers who do not use this special feature can be assured that their code will not accidentally cause undue harm, as it is prevented from violating the least privilege principle.

For whatever reason, my Java security book did not delve into these details on why the JDK system security was so fragile in earlier versions. I guess it was considered sensitive information at the time.

### Archimedes’ Fulcrum

A common adage is that security for a system must be designed in; otherwise, it would be almost impossible to retrofit. We were fortunate with Java. Thanks to the foresight of the initial Java designers, they defined the SecurityManager class and made it clear that classes controlling access to critical resources should check with the SecurityManager for a decision to either grant or deny access. It does not matter that in JDK 1.2 we completely rewrote the SecurityManager class or that we practically changed everything related to security from what was originally released. What matters is that the early designers made it acceptable, and indeed necessary, to query the SecurityManager at critical junctures.

I believe this acceptance single-handedly enabled us to retrofit a much more stylized security architecture without causing too many troubles at the code level and the cultural level. The continued use of SecurityManager minimized backward compatibility problems. The requirement that all classes in JDK consider their security implications was easier to accept because security was already a part of the system. This is why I chose to quote Archimedes in the preface of my Java security book: “Give me a lever and a fulcrum, and I can move the globe.” SecurityManager was that fulcrum.

Retrofitting was not easy, however. For example, one technique used by JIT (just-in-time) compilers to speed up code execution was to try to combine consecutive execution instructions into a single instruction. Under the JDK 1.2 security model, each instruction might come from a different piece of code, associated with a unique set of privileges. The JVM folks had to do things differently to ensure that security properties were not broken during code optimizations.

Here is a lighter story: the principle of least privilege effectively lowers the privilege of systems code so that, when they need to exercise their special power, the programmer needs to explicitly enable the special power for that part of the program. This principle broke a lot of existing code—code that was perhaps dangerously exercising too much privilege. Instead of dealing with the new security architecture, an engineer at JavaSoft duplicated system classes but modified them to bypass security checks, solely to let his existing code continue to function as before. Fortunately, this misdeed was caught during our internal security code audit.

### Second Thoughts and Afterthoughts

I am sometimes asked if I have any regrets or second thoughts. Would I have done things differently with hindsight? Did we do too little, too much, or just about right?

In retrospect, it is truly amazing how far we managed to go. My final job interview at JavaSoft (with a very senior figure) centered on the question of whether security for the Java platform was merely about finding bugs and providing fixes, and whether the whole thing would “blow over” in a few months. However, once inside JavaSoft, my team was given a lot of green light and priority, and was granted a lot of freedom (e.g., to require changes to various parts of the system, to delay releases until all security tests were passed) that would be rare in other places.

Broadly speaking, our first major achievement was that we largely “settled” the Java security debate, in the sense that we mapped out the landscape (of security for such a complex language plus development platform), developed a general security model, and produced an implementation of the least-privilege principle. Of course, security work in general and Java security, in particular, continue to this day; but the discussion has matured.

The second major achievement is that we raised the bar for everyone else. Security for any new system is now required, not optional.

The third major achievement is that we made a strong impact, with regard to secure programming, not only on those engineers (at Sun and elsewhere) who were involved in the development of the Java platform itself but also on the very large number of Java programmers. These developers, in turn, bring their security awareness and influence into their next projects.

Looking back, we probably did all we could during that relatively short period of time, under all the constraints we had. Nonetheless, there were a few ideas that I would have loved to investigate further. For example, it would have been much cleaner for the programmer if the privileged operation was specified via a new method modifier "privileged"; however, such a language extension would have required major changes to the system and compilers, involving not only Sun but also many other parties.

As another example, GuardedObject potentially could be used to express security requirements more elegantly and accurately, especially when objects are accessed in a context (or system) that is different from the one in which the objects were created. However, we had to continue with the SecurityManager-centric design because it was both backward compatible with JDK 1.1 and a better understood solution.

In the late 1990s, researchers came up with many interesting ideas to approach security from fresh angles. For example, Fred Schneider, a key member of the Java Security Advisory Council, together with his PhD student at Cornell, Ulfar Erlingsson, proposed Inline Reference Monitors, which promised not only a mechanism to completely separate security policy from enforcement (via bytecode rewriting) but also a theoretical proof that the solution was extremely expressive—it could encode all enforceable policies. Despite the very attractive attributes of those ideas, we simply could not afford to try going down those paths, timing being just one of the many obstacles.

JDK 1.2 turned out to be the single shot we got to overhaul security for the Java platform.

### Never Forget Class Struggle

I was very fortunate to have had the opportunity to participate in the shaping of the Java platform, which has succeeded beyond expectations to become a major force in the software world. In this effort, I have had tremendous help and advice from friends and colleagues too numerous to name them all in this paper. Any and all omissions of names here are not intentional. I have chosen to recall a few stories along this journey, which I hope are interesting to the readers.

As time flies by, memories start to fade. And I did not have the time to double-check events with all the participants. I stand corrected, and apologize in advance, for any inaccuracies or errors. A more comprehensive bibliographical reference to prior work that influenced the Java security architecture can be found in my Java security book.

So, what is Java security, after all? Well, the answers are in the book, but probably not where you would look for them. The book cover, which I designed to depict Duke wielding a sword standing on the Great Wall of China, was meant to be ironic (especially if you can read the Chinese slogans on the two flags)—the Wall was built to defend against barbarians, but the invaders simply broke through elsewhere. My favorite quote in the book is Mao Ze-Dong’s well-known utterance, “Never Forget Class Struggle,” which is basically what Java security is all about.

### Acknowledgements

Jeremy Epstein invited me to write this retrospective and helped me with editorial matters. Peter Neumann tracked down old meeting notes and provided detailed comments on a draft of this paper. Drew Dean reminded me of some of the early Java security bugs. I am very grateful for their time and effort.

### References

[1] The ACM RISKS Forum. Moderated by P.G. Neumann. Online at www.risks.org.
[2] L. Gong, "New Security Architectural Directions for Java (Extended Abstract)". In Proceedings of IEEE COMPCON, San Jose, California, February, 1997, pp. 97--102.
[3] L. Gong. Java Security: Present and Near Future, IEEE Micro, 17(3):14--19, May/June 1997.
[4] L. Gong, M. Mueller, H. Prafullchandra, and R. Schemers., "Going Beyond the Sandbox: An Overview of the New Security Architecture in the Java Development Kit 1.2". In Proceedings of the USENIX Symposium on Internet Technologies and Systems, Monterey, California, December, 1997, pp. 103--112.
[5] L. Gong. Inside Java 2 Platform Security, First Edition, Addison Wesley, 1999.
[6] L. Gong, G. Ellison, and M. Dageforde. Inside Java 2 Platform Security, Second Edition, Addison Wesley, 2003.

### Java Security: Present and Near Future

**Li Gong, JavaSoft**

The global system infrastructure is evolving rapidly, and Java’s security model must keep pace. Since the inception of Java, there has been strong and growing interest in Java’s security, as well as in new security issues raised by its deployment. These concerns have reached the mainstream, with articles appearing in publications like the New York Times and the Wall Street Journal. However, we must examine Java’s trustworthiness comprehensively, from a broad dependability perspective, not just from a journalistic view.

A simplistic statement such as “Java is [or is not] secure” does not capture the complexity of the issues involved. To pass judgment on whether Java is a trustworthy language or platform, we must precisely define what we mean by "secure" and consider the full range of security aspects.