    GDI32!MRSETDIBITSTODEVICE::bCheckRecord+0x6:
    00007ff8`2a376326 448b4104        mov     r8d,dword ptr [rcx+4] ds:0000002c`8f00be90=00000078
    0:027> dt tagEMR 0000002c8f00be8c
    vaultcli!tagEMR
       +0x000 iType            : 0x50
       +0x004 nSize            : 0x78
    0:026> p
    gdi32full!MRSETDIBITSTODEVICE::bCheckRecord+0x2a:
    00007ffd`cf88a56a 39442430        cmp     dword ptr [rsp+30h],eax ss:000000bb`06b9f650=00000078
    0:027> p//与0x78比较检查nSize
    GDI32!MRSETDIBITSTODEVICE::bCheckRecord+0x6:
    00007ff8`2a376326 448b4104        mov     r8d,dword ptr [rcx+4] ds:0000002c`8f00be90=00000078
    ……
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bCheckRecord+0x16://获得vaultcli!EMRSETDIBITSTODEVICE的cbBmiSrc成员变量值
    00007ff8`2a376336 8b4934          mov     ecx,dword ptr [rcx+34h] ds:0000002c`8f00bec0=00000028
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bCheckRecord+0x19:
    00007ff8`2a376339 bab0ffffff      mov     edx,0FFFFFFB0h
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bCheckRecord+0x1e://与0x0FFFFFFB0作比较，检查cbBmiSrc的上限
    00007ff8`2a37633e 3bca            cmp     ecx,edx
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bCheckRecord+0x20:
    00007ff8`2a376340 7343            jae     GDI32!MRSETDIBITSTODEVICE::bCheckRecord+0x65 (00007ff8`2a376385) [br=0]
因为代码片段较长，这里我列举了一些片段，主要就是对结构体中的一些成员变量进行检查，比如头部的tagEMR，会检查tagEMR中的nSize，后续还会检查cbBmiSrc（BitmapInfo大小）等等。
随后继续单步跟踪，会到达bClipped这个函数，这个函数的主要功能就是对EMRSETDIBITSTODEVICE结构体偏移0x8位置的成员，也就是_RECTL进行检查，_RECTL主要是负责这个图像的上下左右边界。
    0:026> p//传递rbx+8地址值，是个_RECTL对象
    gdi32full!MRSETDIBITSTODEVICE::bPlay+0x4e:
    00007ffd`cf88dfae 488d5308        lea     rdx,[rbx+8]
    0:026> p
    gdi32full!MRSETDIBITSTODEVICE::bPlay+0x52:
    00007ffd`cf88dfb2 488bcd          mov     rcx,rbp
    0:026> p
    gdi32full!MRSETDIBITSTODEVICE::bPlay+0x55:
    00007ffd`cf88dfb5 e822caffff      call    gdi32full!MF::bClipped (00007ffd`cf88a9dc)
    0:026> r rdx
    rdx=0000029606a4a0e4
    0:026> dt _RECTL 0000029606a4a0e4
    vaultcli!_RECTL
       +0x000 left             : 0n0
       +0x004 top              : 0n0
       +0x008 right            : 0n15
       +0x00c bottom           : 0n15
    0:027> r rcx
    rcx=0000003492ac5280
    0:027> dt _RECTL 0000003492ac5280+8c//这里偏移+8c是由于pvClientObjGet获取的对象偏移+8c存放的是比较值，具体在函数里体现
    vaultcli!_RECTL
       +0x000 left             : 0n-1
       +0x004 top              : 0n-1
       +0x008 right            : 0n17
       +0x00c bottom           : 0n17
在rcx寄存器，也就是第一个参数中存放的是上下左右的界限，而第二个参数则是我们当前图像的RECTL，我们来看一下bClipped检查的伪代码。
    __int64 __fastcall MF::bClipped(MF *this, struct ERECTL *a2)//this指针是pvClientObjGet对象，a2是RECTL对象，这两个对象对应偏移之间会有一个检查，检查当前RECTL对象是否在符合条件的范围内
    {
      v2 = ERECTL::bEmpty(a2);//先判断要判断的地址非空
      v5 = 0;
      if ( v2 )
      {
        result = 0i64;
      }
      else
      {
        if ( *(_DWORD *)(v4 + 140) > *(_DWORD *)(v3 + 8)//检查上下左右是否符合要求
          || *(_DWORD *)(v4 + 148)  *(_DWORD *)(v3 + 12)
          || *(_DWORD *)(v4 + 152)  p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x68://获取xDest，x轴值
    00007ff8`2a378798 8b4318          mov     eax,dword ptr [rbx+18h] ds:0000002c`8f00bea4=00000000
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x6b:
    00007ff8`2a37879b 488d9424a0000000 lea     rdx,[rsp+0A0h]
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x73:
    00007ff8`2a3787a3 898424a0000000  mov     dword ptr [rsp+0A0h],eax ss:00000034`93cef700=00000008
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x7a:
    00007ff8`2a3787aa 41b801000000    mov     r8d,1
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x80://获取yDest，y轴值
    00007ff8`2a3787b0 8b431c          mov     eax,dword ptr [rbx+1Ch] ds:0000002c`8f00bea8=00000000
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x83:
    00007ff8`2a3787b3 898424a4000000  mov     dword ptr [rsp+0A4h],eax ss:00000034`93cef704=00000000
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x8a://获取hdc
    00007ff8`2a3787ba 488b8dd8020000  mov     rcx,qword ptr [rbp+2D8h] ss:00000034`92ac5558=ffffffffe90107a2
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x91://LPtoDP把x、y坐标发给hdc
    00007ff8`2a3787c1 e8ba87faff      call    GDI32!LPtoDP (00007ff8`2a320f80)
    ……
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0x9a://SetWorldTransform函数为指定的设备上下文在全局空间和页空间之间设置一个二维线性变换。 此变换可用于缩放，旋转，剪切或转换图形输出。
    00007ff8`2a3787ca 488d95c0020000  lea     rdx,[rbp+2C0h]
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0xa1:
    00007ff8`2a3787d1 41b804000000    mov     r8d,4
    0:027> p
    GDI32!MRSETDIBITSTODEVICE::bPlay+0xa7:
    00007ff8`2a3787d7 498bcf          mov     rcx,r15