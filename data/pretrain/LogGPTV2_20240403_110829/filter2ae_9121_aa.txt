**作者：[wjllz](https://redogwu.github.io/2018/11/03/windows-kernel-exploit-part-4/ "wjllz")  
来源：[先知安全技术社区](https://xz.aliyun.com/t/3146 "先知安全技术社区")**
## 前言
Hello, 欢迎来到`windows kernel exploit`第四篇, 这篇文章主要讲述在对`MS-16-0198`的利用当中进行的一次爬坑,
以及在内核利用当中一种相当重要的技术, `pool fengshui`.
Anyway, 希望能对您有一点点小小的帮助 :)
### 一点小小的吐槽
这篇漏洞有另外两篇详细的分析.
在[先知](https://xz.aliyun.com/)和[另外一个网站](https://sensepost.com/blog/2017/exploiting-ms16-098-rgnobj-integer-overflow-on-windows-8)上. 所以在我一开始的计划当中, 我只是调一下写一下利用就好.
没打算放在这个系列里面的. 但是在写这个利用的时候, 发生了一点点事, 让我一度怀疑我是一个孤儿.
我一开始copy了代码和原文件尝试运行失败了. 于是在读文章的过程中, 修复了一些代码. 我在pool fengshui那里折腾了将近半天的时间,
因为原文的exp的数据大小在我这里是不适用的(我的环境也是windows 8.1 x64). 先知和原作者都成功的运行了exp,
于是就给了我一种为毛你们都可以, 就我不可以的孤儿感 :(
另外一个方面, 在我计划的第五篇和第六篇文章里面, 会牵扯到这里面的知识. pool fengshui, 所以最后决定写一下自己的爬坑之旅.
## exp的运行
## 查找错误原因
于是我在源代码的触发漏洞的地方插入了两个`__debugbreak()`语句.
在进行漏洞函数`xxx`分配`pool`的地方下了断点, 然后得到如下的结果. 观察其分配的`pool`. 得到如下的结果:
我们看到在他原来的文章当中理想的风水布局的结果如图:
于是我们可以判断出原作者在我的环境上面`fengshui`出错了.
## pool feng shui.
在查找到了我们的错误点之后, 就到了我们的`pool feng shui`隆重出场.
### pool feng shui概述
依然, 我们尽量少做重复性质的工作. 所以这里我会对pool feng shui做一个大概的总结.
相关性的详细讨论你可以在[这里](https://sensepost.com/blog/2017/exploiting-ms16-098-rgnobj-integer-overflow-on-windows-8.1-x64-bit-by-abusing-gdi-objects/)找到.
我们先来看一下这张图(图片来源blackhat):
这是我们所期待的布局. 为什么让我们的`vul buffer`落入此地址呢. 在一些利用当中. 实现利用要对`vul
buffer`相连的对象的关键数据结构进行操作(如bitmap).
具体的你可以在我的[第三篇博客](https://redogwu.github.io/2018/11/03/windows-kernel-exploit-part-4/)里面找到实际样例.
于是, 为了使这个理想的布局情况能够出现, 我们需要借用`pool fengshui`的技术. 链接里面已经给了`pool fengshui`的相关链接.
你可以查看他了解更多细节.
我们来看blackhat上面的作者是如何实现的.
[+] 第一步: 填充大小为0x808对象
[+] 第二步: 填充大小为0x5f8对象(留下0x200的空隙)
[+] 第三步: 填充大小为0x200的对象
[+] 第四步: 释放大小为0x5f8的对象
[+] 第五步: 填充大小为0x538的对象(留下0xc0的空隙)
[+] 第六步: 填充大小为0xc0的对象
[+] 第七步: 释放部分0x200对象(留下0x200的对象, vul buffer能够填充进去)
在`漏洞代码`进行`vul buffer`(大小也为0x200)分配的时候, 能够落入到我们预先安排的0x200的空隙当中. 上面的就是`pool
fengshui`的大概思路了. 让我们来看一下更多的细节.
### pool feng shui原则
而相应的, 我们来总结一下feng shui布局的比较关键性的原则.
#### 0x1000的划分
0x1000在`pool`的分配当中, 与freelist挂钩. 分为两个情况
    [+] 当分配的pool size大于0x808的时候, 内存块会往前面挤
    [+] 当分配的pool size小于0x808的时候, 内存块会往后面挤
![free
list](https://images.seebug.org/content/images/2019/04/02/1554175911000-blog_42.png-w331s)
#### 分配的对象需要属于同一种对象
pool 分为几个类型. 我查阅的`windows 7`的资料. 不过对于`windows 10`应该是同样适用的
    [+] Nnonpaged pool
    [+] paged pool
    [+] session pool
也就是, 上面的`0x200`的数据和`0xc0`的数据想挨在一起. 那么他们必须是同样的pool type. 此处为`Paged Session
Pool`.(我以前在做第二篇博客的时候由于这个点的失误, 导致我浪费了整整一天的时间 :).
#### 分配的对象的size计算
如果你申请的`pool`大小为`0x20`, 那么在windows x64平台下的实际`pool size`应该是`0x30`, 因为还要加上`pool
header`部分.
需要注意的是, 这一部分来源于[这里](https://redogwu.github.io/2018/11/03/windows-kernel-exploit-part-4/). 我只是做了一点小小的改动 :)
### pool feng shui的数据选择.
既然知道了我们的`pool feng shui`的思路, 那么我们就需要分配`nSize`的对象了. 如何寻找`nSize`的对象呢.
我目前知道的是有两个思路.
    [+] 寻找某对象可以分配任意的size
    [+] 寻找某对象刚好满足size的n/1
        ==> 如果你想分配的size是0x80. A(20)可以分配0x20大小的对象. B(80)可以分配0x80的对象. 那么
            for(int i = 0; i < 0x1000; i++)
                B(80)
            for(int i = 0; i < 0x1000; i++)
                for(int j = 0; j < 0x4; j++) //4 * 0x20 = 0x80
                    A(20)
第二种方式的局限性比较大, 可能在某种情况下你找不到刚好能够分配0x20大小的对象, 比如我就没有找到 :), 于是我们开始选取任意大小的对象.
### CreateBitmap的闪亮登场
CreateBitmap会分配一个`pool`, 其大小和上面的参数`cx`, `cy`相关. 他们与`pool size`的关系是, 我不知道 :(
嗯, 在阅读了大量的文章之后. 我对于这个关系越来越迷惑. 于是我开始决定自己总结关系. 一开始的时候我写了这个语句.
    HBITMAP hBitmap = CreateBitmap(0x10, 2, 1, 8);
现在, 我需要知道其大小. [这篇文章](https://redogwu.github.io/2018/11/03/windows-kernel-exploit-part-4/)里面有给出使用`!poolfind`指令的方法, 但是我尝试多次失败了(后面我会介绍我为什么会失败). 但是anyway.
笨人也有笨人的方法. 我总觉得我一定可以找到解决方案 :). 因为我知道在`windows 8.1`上如何泄露我刚刚分配的`bitmap`的地址.
### 泄露bitmap地址
在windows 8.1上泄露bitmap的地址我们可以使用`GdiSharedHandleTable`.
我们后面再来阐述`GdiSharedHadnleTable`是啥. 在这一部分让我们先用代码和调试器来找到它.
#### 寻找GdiSharedHandleTable。
##### 调试器寻找:
我们可以看到我们的`GdiShreadHandleTable`和`PEB`相关, 且在`PEB`偏移为`0x0f8`的地方. 下面让我们用代码来找到它.
##### 代码寻找:
我们都知道寻找`PEB`就需要先找TEB. 让我们先来看看一张图.
我们可以看到`PEB`在`TEB`偏移`0x60`处. 接着, 我们从`TEB`一步一步找着就好.
幸运的是微软提供了`NtCurrentTeb()`函数能够帮助我们方便的寻找到`TEB`.
    DWORD64 tebAddr = NtCurrentTeb();
然后我们再使用第一张图找到`PEB`的地址.
    DWORD64 pebAddr = *(PDWORD64)((PUCHAR)tebAddr + 0x60);   // 0x60是PEB的偏移
接着使用我们的最开始的图来找到我们的`GdiSharedHandleTable`的地址.
    DWORD64 gdiSharedHandleTableAddr = *(PDWORD64)((PUCHAR)pebAddr + 0xf8); 
##### 验证截图
Too easy :)
#### 依据handle寻找其地址
找到了`GdiSharedHandleTable`的地址之后, 是时候让它发挥点作用了. 自己对`GdiShreadHandleTable`的理解如下:
    [+] GDIShreadHandletable是一个数组, 其中的Entry为一个叫做GDICELL64的结构体.
    [+] GDICELL64存放一些与GDI句柄相关的信息
现在, 让我们来看一下`GDICELL64`的分析.
可以看到它在其中泄露了有关`GDI handle`的内核地址. 那么,