### A. Case 1: Click Fraud via WebView Instances

We investigated each identified Full Stack Trace (FST) and its corresponding Frame (F). Each F was invoked from the WebView instances that Library A instantiates and uses for rendering ad impressions. Every observed click URL request originated from the same web page: `https://cpi-offers.com/fantastic.html`. Listing 1 above shows part of the web page content, which contained approximately 40 `<a>` tags, each embedding a different click URL. When a WebView instance rendered the page, these embedded URLs generated click requests. These click URL requests targeted six ad network services: Appxigo Media, Ad4Game, g2afse, AppsFlyer, and Xapads.

In this case, the adversary exploits Library A to generate click URL requests without any user interaction. The attacker designs an ad campaign that embeds payloads and leverages the ad network of Library A to victimize both the app publishers using Library A and their users by generating a large volume of click traffic. The novelty of this attack is that the attacker directly exploits WebView instances, where ad impressions are usually rendered without user interaction.

**Table VII: Apps that commit impression fraud invoked via Intents**

| Package Name | # of Intents |
|--------------|--------------|
| com.android.chrome | 34 |
| com.naver.whale | 8 |
| mobi.mgeek.TunnyBrowser | 8 |
| net.daum.android.daum | 8 |
| com.nhn.android.search | 28 |
| com.cloudmosa.puffinFree | 8 |
| com.google.android.youtube | 12 |
| com.sec.android.app.sbrowser | 8 |
| org.mozilla.firefox | 8 |
| Play Store default browser | 11 |
| **Total** | **221** |

In summary, the adversary exploited vulnerable WebView instances in Library A to commit click fraud. FraudDetective reported that the in-app Library A WebView instances were the origin of the click URL requests, facilitated by exploiting web pages.

### B. Case 2: Impression Fraud via Invoking Third-Party Apps

FraudDetective identified two apps connected to Type-3 fraud activities. It reported that eight fraudulent apps generated 133 explicit Intents and 88 implicit Intents, respectively. Table VII lists the target apps invoked via Intents initiated by ad fraud campaigns. For example, `com.gmail.heagoo.appdm.adv` and `video.editor.no.watermark` invoked a default browser with the URL `http://www.fofy.com/red.php?utm_source=1` without any user interaction. FraudDetective reported that the identified FST is perpetrated by Library E.

On the other hand, `com.camera.catmera` fires explicit Intents that invoke prevalent apps, including Chrome, Puffin, Naver, Firefox, YouTube, and Play Store, thus bringing up one of the target apps without any user interactions. FraudDetective also reported one ad library responsible for the 133 ad fraud activities observed.

We believe that the motivation of this ad library is to increase incoming traffic toward designated web pages using the aforementioned mobile apps. When analyzing the URLs specified in these observed Intents, it appears that this ad library conducts keyword searches for specific restaurants by invoking the Naver browser. The keywords used include restaurant names and locations, which may increase the search rankings of the restaurant names on the portal website operated by Naver. This ad library also redirects users to the sign-up page of a Bitcoin trading site, a blog selling cosmetic products, and a YouTube video site promoting video games and golf lessons. We believe that these websites belong to advertisers who launched ad campaigns with the ad service provider using this ad library.

The ad fraud outlined above entails various side-effects. Although this ad library commits ad fraud and invokes other apps without user interactions, users blame the invoked apps, including Naver and YouTube, for promoting certain websites and videos. YouTube and Naver app pages in the Google Play Store have received negative comments from users complaining about unwanted pop-ups and advertisements.

### C. Case 3: Ad Library Avoiding Fraud Detection

We discovered code for avoiding fraud detection in Library B. We analyzed the source code using JADX to decompile apps that commit ad fraud. Library B commits ad fraud when all of the following three conditions are satisfied:
1. The device is not in the battery charging status.
2. The device does not have any of the specific apps listed in Table VIII.
3. The device is in Wi-Fi connection status.

The first condition is related to detection in a device under testing that is connected to any USB port. Note that a USB connection is needed to control devices using ADB for automated testing. However, FraudDetective can find this app because it changes the battery status during dynamic testing.

The second condition is to avoid devices with traffic monitoring apps. According to our manual analysis of the decompiled library, it does not show abusive behaviors when the apps in Table VIII exist on the device. These five apps capture network traffic originating from the device. Thus, we concluded that these ad libraries hide themselves when such monitoring apps are present.

**Table VIII: Apps that an abusive ad library detects to conceal their abusive behaviors**

| Application name | Purpose |
|------------------|---------|
| Packet Capture | HTTP traffic capture |
| IP Tools | Network status monitor |
| Network Scanner | Network status monitor |
| Network Utilities | Network traffic monitor |
| tPacketCapture | HTTP traffic capture |

The third condition is related to preventing users from noticing the massive volume of cellular data usage caused by abusive apps. Because these apps generate ad click traffic even in the background, their data usage is high, which could motivate users to remove them. Therefore, these apps limit themselves to conducting click fraud when the devices use Wi-Fi, which is relatively less restrictive in generating ad traffic.

### D. Case 4: Click Fraud Traffic with Common Publisher Identifiers

FraudDetective further analyzed the 34,232 Type-2 ad fraud activities (§VI-B) that send click URL requests to various ad services. Among the observed 34,232 click URL requests, we noted that eight different apps share the same app identifier in their click URL requests to the “LinkMine” ad network.

**Table IX: Apps that commit click fraud attributed to the same publisher due to one embedded library**

| Package Name | # of Requests |
|--------------|---------------|
| com.sisunapp.wisesaying | 1,192 |
| com.wtwoo.girlsinger.worldcup | 883 |
| com.somansa.factory_kyh | 393 |
| com.appsnine.compass | 386 |
| com.camera.catmera | 379 |
| com.pump.noraebang | 226 |
| kr.yncompany.myrecipes | 42 |
| com.serendipper16.chattinganalysis | 32 |
| **Total** | **3,533** |

According to its ad SDK description [55], this app identifier refers to a publisher identifier that attributes user clicks to an app publisher. That is, this identified ad library leverages other apps to send click URL requests and allows all these requests to be attributed to a specific app publisher.

Considering that this app publisher gets paid more due to all the aggregated clicks from other apps, we believe that this app publisher is responsible for committing click fraud and has a strong connection with the third-party ad library committing Type-2 ad fraud activities.

### VIII. Limitations

FraudDetective is designed to report in-app modules for identified ad fraud, which helps app publishers patch their apps. Furthermore, this capability also helps auditors provide actionable notices to benign publishers using fraudulent ad libraries. FraudDetective enables this attribution of observed ad fraud via computing FSTs. However, FraudDetective has a limitation in its implementation regarding connecting fragmented STs. Note that we have modified SynchronousQueue and PriorityBlockingQueue to propagate information from one thread to another that share the same thread pool (§V-C). When a developer uses an unmodified concurrent queue among the five remaining concurrent queues for their app, FraudDetective will produce an incomplete FST, thus producing false positives. However, among a total of 28,160 ad fraud activities from the 74 apps, we observed no false positive. We believe that this implementational limitation is fixable with more engineering time and effort.

Another limitation of FraudDetective stems from its dependence on the click URL patterns with which it is supplied. We generalized click URL patterns from the manual investigations of seven major ad libraries and five major ad networks (§V-A). However, there still exist different patterns of click URLs that we did not capture, thus producing false negatives. One mitigation is to leverage a trained machine-learning classifier, similar to the MAdFraud method for classifying click requests. However, this approach also requires a training dataset that represents diverse click URL patterns to increase accuracy. Therefore, we leveraged a coarse regular expression that captures HTTP requests with many parameters having at least one "click" word. Then, via a source code audit, we double-checked whether the reported FSTs were indeed ad fraud activities. We confirmed that all the reported 74 apps committed ad fraud via sending click URL requests without involving user consent.

Another limitation of FraudDetective is that it requires manual ad library identification. In the case of an ad SDK with open-source code, ad library identification can be performed automatically by comparing the source code with the decompiled APK source code. According to previous studies, it is possible to distinguish known third-party libraries with high accuracy [19], [22], [38]. This approach requires having the published code of ad SDKs against which a given code can be compared. In our evaluation, we observed five ad libraries of which the code and libraries were unavailable on the Internet. Therefore, for those five ad SDKs, we leveraged the names of classes responsible for ad fraud activities to deduce ad service names. When these class names are obfuscated, we find matching classes from other apps without obfuscation, thereby deducing ad service names from the matching classes without obfuscation.

### IX. Related Works

#### A. Mobile Ad Click Fraud

Previous studies of identifying click fraud in mobile advertising focus on developing dynamic testing frameworks. MAdFraud [25] ran Android apps with an Android emulator for 60 seconds each in the background and foreground while emulating no user interaction. It then found ad click traffic that occurred under the testing environment involving no user interaction. MAdLife [21] found that 37 Android apps always navigated to an ad's landing page without user interaction. This behavior of forcing users to go to an ad landing page by launching an Android app was found through the Genymotion Android emulator [37]. These testing tools played an important role in revealing the occurrence of mobile click fraud. However, they did not compute the causal relationship between the occurrence and the cause of ad click fraud.

Cho et al. investigated how effectively mobile ad networks responded to click fraud [24]. They developed ClickDroid, a mobile ad click bot, which clicks mobile ads periodically. ClickDroid attempted to avoid the detection of mobile click ad fraud in ad networks by modifying a device identifier each time it clicked on a mobile ad. A total of 100 clicks were performed through each of eight major mobile ad networks, and only two mobile ad networks detected traffic abnormalities, demonstrating ad networks' incapability of identifying click fraud.

#### B. Web Ad Click Fraud

Ad network services have strived to detect ad click fraud by analyzing click fraud traffic patterns using ad fraud filters [27], [28], [41], [81]. Many filters have been studied, such as identifying a high click ratio on a specific website [28] or checking duplicate clicks on the same ad [81].

Ad fraudsters often make fraud profit using botnets that infect victims' hosts [64], [80]. ZeroAccess infected approximately 1.9 million host machines [59], generating approximately $2.7 million in monthly revenue, primarily through ad click fraud. The Federal Bureau of Investigation (FBI), European Cybercrime Centre (EC3), and ad network vendors, such as Microsoft, worked together to eradicate the ZeroAccess botnet and took legal actions [59].

Clickjacking has been reported as an effective way of conducting click fraud [33], [48], [82]. Furthermore, Zhang et al. demonstrated that abusive third-party JavaScript scripts have modified click URLs in their hosting websites (e.g., `example.com`), leading to unauthorized clicks [82].

#### C. Analyzing Ad Libraries

Previous studies have investigated mobile ad libraries in their excessive permissions usages, aggressive collections of private information, and inherent vulnerabilities leading to private information leakage [29], [44], [74], [78]. To this end, researchers have proposed systems that restrict permission usages by ad libraries or separate ad library modules from their hosting app via isolating them in different processes [65], [69], [70]. Moreover, prior approaches proposed detection methods of identifying specific third-party libraries, which abuse their hosting apps and permissions [19], [22], [83].

### X. Conclusion

In this paper, we design, implement, and evaluate FraudDetective, a dynamic testing framework for uncovering ad fraud. We compute the causal relationship between a user interaction event and an ad fraud activity and model it into a full stack trace. To compute these full stack traces in dynamic testing, we revise Android system classes and let a target app under dynamic testing execute the revised system code, thus leaving execution logs. FraudDetective leverages these execution logs to determine whether observed full stack traces actually commit ad fraud without genuine user interactions.

FraudDetective found 34,453 observed ad fraud activities perpetrated by 74 apps, clearly demonstrating its efficacy in discovering ad abuse. It also reports that 98.6% of apps commit ad fraud by means of their ad libraries. This new insight suggests that app publishers and their users have become victims of ad fraud and invites further research on practical defenses to prevent these ad libraries from committing ad fraud.

### Acknowledgments

We thank the anonymous reviewers for their concrete feedback. We sincerely appreciate Seongil Wi for his support in polishing the paper. This work was supported by the Naver Corporation and Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT), No.2020-0-00209.

### References

[1] M. K. Alzaylaee, S. Y. Yerima, and S. Sezer, “Emulator vs real phone: Android malware detection using machine learning,” in Proceedings of...