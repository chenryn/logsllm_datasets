A.
We investigated each identiﬁed F ST and its F ; each F was
invoked from the WebView instances that Library A instantiates
and uses for rendering ad impressions. Every observed click
URL request stemmed from the same web page: https:
//cpi-offers.com/fantastic.html. Listing 1 above
shows part of the web page content. It contained approximately
40  tags, each of which embedded a different click
URL, thus generating click requests when a WebView instance
rendered the page. These click URL requests targeted six ad
network services, namely, Appxigo Media, Ad4Game, g2afse,
AppsFlyer, and Xapads.
In this case, the adversary abuses Library A to generate
click URL requests without involving any user interactions. She
designs an ad campaign that embeds payloads and leverages
the ad network of Library A to victimize the app publishers
of Library A as well as their users to generate a large volume
of click trafﬁc. The novelty of this observed attack is that
the attacker directly exploits WebView instances in which ad
impressions are usually rendered without any user interaction.
Package Name
# of Intents
com.android.chrome
com.naver.whale
mobi.mgeek.TunnyBrowser
net.daum.android.daum
com.nhn.android.search
com.cloudmosa.puffinFree
com.google.android.youtube
com.sec.android.app.sbrowser
org.mozilla.firefox
Play Store
default browser
34
8
8
8
28
8
12
8
8
11
88
Total
221
TABLE VII: Apps that commit impression fraud invoked via
Intents.
In summary, the adversary exploited vulnerable Library A
WebView instances to commit click fraud, and FraudDetective
reported this in-app Library A WebView instance from which
click URL requests are originated with exploiting web pages.
B. Case 2: Impression fraud via invoking third-party apps
FraudDetective identiﬁed two apps connected to Type-3
fraud activities. It reported that eight fraudulent apps generated
133 explicit Intents and 88 implicit Intents, respectively.
Table VII collates the target apps invoked via Intents initiated
by ad fraud campaigns. com.gmail.heagoo.appdm.adv
and video.editor.no.watermark invoked a default
the URL of http://www.fofy.com/
browser
red.php?utm_source=1 without
interaction.
FraudDetective reported that
the identiﬁed AF ST is
perpetrated by Library E.
user
via
On the other hand, com.camera.catmera ﬁres explicit
Intents that invoke prevalent apps, including Chrome, Puf-
ﬁn [43], Naver [61], Firefox, YouTube, and Play Store, thus
bringing up one of the target apps without any user interactions.
FraudDetective also reported one ad library responsible for the
133 ad fraud activities observed.
We believe that the motivation of this ad library is to
increase incoming trafﬁc toward designated web pages with
the aforementioned mobile apps. When analyzing the URLs
speciﬁed in these observed Intents, it appears that this ad library
conducts a keyword search for speciﬁc restaurants by invoking
the Naver browser. The keywords used include restaurant names
and locations, which may increase the search rankings of the
restaurant names in the portal website operated by Naver. This
ad library also redirects users to the sign-up page of a Bitcoin
trading site, a blog selling cosmetic products, and a YouTube
video site promoting video games and golf lessons. We believe
that these websites belong to advertisers who launched ad
campaigns with the ad service provider using this ad library.
The ad fraud outlined above entails various side-effects.
Although this ad library commits ad fraud and invokes other
apps without user interactions, users blame the invoked apps,
including Naver and YouTube, for promoting certain websites
and videos. YouTube and Naver app pages in Google Play
Store have negative comments from users complaining about
12
Application name
Purpose
Packet Capture
HTTP trafﬁc capture
IP Tools
Network status monitor
Network Scanner
Network status monitor
Network Utilities
Network trafﬁc monitor
tPacketCapture
HTTP trafﬁc capture
TABLE VIII: Apps that an abusive ad library detects to conceal
their abusive behaviors.
Package Name
# of Requests
com.sisunapp.wisesaying
com.wtwoo.girlsinger.worldcup
com.somansa.factory_kyh
com.appsnine.compass
com.camera.catmera
com.pump.noraebang
kr.yncompany.myrecipes
com.serendipper16.chattinganalysis
1,192
883
393
386
379
226
42
32
Total
3,533
TABLE IX: Apps that commit click fraud attributed to the
same publisher due to one embedded library.
there is a risk of being monitored by other security monitoring
apps.
The last condition is related to preventing users from
noticing the massive volume of cellular data usage caused by
abusive apps. Because these apps generate ad click trafﬁc even
in the background, their data usage is obviously high, which
could motivate users to remove them. Therefore, these apps
limit themselves to conducting click fraud when the devices
use Wi-Fi, which is relatively less restrictive in generating ad
trafﬁc.
D. Case 4: Click fraud trafﬁc with common publisher identiﬁers
FraudDetective further analyzed the 34,232 Type-2 ad fraud
activities (§VI-B) that send click URL requests to various ad
services. Among the observed 34,232 click URL requests, we
noted that eight different apps share the same app identiﬁer in
their click URL requests to the “LinkMine” ad network.
Table IX shows the eight identiﬁed apps and the number
of observed ad requests committing click fraud with the same
app identiﬁer. All the requests in Table IX were issued from
the same third-party ad library.
According to its ad SDK description [55], this app identiﬁer
refers to a publisher identiﬁer that attributes user clicks to an
app publisher. That is, this identiﬁed ad library leverages other
apps to send click URL requests and allows all these requests
to be attributed to a speciﬁc app publisher.
Considering that this app publisher gets paid more due to
all the aggregated clicks from other apps, we believe that this
app publisher is responsible for committing click fraud and has
a strong connection with the third-party ad library committing
Type-2 ad fraud activities.
VIII. LIMITATIONS
FraudDetective is designed to report in-app modules for
Fig. 8: Negative reviews of the com.camera.catmera app
in Google Play Store: There were more than 30 complaints
about advertising pop-ups occurring in a browser without user
interaction.
the forcible switch into these apps without any user interactions.
It is natural that when users are compelled to see unwanted
promotional videos or messages from the Naver and YouTube
apps, it adversely affects those brands. Figure 8 also shows
comments from victims to the effect that these abrupt pop-ups
of Naver and YouTube apps disappeared when they removed
com.camera.catmera.
We reported the identiﬁed Library B, to Google and Naver.
Law enforcement is currently conducting an investigation of
this ad network vendor.
C. Case 3: Ad library avoiding fraud detection
We discovered code for avoiding fraud detection in Library
B. We analyzed the source code by using JADX [71] to
decompile apps that commit ad fraud. Library B commits ad
fraud when all of the following three conditions are satisﬁed:
(1) a device is not in the battery charging status; (2) a device
does not have any of the speciﬁc apps listed in Table VIII; and
(3) a device is in Wi-Fi connection status.
The ﬁrst condition is related to detection in a device
under testing that is connected to any USB port. Note that
a USB connection is needed to control devices using ADB
for automated testing. However, FraudDetective is able to ﬁnd
this app because it changes the battery status while conducting
dynamic testing.
The second condition is to avoid devices with trafﬁc
monitoring apps. According to our manual analysis of the
decompiled library, it does not show abusive behaviors when
the apps in Table VIII exist in the device. Note that the ﬁve
apps capture network trafﬁc originating from the device. Thus,
we concluded that these ad libraries hide themselves when
13
This app forces ads to appear on Naver or other browsers. No ads appear as soon as I delete this app.Ads are automatically displayed in a web browser every day. This application was the cause. After deleting the application, the problem was fixed.CatmeraAliceBobidentiﬁed ad fraud, which helps app publishers patch their
apps. Furthermore, this capability also helps auditors provide
actionable notices to benign publishers using fraudulent ad
libraries. FraudDetective enables this attribution of observed ad
fraud via computing F ST s. However, FraudDetective has a lim-
itation in its implementation regarding connecting fragmented
ST s. Note that we have modiﬁed SynchronousQueue
and PriorityBlockingQueue to propagate information
from one thread to another that share the same thread pool
(§V-C). When a developer uses an unmodiﬁed concurrent
queue among the ﬁve remaining concurrent queues for their
app, FraudDetective will produce an incomplete F ST , thus
producing false positives. However, among a total of 28,160 ad
fraud activities from the 74 apps, we observed no false positive.
We believe that this implementational limitation is ﬁxable with
more engineering time and effort.
Another limitation of FraudDetective stems from its depen-
dence on the click URL patterns with which it is supplied. We
generalized click URL patterns from the manual investigations
of seven major ad libraries and ﬁve major ad networks (§V-A).
However, there still exist different patterns of click URLs
that we did not capture, thus producing false negatives. One
mitigation is to leverage a trained machine-learning classiﬁer,
similar to the MAdFraud method for classifying click requests.
However, this approach also requires a training dataset that
represents diverse click URL patterns to increase accuracy.
Therefore, we leveraged a coarse regular expression that
captures HTTP requests with many parameters having at least
one “click” word. Then, via a source code audit, we double-
checked whether the reported F Cs were indeed ad fraud
activities. We conﬁrmed that all the reported 74 apps committed
ad fraud via sending click URL requests without involving user
consent.
Another limitation of FraudDetective is that it requires
manual ad library identiﬁcation. In the case of an ad SDK with
open-source code, ad library identiﬁcation can be performed
automatically by comparing the source code with the decom-
piled APK source code. According to previous studies, it is
possible to distinguish known third-party libraries with high
accuracy [19], [22], [38]. This approach requires having the
published code of ad SDKs against which a given code can be
compared. In our evaluation, we observed ﬁve ad libraries of
which the code and libraries were unavailable on the Internet.
Therefore, for those ﬁve ad SDKs, we leveraged the names
of classes responsible for ad fraud activities to deduce ad
service names. When these class names are obfuscated, we ﬁnd
matching classes from other apps without obfuscation, thereby
deducing ad service names from the matching classes without
obfuscation.
IX. RELATED WORKS
A. Mobile ad click fraud
Previous studies of identifying click fraud in mobile
advertising focus on developing dynamic testing frameworks.
MAdFraud [25] ran Android apps with an Android emulator
for 60 seconds each in the background and foreground while
emulating no user interaction. It then found ad click trafﬁc
which occurred under the testing environment involving no user
interaction. MAdLife [21] found that 37 Android apps always
navigated to an ad’s landing page without user interaction.
This behavior of forcing users to go to an ad landing page by
launching an Android app was found through the Genymotion
Android emulator [37]. These testing tools played an important
role in revealing the occurrence of mobile click fraud. However,
they did not compute the causal relationship between the
occurrence and the cause of ad click fraud.
Cho et al. investigated how effectively mobile ad networks
responded to click fraud [24]. They developed ClickDroid,
a mobile ad click bot, which clicks mobile ads periodically.
ClickDroid attempted to avoid the detection of mobile click
ad fraud in ad networks by modifying a device identiﬁer each
time it clicked on a mobile ad. A total of 100 clicks were
performed through each of eight major mobile ad networks,
and only two mobile ad networks detected trafﬁc abnormalities,
demonstrating ad networks’ incapability of identifying click
fraud.
B. Web ad click fraud
Ad network services have strived to detect ad click fraud by
analyzing click fraud trafﬁc patterns using ad fraud ﬁlters [27],
[28], [41], [81]. Many ﬁlters have been studied, such as
identifying a high click ratio on a speciﬁc website [28] or
checking duplicate clicks on the same ad [81].
Ad fraudsters often make fraud proﬁt using botnets that
infect victims’ hosts [64], [80]. ZeroAccess infected approx-
imately 1.9 million host machines [59], generating approxi-
mately $2.7 million in monthly revenue, primarily through
ad click fraud. The Federal Bureau of Investigation (FBI),
European Cybercrime Centre (EC3), and ad network vendors,
such as Microsoft, worked together to eradicate the ZeroAccess
botnet and took legal actions [59].
Clickjacking has been reported an effective way of con-
ducting click fraud [33], [48], [82]. Furthermore, Zhang et al.
demonstrated that abusive third-party JS scripts have mod-
iﬁed click URLs in their hosting websites (e.g.,
‘’),
clicks [82].
C. Analyzing ad libraries
Previous studies have investigated mobile ad libraries in
their excessive permissions usages, aggressive collections of
private information, and inherent vulnerabilities leading to
private information leakage [29], [44], [74], [78]. To this end,
researchers have proposed systems that restrict permission
usages by ad libraries or separate ad library modules from its
hosting app via isolating them in different processes [65], [69],
[70]. Moreover, prior approaches proposed detection methods
of identifying speciﬁc third-party libraries, which abuse their
hosting apps and permissions [19], [22], [83].
X. CONCLUSION
In this paper, we design, implement, and evaluate FraudDe-
tective, a dynamic testing framework for uncovering ad fraud.
We compute the causal relationship between a user interaction
event and an ad fraud activity and model it into a full stack
trace. To compute these full stack traces in dynamic testing,
we revise Android system classes and let a target app under
14
dynamic testing execute the revised system code, thus leaving
execution logs. FraudDetective leverages these execution logs
to determine whether observed full stack traces actually commit
ad fraud without genuine user interactions.
FraudDetective found 34,453 observed ad fraud activities
perpetrated by 74 apps, clearly demonstrating its efﬁcacy in
discovering ad abuse. It also reports that 98.6% of apps commit
ad fraud by means of their ad libraries. This new insight
suggests that app publishers and their users have become victims
of ad fraud and invites further research on practical defenses
to prevent these ad libraries from committing ad fraud.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their concrete
feedback. We sincerely appreciate Seongil Wi for his support
in polishing the paper. This work was supported by the Naver
Corporation and Institute of Information & Communications
Technology Planning & Evaluation (IITP) grant funded by the
Korea government (MSIT), No.2020-0-00209.
REFERENCES
[1] M. K. Alzaylaee, S. Y. Yerima, and S. Sezer, “Emulator vs real phone:
Android malware detection using machine learning,” in Proceedings of