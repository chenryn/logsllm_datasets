chosen with respect to cold boot attacks.
In order to understand our security concerns, we brieﬂy
show the procedure of using windowing techniques in combi-
nation with CRT, or more precisely Garner’s algorithm [12],
which is listed in Algorithm 4. Let us assume that due to a
cold boot attack, an adversary can retrieve the precomputed
values resulting from a windowing technique and addition-
Algorithm 4: Garner’s algorithm
Input: Ciphertext message C; p and q are prime numbers
with p > q known by the private key owner; dp,dq,q−1
in steps 1 to 3 are precomputed private parameters
Output: Plaintext message M
1 Compute dp, such that dpe = 1 mod p − 1
2 Compute dq, such that dqe = 1 mod q − 1
3 Compute q−1 mod p, where p > q
4 Mp = Cdp ≡ M edp mod p = M mod p
5 Mq = Cdq ≡ M edq mod q = M mod q
6 h = q−1(Mp − Mq) mod p
7 M = Mq + hq
ally knows C from Algorithm 4. Providing that the window
length is 5, an adversary knows:
1. C
2. C x mod p, where x = (x4, x3, x2, x1, x0)2
The value of x corresponds to an arbitrary 5-bit windowing
value. Since an adversary knows C, he or she can compute
all 32 possible values of C x without modulo reduction. By
deﬁnition it holds:
C x mod p = C x − kp, k > 0
=⇒ C x − (C x mod p) =kp
For each of the C x values an adversary can now compute
gcd(C x − (C x mod p), n), where n is the public modulus.
For one of these values, gcd(C x − (C x mod p), n) reveals
the prime number and consequently discloses the private
exponent. One of the precomputed values is suﬃcient to
break the system. Hence, using windowing techniques in
combination with CRT is insecure in PRIME, where we treat
RAM as insecure.
3.2 Linux Kernel Patch
In the previous section, we have shown that it is possible to
implement private RSA operations solely on the microproces-
sor with a variant of Montgomery’s method. However, if we
implement this variant straightforward in userland, PRIME
is not secure against cold boot attacks. The reason is that
CPU registers are regularly swapped out to RAM due to
context switching. As a consequence, we have to implement
PRIME inside kernel mode and run it atomically.
3.2.1 Context Switching and Atomicity
It is necessary to run PRIME in kernel mode because
problems arise when context switching or swapping occur.
Interrupts, including timing interrupts from scheduling, cause
the system to save the CPU context of the running process to
RAM and to load the context of a new process into the CPU.
This context (in Linux presented as a process control block
(PCB)) includes all registers and consequently, it includes
sensitive values of PRIME. Therefore, PRIME must be run
atomically in kernel mode. Atomic sections are not allowed
in user mode to prevent starvation through unprivileged
processes.
To deﬁne atomic sections in kernel mode, Linux pro-
vides preempt_enable() and preempt_disable(), for en-
abling and disabling preemption, respectively. Addition-
ally, hardware interrupts must be disabled right after an
atomic section is entered, and be re-enabled only before
154
an atomic section is left. This can be achieved by calling
local_irq_save() and local_irq_restore(). These func-
tions, however, only guarantee atomicity per CPU which
does not suﬃce for PRIME. As we use static RAM locations
to cache intermediate values of RSA, concurrently running
instances of PRIME would mutually falsify their results. Of
course, this behavior must be enhanced in future releases
of PRIME with engineering eﬀorts, but so far we solved
the problem by introducing global atomic sections. Global
atomic sections do not imply that other CPUs stop working,
but that only one CPU can execute PRIME at a time. To
disallow several PRIME instances in parallel, we use the
mechanism of spin locks. We span the atomicity of PRIME
over all CPUs by “spinning” until a lock is free.
3.2.2 Key Management
We are only able to store 256-bit values securely inside
debug registers over the entire uptime of a system, similar to
symmetric CPU-bound encryption. The reason is that debug
registers of modern 64-bit CPUs are the only meaningful
storage for cryptographic keys. We cannot utilize AVX or
general purpose registers as permanent key storage, because
those are accessible and required by userland programs. Con-
trary to that, the user mode in Linux has to ask the kernel
via the ptrace system call to read or set debug registers. We
thus can patch arch/x86/kernel/ptrace to prohibit access
to them.
Since there are four breakpoint registers, 64-bit each, we
can store 256 bits inside the CPU. As we want to support
RSA-2048, we manage an RSA key in RAM that is encrypted
with AES-256. With AES-NI, Intel introduced an eﬃcient
instruction set to implement AES-256 inside the CPU. The
beneﬁt of AES-NI for us is the possibility to decrypt RSA
keys completely within CPU registers (in detail, those are
the SSE registers). An RSA private key never has to enter
RAM, neither as a whole nor partially, in its unencrypted
form. (For more information on how the secret AES key is
copied securely into debug registers and an in-depth security
analysis of this concept, we refer to the original literature of
symmetric CPU-bound encryption [26].)
Interestingly, the performance drawback of PRIME is not
owed to the extra operations arising from decrypting the RSA
key. Implementing AES with AES-NI is so fast compared to
RSA that the operation becomes negligible. According to
our tests, the performance drawback from the key decryption
step is below 1% of the overall performance. Hence, from
a performance point of view, using AES-128 would have no
advantage so we chose AES-256.
3.3 Architecture and Interface
Figure 2 lists the basic operating principle of PRIME.
After a set-up phase which is not cold boot resistant, we
have an RSA private key symmetrically encrypted on a USB
ﬂash drive. In the initialization phase during boot, we load
this RSA key together with a secret AES key into the kernel.
Sysfs is used as an API between user and kernel mode. In
the exponentiation phase, user data is signed or decrypted.
After loading our kernel module speciﬁc sysfs attributes are
available in /sys/kernel/prime/. We use these attributes
to get RSA parameters into the kernel space and to dis-
play results to the user mode. The corresponding store
and show methods of each attribute organize the data, e.g.,
writing to the attribute rsa_message invokes our exponen-
tiation algorithm. The initializing attributes rsa_priv_key
and rsa_aesk can only be set by a root user. Only the
rsa_message attribute can be read and written by unprivi-
leged users. Before a message is sent to kernel space, it needs
to be transformed to n-residue form. This can be done in
user space and is non-critical. We have exemplarily patched
the PolarSSL library to do so (see Section 4).
PRIME is safe with respect to concurrent userland threads
trying to access the rsa_message attribute in parallel. The
result of each private RSA operation is put into a data
structure that is bound to the PID of a calling process. This
approach ensures that a process can only get its own results,
and that it cannot falsify or steal other results. The PID
of the calling process is queried in this data structure and
corresponding results are only made available for the reading
process. Upon read, all issued data is removed and cleared
from the system space by zeroing and freeing its memory.
• Set-up phase (only once):
1. Generate RSA parameters p, q, d, e.
2. Encrypt the binary data of d with AES-256.
3. Keep the encrypted key on an external drive.
• Initialization phase (on each boot):
4. Write the encrypted RSA key to attribute
/sys/kernel/prime/rsa_priv_key.
5. Write the symmetric AES key to attribute
/sys/kernel/prime/rsa_aesk.
• Exponentiation phase (for each encryption):
6. Write message in n-residue form to attribute
/sys/kernel/prime/rsa_message.
7. Read decrypted/signed message from attribute
/sys/kernel/prime/rsa_message.
Figure 2: Basic operating principle of PRIME.
4. EVALUATION
To test and evaluate our implementation, and to prove the
applicability of PRIME, we patched the open source library
PolarSSL. PolarSSL is comparable to OpenSSL but more
lightweight. Based on our PolarSSL patch, we evaluated the
usability and security of PRIME in realistic scenarios. To
this end, we performed benchmark and security tests while
running a Hiawatha web server inside a PRIME-based virtual
machine. Hiawatha is a web server based on PolarSSL.
4.1 Usability
In what follows in this section is an analysis of the usability
of PRIME regarding its compatibility (Section 4.1.1) and its
performance (Section 4.1.2 and Section 4.1.3).
4.1.1 Compatibility
PRIME makes extensive use of AVX in the computing
process of a RSA private operation, and it requires AES-NI
to decrypt private keys within CPU registers. These require-
ments are fulﬁlled by modern CPUs such as Intel Core i5 and
i7 processors based on the Sandy Bridge microarchitecture.
From AMD’s side of view, these requirements are fulﬁlled
by processors based on the Bulldozer microarchitecture. On
older CPUs, PRIME cannot be executed.
On the software-side, we currently support Linux kernels
since version 3.0, but our code might be ported to other OSs
in future. In the userland, cryptographic libraries must be
patched to work together with PRIME. We have shown that
for the PolarSSL library as an example.
4.1.2 Private RSA Performance
We now examine the performance of RSA private oper-
ations in isolation. We examine the performance of our
CPU-bound exponentiation algorithm in comparison to con-
ventional exponentiation algorithms, in particular to those
of OpenSSL and PolarSSL. The standard exponentiation
algorithm in PolarSSL uses the Montgomery method with
CRT and additional windowing techniques (see Section 3.1.2).
Since the CRT method might be prone to some attacks, espe-
cially side channel attacks [3], PolarSSL is conﬁgurable to run
without CRT, involving Montgomery’s method along with
windowing techniques only. Contrary to that, OpenSSL uses
Montgomery’s method with CRT and windowing techniques
but cannot be conﬁgured to run without them.
Table 1 shows the average performance of RSA private
operations for PRIME, PolarSSL, and OpenSSL. Our imple-
mentation is slower by factor 9 in comparison to the best
PolarSSL algorithm, and slower by factor 12 in comparison
to the OpenSSL implementation. Recall that our implemen-
tation does neither use CRT nor windowing techniques for
security reasons, and that it must therefore compute a higher
number of multiplications. If we take this into account and
compare PRIME to the PolarSSL variant without CRT, the
performance drawback is about factor 3.
Despite these drawbacks, we think that our implementation
is suitable for high security servers with little or medium
load, as we show in the next section.
SSL/TLS Performance
4.1.3
We now examine the performance of PRIME in practical
scenarios, particularly we measure TLS handshakes within
the Hiawatha web server. Our tests were performed on
localhost to avoid network noise. Additionally, we disabled
optimizing features like caching and keep-alive to get more
reliable results. Table 2 shows benchmark values averaged
over 1,000 TLS handshakes. Comparing these values with
Table 1, we can see that roughly 41 ms of additional overhead
are spent for TLS handshakes. As a comparison, normal
HTTP connections take about 1 ms. Hence, the performance
drawback of PRIME is alleviated when taking the TLS
protocol as a whole into account.
Note that the potential target audience of PRIME are
high security servers with medium or low load. Nevertheless,
we also stressed our PRIME server with maximum load to
examine its behavior in extreme situations. Using JMeter,
we simulated a scenario where 9,000 users access the server
within 60 seconds (i.e., 150 requests per second on aver-
age). For this test, we see a signiﬁcant diﬀerence between
Hiawatha/CRT and Hiawatha/PRIME. Figure 3 illustrates
the response latencies in relation to the elapsed time. As the
ﬁgure illustrates, the Hiawatha/CRT server needs 73 seconds
to respond to all 9,000 requests, i.e., the average response
time amounts to 47 ms. The Hiawatha/PRIME server needs
almost 3 times longer to process all requests, and the average
response time rises up to 225 ms.
The increased performance drawback under high load is
no surprise, since the private RSA algorithm of PRIME
155
Crypto Library / Algorithm Performance
1.8 ms
OpenSSL / CRT
PolarSSL / CRT
2.4 ms
8.0 ms
PolarSSL / No CRT
PolarSSL / PRIME
21.0 ms
Web Server / Algorithm Performance
43 ms
Hiawatha / CRT
Hiawatha / No CRT
50 ms
62 ms
Hiawatha / PRIME
Table 1: Average performance of a private RSA-
2048 operation on an Intel i5-2320 CPU.
Table 2: Average performance of a TLS hand-
shake with the PolarSSL-based Hiawatha web
server.
is accessed in a strictly serial manner. Recall that we do
not support multiple PRIME instances in parallel, but that
we enforce globally deﬁned atomic sections. Hence, each
process running into an RSA private operation pends until it
catches the free spin lock. Hiawatha threads do not sleep but
“spin” till the lock is available, which results in higher CPU
utilization (see Figure 4). Also note the irregular maxima
and minima values in Figure 3. Since spin locks do not
provide fairness, it might happen that a process constantly
fails to catch the lock.
4.2 Security
In this section, we show that PRIME provides the desired
security by protecting RSA private keys. For convenience,
our security tests are run inside a virtual machine. Running
a PRIME guest inside a VM, we can conveniently monitor
its RAM contents from outside. In detail, we used QEMU-
KVM which is a virtualization infrastructure that lets the
Linux kernel act as hypervisor. QEMU-KVM provides a
monitor for both looking into RAM contents and into CPU
registers (e.g., to check the state of debug and AVX registers).
A convenient way to acquire memory dumps is to run the
pmemsave command in the QEMU-KVM monitor. A memory
dump can then be analyzed and searched for private RSA
parameters.
4.2.1 Cold-Boot Resistance
To make diﬀerent RSA implementations compatible with
each other, standard representations were introduced. The
standard representation of RSA private keys is described in
RFC-5958, and the representation of SSL/TLS certiﬁcates
is described in RFC-5280. Commonly, such representations
are standardized in ASN1.1 DER or BER format [18]. What
is additionally dealt with are “PEM” ﬁles. A PEM ﬁle is a
Base64-encoded version of an RSA key or certiﬁcate in DER
format. It is primarily used to provide a safe and portable
inclusion in ASCII text. Such encodings leave identiﬁable
patterns of RSA parameters in RAM. This fact is, for in-
stance, used by the tool rsakeyﬁnd from Halderman et al.
The tool works perfectly on systems running an SSL/TLS
Apache server and successfully retrieves BER-encoded RSA
keys from RAM.
However, such tools are useless for our evaluation, because
PRIME does not use RSA parameters in BER or PEM format.
What we did instead was to search for known bytes of the
RSA key directly. Unlike real adversaries, we know our key
before, and so we can look for exact matches of the key inside
memory. We looked for the key and any fraction of it in
diﬀerent representations (e.g., in little and in big endian),
and at diﬀerent system states (e.g., in standby and during
swapping), but we never found a signiﬁcant match of it in
RAM. We also revised Linux’ process control blocks by hand,
to look into the context of SSE and AVX registers, but could
not ﬁnd suspicious bytes.
In 2009, it was shown by Heninger and Shacham [15] that
a 2048-bit key can be recovered with 43% of unknown bits,
given that e is small. But since we never found any part of
the RSA key in RAM, we do not face any threat by recovery
methods.
But what is about the AES key that we use to encrypt
the RSA key? In PRIME, the AES secret key is basically as