Windows platform. When a user runs the resulting exe-
cutable, the injected Trojan will start to run in the back-
ground, and the victim application will run as usual. The
Trojan persists after the victim application terminates. We
used InPEct to inject the BO2K server into a typical Win-
dows application: the calculator program, calc.exe.
We then examined the infected executable with Peat in
order to determine if any of Peat’s metrics could detect
the Trojan’s presence and give insight into the infection
method. The process of that examination is presented here,
along with the results.
When Peat ﬁrst loads a PE ﬁle, it displays several pieces
of information from the PE header, including a list of the
ﬁle’s sections and its entry point. Upon loading the in-
fected calculator program, Peat issues a warning that the
program’s entry point is in an unusual place. The program
control begins in the .rsrc section, as opposed to the ex-
pected .text section. In addition, we see that the .rsrc sec-
tion is unusually long, compared to that of typical applica-
tions. This information, shown in Figure 5, is the ﬁrst piece
of evidence that the original application has been tampered
with.
Next, Peat performs its automated analysis in order to
identify anomalous regions within each section of the ﬁle.
Figure 5. PE header information for the in-
fected calculator program
It identiﬁes two anomalous windows in the .rsrc section and
displays these as shown in Figure 6. The ﬁrst window is an
outlier with respect to the code probability metric. It has a
high likelihood of containing code, but the other windows
in this section do not. An analyst should recognize this as
quite suspicious, as the .rsrc section does not typically con-
tain code. However, this ﬁnding is consistent with Peat’s
entry point warning. The entry point happens to lie in this
anomalous window.
This window also stands apart from the remainder of
the section due to an abnormal level of entropy. The sec-
ond anomalous window was marked as having an unusual
change in entropy, with respect to the previous window.
This pair of warnings (an abnormal value, followed by a
drastic change in that value, for any given metric) typically
suggests that something has been inserted into the origi-
nal application. To investigate these entropy levels further,
the analyst uses the visualization tools to examine the .rsrc
section.
The view of the entropy metric for the .rsrc section is
2 We observe that there is a point
shown in Figure 7.
at which the entropy level drastically increases. This is a
strong indicator that an encrypted region of bytes is present.
At this point, the analyst has gathered sufﬁcient evi-
dence to recognize a particular pattern. A common tech-
nique that Trojan injection tools use, including InPEct, is
2Only the ﬁrst portion is actually shown. The user would scroll to the
right to see the remainder, which looks similar to the latter portion of the
data shown here.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Figure 6. Two anomalous regions of the .rsrc
section
to encrypt and append the Trojan to the end of the last sec-
tion of the victim application. The injection method also
inserts some additional code to tend to matters such as de-
crypting the Trojan, running it, and returning control to the
original application. Finally, it changes the program entry
point to this newly inserted startup routine.
After observing all of this evidence, the analyst may
conﬁdently conclude that the ﬁle under investigation ap-
pears to have been infected with a Trojan via the method
described above. If the analyst is interested in examining
the ﬁle further, the disassembly view of the inserted startup
routine is available as a useful staring point. Other features
would be useful to an analyst in this scenario, such as de-
termining the identity or capabilities of the inserted Trojan.
The current implementation of Peat does not yet address
these issues, but they are discussed in the following sec-
tion.
5. Weaknesses
Figure 7. The entropy metric for the .rsrc sec-
tion of the calculator program
(cid:15) If the host executable is completely overwritten and
replaced by the malicious code, PEAT will not detect
any inconsistencies during the analysis. However this
attack is not very appealing to an attacker because the
victim user will immediately become suspicious after
running the host executable and observing that it did
not run properly.
(cid:15) If the attacker has some knowledge of a particular host
application’s source and compilation history, he could
develop his malicious code in a similar fashion, so that
the metrics that PEAT computes would have similar
values across the malicious code and the host appli-
cation. For example, he could choose to develop a
Trojan in Visual C++ for the sole purpose of having
that Trojan masquerade as a function belonging to the
host application that was known to be developed in
that language. Fortunately, this would only be the ﬁrst
step along the path to avoiding detection in this man-
ner. Other factors such as compiler optimization lev-
els and even coding styles may results in the Trojan
exhibiting outstanding patterns. Further, the attacker
still faces the problem of modifying the host so that
control ﬂows to the Trojan, and PEAT has proven to
be effective at identifying various methods of doing
this.
Malicious software detection technologies tend to suf-
fer from a common problem: once an attacker knows the
criteria that drive the detection logic, he can adapt his at-
tack to circumvent detection. PEAT, to some extent, is also
subject to this. Although PEAT has a collection of several
independent criteria, a determined attacker could specialize
an attack to avoid PEAT’s detection methods. For example,
an analyst using PEAT would have difﬁculty detecting any
of the following attacks, all of which lie within PEAT’s in-
tended scope of infected executables:
(cid:15) It is possible to infect a host application with a very
small amount of code that simply loads a separate
DLL containing a malicious payload or perhaps starts
another process. PEAT is currently limited in its abil-
ity to handle this attack.
It can alert the analyst to
the presence of calls to common DLL functions like
LoadLibrary() and CreateProcess(). How-
ever it does not descend into all such libraries or sep-
arate executables in order to analyze them in the con-
text of the main ﬁle under analysis.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
In addition there are other attacks on executables that lie
outside of the scope of PEAT. For example, some viruses
attack executable images in memory, as opposed to the ﬁle
stored on disk.
Finally, PEAT may sometimes report anomalies that do
not necessarily indicate the presence of malicious code. For
example, it may report that at the end of the .text segment,
the byte value entropy suddenly and drastically changes.
Further inspection might reveal that this is due to the pres-
ence of section alignment padding and not some alteration
of the original ﬁle. This is not a false alarm in the tradi-
tional sense, as PEAT is not intended to be used as an auto-
matic detection tool. However, it does reveal that an analyst
requires some degree of domain knowledge about PE ﬁles,
viruses, and other system-level concepts, as well as some
experience working with PEAT and learning how to inter-
pret its output from various metrics in order to perform a
sound analysis.
6. Future work
The main accomplishment of this work was the identi-
ﬁcation of several structural aspects of Windows executa-
bles that can reliably indicate the presence of malicious
code. The next major feature that we plan to incorporate
into PEAT is a component that can analyze the capabilities
of a region of code. PEAT already provides the identiﬁ-
cation of imported DLLs and the location of calls to DLL
functions. We plan to take this a step further by using this
information to determine what speciﬁc actions the code is
capable of performing. In addition, we plan to incorporate
the ability to recursively descend into unknown imported
DLLs to determine their capabilities. For example, if the
PE ﬁle imports DLL unknown.dll, and its function foo()
is called, we would like to determine the capabilities of that
function as well.
Along the lines of analyzing code’s capabilities, we have
noted that many forms of malicious code, in particular
viruses, reuse sections of code from other malicious pro-
grams. These reused sections of code can free the mali-
cious code writer from having to rewrite complicated func-
tionality like infection routines or encryption routines. It
is desirable to be able to identify such common sequences
of instructions. In fact, an analyst should be able to draw
on an entire database of known, and possibly documented,
malicious code building blocks so that when these are en-
countered during analysis, the analyst can quickly deter-
mine that code’s functionality. With these ideas in mind,
we plan to implement a framework for maintaining a col-
lection of these common code patterns and incorporate this
into PEAT.
Finally, the Honeynet group is currently hosting the Re-
verse Challenge project in which an unknown malicious
Linux executable is to be analyzed in order to determine its
capabilities and origin [10]. Participants in this contest are
typically using tools such as IDA Pro Disassembler [6] and
Fenris [15] to examine the ELF format binary. The current
implementation of PEAT serves as a useful complement to
such tools. For example, the IDA disassembler is quite use-
ful for analyzing code, but its effectiveness could be greatly
augmented by coupling it with PEAT. In this arrangement,
the analyst may not need to analyze the assembly of an
entire program but only particular regions that PEAT iden-
tiﬁes as being suspicious, thereby greatly reducing the time
invested in the analysis. We are examining useful features
related to program understanding that these two tools pro-
vide. More importantly, we are noting missing features that
would be beneﬁcial to an analyst, so that future versions of
PEAT may ﬁll these gaps.
References
[1] IA-32 Intel Architecture Software Developer’s Manual, Vol-
ume 2. Intel, 2001.
[2] J. Bergeron, M. Debbabi, J. Desharnais, M. M. Erhioui, Y.
Lavoie and N. Tawbi. Static Detection of Malicious Code
in Executable Programs. Symposium on Requirements En-
gineering for Information Security (SREIS’01). March 5-6,
2001.
[3] F. Cohen. Computer viruses. Computers & Security, 6(1):22–
35, 1987.
[4] F. Cohen. Computational aspects of computer viruses. Com-
puters & Security, 8(4):325–344, 1989.
[5] Cult of the Dead Cow. Back Oriﬁce 2000 website. Available
at http://bo2k.sourceforge.net. May, 2002.
[6] DataRescue. IDA Pro Disassembler website. Available at
http://www.datarescue.com/idabase/. May, 2002.
[7] M.E. Davis and E.J. Weyuker. Computability, Complexity,
and Languages. Academic Press, 1983.
[8] Internet Security Systems.
Back Oriﬁce 2000 Backdoor Program.
http://documents.iss.net/whitepapers/bo2k.pdf. July, 1999.
ISS X-Force White Paper:
Available at
[9] M. Pietrek. Windows 95 System Programming Secrets. IDG
Books, 1995.
[10] Project Honeynet. The Reverse Challenge website. Avail-
able at http://project.honeynet.org/reverse/. July, 1999.
[11] A. Rubin and D. Geer. Mobile code security. IEEE Internet
Computing, 2(6), November/December 1998.
[12] SysD Labs.
InPEct executable binder.
Available at
http://sysdlabs.hypermart.net/proj/inpect.txt. 2000.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
[13] H. Thimbleby, S. Anderson, and P. Cairns. A framework for
modeling trojans and computer virus infection. Computer
Journal, 41(7):444–458, 1999.
[14] T. Watanabe. How to write a disassembler. 2000.
[15] M.
Zalewski.
Fenris website.
Available
at
http://razor.bindview.com/tools/fenris/. May, 2002.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE