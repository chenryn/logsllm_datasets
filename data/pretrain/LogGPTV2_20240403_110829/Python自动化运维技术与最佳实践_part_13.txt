第5章系统批量运维管理器pexpect详解75
路径.events是一个字典，定义了expect及sendline方法的对应关系，spawn方式的例子如下：
r pexpect import *
chi1d.expect (* (71)passvord*)
(.*:woo*atduexa@zesn oog d>s,) unede = pT *"
ch11d.sendl.ne (mypassvord)
使用run函数实现如下，是不是更加简洁、精炼了？
from pexpect import *
run (*scp foo PI:EMAIL: .*, events=[* (?i)password*: mypassword))
5.2.3pxssh类
pxssh是pexpect的派生类，针对在ssh会话操作上再做一层封装，提供与基类更加直接
的操作方法。
pxssh类定义：
class pexpect,pxssh.pxssh(timeout=30, maxread=2000, searchwindowsize=None,
logfile=None, cvd=None, env=None)
pxssh常用的三个方法如下：
login建立 ssh连接；
logoutO断开连接；
promptO等待系统提示符，用于等待命令执行结束。
下面使用pxssh类实现一个ssh连接远程主机并执行命令的示例。首先使用loginO方法
与远程主机建立连接，再通过sendline0方法发送执行的命令，promptO方法等待命令执行结
束且出现系统提示符，最后使用logout0方法断开连接。
[ /home/test/pexpect/ simple1.py 1
inport pxssh
ssedtab 4zodes
1A31
s = pxssh.pxssh ()
创建pxssh 对象s
(。:oueuqsou,)ndutxez = oueusou
(,:aueuzasn,)4ndutxez = sueuzasn
事最#要+(.1pxonesed-4nduTereetd,)esedob·eeedeb-pronesed
8.login (hostnane, username, password) 建立 ssh连接
8.sendline《*uptime*)运行 uptine 命令
s-prompt ()
区配系统提示符
print s.before
打印出现系统提示将前的命令输出
---
## Page 97
76第二部分高级篇
s,sendline (*1s -1*)
s.prompt ()
print s,before
(,JP,) auT[puas*
s-prompt ()
s,1ogout ()断开 ssh 连接
print s.before
except pxssh.ExceptionPxssh, e:
_*utbot uo patreg qesxd sut2d
print str (e)
5.3pexpect应用示例
下面介绍两个通过pexpect实现自动化操作的示例，其中一个实现FTP协议的自动交
互，另一个为SSH协议自动化操作，这些都是日常运维中经常遇到的场景。
5.3.1实现一个自动化FTP操作
我们常用FTP协议实现自动化、集中式的文件备份，要求做到账号登录、文件上传与下
载、退出等实现自动化操作，本示例使用pexpect模块的 spawnuO方法执行FTP命令，通过
expectO方法定义匹配的输出规则，sendlineO方法执行相关FTP交互命令等，详细源码如下：
[ /home/test/pexpect/ simple2.py ]
fron _future__1mport un1.code_1iterals #使用 unicode 编码
import pexpect
es 1zodur
chi1d -pexpect.spavnu(*ftp ftp.openbad.org*）选行rtp 会令
chi1d,sendline (*anonymous*)输入 ftp 账号信患
ch11d,expect(*(7i)password*)匹配害码舱入提示
child,sendline (*pexpectésourceforge.net*)输入 ftp 害码
chi1d,expect (*ftp> *)
child, sendline (*bin*)
chi1d,expect (*ftp> *)
启用二进制传输模式
child.sendline (*get robots,txt')下载 robots,txt 文件
chi1d,expect (*ftp> *)
(g\*, [满用interact （)控制项让出，用户可以手工进行变互
5.3.2远程文件自动打包并下载
在Linux系统集群运营当中，时常需要批量远程执行Linux命令，并且双向同步文件的
操作。本示例通过使用spawnO方法执行ssh、scp命令的思路来实现，具体实现源码如下：
 /home/test/pexpect/ simple3.py 1
inport pexpect
inport sys
ip=*192.168.1.21*宽义目标主机
user=”zoot"目称主机用户
passwd=*H6DSY#*$df32"目标主机害码
target_file=*/data/1ogs/nginx_access.1og*目标主机 nginx 目志文件
child - pexpect.spawn(*/usr/bin/ssh*, [user+*g*+ip])ff ssh 
fout=fle（*mylog.txt*,*v)输入、输出日志写入mylog-txt 文件
child.logfile = fout 
try1
chi1d.expect(*(?i)password’)匹配 password 字串，(?i）表季不区到大小写
ch11d, sendline (passvd)
child,expect (*#′)
child.sendline(*tar -czf /data/nginx_access.tar-gz *+target_file)  #包 nginx
日志文件
chi1d,expect(*#′)
print child.before
chi1d,sendline (*exit*)
fout,close ()
except EOF：定又BOF异常理
print *expect EOr*
except TIMEOUT：定文TIMEOUT并事处理
print *expect TIMEOUT*
---
## Page 99
78第二部分高级篇
child = pexpect,spawn(*/usr/bin/scp*, [user+*a'+ip+':/data/nginx_aecess.tar.
gz',*/home'])启动 scp 远程持员命令，实现将打包好的nginx 日复制至本地/home目录
fout = file (*mylog.txt', *a′)
chi1d.1ogfile = fout
try:
chi1d,expect (* (?1)password′)
ch11d. send1 1ne (passwd)
child.expect（pexpect，EOF）匹配缓冲区EOP（结尾），保证文件复制正常完成
except E0F:
print “expect Eor*
except TIMEOUT:
print “expect TIMSoUr"
---
## Page 100
嘉9
Cinyder
系统批量运维管理器paramiko详解
paramiko是基于Python实现的SSH2远程安全连接，支持认证及密钥方式。可以实现远
程命令执行、文件传输、中间SSH代理等功能，相对于Pexpect，封装的层次更高，更贴近
SSH协议的功能，官网地址：http://www.paramiko.org，目前最高版本为1.13。
6.1paramiko的安装
paramiko支持pip、casy_instal或源码安装方式，很方便解决包依赖的间题，具体安装
命令如下（根据用户环境，自行选择pip或casy_install）：
pip instal1 paramiko
easy_install paraniko
paramiko 依赖第三方的 Crypto、Eedsa 包及Python 开发包python-devel 的支持。源码安
装步骤如下：
[asapuoAd Ttezsut w
tar -zxvf pycrypto-2.6.tar.gz
wget http://ftp.d1itz.net/pub/dlitz/crypto/pycrypto/pyerypto-2.6.tar.gz
cd pyerypto-2.6
 python setup.py insta11
wget https://pypi :python.org/pac
 cd ..
 tar -zxvf ecdsa-0.10.tar.gz
check-certificate
---
## Page 101
80第二部分高级篇
# cd ecdsa-0.10
 python setup·py instal1
get http8://github,com/paramiko/paramiko/archive/v1 .12.2, tar ,gz
# cd ..
 tar =zxvf v1.12.2,tar.gz
 cd paramiko-1.12.2/
 python setup·py instal1
校验安装结果，导入模块没有提示异常则说明安装成功：
Python 2.6,6 (x266:84292, Ju1 10 2013, 22:48:45)
uoqqAd #
[GCC 4.4.7 20120313 (Red Hat 4.4.7-3)1 on 1inux2
Type *belp", *copyright", "credits* or "license* for more information,
>>> inport paramiko
>>>
下面介绍一个简单实现远程SSH运行命令的示例。该示例使用密码认证方式，通过
exec_commandO方法执行命令，详细源码如下：
[ /home/test/paramiko/simple1.py ]
1/usr/bin/env python
inport paramiko
hostname=′192.168.1.21*
password=*sKJh935yft#*
username=' root'
paran.ko,uti1.1og_to_file (*sys1ogin, 1og*)+发述 paramiko 日到 syslogin.log 文
ssh=paramiko.SSHC1ient ()创建一个ssh客户墙 client 对象
8sh.1oad_sy8ten_host_key8()+获取客户境ho8t_keys，默认~/.ssh/known_hosts，非默认路
径需指定
ssh connect (hostname=hostnane, username=username,passvord=passvord)  创建 ssh 连接
stdin, stdout,stderr=ssh.exec_command(*free-n*）满用远程执行命令方法 exec_command()
print stdout.read()打印命令执行结果，得到 Python列表形式，可以使用 stdout.readlines（)
88h.close（)关闭ssh连接
程序的运行结果截图如图6-1所示。
455
26
371
图6-1程序运行结果
---
## Page 102
第6章系统批量运维管理器paramiko详解81
6.2paramiko的核心组件
paramiko包含两个核心组件，一个为 SSHClient类，另一个为SFTPClient类，下面详细
介绍。
6.2.1SSHClient类
SSHClient类是SSH服务会话的高级表示，该类封装了传输（transport）、通道（channel）
及SFTPClient的校验、建立的方法，通常用于执行远程命令，下面是一个简单的例子：
client = SSHClient ()
client .load_system_host_keys ()
client ,connect (*ssh,example, com*)
stdin, stdout, stderr = client,exec_command(*1s -1′)
下面介绍SSHClient常用的儿个方法。
1.connect 方法
connect方法实现了远程SSH连接并校验。
方法定义：
connect (self, hostname, port=22, username=None, passvord=Nose, pkey=Sone, key,
filenane=None, timeout=None, allow_agent=True, 1ook_for_keys=True, compzess=False)
参数说明：
口hostname（str类型），连接的目标主机地址；
口port（int类型），连接目标主机的端口，默认为22；
口usemame（str类型）校验的用户名（默认为当前的本地用户名）；
password（str类型），密码用于身份校验或解锁私钥；
口pkey（PKey类型），私钥方式用于身份验证；
口key_filename（stror list（str）类型），一个文件名或文件名的列表，用于私钥的身份验证；
口timeout（float类型），一个可选的超时时间（以秒为单位）的TCP连接；
口allow_agent（bool类型），设置为False 时用于禁用连接到 SSH代理；
口look_for_keys（bool类型），设置为False 时用来禁用在~/.ssh中搜索私钥文件；
compress（bool 类型），设置为 True 时打开压缩。
2.exec_command 方法
远程命令执行方法，该命令的输人与输出流为标准输人（stdin）、输出（stdout）、错误
---
## Page 103
82第二部分高级篇
（stderr）的Python文件对象，方法定义：
exec_command (se1f, command, bufs1ze=-1)
参数说明：
command（str类型），执行的命令串；
口 bufsize（int类型），文件缓冲区大小，默认为-1（不限制）。
3. load_system_host_keys 方法
加载本地公钥校验文件，默认为-/.ssh/known_hosts，非默认路径需要手工指定，方法
定义：
Load_system_host_keys (se1f, filenane=None
参数说明：
filename（str类型），指定远程主机公钥记录文件。
4. set_missing_host_key_poliey 方法
设置连接的远程主机没有本地主机密钥或HostkKeys对象时的策略，目前支持三种，分
别是AutoAddPolicy、RejectPolicy（默认）、WamingPolicy，仅限用于SSHClient类，分别代
表的含义如下：
口AutoAddPolicy，自动添加主机名及主机密钥到本地HostKeys对象，并将其保存，不
依赖load_system_host_keysO 的配置，即使~/.ssh/known_hosts 不存在也不产生影响；
口RejectPolicy，自动拒绝未知的主机名和密钥，依赖load_system_host_keysO 的配置；
口WarningPolicy，用于记录一个未知的主机密钥的Python警告，并接受它，功能上与
AutoAddPolicy相似，但未知主机会有告警。
使用方法如下：
ssh=paramiko Ss8C1ient ()
ssh.set_missing_host_key_policy (paramiko.AutoAddPolicy () )
6.2.2SFTPClient类
SFTPClient作为一个SFTP客户端对象，根据SSH传输协议的sftp会话，实现远程文件
操作，比如文件上传、下载、权限、状态等操作，下面介绍SFTPClient类的常用方法。
---
## Page 104
第6章系统批量运维管理器paramiko详解83
1. from_transport 方法
创建一个已连通的SFTP客户端通道，方法定义：
from_transport (cls, t)
参数说明：
t（Transport），一个已通过验证的传输对象。
例子说明：
t = paramiko.Transport ((*192.168.1.22*,22))
t connect (username=*root*, password=*KJSdj348g*)
sftp paramiko.SFTPclient.from_transport (t)
2.put方法
上传本地文件到远程SFTP服务端，方法定义：
put (self, 1oca1path, remotepath, callback=Mone, conflzm=True)
参数说明：
localpath（str类型），需上传的本地文件（源）；
remotepath（str类型），远程路径（目标）；
callback（function（int,int）），获取已接收的字节数及总传输字节数，以便回调函数调用，
默认为None；
口confirm（bool类型），文件上传完毕后是否调用statO方法，以便确认文件的大小。
例子说明：
1ocalpath=*/home/access .1og'
remotepath=*/data/log8/access . 1og*
sftp.put (1ocalpath, renotepath)
3.get 方法
从远程SFTP服务端下载文件到本地，方法定义：
get (self, remotepath, localpath, callback=None)
参数说明：
rcmotepath（str类型），需下载的远程文件（源）；
---
## Page 105
84第二部分高级篇
口localpath（str类型），本地路径（目标）；