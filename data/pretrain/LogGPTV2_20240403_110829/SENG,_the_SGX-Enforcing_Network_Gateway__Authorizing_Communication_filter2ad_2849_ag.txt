in existing LibOS primitives (incl. upcoming ones like Oc-
clum [53]) can signiﬁcantly increase SENG’s performance for
complex apps like NGINX. In the following, we focus on the
memory bottleneck (ii). SGX currently limits EPC memory
to 128 MB (of which around 90 MB are useable by apps) and
does not support memory sharing across enclaves. Thus, run-
ning many enclaves in parallel stresses memory and triggers
expensive paging. We see multiple ways to overcome this in
SENG: (a) Intel CPUs now support dynamic memory manage-
ment for SGX [39]13 which decreases memory pressure via
lazy loading and page unloading. In fact, recent studies on li-
brary debloating [46,47] have shown that apps only use small
fractions of the loaded code (incl. libraries) and tools like RA-
ZOR [46] trim over 70% of bloated binaries. With widespread
dynamic paging support, SENG can integrate compiler- and
loader-based schemes into the LibOS to reduce the enclave
footprint. (b) SENG could follow the idea of Panoply by split-
ting the SENG runtime library and other shared libraries into
separate SGX enclaves that are shared by all shielded apps and
used for attested RPC calls. [55] (c) Upcoming LibOSes like
Occlum [53] apply HW-isolation mechanisms together with
SW-based fault isolation to efﬁciently and securely run mul-
tiple processes in a single enclave. By integration of SENG
inside Occlum rather than Graphene-SGX, multiple shielded
apps with same privileges could directly share common li-
braries inside SGX. While the memory bottleneck of SGX
right now indeed poses a major challenge to LibOSes and
SENG, we conclude there are several mid-term and long-term
directions for improving the number of concurrent apps.
Frequent Measurement Updates. Any change to an app
will cause a change to the enclave report and identity, too.
While alternative designs limit the number of updates by in-
cluding only a loader inside the measurement [5], we highlight
13https://github.com/ayeks/SGX-hardware#
hardware-with-sgx2-support
that our choice roots the app identity directly in the HW. We
thus can directly specify app-grained policies on the exact
app identity and do not need additional, potentially vulnera-
ble, SW-based authentication schemes. As discussed in Sec-
tion 5.4, we also regard integration of measurement updates
into today’s continuous build chains as practical and have
shown in Section 5.3 that SENG is ﬂexible enough to group
multiple app versions into shared enclave IP subnetworks. A
future direction might include exploration of shared “library
enclaves” (“micron” in Panoply [55]) to compartmentalize
enclaves while keeping HW-based identiﬁcation.
Other TEEs and Improvements. While our current de-
sign uses SGX, it relies on common properties of other TEEs,
namely trusted execution and remote attestation. Therefore,
we can likely transfer SENG to other TEEs [6, 30]. We chose
SGX, as it is widely available on commodity systems, and
poses challenges due to its restriction to user space code.
Prototype Limitations. Our current prototype does not
support all system calls yet. We miss fork and exec in par-
ticular, which could be extended like in other LibOSes [9,55].
Furthermore, we have not yet integrated a database.
11 Conclusion
Network administrators have lost control over which client
apps communicate in their sensitive networks. Not being able
to centrally, precisely and reliably govern network accesses
regularly results in data exﬁltration by malware or exploitation
attempts against vulnerable client software. Unfortunately, ex-
isting attempts to prevent such incidents (anti-virus, malware
sandboxes, IDS, etc.) are susceptible to evasion. SENG’s abil-
ity to specify app-grained policies enables for ﬁne-grained and
application-aware trafﬁc control concepts. Moreover, SENG
provides strong security guarantees that are rooted in hard-
ware and even withstand system-level attackers. SENG thus
ﬁlls a need that has existed since the introduction of ﬁrewalls:
per-app attribution of network trafﬁc.
12 Artifacts
The prototype of SENG is available as an open source project
at https://github.com/sengsgx/sengsgx.
Acknowledgments
We thank our anonymous paper and artifact reviewers and
our shepherd Adrian Perrig for their valuable feedback. Also,
we thank Cas Cremers for his feedback on the initial SENG
design, and Giorgi Maisuradze for his paper draft review.
768    29th USENIX Security Symposium
USENIX Association
References
[1] A. Ahmad, K. Kim, M. I. Sarfaraz, and B. Lee. OBLIVI-
ATE: A data oblivious ﬁlesystem for intel SGX.
In
Network and Distributed System Security Symposium
(NDSS), 2018.
[2] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin,
C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. L.
Stillwell, D. Goltzsche, D. Eyers, R. Kapitza, P. Pietzuch,
and C. Fetzer. SCONE: Secure linux containers with in-
tel SGX. In USENIX Symposium on Operating Systems
Design and Implementation (OSDI), 2016.
[3] D. E. Asoni, T. Sasaki, and A. Perrig. Alcatraz: Data
Exﬁltration-Resilient Corporate Network Architecture.
In International Conference on Collaboration and Inter-
net Computing (CIC), 2018.
[4] T. Barabosch and E. Gerhards-Padilla. Host-based code
injection attacks: A popular technique used by malware.
Proceedings of IEEE International Conference on Mali-
cious and Unwanted Software (MALCON), 2014.
[5] A. Baumann, M. Peinado, and G. Hunt. Shielding Ap-
plications from an Untrusted Cloud with Haven.
In
USENIX Symposium on Operating Systems Design and
Implementation (OSDI’14).
[6] F. Brasser, D. Gens, P. Jauernig, A.-R. Sadeghi, and
E. Stapf. SANCTUARY: ARMing TrustZone with User-
In Network and Distributed System
space Enclaves.
Security Symposium (NDSS), 2019.
[7] S. Brenner, C. Wulf, D. Goltzsche, N. Weichbrodt,
M. Lorenz, C. Fetzer, P. Pietzuch, and R. Kapitza. Se-
cureKeeper: Conﬁdential ZooKeeper Using Intel SGX.
In Middleware Conference (Middleware), 2016.
[8] S. Cabuk, C. E. Brodley, and C. Shields. IP Covert Tim-
ing Channels: Design and Detection. In Conference on
Computer and Communications Security (CCS), 2004.
[9] C. che Tsai, D. E. Porter, and M. Vij. Graphene-SGX:
A Practical Library OS for Unmodiﬁed Applications
In USENIX Annual Technical Conference
on SGX.
(USENIX ATC), 2017.
[10] S. Checkoway and H. Shacham. Iago Attacks: Why the
System Call API is a Bad Untrusted RPC Interface. In
Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 2013.
[11] Cisco. NVM. https://www.cisco.com/c/dam/global/en_au/
assets/pdf/anyconnect-network-visibility.pdf.
[12] The CLIP OS Project, 2020. https://clip-os.org/en/.
[13] V. Costan and S. Devadas. Intel SGX Explained. IACR
Cryptology ePrint Archive, 2016:86, 2016.
[14] Docker networking. https://docs.docker.com/network/.
[15] J. A. Donenfeld. WireGuard: Next Generation Kernel
Network Tunnel. In Network and Distributed System
Security Symposium (NDSS), 2017.
[16] H. Duan, C. Wang, X. Yuan, Y. Zhou, Q. Wang, and
K. Ren. LightBox: Full-Stack Protected Stateful Mid-
dlebox at Lightning Speed. In Conference on Computer
and Communications Security (CCS), 2019.
[17] S. Eskandarian, J. Cogan, S. Birnbaum, P. C. W. Bran-
don, D. Franke, F. Fraser, G. G. Jr., E. Gong, H. T.
Nguyen, T. K. Sethi, V. Subbiah, M. Backes, G. Pel-
legrino, and D. Boneh. Fidelius: Protecting User Secrets
from Compromised Browsers. In IEEE Symposium on
Security and Privacy (SP), 2019.
[18] FireEye. M-Trends 2019. https://content.ﬁreeye.com/m-
trends/rpt-m-trends-2019.
[19] FireMon’s
State
www.ﬁremon.com/2019-state-of-the-ﬁrewall-report/.
of
the
Firewall, 2019.
[20] S. Gallenmüller, D. Schöffmann, D. Scholz, F. Geyer,
and G. Carle. DTLS Performance - How Expensive is
Security? 2019. https://arxiv.org/pdf/1904.11423.pdf.
[21] C. Gkantsidis, T. Karagiannis, D. Naylor, R. Li, and
P. Steenkiste. And Then ThereWere More: Secure Com-
munication for More Than Two Parties. Technical Re-
port MSR-TR-2017-24, July 2017.
[22] D. Goltzsche, S. Rüsch, M. Nieke, S. Vaucher, N. We-
ichbrodt, V. Schiavoni, P. Aublin, P. Cosa, C. Fetzer,
P. Felber, P. Pietzuch, and R. Kapitza. EndBox: Scalable
Middlebox Functions Using Client-Side Trusted Execu-
tion. In IEEE/IFIP Conference on Dependable Systems
and Networks (DSN), 2018.
[23] D. Goltzsche, C. Wulf, D. Muthukumaran, K. Rieck,
P. R. Pietzuch, and R. Kapitza. TrustJS: Trusted Client-
side Execution of JavaScript. In Workshop on Systems
Security (EuroSec’17).
[24] A. Houmansadr, C. Brubaker, and V. Shmatikov. The
Parrot Is Dead: Observing Unobservable Network Com-
munications. In IEEE Symposium on Security and Pri-
vacy (SP), 2013.
[25] Intel. SGX SDK. https://software.intel.com/sgx/sdk.
[26] iPerf3. https://iperf.fr/.
[27] iptables Application level ﬁrewalling, 2005.
debian-
administration.org/article/120/Application_level_ﬁrewalling.
USENIX Association
29th USENIX Security Symposium    769
[28] T. Jaeger, D. H. King, K. R. Butler, S. Hallyn, J. Latten, and
X. Zhang. Leveraging IPsec for Mandatory Per-Packet Access
Control. In 2006 Securecomm and Workshops.
[46] C. Qian, H. Hu, M. Alharthi, P. H. Chung, T. Kim, and W. Lee.
RAZOR: A Framework for Post-deployment Software De-
bloating. In USENIX Security Symposium, 2019.
[29] Y. Jang. Building trust in the user I/O in computer systems.
PhD thesis, 2017.
[30] Keystone Enclave, 2019. https://keystone-enclave.org/.
[31] S. Kim, J. Han, J. Ha, T. Kim, and D. Han. Enhancing Security
and Privacy of Tor’s Ecosystem by Using Trusted Execution
Environments. In USENIX Symposium on Networked Systems
Design and Implementation (NSDI), 2017.
[32] T. Knauth, M. Steiner, S. Chakrabarti, L. Lei, C. Xing, and
M. Vij. Integrating Remote Attestation with Transport Layer
Security. CoRR, abs/1801.05863, 2018.
[33] D. Kuvaiskii.
Add exitless system calls (pr 405).
https://github.com/oscarlab/graphene/pull/405.
[34] R. Lal and P. Pappachan. An architecture methodology for
secure video conferencing. Conference on Technologies for
Homeland Security (HST), 2013.
[35] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado.
Inferring Fine-grained Control Flow Inside SGX Enclaves
with Branch Shadowing. In USENIX Security Symposium,
2017.
[36] libuv. https://libuv.org/.
[37] J. Lind, C. Priebe, D. Muthukumaran, D. O’Keeffe, P.-
L. Aublin, F. Kelbert, T. Reiher, D. Goltzsche, D. Eyers,
R. Kapitza, C. Fetzer, and P. Pietzuch. Glamdring: Automatic
Application Partitioning for Intel SGX. In USENIX Annual
Technical Conference (USENIX ATC), 2017.
[47] A. Quach, A. Prakash, and L. Yan. Debloating Software
through Piece-Wise Compilation and Loading. In USENIX
Security Symposium, 2018.
[48] The Qubes OS Project, 2020. https://www.qubes-os.org/.
[49] S. Sasy, S. Gorbunov, and C. W. Fletcher. ZeroTrace : Obliv-
ious Memory Primitives from Intel SGX. In Network and
Distributed System Security Symposium (NDSS), 2018.
[50] V. Scarlata, S. Johnson, J. Beaney, and P. Zmijewski. Support-
ing Third Party Attestation for Intel R(cid:13) SGX with Intel R(cid:13) Data
Center Attestation Primitives, 2018.
[51] SELinux, 2019. http://selinuxproject.org/page/NB_LSM.
[52] shadowsocks. https://shadowsocks.org/en/index.html.
[53] Y. Shen, H. Tian, Y. Chen, K. Chen, R. Wang, Y. Xu, and
Y. Xia. Occlum: Secure and Efﬁcient Multitasking Inside a
Single Enclave of Intel SGX. In Conference on Architectural
Support for Programming Languages and Operating Systems
(ASPLOS). ACM, 2020.
[54] M.-W. Shih, S. Lee, T. Kim, and M. Peinado. T-SGX: Eradi-
cating Controlled-Channel Attacks Against Enclave Programs.
In Network and Distributed System Security Symposium, 2017.
[55] S. Shinde, D. L. Tien, S. Tople, and P. Saxena. Panoply: Low-
TCB Linux Applications With SGX Enclaves. In Network and
Distributed System Security Symposium (NDSS), 2017.
[38] lwIP. https://savannah.nongnu.org/projects/lwip/.
[56] Smack (LSM), 2019. http://schauﬂer-ca.com/.
[39] F. McKeen, I. Alexandrovich, I. Anati, D. Caspi, S. Johnson,
R. Leslie-Hurd, and C. Rozas. Intel SGX Support for Dynamic
Memory Management Inside an Enclave. In Hardware and
Architectural Support for Security and Privacy (HASP), 2016.
[40] netﬁlter, 2019. https://www.netﬁlter.org/.
[41] O. Oleksenko, B. Trach, R. Krahn, M. Silberstein, and C. Fet-
zer. Varys: Protecting SGX Enclaves from Practical Side-
Channel Attacks. In USENIX Annual Technical Conference
(USENIX ATC), 2018.
[42] M. Orenbach, P. Lifshits, M. Minkin, and M. Silberstein. Eleos:
ExitLess OS Services for SGX Enclaves. In European Confer-
ence on Computer Systems (EuroSys). ACM, 2017.
[57] B. Trach, A. Krohmer, F. Gregor, S. Arnautov, P. Bhatotia, and
C. Fetzer. ShieldBox: Secure Middleboxes Using Shielded
Execution. In Symposium on SDN Research (SOSR’18). ACM.
[58] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bind-
schaedler, H. Tang, and C. A. Gunter. Leaky Cauldron on the
Dark Land: Understanding Memory Side-Channel Hazards
in SGX. In Conference on Computer and Communications
Security (CCS), 2017.
[59] Y. Xiao, M. Li, S. Chen, and Y. Zhang. STACCO: Differen-
tially Analyzing Side-Channel Traces for Detecting SSL/TLS
Vulnerabilities in Secure Enclaves. In Conference on Com-
puter and Communications Security (CCS), 2017.
[43] B. Parno, Z. Zhou, and A. Perrig. Using Trustworthy Host-
based Information in the Network. In Workshop on Scalable
Trusted Computing (STC). ACM, 2012.
[60] J. Xing, A. Morrison, and A. Chen. NetWarden: Mitigating
Network Covert Channels without Performance Loss. In Work-
shop on Hot Topics in Cloud Computing (HotCloud), 2019.
[44] S. Pinto and N. Santos. Demystifying Arm TrustZone: A
Comprehensive Survey. ACM Comput. Surv., 51(6), Jan. 2019.
[45] R. Poddar, C. Lan, R. A. Popa, and S. Ratnasamy. SafeBricks:
Shielding Network Functions in the Cloud. In Symposium on
Networked Systems Design and Implementation (NSDI), 2018.
[61] D. Zhuo, K. Zhang, Y. Zhu, H. H. Liu, M. Rockett, A. Krish-
namurthy, and T. Anderson. Slim: OS kernel support for a
low-overhead container overlay network. In USENIX Sym-
posium on Networked Systems Design and Implementation
(NSDI), 2019.
770    29th USENIX Security Symposium
USENIX Association