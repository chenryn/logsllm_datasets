title:Secure Opportunistic Multipath Key Exchange
author:Sergiu Costea and
Marios O. Choudary and
Doru Gucea and
Bj&quot;orn Tackmann and
Costin Raiciu
Secure Opportunistic Multipath Key Exchange
Sergiu Costea
ETH Zürich
Zürich, Switzerland
PI:EMAIL
Marios O. Choudary∗
Bucharest, Romania
PI:EMAIL
University Politehnica of Bucharest
University Politehnica of Bucharest
Doru Gucea
Bucharest, Romania
PI:EMAIL
Björn Tackmann
IBM Research – Zürich
Rüschlikon, Switzerland
PI:EMAIL
ABSTRACT
The security of today’s widely used communication security proto-
cols is based on trust in Certicate Authorities (CAs). However, the
real security of this approach is debatable, since certicate handling
is tedious and many recent attacks have undermined the trust in
CAs. On the other hand, opportunistic encryption protocols such as
Tcpcrypt, which are currently gaining momentum as an alternative
to no encryption, have similar security to using untrusted CAs or
self-signed certicates: they only protect against passive attackers.
In this paper, we present a key exchange protocol, Secure Mul-
tipath Key Exchange (SMKEX), that enables all the benets of op-
portunistic encryption (no need for trusted third parties or pre-
established secrets), as well as proven protection against some
classes of active attackers. Furthermore, SMKEX can be easily ex-
tended to a trust-on-rst-use setting and can be easily integrated
with TLS, providing the highest security for opportunistic encryp-
tion to date while also increasing the security of standard TLS.
We show that SMKEX is made practical by the current availability
of path diversity between dierent AS-es. We also show a method
to create path diversity with encrypted tunnels without relying on
the network topology. These allow SMKEX to provide protection
against most adversaries for a majority of Alexa top 100 web sites.
We have implemented SMKEX using a modied Multipath TCP
kernel implementation and a user library that overwrites part of
the socket API, allowing unmodied applications to take advantage
of the security provided by SMKEX.
CCS CONCEPTS
• Security and privacy → Public key encryption; Security
protocols;
KEYWORDS
key exchange, opportunistic security, multi-path TCP
∗I thank Christ our God for all His help during this work.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specic permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243791
Costin Raiciu
University Politehnica of Bucharest
Bucharest, Romania
PI:EMAIL
ACM Reference Format:
Sergiu Costea, Marios O. Choudary, Doru Gucea, Björn Tackmann, and Costin
Raiciu. 2018. Secure Opportunistic Multipath Key Exchange. In 2018 ACM
SIGSAC Conference on Computer and Communications Security (CCS ’18), Oc-
tober 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, Article 4,
18 pages. https://doi.org/10.1145/3243734.3243791
1 INTRODUCTION
Secure communication is at the heart of our society today: we
use secure e-mails, secure HTTP (HTTPS), secure shell (SSH), se-
cure Voice-over-IP, secure messaging, etc. However, passive and
active attackers still threaten the security of our communications. In
particular, recent intelligence leaks and journalistic investigations
have shown that the NSA controls some of AT&T’s main rout-
ing facilities in order to analyze Internet trac and long-distance
calls [48, 51]. Rob Joyce from NSA has also admitted that NSA, as a
persistent-threat adversary, will do everything it can to break into
other people’s machines and communications [25].
As a result, we have seen two major shifts in the landscape of
communications: a) enabling HTTPS by default on most major
websites and b) moving toward opportunistic encryption as the
baseline instead of no encryption at all (plaintext). Unfortunately,
the popular protocols that support these shifts (TLS and Tcpcrypt)
still have their shortcomings.
TLS (Transport Layer Security) [13], as well as similar protocols
such as QUIC [22], rely on third party servers – certicate author-
ities (CA) – to ensure the authenticity of public keys exchanged
between two communicating parties (e.g., client and server), hence
protecting against active man-in-the-middle (MITM) attacks. Yet,
in the past years we have seen many issues with this system: a)
CA’s have been fooled to issue certicates to untrusted parties [33];
b) CA servers have been hacked [17, 20]; c) the mechanism for
revoking bad or hijacked certicates is problematic [35]; d) CA’s
share their secret keys with other potentially insecure parties [7].
As a result, the protection that current TLS provides against active
MITM attacks is debatable.
On the other hand, opportunistic encryption protocols such as
Tcpcrypt [4] provide an improved security baseline for Internet com-
munications [15]: rather than using no encryption, such protocols
encrypt and authenticate data without requiring communicating
parties to authenticate each others’ public keys (i.e. no requirement
for trusting third parties or pre-established secrets). This provides
protection against passive attackers, but leaves the door open for
active ones (i.e. those that can tamper with the data). In essence,
this is similar to using a compromised CA or self-signed certicates.
In this paper, we introduce Secure Multipath Key Exchange
(SMKEX), a key exchange protocol that is an extension of the Die-
Hellman key exchange to multiple channels. SMKEX provides op-
portunistic encryption with partial protection against active MITM
attacks by leveraging the use of multiple public communication
channels between communicating parties. Hence, our protocol has
all the usability advantages of opportunistic encryption1, while
providing protection against several classes of active attackers. Fur-
thermore, SMKEX can be easily extended to a trust-on-rst-use
(TOFU) setting and can be easily integrated with TLS, providing
increased security for both TOFU and TLS-like protocols.
The security and practicality of our protocol is made possible by
two main factors: a) the wide availability of path diversity between
dierent AS-es [39]; b) the widespread adoption of Multipath TCP
(MPTCP) [1] both on workstations and smartphones [37]. We have
performed measurements of path diversity in several countries,
which show that SMKEX can provide protection against local active
attackers for a majority of Alexa top 100 websites. Furthermore, we
can also use encrypted tunnels to create path diversity, allowing
SMKEX to provide security even against nation-wide adversaries.
Overall, our work provides several useful contributions towards
secure and practical opportunistic encryption: a) proof that SMKEX
can resist active, but unsynchronized attackers, thus providing the
highest security of an opportunistic encryption protocol to date
(§6); b) evidence that existing path diversity in the Internet allows
SMKEX to secure connections to many popular websites (§7); c) a
method based on encrypted tunnels which allows SMKEX to protect
against nation-wide adversaries (§7.2); d) an implementation of
SMKEX using a modied MPTCP kernel implementation and a
user library that overwrites the Socket API, allowing unmodied
applications to use SMKEX (§8); e) description of integration with
TLS and TOFU-based protocols (§10).
SMKEX builds on hash functions and is proven secure in the
random-oracle model. We additionally describe in §D a variant of
the protocol that is secure in the standard model.
2 ATTACKER MODEL
Generally, there are two types of network attackers: passive attack-
ers, which only eavesdrop on a path, and active attackers, which
additionally modify messages.
We consider the setting where a client connects to a server
across multiple paths. If multiple attackers target the same path,
we view them as a single attacker. If at least one of the attackers
is active, we view all of them as a single active attacker. If only
passive attackers target that path, we view them as a single passive
attacker. In the Internet, attackers that are present on dierent
paths can decide to collude. However, due to physical and national
boundaries, attackers in dierent AS-es or countries might not be
able to exchange data in real time. To capture such behavior, we
dene two types of relationships.
D 1 (S ). Two attackers X1 and
X2 are said to be synchronized (written X1-X2) if they can exchange
messages between the start and end of a specic protocol session.
1See the SoK paper of Unger et al. [49, Section III, Table I] for more details.
P/P, P-P
A-P
A-A
A/P
A/A
Figure 1: Map of all our possible adversaries based on intru-
siveness (A, P) and communication capabilities ( ,/).
D 2 (U ). Two attackers X1
and X2 are said to be unsynchronized (written X1/X2) if they can
only exchange messages before the start and after the end of a specic
protocol session.
Unsynchronized attackers may agree over keys or data prior to
protocol execution. They may also cooperate after termination of
the session; this must not compromise the condentiality of trac.
2.1 Attack hierarchy for 2 paths
Based on attacker capabilities (active or passive) and the relation-
ships between attackers (synchronized or unsynchronized) we clas-
sify attacks according to total attacker power. While the classica-
tion is simple for two paths (where we have only two attackers and
one relationship between them), the complexity increases quickly
as the number of paths grows. We discuss only the 2-path attacks
in-depth, and in §C.2 introduce methods that reduce the complexity
of any multipath attack to the 2-path case.
By looking at all possible combinations of attackers for the 2-
path case, we obtain the following attack scenarios: P/P, P-P, A/P,
A-P, A/A, and A-A.
An active attacker is stronger than a passive one, as it includes
all the capabilities of the latter; additionally, synchronized attackers
are superior to unsynchronized ones. We sort the 2-path attack
scenarios based on attacker power in Figure 1. The arrows indicate
the strength of the adversaries: an adversary at the end of an arrow
is stronger (by the change of a single capability) than the one point-
ing to them. Furthermore, the arrows in reverse provide positive
implications of security: for example, if we prove that a protocol
provides some security property for the case A-P, this implies that
the protocol also provides this property for the cases P-P, A/P and
P/P. Note that P/P and P-P monitor all trac without being able
to inject messages during the execution of the protocol. However,
because they can exchange information after the execution, they
are equivalent. The A-P model requires that the active attacker
cannot inject messages on the path controlled by the passive one,
as otherwise the model collapses to A-A. In terms of real-world
networks, A-P therefore requires an additional assumption such as
the impossibility of address spoong or strong timing guarantees.
We want to prove that a protocol provides a security property
for some scenarios. We use the strict ordering of attacker capabili-
ties to reduce the number of necessary proofs. Specically, if we
show our key exchange protocols are secure against A/A and A-P,
it also implies they are secure against P/P, P-P, A/P. Opportunis-
tic protocols cannot achieve security against A-A attackers, so an
opportunistic protocol secure against both A/A and A-P attackers
achieves the best possible security according to our classication.
3 FUNDAMENTAL GOALS
In the following, we present the fundamental goals for secure op-
portunistic multipath key exchange in our model. In all our protocol
analyses, we model the network as asynchronous, with no upper
bound on the time required for a message to be delivered.
Secure key exchange. Our rst goal (and the focus of our work)
is to obtain a secure key exchange between two parties. We dene
a secure key exchange as a distinguishability game, adapting the
model of Canetti and Krawczyk [6]. In particular, as they target
authenticated key exchange and assume an adversary that has
full control over the network, we describe restricted classes of
adversaries that model A/A and A-P attackers, respectively. The
guarantee formalized by our model is that any protocol session in
which the adversary behaved as an A/A or an A-P attacker (and not
as an A-A attacker) produces a key that is indistinguishable from a
purely random one. This is the common security requirement for
key-exchange protocols.
Forward and backward secrecy. Key exchange protocols are of-
ten required to also provide forward secrecy and backward secrecy
(aka. future secrecy [11, 49]). Forward secrecy guarantees that an
attacker that is able to compromise all the key material of commu-
nicating parties at a given time (e.g. temporary access to a device) is
not able to decrypt data from previous communications [49, Section
IV]. Often, forward secrecy is dened in terms of long-term secrets:
compromising the long-term secrets should not allow an adversary
to decrypt previously encrypted data. However, given the lack of
long-term secrets in the basic version of our key exchange proto-
col, we dene forward secrecy more generally, as Unger et al. [49,
Section IV], meaning that an adversary that can compromise all
the keying material cannot decrypt previously encrypted data. This
denition also captures protocols using long-term keys (see our
TOFU extension in §10).
Similarly, backward (or future) secrecy guarantees that an at-
tacker that is able to compromise all the key material of communi-
cating parties at a given time is not able to decrypt data from future
communications [49, Section IV]. Again, this generic denition
does not necessarily imply the use of long-term secrets, but only
that an adversary be given all key material available at a given time.
4 UNDESIRABLE EXTENSIONS FOR
MULTIPATH KEY EXCHANGE
Die and Hellman proposed the rst ecient solution to exchange
a secret key over a public path back in 1976 [14]. This protocol
works as follows. Let Alice (A) and Bob (B) be the two parties that
want to communicate (e.g. a client and a server) and let G be a
cyclic group of prime order q, with generator   (with |q|, the bit
length of q, large). Alice and Bob may agree on parameters G, q,
  beforehand. A chooses a secret exponent a in Zq and sends the
public value  a (an element of G) to B. Similarly, B chooses a secret
exponent b in Zq and sends  b to A. They can now both obtain the
secret key K =  ab, by exponentiating the public value received
from the other party to their secret exponent2.
While the DH protocol is still the predominant key exchange
mechanism used today, it is completely vulnerable to an active
MITM attacker (M) that can intercept and modify the key exchange
in order to set up dierent known keys with each of the participants.