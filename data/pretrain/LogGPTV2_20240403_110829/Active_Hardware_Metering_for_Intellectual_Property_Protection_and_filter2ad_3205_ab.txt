294
16th USENIX Security Symposium
USENIX Association
the widely used class of sequential designs. In this sec-
tion, we describe the BFSM construction and introduce
the locking mechanism. Implementation details are dis-
cussed in the next section.
4.1 Method
Random Unique Block (RUB). Perhaps the most im-
portant component of the proposed security mechanism
is the existence of the unclonable unique ID for each IC.
The IDs are a function of the variability present at each
chip and are therefore, speciﬁc to the chip. RUB is a
small circuitry added to the design, whose function is
to generate the unique ID. It is desirable that the RUBs
do not change and remain stable over time. Recently,
a few paradigms for designing unique identiﬁcation cir-
cuitry was proposed [20, 21, 28]. The resulting IDs are
mostly stable, and we will later show how to extract a
nonvolatile ID from the RUB, even in presence of a few
unstable bits.
Addition of the BFSM. The key idea underlying the
proposed active metering scheme can be described in a
simple way. Assume that the original design contains m
distinct states. Further assume that the state of STG are
stored in k, 1-bit ﬂip ﬂops (FFs). The FFs represent a to-
tal of 2k states, out of which m states correspond to the
original design and (2k − m) states are dont cares. The
metering mechanism adds an extra part to the FSM of the
design. The added states are devised such that there are
a number of transitions from the states in the added STG
to the reset state q0 of the original design.
In our scheme, the power-up state of each IC is built to
be a function of the manufacturing variability and thus,
will be unique to each instance. Furthermore, we select
k such that 2k − m >> m. This selection ensures that
when the circuit is powered up, its initial state will be in
one of the added states in BFSM. Assume that the IC is
powered up in the added state qa0. During the standard
testing phase, the manufacturer can read the state of the
design, e.g., by scanning and reading the FF’s. However,
unless the foundry has the knowledge of the STG, ﬁnding
the sequence of inputs required for the correct transition
from the state qa0 to the reset state q0 is a problem of
exponential complexity. Essentially, there will be no way
of ﬁnding the sequence other than trying all the possible
combinations.
More formally, assume that the sequence of I pri-
mary inputs denoted as αI={a1, a2, . . . , aI} applied to
the state qa0 is one correct sequence of states that starts
from qa0 traverses I states denoted by QI={qa1, qa2, . . . ,
qa(I−1),q0}, i.e., q0=δ(qa0, α). Assuming that the input
is b bits and there are cycles in STG, ﬁnding the correct
input sequence that would result in I consecutive cor-
rect transitions is a problem with exponential complexity
I
O
Random Bits
…….…….
…….………..
FF
.…….Logic 
b1bk
…….
Block…….
…….
………..
FF
.
(a) RUB initially loading the STG’s FFs
S2
Original 
S3
S1
STGAdded 
S0
S4
S15….….….
….….….
S5S6S7
S29S30
S31
STG
(b) The original and enhanced STG
As an example, consider the STG shown in Figure
3(b) that consists of the original STG that has ﬁve states
({q0,q1,q2,q3,q4}) with augmentation of twenty seven
added states ({q5,q6,. . . ,q31}). Edges are incorporated
to the added states to ensure that there are paths from
each of the added states to the reset state of the design.
The block shown in Figure 3(a) is a RUB.
Figure 3: The boosted FSM (BFSM).
with respect to b and is thus, intractable.
The output of the RUB deﬁnes k random bits that will
be loaded into the FF’s of the augmented STG upon start-
up. Now, an uninformed user who does not have the in-
formation about the transition table (e.g., foundry), can
readout the data about the initial added state qa0, but this
information is not sufﬁcient for ﬁnding the sequence of
primary input combinations to arrive at the reset state q0.
However, the person who has the information about the
structure of the STG, upon receiving the correct state,
would exactly know how to traverse from this locked
state to q0. In other words, the owner of the FSM de-
scription is the only entity who would have the key to
unlock the IC.
An interesting application of the proposed BFSM con-
struction method is in remote disabling. Alice will save
the RUBs and the keys for all the ICs that she has un-
locked. Using the chip IDs that are integrated within the
functionality, she can add mechanisms that enable her to
monitor the activities of the registered chips remotely, for
example, if they are connected to the Internet. She can
further add transitions from the original STG to untra-
versed states, to lock the IC in case it is needed. Remote
disabling has a lot of applications. For example, it can
be used for selective remote programming of the devices,
and royalty enforcement.
USENIX Association
16th USENIX Security Symposium
295
4.2 Ensuring proper operation
The following issues and observations ensure proper op-
eration and low-overhead of active hw metering:
(i) Storing the input sequence (key) for traversal to
the initial state q0. During testing, once Bob scans out
the FF values and sends them to Alice, she provides the
key to Bob. He includes both the original RUB and the
key in the chip, for example, in a nonvolatile memory.
This data is utilized along with the unclonable RUB cir-
cuit, for transition to the reset state. Since the power-up
state is unique for each IC, sequence of inputs (key) that
traverse the power-up state to the reset state is also spe-
ciﬁc to each IC. One needs to store the key which per-
forms the traversal at the power-up state on each chip.
There are many ways to accomplish this. For exam-
ple, the designer could add a small programmable part
to the design which needs to be coded with the unique
sequence (key) before each IC is in operation. Coding
ensures protection of keys against other software attacks.
As an alternative, the sequence might not be included in
the memory and just used as a permanent password to
the IC.
(ii) Powering up in one of the added states. This
condition can be easily guaranteed by selecting a large
enough k. Assuming that all the states have an equal
probability, the probability of starting in one of the added
states is (2k − m)/2k. For a given m, we select k such
that the probability of not being in one of the added states
is smaller than a given probability. For example, for
m = 100 and k = 30, the probability of starting up
in an original state is less than 10−7.
(iii) Diversity of power-up states (unique IDs). k
should also be selected so that the probability of two ICs
having the same ID becomes very low. Assume that we
need to have d distinct ICs each with a unique ID. As-
suming that the IDs are completely random and indepen-
dent, we utilize the Birthday paradox to calculate this
probability and to make it low. Consider the probabil-
ity PICID(k, d) that no two ICs out of a group of d will
have matching IDs out of 2k equally possible IDs. Start
with an arbitrary chip’s ID. The probability that the sec-
ond chip’s ID is different is (2k − 1)/2k. Similarly, the
probability that the third IC’s ID is different from the ﬁrst
two is [(2k−1)/2k].[(2k−2)/2k]. The same computation
can be extended through the 2k-th ID. More formally,
2k − (d − 1)
PICID(k, d) =
.
. . . . .
2k − 1
2k − 2
2k
2k
(2k − d)!2dk
2k!
=
2k
(1)
Thus, knowing d, the number of required distinct copies,
and setting a low value for PICID, we would be able to
ﬁnd k that satisﬁes the above equation.
(iv) Overhead of the added STG. The number of states
increases exponentially with adding each new bit, and
thus, the scheme has a very low overhead. Note that,
in modern designs, the control path of the design (i.e.,
FSM) is less than 1% of the total area and hence, adding
a small overhead to the FSM does not signiﬁcantly affect
the total area [7, 10]. In the next section, we will describe
a low-overhead implementation of the proposed method.
(v) Diversity of keys. There is a need to ensure that the
keys are distinct in all parts of their sequences, or there is
a very small shared subsequence between different keys.
This is granted by making multiple paths on the graph
from each of the states to the reset state. We will elabo-
rate more on this issue in the attack resiliency section.
5 Low overhead implementation and ob-
fuscation
In this section, we discuss the implementation details of
the RUB and the BFSM that are the required building
blocks for the active hardware metering approach. We
start by outlining the desired properties of each block,
and then we delve into its implementation details.
5.1 RUB implementation
A critical aspect of the proposed security and protection
mechanisms is the generation of random ID bits. There
are a number of properties that the RUB implementation
has to satisfy, including:
• Low overhead. The added parts must not introduce a
signiﬁcant additional overhead in terms of delay, power
consumption and the area.
• Distribution of IDs and their correlations. To have
the maximal difference between any two ID numbers (the
maximal Hamming distances) the ID bits must be com-
pletely random. Thus, no correlation must be present
among the ID bits on the same die or across various dies.
• Indiscernibility. The IDs must be integrated within the
design, such that they cannot be discerned by studying
the layout of the circuit. For example, the IDs should not
be placed in a memory-like array, where the regularity of
the array and its connections to the FFs could be easily
detected.
• Stability. There is a need to stabilize the IDs over
the lifetime of an IC. This is particularly important since
studies have shown the temporal changes in CMOS pro-
cess variations due to many environmental and aging ef-
296
16th USENIX Security Symposium
USENIX Association
fects including, residual charges, self-heating, negative-
bias temperature instability, and hot electron effects [4].
For implementing the random IDs, we employed the
recent novel approach proposed by Su et al. [28]. They
have designed and tested a new CMOS random ID gen-
eration circuit that relies on digital latch threshold offset
voltages. Using cross coupling of gates, they report sig-
niﬁcant improvement in readout speed and power con-
sumption over the existing designs.
Each ID bit is generated by cross-coupled NOR gates.
The latch sides are pulled low initially. At the high to
low clock transition, the state of each latch is determined
by the threshold voltage mismatch of the transistors. Es-
sentially, the approach relies on the positive feedback in-
herent in the latch conﬁguration to amplify the mismatch.
This design removes the need for comparators, low offset
ampliﬁers, or extra dopants needed in previous random
ID generation methods [9, 20]. The nominal overhead
of the above proposed approach is two NOR gates per
bit. The authors have reported 96% stable IDs using this
method, while using dummy latches to protect the IDs.
Even though we use the random bit architecture de-
scribed above, our layout and implementation of random
bits are very different. To be indiscernible, we do not
place the coupled NOR gates in an array, and instead syn-
thesize them with the rest of the circuit and camouﬂage
them within the sea of gates. based on invariability of the
ID bits for an IC. In Subsection 6.2, we provide a mech-
anism that ensures the occasional errors in ID bits do not
affect the hardware metering approach.
5.2 BFSM implementation
The key design objectives and challenges of the BFSM
are as follows:
• Low overhead. The addition of the states to the orig-
inal FSM must have a low overhead in terms of area,
power, and delay. This is particularly challenging: as
we have computed in Subsection 4.2, even under the as-
sumption of having RUBs with Uniform distribution of
random bits, the number of added states must be expo-
nentially high to ensure a proper operation.
• Traversal path. There must be a path on the BFSM,
from each of the power-up states (except for the black
hole states that we will describe in Section 6.2) to the
reset state.
• States obfuscation. The states must be completely ob-
fuscated and interchanged to camouﬂage the added STG
and the original STG. Another level of obfuscation is dis-
abling the observability of the FFs, so that similar states
on two ICs do not exactly have the same code scanned
out from their FFs.
q5q6q7
q0
q1q2
q4
q3
(a) Ring counter
q5q6q7
q0
q1q2
q4
q3
(b) Reconnecting a state
q5q6q7
q0
q1q2
q4
q3
(c) Adding a few edges
Figure 4: Illustration of steps for building a sparse 3-bit
STG.
• Multiplicity of keys. It is highly desirable to construct
the paths on the added STG in such a way that there are
multiple paths from each power-up state to the reset state.
This will ensure that there are multiple keys for traversal.
Now, if the states are obfuscated such that a similar state
on two ICs has different codes, and each of them gets a
different key for traversal to the original STG, the state
similarities will not be apparent, even to a smart observer.
To achieve a low overhead, we have systematically de-
signed STG blocks that are capable of producing an ex-
ponential number of states with respect to their under-
lying hardware resources. The blocks are designed such
that there are multiple paths from each of the added states
to the reset state and thus, the multiplicity of the keys is
satisﬁed. Our ﬁrst attempt was to synthesize the added
blocks of STG and the original STG together. However,
because the synthesis software automatically optimizes
the interwoven architecture, it most often ended up with
a combined STG that was much larger than the sum of
its components. Thus, we decided to ﬁrst separately syn-
thesize the original and the added STG before we merge
them. Next, we employed obfuscation methods that con-
stantly alter the values of the FFs, even those that are not
used in state assignment in the current STG. As we will
see in attack resiliency section, the introduced obfusca-
tion method has the side-beneﬁt that the adversary cannot
exactly distinguish a similar state on two different ICs.
The added STG can be designed to be low overhead;
there are exponentially many states for each added FF, ig-
noring the overhead of the STG edges. However, in real
situations, the transitions (edges) require logic. Thus, the
added STG is constrained to be sparse to satisfy a low
overhead. We have built this block in a modular way. We
describe one of our modules here and then discuss sys-
tematically interconnecting the modules to have a multi-
bit added STG that has a low overhead.
The ﬁrst module is a 3-bit added STG. In Figure 4, we
show three steps for building this module. We start by
a ring counter as shown in Graph 4(a). Next, we pick
a few states and reconnect them to break the regularity.
A small example is illustrated in Graph 4(b), where the
state q1 is reconnected, such that still there will be a path
from each state to any other state. Finally, we add a few
transitions (edges) to the STG, like the example shown
USENIX Association
16th USENIX Security Symposium
297
in Graph 4(c); here the states q1 and q4 are reconnected,
while the edges { q4 → q1, q7 → q3, q7 → q7, q2 → q2
} are added.
The example is just an illustration. Many other con-
ﬁgurations are possible. The various combinations have
different post-synthesis overhead. To ensure a low-
overhead, we exhaustively searched the synthesized 3-
bit structure with various sparse edge conﬁgurations like
the example above, and selected the conﬁgurations with
the lowest overhead as our 3-bit modules. As it is ap-
parent from the structure, many low-overhead conﬁgu-
rations are possible and we do not need to use the same
module multiple times.
After that, we picked the low overhead modules and
started to add edges to interconnect them, such that the
connectivity property is satisﬁed, and the interconnected
conﬁguration still has low overhead. Furthermore, we
need multiple interconnecting paths that can produce
multiple keys. This is again done via a modular random-
ized edge addition and searching the space of the syn-
thesized circuits to ﬁnd the best multi-bit conﬁgurations.
Note that, the synthesis program performs state-encoding
for the interconnected modules. We have noticed that the
distance of the codes assigned to the states does not have
a correlation with the proximity of the states. Therefore,
even for two RUBs that are only different in 1-bit, typ-
ically the power-up states are not close-by on the added
STG.
In our experiment, we have tested our approach on 12,
15, and 18-bit added STGs. Now, the original STG has
to be glued to the added part. This is done by an ob-
fuscation scheme that ensures the states of FFs that are
associated with the original STG keep pseudorandomly
changing, even when we traverse the states of the added
STGs. Thus, for an observer who studies the values of
the interleaved FFs, the activity study would not yield
an informative conclusion that can help separating the
original and the added states. A simple example for this
obfuscation is depicted in Figure 5. In this ﬁgure, a small
original STG with ﬁve states is presented. The cloud
shown below the original STG indicates the added states.
There are multiple state transitions from the added
states to the original state. However, we only show one
arrow on the plot not to make it more crowded. In this ex-
ample, we use the three don’t cares of the design for ob-
fuscation purposes. There are 3 don’t care states that we
use to form three new dummy states q∗5, q∗6, and q∗7,
illustrated in grey color. The glue logic attaches the in-
puts and the states of the added STG to the dummy STG.
Thus, by carefully designing, one can alter the bits on
the dummy STG by changing the input and the states of
the added STG without touching the original FSM. If the
design does not have sufﬁcient don’t cares, we can add a
couple of FFs for the dummy states and use the same
Figure 5: Obfuscation of the original STG.
Original STG
q0
q1q2
q4
q3
Obfuscation states
q*5
q*6
q*7
Glue Logic
Added STG
paradigm. The important requirement for the dummy