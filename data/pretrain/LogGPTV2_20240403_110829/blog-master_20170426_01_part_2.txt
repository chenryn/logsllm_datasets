 Bitmap Heap Scan on public.test001  (cost=5.08..15.20 rows=10 width=61) (actual time=0.030..0.034 rows=3 loops=1)      
   Output: c1      
   Recheck Cond: (test001.c1 ~~ '你%'::text)      
   Heap Blocks: exact=3      
   Buffers: shared hit=7      
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..5.08 rows=10 width=0) (actual time=0.020..0.020 rows=3 loops=1)      
         Index Cond: (test001.c1 ~~ '你%'::text)      
         Buffers: shared hit=4      
 Planning time: 0.119 ms      
 Execution time: 0.063 ms      
(10 rows)      
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where c1 like '%恧顤';      
                                                      QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------      
 Bitmap Heap Scan on public.test001  (cost=5.08..15.20 rows=10 width=61) (actual time=0.031..0.034 rows=1 loops=1)      
   Output: c1      
   Recheck Cond: (test001.c1 ~~ '%恧顤'::text)      
   Rows Removed by Index Recheck: 1      
   Heap Blocks: exact=2      
   Buffers: shared hit=6      
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..5.08 rows=10 width=0) (actual time=0.020..0.020 rows=2 loops=1)      
         Index Cond: (test001.c1 ~~ '%恧顤'::text)      
         Buffers: shared hit=4      
 Planning time: 0.136 ms      
 Execution time: 0.062 ms      
(11 rows)      
```      
## 二、前后均模糊的优化      
使用pg_trgm插件，支持前后模糊的查询。  
注意：      
如果要让pg_trgm高效支持多字节字符(例如中文)，数据库lc_ctype不能为"C"，只有TOKEN分割正确效果才是OK的。(lc_ctype设置正确，才能够正确的逐一分割多字节字符串中的文字: Character classification (What is a letter? Its upper-case equivalent?))。 
或者:  
```
(*1) You can use full text search for non-alphabetic language by commenting out KEEPONLYALNUM macro variable in contrib/pg_trgm/pg_trgm.h and rebuilding pg_trgm module. But pg_bigm provides faster non-alphabetic search than such a modified pg_trgm.
```
建议输入3个或3个以上字符，否则效果不佳（后面会分析原因）。      
例子      
```      
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where c1 like '%燋邢贺%';      
                                                      QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------      
 Bitmap Heap Scan on public.test001  (cost=5.08..15.20 rows=10 width=61) (actual time=0.038..0.038 rows=1 loops=1)      
   Output: c1      
   Recheck Cond: (test001.c1 ~~ '%燋邢贺%'::text)      
   Heap Blocks: exact=1      
   Buffers: shared hit=5      
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..5.08 rows=10 width=0) (actual time=0.025..0.025 rows=1 loops=1)      
         Index Cond: (test001.c1 ~~ '%燋邢贺%'::text)      
         Buffers: shared hit=4      
 Planning time: 0.170 ms      
 Execution time: 0.076 ms      
(10 rows)      
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where c1 like '%燋邢%';      
                                                              QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------      
 Bitmap Heap Scan on public.test001  (cost=7615669.08..7615679.20 rows=10 width=61) (actual time=147.524..178.232 rows=1 loops=1)      
   Output: c1      
   Recheck Cond: (test001.c1 ~~ '%燋邢%'::text)      
   Rows Removed by Index Recheck: 99999      
   Heap Blocks: exact=1137      
   Buffers: shared hit=14429      
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..7615669.08 rows=10 width=0) (actual time=147.377..147.377 rows=100000 loops=1)      
         Index Cond: (test001.c1 ~~ '%燋邢%'::text)      
         Buffers: shared hit=13292      
 Planning time: 0.133 ms      
 Execution time: 178.265 ms      
(11 rows)      
```      
## 三、正则匹配的优化      
PostgreSQL 正则匹配的语法为 ```字符串 ~ 'pattern'``` 或 ```字符串 ~* 'pattern'```  
https://www.postgresql.org/docs/9.6/static/functions-matching.html  
例子      
```      
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where c1 ~ '12[0-9]{3,9}';      
                                                       QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------      
 Bitmap Heap Scan on public.test001  (cost=65.08..75.20 rows=10 width=61) (actual time=0.196..0.196 rows=0 loops=1)      
   Output: c1      
   Recheck Cond: (test001.c1 ~ '12[0-9]{3,9}'::text)      
   Rows Removed by Index Recheck: 1      
   Heap Blocks: exact=1      
   Buffers: shared hit=50      
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..65.08 rows=10 width=0) (actual time=0.183..0.183 rows=1 loops=1)      
         Index Cond: (test001.c1 ~ '12[0-9]{3,9}'::text)      
         Buffers: shared hit=49      
 Planning time: 0.452 ms      
 Execution time: 0.221 ms      
(11 rows)      
test01=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where c1 ~ '宸朾衔' collate "zh_CN";   
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on public.test001  (cost=6.58..19.42 rows=10 width=61) (actual time=0.061..0.061 rows=1 loops=1)
   Output: c1
   Recheck Cond: (test001.c1 ~ '宸朾衔'::text COLLATE "zh_CN")
   Heap Blocks: exact=1
   Buffers: shared hit=5
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..6.58 rows=10 width=0) (actual time=0.049..0.049 rows=1 loops=1)
         Index Cond: (test001.c1 ~ '宸朾衔'::text COLLATE "zh_CN")
         Buffers: shared hit=4
 Planning time: 0.238 ms
 Execution time: 0.082 ms
(10 rows)
```      
正则匹配索引原理参考contrib/pg_trgm/trgm_regexp.c      
### pg_trgm模糊查询的原理      
首先，pg_trgm将字符串的前端添加2个空格，末尾添加1个空格。      
然后，每连续的3个字符为一个TOKEN，拆开。      
最后，对TOKEN建立GIN倒排索引。      
查看字符串的TOKEN，可以使用如下方法。      
```      
test=# select show_trgm('123');      
        show_trgm              
-------------------------      
 {"  1"," 12",123,"23 "}      
(1 row)      
```      
### pg_trgm前后模糊字符个数要求的原因      
使用pg_trgm时，如果要获得最好的效果，最好满足这些条件。      
1\. 有前缀的模糊查询，例如a%，至少需要提供1个字符。( 搜索的是token='  a' )      
2\. 有后缀的模糊查询，例如%ab，至少需要提供2个字符。( 搜索的是token='ab ' )      
3\. 前后模糊查询，例如%abcd%，至少需要提供3个字符。( 这个使用数组搜索，搜索的是token(s) 包含 {"  a"," ab",abc,bcd,"cd "} )      
原因是什么呢？      
因为pg_trgm生成的TOKEN是三个字符，只有在以上三个条件下，才能匹配到对应的TOKEN。      
```      
test=# select show_trgm('123');      
        show_trgm              
-------------------------      
 {"  1"," 12",123,"23 "}      
(1 row)      
```      
## 四、小于3个输入字符的模糊查询的优化      
当需要前后模糊搜索1个或者2个字符时，pg_trgm无法满足需求，但是我们可以使用表达式GIN索引。      
或者使用另一个插件:   
[《PostgreSQL 模糊查询增强插件pgroonga , pgbigm (含单字、双字、多字、多字节字符) - 支持JSON模糊查询等》](../202003/20200330_01.md)  
使用表达式，将字符串拆成1个单字，两个连续的字符的数组，对数组建立GIN索引即可。      
例子       
```      
test=# create or replace function split001(text) returns text[] as $$      
declare      
  res text[];      
begin      
  select regexp_split_to_array($1,'') into res;      
  for i in 1..length($1)-1 loop      
    res := array_append(res, substring($1,i,2));      
  end loop;      
  return res;      
end;      
$$ language plpgsql strict immutable;      
CREATE FUNCTION      
test=# create index idx_test001_2 on test001 using gin (split001(c1));      
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where split001(c1) @> array['你好'];      
                                                       QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------      
 Bitmap Heap Scan on public.test001  (cost=8.87..550.12 rows=500 width=61) (actual time=0.041..0.041 rows=0 loops=1)      
   Output: c1      
   Recheck Cond: (split001(test001.c1) @> '{你好}'::text[])      
   Buffers: shared hit=4      
   ->  Bitmap Index Scan on idx_test001_2  (cost=0.00..8.75 rows=500 width=0) (actual time=0.039..0.039 rows=0 loops=1)      
         Index Cond: (split001(test001.c1) @> '{你好}'::text[])      
         Buffers: shared hit=4      
 Planning time: 0.104 ms      
 Execution time: 0.068 ms      
(9 rows)      
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where split001(c1) @> array['你'];      
                                                       QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------      
 Bitmap Heap Scan on public.test001  (cost=8.87..550.12 rows=500 width=61) (actual time=0.063..0.183 rows=86 loops=1)      
   Output: c1      
   Recheck Cond: (split001(test001.c1) @> '{你}'::text[])      
   Heap Blocks: exact=80      
   Buffers: shared hit=84      
   ->  Bitmap Index Scan on idx_test001_2  (cost=0.00..8.75 rows=500 width=0) (actual time=0.048..0.048 rows=86 loops=1)      
         Index Cond: (split001(test001.c1) @> '{你}'::text[])      
         Buffers: shared hit=4      
 Planning time: 0.101 ms      
 Execution time: 0.217 ms      
(10 rows)      
test=# select * from test001 where split001(c1) @> array['你'];      
                    c1                          
------------------------------------------      
 殐踨洪冨垓丩贤閚伟垢胸铡崩你萭隡劭芛雫袰      
 靅慨热脸罆淓寘鳗总襎戍𫍵枨陪丼伦柆套你仮      
......      
```      
## 五、相似查询优化      
模糊查询和正则匹配都是找出完全符合条件的记录，还有一种需求是相似查询。      
例如postgresql字符串，输入 p0stgresgl 也能根据相似度匹配到。     
这里同样用到了pg_trgm插件，如果要支持中文，同样有这样的要求：  
如果需要让pg_trgm支持中文相似查询，数据库lc_ctype不能为"C"，只有TOKEN分割正确效果才是OK的。(lc_ctype设置正确，才能够正确的逐一分割多字节字符串中的文字: Character classification (What is a letter? Its upper-case equivalent?))。      
或者:  
```
(*1) You can use full text search for non-alphabetic language by commenting out KEEPONLYALNUM macro variable in contrib/pg_trgm/pg_trgm.h and rebuilding pg_trgm module. But pg_bigm provides faster non-alphabetic search than such a modified pg_trgm.
```
建议输入3个或3个以上字符，否则效果不佳（后面会分析原因）。      
例子      
```        
test=# create index idx_test001_3 on test001 using gist (c1 gist_trgm_ops);      
CREATE INDEX      
test=# explain (analyze,verbose,timing,costs,buffers) SELECT t, c1  '癷磛鹚蠌鳃蠲123鹖埀婎鳊苿奶垨惸溴蔻䇲熝憡' AS dist        
  FROM test001 t        
  ORDER BY dist LIMIT 5;        
                                                                   QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------      
 Limit  (cost=0.28..0.52 rows=5 width=89) (actual time=37.462..37.639 rows=5 loops=1)      
   Output: t.*, ((c1  '癷磛鹚蠌鳃蠲123鹖埀婎鳊苿奶垨惸溴蔻䇲熝憡'::text))      
   Buffers: shared hit=1631      
   ->  Index Scan using idx_test001_3 on public.test001 t  (cost=0.28..4763.28 rows=100000 width=89) (actual time=37.461..37.636 rows=5 loops=1)      
         Output: t.*, (c1  '癷磛鹚蠌鳃蠲123鹖埀婎鳊苿奶垨惸溴蔻䇲熝憡'::text)      
         Order By: (t.c1  '癷磛鹚蠌鳃蠲123鹖埀婎鳊苿奶垨惸溴蔻䇲熝憡'::text)      
         Buffers: shared hit=1631      
 Planning time: 0.089 ms      
 Execution time: 37.668 ms      
(9 rows)      
test=# SELECT t, c1  '癷磛鹚蠌鳃蠲123鹖埀婎鳊苿奶垨惸溴蔻䇲熝憡' AS dist        
  FROM test001 t        
  ORDER BY dist LIMIT 5;        
                     t                      |   dist         
--------------------------------------------+----------      
 (癷磛鹚蠌鳃蠲你鹖埀婎鳊苿奶垨惸溴蔻䇲熝憡) | 0.307692      
 (坆桻悁斾耾瑚豌腏炁悿坞轲杯挜稐睟礓蜮铅湆) | 0.976744      
 (癷鉜餯祂蛙恫蝅瓟顡荫梍蛸欢僷赞敔𣗋侑韧鐹) | 0.976744      
 (癷嚯凫戚蹪熼胘檙佌欔韬挹樷覄惶蹝顼鑜鞖媗) | 0.976744      
 (癷饎瞲馊堒歃峡盾豼担禞嵪豦咢脉馄竨济隘缄) | 0.976744      
(5 rows)      
```      
## 六、小结      
1\. 如果只有前模糊查询需求(字符串 like 'xx%')，使用collate "C"的b-tree索引；当collate不为"C"时，可以使用类型对应的pattern ops(例如text_pattern_ops)建立b-tree索引。      
2\. 如果只有后模糊的查询需求(字符串 like '%abc' 等价于 reverse(字符串) like 'cba%')，使用collate "C"的reverse()表达式的b-tree索引；当collate不为"C"时，可以使用类型对应的pattern ops(例如text_pattern_ops)建立b-tree索引。      
3\. 如果有前后模糊查询需求，并且包含中文，请使用lc_ctype <> "C"的数据库，同时使用pg_trgm插件的gin索引。(只有TOKEN分割正确效果才是OK的。(lc_ctype设置正确，才能够正确的逐一分割多字节字符串中的文字: Character classification (What is a letter? Its upper-case equivalent?))。)        
或者:  
```
(*1) You can use full text search for non-alphabetic language by commenting out KEEPONLYALNUM macro variable in contrib/pg_trgm/pg_trgm.h and rebuilding pg_trgm module. But pg_bigm provides faster non-alphabetic search than such a modified pg_trgm.
```
4\. 如果有前后模糊查询需求，并且不包含中文，请使用pg_trgm插件的gin索引。      
5\. 如果有正则表达式查询需求，请使用pg_trgm插件的gin索引。      
6\. 如果有输入条件少于3个字符的模糊查询需求，可以使用GIN表达式索引，通过数组包含的方式进行搜索，性能一样非常好。      