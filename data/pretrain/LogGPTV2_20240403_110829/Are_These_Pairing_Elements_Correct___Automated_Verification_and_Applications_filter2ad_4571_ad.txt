The source code for AutoPPE comprises about 3K lines of Ocaml code, and the input description of each
pairing based scheme we tested consists of less than 10 lines of code. The ease of converting a given pairing
based scheme into the input format for AutoPPE makes the tool highly practical and useful. We plan to
make AutoPPE publicly available as open source code at https://github.com/JHUISI/auto-tools.
5.2 Encoding ‚ÄúWell-formedness‚Äù of Cryptosystem Parameters as a PPE Testa-
bility Problem
In this subsection, we describe how to look at the public-private parameters of a pairing-based cryptosystem
and then encode this as a PPE problem instance. Typically, the objective is to test that the private
parameters are ‚Äúwell formed‚Äù with respect to the public parameters, where the deÔ¨Ånition of being ‚Äúwell
formed‚Äù depends on the application. Let‚Äôs take identity-based encryption (IBE) as our starting example.
For an IBE scheme IBE = (Setup,KeyGen, Enc, Dec), there are a number of diÔ¨Äerent applications (see the
discussion in Section 1) where one wants an eÔ¨Écient deterministic procedure (based on PPEs) that takes as
input the public parameters pp, an identity id and a purported private key S, and veriÔ¨Åes whether S is a
possible output of the KeyGen algorithm with respect to pp and id. Recall that the critical point of our work
is discovering whether a scheme‚Äôs parameters can be veriÔ¨Åed in this way or not.
We now formulate the problem of determining well-formedness of a pairing-based IBE secret key as an
instance of the PPE Testability problem. Suppose for the given IBE scheme on group structure G, the
Œ±k+1, . . . , gfm
public key is of the form (gf1
),
where Œ±i ‚àà {1, 2, T}‚àÄi, {f1, . . . , fk} are polynomials on variables {u1, u2,. . . , ut} and {fk+1, . . . , fm} are
Œ±m
Œ±1
polynomials on variables {u1, u2, . . . un}. We formulate the corresponding PPE problem as (G, n, m,u =
{u1, u2,. . . , un},f ={f1, f2,. . . , fm},Œ± = {Œ±1,Œ±2,. . . , Œ±m}, Trusted = [1, k],Fixed = [1, t]).
) and the secret key for an identity is of the form (gfk+1
,. . . , gfk
Œ±k
Although this encoding seems quite simple, many IBE constructions deviate from this form in several
ways. We now describe several insights into converting a given IBE scheme into the above form.
(1) When multiple group elements are sampled randomly in a scheme, we Ô¨Årst normalize the scheme by
using a single generator for each group and replacing every random sampling of a group element by gv, where
the g is generator of the group and v is a fresh variable randomly sampled from Zp.
(2) Many constructions such as Boyen-Waters [24] and Waters dual system [47] include identity id or
Hash(id) as part of the private key. In general, constructions which include variables {v1, v2, . . . , vs} in Zp
as part of public/secret key can be reformulated into a PPE problem instance with the following modiÔ¨Åca-
13
Input:AutoPPEOutput:Set of PPEs‚Äúunknown‚ÄùSageMath         PPE Instance-pairing Info-Fixed variables-Unfixed variables-Trusted polys-Untrusted polys-group ids ùõÇ+-Variables in Zp                               New PPE Instance -pairing Info -Fixed‚Äô variables-Unfixed variables-Trusted‚Äô polys-Untrusted polys-group ids ùõÇ‚ÄôQSearchGGAtions. Expand the Trusted set by including fi ¬∑ poly(v1, v2, . . . , vs) with group identitifer Œ±i for every trusted
polynomial fi and every polynomial poly() of degree at most d. We also include the variables {v1, v2, . . . , vs}
as part of the Fixed set. The parameter d can be easily conÔ¨Ågured in the tool. We used d = 1 for our case
studies and observed that it is suÔ¨Écient for all the schemes that we tested.
identities to a group element. In this case, we reformulate the scheme by replacing H(id) with gh
appropriate Œ± ‚àà I and a fresh variable h.
(3) The Boneh-Franklin [22] and Gentry-Silverberg [29] constructions use a hash function H that hashes
Œ± for an
(4) The Boneh-Boyen [20] construction hashes identity into bit string H(id) = h1||h2||h3||¬∑¬∑¬∑||hk, where
k is the length of the bit string. The Waters/Naccache [42] construction hashes identity into blocks of bit
strings H(id) = h1||h2||h3||¬∑¬∑¬∑||hk, where each hi is a bit string block and k is the number of blocks in
H(id). In either case, we Ô¨Årst reformulate the problem by considering each hi as a separate variable in Zp
and including it as a part of the secret key. We then reduce it to the PPE Testability problem as described
earlier. Note that, this method results in a signiÔ¨Åcant blowup in the number of polynomials in the input and
can be tested eÔ¨Éciently only for modest values of n. However, the output PPEs can be manually extended
to higher values of n by identifying a pattern.
Using the above encoding approaches, we tested 8 pairing-based IBE schemes for well-formedness of the
private key and our tool was able to quickly output a testing set for all of the schemes which are testable.
We now look beyond IBE schemes. A signature scheme SIG = (Setup, Sign, Verify) is said to be well-
formed if there exists an eÔ¨Écient deterministic procedure to verify that a given signature is a valid (possible)
signature w.r.t. given message and public key. Similarly, a VeriÔ¨Åable Random Function (VRF) scheme
VRF = (Setup, Eval, Verify) is said to be well-formed if there exists an eÔ¨Écient deterministic method to
test that a given VRF output and proof are valid w.r.t. given veriÔ¨Åcation key and input. Analogously, a
Ciphertext-Policy Attribute Based Encryption (CP-ABE) scheme ABE = (Setup, KeyGen, Enc, Dec) is said to
have well-formed secret key if there exists an eÔ¨Écient deterministic way to check that a given ABE secret key
is valid w.r.t. given public key and attributes. Testing whether a given pairing-based Signature/VRF/CP-
ABE scheme is well-formed can be reformulated as a PPE testability problem analogous to the IBE case
described above.
5.3 A Detailed Example for the Waters05 IBE
Before presenting all our cases studies in Section 5.4, we‚Äôd like to walk the reader through one detailed
example. Let us consider the Waters05 IBE scheme [45] with the Naccache Optimization [42]. We would
like to check if the private key for an identity is PPE Testable given the public parameters and the identity.
As mentioned in the introduction, an IBE scheme with ‚Äúprivate key‚Äù PPE Testability immediately implies
a signature scheme with deterministic veriÔ¨Åcation. Moreover, an IBE scheme with ‚Äúprivate key‚Äù PPE
Testability, and a few other properties, admits an adaptive oblivious transfer scheme [32]. For the sake of
completeness, we recall this popular construction in Appendix A.
The input Ô¨Åle for the tool is presented in Figure 6. For space reasons, we choose to illustrate this
with a toy example of 4 as the identity block size; in practice one would likely use 8 or 32.4 The pairing
information is speciÔ¨Åed using the line maps G1*G1->GT, which denotes a Type I pairing. Alternately, a Type
II pairing could be speciÔ¨Åed by maps G1*G2->GT, isos G1->G2, and a Type III pairing could be speciÔ¨Åed
by maps G1*G2->GT. In order to test the for well-formedness of an IBE private key, the public parameter
elements (Trusted set) along with their group identiÔ¨Åers are speciÔ¨Åed by trusted polys [ ] in G , and
the private key elements for an identity (Trusted set) along with their group identiÔ¨Åers are speciÔ¨Åed using
untrusted polys[ ] in G . Every polynomial should be speciÔ¨Åed along with a unique identiÔ¨Åer which will
be used to output the PPEs in a compact form. The variables sampled in the Setup phase (Fixed set) are
speciÔ¨Åed using fixed vars [ ]. and the variables sampled during the KeyGen phase (Fixed set) are speciÔ¨Åed
using unfixed vars [ ]. The IBE construction hashes identity id into blocks of bit strings, which can be
4SpeciÔ¨Åcally, one would likely choose to support arbitrary-length identity strings by Ô¨Årst hashing them to 256 bits using SHA-
256 and then applying the Naccache optimization [42] of dividing these 256-bit identities into eight 32-bit blocks or thirty-two
8-bit blocks.
14
(*Waters05 IBE scheme with Nacacche optimization for symmetric pairings with number of blocks = 4*)
Input File Example
maps G1 * G1 ->GT.
Ô¨Åxed vars [alpha, beta, u, u1, u2, u3, u4].
unÔ¨Åxed vars [r].
(*Variables corresponding to blocks of H(id)*)
Zp vars [v1, v2, v3, v4, v5].
(*Public key*)
trusted polys [F1 = alpha, F2 = beta, F3 = u, F4 = u1, F5 = u2, F6 = u3, F7 = u4] in G1.
(*Secret key for an identity*)
untrusted polys [F8 = r, F9 = alpha*beta + (u + v1*u1 + v2*u2 + v3*u3 + v4*u4)*r] in G1.
Figure 6:
Input Ô¨Åle for Waters05 IBE scheme with Nacacche Optimization.
treated as elements in Zp for our purposes. Each of the blocks is identiÔ¨Åed by a separate variable, and are
speciÔ¨Åed using Zp vars [ ]. Comments in the input Ô¨Åle can be speciÔ¨Åed using (*....*).
The output of the tool on the above input is presented in Figure 7. The tool Ô¨Årst converts the input
speciÔ¨Åcation to a PPE instance by multiplying every variable speciÔ¨Åed in Zp vars[ ] with every trusted
polynomial and including them in trusted set. This expands the Trusted set from 9 polynomials (including
the identity polynomials internally added by our tool) to 45 polynomials which are printed in the output.
The tool later on applies the QSearch algorithm and outputs the PPEs in terms of the unique identiÔ¨Åers
speciÔ¨Åed for each polynomial. Note that the tool also optimizes the PPEs to minimize the number of pairings
used in the PPE. Further optimization can be achieved using AutoBatch tool [7, 8]5 which can batch many
PPEs into few PPEs.
5.4 Case Studies
We evaluated AutoPPE on various types of pairing-based schemes using a MacBook Pro 2015 laptop with
2.7GHz Intel Core i5 processor and 8GB 1867MHz DDR3 RAM. We present the results along with average
execution times over 10 runs in Table 1. In Appendix B, we include more details about the input and output
of AutoPPE on some test schemes. We observe that the tool outputs a testing set for most of the standard
schemes which are testable within a few seconds.
We note that in our implementation, we simplify checking whether the constant d is relatively prime to
p ‚àí 1 in Rule2, by checking whether d is a small prime (d ‚àà {1, 3, 5, 7, 11}). We made this simpliÔ¨Åcation is
because none of the schemes we encountered include a polynomial with degree d > 2 for an unÔ¨Åxed variable.
In order to mimic the schemes presented in the papers as they are, we tested most of the schemes in the
Type I setting. To demonstrate the Ô¨Çexibility of the tool, we also translated several of these schemes into
the Type III setting6). The Waters dual system IBE [47] is not PPE testable (see Section 1) and our tool
(correctly) output unknown (see the full output in Appendix B). The Boyen-Waters anonymous IBE [24]
and the Dodis VRF [26] appear not to be PPE testable (see Section 5.6) and our tool also output unknown
for these.
The introduction motivated this problem by showing a connection between PPE testability for an IBE
scheme and its suitability for use in blind and/or accountable authority IBE systems. We remark that we
tested several such IBE schemes as part of our case study, including Boneh-Boyen [20], Waters [45] and
Naccache [42] (which were employed in [32] to leverage this property to build OT).
5https://github.com/JHUISI/auto-tools/tree/master/auto batch
6We encoded elements into G1 or G2 using the position they appear in the original papers. There is no guarantee this Type I
to Type III translation maintains the scheme‚Äôs security, but we are only concerned here with deriving test cases and we wanted
to keep our translations easy for the reader to rediscover. For secure pairing translation methods, see [2, 5, 3].
15
PPE Testability Tool‚Äôs Output Execution Time
Type
IBE
IBE
HIBE
IBE
IBE
IBE
IBE
IBE
HIBE
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Scheme
Boneh-Franklin01 ([22])
Gentry-Silverberg02 ([29])
Boneh-Boyen04b ([20]) (|H(id)| = 16)
Boneh-Boyen04a ([19]) (l = 160)
Waters05 ([45]) (|H(id)| = 160)*
Waters05 ([45]) (|H(id)| = 16)
Naccache05 ([42]) (B(H(id)) = 8)
Naccache05 ([42]) (B(H(id)) = 8)
BBG05 ([21]) (l = 8)
Boyen-Waters06 ([24])
Waters09 ([47])
BLS01 ([23])
CL04 Scheme A ([25])
CL04 Scheme B ([25])
CL04 Scheme B ([25])
CL04 Scheme C ([25]) (B(msg) = 8)
Dodis03 ([26]) (|C(x)| = 6)
Dodis03 ([26]) (|C(x)| = 6)
Lys02 ([40]) (|C(x)| = 5)
Lys02 ([40]) (|C(x)| = 5)
Jager15 ([37]) (|H(x)| = 4)
Jager15 ([37]) (|H(x)| = 4)
RW13 ([44]) (a = 60)
RW13 ([44]) (a = 60)
100-DDH
100-DBDH
Pairing
Type I
Type I
Type I
Type I
Type I
Type I
Type I
Type III
Type I
Type I
Type I
Type I
Type I
Type I
Type III
Type I
Type I
Type III
Type I
Type III
Type I
Type III
Type I
Type III
Type I
Type I
Anon-IBE
IBE
see Section 5.6
Not Testable
Signature