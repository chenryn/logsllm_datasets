### AutoPPE: Code and Input Description

The source code for AutoPPE consists of approximately 3,000 lines of OCaml. Each pairing-based scheme we tested requires an input description of fewer than 10 lines of code. The ease with which a given pairing-based scheme can be converted into the input format for AutoPPE makes the tool highly practical and useful. We plan to make AutoPPE publicly available as open-source code at [https://github.com/JHUISI/auto-tools](https://github.com/JHUISI/auto-tools).

### 5.2 Encoding "Well-formedness" of Cryptosystem Parameters as a PPE Testability Problem

In this subsection, we describe how to encode the public and private parameters of a pairing-based cryptosystem as a PPE (Pairing Product Equation) problem instance. The objective is typically to test whether the private parameters are "well-formed" with respect to the public parameters, where the definition of "well-formed" depends on the specific application.

Let's use identity-based encryption (IBE) as our starting example. For an IBE scheme \( \text{IBE} = (\text{Setup}, \text{KeyGen}, \text{Enc}, \text{Dec}) \), there are various applications where one wants an efficient deterministic procedure (based on PPEs) that takes as input the public parameters \( pp \), an identity \( id \), and a purported private key \( S \), and verifies whether \( S \) is a possible output of the KeyGen algorithm with respect to \( pp \) and \( id \). The critical point of our work is to determine whether a schemeâ€™s parameters can be verified in this way.

We now formulate the problem of determining the well-formedness of a pairing-based IBE secret key as an instance of the PPE Testability problem. Suppose for a given IBE scheme on group structure \( G \), the public key is of the form \( (g^{f_1^{\alpha_1}}, g^{f_2^{\alpha_2}}, \ldots, g^{f_m^{\alpha_m}}) \), where \( \alpha_i \in \{1, 2, T\} \) for all \( i \), \( \{f_1, \ldots, f_k\} \) are polynomials on variables \( \{u_1, u_2, \ldots, u_t\} \), and \( \{f_{k+1}, \ldots, f_m\} \) are polynomials on variables \( \{u_1, u_2, \ldots, u_n\} \). The corresponding PPE problem is formulated as \( (G, n, m, u = \{u_1, u_2, \ldots, u_n\}, f = \{f_1, f_2, \ldots, f_m\}, \alpha = \{\alpha_1, \alpha_2, \ldots, \alpha_m\}, \text{Trusted} = [1, k], \text{Fixed} = [1, t]) \).

Although this encoding seems simple, many IBE constructions deviate from this form. We now describe several insights into converting a given IBE scheme into the above form:

1. **Normalization of Random Sampling**: When multiple group elements are sampled randomly in a scheme, we first normalize the scheme by using a single generator for each group and replacing every random sampling of a group element by \( g^v \), where \( g \) is the generator of the group and \( v \) is a fresh variable randomly sampled from \( \mathbb{Z}_p \).

2. **Inclusion of Identity or Hashed Identity**: Many constructions, such as Boyen-Waters [24] and Waters dual system [47], include the identity \( id \) or \( \text{Hash}(id) \) as part of the private key. In general, constructions that include variables \( \{v_1, v_2, \ldots, v_s\} \) in \( \mathbb{Z}_p \) as part of the public or secret key can be reformulated into a PPE problem instance. Expand the Trusted set by including \( f_i \cdot \text{poly}(v_1, v_2, \ldots, v_s) \) with group identifier \( \alpha_i \) for every trusted polynomial \( f_i \) and every polynomial \( \text{poly}() \) of degree at most \( d \). We also include the variables \( \{v_1, v_2, \ldots, v_s\} \) as part of the Fixed set. The parameter \( d \) can be easily configured in the tool. We used \( d = 1 \) for our case studies and observed that it is sufficient for all the schemes we tested.

3. **Hash Function Usage**: The Boneh-Franklin [22] and Gentry-Silverberg [29] constructions use a hash function \( H \) that hashes identities to a group element. In this case, we reformulate the scheme by replacing \( H(id) \) with \( g^h \) for an appropriate \( \alpha \in I \) and a fresh variable \( h \).

4. **Bit String Hashing**: The Boneh-Boyen [20] construction hashes identity into a bit string \( H(id) = h_1 || h_2 || h_3 || \cdots || h_k \), where \( k \) is the length of the bit string. The Waters/Naccache [42] construction hashes identity into blocks of bit strings \( H(id) = h_1 || h_2 || h_3 || \cdots || h_k \), where each \( h_i \) is a bit string block and \( k \) is the number of blocks in \( H(id) \). In either case, we first reformulate the problem by considering each \( h_i \) as a separate variable in \( \mathbb{Z}_p \) and including it as part of the secret key. We then reduce it to the PPE Testability problem as described earlier. Note that this method results in a significant increase in the number of polynomials in the input and can be tested efficiently only for modest values of \( n \). However, the output PPEs can be manually extended to higher values of \( n \) by identifying a pattern.

Using these encoding approaches, we tested 8 pairing-based IBE schemes for the well-formedness of the private key, and our tool was able to quickly output a testing set for all the schemes that are testable.

### Beyond IBE Schemes

A signature scheme \( \text{SIG} = (\text{Setup}, \text{Sign}, \text{Verify}) \) is said to be well-formed if there exists an efficient deterministic procedure to verify that a given signature is a valid (possible) signature with respect to a given message and public key. Similarly, a Verifiable Random Function (VRF) scheme \( \text{VRF} = (\text{Setup}, \text{Eval}, \text{Verify}) \) is well-formed if there exists an efficient deterministic method to test that a given VRF output and proof are valid with respect to a given verification key and input. Analogously, a Ciphertext-Policy Attribute-Based Encryption (CP-ABE) scheme \( \text{ABE} = (\text{Setup}, \text{KeyGen}, \text{Enc}, \text{Dec}) \) has a well-formed secret key if there exists an efficient deterministic way to check that a given ABE secret key is valid with respect to a given public key and attributes. Testing whether a given pairing-based Signature/VRF/CP-ABE scheme is well-formed can be reformulated as a PPE testability problem, analogous to the IBE case described above.

### 5.3 A Detailed Example: Waters05 IBE

Before presenting all our case studies in Section 5.4, we walk the reader through a detailed example. Let us consider the Waters05 IBE scheme [45] with the Naccache Optimization [42]. We want to check if the private key for an identity is PPE Testable given the public parameters and the identity.

As mentioned in the introduction, an IBE scheme with "private key" PPE Testability immediately implies a signature scheme with deterministic verification. Moreover, an IBE scheme with "private key" PPE Testability, along with a few other properties, admits an adaptive oblivious transfer scheme [32]. For completeness, we recall this popular construction in Appendix A.

The input file for the tool is presented in Figure 6. For space reasons, we illustrate this with a toy example of 4 as the identity block size; in practice, one would likely use 8 or 32. The pairing information is specified using the line `maps G1*G1->GT`, which denotes a Type I pairing. Alternatively, a Type II pairing could be specified by `maps G1*G2->GT, isos G1->G2`, and a Type III pairing could be specified by `maps G1*G2->GT`.

To test the well-formedness of an IBE private key, the public parameter elements (Trusted set) along with their group identifiers are specified by `trusted polys [ ] in G`, and the private key elements for an identity (Trusted set) along with their group identifiers are specified using `untrusted polys[ ] in G`. Every polynomial should be specified along with a unique identifier, which will be used to output the PPEs in a compact form. The variables sampled in the Setup phase (Fixed set) are specified using `fixed vars [ ]`, and the variables sampled during the KeyGen phase (Fixed set) are specified using `unfixed vars [ ]`. The IBE construction hashes identity \( id \) into blocks of bit strings, which can be treated as elements in \( \mathbb{Z}_p \) for our purposes. Each of the blocks is identified by a separate variable and specified using `Zp vars [ ]`. Comments in the input file can be specified using `(*...*)`.

**Figure 6: Input File for Waters05 IBE Scheme with Naccache Optimization**

```plaintext
(*Waters05 IBE scheme with Naccache optimization for symmetric pairings with number of blocks = 4*)
maps G1 * G1 ->GT.
fixed vars [alpha, beta, u, u1, u2, u3, u4].
unfixed vars [r].
(*Variables corresponding to blocks of H(id)*)
Zp vars [v1, v2, v3, v4, v5].
(*Public key*)
trusted polys [F1 = alpha, F2 = beta, F3 = u, F4 = u1, F5 = u2, F6 = u3, F7 = u4] in G1.
(*Secret key for an identity*)
untrusted polys [F8 = r, F9 = alpha*beta + (u + v1*u1 + v2*u2 + v3*u3 + v4*u4)*r] in G1.
```

The output of the tool on the above input is presented in Figure 7. The tool first converts the input specification to a PPE instance by multiplying every variable specified in `Zp vars[ ]` with every trusted polynomial and including them in the Trusted set. This expands the Trusted set from 9 polynomials (including the identity polynomials internally added by our tool) to 45 polynomials, which are printed in the output. The tool later applies the QSearch algorithm and outputs the PPEs in terms of the unique identifiers specified for each polynomial. Note that the tool also optimizes the PPEs to minimize the number of pairings used in the PPE. Further optimization can be achieved using the AutoBatch tool [7, 8], which can batch many PPEs into a few PPEs.

### 5.4 Case Studies

We evaluated AutoPPE on various types of pairing-based schemes using a MacBook Pro 2015 laptop with a 2.7GHz Intel Core i5 processor and 8GB 1867MHz DDR3 RAM. We present the results along with average execution times over 10 runs in Table 1. In Appendix B, we include more details about the input and output of AutoPPE on some test schemes. We observe that the tool outputs a testing set for most of the standard schemes that are testable within a few seconds.

In our implementation, we simplify checking whether the constant \( d \) is relatively prime to \( p - 1 \) in Rule2 by checking whether \( d \) is a small prime (e.g., \( d \in \{1, 3, 5, 7, 11\} \)). We made this simplification because none of the schemes we encountered include a polynomial with degree \( d > 2 \) for an unfixed variable.

To mimic the schemes presented in the papers, we tested most of the schemes in the Type I setting. To demonstrate the flexibility of the tool, we also translated several of these schemes into the Type III setting. The Waters dual system IBE [47] is not PPE testable (see Section 1), and our tool correctly output "unknown" (see the full output in Appendix B). The Boyen-Waters anonymous IBE [24] and the Dodis VRF [26] appear not to be PPE testable (see Section 5.6), and our tool also output "unknown" for these.

The introduction motivated this problem by showing a connection between PPE testability for an IBE scheme and its suitability for use in blind and/or accountable authority IBE systems. We remark that we tested several such IBE schemes as part of our case study, including Boneh-Boyen [20], Waters [45], and Naccache [42] (which were employed in [32] to leverage this property to build OT).

**Table 1: PPE Testability Tool's Output and Execution Time**

| Type   | Scheme                                   | PPE Testability | Pairing Type | Execution Time (s) |
|--------|------------------------------------------|-----------------|--------------|--------------------|
| IBE    | Boneh-Franklin01 ([22])                  | Testable        | Type I       |                    |
| IBE    | Gentry-Silverberg02 ([29])               | Testable        | Type I       |                    |
| IBE    | Boneh-Boyen04b ([20]) (|H(id)| = 16)     | Testable        | Type I       |                    |
| IBE    | Boneh-Boyen04a ([19]) (l = 160)          | Testable        | Type I       |                    |
| IBE    | Waters05 ([45]) (|H(id)| = 160)*         | Testable        | Type I       |                    |
| IBE    | Waters05 ([45]) (|H(id)| = 16)           | Testable        | Type I       |                    |
| IBE    | Naccache05 ([42]) (B(H(id)) = 8)         | Testable        | Type I       |                    |
| IBE    | Naccache05 ([42]) (B(H(id)) = 8)         | Testable        | Type III     |                    |
| HIBE   | BBG05 ([21]) (l = 8)                     | Testable        | Type I       |                    |
| Anon-IBE | Boyen-Waters06 ([24])                 | Not Testable    | Type I       |                    |
| IBE    | Waters09 ([47])                          | Not Testable    | Type I       |                    |
| Signature | BLS01 ([23])                           | Testable        | Type I       |                    |
| CL04 Scheme A ([25])                       | Testable        | Type I       |                    |
| CL04 Scheme B ([25])                       | Testable        | Type I       |                    |
| CL04 Scheme B ([25])                       | Testable        | Type III     |                    |
| CL04 Scheme C ([25]) (B(msg) = 8)          | Testable        | Type I       |                    |
| VRF    | Dodis03 ([26]) (|C(x)| = 6)             | Not Testable    | Type I       |                    |
| VRF    | Dodis03 ([26]) (|C(x)| = 6)             | Not Testable    | Type III     |                    |
| Lys02 ([40]) (|C(x)| = 5)                   | Testable        | Type I       |                    |
| Lys02 ([40]) (|C(x)| = 5)                   | Testable        | Type III     |                    |
| Jager15 ([37]) (|H(x)| = 4)                | Testable        | Type I       |                    |
| Jager15 ([37]) (|H(x)| = 4)                | Testable        | Type III     |                    |
| RW13 ([44]) (a = 60)                       | Testable        | Type I       |                    |
| RW13 ([44]) (a = 60)                       | Testable        | Type III     |                    |
| 100-DDH                                  | Testable        | Type I       |                    |
| 100-DBDH                                 | Testable        | Type I       |                    |

For more details about the input and output of AutoPPE on some test schemes, see Appendix B.