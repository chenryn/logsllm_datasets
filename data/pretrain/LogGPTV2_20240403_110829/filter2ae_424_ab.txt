        {
          while ( !(*(_BYTE *)pOs2FeaBody & 0x7F) )
          {
            v12 = (int)pNtFea;
            v5 = pOs2FeaBody;
            pNtFea = (NTFEA *)SrvOs2FeaToNt(pNtFea, pOs2FeaBody);
            pOs2FeaBody += *(_BYTE *)(pOs2FeaBody + 1) + *(_WORD *)(pOs2FeaBody + 2) + 5;
            //
            // 由于SrvOs2FeaListSizeToNt将pOs2Fea的Length改大了。
            // 而且变得大了不少，所以这里的判读就没有什么意义了。最终导致越界的产生。
            //
            if ( pOs2FeaBody > v14 )
            {
              v10 = v12;
              goto LABEL_13;
            }
          }
          *a4 = pOs2FeaBody - pOs2Fea;
          v11 = 0xC000000D;
        }
        SrvFreeNonPagedPool(*pArgNtFea);
        return v11;
      }
      if ( BYTE1(WPP_GLOBAL_Control->Flags) >= 2u && WPP_GLOBAL_Control->Characteristics & 1 && KeGetCurrentIrql() 
    signed int RtlULongAdd(unsigned int a1, int a2, unsigned int *a3)
    {
        unsigned int v3; // edx@1
        signed int result; // eax@2
        v3 = a1 + a2;
        if (v3 = v4
                || (v5 = *(BYTE *)(pBody + 1) + *(WORD *)(pBody + 2),
                    v8 = *(BYTE *)(pBody + 1) + *(WORD *)(pBody + 2),
                    v5 + pBody + 5 > v4))
            {
                *(WORD *)pOs2Fea = pBody - pOs2Fea;
                return v1;
            }
            if (RtlULongAdd(v1, (v5 + 0xC) & 0xFFFFFFFC, &v9)  (gpBuffer + guSize)){
            __debugbreak();
        }
        memcpy(pNtBodyStart, (const void *)(pOs2FeaBody + 5 + *(BYTE *)(pNtFea + 5)), *(WORD *)(pNtFea + 6));
        result = (PUCHAR)((ULONG_PTR)&pNtBodyStart[*(WORD *)(pNtFea + 6) + 3] & 0xFFFFFFFC);
        *(DWORD *)pNtFea = result - pNtFea;
        static int j = 0;
        printf("j=%d\n", j++);
        return result;
    }
    int main()
    {
        FILE* pFile = fopen("1.bin", "r+b");
        fseek(pFile, 0, SEEK_END);
        ULONG uSize = (ULONG)ftell(pFile);
        fseek(pFile, 0, SEEK_SET);
        PUCHAR pOs2Fea = (PUCHAR)malloc(uSize);
        fread(pOs2Fea, 1, uSize, pFile);
        fclose(pFile);
        ULONG uFixSize = SrvOs2FeaListSizeToNt(pOs2Fea);
        PUCHAR pOs2FeaBody;
        PUCHAR  pNtFea = (PUCHAR)malloc(uFixSize);
        PUCHAR v10;
        PUCHAR v14;
        PUCHAR v12;
        PUCHAR v5;
        LONG v11;
        PUCHAR  pNtFeaEnd = pNtFea + uFixSize;
        gpBuffer = pNtFea;
        guSize = uFixSize;
        if (pNtFea)
        {
            pOs2FeaBody = pOs2Fea + 4;
            v10 = pNtFea;
            v14 = pOs2Fea + *(DWORD *)pOs2Fea - 5;
            if (pOs2Fea + 4 > v14)
            {
            LABEL_13:
                if (pOs2FeaBody == pOs2Fea + *(DWORD *)pOs2Fea)
                {
                    *(DWORD *)v10 = 0;
                    return 0;
                }
                v11 = 0xC0000001;