unsigned int64 0xfffff803`1213e030
lkd> ln 0xfffff803`1213e030
(fffff803`1213e030)   nt!NtMapUserPhysicalPagesScatter
2. 
You can see the number of stack-based 4-byte arguments
this system call takes by taking the 4-bit argument count:
Click here to view code image
lkd> dx (((int*)&(nt!KiServiceTable))[3] & 0xF)
(((int*)&(nt!KiServiceTable))[3] & 0xF) : 0
3. 
Note that this doesn’t mean the system call has no
arguments. Because this is an x64 system, the call could
take anywhere between 0 and 4 arguments, all of which are
in registers (RCX, RDX, R8, and R9).
4. 
You could also use the debugger data model to create a
LINQ predicate using projection, dumping the entire table,
leveraging the fact that the KiServiceLimit variable
corresponds to the same limit field in the service descriptor
table (just like W32pServiceLimit for the Win32k.sys entries
in the shadow descriptor table). The output would look like
this:
Click here to view code image
lkd> dx @$table = &nt!KiServiceTable
@$table = &nt!KiServiceTable : 0xfffff8047ee24800 
[Type: void *]
lkd> dx (((int(*)[90000])&(nt!KiServiceTable)))-
>Take(*(int*)&nt!KiServiceLimit)->
     Select(x => (x >> 4) + @$table)
(((int(*)[90000])&(nt!KiServiceTable)))->Take(*
(int*)&nt!KiServiceLimit)->Select
     (x => (x >> 4) + @$table)
   [0]              : 0xfffff8047eb081d0 [Type: void 
*]
   [1]              : 0xfffff8047eb10940 [Type: void 
*]
   [2]              : 0xfffff8047f0b7800 [Type: void 
*]
   [3]              : 0xfffff8047f299f50 [Type: void 
*]
   [4]              : 0xfffff8047f012450 [Type: void 
*]
   [5]              : 0xfffff8047ebc5cc0 [Type: void 
*]
   [6]              : 0xfffff8047f003b20 [Type: void 
*]
5. 
You could use a more complex version of this command
that would also allow you to convert the pointers into their
symbolic forms, essentially reimplementing the dps
command that works on x86 Windows:
Click here to view code image
lkd> dx @$symPrint = (x => 
Debugger.Utility.Control.ExecuteCommand(".printf \"%y\\n\"," 
+
     ((unsigned __int64)x).ToDisplayString("x")).First())
@$symPrint = (x => 
Debugger.Utility.Control.ExecuteCommand(".printf \"%y\\n\"," 
+
((unsigned __int64)x).ToDisplayString("x")).First())
lkd> dx (((int(*)[90000])&(nt!KiServiceTable)))->Take(*
(int*)&nt!KiServiceLimit)->Select
     (x => @$symPrint((x >> 4) + @$table))
(((int(*)[90000])&(nt!KiServiceTable)))->Take(*
(int*)&nt!KiServiceLimit)->Select(x => @$symPrint((x >> 4) + 
@$table))
    [0]              : nt!NtAccessCheck (fffff804`7eb081d0)
    [1]              : nt!NtWorkerFactoryWorkerReady 
(fffff804`7eb10940)
    [2]              : nt!NtAcceptConnectPort 
(fffff804`7f0b7800)
    [3]              : nt!NtMapUserPhysicalPagesScatter 
(fffff804`7f299f50)
    [4]              : nt!NtWaitForSingleObject 
(fffff804`7f012450)
    [5]              : nt!NtCallbackReturn 
(fffff804`7ebc5cc0)
6. 
Finally, as long as you’re only interested in the kernel’s
service table and not the Win32k.sys entries, you can also
use the !chksvctbl -v command in the debugger, whose
output will include all of this data while also checking for
inline hooks that a rootkit may have attached:
Click here to view code image
lkd> !chksvctbl -v
#    ServiceTableEntry           DecodedEntryTarget(Address)               
CompactedOffset
============================================================
==============================
0    0xfffff8047ee24800                   
nt!NtAccessCheck(0xfffff8047eb081d0) 0n-52191996
1    0xfffff8047ee24804      
nt!NtWorkerFactoryWorkerReady(0xfffff8047eb10940) 0n-
51637248
2    0xfffff8047ee24808             
nt!NtAcceptConnectPort(0xfffff8047f0b7800) 0n43188226
3    0xfffff8047ee2480c   
nt!NtMapUserPhysicalPagesScatter(0xfffff8047f299f50) 
0n74806528
4    0xfffff8047ee24810           
nt!NtWaitForSingleObject(0xfffff8047f012450) 0n32359680
EXPERIMENT: Viewing system service activity
You can monitor system service activity by watching the System
Calls/Sec performance counter in the System object. Run the
Performance Monitor, click Performance Monitor under
Monitoring Tools, and click the Add button to add a counter to the
chart. Select the System object, select the System Calls/Sec
counter, and then click the Add button to add the counter to the
chart.
You’ll probably want to change the maximum to a much higher
value, as it’s normal for a system to have hundreds of thousands of
system calls a second, especially the more processors the system
has. The figure below shows what this data looked like on the
author’s computer.
WoW64 (Windows-on-Windows)
WoW64 (Win32 emulation on 64-bit Windows) refers to the software that
permits the execution of 32-bit applications on 64-bit platforms (which can
also belong to a different architecture). WoW64 was originally a research
project for running x86 code in old alpha and MIPS version of Windows NT
3.51. It has drastically evolved since then (that was around the year 1995).
When Microsoft released Windows XP 64-bit edition in 2001, WoW64 was
included in the OS for running old x86 32-bit applications in the new 64-bit
OS. In modern Windows releases, WoW64 has been expanded to support
also running ARM32 applications and x86 applications on ARM64 systems.
WoW64 core is implemented as a set of user-mode DLLs, with some
support from the kernel for creating the target’s architecture versions of what
would normally only be 64-bit native data structures, such as the process
environment block (PEB) and thread environment block (TEB). Changing
WoW64 contexts through Get/SetThreadContext is also implemented by the
kernel. Here are the core user-mode DLLs responsible for WoW64:
■    Wow64.dll Implements the WoW64 core in user mode. Creates the
thin software layer that acts as a kind of intermediary kernel for 32-bit
applications and starts the simulation. Handles CPU context state
changes and base system calls exported by Ntoskrnl.exe. It also
implements file-system redirection and registry redirection.
■    Wow64win.dll Implements thunking (conversion) for GUI system
calls exported by Win32k.sys. Both Wow64win.dll and Wow64.dll
include thunking code, which converts a calling convention from an
architecture to another one.
Some other modules are architecture-specific and are used for translating
machine code that belongs to a different architecture. In some cases (like for
ARM64) the machine code needs to be emulated or jitted. In this book, we
use the term jitting to refer to the just-in-time compilation technique that
involves compilation of small code blocks (called compilation units) at
runtime instead of emulating and executing one instruction at a time.
Here are the DLLs that are responsible in translating, emulating, or jitting
the machine code, allowing it to be run by the target operating system:
■    Wow64cpu.dll Implements the CPU simulator for running x86 32-bit
code in AMD64 operating systems. Manages the 32-bit CPU context
of each running thread inside WoW64 and provides processor
architecture-specific support for switching CPU mode from 32-bit to
64-bit and vice versa.
■    Wowarmhw.dll Implements the CPU simulator for running ARM32
(AArch32) applications on ARM64 systems. It represents the ARM64
equivalent of the Wow64cpu.dll used in x86 systems.
■    Xtajit.dll Implements the CPU emulator for running x86 32-bit
applications on ARM64 systems. Includes a full x86 emulator, a jitter
(code compiler), and the communication protocol between the jitter
and the XTA cache server. The jitter can create compilation blocks
including ARM64 code translated from the x86 image. Those blocks
are stored in a local cache.
The relationship of the WoW64 user-mode libraries (together with other
core WoW64 components) is shown in Figure 8-28.
Figure 8-28 The WoW64 architecture.
 Note
Older Windows versions designed to run in Itanium machines included a
full x86 emulator integrated in the WoW64 layer called Wowia32x.dll.
Itanium processors were not able to natively execute x86 32-bit
instructions in an efficient manner, so an emulator was needed. The
Itanium architecture was officially discontinued in January 2019.
A newer Insider release version of Windows also supports executing 64-
bit x86 code on ARM64 systems. A new jitter has been designed for that
reason. However emulating AMD64 code in ARM systems is not
performed through WoW64. Describing the architecture of the AMD64
emulator is outside the scope of this release of this book.
The WoW64 core
As introduced in the previous section, the WoW64 core is platform
independent: It creates a software layer for managing the execution of 32-bit
code in 64-bit operating systems. The actual translation is performed by
another component called Simulator (also known as Binary Translator),
which is platform specific. In this section, we will discuss the role of the
WoW64 core and how it interoperates with the Simulator. While the core of
WoW64 is almost entirely implemented in user mode (in the Wow64.dll
library), small parts of it reside in the NT kernel.
WoW64 core in the NT kernel
During system startup (phase 1), the I/O manager invokes the
PsLocateSystemDlls routine, which maps all the system DLLs supported by
the system (and stores their base addresses in a global array) in the System
process user address space. This also includes WoW64 versions of Ntdll, as
described by Table 8-13. Phase 2 of the process manager (PS) startup
resolves some entry points of those DLLs, which are stored in internal kernel
variables. One of the exports, LdrSystemDllInitBlock, is used to transfer
WoW64 information and function pointers to new WoW64 processes.
Table 8-13 Different Ntdll version list
Path
Inte
rnal 
Na
me
Description
c:\windows
\system32\
ntdll.dll
ntdll
.dll
The system Ntdll mapped in every user process 
(except for minimal processes). This is the only 
version marked as required.
c:\windows
\SysWow6
4\ntdll.dll
ntdll
32.d
ll
32-bit x86 Ntdll mapped in WoW64 processes 
running in 64-bit x86 host systems.
c:\windows
\SysArm32
\ntdll.dll
ntdll
32.d
ll
32-bit ARM Ntdll mapped in WoW64 processes 
running in 64-bit ARM host systems.
c:\windows
\SyChpe32\
ntdll.dll
ntdll
wow
.dll
32-bit x86 CHPE Ntdll mapped in WoW64 
processes running in 64-bit ARM host systems.
When a process is initially created, the kernel determines whether it would
run under WoW64 using an algorithm that analyzes the main process
executable PE image and checks whether the correct Ntdll version is mapped
in the system. In case the system has determined that the process is WoW64,
when the kernel initializes its address space, it maps both the native Ntdll and
the correct WoW64 version. As explained in Chapter 3 of Part 1, each
nonminimal process has a PEB data structure that is accessible from user
mode. For WoW64 processes, the kernel also allocates the 32-bit version of
the PEB and stores a pointer to it in a small data structure
(EWoW64PROCESS) linked to the main EPROCESS representing the new
process. The kernel then fills the data structure described by the 32-bit
version of the LdrSystemDllInitBlock symbol, including pointers of Wow64
Ntdll exports.
When a thread is allocated for the process, the kernel goes through a
similar process: along with the thread initial user stack (its initial size is
specified in the PE header of the main image), another stack is allocated for
executing 32-bit code. The new stack is called the thread’s WoW64 stack.
When the thread’s TEB is built, the kernel will allocate enough memory to
store both the 64-bit TEB, followed by a 32-bit TEB.
Furthermore, a small data structure (called WoW64 CPU Area
Information) is allocated at the base of the 64-bit stack. The latter is
composed of the target images machine identifier, a platform-dependent 32-
bit CPU context (X86_NT5_CONTEXT or ARM_CONTEXT data structures,
depending on the target architecture), and a pointer of the per-thread WoW64
CPU shared data, which can be used by the Simulator. A pointer to this small
data structure is stored also in the thread’s TLS slot 1 for fast referencing by
the binary translator. Figure 8-29 shows the final configuration of a WoW64
process that contains an initial single thread.
Figure 8-29 Internal configuration of a WoW64 process with only a single
thread.
User-mode WoW64 core
Aside from the differences described in the previous section, the birth of the
process and its initial thread happen in the same way as for non-WoW64
processes, until the main thread starts its execution by invoking the loader
initialization function, LdrpInitialize, in the native version of Ntdll. When the
loader detects that the thread is the first to be executed in the context of the
new process, it invokes the process initialization routine,
LdrpInitializeProcess, which, along with a lot of different things (see the
“Early process initialization” section of Chapter 3 in Part 1 for further
details), determines whether the process is a WoW64 one, based on the
presence of the 32-bit TEB (located after the native TEB and linked to it). In
case the check succeeded, the native Ntdll sets the internal UseWoW64 global
variable to 1, builds the path of the WoW64 core library, wow64.dll, and
maps it above the 4 GB virtual address space limit (in that way it can’t
interfere with the simulated 32-bit address space of the process.) It then gets
the address of some WoW64 functions that deal with process/thread
suspension and APC and exception dispatching and stores them in some of its
internal variables.
When the process initialization routine ends, the Windows loader transfers
the execution to the WoW64 Core via the exported Wow64LdrpInitialize
routine, which will never return. From now on, each new thread starts
through that entry point (instead of the classical RtlUserThreadStart). The
WoW64 core obtains a pointer to the CPU WoW64 area stored by the kernel
at the TLS slot 1. In case the thread is the first of the process, it invokes the
WoW64 process initialization routine, which performs the following steps:
1. 
Tries to load the WoW64 Thunk Logging DLL (wow64log.dll). The
Dll is used for logging WoW64 calls and is not included in
commercial Windows releases, so it is simply skipped.
2. 
Looks up the Ntdll32 base address and function pointers thanks to the
LdrSystemDllInitBlock filled by the NT kernel.
3. 
Initializes the files system and registry redirection. File system and
registry redirection are implemented in the Syscall layer of WoW64
core, which intercepts 32-bit registry and files system requests and
translates their path before invoking the native system calls.
4. 
Initializes the WoW64 service tables, which contains pointers to
system services belonging to the NT kernel and Win32k GUI
subsystem (similar to the standard kernel system services), but also
Console and NLS service call (both WoW64 system service calls and
redirection are covered later in this chapter.)
5. 
Fills the 32-bit version of the process’s PEB allocated by the NT
kernel and loads the correct CPU simulator, based on the process
main image’s architecture. The system queries the “default” registry
value of the HKLM\SOFTWARE\Microsoft\Wow64\ key
(where  can be x86 or arm, depending on the target
architecture), which contains the simulator’s main DLL name. The
simulator is then loaded and mapped in the process’s address space.
Some of its exported functions are resolved and stored in an internal
array called BtFuncs. The array is the key that links the platform-
specific binary translator to the WoW64 subsystem: WoW64 invokes
simulator’s functions only through it. The BtCpuProcessInit function,
for example, represents the simulator’s process initialization routine.
6. 
The thunking cross-process mechanism is initialized by allocating and
mapping a 16 KB shared section. A synthesized work item is posted
on the section when a WoW64 process calls an API targeting another
32-bit process (this operation propagates thunk operations across
different processes).
7. 
The WoW64 layer informs the simulator (by invoking the exported
BtCpuNotifyMapViewOfSection) that the main module, and the 32-bit
version of Ntdll have been mapped in the address space.
8. 
Finally, the WoW64 core stores a pointer to the 32-bit system call
dispatcher into the Wow64Transition exported variable of the 32-bit
version of Ntdll. This allows the system call dispatcher to work.
When the process initialization routine ends, the thread is ready to start the
CPU simulation. It invokes the Simulator’s thread initialization function and
prepares the new 32-bit context, translating the 64-bit one initially filled by
the NT kernel. Finally, based on the new context, it prepares the 32-bit stack
for executing the 32-bit version of the LdrInitializeThunk function. The
simulation is started via the simulator’s BTCpuSimulate exported function,
which will never return to the caller (unless a critical error in the simulator
happens).
File system redirection
To maintain application compatibility and to reduce the effort of porting
applications from Win32 to 64-bit Windows, system directory names were
kept the same. Therefore, the \Windows\System32 folder contains native 64-
bit images. WoW64, as it intercepts all the system calls, translates all the path
related APIs and replaces various system paths with the WoW64 equivalent
(which depends on the target process’s architecture), as listed in Table 8-14.
The table also shows paths redirected through the use of system environment
variables. (For example, the %PROGRAMFILES% variable is also set to
\Program Files (x86) for 32-bit applications, whereas it is set to the \Program
Files folder for 64-bit applications.)
Table 8-14 WoW64 redirected paths
Path
Archi
tectur
e
Redirected Location
c:\windows\sy
stem32
X86 
on 
AMD