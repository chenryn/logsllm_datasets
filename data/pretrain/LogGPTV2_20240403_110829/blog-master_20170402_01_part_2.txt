postgres=# insert into u values (1, 'e');    
INSERT 0 1    
postgres=# insert into u values (2, E'\u00f0');    
INSERT 0 1    
postgres=# select * from u;    
 id | info     
----+------    
  1 | e    
  2 | e    
(2 rows)    
```    
目前只有UTF8字符集允许输入大于007f的UNICODE，其他字符集只能输入ascii范围的unicode.    
```    
postgres=# \l    
                                      List of databases    
        Name        |  Owner   | Encoding  |  Collate   |   Ctype    |   Access privileges       
--------------------+----------+-----------+------------+------------+-----------------------    
 contrib_regression | postgres | UTF8      | C          | C          |     
 db                 | postgres | SQL_ASCII | C          | C          |     
 db1                | postgres | EUC_CN    | C          | C          |     
 postgres           | postgres | UTF8      | C          | C          |     
 template0          | postgres | UTF8      | C          | C          | =c/postgres          +    
                    |          |           |            |            | postgres=CTc/postgres    
 template1          | postgres | UTF8      | C          | C          | =c/postgres          +    
                    |          |           |            |            | postgres=CTc/postgres    
 test               | postgres | UTF8      | en_US.UTF8 | en_US.UTF8 |     
 test01             | postgres | UTF8      | C          | C          |     
 test02             | postgres | UTF8      | zh_CN.UTF8 | zh_CN.UTF8 |     
(9 rows)    
postgres=# \c db1  -- EUC_CN编码    
You are now connected to database "db1" as user "postgres".    
db1=# select U&'\00fe';    
ERROR:  42601: Unicode escape values cannot be used for code point values above 007F when the server encoding is not UTF8 at or near "\00fe'"    
LINE 1: select U&'\00fe';    
                  ^    
LOCATION:  scanner_yyerror, scan.l:1086    
db1=# \c postgres  -- UTF8编码，允许输入比007F更大的unicode    
You are now connected to database "postgres" as user "postgres".    
postgres=# select U&'\00fe';    
 ?column?     
----------    
 t    
(1 row)    
```    
详情    
```    
It is your responsibility that the byte sequences you create, especially when using the octal or hexadecimal escapes, compose valid characters in the server character set encoding.     
When the server encoding is UTF-8, then the Unicode escapes or the alternative Unicode escape syntax, explained in Section 4.1.2.3, should be used instead.     
(The alternative would be doing the UTF-8 encoding by hand and writing out the bytes, which would be very cumbersome.)    
The Unicode escape syntax works fully only when the server encoding is UTF8.     
When other server encodings are used, only code points in the ASCII range (up to \u007F) can be specified.     
Both the 4-digit and the 8-digit form can be used to specify UTF-16 surrogate pairs to compose characters with code points larger than U+FFFF, although the availability of the 8-digit form technically makes this unnecessary.     
(When surrogate pairs are used when the server encoding is UTF8, they are first combined into a single code point that is then encoded in UTF-8.)    
Caution    
If the configuration parameter standard_conforming_strings is off, then PostgreSQL recognizes backslash escapes in both regular and escape string constants.     
However, as of PostgreSQL 9.1, the default is on, meaning that backslash escapes are recognized only in escape string constants.     
This behavior is more standards-compliant, but might break applications which rely on the historical behavior, where backslash escapes were always recognized.     
As a workaround, you can set this parameter to off, but it is better to migrate away from using backslash escapes.     
If you need to use a backslash escape to represent a special character, write the string constant with an E.    
In addition to standard_conforming_strings, the configuration parameters escape_string_warning and backslash_quote govern treatment of backslashes in string constants.    
The character with the code zero cannot be in a string constant.    
```    
### unicode输入格式2    
格式2，刚好相反，反斜线不是转义字符时的unicode写法。    
这种格式支持2、3个字节的UNICODE。    
格式如下，    
```    
u&'\4个[0-F]'    
u&'\+6个[0-F]'    
u不区分大小写    
字符串里面的其他位置的字符都被识别为标准字符, 而\则作为UNICODE的转义字符，\后面必须是4个[0-F]或者+6个[0-F], 如果要输入\则输入\\即可。    
```    
如果想更换转义字符，使用UESCAPE语法。    
例子1    
```    
U&'d\0061t\+000061'    
U&'\0441\043B\043E\043D'    
U&'d!0061t!+000061' UESCAPE '!'  -- 更改转义字符为!    
U&'\\'  -- 输入两个转义字符，输出转义字符本身    
```    
例子2, 不能使用转义格式    
```    
postgres=# set standard_conforming_strings =off;  -- 转义字符模式, ''号中的\为转义字符，而非普通字符    
SET    
postgres=# select U&'d\0061t\+000061';    
ERROR:  0A000: unsafe use of string constant with Unicode escapes    
LINE 1: select U&'d\0061t\+000061';    
               ^    
DETAIL:  String constants with Unicode escapes cannot be used when standard_conforming_strings is off.    
LOCATION:  core_yylex, scan.l:534    
postgres=# set standard_conforming_strings =on;  -- 非转义字符模式，''中的\为普通字符，此时使用u&''就正常了    
SET    
postgres=# select U&'d\0061t\+000061';    
 ?column?     
----------    
 data    
(1 row)    
```    
例子3    
```    
postgres=# select U&'d\0061t\+000061';    
 ?column?     
----------    
 data    
(1 row)    
postgres=# select U&'\0441\043B\043E\043D';    
 ?column?     
----------    
 слон    
(1 row)    
postgres=# select U&'d!0061t!+000061' UESCAPE '!';    
 ?column?     
----------    
 data    
(1 row)    
postgres=# select U&'\\';    
 ?column?     
----------    
 \    
(1 row)    
postgres=# select U&'\\\+000061';    
 ?column?     
----------    
 \a    
(1 row)    
postgres=# select U&'\\!+000061' UESCAPE '!';    
 ?column?     
----------    
 \\a    
(1 row)    
```    
详情    
```    
PostgreSQL also supports another type of escape syntax for strings that allows specifying arbitrary Unicode characters by code point.     
A Unicode escape string constant starts with U& (upper or lower case letter U followed by ampersand) immediately before the opening quote, without any spaces in between, for example U&'foo'.     
(Note that this creates an ambiguity with the operator &. Use spaces around the operator to avoid this problem.)     
Inside the quotes, Unicode characters can be specified in escaped form by writing a backslash followed by the four-digit hexadecimal code point number     
or alternatively a backslash followed by a plus sign followed by a six-digit hexadecimal code point number.     
For example, the string 'data' could be written as    
U&'d\0061t\+000061'    
The following less trivial example writes the Russian word "slon" (elephant) in Cyrillic letters:    
U&'\0441\043B\043E\043D'    
If a different escape character than backslash is desired, it can be specified using the UESCAPE clause after the string, for example:    
U&'d!0061t!+000061' UESCAPE '!'    
The escape character can be any single character other than a hexadecimal digit, the plus sign, a single quote, a double quote, or a whitespace character.    
The Unicode escape syntax works only when the server encoding is UTF8. When other server encodings are used, only code points in the ASCII range (up to \007F) can be specified.     
Both the 4-digit and the 6-digit form can be used to specify UTF-16 surrogate pairs to compose characters with code points larger than U+FFFF,     
although the availability of the 6-digit form technically makes this unnecessary.     
(When surrogate pairs are used when the server encoding is UTF8, they are first combined into a single code point that is then encoded in UTF-8.)    
Also, the Unicode escape syntax for string constants only works when the configuration parameter standard_conforming_strings is turned on.     
This is because otherwise this syntax could confuse clients that parse the SQL statements to the point that it could lead to SQL injections and similar security issues.     
If the parameter is set to off, this syntax will be rejected with an error message.    
To include the escape character in the string literally, write it twice.    
```    
## 字符串书写    
1\. 单引号    
例子    
'字符串内容'    
2\. 成对美元符号    
例子    
```
$_$ 字符串内容 $_$    
gpdb=# select $xxxxx$你好;fe;w002939''::""''':::"""''''''':::$xxxxx$;
                 ?column?                 
------------------------------------------
 你好;fe;w002939''::""''':::"""''''''':::
(1 row)
```
## greenplum JSON中的unicode问题  
当greenplum的json中存储的是unicode原生的字符串时，使用->提取，可能会报错。（估计是转换过程导致的异常）  
创建测试表  
```  
postgres=# create table tbl(id int, info json);  
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.  
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.  
CREATE TABLE  
```  
当前为转义模式，也就是说，UNICODE会被提前转换，并存入  
```  
postgres=# set standard_conforming_strings =off;  -- 设置为转义模式，即 \ 被作为转义字符使用，UNICODE格式也可以被正常识别并转换  
```  
插入，UNICODE转换为最终字符串被插入了，提取也正常  
```  
postgres=#  insert into tbl(id,info) values (1,'{"activitytitle":"你好中华人民共和国","giftname":"\u6447\u4E00\u6447\u7EA2\u5305","ruledesc":null}');  
WARNING:  nonstandard use of escape in a string literal  
LINE 1: insert into tbl(id,info) values (1,'{"activitytitle":"你好中...  
                                           ^  
HINT:  Use the escape string syntax for escapes, e.g., E'\r\n'.  
INSERT 0 1  
postgres=# select info->'activitytitle' from tbl;  
       ?column?         
----------------------  
 "你好中华人民共和国"  
(1 row)  
postgres=# select * from tbl;  
 id |                                      info                                        
----+--------------------------------------------------------------------------------  
  1 | {"activitytitle":"你好中华人民共和国","giftname":"摇一摇红包","ruledesc":null}  
(1 row)  
```  
使用非转义模式，也就是说UNICODE的字符串还是原样被插入  
此时提取会发生异常。  
```  
postgres=# set standard_conforming_strings =on;  -- 非转义模式，\会当成普通字符插入，所以不会被识别为unicode模式，插入的是原样的字符  
SET  
postgres=#  insert into tbl(id,info) values (1,'{"activitytitle":"你好中华人民共和国","giftname":"\u6447\u4E00\u6447\u7EA2\u5305","ruledesc":null}');  
INSERT 0 1  
postgres=# select * from tbl;  
 id |                                                info                                                  
----+----------------------------------------------------------------------------------------------------  
  1 | {"activitytitle":"你好中华人民共和国","giftname":"摇一摇红包","ruledesc":null}  
  1 | {"activitytitle":"你好中华人民共和国","giftname":"\u6447\u4E00\u6447\u7EA2\u5305","ruledesc":null}  
(2 rows)  
-- 提取unicode对应的字段失败  
postgres=# \set VERBOSITY verbose  
postgres=# select info->'activitytitle' from tbl;  
ERROR:  22021: invalid byte sequence for encoding "UTF8": 0xe6  (seg0 slice1 digoal:39999 pid=22528)  
LOCATION:  cdbdisp_finishCommand, cdbdisp.c:1326  
postgres=# select info->'giftname' from tbl;  
ERROR:  22021: invalid byte sequence for encoding "UTF8": 0xe6  (seg0 slice1 digoal:39999 pid=27053)  
LOCATION:  cdbdisp_finishCommand, cdbdisp.c:1326  
```  
解决办法  
使用转义模式，将UNICODE转义后存入JSON中。  
普通字符串中不会有这样的问题，仅仅是Greenplum的JSON类型有这样的问题，  
PG 9.4的JSON也没有这样的问题，如下。  
```  
postgres=# create table tbl(id int, info json);  
CREATE TABLE  