# Malicious File Upload and Related Attack Vectors

## Malicious File Upload
### Overview
Malicious file upload is a critical and common attack vector in web application security testing. File upload functions require robust protections to ensure security.

### Attacks
1. **Upload Unexpected File Formats:**
   - Upload files with unexpected formats (e.g., SWF, HTML, PHP, PHP3, ASPX) to execute code or deploy web shells.
   
2. **Execute Cross-Site Scripting (XSS):**
   - Use image files and other types of files to execute XSS attacks.

3. **Attack the Parser:**
   - Exploit the parser to cause a Denial of Service (DoS) or execute XSS via storing payloads in metadata or file headers.

4. **Bypass Security Zones:**
   - Use file polyglots to bypass security zones and store malware on the target site.

### Bypass Techniques
- **Content Type Spoofing:**
  - Manipulate the `Content-Type` header to trick the server into accepting malicious files.

- **Extension Trickery:**
  - Rename files with double extensions (e.g., `image.jpg.php`).

- **File in the Hole Presentation:**
  - Refer to the presentation by Soroush Dalili for more techniques: [Link](http://goo.gl/VCXPh6)

### References
- **File Polyglots:**
  - Dan Crowley's talk: [Link](http://goo.gl/pquXC2)
  - Ange Albertini's research: [Corkami.com](http://corkami.com)

## Remote File Includes and Redirects
### Overview
Remote File Inclusion (RFI) and redirect vulnerabilities can be exploited to include or redirect to external web addresses.

### Common Blacklist Bypasses
- Escape `/` with `\/` or `//` with `\/\/`.
- Use single `/` instead of `//`.
- Remove `http` (e.g., `continue=//google.com`).
- Use encoded slashes (e.g., `/%09/`).
- Change `./` to `..//`.
- Change `../` to `….//`.
- Change `/` to `//`.

### Common Parameters or Injection Points
- `dest`, `continue`, `redirect`, `url`, `uri`, `window`, `next`

### RFI Common Parameters or Injection Points
- `File`, `document`, `Folder`, `root`, `Path`, `pg`, `style`, `pdf`, `template`, `php_path`, `doc`

## Cross-Site Request Forgery (CSRF)
### Overview
CSRF is a well-known attack where an attacker tricks a user into performing an action without their knowledge.

### Testing CSRF
- **Find Sensitive Functions:**
  - Identify functions that are sensitive to CSRF (e.g., add/upload file, password change, email change, transfer money, delete file, profile edit).

- **Burp Suite CSRF PoC:**
  - Use Burp Suite's CSRF PoC generator for quick and easy testing.

### Bypassing CSRF Protection
- **Remove CSRF Token:**
  - Remove the CSRF token from the request.
  
- **Manipulate CSRF Parameter:**
  - Add bad control characters to the CSRF parameter value.
  
- **Duplicate CSRF Parameter:**
  - Use a second identical CSRF parameter.
  
- **Change HTTP Method:**
  - Change the HTTP method from POST to GET.

- **Automated Tool:**
  - Use Debasish Mandal's `Burpy` tool to automate finding CSRF bypasses:
    1. Enable logging in Burp and crawl the site.
    2. Create a template.
    3. Run `Burpy` on the Burp log file to parse and re-request with various attacks.
    4. Analyze responses and alert on outliers.

### Additional Resources
- **Detect Pages Without CSRF Tokens:**
  - Use Arvind Doraiswamy's Burp Extension: [GitHub Link](https://github.com/arvinddoraiswamy/mywebappscripts/blob/master/BurpExtensions/csrf_token_detect.py)

## Privilege, Transport, and Logic Flaws
### Privilege Escalation
- **Testing User Privileges:**
  - Verify that admin users have appropriate privileges and non-admin users do not.
  - Check if lower-privileged users can access functions meant for admins.
  - Use the Autorize Burp plugin for automated testing: [GitHub Link](https://github.com/Quitten/Autorize)

### Insecure Direct Object References (IDOR)
- **Common Targets:**
  - UIDs, user hashes, emails, images, receipts, private files, shipping info, purchase orders, sending/deleting messages.
  - Test for IDOR by incrementing, decrementing, and using negative values for UIDs.

### Transport Security
- **Ensure HTTPS Everywhere:**
  - Verify that all sensitive data is transmitted over HTTPS.
  - Common issues: sensitive images, analytics with session data, PII leaked over HTTP.
  - Use Arvind Doraiswamy's ForceSSL tool: [GitHub Link](https://github.com/arvinddoraiswamy/mywebappscripts/tree/master/ForceSSL)

### Logic Flaws
- **Manual Testing:**
  - Substitute hashed parameters, manipulate steps, use negative quantities, bypass authentication, perform application-level DoS, and timing attacks.

## Mobile Application Security
### Data Storage
- **Common Issues:**
  - Mobile apps often store PII without encryption.
  - Check phone system logs, webkit cache, plists, dbs, and hardcoded binary data.

### Quick Setup for iOS
- **Daniel Mayers' idb Tool:**
  - Use the idb tool for quick setup and testing: [GitHub Link](https://github.com/dmayer/idb)

## Auxiliary Vulnerabilities
- **Content Spoofing, HTML Injection, Referer Leakage, Security Headers, Path Disclosure, Clickjacking, etc.**

## How to Test a Web App in Minutes
### Data-Driven Assessment
1. **Test Forms:**
   - Visit search, registration, contact, password reset, and comment forms with polyglot strings.
   
2. **Scan with Burp:**
   - Scan specific functions with Burp’s built-in scanner.
   
3. **Cookie Testing:**
   - Check cookies before and after logout, submit old cookies, and see if access is granted.
   
4. **User Enumeration:**
   - Perform checks on login, registration, and password reset forms.
   
5. **Password Reset:**
   - Check if passwords are sent in plaintext, use URL-based tokens, are predictable, can be reused, or log in automatically.
   
6. **Numeric Account Identifiers:**
   - Rotate numeric identifiers in URLs to test for context changes.
   
7. **Security-Sensitive Functions:**
   - Test for non-auth browsing, lower-auth browsing, CSRF, CSRF protection bypass, and HTTP usage.
   
8. **Directory Brute-Forcing:**
   - Use SecLists for directory brute-forcing.
   
9. **File Uploads:**
   - Test upload functions for alternate file types that can execute code (XSS or PHP).

### Key Takeaways
- **Crowdsourced Testing:**
  - Focus on the 20% that yields the most results.
  
- **Data Analysis:**
  - Use data analysis to identify the most successfully attacked areas.
  
- **Tooling:**
  - Add polyglots to your toolkit and use SecLists to power your scanners.
  
- **Continuous Learning:**
  - Stay updated with new techniques and approaches.

### Gitbook Project
- **The Bug Hunters Methodology:**
  - This presentation has been expanded into a Gitbook project: [GitHub Link](https://github.com/Jhaddix/The-Bug-Hunters-Methodology)

### Attribution and Thanks
- **Contributors:**
  - Tim Tomes, Joe Giron, Soroush Dalili, Mathias Karlsson, Ashar Javed, Ryan Dewhurst, Bitquark, Arvind Doraiswamy, Barak Tawily, Ferruh Mavituna, Jaime Filson, Robert Hansen, Dan Crowley, Daniel Miessler, and the Bugcrowd team.
- **Community:**
  - Special thanks to the entire bug hunting community for their contributions and support.