file=
location=
locale=
path=
display=
load=
read=
retrieve=
47
Malicious File Upload ++
This is an important and common attack vector in this type of testing
A file upload functions need a lot of protections to be adequately secure. 
Attacks:
●
Upload unexpected file format to achieve code exec (swf, html, php, php3, aspx, ++) Web 
shells or...
●
Execute XSS via same types of files. Images as well!
●
Attack the parser to DoS the site or XSS via storing payloads in metadata or file header
●
Bypass security zones and store malware on target site via file polyglots
48
Malicious File Upload ++
File upload attacks are a whole presentation. Try this one to get a feel for bypass techniques:
●
content type spoofing
●
extension trickery
●
File in the hole! presentaion - http://goo.gl/VCXPh6
49
Malicious File Upload ++
As referenced file polyglots can be used 
to store malware on servers!
See @dan_crowley  ‘s talk: http://goo.
gl/pquXC2
and @angealbertini research: corkami.
com
50
Remote file includes and redirects
Look for any param with another web address 
in it. Same params from LFI can present here too. 
Common blacklist bypasses:
●
escape  "/" with "\/" or “//” with “\/\/”
●
try single "/" instead of "//" 
●
remove http i.e. "continue=//google.com" 
●
“/\/\” , “|/” , “/%09/”
●
encode, slashes
●
”./” CHANGE TO “..//”
●
”../” CHANGE TO “….//”
●
”/” CHANGE TO “//”
Redirections Common Parameters or Injection 
points
dest=
continue=
redirect=
url=  (or anything with “url” in it)
uri= (same as above)
window=
next=
51
Remote file includes and redirects
RFI Common Parameters or Injection points
File=
document=
Folder=
root=
Path=
pg=
style=
pdf=
template=
php_path=
doc=
52
CSRF
53
CSRF
Everyone knows CSRF but the TLDR 
here is find sensitive functions and 
attempt to CSRF.
Burps CSRF PoC is fast and easy for 
this:
54
CSRF
Many sites will have CSRF protection, focus on CSRF bypass!
Common bypasses:
●
Remove CSRF token from request
●
Remove CSRF token parameter value
●
Add bad control chars to CSRF parameter value
●
Use a second identical CSRF param
●
Change POST to GET
Check this out...
55
CSRF
Debasish Mandal wrote a python tool to automate finding CSRF bypasses called 
Burpy.
Step 1: Enable logging in Burp. Crawl a site with Burp completely executing all 
functions.
Step 2: Create a template...
56
57
CSRF
Step 3: Run burpy on Burp log file..
Logic:
1.
Parse burp log file 
2.
re-request everything instrumenting 
4/5 attacks in previous slide 
3.
diff responses
4.
alert on outliers
5.
profit
58
59
60
CSRF
Or focus on pages without the token in Burp:
https://github.
com/arvinddoraiswamy/mywebappscripts/blob/master/BurpExtensions/csrf_token_d
etect.py 
61
CSRF
CSRF Common Critical functions
Add / Upload file
Password change
Email change
Transfer Money / 
Currency
Delete File
Profile edit
62
Privilege, Transport, Logic
63
Privilege
Often logic, priv, auth bugs are blurred. 
Testing user priv: 
1.
admin has power
2.
peon has none
3.
peon can use function only meant for 
admin
64
Privilege
1.
Find site functionality that is restricted to certain 
user types
2.
Try accessing those functions with lesser/other 
user roles
3.
Try to directly browse to views with sensitive 
information as a lesser priv user
Autorize Burp plugin is pretty neat here...
https://github.com/Quitten/Autorize
Common Functions or Views
Add user function 
Delete user function
start project / campaign / etc function
change account info (pass, CC, etc) function
customer analytics view
payment processing view
any view with PII
65
1.
Browse using high priv user
2.
Login with a lower priv user
3.
Burp Plugin re-requests to see if low priv can access high priv
66
Insecure direct object references
IDORs are common place in bounties, and hard 
to catch with scanners.
Find any and all UIDs
●
increment
●
decrement
●
negative values
●
Attempt to perform sensitive functions 
substituting another UID
○
change password
○
forgot password
○
admin only functions
67
Idor’s
Common Functions , Views, or Files
Everything from the CSRF Table, trying cross account attacks
Sub: UIDs, user hashes, or emails
Images that are non-public
Receipts
Private Files (pdfs, ++)
Shipping info & Purchase Orders
Sending / Deleting messages
68
69
Transport
Most security concerned sites will enable HTTPs. It’s 
your job to ensure they’ve done it EVERYWHERE. Most 
of the time they miss something. 
Examples:
●
Sensitive images transported over HTTP
●
Analytics with session data / PII  leaked over HTTP
70
Transport
https://github.com/arvinddoraiswamy/mywebappscripts/tree/master/ForceSSL
71
Logic
Logic flaws that are tricky, mostly manual:
●
substituting hashed parameters
●
step manipulation
●
use negatives in quantities
●
authentication bypass
●
application level DoS
●
Timing attacks
72
Mobile
73
Data Storage
Its common to see mobile apps not applying 
encryption  to the files that store PII.
Common places to find PII unencrypted
Phone system logs (avail to all apps)
webkit cache (cache.db)
plists, dbs, etc
hardcoded in the binary
74
Quick spin-up for iOS
Daniel Mayers idb tool:
75
Logs!
76
Auxiliary
77
The vulns formerly known as “noise”
●
Content Spoofing or HTML injection
●
Referer leakage
●
security headers
●
path disclosure
●
clickjacking
●
++
78
How to test a web app in n  minutes
How can you get maximum results within a 
given time window?
79
Data Driven Assessment (diminishing return FTW)
1.
Visit the search, registration, contact, and password reset, and comment 
forms and hit them with your polyglot strings
2.
Scan those specific functions with Burp’s built-in scanner
3.
Check your cookie, log out, check cookie, log in, check cookie. Submit old 
cookie, see if access.
4.
Perform user enumeration checks on login, registration, and password 
reset.
5.
Do a reset and see if; the password comes plaintext, uses a URL based 
token, is predictable, can be used multiple times, or logs you in 
automatically
6.
Find numeric account identifiers anywhere in URL and rotate them for 
context change
7.
Find the security-sensitive function(s) or files and see if vulnerable to 
non-auth browsing (idors), lower-auth browsing, CSRF, CSRF protection 
bypass, and see if they can be done over HTTP. 
8.
Directory brute for top short list on SecLists
9.
Check upload functions for alternate file types that can execute code (xss 
or php/etc/etc)
~ 15 minutes
80
Things to take with you…
1.
Crowdsourced testing is different enough to pay attention to
2.
Crowdsourcing focuses on the 20% because the 80% goes quick
3.
Data analysis can yield the most successfully attacked areas
4.
A 15 minute web test, done right, could yield a majority of your critical vulns
5.
Add polyglots to your toolbelt 
6.
Use SecLists to power your scanners
7.
Remember to periodically refresh your game with the wisdom of other techniques and 
other approaches
Follow these ninjas who I profiled: https://twitter.com/Jhaddix/lists/bninjas
81
Gitbook project: The Bug Hunters Methodology
This preso ended up to be way too much to fit in an 45min talk so... we turned it into a Git 
project!  (if you are reading this from the Defcon DVD check my twitter or Github for linkage)
●
50% of research still unparsed
●
More tooling to automate
●
XXE and parser attacks
●
XSRF
●
Captcha bypass
●
Detailed logic flaws
●
More mobile
82
Meme Count: 
13
83
Attribution and Thanks
84
Tim Tomes - Recon-ng
Joe Giron - RFI params
Soroush Dalili - File in the Hole preso
Mathias Karlsson - polyglot research
Ashar Javed - polyglot/xss research
Ryan Dewhurst & Wpscan Team
Bitquark - for being a ninja, bsqli string
rotlogix - liffy LFI scanner
Arvind Doraiswamy - HTTPs, CSRF Burp Plugins
Barak Tawily - Autorize burp plugin
the RAFT list authors
Ferruh Mavituna - SVNDigger
Jaime Filson aka wick2o - GitDigger
Robert Hansen aka rsnake - polyglot / xss
Dan Crowley - polyglot research
Daniel Miessler - methodology, slide, and data contributions
My awesome team at Bugcrowd (Jon, Tod, Shpend, Ben, Grant, Fatih, Patrik, Kati, Kym, Abby, Casey, Chris, Sam, ++)
All the bug hunting community!!!