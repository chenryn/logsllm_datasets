is the stronger and easier to understand security guarantees.
All
the information leaked to the server is fully captured
in relatively simple functionalities. For the Blind Storage
scheme, as shown in Figure 2, each time a ﬁle is accessed,
the functionality FSTORE reveals just a triple (op, j, size) to the
server, where op speciﬁes what the access operation is (read,
write, update or delete), j speciﬁes the last time, if any, the
same ﬁle was accessed, and size speciﬁes the size of the ﬁle.
The functionality FSSE (shown in Figure 7) speciﬁes all the
information revealed by our SSE scheme. It is slightly more
complex, partly because it allows the client to reuse document
IDs. Further, it offers a higher level of secrecy for documents
that are originally in the system, compared to those added later
during the operation of the system.
Fully Adaptive Security. As mentioned in Section I, we
achieve fully adaptive security, without relying on heuristics
like the random oracle model. Technically, this is a conse-
quence of the fact that the server does not carry out any
decryptions. We point out that achieving adaptive security by
making the client do decryptions for the server would not be
viable in existing SSE schemes because a long sequence of
decryptions (that cannot be parallelized) need to be carried
out; several rounds of communication (with attendant network
delays) would be necessary if the client carries out
these
decryptions for the server. Nevertheless, a similar approach
was mentioned in [6] as a theoretical solution to avoid the
Random Oracle Model and retain adaptive security.
The price we pay for the improved security, greater com-
putational efﬁciency, parallelizability and simpler architecture
is that the server storage and communication costs are possibly
higher than that of some of the existing schemes (e.g., a factor
of 2 to 4 over unprotected storage, which is in fact, comparable
to overheads incurred in some other schemes like that of
[6]). Also our SSE scheme could, in principle, involve up to
three rounds of communication for retrieving the documents
(this happens if the keyword has a large number of matching
documents). In contrast, many existing schemes involve only
two rounds (one to retrieve encrypted list of documents, and
one to retrieve the documents themselves).
Comparative Performance. The most natural prior work
for us to compare against is [18] (though, unlike this work,
it uses the Random Oracle Model). We remark that
the
more recent work of [6] augments the functionality of [18]
(but without support for dynamic updates), and provides a
highly streamlined implementation over very large scale data;
however, for the task of simple keyword searches, its algorithm
remains comparable to [18]. Since [18] reports performance of
a prototype implemented in a comparable environment as ours
(conservative comparison: we use a laptop and they used a
server), we compare with it. Asymptotically, the client-side
storage and computation in our system is same as [18], but
the constants for our scheme are much better, and is reﬂected
in the performance measured. Our scheme completely avoids
server-side computation (which is quite signiﬁcant in [18]).
IV. BLIND STORAGE
As mentioned in Section I, an important contribution of this
paper is to identify a versatile primitive called Blind Storage.
It allows a client to store a set of ﬁles with a remote server,
revealing to the server neither the number nor the sizes of the
ﬁles. The server would learn about the existence of a ﬁle (and
its size, but not the name used by the client to refer to the
ﬁle, or its contents) only when the client retrieves it later. We
also allow the client to add new ﬁles, and to update or delete
existing ﬁles. The client’s local storage should be independent
of the total amount of data stored in the system.
In this section, ﬁrst we present
the deﬁnition of a
Blind Storage system, followed by an efﬁcient construction
SCATTERSTORE, and a proof of security. Later,
in Sec-
tion V-B, we show how to build a Dynamic SSE scheme using
a Blind Storage system.
A. Deﬁnition
Below, ﬁrst we deﬁne the syntax of a Blind Storage system
(and the infrastructure it needs), followed by the security
requirements on it.
The Syntax. A blind storage system consists of a client and a
“dumb” storage server. The server is expected to provide only
two operations, download and upload. The data is represented
as an array of blocks; the download operation is allowed to
specify a list of indices of blocks to be downloaded; similarly,
the upload operation is allowed to specify a list of data blocks
and indices for those blocks.
A blind storage system is deﬁned by three polynomial-time
algorithms on the client-side: BSTORE.Keygen, BSTORE.Build
and BSTORE.Access. Of these, BSTORE.Access is an interactive
protocol.
• BSTORE.Keygen takes security parameter as an input and
outputs a key KBSTORE (typically a collection of keys for the
various cryptographic primitives used). Note that KBSTORE,
which the client is required to retain throughout the lifetime
of the system, is required to be independent of the data to
be stored.
• BSTORE.Build takes as input (KBSTORE, d0,{idi, datai}t
i=1,
where KBSTORE is a key, d0 is an upperbound on the total
number of data blocks to be stored in the system, (idi, datai)
are the id and data of the ﬁles that the system to be initialized
641
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:56 UTC from IEEE Xplore.  Restrictions apply. 
• On receiving the command FSTORE.Build from the client:
• On receiving the command FSTORE.Access(id, op) from the client:
i=1) from the client (where d0 is an upperbound on the total number of data blocks to be stored
in the system at any time, and the rest specify ﬁles to be stored in the system initially); it internally stores the speciﬁed ﬁles.
◦ FSTORE accepts input (d0,{idi, datai}t
◦ Build Leakage: In addition, FSTORE sends d0 to the server.
◦ If no ﬁle matching the identiﬁer id exists, and the operation op ∈ {read, delete}, FSTORE returns a status message to the client indicating
so. Else, if op = read, FSTORE returns the ﬁle with identiﬁer id; if op = delete, it is removed. If op = write, the content data for the
ﬁle is also accepted from the client, and the ﬁle is created or its content replaced with data. If op = update, FSTORE interacts with
the client as follows:
FSTORE returns the current size of the ﬁle (in blocks – possibly 0, if the ﬁle does not exist) to the client.
FSTORE accepts the size of the updated ﬁle from the client.
FSTORE returns the current contents of the ﬁle to the client.
FSTORE accepts the updated contents of the ﬁle from the client. The ﬁle stored internally is updated with this.
◦ Access Leakage: In addition, FSTORE sends the tuple (op, j, size) to the server where:
op speciﬁes what the current access operation is,a
j is the last instance when the same ﬁle was accessed (j = 0 means that this ﬁle was not accessed before)
size is the size (in number of blocks) of the ﬁle being accessed. For the update operation, size is the larger of the sizes before and
after the update.
aA reﬁned version of Blind-Storage would require the operation to be not revealed. See Section IV-B3.
Fig. 2: The FSTORE functionality: all the information leaked to the server in our Blind Storage scheme is speciﬁed here.
with; it outputs an array of blocks D to be uploaded to the
server.
• BSTORE.Access takes as input a key KBSTORE, a ﬁle id id,
an operation speciﬁer op ∈ {read, write, update, delete},
and optionally data data (if op is write or update). Then
it interacts with the server (through the upload/download
interface) and returns a status message and optionally ﬁle
data (for the read and update operations). For the update
operation, BSTORE.Access allows more ﬂexibility:2 ﬁrst it
requires only id as input, and outputs the current size of the
ﬁle with that ID; then it accepts as input (an upperbound
on) what the size of the ﬁle will be after update; then it
outputs the current ﬁle data, and only then requires the new
data with which the ﬁle will be updated.
Security Requirement. We specify the security requirement
of a blind-storage system following the “real/ideal” paradigm
that is standard for secure multi-party computation (as opposed
to using speciﬁc game-based security deﬁnitions used in some
of the earlier literature on SSE). This includes specifying
an adversary model and an “ideal functionality,” as detailed
below. The formal security requirement we shall require is
that of Universally Composable security [4] (but restricted to
our adversary model).3
In the adversary model we consider,
the adversary is
allowed to corrupt only the server passively — i.e., as an
honest-but-curious adversary. (If the client is corrupt, we need
not provide any security guarantees.)
The ideal functionality is speciﬁed as a virtual trusted
third party FSTORE
that mediates between the client and
the server (modeling the information leaked to the server).
FSTORE accepts two commands from the client: FSTORE.Build
and FSTORE.Access, along with inputs to these commands
2One can always use a read followed by a write to get the effect of an
update, but this is less efﬁcient and potentially reveals more information.
3We remark that for our setting of passive adversaries, UC security is
a conceptually simpler notion than for the setting of active adversaries.
Nevertheless, for the sake of concreteness, we use the UC security model,
which automatically ensures security even when the inputs to the client are
adaptively chosen under adversarial inﬂuence.
(which are identical
to the inputs to BSTORE.Build and
BSTORE.Access as described above, except
the key
KBSTORE). In this ideal model, it is FSTORE which maintains the
collection of ﬁles, and performs all the operations speciﬁed by
the FSTORE.Build and FSTORE.Access commands. In addition,
it reveals limited information to the server as speciﬁed in
Figure 2.
for
We stress that all the information revealed to the server by
our blind-storage scheme is captured by the FSTORE functional-
ity. Note that the information leaked (during FSTORE.Build and
FSTORE.Access) is limited and simple to specify. This simplicity
is one of the important contributions of this work.
Remark. Even when using the ideal FSTORE functionality, an
adversary can learn some statistics about the ﬁles and accesses
by analyzing the patterns in the information revealed to it.
Such information could indeed be sensitive, and it is up to
the higher-level application that uses a blind-storage system to
ensure that this is not the case. The cryptographic construction
seeks to only match the guarantees given by FSTORE.
B. Our Construction
a
shall
present
version,
simpliﬁed
Our Blind Storage construction is called SCATTERSTORE.
First, we
called
SCATTERSTORE-LITE, which already involves most of
the critical components in the full construction. The only
drawback of the simpliﬁed construction is that the client is
required to maintain a data structure to map each ﬁle-name to
a small piece of information. This solution is well-suited for
a scenario when the system consists of a moderate number
of large ﬁles. In our ﬁnal construction, we show how to
avoid this local data structure, so that the client’s storage is
of constant size, independent of the number of ﬁles in the
system.
1) Simpliﬁed Construction: SCATTERSTORE-LITE: In this
section, we present a sketch of SCATTERSTORE-LITE, our
simpliﬁed Blind-Storage construction. We defer a formal
description to the next section where we present
the full
construction.
642
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:56 UTC from IEEE Xplore.  Restrictions apply. 
The construction relies on the following primitives:
– a full-domain collision resistant hash function (CRHF), H,
– a pseudorandom function (PRF), Φ,
– a full-domain pseudorandom function (FD-PRF), Ψ (implemented by applying Φ to the output of H),
– a pseudorandom generator (PRG), Γ.
(In our prototype, as described in Section VI, the implementation of Φ, Ψ and Γ all rely on the AES block-cipher; H is implemented using
SHA-256.) The security parameter k is an implicit input to all the cryptographic primitives used in the construction. The other parameters
in the construction are the size parameters nD, mD, an expansion parameter α > 1, and the minimum number of blocks communicated in
each transaction, κ.
• BSTORE.Keygen: A key KΦ for the PRF Φ, and a key KID for the FD-PRF Ψ are generated; KBSTORE is set to be the pair (KΦ, KID).
• BSTORE.Build(F, KBSTORE): F is a list of ﬁles f = (idf , dataf ). Below sizef denotes the number of blocks in an encoding of dataf; each
block has two short header ﬁelds containing a version number initialized to 0, and H(idf ); the latter is not allowed to be all 0s, which
is reserved to indicate a free block. In addition, the ﬁrst block has a header ﬁeld that records sizef. (It will be convenient to keep the
version number ﬁeld at an extreme end of the block, as it needs to kept unencrypted, whereas the rest of the block will be encrypted at
the end of this phase.)
◦ Let D be an array of nD blocks of mD bits each.
◦ Initialize every block in D with all 0s (to be encrypted later).
◦ For each ﬁle f in F,
1) Generate a pseudorandom subset Sf ⊆ [nD], of size |Sf| = max((cid:100)α · sizef(cid:101), κ) as follows.
a) Generate a seed σf = ΨKID (idf ) for the PRG Γ.
b) Let Sf be the set of integers in the sequence Λ[σf ,|Sf|]. Here Λ[σ, (cid:96)] denotes a sequence of (cid:96) integers obtained as follows.
Generate a (sufﬁciently long) output from the PRG Γ, with seed σ, and parse it as a sequence of integers in the range [nD].
Λ[σ, (cid:96)] is the ﬁrst (cid:96) distinct integers in this sequence.
2) Check if the following two conditions hold:
at least sizef blocks in D that are indexed by the numbers in Sf are free;
at least one block in D that is indexed by the numbers in S0
f
is free.
If either condition does not hold, abort. By the choice of our parameters, this will happen only with negligible probability.
3) Pick a pseudorandom subset (cid:98)Sf ⊆ Sf of size |(cid:98)Sf| = sizef, such that the blocks in D that are indexed by the numbers in (cid:98)Sf are
order; we pick the shortest preﬁx of this sequence that contains sizef numbers indexing free blocks, and let (cid:98)Sf be the set of these
4) Write the sizef blocks of dataf onto the blocks in D that are indexed by the numbers in (cid:98)Sf (in increasing order). These blocks get
all free. For convenience, we shall rely on the fact that the numbers in the sequence used to generate Sf are in a pseudorandom
sizef numbers.
marked as not free.
◦ Encrypt each block of D using the PRF Φ and the key KΦ. The version number ﬁeld is left unencrypted, while the rest is encrypted