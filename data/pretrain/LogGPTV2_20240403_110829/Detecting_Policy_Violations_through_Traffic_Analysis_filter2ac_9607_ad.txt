0.00
0.00
I
0.00
0.00
89.43
0.00
0.00
22.22
0.00
IX
0.00
0.00
0.00
74.24
0.00
0.00
0.00
N
0.00
0.00
0.00
0.00
12.50
0.00
0.00
Q
0.00
0.00
0.44
0.00
0.00
44.44
0.00
S
0.00
0.00
0.00
0.00
0.00
0.00
14.29
XX Count
114
49
227
66
8
9
14
25.44
14.29
10.13
25.76
87.50
33.33
85.71
F
H
I
IX
N
Q
S
Table 4. Confusion Matrix: Bhattacharyya +
avg. bytes/sec + threshold=0.09
As can be seen, both measures do a reasonable job of
separating the four classes with the largest number of con-
nections, but neither does particularly well for the three
classes with only a few connections. We can improve
the class separation by introducing the bytes per second
measure previously described, to add an indication of how
much data was transferred during each session, and a sim-
ple threshold on the ﬁnal composite score, to capture the
idea of another distribution needing to be “close enough”
before being considered to be a good match. This is likely
to be especially important when attempting to classify con-
nections involving a protocol for which no training samples
had previously been collected. Table 4 shows the results
of the classiﬁcation for this combination, using a threshold
value of 0.09 (threshold value determined by experiment).
Quite a few connections are now classiﬁed as “un-
known”, but class separation is otherwise much improved.
This could be useful in detecting certain types of non-
permitted uses of SSH. For example, 85% of tunneled
HTTP connections were successfully classiﬁed, with no
false positives. So where this type of SSH usage is not per-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
PSfragreplacements0200400600800100012001400Datasize(bytes)[CLIENT]0.00.10.20.30.40.50.60.70.80.91.0CumulativeDistribution0200400600800100012001400Datasize(bytes)[SERVER]0.00.10.20.30.40.50.60.70.80.91.0CumulativeDistributionProceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006bution of packet sizes. Simple methods by which this could
be attempted include reducing the MTU of the network in-
terface through which outgoing SSH trafﬁc is sent and com-
piling a modiﬁed SSH binary which adjusts the TCP max-
imum segment size using the TCP MAXSEG socket op-
tion [29, p. 219]. Changing the MTU reduces the max-
imum packet size that can be sent over the interface, not
just of SSH trafﬁc but for all trafﬁc and also affects the size
of packets sent in both directions on the connection. The
TCP MAXSEG option affects only the particular connec-
tion to which it is applied.
Reducing the size of the largest chunk of data that can
be sent in a single TCP segment will change the packet size
distribution for uses of SSH in which there are many larger
packets (such as ﬁle transfer and HTTP(S) forwarding).
Signiﬁcantly changing the size of the largest packet that
can be sent or received will certainly affect the ability to
classify trafﬁc as representing a particular type of usage.
However, the classiﬁcation of trafﬁc as representing an in-
teractive SSH session or some other type of SSH session
would be less affected: Figure 1 illustrates that both halves
of an interactive SSH connections are principally composed
of small packets. Sessions that have a higher proportion of
larger packets, such as HTTP(S) and ﬁle transfer sessions,
would not easily be confused with interactive SSH, even
when limiting the maximum packet size (by changing the
MTU, for example). The use of additional statistical mea-
sures may need to be applied. For example, greater inter-
vention would be required to spread the data transferred out
over a longer period of time in order to preserve the bytes
per second, packets per second and bytes per packet. For
the client to server part of the connection, 92% of interac-
tive sessions in the test data collected satisfy conditions of
average bytes per second less than 300, average packets per
second less than 6 and average bytes per packet less than
70. Only 8% of forwarded Web browsing sessions satisfy
the same requirements. However, a sufﬁciently motivated
and patient adversary with the necessary control over both
the SSH client and server would be able to evade detection.
An adversary that combines several different types of us-
age in the one SSH session would also be able to frustrate
classiﬁcation of the session as one particular type of trafﬁc,
but without any guarantees of what sort of trafﬁc the session
would be classiﬁed as instead.
Practical deployment of systems that detect anomalies in
the operation of some system or the use of some protocol
can be challenging.
It is difﬁcult to collect training data
which is “clean”, that is, which does not contain any at-
tacks. This problem would be familiar to researchers work-
ing with some types of intrusion detection systems. In our
case, some generic behaviour proﬁles could be provided. If
local customisation is required to improve detection perfor-
mance or provide detection for obscure uses, trusted staff
(perhaps including IT staff and others from the wider user
population) who had occasion to work with SSH could be
enlisted to help create clean data that could be used to detect
anomalies.
7 Conclusion
Tunneling one network protocol through another is one
way that attackers or malicious insiders can communicate
through ﬁrewalls or other trafﬁc control and monitoring de-
vices. Furthermore, some network protocols such as SSH
have multiple uses, some of which may be desirable, oth-
ers which are prohibited by security policies. By monitor-
ing network trafﬁc, it may be possible to determine what
types of activity is taking place, and so provide a simple
audit capability for compliance with security policies. We
describe work to separate SSH connections into different
classes, using some simple statistical calculations and com-
parisons. We found that using these methods, it is possible
to identify different types of SSH activity with a reasonable
degree of conﬁdence (greater than 74% for the main four
types of activity examined, with very low false positives).
Furthermore, without identifying what kind of trafﬁc it is,
it is possible to identify types of activity other than simple
interactive use of SSH with a high degree of conﬁdence.
We found that it was possible to obtain a reasonable clas-
siﬁcation without attempting to make much use of inter-
arrival times. While we did collect this information, the
manner in which we captured the trafﬁc did not ideally re-
ﬂect the environment in which such captures would be con-
ducted in practice, which would ordinarily be on a gate-
way machine at some intermediate point between the traf-
ﬁc source and sink. It was considered that this did not ad-
versely affect the packet size data, however.
All sessions were based on the activities of a single user.
We have endeavoured to ensure that a reasonable range of
activities were performed during the monitored sessions so
that there could be some expectation that the results would
be reﬂective of the activities of a wider user population. In
addition to enrolling additional users in a subsequent study,
further work could include use of more sophisticated ma-
chine learning methods to improve the classiﬁcation, use
of more statistical measures in classiﬁcation, extension to
other types of tunneled protocols and attempting classiﬁ-
cation based on a sliding window of packets within a ses-
sion, to identify different uses, some perhaps not conform-
ing with policy, within the one SSH session.
References
[1] R. J. Anderson. Security Engineering: A Guide to Building
Dependable Distributed Systems. Wiley, 2001.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006[2] G. D. Bissias, M. Liberatore, D. Jensen, and B. N. Levine.
Privacy vulnerabilities in encrypted HTTP streams. In Pri-
vacy Enhancing Technologies Workshop, May–June 2005.
[3] K. Borders and A. Prakash. Web tap: detecting covert web
trafﬁc. In Proceedings of the 11th ACM conference on Com-
puter and communications security, pages 110–120, Wash-
ington, DC, 2004.
[4] L. Brinkhoff. GNU httptunnel. http://www.nocrew.
org/software/httptunnel.html. Last checked:
20060529.
[5] S. Chapman.
String similarity metrics for information
integration. http://www.dcs.shef.ac.uk/˜sam/
stringmetrics.html. Last checked: 20060529.
[6] daemon9.
Project Loki:
http://
www.phrack.org/show.php?p=49\&a=6, Novem-
ber 1996.
ICMP tunneling.
[7] Department of Defence.
Australian Government Infor-
mation and Communications Technology Security Manual
(ACSI 33), March 2006. Available from http://www.
dsd.gov.au/library/infosec/acsi33.html.
[8] J. P. Early, C. E. Brodley, and C. Rosenberg. Behavioral
authentication of server ﬂows. In ACSAC ’03: Proceedings
of the 19th Annual Computer Security Applications Confer-
ence, December 2003.
[9] G. Fisk, M. Fisk, C. Papadopoulos, and J. Neil. Eliminat-
ing steganography in internet trafﬁc with active wardens. In
Information Hiding 2002, volume 2578 of Lecture Notes in
Computer Science, pages 18–35. Springer-Verlag, October
2002.
[10] D. Giampaolo. xkey.c. http://www.phreak.org/
archives/exploits/unix/xwin-exploits/
x11serv.c. Last checked: 20060531.
[11] J. Gifﬁn, R. Greenstadt, P. Litwack, and R. Tibbetts. Covert
messaging through TCP timestamps. In Privacy Enhancing
Technologies, volume 2482 of Lecture Notes in Computer
Science, pages 194–208. Springer-Verlag, April 2002.
[12] T. G. Handel and I. Maxwell T. Sandford. Hiding data in
the OSI network model. In Proceedings of the First Inter-
national Workshop on Information Hiding, volume 1174 of
Lecture Notes in Computer Science, pages 23–38. Springer-
Verlag, 1996.
[13] B. Hatch. SSH users beware: The hazards of X11 forward-
http://www.hackinglinuxexposed.com/
Last checked:
ing.
articles/20040705.html, 2004.
20060531.
[14] D. R. Hipp. SQLite: An embeddable SQL database engine.
http://www.sqlite.org/. Last checked: 20060529.
[15] T. Kailath. The divergence and Bhattacharyya distance mea-
sures in signal selection. IEEE Transactions on Communi-
cations, 15(1):52–60, February 1967.
[16] D. Kaminsky. OzymanDNS. http://www.doxpara.
checked:
com/ozymandns_src_0.1.tgz.
20060531.
Last
[18] N. B. Lucena, G. Lewandowski, and S. J. Chapin. Covert
channels in IPv6. In Privacy Enhancing Technologies Work-
shop, May 2005. (Not yet published.).
[19] Mudge.
Insider threat: Models and solutions.
;login:,
28(6):29–33, December 2003.
[20] S. J. Murdoch and S. Lewis. Embedding covert channels into
In Information Hiding: 7th International Work-
TCP/IP.
shop, volume 3727 of Lecture Notes in Computer Science,
pages 247–261. Springer Verlag, June 2005.
[21] National Computer Security Center. Department of De-
fense Trusted Computer System Evaluation Criteria. DoD
5200.28-STD, December 1985. (“Orange Book”).
[22] OpenBSD Project. OpenSSH. http://www.openssh.
org. Last checked: 20060531.
[23] D. J. Pack and B. E. Mullins. A portable microcontroller-
In Pro-
based HTTP tunnelling activity detection system.
ceedings of the 2003 IEEE International Conference on Sys-
tems, Man and Cybernetics, volume 2, pages 1544–1549,
October 2003.
[24] D. J. Pack, W. Streilein, S. Webster, and R. Cunningham.
Detecting HTTP tunneling activities. In Proceedings Of The
2002 IEEE Workshop On Information Assurance, 2002.
[25] M. J. Ranum. What is “deep inspection”? http://www.
ranum.com/security/computer_security/
editorials/deepinspect/%index.html,
Last visited: 2006-08-25.
2005.
[26] A. Singh, O. Nordstr¨om, C. Lu, and A. L. M. dos Santos.
Malicious ICMP tunneling: Defense against the vulnera-
bility. In Proceedings of ACISP ’03: the 8th Australasian
Conference on Information Security and Privacy, volume
2727 of Lecture Notes in Computer Science, pages 226–236.
Springer-Verlag, 2003.
[27] T. Sohn, J. Moon, S. Lee, D. H. Lee, and J. Lim. Covert
channel detection in the ICMP payload using Support Vector
In Computer and Information Sciences - ISCIS
Machine.
2003, volume 2869 of Lecture Notes in Computer Science,
pages 828–835. Springer-Verlag, 2003.
[28] D. X. Song, D. Wagner, and X. Tian. Timing analysis of
In Proceedings of
keystrokes and timing attacks on SSH.
the 10th USENIX Security Symposium, Washington, D.C.,
USA, August 2001. USENIX Association.
[29] W. R. Stevens, B. Fenner, and A. M. Rudoff. UNIX Network
Programming: The Sockets Networking API, volume 1.
Addison-Wesley, 3rd edition, 2004.
[30] I. H. Witten and E. Frank. Data mining: practical machine
learning tools and techniques. Morgan Kaufman, 2nd edi-
tion, 2005.
[31] C. Wright, F. Monrose, and G. M. Masson. HMM proﬁles
for network trafﬁc classiﬁcation. In Proceedings of the 2004
ACM workshop on Visualization and data mining for com-
puter security, pages 9–15, October 2004.
[32] C. V. Wright, F. Monrose, and G. M. Masson. Towards bet-
ter protocol identiﬁcation using proﬁle HMMs. Technical
Report JHU-SPAR051201, Johns Hopkins University, 2005.
[17] T. Karagiannis, A. Broido, M. Faloutsos, and kc claffy.
Transport layer identiﬁcation of P2P trafﬁc. In Proceedings
of the 4th ACM SIGCOMM Conference on Internet Mea-
surement (IMC’04), pages 121–134, Taormina, Sicily, Italy,
October 2004.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006