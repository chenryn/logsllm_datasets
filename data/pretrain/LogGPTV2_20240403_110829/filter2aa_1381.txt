ACL Steganography:
Permissions to Hide Your Porn
by Michael Perklin
Michael Perklin
BaISc, MSIA, CISSP, EnCE, ACE
Security Professional
Corporate Investigator (Cyber-Crime)
Digital Forensic Examiner
Computer Geek + Legal Support hybrid
In This Talk...
What is Steganography?
Historical examples of physical and digital forms
How do they work?
ACL Steganography - a new scheme
Demo
How It Works
What Is Steganography?
Greek origin and means "concealed writing"
steganos (στεγανός) meaning
"covered or protected"
graphei (γραφή) meaning "writing"
The term was ﬁrst coined in 1499, but there are 
many earlier examples
Basically, hiding something in plain sight
Classical Examples
Classical Example: Tattoo
Tattoo under hair
Encoder tattoos a slave’s scalp
Decoder shaves the messenger’s hair
Problem: The message must be 
delayed to allow time for hair regrowth
Also...
Tattoos Are Permanent
Oops
Classical Example: Morse
Stitch morse code into a sweater/jacket worn by a 
messenger
Messenger hand-delivers one message while actually 
delivering two
Classical Example:
Invisible Ink
Write secrets with lemon juice
Allow to dry
Decode with heat
(candle, match, hair dryer, iron)
Decode With Heat
Digital Steganographic 
Methods
Digital Example: Photos
Files can be encoded as colour 
information embedded in a 
photo
Most common type of digital 
steganography
Based on the fact that only 
super-humans can tell the 
difference between
Chartreuse and Lemon
Photo Steganography
Each pixel is assigned a colour with an RGB colour code
The last bit of this 8-bit code is overwritten with encoded 
data
#DFFF00 is chartreuse
#DFFF01 is.... one of the yellows
8 adjacent pixels with 8 slightly-adjusted colours allows 
1 byte of encoded information
Audio Steganography
Same principle as photographic steganography, but 
with audio
Humans can’t easily tell the difference between
400hz and 401hz, especially if the note isn’t sustained
Alter each frame of audio with 1 bit of encoded 
information
Digital Example: x86 Ops
Information can be encoded in x86 op codes
NOP - No Operation
ADD / SUB - Addition and Subtraction
PE ﬁles (standard .exe programs) have many other 
areas that can hold arbitrary data
Digital Example:
Chafﬁng and Winnowing
Conceived by Ron Rivest in 1998 (the R in RSA, as well 
as RC4 and others)
Not quite steganography
Not quite encryption
Has properties of both stego and encryption
Chafﬁng and Winnowing
Sender issues ‘real’ messages and ‘chaff’ messages
Listeners don’t know which messages are real
Real chunks of the message pass a parity check
Message Authentication Code (MAC)
Receiver calculates MACs on every packet
Discards packets whose MACs aren’t valid
Reassembles all packets with valid MACs
Chafﬁng and Winnowing
Courtesy: Wikimedia Commons
Steganography Breakdown
All types of steganography require three things:
A medium of arbitrary information
A key or legend for encoding information
A way to differentiate ‘encoded’ and ‘medium’ info
ACL Steganography
A way to encode ﬁles as Access Control Entries within 
Access Control Lists of ﬁles stored on an NTFS volume
Medium: All ﬁles on an NTFS volume
Key: Security Identiﬁers in ACEs
Differentiator: ACEs with an unlikely combination of 
permissions
Background: NTFS Security
NTFS Permissions
Entries correspond to system users
There are 22 unique permissions available, stored
in 14 bits of a 32-bit ﬁeld
Many more granular permissions exist than
“Read, Write, Execute”
Simple and Advanced Views
NTFS Permissions
Permission entries are stored
using Security Identiﬁer (S-ID)
If the user is removed, the OS
can’t look up the friendly name
Photo shows same ﬁle after
“Michael” is removed from OS
NTFS Security Identiﬁers
Maximum Size: 68-bytes
1st byte is the revision
(Always 1)
2nd byte is the count of SubAuthorities in this SID
(Maximum 15 SubAuthorities per SID)
6 bytes used for the Identiﬁer Authority
(Always 000004)
60 bytes store the content of the SubAuthorities and the 
Relative ID
Acronym Review (AR)
Access Control List (ACL)
A list of Access Control Entries
Access Control Entry (ACE)
A permission rule (allow or deny) pertaining to a SID
Security Identiﬁer (SID)
A unique identiﬁer for a user or group of a Windows 
system
Demonstration
A folder full of ﬁles
A ﬁlelist.txt with these ﬁles
A .tc volume with cool stuff in it
Encoding the volume
Showing the ACEs on the ﬁles
Decoding the volume
ACL Steganography
A ﬁle is split up 
into 60-byte 
chunks
Each chunk 
becomes a SID
Two ﬁles in the FileList.txt
ACL Steganography
ACEs are 
created with 
“Allow” 
permissions for 
each of these 
SIDs
ACEs are added 
to the ACLs of 
multiple ﬁles
ACLEncoding Details
Two bits are set for all ACLEncoded entries:
Synchronize + ReadPermissions
Synchronize cannot be set within the Windows UI
The 9 least signiﬁcant bits are used as a counter from 0-512
ACLEncode Details
The FileList becomes a kind of symmetric key between 
the encoder and decoder
The list identiﬁes:
Which ﬁles have ACLEncoded entries
The order in which those entries are encoded
Limitations
An ACL can be no bigger than 64kB per ﬁle
Maximum ACE size is 76 bytes (68 for SID + 8 byte header)
This produces a theoretical maximum of 862 ACEs per ﬁle
I’ve imposed a limit of 512 entries per ﬁle
This leaves room for legitimate permissions
Limitations
The largest possible ﬁle to be encoded:
NumFilesInList * 512 * 60bytes 
or about 30KB per ﬁle
Need to store a larger ﬁle? Use a longer ﬁle list.
$SECURE File Limitation
The $SECURE ﬁle is a hidden ﬁle on every NTFS volume
All ACLs for all ﬁles are stored in this one ﬁle
Each time a new SID is encountered, it’s added to this ﬁle
This way, future permission operations for that user can 
use the existing reference without duplicating it
$SECURE File Limitation
NTFS does *NOT* remove old/unused SIDs from the 
$SECURE ﬁle
The $SECURE ﬁle is designed only to grow in size and 
never shrink
This means, every ACLEncoded chunk from every run of 
ACLEncode will persist here forever
A Forensic Review
I conducted a test:
2GB USB Key, formatted as NTFS
AccessData FTK 4.0.2.33
Guidance EnCase Forensic 6.19.6
Forensic Test - File List
Forensic Test - Input File
DEFCONXXI repeated
over and over
4 KB
AccessData FTK 4
Forensic Test - FTK4
Forensic Test - FTK4
Forensic Test - FTK4
FTK4 has no way to show Access Control Lists of ﬁles
Contacted their tech support
Discussed on their user forum
“Use another tool”
Guidance EnCase Forensic 6
Forensic Test - EnCase 6
Forensic Test - EnCase 6
Forensic Test - EnCase 6
Forensic Detection of ACLEncoding
Detection of ACLEncoded entries is a manual process
(using the most popular forensic tools)
Detection can be automated with the creation of 
EnScripts (EnCase’s scripting language) and other 
purpose-built tools
Unfortunately not enough time to go over these today
Questions and Answers
If you have questions, see me in the Speaker Q&A room
Thanks to Josh, Nick, Joel, Reesh, Kyle for their help with 
testing
Thanks to my family, my friends, my colleagues, and my 
employer for providing me the time for this research
Thanks to Eugene Filipowitz for seeding the thought in my 
mind:
“How can you hide data on a drive without detection?”
ACLEncode
Source Code
http://www.perklin.ca/~defcon21/ACLEncode.zip
Latest Slides
http://www.perklin.ca/~defcon21/aclsteganography.pdf
DEFCON 21
Michael Perklin
References
http://msdn.microsoft.com/en-us/library/gg465313.aspx
http://stackoverﬂow.com/questions/1140528/what-is-the-maximum-length-of-a-sid-in-sddl-
format
http://technet.microsoft.com/en-us/library/cc962011.aspx
http://msdn.microsoft.com/en-CA/library/ms229078(v=vs.85).aspx
https://github.com/mosa/Mono-Class-Libraries/blob/master/mcs/class/corlib/
System.Security.AccessControl/FileSystemRights.cs
http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.ﬁlesystemrights.aspx
http://www.ntfs.com/ntfs-permissions-access-entries.htm
http://www.ntfs.com/ntfs-permissions-security-descriptor.htm
http://support.microsoft.com/kb/279682