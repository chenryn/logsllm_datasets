A in ﬁnding a collision in H is
Advcr
H (A) = Pr
H(x) = H(x(cid:48)) ∧ x (cid:54)= x(cid:48) : (x, x(cid:48)) $← A()
.
(cid:16)
(cid:17)
3 Multi-ciphersuite ACCE protocols
In the original ACCE formulation, an ACCE protocol is deﬁned implicitly by however the
experiment responds to the Send queries.
In the multi-ciphersuite setting, there are many
diﬀerent ciphersuite algorithms to consider, so we begin by more formally deﬁning a multi-
ciphersuite protocol in several portions. There will be a negotiation protocol, which is common
to all ciphersuites, and which is typically used to negotiate which ciphersuite is used. Each
party then proceeds with the negotiated one of several sub-protocols, each of which represents a
diﬀerent ciphersuite. Each execution of the protocol is called a session and will maintain and
update a collection of per-session variables.
Deﬁnition 1 (Per-session variables). Let π denote the following collection of per-session
variables:
• ρ ∈ {init, resp}: The party’s role in this session.
• c ∈ {1, . . . , nSP,⊥}: The identiﬁer of the sub-protocol chosen for this session, or ⊥.
• pid ∈ {1, . . . , nP ,⊥}: The identiﬁer of the alleged peer of this session, or ⊥ for an
• α ∈ {in-progress, reject, accept}: The status.
• k: A session key, or ⊥. Note that k consists of two sub-keys: bi-directional authenticated
encryption keys ke and kd (which themselves may consist of encryption and MAC sub-keys).
unauthenticated peer.
• sid: A session identiﬁer deﬁned by the protocol.
• ste, std: State for the stateful authenticated encryption and decryption algorithms.
• Any additional state speciﬁc to the protocol.
• Any additional state speciﬁc to the security experiment.
We can now deﬁne an ACCE protocol. It will be convenient to explicitly name the diﬀerent
algorithms that are executed at diﬀerent times in the protocol.
Deﬁnition 2 (ACCE protocol). An ACCE protocol is a tuple of algorithms. The key generation
algorithm KeyGen() $→ (sk, pk) outputs a long-term secret key / public key pair. The handshake
algorithms AlgI(cid:96) and AlgR(cid:96), (cid:96) = 1, . . . , take as input (sk, pk) and an incoming message m,
update per-session variables π, and output an outgoing message m(cid:48). The handshake algorithms
9
eventually set the variables for the peer identiﬁer π.pid, the session status π.α, the session key
π.k, and the session identiﬁer π.sid. There are also stateful authenticated encryption and
decryption algorithms Enc(π.ke, m, π.ste) $→ (C, π.ste) and Dec(π.kd, C, π.std) → (m(cid:48), π.std).
All algorithms are assumed to take as implicit input any global protocol parameters, including
the list of all trusted peer public keys.
Having deﬁned a single ACCE protocol, we now turn to the multi-ciphersuite setting.
Deﬁnition 3 (Multi-ciphersuite protocol). A multi-ciphersuite ACCE protocol NP(cid:107) (cid:126)SP is the
protocol obtained by ﬁrst running a negotiation protocol NP, which outputs per-session variables
π and a ciphersuite choice c, then running subprotocol SPc ∈ (cid:126)SP. A negotiation protocol NP is a
tuple of algorithms, denoted either NP.AlgI(cid:96) or NP.AlgR(cid:96) for initiator or responder algorithms,
respectively, for (cid:96) = 1, . . . . All algorithms take as input an incoming message m, update per-
session variables π, and output an outgoing message m(cid:48). The ﬁrst algorithms for both the initiator
and responder also take as input a vector (cid:126)sp of ciphersuite preferences that the party should
use in this session. The ﬁnal negotiation algorithm for both parties sets the ciphersuite choice
variable π.c. Each sub-protocol SPc is a tuple of algorithms corresponding to an ACCE protocol
as in Deﬁnition 2, namely SPc.KeyGen, SPc.AlgI(cid:96), SPc.AlgR(cid:96), SPc.Enc, SPc.Dec. Note that the
execution of the negotiation protocol and the chosen subprotocol may be slightly interleaved, in
that the responder may send the last negotiation message and the ﬁrst sub-protocol message
together.
It should be clear that, when the number of subprotocols nSP = | (cid:126)SP| = 1, the deﬁnitions of
a multi-ciphersuite ACCE protocol and an ACCE protocol are equivalent, up to a change of
notation.
3.1 Execution environment
The security experiment for a multi-ciphersuite ACCE protocol is similar to that of individual
ACCE protocols [20], except that parties initially establish multiple long-term keys, the adversary
can activate parties with an ordered list of sub-protocols, and the encryption/decryption is
buﬀered stateful authenticated encryption, rather than a stateful length-hiding authenticated
encryption. Let NP(cid:107) (cid:126)SP be a multi-ciphersuite ACCE protocol, with | (cid:126)SP| = nSP.
Parties and long-term key generation. The execution environment consists of nP parties,
P1, . . . , PnP , each of whom is a potential protocol participant. At the beginning of the experiment,
the variable δi,{c,d} is set to 1 or 0 and represents whether party Pi re-uses the same long-term
key for SPc and SPd; note that δi,{c,d} must be 0 if SPc.KeyGen (cid:54)= SPd.KeyGen, namely if there
exists at least one input on which the two algorithms diﬀer (for the same randomness). Observe
that δi,{c,d} is symmetric in c and d. Each party Pi generates long-term private key / public
key pairs (ski,c, pki,c) for each sub-protocol SPc using SPc.KeyGen(), but, for all d > c such that
δi,{c,d} = 1, sets (ski,d, pki,d) = (ski,c, pki,c). We say that there is no key re-use if all δi,{c,d} = 0.
Sessions. Each party can execute multiple sessions of the protocol, either concurrently or
i , where s ∈ {1, . . . , nS}.
subsequently. We will denote the sth session of a protocol at party Pi by πs
We overload the notation so that πs
i also denotes the per-session variables π for this session.
Each session within a party has read access to the party’s long-term keys. The per-session
i .(c, pid, α, k, sid) are initialized to (⊥,⊥, in-progress,⊥,⊥). For the purposes of
variables πj
deﬁning ciphertext indistinguishability and integrity, each session upon initialization chooses a
i .b $← {0, 1}. Each session also maintains additional variables for stateful
uniform random bit πs
encryption/decryption as required in Figure 3.
10
Encrypt(i, s, m0, m1):
1. u ← u + 1
e) $← SPc.Enc(ke, m0, st0
2. (C(0), st0
e)
e) $← SPc.Enc(ke, m1, st1
3. (C(1), st1
e)
4. if C(0) = ⊥ or C(1) = ⊥ then
return ⊥
6. C[u] ← C(b)
7. return C(b)
5.
Decrypt(i, s, C):
i .pid, v ← v + 1
1. (j, t) ← πs
2. (m, std) ← SPc.Dec(kd, C, std)
3. if m = ⊥p then return ⊥
4. if b = 0 then return ⊥
5. if v > πt
phase ← 1
6.
7. if phase = 1 then return m
8. return ⊥
j.u or C (cid:54)= πt
j.C[v] then
Figure 3: Encrypt and Decrypt queries in the multi-ciphersuite ACCE security experiment.
Note that b, c, C[], kd, ke, std, ste, u, v denote the values stored in the per-session variables πs
contains the party identiﬁer j, once πs
challenger. The Decrypt query accounts for buﬀering in the third line; this is the diﬀerence from ACCE’s original stateful
length-hiding deﬁnition [20, 26].
i has a unique matching session πt
i has accepted every session πs
j known to the
i . Although πs
i .pid only
Adversary interaction. The adversary controls all communications between parties:
it
directs parties to initiate sessions, delivers messages to parties, and can reorder, alter, delete,
and create messages. The adversary can also compromise certain long-term and per-session
values of parties. The adversary interacts with parties using the following queries.
The ﬁrst query models normal, unencrypted communication of parties during session estab-
lishment.
• Send(i, s, m) $→ m(cid:48): The adversary sends message m to session πs
message m according to the protocol speciﬁcation and its per-session state πs
per-session state, and optionally outputs an outgoing message m(cid:48).
There is a distinguished initialization message which allows the adversary to activate the
session with certain information. In particular, the initialization message consists of: the
role ρ the party is meant to play in this session; the ordered list (cid:126)sp of sub-protocols the
party should use in this session; and optionally the identity pid of the intended partner of
this session.
This query may return error symbol ⊥ if the session has entered state α = accept and no
more protocol messages are transmitted over the unencrypted channel.
i . Party Pi processes
i , updates its
The next two queries model adversarial compromise of long-term and per-session secrets.
• Reveal(i, s) → k: Returns session key πs
• Corrupt(i, c) → sk: Returns party Pi’s long-term secret key ski,c for sub-protocol c. Note
the adversary does not take control of the corrupted party, but can impersonate Pi in later
sessions of sub-protocol c.
i .k.
The ﬁnal two queries model communication over the encrypted channel. The adversary
can cause plaintexts to be encrypted as outgoing ciphertexts, and can cause ciphertexts to be
delivered and decrypted as incoming plaintexts.
• Encrypt(i, s, m0, m1) $→ C: This query takes as input two messages m0 and m1. If πs
i .k = ⊥,
the query returns ⊥. Otherwise, it proceeds as in Figure 3, depending on the random bit
πs
i at the beginning of the game and the state variables of πs
i .b sampled by πs
i .
• Decrypt(i, s, C) → m or ⊥: This query takes as input a ciphertext C. If πs
i .k = ⊥, the
query returns ⊥. Otherwise, it proceeds as in Figure 3. Note in particular that decryption
can be buﬀered, meaning a decryption state may be maintained containing unprocessed
bytes of a partial ciphertext.
Together, these two oracles model the BSAE notion, which simultaneously captures (i)
indistinguishability under chosen ciphertext attack, (ii) integrity of ciphertexts, and (iii) buﬀered
in-order delivery of ciphertexts. The hidden bit πs
i .b is leaked to the adversary if any of these
goals is violated.
11
3.2 Security deﬁnitions
Security of ACCE protocols is deﬁned by requiring that (i) the protocol is a secure authentication
protocol, and (ii) the encrypted channel provides authenticated and conﬁdential communication
in the sense of buﬀered stateful authenticated encryption (Section 2.3). In the multi-ciphersuite
setting, security is further augmented by requiring that the parties agree on the sub-protocol
used.
Multi-ciphersuite ACCE security experiment. The security experiment is played be-
tween an adversary A and a challenger who implements all parties according to the multi-
ciphersuite ACCE execution environment. The adversary sets the values of the long-term key
re-use variables δi,{c,d}. After the challenger initializes long-term keys based on δi,{c,d}, the
adversary receives the long-term public keys of all parties, then interacts with the challenger
using Send, Reveal, Corrupt, Encrypt, and Decrypt queries. Finally, the adversary outputs a triple
(i, s, b(cid:48)) and terminates. We begin by deﬁning when sessions match.
Deﬁnition 4 (Matching sessions). We say that session πt
j matches πs
i if
j.ρ;
j.c; and
i .ρ (cid:54)= πt
• πs
• πs
i .c = πt
• πs
i .sid preﬁx-matches πt
πt
j.sid is a preﬁx of πs
j.sid, meaning that (i) if πs
i sent the last message in πs
i .sid, or (ii) if πt
j sent the last message in πs
i .sid, then πs
i .sid, then
j.sid.
i .sid = πt
Note that for SSH, session IDs consist of a single value and thus not only preﬁx-match, but
j.sid (see Section A.2). Thus the “matching” relation is symmetric
i .sid = πt
must be identical: πs
and thus easier to handle.
Next we give mutual and server-only authentication deﬁnitions, based on the existence of
matching sessions. For server-only authentication, we are only concerned about clients accepting
without a matching server session.
Deﬁnition 5 (Authentication). Let πs
sub-protocol c∗ if
i be a session. We say that πs
i accepts maliciously for
• πs
• πs
• πs
i .α = accept;
i .c = c∗; and
i .pid = j (cid:54)= ⊥, where no Corrupt(j, c∗) query was issued before πs
Corrupt(j, d) for any d such that δj,{c∗,d} = 1,
j which matches πs
i .
but there is no unique session πt
NP(cid:107) (cid:126)SP,c∗
Deﬁne Advmcs-acce-auth
(A) as the probability that, when A terminates in the multi-ciphersuite
ACCE experiment for NP(cid:107) (cid:126)SP, there exists a session that has accepted maliciously for sub-protocol
c∗.
(A) as the probability that, when A terminates in the multi-ciphersuite
i .ρ = init) that has
ACCE experiment for NP(cid:107) (cid:126)SP, there exists an initiator session (i.e., with πs
accepted maliciously for sub-protocol c∗.
Deﬁne Advmcs-acce-so-auth
NP(cid:107) (cid:126)SP,c∗
i accepted, nor
Channel security is deﬁned by the ability to break conﬁdentiality or integrity of the channel.
Formally, this is deﬁned as the ability of the adversary to guess the bit b used in the Encrypt and
Decrypt queries of an uncompromised session. “Uncompromised” means that the adversary did
not reveal the session key at either the session or any matching session, and that that adversary
did not corrupt the long-term keys of either party in the session. We give variants for mutually
and server-only authenticated channels.
Deﬁnition 6 (Channel security). Suppose A outputs (i, s, b(cid:48)) in the multi-ciphersuite ACCE
experiment. We say that A answers the encryption challenge correctly for subprotocol c∗ if
12
for any d such that δj,{c∗,d} = 1;
• no Reveal(i, s) query was issued;
• no Reveal(j, t) query was issued for any πt
• πs
Deﬁne Advmcs-acce-aenc
i .b = b(cid:48).
NP(cid:107) (cid:126)SP,c∗