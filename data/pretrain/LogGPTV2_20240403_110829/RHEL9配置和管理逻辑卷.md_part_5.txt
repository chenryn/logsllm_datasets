        ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 警告 {.title}
        您还可以使用带有相同参数的 `lvresize`{.literal}
        命令扩展逻辑卷，但这个命令不能保证意外收缩。
        :::
    2.  要扩展 [*mylv*]{.emphasis} 逻辑卷使其占据 [*myvg*]{.emphasis}
        卷组中所有未分配的空间，请使用以下命令：
        ``` literallayout
        # lvextend -l +100%FREE /dev/myvg/mylv
         Size of logical volume myvg/mylv changed from 10.00 GiB (2560 extents) to 6.35 TiB (1665465 extents).
         Logical volume myvg/mylv successfully resized.
        ```
        与 `lvcreate`{.literal} 命令一样，您可以使用
        `lvextend`{.literal} 命令的 `-l`{.literal}
        参数来指定扩展数目，从而增大逻辑卷的大小。您还可以使用此参数指定卷组的比例或者卷组中剩余空间的比例。
    :::
3.  如果您没有在 `lvextend`{.literal} 命令中使用 `r`{.literal}
    选项来扩展 LV
    并使用单个命令重新定义文件系统大小，请使用以下命令重新定义逻辑卷上的文件系统大小：
    ``` literallayout
    xfs_growfs /mnt/mnt1/
    meta-data=/dev/mapper/myvg-mylv  isize=512    agcount=4, agsize=65536 blks
             =                       sectsz=512   attr=2, projid32bit=1
             =                       crc=1        finobt=1, sparse=1, rmapbt=0
             =                       reflink=1
    data     =                       bsize=4096   blocks=262144, imaxpct=25
             =                       sunit=0      swidth=0 blks
    naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
    log      =internal log           bsize=4096   blocks=2560, version=2
             =                       sectsz=512   sunit=0 blks, lazy-count=1
    realtime =none                   extsz=4096   blocks=0, rtextents=0
    data blocks changed from 262144 to 524288
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果没有 `-D`{.literal} 选项，`xfs_growfs`{.literal}
    将文件系统增大到底层设备支持的最大大小。如需更多信息，请参阅[增加
    XFS
    文件系统的大小](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_file_systems#assembly_increasing-the-size-of-an-xfs-file-system_getting-started-with-xfs){.link}。
    :::
    有关重新定义 ext4 文件系统大小的信息，请参阅[重新定义 ext4
    文件系统大小](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_file_systems#resizing-an-ext-file-system_getting-started-with-an-ext4-file-system){.link}。
:::
::: itemizedlist
**验证**
-   使用以下命令验证文件系统是否在增长：
    ``` literallayout
    # df -Th
    Filesystem            Type      Size  Used Avail Use% Mounted on
    devtmpfs              devtmpfs  1.9G     0  1.9G   0% /dev
    tmpfs                 tmpfs     1.9G     0  1.9G   0% /dev/shm
    tmpfs                 tmpfs     1.9G  8.6M  1.9G   1% /run
    tmpfs                 tmpfs     1.9G     0  1.9G   0% /sys/fs/cgroup
    /dev/mapper/rhel-root xfs        45G  3.7G   42G   9% /
    /dev/vda1             xfs      1014M  369M  646M  37% /boot
    tmpfs                 tmpfs     374M     0  374M   0% /run/user/0
    /dev/mapper/myvg-mylv xfs       2.0G   47M  2.0G   3% /mnt/mnt1
    ```
:::
::: itemizedlist
**其他资源**
-   `vgextend(8)`{.literal}, `lvextend(8)`{.literal}, 和
    `xfs_growfs(8)`{.literal} man 页
:::
:::
::: section
::: titlepage
# []{#modifying-the-size-of-a-logical-volume_configuring-and-managing-logical-volumes.html#shrinking-logical-volumes_modifying-the-size-of-a-logical-volume}缩小逻辑卷 {.title}
:::
您可以使用 `lvreduce`{.literal} 命令来减小逻辑卷的大小。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
GFS2 或者 XFS 文件系统不支持缩小，因此您无法缩小包含 GFS2 或者 XFS
文件系统的逻辑卷大小。
:::
如果您要缩小的逻辑卷包含一个文件系统，为了防止数据丢失，必须确定该文件系统没有使用将被缩小的逻辑卷中的空间。因此，建议您在逻辑卷包含文件系统时使用
`lvreduce`{.literal} 命令的 `--resizefs`{.literal} 选项。
当您使用这个选项时，`lvreduce`{.literal}
命令会在缩小逻辑卷前尝试缩小文件系统。如果缩小文件系统失败，就像文件系统已满或者文件系统不支持缩小一样，则
`lvreduce`{.literal} 命令将失败，且不会尝试缩小逻辑卷。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
在大多数情况下，`lvreduce`{.literal}
命令会警告可能的数据丢失，并要求进行确认。但是，您不应该依赖于这些确认提示来防止数据丢失，因为在某些情况下，您不会看到这些提示信息，比如当逻辑卷不活跃或者没有使用
`--resizefs`{.literal} 选项时。
请注意，使用 `lvreduce`{.literal} 命令的 `--test`{.literal}
选项不指示操作是安全的，因为此选项不会检查文件系统或测试文件系统大小。
:::
::: itemizedlist
**步骤**
-   要将 [*myvg*]{.emphasis} 卷组中 [*mylv*]{.emphasis} 逻辑卷缩小到
    64MB，请使用以下命令：
    ``` literallayout
    # lvreduce --resizefs -L 64M myvg/mylv
    fsck from util-linux 2.37.2
    /dev/mapper/myvg-mylv: clean, 11/25688 files, 4800/102400 blocks
    resize2fs 1.46.2 (28-Feb-2021)
    Resizing the filesystem on /dev/mapper/myvg-mylv to 65536 (1k) blocks.
    The filesystem on /dev/mapper/myvg-mylv is now 65536 (1k) blocks long.
    Size of logical volume myvg/mylv changed from 100.00 MiB (25 extents) to 64.00 MiB (16 extents).
     Logical volume myvg/mylv successfully resized.
    ```
    在本例中，[*mylv*]{.emphasis}
    包含一个文件系统，该命令可调整逻辑卷的大小。
-   在调整大小值前指定 `-`{.literal}
    符号表示该值将从逻辑卷的实际大小中减小。要将逻辑卷缩小到
    64MB，请使用以下命令：
    ``` literallayout
    # lvreduce --resizefs -L -64M myvg/mylv
    ```
:::
::: itemizedlist
**其他资源**
-   `lvreduce(8)`{.literal} man 页
:::
:::
:::
[]{#snapshot-of-logical-volumes_configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#snapshot-of-logical-volumes_configuring-and-managing-logical-volumes.html#snapshot-of-logical-volumes_configuring-and-managing-logical-volumes}第 6 章 逻辑卷快照 {.title}
:::
使用 LVM 快照功能，您可以创建卷的虚拟镜像，例如
[*/dev/sda*]{.emphasis}，而不造成服务中断。
::: section
::: titlepage
# []{#snapshot-of-logical-volumes_configuring-and-managing-logical-volumes.html#overview-of-snapshot-volumes_snapshot-of-logical-volumes}快照卷概述 {.title}
:::
当您提取快照后修改原始卷（原始卷）时，快照功能会在更改之前被修改的数据区域制作一个副本，以便重建卷的状态。当您创建快照时，仍可对原始卷进行完全读写访问。
因为快照只复制创建快照后更改的数据区域，快照功能需要最小存储量。例如，对于很少更新的原始卷，原始容量的
3-5%
就足以进行快照维护。它不提供备份过程的替换。快照副本是虚拟副本，不是实际的介质备份。
快照的大小控制了保存原始卷更改的空间大小。例如，如果您创建快照并完全覆盖原始卷，则快照应至少与原始卷大小来容纳更改。您应该定期监控快照的大小。例如：大多数读卷的一个简短快照（如
`/usr`{.literal} ）需要较少的空间，因为它包含很多写入操作，如
`/home`{.literal}。
如果快照已满，则快照会变得无效，因为它无法跟踪原始卷上的更改。但是，您可以将
LVM 配置为在其使用超过 `snapshot_autoextend_threshold`{.literal}
值时自动扩展快照，以避免快照无效。快照可以完全重新定义，您可以执行以下操作：
::: itemizedlist
-   如果您有存储容量，您可以增大快照卷以防止它被丢弃。
-   如果快照卷大于您需要，您可以减小卷的大小来释放其他逻辑卷所需空间。
:::
快照卷提供以下优点：
::: itemizedlist
-   大多数情况下，当您需要在逻辑卷中执行备份时，您会获得快照，而无需停止持续更新数据的
    live 系统。
-   您可以在快照文件系统中执行 `fsck`{.literal}
    命令来检查文件系统的完整性，并确定原始文件系统是否需要修复。
-   由于快照是读/写的，您可以通过执行快照并对快照运行测试，而无需影响真实数据，从而对应用程序进行测试。
-   您可以创建用于 Red Hat Virtualization 的 LVM 卷。您可以使用 LVM
    快照来创建虚拟客户机镜像的快照。这些快照可方便修改现有客户虚拟机或者使用最小附加存储创建新客户虚拟机。
:::
:::
::: section
::: titlepage
# []{#snapshot-of-logical-volumes_configuring-and-managing-logical-volumes.html#creating-a-snapshot-of-the-original-volume_snapshot-of-logical-volumes}创建原始卷的快照 {.title}
:::
使用 `lvcreate`{.literal} 命令以及 `-s`{.literal} 或 `--size`{.literal}
参数，后跟创建原始卷的快照所需的大小。卷的快照是可写的。默认情况下，与精简配置的快照相比，在正常激活命令中会使用原始卷激活快照卷。LVM
不支持创建大于原始卷大小和卷所需的元数据大小的快照卷。如果您指定大于这个卷的快照卷，LVM
会创建一个原始卷大小所需的快照卷。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
集群中的节点不支持 LVM
快照。您不能在共享卷组中创建快照卷。然而，如果您需要在共享逻辑卷中创建一致的数据备份，您可以单独激活该卷，然后创建快照。
:::
下面的步骤创建了名为 [*origin*]{.emphasis}
的源逻辑卷以及这个原始卷的快照卷，名为 [*snap*]{.emphasis}。
::: itemizedlist
**先决条件**
-   您已创建了卷组 [*vg001*]{.emphasis}。如需更多信息，请参阅[创建 LVM
    卷组](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_logical_volumes/managing-lvm-volume-groups_configuring-and-managing-logical-volumes#creating-lvm-volume-group_managing-lvm-volume-groups){.link}。
:::
::: orderedlist
**步骤**
1.  从卷组 [*vg001*]{.emphasis} 中创建名为 [*origin*]{.emphasis}
    的逻辑卷：
    ``` literallayout
    # lvcreate -L 1G -n origin vg001
    Logical volume "origin" created.
    ```
2.  创建名为 [*snap*]{.emphasis} 的 [*/dev/vg001/origin*]{.emphasis}
    的快照逻辑卷，大小为 [*100 MB*]{.emphasis} ：
    ``` literallayout
    # lvcreate --size 100M --name snap --snapshot /dev/vg001/origin
      Logical volume "snap" created.
    ```
    如果原始逻辑卷包含一个文件系统，您可以在任意目录中挂载快照逻辑卷，以便访问文件系统的内容，并在不断更新原始文件系统时进行备份。
3.  显示原始卷以及正在使用的快照卷的比例：
    ``` literallayout
    # lvs -a -o +devices
      LV      VG    Attr       LSize  Pool Origin Data% Meta% Move Log Cpy%Sync Convert Devices
     origin vg001  owi-a-s---  1.00g                                                  /dev/sde1(0)
      snap vg001  swi-a-s--- 100.00m     origin 0.00                                 /dev/sde1(256)
    ```
    您也可以使用
    `lvdisplay  /dev/vg001/origin 命令，显示所有快照逻辑卷及其状态的逻辑卷 /dev/vg001/origin`{.literal}
    状态，如活动或不活动状态。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    因为快照在原始卷有变化时会增加，所以通常使用 `lvs`{.literal}
    命令监控快照卷的比例以确保其不会满。使用了 100%
    的快照会完全丢失，因为对原始卷中未更改的部分的写入无法在不破坏快照的情况下无法成功。
    :::
4.  您可以将 LVM 配置为在其使用量超过
    `snapshot_autoextend_threshold`{.literal}
    值时自动扩展快照，以避免快照在 100% 满时无效。查看来自
    `/etc/lvm.conf`{.literal} 文件中的
    `snapshot_autoextend_threshold`{.literal} 和
    `snapshot_autoextend_percent`{.literal}
    选项的现有值，并根据要求对其进行编辑。
    在以下示例中，根据您的要求将
    `snapshot_autoextend_threshold`{.literal} 选项设置为值小于
    100，`snapshot_autoextend_percent`{.literal} 选项的值如下：
    ``` literallayout
    # vi /etc/lvm.conf
    snapshot_autoextend_threshold = 70
    snapshot_autoextend_percent = 20
    ```
    您还可以执行以下命令手动扩展此快照：
    ``` literallayout
    # lvextend -L+100M /dev/vg001/snap
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    此功能需要卷组中的未分配空间。快照的自动扩展不会将快照卷增加到超过计算的快照所需的最大值。一旦快照增长到足够大来覆盖原始数据后，便不会再监控它是否发生了自动扩展。
    :::
:::
::: itemizedlist
**其他资源**
-   `lvcreate(8)、`{.literal} `lvextend(8)`{.literal} 和
    `lvs(8)`{.literal} man page
-   `/etc/lvm/lvm.conf`{.literal} file
:::
:::
::: section
::: titlepage
# []{#snapshot-of-logical-volumes_configuring-and-managing-logical-volumes.html#merging-snapshot-to-its-original-volume_snapshot-of-logical-volumes}将快照合并到其原始卷 {.title}
:::