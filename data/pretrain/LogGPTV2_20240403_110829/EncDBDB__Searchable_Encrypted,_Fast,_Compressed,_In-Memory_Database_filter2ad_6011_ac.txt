not to have intentional data leakage.
Various research studies have shown that SGX is vulner-
able to processor bugs [31], [32], [33], [34], side-channel
attacks [35], [36], [37], and enclave code exploits [38], [39].
Microcode updates for the processor bugs are available and
SGX’s TCB recovery [40] can be used to ensure an updated
microcode. Furthermore, EncDBDB has minimal enclave
code; therefore, mitigations strategies against side-channel
attacks [41], [42], [43] can easily be integrated. Enclave code
exploits can be found with formal software veriﬁcation [44].
We consider SGX vulnerabilities and mitigations an orthogonal
problem and do not further consider them in this paper. Integrity,
hardware, and DoS attacks are out of scope. Additionally,
rollback protection is out of scope, but it is likely that existing
techniques [45], [46] can be integrated into EncDBDB.
IV. ENCRYPTED DICTIONARIES
In this section, we ﬁrst use range queries to describe the
nine encrypted dictionaries that EncDBDB offers. Afterwards,
we present how other query types are supported.
The encrypted dictionaries differ from each other in two
dimensions—repetition and order of values in the dictionary—
with three options each (see Table II). An encrypted dictionary
is deﬁned by one option from each dimension. Next, we brieﬂy
describe how the six options impact the encrypted dictionaries
regarding security, performance, and storage efﬁciency. Then,
we describe each encrypted dictionary in detail.
The repetition options increase the number of repeated
dictionary values from frequency revealing to frequency hiding.
This affects two features of the resulting encrypted dictionaries
(see Table III): the security feature frequency leakage and
the dictionary size |D|. Note that |D| is ﬁxed for frequency
revealing and frequency hiding. For frequency smoothing, the
worst-case size is |A|, but we give the average size, which
depends on a conﬁgurable parameter bsmax.
The order options affect the order of dictionary values, which
determines two features of the encrypted dictionaries (see
Table IV). First, they determine the security feature order
leakage, i.e., the information an attacker with memory access
can learn about the plaintext order of the encrypted values
in D. Second, they determine the search time combining the
dictionary and attribute vector search time. The dictionary
search time depends on |D| and the search algorithms, which
differ for the order options. The attribute vector search time
depends on the number of ValueIDs returned by the dictionary
search, because A has to be scanned for all of them.
Three operations differ for the nine encrypted dictionaries: (1)
encrypted dictionary creation at the data owner, (2) dictionary
search inside the enclave at the cloud provider, and (3) attribute
vector search in the untrusted realm at the cloud provider. In
the next sections, we denote the corresponding operations by
(1) EncDB, (2) DSearch, and (3) ASearch, and describe these
operations in detail.
As mentioned before, an encrypted dictionary is deﬁned by
an order and a repetition option. We start by describing the
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:56 UTC from IEEE Xplore.  Restrictions apply. 
441
Column
RecordID
0
1
2
3
4
5
FName
Jessica 
Ella
Archie
Jessica 
Hans
Jessica 
(a) Column C
Dictionary
Value
Archie
Ella
Jessica
Hans
ValueID
0
1
2
3
Attribute Vector
ValueID
RecordID
2
0
1
1
0
2
2
3
34
2
5
Dictionary
Value
Ella
Jessica 
Hans
Archie
ValueID
0
1
2
3
Attribute Vector
ValueID
RecordID
1
0
0
1
3
2
1
3
24
1
5
Dictionary
Value
Hans
Jessica 
Ella
Archie
ValueID
0
1
2
3
Attribute Vector
ValueID
RecordID
1
0
2
1
3
2
1
3
04
1
5
(b) ED1
(c) ED2 with rndOffset = 3
(d) ED3
Fig. 3: (a) Example column C processed with (b) ED1, (c) ED2, and (d) ED3 before encryption.
frequency revealing option and explain how it is combined
with the three order options to instantiate ED1–ED3. Then,
we do the same for the frequency smoothing option and its
combinations (ED4–ED6), followed by the frequency hiding
option and its combinations (ED7–ED9). Throughout
the
following description, we always assume a closed search range
to provide a concise description. However, open or half-open
ranges can be handled trivially.
1) Frequency revealing: For the frequency revealing option,
the split of a column C is performed by inserting each unique
column value v ∈ un(C) into D exactly once at an arbitrary
position, i.e., |D| = |un(C)| ∧ ∀ v ∈ un(C) : v ∈ D. The
ValueIDs in A are set such that the split is correct according
to Def. 1.
This column split provides the best compression rate possible
with dictionary encoding; thus, frequency revealing is the most
storage efﬁcient repetition option. However, an attacker can
learn the frequency of each value Dj ∈ D by counting the
occurrences of j in A. This is still the case if each v ∈
D is encrypted with authenticated encryption, because the
encryption does not affect the indices in A. Therefore, the
three frequency revealing encrypted dictionaries presented next
have full frequency leakage.
ED1. For each column C that is protected with ED1, EncDB1
performs the frequency revealing column split, sorts the values
in D lexicographically, and adjusts the ValueIDs in A such
that the split is correct. Afterwards, EncDB1 derives SK D
from the data owner’s secret key SK DB, the table name, and
the column name. It then encrypts all values in D individually
with AEEnc under SK D. The resulting dictionary containing
encrypted values is denoted by eD. Fig. 3a presents an example
column C and Fig. 3b the result of ED1 before AEEnc is
performed. ED1 has full order leakage because an attacker
knows the plaintext order of the encrypted values in eD.
ED1’s dictionary search DSearch1, which is executed in the
enclave at the cloud provider, is presented in Algo. 1. The
function gets an encrypted range τ and an encrypted dictionary
eD as input. First it derives SK D and decrypts the start and
end of the range individually. Then, one leftmost and one
rightmost binary search is performed to ﬁnd the dictionary
indices where the searched range starts (vidmin) and ends
(vidmax). All dictionary values are encrypted and stored in
untrusted memory. The binary searches load the values into
the enclave individually, decrypt them, and compare them with
the search value. The number of load, decrypt, and compare
operations is logarithmic in |D|. For brevity, we omit one
detail in Algo. 1, which is used in our implementation: the
results of the searches, and whether or not a value was found,
is used to handle cases in which a value is not present.
Algorithm 1 DSearch1(τ , eD)
1: SKD = DeriveKey(SKDB, colN ame, tabN ame)
2: Rs = AEDec(SKD, τ s), Re = AEDec(SKD, τ e)
3: vidmin = BinarySearchLM(eD, Rs)
4: vidmax = BinarySearchRM(eD, Re)
5: return vid = [vidmin, vidmax]
Note that only very small, constant enclave memory is required
for DSearch1 as well as for the DSearch operations of all
other encrypted dictionaries. Speciﬁcally, the required enclave
memory is independent of |D|.
ASearch1 is executed in the untrusted realm at the cloud
provider. It linearly scans the corresponding A, checks if the
ValueIDs fall between vidmin and vidmax, and returns the
matching RecordIDs rid, i.e., rid = {i| Ai ∈ A ∧ Ai ∈
[vidmin, vidmax]}.
ED2. The idea of ED2 is to sort and randomly rotate D
and it is based on [47]. EncDB2 executes the frequency
revealing column split, sorts the values in D lexicographically,
generates a random offset rndOffset, and rotates D by this
offset. More formally, let D(cid:2) be the sorted dictionary, then
D = (Di | Di = D(cid:2)
j ∧ i = (j + rndOffset) mod |D(cid:2)|).
Afterwards, EncDB2 adjusts the ValueIDs in A such that the
split is correct. Finally, it encrypts rndOffset and each v ∈ D
with AE under SK D, resulting in encRndOffset and eD. The
order leakage of EncDB2 is bounded, because an attacker who
can observe no or a limited number of queries, does not know
where the smallest and largest values are stored in eD.
Fig. 3c illustrates an example with rndOffset = 3 (before
encryption). For instance, “Jessica” has the ValueID 2 in a
sorted dictionary D(cid:2). After the rotation, the ValueID is 1 =
(2 + 3) mod 4.
The processing inside the enclave (DSearch2) is illustrated
in Algo. 2. It uses a special binary search variant, which is
explained in the next paragraph, to search the start and end
indices of the range—vidmin and vidmax. These indices have
to be processed further inside the enclave, because the positions
of the indices relative to rndOffset deﬁne the ﬁnal result of
the dictionary search and rndOffset is sensitive. There are
three possibilities: both indices are lower than rndOffset; both
are greater than or equal to rndOffset; or vidmin is above
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:56 UTC from IEEE Xplore.  Restrictions apply. 
442
Algorithm 2 DSearch2(τ , eD, encRndOffset)
1: SKD = DeriveKey(SKDB, colN ame, tabN ame)
2: Rs = AEDec(SKD, τ s), Re = AEDec(SKD, τ e)
3: rndOffset = AEDec(SKD, encRndOffset)
4: vidmin = BinSearchSpecialS(eD, Rs, rndOffset, SKD)
5: vidmax = BinSearchSpecialE(eD, Re, rndOffset, SKD)
6: vid = ∅
7: if (vidmin < rndOffset & vidmax < rndOffset) |
8:
9:
10: else if vidmin (cid:2) rndOffset & vidmax < rndOffset then
11:
12:
13:
14:
15:
16: end if
17: return vid
(vidmin (cid:2) rndOffset & vidmax (cid:2) rndOffset) then
vid = {[vidmin, vidmax], [−1, −1] }
if vidmin ! = |eD| then
vid = {[0, vidmax], [vidmin, |eD| − 1] }
vid = {[0, vidmax], [−1, −1] }
end if
else
Algorithm
3
rndOffset, SKD)
1: l = 0, h = |eD|
2: r = Encode(AEDec(SKD, eD0))
3: N = Encode(column maximum)
4: sV al = (Encode(sV al) − r) %N
5: while l < h do
6:
7:
8:
9:
10:
11:
12:
end if
13:
14: end while
15: return (l) (l − 1)
j = (cid:7)(l + h)/2(cid:8)
m = Encode(AEDec(SKD, eDj ))
cV al = (m − r)%N
if (cV al < sV al) (cV al <= sV al) then
l = j + 1
BinSearchSpecialS/BinSearchSpecialE(eD, sV al,
else
h = j
and vidmax is below rndOffset. In the ﬁrst and second case,
the results are in the range [vidmin, vidmax]. In the third case,
there are again two possibilities: vidmin does or does not equal
|eD|. In the ﬁrst case, the range start was not found in eD, but
it is higher than the last value in it. Accordingly, all results are
in the range [0, vidmax]. Otherwise, the results are split in a
lower range [0, vidmax] and an upper range [vidmin,|eD| −1].
We always return a dummy range if the result is only one range
to simplify attribute vector search.
the details of
Algo. 3 presents
the special binary
search with slightly different handling of the range start
(BinSearchSpecialS) and end (BinSearchSpecialE). The goal
is to perform a binary search that has an access pattern that
is independent of rndOffset. A binary search that considers
rndOffset during the data access would leak rndOffset in the
ﬁrst round, which would thwart the additional protection.
To achieve this goal, Algo. 3 uses a string encoding operation
Encode, which converts string values of a ﬁxed maximal length
to an integer representation preserving the lexicographical
data order. Each character is converted individually to an
integer of ﬁxed length and the integers are concatenated to
one resulting integer. The lexicographical order is preserved by
right padding the resulting integer to a ﬁxed maximal length.
In many DBMSes, the values in each column of a database
443
have a ﬁxed maximal length, which is ﬁxed either implicitly by
the datatype, e.g., 32 bit for INTEGER columns (in MySQL),
or ﬁxed explicitly with the datatype, e.g., 30 characters for
VARCHAR(30) columns. For instance, Encode converts “AB”
to the decimal 3334000000 for a VARCHAR(5) column.
The runtime of DSearch2 is logarithmic in |D| and the
encoding introduces only a constant factor compared to