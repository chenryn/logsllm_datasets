        Idaho
        state
                United States
                country
                        North America
                        continent
        Lucy
```
RDF 有一些奇怪之处，因为它是为了在网际网路上交换资料而设计的。三元组的主语，谓语和宾语通常是 URI。例如，谓语可能是一个 URI，如 `` 或 ``，而不仅仅是 `WITHIN` 或 `LIVES_IN`。这个设计背后的原因为了让你能够把你的资料和其他人的资料结合起来，如果他们赋予单词 `within` 或者 `lives_in` 不同的含义，两者也不会冲突，因为它们的谓语实际上是 `` 和 ``。
从 RDF 的角度来看，URL `` 不一定需要能解析成什么东西，它只是一个名称空间。为避免与 `http://URL` 混淆，本节中的示例使用不可解析的 URI，如 `urn：example：within`。幸运的是，你只需在档案顶部对这个字首做一次宣告，后续就不用再管了。
### SPARQL 查询语言
**SPARQL** 是一种用于三元组储存的面向 RDF 资料模型的查询语言【43】（它是 SPARQL 协议和 RDF 查询语言的缩写，发音为 “sparkle”）。SPARQL 早于 Cypher，并且由于 Cypher 的模式匹配借鉴于 SPARQL，这使得它们看起来非常相似【37】。
与之前相同的查询 —— 查询从美国移民到欧洲的人 —— 使用 SPARQL 比使用 Cypher 甚至更为简洁（请参阅 [例 2-9]()）。
**例 2-9 与示例 2-4 相同的查询，用 SPARQL 表示**
```sparql
PREFIX : 
SELECT ?personName WHERE {
  ?person :name ?personName.
  ?person :bornIn  / :within* / :name "United States".
  ?person :livesIn / :within* / :name "Europe".
}
```
结构非常相似。以下两个表示式是等价的（SPARQL 中的变数以问号开头）：
```
(person) -[:BORN_IN]-> () -[:WITHIN*0..]-> (location)   # Cypher
?person :bornIn / :within* ?location.                   # SPARQL
```
因为 RDF 不区分属性和边，而只是将它们作为谓语，所以可以使用相同的语法来匹配属性。在下面的表示式中，变数 `usa` 被系结到任意 `name` 属性为字串值 `"United States"` 的顶点：
```
(usa {name:'United States'})   # Cypher
?usa :name "United States".    # SPARQL
```
SPARQL 是一种很好的查询语言 —— 尽管它构想的语义网从未实现，但它仍然是一种可用于应用程式内部的强大工具。
> #### 图形资料库与网状模型相比较
>
> 在 “[文件资料库是否在重蹈覆辙？](#文件资料库是否在重蹈覆辙？)” 中，我们讨论了 CODASYL 和关系模型如何竞相解决 IMS 中的多对多关系问题。乍一看，CODASYL 的网状模型看起来与图模型相似。CODASYL 是否是图形资料库的第二个变种？
>
> 不，他们在几个重要方面有所不同：
>
> * 在 CODASYL 中，资料库有一个模式，用于指定哪种记录型别可以巢状在其他记录型别中。在图形资料库中，不存在这样的限制：任何顶点都可以具有到其他任何顶点的边。这为应用程式适应不断变化的需求提供了更大的灵活性。
> * 在 CODASYL 中，达到特定记录的唯一方法是遍历其中的一个访问路径。在图形资料库中，可以透过其唯一 ID 直接引用任何顶点，也可以使用索引来查询具有特定值的顶点。
> * 在 CODASYL 中，记录的子专案是一个有序集合，所以资料库必须去管理它们的次序（这会影响储存布局），并且应用程式在插入新记录到资料库时必须关注新记录在这些集合中的位置。在图形资料库中，顶点和边是无序的（只能在查询时对结果进行排序）。
> * 在 CODASYL 中，所有查询都是命令式的，难以编写，并且很容易因架构变化而受到破坏。在图形资料库中，你可以在命令式程式码中手写遍历过程，但大多数图形资料库都支援高阶宣告式查询，如 Cypher 或 SPARQL。
>
>
### 基础：Datalog
**Datalog** 是比 SPARQL、Cypher 更古老的语言，在 20 世纪 80 年代被学者广泛研究【44,45,46】。它在软体工程师中不太知名，但是它是重要的，因为它为以后的查询语言提供了基础。
实践中，Datalog 在有限的几个资料系统中使用：例如，它是 Datomic 【40】的查询语言，Cascalog 【47】是一种用于查询 Hadoop 大资料集的 Datalog 实现 [^viii]。
[^viii]: Datomic 和 Cascalog 使用 Datalog 的 Clojure S 表示式语法。在下面的例子中使用了一个更容易阅读的 Prolog 语法，但两者没有任何功能差异。
Datalog 的资料模型类似于三元组模式，但进行了一点泛化。把三元组写成 **谓语**（**主语，宾语**），而不是写三元语（**主语，谓语，宾语**）。[例 2-10]() 显示了如何用 Datalog 写入我们的例子中的资料。
**例 2-10 用 Datalog 来表示图 2-5 中的资料子集**
```prolog
name(namerica, 'North America').
type(namerica, continent).
name(usa, 'United States').
type(usa, country).
within(usa, namerica).
name(idaho, 'Idaho').
type(idaho, state).
within(idaho, usa).
name(lucy, 'Lucy').
born_in(lucy, idaho).
```
既然已经定义了资料，我们可以像之前一样编写相同的查询，如 [例 2-11]() 所示。它看起来与 Cypher 或 SPARQL 的语法差异较大，但请不要抗拒它。Datalog 是 Prolog 的一个子集，如果你是计算机科学专业的学生，可能已经见过 Prolog。
**例 2-11 与示例 2-4 相同的查询，用 Datalog 表示**
```
within_recursive(Location, Name) :- name(Location, Name). /* Rule 1 */