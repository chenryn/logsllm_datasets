title:Group-oriented Proofs of Storage
author:Yujue Wang and
Qianhong Wu and
Bo Qin and
Xiaofeng Chen and
Xinyi Huang and
Yunya Zhou
Group-oriented Proofs of Storage
Yujue Wang
1. School of Computer
Wuhan University, China
2. City University of Hong
Kong, Hong Kong S.A.R.
PI:EMAIL
Qianhong Wu
School of Electronic and
Information Engineering
Beihang University
Beijing, China
PI:EMAIL
Bo Qin
School of Information
Renmin University of China
Beijing, China
PI:EMAIL
Xiaofeng Chen
State Key Laboratory of
Integrated Service Networks
Xidian University
Xi’an, China
PI:EMAIL
Xinyi Huang
School of Mathematics and
Computer Science
Fujian Normal University
Fuzhou, China
PI:EMAIL
Yunya Zhou
School of Electronic and
Information Engineering
Beihang University
Beijing, China
PI:EMAIL
ABSTRACT
We introduces and formalizes the notion of group-oriented
proofs of storage (GPoS). In GPoS, each ﬁle owner, after be-
ing authorized as a member by a group manager, can out-
source ﬁles to a group storage account maintained by an
untrusted party, for example, a cloud storage server, while
anyone can eﬃciently verify the integrity of the remotely
stored ﬁles without seeing the ﬁles. The ﬁle owner’s iden-
tity privacy is preserved against the cloud server while the
group manager can trace the one who outsourced any sus-
picious ﬁle for liability investigation. By novelly identifying
and exploiting several useful properties, that is, homomor-
phic composability and homomorphic veriﬁability in some
signatures, we propose a generic GPoS construction relying
on the security of the underlying signature scheme and the
hardness of the computational Diﬃe–Hellman (CDH) prob-
lem. Following the generic construction, we instantiate a
concrete GPoS scheme with the well-known Boneh–Boyen
short signature. By leveraging the polynomial commitment
technique, the proposed GPoS proposal is optimized with
constant-size bandwidth consumption in proof of storage by
the cloud server. Theoretical analyses and comparisons show
that our GPoS proposal is advantageous over existing PoS-
like schemes in user privacy, public audibility and/or perfor-
mance in a multi-user setting.
Categories and Subject Descriptors
E.5 [Data]: Files
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore, Singapore.
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714630 .
Keywords
Cloud storage, Proofs of Storage, Provable Data Possession,
Proof of Retrievability, Public auditability
1.
INTRODUCTION
Cloud computing provides convenient storage services to
the clients and is widely believed to be a promising technique
to reduce the clients’ local hardware and software mainte-
nance burden of large-scale data storage [6]. However, this
remote storage paradigm also brings security concerns about
integrity and privacy over the outsourced ﬁles [25, 7]. To
address the integrity concern, a number of cryptographic
concepts have been introduced, for example, Proofs of Stor-
age [3], Provable Data Possession (PDP) [1] and Proofs of
Retrievability (PoR) [11].
Although PoS/PDP/PoR have received considerable at-
tentions, most existing proposals, for example, [2, 9, 11,
13, 15, 20, 22, 27], cannot well ﬁt in some real-world ap-
plications. Consider a company purchases remote storage
services from some cloud storage provider (CSP) for storing
ﬁles. The employees should be authorized (e.g., by the IT
department of the company) in a way such that they can up-
load ﬁles to the company’s account maintained by the cloud
storage server. It is easy to see that some speciﬁc informa-
tion (e.g., identity) of the ﬁle owner should be embedded
into the outsourced version of the ﬁle so that the company
manager can know who outsourced the ﬁle if necessary. Oth-
erwise, some dishonest employee may misuse/abuse his/her
ﬁle-outsourcing capability and even worse, unauthorized out-
siders may also upload malicious data to the company’s
cloud storage account without being caught. Also, the ﬁle
uploading information may be used to count up the employ-
ee’s workload, which is usually taken as a critical factor for
evaluating employees’ performance. However, it is usually
the case that the company or the employees would not like
to let the cloud storage server know the identity of the ﬁle
owner who outsources the ﬁle.
1.1 Our Work
Motivated by the above application, we introduce and for-
malize a system of group-oriented proof of storage equipped
with a number of enjoyable functionalities: (1) A trusted
73group manager issues secret keys associated with the mem-
bers’ unique identities. Every member can validate his/her
secret key from the group manager. The members do not
need to share any secret parameters among them. (2) Each
group member can locally process the ﬁles with the issued se-
cret key, without any further help from the group manager.
The produced meta-data in the processed ﬁle is aggregat-
able, which implies economic bandwidth consumption and
storage occupation. (3) Any one can serve as an auditor to
validate the integrity of the outsourced ﬁles for unbound-
ed times by only interacting with the cloud storage server.
The integrity can be successfully audited with overwhelming
probability without retrieving the outsourced ﬁle or inspect-
ing all the ﬁle blocks. (4) The ﬁle owner is anonymous to
the cloud storage server. The server can only know the ﬁle
is uploaded by a legal member of some group, but cannot
trace the identity of the member.
In the meanwhile, the
group manager can reveal the identity of the ﬁle owner for
liability investigation.
We provide a secure generic construction of GPoS schemes.
We ﬁrst formalize the security model for GPoS schemes with
public auditability. A GPoS scheme should be secure a-
gainst conspiracy attacks from group members for forging
secret keys and meta-data. It should be also able to prevent
the cloud storage server involved in auditing the outsourced
ﬁles from forging an integrity proof and from extracting the
ﬁle owner’s identity from maintained ﬁles. The meta-data
must be (1) generated with a secret key issued by the group
manager, (2) aggregatable, (3) publicly auditable, and (4)
ownership privacy-preserving. These requirements raise a
great challenge in GPoS construction. We manage to ad-
dress this challenge by identifying some useful properties,
that is, homomorphic composability and homomorphic ver-
iﬁability (deﬁned in Section 3.1) in some signature schemes.
By exploiting these properties, we propose a generic GPoS
construction proven secure if the underlying signature is
existentially unforgeable and the standard Computational
Diﬃe–Hellman (CDH) assumption holds.
We implement eﬃcient concrete GPoS schemes. Observe
that the well-known Boneh–Boyen short signature scheme
[4] satisﬁes the required properties. By following the generic
construction, we instantiate a practical GPoS scheme un-
der the CDH assumption in the standard model. Particu-
larly, the Boneh–Boyen short signature scheme is employed
to issue secret keys for group members. The resulting G-
PoS scheme takes linearly computation and communication
complexities. The instantiation is further optimized in terms
of communication overheads and computation costs at the
auditor side for auditing the integrity of the outsourced
ﬁles. This optimization leverages the polynomial commit-
ment technique [12] to commit to the aggregated ﬁle block,
which means that the created commitment instead of the
aggregated block itself will be responded to the auditor. To
this end, the security of the optimized instantiation is re-
duced to the s-SDH assumption. One may observe that G-
PoS/PoS/PDP/PoR schemes built over symmetric bilinear
groups may be optimized in the same way, which indicates
that the polynomial commitment based communication op-
timization approach is general and universally useful.
The performance of our GPoS instantiations is compre-
hensively analyzed and compared. The analysis shows that
our schemes are advantageous over existing PoS/PDP/PoR
schemes in the multi-user setting. Our optimized instanti-
ation enjoys an eﬃcient tradeoﬀ for the basic one, that is,
although some additional but aﬀordable computation bur-
den is brought to the resource-redundant cloud server, the
communication overheads are signiﬁcantly saved during au-
dition of the outsourced ﬁles. Particularly, the transmitted
proof comprises of only three elements, independent of the
sector number in a block and the block number in a chal-
lenge.
1.2 Related Work
Considerable eﬀorts have been made to remotely check the
integrity of the outsourced ﬁles in a single-user setting. Ate-
niese et al. [1] and Juels and Kaliski [11] independently in-
vestigated secure storage in untrusted clouds and introduced
the notions of PDP and PoR, respectively. With these tech-
niques, the integrity of the outsourced ﬁles can be audited
without retrieving them back. Speciﬁcally, Ateniese et al.’s
scheme supports unbounded number of integrity auditing.
Shacham and Waters [13] proposed privately and publicly
auditable PoR schemes with strong security proofs. In pri-
vately auditable PDP/PoR, the integrity of the outsourced
ﬁle can only be audited by the one who has the correspond-
ing secret key, that is, the ﬁle owner, while anyone can play
the role as an auditor in publicly auditable schemes. Ate-
niese, Kamara, and Katz [3] showed how to convert a ho-
momorphic identiﬁcation protocol into a public-key homo-
morphic linear authenticator (HLA) and further constructed
PoS from HLA. Dodis, Vadhan, and Wichs [8] improved PoR
using the tools based on the coding and complexity theory.
Wang et al. [20] incorporated a third party auditor (TPA)
into the scheme. Such a TPA is able to audit the outsourced
ﬁles on behalf of owners, but learns nothing about ﬁle con-
tents. Zheng and Xu [30] discussed how to avoid maintain-
ing multiple copies of the same ﬁle in PoS setting. In [24],
Xu and Chang presented a privately auditable PoR using
polynomial commitment technique [12], which greatly saves
communication overheads compared with the scheme in [13].
Yuan and Yu [27] showed a publicly auditable PoR with the
same polynomial commitment technique. Noticed too many
heavy computations should be taken at the client side, Wang
et al. [23] investigated how to oﬄoad PDP schemes by se-
curely outsourcing them to a computation server.
In practice, there is a need of dynamic PDP/PoR/PoS
schemes in which the outsourced ﬁles can be further updat-
ed at a block level with insertion, deletion and modiﬁcation
operations. Some early works [1, 2] can partially support
those operations. The recent works [22, 9, 29] are equipped
with all those functionalities. Among them, Wang et al.’
scheme [22] is constructed using Merkle Hash Tree, while
Erway et al.’s [9] schemes are based on the authenticated
skip lists and RSA trees. Zhang and Blanton [29] present-
ed a dynamic PDP scheme by employing balanced update
trees. Built on oblivious RAM, Cash, K¨up¸c¨u, and Wichs
[5] investigated how to ensure the latest version of the out-
sourced ﬁle maintained by the storage server. Shi, Stefanov,
and Papamanthou [14] provided a more eﬃcient dynamic
PoR based on special authenticated structures.
Some proposals have been proposed to address the in-
tegrity concern of the remote ﬁles in a multi-user setting.
Wang, Li, and Li [16] investigated how to share data by a
group of members through clouds. Although their scheme
achieves privacy of the group member’s identity in audit-
ing the integrity, it cannot support public auditability or
74Table 1: Comparison with Related Works in Multi-user Setting
Auditability
Issuing member’s key
Shared secret para.
ID-based
Group manager
Scheme
Wang, Li, and Li [16]
Wang, Li, and Li [17]
Wang et al. [15]
Wang, Li, and Li [19]
Wang et al. [18]
Yuan and Yu [28]
Wang et al. [21]
Yu et al. [26]
Our instantiations
∗The public auditor should hold a secret parameter of the ﬁle owner when auditing outsourced ﬁles.
TPA
Public
TPA
TPA
Public
Public∗
TPA
Public
Yes
No
No
Yes
No
No
No
Yes
No
×
×
×
×
×
×
(cid:88)
×
(cid:88)
Group manager
Group manager
TPA (Private)
Local
–
Local
Local
Local
Group manager
Ownership privacy
(cid:88)
(cid:88)
(cid:88)
(cid:88)
×
×
(cid:88)
×
(cid:88)
identity-based deployment. In [17], they revisited the same
problem using ring signatures. Each group member should
locally prepare his/her secret key, instead of issuing by a
group manager. Wang et al. [15] considered a scenario such
that the group members do not hold secret keys. For any ﬁle
to be outsourced, the ﬁle owner should process it by inter-
acting with a security-mediator in a blind manner, which en-
sures that the mediator cannot know the ﬁle content. Wang,
Li, and Li [19] proposed a secure cloud storage scheme that
supports dynamic group member changes (for example, join
and revocation). However, the group secret key must be
delivered to all group members, which is not desirable in
practice. Wang et al. [18] presented a scheme that enables
user revocation without requiring any secret information to
be shared among group members. Yuan and Yu [28] pre-
sented a scheme that supports multiple users in a group to
modify the outsourced ﬁle. To this end, the involved mem-
bers should locally generate secret keys and cooperate in
producing public parameters in key generating algorithm.
The scheme proposed by Wang et al. [21] requires the audi-
tor to hold a secret parameter of ﬁle owner when verifying
the integrity of the outsourced ﬁles. Also, in their scheme
[21], the secret key of each group member consists of two el-
ements in G and Zp. Yu et al.’s proposal [26] achieves own-
ership privacy-preserving against TPA when auditing the
outsourced ﬁles, although the group members should locally
generate their keys and interact to negotiate a pair of group
public/secret keys.