# Group-oriented Proofs of Storage

## Authors
- Yujue Wang
  - School of Computer, Wuhan University, China
  - City University of Hong Kong, Hong Kong S.A.R.
  - Email: [EMAIL]
- Qianhong Wu
  - School of Electronic and Information Engineering, Beihang University, Beijing, China
  - Email: [EMAIL]
- Bo Qin
  - School of Information, Renmin University of China, Beijing, China
  - Email: [EMAIL]
- Xiaofeng Chen
  - State Key Laboratory of Integrated Service Networks, Xidian University, Xi’an, China
  - Email: [EMAIL]
- Xinyi Huang
  - School of Mathematics and Computer Science, Fujian Normal University, Fuzhou, China
  - Email: [EMAIL]
- Yunya Zhou
  - School of Electronic and Information Engineering, Beihang University, Beijing, China
  - Email: [EMAIL]

## Abstract
We introduce and formalize the concept of group-oriented proofs of storage (GPoS). In GPoS, each file owner, after being authorized as a member by a group manager, can outsource files to a group storage account maintained by an untrusted party, such as a cloud storage server. Anyone can efficiently verify the integrity of the remotely stored files without accessing the files themselves. The file owner's identity privacy is preserved against the cloud server, while the group manager can trace the individual who outsourced any suspicious file for liability investigation. By identifying and leveraging several useful properties, such as homomorphic composability and homomorphic verifiability in some signatures, we propose a generic GPoS construction that relies on the security of the underlying signature scheme and the hardness of the computational Diffie-Hellman (CDH) problem. We instantiate a concrete GPoS scheme using the well-known Boneh-Boyen short signature. By leveraging polynomial commitment techniques, our proposed GPoS scheme optimizes bandwidth consumption with constant-size proof generation by the cloud server. Theoretical analyses and comparisons show that our GPoS proposal is advantageous over existing PoS-like schemes in terms of user privacy, public audibility, and performance in a multi-user setting.

## Categories and Subject Descriptors
E.5 [Data]: Files

## Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

ASIA CCS'15, April 14–17, 2015, Singapore, Singapore.
Copyright © 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714630.

## Keywords
Cloud storage, Proofs of Storage, Provable Data Possession, Proof of Retrievability, Public auditability

## 1. Introduction
Cloud computing provides convenient storage services to clients and is widely believed to reduce the local hardware and software maintenance burden for large-scale data storage [6]. However, this remote storage paradigm also raises security concerns about the integrity and privacy of outsourced files [25, 7]. To address these concerns, several cryptographic concepts have been introduced, such as Proofs of Storage (PoS) [3], Provable Data Possession (PDP) [1], and Proofs of Retrievability (PoR) [11].

Although PoS, PDP, and PoR have received considerable attention, most existing proposals, such as [2, 9, 11, 13, 15, 20, 22, 27], do not fit well in real-world applications. For example, consider a company that purchases remote storage services from a cloud storage provider (CSP) to store files. Employees should be authorized (e.g., by the IT department) to upload files to the company’s account maintained by the cloud storage server. It is necessary to embed specific information (e.g., identity) into the outsourced file so that the company manager can identify the file owner if needed. This prevents dishonest employees from misusing their file-outsourcing capability and unauthorized outsiders from uploading malicious data. Additionally, file uploading information can be used to evaluate employee performance. However, the company and employees may prefer not to disclose the file owner's identity to the cloud storage server.

### 1.1 Our Work
Motivated by these requirements, we introduce and formalize a system of group-oriented proof of storage (GPoS) with the following functionalities:
1. A trusted group manager issues secret keys associated with members’ unique identities. Each member can validate their secret key from the group manager, and no secret parameters need to be shared among members.
2. Each group member can locally process files with the issued secret key, without further assistance from the group manager. The produced metadata is aggregatable, leading to efficient bandwidth and storage usage.
3. Anyone can serve as an auditor to validate the integrity of the outsourced files multiple times by interacting only with the cloud storage server. The integrity can be audited with high probability without retrieving the entire file or inspecting all file blocks.
4. The file owner remains anonymous to the cloud storage server. The server can only confirm that the file was uploaded by a legal group member but cannot trace the member's identity. The group manager, however, can reveal the file owner's identity for liability investigations.

We provide a secure generic construction of GPoS schemes. We formalize the security model for GPoS schemes with public auditability. A GPoS scheme should be secure against conspiracy attacks from group members attempting to forge secret keys and metadata. It should also prevent the cloud storage server from forging integrity proofs or extracting the file owner’s identity from stored files. The metadata must be:
1. Generated with a secret key issued by the group manager.
2. Aggregatable.
3. Publicly auditable.
4. Ownership privacy-preserving.

These requirements pose significant challenges in constructing GPoS. We address these challenges by identifying and leveraging useful properties, such as homomorphic composability and homomorphic verifiability, in some signature schemes. By exploiting these properties, we propose a generic GPoS construction that is proven secure if the underlying signature is existentially unforgeable and the standard Computational Diffie-Hellman (CDH) assumption holds.

We implement efficient concrete GPoS schemes. The well-known Boneh-Boyen short signature scheme [4] satisfies the required properties. Following the generic construction, we instantiate a practical GPoS scheme under the CDH assumption in the standard model. Specifically, the Boneh-Boyen short signature scheme is used to issue secret keys for group members. The resulting GPoS scheme has linear computation and communication complexities. We further optimize the instantiation in terms of communication overhead and computation costs at the auditor side for auditing the integrity of the outsourced files. This optimization leverages polynomial commitment techniques [12] to commit to the aggregated file block, reducing the proof size to three elements, independent of the sector number in a block and the block number in a challenge. The security of the optimized instantiation is reduced to the s-SDH assumption. This approach can be generally applied to GPoS/PoS/PDP/PoR schemes built over symmetric bilinear groups, indicating its universal utility.

The performance of our GPoS instantiations is comprehensively analyzed and compared. Our schemes offer advantages over existing PoS/PDP/PoR schemes in a multi-user setting. The optimized instantiation achieves a trade-off: although it introduces some additional, affordable computation burden for the resource-redundant cloud server, it significantly reduces communication overhead during the auditing of outsourced files.

### 1.2 Related Work
Significant efforts have been made to check the integrity of outsourced files in a single-user setting. Ateniese et al. [1] and Juels and Kaliski [11] independently investigated secure storage in untrusted clouds and introduced the notions of PDP and PoR, respectively. These techniques allow the integrity of outsourced files to be audited without retrieving them. Ateniese et al.’s scheme supports an unbounded number of integrity audits. Shacham and Waters [13] proposed privately and publicly auditable PoR schemes with strong security proofs. In privately auditable PDP/PoR, only the file owner can audit the integrity, while anyone can act as an auditor in publicly auditable schemes. Ateniese, Kamara, and Katz [3] showed how to convert a homomorphic identification protocol into a public-key homomorphic linear authenticator (HLA) and constructed PoS from HLA. Dodis, Vadhan, and Wichs [8] improved PoR using tools based on coding and complexity theory. Wang et al. [20] incorporated a third-party auditor (TPA) into the scheme, enabling the TPA to audit outsourced files on behalf of owners without learning file contents. Zheng and Xu [30] discussed avoiding maintaining multiple copies of the same file in a PoS setting. Xu and Chang [24] presented a privately auditable PoR using polynomial commitment techniques, which significantly reduces communication overhead compared to the scheme in [13]. Yuan and Yu [27] showed a publicly auditable PoR with the same polynomial commitment technique. Wang et al. [23] investigated offloading PDP schemes by securely outsourcing them to a computation server to reduce heavy computations at the client side.

In practice, there is a need for dynamic PDP/PoR/PoS schemes where outsourced files can be updated at a block level with insertion, deletion, and modification operations. Some early works [1, 2] partially support these operations. Recent works [22, 9, 29] fully support them. Among them, Wang et al.'s scheme [22] uses Merkle Hash Trees, while Erway et al.'s [9] schemes are based on authenticated skip lists and RSA trees. Zhang and Blanton [29] presented a dynamic PDP scheme using balanced update trees. Built on oblivious RAM, Cash, Kupcu, and Wichs [5] ensured the latest version of the outsourced file maintained by the storage server. Shi, Stefanov, and Papamanthou [14] provided a more efficient dynamic PoR based on special authenticated structures.

Several proposals address the integrity of remote files in a multi-user setting. Wang, Li, and Li [16] investigated sharing data by a group of members through clouds, achieving privacy of group member identities in auditing the integrity but not supporting public auditability or identity-based deployment. In [17], they revisited the problem using ring signatures, requiring each group member to locally prepare their secret key instead of issuing it through a group manager. Wang et al. [15] considered a scenario where group members do not hold secret keys. The file owner processes the file by interacting with a security-mediator in a blind manner, ensuring the mediator cannot know the file content. Wang, Li, and Li [19] proposed a secure cloud storage scheme supporting dynamic group member changes (e.g., join and revocation), but the group secret key must be delivered to all group members, which is impractical. Wang et al. [18] presented a scheme enabling user revocation without requiring any secret information to be shared among group members. Yuan and Yu [28] presented a scheme supporting multiple users in a group to modify the outsourced file, requiring involved members to locally generate secret keys and cooperate in producing public parameters. Wang et al. [21] require the auditor to hold a secret parameter of the file owner when verifying the integrity of the outsourced files, and the secret key of each group member consists of two elements in G and Zp. Yu et al.'s proposal [26] achieves ownership privacy-preserving against TPA when auditing the outsourced files, though group members must locally generate their keys and interact to negotiate a pair of group public/secret keys.

## Table 1: Comparison with Related Works in Multi-user Setting
| Scheme | Auditability | Issuing Member's Key | Shared Secret Parameters | ID-based | Group Manager | Ownership Privacy |
|---------|--------------|----------------------|--------------------------|-----------|---------------|-------------------|
| Wang, Li, and Li [16] | TPA | No | No | Yes | No | No |
| Wang, Li, and Li [17] | TPA | No | No | No | No | No |
| Wang et al. [15] | TPA | No | No | No | No | No |
| Wang, Li, and Li [19] | TPA | No | No | No | No | No |
| Wang et al. [18] | TPA | No | No | No | No | No |
| Yuan and Yu [28] | Public* | No | No | No | No | No |
| Wang et al. [21] | Public* | No | No | No | No | No |
| Yu et al. [26] | TPA | No | No | No | No | No |
| Our Instantiations | Public | Yes | No | No | Yes | Yes |

*The public auditor should hold a secret parameter of the file owner when auditing outsourced files.