tographic implementations to automatically discover faulted
implementations that realize fault conditions and lead to at-
tacks.
A third, more practical contribution is an evaluation of our
approach on implementations of RSA and ECDSA signa-
tures. During the process, we discover several faulted im-
plementations, some of which lead to new attacks of inde-
pendent interest. We elaborate on these points below.
Fault conditions. The ﬁrst contribution (Section 3) is of
methodological nature, and rests on the introduction of fault
conditions. Informally, fault conditions are implementation-
independent mathematical properties, speciﬁc to a crypto-
graphic system, which capture suﬃcient conditions under
which an attacker can launch a successful attack. Consider,
for instance, the case of RSA signatures with public RSA
modulus N = pq of length n. Any adversary with knowl-
edge of a value ˆS that is multiple of p but not multiple of q
can obtain p by performing a simple GCD computation, and
then q by division. This is captured by the fault condition
ˆS : ˆS = 0 mod p ∧ ˆS (cid:54)= 0 mod q
(cid:46) message encoding
M ← µ(m) ∈ ZN
Sp ← ExpLadder(M mod p, dp, p, 1)
Sq ← ExpLadder(M mod q, dq, q, 1)
t ← Sp − Sq
if t < 0 then t ← t + p
end if
1: function SignRSA–Garner(m)
2:
3:
4:
5:
6:
7:
8:
9:
10: end function
S ← Sq +(cid:0)(t · π) mod p(cid:1) · q
return S
Figure 4: RSA–Garner signature generation. The
Garner coeﬃcient π = q−1 mod p is precomputed.
R0 ← ∞
for i = t down to 0 do
1: function ECScalMul(k,P )
2:
3:
4:
5:
6:
end for
7:
return R0
8:
9: end function
R0 ← [2] · R0
if ki = 1 then R0 ← R0 + P
end if
Figure 5: Scalar Multiplication of an elliptic curve
point by a ﬁeld element. [2]· denotes point doubling,
and + denotes point addition.
Figure 7 summarizes some relevant instances of fault condi-
tions for RSA signatures; in Section 3, we also consider fault
conditions for ECDSA signatures. For each of the fault con-
ditions we consider, we exhibit an attack for retrieving the
secret key. Broadly speaking, the attacks fall into two cat-
egories. The ﬁrst one encompasses attacks that perform an
elementary computation from a value satisfying the fault
condition. The second one covers attacks that require many
values that satisfy the fault condition, and involve more com-
plex computations, typically based on lattice reductions. For
the latter, we implement the attacks in a computer algebra
system, and we experimentally validate their eﬀectiveness
for diﬀerent choices of parameters.
Fault Models and Policies. The literature oﬀers a wide
range of fault models, that aﬀect both data ﬂow (for example
the null fault model in which integer variables can be set to
1: function SignECDSA(m)
2:
(cid:46) message encoding
h ← H(m)
k $← [0, q − 1]
(u, v) ← [k] · P
r ← u mod q; if r = 0 then goto step 3;
s ← k−1(h + rx) mod q; if s = 0 then goto step 3;
return (r, s)
3:
4:
5:
6:
7:
8: end function
Figure 6: ECDSA signature based on an elliptic
curve E over a prime ﬁeld Fp. P is a base point
of order q and H is a cryptographic hash function of
output length equal to the size of q. The private key
is an element x ∈ Fq and the public key is denoted
by (p, q, H, P, Q) with Q = [x]P .
1018Informal description
S is a multiple of p
S is an almost full linear combination of p and q
S is an almost full aﬃne transform of p or q
Fault condition
Validity
Attack technique
S = 0 mod p ∧ S (cid:54)= 0 mod q
GCD computation
Prop. 1
∃α, β. S = α p + β q ∧ α, β < 2
Orthogonal lattices Prop. 2
∃α, β. S = α p + β ∧ α < q, β < 2n/2−ε Orthogonal lattices Prop. 3
2 −ε
n
Figure 7: Fault conditions for RSA signatures. The value of ε depends on the size n of the modulus and is a
multiple of the words size.
a null value) and control ﬂow (for example, the instruction
skip fault model, where an instruction can be skipped). We
consider various fault policies, that subsume a wide range of
such fault model and provide ﬁne-grained speciﬁcations of
the faults that can be performed on implementations. They
model faults using replacement clauses of the form (x, e)
where x is a variable and e is an expression, or (c, c(cid:48)), where
c and c(cid:48) are commands. These clauses respectively state that
it is possible to replace x by e, and c by c(cid:48) in the execution
of the program.
Automated synthesis of faulted implementations. Iden-
tifying fault conditions that allow eﬃcient attacks to exist
is a manual process that requires cryptographic expertise,
and some good understanding of the mathematical tools
available for cryptanalysis. The signiﬁcant pay-oﬀ of fault
conditions is that the process of ﬁnding complying faulted
implementations can be automated. Our second contribu-
tion (Section 4) is a fully automated method for discover-
ing faulted implementations that verify the fault condition.
Our method can be seen as an instance of program synthe-
sis, an area that is currently undergoing rapid and signiﬁ-
cant progress (see Section 6). Broadly construed, the goal of
program synthesis is to ﬁnd, given a speciﬁcation φ (for in-
stance, φ might capture the input/output behavior of a pro-
gram), a set of programs that satisfy φ. Because synthesis
is computationally expensive, there exist many specialized
forms of program synthesis that restrict the search space
using non-functional requirements or by providing a partial
description of the desired programs. We also specialize our
synthesis algorithm to keep it computationally reasonable.
Speciﬁcally, our algorithm takes as input a fault condition
φ, an implementation c, and searches for all faulted imple-
mentations of c that satisfy φ. The search is constrained by
two additional inputs. The ﬁrst additional input is a fault
policy; the second, optional input is an upper bound on the
number of faults we allow.
Our algorithm exploits many of the standard techniques
used in other approaches to program synthesis, including
weakest preconditions and invariant generation, and inter-
faces with SMT solvers for checking the validity of ﬁrst-order
formulae. In addition, our algorithm relies on an automated
prover to simplify the intermediate conditions generated by
weakest precondition computations; the prover is specialized
to formulae that combine arithmetic inequalities and size
constraints; such formulae include many fault conditions, in-
cluding all those we explore in this paper (see Figure 7). On
the other hand, our algorithm noticeably departs from recent
works on program synthesis by its simplicity: indeed, phys-
ical limits on the number and nature of faults suﬃciently
constrain the search space for faulted implementations, al-
lowing us to dispense from using more elaborate techniques
that are required to manage very large search spaces (see
Section 6). Experimental results, which we report below,
demonstrate that our synthesis algorithm performs well on
standard examples.
Application: old and new attacks on RSA and ECDSA
signatures. The third contribution of our work is a prac-
tical evaluation of our approach on RSA and ECDSA sig-
natures. We carry out the evaluation using the computer
algebra system SAGE, and the EasyCrypt tool1. Concretely,
we use the former for estimating the eﬀectiveness of lattice-
based attacks for diﬀerent fault conditions, and the latter
(or more precisely an implementation of our synthesis al-
gorithm built on top of EasyCrypt) for synthesizing faulted
implementations of RSA and ECDSA signatures. During
the process, we rediscover many known attacks; moreover,
we also discover many new attacks, several of which are ef-
ﬁcient attacks of independent interest. We summarize our
main ﬁndings below:
1. For RSA-CRT signatures based on Garner’s recombi-
nation, we recover the basic and most eﬃcient attack of [19]
which injects a null fault in the last call to CIOS during the
computation of modular exponentiation. We also discover
a new eﬃcient attack, based on forcing additional iterations
in the last call to CIOS. This attack yields almost full aﬃne
transforms of p or q, a small number of which is suﬃcient to
recover the factorization of the RSA modulus using orthog-
onal lattices or Simultaneous Diophantian Approximations
as in [21, 27].
2. For RSA-CRT signatures based on the usual CRT re-
combination, we discover a new fault attack; to our best
knowledge, this is the ﬁrst eﬃcient fault attack that works
with randomized padding. The attack is based on forcing ad-
ditional iterations in the last call to CIOS and yields almost
full linear combinations of p and q. From a small number of
such faulty signatures, the factorization of the RSA modulus
can easily be recovered using orthogonal lattices.
3. For ECDSA signatures, we discover several new and
eﬃcient fault attacks for implementations based on the im-
plementation of scalar multiplication given in Figure 5. A
ﬁrst attack is based on skipping the last iterations in the
computation of scalar multiplication. A second attack is
based on forcing the evaluation of a conditional inside the
loop executed for the computation. The largest group of at-
tacks (containing more than 100 faulted programs) is based
on faulting the implementation of the point addition opera-
tion. Each faulted signature allows us to recover the least or
most signiﬁcant bits of the nonce; we then ﬁnish the attack
using classic techniques, and obtain the secret key from a
small number of faulty signatures. We also recover an exist-
ing attack [36] that lets the faulted algorithm produce valid
signatures that may nevertheless be exploited in a similar
fashion.
1https://www.easycrypt.info
10192. BACKGROUND ON LATTICES
Lattice reduction is a powerful tool that is extensively
used in the cryptanalysis of public-key cryptosystems.
In
this section, we provide a brief introduction to some key
deﬁnitions and algorithms that are used in the paper. More
background is given in the long version of this paper [7].
A lattice L is a subgroup of Zn, i.e.
a non-empty set
of vectors closed under addition and inverse. Every lattice
L has a basis, i.e. a ﬁnite set of linearly independent vec-
tors that generate all elements in L. Conversely, every set
(b1, . . . , b(cid:96)) of linearly independent vectors over Zn gener-
ate a lattice L = (cid:104)b1, . . . , b(cid:96)(cid:105) consisting of all integer linear
combinations of the bi’s.
A central problem with lattices is to compute nearly re-
duced bases, i.e. bases that consist of reasonably short and
almost orthogonal vectors. There exist many eﬃcient algo-
rithms for performing lattice reductions, including the cel-
ebrated Lenstra-Lenstra-Lovasz (LLL) algorithm [30] and
Block Korkin-Zolotarev (BKZ) variants [42]. Lattice reduc-
tion is an essential tool in cryptanalysis, and we use it exten-
sively in our attacks. In theory, LLL outputs in polynomial-
time a reduced basis and each vector of the base is related
to the shortest ones by an approximation factor which is ex-
ponential in the dimension. BKZ algorithms allow diﬀerent
tradeoﬀ between the quality of the approximation and the
time complexity. In practice, LLL implementations are very
fast and when the dimension is much less than 200 [45], it
is expected that LLL produces shorter vectors than other
algorithms since its approximation factor is α ≈ 1.01, as
shown experimentally in [22]. In larger dimensions, the ap-
proximation factor increases (unless we greatly increase the
time complexity) and the success probability of our attacks
is reduced. To any lattice L in Zn is associated its orthogo-
nal lattice L⊥, deﬁned as the set of all vectors in Zn that are
orthogonal to all vectors of L. It is possible to reduce the
computation of the orthogonal lattice to lattice reduction in
polynomial time [38]. Orthogonal lattices were introduced
in cryptanalysis by Nguyen and Stern in [37], and have since
found many applications [38].
3. FAULT CONDITIONS
The primary goal of fault attacks is to induce outputs
which satisfy an implementation-independent, mathematical
property that guarantees that the secret key or some other
conﬁdential data can be eﬃciently recovered. Our approach
critically relies on providing a precise formalization of these
mathematical conditions, using fault conditions. Informally,
a fault condition is a statement of the form
v1, . . . , vn : φ ; s1, . . . , sk
where φ is a logical formula that depend on v1, . . . , vn, and
such that an attacker with access to suﬃciently many dis-
tinct tuples of values (v1, . . . , vn) satisfying φ is able to re-
cover secrets s1, . . . , sk (typically parameters of the cryp-
tosystem) with high probability. More formally, φ is a ﬁrst-
order formula over some ﬁrst-order theory T , for instance
modular arithmetic, and all variables that appear free in φ
but not on the left of the colon can only denote parameters
of the cryptosystem.
In this section, we introduce several fault conditions for
RSA and ECDSA schemes, and show how, given suﬃciently
many satisfying values, one can eﬃciently retrieve either the
factorization of the modulus (for the RSA case) or the secret
key (for the ECDSA case). Many of these conditions appear
implicitly in some variant form in the literature.
Convention. All the conditions we consider are of the form
v1, . . . , vn : φ ; p, q for RSA and v1, . . . , vn : φ ; x for
ECDSA. Since the secret values s1, . . . , sk are determined by
the case study, from now on we simply write v1, . . . , vn : φ.
3.1 Fault conditions for RSA signatures
Throughout this section, we assume that N is an RSA
modulus of size n, product of two large primes p and q.
Proofs are detailed in the long version of this paper [7].
Finding multiples of p or q. Our ﬁrst fault condition con-
siders faulted signatures that are a multiple of p or q. This
fault condition enables attacks on RSA by simple gcd com-
putations.
Proposition 1. Given a single value S satisfying the con-
dition:
S : S ≡ 0 mod p ∧ S (cid:54)≡ 0 mod q,
one can eﬃciently factor the RSA modulus N . Obviously
the same result holds by switching p and q.
Proof. One can retrieve the factorization of N by per-
forming a simple gcd computation between S and N .
This fault condition is implicit for instance in [19].
Finding “almost full” linear combinations of p and q.
Our second fault condition considers faulted signatures that