                 ->  Limit  (cost=0.42..0.48 rows=1 width=52)  
                       ->  Index Scan using idx_test on test  (cost=0.42..57043.47 rows=1000000 width=52)  
           ->  Limit  (cost=0.00..0.55 rows=1 width=32)  
                 ->  WorkTable Scan on skip s  (cost=0.00..5.48 rows=10 width=32)  
                       Filter: ((tv).devid IS NOT NULL)  
(10 rows)  
                     tv                        
---------------------------------------------  
 (0,69.20287,"2021-04-29 17:29:03.513984")  
 (1,40.00488,"2021-04-29 17:14:29.754692")  
 (2,81.52082,"2021-04-29 17:13:38.138922")  
 (3,56.46295,"2021-04-29 17:13:41.576724")  
 (4,53.477367,"2021-04-29 17:13:38.799418")  
 (5,80.3527,"2021-04-29 17:20:07.61652")  
 (6,42.685253,"2021-04-29 17:12:43.131935")  
 (7,44.414867,"2021-04-29 17:14:24.41725")  
 (8,46.09131,"2021-04-29 17:13:21.088454")  
 (9,69.82049,"2021-04-29 17:16:56.557335")  
 (10,15.770509,"2021-04-29 17:12:43.72394")  
 (11,23.28746,"2021-04-29 17:14:51.66777")  
 (12,53.020107,"2021-04-29 17:13:26.826184")  
 (13,95.81737,"2021-04-29 17:17:23.924546")  
 (14,16.533426,"2021-04-29 17:16:12.762293")  
 (15,20.856157,"2021-04-29 17:15:59.386621")  
 (16,35.354103,"2021-04-29 17:13:39.879304")  
 (17,14.365077,"2021-04-29 17:12:40.277861")  
 (18,81.229645,"2021-04-29 17:15:47.412289")  
 (19,3.7511733,"2021-04-29 17:13:15.481478")  
 (20,6.8691735,"2021-04-29 17:16:08.605133")  
(21 rows)  
Time: 0.591 ms  
```  
2、last_value  
```  
postgres=# with recursive skip as (    
  (    
    select test tv from test order by devid,crt_time desc limit 1   
  )    
  union all    
  (    
    select (  
      select test tv from test where devid > (s.tv).devid order by devid,crt_time desc limit 1  
    ) from skip s where (s.tv).devid is not null limit 1    
  )     
)     
select * from skip t where t.* is not null;   
                                                   QUERY PLAN                                                     
----------------------------------------------------------------------------------------------------------------  
 CTE Scan on skip t  (cost=20578.75..20578.97 rows=11 width=32)  
   Filter: (t.* IS NOT NULL)  
   CTE skip  
     ->  Recursive Union  (cost=3073.90..20578.75 rows=11 width=40)  
           ->  Subquery Scan on "*SELECT* 1"  (cost=3073.90..3073.99 rows=1 width=40)  
                 ->  Limit  (cost=3073.90..3073.98 rows=1 width=52)  
                       ->  Incremental Sort  (cost=3073.90..78293.89 rows=1000000 width=52)  
                             Sort Key: test.devid, test.crt_time DESC  
                             Presorted Key: test.devid  
                             ->  Index Scan using idx_test on test  (cost=0.42..57043.47 rows=1000000 width=52)  
           ->  Limit  (cost=0.00..1750.46 rows=1 width=32)  
                 ->  WorkTable Scan on skip s  (cost=0.00..17504.55 rows=10 width=32)  
                       Filter: ((tv).devid IS NOT NULL)  
(13 rows)  
                      tv                        
----------------------------------------------  
 (0,92.5132,"2021-07-22 00:50:09.418747")  
 (1,79.331635,"2021-07-22 01:12:35.705869")  
 (2,24.342728,"2021-07-22 01:11:43.214143")  
 (3,0.083137356,"2021-07-22 01:10:48.842551")  
 (4,36.13544,"2021-07-22 01:03:19.314456")  
 (5,72.615295,"2021-07-22 01:09:47.155842")  
 (6,24.84936,"2021-07-22 01:11:14.875089")  
 (7,92.358284,"2021-07-22 01:07:30.652387")  
 (8,93.73747,"2021-07-22 01:09:03.046665")  
 (9,70.78088,"2021-07-22 01:11:31.421899")  
 (10,7.430693,"2021-07-22 01:10:48.575366")  
 (11,17.332998,"2021-07-22 01:10:28.107436")  
 (12,7.4527717,"2021-07-22 01:10:52.440714")  
 (13,87.950645,"2021-07-22 01:08:22.256052")  
 (14,41.366306,"2021-07-22 01:04:35.893593")  
 (15,51.702602,"2021-07-22 01:10:41.037534")  
 (16,91.17102,"2021-07-22 01:08:18.668903")  
 (17,75.35907,"2021-07-22 01:07:49.376161")  
 (18,88.41152,"2021-07-22 01:10:30.431861")  
 (19,75.90414,"2021-07-22 01:11:18.230903")  
 (20,69.208405,"2021-07-22 01:12:20.86822")  
(21 rows)  
Time: 574.792 ms  
last_value 加个desc索引会更快  
postgres=# create index idx_test1 on test (devid, crt_time desc);  
CREATE INDEX  
Time: 963.675 ms  
postgres=# with recursive skip as (    
  (    
    select test tv from test order by devid,crt_time desc limit 1   
  )    
  union all    
  (    
    select (  
      select test tv from test where devid > (s.tv).devid order by devid,crt_time desc limit 1  
    ) from skip s where (s.tv).devid is not null limit 1    
  )     
)     
select * from skip t where t.* is not null;   
                      tv                        
----------------------------------------------  
 (0,92.5132,"2021-07-22 00:50:09.418747")  
 (1,79.331635,"2021-07-22 01:12:35.705869")  
 (2,24.342728,"2021-07-22 01:11:43.214143")  
 (3,0.083137356,"2021-07-22 01:10:48.842551")  
 (4,36.13544,"2021-07-22 01:03:19.314456")  
 (5,72.615295,"2021-07-22 01:09:47.155842")  
 (6,24.84936,"2021-07-22 01:11:14.875089")  
 (7,92.358284,"2021-07-22 01:07:30.652387")  
 (8,93.73747,"2021-07-22 01:09:03.046665")  
 (9,70.78088,"2021-07-22 01:11:31.421899")  
 (10,7.430693,"2021-07-22 01:10:48.575366")  
 (11,17.332998,"2021-07-22 01:10:28.107436")  
 (12,7.4527717,"2021-07-22 01:10:52.440714")  
 (13,87.950645,"2021-07-22 01:08:22.256052")  
 (14,41.366306,"2021-07-22 01:04:35.893593")  
 (15,51.702602,"2021-07-22 01:10:41.037534")  
 (16,91.17102,"2021-07-22 01:08:18.668903")  
 (17,75.35907,"2021-07-22 01:07:49.376161")  
 (18,88.41152,"2021-07-22 01:10:30.431861")  
 (19,75.90414,"2021-07-22 01:11:18.230903")  
 (20,69.208405,"2021-07-22 01:12:20.86822")  
(21 rows)  
Time: 0.975 ms  
```  
## 参考  
[《递归+排序字段加权 skip scan 解决 窗口查询多列分组去重的性能问题》](../202006/20200615_01.md)    
[《PostgreSQL Oracle 兼容性之 - INDEX SKIP SCAN (递归查询变态优化) 非驱动列索引扫描优化》](../201803/20180323_03.md)    
[《distinct xx和count(distinct xx)的变态递归优化方法 - 索引收敛(skip scan)扫描》](../201611/20161128_02.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")