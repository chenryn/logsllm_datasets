title:GuardMR: Fine-grained Security Policy Enforcement for MapReduce Systems
author:Huseyin Ulusoy and
Pietro Colombo and
Elena Ferrari and
Murat Kantarcioglu and
Erman Pattuk
Vigiles: Fine-grained Access Control for
MapReduce Systems
Huseyin Ulusoy, Murat Kantarcioglu, Erman Pattuk, Kevin Hamlen
The University of Texas at Dallas, Richardson, Texas, USA
{huseyin.ulusoy, muratk, erman.pattuk, hamlen}@utdallas.edu
Abstract—Security concerns surrounding the rise of Big Data
systems have stimulated myriad new Big Data security models
and implementations over the past few years. A signiﬁcant
disadvantage shared by most of these implementations is that
they customize the underlying system source code to enforce new
policies, making the customizations difﬁcult to maintain as these
layers evolve over time (e.g., over version updates).
This paper demonstrates how a broad class of safety policies,
including ﬁne-grained access control policies at the level of key-
value data pairs rather than ﬁles, can be elegantly enforced
on MapReduce clouds with minimal overhead and without any
change to the system or OS implementations. The approach real-
izes policy enforcement as a middleware layer that rewrites the
cloud’s front-end API with reference monitors. After rewriting,
the jobs run on input data authorized by ﬁne-grained access
control policies, allowing them to be safely executed without
additional system-level controls. Detailed empirical studies show
that this more modular approach exhibits just 1% overhead
compared to a less modular implementation that customizes
MapReduce directly to enforce the same policies.
I. INTRODUCTION
The last few years have witnessed a meteoric rise in the
volume of digital data generated and collected worldwide. Many
organizations, ranging from large-scale Internet companies
to government agencies, are interested in storing, processing
and mining this Big Data for competition, productivity, and
consumer surplus. Most traditional data management systems,
including typical relational databases, do not adequately scale
to the higher velocity and greater variety demanded by Big Data.
Academic and industrial researchers have therefore devoted
considerable effort toward more effectively storing, generating,
and processing Big Data. Big Data systems, which boast
highly parallel and distributed data processing atop commodity
hardware, have emerged as a popular choice due to their easy
deployment and attractive business model. Apache Hadoop
project has become one of the most widely used Big Data
systems, due in part to its adoption of Google’s elegant
MapReduce computing model [1].
Unfortunately, despite extensive tool support for Big Data
processing on Hadoop architectures (e.g., Hive, Pig Latin,
Hbase, etc.), security and privacy enforcement has suffered
less development. Most of the tools developed atop Hadoop
lack even simple authentication and access control mechanisms.
This dearth of well-developed security mechanisms in Big Data
systems has emerged as an important hindrance for widespread
adoption, and has prompted some industry experts to ask,
“Does NoSQL Mean No Security?”1. Recent work has sought
to address this need by customizing the implementation of
the cloud, virtual machine (VM), or operating system (OS)
to include extra, system-level access controls. For example,
Apache Accumulo allows multi-level access control at the cell
level in a key-value store.
Yet, none of the aforementioned systems address the ﬁne-
grained access control (FGAC) challenges for all types of
data (viz., structured, unstructured, semi-structured) in the
generic MapReduce model even though each of them addresses
different security/privacy issues. Almost all relational database
management systems support FGAC due to the security and
privacy requirements of the many industries that use them,
ranging from health care to ﬁnance. For example, Oracle Virtual
Private Database [2] automatically modiﬁes the submitted SQL
queries to enable FGAC. Industry experts have already observed
that FGAC is a must-have addition to MapReduce systems as
the model becomes more widely adopted [3].
To address this necessity, we developed Vigiles2, a FGAC
enforcement mechanism for MapReduce systems. Vigiles imple-
ments FGAC as a middleware layer that automatically rewrites
the cloud’s front-end API by augmenting them with reference
monitors (RMs).The cloud-resident RMs ﬁlter the outputs
of data accesses, preventing unauthorized access to policy-
prohibited key-values at runtime. Policies are expressed as
user-speciﬁc, computable predicates over records. For example,
to enforce a policy that prohibits user u from accessing sensitive
data, an administrator can deﬁne a predicate pu(d) that grants
access if and only if record d is not sensitive. Vigiles then
enforces pu over all jobs submitted by u, resulting in a
MapReduce environment that self-censors its object accesses
to only those objects consisting of records that satisfy pu. In
general, predicates of this form are known to be capable of
enforcing a large class of important safety policies, including
access control policies [4], [5].
To our knowledge, Vigiles is the ﬁrst system to provide
FGAC for MapReduce without requiring any modiﬁcation to
MapReduce system source code. By automatically in-lining the
enforcement programming within key-value access APIs prior
to reaching the cloud kernel or OS layers, the enforcement
implementation remains completely separate, making it much
easier to maintain. To demonstrate the feasibility of the
1http://www.darkreading.com/database/does-nosql-mean-no-security/
232400214
2The Vigiles Urbani were the ﬁreﬁghters and police of Ancient Rome.
proposed approach, we have implemented our system atop
Apache Hadoop without changing any Hadoop source code.
Our contributions can be summarized as follows:
• We show how user-deﬁned FGAC predicates can be
realized as RMs for efﬁcient policy enforcement for wide
range of data models (e.g., structured and unstructured).
• We provide detailed empirical studies indicating that our
solution exhibits just 1% overhead compared to a non-
modular implementation that changes the MapReduce
internals to support FGAC.
• Our solution is extensible to other MapReduce implemen-
tations, and can therefore be seen as a general strategy
for scalably enforcing FGAC on MapReduce.
The remainder of this paper is organized as follows: §II
discusses related studies, §III summarizes background knowl-
edge, and §IV details our assumptions. The FGAC problem
in the context of the MapReduce model is formally deﬁned
in §V. §VI presents the architectural details of Vigiles. Our
empirical results are evaluated in §VII. Finally, §VIII concludes
the paper.
II. RELATED WORK
FGAC in Relational Databases: In 1974, the access control
system INGRES, which modiﬁes the queries by conjugating
safety conditions to the WHERE clauses before being pro-
cessed, was introduced by Stonebraker and Wong [6]. Later
on, Virtual Private Database (VPD) [2] has been included as
a FGAC component in Oracle DBMS since Oracle8i. VPD
allows to specify predicates as strings appended to the WHERE
clause of the queries. In 2004, Rizvi et al. [7] generalized the
query modiﬁcation approach as Truman model, where each
user’s view of database can be inconsistent with additional
information derived from external sources. They addressed this
issue by rewriting queries using only the authorized views.
Alternatively, LeFevre et al. [8] introduced table semantics
model, where the queries remain the same while the tables are
effectively modiﬁed by injecting dynamically created views.
Agrawal et al. [9] proposed to use grant commands of DBMS to
provide cell level access control. In 2007, Chaudhuri et al. [10]
proposed to use predicated grants by considering other features
(e.g., aggregate authorization, user groups, authorization groups,
etc.). Rosenthal and Sciore [11] extended this approach for
management of predicated grants as well. However, these
approaches are not applicable to MapReduce model due to
the lack of structured query languages in MapReduce systems,
where the above approaches leverages the features speciﬁc to
relational databases (e.g., grant commands, SQL, etc.).
Security Applications For MapReduce: Apache Accumulo
is a distributed key-value store based on Google’s BigTable [12]
design and built on top of Apache Hadoop. It improves the
BigTable design in the form of cell-based mandatory and
attribute-based access control capabilities and a server-side
programming mechanism that can modify key-value pairs
in the data management process. Similarly, BigSecret [13]
enables secure querying of cell-level encrypted data in HBase.
SecureMR [14] provides a decentralized replication-based
integrity veriﬁcation scheme for MapReduce job execution.
Airavat [15] employs SElinux to achieve multi-level access
control and guarantees MapReduce computation results to
satisfy differential privacy. However, none of the aforemen-
tioned systems address the FGAC challenges for all types of
data (viz., structured, unstructured, semi-structured data) in the
generic MapReduce model even though each of them addresses
different security/privacy issues. To our knowledge, this is the
ﬁrst work that provides FGAC capabilities to MapReduce
model without changing the underlying MapReduce system.
III. BACKGROUND
This section provides the background information on MapRe-
duce and aspect-oriented programming (AOP), which are two
core technologies that Vigiles is based on.
A. MapReduce
MapReduce is a programming model and associated im-
plementations for processing and storing large data sets [1].
The model enables large cluster of commodity machines to
be employed in parallel while reducing computation costs.
Simply, the MapReduce model can be expressed in 5-step
parallel computations. (1) Pre-process: The input data is pre-
processed to form a valid format for the subsequent steps.
For example in Hadoop, RecordReader classes read the input
from Hadoop ﬁle system (HDFS) and produce key-value pairs.
(2) Map: The input key-value pairs are processed by producing
intermediate key-value pairs. (3) Shufﬂe: The intermediate pairs
are transfered to the reduce functions by assigning the pairs
having the same key to the same reduce functions. (4) Reduce:
The intermediate pairs are processed by forming smaller set
of pairs. (5) Post-process: The outputs of reduce functions are
combined and written to HDFS.
B. Aspect-Oriented Programming
Aspect-oriented programming (AOP) is a programming
paradigm for addressing cross-cutting concerns—concerns
whose implementations must typically be scattered over many
modules in a traditional programming language. AOP allows
such implementations to be consolidated as aspects, which
consist of (1) pointcuts—expressions that identify join points
(sites throughout the rest of the code) that are relevant to
the cross-cutting concern—and (2) advice consisting of code
that modiﬁes each join point to implement the concern. Prior
work has recognized that such aspects are an elegant means
of expressing RMs [16]–[20]. In such contexts, the pointcuts
identify security-relevant program operations, and the advice
introduces guard code that secures each such operation.
AspectJ is an AOP extension for the Java programming
language. Its pointcut language allows the aspect-writer to
advise any method call, object instantiation, or variable access
in programs to which the aspect is applied. Aspects can observe
the control ﬂow of the program, and can even change it by
modifying the input and return values of methods. The advice
can be injected into Java programs at the source level, or into
raw Java bytecode programs that is separately compiled.
IV. THREAT MODEL
Vigiles treats the submitted MapReduce jobs as untrusted
because a user may have malicious intentions, and may try
to compromise the system by injecting malicious code into
MapReduce jobs. The underlying MapReduce and OS are
trusted with the following setup: Vigiles and the MapReduce
system need to be installed on a hardened OS, where all
communication ports are closed, except the ones used by
Vigiles. This is because if the users directly access the
MapReduce system, they can retrieve the entire data ﬁle without
any FGAC restrictions. For example, one can read the ﬁles from
HDFS by using command line. In addition, Vigiles requires that
the programming language, in which the MapReduce system
is implemented, provides AOP support within the language or
as an external library, because AOP is employed to enforce
the security policies in Vigiles.
Hadoop system provides only one legitimate method to
access the input data for submitted MapReduce jobs which
is through RecordReader interface. However, the jobs include
arbitrary code and data, where one can easily place a malicious
code to circumvent RecordReader. We have performed two
attacks to show the feasibility of this vulnerability. In the
ﬁrst attack, we have placed a code inside a MapReduce job
that accesses to raw input data (or any data stored in the
corresponding data node) by means of Java I/O API. In the
second attack, the malicious code opened a socket as a backdoor
to communicate with our malicious server. Both attacks show
that the MapReduce jobs must be conﬁned to prevent these
security breaches and policy violations. There are numerous
studies [21]–[23] in the literature to circumscribe untrusted
codes and programs. These studies can be employed to
immunize Hadoop against such attacks by potentially malicious
MapReduce jobs.
MapReduce systems are generally used to extract useful
information from big datasets. In this model, data providers
upload their datasets into the MapReduce system, and the end-
users run their jobs to extract information. Unlike relational
databases, only read and append data permissions are required
because uploading data requires append permission and running
jobs requires read permission. Vigiles only provides FGAC
for read permission, and do not consider append permission.
One justiﬁcation is that read access permission is more likely
to be used by the end-users while trying to extract information
from the data. On the other hand, append access permission is
more likely to be used by data providers. FGAC for append
and deletion will be addressed in our future work.
V. PROBLEM DEFINITION
The current access control model of MapReduce systems
are at ﬁle-level. However, authorizing the whole ﬁles is not
desirable in the MapReduce model because of three main
reasons: (1) The size of ﬁles can be very large. (2) The system
can be used by many users having different intentions and
security clearances. (3) The ﬁles can contain data from different
domains and sensitivity speciﬁcations. To this end, we propose
the ﬁne-grained access control predicates (FCAC predicates).
In this model, each user can access the ﬁles after the user
speciﬁc predicates are applied to the ﬁles. The predicates
independently run the access control ﬁlters (ACFs) on the
individual records. ACFs perform an action α ∈{reject, grant,
modify} according to the speciﬁed security policy. Reject action
refuses access by returning nothing, grant action accepts access
by returning the original record, and modify action changes the
original record by returning a modiﬁed version (cf. Eqn. 1).
Especially the modify action enables the MapReduce model to
work with diverge and sensitive data, since it enables ﬁltering
out unnecessary parts of records and sanitizing sensitive parts.
More formally, let M = (S,O, P) denote FGAC pred-
icate model, where S = {s1, . . . , sk} denote the set of
subjects, O = {o1, . . . , on} denote the set of objects, and
P = {p1, . . . , pl} denote the set of predicates. Moreover, let