A distinguishing feature of all backdoors is that they must be triggered.
Thus, a pivotal component of any backdoor is its trigger mechanism. However,
this trigger mechanism alone does not constitute a backdoor: what causes it to
become active? Another component is needed to account for the satisfaction of
the trigger condition: i.e., a type of input source. Upon trigger activation an even-
tual system state is reached that can be considered the backdoor-activated state,
which is essentially a state of escalated privileges, privilege abuse or unauthen-
ticated access, i.e., a privileged state. To reach this ﬁnal state, an intermediate
component that facilitates the transition from the normal system state upon sat-
isfaction of the backdoor trigger to the backdoor-activated state is required: we
98
S. L. Thomas and A. Francillon
refer to this as the backdoor payload. Through this reasoning, we show there are
four key components that must be present to fully capture the notion of a back-
door. These components are chosen as the minimum set of components required
for a backdoor to exist within a system; without the presence of any one of these
components the backdoor would not be functional. Using this componentisation,
we are able to deﬁne a backdoor.
Deﬁnition 1 Backdoor. An intentional construct contained within a system
that serves to compromise its expected security by facilitating access to otherwise
privileged functionality or information. Its implementation is identiﬁable by its
decomposition into four components: input source, trigger, payload, and privileged
state, and the intention of that implementation is reﬂected in its complete or
partial (e.g., in the case of bug-based backdoors) presence within the DFSM and
AFSM, but not the EFSM of the system containing it.
3.3 Backdoor Detection
Using Deﬁnition 1 as a basis, a backdoor can be modelled as two related FSMs:
θtrigger, which represents the trigger without a state transition to the payload,
and θpayload, which represents the payload and Fpayload, the set of possible priv-
ileged states.
Deﬁnition 2 Backdoor Detection. A backdoor is detected by obtaining:
θR = (SR, iR, FR, ΣR, δR)
Within θR, the states and transitions of both the trigger and payload must exist:
Σtrigger ∪ Σpayload ⊆ ΣR
∀s ∈ Strigger,∀σ ∈ Σtrigger . δtrigger(s, σ) (cid:7)= ⊥ ⇒ δR(s, σ) = δtrigger(s, σ)
∀s ∈ Spayload,∀σ ∈ Σpayload . δpayload(s, σ) (cid:7)= ⊥ ⇒ δR(s, σ) = δpayload(s, σ)
The privileged states reachable as a result of the payload are either ﬁnal states
of θR, or states that can be transitioned from to some state of θR:
∀f ∈ Fpayload . f ∈ FR ∨ (f /∈ FR ⇒ ∃σ ∈ ΣR . δR(f, σ) ∈ SR)
Strigger ∪ Spayload ⊆ SR
The payload must be reachable from the trigger, and there must exist a
transition to the trigger within θR:
∀f ∈ Ftrigger . ∃σ ∈ Σtrigger . δR(f, σ) = ipayload
∃s ∈ SR,∃σ ∈ ΣR . δR(s, σ) = itrigger
4 A Framework for Modelling Backdoors
In this section we detail a framework for decomposing a backdoor into the four
components deﬁned in Sect. 3.2; we exhaustively enumerate the types of these
components which allows us to both identify and reason about them.
Backdoors: Deﬁnition, Deniability and Detection
99
In addition to locating a construct consisting of an input source, trigger,
payload, and privileged state, to detect a backdoor, an analyst must demonstrate
that the construct would be part of the DFSM of the system. For open-source
software, this could be done by analysing the source code version control logs,
or in closed-source software, analysing the diﬀerences between software versions.
In other cases, where such analysis is not possible, the following framework can
additionally serve as a basis for reasoning about how a backdoor’s components
can indicate an implementer’s intent.
In the proceeding framework, we refer to the RFSM of an end-user that has
analysed a particular system. Initially, that user will expect functionality that
can be modelled by one FSM (their EFSM), and through their analysis they will
learn, or derive another FSM (RFSM) that matches what they have learnt about
the system. Therefore, to discover a backdoor through analysis of the emulator
for the AFSM, the RFSM (post-analysis) will contain a backdoor, if there is one
present in the AFSM, and they are able to identify it.
During the analysis process, new states and state transitions will be added
to the RFSM. We divide these states and state transitions into two categories:
those that are explicit, which we say are discovered (and always exist within the
AFSM) and those that are not explicit, which we say are created (and may not
exist within the AFSM). To serve this distinction with an example, suppose we
have a RFSM that models a program. The explicit states and state transitions
that are added to it through analysis are those that represent basic blocks and
branches that are explicitly part of the program’s code (and will always be part
of the DFSM and AFSM). Those that are added that are not explicit are in a
sense weird states and state transitions, which might, for example, be the states
representing some shellcode.
4.1 Input Source
If we model the satisfaction of a backdoor trigger as a function – is triggered –
as in the state machine diagram in Fig. 2, then we can view it as a function that
takes at least one parameter (implicit or otherwise) – an input source – which is
used to decide which state transition that is made as a result of executing that
function.
is triggered(input source, ...
Activated
Not activated
Fig. 2. Idealised backdoor trigger.
The value yielded by the input source may be derived from any number of
inputs to the FSM: it could be a string input by the attacker wishing to activate
the backdoor trigger, or it could be the value of the system clock such that during
100
S. L. Thomas and A. Francillon
a speciﬁc time period the backdoor trigger becomes active. For this reason we
choose to abstract away from the exact implementation details and use the term
“input source” to represent this component of the backdoor. Note that the input
source is not the value that causes the activation of the backdoor trigger, but
rather describes the origin of that input: e.g., a socket or standard input.
4.2 Trigger Mechanism
The backdoor trigger, under the correct conditions, will cause the execution
of the backdoor payload, which will subsequently elevate the privileges of the
attacker. We model the backdoor trigger as a boolean function where its positive
outcome, i.e., when it outputs true, will cause a state transition to the backdoor
payload. The way the FSM transitions to the payload as a result of the satisfaction
of the trigger conditions can be modelled exhaustively with two cases:
1. The state transition is explicit, hence will always exist within the backdoor
implementer’s DFSM. The backdoor trigger is added to the RFSM by adding
the explicit states and transitions related to satisfying the backdoor trigger
conditions, and adding one or more transitions to the payload, where those
transitions are discovered (not newly created) as part of the analysis.
2. The state transition is not explicit. The trigger is added to the RFSM by
adding explicit states and state transitions related to satisfying the backdoor
trigger conditions, and by adding one or more state transitions that transi-
tion to the payload, where those transitions are newly created as part of the
analysis, i.e., they are not explicit.
To visualise these cases, we use concrete examples in which we use a system
that is a single program, where the backdoor is embedded as part of the program.
In the ﬁrst case, we view a trigger that is obvious and explicit, where the
backdoor is encoded within a single function of the program. This case is shown in
Fig. 2. The backdoor trigger is comprised of the single state required to satisfy the
backdoor trigger conditions, i.e., the one labelled is triggered(...), and the
state transition to the Activated state. In a more realistic scenario, the backdoor
trigger mechanism may require satisfaction of multiple branch conditions and/or
execution of multiple basic blocks and might be obfuscated. Irrespective of these
implementation details, the core concept is the same: the collection of checks can
be viewed as a single function, whose outcome is used to decide if the backdoor
payload is transitioned to and hence executed or not, where the transition – a
CFG edge in this example – is explicitly part of the FSM.
While the ﬁrst case considers conditions that are satisﬁed within a valid
function CFG, and a transition to the payload which is contained entirely within
that same valid CFG, and thus constitutes normal control-ﬂow, the second case
of backdoor trigger manifests as abnormal control-ﬂow. Within a program, we
can think of such a construct as akin to a program bug that allows control-ﬂow
hijacking. One can conjecture a simple case for this being, a buﬀer overﬂow
vulnerability, that when exploited correctly, causes a program to transition to a
backdoor payload, shown in Fig. 3.
Backdoors: Deﬁnition, Deniability and Detection
101
bool vulnerable_auth_check(
const char *user, const char *pass) {
char buf[80], hash[32];
strcpy(buf, user); strcat(buf, pass);
create_user_pass_hash(hash, buf);
return check_valid_hash(hash);
}
Buﬀer Overﬂow
vulnerable auth check(...
Payload
True
False
Authenticated
Not Authenticated
Fig. 3. Bug-based backdoor trigger.
1
strcmp(username, "bugdoor")
True
2
False
safe user auth(username, ...
vulnerable password check(...
Buﬀer Overﬂow
Payload
3
Authenticated
Not Authenticated
Fig. 4. Hybrid bug-based backdoor trigger.
Alongside these basic cases, a more complex example of a backdoor trig-
ger would be one that relies both on explicit checks and a bug, as visu-
alised in Fig. 4. In this case, a hard-coded credential check against a speciﬁc
username (bugdoor) is used to guard access to a vulnerable password check
(vulnerable password check). A username other than bugdoor will cause the
standard authentication routine (safe user auth) to be executed, and only a
password with a long enough length (and speciﬁc content) will lead to the execu-
tion of the backdoor payload. In this example, the backdoor trigger is comprised
of the explicit states 1 and 2, and the non-explicit state transition between states
2 and 3, i.e., the payload state.
Note that to make the case that all vulnerabilities are backdoor trigger mech-
anisms is a false oversimpliﬁcation, as such a simpliﬁcation does not diﬀerenti-
ate between accidental and intentional program bugs. We discuss the diﬃculties
present when reasoning about backdoors that are bug-based in Sect. 5.
4.3 Payload
A backdoor payload can be viewed as the solution to a puzzle: i.e., how to reach a
privileged state from successfully satisfying the conditions of a backdoor trigger.
In our model, we represent this by the state transition taken in order to reach
a privileged state, and any additional states and state transitions that perform
prerequisite computation following activation of backdoor trigger. In practice, a
payload component can take many forms, however we can exhaustively categorise
all types of payload by how they are modelled as part of a RFSM, and how they
are transitioned to:
102
S. L. Thomas and A. Francillon
1. The transition to the payload is explicit, and does not permit the creation of
new states and state transitions (Fig. 5). The payload is added to the RFSM
by adding explicit states and transitions required to reach a privileged state,
where those states and transitions are discovered by analysis (explicit). They
will be contained in the backdoor implementer’s DFSM.
2. The transition to the payload is explicit, but state(s) reachable due to this
transition permit the creation of new states and transitions, e.g., a system
that contains an intentional interpreter which can be accessed via a backdoor
(Fig. 6). The payload is added to the RFSM by adding discovered (explicit)
states and transitions – which exist in the backdoor implementer’s DFSM –
from which both newly created (non-explicit) and discovered (explicit) states
and transitions can be reached, which facilitate the eventual transition to a
privileged state. The non-explicit states and transitions added will not exist
within the backdoor implementer’s DFSM.
3. The transition to the payload is not explicit (bug-based), and the payload’s
states and transitions will either be explicit or non-explicit, e.g., a ROP-based
construct. The payload is added to the RFSM by adding both newly created
(non-explicit) and discovered (explicit) states and transitions, which facilitate
the transition to a privileged state. The non-explicit states and transitions
added will not exist within the backdoor implementer’s DFSM.
4.3.1 Payload Examples
To give concrete examples of the variants of backdoor payload, we once again
demonstrate backdoors that are implemented within programs.
/* Trigger; if active then: (1) -> (2) */
if (strcmp(user._name, "backdoor") == 0) {
/* Payload */
user._is_admin = true;
// (2)
/* Transition to privileged state */
open_shell(&user); // (3) -> (4)
}
Trigger
Payload
1
2
3
4
Fig. 5. Explicit transition to payload, where payload has explicit components.
Explicit Transition to Payload with Explicit Payload Components.
This class of payload (case 1 above) is inherently an intentional construct and
requires no abnormal control ﬂow for it to be executed. An example of a backdoor
with such payload is shown in Fig. 5. The backdoor trigger condition (state
1) is a hard-coded credential check, which if satisﬁed, will transition to the
backdoor payload (transition from state 1 to 2). In the payload, the backdoor
user’s permissions are ﬁrst elevated (state 2) and then a shell is opened for that
user (state 3), which allows them to transition to the privileged state (state 4).
Backdoors: Deﬁnition, Deniability and Detection
103
/* Trigger; if active then: (1) -> (2) */
if (strcmp(req._path, "/BKDRLDR") == 0) {
/* Payload; req._data == payload input */
run(&req._data); // (2) -> (3)
}
Input for Payload
1
2