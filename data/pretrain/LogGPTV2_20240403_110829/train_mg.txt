after the element
.ir listelm .
.ss traversal
.br circleq_first ()
returns the first item on the queue.
.pp
.br circleq_last ()
returns the last item on the queue.
.pp
.br circleq_prev ()
returns the previous item on the queue, or
.i &head
if this item is the first one.
.pp
.br circleq_next ()
returns the next item on the queue, or
.i &head
if this item is the last one.
.pp
.br circleq_loop_prev ()
returns the previous item on the queue.
if
.i elm
is the first element on the queue, the last element is returned.
.pp
.br circleq_loop_next ()
returns the next item on the queue.
if
.i elm
is the last element on the queue, the first element is returned.
.pp
.br circleq_foreach ()
traverses the queue referenced by
.i head
in the forward direction, assigning each element in turn to
.ir var .
.i var
is set to
.i &head
if the loop completes normally, or if there were no elements.
.pp
.br circleq_foreach_reverse ()
traverses the queue referenced by
.i head
in the reverse direction,
assigning each element in turn to
.ir var .
.ss removal
.br circleq_remove ()
removes the element
.i elm
from the queue.
.sh return value
.br circleq_empty ()
returns nonzero if the queue is empty,
and zero if the queue contains at least one entry.
.pp
.br circleq_first (),
.br circleq_last (),
.br circleq_loop_prev (),
and
.br circleq_loop_next ()
return a pointer to the first, last, previous, or next
.i type
structure, respectively.
.pp
.br circleq_prev (),
and
.br circleq_next ()
are similar to their
.br circleq_loop_* ()
counterparts,
except that if the argument is the first or last element, respectively,
they return
.ir &head .
.pp
.br circleq_head_initializer ()
returns an initializer that can be assigned to the queue
.ir head .
.sh conforming to
not in posix.1, posix.1-2001, or posix.1-2008.
present on the bsds
(circleq macros first appeared in 4.4bsd).
.sh bugs
.br circleq_foreach ()
and
.br circleq_foreach_reverse ()
don't allow
.i var
to be removed or freed within the loop,
as it would interfere with the traversal.
.br circleq_foreach_safe ()
and
.br circleq_foreach_reverse_safe (),
which are present on the bsds but are not present in glibc,
fix this limitation by allowing
.i var
to safely be removed from the list and freed from within the loop
without interfering with the traversal.
.sh examples
.ex
#include 
#include 
#include 
#include 
struct entry {
    int data;
    circleq_entry(entry) entries;           /* queue */
};
circleq_head(circlehead, entry);
int
main(void)
{
    struct entry *n1, *n2, *n3, *np;
    struct circlehead head;                 /* queue head */
    int i;
    circleq_init(&head);                    /* initialize the queue */
    n1 = malloc(sizeof(struct entry));      /* insert at the head */
    circleq_insert_head(&head, n1, entries);
    n1 = malloc(sizeof(struct entry));      /* insert at the tail */
    circleq_insert_tail(&head, n1, entries);
    n2 = malloc(sizeof(struct entry));      /* insert after */
    circleq_insert_after(&head, n1, n2, entries);
    n3 = malloc(sizeof(struct entry));      /* insert before */
    circleq_insert_before(&head, n2, n3, entries);
    circleq_remove(&head, n2, entries);     /* deletion */
    free(n2);
                                            /* forward traversal */
    i = 0;
    circleq_foreach(np, &head, entries)
        np\->data = i++;
                                            /* reverse traversal */
    circleq_foreach_reverse(np, &head, entries)
        printf("%i\en", np\->data);
                                            /* queue deletion */
    n1 = circleq_first(&head);
    while (n1 != (void *)&head) {
        n2 = circleq_next(n1, entries);
        free(n1);
        n1 = n2;
    }
    circleq_init(&head);
    exit(exit_success);
}
.ee
.sh see also
.br insque (3),
.br queue (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/newlocale.3
.so man3/xdr.3
.so man2/chown.2
.so man3/stailq.3
.so man3/tzset.3
.so man3/lgamma.3
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.th ungetwc 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
ungetwc \- push back a wide character onto a file stream
.sh synopsis
.nf
.b #include 
.pp
.bi "wint_t ungetwc(wint_t " wc ", file *" stream );
.fi
.sh description
the
.br ungetwc ()
function is the wide-character equivalent of the
.br ungetc (3)
function.
it pushes back a wide character onto
.i stream
and returns it.
.pp
if
.i wc
is
.br weof ,
it returns
.br weof .
if
.i wc
is an invalid wide character,
it sets
.i errno
to
.b eilseq
and returns
.br weof .
.pp
if
.i wc
is a valid wide character, it is pushed back onto the stream
and thus becomes available for future wide-character read operations.
the file-position indicator is decremented by one or more.
the end-of-file
indicator is cleared.
the backing storage of the file is not affected.
.pp
note:
.i wc
need not be the last wide-character read from the stream;
it can be any other valid wide character.
.pp
if the implementation supports multiple push-back operations in a row, the
pushed-back wide characters will be read in reverse order; however, only one
level of push-back is guaranteed.
.sh return value
the
.br ungetwc ()
function returns
.i wc
when successful, or
.b weof
upon
failure.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br ungetwc ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
the behavior of
.br ungetwc ()
depends on the
.b lc_ctype
category of the
current locale.
.sh see also
.br fgetwc (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1995 by jim van zandt 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th tsearch 3  2021-08-27 "gnu" "linux programmer's manual"
.sh name
tsearch, tfind, tdelete, twalk, twalk_r, tdestroy \- manage a binary search tree
.sh synopsis
.nf
.b #include 
.pp
.bi "typedef enum { preorder, postorder, endorder, leaf } visit;"
.pp
.bi "void *tsearch(const void *" key ", void **" rootp ,
.bi "                int (*" compar ")(const void *, const void *));"
.bi "void *tfind(const void *" key ", void *const *" rootp ,
.bi "                int (*" compar ")(const void *, const void *));"
.bi "void *tdelete(const void *restrict " key ", void **restrict " rootp ,
.bi "                int (*" compar ")(const void *, const void *));"
.bi "void twalk(const void *" root ,
.bi "                void (*" action ")(const void *" nodep ", visit " which ,
.bi "                               int " depth ));
.pp
.br "#define _gnu_source" "         /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "void twalk_r(const void *" root ,
.bi "                void (*" action ")(const void *" nodep ", visit " which ,
.bi "                               void *" closure ),
.bi "                void *" closure );
.bi "void tdestroy(void *" root ", void (*" free_node ")(void *" nodep ));
.fi
.sh description
.br tsearch (),
.br tfind (),
.br twalk (),
and
.br tdelete ()
manage a
binary search tree.
they are generalized from knuth (6.2.2) algorithm t.
the first field in each node of the tree is a pointer to the
corresponding data item.
(the calling program must store the actual data.)
.i compar
points to a comparison routine, which takes
pointers to two items.
it should return an integer which is negative,
zero, or positive, depending on whether the first item is less than,
equal to, or greater than the second.
.pp
.br tsearch ()
searches the tree for an item.
.i key
points to the item to be searched for.
.i rootp
points to a variable which points to the root of the tree.
if the tree is empty,
then the variable that
.i rootp
points to should be set to null.
if the item is found in the tree, then
.br tsearch ()
returns a pointer
to the corresponding tree node.
(in other words,
.br tsearch ()
returns a pointer to a pointer to the data item.)
if the item is not found, then
.br tsearch ()
adds it, and returns a
pointer to the corresponding tree node.
.pp
.br tfind ()
is like
.br tsearch (),
except that if the item is not
found, then
.br tfind ()
returns null.
.pp
.br tdelete ()
deletes an item from the tree.
its arguments are the same as for
.br tsearch ().
.pp
.br twalk ()
performs depth-first, left-to-right traversal of a binary
tree.
.i root
points to the starting node for the traversal.
if that node is not the root, then only part of the tree will be visited.
.br twalk ()
calls the user function
.i action
each time a node is
visited (that is, three times for an internal node, and once for a
leaf).
.ir action ,
in turn, takes three arguments.
the first argument is a pointer to the node being visited.
the structure of the node is unspecified,
but it is possible to cast the pointer to a pointer-to-pointer-to-element
in order to access the element stored within the node.
the application must not modify the structure pointed to by this argument.
the second argument is an integer which
takes one of the values
.br preorder ,
.br postorder ,
or
.b endorder
depending on whether this is the first, second, or
third visit to the internal node,
or the value
.b leaf
if this is the single visit to a leaf node.
(these symbols are defined in
.ir  .)
the third argument is the depth of the node;
the root node has depth zero.
.pp
(more commonly,
.br preorder ,
.br postorder ,
and
.b endorder
are known as
.br preorder ,
.br inorder ,
and
.br postorder :
before visiting the children, after the first and before the second,
and after visiting the children.
thus, the choice of name
.b post\%order
is rather confusing.)
.pp
.br twalk_r ()
is similar to
.br twalk (),
but instead of the
.i depth
argument, the
.i closure
argument pointer is passed to each invocation of the action callback,
unchanged.
this pointer can be used to pass information to and from
the callback function in a thread-safe fashion, without resorting
to global variables.
.pp
.br tdestroy ()
removes the whole tree pointed to by
.ir root ,
freeing all resources allocated by the
.br tsearch ()
function.
for the data in each tree node the function
.i free_node
is called.
the pointer to the data is passed as the argument to the function.
if no such work is necessary,
.i free_node
must point to a function
doing nothing.
.sh return value
.br tsearch ()
returns a pointer to a matching node in the tree, or to
the newly added node, or null if there was insufficient memory
to add the item.
.br tfind ()
returns a pointer to the node, or
null if no match is found.
if there are multiple items that match the key,
the item whose node is returned is unspecified.
.pp
.br tdelete ()
returns a pointer to the parent of the node deleted, or
null if the item was not found.
if the deleted node was the root node,
.br tdelete ()
returns a dangling pointer that must not be accessed.
.pp
.br tsearch (),
.br tfind (),
and
.br tdelete ()
also
return null if
.i rootp
was null on entry.
.sh versions
.br twalk_r ()
is available in glibc since version 2.30.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br tsearch (),
.br tfind (),
.br tdelete ()
t}	thread safety	mt-safe race:rootp
t{
.br twalk ()
t}	thread safety	mt-safe race:root
t{
.br twalk_r ()
t}	thread safety	mt-safe race:root
t{
.br tdestroy ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, svr4.
the functions
.br tdestroy ()
and
.br twalk_r ()
are gnu extensions.
.sh notes
.br twalk ()
takes a pointer to the root, while the other functions
take a pointer to a variable which points to the root.
.pp
.br tdelete ()
frees the memory required for the node in the tree.
the user is responsible for freeing the memory for the corresponding
data.
.pp
the example program depends on the fact that
.br twalk ()
makes no