larger networks, we use a collection of synthesized, but functional,
con(cid:27)gurations for data center networks of increasing size. In terms
of their structure and policy, these networks are similar to those
described in Propane [4]. Each data center uses a folded-Clos topol-
ogy and runs BGP both inside the network as well as to connect
to an external backbone network. Each top-of-rack router in the
data center is con(cid:27)gured to advertise a /24 pre(cid:27)x corresponding
to the shared subnet for its hosts. All routers are con(cid:27)gured to
enable multipath routing to evenly distribute load across all of its
available peers. Spine routers in the data center connect to external
neighbors in the adjacent backbone network and are con(cid:27)gured
to use route (cid:27)lters on all externally connected interfaces to block
certain advertisements.
For each network, we use Minesweeper to check a large collec-
tion of the properties described in §5. First, we (cid:27)x a destination ToR
and use queries to check both single-source and all-source reacha-
bility from other ToRs. Similarly, we also check that both some and
all other ToRs will always use a path to the destination ToR that is
bounded by four hops, to ensure that tra(cid:28)c never uses a “valley"
path that goes down, up, and then down again. To demonstrate a
query that asks about more than a single path, we verify that all
ToRs in a separate pod from the destination will always use paths
that have equal length. This ensures a certain form of symmetry
in routing. In addition to path-based properties, we also verify the
multipath-consistency property that every router in the network
will never have di(cid:29)erent forwarding behavior along di(cid:29)erent paths.
We also check that every spine router in the network is equivalent
using the local-consistency property. To ensure that all n spine
routers are equivalent, we check for local equivalence among pairs
using n − 1 separate queries. If all routers are equivalent, then tran-
sitively they are equivalent as well. Finally, we verify the absence
of black holes in the data center.
Figure 8 shows the time to check each property for data cen-
ters of di(cid:29)erent size. Multipath consistency and the no-blackholes
properties are the fastest to check, taking under a second to verify
in all cases. This speed is in most part due to the minimal use of
ACLs in the con(cid:27)gurations. The solver quickly determines that the
properties cannot be violated because the control and data planes
stay in sync. The next fastest property to verify is local equivalence
among spine routers. This check takes under 2 minutes for the
5 (2)45 (6)125 (10)245 (14)405 (18)Number of Routers (Pods)100101102103104105106Verification Time (ms)No BlackholesMultipath ConsistencyLocal ConsistencySingle-ToR ReachabilityAll-Tor ReachabilitySingle-Tor Bounded LengthAll-Tor Bounded LengthEqual Length PodA General Approach to Network Configuration Verification
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
largest network. In this case, each pairwise equivalence check takes
roughly 145 milliseconds. The most expensive properties pertain to
reachability and path-length. For the largest network it takes under
5 minutes to verify such properties. Interestingly, queries checking
all-source vs single-source take approximately the same amount of
time. Instead of checking the property by issuing multiple queries,
as is the case in many prior, path-based tools [11, 34], all-source
reachability is a single query in our graph-based formulation.
8.3 Optimization E(cid:29)ectiveness
We evaluated the e(cid:29)ectiveness of the optimizations described in §6
by using a benchmark that involved veri(cid:27)cation of single-source
reachability queries. The pre(cid:27)x-hoisting optimization that replaces
symbolic variables representing an advertised pre(cid:27)x with instances
of the global destination IP variable has a large impact on perfor-
mance, speeding up veri(cid:27)cation by over 200x on average. This is
due to the fact that bitvectors are expensive for SMT solvers. Solvers
typically deal with bitvectors by “bit blasting" them into SAT. How-
ever, this introduces 32 additional variables into the model for every
edge in the graph. The next two optimizations: merging common
import and export records of variables and specializing variables by
protocol, are both forms of slicing optimizations. Together, these
optimizations improve the performance of the solver roughly 2.3x
on average over pre(cid:27)x hoisting alone.
9 RELATED WORK
Our work builds on prior work on network con(cid:27)guration analysis,
which we divide into three classes:
(1) Analysis without network models. Tools such as rcc [12], IP
Assure [25], and Minerals [2], focus on (cid:27)nding common mistakes
and inconsistencies in con(cid:27)gurations of di(cid:29)erent protocols. While
this approach can (cid:27)nd a range of con(cid:27)guration errors, because
it does not build a model of the network, it can have both false
positives and false negatives and cannot answer questions about
speci(cid:27)c network behaviors.
(2) Analysis of individual environments. Con(cid:27)guration testing
tools such as Bat(cid:27)sh [13] and C-BGP [28] take as input the net-
work’s con(cid:27)guration and a concrete environment, simulate the
resulting network behavior, and produce the data plane. The result-
ing network behavior for the data plane can then be analyzed for
properties of interest.
The primary disadvantage of testing is that it can feasibly analyze
only a small number of environments, while many con(cid:27)guration
errors occur only in speci(cid:27)c environments. However, unlike our
approach, testing can support a more detailed analysis of individual
environments (e.g., it can count the exact size of routing tables).
(3) Analysis of many environments. Our approach belongs to
this class which can simultaneously analyze multiple environments
by building a symbolic network model. Prior work in this class
includes FSR [33], ARC [14], ERA [11], and Bagpipe [34]. We borrow
heavily from these works. FSR encodes BGP preferences using
SMT constraints, our multi-protocol, logical view of the network
(Figure 2) is similar to ARC, and our protocol-independent symbolic
records (Figure 3) are similar to ERA. But our work goes beyond
prior e(cid:29)orts in its scope and generality. We support the entire
control plane functionality and a much wider range of properties.
Data plane analysis. Tools for data plane analysis like Anteater [22],
HSA [18], Veri(cid:30)ow [19], NoD [21], SymNet [31] and Delta-net [17],
have a simpler task than con(cid:27)guration analysis—they do not have
to model the control-plane dynamics that produce many possible
data planes. In fact, the con(cid:27)guration testing tool Bat(cid:27)sh, (cid:27)rst sim-
ulates the control plane on a concrete environment to produce a
single data plane, and then uses existing data plane analysis tools
to verify properties for this data plane. Hence, data plane can be
thought of as a special case (or subcomponent) of con(cid:27)guration
testing, though the speci(cid:27)cs di(cid:29)er greatly.
Methodologically, the data plane analysis tool most similar to
our work was developed by Zhang and Malik [35]. They encode
the data plane as a SAT formula and use combinational search, like
Minesweeper, to (cid:27)nd errors.
Con(cid:27)guration synthesis.
Network con(cid:27)guration synthesis [4, 24, 25] is complementary to
veri(cid:27)cation. Synthesis tools produce con(cid:27)gurations from high-level
speci(cid:27)cations; veri(cid:27)cation tools analyze con(cid:27)gurations (produced
manually or by synthesis tools).
Our SMT-based control plane model has some similarity with
a contemporary synthesis project [10], but there are signi(cid:27)cant
di(cid:29)erences as well. That e(cid:29)ort uses a symbolic representation of
network protocols based on strati(cid:27)ed Datalog, such that the (cid:27)xed
point of the Datalog program represents the forwarding state of the
network. The synthesis problem, of (cid:27)nding con(cid:27)guration inputs
that satisfy speci(cid:27)ed properties, is e(cid:29)ectively reduced to satis(cid:27)a-
bility checking of an SMT formula that is generated by using a
specialized solver for strati(cid:27)ed Datalog. In contrast, we do not re-
strict ourselves to strati(cid:27)ed Datalog and use (cid:27)rst order theories
supported by SMT solvers to symbolically model the stable states
of the network. Our network model might also be useful for (cid:27)nding
con(cid:27)guration inputs that satisfy network-wide properties, but we
leave an exploration of this topic to future work.
10 CONCLUSIONS
We present a general-purpose, symbolic model of the network con-
trol and data planes that encodes the stable states of a network as
a satisfying assignment to an SMT formula. Using this model, we
show how to verify a wide variety of properties including reacha-
bility, fault-tolerance, router equivalence, and load balancing, for
all possible packets and all possible data planes that might emerge
from the given control plane. We have implemented our approach
in a tool called Minesweeper to verify properties of real network
con(cid:27)gurations. We use Minesweeper on a collection of real and syn-
thetic con(cid:27)gurations, showing that it is e(cid:29)ective at (cid:27)nding issues
in real con(cid:27)gurations and can scale to large networks.
Acknowledgements. We thank the SIGCOMM reviewers and our
shepherd Laurent Vanbever, whose extensive feedback helped im-
prove this paper. This work was supported in part by NSF Grants
1703493 and 1525936, and a gift from Cisco. Any opinions, (cid:27)ndings,
and conclusions expressed herein are those of the authors and do
not necessarily re(cid:30)ect those of the NSF or Cisco.
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
Ryan Becke(cid:29), Aarti Gupta, Ratul Mahajan, and David Walker
REFERENCES
[1] M. Anderson. Time warner cable says outages largely resolved. http://www.
seattletimes.com/business/time-warner-cable-says-outages-largely-resolved,
2014.
[2] L. Bauer, S. Garriss, and M. K. Reiter. Detecting and resolving policy miscon(cid:27)gu-
rations in access-control systems. ACM Trans. Information and System Security,
14(1), 2011.
[3] R. Beckett. Minesweeper source code. https://bat(cid:27)sh.github.io/minesweeper,
2017.
[4] R. Beckett, R. Mahajan, T. Millstein, J. Padhye, and D. Walker. Don’t mind the gap:
Bridging network-wide objectives and device-level con(cid:27)gurations. In SIGCOMM,
2016.
[5] News and press | BGPMon. http://www.bgpmon.net/news-and-events/.
[6] A. Biere, A. Cimatti, E. Clarke, and Y. Zhu. Symbolic model checking without
BDDs. In TACAS, 1999.
[7] E. M. Clarke, E. A. Emerson, and A. P. Sistla. Automatic veri(cid:27)cation of (cid:27)nite-state
concurrent systems using temporal logic speci(cid:27)cations. ACM Trans. Programming
Languages and Systems, 8(2), 1986.
[8] L. De Moura and N. Bjørner. Z3: An e(cid:28)cient SMT solver. In TACAS, 2008.
[9] L. De Moura and N. Bjørner. Satis(cid:27)ability modulo theories: Introduction and
applications. Commun. ACM, 54(9), 2011.
[10] A. El-Hassany, P. Tsankov, L. Vanbever, and M. Vechev. Network-wide con(cid:27)gu-
ration synthesis. In CAV, 2017.
[11] S. K. Fayaz, T. Sharma, A. Fogel, R. Mahajan, T. Millstein, V. Sekar, and G. Varghese.
E(cid:28)cient network reachability analysis using a succinct control plane representa-
tion. In OSDI, 2016.
[12] N. Feamster and H. Balakrishnan. Detecting BGP con(cid:27)guration faults with static
analysis. In NSDI, 2005.
[13] A. Fogel, S. Fung, L. Pedrosa, M. Walraed-Sullivan, R. Govindan, R. Mahajan, and
T. Millstein. A general approach to network con(cid:27)guration analysis. In NSDI,
2015.
[14] A. Gember-Jacobson, R. Viswanathan, A. Akella, and R. Mahajan. Fast control
plane analysis using an abstract representation. In SIGCOMM, 2016.
[15] A. Gember-Jacobson, W. Wu, X. Li, A. Akella, and R. Mahajan. Management
plane analytics. In Internet Measurement Conference (IMC), 2015.
[16] T. G. Gri(cid:28)n, F. B. Shepherd, and G. Wilfong. The stable paths problem and
interdomain routing. IEEE/ACM Trans. Networking, 10(2), 2002.
[17] A. Horn, A. Kheradmand, and M. Prasad. Delta-net: Real-time network veri(cid:27)ca-
[18] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis: Static
tion using atoms. In NSDI, 2017.
checking for networks. In NSDI, 2012.
[19] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey. Veri(cid:30)ow: Verifying
network-wide invariants in real time. In NSDI, 2013.
[20] D. Kline. Network downtime results in job, revenue loss. http://www.avaya.
com/en/about-avaya/newsroom/news-releases/2014/pr-140305/, 2014.
[21] N. P. Lopes, N. Bjørner, P. Godefroid, K. Jayaraman, and G. Varghese. Checking
beliefs in dynamic networks. In NSDI, 2015.
[22] H. Mai, A. Khurshid, R. Agarwal, M. Caesar, P. B. Godfrey, and S. T. King. De-
bugging the data plane with anteater. In SIGCOMM, 2011.
[23] S. Malik and L. Zhang. Boolean satis(cid:27)ability from theoretical hardness to practical
success. Commun. ACM, 52(8), 2009.
[24] S. Narain, G. Levin, S. Malik, and V. Kaul. Declarative infrastructure con(cid:27)guration
synthesis and debugging. Journal of Network Systems Management, 16(3), 2008.
[25] S. Narain, R. Talpade, and G. Levin. Guide to Reliable Internet Services and
Applications, chapter Network Con(cid:27)guration Validation. Springer, 2010.
J. Networks. As the value of enterprise networks escalates, so does the need
for con(cid:27)guration management. https://www-935.ibm.com/services/au/gts/pdf/
200249.pdf, 2008.
[26]
[27] G. D. Plotkin, N. Bjørner, N. P. Lopes, A. Rybalchenko, and G. Varghese. Scaling
network veri(cid:27)cation using symmetry and surgery. In POPL, 2016.
[28] B. Quoitin and S. Uhlig. Modeling the routing of an autonomous system with
C-BGP. IEEE Network, 19(6), 2005.
[29] S. Sharwood.
Google cloud wobbles as workers patch wrong routers.
http://www.theregister.co.uk/2016/03/01/google_cloud_wobbles_as_workers_
patch_wrong_routers/, 2016.
[30] A. P. Sistla and E. M. Clarke. The complexity of propositional linear temporal
logics. J. ACM, 32(3), 1985.
[31] R. Stoenescu, M. Popovici, L. Negreanu, and C. Raiciu. Symnet: Scalable symbolic
execution for modern networks. In SIGCOMM, 2016.
[32] Y. Sverdlik. Microsoft: miscon(cid:27)gured network device led to azure out-
http://www.datacenterdynamics.com/content-tracks/servers-storage/
age.
microsoft-miscon(cid:27)gured-network-device-led-to-azure-outage/68312.
fullarticle, 2012.
[33] A. Wang, L. Jia, W. Zhou, Y. Ren, B. T. Loo, J. Rexford, V. Nigam, A. Scedrov,
and C. L. Talcott. FSR: Formal analysis and implementation toolkit for safe
inter-domain routing. IEEE/ACM Trans. Networking, 20(6), 2012.
[34] K. Weitz, D. Woos, E. Torlak, M. D. Ernst, A. Krishnamurthy, and Z. Tatlock.
Formal semantics and automated veri(cid:27)cation for the border gateway protocol.
In NetPL, 2016.
[35] S. Zhang and S. Malik. SAT based veri(cid:27)cation of network data planes.
In
Automated Technology for Veri(cid:27)cation and Analysis (ATVA), 2013.