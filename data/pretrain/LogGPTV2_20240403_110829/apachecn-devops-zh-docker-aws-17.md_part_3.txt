外部负载平衡器发布客户端将连接到的外部服务端点，在前面的示例中是`192.0.2.43:80`。负载平衡器服务端点将与群集中具有与服务相关联的活动 pod 的节点相关联，每个节点都有一个通过 **kube-proxy** 组件设置的节点端口映射。然后，节点端口映射被映射到节点上的每个本地端点，从而允许流量在整个集群中高效且均匀地进行负载平衡。
For communications from internal clients within the cluster, communications still take place using the service cluster IP address, as described earlier in this chapter.
在本章的后面，我们将看到如何将 AWS 负载平衡器与 EKS 集成，但是目前您的本地 Docker Desktop 环境包括对其自己的负载平衡器资源的支持，该资源在您的主机上为您的服务发布一个外部端点。向服务添加外部负载平衡器非常简单，如下例所示，我们在 todobackend 存储库中修改`k8s/app/deployments.yaml`文件的配置:
```
apiVersion: v1
kind: Service
metadata:
  name: todobackend
spec:
  selector:
    app: todobackend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000 type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todobackend
  labels:
    app: todobackend
...
...
```
为您的环境部署合适的负载平衡器所需要的只是将`spec.type`属性设置为`LoadBalancer`，Kubernetes 将自动创建一个外部负载平衡器。您可以通过应用更新的配置并运行`kubectl get svc`命令来测试这一点:
```
> kubectl apply -f k8s/app/deployment.yaml
service "todobackend" configured
deployment.apps "todobackend" unchanged
> kubectl get svc
NAME                 TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes           ClusterIP      10.96.0.1               443/TCP        8h
todobackend          LoadBalancer   10.103.210.17   localhost     80:31417/TCP   10s
> curl localhost
{"todos":"http://localhost/todos"}
```
请注意，`kubectl get svc`输出现在显示 todobackend 服务的外部 IP 地址是 localhost (localhost 总是您的 Docker 客户端在使用 Docker Desktop 时可以到达的外部接口)，并且它是在端口 80 上向外发布的，您可以通过运行`curl localhost`命令来验证它是否为真。外部端口映射到单节点集群上的端口 31417，这是 **kube-proxy** 组件监听的端口，以便支持我们前面描述的负载平衡器体系结构。
# 为您的豆荚增加体积
现在，我们已经了解了如何在 Kubernetes 集群内部以及向外部发布我们的应用，我们可以通过添加对 todo back and 应用的各种部署活动和依赖关系的支持，专注于使 todo back and 应用完全正常运行。
我们将首先解决为 todo back and 应用提供静态内容的问题——正如您在前面几章中所知道的，我们需要运行一个 **collectstatic** 任务，以确保静态内容可用于**todo back and**应用，并且这应该在部署**todo back and**应用的任何时候运行。 **collectstatic** 任务需要将静态内容写入一个卷，然后由主应用容器装载，因此让我们讨论如何将卷添加到 Kubernetes pods 中。
Kubernetes 有一个强大的存储子系统，支持多种卷类型，您可以在[https://kubernetes . io/docs/concepts/storage/volumes/# type-of-volumes](https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes)上了解更多。对于 **collectstatic** 用例来说， [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) 卷类型是合适的，它是一个遵循每个 pod 生命周期的卷——它是随 pod 动态创建和销毁的——因此它适合作为一个临时存储类型用于缓存和提供静态内容等用例，这些静态内容可以在 pod 创建时轻松地重新生成。
以下示例演示了如何向`k8s/app/deployment.yaml`文件添加公共`emptyDir`卷:
```
...
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todobackend
  labels:
    app: todobackend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todobackend
  template:
    metadata:
      labels:
        app: todobackend
    spec:
      securityContext:
 fsGroup: 1000
 volumes:
 - name: public
 emptyDir: {}
      containers:
      - name: todobackend
        image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            port: 8000
        livenessProbe:
          httpGet:
            port: 8000
        volumeMounts:
 - name: public
 mountPath: /public
        command:
        - uwsgi
        - --http=0.0.0.0:8000
        - --module=todobackend.wsgi
        - --master
        - --die-on-term
        - --processes=4
        - --threads=2
        - --check-static=/public
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: todobackend.settings_release
```
我们在 pod 模板的`spec.Volumes`属性中定义一个名为`public`的卷，然后使用 todobackend 容器定义中的`volumeMounts`属性将`public`卷挂载到`/public`。我们用例的一个重要配置要求是设置`spec.securityContext.fsGroup`属性，该属性定义了组标识，该组标识将被配置为 pod 中任何文件系统挂载的组所有者。我们将该值设置为`1000`；回想一下前面几章，todobackend 映像作为`app`用户运行，该用户/组 ID 为 1000。该配置确保 todobackend 容器能够读写静态内容到`public`卷。
如果您现在部署您的配置更改，您应该能够使用`kubectl exec`命令检查 todobackend 容器文件系统，并验证我们可以读写`/public`挂载:
```
> kubectl apply -f k8s/app/deployment.yaml
service "todobackend" unchanged
deployment.apps "todobackend" configured
> kubectl exec $(kubectl get pods -l app=todobackend -o=jsonpath='{.items[0].metadata.name}') \
    -it bash
bash-4.4$ touch /public/foo
bash-4.4$ ls -l /public/foo
-rw-r--r-- 1 app app 0 Jul 26 11:28 /public/foo
bash-4.4$ rm /public/foo
```
`kubectl exec`命令类似于`docker exec`命令，因为它允许您在当前运行的 pod 容器内执行命令。这个命令必须引用 pod 的名称，我们使用`kubectl get pods`命令和一个 JSON 路径查询来提取这个名称。如您所见，**至**容器内的`app`用户能够读写`/public`底座。
# 将初始化容器添加到您的豆荚中
有了用于静态内容的临时卷，我们现在可以专注于调度**收集静态**任务来为我们的应用生成静态内容。Kubernetes 支持[初始化容器](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)，这是 pod 中的一种特殊类型的容器，在主应用容器启动之前执行。Kubernetes 将确保您的 init 容器运行到完成，并在启动应用之前成功完成，如果您指定多个 init 容器，Kubernetes 将按顺序逐一执行它们，直到所有 init 容器都完成。
下面的代码演示了向`k8s/app/deployment.yaml`文件添加一个初始化容器:
```
...
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todobackend
  labels:
    app: todobackend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todobackend
  template:
    metadata:
      labels:
        app: todobackend
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
      - name: public
        emptyDir: {}
 initContainers:
      - name: collectstatic
 image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
 imagePullPolicy: IfNotPresent
 volumeMounts:
 - name: public
 mountPath: /public
 command: ["python3","manage.py","collectstatic","--no-input"]
 env:
 - name: DJANGO_SETTINGS_MODULE
 value: todobackend.settings_release
      containers:
      ...
      ...
```
现在，您可以部署您的更改，并使用`kubectl logs`命令验证 collectstatic init 容器是否成功执行:
```
> kubectl apply -f k8s/app/deployment.yaml
service "todobackend" unchanged
deployment.apps "todobackend" configured
> kubectl logs $(kubectl get pods -l app=todobackend -o=jsonpath='{.items[0].metadata.name}') \
    -c collectstatic
Copying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/fonts/README.txt'
...
...
159 static files copied to '/public/static'.
```
如果您现在在浏览器中浏览到`http://localhost`，您应该能够验证静态内容现在是否正确呈现:
![](img/6dce9b13-5f6f-4d61-a6a3-6dc3ac1017b6.png)
The todobackend application with correct static content