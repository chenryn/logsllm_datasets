title:WearFlow: Expanding Information Flow Analysis To Companion Apps in
Wear OS
author:Marcos Tileria and
Jorge Blasco and
Guillermo Suarez-Tangil
WearFlow: Expanding Information Flow Analysis
To Companion Apps in Wear OS
Jorge Blasco
Royal Holloway,
University of London
Guillermo Suarez-Tangil
King’s College London
IMDEA Networks
Marcos Tileria
Royal Holloway,
University of London
Abstract
Smartwatches and wearable technology have proliferated
in the recent years featured by a seamless integration with
a paired smartphone. Many mobile applications now come
with a companion app that the mobile OS deploys on the
wearable. These execution environments expand the context
of mobile applications across more than one device, introduc-
ing new security and privacy issues. One such issue is that
current information ﬂow analysis techniques can not capture
communication between devices. This can lead to undetected
privacy leaks when developers use these channels. In this
paper, we present WearFlow, a framework that uses static
analysis to detect sensitive data ﬂows across mobile and wear-
able companion apps in Android. WearFlow augments taint
analysis capabilities to enable inter-device analysis of apps.
WearFlow models proprietary libraries embedded in Google
Play Services and instruments the mobile and wearable app
to allow for a precise information ﬂow analysis between them.
We evaluate WearFlow on a test suite purposely designed to
cover different scenarios for the communication Mobile-Wear,
which we release as Wear-Bench. We also run WearFlow on
3K+ real-world apps and discover privacy violations in popu-
lar apps (10M+ downloads).
1 Introduction
Wearable devices are becoming increasingly popular and can
now run apps on appliances with large computing, storage,
and networking capabilities. According to Gartner, users will
spend $52 billion in wearable in 2020 [14], smartwatches
being the most popular gadget. The key feature of these de-
vices is that they are all interconnected, and provide a usable
interface to interact with smartphones and cloud-based apps.
In Android, wearable devices interact with the smart phone
via Wear OS (previously, Android Wear). Wear OS is similar
to Android in terms of architecture and frameworks but it is
optimized for a wrist experience. Apps in Wear OS can run
as standalone programs or companion apps.
Wearable devices provide an additional interface with the
digital world, but they are also a potential source of vulnerabil-
ities that increases the attack surface. For instance, a mobile
app could access sensitive information and share it with its
companion app in another device. Then, the companion app
could exﬁltrate that information to the Internet. This land-
scape expands the context of mobile applications across more
than one device. Therefore, we cannot assess the security of
a mobile app by just looking at the mobile ecosystem in a
vacuum. Instead, we need to consider also the wearable app
as part of the same execution context.
Previous studies have exposed vulnerabilities on smart-
watches and their ecosystem [10, 12, 16, 30]. However, these
works have mostly focused on the analysis of wearable apps in
isolation [12], their Bluetooth connectivity [16] or the usage
of third-party trackers [8]. To systematically study how apps
use sensitive data, the security community leverages infor-
mation ﬂow analysis [3, 9, 15, 18, 21, 32]. Recent works such
as COVERT [4], DidFail [18], and DialDroid [6] augment
the scope of the data tracking to include inter-app data ﬂows
which use inter-component communication (ICC) methods.
These works expand the execution context from one mobile
app to a set of mobile apps.
In contrast to previous problems, information ﬂow analy-
sis in the wearable ecosystem needs to track sensitive data
across apps in different devices, i.e.: the handheld and the
wearable. In other words, it needs to consider that data ﬂows
can propagate from the mobile app to its companion app (and
back) through the wireless connection. In Android, this com-
munication is manged by Google Play Services, a proprietary
application which handles aspects like serialization, synchro-
nization, and transmission (among other aspects within the
Android ecosystem).
In this work, we present WearFlow, a framework to enable
information ﬂow analysis for wearable-enabled applications.
To achieve this, we create a model of Google Play Service by
leveraging the Wear OS Application Program Interface (API).
This enables WearFlow to capture inter-device ﬂows. Thus,
we run taint analysis on each app and reason about ﬂows in an
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    63
extended context that comprises mobile and companion apps.
Our results show that WearFlow can detect Mobile-to-Wear
and Wear-to-Mobile data leaks with high precision and ﬁnds
evidences of misuse in the wild.1
In summary, we make the following contributions:
1. We propose WearFlow, an open-source tool that uses
a set of program analysis techniques to track sensi-
tive data ﬂows across mobile and wearable companion
apps. WearFlow includes library modeling, obfuscation-
resilient APIs identiﬁcation, string value analysis, and
inter-device data tracking.
2. We develop WearBench, a novel benchmark to analyze
Mobile-Wear communications. This test suite contains
examples of mobile and wearable apps sharing and ex-
ﬁltrating sensitive data using wearable APIs as the com-
munication channel.
3. We conduct a large scale analysis of real-world apps.
Our analysis reveals that real-world apps use wearable
APIs to send sensitive information across devices. Our
ﬁndings show that developers are not using data sharing
APIs following the guidelines given by Google.
The rest of the paper is structured as follows. Section 2 pro-
vides an overview of wearable companion apps and Google
Play Services. Section 3 presents the security threats of the
Mobile-Wear ecosystem. We describe how we model Google
Play Services in Section 4. We present WearFlow in Sec-
tion 5. We evaluate our solution and present the results of our
large scale analysis in Section 6. We discuss the limitations
of WearFlow and other related works in Sections 7 and 8.
Finally, we present our conclusions in Section 9.
2 Background
This section describes the Android-Wear ecosystem, including
how Wear applications communicate with their mobile or
handheld counter part via Google Play Services. We also
provide a motivation example to show the challenges behind
tracking data usage in this ecosystem.
2.1 Wearable apps
Wear OS is a stripped version of Android optimized to run
wearable apps on Android smartwatches. The capabilities of
these smartwatches range depending on the hardware of the
manufacturer. Apart from main components such as screen
and CPU, these devices incorporate an array of sensors in-
cluding accelerometers, heart-rate and GPS among others.
The Wear OS provides an abstraction for apps to access those
sensors.
1For simplicity, we refer to term Mobile-Wear when we use Mobile-to-
Wear and Wear-to-Mobile interchangeably.
Wear OS adopts the same security model used to protect
its mobile counterpart. In Android, applications are sand-
boxed and installed with minimum permissions by default.
From Android 6.0, dangerous permissions are not granted at
installation-time, but during run-time. Permissions still need
to be declared on the app Manifest. The same permission
model applies to Wear apps, however the authorization pro-
cess is independent. This is, permissions are not inherited
from the mobile app. The wearable app must request permis-
sion to access protected resources. These resources can be
either in the smartwatch or in the smartphone (the smartwatch
can also access resources in the smartphone and vice-versa
provided users grant the appropriate permissions).
Wear devices are also equipped with network connectivity
like Bluetooth, NFC, WiFi, or even access to cellular networks.
Most watches require a phone pairing process via Bluetooth
or WiFi. The pairing process establishes a low-level channel
that can be used by mobile apps to communicate with a com-
panion app in the smartwatch. Note, however, that wearable
apps can run standalone apps (i.e., no mobile app needed)
from Wear OS 2.0. Figure 1 illustrates the interplay between
a mobile phone, a smartwatch and the network. We next de-
scribe how Wear OS enable apps to communicate with each
other (including to how they communicate with the mobile
companion app).
Figure 1: Communication between a mobile app, its compan-
ion, Google Play Services (GPS) and the network.
2.2 Google Play Services
While Android is an open-source OS, most “stock” Android
devices run proprietary software from manufacturers (OEMs)
and third-parties [13]. To access the Google Play Store,
Google requires phone manufacturers to include other core
modules such as Google Mobile Services (GMS). These ser-
vices include Google apps (Maps, Youtube, etc.) and back-
ground services, also known as Google Play Services.
The Android ecosystem suffered a fragmentation problem
as OEMs were unable to keep up with Google updates [33].
In response to the security issues underlying the fragmenta-
tion problem, Google moved the most critical components
of Android to the Google Play Services bundle. This library
receives automated updates from the Play Store without in-
volving OEMs or users. Google Play Services has two core
64    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
components: i) a proprietary app that embeds the logic of the
different services offered by Google, and ii) a client library
that provides an interface to those services. Developers must
include the client library in their apps when accessing Google-
dependent services, including those regarding Wear. Figure 2
shows how the Google Play Services app interacts with the
client library using standard inter-process communication
(IPC) channels.
Figure 2: Google Play Services (GPS) architecture and update
process.
As of March of 2020, Google provides 19 different pack-
ages2 that allow developers to interface with all the Google
Play Services like Google Analytics, Cloud Messaging, Mo-
bile Ads, or Wear OS among others. In particular, the package
com.google.android.gms.wearable gathers all the interfaces
exposed for wearable apps, including the APIs that enable
the communication between mobile and wearables apps. This
package is commonly referred as the Data Layer API.
2.3 Data Layer
The Data Layer API provides IPC capabilities to apps. This
API consists of a set of data objects, methods, and listeners
that apps can rely on to send data using four types of abstrac-
tion:
1. DataItem is a key-value style structure that provides au-
tomatic synchronisation between devices for payloads
up to 100KB. The keys are strings values, and the pay-
load could be integers, strings or other 16 data types.
The DataClient APIs offers support to send DataItems
which are uniquely identiﬁed by a path (string value) in
the system.
2. Assets are objects that support large binaries of data like
images or audio. Assets are encapsulated into DataItems
before being sent. The Data Layer takes care of transfer-
ring the data, bandwidth administration, and caching the
binaries.
3. Message are short bytes of text message that can be used
for controlling media players, starting intents on the
wearable from the mobile, or request/response communi-
cation. The MessageClient object provides the APIs to
send this type of asynchronous messages. Each message
is also identiﬁed by a path in the same way as DataItems.
4. A ChannelClient offers an alternative set of API meth-
ods to send large ﬁles for media formats like music and
video (in streaming as well) which save disk space over
Assets. ChannelClient are also identiﬁed by a unique
path.
The Wearable API also provides the callbacks to listen for
events receiving one of these four data types. Table 1 shows a
summary of these objects and their corresponding callbacks.
We omit the list of API methods due to space constrains. The
16 data types supported by DataItems can be found in the API
documentation.3
2.4 Mobile-Wear Communication
Once two devices are paired, a mobile and its companion
apps can talk to each other through the Data Layer as long as
they are signed with the same certiﬁcate. This is a restriction
introduced for security reasons.
Apps can use the Data Layer to open synchronous and
asynchronous channels over the wireless channel. Table 1
shows the channel type corresponding to each abstraction of
the Data Layer.
The MessageClient (asynchronous API) exposes the meth-
ods to put a message into a queue without checking if the
message ever reaches its destination. This abstraction encap-
sulates the context of messages into a single API invocation,
for instance, destination and payload. In contrast, synchronous
channels (DataClient, ChannelClient) provide transparent
item synchronization across all devices connected to the net-
work. Moreover, synchronous channels rely on many APIs
to provide context to one transmission. From now on, we
will use synchronous channels to explain the operation of the
Data Layer as these are more complex than asynchronous.
The context of one transmission consists of: node identiﬁer,
channel type (table 1), channel path (string identiﬁer), and
the data that will be transferred. Node identiﬁer correspond
to string that represents a node in the Wear OS network. A
channel path represent a unique address which identiﬁes each
open channel within a node. Finally the data is the payload of
the transmission.
An app can create many channels of the same type to send
different payloads to the companion app. Developers often
2https://developers.google.com/android/guides/setup
3https://tinyurl.com/y4dwopqk
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    65
Table 1: Map between the different data types and the available channels in the Data Layer API.
Channel Type
Data Type - Channel
Messages - MessageClient Asynchronous/not-reliable Bytes
DataItems - DataClient
Assets - DataClient
Channel - ChannelClient
Synchronous/reliable
Synchronous/reliable
Synchronous/reliable
16 types
Binaries
Files
Information Listeners
OnMessageReceived
OnDataChanged
OnDataChanged
OnChannelOpened
use path patterns to create a hierarchy that matches the project
structure to identify different channels. For instance, the path
example.message.normal can be used to request a normal
update, while the path example.message.urgent could indicate
an urgent request.
To initiate a Mobile-Wear communication, the sender app
needs to create the context of the channel through a sequence
of APIs calls. Then, the Google Play Services app in the
phone performs the transmission, handling the encapsulation,
serialization, and retransmission (if needed). In the smart-
watch, Google Play Services receives the communication and
processes the data before handing it over to the wearable app.
The receiver app implements a listener that captures events
from Google Play Services. The listener could be deﬁned in
a background service or an activity where the data is ﬁnally
processed.
2.5 Motivation Example
In this section, we describe an example of a data leak using
the DataItem channel. Here, a wearable app sends sensitive
information to the Internet after a mobile app transfers sen-
sitive information through this channel. Listing 1 shows the
mobile app sending the geolocation and a constant string to
the companion wearable app.
First, the channel is created (line 4) with its corresponding
path. Then the geolocation and a string “hello” are added
to the channel in line 5, and 6 respectively. Finally, the
app synchronizes all the aggregated data in one API call