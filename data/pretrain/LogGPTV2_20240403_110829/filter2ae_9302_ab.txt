                memory[var3:var3 + 0x20] = temp5 - var3;
                memory[temp5:temp5 + 0x20] = memory[var1:var1 + 0x20];
                var var4 = temp5 + 0x20;
                var var6 = memory[var1:var1 + 0x20];
                var var5 = var1 + 0x20;
                var var7 = var6;
                var var8 = var4;
                var var9 = var5;
                var var10 = 0x00;
                if (var10 >= var7) {
                label_053B:
                    var temp6 = var6;
                    var4 = temp6 + var4;
                    var5 = temp6 & 0x1f;
                    if (!var5) {
                        var temp7 = memory[0x40:0x60];
                        log(memory[temp7:temp7 + var4 - temp7], [stack[-6]]);
                        return;
                    } else {
                        var temp8 = var5;
                        var temp9 = var4 - temp8;
                        memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];
                        var temp10 = memory[0x40:0x60];
                        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [stack[-6]]);
                        return;
                    }
                } else {
                label_0529:
                    var temp11 = var10;
                    memory[var8 + temp11:var8 + temp11 + 0x20] = memory[var9 + temp11:var9 + temp11 + 0x20];
                    var10 = temp11 + 0x20;
                    if (var10 >= var7) { goto label_053B; }
                    else { goto label_0529; }
                }
            } else {
                var temp12 = returndata.length;
                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];
                revert(memory[0x00:0x00 + returndata.length]);
            }
        }
        function owner() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }
        function func_059E() {
            var var0 = 0x00;
            var var1 = var0;
            var var2 = 0x0de0b6b3a7640000;
            var var3 = msg.value;
            if (!var2) { assert(); }
            var0 = var3 / var2;
            if (var0 >= 0x01) {
                var temp0 = var1 + 0x01;
                storage[temp0] = msg.sender | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);
                return;
            } else {
                var1 = 0x05;
                storage[var1] = msg.sender | (storage[var1] & ~0xffffffffffffffffffffffffffffffffffffffff);
                return;
            }
        }
        function func_0654() {
            var var0 = 0x00;
            var var1 = 0x0de0b6b3a7640000;
            var var2 = msg.value;
            if (!var1) { assert(); }
            var0 = var2 / var1;
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x04;
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = storage[temp0] + var0;
            if (msg.sender & 0xffff != 0x525b) { return; }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x04;
            var temp1 = keccak256(memory[0x00:0x40]);
            storage[temp1] = storage[temp1] - 0xb1b1;
        }
        function func_0730() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }
        function balance(var arg0) returns (var arg0) {
            memory[0x20:0x40] = 0x04;
            memory[0x00:0x20] = arg0;
            return storage[keccak256(memory[0x00:0x40])];
        }
        function func_076D() {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x04;
            if (storage[keccak256(memory[0x00:0x40])] 
截图中就是最关键的函数。
这里有三个限制，首先是storage[0]、storage[1]、storage[2]均需要等于`msg.sender`。这真是令人头大，我们稍微查询一下这三个参数都是什么东东。
很明显这个是其他人放进去的地址，目前还不是我们的所以我们需要把它们调整为自己的。
下面看具体的函数：
现在我们翻译一下这个函数的具体含义：首先该函数定义了三个变量，首先var1我们打印出来发现是1 ether。
此时可以跳出if，然后我们得到var0 = var2/1 = var2。（注意这里以ether为单位）
而var2是我们传入的value。我们接着向下看：下面的句子意思是令合约中的storage[user]+var0.
简单来说就类似于让合约中的用户余额+var0 。
之后我们看到`if (msg.sender & 0xffff != 0x525b) { return;
}`。这里是需要我们使用末尾为为525b的账户。例如：
`0xxxxxxcF46fA03aFFB24606f402D25A4994b3525b`。
之后便能进入该函数`storage[temp1] = storage[temp1] -0xb1b1;`。这里我们就很熟悉了。由于没有判断函数，所以这里很明显是个整数溢出。那这个有什么帮助呢？我们可以在后面函数中发现相关的作用。
下面我们来看第二个函数：
这个函数比较好理解，简单来说就是用户的合约中余额必须要大于`0x0f4240`。如果满足了这个时候便会将storage[2]更变为msg.sender。就满足了我们的第一个条件。这里就是为什么我们要通过溢出来达到这个要求，所以我们调用函数1后变能满足这个条件，所以1要在这个函数前执行。
后面`storage[0x02] = msg.sender | (storage[0x02] &
~0xffffffffffffffffffffffffffffffffffffffff);`我们可以算一算，与完后在或，最后还是msg.sender。
下面看第三个函数：
同样，这里传入var3，然后得到var0 。 并且需要满足>=1。之后temp0就成了1，于是我们就将storage[1]设置为msg.sender。
下面第五个函数：
同样，此时我们需要令var0==1，如何等于1呢？需要我们传入1 ether才可以。最后我们使得storage[0]为msg.sender。
这样我们就能满足调用flag的三个要求了。