# 洞若观火：全方位剖析Android信息窃取恶意软件（上篇）
|
##### 译文声明
本文是翻译文章，文章原作者 maxkersten，文章来源：maxkersten.nl
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、概述
在本文中，我们将分析一款Android恶意应用程序。该样本可以在Virusbay中找到，或者可以访问这个本地镜像。这一恶意软件可以窃取短信息，攻击者能够获取到关于特定目标的大量消息，或者可以从受害者的手机上获取双因素认证（2FA）令牌，从而攻破安全性良好的账户。
请注意，在本文中的代码，变量名称都将使用易读的名称。如果变量的名称可以直接从其类型或上下文中派生，那么我们将直接对其进行重命名，不会再特意提到。如果无法明确判断，我们将会进行相应解释。
关于该样本，详细信息如下。
MD5：a1b5c184d447eaac1ed47bc5a0db4725
SHA-1：98bb4315a5ee3f92a3275f08e45f7e35d9995cd2
SHA-256：c385020ef9e6e04ad08757324f78963378675a1bdb57a4de0fd525cffe7f2139
文件类型：应用程序/Java压缩包
检测率：32/61
## 二、工具
要将APK转换为Android
Studio项目，所使用的工具是AndroidProjectCreator。请注意，反编译器并不是总能够将SMALI字节码转换为Java。因此，使用不同的反编译器多次对APK进行转换是一个不错的习惯。
在开始分析前，首先检查所有类，因为变量的名称仍然没有改变。如果已经重构了一般的样本，那么新添加的代码可能在之前的阶段就已经被修改过，因为这部分内容没有嵌入到项目中。这方面的一个例子是，如果某个类中的一个函数没有正确反编译，其余函数将被重构。以下是一个例子：
    private Context context;
    /**
    * This is the renamed function, which was previously named "q".
    */
    public Context getContext() {
        return context;
    }
    /**
    * This is the newly added function, which relies on the original instead of the refactored name.
    */
    public String x() {
        return q.LAUNCHER_APPS_SERVICE;
    }
另外，在此之前，我们已经使用了APKTool获取单个类的SMALI字节码。使用Android Studio，主要是分析并重构Java代码。
## 三、代码分析的方法论
在分析之前，关于样本内部的信息非常少。为了避免把时间浪费在与研究目标无关的代码上，我们必须事先做出最好的预测和判断。
AndroidManifest.xml提供有关所请求的权限、服务、intent接收器（Intent Receiver）、广播接收器（Broadcast
Receiver）的信息。针对代码来说，Main Activity中的onCreate函数是应用程序的起点。因此，我们可以从这里开始调查。
随后，可以深入研究被调用的方法，这些方法可能存在于多个类中。如果只看混淆后的代码，可能无法揭示出代码的作用，因此我们也需要掘地三尺。这样，就可以向上重构代码，因为我们已经清楚了每个函数的内容是什么。
请注意，采用这种方法后，分析速度是呈指数级的。如果我们对样本所知甚少，那么分析每个函数都需要一段时间。由于类会在很多不同的地方重复使用，所以第一次的分析速度最慢。重构的每个部分，会随着对越来越多类的分析而逐渐清晰，从而加快对后续其他类的分析进度。
根据我自己的经验，用两个整天的时间通常足以重构整个样本。在第一天后，感觉只完成了很少的工作。但在第二天，就会补上所有缺失的拼图。
## 四、反编译APK
首先，将会对manifest进行分析。之后，将会分析并重构Java代码。在本文的分析过程中，我们没有提及错误的操作，从而避免对大家造成混淆。请注意，名为android的包中包含应用程序所使用的默认Android类。因此，这个包也超出了涉及的范围。
## 五、Manifest
在manifest中，揭示了许多关于应用程序的信息，因此我们要首先分析这个文件。下面展示了完整的manifest。
从上述manifest可以看到，请求的权限如下：
    CALL_PHONE
    SEND_SMS
    WRITE_SMS
    READ_SMS
    GET_TASKS
    ACCESS_NETWORK_STATE
    READ_PHONE_STATE
    RECEIVE_SMS
    WRITE_EXTERNAL_STORAGE
    INTERNET
    RECEIVE_BOOT_COMPLETED
    READ_LOGS
    READ_CONTACTS
根据上述信息，可以看到，恶意软件能够拨打任意电话号码，也可以向指定号码发送短信。此外，恶意软件可以接收和阅读短信。网络状态检查用于确认手机是否联网，网络许可用于与在线服务进行交互。
GET_TASKS和READ_LOGS都需要使用提升后的权限。这意味着，应用程序必须是固件的一部分，或者应该安装在特权分区上。读取设备上其他应用程序的日志需要READ_LOGS权限，而获取最近执行的任务列表需要GET_TASKS权限。
应用程序的主要活动也会在manifest中定义，如下所示。
android:name字段包含类的路径，其中的一个点就代表一个新的包（Package）。android:label=”[@string](https://github.com/string
"@string")/app_name”的值会自动显示在Android
Studio中，但也可以在res/values/strings.xml文件中找到，如下所示。
    Spy Mouse
每当设备启动、屏幕打开或者是按下主页按钮时，都会用到一个名为Ac的类。
使用设备管理权限的类名为Aa。下面是从manifest中节选的部分代码。
Manifest的最后一部分，用于捕获有关新收到的短信的intent，Ma类负责处理该消息。根据预先设定的优先级，这一应用程序比其他应用程序会更早处理intent，除非另一个应用程序的优先级更高。
## 六、源代码分析
要分析源代码，不仅仅要靠分析人员的预感，更重要的是应该根据事实做出合理判断，从而得到最好的结果。
###  6.1 MainActivity
MainActivity中的onCreate函数负责启动服务，设置重复警报，并检查是否授予了管理权限。根据是否授予管理权限，将执行函数q。其反编译后的源代码如下。
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(2130903040);
        Context applicationContext = getApplicationContext();
        applicationContext.startService(new Intent(applicationContext, Tb.class));
        ((AlarmManager) getSystemService(o.W)).setRepeating(0, System.currentTimeMillis(), 9000, PendingIntent.getBroadcast(this, o.z, new Intent(this, Ac.class), o.z));
        if (!((DevicePolicyManager) getSystemService(o.n)).isAdminActive(new ComponentName(this, Aa.class))) {
            q();
        }
    }
6.1.1 函数q
函数q启动了向管理员组添加新设备管理员的intent。
    private void q() {
        Intent intent = new Intent("android.app.action.ADD_DEVICE_ADMIN");
        intent.putExtra("android.app.extra.DEVICE_ADMIN"), new ComponentName(this, Aa.class));
        startActivityForResult(intent, 100);
    }
Aa类如下：
    public class Aa extends DeviceAdminReceiver {
        public void onDisabled(Context context, Intent intent) {
            super.onDisabled(context, intent);
        }
        public void onEnabled(Context context, Intent intent) {
            super.onEnabled(context, intent);
        }
        public void onPasswordChanged(Context context, Intent intent) {
            super.onPasswordChanged(context, intent);
        }
    }
这个类是DeviceAdminReceiver的包装器（Wrapper），这也就是它可以重构为DeviceAdminReceiverWrapper的原因。
6.1.2 字符串解密
在MainActivity类中，有一个名为q的全局变量，它是加密的。要对其进行解密，可以利用另一个名为q的函数完成，二者都需要不同的参数。具体代码如下：
    private static final String[] q = new String[]{q(q("-]aKu001f/Yxnu0010blU!!")), q(q("-Cuu0017u0011%I?u0004u000eL?"))};
    private static String q(char[] cArr) {
        int length = cArr.length;
        for (int i = 0; length > i; i++) {
            int i2;
            char c = cArr[i];
            switch (i % 5) {
                case 0:
                    i2 = 76;
                    break;
                case 1:
                    i2 = 45;
                    break;
                case 2:
                    i2 = 17;
                    break;
                case 3:
                    i2 = 101;
                    break;
                default:
                    i2 = TransportMediator.KEYCODE_MEDIA_PLAY;
                    break;
            }
            cArr[i] = (char) ((char) (i2 ^ c));
        }
        return new String(cArr).intern();
    }
    private static char[] q(String str) {
        char[] toCharArray = str.toCharArray();
        if (toCharArray.length < 2) {
            toCharArray[0] = (char) ((char) (toCharArray[0] ^ TransportMediator.KEYCODE_MEDIA_PLAY));
        }
        return toCharArray;
    }
请注意，TransportMediator.KEYCODE_MEDIA_PLAY的值等于126。在Android
Studio中，可以使用CTRL，并单击KEYCODE_MEDIA_PLAY枚举值来检查此值。
可以通过初始化变量并打印值来解密字符串数组。能够编译并执行Java代码的IDE，也可以执行所需的操作。字符串数组的解密值如下所示，其中每一行都是数组中的不同索引，从0开始。
    app.action.ADD_
    android.app.extra.
###  6.2 寻找引用
在onCreate函数中，某些函数需要字符串作为参数。DevicePolicyManager的函数getSystemService，需要一个类似于所请求服务名称的字符串。
    Protected void onCreate(Bundle bundle){
        //[omitted]
        applicationContext.startService(new Intent(applicationContext, Tb.class));
        ((AlarmManager) getSystemService(o.W)).setRepeating(0, System.currentTimeMillis(), 9000, PendingIntent.getBroadcast(this, o.z, new Intent(this, Ac.class), o.z));
        If (!((DevicePolicyManager) getSystemService(o.n)).isAdminActive(new ComponentName(this, Aa.class))) {
            q();
        }
    }
在检查名为o的类时，我们发现有很多公用字符串被加密。完整的类如下：
    Package org.starsizew;