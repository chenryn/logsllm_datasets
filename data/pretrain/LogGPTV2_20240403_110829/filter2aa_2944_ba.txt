which algorithm to use when validating the signature.
The answers are at the end of the chapter.
196
CHAPTER 6
Self-contained tokens and JWTs
There are several secure encryption algorithms in current use, but the most important
is the Advanced Encryption Standard (AES), which was standardized in 2001 after an
international competition, and is widely considered to be very secure. AES is an exam-
ple of a block cipher, which takes a fixed size input of 16 bytes and produces a 16-byte
encrypted output. AES keys are either 128 bits, 192 bits, or 256 bits in size. To encrypt
more (or less) than 16 bytes with AES, you use a block cipher mode of operation. The
choice of mode of operation is crucial to the security as demonstrated in figure 6.4,
which shows an image of a penguin encrypted with the same AES key but with two dif-
ferent modes of operation.1 The Electronic Code Book (ECB) mode is completely
insecure and leaks a lot of details about the image, while the more secure Counter
Mode (CTR) eliminates any details and looks like random noise.
DEFINITION
A block cipher encrypts a fixed-sized block of input to produce a
block of output. The AES block cipher operates on 16-byte blocks. A block
cipher mode of operation allows a fixed-sized block cipher to be used to encrypt
messages of any length. The mode of operation is critical to the security of the
encryption process.
1 This is a very famous example known as the ECB Penguin. You’ll find the same example in many introductory
cryptography books.
Original image
Encrypted with AES-ECB
Encrypted with AES-CTR
Figure 6.4
An image of the Linux mascot, Tux, that has been encrypted by AES 
in ECB mode. The shape of the penguin and many features are still visible despite 
the encryption. By contrast, the same image encrypted with AES in CTR mode is 
indistinguishable from random noise. (Original image by Larry Ewing and The GIMP, 
https://commons.wikimedia.org/wiki/File:Tux.svg.)
197
Encrypting sensitive attributes
6.3.1
Authenticated encryption
Many encryption algorithms only ensure the confidentiality of data that has been
encrypted and don’t claim to protect the integrity of that data. This means that an
attacker won’t be able to read any sensitive attributes in an encrypted token, but they
may be able to alter them. For example, if you know that a token is encrypted with
CTR mode and (when decrypted) starts with the string user=brian, you can change
this to read user=admin by simple manipulation of the ciphertext even though you
can’t decrypt the token. Although there isn’t room to go into the details here, this
kind of attack is often covered in cryptography tutorials under the name chosen cipher-
text attack.
DEFINITION
A chosen ciphertext attack is an attack against an encryption scheme
in which an attacker manipulates the encrypted ciphertext.
In terms of threat models from chapter 1, encryption protects against information dis-
closure threats, but not against spoofing or tampering. In some cases, confidentiality
can also be lost if there is no guarantee of integrity because an attacker can alter a
message and then see what error message is generated when the API tries to decrypt
it. This often leaks information about what the message decrypted to.
LEARN MORE
You can learn more about how modern encryption algorithms
work, and attacks against them, from an up-to-date introduction to cryptogra-
phy book such as Serious Cryptography by Jean-Philippe Aumasson (No Starch
Press, 2018).
To protect against spoofing and tampering threats, you should always use algorithms
that provide authenticated encryption. Authenticated encryption algorithms combine an
encryption algorithm for hiding sensitive data with a MAC algorithm, such as HMAC,
to ensure that the data can’t be altered or faked.
DEFINITION
Authenticated encryption combines an encryption algorithm with
a MAC. Authenticated encryption ensures confidentiality and integrity of
messages.
One way to do this would be to combine a secure encryption scheme like AES in CTR
mode with HMAC. For example, you might make an EncryptedTokenStore that
encrypts data using AES and then combine that with the existing HmacTokenStore for
authentication. But there are two ways you could combine these two stores: first
encrypting and then applying HMAC, or, first applying HMAC and then encrypting
the token and the tag together. It turns out that only the former is generally secure
and is known as Encrypt-then-MAC (EtM). Because it is easy to get this wrong, cryptog-
raphers have developed several dedicated authenticated encryption modes, such as
Galois/Counter Mode (GCM) for AES. JOSE supports both GCM and EtM encryption
modes, which you’ll examine in section 6.3.3, but we’ll begin by looking at a simpler
alternative.
198
CHAPTER 6
Self-contained tokens and JWTs
6.3.2
Authenticated encryption with NaCl
Because cryptography is complex with many subtle details to get right, a recent trend
has been for cryptography libraries to provide higher-level APIs that hide many of
these details from developers. The most well-known of these is the Networking and
Cryptography Library (NaCl; https://nacl.cr.yp.to) designed by Daniel Bernstein. NaCl
(pronounced “salt,” as in sodium chloride) provides high-level operations for authen-
ticated encryption, digital signatures, and other cryptographic primitives but hides
many of the details of the algorithms being used. Using a high-level library designed
by experts such as NaCl is the safest option when implementing cryptographic protec-
tions for your APIs and can be significantly easier to use securely than alternatives.
TIP
Other cryptographic libraries designed to be hard to misuse include
Google’s Tink (https://github.com/google/tink) and Themis from Cossack
Labs (https://github.com/cossacklabs/themis). The Sodium library (https://
libsodium.org) is a widely used clone of NaCl in C that provides many additional
extensions and a simplified API with bindings for Java and other languages.
In this section, you’ll use a pure Java implementation of NaCl called Salty Coffee
(https://github.com/NeilMadden/salty-coffee), which provides a very simple and
Java-friendly API with acceptable performance.2 To add the library to the Natter API
project, open the pom.xml file in the root folder of the Natter API project and add
the following lines to the dependencies section:
      software.pando.crypto
      salty-coffee
      1.0.2
Listing 6.5 shows an EncryptedTokenStore implemented using the Salty Coffee library’s
SecretBox class, which provides authenticated encryption. Like the HmacTokenStore,
you can delegate creating the token to another store, allowing this to be wrapped
around the JsonTokenStore or another format. Encryption is then performed with
the SecretBox.encrypt() method. This method returns a SecretBox object, which
has methods for getting the encrypted ciphertext and the authentication tag. The
toString() method encodes these components into a URL-safe string that you can use
directly as the token ID. To decrypt the token, you can use the SecretBox.from-
String() method to recover the SecretBox from the encoded string, and then use the
decryptToString() method to decrypt it and get back the original token ID. Navigate
to the src/main/java/com/manning/apisecurityinaction/token folder again and cre-
ate a new file named EncryptedTokenStore.java with the contents of listing 6.5.
2 I wrote Salty Coffee, reusing cryptographic code from Google's Tink library, to provide a simple pure Java
solution. Bindings to libsodium are generally faster if you can use a native library.
199
Encrypting sensitive attributes
package com.manning.apisecurityinaction.token;
import java.security.Key;
import java.util.Optional;
import software.pando.crypto.nacl.SecretBox;
import spark.Request;
public class EncryptedTokenStore implements TokenStore {
    private final TokenStore delegate;
    private final Key encryptionKey;
    public EncryptedTokenStore(TokenStore delegate, Key encryptionKey) {
        this.delegate = delegate;
        this.encryptionKey = encryptionKey;
    }
    @Override
    public String create(Request request, Token token) {
        var tokenId = delegate.create(request, token);   
        return SecretBox.encrypt(encryptionKey, tokenId).toString();    
    }
    @Override
    public Optional read(Request request, String tokenId) {
        var box = SecretBox.fromString(tokenId);                    
        var originalTokenId = box.decryptToString(encryptionKey);   
        return delegate.read(request, originalTokenId);             
    }
    @Override
    public void revoke(Request request, String tokenId) {
        var box = SecretBox.fromString(tokenId);                    
        var originalTokenId = box.decryptToString(encryptionKey);   
        delegate.revoke(request, originalTokenId);                  
    }
}
As you can see, the EncryptedTokenStore using SecretBox is very short because the
library takes care of almost all details for you. To use the new store, you’ll need to gen-
erate a new key to use for encryption rather than reusing the existing HMAC key.
PRINCIPLE
A cryptographic key should only be used for a single purpose. Use
separate keys for different functionality or algorithms.
Because Java’s keytool command doesn’t support generating keys for the encryption
algorithm that SecretBox uses, you can instead generate a standard AES key and then
convert it as the two key formats are identical. SecretBox only supports 256-bit keys,
Listing 6.5
An EncryptedTokenStore
Call the delegate 
TokenStore to 
generate the 
token ID.
Use the SecretBox.encrypt()
method to encrypt the token.
Decode and
decrypt
the box and
then use
the original
token ID.
200
CHAPTER 6
Self-contained tokens and JWTs
so run the following command in the root folder of the Natter API project to add a
new AES key to the existing keystore:
keytool -genseckey -keyalg AES -keysize 256 \
    -alias aes-key -keystore keystore.p12 -storepass changeit
You can then load the new key in the Main class just as you did for the HMAC key in
chapter 5. Open Main.java in your editor and locate the lines that load the HMAC key
from the keystore and add a new line to load the AES key:
var macKey = keyStore.getKey("hmac-key", keyPassword);    
var encKey = keyStore.getKey("aes-key", keyPassword);   
You can convert the key into the correct format with the SecretBox.key() method,
passing in the raw key bytes, which you can get by calling encKey.getEncoded(). Open
the Main.java file again and update the code that constructs the TokenController to
convert the key and use it to create an EncryptedTokenStore, wrapping a JsonToken-
Store, instead of the previous JWT-based implementation:
    var naclKey = SecretBox.key(encKey.getEncoded());   
    var tokenStore = new EncryptedTokenStore(             
                new JsonTokenStore(), naclKey);           
    var tokenController = new TokenController(tokenStore);
You can now restart the API and login again to get a new encrypted token.
6.3.3
Encrypted JWTs
NaCl’s SecretBox is hard to beat for simplicity and security, but there is no standard
for how encrypted tokens are formatted into strings and different libraries may use
different formats or leave this up to the application. This is not a problem when
tokens are only consumed by the same API that generated them but can become an
issue if tokens are shared between many APIs, developed by separate teams in differ-
ent programming languages. A standard format such as JOSE becomes more compel-
ling in these cases. JOSE supports several authenticated encryption algorithms in the
JSON Web Encryption (JWE) standard. 
 An encrypted JWT using the JWE Compact Serialization looks superficially like the
HMAC JWTs from section 6.2, but there are more components reflecting the more
complex structure of an encrypted token, shown in figure 6.5. The five components of
a JWE are:
1
The JWE header, which is very like the JWS header, but with two additional
fields: enc, which specifies the encryption algorithm, and zip, which specifies
an optional compression algorithm to be applied before encryption.
The existing HMAC key
The new AES key
Convert the key to 
the correct format.
Construct the 
EncryptedToken-
Store wrapping a 
JsonTokenStore.
201
Encrypting sensitive attributes
2
An optional encrypted key. This is used in some of the more complex encryp-
tion algorithms. It is empty for the direct symmetric encryption algorithm that
is covered in this chapter.
3
The initialization vector or nonce used when encrypting the payload. Depending
on the encryption method being used, this will be either a 12- or 16-byte ran-
dom binary value that has been Base64url-encoded.
4
The encrypted ciphertext.
5
The MAC authentication tag.
DEFINITION
An initialization vector (IV) or nonce (number-used-once) is a
unique value that is provided to the cipher to ensure that ciphertext is always
different even if the same message is encrypted more than once. The IV
should be generated using a java.security.SecureRandom or other cryp-
tographically-secure pseudorandom number generator (CSPRNG).3 An IV
doesn’t need to be kept secret.
JWE divides specification of the encryption algorithm into two parts:
 The enc header describes the authenticated encryption algorithm used to
encrypt the payload of the JWE.
 The alg header describes how the sender and recipient agree on the key used
to encrypt the content.
There are a wide variety of key management algorithms for JWE, but for this chapter
you will stick to direct encryption with a secret key. For direct encryption, the algo-
rithm header is set to dir (direct). There are currently two available families of
encryption methods in JOSE, both of which provide authenticated encryption:
A128GCM, A192GCM, and A256GCM use AES in Galois Counter Mode (GCM).
A128CBC-HS256, A192CBC-HS384, and A256CBC-HS512 use AES in Cipher Block
Chaining (CBC) mode together with either HMAC in an EtM configuration as
described in section 6.3.1. 
3 A nonce only needs to be unique and could be a simple counter. However, synchronizing a counter across
many servers is difficult and error-prone so it’s best to always use a random value.
eyJ0eXAiOiJKV..bbnRT0wPQv1OLt2Au0DDDQ.C6LMXpsucKYwXpyzhmj.N5CxXQBQMIh
Header
Ciphertext
Authentication
tag
Encrypted key
Initialization vector
Figure 6.5
A JWE in Compact Serialization consists of 5 components: a header, an 
encrypted key (blank in this case), an initialization vector or nonce, the encrypted 
ciphertext, and then the authentication tag. Each component is URL-safe Base64-
encoded. Values have been truncated for display.
202
CHAPTER 6
Self-contained tokens and JWTs
DEFINITION
All the encryption algorithms allow the JWE header and IV to be
included in the authentication tag without being encrypted. These are known
as authenticated encryption with associated data (AEAD) algorithms.
GCM was designed for use in protocols like TLS where a unique session key is negoti-
ated for each session and a simple counter can be used for the nonce. If you reuse a
nonce with GCM then almost all security is lost: an attacker can recover the MAC key
and use it to forge tokens, which is catastrophic for authentication tokens. For this
reason, I prefer to use CBC with HMAC for directly encrypted JWTs, but for other
JWE algorithms GCM is an excellent choice and very fast.
 CBC requires the input to be padded to a multiple of the AES block size (16 bytes),
and this historically has led to a devastating vulnerability known as a padding oracle
attack, which allows an attacker to recover the full plaintext just by observing the dif-
ferent error messages when an API tries to decrypt a token they have tampered with.
The use of HMAC in JOSE prevents this kind of tampering and largely eliminates the
possibility of padding oracle attacks, and the padding has some security benefits.
WARNING
You should avoid revealing the reason why decryption failed to the
callers of your API to prevent oracle attacks like the CBC padding oracle attack.
What key size should you use?
AES allows keys to be in one of three different sizes: 128-bit, 192-bit, or 256-bit. In
principle, correctly guessing a 128-bit key is well beyond the capability of even an
attacker with enormous amounts of computing power. Trying every possible value of
a key is known as a brute-force attack and should be impossible for a key of that size.
There are three exceptions in which that assumption might prove to be wrong:
 A weakness in the encryption algorithm might be discovered that reduces the
amount of effort required to crack the key. Increasing the size of the key pro-
vides a security margin against such a possibility.
 New types of computers might be developed that can perform brute-force
searches much quicker than existing computers. This is believed to be true of
quantum computers, but it’s not known whether it will ever be possible to
build a large enough quantum computer for this to be a real threat. Doubling
the size of the key protects against known quantum attacks for symmetric
algorithms like AES.
 Theoretically, if each user has their own encryption key and you have millions
of users, it may be possible to attack every key simultaneously for less effort
than you would expect from naively trying to break them one at a time. This is
known as a batch attack and is described further in https://blog.cr.yp.to/
20151120-batchattacks.html.
At the time of writing, none of these attacks are practical for AES, and for short-lived
authentication tokens the risk is significantly less, so 128-bit keys are perfectly safe.
On the other hand, modern CPUs have special instructions for AES encryption so
there’s very little extra cost for 256-bit keys if you want to eliminate any doubt.
203
Encrypting sensitive attributes
6.3.4
Using a JWT library
Due to the relative complexity of producing and consuming encrypted JWTs com-
pared to HMAC, you’ll continue using the Nimbus JWT library in this section.
Encrypting a JWT with Nimbus requires a few steps, as shown in listing 6.6. 
 First you build a JWT claims set using the convenient JWTClaimsSet.Builder class. 
 You can then create a JWEHeader object to specify the algorithm and encryption
method. 
 Finally, you encrypt the JWT using a DirectEncrypter object initialized with
the AES key. 
The serialize() method on the EncryptedJWT object will then return the JWE Com-
pact Serialization. Navigate to src/main/java/com/manning/apisecurityinaction/token
and create a new file name EncryptedJwtTokenStore.java. Type in the contents of list-
ing 6.6 to create the new token store and save the file. As for the JsonTokenStore,
leave the revoke method blank for now. You’ll fix that in section 6.6.
package com.manning.apisecurityinaction.token;
import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.*;
import com.nimbusds.jwt.*;
import spark.Request;
import javax.crypto.SecretKey;
import java.text.ParseException;
import java.util.*;
public class EncryptedJwtTokenStore implements TokenStore {
    private final SecretKey encKey;
    public EncryptedJwtTokenStore(SecretKey encKey) {
        this.encKey = encKey;
    }
    @Override
    public String create(Request request, Token token) {
        var claimsBuilder = new JWTClaimsSet.Builder()      
                .subject(token.username)                    
                .audience("https://localhost:4567")         
                .expirationTime(Date.from(token.expiry));   
        token.attributes.forEach(claimsBuilder::claim);     
Remember that the JWE CBC with HMAC methods take a key that is twice the size as
normal. For example, the A128CBC-HS256 method requires a 256-bit key, but this is
really two 128-bit keys joined together rather than a true 256-bit key.
Listing 6.6
The EncryptedJwtTokenStore
Build the JWT 
claims set.
204
CHAPTER 6
Self-contained tokens and JWTs
        var header = new JWEHeader(JWEAlgorithm.DIR,               
                EncryptionMethod.A128CBC_HS256);                   
        var jwt = new EncryptedJWT(header, claimsBuilder.build()); 
        try {
            var encrypter = new DirectEncrypter(encKey);     
            jwt.encrypt(encrypter);                          
        } catch (JOSEException e) {
            throw new RuntimeException(e);
        }
        return jwt.serialize();     
    }
    @Override
    public void revoke(Request request, String tokenId) {
    }
}
Processing an encrypted JWT using the library is just as simple as creating one. First,
you parse the encrypted JWT and then decrypt it using a DirectDecrypter initialized
with the AES key, as shown in listing 6.7. If the authentication tag validation fails
during decryption, then the library will throw an exception. To further reduce the
possibility of padding oracle attacks in CBC mode, you should never return any details
about why decryption failed to the user, so just return an empty Optional here as if no