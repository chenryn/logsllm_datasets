### lua_Integer
typedef ... lua_Integer;
Lua 中的整数类型。
缺省时，这个就是 long long， （通常是一个 64 位以二为补码的整数）， 也可以修改它为 long 或 int （通常是一个 32 位以二为补码的整数）。 （参见 luaconf.h 中的 LUA_INT 。）
Lua 定义了两个常量： LUA_MININTEGER 和 LUA_MAXINTEGER 来表示这个类型可以表示的最小和最大值。
### lua_isboolean
[-0, +0, –]
int lua_isboolean (lua_State *L, int index);
当给定索引的值是一个布尔量时，返回 1 ，否则返回 0 。
### lua_iscfunction
[-0, +0, –]
int lua_iscfunction (lua_State *L, int index);
当给定索引的值是一个 C 函数时，返回 1 ，否则返回 0 。
### lua_isfunction
[-0, +0, –]
int lua_isfunction (lua_State *L, int index);
当给定索引的值是一个函数（ C 或 Lua 函数均可）时，返回 1 ，否则返回 0 。
### lua_isinteger
[-0, +0, –]
int lua_isinteger (lua_State *L, int index);
当给定索引的值是一个整数 （其值是一个数字，且内部以整数储存）， 时，返回 1 ，否则返回 0 。
### lua_islightuserdata
[-0, +0, –]
int lua_islightuserdata (lua_State *L, int index);
当给定索引的值是一个轻量用户数据时，返回 1 ，否则返回 0 。
### lua_isnil
[-0, +0, –]
int lua_isnil (lua_State *L, int index);
当给定索引的值是 nil 时，返回 1 ，否则返回 0 。
### lua_isnone
[-0, +0, –]
int lua_isnone (lua_State *L, int index);
当给定索引无效时，返回 1 ，否则返回 0 。
### lua_isnoneornil
[-0, +0, –]
int lua_isnoneornil (lua_State *L, int index);
当给定索引无效或其值是 nil 时， 返回 1 ，否则返回 0 。
### lua_isnumber
[-0, +0, –]
int lua_isnumber (lua_State *L, int index);
当给定索引的值是一个数字，或是一个可转换为数字的字符串时，返回 1 ，否则返回 0 。
### lua_isstring
[-0, +0, –]
int lua_isstring (lua_State *L, int index);
当给定索引的值是一个字符串或是一个数字 （数字总能转换成字符串）时，返回 1 ，否则返回 0 。
### lua_istable
[-0, +0, –]
int lua_istable (lua_State *L, int index);
当给定索引的值是一张表时，返回 1 ，否则返回 0 。
### lua_isthread
[-0, +0, –]
int lua_isthread (lua_State *L, int index);
当给定索引的值是一条线程时，返回 1 ，否则返回 0 。
### lua_isuserdata
[-0, +0, –]
int lua_isuserdata (lua_State *L, int index);
当给定索引的值是一个用户数据（无论是完全的还是轻量的）时， 返回 1 ，否则返回 0 。
### lua_isyieldable
[-0, +0, –]
int lua_isyieldable (lua_State *L);
如果给定的协程可以让出，返回 1 ，否则返回 0 。
### lua_KContext
typedef ... lua_KContext;
延续函数上下文参数的类型。 这一定是一个数字类型。 当有 intptr_t 时，被定义为 intptr_t ， 因此它也可以保存指针。 否则，它被定义为 ptrdiff_t。
### lua_KFunction
typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);
延续函数的类型（参见 §4.7 ）。
### lua_len
[-0, +1, e]
void lua_len (lua_State *L, int index);
返回给定索引的值的长度。 它等价于 Lua 中的 '#' 操作符 （参见 §3.4.7）。 它有可能触发 "length" 事件对应的元方法 （参见 §2.4 ）。 结果压栈。
### lua_load
[-0, +1, –]
int lua_load (lua_State *L,
              lua_Reader reader,
              void *data,
              const char *chunkname,
              const char *mode);
加载一段 Lua 代码块，但不运行它。 如果没有错误， lua_load 把一个编译好的代码块作为一个 Lua 函数压到栈顶。 否则，压入错误消息。
lua_load 的返回值可以是：
- LUA_OK: 没有错误；
- LUA_ERRSYNTAX: 在预编译时碰到语法错误；
- LUA_ERRMEM: 内存分配错误；
- LUA_ERRGCMM: 在运行 __gc 元方法时出错了。 （这个错误和代码块加载过程无关，它是由垃圾收集器引发的。）
lua_load 函数使用一个用户提供的 reader 函数来读取代码块（参见 lua_Reader ）。 data 参数会被传入 reader 函数。
chunkname 这个参数可以赋予代码块一个名字， 这个名字被用于出错信息和调试信息（参见 §4.9）。
lua_load 会自动检测代码块是文本的还是二进制的， 然后做对应的加载操作（参见程序 luac ）。 字符串 mode 的作用和函数 load 一致。 它还可以是 NULL 等价于字符串 "bt"。
lua_load 的内部会使用栈， 因此 reader 函数必须永远在每次返回时保留栈的原样。
如果返回的函数有上值， 第一个上值会被设置为 保存在注册表（参见 §4.5） LUA_RIDX_GLOBALS 索引处的全局环境。 在加载主代码块时，这个上值是 _ENV 变量（参见 §2.2）。 其它上值均被初始化为 nil。
### lua_newstate
[-0, +0, –]
lua_State *lua_newstate (lua_Alloc f, void *ud);
创建一个运行在新的独立的状态机中的线程。 如果无法创建线程或状态机（由于内存有限）则返回 NULL。 参数 f 是一个分配器函数； Lua 将通过这个函数做状态机内所有的内存分配操作。 第二个参数 ud ，这个指针将在每次调用分配器时被转入。
### lua_newtable
[-0, +1, e]
void lua_newtable (lua_State *L);
创建一张空表，并将其压栈。 它等价于 lua_createtable(L, 0, 0) 。
### lua_newthread
[-0, +1, e]
lua_State *lua_newthread (lua_State *L);
创建一条新线程，并将其压栈， 并返回维护这个线程的 lua_State 指针。 这个函数返回的新线程共享原线程的全局环境， 但是它有独立的运行栈。
没有显式的函数可以用来关闭或销毁掉一个线程。 线程跟其它 Lua 对象一样是垃圾收集的条目之一。
### lua_newuserdata
[-0, +1, e]
void *lua_newuserdata (lua_State *L, size_t size);
这个函数分配一块指定大小的内存块， 把内存块地址作为一个完全用户数据压栈， 并返回这个地址。 宿主程序可以随意使用这块内存。
### lua_next
[-1, +(2|0), e]
int lua_next (lua_State *L, int index);
从栈顶弹出一个键， 然后把索引指定的表中的一个键值对压栈 （弹出的键之后的 “下一” 对）。 如果表中以无更多元素， 那么 lua_next 将返回 0 （什么也不压栈）。
典型的遍历方法是这样的：
```lua
 /*  表放在索引 't' 处 */
 lua_pushnil(L);  /* 第一个键 */
 while (lua_next(L, t) != 0) {
   /* 使用 '键' （在索引 -2 处） 和 '值' （在索引 -1 处）*/
   printf("%s - %s\n",
          lua_typename(L, lua_type(L, -2)),
          lua_typename(L, lua_type(L, -1)));
   /* 移除 '值' ；保留 '键' 做下一次迭代 */
   lua_pop(L, 1);
 }
```
在遍历一张表的时候， 不要直接对键调用 lua_tolstring ， 除非你知道这个键一定是一个字符串。 调用 lua_tolstring 有可能改变给定索引位置的值； 这会对下一次调用 lua_next 造成影响。
关于迭代过程中修改被迭代的表的注意事项参见 next 函数。
### lua_Number
typedef double lua_Number;
Lua 中浮点数的类型。
Lua 中数字的类型。缺省是 double ，但是你可以改成 float 。 （参见 luaconf.h 中的 LUA_REAL 。）
### lua_numbertointeger
`int lua_numbertointeger (lua_Number n, lua_Integer *p);`  
将一个 Lua 浮点数转换为一个 Lua 整数。 这个宏假设 n 有对应的整数值。 如果该值在 Lua 整数可表示范围内， 就将其转换为一个整数赋给 *p。 宏的结果是一个布尔量，表示转换是否成功。 （注意、由于圆整关系，这个范围测试不用此宏很难做对。）
该宏有可能对其参数做多次取值。
### lua_pcall
[-(nargs + 1), +(nresults|1), –]
int lua_pcall (lua_State *L, int nargs, int nresults, int msgh);
以保护模式调用一个函数。
nargs 和 nresults 的含义与 lua_call 中的相同。 如果在调用过程中没有发生错误， lua_pcall 的行为和 lua_call 完全一致。 但是，如果有错误发生的话， lua_pcall 会捕获它， 然后把唯一的值（错误消息）压栈，然后返回错误码。 同 lua_call 一样， lua_pcall 总是把函数本身和它的参数从栈上移除。
如果 msgh 是 0 ， 返回在栈顶的错误消息就和原始错误消息完全一致。 否则， msgh 就被当成是 错误处理函数 在栈上的索引位置。 （在当前的实现里，这个索引不能是伪索引。） 在发生运行时错误时， 这个函数会被调用而参数就是错误消息。 错误处理函数的返回值将被 lua_pcall 作为错误消息返回在堆栈上。
典型的用法中，错误处理函数被用来给错误消息加上更多的调试信息， 比如栈跟踪信息。 这些信息在 lua_pcall 返回后， 由于栈已经展开，所以收集不到了。
lua_pcall 函数会返回下列常数 （定义在 lua.h 内）中的一个：
- LUA_OK (0): 成功。
- LUA_ERRRUN: 运行时错误。
- LUA_ERRMEM: 内存分配错误。对于这种错，Lua 不会调用错误处理函数。
- LUA_ERRERR: 在运行错误处理函数时发生的错误。
- LUA_ERRGCMM: 在运行 __gc 元方法时发生的错误。 （这个错误和被调用的函数无关。）
### lua_pcallk
[-(nargs + 1), +(nresults|1), –]
int lua_pcallk (lua_State *L,
                int nargs,
                int nresults,
                int msgh,
                lua_KContext ctx,