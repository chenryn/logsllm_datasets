rithms. The randomized key generation algorithm Kg takes
the security parameter λ and outputs a public–secret key
pair: (pk, sk) $← Kg(λ). The signing algorithm Sign takes
the secret key and message m ∈ MsgSp and outputs a
$← Sign(sk, m). The veriﬁcation algorithm Ver
signature: σ
takes the public key, a message and a signature and outputs
a bit b ∈ {0, 1} indicating whether the signature is deemed
valid or not: b ← Ver(pk, m, σ).
For
correctness,
every
(pk, sk) output by Kg(λ) and every m ∈ MsgSp,
Ver(pk, m, Sign(sk, m)) = 1.
required
that
for
is
it
To deﬁne security consider the experiment Expsuf
SS(A)
associated with an adversary A. First, a pair of keys is
$← Kg(λ). Then A is given pk, the
generated: (pk, sk)
oracle Sign(sk, ·), and it has to output a message and a
forgery: (M, σ) $← ASign(sk,·)(pk). The adversary wins and
the experiment returns 1 iff Ver(pk, m, σ) = 1, m ∈ MsgSp
and σ was never output by the Sign(sk, ·) oracle. We say
that SS is strongly unforgeable against chosen message
attack (suf-cma) if Advsuf
is
negligible in λ, for all efﬁcient algorithms A.
SS (A) = Pr
SS (A) = 1
Expsuf
(cid:2)
(cid:3)
Authenticated Encryption with Associated Data. After
the parties using QUIC establish the shared key, they should
be able to use the secure channel to exchange data in a
secure manner. The secure channel is implemented by using
an authenticated encryption with associated data scheme,
which we now deﬁne. We adopt the deﬁnition of an au-
thenticated encryption with associated data scheme and its
corresponding security deﬁnition from [24].
An authenticated-encryption with associated-data scheme
AEAD consists of two algorithms AEAD = (E, D) and
is associated with key space {0, 1}λ, nonce space {0, 1}n,
additional authenticated data space {0, 1}∗ and message
$← {0, 1}λ. E
space {0, 1}∗. The key is generated via κ
is a deterministic encryption algorithm that takes inputs
key κ, nonce IV ∈ {0, 1}n, additional authenticated data
H ∈ {0, 1}∗ and plaintext m ∈ {0, 1}∗, and outputs
a ciphertext c. D is a deterministic decryption algorithm
that takes inputs key κ, nonce IV ∈ {0, 1}n, additional
authenticated data H ∈ {0, 1}∗, and ciphertext c, and
outputs either the plaintext m or ⊥.
is
that
D(κ, IV, H, E(κ, IV, H, m)) = m for all κ ∈ {0, 1}λ, IV ∈
{0, 1}n, H, m ∈ {0, 1}∗.
MESSAGE PRIVACY. To deﬁne message privacy let A be an
(A). It ﬁrst
adversary and consider the experiment Expind-cpa
AEAD
$← {0, 1}λ and ﬂips a bit b
$← {0, 1}.
generates the key κ
A has access to the encryption oracle E(κ, ·, ·, LR(·, ·, b)),
where LR(·, ·, b) on inputs m0, m1 ∈ {0, 1}∗ with |m0| =
|m1| returns mb. At the end A outputs a bit b(cid:3), and we deﬁne
correctness,
required
For
it
AEAD
(A) = 2 Pr [ b(cid:3) = b ] − 1.
A’s advantage to be Advind-cpa
AEAD
AUTHENTICITY. To deﬁne message integrity and authen-
ticity let A be an adversary and consider the experiment
$← {0, 1}λ. A
(A). It ﬁrst generates the key κ
Expauth
has access to oracle E(κ, ·, ·, ·). Expauth
(A) outputs 1
iff A outputs (IV, H, c) such that D(κ, IV, H, c) (cid:5)= ⊥
and A did not query E(κ, IV, H, m) for some m that
(A) =
resulted in a response c. We deﬁne Advauth
Pr
Expauth
AEAD
AEAD
(cid:2)
(A) = 1
(cid:3)
.
AEAD
We say that A is nonce-respecting, if it never repeats
IV in its oracle queries. We say that an AEAD scheme
is indistinguishable under chosen plaintext attack (ind-cpa-
(A) is negligible in λ for any efﬁ-
secure) if Advind-cpa
AEAD
cient, nonce-respecting adversary A. We say that an AEAD
(A) is negligible in λ for
scheme is auth-secure if Advauth
any efﬁcient, nonce-respecting adversary A. We say that any
AEAD is secure if it is ind-cpa- and auth-secure.
AEAD
Strong Computational Difﬁe-Hellman (SCDH) As-
sumption. We deﬁne the SCDH assumption [25], on which
security of QUIC will rely. This assumption was commonly
used for analyses of other protocols, including TLS [9].
SCDH
Consider the experiment Exp
(A) associated with
an adversary A and security parameter λ. A is given
(g, q, ga, gb), where q is prime of size λ, g is a generator
of a cyclic group of order q, and a, b are picked uniformly
at random from Zq. A is also given access to veriﬁcation
oracle V(g, ga, ·, ·), which returns 1 iff queried on gx, gax
(A) returns 1 iff A outputs gab.
for some x ∈ Zq. Exp
(A) = 1 ]. We say
We deﬁne Adv
(A) is negligible
that the SCDH problem is hard if Adv
in λ, for all efﬁcient adversaries A.
(A) = Pr [ Exp
SCDH
SCDH
SCDH
SCDH
IV. QUICK CONNECTIONS PROTOCOL DEFINITION
In this section we formally deﬁne a Quick Connections
(QC) protocol, which is a communication protocol between
a client and a server (the latter holds a public key and the
corresponding secret key). The parties ﬁrst agree on an initial
session key, which can be used to exchange data until the
ﬁnal key is set. After the ﬁnal key is set, it is used for further
data exchange. The QC deﬁnition ﬁts QUIC and is also
applicable to other protocols, such as TLS 1.3. This formal
deﬁnition is necessary for the provable-security analysis.
The protocol is associated with the security parameter λ,
a server key generation protocol Kg that on input λ returns
public and secret keys, an authenticated encryption with
associated data scheme AEAD = (E, D) with key space
{0, 1}λ, header space {0, 1}∗, message space {0, 1}∗, an IV-
extraction function get iv that takes a key and a header and
outputs an IV ∈ {0, 1}n for each message to be encrypted or
decrypted via the associated AEAD, and a scfg gen function
that the server can use to update part of its global state
scfg. The server can maintain global state other than its
scfg. All global state is initially set to ε. We associate
217217
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
a protocol’s execution with the universal notion of time,
which is divided into discrete periods τ1, τ2, . . . . The keys
are generated via (pk, sk) $← Kg(λ). The input of each party
(representing what parties know at the beginning) consists
of the public key of the server pk and the list of messages
M send = M1, . . . , Mm for some m ∈ N and where each
Mi ∈ {0, 1}∗, that a party needs to send securely (M send
can also be ε). The server has an additional input: the secret
key. All parties can keep global state.
In our model, the client and server are given vectors of
messages as input. While in practice the messages that the
parties exchange may depend on each other, for simplicity
we chose not to complicate the protocol syntax. This deci-
sion has no implications on our overall security analysis.
Data is exchanged between the parties via packets that
must consist of source and destination IP addresses and
port numbers followed by the payload associated with the
protocol.2 Each party gets a 32-bit IP address associated
with 216 − 1 port numbers as part of its input. We say that
all received and sent packets by a client party belong to that
client party’s connection with a particular server party if the
source IP address and port number (as well as any other
protocol-speciﬁc source information included in packets) of
all packets received by that client party correspond to that
server and are the same as the destination IP address and port
number (as well as any other protocol-speciﬁc destination
information included in packets) of all packets sent by that
client party. We deﬁne a server party’s connection with a
particular client analogously.
Note that different protocols may establish connections
based on parameters other than just IP and port numbers
(e.g., cid in QUIC as will be described in Section V),
which is why our deﬁnition allows for other protocol-speciﬁc
parameters contained in packets to be included. The notion
of a connection is relevant to the notion of one party setting
a key with another party which we will establish below and
use in our security analysis.
The ﬁrst packet of data is sent from the client to the server,
and we refer to this packet as the connection request.
The interactive protocol consists of four phases. Each
message exchanged by the parties must belong to some
unique stage, but the second and third stages may overlap:
Stage 1: Initial Key Agreement. At the end of this stage
each party sets the initial key variable ik = (ikc, iks, iaux),
where iaux ∈ {0, 1}∗ (initially set to ε) is any additional
information used for encryption and decryption.
Stage 2: Initial Data Exchange. In this stage, messages
from the input data list can be transmitted using the asso-
ciated AEAD scheme and the key ik. The server uses ikc
to encrypt and iks to decrypt, whereas the client uses iks
to encrypt and ikc to decrypt. At the end of this stage, each
2We ignore time to live (TTL), header checksums, and other header
information not directly relevant to our analysis.
party outputs the list of messages M iget = M1, . . . , Mm(cid:2)
for some m(cid:3) ∈ N and where each Mi ∈ {0, 1}∗, (M iget can
also be ε), representing the messages the party received in
the initial data exchange phase.
Stage 3: Key Agreement. At
the end of this stage,
each party sets the session key variable k = (kc, ks, aux),
where aux ∈ {0, 1}∗ (initially set to ε) is any additional
information used for encryption and decryption.
Stage 4: Data Exchange.
In this stage, messages from
the input data list can be sent using the associated AEAD
scheme and the key k. The server uses kc to encrypt and ks
to decrypt, whereas the client uses ks to encrypt and kc to
decrypt. At the end of this stage, each party outputs the list
of messages M get = M1, . . . , Mm(cid:2)(cid:2) for some m(cid:3)(cid:3) ∈ N and
where each Mi ∈ {0, 1}∗, (M get can also be ε), representing
the messages the party received in the ﬁnal stage.
We say that a party rejects a packet if it outputs ⊥, and
accepts it otherwise.
When a client (or server) party sets ik in Stage 1 corre-
sponding to a particular QC protocol execution instance, we
say that client (or server) party sets that ik with a particular
server (or client) party if every sent and received packet by
that client (or server) party in Stage 1 of that QC protocol
execution instance belongs to that client (or server) party’s
connection with that server (or client) party. We can deﬁne
an analogous notion for setting k with respect to Stage 3.
We will refer to parties that set ik’s in Stage 1 with each
other as each other’s peers.
The correctness of the protocol requires that the input data
of one party’s M send be equal to outputs of the other party’s
M iget, M get. In other words, the protocol is correct if it
allows the parties to exchange the data that they intended to
exchange with their corresponding communication partners
in the protocol, while preserving the order of the messages.
V. THE QUIC PROTOCOL
In this section we present the QUIC protocol. Our de-
scription follows the deﬁnition for a QC protocol primitive.
In QUIC, the parties associate a connection ID cid with
the source and destination IP addresses and port numbers of
every packet corresponding to that connection. Every incom-
ing packet is checked to see if the source and destination IPs
and port numbers correspond to those previously observed
for that connection, and that connection is closed if they do
not match. For simplicity of presentation, we omit this check
in our description below.
Let AEAD = (E, D) be an authenticated encryption
with associated data scheme, let SS = (Kgs, Sign, Ver)
be a digital signature scheme, and let λ be a security
parameter. The signature algorithms supported by QUIC
are ECDSA-SHA256 and RSA-PSS-SHA256. AES Galois-
Counter mode (GCM) scheme [26] is used as AEAD.
$← Kg(λ),
QUIC’s key generation protocol runs (pk, sk)
218218
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
$← {0, 1}128
kstk
and (sk, kstk) as the server’s secret key.3
, and returns pk as the server’s public key
We assume that the server’s scfg is refreshed every time
period using the scfg gen function described below.4
scfg gen(sk, τt, λ):
$← {generators of Zq}
$← {primes of size λ}, g
$← Zq−1, ys ← gxs , pubs
q
xs
expy ← τt+1, scid ← H(pubs, expy)
str ← “QUIC server conﬁg signature”
prof ← Sign(sk, (str, 0x00, scid, pubs, expy))
scfgt
scfg ← (scfgt
← (scid, pubs, expy, prof)
pub, secs)
pub
← (g, q, ys), secs ← xs
H is the SHA-256 hash function. Note that the generation
of scfg and the signing of its public parameters are done
independently of clients’ connection requests. Although in
QUIC there may be several distinct conﬁguration parameters
scfg that are valid at any given time, we omit this detail in
our analysis, and we do not consider the problem of them
expiring during the initial or session key agreement stages.
QUIC supports two connection establishment schemes: 1-
RTT handles the case when the client tries to achieve a
connection with a server for the ﬁrst time in a particular
time period. 0-RTT considers the case when the client is
trying to connect to a server that it has already established
at least one connection with in that time period.
A. 1-RTT Connection Establishment
We ﬁrst describe the case when a client C is trying to
achieve a connection with a server S for the very ﬁrst time
at the beginning of time period τt. The protocol follows the
four stages of the QC model and is presented in Figure 1.
Both C and S know that the current time period is τt.
), while S’s
c
s , · · · , M w
). S generates
$← {0, 1}128
.
C’s input message is Mc = (M
1
input message is Ms = (M
s , M
keys (pk, sk) $← Kg(λ) and kstk
c , · · · , M u
1
c , M
2
2
s
Initial Key Agreement consists of three packets m1,
m2, m3. C initiates a connection by sending the initial
connection-request packet m1 which contains a randomly
generated connection id cid, used later by both parties
to identify this session. Speciﬁcally, C runs c i hello(pk)
which outputs a packet with sequence number 1.
c i hello(pk):
$← {0, 1}64
cid
return (IPc, IPs, portc, ports, cid, 1)