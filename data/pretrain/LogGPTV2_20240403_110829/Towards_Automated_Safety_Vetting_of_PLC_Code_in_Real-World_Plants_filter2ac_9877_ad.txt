depicted as compounded edges. Further, we retrieve all the
entry points (i.e., IF-Conditions) EP of PLC code. Meanwhile,
we also link neighbors of nested IF-Conditions to show their
control relations. Then, we iterate over every event (i.e., atomic
proposition) pin in EP and seek its root causes, which are
events or event combinations that can always lead to pin.
We ﬁrst aim to discover the root causes for pin within the
PLC code. To this end, we perform use-def chain analysis
to obtain the deﬁnition set DEF of pin and then look for
the entry point EP (again, IF-Conditions) of each deﬁnition
def in DEF. The events in EP thus have causal impact on
def and on pin. To ensure the positive causal dependency
between EP and pin, we also conduct constant analysis for
def. If def is a constant and its value can satisfy pin, we
can then determine that EP can cause pin to happen. Hence,
we call TECG.ADDCOMPOUNDEDGES() to link EP with pin
and handle the construction of compounded edges.
It is worth noting that since IF-Conditions in one scan cycle
can be affected by any code in the previous one (dataﬂow-
wise), our use-def chain and constant analyses will look for
deﬁnitions from everywhere in PLC code. Ideally, we can con-
sider an inﬁnite chain of scan cycles and compute backward
dataﬂow exhaustively in an iterative fashion. However, such
computation is excessively expensive. Besides, the generated
dependencies can be extremely complex (e.g., conditional
dependencies) and therefore may not be easily applied to event
sequence generation. Thus, in practice, we take a conservative
approach and only look back for one previous cycle. As a
result, our analysis may miss some dependencies in speciﬁc
conditions. Nevertheless, while missing a dependency may
lead to invalid permutations of events, it does not result in the
exclusion of valid event sequences. Moreover, our evaluation
shows that, although conservative, our analysis can already
help remove a large number of invalid sequences.
Besides searching for intra-PLC causalities, we also seek
possible root causes of pin across devices. Our cross-device
analysis starts from Ln.13. It is performed on an on-demand
basis and only begins when pin is mapped to an output of
a remote device. If pin indeed exists in the IOMapping,
we retrieve its mapped counterpart rout and add an edge
(rout, pin) into TECG. Then, we search for the entry point
REP for rout in the code of remote controller (e.g., robot,
CNC, PLC). The entry point REP represents the trigger of
rout. If any input rin in REP can be mapped to a PLC output
(cid:22)(cid:19)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
end if
if ISCONST(def ) ∧ ISSATISFIED(pin, def ) then
DEF ← USEDEFCHAIN(PLC, pin)
for ∀def ∈ DEF do
EP ← GETENTRYPOINT(PLC, def )
TECG.ADDCOMPOUNDEDGES(EP, pin)
TECG ← ∅
TRANSFROMPREDICATESTODNF(PLC)
EP ← GETANDLINKENTRYPOINTS(PLC)
for ∀pin ∈ EP do
Algorithm 1 Construction of Timed Event Causality Graph
1: procedure BUILDTECG(PLC, REMOTE, IOMapping)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
end for
26:
ADDEVENTCLASSANDDURATION(TECG, PLC,REMOTE)
27:
return TECG
28:
29: end procedure
end for
if IOMapping.EXISTS(pin) then
rout ← IOMapping.GET(pin)
TECG ← TECG ∪ (rout, pin)
REP ← GETENTRYPOINT(REMOTE, rout)
for ∀rin ∈ REP do
if IOMapping.EXISTS(rin) then
pout ← IOMapping.GET(rin)
TECG ← TECG ∪ (pout, rin)
EP ← GETENTRYPOINT(PLC, pout)
TECG.ADDCOMPOUNDEDGES(EP, pout)
end for
end if
end if
pout, the edge (pout, rin) will be added to TECG as well. We
then trace back from pout to ﬁnd its entry point EP in PLC
code, and add compounded edges from EP to pout.
The last step for graph construction is to annotate vertices
with event classes and durations. Event classes can be explic-
itly obtained from the variable declarations in PLC/CNC code
or robot speciﬁcations. The durations of all events by default
are set to be “Permanent” (P). Only if we can infer the concrete
time duration of an event, will we safely update its label. To
this end, for each input event (i.e., atomic proposition), we
ﬁrst discover the constant deﬁnitions that cause the proposition
to be true. Then, we discover all the negative redeﬁnitions
that lead the proposition to be false. Next, we perform intra-
procedural reachability analysis from the deﬁnitions to those
redeﬁnitions. If a reachable path is discovered, we further
examine every statement along the path to see if any time-
related instructions (i.e., wait) are present. If so, we extract
and accumulate their constant parameters as the duration of
this event. We do not handle variable parameters in this work.
The implementation is further explained in Appendix B.
V. DISCOVERY OF TEMPORAL CONTEXT
A. Data Collection
Collecting Data Instead of Events. Ideally, we hope to
directly collect event traces from ICS testbeds to identify their
temporal behavior. However, this requires instrumentation of
various distributed data sources, including sensors, robot I/O
modules, RFID, etc. and therefore is an extremely difﬁcult and
tedious task. On the contrary, the data trace of PLC variables is
easier to obtain due to standardized communication protocols.
Yet it only preserves the runtime states of these variables but
does not record the events that cause the states to transition.
To bridge this gap, we intend to infer the presence of events
based upon value changes in data traces and thus manage to
approximate the collection of discrete physical events with the
retrieval of continuous data traces.
Interesting Properties. We are interested in three properties
of PLC variables: name, value and timestamp. Variable name
serves as the unique identiﬁer of a variable; the instant value
of a variable reﬂects its current state and can be affected by
speciﬁc events; the timestamp is the system time when the
variable is being observed. Thus, we can deﬁne a data item d
in our observation as a triple: d = (var name, value, time).
Querying Realtime Data in Recurring Operations. We
collect both positive and negative data traces from running
testbeds. A positive instance begins with the arrival of empty
pallet and ends in the successful departure of a loaded pallet,
and thus contains all
the interesting stages such as robot
delivery and RFID update. A negative instance does not lead to
the successful stage due to multiple reasons, such as arriving
pallet loaded with part, robot not ready, CNC not ready, etc.
For every instance, we keep logging all the variable values over
time in order to retrieve runtime data traces. Formally, a data
trace DT is a list of data item d: DT = {d0, d1, ..., dn}. In
practice, we run Cell-1 logic 20 times and collect 10 positive
and 10 negative instances, each of which takes approximately
25 minutes. Thus, our dataset consists of a set of data traces
and we refer to it as: DT = {DT0, DT1, ..., DTm}, where
m = 19. We obtained 1.2 GB data in 10 hours from our
testbed that runs logic code containing 35 variables.
It
is noteworthy that, although limited, our dataset
in
practice can already help reveal the necessary invariants for
detecting real-world safety problems. One possible solution to
increase the amount and diversity of data traces is to follow
a state-of-the-art
technique (i.e., code mutation [33]) and
automatically produce a large quantity of positive and negative
data traces to cover a majority of normal and abnormal cases.
We leave the systematic trace construction as future work.
B. Mining Temporal Properties
i
i
, DT v1
, ..., DT vk
l and d(cid:2)
into multiple sublists {DT v0
Inferring Discrete Events from Data Traces. For each
in our dataset DT, we need to ﬁrst infer
data trace DTi
the existence of events. To this end, we ﬁrst divide every
i } where
DTi
items in an individual list share the same variable name. We
then iterate over each sublist. If we discover a difference
between values of two neighboring items d(cid:2)
l+1, we
record a new event e = (type, time), where the type is
denoted using the new state of this variable and the time is
the timestamp of d(cid:2)
l+1. For instance, if the value of variable
Deliver Part rises from 0 to 1 at time 33, then we identify
an event (Deliver Part, 33); if Part AtConveyor’s value
drops from 1 to 0 at time 60, then we ﬁnd an event (¬
Part AtConveyor, 60). Eventually, we merge discovered
events from all sublists and thus convert a data trace DTi into
an event trace ETi = {e0, e1, ..., ep}. We therefore obtain
a dataset of event traces ET = {ET0, ET1, ..., ET19}. The
formal algorithm is presented as Algorithm 3 in Appendix C.
(cid:22)(cid:19)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Mined Invariants
Event Pair
(cid:3)(Deliver Part → ♦Part AtConveyor)
(cid:3)(Update Part Process → ♦RFID IO Complete)
(cid:3)(Update Part Process → ♦Update Complete)
Invariant
[24.4s, 24.6s]
[15s, 20s]
[15s, 20s]
Temporal Invariants for Events. Once we have generated
event traces, we would like to uncover constant time intervals
between events of different types. Such constants can reﬂect
the operation time of speciﬁc machines. However, in reality,
due to the variation in program paths and indeterminism of
mechanical, physical or chemical processes, the durations of
real-world machine operations are never constant. On the other
hand, due to physical and logical limits, machine actions are
bounded by time constraints. Hence, our goal is to identify
such “soft” invariants of event
into
speciﬁc ranges. We formally deﬁne temporal invariants using
Timed Propositional Temporal Logic (TPTL) [26]:
temporalities that fall
Deﬁnition 2. Let a and b be two event types. Then a
temporal invariant is a property that relates a and b in both
of the two following ways:
(cid:3)tx.(a → ♦ty.(b∧ty−tx ≥ τlower)): In an event trace, if
an event instance of type a occurs at time tx, then another of
b eventually will happen in the same trace at a later time ty,
while the time difference between ty and tx is at least τlower.
(cid:3)tx.(a → ♦ty.(b∧ty−tx ≤ τupper)): In an event trace, if
an event instance of type a occurs at time tx, then another of
b eventually will happen in the same trace at a later time ty,
while the time difference between ty and tx is at most τupper.
As a result, a temporal invariant describes not only the order
of two event types but also the lower and upper bounds of
their time difference. To extract these invariants, we follow the
approach in prior work (Synoptic [29] and Perfume [60]) to
perform qualitative and quantitative data mining consecutively.
However, unlike previous techniques that attempt to mine all
possible correlations between any two events, our mining is
selective and is guided by the generated TECG. Speciﬁcally,
we do not need to learn certain temporal relationships for a pair
of event types if they contradict the dependencies in the graph.
For example, in our motivating case, since we know the tem-
poral logic (cid:3)(RFID IO Complete → ♦Update Complete)
holds, we do not further seek the possibility of whether
Update Complete is followed by RFID IO Complete.
For all the pairwise relationships of two event types, a and
b, that do not contradict those in TECG, we ﬁrst check if their
qualitative temporality (cid:3)(a → ♦b) holds. This is equivalent
to checking if:
F ollows[a][b] = Occurrence[a]
(1)
where F ollows[a][b] counts, in a trace, the number of type
a events followed by at least one of the type b events and
Occurrence[a] counts the number of event instances of a.
Once we have determined the “followed by” relationship
between two event types, we use the Perfume [60] algorithm
to perform quantitative mining and extract
the lower and
upper bounds of time differences. In the end, we discovered
3 invariants for the motivational case as listed in Table I.
Speed Reconﬁguration of Real-world Machines. The
mined bounds of “soft” invariants, τlower and τupper, reﬂect
the variation in program executions and production processes.
However, such bounds are still associated with pre-conﬁgured
speeds of physical machines, which often times do not reach
the speciﬁed hard limits. To further understand the possible
impact caused by speed reconﬁguration, we need to consider
absolute time bounds for these machine operations.
Let job be the number of machine operations and vconf be
the pre-conﬁgured speed, then τlower ≤ job/vconf ≤ τupper.
To derive the absolute lower bound for the time cost tjob, we
consider the rated motor speed vrated and thus have: (τlower×
vconf )/vrated ≤ job/vrated ≤ tjob.
Meantime, since the minimum machine speed theoretically
can be 0, the absolute maximum time to complete a task is
inﬁnity. However, in reality, for a high throughput, machines
are expected to ﬁnish jobs as quickly as possible. Thus, ideally,
machines always operate at their highest speeds. Nevertheless,
safety standards have been made to regulate the maximum
machine speed. For instance, the American National Standards
Institute (ANSI) has published ANSI RIA R15.06 [22] for
Robot and Robot System Safety which recommends that robot
speed should not exceed 10 in/sec (250 mm/sec) for safety-
critical operations. Such recommendations can be considered
as the lowest machine speeds that can guarantee efﬁcient and
safe production. With this required safety speed, vsaf e, we can
further obtain the practical upper bound of tjob:
(τlower × vconf )/vrated ≤ tjob ≤ (τupper × vconf )/vsaf e (2)
Admittedly, to incorporate hardware limits, we need to un-
derstand the semantics of mined invariants in order to associate
this additional
information to correct edges. We currently
address this problem using human knowledge and leave the
automatic inference of event semantics as future work. With
domain knowledge, we know the time for our robot to pass a
part equals the time difference between Delivery Part and
Part AtConveyor. Plus, our robot is running at 400mm/sec
on average and its rated speed is 3300mm/sec. Thus, we can
obtain an enhanced invariant for this event pair: [3s, 39.4s].
Enhancing TECG with Temporal Invariants. Extracted
temporal
invariants are then provided to the TECG. Note
that they not only offer quantitative information to enhance