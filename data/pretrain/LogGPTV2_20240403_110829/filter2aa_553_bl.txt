如上所示，执行了从case 'd':到switch语句末尾的所有语句。
顺带一提，break语句可用于循环和switch语句中，但是continue只能用
于循环中。尽管如此，如果switch语句在一个循环中，continue便可作为
switch语句的一部分。这种情况下，就像在其他循环中一样，continue让程序
跳出循环的剩余部分，包括switch语句的其他部分。
如果读者熟悉Pascal，会发现switch语句和Pascal的case语句类似。它们
最大的区别在于，如果只希望处理某个带标签的语句，就必须在switch语句
中使用break语句。另外，C语言的case一般都指定一个值，不能使用一个范
围。
switch在圆括号中的测试表达式的值应该是一个整数值（包括char类
型）。case标签必须是整数类型（包括char类型）的常量或整型常量表达式
（即，表达式中只包含整型常量）。不能用变量作为case标签。switch的构
470
造如下：
switch ( 整型表达式)
{
case 常量1:
语句   
int main(void)
{
char ch;
int a_ct, e_ct, i_ct, o_ct, u_ct;
a_ct = e_ct = i_ct = o_ct = u_ct = 0;
printf("Enter some text; enter # to quit.\n");
while ((ch = getchar()) != '#')
{
switch (ch)
{
472
case 'a':
case 'A': a_ct++;
break;
case 'e':
case 'E': e_ct++;
break;
case 'i':
case 'I': i_ct++;
break;
case 'o':
case 'O': o_ct++;
break;
case 'u':
case 'U': u_ct++;
break;
default:  break;
}         // switch结束
}            // while循环结束
printf("number of vowels:  A  E  I  O  U\n");
473
printf("        %4d %4d %4d %4d %4d\n",
a_ct, e_ct, i_ct, o_ct, u_ct);
return 0;
}
假设如果ch是字母i，switch语句会定位到标签为case 'i' :的位置。由于
该标签没有关联break语句，所以程序流直接执行下一条语句，即i_ct++;。
如果 ch是字母I，程序流会直接定位到case 'I' :。本质上，两个标签都指的是
相同的语句。
严格地说，case 'U'的 break 语句并不需要。因为即使删除这条 break 语
句，程序流会接着执行switch中的下一条语句，即default : break;。所以，可
以把case 
'U'的break语句去掉以缩短代码。但是从另一方面看，保留这条
break语句可以防止以后在添加新的case（例如，把y作为元音）时遗漏break
语句。
下面是该程序的运行示例：
Enter some text; enter # to quit.
I see under the overseer.#
number of vowels:   A  E  I  O  U
0  7  1  1  1
在该例中，如果使用ctype.h系列的toupper()函数（参见表7.2）可以避免
使用多重标签，在进行测试之前就把字母转换成大写字母：
while ((ch = getchar()) != '#')
{
474
ch = toupper(ch);
switch (ch)
{
case 'A': a_ct++;
break;
case 'E': e_ct++;
break;
case 'I': i_ct++;
break;
case 'O': o_ct++;
break;
case 'U': u_ct++;
break;
default: break;
} // switch结束
} // while循环结束
或者，也可以先不转换ch，把toupper(ch)放进switch的测试条件中：
switch(toupper(ch))。
小结：带多重选择的switch语句
475
关键字：switch
一般注解：
程序根据expression的值跳转至相应的case标签处。然后，执行剩下的所
有语句，除非执行到break语句进行重定向。expression和case标签都必须是
整数值（包括char类型），标签必须是常量或完全由常量组成的表达式。如
果没有case标签与expression的值匹配，控制则转至标有default的语句（如果
有的话）；否则，将转至执行紧跟在switch语句后面的语句。
形式：
switch ( expression )
{
case label1 : statement1//使用break跳出switch
case label2 : statement2
default   : statement3
}
可以有多个标签语句，default语句可选。
示例：
switch (choice)
{
case 1 :
case 2 : printf("Darn tootin'!\n"); break;
476
case 3 : printf("Quite right!\n");
case 4 : printf("Good show!\n"); break;
default: printf("Have a nice day.\n");
}
如果choice的值是1或2，打印第1条消息；如果choice的值是3，打印第2
条和第3条消息（程序继续执行后续的语句，因为case 
3后面没有break语
句）；如果choice的值是4，则打印第3条消息；如果choice的值是其他值只
打印最后一条消息。
7.7.4 switch和if else
何时使用switch？何时使用if 
else？你经常会别无选择。如果是根据浮
点类型的变量或表达式来选择，就无法使用 switch。如果根据变量在某范围
内决定程序流的去向，使用 switch 就很麻烦，这种情况用if就很方便：
if (integer  2)
使用switch要涵盖以上范围，需要为每个整数（3～999）设置case标
签。但是，如果使用switch，程序通常运行快一些，生成的代码少一些。
477
7.8 goto语句
早期版本的BASIC和FORTRAN所依赖的goto语句，在C中仍然可用。但
是C和其他两种语言不同，没有goto语句C程序也能运行良好。Kernighan和
Ritchie提到goto语句“易被滥用”，并建议“谨慎使用，或者根本不用”。首
先，介绍一下如何使用goto语句；然后，讲解为什么通常不需要它。
goto语句有两部分：goto和标签名。标签的命名遵循变量命名规则，如
下所示：
goto part2;
要让这条语句正常工作，函数还必须包含另一条标为part2的语句，该
语句以标签名后紧跟一个冒号开始：
part2: printf("Refined analysis:\n");
7.8.1 避免使用goto
原则上，根本不用在C程序中使用goto语句。但是，如果你曾经学过
FORTRAN或BASIC（goto对这两种语言而言都必不可少），可能还会依赖
用goto来编程。为了帮助你克服这个习惯，我们先概述一些使用goto的常见
情况，然后再介绍C的解决方案。
处理包含多条语句的if语句：
if (size > 12)
goto a;
goto b;
a: cost = cost * 1.05;
flag = 2;
478
b: bill = cost * flag;
对于以前的BASIC和FORTRAN，只有直接跟在if条件后面的一条语句才
属于if，不能使用块或复合语句。我们把以上模式转换成等价的C代码，标
准C用复合语句或块来处理这种情况：
if (size > 12)
{
cost = cost * 1.05;
flag = 2;
}
bill = cost * flag;
二选一：
if (ibex > 14)
goto a;
sheds = 2;
goto b;
a: sheds= 3;
b: help = 2 * sheds;
C通过if else表达二选一更清楚：
if (ibex > 14)
sheds = 3;
479
else
sheds = 2;
help = 2 * sheds;
实际上，新版的BASIC和FORTRAN已经把else纳入新的语法中。
创建不确定循环：
readin: scanf("%d", &score);
if (score  0)
{
for (i = 1, i <= 100; i++)
{
for (j = 1; j <= 50; j++)
{
其他语句
if (问题)
goto help;
其他语句
}
其他语句
}
481
其他语句
}
其他语句
help: 语句
从其他例子中也能看出，程序中使用其他形式比使用goto的条理更清
晰。当多种情况混在一起时，这种差异更加明显。哪些goto语句可以帮助if
语句？哪些可以模仿if else？哪些控制循环？哪些是因为程序无路可走才不
得已放在那里？过度地使用 goto 语句，会让程序错综复杂。如果不熟悉goto
语句，就不要使用它。如果已经习惯使用goto语句，试着改掉这个毛病。讽
刺地是，虽然C根本不需要goto，但是它的goto比其他语言的goto好用，因为
C允许在标签中使用描述性的单词而不是数字。
小结：程序跳转