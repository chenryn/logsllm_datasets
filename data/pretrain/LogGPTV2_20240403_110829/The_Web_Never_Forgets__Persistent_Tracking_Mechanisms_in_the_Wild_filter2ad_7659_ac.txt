http://valve.github.io
http://www.plentyoﬃsh.com
http://api.gonorthleads.com
(Various)
5559
(5542 unique1)
-
Table 1: Canvas ﬁngerprinting domains found on Top Alexa 100K sites.
*: Some URLs are truncated or omitted for brevity. See Appendix for the complete list of URLs.
1: Some sites include canvas ﬁngerprinting scripts from more than one domain.
ﬁngerprinting scripts than the ones within the 1,000-10,000
range.
Note that the URL http://valve.github.io, printed by
many scripts onto the canvas, belongs to the developer of
an open source ﬁngerprinting library7. Furthermore, all
scripts except one use the same colors for the text and back-
ground shape. This similarity is possibly due to the use of
the publicly available open source ﬁngerprinting library ﬁn-
gerprintjs [51]. Figure 4 shows ﬁve diﬀerent canvas images
used by diﬀerent canvas ﬁngerprinting scripts. The images
are generated by intercepting the canvas pixel data extracted
by the scripts listed in Table 1.
Figure 4: Diﬀerent images printed to canvas by ﬁngerprint-
ing scripts. Note that the phrase “Cwm fjordbank glyphs
vext quiz” in the top image is a perfect pangram, that is, it
contains all the letters of the English alphabet only once to
maximize diversity of the outcomes with the shortest possi-
ble string.
Manually analyzing AddThis’s script, we found that it
goes beyond the ideas previously discussed by researchers
and adds new tests to extract more entropy from the can-
vas image. Speciﬁcally, we found that in addition to the
techniques outlined in Mowery and Shacham’s canvas ﬁn-
gerprinting paper [32] AddThis scripts perform the following
tests:
• Drawing the text twice with diﬀerent colors and the
default fallback font by using a fake font name, starting
with “no-real-font-”.
• Using the perfect pangram8 “Cwm fjordbank glyphs
vext quiz” as the text string
• Checking support for drawing Unicode by printing the
character U+1F603 a smiling face with an open mouth.
• Checking for canvas globalCompositeOperation sup-
port.
• Drawing two rectangles and checking if a speciﬁc point
is in the path by the isPointInPath method.
By requesting a non-existent font, the ﬁrst test tries to em-
ploy the browser’s default fallback font. This may be used
to distinguish between diﬀerent browsers and operating sys-
tems. Using a perfect pangram, which includes a single in-
stance of each letter of the English alphabet, the script enu-
merates all the possible letter forms using the shortest string.
The last three tests may be trying to uncover the browser’s
support for the canvas features that are not equally sup-
ported. For instance, we found that the Opera browser can-
not draw the requested Unicode character, U+1F603.
Another interesting canvas ﬁngerprinting sample was the
script served from the admicro.vcmedia.vn domain. By in-
specting the source code, we found that the script checks
the existence of 1126 fonts using JavaScript font probing.
7See,
v0.5.3/fingerprint.js#L250
https://github.com/Valve/fingerprintjs/blob/
8http://en.wikipedia.org/wiki/List_of_pangrams#
Perfect_pangrams_in_English_.2826_letters.29
679
CharbaseA visual unicode databaseSearchU+1F603: SMILING FACE WITH OPEN MOUTH← U+1F602 FACE WITH TEARS OF JOY U+1F604 SMILING FACE WITH OPEN MOUTH ANDSMILING EYES →0 Tweet0Your BrowserὠIndexU+1F603 (128515)ClassOther Symbol (So)BlockEmoticonsJava Escape"\ud83d\ude03"Javascript Escape"\ud83d\ude03"Python Escapeu'\U0001f603'HTML Escapes&#128515; &#x1f603;URL Encodedq=%F0%9F%98%83UTF8f0 9f 98 83UTF16d83d de03Contact UsOverall, it is interesting to see that commercial tracking
companies are advancing the ﬁngerprinting technology be-
yond the privacy/security literature. By collecting ﬁnger-
prints from millions of users and correlating this with cookie
based identiﬁcation, the popular third party trackers such
as AddThis are in the best position to both measure how
identifying browser features are and develop methods for
monitoring and matching changing ﬁngerprints. Note that
according to a recent ComScore report, AddThis “solutions”
reaches 97.2% of the total Internet population in the United
States and get 103 billion monthly page views.9
4. EVERCOOKIES
Evercookies are designed to overcome the “shortcomings”
of the traditional tracking mechanisms. By utilizing multiple
storage vectors that are less transparent to users and may
be more diﬃcult to clear, evercookies provide an extremely
resilient tracking mechanism, and have been found to be
used by many popular sites to circumvent deliberate user
actions [43, 7, 14].
In this section, we ﬁrst provide a set
of criteria that we used to automatically detect identiﬁer
strings, present detailed results of an automated analysis of
respawning by Flash evercookies, and show the existence of
respawning by both HTTP cookies and IndexedDB.
4.1 Detecting User IDs
Given that not all instances of the various potential stor-
age vectors are used to track users, detecting evercookies
hinges on determining whether a given string can serve as a
user ID. In order to detect persistent IDs in a given storage
vector, we leveraged data from two simultaneous crawls on
separate machines and applied the following set rule set for
determining which elements are identifying. We present the
rules with respect to HTTP cookies but note that they are
applicable to other storage locations of a similar format.
• Eliminate cookies that expire within a month of being
placed. These are too transient to track a user over
time.
• Parse cookie value strings using common delimiters
: and &). This extracts potentially identifying
(e.g.
strings from non-essential data.
• Eliminate parsed ﬁelds which don’t remain constant
throughout an individual crawl. Identiﬁers are likely
to be unchanging.
• Compare instances of matching parsed cookie ﬁelds
(for cookies with the same domain and name) between
two unrelated crawls on diﬀerent machines.
– Eliminate ﬁelds which are not the same length.
– Eliminate ﬁelds which are more than 33% sim-
ilar according to the Ratcliﬀ-Obershelp algo-
rithm [12]. These are unlikely to contain suﬃcient
entropy.
The presented method provides a strict and conservative
detection of identiﬁers that we believe (through manual in-
spection) to have a very low false positive rate. We antici-
pate several sources of false negatives, for example ID strings
9http://www.businesswire.com/news/home/
20131113005901/en/comScore-Ranks-AddThis-1-
Distributed-Content-United
that are obfuscated or embedded in longer strings using non-
standard delimiters or ID strings that happen to have a high
similarity. Similarly, an adversarial tracker could continually
change an identiﬁer or cookie sync short-lived identiﬁers, but
keep a mapping on the back end to enable long-term track-
ing. Therefore, the results of this analysis provide a lower
bound on the presence of evercookie storage vectors and on
the level of cookie syncing.
4.2 Flash cookies respawning HTTP cookies
Although there are many “exotic” storage vectors that can
be used to store tracking identiﬁers, Flash cookies have a
clear advantage of being shared between diﬀerent browsers
that make use of the Adobe Flash plugin10. We developed a
procedure to automate the detection of respawning by Flash
cookies employing the method discussed in Section 4.1 to
detect IDs and using GNU/Linux’s strace [22] debugging
tool to log access to Flash cookies.
Compared to earlier respawning studies [43, 7, 30], the
method employed in this paper is diﬀerent in terms of au-
tomation and scale. In prior studies, most of the work, in-
cluding the matching of HTTP and Flash cookie identiﬁers
was carried out manually. By automating the analysis and
parallelizing the crawls, we were able to analyze 10,000 web-
sites, which is substantially more than the previous studies
(100 sites, 700 sites). Note that, similar to [30], we only
visited the home pages, whereas [43, 7] visited 10 internal
links on each website. Another methodological diﬀerence is
that we maintained the Flash cookies when visiting diﬀerent
websites, whereas [43, 7] used a virtual machine to prevent
contamination. Last, [30] also used the moving and contrast-
ing Flash cookies from diﬀerent computers to determine ID
and non-ID strings, which is one of the main ideas of the
analysis described below.
For this analysis we used data from four diﬀerent crawls.
First, we sequentially crawled the Alexa top 10,000 sites and
saved the accumulated HTTP and Flash cookies (Crawl1).
We then made three 10,000 site crawls, two of which were
run with the Flash cookies loaded from the sequential crawl
(Crawl2,3). The third crawler ran on a diﬀerent machine,
without any data loaded from the previous crawl (Crawl4).
Note that, except for the sequential crawl (Crawl1), we ran
multiple browsers in parallel to extend the reach of the study
at the cost of not keeping a proﬁle state (cookies, localStor-
age) between visits. During each visit, we ran an strace
instance that logs all open, read and write system calls of
Firefox and all of its child processes. Trace logs were parsed
to get a list of Flash cookies accessed during the visit, which
are then parsed and inserted into a crawl database.
For the analysis, we ﬁrst split the Flash cookie contents
from the three crawls (Crawl2,3,4) by using a common set of
separators (e.g. ”=:&;). We then took the common strings
between crawls made with the same LSOs (Crawl2,3) and
subtracted the strings found in LSO contents from the unre-
lated crawl (Crawl4). We then checked the cookie contents
from the original proﬁle (Crawl1) and cookies collected dur-
ing the visits made with the same LSO set (Crawl2,3). Fi-
nally, we subtracted strings that are found in an unrelated
visit’s cookies (Crawl4) to minimize the false positives. Note
that, in order to further eliminate false positives, one can use
cookies and LSOs from other unrelated crawls since an ID-
10iOS based devices and Chrome/Chromium bundled with
the Pepper API are exceptions
680
string cannot be present in unrelated crawls. We used the
100K crawl described in the canvas ﬁngerprinting experi-
ments for this purpose.
For clarity, we express a simpliﬁed form of the operation
in set notation:
M axRank(cid:91)
((((F2i ∩ F3i ) \ F4) ∩ C2i ∩ C3i ) \ C4),
i=1
where Fni denotes Flash cookies from Crawln for the site
with the Alexa rank i, Cni denotes Cookies from Crawln
for the site with the Alexa rank i and F4, and C4 denotes all
Flash cookies and HTTP cookies collected during Crawl4.
We applied the method described above to four crawls
run in May 2014 and found that 33 diﬀerent Flash cook-
ies from 30 diﬀerent domains respawned a total of 355
cookies on 107 ﬁrst party domains during the two crawls
(Crawl2,3). Table 3 shows that on six of the top 100 sites,
Flash cookies are used to respawn HTTP cookies. Nine
of top ten sites on which we observed respawning belong
to Chinese companies (one from Hong Kong) whereas the
other site belongs to the top Russian search engine Yan-
dex. The Flash cookie that respawned the most cook-
ies (69 cookies on 24 websites) was bbcookie.sol from the
bbcdn-bbnaut.ibillboard.com domain which belongs to
a company that is found to use Flash based ﬁngerprint-
ing [6]. Note that this Flash cookie respawned almost three
HTTP cookies per site which belong to diﬀerent third party
domains (bbelements.com, .ibillboard.com and the ﬁrst-
party domain). The domain with the second highest number
of respawns was kiks.yandex.ru which restored 11 cookies
on 11 sites in each crawl (Crawl2,3).
Global
rank
Site
CC
Respawning
(Flash) domain
16
17
27
41
52
64
69
178
196
197
sina.com.cn CN simg.sinajs.cn
RU kiks.yandex.ru
yandex.ru
CN simg.sinajs.cn
weibo.com
CN ar.hao123.com
hao123.com
CN tv.sohu.com
sohu.com
HK y3.ifengimg.com
ifeng.com
CN irs01.net
youku.com
CN irs01.net
56.com
CN irs01.net
letv.com
CN irs01.net
tudou.com
1st/3rd
Party
3rd*
1st
3rd*
1st
1st
3rd*
3rd
3rd
3rd
3rd
Table 3: Top-ranked websites found to include respawning
based on Flash cookies. CC: ISO 3166-1 code of the coun-
try where the website is based. 3rd*: The domains that
are diﬀerent from the ﬁrst-party but registered for the same
company in the WHOIS database.
IndexedDB as Evercookie While running crawls for
canvas ﬁngerprinting experiments, we looked for sites that
store data in the IndexedDB storage vector. Speciﬁcally,
we checked the storage/persistent directory of the Fire-
fox proﬁle. A very small number of sites, only 20 out of
100K, were found to use the IndexedDB storage vector.
Analyzing the IndexedDB ﬁle from the respawning crawl
(Crawl2) described above, we found that a script from the
weibo.com domain stored an item in the IndexedDB that
681
exactly matched the content of the Flash cookie named
simg.sinajs.cn/stonecc_suppercookie.sol. This Flash
cookie was used to respawn HTTP cookies on Chinese mi-
croblogging site weibo.com and its associated web portal
sina.com.cn. To the best of our knowledge, this is the ﬁrst
report of IndexedDB as an evercookie vector. A more thor-
ough study of respawning based on IndexedDB is left for
future study.
4.3 HTTP cookies respawning Flash cookies
We ran a sequential crawl of the Top 3,000 Alexa sites
and saved the accumulated HTTP and Flash cookies. We
extracted IDs from this crawl’s HTTP cookies using the
method described in Section 4.1. We then made an addi-
tional sequential crawl of the Top 3,000 Alexa sites on a
separate machine loading only the HTTP cookies from the
initial crawl.
Our method of detecting HTTP respawning from Flash
cookies is as follows: (i) take the intersection of the initial
crawl’s ﬂash objects with the ﬁnal crawl’s ﬂash objects (ii)
subtract common strings from the intersection using an un-
related crawl’s ﬂash objects and (iii) search the resulting
strings for the ﬁrst crawl’s extracted HTTP cookie IDs as
described in Section 4.1. This enables us to ensure that the
IDs are indeed found in the Flash objects of both crawls,
aren’t common to unrelated crawls, and exist as IDs on the
original machine. Using this method, we detected 11 diﬀer-
ent unique IDs common between the three storage locations.
These 11 IDs correspond to 14 ﬁrst-party domains, a
summary of which is provided by Table 8 in the Ap-
pendix. We primarily observe respawning from JavaScript
originating from two third-parties: www.iovation.com, a
fraud detection company that is specialized in device ﬁn-
gerprinting, and www.postaffiliatepro.com, creators of af-
ﬁliate tracking software (that runs in the ﬁrst-party con-
text). We also observe three instances of what appears to
be in-house respawning scripts from three brands: Twitch
Interactive (twitch.tv and justin.tv), casino.com, and