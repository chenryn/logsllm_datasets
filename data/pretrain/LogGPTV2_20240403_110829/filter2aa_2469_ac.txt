的泄露。
API详情
业务详情
10
影响
威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：一攻击者通过向/api/v1/images发送POST请求来上
传大尺寸的图像。在上传完成后，API将创建多个不同大小
的缩略图。由于上传的图像过大，可用内存在创建缩略图
时被耗尽，API将无法响应。
场景#2：当应用包含一个每页可以显示200个用户的列表界
面时，我们可以使用/api/users?page=1&size=100查询从服务
器中检索用户列表。攻击者可以将size参数篡改至 200 000，
从而导致数据库出现性能问题。同时，API将无法响应该客
户端的其他请求，或其他客户端的请求，形成DoS。
该场景也可能造成整数溢出或缓存溢出错误。
API脆弱吗？
API请求会占用网络、CPU、内存和存储等资源，资源的需
求取决于用户输入和端点的业务逻辑。同时，考虑到不同
API客户端请求的竞争资源情况。当出现下述限制缺失或不
恰当配置时（例如，过高或过低），API将存在脆弱点：
• 执行超时；
• 最大化分配内存；
• 文件描述符数；
• 进程数；
• 请求有效负载大小（例如，上传）；
• 单个客户端/资源的请求数；
• 单次请求响应时，每页返回的记录数。
参考资料
OWASP资料
• Blocking Brute Force Attacks
• Docker Cheat Sheet - Limit resources (memory, CPU, file 
descriptors, processes, restarts)
• REST Assessment Cheat Sheet
外部资料
• CWE-307: Improper Restriction of Excessive Authentication 
Attempts
• CWE-770: Allocation of Resources Without Limits or Throttling
• “Rate Limiting (Throttling)” - Security Strategies for 
Microservices-based Application Systems，NIST
如何防止？
• Docker可以轻松地限制内存、CPU、重启次数、文件描述
符和进程；
• 对用户调用API的频率执行明确的时间窗口限制；
• 在突破限制时通知客户，并提供限制数量及限制重置的时
间；
• 在服务器端为字符串查询和主体参数请求提供适当的验证，
尤其是那些在响应中控制返回记录数量的验证；
• 定义并强制验证所有传入参数和有效负荷的最大数据量，
例如字符串的最大长度和数组中元素的最大数量。
API4:2019 资源缺乏和速率限制
可利用性 ：2
普遍性：3
可检测性 ：3
技术：2
利用简单的API请求，无需身份认证，
即可使用单一的本地计算机或云计算
资源来执行多个并发请求。
通常，API没有进行速率限制，或速率限制没
有合理配置。
漏洞可能导致DoS，造成API无响应
或不可用。
API详情
业务详情
11
影响
威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：在仅允许受邀用户加入的应用程序注册过程中，
移动应用程序将触发对GET /api/invites/ {invite_guid}的API调
用。响应包含一个JSON，其中包含有关邀请的详细信息，
包括用户的角色和用户的电子邮件。
攻击者复制了请求，并操纵HTTP方法和端点进行POST 
/api/invites/new。管理员只能使用管理控制台访问该端点，
该控制台未实现功能级别的授权检查。
攻击者利用此问题并向自己发送邀请以创建管理员帐户：
POST /api/invites/new
{“email”:”PI:EMAIL”,”role”:”admin”}
场景#2：API包含仅应向管理员公开的端点 GET /api/admin
/v1/users/all。该端点返回应用程序所有用户的详细信息，
并且未实现功能级别的授权检查。研究过API结构的攻击者
进行了有根据的猜测，并设法访问了此端点，从而暴露了
应用程序用户的敏感细节。
API脆弱吗？
查找失效的功能级授权问题的最佳方法是对授权机制进行
深入分析，同时牢记用户层次结构，应用程序中的不同角
色或组，并提出以下问题：
• 普通用户可以访问管理端点吗？
• 用户是否可以通过简单地更改HTTP方法（如，从GET到
DELETE）来执行他们不应该授予的敏感动作（如，创建、修
改或删除）？
• 通过简单地猜测端点 URL和参数（如，
/api/v1/users/export_all），来自X组的用户是否可以访问本
来应该只向Y组用户公开的功能？
不要假设仅基于URL路径的API 端点是常规端点或管理端点。
尽管开发人员可能选择将大多数管理端点公开在特定的相
对路径下，例如api/admins，但在其他相对路径下找到这些
管理端点以及常规端点（例如api/users）是很常见的。
参考资料
OWASP资料
• OWASP Article on Forced Browsing
• OWASP Top 10 2013-A7-Missing Function Level Access 
Control
• OWASP Development Guide: Chapter on Authorization
外部资料
• CWE-285: Improper Authorization
如何防止？
您的应用程序应该具有从所有业务功能中调用的一致且易
于分析的授权模块。通常，这种保护是由应用程序代码外
部的一个或多个组件提供的。
• 强制执行机制应拒绝所有访问，要求显式授予特定角色才
能访问每个功能；
• 在考虑应用程序和组层次结构的业务逻辑的同时，针对功
能级授权缺陷检查API端点；
• 确保所有管理控制器都从管理抽象控制器继承，该抽象控
制器根据用户的组/角色实施授权检查；
• 确保常规控制器内的管理功能根据用户的组和角色实施授
权检查。
API5:2019 失效的功能级授权
可利用性 ：3
普遍性：2
可检测性 ：1
技术：2
攻击者利用漏洞将合法的API调用发送
给他们不应访问的API 端点。这些端点
可能会暴露给匿名用户或常规的非特
权用户。由于API更加结构化，并且更
易于预测访问API的方式，因此更容易
发现API中的这些缺陷（如，将HTTP方
法从GET替换为PUT，或将URL中的
“用户”字符串更改为“管理员”）。
对功能或资源的授权检查通常是通过配置来
管理的，有时是在代码级别上进行的。实施
适当的检查可能会造成困惑，因为现代应用
程序可能包含多种类型的角色或组以及复杂
的用户层次结构（如，子用户、具有多个角
色的用户）。
这些缺陷使攻击者可以访问未经授
权的功能。管理功能是此类攻击的
主要目标。
API详情
业务详情
12
影响
威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：一个乘车共享应用程序为用户提供了编辑个人资料基本
信息的选项。在此过程中，将使用以下合法的JSON对象将API调用
发送到PUT  /api/v1/users/me：{"user_name":"inons","age":24}
请求GET /api/v1/users/me包含一个附加credit_balance属性：
{"user_name":"inons","age":24,"credit_balance":10}.
攻击者使用以下负载重播第一个请求：
{"user_name":"attacker","age":60,"credit_balance":99999}
由于端点易受批量分配缺陷影响，攻击者无需支付即可获得信用。
场景#2：一个视频共享门户允许用户上传并下载不同格式的内容。
研究API的攻击者发现，端点GET /api/v1/videos/{videoid}/metadata
返回具有视频属性的JSON对象。属性之一是”mp4_conversion_
Params”: ”-v codec h264”，表示应用程序使用shell命令来转换视频。
攻击者还发现端点POST /api/v1/videos/new容易受到批量分配缺陷
的影响，并允许客户端设置视频对象的任何属性。攻击者将恶意
值设置如下：”mp4_conversion_params”:”-v codec h264 && format C：
/”。一旦攻击者将视频下载为MP4，此值将导致注入shell命令。
API脆弱吗？
现代应用程序中的对象可能包含许多属性。其中一些属性
应由客户端直接更新（如，user.firstname或user.address），
而某些属性则不应该更新（如，user.isvip标志）。
如果API 端点自动将客户端参数转换为内部对象属性，而不
考虑这些属性的敏感性和暴露程度，则该端点很容易受到
攻击。这可能使攻击者可以更新他们不应该访问的对象属
性。
敏感属性示例：
• 与权限相关的属性：user.isadmin、user.isvip仅应由管理员
设置；
• 与流程相关的属性：user.cash仅应在付款验证后在内部设
置；
• 内部属性：article.created_time仅应在应用程序内部设置。
参考资料
外部资料
• CWE-915: Improperly Controlled Modification of Dynamically-
Determined Object Attributes
如何防止？
• 如果可能，请避免使用将客户输入自动绑定到代码变量或
内部对象中的函数；
• 仅将客户端可更新的属性列入白名单；
• 使用内置功能将客户端不应访问的属性列入黑名单；
• 如果可能，为输入数据有效负载准确、明显的定义和实施
schema格式。
API6:2019 批量分配
可利用性 ：2
普遍性：2
可检测性 ：2
技术：2
攻击利用通常需要了解业务逻辑、对
象的关系和API结构。在API中更容易利
用批量分配，因为，它们通过设计公
开了应用程序隐含的实现方法以及属
性名称。
现代框架鼓励开发人员使用将来自客户端的
输入自动绑定到代码变量和内部对象中的功
能。攻击者可以使用这种方法来更新或覆盖
开发人员从未打算公开的敏感对象属性。
利用该漏洞可能导致特权提升、数
据篡改、绕过安全机制等。
API详情
业务详情
13
影响