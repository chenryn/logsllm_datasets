6.3 Password Cracking Results 
To  test  our  password  analysis,  we  used  two  password  cracking 
systems: (1) John the Ripper [4]; and (2) a probabilistic password 
cracker.  We  ran  John  the  Ripper  in  incremental  mode,  which 
according  to  the  documentation  is  their  most  powerful  cracking 
mode and eventually tries all possible character combinations as 
passwords [4].  
In the first series of results that we describe, the threshold value 
for the password checker was set to one day; thus we limited the 
number of guesses made by both password crackers to 43.2 billion 
guesses. This number is the approximate number of guesses that 
can be hashed by our test machine in one day.   
In order for us to be able to compare our password checker with 
other  existing  password  checkers  (such  as  Microsoft  password 
meter) we needed to be able to map the threshold value thp of our 
password  checker  to  their  score  of  weak  and  strong  passwords. 
For example Microsoft outputs weak, medium, strong, and best as 
the  result  of  password  checking.  Since  we  do  not  know  their 
algorithm to score the strength of passwords, this comparison was 
not possible.  
Table 5 and 6 show the results of the password cracking by John 
the  Ripper  and  the  Probabilistic  Password  Cracker  (PPC) 
respectively,  for  a  one  day  threshold.  We  divided  the  cracking 
results when using the AMP system into four different groups. We 
refer to the first group as originally strong. These are passwords 
that have been determined as strong based on the set threshold by 
AMP.  The  second  group  is  called  originally  weak  not  able  to 
make  stronger,  and  are  passwords  that  have  been  recognized  as 
weak by AMP and the system has tried all possible modifications 
within  distance  one  to  strengthen  them,  but  the  modified 
probability  values  was  not  small  enough  to  be  below  the 
Hotmail 
Percentage 
MySpace 
Percentage 
RockYou 
(0.3%) 
(100%) 
(51.91%)
(1.81%) 
(90.60%) 
(60.15%)
(5.48%) 
(5.03%) 
Percentage 
(1.42%)
(98.51%)
(58.54%)
(4.1%)
Figure  4  shows  how  fast  the  weak  passwords  (that  could  be 
strengthened)  were  able  to  be  cracked.  With  only  1  billion 
password guesses, which can be made in less than one hour, about 
20%  of  MySpace  passwords,  30%  of  Hotmail  and  35%  of 
RockYou passwords were cracked and in one day these numbers 
reached to 38%, 48% and 53% respectively.  
116
the  1  day  results  and  even  at  4  days  we  are  significantly 
improving the weak passwords.  
We  could  not  strengthen  some  of  the  weak  passwords  since  we 
are limiting changes to edit distance one. Furthermore, we did not 
have any restrictions on the proposed passwords such as minimum 
length.  The  identified  weak  passwords  that  we  could  not 
strengthen were 4.0%, 4.8%, 18.6% and 37.7% (of the total test 
password  set)  for  12  hours,  24  hours,  48  hours,  and  96  hours, 
respectively.  As  an  example,  we  could  not  strengthen  the 
password  “123456”  in  our  data  set.  This  is  to  be  expected  and 
could likely be remedied by allowing edit distance two or having 
some minimal restrictions on the input password. 
Figure 6. Using AMP for different time thresholds 
7.  CONCLUSION AND FUTURE WORK 
We  developed  a  new  approach  to  help  users  create  strong 
passwords  based  on  determining  a  threshold  value  that  rejects 
those  that  are  weak  and  then  slightly  modifies  the  passwords  to 
make them strong. We used a probabilistic context-free grammar 
to  estimate  the  probability  of  a  password  being  cracked.  This 
grammar  is  derived  through  training  on  large  sets  of  revealed 
passwords. The grammar can be used to generate the passwords in 
highest  probability  order  so  that  it  is  easy  to  calculate  Shannon 
entropy  and  guessing  entropy.  We  also  discussed  a  way  to 
calculate  the  Shannon  entropy  directly  from  the  grammar.  The 
reject  function  was  based  on  using  a  threshold  probability  that 
could  be  determined  in  several  ways  and  separated  weak  from 
strong  passwords.  We  built  a  system  (AMP)  and  showed  the 
effectiveness of our approach through a series of experiments. We 
further showed how to use a dynamic update algorithm to change 
the  grammar  as  the  system  generated  passwords  to  preserve  the 
ability  of  the  system  to  generate  strong  passwords.  We  also 
showed  that  the  update  algorithm  would  drive  the  grammar  to 
higher  Shannon  entropy  and  thus  the  new  password  distribution 
(including  passwords  generated  by  AMP)  would  be  increasingly 
resistant to password cracking. 
In  future  work,  we  want  to  explore  fast  implementations  of 
finding  passwords  with  edit  distance  greater  than  one.  We  also 
want  to  further  explore  the  modification  algorithm  to  see  what 
operations are most effective in generating usable passwords and 
investigate  the  security  of  the  system  if  all  aspects  of  the 
algorithms  and  thresholds  were  to  be  known.  By  knowing  the 
threshold, the attacker could possibly eliminate passwords above 
threshold  in  our  approach.  Clearly  this  also  applies  to  other 
techniques,  for  example  rule  based  policies.  It  is  obvious  if  the 
rules  were  known  for  scoring  a  password  that  those  passwords 
that do not pass the rules can be ignored in attacks. Note that in 
our  approach  however,  the  distributions  of  passwords  (with 
respect  to  probability)  always  tend  to  flatten  out  and  thus  it 
Figure 4. Weak passwords cracked using JTR 
The analogous curve for strengthened passwords would be close 
to a straight line very close to the X-axis if overlaid in Figure 4 
since  less  than  1%  of  them  have  been  cracked  in  this  period  of 
time  (24  hours).  This  curve  is  shown  in  Figure  5.  This  figure 
shows  the  percentage  of  strengthened  passwords  cracked  over 
time by John the Ripper. (Note that the maximum percentage in 
this  graph  is  0.5%  and  not  50%.)  These  passwords  are  the 
strengthened  version  of  the  passwords  from  the  previous  figure 
that  have  been  made  strong  by  the  AMP  system.  These  two 
figures show how  much the rate of cracking has been decreased 
after modification.  
Figure 5. Strengthened passwords cracked using JTR 
Overall,  before  using  AMP,  the  total  rate  of  cracking  the  test 
password  set  (columns  1,2,3)  was  56.6%  with  the  probabilistic 
password  cracker.  After  using  AMP,  since  it  only  allows  strong 
passwords (columns 1 and 4) the cracking rate is 3.9%. Also note 
that the analysis system successfully determines weak passwords 
from  strong  ones  with  an  error  rate  of  1.43%  (column  1).    This 
rate is the percent of passwords originally identified as strong, but 
that  can  be  cracked.  Notice  that  we  do  identify  a  fair  number 
(39%)  of  passwords  as  weak  but  that  we  were  unable  to  crack 
(columns 2 and 3). We believe that this type of error is acceptable 
as it only means that we are being conservative and we could not 
crack some passwords that we deemed weak. 
Besides using the 1 day threshold, we also ran similar tests as the 
above using threshold values (see Table 2) for 12 hours, 48 hours 
and  96  hours.  Figure  6  shows  the  total  rate  of  cracking  the  test 
password  set  before  using  AMP  and  after  using  AMP  for  both 
John  the  Ripper  (JTR)  and  the  probabilistic  cracker  (PPC).  The 
time allocated for cracking was of course the same time as used 
for determining the threshold. Note that the results are similar to 
117
becomes harder to crack passwords as the threshold is lower. In 
our  work  we  randomly  generate  changes  to  a  user  provided 
password, but this original password is not known to the attacker. 
Thus simply guessing all the variations on passwords based on our 
modifying algorithm is problematic.  
We intend to explore these issues in future work but we believe 
that  our  approach  is  still  better  than  existing  approaches  with 
respect  to  security  of  the  algorithms.  Note  that  our  dynamic 
update  algorithm  constantly  changes  the  probabilities  of  the 
grammar after any password is strengthened and moves towards a 
more uniform probability distribution. This would be difficult to 
model unless the attacker also had all the proposed passwords that 
we modified. 
8.  REFERENCES 
 [1]   M. Weir, S. Aggarwal, M. Collins, and H. Stern, “Testing 
metrics for password creation policies by attacking large sets 
of revealed passwords,” Proceedings of the 17th ACM 
Conference on Computer and Communications Security 
(CCS '10), October 4-8, 2010, pp. 163-175. 
[2]    E. R. Verheul, “Selecting secure passwords,” M. Abe (Ed.): 
CT-RSA 2007, LNCS 4377, pp 49-66, 2007. 
[3]    M. Weir, Sudhir Aggarwal, Breno de Medeiros, Bill Glodek, 
“Password Cracking Using Probabilistic Context Free 
Grammars,” Proceedings of the 30th IEEE Symposium on 
Security and Privacy, May 2009, pp. 391-405. 
[4]   The Open wall group, John the Ripper password cracker, 
http://www.openwall.com. 
[5]   Shannon Riley, “Password security: what users know and 
what they actually do,” Usability News, 8(1), 2006. 
[6]   B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. 
Szydlowski, R. Kemmerer, C. Kruegel, and G. Vigna, "Your 
botnet is my botnet: Analysis of a botnet takeover," Tech. 
Rep., April 2009. 
[7]   R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L. 
Mazurek, L. Bauer, N. Christin, and L. F. Cranor, 
“Encountering stronger password requirements: user 
attitudes and behaviors,” In 6th Symposium on Usable 
Privacy and Security, July 2010. 
[8]  Furnell, S., “An assessment of website password practices,” 
[9] 
Computers & Security 26, 7-8 (2007), 445-451. 
 W. Burr, D. Dodson, R. Perlner, W. Polk, S. Gupta, E. 
Nabbus, “NIST special publication 800-63-1 electronic 
authentication guideline,” National Institute of Standards and 
Technology, Gaithersburg, MD, April, 2006. 
[10]  Y. Zhang, F. Monrose, and M. K. Reiter, “The security of 
modern password expiration: an algorithmic framework and 
empirical analysis,” In Proceedings of ACM CCS’10, 2010. 
 [11] Philip G. Inglesant, M. Angela Sasse, “The true cost of 
unusable password policies: password use in the wild,” Proc. 
of the 28th international conference on Human factors in 
computing systems, April 10-15, 2010, Atlanta, Georgia. 
 [12] Charoen, D., Raman, M., and Olfman, L., “Improving end 
user behavior in password utilization,” Systemic Practice and 
Action Research, 21(1), 55. 2008. 
[13] A. Adams and M. A. Sasse, “Users are not the enemy,” 
Communications of the. ACM, 42(12):40–46, 1999. 
118
[14] J. Campbell, W. Ma, D. Kleeman,“Impact of restrictive 
composition policy on user password choices,” Behavior and 
information technology, Vol. 30, No. 3, May-June 2011. 
[15] Florencio, D. and Herley, C., “A large-scale study of web 
password habits,” In Proceeding of the 16th Int. Conf. on 
World Wide Web, 2007. 
[16] R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L. 
Mazurek, L. Bauer, N. Christin, L. F. Cranor, and S. 
Egelman, “Of passwords and people: measuring the effect of 
password-composition policies,” Proceeding of 2011 Annual 
Conference on Human Factors in Computing Systems, 2011. 
 [17] G. Bard, “Spelling-error tolerant, order independent pass- 
phrases via the Damerau-Levenshtein string-edit distance 
metric,” Fifth Australasian Symposium on ACSW Frontiers - 
Volume 68 (Ballarat, Australia, January 30 - February 02, 
2007), 117-124. 
[18] Yan, J. J., Blackwell, A., Anderson, R. and Grant A., “The 
memorability and security of passwords -- some empirical 
results,” Technical Report No. 500 (September 2000) 
Computer Laboratory, University of Cambridge. 
[19] A. Forget, S. Chiasson, P.C. van Oorschot, R. Biddle, 
text passwords through persuasion,” 
“Improving 
Symposium on Usable Privacy and Security (SOUPS) 2008, 
July 23–25, 2008, Pittsburgh, PA USA. 
[20] J. Yan, “A note on proactive password checking,” ACM New 
Security Paradigms Workshop, New Mexico, USA, 2001. 
[21] EH Spafford, “OPUS: preventing weak password choices,” 
Computers& Security (1992). 
[22] S. Schechter, C. Herley, M. Mitzenmacher, “Popularity is 
everything: a new approach to protecting passwords from 
statistical-guessing attacks”, HotSec'10: Proceedings of the 
5th USENIX conference on Hot Topics in Security, 2010. 
[23] C. Castelluccia, M. Durmuth, D. Perito, “Adaptive password-
strength meters from Markov models,” NDSS ’12,  2012. 
 [24] C. E. Shannon, “Prediction and entropy of printed English,” 
Bell Systems Tech. J., vol. 30, pp 50-64, Jan. 1951. 
[25]  J. Massey, “Guessing and entropy,” 1994 IEEE Symposium 
on Information Theory, pp. 204, 1994. 
[26] Damerau, F. J. "A technique for computer detection and 
correction of spelling errors. Communications of the ACM, 
vol. 7, Issue 3, pp. 171-176, March 1964. 
 [27] T. M. Cover and J. A. Thomas, Elements of Information 
Theory, Wiley, 1991. 
[28] A. Vance, “If your password is 123456, just make it 
hackme,” New York Times, January 2010, 
http://www.nytimes.com/2010/01/21/technology/21password
.html. 
[29] Robert McMillan, “Phishing attack targets MySpace users,” 
http://www.infoworld.com/d/security-central/phishing-
attack-targets-myspace-users-614, October 27, 2006. 
[30] T. Warren, “Thousands of Hotmail Passwords Leaked,” 
http://www.neowin.net/news/main/09/10/05/thousands-of-
hotmail-passwords-leaked-online. 
[31] A list of popular password cracking wordlists, 2005, 
http://www.outpost9.com/files/WordLists.html.