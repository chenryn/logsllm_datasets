21050
char myFunction(char *validPtr, size_t idx)
char *newPtr = validPtr + idx;
upperBits = (validPtr & 0xffffffff00000000);
lowerBits = (newPtr & 0xffffffff);
newPtr = upperBits | lowerBits;
char ret = *newPtr;
return ret;
1(cid:3)
2(cid:3)
Listing 1: This pseudocode shows a potentially-unbounded
2(cid:2). TDI’s instrumentation (marked with a
memory access
dark background) preserves the upper bits of newPtr 1(cid:2). This
ensures that the access at 2(cid:2) cannot be further than 4GB from
validPtr, and so cannot escape validPtr’s arena.
arena
guard
zone
arena
valid
pointer
safe
pointer
unsafe
pointer
masking
Fig. 3. Valid, safe and unsafe pointers; safe pointers are always within 4GB
of a valid pointer into the same arena, which means that while they may point
into a guard zone (as illustrated), they will never point to a different arena. If
the result of pointer arithmetic may lie in a different arena, we call the result
an unsafe pointer and mask it before use (as shown in Listing 1).
preventing pointers from crossing arena boundaries. Although
our design is not compiler-speciﬁc, we discuss some of the
details and challenges in the concrete context of LLVM.
TDI allocates each memory object (whether stack or heap)
in an arena based on its type; the 32 most signiﬁcant bits of
each pointer identify its arena. The result of pointer arithmetic
may end up in a different arena, which would allow an attacker
to break isolation. We prevent this using pointer masking;
however, masking after every instance of pointer arithmetic
results in unacceptable overhead. To determine which pointers
we must mask, we divide pointers in three classes:
• A valid pointer can be proven to be in the same arena in
which the pointer from which it derives was allocated;
• A safe pointer either points to the same arena or to a
guard zone, in which case a dereference will fault;
• An unsafe pointer may point to a different arena.
These three classes are illustrated in Figure 3.
We can identify valid pointers based on their sources; for
example, allocation functions always return valid pointers. If
we can prove that the result of pointer arithmetic is within
4GB of the original pointer, we can classify that result as
safe; otherwise, such a result is unsafe.
Dereferencing a valid or safe pointer does not
threaten
security, but we must ensure that unsafe pointers are not
dereferenced by loads or stores.
The base pointer of a pointer is the most recent known
valid pointer that a pointer derives from. We can ensure that
a pointer is valid by overwriting the high-order bits (which
represent
the arena) with those of its valid base pointer,
Fig. 1. High-level overview of TDI.
4gb
4gb
guard
zone
arena
guard
zone
arena
guard
zone
4gb
base
pointer
4gb
Fig. 2. Overview of TDI’s arena layout, with guard zones of ≥4GB.
allocated. Our design, as shown in Figure 1, relies on both
compiler instrumentation and runtime code. At compile time,
we instrument all pointer arithmetic to ensure that all pointers
stay in their original arena. At run time, our arena-based
allocator allows programs to allocate memory in appropriate
isolated heap/stack regions. Besides explicit program annota-
tions, TDI also offers support to automatically allocate both
heap and stack objects in arenas based on their type.
We constrain pointers to their original arena by masking
pointers to preserve the upper 32 bits during pointer arithmetic
(i.e., we only allow the lower 32 bits to change), as shown in
Listing 1. As long as all arenas are at least 4GB in size and
appropriately aligned, this ensures that pointers always point
to the same arena both before and after pointer arithmetic.
Masking pointers after every individual instance of pointer
arithmetic would be very inefﬁcient; for example, a pointer
used to access successive elements of a struct or array would
need to be repeatedly re-masked. As shown in Figure 2, we
relax the need for masking by adding guard zones around each
arena. If a base pointer is known to be inside an arena, then
we know that any pointer within 4GB is either in the same
arena, or in a guard zone. This insight allows us to optimize
TDI by identifying and removing unnecessary masking.
IV. INSTRUMENTATION
In this section, we discuss the design of TDI’s compiler
instrumentation, which enforces our security guarantees by
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 
31051
i.e. masking the pointer, as described above. Such a masked
pointer is always valid, since it points inside the same arena
as the valid base pointer, and can then be safely dereferenced.
To ensure a valid base pointer is always available, we only
allow safe pointers to be used locally within a function; any
pointer which escapes a function’s scope (e.g., by being stored
to memory, returned from a function, or passed as a parameter
to another function) must be valid (i.e., must be masked if
necessary). This means we can determine pointer categories
with only intraprocedural analysis, since any pointers from
outside the scope of the function must be valid.
To summarize, we mask pointers in two situations:
• When an unsafe pointer may be used by a load (or
optionally, as the address used by a store). This means
we cannot prove that it is safe (<4GB away from a valid
pointer), and may now be pointing to a different arena.
• When a pointer value escapes the local analysis. For
example, when a pointer is stored in memory, passed as a
function argument or used as a return value. This ensures
that all pointers entering a function are themselves valid.
A. Challenges
Our instrumentation identiﬁes pointer arithmetic and clas-
siﬁes the results as valid, safe, or unsafe. Doing this analysis
on real-world code must overcome the challenges below.
1) Arithmetic on non-pointer types: Since pointers can
be cast to/from other types, such as integers, we need to
distinguish pointer arithmetic from non-pointer arithmetic; we
want to mask all resulting pointers, but pointer arithmetic is
not always intended to result in a valid pointer. For example,
pointers may be subtracted to obtain a delta. Even though
the result of such arithmetic may escape local scope, the
result must not be masked by our instrumentation, since that
would produce incorrect code. Compiler passes also manipu-
late pointers, including converting them to untyped values.
We resolve this by doing pointer detection, allowing us to
ﬁnd which variables/intermediates are truly (non-)pointers.
2) Non-constant offsets: Array indexes or other pointer
offsets are often non-constant. Our efﬁciency relies on being
able to prove that such offsets are within 4GB of a known-
valid pointer, allowing us to mark the result as safe; however,
offsets are often stored in 64-bit variables.
Pointer arithmetic is often performed on the result of previ-
ous pointer arithmetic; since safe pointers are not necessarily
valid, efﬁcient instrumentation also requires that we handle
such ‘chained’ arithmetic. Pointers may only be modiﬁed
and/or used in some program paths, making it more difﬁcult to
reason about their behavior. A common example is a pointer
which is incremented inside a loop, as we see below.
We resolve this using the static analysis we describe below,
range analysis and dominating pointer access analysis.
3) Speculative execution: Since we include speculative
execution (Spectre) in our threat model, bounds provided by
existing static analysis can be unsafe. For example, LLVM’s
ScalarEvolution (SCEV) will use array bounds checks to prove
that an array access is in-bounds, but that array may still be
accessed on a transient path. We resolve this by ensuring our
custom analysis is valid in the context of speculative execution.
B. Pointer detection
We found that, in many cases, variable types marked in the
original source code and in the compiler IR do not accurately
reﬂect whether a variable is used as a pointer or not. To
ensure masking wherever needed while retaining compatibility
with existing code, we designed static analysis to detect
pointer/non-pointer status. Our main insight is that variables
should be classiﬁed (where possible) based on how they are
used rather than how they are declared.
Our approach marks variables as pointers, non-pointers,
or negated pointers in several steps. In each step, we mark
variables based on their usage (if their type is still unknown),
and then we use forward and backward propagation to infer the
type of other variables. For example, our ﬁrst step considers
all pointer dereference operations and marks their operands as
pointers. The main idea of our propagation is that a pointer
plus an offset is still a pointer, a pointer minus another pointer
(or plus a negated pointer) is an offset, and other operations
typically yield non-pointers. Details are in Appendix C.
C. Categorization
To be able to apply efﬁcient masking, we categorize all
pointer arithmetic results we detect as valid, safe, or unsafe.
We start with the ﬁrst such instructions in a given function
and proceed top-down (based on domination). Since the clas-
siﬁcation of arithmetic can depend on other arithmetic, we can
also temporarily place them in a group of unknown arithmetic.
We repeat this process until all arithmetic has been classiﬁed;
if there are only circular dependencies left, we mark the ﬁrst
remaining arithmetic as unsafe and continue.
We only need to mask pointers which are dereferenced by
a load (or store) instruction, are used in pointer arithmetic, or
which escape the local function. This includes both direct and
indirect uses (including integer casts which are later used by
arithmetic). We ignore instructions which are not used in such
ways, which removes almost all ambiguous cases of pointer
arithmetic. We discuss some remaining cases in our evaluation.
At this stage, we apply dominating pointer access analysis,
which we describe in Section IV-F, which can prove that some
pointers are valid or safe. Otherwise, we trace the instruction’s
base pointer. If the source is outside the local scope (a function
argument, returned from another function, or loaded from
memory), we consider the source to be valid. If the source
is a pointer arithmetic instruction (or a merge of several such
instructions), then we use the classiﬁcation of that instruction
(and defer processing if that instruction has not yet been
classiﬁed). Otherwise, we consider the source to be unsafe.
Our classiﬁcation for the result of pointer arithmetic then
depends on the classiﬁcation of the base pointer: (1) a valid
base pointer means that the result is safe; (2) a safe base
pointer means that the result is unsafe (and we will mask
the pointer before using it); (3) an unsafe base pointer must
itself be masked. Since a masked pointer is valid, the result of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 
41052
void func(char *validPtr, size_t idx) {
char *ptr = validPtr;
if (...)
1(cid:3) ptr = ptr + 2;
2(cid:3) ptr = ptr + 4;
3(cid:3) char val = *(ptr + 1);
}
else
Listing 2: The access at
offset to validPtr is less than 4GB.
3(cid:2) is safe, because the maximum
the arithmetic is then safe. If we cannot prove that an offset is
bounded to 4GB (nor, as described below, truncate the offset to
enforce this), we mark the current arithmetic result as unsafe.
D. Range analysis
One important supporting component of our analysis in-
volves determining the maximum range of offsets used in
pointer arithmetic. We require a Spectre-BCB-aware analysis
which calculates the worst-case (largest) distance to a known-
valid pointer on all paths within a function, which prevents
using standard compiler analysis (such as LLVM’s SCEV).
Instead, we designed an alternative analysis which performs a
recursive check of all conditional control ﬂows. We calculate
the bounds by considering instructions such as truncations,
arithmetic (e.g., AND operations), the bitwidth of loads/vari-
ables, and sources such as constant values. When merging
several possible bounds (e.g., phi nodes), we use the worst-
case bound among all incoming values.
One special case is where we can prove a 32-bit bound, i.e.
a maximum offset of 4GB, which is multiplied by the object
size, such as during an array lookup. We can ensure that such
an index is always safe by ensuring that the guard zone is at
least 232*sizeof(type) bytes (see Section VI). The majority of
such calculations are performed for types ≤ 8 bytes (64-bit
pointers or doubles); if our arenas use 32GB guard zones, then
we can classify all scaled 32-bit offsets for such types as safe,
assuming the base pointer is known to be valid.
When we are using this range analysis to determine whether
a pointer is safe, and the distance to a valid pointer cannot be
proven to be less than 4GB, simply truncating the offset in
bytes to 4GB (32 bits) is sufﬁcient to ensure that the resulting
pointer is safe. Note that masking is still required to make it
valid, and that truncation is unnecessary if the analysis later
decides to mask this pointer.
E. Chaining distances
A pointer is safe when the distance to a valid pointer is
known to be less than 4GB. Even when pointer arithmetic
is based on a safe pointer, we can compute bounds using
the offsets of previous arithmetic, and use that information
is still within 4GB of a known-
to prove that
valid pointer. A simple example is shown in Listing 2. Here,
3(cid:2), which has
our analysis checks the phi node for ptr at
incoming values from 1(cid:2) and 2(cid:2), and concludes that
the
maximum offset to a known-valid pointer is less than 4GB
even though the intermediate pointers may not be valid.
the result
void func(char *validPtr, int idx) {
char *A = validPtr + idx;
char *B = A + 1024;
1(cid:3) char valA = *A;
2(cid:3) char valB = *B;
}
Listing 3: After 1(cid:2), pointer A is known to be valid, so when
execution reaches 2(cid:2), we know that Pointer B is safe.
void func(char *validPtr, size_t size) {
1(cid:3) char *ptr = validPtr;
for (size_t n = 0; n < size; n++) { 2(cid:3)
3(cid:3) ptr = ptr + 1;
4(cid:3) char val = *ptr;
}
}
3(cid:2) is dominated by the
Listing 4: The pointer arithmetic at
loop header at 2(cid:2). Since all candidates for ptr are valid in the
context of 2(cid:2), we know that ptr is safe at 4(cid:2).
Again, standard compiler analysis could provide this infor-
mation (by calculating the distance between pointers), but it
does not consider speculative ﬂows. Instead, we use our own
(simple) control-ﬂow-insensitive distance analysis, which is
also needed to support several the other analysis stages.
F. Dominating pointer accesses
When a safe pointer is dereferenced to access (load or store)
memory, any code after that memory access can assume that
the used pointer was valid. If a safe pointer is not valid, then it
must point into a guard zone; after such a pointer is accessed,
a fault will occur, and execution will not continue.
This allows us to improve our categorization of pointers for
all code dominated by (guaranteed to run after) a memory
access. Existing compiler static analysis does not (easily)
provide the information we need. Alias analysis focuses on
proving that pointers are never pointing to the same object,
while our analysis must prove that pointers are always pointing
to the same arena (i.e. within 4GB of a valid object).
2(cid:2) is
Listing 3 provides a simple example. The access at
dominated by the access at 1(cid:2). Since the pointer B at 2(cid:2) is less
than 4GB away from the pointer A used at 1(cid:2), then B could be
categorized as safe in the context of 2(cid:2), and architecturally it
could be accessed without masking. However, note that in this
particular case, in the face of a Spectre attack, B might still be
dereferenced speculatively even if A points to a guard zone.
This limits the applicability of this type of optimization in a
threat model where we must also consider transient attacks.
However, only a small number of loads/stores will be
speculatively queued [40]. As long as we limit the distance
between successive accesses (we limit it to 64kB), and ensure
that base pointers are always valid (masking them where
needed), we can make such optimizations speculation-aware.
For example, consider Listing 4, where ptr is incremented
inside the loop. On the ﬁrst iteration of the loop, the new ptr
at 3(cid:2) is based on the valid pointer from 1(cid:2). On later iterations,
the new ptr at 3(cid:2) is dominated by the previous access at 4(cid:2).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 