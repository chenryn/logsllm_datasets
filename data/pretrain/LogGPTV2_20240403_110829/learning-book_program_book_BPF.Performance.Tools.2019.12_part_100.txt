## Page 817
780
Appendix D
BPF output: 0000: 00 00 20 00 00 00 00 00
0008: 00 00 00 00
fffffffb5945e20 kretprobe_tranpoline+ 0x0
dd 31049 [009] 2652091,826838:
eVt :
(/1ib/nodules/5-o,0xc1=viεtual/bu11a/vnlinux)
BeF ostyst: 0000: 00 00 20 00 00 00 00 00 .* -*.*
0008: 00 00 00 00
- - . -
The perf.data record file only contains entries for reads larger than one Mbyte, followed by
BPF output events that contain the size of the read. While tracing, I issued three two Mbyte
reads using dd(1), which can be seen in the BPF output: *00 00 20* is two Mbytes, 0x200000,
in little-endian format (x86).
The bigreads.c source is:
#1nc1ude 
include 
#include 
define SEC (MAME)attzilbute_ ( (sectLon (NAHE) , used))
struct bpf_nap_def ↑
unsigned int typer
unslgned Int key_size,
unsigned int value_sizer
unslgned Int nax_entries,
) ;
static int (*perf_event_output) (void *, struct bpf_map_def *, Lnt, void *,
unsigned long) = (vo1d *)BPF_FUNC_perf_event_output.;
 = Teuueuo (sdeu]o3s tepdeu"gdg 1on.xns
. tyPe = BPF_MAP_TYPE_PERE_EVERT_ARRAY,
.key_slze = slzeof(1nt) 
valve_size = sizeof (__u321
*snaoa - seTaquexeu*
);
+define MIN_BYTEs (1024 * 1024)
(peaxs=ounuls
int bpf_nypxog (struct pt_regs *ctx)
---
## Page 818
C BPF781
long bytes = ctx=>zdx,
if (bytes >= MIN_BYTES) ↑
perf_event_output (ctx, &channe1, BPF_F_CURRENT_CPO,
6bytes, sizeof (bytes]}
return 0;
Ta9。 = (suaott)oas []asuaott eo
Int _vezsion SEC (*vexsion*) - LIXUx_VERSIoN_C00E,
asa S3ANIn ueq rareg speau sog dew ,patrue, e esa (andnoquasajuad sansst su
become the BPF output events in the perf.data file.
The perf(1) interface is gaining more capabilities, and it is becoming possible to run BPF
programs with just *perf record -e program.c.° Check for new developments and examples,
MoreInfo
For more on BPF C programming, see:
Documentation/networking/filter.txt in the Linux source [17].
• Cilium’s *BPF and XDP Reference Guide° [19].
---
## Page 819
This page intentionally left blank
---
## Page 820
AppendixE
BPF Instructions
This appendix is a summary of selected BPF instructions, and is provided to aid in reading
instruction listings from tracing tools and the source to the hello_world.c program in
Appendix D. Developing BPF tracing programs from scratch directly using instructions is not
recommended and not covered here.
The BPF instructions included in this appendix are only a selection. For a complete reference,
see the following header files in the Linux source and the references at the end of this
appendix:
•Classic BPE: include/uapi/linux/ilter.h and include/uapi/linux/bpf_common.h
 Extended BPF: include/uapi/linux/bpf.h and include/uapi/linux/bpf_common.h
The bpf_common.h is shared between them as the encodings are mostly the same.
Helper Macros
The BPF instructions from the Appendix D hello_world.c example include:
BPF_MOV64_IMM(BPF_REG_1, 0xa21), /**!n* */
BPF_STX_MEH(BPF_B, BPF_REG_10, BPF_REG_1, -4) ,
BPF_M0v64_IMM(BPF_REG_1, 0x646c726fl , /* *or1d* */
BPF_STX_MEH (BPF_B, BPF_REG_10, BPF_REG_1, -B1 ,
[.  - ]
BPF_RAN_INSN (BPF_JMP 1 BPF_CALL, O, O, 0,
BPE_FUuC_trace_printk),
BPF_HOV64_INM (3PF_REG_0, 0) 。
BPF_EXIT_IMSN1) ,
These are actually higher-level helper macros. They are summarized in Table E-1.
---
## Page 821
784
Appendix E
Table E-1Selected BPF Instruction Helper Macrosa
BPF Instruction Macro
Description
BPF_ALU64_REG(0P DST, SRC)
ALU 64-bit register operation
BPF_ALU32_REG(0e DST, SRC)
ALU 32-bit register operation
BPF_ALU64_IMM(OP DST, IMM)
ALU 64-bit immediate value operation
BPF_ALU32_IMM(OP DST, IMM)
ALU 32-bit immediate value operation
BPF_M0V64_REG(DST, SRC)
Move 64-bit source register to destination
BPF_M0V32_REG(DST, SRC)
Move 32-bit source register to destination
BPF_MOV64_IMM(DST, IMM)
Move 64-bit immediate value to destination
BPF_MOV32_IMM(DST, IMM)
Move 32-bit immediate value to dlestination
BPF_LD_IMM64(DST, IMM)
Load 64-bit immediate value
BPF_LD_MAP_FD(DST, MAP_FD)
Load map FD into register
BPF_LDX_MEM(SIZE, DST, SRC, OFF)
Memory load from register
BPF_STX_MEM(SIZE, DST, SRC, OFF)
Memory store from register
BPF_STX_XADD(SIZE, DST, SRC, OFF)
Atomic memory add by register
BPF_ST_MEM(SIZE, DST, OFF, IMM)
Memory store from immediate value
BPF_JMP_REG(OP DST, SRC, OFF)
Conditional jump against register
BPF_JMP_IMM(Oe DST, IMM, OFF)
Conditional jump against immediate value
BPF_JMP32_REG(0P DST, SRC, OFF)
Compare registers as 32-bit
BPF_JMP32_IMM(OP DST, IMM, OFF)
Compare register-to-immediate as 32-bit
BPF_JMP_A(OFF)
Unconditional jump
BPF_LD_MAP_VALUE(DST, MAP_FD, OFF)
Load map value pointer to register
BPF_CALL_REL(IMM)
Relative call(BPF-to-BPF)
BPF_EMIT_CALL(FUNC)
Helper function call
BPF_RAW_INSN(CODE, DST, SRC, OFF, IMM)
Raw BPF code
(INSN"IX36
Exit
These macros and arguments use abbreviations that may or may not be obvious. In
alphabetical order:
· 32: 32-bit
 64: 64-bit
• ALU: Arithmetic Logic Unit
1. BPF_LD_ABS() and BPF_LD_IND() have been left out as they are deprecated and included for mostly historica
reasons.
---
## Page 822
BPF Instructions
785
· DST: destination
• FUNC: function
• IMM: immediate value: a provided constant 
• INSN: instruction
dunl :dKf *
• LD: load
 LDX: load from register
 MAP_FD: map file descriptor
 MEM: memory
+ MOV:move
• OFF: offset
uoeado :d0 
• REG: register
•REL: relative
· ST: store
· SRC: source
• STX: store from register
Instructions
BPF instructions include those listed in Table E-2. (See the earlier header files for a complete list.)
Table E-2
Selected BPF Instructions, Fields, and Registers
Name
Type
Origin
Numeric
Description
BPF_LD
Instruction class
Classic
0x00
Load
BPF_LDX
Instruction elass
Classic
0x01
Load into X
BPF_ST
Instruction class
Classic
0x02
Store
BPF_STX
Instruction eclass
Classic
0x03
Store from X
BPF_ALU
Instruction class
Classic
0x04
Arithmetic Logic Unit
BPF_JMP
Instruction class
Classic
0x05
dunr
BPF_RET
Instruction class
Classic
0x06
Retum
BPF_ALU64
Instruction class
Extended
0x07
ALU 64-bit
---
## Page 823
786
Appendix E
Name
Type
Origin
Numeric
Description
BPF_W
Size
Classic
0x00
32-bit word
BPF_H
Size
Classic
0x08
16-bit half word
BPF_B
Size
Classic
0x10
q 19-8
BPF_DW
Size
Extended
0x18
64-bit double word
BPF_XADD
Store modifier
Extended
Oxc0
Exclusive add
BPF_ADD
ALU/ Jump operation 
Classic
0x00
Addition
BPF_SUB
ALU/Jump operation
Classic
0x10
Subtraction
BPF_K
ALU/Jump operand
Classic
0x00
Immediate value operand
BPF_X
ALU/Jump operand
Classic
0x08
Register operand
BPF_MOV
ALU/ Jump operation
Extended
Oxb0
Move register to register
BPF_JLT
Jump operation
Extended
0xa0
Unsigned jump less than
BPF_REG_0
Register number
Extended
0x00
Register 0
BPF_REG_1
Register number
Extended
0x01
Register 1
BPF_REG_10
Register number
Extended
0x0a
Register 10
Instructions are often composed of combinations of instruction classes and fields that are
bitwise OR'd together.
Encoding
The extended BPF instruction format is (struct bpf_insn):
Table E-3
Extended BPF Instruction Format
Opcode
Dest
Source
Signed offset
Signed Immediate Constant
Register Register
8-bit
8-bit
8-bit
16-bit
32-bit
So, for the fist instruction in the hello_world.c program:
BPF_M0V64_IMM (BPF_REG_1,_ 0xa21)
the opcode expands to:
BPF_AL064 I BPF_MOV 1 BPF_K
---
## Page 824
BPF Instructions
787
Referring to Tables E-3 and E-2, this opcode becomes 0xb7. The arguments to the instruction
set the destination register BPF_REG_1 (0x01) and the constant (operand) 0xa21. The result-
ing instruction bytes can be verified using bpftool(8):
: bpftool prog
[...]
907: kpzobe tag 9abf0e9561523153 gpl
loaded_at 2019-0108r23:22:00+0000 uid 0
xlated 128BJited 117Bnemlock 4096B
sepoodo L06 pT peaetx dunp 5oxd rooagdq 
265z = [x (cq]0
b7 01 00 00 21 0a 00 00
[x =(→-0[x] [ 9[n] 。 (q9] 
6b 1a fc ff 00 00 00 00
2:(b7) r1 = 1684828783
b7 01 00 00 6f 72 6c 64
[x = (s- 0↑x] I+ zEn| + (E9] ε
63 1a f8 ff 00 00 00 00
[ . - - ]
For tracing tools, much of the BPF instructions will be for loading data from structures and
Helper Functions" subsection under Section 2.3.6 in Chapter 2.
then calling BPF helper functions to store values in maps or emit perf records. See the *BPF
References
For more about BPF instruction-level programming, see the Linux source headers listed at the
start of this appenxdix and:
Documentation/networking/filter.txt [17]
●include/uapi/linux/bpf.h [184]
 Cilium’s *BPF and XDP Reference Guide° [19]
---
## Page 825
This page intentionally left blank
---
## Page 826
Glossary
ALU  Arithmetic logic unit: a subsystem
of a CPU that processes arithmetic
instructions.
API Application programming interface.
array  A variable type that consists of
a set of values, referenced by an integer
index.
associative array A collection of values
that are each assigned and retrieved
using a unique key.
BCC BPF Compiler Collection: an open
source software framework and toolkit
for using BPF. See Chapter 4.
bpftrace An open source BPF-based
tracer with a high-level programming
language. See Chapter 5.
BPF Berkeley Packet Filter: a light-
weight in-kernel technology from 1992
created for improving the performance
of packet filtering and extended since
2014 to become a general-purpose
execution environment (see eBPF).
BPF map An in-kernel BPF storage
object that is used to store metrics, stack
traces, and other data.
BTF  BPF Type Format. See Chapter 2.
buffer  A region of memory used to
store data, often temporary I/O data.
byte  A unit of digital data. This book
follows the industry standard where one
byte equals eight bits, and a bit is a zero