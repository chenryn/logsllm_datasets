# Flash内存管理与漏洞利用

作者：Hearmen  
单位：北京大学软件安全研究小组

## 目录
1. AVM2 虚拟机简介
2. CVE-2015-0313
3. CVE-2015-3043
4. CVE-2015-5119
5. 攻击演示

## AVM2 虚拟机简介
AVM2是当前Flash Player的核心，所有ActionScript 3代码均由AVM2执行。它采用了JIT（Just-In-Time）编译器和解释器混合执行的方式，大幅提升了Flash的运行效率。

### ActionScript 3 执行流程
1. **ActionScript 3代码** → **字节码**
2. **常量池初始化**
3. **堆栈初始化**
4. **JIT 编译器** 或 **解释器**
5. **机器语言**

## AVM2 内存管理
AVM2使用MMgc进行内存管理，采用延缓引用计数和标记/清除算法。从操作系统中申请大量保留空间，并按页交由垃圾回收机制（GC）管理。

### 堆结构
- **HeapBlock**：每个块大小为4KB。
- **GCHeap**：包含多个HeapBlock。
- **FreeLists**：用于存储空闲的HeapBlock。

## CVE-2015-0313
该漏洞通过`ByteArray.clear()`方法触发，利用步骤如下：
1. **堆喷射**：控制内存布局。
2. **触发漏洞**：更改Vector的`length`属性。
3. **任意地址读写**：布局shellcode。
4. **更改对象虚表**：接管程序运行流程。

### ByteArray
- **ByteArrayObject**：包含一个Buffer。
- **Buffer**：大小以4KB倍数增长，通过`FixedMalloc`进行内存分配。

### FixedMalloc
- **FixedMalloc::Alloc(size)**：根据大小选择分配方式。
  - `size < 4KB`：调用`FixedAlloc()`
  - `size >= 4KB`：调用`LargeAlloc(size)`

### 稳定性考虑
- 在`ByteArray.clear()`之前，会先释放GCHeap内存并将HeapBlock挂入freelist末尾，然后从freelist头部开始遍历进行内存分配。

## CVE-2015-3043
- **描述**：Flash在解析FLV文件中的Nellymoser压缩数据时，未正确检查buffer长度，导致堆溢出。
- **被溢出的对象大小**：0x2000。
- **漏洞出现次数**：两次。

### 内存布局
- **Vector**：存储数据。
- **Corrupt Buffer**：溢出区域。
- **Corrupt Obj**：受影响对象。

### 利用过程
1. **加载FLV文件**。
2. **重新布局**：调整内存布局。
3. **Object Vector**：使用GC::Alloc进行内存分配。

### 优雅的利用
- **No ROP**：无需返回导向编程。
- **AS完成操作**：使用ActionScript完成操作。
- **Bypass CFG**：绕过控制流保护。

### FunctionObject
- **Function.apply**、**Function.call** 和 **Function()**：函数调用方法。
- **Core可由FunctionObject查找**：通过`AS3_call`调用。

### Demo
- **完全使用AS代码**：操作API。
- **参数控制**：只能精确控制两个参数，调用的函数参数个数需为三或四。

## Flash_18_0_0_209/232
- **Vector长度验证**：增加长度验证。
- **隔离堆**：防止堆溢出。
- **强随机化**：提高安全性。

### 绕过验证
- **堆溢出**：利用String对象更改长度字段或起始指针。
- **任意地址读**：通过更改数据对象指针实现。
- **VectorObject**：更改数据对象指针，使用Cookie作为长度，交换Vector长度与Cookie。

谢谢！