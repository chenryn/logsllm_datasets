    bigFileUpload
    bigFileDownload
    getFileSize
    execCommand
    getOsInfo
    moveFile
    getPayload
    fileRemoteDown
    setFileAttr
从函数的名称可以看出，Godzilla webshell为远程系统导航、与远程系统之间的数据传输、远程命令执行和枚举提供了大量有效负载。
这些有效载荷将使用前面描述的密钥进行加密，操作软件将向包含数据的受损系统发送HTTP POST。
此外，如果我们检查`core/ui/component/dialog/ShellSetting.class`文件（如下所示），`initAddShellValue（）`函数包含远程网络访问的默认配置设置。因此，可以识别诸如静态HTTP头和用户代理字符串之类的元素，以帮助取证搜索web访问日志，寻找潜在的危害。
    private void initAddShellValue() {
    this.shellContext = new ShellEntity();
    this.urlTextField.setText("http://127.0.0.1/shell.jsp");
    this.passwordTextField.setText("pass");
    this.secretKeyTextField.setText("key");
    this.proxyHostTextField.setText("127.0.0.1");
    this.proxyPortTextField.setText("8888");
    this.connTimeOutTextField.setText("60000");
    this.readTimeOutTextField.setText("60000");
    this.remarkTextField.setText("??");
    this.headersTextArea.setText("User-Agent: Mozilla/5.0 (Windows NT
    10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language:
    zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\n");
    this.leftTextArea.setText("");
    this.rightTextArea.setText("");
    }
下面是web服务器访问日志的一个片段，其中显示了使用Curl应用程序并发送自定义URL负载以触发CVE-2021-40539漏洞的初始攻击。然后，它显示了Godzilla
webshell的后续访问，它已被初始Dropper放入硬编码路径中。通过查看用户代理，我们可以确定威胁攻击者从利用漏洞攻击到最初访问webshell的时间仅四多分钟。
    - /./RestAPI/LicenseMgr "-" X.X.X.X Y.Y.Y.Y POST [00:00:00] - - 200 "curl/7.68.0"
    - /help/admin-guide/reports.jsp "-" X.X.X.X Y.Y.Y.Y POST [+00:04:07] - - 200 "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0"
## 定制NGLite
NGLite是一个用Go语言编写的开源后门（特别是Go版本1.13）。它可以从公共GitHub存储库[下载](https://github.com/Maka8ka/NGLite)。NGLite是一种后门木马，只能运行通过其C2通道接收的命令。虽然这些功能是后门的标准功能，但NGLite使用了一种新颖的C2通道，该通道利用基于合法NKN的分散网络在后门和攻击者之间进行通信。
NKN鼓吹他们的分散网络使用公共区块链，可以支持数百万对等方之间的通信，每个对等方都由唯一的NKN地址而不是典型的网络标识符（如IP地址）标识。因此，NGLite工具在其C2通道中与之通信的即时IP地址只是分散网络中的对等地址，不太可能代表攻击者的网络位置。这种设计使得NGLite
C2通信信道的检测和预防变得困难。
幸运的是，将NKN用作C2通道的情况非常少见。我们总共只看到13个样本使用NKN通信——9个NGLite样本，还有4个与一个名为Surge的开源实用程序相关，该实用程序使用NKN进行文件共享。VirusTotal扫描了9个已知NGLite样本中的8个。四个未被检测到，三个被一个抗病毒病毒检测到，其余一个样本被五个抗病毒检测到。如此低的检测率表明NGLite在此次攻击活动中几乎没有防病毒覆盖。
如前一节所述，dropper创建注册表项并执行NGLite后门的自定义变量：
`SHA256:805b92787ca7833eef5e61e2df1310e4b6544955e812e60b5f834f904623fd9f`
它保存在以下路径： `C:\Windows\system32\ME\u ADAudit.exe`
基于Go语法的后门中的数据结构包含以下路径，用于在开发人员系统上存储此自定义NGLite变体的主要源代码：
`/mnt/hgfs/CrossC2-2.2/src/ng.com/lprey/main.go`
基于这条路径，有人可能会猜测，攻击者使用CrossC2构建了一个跨平台的Cobalt打击C2有效载荷；然而，我们并不认为该有效载荷实际上是基于CrossC2的，因为该有效载荷是公开可用的NGLite后门的定制版本。
攻击者可能将CrossC2控制系统串作为误导方向放入路径中，希望迷惑威胁分析人员，使他们认为他们正在交付Cobalt
Strike有效载荷。我们已经看到以下NGLite样本使用的源代码路径，可以追溯到8月11日，这表明该攻击者已经使用该工具几个月了：
    3da8d1bfb8192f43cf5d9247035aa4445381d2d26bed981662e3db34824c71fd
    5b8c307c424e777972c0fa1322844d4d04e9eb200fe9532644888c4b6386d755
    3f868ac52916ebb6f6186ac20b20903f63bc8e9c460e2418f2b032a207d8f21d
此攻击中使用的自定义NGLite样本检查了命令行参数中的`g`或`group`值。如果此开关不存在，有效负载将使用默认字符串`7AA7AD1BFA9DA581A7A044896279517EEF9357B81E406E3AEE1A66101FE824`，NGLite将其称为种子标识符。
有效负载将创建一个`prey
id`，该id通过连接系统网络接口卡（NIC）的MAC地址和IPv4地址生成，并用连字符（-）分隔这两个地址。该目标标识符将用于C2通信。
NGLite有效载荷将使用NKN分散网络进行C2通信。请参见下面示例中的NKN客户端配置：
该样本首先通过TCP/30003访问`seed.nkn[.]org`，具体来说是一个HTTP POST请求，其结构如下：
它还将发送HTTP POST请求，`monitor_03`作为目标id，如下所示：
`seed.nkn[.]org`服务器使用JSON中的`[prey id（MAC-IPv4）]`响应此请求，其结构如下：
    {"id":"nkn-sdk-go","jsonrpc":"2.0","result":{"addr":"66.115.12.89:30002","id":"223b4f7f4588af02badaa6a83e402b33dea0ba8908e4cd6008f84c2b98a6a7de","pubkey":"38ce48a2a3cffded7c2031514acaef29851ee39303795e4b3e7fce5a6619e6be","rpcAddr":"66.115.12.89:30003"}}
这表明有效负载将通过TCP/30003在`66.115.12.89`与对等方通信。然后，`seed.nkn[.]org`服务器用以下内容响应`monitor_03`请求，这表明有效负载将通过TCP/30003与`54.204.73.156`通信：
    {"id":"nkn-sdk-go","jsonrpc":"2.0","result":{"addr":"54.204.73.156:30002","id":"517cb8112456e5d378b0de076e85e80afee3c483d18c30187730d15f18392ef9","pubkey":"99bb5d3b9b609a31c75fdeede38563b997136f30cb06933c9b43ab3f719369aa","rpcAddr":"54.204.73.156:30003"}}
从`seed.nkn[.]org`获得响应后，负载将向JSON中`addr`字段中提供的IP地址和TCP端口发出HTTP
GET请求。这些HTTP请求如下所示，但请记住，这些系统不是由攻击者控制的；相反，它们只是最终将返回攻击者内容的对等链中的第一个对等：
最终，自定义NGLite客户端和服务器之间的网络通信使用AES加密，密钥如下： `WHATswrongwithUu`
自定义NGLite样本将首先向C2发送一个初始信标，该信标包含whoami命令的结果，还有字符串`#windows`，如下所示：
`[username]#windows`
发送初始信标后，NGLite示例将运行一个名为`Preylistener`的子函数，该函数创建一个侦听入站请求的服务器。该样本还将侦听入站通信，并尝试使用默认AES密钥`1234567890987654`对其进行解密。它将通过Go方法`os/exec.command`以命令的形式运行解密的内容。然后使用相同的AES密钥对结果进行加密并发送回请求者。
## 攻击之后
在破坏网络后，威胁攻击者迅速从最初的立足点转移到目标网络上的其他系统，通过其NGLite负载和Godzilla
webshell运行命令。在获得对初始服务器的访问权后，攻击者集中精力从本地域控制器收集和过滤敏感信息，例如Active
Directory数据库文件（`ntds.dit`）和注册表中的系统配置单元。不久之后，我们观察到攻击者正在安装KdcSponge凭证窃取程序，这个我们将在下面详细讨论。最终，参与者感兴趣的是窃取凭据、维护访问权限以及从受害者网络收集敏感文件进行过滤。
## 凭证获取和KdcSponge
在分析过程中，Unit42发现了一些日志，这些日志表明攻击者使用PwDump和内置的`comsvc.dll`创建了`lsass.exe`进程的小型转储，用于凭证窃取；然而，当攻击者希望从域控制器窃取凭据时，他们安装了自定义工具，我们跟踪该工具为
**KdcSponge** 。
KdcSponge的目的是从LSASS进程中钩住API函数，从通过Kerberos服务（“KDC服务”）进行身份验证的入站尝试中窃取凭据。KdcSponge会将域名、用户名和密码捕获到系统上的一个文件中，然后攻击者会通过对服务器的现有访问手动过滤该文件。
我们知道有两个KdcSponge样本，它们都被命名为`user64.dll`。它们具有以下SHA256哈希：
    3C90DF0E02CC9B1CF1A86F9D7E6F777366C5748BD3C4070B49460B48B4D4090
    b4162f039172dcb85ca4b85c99dd77beb70743ffd2e6f9e0ba78531945577665
要启动KdcSponge凭据窃取程序，攻击者将运行以下命令加载并执行恶意模块： `regsvr32/s user64.dll`
在第一次执行时，`regsvr32`应用程序运行`user64.dll`导出的`DllRegisterServer`函数。`DllRegisterServer`函数解析`sfc_os.dll`中的`SetSfcFileException`函数，并尝试在`c:\Windows\system32\kdcsvc.dll`文件上禁用Windows文件保护（WFP）。然后，它尝试通过以下方式将自身注入正在运行的`lsass.exe`进程：
  1. 使用`OpenProcess`打开`lsass.exe`进程。
  2. 使用`VirtualAllocEx`在远程进程中分配内存。
  3. 使用`WriteProcessMemory`将字符串`user64.dll`写入分配的内存。
  4. 使用`RtlCreateUserThread`，在`lsass.exe`进程内以`user64.dll`作为参数调用`LoadLibraryA`。
现在`user64.dll`正在`lsass.exe`进程中运行，它将首先创建以下注册表项，以通过系统重新启动建立持久性：
    HKEY\U LOCAL\U MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce\KDC服务：regsvr32/s user64.dll
从这里开始，样本将通过尝试获取以下模块之一的句柄来确保系统正在运行Kerberos服务：
    kdcsvc.dll
    kdccli.dll
    Kdcsvs.dll
KdcSponge尝试使用以下三种方法定位三个未记录的API函数——特别是`KdcVerifyEncryptedTimeStamp`、`KerbHashPasswordEx3`和`KerbFreeKey`：
  1. 标识Kerberos模块的版本，并使用API函数的硬编码偏移量进行挂钩。
  2. 联系Microsoft的symbol server以查找Kerberos模块中API函数的偏移量，并通过与硬编码字节序列进行比较来确认正确的函数。
  3. 在Kerberos模块中搜索硬编码字节序列。
KdcSponge定位要挂接的API函数的主要方法是基于可移植可执行文件（PE）的`IMAGE_FILE_HEADER`部分中`TimeDateStamp`来确定Kerberos模块的版本。一旦确定了Kerberos模块的版本，KdcSponge就具有硬编码的偏移量，它将使用这些偏移量在该版本的模块中钩住适当的函数。KdcSponge查找以下TimeDateStamp值：
    2005-12-14 01:24:41
    2049-10-09 00:46:34
    2021-04-08 07:30:26
    2021-03-04 04:59:27
    2020-03-13 03:20:15
    2020-02-19 07:55:57
    2019-12-19 04:15:06
    2019-07-09 03:15:04
    2019-05-31 06:02:30
    2018-10-10 07:46:08
    2018-02-12 21:47:29
    2017-03-04 06:27:32