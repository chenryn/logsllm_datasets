values (v1, . . . , vn) with vi ∈ {0, 1}(cid:2)v, denoted Map[k]. It
supports the following operations.
• Size: Map.Size(k) → n. On input a key k, Map.Size outputs
the number of values in the list Map[k].
• Find: Map.Find(k, i, j) → (vi, . . . , vj). On input a key k,
start index i, and end index j (no less than i), Map.Find
outputs the values between locations i and j (included) in
the list Map[k]; any requested location beyond the end of the
list Map[k] is answered with the value v := ⊥. (In particular,
the answer always consists of j − i + 1 values.)
• Insert: Map.Insert(k, v) → ⊥. On input a key k and value v,
Map.Insert adds v to the list Map[k] (if not already present),
keeping its values sorted.
• Delete: Map.Delete(k, v) → b. On input a key k and value
v, Map.Delete removes v from the list Map[k], and outputs
1 if v was present and 0 if not.
B. Deﬁnition of OSM schemes
An OSM scheme is a tuple OSM := (Init, Find, Insert,
Delete, S) that contains algorithms for two parties, the OSM
client and the OSM server. The OSM client uses Init to initialize
the scheme with a given sorted multimap; subsequently, he may
use Find to retrieve sublists associated with a given key, as
well as use Insert and Delete to modify such lists. All of these
algorithms require interaction with the OSM server, which runs
the interactive algorithm S. We represent this interaction by
treating S as an oracle.
(Map) → st. On input a sorted
• Initialization: OSM.InitS
multimap Map, OSM.Init interacts with S in order to store
at S an “encryption” of Map, and then outputs a local state
st (to be stored by the OSM client).
• Find: OSM.FindS
The semantics of the following operations are the same as
the corresponding Map operations, where Map is the sorted
multimap stored encrypted at S by OSM.Init.
(mut st, k) → n. On input local state st
• Size: OSM.SizeS
and key k, OSM.Size interacts with the server S and then
outputs an integer n.
(mut st, k, i, j) → (vi, . . . , vj). On input
local state st, key k, start index i, and end index j (no less
than i), OSM.Find interacts with S and then outputs a list
of j − i + 1 values (vi, . . . , vj).
• Insert: OSM.InsertS
(mut st, k, v). On input local state st,
(mut st, k, v) → b. On input local state
st, key k, and value v, OSM.Delete interacts with S and then
outputs a bit b.
key k, and value v, OSM.Insert interacts with S.
• Delete: OSM.DeleteS
Correctness. Correctness of an OSM scheme is deﬁned via
two experiments. In the real world experiment, the adversary
has access to an oracle CReal that implements the OSM client.
In the ideal world experiment, the adversary has access to an
oracle CIdeal that implements a (plaintext) sorted multimap.
Both oracles expose to the adversary the same interface of
possible queries (Init, Size, Find, Insert, Delete). See
Fig. 3 for details on how CIdeal and CReal generate their
answers. An OSM scheme is correct if no efﬁcient adversary
A can distinguish between these oracles, i.e., ACReal and ACIdeal
are computationally indistinguishable as distributions.
283
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
CReal
Init(m, Map) store st ← OSM.InitS
(m, Map)
Correctness
CIdeal
Size(k) OSM.SizeS
Find(k, i, j) OSM.FindS
Insert(k, v) OSM.InsertS
Delete(k, v) OSM.DeleteS
(mut st, k) → n
(mut st, k, i, j) → #—v Map.Find(k, i, j) → #—v
Map.Insert(k, v) → ⊥
(mut st, k, v)
Map.Delete(k, v) → b
(mut st, k, v) → b
store Map
Map.Size(k) → n
Security
SReal
store st ← OSM.InitS
OSM.SizeS
OSM.FindS
OSM.InsertS
OSM.DeleteS
(Map)
(mut st, k) → n
(mut st, k, i, j) → #—v
(mut st, k, v)
(mut st, k, v) → b
(m, (cid:2)k, (cid:2)v)
SIdeal
store st ← Sim.InitS
Sim.SizeS
Sim.FindS
Sim.InsertS
Sim.DeleteS
(mut st)
(mut st)
(mut st, j − i + 1)
(mut st)
Figure 3: Correctness and security oracles for an OSM scheme. Oracle outputs are highlighted.
Security. Security of an OSM scheme is deﬁned via two
experiments. In the real experiment, the adversary has access
to an oracle SReal that runs the OSM client and outputs nothing.
In the ideal experiment, the adversary has access to an oracle
SIdeal that runs a simulator Sim that receives only certain
subsets of the inputs. Both oracles expose to the adversary
the same interface of queries (Init, Size, Find, Insert,
Delete), and the adversary gets to observe all communication
of the oracles with the server S and all server state. See Fig. 3
for details on how SReal and SIdeal generate their answers.
An OSM scheme is secure if no efﬁcient adversary A can
distinguish between these oracles, i.e., ASReal and ASIdeal are
computationally indistinguishable as distributions.
C. Construction of an OSM scheme
First, we explain why oblivious maps from prior works
[55, 74] are not suitable for realizing OSM schemes; then, we
informally describe our construction of an OSM scheme. In
Appendix A we provide the detailed construction, including
pseudocode and proofs of correctness and security.
Insufﬁciency of oblivious maps. Suppose that, given a sorted
multimap that associates keys k to sorted lists (v1, . . . , vn),
we construct a (standard) map by associating new keys
(k, 1), . . . , (k, n) to the values v1, . . . , vn respectively. Search-
ing is simple: to ﬁnd the values of a key k at indices i, . . . , j,
we fetch from the map the values associated to (k, i), . . . , (k, j).
However, if we want to insert, for a key k, a new value v(cid:7) that
is smaller than all other values in the list of k, we need to shift
every key “to the right”: (k, t) must become (k, t + 1) for every
t ∈ {1, . . . , n}. This entails Ω(n) oblivious accesses, which is
expensive; even worse, doing so leaks the size of the list. Hiding
this leakage would require padding to the worst-case size of a
list, thereby making this idea even more expensive. (Indeed,
some keys might have very large lists, e.g., proportional to
the number of documents in a database!) Our approach below
sidesteps these issues by implicitly constructing a (sub-)tree
over each key’s list, ensuring that insertions have logarithmic
complexity and reveal only the total number of key-value pairs
in the map (and thus do not reveal the list’s size).
Our OSM construction. We directly construct an OSM
scheme in the oblivious data structure (ODS) framework of
[74], summarized in Section III-B. This involves two steps:
(i) construct a plaintext data structure having tree-like memory
accesses, and (ii) replace its memory accesses with oblivious
counterparts deﬁned by the ODS framework. Recall (from
Deﬁnition 1) that an access pattern is tree-like if every data
structure operation starts from a distinguished root node, and
the graph arising from following pointers during its execution
forms a tree (there is a unique path from the root node to
all other nodes). Below we describe at a high level how to
complete the ﬁrst of the two steps (the more interesting one).
A tree-like sorted multimap. We extend AVL search trees to
store multiple values for the same key, and borrow techniques
from order statistic trees to efﬁciently retrieve the i-th value
of a given key.
An AVL search tree is a balanced binary search tree that
implements a simple map from keys to values; it supports
searches, inserts, and deletes in worst-case logarithmic time
(via its worst-case logarithmic height). Each node in the tree
stores a key and a value; each key appears in at most one node.
(In particular, when inserting a key-value pair (k, v), if a node
with key k already exists, its value is simply overwritten to v.)
In contrast, we need a sorted multimap, which maps a key to
a sorted list of values. We still consider nodes that store a key
and a value (and other information described below), but now
allow multiple nodes to share the same key. Some operations
almost directly follow from AVL trees: (a) when inserting a
key-value pair (k, v) not already in the tree, we insert a new
new node for (k, v) via AVL tree insertion while treating the
pair (k, v) as a key; (b) deletions mirror insertions; (c) search
can be modiﬁed to retrieve the list of values associated with
a key (instead of just a single value). However, the foregoing
modiﬁcations fall short of enabling retrieval of arbitrary sublists
of the list corresponding to a key (without retrieving the full
list), as needed in a sorted multimap. To do this, we incorporate
techniques from order statistic trees, as we discuss next.
In an order statistic binary search tree, each node also stores
the number of nodes in each (left and right) child subtree. This
information can be used to efﬁciently ﬁnd the node with the
i-th smallest key and to augment AVL insertions and deletions
to maintain this information. (See [15, Chapter 14].)
We modify this approach to obtain AVL-based sorted
multimaps in which one can efﬁciently ﬁnd a key’s i-th value,
and thus also any sublist of values. Informally, a node with key
k stores the number of nodes that also have key k in each child
subtree (rather than all nodes, potentially with different keys, in
those subtrees); see Fig. 4. Straightforward modiﬁcations to the
insertion and deletion procedures ensure that this information
is maintained across operations. It is not hard to verify that
the resulting data structure has tree-like accesses, as required.
Correctness of the foregoing approach is reducible to the
correctness of AVL search trees and order statistic trees (our
284
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
modiﬁcations are minor). Insertions and deletions take time
O(log(n)), while ﬁnding the i-th through j-th values for a key
requires time O(log(n) + j − i).
key
value
l_same_key_size
r_same_key_size
l_child_ptr
r_child_ptr
Figure 4: Information stored in a node in our OSM construction.
Below we summarize operations for the sorted multimap
(with tree-like accesses) outlined above. Due to space reasons,
we omit a description of deletions; analogously to inserts, these
can be achieved via suitable modiﬁcations of AVL tree deletion.
• Size(k): Depth-ﬁrst search for k until the ﬁrst k-node, which
stores the total number of k-nodes in the tree, and return this
number. (Compare: in order statistic trees, the root stores
the number of nodes in the tree.)
• Find(k, i, j): Find paths to the i-th and j-th k-nodes and
fetch all k-nodes in the subtree bounded by these.
1) Find path to s-th k-node: Find the s-th smallest node
in the order statistic subtree consisting only of k-nodes.
That is, run a depth-ﬁrst search for k as follows. When
visiting a k(cid:7)-node with k(cid:7) (cid:8)= k, recursively search the left
subtree (if k  k(cid:7)). When
visiting a k-node, letting l be the number of k-nodes in its
left subtree: if s  l, set
s := s − (l + 1) and recursively search the right subtree.
2) Retrieve nodes: Find the node at which the paths to the i-
th and j-th k-nodes diverge and run a breadth-ﬁrst search
from this node by considering only k-nodes. That is, add
to the BFS queue only nodes that are no less than the i-th
k-node and no greater than the j-th k-node (to compare
two nodes, ﬁrst compare their keys and, if equal, compare
their values). Return the resulting set of k-nodes.
• Insert(k, v): Search for the node where insertion must occur;
if this node already exists, then we are done; otherwise,
create a new node and make it the appropriate child of
the previously-visited node. Then retrace the path from the
inserted node back to the root, rebalancing as needed. The
rebalancing procedure is a modiﬁcation of order statistic
AVL trees that ensures that the size information of visited
k-nodes is correctly updated (at each step of retracing, we
store the number of k-nodes seen thus far and, if the node at
the current step is a k-node, then we rebalance and update
the size of the appropriate child subtree).
We remark that our OSM construction above (coupled with
padding as discussed below) already provides a search index
that does not leak access patterns without relying on hardware
enclaves: the client stores the OSM state locally and interacts
with the remote server over the network for each OSM
operation. Leveraging hardware enclaves will enable better
performance and support for multiple users.
V. DOUBLY-OBLIVIOUS PRIMITIVES
We describe how to design client algorithms for Path ORAM,
ODS, and OSM that are themselves oblivious. We refer to the
285
resulting cryptographic primitives as doubly-oblivious because
not only are the client’s accesses to the server’s memory
oblivious, but also the client’s accesses to its own local memory
are oblivious. This requirement arises when running the ORAM
client inside a hardware enclave at the server because, as
discussed in Section II-A, the enclave does not hide access
patterns to this encrypted memory. Path ORAM (Section III-A),
ODS (Section III-B), and OSM schemes (Section IV) already
guarantee that the client’s accesses to external memory are
oblivious, but in current constructions the client’s accesses to
internal memory are not oblivious.
One can trivially make accesses to internal memory oblivious
by replacing each such access with a linear scan. However,
such an approach yields expensive solutions, and the challenge
lies in designing alternatives that, ideally, are almost as efﬁcient
as the original client algorithm.
In the next few sub-sections we explain how we design
efﬁcient data-oblivious client algorithms for Path ORAM
(Section V-A), ODS (Section V-B), and OSM schemes (Sec-
tion V-C). Table I summarizes the costs of the (standard) client
algorithms and the data-oblivious variants that we use. Our
experiments demonstrate that the overheads that arise from
double obliviousness are small (see Sections VI-A and VI-B).
A. Doubly-oblivious RAM
We now provide intuition for our construction of path doubly-
oblivious RAM (Path DORAM). We begin by describing our
construction of DORAM.ReadBlock and DORAM.Evict, and
then describe our DORAM.Init algorithm. Pseudocode for these
algorithms is provided in Appendix D.