title:Improving Computer Security Using Extended Static Checking
author:Brian Chess
Improving Computer Security using Extended Static Checking
Brian V. Chess
Department of Computer Engineering
University of California, Santa Cruz
Abstract
We describe a method for ﬁnding security ﬂaws in
source code by way of static analysis. The method is no-
table because it allows a user to specify a wide range
of security properties while also leveraging a set of pre-
deﬁned common ﬂaws. It works by using an automated
theorem prover to analyze veriﬁcation conditions gen-
erated from C source code and a set of speciﬁcations
that deﬁne security properties. We demonstrate that the
method can be used to identify real vulnerabilities in real
programs.
1 Introduction
A large percentage of the documented vulnerabilities
in computer systems have been introduced by program-
mers as they created or modiﬁed the source code for var-
ious system components [17]. A majority of these ﬂaws
fall into one of only a few major categories, with array
bounds errors and race conditions being among the most
common.
The primary contribution of this paper is to demon-
strate that many common types of security ﬂaws can
be detected through the application of extended static
checking [7], a technique developed for the general
problem of ﬁnding errors in source code at compile-
time. We have created a prototype checker, named
Eau Claire, capable of analyzing source code written in
C. (Previous extended static checkers have analyzed pro-
grams written in Modula-3 [7] and Java [20].) In order to
evaluate the source code, Eau Claire reads speciﬁcations
that deﬁne security properties. Eau Claire represents the
ﬁrst application of extended static checking to the spe-
ciﬁc problem of identifying security vulnerabilities.
Eau Claire is ﬂexible enough that an experienced user
can specify a wide variety of properties. At the same
time, a novice user could ﬁnd a number of common se-
curity ﬂaws by making use of a library of pre-written
speciﬁcations. Speciﬁcations are particularly powerful
when they are re-used. Information recorded in the form
of speciﬁcations during a program inspection can greatly
beneﬁt future inspections.
Eau Claire analyzes programs written in C because
it remains the most popular language for writing system
software. Eau Claire handles C programs involving inte-
gral and aggregate types, arrays, pointers, pointer arith-
metic, most control structures, and function calls. It can
analyze modular programs: not all functions need to be
deﬁned in the source code being analyzed. Among the
things it does not model are function pointers and bit-
wise operators. The presence of these constructs does
not force Eau Claire to give up on a program as a whole.
Instead, it gives warnings about functions that contain
unmodelled constructs and suggests that the analysis of
these functions may be compromised.
Eau Claire works by translating a program’s source
code into a series of veriﬁcation conditions and present-
ing the veriﬁcation conditions to an automatic theorem
prover. Although it makes use of a theorem prover,
Eau Claire is not a program veriﬁer. The purpose of an
extended static checker is only to look for certain types
of errors, not to prove that a program is correct. Set-
ting the goal to be less than a full proof of correctness
is very liberating; by not promising to ﬁnd all errors, we
are free to look for a good balance between the number
and importance of the errors that are found and the bur-
den of running the checker. This approach puts practi-
cality ﬁrst. While not calling into question the undecid-
able nature of the underlying problems, we present evi-
dence that it is possible to automate the process of ﬁnd-
ing many types of security ﬂaws. Part of being practical
is being willing to give up soundness. By not requiring
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
C source code
Vulnerability
specifications
Translation
phase 1
Guarded
Commands
Translation
phase 2
Verification
condition
User
feedback
Simplify
theorem
prover
Figure 1. The checking process implemented by Eau Claire.
a perfect answer in all cases, Eau Claire can produce a
useful answer in most cases.
Since Eau Claire creates an independent veriﬁcation
condition for each function in the target program, its ex-
ecution time is the sum of the times required to process
each function. Empirical evidence suggests that, on av-
erage, Eau Claire is 25 times slower than the compiler
gcc. That makes it too slow to be run with every com-
pile as part of the typical development process but fast
enough to be a standard part of the release process. We
expect that most users will begin by using pre-written
speciﬁcations for C standard library functions and then
begin to write their own speciﬁcations as they gain ex-
perience.
Section 2 dives into the details of the checking pro-
cess that Eau Claire implements, and Section 3 describes
the results of applying Eau Claire to two programs with
known security vulnerabilities. In one case, Eau Claire
shows that a vulnerability that was supposed to have
been ﬁxed actually still exists (a previously unknown
result). Section 4 provides a context for this work by
describing other recent efforts near the intersection of
security and static checking.
2 Method
Figure 1 gives a top-level view of how Eau Claire
works.
It ﬁrst translates a C function and the rele-
vant speciﬁcations into a variation of Dijkstra’s Guarded
Commands [9].
It then translates the Guarded Com-
mands into a veriﬁcation condition. Finally, it presents
the veriﬁcation condition to the automatic theorem
prover Simplify [8, 28].
If Simplify refutes the theo-
rem, then the associated function is in violation of one
or more of the speciﬁcations. The veriﬁcation conditions
are generated in such a way that the counterexample pro-
vided by Simplify contains enough information that the
user can track down the source of the mismatch.
The ﬁrst step, the translation of C into Guarded Com-
mands, requires a concrete interpretation of the some-
times vague semantics of the C language. This is the
primary point at which Eau Claire gives up soundness in
favor of ease of use. The second step, the translation of
Guarded Commands into a veriﬁcation condition, does
not suffer thusly because the semantics of the Guarded
Command language are well deﬁned.
Sections 2.1 and 2.2 introduce Eau Claire’s Guarded
Command language and speciﬁcation language. Sec-
tions 2.3 and 2.4 discuss the translation of C into
Guarded Commands and the translation of Guarded
Commands into a veriﬁcation condition.
2.1 Guarded Commands
Dijkstra created the Guarded Command program-
ming language so that he could describe non-trivial al-
gorithms and analyze them in a formal manner. Guarded
commands are a useful midway point between a C func-
tion and a veriﬁcation condition because they retain the
sequential and imperative nature of C, but their seman-
tics are deﬁned rigorously, making it possible to con-
struct a theorem from Guarded Commands in a straight-
forward and sound manner. Eau Claire’s guarded com-
mand language contains several concepts not found in
Dijkstra’s original language including exceptions [21],
assert and assume statements [1], and the concept of
the erroneous state [19].
It also omits several major
constructs that were part of the original language in-
cluding restriction, conditionals, looping, and the guards
that gave the language its name. Since loops are not
available, the following discussion assumes that all com-
mands terminate; there is no notion of an inﬁnite loop.
The semantics of a command are given by its weak-
est precondition. When a machine halts after execut-
ing a guarded command, the machine’s ﬁnal state can be
characterized as normal, exceptional, or erroneous. The
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
Command
Example
Skip
ki
Raise
aie
Assume
a	eR
Assert
aeR
Assignment
x := v
Composition
A ; B
Exception
handling
A ! B
Alternation
A B
Description
Halt in a normal state, otherwise, do not modify the state of the
machine. In order for  to evaluate to true after the execution of
ki, it must evaluate to true before the execution of ki.
Halt in an exceptional state, otherwise, do not modify the state of
the machine. In order for 	 to evaluate to true after the execution
of aie, it must evaluate to true before the execution of aie.
If the predicate R evaluates to true, then halt in a normal state.
If R does not evaluate to true, then the statement cannot be exe-
cuted.
If the predicate R evaluates to true, halt in a normal state. Other-
wise halt in an erroneous state (go wrong).
Set the variable x to the value v. The notation  x : v represents
the predicate  with all occurrences of x replaced by v.
Execute the command A, then execute the command B provided
that A halted in a normal state.
Execute the command A, then execute the command B provided
that A halted in an exceptional state.
Weakest Precondition
wki; ; 	 (cid:17) 
waie; ; 	 (cid:17) 	
wa	eR; ; 	 (cid:17)
R  
waeR; ; 	 (cid:17)
 ^ R
wx := v; ; 	 (cid:17)  x : v
wA ; B; ; 	 (cid:17)
wA; wB; ; 	; 	
wA ! B; ; 	 (cid:17)
wA; ; wB; ; 	
Execute either command A or command B, selecting between the
two in a nondeterministic manner.
wA B (cid:17)
wA; ; 	 ^ wB; ; 	
Table 1. Eau Claire’s Guarded Command language.
command’s weakest precondition describes the required
state of the machine before the execution of the com-
mand that is necessary to achieve a desired ﬁnal state.
More formally, consider a command A and predicates
 , 	, and W that relate to the state of the machine ex-
ecuting A. The weakest precondition for the command,
wA; ; 	; W , is a predicate describing the state of
the machine prior to the execution of A so that  , 	, or
W will evaluate to true subsequent to the execution of
A. In particular,  will evaluate to true if the machine
halts in a normal state, 	 will evaluate to true if the ma-
chine halts in an exceptional state, and W will evaluate
to true if the machine halts in an erroneous state. Halt-
ing in an erroneous state is also known as going wrong.
Eau Claire uses going wrong to represent a speciﬁcation
violation. Since the purpose of the theorem being gen-
erated is to argue that no speciﬁcation violation exists,
the fourth argument to the wp function, W , will always
be false (satisﬁed by no machine state). We will there-
fore omit it from the remaining formulas in the interest
of clarity. Table 1 gives the commands that comprise
Eau Claire’s Guarded Command language.
In many languages (including C) a semicolon denotes
the end of a statement, and the body of a function con-
sists of a sequence of statements. With Guarded Com-
mands, the semicolon represents a statement that is used
to sequentially compose two other statements. The lan-
guage does not need a conditional construct; a combi-
nation of alternation and assume statements can be used
instead. For example, the compound C statement
if (x > y)
z = 0;
else
z = 1;
can be represented as
( assume(x > y); z := 0)
( assume(:(x > y)); z := 1)
The nondeterminism of the alternation statement
is
tamed by fact that an assume statement cannot be ex-
ecuted if its predicate does not evaluate to true. The
machine is forced to choose a path that it can execute.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
spec (function name)(formal argument names)
f
requires (precondition expression): "(violation message)"
modifies (list of variables)
ensures (postcondition expression): "(violation message)"
g