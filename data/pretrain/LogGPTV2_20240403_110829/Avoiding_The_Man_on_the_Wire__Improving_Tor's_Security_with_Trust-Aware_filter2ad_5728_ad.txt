(i.e., relay families, AS organizations, and IXP organizations)
that are each independently compromised. We implement the
API functions as follows:
• LOCATIONDISTANCE(loc1, loc2, relays, weights): To com-
pute this, consider each r ∈ relays. Let E1 be the set of
network entities that exist between r and both loc1 and
loc2, let E2 be the set of network entities that exist only
between r and loc1, and let E3 be the set of network
entities that exist only between r and loc2. Let pr be the
probability that the adversary is present on one of the paths
from r to loc1 and loc2 but not the other. pr is simply the
probability that (i) no e ∈ E1 is compromised and (ii)
either some e ∈ E2 is compromised and no e ∈ E3 is
compromised or vice versa. The distance is computed as
the weights-weighted sum of pr over r ∈ relays.
• GUARDSECURITY(client loc, guards): Let E be the set of
network entities between client loc and the guards. The
security score computed as the product of the probabilities
that each e ∈ E is individually uncompromised.
• EXITSECURITY(client loc, dst loc, guard, exit): Let E1 be
the set of network entities that exist both between
client loc and guard and between dst loc and exit, let
E2 be the set of network entities that exist only between
client loc and guard, and let E3 be the set of network
entities that exist only between dst loc and exit. The
security score is the product of the probability that no
e ∈ E1 is compromised and that either no e ∈ E2 is
compromised or no e ∈ E3 is compromised.
For the Countries policy, the trust API functions need
the list of all countries as well as a data structure map-
ping each relay to its country and each virtual
link to
the countries it passes through. LOCATIONDISTANCE(loc1,
loc2, relays, weights) is just a weighted sum over r ∈ relays of
the number of countries on which the virtual links {loc1, r}
and {loc2, r} disagree. GUARDSECURITY(client loc, guards)
returns the fraction of countries not containing guards or
on the virtual links between client loc and guards. EXIT-
SECURITY(client loc, dst loc, guard, exit) returns the fraction
of countries either not containing guard and not on the
{client loc, guard} virtual link or not containing exit and not
on the {dst loc, exit} virtual link.
F. Discussion
So far, we have been discussing trust-aware routing to
destination IP addresses. Many or most connections will
require DNS resolution before the destination IP is known.
Exit relays resolve DNS requests in current Tor routing to
prevent linking of client IP address directly to a destination
DNS request. This must also be done in a trust-aware manner,
or there is little point in using trust-aware routing from exit
to destination once the IP address is known. If we rely on
a chosen exit to control the DNS resolution, then, even if
it shares the default trust values, it may not be a good exit
for resolving the intended destination. When doing iterative
DNS resolution from the client, possibly switching to new
circuits depending on the next identiﬁed DNS resolver, the
performance overhead could be signiﬁcant. In this paper, we
assume that primary and backup nameserver ASes are included
with exit-relay descriptors. Assuming that these are typically in
the same AS as or immediately adjacent to the exit, this will
at least make sure that initial DNS requests are trust-aware.
How best to address DNS issues beyond that is outside the
scope of this paper.
We expect
the CLUSTER process to be performed by
organizations (e.g., Tor or EFF) and the results distributed
to users who trust their analysis and calculations. End-users
would then only need to perform the CONNECT process. In the
case of TrustAll, security depends on the assumption that many
other users are using the same policy. Therefore, the TrustAll
CONNECT process could be integrated with the standard Tor
release and enabled with a default policy (e.g., The Man or
Countries). However, TrustOne was designed to be used by a
minority of users, and while the algorithm could be included
with Tor, it would not be enabled by default. We analyze the
security and performance of both approaches in the following
sections.
VI. SECURITY ANALYSIS
A. Experimental Setup
We experimentally evaluate the security of the TrustAll
and TrustOne algorithms against The Man using an Internet
map, data about the Tor network, and path-selection simulators
for TAPS and for vanilla Tor. The AS-level routing map and
past state of the Tor network are constructed as described
in Sec. II-A, but for these experiments we use data from
December 2013.
We augment the routing map using sibling information
based on RIPE WHOIS records. We identify IXPs and place
them on these on the AS-level paths using data from the IXP
mapping project [7]. We group ASes into commercial organi-
zations using the results of Cai et al. [9]. We conservatively
group IXPs into organizations based on similarities in their
listings in the Packet Clearing House and PeeringDB (see [22]
for details).
We simulate path selection on past Tor networks using the
Tor Path Simulator (TorPS) [22]. TorPS provides Monte Carlo
simulation of user circuit creation over weeks and months on
the changing Tor network. Each TorPS sample consists of
a sequence of circuits and assignments to those circuits of
requested user connections over the period of simulation. We
use TorPS unmodiﬁed to evaluate the security of vanilla Tor,
and we also modify TorPS to use the TAPS path selection
algorithms.
We perform our TorPS simulations for two models of user
behavior: the Typical model, and the IRC model. Johnson et
al. describe these models in detail [22]. The Typical model
consists of four 20-minute user traces obtained from actual
(volunteer) user activity over Tor: (i) Gmail / Google Chat, (ii)
Google Calendar / Docs, (iii) Facebook, and (iv) web search
activity. It includes 205 unique destination IPs and uses TCP
ports 80 and 443. These traces are played every day in ﬁve
sessions between 9 a.m. and 6 p.m. This results in 2632 TCP
connections per week. The IRC model uses the trace of a
single IRC session to irc.oftc.net on port 6697, which
9
we observe to resolve to 82.195.75.116 in AS 8365 (TU
Darmstadt, DE). This model repeatedly plays the trace 8 a.m.
to 5 p.m. every weekday. This results in 135 TCP connections
per week.
To evaluate security with respect to The Man, we use it to
draw a sample of the compromised relays and virtual links for
each TorPS sample and consider the security of that sampled
path-selection behavior against that sampled adversary. That
is, we independently assign a compromised status to each
AS organization, IXP organization, and relay family using
the probabilities given in Section IV. We then consider the
anonymity of the circuits in the TorPS sample against the
sampled adversary. We run simulations over the ﬁrst week of
December 2013. We use 3 guards for all simulations.
B. Location Clusters
The TrustAll algorithm prevents the chosen Tor paths from
revealing client and destination locations beyond their location
clusters. An adversary that can identify the relays in each
position of a circuit (e.g., by running a relay and being selected
as a middle) may use them as evidence for the clusters of
the client and destination. For example, if the adversary is
also observing the exit-destination link, it may be the case
that a given guard and exit would only be used to visit that
destination by members of a given client cluster. As was
shown in Section II, this is an especially powerful attack if the
adversary can additionally link together multiple connections
as belonging to the same (pseudonymous) user.
Thus we must consider the anonymity that is afforded when
a client or destination is known to belong to a given cluster.
In our experiments, we partition all Internet ASes into 200
clusters. This number of clusters allows for signiﬁcant diversity
in cluster behavior while reducing the anonymity set of roughly
3.7 billion addresses in IPv4 by a factor of 200. We perform
clustering using as the guard and exit locations the sets of
ASes in which Tor guards and exits were observed to reside
during the six-month period from June 2013 to November
2013, which precedes the simulation period in December 2013.
Following the cluster-formation algorithm given in Sec-
tion V, the 200 client clusters are created by choosing as
cluster representatives the top 200 Tor client ASes reported by
Juen [23]. In the resulting clustering, the median cluster size
in terms of contained addresses is 11,363,072, the minimum
size is 10,840,321, and the maximum size is 118,966,528.
Also as described in Section V,
the destinations clusters
were formed slightly differently, using k-medoids clustering
to identify representatives that were best able to minimize
distances between cluster members and their representatives.
The clusters that were the output of this process had a median
of 11,992,641 IPv4 addresses, with a minimum of 11,358,466
and a maximum of 119,068,928. Our clustering algorithm
sought to maximize the number of addresses contained in
each cluster, but it could easily incorporate other anonymity
concerns, such as AS or country diversity.
C. TrustAll Security
First we consider security against The Man when all
users use TAPS as the default path-selection algorithm (i.e.,
TrustAll). In particular we consider the threat of complete
deanonymization via ﬁrst-last correlation. We used the se-
curity parameters (αsu
g ) = (0.95, 2.0, 0.5, 5.0),
(αsu
e ) =
e ) = (0.95, 2.0, 0.1, 10.0), and (αw
e , αac
g , αac
e , αau
g , αau
e , αsc
g , αsc
g , αw
Fig. 2: Time to ﬁrst compromise in The Man model
Fig. 4: Security in the Countries model
e = 0.005 or αw
and exits are selected using either αw
e = 1. The
former weight for exits results in a TrustOne user being 200
times more likely to have chosen a given exit than a vanilla
Tor user. This could be an appropriate setting for a user who
is not concerned with revealing his use of TrustOne and his
trust beliefs. It could also be appropriate for a user who is just
trying to protect anonymity for a single connection considered
e = 1 results in exit selection by
in isolation. The weight αw
a TrustOne user that is identical to that of Tor users. This is
an appropriate setting when the user wants to hide his use of
TrustOne and the user’s adversaries may be able to link circuits
together over time as belonging to the same user.
Figures 2 and 3 shows the chance of deanonymization of an
IRC user in AS 6128 via ﬁrst-last correlation for TrustOne and
vanilla Tor. We can see that TrustOne results in a signiﬁcantly
lower chance of compromise, from a 0.68 chance for vanilla
Tor users to about 0.2 or 0.1, depending on the exit-selection
e . The median compromise rate also drops from
parameter αw
about 0.7 to 0.
VII. PERFORMANCE ANALYSIS
The TAPS algorithm was designed to provide tunable
performance while improving users’ security by limiting the
probability that an adversary can observe both sides of a
Tor circuit. We now analyze the effect TAPS has on client
performance and relay load balancing.
A. Tor Network Model
We evaluate the performance effects of TAPS using
Shadow [2], [18], a scalable and deterministic discrete-event
network simulator with a plug-in architecture that enables
it to run real software. Shadow runs the Tor software, and
so we can directly implement our algorithms in Tor’s code
base while increasing our conﬁdence that the application-level
performance effects are realistic.
We conﬁgure a private Tor deployment using Shadow and
the large-scale topology produced by Jansen et al. [17]. Our
base conﬁguration consists of 400 Tor relays (including 4
directory authorities and 93 exits), 1380 Tor clients that also
run a simple ﬁle-fetching application, and 500 simple ﬁle
servers. Of the clients, 1080 are Web clients that are conﬁgured
to: choose a random server and download a 320 KiB ﬁle from
it; pause for [1, 60] seconds chosen uniformly at random;
and repeat. 120 of the remaining clients are bulk clients that
are conﬁgured to repeatedly download a 5 MiB ﬁle without
pausing between downloads. Each experiment is conﬁgured
to run for 1 virtual hour, which takes about 5 hours on our
machine (using 12 Shadow worker threads) while consuming
40 GiB of RAM.
10
Fig. 3: Fraction of compromised streams in The Man model
(0.2, 0.2). Figures 2 and 3 show cumulative distributions for
when and how often deanonymization occurs for a Typical
user in the most popular Tor client AS (6128) over 7 days of
simulation.
We can see that TrustAll signiﬁcantly reduces the chance
of ﬁrst-last correlation by The Man as compared to vanilla
Tor. Users coming from AS 6128 see the probability of at
least one successful ﬁrst-last correlation attack drop from 0.7
to about 0.4. Observe that this overall reduction occurs both
because the chance of choosing a compromised guard among
the initial set of 3 is reduced (as seen in the values at 1 day)
and because the chance of choosing additional compromised
guards, precipitated by network churn, is reduced (as seen in
the smaller slopes of the CDF). The results also show that the
median fraction of compromised streams drops from around
0.1 to 0.
Next we consider the security of TrustAll in the Countries
model. In this model, users face multiple country adversaries
(249), each of which deterministically compromises all ASes
and IXPs within its borders. In this setting, users are sometimes
necessarily compromised against those countries that contain
both the source and destination AS. Thus we only consider
the fraction of those streams that are to a destination AS in
different country than the client AS and are “unnecessarily”
compromised by some country. Figure 4 shows the distribution
of this value for a Typical user in AS 6128 (which is in the
US) active over seven days. It shows that TrustAll reduces the
fraction of unnecessarily-compromised streams from a median
of about 0.24 to a median of about 0.17.
Finally, we consider security of IRC users using the Tru-
stOne algorithm when default users are using vanilla Tor. In
this case, the TAPS users choose guards and exits in a way
dseigned to be sufﬁciently similar to how they are selected in
vanilla Tor. Speciﬁcally, guards are selected using αw
g = 0.005
01234567Days from first stream0.00.10.20.30.40.50.60.70.80.91.0Cumulative probabilityVanilla Tor, TypicalTrustAll, TypicalVanilla Tor, IRCTrustOne, IRC, exit wt 1.0TrustOne, IRC, exit wt 0.0050.00.20.40.60.81.0Fraction of streams0.00.10.20.30.40.50.60.70.80.91.0Cumulative probabilityVanilla Tor, TypicalTrustAll, TypicalVanilla Tor, IRCTrustOne, IRC, exit wt 1.0TrustOne, IRC, exit wt 0.0050.000.050.100.150.200.25Fraction of streams unnecessarily compromised0.00.10.20.30.40.50.60.70.80.91.0Cumulative probabilityTrustAllVanilla TorWe also run 180 ShadowPerf clients and model
their
behavior after the TorPerf [5] clients that measure and publish
performance over time in the public Tor network. We compared
ShadowPerf to TorPerf performance over several experiments
and found that Shadow is able to model Tor performance
characteristics with reasonable accuracy over a range of ﬁle
download sizes.
B. TAPS Implementation Details
We branched Shadow [1] at commit 023055eb5, shadow-
plugin-tor [3] at commit 9eed6a7c5, and Tor at version
0.2.5.2-alpha and modiﬁed them to support experimen-
tation with TAPS. The implementation of both the TrustOne
and TrustAll versions of TAPS was done in 1126 lines of C
code in Tor itself.
C. TrustAll Against The Man
g = αw
e
Recall that in the TrustAll variation of TAPS, all users
in the network are conﬁgured to select paths based on a
common trust policy. We explore the performance of TAPS
under different conﬁgurations of the parameters described in
Section V. We use the same values of the parameters deﬁning
safe and acceptable relays in position p ∈ {g, e} (i.e., αsu
p , αsc
p ,
p ) that were used for the security experiments in
p , and αac
αau
Section VI-C. We then adjust the required bandwidth fraction
in order to adjust the amount of load
αw = αw
balancing that happens due to client path selection. Higher
values of αw relax security by requiring clients to consider
more nodes in an attempt to exceed the bandwidth fraction
and allow the algorithm to better distribute load among relays
that have the capacity to support it (relays that are not safe or
acceptable are never chosen in any case). Lower values of αw
reduce the number of relays that a client must consider, which
means they effectively prefer more secure relays and perform
less load balancing. We experiment with different values of
αw to explore these effects.
The results of our experiments are shown in Figure 5.
Figure 5a shows the distribution of the time to receive the
ﬁrst byte of each download aggregated across all clients in our
network. As can be seen, there is a signiﬁcant and consistent
improvement in latency to the ﬁrst byte as αw increases. As
αw increases, client load is better distributed because more
clients will end up choosing high capacity nodes even if they