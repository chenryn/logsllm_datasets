# 零、前言
欢迎来到亚马逊网络服务上的*Docker*！我很高兴写了这本书，并分享了如何利用 Docker 和**亚马逊网络服务** ( **AWS** )生态系统提供的出色技术来构建真正世界一流的解决方案，用于在生产中部署和操作您的应用。
Docker 已经成为构建、打包、发布和操作应用的现代标准，它利用容器的力量来提高应用交付的速度、提高安全性和降低成本。这本书将向您展示如何加强构建 Docker 应用的过程，使用连续交付的最佳实践来为测试、构建和发布 Docker 应用提供完全自动化、一致、可靠和可移植的工作流。在我看来，在您考虑将应用部署到云之前，这是一个基本的先决条件，前几章将重点介绍如何建立一个本地 Docker 环境，并为我们将在整本书中使用的示例应用创建一个本地连续交付工作流。
AWS 是世界领先的公共云提供商，为管理和操作您的 Docker 应用提供了一套丰富的解决方案。本书将涵盖 AWS 为支持 Docker 和容器提供的所有主要服务，包括**弹性容器服务** ( **ECS** )、Fargate、Elastic Beanstalk 和 **Elastic Kubernetes 服务** ( **EKS** )，还将讨论如何利用 Docker Inc .提供的 Docker for AWS 解决方案来部署 Docker Swarm 集群。
在 AWS 中运行一个完整的应用环境不仅仅包括您的容器平台，本书还将描述管理对您的 AWS 帐户的访问以及利用其他 AWS 服务来支持您的应用需求的最佳实践。例如，您将学习如何设置 AWS 应用负载平衡器以发布应用的高可用性、负载平衡的端点，创建 AWS **关系数据库服务** ( **RDS** )实例以提供托管应用数据库，将您的应用与 AWS 机密管理器集成以提供安全的机密管理解决方案，并使用 AWS CodePipeline、CodeBuild 和 CloudFormation 服务创建完整的连续交付管道，这些服务将针对应用的任何新更改自动测试、构建和发布 Docker 映像，然后自动将其部署到开发和生产环境中
您将使用 AWS 云信息服务构建所有这些支持基础架构，该服务提供了强大的基础架构代码模板，允许您在单个清单中定义我提到的所有 AWS 服务和资源，只需单击一个按钮就可以将其部署到 AWS。
我相信，到目前为止，您和我一样对了解所有这些精彩的技术感到兴奋，并且我相信，到本书结束时，您将使用最新的尖端技术和最佳实践，开发出部署和管理 Docker 应用所需的专业知识和技能。
# 这本书是给谁的
*亚马逊网络服务上的 Docker*是为任何想要使用容器、Docker 和 AWS 的能力来构建、部署和操作应用的人准备的。
理想情况下，读者应该对 Docker 和容器有一个基本的了解，并且已经与 AWS 或另一个云提供商合作过，尽管不需要以前对容器或 AWS 的经验，因为这本书采取了一步一步的方法，并随着您的进步解释了关键概念。了解如何使用 Linux 命令行、Git 和基本的 Python 脚本知识将是有用的，但不是必需的。
有关推荐必备技能的完整列表，请参见*以充分利用本书*部分。
# 这本书涵盖了什么
[第 1 章](01.html)、*容器和 Docker 基础知识*，将简要介绍 Docker 和容器，并概述 AWS 中可用于运行您的 Docker 应用的各种服务和选项。您将设置您的本地环境，安装 Docker、Docker Compose 和完成每章中的示例所需的各种其他工具。最后，您将下载示例应用，并学习如何在本地测试、构建和运行应用，这样您就可以很好地了解应用的工作方式以及启动和运行应用所需执行的特定任务。
[第 2 章](02.html)、*使用 Docker 构建应用*将介绍如何使用 Docker、Docker Compose 和其他工具构建基于 Docker 的全自动工作流，以测试、构建、打包和发布应用作为生产就绪的 Docker 发布映像。这将为可移植的连续交付工作流奠定基础，您可以在多台机器上一致地执行该工作流，而不必在每个本地环境中安装特定于应用的依赖项。
[第 3 章](03.html)、*AWS 入门*将介绍如何创建一个免费的 AWS 帐户，并开始使用各种免费层服务，让您熟悉提供的各种 AWS 服务。您将学习如何为您的帐户建立最佳管理和用户访问模式，配置**多因素认证** ( **MFA** )以增强安全性，并安装 AWS 命令行界面，该界面可用于各种操作和自动化用例。还将向您介绍 CloudFormation，这是一个由 AWS 免费提供的管理工具和服务，您将在本书中使用该工具和服务，只需单击一个按钮，就可以部署复杂的环境，使用功能强大且富有表现力的基础架构作为代码模板格式。
[第 4 章](04.html)，*ECS*简介，将带您启动并运行**弹性容器服务** ( **ECS** )，这是在 AWS 中运行您的 Docker 应用的旗舰服务。您将了解 ECS 的体系结构，创建第一个 ECS 集群，使用 ECS 任务定义定义容器配置，然后将 Docker 应用部署为 ECS 服务。最后，将向您简要介绍 ECS **命令行界面** ( **CLI** )，该界面允许您与本地 Docker Compose 文件进行交互，并使用 ECS 自动将 Docker Compose 资源部署到 AWS。
[第 5 章](05.html)、*使用 ECR* 发布 Docker 映像，将教您如何使用**弹性容器注册表** ( **ECR** )建立私有 Docker 注册表，使用 IAM 凭据向您的注册表进行认证，然后将 Docker 映像发布到注册表内的私有存储库。您还将学习如何与其他帐户和 AWS 服务共享您的 Docker 映像，以及如何配置生命周期策略来自动清理孤立映像，确保您只为活动和当前映像付费。
[第 6 章](06.html)、*构建自定义 ECS 容器实例*，将向您展示如何使用一个流行的开源工具 Packer 为 ECS 集群中运行您的容器工作负载的 EC2 实例(ECS 容器实例)构建和发布自定义的 **Amazon 机器映像** ( **AMIs** )。您将安装一组帮助器脚本，使您的实例能够与云信息集成，并在实例创建时下载自定义设置操作，允许您动态配置实例将加入的 ECS 集群，配置实例应该向其发布日志信息的 CloudWatch 日志组，最后，向云信息发回设置成功或失败的信号。
[第 7 章](07.html)、*创建 ECS 集群*，将教您如何基于 EC2 自动扩展组构建 ECS 集群，该组利用了您在上一章中创建的自定义 AMI 的功能。您将使用 cloud information 定义您的 EC2 自动扩展组、ECS 集群和其他支持资源，并配置 CloudFormation Init 元数据来执行自定义运行时配置和构成 ECS 集群的 ECS 容器实例的配置。
[第 8 章](08.html)、*使用 ECS* 部署应用，将扩展上一章创建的环境，将支持资源如**关系数据库服务** ( **RDS** )实例和 AWS **应用负载平衡器** ( **ALBs** )添加到您的云信息模板中。然后，您将为示例应用定义一个 ECS 任务定义和 ECS 服务，并了解 ECS 如何为您的应用执行自动滚动部署和更新。为了协调所需的部署任务，例如运行数据库迁移，您将扩展 CloudFormation 并编写您自己的 Lambda 函数来创建一个 ECS 任务运行器自定义资源，提供强大的功能来运行任何可以作为 ECS 任务执行的配置操作。
[第 9 章](09.html)*管理机密*将介绍 AWS 机密管理器，这是一项完全托管的服务，以加密格式存储机密数据，授权方(如您的用户、AWS 资源和应用)可以轻松安全地访问这些数据。您将使用 AWS 命令行界面与机密管理器交互，为敏感凭据(如数据库密码)创建机密，然后学习如何为容器使用入口点脚本，该脚本在容器启动时注入机密值作为内部环境变量，然后再移交给主应用。最后，您将创建一个 CloudFormation 自定义资源，向不支持 AWS 机密管理器的其他 AWS 服务公开机密，例如为关系数据库服务(RDS)实例提供管理密码。
[第 10 章](10.html)、*隔离网络访问*介绍了如何在您的 ECS 任务定义中使用 awsvpc 网络模式来隔离网络访问，并将 ECS 控制平面通信与您的容器和应用通信分开。这将允许您采用最佳实践安全模式，例如在专用网络上部署容器，并实现提供互联网访问的解决方案，包括 AWS VPC NAT 网关服务。
[第 11 章](11.html)、*管理 ECS 基础架构生命周期*，将让您了解运行 ECS 集群时面临的运营挑战，包括让您的 ECS 容器实例停止服务，无论是在您的自动扩展组中进行扩展，还是用新的 Amazon 机器映像替换您的 ECS 容器实例。您将学习如何利用 EC2 自动扩展生命周期挂钩在 ECS 容器实例即将终止时调用 AWS Lambda 函数，这允许您在发出 EC2 自动扩展信号以继续实例终止之前，执行正常的关闭操作，例如将活动容器排放到集群中的其他实例。
[第 12 章](12.html)、 *ECS 自动扩展*，将描述 ECS 集群如何管理 CPU、内存和网络端口等资源，以及这如何影响集群的容量。如果您希望能够动态地自动扩展您的群集，您需要动态地监控 ECS 群集容量，并在容量阈值下在群集中横向扩展或纵向扩展，以确保您能够满足组织或使用情形的服务级别期望。您将实现一个解决方案，每当通过 AWS CloudWatch 事件服务生成 ECS 容器实例状态更改事件时，该解决方案都会计算 ECS 集群容量，向 CloudWatch 发布容量指标，并使用 CloudWatch 警报动态地向上或向下扩展您的集群。有了动态集群容量解决方案，您就可以配置 AWS 应用自动扩展服务，根据适当的指标(如 CPU 利用率或活动连接)动态调整服务实例的数量，而无需担心对底层集群容量的影响。
[第 13 章](13.html)、*持续交付 ECS 应用*将使用 AWS CodePipeline 服务建立持续交付管道，该服务与 GitHub 集成以检测对您的应用源代码和基础架构部署脚本的更改，使用 AWS CodeBuild 服务运行单元测试，使用示例应用 Docker 工作流构建应用工件并发布 Docker 映像，并使用您在本书中迄今为止使用的 CloudFormation 模板将您的应用更改持续部署到 AWS。
这将自动部署到您测试的 AWS 开发环境中，然后创建一个变更集和手动批准操作，用于部署到生产环境中，为您的所有应用新功能和错误修复提供快速且可重复的生产路径。
[第 14 章](14.html)、 *Fargate 和 ECS 服务发现*将介绍 AWS Fargate，它提供了一个解决方案，可以全面管理 ECS 服务控制平面和 ECS 集群，传统上，您必须使用常规的 ECS 服务来管理它们。您将使用 Fargate 将 AWS X 射线守护程序部署为 ECS 服务，并将 ECS 服务发现配置为使用 DNS 和 Route 53 动态发布您的服务端点。这将允许您向示例应用添加对 x 光跟踪的支持，该支持可用于跟踪应用的传入 HTTP 请求，并监控 AWS 服务调用、数据库调用以及为服务每个传入请求而进行的其他类型的调用。
[第 15 章](15.html)*弹性 Beanstalk*将概述广受欢迎的**平台即服务** ( **PaaS** )产品，其中包括对 Docker 应用的支持。您将学习如何创建一个 Elastic Beanstalk 多容器 Docker 应用，建立一个由托管 EC2 实例、RDS 数据库实例和**应用负载平衡器** ( **ALB** )组成的环境，然后使用各种技术扩展该环境以支持您的 Docker 应用的需求，例如卷装载和每个应用部署运行单次任务。
[第 16 章](16.html)、*AWS 中的 Docker Swarm*将重点介绍如何在 AWS 中运行 Docker Swarm 集群，使用 Docker Swarm 社区版提供的 Docker for AWS 蓝图。该蓝图为您提供了一个云信息模板，可在几分钟内在 AWS 中建立预配置的 Docker Swarm 集群，并具有与关键 AWS 服务(如弹性负载平衡(ELB)、弹性文件系统(EFS)和弹性数据块存储(EBS)服务)的集成功能。您将使用 Docker Compose 定义一个栈，该栈配置以熟悉的 Docker Compose 规范格式表示的多服务环境，并学习如何配置关键的 Docker Swarm 资源，如服务、卷和 Docker 机密。您将学习如何创建由 EFS 支持的共享 Docker 卷、由 EBS 支持的可重定位 Docker 卷(Docker Swarm 将自动重新连接到节点故障后重新部署的新容器)，以及使用 Docker Swarm 为您自动创建和管理的 ELB 为您的应用发布外部服务端点。
[第 17 章](17.html)、 *Elastic Kubernetes Service、*介绍了 AWS 最新的容器管理平台产品，该产品基于流行的开源 Kubernetes 平台。您将首先在本地 Docker Desktop 环境中设置 Kubernetes，其中包括 Docker 18.06 CE 版本对 Kubernetes 的本机支持，并学习如何使用大量 Kubernetes 资源为 Docker 应用创建完整的环境，包括 pods、部署、服务、机密、持久卷和作业。然后，您将在 AWS 中建立一个 EKS 集群，创建一个 EC2 自动扩展组，将工作节点连接到您的集群，并确保您的本地 Kubernetes 客户端可以进行认证并连接到 EKS 控制平面，之后，您将部署 Kubernetes 仪表板，为您的集群提供全面的管理界面。最后，您将定义一个默认存储类，该类使用弹性块存储(EBS)服务来存储持久卷，然后将您的 Docker 应用部署到 AWS，利用您之前为本地环境创建的相同 Kubernetes 定义，为您提供了一个强大的解决方案，可以在本地快速部署 Docker 应用用于开发目的，然后使用 EKS 直接部署到生产环境。
# 充分利用这本书
*   **Docker 的一个基本的、工作的知识** -如果你之前没有使用过 Docker，你应该在[https://docs.docker.com/engine/docker-overview/](https://docs.docker.com/engine/docker-overview/)了解 Docker 的基本概念，然后一步步浏览 Docker 入门教程的第 1 部分([https://docs.docker.com/get-started/](https://docs.docker.com/get-started/))和第 2 部分([https://docs.docker.com/get-started/part2](https://docs.docker.com/get-started/part2))。要更全面地了解 Docker，请查看 Packt Publishing 的[学习 Docker-Docker 18 . x](https://www.packtpub.com/networking-and-servers/learn-docker-fundamentals-docker-18x)基础知识一书。
*   **Git 的一个基本的工作知识** -如果你之前没有使用过 Git，你应该在[https://www.atlassian.com/git/tutorials](https://www.atlassian.com/git/tutorials)跑一遍初学者和入门教程。要想更全面地了解 Git，请查阅帕克特出版社的 [Git Essentials](https://www.packtpub.com/application-development/git-essentials) 一书。
*   **熟悉 AWS** -如果你之前没有使用过 AWS，在[https://AWS . Amazon . com/入门/教程/启动一台虚拟机/](https://aws.amazon.com/getting-started/tutorials/launch-a-virtual-machine/) 上运行启动一台 Linux 虚拟机教程会提供一个有用的介绍。
*   **熟悉 Linux/Unix 命令行** -如果您之前没有使用过 Linux/Unix 命令行，我建议您使用您在“启动一台 Linux 虚拟机”教程中创建的 Linux 虚拟机运行一个基本教程，如[https://maker . pro/Linux/tutorial/basic-Linux-面向初学者的命令](https://maker.pro/linux/tutorial/basic-linux-commands-for-beginners)。
*   **对 Python 的基本理解** -本书的示例应用是用 Python 编写的，后面章节中的一些例子包含了基本的 Python 脚本。如果您以前没有使用过 Python，您可能想通读一下[https://docs.python.org/3/tutorial/](https://docs.python.org/3/tutorial/)的前几课。
# 下载示例代码文件
你可以从你在[www.packtpub.com](http://www.packtpub.com)的账户下载这本书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[www.packtpub.com/support](http://www.packtpub.com/support)并注册将文件直接通过电子邮件发送给您。
您可以按照以下步骤下载代码文件: