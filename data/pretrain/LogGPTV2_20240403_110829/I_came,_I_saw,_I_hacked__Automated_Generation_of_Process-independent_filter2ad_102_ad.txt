and translation, we use Google Cloud Vision API.
Feature selection: We first use Mutual Information (MI) as a statis-
tic on both models to find the optimal number of features while
being careful to avoid overfitting. Then, we used ùúí2 statistic, and
F-score to find the best correlation between target labels and fea-
tures using SVM. From Table 4 we see ùúí2 statistic (test accuracy:
79.78%) and MI (test accuracy: 75.53%) perform better than F-score
(test accuracy: 74.46%) with ùúí2 statistic being slightly better in test
accuracy. We observe that choosing the top 1000 features from high
mutual information with MNB gives the best result (test accuracy:
84.04% and low overfitting).
Model Selection: We experimented with two models, MNB and
SVM with linear kernels because both the models are extensively
used for text-based classification like sentiment analysis or spam
detection [24]. We reduce the impact of overfitting by K-fold cross-
validation using 5 folds and we observe that the test accuracy for
MNB is higher in all the experiments as compared to SVM. There-
fore, we select MNB with mutual information statistic to select the
top 1000 features as the final model.
Insights: We investigated the top features out of total 7592 features
related to our text-based model and listed the top features in Table 5.
Manual inspection of top features reveals that while some features
like ‚Äòwater‚Äô for the Water sector, ‚Äòkw‚Äô (kilowatts) for the Energy
4.2 ICS Process fingerprinting
As explained before, an ICS environment in any sector is comprised
of control processes. Chemical plants (a sector), for example, involve
the control of flow of chemicals, temperature in mixers, pressure in
pipes, etc. Each of these processes is typically controlled by a PLC.
To attack the system meaningfully, we have to target the right PLC
by fingerprinting the selected process.
PLCs use programming languages with both textual and graph-
ical representations, such as ladder diagrams, structured text, in-
struction list, function block diagrams, and sequential function
charts (as described in IEC 61131-3 standard). Engineering work-
stations run an integrated development environment (for example,
Codesys) that is used to compile the control code into binary format
and download it to the PLC. We leverage these control binaries
This is the accepted version of the article shared by the authors. The final published version will be available at AsiaCCS 2020 Proceedings.
Figure 4: Parallel architecture of the final classifier to fingerprint an ICS sector based on an HMI screenshot.
Top features
Sector
Chemical
reactor, gal, kg, kv, kw, man, mw, pav, power, sp
Energy
cb, kv, kva, kvar, kw, mvar, mw, pf, power, sel
Water
pump, cw, water, fit, flow, hr, kv, kw, mw, sludge
Table 5: Top features for HMI text-based classification.
Sector
Chemical
Energy
Transportation
Water
Binaries Top 3 languages
18
19
6
9
German(7), English(5), French(3)
German(7), English(6), Cezch(2),
German(2), English(2), Polish(1),
German(2), English(2), Polish(2)
Table 6: Description of the control binaries dataset.
to evaluate their efficiency in classifying the sector that the PLC
belongs to and the process running on our target PLC. Specifically,
we extract two pieces of information: 1) The Function Blocks (FBs)
(Section 4.2.1), and 2) The ASCII strings (Section 4.2.2). FBs resem-
ble functions in imperative programming languages. They are used
as black boxes for frequently reoccurring processes, such as control
algorithms (PID, Integral, Derivative), timing functions (triggers,
timers), and networking functions (MODBUS, TCP) [21]. Extracting
FBs from binaries can provide rich semantic information about the
process. The strings in a binary are dynamic and include descriptive
error messages, input/output prompts, or other information that
might be used to identify the process of the PLC.
Constructed dataset: In order to extract FBs from the binaries,
we use ICSREF [21]. ICSREF, at its current version (1.0), works only
with Codesys v2.3 binaries. Since PLCs control processes are part
of the critical infrastructure, real binaries are not easily accessible.
Therefore, we turned to publicly available binaries and obtained
69 control binaries without crossing the line of legality. 52 out of
the 69 contained useful information and we were able to catego-
rize the binaries into 4 sectors (Chemical, Energy, Transportation,
and Water and wastewater management) and 3 control processes
(pressure, temperature, and time controls) as seen in Tables 6 and
7, respectively. We used these processes as a proof-of-concept to
train and test our machine learning model. To avoid the pitfalls of a
small dataset, we ensure diversity in both the training and testing.
4.2.1 Classification based on PLC Function Blocks. Cleaning FB
names: After automatically extracting the FB names, individually,
we had to cleanse the dataset. ICSREF is equipped with a func-
tion called hashmatch that extracts the FBs in PLC binaries, hashes
them to create a signature and then matches them to a built-in
library [21]. This function also provides the relative address at
which the FB is located. The first stage of data cleaning is remov-
ing these addresses as they add no semantic information. Next,
because some FBs are generic and can be used in any process (e.g.,
ETHERNET_MODBUSMASTER_TCP, MD5_DD, RTU_TO_ASCII),
they had to be excluded as well. Initially, we ran experiments using
all the FB names, including general purpose FB. This yielded lim-
ited accuracy, 50%. After removing common FBs, we observed an
improved testing accuracy reaching up to 82.35% (Table 4).
Feature Selection: To extract the feature words from the data we
used two different methods: The frequency of words, using count,
and the importance of a word relative to the entire corpus, using
term frequency-inverse document frequency (TF-IDF). Selecting
the words using TF-IDF yielded better results. To select the most
effective features, we follow the same procedure as subsection
4.1.2. We identify that the MI performed the best, by giving the
highest testing accuracy and showing the least signs of overfitting.
Furthermore, we note that the optimal number of features is 45.
Model Selection: Table 4 shows the variation of training and test-
ing accuracy with different selection parameters and number of
features on both the MNB and SVM models. FB based classifica-
tion performed better using the MNB model with training and test
accuracy being 84.85% and 82.35% respectively.
Insights: We extracted the top features (FB names) that contributed
to the classification of each binary to the corresponding process.
Table 7 shows the list of FB names reciprocal to top features. Even
with a limited dataset, it is evident that these FB produce meaning-
ful and unique features (e.g., fb_time, ramp_init) describing each
process. There are other features, like blink, for example, that might
not aid in classification. During our experiments, the ML model
extracted 45 features. Our tests show that for this model, increasing
the number of features resulted in higher testing accuracy.
4.2.2 Classification based on PLC binary strings. We also use the
ASCII strings embedded in the binary. Using the Unix command
strings, we were able to find printable strings. We found that more
than 75% of our dataset contains meaningful strings.
Cleaning strings: Our algorithm extracts text from control bina-
ries using the strings command, and then delimits the words and
translates them into English. Our binaries included 10 languages,
of which more than 30% were in German (as shown in Table 6). We
automatically translate the strings using Google Cloud Vision API.
Since strings prints all printable strings of 4 characters and longer,
this resulted in many meaningless words that we discarded.
Feature Selection: We used same feature selection procedure as in
subsection 4.2.1 Although, having 2000 features results in a better
training accuracy, the discrepancy between training (88.23%) and
testing (80%) accuracies elude to overfitting. We thus choose our
optimal number of features to be 500.
Model Selection: From our experiments on SVM and MNB, the
MNB model performed better and therefore, we use it for text-based
classification of the binary strings. We obtain a training and testing
accuracies of 82.30% and 80%, respectively with MI statistic.
This is the accepted version of the article shared by the authors. The final published version will be available at AsiaCCS 2020 Proceedings.
Process
Pressure
Control
Temperature
Control
Timer
No.
17
17
18
Top Features-FB based Classification
pack, mc3_power_init, mc3_reset_init, mc3_stop_init, hysteresis,
fu_linear_2punkt, extract, ramp_int, prot_wait_for_init, blink
integral, hysteresis, derivative, pid, ramp_int, fu_linear_2punkt,
charcurve,blink_init,hysteresis_init, blink, prot_wait_for_init
fb_time, fb_stairwelllight1, derivative_init, integral_init,
pos_750_635_init, pid, integral, fb_latchingrelay, derivative,
pack, fbtimeswitch, prot_wait_for_init, hysteresis_init, blink
Top Features- Strings based Classification
pressure, temperature, value, pump,
sys, data, time, file, heating, cooling
state, save, heating, send, manual,
hour, alarm, active, heat, temp, cooling
value, alarm, active, data, temp, file,
set, send, pressure, time, sys, cooling,
heating, min, start, open, status
Table 7: Top features that are used in process both fingerprinting methods in control binary based classification.
Size
Test Accuracy (in %)
Energy Water Total
69.7
80.9
84.0
75.8
84.8
88.3
Fingerprinting with HMI
ML model
Chemical
Image only M: 120MB
98.8
M: 94.4KB
Text
D: 472.2 KB 100
only
‚âà120MB
Combined
100
PLC binaries
Size
ML model
M: 2.9 kB
FB only
M: 24.7 kB
Strings
D: 39.6 kB
only
Combined M: 27.6 kB
93.33
D: 39.6 kB
Table 8: Boundaries for ICS fingerprinting. Green cells: max-
imum attack confidence, M: Model, D: Dictionary.
Pressure
87.7
81.4
Heat
56.2
76.3
76.3
75.9
75.9
79.3
Time
100
83.3
100
Total
82.4
80
100
Insights: Strings for process classification showed high training
accuracy while the testing accuracy was capped at 80%. This can be
attributed to the size of the dataset or the specificity/static nature
of processes. It is important to note that increasing the number of
features beyond 500 resulted in signs of overfitting; this can also
be due to the size and diversity of the dataset. To have a better
understanding of how the binaries were classified, we examine the
features used for classification. The top features included process-
specific words such as pump, pressure, etc. as shown in Table 7.
4.2.3 Combined classification model for ICS process identification.
Similar to the combined model used for sector classification (sub-
section 4.1.3), we also parallelize the two process classification ML
models to achieve higher accuracy. Both FB and string ML models
are leveraged to classify the process correctly. The combined model
assesses the prediction probability from both the FB‚Äôs and string‚Äôs
based classification models and chooses the class with the higher
confidence level. This model is especially useful in cases when the
binary does not contain useful information from either source (FB
or strings). Our tests show that our combined model results in more
than 10% increase in testing accuracy of both models (FB based:
10.98%, Strings based: 13.33% ), with a final accuracy of 93.33%.
4.3 Attack boundaries
The proposed reconnaissance methodology can be effectively used
in un-targeted attacks on different ICS environments without hu-
man intervention. Nonetheless, any statistical (ML) model can in-
troduce a probability of failure which is reflected from the accuracy
metric. Table 8 discusses the boundaries of reconnaissance.
We observe that the text-based ML model is much smaller (94.4
KB) than image-based ML model (120 MB) for ICS sector fingerprint-
ing. The dictionary size includes top features and their translation
in the detected languages (‚âà 27). Although the accuracy of the
combined model is 5% higher than a text-based model, the size of
the payload is 3 orders of magnitude more. Therefore, we consider
the text-based model to be a light-weight version of the payload.
The attacker may choose the combined model if her capabilities
allow for the payload to remain undetected. Chemical sector, in all
the models, has highest reconnaissance probability.
For process fingerprinting, we observe that both the pressure and
timer control processes have a high testing accuracy using FB-based
and strings-based classification, respectively, with reduced payload
size (2.9 kB and 24.7 kB respectively). We also include a dictionary
of the top features (500 words) and include their translation to
all the languages detected in our dataset (10 total), resulting in a
39.6 kB payload, if multiple languages are targeted. The combined
model introduces more than 10% increase in testing accuracy and
maintains a practical size of 67.2kB for all languages identified.
4.4 Intelligence collection
Before we move to process-aware attack, we also explore the intel-
ligence that can be collected during the reconnaissance phase.
From HMI screenshots. While extracting text strings from
4.4.1
HMI screenshots, we included some attack-aid strings like ‚Äòalarm‚Äô,
‚Äòmax‚Äô, ‚Äòmin‚Äô, ‚Äòset-point‚Äô, common process-specific variables (pres-
sure, temperature, etc.), their variations and extracted the digits (if
any) next to them. This helps the adversary in automatic payload-
design and gives insights about the operational limits of the plant.
We can see such useful intelligence collection from a real-life exam-
ple in Fig. 3: Operational limits, alarm thresholds, and plant goals
(set-points) can be extracted from the HMI screenshot.
From PLC binaries. PLC binaries also contain similar values
4.4.2
like set points and hardcoded values (eg, PID values, Cycle time).
PLC control binaries are unique and different for each vendor. Using
ICSREF [21], we explored the possibility to use the Global INIT
subroutine to extract hard-coded values such as set points and
PID values. This analysis is enabled by the reconnaissance steps
before. An adversary that gains access to values from the control
binaries can use them effectively. In our end-to-end case study, we
automatically extract and replace the PID values from the binary.
This is the accepted version of the article shared by the authors. The final published version will be available at AsiaCCS 2020 Proceedings.
Figure 5: A typical control system with transfer functions
and signals of each module. Observability of the attacker is
depicted by the highlighted module.
5 CONSTRAINED PROCESS-AWARE ATTACK
A common characteristic of a process-aware attack is to cause
sustainable and meaningful damage. Most of the work, however,
achieves this attack objective using sensors or actuators[45]. [15]
is the only work that discusses the construction of such attacks
based on controllers, but there is limited discussion about how it
can generalize. Moreover, [15] changes the signals to/from PLCs,
essentially spoofing the sensing and actuating signals without any
manipulation on PLC variables. In this work, we bridge this gap
in the literature by enumerating the steps to cause PLC control
code-based attacks that remain within the operational limits of the
plant (like causing a sustainable decrease in production). These
attacks are performed by just variable value changes in the control
code in a generic PID controller, commonly used in ICS.
Since the attacks cause a perturbation (deviation) in the physical
quantity, we name them perturbation-based attacks. These are two
specific types of attack which remain within operational limits of
the physical quantity: One that causes a stable change in a physi-
cal quantity (like stable decrease in production), and another that
causes an oscillating perturbation within upper and lower limits
(example, causing turbulence in pipes). Depending on the objectives,
the adversary can program the payload to choose. Our formulation
of attack methodology follows control theory convention to rep-
resent functions: The time- and frequency-domain functions are
represented in small and capital letters, respectively.
5.1 Stable Perturbation attack
To induce a stable yet configurable error in a constant physical
quantity, we use a control-theoretic approach of manipulating the
Proportional-Integral-Derivative (PID) controller. PID-based con-
troller algorithms are standard in ICS environment control and
are available as a configurable FB in PLC engineering platforms