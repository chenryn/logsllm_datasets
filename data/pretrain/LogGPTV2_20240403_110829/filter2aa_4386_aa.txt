.\" Copyright (c) 1991, 1992, 1993, 1995, 1998, 1999, 2000 Free Software Foundation
.\" See section COPYING for conditions for redistribution
.TH ar 1 "1999" "Free Software Foundation" "GNU 开发工具"
.de BP
.sp
.ti \-.2i
\(**
..
.SH NAME
ar \- 建立，修改档案或从档案中抽取成员。
.SH 总览
.hy 0
.na
.BR ar " [\|" "-" "\|]"\c
.I {dmpqrtx}[abcfilNoPsSuvV] \c
[\|\c
.I membername\c
\&\|] \c
[\|\c
.I count\c
\&\|] \c
.I archive\c
\& \c
.I files\c
\&.\|.\|.
.ad b
.hy 1
.SH 描述
GNU 组织的
.B ar
程序用于建立，修改档案或从档案中抽取成员。
一个
.I 档案
是一个包含了很多其它文件的单独的文件，
它采用的结构使得可以很容易恢复原来独立的文件
（称为档案的
.I 成员
）。
原始文件（成员）的内容、权限、时间属性、属主和组都
在档案中得到保留，在抽取时可以得到恢复。
.B ar
程序维护的档案成员可以拥有一定长度的名字；具体情况，
与你系统上的
.B ar
是怎样配置的有关。
为了与其它工具维护的档案格式兼容，
有可能对成员名字的长度有严格的限制，
如果确实是这样，通常要求采用 15 个字符
（典型的格式是 a.out），或者 16 个字符（典型的格式是 coff）。
.B ar
是一个二进制格式的工具，因为这一类档案多数都作为
保存公共程序的
.I 库文件
使用。
通过指定修饰符`\|\c
.B s\c
\|', \c
.B ar\c
\& 
可以 建立 指向 档案中 可重定位 目标 模块
定义的 符号表的 索引,
一旦建立, 在\c
.B ar\c
\& 更新 其内容时 (通过`\|\c
.B q\c
\|' 执行 更新 操作) ,
此索引 也会 得到 更新.
有这种 索引的 档案 可以 加速到 库文件的 连接过程,
并且 允许 库中的 例程 相互调用 而无须 考虑
它们 在档案中的 位置.
可以 使用`\|\c
.B nm \-s\c
\|' 或 `\|\c
.B nm \-\-print\-armap\c
\|' 列出 这种索引, 如果 档案 没有这类 索引,
可以 使用 另外 一个 称为\c
.B ranlib\c
\& 的\c
.B ar\c
\& 程序 增加 这种 索引.
.B ar
至少需要两个参数才能运行：
一个指明执行的
.I 操作
（可能伴随有其它的
.I 修饰符
），作用的档案名字。
多数 操作 可以 接受 更多的\c
.I 文件\c
\& 参数,  指明 操作的 详细 文件.
.SH 选项
\c
.B ar\c
\& 允许你 在第一个 命令行 参数中
以任意 顺序 混合 指定 操作码\c
.I p\c
\& 和修饰符\c
.I mod\c
\& .
只要你 愿意, 也可以 用破折号 作为 命令行 第一个 参数的 开始.
\c
.I p\c
\& 关键字 指明 要执行的 操作, 只能 指明为 如下 之一:
.TP
.B d
从档案中\c
.I 删除\c
\& 模块. 通过\c
.I files\c
\& 指明 要删除的 模块的 名称; 如果 没有 指出 要删除的
文件 名称, 档案不会 改变 任何 内容.
如果 给出了\c
.B 'v\c
\|' 修饰符,\c
.B ar\c
\& 会例出 它删除的 每一个 模块.
.TP
.B m
用此 操作 在档案中\c
.I 移动\c
\& 成员.
如果 某个 符号名 在档案的 多个 成员中 有定义,
那么 程序 怎样 连接 档案 文件
得到的 结果 可能是 不同的.
如果 没有为\c
.B m\c
\& 指定 修饰符, 由\c
.I files\c
\& 指出的 成员 将移动到 档案的\c
.I 末尾\c
\& ;
可以 通过 `\|\c
.B a\c
\|', `\|\c
.B b\c
\|' 或 `\|\c
.B i\c
\|' 等修饰符, 指定 成员 移动的 具体 位置.
.TP
.B p
在标准 输出上
\c
.I 打印\c
\& 档案中 指定的 成员.
如果 给出了`\|\c
.B v\c
\|' 修饰符, 在 打印 成员 内容 之前,
先打印 成员的 名字.
如果没有 指明\c
.I files\c
\& 参数, 档案中 所有的 成员 都会被 打印 出来.
.TP
.B q
\c
.I 快速 追加\c
\&; 增加 \c
.I files\c
\& 到 \c
.I archive\c
\& 的末尾, 不进行 替换 检查.
修饰符 `\|\c
.B a\c
\|' `\|\c
.B b\c
\|' 和 `\|\c
.B i\c
\|'\c
.I 不\c
\& 影响此 操作, 新成员 始终 追加到 档案的 末尾处.
修饰符 `\|\c
.B v\c
\|' 可以使 \c
.B ar\c
\& 列出 它追加的 所有文件.
由于 本功能 是用于 快速操作, 即使 档案中
有 符号表 索引 也不 进行 更新; 可以 使用 `\|\c
.B ar s\c
\|' 或
\c
.B ranlib\c
\& 明确 要求 更新 这些索引.
在为快速 追加 重建 索引时,由于 有 太多 不同的 系统,
所以 GNU
.B ar
采用 `\|\c
.B q\c
\|' 作为 `\|\c
.B r\c
\|'的一个 同义字.
.TP
.B r
把文件 \c
.I files\c
\& 插入 \c
.I archive\c
\& ( \c
.I 替换 \c
\&). 本操作与 `\|\c
.B q\c
\|' 是不同的, 如果 档案中 已有的 某个 成员与
插入 文件的 名称 相同, 此成员 将被删除. 
如果 不存在 名称为 \c
.I files\c
\& 的文件, \c
.B ar\c
\&
显示 一个 错误 消息, 
并且 保留 档案中 已有的 同名 成员.
缺省情况下, 新成员 增加到 挡案的 末尾;
可以 通过 使用 `\|\c
.B a\c
\|' `\|\c
.B b\c
\|' 或 `\|\c
.B i\c
\|' 等修饰符 指定 相对于 已有 成员的 位置.
通过 使用 `\|\c
.B v\c
\|' 修饰符 会为每个 插入的 文件 产生 一行 输出,
根据 输出中的 字符 `\|\c
.B a\c
\|' 或
`\|\c
.B r\c
\|' 可以 表明 该文件 是追加的 (没有 删除 以前的成员)
还是 替换的.
.TP
.B t
显示 一个 \c
.I archive\c
\& 
档案 所包含 内容的 \c
.I 列表 \c
\&, 或 档案中的 由 \c
.I files\c
\& 指出的 文件 列表.
通常 只显示 成员的 名称, 如果 使用 `\|\c
.B v\c
\|' 修饰符, 可以 得到 成员的 权限,
时间属性, 属主, 组和 大小.
如果 没有 指出 \c
.I files\c
\&, 档案中的 所有 文件 都会 列出.
如果 档案中
(称为 `\|\c
.B b.a\c
\|') 有多个 同名 成员 (称为 `\|\c
.B fie\c
\|'), `\|\c
.B ar t b.a fie\c
\|' 仅仅 列出 第一个; 要看到 它们的 全部,
必须 要求 完整的 列表
\(em\&在本例中是 `\|\c
.B ar t b.a\c
\|'.
.TP
.B x
从档案中
\c
.I 抽取 \c
\& 成员 (名称为 \c
.I files\c
\&) .  如果 使用 `\|\c
.B v\c
\|' 修饰符, \c
.B ar\c