### 优化后的文本

#### 4.5.1 PAM 和 NSS 访问的配置文件
- `/etc/default/locale`：通过 `pam_env(8)` 模块设置语言环境值（在 Debian 系统中）。
- `/etc/security/limits.conf`：通过 `pam_limits(8)` 模块设置资源限制（如 `ulimit`、`core` 等）。
- `/etc/security/time.conf`：通过 `pam_time(8)` 模块设置时间限制。
- **Systemd 登录管理器配置**：参见 `logind.conf(5)` 和 `/etc/systemd/logind.conf`，以及 `systemd-logind.service(8)`。

**表 4.6: PAM 和 NSS 访问的配置文件**

密码选择的限制是通过 PAM 模块 `pam_unix(8)` 和 `pam_cracklib(8)` 来实现的。这些模块可以通过各自的参数进行配置。

**提示**
PAM 模块在文件名中使用后缀 `.so`。

#### 4.5.2 现代的集中式系统管理
现代的集中式系统管理可以使用轻量目录访问协议（LDAP）服务器进行部署，从而通过网络管理许多类 Unix 和非类 Unix 系统。开源的 LDAP 实现是 OpenLDAP 软件。

**LDAP 服务器配置**
- 使用 `pam_ldap.so` 和 `libnss_ldap` 为 Debian 系统提供账户信息。
- 启用 LDAP 的步骤：
  - 运行独立的 LDAP 守护进程 `slapd(8)` 来建立集中式的 LDAP 服务器。
  - 在 `/etc/pam.d/` 目录中的 PAM 配置文件里，使用 `pam_ldap.so` 替换默认的 `pam_unix.so`。
    - Debian 使用 `/etc/pam_ldap.conf` 作为 `libpam-ldap` 的配置文件，`/etc/pam_ldap.secret` 作为保存 root 密码的文件。
  - 在 `/etc/nsswitch.conf` 文件中更改 NSS 配置，使用 `ldap` 替换默认值（`compat` 或 `file`）。
    - Debian 使用 `/etc/libnss-ldap.conf` 作为 `libnss-ldap` 的配置文件。
  - 为了确保密码的安全性和完整性，必须让 `libpam-ldap` 使用 SSL（或 TLS）连接。
  - 为了减少 LDAP 网络流量，建议在本地运行 `nscd(8)` 来缓存任何 LDAP 搜索结果。

**参考文档**
- 参见由 `libpam-doc` 软件包提供的 `pam_ldap.conf(5)` 文档和 `/usr/share/doc/libpam-doc/html/`，以及 `glibc-doc` 软件包提供的 `info libc 'Name Service Switch'`。

**其他集中式系统管理方法**
- **与 Windows 系统集成用户和组**：
  - 通过 `winbind` 和 `libpam_winbind` 软件包访问 Windows 域服务。
  - 参见 `winbindd(8)` 和 "Integrating MS Windows Networks with Samba"。
- **与古老的类 Unix 系统集成用户和组**：
  - 通过 `nis` 软件包访问 NIS（以前称为 YP）或 NIS+。
  - 参见 "The Linux NIS (YP)/NYS/NIS+ HOWTO"。

#### 4.5.3 “为什么 GNU su 不支持 wheel 组”
这是 Richard M. Stallman 在旧版 `info su` 中所说的一句名言。不用担心：Debian 系统中当前的 `su` 命令使用了 PAM，因此当在 `/etc/pam.d/su` 中启用带有 `pam_wheel.so` 的行后，可以限制非 `wheel` 组的用户 `su` 到 `root` 组的能力。

#### 4.5.4 严格的密码规则
安装 `libpam-cracklib` 软件包可以强制使用严格的密码规则。在一个典型的 GNOME 系统中，`/etc/pam.d/common-password` 文件可能如下所示：

```plaintext
# 主模块
password requisite pam_cracklib.so retry=3 minlen=8 difok=3
password [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass yescrypt

# 如果没有模块成功，则回退
password requisite pam_deny.so

# 如果还没有设置成功代码，则设置一个正返回值
password required pam_permit.so

# 其他模块
password optional pam_gnome_keyring.so
```

#### 4.6 安全认证
注意：这里的信息可能不能完全满足您的安全需求，但应是一个好的起点。

##### 4.6.1 确保互联网上的密码安全
许多流行的传输层服务都使用纯文本来传输包括密码验证信息在内的各类消息。使用纯文本在公网上传输密码是非常不安全的，因为密码很容易被截获。为了确保整个沟通过程的安全性，您可以在“传输层安全（TLS）”协议或者其前身，“安全套接字层（SSL）”协议之上运行这些服务。

**表 4.7: 安全和不安全的服务端口列表**

| 不安全的服务名 | 端口 | 安全的服务名 | 端口 |
|----------------|------|--------------|------|
| www (http)     | 80   | https        | 443  |
| smtp (邮件)    | 25   | ssmtp (smtps)| 465  |
| ftp-data       | 20   | ftps-data    | 989  |
| ftp            | 21   | ftps         | 990  |
| telnet         | 23   | telnets      | 992  |
| imap2          | 143  | imaps        | 993  |
| pop3           | 110  | pop3s        | 995  |
| ldap           | 389  | ldaps        | 636  |

**替代方案**
- 保持使用纯文本通讯，仅使用安全认证协议加密密码，例如：
  - POP 使用 "Authenticated Post Office Protocol" (APOP)
  - SMTP 和 IMAP 使用 "Challenge-Response Authentication Mechanism MD5" (CRAM-MD5)

##### 4.6.2 安全 Shell
安全 Shell (SSH) 程序使用安全认证来提供不安全网络上两个不可信任主机之间的安全加密通讯。它由 OpenSSH 客户端 `ssh(1)` 和后台守护进程 `sshd(8)` 组成。SSH 使用端口转发特性，可以给 POP 和 X 之类的不安全协议通讯建立隧道，使其可以在互联网上安全传输。

客户端可以使用以下方式来认证自己：
- 基于主机的认证
- 公钥认证
- 质疑应答认证
- 密码认证

使用公钥认证可以实现远程免密码登录。参见第 6.3 节。

##### 4.6.3 互联网额外的安全方式
即使您运行 Secure Shell (SSH) 和 Point-to-point tunneling protocol (PPTP) 这样的安全服务，在互联网上仍然有可能遭受暴力猜测密码攻击。使用防火墙策略（参见第 5.7 节），并结合以下安全工具，可以提升安全性。

**表 4.8: 提供额外安全方式的工具列表**

| 软件包        | 流行度 | 大小 | 说明                                       |
|---------------|--------|------|--------------------------------------------|
| knockd        | V:0, I:2 | 110  | 小型 port-knock 后台守护进程和客户端       |
| fail2ban      | V:100, I:113 | 2129 | 禁用造成多个认证错误的 IP                  |
| libpam-shield | V:0, I:0 | 115  | 阻止尝试猜测密码的远程攻击者               |

##### 4.6.4 root 密码安全
为阻止他人使用 root 权限访问您的机器，请执行以下操作：
- 阻止对硬盘的物理访问
- 锁定 UEFI/BIOS 以防止从可移动介质启动
- 为 GRUB 交互式会话设置密码
- 锁定 GRUB 菜单，禁止编辑

如果可以物理访问硬盘，则可以使用以下步骤相对简单地重置密码：
1. 将硬盘拿到一个可以设置 UEFI/BIOS 从 CD 启动的电脑。
2. 使用紧急介质（如 Debian 启动磁盘、Knoppix CD、GRUB CD 等）启动系统。
3. 以读写权限挂载根分区。
4. 编辑根分区的 `/etc/passwd` 文件，将 root 账户条目的第二段留空。

对于使用紧急介质启动的电脑（如 grub-rescue-pc），如果有编辑 GRUB 菜单项的权限，在启动时，可以使用以下更简单的步骤：
1. 使用内核参数启动系统，例如 `root=/dev/hda6 rw init=/bin/sh`。
2. 编辑 `/etc/passwd` 文件，将 root 账户条目的第二段留空。
3. 重启系统。

此时，系统可以无密码访问 root shell。

**注意**
一旦某人拥有 root shell 访问权限，他可以访问任何内容，并重设系统上的任何密码。此外，他可以使用暴力破解工具（如 `john` 和 `crack`）来比较所有用户的密码（参见第 9.5.11 节）。被破解的密码可以用来与其他系统进行比较。

为了避免这些问题，唯一的理论解决方案是使用 `dm-crypt` 和 `initramfs` 加密 root 分区（或 `/etc` 分区）。这样，您总是需要密码来启动系统。

#### 4.7 其他的访问控制
除了基于密码的认证和文件权限外，系统还有其他的访问控制机制。

##### 4.7.1 sudo
`sudo(8)` 程序设计用于使系统管理员可以给用户受限的 root 权限并记录 root 活动。`sudo` 只需要普通用户的密码。安装 `sudo` 软件包并通过设置 `/etc/sudoers` 中的选项来使用它。参见 `/usr/share/doc/sudo/examples/sudoers` 和第 1.1.12 节中的配置示例。

我将 `sudo` 用于单用户系统（参见第 1.1.12 节）是为了防止自己可能做出的愚蠢行为。就我个人而言，我认为使用 `sudo` 会比直接使用 root 账号操作系统更好。例如，以下命令将 `some_file` 的拥有者改变为 `my_name`：

```bash
$ sudo chown my_name some_file
```

当然，如果您知道 root 密码（例如自行安装 Debian 的用户所做的），任何用户账号都可以使用 `su -c` 使任何命令以 root 运行。

##### 4.7.2 PolicyKit
PolicyKit 是一个操作系统组件，用于控制类 Unix 操作系统中的系统权限。较新的 GUI 图形界面程序设计时不作为特权进程运行，而是通过 PolicyKit 与特权进程通信以执行管理操作。

在 Debian 系统中，PolicyKit 限制了属于 `sudo` 组的用户账号的操作。参见 `polkit(8)`。

##### 4.7.3 限制访问某些服务
对系统安全而言，尽可能禁用不必要的服务是一个好主意。网络服务尤其危险。未使用的服务，无论是直接由后台守护进程激活还是通过 super-server 程序激活，都被认为是安全风险。

许多程序（如 `sshd(8)`）使用基于 PAM 的访问控制。还有多种方式来限制对一些服务端程序的访问：
- 配置文件：`/etc/default/program_name`
- 后台守护进程的 Systemd 服务单元配置
- PAM (Pluggable Authentication Modules)
- Super-server 使用 `/etc/inetd.conf`
- TCPwrapper 使用 `/etc/hosts.deny` 和 `/etc/hosts.allow` (`tcpd(8)`)
- SunRPC 使用 `/etc/rpc.conf`
- `atd(8)` 使用 `/etc/at.allow` 和 `/etc/at.deny`
- `crontab(1)` 使用 `/etc/cron.allow` 和 `/etc/cron.deny`
- 网络防火墙或 netfilter 框架

参见第 3.5 节、第 4.5.1 节和第 5.7 节。

**提示**
- NFS 和其他基于 RPC 的程序需要激活 SunRPC 服务。
- 如果您在远程访问最新的 Debian 系统时遇到问题，请检查 `/etc/hosts.deny` 是否存在 `ALL: PARANOID` 这样的配置，并将其注释掉。（但请注意这种行为带来的安全风险。）

##### 4.7.4 Linux 安全特性
Linux 内核已经发展并支持了许多传统 UNIX 实现中没有的安全特性：
- **扩展属性**：扩展了传统的 UNIX 属性（参见 `xattr(7)`）。
- **capabilities(7)**：将传统的超级用户相关特权分开到不同的单元，并能够独立启用和禁用。从 2.2 版本内核开始，Capabilities 成为线程独立的属性。
- **Linux Security Module (LSM) 安全模块框架**：提供了一个多方面的安全检查机制，与新的内核扩展关联。例如：
  - AppArmor
  - Security-Enhanced Linux (SELinux)
  - Smack (Simplified Mandatory Access Control Kernel)
  - Tomoyo Linux

这些扩展的权力模型比普通的类 Unix 安全模型策略更加严格，甚至 root 的权力也被限制。建议您阅读 kernel.org 上的 Linux 安全模块（LSM）框架文档。

**Linux Namespaces**
Linux 的 namespaces 将全局系统资源封装到一个抽象的概念中，全局系统资源在 namespace 内对进程可见，并且每个 namespace 有自己的全局资源隔离实例。对其他进程全局资源的可见性的改变仅限于同一个 namespace 的成员。