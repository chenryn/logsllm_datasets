/etc/default/locale
参数的pam_env(8)模块设置语言环境值（在Debian系统中）
/etc/security/limits.conf 通过pam_linits(8)模块设置资源限制（ulimit、core等等）
/etc/security/time.conf 通过pam_time(8)模块设置时间限制
设置 systemd的登录管理器配置(参见logind.conf(5)和
/etc/systemd/logind.conf
systemd-logind.service(8))
Table4.6: PAM和NSS访问的配置文件
密码选择的限制是通过PAM模块pam_unix(8)和pam_cracklib(8)来实现的。它们可以通过各自的参数进行配置。
提示
PAM模块在文件名中使用后缀“.so”。
4.5.2 现代的集中式系统管理
现代的集中式系统管理可以使用集中式的轻量目录访问协议（LDAP）服务器进行部署，从而通过网络管理许多类
Unix和非类Unix系统。轻量目录访问协议的开源实现是OpenLDAP软件。
LDAP服务器使用带有PAM和NSS的 libpam-ldap和libnss-ldap软件包为Debian系统提供账号信息。需要
一些动作来启用LDAP（我没有使用过这个设置，并且下面的信息纯粹是第二手的信息。请在这种前提下阅读下列内
容。）。
• 你通过运行一个程序，例如独立的LDAP守护进程slapd(8)，来建立集中式的LDAP服务器。
• 你在“/etc/pam.d/”目录中的PAM配置文件里，使用“pam_ldap.so”替代默认值“pam_unix.so”。
– Debian使用“/etc/pam_ldap.conf”作为libpam-ldap的配置文件，“/etc/pam_ldap.secret”作为保
存root密码的文件。
• 你在“/etc/nsswitch.conf”文件中改变NSS配置，使用“ldap”替代默认值（“compat”或“file”）。
Debian参考手册 90/233
– Debian使用“/etc/libnss-ldap.conf”作为libnss-ldap的配置文件。
• 为了密码的安全，你必须让libpam-ldap使用SLL（或TLS）连接。
• 为了确保LDAP网络开销数据的完整性，你必须让libpam-ldap使用SLL（或TLS）连接。
• 为了减少LDAP网络流量，你应该在本地运行nscd(8)来缓存任何LDAP搜索结果。
参见由libpam-doc软件包提供的pam_ldap.conf(5)中的文档和“/usr/share/doc/libpam-doc/html/”，
以及glibc-doc软件包提供的“info libc ’Name Service Switch’”。
类似地，你可以使用其它方法来设置另一种集中式的系统。
• 同Windows系统集成用户和组。
– 通过winbind和libpam_winbind软件包访问Windowsdomain服务.
– 参见winbindd(8)和IntegratingMSWindowsNetworkswithSamba。
• 同古老的类Unix系统集成用户和组。
– 通过nis软件包访问NIS(之前叫YP)或NIS+。
– 参见TheLinuxNIS(YP)/NYS/NIS+HOWTO。
4.5.3 “为什么 GNU su 不支持 wheel 组”
这是在旧的“info su”底部RichardM.Stallman所说的一句名言。别担心：Debian系统中当前的 su命令使用了
PAM，这样当在“/etc/pam.d/su”中启用了带有“pam_wheel.so”的行后，就能够限制非wheel组的用户su到
root组的能力。
4.5.4 严格的密码规则
安装libpam-cracklib软件包你能够强制使用严格的密码规则。
在一个典型的GNOME系统，将会安装libpam-gnome-keyring，”/etc/pam.d/common-password”看起来像：
# here are the per-package modules (the ”Primary” block)
password requisite pam_cracklib.so retry=3 minlen=8 difok=3
password [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass ←-
yescrypt
# here’s the fallback if no module succeeds
password requisite pam_deny.so
# prime the stack with a positive return value if there isn’t one already;
# this avoids us returning an error just because nothing sets a success code
# since the modules above will each just jump around
password required pam_permit.so
# and here are more per-package modules (the ”Additional” block)
password optional pam_gnome_keyring.so
# end of pam-auth-update config
4.6 安全认证
注意
这里的信息也许不能完全满足你的安全需求，但这里应当是一个好的起点。
Debian参考手册 91/233
4.6.1 确保互联网上的的密码安全
许多流行的传输层服务都使用纯文本来传输包括密码验证信息在内的各类消息。使用纯文本在公网上传输密码是很糟
糕的做法，因为这样传输的密码很容易在网上被他人截获。为了确保整个沟通过程，包括密码信息在内都使用加密传
输来确保安全，您可以在“传输层安全（TransportLayerSecurity，TLS）”协议或者其前身，“安全套接字层（Secure
SocketsLayer，SSL）”协议之上运行这些服务。
不安全的服务名 端口 安全的服务名 端口
www(http) 80 https 443
smtp(邮件) 25 ssmtp(smtps) 465
ftp-data 20 ftps-data 989
ftp 21 ftps 990
telnet 23 telnets 992
imap2 143 imaps 993
pop3 110 pop3s 995
ldap 389 ldaps 636
Table4.7: 安全和不安全的服务端口列表
加密消耗CPU时间。作为对CPU有益的替代方案，你可以保持使用纯文本通讯，仅仅使用安全认证协议加密密码，
比如说：POP使用”AuthenticatedPostOfficeProtocol”(APOP)，SMTP和IMAP使用”Challenge-ResponseAuthentication
MechanismMD5”(CRAM-MD5)。（你的邮件客户端通过互联网上你的邮件服务器发送邮件时，最近流行使用新的递交
端口587来代替传统的SMTP端口25，这样可以避免在使用CRAM-MD5认证自己时，网络提供商阻塞25端口。）
4.6.2 安全 Shell
安全Shell(SSH)程序使用安全认证来提供不安全网络上两个不可信任主机之间的安全加密通讯。它由OpenSSH客户
端,ssh(1),和OpenSSH后台守护进程（daemon）,sshd(8)组成.SSH使用端口转发特性，可以给POP和X之类的不
安全的协议通讯建立隧道，使其可以在互联网上安全传输。
客户端可以使用如下方式来认证自己：基于主机的认证、公钥认证、质疑应答认证、密码认证。使用公钥认证，可以
实现远程免密码登录。参见第 6.3 节.
4.6.3 互联网额外的安全方式
即使你运行SecureShell(SSH)和Point-to-pointtunnelingprotocol(PPTP)这样的安全服务，在互联网上，仍然有机会使
用野蛮暴力猜测密码攻击进入。使用防火墙策略(参见第 5.7 节)，并和下面的安全工具一起，可以提升安全形势。
软件包 流行度 大小 说明
小的port-knock后台守护进程（daemon）knockd(1)和客户端
knockd V:0,I:2 110
knock(1)
fail2ban V:100,I:113 2129 禁用造成多个认证错误的IP
libpam-shield V:0,I:0 115 把尝试猜测密码的远程攻击者关在外面
Table4.8: 提供额外安全方式的工具列表
4.6.4 root 密码安全
为阻止人们使用root权限访问你的机器，你需要做下面的操作。
• 阻止对硬盘的物理访问
Debian参考手册 92/233
• 锁住UEFI/BIOS来阻止从可移动介质启动
• 为GRUB交互式会话设置密码
• 锁住GRUB菜单，禁止编辑
如果可以物理访问硬盘，则可以使用下面的步骤，相对简单的重置密码。
1. 将硬盘拿到一个可以设置UEFI/BIOS从CD启动的电脑。
2. 使用紧急介质启动系统（Debian启动磁盘,KnoppixCD,GRUBCD,…）。
3. 用读写访问挂载根分区。
4. 编辑根分区的”/etc/passwd”文件，使root账户条目的第二段为空。
对于grub-rescue-pc，即使用紧急介质启动的电脑，如果有编辑GRUB菜单条目(参见第 3.1.2 节)的权限，在启
动时，使用下面的步骤更加简单。
1. 使用内核参数启动系统来修改一些事情，比如说，”root=/dev/hda6 rw init=/bin/sh”.
2. 编辑”/etc/passwd”文件，使root账户条目的第二段为空。
3. 重启系统。
系统的rootshell现在可以无密码访问了。
注意
一旦某人拥有rootshell访问权限，他能够访问任何内容，并可以重设系统上的任何密码。此外，他可以使用john
和crack等软件包的暴力破解工具来比较所有用户的密码(参见第 9.5.11 节)。被破解的密码，可以用来和其它系
统进行比较。
为避免这些相关问题，仅有的理论上的软件解决方案是使用 dm-crypt 和 initramfs (参见第 9.9 节) 加密 root 分区
(或”/etc”分区)。这样的话，你总是需要密码来启动系统。
4.7 其它的访问控制
在密码基于认证和文件权限之外，系统也有其它的访问控制。
注意
参见第 9.4.15 节来限制内核的安全警告密钥（SAK）功能。
4.7.1 sudo
sudo(8)程序是为了使一个系统管理员可以给用户受限的root权限并记录root活动而设计的。sudo只需要一个普通用
户的密码。安装sudo软件包并通过设置“/etc/sudoers”中的选项来使用它。参见“/usr/share/doc/sudo/examples/sudoers”
和第 1.1.12 节中的配置示例。
我将sudo用于单用户系统（参见第 1.1.12 节）是为了防止自己可能做出的愚蠢行为。就我个人而言，我认为使用
sudo会比使用root账号操作系统来得好。例如，下列命令将“some_file”的拥有者改变为“my_name”。
$ sudo chown my_name some_file
当然如果你知道root密码（比如自行安装Debian的用户所做的），任何用户账号都可以使用“su -c”让任何命令以
root运行。
Debian参考手册 93/233
4.7.2 PolicyKit
PolicyKit是在类Unix操作系统中控制整个系统权限的一个操作系统组件。
较新的GUI图形界面程序设计时便考虑到了不作为特权进程来运行。它们通过PolicyKit来和特权进程通信，从而执
行管理操作。
在Debian系统中，PolicyKit限制了属于sudo组的用户账号的这种操作。
参见polkit(8)。
4.7.3 限制访问某些服务端的服务
对系统安全而言，尽可能的禁用服务程序，是一个好的主意。网络服务是危险的。有不使用的服务，不管是直接由后
台守护进程（daemon）激活，还是通过super-server程序激活，都被认为是安全风险。
许多程序,比如说sshd(8),使用基于PAM的访问控制。也还有许多方式来限制访问一些服务端的程序。
• 配置文件: ”/etc/default/program_name”
• 后台守护进程（daemon）的Systemd服务单元配置
• PAM(PluggableAuthenticationModules)
• super-server使用”/etc/inetd.conf”
• TCPwrapper使用”/etc/hosts.deny”和”/etc/hosts.allow”,tcpd(8)
• SunRPC”使用/etc/rpc.conf”
• atd(8)使用”/etc/at.allow”和”/etc/at.deny”
• crontab(1)使用”/etc/cron.allow”和”/etc/cron.deny”
• Networkfirewall或netfilter框架
参见第 3.5 节、第 4.5.1 节和第 5.7 节。
提示
NFS和其它基于RPC的程序，需要激活SunRPC服务。
提示
如果你远程访问最新的Debian系统有问题，看下在”/etc/hosts.deny”里是否存在”ALL:PARANOID”这样讨厌
的配置，请把它注释掉。(但是你必须注意这种行为所带来的安全风险。)
4.7.4 Linux 安全特性
Linux内核已经发展和支持在传统的UNIX实现里面没有的安全特征。
Linux支持扩展属性，扩展了传统的UNIX属性(参见xattr(7))。
Linux把传统的超级用户相关的特权分开到不同的单元，被称为capabilities(7)，它能够独立的启用和禁用。从2.2
版本内核开始，Capabilities是一个线程独立的属性。
LinuxSecurityModule(LSM)安全模块框架提供了一个多方面的安全检查机制，和新的内核扩展关联。例如：
• AppArmor
Debian参考手册 94/233
• Security-EnhancedLinux(SELinux)
• Smack(SimplifiedMandatoryAccessControlKernel)
• TomoyoLinux
这些扩展紧缩的权力模型比普通的类Unix安全模型策略更加严格，甚至root的权力也被限制。建议你阅读kernel.org
上的Linux安全模块（LSM）框架文档。
Linux的namespaces封装了一个全局系统资源到一个抽象的概念，全局系统资源在namespace内对进程可见，并且
namespace 有它们自己的全局资源隔离实例。对其它进程全局资源的可见性的改变是，同一个 namespace 的成员可