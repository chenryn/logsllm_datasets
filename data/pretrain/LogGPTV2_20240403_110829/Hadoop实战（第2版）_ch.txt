### 优化后的文本

#### 代码示例：列出成员
```java
16 for (String child : children) {
17     System.out.println(child);
18 }
19 
20 public static void main(String[] args) throws IOException, KeeperException, InterruptedException {
21     ListMembers lm = new ListMembers();
22     lm.createZKInstance();
23     lm.list("/ZKGroup");
24 }
25 }
```

在执行删除组操作时，我们首先需要删除组目录下的所有成员。当组目录为空时，再将组目录删除。具体步骤如下：
1. 调用 `getChildren()` 函数获取组目录的所有成员。
2. 调用 `delete()` 函数逐一删除这些成员。
3. 最后删除组目录。

详见代码清单 15-13。

#### 代码清单 15-13: DelGroup
```java
1 package cn.edu.ruc.cloudcomputing.book.chapter15;
2 
3 import java.io.IOException;
4 import java.util.List;
5 
6 import org.apache.zookeeper.KeeperException;
7 
8 public class DelGroup extends ZooKeeperInstance {
9     public void delete(String groupPath) throws KeeperException, InterruptedException {
10         List<String> children = zk.getChildren(groupPath, false);
11         // 如果不空，则进行删除操作
12         if (!children.isEmpty()) {
13             // 删除所有子节点
14             for (String child : children) {
15                 zk.delete(groupPath + "/" + child, -1);
16             }
17         }
18         // 删除组目录节点
19         zk.delete(groupPath, -1);
20     }
21 
22     public static void main(String[] args) throws IOException, KeeperException, InterruptedException {
23         DelGroup dg = new DelGroup();
24         dg.createZKInstance();
25         dg.delete("/ZKGroup");
26         dg.ZKclose();
27     }
28 }
```

限于篇幅，本章只介绍了关于 ZooKeeper 的一些基本知识。希望通过本章的学习，大家能够对 ZooKeeper 的机制有一个全面的了解。建议大家亲自动手编写 ZooKeeper 程序，以促进对 ZooKeeper 更深入的理解。

### BooKeeper
BooKeeper 提供了副本功能，旨在提供可靠的日志记录。在 BooKeeper 中，服务器被称为账本（Bookies），每个账本包含不同的账户（Ledgers），每个账户由多条记录（Entry）组成。如果使用普通的磁盘存储日志数据，那么日志数据可能遭到破坏或丢失。BooKeeper 为每一份日志提供了分布式的存储，并采用了大多数（quorum）的概念，即只要集群中的大多数机器可用，该日志就一直有效。

BooKeeper 通过客户端进行操作，客户端可以执行添加账户、打开账户、添加账户记录和读取账户记录等操作。BooKeeper 的服务依赖于 ZooKeeper，可以说 BooKeeper 是基于 ZooKeeper 的一致性及分布式特性提供了另一种可靠性服务。如图 15-12 所示为 BooKeeper 的架构。

从上图可以看出，BooKeeper 包含四类角色：
- **账本（Bookie）**：账本是 BooKeeper 的存储服务器，它存储一个个账本（节点）。在一个 BooKeeper 系统中存在多个账本，每个账户被不同的账本所存储。为了提高性能，记录并不是真正地写入所有节点，而是选择集群的一个大多数集进行存储。这使得 BooKeeper 具有良好的扩展性。
- **账户（Ledger）**：账户中存储一系列记录（Entry），每条记录包含一定的字段。记录只能附加，不能修改。只有当记录被大多数账本节点存储时，才被认为是存储成功。
- **客户端（BookKeeper Client）**：客户端与 BooKeeper 应用程序交互，允许应用程序创建账户、写入账户等。
- **元数据存储服务（Metadata Storage Service）**：元数据信息存储在 ZooKeeper 集群中，包括账本和账户的信息。

应用程序在使用账本时，首先需要创建一个账户。系统会将账本的元数据信息写入 ZooKeeper。每个账户在同一时刻只能有一个写实例。在其他实例进行读操作之前，必须先关闭写实例。如果写操作因故障未能正常关闭，下一个尝试打开账户的实例将需要先恢复并正确关闭写操作。在进行写操作时，还需将最后一次写记录存储到 ZooKeeper 中，以便在恢复时使用。

### 本章小结
ZooKeeper 作为 Hadoop 项目的一个子项目，是 Hadoop 集群管理中不可或缺的模块。它主要用于控制集群中的数据，如管理 Hadoop 集群中的 NameNode 和 HBase 中的 Master Election、Server 之间的状态同步等。此外，它还在其他多种场合发挥着重要作用。

本章介绍了 ZooKeeper 的基本知识、配置、使用和管理等内容，并深入探讨了其重要功能的实现机制及其应用场景。ZooKeeper 作为一个用于协调分布式程序的服务，将在更多场合发挥越来越重要的作用。

### 第 16 章 Avro 详解
#### 本章内容
- Avro 介绍
- Avro 的 C/C++ 实现
- Avro 的 Java 实现
- GenAvro（Avro IDL）语言
- Avro SASL 概述
- 本章小结

#### 16.1 Avro 介绍
Avro 是 Hadoop 下相对独立的子项目，是一个数据序列化系统。类似于其他序列化系统，Avro 可以将数据结构或对象转换成便于存储或传输的格式，特别适用于大规模数据的存储和交换。Avro 提供以下特性和功能：
- 丰富的数据结构类型；
- 快速可压缩的二进制数据形式；
- 存储持久数据的文件容器；
- 远程过程调用（RPC）；
- 简单的动态语言结合功能。

Avro 依赖于模式（Schema）。模式定义了数据的结构，减少了写入每个数据资料的开销，使序列化快速而轻巧。这种数据及其模式的自我描述方便了动态脚本语言的使用。

当 Avro 数据存储到文件中时，其模式也随之存储，这样任何程序都可以处理文件。如果读取数据时使用的模式与写入数据时使用的模式不同，也可以轻松解决，因为读取和写入的模式都是已知的。如图 16-1 所示，Avro 将用户定义的模式和具体的数据编码成二进制序列存储在对象容器文件中。

当在 RPC 中使用 Avro 时，服务器和客户端可以在握手连接时交换模式。服务器和客户端拥有彼此全部的模式，因此即使通信双方使用的协议不同，也可以轻松解析数据。如图 16-2 所示，协议中定义了用于传输的消息，消息使用框架后放入缓冲区中进行传输。

Avro 模式使用 JSON 定义，对于已经拥有 JSON 库的语言来说，可以容易地实现。

Avro 提供与 Thrift 和 Protocol Buffers 类似的功能，但在一些基础方面有所不同：
- 动态类型：Avro 不需要生成代码、模式和数据存放在一起，整个数据处理过程不需要生成代码或静态数据类型。
- 未标记的数据：由于读取数据时模式是已知的，因此需要和数据一起编码的类型信息很少，序列化的规模也较小。
- 不需要用户指定字段号：即使模式发生了改变，但新旧模式都是已知的，可以通过使用字段名称来解决差异问题。

下面详细介绍模式声明和 Avro 的具体使用。

#### 16.1.1 模式声明
模式声明主要定义数据的类型。Avro 中的模式可以使用 JSON 通过以下方式表示：
1. JSON 字符串，指定已定义的类型。
2. JSON 对象，其形式为：
   ```json
   {"type": "typeName", ...attributes...}
   ```
   其中，`typeName` 可以是原生的或衍生的类型名称。
3. JSON 数组，表示嵌入类型的联合。

声明的类型必须是 Avro 所支持的数据类型，包括原始类型和复杂类型。

**原始类型**包括：
- `null`：没有值。
- `boolean`：二进制值。
- `int`：32 位有符号整数。
- `long`：64 位有符号整数。
- `float`：单精度（32 位）IEEE 754 浮点数。
- `double`：双精度（64 位）IEEE 754 浮点数。
- `bytes`：8 位无符号字节序列。
- `string`：Unicode 字符序列。

原始类型没有特定的属性，其名称可以通过类型来定义，例如模式 `"string"` 相当于：
```json
{"type": "string"}
```

**复杂类型**包括：
1. **记录（records）**
   记录使用类型名称 `record` 并支持以下属性：
   - `name`：提供记录名称的 JSON 字符串（必须）。
   - `namespace`：限定名称的 JSON 字符串。
   - `doc`：向模式使用者提供说明的 JSON 字符串（可选）。
   - `aliases`：字符串的 JSON 数组，为记录提供替代名称（可选）。
   - `fields`：一个 JSON 数组，用来列出字段（必须）。每个字段就是一个 JSON 对象，包含以下属性：
     - `name`：提供记录名称的 JSON 字符串（必须）。
     - `doc`：为使用者提供字段说明的 JSON 字符串（可选）。
     - `type`：定义模式的 JSON 对象，或者记录定义的 JSON 字符串（必须）。
     - `default`：该字段的默认值，用于读取缺少该字段的实例（可选）。
     - `order`：指定该字段如何影响记录的排序（可选）。有效的值有 `"ascending"`（默认）、`"descending"` 或 `"ignore"`。
     - `aliases`：字符串的 JSON 数组，为该字段提供可选的名称（可选）。

   例如，一个 64 位的链表可以定义为：
   ```json
   {
       "type": "record",
       "name": "LongList",
       "aliases": ["LinkedLongs"],
       "fields": [
           {"name": "value", "type": "long"},
           {"name": "next", "type": ["LongList", "null"]}
       ]
   }
   ```

2. **枚举（enums）**
   枚举使用类型名称 `enum` 并支持以下属性：
   - `name`：提供实例名称的 JSON 字符串（必须）。
   - `namespace`：限定名称的 JSON 字符串。
   - `aliases`：字符串的 JSON 数组，为枚举提供替代名称（可选）。
   - `doc`：对模式使用者提供说明的 JSON 字符串（可选）。
   - `symbols`：列出标记的 JSON 数组（必须）。枚举中的所有标记必须是唯一的，不允许有重复的标记。

   例如，纸牌游戏可以定义为：
   ```json
   {
       "type": "enum",
       "name": "Suit",
       "symbols": ["SPADES", "HEARTS", "DIAMONDS", "CLUBS"]
   }
   ```

3. **数组（arrays）**
   数组使用类型名称 `array` 并支持一个属性。