5
Implementation and Evaluation
CONIKS provides a framework for integrating key veriﬁ-
cation into communications services that support end-to-
end encryption. To demonstrate the practicality of CON-
IKS and how it interacts with existing secure communi-
cations services, we implemented a prototype CONIKS
Chat, a secure chat service based on the Off-the-Record
Messaging [8] (OTR) plug-in for the Pidgin instant mes-
saging client
[1, 26]. We implemented a stand-alone
CONIKS server in Java (∼2.5k sloc), and modiﬁed the
OTR plug-in (∼2.2k sloc diff) to communicate with our
server for key management. We have released a basic
reference implementation of our prototype on Github.8
Implementation Details
5.1
CONIKS Chat consists of an enhanced OTR plug-in for
the Pidgin chat client and a stand-alone CONIKS server
which runs alongside an unmodiﬁed Tigase XMPP server.
Clients and servers communicate using Google Protocol
Buffers [2], allowing us to deﬁne speciﬁc message for-
mats. We use our client and server implementations for
our performance evaluation of CONIKS.
Our implementation of the CONIKS server provides
the basic functionality of an identity provider. Every ver-
sion of the directory (implemented as a Merkle preﬁx
tree) as well as every generated STR are persisted in a
MySQL database. The server supports key registration
in the namespace of the XMPP service, and the directory
efﬁciently generates the authentication path for proofs of
inclusion and proofs of absence, both of which implicitly
prove the proper construction of the directory. Our server
implementation additionally supports STR exchanges be-
tween identity providers.
The CONIKS-OTR plug-in automatically registers a
user’s public key with the server upon the generation of a
new key pair and automatically stores information about
the user’s binding locally on the client to facilitate future
consistency checks. To facilitate CONIKS integration,
we leave the DH-based key exchange protocol in OTR
unchanged, but replace the socialist millionaires proto-
col used for key veriﬁcation with a public key lookup at
the CONIKS server. If two users, Alice and Bob, both
having already registered their keys with the coniks.org
identity provider, want to chat, Alice’s client will auto-
matically request a proof of inclusion for Bob’s binding
in coniks.org’s most recent version of the directory. Upon
8https://github.com/coniks-sys/coniks-ref-
implementation
receipt of this proof, Alice’s client automatically veriﬁes
the authentication path for Bob’s name-to-key binding (as
described in §4.1.2), and caches the newest information
about Bob’s binding if the consistency checks pass. If
Bob has not registered his key with coniks.org, the client
falls back to the original key veriﬁcation mechanism. Ad-
ditionally, Alice’s client and Bob’s clients automatically
perform all monitoring and auditing checks for their re-
spective bindings upon every login and cache the most
recent proofs.
CONIKS Chat currently does not support key changes.
Furthermore, our prototype only supports the default
lookup policy for name-to-key bindings. Fully imple-
menting these features is planned for the near future.
5.2 Choice of Cryptographic Primitives
To provide a 128-bit security level, we use SHA-256 as
our hash function and EC-Schnorr signatures [21, 63].
Unfortunately Schnorr signatures (and related discrete-
log based signature schemes like DSA [36]) are not imme-
diately applicable as a VUF as they are not deterministic,
requiring a random nonce which the server can choose
arbitrarily.9 In Appendix A we describe a discrete-log
based scheme for producing a VUF (and indeed, a VRF)
in the random-oracle model. Note that discrete-log based
VUFs are longer than basic signatures: at a 128-bit secu-
rity level using elliptic curves, we expect signatures of
size 512 bits and VUF proofs of size 768 bits.
Alternately, we could employ a deterministic signature
scheme like classic RSA signature [59] (using a determin-
istic padding scheme such as PKCS v. 1.5 [31]), although
this is not particularly space-efﬁcient at a 128-bit security
level. Using RSA-2048 provides approximately 112 bits
of security [3] with proofs of size 2048 bits. 10
Using pairing-based crypto, BLS “short signatures” [7]
are also deterministic and provide the best space efﬁciency
with signature sizes of just 256 bits, making them an efﬁ-
cient choice both for signatures and VUF computations.
BLS signatures also support aggregation, that is, multi-
ple signatures with the same key can be compressed into
a single signature, meaning the server can combine the
signatures on n consecutive roots. However there is not
widespread support for pairing calculations required for
BLS, making it more difﬁcult to standardize and deploy.
We evaluate performance in Table 1 in the next section
for all three potential choices of signature/VUF scheme.
9There are deterministic variants of Schnorr or DSA [5, 49] but these
are not veriﬁably deterministic as they generate nonces pseudorandomly
as a symmetric-key MAC of the data to be signed.
10We might tolerate slightly lower security in our VUF than our signa-
ture scheme, as this key only ensures privacy and not non-equivocation.
USENIX Association  
9
24th USENIX Security Symposium  391
Lookup Cost. Every time a client looks up a user’s
binding, it needs to download the current STR, a proof
of of inclusion consisting of about lg2(N) + 1 hashes
plus one 96-byte VUF proof (proving the validity of the
binding’s private index). This will require downloading
32· (lg2(N) +1) +96 ≈ 1216 bytes. Verifying the proof
will require up to lg2(N) + 1 hash veriﬁcations on the
authentication path as well as one VUF veriﬁcation. On a
2 GHz Intel Core i7 laptop, verifying the authentication
path returned by a server with 10 million users, required
on average 159 µs (sampled over 1000 runs, with σ = 30).
Verifying the signature takes approximately 400 µs, domi-
nating the cost of verifying the authentication path. While
mobile-phone clients would require more computation
time, we do not believe this overhead presents a signiﬁ-
cant barrier to adoption.
Monitoring Cost. In order for any client to monitor the
consistency of its own binding, it needs fetch proof that
this binding is validly included in the epoch’s STR. Each
epoch’s STR signature (64 bytes) must be downloaded
and the client must fetch its new authentication path. How-
ever, the server can signiﬁcantly compress the length of
this path by only sending the hashes on the user’s path
which have changed since the last epoch. If n changes
are made to the tree, a given authentication path will have
lg2(n) expected changed nodes. (This is the expected
longest preﬁx match between the n changed indices and
the terminating index of the given authentication path.)
Therefore each epoch requires downloading an average
of 64 + lg2(n)· 32 ≈ 736 bytes. Veriﬁcation time will be
similar to verifying another user’s proof, dominated by
the cost of signature veriﬁcation. While clients need to
fetch each STR from the server, they are only required to
store the most recent STR (see §5.3).
To monitor a binding for a day, the client must down-
load a total of about 19.1 kB. Note that we have assumed
users update randomly throughout the day, but for a ﬁxed
number of updates this is actually the worst-case scenario
for bandwidth consumption; bursty updates will actually
lead to a lower amount of bandwidth as each epoch’s
proof is lg2(n) for n changes. These numbers indicate
that neither bandwidth nor computational overheads pose
a signiﬁcant burden for CONIKS clients.
Auditing cost. For a client or other auditor tracking all
of a provider’s STRs, assuming the policy ﬁeld changes
rarely, the only new data in an STR is the new timestamp,
the new tree root and signature (the previous STR and
epoch number can be inferred and need not be transmit-
ted). The total size of each STR in minimal form is just
104 bytes (64 for the signature, 32 for the root and 8 for a
timestamp), or 2.5 kB per day to audit a speciﬁc provider.
Figure 7: Mean time to re-compute the tree for a new
epoch with 1K updated nodes. The x-axis is logarith-
mic and each data point is the mean of 10 executions.
Error bars indicate standard deviation.
5.3 Performance Evaluation
To estimate the performance of CONIKS, we collect both
theoretical and real performance characteristics of our
prototype implementation. We evaluate client and server
overheads with the following parameters:
• A single provider might support N ≈ 232 users.
• Epochs occur roughly once per hour.
• Up to 1% of users change or add keys per day, mean-
ing n ≈ 221 directory updates in an average epoch.
• Servers use a 128-bit cryptographic security level.
Server Overheads. To measure how long it takes for a
server to compute the changes for an epoch, we evaluated
our server prototype on a 2.4 GHz Intel Xeon E5620
machine with 64 GB of RAM allotted to the OpenJDK 1.7
JVM. We executed batches of 1000 insertions (roughly 3
times the expected number of directory updates per epoch)
into a Merkle preﬁx with 10 M users, and measured the
time it took for the server to compute the next epoch.
Figure 7 shows the time to compute a version of the
directory with 1000 new entries as the size of the original
namespace varies. For a server with 10 M users, com-
puting a new Merkle tree with 1000 insertions takes on
average 2.6 s. As epochs only need to be computed every
hour, this is not cumbersome for a large service provider.
These numbers indicate that even with a relatively unopti-
mized implementation, a single machine is able to handle
the additional overhead imposed by CONIKS for work-
loads similar in scale to a medium-sized communication
providers (e.g., TextSecure) today.
While our prototype server implementation on a com-
modity machine comfortably supports 10M users, we note
that due to the statistically random allocation of users to
indices and the recursive nature of the tree structure, the
task parallelizes near-perfectly and it would be trivial
to scale horizontally with additional identical servers to
compute a directory with billions of users.
392  24th USENIX Security Symposium 
10
USENIX Association
#
VUFs
#
sigs.
lookup (per binding)
monitor (epoch)
monitor (day)
audit (epoch, per STR)
audit (day, per STR)
1
0
1
0
0
1
1
k†
1
k†
#
hashes
lgN + 1
lgn
k lgn
1
k
approx. download size
EC
1216
726
17.6
96
2.3
1568
928
22.6
288
6.9
RSA
B
B
kB
B
kB
BLS
B 1120
704
B
kB
16.1
64
B
kB
0.8
B
B
kB
B
kB
Table 1: Client bandwidth requirements, based the number of signatures, VUFs and hashes downloaded for
lookups, monitoring, and auditing. Sizes are given assuming a N ≈ 232 total users, n ≈ 221 changes per epoch,
and k ≈ 24 epochs per day. Signatures that can be aggregated into a single signature to transmit in the BLS
signature scheme are denoted by †.
6 Discussion
6.1 Coercion of Identity Providers
Government agencies or other powerful adversaries may
attempt to coerce identity providers into malicious behav-
ior. Recent revelations about government surveillance
and collection of user communications data world-wide
have revealed that governments use mandatory legal pro-
cess to demand access to information providers’ data
about users’ private communications and Internet activity
[9, 23, 24, 51, 52]. A government might demand that
an identity provider equivocate about some or all name-
to-key bindings. Since the identity provider is the entity
actually mounting the attack, a user of CONIKS has no
way of technologically differentiating between a mali-
cious insider attack mounted by the provider itself and
this coerced attack [18]. Nevertheless, because of the con-
sistency and non-equivocation checks CONIKS provides,
users could expose such attacks, and thereby mitigate
their effect.
Furthermore, running a CONIKS server may provide
some legal protection for service providers under U.S.
law for providers attempting to ﬁght legal orders, because
complying with such a demand will produce public ev-
idence that may harm the provider’s reputation. (Legal
experts disagree about whether and when this type of
argument shelters a provider[45].)
6.2 Key Loss and Account Protection
CONIKS clients are responsible for managing their pri-
vate keys. However, CONIKS can provide account pro-
tection for users who enforce the paranoid key change
policy and have forfeit their username due to key loss.
Even if Alice’s key is lost, her identity remains secure;
she can continue performing consistency checks on her
old binding. Unfortunately, if a future attacker manages
to obtain her private key, that attacker may be able to