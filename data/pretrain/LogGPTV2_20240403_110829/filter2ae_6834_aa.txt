**作者：LoRexxar'@知道创宇404实验室**  
**日期：2019年6月12日**  
**英文版本：**
2019年6月11日，RIPS团队在团队博客中分享了一篇[MyBB `、``，然后输出到文章内容中，而这种方式会以事先规定好的方式解析和处理内容以及标签，也就是所谓的白名单防御，而这种语法被称之为[bbcode](https://zh.wikipedia.org/wiki/BBCode)。
这样一来攻击者就很难构造储存型xss了，因为除了这些标签以外，其他的标签都不会被解析（所有的左右尖括号以及双引号都会被转义）。
    function htmlspecialchars_uni($message)
    {
        $message = preg_replace("#&(?!\#[0-9]+;)#si", "&amp;", $message); // Fix & but allow unicode
        $message = str_replace("", "&gt;", $message);
        $message = str_replace("\"", "&quot;", $message);
        return $message;
    }
正所谓，有人的地方就会有漏洞。
在这看似很绝对的防御方式下，我们不如重新梳理下Mybb中的处理过程。
在`/inc/class_parse.php` line 435 的 `parse_mycode`函数中就是主要负责处理这个问题的地方。
        function parse_mycode($message, $options=array())
        {
            global $lang, $mybb;
            if(empty($this->options))
            {
                $this->options = $options;
            }
            // Cache the MyCode globally if needed.
            if($this->mycode_cache == 0)
            {
                $this->cache_mycode();
            }
            // Parse quotes first
            $message = $this->mycode_parse_quotes($message);
            // Convert images when allowed.
            if(!empty($this->options['allow_imgcode']))
            {
                $message = preg_replace_callback("#\[img\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is", array($this, 'mycode_parse_img_callback1'), $message);
                $message = preg_replace_callback("#\[img=([1-9][0-9]*)x([1-9][0-9]*)\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is", array($this, 'mycode_parse_img_callback2'), $message);
                $message = preg_replace_callback("#\[img align=(left|right)\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is", array($this, 'mycode_parse_img_callback3'), $message);
                $message = preg_replace_callback("#\[img=([1-9][0-9]*)x([1-9][0-9]*) align=(left|right)\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is", array($this, 'mycode_parse_img_callback4'), $message);
            }
            else
            {
                $message = preg_replace_callback("#\[img\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is", array($this, 'mycode_parse_img_disabled_callback1'), $message);
                $message = preg_replace_callback("#\[img=([1-9][0-9]*)x([1-9][0-9]*)\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is", array($this, 'mycode_parse_img_disabled_callback2'), $message);
                $message = preg_replace_callback("#\[img align=(left|right)\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is", array($this, 'mycode_parse_img_disabled_callback3'), $message);
                $message = preg_replace_callback("#\[img=([1-9][0-9]*)x([1-9][0-9]*) align=(left|right)\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is", array($this, 'mycode_parse_img_disabled_callback4'), $message);
            }
            // Convert videos when allow.
            if(!empty($this->options['allow_videocode']))
            {
                $message = preg_replace_callback("#\[video=(.*?)\](.*?)\[/video\]#i", array($this, 'mycode_parse_video_callback'), $message);
            }
            else
            {
                $message = preg_replace_callback("#\[video=(.*?)\](.*?)\[/video\]#i", array($this, 'mycode_parse_video_disabled_callback'), $message);
            }
            $message = str_replace('$', '&#36;', $message);
            // Replace the rest
            if($this->mycode_cache['standard_count'] > 0)
            {
                $message = preg_replace($this->mycode_cache['standard']['find'], $this->mycode_cache['standard']['replacement'], $message);
            }
            if($this->mycode_cache['callback_count'] > 0)
            {
                foreach($this->mycode_cache['callback'] as $replace)
                {
                    $message = preg_replace_callback($replace['find'], $replace['replacement'], $message);
                }
            }
            // Replace the nestable mycode's
            if($this->mycode_cache['nestable_count'] > 0)
            {
                foreach($this->mycode_cache['nestable'] as $mycode)
                {
                    while(preg_match($mycode['find'], $message))
                    {
                        $message = preg_replace($mycode['find'], $mycode['replacement'], $message);
                    }
                }
            }
            // Reset list cache
            if($mybb->settings['allowlistmycode'] == 1)
            {
                $this->list_elements = array();
                $this->list_count = 0;
                // Find all lists
                $message = preg_replace_callback("#(\[list(=(a|A|i|I|1))?\]|\[/list\])#si", array($this, 'mycode_prepare_list'), $message);
                // Replace all lists
                for($i = $this->list_count; $i > 0; $i--)
                {
                    // Ignores missing end tags
                    $message = preg_replace_callback("#\s?\[list(=(a|A|i|I|1))?&{$i}\](.*?)(\[/list&{$i}\]|$)(\r\n?|\n?)#si", array($this, 'mycode_parse_list_callback'), $message, 1);
                }
            }
            $message = $this->mycode_auto_url($message);
            return $message;
        }
当服务端接收到你发送的内容时，首先会处理解析`[img]`相关的标签语法，然后如果开启了`$this->options['allow_videocode']`（默认开启），那么开始解析`[video]`相关的语法，然后是`[list]`标签。在488行开始，会对`[url]`等标签做相应的处理。
    if($this->mycode_cache['callback_count'] > 0)
        {
            foreach($this->mycode_cache['callback'] as $replace)