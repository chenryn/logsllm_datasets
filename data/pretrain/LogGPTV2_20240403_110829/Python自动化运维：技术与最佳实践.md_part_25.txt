## 优化后的文本

### 第11章 统一网络控制器Func详解

#### 7. 系统硬件信息模块
- **功能**：HardwareModule 返回远程主机的系统硬件信息。
- **命令行模式**：
  ```bash
  #func "SN2013-08-022" call hardware info
  ```
- **API模式**：
  ```python
  import func.overlord.client as func
  client = func.Client("SN2013-08-022")
  print(client.hardware.info(with_devices=True))
  ```

#### 6. iptables管理模块
- **功能**：IPtablesModule 实现远程主机iptables配置。
- **命令行模式**：
  ```bash
  #func "SN2013-08-022" call iptables port drop_to 8080
  ```
- **API模式**：
  ```python
  import func.overlord.client as func
  client = func.Client("SN2013-08-022")
  client.iptables.port.drop_to(8080, "192.168.0.10", "tcp", "dst")
  ```

#### 5. 拷贝远程文件模块
- **功能**：GetFileModule 实现从远程Linux主机拉取指定文件到主控端目录（不支持命令行模式）。
- **API模式**：
  ```python
  import func.overlord.client as func
  client = func.Client("SN2013-08-022")
  client.getfile.get("/path/to/remote/file", "/path/to/local/directory")
  ```

#### 10. 系统服务管理模块
- **功能**：ServiceModule 实现远程Linux主机系统服务管理。
- **命令行模式**：
  ```bash
  #func "SN2013-08-022" call service start nginx
  ```
- **API模式**：
  ```python
  import func.overlord.client as func
  client = func.Client("SN2013-08-022")
  client.service.start("nginx")
  ```

#### 9. 系统进程管理模块
- **功能**：ProcessModule 实现远程Linux主机进程管理。
- **命令行模式**：
  ```bash
  #func "SN2013-08-022" call process kill nginx SIGHUP
  ```
- **API模式**：
  ```python
  import func.overlord.client as func
  client = func.Client("SN2013-08-022")
  client.process.kill("nginx", "SIGHUP")
  ```

#### 8. 系统Mount管理模块
- **功能**：MountModule 实现远程Linux主机挂载和卸载分区管理。
- **命令行模式**：
  ```bash
  #func "SN2013-08-022" call mount list
  #func "SN2013-08-022" call mount umount /data
  ```
- **API模式**：
  ```python
  import func.overlord.client as func
  client = func.Client("SN2013-08-022")
  client.mount.list()
  client.mount.umount("/data")
  ```

#### 11. 系统内核参数管理模块
- **功能**：SysctlModule 实现远程Linux主机系统内核参数管理。
- **命令行模式**：
  ```bash
  #func "SN2013-08-022" call sysctl list
  ```
- **API模式**：
  ```python
  import func.overlord.client as func
  client = func.Client("SN2013-08-022")
  client.sysctl.list()
  client.sysctl.set('net.ipv4.tcp_syncookies', 1)
  client.sysctl.get('net.ipv4.icmp_echo_ignore_broadcasts')
  ```

### 自定义Func模块
1. **自定义模块步骤**：
   - **生成模块**：通过`func-create-module`命令创建模块初始模板。
   - **编写逻辑**：填充业务功能逻辑，生成模块代码。
   - **分发模块**：将编写完成的模块分发到所有被控主机。
   - **执行模块**：在目标主机上执行已经分发完成的模块。

2. **示例**：
   - **生成模块**：
     ```bash
     cd /usr/lib/python2.6/site-packages/func/minion/modules
     func-create-module
     ```
   - **编写逻辑**：
     ```python
     class Mymodule(func_module.FuncModule):
         version = "0.0.1"
         description = "My module for func."

         def get_system_logs(self, num_lines):
             command = f"/bin/tail -n {num_lines} /var/log/messages"
             cmdref = sub_process.Popen(command, stdout=sub_process.PIPE, close_fds=True)
             data = cmdref.communicate()
             return (cmdref.returncode, data[0], data[1])
     ```
   - **分发模块**：
     ```python
     import xmlrpclib
     import func.overlord.client as fc

     client = fc.Client("*")
     module = sys.argv[1]
     pythonmodulepath = "/usr/lib/python2.6/site-packages/func/minion/modules/"
     with open(pythonmodulepath + module, "r") as f:
         fb = f.read()
     data = xmlrpclib.Binary(fb)
     print(client.copyfile.copyfile(pythonmodulepath + module, data))
     print(client.command.run("/etc/init.d/funcd restart"))
     ```
   - **执行模块**：
     检查被控主机是否成功分发了`mymodule.py`文件，并执行相关命令。

### 非Python API接口支持
- **功能**：Func通过非Python API实现远程调用，支持YAML与JSON格式。
- **示例**：
  - **JSON格式**：
    ```json
    {
      "clients": "*",
      "async": false,
      "nforks": 1,
      "module": "command",
      "method": "run",
      "parameters": "/bin/echo Hello World"
    }
    ```
  - **YAML格式**：
    ```yaml
    clients: "*"
    async: false
    nforks: 1
    module: "command"
    method: "run"
    parameters: "/bin/echo Hello World"
    ```

### Facts支持
- **功能**：Facts类似于Saltstack的grains、Ansible的Facts，用于获取远程主机的系统信息。
- **示例**：
  - **and表达式**：
    ```bash
    func "*" call fact --filter "kernel_version>=2.6,os_name=CentOS"
    ```
  - **or表达式**：
    ```bash
    func "*" call fact --filteror "kernel_version>=2.6,os_name=CentOS"
    ```

### 环境说明
- **操作系统版本**：CentOS release 6.4
- **相关软件**：Python 2.6.6, Hadoop 1.2.1, JDK 1.6.0_45, mrjob 0.4.2
- **角色分配**：
  - **Master**：NameNode, SecondaryNameNode, JobTracker
  - **Slave**：DataNode, TaskTracker
- **主机名及IP地址**：
  - SN2013-08-020: 192.168.1.20
  - SN2012-07-010: 192.168.1.21
  - SN2012-07-011: 192.168.1.22

希望这些优化后的文本能更好地帮助你理解和使用Func工具。