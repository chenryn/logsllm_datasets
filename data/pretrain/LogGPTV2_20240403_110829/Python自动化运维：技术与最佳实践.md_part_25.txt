print client.hardware.info(with_devices=True)
client =func.C1ient("sN2013-08-022")
import func.overlord.client as func
（3）API模式
#func "SN2013-08-022" cal1 hardware hal_info
#func"sN2013-08-022"call hardware info
（2）命令行模式
HardwareModule返回远程主机系统硬件信息。
（1）功能
7.系统硬件信息模块
client.iptables.port.drop_to(8080,
client
import func.overlord.client as func
（3）API模式
（2）命令行模式
IPtablesModule实现远程主机 iptables 配置。
（1）功能
6.iptables管理模块
client=func.C1ient("sN2013-08-022")
import func.overlord.client as func
（2）API模式
GetFileModule实现拉取远程Linux主机指定文件到主控端目录，不支持命令行模式。
（1）功能
5.拷贝远程文件模块
func.C1ient("sN2013-08-022")
Linux公社 www.linuxidc.com
"192.168.0.10"，"tcp","dst")
---
## Page 220
#func "sN2013-08-022" call service start nginx
（2）命令行模式
ServiceModule实现远程Linux主机系统服务管理。
（1）功能
10.系统服务管理模块
print client.process.kill("nginx",
print
（3）API模式
（2）命令行模式
import func.overlord.client asfunc
ProcessModule实现远程Linux主机进程管理。
（1）功能
9.系统进程管理模块
print client.mount.mount("/dev/sda3","/data")
（3）API模式
#func "SN2013-08-022"call mount1ist
（2）命令行模式
MountModule实现远程主机Linux系统挂载、卸载分区管理。
（1）功能
8.系统Mount管理模块
orint
print
client
import
func "SN2013-08-022" call process ki11 nginx SIGHUP
func
func"SN2013-08-022"
func"sN2013-08-022" cal1 mount umount "/data"
client.process.pkill("nginx",
client.mount.umount("/data")
client.mount.list()
"SN2013-08-022"
=func.C1ient("SN2013-08-022")
func.overlord.client as func
Linux公社
call
call processinfo"aux"
www.linuxidc.com
process pkill nginx-9
"SIGHUP"）
“-9")
第11章
统一网络控制器Func详解
193
---
## Page 221
Func 自带的建模块工具func-create-module来现实。
必要通过自定模块来填补这块的不足。本节介绍一个简单的Func 自定义模块的，通过采用
集群、不同类别的业务平台，此时Func自带的模块或许已经不能满足我们的需求，所以有
11.3
JSON及XML格式，命令如下：
194第二部分高级篇
Func自带的模块已经非常丰富，但在日常系统运维当中，尤其是面对大规模的服务器
xu po us-u-=- *o #
2）格式化输出结果，默认格式为Python的元组，分别添加--jsion或--xml来输出
/ux u -=-e *#
1）查看所有主机uptime，开启5个线程异步运行，超时时间为3秒，命令如下：
func 命令功能参数举例：
print
print
print
（3）API模式
（2）命令行模式
SysctlModule实现远程Linux主机系统内核参数管理。
（1）功能
11.系统内核参数管理模块
client = func.Client("SN2013-08-022")
import func.overlord.client as func
（3）API模式
import func.overlord.client as func
func "sN2013-08-022" cal1 sysctl list
自定义Func 模块
client.sysctl.set('net.ipv4.tcp_syncookies',l)
client.sysctl.get('net.ipv4.icmp_echo_ignore_broadcasts')
client.sysctl.list()
func.C1ient("SN2013-08-022")
Linux公社 www.linuxidc.com
getnet.nf_conntrack_max
---
## Page 222
路径为/usr/ib/python2.6/site-packages/func/minion/modules。
调用方法与Func自带模块无差异。详细过程见图11-3。
第三步分发模块，将编写完成的模块分发到所有被控主机；第四步执行已经分发完成的模块，
module命令创建模块初始模板；第二步编写逻辑，即填充我们的业务功能逻辑，生成模块：
[ /usr/lib/python2.6/site-packages/func/minion/modules/mymodule.py 】
最终生成了一个初始化的模块代码文件mymodule.py：
运行创建模块命令 func-create-module，根据图 11-14 填写相关信息。
#cd/usr/lib/python2.6/site-packages/func/minion/modules
切换到Func安装包minion模块存储目录。笔者使用的是系统自带的 Python 2.6，具体
（2）生成模块
如图11-3所示，自定义模块分为四个步骤进行，第一步生成模块，即通过fun-create-
（1）自定义模块步骤
general public license.
This software may be freely redistributed under the terms of the GNU
liutiansi 
Copyright 2014
Linux公社 www.linuxidc.com
roote5N2013-08-020 modules]# func-create-module
nod:
il:
p
liutiansiegmail.com
iut
ion:
My module for func.
MyM
生成模块编写逻辑分发模块执行模块
图11-4创建模块时填写的信息
图11-3自定义模块发布流程
第11章统一网络控制器Func详解195
---
## Page 223
统日志（/var/log/messages）信息，修改后的代码如下：
196第二部分高级篇
【 /usr/lib/python2.6/site-packages/func/minion/modules/mymodule.py】
class Mymodule(func_module.FuncModule):
from func.minion import sub_process
这一步只需在上述模块基础上做修改即可，如模块实现一个根据指定的条数返回最新系
import func_module
（3）编写逻辑
class Mymodule(func_module.FuncModule):
import func_module
along with this program;
You should have received a copy of the GNU GeneralPublicLicense
general public license.
This software may be freely redistributed under the terms of the GNU
liutiansi
Copyright 2010
description
# Update these if need be.
api_version ="0.0.1"
#Update these if need be.
api_version ="0.0.1"
version
return.
data
cmdref = sub_process.Popen(command, stdout=sub_process.PIPE,
so/+(uo)+//
ToDo:response system messages info
pass
TODO: Document me ...
Linux公社 www.linuxidc.com
(cmdref.returncode,
cmdref.communicate()
="My module for func."
data[0],data[1])
close_fds=True)
---
## Page 224
mymodule.py文件，是则说明模块已经成功分发。
同路径下。
控端func minion包下的模块文件（参数传入），通过Func的 copyfile 模块同步到目标主机的
最后，执行模块及返回结果见图11-6。
（5）执行模块
检查被控主机/usr/lib/python2.6/site-packages/func/minion/modules目录是否多了一个
分发模块的运行结果如图11-5所示。
【/home/test/func/RsyncModule.py 】
#重启Func服务
print client.copyfile.copyfile(pythonmodulepath+ module,data)
#分发模块
client = fc.Client("*")
module = sys.argv[1]
首先编写分发模块的功能，使用Func 的copyfle 模块来实现，原理比较简单，即读取主
print client.command.run("/etc/init.d/funcd restart")
data=xmlrpclib.Binary(fb)
b
import xmlrpclib
#!/usr/bin/python
（4）分发模块
mport
=file(pythonmodulepath+module，"r").read()
ppingfunc
一次编写可持续使用，源码如下：
func.overlord.client as fc
08-020func]#
Linux公社 www.linuxidc.com
-021
an
Euo
C
07:42:25
/usr/lib/python2.6/site-packages/func/minion/modules/"
N201
13
图11-5模块分发结果
lon:
图11-6执行模块结果
mon:
第11章统一网络控制器Func详解197
es/
---
## Page 225
使用上非常简单，扩展性也非常强。
工具等，比如通过Java或C生成JSON格式的接口定义，通过fun-transmit命令进行调用，
Func使用func-transmit命令来实现，支持YAML与JSON格式，实现了跨应用平台、语言
11.4非Python API接口支持
198第二部分高级篇
Func通过非PythonAPI实现远程调用，目的是为第三方工具提供调用及返回接口。
通过func-transmit命令调用不同接口配置，将返回不同的格式串，如图11-7和图11-8所示。
parameters，参数，如"usr/bin/tail -100 /var/log/messages"。
口method，方法名称，如command模块下的run方法；
 module,
口nforks，启用的线程数，用数字表示；
口async，是否异步，是一个布尔值，True为使用异步，False则不使用；
口clients，目标主机，"*"代表所有被控主机；
各参数详细说明如下。
【 /home/test/func/run.json 】
parameters: "/bin/echo Hello World"
method:run
module:command
nforks:1
async:False
clients:"*"
【 /home/test/func/run.yaml 】
定义一个command模块的远程执行，分别采用YAML及JSON 格式进行定义，如下：
正常返回了5条/var/log/messages信息，完成了自定义模块的全过程。
"parameters":"/bin/echo Hello World"
"method":"run",
"module":"command",
"nforks":1,
"async":"False"
"clients":"*",
Linux公社 www.linuxidc.com
---
## Page 226
法的清单，如图11-9所示。
方法（method），可通过list_fact_modules、list_fact_methods方法来查看当前支持的模块与方
Facts支持通过API来扩展用户自已的属性。Facts由两部分组成，一为模块（module），另为
获取远程主机的系统信息，以便在对目标主机操作时作为条件进行过滤，产生差异。Func的
11.5
Facts 是一个非常有用的组件，其功能类似于 Saltstack 的 grains、Ansible 的Facts，实现
返回的两种格式都可以被绝大部分语言所解析，方便后续处理。
Func 的Facts 支持
Linux公社www.linuxidc.com
022
027
图11-9查看主机支持模块及方法
图11-8返回标准的JSON格式
图11-7返回标准的YAML格式
2
nc
func
uncJ#
nel
OD
第11章
统一网络控制器Func详解199
---
## Page 227
行df-m命令，如图11-12所示。
目标主机运行uptime命令，如图11-11所示。
见图11-10。
单）即可，可通过命令行调用 Facts 的call_fact方法查看所有主机的操作系统信息，具体
200第二部分高级篇
示例：所有满足内核（kermel）版本大于或等于2.6，或者运行级别等于5的目标主机运
（2）or表达式--filteror
示例：所有满足内核（kernel）版本大于或等于2.6，并且操作系统信息包含CentOS 的
（1）and表达式--filter
Fact支持and与or作为条件表达式连接操作符，下面详细介绍。
在使用Facts 时，我们关注它的方法（func"*"call fact list_fact_methods显示的清
语法：
--filter "value in keyword,value ini keyword"
--filter"keyword[operator]value,keyword2[operator]value2"
语法：
-filteror
--filteror
sn2013-08-021',
11:46:32up2days,
04:29:41up 1 day,21:27,1user,1oadaverage:0.00,0.00,0.00n,
"keyword[operator]value,keyword2[operator]value2"
Linux公社www.linuxidc.com
图11-11：根据fact条件（and）过滤主机
9:36,
13-08-020func]#
图11-10查看主机操作系统信息
Load
0.00,
0.00,0.00\n
fact
---
## Page 228
11.1节～ 11.5节关于Func 的介绍参考官网文档 https://fedorahosted.org/func/。
Linux公社 www.linuxidc.com
图11-12根据fact条件（or）过滤主机
第11章统一网络控制器Func详解
201
---
## Page 229
Chapter e
关服务器信息如表12-1所示。
本为CentOS release 6.4，以及Python 2.6.6、hadoop-1.2.1、jdk1.6.0_45、mrjob-0.4.2等。相
12.1
?
实现大数据应用，将分别通过原生Python与框架（Framework）方式进行说明。
言来编写MapReduce任务，优点是开发简单且灵活。本章详细介绍如何使用Python语言来
除了提供Java 编写MapReduce任务外，还兼容了 Streaming方式，我们可以使用任意脚本语
平台是以Hadoop为主的开源生态圈，MapReduce作为Hadoop的数据集的并行运算模型，
或PB级别。如何在如此庞大的数据中挖掘出对我们有用的信息？目前业界主流存储与分析
成的运营、用户行为数据，随着时间及访问量的增长这一规模日益庞大，单位可达到日TB
Slave
Slave
Master
角色
为了方便读者理解，笔者通过虚拟化环境部署了Hadoop平台来进行演示，操作系统版
提示
随着云时代的到来，大数据（big data）也越来越受大家的关注，比如互联网行业日常生
因为Hadoop不作为本章的主体内容，所以将不对其架构、子项目、优化等进行说明。
环境说明
SN2012-07-011
SN2012-07-010
SN2013-08-020
主机名
Python大数据应用详解
第12章
Linux公社 www.linuxidc.com
192.168.1.22
192.168.1.21
192.168.1.20
表12-1
NameNode|Secondarynamenode|JobTracker
环境说明表
DataNode|TaskTracker
DataNode|TaskTracker