    public void setsSex(String sSex) { 
        this.sSex = sSex; 
    }
}
第三步，写有参⽆参构造
Java代码审计之基础开发
21
然后会⽣成：
public Student1(String sName, int nAge, String sSex) { 
    this.sName = sName; 
    this.nAge = nAge; 
    this.sSex = sSex;
}
接着写⽆参的
public Student1() {}
最后去⽣成toString⽅法
还是点击Generate→toString()
@Override
public String toString() { 
    return "Student1{" + 
            "sName='" + sName + '\'' + 
            ", nAge=" + nAge + 
            ", sSex='" + sSex + '\'' + 
            '}';
}
我们还可以在年龄赋值的地⽅加上判断,重写setnAge⽅法
public void setnAge(int nAge) { 
    if (nAge   = new ();
此时通过⽗类引⽤变量调⽤的⽅法是⼦类覆盖或者继承⽗类的⽅法，不是⽗类的⽅法
此时通过⽗类引⽤变量⽆法调⽤⼦类特有的⽅法。
package 
; 
public class demo3 { 
    public static void main(String[] args) { 
        Animal a = new Dog();//向上转型【⼦类型转换为⽗类型】 
        a.eat(); 
        a.GouPao();//这⾥出错，⽗类没有这个⽅法 
    }
}
class Animal{ 
    public void eat(){ 
        System.out.println("吃东⻄"); 
    }
} 
class Dog extends Animal{ 
    public void eat(){ 
        System.out.println("吃⾻头"); 
    } 
    //特有⾏为 
    public void GouPao(){ 
        System.out.println("狗刨"); 
    }
}
com.duotai.core
Java代码审计之基础开发
35
向下转型
   = ()     
在向下转型的过程中，如果没有转换为真实⼦类类型，会出现类型转换异常
Java代码审计之基础开发
36
多态的优缺点
优点：提⾼了代码的拓展性和可维护性
缺点：⽆法直接访问⼦类特有的成员
抽象类和接⼝
抽象类和抽象⽅法
抽象类的特点
接⼝的概述
接⼝的特点
接⼝与类之间的关系
接⼝和抽象类的区别
抽象类和抽象⽅法
抽象⽅法：
只给出⽅法定义⽽不去具体实现的⽅法叫做抽象⽅法，抽象⽅法是没有⽅法体的，在代码的表达上就是没有"{}"
抽象类：
包含⼀个或多个抽象⽅法的类也必须被声明为抽象类
抽象类和抽象⽅法的定义⽅式都需要在类名前⾯或⽅法名前⾯加上 abstract  关键字
Java代码审计之基础开发
37
抽象类的特点
抽象⽅法只能在抽象类⾥⾯
抽象类和抽象⽅法必须⽤ abstract  修饰
抽象类不能创建对象（不能实例化）
抽象类可以有⾮抽象⽅法
⼀个类继承了抽象类就是要重写他的所有抽象⽅法
 我是⼀名⽼师，我的名字叫张三，我正在上课 
 我是⼀名司机，我的名字叫王五，我正在开⻋
⾸先我们去创建⼀个抽象类，叫 Persion  
package 
;
/* 
* 抽象类必须⽤abstract修饰 
* 抽象⽅法只能在抽象类⾥⾯ 
* ⼀个类继承了抽象类就是要重写他的所有抽象⽅法 
* */
public abstract class Persion { 
    private String sName; 
    public String getsName() { 
        return sName; 
    } 
    public void setsName(String sName) { 
        this.sName = sName; 
    } 
    public abstract void work();
}
我们去主类中继承这个抽象类
package 
;
/* 
* 我是⼀名⽼师，我的名字叫张三，我正在上课 
* 我是⼀名司机，我的名字叫王五，我正在开⻋ 
* */
public class demo1 { 
    public static void main(String[] args) { 
        Teacher tea = new Teacher(); 
        Driver dr = new Driver(); 
        tea.setsName("张三"); 
        dr.setsName("王五"); 
        tea.work(); 
        dr.work(); 
    }
} 
class Teacher extends Persion{ 
    @Override 
    public void work() { 
        System.out.println("我是⼀个⽼师，我正在上课,我的名字是"+this.getsName()); 
    }
} 
class Driver extends Persion{ 
    @Override 
    public void work() { 
        System.out.println("我是⼀个司机，我正在开⻋,我的名字是"+this.getsName()); 
com.chouxiang.core
com.chouxiang.core
Java代码审计之基础开发
38
    }
}
接⼝的概述
Java语⾔的继承是单⼀继承，⼀个⼦类只能有⼀个⽗类。那么接⼝，就是Java为我们提供的⼀种机制，来解决继承单⼀的局限性。
接⼝⾥⾯的⽅法都是抽象⽅法。
接⼝的案例
以防盗⻔为例，锁可以开锁和上锁，将⻔和锁定义为抽象类，防盗⻔可以继承⻔的同时⼜继承锁吗？
将⻔定义为抽象类
锁定义为接⼝
防盗⻔继承⻔
实现锁的接⼝
这时候我们⾸先需要⼀个⻔的类（Door），⼀个防盗⻔的类（SecurityDoor），⼀个锁的接⼝（Lock），⼀个调⽤的测试类
（TestDoor）
Java代码审计之基础开发
39
Door类：
package 
; 
public abstract class Door { 
    public abstract void open(); 
    public abstract void close();
}
SecurityDoor类：
package 
; 
public class SecurityDoor extends Door implements Lock{ 
    @Override 
    public void open() { 
        System.out.println("门开了"); 