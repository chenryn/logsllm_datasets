2
5
10
822
2,158
4,299
11,742
400
2,298
2,674
7,319
23.0
62.9
110.2
289.8
67
146
267
538
95
363
495
1,175
1.1
1.7
2.6
4.3
-91.9% -76.3% -95.2%
-93.2% -84.2% -97.3%
-93.8% -81.5% -97.6%
-95.4% -84.0% -98.5%
3.96 GB/h
6.12 GB/h
9.36 GB/h
15.48 GB/h
most closely related work. FORENGUARD [55] generates 0.93
GB/h of metadata for a 10-switch, 100-host topology with
1,000 new ﬂows per second. Although PICOSDN has higher
storage costs, the additional metadata allows PICOSDN to
handle more sophisticated analyses that FORENGUARD does
not provide (e.g., network identiﬁer evolution, common ances-
try trace). We illustrate this in our security evaluation section
(§ 7.2). PROVSDN [52] does not evaluate storage costs. As
the graphs produced by PROVSDN are optimized for IFC se-
curity label generation rather than for explaining root causes,
the necessary metadata that must be kept (and, thus, storage
costs) are not directly comparable to the metadata that PI-
COSDN keeps.
7.2 Security Evaluation
used representative
We
EVENTSCOPE [53] and TOPOGUARD [24]
ate PICOSDN’s security efﬁcacy.
vulnerabilities
found with
to evalu-
EVENTSCOPE CVE-2018-12691 We now revisit the mo-
tivating cross-plane attack example described in § 2.1. Our
practitioner now examines the provenance data collected dur-
ing the attack by PICOSDN’s runtime phase, which is shown
in abbreviated form in Figure 2b.
As our practitioner knows that hosts h1 and h2 communi-
cated, they use the network activity summarization to derive
the set of ﬂow rules related to these hosts. Among the re-
turned set, the practitioner sees the following: 1) the ﬂow rule
from fwd that allowed communication (fwd, f3, p4,{p3, p2});
2) acl’s failure to install a ﬂow denial rule, resulting from an
invalid IP address (acl,null,null,{p1}); and 3) acl’s failure to
install a ﬂow denial rule, resulting from the host event type’s
not being handled (acl,null,null,{p2}).
The practitioner uses the common ancestry trace of fwd
and acl’s actions to determine the common ancestors of the
discovered ﬂow rules. Among this set, the common ancestor
is the switch port agent s1 : port 1. Now equipped with a set
of possible root causes, the practitioner issues a backward-
forward trace from f3 to the root of the switch port agent to
see the differences in descendants (i.e., impacts) that each
intermediate cause affects. That allows the practitioner to
discover that the relevant root cause can be traced back to
the spoofed packet p1. Starting there, the practitioner’s for-
ward traces show the effects that p1 has on the network’s
subsequent activities, such as the corrupted host object h1(v1).
PICOSDN identiﬁes the root cause and effects of the spoofed
packet, thus letting the practitioner know that host h1 should
be disconnected.
Improvements upon prior work: FORENGUARD and
PROVSDN do not link data plane activities together. As a
result, practitioners would miss the necessary causal depen-
dency that is critical for understanding this attack’s root cause.
Furthermore, FORENGUARD and PROVSDN cannot diagnose
causes related to the absence of effects (e.g., acl’s failure to
install ﬂow rules). As a result, practitioners using these tools
would not be able to diagnose the class of attacks that use
the absence of effects to accomplish the attacker’s objectives.
By contrast, PICOSDN’s data plane model clearly links the
data plane packets that result from fwd’s installation across
switches (Figure 2b). PICOSDN’s network activity summa-
rization efﬁciently identiﬁes the activities that lack effects
(i.e., fout is null). In this attack, practitioners can see the pres-
ence of a potential cause (e.g., the execution of acl) and the
absence of an expected effect (e.g., a ﬂow denial rule).
EVENTSCOPE CVE-2019-11189 We evaluated another
vulnerability found by EVENTSCOPE, CVE-2019-11189.
This attack bypasses an intended access control policy. It
uses a malicious host to spoof a network identiﬁer of a victim
host, which causes installed ﬂow rules associated with the
access control policy to be uninstalled by the host mobility
application, mobility. We refer the reader to [53] for a detailed
description of the attack’s mechanism.
PICOSDN is able to capture the installation of the ﬂow
rules associated with the access control policy, the triggering
of the host mobility application because of spoofed pack-
ets, and the removal of the ﬂow rules by the host mobility
application. A practitioner who notices that undesired commu-
nication occurred between the malicious host and the victim
host can use the graph to understand the causal relationships
among all three activities and to pinpoint the spoofed packet
as the actual root cause.
Improvements upon prior work: FORENGUARD and
PROVSDN do not explicitly model the deletion of control
plane state as a graphical relation. As a result, practitioners
USENIX Association
30th USENIX Security Symposium    3195
Figure 9: Relevant features of the graph from the cross-app
attack. The graph shows that trigger modiﬁes packets before
fwd receives them.
who use these tools would not be able to perform causal analy-
sis over the deletions’ dependencies. By contrast, PICOSDN’s
wasInvalidatedBy relation links control plane state objects to
control plane activities. That augments PICOSDN’s capabil-
ities to trace common ancestors and to trace backward and
forward iteratively. In this example, a practitioner sees that
the removed ﬂow rule can be tracked backward to mobility’s
use of a modiﬁed (i.e., spoofed) host object.
PROVSDN Cross-App Poisoning Attack We also use PI-
COSDN to analyze a cross-app poisoning attack. This at-
tack uses a malicious app to modify packets in the packet-
processing pipeline, which subsequent apps use to make con-
trol plane decisions. We refer the reader to [52] for a detailed
description of the attack’s mechanism.
Figure 9 shows the important features of the graph. We
can see that the packet changes as it is handed off from the
triggering trigger (i.e., malicious) app to the forwarding fwd
(i.e., benign) app in the processing pipeline. Since PICOSDN
uses an event-based model, we can reduce the false dependen-
cies. For instance, for each instance of trigger’s event handler,
the precise API calls that were used are embedded in the used
and wasGeneratedBy relations for API read and write calls,
respectively, on the PacketIns.
To understand how the attack occurred, a practitioner issues
a network activity summarization query to ﬁnd malicious ﬂow
rules and uses them in the common ancestry trace to look at
the trigger agent. The practitioner then issues an iterative
backward-forward trace query on the trigger app to determine
the extent to which trigger has caused other undesired network
Figure 10: Relevant features of the host migration attack’s
graph showing the evolution of hosts that claimed to be h2.
activities. PICOSDN identiﬁes the root cause and other effects
of trigger, thus informing the practitioner that the app should
be removed.
Improvements upon prior work: FORENGUARD and
PROVSDN do not provide common ancestry tracing ca-
pabilities. As a result, practitioners using FORENGUARD
or PROVSDN would need to manually determine overlap-
ping root causes, which could signiﬁcantly hinder any time-
sensitive investigations, increase the attackers’ dwell time,
and increase the damage [12]. By contrast, PICOSDN uses
its common ancestry trace in this example to efﬁciently deter-
mine that all of the malicious ﬂows have trigger in common.
TOPOGUARD Host Migration Attack We consider an-
other cross-plane-based host migration attack. This attack
uses a malicious data plane host to trick the control plane
into believing that a victim host has changed its location. We
assume a three-host (h1, h2, and h3) topology with one switch
(s1). Host h3 attempts to masquerade as host h2 so as to trick
other hosts (e.g., h1) into sending trafﬁc that was meant for
h2 to h3 instead. We refer the reader to [24] for a detailed
description of the attack’s mechanism.
Our practitioner queries the network identiﬁer evolution
for h2. Figure 10 shows a partial provenance graph of the
relevant features. The evolution shows that h2 appears to have
switched network ports from s1’s port 2 to port 3; in reality,
3196    30th USENIX Security Symposium
USENIX Association
Packet InPacket InwasRevisionOftriggerPacket ProcessorwasGeneratedByDefault Flow RulewasDerivedFroms1:port 2 was Attributed To AgencyPacket InPacket InwasRevisionOftriggerPacket ProcessorwasGeneratedBywasDerivedFroms1:port 1 was Attributed To AgencyFlow RulefwdPacket ProcessorwasGeneratedBytriggerfwdusedwasAssociatedWithusedwasAssociatedWithusedwasAssociatedWith... Host h2mac=00:00:00:00:00:02ip=192.168.0.2hloc=s1:port2t=10Host h2mac=00:00:00:00:00:02ip=192.168.0.2hloc=s1:port3t=5wasRevisionOfIdentifer EvolutionHostProviderPacket Processor wasGeneratedBy Host h2mac=00:00:00:00:00:02ip=192.168.0.2hloc=s1:port2t=1wasRevisionOfIdentifer EvolutionHostProviderPacket Processor wasGeneratedBy HostProviderPacket Processor wasGeneratedBy Packet Inmacsrc=00:00:00:00:00:02IPsrc=192.168.0.2receivedFrom=s1:2EtherType=ARPs1:port 2 wasAttributedTo AgencyPacket Inmacsrc=00:00:00:00:00:02IPsrc=192.168.0.2receivedFrom=s1:3EtherType=ARPs1:port 3 wasAttributedTo AgencyPacket Inmacsrc=00:00:00:00:00:02IPsrc=192.168.0.2receivedFrom=s1:2EtherType=ARP wasAttributedTo Agency used used usedHostMobilityEvent Listener usedh3 spoofed h2’s identiﬁer. The query returns the descendants
(i.e., the impacts) that each version of the identiﬁer has had
on the network. For instance, during the time that the spoofed
location of h2 was being used between times t = [5,10], old
ﬂow rules that directed trafﬁc to h2 were removed by the host
mobility app. The practitioner can now efﬁciently see the at-
tack’s ramiﬁcations at each stage because of the combination
of the network identiﬁer evolution and the forward-tracing ca-
pabilities. PICOSDN identiﬁes a cause in the spoofed packet
used by the host provider, and also ﬁnds the other effects
of the spoofed packet. The practitioner thus disconnects the
malicious host from port 3.
Improvements upon prior work: FORENGUARD and
PROVSDN do not store the additional relations needed to
track network identiﬁer evolution, and they do not provide
the forward-tracing capabilities to determine the effects that
spoofed identiﬁers have on other network activities. As a
result, practitioners using these tools would not be able to
quickly assess the extent of damage. By contrast, PICOSDN’s
network identiﬁer evolution tool shows the network effects at
each stage of identiﬁer change.
8 Discussion
Reactive and proactive conﬁgurations PICOSDN is de-
signed to work for both reactive and proactive SDN control
plane conﬁgurations. We used reactive conﬁgurations in our
case studies because recent SDN attacks have leveraged re-
active conﬁgurations [24, 49, 53, 62], but we argue that PI-
COSDN is well-suited for proactive conﬁgurations, too. Proac-
tive conﬁgurations install ﬂow rules ahead of time. However,
the time at which ﬂow rules are inserted may be far removed
from the time when data plane packets exercise these rules.
As a result of the time gap, manual tracing by a practitioner
would be a difﬁcult task. That provides the motivation to
create quality network forensics tools such as PICOSDN to
maintain history.
Deployment Considerations Our work complements ex-
isting detection and investigation tools in the security monitor-
ing pipeline. PICOSDN does not automatically detect attacks,
but instead provides investigators with insight into control
plane modiﬁcations and analysis of causal dependencies. This
is a critical step for enterprise security, particularly as threat
alerts are known to suffer from high rates of false alarm; some
reports show that more than half of alerts are false alarms, and
as few as 4% are properly investigated [16]. PICOSDN thus
addresses a vital gap in existing investigation products; one
such application of this technology would be to integrate it
into existing SIEM products, e.g., Splunk, to allow analysts to
observe SDN-related intelligence streams alongside other net-
work telemetry data. SDN attack detection in particular is an
open challenge, with past work examining expected semantic
behavior [13, 24, 49] and pattern recognition of anomalous
features or behavior [32,53], but these pursuits are orthogonal
to PICOSDN’s aims.
9 Related Work
SDN control plane insight FORENGUARD [55] is the prior
effort that is most closely related to PICOSDN. Like FOREN-
GUARD, PICOSDN provides root cause analysis capabilities
for SDN attacks. PICOSDN extends those capabilities with
a data plane model and mitigates the data dependency explo-
sions caused by default ﬂow rules. PROVSDN [52] focuses on
information ﬂow control enforcement rather than root cause
analysis, so its analysis capabilities are limited; it also uses
an API-centric model rather than an event-centric model for
execution partitioning, resulting in false dependencies that
would not be generated in PICOSDN’s provenance model.
GitFlow [15] proposes a version control system for SDN; that
inﬂuenced our decision to include revision relations. AIM-
SDN [14] outlines the challenges in SDN, inﬂuencing our
decisions on how to represent agency. Ujcich et al. [54] ar-
gue why provenance is necessary to ensure a secure SDN
architecture.
Declarative network provenance has shown promise in au-
tomated bug removal [58], differential provenance [10, 11],
meta provenance [57], and negative provenance [60, 61]. The
various solutions use a declarative paradigm [36], which re-
quires nontrivial translation for apps written in the imperative
paradigm. A beneﬁt of declarative programs is that they inher-
ently capture the data plane model, which PICOSDN provides
but PROVSDN and FORENGUARD do not.
The general research space of SDN security, including the
set of potential attack vectors, is large and well-studied; we
refer the reader to [63] for a survey of the area.
SDN debugging and veriﬁcation We outline existing SDN
debugging and veriﬁcation tools, as they are complementary
to provenance-based causal analysis tools.
Control-plane debugging tools include FALCON [35],
Net2Text [6], among others. They record the network’s state
to identify unusual behavior and replay suspicious activities
in a simulated environment. However, they assume that ac-
tivity traces are dependent upon all previous states and/or
inputs, whereas PICOSDN avoids that assumption through
its dependency partitioning.
Data plane veriﬁcation tools include Cocoon [48] and SD-
NRacer [43], and BEADS [27], among others. They prevent
instantiation of incorrect conﬁgurations in the network ac-
cording to a predeﬁned policy, but such tools’ prevention
capabilities are dependent upon correct policy speciﬁcations.
PICOSDN records known and unknown attacks so that prac-
titioners can investigate how such attacks occurred.
USENIX Association
30th USENIX Security Symposium    3197
Provenance and causality analysis The dependency ex-
plosion problem has been studied for host applications [39],
binary analysis [22, 33], and host operating systems [20, 26,
29, 31, 37, 38, 40]. Provenance for attack causality analysis
has also been well-studied [2–4, 19, 25, 42, 46, 50, 51, 56, 59].
PICOSDN’s primary contributions to this area include 1) a