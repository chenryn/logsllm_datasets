# macOS/OSX中的DYLDINSERTLIBRARIES DYLIB注入技术详解
|
##### 译文声明
本文是翻译文章，文章原作者 theevilbit，文章来源：theevilbit.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
在看过我最近的一篇文章后，小伙伴[@DarkKnight_](https://twitter.com/_Dark_Knight_)问了我一个问题：“你通常会不会调用允许dyld_insert_libraries的用户程序”？
小伙伴也问了其他几个类似问题，不过实话实说，我并没有搞懂他的问题。虽然我最近几篇文章讨论的都是macOS，但更多情况下是在与Windows打交道，macOS对我来说仍然是一个全新的领域。所以我决定深入这个问题，了解更多知识。
## 0x01 DYLDINSERTLIBRARIES
实际上利用DYLD_INSERT_LIBRARIES环境变量是macOS上非常知名的一种注入技术。[dyld
man文档](https://web.archive.org/web/20160409091449/https:/developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html)中对该变量的描述如下：
> DYLD_INSERT_LIBRARIES  
>  This is a colon separated list of dynamic libraries to load before the ones
> specified in the program. This lets you test new modules of existing dynamic
> shared libraries that are used in flat-namespace images by loading a
> temporary dynamic shared library with just the new modules.  
>  Note that this has no effect on images built a two-level namespace images
> using a dynamic shared library unless DYLD_FORCE_FLAT_NAMESPACE is also
> used.
简而言之，系统会在程序加载前加载我们在该变量中指定的任何dylib，实际上就是将dylib注入应用程序中。我之前在研究dylib劫持技术时写过简单的dylib代码，让我们来动手试一下：
    #include 
    #include 
    __attribute__((constructor))
    static void customConstructor(int argc, const char **argv)
     {
         printf("Hello from dylib!\n");
         syslog(LOG_ERR, "Dylib injection successful in %s\n", argv[0]);
    }
编译:
    gcc -dynamiclib inject.c -o inject.dylib
为了快速测试，我编写了一个hello world
C代码作为测试对象。为了设置环境变量，我们需要在命令行中指定DYLD_INSERT_LIBRARIES=[dylib具体路径]。具体命令如下：
    $ ./test 
    Hello world
    $ DYLD_INSERT_LIBRARIES=inject.dylib ./test
    Hello from dylib!
    Hello world
我最喜欢的Bear应用同样也受到影响：
    $ DYLD_INSERT_LIBRARIES=inject.dylib /Applications/Bear.app/Contents/MacOS/Bear 
    Hello from dylib!
我们也能在log中看到所有事件（我们的dylib会往日志中写入消息）：
之前也有两篇文章，很好介绍了如何hook应用程序：
[Thomas Finch – Hooking C Functions at
Runtime](http://thomasfinch.me/blog/2015/07/24/Hooking-C-Functions-At-Runtime.html)
[Simple code injection using
DYLDINSERTLIBRARIES](https://blog.timac.org/2012/1218-simple-code-injection-using-dyld_insert_libraries/)
这里我不再重复，如果大家有兴趣可以好好参考一下。
## 0x02 如何防护
那么如何阻止这种感染技术？Michael提到我们可以在编译时添加RESTRICTED段（segment），因此我决定研究一下。根据[这篇研究文章](https://web.archive.org/web/20161007013145/http:/pewpewthespells.com/blog/blocking_code_injection_on_ios_and_os_x.html)，在如下3种情况中，这个环境变量会被忽略：
1、设置了setuid以及/或者setgid位；
2、受entitlements限制；
3、包含受限（restricted）segment。
我们也可以在[dyld源代码](https://opensource.apple.com/source/dyld/dyld-210.2.3/src/dyld.cpp)中看到这些信息，虽然这个代码不是最新版，但可读性更好。
pruneEnvironmentVariables函数会移除环境变量：
    static void pruneEnvironmentVariables(const char* envp[], const char*** applep)
    {
        // delete all DYLD_* and LD_LIBRARY_PATH environment variables
        int removedCount = 0;
        const char** d = envp;
        for(const char** s = envp; *s != NULL; s++) {
            if ( (strncmp(*s, "DYLD_", 5) != 0) && (strncmp(*s, "LD_LIBRARY_PATH=", 16) != 0) ) {
               *d++ = *s;
           }
           else {
               ++removedCount;
           }
        }
        *d++ = NULL;
        if ( removedCount != 0 ) {
           dyld::log("dyld: DYLD_ environment variables being ignored because ");
           switch (sRestrictedReason) {
               case restrictedNot:
                  break;
               case restrictedBySetGUid:
                  dyld::log("main executable (%s) is setuid or setgid\n", sExecPath);
                  break;
               case restrictedBySegment:
                 dyld::log("main executable (%s) has __RESTRICT/__restrict section\n", sExecPath);
                  break;
               case restrictedByEntitlements:
                  dyld::log("main executable (%s) is code signed with entitlements\n", sExecPath);
                  break;
           }
        }
        // slide apple parameters
        if ( removedCount > 0 ) {
           *applep = d;
           do {
               *d = d[removedCount];
           } while ( *d++ != NULL );
           for(int i=0; i ncmds;
        const struct load_command* const cmds = (struct load_command*)(((char*)mh)+sizeof(macho_header));
        const struct load_command* cmd = cmds;
        for (uint32_t i = 0; i cmd) {
               case LC_SEGMENT_COMMAND:
               {
                  const struct macho_segment_command* seg = (struct macho_segment_command*)cmd;
                  //dyld::log("seg name: %s\n", seg->segname);
                  if (strcmp(seg->segname, "__RESTRICT") == 0) {
                      const struct macho_section* const sectionsStart = (struct macho_section*)((char*)seg + sizeof(struct macho_segment_command));
                      const struct macho_section* const sectionsEnd = &sectionsStart[seg->nsects];
                      for (const struct macho_section* sect=sectionsStart; sect sectname, "__restrict") == 0) 
                             return true;
                      }
                  }
               }
               break;
           }
           cmd = (const struct load_command*)(((char*)cmd)+cmd->cmdsize);
        }