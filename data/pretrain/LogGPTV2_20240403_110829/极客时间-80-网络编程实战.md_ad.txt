## 保留网段一个比较常见的现象是，我们所在的单位或者组织，普遍会使用诸如 10.0.x.x或者 192.168.x.x 这样的 IP 地址，你可能会纳闷，这样的 IP到底代表了什么呢？不同的组织使用同样的 IP 会不会导致冲突呢?背后的原因是这样的，国际标准组织在 IPv4地址空间里面，专门划出了一些网段，这些网段不会用做公网上的IP，而是仅仅保留做内部使用，我们把这些地址称作保留网段。下表是三个保留网段，其可以容纳的计算机主机个数分别是 16777216个、1048576 个和 65536 个。![](data:image/png;resource=11;base64,){savepage-src="https://static001.geekbang.org/resource/image/80/ef/8062576bcd515e1c84cec960e4796fef.png"}\在详细讲述这个表格之前，我们需要首先了解一下子网掩码的概念。
## 子网掩码在网络 IP 划分的时候，我们需要区分两个概念。第一是网络（network）的概念，直观点说，它表示的是这组 IP共同的部分，比如在 192.168.1.1\~192.168.1.255这个区间里，它们共同的部分是 192.168.1.0。第二是主机（host）的概念，它表示的是这组 IP 不同的部分，上面的例子中1\~255 就是不同的那些部分，表示有 255 个可用的不同 IP。例如 IPv4 地址，192.0.2.12，我们可以说前面三个 bytes 是子网，最后一个byte 是 host，或者换个方式，我们能说 host 为 8 位，子网掩码为192.0.2.0/24（255.255.255.0）。有点晕？别着急，接下来要讲的是一些基本概念。很久很久以前，有子网（subnet）的分类，在这里，一个 IPv4地址的第一个，前两个或前三个 字节是属于网络的一部分。如果你很幸运地可以拥有一个字节的网络，而另外三个字节是 host地址，那在你的网络里，你有价值三个字节，也就是 24个比特的主机地址，这是什么概念呢？ 2 的 24次方，大约是一千六百万个地址左右。这是一个"Class A"（A 类）网络。![](data:image/png;resource=11;base64,){savepage-src="https://static001.geekbang.org/resource/image/80/ef/8062576bcd515e1c84cec960e4796fef.png"}\我们再来重新看一下这张表格，表格第一行就是这样的一个 A 类网络，10是对应的网络字节部分，主机的字节是 3，我们将一个字节的子网记作255.0.0.0。相对的，"Class B"（B 类）的网络，网络有两个字节，而 host只有两个字节，也就是说拥有的主机个数为 65536。"Class C"（C类）的网络，网络有三个 字节，而 host 只有一个字节，也就是说拥有的主机个数为 256。网络地址位数由子网掩码（Netmask）决定，你可以将 IP地址与子网掩码进行"位与"操作，就能得到网络的值。子网掩码一般看起来像是255.255.255.0（二进制为 11111111.11111111.11111111.00000000），比如你的IP 是 192.0.2.12，使用这个子网掩码时，你的网络就会是 192.0.2.12 与255.255.255.0 所得到的值：192.0.2.0，192.0.2.0 就是这个网络的值。子网掩码能接受任意个位，而不单纯是上面讨论的 8，16 或 24个比特而已。所以你可以有一个子网掩码 255.255.255.252（二进制位11111111.11111111.11111111.11111100），这个子网掩码能切出一个 30个位的网络以及 2 个位的主机，这个网络最多有四台 host。为什么是 4 台 host呢？因为不变的部分只有最后两位，所有的可能为 2 的 2 次方，即 4 台 host。注意，子网掩码的格式永远都是二进制格式：前面是一连串的1，后面跟着一连串的 0。不过一大串的数字会有点不好用，比如像 255.192.0.0这样的子网掩码，人们无法直观地知道有多少个 1，多少个0，后来人们发明了新的办法，你只需要将一个斜线放在 IP地址后面，接着用一个十进制的数字用以表示网络的位数，类似这样：192.0.2.12/30,这样就很容易知道有 30 个 1， 2 个 0，所以主机个数为 4。相信这个时候再去看保留网段，你应该会理解表格里的内容了。这里就不再赘述。
## 全球域名系统如果每次要访问一个服务，都要记下这个服务对应的 IP地址，无疑是一种枯燥而繁琐的事情，就像你要背下 200多个好友的电话号码一般无聊。此时，你应该知道我将要表达什么。对的，正如电话簿记录了好友和电话的对应关系一样，域名（DNS）也记录了网站和IP 的对应关系。全球域名按照从大到小的结构，形成了一棵树状结构。实际访问一个域名时，是从最底层开始写起，例如www.google.com](http://www.google.com,)，[www.tinghua.edu.cn](http://www.tinghua.edu.cn)等。![](Images/875a491f944c21666e8dae41895584d4.png){savepage-src="https://static001.geekbang.org/resource/image/23/be/23dc0a68d6016b71365e62879a3a6cbe.jpg"}
## 数据报和字节流尽管名称是 TCP/IP 协议栈，但是从上一讲关于 OSI 和 TCP/IP协议栈的对比中，我们看到传输层其实是有两种协议的，一种是大家广为熟悉的TCP， 而另一种就是 UDP。TCP，又被叫做字节流套接字（Stream Socket），注意我们这里先引入套接字socket，套接字 socket在后面几讲中将被反复提起，因为它实际上是网络编程的核心概念。当然，UDP也有一个类似的叫法, 数据报套接字（DatagramSocket），一般分别以"SOCK_STREAM"与"SOCK_DGRAM"分别来表示 TCP 和 UDP套接字。Datagram Sockets 有时称为"无连接的 sockets"（connectionless sockets）。Stream sockets是可靠的，双向连接的通讯串流。比如以"1-2-3"的顺序将字节流输出到套接字上，它们在另一端一定会以"1-2-3"的顺序抵达，而且不会出错。这种高质量的通信是如何办到的呢？这就是由 TCP（Transmission ControlProtocol）协议完成的，TCP通过诸如连接管理，拥塞控制，数据流与窗口管理，超时和重传等一系列精巧而详细的设计，提供了高质量的端到端的通信方式。这部分内容不是我们这里讲解的重点，有感兴趣的同学可以去读《TCP/IP详解卷一：协议》 。我们平时使用浏览器访问网页，或者在手机端用天猫 App购物时，使用的都是字节流套接字。等等，如果是这样，世界都用 TCP 好了，哪里有 UDP 什么事呢？事实上，UDP在很多场景也得到了极大的应用，比如多人联网游戏、视频会议，甚至聊天室。如果你听说过NTP，你一定很惊讶 NTP 也是用 UDP 实现的。使用 UDP 的原因，第一是速度，第二还是速度。想象一下，一个有上万人的联网游戏，如果要给每个玩家同步游戏中其他玩家的位置信息，而且丢失一两个也不会造成多大的问题，那么UDP 是一个比较经济合算的选择。还有一种叫做广播或多播的技术，就是向网络中的多个节点同时发送信息，这个时候，选择UDP 更是非常合适的。UDP也可以做到更高的可靠性，只不过这种可靠性，需要应用程序进行设计处理，比如对报文进行编号，设计Request-Ack 机制，再加上重传等，在一定程度上可以达到更为高可靠的 UDP程序。当然，这种可靠性和 TCP 相比还是有一定的距离，不过也可以弥补实战中UDP 的一些不足。在后面的章节中，我们将会分别介绍 TCP 和 UDP 的网络编程技术。
## 总结这一讲我们主要介绍了客户端 - 服务器网络编程模型，初步介绍了 IP地址、端口、子网掩码和域名等基础概念，以下知识点你需要重点关注一下：1.  网络编程需要牢牢树立起"客户端"和"服务器"模型，两者编程的方法和框架是明显不同的。2.  TCP 连接是客户端 - 服务器的 IP 和端口四元组唯一确定的，IP    是一台机器在网络世界的唯一标识。3.  有两种截然不同的传输层协议，面向连接的"数据流"协议    TCP，以及无连接的"数据报"协议 UDP。从下一讲开始，我们将开始使用套接字编写我们的第一个客户端 - 服务器程序。
## 思考题最后给你布置几个思考题。我们看到保留地址中第二行 172.16.0.0/12 描述为 16 个连续的 B 段，第三行192.168.0.0/16 描述为 256 个连续的 C 段地址，怎么理解这种描述呢？另外，章节里提到了服务端必须侦听在一个众所周知的端口上，这个端口怎么选择，又是如何让客户端知道的呢？如果你仔细想过这个问题，欢迎在评论区写在你的思考，也欢迎把这篇文章分享给你的朋友或者同事，大家一起交流一下。![](Images/5a282807b2a1ff091b7f803e8cef3429.png){savepage-src="https://static001.geekbang.org/resource/image/bf/25/bfc96ae0d8f839919b9d9866cfb8b025.jpg"}
# 03丨套接字和地址：像电话和电话号码一样理解它们在网络编程中，我们经常会提到 socket这个词，它的中文翻译为套接字，有的时候也叫做套接口。socket 这个英文单词的原意是"插口""插槽"，在网络编程中，它的寓意是可以通过插口接入的方式，快速完成网络连接和数据收发。你可以把它想象成现实世界的电源插口，或者是早期上网需要的网络插槽，所以socket 也可以看做是对物理世界的直接映射。其实计算机程序设计是一门和英文有着紧密联系的学科，很多专有名词使用英文原词比翻译成中文更容易让大家接受。为了方便，在专栏里我们一般会直接使用英文，如果需要翻译就一律用"套接字"这个翻译。
## socket 到底是什么？在网络编程中，到底应该怎么理解 socket呢？我在这里先呈上这么一张图，你可以先看看。![](Images/03df911e671f84b9beb1463ded36b940.png){savepage-src="https://static001.geekbang.org/resource/image/0b/64/0ba3f3d04b1466262c02d6f24ee76a64.jpg"}\这张图表达的其实是网络编程中，客户端和服务器工作的核心逻辑。我们先从右侧的服务器端开始看，因为在客户端发起连接请求之前，服务器端必须初始化好。右侧的图显示的是服务器端初始化的过程，首先初始化socket，之后服务器端需要执行 bind函数，将自己的服务能力绑定在一个众所周知的地址和端口上，紧接着，服务器端执行listen 操作，将原先的 socket 转化为服务端的 socket，服务端最后阻塞在accept 上等待客户端请求的到来。``{=html}此时，服务器端已经准备就绪。客户端需要先初始化 socket，再执行 connect向服务器端的地址和端口发起连接请求，这里的地址和端口必须是客户端预先知晓的。这个过程，就是著名的**TCP三次握手**（Three-way Handshake）。下一篇文章，我会详细讲到 TCP三次握手的原理。一旦三次握手完成，客户端和服务器端建立连接，就进入了数据传输过程。具体来说，客户端进程向操作系统内核发起 write字节流写操作，内核协议栈将字节流通过网络设备传输到服务器端，服务器端从内核得到信息，将字节流从内核读入到进程中，并开始业务逻辑的处理，完成之后，服务器端再将得到的结果以同样的方式写给客户端。可以看到，**一旦连接建立，数据的传输就不再是单向的，而是双向的，这也是TCP 的一个显著特性**。当客户端完成和服务器端的交互后，比如执行一次 Telnet 操作，或者一次 HTTP请求，需要和服务器端断开连接时，就会执行 close函数，操作系统内核此时会通过原先的连接链路向服务器端发送一个 FIN包，服务器收到之后执行被动关闭，这时候整个链路处于半关闭状态，此后，服务器端也会执行close 函数，整个链路才会真正关闭。半关闭的状态下，发起 close请求的一方在没有收到对方 FIN包之前都认为连接是正常的；而在全关闭的状态下，双方都感知连接已经关闭。请你牢牢记住文章开头的那幅图，它是贯穿整个专栏的核心图之一。讲这幅图的真正用意在于引入 socket的概念，请注意，以上所有的操作，都是通过 socket 来完成的。无论是客户端的connect，还是服务端的 accept，或者 read/write 操作等，**socket是我们用来建立连接，传输数据的唯一途径**。
### 更好地理解 socket：一个更直观的解释你可以把整个 TCP的网络交互和数据传输想象成打电话，顺着这个思路想象，socket就好像是我们手里的电话机，connect 就好比拿着电话机拨号，而服务器端的bind就好比是去电信公司开户，将电话号码和我们家里的电话机绑定，这样别人就可以用这个号码找到你，listen就好似人们在家里听到了响铃，accept就好比是被叫的一方拿起电话开始应答。至此，三次握手就完成了，连接建立完毕。接下来，拨打电话的人开始说话："你好。"这时就进入了write，接收电话的人听到的过程可以想象成read（听到并读出数据），并且开始应答，双方就进入了 read/write的数据传输过程。最后，拨打电话的人完成了此次交流，挂上电话，对应的操作可以理解为close，接听电话的人知道对方已挂机，也挂上电话，也是一次 close。在整个电话交流过程中，电话是我们可以和外面通信的设备，对应到网络编程的世界里，socket也是我们可以和外界进行网络通信的途径。