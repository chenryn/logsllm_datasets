### 图4：SRT和BlackJack在a)整个流水线和b)仅后端的指令覆盖率

在vortex中，99%的情况下会发生这种情况。

为了更好地理解导致BlackJack覆盖率下降的程序行为，我们将减少覆盖率的干扰分解为前导-尾随（leading-trailing）和尾随-尾随（trailing-trailing）两类（如第4.3节所述），并在图5中展示。图中的白色条形表示前导-尾随干扰，黑色条形表示尾随-尾随干扰。y轴表示指定类型的干扰导致指令违反空间多样性的周期百分比。总体而言，在所有基准测试中，0.5%的发行周期因尾随-尾随干扰而失去覆盖率，2.3%的发行周期因前导-尾随干扰而失去覆盖率。

从图5可以看出，覆盖度最低的基准测试之一equake（95.6%）同时受到尾随-尾随干扰（1.5%）和前导-尾随干扰（2.5%）。其尾随-尾随干扰结果尤为显著，因为这比所有基准测试的平均值高出三倍。这种较高的尾随-尾随干扰是由于equake的低IPC；equake是最慢的基准测试。尾随-尾随干扰与低IPC密切相关，因为在较慢的基准测试中，尾随线程的取指速度超过了发行速度，导致尾随指令在发行队列中积累。随着尾随线程在发行队列中的占用率增加，尾随指令按非顺序发行并干扰其他指令从而失去多样性的机会也增加了。而在快速基准测试中，发行更接近于取指，因此几乎没有尾随干扰的机会。对于FP应用程序（如equake），干扰问题（包括前导-尾随和尾随-尾随）更加严重。由于我们的机器只有2个FP ALU和2个FP乘法器，一旦前导指令被发行，除非尾随线程使用另一个等效单元，否则会导致覆盖率损失。因此，大量使用仅有少数副本资源的基准测试更容易受到干扰。而那些使用多个副本资源的基准测试则不那么敏感。例如，在依赖基本整数操作的基准测试（如Vortex）中，尾随指令只需避免单个后端路径，其余三个路径都是空间多样化的。在这种情况下，干扰仍有可能将指令发送到有利（尽管不是预期的）后端路径。

为了进一步解释高IPC基准测试（如gzip、crafty和bzip，见图5右侧）中的高前导-尾随干扰，我们提供了图6。图6展示了在一个周期内只有一个上下文被发行的周期百分比。回顾第4.3.2节，指令发行的突发性可以防止前导-尾随干扰。图6量化了这种突发性。虽然所有基准测试的平均值为70%，但gzip、crafty和bzip的范围在54%到63%之间。实际上，gzip是所有基准测试中最低的，仅为54%。这意味着在同一周期内两个上下文都可能发行指令，自然会导致更多干扰和更大的覆盖率损失。图5证实了这一点，显示gzip和bzip的前导-尾随干扰最高，分别为7.0%和5.6%。

### 6.2 性能

图7展示了SRT和BlackJack（无洗牌BlackJack-NS和BlackJack）的性能。稍后我们将解释BlackJack-NS有助于理解BlackJack性能的组成部分。所有数据均归一化为非容错单线程性能。基准测试从左到右按IPC递增顺序排列。白色条形代表SRT，灰色条形代表BlackJack-NS，黑色条形代表BlackJack。总体而言，SRT和BlackJack在高IPC基准测试中的性能下降更为明显，因为较少的空闲周期用于隐藏冗余线程的执行。在所有基准测试中，与非容错单线程相比，SRT的平均减速为21%，BlackJack的平均减速为33%。

![](your_image_url_here)

**图5：不同基准测试的前导-尾随和尾随-尾随干扰**

![](your_image_url_here)

**图6：一个周期内只有一个上下文被发行的周期百分比**

![](your_image_url_here)

**图7：SRT和BlackJack的性能比较**

![](your_image_url_here)

希望这些改进后的文本能够帮助您更好地理解和传达您的研究内容。如果有任何进一步的需求或修改，请随时告诉我。