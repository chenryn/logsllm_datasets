)
%
(
e
g
a
r
e
v
o
C
n
o
i
t
c
u
r
t
s
n
I
20
0
b)
c
e
r
e
c
a
f
e
s
i
w
p
u
w
p
i
z
b
i
s
p
a
n
o
e
p
i
z
g
y
t
f
a
r
c
x
e
t
r
o
v
k
c
a
r
t
x
i
s
e
g
a
r
e
v
a
e
k
a
u
q
e
t
r
a
i
m
w
s
d
i
r
g
m
u
l
p
p
a
d
3
a
m
f
c
c
g
c
e
r
e
c
a
f
e
s
i
w
p
u
w
p
i
z
b
i
s
p
a
n
o
e
p
i
z
g
y
t
f
a
r
c
x
e
t
r
o
v
k
c
a
r
t
x
i
s
e
g
a
r
e
v
a
FIGURE 4: Instruction coverage of SRTand BlackJack in a) entire pipeline and b) backend only.
est occurring in vortex at 99%.
To help understand the program behaviors that reduce Black-
Jack’s coverage we breakdown the coverage-reducing interference
into leading-trailing and trailing-trailing (described in Section 4.3)
and present them in Figure 5. Training-trailing is represented by
white  bars,  and  leading-trailing  by  black  bars. The  y-axis  is  the
percentage of issue cycles where the specified type of interference
causes instructions to violate spatial diversity. On average across
all benchmarks, 0.5% of issue cycles lose coverage due to trailing-
trailing interference, and 2.3% lose coverage due to leading-trail-
ing interference. 
From  Figure 5  we  can  see  that  one  of  the  lowest  covered
benchmarks,  equake  (95.6%),  suffers  from  both  trailing-trailing
interference  (1.5%)  and  leading-trailing  interference  (2.5%).  Its
trailing-trailing result is notable because it is three times greater
than  the  average  across  all  benchmarks.  This  elevated  trailing-
trailing interference is a consequence of equake’s low IPC; equake
is the slowest benchmark. Trailing-trailing interference is inherent
to  the  low  IPC  because  with  slow  benchmarks,  fetching  of  the
trailing  thread  outpaces  issue  and  allows  trailing  instructions  to
build up in the issue queue. With larger trailing thread issue queue
occupancy there is a greater chance for trailing instruction to issue
out  of  their  fetch  order  and  interfere  with  and  lose  diversity.  In
fast-paced  benchmarks,  issue  more  closely  matches  fetch  and
there is little opportunity for trailing interference. The difficulty of
interference  (both  leading-trailing  and  trailing-trailing)  is  made
worse because equake is an FP application. Because our machine
has only 2 FP ALUs, and 2 FP multipliers, once a leading instruc-
tion has issued, unless the trailing thread goes to the other equiva-
lent unit there will be loss of coverage. As such, benchmarks that
heavily use resources for which only a few copies exist are inher-
ently  more  susceptible  to  interference.  Benchmarks  that  use
resources  for  which  multiple  copies  exist  are  less  sensitive.  In
benchmarks heavily dependant on basic integer operations (such
as Vortex) trailing instructions must avoid only a single backend
way and the remaining three ways are spatially diverse. In such
cases, interference still has a good chance of sending the instruc-
tion to a favorable (although unintended) backend way. 
To  help  explain  the  high  leading-trailing  interference  in  the
higher-IPC benchmarks, gzip, crafty, and bzip, (which are to the
right in Figure 5) we additionally provide Figure 6. Figure 6 plots
the percentage of issue cycles, in which only one context is issued
in. Recall from Section 4.3.2, that the bursty nature of instruction
issue  prevents  leading-trailing  interference.  Figure 6  quantifies
this burstiness. While the average across all benchmarks is 70%
gzip, crafty, and bzip range from 54% to 63%. In fact, gzip is the
lowest of all benchmarks at 54%. The fact that issue is more likely
to  issue  from  both  contexts  in  the  same  cycle  naturally  implies
there  will  be  more  interference  and  greater  loss  of  coverage.
Figure 5 reinforces this fact, showing that both gzip and bzip have
the highest leading-trailing interference at 7.0% and 5.6% respec-
tively. 
6.2 Performance
Figure 7 plots the performance of SRT and BlackJack with no
shuffle  (BlackJack-NS),  and  BlackJack.  As  we  explain  later,
BlackJack-NS  helps  understand  the  components  of  BlackJack’s
performance. All are normalized to non-fault-tolerant single thread
performance.  Benchmarks  are  plotted  from  left  to  right  in  the
order  of  increasing  IPC.  White  bars  represent  SRT,  gray  bars
BlackJack-NS  and  black  bars  BlackJack.  In  general  SRT  and
therefore  also  BlackJack  show  larger  performance  degradation
with higher-IPC benchmarks, because there are less idle cycles to
hide the execution of the redundant thread. On average across all
benchmarks,  compared  to  non-fault-tolerant  single-thread,  SRT
has a slowdown of 21%. and BlackJack has a slowdown of 33%.
)
%
(
s
e
l
c
y
C
e
u
s
s
I
t
n
e
c
r
e
P
2
0
8
6
4
Trailing-trailing
Leading-trailing
i
m
w
s
e
k
a
u
q
e
t
r
a
d
i
r
g
m
u
l
p
p
a
d
3
a
m
f
c
c
g
c
e
r
e
c
a
f
e
s
i
w
p
u
w
80
60
40
20
0
)
%
(
s
e
l
c
y
C
e
u
s
s
I
t
n
e
c
r
e
P
e
g
a
r
e
v
a
e
k
a
u
q
e
i
m
w
s
t
r
a
d
i
r
g
m
u
l
p
p
a
c
c
g
d
3
a
m
f
p
i
z
b
i
s
p
a
n