# Adaptive Android Kernel Live Patching

## Authors
- Yue Chen, Florida State University
- Yulong Zhang, Baidu X-Lab
- Zhi Wang, Florida State University
- Liangzhao Xia, Baidu X-Lab
- Chenfu Bao, Baidu X-Lab
- Tao Wei, Baidu X-Lab

## Abstract
Android kernel vulnerabilities pose a significant threat to user security and privacy. These vulnerabilities can allow attackers to gain full control over devices, install malicious applications, and maintain persistent access. Unfortunately, many Android devices do not receive timely updates, leaving users exposed to these threats. Recent malware even includes built-in kernel exploits to take advantage of this vulnerability window. An effective solution must be adaptable to a wide range of devices, quickly deployable, and secure from misuse. However, the fragmented nature of the Android ecosystem makes this a complex and challenging task.

To address this, we conducted a systematic study of 1,139 Android kernels and recent critical Android kernel vulnerabilities. Based on our findings, we propose KARMA, an adaptive live patching system for Android kernels. KARMA features a multi-level adaptive patching model that filters malicious inputs to protect against kernel vulnerabilities. Patches in KARMA can be placed at multiple levels within the kernel and are automatically adapted to thousands of Android devices.

KARMA's patches are written in a high-level, memory-safe language, making them secure and easy to verify. Additionally, their runtime behavior is strictly confined to prevent misuse. Our evaluation shows that KARMA can protect most critical kernel vulnerabilities on many Android devices (520 devices in our evaluation) with minimal performance overhead (< 1%).

## 1. Introduction
Android, a popular mobile operating system based on the Linux kernel, relies heavily on the kernel for security. The kernel enforces app isolation and protects important system services, such as the location manager, from unauthorized access. A compromised kernel can lead to the entire system being untrustworthy, exposing sensitive data like bank accounts, mobile payments, and social network information. Even TrustZone, used for secure storage and digital rights management, is at risk when the kernel is compromised.

Efforts to find and exploit Android kernel vulnerabilities have increased, as evidenced by the growing number of disclosed vulnerabilities in the Android Security Bulletin. Many of these vulnerabilities are publicly available but never reported or patched. The process of officially patching an Android device involves multiple parties, including Google, vendors, and carriers, which can result in significant delays. This situation leaves many devices vulnerable, with some small vendors lacking the resources to keep their devices updated.

In response to these challenges, there is an urgent need for third-party solutions to provide timely patches for out-of-date devices. However, the fragmented Android ecosystem, with thousands of vendors and diverse hardware and software configurations, poses a significant challenge. Existing source-code-based patching systems are limited in their coverage, and a binary-based approach is more suitable for a third-party solution. However, kernel binaries can vary significantly, requiring a highly adaptive solution.

To address this, we first quantified the Android fragmentation by studying 1,139 Android kernel binaries and analyzing recent critical kernel vulnerabilities. Based on these insights, we propose KARMA, a multi-level adaptive patching model designed to overcome the fragmentation issue. KARMA stands for Kernel Adaptive Repair for Many Androids and is part of the OASES project, an initiative by Baidu to enable fast and scalable live patching for mobile and IoT devices.

The main contributions of our paper are:
- **Analysis of Fragmentation**: We analyzed the fragmentation issue that hinders existing kernel live patching solutions and highlighted the need for an adaptive Android kernel patching solution.
- **Systematic Study**: We studied 1,139 Android kernels and 76 critical Android kernel vulnerabilities, leading to the design of KARMA.
- **Implementation**: We implemented KARMA with a framework and primitives enabling memory-safe adaptive live patching, supporting all current Android kernel versions and different OEM vendors.
- **Evaluation**: We comprehensively evaluated KARMA, demonstrating its ability to adaptively and effectively handle the majority of recent critical kernel vulnerabilities with negligible overhead (< 1%).

The rest of the paper is organized as follows: Section 2 presents the problem and the design of KARMA. Section 3 evaluates the applicability, adaptability, and performance overhead of KARMA. Section 4 discusses potential improvements, and Section 5 compares KARMA to related work. We conclude the paper in Section 6.

## 2. System Design
In this section, we present our key observations on the Android fragmentation problem and describe the design of KARMA in detail.

### 2.1 Measuring Android Fragmentation
Designing a live kernel patching system that can scale to many devices is challenging. However, three key observations from our systematic measurement of Android fragmentation make this task feasible:

**Observation A: Stability of Kernel Functions**
Most kernel functions are stable across devices and Android releases. Evolution in the kernel is gradual, with bugs fixed and new features added incrementally. A patch for one kernel can often be adapted to many others. To measure stability, we collected 1,139 system images from major vendors (Samsung, Huawei, LG, Oppo, and Google) covering 520 popular devices and Android versions from 4.2 to 7.0. Our analysis showed that about 40% of shared functions have only one cluster, and about 80% have four clusters or fewer. For 60% of shared functions, the largest cluster contains more than 80% of the kernels. This indicates that most kernel functions are indeed stable across different devices.

**Observation B: Input-Triggered Vulnerabilities**
Many kernel vulnerabilities are triggered by malicious inputs through syscalls or external inputs. These vulnerabilities can be protected by filtering these inputs. We surveyed critical kernel vulnerabilities in the Android Security Bulletin from 2015 and 2016 and found that 93.4% could be patched using input filtering.

**Observation C: Error Handling in Kernel Functions**
Many kernel functions return error codes that are handled by their callers. When a malicious input is detected, a patch can end the function execution and return an error code, which the caller will handle. This keeps the kernel stable and consistent.

Based on these observations, our approach is to create patches that filter malicious inputs and return appropriate error codes. These patches are then automatically adapted to other devices, reducing manual efforts and speeding up deployment.

### 2.2 Adaptive Multi-level Patching
KARMA features a secure and adaptive multi-level patching model. Security is enforced by two technical constraints:
- **Rule I**: Patches can only be placed at designated locations, and the patched function must be able to return error codes or return void.
- **Rule II**: Patches are written in a high-level, memory-safe language and have strictly confined runtime behaviors to prevent misuse.

KARMA protects kernel vulnerabilities by preventing malicious inputs from reaching them. Patches are placed at multiple levels within the kernel and are automatically adapted to thousands of Android devices. This ensures that KARMA can effectively and securely protect a wide range of devices with minimal performance overhead.

---

This revised version of the text is more structured, clear, and professional, providing a better understanding of the research and its significance.