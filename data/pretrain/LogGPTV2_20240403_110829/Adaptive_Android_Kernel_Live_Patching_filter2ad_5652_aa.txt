title:Adaptive Android Kernel Live Patching
author:Yue Chen and
Yulong Zhang and
Zhi Wang and
Liangzhao Xia and
Chenfu Bao and
Tao Wei
Adaptive Android Kernel Live Patching
Yue Chen, Florida State University; Yulong Zhang, Baidu X-Lab; Zhi Wang, Florida State 
University; Liangzhao Xia, Chenfu Bao, and Tao Wei, Baidu X-Lab
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/chen
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXAdaptive Android Kernel Live Patching
Yue Chen
Florida State University
Yulong Zhang
Baidu X-Lab
Chenfu Bao
Baidu X-Lab
Zhi Wang
Florida State University
Liangzhao Xia
Baidu X-Lab
Tao Wei
Baidu X-Lab
Abstract
Android kernel vulnerabilities pose a serious threat to
user security and privacy. They allow attackers to take
full control over victim devices, install malicious and un-
wanted apps, and maintain persistent control. Unfortu-
nately, most Android devices are never timely updated
to protect their users from kernel exploits. Recent An-
droid malware even has built-in kernel exploits to take
advantage of this large window of vulnerability. An ef-
fective solution to this problem must be adaptable to lots
of (out-of-date) devices, quickly deployable, and secure
from misuse. However, the fragmented Android ecosys-
tem makes this a complex and challenging task.
To address that, we systematically studied 1,139 An-
droid kernels and all the recent critical Android ker-
nel vulnerabilities. We accordingly propose KARMA,
an adaptive live patching system for Android kernels.
KARMA features a multi-level adaptive patching model
to protect kernel vulnerabilities from exploits. Speciﬁ-
cally, patches in KARMA can be placed at multiple lev-
els in the kernel to ﬁlter malicious inputs, and they can
be automatically adapted to thousands of Android de-
vices.
In addition, KARMA’s patches are written in a
high-level memory-safe language, making them secure
and easy to vet, and their run-time behaviors are strictly
conﬁned to prevent them from being misused. Our eval-
uation demonstrates that KARMA can protect most crit-
ical kernel vulnerabilities on many Android devices (520
devices in our evaluation) with only minor performance
overhead (< 1%).
1
Introduction
Android is a popular mobile operating system based on
the Linux kernel. The kernel, due to its high privilege, is
critical to the security of the whole Android system [4].
For example, Android relies on the Linux kernel to en-
force proper isolation between apps and to protect im-
portant system services (e.g., the location manager) from
unauthorized access. Once the kernel is compromised,
none of the apps in the system can be trusted. Many
apps contain sensitive personal data, such as bank ac-
counts, mobile payments, private messages, and social
network data. Even TrustZone, widely used as the se-
cure keystore and digital rights management in Android,
is under serious threat since the compromised kernel en-
ables the attacker to inject malicious payloads into Trust-
Zone [42, 43]. Therefore, Android kernel vulnerabilities
pose a serious threat to user privacy and security.
Tremendous efforts have been put into ﬁnding (and ex-
ploiting) Android kernel vulnerabilities by both white-
hat and black-hat researchers, as evidenced by the sig-
niﬁcant increase of kernel vulnerabilities disclosed in
Android Security Bulletin [3] in recent years.
In ad-
dition, many kernel vulnerabilities/exploits are publicly
available but never reported to Google or the vendors,
let alone patched (e.g., exploits in Android rooting
apps [47]). The supply of Android kernel exploits likely
will continue growing. Unfortunately, ofﬁcially patching
an Android device is a long process involving multiple
parties with disparate interests: Google/the vendor ver-
iﬁes a reported vulnerability and creates a patch for it.
The patch is then thoroughly tested and released to carri-
ers; carriers test the update again for compatibility with
their networks and release it to their users as an over-
the-air (OTA) update. Many updates may queue up at
the carriers waiting to be tested [33]; ﬁnally, the user
may or may not install the update promptly. Arguably,
device vendors and carriers have little incentive to keep
user devices updated and secure. They instead prefer
users to buy new devices. For example, phone vendors
usually move to new products and stop updating older
devices within one year. Consequently, many Android
phones become obsolete shortly after they get into the
customers’ hands. There also exist lots of small ven-
dors that do not have necessary resources to keep their
phones updated. This dire situation is faithfully reﬂected
in the vulnerable phones in use. Table 1 lists the statis-
tics of two infamous kernel vulnerabilities: CVE-2015-
3636 (“PingPong Root”) [16] and CVE-2015-1805 [15]
(data collected from 30 million devices 1). After months
1With user consent, we collected kernel versions and build dates
from devices with the Baidu app installed and compare them to each
USENIX Association
26th USENIX Security Symposium    1253
CVE ID
Release Date Months % Vulnerable Devices
CVE-2015-3636
CVE-2015-1805
Sep. 2015
Mar. 2016
14
8
30%
47%
Table 1: Devices vulnerable to two infamous root ex-
ploits as of Nov. 2016. The second column lists the dates
when they are disclosed in Android Security Advisory.
since their public disclosure, there are still a signiﬁcant
portion of devices vulnerable to them. Hence, it is un-
surprising that Android malware with years-old root ex-
ploits can still compromise many victim devices world-
wide [5,17,18,21]. In light of these serious threats, there
is an urgent need for third-parties to promptly provide
patches for these out-of-date devices, without involving
vendors or carriers.
Android’s fragmented ecosystem poses a signiﬁcant
challenge to a third-party kernel patching system: there
are thousands of Android vendors that have produced
and keep producing tens of thousands of devices [1],
and Google releases new versions of Android at a reg-
ular base. This combination creates a mess of Android
devices with all kinds of hardware and software con-
ﬁgurations. For example, Android Lollipop (Android
5.0) was released in November 2014; as of September
2016, 46.3% of Android devices still run an older ver-
sion of Android with little hope of any future updates [2].
Even worse, many Android vendors, small and large
ones alike [19], indeﬁnitely “delay” releasing the ker-
nel source code despite the fact that the kernel’s license
(GPL) demands it. As such, existing source-code based
patching systems [22,23,25,27] can only cover a limited
number of devices; a binary-based approach would work
better for a third-party solution. However, kernel binaries
in these devices could differ signiﬁcantly in details. For
example, they may use different build systems, different
versions of the compiler, and different optimization lev-
els. An effective solution must accommodate thousands
of similar yet very different kernels, a challenging goal.
To achieve our goal, we ﬁrst quantiﬁed the Android
fragmentation by systematically studying and measur-
ing 1,139 Android kernel binaries. We formulated three
key observations that allowed us to effectively tackle this
problem. We also analyzed all the recent critical An-
droid kernel vulnerabilities. Armed with these insights,
we propose KARMA, a multi-level adaptive patching
model that can overcome the Android fragmentation is-
sue. KARMA stands for Kernel Adaptive Repair for
Many Androids 2.
It protects kernel vulnerabilities by
ﬁltering malicious inputs to prevent them from reaching
the vulnerable code. KARMA’s patches are written in
vulnerability’s disclosure date to decide if it is potentially vulnerable.
2KARMA is a part of the OASES (Open Adaptive Security Exten-
sions, https://oases.io) project, an initiative founded by Baidu to
enable fast and scalable live patching for mobile and IoT devices.
a high-level memory-safe language. To prevent patches
from being misused, KARMA strictly conﬁnes their run-
time behaviors so that the kernel remains as stable and
consistent as possible under attack. Adaptiveness is a key
distinguishing feature of KARMA from other live patch-
ing systems. It allows KARMA to scale to many Android
devices. Speciﬁcally, given a reference patch and a target
kernel, KARMA automatically identiﬁes whether the tar-
get kernel contains the same vulnerability and customizes
the reference patch for the target kernel if so. Therefore,
KARMA’s patches are easy to vet, secure, and adaptive.
Like other kernel patching systems, KARMA requires
privileged access to the devices it protects. It can either
be pre-installed in the device’s ﬁrmware or installed af-
terwards [7]. The implementation of KARMA supports
all major Android platforms, and we are currently work-
ing with various Android vendors to pre-install KARMA
in their future devices.
The main contributions of our paper are four-fold:
• We analyzed the fragmentation issue that hinders ex-
isting kernel live patching solutions to be ubiquitously
applied on Android devices, and brought the need of
an adaptive Android kernel patching solution to light.
• We studied 1,139 Android kernels from popular de-
vices and 76 critical Android kernel vulnerabilities in
the last three years. Based on these insights, we pro-
pose KARMA, a multi-level adaptive patching model
that can be applied to the fragmented Android ecosys-
tem.
• We implemented KARMA with the framework and
primitives enabling memory-safe adaptive live patch-
ing. The implementation can support all the current
Android kernel versions (from 2.6.x to 3.18.x) and dif-
ferent OEM vendors.
• We comprehensively evaluated KARMA against all the
recently reported critical kernel vulnerabilities. Our
evaluation shows that KARMA can both adaptively
and effectively handle the majority of these vulnera-
bilities with negligible overhead (< 1%).
The rest of the paper is organized as follows. We ﬁrst
state the problem and present the design of KARMA
in Section 2. We then evaluate the applicability, adapt-
ability, and performance overhead of KARMA in Sec-
tion 3. Section 4 discusses the potential improvements
to KARMA, and Section 5 compares KARMA to the
closely related work. We conclude the paper in Sec-
tion 6.
1254    26th USENIX Security Symposium
USENIX Association
2 System Design
In this section, we ﬁrst present our key observations on
the Android fragmentation problem and then describe the
design of KARMA in detail.
2.1 Measuring Android Fragmentation
Designing a live kernel patching system that can scale
to lots of devices is a challenging task. However, three
key observations we gained from systematically measur-
ing the Android fragmentation render this task feasible
and manageable. These observations can serve as a foun-
dation for future systems tackling this problem.
Observation A: most kernel functions are stable across
devices and Android releases.
Android (Linux) kernel is a piece of large and mature
software. Like other large software, evolution is more
common and preferred than revolution – bugs are ﬁxed
and new features are gradually added. Complete rewrite
of a core kernel component is few and far between. A
patch for one kernel thus can probably be adapted to
many other kernels. Adaptiveness is a key requirement
for protecting the fragmented Android ecosystem.
To measure the stableness of Android kernels, we col-
lected 1,139 system images from four major vendors
(Samsung/Huawei/LG/Oppo, 1,124 images) and Google
(15 images). These four vendors together command more
than 40% of the Android smartphone market, and Google
devices have the newest Android software. This data set
is representative of the current Android market: these im-
ages come from 520 popular old and new devices, feature
Android versions from 4.2 to 7.0, and cover kernels from
2.6.x to 3.18.x. The statistics of these images are shown
in Table 2 and 3.
After collecting these images, we extracted symbols
from their kernels. There are about 213K unique func-
tions, and about 130K of them are shared by more than
10 kernels. We wrote a simple tool to roughly analyze
how many different revisions each of these shared func-
tions has. Speciﬁcally, we abstract the syntax of each
function by the number of its arguments, the conditional
branches it contains, the functions called by it, and non-
stack memory writes. We then cluster each function
across all the images based on these syntactic features.
Each different cluster can be roughly considered as a re-
vision of the function (i.e., each cluster potentially re-
quires a different revision of the patch). The results are
shown in Fig. 1 and 2. Speciﬁcally, Fig. 1 shows how
many clusters each shared function has. About 40% of
the shared functions have only one cluster, and about
80% of them have 4 clusters or less. Fig. 2 shows the
percentage of the kernels in the largest cluster for each
shared function. For about 60% of shared functions, the
largest cluster contains more than 80% of all the kernels
that have this function. These data show that most kernel
functions are indeed stable across different devices. Vul-
nerabilities in shared functions should be given a higher
priority for patching because they affect more devices.
Observation B: many kernel vulnerabilities are trig-
gered by malicious inputs. They can be protected by ﬁl-
tering these inputs.
Kernel vulnerabilities, especially exploitable ones, are
often triggered by malicious inputs through syscalls or
external inputs (e.g., network packets). For example,
CVE-2016-0802, a buffer overﬂow in the Broadcom
WiFi driver, can be triggered by a crafted packet whose
size ﬁeld is larger than the actual packet size. Such vul-
nerabilities can be protected by placing a ﬁlter on the in-
puts (i.e., function arguments and external data received
from functions like copy_from_user) to screen mali-
cious inputs. We surveyed all the critical kernel vulnera-
bilities in the Android Security Bulletin reported in 2015
and 2016 and found that 71 out of 76 (93.4%) of them
could be patched using this method (Table 6).
Observation C: many kernel functions return error
codes that are handled by their callers. We can leverage
the error handling code to gracefully discard malicious
inputs.
When a malicious input is blocked, we need to alter
the kernel’s execution so that the kernel remains as con-
sistent and stable as possible. We observe that many ker-
nel functions return error codes that are handled by their
callers. In such functions, a patch can simply end the ex-
ecution of the current function and return an error code
when a malicious input is detected. The caller will han-
dle the error code accordingly [34]. Linux kernel’s cod-
ing style recommends that functions, especially exported
ones, returning an error code to indicate whether an op-
eration has succeeded or not [24]. If the function does
not normally return error codes, it should indicate errors
by returning out-of-range results. A notable exception is
functions without return values. Most (exported) kernel
functions follow the ofﬁcial coding style and return error
codes — even kernel functions that return pointers of-
ten return out-of-range “error codes” using the ERR_PTR
macro.
Based on these observations, our approach is as fol-
lows: for each applicable vulnerability, we create a patch
that can be placed on the vulnerable function to ﬁlter ma-
licious inputs. The patch returns a selected error code
when it detects an attack attempt. The error is handled by
the existing error handling code, keeping the kernel sta-
ble. This patch is then automatically adapted to other de-
vices. Automatic adaptation of patches can signiﬁcantly
reduce the manual efforts and speed up the patch deploy-
ment.
USENIX Association
26th USENIX Security Symposium    1255
Vendor
#Models
#Images
Samsung
Huawei
LG
Oppo
Google Nexus
Total
192
132
120
74
2
520
419
217
239
249
15
1139
Table 2: Images obtained from popular devices.
Category
Statistics
Countries
Carriers
Android Versions
Kernel Versions
Kernel Architectures ARM (77%), AArch64 (23%)
Kernel Build Years
2012, 2013, 2014, 2015, 2016
67
37
4.2.x, 4.3.x, 4.4.x, 5.0.x, 5.1.x, 6.0.x, 7.0.x
2.6.x, 3.0.x, 3.4.x, 3.10.x, 3.18.x
Table 3: Statistics of the obtained Android kernels.
Figure 1: Number of revision clusters for each shared
function, sorted by the number of clusters.
Figure 2: Percentage of kernels in the largest cluster
for each shared function.
2.2 Adaptive Multi-level Patching
KARMA features a secure and adaptive multi-level
patching model. The security is enforced by the follow-
ing two technical constraints:
Rule I, a patch can only be placed at designated lo-
cations, and its patched function must be able to return
error codes or return void (i.e., no return value).
KARMA protects kernel vulnerabilities by preventing
malicious inputs from reaching them. For security rea-