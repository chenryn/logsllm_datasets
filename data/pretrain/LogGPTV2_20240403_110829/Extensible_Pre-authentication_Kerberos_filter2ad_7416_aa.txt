# Extensible Pre-Authentication in Kerberos

## Title
Extensible Pre-Authentication in Kerberos

## Authors
Phillip L. Hellewell and Kent E. Seamons

## Affiliation
Brigham Young University

## Repository
BYU ScholarsArchive

## Publication Date
July 3, 2007

## Abstract
Organizations need to provide services to a wide range of users, including those outside their local security domain. As the number of users grows, maintaining and provisioning user accounts becomes increasingly tedious. It remains an open challenge to create a system for provisioning external users that is secure, flexible, efficient, scalable, and easy to manage.

Kerberos is a secure, industry-standard protocol. Currently, it operates as a closed system, requiring all users to be specified upfront and managed individually. This paper introduces EPAK (Extensible Pre-Authentication in Kerberos), a framework that enables Kerberos to operate as an open system. Implemented as a Kerberos extension, EPAK allows multiple authentication schemes to be loosely coupled with Kerberos without further modifications. EPAK enhances the flexibility of Kerberos and increases the viability of alternative authentication systems in enterprise environments.

## Acknowledgments
I would like to thank my graduate advisor, Dr. Kent E. Seamons, for his analysis and guidance, and my graduate committee, Dr. Quinn Snell and Dr. Mike Jones, for their feedback. I also appreciate the comments from Tim van der Horst, Andrew Harding, Reed Abbott, and other reviewers.

This research was supported by funding from the National Science Foundation under grant no. CCR-0325951, prime cooperative agreement no. IIS-0331707, and The Regents of the University of California.

## Table of Contents
1. Introduction
2. Kerberos
   2.1. Pre-Authentication
   2.2. Security Features
   2.3. Authentication and Authorization
   2.4. Cross-Realm Authentication
   2.5. Limitations
3. EPAK Design
   3.1. Goals
   3.2. Architecture
   3.3. Protocol
   3.4. EPAK Benefits
   3.5. Backward Compatibility
   3.6. Limitations
4. Open Systems in EPAK
   4.1. SAW
   4.2. SAWK Naive Approach
   4.3. SAWK Protocol
   4.4. Trust Negotiation
   4.5. TNK Protocol
   4.6. TNK vs PKINIT
5. EPAK Implementation
   5.1. SAWK Implementation
   5.2. TNK Implementation
   5.3. Practice and Experience
6. Threat Analysis
7. Related Work
8. Conclusions and Future Work
References
A. Source Code
B. EPAK ASN.1 Definitions
C. EPAK Installation Guide

## Chapter 1: Introduction
Open systems allow the authentication of users who are outside the local security domain and do not have a pre-existing relationship with the authentication server. To provide sufficient scalability, the system can employ attribute-based access control for mapping groups of users to roles. The RT framework [17] is an example of such a system.

Kerberos has met the security demands of many businesses, but managing Kerberos becomes more difficult as outside users become involved. Open system authentication systems address this by relying on third parties to manage users, passwords, keys, and other credentials. An authentication server trusts third parties to validate users.

Adopting new authentication schemes to replace Kerberos may be prohibitive because access control systems and applications are often built around the Kerberos infrastructure. For example, Microsoft’s Active Directory is a well-established, enterprise-level authorization system built around Kerberos. Extending Kerberos provides an attractive solution that allows systems like Active Directory to remain intact.

Incorporating open system authentication into Kerberos enhances its flexibility while increasing the usefulness and adoption of open systems. Kerberos becomes more powerful as it leverages open systems to provide services to more people, and open systems become more practical as they merge into existing Kerberos infrastructures.

### Motivating Scenario
Suppose Company A desires to create a collaborative file-sharing service accessible to the employees of Company B. It would also like to leverage its existing security infrastructure (e.g., Active Directory) to manage users. Rather than manage accounts for each employee of Company B, Company A would like to group them all into a local user `employeeB`.

At the same time, Company A wishes to grant Company C read-only access to the file-sharing site to monitor the work in progress but not make any changes. Employees from Company C could be mapped to the local user `employeeC`.

What if employees from Companies B and C could be authenticated to Company A’s domain merely by proving ownership of their email addresses? Company A could grant and remove access to outsiders simply by adding and removing entries from an access control list (ACL) that maps email addresses to local users. To provide the scalability needed for an open system, the ACL could allow wildcards for grouping addresses together (e.g., `*@companyB.com`).

## Chapter 2: Kerberos
Kerberos [22] is a distributed, identity-based authentication system that provides a method for a user to gain access to an application server. Kerberos allows a user to authenticate once and then connect to servers within the realm of the Kerberos network, without authenticating again for a period of time.

Kerberos is time-tested and widely used. Version 5 was standardized over a decade ago [22], and is in use by many enterprises today. It is used in business, government, military, and educational institutions, including those that use Microsoft Windows Server as a domain controller [19].

The Kerberos server consists of an Authentication Server (AS) and a Ticket-Granting Server (TGS). The AS and TGS are responsible for creating and issuing tickets to the clients upon request. The AS and TGS usually run on the same computer, collectively known as the Key Distribution Center (KDC).

### The Kerberos Authentication Process
The Kerberos authentication process works in three phases (see Figure 2.1). In the first phase, the client sends an AS-REQ with the user name to the AS, which responds with an AS-REP that includes a ticket-granting ticket (TGT) and a session key. The session key can only be unlocked by the user’s password and is required for the second phase. In the second phase, the client sends a TGS-REQ with the TGT from phase 1 to the TGS, which responds with a service-granting ticket (SGT) in the TGS-REP. In the final phase, the SGT is presented to the application server, which then grants the service.

### Principals
Users and servers have names called principals [27]. Server principals are composed of a primary name, instance, and a realm, written as `name/instance@REALM`. Client principals, e.g., `name@REALM`, do not have an instance.

### Secret Keys
A Kerberos server (KDC) must maintain several secret keys. A single key, `Ktgs`, is used to encrypt the TGT returned in step 1b (see Figure 2.1). Several keys, `Kcx`, one for each client, are used to encrypt the session key, also returned in step 1b. Finally, several keys, `Kvx`, one for each server, are used to encrypt the SGT returned in step 2b.

When the AS and TGS are combined, `Ktgs` can be stored in a private database used only by the KDC. The client keys, `Kcx`, can also be stored in the private database because only the AS needs direct access to them (clients derive the key from their password).

However, the server keys must be shared between the Kerberos server and application servers. For example, an FTP daemon service will need access to the `ftp/fqdn@REALM` key to decrypt the SGT sent in step 3a, encrypted by the TGS in step 2b. In Heimdal and MIT Kerberos, popular open-source implementations of Kerberos, shared keys are stored in a keytab file called `krb5.keytab`, which has strict permissions for read/write access to the admin (root) user only.

### Credential Cache
A credential cache on a client machine stores tickets obtained by a user, such as the TGT and SGTs. Each credential includes a client principal, server principal, encrypted ticket (opaque to the user), and a session key that matches the session key hidden inside the ticket. The credential cache must be secured to prevent impersonation. Heimdal Kerberos secures credentials by storing them in a temporary file, `/tmp/krb5cc $UID`, which has read/write permissions only for the user who obtained the credential. Other implementations, e.g., Microsoft’s, store credentials in memory for greater security.

### Pre-Authentication
Kerberos version 5 introduces a pre-authentication mechanism that allows a client to prove its authenticity before being issued a TGT. A pre-authentication data (padata) field in the AS request is set to a value that proves the client’s authenticity, such as a timestamp encrypted with the user’s password-based key (a mechanism enabled by default on MIT and Windows 2000/2003 implementations). When pre-authentication is mandated by the AS, it prevents an attacker from obtaining an AS reply at will for any user and performing an offline dictionary attack against the password.