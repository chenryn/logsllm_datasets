title:Extensible Pre-authentication Kerberos
author:Phillip L. Hellewell and
Kent E. Seamons
Brigham Young University 
Brigham Young University 
BYU ScholarsArchive 
BYU ScholarsArchive 
Theses and Dissertations 
2007-07-03 
Extensible Pre-Authentication in Kerberos 
Extensible Pre-Authentication in Kerberos 
Phillip L. Hellewell 
Brigham Young University - Provo 
Follow this and additional works at: https://scholarsarchive.byu.edu/etd 
 Part of the Computer Sciences Commons 
BYU ScholarsArchive Citation 
BYU ScholarsArchive Citation 
Hellewell, Phillip L., "Extensible Pre-Authentication in Kerberos" (2007). Theses and Dissertations. 1395. 
https://scholarsarchive.byu.edu/etd/1395 
This Thesis is brought to you for free and open access by BYU ScholarsArchive. It has been accepted for inclusion 
in Theses and Dissertations by an authorized administrator of BYU ScholarsArchive. For more information, please 
contact PI:EMAIL, ellen_amatangelo@byu.edu. 
EXTENSIBLE PRE-AUTHENTICATION IN KERBEROS
by
Phillip Hellewell
A thesis submitted to the faculty of
Brigham Young University
in partial fulﬁllment of the requirements for the degree of
Master of Science
Department of Computer Science
Brigham Young University
August 2007
Copyright c(cid:13) 2007 Phillip Hellewell
All Rights Reserved
BRIGHAM YOUNG UNIVERSITY
GRADUATE COMMITTEE APPROVAL
of a thesis submitted by
Phillip Hellewell
This thesis has been read by each member of the following graduate committee and
by majority vote has been found to be satisfactory.
Date
Date
Date
Kent E. Seamons, Chair
Quinn O. Snell
Mike Jones
BRIGHAM YOUNG UNIVERSITY
As chair of the candidate’s graduate committee, I have read the thesis of Phillip
Hellewell in its ﬁnal form and have found that (1) its format, citations, and biblio-
graphical style are consistent and acceptable and fulﬁll university and department
style requirements; (2) its illustrative materials including ﬁgures, tables, and charts
are in place; and (3) the ﬁnal manuscript is satisfactory to the graduate committee
and is ready for submission to the university library.
Date
Kent E. Seamons
Chair, Graduate Committee
Accepted for the Department
Accepted for the College
Parris Egbert
Graduate Coordinator
Thomas W. Sederberg
Associate Dean, College of Physical and Math-
ematical Sciences
ABSTRACT
EXTENSIBLE PRE-AUTHENTICATION IN KERBEROS
Phillip Hellewell
Department of Computer Science
Master of Science
Organizations need to provide services to a wide range of people, including strangers
outside their local security domain. As the number of users grows larger, it becomes
increasingly tedious to maintain and provision user accounts. It remains an open
problem to create a system for provisioning outsiders that is secure, ﬂexible, eﬃcient,
scalable, and easy to manage.
Kerberos is a secure, industry-standard protocol. Currently, Kerberos operates
as a closed system; all users must be speciﬁed upfront and managed on an individual
basis. This paper presents EPAK (Extensible Pre-Authentication in Kerberos), a
framework that enables Kerberos to operate as an open system. Implemented as a
Kerberos extension, EPAK enables many authentication schemes to be loosely cou-
pled with Kerberos, without further modiﬁcation to Kerberos. EPAK provides the
mutual beneﬁts of enhancing the ﬂexibility of Kerberos and increasing the viability
of alternate authentication systems as they move to the enterprise.
ACKNOWLEDGMENTS
I would like to thank my graduate advisor, Dr. Kent E. Seamons, for his analysis
and guidance, and my graduate committee, Dr. Quinn Snell and Dr. Mike Jones,
for their feedback. I would also like to thank Tim van der Horst, Andrew Harding,
Reed Abbott, and other reviewers for their helpful comments.
This research was supported by funding from the National Science Foundation
under grant no. CCR-0325951, prime cooperative agreement no. IIS-0331707, and
The Regents of the University of California.
Table of Contents
1 Introduction
2 Kerberos
2.1 Pre-Authentication . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 Security Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.3 Authentication and Authorization . . . . . . . . . . . . . . . . . . . .
2.4 Cross-Realm Authentication . . . . . . . . . . . . . . . . . . . . . . .
2.5 Limitations
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3 EPAK Design
1
3
6
6
7
7
8
11
3.1 Goals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
3.2 Architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3.3 Protocol
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
3.4 EPAK Beneﬁts
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
3.5 Backward compatibility . . . . . . . . . . . . . . . . . . . . . . . . . 21
3.6 Limitations
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
4 Open Systems in EPAK
23
4.1 SAW . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
4.2 SAWK Na¨ıve Approach . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.3 SAWK Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
4.4 Trust Negotiation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
xiii
TABLE OF CONTENTS
4.5 TNK Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
4.6 TNK vs PKINIT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
5 EPAK Implementation
33
5.1 SAWK Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . 37
5.2 TNK Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
5.3 Practice and Experience . . . . . . . . . . . . . . . . . . . . . . . . . 41
6 Threat Analysis
7 Related Work
8 Conclusions and Future Work
References
A Source Code
B EPAK ASN.1 Deﬁnitions
C EPAK Installation Guide
43
47
49
54
55
57
61
xiv
List of Tables
3.1 EPAK Message Deﬁnitions . . . . . . . . . . . . . . . . . . . . . . . . 16
5.1 SAWK-S ACL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
xv
LIST OF TABLES
xvi
List of Figures
2.1 Kerberos Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
3.1 EPAK Protocol in Kerberos . . . . . . . . . . . . . . . . . . . . . . . 12
3.2 PAS Realms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
3.3 EPAK Protocol
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
4.1 SAW Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
4.2 SAWK Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
4.3 TNK Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
5.1 EPAK Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . 34
5.2 SAWK Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . 36
5.3 TNK Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
xvii
LIST OF FIGURES
xviii
Chapter 1 — Introduction
Open systems allow the authentication of users who are outside the local security
domain and do not have a pre-existing relationship with the authentication server.
To provide suﬃcient scalability, the system can employ attribute-based access con-
trol for mapping groups of users to role(s). The RT framework [17] is an example
of such a system.
Kerberos has met the security demands of many businesses, but managing Ker-
beros grows more diﬃcult as outside users become involved. Open system authenti-
cation systems address this by relying on third parties to manage users, passwords,
keys, and other credentials. An authentication server trusts third parties to validate
users.
Adopting new authentication schemes to replace Kerberos may be prohibitive
because access control systems and applications are often built up around the Ker-
beros infrastructure. For example, Microsoft’s Active Directory is a well-established,
enterprise-level authorization system built around Kerberos. Extending Kerberos
provides an attractive solution that allows systems like Active Directory to remain
intact.
Incorporating open system authentication into Kerberos enhances the ﬂexibility
of Kerberos while increasing the usefulness and adoption of open systems. Kerberos
becomes more powerful as it leverages open systems to provide services to more peo-
ple, and open systems become more practical as they merge into existing Kerberos
infrastructures.
After a motivating scenario described below, Chapter 2 gives a background of
Kerberos. Then Chapters 3 to 5 describe the design and implementation of EPAK
1
CHAPTER 1.
INTRODUCTION
and two EPAK-based protocols that enable Kerberos to operate as an open system.
Chapter 6 contains a threat analysis of EPAK and Chapters 7 and 8 give related
work, conclusions, and future work.
Motivating Scenario Suppose Company A desires to create a collaborative ﬁle-
sharing service accessible to the employees of Company B. It would also like to
leverage its existing security infrastructure (e.g., Active Directory) to manage users.
Rather than manage accounts for each employee of Company B, Company A would
like to group them all into a local user employeeB.
At the same time, Company A wishes to grant Company C read-only access
to the ﬁle sharing site to monitor the work in progress but not make any changes.
Employees from Company C could be mapped to the local user employeeC.
What if employees from Company B and C could be authenticated to Company
A’s domain merely by proving ownership of their email address? Company A could
grant and remove access to outsiders simply by adding and removing entries from an
access control list (ACL) that maps email addresses to local users. To provide the
scalability needed for an open system, the ACL could allow wildcards for grouping
addresses together (e.g., *@companyB.com).
2
Chapter 2 — Kerberos
Kerberos [22] is a distributed, identity-based authentication system that provides a
method for a user to gain access to an application server. Kerberos allows a user
to authenticate once and then connect to servers within the realm of the Kerberos
network, without authenticating again for a period of time.
Kerberos is time-tested and widely used. Version 5 was standardized over a
decade ago [22], and is in use by many enterprises today. It is used in business, gov-
ernment, military, and educational institutions, including those that use Microsoft
Windows Server as a domain controller [19].
The Kerberos server consists of an Authentication Server (AS) and a Ticket-
Granting Server (TGS). The AS and TGS are responsible for creating and issuing
tickets to the clients upon request. The AS and TGS usually run on the same
computer, and are collectively known as the Key Distribution Center (KDC).
The Kerberos authentication process works in three phases (see Figure 2.1). In
the ﬁrst phase, the client sends an AS-REQ with the user name to the AS, which
responds with an AS-REP that includes a ticket-granting ticket (TGT) and a session
key. The session key can only be unlocked by the user’s password, and is required
for the second phase. In the second phase, the client sends a TGS-REQ with the
TGT from phase 1 to the TGS, which responds with a service-granting ticket (SGT)
in the TGS-REP. In the ﬁnal phase, the SGT is presented to the application server,
which then grants the service.
Users and servers have names called principals [27]. Server principals are com-
posed of a primary name, instance, and a realm, written as name/instance@REALM.
Client principals, e.g., name@REALM, do not have an instance.
3
CHAPTER 2. KERBEROS
Figure 2.1: The Kerberos protocol. To access a service, the client ﬁrst requests a
ticket-granting ticket (TGT) from the Authentication Server (AS) in phase 1. This
phase is also known as AS authentication. The client then uses that ticket to obtain
a service-granting ticket from the Ticket-Granting Server (TGS) in phase 2. Finally,
the client presents the service-granting ticket to the application server to access the
service (phase 3).
4
KDCASTGSClientAppl. ServerA Kerberos server (KDC) must maintain several secret keys. A single key, Ktgs,
is used to encrypt the TGT returned in step 1b (see Figure 2.1). Several keys, Kcx,
one for each client, are used to encrypt the session key, also returned in step 1b.
Finally, several keys, Kvx, one for each server, are used to encrypt the SGT returned
in step 2b.
When the AS and TGS are combined, Ktgs can be stored in a private database
used only by the KDC. The client keys, Kcx can also be stored in the private
database, because only the AS needs direct access to them (clients derive the key
from their password).
However, the server keys must be shared between the Kerberos server and
application servers. For example, an ftp daemon service will need access to the
ftp/fqdn@REALM key so that it can decrypt the SGT sent in step 3a, encrypted
by the TGS in step 2b. In Heimdal and MIT Kerberos, popular open-source imple-
mentations of Kerberos, shared keys are stored in a keytab ﬁle called krb5.keytab,
which has strict permissions for read/write access to the admin (root) user only.
A credential cache on a client machine stores tickets obtained by a user, such
as the TGT and SGTs. Each credential includes a client principal, server principal,
encrypted ticket (opaque to the user) and a session key that matches the session
key hidden inside the ticket. The credential cache must be secured to prevent im-
personation. Heimdal Kerberos secures credentials by storing them in a temporary
ﬁle, /tmp/krb5cc $UID, which has read/write permissions only for the user who
obtained the credential. Other implementations, e.g., Microsoft’s, store credentials
in memory for greater security.
5
CHAPTER 2. KERBEROS
2.1 Pre-Authentication
Kerberos version 5 introduces a pre-authentication mechanism that allows a
client to prove its authenticity before being issued a TGT. A pre-authentication data
(padata) ﬁeld in the AS request is set to a value that proves the client’s authenticity,
such as a timestamp encrypted with the user’s password-based key (a mechanism
enabled by default on MIT and Windows 2000/2003 implementations). When pre-
authentication is mandated by the AS, it prevents an attacker from obtaining an
AS reply at will for any user and performing an oﬄine dictionary attack against the