Constraint
 更高级的约束用法, 例如exclusion约束
 CREATE TABLE test(id int,geo circle,EXCLUDE USING GIST (geo WITH pg_catalog.&&));
 INSERT INTO test values(1,''::circle);
 INSERT INTO test values(1,''::circle);
 INSERT INTO test values(1,''::circle);
 ERROR: conflicting key value violates exclusion constraint "test_geo_excl"
 DETAIL: Key (geo)=() conflicts with existing key (geo)=().
c3 c1 c2
System Column
 oid (4 bytes)
System Column
 oid主要被用于系统表中
 Object identifiers (OIDs) are used internally by PostgreSQL as primary keys for
various system tables.
 oid不能确保跨系统表的唯一性.
 obj_description(123456,'pg_class')
 would retrieve the comment for the
 table with OID 123456.
 因此单个参数的obj_description(oid)
 已经废弃
System Column
 tableoid (4 Bytes)
 postgres=# CREATE TABLE test (id int);
 postgres=# CREATE SEQUENCE seq_test START WITH 1;
 postgres=# INSERT INTO test VALUES(1);
 postgres=# SELECT tableoid FROM test;
 26534
 postgres=# SELECT tableoid FROM seq_test LIMIT 1;
 26537
 postgres=# SELECT relname FROM pg_class WHERE oid IN (26534, 26537);
 relname
 ----------
 test
 seq_test
System Column
 ctid (6 Bytes)
 xmin / xmax / cmin / cmax (4 Bytes)
Heap Table's PAGE(0)
it1 it2 it3 it4 it5
it6
tup6
tup5 tup4 tup3 tup2 tup1
System Column
老版本记录
老版本记录
新版本记录
Modify Table
 add column
 有默认值, 将rewrite全表, 包括索引重建. 因此有排他锁, 谨慎操作.
 无默认值, 修改元数据, 速度快, 不会rewrite表和重建索引.
 drop column
 pg_attribute
 Recover droped column from PostgreSQL
 http://blog.163.com/digoal@126/blog/static/163877040201112251058216/
 Can session_replication_role used like MySQL's BlackHole Engine?
 http://blog.163.com/digoal@126/blog/static/163877040201119111234570/
 ALTER TABLE的语法
Modify Table
 ALTER TABLE的语法
Privilege
 创建角色
要我干活,
给我权限
ROLE
IN ROLE | GROUP, 把新增角色加盟到
已有角色.
USER | ROLE, 把已有角色加盟到新增
角色.
ADMIN, 已有角色加盟时带上WITH
ADMIN OPTION选项.
Privilege
要我干活,
给我权限 Cluster
ROLE
Database(s)
Schema(s)
Function(s) Language(s) Table(s) Index(es) Sequence(s) Other Obj(s)
Privilege
 Database, 数据库的下一层是SCHEMA, 所以给数据库CREATE权限是有了在这个数据库
创建SCHEMA的权限. TEMP指允许在该库创建临时表.
 GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
 ON DATABASE database_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 Schema
 GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
 ON SCHEMA schema_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 Tablespace
 GRANT { CREATE | ALL [ PRIVILEGES ] }
 ON TABLESPACE tablespace_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
Privilege
 Table
 GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES |
TRIGGER }
 [, ...] | ALL [ PRIVILEGES ] }
 ON { [ TABLE ] table_name [, ...]
 | ALL TABLES IN SCHEMA schema_name [, ...] }
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 Column, PG比较强大的地方, 允许对列赋权.
 GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column [, ...] )
 [, ...] | ALL [ PRIVILEGES ] ( column [, ...] ) }
 ON [ TABLE ] table_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 列和表的权限比较容易混淆
 http://blog.163.com/digoal@126/blog/static/16387704020119193364585/
Privilege
 Language
 GRANT { USAGE | ALL [ PRIVILEGES ] }
 ON LANGUAGE lang_name [, ...]
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 Function
 GRANT { EXECUTE | ALL [ PRIVILEGES ] }
 ON { FUNCTION function_name ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) [, ...]
 | ALL FUNCTIONS IN SCHEMA schema_name [, ...] }
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
Privilege
 Sequence
 GRANT { { USAGE | SELECT | UPDATE }
 [, ...] | ALL [ PRIVILEGES ] }
 ON { SEQUENCE sequence_name [, ...]
 | ALL SEQUENCES IN SCHEMA schema_name [, ...] }
 TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
 Role
 GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]
 (INHERIT | NOINHERIT 的区别)
 PostgreSQL Role Membership
 http://blog.163.com/digoal@126/blog/static/1638770402011362564157/
 详见
 http://www.postgresql.org/docs/9.1/static/sql-grant.html
Schema
 Schema Search Path
 SHOW search_path;
 search_path
 ----------------
 "$user",public
 use qualified name:
 schema.table
 database.schema.table (如果用这种写法, 必须写当前连接的库名)
 The search path works in the same way for data type names, function names, and operator
names as it does for table names. Data type and function names can be qualified in exactly the
same way as table names. If you need to write a qualified operator name in an expression, there
is a special provision: you must write :
 OPERATOR(schema.operator)
 SELECT 3 OPERATOR(pg_catalog.+) 4;
Schema
 public Schema
 REVOKE CREATE ON SCHEMA public FROM PUBLIC;
 System Catalog Schema
 pg_catalog is always effectively part of the search path. If it is not named explicitly in the path
then it is implicitly searched before searching the path's schemas.
 However, you can explicitly place pg_catalog at the end of your search path if you prefer to
have user-defined names override built-in names.
 SET search_path="$user",public,pg_catalog;
 为每个用户创建与之同名的SCHEMA, 便于移植.
 不建议使用public SCHEMA.
Inheritance
 一个表可以继承多个表
 一个表可以被多个表继承
 允许多级继承
 不允许闭环继承
 约束, FOREIGN KEY, UNIQUE KEY, PRIMARY KEY, CHECK, NOT NULL都只约束单
表.
单表约束
Inheritance
 查询
 主表以及所有子表全局约束举例1(不可行的做法, 并发时将无法确保唯一, 后面有例子)
 ALTER TABLE p ADD CONSTRAINT ck_pk_p CHECK(check_pk_p(id) IS true);
"全局约束的函数"
Inheritance
 主表以及所有子表全局约束举例1(不可行)
 SESSION A:
 postgres=# BEGIN;
 postgres=# INSERT INTO p VALUES (1,'DIGOAL','test');
 SESSION B:
 postgres=# INSERT INTO c1 VALUES (1,'DIGOAL','test');
 SESSION A:
 postgres=# END;
 postgres=# SELECT tableoid,* FROM p;
 tableoid | id | name | info
 ----------+----+--------+------
 26588 | 1 | DIGOAL | test
 26614 | 1 | DIGOAL | test
Inheritance
 主表以及所有子表全局约束举例2(可行, 但仅仅适用于分区字段, 其他字段需要全局唯一
怎么办? 可以考虑使用增加反向关系表, 需要全局唯一的字段作为分区字段, 或者使用触
发器)
 分段
 create table p (id int primary key,name text unique,info text);
 create table c0(like p including all) inherits(p);
 create table c1(like p including all) inherits(p);
 alter table p add constraint ck_p_1 check(false);
 alter table c0 add constraint ck_c0_1 check(mod(id,2)=0);
 alter table c0 add constraint ck_c0_2 check(mod(hashtext(name),2)=0);
 alter table c1 add constraint ck_c1_1 check(mod(id,2)=1);
 alter table c1 add constraint ck_c1_2 check(mod(hashtext(name),2)=1);
 注意
 DELETE, UPDATE, SELECT 父表时, 默认不加ONLY, 影响所有子表和目标表.
 INSERT 没有ONLY选项, 也只会影响目标表. 除非有RULE或TRIGGER.
Partition
 可以用rule或trigger实现分区表(Range, Hash, List, Complex)
 rule不被COPY触发, 并且规则异常时插入的数据将插入主表. 无法简单处理此类问题.
 rule是每QUERY触发, 所以更适合bulk insert场景.
 trigger分区方法举例 :
 主表:
 CREATE TABLE p (
 city_id int not null,
 logtime timestamp(0) not null,
 peaktemp int,
 unitsales int
 );
 分区字段索引:
 CREATE INDEX idx_p_logtime ON p (logtime);
 子表:
 CREATE TABLE p_201201 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201202 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201203 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201204 (LIKE p INCLUDING all) INHERITS (p);
Partition
 CREATE TABLE p_201205 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201206 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201207 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201208 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201209 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201210 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201211 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_201212 (LIKE p INCLUDING all) INHERITS (p);
 CREATE TABLE p_default (LIKE p INCLUDING all) INHERITS (p);
 子表分区字段约束
 ALTER TABLE p_201201 ADD CONSTRAINT p_201201_ck1 CHECK (logtime>=date '2012-01-01' and
logtime=date '2012-02-01' and
logtime=date '2012-03-01' and
logtime=date '2012-04-01' and
logtime=date '2012-05-01' and
logtime=date '2012-06-01' and
logtime=date '2012-07-01' and
logtime=date '2012-08-01' and
logtime=date '2012-09-01' and
logtime=date '2012-10-01' and
logtime=date '2012-11-01' and
logtime=date '2012-12-01' and
logtime=date '2013-01-01');
Partition
 子表展示 :
 postgres=# \d p_201201
 Table "public.p_201201"
 Column | Type | Modifiers
 -----------+--------------------------------+-----------
 city_id | integer | not null
 logtime | timestamp(0) without time zone | not null
 peaktemp | integer |
 unitsales | integer |
 Indexes:
 "p_201201_logtime_idx" btree (logtime)
 Check constraints:
 "p_201201_ck1" CHECK (logtime >= '2012-01-01'::date AND logtime < '2012-02-01'::date)
 Inherits: p
Partition