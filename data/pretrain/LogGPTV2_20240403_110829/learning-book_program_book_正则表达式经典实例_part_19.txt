如果目标字符事是由-个a开头的，那么它就会被捕获到第一个捕获分组中。如果不
是，那么第一个捕获分组就不会参与到匹配尝试中。在该捕获分组之后的问号是很重
要的，因为这使得整个分组成为可选的。如果不存在a的话，该分组会重复0次，因
此不会有机会捕获任何内容。它不能捕获一个长度为0的字符串。
如果你使用的是(a?)>，该分组总是会参与到匹配尝试中。而在该分组之后并不存在量
词，所以它会正好重复一次。该分组或者捕获a，或者不捕获任何东西。
不管（a>是否会产生匹配，下一个记号是b>。然后是条件判断。如果捕获分组参与了
匹配尝试，即使它捕获的是长度为0的字符串（在这里是不可能出现的），都会尝试匹
配c>。如果没有的话，那么会尝试匹配d>。
用一句话来描述，（a)?b（?（1)cd)或者匹配ab之后跟着c，或者匹配b之后跟着d。
在.NET、PCRE和Perl中（但是不包括Python），条件判断中还可以使用环视。
当作一个正常的顺序环视来进行检查。实例2.16中
讲解了它是如何执行的。如果环视匹配成功的话，那么会接着尝试匹配部分。如
果没有成功的话，那么会尝试匹配（else）中的正则表达式。因为环视的长度为0，所以
(then>和中的正则表达式都会在目标文本中if匹配成功或者失败的同一位置处接
着进行尝试。
在条件判断中，除了使用顺序环视，也可以使用逆序环视。你还可以使用否定型的环
视，虽然我们并不推荐这样做，因为它会把“then”和“else”的含义反转，从而造成
78第2章
www.TopSage.com
---
## Page 95
不必要的混淆。
提示
使用环视的条件判断也可以写成不使用条件判断的形式：（(?=i)then
(?!if)else)。如果肯定型顺序环视匹配成功，那么就会尝试匹配
中，或者把它转义为。
宽松排列模式的另外一个效果是：位于字符类之外的所有空白字符，包括空格、制表
符和换行符，都会被忽略。为了匹配一个字面上的空格，就需要把它放到一个字符类
。如果你更关心可读性的话，那么也可以选择使用十六进
制数的转义形式，或者是Unicode转义形式u0020>或x{0020}>。如果要匹配
一个制表符，则应该使用匹配这些字面字符。作为替代选择的是使用（u0020>和\#>。
变体
(?#Year)\d{4}(?#Separator)-(?#Month)\d(2}-(?#Day)\d{2}
正则选项：无
正则流派：.NET、PCRE、Perl、Python、Ruby
不管是出于什么原因，如果你不能使用或者是不想使用宽松排列语法，那么还可以通
过(?#comment)的方式添加注释。在（?#>和)之间的所有字符会被忽略。
不幸的是，本书中讲到的流派中唯一不支持宽松排列的流派，也就是JavaScript，也不
支持这种注释语法。另外在Java中也不支持这种语法。
（?x)\d{4}#Year
Separator
Month
80第2章
www.TopSage.com
---
## Page 97
#Separator
\d( 2}
eG#
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
如果不能在正则表达式之外打并宽松排列模式，那么你可以把模式修饰符（(?x)>
放到正则表达式的最开始处。一定要注意在(?x)之前不能存在任何空格。因为
只有在这个模式修饰符之后才会开始宽松排列模式，因此在它之前的任意空格都
是不能忽略的。
我们在实例2.1中的“区分大小写的匹配”中已经详细讲解了模式修饰符有关的内容。
2.19在替代文本中添加字面文本
问题描述
查找并把任何正则表达式匹配从字面上替换为这8个字符：$%\*$1\1。
解决方案
$\*$$1\1
替代文本流派：.NET、JavaScript
$11*1111
替代文本流派：Java
$8\*\$1\\1
替代文本流派：PHP
替代文本流派：Per1
$\*$11
替代文本流派：Python、Ruby
讨论
在替代文本中转义字符的时机和方式
这个实例会讲解各种替代文本流派中使用的不同转义规则。在替代文本中，你可能会
需要转义的两个字符是美元符号（$）和反斜杠（)。而它们所使用的转义字符也分别
是美元符号和反斜杠。
在这个例子中的百分号（%）和星号（*）总是字面字符，然而一个前导的反斜杠也可
能会被当作一个转义字符，而不是一个实际上的反斜杠。《S1》和/或《1》是指向一个捕
获分组的反向引用。实例2.21中会讲解哪些流派对于反向引用会使用哪种语法。
这个题目对于我们讲到的7种替代文本流派就存在了5种解决方案，这个事实也说明
了对于替代文本语法来说，根本不存在什么标准。
正则表达式的基本技巧
81
www.TopSage.com
---
## Page 98
NET和JavaScript
.NET和JavaScript总是把反斜杠当作一个字面字符。不需要再用另外一个反斜杠来对
它进行转义，否则就会在替换中得到两个反斜杠。
单个出现的美元符号也是一个字面字符。只有当它们之后是一个数字、&、反引号、垂
直引号、下划线、加号或者另外一个美元符号的时候，才需要被转义。要转义一个美
元符号，只需要在它前面再加一个美元符号。
如果你觉得这样会读起来更加清晰，也可以选择把所有的美元符号都用两个来表示。
下面这个解答也是同样正确的：
$$$\*$$1\1
替代文本流派：.NET、JavaScript
.NET还要求对后面跟着一个起始花括号的美元符号进行转义。在.NET中，《$S{group}》
是一个命名反向引用。JavaScript则不支持命名反向引用。
Java
在Java中，反斜杠被用来在替代文本中转义反斜杠和美元符号。所有字面的反斜杠和
所有字面的美元符号都必须被转义。如果你不转义它们，Java就会产生一个例外
(exception)。
PHP
PHP要求后面跟数字的反斜杠、后面跟数字或者起始花括号的美元符号，都需要使用
反斜杠来进行转义。
反斜杠也可以对另外一个反斜杠进行转义。因此，你需要使用《ll来在替换文本中表
示两个实际上的反斜杠。所有其他的反斜杠都被认为是字面上的反斜杠。
Perl
Perl与其他替代文本流派都有些不同：它其实并不拥有一种替代文本流派。虽然其他编
程语言都在查找和替换过程中进行替换时拥有一些特殊逻辑，比如《$S1》，然而Perl中
这只是正常的变量插值（interpolation）。在替代文本中，需要对所有实际上的美元符号
用反斜杠进行转义，就像在任意双引号字符串申一样。
一个例外是Perl并不支持反向引用的《\1》语法。因此，并不需要对后面跟着数字的反斜
杠进行转义。为了避免反斜杠对美元符号进行转义，因此需要对后面跟着美元符号的
反斜杠进行转义。
反斜杠也可以转义另外一个反斜杠。因此，你需要使用《川来在替换文本中表示两个
实际上的反斜杠。所有其他的反斜杠都被认为是字面上的反斜杠。
82第2章
www.TopSage.com
---
## Page 99
Python和Ruby
美元符号在Python和Ruby的替代文本中并不拥有特殊含义。如果反斜杠后面跟
着一个会给反斜杠赋予特殊含义的字符，那么反斜杠需要使用另外一个反斜杠进
行转义。
在Python中，《1>～《9>，以及g》会创建反向引用。因此这些反斜杠就需要进行转义。
在Ruby中，你需要对后面跟着一个数字、&、反引号、垂直引号或者加号的反斜杠进
行转义。
在这两种语言中，反斜杠都可以转义另外一个反斜杠。因此，你需要使用《l在替换
文本中表示两个实际上的反斜杠。所有其他的反斜杠都被认为是字面上的反斜杠。
更多关于字符串字面量的转义规则
记住在本章中，我们关心的只是正则表达式和替代文本自身。下一章会讲解编程语言
和字符串字面量的内容。
当你在要传递给replace()函数的实际字符串变量中包含这样的文本时，前面所给
出的替代文本是没有问题的。换句话说，如果你在应用程序中给用户提供一个文
本框，让用户输入替代文本，那么这些解决方案所给出的正是为了让查找和替换
正常工作，用户需要输人的内容。如果你使用RegexBuddy或者另外一个正则测试
工具来测试查找和替换命令，那么在这个实例中给出的替代文本也同样会得到所
期望的结果。
但是如果你把它们直接粘贴到源代码中，在两边放上引号字符，那么这些同样的替代
文本并不能正常使用。编程语言中的字符事文本拥有它们自已的转义规则，因此你需
要在替代文本的转义规则之上再遵守这些转义规则才行。最终你所得到的很可能会是
一堆乱七八糟的反斜杠。
参见
实例3.14。
2.20在替代文本中添加正则匹配
问题描述
执行查找和替换，把所有URL都转换成指向该URL的HTML链接，并使用该URL作
为链接的文本。在这个练习中，把URL定义为“http：”以及其后所有的非空字符。例
如，Pleasevisithttp://www.regexcookbook.com应该被转换为Pleasevisit$&
替代文本流派：.NET、JavaScript、Perl
$0
替代文本流派：.NET、JaVa、PHP