与其他大多数运算符一样，关系运算符的结合律也是从左往右。因此：
ex != wye == zee与(ex != wye) == zee相同
首先，C判断ex与wye是否相等；然后，用得出的值1或0（真或假）再
与zee比较。我们并不推荐这样写，但是在这里有必要说明一下。
表6.2列出了目前我们学过的运算符的性质。附录B的参考资料II“C运算
符”中列出了全部运算符的完整优先级表。
表6.2 运算符优先级
小结：while语句
关键字：while
一般注解：
while语句创建了一个循环，重复执行直到测试表达式为假或0。while语
句是一种入口条件循环，也就是说，在执行多次循环之前已决定是否执行循
环。因此，循环有可能不被执行。循环体可以是简单语句，也可以是复合语
句。
形式：
while ( expression )
statement
340
在expression部分为假或0之前，重复执行statement部分。
示例：
while (n++ =     大于或等于
>     大于
!=     不等于
关系表达式：
341
简单的关系表达式由关系运算符及其运算对象组成。如果关系为真，关
系表达式的值为 1；如果关系为假，关系表达式的值为0。
示例：
5 > 2为真，关系表达式的值为1
(2 + a) == a 为假，关系表达式的值为0
342
6.4 不确定循环和计数循环
一些while循环是不确定循环（indefinite 
loop）。所谓不确定循环，指
在测试表达式为假之前，预先不知道要执行多少次循环。例如，程序清单
6.1通过与用户交互获得数据来计算整数之和。我们事先并不知道用户会输
入什么整数。另外，还有一类是计数循环（counting loop）。这类循环在执
行循环之前就知道要重复执行多少次。程序清单6.10就是一个简单的计数循
环。
程序清单6.10 sweetie1.c程序
// sweetie1.c -- 一个计数循环
#include 
int main(void)
{
const int NUMBER = 22;
int count = 1;             // 初始化
while (count 
int main(void)
{
const int NUMBER = 22;
int count;
for (count = 1; count 
int main(void)
{
int num;
printf("   n  n cubed\n");
for (num = 1; num 
347
int main(void)
{
int secs;
for (secs = 5; secs > 0; secs--)
printf("%d seconds!\n", secs);
printf("We have ignition!\n");
return 0;
}
该程序输出如下：
5 seconds!
4 seconds!
3 seconds!
2 seconds!
1 seconds!
We have ignition!
可以让计数器递增2、10等：
/* for_13s.c */
#include 
int main(void)
348
{
int n; // 从2开始，每次递增13
for (n = 2; n 
int main(void)
{
char ch;
for (ch = 'a'; ch 
int main(void)
{
double debt;
for (debt = 100.0; debt 
int main(void)
{
int x;
int y = 55;
for (x = 1; y 
int main(void)
{
int ans, n;
ans = 2;
for (n = 3; ans <= 25;)
ans = ans * n;
printf("n = %d; ans = %d.\n", n, ans);
return 0;
}
该程序的输出如下：
n = 3; ans = 54.
该循环保持n的值为3。变量ans开始的值为2，然后递增到6和18，最终
是54（18比25小，所以for循环进入下一次迭代，18乘以3得54）。顺带一