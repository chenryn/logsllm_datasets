if (err != noErr) {
printf("failed to make FS spec for application (error %d).\n", err);
exit(1);
}
// the extendedBlock constant specifies that we are using the fields that
// follow this field in the structure
launchParams.launchBlockID = extendedBlock;
// length of the fields following this field (again, use a constant)
launchParams.launchEPBLength = extendedBlockLen;
// launch control flags
// we want the existing program to continue, and not terminate
// moreover, we want the function to determine the Finder flags itself
launchParams.launchControlFlags = launchContinue + launchNoFileFlags;
// FSSpec for the application to launch
launchParams.launchAppSpec = &spec;
// no parameters
launchParams.launchAppParameters = NULL;
err = LaunchApplication(&launchParams);
if (err != noErr) {
printf("failed to launch application (error %d).\n", err);
exit(1);
}
printf("main: launched application, PSN = %lu_%lu\n",
launchParams.launchProcessSN.highLongOfPSN,
launchParams.launchProcessSN.lowLongOfPSN);
printf("main: continuing\n");
exit(0);
}
$ gcc -Wall -o cpmtest CarbonProcessManager.c -framework Carbon
$ ./cpmtest "Macintosh HD:Applications:Chess.app:Contents:MacOS:Chess"
main: launched application, PSN = 0_21364737
main: continuing
7.3.8. Carbon Multiprocessing Services
The Carbon Multiprocessing Services (MP Services) API allows you to create preemptive tasks in an
application. However, an MP task is not a Mach taskit is a thread that is preemptively scheduled by MP
Services, which can run tasks independently on one or more processors, dividing processor time
automatically among available tasks. An MP task maps to a pthread.
Figure 736 shows an example of using MP Services.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 62 of 107
Figure 736. Using Carbon Multiprocessing Services
// CarbonMultiprocessingServices.c
#include 
#include 
OSStatus
taskFunction(void *param)
{
printf("taskFunction: I am an MP Services task\n");
printf("taskFunction: my task ID is %#x\n", (int)MPCurrentTaskID());
printf("taskFunction: my pthread ID is %p\n", pthread_self());
return noErr;
}
int
main()
{
MPQueueID queue;
UInt32 param1, param2;
UInt32 tParam1, tParam2;
OSStatus status;
MPTaskID task;
// check for availability
if (MPLibraryIsLoaded()) {
printf("MP Services initialized\n");
printf("MP Services version %d.%d.%d.%d\n",
MPLibrary_MajorVersion, MPLibrary_MinorVersion,
MPLibrary_Release, MPLibrary_DevelopmentRevision);
printf("%d processors available\n\n", (int)MPProcessorsScheduled());
} else
printf("MP Services not available\n");
printf("main: currently executing task is %#x\n", (int)MPCurrentTaskID());
// create a notification queue
status = MPCreateQueue(&queue);
if (status != noErr) {
printf("failed to create MP notification queue (error %lu)\n", status);
exit(1);
}
tParam1 = 1234;
tParam2 = 5678;
printf("main: about to create new task\n");
printf("main: my pthread ID is %p\n", pthread_self());
// create an MP Services task
status = MPCreateTask(taskFunction, // pointer to the task function
(void *)0, // parameter to pass to the task
(ByteCount)0, // stack size (0 for default)
queue, // notify this queue upon termination
&tParam1, // termination parameter 1
&tParam2, // termination parameter 2
kMPCreateTaskValidOptionsMask,
&task); // ID of the newly created task
if (status != noErr) {
printf("failed to create MP Services task (error %lu)\n", status);
goto out;
}
printf("main: created new task %#08x, now waiting\n", (int)task);
// wait for the task to be terminated
status = MPWaitOnQueue(queue, (void *)&param1, (void *)&param2,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 63 of 107
NULL, kDurationForever);
printf("main: task terminated (param1 %lu, param2 %lu)\n",
tParam1, tParam2);
out:
if (queue)
MPDeleteQueue(queue);
exit(0);
}
$ gcc -Wall -o mps CarbonMultiprocessingServices.c -framework Carbon
$ ./mps
MP Services initialized
MP Services version 2.3.1.1
2 processors available
main: currently executing task is 0xa000ef98
main: about to create new task
main: my pthread ID is 0xa000ef98
main: created new task 0x1803200, now waiting
taskFunction: I am an MP Services task
taskFunction: my task ID is 0x1803200
taskFunction: my pthread ID is 0x1803200
main: task terminated (param1 1234, param2 5678)
Multitasking and Multiprocessing
Multitasking is the ability to handle several tasks simultaneously, whereas multiprocessing is
the ability of a system to use multiple processors simultaneously. Symmetric multiprocessing
(SMP) is a configuration in which two or more processors are managed by one kernel, with
both processors sharing the same memory and having equal status for almost all purposes. In
an SMP system, any thread can run on any processor, unless a thread is programmatically
bound to a particular processor.
Multitasking can be either preemptive or cooperative. Preemption is the act of interrupting a
currently running entity to give time to another runnable entity. In preemptive multitasking,
the operating system can preempt one entity to run another, as needed. In cooperative
multitasking, a running entity must give up control of the processorcooperativelyto allow
others to run. Consequently, a runnable entity can receive processing time only if another
entity allows it.
7.3.9. The Carbon Thread Manager
The Carbon Thread Manager allows you to create cooperatively scheduled threads, wherein each thread
must explicitly relinquish control of the processor. This is done either by calling YieldToAnyThread(),
which invokes the Carbon Thread Manager's scheduling mechanism to run the next available thread, or by
calling YieldToThread(), which relinquishes control to a particular thread. Even though only one Carbon
Thread Manager thread runs at a time within an application, each thread maps to a pthread.
In our example program (Figure 737) for the Carbon Thread Manager, the main function will create
several threads, mark them ready, and relinquish control to the first thread. Each thread will print its
Carbon identifier, pthread identifier, and Mach port and then relinquish control to the next thread. The last
thread on the list will relinquish control back to main, which will destroy all threads and exit.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 64 of 107
Figure 737. Creating Carbon Thread Manager threads
// CarbonThreadManager.c
#include 
#include 
#include 
#define MAXTHREADS 8
static ThreadID mainThread;
static ThreadID newThreads[MAXTHREADS] = { 0 };
voidPtr
threadFunction(void *threadParam)
{
int i = (int)threadParam;
printf("thread #%d: CTM %#08lx, pthread %p, Mach %#08x\n",
i, newThreads[i], pthread_self(), mach_thread_self());
if (i == MAXTHREADS)
YieldToThread(mainThread);
else
YieldToThread(newThreads[i + 1]);
/* NOTREACHED */
printf("Whoa!\n");
return threadParam;
}
int
main()
{
int i;
OSErr err = noErr;
// main thread's ID
err = GetCurrentThread(&mainThread);
for (i = 0; i quantum_timer, thread_quantum_expire, p);
...
}
ppc_init() finally calls kernel_bootstrap() [osfmk/kern/startup.c] to start the higher-level boot
process. One of the latter's first operations is scheduler initialization by calling sched_init()
[osfmk/kern/sched_prim.c], which first calculates the standard timeslicing quantum. The built-in
default preemption ratethat is, the frequency at which the kernel will preempt threadsis 100Hz. A
preemption rate of 100Hz yields a timeslicing quantum of 0.01 s (10 ms). The preempt boot argument can
be used to specify a custom value of the default preemption rate to the kernel. The kern.clockrate sysctl
variable contains the values of the preemption rate and the timeslicing quantum (as microseconds).
$ sysctl kern.clockrate
kern.clockrate: hz = 100, tick = 10000, profhz = 100, stathz = 100
The tick value represents the number of microseconds in a scheduler tick. The hz value can be seen as
the frequency of a hardware-independent system clock.
sched_init() then initializes the global wait queues used by threads for waiting on events, initializes the
default processor set by calling pset_init() [osfmk/kern/processor.c], and sets the sched_tick
global variable to 0.
7.4.1.2. Timing and Clocks
Scheduling is a clock-based activity in that several of its critical functions are driven by a periodic clock
or timer interrupts. Therefore, the clock subsystem must be configured for scheduling to be started.
clock_config() [osfmk/kern/clock.c] configures the clock subsystem.
Timer facilities on the PowerPC include the Timebase (TB) Register and the Decrementer Register
(DEC). As we saw in Chapter 3, the TB Register is a 64-bit counter driven by an implementation-
dependent frequency. On certain processor models, the frequency may be a function of the processor's
clock frequency, whereas on some other models the TB Register is updated in accordance with an
independent clock. In fact, the frequency is not even required to be constant, although a frequency change
must be explicitly managed by the operating system. In any case, each increment of the TB Register adds
1 to its low-order bit. The TB Register is a volatile resource and must be initialized by the kernel during
boot.
The DEC is a 32-bit counter that is updated at the same frequency as the TB Register but is decremented
by 1 on every update.
For a typical Timebase frequency, it will take thousands of years for the TB Register to attain its
maximum value, but the DEC will pass zero in a few hundred seconds for the same frequency.
When the DEC's value becomes negative, that is, the sign bit of the 32-bit signed integer represented by
the DEC's contents changes from 0 to 1, a decrementer interrupt is caused. As we saw in Chapter 5, the
PowerPC exception vector entry for this interrupt resides at address 0x900. The low-level handler in
osfmk/ppc/lowmem_vectors.s sets the trap code as T_DECREMENTER and passes up the exception's
processing to ihandler() [osfmk/ppc/hw_exception.s]the higher-level interrupt handler. ihandler()
in turn calls interrupt() [osfmk/ppc/interrupt.c].
// osfmk/ppc/interrupt.c
struct savearea *
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007