title:SoK: Using Dynamic Binary Instrumentation for Security (And How You
May Get Caught Red Handed)
author:Daniele Cono D'Elia and
Emilio Coppa and
Simone Nicchi and
Federico Palmaro and
Lorenzo Cavallaro
SoK: Using Dynamic Binary Instrumentation for Security
(And How You May Get Caught Red Handed)
Daniele Cono D’Elia
Sapienza University of Rome
PI:EMAIL
Emilio Coppa
Sapienza University of Rome
PI:EMAIL
Simone Nicchi
Sapienza University of Rome
PI:EMAIL
Federico Palmaro
Prisma
PI:EMAIL
ABSTRACT
Dynamic binary instrumentation (DBI) techniques allow for moni-
toring and possibly altering the execution of a running program up
to the instruction level granularity. The ease of use and flexibility of
DBI primitives has made them popular in a large body of research in
different domains, including software security. Lately, the suitabil-
ity of DBI for security has been questioned in light of transparency
concerns from artifacts that popular frameworks introduce in the
execution: while they do not perturb benign programs, a dedicated
adversary may detect their presence and defeat the analysis.
The contributions we provide are two-fold. We first present the
abstraction and inner workings of DBI frameworks, how DBI as-
sisted prominent security research works, and alternative solutions.
We then dive into the DBI evasion and escape problems, discussing
attack surfaces, transparency concerns, and possible mitigations.
We make available to the community a library of detection pat-
terns and stopgap measures that could be of interest to DBI users.
CCS CONCEPTS
• Security and privacy → Systems security; Intrusion/anomaly
detection and malware mitigation; Software reverse engineering; Soft-
ware security engineering.
KEYWORDS
Dynamic binary instrumentation, dynamic binary translation, in-
terposition, transparent monitoring, evasion, escape
ACM Reference Format:
Daniele Cono D’Elia, Emilio Coppa, Simone Nicchi, Federico Palmaro,
and Lorenzo Cavallaro. 2019. SoK: Using Dynamic Binary Instrumenta-
tion for Security (And How You May Get Caught Red Handed). In ACM Asia
Conference on Computer and Communications Security (AsiaCCS ’19), July
9–12, 2019, Auckland, New Zealand. ACM, New York, NY, USA, 13 pages.
https://doi.org/10.1145/3321705.3329819
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329819
Lorenzo Cavallaro
King’s College London
PI:EMAIL
1 INTRODUCTION
Even before the size and complexity of computer software reached
the levels that recent years have witnessed, developing reliable and
efficient ways to monitor the behavior of code under execution
has been a major concern for the scientific community. Execution
monitoring can serve a great deal of purposes: to name but a few,
consider performance analysis and optimization, vulnerability iden-
tification, as well as the detection of suspicious actions, execution
patterns, or data flows in a program.
To accomplish this task users can typically resort to instrumen-
tation techniques, which in their simplest form consist in adding
instructions to the code sections of the program under observation.
One can think of at least two aspects that impact the instrumenta-
tion strategy that researchers can choose to support their analyses:
the availability of the source code for the objects that undergo obser-
vation and the granularity of information that should be gathered.
Additionally, a researcher may be interested in accessing instru-
mentation facilities that let them also alter the normal behavior of
the program when specific conditions are observed at run time.
A popular instrumentation paradigm is represented by dynamic
binary instrumentation. DBI techniques support the insertion of
probes and user-supplied analysis routines in a running software
for the sake of monitoring and possibly altering its execution up
to the instruction level granularity, without requiring access to
its source code or modifications to the runtime. The ease of use
and flexibility that characterize DBI techniques has favored their
adoption in an impressive deal of programming languages, software
testing, and security research over the years.
Lately, the suitability of using DBI for security applications has
been questioned in light of artifacts that popular DBI frameworks
introduce in the execution, which may let an adversary detect their
presence and cripple an analysis that hinges on them. This trend
of research originated in non-academic forums like REcon and
BlackHat where security researchers pointed out several attack
surfaces for DBI detection and escape (e.g., [17, 24, 31, 56]).
Among academic works, Polino et al. [46] proposed countermea-
sures for anti-instrumentation strategies found in packers, some of
which are specific to DBI. One year later Kirsch et al. [28] presented
a research that instead deems DBI unsuitable for security applica-
tions, presenting a case study on its most popular framework.
Contributions. In this work we try to approach the problem of
using DBI in software security research from a neutral stance, in
hopes of providing our readers with insights on when the results
of an analysis built on top of DBI should not be trusted blindly.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
D’Elia et al.
We distill the DBI abstraction, discuss inner workings and primi-
tives of frameworks implementing it, and present a quantitative
overview of recent security literature that uses DBI to back a hetero-
geneous plethora of analyses. We then tackle the DBI evasion and
escape problems, discussing desired transparency properties and
architectural implications to support them. We categorize known
adversarial patterns against DBI engines by attack surfaces, and
discuss possible mitigations both at framework design level and
as part of user-encoded analyses. We collect instances of known
adversarial sequences and prototype a mitigation scheme in the
form of a high-level library that could be of interest to DBI users.
2 DYNAMIC BINARY INSTRUMENTATION
DBI systems have significantly evolved since the advent of DynInst [5]
as a post-compilation library to support tools that wanted to instru-
ment and modify programs during execution. In the following we
present characteristic traits of the DBI abstraction and its embodi-
ments, discussing popular frameworks and alternative technologies.
2.1 The DBI Abstraction
We can think of a DBI system as an application virtual machine that
interprets the ISA of a specific platform (usually coinciding with
the one where the system runs) while offering instrumentation
capabilities to support monitoring and altering instructions and
data from an analysis tool component written by the user:
Definition 2.1 (DBI System). A DBI system is an execution run-
time running in user space for process-level virtualization. An un-
modified compiled program executes within the runtime as would
happen in a native execution, with introspection and execution
control capabilities accessible to its users in a programmatic way.
The definition above is meant to capture distinctive traits of
most DBI embodiments used in research in the last two decades.
The components of a DBI runtime are laid out in the same address
space where program execution will take place, with the program’s
semantics being carried out alongside user-supplied code for its
analysis. Alternative designs recently proposed for moving the
runtime outside the process where the code under analysis executes
are discussed in Section 5.1 and Section 6.
Inner Workings of DBI Engines. A design goal for a DBI system
is to make it possible to observe—and possibly alter—the entire
architectural state of the program under analysis, including register
values, memory addresses and contents, and control flow transfers.
To this end, the approach followed by most popular DBI em-
bodiments is to recur to dynamic compilation: the original code
of the application is not executed directly, but rather analyzed, in-
strumented and compiled using a just-in-time (JIT) compiler. An
instruction fetcher component reads the original instructions in the
program as they are executed for the first time, offering the engine
the opportunity to instrument them before undergoing compilation.
The compilation unit is typically a trace, defined as a straight-line
sequence of instructions ending in an unconditional transfer and
possibly with multiple side exits representing conditional branches.
Compiled traces are placed in a code cache, while a dispatcher
component coordinates transfers among compiled traces and new
fetches from the original code. Similarly as in tracing JIT compilers
for language VMs, a trace exit can be linked directly to its target to
bypass the dispatcher when a compiled version is available, while
inline caching and code cloning strategies can be used to optimize
indirect control transfers. Special care is taken for instructions that
should not execute directly, such as those for system call invoca-
tions, as they get handled by an emulator component in a similar
way to how privileged instructions are dealt with in virtual machine
monitors for whole-system virtualization [20].
From the user’s perspective, analysis code builds on instrumen-
tation facilities exposed through an API interface, with the DBI
backend taking care of program state switching between analysis
routines and the code under observation.
The design space of a DBI engine accounts for different possibil-
ities. An alternative to JIT compilation is the probe-based approach
where the original program instructions are executed once they
have been patched with trampolines to analysis code. In this work
we deal with JIT-based engines only, as they can offer better perfor-
mance for fine-grained instrumentation and are intuitively more
transparent. Another choice is whether to operate on a native in-
struction set or by lifting code to an intermediate representation:
the first choice typically can lead to faster compilation at the price of
an increased complexity for the backend, while the other generally
favors architectural portability.
Execution Correctness. One of the most critical challenges in the
design of a DBI system is to prevent the native behavior of an appli-
cation under analysis from inadvertently changing when executing
inside the system. Real-world applications can exercise a good
deal of introspective operations: common instances are retrieving
instruction pointer values and return addresses for function invoca-
tions, and iterating over loaded code modules. When the execution
environment orchestrated by the DBI runtime does not meet the
expected characteristics, an application might exercise unexpected
behaviors or most likely crash.
Bruening et al. [4] identify and discuss three broad categories
of transparency requirements related to correctness: code, data,
and concurrency. An example of code transparency when using JIT
compilation is having every address manipulated by the applica-
tion match the one expected in the original code: the DBI system
translates addresses for instance when the OS provides the con-
text for a signal or exception handler. Data transparency requires,
e.g., exposing the CPU state to analysis code as it would be in a
native execution (leaving the application’s stack unhindered as the
program may examine it) and not interfering with its heap usage.
Concurrency transparency prescribes, e.g., that the runtime does
not interfere by using additional locks or analysis threads.
Achieving these properties is difficult when handling generic
code, as a system should not make assumptions on how a program
has been compiled or how it manipulates registers, heap and stack:
for instance, some versions of Microsoft Office read data or execute
code located beyond the top of the stack, while aggressive loop
optimizations may use the stack pointer to hold data [4].
Primitives for Analysis. DBI systems offer general-purpose APIs
that can accommodate a wide range of program analyses, allowing
users to write clients (most commonly referred to as DBI tools) that
run interleaved with the code under analysis. One of the reasons
behind the vast popularity of DBI frameworks is that DBI architects
tried not to put too many restrictions on tool writers [4]: although
SoK: Using Dynamic Binary Instrumentation for Security
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
sometimes users may miss the most effective way for the job, they
are not required to be DBI experts to implement their program anal-
yses. The runtime exposes APIs to observe the architectural state
of a process (e.g., memory and register contents, control transfers)
from code written in traditional programming languages such as
C/C++, often supporting the invocation of external libraries (e.g.,
for disassembly or constraint solving). A DBI system may also try
to abstract away idiosyncrasies of the underlying instruction set,
providing functions to intercept generic classes of operations such
as reading from memory or transferring control flow.
From the client perspective, a generic DBI system provides prim-
itives to handle at least the following elements and events:
also on return when possible (think of, e.g., tail calls);
• instructions in the original program to be instrumented;
• system call invocation, before and after a context switch;
• library function invocation, intercepted at the call site and
• creation and termination of threads and child processes;
• dynamic code loading and unloading;
• exceptional control flow;
• asynchronous control flow (e.g., callbacks, Windows APCs).
Instructions can be exposed to the client when traces are built
in the code cache, allowing it to iterate over the basic blocks that
compose them, or when code images are first loaded to memory, en-
abling ahead-of-time (AOT) instrumentation. AOT instrumentation
is useful for instance when analyzing libraries (e.g., to place hooks
at the beginning of some functions), but cannot access information
like basic-block boundaries that is revealed only at run time.
The capabilities offered to a client are not limited to execution
inspection, but include the possibility of altering the program behav-
ior. Common examples are overwriting register contents, replacing
instructions, and modifying the arguments and return values for a
function call or rewiring it to some user-defined function.
Sophisticated engines like Pin and DynamoRIO assist users in