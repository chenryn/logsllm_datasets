title:RealSWATT: Remote Software-based Attestation for Embedded Devices
under Realtime Constraints
author:Sebastian Surminski and
Christian Niesler and
Ferdinand Brasser and
Lucas Davi and
Ahmad-Reza Sadeghi
RealSWATT: Remote Software-based Attestation for Embedded
Devices under Realtime Constraints
Sebastian Surminski
University of Duisburg-Essen
Essen, Germany
Christian Niesler
University of Duisburg-Essen
Essen, Germany
Ferdinand Brasser
Technical University Darmstadt
Darmstadt, Germany
PI:EMAIL
PI:EMAIL
PI:EMAIL
Lucas Davi
University of Duisburg-Essen
Essen, Germany
Ahmad-Reza Sadeghi
Technical University Darmstadt
Darmstadt, Germany
PI:EMAIL
ABSTRACT
Smart factories, critical infrastructures, and medical devices largely
rely on embedded systems that need to satisfy realtime constraints
to complete crucial tasks. Recent studies and reports have revealed
that many of these devices suffer from crucial vulnerabilities that
can be exploited with fatal consequences. Despite the security and
safety-critical role of these devices, they often do not feature state-
of-the-art security mechanisms. Moreover, since realtime systems
have strict timing requirements, integrating new security mech-
anisms is not a viable option as they often influence the device’s
runtime behavior. One solution is to offload security enhancements
to a remote instance, the so-called remote attestation.
We present RealSWATT, the first software-based remote attesta-
tion system for realtime embedded devices. Remote attestation is a
powerful security service that allows a party to verify the correct
functionality of an untrusted remote device. In contrast to previous
remote attestation approaches for realtime systems, RealSWATT
does neither require custom hardware extensions nor trusted com-
puting components. It is designed to work within real-world IoT net-
works, connected through Wi-Fi. RealSWATT leverages a dedicated
processor core for remote attestation and provides the required
timing guarantees without hardware extensions.
We implement RealSWATT on the popular ESP32 microcon-
troller, and we evaluate it on a real-world medical device with
realtime constraints. To demonstrate its applicability, we further-
more integrate RealSWATT into a framework for off-the-shelf IoT
devices and apply it to a smart plug, a smoke detector, and a smart
light bulb.
CCS CONCEPTS
• Networks → Cyber-physical networks; • Security and privacy
→ Embedded systems security; • Computer systems organi-
zation → Real-time system architecture.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484788
PI:EMAIL
KEYWORDS
attestation; firmware security; IoT; embedded systems; realtime;
critical infrastructure
ACM Reference Format:
Sebastian Surminski, Christian Niesler, Ferdinand Brasser, Lucas Davi,
and Ahmad-Reza Sadeghi. 2021. RealSWATT: Remote Software-based Attes-
tation for Embedded Devices under Realtime Constraints. In Proceedings of
the 2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 16 pages. https://doi.org/10.1145/3460120.3484788
1 INTRODUCTION
Commodity realtime embedded systems often suffer from security
vulnerabilities already known from classical computing. However,
due to the resource constraints embedded devices often lack ba-
sic security mechanisms that are common in most other types of
systems [4]. At the same time, realtime applications, which are
essential in many safety-critical domains, place highly conservative
requirements to guarantee the strict realtime operation.
The need to secure embedded devices is further amplified by
the trend of Internet of Things (IoT) to connect previously uncon-
nected and isolated devices to the Internet to enhance features and
services. This leads to large vulnerable ecosystems consisting of
millions of devices.1 In particular, any malfunction in realtime de-
vices can have fatal consequences since they perform highly critical
real-world tasks in many safety-critical domains as cyber-physical
systems, medicine and transportation to name some: A modern
automobile can have up to 150 control units [58] and offers a large
attack surface [35]; or controllers of industrial robots suffer from
a high number of software vulnerabilities [44], as a well-known
incident at a steel mill has shown where the blast furnace could
not be shut down properly resulting from an attack on its control
systems, leading to severe physical damage [65]. These systems
are a large subset of IoT devices with sparse resources and strict
requirements. Since realtime systems serve highly critical tasks in
the field of industry, medicine, and transportation (e.g., as a vehicle
control unit), the introduction of security mechanisms is vital but
challenging.
1The Mirai botnet [5], that compromised and controlled millions of IoT devices, was
used for multiple large-scale distributed denial of service attacks, with up to 1 Tbit s−1
bandwidth, consisting of more than 300,000 devices [32].
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2890Legacy realtime embedded devices lack hardware features, e.g.,
secure boot or trusted execution environments (TEEs). Moreover,
they are commonly integrated into machines and run customized
software, and hence, cannot be simply replaced. On the other hand,
incorporating protection mechanisms in software such as control-
flow integrity [1] always impacts execution times of tasks [17, 55].
This is highly critical in the realtime realm, since they must adhere
to strict timing behavior and hence go through an extensive devel-
opment and profiling phase. Any changes in the execution, even
through instrumentation, e.g., to integrate control-flow integrity
(CFI) [17, 55], or abnormality monitoring [48], affect the runtime
behavior of the device.
Hence, adequate security solutions for realtime applications,
must have strictly limited impact on the realtime operations [52].
Currently there exist no practical solutions that can tackle these
challenges. Furthermore, the handling of detected suspicious or
malicious behavior is an important question for critical realtime
systems. Solutions like control-flow integrity may terminate if an
illegal path is executed.
At first glance, a promising solution to tackle these challenges
seems to be remote attestation (RA), as it offloads the verification
of the monitored device to an external trusted party. RA allows a
trusted party, called verifier, to gain assurance about the correctness
of the state of a remote device, called prover. It has been used for
embedded devices [2, 10, 19, 40] and sensor networks [53]. However,
the main challenge for attesting realtime devices is, however, to
utilize the attestation independently from the execution of the
monitored application.
Moreover, another vital aspect of remote attestation is to get a
genuine attestation report from an untrusted device. An attacker
could forge the attestation report, for example by using a different
device or an emulation of the attested system. There have been a
variety of proposals for attestation schemes to address this issue:
(1) hardware-based using trusted computing [2], (2) hybrid using
custom hardware extensions [10, 19, 20, 34, 40], and (3) software-
based [46, 53].
However, none of these solutions is an option for legacy realtime
embedded devices: While hardware-based and hybrid approaches
to attestation require changes to or customization of the underlying
hardware, software-based attestation poses strict timing assump-
tions on the response of the prover and the verifier induces many
requirements upon the implementation of attestation logic and
communication [7, 46]. We will elaborate on these approaches in
detail in the related work in Section 9.
Our goal and contributions. In this work, we present RealSWATT,
the first remote attestation framework that is applicable to realtime
systems without requiring any hardware changes. We leverage
off-the-shelf hardware and do not require any trust anchor on the
attested device. A key aspect of our design is based on the obser-
vation that many modern low-cost embedded systems, such as
the ESP32, are built on a multicore architecture where the cores
are often not fully utilized. Especially in realtime context, multi-
threading is hard because it is of utmost importance to meet all
deadlines under all circumstances. So in practice critical tasks are
often not scheduled in parallel. In specific areas, e.g., avionics, there
are even regulations to limit the usage of additional cores [13]. As
a result, one or more processing cores are idle. We leverage this
circumstance and utilize an idle processor core to develop a new
attestation framework. This allows the attestation and the realtime
tasks to be properly scheduled by the underlying realtime operat-
ing system and makes RealSWATT suitable for legacy embedded
devices in industry, medicine, and cyber-physical systems.
However, the usage of multicore processors involves tackling
several new challenges: while the benign execution only uses one
processor core, an attacker can now use all processor cores in order
to forge an attestation report. We address this issue by selecting
adequate cryptographic functions that cannot be accelerated by par-
allelization. Furthermore, the communication, especially in wireless
networks commonly deployed for IoT devices and cyber-physical
system setups, is prune to variation in transmission times. This
also conflicts with the strict assumptions for software-based attes-
tation [7].
Because of these required strict assumptions and shortcomings
like the vulnerability against compressing attacks [12] software-
based attestation has been assumed insecure and infeasible in prac-
tice, receiving only little to no attention. It requires specific as-
sumptions about the execution speed of the prover logic on the
attested device and precise timing measurements, making the im-
plementation challenging [46]. Software-based attestation however
is a good fit for legacy devices, where other attestation schemes
simply are not available due to the lack of specialized hardware
on the given device. Thus, we have re-evaluated software-based
attestation and solved several challenges, which allow us to deploy
a software-based attestation scheme in a real-world scenario.
We developed continuous attestation where the verifier sends
the next attestation request before it receives the previous response
of the prover so that the prover can start the next attestation-run
directly after the previous one. This procedure omits the trans-
mission and verification time, so that variations in transmission
time do not influence the attestation. Our continuous attestation
approach induces the strict requirement that the attacker cannot
run two attestation protocols in parallel in order to get a time-span
in which no attestation is performed, thus effectively solving the
Time-of-Check Time-of-Use (TOCTOU) problem. The combination
of these techniques (multicore and continuous attestation) ensures
that RealSWATT can reliably attest realtime embedded systems
in real-world wireless networks without impairing the realtime
operation.
In summary, we provide the following contributions:
• We propose RealSWATT, the first software-based remote at-
testation framework for realtime-critical devices that works
on commodity off-the-shelf low-cost embedded devices.
• We present the first attestation framework that exploits a
separate processor core for attestation to ensure the correct
scheduling and timing of realtime operations.
• We propose a new scheme called continuous attestation and
a network architecture for the software-based attestation
of embedded devices which allows us to tackle the strict
timing constraints and hardware requirements of existing
software-based attestation schemes [7, 46].
• Our framework allows to remotely verify code- and data
sections to detect malware infection and malicious changes
of configuration parameters.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2891• For our proof-of-concept implementation, we used one of
the most popular IoT platforms ESP32 microcontrollers and
conducted a detailed evaluation on a medical device syringe
pump. We performed a full end-to-end example with an
attack that compromises the syringe pump’s configuration
which is detected by RealSWATT.
• We implemented RealSWATT into ESPEasy, a framework to
use on real-world off-the-shelf IoT devices and used it on
different devices such as a smart plug, a smoke detector, and
a smart light bulb.
2 BACKGROUND
In this section we explain the concepts and basic properties of
realtime applications and remote attestation as foundation of our
attestation framework.
2.1 Realtime Systems
In contrast to the best-effort compute system, realtime systems
require strict response times of the tasks they are running. There
are different classes of realtime systems distinguished by their
strictness, i.e., the consequences of missing deadlines; hard, firm,
or soft realtime requirements [49]. In the hard class, no deadline
may be missed, otherwise there will be severe consequences, akin
to a device failure. Typical examples for such systems with realtime
constraints are control units for vehicles, e.g., braking or engine
control units where missing deadlines have direct influence on the
physical world. Also industrial machines, cyber-physical systems,
and medical devices often have hard realtime constraints [49].
As realtime devices are often safety-critical there are specific
procedures and regulations to be considered during development.
Changes induce a new validation process as well as a re-certification
in case of safety-critical devices, e.g., in avionics [45].
2.2 Remote Attestation
Remote attestation is a security service that allows a trusted en-
tity, called verifier to verify the integrity of the state of a remote,
unstrusted system, called prover [40]. Remote attestation schemes
have been used for different devices including embedded devices [2,