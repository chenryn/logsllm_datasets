ApacheKaraf概览/176
6.5.2
6.5.1
使用JMX获取队列信息/164
清空不常用的队列/163
6.3.2
6.3.1
为什么需要使用子实例/201
使用Karaf子实例/197
Application log4j 日志 / 196
Karaf.log / 195
LOG模块/191
OSGi模块/190
Karaf Wrapper的配置文件/184
使用ServiceWrapper/181
支持的平台/180
配置NFS服务器/173
获取ActiveMQ的队列信息/167
启用ActiveMQ的JMX功能/165
使用消息超时机制/162
原理/175
将Failover作为连接串/174
调整消息中间件的配置文件/174
配置NFS客户端/173
为什么消息需要生命周期/160
---
## Page 11
自动化运维软件设计实战
6
9.3
2
9.1
8.6
8.1
7.8
7
交互式命令执行模块-
数据访问模块一
9.2.3
作业调度模块—
插件包概览/228
通用插件包/228
8.6.2
8.6.1结果处理服务端设计目的/226
结果处理服务端／226
8.5.1PlayBook服务端设计目的/221
PlayBook服务端/221
插件状态服务端／220
消息分发服务端/219
8.2.2
核心框架/214
核心层概述／213
核心框架/213
序列化模块一
9.3.2
9.3.1
9.2.4
9.2.2
9.2.1
8.5.2
8.2.3
8.2.1
使用Feature-
使用Web控制台/207
7.6.3
7.6.2
调度系统进程/233
作业调度参数/232
Cron4J基本使用方式/231
PlayBook设计示意图/223
插件状态汇报/218
使用Midao/236
结果处理服务端处理流程/226
部署插件包/207
编写控制台插件包/206
为什么选择Midao/235
重新调度作业/233
客户端消息处理/217
服务端消息处理/216
Gson/237
Cron4J/230
-JDBC数据源/209
—MidaoProject /234
JavaExpect/242
---
## Page 12
11.1编译安装Zabbix/261
10.1文件下发插件／250
11.2强大的触发规则／268
9.6小结/249
11.3
10.4
10.3
10.2
Zabbix调用OSGi运维功能/271
11.2.2特色的触发规则/270
11.2.1触发规则概览/268
11.1.3-
11.1.2
11.1.1
命令执行插件/257
10.2.2文件抓取插件设计要点/256
10.2.1
文件抓取插件/254
10.1.2使用ApacheCommonIO/251
目录结构查询插件/258
10.1.1
常用插件/250
部署MySQL/261
文件下发插件设计/250
安装Zabbix/267
编译部署Apache+PHP/263
文件抓取插件整体设计/254
录
---
## Page 13
题，只要找到小明，问题都能迎刃而解。
是一个被传得神乎其神的电脑专家。按照大妈们的话来说，无论你的电脑出了哪方面的问
了，年纪轻轻的他就已经懂得了各种电脑问题的维修技巧。这不，在大妈圈里面，小明可
能够稳定地运行，更好地为企业提供服务。
分为硬件运维和软件运维两大块。无论是哪一种运维，它的最终目的都是为了让应用系统
维的、主机运维的，等等。虽然运维的工作被细分成这么多种，但是粗略地看，运维主要
运维的全部内容）。
着眼镜的帅气小伙正在对一台电源出故障的设备进行故障排查（曾经简单地认为这就是
这么一个场景：在一个有几百台设备发出“嗡”声的机房里面，
1.1硬件运维和软件运维
从事运维开发工作之后，发现运维也是有细分领域的，有负责业务运维的、数据库运
在笔者实际从事运维开发这一工作之前，只要提到运维工程师，脑海里面就会出现
“咚咚咚”，小明听到三声敲门声之后打开了门，看到一脸焦急的小菜。还没等小明开
小明对电脑的硬件非常感兴趣，家里的电脑都不知道被他拆了又装、装了又拆多少遍
1.1.1小故事之一
运维，指的是对一些已经搭建好的网络软／硬件进行维护。
第章什么是自动化运维
一电脑专家
一个身穿白衬衫、带
---
## Page 14
的运维和应用层面的运维。
面的运维所需要了解的知识点差别还是比较大的。
解决不了师妹的电脑开不了机的硬件故障。运维的知识很广阔，硬件层面的运维与软件层
菜的燃眉之急。第二个小故事里面的小菜虽然对软件维护方面的知识有很深了解，但是却
例如企业内部的OA、ERP等业务系统。
的监控和维护，这些系统是介于设备和应用之间的。应用运维指的是对业务系统的运维，
备用电源、空调，主机上的硬盘、内存这些物理设备的维护，都可以看作硬件运维。
“还说是什么计算机高手，连修个电脑都不会”。
天，却没定位出电脑开不了机的问题是因为主板损坏。于是师妹忍不住在旁边小声嘀咕：
不了机，于是就找到了小菜，希望小菜能帮她把电脑修好。小菜去师妹宿舍之后捣鼓了半
修电脑。最近小菜就碰到这么个烦心事，有个师妹的电脑出问题了，不知道为什么就是开
能漂亮地把问题解决。
是小菜在负责维护，只要他发现系统出现运行缓慢或者是无法打开的现象，不出半天他就
的指导下，小菜在系统运维方面的能力也十分了得，学校的教务系统、班上的点名系统都
Java程序设计，还是数据库这些科目，小菜在班里的考试成绩都是排名第一。而且在学长
在电脑方面很厉害，你能不能帮我检查一下，给我提供点建议？”小明一听就傻眼了………
个杀毒软件杀个毒，每周重启一下电脑，但这次不管怎么弄就是没效果。我听我妈妈说你
在选课的时候突然变得很慢了，整个系统慢到几乎是不可用的状态了，平时我也就只会装
口，小菜就说到：“小明哥啊，赶紧帮忙救个火啊，我在学校负责维护的一套选课系统今天
自动化运维软件设计实战
所以本书后续所描述的自动化运维中的“运维”，指的都是软件运维，也就是系统层面
前面我们讲到小明作为一个对硬件知识了解得比较深入的中国好邻居，却解决不了小
软件运维包括系统运维和应用运维。系统运维指的是对操作系统、数据库、中间件等
硬件运维可以理解为对基础设施的运维，包括机房的设备和电脑设备。比如对机房的
在班里计算机成绩这么出众，带来的结果必定只有一个，那就是有女同学会叫你帮忙
1.1.3
小菜是某大学计算机专业的学生，在班里可是出了名的计算机高手，不论是C语言
1.1.2
硬件运维与软件运维
小故事之二一
一你居然不会修电脑
---
## Page 15
故障排查等后续处理带来许多干扰。
达不到企业在业务上的要求的。而且，多套业务系统部署在一台主机上，也会为性能优化、
不然一旦操作系统出现问题，部署在操作系统上的所有应用系统都会出现故障，这肯定是
出账用了太多的IO才导致系统的速度变缓慢的。于是一场扯皮大战就这样开始了。
他们的款。A公司的开发人员也不认输，认为我们的功能绝对没有问题，是你们的系统周末
的现象。于是B公司的开发人员就开骂了，指责A公司的新功能导致主机负载高，这个得扣
功能，周末的时候出现了主机的I/O负载很高，导致该主机上的业务系统都出现了反应迟钝
会出现这样一个场景：A公司和B公司的系统在同一台主机上，A公司于本周五上了一个新
同的厂商进行开发。既然是不同的厂商，当多个应用系统被部署到了一起的时候，很容易就
乐而不为呢？我们可以从以下几个角度来看待这个问题。
减少由于主机数量的增加而给运维带来更大的负担，另一方面也可以为企业节省成本，何
软件，这种重复性的劳动估计就没多少人能受得了了。
翻倍了。给十台主机打补丁、升级软件，估计还受得了，但是给五十台主机打补丁、升级
运维工程师可能只需要运维十多台设备，一段时间过后，他们需要运维的设备数可能就会
系统一天一天地增大，运维工程师需要运维的主机数量也随之慢慢地增加。刚开始的时候，
设施上进行建设的。直白点讲，就是一个应用会部署在一套服务器上。随着公司内部的IT
1.2软件运维的主要问题
然后，从保证业务系统的可用性来看，不同的应用系统之间需要在系统层进行隔离。
首先，为了避免被某个软件厂商垄断了企业的系统，
有小伙伴可能会问，为什么不把多个应用系统部署在一台主机上呢？这样一方面可以
在虚拟化发展起来之前，企业的IT建设普遍是把单个应用部署在一套甚至是多套基础
由于应用系统是由不同开发商开发的，不同开发商内部的技术栈会有差异，所以很容
给运维工程师带来困扰的第二个问题就是系统的异构性。
1.2.2
1.2.1设备数量多
系统异构性大
一般情况下企业的系统都会交给不
章什么是自动化运维
---
## Page 16
这个时候，我们就需要思考这样一个问题，能不能有一个既可以减少人力成本，又可以可
问题是设备数量的爆炸性增长，原有靠堆人力或者积累脚本的做法已经显得不太可行了。
来管理这些主机呢？从竖井式IT建设到层次性IT建设过程中对运维工程师来说，最大的
1.3
挑战。
能这些设备也仅仅是这家企业的一个部门的设备数而已，这给运维工程师带来了更大的
不断提升，需要运维的设备数量从原来的几百台增加到几千台甚至上万台，而且很有可
管理人员只需要申请一台虚拟机，然后再在CMDB里面填一下这台主机的信息就可以了
个新的业务系统就经历一个漫长的采购流程了，也不需要再费心思去找个机房放主机了。IT
设备的采购和上线。但是随着虚拟化的成熟，企业的IT建设再也不需要像以前一样，上一
歇一歇了，没想到近年来，随着虚拟化的日渐成熟，又一个挑战来了。
IP的设备需要用SSH去重启，哪个IP的设备需要用远程桌面去重启？
SSH去维护还是用远程桌面去维护。公司规定每月要有一次常规性的主机重启，究竟哪个
服务器需要用ⅡIS，数据库需要用SQLServer的情况。
据库需要用MySQL，而B开发商开发出的应用系统需要用WindowsServer来承载，Web
易会出现A开发商开发出的应用系统需要跑在Redhat上，Web服务器需要用Tomcat，数
自动化运维软件设计实战
保证数据的准确性。
流程都紧密关联，支持这些流程的运转，发挥配置信息的价值，同时依赖于相关流程以
）CMDB存储管理企业IT架构中设备的各种配置信息，它与所有服务支持和服务交付
当设备数量很多、设备存在很大的异构性时，我们能不能有一个更加轻松愉快的方式
在这个虚拟化如此“任性”的年代，IT建设的成本在不断降低，IT建设的速度也在
以前企业的设备数量虽然会增长，但是毕竟需要走过一个漫长的企业内部流程才能完成
这个时候运维工程师就傻眼了，这怎么运维？系统出故障了之后还得想想究竟是用
可能有那么一些运维工程师通过自己多年积累下的脚本度过了一些难关，本以为可以
1.2.3
运维常用工具
虚拟化的成熟带来更大的困难
---
## Page 17
化运维，如图1.1所示。
入口，我们可以通过这个入口所提供的对外封装好的一些接口去对异构的设备进行集中
做相应的操作。这种费时费力的操作方式并不是我们想要的，我们更希望有一个统一的
先去看一下究竟哪些设备是Windows操作系统，哪些设备是Linux操作系统，然后再去
的问题。试想一下，现在需要对运维的所有主机进行常规的集中化重启操作，我们还得
带来不少的麻烦。无论是AD域控+WMI还是SSH的方式，都只是解决了一类主机运维
主机，也会有Linux和UNIX主机的场景。而这种操作系统的多样性，也给集中化的运维
用SSH的方式完成集中化的运维，难度也不大。
式去完成，总体来说还是挺方便的。
WMI的API来完成这个功能，而像一些msi程序的发布和安装，就可以通过AD域控的方
行集中化的操作。例如，我们需要对主机进行重启的时候，就可以通过PowerShell去调用
设备，假如我们需要对它们进行集中化的重启，就可以采用PowerShell的方式来对设备进
靠地批量完成集中化运维任务的方法呢？
但是，由于不同业务系统对可用性和鲁棒性的要求不一样，通常会出现既有Windows
在Linux和UNIX操作系统下，我们可以通过SSH+Expect的方式或者是双机互信后采
在设备的架构比较一致的情况下，实现集中化运维并不是什么难事。对于Windows 的
Windows
图1.1对异构设备进行集中化运维
重启主机
Linux
UNIX
章什么是自动化运维
---
## Page 18
本身提供的模块时，我们可以在客户机安装Salt Minion来进行主机的集中化运维。
行轻易的批量操作。当我们希望SaltStack能够具备更好的扩展性，以及更好地使用SaltStack
维软件，并且SaltStack还支持SaltsSSH的方式，可以让我们无须使用Agent就能够对主机进
Puppet是十分类似的。同时，它还支持远程命令的并行执行，自带了许多日常执行模块，所
它支持Linux、UNIX、Solaris、Windows等多种操作系统。
等功能。
量运维操作。
Puppet就是一
心一个运维操作最后是否到达我们所期望的状态，而具体它是怎么做到的，我们则不关心。
连接一次服务器，
地向服务器发送请求，获取最新的配置，保证配置信息的同步。默认情况下每半个小时会
星型结构设计的，所有的客户端都会和一个或者几个服务器交互。每个客户端都会周期性
领他的 Puppet Labs 团队开发的。
上进行扩展，并且内置了一些可以管理配置文件、用户、软件包的模块。
和Ansible。
低的成本完成集中化运维的目标。目前比较流行的开源集中化运维软件有Puppet、SaltStack
自动化运维软件设计实战
从支持操作系统的丰富度这个角度来看，SaltStack支持的操作系统种类也十分丰富，
在可扩展性方面，Puppet有一套自己的DSL语言，可以很容易地在它原有模块的基础
Puppet 既可以采用“客户端／服务端”的模式运行，也可以单独运行。它是采用C/S
在软件的设计上，
命令式的集中化运维软件描述的是一个运维操作应该怎么去做，而声明式的方法只关
Puppet是一款用Ruby语言实现的C/S 类型的集中化配置软件，它是由LukeKanies 带
随着开源软件的不断发展，现在已经有许多不错的开源软件可供选择了，可以通过较
1.3.2
1.3.1
SaltStack内置了许多现成可用的模块，包括安装软件、配置参数、启停服务
一个采用声明式的方法来定义应该怎么对系统做配置的软件。
SaltStack
，下载最新的配置文件，并且严格按照配置文件来配置服务器。
，它支持Master主动推送配置和Minion定时拉取配置的方式，这点与
---
## Page 19
只有在每次故障出现之后都重复做这些运维操作吗？
问题出现一两次，我们可以登录出现故障的主机进行处理，但是次数多了呢？难道我们就
用哪一种集中化运维工具，和我们直接通过SSH或者远程桌面去操作其实没有多大的区别。
程师在日常运维的过程中对某些场景积累下来的特定的经验，所以在这种情况下，无论使
款能帮助他们减轻负担。因为这些故障往往是非集中化的操作，解决的方法都是靠运维工
志文件。一段时间后，又有用户报障…
就不大的磁盘被系统写日志文件给写满了，于是工程师又熟练地敲下了rm命令删掉一些日
几天后，有用户报障说业务系统B无法上传文件了，再次熟练地登录那台主机，发现本来
系统故障了，就得熟练地打开SecurityCRT登录主机，然后再熟练地敲下restart 命令。没
问题一时半会解决不了，这个时候运维工程师就只能盯着自己的手机短信，一旦出现业务
由于程序设计的原因，总是会不定期地出现应用服务器崩溃的问题，但是开发商由于技术
没有达到自动化的水平。例如，我们现在维护了200台设备，A主机上跑了一个业务系统，
维了，一些集中化的部署、集中化重启的动作都可以轻易完成。但是我们的运维过程却还
1.4
利（注：Ansible较新的版本已经能够对Windows 进行操作了，采用的是WMI的方式）。
那么出色，但是换个角度看，Ansible这种不需要装Agent 的做法也为我们提供了不少的便
OpenSSH，这样才可以让Ansible正常地运转。当然，Ansible在Windows上的表现并不是
于Windows 主机来说，使用Ansible 就有点麻烦了。因为我们需要在Windows上配置好
的。例如，有一些模块在调用的时候会提示客户机需要安装某个Python的扩展。当然，对
SaltStack非常类似，都是一种命令式的集中化运维工具。
没看错，用纯 SSH的方式，也就是说我们的主机上是不需要安装任何Agent 端的。它与
于是，我们可怜的运维工程师虽然有那么多集中化运维工具可以选择，但是却没有
有了像Puppet、Ansible和 SaltStack这样的工具，我们已经可以轻松地做到集中化运
虽然说不需要安装任何Agent 就可以用，但是它对被操作的主机其实还是有一定要求
Ansible是一个用Python设计的通过SSH的方式对主机信息进行集中化运维的软件。
这个时候，我们就需要把运维从集中化提升到自动化的水平了，而运维自动化，是一
1.3.3
自动化运维
Ansible
章什么是自动化运维
---
## Page 20
邮件等方式给运维人员发出通知，让运维人员能够在执行完之后马上知道系统究竞执行了
用于查询究竞在什么时候做出了什么样的运维操作，并且在执行完成之后能够通过短信、
便，也就是怎么样能让异构操作系统的差异对执行的动作来说是透明的。
的运维操作了。这个过程我们需要关注的是如何可以屏蔽异构的操作系统给我们带来的不
件的操作，这些都是需要在决策过程中去定义的。
如，哪些主机磁盘满了需要做删除日志文件的操作，哪些主机磁盘满了需要做归档日志文
解信息的过程，只有当我们了解了实际情况之后，我们才能进行后续的操作。
行，还有记录与反馈，如图1.2所示。
这个过程自动化。
上传文件这样的故障，在排查后已经把问题定位清楚并且有解决方法了。对于运维来说，
以很好地解决问题，但是面对单点发生的故障，集中化运维工具并不能产生很好的效果。
个对单点发生的故障运维知识沉淀的过程。
自动化运维软件设计实战
最后一步是记录和反馈。在完成了具体的维护操作以后，我们需要有一套记录的机制，
第三步是执行。我们根据之前的规则做出相应的决策之后，然后就可以开始执行相应
第二步是决策。决策这个过程定义了在什么情况下我们应该执行什么操作的规则。例
对于这种由监控所驱动的自动化运维，一般由四个步骤组成，分别是了解、决策、执
为什么说是知识的沉淀？假设出现我们上面所说的B主机磁盘写满导致业务系统无法
为什么说是单点发生？假如是多点发生并且重复的故障，我们通过集中化运维工具就可
第一步是要对设备、业务等我们所关注的对象进行监控。我们可以把监控看作一个了
记录与反馈
了解
图1.2
由监控驱动的自动化运维
执行
决策
---
## Page 21
1.5小结
平台性强的集中化运维框架并分享相应的案例。
最后讲解在极端恶劣的环境下如何通过OSGi+MQ的架构去设计一个易部署、易开发、跨
的开源软件如图1.3所示。
般情况下更倾向于选择像 SaltStack、Ansible 或者 Puppet 这些集中化运维工具。各环节选用
操作系统进行集中管理的能力，并且也没有人为它封装相应的运维模块，所以这个环节一
大的扩展能力。而对于执行这个动作，虽然Zabbix也可以做到，但是Zabbix没有对异构
了，它有丰富的告警策略、多种设备监控、强大的动作管理的功能，并且还具备了十分强
哪些运维操作，结果是怎么样的。
没有一个非常好的定义能说明什么样的运维程度才能算得上是自动化运维，有时候我
接下来的章节会介绍如何对设备进行集中化运维，如何整合Zabbix实现自动化运维；
对于了解、决策、记录和反馈这几个过程来说，目前开源软件中做得最好的就算Zabbix
记录与反馈
Zabbix
了解
Zabbix
图1.3各环节选用的开源软件
Ansible