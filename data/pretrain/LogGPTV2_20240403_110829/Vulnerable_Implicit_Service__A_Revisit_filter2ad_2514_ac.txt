### Optimized Text

**Identification of Auxiliary Functions Related to Intent Attributes**

In addition, we have identified several auxiliary functions that are closely related to the attributes of intents. These functions are summarized in Table 1. For example, the methods in the `android.content.ComponentName` class are used to construct a new component name, which is then set as the component name of an intent. Similarly, the methods in the `java.lang.Class` class are used to retrieve the name of a class, and the results are typically used to set the class name of an intent. Since most intent attributes are represented as strings, string processing functions are also considered essential.

**Inter-Method Intent Processing**

There are four scenarios where an Intent's data flow crosses method boundaries, as highlighted in Figure 2:

1. **Passing Intents as Parameters:**
   - When an intent from the `TemporaryIntentList` is passed to another method as a parameter, the data flow continues into the new method, and the intent is added to the `TemporaryIntentList` of the new method.
   
2. **Returning Intents from Methods:**
   - When a method containing an intent in the `TemporaryIntentList` is returned from another method, we record the corresponding method name and return value in the `MethodReturnIntentList` for each application. Additionally, all methods invoking this method are added to the intent constructor database.
   - **Example:**
     - In the sample code from the application "aa.apps.dailyreflections-1" (Figure 3), an intent (referred to as `Intent1` hereafter) is created and returned in the method `zzqS()`. During analysis, `Intent1` is added to `zzqS()`'s `TemporaryIntentList`, and a key-value pair is inserted into the appâ€™s `MethodReturnIntentList`.
     - We then search the smali code to identify all methods that invoke `zzqS()` and add them to the intent constructor database. As shown in the code snippet (b), `zzqS()` is called within `zzcH()`, so `zzcH()` is added to the intent constructor database.
     - When analyzing `zzcH()`, `Intent1` is added to `zza()`'s `TemporaryIntentList` because the return value of `zzcH()` is passed to `zza()`.
     - Finally, in `zza()` (code snippet c), `Intent1` is consumed by the `bindService()` function to start a service component, and `Intent1` is then added to the intent value database.

3. **Storing Intents in Global Variables:**
   - When an intent in the `TemporaryIntentList` is stored in a global variable, the key and value for this global variable are recorded in a `GlobalValueList` for each application. All methods that use this global variable are added to the intent constructor database.
   - **Example:**
     - In the sample code from the application "com.tvrsoft.santabiblia-13" (Figure 4), an intent is created in one method and saved into the global variable `Lcom/google/android/gms/auth/GoogleAuthUtil;->Dp: Landroid/content/Intent;`. In another method, the intent is retrieved from the global variable and used by the `bindService()` function to start a service component.

4. **Obtaining Intents from Unlisted Global Variables:**
   - If an intent is obtained from a global variable not included in the `GlobalValueList`, we perform a search to find all methods that use the global variable, conduct data flow analysis on each method, and set the global variable obtained in each method as a potential value of the intent.

**Handling Dependencies and Abstract Methods**

In all four cases, if an attribute of an intent depends on an input parameter of a callee method, we perform a backward search to the caller method and re-analyze the intent from that point. If an attribute value of the intent is the return value of an abstract method, the smali code only provides the name of the abstract value. In this case, we need to find all implementation methods and set their return values as potential values of the attribute. If an attribute value of the intent is the return value of a class inherited from a superclass, the smali code only shows the name of the inheritance class, and we need to find the implementation method in the superclass and set its return values as the attribute value.

**Data Flow Analysis and Limits**

Figure 2 illustrates that the data flow analysis is a depth-first recursive algorithm. To prevent infinite loops and ensure the algorithm completes within a reasonable time, we set two limits:
1. The nesting level is empirically set to 5, as this is sufficient to analyze intent attributes in applications in the ANDROID WEAR category.
2. If a method is recursively invoked, we analyze it only once.

**Reachability Verifier**

To focus on vulnerable service invocations that can be triggered in the apps, we developed a reachability verifier to check if the service invocations found by our static intent analyzer are reachable from certain entry points of the apps. All intents related to reachable service invocations are saved in a `Reachable Intent Database`.

1. **Finding Entry Points:**
   - Unlike traditional Java applications, Android apps do not have a single entry point like `main()`. Instead, they consist of four types of components, and all lifecycle methods and callback methods can serve as entry points. We generate a `dummyMain()` for each app, which includes all lifecycle and callback methods.

2. **Building the Call Graph:**
   - We build the inter-procedure call graph for the application and traverse all paths to verify the reachability of service invocations. If a path exists from an entry point to the invocation of `startService()` or `bindService()`, the service invocation is marked as reachable.
   - We use the CHA algorithm to perform a depth-first search directly, without saving the edges and nodes of the call graph. This approach filters out service invocations in dead code that will never be triggered.

**Vulnerable Service Invocation Analyzer**

The `Reachable Intent Database` generated by the reachability verifier includes both explicit and implicit intents. The vulnerable service invocation analyzer consists of three modules:

1. **Implicit Invocation Finder:**
   - Identifies services invoked via implicit intents, i.e., intents without setting package, class, or component.

2. **Resolved Invocation Finder:**
   - Finds service invocation points started through intents processed by `queryIntentServices()` and `resolveService()`. Incorrectly processed service invocation points may introduce service hijacking or DoS attacks.

3. **Invocation Relationship Analyzer:**
   - Determines if a service invocation is for a same-origin or third-party service by comparing the intent values with the services defined in the `manifest.xml`. If the class or action attribute of an intent is defined in the `manifest.xml`, it is a same-origin invocation. Implicit intents for same-origin services can be easily converted to explicit ones, while third-party services may require more careful handling.

**Analysis Results:**
- A list of implicit service invocation positions and their corresponding intent values.
- A list of service invocation positions and their corresponding intent values, where the intent used to start the service is processed by `queryIntentServices()` and `resolveService()`.
- The relationship of each service invocation, indicating whether the service is defined in the same application or by a third-party application.

### Evaluation

**Application Datasets**

We focused on analyzing applications in the Google Play Store. To study the impact of banning implicit service invocations, we downloaded two datasets: one before the ban and one after the ban.

1. **New Apps:**
   - Downloaded the top 100 applications for all 34 categories from the Google Play Store in May 2017, resulting in 3251 applications. After removing duplicates, we had 3156 unique apps.
   - Denoted as "New Apps," these were downloaded after the implicit service invocation ban, almost 30 months later. 99.4% of these apps had been updated after the ban.

2. **Old Apps:**
   - Obtained from the PlayDrone Project, which includes 1,490,097 Android applications crawled from the Google Play Store in 2014.
   - Among the 3156 applications downloaded in 2017, 1390 were found in the PlayDrone dataset. Thus, we have two datasets containing the same 1390 popular applications with different versions.
   - Denoted as "Old Apps," these were downloaded from the Google Play Store between August 2014 and October 2014, less than three months before the implicit service ban was enforced.

**Effectiveness of Removing Vulnerable Service Invocations**

We define a service invocation as vulnerable if it is susceptible to hijacking or DoS attacks. This includes implicit service invocations and vulnerable resolved service invocations. The latter refers to services invoked via explicit intents converted by calling `queryIntentServices()` or `resolveService()`, where developers do not verify the package names.

**Reduction in Vulnerable Service Invocations:**
- Figure 5 shows that the number of vulnerable service invocations in the 1390 applications decreased from 643 to 112 after the implicit service invocation ban, representing an 82.58% reduction.
- The majority of the reduction was achieved by resolving same-origin services (from 304 to 18, a 94% reduction) and Google third-party services (from 258 to 32, an 87.6% reduction).
- The reduction in other third-party services was limited, from 81 to 62, a 23.46% reduction. This is because determining package names for other third-party services is more challenging due to the variety of involved packages.

**Challenges in Determining Package Names:**
- For same-origin services, developers can easily convert implicit invocations to explicit ones using the `getPackageName()` API.
- For Google services, the limited number of involved packages (e.g., "com.google.android.gms", "com.android.vending", "com.google.android.gsf") makes it easier to determine package names.
- For other third-party services, the variety of involved packages makes it more difficult to determine the correct package names, leading to a smaller reduction in vulnerabilities.