注意驱动程序可以在任何时候通过调用IoCreateDevice或者IoCreateDeviceSecurel9]
创建设备对象来表示设备或驱动程序的接口。
DriverVi
avast TDLRDR Drive
4.7,1098.0
ALWILSohare
UPSTM7
be784d000
avasti TDit Fiter Drive
4.7.1096.0
ALWEL:
图6-1DriverView中avast!加载的驱动列表
IDA反汇编这个驱动程序后，我开始审读驱动初始化例程DriverEntry()的汇
编代码。[10]
[..]
.text:000105D2;constWCHARaDeviceAavmker4
.text:000105D2aDeviceAavmker4:
；DATA XREF:DriverEntry+12
.text:000105D2
unicode 0,,0
---
## Page 103
6.1发现漏洞87
[..]
.text:00010620;NTSTATUS
stdcallDriverEntry(PDRIVER_OBJECT DriverObject,
PUNICODE_STRINGRegistryPath)
.text:00010620
public DriverEntry
.text:00010620 DriverEntry
proc near
.text:00010620
.text:00010620 SymbolicLinkName=UNICODE_STRING ptr -14h
.text:00010620 DestinationString= UNICODE_STRING ptr -0Ch
.text:00010620 Device0bject
= dword ptr
-4
.text:00010620 Driver0bject
8
.text:00010620 RegistryPath
=dword ptr
oCh
.text:00010620
.text:00010620
push
ebp
.text:00010621
mov
ebp，esp
.text:00010623
sub
esp，14h
.text:00010626
push
ebx
.text:00010627
push
esi
.text:00010628
mov
esi,
ds:RtlInitUnicodeString
.text:0001062E
push
edi
.text:0001062F
lea
eax，[ebp+DestinationString]
.text:00010632
push
offsetaDeviceAavmker4；SourceString
.text:00010637
push
eax
；DestinationString
.text:00010638
call
esi
；RtlInitUnicodeString
.text:0001063A
mov
edi,[ebp+DriverObject]
.text:0001063D
lea
eax,[ebp+DeviceObject]
.text:00010640
xor
qaxqa
.text:00010642
push
eax
；DeviceObject
.text:00010643
push
ebx
；Exclusive
.text:00010644
push
ebx
；DeviceCharacteristics
.text:00010645
lea
eax,
[ebp+DestinationString]
.text:00010648
push
22h
；DeviceType
.text:0001064A
push
eax
；DeviceName
.text:0001064B
push
ebx
；DeviceExtensionSize
.text:0001064C
push
edi
；Driverobject
.text:0001064D
cal1
ds:IoCreateDevice
.text:00010653
cmp
eax,ebx
.text:00010655
j1
10c_1075E
[..]
在DriverEntry（)函数里，地址.text:0001064D处的函数IoCreateDevice（）创
建了一个名叫\Device\AavmKer4的设备（见.text:00010632和.text:000105D2）。
以上给出的DriverEntry（）汇编代码片段可翻译成如下的C代码。
[..]
RtlInitUnicodeString（&DestinationString,&L"\\Device\\AavmKer4");
retval=IoCreateDevice(Driverobject，0,&DestinationString，0x22,0,0,&Device0bject);
[..]
6.1.3第三步：检查设备的安全设置
然后用WinObj检查Aavmker4设备的安全设置（见图6-2）。[11]
---
## Page 104
88第6章一个内核统治一切
WinObj-Sysinternals:
FleVe Hep
Type
ArcName
Aavmka4
Device
 Calback
AcAdapterl
Device
Device
Afd
Device
3aswMoni
 DmConitrol
Device
Harddisko
ASWRDR
Device
HarddiskDmVolumes
AswRdrTcpFiter
Device
Http
AswTcpFlter
Device
Ide
3ASWTDI
Device
AswUdpFilter
Device
winDfs
Device
Driver
cdRomO
Device
FleSystem
Device
GLOBAL??
图6-2WinObj中AavmKer4设备的安全设置导航
要在WinObj中查看设备的安全设置，右键单击设备名，从选项列表中选择
Properties，然后选择Security标签。设备对象允许系统每个用户（Everyone组）
读写该设备（见图6-3）。这意味着系统的每个用户向驱动程序实现的IOCTL发送
数据都是充许的，这很重要，它使得驱动程序成为一个有价值的目标！
AavmKer4Properties
DetalsSecuily
oup or user names:
RESTRICTED
SYSTEM
Add.
Re
Allow:
Deny
Read
口
Wrike
口
Delete
口
口
Special Permissions
ssione or lor advanced setings,
Advanced
click Advanced
OK
Cancel
图6-3查看\Device\AavmKer4的安全设置
---
## Page 105
6.1发现漏洞89
6.1.4第四步：列出IOCTL
要向内核驱动发送IOCTL，Windows用户空间应用程序必须调用
DeviceIoControl（）。这些对DeviceIoControl（）的调用导致Windows的I/O管理器
生成一个IRP_MJ_DEVICE_CONTROL请求，发送给最顶层驱动程序。驱动程序实现一
个特殊的调度例程来处理IRP_MJ_DEVICE_CONTROL请求，而这个调度例程被一个
MajorFunction[]数组引用。这个数组是DRIVEROBJECT数据结构的成员，此结构
体可在WDK（WindowsDriverKit）[2)的ntddk.h中找到。为节省篇幅，我删掉了
代码里的注释。
[..]
typedef struct _DRIVER_OBJECT{
CSHORT Type;
CSHORT Size;
PDEVICE_OBJECT DeviceObject;
ULONGFIagS;
PVOID DriverStart;
ULONG DriverSize;
PVOID DriverSection;
PDRIVER_EXTENSION DriverExtension;
UNICODE_STRING DriverName;
PUNICODE_STRING HardwareDatabase;
PFAST_IO_DISPATCH FastIoDispatch;
PDRIVER INITIALIZE DriverInit;
PDRIVER_STARTIO DriverStartIo;
PDRIVER_UNLOAD DriverUnload;
PDRIVER_DISPATCH MajorFunction[IRP_MJ_MAXIMUM_FUNCTION+1];
}DRIVEROBJECT;
[..]
以下是MajorFunction[]数组元素的定义（也来自ntddk.h）。
[..]
#define IRP_MJ_CREATE
0x00
#define IRP_MJ_CREATE NAMED_PIPE
0x01
#define IRP_MJ_CLOSE
0x02
#define IRP_MJ_READ
EOxO
#define IRP_MJWRITE
0x04
#defineIRPMJ_QUERY_INFORMATION
0x05
#define IRP_MJ_SET_INFORMATION
0x06
#define IRP_MJ_QUERY_EA
0x07
#define IRP_MJ_SET_EA
0x08
#define IRP_MJ_FLUSH_BUFFERS
60x0
#defineIRP_MJ_QUERY_VOLUME_INFORMATIONOXOa
#define IRP_MJ_SET_VOLUME_INFORMATION
Oxob
#define IRP_MJ_DIRECTORY_CONTROL
50x0
#defineIRP_MJ_FILE_SYSTEM_CONTROL
poxo
#define IRP_MJ_DEVICE_CONTROL
Ox0e
#define IRP_MJ_INTERNAL_DEVICE_CONTROL
Oxof
---
## Page 106
90第6章一个内核统治一切
#define IRP_MJ_SHUTDOWN
0x10
#define IRP_MJ_LOCK_CONTROL
0x11
#define IRP MJ CLEANUP
0x12
#define IRP_MJ_CREATE_MAILSLOT
0x13
#defineIRPMJ_QUERY_SECURITY
0x14
#defineIRPMJ_SET_SECURITY
0x15
#define IRP_MJ_POWER
0x16
#define IRP_MJ_SYSTEM_CONTROL
0x17
#define IRP_MJ_DEVICE_CHANGE
0x18
#define IRP_MJ_QUERY_QUOTA
0x19
#define IRP_MJ_SET_QUOTA
0x1a
#define IRP_MJ_PNP
0x1b
#define IRP_MJ_PNP_POWER
IRP_MJ_PNP
//0bsolete....
#define IRPMJMAXIMUM_FUNCTION
0x1b
[..]
为了列出驱动程序实现的IOCTL，我必须找到这个驱动的IOCTL调度例程。
如果我可以得到驱动的C代码，这就容易了，因为我知道调度例程的任务分配通
常都是这个样子。
DriverObject->MajorFunction[IRPMJ_DEVICE_CONTROL]=IOCTL_dispatch_routine;
很遗憾，我拿不到avast!的Aavmker4.sys驱动程序源代码。怎样才能仅用IDA
Pro提供的反汇编码找到具体的任务分配呢？
为解答这个问题，我需要获取DRIVER_OBJECT数据结构有关的更多信息。我
把WinDbg附加到VMware客户机系统上，用dt命令（以下调试命令的详细描述
见B.2节）显示所能得到的结构体信息。
kd>sympath SRv*c:\WinDBGSymbols*http://msdl.microsoft.com/download/symbols
kd>.reload
[..]
kd>dt -V_DRIVER OBJECT.
nt1_DRIVER_OBJECT
struct _DRIVER_OBJECT，15 elements,Oxa8 bytes
+0x000Type
:Int2B
+0x002 Size
:Int2B
+0x004Device0bject
+0x008Flags
：Uint4B
：
+0xooc DriverStart
：Uint4B
+0x010 DriverSize
+0x014 DriverSection
：
+0x018 DriverExtension
:struct _UNICODE_STRING，3elements,Ox8bytes
：
+0x01c DriverName
+0x0oo Length
：Uint2B
+0x002 MaximumLength
：Uint2B
+0x004 Buffer
：Ptr32 toUint2B
+0x024 HardwareDatabase :
+0x028 FastIoDispatch
+0x02c DriverInit