Arg.
Arg.
Env. vars
Arg.
Network
Arg.
Env. Vars
Arg.
Arg.
Arg.
Arg.
Env. Vars
Arg.
Files
Files
Arg.
Files
Files
Files
Files
550
1000
750
800
9000
2000
300
3200
350
400
400
4200
1400
400
300
100
300
600
150
250
300
100
210
2100
519
1500
400
250
1000
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
crashing
length
crashing
crashing
length
preﬁx
length
length
length
preﬁx
length
length
length
length
length
length
preﬁx
preﬁx
length
length
length
crashing
crashing
crashing
crashing
preﬁx
crashing
crashing
crashing
EDB-ID-816
CVE-2005-1019
CVE-2004-0548
CVE-2000-1816
Zero-Day
CVE-2010-2055
OSVDB-ID-16373
Zero-Day
N/A
OSVDB-ID-10068
CVE-2003-0947
CVE-2007-0368
CVE-2001-1413
OSVDB-ID-60944
EDB-ID-890
CVE-2004-2093
OSVDB-ID-10255
CVE-2004-1484
CVE-2004-0524
OSVDB-ID-12346
CVE-2003-0454
OSVDB-ID-2343
CVE-2008-3408
OSVDB-ID-53249
EDB-ID-15566
OSVDB-ID-60897
OSVDB-ID-69006
OSVDB-ID-67277
CVE-2009-1643
189
10
82
209
133
18
4
22
7
4
2
362
11
6
46
8
17
47
2
10
3
10
164
963
13,260
831
120
481
845
Table I: List of programs that MAYHEM demonstrated as exploitable.
execution reaches the maximum number of live interpreters
and starts terminating execution paths. At this point, the
memory keeps increasing linearly as the paths we explore
become deeper. Note that at the beginning, hybrid execution
consumes as much memory as online execution without
exceeding the memory threshold, and utilizes memory
resources more aggressively than ofﬂine execution throughout
the execution. Ofﬂine execution requires much less memory
(less than 500KB on average), but at a performance cost, as
demonstrated below.
Faster than Ofﬂine Execution. Figure 8 shows the explo-
ration time for /bin/echo using different limits on the
maximum number of running executors. For this experiment,
we use 6 bytes of symbolic arguments to explore the entire
input space in a reasonable amount of time. When the
maximum number of running executors is 1,
it means
)
.
c
e
s
(
s
h
t
a
p
l
l
a
r
e
v
o
c
o
t
e
m
T
i
 1400
 1200
 1000
 800
 600
 400
 200
 0
Re-execution Time
Exploration Time
1
2
4
8
16
32
64
128
Maximum number of running executors
Figure 8: Exploration times for different
maximum number of running executors.
limits on the
MAYHEM will produce a disk checkpoint—the average
checkpoint size was 30KB—for every symbolic branch,
390
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
No opt.
+ VSA
+ R cache
+ L cache
L Hits
N/A
N/A
N/A
3940
R Hits Misses
N/A
N/A
7
7
N/A
N/A
3996
56
# Queries
217,179
49,424
10,331
242
Time (sec)
1,841
437
187
77
Table II: Effectiveness of bounds resolution optimizations.
The L and R caches are respectively the Lemma and
Reﬁnement caches as deﬁned in §V.
thus is equivalent to ofﬂine execution. When the maximum
number of running executors was 128 or above, MAYHEM
did not have to checkpoint to disk, thus is equivalent to an
online executor. As a result, online execution took around 25
seconds to explore the input space while ofﬂine execution
needed 1,400 seconds. Online was 56× faster than ofﬂine
in this experiment. We identiﬁed two major reasons for this
performance boost.
First, the re-execution cost is higher than context-switching
between two execution states (§IV-B). MAYHEM spent more
than 25% of the time re-executing previous paths in the
ofﬂine scheme. For the online case, 2% of the time was spent
context-switching. Second, online is more cache-efﬁcient
than ofﬂine execution in our implementation. Speciﬁcally,
online execution makes more efﬁcient use of the Pin code
cache [18] by switching between paths in-memory during a
single execution. As a result, the code cache made online
execution 40× faster than ofﬂine execution.
Additionally, we
ran a Windows GUI program
(MiniShare) to compare the throughput between ofﬂine
and hybrid execution. We chose this program because it
does not require user interaction (e.g., mouse click), to start
symbolic execution. We ran the program for 1 hour for each
execution mode. Hybrid execution was 10× faster than ofﬂine
execution.
D. Handling Symbolic Memory in Real-World Applications
Recall from §V, index-based memory modeling enables
MAYHEM to reason about symbolic indices. Our experiments
from Table I show that more than 40% of the programs
required symbolic memory modeling (column 6) to exploit. In
other words, MAYHEM—after several hours of analysis—was
unable to generate exploits for these programs without index-
based memory modeling. To understand why, we evaluated
our index-based memory modeling optimizations on the
atphttpd server.
Bounds Resolution Table II shows the time taken by
MAYHEM to ﬁnd a vulnerability in atphttpd using different
levels of optimizations for the bounds resolution algorithm.
The times include exploit detection but not exploit generation
time (since it is not affected by the bounds resolution
algorithm). Row 3 shows that VSA reduces the average
number of queries to the SMT solver from ∼54 to ∼14
391
Formula Representation
Unbalanced binary tree
Balanced binary tree
Balanced binary tree + Linearization
Time (sec.)
1,754
425
192
Table III: Performance comparison for different IST repre-
sentations.
 100
 80
 60
 40
 20
)
%
(
e
g
a
r
e
v
o
C
e
d
o
C
 0
 0
 500
 1000
 1500
 2000
 2500
 3000
 3500
Time (sec.)
Figure 9: Code coverage achieved by MAYHEM as time
progresses for 25 coreutils applications.
queries per symbolic memory access, and reduces the total
time by 75%.
Row 4 shows shows the number of queries when the
reﬁnement cache (R cache) is enabled on top of VSA. The
R cache reduces the number of necessary binary searches to
from 4003 to 7, resulting in a 57% speedup. The last row
shows the effect of the lemma cache (L cache) on top of the
other optimizations. The L cache takes most of the burden
off the R cache, thus resulting in an additional 59% speedup.
We do not expect the L cache to always be that efﬁcient,
since it relies heavily on the independence of formulas in
the path predicate. The cumulative speedup was 96%.
Index Search Tree Representation. Recall from §V-B
MAYHEM models symbolic memory loads as ISTs. To show
the effectiveness of this optimization we ran atphttpd with
three different formula representations (shown in Table III).
The balanced IST was more than 4× faster than the
unbalanced binary tree representation, and with linearization
of the formula we obtained a cumulative 9× speedup. Note,
that with symbolic arrays (no ISTs) we were unable to detect
an exploit within the time limit.
E. MAYHEM Coverage Comparison
To evaluate MAYHEM’s ability to cover new paths, we
downloaded an open-source symbolic executor (KLEE) to
compare the performance against MAYHEM. Note KLEE
runs on source, while MAYHEM on binary.
We measured the code coverage of 25 coreutils applications
as a function of time. MAYHEM ran for one hour, at most,
on each of those applications. We used the generated test
cases to measure the code coverage using the GNU gcov
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
AEG
MAYHEM
Program
Time
LLVM
Time
ASM Tainted ASM Tained IL
0.506s
8.698s
2.188s
0.864s
2.343s
5.511s
10,876
87,056
18,539
12,776
82,030
60,860
1.90s
24.62s
9.67s
6.76s
9.91s
11.30s
iwconﬁg
aspell
aeon
htget
tipxd
ncompress
12,893
133,620
43,804
16,391
19,198
71,195
Table IV: AEG comparison: binary-only execution requires
more instructions.
394,876
696,275
623,684
576,005
647,498
583,330
2,200
26,647
7,087
2,670
2,043
8,778
timeout
)
.
c
e
s
(
e
m
i
t
n
o
i
t
a
r
e
n
e
g
t
i
l
o
p
x
E
 3500
 3000
 2500
 2000
 1500