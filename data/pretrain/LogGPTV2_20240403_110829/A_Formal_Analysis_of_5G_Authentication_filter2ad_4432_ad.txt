### Freshness Check and SQN Synchronization

The freshness check, as depicted in (ii) of Figure 3, is accurately modeled as a natural number comparison. During normal protocol execution, the Sequence Number (SQN) may become out of sync. Therefore, we also consider an attacker who can arbitrarily increase the User Equipment (UE) SQN (UE does not allow a decrease). It's important to note that the attacker can already increment the Home Network (HN) SQN by repeatedly triggering authentication material requests. We fully model the resynchronization mechanism, allowing HNs to update their SQN accordingly. The concealment of the SQN using Exclusive-OR (XOR) is accurately modeled, leveraging the recent extension of Tamarin with equational theories that include XOR [21].

### Compromise Scenarios

We model various compromise scenarios, including the revelation of secret keys (K or skHN), the SUPI, or the initial value of the SQN, and Security Network (SN) compromises (where the attacker gains access to an authenticated channel with the HNs). These scenarios are essential for two main reasons:
1. The specification itself considers some of these scenarios and still requires certain security guarantees.
2. This enables a comprehensive analysis to identify the minimal assumptions required for a property to hold. For example, if a critical authentication property is violated when the attacker has access to the initial value of the SQN, it indicates a potential vulnerability since the SQN is not a strong secret, and the search space for the attacker could be reduced by exploiting the meaning of this counter.

### Implicit Authentication

Our model includes an optional key-confirmation roundtrip where subscribers and SNs confirm their key KSEAF by MACing different constants. Our security analysis is parametric in this roundtrip, allowing us to determine which properties hold without key confirmation and what additional security benefits are gained by including this step.

### Simplifications

In our symbolic model, we omit message bit lengths. Some key derivation functions take the length of their arguments to prevent type-flaw attacks, but this is covered in our model as such misinterpretations cannot occur. The protocols under study include sub-messages that are publicly known constants (e.g., AMF, ABBA, or 'MAC_Failure'). We mostly omit these sub-messages unless they serve as useful tags. We do not model the optional, non-normative protection against wrapping around the SQN [TS 33.102, Sec. C], as our modeling of the SQN as a natural number precludes wrapping. The 5G AKA protocol establishes a session key with an associated key identifier (ngKSI), which is necessary for subsequent procedures but does not interact with the authentication methods, so we omit it. An SN may create a pseudonym (5G-GUTI) associated with the SUPI of a visiting subscriber for recognition in subsequent sessions, but we omit this optional mechanism. Authentication tokens do not expire in our model, as is typical in symbolic models. However, since such mechanisms are rarely specified in normative documents, we emphasize that critical security properties should not rely on them.

### Tamarin Models of 5G AKA

We have developed a Tamarin model for the 5G AKA authentication method, enabling automated security analyses. Our models and documentation are available online [8] and use Tamarin v1.4.0 [2], which includes XOR support. Modeling a substantial real-world protocol like 5G AKA is challenging, but the real difficulty lies in doing so in a way that facilitates effective reasoning and automation. We now describe our modeling and proof strategies, arguing why this serves as a basis for future analyses of AKA family protocols.

#### Challenges

The 5G AKA protocol uses a combination of features that make reasoning about the models highly complex:
1. **Statefulness**: 5G AKA is a stateful protocol, relying on persistent and mutable internal states (SQNs) across sessions. The unbounded set of values these states can take (all natural numbers) excludes most verification tools. Verifiers for a bounded number of sessions are not viable due to the size of a single session. Additionally, sequence numbers are used for input comparisons, requiring the ability to compare two values in the chosen representation of natural numbers. To our knowledge, this is the first complete, real-world protocol relying on natural numbers and comparisons analyzed with an automated formal verifier in an unbounded setting.
2. **XOR Usage**: 5G AKA heavily relies on XOR to conceal the value of SQNs. Reasoning about XOR in the symbolic model is challenging, and its integration into Tamarin is recent [21]. The intricate algebraic properties of XOR (associativity, commutativity, cancellation, and neutral element) significantly increase the search space for proving properties. We are not aware of any formal analysis of such a large-scale real-world protocol featuring XOR in the symbolic model.
3. **Complex State Machine**: The 5G AKA state machine is large and complex, with role instantiations in 14 different states. Evolution between states includes numerous loops, notably due to the persistent and mutable SQNs, allowing sessions to be repeated while using a given SQN.

#### Proof Strategies

The updates to SQNs on the subscribers' and HNs' sides, especially with the resynchronization procedure, induce complex state changes. Manual proofs are infeasible due to the extensive search space. Tamarin’s fully automatic mode fails to prove relevant security properties, even weak ones like full executability. We developed a proof structure based on intermediate lemmas (helping lemmas) and proof strategies implemented through oracles. These oracles offer a lightweight tactic language, implemented in Python, to guide the proof search in Tamarin.

Key helping lemmas state that the SQN associated with a subscriber stored on their side (or the HN's side) is strictly increasing (or monotonically increasing). Using our chosen modeling of SQNs as multisets and comparisons based on pattern-matching, we proved these lemmas by induction with a simple, general strategy. Security properties, however, require dedicated and involved proof strategies (∼1000 LoC of Python). Developing these generic proof strategies represents several person-months of effort.

#### Our Models

Based on our modeling choices, we built a complete, automated model of 5G AKA (preceded by the initialization protocol). We model fully parametric compromise scenarios, enabling easy selection of reveals or compromises when proving properties. The key confirmation roundtrip is implemented modularly, allowing consideration of authentication properties with or without this step. The protocol model consists of approximately 500 LoC.

Our model includes all necessary lemmas: helping lemmas, sanity-check lemmas, and lemmas checking relevant security properties against the 5G AKA protocol. To identify the minimal assumptions required for stated properties, we prove several lemmas for each security property. First, we show that the property holds under a certain set of assumptions. Second, we demonstrate the minimality of this set by disproving all versions of the previous lemma where the set of assumptions is reduced by one. This requires 124 different lemmas and approximately 1000 LoC. Tamarin takes about 5 hours to automatically establish all proofs and find all attacks.

Our 5G AKA model is general and can be adapted to model other AKA family protocols with localized modifications. Part of the model (role instantiations, reveal and compromise modeling, etc.) remains unchanged, but the approximately 300 LoC defining the main protocol flow would need adaptation. The extent of this change depends on how different the chosen protocol is from 5G AKA. We expect our oracles to remain valid, at least after minor model modifications. Given that our analysis is fully automatic, our model can be easily updated as the standard evolves, and any changes in provided security guarantees can be automatically identified by the tool.

### Security Analysis

#### Results

We present the results of our comprehensive analysis of the 5G AKA protocol, emphasizing that we automatically analyze the formal security guarantees for an unbounded number of sessions executed by honest and compromised subscribers, SNs, and HNs, in combination with the initiation protocol. Our analysis accounts for all potential unintended interactions an attacker could exploit between these sub-protocols run by all possible instantiations of the three roles.

Table 1 depicts the outcome of our analysis of authentication properties. For each pair of parties, we present the minimal assumptions required to achieve authentication properties: weak agreement, non-injective agreement, and injective agreement. We only consider agreement on relevant data: KSEAF, SNname, and the SUPI (which already contains idHN). The assumptions are minimal, as strengthening the attacker's capabilities in any direction violates the property. The symbol denotes that the property is violated in the weakest threat model where all participants are honest, no compromise scenarios are considered, and key confirmation is enforced. Table 2 presents our results concerning secrecy properties. We only check for 2-party authentication properties, which well express the security goals of 5G AKA. Note that we obtain a form of 3-party agreement property (where all three parties' views coincide) as a corollary of three 2-party agreement properties, because we check for strong 2-party agreement properties on multiple data points and identifiers simultaneously.

#### Discussion

Table 1 clearly shows the extent to which the 5G standard underspecifies authentication requirements (denoted by [·] for explicit goals). We indicate several properties violated even in the best-case scenario ( ). In Section 5.2.1, we discuss why. In Section 5.2.2, we explain and critique the use of key confirmation. We discuss privacy properties in Section 5.2.3. Our results concerning secrecy properties are as expected and are not discussed further. Perfect forward secrecy of KSEAF is violated as expected.

##### Missing Security Assumption

The 5G AKA protocol fails to meet several security goals, both explicitly required and other critical security properties, even under the assumptions specified in the standard, after a successful key-confirmation phase (see in Table 1). Specifically, the agreement properties on KSEAF between subscribers and SNs, and weak agreement from subscribers towards SNs, are violated. This is caused by the lack of a binding assumption on the channel between SNs and HNs and because the SUPI is sent to the SN in a different message than the one containing KSEAF, which is sent earlier. As a result, if an SN and HN run two sessions concurrently, there is no assurance that the SUPI the SN receives at the end of the protocol corresponds to the KSEAF received earlier. This allows an attacker to make the HN bill someone else (with a different SUPI) for services consumed from an SN (encrypted with KSEAF). Thus, the binding property for the channel between SNs and HNs appears to be a critical security assumption and should be explicitly mentioned in the standard. This weakness was introduced in version v0.8.0 of the standard.

| Point of View | Partner | Agreement on KSEAF | Agreement on SUPI | Agreement on SNname | Weak Agreement |
|--------------|---------|---------------------|--------------------|---------------------|----------------|
| UE           | HN      | NI                  | I                  | NI                  | ¬K∧k-c         |
|              | SN      | NI                  | ×                  | wa                  | [¬K∧k-c]       |
| HN           | UE      | NI                  | ¬K                 | wa                  | [¬K]           |
|              | SN      | I                   | ×                  | ×                   | ¬ch            |
| SN           | HN      | I                   | ¬ch                | [¬ch]               | ×              |
| UE           | SN      | NI                  | ×                  | wa                  | [¬K∧¬ch]       |
| HN           | SN      | I                   | ×                  | ×                   | ¬ch            |

**Legend:**
- Subscribers are denoted by UE.
- Non-injective by NI, and injective by I.
- Assumptions are expressed in terms of forbidden reveals (e.g., ¬K, meaning the property only holds when K is not revealed).
- k-c indicates whether a key confirmation phase is needed.
- ¬ch denotes an uncompromised channel between SN and HN.
- When not otherwise specified, the worst-case scenario is considered; that is, K, SQN, SUPI, skHN, and the channel between SN and HN are compromised, and the key confirmation phase is skipped.
- ×: the property is violated by definition (e.g., because SUPI is constant).
- wa: the property coincides with weak agreement and requires the same assumptions.
- Explicit goals given in the specification are denoted by [·] around them.