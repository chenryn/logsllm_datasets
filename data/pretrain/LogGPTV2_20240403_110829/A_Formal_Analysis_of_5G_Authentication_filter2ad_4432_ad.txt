The freshness check (i.e., (ii) from Figure 3) is faithfully modelled as
a natural number comparison. Since the SQN may become out-of-
sync during normal protocol execution, we also consider an attacker
who can arbitrarily increase SQNUE (UE does not allow decrease).
Note that the attacker can already increase SQNHN by repeatedly
triggering authentication material requests. We fully model the re-
synchronization mechanism and let the HNs update their SQNHN ac-
cordingly. The concealment of the SQN, using Exclusive-OR (XOR),
is faithfully modeled by relying on the recent extension of Tamarin
with equational theories including XOR [21].
Compromise Scenarios. We model various compromise scenarios:
secret key reveals (of K or skHN), reveals of the SUPI or the initial
value of SQN, and SN compromises (i.e., the attacker gains access to
an authenticated channel with the HNs). This is needed mainly for
two reasons. First, the specification itself considers some of those
scenarios and still requires some security guarantees to hold (cf. the
compromised SNs from Section 3.1). Second, this enables a com-
prehensive analysis to identify the minimal assumptions required
for a property to hold. For instance, if some critical authentication
property were violated when the attacker could access the initial
value of the SQN, this would represent a potential vulnerability in
the protocol since the SQN is not a strong secret and the search
space of the SQN that the attacker needs to explore could be further
reduced by exploiting the meaning of this counter.
Implicit Authentication. We equip the model with an optional
key-confirmation roundtrip where the subscribers and SNs confirm
their key KSEAF by MACing different constants. Our security analy-
sis is then parametric in this roundtrip, allowing us to derive which
properties hold without key confirmation, and what is gained by
including this key confirmation step.
Simplifications Made. As usual in the symbolic model, we omit
message bit lengths. Some key derivation functions also take the
length of their arguments to prevent type-flaw attacks. This is cov-
ered in our model as such length-based misinterpretation cannot
happen. The protocols under study feature some sub-messages that
are publicly known constants, for example, fixed strings like AMF,
ABBA, or ’MAC_Failure’. We mostly omit such sub-messages,
unless they are useful as tags. We do not model the optional, non-
normative protection against wrapping around the SQN
[TS 33.102, Sec. C]. Note that this is in line with our modeling
of the SQN as a natural number for which no wrapping can occur.
The 5G AKA protocol establishes a session key, to which a key
identifier is associated (the key set identifier ngKSI). Such identi-
fiers are needed for subsequent procedures only and do not interact
with the authentication methods and hence we omit them. An SN
may create a pseudonym, called 5G-GUTI, associated with the SUPI
of a subscriber who is visiting this SN, in order to recognize this
subscriber in a subsequent session. We omit this optional mecha-
nism. Authentication tokens do not expire in our model as is usual
in symbolic models. However, since such mechanisms are never
clearly specified in normative documents, we emphasize that critical
security properties should not rely on them.
4.4 Tamarin Models of 5G AKA
We have built a Tamarin model for the 5G AKA authentication
method which enables automated security analyses. Our models
and associated documentation are available online [8], and use
Tamarin v1.4.0 [2], which includes XOR support.
Writing a formal model of such a substantial real-world protocol
is challenging. However, the real difficulty is doing this in a way
that enables effective reasoning about the models, i.e., is amenable
to automation. We now describe this modeling as well as the proof
strategies we developed, and argue why this can serve as a basis
for future analyses of protocols in the AKA family.
4.4.1 Challenges. The 5G AKA protocol uses a combination of
features that make reasoning about these models highly complex.
First, 5G AKA is a stateful protocol, i.e., it relies on internal states
(the SQNs) that are persistent across sessions and that are mutable.
In the symbolic model, the set of values these states can take — all
natural numbers — is unbounded. This feature alone excludes most
verification tools. Verifiers for a bounded number of sessions are not
a viable choice, simply due to the size of a single session. Moreover,
the sequence numbers are not only internal counters, they are also
used for comparison on input. This requires the ability to compare
two values (see Section 4.3) in the chosen representation of natural
numbers. This is demanding in terms of proof efforts: to the best of
our knowledge, this is the first time a complete, real-world proto-
col relying on natural numbers and comparisons is analyzed with
an automated formal verifier in the unbounded setting. Previous
examples are limited to the case of just an internal counter for a
TPM [29] or small examples, like simplified Yubikey [27].
Second, 5G AKA heavily relies on XOR to conceal the value of
SQNs. Reasoning about XOR in the symbolic model is challenging
and its integration in Tamarin is recent [21]. Intuitively, this is be-
cause of the intricate algebraic properties of XOR (i.e., associativity,
commutativity, cancellation, and neutral element). This consider-
ably increase the search space when proving properties. Again, in
the symbolic model, we are not aware of any formal analysis of
such a large-scale real-world protocol featuring XOR.
Finally, the state-machine of the 5G AKA protocol is large and
complex. Role instantiations can be in 14 different states. Evolution
between those states includes numerous loops, notably because
of the persistent and mutable states’ SQNs, e.g., sessions can be
repeated while using a given SQN.
4.4.2 Proof Strategies. The way SQNs are updated on the sub-
scribers’ and HN’s sides, in particular with the re-synchronization
procedure, induces complex state-changes that must be tackled by
our proof strategies. Manual proofs are not feasible due to the size of
the search space one would have to explore. In contrast, Tamarin’s
fully automatic mode fails to prove relevant security properties and
even extremely weak properties such as the full executability of
the protocols. Our work straddles this divide: we developed a proof
structure based on intermediate lemmas (called helping lemmas) as
well as proof strategies for proving these lemmas and the security
properties. Proof strategies are implemented through oracles that
9
A Formal Analysis of 5G Authentication
D. Basin, J. Dreier, L. Hirschi, S. Radomirović, R. Sasse and V. Stettler
offer a light-weight tactic language, implemented in Python, to
guide the proof search in Tamarin.
The key helping lemmas we prove state that the SQN associated
to a subscriber stored on his side (respectively on its HN’s side) is
strictly increasing (respectively monotonically increasing). Thanks
to our chosen modeling of the states’ SQNs as multisets and the
comparisons of SQNs based on pattern-matching, we were able
to prove the aforementioned lemmas by induction with a simple,
general proof strategy. The security properties, however, require
dedicated and involved proof strategies (∼1000 LoC of Python). The
effort of writing such generic proof strategies represents several
person-months.
4.4.3 Our Models. Based on our modeling choices, we built a com-
plete model of 5G AKA (preceded by the initialization protocol) that
is amenable to automation. We model fully parametric compromise
scenarios that enables one to easily choose what kind of reveals or
compromises are considered when proving properties. We also im-
plement the key confirmation roundtrip in a modular way: one can
consider authentication properties after this roundtrip or without.
The protocol model itself consists of roughly 500 LoC.
Our model includes all the necessary lemmas: helping lemmas,
sanity-check lemmas, and the lemmas that check the relevant se-
curity properties against the 5G AKA protocol. Since we aim at
identifying the minimal assumptions required for the stated prop-
erties to hold, we prove several lemmas for each security property.
First, we state a lemma showing that the property holds under a
certain set of assumptions. Second, we show the minimality of this
set of assumptions. We do this by disproving all versions of the
previous lemma where the set of assumptions is reduced by just
one assumption. This requires 124 different lemmas and ca. 1000
LoC. Tamarin needs ca. 5 hours to automatically establish all the
proofs and find all the attacks.
Our model of 5G AKA is general in that it can be used to model
all other protocols from the AKA family requiring only localized
modifications in the model. Part of the model (creation or role
instantiations, reveal and compromise modelings, etc.) would not
change, but the roughly 300 LoC defining the main flow of the
protocol would have to be adapted. The size of this change depends
on how different the chosen protocol is to 5G AKA. We expect
our oracle to be still valid, at least after minor modifications to
the model. Furthermore, given that our analysis is fully automatic
(thanks to our proof strategies), our model can be easily kept up-
to-date as the standard further evolves and any change in terms of
provided security guarantees can then be automatically identified
by the tool.
5 SECURITY ANALYSIS
5.1 Results
We present the results of our comprehensive analysis of the 5G AKA
protocol. We emphasize that we automatically analyze the formal se-
curity guarantees that the protocol provides for an unbounded num-
ber of sessions executed by honest and compromised subscribers,
SNs, and HNs when used in combination with the initiation protocol.
10
Thus, our analysis accounts for all potential unintended interac-
tions an attacker could exploit between these sub-protocols run by
all possible instantiations of the three roles we consider.
We depict the outcome of our analysis of authentication proper-
ties in Table 1. For each pair of parties, we present the minimal as-
sumptions required to achieve authentication properties: i.e., weak
agreement, non-injective agreement, and injective agreement. We
only consider agreement on relevant data; i.e., KSEAF, SNname, and
the SUPI (recall that the SUPI already contains idHN). The assump-
tions are minimal in that strengthening the attacker’s capabilities
in any direction violates the property. The symbol denotes that
the property is violated for the weakest threat model where all
participants are honest, none of the compromise scenarios is con-
sidered, and key confirmation is systematically enforced. Similarly,
we present our results concerning secrecy properties in Table 2.
We only check for 2-party authentication properties, which ex-
presses well the security goals of 5G AKA. Note however that we
obtain a form of 3-party agreement property (where all 3 parties’
views coincide) as a corollary of three 2-party agreement properties.
This is because we check for strong 2-party agreement properties
on several data points and identifiers simultaneously.
5.2 Discussion
Table 1 clearly shows the extent that the 5G standard underspec-
ifies authentication requirements (recall that [·] denotes explicit
goals); see Section 3.3. We also indicate a number of properties
that are violated even in the best-case scenario ( ). We discuss why
in Section 5.2.1. Afterwards, we explain and critique the use of
key confirmation in Section 5.2.2. We discuss privacy properties
in Section 5.2.3. Finally, our results concerning secrecy properties
are as expected and are not discussed further. Also, perfect forward
secrecy of KSEAF is violated as expected.
5.2.1 Missing Security Assumption. The 5G AKA protocol fails
to meet several security goals that are explicitly required as well
as other critical security properties. This is still true under the
assumptions specified in the standard, even after a successful key-
confirmation phase (see
in Table 1). More specifically, the agree-
ment properties on KSEAF between the subscribers and SNs are
violated. So is weak agreement from the subscribers towards the
SNs. This is caused by the lack of a binding assumption on the chan-
nel between SNs and HNs and because the SUPI is sent to the SN
in a different message than the message containing KSEAF, which
is sent earlier. Therefore, as soon as a pair of an SN and an HN
runs two sessions concurrently, there is no assurance that the SUPI
the SN receives at the end of the protocol actually corresponds to
the KSEAF it has received earlier (it could correspond to another
concurrent session). As a consequence, an SN may associate the
session key KSEAF to the correct subscriber (a necessary condition
for the key confirmation to be successful), but to the wrong SUPI, vi-
olating the aforementioned properties. In practice, this could allow
an attacker to make the HN bill someone else (i.e., with a different
SUPI) for services he consumes from an SN (i.e., encrypted with
KSEAF). Thus, the binding property for the channel between the SNs
and HNs appears to be a critical security assumption, and should
be explicitly mentioned in the standard. This weakness has been
introduced in the version v0.8.0 of the standard (published in
A Formal Analysis of 5G Authentication
D. Basin, J. Dreier, L. Hirschi, S. Radomirović, R. Sasse and V. Stettler
Point of view
Partner
Agreement
on KSEAF
on SUPI
on SNname
Weak agreement
UE
HN
SN
NI
I
NI
¬K∧k-c
wa ×
wa × [¬K∧k-c]
¬K
[ ]
wa
¬K∧k-c
I
×
×
UE
NI
I
×
wa
×
wa
[¬K∧¬ch]
SN
NI
¬ch
[¬ch]
wa
HN
¬K∧¬ch
I
×
×
¬ch
HN
UE
NI
¬K
wa
[¬K]
¬K
I
¬K
×
×
SN
I
NI
¬ch ¬ch
×
×
×
wa
¬ch
Table 1: Minimal assumptions required for 5G AKA to achieve authentication properties. We denote subscribers by UE, non-
injective by NI, and injective by I. Assumptions are expressed in terms of forbidden reveals (e.g., ¬K, meaning the property
only holds when K is not revealed). We also indicate whether a key confirmation phase is needed with k-c while ¬ch denotes
an uncompromised channel between SN and HN. When not otherwise specified, the worst-case scenario is considered; that
is K,SQN,SUPI,skHN, and the channel between SN and HN are compromised and the key confirmation phase is skipped. ×: the
property is violated by definition (e.g., because SUPI is constant). wa: the property coincides with weak agreement and requires
same assumptions. The explicit goals given in the specification are denoted by [·] around them.
Point of view
KSEAF
PFS(KSEAF)
SUPI
K