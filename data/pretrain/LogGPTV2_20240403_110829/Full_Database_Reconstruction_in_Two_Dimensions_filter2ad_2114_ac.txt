for N > 8. Thus, the probability that after 3 log N issued queries the client only
issued undesirable queries is less than
(cid:17)4 log N ≤ 1
(cid:16) 1
4
N 3 .
(cid:117)(cid:116)
4.6 Databases with Special Properties
[8] assume that the database contains two records a, b ∈
Grubbs et al.
[N/4, 3N/4], such that b − a ≥ N/3, and there are at least three records in
the database, at least 1 apart.
Theorem 3 shows that Algorithm 1 matches Grubbs et al. [8] query complex-
ity.
Theorem 3. Suppose an attacker uses Algorithm 1 to reconstruct a database
similar to the one in [8]. Then, the attacker can reconstruct the database after
the client issues 14.4N log N uniformly at random queries with probability greater
than 1 − 3
N 3 , where N is the size of the database.
Evangelia Anna Markatou and Roberto Tamassia
Proof. Similarly to the proof of Theorem 2, the attacker will be able to recon-
struct the order of the two halves in the database after 8.2N log N queries. It
remains to show that she can combine them together successfully.
Like [8], we assume that the database contains two records a, b ∈ [N/4, 3N/4],
such that b − a ≥ N/3. Thus, a ∈ A and b ∈ B.
0
a
a
b
N
Like [8], we also assume that there is at least one more point in the database.
This point c can be in one of three intervals, in [0, val(a)], [val(a), val(b)], or in
[val(b), N ].
1. c ∈ [0, val(a)]
0
c
a
a
b
N
In this case, the attacker knows that a and c are in A, and b is in B. To
resolve the ordering, the attacker needs to observe set {a, b}, in order to
determine that c is not between a and b.
Note that even if a and c were right next to each other there are at least
N/4 possible queries that return {a, b}.
2. c ∈ [val(a), val(b)]
0
a
a
c
b
N
Without loss of generality, let’s assume that the attacker knows that c
is in B. In order to resolve this, the attacker has to observe some query
that returns {a, c}. No matter how close a and c are, there are at least
N/4 queries that return {a, c}. They are of the form [x, val(c)], where
x ∈ [0, val(a)].
3. c ∈ [val(b), N ]
0
a
a
b
c
N
This is similar to the ﬁrst item. There are at least N/4 queries that return
a query whose result is {a, b}.
Full Database Reconstruction with Access and Search Pattern Leakage
In all cases above, there are at least N/4 queries that can resolve the ordering.
The probability that none of the queries issued after 6.2N log N queries is of the
desired form is(cid:16)
(cid:17)6.2N log N
(cid:16)
(cid:17)6.2N log N
1 −
N/4
N (N + 1)/2
=
1 −
1
2(N + 1)
e3.1 log N
1
≤
≤ 1
N 3
Thus, after 14.4N log N queries the adversary will successfully reconstruct the
order of the database with probability greater than 1 − 3
N 3 .
(cid:117)(cid:116)
5 Full Database Reconstruction
In this section, we present our algorithm for full database reconstruction, which
infers the values of the database records. The algorithm uses both access pattern
leakage and search pattern leakage. It assumes that Algorithm 1 for full ordering
reconstruction has been already executed, hence the attacker knows the ordering
of the n database records by value, r1, r2,··· , rn. By using search pattern leak-
age, the attacker counts the number of distinct queries observed until this count
reaches N (N + 1)/2, where N is the size of the universe of database elements.
This occurs when the attacker has seen all possible queries.
5.1 Example
Suppose the server is hosting a database with records r1, r2, r3, and r4, as shown
in Figure 3.
r1
r2
r3
r4
1
l0
l1
l2
l3
l4
N
Fig. 3. Example of a database with four records with values in the interal [1, N ].
At this stage we assume that the attacker has already found the order of the
records (up to reﬂection) and now is trying to determine the distances between
consecutive records, denoted
l0 (distance between 1 and r1),
l1 (distance between r1 and r2),
l2 (distance between r2 and r3),
l3 (distance between r3 and r4), and
l4 (distance between r4 and N ).
To determine l0 and l1 we focus on all the possible range queries that return
(only) r1 as a response. These queries are as follows:
Evangelia Anna Markatou and Roberto Tamassia
[1, l0], [1, l0 + 1], . . . , [1, l0 + l1 − 1]
[2, l0], [2, l0 + 1], . . . , [2, l0 + l1 − 1]
···
[l0, l0], [l0, l0 + 1], . . . , [l0, l0 + l1 − 1]
The number of the above queries is l0 · l1. In other words, there exist exactly
l0 · l1 distinct queries that all return r1 as a response. Similarly, we can show
that there exist exactly l1 · l2 distinct queries that return r2 as a response, and
so on.
The above result can be generalized for query answers comprising two records.
For example, there exist exactly l0·l2 distinct queries that return the pair {r1, r2}
as a response.
Once all queries have been seen, the attacker can count how many queries
return each possible response. For example, let us assume that the attacker has
seen exactly q1 diﬀerent queries which have returned as a result only r1. Let us
also assume that the attacker has seen exactly q2 diﬀerent queries which have
returned as a result only r2. Finally, let us also assume that the attacker has
seen exactly q12 diﬀerent queries which have returned as a result a set containing
both r1 and r2.
This implies that the following equations hold:
l0 · l1 = q1
l1 · l2 = q2
l0 · l2 = q12
By solving the above set of three equations, the attacker can ﬁnd the values of
distances l0, l1 and l2. Once these three have been determined, the attacker can
easily compute the remaining distances l3 and l4 in a similar way, thus achieving
full reconstruction of the database values.
Note that search pattern leakage is instrumental for this algorithm. The
attacker has to calculate the query counts (i.e., the qi constant terms in the
system of equations) precisely and can do so only by determining whether two
tokens correspond to the same query.
5.2 Algorithm
The above example generalizes to any number of database records as follows. Let
us assume that the attacker has determined the full ordering of the records of a
database of size n, denoted r1, r2, . . . , rn. Let us also assume that the number of
Full Database Reconstruction with Access and Search Pattern Leakage
distinct queries which return as a result only record ri is qi and the the number
of distinct queries which return as a result only the pair or records {r1, r2} is q12.
The attacker builds the following system of n + 1 equations over variables li,
i = 0, . . . , n.
l0 · l1 = q1
l1 · l2 = q2
. . .
ln−1 · ln = qn
and
l0 · l2 = q12
(1)
In the above system, the meaning of the variables is as follows:
– l0 denotes the distance between 1 and r1;
– for i = 1, . . . , n− 1, li denotes the distance between records ri and ri+1; and
– ln denotes the distance between rn and N .
One way to solve this system of equations is to ﬁrst solve the subsystem
l0 · l1 = q1, l1 · l2 = q2, and l0 · l2 = q12
for l0, l1 and l2. Then, since the remaining equations are of the form li · li+1 =
qi+1, for i ≥ 2, one can just solve for li+1 one by one using the recovered values,
starting with i = 2.
The resulting method for full database reconstruction is shown in Algo-
rithm 2.
Algorithm 2 Full Reconstruction
1: Run Algorithm 1 until the answers to all possible distinct queries have been
observed
r = order [i]
Let qi be the number of distinct queries that returned response {r}
Create equation li−1 · li = qi
2: Let order be the ordered list of records returned by Algorithm 1
3:
4: for i in range [1, n] do
5:
6:
7:
8:
9: Let q12 be the number of distinct queries
10: Create equation l0 · l2 = q12
{order[1], order[2]}
that
returned response
11:
12: Solve the resulting system of equations
13: Return li, i ∈ [0, n]
Evangelia Anna Markatou and Roberto Tamassia
5.3 Analysis
Theorem 4. After receiving 2.1N 2 log N queries issued uniformly at random,
Algorithm 2 will succeed in a full reconstruction of the database with probability
greater than 1 − 1/N 2, where N is the size of the universe of database values.
Proof. Similarly to the proof of Theorem 1 we can show that after 2.1N 2 log N
uniformly at random issued queries with probability greater than 1 − 1/N 2, the
attacker will observe all queries at least once.
Then, the attacker can solve the system of equations (1) to determine the
distances between all record values and thus fully reconstruct the database. (cid:117)(cid:116)
6 Conclusions
In this paper, we have presented an attack that reconstructs the values of an
encrypted database from access pattern leakage and search pattern leakage. As
in previous constructions, complete exact reconstruction requires observing a
large number of queries and bounds on the query complexity of the attack are
proved for a uniform query distribution. Recently, a reconstruction method has
been presented whose eﬃciency does not rely on assumptions about the query
distribution [17], which opens an interesting research direction. Also, in response
to attack papers on searchable encryption, there is an interesting body of work
that focuses on leakage reduction (e.g., [4, 12, 13]). Another promising avenue
for future work is developing methods to attack the above improved schemes.
7 Acknowledgments
We would like to thank Thibaut Bagory, Paul Grubbs, Marie-Sarah Lacharit´e,
Brice Minaud, and Kenneth G. Paterson and for their helpful comments and
suggestions on a previous version of this paper.
References
[1] Booth, K.S., Lueker, G.S.: Testing for the consecutive ones property, interval
graphs, and graph planarity using PQ-tree algorithms. Journal of Computer
and System Sciences 13(3), 335–379 (1976)
[2] Cash, D., Grubbs, P., Perry, J., Ristenpart, T.: Leakage-abuse attacks
against searchable encryption. In: Proc. ACM Conf. on Computer and Com-
munications Security, CCS (2015)
[3] Dautrich, Jr., J.L., Ravishankar, C.V.: Compromising privacy in precise
query protocols. In: Proc. Int. Conf. on Extending Database Technology,
EDBT (2013)
[4] Demertzis, I., Papadopoulos, S., Papapetrou, O., Deligiannakis, A., Garo-
falakis, M.: Practical private range search revisited. In: Proc. ACM Int.
Conf. on Management of Data, SIGMOD (2016)
Full Database Reconstruction with Access and Search Pattern Leakage
[5] Durak, F.B., DuBuisson, T.M., Cash, D.: What else is revealed by order-
revealing encryption? In: Proc. ACM Conf. on Computer and Communica-
tions Security, CCS (2016)
[6] Grubbs, P., Lacharit´e, M., Minaud, B., Paterson, K.G.: Learning to recon-
struct: Statistical learning theory and encrypted database attacks. In: IEEE
Symp. on Security and Privacy, pp. 513–529 (2019)
[7] Grubbs, P., Lacharit´e, M.S., Minaud, B., Paterson, K.G.: Pump up the
volume: Practical database reconstruction from volume leakage on range
queries. In: Proc. ACM Conf. on Computer and Communications Security,
CCS (2018)
[8] Grubbs, P., Lacharit´e, M.S., Minaud, B., Paterson, K.G.: Learning to recon-
struct: Statistical learning theory and encrypted database attacks. Cryptol-
ogy ePrint Archive, Report 2019/011 (2019), https://eprint.iacr.org/
2019/011
[9] Grubbs, P., McPherson, R., Naveed, M., Ristenpart, T., Shmatikov, V.:
Breaking web applications built on top of encrypted data. In: Proc. ACM
Conf. on Computer and Communications Security, CCS (2016)
[10] Grubbs, P., Ristenpart, T., Shmatikov, V.: Why your encrypted database is
not secure. In: Proc. Workshop on Hot Topics in Operating Systems, HotOS
(2017)
[11] Grubbs, P., Sekniqi, K., Bindschaedler, V., Naveed, M., Ristenpart, T.:
Leakage-abuse attacks against order-revealing encryption. In: 2017 IEEE
Symp. on Security and Privacy, SP (2017)
[12] Kamara, S., Moataz, T.: Computationally volume-hiding structured encryp-
tion. In: Advances in Cryptology, EUROCRYPT (2019)
[13] Kamara, S., Moataz, T., Ohrimenko, O.: Structured encryption and leakage
suppression. In: Advances in Cryptology, CRYPTO (2018)
[14] Kellaris, G., Kollios, G., Nissim, K., O’Neill, A.: Generic attacks on secure
outsourced databases. In: Proc. ACM Conf. on Computer and Communi-
cations Security, ACM (2016)
[15] Kornaropoulos, E.M., Papamanthou, C., Tamassia, R.: Data recovery on
encrypted databases with k-nearest neighbor query leakage. In: Proc. IEEE
Symp. on Security and Privacy, pp. 245–262, SP (2019)
[16] Kornaropoulos, E.M., Papamanthou, C., Tamassia, R.: The state of the
uniform: Attacks on encrypted databases beyond the uniform query dis-
tribution. Cryptology ePrint Archive, Report 2019/441 (2019), https:
//eprint.iacr.org/2019/441
[17] Kornaropoulos, E.M., Papamanthou, C., Tamassia, R.: The state of the
uniform: Attacks on encrypted databases beyond the uniform query distri-
bution. In: Proc. IEEE Symp.on Security and Privacy, SP (2020), to appear
[18] Lacharit´e, M.S., Minaud, B., Paterson, K.G.: Improved reconstruction at-
tacks on encrypted data using range query leakage. In: Proc. IEEE Symp.
on Security and Privacy, SP (2018)
[19] Pouliot, D., Wright, C.V.: The shadow nemesis: Inference attacks on eﬃ-
ciently deployable, eﬃciently searchable encryption. In: Proc. ACM Conf.
on Computer and Communications Security, CCS (2016)
Evangelia Anna Markatou and Roberto Tamassia
[20] Zhang, Y., Katz, J., Papamanthou, C.: All your queries are belong to us: The
power of ﬁle-injection attacks on searchable encryption. In: Proc. USENIX
Security Symposium (2016)