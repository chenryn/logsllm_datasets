Name: aaaa
A/D/S/P: 1,2,3,4
0.- Exit
1.- Add player
2.- Remove player
3.- Select player
4.- Edit player
5.- Show player
6.- Show team
Your choice: 2
Enter index: 0
She's gone!
接下来直接显示该球员信息：
Your choice: 5
Name:
A/D/S/P: 29082240,0,3,4
0.- Exit
1.- Add player
2.- Remove player
3.- Select player
4.- Edit player
5.- Show player
6.- Show team
Your choice: 6
Your team:
Player 0
Name: bbbb
A/D/S/P: 5,6,7,8
奇怪的事情发生了，程序没有提醒我们球员不存在，而是直接读取了内存中的信
息。
1032
6.1.9 pwn RHme3 Exploitation
于是我们猜测，程序在 free 球员时没有将 select 的值置空，导致了 use-after-free
的问题。关于 UAF 已经在前面的章节中讲过了。
很明显，每个球员都是一个下面这样的结构体：
struct player {
int32_t attack_pts;
int32_t defense_pts;
int32_t speed;
int32_t precision;
char *name;
}
静态分析
先来看一下添加球员的过程，函数 sym.add_player ：
[0x00400ec0]> pdf @ sym.add_player
/ (fcn) sym.add_player 789
| sym.add_player ();
| ; var int local_11ch @ rbp-0x11c
| ; var int local_118h @ rbp-0x118
| ; var int local_110h @ rbp-0x110
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x00402235 (main + 148)
| 0x00401801 55 push rbp
| 0x00401802 4889e5 mov rbp, rsp
| 0x00401805 4881ec200100. sub rsp, 0x120
| 0x0040180c 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
| 0x00401815 488945f8 mov qword [local_8h],
rax
| 0x00401819 31c0 xor eax, eax
| 0x0040181b 48c785e8feff. mov qword [local_118h
], 0
| 0x00401826 c785e4feffff. mov dword [local_11ch
], 0 ; player 编号初始值为 0
| ,= 0x00401832 8385e4feffff. add dword [local_11ch
], 1 ; 编号加 1
| :| ; JMP XREF from 0x00401830 (sym.add_player)
| :`-> 0x00401839 83bde4feffff. cmp dword [local_11ch
], 0xa ; [0xa:4]=-1 ; 10
| :,= 0x00401855 83bde4feffff. cmp dword [local_11ch
], 0xb ; [0xb:4]=-1 ; 11
| ,= 0x0040187c 8b85e4feffff mov eax, dword [local
_11ch]
| | 0x00401882 89c6 mov esi, eax
| | 0x00401884 bf93244000 mov edi, str.Found_fr
ee_slot:__d ; 0x402493 ; "Found free slot: %d\n"
| | 0x00401889 b800000000 mov eax, 0
| | 0x0040188e e86df4ffff call sym.imp.printf
; int printf(const char *format)
| | 0x00401893 488b05c61820. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| | 0x0040189a 4889c7 mov rdi, rax
| | 0x0040189d e81ef5ffff call sym.imp.fflush
1034
6.1.9 pwn RHme3 Exploitation
; int fflush(FILE *stream)
| | 0x004018a2 bf18000000 mov edi, 0x18
; 24
| | 0x004018a7 e804f5ffff call sym.imp.malloc
; void *malloc(size_t size) ; 第一个 malloc，给 player 结
构体分配空间
| | 0x004018ac 488985e8feff. mov qword [local_118h
], rax ; 返回地址 rax -> [local_118h]
| | 0x004018b3 4883bde8feff. cmp qword [local_118h
], 0
| |,= 0x004018db 488b85e8feff. mov rax, qword [local
_118h]
| || 0x004018e2 ba18000000 mov edx, 0x18
; 24
| || 0x004018e7 be00000000 mov esi, 0
| || 0x004018ec 4889c7 mov rdi, rax
| || 0x004018ef e82cf4ffff call sym.imp.memset
; void *memset(void *s, int c, size_t n)
| || 0x004018f4 bfbb244000 mov edi, str.Enter_pl
ayer_name: ; 0x4024bb ; "Enter player name: "
| || 0x004018f9 b800000000 mov eax, 0
| || 0x004018fe e8fdf3ffff call sym.imp.printf
; int printf(const char *format)
| || 0x00401903 488b05561820. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| || 0x0040190a 4889c7 mov rdi, rax
| || 0x0040190d e8aef4ffff call sym.imp.fflush
; int fflush(FILE *stream)
| || 0x00401912 488d85f0feff. lea rax, rbp - 0x110
1035
6.1.9 pwn RHme3 Exploitation
| || 0x00401919 ba00010000 mov edx, 0x100
; 256
| || 0x0040191e be00000000 mov esi, 0
| || 0x00401923 4889c7 mov rdi, rax
| || 0x00401926 e8f5f3ffff call sym.imp.memset
; void *memset(void *s, int c, size_t n)
| || 0x0040192b 488d85f0feff. lea rax, rbp - 0x110
| || 0x00401932 be00010000 mov esi, 0x100
; 256
| || 0x00401937 4889c7 mov rdi, rax
| || 0x0040193a e884fbffff call sym.readline
| || 0x0040193f 488d85f0feff. lea rax, rbp - 0x110
; 读入字符串到 rbp - 0x110
| || 0x00401946 4889c7 mov rdi, rax
| || 0x00401949 e852f3ffff call sym.imp.strlen
; size_t strlen(const char *s) ; player.name 长度
| || 0x0040194e 4883c001 add rax, 1
; 长度加 1
| || 0x00401952 4889c7 mov rdi, rax
| || 0x00401955 e856f4ffff call sym.imp.malloc
; void *malloc(size_t size) ; 第二个 malloc，给 player.nam
e 分配空间
| || 0x0040195a 4889c2 mov rdx, rax
; 返回地址 rax -> rdx
| || 0x0040195d 488b85e8feff. mov rax, qword [local
_118h] ; player 结构体 [local_118h] -> rax
| || 0x00401964 48895010 mov qword [rax + 0x10
], rdx ; player.name 存放到 [rax + 0x10]
| || 0x00401968 488b85e8feff. mov rax, qword [local
_118h]
| || 0x0040196f 488b4010 mov rax, qword [rax +
0x10] ;
| || 0x00401973 4885c0 test rax, rax
| ||,= 0x0040199b 488b85e8feff. mov rax, qword [local
_118h]
| ||| 0x004019a2 488b4010 mov rax, qword [rax +
0x10] ; [0x10:8]=-1 ; 16 ; 取出 player.name 到 rax
| ||| 0x004019a6 488d95f0feff. lea rdx, rbp - 0x110
; 取出 payler.name 字符串地址到 rdx
| ||| 0x004019ad 4889d6 mov rsi, rdx
; rdx -> rsi
| ||| 0x004019b0 4889c7 mov rdi, rax
; rax -> rdi
| ||| 0x004019b3 e8b8f2ffff call sym.imp.strcpy
; char *strcpy(char *dest, const char *src) ; 将字符串复制
到 player.name 指向的地址
| ||| 0x004019b8 bfe3244000 mov edi, str.Enter_at
tack_points: ; 0x4024e3 ; "Enter attack points: "
| ||| 0x004019bd b800000000 mov eax, 0
| ||| 0x004019c2 e839f3ffff call sym.imp.printf
; int printf(const char *format)
| ||| 0x004019c7 488b05921720. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| ||| 0x004019ce 4889c7 mov rdi, rax
| ||| 0x004019d1 e8eaf3ffff call sym.imp.fflush
; int fflush(FILE *stream)
| ||| 0x004019d6 488d85f0feff. lea rax, rbp - 0x110
| ||| 0x004019dd be04000000 mov esi, 4
| ||| 0x004019e2 4889c7 mov rdi, rax
| ||| 0x004019e5 e8d9faffff call sym.readline
; 读入 attack_pts
| ||| 0x004019ea 488d85f0feff. lea rax, rbp - 0x110
| ||| 0x004019f1 4889c7 mov rdi, rax
| ||| 0x004019f4 e847f4ffff call sym.imp.atoi
; int atoi(const char *str)
| ||| 0x004019f9 89c2 mov edx, eax
| ||| 0x004019fb 488b85e8feff. mov rax, qword [local
1037
6.1.9 pwn RHme3 Exploitation
_118h]
| ||| 0x00401a02 8910 mov dword [rax], edx
; 将 attack_pts 写入 local_118h
| ||| 0x00401a04 bff9244000 mov edi, str.Enter_de
fense_points: ; 0x4024f9 ; "Enter defense points: "
| ||| 0x00401a09 b800000000 mov eax, 0
| ||| 0x00401a0e e8edf2ffff call sym.imp.printf
; int printf(const char *format)
| ||| 0x00401a13 488b05461720. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| ||| 0x00401a1a 4889c7 mov rdi, rax
| ||| 0x00401a1d e89ef3ffff call sym.imp.fflush
; int fflush(FILE *stream)
| ||| 0x00401a22 488d85f0feff. lea rax, rbp - 0x110
| ||| 0x00401a29 be04000000 mov esi, 4
| ||| 0x00401a2e 4889c7 mov rdi, rax
| ||| 0x00401a31 e88dfaffff call sym.readline
; 读入 defense_pts
| ||| 0x00401a36 488d85f0feff. lea rax, rbp - 0x110
| ||| 0x00401a3d 4889c7 mov rdi, rax
| ||| 0x00401a40 e8fbf3ffff call sym.imp.atoi
; int atoi(const char *str)
| ||| 0x00401a45 89c2 mov edx, eax
| ||| 0x00401a47 488b85e8feff. mov rax, qword [local
_118h]
| ||| 0x00401a4e 895004 mov dword [rax + 4],
edx ; 将 defense_pts 写入 local_118h + 4
| ||| 0x00401a51 bf10254000 mov edi, str.Enter_sp
eed: ; 0x402510 ; "Enter speed: "
| ||| 0x00401a56 b800000000 mov eax, 0
| ||| 0x00401a5b e8a0f2ffff call sym.imp.printf
; int printf(const char *format)
| ||| 0x00401a60 488b05f91620. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| ||| 0x00401a67 4889c7 mov rdi, rax
| ||| 0x00401a6a e851f3ffff call sym.imp.fflush
; int fflush(FILE *stream)
| ||| 0x00401a6f 488d85f0feff. lea rax, rbp - 0x110
| ||| 0x00401a76 be04000000 mov esi, 4
| ||| 0x00401a7b 4889c7 mov rdi, rax
1038
6.1.9 pwn RHme3 Exploitation
| ||| 0x00401a7e e840faffff call sym.readline
; 读入 speed
| ||| 0x00401a83 488d85f0feff. lea rax, rbp - 0x110
| ||| 0x00401a8a 4889c7 mov rdi, rax
| ||| 0x00401a8d e8aef3ffff call sym.imp.atoi
; int atoi(const char *str)
| ||| 0x00401a92 89c2 mov edx, eax
| ||| 0x00401a94 488b85e8feff. mov rax, qword [local
_118h]
| ||| 0x00401a9b 895008 mov dword [rax + 8],
edx ; 将 speed 写入 local_118 + 8
| ||| 0x00401a9e bf1e254000 mov edi, str.Enter_pr
ecision: ; 0x40251e ; "Enter precision: "
| ||| 0x00401aa3 b800000000 mov eax, 0
| ||| 0x00401aa8 e853f2ffff call sym.imp.printf
; int printf(const char *format)