lower than 20.
Known queries. The IKK and Count v.1 attacks are
described in [13] as known-data attacks that do not require
1Oblivious RAM can also be used to design an ESA that hides the co-
occurrence pattern. We describe one such design, which we call FLL, in
Section II and in Appendix A.
3
knowledge of any client queries. While it is true that these
attacks can achieve high recovery rates without knowledge of
client queries, this only holds if the adversary has complete
knowledge of the data; that is, if δ = 1. If the adversary has
less than full knowledge (i.e., δ < 1) and no knowledge of
any queries, then Count v.1 does not work.2
Theoretical vs. practical attacks.
In cryptanalysis it
is common to distinguish between theoretical attacks and
practical attacks.3 The former are attacks that work in strong
adversarial models; often relying on assumptions about the
adversary’s capabilities which rarely occur in practice. Exam-
ples include related-key attacks where the adversary is allowed
to make chosen-plaintext and chosen-ciphertext queries under
related keys (e.g., through modiﬁcation of keys). Another is the
known-key model where the adversary is assumed to know the
key and its goal is to distinguish ciphertexts from random. It
is our belief that the IKK and Count attacks are mostly of
theoretical interest since they rely on strong assumptions like
known-queries and high known-data rates and have only been
shown to work on high-selectivity keywords.
Should we discount theoretical attacks? Though these
attacks are of theoretical interest it does not mean we should
dismiss them. Even theoretical cryptanalytic results have some-
thing to teach us about the security of our constructions. For
example, even attacks that require high known-data rates can
be interesting if they exploit a leakage proﬁle that, up to
this point, had not been successfully cryptanalyzed. Especially
since one can assume that attacks always improve. Such results
serve as a warning and motivation to design schemes with
better leakage proﬁles. It is important, however, to be clear and
explicit about the limitations and implications of cryptanalytic
results.
B. Our Attacks
Motivated by the discussion above, we revisit known-data
attacks (i.e., leakage abuse attacks) against SSE. We introduce
four new attacks and two new injection attacks in Sections III
and IV. We also perform a thorough evaluation which we
report on in Section V and provide in detail in the full version
of this work. Our attacks achieve high recovery rates with
low known-data rates and do not rely on known queries. We
summarize the characteristics of our attacks in Table I. Most
surprisingly, all but one of our attacks are volumetric and,
therefore, apply not only to SSE/STE-based solutions but also
to ORAM-based constructions. As far as we know, these are
the ﬁrst known-data and chosen-data attacks against ORAM.
We now summarize our attacks and their performance:
• Volume analysis (VolAn): a known-data attack that ex-
ploits the total volume pattern. It has high recovery rates
when δ ≥ .8 and the client queries keywords with high-
selectivity (i.e., 10-13) or pseudo-low-selectivity (i.e.,
1-2).
2This may seem to contradict the results presented in [13] but the experi-
mental evaluation of Count v.1 presented in Figure 6 of [13] was incomplete.
For δ = 1 (i.e., complete knowledge) the attack does not need knowledge
of queries but for δ < 1 it does. We conﬁrmed this with the authors who
updated their manuscript with the new Count v.2 attack which does not require
knowledge of queries.
3We highly recommend the paper of Aumasson [6] for an insightful
discussion of these issues.
Attack
IKK [38]
Count [13]
Zhang et al. [75]
SubgraphID
SubgraphVL
VolAn
SelVolAn
Decoding & Binary
Sampled








Type
Known
(cid:88)
(cid:88)

(cid:88)
(cid:88)
(cid:88)
(cid:88)

Injection


(cid:88)




(cid:88)
Leakage
pattern
co
co, rlen
rid
rid
vol
tvol
tvol, rlen
tvol
Known
queries
(cid:88)
(cid:88)






δ for high
selectivity
≥95%
≥80%
−
≥5%
≥5%
≥85%
≥80%
−
(cid:12)
(cid:12)
−
≥50%
≥50%
≥85%
≥85%
−
≥60%
(cid:12)
(cid:12)
−
(cid:11)
(cid:11)
(cid:11)
−
δ for p-low
selectivity
δ for low
selectivity
To mitigate theoretical attacks,
like the IKK or Count
attack which require high known-data rates and exploit the
co-occurrence pattern, we design a new scheme called OPQ
that does not leak this pattern. We also point out that, in [12],
Bost and Fouque introduced padding techniques that efﬁciently
mitigate these attacks.
Table I: Comparison of existing leakage abuse (known-data) and injection (chosen-data) attacks. The last three columns give the known-data rate δ needed for
a recovery rate of at least 20% against low-, pseudo-low- and high-selectivity keywords, respectively. (cid:12) means the experiment was not conducted in previous
work. (cid:11) means that even a known-data rate of δ = 1 does not achieve at least 20% recovery rate. All experiments were based on the Enron dataset [63] with
150 queries and a keyword space of 500 keywords.
• Selective volume analysis (SelVolAn): an extension of vol-
ume analysis that relies on the total volume and response
length patterns. This attack has slightly higher recovery
rates under the same conditions as volume analysis.
• Subgraph attacks: a framework to design known-data at-
tacks against atomic leakage patterns, i.e., leakage pattern
that reveals information about each matching document.
We give two concrete instantiations of our framework. The
ﬁrst is SubgraphID which exploits the response identity
and the second is SubgraphVL which exploits the volume
pattern. Both attacks achieve high recovery rates with very
low known-data rates (i.e., with δ as low as .05) when the
client queries high-selectivity keywords. The recovery rate
drops signiﬁcantly and reaches 0% when the client queries
keywords with low selectivity (i.e., 1-2) and pseudo-low
selectivity.
• the Decoding attack (Decoding): an injection attack that
exploits the total volume pattern. This attack always re-
covers its target query if the adversary can inject between
4 to 16KBytes depending on the query’s selectivity.
• the Binary Search attack (Binary): an injection attack that
also exploits the total volume pattern. The attack requires
logarithmic number of (adaptive) injections. The attack
recovers its target query if the adversary can inject around
8KBytes.
SSE/STE. SSE was introduced by Song, Wagner and
Perrig [69]. Curtmola, Garay, Kamara and Ostrovsky formal-
ized SSE in [19] and described the ﬁrst sub-linear and optimal-
time constructions. STE was introduced by Chase and Kamara
in [18] as a generalization of SSE. Many works have explored
various aspects of SSE including dynamism [30], [42], [41],
[70], [10], [17], [11], [23], locality [17], [15], [4], [55], [21],
expressiveness [18], [14], [59], [24], [54], [40], [43], multiple
clients [19], [39], [60], [35], and leakage [27], [45], [44], [3].
Finally, to protect against purely volumetric attacks one
can use the recent constructions of Kamara and Moataz [44]
which are volume-hiding.
D. Related Work
Remark. As described above, our evaluation shows that
even our new attacks can fail to recover queries in certain
settings. This ﬁnding is important as it shows that existing
schemes can be good enough to use in some scenarios. In
Section VI, we provide a set of takeaways summarizing our
ﬁndings and conclusions.
C. Countermeasures
We propose several countermeasures and guidelines against
both our new attacks and previously-known attacks.
As discussed earlier, our empirical evaluation found only
a single practical setting where our attacks are successful:
querying high-selectivity keywords using a scheme that leaks
both the response identity and the volume patterns. The
simplest countermeasure to this is to use a scheme that does
not leak these patterns like the PBS construction of Kamara,
Moataz and Ohrimenko [45]. In Section VII, we demonstrate
empirically that PBS is resistant to all known-data attacks
(even ours) as long as the client makes at least 4 queries.
Speciﬁcally, we show that under this condition,
the best
possible attack has recovery rate 0.02% recovery rate.
ORAM. Goldreich and Ostrovsky introduced ORAM
in [31], where they described constructions with amortized
square-root and polylog overheads. Shi, Chan, Stefanov and
Li introduced tree-based ORAMs which achieved worst-case
polylog overhead in [68]. Since then, many works have
improved ORAM along many dimensions including com-
munication complexity, round complexity, client and server
storage [47], [71], [64], [27].
The IKK attack [38]. The attack takes as input the co-
occurrence pattern, a background matrix, and a set of known
queries. The co-occurrence pattern is a matrix with rows and
columns indexed by queries (not keywords) and where the
element in the ith row and jth columns is the (normalized)
number of documents that contain both the ith and jth query.
The co-occurrence matrix captures the information leaked to
the adversary. The background matrix is a matrix with rows
and columns indexed by keywords and where the element in
the ith row and jth column is the (normalized) number of
documents that contain both keywords with noise added. This
background matrix is meant to represent auxiliary information
available to the adversary. The IKK attack solves an opti-
mization problem to ﬁnd a mapping between the two matrices
which leads to a mapping between queries and keywords. The
paper shows that this optimization problem is NP-complete,
but can be efﬁciently approximated using simulated annealing.
4
Count v.1 [13]. The count attack takes as input the co-
occurrence pattern, the response length pattern (called counts
in [13]), and a subset of the user’s data. It starts by mapping
the queries in the query sequence to their response lengths
and keywords in the known dataset to their response lengths.
It then maps all the queries with unique response lengths to
the keyword with the same response length. These recovered
keywords then serve as anchors for the second step of the
attack where each remaining query is mapped to a keyword
with the same response-length and the same co-occurrences
with respect to the recovered keywords. The attack was shown
to achieve high recovery rates when the known-data rate δ = 1.
When δ < 1, the attack also needs knowledge of some fraction
of the user’s queries.
Count v.2 [16]. Count v.2 is similar to Count v.1 except
that it does not require knowledge of user queries when δ < 1.
The main challenge in this setting is in identifying the anchors
since the response lengths computed from the known data are
no longer accurate which leads to failure of the Count v.1.
Count v.2, however, uses a new mechanism that takes into
account the distribution of the keywords in the corpus. The
resulting anchors are only accurate with a certain probability
so the accuracy of the overall attack is probabilistic. The rest
of the attack is similar to v.1.
Again, we note that all three attacks are subject to the
limitations discussed in Section I-A.
II. PRELIMINARIES
Notation. The set of all binary strings of length n is
denoted as {0, 1}n, and the set of all ﬁnite binary strings as
{0, 1}∗. [n] is the set of integers {1, . . . , n}, and 2[n] is the
corresponding power set. The output x of an algorithm A is
denoted by x ← A. Given a sequence q of n elements, we
refer to its ith element as qi or q[i]. If S is a set then #S
refers to its cardinality. If s is a string then |s|2 refers to its
bit length. Throughout, k will denote the security parameter.
The word RAM. Our model of computation is the word
RAM. In this model, we assume memory holds an inﬁnite