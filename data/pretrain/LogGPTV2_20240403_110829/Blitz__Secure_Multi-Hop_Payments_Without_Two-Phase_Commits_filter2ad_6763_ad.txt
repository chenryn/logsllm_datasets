user U cannot be linked to any existing public key of U. For
when referring to the stealth
identity or the stealth public key under the control of user Ui.
Anonymous communication network (ACN) An ACN al-
lows users to communicate anonymously with each other.
One such ACN is based on onion routing, whose ideal func-
tionality is deﬁned in [8]. Sphinx [10] is a realization of this
and (extended with a per-hop payload) is used in the Light-
ning Network (LN). We use this functionality here as well
in a blackbox way. On a high level, routing information and
a per-hop payload is encrypted and layered for every user
along a path, in what is called an onion. Every user on the
path can then, when it is its turn, “peel off” such a layer, re-
vealing: (i) the next neighbor; (ii) the payload meant for it;
and (iii) the rest of the data, which is again an onion that
can only be opened by the next neighbor. This rest of data is
then forwarded to the next user and so on until the receiver is
reached.
simplicity, we denote (cid:101)Ui, pk(cid:101)Ui
For readability, we use two algorithms, where onion ←
CreateRoutingInfo({Ui}i∈[1,n],{msgi}i∈[1,n]) creates such a
routing object (an onion) using (publicly known) public
encryption keys of the corresponding users on the path.
Moreover, when called by correct user Ui, the algorithm
GetRoutingInfo(onioni,Ui) returns (Ui+1, msgi, onioni+1),
that is, the next user on the path, a message and a new onion or
returns msgn if called by the recipient. A wrong user U (cid:54)= Ui
calling GetRoutingInfo(onioni,Ui) will result in an error ⊥.
4.3
2-party protocol for channel update
In this section, we show the necessary steps to update a sin-
gle channel γi between two consecutive users Ui and Ui+1 on
a payment path to a state encoding our payment functionality
as shown in Figure 4. We will describe later in Section 4.4
the complete multi-hop payment (MHP) protocol.
As overviewed in Section 3, a channel update requires to
create a series of transactions to realize the “pay-or-revoke”
semantics at a given channel. In particular, for readability,
we deﬁne the following transaction creation methods and in
Figure 7 some macros to be used hereby in the paper:
i := GenPay(txstate
.output[0]
txp
) This
input
txstate
i
output := (αi, OneSig(Ui+1)).
i
as
transaction
creates
a
and
takes
single
i
i
i
txr
i := GenRef(txstate
, txer,θεi) This transaction takes as
.output[0] and θεi ∈ txer.output. The calling user
input txstate
Ui makes sure that this output belongs to a stealth address un-
i .output := (αi +
der Ui’s control. It creates a single output txr
ε, OneSig(Ui)), where αi, Ui, Ui+1 are taken from txstate
.
We now explain in detailed order, how these transactions
have to be created, signed and exchanged. A full description
in pseudocode is given in Figure 5. This two party update
procedure, which we call pcSetup, is called by a user Ui
giving as parameters the channel γi with its right neighbor
Ui+1, the transaction txer, a list containing the values Ri for the
stealth addresses of each user on the path, onioni+1 containing
some routing information for the next user, the output θεi ∈
txer.output that belongs to a stealth address of Ui, the amount
to be paid αi and the time T . The user Ui knows these values
either from performing pcSetup with its left neighbor Ui−1
or because Ui is the sender.
i
i
The ﬁrst step for Ui is to create the new channel state
from the channel γi and the amount αi by calling txstate
:=
genState(γi,α). In the second step, Ui creates the transaction
.output[0] and θεi. Then, Ui sends txer, txstate
,
txr
txr
i from txstate
i, rList and onioni+1 to its right neighbor Ui+1.
Now Ui+1 checks if txer
is well-formed and, if it is
not the receiver, has an output θεi+1, which belongs to
its stealth address (using its stealth address private keys
a,b) under some Ri ∈ rList. Moreover, it checks that
onioni+1 contains the correct routing information and a
message indicating that the txer was not tampered, for
instance a hash of it. All this is done using the macro
,θεi+1,Ri+1,Ui+2, onioni+2) :=
(see
Figure
(sk(cid:103)Ui+1
7)
i
USENIX Association
30th USENIX Security Symposium    4051
pcSetup(γi, txer, rList, onioni+1,θεi ,αi,T ):
:= genState(αi,T,γi)
Ui
1. txstate
i
2. txr
i := GenRef(txstate
3. Send (txer, rList, onioni+1, txstate, txr
Ui+1 upon (txer, rList, onioni+1, txstate, txr
4. Check
,θεi )
that
i
onioni+1)
(sk(cid:103)Ui+1
,θεi+1 ,Ri+1,Ui+2, onioni+2)
i ) to Ui+1 (= γi.right)
i ) from Ui
checkTxEr(Ui+1,Ui+1.a,Ui+1.b, txer, rList,
values
returns
some
(cid:54)= ⊥,
but
5. Extract αi and T from txstate and check txstate
6. Check that for one output θεx ∈ txer.output it holds that txr
genState(αi,T,γi)
i :=
,θεx ). If one of these previous checks failed,
=
i
i
i
)
GenRef(txstate
return ⊥.
i := GenPay(txstate
7. txp
8. Send (σUi+1 (txr
i )) to Ui+1
Ui upon (σUi+1 (txr
i ))
9. If σUi+1 (txr
ated in step 2, return ⊥.
i ) is not a correct signature of Ui+1 for the txr
i cre-
10. pcSetup(γi, txstate
11. If, after tu +tc time has expired, the message (update−ok) is
)
i
returned, return (cid:62). Else return ⊥.
Ui+1
12. Upon
13. Upon (update−fail), return ⊥
(txer, rList, onioni+2,Ui+2,θεi+1 ,αi,T )
(update−ok),
return
Figure 5: Protocol for 2-party channel update
checkTxEr(Ui+1,Ui+1.a,Ui+1.b,Ui+1.txer, rList, onioni+1),
which returns ⊥ if any of the checks fail.
and txr
Then, Ui+1 checks if txstate
i were well-constructed
i
i uses an output of txer as input. If
and in particular, that txr
everything is ok, then Ui+1 can independently create txp
i , since
it requires only its own signature. Next, Ui+1 pre-signs txr
i
and sends this signature to Ui. Ui checks if this signature is
correct and then invokes a channel update with Ui+1 to txstate
.
After this step, the pcSetup function is ﬁnished and returns
either (txer, rList, onioni+2,Ui+2,θεi+1,αi,T ) to Ui+1 and (cid:62)
to Ui if successful or ⊥ otherwise to the users γi.users. If Ui+1
is not the receiver, it will continue this process with its own
neighbor as shown in the next section.
4.4 Multi-hop payment description
i
In this section we describe the MHP protocol. The pseu-
docode for carrying out MHPs in Blitz is shown in Figure 6,
the macros used in are listed in Figure 7. For the full descrip-
tion of the macros, see Appendix H.
Setup Say the sender wants to pay α coins to Un via a path
channelList and for some timeout T . In the setup phase, the
sender derives a new stealth address pk(cid:101)Ui
and some Ri for
every user except the receiver. Then, the sender creates a list
rList of entries Ri and onions encoding the right neighbor
Ui+1 for every user Ui. Moreover, the sender constructs txer.
Then, it adds the sum of all per-hop fees to the initial
amount α: αi := α + (n− 1)· fee where fee is the fee charged
by every user (see Appendix A). The setup ends when the
sender starts the open phase with its right neighbor U1.
Open After successfully setting up the payment with its left
user Ui−1,Ui knows txer, rList, onioni+1 αi−1, T and its stealth
output for θεi ∈ txer.output. Using these values and reducing
αi−1 by fee, Ui carries out the 2-party channel update with
Ui+1. The right neighbor continues this step with its right
neighbor until the receiver is reached.
Finalize Once the receiver has ﬁnished the open phase with
its left neighbor, it sends back a signature of txer as a conﬁr-
mation to the sender, who will then check if that transaction
was tampered with. If yes, or if the sender did not receive
such a conﬁrmation in time, the sender publishes txer on the
blockchain. Otherwise the sender goes idle.
Respond At any given time after opening a payment con-
struction, users need to check if txer was published. If it was,
they need to refund themselves via txr
i. Also, if some user’s
i after time T , the user pub-
left neighbor tries to publish txr
lishes txp
i . This ensures, that if the refund did not happen
before time T , the users have a way to enforce the payment.
Note that due to the relative timelock on both txer and txstate,
txp
i will always be possible if txer is published after T (or if the
left neighbor tries to refund after T by closing the channel).
The protocol is shown in Figure 6. Note that we simpli-
ﬁed the protocol for readability purposes, (e.g., by omitting
the payment ids that are required for multiple concurrent
payments). The full protocol modelled in the Universal Com-
posability framework can be seen in the full version [6].
5 Security analysis
5.1 Security model
The security model we use closely follows [5, 11, 12].
We model the security of Blitz in the synchronous, global
universal composability (GUC) framework [9]. We use a
global ledger L to capture any transfer of coins. The ledger
is parameterized by a signature scheme Σ and a blockchain
delay ∆, which is an upper bound on the number of rounds
it takes between when a transaction is posted to L and when
said transaction is added to L. Our security analysis is fully
presented in the full version [6] and brieﬂy outlined here.
Firstly, we provide an ideal functionality FPay, which is
an idealized description of the behavior we expect of our
pay-or-revoke payment paradigm. This description stipulates
any input/output behavior and the impact on the ledger of a
payment protocol, as well as how adversaries can inﬂuence the
execution. In this idealized setting, all parties communicate
only with FPay, which acts as a trusted third party.
We then provide our protocol Π formally deﬁned in the UC
framework and show that Π emulates FPay. On a high level,
we show that any attack that can be performed on Π can also
be simulated on FPay or in other words that Π is at least as
4052    30th USENIX Security Symposium
USENIX Association
Setup
U0 upon receiving (setup, channelList, txin,α,T )
1. If checkChannels(channelList,U0) = ⊥, abort.
2. Let n := |channelList|. If checkT(n,T ) = ⊥, abort.
3. If checkTxIn(txin,n,U0) = ⊥, abort.
4. (txer, rList, onion) := genTxEr(U0, channelList, txin)
5. α0 := α + fee· (n− 1)
6. (sk(cid:102)U0
checkTxEr(U0,U0.a,U0.b, txer, rList, onion)
7. pcSetup(γ0, txer, rList, onion1,U1,θε0 ,α0,T )
,θε0 ,R0,U1, onion1)
Open
:=
Ui+1 upon receiving (txer, rList, onioni+2,Ui+2,θεi+1 ,αi,T )
1. If Ui+1 is the receiver Un, send (confirm,σUn (txer)) (cid:44)−→ U0
2. pcSetup(γi+1, txer, rList, onioni+2,Ui+2,θεi+1 ,αi − fee,T )
and go idle.
Finalize
U0: Upon (confirm,σUn (txer)) ←−(cid:45) Un, check that σUn (txer) is
Un’s valid signature for the transaction txer created in the Setup
phase. If not, or if txer was changed, or no such conﬁrmation was
received until T −tc − 3∆, publishTx(txer,σU(cid:48)
(txer)).
0
Respond (Executed in every round τx)
closeChannel(γi) and, after txstate
blockchain within at most
1. If τx  T , γi is closed and txer and txstate
is on the blockchain,
(txr
i
tc
but not txr
i
i−1, (σUi (txp
i , publishTx(txp
Figure 6: The Blitz payment protocol
i−1))).
secure as FPay. To prove this, we design a simulator S, which
translates any attack on the protocol into an attack on the ideal
functionality. Then, we show that no PPT environment can
distinguish between interacting with the real world and inter-
acting with the ideal world. In the real world, the environment
sends instructions to a real attacker A and interacts with Π.
In the ideal world, the environment sends attack instructions
to S and interacts with FPay.
We need to show that the same messages are output in
the same rounds and the same transactions are posted on
the ledger in the same rounds in both the real and the ideal
world, regardless of adversarial presence. To achieve this, the
simulator needs to instruct the ideal functionality to output a
message whenever one is output in the real protocol and the
simulator needs to post the same transactions on the ledger.
By achieving this, the environment cannot trivially distinguish
between the real and the ideal world anymore just be looking
at the messages and transactions as well as their respective
timing. Formally, in the full version [6] we prove Theorem 1.
Theorem 1. (informal) Let Σ be a EUF-CMA secure signa-
ture scheme. Then, for any ledger delay ∆ ∈ N, the protocol
Π UC-realizes the ideal functionality FPay.
Macros (see Appendix H)
checkTxIn(txin,n,U0): If txin is well-formed and has enough
coins, returns (cid:62). checkChannels(channelList,U0):
If
channelList forms a valid path, returns the receiver Un, else
⊥. checkT(n,T ):
If T is sufﬁciently large, return (cid:62). Oth-
erwise, return ⊥ genTxEr(U0, channelList, txin): Generates
txer from txin along with a list of values rList to redeem their
stealth adresses and an onion containing the routing information.