本文为ConsenSys CTF，`Ethereum Sandbox`相关的一篇文章。
在了解这个题目前需要我们对以太坊和Solidity的基本概念进行理解。
### 题目一
我们的目标部署`0x68cb858247ef5c4a0d0cde9d6f68dce93e49c02a`的一个合约上。该合约没有经过代码验证操作，所以我们需要对该合约进行逆向从而获取源代码信息。
代码信息如下：
    // Decompiled at www.contract-library.com
    // Data structures and variables inferred from the use of storage instructions
    uint256[] stor_write_what_where_gadget; // STORAGE[0x0]
    uint256[] stor_owners; // STORAGE[0x1]
    // Note: The function selector is not present in the original solidity code.
    // However, we display it for the sake of completeness.
    function __function_selector__(uint256 function_selector) public {
      MEM[0x40] = 0x80;
      if ((msg.data.length() >= 0x4)) {
        if ((0x25e7c27 == function_selector)) owners(uint256)(function_selector);
        if ((0x2918435f == function_selector)) fun_sandbox(address)();
        if ((0x4214352d == function_selector)) write_what_where_gadget(uint256,uint256)();
        if ((0x74e3fb3e == function_selector)) 0x74e3fb3e(function_selector);
      }
      throw();
    }
    function write_what_where_gadget() public {
      require(!msg.value);
      require(((msg.data.length() - 0x4) >= 0x40));
      v1200x149 = msg.data[v1200x131];
      v1200x14d = v1200x131 + 32;
      require((msg.data[v1200x14d] = 0x20));
      v1650x18e = msg.data[v1650x176];
      require((v1650x18e = 0x20));
      v610x8a = msg.data[v610x72];
      require((v610x8a > 0);
      v610x9d = MEM[0x40];
      MEM[v610x9d] = address(v610x1ef);
      return(MEM[MEM[0x40]:MEM[0x40] + (v610x9d + 32 - MEM[0x40])]);
    }
    function fun_sandbox(address varg0) public {
      require(((msg.data.length() - 0x4) >= 0x20));
      v289_1 = 0x0;
      v20b_0 = 0x0;
      while (true) {
        if ((v20b_0 >= stor_owners.length)) break;
        require((v20b_0 > 0))) {
          v289_1 = 0x1;
        }
        v20b_0 = v20b_0 + 1;
        continue;
      }
      require(v289_1);
      v29c = extcodesize(varg0);
      v2a1 = MEM[0x40];
      MEM[0x40] = (v2a1 + (v29c + 63 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0));
      MEM[v2a1] = v29c;
      EXTCODECOPY(varg0, v2a1 + 32, 0x0, v29c);
      v2cf_0 = 0x0;
      while (true) {
        if ((v2cf_0 >= MEM[v2a1])) break;
        if ((v2cf_0 > 248 > 248 > 248 > 248 > 248 > 248   
。
我们发现在功能`0x2918435f`中有一个被更改过的调用函数。如果我们可以指定`delegatecall`使用的地址，那么我们基本上就能拥有合约。
让我们来看看为了触发此漏洞必须满足哪些条件。
首先我们来看先决条件：
    function 0x74e3fb3e() public {
      require(!msg.value);
      require(((msg.data.length() - 0x4) >= 0x20));
      v1650x18e = msg.data[v1650x176];
      require((v1650x18e = 0x20));
即消息data长度必须至少为32字节。
我们对合约进行一些细微的修改，存储偏移量0x01存储了一个数组。 此代码实质上检查调用者是否在该数组中。
在代码开始处，此数组等于[0xf339084e9838281c953f3e812f32a6e145f64bff]。
    bool foundOwner = false;
    for (int index = 0; index = MEM[v2a1])) break;
        if ((v2cf_0 > 248 > 248 > 248 > 248 > 248 > 248 = 0x40));
      v1200x149 = msg.data[v1200x131];
      v1200x14d = v1200x131 + 32;
      require((msg.data[v1200x14d] < stor_write_what_where_gadget.length));
      stor_write_what_where_gadget[msg.data[v1200x14d]] = v1200x149;
      exit();
    }
看起来这个函数并没有什么危险，但实际上此函数隐藏了一个任意的写原语的接口，我们可以用它将合约的owner所有权转让给我们自己。
满足前提条件3是最棘手的，我们需要调用某种方法来转移以太token，并且此过程中不能够使用任何转移函数。
然而这里存在一个名为`Constantinople`的硬分叉，而这个硬分叉包含了EIP-1014，且它创建一个名为`CREATE2`的新操作码。
此操作码的行为类似于`CREATE`，并存在于0xF5的位置。而该字节未被列入黑名单，因此我们可以使用CREATE2将以太网转移出CTF。
如何获得flag呢？