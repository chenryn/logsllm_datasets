getline 函数把字符'\0'(即空字符，其值为 0)插入到它创建的数组的末尾，以标记 字符串的结束。这一约定已被 C 语言采用:当在 C 语言程序中出现类似于
"hello\0"
的字符串常量时，它将以字符数组的形式存储，数组的各元素分别存储字符串的各个字符， 并以'\0'标志字符串的结束。
printf 函数中的格式规范%s 规定，对应的参数必须是以这种形式表示的字符串。copy 函数 的实现正是依赖于输入参数由'\0'结束这一事实，它将'\0'拷贝到输出参数中。(也就是说， 空字符'\0'不是普通文本的一部分。)
值得一提的是，即使是上述这样很小的程序，在传递参数时也会遇到一些麻烦的设计问 题。例如，当读入的行长度大于允许的最大值时，main 函数应该如何处理，getline 函数 的执行是安全的，无论是否到达换行符字符，当数组满时它将停止读字符。main 函数可以通 过测试行的长度以及检查返回的最后一个字符来判定当前行是否太长，然后再根据具体的情 况处理。为了简化程序，我们在这里不考虑这个问题。
调用 getline 函数的程序无法预先知道输入行的长度，因此 getline 函数需要检查是 否溢出。另一方面，调用 copy 函数的程序知道(也可以找出)字符串的长度，因此该函数不 需要进行错误检查。
练习 1•16 修改打印最长文本行的程序的主程序 main，使之可以打印任意长度的输入 行的长度，并尽可能多地打印文本。
练习 1•17             编写一个程序，打印长度大于 80 个字符的所有输入行。
练习 1•18 编写一个程序，删除每个输入行末尾的空格及制表符，并删除完全是空格的 行。
练习 1•19 编写函数 reverse(s)，将字符串 s 中的字符顺序颠倒过来。使用该函数 编写一个程序，每次颠倒一个输入行中的字符顺序。
1.10 外部变量与作用域
main 函数中的变量(如 line、longest 等)是 main 函数的私自变量或局部变量。由 于它们是在 main 函数中声明的，因此其它函数不能直接访问它们。其它函数中声明的变量也 同样如此。例如，getline 函数中声明的变量 i 与 copy 函数中声明的变量 i 没有关系。函 数中的每个局部变量只在函数被调用时存在，在函数执行完毕退出时消失。这也是其它语言
通常把这类变量称为自动变最的原因。以后我们使用"自动变量"代表"局部变量"。(第    4
章将讨论 static 存储类，这种类型的局部变量在多次函数调用之间保持值不变。)
由于自动变量只在函数调用执行期间存在，因此，在函数的两次调用之间，自动变量不 保留前次调用时的赋值，且在每次进入函数时都要显式为其赋值。如果自动变量没有赋值， 则其中存放的是无效值。
除自动变量外，还可以定义位于所有函数外部的变量，也就是说，在所有函数中都可以 通过变量名访问这种类型的变量(这机制同 Fortran 语言中的 COMMON 变量或 Pascal 语言中 最外层程序块声明的变量非常类似)。由于外部变量可以在全局范围内访问，因此，函数间可 以通过外部变量交换数据，而不必使用参数表。再者，外部变量在程序执行期间一直存在， 而不是在函数调用时产生、在函数执行完毕时消失。即使在对外部变量赋值的函数返回后， 这些变量仍将保持原来的值不变。
外部变量必须定义在所有函数之外，且只能定义一次，定义后编译程序将为它分配存储 单元。在每个需要访问外部变量的函数中，必须声明相应的外部变量，此时说明其类型。声 明时可以用 extern 语句显式声明，也可以通过上下文隐式声明。为了更详细地讨论外部变 量，我们改写上述打印最长文本行的程序，把 line、longest 与 max 声明成外部变量。这 需要修改这 3 个函数的调用、声明与函数体。
int getline(void); void copy(void);
/* print longest input line; specialized version */ main()
{
int len;
extern int max;
extern char longest[];
max = 0;
while ((len = getline()) > 0) if (len > max) {
max = len; copy();
}
if (max > 0)              /* there was a line */ printf("%s", longest);
return 0;
}
/* getline:              specialized version */ int getline(void)
{
int c, i;
extern char line[];
for (i = 0; i 的头文件中 声明的。更详细的信息将在第 4 章中讨论，第 7 章及附录 B 将讨论函数库。
在上述特别版本中，由于 getline 与 copy 函数都不带参数，因此从逻辑上讲，在源文 件开始处它们的原型应该是 getline()与 copy()。但为了与老版本的 C 语言程序兼容， ANSI C 语言把空参数表看成老版本 C 语言的声明方式，并且对参数表不再进行任何检查。在 ANSI C 中，如果要声明空参数表，则必须使用关键字 void 进行显式声明。第 4 章将对此进 一步讨论。
读者应该注意到，这节中我们在谈论外部变量时谨慎地使用了定义(define)与声明 (declaration)这两个词。"定义"表示创建变量或分配存储单元，而"声明"指的是说 明变量的性质，但并不分配存储单元。
顺便提一下，现在越来越多的人把用到的所有东西都作为外部变量使用，因为似乎这样 可以简化数据的通信——参数表变短了，且在需要时总可以访问这些变量。但是，即使在不 使用外部变量的时候，它们也是存在的。过分依赖外部变量会导致一定的风险，因为它会使 程序中的数据关系模糊不清——外部变量的值可能会被意外地或不经意地修改，而程序的修 改又变得十分困难。我们前面编写的打印最长文本行的程序的第 2 个版本就不如第 1 个版本
好，原因有两方面，其一便是使用了外部变量;另一方面，第 2  个版本中的函数将它们所操 纵的变量名直接写入了函数，从而使这两个有用的函数失去了通用性。
到目前为止，我们已经对 C 语言的传统核心部分进行了介绍。借助于这些少量的语言元 素，我们已经能够编写出相当规模的有用的程序。建议读者花一些时间编写程序作为练习。 下面的几个练习比本章前面编写的程序要复杂一些。
练习 1•20 编写程序 detab，将输入中的制表符替换成适当数目的空格，使空格充满到 下一个制表符终止位的地方。假设制表符终止位的位置是固定的，比如每隔 n 列就会出现一 个制表符终止位。n 应该作为变量还是符号常量昵?
练习 1•21 编写程序 entab，将空格串替换为最少数量的制表符和空格，但要保持单词 之间的间隔不变。假设制表符终止位的位置与练习 1•20 的 detab 程序的情况相同。当使用一 个制表符或者一个空格都可以到达下一个制表符终止位时，选用哪一种替换字符比较好?
练习 1•22 编写一个程序，把较长的输入行"折"成短一些的两行或多行，折行的位置 在输入行的第 n 列之前的最后一个非空格之后。要保证程序能够智能地处理输入行很长以及 在指定的列前没有空格或制表符时的情况。
练习 1•23 编写一个删除 C 语言程序中所有的注释语句。要正确处理带引号的字符串与 字符常量。在 C 语言中，注释不允许嵌套。
练习 1•24 编写一个程序，查找 C 语言程序中的基本语法错误，如圆括号、方括号、花 括号不配对等。要正确处理引号(包括单引号和双引号)、转义字符序列与注释。(如果读者 想把该程序编写成完全通用的程序，难度会比较大。)
第2章 类型、运算符与表达式
变量和常量是程序处理的两种基本数据对象。声明语句说明变量的名字及类型，也可以 指定变量的初值。运算符指定将要进行的操作。表达式则把变量与常量组合起来生成新的值。 对象的类型决定该对象可取值的集合以及可以对该对象执行的操作。本章将详细讲述这些内 容。
ANSI 标 准 对 语言的基 本类型与 表达式做 了许多小 的修改与 增补。所 有整型都 包括 signed(带符号)和  unsigned(无符号)两种形式，且可以表示无符号常量与十六进制字 符常量。浮点运算可以以单精度进行，还可以使用更高精度的 long double 类型运算。字 符串常量可以在编译时连接。ANSI C 还支持枚举类型，该语言特性经过了长期的发展才形成。 对象可以声明为     const(常量)类型，表明其值不能修改。该标准还对算术类型之间的自动 强制转换规则进行了扩充，以适合于更多的数据类型。
2.1 变量名
对变量的命名与符号常量的命名存在一些限制条件，这一点我们在第 1 章没有说明。名 字是由字母和数字组成的序列，但其第一个字符必须为字母。下划线“ _"被看做是字母，通 常用于命名较长的变量名，以提高其可读性。由于例程的名字通常以下划线开头，因此变量 名不要以下划线开头。大写字母与小写字母是有区别的，所以，x 与 X 是两个不同的名字。在 传统的 C 语言用法中，变量名使用小写字母，符号常量名全部使用大写字母。
对于内部名而言，至少前 31 个字符是有效的。函数名与外部变量名包含的字符数目可能 小于 31，这是因为汇编程序和加载程序可能会使用这些外部名，而语言本身是无法控制加载 和汇编程序的。对于外部名，ANSI 标准仅保证前 6 个字符的惟一性，并且不区分大小写。类 似于 if、else、int、float 等关键字是保留给语言本身使用的，不能把它们用做变量名。 所有关健字中的字符都必须小写。
选择的变量名要能够尽量从字面上表达变量的用途，这样做不容易引起混淆。局部变量 一般使用较短的变量名(尤其是循环控制变量)，外部变量使用较长的名字。
2.2 数据类型及长度
C  语言只提供了下列几种基本数据类型:
char             字符型，占用一个字节，可以存放本地字符集中的一个字符
int             整型，通常反映了所用机器中整数的最自然长度
float             单精度浮点型
double             双精度浮点型
此外，还可以在这些基本数据类型的前面加上一些限定符。short 与 long 两个限定符 用于限定整型:
short int sh;
long int counter;
在上述这种类型的声明中，关键字 int 可以省略。通常很多人也习惯这么做。
short 与 long 两个限定符的引入可以为我们提供满足实际需要的不同长度的整型数。 int 通常代表特定机器中整数的自然长度。short 类型通常为 16 位，1ong 类型通常为 32 位，int 类型可以为 16 位或 32 位。各编译器可以根据硬件特性自主选择合适的类型长度， 但要遵循下列限制:short 与 int 类型至少为 16 位，而 long 类型至少为 32 位，并且 short 类型不得长于 int 类型，而 int 类型不得长于 long 类型。
类型限定符 signed 与 unsigned 可用于限定 char 类型或任何整型。unsigned 类型 的数总是正值或 0，并遵守算术模 2
n
 定律，其中 n 是该类型占用的位数。例如，如果 char 对 象占用 8 位，那么 unsigned char 类型变量的取值范围为 0255，而 signed char 类型 变量的取值范围则为•128127(在采用对二的补码的机器上)。不带限定符的 char 类型对象 是否带符号则取决于具体机器，但可打印字符总是正值。
long double 类型表示高精度的浮点数。同整型一样，浮点型的长度也取决于具体的实 现。float、double 与 long double 类型可以表示相同的长度，也可以表示两种或三种不 同的长度。
有关这些类型长度定义的符号常量以及其它与机器和编译器有关的属性可以在标准头文 件与中找到，这些内容将在附录 B 中讨论。
练习 2•1 编写一个程序以确定分别由 signed 及 unsigned 限定的 char、short、 int 与 long 类型变量的取值范围。采用打印标准头文件中的相应值以及直接计算两种方式实 现。后一种方法的实现较困难一些，因为要确定各种浮点类型的取值范围。
2.3 常量
类似于 1234 的整数常量属于 int 类型。long 类型的常量以字母 l 或 L 结尾，如 123456789L。如果一个整数太大以至于无法用 int 类型表示时，也将被当作 long 类型处 理。无符号常量以字母 u 或 U 结尾。后缀 ul 或 UL 表明是 unsigned long 类型。
浮点数常量中包含一个小数点(如 123.4)或一个指数(如 1e•2)，也可以两者都有。 没有后缀的浮点数常量为 double 类型。后缀 f 或 F 表示 float 类型，而后缀 l 或 L 则表 示 long double 类型。
整型数除了用十进制表示外，还可以用八进制或十六进制表示。带前缀 0 的整型常量表 示它为八进制形式;前缀为 0x 或 0X，则表示它为十六进制形式。例如，十进制数 31 可以写 成八进制形式 037，也可以写成十六进制形式 0x1f 或 0X1F。八进制与十六进制的常量也可 以使用后缀 L 表示 long 类型，使用后缀 U 表示 unsigned 类型。例如，0XFUL 是一个 unsigned long 类型(无符号长整型)的常量，其值等于十进制数 15。
一个字符常量是一个整数，书写时将一个字符括在单引号中，如，'x'。字符在机器字符 集中的数值就是字符常量的值。例如，在 ASCII 字符集中，字符'0'的值为 48，它与数值 0 没有关系。如果用字符'0'代替这个与具体字符集有关的值(比如 48)，那么，程序就无需关 心该字符对应的具体值，增加了程序的易读性。字符常量一般用来与其它字符进行比较，但 也可以像其它整数一样参与数值运算，
某些字符可以通过转义字符序列(例如，换行符\n)表示为字符和字符串常量。转义字 符序列看起来像两个字符，但只表示一个字符。另外，我们可以用
'\ooo'
表示任意的字节大小的位模式。其中，ooo 代表 13 个八进制数字(0…7)。这种位模式还 可以用
'\xhh'
表示，其中，hh 是一个或多个十六进制数字(0…9，a…f，A…F)。因此，我们可以按照下 列形式书写语句:
#define VTAB '\013'              /* ASCII vertical tab */
#define BELL '\007'              /* ASCII bell character */
上述语句也可以用十六进制的形式书写为:
#define VTAB '\xb'              /* ASCII vertical tab */
#define BELL '\x7'              /* ASCII bell character */ ANSI C 语言中的全部转义字符序列如下所示:
\a
响铃符
\\
反斜杠
\b
回退符
\?
问号
\f
换页符
\'
单引号
\n
换行符
\"
双引号
\r
回车符
\ooo
八进制数
\t
横向制表符
\xhh
十六进制数
\v
纵向制表符
字符常量'\0'表示值为 0 的字符，也就是空字符(null)。我们通常用'\0'的形式代替 0， 以强调某些表达式的字符属性，但其数字值为 0。
常量表达式是仅仅只包含常量的表达式。这种表达式在编译时求值，而不在运行时求值。 它可以出现在常量可以出现的任何位置，例如:
#define MAXLINE 1000 char line[MAXLINE+1];
或
#define LEAP 1 /* in leap years */
int days[31+28+LEAP+31+30+31+30+31+31+30+31+30+31];
字符串常量也叫字符串字面值，是用双引号括起来的 0 个或多个字符组成的字符序列。 例如:
"I am a string"