### ISO 9798-3 Diffie-Hellman Key Exchange

#### 3. Protocol Overview
We present the application of our framework to the ISO 9798-3 protocol, a variant of the Diffie-Hellman key exchange. This protocol has been proven to be universally composable (UC) in [13]. Our work extends the security proof to include scenarios where long-term shared secrets are used, which was not covered in the original UC proof.

**Figure 4: ISO 9798-3 Diffie-Hellman Key Exchange**

| Initiator (I) | Receiver (R) |
|---------------|--------------|
| \( \text{sk}_I, a_i \) | \( \text{sk}_R, b_i \) |
| \( \text{pk}(\text{sk}_I), g^{a_i} \) | \( \text{pk}(\text{sk}_R), g^{b_i}, \text{sign}((g^{a_i}, g^{b_i}, \text{pk}(\text{sk}_I)), \text{sk}_R) \) |
| \( \text{sign}((g^{b_i}, g^{a_i}, \text{pk}(\text{sk}_R)), \text{sk}_I) \) | |

#### 4. Basic Diffie-Hellman Key Exchange
The ISO 9798-3 protocol is a variant of the Diffie-Hellman key exchange. We use our framework to extend the security proof to include long-term shared secrets. The protocol is depicted in Figure 4, and we show how to instantiate the required values and oracles for the proof presented in Section 6.2. The formal proofs using the CCSA model [11] are provided in Appendix C.

Our decomposition and subsequent proofs demonstrate that the DDH key exchange can securely derive a secret key for any protocol that does not rely on the long-term secret used in the key exchange. The proof is modular, allowing it to be adapted to scenarios where the continuation protocol uses the long-term shared secret.

**Figure 5: ISO 9798-3 Diffie-Hellman Key Exchange in Pi Calculus (omitted channels)**

\[
\begin{aligned}
&\text{Initiator (I)}: \\
&\quad \text{out}(\langle \text{pk}(\text{sk}_I), g^{a_i} \rangle) \\
&\quad \text{in}(\langle x_{\text{pk}}, x_B, x_m \rangle) \\
&\quad \text{if } \text{verify}(x_m, x_{\text{pk}}) = \langle g^{a_i}, x_B, \text{pk}(\text{sk}_I) \rangle \text{ then} \\
&\quad \quad \text{out}(\text{sign}(\langle x_B, g^{a_i}, x_{\text{pk}} \rangle, \text{sk}_I)) \\
&\quad \quad \text{let } k_I = x_{a_i} \text{ in } _I \\
&\quad \text{else if } x_B \neq g^{b_0} \text{ then } \bot \\
&\quad \text{else if } x_B \notin \{g^{b_i}\}_{i \geq 1} \text{ then } \bot \\
&\quad \text{else out}(\langle k_I, g^{a_0}, x_B \rangle) \\
&\text{Receiver (R)}: \\
&\quad \text{out}(\langle \text{pk}(\text{sk}_R), g^{b_i}, \text{sign}(\langle g^{a_i}, g^{b_i}, \text{pk}(\text{sk}_R) \rangle, \text{sk}_R) \rangle) \\
&\quad \text{in}(x_m) \\
&\quad \text{if } \text{verify}(x_m, x_{\text{pk}}) = \langle g^{b_i}, g^{a_i}, \text{pk}(\text{sk}_R) \rangle \text{ then} \\
&\quad \quad \text{let } k_R = x_{b_i} \text{ in } _R \\
&\quad \text{else if } x_A \neq g^{a_0} \text{ then } \bot \\
&\quad \text{else if } x_A \notin \{g^{a_i}\}_{i \geq 1} \text{ then } \bot \\
&\quad \text{else out}(\langle k_R, g^{b_0}, x_A \rangle)
\end{aligned}
\]

#### 5. Security Conditions
To apply the decomposition from Section 6.2, we need to find suitable identities and local session identifiers. The identity of each party is its long-term secret key, so we use \(\text{sk}_I\) and \(\text{sk}_R\) as \(\text{id}_I\) and \(\text{id}_R\). Each session of the key exchange instantiates a fresh Diffie-Hellman share, which serves as a local session identifier. We use \(g^{a_i}\) and \(g^{b_i}\) as \(\text{lsid}_I\) and \(\text{lsid}_R\).

The tagging function \(T\) must satisfy the following conditions:
- **K-1**: For all \(1 \leq i \leq N\), \(\nu a_i, \text{sk}_I, b_i, \text{sk}_R\), the combined output of both parties is \(OT\)-simulatable.
- **K-2**: The combined output of both parties is indistinguishable from an ideal key.
- **K-3**: The set \(\{g^{a_i}, g^{b_i}\}_{i \geq 1}\) is disjoint from the support of \(OP, Q\).

#### 6. Implicit Tagging
We extend the tagging function \(T\) to depend on a second argument of arbitrary length, yielding \(T(m, s)\). The corresponding signing oracle is denoted \(O_{\text{sign}}^{T, \text{sk}, s}\). The implicit tagging functions \(T^I\) and \(T^R\) are defined as follows:

\[
\begin{aligned}
T^I(m, \{g^{a_i}, g^{b_i}\}_{i \geq 1}) &:= \exists s \in \{a_i\}_{i \geq 1}, \exists m_1, m_2. \, m = (m_1, g^s, m_2) \\
T^R(m, \{g^{a_i}, g^{b_i}\}_{i \geq 1}) &:= \exists s \in \{b_i\}_{i \geq 1}, \exists m_1, m_2. \, m = (m_1, g^s, m_2)
\end{aligned}
\]

These tagging functions ensure that all messages signed by the two parties follow the required pattern.

#### 7. Extension to Key Confirmations
We show how our compositional framework can be used to prove the security of a key exchange with key confirmation. The key is derived in the first part of the protocol and then used in the second part. The security conditions are modified to include the key confirmation phase.

**Conditions:**
- **S-1**: The key confirmation phase is \(OP, Q\)-simulatable.
- **S-2**: The key exchange up to the key confirmation is \(O_{\text{ke}}\)-simulatable.
- **P-1**: The continuation protocol is secure even in the presence of key confirmation messages.

#### 8. Application to SSH
SSH [12] is a widely used protocol for remote login. An interesting feature of SSH is the use of signatures for authentication. Our framework can be applied to analyze the security of SSH, especially in scenarios involving long-term shared secrets.

**Figure 6: Simplified SSH Key Exchange**

| Platform | Server |
|----------|--------|
| \(\text{sk}_P, a_i\) | \(g^{a_i}\) |