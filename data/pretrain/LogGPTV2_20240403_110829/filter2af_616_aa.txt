原文链接：  
原作者：Moritz Jodeit  
译：xd0ol1 (知道创宇404安全实验室)
这里为前3部分的翻译，不对之处还望多多指正:D
### 1 简介
运行在Windows 10上的最新版Internet Explorer
11中加入了大量的漏洞利用缓解措施，试图放缓攻击者的利用脚步，虽然微软最近还在大肆宣传他们的旗舰浏览器Edge，但在漏洞利用的保护上可以发现许多出现在Edge上的方案同样应用到了最新版的Internet
Explorer
11中。这些措施的目的说到底只有一个，那就是尽可能的增加exploit开发的难度和时长。单就堆和内存保护来说，那些经常需要绕过的就有ASLR、DEP以及CFG。如果你能想办法绕过所有的这些防护，那么你就有机会去实现远程代码的执行，同时你还需要考虑如何进行沙箱的逃逸，这就要求用到更多的利用方法了，并且对于内核漏洞的情况你还会碰到内核利用方面相关的保护措施，例如内核态DEP、KASLR、SMEP、空指针解引用保护等。当然，如果你还想在开启微软EMET（Enhanced
Mitigation Experience Toolkit）保护的情况下继续进行漏洞的利用，那么事情就变得更有意思了。
虽然上述种种让exploit的开发过程变得很困难，但借助合适的漏洞也是可以不需要过多考虑其中的大部分保护就能写出可行利用的，特别是如果你不按标准套路那样以shellcode的方式而是通过重用浏览器内部已有函数的方式去完成远程代码的执行。
本文将详细讨论我们发现的一个关于Internet Explorer 11中JavaScript实现方面的漏洞，以及我们如何成功借此写出一个能在Windows
10的IE 11（64位并启用EPM）上可靠利用的exploit，这其中包括了沙箱的逃逸和一种绕过当前最新EMET
5.5版本的方法，而且根本就不需要执行任何的shellcode或ROP代码。
作为微软“Mitigation Bypass
Bounty”计划的一部分，我们凭借此工作获得了最高奖金10万美元，本文描述了其中用到的所有漏洞和技术，当然，这仅是我们提交内容中的一部分。
文中的分析是在打好补丁（2016.02）的Windows 10（10.0.10586）系统下进行的，并且如果不再另行声明的话都是基于的64位程序。
### 2 关于Typed Arrays的漏洞
本部分将介绍我们为了在IE 11沙箱中执行初始化代码而利用到的漏洞，为了便于理解我们首先需要了解两个基本的JavaScript结构，即Web
Workers和Typed Arrays，这些内容会在接下来的两小节中讨论。
#### 2.1 Web Workers
首先，漏洞利用到了Web Workers[1]。Web Workers
API能允许Web内容在后台通过并发线程来执行JavaScript代码，需要注意，由于此并发线程是在另一全局上下文中运行的，因此它无法直接访问DOM。创建这样的worker是很简单的，只需将要执行的JavaScript文件名传给Worker()构造函数就行了。
对于主线程与worker线程间的通信，需要借助消息来传递，发送消息可以使用postMessage()[2]方法，而使用注册的onmessage事件则可以处理消息的接收。其中，postMessage()方法的第一个参数为要传输的对象，第二个参数是一可选对象数组，其所属权会从发送线程转移到发给的worker线程，此外，对象必须实现了Transferable[3]接口。
重点需要理解下所属权转移对象，它们在发送线程对应的上下文中将变得不可用（中性），而只能在接收的worker线程上下文中使用。
#### 2.2 Typed Arrays
Typed
arrays是类似数组的对象，它提供了访问原始二进制数据的方法，其实现介于“buffer”和“view”之间。而buffer是由ArrayBuffer[4]对象实现的，它存储着要访问的原始数据，但是，ArrayBuffer对象是不能直接用于访问数据的。
为了访问数据我们需要用到view，view可被认为是底层buffer的类型转换。所有常见数值类型的不同view都是可用的，如Uint8Array，Uint16Array或Uint32Array对象。
每个typed arrays对象相应的底层ArrayBuffer对象都为“buffer”属性，此属性是在构造typed
arrays时设置好的，并且后面无法再进行更改。
#### 2.3 漏洞细节
下面我们来看一下触发此漏洞的JavaScript代码：
    var array;
    function trigger() {
        /* Create an empty Worker */
        var worker = new Worker("empty.js");
        /* Create new Int8Array typed array */
        array = new Int8Array(0x42);
        /*
        * Transfer ownership of the underlying ArrayBuffer to the worker,
        * effectively neutering it in this process.
        */
        worker.postMessage(0, [array.buffer]);
        /* Give the memory a chance to disappear... */
        setTimeout("boom()", 1000);
    }
    function boom() {
        /* This writes into the freed ArrayBuffer object */
        array[0x4141] = 0x42;
    }
代码首先创建了一个新的web worker和typed arrays。之后，postMessage()方法会将先前与typed
arrays相关联的ArrayBuffer所属权转移给worker，这将使当前线程上下文中的ArrayBuffer不再可用，从而释放掉ArrayBuffer指向的内存空间。
但程序并不考虑当前上下文中仍然可访问的typed arrays是否还与ArrayBuffer相关联，所有通过typed
arrays进行读写ArrayBuffer的操作仍将访问已释放掉的内存。
这就很好玩了，因为通过改变创建的typed
arrays大小，我们能控制要释放的内存块大小，而后对于此释放空间上新申请的任意对象，我们就能获得完全的读写访问权了。因此，我们首先创建一个合适大小的typed
arrays，然后通过将ArrayBuffer所属权转移给worker的方式来释放当前上下文中的内存，最后创建目标对象重用此释放掉的内存块。
### 3 漏洞利用
为了利用这个漏洞，我们首先需要找到这么一个对象，通过对它的操作要能迈出利用的第一步。 我们先来看看ArrayBuffer的内存实际分配在哪里。
通过查看jscript9!Js::JavascriptArrayBuffer::Create方法我们可以知道代码实际上使用了malloc()函数来分配jscript9!Js::ArrayBuffer::ArrayBuffer()构造方法中的内存空间。
    push   24h
    mov    ecx, esi ; this
    call   Recycler::AllocFinalizedInlined
    push   ds:__imp__malloc ; void *(__cdecl *)(unsigned int)
    mov    esi, eax
    push   ebx ; struct Js::DynamicType *
    push   edi ; unsigned int
    mov    ecx, esi ; this
    call   Js::ArrayBuffer::ArrayBuffer
这意味着我们用来分配有用对象的那块释放掉的内存位于CRT堆上，这就相对减少了潜在有用对象的数目，因为像普通数组或typed
arrays那样的对象是分配在IE自定义堆上的。
#### 3.1 查找利用对象
为了找到一些可操作的有用对象，我们将记录所有使用RtlAllocateHeap()函数进行内存分配的操作。
    bp ntdll!RtlAllocateHeap "r $t0 = @rcx; r $t1 = @r8; gu; .printf \"Allocated %x bytes at %p on heap %x\\n\", @$t1, @rax, @$t0; g"
我们注意到，当创建大量的大数组对象时，Internet
Explorer将在CRT堆上分配一些大小相同的LargeHeapBlock对象。可以通过下面的断点进行观察：
    bp jscript9!LargeHeapBucket::AddLargeHeapBlock+0xee ".printf \"Created LargeHeapBlock %p\\n\", @rax; g"
这些对象构成了IE自定义堆的基础，并且存储有自定义堆上分配的大型堆空间的管理信息，其中与我们后续讨论相关的一些重要字段定义如下：
LargeHeapBlock对象中存储着一些有用的指针，其中，偏移量0x8处的指针指向IE自定义堆中的数据，对于通过创建多个大的Array对象来触发LargeHeapBlock对象分配的情况，该指针直接指向了此时分配的一个Array对象。
由于我们可以很容易的通过创建大量Array对象来触发LargeHeapBlock对象的分配，并且我们事先知道了创建的LargeHeapBlock对象大小，所以我们选择操作此对象。
#### 3.2 LargeHeapBlock对象的Corruption
由前文知道我们可以获得对CRT堆上LargeHeapBlock对象的读写访问权，我们还可以通过第一个QWORD字段确认是否真的在操作一个LargeHeapBlock对象，同时也能借此泄漏jscript9.dll模块的基址。下面的问题将是如何corrupt此对象以实现任意代码的执行。
在垃圾回收机制中，IE自定义堆上那些未使用的LargeHeapBlock对象将被收集起来，这个过程可以从下面LargeHeapBucket::SweepLargeHeapBlockList函数中的代码看到：
    do {
        next_heapblock = (struct LargeHeapBlock *)*((_QWORD *)current_heapblock + 8);
        lambda_cedc91d37b267b7dc38a2323cbf64555_::operator()((LargeHeapBucket **)&bucket, (__int64)current_heapblock);
        current_heapblock = next_heapblock;
    } while (next_heapblock);
此代码将遍历LargeHeapBlock对象链表，对于访问到的每个LargeHeapBlock对象都调用一次operator()操作。
在operator()函数内部将执行标准的双向链表节点删除操作，其中前驱指针在偏移0x58处，后继指针在偏移0x60处。下面列出的就是通常用到的删除操作算法，当然这还不是完整的：
    back = block->back;
    forward = block->forward;
    forward->back = back;
    back->forward = forward;
这种删除操作没有提供类似现代堆分配中实现的任何保护机制，因此，通过操作LargeHeapBlock对象的前驱和后继指针我们可以触发对任意地址的任意QWORD写操作。我们唯一的限制是写入的值（后继指针）必须是一个有效的地址，其在后面存储前驱指针时会用到。
#### 3.3 对内存的精心布局
正如前面部分所述，通过corrupt
LargeHeapBlock对象在偏移0x58处的前驱指针和0x60处的后继指针，我们能够实现对所选地址的写入操作。但为了能够读写完整的地址空间以及泄露任意的JavaScript对象，我们需要构建一个更巧妙的内存布局。
Typed
arrays是一个很有利用价值的目标，因其存储了指向实际数据缓冲区的内部指针以及该缓冲区的大小，通过重写数据缓冲区的指针和大小，我们就可以轻松获得对任意地址的读写访问权。当然了，需要先泄漏内存中typed