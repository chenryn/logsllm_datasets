for A14). We are currently investigating a more sophisticated
fault injector design that can also work with a high bit in A14.
On generalizing our methodology. All our experiments
were performed on Intel-based architectures of a cloud
provider’s compute nodes. However, cloud providers can use
servers based on other types of architectures, such as AMD
or ARM. Furthermore, in the cloud, DRAM can be found in
many places other than compute nodes, such as storage nodes,
network cards, switches, middleboxes, and so on. Although
Figure 17: Number of bit ﬂips in a representative row for
four different data patterns: all 1s (0xFFF...), two-third 1s
(0xB6DB6D...), one-third 1s (0x492492...), all 0s (0x000...).
than vendor #1. Figure 18 shows the number of bit ﬂips for
vendor #2 for the same aggressor rows as before: 0x11410
and 0x11411. When the aggressor row is 0x11410, the whole-
row victim (0x11411) has only 42.1% of its bits ﬂipped, while
the half-row victims (0x11409 and 0x11413) have 25.9% and
21% of their bits ﬂipped, respectively.
Further, the map differs from one vendor to another. Ven-
dor #1’s row 0x11411 has two rows wholly adjacent, rows
0x11410 and 0x11412 (Figure 14). Instead, for vendor #2,
this row has whole-row adjacency with row 0x11410 but only
half-row with row 0x11412 and the other half with 0x11408.
Figure 19 shows that vendor #3 has far fewer bit ﬂips than
both other vendors. When the aggressor is row # 0x11410,
the adjacent rows have only about 0.08% of their bits ﬂipped
(roughly two orders of magnitude fewer ﬂips than vendor #1).
When the aggressor is row # 0x11411, the adjacent rows have
about 3% of their bits ﬂipped (one order of magnitude fewer
ﬂips than vendor #1).
To understand whether the lower rate of bit ﬂips for vendors
#2 and #3 can be attributed to different encoding schemes, we
repeated these experiments with a data pattern of all 0s. We
found that even fewer bits ﬂip. For all three vendors, most bits
in victim rows ﬂip when seeded with a value of 1.
In order to pinpoint the reasons why vendor #2 and #3’s
DIMMs were more resilient than vendor #1’s DIMMs, we
decoded the part numbers of each DIMM from each vendor,
checking for differences in lithography. We found that each
vendor used a different
lithography process; vendor #1’s
process had the highest density, vendor #2 had lower density,
and vendor #3 had the lowest one. These results suggest
that increasing DRAM density increases the probability of
ﬂipping bits in a Rowhammer attack. Previous work also found
different rates of bit ﬂips in different DIMMs [69], [105].
VI. OPERATIONAL ASPECTS OF DRAM TESTING
METHODOLOGY
Our DRAM testing methodology uses two clﬂushopt in-
structions in a loop to hammer DRAM. For each row to test,
we use address maps to identify adjacent rows. We seed the
aggressor row with 0s and the victims with 1s. If the tested
row has two adjacent full-rows, we ﬁnd two virtual addresses
that map to each of these rows, to seed our two cache line
ﬂush instructions. For each row, we run the test for 128ms,
corresponding to twice the duration of a refresh interval. In this
way, we ensure that our tests span at least one entire refresh
interval. At the end of the test, we check whether the tested
row has any of its bits ﬂipped to 0. When any adjacent row
is a half-row, we perform the experiment multiple times, once
for each half-row.
13
0xFFFFFF0xB6DB60x492490x00000DataPattern020,00040,00060,000#ofBitsFlippedperRow1→00→1(a) Victim rows: 0x11411, 0x11409 and 0x11413.
(b) Victim rows: 0x11410, 0x11408, and 0x11412.
Figure 18: No. of bit ﬂips on rows with neighboring logical row numbers for vendor #2.
(a) Victim rows: 0x1140F and 0x11411.
(b) Victim rows: 0x11410 and 0x11412.
Figure 19: No. of bit ﬂips on rows with neighboring logical row numbers for vendor #3.
our results do not directly transfer to other types of architec-
tures or cloud equipment, we believe that our methodology
can be used directly or adapted to create worst-case testing
conditions.
Additional variables. Our methodology hammers one row
for 128ms, a period of time equal to two refresh intervals.
This is the minimal time interval to ensure that testing one
row spans at least one entire refresh interval from start to end.
A more thorough methodology would determine the duration
needed to test a row to declare it safe.
In all our experiments, the data values stored in the aggres-
sor rows are the complement of the values stored in the rest
of the bank, a strategy inspired by previous work [18]. We
have not experimented with storing different data values in
the aggressor row.
VII. RELATED WORK
Many prior works build upon the Rowhammer phe-
nomenon [88], [69], [89] for both attacks [32], [101], [97],
[110], [37], [25], [36], [106], [83], [114], [13], [96], [11],
[59], [95], [2], [105], [94], [16], [18], [10], [118], [12], [22],
[62], [76] and defenses [4], [39], [82], [24], [5], [67], [102],
[14], [56], [104], [29], [111], [80], [15], [7], [6], [9], [8], [34],
[74], [58], [30], [63], [73], [99], [112]. Few of these works
provide insight into the difﬁculty behind mounting an attack on
a real system, and none develop a methodology for thoroughly
proﬁling a DIMM for Rowhammer vulnerability. We discuss
the most closely related works to ours. A detailed survey of a
very large number of Rowhammer related works can be found
in [89].
Rowhammer Testing Platforms. Kim et al. [69] ﬁrst stud-
ied the Rowhammer disturbance effect on DDR3 using a cus-
tom FPGA-based memory controller [38], [103] that directly
interfaces with and sends DDR3 commands to DRAM devices.
They [69] also study Rowhammer on Intel and AMD plat-
forms. [23] implements an OS for testing memory devices on
Raspberry Pi platforms. Drammer [110], [21], [20], an open-
source Android app, tests mobile devices for Rowhammer
and gathers data from users to characterize how widespread
Rowhammer is. MemTest86 [93], software that tests DRAM
for many types of reliability issues, added Rowhammer testing.
[116] presents a methodology for injecting a Rowhammer
attack that is largely complementary to ours because it focuses
on ways to place a victim page into a vulnerable memory
location. [116] also emulates Rowhammer failures and evalu-
ates them by injecting errors into an OS kernel. While these
previous works provide insight into studying Rowhammer in
real DRAM devices,
they either do not create worst-case
testing conditions or do not work in end-to-end systems like
our cloud servers.
Physical Row Adjacency. Other works attempt to reverse
engineer the DRAM address mapping with various techniques,
such as side-channels [94], [64], software fault injection [105],
or hardware fault injection [18], [53]. Section III-C discusses
their shortcomings in depth.
A number of other works [115], [117], [91], [98] sidestep
the address translation issue and study the Rowhammer phe-
nomenon directly at the circuit level with simulations. Unfor-
tunately, these works do not allow us to study Rowhammer
characteristics on real devices.
Optimal Rowhammer Access Pattern. Previous works
used a plethora of instruction sequences to test for Rowham-
mer [69], [32], [114], [13], [96], [11], [37], [94], [97], [110],
[77], [59], [2], [35], [36], [105]. These works measure an
instruction sequence’s efﬁciency by quantifying the number of
Rowhammer failures it induces on a set of DIMMs. In contrast,
our work (1) characterizes an instruction sequence’s rate of
ACTs, (2) describes and evaluates the factors that prevent
the sequence from achieving the optimal ACT rate, and (3)
proposes a new instruction sequence that is near-optimal on
Skylake, a platform commonly used in modern cloud servers.
VIII. CONCLUSIONS
This paper presents an end-to-end methodology for rig-
orously evaluating the susceptibility of cloud servers to
Rowhammer attacks. Our methodology creates worst-case
DRAM testing conditions by overcoming two main challenges:
(1) generating the highest rate of row activation commands
14
0x114080x114090x1140A0x1140B0x1140C0x1140D0x1140E0x1140F0x114100x114110x114120x114130x114140x114150x11416LogicalRowNumber100101103105#ofBitsFlippedAggressorrow:0x114100x114060x114070x114080x114090x1140A0x1140B0x1140C0x1140D0x1140E0x1140F0x114100x114110x114120x114130x11414LogicalRowNumber100101103105#ofBitsFlippedAggressorrow:0x114110x1140B0x1140C0x1140D0x1140E0x1140F0x114100x114110x114120x114130x114140x114150x114160x114170x114180x11419LogicalRowNumber100101103105#ofBitsFlippedAggressorrow:0x114100x1140B0x1140C0x1140D0x1140E0x1140F0x114100x114110x114120x114130x114140x114150x114160x114170x114180x11419LogicalRowNumber100101103105#ofBitsFlippedAggressorrow:0x11411to DRAM, and (2) testing rows whose cells are physically
adjacent inside a DRAM device. Cloud providers can adapt our
techniques to test their infrastructure in practice and determine
whether a Rowhammer attack can cause DRAM bits to ﬂip.
Applying our methodology to multiple generations of
servers from a major cloud provider produced noteworthy
results. First, none of the instruction sequences used in
previous work to mount Rowhammer attacks create near-
optimal row activation rates. Second, we constructed a new
instruction sequence that generates a near-optimal rate of row
activations on Skylake and Cascade Lake. This instruction
sequence leverages microarchitectural side-effects to create
row activations and uses no explicit memory accesses. Third,
we designed and implemented a fault
injector capable of
reverse engineering row adjacency inside any DRAM device
on a DIMM. Finally, we used our fault injector to reverse
engineer the physical adjacency of DIMMs sourced from three
major DRAM vendors. Our results show that logical rows do
not always map linearly inside DRAM devices.
Acknowledgments. We would like to thank our shep-
herd, Yinqian Zhang, our point-of-contact reviewer, Christian
Rossow, and the anonymous reviewers for their feedback
on our paper. We received huge support and feedback from
the Azure Cloud Server Infrastructure and Azure Networking
teams, especially from Kushagra Vaid, Dave Maltz, Tanj Ben-
nett, Rama Bhimanadhuni, Tim Cowles, Kelley Dobelstein,
Sriram Govindan, Terry Grunzke, Sushant Gupta, Bryan Kelly,
Phyllis Ng, Jitu Padhye, Joseph Piasecki, Andrew Putnam,
Shachar Raindel, Mark Shaw, and Lit Wong. We thank Barbara
Aichinger from FuturePlus for her valuable help with the
FS2800 bus analyzer. We are grateful to Kaveh Razavi for
answering many questions on Rowhammer and sending us
DIMMs from his lab. We thank Stephen Dahl for his help
setting up our hardware lab. Finally, we greatly appreciate the
overall support of Victor Bahl.
[1] “Ramulator
Source
ramulator, 2019.
REFERENCES
Code,”
https://github.com/CMU-SAFARI/
[2] M. T. Aga, Z. B. Aweke, and T. Austin, “When Good Protections
go Bad: Exploiting anti-DoS Measures to Accelerate Rowhammer
Attacks,” in HOST, 2017.
[3] B. Aichinger, “DDR Memory Errors Caused by Row Hammer,” in
HPEC, 2015.
[4] Apple Inc., “About the security content of Mac EFI Security Update
2015-001,” https://support.apple.com/en-us/HT204934, June 2015.
[5] Z. B. Aweke, S. F. Yitbarek, R. Qiao, R. Das, M. Hicks, Y. ORren,
and T. Austin, “ANVIL: Software-Based Protection Against Next-
Generation Rowhammer Attacks,” in ASPLOS, 2016.
[6] K. S. Bains and J. B. Halbert, “Distributed Row Hammer Tracking,”
Patent App. US 13/631,781, 2014.
[7] ——, “Row Hammer Monitoring Based on Stored Row Hammer
Threshold Value,” Patent No. US 2015/9,032,141, 2015.
[8] K. S. Bains, J. B. Halbert, C. Mozak, S. Theodore, and Z. Greenﬁeld,
“Row Hammer Refresh Command,” US Patent 9,117.544, 2016.
[9] K. S. Bains, J. B. Halbert, S. Sah, and Z. Greenﬁeld, “Method,
Apparatus and System for Providing a Memory Refresh,” Patent App.
US 13/625,741, 2014.
[10] A. Barenghi, L. Breveglieri, N. Izzo, and G. Pelosi, “Software-only
Reverse Engineering of Physical DRAM Mappings for Rowhammer
Attacks,” in IVSW, 2018.
[11] S. Bhattacharya and D. Mukhopadhyay, “Curious Case of RowHam-
mer: Flipping Secret Exponent Bits using Timing Analysis,” in CHES,
2016.
[12] ——, “Advanced Fault Attacks in Software: Exploiting the Rowham-
mer Bug,” Computer Architecture and Design Methodologies, 2018.
2018.
[13] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida, “Dedup Est Machina:
Memory Deduplication as an Advanced Exploitation Vector,” in IEEE
S&P, 2016.
[14] F. Brasser, L. Davi, D. Gens, C. Liebchen, and A.-R. Sadeghi, “CAn’t
Touch This: Practical and Generic Software-only Defenses Against
RowHammer Attacks,” USENIX Sec., 2017.
[15] L. Bu, J. Dofe, Q. Yu, and M. A. Kinsy, “SRASA: a Generalized The-
oretical Framework for Security and Reliability Analysis in Computing
Systems,” Journal of Hardware and Systems Security (HaSS), 2018.
[16] S. Carre, M. Desjardins, A. Facon, and S. Guilley, “OpenSSL Bellcore’s
Protection Helps Fault Attack,” in DSD, 2018.
[17] K. K.-W. Chang, D. Lee, Z. Chishti, A. R. Alameldeen, C. Wilkerson,
Y. Kim, and O. Mutlu, “Improving DRAM Performance by Paralleliz-
ing Refreshes with Accesses,” in HPCA, 2014.
[18] L. Cojocar, K. Razavi, C. Giuffrida, and H. Bos, “Exploiting Correcting
Codes: On the Effectiveness of ECC Memory Against Rowhammer
Attacks,” in IEEE S&P, 2019.
[19] Distributed Management Task Force, “System Management BIOS (ver.
3),” https://www.dmtf.org/standards/smbios, 2019.
[20] Drammer App Source Code, https://github.com/vusec/drammer-app,
[21] Drammer Source Code, https://github.com/vusec/drammer, 2016.
[22] A. P. Fournaris, L. Pocero Fraile, and O. Koufopavlou, “Exploiting
Hardware Vulnerabilities to Attack Embedded System Devices: A
Survey of Potent Microarchitectural Attacks,” Electronics, vol. 6, 2017.
[23] P. Francis-Mezger and V. M. Weaver, “A Raspberry Pi Operating Sys-
tem for Exploring Advanced Memory System Concepts,” in MEMSYS,
2018.
[24] T. Fridley and O. Santos, “Mitigations Available for the DRAM Row
Hammer Vulnerability,” http://blogs.cisco.com/security/mitigations-
available-for-the-dram-row-hammer-vulnerability, March 2015.
[25] P. Frigo, C. Giuffrida, H. Bos, and K. Razavi, “Grand Pwning Unit:
Accelerating Microarchitectural Attacks with the GPU,” in IEEE S&P,
2018.
[26] FuturePlus Systems, “JEDEC DDR4 Revision B Spec: What’s
https://www.futureplus.com/jedec-ddr4-revision-b-spec-
different?”
whats-different/, 2017.
[27] ——,
“The DDR Detective,”
http://futureplus.com/datasheets/
FS2800A%20DDR%20Detective%20Data%20Sheet.pdf, 2018.
[28] R. Gill, “Everything you always wanted to know about sdram
memory but were afraid to ask,” http://www.anandtech.com/show/
3851/everything-you-always-wanted-to-know-aboutsdram-memory-
but-were-afraid-to-ask, 2010.