channel.send（'yes\n'）
buff=''
channel.send（password+'\n'）
buff=''
while not buff.endswith（'# '）：
resp = channel.recv（9999）
if not resp.find（passinfo）==-1：
print 'Error info： Authentication failed.'
channel.close（）
ssh.close（）
sys.exit（）
buff += resp
print buff
channel.close（）
ssh.close（）
运行结果如下，如目标主机/data/nginx_access_hd.tar.gz存在，则说明文件已
成功上传。
# python /home/test/paramiko/simple4.py
nginx_access.tar.gz 100% 1590KB 1.6MB/s 00：00
当然，整合以上两个示例，再引入主机清单及功能配置文件，可以实现更加
灵活、强大的功能，大家可以自己动手，在实践中学习，打造适合自身业务环
境的自动化运营平台。
参考提示 6.2节和6.3节常用类说明与应用案例参考
http://docs.paramiko.org/en/1.13/官网文档。
第7章 系统批量运维管理器Fabric详解
Fabric是基于Python（2.5及以上版本）实现的SSH命令行工具，简化了SSH
的应用程序部署及系统管理任务，它提供了系统基础的操作组件，可以实现本
地或远程shell命令，包括命令执行、文件上传、下载及完整执行日志输出等功
能。Fabric在paramiko的基础上做了更高一层的封装，操作起来会更加简单。
Fabric官网地址为：http://www.fabfile.org，目前最高版本为1.8。
7.1 Fabric的安装
Fabric支持pip、easy_install或源码安装方式，很方便解决包依赖的问题，具
体安装命令如下（根据用户环境，自行选择pip或easy_install）：
pip install fabric
easy_install fabric
Fabric依赖第三方的setuptools、Crypto、paramiko包的支持，源码安装步骤
如下：
# yum -y install python-setuptools
# wget https：//pypi.python.org/packages/source/F/Fabric/Fabric-
1.8.2.tar.gz --no-check-certificate
# tar -zxvf Fabric-1.8.2.tar.gz
# cd Fabric-1.8.2
# python setup.py install
校验安装结果，如果导入模块没有提示异常，则说明安装成功：
# python
Python 2.6.6 （r266：84292， Jul 10 2013， 22：48：45）
[GCC 4.4.7 20120313 （Red Hat 4.4.7-3）] on linux2
Type "help"， "copyright"， "credits" or "license" for more information.
>>> import fabric
>>>
官网提供了一个简单的入门示例：
【/home/test/fabric/fabfile.py】
#！/usr/bin/env python
from fabric.api import run
def host_type（）： #定义一个任务函数，通过run方法实现远程执行‘uname -s’命令
run（'uname -s'）
运行结果如图7-1所示。
图7-1 程序执行结果
其中，fab命令引用默认文件名为fabfile.py，如果使用非默认文件名称，则需
通过“-f”来指定，如：fab-H SN2013-08-021，SN2013-08-022-f host_type.py
host_type。如果管理机与目标主机未配置密钥认证信任，将会提示输入目标主机
对应账号登录密码。
7.2 fab的常用参数
fab作为Fabric程序的命令行入口，提供了丰富的参数调用，命令格式如下：
fab [options] [：arg1，arg2=val2，host=foo，hosts='h1；h2'，...] ...
下面列举了常用的几个参数，更多参数可使用fab-help查看。
·-l，显示定义好的任务函数名；
·-f，指定fab入口文件，默认入口文件名为fabfile.py；
·-g，指定网关（中转）设备，比如堡垒机环境，填写堡垒机IP即可；
·-H，指定目标主机，多台主机用“，”号分隔；
·-P，以异步并行方式运行多主机任务，默认为串行运行；
·-R，指定role（角色），以角色名区分不同业务组设备；
·-t，设置设备连接超时时间（秒）；
·-T，设置远程主机命令执行超时时间（秒）；
·-w，当命令执行失败，发出告警，而非默认中止任务。
有时候我们甚至不需要写一行Python代码也可以完成远程操作，直接使用命
令行的形式，例如：
# fab -p Ksdh3458d（密码） -H 192.168.1.21，192.168.1.22 -- 'uname -s'
命令运行结果见图7-1。
7.3 fabfile的编写
fab命令是结合我们编写的fabfile.py（其他文件名须添加-f filename引用）来
搭配使用的，部分命令行参数可以通过相应的方法来代替，使之更加灵活，例
如“-H 192.168.1.21，192.168.1.22”，我们可以通过定义env.hosts来实现，
如“env.hosts=['192.168.1.21'，'192.168.1.22']”。fabfile的主体由多个自定义的任务
函数组成，不同任务函数实现不同的操作逻辑，下面详细介绍。
7.3.1 全局属性设定
evn对象的作用是定义fabfile的全局设定，支持多个属性，包括目标主机、用
户、密码、角色等，各属性说明如下：
·env.host，定义目标主机，可以用IP或主机名表示，以Python的列表形式定
义，如env.hosts=['192.168.1.21'，'192.168.1.22']。
·env.exclude_hosts，排除指定主机，如env.exclude_hosts=['192.168.1.22']。
·env.user，定义用户名，如env.user="root"。
·env.port，定义目标主机端口，默认为22，如env.port="22"。
·env.password，定义密码，如env.password='KSJ3548t7d'。
·env.passwords，与password功能一样，区别在于不同主机不同密码的应用场
景，需要注意的是，配置passwords时需配置用户、主机、端口等信息，如：
env.passwords = {
'PI:EMAIL：22'： 'SJk348ygd'，
'PI:EMAIL：22'： 'KSh458j4f'，
'PI:EMAIL：22'： 'KSdu43598'
}
·env.gateway，定义网关（中转、堡垒机）IP，如env.gateway='192.168.1.23'。
·env.deploy_release_dir，自定义全局变量，格式：env.+“变量名称”，如
env.deploy_release_dir、env.age、env.sex等。
·env.roledefs，定义角色分组，比如web组与db组主机区分开来，定义如下：
env.roledefs = {
'webservers'： ['192.168.1.21'， '192.168.1.22'， '192.168.1.23'， '192.168.1.24']，
'dbservers'： ['192.168.1.25'， '192.168.1.26']
}
引用时使用Python修饰符的形式进行，角色修饰符下面的任务函数为其作用
域，下面来看一个示例：
@roles（'webservers'）
def webtask（）：
run（'/etc/init.d/nginx start'）
@roles（'dbservers'）
def dbtask（）：
run（'/etc/init.d/mysql start'）
@roles （'webservers'， 'dbservers'）
def pubclitask（）：
run（'uptime'）
def deploy（）：
execute（webtask）
execute（dbtask）
execute（pubclitask）
在命令行执行#fab deploy就可以实现不同角色执行不同的任务函数了。
7.3.2 常用API
Fabric提供了一组简单但功能强大的fabric.api命令集，简单地调用这些API就
能完成大部分应用场景需求。Fabric支持常用的方法及说明如下：
·local，执行本地命令，如：local（'uname-s'）；
·lcd，切换本地目录，如：lcd（'/home'）；
·cd，切换远程目录，如：cd（'/data/logs'）；
·run，执行远程命令，如：run（'free-m'）；
·sudo，sudo方式执行远程命令，如：sudo（'/etc/init.d/httpd start'）；
·put，上传本地文件到远程主机，如：
put（'/home/user.info'，'/data/user.info'）；
·get，从远程主机下载文件到本地，如：
get（'/data/user.info'，'/home/root.info'）；
·prompt，获得用户输入信息，如：prompt（'please input user
password：'）；
·confirm，获得提示信息确认，如：confirm（"Tests
failed.Continue[Y/N]？"）；
·reboot，重启远程主机，如：reboot（）；
·@task，函数修饰符，标识的函数为fab可调用的，非标记对fab不可见，纯
业务逻辑；
·@runs_once，函数修饰符，标识的函数只会执行一次，不受多台主机影
响。
下面结合一些示例来帮助大家理解以上常用的API。
7.3.3 示例1：查看本地与远程主机信息
本示例调用local（）方法执行本地（主控端）命令，添加“@runs_once”修饰
符保证该任务函数只执行一次。调用run（）方法执行远程命令。详细源码如
下：
【/home/test/fabric/simple1.py】
#！/usr/bin/env python
from fabric.api import *
env.user='root'
env.hosts=['192.168.1.21'，'192.168.1.22']
env.password='LKs934jh3'
@runs_once #查看本地系统信息，当有多台主机时只运行一次
def local_task（）： #本地任务函数
local（"uname -a"）
def remote_task（）：
with cd（"/data/logs"）： #“with”的作用是让后面的表达式的语句继承当前状态，实现
run（"ls -l"） # “cd /data/logs && ls -l”的效果
通过fab命令分别调用local_task任务函数运行结果如图7-2所示。
图7-2 调用local_task任务函数运行结果
结果中显示了“[192.168.1.21]Executing task'local_task'”，但事实上并非在主机
192.168.1.21上执行任务，而是返回Fabric主机本地“uname-a”的执行结果。
调用remote_task任务函数的执行结果如图7-3所示。
图7-3 调用remote_task任务函数运行结果
7.3.4 示例2：动态获取远程目录列表
本示例使用“@task”修饰符标志入口函数go（）对外部可见，配
合“@runs_once”修饰符接收用户输入，最后调用worktask（）任务函数实现远程
命令执行，详细源码如下：
【/home/test/fabric/simple2.py】
#！/usr/bin/env python
from fabric.api import *
env.user='root'
env.hosts=['192.168.1.21'，'192.168.1.22']
env.password='LKs934jh3'
@runs_once #主机遍历过程中，只有第一台触发此函数
def input_raw（）：
return prompt（"please input directory name："，default="/home"）
def worktask（dirname）：
run（"ls -l "+dirname）
@task #限定只有go函数对fab命令可见
def go（）：
getdirname = input_raw（）
worktask（getdirname）
该示例实现了一个动态输入远程目录名称，再获取目录列表的功能，由于我
们只要求输入一次，再显示所有主机上该目录的列表信息，调用了一个子函数
input_raw（）同时配置@runs_once修饰符来达到此目的。
执行结果如图7-4所示。
图7-4 程序运行结果
7.3.5 示例3：网关模式文件上传与执行
本示例通过Fabric的env对象定义网关模式，即俗称的中转、堡垒机环境。定
义格式为“env.gateway='192.168.1.23'”，其中IP“192.168.1.23”为堡垒机IP，再结合
任务函数实现目标主机文件上传与执行的操作，详细源码如下：
【/home/test/fabric/simple3.py】
#！/usr/bin/env python
from fabric.api import *
from fabric.context_managers import *
from fabric.contrib.console import confirm
env.user='root'
env.gateway='192.168.1.23' #定义堡垒机IP，作为文件上传、执行的中转设备
env.hosts=['192.168.1.21'，'192.168.1.22']
#假如所有主机密码都不一样，可以通过env.passwords字典变量一一指定
env.passwords = {
'PI:EMAIL：22'： 'LKs934jh3'，
'PI:EMAIL：22'： 'LKs934jh3'，
'PI:EMAIL：22'： 'UI7384hg6' #堡垒机账号信息
}
lpackpath="/home/install/lnmp0.9.tar.gz" #本地安装包路径
rpackpath="/tmp/install" #远程安装包路径
@task
def put_task（）：
run（"mkdir -p /tmp/install"）
with settings（warn_only=True）：
result = put（lpackpath， rpackpath） #上传安装包
if result.failed and not confirm（"put file failed， Continue[Y/N]？"）：
abort（"Aborting file put task！"）
@task
def run_task（）： #执行远程命令，安装lnmp环境
with cd（"/tmp/install"）：
run（"tar -zxvf lnmp0.9.tar.gz"）
with cd（"lnmp0.9/"）： #使用with继续继承/tmp/install目录位置状态
run（"./centos.sh"）
@task
def go（）： #上传、安装组合
put_task（）
run_task（）
示例通过简单的配置env.gateway='192.168.1.23'就可以轻松实现堡垒机环境的
文件上传及执行，相比paramiko的实现方法简洁了很多，编写的任务函数完全不
用考虑堡垒机环境，配置env.gateway即可。
7.4 Fabric应用示例
下面介绍三个比较典型的应用Fabric的示例，涉及文件上传与校验、环境部
署、代码发布的功能，读者可以在此基础进行功能扩展，写出更加贴近业务场
景的工具平台。
7.4.1 示例1：文件打包、上传与校验
我们时常做一些文件包分发的工作，实施步骤一般是先压缩打包，再批量上
传至目标服务器，最后做一致性校验。本案例通过put（）方法实现文件的上
传，通过对比本地与远程主机文件的md5，最终实现文件一致性校验。详细源码
如下：
【/home/test/fabric/simple4.py】
#！/usr/bin/env python
from fabric.api import *
from fabric.context_managers import *
from fabric.contrib.console import confirm