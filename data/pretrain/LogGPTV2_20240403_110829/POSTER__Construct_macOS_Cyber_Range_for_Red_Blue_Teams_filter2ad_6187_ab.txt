### Log Analysis Tools

For log analysis, several tools are available, each with its own strengths. **Console.app** is more suitable for investigators who need to program, parse, or search through logs. On the other hand, **Consolation 3** is easier to use for manual analysis. The third tool, **UnifiedLogReader**, directly parses the unified log’s database files. This makes it a good choice when the live system is unavailable and only log files can be accessed. Our blue team toolkit includes these three tools to cater to different scenarios.

### Dynamic Monitoring Tools

To complement the static forensic tools, our blue team toolkit also integrates dynamic monitoring tools. These include built-in **dtrace** tools, **kemon** [3], **ProcessMonitor**, and **FileMonitor**. 

- **dtrace** can snoop function calls related to file operations and trace I/O events.
- **kemon** is a pre- and post-callback-based framework for macOS kernel monitoring, providing a powerful way to monitor process and file events.
- **ProcessMonitor** and **FileMonitor**, based on Apple’s new Endpoint Security Framework, provide essential runtime information such as process ID (PID), path, ancestor, arguments, code-signing, and timestamps.

However, **dtrace** and **kemon** require disabling System Integrity Protection (SIP) to function, making them difficult to deploy in real environments. In contrast, **ProcessMonitor** and **FileMonitor** utilize the built-in security framework and do not need SIP to be disabled. Note that the Endpoint Security Framework is only available from macOS 10.15 onwards, limiting its deployment in older systems.

### Malicious Activity Detection

After preparing the aforementioned tools, we move to the **Malicious Activity Detection** phase. Our framework provides basic pattern-matching rules to identify malicious activities, which are labeled with ATT&CK labels. Users can also define their own customized rules. These predefined and user-customized rules help investigators complete their tasks more effectively.

### Evaluation

In this section, we use our red team emulation tool to construct a complete APT storyline and demonstrate how our blue team toolkit can detect it.

#### Attack Scenario

1. **Initial Access**: The red team exploits CVE-2018-6574 to build a package on GitHub. Once the victim downloads and executes the malicious package, it copies itself to a hidden directory under the home directory and adds a plist file to register as a user-level LaunchAgent.
2. **Command and Control (C2)**: The malware connects to the C2 server through a socket. The red team uses shell commands to gather information about the victim, scans SSH configuration files, and copies itself to remote victims using the SSH keys found in the files.
3. **Privilege Escalation**: The red team monitors the victim through process discovery and screenshots. They use privilege escalation plugins, such as an AppleScript, to pop up a spoofed privileged helper with a Settings icon. Once the user authorizes, the system-level red team emulation tool is executed, registering itself as a system-level LaunchDaemon. The red team can then perform advanced operations as root through shell commands.

#### Evaluation Results

Table 1 presents the evaluation results, listing the techniques used in the attack scenario and the detection results of our blue team toolkit. The columns "Red Team" and "Blue Team" summarize the support status of our attack and defense tools, respectively. The blue team's detection heavily depends on the completeness of available filter rules. Therefore, the unsupported parts are due to the fact that most existing detection rules mainly focus on the discovery stage. Although our framework records extensive system information in log files, distinguishing malicious artifacts from normal ones during the initial access and privilege escalation stages remains challenging. This issue is a major focus for future work.

| Red Team | Blue Team | ATT&CK Techniques |
|----------|-----------|-------------------|
| X        | X         | T1195 Supply Chain Compromise |
| X        | X         | T1155 AppleScript |
| X        | X         | T1059 Command-Line Interface |
| X        | X         | T1204 User Execution |
| X        | X         | T1064 Scripting |
| X        | X         | T1158 Hidden Files and Directories |
| X        | X         | T1159 Launch Agent |
| X        | X         | T1160 Launch Daemon |
| X        | X         | T1514 Elevated Execution with Prompt |
| X        | X         | T1144 Gatekeeper bypass |
| X        | X         | T1081 Credentials in Files |
| X        | X         | T1145 Private Keys |
| X        | X         | T1083 File and Directory Discovery |
| X        | X         | T1057 Process Discovery |
| X        | X         | T1033 System Owner/User Discovery |
| X        | X         | T1049 System Network Connections Discovery |
| X        | X         | T1069 Permission Groups Discovery |
| X        | X         | T1082 System Information Discovery |
| X        | X         | T1087 Account Discovery |
| X        | X         | T1135 Network Share Discovery |
| X        | X         | T1201 Password Policy Discovery |
| X        | X         | T1105 Remote File Copy |
| X        | X         | T1021 Remote Services |
| X        | X         | T1005 Data from Local System |
| X        | X         | T1113 Screen Capture |
| X        | X         | T1132 Data Encoding |
| X        | X         | T1071 Standard Application Layer Protocol |
| X        | X         | T1022 Data Encrypted |
| X        | X         | T1030 Data Transfer Size Limits |
| X        | X         | T1041 Exfiltration Over C2 Channel |
| X        | X         | T1485 Data Destruction |
| X        | X         | T1489 Service Stop |
| X        | X         | T1529 System Shutdown / Reboot |

### Conclusion

To improve the skills of both blue and red teams in macOS, we have developed a cyber range system. We surveyed and summarized various forensic tools to build an attack-defense association graph, which serves as a guideline and assessment tool to evaluate the performance of red and blue teams. With our red team emulation tool and blue team toolkit, exercises can be conducted. Finally, we demonstrated how to use our cyber range to simulate an APT attack. Our system is useful for red/blue team training, cyber exercises, and security product testing.

### References

1. Bitdefender. 2017. Dissecting the APT28 Mac OS X Payload. https://download.bitdefender.com/resources/files/News/CaseStudies/study/143/Bitdefender-Whitepaper-APT-Mac-A4-en-EN-web.pdf.
2. CrowdStrike Holdings, Inc. 2019. AutoMacTC: Automated Mac Forensic Triage Collector. https://github.com/CrowdStrike/automactc.
3. DiDi, Inc. 2014. An Open-Source Pre and Post Callback-Based Framework for macOS Kernel Monitoring. https://github.com/didi/kemon.
4. Objective-See. 2019. Burned by Fire(fox). https://objective-see.com/blog/blog_0x43.html.
5. Objective-See. 2019. Pass the AppleJeus. https://objective-see.com/blog/blog_0x49.html.
6. osquery Project. 2014. Performant endpoint visibility. https://osquery.io/.
7. Yelp, Inc. 2018. A forensic evidence collection & analysis toolkit for OS X. http://yelp.github.io/osxcollector.

Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan