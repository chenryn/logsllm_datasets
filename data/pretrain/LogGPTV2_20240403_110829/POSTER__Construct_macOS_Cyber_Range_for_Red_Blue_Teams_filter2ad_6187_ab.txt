or switches and support other displaying styles. In cases that in-
vestigators want to program parse or search for the log, the log
+ Console.app is more suitable. On the other hand, Consolation 3
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan935is easier to use in the case of manual analysis. The last one tool -
UnifiedLogReader directly parse the unified log’s database files. If
the live system is unavailable and only log files can be found, Uni-
fiedLogReader could be a good choice. Thus our blue team toolkit
includes the three tools for different cases.
To complement the aforementioned static forensic tools, our blue
team toolkit also integrates some dynamic monitor tools, such as
build-in dtrace tools, kemon [3] ProcessMonitor and FileMonitor.
The dtrace tool can snoop function calls to open and create, and it
can also trace some I/O events. Kemon is the pre and post callback-
based framework for macOS kernel monitoring. This system is a
powerful framework to monitor the process and file events. Based
on Apple’s new Endpoint Security Framework, ProcessMonitor and
FileMonitor provide basic but useful runtime information like pid,
path, ancestor, arguments, code-signing and timestamp. However,
dtrace and kemon require disabling SIP to perform their function-
ality. These tools are hard to deploy in real environments. On the
other hand, ProcessMonitor and FileMonitor utilize build-in secu-
rity framework and do not need to disable SIP. The framework is
only available after macOS 10.15, making it impossible for it to be
deployed in old systems.
After preparing the aforementioned tools, we can move to Mali-
cious Activity Detection phase. Given the output from these tools,
our framework provides some basic pattern-match rules to iden-
tify malicious activities. Identified malicious activities are labeled
with ATT&CK labels. User can also define their customized rules.
These predefined rules as well as user-customized rules could help
investigator to complete their tasks.
5 EVALUATION
In this section, we use our red team emulation tool to construct a
complete APT storyline and use our blue team toolkit to detect it
as a showcase. At the beginning of the attack, the red team uses the
exploitation of CVE-2018-6574 to build a package on Github. Upon
getting our malicious package, the emulation tool is executed and
copies itself to a hidden directory under the home directory of the
victim. It also adds a plist file to register as a user-level LaunchAgent.
Then, it connects to the C2 server through a socket, and the red
team uses shell commands to gather information on the victim.
Meanwhile, it scans SSH configuration files and copies itself
to the remote victim with the SSH key recorded in the files. On
the other side, the red team monitors the victim through process
discovery and screenshots, and uses privilege escalation plugin,
such as an AppleScript, to pop up a spoofing privileged helper
with Setting icon. Once the user authorizes, the system-level red
team emulation tool is executed. It registers itself as a system-
level LaunchDaemon immediately. The red team can then perform
advanced operations as root through shell commands.
Table 1 presents the evaluation results. We list the techniques
used in the storyline mentioned above and the detection results
of our blue team toolkit. The columns “red team" and “blue team"
summarize the support status of our attack and defense tools, re-
spectively. The blue team result heavily depends on the complete-
ness of available filter rules. Therefore, the unsupported part is
caused by the fact that most existing detection rules mainly focus
on the discovery stage. Although our framework records as many
Table 1: Evaluation results.
Red Team Blue Team
X
X
X
X
X
X
O
O
X
X
X
X
O
O
O
O
O
O
O
O
O
X
X
X
X
X
X
X
X
X
X
X
X
ATT&CK Techniques
T1195 Supply Chain Compromise
T1155 AppleScript
T1059 Command-Line Interface
T1204 User Execution
T1064 Scripting
T1158 Hidden Files and Directories
T1159 Launch Agent
T1160 Launch Daemon
T1514 Elevated Execution with Prompt
T1144 Gatekeeper bypass
T1081 Credentials in Files
T1145 Private Keys
T1083 File and Directory Discovery
T1057 Process Discovery
T1033 System Owner/User Discovery
T1049 System Network Connections Discovery
T1069 Permission Groups Discovery
T1082 System Information Discovery
T1087 Account Discovery
T1135 Network Share Discovery
T1201 Password Policy Discovery
T1105 Remote File Copy
T1021 Remote Services
T1005 Data from Local System
T1113 Screen Capture
T1132 Data Encoding
T1071 Standard Application Layer Protocol
T1022 Data Encrypted
T1030 Data Transfer Size Limits
T1041 Exfiltration Over C2 Channel
T1485 Data Destruction
T1489 Service Stop
T1529 System Shutdown / Reboot
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
O
system information as possible in system log files, it is difficult
to distinguish malicious artifacts from normal ones in the initial
access stage and the privilege escalation stage. We leave the issue
as one of our major future work.
6 CONCLUSION
In order to improve both the blue and red team’s skill of macOS, we
develop a cyber range system for macOS. At first, we survey and
summarize many forensic tools to build an attack-defense associa-
tion graph, this graph could be a guideline and assessment tool to
evaluate performance of red/blue team. With red team emulation
tool and blue team toolkit, the exercises can be conducted. In the
end, we show how to utilize our cyber range to simulate an APT
attack. Our cyber range system could be useful in red/blue team
training, cyber exercises and security product testing.
REFERENCES
[1] Bitdefender. 2017.
Dissecting the APT28 Mac OS X Payload.
https:
//download.bitdefender.com/resources/files/News/CaseStudies/study/143/
Bitdefender-Whitepaper-APT-Mac-A4-en-EN-web.pdf.
[2] CrowdStrike Holdings, Inc. 2019. AutoMacTC: Automated Mac Forensic Triage
Collector. (2019). https://github.com/CrowdStrike/automactc.
[3] DiDi, Inc. 2014. An Open-Source Pre and Post Callback-Based Framework for
macOS Kernel Monitoring. (2014). https://github.com/didi/kemon.
[4] Objective-See. 2019. Burned by Fire(fox). https://objective-see.com/blog/blog_
0x43.html.
0x49.html.
[5] Objective-See. 2019. Pass the AppleJeus. https://objective-see.com/blog/blog_
[6] osquery Project. 2014. Performant endpoint visibility. (2014). https://osquery.io/.
[7] Yelp, Inc. 2018. A forensic evidence collection & analysis toolkit for OS X. (2018).
http://yelp.github.io/osxcollector.
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan936