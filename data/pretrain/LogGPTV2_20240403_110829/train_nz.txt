it returns an internet host address in network byte order,
created by combining the network number \finet\fp
with the local address \fihost\fp, both in
host byte order.
.pp
the structure \fiin_addr\fp as used in
.br inet_ntoa (),
.br inet_makeaddr (),
.br inet_lnaof (),
and
.br inet_netof ()
is defined in
.i 
as:
.pp
.in +4n
.ex
typedef uint32_t in_addr_t;
struct in_addr {
    in_addr_t s_addr;
};
.ee
.in
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br inet_aton (),
.br inet_addr (),
.br inet_network (),
.br inet_ntoa ()
t}	thread safety	mt-safe locale
t{
.br inet_makeaddr (),
.br inet_lnaof (),
.br inet_netof ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
.br inet_addr (),
.br inet_ntoa ():
posix.1-2001, posix.1-2008, 4.3bsd.
.pp
.br inet_aton ()
is not specified in posix.1, but is available on most systems.
.sh notes
on x86 architectures, the host byte order is least significant byte
first (little endian), whereas the network byte order, as used on the
internet, is most significant byte first (big endian).
.pp
.br inet_lnaof (),
.br inet_netof (),
and
.br inet_makeaddr ()
are legacy functions that assume they are dealing with
.ir "classful network addresses" .
classful networking divides ipv4 network addresses into host and network
components at byte boundaries, as follows:
.tp 10
class a
this address type is indicated by the value 0 in the
most significant bit of the (network byte ordered) address.
the network address is contained in the most significant byte,
and the host address occupies the remaining three bytes.
.tp
class b
this address type is indicated by the binary value 10 in the
most significant two bits of the address.
the network address is contained in the two most significant bytes,
and the host address occupies the remaining two bytes.
.tp
class c
this address type is indicated by the binary value 110 in the
most significant three bits of the address.
the network address is contained in the three most significant bytes,
and the host address occupies the remaining byte.
.pp
classful network addresses are now obsolete,
having been superseded by classless inter-domain routing (cidr),
which divides addresses into network and host components at
arbitrary bit (rather than byte) boundaries.
.sh examples
an example of the use of
.br inet_aton ()
and
.br inet_ntoa ()
is shown below.
here are some example runs:
.pp
.in +4n
.ex
.rb "$" " ./a.out 226.000.000.037" "      # last byte is in octal"
226.0.0.31
.rb "$" " ./a.out 0x7f.1         " "      # first byte is in hex"
127.0.0.1
.ee
.in
.ss program source
\&
.ex
#define _bsd_source
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    struct in_addr addr;
    if (argc != 2) {
        fprintf(stderr, "%s \en", argv[0]);
        exit(exit_failure);
    }
    if (inet_aton(argv[1], &addr) == 0) {
        fprintf(stderr, "invalid address\en");
        exit(exit_failure);
    }
    printf("%s\en", inet_ntoa(addr));
    exit(exit_success);
}
.ee
.sh see also
.br byteorder (3),
.br getaddrinfo (3),
.br gethostbyname (3),
.br getnameinfo (3),
.br getnetent (3),
.br inet_net_pton (3),
.br inet_ntop (3),
.br inet_pton (3),
.br hosts (5),
.br networks (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/wprintf.3
.so man3/getaddrinfo.3
.\" copyright 2003 walter harms, 2004 andries brouwer .
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" created 2004-10-31. text taken from a page by walter harms, 2003-09-08
.\"
.th drand48_r 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
drand48_r, erand48_r, lrand48_r, nrand48_r, mrand48_r, jrand48_r,
srand48_r, seed48_r, lcong48_r
\- generate uniformly distributed pseudo-random numbers reentrantly
.sh synopsis
.nf
.b #include 
.pp
.bi "int drand48_r(struct drand48_data *restrict " buffer ,
.bi "              double *restrict " result );
.bi "int erand48_r(unsigned short " xsubi [3] ","
.bi "              struct drand48_data *restrict "buffer ,
.bi "              double *restrict " result ");"
.pp
.bi "int lrand48_r(struct drand48_data *restrict " buffer ,
.bi "              long *restrict " result );
.bi "int nrand48_r(unsigned short " xsubi[3] ","
.bi "              struct drand48_data *restrict "buffer ,
.bi "              long *restrict " result ");"
.pp
.bi "int mrand48_r(struct drand48_data *restrict " buffer ,
.bi "              long *restrict " result ");"
.bi "int jrand48_r(unsigned short " xsubi[3] ","
.bi "              struct drand48_data *restrict " buffer ,
.bi "              long *restrict " result ");"
.pp
.bi "int srand48_r(long int " seedval ", struct drand48_data *" buffer ");"
.bi "int seed48_r(unsigned short " seed16v[3] ", struct drand48_data *" buffer );
.bi "int lcong48_r(unsigned short " param[7] ", struct drand48_data *" buffer );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
all functions shown above:
.\" .br drand48_r (),
.\" .br erand48_r (),
.\" .br lrand48_r (),
.\" .br nrand48_r (),
.\" .br mrand48_r (),
.\" .br jrand48_r (),
.\" .br srand48_r (),
.\" .br seed48_r (),
.\" .br lcong48_r ():
.nf
    /* glibc since 2.19: */ _default_source
        || /* glibc .
.\" %%%license_end
.\"
.\" history:
.\" 2006-04-27, created by eduardo m. fleury 
.\" with various additions by michael kerrisk 
.\"
.\"
.th ioprio_set 2 2021-06-20 "linux" "linux programmer's manual"
.sh name
ioprio_get, ioprio_set \- get/set i/o scheduling class and priority
.sh synopsis
.nf
.br "#include     " "/* definition of " ioprio_* " constants */"
.br "#include      " "/* definition of " sys_* " constants */"
.b #include 
.pp
.bi "int syscall(sys_ioprio_get, int " which ", int " who );
.bi "int syscall(sys_ioprio_set, int " which ", int " who ", int " ioprio );
.fi
.pp
.ir note :
glibc provides no wrappers for these system calls,
necessitating the use of
.br syscall (2).
.sh description
the
.br ioprio_get ()
and
.br ioprio_set ()
system calls get and set the i/o scheduling class and
priority of one or more threads.
.pp
the
.i which
and
.i who
arguments identify the thread(s) on which the system
calls operate.
the
.i which
argument determines how
.i who
is interpreted, and has one of the following values:
.tp
.b ioprio_who_process
.i who
is a process id or thread id identifying a single process or thread.
if
.i who
is 0, then operate on the calling thread.
.tp
.b ioprio_who_pgrp
.i who
is a process group id identifying all the members of a process group.
if
.i who
is 0, then operate on the process group of which the caller is a member.
.tp
.b ioprio_who_user
.i who
is a user id identifying all of the processes that
have a matching real uid.
.\" fixme . need to document the behavior when 'who" is specified as 0
.\" see http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=652443
.pp
if
.i which
is specified as
.b ioprio_who_pgrp
or
.b ioprio_who_user
when calling
.br ioprio_get (),
and more than one process matches
.ir who ,
then the returned priority will be the highest one found among
all of the matching processes.
one priority is said to be
higher than another one if it belongs to a higher priority
class
.rb ( ioprio_class_rt
is the highest priority class;
.b ioprio_class_idle
is the lowest)
or if it belongs to the same priority class as the other process but
has a higher priority level (a lower priority number means a
higher priority level).
.pp
the
.i ioprio
argument given to
.br ioprio_set ()
is a bit mask that specifies both the scheduling class and the
priority to be assigned to the target process(es).
the following macros are used for assembling and dissecting
.i ioprio
values:
.tp
.bi ioprio_prio_value( class ", " data )
given a scheduling
.i class
and priority
.ri ( data ),
this macro combines the two values to produce an
.i ioprio
value, which is returned as the result of the macro.
.tp
.bi ioprio_prio_class( mask )
given
.i mask
(an
.i ioprio
value), this macro returns its i/o class component, that is,
one of the values
.br ioprio_class_rt ,
.br ioprio_class_be ,
or
.br ioprio_class_idle .
.tp
.bi ioprio_prio_data( mask )
given
.i mask
(an
.i ioprio
value), this macro returns its priority
.ri ( data )
component.
.pp
see the notes section for more
information on scheduling classes and priorities,
as well as the meaning of specifying
.i ioprio
as 0.
.pp
i/o priorities are supported for reads and for synchronous
.rb ( o_direct ,
.br o_sync )
writes.
i/o priorities are not supported for asynchronous
writes because they are issued outside the context of the program
dirtying the memory, and thus program-specific priorities do not apply.
.sh return value
on success,
.br ioprio_get ()
returns the
.i ioprio
value of the process with highest i/o priority of any of the processes
that match the criteria specified in
.i which
and
.ir who .
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.pp
on success,
.br ioprio_set ()
returns 0.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b einval
invalid value for
.i which
or
.ir ioprio .
refer to the notes section for available scheduler
classes and priority levels for
.ir ioprio .
.tp
.b eperm
the calling process does not have the privilege needed to assign this
.i ioprio
to the specified process(es).
see the notes section for more information on required
privileges for
.br ioprio_set ().
.tp
.b esrch
no process(es) could be found that matched the specification in
.i which
and
.ir who .
.sh versions
these system calls have been available on linux since
kernel 2.6.13.
.sh conforming to
these system calls are linux-specific.
.sh notes
two or more processes or threads can share an i/o context.
this will be the case when
.br clone (2)
was called with the
.b clone_io
flag.
however, by default, the distinct threads of a process will
.b not
share the same i/o context.
this means that if you want to change the i/o
priority of all threads in a process, you may need to call
.br ioprio_set ()
on each of the threads.
the thread id that you would need for this operation
is the one that is returned by
.br gettid (2)
or
.br clone (2).
.pp
these system calls have an effect only when used
in conjunction with an i/o scheduler that supports i/o priorities.
as at kernel 2.6.17 the only such scheduler is the completely fair queuing
(cfq) i/o scheduler.
.pp
if no i/o scheduler has been set for a thread,
then by default the i/o priority will follow the cpu nice value
.rb ( setpriority (2)).
in linux kernels before version 2.6.24,
once an i/o priority had been set using
.br ioprio_set (),
there was no way to reset the i/o scheduling behavior to the default.
since linux 2.6.24,
.\" commit 8ec680e4c3ec818efd1652f15199ed1c216ab550
specifying
.i ioprio
as 0 can be used to reset to the default i/o scheduling behavior.
.ss selecting an i/o scheduler
i/o schedulers are selected on a per-device basis via the special
file
.ir /sys/block//queue/scheduler .
.pp
one can view the current i/o scheduler via the
.i /sys
filesystem.
for example, the following command
displays a list of all schedulers currently loaded in the kernel:
.pp
.in +4n
.ex
.rb "$" " cat /sys/block/sda/queue/scheduler"
noop anticipatory deadline [cfq]
.ee
.in
.pp
the scheduler surrounded by brackets is the one actually