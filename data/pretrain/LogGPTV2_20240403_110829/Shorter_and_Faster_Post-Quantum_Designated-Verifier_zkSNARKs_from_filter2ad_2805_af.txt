### Parameters and Definitions

- \( d \) represents the module rank.
- \( q \) is the ciphertext modulus.
- \( s \) is the width parameter for the discrete Gaussian noise distribution.
- \( \ell \) is the dimension of the plaintext space.
- \( \tau \) is the sparsification parameter.

These parameters are selected to support an R1CS system with \( 2^{20} \) constraints. The final two rows in Table 1 correspond to the "Shorter Proofs" and "Shorter CRS" instantiations, respectively.

### Lattice Parameter Selection

Due to space limitations, the detailed methodology for parameter selection is deferred to the full version of this paper [78]. We provide several example parameter sets and their estimated bits of classical and post-quantum security in Table 2. For our main experiments, we use \( \kappa = 40 \) for the statistical zero-knowledge parameter, and the remaining parameters are chosen to provide 128 bits of post-quantum security (based on the analysis from Section 3.3 and hardness estimates from the LWE Estimator tool et al. [1]).

### Ciphertext Structure and Size Reduction

In most Regev-based encryption schemes, ciphertexts have the form \( ct = (a, c) \), where \( a \in R_q^n \) encodes the message. To reduce the ciphertext size, a heuristic approach is to derive the random vector \( a \) as the output of a pseudorandom function (PRF) and include the PRF key instead of the vector \( a \). Alternatively, the vector \( a \) can be the output of a public hash function. This approach can be justified in the random oracle model [62]. In our implementation, we use AES (in counter mode) as the underlying PRF. Similar techniques have been used for reducing the size of public components in lattice-based cryptosystems, including key-exchange [38] and previous lattice-based zkSNARKs [65].

### Noise Distribution

The noise distribution \( \chi \) is a discrete Gaussian distribution \( \chi_s \) with mean 0 and width \( s \) (Eq. (A.1)). We use inversion sampling to sample from \( \tilde{\chi}_s \) given a uniformly-random 64-bit value. More details are provided in the full version of this paper [78]. This approach is similar to that used in lattice-based key-exchange [38].

### Big Integer Support

In our implementation, the ciphertext modulus \( q \) is around 100 bits. All homomorphic operations over the ring \( R_q \) are performed using 128-bit arithmetic. Since \( q \) is a power-of-two, we can compute over \( \mathbb{Z}_{2^{128}} \) and defer the modular reduction to the end of the computation. We use the compiler intrinsic type `__uint128_t` for 128-bit arithmetic on a 64-bit architecture. Internally, each 128-bit value is represented by two 64-bit words. This intrinsic representation is 16 times faster than general multi-precision arithmetic and 8 to 9 times faster than fixed-point arithmetic for slightly larger bit lengths (e.g., 192-bit or 256-bit fixed-precision arithmetic from Boost). More detailed microbenchmarks are available in the full version of this paper [78].

### Experimental Evaluation

#### System Implementation

Our implementation is written in C++. We use libsnark [96] and libfqfft [94] to implement the linear PCP for R1CS satisfiability (Claim A.6). Specifically, we use the linear PCP implementation from libsnark (with minor changes from Appendix B) and the standard radix-2 FFT [50] (over a finite field) and the Bostan-Schost algorithms for multipoint evaluation and interpolation on points from a geometric sequence [39] from libfqfft. These building blocks suffice to implement our approach described in Section 4.1 for evaluating the linear PCP.

#### Metrics and Evaluation Methodology

Following previous works [21, 47, 99], we measure the performance of our system on R1CS systems with different numbers of constraints \( m \) (ranging from \( m = 2^{10} \) to \( m = 2^{20} \)). We keep the number of variables \( n \) in each R1CS system to be roughly \( m \) (i.e., \( n \approx m \)), and we consider statements of a fixed length \( k = 100 \). The statement length has a mild effect on the verification complexity, which is already very fast, so we do not focus on it in our evaluation.

We run all of our experiments on an Amazon EC2 c5.4xlarge instance running Ubuntu 20.04. The machine has 16 vCPUs (Intel Xeon Platinum 8124M at 3.0 GHz) and 32 GB of RAM. The processor supports the AES-NI instruction set. We compile our code using gcc 9.3.0 for a 64-bit x86 architecture. All measurements are taken with a single-threaded execution.

#### General Benchmarks

In Figure 1, we compare the performance of different instantiations of our zkSNARK on R1CS instances of varying sizes. We consider two instantiations using linear PCPs and vector encryption over the extension field \( \mathbb{F}_{p^2} \) (for \( p = 2^{13} - 1 \) and \( p = 2^{19} - 1 \)), as well as two alternative instantiations where we use vector encryption over the base field \( \mathbb{F}_p \). For the latter instantiations, we consider both the instantiation where we first compile a linear PCP over the extension field to a linear PCP over the base field (Construction C.1) and a second instantiation where we directly construct a linear PCP over the base field. Across the board, the verifier time is small, so we focus our discussion on other metrics.

For our main instantiations (working over the extension field), the field size provides a trade-off between CRS size and proof size. Using a larger field decreases the CRS size (fewer repetitions needed for knowledge amplification at the linear PCP level) but leads to longer proofs (due to larger parameters). Concretely, for R1CS systems with \( 2^{20} \) constraints, increasing the characteristic from \( p = 2^{13} - 1 \) to \( p = 2^{19} - 1 \) decreases the CRS size by 2.8× (with a corresponding decrease in setup time) but increases the proof size by 1.2×. The prover complexity is essentially the same in both cases.

When we take a linear PCP over \( \mathbb{F}_{p^2} \) and first apply Construction C.1 to obtain a linear PCP over \( \mathbb{F}_p \), the proof size remains comparable to the case where we work exclusively over \( \mathbb{F}_{p^2} \). However, the CRS size is doubled since Construction C.1 increases the query length by the degree of the field extension, as is the prover complexity. The advantage of this construction is that it is based on standard lattices rather than module lattices, potentially offering better security.

Finally, if we consider the direct compilation of a linear PCP over the base field \( \mathbb{F}_p \), the proof size is 1.4× to 1.8× longer than the constructions that use the extension field.

#### Extension Field vs. Base Field

To quantify the concrete performance trade-off enabled by extension fields, we also compare our zkSNARKs over \( \mathbb{F}_{p^2} \) with an instantiation over \( \mathbb{F}_p \) (i.e., compile the linear PCP from Claim A.6 over \( \mathbb{F}_p \) using the linear-only vector encryption from Construction 3.5 over \( \mathbb{F}_p \)). The results are summarized in Figure 2. Most instantiations over \( \mathbb{F}_p \) require working over a ring \( R_q \) with \( q > 2^{128} \). As discussed in Section 4.2, this incurs considerable computational overhead for big-integer arithmetic. Working over the extension field allows us to consider instantiations over much larger fields without incurring the cost of big-integer arithmetic.

Figure 2 shows that working over a quadratic extension field introduces a modest increase in the CRS size (by a factor of 1.4× to 1.6×) compared to working over a prime-order base field of similar size. In return, working over the extension field reduces the proof size by 1.7× to 2.4× (specifically, from nearly 70 KB to under 30 KB when considering a 56-bit field). As discussed in Section 1.2 (see also the formal analysis in Section 3.3), all lattice parameters grow with the field characteristic. Thus, for fields of comparable size, all lattice parameters will be larger if we work over a base field than if we work over an extension field (of smaller characteristic), leading to longer proofs. The size of the CRS is smaller due to the CRS compression technique from Section 4.2. Each lattice ciphertext in the CRS only consists of the message-embedding component. In this case, an element in \( R_q \) is represented by a pair of integers when \( R = \mathbb{Z}[X]/(X^2 + 1) \) and by a single integer when \( R = \mathbb{Z} \). The dimension of the message space depends only on the field size and thus is the same regardless of whether we work over a base field or an extension field. As a result, when comparing instantiations over a base field vs. an extension field of similar size, the CRS in the extension field instantiation is longer.

If we consider an alternative instantiation over \( \mathbb{F}_p \) where the prover decomposes each \( \mathbb{F}_p \) coefficient in the linear PCP proof into two separate coefficients, each of magnitude \( \sqrt{p} \), then we can support a larger field size (up to 38 bits) without requiring a modulus \( q \) that exceeds 128 bits. The reduced parameter sizes translate to slightly shorter proofs (1.1×–1.2×) compared to the extension field instantiation.