reporting. We used the survey to assign this value initially based
on how often the user (believes) he checks or uses his device.
However Icelus can calculate this value with higher accuracy
over a period of time by simply counting the number of reports
the device sends daily. For instance if the report window is 5 min
and the device is reporting in 144 out of 288 then P (D) = 50%.
Since for newer devices such as the smart wearables and BLE
sensors there are no studies we could ﬁnd, that provide statistics
such as what percentage of the time the user is near or using them
(unlike the case for smartphone where it is studied extensively) we
deployed a small user questionnaire in order to elicit the required
elementary probabilities.
5.2 Questionnaire
We created an anonymous online questionnaire and disseminated
it through various channels after obtaining institutional review board
(IRB) approval from. Our goal was to obtain information about
what kind of devices users own and how they use them in their day-
to-day routine, we used responses to elicit elementary probabilities
for our device weights.
Although our collected data to this point represent a population
of 100 individuals, this survey does not have the statistical proper-
ties (demographic diversity or sufﬁcient samples) to represent the
general population. We used these weights as a starting point to
evaluate the performance of our system. Our insight is that while
these values are adequate for our experiment, should our system be
deployed they should be calibrated to each user during the device
registration step. Since having a user complete a survey might be
subject to both inaccuracies and potentially add to user frustration,
Icelus could implicitly estimate device weights for each user by
employing machine learning methods on the Hub; this however is
beyond the scope of this work.
Sample Question
Would you share your smartwatch with ...? [ I do not
share it][family][spouse]
Would you share your smartphone with ..? [ I do not
share it][family][spouse]
You carry your smartphone ..[I do not pay attention to
its whereabouts][always]
You wear your smartwatch ..[I do not pay attention to
its whereabouts][always]
You check or use your smartwatch ..[multiple times per
hour] [rarely]
You check or use your tablet .. [multiple times per hour]
[rarely]
P(U)
P(D|U)
P(D)
Table 1: Some of the survey questions, and the attributes they
are associated with.
5.2.1 Max Credit
We deﬁne as Max Credit the maximum credit a device may pro-
vide to the avatar it is attached to. Max Credit is equal to the value
calculated from Equation 1.
5.2.2 Base and Activity Credit
Since idle devices are generating false Avatars, erroneously lead-
ing Icelus to believe a user is in a different location, it is thus crucial
that devices that actually follow the user to be able to out-weight
those that are idle and at the same time idle devices should only be
able to generate weak Avatars. In order to achieve both goals we
separate its device’s credit to two parts Base and Activity Credit.
Base Credit is a baseline value that the owner is co-located with
this device just because it is powered on and reporting. A device is
awarded Base Credit whenever it sends a report .
Activity Credit When the user performs activities on the device
such as: unlocking the smartphone with a pin or the Fitbit detecting
a heart-rate it is awarded extra credit.
Base and Activity credit together compose the Max Credit as de-
ﬁned previously. Activity Credit is assigned to each activity based
on the evidence this activity provides that a user is present and it is
the intended user, each software client is conﬁgured on a per device
basis. For instance a smartphone that is able to perform ﬁngerprint
based authentication provides more credit than a simple pin au-
thentication activity. Figure 4 attempts to illustrate composition of
Credit clearly.
Moving Average To smooth the erratic nature of user activities
we introduce and evaluate for a variable number of past values an
averaging window. For example for window of 1 if t is the current
report window the new credit value is: CN ew = C(t−1)+C(t)
. A
window size of 0 means we only consider the current estimated
credit value.
2
5.3 Conﬁdence Score Estimation
The aggregated credit of each device is the Avatar’s conﬁdence,
and thus the likelihood that the owner is denoted by the cluster of
devices composing this Avatar. We also assume that the probability
of each device being with the user is independent of others, and we
mathematically model as an independent random variable. Based
on this, the conﬁdence score of an Avatar A with N attached de-
vices is given by Equation 2. If there are more than one Avatars per
user (e.g., the user has devices reporting from different locations)
Figure 4: Activity contribution example to device credit. Device
credit is continuously calculated using Base credit plus credit
from performed Activities.
then each Avatar will have a Conﬁdence score calculated from the
devices under its area of inﬂuence.
Aconf = 1 − N(cid:89)
(1 − Ci)
(2)
i=1
This can also be read as the complementary probability of the
event that the user is not near any of the devices attached to the
Avatar.
5.3.1 Rejection Threshold
Since sets of devices in different locations lead to different Avatars,
such as when idle devices are left home, we introduce a minimum
conﬁdence threshold to select only the Avatar that represents the
devices “following” the user. We set this threshold to be equal to
the maximum conﬁdence an Avatar would produce if all registered
devices are idle and attached to it. Since this is the maximum con-
ﬁdence possible achievable by any set of idle devices it will also
satisfy the case of more than one idle Avatars.
Safe Zones
Icelus blocks access to a Site if an Avatar is found with conﬁ-
dence strictly above this threshold. By following this decision pol-
icy we never falsely reject a transaction performed by the real user
due to idle or powered off devices. As we will show in Section 8,
our model is able to generate Avatars with sufﬁcient conﬁdence
while ﬁltering idle devices due to our activity mechanism.
5.3.2
Early results showed that the user is present at some locations
while his devices are idle, such as being home during the night.
This is reﬂected in our conﬁdence formula by adding extra credit
when devices are detected to be in the users house during certain
hours. This way there is a high conﬁdence Avatar generated while
the user is sleeping, protecting him from unauthorized accesses at
different locations. In the current system version we annotate man-
ually, the user speciﬁes when he is at home. Our insight is that this
can be learned automatically by Icelus but we do not evaluate it in
the current work.
6. PRIVACY-PRESERVING THIRD-PARTY
HUB HOSTING
Hosting a personal hub may be a challenge for many users. Al-
ternatively, a third party can host a hub as a software-as-a-service.
As highlighted previously, this may raise privacy concerns as this
020406080100smartwatchfitbitchargesmartphoneAcvititiesBase% of totalDevice CreditBaseAuthenticationHeartrateObservationFigure 5: Depiction of communication when a site queries a
third-party hub
party may learn the positions of the user’s devices at the time of
protocol engagement.
We leverage Secure Multi-party Computations (SMC) to mitigate
these privacy concerns, with the goal of allowing the hub to learn
only distances between reported positions, and not the actual posi-
tions. For simplicity yet without loss of generality, we focus on the
case of a single site (referred to as “the site”).
6.1 Additively Homomorphic Encryption and
Additive Blinding
SMC is an active area of research in cryptography including
tracks on secret sharing [56], garbled circuits [65], or homomorphic
encryption [51, 62]. Homomorphic encryption is suitable for arith-
metic computations, which makes it our choice for dealing with
Euclidean distances [21, 26]. For efﬁciency, we require an addi-
tively homomorphic encryption scheme such as the one provided
by Paillier [44].
Additively homomorphic encryption schemes provides features
as described by equations 3–5, which shows the three primary op-
erations of addition, negation, and multiplication (with a known
plaintext):
(cid:74)m1(cid:75)⊕(cid:74)m2(cid:75) = (cid:74)m1 + m2(cid:75)
(cid:74)−m1(cid:75)
¬(cid:74)m1(cid:75) =
(cid:74)m1(cid:75)(cid:12) m2 = (cid:74)m1 · m2(cid:75)
(3)
(4)
(5)
For our purposes, let the plaintext space M be isomorphic to
the group (Zn, +) for some number n, and the public and private
key be K and k respectively. For the scope of this paper there is
only one such key-pair, for which only the site holds k but where
K is known by all parties. For readability, the operations ⊕, (cid:12), ¬
do not have an explicit key associated to them, we assume they all
use the usual k, K pair. The (cid:9) symbol is used in the following to
represent addition by a negated term. That is, c1⊕¬c2 is written as
c1 (cid:9) c2. For brevity, the encryption of a plaintext p using the key
K is denoted as(cid:74)p(cid:75).
As a building block in our protocol, we will use the technique
of blinding. A party A can blind a variable x by addition with a
uniformly random value b ∈ M as x(cid:48) = x + b. Another party B
cannot distinguish x(cid:48) from a random sample in M but can return
to A a value x(cid:48) + y, from which A can compute x(cid:48) − b = x + y.
6.2 Protocol outline
A user-owned hub can receive location information in the clear,
and continuously update avatars. For a privacy-preserving third-
party hosted hub, all location reports will arrive at the hub en-
crypted using K. When a query is made by the site, the hub will
initiate a sub-protocol run together with the site. Through this sub-
protocol, detailed in the following section, the hub is able to com-
pute distances between any pair of locations. Holding the pairwise
distance between three points, it is possible to calculate their rel-
ative positions. Thus, using the sub-protocol three times per loca-
tion, the hub can calculate a full relative coordinate system for all
locations. The setup is visualized in Figure 5.
If the hub needs several historical locations for a trinket, frag-
ment, or token (e.g., to compensate for movement), it can cache
them and calculate the relative positions retroactively.
6.3 Privacy-preserving distance calculations
There are several existing works on Euclidean distances using
additively homomorphic encryption (e.g., [26, 66]). In most cases
however, one of the two parties knows the coordinates of one of the
two positions. In our case, neither the site nor the hub should learn
any positions.
The hub needs to initiate the sub-protocol multiple times. For
each invocation, the hub chooses two encrypted positions ((cid:74)x1(cid:75),(cid:74)y1(cid:75))
and ((cid:74)x2(cid:75),(cid:74)y2(cid:75)) and then runs the protocol for them.
The goal is to compute the squared distance together with the
site as (x1 − x2)2 + (y1 − y2)2. This requires two roundtrips. The
ﬁrst one is due to the fact that the hub cannot compute a squaring in
the ciphertexts. This will be done by requesting that the squaring is
done by the site, in a blinded fashion. After the ﬁrst roundtrip, the
hub holds the encrypted squared distance, and will ask the site to
decrypt it, again using blinding. Finally, the hub can compute the
square root and arrive at the distance between the two points. The
protocol follows as:
1. The hub computes(cid:74)x(cid:75) = (cid:74)x1(cid:75) (cid:9)(cid:74)x2(cid:75) and(cid:74)y(cid:75) = (cid:74)y1(cid:75) (cid:9)(cid:74)y2(cid:75)
and creates a blinded version of each as(cid:74)x(cid:48)(cid:75) =(cid:74)x(cid:75)⊕(cid:74)bx(cid:75) and
(cid:74)y(cid:48)(cid:75) =(cid:74)y(cid:75)⊕(cid:74)by(cid:75). The hub caches bx and by and sends(cid:74)x(cid:48)(cid:75) and
(cid:74)y(cid:48)(cid:75) to the site.
2. The site decrypts (cid:74)x(cid:48)(cid:75) and (cid:74)y(cid:48)(cid:75), computes their squares, and
sends(cid:74)x(cid:48)2(cid:75) and(cid:74)y(cid:48)2(cid:75) to the hub.
3. The hub derives(cid:74)x2(cid:75) =(cid:74)x(cid:48)2(cid:75)(cid:9)(cid:74)2xbx +b2
x(cid:75), and(cid:74)y2(cid:75) =(cid:74)y(cid:48)2(cid:75)(cid:9)
(cid:74)2yby + b2
y(cid:75)
4. The hub then computes the encrypted squared distance(cid:74)d2(cid:75) and
sends a blinded ciphertext(cid:74)d(cid:48)(cid:75) to the site and caches the blinding
as bd.
5. The site decrypts d(cid:48) and sends it to the hub.
6. The hub computes d =
√
d(cid:48) − bd.
We establish privacy guarantees by proving that only the distance
between the devices can be learned by the hub and nothing else
about the positions of the devices. The formal concepts and proofs
are detailed in Appendix A.
7.
IMPLEMENTATION
We developed a prototype of Icelus including the Hub service
and client software for Android smartphones and wearables. The
prototype implementation is henceforth referred to as Icelus. The
Hub service in Icelus is implemented as a web application deployed
under JBoss AS 6.3. The Hub uses RESTfull services to receive re-
ports from devices encrypted using public- or shared-key cryptog-
raphy over HTTP connections. Icelus performs location modeling
without using the privacy-preserving protocol presented in Sec. 6.
Instead, we developed a separate proof-of-concept implementation
that utilizes the privacy-preserving protocol to calculate distances
between devices to evaluate its performance, which we plan to in-
tegrate in future implementations of the Hub.
Currently Icelus client software was created for smartphone and
wearable devices running Android. We implemented two versions
of the client, one for Trinkets and one for Fragments. The Trin-
ket and Fragment clients were developed using the Android SDK
v17 and v20, respectively, and communicate over Bluetooth using
the Android-recommended messaging framework for hand held-to-
wearable communication. The Trinket client is also able to monitor
Fragments that do not feature client software, such as Fitbit de-
QY/Nsub-protocolSiteThe Hubvices, by passively monitoring the devices paired with the Trinket
over Bluetooth.
Messages from The Hub to clients are sent over Google Cloud
Messaging (GCM), while HTTP is used in the opposite direction