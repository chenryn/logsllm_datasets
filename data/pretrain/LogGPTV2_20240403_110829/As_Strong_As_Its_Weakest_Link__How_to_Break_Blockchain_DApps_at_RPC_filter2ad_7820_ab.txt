suming a large amount of resources on a node.
Roadmap. The rest of the paper is organized as follows: the
background is introduced in Section II; the research formula-
tion is presented in Section III; the measurement of DoERS
exploitability among RPC services are presented in Section IV;
attack evaluation is presented in Section V; countermeasures
are described in Section VI. Related works are presented in
Section VII before discussion on responsible disclosure in
Section VIII and conclusion in Section IX.
II. BACKGROUND: BLOCKCHAIN AS A DAPP PLATFORM
Public blockchain is a distributed system that stores a
ledger of “transaction” history on a peer-to-peer network.
The P2P network is designed to scale, by admitting anyone
on the Internet without identiﬁcation (i.e., open membership)
and by providing incentives in cryptocurrency reward to the
nodes who “mine” in the network. Mining means that all
participating nodes race to solve a puzzle and to decide
which transactions to be included in the next block. Based on
these mechanisms, real-world blockchains, including Bitcoin,
Ethereum, EOS, etc., see a large operational P2P network
(e.g., thousands to hundreds of thousands of peers) and enjoy
a higher degree of trust decentralization than conventional
systems.
Smart contracts and Gas: A smart contract is a user
program running on a blockchain. While Bitcoin’s contract,
Script [4], is domain speciﬁc, more extensible blockchains
including Ethereum and EOS support running Turing-complete
smart contracts. On Ethereum, a client can request to run
a smart contract with the provided arguments, if she pays
a certain amount of fees known as Gas. The purpose of
the Gas mechanism is to prevent denial of service to any
Ethereum full nodes (as will be described in related work
in § VII), which should be differentiated from this work
whose goal is to DoS the RPC nodes. A smart contract (more
precisely, the bytecode of the contract) is replicated to all
Ethereum nodes and executing the contract is triggered by
a transaction that propagates the invocation information to the
Ethereum network. This transaction also speciﬁes Gas price
which indicates how much the client is willing to pay for each
unit of the computation carried out in a smart contract. The
higher Gas price, the faster the transaction gets propagated to
the blockchain network.
DApp platform: The blockchain is widely used as a source
of trust decentralization and underpins today’s decentralized
web applications, known as DApps. A DApp is typically
a javascript program residing in a webpage that accesses
information on the blockchain by invoking DApp-speciﬁc
smart contracts. For instance,
the CryptoKitties DApp [7]
is a market for digital pets sales. Its system consists of an
off-chain website that runs DApp javascript code [7] and
ﬁve smart contracts on the blockchain [8]. Likewise, Melon
terminal [33] is a ﬁnancial DApp that runs ﬁnancial-analysis
in smart contracts on Ethereum and presents statistics in an
off-chain webpage.
RPC services: To bridge the DApp web clients and
blockchain, remote procedure call (RPC) services are essential.
A RPC service accepts the JSON requests sent from a DApp
client inside a web browser and translates them into queries or
transactions. To do so, a RPC service internally runs one or a
group of blockchain full nodes. Ethereum’s RPC interface [16]
includes 43 open queries and 3 privileged operations such as
sendTransaction. A valid privileged operation must be
sent from a cryptocurrency owner for signing the operation
using her private key, while a RPC query can be open
membership in that it can be sent by anyone on the Internet
without identiﬁcation. Unlike transactions propagated to the
blockchain network, a RPC query is served locally within the
service.
Speculative smart-contract execution (eth_call): The
to DoERS is Ethereum’s
particular capability of interest
speculative smart-contract execution in eth_call (and
eth_estimateGas on the same code path in both Ethereum
clients Geth [32] and Parity [27]). eth_call specula-
tively runs any smart contracts, in a different way from the
conventional contract execution triggered by transactions. The
difference is two-fold: 1) eth_call-triggered execution runs
only on the serving RPC node and is not being propagated.
This capability applies not only to the so-called pure/view
functions [41], but also to any state-updating functions, as
we tested in Ethereum Virtual Machine (EVM). The updated
state however is not propagated and not reﬂected in the global
blockchain state (hence the name, speculative execution). 2)
eth_call does not mandate charging fees from a contract
execution. Instead, such a decision is left to the hands of a
service provider. In most practical RPC services, eth_call
is offered free, as a means to attract DApp clients and
developers, which is essential for growing their customer base.
is a feature in Ethereum clients (e.g., Geth
and Parity) that bounds the amount of Gas an individual
eth_call invocation can consume.
Gas limit
III. THE DOERS ATTACK AND RESEARCH FORMULATION
Our threat model
involves three actors: an attacker
sends one or multiple malicious, crafted RPC requests to
an Ethereum RPC service that also serves the regular RPC
requests from a benign client. In practice, the benign client can
be a DApp. The goal of the attacker is to deny the RPC service
to the benign client, for instance, increasing its RPC response
time. The Ethereum RPC service can be a single Ethereum
node choosing to accept RPC requests (the basic model) or a
a group of Ethereum nodes behind a frontend infrastructure
(e.g., load balancing) to accept RPC requests (the third-party
service model). This section considers the basic setting while
the third-party service model is presented in § IV.
1 contract DoERS-C {
2
function exhaustCPU(uint256 payload_size1) public returns
(bool){
bytes32 target=0xf...f;
for (uint256 i=0; i<payload_size1; ++i){
target = keccak256(abi.encodePacked(target));}
return true;}
bytes32[] storage;
function exhaustIO(uint256 payload_size1) public returns(
3
4
5
6
7
8
bool){
for (uint256 j=0; j<payload_size2; ++j) {
storage.push(0xf...f);}
return true;}
function exhaustMem(uint256 payload_size3) pure public
returns(bool) {
bytes32[] memory mem = new bytes32[](payload_size3);
mem[payload_size3-1] = 0xf...f;//"CODECOPY" allocate
memory
return true;}}
Fig. 2: The exploitable smart contract to exhaust the computing
resources (in CPU, memory allocation, etc.) of the victim node
9
10
11
12
13
14
15
4
The DoERS attack is constructed based on an exploitable
smart contract that contains resource-consuming procedures.
In this paper, we use the DoERS-C contract in Figure 2
as an example, while there can be many alternative designs
— how to design the most “effective” smart contract for the
attack is out of the scope of this paper. Contract DoERS-C
includes three exploitable functions that aim at depleting
CPU, memory and IO resources, respectively, on the victim
node. Speciﬁcally, function exhaustCPU runs a loop of
hashing computation. Function exhaustIO runs a loop of
storage updates in order to incur IO operations; note that
Variable storage is persisted in the smart-contract’s stor-
age. Function exhaustMem runs a single operation (EVM
instruction CODECOPY) to allocate a large array in memory.
The three functions all
take an argument called payload
size, which controls the number of iterations of the loop (in
exhaustCPU and exhaustIO) and the size of the array
(in exhaustMem). This argument is essentially a knob for
tuning the level of resource consumption incurred by the smart
contract.
The DoERS attack is executed in two steps: 1) The attacker
client deploys the DoERS-C smart contract to Ethereum by
sending a transaction. This step costs a small amount of Ether.
2) The attacker sends one or multiple eth_call RPCs to
the victim node to trigger one of the three exhaustXX
functions in DoERS-C. By specifying a large payload size,
the execution of these functions incurs a large amount of
resource consumption on the victim node. The purpose here
is to cripple the node’s functionality in block/transaction syn-
chronization, serving co-siding RPCs, blockchain mining, etc.
Since eth_call does not charge Ether (the main currency
unit of Ethereum), the cost of the attack is low. We also
describe a zero-Ether DoERS in § VI-A2 that eliminates the
Ether cost in the ﬁrst step.
In practice,
the conﬁgurations of Ethereum nodes may
thwart the above basic attack. For instance, Ethereum’s Gas
limit, if conﬁgured, would limit the amount of computation
that can be incurred by each DoERS request. To evade the
protection, a sophisticated attacker should lower the payload
size to avoid triggering the Gas limit, and instead send multiple
such smaller DoERS requests at a certain rate to make the
service unavailable to the victim. Also, other protective mea-
sures could be in place to raise the bar for a successful DoERS
attack, such as timeout, rate limiting, load balancing, as well as
other unknown mechanisms inside the black box RPC services
(e.g., performance isolation, hypothetically). Based upon this
observation, we set the goal of our research as follows:
The goal of our research is to understand the risk of
DoERS across deployed Ethereum RPC nodes and services.
Particularly, we analyzed the private nodes serving the back-
end of third-party RPC services to measure their susceptibility
to the attack, motivated by the fact that most DApp clients are
connected to the Ethereum network through such third-party
RPC services [10].
Towards the goal, 1) we conducted a systematic measure-
ment study on nine leading RPC services on the market
to analyze the behaviors of their load balancers, Gas limits
and rate limits; 2) we designed the strategies that evade
the protection discovered, in order to make the attack more
effective (§ IV) and 3) we evaluated the impacts of our low-
cost strategies on existing services and local nodes (§ V).
IV. EXPLOITABILITY MEASUREMENTS ON RPC SERVICES
This section describes our measurement study including
methodology and results on real-world third-party services.
Our goal is to understand the internal of a blackbox RPC
service by measuring service features in load balancing, Gas
limits and rate limiting, as modeled next.
Modeling a RPC service: A RPC service runs web servers
on the frontend to accept JSON-RPC requests and run several
Ethereum RPC nodes on the backend to process those requests.
Each frontend web server may run rate-limiting and load
balancing on the received requests. The service model
is
illustrated in Figure 3.
A. Measuring Blackbox Load Balancers: Methodology
1) Goals: To characterize a load balancer, we ﬁrst describe
a detailed model. A load balancer receives JSON-RPC requests
sent from DApp clients’ web browsers. The DApp of a JSON-
RPC request is identiﬁed by one or a few API keys. The JSON-
RPC request can also be identiﬁed by the IP address where the
browser resides. Given an incoming request, the load balancer
makes a decision regarding which RPC peer on the service
backend should the request be forwarded to. The goal here is to
characterize a load balancer in terms of its forwarding policy.
Speciﬁcally, we aim at answering the following questions:
LB0. Given two RPC queries from the same IP and with the
same API key, does the load balancer forward them to
the same RPC peer?
LB1. Given two RPC queries with different API keys, does the
load balancer forward them to the same RPC peer?
LB2. Given two RPC queries from different IPs, does the load
balancer forward them to the same RPC peer?
LB3. Given two RPC queries with the same API keys and same
IP but sent with T T seconds apart, does the load balancer
forward them to the same RPC peer?
2) Methods: The key technique to enable answering the
above questions is whether one can detect the presence of a
load balancer. Speciﬁcally, given two incoming RPC requests,
the presence of a load balancer entails the two requests are
forwarded to different RPC peers in the service backend.
Design rational: To detect load balancing in a blackbox
service, our key idea is to exploit the way that Ethereum clients
including both Geth and Parity handle orphan transactions.
Recall that each Ethereum transaction is associated with a
count, called nonce, from its issuing client. Given the nonce
of the latest transaction of a client, an orphan transaction is
a transaction sent from the same client and with a nonce no
smaller than nonce+2. An Ethereum peer receiving an orphan
transaction handles it in the following manner: It will store the
transaction locally and evict it under one of the two conditions:
1) If a transaction with nonce + 1 is received, the orphan
5
1 bool detectLB_byOrphan(URL srv, int stall){
2
3
//current nonce plus two is orphan tx
int txHash=srv.sendTransaction(fromAddr,
toAddr,Ether,nonce+2,gasPrice);
4
try{srv.sendTransaction(fromAddr,toAddr,
Ether,nonce+2,gasPrice-1);
return true;}
}catch(Exception e){
//no load balancing for sendTx RPC
Tx tx1 = srv.getTransaction(txHash);
waitTime(stall);
Tx tx2 = srv.getTransaction(txHash);
//no load balancing for RPC queries
return !(tx1 != null && tx2 != null);}
5
6
7
8
9
10
11
12
13
14 bool detectLB_byBlockNo(URL srv, int time){
15
16
17
for(int i=0;i<BOUND;i++&&sleep(time)){
records.add(srv.getBlockNumber());}
return !isMonotonicIncreasing(records);}
Fig. 4: Benchmarks to characterize load bal-
ancing in a RPC service
Fig. 5: Characterizing the load balancing of RPC services
( means no load balancing detected or no gas limit, either
making the service exploitable. XIP-Y key means sending
two requests from X IPs and with Y API keys to detect
load balancing.)
Type
i
ii
iii
RPC services
ServiceX1
ServiceX2
ServiceX3
ServiceX4
ServiceX5
ServiceX6
ServiceX7
ServiceX9
ServiceX8
1IP-1key
(LB0)
1IP-2key
(LB1)
2IP-1key
(LB2)