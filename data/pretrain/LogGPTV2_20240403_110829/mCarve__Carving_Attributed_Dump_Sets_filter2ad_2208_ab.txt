to verify that it at least contains one of the sets from
smin(diss(a, S)).
By combining the results of the previous lemmas, we
get the following main result.
Theorem 1. Let A be an attribute set and let f be an
attribute mapping for dump set S ⊆ Bn, then
∀a ∈ A ∃I ∈ smin(diss(a, S)) :
I ⊆ f (a) ⊆ comm(a, S).
This theorem says that if an attribute is expressed in
a dump set, then its encoding position should contain at
least one of the minimal dissimilarity sets and may not
go beyond the common set.
A consequence of the theorem is that by calculat-
ing diss(a, S) and comm(a, S), we can limit the search
space when looking for the attribute mapping f (a) in the
dumps. We will now investigate how to further limit the
search space.
Let ﬁlter(A, c) = {a ∈ A | a ⊆ c} denote the ﬁltra-
tion of a collection of sets in A with respect to a set c. It
is easy to see that the sets of interest for an attribute map-
ping in Theorem 1 are characterized by the following set
smin(ﬁlter(diss(a, S), comm(a, S)))
(1)
Let R be a set of representatives of bundles(a, S), i.e.
∀b ∈ bundles(a, S) ∃!s ∈ R : s ∈ b. The following the-
orem states that the set
smin(diss(a, R|comm(a,S)))
(2)
contains the same index sets as (1). Expression (2) sug-
gests, however, a smaller search space than (1), since the
diss function is computed only over a restricted set of
indexes and a subset of the dump set.
Theorem 2. Let a ∈ A be an attribute and S ⊆
Bn a dump set.
Let R be a set of representatives
of bundles(a, S). Then smin(diss(a, R|comm(a,S))) =
smin(ﬁlter(diss(a, S), comm(a, S))).
To build up our intuition, we ﬁrst formulate the lemma
that by expanding a dump set we might be able to locate
an attribute more precisely.
Lemma 4. Let S, S′ ⊆ Bn be dump sets and a ∈ A an
attribute. Then S′ ⊆ S =⇒ diss(a, S′) ⊇ diss(a, S).
The preceding lemma indicates in particular that a
dump set contains more information about an attribute
than its subset of representatives.
If we ﬁlter the
diss(a, S) sets with respect to the comm(a, S) set, how-
ever, then the representatives are sufﬁcient.
Lemma 5. Let S ⊆ Bn be a dump set and a ∈
A an attribute. Let R be a set of representatives of
bundles(a, S). Then ﬁlter(diss(a, S), comm(a, S)) =
ﬁlter(diss(a, R), comm(a, S)).
The ﬁlter with respect to the comm(a, S) set in the
preceding Lemma is indeed necessary. In general, the
set diss(a, R) does not coincide with diss(a, S).
Consider, for instance, the three two-bit dumps s1 =
01, s2 = 00, and s3 = 11. Suppose the dumps en-
code the attribute a with vala(s1) = vala(s2) = A and
vala(s3) = B. Then we have the following bundles and
dissimilarity sets.
bundles(a, {s1, s2, s3}) = {{s1, s2}, {s3}}
diss(a, {s1, s2, s3}) = {{0}, {0, 1}}
= {{0}}
diss(a, {s2, s3}) = {{0}, {1}, {0, 1}}
= {{0}, {1}}
Thus, in spite of the fact that s1 and s2 have a common
value for the attribute a, considering both in the dissimi-
larities set provides more information.
Finally, if we assume that the sizes of the attribute
value domains are known, we have an information-
theoretic lower bound on the number of bits that must
have been used for encoding the attribute. This is ex-
pressed in the following lemma, which can be used to
further limit the search space. The lemma follows from
the pigeonhole principle.
Lemma 6. Let A be an attribute set and let f be an
attribute mapping for dump set S ⊆ Bn, then ∀a ∈
A :
|f (a)| ≥ log2(|type(a)|).
In Section 6, we will investigate algorithms for deter-
mining the sets smin(diss(a, S)) and comm(a, S).
5 Cyclic attribute mappings
In this section we extend our results to a class of dy-
namic mappings, which we call semi-dynamic or cyclic
mappings. Cyclic mappings can, for instance, be used to
store trip frames on a public transportation card. Such
a trip frame contains all information related to a single
ride. Trip frames are stored in one of a ﬁxed number of
slots in the card’s memory. When validating the card for
a new ride, a new trip frame will be written to the next
available slot. If all slots have been ﬁlled, the next trip
frame will be written to the ﬁrst slot again, etc. We will
show that cyclic mappings can be detected by the same
algorithms as static mappings at the cost of introducing
a number of derived attributes.
structure on the dump set corresponding to the history
of an object. We assume that for each dump we can de-
termine to which object it belongs through the attribute
id (e.g. the unique identiﬁer of a public transportation
card). For each object we further assume that its dumps
are ordered as expressed by an attribute seqnr .
Deﬁnition 4. Let S ⊆ Bn be a dump set and let id and
seqnr be attributes. We say that the pair (id , seqnr) is a
bundle-ordering if type(seqnr ) = N and
∀b ∈ bundles(id , S) ∀s, s′ ∈ b :
s 6= s′ =⇒ valseqnr (s) 6= valseqnr (s′).
Because the combination of a device identiﬁer and a
sequence number uniquely determines a dump, we can
consider an attribute a as a function on type(id ) × N.
Given i ∈ type(id ) and n ∈ N we will thus write a(i, n)
for vala(s), where s ∈ S is the dump uniquely deter-
mined by valid (s) = i and valseqnr (s) = n.
Using this notation, we are now able to derive new at-
tributes from a given attribute a. In particular, we can
consider the history of a device. An example is the
attribute a -1, which determines the a-value of the di-
rect predecessor of a dump. This attribute is deﬁned by
a -1(i, n) = a(i, n − 1). It is deﬁned on a subset of S,
viz.
{s ∈ S | ∃s′ ∈ S : valid (s′) = valid (s)∧
valseqnr (s′) = valseqnr (s) − 1}.
This generalizes to a -r for r ∈ N. By extending the set of
attributes with such derived attributes, we can automati-
cally verify if a dump contains information on the history
(i.e. the previous states) of a device.
This technique is particularly useful when dealing
with cyclic attribute mappings. A cyclic mapping of
attribute a considers a number of locations to store the
value of a, e.g., [i1, j1), [i2, j2) and [i3, j3). In the ﬁrst
dump of an ordered id -bundle the value of a is stored at
[i1, j1). In the second dump a is stored at [i2, j2), etc.
The location for the fourth value of a is again [i1, j1).
In order to locate a cyclic mapping for attribute a,
we will derive new attributes acycle(x /c), where c is the
length of the cycle and x is a sequence number (0 ≤ x <
c). Using notation ⌊r⌋ for the ﬂoor of rational number
r, we obtain the following extensional deﬁnition of these
new attributes:
acycle(x /c)(i, n) = a(i, c ·(cid:22) n − x
c (cid:23) + x).
Because cyclic mappings consider the evolution of
a given object in time, we will ﬁrst assume additional
In Figure 2 we show the attributes derived from the rides-
left (rl) attribute, assuming a cyclic mapping of length
3. The dumps s1 to s5 are consecutive dumps of a sin-
gle card.
In order to ﬁnd the cycle length of a cycli-
cally mapped attribute, it sufﬁces to search for attributes
acycle(0 /c), where c ranges from 2 to the expected max-
imum cycle length. In the ﬁgure we denote rlcycle(x /c)
by rlx /c.
rl
8
7
6
5
4
3
s1
s2
s3
s4
s5
s5
rl0 /3
rl1 /3
rl2 /3
seqnr mod(3)
8
8
8
5
5
5
-
7
7
7
4
4
-
-
6
6
6
3
1
2
3
1
2
3
Figure 2: Derived attributes with cycle length 3.
We conclude our observations on cyclic mappings by
considering pointers to such attributes. An example is the
use of a pointer (at a static location), pointing at the block
in memory where the information on the most recent trip
is stored. Clearly, if the trip information is stored al-
ternatingly at different locations, the pointer will have a
similar cyclic behaviour. We can search for such cyclic
pointers by introducing attributes seqnr mod(c), which
consider the sequence number of the dump modulo cy-
cle length c. Figure 2 contains an example for c = 3.
6 Algorithms
In the following we concern ourselves with the two basic
carving algorithms, comm and diss.
6.1 Commonalities
The algorithm computing the comm function identiﬁes
all positions in which given bitstrings have the same
value. We implement it using the function fc : P(B∗) ×
P(N) → P(N) which we deﬁne recursively as follows,
using the symbol ·∪ for the disjoint union of sets.
fc(∅, I) = I
fc({s}, I) = I
fc(S ·∪{s, s′}, I) = fc(S ∪ {s}, {i ∈ I | si = s′
i})
Obviously, for dumps of length n,
comm(a, S) =
\b∈bundles(a,S)
fc(b, [0, n)).
The bit complexity of this step is O(n · |S|).
The function comm is illustrated in Figure 3. For
each of the three bundles we have calculated the fc set
as the set of all positions where all dumps from the bun-
dle agree on the bit (indicated by the asterisk symbols).
Finally, the comm set cm is the intersection of these fc
sets.
rl
4
4
5
6
6
s1
s2
s3
s4
s5
dump
010100100111010000
001100100001010010
*..******..*****.*
101110101011010100
fc
fc
******************
001010110111011011
111010110011011001
fc
..*******.******.*
...******..*****.* cm
Figure 3: Calculation of the comm set.
6.2 Dissimilarities
Given a set of bundles, the algorithm for the diss func-
tion identiﬁes intervals in which any two bitstrings from
different bundles differ in at least one position.
We implement the diss function in the case where the
attribute mapping is assumed to be contiguous using the
dissimilarity interval function iv(a, S)(i). It denotes the
shortest interval that a contiguous encoding of attribute
a must have if it is to start at position i. Such an interval
does not exist if there are dumps in S which do not differ
at any position in [i, n).
Deﬁnition 5. Let a ∈ A be an attribute and S ⊆ Bn be
a dump set. The dissimilarity interval function iv(a, S) :
[0, n) → P([0, n)) ∪ {⊥} of S with respect to attribute
a is deﬁned by
iv(a, S)(i) = [i, min{k ∈ [i, n) |
∀d, d′ ∈ S : vala(d) 6= vala(d′) =⇒
∃j : (i ≤ j ≤ k ∧ dj 6= d′
j )} (cid:3)
if the minimum exists and ⊥ else.
The following lemma expresses that the dissimilarity
set for contiguous attribute maps can be obtained from
the dissimilarity interval function. To state the lemma,
we ﬁrst need to deﬁne subset minimality and superset
closure for sets of intervals.
Let In = {[i, j] ⊆ N | i, j < n} be the set of intervals
in [0, n). We deﬁne the interval-superset closure of a set
P ⊆ In by {p ∈ In | ∃p′ ∈ P : p′ ⊆ p}. It is easy
to see that the interval-superset closure of P is equal to
P ∩ In. A set P is said to be interval-superset closed if
P ⊆ In and P = P ∩ In. We say that P is interval-
subset minimal if P ⊆ In, and for every p, p′ ∈ P , p′ ⊆
p =⇒ p′ = p. It is also easy to see that for every
set of intervals P ⊆ In, there is a unique interval-subset
minimal set Q ⊆ In such that Q ∩ In = P ∩ In. The
proof is analogous to the proof of Lemma 3.
Lemma 7. Let S ⊆ Bn be a dump set and a ∈ A an
attribute. Let the set T be deﬁned by
T = {iv(a, S)(i) ∈ In | i ∈ [0, n) ∧
iv(a, S)(i + 1) 6⊆ iv(a, S)(i)}
then T is the interval-subset-minimal set that satisﬁes
T ∩ In = diss(a, S) ∩ In.
To compute iv(a, S)(i) for i ∈ [0, n), we assume for
simplicity of exposition that no two dumps in S have the
same value for attribute a, that is, we are restricting our-
selves to a set of representatives R of bundles(a, S).
A naive algorithm for iv(a, R)(i) is to ﬁrst compare
two dumps from R then to iterate over all remaining
dumps in R comparing each new dump to the ﬁrst two
dumps and all dumps that have already been iterated
over.
In each comparison of two dumps, the ﬁrst po-
sition after position i in which the two dumps differ
is sought for. The maximal such position is returned.
More precisely, let ﬁv : P(B∗) × N → N ∪ {−∞, ∞}
be deﬁned recursively as follows. Note that we adopt
the conventions min(∅) = ∞, max(∞, k) = ∞, and
max(−∞, k) = k for all k ∈ N ∪ {−∞, ∞}.
ﬁv(∅, i) = −∞
ﬁv({s}, i) = −∞
ﬁv({s, s′}, i) = min{k ∈ N | k ≥ i, sk 6= s′
ﬁv(R ·∪{s}) = max(ﬁv(R, i),
k}
{ﬁv({s, s′}, i)})
max
s′∈R
for
any
set R of
representatives
Then
from
bundles(a, S), we have iv(a, R)(i) = [i, ﬁv(R, i)]
if ﬁv(R, i) ∈ N and iv(a, R)(i) = ⊥ else. The
number of comparisons of two dumps, i.e. the num-
ber of calls to ﬁv({s, s′}, i),
is easily seen to be
quadratic in |R|. We can improve the number of
comparisons to O(|R| log |R|) by sorting the set of
dumps ﬁrst. We will write s <i s′ if and only if