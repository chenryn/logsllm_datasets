silent dropping by the network accounts for 10–15% of the
ﬁltering cases, while active errors are relatively rare for the
network to generate (2–7% of the cases). However, there are
also differences between IPv4 and IPv6. For instance, IPv4
shows Passive:Target is more prevalent than Active:Target in the
router dataset, but IPv6 shows the opposite. Further, an active
error message is more likely in IPv6 than in IPv4—perhaps
indicating traditional border ﬁrewalls are silently discarding
unwanted IPv4 trafﬁc and not yet dealing similarly with IPv6
trafﬁc. At a high level these results show that even when both
protocols implement the same high-order policy to block some
service, they are not always doing so in the same manner.
While we omit individual applications’ failure distributions,
one interesting outlier to mention in the router dataset is NTP.
We ﬁnd NTP is ﬁve times more likely (24% versus 5%) to
respond with an active error in IPv6 than in IPv4. Given the
widespread IPv4 NTP DDoS spike and subsequent operator
mitigations reported in recent years [18], we might expect silent
dropping of NTP to be a prevalent security posture. However,
our results suggest that while this is a reasonable expectation
in IPv4, sadly this mitigation is not as common in IPv6.
B. Connection failure Locations
A second aspect of policy enforcement is the location of
ﬁltering. We started to address this above by detecting whether
policy is applied on the host or by some on-path network
element prior to the target host. In this section, we analyze
cases where policy is being enforced by the network and not
the host and attempt to locate where. For each failing traceroute
probe not ascribed to the target, we extract the difference in the
hop count between where we know that target host to be—as
established via successful ICMP echo and open application
responses—and the ﬁnal response from the non-target. This
response could be either an active error message (Active:Other)
or a normal traceroute (TTL expired) probe response in the case
of a silent drop (Passive:Other). Figure 5 shows the fraction of
these responses at each hop distance prior to the target host.
First, we ﬁnd that the differences between IPv4 and IPv6
drop distance distributions are generally small (< 6%) for
servers at each hop distance. Further, 49% of drops in IPv6 and
55% of drops in IPv4 happen two hops away from the server.
This suggests that, when policy is applied along the path to a
server and not at the server itself, it is likely to be applied at
the same point for both protocols. For routers, the difference in
distance distribution between IPv4 and IPv6 connection failures
was greater (up to 20%). IPv6 drops are most likely to happen
at a distance of three hops away. Conversely, IPv4 is most
likely to see drops two hops from the target. The distribution
at earlier and later hops shows rough parity between IPv4
and IPv6. In sum, although the differences between IPv4 and
IPv6 enforcement location are not stark in general, we did ﬁnd
some differences which, when combined with the connection
failure mode distributions we show above, lead us to conclude
that deployment of policy enforcement mechanisms, both in
number, kind, and to a lesser extent, location, differs measurably
between the two protocols.
VII. VALIDATION AND CASE STUDIES
We solicited validation on our methods and our ﬁndings
from 16 networks for which we had contacts. These networks
were varied in their types, including access, transit, university,
content, and hosting networks, and they varied in their location
footprints, ranging from Asia, Europe, Oceania, and North
America. For each network, we emailed our ﬁndings with a
project summary, listing IPv4/IPv6/name tuples with associated
information on which ports were apparently blocked in IPv4 but
were not blocked in IPv6. We received responses from twelve
11
Before this paper was published, we took additional steps
to send emails to abuse contacts for 396 remaining autonomous
systems not associated with the 16 operators above, whose
routers were also found with open IPv6 access in RT , as we
deemed the threat to routers to be of greatest urgency.
VIII. SCANNING FEASIBILITY
As we have shown, IPv6 often provides access to application
ports that are unreachable via IPv4. This in turn provides attack-
ers with a path to vulnerable services. However, an attacker must
ﬁrst ﬁnd these hosts and services before attempting to exploit
vulnerabilities. Within IPv4, the most straightforward method
is to scan the entire address space for vulnerable services.
Current scanning techniques allow a single host connected
to a fast network to scan the entire IPv4 address space in
less than one hour [22]. Scanning the IPv6 address space in
this fashion would take on the order of 1022 years. The task
is prohibitively expensive, even considering parallelizing the
work and assuming massive network capacity improvements.
Alternatively, an attacker could leverage the sorts of DNS and
traceroute data we start with to form a hit list for scanning.
Although this is useful to obtain a sample that is suitable for
understanding the general policy posture of the IPv6 network,
it is far from comprehensive.
Although scanning each IPv6 address is impracticable, some
researchers note that feasibility of targeted IPv6 scanning de-
pends on the device addressing strategy within each block [16].
When operators concentrate devices in a contiguous sub-block
of a routed preﬁx, attackers can concentrate on the sub-block
and ignore everything outside—potentially putting the task
of comprehensive scanning of devices within reach. Random
address assignment within a routed preﬁx may at ﬁrst appear as
security-through-obscurity, but the strategy actually determines
whether IPv6 brute-force scanning is practically possible. As
an example, 2008 work by Malone showed that signiﬁcant
fractions of the host ID portion of IPv6 addresses were derived
from the MAC address using the EUI-64 mechanism [38]. This
addressing strategy effectively reduces the search space for an
attacker from 64 bits to 48 bits—and even further down to
24 bits if the Ethernet card vendor is known or can be guessed.
Further, Malone notes a prevalence of low-integer host IDs.
While EUI-64 is less common in today’s networks, we are
still interested in whether current address assignment strategies
impact an organization’s security posture.
Therefore, we next turn to using addresses found in our
RT and ST datasets to understand the addressing practices of
operators. We ﬁrst note that the high-order network ID portion
of routed IPv6 networks is advertised in BGP—often with a
preﬁx of /48 or longer. These are available in public routing
table repositories and serve to signiﬁcantly winnow the scanning
space an attacker would have to cover for a comprehensive
scan. After the preﬁx, the natural next question is whether
the middle (subnet) portion of the IPv6 address—typically
16 bits—is random. In our target data, we ﬁnd that 47% of the
router and 45% of the server subnets use only the lower 8 bits.
Additionally, 8% of router subnets and 19% for servers use a
reverse-low pattern, where the high-order four bits are used
and the remainder of the bits are zero, resulting in 15 possible
subnets. Thus, just 270 possibilities account for 55% of router
and 64% of server subnets. Scanning this small fraction (0.4%)
Fig. 5: Fraction of hosts (mean across all applications
in dataset) where failure response (Passive:Other or Ac-
tive:Other) originated given hops prior to target.
TABLE V: Validation summary. Twelve of sixteen opera-
tors of various types responded, and each indicated that
discrepancy was unintentional. Ten took steps to remediate.
Operator
Host-App Pairs w/Only IPv6 Open Response
Global CDN 1
Tier1 ISP 1
Global Transit Pro. 1
Large Hosting Pro. 1
Large University 1
Large University 2
Large University 3
National ISP 1
National ISP 2
Research/Ed. ISP 1
Research/Ed. ISP 2
Research/Ed. ISP 3
Research/Ed. ISP 4
Small Hosting Pro. 1
Small ISP 1
Small Transit Pro. 1
3
498
201
<800
5
6
989
4757
89
1
523
77
17
17
12
2
networks, summarized in Table V. In every case, we received
a conﬁrmation of our hypothesis that the underlying cause was
an oversight on consistent application of security policy. In
addition, ten of the twelve responding networks immediately
worked to establish a congruent policy in IPv6.
When we followed up with individual operators, we found
that policy was typically being applied on the individual devices.
One operator had used IPv4-speciﬁc examples for how to
harden the control plane of a router, without adding additional
conﬁguration to accomplish the same in IPv6. Another operator
had an organization-wide standard security policy for IPv6 that
was found to not be applied to a single device; this device was
installed as a IPv4-only system, and had IPv6 later added. The
organization had been working to ensure their IPv6 posture was
on par with their IPv4 posture, though the ﬁrewall conﬁguration
tool their system administrators had been using does not have
an IPv6 option, leaving a lot more manual work for them.
Similarly, a large transit provider conﬁrmed that they did not
intend for external SSH and telnet access for their routers in
IPv6. They deployed conﬁguration on the routers to prevent
external access in IPv6, but were not able to deploy the same
conﬁguration on customer routers that used their address space
to number the interconnection links with their customers. We
also found most transit providers do not block packets headed
towards their customer’s interfaces.
12
 0 0.1 0.2 0.3 0.4 0.5 0.6-2 0 2 4 6 8Fraction of HostsHops Before DestinationRouter IPv4Router IPv6Server IPv4Server IPv6of the theoretical 65,536 possible subnets would have identiﬁed
the majority of used networks in our DNS-derived sample.
TABLE VI: IPv6 Interface Identiﬁer (IID) types for all
IPv6 addresses for hosts in the RT and ST datasets,
including 30K router and 968K server IPv6 addreses. For
each dataset, we show the percentage in that category and
a cumulative total. We ﬁnd that 89% of router and 37%
of server addresses are within very low ranges, allowing
discovery within seconds on a subnet. Recall that half of
the bit space (i.e., 32 bits) is a minute fraction of the IPv6
address space—232/264 or 1/4,294,967,296
Router
Server
IID Bits Used
IID Value Range
%
Cum. %
%
Cum. %
1
4
8
16
32
<= 0x0001
<= 0x000F
<= 0x00FF
<= 0xFFFF
<= 0xFFFF FFFF
EUI-64
Other
Middle == 0xFFFE
Not in Above
23.74
37.89
6.87
11.00
9.81
0.92
9.77
23.74
61.63
68.49
79.50
89.31
90.23
5.83
5.94
4.76
5.50
14.50
4.92
5.83
11.77
16.53
22.03
36.53
41.45
100.00
58.55
100.00
Finally, we turn to the host ID portion—low-order 64 bits—
of each address. In table VI we classify each address into one of
several allocation ranges based on use of a decreasing number
of leading zeros or use of the EUI-64 scheme. We ﬁnd nearly
a quarter of routers and 6% of servers use the value of 1 as the
host id, and that scanning just the lower quarter—16 bits—of
the theoretical host ID space will identify 80% of the open
routers and 22% of the open servers. The address assignments
are therefore extremely concentrated and an attacker could get
signiﬁcant coverage at a miniscule fraction of the cost of a full
scan (216/264 or just 4×10−15 of addresses). Further, we ﬁnd
EUI-64-derived addresses in just under 1% of the routers and
nearly 5% of servers. We also ﬁnd that the 24-bit vendor ID
portion of the host ID shows eight vendors account for 46% of
the routers and 69% of the servers. This reduces the search space
to the low-order 24 bits, which, even with random assignment,
is tractable to scan.2 A 1 Gbps (1.4 Mpps) scanner [22], could
scan all of the categories in table VI except for “Other” and
including only the top eight most common EUI-64 vendor IDs
on any given subnet in 53 minutes. In our dataset this would
identify 90% of routers and 40% of servers at a minuscule
fraction of the cost of scanning a full IPv6 64-bit address block
at that rate (418 thousand years). Given these numbers and the
addressing schemes we saw, brute force scanning for servers
and routers, while not exhaustive or foolproof, is still largely
feasible for enumerating the majority of IPv6 hosts on a subnet.
With preﬁxes easily identiﬁable and most subnets using just
one of 270 values, we conclude that scanning is still a viable
way to identify large fractions of hosts within networks, even if
complete scanning of the IPv6 address space is impracticable.
Thus, our main ﬁndings reporting greater openness in IPv6
may be exploitable not just by hostname but also via brute
force scans, especially if they target a single network preﬁx.
One word of caution for researchers interested in applying
scanning as a technique for brute-force measurement in IPv6:
2MAC addresses are often assigned sequentially as the network cards are
manufactured. Thus, they are not uniformly random, and one can expect to ﬁnd
less entropy within large organizations in EUI-64-derived IP addresses [28].
there is a known severe denial of service condition that can be
triggered in many older or improperly conﬁgured IPv6 routers
due to memory exhaustion from incomplete neighbor discovery
entries (see e.g., [5]).
IX. RELATED WORK
Standards and deployment guides (e.g., [14], [23], [26],
[32]) have been urging operators to apply ﬁrewall rules and
access control lists for IPv6 in parity with IPv4 as part of their
deployment of IPv6. Unfortunately, security researchers as
well as RFC authors have lamented that in practice: “networks
tend to overlook IPv6 security controls: [often] there is no
parity in the security controls [between] IPv6 and IPv4” [5],
and “in new IPv6 deployments it has been common to see
IPv6 trafﬁc enabled but none of the typical access control
mechanisms enabled for IPv6” [15]. Beyond the quotes, we