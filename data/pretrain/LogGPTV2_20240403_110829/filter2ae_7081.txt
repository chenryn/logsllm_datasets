# CVE-2019-0703 漏洞根源分析

#### 译文声明
本文为翻译文章，原文作者为 Check Point Research，来源网址：[research.checkpoint.com](https://research.checkpoint.com)。译文仅供参考，具体内容及含义以原文为准。

---

微软将 CVE-2019-0703 描述为 Windows SMB 服务器处理特定请求时发生的信息泄露漏洞。成功利用此漏洞的攻击者可以伪造数据包，从而从服务器窃取信息，导致敏感数据泄露。

为了利用该漏洞，攻击者需要通过认证并向受影响的 Windows SMB 服务器发送 SMB 消息。安全更新通过修正 Windows SMB 服务器处理经过认证的请求的方式来修复该漏洞。

然而，研究人员发现了一些不同的情况。他们认为，该漏洞实际上与从 Windows 命名管道（Named Pipes）查询信息的机制相关，而并非是 SMB 协议或其实现中的问题。尽管目前该漏洞是通过 SMB 触发的，但仍然存在其他方式来利用它，例如使用 `NtQueryInformationFile` Windows API 调用，而这与 SMB 无关。

该漏洞位于 `npfs.sys`（命名管道文件系统驱动程序）中的 `NpQueryInternalInfo` 函数中。`npfs.sys` 用于查询命名管道并返回一个文件引用数的值，而微软官方文档显示该值必须由文件系统分配，并且对文件或目录所在的卷是唯一的。研究人员分析表明，实际返回的值并不是文件引用数，而是一个指向内核结构 CCB（Client Control Block）的指针。这个结构在 `npfs.sys` 中没有定义，但在 ReactOS 项目中有部分定义，即 `NP_CCB`。显然，这不是应该返回的值，泄露的结构可以被攻击者利用。

### 泄露的对象是 CCB 结构

为了触发该信息泄露漏洞，可以通过 `ntdll.dll` 的 `NtQueryInformationFile` 存根进行以下参数调用：
- `FileHandle`：命名管道的句柄（例如 `\.\pipe\browser`）。
- `FileInformationClass`：`FileInternalInformation`（等于 0x6）。

调用后，可以得到如下的调用栈：

![图9: 与从用户模式调用 `NtQueryInformationFile` 相关的内核模式调用栈](image_url)

正如前面所述，该漏洞可以通过 SMB 触发。确定被攻击的操作系统的位数以及覆盖泄露结构的方法可能导致远程代码执行。

为了利用该漏洞，首先需要建立到受害者机器上的命名管道的 SMB 连接，如下图所示：

![图10: 证明建立了到 `pipebrowser` 命名管道 (FID 0x4000) 的 SMB 包网络抓包](image_url)

然后可以使用 `0x32 SMB` 命令 (`SMB_COM_TRANSACTION2`) 和 `0x7` 子命令 (`TRANS2_QUERY_FILE_INFORMATION`) 来查询关于打开的管道的信息。后者有一个名为 `InformationLevel` 的字段，用于描述从服务器提取的信息类型。

如果服务器在协商响应中声明了名为 `Infolevel Passthru` 的功能作为早期协商信息，则还可以提取更多信息，例如在服务器上提供原生文件信息。这样，前者的能力允许其提供名为 `Pass-thru Information Level` 的代码数（客户端）来直接与服务器上另一个名为 `Information Class` 的代码数映射。该值与 `NtQueryInformationFile API` 的 `FileInformationClass` 参数相对应，其中指定了从服务器查询什么类型的文件信息。

为了使用 `pass-thru Information Levels` 查询服务器上的文件，只需在请求的 `Information Class` 中添加值 `0x3e8 (SMB_INFO_PASSTHROUGH)`。例如，如果要获取 `FileInternalInformation` 信息类，只需将之前提到的值添加到信息级别中，最终会得到值 `0x3ee`。

在本例中，使用相同的 `Information Level` 作为 `TRANS2_QUERY_FILE_INFORMATION` 子命令的参数，通过从 `srv.sys` 驱动程序（SMB 驱动程序）中调用 `NtQueryInformationFile` 来触发该漏洞。后者会从 `npfs.sys` 中调用有漏洞的 `NpQueryInternalInfo`，如下所示：

![图11: 内核模式调用栈](image_url)

研究人员通过之前提到的信息级别发布了一个到 Trans2 的请求来查询文件信息，并在响应中获取了 CCB 泄露的指针。

![图12: Wireshark 中获取的触发该漏洞的视图](image_url)

为了确认该漏洞的根源，研究人员分析了 `npfs.sys` 文件补丁代码和未修复版本的差异：

![图13: 补丁差异分析](image_url)

可以看出，在有漏洞的代码中，`out_buffer` 参数会返回给调用者，然后客户端包含一个指向 `ClientControlBlock (NP_CCB)` 的指针，而不是文件引用数。在补丁版本的代码中，`ClientControlBlock` 的 `0xa0` 和 `0xa4` 被写入 `out_buffer`。

通过从信息泄露中获得的信息，可以在受害者的机器上执行代码。具体来说，需要了解 CCB 结构。其中一个成员指向另一个结构 `struct x`。该结构包含一个指向函数的指针，该函数在连接到命名管道终止时被调用，我们称之为管道析构函数。

在 APT3 的漏洞实现中，HAL 堆使用了 `struct x` 的 shellcode 和实例。实例中包含一个指向管道析构函数位置的 shellcode 的指针。因此，如果知道泄露的 CCB 结构，就可以覆盖其指向 `struct x` 的指针，使其指向伪造的实例。当连接关闭时，shellcode 将被触发，攻击者就可以在受害者的机器上执行任意代码。