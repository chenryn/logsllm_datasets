:::
:::
:::
# Step 2: Investigate encoded PowerShell commands
The seconds step also shows all the commands that have been executed by
each device. This is done by decoding the commands in order to be
investigated. This is then listed by DeviceName the amount of unique
queries that have been executed by that particial device in the selected
timeframe. The image below shows the results of this step.
![Encoded PowerShell Executions](/svg/loading.min.svg){.lazyload
data-src="/images/Hunting-encoded-powershell/step2results.png"
data-srcset="/images/Hunting-encoded-powershell/step2results.png, /images/Hunting-encoded-powershell/step2results.png 1.5x, /images/Hunting-encoded-powershell/step2results.png 2x"
data-sizes="auto"}
The question what defines a malicious PowerShell command is the same as
with clear text executions. But there are a few indicators that can
indicate suspicious PowerShell usage, these could be:
-   Downloading Remote Files (directly from an IP address)
-   Attempting to bypass execution policies
-   Trying to modify registry run keys
-   Clearing (security) logs or disabling logging
If you identify one of the above indicators in the query results, take
some time to investigate before moving to the next steps.
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Found suspicious PowerShell Executions?
:::
::: details-content
::: admonition-content
If you have found suspicious PowerShell executions in your environment
it would be recommended to perform some incident response queries, to
determine the impact. In the GitHub repository the category
[DFIR](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/tree/main/DFIR){target="_blank"
rel="noopener noreffer"} can be used to run those queries, to quickly
list malicious activities.
:::
:::
:::
Queries for this step can be found on my GitHub: [MDE & Sentinel KQL
Query](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/PowerShellEncodedCommandsExecuted.md){target="_blank"
rel="noopener noreffer"}
# Step 3: Reconnaissance Activities
In this step we further build upon our previous queries to specifically
look for reconnaissance activities. We are now going to enrich the
privious query with commands that can be related to recon activities.
For this step a predifined list of recon activities is defined:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let ReconVariables = dynamic(['Get-ADGroupMember', 'Get-ADComputer', 'Get-ADUser',
 'Get-NetGPOGroup', 'net user', 'whoami', 'net group', 'hostname', 'netsh firewall', 
 'tasklist', 'arp', 'systeminfo']);
```
:::
This results in the following query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let EncodedList = dynamic(['-encodedcommand', '-enc']); 
// For more results use line below en filter one above. This will also return more FPs.
// let EncodedList = dynamic(['-encodedcommand', '-enc', '-e']);
let ReconVariables = dynamic(['Get-ADGroupMember', 'Get-ADComputer', 'Get-ADUser', 
'Get-NetGPOGroup', 'net user', 'whoami', 'net group', 'hostname', 'netsh firewall', 
'tasklist', 'arp', 'systeminfo']);
let TimeFrame = 48h; //Customizable h = hours, d = days
DeviceProcessEvents
| where Timestamp > ago(TimeFrame)
| where ProcessCommandLine contains "powershell" or InitiatingProcessCommandLine contains "powershell"
| where ProcessCommandLine has_any (EncodedList) or InitiatingProcessCommandLine has_any (EncodedList)
| extend base64String = extract(@'\s+([A-Za-z0-9+/]{20}\S+$)', 1, ProcessCommandLine)
| extend DecodedCommandLine = base64_decode_tostring(base64String)
| extend DecodedCommandLineReplaceEmptyPlaces = replace_string(DecodedCommandLine, '\u0000', '')
| where isnotempty(base64String) and isnotempty(DecodedCommandLineReplaceEmptyPlaces)
// Search in the decoded commandline for Recon variables
| where DecodedCommandLineReplaceEmptyPlaces has_any (ReconVariables)
| project
     Timestamp,
     ActionType,
     DecodedCommandLineReplaceEmptyPlaces,
     ProcessCommandLine,
     InitiatingProcessCommandLine,
     DeviceName,
     AccountName,
     AccountDomain
```
:::
Detailed queries for this step can be found on my GitHub: [MDE &
Sentinel KQL
Query](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/PowerShellEncodedReconActivities.md){target="_blank"
rel="noopener noreffer"}
# Step 4: Encoded WebRequests
Similar to the previous step we explicitly search for encoded commands
in combination with a different indicator, this will yield better
results. Thistime the additional indicator is focussed on encoded
downloads. This technique is often used by attackers to evade their
download actions, or to limit the impact on custom detection rules, that
are only scoped on normal commands.
The downloads list that is used in this detection:
``` {tabindex="0"}
let DownloadVariables = dynamic(['WebClient', 'DownloadFile', 'DownloadData', 'DownloadString', 'WebRequest', 'Shellcode', 'http', 'https']);
```
This results in the following results, quite interesting right!
![Encoded PowerShell Downloads](/svg/loading.min.svg){.lazyload
data-src="/images/Hunting-encoded-powershell/step4results.png"
data-srcset="/images/Hunting-encoded-powershell/step4results.png, /images/Hunting-encoded-powershell/step4results.png 1.5x, /images/Hunting-encoded-powershell/step4results.png 2x"
data-sizes="auto"}
Detailed queries for this step can be found on my GitHub: [MDE &
Sentinel KQL
Query](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/PowerShellEncodedWebRequests.md){target="_blank"
rel="noopener noreffer"}
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Custom Detection & Analytics rules base64
:::
::: details-content
::: admonition-content
I would strongly advise anyone to build custom detections (Defender For
Endpoint) or analytics rules (Sentinel) to detect both recon and
download activities that originate from base64 encoded PowerShell
executions. This could be good indicator. For the KQL code follow the
links for each step, copy the code and wait for a trigger, which
hopefully will never come (or it is the red team ;).
-   [Encoded reconnaissance
    query](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/PowerShellEncodedReconActivities.md){target="_blank"
    rel="noopener noreffer"}
-   [Encoded webrequests
    query](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/PowerShellEncodedDownloads.md){target="_blank"
    rel="noopener noreffer"}
To increase the likelyhood that a encoded PowerShell command has been
executed with malicious intent you can filter on commandlines that have
PowerShell, bypass and one of the encoded PowerShell commands. Note that
you would also filter all malicious scripts that do not have to bypass
the current execution policy.
``` {tabindex="0"}
let EncodedList = dynamic(['-encodedcommand', '-enc', '-e']);
DeviceProcessEvents
| where ProcessCommandLine has_all ('powershell', 'bypass', EncodedList)     
```
:::
:::
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Related Blogs
:::
::: details-content
::: admonition-content
-   [KQL Functions For Security
    Operations](https://kqlquery.com/posts/kql-for-security-operations/){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
> **Questions?** Feel free to reach out to me on any of my socials.
:::
::: {#post-footer .post-footer}
::: post-info
::: post-info-line
::: post-info-mod
Updated on 2023-09-21
:::
:::
::: post-info-line
::: post-info-md
:::
::: post-info-share
[](javascript:void(0); "Share on Twitter"){sharer="twitter"
url="https://kqlquery.com/posts/hunting-encoded-powershell/"
data-title="Threat Hunting: Encoded PowerShell" via="BertJanCyber"
hashtags="KQL,PowerShell"}[](javascript:void(0); "Share on Facebook"){sharer="facebook"
url="https://kqlquery.com/posts/hunting-encoded-powershell/"
hashtag="KQL"}[](javascript:void(0); "Share on Linkedin"){sharer="linkedin"
url="https://kqlquery.com/posts/hunting-encoded-powershell/"}[](javascript:void(0); "Share on Reddit"){sharer="reddit"
url="https://kqlquery.com/posts/hunting-encoded-powershell/"}
:::
:::
:::
::: post-info-more
::: {.section .post-tags}
 [KQL](/tags/kql/), [PowerShell](/tags/powershell/)
:::
::: section
[Back](javascript:void(0);){onclick="window.history.back()"} \| [Home](/)
:::
:::
::: post-nav
[KQL Functions For Security
Operations](/posts/kql-for-security-operations/ "KQL Functions For Security Operations"){.prev
rel="prev"} [Incident Response Part 1: IR on Microsoft Security
Incidents (KQL
edition)](/posts/kql-incident-response/ "Incident Response Part 1: IR on Microsoft Security Incidents (KQL edition)"){.next
rel="next"}
:::
:::
:::
:::
::: footer-container
::: {.footer-line itemscope="" itemtype="http://schema.org/CreativeWork"}
[2023 - 2024]{itemprop="copyrightYear"}[ [Bert-Jan
Pals](/){target="_blank"}]{.author
itemprop="copyrightHolder"} \| [Â©]{.license}
:::
:::
:::
::: {#fixed-buttons}
[](# "Back to Top"){#back-to-top .fixed-button}
[](# "View Comments"){#view-comments .fixed-button}
:::