### 1.1.2 Multiple (De|En) Codings

**Example: URL-Encoding > URL**

In some cases, Base64-encoded data is used in URLs. For example, the following URL:

```
http://mywebsite/login.php?param=Rk9SVy1VUkw/Y2F0PWNsb3ducw==
```

After URL-encoding, it becomes:

```
http://mywebsite/login.php?param=Rk9SVy1VUkw%2FY2F0PWNsb3ducw%3D%3D
```

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.67**

**Structured Parameters in Cookies**

Sometimes, a simple parameter can be a structured one. For instance, consider the following cookie value:

```
SESSION = dXNlcm5hbWU6Y2xvd247cGFzc3dvcmQ6dGhlQ2xvd24h
```

This may appear as a random value used to identify the user session, but it decodes to:

```
SESSION = username:clown;password:theClown!
```

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.68**

**Understanding Data Encoding Types**

It is possible to construct several examples based on multiple encoding/decoding scenarios. The key point here is to understand that identifying different data encoding types is an essential skill for detecting and exploiting various scenarios.

To respect application requirements and properly test a web application, we must detect and consider multiple encoding and decoding operations.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.69**

**Take a Break!**

You’ve been studying quite intently. We recommend taking a quick break and coming back refreshed. ^_^

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.70**

### 1.2 Filtering Basics

**Introduction to Filtering**

A common best practice to protect web applications against malicious attacks is the use of specific input filtering and output encoding controls. These controls can range from simple blacklists to highly restrictive whitelists. In the real world, most implementations fall somewhere in between.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.71**

**Implementing Controls**

Controls can be implemented at different layers in a web application. They can be represented as libraries and APIs (often by naive developers) or, in the best case, by internal specialists or external organizations like OWASP's ESAPI.

Security controls are also present in most common browsers.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.72**

**External Solutions**

Due to the complexity and variety of standards, it is often not feasible to implement internal solutions. External solutions, such as Web Application Firewalls (WAFs), are commonly chosen. WAFs can be either commercial, expensive options or free, open-source solutions like ModSecurity.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.73-75**

**Defining Filter Rules**

The instructions on what a WAF, or generally, a filter should block or allow are defined as rules. Before analyzing different filter implementations, let’s look at the de facto standard used to write these rules: Regular Expressions (RE or RegEx).

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.76**

### 1.2.1 Regular Expressions

**Introduction to Regular Expressions**

Regular expressions (RegEx) are a special sequence of characters used to describe a search pattern. Mastering RegEx is fundamental for understanding how to bypass filters because they are extremely powerful.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.77-78**

**Regex Engines and Flavors**

Many programming languages and text processors support regular expressions. The implementation system of regex functionality is called a regular expression engine. There are two main types of regex engines: Deterministic Finite Automaton (DFA) and Non-Deterministic Finite Automaton (NFA).

- **DFA Engine**: Faster due to its deterministic approach but lacks features like lazy quantifiers and backreferences.
- **NFA Engine**: More popular as it supports more features and works in a way that humans tend to think.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.79-81**

**Metacharacters and Shorthand Classes**

- **Metacharacters**: Special characters with specific meanings, such as `^` (start of line), `$` (end of line), `()` (grouping), `[]` (character class), etc.
- **Shorthand Character Classes**: Commonly used character classes, such as `\d` (digit), `\w` (word character), `\s` (whitespace), etc.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.82-86**

**Non-Printing Characters and Unicode**

- **Non-Printing Characters**: Control characters used to format displayed/printed information, such as `\n` (newline), `\t` (tab), etc.
- **Unicode**: Regular expression flavors that work with Unicode use specific meta-sequences to match code points, such as `\u` and `\x{}`.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.87-94**

### 1.2.2 Web Application Firewall

**Behavior Modes of WAFs**

- **Whitelisting Mode**: Allows only explicitly defined inputs. This mode is the most secure but requires deep knowledge of the application and is prone to false positives.
- **Blacklisting Mode**: Blocks explicitly denied inputs. This mode is easier to implement but is less secure as it is difficult to predict and track all possible attack payloads.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.95-100**

**Bypassing WAFs**

Over the years, security researchers have discovered many ways to bypass WAFs. The following examples are simple rules to follow to deceive naive WAFs.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.100**