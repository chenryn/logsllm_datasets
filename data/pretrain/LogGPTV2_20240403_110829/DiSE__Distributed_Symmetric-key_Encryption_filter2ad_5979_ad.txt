if it satisﬁes both the pseudorandomness and correctness (Def. 5.4) requirements.
A DPRF is pseudorandom if no adversary can guess the PRF value on an input for which
it hasn’t obtained shares from at least t parties. It is correct if no adversary can generate
shares which lead to an incorrect PRF value. We deﬁne these properties formally below.
Deﬁnition 5.3 (Pseudorandomness) A DPRF DP := (Setup, Eval, Combine) is pseudo-
random if for all PPT adversaries A, there exists a negligible function negl such that
|Pr [PseudoRandDP,A(1κ, 0) = 1] − Pr [PseudoRandDP,A(1κ, 1) = 1]| ≤ negl(κ),
where PseudoRand is deﬁned below.
PseudoRandDP,A(1κ, b):
− Initialization. Run Setup(1κ, n, t) to get ((sk1, . . . , skn), pp). Give pp to A. Initialize a
list L := ∅ to record the set of values for which A may know the PRF outputs.
− Corruption. Receive the set of corrupt parties C from A, where |C| < t. Give the secret
keys {ski}i∈C of these parties to A. Deﬁne the corruption gap as g := t − |C|.
− Pre-challenge evaluation queries.
In response to A’s evaluation query (Eval, x, i) for
some i ∈ [n] \ C, return Eval(ski, x, pp) to A. Repeat this step as many times as A
desires.
16
− Build the list. Add an x to L if |{i | A made a (Eval, x, i) query}| ≥ g. In other words, if
A contacts at least g honest parties on a value x, it has enough information to compute
the PRF output on x.
− Challenge. A outputs (Challenge, x(cid:63), S,{(i, z(cid:63)
i )}i∈U ) such that |S| ≥ t and U ⊆ S ∩ C.
If x(cid:63) ∈ L, output 0 and stop. Let zi ← Eval(ski, x, pp) for i ∈ S \ U and z(cid:63) := Combine
If z(cid:63) = ⊥, return ⊥. Else, if b = 0, return z(cid:63);
({(i, zi)}i∈S\U ∪ {(i, z(cid:63)
otherwise, return a uniformly random value.
i )}i∈U , pp).
− Post-challenge evaluation queries. Same as the pre-challenge phase except that if A
makes a query of the form (Eval, x(cid:63), i) for some i ∈ [n] \ C and i is the g-th party it
contacted, then output 0 and stop.
− Guess. Finally, A returns a guess b(cid:48). Output b(cid:48).
Deﬁnition 5.4 (Correctness) A DPRF DP := (Setup, Eval, Combine) is correct if for all
PPT adversaries A, there exists a negligible function negl such that the following game
outputs 1 with probability at least 1 − negl(κ).
− Initialization. Run Setup(1κ, n, t) to get ((sk1, . . . , skn), pp). Give pp to A.
− Corruption. Receive the set of corrupt parties C from A, where |C| < t. Give the
secret-keys {ski}i∈C of these parties to A.
− Evaluation In response to A’s evaluation query (Eval, x, i) for some i ∈ [n] \ C, return
Eval(ski, x, pp) to A. Repeat this step as many times as A desires.
− Computation. Receive a set S of size at least t, an input x(cid:63), and shares {(i, z(cid:63)
from A. Let zj ← Eval(skj, x(cid:63), pp) for j ∈ S and z(cid:48)
let z := Combine({(j, zj)}j∈S, pp) and z(cid:63) := Combine({(i, z(cid:48)
Output 1 if z(cid:63) ∈ {z,⊥}; else, output 0.
i )}i∈S∩C
i ← Eval(ski, x(cid:63), pp) for i ∈ S\C. Also,
i )}i∈S∩C, pp).
i)}i∈S\C ∪ {(i, z(cid:63)
6 Threshold Symmetric-key Encryption: Deﬁnitions
In this section, we introduce threshold symmetric-key encryption (TSE) and formalize notions
of correctness, message privacy, and authenticity for such schemes. We start by specifying
the algorithms that constitute a TSE scheme.
Deﬁnition 6.1 (Threshold Symmetric-key Encryption) A threshold symmetric-key en-
cryption scheme TSE is given by a tuple (Setup, DistEnc, DistDec) that satisﬁes the consistency
property below.
– Setup(1κ, n, t) → ((cid:74)sk(cid:75)[n], pp) : Setup is a randomized algorithm that takes the security
– DistEnc((cid:74)sk(cid:75)[n], [j : m, S], pp) → [j : c/⊥] : DistEnc is a distributed protocol through
parameter as input, and outputs n secret keys sk1, . . . , skn and public parameters pp.
The i-th secret key ski is given to party i.
which a party j encrypts a message m with the help of parties in a set S. At the end
of the protocol, j outputs a ciphertext c (or ⊥ to denote failure). All the other parties
have no output.
17
– DistDec((cid:74)sk(cid:75)[n], [j : c, S], pp) → [j : m/⊥] : DistDec is a distributed protocol through
which a party j decrypts a ciphertext c with the help of parties in a set S. At the end
of the protocol, j outputs a message m (or ⊥ to denote failure). All the other parties
have no output.
for any message m, any two sets S, S(cid:48) ⊂ [n] such that |S|,|S(cid:48)| ≥ t, and any two parties
j ∈ S, j(cid:48) ∈ S(cid:48), if all the parties behave honestly, then there exists a negligible function negl
such that
Consistency. For any n, t ∈ N such that t ≤ n, all ((cid:74)sk(cid:75)[n], pp) output by Setup(1κ),
(cid:104)
[j(cid:48) : m] ← DistDec((cid:74)sk(cid:75)[n], [j(cid:48) : c, S(cid:48)], pp) |
Pr
[j : c] ← DistEnc((cid:74)sk(cid:75)[n], [j : m, S], pp)
(cid:105) ≥ 1 − negl(κ),
where the probability is over the random coin tosses of the parties involved in DistEnc and
DistDec.
Deﬁnition 6.2 (Security of TSE) Let TSE be a threshold symmetric-key encryption scheme.
We say that TSE is (strongly)-secure against malicious adversaries if it satisﬁes the (strong)-
correctness (Def. 6.4), message privacy (Def. 6.6) and (strong)-authenticity (Def. 6.8) re-
quirements.
In the security requirements that follow, the adversary is allowed to make encryption and
decryption queries. In a query, it will specify a special party j who will initiate the protocol,
a set of parties whom j will contact, and the input of j (message or ciphertext). The protocol
will be executed as one would expect: challenger will play the role of all parties not in the
control of adversary and exchange messages with it on their behalf.
If j is honest, then
challenger will initiate the protocol, otherwise, the adversary will initiate it. For 2-round
protocols, the interaction between the challenger and adversary will be quite simple. If j
is honest, then the challenger will send every message intended for a corrupt party to the
adversary on behalf of j and wait to get a response from it. Challenger will then combine
the response together with the response of honest parties (which it generates itself) to get
the ﬁnal output. On the other hand, when j is corrupt, the challenger is just supposed to
respond to the messages that adversary sends to the honest parties.
From here on, we will not be explicit about the details of a protocol execution. We
will just state that an instance of encryption or decryption protocol is run when adversary
requests for it. Also note that although all the games below have separate encryption and
decryption phases, this is only to make the deﬁnitions easy to read. The adversary is not
restricted in this sense and can alternate between encryption and decryption queries.
Remark 6.3 (Relation with standard deﬁnitions) Note that our security notion can
also be thought of as a generalization of standard (non-interactive) authenticated encryption.
In particular, setting n = 1 and t = 0 one gets standard CPA-security from our message pri-
vacy deﬁnition (Def. 6.6) and standard ciphertext integrity from our authenticity deﬁnition
(Def. 6.8).
6.1 Correctness
A TSE scheme is correct if whenever DistEnc outputs a ciphertext c for an input message
m (i.e., it does not fail), then DistDec outputs either m or ⊥ when run with c as input.
18
An adversary should not be able to inﬂuence the decryption protocol to produce a message
diﬀerent from m. We also consider strong-correctness which additionally requires that c
should only decrypt to m (not even ⊥) when decryption is performed honestly.
Deﬁnition 6.4 (Correctness) A TSE scheme TSE := (Setup, DistEnc, DistDec) is correct
if for all PPT adversaries A, there exists a negligible function negl such that the following
game outputs 1 with probability at least 1 − negl(κ).
− Initialization. Run Setup(1κ) to get ((cid:74)sk(cid:75)[n], pp). Give pp to A.
− Corruption. Receive the set of corrupt parties C from A, where |C| < t. Give the
secret-keys {ski}i∈C of these parties to A.
− Encryption. Receive (Encrypt, j, m, S) from A where j ∈ S \ C and |S| ≥ t. Initiate
the protocol DistEnc from party j with inputs m and S. If j outputs ⊥ at the end, then
output 1 and stop. Else, let c be the output ciphertext.
− Decryption. Receive (Decrypt, j(cid:48), S(cid:48)) from A where j(cid:48) ∈ S(cid:48) \ C and |S(cid:48)| ≥ t. Initiate the
protocol DistDec from party j(cid:48) with inputs c, S(cid:48) and pp.
− Output. Output 1 if and only if j(cid:48) outputs m or ⊥.
A strongly-correct TSE scheme is a correct TSE scheme but with a diﬀerent output step.
Speciﬁcally, output 1 if and only if:
− If all parties in S(cid:48) behave honestly, then j(cid:48) outputs m; or,
− If corrupt parties in S(cid:48) deviate from the protocol, then j(cid:48) outputs m or ⊥.
Remark 6.5 (Correctness for diﬀerent applications) In applications like key manage-
ment, ciphertexts generated at some point may be decrypted much later when the plaintext
is no longer available. In such cases, malformed ciphertexts must be immediately detected,
hence strong correctness is needed. In applications like network authentication (Kerberos)
or IoT-based payments where ciphertexts are typically decrypted shortly after encryption, the
weaker notion of TSE suﬃces. In such cases, the outcome of decryption is known immediately
and, if it is a failure, one can run another encryption session with a diﬀerent set of parties.
6.2 Message privacy
We allow for two types of encryption queries in the message privacy game: 1) the adversary
can initiate an encryption session to obtain both the ﬁnal ciphertext as well as the transcripts
of the parties it corrupts. 2) it can make an indirect encryption query where it invokes an
honest party to initiate an encryption session using a message of its choice. To make the
deﬁnition stronger, we provide the ciphertext output by the honest party to the adversary.
However, this alone is not suﬃcient to capture full message privacy in the distributed
setting. A decryption session initiated by an honest party on any ciphertext of adversary’s
choice (including the challenge) should not reveal what the decrypted message is either. Thus,
we must allow the adversary to make such queries as well.
19
Deﬁnition 6.6 (Message privacy) A TSE scheme TSE := (Setup, DistEnc, DistDec) satis-
ﬁes message privacy if for all PPT adversaries A, there exists a negligible function negl such
that
(cid:12)(cid:12)Pr(cid:2)MsgPrivTSE,A(1κ, 0) = 1(cid:3) − Pr(cid:2)MsgPrivTSE,A(1κ, 1) = 1(cid:3)(cid:12)(cid:12) ≤ negl(κ),
where MsgPriv is deﬁned below.
MsgPrivTSE,A(1κ, b):
− Initialization. Run Setup(1κ, n, t) to get ((cid:74)sk(cid:75)[n], pp). Give pp to A.
− Corruption. Receive the set of corrupt parties C from A, where |C| < t. Give the secret
keys {ski}i∈C of these parties to A.
− Pre-challenge encryption queries. In response to A’s encryption query (Encrypt, j, m, S),
where j ∈ S and |S| ≥ t, run an instance of the protocol DistEnc with A8. If j /∈ C, then
party j initiates the protocol with inputs m and S, and the output of j is given to A.
Repeat this step as many times as A desires.
− Pre-challenge indirect decryption queries. In response to A’s decryption query (Decrypt,
j, c, S), where j ∈ S\C and |S| ≥ t, party j initiates DistDec with inputs c and S. Repeat
this step as many times as A desires.
− Challenge. A outputs (Challenge, j(cid:63), m0, m1, S(cid:63)) where |m0| = |m1|, j(cid:63) ∈ S(cid:63) \ C and
|S(cid:63)| ≥ t. Initiate the protocol DistEnc from party j(cid:63) with inputs mb and S(cid:63). Give c(cid:63) (or
⊥) output by j(cid:63) as the challenge to A.
− Post-challenge encryption queries. Repeat pre-challenge encryption phase.
− Post-challenge indirect decryption queries. Repeat pre-challenge decryption phase.
− Guess. Finally, A returns a guess b(cid:48). Output b(cid:48).
Remark 6.7 When DistEnc is run in the challenge phase with S(cid:63) ∩ C (cid:54)= ∅, corrupt parties
can easily cause the protocol to fail, leading j(cid:63) to output ⊥. The deﬁnition above ensures that
the probability that this happens cannot depend on the message mb.
6.3 Authenticity
As discussed in the overview section (Section 2.1), we cannot directly generalize the standard
(non-interactive) authenticity deﬁnition to our setting for multiple reasons. First, the ability
to make decryption queries gives additional power to the adversary. Second, ciphertexts
generated in indirect encryption and decryption queries should remain unpredictable to the
adversary or else they would enable successful forgeries. Thus, the deﬁnition we present below
departs signiﬁcantly from the non-interactive version.
In the deﬁnition, the variable g captures the minimum number of honest parties an adver-
sary must contact in order to get enough information to generate one ciphertext. The variable
ct counts the total number of times honest parties are contacted in encryption/decryption
protocols initiated by corrupt parties. Thus, the deﬁnition requires that an eﬃcient adversary
should only be able to produce (cid:98)ct/g(cid:99) ciphertexts at the end of the game.
8Note that j can be either honest or corrupt here. So both types of encryption queries are captured.
20
We present two variants of the deﬁnition. In the ﬁrst notion, the forged ciphertexts output
by an adversary at the end of the game are decrypted in an honest manner, i.e., all the parties
involved in decryption follow the protocol. On the other hand, our stronger authenticity
notion allows the adversary to inﬂuence the decryption process. A forged ciphertext that may
otherwise not decrypt successfully, could be decryptable if corrupt parties manipulate their
responses. Thus, there could be ciphertexts that are valid forgeries in the strong authenticity
game but not in the standard one.
Recall that a targeted decryption query provides a way for an adversary to ask an honest
party to initiate a decryption session on a ciphertext that was previously generated by some
honest party, since such a ciphertext may not be available to the adversary. Just as in regular
encryption/decryption sessions initiated by honest parties, the counter ct is not updated in a
targeted decryption session because we want to capture that the adversary does not get any
useful information towards generating new ciphertexts in such a session.
Deﬁnition 6.8 (Authenticity) A TSE scheme TSE := (Setup, DistEnc, DistDec) satisﬁes
authenticity if for all PPT adversaries A, there exists a negligible function negl such that
Pr [AUTHTSE,A(1κ) = 1] ≤ negl(κ),
where AUTH is deﬁned below.
AUTHTSE,A(1κ):
− Initialization. Run Setup(1κ, n, t) to get ((cid:74)sk(cid:75)[n], pp). Give pp to A. Initialize a counter
ct := 0 and an ordered list Lctxt := ∅. Below, we assume that for every query, the (j, S)
output by A are such that j ∈ S and |S| ≥ t.
− Corruption. Receive the set of corrupt parties C from A, where |C| < t. Give the
secret keys {ski}i∈C of these parties to A. Deﬁne the gap between the threshold and the
number of corrupt parties as g := t − |C|.
− Encryption queries. On receiving (Encrypt, j, m, S) from A, run the protocol DistEnc
with m, S as the inputs of j. If j ∈ C, increment ct by |S \ C| (number of honest parties
in S). Else, append the ciphertext output by j to Lctxt.
− Decryption queries. On receiving (Decrypt, j, c, S) from A, run the protocol DistDec
with c, S as the inputs of j. If j ∈ C, increment ct by |S \ C|.
− Targeted decryption queries. On receiving (TargetDecrypt, j, (cid:96), S) from A for some
j ∈ S \ C, run DistDec with c, S as the inputs of j, where c is the (cid:96)-th ciphertext in Lctxt.
− Forgery. Let k := (cid:98)ct/g(cid:99). A outputs ((j1, S1, c1), (j2, S2, c2), . . ., (jk+1, Sk+1, ck+1)) such
that j1, . . . , jk+1 /∈ C and cu (cid:54)= cv for any u (cid:54)= v ∈ [k + 1] (ciphertexts are not repeated).
For every i ∈ [k + 1], run an instance of DistDec with ci, Si as the input of party ji.
In that instance, all parties in Si behave honestly. Output 0 if any ji outputs ⊥; else
output 1.
A TSE scheme satisﬁes strong-authenticity if it satisﬁes authenticity but with a slightly
modiﬁed AUTH: In the forgery phase, the restriction on corrupt parties in Si to behave
honestly is removed (for all i ∈ [k + 1]).
21
Remark 6.9 (Authenticity for diﬀerent applications) When protecting data at rest,
an application may require that both encryption and decryption are distributed.
If adver-
sary can also interfere with decryption, the stronger version of authenticity should be used.
In case of authentication tokens generated for an external service, the decryption is likely to
be performed by a third party who holds the full key in a secure environment. Hence, the
weaker notion of authenticity may suﬃce.
As we will see later, our TSE construction requires a stronger property from the underlying
DPRF to achieve the stronger form of authenticity and as a result require the use of zero-
knowledge proofs, but the normal form of authenticity can be achieved without it.
Remark 6.10 (Integrity of plaintexts) In the non-interactive setting for authenticated
encryption, a weaker form of INT-CTXT, called integrity of plaintexts (INT-PTXT) [BN00],
has also been studied. If a forged ciphertext decrypts to a message encrypted earlier by the
adversary, then it is not considered a valid forgery in the INT-PTXT game. One can also
weaken our authenticity deﬁnition in a similar fashion: a sequence of (cid:96) forgeries would be
accepted only if they decrypt to (cid:96) unique messages. See Lemma 7.5 for how this notion comes
up in the distributed setting.
Remark 6.11 (Updating counter for decryption) In our current authenticity deﬁni-
tions, we increment the counter ct only for decryption queries initiated by the adversary
(not for indirect or targeted queries), implying that a ciphertext the adversary could deduce