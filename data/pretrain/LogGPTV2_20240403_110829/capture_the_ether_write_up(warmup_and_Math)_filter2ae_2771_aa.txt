# capture the ether write up(warmup and Math)
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
Capture the
Ether是一款在破解智能合约的过程中学习其安全性的游戏，跟ethernaut也类似，这是它的[地址](https://capturetheether.com/)。
个人感觉质量非常高，比其ethernaut更加贴近实战，因为题目比较多，下面主要先放出Math部分的write
up，这部分分值最高同时质量也相对较高，希望大家玩得愉快，其它部分等做完一起发吧
## Warmup
这一部分是上手的教程，玩过ethernaut的同学应该就很熟悉了，也是在Ropsten测试网上的练习，在这我也就不多讲了
###  0x1. Deploy a contract
第一步是了解怎么操作部署合约，关卡里也写得很清楚了，首先按照metamask，可以直接在chrome的扩展商店搜索安装，然后切换到Ropsten测试链，当然首先是创建钱包设置密码，然后点击Buy按钮去水龙头取一些ether回来
接下来点击页面右边的红色的deploy即可然后在弹出的交易确认里点击submit即可成功将页面所示的合约部署到测试链上，接下来再点击check并确认交易即可
###  0x2. Call me
这个挑战的目的是让你调用一下部署的合约里的callme函数，方法其实很多，比较简单的我们可以直接在remix里进行调用，将合约代码复制过去后，先编译一下，然后在Run里面将环境切换为injected
web3，然后在下面的deploy处将我们挑战的页面里给出的合约地址填上，点击at address即可  
接下来在下方即可直接调用callme函数
调用之后点击isComplete就会发现已经变为true，然后即可返回挑战进行check
###  0x3. Choose a nickname
这一关是让我们设置自己的昵称，也就是在排行榜上显示的名字，其实也是调用个函数的事，操作跟上面一样，合约选择CaptureTheEther，地址填上，调用setNickname函数即可，注意参数填上自己昵称的16进制格式，然后用nicknameOf函数就能看到结果了
接下来返回挑战点击begin game按钮就会部署一个合约来检查你是否设置了昵称，check以后就能正式开始我们的闯关之旅了
## Math
这部分挑战是有关solidity中的数学运算
###  0x1. Token sale
    pragma solidity ^0.4.21;
    contract TokenSaleChallenge {
        mapping(address => uint256) public balanceOf;
        uint256 constant PRICE_PER_TOKEN = 1 ether;
        function TokenSaleChallenge(address _player) public payable {
            require(msg.value == 1 ether);
        }
        function isComplete() public view returns (bool) {
            return address(this).balance = numTokens);
            balanceOf[msg.sender] -= numTokens;
            msg.sender.transfer(numTokens * PRICE_PER_TOKEN);
        }
    }
这个挑战合约实现了一个基本的买卖过程，通过buy我们可以买入token，通过sell我们可以消耗token，而目标是使合约拥有的balance小于1
ether，因为我们部署合约时已经为合约存入了1 ether，所以目标就是如何动员这不属于我们的ether
既然是在math类型下，肯定要在合约的算术运算上找漏洞，这里很明显在buy函数内就存在上溢，关键就在于此处的判断
> require(msg.value == numTokens * PRICE_PER_TOKEN);
此处的msg.value是以ether为单位，因为一个PRICE_PRE_TOKEN就是1
ether，这里我们需要明白在以太坊里最小的单位是wei，所以此处的1 ether事实上也就是10^18 wei，即其值的大小为10^18
wei，这样就满足我们溢出的条件了，因为以太坊处理数据是以256位为单位，我们传入一个较大的numTokens，乘法运算溢出后所需的mag.value就非常小了
这里我们的numTokens就选择可以使该运算溢出的最小值，这样所需的value也最少，结果如下:
然后就可以去买token了
得到了巨多的token
然后sell 1个ether即可，毕竟也只能用这么多
###  0x2. Token whale
    pragma solidity ^0.4.21;
    contract TokenWhaleChallenge {
        address player;
        uint256 public totalSupply;
        mapping(address => uint256) public balanceOf;
        mapping(address => mapping(address => uint256)) public allowance;
        string public name = "Simple ERC20 Token";
        string public symbol = "SET";
        uint8 public decimals = 18;
        function TokenWhaleChallenge(address _player) public {
            player = _player;
            totalSupply = 1000;
            balanceOf[player] = 1000;
        }
        function isComplete() public view returns (bool) {
            return balanceOf[player] >= 1000000;
        }
        event Transfer(address indexed from, address indexed to, uint256 value);
        function _transfer(address to, uint256 value) internal {
            balanceOf[msg.sender] -= value;
            balanceOf[to] += value;
            emit Transfer(msg.sender, to, value);
        }
        function transfer(address to, uint256 value) public {
            require(balanceOf[msg.sender] >= value);
            require(balanceOf[to] + value >= balanceOf[to]);
            _transfer(to, value);
        }
        event Approval(address indexed owner, address indexed spender, uint256 value);
        function approve(address spender, uint256 value) public {
            allowance[msg.sender][spender] = value;
            emit Approval(msg.sender, spender, value);
        }
        function transferFrom(address from, address to, uint256 value) public {
            require(balanceOf[from] >= value);
            require(balanceOf[to] + value >= balanceOf[to]);
            require(allowance[from][msg.sender] >= value);
            allowance[from][msg.sender] -= value;
            _transfer(to, value);
        }
    }
又是一道Token题，有了上一题的经验估计这题也是对溢出的利用，那么先来找找溢出点，粗略看一下很容易就发现_transfer函数没有进行溢出的检查，同时注意到它是个内部函数，那么我们来看看在哪可以调用它
transfer与transferFrom函数都可以调用该函数，transfer中对上溢进行了检查，显然不存在问题，重点在于这里的transferFrom函数，我们注意到它的require条件并没有针对msg.sender的balance进行检查，而其下面调用的_transfer函数中却会操作msg.sender的balance，不难发现此处应该是存在下溢的
接下来我们的目标就是以player的身份调用transferFrom函数，看完代码后，我们发现要满足条件就需要有另一个地址来参与，并且需要其balance的值大于我们player的balance以满足下溢条件，这里我就用另一个account来完成测试，直接在metamask里新建即可，然后我们调用transfer函数给这个Account转balance，多少倒是随便，超过一半即可，700，800都行，总数是1000
然后我们调用approve来设置allowance，注意此时需要在metaMask切换到我们的Account
2，value的值也比较随意，只要比你想转的多就行，或者说比player的balance多即可
然后我们就能使用transferFrom函数了，此时切换回我们的player所在的Account，在from填上我们的Account
2，to这里其实随便填个地址即可，但不要是player地址，不然就白溢出了，这里我就选择了Account 3，value在Account
2的balance范围内选个比player的balance多的值即可
然后便拿到了数不完的balance，美滋滋
###  0x3. Retirement fund
    pragma solidity ^0.4.21;
    contract RetirementFundChallenge {
        uint256 startBalance;
        address owner = msg.sender;
        address beneficiary;
        uint256 expiration = now + 10 years;
        function RetirementFundChallenge(address player) public payable {
            require(msg.value == 1 ether);
            beneficiary = player;
            startBalance = msg.value;
        }
        function isComplete() public view returns (bool) {
            return address(this).balance == 0;
        }
        function withdraw() public {
            require(msg.sender == owner);
            if (now  0);
            // penalty is what's left
            msg.sender.transfer(address(this).balance);
        }
    }
这个挑战也有点意思，叫退休基金，介绍里说他要留1
ether养老并且上个锁保证自己10年内都不会取出来，如果他提前取出来的话就把存的钱留十分之一给你，不过这部署的过程花的不还是我的ether么，罢了，这些细节就不要在意了
很显然withdraw函数我们是无法调用的，我们只是个player，那么关注点自然就在collectPenalty，看起来它似乎是无法调用的，满足的条件里需要withdrawn大于零，但是这里startBalance与此合约的balance都是1
ether，那么withdrawn应该一直为0，然而遍寻合约也没见到可以发送ether的位置，事实上这里的考点是以太坊中合约的自毁机制，这是通过selfdestruct函数来实现的，如它的名字所显示的，这是一个自毁函数，当你调用它的时候，它会使该合约无效化并删除该地址的字节码，然后它会把合约里剩余的balance发送给参数所指定的地址，比较特殊的是这笔ether的发送将无视合约的fallback函数，所以它是强制性的，这样的话我们就有手段来修改当前合约的balance值了，更进一步我相信你也发现了此处下溢的存在，withdrawn
> 0就成功被满足了
部署攻击合约：
    contract attack {
        address target = address of your challenge;