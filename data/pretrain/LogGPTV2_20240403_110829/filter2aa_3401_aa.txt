**© Caendra Inc. 2020**
**All Rights Reserved**

**Web Application Penetration Testing (WAPTXv2)**
**Section 01 | Module 01: Encoding and Filtering**

**Table of Contents**
- **Module 01: Encoding and Filtering**
  - 1.1 Data Encoding Basics
  - 1.2 Filtering Basics

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020**

**Learning Objectives**
In this module, we will discuss various types of data encoding, including how to recognize, encode, and decode different formats. We will also cover the basics of filtering and how it works.

---

**1.1 Data Encoding Basics**

Even though web applications serve different purposes and use various technologies, data encoding is a fundamental aspect that cannot be overlooked. From a penetration testing perspective, understanding the type of data encoding used and its functionality is crucial for ensuring that tests are conducted as intended.

**1.1.1 Types of Data Encoding in Web Applications**
- **URL Encoding**
- **HTML Encoding**
- **Base (32|64) Encoding**
- **Unicode Encoding**

**1.1.1.1 URL Encoding**

As specified in RFC 3986, URLs transmitted over the Internet must contain characters within the US-ASCII character set. If unsafe characters are present in a URL, they must be encoded.

URL encoding, or percent-encoding, replaces characters outside the allowed set with a "%" followed by two hexadecimal digits representing the numeric value of the octet.

**Character Encoding Chart for URLs**

| Classification            | Included Characters                                                                 | Encoding Required? |
|---------------------------|-------------------------------------------------------------------------------------|--------------------|
| Safe Characters           | Alphanumeric [0-9a-zA-Z], special characters $-_.+!*'(), and reserved characters   | No                 |
| ASCII Control Characters  | ISO-8859-1 (ISO-Latin) character ranges 00-1F hex (0-31 decimal) and 7F (127 decimal) | Yes                |
| Non-ASCII Characters      | Entire “top half” of the ISO-Latin set 80-FF hex (128-255 decimal)                  | Yes                |
| Reserved Characters       | $ & + , / : ; = ? @ (not including blank space)                                     | Yes*               |
| Unsafe Characters         | Blank/empty space and "  # % { } | \ ^ ~ [ ] `                                       | Yes                |

*Note: Reserved characters only need encoding when not used for their defined, reserved purposes.

**Commonly Encoded Characters in URLs**

| Character | Purpose in URI              | Encoding  |
|-----------|-----------------------------|-----------|
| #         | Separate anchors             | %23       |
| ?         | Separate query string        | %3F       |
| &         | Separate query elements      | %26       |
| %         | Indicates an encoded character | %25       |
| /         | Separate domain and directories | %2F       |
| +         | Indicates a space            | %2B       |
| Space     | Not recommended             | %20 or +  |

**1.1.1.2 HTML Encoding**

In HTML, it is essential to maintain the integrity of URLs and ensure that user agents (browsers, etc.) display data correctly. Two main issues to address are informing the user agent about the character encoding used in the document and preserving the real meaning of characters with special significance.

**1.1.1.2.1 Document Character Encoding**

There are several methods to instruct the user agent on the character encoding used in a document, using HTTP protocol and/or HTML directives.

**Defining Character Encoding Using HTTP**

According to the HTTP 1.1 RFC, documents transmitted via HTTP can include a charset parameter in the Content-Type header to specify the character encoding of the document. For example:

```
Content-Type: text/html; charset=utf-8
```

If not defined, the default charset is ISO-8859-1 (Latin 1).

**Examples in Different Programming Languages**

- **PHP**: 
  ```php
  header('Content-type: text/html; charset=utf-8');
  ```
- **ASP.Net**: 
  ```csharp
  Response.Charset = "utf-8";
  ```
- **JSP**: 
  ```jsp
  <%@ page contentType="text/html; charset=UTF-8" %>
  ```

**Using HTML META Directive**

You can also set the character encoding using the HTML `<meta>` tag. For example, to specify UTF-8 encoding:

```html
<meta charset="UTF-8">
```

**1.1.1.2.2 Character References**

In HTML, some special characters have multiple meanings. To preserve their real meaning, the HTML specification provides a way to escape these characters so they are not interpreted as HTML or other codes.

**Examples of Character References**

- **Named Entity**: 
  ```html
  &lt;
  ```
- **Numeric Decimal**: 
  ```html
  &#60;
  ```
- **Numeric Hexadecimal**: 
  ```html
  &#x3c;
  ```

**Variations in Character References**

- **Numeric Decimal without terminator**:
  ```html
  &#60
  ```
- **One or more zeroes before code**:
  ```html
  &#060
  &#00000060
  ```

**1.1.1.3 Base (36|64) Encoding**

Hexadecimal (Base16) numbers are commonly seen in network MAC addresses, X.509 certificates, Unicode characters, and CSS colors. Other binary-to-text encoding schemes include Base36 and Base64.

**1.1.1.3.1 Base 36 Encoding Scheme**

Base36 is a compact, case-insensitive, alphanumeric numeral system using ASCII characters. The alphabet includes all digits [0-9] and Latin letters [A-Z].

**Conversion Table for Base 36**

| Binary  | Decimal | Hex | Base 36 |
|---------|---------|-----|---------|
| 0000    | 0       | 0   | 0       |
| 0001    | 1       | 1   | 1       |
| 0010    | 2       | 2   | 2       |
| 0011    | 3       | 3   | 3       |
| 0100    | 4       | 4   | 4       |
| 0101    | 5       | 5   | 5       |
| 0110    | 6       | 6   | 6       |
| 0111    | 7       | 7   | 7       |
| 1000    | 8       | 8   | 8       |
| 1001    | 9       | 9   | 9       |
| 1010    | 10      | A   | A       |
| 1011    | 11      | B   | B       |
| 1100    | 12      | C   | C       |
| 1101    | 13      | D   | D       |
| 1110    | 14      | E   | E       |
| 1111    | 15      | F   | F       |

This table continues for higher values, providing a comprehensive conversion reference.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020**