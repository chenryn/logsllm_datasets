© Caendra Inc. 2020
All Rights Reserved
Web Application 
Penetration Testing 
eXtreme
Encod%69ng and 
/^Filtering$/
S e c t i o n  0 1  |  M o d u l e  0 1
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Table of Contents
MODULE 01 | ENCOD%69NG AND /^FILTERING$/
1.1 Data Encoding Basics
1.2 Filtering Basics
|   p.2
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Learning Objectives
In this module we will talk about different types of data 
encoding. 
We will see how to recognize, encode, and decode 
several different formats as well as discuss filters and 
how  they work. 
|   p.3
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
1.1
Data Encoding 
Basics
|  p.4
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Even though web applications have different purposes, 
technologies, etc., the use of data encoding is something 
that cannot be neglected. 
From a penetration testing point of view, understanding 
what kind of data encoding is being used and how it works 
is fundamental in ensuring that the tests are performed as 
intended.
1.1 Data Encoding Basics
|  p.5
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Let’s briefly analyze the main types of data encoding used 
in web-oriented applications:
•
URL encoding
•
HTML encoding
•
Base (32|64) encoding
•
Unicode encoding
1.1.1 Dissecting Encoding Types
|  p.6
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://tools.ietf.org/html/rfc3986#section-2.1
As stated in RFC 3986, URLs sent over the Internet must 
contain characters in the range of the US-ASCII code 
character set.  If unsafe characters are present in a URL, 
encoding them is required.
The URL-encoding, or percent-encoding, replaces 
characters outside the allowed set with a "%" followed by 
the two hexadecimal digits representing the numeric value 
of the octet.
1.1.1.1 URL Encoding
|  p.7
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://perishablepress.com/stop-using-unsafe-characters-in-urls/
The table shown here is a simple character encoding chart that is 
useful in explaining which characters are “safe” and which 
characters should be encoded in URLs.
1.1.1.1 URL Encoding
|  p.8
CLASSIFICATION
INCLUDED CHARACTERS
ENCODING REQUIRED?
Safe characters
Alphanumeric [0-9a-zA-Z], special characters $-_.+!*'(), and reserved characters 
used for their reserved purposes (e.g., question mark used to denote a query 
string)
NO
ASCII Control characters
Includes the ISO-8859-1 (ISO-Latin) character ranges 00-1F hex (0-31 decimal) 
and 7F (127 decimal.)
YES
Non-ASCII characters
Includes the entire “top half” of the ISO-Latin set 80-FF hex (128-255 decimal.)
YES
Reserved characters
$ & + , / : ; = ? @ (not including blank space)
YES*
Unsafe characters
Includes the blank/empty space and "  # % { } | \ ^ ~ [ ] `
YES
* NOTE: Reserved characters only need encoding when not used for their defined, reserved purposes.
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Some commonly encoded characters are:
1.1.1.1 URL Encoding
|  p.9
CHARACTER
PURPOSE IN URI
ENCODING
#
Separate anchors
%23
?
Separate query string
%3F
&
Separate query elements
%24
%
Indicates an encoded character
%25
/
Separate domain and directories
%2F
+
Indicates a space
%2B
Not recommended
%20 or +
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Even in HTML, it is important to consider the information 
integrity of the URL’s and ensure that user agents (browsers 
& co.) display data correctly.
There are two main issues to address: inform the user 
agent on which character encoding is going to be used in 
the document and preserve the real meaning of some 
characters that have special significance.
1.1.1.2 HTML Encoding
|  p.10
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
In order to generate potential attacks and test cases, you 
should not only know how this kind of encoding works, but 
also know how the decoding mechanism work.
1.1.1.2 HTML Encoding
|  p.11
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
There are several ways to instruct the user agent on which 
character encoding has been used in a given document.
These methods use the HTTP protocol and/or HTML 
directives.
1.1.1.2.1 Document Character Encoding
|  p.12
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
https://tools.ietf.org/html/rfc2616
Define character encoding using HTTP
According to HTTP 1.1 RFC, documents transmitted via 
HTTP can send a charset parameter in the header to 
specify the character encoding of the document sent. This 
is the HTTP header: Content-Type. 
If this header is sent, we will see something like this:
Content-Type: text/html; charset=utf-8
1.1.1.2.1 Document Character Encoding
|  p.13
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://en.wikipedia.org/wiki/ISO/IEC_8859-1
Define character encoding using HTTP
The Content-Type header indicates the media type of the 
body sent to the recipient. In the case of the HEAD method, it 
indicates the media type that would have been sent if the 
request had been a GET. If not defined, the RFC defines as 
the default charset the ISO-8859-1.
"8-bit single-byte coded graphic character sets" aka Latin 1
1.1.1.2.1 Document Character Encoding
|  p.14
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Define character encoding using HTTP
To make the server send out the appropriate charset 
information, it is possible to change the server settings or 
use the server-side scripting language.
Let’s look at some examples in different programming 
languages.
1.1.1.2.1 Document Character Encoding
|  p.15
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://www.php.net/header
http://msdn.microsoft.com/en-us/library/system.web.httpresponse
Define character encoding using HTTP
PHP> Uses the header() function to send a raw HTTP header:
header('Content-type: text/html; charset=utf-8');
ASP.Net> Uses the response object:
JSP> Uses the page directive:
1.1.1.2.1 Document Character Encoding
|  p.16
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Define character encoding using HTTP
It is also possible to set the character encoding using the 
HTMLdirective META. For example, this code is useful in 
specifying the character encoding of the current document 
to UTF-8:
With HTML5, is also possible to write: 
1.1.1.2.1 Document Character Encoding
|  p.17
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
In HTML, there are some special characters that can have 
multiple meanings. For example, the character Hello
• a comparison operator in JavaScript
if (x < 7) {
• part of a text message
"…less-than 3 would be written as < 3…"
1.1.1.2.2 Character References
|  p.18
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://www.w3.org/TR/1998/REC-html40-19980424/charset.html#h-5.3
http://www.w3.org/TR/html5/single-page.html#character-references
To preserve the real meaning of characters, the HTML 
specification provides a way to escape these special 
characters so that they are not "confused" as HTML or 
other codes. The following links will take you to the 
respective HTML4 and HTML5 specifications.
1.1.1.2.2 Character References
|  p.19
CHR. REFERENCES
CHR. REFERENCES
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
As the standard states, character references must start 
with a U+0026 AMPERSAND character (&) and following this, 
there are multiple ways to represent character references.
Let’s see some examples. 
1.1.1.2.2 Character References
|  p.20
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity
_references#Character_entity_references_in_HTML
We want to encode the character < (less-than sign):
1.1.1.2.2 Character References
|  p.21
Character Reference
Rule
Encoded 
character
Named entity
& + named character references + ;
&lt;
Numeric Decimal
& + # + D + ;
D = a decimal number
&#60;
Numeric Hexadecimal
& + #x + H + ;
H = an hexadecimal number 
(case-insensitive)
&#x3c;
&#X3C;
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Here we can see some interesting variations:
1.1.1.2.2 Character References
|  p.22
Character Reference
Variation
Encoded character
Numeric Decimal
No terminator (;)
&#60
One or more zeroes before code
&#060
&#00000060
Numeric Hexadecimal
No terminator (;)
&#x3c
One or more zeroes before code
&#0x3c
&#00000x3c
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Everyday, we see hexadecimal (aka Base16) numbers in 
network MAC addresses, X.509 certificates, Unicode 
characters, CSS colors, etc. This encoding scheme is 
frequently used in computer science.
In addition to Base16 encoding, there are other interesting 
binary-to-text encoding schemes: Base36 and Base64
1.1.1.3 Base (36|64) Encoding
|  p.23
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 36 Encoding Scheme
Base36 is an interesting encoding scheme to play. It is the 
most compact, case-insensitive, alphanumeric numeral 
system using ASCII characters. In fact, the scheme’s 
alphabet contains all digits [0-9] and Latin letters [A-Z].
The table on the next slide contains the conversions and 
comparisons with other well-known bases.
1.1.1.3.1 Base 36
|  p.24
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 36 Encoding Scheme
1.1.1.3.1 Base 36
|  p.25
binary
dec
hex
36
0000
0
0
0
0001
1
1
1
0010
2
2
2
0011
3
3
3
0100
4
4
4
0101
5
5
5
0110
6
6
6
0111
7
7
7
1000
8
8
8
1001
9
9
9
1010
10
a
a
1011
11
b
b
1100
12
c
c
binary
dec
hex
36
1101
13
d
d
1110
14
e
e
1111
15
f
f