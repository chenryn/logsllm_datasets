title:A generic construction of useful client puzzles
author:Rui Zhang and
Goichiro Hanaoka and
Hideki Imai
A Generic Construction of Useful Client Puzzles
National Institute of Advanced
National Institute of Advanced
National Institute of Advanced
Goichiro Hanaoka
Hideki Imai
Rui Zhang
Industrial Science and
Technology (AIST), Japan
PI:EMAIL
Industrial Science and
Technology (AIST), Japan
hanaoka-
PI:EMAIL
Industrial Science and
Technology (AIST), Japan
PI:EMAIL
ABSTRACT
Denial of Service (DoS) attacks are serious threats for net-
work societies. For dealing with DoS attacks, Jakobsson
and Juels ﬁrst proposed the notion of useful client puzzles
(UCPs) which simultaneously decrease servers’ burden and
increase clients’. In ACM CCS’04, Diament, Lee, Keromytis,
and Yung introduced the decryption-based UCPs. In this
paper, we give a general framework for constructing such
UCPs which is based on identity-based cryptography along
with well-analyzed symmetric key authenticated encryption
techniques (without random oracles). By using this frame-
work, we can ﬂexibly construct various UCPs according to
diﬀerent types of system requirements. We also give some
instantiations: the ﬁrst is a UCP based on the Boneh-Boyen
Identity based encryption scheme, with provable security in
the standard model. Another one is a UCP based on the
Boneh-Gentry-Hamburg identity-based encryption scheme,
which doesn’t require pairings.
Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protec-
tionAccess controls
General Terms
Security
Keywords
useful client puzzle, identity based KEM, security notions
1.
INTRODUCTION
1.1 Background
Denial of Service (DoS) attacks are practical threats in
the network societies. Since the goal of adversaries is not to
compromise conﬁdentiality or authenticity of data (but to
deplete resources), conventional cryptographic tools cannot
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’09, March 10-12, 2009, Sydney, NSW, Australia
Copyright 2009 ACM 978-1-60558-394-5/09/03 ...$5.00.
deal with this kind of attacks, or even magnify the damage
due to their expensive computational costs. More speciﬁ-
cally, in the scenario of DoS attacks dishonest clients simply
transmit a huge number of ciphertexts (which in fact may
be junk data), and then the server decrypts them and dis-
connects the communication if the decryption results are
invalid. Notice that the computational cost for the server
is the product of cost for one decryption and the number
of ciphertexts, and thus the total cost becomes signiﬁcantly
expensive which disturbs other valid services.
A possible approach for defending against DoS attacks to
enforce the clients to carry out somehow heavy burden be-
fore starting communications (without increasing the server’s
burden). For example, a client is given a one-way function
f (with a small security parameter, e.g. 32-bit security) and
a value y from the server, and the main session will not be
started until the client sends back x such that f (x) = y to
the server. We note that the server can easily verify whether
x is a preimage of y with respect to f with (almost) no com-
putational cost. Then, for launching DoS attacks adversaries
(i.e. dishonest clients) require signiﬁcantly much more com-
putational power than the server. This approach is generally
called client puzzles [14].
In the conventional framework of client puzzles, the clients
are enforced to correctly carry out meaningless heavy com-
putation. If this computation is useful (i.e. originally cru-
cial) for the server, DoS attacks can be more eﬀectively
protected since the server can simultaneously decrease the
server’s burden and increase the clients’. Such client puz-
zles are especially called useful client puzzles (UCPs) [13]. In
ACM CCS’04, Diament, Lee, Keromytis, and Yung showed a
solution for constructing UCPs by using dual receiver cryp-
tosystems [10, 16].
We brieﬂy review the mechanism of the decryption-based
useful client puzzles (UCPs) of [10] here. There is a central-
ized server connected with distributed clients with pair-wise
channels. The adversary’s goal is to deplete the resources
of the server by mimicking log-in requests from legal users.
Similar to [10], we assume a passive adversary that only lis-
tens to its own channel. In normal operations, a client A
sends the log-in request (a ciphertext encrypting the nec-
essary log-in information) to the server. The server then
decrypts the message and authenticates the client. In the
case of DoS attacks, the server will transform A’s log-in re-
quest to a client puzzle and passes it to another client B. In
order to get its own log-in request to be processed, B has
to solve the puzzle and send the solution to the server. The
server will verify this solution, which is an easier task than
70solving it, and process the log-in request of A. If correct,
the server will continue processing client A’s log-in request.
Similarly the server deals with B’s log-in request.
The solution of [10] is elegant, however, somehow limited.
E.g., its concrete construction requires random oracles, as
well as the so-called gap bilinear Diﬃe-Hellman (GBDH)
assumption. It is worth noting that a scheme secure in the
random oracles implies no security in the real world [7]. On
the other hand, how to implement GBDH groups remains
unclear nowadays.
1.2 Our Contribution
In this paper, we present a new framework for construct-
ing UCPs using identity-based key encapsulation mecha-
nisms (ID-KEMs) [2, 3] and symmetric key authenticated
encryption schemes (AEs) [1] which are well analyzed cryp-
tographic tools with various instantiations. More speciﬁ-
cally, we point out that the two receivers in a dual receiver
cryptosystem are not required to be “symmetric” when we
apply it to UCPs. Namely, one receiver (i.e. the server) may
be able to decrypt any ciphertext while the other (i.e. the
client) should be able to decrypt only some speciﬁc cipher-
texts.
Next, based on this observation, we give a generic con-
struction of UCPs by setting a master key and a particular
decryption key for a certain ID of an ID-KEM as the server’s
key and the client’s key, respectively, along with an AE as
the DEM part of hybrid encryption. This enables ﬂexible
designs of various instantiations of UCPs based on exist-
ing ID-KEMs and AEs. We emphasize an AE is necessary,
because a fast veriﬁcation of the solutions to the UCPs is
desirable, while a DEM may not always satisﬁes this prop-
erty. Our generic construction is provably secure without
random oracles, and achieves the same level of security as
[10, 16].
Finally, we present two concrete instantiations of our generic
construction for UCPs. One of our instantiations is based
on the Boneh-Boyen identity-based encryption [4], and one
of its advantageous properties is that this scheme does not
depend on random oracles. Moreover, due to its algebraic
structure, it is possible to further reduce the server’s bur-
den by using the standard pre-computation technique. The
other instantiation is based on the Boneh-Gentry-Hamburg
identity-based encryption [6]. This instantiated scheme does
not require pairing groups or any gap assumption without
practical implementations, but is more bandwidth-demanding
as well as with random oracles. However, we remark that
one can remove the random oracles by assuming an intricate
non-standard assumption [6].
1.3 Related Work
The concept of client puzzles for defending against DoS at-
tacks was ﬁrst introduced by Juels and Brainard [14]. Then,
following this work, many concrete client puzzles and their
applications have been proposed, e.g. [20, 17, 9, 1, 11, 26].
Jakobsson and Juels ﬁrst proposed the notion of UCPs, and
also proposed an instantiation for a very speciﬁc applica-
tion. In ACM CCS’04, Diament, Lee, Keromytis, and Yung
[10, 16] showed a construction of UCPs for a wide range
of applications by introducing dual receiver cryptosystems.
However, their schemes rely on random oracles and the so-
called GBDH assumption.
An identity-based encryption (IBE) is a special public key
encryption where the public key can be any binary string.
It was ﬁrst advocated by Shamir [22] to solve the manage-
ment of public key certiﬁcates. Boneh and Franklin [5] gave
the ﬁrst formal model and a full ﬂedged construction of IBE
based on pairings.
Independently Cocks [8] proposed an-
other IBE scheme based on decisional quadratic residue as-
sumption (DQR). Boneh and Boyen [4] proposed a weaker
model called selective identity security for IBE as well as
two eﬃcient IBE schemes, whose security was proved in
that model. Waters [25] proposed the ﬁrst practical IBE
scheme in the standard model. Recently, Boneh, Gentry
and Hamburg [6] proposed another IBE scheme also based
on DQR, which achieves larger bandwidth compared with
Cocks’s scheme. The notion of ID-KEM came from identity
based encryption and was ﬁrst formalized in [2, 3].
2. PRELIMINARY
In this section, we review some notations and deﬁnitions.
Notations.
If S is a set then s ← S denotes the operation of pick-
ing an element s of S uniformly at random. We write
z ← A(x, y, . . .) to indicate that A is an algorithm with
inputs (x, y, . . .) and an output z. Denote x||y as the string
concatenation of x and y. If k ∈ N, a function f (k) is neg-
ligible if ∃ k0 ∈ N, ∀ k > k0, f (k)  0 is a
constant.
2.1 ID-KEM
An identity-based Key Encapsulation Mechanism (ID-KEM)
IDKEM = (Kg, Ext, Enc, Dec) consists of 4 algorithms.
• Kg, a probabilistic key generation algorithm, takes a
security parameter k as input, and outputs a public key
pk and a master secret key sk, denoted as (pk, sk) ←
Kg(k).
• Ext, a possibly probabilistic extraction algorithm, takes
a secret key sk, an identity (a binary string) id as in-
put, and outputs a secret key skid regarding id, de-
noted as skid ← Ext(sk, id).
• Enc, a probabilistic encapsulation algorithm, takes pk
and id as input, and outputs a session key dk and a
ciphertext c for id, denoted as (dk, c) ← Enc(pk, id).
• Dec, a deterministic decapsulation algorithm, takes
skid, id and c as input, and outputs the corresponding
session key dk (or ⊥ indicating “invalid”), denoted as
dk ← Dec(skid, id, c).
We impose standard correctness requirement for ID-KEMs,
namely, ∀ (pk, sk) ← Kg(k), ∀ id, and ∀ (dk, c) ← Enc(pk, id),
there is dk = Dec(Ext(sk, id), id, c). For security, we con-
sider two notions: indistinguishability against chosen plain-
text attack, either under adaptive chosen identity (IND-ID-
CPA), where the target ID is chosen adaptively, or selective
identity attack (IND-sID-CPA), where the target ID is cho-
sen even before the public key is generated. The diﬀerence
between the two attacks is the timing for an adversary to
decide the target identity. There is a simple reduction from
sID-security to full ID-security (with loss of a factor of the
cardinality of ID space), which was ﬁrst publicly addressed
in [4].
71Definition 1. Denote K is the space of all session keys.
Denote EO is an extraction oracle that on input an identity
id, returns corresponding secret key skid for id. Denote the
advantage of an adversary A in the following experiment as:
Advind-id-cpa
A,IDKEM (k) = Pr[dk0 ← K; (pk, sk) ← Kg(k);
(id∗, s) ← AEO (pk); dk1 ← Enc(pk, id∗);
b ← {0, 1}; b′ ← AEO(dkb, s) : b = b′] − 1/2
We say an ID-KEM scheme is (ǫ, q, t)-IND-ID-CPA secure,
if for any adversary A with running time at most t and EO
queries at most q times, has advantage in the above game at
most ǫ.
Definition 2. Denote K is the space of all session keys.
Denote EO is an extraction oracle that on input an identity
id, returns corresponding secret key skid for id. Denote the
advantage of an adversary A in the following experiment as:
Advind-sid-cpa
A,IDKEM (k) = Pr[(id∗, s) ← A(k); dk0 ← K;
(pk, sk) ← Kg(k); dk1 ← Enc(pk, id∗);
b ← {0, 1}; b′ ← AEO(pk, dkb, s) : b = b′] − 1/2
We say an ID-KEM scheme is (ǫ, q, t)-IND-sID-CPA secure,
if for any adversary A with running time at most t and EO
queries at most q times, has advantage in the above game at
most ǫ.
Finally, we say an ID-KEM scheme is secure, if for any