Compute (TSet, κT ) ← TSet.Setup(T).
Let EDB(1) = TSet.
Initialize BF ← 0m.
for w ∈ W do
for id ∈ DB(w) do
Compute xid ← Fp(κI , id).
for j = 1 : k do
Let hj(id, w) ≜ Hj
Set BF[hj(id, w)] ← 1.
(cid:16)
gFp(κX ,w)·xid(cid:17).
p (Def. 3).
and k hash functions {Hj}1≤j ≤k (see Sec. 2.3), and finally (v) PRFs
F with range {0, 1}λ and Fp with range Z∗
The HXT protocol consists of two algorithms: SE.EDBSetup and
SE.Search.
The setup algorithm SE.EDBSetup (Algorithm 1) gets the se-
curity parameter λ and DB and returns the param, mk and EDB.
The encrypted database EDB has two components: EDB(1) is TSet
generated exactly as in OXT, and EDB(2), which is shown as the
blue part in Fig. 1: it is an HVE encryption of a carefully designed
Bloom filter BF, which is set up for XSet elements of the form
h(id, w) = gFp(κX ,w)·xid, for encrypted identifiers xid = Fp(κI , id)
over all id ∈ DB(w). The setup algorithm writes 1’s into BF in
positions in set
S = {Hj(h(id, w))}1≤j ≤k ,
EDB.
(param, EDB).
Algorithm 2 : SE.Search
Input: param, mk, query ¯w = (w1 ∧ · · · ∧ wn) with sterm w1,
Output: Result R.
1: function SE.Search(param, mk, ¯w, EDB)
2:
Client’s inputs are (param, mk, ¯w) and server’s input is
Client initialises R ← {}.
Client computes stag ← TSet.GetTag(κT , w1) and sends
Server lets TSet = EDB(1).
Server computes t ← TSet.Retrieve(TSet, stag), sends |t|
to client, and starts accepting xtokens computed by client as
follows:
stag to the server.
for c = 1 : |t| do
Client computes ηw1 ← Fp(κZ , w1||c).
for ℓ = 2 : n do
Client computes xtoken[c, ℓ] ← gηw1 ·Fp(κX ,wℓ).
end for
Client sets xtoken[c] ← (xtoken[c, 2], . . . , xtoken[c, n]).
Client sends xtoken[c] to server.
end for
Server initialises E ← {}.
for c = 1 : |t| do
Client initialises vc ← ∗m.
Server recovers (yc , ec) from the c-th component of t.
for ℓ = 2 : n do
Server computes xtag = xtoken[c, ℓ]yc .
for j = 1 : k do
Server computes uj ← Hj (xtag).
Server sends uj to client.
Client sets vc[uj] ← 1.
end for
end for
Client computes tokenc ← HVE.KeyGen(msk, vc).
Client sends tokenc to server.
Server lets c = EDB(2).
Server computes resc ← HVE.Query(tokenc , c).
if resc = ‘True’ then
Server adds ec to E (i.e., E = E ∪ {ec})
end if
end for
Server sends E to client.
Client computes κe ← F(κS , w1),
Client computes idc ← Sym.Dec(κe , ec), and adds idc to R
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
for all ec ∈ E.
return R
38:
39: end function
over all (id, w) pairs with id ∈ DB(w), and then encrypts BF with
HVE.Enc. The new parts of our protocol compared to OXT are
coloured blue.
The search protocol SE.Search is shown in Algorithm 2, where
the first 14 lines generate stag and xtokens similar to OXT. The
XSet membership test for conjunctions in OXT is replaced by a HVE
token generation and query. Namely, the HVE token tokenc for
Figure 1: An illustration of difference w.r.t XSet in HXT com-
pare to OXT.
all idc ∈ DB(w1) is generated for a predicate (BF) vector vc with
1’s in positions in set S′ = {Hj(h(idc , wi)}2≤i ≤n
and wildcards
1≤j ≤k
in other positions. 1 Consequently (as the message encrypted by
HVE was set to ‘True’ in SE.EDBSetup) the HVE.Query returns
‘True’ if S′ ⊆ S, i.e. if all n − 1 xterms wi are in the document
idc. Otherwise, HVE.Query returns ⊥, without revealing KPRP
information on which wi are in idc. Importantly, in step 27 and 30,
the HVE.KenGen and HVE.Query algorithm only uses components
of c in the non-wildcard positions of vc and tokenc, so search run-
time is only proportional to |DB(w1)| · n · k (similar to OXT), and
not to the size m of the BF. We next show that HXT is correct with
the Bloom filter’s false positive rate Pe.
Theorem 3.
If the underlying HVE scheme and T-set scheme Γ
are correct, and the PRFs F and Fp are secure, then HXT is computa-
tionally correct with false positive rate Pe ≤ (1 − e−k·N/m)k .
Proof. The proof is given in Appendix B.
□
• N =d
5 SECURITY
A Searchable Symmetric Encryption (SSE) query consists of a
Boolean formula ψ and a tuple w = (w1, . . . , wn) of keywords.
Throughout the paper, we only consider conjunctive queries with
ψ(w) = w1∧· · ·∧wn. Without loss of generality, we assume that w1
is sterm and (w2, . . . , wn) are n − 1 xterms. For a vector of queries
q = (s, x2, . . . , xn), it consists of a vector s of sterms, and a sequence
of vectors x2, . . . , xn of xterms.
We define the leakage function of HXT L(DB, q) as a tuple(N , EP,
SP, WRP, IP) formed as follows:
i =1 |Wi| is the total number of appearances of key-
words in documents.
• EP is the equality pattern of s ∈ WQ indicating which queries
have the equal sterms. In particular, EP[i] = |{s[1], . . . , s[j]}|,
where j is the least index for which s[j] = s[i]. Note that
EP ∈ [ω]Q and it is leaked since the client sends stag corre-
sponding to s to server.
• SP is the size pattern of the queries, i.e. the number of
documents matching the sterm in each query. Formally,
SP ∈ [ω]Q and SP[i] = |DB(s[i])|.
1Under the “honest-but-curious” assumption, the server following the protocol can
not arbitrarily check the membership of Bloom Filter. Therefore, the server is not able
to check XSet like in OXT.
Bloom Filter0101…0m-length bit arrayHVEc1c2c3c4…cmbitwise ciphertextOXTXSet(cid:1)j=2 DB(xj[i])2.
• WRP is the whole result pattern, which is an array computed
• IP is the conditional intersection pattern, which is a 4-dimen-
as follows: WRP[i] = DB(s[i]) ∩n
sional table IP[i, j, α , β] defined as follows:
if i (cid:44) j, α (cid:44) β,
and xα[i] = xβ[j],
otherwise,
 DB(s[i]) ∩ DB(s[j])
∅
=
for 1 ≤ i, j ≤ Q and 1 ≤ α , β ≤ n.
The overall leakage function L consists of the leakage from the
j=2(cid:0)DB(s[i]) ∩ DB(xj[i])(cid:1), which is denoted by RP in [12] and ob-
HXT protocol LHXT and the leakage function of T-set LT.
5.1 Leakage Function Comparison
Note that WRP is a new component in our leakage function com-
pared to OXT. In their leakage function, they actually had KPRP[i] =
∪n
viously a lot more than WRP. The following example illustrates the
impact of updating leakage component from KPRP to WRP.
Suppose that a database consists of 6 documents labelled by
{idi}1≤i ≤6. Let us assume the following database ‘forward index’,
listing document id’s and keywords contained in each:
keywords
w1, w2, w3
w1, w3, w6
w2, w3, w7
keywords
w1, w2, w6, w7, w8
w2, w3, w4, w5
w4, w5, w6, w7
id
4
5
6
id
1
2
3
Consider the query w1∧w2∧w3 for some keywords w1, w2, and w3.
By convention, we let w1 be the least frequent keyword amongst
all queried words. The inverted-index listing the document id’s
containing each of the queried words are DB(w1) = {id1, id4, id5},
DB(w2) = {id1, id2, id4, id6}, and DB(w3) = {id2, id4, id5, id6}.
Table 2: Leakage Comparison for query w1∧w2∧w3 between
KPRP and WRP.
Leaked Entries
Leakage Component
KPRP (from OXT) {(id1, w2),(id4, w2),(id4, w3),(id5, w3)}
WRP (from HXT)
{(id4, w2),(id4, w3)}
The KPRP leakage component in OXT is computed as follows:
j=2(cid:0)DB(w1) ∩ DB(wj)(cid:1) = {id1, id4} ∪ {id4, id5}. As shown
RP = ∪3
in Table 2, The KPRP leakage thus reveals 4 entries of the inverted-
index, underlined in the inverted-index above. However, in this
paper, we eliminate the ‘partial query’ (KPRP) leakage induced by
RP, leaving only whole result pattern (WRP) corresponding to the
final query result. By definition, we have WRP = ∩3
j=1DB(wj). In
our example, WRP reveals the exact result of the query, that is
{id4}. Table 2 shows that the WRP only reveals two entries in the
inverted-index above, in contrast to 4 entries revealed by KPRP
above.
In fact, [12] has not noticed this leakage in their analysis and
simply put RP to be the set of all identifiers matching the i-th query.
2WRP is defined under the “no false positive” assumption, i.e. Both TSet and Bloom
Filter do not have a false positive rate. Otherwise, the false positive should be taking
into account to define a refined leakage profile FP-WRP.
Table 3: Notations for Comparison Analysis
G, GT, Zp size of an element from G, GT , and Zp resp.
Notation Meaning
m, mp number of multiplications over G and Zp
p, e
number of pairings and exponentiations
number of preprocessed exponentiations
epre
m′
TPRF
Thash
TXOR
TEnc
TDec
TTSet
number of non-wildcard elements in a BF
time taken to compute a PRF
time taken to compute a hash of BF
time taken to perform an exclusive-or operation over λ
time taken to compute a sym. ciphertext
time taken to decrypt a sym. ciphertext
time taken to set-up TSet
5.2 Security Analysis of HXT
Here, we show the security of our protocol against both a non-
adaptive and an adaptive adversarial server which is assumed to be
“honest-but-curious”. Similar to [12], we first give a theorem about
the security against non-adaptive attacks, and later discuss the full
security. For sake of simplicity, we assume in our proof that no
false positive happens in our protocol HXT3 (i.e., no false positive
happening in both TSet and BF).
Theorem 4. Our protocol HXT is L-semantically secure against
non-adaptive attacks where L is the leakage function defined as
before, assuming that the DDH assumption holds in G, that F and Fp
are secure PRFs, that HVE is a selectively simulation-secure protocol,
that Sym = (Sym.Enc, Sym.Dec) is an IND-CPA secure symmetric
encryption scheme, that Γ is a LT-secure and computationally correct
T-set instantiation, and that no false positive happens in our HXT.
Proof. The proof is given in Appendix B.
□
We now show that our theorem is also valid for adaptive models.
Theorem 5. Our protocol HXT is L-semantically secure against
adaptive attacks where L is the leakage function defined as before,
assuming that the DDH assumption holds in G, that F and Fp are
secure PRFs, that HVE is a selectively simulation-secure scheme, that
Sym is an IND-CPA secure symmetric encryption scheme, and that Γ
is a LT-secure and computationally correct T-set instantiation.
Proof. The proof is given in Appendix B.