![waf22](../pictures/wafc22.png)
use the form of /!50000*/
![waf23](../pictures/wafc23.png)
single and double quotation marks：
![waf24](../pictures/wafc24.png)
{ ：
![waf25](../pictures/wafc25.png)
\N symbol:
![waf26](../pictures/wafc26.png)
4：the position between select from
(1)white space
the useful white space in Mysql: %09,%0a,%0b,%0c,%0d,%a0；
(2)comment
use blank comment
the useful blank comment in MYSQL: `/**/` `/letmetest/`
(3)other symbols
`` symbol
![waf27](../pictures/wafc27.png)
+,-,!,~,',"
![waf28](../pictures/wafc28.png)
![waf29](../pictures/wafc29.png)
{
![waf30](../pictures/wafc30.png)
(
![waf31](../pictures/wafc31.png)
5：position behind select from
(1)white space
the useful white space in Mysql: %09,%0a,%0b,%0c,%0d,%a0；
(2)comment
use blank comment
the useful blank comment in MYSQL: `/**/` `/letmetest/`
(3)other symbols
``
![waf32](../pictures/wafc32.png)
![waf33](../pictures/wafc33.png)
{
![waf34](../pictures/wafc34.png)
(
![waf35](../pictures/wafc35.png)
Ps. white space, comment character, /!50000select*/, {x version} and () can be used in many points, for some special ones, other symbols can be put to use.
6：common filter functions
(1)SUBSTR
```
Mid(version(),1,1)
Substr(version(),1,1)
Substring(version(),1,1)
Lpad(version(),1,1)
Rpad(version(),1,1)
Left(version(),1)
reverse(right(reverse(version()),1)
```
(2)concat
```
concat(version(),'|',user());
concat_ws('|',1,2,3)
```
(3)character conversion
Ascii(1) This function is filtered out in a test of a cloud waf, then it needs to use ascii (1).
```
Char(49)
Hex('a')
Unhex(61)
```
7：filter comma
(1)the comma at limit:
limit 1 offset 0
(2)the comma at SUBSTR
the comma at mid
mid(version() from 1 for 1)
(3)the comma at union：
concat through join.
![waf36](../pictures/wafc36.png)
#### 3.2 sqlserver database
1：common filter position
(1) the position behind select from
white space：
01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20
Need to do urlencode，there are lots of white spaces in sqlserver, it’s not adequate to use black list for block.
Comment Symbol Mssql can also use comment symbol `/**/`
（2）other symbols
"."
![waf37](../pictures/wafc37.png)
":"
![waf38](../pictures/wafc38.png)
Comment Symbol Mssql can also use comment symbol `/**/`
":"
![waf39](../pictures/wafc39.png)
(3) the position behind and
white space：
01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20 
comment symbol
Mssql can also use comment symbol /**/
":"
![waf40](../pictures/wafc40.png)
%2b
![waf41](../pictures/wafc41.png)
2：common filter functions
(1)SUBSTR
Substring(@@version,1,1)
Left(@@version,1)
Right(@@version,1)
(2) String-Translation Functions
Ascii(‘a’) Here the function can add space between the brackets, some loose waf filter can cause bypass.
Char(‘97’)
(3) other ways
Mssql supports multi-statement queries so it can be used; end the above query, and then perform the own statements that you constructed. Dynamic execution.
use exec:
![waf42](../pictures/wafc42.png)
use sp_executesql:
![waf43](../pictures/wafc43.png)
Use these to combine your parameters and can bypass WAF protection.
Using these features and the above mentioned features can bypass the injection protection of safedog.
### 4 Use WAF layer to bypass
1 performance bypass
In WAF design, performance will usually be considered. For example, if it’s based on data packets, the packet length will be considered; if it’s based on data flow, the number if a data flow will be checked. Normally they are sort of a check for performance and meanwhile to keep WAF work smoothly, often it will make a bypass design. In performance if the CPU usage is above 80 or memory usage is higher than 80%, it will do check bypass, to ensure the equipment operates smoothly.
Equipments like WAF all week on application layer, HTTP, FTP, SMTP are all protocols on application layer. When such data is handled, data and protocol need to be parsed to eventually get application layered data. For instance, what is HTTP method, HTTP querystring or HTTP requestbody. Then match these values obtain in real time with the rules design by WAF. If it matches with a rule, then corresponding handle will be made.
(1) performance check bypass
![waf44](../pictures/wafc44.png)
Now the question is how long does it take to check? For example, if I upload a 2G file by HTTP POST, it definitely will occupy CPU and memory usage when checking the entire 2G file. Therefore, a default value may be set in WAF design, which can be the default number of bytes of a flow size or the number of packets.
That’s to design a script and constantly populate data into HTTP POST. When data reaches a certain number, the sql inject malicious code in POST will not be checked and realize the purpose of bypass.
When testing a cloud WAF, this method is also applicable to achieve the aim to bypass.
(2) performance load bypass
![waf45](../pictures/wafc45.png)
Some traditional vendors choose to bypass the protection function when performance load is heavy, in case that high performance load like delays, affects user experience. When equipment’s performance load is lower than the threshold value, the protection function will recover.
This method may not apply to a certain of WAF with high performance, but it applies to some software WAF.
Ps.The author tested the following: the author built a payload and added a lot of invalid data to it, so the script failed to send the request, then some of the request went through the WAF, some were blocked. The possible cause of bypass is performance issue.
2 fuzz bypass
![waf46](../pictures/wafc46.png)
Use script to detect if WAF equipment has issue in handling with characters, as mentioned above WAF will resolve corresponding data packets when receiving network data. Some WAF may cause issues when resolving some characters, causing universal bypass. Here are some places that we often test:
1）：the place that get requests for
2）：the place that header requests for
3）：the place holding post urlencode contents
4）：the places holding post form-data contents
The basic contents that fuzz test on
1）encoded 0-255 character
2）encoding 0-255 character
3）utf gbk character
Once in a test for safedog, the data is submitted by using post. The submitted data includes two parameters, one of which is normal fuzz point, the other parameter contains a sql injection statement. In the test of the previous fuzz point, when handling character at \x00, safedog doesn’t block. It is the issue of dealing with the character that leads to bypass.
Once in a test for cloud WAF, the data is submitted by using get. The submitted content includes a parameter which is character+sql injection statement. In the test of the fuzz point, when cloud WAF handle the & character, it doesn’t block. Because of the speciality of & character, I guess It is the & character in url request is not handled well that leads to bypass. Since && in mysql can also represent and, therefore a combination of sql statement can achieve the purpose of bypass.
Ps.The above fuzz test only tests the single character at each location, there should be more complex tests. WAF is not as perfect as expected, there are other places with issues to fuzz.
3 whitelist bypass
![waf47](../pictures/wafc47.png)
In WAF design, whitelist is always considered. For example,manage access of IP and can server. Such requests are trusted, don’t have to go through detection procedure.
If the IP addresses of the Whitelist are from network layer, bypass is hard to realize. If whitelist is based on the data from application layer, bypass is achievable.
This article talks about bypass war by modifying the header of http, here are the contents from the article:
![waf48](../pictures/wafc48.png)
These headers are usually used to obtain IP addresses and others, like nginx-lua-waf:
![waf49](../pictures/wafc49.png)
Obtain clientip by using the header of X-Real-ip.
This method can also bypass scenarios such as login locked Ip, login captcha several times and background verification.
## 0x05 Closing Thoughts
Each feature is like a specific scene. Some are discovered by researchers, some remain unknown waiting to be found.
As all features are disclosed, the protection ability of WAF will surly be developed against web attack. In my view, when all feature scenarios are covered by WAF, there will be new discoveries rising.(If we know current mysql scenario )
So we don’t have worry if all features are covered by WAF and we’ll have no ammunition left. There are so many unknown features waiting to dig up.
When you find all there postures can’t function well, it’s time to discover new features. After all WAF designers all continue their design by current perception. As new features arise, another round of bypass will come. 
## Reference
https://medium.com/secjuice/waf-evasion-techniques-718026d693d8  
https://medium.com/secjuice/web-application-firewall-waf-evasion-techniques-2-125995f3e7b0