本文翻译自：  
* * *
攻击者的混淆技术在不断进步，同时防护者也在不断地开发和应用新的反混淆技术。还有一些机器学习的方法被应用到PowerShell反混淆中。下面先看一些攻击者常用的混淆技术。
# PowerShell混淆
PowerShell的功能非常强大，可以从命令行自动执行任务和进行配置管理。PowerShell同时是一个非常高效的工具，很容易导入模块、访问核心API和远程命令，这使得许多攻击者都用它来进行无文件攻击。
对分析师和防护者来说，PowerShell命令会留下日志，而script文件可以获取进行分析。因此可以进行事后取证来确定攻击者是否成功。但攻击者会选择对代码进行混淆和编码来减缓和阻止对恶意代码的分析。
每种语言都有自己的方法，许多是不共享的，对PowerShell来说通用的是：
一些PowerShell变量和名称是区分大小写的：
连接后，可能并没有这样的词：
将变量插入命令申明中，这样可以混淆有些字符串组件：
Backticks可以用作行连续符，有时用作特殊字符的标记。但如果在变量的中间使用backtick，会继续该行到同一行的写一个字符。
将字符串转化为命令操作：
Whitespace与有些操作是不相关的，加入是为了使代码可读性变差。
这是用表示ASCII代码的信息来替换字符。
还有许多其他复杂的混淆方法，像变量创建和替换。这也是混淆器定义随机的变量并将其插入到字符串中间的原因。
格式处理器: 
    Input: {1}PSScriptRoot{0}..{0}PSVersionCompare.psd1 -F  ‘\’,’$’
    Output: $PSScriptRoot\..\PSVersionCompare.psd1
替换函数: 
    Input: (pZyPSScriptRoot\Add-LTUser.ps1).replace('pZy',’$’)
    Output: $PSScriptRoot\Add-LTUser.ps1
使用`Invoke-Obfuscation`可以应用多重混淆，示例如下：
开始前：
    $packageName = 'kvrt'
    $url = 'http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe'
    $checksum = '8f1de79beb31f1dbb8b83d14951d71d41bc10668d875531684143b04e271c362'
    $checksumType = 'sha256'
    $toolsPath = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
    $installFile = Join-Path $toolsPath "kvrt.exe"
    try {
      Get-ChocolateyWebFile -PackageName "$packageName" `
                            -FileFullPath "$installFile" `
                            -Url "$url" `
                            -Checksum "$checksum" `
                            -ChecksumType "$checksumType"
      # create empty sidecars so shimgen only creates one shim
      Set-Content -Path ("$installFile.ignore") `
                  -Value $null
      # create batch to start executable
      $batchStart = Join-Path $toolsPath "kvrt.bat"
      'start %~dp0\kvrt.exe -accepteula' | Out-File -FilePath $batchStart -Encoding ASCII
      Install-BinFile "kvrt" "$batchStart"
    } catch {
      throw $_.Exception
    }
原始Powershell脚本示例
混淆后：
    ${P`ACka`Ge`NAMe} = ("{0}{1}" -f 'kv','rt')
    ${U`RL} = ("{4}{11}{0}{6}{10}{3}{7}{2}{13}{15}{1}{16}{5}{8}{9}{14}{12}"-f'persky-','il','com/dev','bs','http:/','/','l','.','KVR','T/late','a','/devbuilds.kas','T.exe','b','st/full/KVR','u','ds')
    ${Check`s`UM} = ("{15}{16}{10}{3}{11}{6}{14}{9}{4}{5}{13}{1}{8}{7}{12}{2}{0}"-f 'c362','84143b0','71','79beb31f1d','1','bc','495','e','4','d71d4','e','bb8b83d1','2','10668d8755316','1','8f','1d')
    ${C`HE`cksu`m`TYpe} = ("{1}{0}" -f'56','sha2')
    ${T`Ool`s`PATH} = "$(Split-Path -parent $MyInvocation.MyCommand.Definition) "
    ${instALL`F`i`Le} = .("{0}{2}{1}{3}" -f'J','-Pa','oin','th') ${tOO`lSP`ATh} ("{0}{1}{2}" -f 'k','vrt.e','xe')
    try {
      &("{2}{5}{0}{4}{3}{1}" -f'colateyWe','e','Ge','Fil','b','t-Cho') -PackageName "$packageName" `
                            -FileFullPath "$installFile" `
                            -Url "$url" `
                            -Checksum "$checksum" `
                            -ChecksumType "$checksumType"
      &("{2}{3}{0}{1}"-f '-','Content','Se','t') -Path ("$installFile.ignore") `
                  -Value ${nu`Ll}
      ${B`At`C`HSTart} = &("{0}{2}{1}{3}"-f 'J','i','o','n-Path') ${TOol`s`patH} ("{0}{2}{1}" -f 'k','.bat','vrt')
      ((("{1}{2}{3}{4}{5}{7}{0}{6}"-f'ce','start ','%','~dp0{0','}k','vrt','pteula','.exe -ac'))-f [CHar]92) | .("{0}{1}{2}"-f 'Out-','Fi','le') -FilePath ${BA`T`c`hstARt} -Encoding ("{0}{1}"-f 'AS','CII')
      &("{1}{0}{3}{2}"-f'l-','Instal','nFile','Bi') ("{0}{1}"-f 'k','vrt') "$batchStart"
    } catch {
      throw ${_}."E`X`CEPtiOn"
    }
用Invoke-Obfuscation混淆后的Powershell Script
# 编码技术
文本可以通过编码技术转变成其他字符映射方案来进一步混淆。下面有两种方案：ASCII码到十六进制和ASCII码到十进制。比如，`A`映射到十六进制的`41`和十进制的`65`。
对PowerShell中的脚本进行完全编码需要加入一些额外的逻辑，这样翻译器才能将其解码为文本。下面是一个脚本编码为十进制表示的示例：
    .((gET-varIAble '*MDR*').nAME[3,11,2]-JoiN'')([chAR[]] ( 36,112, 97, 99,107, 97 ,103, 101 , 78 , 97 ,109, 101 ,32 ,61 ,32 , 39 , 107 , 118,114 , 116 ,39 , 10 , 36 ,117 ,114 ,108 , 32 ,61 , 32,39,104 , 116, 116, 112,58,47 , 47 , 100 , 101 ,118, 98, 117 , 105, 108, 100 , 115,46, 107 , 97 , 115,112, 101,114,115, 107, 121,45,108,97, 98 , 115, 46 , 99 , 111 , 109 , 47, 100 ,101, 118 , 98 ,117,105, 108 , 100,115,47 ,75 , 86 ,82, 84,47 ,108 , 97, 116 ,101, 115 ,116,47 ,102 ,117, 108,108,47, 75 , 86,82 , 84 ,46, 101 ,120 ,101, 39, 10 , 36,99 , 104,101 ,99 , 107 ,115,117 , 109, 32 ,61,32, 39 , 56, 102, 49,100 ,101, 55,57 , 98, 101 , 98,51, 49 , 102,49, 100, 98 ,98,56,98 , 56,51,100, 49, 52, 57, 53 ,49,100,55, 49,100,52 , 49 , 98,99,49 ,48 , 54, 54, 56 , 100 , 56, 55, 53 ,53 , 51,49 , 54 , 56 , 52,49, 52 ,51 ,98, 48 , 52 , 101 ,50 , 55 , 49, 99 , 51 ,54, 50, 39 , 10 ,36, 99,104 , 101, 99 ,107, 115 ,117 , 109,84,121, 112, 101,32, 61,32 ,39, 115 , 104 , 97 , 50, 53,54 ,39 , 10 ,36 , 116 ,111 ,111 , 108 , 115, 80 ,97,116 ,104, 32, 61 , 32 ,34, 36,40 , 83 , 112 ,108, 105 , 116 , 45 , 80,97, 116 ,104, 32,45 ,112, 97 , 114 , 101, 110 ,116 ,32 , 36, 77 ,121 ,73 , 110, 118 ,111, 99 ,97, 116 , 105 ,111,110, 46, 77, 121 ,67 , 111,109, 109, 97, 110 , 100 ,46 , 68, 101 ,102,105 ,110, 105 , 116 , 105, 111, 110,41,34 ,10 , 36,105,110 , 115 , 116 , 97 ,108 ,108, 70 , 105, 108 ,101,32, 61 ,32, 74,111 , 105 ,110 ,45 , 80 ,97, 116, 104, 32 ,36, 116 , 111,111,108, 115 , 80 , 97,116,104,32 ,34,107, 118,114, 116 , 46,101,120,101, 34, 10, 116 , 114 , 121, 32,123 ,10 , 32,32, 71 ,101 , 116, 45, 67,104, 111 , 99 , 111 , 108,97, 116,101 , 121, 87, 101, 98, 70,105, 108,101 , 32 ,45 ,80, 97, 99,107,97, 103 , 101,78,97, 109, 101 , 32,34, 36, 112,97 ,99, 107, 97,103 , 101 , 78 , 97 , 109 ,101,34 , 32 , 96,10,32, 32,32 ,32 ,32 ,32,32,32 , 32, 32,32, 32 ,32,32, 32,32 , 32 ,32, 32 ,32 ,32, 32,32,32, 45,70,105 ,108 , 101, 70,117 , 108 ,108 ,80,97,116 ,104, 32, 34, 36,105 ,110 , 115 , 116 , 97,108, 108 , 70 ,105 ,108, 101 ,34, 32,96 ,10 , 32, 32,32 , 32 ,32,32,32 ,32 , 32,32, 32 ,32,32 , 32 , 32,32, 32,32 , 32, 32 ,32 ,32 , 32 ,32 ,45,85 , 114, 108, 32 , 34,36, 117, 114 , 108,34 ,32 ,96,10 , 32,32,32,32,32 , 32 , 32 ,32 ,32 ,32 ,32 ,32,32 , 32, 32,32 , 32,32, 32 ,32 ,32, 32 ,32 , 32,45,67 ,104 ,101, 99 , 107 , 115 , 117, 109 ,32 , 34 , 36 ,99,104,101, 99 , 107,115, 117 , 109 ,34,32, 96,10,32,32, 32 ,32, 32,32 ,32 , 32 , 32 ,32 , 32 , 32,32 , 32, 32, 32 ,32 ,32 , 32, 32 ,32, 32,32, 32,45,67,104 , 101 , 99 , 107,115 ,117 , 109 , 84 , 121 , 112, 101, 32 ,34,36, 99, 104,101, 99,107,115 , 117 , 109, 84, 121,112, 101, 34 , 10, 10, 32 ,32 , 35 , 32, 99 ,114 ,101 , 97 ,116 ,101 , 32 ,101,109, 112,116 , 121,32, 115 ,105 ,100 , 101 ,99 ,97, 114 ,115 ,32 ,115 ,111 ,32, 115 ,104 ,105 ,109,103 , 101 , 110 ,32,111 ,110,108 , 121,32,99 ,114 ,101 ,97 , 116 , 101, 115 , 32, 111 ,110 , 101 , 32,115 , 104 ,105 ,109, 10,32 , 32,83 , 101 , 116 , 45 ,67,111, 110 ,116 ,101,110 , 116, 32 ,45 ,80 , 97, 116 ,104, 32, 40 ,34,36,105,110, 115,116,97, 108,108, 70 ,105, 108,101 , 46 , 105 ,103, 110,111 , 114 , 101 , 34 ,41, 32, 96 , 10 , 32,32 , 32, 32,32 , 32,32 , 32, 32 ,32, 32,32,32 , 32 , 45,86,97, 108 ,117 ,101 , 32 , 36 , 110 , 117 , 108, 108 , 10, 10 ,32, 32, 35,32 , 99 , 114,101 , 97 ,116 ,101 , 32 , 98 ,97 ,116 , 99,104 , 32 ,116 , 111 ,32,115, 116, 97,114, 116, 32 , 101, 120 , 101 ,99 , 117 , 116, 97 ,98 , 108 ,101, 10,32 , 32 , 36 ,98 ,97, 116 , 99 , 104, 83,116, 97 ,114 , 116 ,32,61, 32 ,74,111,105, 110, 45, 80, 97, 116 , 104,32, 36 , 116 , 111,111,108,115, 80,97 , 116,104,32 , 34 ,107 , 118, 114,116 , 46 , 98 ,97 , 116 , 34 ,10,32, 32 , 39,115 ,116,97 , 114, 116,32,37, 126,100, 112, 48 ,92, 107,118 ,114, 116, 46 , 101, 120,101 , 32 , 45 ,97, 99, 99 ,101 , 112 , 116 ,101 ,117 ,108, 97 ,39 , 32,124, 32 ,79 , 117, 116, 45,70, 105 , 108, 101 , 32 , 45, 70 ,105 ,108 ,101 ,80, 97 ,116,104, 32 ,36,98, 97, 116,99 ,104, 83 ,116, 97 ,114 , 116 ,32, 45 , 69, 110 , 99 ,111 , 100 , 105,110, 103 ,32 ,65 , 83,67, 73,73, 10 ,32, 32 ,73,110, 115, 116 ,97 , 108,108 , 45 , 66,105 , 110,70,105, 108 , 101 , 32,34 , 107,118 ,114, 116 , 34 , 32 ,34,36, 98 , 97 , 116, 99 , 104, 83 , 116 ,97, 114,116 ,34,10, 125 ,32 ,99,97 , 116,99,104 ,32, 123,10 , 32 , 32 ,116 , 104, 114 , 111 , 119 ,32 , 36 , 95, 46, 69 ,120 , 99, 101 ,112 ,116 ,105 ,111 , 110 , 10,125 )-jOIN'')
用Invoke-Obfuscation编码后的Powershell Script
# 如何反混淆
为了解决这个问题，研究人员创建了一系列的操作来处理其中的问题。
首先，收集收集并构建分类器来确定样本是否被编码、混淆或是明文。因为样本可以既是混淆过的，又是编码过的，所以需要重用分类器来确保最后的产品是完整的。然后循环应用解码和反混淆逻辑，并且检查每次的输出以确定是否需要下一次操作。最后，用一种新的反混淆方法cleanup神经网络来修正简单逻辑无法处理的混淆后的特殊位。
图4: 反混淆逻辑流
# 任务
第一个任务是构建一个可以确定样本是否被编码、混淆或是明文的分类器。研究人员构建了一个机器学习分类器来自动化决策过程。
## 构建Status Classifier
构建和训练分类器的典型机器学习方法是：
  1. 收集含有标签的样本（比如，十六进制编码、混淆、明文等）；
  2. 对样本生成数字特征；
  3. 用选择的算法进行训练。
图5: 分类器步骤
构建分类器最难的部分是获取样本和标签。对这一问题，有的解决方案是从文件共享服务或抓取的Github中下载样本。在有了大量PowerShell脚本样本之后，就可以生成混淆和编码的样本了。
下一步是对样本生成特征。文本对分类器来说有点复杂，因为经典机器学习方法是用来处理定义和生成样本的总结性数据和其他相关的特征的，比如：
    - # of characters
    - # of vowels
    - Entropy
    - # of ` marks
    - # of numbers
但，这些特征的分类并不能表示字符之间的关系。
这里研究人员使用了LSTM神经网络。  
LSTM（long-short term memory）网络是一种特殊的RNN（recurrent neural
network）。因为LSTM会获取之前状态的记忆，并与当前输出结合在一起来决定下一个状态。
图6: LSTM框图
用于管理的上层框架使初始化应用变得非常简单。
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)
    model = Sequential()
    model.add(Embedding(num_encoder_tokens, embedding_vector_length, input_length=sample_len))
    model.add(LSTM(100))
    model.add(Dropout(0.2))
    model.add(Dense(len(classes), activation='sigmoid'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    print(model.summary())
    model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=epochs, batch_size=64)
下面的十行代码可以用输入数据创建一个简单的网络并训练该网络。