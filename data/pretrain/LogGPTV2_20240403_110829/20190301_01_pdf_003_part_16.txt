Redacted Result:
edb=# \c edb redact_user
You are now connected to database "edb" as user "redact_user".
edb=> select customer_id from redact_user payment_details_tab order by 1;
customer_id
-------------
0
0
(2 rows)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 161
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.13.3 ALTER_POLICY
The alter_policy procedure alters or modifies an existing data redaction policy for a
table.
PROCEDURE alter_policy (
object_schema IN VARCHAR2 DEFAULT NULL,
object_name IN VARCHAR2,
policy_name IN VARCHAR2,
action IN INTEGER DEFAULT DBMS_REDACT.ADD_COLUMN,
column_name IN VARCHAR2 DEFAULT NULL,
function_type IN INTEGER DEFAULT DBMS_REDACT.FULL,
function_parameters IN VARCHAR2 DEFAULT NULL,
expression IN VARCHAR2 DEFAULT NULL,
regexp_pattern IN VARCHAR2 DEFAULT NULL,
regexp_replace_string IN VARCHAR2 DEFAULT NULL,
regexp_position IN INTEGER DEFAULT DBMS_REDACT.RE_BEGINNING,
regexp_occurrence IN INTEGER DEFAULT DBMS_REDACT.RE_ALL,
regexp_match_parameter IN VARCHAR2 DEFAULT NULL,
policy_description IN VARCHAR2 DEFAULT NULL,
column_description IN VARCHAR2 DEFAULT NULL,
custom_function_expression IN VARCHAR2 DEFAULT NULL
)
Parameters
object_schema
Specifies the name of the schema in which the object resides and on which the
data redaction policy will be altered. If you specify NULL then the given object is
searched by the order specified by search_path setting.
object_name
Name of the table to which to alter a data redaction policy.
policy_name
Name of the policy to be altered.
action
The action to perform. For more information about action parameters see, Using
DBMS_REDACT Constants and Function Parameters.
column_name
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 162
Database Compatibility for Oracle® Developers
Built-in Package Guide
Name of the column to which the redaction policy applies.
function_type
The type of redaction function to be used. The possible values are NONE, FULL,
PARTIAL, RANDOM, REGEXP, and CUSTOM.
function_parameters
Specifies the function parameters for the redaction function.
expression
Specifies the Boolean expression for the table and determines how the policy is to
be applied. The redaction occurs if this policy expression is evaluated to TRUE.
regexp_pattern
Enables the use of regular expressions to redact data. If the regexp_pattern
does not match the data, then the NULL value is returned.
regexp_replace_string
Specifies the replacement string value.
regexp_position
Specifies the position of a character where search must begin. By default, the
function parameter is RE_BEGINNING.
regexp_occurence
Specifies the replacement occurrence of a substring. If the constant is RE_ALL,
then the replacement of each matching substring occurs. If the constant is
RE_FIRST, then the replacement of the first matching substring occurs.
regexp_match_parameter
Changes the default matching behavior of a function. The possible
regexp_match_parameter constants can be ‘RE_CASE_SENSITIVE’,
‘RE_CASE_INSENSITIVE’, ‘RE_MULTIPLE_LINES’,
‘RE_NEWLINE_WILDCARD’, ‘RE_IGNORE_WHITESPACE’.
Note: For more information on constants, function_parameters, or
regexp (regular expressions) see, Using DBMS_REDACT Constants and
Function Parameters.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 163
Database Compatibility for Oracle® Developers
Built-in Package Guide
policy_description
Specify the description of a redaction policy.
column_description
Description of the column to be redacted. The column_description is not
supported, but if you specify the description for a column then, you will get a
warning message.
custom_function_expression
The custom_function_expression is applicable only for the CUSTOM
redaction type. The custom_function_expression is a function expression
that is, schema-qualified function with a parameter such as
schema_name.function_name (argument1, …)that allows a user to use
their redaction logic to redact the column data.
Example
The following example illustrates to alter a policy using partial redaction for values in the
payment_details_tab table card_string (usually a credit card number) column.
\c edb base _user
BEGIN
DBMS_REDACT.alter_policy (
object_schema => 'public',
object_name => 'payment_details_tab',
policy_name => 'redactPolicy_001',
action => DBMS_REDACT.ADD_COLUMN,
column_name => 'card_string',
function_type => DBMS_REDACT.partial,
function_parameters => DBMS_REDACT.REDACT_CCN16_F12);
END;
Redacted Result:
edb=# \c - redact_user
You are now connected to database "edb" as user "redact_user".
edb=> SELECT * FROM payment_details_tab;
customer_id | card_string
-------------+---------------------
0 | ****-****-****-1234
0 | ****-****-****-2345
(2 rows)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 164
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.13.4 DISABLE_POLICY
The disable_policy procedure disables an existing data redaction policy.
PROCEDURE disable_policy (
object_schema IN VARCHAR2 DEFAULT NULL,
object_name IN VARCHAR2,
policy_name IN VARCHAR2
)
Parameters
object_schema
Specifies the name of the schema in which the object resides and on which the
data redaction policy will be applied. If you specify NULL then the given object is
searched by the order specified by search_path setting.
object_name
Name of the table for which to disable a data redaction policy.
policy_name
Name of the policy to be disabled.
Example
The following example illustrates how to disable a policy.
\c edb base_user
BEGIN
DBMS_REDACT.disable_policy(
object_schema => 'public',
object_name => 'payment_details_tab',
policy_name => 'redactPolicy_001');
END;
Redacted Result: Data is no longer redacted after disabling a policy.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 165
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.13.5 ENABLE_POLICY
The enable_policy procedure enables the previously disabled data redaction policy.
PROCEDURE enable_policy (
object_schema IN VARCHAR2 DEFAULT NULL,
object_name IN VARCHAR2,
policy_name IN VARCHAR2
)
Parameters
object_schema
Specifies the name of the schema in which the object resides and on which the
data redaction policy will be applied. If you specify NULL then the given object is
searched by the order specified by search_path setting.
object_name
Name of the table to which to enable a data redaction policy.
policy_name
Name of the policy to be enabled.
Example
The following example illustrates how to enable a policy.
\c edb base_user
BEGIN
DBMS_REDACT.enable_policy(
object_schema => 'public',
object_name => 'payment_details_tab',
policy_name => 'redactPolicy_001');
END;
Redacted Result: Data is redacted after enabling a policy.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 166
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.13.6 DROP_POLICY
The drop_policy procedure drops a data redaction policy by removing the masking
policy from a table.
PROCEDURE drop_policy (
object_schema IN VARCHAR2 DEFAULT NULL,
object_name IN VARCHAR2,
policy_name IN VARCHAR2
)
Parameters
object_schema
Specifies the name of the schema in which the object resides and on which the
data redaction policy will be applied. If you specify NULL then the given object is
searched by the order specified by search_path setting.
object_name
Name of the table from which to drop a data redaction policy.
policy_name
Name of the policy to be dropped.
Example
The following example illustrates how to drop a policy.
\c edb base_user
BEGIN
DBMS_REDACT.drop_policy(
object_schema => 'public',
object_name => 'payment_details_tab',
policy_name => 'redactPolicy_001');
END;
Redacted Result: The server drops the specified policy.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 167
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.13.7 UPDATE_FULL_REDACTION_VALUES
The update_full_redaction_values procedure updates the default displayed
values for a data redaction policy and these default values can be viewed using the
redaction_values_for_type_full view that use the full redaction type.
PROCEDURE update_full_redaction_values (
number_val IN NUMBER DEFAULT NULL,
binfloat_val IN FLOAT4 DEFAULT NULL,
bindouble_val IN FLOAT8 DEFAULT NULL,
char_val IN CHAR DEFAULT NULL,
varchar_val IN VARCHAR2 DEFAULT NULL,
nchar_val IN NCHAR DEFAULT NULL,
nvarchar_val IN NVARCHAR2 DEFAULT NULL,
datecol_val IN DATE DEFAULT NULL,
ts_val IN TIMESTAMP DEFAULT NULL,
tswtz_val IN TIMESTAMPTZ DEFAULT NULL,
blob_val IN BLOB DEFAULT NULL,
clob_val IN CLOB DEFAULT NULL,
nclob_val IN CLOB DEFAULT NULL
)
Parameters
number_val
Updates the default value for columns of the NUMBER datatype.
binfloat_val
The FLOAT4 datatype is a random value. The binary float datatype is not
supported.
bindouble_val
The FLOAT8 datatype is a random value. The binary double datatype is not
supported.
char_val
Updates the default value for columns of the CHAR datatype.
varchar_val
Updates the default value for columns of the VARCHAR2 datatype.
nchar_val
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 168
Database Compatibility for Oracle® Developers
Built-in Package Guide
The nchar_val is mapped to CHAR datatype and returns the CHAR value.
nvarchar_val
The nvarchar_val is mapped to VARCHAR2 datatype and returns the VARCHAR
value.
datecol_val
Updates the default value for columns of the DATE datatype.
ts_val
Updates the default value for columns of the TIMESTAMP datatype.
tswtz_val
Updates the default value for columns of the TIMESTAMPTZ datatype.
blob_val
Updates the default value for columns of the BLOB datatype.
clob_val
Updates the default value for columns of the CLOB datatype.
nclob_val
The nclob_val is mapped to CLOB datatype and returns the CLOB value.
Example
The following example illustrates how to update the full redaction values but before
updating the values, you can:
1. View the default values using redaction_values_for_type_full view as shown
below:
edb=# \x
Expanded display is on.
edb=# SELECT number_value, char_value, varchar_value, date_value,
timestamp_value, timestamp_with_time_zone_value, blob_value,
clob_value
FROM redaction_values_for_type_full;
-[ RECORD 1 ]------------------+--------------------------
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 169
Database Compatibility for Oracle® Developers
Built-in Package Guide
number_value | 0
char_value |
varchar_value |
date_value | 01-JAN-01 00:00:00
timestamp_value | 01-JAN-01 01:00:00
timestamp_with_time_zone_value | 31-DEC-00 20:00:00 -05:00
blob_value | \x5b72656461637465645d
clob_value | [redacted]
(1 row)
2. Now, update the default values for full redaction type. The NULL values will be
ignored.
\c edb base_user
edb=# BEGIN
DBMS_REDACT.update_full_redaction_values (
number_val => 9999999,
char_val => 'Z',
varchar_val => 'V',
datecol_val => to_date('17/10/2018', 'DD/MM/YYYY'),
ts_val => to_timestamp('17/10/2018 11:12:13', 'DD/MM/YYYY HH24:MI:SS'),
tswtz_val => NULL,
blob_val => 'NEW REDACTED VALUE',
clob_val => 'NEW REDACTED VALUE');
END;
3. You can now see the updated values using redaction_values_for_type_full
view.
EDB-SPL Procedure successfully completed
edb=# SELECT number_value, char_value, varchar_value, date_value,
timestamp_value, timestamp_with_time_zone_value, blob_value,
clob_value
FROM redaction_values_for_type_full;
-[ RECORD 1 ]------------------+---------------------------------------
number_value | 9999999
char_value | Z
varchar_value | V
date_value | 17-OCT-18 00:00:00
timestamp_value | 17-OCT-18 11:12:13
timestamp_with_time_zone_value | 31-DEC-00 20:00:00 -05:00
blob_value | \x4e45572052454441435445442056414c5545
clob_value | NEW REDACTED VALUE
(1 row)
Redacted Result:
edb=# \c edb redact_user
You are now connected to database "edb" as user "redact_user".
edb=> select * from redact_user payment_details_tab order by 1;
customer_id | card_string
-------------+-------------
9999999 | V
9999999 | V
(2 rows)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 170
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.14 DBMS_RLS
The DBMS_RLS package enables the implementation of Virtual Private Database on
certain Advanced Server database objects.
Function/Procedure Function or Return Description
Procedure Type
ADD_POLICY(object_schema, Procedure n/a Add a security policy to a database object.
object_name, policy_name,
function_schema, policy_function
[, statement_types [,
update_check [, enable [,
static_policy [, policy_type [,
long_predicate [,
sec_relevant_cols [,
sec_relevant_cols_opt ]]]]]]]])
DROP_POLICY(object_schema, Procedure n/a Remove a security policy from a database
object_name, policy_name) object.
ENABLE_POLICY(object_schema, Procedure n/a Enable or disable a security policy.
object_name, policy_name, enable)
Advanced Server's implementation of DBMS_RLS is a partial implementation when
compared to Oracle's version. Only those functions and procedures listed in the table
above are supported.
Virtual Private Database is a type of fine-grained access control using security policies.
Fine-grained access control in Virtual Private Database means that access to data can be
controlled down to specific rows as defined by the security policy.
The rules that encode a security policy are defined in a policy function, which is an SPL
function with certain input parameters and return value. The security policy is the named
association of the policy function to a particular database object, typically a table.
Note: In Advanced Server, the policy function can be written in any language supported
by Advanced Server such as SQL, PL/pgSQL and SPL.
Note: The database objects currently supported by Advanced Server Virtual Private
Database are tables. Policies cannot be applied to views or synonyms.
The advantages of using Virtual Private Database are the following:
 Provides a fine-grained level of security. Database object level privileges given by
the GRANT command determine access privileges to the entire instance of a
database object, while Virtual Private Database provides access control for the
individual rows of a database object instance.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 171
Database Compatibility for Oracle® Developers
Built-in Package Guide
 A different security policy can be applied depending upon the type of SQL
command (INSERT, UPDATE, DELETE, or SELECT).
 The security policy can vary dynamically for each applicable SQL command
affecting the database object depending upon factors such as the session user of
the application accessing the database object.
 Invocation of the security policy is transparent to all applications that access the
database object and thus, individual applications do not have to be modified to
apply the security policy.
 Once a security policy is enabled, it is not possible for any application (including
new applications) to circumvent the security policy except by the system privilege
noted by the following.
 Even superusers cannot circumvent the security policy except by the system
privilege noted by the following.
Note: The only way security policies can be circumvented is if the EXEMPT ACCESS
POLICY system privilege has been granted to a user. The EXEMPT ACCESS POLICY
privilege should be granted with extreme care as a user with this privilege is exempted
from all policies in the database.
The DBMS_RLS package provides procedures to create policies, remove policies, enable
policies, and disable policies.
The process for implementing Virtual Private Database is as follows:
 Create a policy function. The function must have two input parameters of type
VARCHAR2. The first input parameter is for the schema containing the database
object to which the policy is to apply and the second input parameter is for the
name of that database object. The function must have a VARCHAR2 return type.
The function must return a string in the form of a WHERE clause predicate. This
predicate is dynamically appended as an AND condition to the SQL command that
acts upon the database object. Thus, rows that do not satisfy the policy function
predicate are filtered out from the SQL command result set.
 Use the ADD_POLICY procedure to define a new policy, which is the association
of a policy function with a database object. With the ADD_POLICY procedure, you
can also specify the types of SQL commands (INSERT, UPDATE, DELETE, or
SELECT) to which the policy is to apply, whether or not to enable the policy at the
time of its creation, and if the policy should apply to newly inserted rows or the
modified image of updated rows.
 Use the ENABLE_POLICY procedure to disable or enable an existing policy.
 Use the DROP_POLICY procedure to remove an existing policy. The
DROP_POLICY procedure does not drop the policy function or the associated
database object.