### Redacted Result:
```sql
edb=# \c edb redact_user
You are now connected to database "edb" as user "redact_user".
edb=> SELECT customer_id FROM redact_user.payment_details_tab ORDER BY 1;
 customer_id 
-------------
           0
           0
(2 rows)
```

### Copyright Notice
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.

### Database Compatibility for Oracle® Developers
#### Built-in Package Guide

#### 3.13.3 ALTER_POLICY
The `alter_policy` procedure modifies an existing data redaction policy for a table.

**Procedure:**
```sql
PROCEDURE alter_policy (
    object_schema IN VARCHAR2 DEFAULT NULL,
    object_name IN VARCHAR2,
    policy_name IN VARCHAR2,
    action IN INTEGER DEFAULT DBMS_REDACT.ADD_COLUMN,
    column_name IN VARCHAR2 DEFAULT NULL,
    function_type IN INTEGER DEFAULT DBMS_REDACT.FULL,
    function_parameters IN VARCHAR2 DEFAULT NULL,
    expression IN VARCHAR2 DEFAULT NULL,
    regexp_pattern IN VARCHAR2 DEFAULT NULL,
    regexp_replace_string IN VARCHAR2 DEFAULT NULL,
    regexp_position IN INTEGER DEFAULT DBMS_REDACT.RE_BEGINNING,
    regexp_occurrence IN INTEGER DEFAULT DBMS_REDACT.RE_ALL,
    regexp_match_parameter IN VARCHAR2 DEFAULT NULL,
    policy_description IN VARCHAR2 DEFAULT NULL,
    column_description IN VARCHAR2 DEFAULT NULL,
    custom_function_expression IN VARCHAR2 DEFAULT NULL
)
```

**Parameters:**

- **object_schema**: Specifies the schema in which the object resides. If `NULL`, the object is searched according to the `search_path` setting.
- **object_name**: Name of the table to which the data redaction policy will be applied.
- **policy_name**: Name of the policy to be modified.
- **action**: The action to perform (e.g., `DBMS_REDACT.ADD_COLUMN`). For more information, see [Using DBMS_REDACT Constants and Function Parameters](#using-dbms_redact-constants-and-function-parameters).
- **column_name**: Name of the column to which the redaction policy applies.
- **function_type**: Type of redaction function to use. Possible values include `NONE`, `FULL`, `PARTIAL`, `RANDOM`, `REGEXP`, and `CUSTOM`.
- **function_parameters**: Parameters for the redaction function.
- **expression**: Boolean expression that determines how the policy is applied. Redaction occurs if this expression evaluates to `TRUE`.
- **regexp_pattern**: Regular expression used to redact data. If the pattern does not match, `NULL` is returned.
- **regexp_replace_string**: Replacement string value.
- **regexp_position**: Position where the search should begin. Default is `RE_BEGINNING`.
- **regexp_occurrence**: Specifies the replacement occurrence. `RE_ALL` replaces all matching substrings, while `RE_FIRST` replaces only the first.
- **regexp_match_parameter**: Changes the default matching behavior. Possible values include `RE_CASE_SENSITIVE`, `RE_CASE_INSENSITIVE`, `RE_MULTIPLE_LINES`, `RE_NEWLINE_WILDCARD`, and `RE_IGNORE_WHITESPACE`.
- **policy_description**: Description of the redaction policy.
- **column_description**: Description of the column to be redacted. Note that this parameter is not supported, and specifying a description will result in a warning message.
- **custom_function_expression**: Applicable only for the `CUSTOM` redaction type. This is a function expression, such as `schema_name.function_name(argument1, ...)`, that allows users to implement their own redaction logic.

**Example:**
```sql
\c edb base_user
BEGIN
    DBMS_REDACT.alter_policy (
        object_schema => 'public',
        object_name => 'payment_details_tab',
        policy_name => 'redactPolicy_001',
        action => DBMS_REDACT.ADD_COLUMN,
        column_name => 'card_string',
        function_type => DBMS_REDACT.PARTIAL,
        function_parameters => DBMS_REDACT.REDACT_CCN16_F12
    );
END;
```

**Redacted Result:**
```sql
edb=# \c - redact_user
You are now connected to database "edb" as user "redact_user".
edb=> SELECT * FROM payment_details_tab;
 customer_id | card_string 
-------------+---------------------
            0 | ****-****-****-1234
            0 | ****-****-****-2345
(2 rows)
```

#### 3.13.4 DISABLE_POLICY
The `disable_policy` procedure disables an existing data redaction policy.

**Procedure:**
```sql
PROCEDURE disable_policy (
    object_schema IN VARCHAR2 DEFAULT NULL,
    object_name IN VARCHAR2,
    policy_name IN VARCHAR2
)
```

**Parameters:**

- **object_schema**: Specifies the schema in which the object resides. If `NULL`, the object is searched according to the `search_path` setting.
- **object_name**: Name of the table for which to disable the data redaction policy.
- **policy_name**: Name of the policy to be disabled.

**Example:**
```sql
\c edb base_user
BEGIN
    DBMS_REDACT.disable_policy(
        object_schema => 'public',
        object_name => 'payment_details_tab',
        policy_name => 'redactPolicy_001'
    );
END;
```

**Redacted Result:**
Data is no longer redacted after disabling the policy.

#### 3.13.5 ENABLE_POLICY
The `enable_policy` procedure enables a previously disabled data redaction policy.

**Procedure:**
```sql
PROCEDURE enable_policy (
    object_schema IN VARCHAR2 DEFAULT NULL,
    object_name IN VARCHAR2,
    policy_name IN VARCHAR2
)
```

**Parameters:**

- **object_schema**: Specifies the schema in which the object resides. If `NULL`, the object is searched according to the `search_path` setting.
- **object_name**: Name of the table to which to enable the data redaction policy.
- **policy_name**: Name of the policy to be enabled.

**Example:**
```sql
\c edb base_user
BEGIN
    DBMS_REDACT.enable_policy(
        object_schema => 'public',
        object_name => 'payment_details_tab',
        policy_name => 'redactPolicy_001'
    );
END;
```

**Redacted Result:**
Data is redacted after enabling the policy.

#### 3.13.6 DROP_POLICY
The `drop_policy` procedure removes a data redaction policy from a table.

**Procedure:**
```sql
PROCEDURE drop_policy (
    object_schema IN VARCHAR2 DEFAULT NULL,
    object_name IN VARCHAR2,
    policy_name IN VARCHAR2
)
```

**Parameters:**

- **object_schema**: Specifies the schema in which the object resides. If `NULL`, the object is searched according to the `search_path` setting.
- **object_name**: Name of the table from which to drop the data redaction policy.
- **policy_name**: Name of the policy to be dropped.

**Example:**
```sql
\c edb base_user
BEGIN
    DBMS_REDACT.drop_policy(
        object_schema => 'public',
        object_name => 'payment_details_tab',
        policy_name => 'redactPolicy_001'
    );
END;
```

**Redacted Result:**
The specified policy is dropped.

#### 3.13.7 UPDATE_FULL_REDACTION_VALUES
The `update_full_redaction_values` procedure updates the default displayed values for a data redaction policy. These default values can be viewed using the `redaction_values_for_type_full` view.

**Procedure:**
```sql
PROCEDURE update_full_redaction_values (
    number_val IN NUMBER DEFAULT NULL,
    binfloat_val IN FLOAT4 DEFAULT NULL,
    bindouble_val IN FLOAT8 DEFAULT NULL,
    char_val IN CHAR DEFAULT NULL,
    varchar_val IN VARCHAR2 DEFAULT NULL,
    nchar_val IN NCHAR DEFAULT NULL,
    nvarchar_val IN NVARCHAR2 DEFAULT NULL,
    datecol_val IN DATE DEFAULT NULL,
    ts_val IN TIMESTAMP DEFAULT NULL,
    tswtz_val IN TIMESTAMPTZ DEFAULT NULL,
    blob_val IN BLOB DEFAULT NULL,
    clob_val IN CLOB DEFAULT NULL,
    nclob_val IN CLOB DEFAULT NULL
)
```

**Parameters:**

- **number_val**: Updates the default value for columns of the `NUMBER` datatype.
- **binfloat_val**: Random value for the `FLOAT4` datatype. Binary float is not supported.
- **bindouble_val**: Random value for the `FLOAT8` datatype. Binary double is not supported.
- **char_val**: Updates the default value for columns of the `CHAR` datatype.
- **varchar_val**: Updates the default value for columns of the `VARCHAR2` datatype.
- **nchar_val**: Mapped to `CHAR` and returns the `CHAR` value.
- **nvarchar_val**: Mapped to `VARCHAR2` and returns the `VARCHAR` value.
- **datecol_val**: Updates the default value for columns of the `DATE` datatype.
- **ts_val**: Updates the default value for columns of the `TIMESTAMP` datatype.
- **tswtz_val**: Updates the default value for columns of the `TIMESTAMPTZ` datatype.
- **blob_val**: Updates the default value for columns of the `BLOB` datatype.
- **clob_val**: Updates the default value for columns of the `CLOB` datatype.
- **nclob_val**: Mapped to `CLOB` and returns the `CLOB` value.

**Example:**
1. View the default values using the `redaction_values_for_type_full` view:
   ```sql
   edb=# \x
   Expanded display is on.
   edb=# SELECT number_value, char_value, varchar_value, date_value, timestamp_value, timestamp_with_time_zone_value, blob_value, clob_value
   FROM redaction_values_for_type_full;
   -[ RECORD 1 ]------------------+--------------------------
   number_value | 0
   char_value |
   varchar_value |
   date_value | 01-JAN-01 00:00:00
   timestamp_value | 01-JAN-01 01:00:00
   timestamp_with_time_zone_value | 31-DEC-00 20:00:00 -05:00
   blob_value | \x5b72656461637465645d
   clob_value | [redacted]
   (1 row)
   ```

2. Update the default values for the full redaction type:
   ```sql
   \c edb base_user
   BEGIN
       DBMS_REDACT.update_full_redaction_values (
           number_val => 9999999,
           char_val => 'Z',
           varchar_val => 'V',
           datecol_val => to_date('17/10/2018', 'DD/MM/YYYY'),
           ts_val => to_timestamp('17/10/2018 11:12:13', 'DD/MM/YYYY HH24:MI:SS'),
           tswtz_val => NULL,
           blob_val => 'NEW REDACTED VALUE',
           clob_val => 'NEW REDACTED VALUE'
       );
   END;
   ```

3. View the updated values using the `redaction_values_for_type_full` view:
   ```sql
   EDB-SPL Procedure successfully completed
   edb=# SELECT number_value, char_value, varchar_value, date_value, timestamp_value, timestamp_with_time_zone_value, blob_value, clob_value
   FROM redaction_values_for_type_full;
   -[ RECORD 1 ]------------------+---------------------------------------
   number_value | 9999999
   char_value | Z
   varchar_value | V
   date_value | 17-OCT-18 00:00:00
   timestamp_value | 17-OCT-18 11:12:13
   timestamp_with_time_zone_value | 31-DEC-00 20:00:00 -05:00
   blob_value | \x4e45572052454441435445442056414c5545
   clob_value | NEW REDACTED VALUE
   (1 row)
   ```

**Redacted Result:**
```sql
edb=# \c edb redact_user
You are now connected to database "edb" as user "redact_user".
edb=> SELECT * FROM redact_user.payment_details_tab ORDER BY 1;
 customer_id | card_string 
-------------+-------------
 9999999 | V
 9999999 | V
(2 rows)
```

### 3.14 DBMS_RLS
The `DBMS_RLS` package enables the implementation of Virtual Private Database (VPD) on certain Advanced Server database objects.

**Function/Procedure:**
- **ADD_POLICY**: Adds a security policy to a database object.
- **DROP_POLICY**: Removes a security policy from a database object.
- **ENABLE_POLICY**: Enables or disables a security policy.

**Advantages of Using Virtual Private Database:**

- Provides fine-grained access control down to specific rows.
- Different security policies can be applied based on the type of SQL command (INSERT, UPDATE, DELETE, or SELECT).
- Security policies can vary dynamically based on factors such as the session user.
- Invocation of the security policy is transparent to all applications.
- Once enabled, the security policy cannot be circumvented except by users with the `EXEMPT ACCESS POLICY` system privilege.

**Implementation Process:**

1. **Create a Policy Function**: The function must have two input parameters of type `VARCHAR2` and return a `VARCHAR2` string in the form of a WHERE clause predicate.
2. **Define a New Policy**: Use the `ADD_POLICY` procedure to associate the policy function with a database object.
3. **Enable or Disable an Existing Policy**: Use the `ENABLE_POLICY` procedure.
4. **Remove an Existing Policy**: Use the `DROP_POLICY` procedure.

**Note:**
- The `EXEMPT ACCESS POLICY` privilege should be granted with extreme care, as it exempts the user from all policies in the database.
- Only tables are currently supported; policies cannot be applied to views or synonyms.