# SpringBoot-Actuator-SnakeYAML-RCE漏洞深度分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
近期搬砖过程中又遇到actuator组件开放的情况，且env端点发现存在SnakeYAML依赖，为判断能否通过此问题进一步深入到内部，尝试借用SnakeYAML依赖获取服务端权限，失败了……
为确认失败原因，特对actuator+SnakeYAML rce问题进行了深入分析，下面为过程记录。
## SnakeYAML使用
是Java用于解析yaml格式数据的类库, 它提供了dump()将java对象转为yaml格式字符串，load()将yaml字符串转为java对象；
创建一个User类：
    public class User {
        String name;
        Integer age;
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public Integer getAge() {
            return age;
        }
        public void setAge(Integer age) {
            this.age = age;
        }
        @Override
        public String toString() {
            return "User{" +
                    "name='" + name + '\'' +
                    ", age=" + age +
                    '}';
        }
    }
snakeyaml序列化、反序列化测试：
    public class SnakeYamlTest {
        public static void main(String[] args) {
            // 序列化测试
            User user = new User();
            user.setName("test");
            user.setAge(20);
            Yaml yaml1 = new Yaml();
            String dump1 = yaml1.dump(user);
            System.out.println("snakeyaml序列化测试：");
            System.out.println(dump1);
            //反序列化测试
            String dump2 = "!!com.ttestoo.snakeyaml.demo.User {age: 30, name: admin}";
            Yaml yaml2 = new Yaml();
            Object load = yaml2.load(dump2);
            System.out.println("snakeyaml反序列化测试：");
            System.out.println(load.getClass());
            System.out.println(load);
        }
    }
运行结果：
## Actuator env说明
1、actuator组件的/env端点是否支持POST请求？
这个问题困扰了挺久，google搜了很多最终还是回到了官方文档，结论如下：
springboot的/env本身是只读的，是否能post是springcloud的扩展！！！项目作者在GitHub回复如下：
而且翻了springboot多个1.x和2.x的官方文档，均未提及env端点能post请求改变环境变量：
官方文档地址如下，改版本号即可：
所有版本文档：
2.2.5版本 actuator api文档如下：
文档中仅说明可GET请求，并未提及可POST请求！！！
根据github上springboot作者提示，继续翻springcloud官方文档，证明在springcloud的spring-cloud-context模块中对env进行了扩展，支持post请求：
[https://cloud.spring.io/spring-cloud-static/spring-cloud-commons/2.1.3.RELEASE/single/spring-cloud-commons.html#_endpoints（这里以2.1.3版本为例）](https://cloud.spring.io/spring-cloud-static/spring-cloud-commons/2.1.3.RELEASE/single/spring-cloud-commons.html#_endpoints%EF%BC%88%E8%BF%99%E9%87%8C%E4%BB%A52.1.3%E7%89%88%E6%9C%AC%E4%B8%BA%E4%BE%8B%EF%BC%89)
2、那么实际利用过程中为啥有时post请求报错405呢？
继续查询springcloud项目文档，spring cloud所有版本文档：[https://docs.spring.io/spring-cloud/docs/；](https://docs.spring.io/spring-cloud/docs/%EF%BC%9B)
发现在Spring Cloud Hoxton Service Release 3
(SR3)的更新公告中，env端点默认不可写即post请求，可通过management.endpoint.env.post.enabled=true配置开启env端点的post请求：
继续查看Spring Cloud Hoxton Service Release 3 (SR3)的更新公告，可得知Hoxton.SR3基于Spring
Boot 2.2.5.RELEASE构建：
在最下方可看到Hoxton.SR3版本对应的Spring Cloud Config组件版本为2.2.2.RELEASE：
那么为什么Spring Cloud Config组件和Spring Cloud context模块又有什么关系呢？查看spring-cloud-config
2.2.2.RELEASE代码，其中pom.xml中包含spring-cloud-context 2.2.2.RELEASE依赖：
也就是说项目中引入了spring-cloud-starter-config 2.2.2.RELEASE也就包含了 spring-cloud-context
2.2.2.RELEASE， **这就是为什么针对actuator rce利用环境中引入spring-cloud-starter-config组件或者指定spring-cloud-dependencies版本为Hoxton.SR1的原因！！！**
且这里已对spring-cloud-starter-config 2.2.1.RELEASE版本进行验证，Hoxton.SR3版本对应的spring-cloud-context也为2.2.2.RELEASE；
总结，在spring cloud Hoxton.SR3开始（基于Spring Boot 2.2.5.RELEASE构建，其中spring-cloud-context或者spring-cloud-starter-config为2.2.2.RELEASE版本），需要配置management.endpoint.env.post.enabled=true才可post访问env端点。
实际验证：
(1) 当引入spring-cloud-starter-config或spring-cloud-context 2.2.1.RELEASE时:
        org.springframework.cloud
        spring-cloud-starter-config
        2.2.1.RELEASE
    或
        org.springframework.cloud
        spring-cloud-context
        2.2.1.RELEASE
不用手工单独配置management.endpoint.env.post.enabled=true即可进行post请求：
(2) 当引入spring-cloud-starter-config或spring-cloud-context 2.2.2.RELEASE时：
        org.springframework.cloud
        spring-cloud-starter-config
        2.2.2.RELEASE
    或
        org.springframework.cloud
        spring-cloud-context
        2.2.2.RELEASE
若未配置management.endpoint.env.post.enabled=true，则不支持post请求：
当配置management.endpoint.env.post.enabled=true后，可支持post请求：
## 漏洞利用
###  部分条件
SpringBoot 1.x（spring-cloud-context copyEnvironment函数未更新前）
Actuator未授权且需springcloud扩展env endpoints post请求
org.yaml.snakeyaml组件
###  漏洞环境