title:Social SDN: online social networks integration in wireless network
provisioning
author:Arjuna Sathiaseelan and
M. Said Seddiki and
Stoyan Stoyanov and
Dirk Trossen
Social SDN: Online Social Networks Integration
in Wireless Network Provisioning
Arjuna Sathiaseelan
University of Cambridge
Cambridge, UK
PI:EMAIL
M. Said Seddiki
Georgia Tech / Lorraine University
Atlanta,USA / Nancy, France
PI:EMAIL
Stoyan Stoyanov
University of Cambridge
Cambridge, UK
PI:EMAIL
Dirk Trossen
InterDigital Europe Ltd
London, UK
PI:EMAIL
Categories and Subject Descriptors
C.2.2 [Computer Systems Organization]: Network
Operations—Network management
Keywords
Software Deﬁned Networking; Online Social Networks.
1.
INTRODUCTION
The recent advances in Software Deﬁned Networking
(SDN) have demonstrated more ﬂexibility in controlling
and managing access networks by the diﬀerent stakeholders,
such as users, infrastructure providers, or virtual network
operators (see [3]). SDN is a natural evolution that brings
programmability to network elements by merging datacoms
with telecoms where the need for higher programmability of
the data plane has been pushed from data centres into wider
area networks. Network operators are making sure to leave
no stone unturned to take advantage of the ﬂexibility oﬀered
by the SDN paradigm to manage and make time and cost
critical traﬃc engineering decisions, thus avoiding/reducing
the costs incurred to the diﬀerent stakeholders that use
and operate the network. Network operators perform large
scale data analytics on internal network and traﬃc data
which is then fed back to network applications that utilise
speciﬁc control plane functions to reconﬁgure and manage
the network. The integration of Big Data with SDN is seen
as an important strategy by the network operators.
In this paper, we propose the idea of integrating external
data (such as information from Facebook, Twitter, news
feeds etc.) with SDN to enable operators to make intelligent
traﬃc engineering decisions with their networks.
Such
integration would pave the way for novel ways of identifying
not only the internal network and traﬃc characteristics (as
currently carried out by operators) but also external/user
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the Owner/Author. Copyright is held by the owner/author(s).
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
ACM 978-1-4503-2836-4/14/08.
http://dx.doi.org/10.1145/2619239.2631437.
needs (engineering the network dynamically to support the
needs of the users).
Imagine a scenario where data from
Online Social Networks (OSN) could be used to predict the
need for allocation for resources: for e.g. based on twitter
trends the network operator understanding/predicting ﬂash
crowds in an area and allocating resources dynamically
to satisfy the need or network operators understanding
trends in OSN for certain TV programs and estimating the
demand that will be placed on the network and allocating
the capacity.
Such integration will also be very useful
during emergencies, such as natural disasters or terrorist
activities, where networks could be opened up to the public
to communicate.
We deﬁne Social SDN, a SDN architecture that enables
integration of OSN with wireless networks. The architecture
deﬁnes the necessary northbound APIs that interface data
from OSNs to the appropriate control functions that make
the necessary traﬃc engineering decisions. These decisions
are then pushed to the network via south bound APIs by
the controller. We will demonstrate a use case of this
architecture by developing a new application that enables
home owners to express their home network sharing policies
based on online social relationships. These policies are
then translated into traﬃc engineering decisions providing
varying Quality of Service (QoS) levels to users who use the
sharer’s wireless network based on their OSN relationship
with the sharer.
2. ARCHITECTURE
In our proposed architecture (Fig. 1), the control plane
exposes a minimal northbound RESTful API, through
which third party applications access the diﬀerent control
functions provided by the control plane for queue/QoS
management, traﬃc redirection etc. Speciﬁc applications
can be developed that utilise the policies expressed by the
diﬀerent stakeholders as well as the data mined data from
OSNs to use speciﬁc control plane functions to orchestrate
new rules within the network. These control functions are
distributed across the network and we demonstrate one such
function in the next section. The Access Point Manager
(APM) resides in home broadband access points exposing
to the controller a conﬁguration API for traﬃc shaping
queues, access point QoS management and an Openﬂow
control
interface. The Slice Manager enables creation
375Figure 1: Social SDN: Proposed Architecture.
and management of individual network slices, providing
strict traﬃc isolation and traﬃc guarantees. For this, the
information provided by the Topology Discovery provides
a global view of individual node resource availability. Such
view in turn being utilized to provide Path Computation and
Traﬃc Redirection functions within the individual slices,
complemented with the appropriate accounting functionality
based on the Usage Monitoring function. All network
control decisions (new rules) are pushed to the data plane
via the south bound APIs that support both OpenFlow as
well as legacy protocols such as NETCONF, SNMP etc.
3. USE CASE: EXPLOITING ONLINE
SOCIAL RELATIONSHIPS TO ENABLE
HOME BANDWIDTH MANAGEMENT
The proposed use case demonstrates how online social
relationships can be translated into network sharing
decisions. In our use case, we developed an application that
enables home owners to express network sharing policies
based on online social relationships. These policies are
then translated into traﬃc engineering decisions providing
varying QoS levels to users who use the network based
on their OSN relationship with the sharer. The sharing
policies are based on the concept of social relationships,
or ”friendships” in Facebook, between the sharer and other
users of the network classiﬁed through the diﬀerent classes
of relationships represented in Facebook (e.g., close friends,
family, acquaintances or not in the friend’s list). These
classes are very intuitive for users and users would be able
to easily translate from this Facebook classiﬁcation scheme
to the concept of diﬀerent classes of users within a network
which may receive diﬀerent resource allocations. For e.g. a
group of people who are members of the network owner’s
”close friends” group on Facebook may receive a higher
bandwidth on the owner’s network than users who are not
friends or ’close friends’ might receive priority over any non-
friends. The use of OSN for making networking related
decisions is not new. Openwiﬁ [5], FON [2] and Cisco Meraki
[1] have recently deployed solutions that allow users to log
into the wireless network using their Facebook credentials.
However, these solutions do not support any procedures for
Figure 2: Mapping social relationships to network
resource provisioning.
a network owner to create a customised sharing policy or
control how capacity is granted to connected users.
Figure 2 presents the control ﬂow diagram of our proposed
use case. Whenever, an user tries to use a WiFi network that
is shared by a network owner (for e.g.
in a crowdshared
network such as FON), our application daemon (Facebook
APP) running on the home access point checks if the user
has been authenticated.
If not authenticated, the user is
immediately redirected to a Facebook login page. Upon
successful authentication, the web page obtains the user
identiﬁcation data plus an access token, an opaque string
that identiﬁes the user, application or web page, information
about when the token will expire and which application
generated the token. Using this information our application
uses the Facebook Graph API to obtain a list of the friends
of the recently-authenticated user. The data from this API
is returned in a JSON format. The application then uses the
data returned from the Graph API to determine the social
relationship between the user and the network owner and
categorize the user into the appropriate class. This data is
then used to create a mapping between the speciﬁc user and
the QoS. The controller then pushes the speciﬁc OpenFlow
rule to the APM and the user is granted access and capacity
based on the sharing policies created by the network’ owner.
Ongoing Work: We have built a prototype of the use
case by integrating a kernel module of Open vSwitch on
OpenWRT. The controller was developed by extending the
functionality of the Floodlight controller (v0.9). The code is
publicly available at [4]. More work is being carried out to
develop new applications that will demonstrate the beneﬁts
of our proposed architecture. Performance benchmarking of
the control plane functions will also be carried out.
4. REFERENCES
[1] Cisco Meraki. http://meraki.cisco.com/.
[2] Fon. http://www.fon.com.
[3] A. Sathiaseelan, C. Rotsos, C. Sriram, D. Trossen,
P. Papadimitriou, and J. Crowcroft. Virtual public
networks. In Second European Workshop on Software
Deﬁned Networks (EWSDN), pages 1–6, 2013.
[4] Virtual Public Networks code.
https://github.com/sarjuna/vpun.
[5] K.-K. Yap, Y. Yiakoumis, M. Kobayashi, S. Katti,
G. Parulkar, and N. McKeown. Separating
authentication, access and accounting: A case study
with openwiﬁ. Open Networking Foundation, Tech.
Rep, 2011.
AP	
  manager	
  Northbound	
  API	
  (REST)	
  Topology	
  Discovery	
  Path	
  Computa8on	
  Traﬃc	
  Redirec8on	
  Usage	
  Monitoring	
  Southbound	
  API	
  (OF,	
  NETCONF,	
  SNMP)	
  Network	
  Devices	
  User	
  Policies	
  Network	
  Operator	
  Policies	
  Service	
  Provider	
  Policies	
  App	
  1	
  App	
  2	
  App	
  3	
  App	
  n	
  Control Plane Slice	
  manager	
  (1) User authenticates using FB (Flow 1) (3) OAuth (4) /me/friends/OwnerID (7) Flow 1 placed in queue APM Controller (6) ovs-ofctl add-flow  (2) Packet of Flow 1 Prio 1 Prio 2 Access Point (5) Map(Relationship, QoS) 376