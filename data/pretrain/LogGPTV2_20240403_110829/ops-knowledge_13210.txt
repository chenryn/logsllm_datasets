User: 请使用Python编写一个脚本，用于监控一台Web服务器的CPU、内存和磁盘占用情况，并在出现异常时发送警报邮件。
Assistant: 以下是一个简单的Python脚本，可用于监控Web服务器的CPU、内存和磁盘占用情况，并在出现异常时发送警报邮件：

```
import psutil
import smtplib
from email.mime.text import MIMEText
from email.header import Header


# 设置警报阈值，超过该阈值则发出警报邮件
cpu_threshold = 80
mem_threshold = 80
disk_threshold = 80

# 获取CPU占用率
cpu_usage = psutil.cpu_percent()
if cpu_usage > cpu_threshold:
    # 发送CPU警报邮件
    msg = MIMEText('CPU占用率过高：{}%'.format(cpu_usage), 'plain', 'utf-8')
    msg['From'] = Header('Web服务器')
    msg['To'] = Header('管理员')
    msg['Subject'] = Header('警报：CPU占用率过高', 'utf-8')
    
    smtp_server = 'smtp.example.com'
    smtp_port = 587
    smtp_username = 'admin@example.com'
    smtp_password = 'password'
    sender = 'admin@example.com'
    receivers = ['admin@example.com']
    
    smtp_conn = smtplib.SMTP(smtp_server, smtp_port)
    smtp_conn.starttls()
    smtp_conn.login(smtp_username, smtp_password)
    smtp_conn.sendmail(sender, receivers, msg.as_string())
    smtp_conn.quit()


# 获取内存占用率
mem_info = psutil.virtual_memory()
mem_usage = mem_info.percent
if mem_usage > mem_threshold:
    # 发送内存警报邮件
    msg = MIMEText('内存占用率过高：{}%'.format(mem_usage), 'plain', 'utf-8')
    msg['From'] = Header('Web服务器')
    msg['To'] = Header('管理员')
    msg['Subject'] = Header('警报：内存占用率过高', 'utf-8')
    
    smtp_server = 'smtp.example.com'
    smtp_port = 587
    smtp_username = 'admin@example.com'
    smtp_password = 'password'
    sender = 'admin@example.com'
    receivers = ['admin@example.com']
    
    smtp_conn = smtplib.SMTP(smtp_server, smtp_port)
    smtp_conn.starttls()
    smtp_conn.login(smtp_username, smtp_password)
    smtp_conn.sendmail(sender, receivers, msg.as_string())
    smtp_conn.quit()


# 获取磁盘空间占用率
disk_info = psutil.disk_usage('/')
disk_usage = disk_info.percent
if disk_usage > disk_threshold:
    # 发送磁盘警报邮件
    msg = MIMEText('磁盘空间占用率过高：{}%'.format(disk_usage), 'plain', 'utf-8')
    msg['From'] = Header('Web服务器')
    msg['To'] = Header('管理员')
    msg['Subject'] = Header('警报：磁盘空间占用率过高', 'utf-8')
    
    smtp_server = 'smtp.example.com'
    smtp_port = 587
    smtp_username = 'admin@example.com'
    smtp_password = 'password'
    sender = 'admin@example.com'
    receivers = ['admin@example.com']
    
    smtp_conn = smtplib.SMTP(smtp_server, smtp_port)
    smtp_conn.starttls()
    smtp_conn.login(smtp_username, smtp_password)
    smtp_conn.sendmail(sender, receivers, msg.as_string())
    smtp_conn.quit()
```

注：在实际使用中，需要根据实际情况修改SMTP服务器、用户名、密码、发件人、收件人、阈值等信息。同时，需要将该脚本定时执行，以对服务器进行持续监控。