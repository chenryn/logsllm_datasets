title:Deadlock Resolution via Exceptions for Dependable Java Applications
author:Zeng Fancong
Deadlock Resolution via Exceptions for Dependable Java Applications
Fancong Zeng
Department of Computer Science
Rutgers University
Piscataway, NJ, 08854
E-mail: PI:EMAIL
Abstract
Deadlock occurrences represent not only abnormal
states but also fatal errors, thus it is natural to consider
deadlock occurrences as runtime exceptions. Exception
handlers can be exploited to resolve potential deadlock oc-
currences during the execution of code that is not deadlock
free and that can be unchangeable, invisible, or dynamically
loaded from networks. This paper describes an approach
of deadlock resolution via exceptions with an emphasis on
the design, application and implementation of deadlock ex-
ceptions and their handlers, and shows that the approach
is practical and effective in incorporating code that is not
deadlock free into dependable Java applications.
1. Introduction
Due to the difﬁculty of the state explosion problem, it
is inherently hard to ﬁnd and remove deadlocks in multi-
threaded programs. There are some tools to help ﬁnding
deadlocks in multithreaded Java programs, but they are not
widely used in industries for various reasons. One technical
reason is that these tools cannot efﬁciently handle large real-
life programs, which may dynamically load classes from
networks, without generating too many spurious warnings.
Moreover, although some of the tools can show in a conser-
vative way the absence of simple types of deadlocks in some
small programs not using certain Java features, they cannot
be used to certify large real-life Java programs for deadlock
freedom. Consequently, it is difﬁcult for programmers to
write deadlock-free code only, and most existing class li-
braries do not bear a certiﬁcate for deadlock freedom.
Nowadays when building truly dependable multi-
threaded Java applications, programmers cannot use or pro-
duce code not guaranteed to be deadlock free. Thus,
the productivity of dependable applications containing
deadlock-free code only is quite unsatisfactory. To improve
software productivity and quality, it will be a necessary
breakthrough to provide a systematic and programmable ap-
proach for incorporating code that is not deadlock free into
dependable Java applications. Because at runtime it is rel-
atively easy to detect actual deadlock occurrences, which
represent not only abnormal states but also fatal errors, it is
natural to consider deadlock occurrences as runtime excep-
tions and to exploit exception handlers to resolve potential
deadlock occurrences during the execution of code.
Besides ﬁtness in nature, my approach of deadlock res-
olution via exceptions for dependable Java applications has
the following E5 features:
• Effortless and Efﬁcient Implementation I adopt an ef-
ﬁcient and practical deadlock detection method which
is easy to be implemented in a Java Virtual Machine
(JVM). The analysis of an initial implementation in a
Latte JVM shows that small runtime overheads to sup-
port exceptions for deadlocks only related to Java mon-
itors can be achieved with little implementation effort.
• Easy Programming Because exceptions are a widely
understood language construct, the approach is intu-
itive for programmers (to learn) to use.
In addition,
two complementary types of deadlock exception han-
dlers provided by the approach allow programmers to
easily implement various kinds of resolution actions.
Moreover, the approach does not require programmers
to learn new APIs. Rather, it only asks programmers
to use some easy-to-follow programming conventions
when using existing Thread and ThreadGroup APIs.
• Effective Resolution Rich and useful information about
potential deadlock occurrences encoded in exception
objects helps programmers to choose suitable resolu-
tion actions among many candidates. For two pro-
grams to be discussed later in this paper, all potential
deadlock occurrences (with possible false positives)
can be resolved via exceptions.
• Extensive Application The approach can handle large
real-life (distributed) programs, which usually contain
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:08:07 UTC from IEEE Xplore.  Restrictions apply. 
unchangeable (and even invisible) code and may dy-
namically load classes from networks, because the ap-
proach does not assume the whole program knowledge
beforehand but relies on the JVM runtime to detect var-
ious deadlock conditions without signiﬁcantly impact-
ing runtime performance.
The above E5 features make the approach practical and
effective in developing dependable Java applications con-
taining code that is not deadlock free. This paper describes
the approach with an emphasis on the design, application
and implementation of deadlock exceptions and their han-
dlers.
Outline The rest of the paper is organized as follows.
Section 2 gives a pragmatic deﬁnition of deadlock and pro-
poses a practical deadlock detection method. Section 3 de-
scribes a design of deadlock exceptions and discusses two
types of deadlock exception handlers. Section 4 illustrates
the utility of the deadlock exceptions and their handlers in
programming practice. Section 5 analyzes an initial imple-
mentation, which uses a modiﬁed Latte JVM, in terms of
implementation effort and runtime performance. Section
6 discusses related work. Section 7 concludes the current
work and makes a perspective of future work.
2. Deadlocked threads and their detection
In this section, I ﬁrst go over monitors in the Java lan-
guage as common deadlocks are closely related to monitors.
Then I give a pragmatic deﬁnition of deadlock, and discuss
a practical deadlock detection method.
2.1. Monitors in the Java language
Java adopts Mesa-style monitors for thread communica-
tion and synchronization.
Java monitors are in the form
of synchronized methods or synchronized statements. A
thread has to acquire a lock associated to a monitor in order
to enter it. When the thread leaves the monitor, the thread
releases the lock. Every object has a lock.
Java provides condition variables in the form of the
methods of wait(), notify() and notifyAll() on class Object.
For a clear presentation, in this paper I assume wait() is in-
voked without a timeout value. A thread can wait in a moni-
tor by invoking wait(). Speciﬁcally, the thread is blocked on
the condition variable of the monitor after it invokes wait()
and before it is awakened up.
A thread that has invoked wait() releases the lock associ-
ated to the monitor, and it is disabled from scheduling until
the JVM sends it a notiﬁcation, which is produced by an-
other thread via an invocation of notify(), notifyAll() or in-
terrupt(). Java allows a thread with adequate permission to
interrupt another thread blocked on a condition variable by
invoking interrupt() for the blocked thread. Java provides
other methods for thread communication and manipulation.
For example, a thread can wait for the termination of an-
other thread via join(), and a thread can stop another thread
via stop(). The method stop() is now deprecated because
using it carelessly may lead to a deadlock. In this paper, I
assume stop() is only used in exception handlers to resolve
deadlocks.
2.2. A pragmatic deﬁnition of deadlock
At one time, a Java thread has at most one outstanding re-
quest for a lock or a notiﬁcation, but not both. For example,
only after a thread receives a notiﬁcation, can it request the
lock it released during the process of executing wait(). In
the presence of an outstanding request, a thread cannot run
any more until the outstanding request is granted. Locks
and notiﬁcations can be regarded as two resource types.
I use the following deﬁnition of deadlock: a Java thread
is deadlocked if and only if the thread is alive but cannot
run any more due to an outstanding resource request which
is never granted. A deadlock consists of related deadlocked
Java threads.
This deﬁnition covers more deadlock types than those
caused by misuse of monitors provided more resource types
are accommodated. For example, it covers communication
deadlocks across multiple JVMs if synchronous RMI mes-
sages are considered as a resource type. In addition, when
CPU time is considered as a resource type, this deﬁnition
can handle the case that some threads stay in the ready
queue forever.
On the other hand, because this deﬁnition builds on a
runtime property that threads involved in deadlocks cannot
run any more, it facilitates implementation but cannot deal
with some “deadlocks.” For example, when thread A and
thread B invoke join() for each other, thread A and thread
B are considered to be “deadlocked” as they are involved
in a cyclic wait for the termination of each other. Because
either thread A or thread B may be scheduled to run to test if
the other is still alive, the deﬁnition cannot handle this case
even if the event of terminating a thread is considered as a
resource.
This deﬁnition works for common deadlock patterns,
e.g., circular deadlocks and nested monitor deadlocks [9]. A
circular deadlock represents the situation that two or more
threads are involved in a cyclic wait for locks required to
continue their activities. A nested monitor deadlock cap-
tures the scenario that a thread is blocked forever on a con-
dition variable because it holds a lock being requested by
all threads that would produce a notiﬁcation to awaken it if
the lock were acquired.
Moreover, this deﬁnition applies to some practical dead-
lock situations which do not contain an intuitive cyclic wait
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:08:07 UTC from IEEE Xplore.  Restrictions apply. 
for resources. For example, after a thread has missed all
notiﬁcations that can ever be sent to it, the thread requests
a notiﬁcation by invoking wait(). Another example is that
a thread reqests a lock held by a thread that is executing an
inﬁnite loop containing no monitor operations. From pro-
grammers’ perspective, in both cases, the requesting thread
is deadlocked even if there is no cyclic wait at all.
Because this pragmatic deﬁnition focuses on the behav-
ior of individual deadlocked threads instead of the overall
structure of a deadlock, it is not trivial to work out a prac-
tical method for detecting deadlocks among Java threads,
which can be dynamically created and started. I propose a
practical deadlock detection method in the next subsection.
2.3. A practical deadlock detection method
The deadlock detection method proposed in this subsec-
tion can be adapted for various resource types. However,
for the sake of a clean presentation of essential techniques,
locks and notiﬁcations are considered as the only two re-
source types in this subsection.
The set of deadlocked threads at time point p is referred
to as DEADLOCK(p).
If at time point p no application
threads can run because all of them are waiting for locks or
notiﬁcations, then all application threads belong to DEAD-
LOCK(p). More generally, if a group of threads speciﬁed
by programmers are waiting for locks or notiﬁcations at
time point p, those threads may constitute a deadlock, i.e.,
those threads may belong to DEADLOCK(p). As hopefully
programmers have a good understanding of their programs,
this blocked-group-based solution is useful in many cases.
This solution, however, may produce both false positives
and false negatives.
There is a way to avoid false negatives. As history of-
ten gives a good prediction of future, a simple yet prac-
tical solution to predict whether a thread cannot run any
more is to see whether it has not run for an excessive
long time. More speciﬁcally, each thread is attached a
STARTWAIT value, which is set to 0 whenever a thread
is scheduled to run and which is set to the current sys-
tem time whenever the thread switches from the running
state to the ready state or the wait state. When a given
timer, which is (re)started at time point q, expires at time
point q+TIMEOUT(q), if a thread’s STARTWAIT is not
0 and current system time − this STARTWAIT value >=
the timeout value TIMEOUT(q), this thread is possibly
deadlocked. The set of all possibly deadlocked threads re-
ported by this timer-based solution at time point t is de-
noted as DEADEND(t). This timer-based solution avoids
false negatives in the sense that all elements in DEAD-
LOCK(p) for any p are in DEADEND(q+TIMEOUT(q))
where q=r+TIMEOUT(r), r<p<=q, and r and q are two
time points at which the timer is (re)started. The TIMEOUT
value is a key to the timer-based solution: when the TIME-
OUT value is too small, this solution may report too many
false positives; when the TIMEOUT value is too large, it
may dramatically delay deadlock detection. Subsection 3.3
describes a technique that allows programmers to dynami-
cally adjust the TIMEOUT value in a safe manner.
Traditional deadlock detection techniques based on
structural patterns of thread communications can be ex-
ploited to reduce the number of false positives and to
shorten the detection latencies. To facilitate further discus-
sion, a time-varying runtime dependency graph G at time
point p, denoted as G(p), is deﬁned as follows: Nodes in
G(p) represent alive threads at time point p, and the node
representing thread X is labeled with T(X). There is an
edge labeled with L, i.e., an L-edge, from node T(X) to
node T(Y) in G(p) iff at time point p thread X is request-
ing a lock held by thread Y; there is an edge labeled with
N, i.e., an N-edge, from node T(X) to node T(Y) in G(p)
iff at time point p thread X is blocked on condition variable
C, and thread Y holds the lock associated to the monitor
providing condition varaible C OR at some time point q s.t.
p−DELTA(Y,C,p)<q<p, thread Y produced a notiﬁcation
for condition variable C. DELTA(Y,C,p) is no less than 0
and depends on Y, C and p.
A knot is a non-empty set K of nodes s.t. for every node
X in K the reachable set of X is exactly K. A knot in G(p),