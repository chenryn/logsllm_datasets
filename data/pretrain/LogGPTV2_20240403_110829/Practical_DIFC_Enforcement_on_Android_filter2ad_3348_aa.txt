title:Practical DIFC Enforcement on Android
author:Adwait Nadkarni and
Benjamin Andow and
William Enck and
Somesh Jha
Practical DIFC Enforcement on Android
Adwait Nadkarni, Benjamin Andow, and William Enck, North Carolina State University; 
Somesh Jha, University of Wisconsin—Madison
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/nadkarni
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Practical DIFC Enforcement on Android
Adwait Nadkarni, Benjamin Andow, William Enck
{anadkarni,beandow,whenck}@ncsu.edu
North Carolina State University
Somesh Jha
PI:EMAIL
University of Wisconsin-Madison
Abstract
Smartphone users often use private and enterprise data
with untrusted third party applications. The fundamen-
tal lack of secrecy guarantees in smartphone OSes, such
as Android, exposes this data to the risk of unauthorized
exﬁltration. A natural solution is the integration of se-
crecy guarantees into the OS. In this paper, we describe
the challenges for decentralized information ﬂow control
(DIFC) enforcement on Android. We propose context-
sensitive DIFC enforcement via lazy polyinstantiation
and practical and secure network export through domain
declassiﬁcation. Our DIFC system, Weir, is backwards
compatible by design, and incurs less than 4 ms over-
head for component startup. With Weir, we demonstrate
practical and secure DIFC enforcement on Android.
1
Introduction
Application-based modern operating systems, such as
Android, thrive on their rich application ecosystems. Ap-
plications integrate with each other to perform complex
user tasks, providing a seamless user experience. To
work together, applications share user data with one an-
other. Such sharing exposes the user’s private and en-
terprise information to the risk of exﬁltration from the
device. For example, an email attachment opened in a
third party document editor (e.g., WPS Ofﬁce) could be
exported if the editor was malicious or compromised.
Android’s permission framework is used to protect ap-
plication data. However, permissions are only enforced
at the ﬁrst point of access. Data once copied into the
memory of an untrusted application can be exported.
This problem is generic in OSes that provide only data
protection, but not data secrecy, and can be solved by
integrating information ﬂow secrecy guarantees.
Classic information ﬂow control (IFC) [8] only cap-
tures well-known data objects through a centralized pol-
icy. On Android, data is often application-speciﬁc (e.g.,
email attachments, notes). Therefore, Android requires
decentralized IFC (DIFC) [21, 26, 44, 49], which allows
data owners (i.e., applications) to specify the policy for
their own data objects.
Although DIFC systems have been proposed for An-
droid [19,28,46], existing enforcement semantics cannot
achieve both security and practicality. For instance, an
Android application’s components are instantiated in the
same process by default, even when executing separate
user tasks. Since the various secrecy contexts from the
tasks share state in process memory, DIFC enforcement
on the process is hard, as the combined restrictions from
all secrecy contexts would make individual components
unusable. Prior approaches solve this problem by elim-
inating Android’s default behavior of application multi-
tasking, and in ways detrimental to backwards compati-
bility, i.e., 1) killing processes per new call, which could
result in dangling state, or 2) blocking until the applica-
tion voluntarily exits, which could lead to deadlocks.
Similarly, different secrecy contexts may share state
on storage through common application ﬁles (e.g., appli-
cation settings). Proposals to separate this shared state
on storage (e.g., Maxoid [46]) either deny access to ap-
plication resources or require applications to be modi-
ﬁed. To summarize, prior DIFC proposals for Android
cannot separate shared state in memory and on storage
while maintaining security and backwards compatibility.
In this paper, we present Weir,1 a practical DIFC sys-
tem for Android. Weir allows data owner applications to
set secrecy policies and control the export of their data
to the network. Apart from the data owners, and applica-
tions that want to explicitly use Weir to change their la-
bels, all other applications can execute unmodiﬁed. Weir
solves the problem of shared state by separating mem-
ory and storage for different secrecy contexts through
polyinstantiation. That is, Weir creates and manages in-
stances of the application, its components, and its stor-
1Weir: A small dam that alters the ﬂow of a river.
USENIX Association  
25th USENIX Security Symposium  1119
age for each secrecy context that the application is called
from, providing availability along with context-sensitive
separation. Our model is transparent to applications; i.e.,
applications that do not use Weir may execute oblivious
to Weir’s enforcement of secrecy contexts.
We term our approach as “lazy” polyinstantiation, as
Weir creates a new instance of a resource only if needed,
i.e., if there is no existing instance whose secrecy con-
text matches the caller’s. Additionally, Weir provides the
novel primitive of domain declassiﬁcation for practical
and secure declassiﬁcation in Android’s network-driven
environment. Our approach allows data owners to artic-
ulate trust in the receiver of data (i.e., trusted network
domain). This paper makes the following contributions:
• We identify the challenges of integrating DIFC into
Android. Using these challenges, we then derive the
goals for designing DIFC enforcement for Android.
• We introduce the mechanism of “lazy” polyinstanti-
ation for context-sensitive separation of the shared
state. Further, we provide the primitive of Domain
Declassiﬁcation for practical declassiﬁcation in An-
droid’s network-driven environment.
• We design and implement Weir on Android. Weir
incurs less than 4ms overhead for starting compo-
nents. Weir’s design ensures backwards compatibil-
ity. We demonstrate Weir’s utility with a case study
using the K-9 Mail application.
While Weir presents a mechanism that is independent
of the actual policy syntax, our implementation uses the
policy syntax of the Flume DIFC model [21]. Weir ex-
tends Flume by allowing implicit label propagation, i.e.,
ﬂoating labels, for backwards compatibility with unmod-
iﬁed applications. Since ﬂoating labels are by themselves
susceptible to high bandwidth information leaks [8], we
show how Weir’s use of ﬂoating labels is inherently re-
sistant to such leaks. Note that while language-level IFC
models [40–42] often incorporate checks that prevent im-
plicit ﬂows due to ﬂoating labels, our solution addresses
the challenges faced by OS-level ﬂoating label DIFC sys-
tems [19, 44]. Finally, we note that Weir provides prac-
tical DIFC enforcement semantics for Android, and the
usability aspect of DIFC policy and enforcement will be
explored in future work.
In the remainder of this paper, we motivate the prob-
lem (Section 2), and describe the challenges in integrat-
ing DIFC on Android (Section 3). We then describe the
design (Section 4), implementation (Section 5) and secu-
rity (Section 6) of Weir, followed by the evaluation (Sec-
tion 7), and a case study (Section 8). We then discuss
the limitations (Section 9), related work (Section 10) and
conclude (Section 11).
2 Motivation and Background
We now motivate the need for data secrecy on Android.
This is followed by background on DIFC and Android.
2.1 Motivating Example and Threat Model
Consider Alice, an enterprise user in a BYOD (bring
your own device) context. Alice receives an email in
the enterprise OfﬁceEmail application with an attached
report. She edits the report in a document editor, WPS
Ofﬁce, and saves a copy on the SD card, accessible to all
applications that have the READ EXTERNAL STORAGE
permission. Later, Alice uses the ES File Explorer to
browse for the report, edits it in WPS Ofﬁce, and then
shares it with OfﬁceEmail to reply to the initial email.
To perform their functions, untrusted third party data
managers such as ES File Explorer require broad stor-
age access. Even without direct access, user-initiated
data sharing grants data editors like WPS Ofﬁce access
to conﬁdential data. If ES File Explorer or WPS Ofﬁce
were malicious or compromised, they could export Al-
ice’s conﬁdential data to an adversary’s remote server.
Threat Model and Assumptions: We seek to enable le-
gitimate use of third party applications to process secret
user data, while preventing accidental and malicious data
disclosure to the network. For this purpose, our solution,
Weir, must mediate network access, and track ﬂows of
secret data 1) among applications and 2) to/from storage.
Weir’s trusted computing base (TCB) consists of the
Android OS (i.e., kernel and system services), and core
network services (e.g., DNS). Weir assumes a non-rooted
device, as an adversary with superuser privileges may
compromise OS integrity.
Further, we assume cor-
rect policy speciﬁcation by the data owner applications,
speciﬁcally regarding declassiﬁcation. To prevent timing
and covert channels based on shared hardware resources
(e.g., a hardware cache), the only alternative is denying
data access to secret data or the shared resource. Weir
does not defend against such channels, which are notori-
ously hard to prevent in DIFC OSes in general.
2.2 Why Information Flow Control (IFC)?
Android uses its permission framework to protect user
data. While permissions provide protection at the ﬁrst
point of access, the user or the data owner application
(e.g., OfﬁceEmail) have no control over the ﬂow of data
once it is shared with another application (e.g., WPS Of-
ﬁce). Unauthorized disclosure is an information ﬂow
problem that permissions are not designed to solve.
Information ﬂow control (IFC) [8] can provide data
secrecy and prevent unauthorized disclosure, through the
deﬁnition and enforcement of the allowable data ﬂows in
the system. In an IFC system, subjects (e.g., processes)
1120  25th USENIX Security Symposium 
USENIX Association
and objects (e.g., ﬁles) are labeled with predeﬁned se-
curity classes (e.g., top-secret, secret, conﬁdential). The
secrecy policy determines the data ﬂow (i.e., ordering)
between any two classes based on a partially ordered ﬁ-
nite lattice. Labels may also be joined to form a higher
label in the lattice. For secrecy, data can only ﬂow up,
i.e., to a higher security class [6], and violating ﬂows re-
quire declassiﬁcation by the policy administrator.
2.3 What is DIFC?
A centralized IFC policy can only describe the secrecy
constraints for well-known data objects (e.g., location,
IMEI). Decentralized IFC (DIFC) [26] extends the IFC
lattice to include unknown subjects and objects, and is
appropriate for protecting application-speciﬁc data, such
as Alice’s secret report received by OfﬁceEmail. We now
describe some fundamental aspects of DIFC.
Label Deﬁnition: In a DIFC system, security principals
create labels (i.e., security classes) for their own secret
data. On Android, decentralized label deﬁnition would
allow apps to control the ﬂow of their data by creating
and managing labels for their data. Note that while DIFC
also provides integrity, our description is for data secrecy
as it is the most relevant to the problem in Section 2.1.
Label Changes and Floating Labels: The ﬁnality of
subject and object label assignment is called tranquil-
ity [6], a property of mandatory protection systems.
Tranquility constraints have to be relaxed for DIFC pol-
icy. Subjects may then change (raise or lower) their la-
bels “safely”, i.e., with authorization from the data own-
ers whose security classes are involved in the change.
Explicit label changes offer ﬂexibility over immutable
labels, but are not practical in environments where com-
munication is user-directed and unpredictable a priori.
Floating labels (e.g., in Asbestos [44]) make DIFC com-
patible with unmodiﬁed apps in such cases, by allowing
seamless data ﬂows through implicit label propagation.
That is, the caller’s and the callee’s labels are joined, and
the resultant label is set as the callee’s label.
Declassiﬁcation: The network is considered to be pub-
lic, and any network export requires declassiﬁcation by
the data owner. Data owners may choose to explicitly
declassify every request to export their data, or allow
trusted third parties to declassify on their behalf. While
the former is impractical when frequent declassiﬁcation
is required, the latter bloats the data owner’s TCB.
System Integration: One of the ﬁrst steps while inte-
grating data secrecy into an existing OS is the selec-
tion of the subject for data ﬂow tracking. Fine-grained
dynamic taint tracking (e.g.,TaintDroid [13]) labels pro-
gramming language objects to provide precision, but
does not protect against implicit ﬂows. OS-based DIFC
approaches [21, 49] adopt the better mediated OS pro-
cess granularity, but incur high false positives; i.e., func-
tions sharing the process with unrelated functions that
read secret data may be over-restricted. While secure
process-level labeling is desired, practical DIFC enforce-
ment must minimize its impact on functionality.
Instantiation:
2.4 Android Background
The Android application model consists of four com-
ponents, namely activities for the user interface (UI),
services for background processing, content providers
to provide a uniform interface to application data, and
broadcast receivers to handle broadcast events.
Component
Services and content
providers run in the background, and have one active in-
stance. Activities can have multiple instances, and the
default “standard” launch behavior for activities is to
start a new instance per call. Developers use Android’s
“android:launchMode” manifest attribute to manage ac-
tivity instances as follows: SingleTop activities are re-
sumed for new calls if they already exist at the top of
the activity stack. SingleTask and SingleInstance activi-
ties are similar in that they are allocated an instance in a
separate user task and every call to such an activity re-
sumes the same instance; the only difference being that
the latter can be the only activity in its task.
Inter-Component Communication:
Inter-component
communication on Android can be 1) indirect or 2) di-
rect.
Indirect communication is an asynchronous call
from one component to another, through the Activity
Manager service (e.g., startActivity, bindService). Di-
rect communication involves a synchronous Binder re-
mote procedure call (RPC) to the callee using the callee’s
“Binder object”. While direct communication bypasses
the Activity Manager, its setup involves one mediated in-
direct call to retrieve the callee’s Binder object. For ex-
ample, the ﬁrst operation executed on a content provider
(e.g., query, update) by a caller is routed through the
Activity Manager, which retrieves the content provider’s
Binder object and loads it into the caller’s memory. Fu-
ture calls are routed directly to the content provider.
3 DIFC Challenges on Android
In this section, we discuss the four aspects of Android
that make DIFC enforcement challenging. Further, we
describe how previous Android DIFC systems fare with
respect to the challenges, and state the design goals for
practical DIFC enforcement on Android.
1. Multitasking on Android: Android’s UI is organized
into user tasks representing the user’s high-level objec-
tives. An application can be involved in multiple tasks
USENIX Association  
25th USENIX Security Symposium  1121
Process Boundaries
secret.pdf
WPS Ofﬁce
PDF Activity
secret.pdf
Evernote
Create Note
public.pdf
WPS Ofﬁce
PDF Activity
public.pdf
WPS Ofﬁce