### VMBus: Facilitating Communication Between VMs

VMBus is a virtual bus device that establishes communication channels between the guest and host, enabling data sharing between partitions and the setup of paravirtualized (synthetic) devices. The root partition hosts Virtualization Service Providers (VSPs) that handle device requests from child partitions via VMBus. Child partitions, in turn, use Virtualization Service Consumers (VSCs) to redirect these requests to the VSPs over VMBus. For this, child partitions require VMBus and VSC drivers to utilize the paravirtualized device stacks.

#### Data Transfer Mechanism

Data transfer between VSCs and VSPs primarily occurs through two ring buffers: upstream and downstream. These ring buffers are mapped into both partitions by the hypervisor, which also provides interpartition communication services via the Synthetic Interrupt Controller (SynIC).

#### Initialization Process

1. **Power-Up Routine**:
   - One of the first virtual devices (VDEV) started by the Worker process during VM power-up is the VMBus VDEV (implemented in `Vmbusvdev.dll`).
   - This power-on routine connects the VM Worker process to the VMBus root driver (`Vmbusr.sys`) by sending a `VMBUS_VDEV_SETUP` IOCTL to the VMBus root device (`\Device\RootVmBus`).

2. **Initial Setup**:
   - The VMBus root driver orchestrates the parent endpoint of the bidirectional communication with the child VM.
   - It creates an `XPartition` data structure representing the VMBus instance of the child VM and connects the necessary synthetic interrupt sources (SINTs).
   - In the root partition, VMBus uses two SINTs: one for initial message handshaking and another for signaling synthetic events from the ring buffers. Child partitions use only one SINT.

3. **Interrupt Handling**:
   - Two ISR routines, `KiVmbusInterrupt0` and `KiVmbusInterrupt1`, map the synthetic interrupt sources, allowing the root partition to receive synthetic interrupts and messages from the child VM.
   - When a message or event is received, the ISR queues a deferred procedure call (DPC), which checks the message's validity and queues a work item for processing at a passive IRQL level.

4. **Channel Offering**:
   - Once VMBus in the root partition is ready, each VSP driver can use the VMBus kernel mode client library (KMCL) to allocate and offer a VMBus channel to the child VM.
   - KMCL is implemented in two drivers: `Vmbkmclr.sys` in the root partition and `Vmbkmcl.sys` in child partitions.

#### Channel Offering Steps

1. **Communication with VMBus Root Driver**:
   - The KMCL driver communicates with the VMBus root driver through the file object initialized in the VDEV power-up routine.
   - The VMBus driver obtains the `XPartition` data structure and starts the channel offering process.

2. **Allocation and Initialization**:
   - Lower-level services provided by the VMBus driver allocate and initialize a `LOCAL_OFFER` data structure representing a single "channel offer" and preallocate some SynIC predefined messages.
   - VMBus then creates the synthetic event port in the root, from which the child can connect to signal events after writing data to the ring buffer.
   - The `LOCAL_OFFER` data structure is added to an internal server channels list.

3. **Sending OfferChannel Message**:
   - After creating the channel, VMBus attempts to send the `OfferChannel` message to the child to inform it of the new channel.
   - If the child VM is not ready, VMBus fails and retries later.

#### Initial VMBus Message Handshaking

- In Windows, the VMBus child driver is a WDF bus driver enumerated and started by the Pnp manager and located in the ACPI root enumerator.
- When the NT kernel starts in the child VM, the VMBus driver initializes its internal state, creates the `\Device\VmBus` root functional device object (FDO), and configures the correct SINT source.
- The Pnp manager calls the VMBus’s resource assignment handler routine, which sets up the SINT source and connects it to the `KiVmbusInterrupt2` ISR.
- The VMBus driver then starts the initial message handshaking, sending and receiving synthetic messages using the `HvPostMessage` hypercall.

#### VMBus Channels and Ring Buffers

- Each VMBus channel is identified by a type and instance GUID. For VDEV channels, these GUIDs help the Pnp Manager identify and load the correct VSC driver.
- To open a VMBus channel and create the ring buffer, VSCs typically call the `VmbChannelEnable` API exported from the KMCL driver.
- The ring buffer is allocated from the child VM’s non-paged pool and mapped using double mapping, creating a circular buffer.
- Both incoming and outgoing buffers are surrounded by a control page, which keeps track of the last packet written and controls whether to send an interrupt when a packet needs to be delivered.

#### Higher-Level Interfaces

- Components like VMBus pipes and Hyper-V Sockets use VMBus to implement higher-level interfaces.
- VMBus pipes are implemented in `Vmbuspipe.dll` and `Vmbuspiper.dll`.
- Hyper-V Sockets (HvSockets) allow high-speed interpartition communication using standard network interfaces, with clients connecting to a target VM by specifying the target VM’s GUID and a service registration GUID.

#### Virtual Hardware Support

- For proper VM operation, the virtualization stack must support various virtualized devices, including storage, networking, keyboard, mouse, serial ports, and GPU.
- I/O operations for these devices are orchestrated mainly in the root OS, and the virtualization stack exposes three kinds of devices to the guest VMs.

This comprehensive overview provides a detailed understanding of how VMBus facilitates communication and data sharing between VMs, ensuring efficient and reliable virtualization.