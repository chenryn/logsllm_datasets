下面来介绍 Provider 中常见的问题。
## Permissions
鉴于 provider
作为数据载体，那么安全访问与权限控制自然是重中之重。例如上面代码示例中访问短信的接口，如果所有人都能随意访问，那就明显会带来信息泄露问题。前面简单提到过，应用中定义的
Provider 必须要在其程序清单文件中进行声明，使用的是
[provider](https://developer.android.com/guide/topics/manifest/provider-element) 标签。其中有我们常见的 `exported` 属性，表示是否可被外部访问，`permission`
属性则表示访问所需的权限，当然也可以分别对读写使用不同的权限，比如 `readPermission`/`writePermission` 属性。
比如，前文提到的短信数据库声明如下：
其他应用若想访问，则需在清单文件中声明请求对应权限。
这都很好理解，其他组件也有类似的特性。除此之外，Provider 本身还提供了更为细粒度的权限控制，即
[grantUriPermissions](https://developer.android.com/guide/topics/manifest/provider-element#gprmsn)。这是一个布尔值，表示是否允许临时为客户端授予该 provider 的访问权限。临时授予权限的运行流程一般如下：
  1. 客户端给 Provider 所在应用发送一个 Intent，指定想要访问的 Content URI，比如使用 `startActivityForResult` 发送；
  2. 应用收到 Intent 后，判断是否授权，如果确认则准备一个 Intent，并设置好 flags 标志位 `FLAG_GRANT_[READ|WRITE]_URL_PERMISSION`，表示允许读/写对应的 Content URI（可以不和请求的 URI 一致），最后使用 `setResult(code, intent)` 返回给客户端；
  3. 客户端的 onActivityResult 收到返回的 Intent，使用其中的 URI 来临时对目标 Provider 进行访问；
以读为例，`Intent.flags` 中如果包含
[FLAG_GRANT_READ_URI_PERMISSION](https://developer.android.com/reference/android/content/Intent.html#FLAG_GRANT_READ_URI_PERMISSION)，那么该
Intent 的 **接收方** （即客户端）会被授予 `Intent.data` 部分 URI
的临时读取权限，直至接收方的生命周期结束。另外，Provider 应用也可以主动调用 `Context.grantUriPermission`
方法来授予目标应用对应权限：
    public abstract void grantUriPermission (String toPackage, 
                    Uri uri, 
                    int modeFlags)
    public abstract void revokeUriPermission (String toPackage, 
                    Uri uri, 
                    int modeFlags)
grantUriPermissions 属性可以在 URI 粒度对权限进行读写控制，但有一个需要注意的点：通过 grantUriPermissions
临时授予的权限，会 **无视 readPermission、writePermission、permission 和 exported 属性施加的限制**
。也就是说，即便 `exported=false`，客户端也没有申请对应的 `uses-permission`，可一旦被授予权限，依然可以访问对应的
Content Provider！
另外，`` 还有一个子标签 [grant-uri-permission](https://developer.android.com/guide/topics/manifest/grant-uri-permission-element)，即便 grantUriPermissions 被设置为 `false`，通过临时获取权限依然可以访问该标签下定义的
URI 子集，该子集可以用前缀或者通配符去指定 URI 的可授权路径范围。
Provider 权限设置不当可能会导致应用数据被预期之外的恶意程序访问，轻则导致信息泄露，重则会使得自身沙盒数据被覆盖而导致
RCE，后文会看到多个这样的案例。
## FileProvider
前面说过自定义 Provider 需要实现六个方法，但 Android 中已经针对某些常用场景的 Provider
编写好了对应的子类，用户可根据需要继承这些子类并实现少部分子类方法即可。其中一个常用场景就是用 ContentProvider 分享应用的文件，系统提供了
`FileProvider` 来方便应用自定义文件分享和访问，但是使用不当的话很可能会出现任意文件读写的问题。
[FileProvider](https://developer.android.com/reference/androidx/core/content/FileProvider)
提供了使用 XML 去指定文件访问控制的功能，一般 Provider 应用只需继承 FileProvider 类：
    public class MyFileProvider extends FileProvider {
       public MyFileProvider() {
           super(R.xml.file_paths)
       }
    }
`file_paths` 是用户自定义的 XML，也可以在清单文件中使用 `meta-data` 去指定：
`resource` 指向 `res/xml/file_paths.xml`。该文件中定义了可供访问的文件路径，FileProvider
只会对提前指定的文件生成 Content URI。一个文件路径配置示例如下：
`paths` 标签支持多种类型的子标签，分别对应不同目录的子路径：
  * `files-path`: Context.getFilesDir()
  * `cache-path`: Context.getCacheDir()
  * `external-path`: Environment.getExternalStorageDirectory()
  * `external-files-path`: Context.getExternalFilesDir()
  * `external-cache-path`: Context.getExternalCacheDir()
  * `external-media-path`: Context.getExternalMediaDirs()[0]
比较特殊的是 `root-path`，表示 **系统** 的根目录 `/`。FileProvider 生成的 URI 格式一般是
`content://authority/{name}/{path}`，比如对于上述 Provider，可用
`content://com.evilpan.fileprovider/root/proc/self/maps` 来访问 `/proc/self/maps`
文件。
由此可见，FileProvider 指定 `root-path` 是一个危险的标志，一旦攻击者获得了临时权限，就可以读取所有应用的私有数据。
比如，TikTok 历史上就有过这么一个真实的漏洞：
这里直接使用了 `FileProvider`，甚至都不需要继承。 _xml/k86.xml_ 文件内容如下：
        ...
获取临时权限之后就可以实现应用的任意文件读写。
## The Hidden ...
在 ContentProvider 类中，除了前面说过的 6 个必须实现的方法，还有一些其他隐藏的方法，一般使用默认实现，也可以被子类覆盖实现，比如
  * openFile
  * openFileHelper
  * call
  * ...
这些隐藏的方法可能在不经意间造成安全问题，本节会通过一些案例去分析其中的原因。
### openFile
如果 ContentProvider 想要实现共享文件读写的功能，还可以通过覆盖 `openFile` 方法去实现，该方法的默认实现会抛出
`FileNotFoundException` 异常。
虽然开发者实现上不太会直接就返回打开的本地文件，而是有选择地返回某些子目录文件。但是如果代码写得不严谨，就可能会出现路径穿越等问题，一个经典的漏洞实现如下：
     @Override
    public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
        File file = new File(getContext().getFilesDir(), uri.getPath());
        if(file.exists()){
            return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
        }
        throw new FileNotFoundException(uri.getPath());
    }
另外一个同族的类似方法是 `openAssetFile`，其默认实现是调用 openFile：
    public @Nullable AssetFileDescriptor openAssetFile(@NonNull Uri uri, @NonNull String mode)
            throws FileNotFoundException {
        ParcelFileDescriptor fd = openFile(uri, mode);
        return fd != null ? new AssetFileDescriptor(fd, 0, -1) : null;
    }
有时候开发者虽然知道要要防御路径穿越，但防御的姿势不对，也存在被绕过的可能，比如：
    public ParcelFileDescriptor openFile(Uri uri, String mode) {
        File f = new File(DIR, uri.getLastPathSegment());
        return ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);
    }
这里想用 `getLastPathSegment` 去只获取最后一级的文件名，但实际上可以被 URL encode 的路径绕过，比如
`%2F..%2F..path%2Fto%2Fsecret.txt` 会返回 `/../../path/to/secret.txt`。
还有一种错误的防御是使用 `UriMatcher.match` 方法去查找 `../`，这也会被 URL 编码绕过。正确的防御和过滤方式如下：
    public ParcelFileDescriptor openFile (Uri uri, String mode) throws FileNotFoundException {
      File f = new File(DIR, uri.getLastPathSegment());
      if (!f.getCanonicalPath().startsWith(DIR)) {
        throw new IllegalArgumentException();
      }
      return ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);
    }
> 详见：[Path Traversal
> Vulnerability](https://support.google.com/faqs/answer/7496913?hl=en)
### openFileHelper
ContentProvider 中还有一个鲜为人知的 `openFileHelper` 方法，其默认实现是使用当前 Provider 中的 `_data`
列数据去打开文件，源码如下：
    protected final @NonNull ParcelFileDescriptor openFileHelper(@NonNull Uri uri,
            @NonNull String mode) throws FileNotFoundException {
        Cursor c = query(uri, new String[]{"_data"}, null, null, null);
        int count = (c != null) ? c.getCount() : 0;
        if (count != 1) {
            // If there is not exactly one result, throw an appropriate
            // exception.
            if (c != null) {
                c.close();
            }
            if (count == 0) {
                throw new FileNotFoundException("No entry for " + uri);