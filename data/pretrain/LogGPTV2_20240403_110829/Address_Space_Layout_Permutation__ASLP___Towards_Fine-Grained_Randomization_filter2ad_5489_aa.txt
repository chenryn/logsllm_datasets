title:Address Space Layout Permutation (ASLP): Towards Fine-Grained Randomization
of Commodity Software
author:Chongkyung Kil and
Jinsuk Jun and
Christopher Bookholt and
Jun Xu and
Peng Ning
Address Space Layout Permutation (ASLP): Towards Fine-Grained
Randomization of Commodity Software
Chongkyung Kil∗, Jinsuk Jun∗, Christopher Bookholt∗, Jun Xu†, Peng Ning∗
Department of Computer Science∗
North Carolina State University
{ckil, jjun2, cgbookho, pning}@ncsu.edu
Google, Inc.†
PI:EMAIL
Abstract
Address space randomization is an emerging and
promising method for stopping a broad range of memory
corruption attacks. By randomly shifting critical memory
regions at process initialization time, address space ran-
domization converts an otherwise successful malicious at-
tack into a benign process crash. However, existing ap-
proaches either introduce insufﬁcient randomness, or re-
quire source code modiﬁcation. While insufﬁcient random-
ness allows successful brute-force attacks, as shown in re-
cent studies, the required source code modiﬁcation prevents
this effective method from being used for commodity soft-
ware, which is the major source of exploited vulnerabilities
on the Internet. We propose Address Space Layout Permu-
tation (ASLP) that introduces high degree of randomness
(or high entropy) with minimal performance overhead. Es-
sential to ASLP is a novel binary rewriting tool that can
place the static code and data segments of a compiled exe-
cutable to a randomly speciﬁed location and performs ﬁne-
grained permutation of procedure bodies in the code seg-
ment as well as static data objects in the data segment. We
have also modiﬁed the Linux operating system kernel to per-
mute stack, heap, and memory mapped regions. Together,
ASLP completely permutes memory regions in an applica-
tion. Our security and performance evaluation shows min-
imal performance overhead with orders of magnitude im-
provement in randomness (e.g., up to 29 bits of randomness
on a 32-bit architecture).
1
Introduction
Memory corruption vulnerability has been the most com-
monly exploited one among the software vulnerabilities that
allow an attacker to take control of computers. Examples of
memory corruption attacks include buffer overﬂows [19],
format string exploits [20], and double-free attacks [1]. In
an attack exploiting a memory corruption vulnerability (or,
a memory corruption attack), an attacker attempts to alter
program memory with the goal of causing that program to
behave in a malicious way. The result of a successful at-
tack ranges from system instability to execution of arbitrary
code. A quick survey of US-CERT Cyber Security Alerts
between mid-2005 and 2004 shows that at least 56% of the
attacks have a memory corruption component [24].
Memory corruption vulnerabilities are typically caused
by the lack of input validation in the C programming lan-
guage, with which the programmers are offered the free-
dom to decide when and how to handle inputs. This ﬂex-
ibility often results in improved application performance.
However, the number of vulnerabilities caused by failures
of input validation indicates that programming errors of this
type are easy to make and difﬁcult to ﬁx. Ad Hoc methods
such as StackGuard [8] only target at speciﬁc types of at-
tacks. Static code analyzers can be used to ﬁnd such bugs at
compile time. Due to the inherent difﬁculties in deeply an-
alyzing C code, these analyzers often make strong assump-
tions or simpliﬁcation that lead to a signiﬁcant number of
false positives and false negatives. Methods such as CCured
[18] offer a way to guarantee that a program is free from
memory corruption vulnerabilities. However, such meth-
ods incur signiﬁcant runtime overhead that hinders produc-
tion deployment. In addition, most of the aforementioned
approaches require access to the source code. This is par-
ticularly a problem for commodity software, for which the
source code is typically unavailable.
While bug detection and prevention techniques are pre-
ferred, continued discoveries of memory corruption vulner-
abilities indicate alternatives must be sought. We believe
that mitigating this kind of attacks would give attackers sig-
niﬁcantly fewer ways to exploit their targets, thereby re-
ducing the threat they pose. One promising method is ad-
dress space randomization [26]. It has been observed that
most attacks use absolute memory addresses during mem-
ory corruption attacks. Address space randomization ran-
1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006domizes the layout of process memory, thereby making the
critical memory addresses unpredictable and breaking the
hard-coded address assumption. As a result, a memory cor-
ruption attack will most likely cause a vulnerable program
to crash, rather than allow the attacker to take control of the
program.
Several address space randomization techniques have
been proposed [2, 3, 22, 23, 26]. Among the existing
approaches, PaX Address Space Layout Randomization
(ASLR) [23] and address obfuscation [3] are most visible.
PaX ASLR randomly relocates the stack, heap, and shared
library regions with kernel support, but does not efﬁciently
randomize locations of code and static data segments. Ad-
dress obfuscation expands the randomization to the static
code and data regions by modifying compiler but requires
source code access and incurs 11% performance overhead
on average. Position-independent executables (PIE) [9] al-
lows a program to run as shared object so the base ad-
dress of the code and data segment can be relocatable,
but it also incurs 14% performance degradation on aver-
age (shown in our performance evaluation presented later
in the paper). While insufﬁcient randomness allows suc-
cessful brute-force attacks, as shown in recent studies, the
required source code modiﬁcation and performance degra-
dation prevent these effective methods from being used for
commodity software, which is the major source of exploited
vulnerabilities on the Internet.
In this paper, we propose address space layout permu-
tation (ASLP) to increase the programs’ randomness with
minimal performance overhead. ASLP permutes all sec-
tions (including code and static data) in the program ad-
dress space. This is done in two ways. First, we cre-
ate a novel binary rewriting tool that randomly relocates
static code and data segments, randomly re-orders functions
within code segment, and data objects within data segment.
Our rewriting tool operates directly on compiled program
executable, and does not require source code modiﬁcation.
We only need the relocation information from the compile-
time linker to perform the randomization rewriting. Such
information is produced by all existing C compilers. Sec-
ond, to randomly permute stack, heap, and memory mapped
regions, we modify the Linux kernel. Our kernel changes
conserve as much virtual address space as possible to in-
crease randomness. Our binary rewriting tool can be au-
tomatically and transparently invoked before a program is
launched, while our kernel level support runs without any
additional change to the runtime system. To validate the
practicality and effectiveness of ASLP, we have evaluated
ASLP using security and performance benchmarks. Our se-
curity benchmark result shows that ASLP can provide up
to 29 bits of randomness on a 32-bit architecture, while the
performance benchmark result indicates that ASLP incurs
less than 1% overhead.
In summary, the major contribu-
tions of this paper are as follows:
• ASLP provides probabilistic protection an order of
magnitude stronger than previous techniques.
• ASLP randomizes regions throughout the entire user
memory space, including static code and data seg-
ments. Program transformation is automatically done
by our binary rewriting tool without the requirement of
source code modiﬁcation.
• The performance overhead is generally very low (less
than 1%). In comparison, existing techniques that are
capable of randomly relocating static code and data
segments, in particular PIE and Address obfuscation,
incur more than 10% overhead on average.
The rest of this paper is organized as follows. Section 2
discusses related work. Section 3 describes the design and
implementation of ASLP. Section 4 presents the evaluation
of ASLP. Section 5 describes the limitations of current im-
plementation, and Section 6 concludes the paper.
2 Related Work
The seminal work on program randomization by Forrest
et al.
illustrated the value of diversity in ecosystems and
similar beneﬁts for diverse computing environments [10].
In short, their case for diversity is that if a vulnerability
is found in one computer system, the same vulnerability is
likely to be effective in all identical systems. By introduc-
ing diversity into a population, resistance to vulnerabilities
is increased. Address randomization achieves diversity by
making the virtual memory layout of every process unique
and unpredictable. Existing address space randomization
approaches can be divided into two categories: user level
and kernel level. User level and kernel level approaches
achieve randomization with modiﬁcation to the user space
applications and the kernel, respectively. Both approaches
have their advantages and disadvantages, which should be
carefully reviewed by the user before the application of the
techniques.
User Level Randomization Address obfuscation [2,
3] introduced a mechanism to not only randomly shift the
placement of the three critical regions, but also randomly
re-order objects in static code and data segments. This ap-
proach relies on a source code transformation tool [29] to
perform the randomization.
It introduced special pointer
variables to store actual locations of objects for static code
and data randomization.
In addition, they add randomly
sized pads to stack, heap, and shared library using the ini-
tialization code, the wrapper function, and the junk code
respectively.
Kernel Level Randomization Kernel level random-
ization has become a more attractive option since modiﬁ-
cation of one component provides system wide protection.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Recently, kernel level address randomization techniques are
being actively used in major Linux distributions: Red Hat
Exec-Shield [16] can be found in Fedora Core [6]; PaX
Address Space Layout Randomization(ASLR)[23] can be
found in Hardened Gentoo [4]. Both PaX ASLR and Exec-
Shield use the same approach by padding random size to the
critical memory regions. These techniques, unfortunately,
have a number of limitations. First, the pads unnecessarily
waste memory space. Note that the only way to increase
the program randomness is to increase the size of the pads,
thereby wasting more space. Second, they keep the relative
order of sections. For instance, code segment always comes
ﬁrst, and data segment follows the code segment. There-
fore, once an attacker detects the size of the pad, he/she
can easily craft attacks to compromise the system. A recent
work [21] has shown that the de-randomization attack can
defeat PaX ASLR in an average of 216 seconds. This is a
clear indication that we need to improve the randomness in
the critical memory regions.
3 Address Space Layout Permutation
ASLP provides both user and kernel level randomiza-
tions. For user level randomization, we create a binary
rewriting tool that randomly relocates the static data and
code segments of an executable before it is loaded into
memory for execution. Our tool not only alters the locations
of static code and data segments but also changes the orders
of functions and data objects within the code and data seg-
ments. For kernel level randomization, we modiﬁed Linux
kernel that permutes three critical memory regions. This
section explains the design and implementation of ASLP in
detail.
3.1 User Level Address Permutation
In a typical program development scenario, a pro-
gram’s source code is written in a high-level language
(e.g., helloworld.c) and compiled into object ﬁles (e.g., hel-
loworld.o) that can be linked with other objects to produce
the ﬁnal executable (e.g., helloworld). An object ﬁle con-
tains not only code (functions) and data (variables), but also
additional bookkeeping information that can be used by the
compile-time linker to assemble multiple objects into an ex-
ecutable ﬁle. Such information includes relocation records,
the type of the object ﬁle, and debugging related infor-
mation.
In an object ﬁle, an element (function, variable,
or bookkeeping information) has its own symbolic name.
Symbolic names for static code/data elements in object ﬁles
are resolved to virtual addresses when the executable is as-
sembled by the compile-time linker. Symbolic names for
dynamic elements such as C library functions are usually
resolved by the runtime system loader.
The goal of our binary rewriting tool is to randomly
relocate the static code and data segments and their ele-
ments so that the program will have a different memory
layout each time it is loaded for execution. This permu-
tation makes it difﬁcult for various types of attacks: partial
overwrite attacks [2], dtors attacks [30], and data forgery
attacks. These attacks are based on the assumption that the
code and data segments of the target application reside at
the same locations on different machines. Partial overwrite
attacks change only the least signiﬁcant part of the return
address in the stack, so the attacker can transfer the pro-
gram control to the existing vulnerable function with ma-
licious arguments. Dtors attacks overﬂow a buffer (global
variable) in the data segment to overwrite function pointers
in the dtors section. Dtors section includes function point-
ers that are used after the main() function exits. When a
corrupted function pointer is used, the program control is
transferred to the attacker’s code. Dtors attacks are possi-
ble since the dtors section is a part of the data segment and
the attacker knows relative distance between the buffer in
the data segment and the function pointer in the dtors sec-
tion. Recent security report [31] shows that data forgery
attacks can overwrite existing global variables in the data
segment so the attacker can change the value of security
critical data. Note that even if kernel level randomization
changes the base addresses of stack, heap, and mmap re-
gions, these kinds of attacks can still be successful, since
the locations of the code and data segments are ﬁxed.
User level permutation makes these types of attacks sig-
niﬁcantly difﬁcult. In user level address permutation, we
change the base addresses of the static code and data seg-
ments. We also randomly reorder procedure bodies within
the code segment and data objects within the data segment.
As a result, the virtual addresses of static code elements
(e.g., functions) or data elements (static or global data vari-
ables) are not ﬁxed anymore. To make these changes, we
have to modify all cross references between the objects in
the program. Otherwise, the randomized program will have
many dangling references that will certainly lead to a pro-