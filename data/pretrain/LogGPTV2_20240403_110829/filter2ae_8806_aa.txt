**作者： wzt  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## Ppl代码初始化
### ppl物理内存初始化
内核在启动阶段调用pmap_bootstrap函数初始化物理内存布局。
    pmap_bootstrap：
    LDR       X20, [X27,#_avail_start@PAGEOFF]
    MOV       X0, X20
    BL        _phystokv
    MOV       X21, X0
    ADRP       X8, #_pmap_array_begin@PAGE
    STR       X0, [X8,#_pmap_array_begin@PAGEOFF]
    ADRP       X19, #_pmap_array@PAGE
    STR       X0, [X19,#_pmap_array@PAGEOFF]
    ADRP       X24, #_pmap_max_asids@PAGE
    LDR       W8, [X24,#_pmap_max_asids@PAGEOFF]
    MOV       W9, #0x108
    MOV       W10, #0x3FFF
    MADD       X8, X8, X9, X10
    AND       X8, X8, #0x3FFFFFFC000
    ADD       X0, X8, X20
    STR       X0, [X27,#_avail_start@PAGEOFF]
    BL        _phystokv
    ADRP       X8, #_pmap_array_end@PAGE
    STR       X0, [X8,#_pmap_array_end@PAGEOFF]
`_avail_start`保存的是当前空闲物理内存的物理地址，转换成虚拟地址后，保存在`_pmap_array_begin`和`_pmap_array`变量中，然后从此物理地址划出`_pmap_max_asids`字节大小的区域给`_pmap_array`，它是一个struct
pmap数组，在ppl的实现中，内核以及每个进程都有单独的一个struct pmap结构。在非ppl的版本中，只有内核使用struct map。
    ADRP       X8, #_pmap_array_count@PAGE
    ADRL       X10, _pmap_free_list_lock
    STR       X9, [X8,#_pmap_array_count@PAGEOFF]
    STR       X23, [X10,#(qword_FFFFFFF00981CA88 - 0xFFFFFFF00981CA80)]
    STR       XZR, [X10]
    LDR       X9, [X8,#_pmap_array_count@PAGEOFF]
计算`_pmap_array_count`大小。
    MOV       X9, #0
    MOV       X10, #0
    MOV       X12, #0
    LDR       X11, [X19,#_pmap_array@PAGEOFF]
    STR       X12, [X11,X9]
    LDR       X11, [X19,#_pmap_array@PAGEOFF]
    ADD       X12, X11, X9
    ADD       X10, X10, #1
    LDR       X13, [X8,#_pmap_array_count@PAGEOFF]
    ADD       X9, X9, #0x108
    CMP       X10, X13
    B.CC       loc_FFFFFFF007B5E820
    ADD       X8, X11, X9
    SUB       X8, X8, #0x108
    B        loc_FFFFFFF007B5E850
    MOV       X8, #0
    ADRP       X9, #_pmap_free_list@PAGE
    STR       X8, [X9,#_pmap_free_list@PAGEOFF]
初始化`_pmap_free_list`链表，循环让`_pmap_array`数组中的每个元素依次指向前一个节点，以后ppl为每个进程分配struct
pmap结构体时就从这个链表分配。
下面用类似的算法初始化`_pmap_ledger_ptr_array`数组，这里不在赘述。
然后开始初始化ppl使用的stack信息：
    ADRP       X8, #_pmap_stacks_start@PAGE
    LDR       X8, [X8,#_pmap_stacks_start@PAGEOFF]
    ADD       X26, X8, #4,LSL#12
    ADRP       X8, #_pmap_stacks_start_pa@PAGE
    STR       X20, [X8,#_pmap_stacks_start_pa@PAGEOFF]
`_pmap_stacks_startv`保存的是stack的虚拟地址，`_pmap_stacks_start_pa`保存的是stack的物理地址，后面修改`kernel_map->tte`的l3页表，进行虚拟地址到物理地址的映射。
    MOV       X28, #0x20000000000603
    ADRL       X21, _pmap_cpu_data_array
    MOV       W25, #0xFFFFFFFF
    B        loc_FFFFFFF007B5E92C
    MOV       W8, #0x180
    MADD       X8, X19, X8, X21
    STR       W25, [X8,#0x40]
    STR       WZR, [X8,#0x18]
    STR       X24, [X8,#8]
    ADD       X26, X26, #8,LSL#12
    ADD       X19, X19, #1
    CMP       X19, #6
    B.EQ       loc_FFFFFFF007B5E9B8
    ADD       X24, X26, #4,LSL#12
    MOV       X23, X26
    MOV       X8, #0xFFFFFFFFFFFFBFFF
    CMP       X26, X8
    B. HI       loc_FFFFFFF007B5E908
依次设置每个cpu的`_pmap_cpu_data`结构体，STR X24, [X8,#8]，将栈地址保存在0x8偏移处。每个cpu的ppl
stack都是4k，之间在隔离着一个4k的guard page。
后面的代码继续初始化`_ppl_cpu_save_area`，它保存的是ppl进入`EL1_Guard level`异常处理时保存的全部寄存器区域。
下面给出xnu物理内存布局图，请原谅我的懒惰，不想画漂亮的图形。
### pp_attr_table与pv_head_table
XNU的物理内存管理模型，增加了两个结构体用于辅助物理页的管理。
`pp_attr_t`代表的是一个物理页的属性，在XNU的source code里可以看到其定义：
    osfmk/arm/pmap.c
    typedef u_int16_t pp_attr_t;
    \#define PP_ATTR_WIMG_MASK        0x003F
    \#define PP_ATTR_WIMG(x)         ((x) & PP_ATTR_WIMG_MASK)
    \#define PP_ATTR_REFERENCED        0x0040
    \#define PP_ATTR_MODIFIED         0x0080
    \#define PP_ATTR_INTERNAL         0x0100
    \#define PP_ATTR_REUSABLE         0x0200
    \#define PP_ATTR_ALTACCT         0x0400
    \#define PP_ATTR_NOENCRYPT        0x0800
    \#define PP_ATTR_REFFAULT         0x1000
    \#define PP_ATTR_MODFAULT         0x2000
    \#if XNU_MONITOR
    /*
     \* Denotes that a page is owned by the PPL.  This is modified/checked with the
     \* PVH lock held, to avoid ownership related races.  This does not need to be a
     \* PP_ATTR bit (as we have the lock), but for now this is a convenient place to
     \* put the bit.
     */
    \#define PP_ATTR_MONITOR         0x4000
    /*
     \* Denotes that a page *cannot* be owned by the PPL.  This is required in order
     \* to temporarily 'pin' kernel pages that are used to store PPL output parameters.
     \* Otherwise a malicious or buggy caller could pass PPL-owned memory for these
     \* parameters and in so doing stage a write gadget against the PPL.
     */
    \#define PP_ATTR_NO_MONITOR        0x8000
对于ppl来讲，增加了两个属性`PP_ATTR_MONITOR`和`PP_ATTR_NO_MONITOR`，ios使用相同的值，后面会看到。
每个物理页在内核中有两种用处，第一个物理页保存的是页表内容，第二个就是保存内核用到的其他数据结构，在XNU的物理内存管理模型中，使用`struct
pv_entry`结构体保存l3页表项的地址，可以提高物理内存与虚拟内存相互转化的效率。使用`struct
pt_desc`结构体描述一个页表属性，比如l1、l2、l3table的属性。对于ppl，会用到`pv_head_table`对给定的一个物理页上锁。
`Pv_head_table`的内存布局如下，请再次原谅我的懒惰。
### EL1_Guard level初始化
在初始化完ppl的物理内存布局后，内核在启动的下一阶段会调用`_bootstrap_instructions`继续执行`EL1_Guard
level`的初始化。
    __start->_start_first_cpu->_arm_init->_arm_vm_init->_bootstrap_instructions
    _bootstrap_instructions:
关闭mmu
    S3_6_C15_C1_00x1
    S3_6_C15_C1_10x1
    S3_6_C15_C1_50x2010000030100000
    S3_6_C15_C1_60x2020000030200000
    S3_6_C15_C1_70x2020a500f020f000
    S3_6_C15_C3_00x2020a505f020f0f0
    S3_6_C15_C1_20x1
    S3_6_C15_C8_1_gxf_bootstrap_handler(虚拟地址)
    S3_6_C15_C8_2_gtr_deadloop(虚拟地址)
    S3_6_C15_C1_20x0
开启mmu
在这个函数里，可以看到苹果cpu加入了几个新的系统寄存器，
通过分析代码逻辑可以推测出`S3_6_C15_C1_2`寄存器应该是个执行上锁和解锁的功能。`gxf_bootstrap_handler`函数地址存入了`S3_6_C15_C8_1`寄存器，`_gtr_deadloop`函数存入了`S3_6_C15_C8_2`寄存器。在整个kernelcache代码段里都没有搜索到对`_gxf_bootstrap_handler`函数的直接引用，因此可以推断出`S3_6_C15_C8_1`寄存器保存的地址应该是cpu进入`EL1_Guard
level`时首先要执行的函数。在另外一个初始化路径中也可以看到相同的ppl初始化代码。
    __start->_start_first_cpu->_arm_init->_cpu_machine_idle_init->_start_cpu->start_cpu
    start_cpu:
    S3_6_C15_C1_00x1
    S3_6_C15_C1_10x1
    S3_6_C15_C3_00x2020a506f020f0e0
    S3_6_C15_C1_50x2010000030100000
    S3_6_C15_C1_60x2020000030200000
    S3_6_C15_C1_70x2020a500f020f000
    S3_6_C15_C1_20x1
    S3_6_C15_C8_1_gxf_bootstrap_handler(虚拟地址)
    S3_6_C15_C8_2_gtr_deadloop(虚拟地址)
    S3_6_C15_C1_20x0
注意这两个初始化函数只是对`S3_6_C15_C8_1`寄存器进行了设置，并没有调用它。在内核启动的最后阶段有如下调用代码：
    _kernel_bootstrap_thread->machine_lockdown
    ADRP       X8, #_pmap_ppl_locked_down@PAGE
    MOV       W19, #1
    STR       W19, [X8,#_pmap_ppl_locked_down@PAGEOFF]
    BL        _gxf_enable
首先对`_pmap_ppl_locked_down`变量设置为1，这个状态表示ppl已经初始化完毕，el1代码可以向`EL1_Guard
level`请求服务了。然后调用`_gxf_enable`：
    _gxf_enable:
    fffffff008131e90     mov   x0, #0x1
    fffffff008131e94     msr   S3_6_C15_C1_2, x0
    fffffff008131e98     .long  0x00201420
在对`S3_6_C15_C1_2`寄存器赋值后，出现了0x00201420这个反汇编器无法识别的指令。那么这个有可能的两种情况，第一个假设0x00201420不是苹果cpu的新增指令，那么当cpu进行执行时，会产生exception异常，历史上，PAX团队曾经在异常处理代码里模拟了NX在32位处理器上的软件实现，但笔者翻遍了异常处理逻辑的所有代码，也没有发现对0x00201420这个数据或指令的特殊处理，因此可以断定0x00201420是苹果cpu新增的指令，在后面的reverse中，可以发现它是进入`EL1_Guard
level`的指令，0x00201400则是退出`EL1_Guard level`的指令。
在前面的分析中讲到`S3_6_C15_C8_1`寄存器保存的地址是进入`EL1_Guard
level`时首先要执行的地址，在前面的初始化时被设置为了`_gxf_bootstrap_handler`。
     _gxf_bootstrap_handler          ; DATA XREF: _bootstrap_instructions+9C↑o
    MRS       X0, #6, c15, c8, #3
    TBNZ       W0, #0, loc_FFFFFFF009811660
    ADRL       X0, _gxf_ppl_entry_handler ;
    MSR       #6, c15, c8, #1, X0
    ADRL       X0, _GuardedExceptionVectorsBase
    MSR       #0, c12, c0, #0, X0
首先判断`S3_6_C15_C8_3`寄存器的值是否为0，如果为0，就一直处于循环之中，可以推测出`S3_6_C15_C8_3`寄存器作用是进入`EL1_Guard
level`的锁机制。然后将`_gxf_ppl_entry_handler`函数重新存入了`S3_6_C15_C8_1`寄存器，也就是说下次进入`EL1_Guard
level`时将会执行`_gxf_ppl_entry_handler`函数。将`_GuardedExceptionVectorsBase`地址写入`VBAR_EL1`寄存器，也就是说当cpu在`EL1_Guard
level`时，`_GuardedExceptionVectorsBase`函数负责其异常处理逻辑。
    MRS       X1, #0, c0, c0, #5
    UBFX       X2, X1, #8, #8
    ADRL       X3, _cluster_offsets
    LDR       X2, [X3,X2,LSL#3]
    AND       X1, X1, #0xFF
    ADD       X1, X1, X2
    ADRL       X2, _pmap_cpu_data_array
    CMP       X1, #6
    B.CS       loc_FFFFFFF0098116A8
    MOV       X3, #0x180
    MADD       X1, X1, X3, X2
首先从`MPIDR_EL1`寄存器提取了cpu的cluster id和cpu
id，算出在`_pmap_cpu_data_array`数组中的索引。`_pmap_cpu_data_array`是一个`struct
pmap_cpu_data`类型的数组。在XNU的source code中有如下定义：
    struct pmap_cpu_data {
    \#if XNU_MONITOR
    void * ppl_kern_saved_sp;
    void * ppl_stack;
    arm_context_t * save_area;
    unsigned int ppl_state;
    \#endif
    }
    LDR       X1, [X1,#0x10]
    MOV       SP, X1