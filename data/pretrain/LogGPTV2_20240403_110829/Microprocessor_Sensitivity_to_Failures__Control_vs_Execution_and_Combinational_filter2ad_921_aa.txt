title:Microprocessor Sensitivity to Failures: Control vs Execution and Combinational
vs Sequential Logic
author:Giacinto Paolo Saggese and
Anoop Vetteth and
Zbigniew Kalbarczyk and
Ravishankar K. Iyer
Microprocessor Sensitivity to Failures: Control vs. Execution  
and Combinational vs. Sequential Logic 
Giacinto Paolo Saggese, Anoop Vetteth, Zbigniew Kalbarczyk, Ravishankar Iyer 
Coordinated Science Laboratory  
University of Illinois at Urbana-Champaign 
Email: {saggese, vetteth, kalbar, iyer}@crhc.uiuc.edu 
1308 W. Main Street, Urbana, IL 61801, USA 
Abstract: The goal of this study is to characterize the impact 
of  soft  errors  on  embedded  processors.  We  focus  on  control 
versus  speculation  logic  on  one  hand,  and  combinational 
versus  sequential  logic  on  the  other.  The  target  system  is  a 
gate-level implementation of a DLX-like processor.  The syn-
thesized  design  is  simulated,  and  transients  are  injected  to 
stress  the  processor  while  it  is  executing  selected  applica-
tions. Analysis of the collected data shows that fault sensitiv-
ity  of  the  combinational  logic  (4.2%  for  a  fault  duration  of 
one  clock  cycle)  is  not  negligible,  even  though  it  is  smaller 
than the fault sensitivity of flip-flops (10.4%). Detailed study 
of the error impact, measured at the application level, reveals 
that errors in speculation and control blocks collectively con-
tribute to about 34% of crashes, 34% of fail-silent violations 
and 69% of application incomplete executions. These figures 
indicate  the  increasing  need  for  processor-level  detection 
techniques over generic methods, such as ECC and parity, to 
prevent  such  errors  from  propagating  beyond  the  processor 
boundaries. 
Introduction 
1
The issue of soft errors (or single event upsets) is one of the 
major  concerns  in  designing  and  implementing  the  current 
generation of highly integrated digital systems. Many sources 
[1] contribute to soft-errors, including ionizing radiation par-
ticles,  capacitive  coupling,  electromagnetic  interference,  and 
other  causes  of  electrical  noise.  Recent  studies  indicate  that 
soft  error  rates  (SER)  in  the  data-path  and  combinational 
logic of processors are increasing [2], [3]. Even if the per-bit 
SER  remains  constant  with  advances  in  technology  [1],  [4], 
the SER per chip is expected to increase quadratically, due to 
increase in the number of transistors per die. Several factors, 
such  as  device  and  voltage  scaling,  increasing  frequencies 
and  pipeline  lengths  [1],  [2] can  contribute  to  an  increase  in 
SERs with new generations of manufacturing technologies. 
This paper studies the impact of soft errors in a microproces-
sor intended for embedded applications.  The target system is 
a gate-level implementation (i.e., fully synthesized design) of 
a  DLX-like  processor.  The  synthesized  design  is  simulated, 
and  transient  faults  (targeting  combinational  logic  and  flip-
flops) are injected to stress the processor while it is executing 
selected applications. Collected data are analyzed to assess (i) 
the fault sensitivity of control and speculation logic compared 
to  that  of  other  functional  blocks,  (ii)  the  error  contribution 
from  combinational  circuits  versus  flip-flops,  and  (iii)  error 
propagation  between  the  functional  units.  We  target  embed-
ded  processors  because  they  are  pervasive.  Major  contribu-
tions of this work are as follows: 
A  unique  fault  injection  study  of  the  impact  of  faults  in  the 
processor’s combinational logic and flip-flops. While most of 
the  previous  studies  focused  on  the  impact  of  errors  in  flip-
flops (e.g., [5], [6]), few previous studies have addressed the 
issue of soft errors in combinational logic [2]. 
Characterization  of  the  impact  of  faults  in  control  logic and 
speculation logic. For the analyzed workloads, the fault sensi-
tivity of these two macro-blocks of the processor is about two 
(control) and five (speculation) times higher than those of the 
processor blocks responsible for instruction execution. While 
in the past focus has been on protection mechanisms for ALU 
[9], caches, and application-level control flow [8], the results 
presented  in  this  paper  indicate  that  in  future-generation 
processors,  control  and  speculation  logic  may  become  a  sig-
nificant source of errors that can lead to application failures. 
One can expect that this problem would worsen for the specu-
lation  and  control  logic  of  more  complex  microprocessors 
(such as Intel Pentium 4 and AMD Athlon 64). 
Estimation  of  fault  sensitivity  of  processor  components.  The 
analysis  highlights  the  fact  that  fault  sensitivity  of  different 
functional  units  ranges  from  3%  for  the  Reorder  buffer  to 
44%  for  the  Bus  interface  unit.  Moreover,  the  Register  file,
Bus  interface  unit,  and  Load-store  unit  contribute  to  more 
than  50%  of  the  errors  manifested  outside  the  processor 
boundaries.  
Characterization of the impact of processor errors on appli-
cation.  Our  analysis  indicates  that  Register  file, Instruction 
fetch, and Dispatcher account for 70% of application crashes. 
Even though the Bus interface unit has high fault sensitivity, 
there  is  a  34%  probability  of  the  fault  being  subsequently 
masked by the application. The data also show that a fault in 
the Commit unit is more likely to cause an incomplete execu-
tion  (roughly  3  times  more  frequent)  than  any  other  func-
tional unit. 
Analysis  of  fault  propagation  between  the  functional  units.
Twenty  most  frequent  fault  propagation  paths  account  for 
about  50%  of  all  traversed  paths.  This  information  can  be 
used  to  deploy  protection  mechanisms  to  maximize  the  cov-
erage with low area overhead.  
Target System 
2
The target system  is a superscalar version of the DLX  RISC 
processor  [11].  We  started  from  a  publicly  available  mixed 
behavioral/RTL  VHDL  model  description  of  a  superscalar 
DLX  [12].  The  VHDL  design  of  the  DLX  processor  was 
modified in order to make it synthesizable. The design hierar-
chy  is  extracted  from  the  original  description  in  order  to  se-
lectively inject faults in various portions of the processor and 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:13 UTC from IEEE Xplore.  Restrictions apply. 
to trace the effect of the faults across the functional units. To 
enable  the  application  execution  (compiled  C  programs)  on 
the  simulated  processor  and  collection  of  the  experimental 
results,  the  design  is  augmented  with  additional  behavioral 
blocks  including:  (i)  memory  to  load/store  data  and  instruc-
tions and (ii) a test bench to load data from a file to the mem-
ory and to dump the content of the memory to a file. A brief 
description  of  the  target  processor  and  its  main  blocks  is 
given in the following sections. 
Processor Components 
2.1
The processor is divided into four functional blocks: (i) exe-
cution,  (ii)  control,  (iii)  speculation,  and  (iv)  memory  inter-
face.  Individual  blocks  are  further  divided  into  several  func-
tional units as depicted in Figure 1. 
Figure 1: Architecture of the target (DLX-like) processor 
Execution block  
Arithmetic-logic  unit  (Alu)  and  Multiply-divide  unit  (Mdu):
Form  the  functional  units  of  the  microprocessor  responsible 
for executing the integer arithmetic operations. 
Register file (Rf): Holds the runtime processor’s architectural 
state,  i.e.,  the  user-level  registers;  also  includes  64-byte  in-
struction  cache,  64-byte  data  cache,  instruction-address-
translation-buffer  (4  entries)  and  data  address  translation 
buffer (4 entries). 
Control block 
Dispatcher (Dp): Decodes instructions, computes branch and 
jump  destinations,  evaluates  data  (such  as  branch  conditions 
and  jump  register)  for  execution  units,  issues  instructions, 
enables  the  Instruction  fetch  unit  to  clear  and  overwrite  in-
structions, does exception handling and controls the data-path 
of the microprocessor. 
Reorder buffer (Rb): Controls the committing of instructions 
in the program order. Reorder buffer is linked to the reserva-
tion  station  and  generates  the  commit  signal  for  the  various 
entries in the reservation station.  
Speculation block 
Instruction fetch (If): Fetches instructions (up to two instruc-
tions at a time) from the instruction cache and appropriately, 
increments  the  program  counter.  Instruction  fetch  hosts  the 
branch target buffer, which performs the branch prediction. 
Branch  resolve  unit  (Bru):  Compares  the  branch  prediction 
result and the computed branch condition, and flags an excep-
tion if there is a mismatch. Upon an exception, the dispatcher 
flushes the pipeline and issues the resolved branch condition. 
Commit unit (Cu): Commits up to two instructions per clock 
cycle.  Committing  an  instruction  means  to  complete  the  in-
struction processing within the pipeline, recover all resources 
used  by  that  instruction,  and  write-back  the  result  into  the 
register file. 
Memory interface block 
Load-store  unit  (Lsu):  Executes  the  load  and  store  instruc-
tions. 
Write buffer (Wb): Maintains a queue of data to be stored in 
memory and performs the memory write. 
Bus interface unit (Biu): Controls usage of the data bus, e.g., 
acknowledges the transferred data, and implements the proto-
col to communicate with the external memory. 
Note that only Instruction fetch has functionalities belonging 
to  both  control  and  speculation  blocks.  The  control  part  of 
Instruction  fetch  comprises  only  the  program  counter,  while 
the major area is occupied by the branch target buffer, which 
does the branch speculation. Hence, Instruction fetch is clas-
sified as speculation block. 
Processor Implementation 
2.2
The  target  Superscalar  DLX  processor  described  in  VHDL 
(Aldec  Active  VHDL  4.2)  was  synthesized  using  Synplicity 
Synplify  Pro  7.1  toolset  integrated  with  the  Xilinx  ISE  4.1 
design  flow,  for  a  Xilinx  Virtex  FPGA.  The  Xilinx  Virtex 
series  of  FPGAs  consists  of  logic  cells,  Configurable  logic 
blocks  (CLBs),  and  interconnection  circuitry,  tiled  to  form  a 
chip.  Each  CLB  consists  of  two  slices,  and  each  slice  as 
shown  in  Figure  2  contains  (i)  two  4-input  look-up  tables 
(LUTs)  statically  programmed  during  the  bootstrap  with  the 
configuration  bit-stream,  (ii)  two  flip-flops  (FFs),  storage 
elements  in  the  user  visible system  state, and (iii) associated 
logic,  which  represents  fixed  gates  that  cannot  be  pro-
grammed, e.g., multiplexers, selector logic, xors, and buffers.  
Functional Block 
Included Func-
tional Units 
Execution 
Control 
Speculation
Memory interface 
Alu, Mdu, Rf 
Dp, Rb 
Bru, Cu, If 
Biu, Lsu, Wb 
LUTs 
Gates 
FFs 
Number 
9020 
3817 
706 
2142 
% of 
LUTs 
57.5 
24.3 
4.5 
13.7 
Number 
16819 
4193 
917 
2880 
% of 
Gates
67.8 
16.9 
3.7 
11.6 
Number 
1282 
398 
380 
621 
% of 
FFs
47.8 
14.8 
14.2 
23.2 
Total 
% of Circuit 
Element 
62.8 
19.5 
4.6 
13.1 
Table 1: Area occupation per functional block in the synthesized DLX processor 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:13 UTC from IEEE Xplore.  Restrictions apply. 
the gate [1], [2], [14]. The distribution of the soft error dura-
tion for a given technology and cell layout can be obtained by 
using Spice [15] simulations, e.g., [1], [2], [16], [17]. In this 
study,  the  system  behavior  is  analyzed  for  several  values  of 
fault durations, ranging from 1/8 to 1 clock cycle.  
The  fault  model  is  discussed  in  the  context  of  Xilinx  FPGA 
based hardware,  which is used to implement the target proc-
essor.    The  following  hypothesis  for  the  fault  model  is  as-
sumed:  (i)  The  probability  of  concurrent  particle  strikes  is 
negligible, i.e., a single fault model is adopted. (ii) Faults are 
equally  distributed  spatially  over  the  FPGA  components 
(LUTs, Gates, and FFs). (iii) Faults are equally distributed in 
time,  i.e.,  uniformly  distributed  during  the  simulation  time. 
(iv) Faults in combinational logic are transient, while faults in 
the flip-flops are bit-flips. (v) Faults can only occur as a func-
tional upset in elements of user logic, but not as configuration 
upset  (we  assume  that  soft  errors  do  not  affect  the  post-
power-up configuration LUT characteristics) [18].  
Fault  locations.  A  soft  error  can  occur  in  different  loca-
tions/points of the FPGA building blocks: (A) at the output of 
a gate, (B) at the output of an LUT, (C) at the output of a flip-
flop  and  (D)  in  the  state  of  a  flip-flop.  A  fault  of  types  (A)
and (B) models the situation when a particle hits a particular 
transistor of a gate or an LUT, resulting in a voltage pulse at 
the  component  output  causing  a  flip  in  the  logic  value  [2]. 
Similarly the voltage pulse at the output of the flip-flop (type 
(C)) models the particle strike at the output stage of the flip-
flop. Case (D) represents the strike of a particle, flipping the 
state  of  a  flip-flop  [1].  Fault  categories  (A), (B),  and  (C)  are 
transient,  i.e.,  the  steady  stable  state  of  the  signal  will  be 
eventually  reached  because  the  implementing  circuits  are 
static  CMOS  rather  than  dynamic  logic.  The  fault  category 
(D) persists until the content of the flip-flop is overwritten. 
Implemented  fault  model.  The  injection  mechanism  is  ge-
neric  and  simulator-independent,  i.e.,  the  support  for  fault 
injection  is  transparent  to  the  Modelsim  core  functionalities. 
Injection  of  fault  categories  (A),  (B),  and  (C):  To  inject  a 
transient fault with duration [T0, T1], the output signal driven 
by a Gate, a LUT, or a FF is forced to the inverted value  of 
the signal at the time T0 and kept for the duration of the fault 
interval [T0, T1]. (This behavior is dictated by the physics of 
the excess charge). Injection of fault category (D): The output 
port of the flip-flop is forced to the inverted value of the flip-
flop state until this state is overwritten.  
Outcome 
Definition 
Crash 
Fail silent data 
violation 
Incomplete 
execution 
No effect 
A memory location loaded or stored is out of the 
boundaries of the application image. 
The application terminates without crashing but 
the memory image is different from the golden 
run. 
The program does not complete in the expected 
time (normal execution time + 10% extra time 
margin). 
There is a mismatch at the pin-level in the cycle-
accurate behavior of the processor, and the ap-
plication program terminates correctly. 
Table 3: Outcome categories 
Outcome categories. A fault is considered as an error when it 
manifests  at  the  interface  of  the  processor,  changing  (com-
Figure 2: Basic architecture of Xilinx FPGA slice 
The obtained implementation of the Superscalar DLX proces-
sor occupies 4873 flip-flops (FFs), and 16395 look-up tables 
(LUTs), mapped into 9526 slices (49% of the overall number 
of  available  slices  in  a  VirtexE2000-8). The  minimum  clock 
period of the synthesized system is about 60 ns. 
Table  1  reports  the  area  occupation  (in  terms  of  structural 
components  of  FPGA)  with  respect  to  the  functional  blocks 
(execution,  control,  speculation,  and  memory  interface).  Ob-
serve that the area occupation of the control and speculation 
blocks together is about one third of the execution block. 
All VHDL simulations were done using the commercial HDL 
simulator Modeltech Modelsim SE 5.8c.
2.3 Workload 
Two  applications  (the  Bubble  Sort  algorithm  and  Prime 
Number generator) are used as workloads to generate proces-
sor  activity  and  to  exercise  the  injected  faults.  Table  2  pro-
vides  the  characteristics  of  the  two  target  programs.  Bubble 
Sort  is  a  memory  intensive  application,  whereas  the  Prime 
Number  generator  is  CPU-intensive.  The  simulation  of  18µs
of  DLX  processor  activity  with  a  clock  period  of  60ns  re-
quires  30  seconds  on  an  Intel  3.0  GHz  Pentium  4  processor 
equipped with 1 GB RAM.  
Application 
Number of 
Instructions 
Simulated Exe-
cution Time  
Bubble Sort 
289 
Prime Number 
18µs
46µs
Table 2: Application characterization 
760 
Fault model 
3
Fault  model  employed  in  this  study  mimics  soft  errors  in 
combinational  circuit  and  flip-flops,  due  to  events  such  as  a 
radiation  particle  strike.  When  a  particle  strikes  a  sensitive 
region  of  a  transistor  in  a  logic  gate,  it  produces  an  excess 
charge,  creating  a  current  pulse  with  a  rapid  rise  time,  but  a 
more gradual fall time (e.g., see [13]). This current pulse re-
sults  in  a  voltage  pulse,  which  can  upset  the  output value  of 
the gate, resulting in a fault. The effect of this on CMOS cir-
cuits  is  a  voltage  transient  since  the  gate  forces  the  output 
value  to  the  stable  value  after  the  charge  coming  from  the 
strike  has  dissipated.  The  duration  of  the  fault  depends  on 
multiple factors, e.g., the charge collected due to the particle 
strike  (which  depends  on  the  layout  of  the  gate  and  the  en-
ergy  of  the  particle),  the  recombination  time  of  this  excess 
charge  (which  depends  on  the  substrate  characteristics),  the 
rise and the fall time of the pulse, and the driving strength of 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:13 UTC from IEEE Xplore.  Restrictions apply. 
pared with the golden run, i.e., a run of the system in the ab-