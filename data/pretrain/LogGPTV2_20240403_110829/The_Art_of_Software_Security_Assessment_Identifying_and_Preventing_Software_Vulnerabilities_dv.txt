If there isn't enough data in the packet to match this length, the program runs the risk 
of reading past the received packet contents into adjacent memory locations. 
Are All Field Lengths Consistent? 
Three different lengths are at play in an IP header: the amount of data received from 
the network, the length of the IP header specified in the header length field, and the 
length of the total packet specified in the total length field. These fields must be 
consistent, and the following relationships must hold: 
IP header length hl); 
    total_length = ntohs(iph->tot_len); 
    data_length = total_length  header_length; 
    ... validate ip header ... 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
850 
    switch(iph->protocol){ 
        case IPPROTO_TCP: 
            return process_tcp_packet(data + header_length, 
data_length); 
            ... 
If the total length is smaller than the header length, the data_length value underflows 
and the process_tcp_packet() function thinks the packet's data length is huge 
(around 4GB). Invariably, this error leads to memory corruption or an attempt to 
access data out of bounds (probably when performing a TCP checksum, as the code 
tries to checksum around 4GB of data). 
Now take a look at a real-world example to see whether you can spot the oversights 
in it. This code is from the 1999-era Snort 1.0, which has been edited slightly for 
brevity: 
void DecodeIP(u_char *pkt, const int len) 
{ 
   IPHdr *iph;   /* ip header ptr */ 
   u_int ip_len; /* length from the start of the ip hdr 
      to the pkt end */ 
   u_int hlen;   /* ip header length */ 
   /* lay the IP struct over the raw data */ 
   iph = (IPHdr *) pkt; 
   /* do a little validation */ 
   if(len ip_len); 
   if(len ip_hlen * 4; 
if(hlen > 20) 
{ 
   DecodeIPOptions( (pkt + 20), hlen - 20); 
} 
Uh-oh! The code hasn't checked to make sure the packet has enough bytes to contain 
hlen and hasn't checked to see whether the total length is big enough to contain hlen. 
The result is that DecodeIPOptions() reads past the end of the packet, which probably 
isn't too catastrophic. Continuing on: 
   /* check for fragmented packets */ 
   ip_len -= hlen; 
   pip.frag_off = ntohs(iph->ip_off); 
      /* move the packet index to point to the transport 
        layer */ 
      pktidx = pktidx + hlen; 
      switch(iph->ip_proto) 
      { 
         case IPPROTO_TCP: 
                      net.proto = IPPROTO_TCP; 
                      strncpy(pip.proto, "TCP", 3); 
                      DecodeTCP(pktidx, len-hlen); 
                      return; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
852 
This code has several problems, including the following: 
ip_len can be anything, as long as it's not higher than the amount of data 
available. So it could be less than 20, greater than 20 but less than the header 
length, or greater than the header length but less than the amount of data 
available. 
In fact, Snort ignores ip_len entirely, instead using the amount of data read 
from the network for its calls to upper-layer functions, such as DecodeTCP(). 
If ip_hlen is less than 5 (and, therefore, hlen is less than 20), the packet 
decoding starts reading the TCP header inside the IP header. At least it won't 
try to decode options. 
If ip_hlen is greater than ip_len and also greater than 20, the code decodes IP 
options that are past the packet's boundaries. In other words, the 
DecodeIPOptions() function attempts to interpret undefined memory contents 
as IP options. 
If ip_hlen is greater than the amount of data available, all the length 
calculations are going to underflow, and the TCP decoder assumes there's a 
4GB TCP packet. 
Is the IP Checksum Correct? 
The IP checksum is used as a basic mechanism to ensure that the packet header 
hasn't been corrupted en route. When the IP stack receives a new packet, it should 
verify that the checksum is correct and discard the packet if the checksum is 
erroneous. Any IP processing code that fails to do this verification is interpreting 
packets that should be ignored or dropped. 
It's rare to find code that fails to verify the checksum; however, this error might 
surface occasionally in packet-sniffing software. Although accepting a packet 
erroneously has a fairly minimal impact in this context, it might prove useful for 
attackers trying to evade intrusion detection. Attackers could send a packet that looks 
like it closes a connection (such as a TCP packet with the FIN or RST flags set) so that 
when the packet sniffer sees it, it stops monitoring the connection. The end host, 
however, silently ignores the packet with the invalid checksum. This result is more 
interesting in TCP checksums because those packets are routed. 
IP Options Processing 
IP options are optional variable-length elements that can be added to the end of an 
IP header to convey certain information from the sender to the destination (or 
intermediate routers). Options can modify attributes of the packet, such as how the 
datagram should be routed and whether timestamps should be added. A maximum of 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
853 
40 bytes of IP options can be appended to an IP header (making the maximum total 
IP header size 60 bytes). 
Note 
The header length field is 4 bits and represents the IP header's length in 32-bit words. 
So the maximum value it can have is 0x0F (or 15), which multiplied by 4 gives 60. 
Before you look at what IP options are available, here's the basic structure of an IP 
option: 
struct ip_options { 
    unsigned char option; 
    unsigned char optlen; 
    unsigned char data[0]; 
}; 
An IP option is typically composed of a one-byte option type specifying what the 
option is, a one-byte length field, and a variable-length data field. All options have 
this format (except two, explained shortly in this section). 
Note 
The option byte is actually composed of three fields, as shown: 
struct optbyte { 
    unsigned char copied:1; 
    unsigned char class:2; 
    unsigned char option:5; 
}; 
The top bit indicates whether the option is copied into each fragment (if 
fragmentation occurs), and the next two bits indicate what class the IP option is. RFC 
791 (www.ietf.org/rfc/rfc0791.txt?number=) lists these available options: 
0 - Control 
1 - Reserved for future use 
2 - Debugging and measurement 
3 - Reserved for future use 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
854 
IANA gives a complete list of the classes each option belongs to 
(www.iana.org/assignments/ip-parameters). The last five bits indicate the actual 
option. 
Most implementations ignore that the option byte has several fields and just treat it as 
just a one-byte option field. 
Given this information, you can begin applying your knowledge from Part II(? [????.]) 
on variable relationships and type conversions to start locating potential problems. 
(The one-byte option length is related to the IP header length and, indeed, the IP total 
length.) The following sections cover some typical mistakes that can be made when 
dealing with these structures. 
Is the Option Length Sign-Extended? 
The IP options field is a single byte, and it's not unusual for code processing IP options 
to store that length field in an integer, which is a larger data type. As you learned in 
Chapter 6(? [????.]), "C Language Issues," these assignments cause a promotion of 
the smaller type (byte) to the larger type (integer) to store the length value. 
Furthermore, if the length byte is treated as signed, the assignment is value 
preservingin other words, it's sign extended. This assignment can lead to memory 
corruption (such as large data copies) or incorrect advancement of a pointer cycling 
through IP options, which can have varying consequences depending on how the code 
works. You see a real-world example of this problem in "TCP Options Processing(? 
[????.])" later in this chapter; TCP options have a nearly identical structure to IP 
options. 
Is the Header Big Enough to Contain the IP Option? 
An IP option is at least two bytes, except for the "No Operation" (NOP) option and the 
"End of Options List" (EOOL, or sometimes just shortened to EOL). Many options have 
further requirements for minimum length; a source routing option needs to be at least 
three bytes, for example. Sometimes IP option processing code fails to verify that 
these minimum length requirements are met, which often leads to either reading 
undefined memory contents or possibly memory corruption due to integer boundary 
conditions. Consider the following example: 
int process_options(unsigned char *options, 
    unsigned long length) 
{ 
    unsigned char *ptr; 
    int optlen, opttype; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
855 
    for(ptr = options; length; length -= optlen, ptr += optlen){ 
        if(*ptr == IPOPT_NOP){ 
            optlen = 1; 
            continue; 
        } 
        if(*ptr == IPOPT_EOL) 
            break; 
        opttype = ptr[0]; 
        optlen = ptr[1]; 
        if(optlen > length) 
            goto err; 
        switch(opttype){ 
            ... process options ... 
        } 
    } 
 } 
This code cycles through options until no more are left to process. There's a slight 
problem, however; no check is done to ensure that at least 2 bytes are left in the 
buffer before the opttype and optlen values are populated. An options buffer could be 
constructed such that only one byte is left in the buffer when processing the final 
option, and the optlen byte would read out-of-bounds memory. In this situation, 
doing so probably wouldn't be useful (as the length check after the byte is read would 
ensure that the loop doesn't start skipping farther out of bounds). Code like this that 
processes specific options, however, can be quite dangerous because some options 
are modified as they are processed, and memory corruption might be possible. 
Is the Option Length Too Large? 
The variable relationship between the IP header length, IP total length, and each IP 
option length field specifies that the following must hold true: 
Offset of IP option + IP option length  length) 
            goto err; 
        switch(opttype){ 
            ... process options ... 
        } 
    } 
} 
This code correctly ensures that the length in the IP option isn't larger than the total 
amount of IP option bytes specified in the IP header. However, it fails to make sure it's 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
857 
at least 2. Supplying a value of 0 for an IP option length causes this code to enter an 
infinite loop. 
Additionally, if an IP option length of 1 is given, the next option begins where the 
length byte of the current option should be. This error can also have varying 
consequences, depending on how the code following the validation failure performs 
options processing. 
Are IP Option Bits Checked? 
The IP option byte is actually composed of a number of bit fields, but most 
implementations ignore the separate fields and treat the byte as a single value. So 
any implementation that actually parses the IP option byte by masking off the option 
bits could expose itself to potential misinterpretations of an option's meaning. To 
understand the problem, take a look at this example: 
#define OPTVALUE(x) (x & 0x1F) 
int process_options(unsigned char *options, size_t len) 
{ 
    unsigned char *optptr, *optend = options + len; 
    unsigned char optbyte, optlen; 
    for(optptr = options; optptr = optend) 
            goto err; 
        switch(OPTVALUE(optbyte)){ 
            case IPOPT_LSRR: 
                ... 
        } 
    } 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
858 
The problem is that even though this code is correctly masking the option byte to get 
the lower 5 bits, the other bitfields should also be set a certain way depending on the 
option value. In fact, IP options are defined by the Internet Assigned Numbers 
Authority (IANA) by their option value as well as the other bitfield values associated 
with that option, and so ignoring other bitfields is technically a mistake. 
Note 