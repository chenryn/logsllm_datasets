implement, and evaluate a new context-aware protection
framework to defend against such attacks.
3. ATTACK DESCRIPTION
In this paper, we demonstrate the feasibility of a key-
stroke inference attack against a user typing on an external
QWERTY keyboard by using smartwatch motion sensors.
Because of limitations faced by emanation-based keystroke
inference attacks, and multiple technical challenges in imple-
menting them on a smartwatch, we pursue a slightly diﬀer-
ent approach for our attack where we focus on capturing and
using keystrokes related wrist motion or movement charac-
teristics.
We observed that the wrist movements made while typing
a ﬁxed sequence of letters on a keyboard are highly similar
and consistent across multiple trials involving a single typer.
This gave us the intuition that an adversary can create a
dictionary of commonly used words (words are nothing but
ﬁxed sequence of letters), along with their corresponding
wrist movement patterns. During the attack, the adver-
sary can simply match the eavesdropped wrist movement
pattern to the closest matching pattern in the dictionary.
Intuitively, the recovery can be highly accurate if the dictio-
nary is carefully created and comprises of all words that the
target is expected to type. However, the recovery rate also
depends on how the wrist movement patterns are character-
ized (which we will explain in Section 4.1) and the granular-
ity of the captured wrist movement data (which is generally
limited by the eavesdropping sensor’s maximum sampling
frequency).
For carrying out the proposed inference attack, an adver-
sary requires an eavesdropping device that is capable of con-
tinuously recording wrist movements, while avoiding detec-
tion. A modern commercial-oﬀ-the-shelf smartwatch, which
is generally equipped with a range of sensors (especially mo-
tion sensors), can easily serve as such an eavesdropping de-
vice. Other forms of wrist wearable devices such as activ-
ity trackers and ﬁtness bands, are typically also equipped
with motion or inertial sensors, and can also be used as an
eavesdropping device for the proposed attack. In this work,
without loss of generality, let’s assume that the adversary
exploits the smartwatch as an eavesdropping device. How-
ever, a bigger challenge is how does an adversary gain access
to the motion data captured on the smartwatch. This can be
achieved by an adversary installing a malicious application
that has access to the motion sensors on the target’s smart-
watch such that the application is able to stealthily capture
and transfer the captured motion data to the adversary.
This is feasible because, even though an application’s ac-
cess to the some sensors (e.g., GPS and camera) is generally
user-managed or restricted on most modern mobile operat-
ing systems such as Android and iOS, access to motion sen-
sors (such as, accelerometer and gyroscope) remains highly
unregulated. An adversary can easily install the malicious
application on the target smartwatch by various means, for
example, by gaining physical access to the device or through
social engineering (e.g. masquerading as a legitimate appli-
cation, pretexting, baiting, phishing etc.). The malicious
application can then stealthily collect and transfer motion
data by masquerading as, or piggy backing on, useful ap-
plication data and network traﬃc. In other words, the in-
fected smartwatch now acts as an eavesdropping device that
the targets’ themselves place on their wrist, and unsuspect-
ingly have it on their wrist while typing on a keyboard, as
depicted in Figure 1.
The malicious adversarial application on the smartwatch
records the linear accelerometer data (linear accelerometer
measures the acceleration experience by the device, exclud-
ing the force of gravity) and microphone data. In the pro-
posed attack, the acoustic data recorded by the microphone
is not used for keystroke inference, but rather just to iden-
tify keystroke events (as explained in detail in Section 4.2.2).
Due to the impracticality of an on-screen keyboard on the
small smartwatch screens, an adversarial smartwatch appli-
cation can seek access to the microphone in order to support
voice commands or dictation, which is common. Alterna-
tively, keystroke events can also be recognized by solely us-
ing the motion sensors, as accomplished in Marquardt et al.
[16]. As mentioned earlier, the recorded sensor data is then
transmitted by the malicious application to the adversary
directly over the Internet by masquerading as useful com-
munication or by piggyback on communications from other
applications. In an eﬀort to save battery power (necessary
for avoiding detection), the recording and communication
process may be initiated remotely by the adversary or based
on periodic activity tracking.
Figure 1: An exemplary setup where a person is
typing on a QWERTY keyboard, while wearing a
Samsumg Gear Live smartwatch on left hand. A
similar setup is used in our experiments.
4. THE ATTACK FRAMEWORK
In this section, we present our model for identifying key-
press events from raw motion sensor data. We then discuss
our attack framework, and an experimental setup for evalu-
ating the framework.
4.1 Modeling Key Press Events
With the maximum supported linear accelerometer sam-
pling rate (∼50-70Hz) being much lower than that of smart-
phones (∼200-300Hz), the diﬃculty in recognizing individ-
ual keys is greatly increased when using a smartwatch. To
overcome this shortcoming, we attempt to identify pairs of
key presses or keystrokes by learning the relationship be-
tween them. While typing a word, there will be one key
press for each character or letter in the word. Let Ki, Kj be
two consecutive key press events, signifying two consecutive
characters or letters of a word. We characterize the relation,
rel(Ki, Kj), between any two consecutive key press events
Ki, Kj as follows:
• Horizontal Position: The location loc(Ki) of each key-
stroke event relative to a ‘central-line’ dividing the key-
board into left (L) and right (R) halves. The rationale
behind this classiﬁcation is that the wrist movement will
be more pronounced for typing a key on the same side as
the watch-wearing hand.
• Transitional Direction Between Consecutive Key
Presses: The direction dir(Ki, Kj) represents the direc-
tion of wrist movement between consecutive key presses
Ki and Kj on watch-wearing side of the keyboard. The
possible directions (or values for dir(Ki, Kj)) are N, E, S,
and W, representing geographical north, east, south, and
west, movement respectively. An additional classiﬁcation
is O, if Ki = Kj. The rationale behind this classiﬁcation is
that the direction of transition between a pair of keystrokes
will be reﬂected in the wrist movement.
With the above classiﬁcation, the relationship between
two consecutive key press events is deﬁned as follows:
• When either Ki, Kj, or both, occur on the non-watch
wearing side of the keyboard, rel(Ki, Kj) = loc(Ki) ||
X || loc(Kj), where ‘X(cid:48) implies that direction cannot be
determined. The intuition behind such an assignment is
that it is not possible to determine the direction of tran-
sition when at least one of the pressed key is not on the
watch-wearing side of the keyboard.
• When both Ki and Kj occur on the watch-wearing side
of the keyboard, rel(Ki, Kj) = loc(Ki) || dir(Ki, Kj) ||
loc(Kj).
A word-proﬁle for a word can then be derived by concate-
nating the relation between every consecutive pair of letters
in the word. For example, the word “boards” can be broken
down in to ﬁve pairs of keystrokes {bo, oa, ar, rd, ds}, i.e.,
word-proﬁle for the word “boards” is rel(bo).rel(oa).rel(ar)
.rel(rd).rel(ds). With the setup for a QWERTY keyboard,
as shown in Figure 2, and the entire L/R and N/E/S/W/O
classiﬁcation listed in Table 1, the word-proﬁle of “boards”
will be:
RXR . RXL . LEL . LSL . LWL
Figure 2: The keyboard is divided in to left (L) and
right (R) halves, shown by the solid red line. Exam-
ples of N, E, S, and W classiﬁcation are also shown.
Each direction has 90° ﬁeld of view from center of
the key. Keys that fall on the boundary are catego-
rized in the direction where greater area of the key
lies.
Table 1: L/R classiﬁcation of individual keys and
N/E/S/W/O classiﬁcation of character-pairs, as-
suming smartwatch is worn on left hand.
L
R
N
E
S
q, w, e, r, t, a, s, d, f, g, z, x, c, v
y, u, i, o, p, h, j, k, l, b, n, m
aq, aw, sw, se, de, dr, fr, ft, gt, zq, zw, ze, za, zs,
xw, xe, xr, xs, xd, ce, cr, ct, cd, cf, vr, vt, vf, vg
qw, qe, qr, qt, qs, qd, qf, qg, qx, qc, qv, we, wr,
wt, wd, wf, wg, wc, wv, er, et, ef, eg, ev, rt, rg, ae,
ar, at, as, ad, af, ag, ax, ac, av, sr, st, sd, sf, sg,
sc, sv, dt, df, dg, dv, fg, zr, zt, zd, zf, zg, zx, zc,
zv, xt, xf, xg, xc, xv, cg, cv
qa, qz, wa, ws, wz, wx, es, ed, ez, ex, ec, rd, rf, rx,
rc, rv, tf, tg, tc, tv, az, sz, sx, dx, dc, fc, fv, gv
W wq, eq, ew, ea, rq, rw, re, ra, rs, rz, tq, tw, te, tr,
ta, ts, td, tz, tx, sq, sa, dq, dw, da, ds, dz, fq, fw,
fe, fa, fs, fd, fz, fx, gq, gw, ge, gr, ga, gs, gd, gf,
gz, gx, gc, xq, xa, xz, cq, cw, ca, cs, cz, cx, vq, vw,
ve, va, vs, vd, vz, vx, vc
O
qq, ww, ee, rr, tt, aa, ss, dd, ﬀ, gg, zz, xx, cc, vv
The main idea behind our attack is that the adversary
will have a pre-processed dictionary of well-known (or tar-
geted) words and their corresponding word-proﬁles (formed
as discussed before). These word-proﬁles are used in dis-
tinguishing between candidate words from the dictionary.
Given the motion data, the adversary will attempt to infer
word-proﬁles from the motion data and then use the pre-
processed dictionary to determine the typed word by com-
paring the inferred word-proﬁle to the word-proﬁle in the
dictionary. However if the dictionary is large, more than
one word may have the same word-proﬁle. Such collisions
may result in incorrect predictions, and thus, reduce the ac-
curacy of the inference attack by the adversary.
In such
cases, a frequency-based selection (as discussed in Section
5) could yield better word recovery results. Similarly, deﬁn-
ing word-proﬁles by using additional ﬁne-grained directional
data (e.g., NE, SW, etc.) could reduce the number of col-
lisions and improve inference accuracy, however it will also
increase the attack execution time for the adversary.
4.2 Keystroke Inference Attack
Broadly, our proposed inference attack comprises of a
learning phase (Figure 3) that is followed by the attack
phase (Figure 4). However, before initiating the learning
phase, the adversary must deﬁne the classiﬁcation param-
eters. This includes deciding the keys in L and R halves,
determining the hand on which the smartwatch is worn, and
accordingly form all perceptible transitions. In our experi-
ments, we suppose that the target is wearing the smartwatch
on his/her left hand and the keyboard is divided in L and
R halves as shown in Figure 2. Accordingly, all 196 possible
transitions with the watch-wearing hand are listed in Table
1. However, the proposed attack could easily be modiﬁed
(with little eﬀort) for the watch worn on the right hand or
for other forms of L/R division of the keyboard. After these
parameters are determined, the learning phase can begin.
4.2.1 Learning Phase
The purpose of this phase is to construct trained clas-
siﬁcation and prediction models for use during the attack
phase. Training of these models comprises of the following
four steps: (i) data collection, (ii) feature extraction, (iii)
word labeling, and (iv) supervised learning. To ensure uni-
formity in the learning models, the training data is chosen
such that it has equally distributed features. This can be
achieved by using a large set of randomly generated words,
uniformly covering all keys and apprehensible transitions.
Data Collection: There are two types of data recorded
by our custom Android Wear attack (or data collection) ap-
plication. First, is the motion data just before and immedi-
ately after a keystroke. Second, is the entire transition data
between two keystrokes that occur on the watch-wearing side
of the keyboard. Both types of recorded data are the lin-
ear accelerations experienced by the smartwatch, as sensed
by it’s linear accelerometer sensor. The sampled linear ac-
celerometer readings are composed of instantaneous three
dimensional linear acceleration along the X, Y, and Z axes.
One of the authors (pretending to be the adversary) typed a
set of 1000 random English words which uniformly covered
all 26 keys and 196 transitions, without any ﬁxed ordering or
timing. Note that the number of possible transitions will be
144 if the target wears the smartwatch on the right hand and
the keyboard is divided into the same L and R halves. The
data collection application also clocks and tags the ground
truth of the typed keys, which helps simplify the feature ex-
traction and labeling process later, which in turn, ensures
error-free training.
Feature Extraction: Feature extraction aids in dimen-
sionality reduction by eliminating redundant measurements.
For (L/R) keystrokes we compute a comprehensive set of 24
type of features such as mean, median, variance, standard
deviation, skewness (measure of any asymmetry) and kurto-
sis (to measure any peakedness). We use multiple inter and
intra-axis time domain features to capture the correlation
between movement on the three axis, and frequency domain
features to identify the diﬀerent rebounding (or oscillatory)
motion of the wrist. However, in case of (N/E/S/W/O) la-
beling, we observed that the transition period was varying
widely based on typing speed and word composition. As a
result, it is impossible to represent the entire transition in a