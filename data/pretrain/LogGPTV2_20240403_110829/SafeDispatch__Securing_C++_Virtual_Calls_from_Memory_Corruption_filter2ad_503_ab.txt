method m = t[0];
m(win, r.msg)
win->display(r.msg);
// equivalently:
//
//
//
//
// If the object that win points to was accidentally
// deleted, and a Shell object was allocated in its
// place, then the above call invokes method 0 of
// Shell via the dangling win ptr, namely "run" with
// a tab-controlled arg!
break;
case GET_HTML:
...
// BUG: accidental delete, win ptr now dangling
delete win;
...
break;
}
}
}
// attack request sequence to run arbitrary shell command
GET_HTML, GET_DATE, DISPLAY_ALERT
Fig. 2. Example vtable Hijacking. The above code sketches the core of a
browser kernel in the style of Google Chrome: tabs run as separate, strictly
sandboxed processes and send requests to the kernel to perform privileged
operations like running shell commands or accessing the network. The main
loop above illustrates how such a browser kernel responds to unprivileged tab
requests. Due to a use-after-free error, an attacker can craft a sequence of
requests causing the above code to run arbitrary shell commands.
The attack we demonstrate here assumes an adversary has
already compromised a tab process which they now use to
mount an attack against the highly privileged browser kernel.
Although the code in this example is greatly simpliﬁed, a
similar attack was central to Pinkie Pie’s 2012 Zero-day exploit
against Google Chrome [12]. Furthermore, while this example
shows how vtable hijacking can be used to compromise a
browser kernel, the approach generalizes to mounting attacks
against many kinds of software, allowing an adversary to hijack
program control ﬂow, and thus potentially execute malicious
shellcode.
The core of Figure 2 depicts a loop inside the browser
kernel to handle requests from unprivileged tab processes.
3
For this simpliﬁed example, we consider three handlers which
together enable a vtable hijacking attack that will allow an
adversary to execute an arbitrary shell command.
The handler for GET_DATE uses a Shell object
to
execute a shell command which retrieves the system’s date
information, and then sends the result back to the requesting
tab. Note that the parameter passed to Shell::run is a safe,
constant string.
The handler for DISPLAY_ALERT renders a tab-provided
string to the screen using a Window object. According to the
C++ type system, at runtime this object will be an instance
of Window or any of its subclass. In this case, there are
two possibilities, either the Window class or the MobileWin
class, which is specialized to render on smaller screens, and is
used depending on the setting in the SMALL_SCREEN variable
ﬂag.
sending
three
the win object
The attack now consists of
These two handlers alone do not contain an exploitable bug.
However, we now introduce a third handler for GET_HTML
requests which, somewhere in the process of fetching HTML
for a tab-provided URL, inadvertently deletes the Window
object pointed to by win, leaving the win pointer dangling.
the adversary controlled
requests: GET_HTML, GET_DATE,
tab
and DISPLAY_ALERT. First, when kernel processes the
GET_HTML request,
is accidently deleted.
Second, when the kernel processes the GET_DATE request,
is allocated. The memory allocator
a new Shell object
may place this object at
the same memory location just
freed by the previous handler,
leaving the dangling win
pointer to refer to this newly allocated Shell object. Third,
when the kernel processes the DISPLAY_ALERT request,
the method call win->display(r.msg) dereferences the
ﬁrst word of win to get a vtable and calls the ﬁrst function
contained in that vtable. However, since win now points
its vtable pointer refers to Shell’s
to a Shell object,
vtable whose ﬁrst element
is the run method. Therefore,
win->display(r.msg) actually calls Shell::run
with r.msg as a parameter, a value provided by the attacker
controlled tab. Thus, by sending these three requests in order,
the compromised tab has tricked the kernel into running an
arbitrary shell command, completely violating the kernel’s
security guarantee: the browser kernel’s prime directive is to
ensure all privileged operations are appropriately guarded,
even in the face of a fully comprised tab processes.
This example illustrates just one of the many ways an
attacker may mount a vtable hijacking attack. In addition to
exploiting use-after-free errors, traditional buffer overﬂows (on
the stack or heap), type confusion attacks, and vtable escape
vulnerabilities are some of the techniques an attacker can em-
ploy to corrupt an object’s vtable pointer and hijack program
execution. We next sketch how SAFEDISPATCH prevents the
attack shown in this example and consider the general case in
subsequent sections.
C. SAFEDISPATCH vtable Protection
The attack illustrated in Figure 2 compromises control ﬂow
through the win->display(r.msg) method call to trick
the program into invoking Shell::run(r.msg) instead.
4
// SA F EDI S P A T C H protection for win->display(r.msg)
vtable t = *((vtable *)win);
method m = t[0];
if(m == Window::display ||
m == MobileWin::display)
m(win, r.msg);
// load vtable
// lookup method
// check ensures m valid
error("bogus method implementation!");
else
// otherwise, signal error
SAFEDISPATCH Protection. The SAFEDISPATCH compiler inserts
Fig. 3.
checks at each method call site, analogous to those shown in bold above,
to ensure that a method looked up from an object’s vtable is valid given
the object’s static type, i.e. that it is a method of the object’s class or one
of its subclasses. Since our Window class has one subclass which overrides
display, there are two valid methods in this case, Window::display
and MobileWin::display. This check ensures that control ﬂow through
method calls satisﬁes the C++ type system, effectively preventing the attacker
from executing arbitrary code. We detail our general approach in Section III.
To prevent such attacks, SAFEDISPATCH inserts code to check
the integrity of control-ﬂow transfers for virtual method calls.
In particular, at each virtual method call site, SAFEDISPATCH
inserts checks to ensure that the code being invoked is a valid
implementation of the called method according the static type
of the object being called. For example, Figure 3 sketches
the code that SAFEDISPATCH generates to protect the call
win->display(r.msg). The additional checking code,
shown in bold, guarantees that the method being called is either
Window::display or MobileWin::display, which
SAFEDISPATCH knows are the only two valid possibilities
given the static type of win. This checking code not only
prevents the previously described attack, but also adds only
minimal overhead compared to the existing dynamic dispatch
code.
So far, we have shown how SAFEDISPATCH prevents an
attack on a simple example. In the remainder of the paper we
explain how SAFEDISPATCH works in the general case, and
present experimental results demonstrating that the overhead
on complex, industrial scale applications is relatively low.
III. THE SAFEDISPATCH COMPILER
At
their core, vtable hijacking attacks cause a virtual
method call to jump into code which is not a valid imple-
mentation of that method. SAFEDISPATCH defends against all
such attacks by instrumenting programs to ensure that, at every
virtual method call site, the function pointer retrieved from
the object’s vtable at runtime is a valid implementation of
the method being called (according to C++ dynamic dispatch
rules), even if an attacker has managed to corrupt memory by
exploiting a bug in the program.
In this
section we describe our
implementation of
SAFEDISPATCH as an enahnced C++ compiler, built on top of
the Clang++/LLVM compiler infrastructure [21]. SAFEDIS-
PATCH extends this infrastructure with three major passes
to insert checks which protect an application from vtable
hijacking: (1) a variant of static Class Hierarchy Analysis [22]
(CHA) which allows us to determine, at compile time, all
the valid method implementations that may be invoked by
an object of a particular static type at a given method call
site, (2) a pass which uses the results from CHA to insert
runtime checks that will ensure all method calls jump to valid
implementations during program execution, and (3) various
optimizations to reduce the SAFEDISPATCH runtime and code
B
m1
*
*
A
m1
m2
m3
D
*
m2
*
ValidM
A
B
C
D
E
m1
A::m1
B::m1
C::m1
m2
A::m2
D::m2
m3
A::m3
E::m3
B::m1
A::m2
A::m3
C::m1
A::m2
D::m2
A::m3
E::m3
C::m1
D::m2
A::m3
C::m1
A::m2
E::m3
C
m1
*
*
E
*
*
m3
Fig. 4. Example Class Hierarchy Analysis (CHA). Our Class Hierarchy
Analysis is a static (compile time) analysis that uses the class hierarchy to
compute which method implementations can be invoked by objects of each
class type. The left diagram above shows an example hierarchy of ﬁve classes
where subclasses point to their parent class: D and E are subclasses of C while
B and C are subclasses of A. These classes have three methods: m1, m2, m3.
In each class’s box, we denote inheriting a parent’s method implementation
with * and list the names of overridden methods. For example, in this case
C overrides A’s implementation of m1, but inherits the implementations of
m2 and m3. The results of our Class Hierarchy Analysis (CHA) is the
ValidM table, specifying for each object type which implementations of
a method may be invoked at runtime, according to C++ dynamic dispatch
rules. In the example table above right, we see that calling method m2 on an
object statically declared to have type C can invoke either class A’s or D’s
implementation of m2.
size overhead. We describe each of these three passes in more
detail below.
A. Class Hierarchy Analysis
SAFEDISPATCH instruments a program to ensure all run-
time virtual method calls are valid, but before inserting these
dynamic checks we must ﬁrst determine, at compile time,
which implementations are valid for each virtual method call
site. Class Hierarchy Analysis [22] (CHA) is a static analysis
that gathers this information by constructing the program’s
class hierarchy, i.e. immediate subtyping relation, and then
traverses this class hierarchy to compute the set of valid
implementations for each virtual method of every class. The
end result produced by CHA will be a map ValidM which
gives us, for each class c and each virtual method n, the
set ValidM[c][n] of method implementations that could be
invoked at runtime if an object with static type c were used to
call n.
Consider the example CHA results in Figure 4. In this
case, the program being analyzed only contains ﬁve classes
forming a three-layer hierarchy: D and E are subclasses of
C while B and C are subclasses of A. Conceptually,
this
hierarchy is computed by creating a graph containing a node
for each class in the program and then adding an edge from
class c to c0 whenever c extends c0. Each node also stores
information about its class’s methods, in particular indicating
which implementations are inherited from parents (which we
depict using *) and which the class overrides with its own
implementation (which we depict using the method’s name).
Our version of CHA analyzes, for each method n of each
class c, which of c’s subclasses override n with their own
// ValidM maps class C and method name N to the set of
// func ptrs implementing N for C and its subclasses
map> ValidM;
// computing ValidM at compile time
ValidM = new map>();
foreach (class c in all_classes()) {
ValidM[c] = new map>();
// all_method_names(c) returns all method names of class c,
// including any methods inherited from parent classes
foreach (string n in all_method_names(c)) {
ValidM[c][n] = new set();
// all_subclasses(c) returns c and all its subclasses
foreach (class sc in all_subclasses(c)) {
// static_lkup(sc, n) returns the func ptr
// implementing the method named n for an object of
// class sc, according to C++ dynamic dispatch rules
ValidM[c][n].add(static_lookup(sc,n));
}
}
}
Fig. 5. Our CHA which constructs ValidM at Compile Time. At compile
time SAFEDISPATCH performs CHA to construct ValidM, a table specifying
for each method of each class type which implementations may legitimately
be invoked at runtime. The SAFEDISPATCH compiler generates ValidM by
iterating over all the program’s classes. For each class c, SAFEDISPATCH
considers all the names of c’s methods, including those transitively inherited
from parent classes. For a given method name n, SAFEDISPATCH determines
which implementations of n may be invoked at runtime by iterating over
all of c’s (transitive) subclasses, including c itself. For each subclass sc
of c, SAFEDISPATCH determines statically which implementation of n an
sc object would invoke and adds it to the set of valid implementations in
ValidM[c][n].
implementation. Along with c’s (possibly inherited) implemen-
tation, the set of such method implementations are the only
valid callees that may be invoked by an object of static type c
when it calls n at runtime. This is made precise by the code
shown in Figure 5, which computes this information and stores
the result in a table called ValidM.
In practice, implementing CHA for large, complex applica-
tions like browsers poses a serious challenge, primarily due to
subtle interactions between the many C++ inheritance mecha-
nisms, e.g. access modiﬁers, templates, virtual vs. non-virtual
method properties, overloading, and multiple inheritance. To
manage this complexity, we build on top of the Clang++
module responsible for constructing C++ vtables at compile
time. Clang++ is an industrial strength compiler, capable of
handling the tremendous complexity that arises in real-world