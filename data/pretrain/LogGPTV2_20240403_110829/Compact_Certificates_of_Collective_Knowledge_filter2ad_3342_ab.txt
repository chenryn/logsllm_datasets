Vector Commitment Security: In our application, we need
vector commitment security to hold only when the committer
is trusted (which is a weaker security goal than when C can be
computed adversarially). We thus assume that (under appropri-
ate cryptographic assumptions) vector commitments provide
the following security property: if C was produced correctly
via Commit(A) for some A, then no adversary running in
time t on input A has probability greater than Inseccom(t) of
outputting (i, v, π∗
i ) =
T.
B. Non-interactive random oracle proofs of knowledge
i ) such A[i] (cid:44) v but ComVerify(C, i, v, π∗
As deﬁned in [10, §2.3], a non-interactive random oracle
proof of knowledge (NIROPK) consists of two algorithms, a
prover P and a veriﬁer V, which both have access to the same
oracle ρ : {0, 1}∗ → {0, 1}λ, chosen uniformly at random. Let
R be an NP relation with inputs x and witnesses w. The
functionality of a NIROPK is as follows: P(x, w) outputs
a proof π and V(x, π) outputs T (“true” or “accept”) or F
(“false” or “reject”).
The security notion is that of a proof of knowledge. It
is deﬁned by introducing a probabilistic polynomial time
knowledge extractor algorithm E who extracts witnesses from
an adversarial prover ˜P. Extractor E is allowed to run ˜P only
˜P), but may respond to random
as a black box (denoted E
oracle queries of ˜P however E chooses (i.e., to “program”
the random oracle).
Deﬁnition 1 ([10]). A pair (P, V) is a NIROPK with
knowledge error e for R if it satisﬁes the following:
• Completeness: if (x, w) ∈ R, then V(x, P(x, w)) = T.
• Proof of knowledge: there exists a knowledge extractor E
such that, for any x and adversary ˜P who with probability
δ (computed over the random choice of ρ) outputs π
acceptable to V(x, π), E
˜P produces w such that (x, w) ∈ R
with probability at least δ − e.
III. Defining Compact Certificate Schemes
Let Rcompcert be an NP relation with two-part
In this section, we deﬁne the syntax and security of compact
certiﬁcates schemes. Our deﬁnition is inspired by the deﬁnition
of a NIROPK system (Section II-B). We will, however, change
how the veriﬁer obtains inputs (in contrast to NIROPK, some
inputs will be provided committed, and some will be provided
by the prover).
inputs
(input, globalinput) and witnesses witness (for example,
for the signatures application describe in §I, input is an
attestor’s public key, globalinput is the message all the
attestors sign, and witness is the attestor’s signature). By
deﬁnition of NP relations, there is a polynomial-time algorithm
that checks if ((input, globalinput), witness) ∈ Rcompcert
(for example, veriﬁes the signatures).
An attestor is a pair (input, weight); let attestors be
the list of all potential attestors.
A compact certiﬁcate scheme for Rcompcert has two partici-
pants, a prover P and a veriﬁer V, who both have access to the
same oracle ρ : {0, 1}∗ → {0, 1}λ, chosen uniformly at random.
We assume P knows the list attestors, and V knows the
vector commitment Cattestors = Commit(attestors).
a
some
Let witnesses be
length
same
list
as attestors;
i,
all)
(but possibly not
∈
((attestors[i].input, globalinput), witnesses[i])
Rcompcert. Such i are called valid. Let provenWeight be a
number.
the
for
of
We will say that the tuple
(attestors, globalinput, witnesses, provenWeight)
is suﬃciently weighty if
attestors[i].weight > provenWeight .

i is valid
such
a
a
P
cert.
Given
produces
certiﬁcate
suﬃciently
to attestors;
weighty
On
tuple,
input
(Cattestors, globalinput, provenWeight, cert), V outputs
T (“true” or “accept”) or F (“false” or “reject”), to indicate
whether it can conﬁrm that the tuple is indeed suﬃciently
weighty. Note that V assumes that Cattestors was correctly
generated as a vector commitment
its
remaining inputs may be adversarial.
Deﬁnition 2. A pair (P, V) constitutes a compact certiﬁcate
scheme with knowledge error e if it satisﬁes the following:
• Compact
=
(attestors, globalinput, witnesses, provenWeight)
then for cert = P(x) and
is suﬃciently weighty,
Cattestors = Commit(attestors),
V(Cattestors, globalinput, provenWeight, cert) = T .
Moreover, the length of cert depends at most polylogarith-
mically on the length of the attestors list.
Completeness.
If
x
E
• Proof of Knowledge. There exists a knowledge ex-
tractor E (as deﬁned in Section II-B)
such that,
for any (attestors, globalinput, provenWeight), for
Cattestors = Commit(attestors), and for any adversary ˜P
who with probability δ (computed over the random choice
of ρ) outputs cert such that
V(Cattestors, globalinput, provenWeight, cert) = T ,
˜P produces witnesses such that
(attestors, globalinput, witnesses, provenWeight)
is suﬃciently weighty, with probability at least δ − e.
The knowledge error may be a function of the hash function
output length λ and the adversarial running time and number
of random oracle queries.
Note that multiple witnesses for a single entry in the
attestors list (e.g., multiple signatures by the same signer)
will not count multiple times, because the deﬁnition of
suﬃciently weighty given above counts the weight of each
attestor at most once.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
628
IV. Our compact certificate scheme Pcompcert
We now give a concrete instantiation of a compact certiﬁcate
scheme (Section III), which we call Pcompcert. For concreteness
and ease of exposition, we will describe our scheme for the
language of digital signatures. That is, input is a public
key, attestors is a list of pairs (pk, weight), globalinput
is a message M, witness is a signature of pk on M, and
the compact certiﬁcate establishes that the prover knows a
suﬃciently weighty set of signatures on M. The case of other
NP languages is the same, mutatis mutandis.
The ﬁrst idea of our scheme is to use techniques due
to Kilian [61] and Micali [76, 77]. In contrast to the CS
Proofs approach, which puts elements of a probabilistically
checkable proof in the leaves of a Merkle tree, in our scheme
the prover will associate each element of attestors (and the
corresponding signature, if known) with a leaf in a Merkle
tree. Applying a hash function (modeled as a random oracle)
to the root of this tree, the prover will determine which leaves
to reveal. The certiﬁcate cert will consist of the Merkle tree
root, the revealed leaves with their authenticating paths in the
Merkle tree (to convey the relevant signatures to the veriﬁer),
and vector commitment proofs produced by ComProve to
convey the relevant public keys and weights.
This idea is insuﬃcient by itself, however: we have not
described how the hash function picks which leaves to reveal.
The problem with picking leaves at random is that there could
be many low-weight leaves, and revealing those will do little to
convince the veriﬁer; revealing leaves without signatures is also
unhelpful. The key ingredient of our scheme is a mechanism
for choosing which leaves to reveal that chooses among only
the attestors that produced signatures and in proportion to
their relative weight. Importantly, this mechanism has very
low cost and cannot be gamed by the adversary.
At a high level, this mechanism works as follows. Let
signedWeight represent the total weight of all attestors
who contribute an attestation. We will partition the range
from to 0 to signedWeight into subranges; there will be
one subrange for each contributing attestor, with the length
corresponding to the attestor’s weight. The endpoints of
each participating attestor’s subrange will be committed in
the corresponding Merkle leaf; subranges for attestors who
contribute no signature will be empty. The hash function,
when applied to the Merkle root, will determine a point in
the range from 0 to signedWeight, and the prover will have
to reveal the leaf whose subrange contains that point. Given
suﬃciently many such reveals, the veriﬁer will be convinced,
with high certainty, that a large fraction of the range is covered
by valid leaves, because each random choice made by the
hash function falls into a covered subrange. This implies (by
the security of the Merkle tree) that the prover must know
signatures for attestors corresponding to a large fraction of
signedWeight.
A surprising feature of this approach is that the veriﬁer does
not need to check the correctness of the subranges claimed by
the prover—only that each individual revealed subrange is of
the correct length and equal to the weight of its attestor (and,
of course, that the attestor’s signature is valid). An adversarial
prover can arrange subranges however it pleases; in particular,
making subranges overlap only makes the adversary’s life
harder, because it becomes more diﬃcult to cover the entire
range given the valid signatures in the adversary’s possession.
We are now ready to proceed with the details of the protocol.
We will assume Hashrange outputs (nearly) uniform values
between 0 and range, excluding range itself (formally, we
need to have a fresh random oracle for each value of range,
which can be accomplished by encoding range unambiguously
into the hash’s input). We will assume that V wants to achieve
knowledge error approximately 2−k for some k, and that the
adversary runs in time at most t and makes at most Q = 2q
random oracle queries. These parameters determine how many
Merkle leaves cert will contain (see Section V-B).
A. P: Creating the certiﬁcate
A prover P who wishes to prove that elements of attestors
least provenWeight have signed a
with total weight at
message M runs the following algorithm:
1) Set signersList to empty and signedWeight to 0.
2) Obtain signatures of attestors until signedWeight >
provenWeight, where signedWeight is computed as
described immediately below.
For each signature obtained,
• Find the location i of the attestor who created it
in
the attestors list and verify that i (cid:60) signersList
(otherwise reject this signature as a duplicate and continue).
• Verify the signature under attestors[i].pk (this is done to
prevent a denial of service attack, in which a bad signature
could cause the prover to create an invalid certiﬁcate—see
§VIII-A). If veriﬁcation succeeds, set
signedWeight = signedWeight+attestors[i].weight
and add i to signersList. Otherwise, reject this signature.
For reasons discussed below, higher signedWeight will
result in a smaller compact certiﬁcate, so it’s good to obtain
more. In fact, as discussed in Section IV-B, some veriﬁers
may choose to reject certiﬁcates that are too long, in which
case the prover will need to increase signedWeight (by
obtaining more signatures).
3) Initialize a list sigs having the same length as attestors.
Each entry in sigs consists of a triple (sig, L, R), which
is computed as follows. For each i starting with 0, ﬁrst set
sigs[i].L = sigs[i − 1].R
(with the base case sigs[0].L = 0). Next, if i
signersList, set
is in
sigs[i].R = sigs[i].L + attestors[i].weight
and let sigs[i].sig be the signature on M under
attestors[i].pk that the prover obtained in the previous
step. Otherwise, set sigs[i].R = sigs[i].L and leave
sigs[i].sig empty.
629
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
In addition, we deﬁne (but do not store)
sigs[i].weight
def= sigs[i].R − sigs[i].L .
Notice that the R value of the last entry in sigs will be
equal to signedWeight.
4) Compute Rootsigs as the Merkle root of a Merkle tree
whose leaves are the entries of sigs.
5) Create a function IntToInd that allows eﬃcient lookups
from a value coin, such that 0 ≤ coin < signedWeight,
to the unique index i such that sigs[i].L ≤ coin <
sigs[i].R. (Note that this function can be easily imple-
mented via a binary search on the L values of the sigs
array.) We will denote such i via IntToInd(coin).
6) Create a map T as follows. First, deﬁne
(cid:25)
(cid:24)
numReveals =
k + q
log2 (signedWeight/provenWeight)
.
(1)
Then, for j ∈ {0, 1, . . . , numReveals − 1}, let
Hinj = (j, Rootsigs, provenWeight, M, Cattestors) ,
coinj = HashsignedWeight(Hinj) ,
and
ij = IntToInd(coinj) .
j
leaf,
If T[ij] is not yet deﬁned, deﬁne T[ij] to consist of the
four-tuple (s, πs, p, πp) containing:
• the tuple s = sigs[ij] (without the R value),
• the Merkle authenticating path πs to the ith
• p = attestors[ij], and
• πp = ComProve(ij, attestors).
The resulting compact certiﬁcate cert consists of Rootsigs,
signedWeight, and the map T, which has at most
numReveals entries, but will have fewer if diﬀerent iterations
of Step 6 select the same i value (see Figure 7, Section VII).
B. V: Verifying the certiﬁcate
The veriﬁer V knows Cattestors = Commit(attestors),
and receives the message M,
the value provenWeight,
and the compact certiﬁcate cert consisting of Rootsigs,
signedWeight, and a map T with up to numReveals
entries, each containing the four-tuple (s, πs, p, πp), where
numReveals is deﬁned in Equation (1) (Section IV-A).
If signedWeight ≤ provenWeight, then V outputs False.
(V may choose to require a higher signedWeight in order to
avoid having to verify certiﬁcates that are too long, for example,
to protect itself against having to do too much work; this may
also be accomplished simply by limiting the maximum size
of the map T that V will accept.) Otherwise, for each entry
i such that T[i] is deﬁned (as (s, πs, p, πp)), V performs the
following steps to validate it:
• check that πs is the correct authenticating path for the ith
leaf value s with respect to Rootsigs;
• check that ComVerify(Cattestors, i, p, πp) = T; and
• check that s.sig is a valid signature on M under p.pk.
If any of the above checks fails, V outputs False. Otherwise,
for j ∈ {0, 1, . . . , numReveals − 1}, V computes
Hinj = (j, Rootsigs, provenWeight, M, Cattestors)
coinj = HashsignedWeight(Hinj) ,
then checks that there exists i such that T[i] is deﬁned and is
equal to (s, πs, p, πp) with s.L ≤ coinj < s.L + p.weight. If
no such i exists, then V outputs False.
and
If all of the above checks pass, then V outputs True.
Otherwise, V outputs False.
C. Optimizations
• To save space and reduce the cost of computing Rootsigs,
the entry sigs[i] may be left entirely empty for i (cid:60)
signersList, and the R value of each entry in sigs need
not be stored (since it equals the L value of the next entry).
• Computing numReveals precisely in the prover and veriﬁer
algorithms requires high-precision arithmetic, which may
be slow and diﬃcult to implement. Instead, we propose (in
Appendix B) and implement (in Section VII) an approximate
calculation of numReveals.
• Combining multiple Merkle paths into a single subtree will