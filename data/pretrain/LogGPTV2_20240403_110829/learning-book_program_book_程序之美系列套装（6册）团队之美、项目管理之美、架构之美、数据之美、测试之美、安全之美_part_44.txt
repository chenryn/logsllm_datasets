程序员们对这套东西非常熟悉，但是在编程领域之外，知道的人就
没有那么多了。类似地，那两个转换程序一一一个用于网页输出，
一个用于打印输出，都是功能强大且非常灵活的工具，但是有点难
以使用，对非程序员来说更是如此。仅仅为了安装这些转换程序，
就必须首先在计算机上安装各种各样的其他支持程序。整个过程在
任何环境下都很困难，不过如果计算机上运行的是类似UNIX的操作
系统（再次说明，在程序员中比较普遍，在其他人中间就不那么普
遍了），难度就要小一些，而在MicrosofWindows上难度就要大一
些。
240
---
## Page 242
如果我是唯一的作者，这样做是没有问题的。毕竞我是个程序员，
对那些工具已经相当熟悉了，由于我在开始写书时已经在上面投入
了很多工作量，现在再额外花点时间学习一些工具是非常值得的。
我知道从长期来看是会有回报的，而且我已经得到回报了。
但是参加翻译的志愿者的情况却完全不同。他们并不全都是程序
员，大部分人以前都没有使用这些工具的经验，所以在并始的时候
曲线，真是再糟糕不过了）。此外，每种语言的翻译版本都是由八
位译者完成的，每个人学习工具的时间和实际工作时间的比例比我
的情况要糟糕：每位译者花费和我一样多的学习成本，但是每位译
者并没有写整本书，所以无法摊薄学习成本。译者们都有一种特定
专长—能够而且愿意把英文用改写为另外一种语言，但是他们发
现自已需要完成一项与那个专长完全无关的任务：学习一整套新工
具，一套他们这辈子在其他地方可能根本不会再去使用的工具。
令人奇怪的地方不在于他们之中有一些叛逆者，而是我们没有得到
多少有用的翻译内容。实际上我们确实得到了一些，在写作本文的
时候，德文版的翻译已经完成了初稿，日文版完成了大约80%，西
班牙文版完成了大约60%等。（法语版是一个很有意思的情况，我
们等一会几会讲到。）但是看到译者们不得不仔细研究这么多东西
后翻译才能进展到这个程度，我在想，如果我没有给这个过程带来
这样高的额外工具开销，他们可以多翻译多少东西呢？到
http://producingoss.com/translations.html#guidelines看看我写的翻译指
南就可以知道参与者需要付出多大的工程量了。（本来我打算在这
里展示一下这些指南，但是占的地方太多了，从这一点就能看出那
些额外的工作有多少。）
我应当给他们什么
很遗憾，在很长一段时间内我都没有意识到上述的系统是多么难
用。我知道它不够理想，但是很难搞清楚为什么没有一个译者能够
做到他所说的那么多工作——而且我根本没有注意到有一位译者在
开始时没有加入志愿者行列是因为他被需要的工具技能给吓住了。
不过最后，我们从法国收到了一个让人醒悟的邮件：
发件人：BertrandFlorat
主题：法文版翻译
241
---
## Page 243
收件人：ProducingOSS翻译者邮件列表
日期：2008年2月17日16:54:32+0100，星期日
Karl你好：
我们想告诉你一声，我和Etienne迁移到了Framalangwiki上来完成本
书的翻译。在翻译完成后（现在大概完成了90%），我们计划把所
有内容都移植到docbook格式上。
我想如果能够把法语翻译版本从http://www.producingoss.com/fr/链接
到http://www.framalang.org/wiki/Producing_Open_Source_Software就
好了，这样人们现在就能阅读基本已经完成的翻译了，而且还能吸
引新的译者加入。
你认为怎么样？祝好
Bertrand
换句话说，法文版的译者已经决定绕开我为了帮助他们翻译而建立
的技术基础结构。他们把所有的内容都复制到了wiki上，这样就可
以在一个方便、熟悉的环境上进行编辑工作。等完成后[L41，他们
计划把翻译好的内容再移植回XML。
我得说这是对我的基础结构的强烈控诉。如果看看Framalang
wiki(http://www.framalang.org/wiki/Producing_Open_Source_Softwar
e），我实在是无法去怨他们。在协调译者这件事情上，Framalang
比我建立的那个临时系统要适合得多。在Framalang上，原文和译文
用不同的颜色并排显示。有几个特殊的功能用于跟踪谁负责什么部
分，用于给出反馈，对常见术语给出统一译法的列表，标记哪些工
作还没有完成等。当然，所有这些事情也都能在我那个临时系统中
完成，但差别在于，我那个系统交给译者使用时不是免费的：团队
不得不一次又一次地发明轮子，而Framalang则直接给出了车钥匙
（参见下图）。
242
---
## Page 244
+1
Producing Open Source Software
Framalang
Framalang翻译wiki
Bertrand的声明激发了另外一位译者发出了对我自制的基础结构的
不满：
发件人："ManuelBarkhau"
主题：Re：法文版翻译
收件人：PI:EMAIL
抄送人：PI:EMAIL
日期：2008年2月17日17:21:35+0100，星期日
回复：PI:EMAIL
你好，我的朋友们：
你能不能再发一个邮件，介绍一下你的经验，对比一下wiki格式和
Subversion的差异。除了主要的译者外，你们还有多少参与者？有
多少译者加入了你的工作，他们的工作质量怎么样。
243
---
## Page 245
对于当前这种格式，我特别想知道读者的统计和反馈情况。
祝好
Manuel
看到这样的列表中的通信让我想起了我和其他一些译者进行的私人
对话。他们当中有很多人在使用XMIL时都有问题。即使译者本人基
本上能够很好地理解格式，他们的编辑工具也常常不能很好地处理
这些格式。他们的字处理器（特别是MicrosoftWindows）有时候会
弄乱XML。这是我从未遇到过的事情，但这并不难想象：这种格式
当初是我选择的，所以很自然，在我的工具中没有问题。
回想起来，我可以把我和一些沮丧的译者之间的对话与他们的离开
联系起来。他们之中有儿个人实际上完全停止了翻译。当然，在任
何由志愿者组成的小组中，有一些流动都是正常的，但是重要的是
要注意到他们的离并是因为某个特定原因。在我们这件事中，因为
我个人对工具很适应，所以很长时间都没有意识到他们积极性降低
并转到其他方面了。结果我极大地降低了不知多少志愿者的十劲：
很多已经开始的翻译到现在也没有结束，部分原因是因为我给他们
强加了一套笨拙的工具。
结论
从前面儿个例子可以提炼出协作工具的儿个原则：
：好的工具应当采用合适的基本信息单元。
例如，对于提交邮件，基本单元是变更（或者是“变更集”）。如果
工具不能将每个变更都看作是一个逻辑单元，而是将它分在多个界
面访问点（在本例中，是放到了儿个邮件中），那么人们就不愿意
审查变更了。
采用合适的基本单元，好处并不仅仅是让各个工具更好用。它还提
高了协作能力，因为团队成员在讨论一件事情的时候，能够使用共
同的词汇。
：如果你看到必须做的任务被一再拖延（“我争取在这个周末弄
好....."），这常常表明工具强制人们对每个任务都要承担更多的
义务，这是他们不适应的。在修复工具后这种拖延可能就消失了。
244
---
## Page 246
在评估贡献者的工作时，Contribulyzer对于让人感兴趣的工作没有
带来任何帮助：毕竞，人们还是需要复查实际的代码变更。但它删
除了让人不感兴趣的部分，也就是手工在修订控制日志中搜索贡献
者的变更。虽然在大多数情况下这部分工作都比实际评审工作量要
低，但是人们想到这件事情就觉得很气铵，积极性随之降低，部分
原因是由于它太枯燥了。
去掉它，换成一个令人愉快的、轻便的界面，意味着团队成员在决
定评估贡献者的时候不需要再情绪激动地对一项重大工作承担责任
了。相反，它变得就像是在电子铅笔力中削铅笔：在开始任务时没
有工作量，你可以在中间停止，以后在需要的时候可以再恢复，想
削多少支铅笔就削多少支，不会有成倍的额外成本。
：当团队开始绕开你向他们提供的工具时，就要注意了：这表明你
提供的工具可能不好。
当然，并不总是这样：可能是人们在并始的时候没有认识到工具带
来的好处，需要接受培训。但即使这样，工具也至少要负部分责
任，因为工具在开始的时候就没有清楚地体现出好处来。到了最
后，人们全都使用其他替代工具了，此事你应当出来调查一下，是
什么原因促使他们做出了那样的决定。我那本书的法文译者在付出
了可观的启动成本后逃到了一个基于wiki的界面，这就是一个很明
显的信号，说明我提供的界面有问题。
，在团队成员的状况发生变化时，司能需要对工具做出改变。
对于各章节都是XML格式的书，只要“团队"是由程序员组成并且以
前使用过版本控制的XML文件一—也就是说如果团队中只有我一个
人，那我建立的那个工具就是好的。但是在有新人加入的时候，简
单地把现有的框架进行扩展是不够的。需要从头开始考虑工具环
境。
：部分自动化常常已经足以产生差别。
协作工具的设计者喜欢100%的解决方案：如果一个东西能够完全实
现自动化，那他们觉得就应当完全实现自动化。但实际上，这种工
作并不总是值得投入的，一个混合的模型常常是更好的选择。如果
只用10%的工作就得到90%的收益，那么做这么多就可以了，记
住，团队如果清楚地认识到收益，他们是会去弥补这个差距的。比
245
---
## Page 247
如说，Contribulyzer完全依赖于人们在编写日志信息遵循将某条变
更归功于某人的惯例。把这些惯例教给人们是需要花费时间和精力
的。但是替代方案一—一个完全自动化的、在邮件列表信息和提交
之间建立联系的智能项目观察器，将需要花费巨大工作量，而且还
不能保证完美的可靠性。
实际上，混合工具的一个常常被忽略的好处是：因为它们让人们与
数据在多点保持联系，这类工具已经得到证明，比所谓的全自动化
工具更为可靠。好工具的关键并不是说不再需要人们，而是让人们
更快乐。（有些人可能说“可以让他们效率更高”，但是一个低效的
团队很滩快乐起来，你肯定不希望团队有效率但是不快乐。）
虽然可以从好的工具中获得收益，但我的经验是大多数团队的实际
工具使用情况都落后于他们潜在能达到的使用情况。也就是说，大
多数团队都无法利用潜在的、巨大的乘数效应。我想这是因为大多
数人一直都相信两个偏见。
一个偏见是尝试新事物的成本太高。由于很多新事物带来的收益都
很小，所以小组对于采用新工具一般是比较挑剔的，因为改变习惯
所带来的额外负担可能会对生产率和乐趣形成拖累。（我不是说这
个偏见没有道理。实际上，它有广泛的群众基础，包括我自己也是
这样。）
另外一个偏见不太容易察觉。因为成功的工具很快会变成第二本能
进入到脑海中，直到它们被认为是“完成工作的一部分”——人
们会很容易忘记工具在引入时的作用。这种情况的例子不难找，首