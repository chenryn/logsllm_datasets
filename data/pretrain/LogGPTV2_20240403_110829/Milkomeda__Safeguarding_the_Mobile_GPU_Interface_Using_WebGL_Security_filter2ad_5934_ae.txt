execute code in a different process. Third, an attacker may try to
trigger the driver vulnerabilities through the OpenGL ES API calls.
Milkomeda leverages WebGL’s security checks to stop these attacks.
Any such attack that is successful against Milkomeda is also suc-
cessful against the multi-process architecture. Fourth, an attacker
may try to leverage a vulnerability in the Trusted Computing Base
(TCB) of Milkomeda in order to bypass the security checks. The
TCB of Milkomeda is the operating system kernel as well as all the
code inside the shield space. This is almost a subset of the TCB
in the multi-process architecture, which does not need the small
amount of kernel code needed to implement the shield space but
requires more code in the GPU process to support composing of
the browser’s UI as well as IPC and shared memory code used for
communication. Therefore, most such attacks are also effective
against the multi-process architecture.
We evaluate the effectiveness of Milkomeda in preventing vul-
nerability exploits. We have investigated all 64 CVEs in Table 6. We
managed to find enough information on 45 of them for analysis
(including patches, source code, and PoC). For these 45, we have
confirmed that Milkomeda prevents all of them. This is because all
of these CVEs directly invoke the GPU device driver APIs, which
are prevented in Milkomeda.
With these CVEs neutralized, an attacker can try to use the
OpenGL ES API to mount attacks. Similar attacks have been at-
tempted through the WebGL APIs (which is quite similar to the
OpenGL ES API) [63]. Since WebGL checks are designed to protect
We note that the WebGL security checks may miss some zero-
day attacks [63]. However, these checks provide two benefits. First,
they prohibit attacks using known vulnerabilities in the GPU driver.
Second, they limit unknown attacks due to the additional state
verification. The WebGL security checks limit the arguments of the
graphics APIs (e.g., they return early if an argument is not valid
per OpenGL ES specification). Some vulnerabilities are caused by
invalid arguments that violate the OpenGL ES specification. There-
fore, constraining API calls prevents invalid OpenGL ES API inputs
and thereby stops some, but not all, unknown attacks. Milkomeda is
therefore a mitigation, comparable to ASLR or stack canaries, that
stops some attack vectors and makes other attack vectors harder.
8.2 Graphics Performance & CPU Usage
We measure the mobile graphics performance using the achieved
framerate, which determines the number of frames rendered in one
second. We use 5 mobile app benchmarks in our evaluation. We
choose these apps as they focus on GPU-based graphics and they
span a range of apps with simple to complex graphics operations.
Figure 8 shows snapshots of these benchmarks (B1-B5). We derive
the fifth benchmark (B5) by modifying B4 to render 64,000 (403)
cubes rather than 27 (33). We run each benchmark six times. We
discard the first 100 frames in each run to eliminate the effect of
initialization in the measurements.
Figure 9a shows the framerate in our benchmarks. It shows
the measurement for three different configurations: normal app,
normal app + checks, and Milkomeda. The first configuration is
the performance of the benchmarks using an unmodified graphics
stack, i.e., the state of the art. The second configuration represents
the performance of the security checks without the shield’s space to
protect their integrity. This configuration is not secure. Yet, it allows
us to measure the overhead needed for evaluating the security
checks on OpenGLES APIs. The third configuration is Milkomeda,
in which not only the security checks are evaluated, but also the
shield space is used to protect the integrity of the checks.
The results show the following. First, for benchmarks with 60
FPS framerate, Milkomeda manages to maintain the 60 FPS graph-
ics performance. Note that in Android, framerate is capped at a
(a)
(b)
Figure 9: (a) Graphics performance. (b) CPU utilization. In both of the figures, B1 to B5 represent the five benchmarks shown
in Figure 8. Each bar in the figure shows the average over six runs and the error bar shows the standard deviation.
Figure 10: Execution time of several OpenGL ES API calls. Each bar in the figure shows the average over all invocations of the
API in three runs and the error bar shows the standard deviation.
maximum of 60 FPS, which is the display refresh rate. Therefore,
for these benchmarks, Milkomeda achieves the maximum graphics
performance. Second, for a benchmark with lower FPS, Milkomeda
achieves a close-to-native performance. Overall, the results show
that Milkomeda does not impact the user experience.
However, the extra security in Milkomeda comes at a cost: higher
resource usage. Figure 9b shows the CPU utilization of the system
when executing the same benchmarks. It shows that Milkomeda
increases the CPU utilization from 15% (for normal execution) to
26%, on average. We note that this additional CPU utilization is
not prohibitively high. However, if the system is highly utilized,
e.g., by various background tasks, then the graphics performance
gets affected more significantly in Milkomeda compared to normal
apps.
8.3 Comparison with the Multi-Process Design
As mentioned in §2.1, browsers deploy the WebGL security checks
in a separate process from the web app process to protect the
integrity of checks. To compare the overhead of this approach with
Milkomeda, we implement such a multi-process architecture for
mobile apps. That is, in the mobile app process, we forward the
OpenGL ES API calls over IPC (using sockets) to another process
for execution. We also use shared memory to pass the data.
Our multi-process prototype does not support all OpenGL ES API
calls (it supports around 30 of them) since supporting each API call
requires us to understand the semantics of the parameters and write
the proper serialization and deserialization code for it. Therefore,
we report the execution time of a few OpenGL ES API calls that
we do support (average of three runs of the experiment). Figure 10
shows the results. As can be seen, the multi-process architecture
increases the execution time of these API calls significantly (an
average increase of 440% compared to Milkomeda).
9 RELATED WORK
9.1 Graphics Security
Sugar [63] enhances WebGL’s security. It uses virtual GPUs avail-
able on modern Intel GPUs to fully sandbox the WebGL graphics
stack all the way down to the GPU device driver. A similar ap-
proach can be used to safeguard the graphics stack used by apps.
Unfortunately, mobile GPUs do not support virtualization. There-
fore, in Milkomeda, we attempt to improve the mobile graphics
security by leveraging existing software-based security checks in
web browsers.
SchrodinText [25], VButton [42], and Truz-Droid [65] protect
integrity or confidentiality of content shown on the mobile display.
SchrodinText achieves this by modifying the operating system
graphics stack to perform most of the text rendering stages without
access to the text to be displayed. It uses the hypervisor and ARM
TrustZone secure world to display the text. VButton and Truz-Droid
use the ARM TrustZone secure world to control the display and
 10 20 30 40 50 60 70 80 90 100B1B2B3B4B5Framerate (FPS)Normal AppNormal App + ChecksMilkomeda 0 10 20 30 40 50 60 70 80B1B2B3B4B5CPU Utilization (%)Normal AppNormal App + ChecksMilkomeda 0 100 200 300 400 500 600 700 800glDrawArraysglClearColorglUseProgramglVertexAttribPointerglEnableVertexAttribArrayglGetAttribLocationTime (microseconds)1289.7Normal AppNormal App + ChecksMilkomedaMulti-Processtouchscreen and use them to show content to the user securely,
collect inputs, and verify them. In all of these systems, the operating
system is assumed to be untrusted whereas the user and the app
are trusted. Unlike these systems, Milkomeda does not modify
the existing operating system graphics stack. It assumes that the
operating system is trusted but the app is not. It then safeguards
the graphics stack against malicious apps.
AdSplit [54], AdDroid [48], and LayerCake [52] isolate the code
used to render an embedded UI component, e.g., ads. Their goal
is to protect the app from untrusted embeddings. In contrast, in
Milkomeda, we protect the system from untrusted apps, which try
to exploit the vulnerabilities in the GPU device driver.
9.2 Device Driver Vulnerabilities & Mitigations
The core of most vulnerabilities in the graphics stack is the GPU de-
vice driver. Device drivers are known to have many vulnerabilities,
more than the rest of the kernel [34, 46, 67]. Other related work tries
to mitigate vulnerabilities in device drivers. Microkernels execute
the device drivers in user space daemons [36]. Microdriver [39] and
Glider [26] move parts of the device drivers to user space. Nooks
safeguard against faults in device drivers using lightweight protec-
tion domains in the kernel [56]. SafeDrive does so using language
techniques [68].
In Milkomeda, we target existing systems that unfortunately do
not leverage the aforementioned mitigation techniques. Instead, our
observation is that WebGL security checks have been successfully
deployed. Therefore, we try to leverage these solutions that can
mitigate the GPU device driver vulnerabilities without requiring
any modifications to the device drivers themselves and hence are
easily applicable to various platforms.
9.3 Operating System-level Access Control
Milkomeda employs a light-weight syscall filtering mechanism to
limit the process’s access to the GPU device driver to only the code
within the shield space. This is a form of access control enforced by
the operating system. Initial related work started with system call
vetting based on ptrace but quickly moved towards a kernel-level
caching mechanism [49]. AppArmor [15] enforces a configurable
system call policy on a per-process basis. SELinux [10] hardens
kernel and user-space and restricts interactions between processes
and the kernel without enforcing an explicit system call policy.
Capsicum [61] enforces capabilities on a per-process basis for Unix
systems. Seccomp is an efficient, kernel-based vetting mechanism
that evolved out of all these proposed systems and enables per-
process system call vetting [53]. These systems are restricted to
per-process checks with some context of the application. In contrast,
our access control mechanism enforces a policy for a subset of code
in the process address space.
CASE enforces isolation between modules of a mobile app [69].
CASE’s approach can be used to isolate some libraries within the
process. However, on its own, CASE is not able to restrict access
to the GPU device driver to only a subset of the code. Moreover,
CASE leverages information hiding to conceal the handlers of these
modules and hence prevent jump to arbitrary locations within the
modules. In contrast, Milkomeda leverages a hardware-protected
shield space to achieve this.
9.4 Process-Level & Thread-Level Partitioning
Several related work evaluates process-level partitioning at dif-
ferent levels of granularity. Related work primarily focuses on
separation policies and inference of a separation policy, not the
separation enforcement mechanism. Provos et al. [50] provide a
case study on how to break the OpenSSH server into smaller pro-
tected components (similar to how QMail compares to sendmail).
Privtrans [32] automates the privilege separation process through
an inference process. Wedge [31] extends Privtrans with capabili-
ties while Salus [55] provides dynamically adjustable enforcement
policies. Dune [30] leverages VT-x extensions to reduce separation
overhead on per-page basis, improving performance of separation
mechanisms. All these mechanisms share the limitation that they
cannot handle multiple threads in a single compartment.
Recently, process-level partitioning has been extended with
thread-awareness. Arbiter [60] provides fine-grained synchroniza-
tion of memory spaces between threads but incurs prohibitive over-
head. SMV [41] leverages a page-based separation scheme to enable
fast compartment switching on a per-thread basis and provides a
fine-grained API.
Light-weight Contexts [43] create independent protection units
within a process. SandTrap uses two sets of page tables for a process
to provide different address spaces for its threads [51]. In contrast,
Milkomeda’s shield space provides a protected space for graphics
code to execute and limits the process’ access to the GPU device dri-
ver to only this space. While the shield space share some underlying
techniques with these systems (e.g., using a syscall to change the
address space and using separate page tables for a process), shield
is specialized and designed for enforcing graphics security check
integrity. Specifically, using two first-level page tables to efficiently
implement an in-process shield space and enabling it to securely
control and vet the accesses of threads to the GPU driver is the
novelty of the shield’s design. IMIX provides hardware support for
in-process memory isolation [37]. In contrast, Milkomeda’s shield
space is designed for existing hardware.
9.5 Control-Flow Hijacking Mitigation
In Milkomeda, we protect the control flow of the execution of the
security checks by running them in an isolated shield space. An
orthogonal approach to protect the control flow inside a process
is control-flow integrity (CFI) [24, 33]. CFI restricts control flow
through indirect control flow transfers to well known and valid tar-
gets, prohibiting calls to unaligned instructions or indirect function
calls to invalid targets. The set of allowed targets depends on the
underlying analysis but is at least the set of valid functions. Even
the most basic CFI policy protects against an attacker hijacking the
control flow past the check at the beginning of a function. While
most existing CFI mechanisms are static and the set of valid targets
is tied solely to the code location, some recent CFI mechanisms
embrace context sensitivity. PathArmor [57] and PittyPat [35] track
path constraints, increasing precision of CFI mechanisms to path
awareness. Protecting applications against control-flow hijacking
is orthogonal to separating two execution contexts. CFI ensures
that bugs inside a context cannot compromise control flow, while
Milkomeda protects a privileged kernel component by leveraging
existing security checks from a different domain.
9.6 Fault Isolation
Fault isolation restricts interactions between (at least) two compart-
ments in a single address space. Software fault isolation [59] and
Native Client [64] leverage binary rewriting and restrictions on bi-
nary code to separate compartments and control interactions. Mem-
Trace [47] executes x86 programs and additional security checks in
an x86_64 process, protecting checks and metadata by moving them
past the 32-bit address space of the original program. Limitations of
these existing solutions are performance overhead and the need of
a priori rewriting and verification to ensure the encapsulation along
with restrictions on the address space. Milkomeda is oblivious to
the unprotected compartment and shield simply places a secure
compartment inside the untrusted process and controls interac-
tions between the untrusted part of the process and the trusted
component.
Instead of using a software-based mechanism, hardware-based
fault isolation enables separation at low performance overhead.
The early work on flicker [45] leverages a Trusted Platform Module
(TPM) chip to enforce strong isolation. TrustVisor [44] increases the
TCB by moving from the TPM chip to the hypervisor and leveraging
a software TPM to minimize overhead. Several architectures such
as Loki [66], CODOM [58], or CHERI [62] leverage some form of
tagged memory to enforce strong separation and isolation at low
overhead by overhauling the underlying memory architecture. All
these systems share that they require heavy hardware changes.
Milkomeda is geared towards existing hardware and does not need
any new CPU or memory features.
Milkomeda is also related to solutions that sandbox untrusted
code. For example, Boxify [29] and PREC [40] sandbox Android