Now we present the method of detecting the exact sequence number
(i.e., RCV .N XT , the lower boundary of the server’s receive win-
dow) based on the previous inferred results. The attacker can forge
multiple ACK packets with a constant acknowledgment number
ack_challenдe in the challenge ACK window and the specified se-
quence number in each ACK packet set to seq_acceptable − i, where
seq_acceptable is an acceptable sequence number inferred previ-
ously. Then the attacker impersonates the victim client to send
these forged ACK packets to the server. In the beginning, the server
will be triggered to send challenge ACK packets at a rate of one
packet per 500 ms due to the rate limit of challenge ACK, so the trig-
gered challenge ACK packets will incur regular increments to the
shared IPID counter. However, once the specified sequence number
seq_acceptable − i reaches RCV .N XT (the lower boundary of the
server’s receive window), the server will switch to send duplicate
ACK packets, which is not enforced by any rate limit. Thus, the
shared IPID counter will have a jitter4, and the attacker can observe
this jitter and then detect the exact sequence number. The detecting
procedure has no side effects, e.g., resetting the connections, on the
connections.
6.5 Detecting Acceptable ACK Number
Once an acknowledgment number ack_challenдe in the challenge
ACK window is identified, the attacker can also detect the boundary
of the challenge ACK window by sending multiple probing ACK
packets and then observing the shared IPID counter, similar to
detecting the lower boundary of the server’s receive window. The
forged probing ACK packets are specified with a constant sequence
number seq_acceptable, and the acknowledgment number of each
ACK packet is set to ack_challenдe − i. In turn, the attacker sends
these forged ACK packets to the server. Challenge ACK packets will
be triggered until ack_challenдe − i reaches the lower boundary of
the challenge ACK window. Once this boundary is detected, then
SN D.U N A can be easily inferred, i.e., adding 2G to the detected
boundary. SN D.U N A is in the acceptable ACK range. When all
the data sent earlier has been acknowledged, SN D.U N A equals
SN D.N XT . Instead, if the server has an amount of data to be sent
to the client, SN D.N XT can also be inferred by adding the typical
size of the send window to SN D.U N A, e.g., 16384 octets in Linux
by default.
7 IMPLEMENTATION AND EVALUATION
We first conduct experiments to show feasibility of identifying
victim clients on the Internet via hash collisions. Next, we conduct
two case studies to evaluate the effectiveness and efficiency of our
attacks. By launching the TCP connections DoS attacks, an off-path
4 The increments to the shared IPID counter become 20 per 500 ms in our experiments,
instead of 1 per 500 ms.
8
attacker can reset a TCP connection in 155 seconds on average. By
conducting the TCP connections manipulation attacks, an off-path
attacker can hijack the session and manipulate web traffic and BGP
routing table within 215 seconds.
Ethical considerations. In order to avoid causing real damages or
negative impacts on the Internet, we choose not to directly attack
real users and their hosts. All the hosts involved in the experiments
are our machines. We evaluate the impacts of our off-path TCP
attacks on the Internet, e.g., measuring Alexa top 100k websites to
identify potential victim servers that are vulnerable to our attack.
However, we do not exploit the vulnerability of these web servers
for real attacks.
7.1 Identifying Victim Clients
We show two scenarios of identifying victim clients via hash col-
lisions after downgrading the server’s IPID assignment. First, we
show how to detect potential victim clients using one IP address.
Second, we illustrate that the attacker can attack arbitrary victim
clients if having enough IP addresses.
Experimental Setup. Two types of hosts are used in this experi-
ment. A server listening on port 80 and waiting for TCP connection
requests is equipped with Ubuntu 18.04 (kernel version 5.5) with a
prefix of 152.136.0.0/16. Attack machines locate in different posi-
tions with independent IP addresses. We use these IP addresses to
detect victim clients to the server. The attack machines are equipped
with Ubuntu 18.04 (kernel version 4.15) and are able to send packets
to the server with spoofed IP addresses.
Results with One Attacker IP Address. When having only one
IP address, an attacker can detect more than 2 million victim clients
to the server. In this scenario, we deploy one attack machine and as-
sign IP address from a target IP list, which contains several prefixes
owned by different organizations. The attack machine clears the DF
flag of the server’s TCP packets to IP addresses in these prefixes via
forging ICMP “Fragmentation Needed” messages, and then it scans
the target prefixes to identify potential victim clients that share
the same hash-based IPID counter with the attack machine on the
server. The attacker terminates the scanning process after scanning
all IP addresses within the prefix or reaching the time limit (30
minutes in our experiment). The experimental results are shown in
Table 1. By using only one attack machine, the attacker can detect
a considerable number of potential victim clients. For instance, the
numbers of victim clients that collide with the attack machine are
179, 156, and 121 in the prefixes of 3.208.0.0/12, 101.80.0.0/12 and
50.16.0.0/14, respectively. It takes 14.0 seconds on average to detect
a potential victim client. Average outbound traffic of the attack ma-
chine is 125.14 KB/s (i.e., around 584 packets/s). Thus, it is difficult
to detect the malicious probing, e.g., by leveraging network traffic
monitoring systems.
Results with Multiple Attacker IP Addresses. When the at-
tacker has multiple IP addresses, it aims to attack an arbitrary client
to the server using these IP addresses. After selecting the target
client, the attacker clears the DF flag of the server’s TCP packets to
the client by forging an ICMP “Fragmentation Needed” message.
Then, the attacker detects addresses in its address pool to find a
correct one that collides with the target client, i.e., sharing the same
hash-based IPID counter. In this experiment, we select different
(a) Empirical CDF of time cost
(b) Empirical CDF of the number of attacker IP addresses
Figure 5: Empirical CDF of time cost and the number of attacker IP addresses needed to detect a hash collision.
Table 1: Detecting victim clients using one IP address.
Prefix
Owner Prefix
Location Victim
clients
eBay
Yahoo Japan
Google
Tencent
Facebook
Alibaba
Amazon
209.140.128.0/18 US, CA
JP, TKY
124.83.128.0/17
US, CA
74.125.0.0/16
CH, BJ
162.14.0.0/16
US, CA
157.240.0.0/16
47.56.0.0/15
CH, HK
US, WA
50.16.0.0/14
CH, SH
China Telecom 101.80.0.0/12
3.208.0.0/12
USA, VA
Amazon
4
9
23
27
33
57
121
156
179
Time
(min)
1.32
2.70
5.56
5.54
5.53
11.3
22.9
30.0
30.0
target clients and repeat the detecting process 200 times. The empir-
ical cumulative distribution function (CDF) of the time cost and the
number of required attacker IP addresses are shown in Figure 5. For
an arbitrary target client, the average time cost to detect a correct
IP address in the attacker’s address pool is 15.4 seconds, and the
number of IP addresses needed is 1,837 on average. Furthermore,
after spending 24 seconds to check 3,000 addresses, the attacker
has a probability of 80.0% to identify a correct IP address that can
be used to attack an arbitrary client. The measured probability is
higher than the theoretical one, i.e., 1 − (1 − 1/2048)3000 ≈ 76.9%.
To evaluate the threats of our off-path TCP attack on the Inter-
net, we measure Alexa top 100k websites to identify how many
websites suffer from the vulnerable IPID assignment. We observe
that 22,953 websites are vulnerable to forged ICMP “Fragmentation
Needed” messages from off-path attackers and thus can be tricked
into clearing the DF flag of TCP packets and downgrading the IPID
assignment. These websites are vulnerable to our attack5. We can-
not confirm the effectiveness of the attack against 22,803 websites
that are unreachable from our vantage point in California due to
packet filtering performed by the ISP hosting the vantage point.
Moreover, we suspect that the rest resist to our attack due to two
reasons, i.e., the OS versions of the websites are invulnerable (e.g.,
old Linux kernel versions or Windows), or the forged ICMP error
messages are blocked.
5The attack may be disturbed by noises of non-TCP traffic that happens to share the
same hash-based IPID counter with the attack traffic, however we measure that the
actual disturbance is negligible, see Section 8.1
9
7.2 Results of TCP DoS Attacks
In this experiment, we show that a TCP connection between a
victim server and a victim client can be reset by an off-path attacker,
resulting in a DoS attack. We conduct the attack under the common
scenario of SSH.
Experimental Setup. This attack involves 3 hosts, namely, an SSH
server equipped with Ubuntu 18.04 (kernel version 4.18 or beyond),
OpenSSH 7.6 and OpenSSL 1.0.2, a victim client who accesses the
server based on SSH connections, and an attack machine equipped
with Ubuntu 18.04 (kernel version 4.15) and a prefix of 152.136.0.0/16
that contains 2000 IP addresses in this prefix. The attack machine
can use these IP addresses to detect hash collisions with the target
client. The attacker attempts to reset the connection via sending
TCP RST packets to the server.
Attack Procedure. In this attack, the 3-tuple [client IP address,
server IP address, server port] is known. First, the attacker identifies
an IP address in its prefix which collides with the client IP address.
Second, based on the identified attacker IP address, the attacker
infers the correct client port number and the exact sequence number
(RCV .N XT on the server side) of the victim SSH connection. Finally,
a spoofed RST packet specified with the inferred value is sent to
the server, and the server will be tricked into resetting the SSH
connection from the victim client. In this attack, the acceptable
acknowledgment numbers are not needed.
Table 2: Experimental results of SSH connection reset.
Linux
version
Server
address
62.234.203.× 4.19
152.136.49.× 4.20
152.136.59.× 5.3
62.234.182.× 5.5
Time
cost (s)
148.7
150.2
160.1
156.3
Bandwidth
cost (KB/s)
25.02
25.03
24.95
25.20
Success
rate
9/10
10/10
9/10
44/50
Experimental Results. On average, the time cost of identifying a
correct attacker IP address is 15.4 seconds, and the correct one will
be identified after checking 1,837 IP addresses on average. Table 2
illustrates our experimental results. We test the attack against 4
servers that are equipped with Linux kernel version 4.19, 4.20, 5.3,
and 5.5, respectively. The diversity of servers ensures the feasibility
and effectiveness of the attack. The average time cost of resetting an
SSH connection is 155 seconds, and the success rate is over 88%. TCP
connections DoS attack is particularly applicable to compromising
applications secured by encrypted traffic, e.g., HTTPS and SSH.



