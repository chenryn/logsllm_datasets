It seems like you're trying to change the system time on a Debian Linux machine using a Python script. However, you encountered an "Operation not permitted" error. Here are a few points to consider and correct in your approach:

1. **Command Syntax**: The `-s` option in the `date` command is correct for setting the system time. The uppercase `-S` does not exist in the `date` command, so that's not the issue.

2. **Password Handling**: You should avoid passing the password directly in the command. Instead, use `sudo` with a user who has the necessary permissions. If you need to run the command without a password prompt, you can configure `sudoers` to allow this specific command to run without a password.

3. **Permissions and Ownership**: Setting the file permission to 777 and changing ownership to root is not a secure practice. It's better to ensure that the script is run by a user with the necessary privileges or use `sudo` correctly.

4. **Correct Command Usage**: Ensure that the `date` command is being executed correctly. Here is an example of how you might do it in a Python script:

```python
import os

# Set the new date and time
new_date = "Thu Aug 9 21:31:26 UTC 2012"
command = f"sudo date -s \"{new_date}\""

# Execute the command
os.system(command)
```

5. **Sudoers Configuration**: To allow the `date` command to be run without a password, you can add the following line to the `sudoers` file (using `visudo` to edit it safely):

```plaintext
your_username ALL=(ALL) NOPASSWD: /usr/bin/date
```

Replace `your_username` with your actual username.

6. **Check System Time Permissions**: Ensure that the user running the script has the necessary permissions to set the system time. This usually requires root or `sudo` access.

By addressing these points, you should be able to set the system time successfully. If you continue to encounter issues, please provide more details about your environment and any additional error messages.