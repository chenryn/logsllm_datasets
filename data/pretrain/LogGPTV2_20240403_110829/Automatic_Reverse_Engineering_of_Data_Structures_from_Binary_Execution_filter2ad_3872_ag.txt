### Example of Buffer Vulnerability Detection

Consider the `char[12]` buffer in the `bftpd` application, which represents a packet received from an external source (the `recv` category). In REWARDS, input categories are implemented as semantic tags. The fourth column, labeled "offset," indicates the input offsets reported by the fuzzer. These offsets represent the specific locations that are mutated to generate real exploits. The REWARDS-based vulnerability detector also identifies the type of vulnerability (as shown in the fifth column) based on the matched vulnerability patterns.

For instance, in the `ncompress` benchmark, the table entry indicates that the `char[13]` buffer within a function starting at program counter (PC) `0x08048e76` is vulnerable to a stack buffer overflow. This buffer receives values from the second command-line argument (`argv[1]`). The data lineage fuzzer mutates the first 12 input items (offsets 0 to 11) to generate the exploit. According to the data structure in the second column, the exploit must contain a byte string longer than 1052 bytes to overwrite the return address at the bottom of the stack. Other vulnerabilities can be similarly identified and analyzed.

### Limitations of REWARDS

REWARDS has several limitations:

1. **Coverage**: As a dynamic analysis tool, REWARDS cannot achieve full coverage of all data structures defined in a program. Instead, its coverage is limited to those data structures that are actually created and accessed during a particular run of the binary.
   
2. **On-line Processing**: REWARDS is not fully on-line. The timestamp-based on-line algorithm may leave some variables unresolved by the time they are de-allocated, necessitating an off-line companion procedure to ensure soundness. Developing a fully on-line type resolution algorithm is a future goal.

3. **Kernel-Level Data Structures**: REWARDS, based on PIN, does not support the reverse engineering of kernel-level data structures.

4. **Obfuscated Code**: REWARDS does not work with obfuscated code. An adversary could write an obfuscated program to evade REWARDS, for example, by avoiding the type sinks we define.

5. **Data Type Extraction**: REWARDS currently does not support the extraction of other data types, such as specific file formats (e.g., ELF files, multimedia files) or browser-related data types (e.g., URL, cookie). Additionally, it does not distinguish between signed and unsigned integers.

### Related Work

#### Type Inference

Some programming languages, like ML, use type inference to determine types from the program without explicit declarations. Notable type inference algorithms include the Hindley-Milner algorithm [29], Cartesian Product algorithm [3], iterative type analysis [13], object-oriented type inference [33], and aggregate structure identification [35].

These techniques, similar to REWARDS, rely on type unification, where variables connected by operators must have the same type. However, these techniques assume access to the program's source code and are static, meaning typing constraints are generated at compile time. In contrast, REWARDS works with binaries without symbolic information, using type sinks to obtain initial type and semantic information, and then typing variables through unification during execution.

#### Abstract Type Inference

Abstract type inference [32] groups typed variables based on their semantics. For example, variables intended to store money, zip codes, or ages are clustered by their intended use, even if they share the same integer type. This technique relies on the Hindley-Milner type inference algorithm. Recently, dynamic abstract type inference [24] has been proposed to infer abstract types from execution. While these techniques and REWARDS aim to perform semantics-aware typing, they operate at the source code level, whereas REWARDS operates at the binary level and derives syntactic type structures.

#### Decompilation

Decompilation reconstructs program source code from lower-level languages like assembly or machine code [14, 20, 6]. It often involves reconstructing variable types [31, 19]. Mycroft [31] extends the Hindley-Milner algorithm and delays unification until all constraints are available. Dolgova and Chernov [19] present an iterative algorithm that uses a lattice over the properties of data types for reconstruction.

These techniques are static and derive simple syntactic structures. They aim to produce execution-equivalent code but do not ensure that the recovered types reflect the original declarations or have the same structures.

#### Protocol Format Reverse Engineering

Recent efforts in protocol reverse engineering use dynamic binary analysis, particularly input data taint analysis, to reveal the format of protocol messages. Tools like Polyglot [9] and AutoFormat [25] leverage instruction semantics and execution context. It has been shown that the BNF structure of protocols with multiple messages can be derived [40, 17, 28], and the format of outgoing and encrypted messages can be revealed [8, 39]. REWARDS shares the same insights as Dispatcher [8] for type inference and semantics extraction, but focuses on general data structures rather than live input and output messages. REWARDS also emphasizes the detailed in-memory layout of program data, driven by different application scenarios.

#### Memory Forensics and Vulnerability Discovery

FATKit [34] is a toolkit for extracting, analyzing, aggregating, and visualizing forensic data. It uses predefined data structures extracted from program source code to type memory dumps, as do other similar systems [12, 30, 2]. KOP [11] maps dynamic kernel objects with nearly complete coverage and perfect accuracy, relying on program source code and inter-procedural points-to analysis. Other efforts [37, 18] use data structure signatures to scan and type memory. REWARDS complements these efforts by extracting data structure definitions and reconstructing hierarchical in-memory layouts from binaries.

There is extensive research in vulnerability discovery, including tools like Archer [41], EXE [10], Bouncer [15], BitScope [7], DART [22], and SAGE [23, 21]. REWARDS enhances these techniques by enabling the direct identification of vulnerability suspects from binaries.

### Conclusion

We have presented REWARDS, a reverse engineering system that automatically reveals data structures in a binary based on dynamic execution. REWARDS uses an algorithm for data flow-based type attribute forward propagation and backward resolution. Driven by the derived type information, REWARDS can reconstruct the structural and semantic view of in-memory data layout. Our evaluation with real-world programs shows that REWARDS achieves high accuracy in revealing data structures accessed during execution. Furthermore, we demonstrate the benefits of REWARDS in two application scenarios: memory image forensics and binary vulnerability discovery.

### Acknowledgment

We thank the anonymous reviewers for their insightful comments. We are grateful to Xuxian Jiang and Heng Yin for earlier discussions and help on this and related problems. This research is supported, in part, by the Office of Naval Research (ONR) under grant N00014-09-1-0776 and by the National Science Foundation (NSF) under grant 0720516. Any opinions, findings, and conclusions or recommendations in this paper are those of the authors and do not necessarily reflect the views of the ONR or NSF.

### References

[References listed here, following the format provided in the original text.]