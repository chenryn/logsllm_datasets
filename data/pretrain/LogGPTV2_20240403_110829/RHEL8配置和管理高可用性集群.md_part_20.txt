|                      |                      | \*                   |
|                      |                      | `隔离`{.literal} -   |
|                      |                      | 只有                 |
|                      |                      | 大多数配置的节点活跃 |
|                      |                      | [*且*]{.emphasis}    |
|                      |                      | 隔离任               |
|                      |                      | 何失败或未知节点时， |
|                      |                      | 集群才能启动此资源。 |
|                      |                      |                      |
|                      |                      | \*                   |
|                      |                      | `取                  |
|                      |                      | 消隔离`{.literal} -  |
|                      |                      | 只有                 |
|                      |                      | 大多数配置的节点活跃 |
|                      |                      | [*且*]{.emphasis}    |
|                      |                      | 所有失               |
|                      |                      | 败或未知节点都被隔离 |
|                      |                      | ，[*且*]{.emphasis}  |
|                      |                      | 只能在未             |
|                      |                      | [                    |
|                      |                      | *隔离的*]{.emphasis} |
|                      |                      | 节点上，             |
|                      |                      | 集群才能启动此资源。 |
|                      |                      | 如果为隔离设备设置了 |
|                      |                      | `provides=           |
|                      |                      | unfencing`{.literal} |
|                      |                      | `stonith`{.literal}  |
|                      |                      | 元                   |
|                      |                      | 选项，则这是默认值。 |
+----------------------+----------------------+----------------------+
| `migration-          | `INFINITY`{.literal} | 在将此节             |
| threshold`{.literal} |                      | 点标记为不允许托管此 |
|                      |                      | 资源之前，节点上可能 |
|                      |                      | 会发生多少个故障。值 |
|                      |                      | 0                    |
|                      |                      | 表示禁用了此功能     |
|                      |                      | （节点永远不会标记为 |
|                      |                      | 无效）；相反，集群将 |
|                      |                      | `INFINITY`{.literal} |
|                      |                      | （默认值）           |
|                      |                      | 视为非常大但有限的数 |
|                      |                      | 。只有在失败的操作有 |
|                      |                      | `on-fai              |
|                      |                      | l=restart`{.literal} |
|                      |                      | （默                 |
|                      |                      | 认值）时，这个选项才 |
|                      |                      | 会生效，如果集群属性 |
|                      |                      | `start-failure       |
|                      |                      | -is-fatal`{.literal} |
|                      |                      | 为                   |
|                      |                      | `false`{.li          |
|                      |                      | teral}，则此选项还可 |
|                      |                      | 用于失败的启动操作。 |
+----------------------+----------------------+----------------------+
| `failur              | `0`{.literal}        | 与                   |
| e-timeout`{.literal} | （禁用）             | `migration-          |
|                      |                      | threshold`{.literal} |
|                      |                      | 选项结合使用         |
|                      |                      | ，可指示在采取操作之 |
|                      |                      | 前要等待多少秒，就像 |
|                      |                      | 没有发生故障一样，并 |
|                      |                      | 可能允许资源返回到失 |
|                      |                      | 败的节点上。与任何基 |
|                      |                      | 于时间的操作一样，无 |
|                      |                      | 法保证检查的频率高于 |
|                      |                      | `cluster-recheck     |
|                      |                      | -interval`{.literal} |
|                      |                      | 集群参数的值。       |
+----------------------+----------------------+----------------------+
| `multip              | `s                   | 如                   |
| le-active`{.literal} | top_start`{.literal} | 果在多个节点上找到活 |
|                      |                      | 跃的资源，代表集群应 |
|                      |                      | 该做什么。允许的值： |
|                      |                      |                      |
|                      |                      | \*                   |
|                      |                      | `block`{.literal} -  |
|                      |                      | 将资源标记为非受管   |
|                      |                      |                      |
|                      |                      | \*                   |
|                      |                      | `st                  |
|                      |                      | op_only`{.literal} - |
|                      |                      | 停止所有活动的实例   |
|                      |                      | ，并使其保持这种状态 |
|                      |                      |                      |
|                      |                      | \*                   |
|                      |                      | `sto                 |
|                      |                      | p_start`{.literal} - |
|                      |                      | 停                   |
|                      |                      | 止所有活跃的实例，并 |
|                      |                      | 仅在一个位置启动资源 |
+----------------------+----------------------+----------------------+
| `critical`{.literal} | `true`{.literal}     | （RHEL 8.4           |
|                      |                      | 及更新的版本）       |
|                      |                      | 为涉及资源作为依赖资 |
|                      |                      | 源([*target_resource |
|                      |                      | *]{.emphasis})的所有 |
|                      |                      | colocation 约束设置  |
|                      |                      | `影响`{.literal}     |
|                      |                      | 选项的默认值         |
|                      |                      | ，包括当资源是资源组 |
|                      |                      | 的一部分时创建的隐式 |
|                      |                      | colocation           |
|                      |                      | 约                   |
|                      |                      | 束。`影响`{.literal} |
|                      |                      | colocation           |
|                      |                      | 约束                 |
|                      |                      | 选项决定了当依赖资源 |
|                      |                      | 达到其迁移阈值失败时 |
|                      |                      | ，集群是否会同时将主 |
|                      |                      | 资源和依赖资源移到另 |
|                      |                      | 一节点，或者集群是否 |
|                      |                      | 在不造成服务切换的情 |
|                      |                      | 况下将依赖资源离线。 |
|                      |                      | `critical`{.literal} |
|                      |                      | 资源 meta            |
|                      |                      | 选项的值可以是       |
|                      |                      | `true`{.literal} 或  |
|                      |                      | `false`              |
|                      |                      | {.literal}，默认值为 |
|                      |                      | `true`{.literal}。   |
+----------------------+----------------------+----------------------+
:::
:::
::: section
::: titlepage
## []{#assembly_configuring-cluster-resources-configuring-and-managing-high-availability-clusters.html#_changing_the_default_value_of_a_resource_option}更改资源选项的默认值 {.title}
:::
从 Red Hat Enterprise Linux 8.3 开始，您可以使用
`pcs resource defaults update`{.literal}
命令为所有资源更改默认值。以下命令将 `resource-stickiness`{.literal}
的默认值重置为 100。
``` literallayout
# pcs resource defaults update resource-stickiness=100
```
`pcs resource defaults name=value`{.literal}
命令为之前版本中的所有资源设置默认值，除非配置了多个默认值。但是，`pcs resource defaults update`{.literal}
现在是 命令的首选版本。
:::
::: section
::: titlepage
## []{#assembly_configuring-cluster-resources-configuring-and-managing-high-availability-clusters.html#_changing_the_default_value_of_a_resource_option_for_sets_of_resources}更改一组资源选项的默认值 {.title}
:::
从 Red Hat Enterprise Linux 8.3 开始，您可以使用
`pcs resource defaults set create 命令创建`{.literal}
多个资源默认值集合，该命令允许您指定包含 `资源`{.literal}
表达式的规则。在 RHEL 8.3 中，您使用这个命令指定的规则只允许
`资源`{.literal} 表达式，包括 `and`{.literal}、`or`{.literal} 和括号。在
RHEL 8.4 及更高版本中，您使用这个命令指定的规则中只允许
`资源和`{.literal} `日期`{.literal} 表达式，包括 `和`{.literal}
`或`{.literal} 和括号。
使用 `pcs resource defaults set create`{.literal}
命令时，您可以为特定类型的所有资源配置默认值。例如，如果您正在运行数据库需要很长时间才能停止，您可以提高数据库类型的资源
`粘性`{.literal} 默认值，以防止这些资源更频繁地移至其他节点。
以下命令将 `pqsql`{.literal} 类型
`的所有资源的 resource-stickiness`{.literal} 默认值设置为 100。
::: itemizedlist
-   `id`{.literal}
    选项命名资源默认值集合，不强制使用。如果您不设置此选项，`pc`{.literal}
    s 将自动生成 ID。设置这个值可让您提供更描述性的名称。
-   在本例中，`::pgsql`{.literal} 表示 type `pgsql`{.literal}
    的任何类（任何提供程序）的资源。
    ::: itemizedlist
    -   指定 `ocf:heartbeat:pgsql`{.literal} 将指示类 `ocf`{.literal},
        provider `heartbeat`{.literal}, type `pgsql`{.literal},
    -   指定 `ocf:pacemaker：`{.literal} 可以指示任何类型的
        `ocf`{.literal}、提供商 `pacemaker`{.literal} 的所有资源。
    :::
:::
``` literallayout
# pcs resource defaults set create id=pgsql-stickiness meta resource-stickiness=100 rule resource ::pgsql
```
要更改现有集合中的默认值，请使用
`pcs resource defaults set update`{.literal} 命令。
:::
::: section
::: titlepage
## []{#assembly_configuring-cluster-resources-configuring-and-managing-high-availability-clusters.html#_displaying_currently_configured_resource_defaults}显示当前配置的资源默认设置 {.title}
:::
`pcs resource defaults`{.literal}
命令显示目前配置的资源选项默认值的列表，包括您指定的任何规则。
以下示例显示了在将 `resource-stickiness`{.literal} 的默认值重置为 100
后，此命令的输出。
``` literallayout
# pcs resource defaults
Meta Attrs: rsc_defaults-meta_attributes
  resource-stickiness=100
```
以下示例显示了在将 `pqsql`{.literal} 类型的所有资源的
`resource-stickiness`{.literal} 重置为 100 后这个命令的输出，并将
`id 选项设置为 id`{.literal} `=pgsql-stickiness`{.literal}。
``` literallayout
# pcs resource defaults
Meta Attrs: pgsql-stickiness
  resource-stickiness=100
  Rule: boolean-op=and score=INFINITY
    Expression: resource ::pgsql
```
:::
::: section
::: titlepage
## []{#assembly_configuring-cluster-resources-configuring-and-managing-high-availability-clusters.html#_setting_meta_options_on_resource_creation}在创建资源时设置 meta 选项 {.title}
:::
是否重置资源 meta
选项的默认值，您可以在创建资源时将特定资源的资源选项设置为默认值，而不是默认值。以下显示了在为资源元选项指定值时使用的
`pcs resource create`{.literal} 命令的格式。
``` literallayout
pcs resource create resource_id [standard:[provider:]]type [resource options] [meta meta_options...]
```
例如，以下命令创建一个 `resource-stickiness`{.literal} 值为 50 的资源。
``` literallayout
# pcs resource create VirtualIP ocf:heartbeat:IPaddr2 ip=192.168.0.120 meta resource-stickiness=50
```
您还可以使用以下命令为现有资源、组或克隆的资源设置资源 meta 选项的值。
``` literallayout
pcs resource meta resource_id | group_id | clone_id meta_options
```
在以下示例中，有一个名为 `dummy_resource`{.literal} 的现有资源。此命令将
`failure-timeout`{.literal} 元选项设置为 20 秒，因此资源可在 20
秒内尝试在同一节点上重启。
``` literallayout
# pcs resource meta dummy_resource failure-timeout=20s
```
执行此命令后，您可以显示资源的值，以验证是否设置了
`failure-timeout=20s`{.literal}。
``` literallayout
# pcs resource config dummy_resource
 Resource: dummy_resource (class=ocf provider=heartbeat type=Dummy)
  Meta Attrs: failure-timeout=20s
  ...
```
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-cluster-resources-configuring-and-managing-high-availability-clusters.html#proc_creating-resource-groups-configuring-cluster-resources}配置资源组 {.title}
:::
集集的一个最常见的元素是一组资源，这些资源需要放置在一起，并按顺序启动并按反顺序停止。为简化此配置，Pacemaker
支持资源组的概念。
::: section
::: titlepage
## []{#assembly_configuring-cluster-resources-configuring-and-managing-high-availability-clusters.html#_creating_a_resource_group}创建资源组 {.title}
:::
您可以使用以下命令创建资源组，指定要包含在组中的资源。如果组不存在，这个命令会创建组。如果组存在，这个命令会向组群添加其他资源。这些资源将按您使用此命令指定的顺序启动，并以相反的顺序停止。
``` literallayout
pcs resource group add group_name resource_id [resource_id] ... [resource_id] [--before resource_id | --after resource_id]
```
您可以使用此命令的 ` --before`{.literal} 和 \--after``{=html}
选项指定与组中已存在的资源相关的添加资源的位置。
您还可以使用以下命令在创建新资源时，将新资源添加到现有组中。您创建的资源会添加到名为
[*group_name*]{.emphasis} 的组中。如果 [*group_name*]{.emphasis}
不存在，则会创建它。