put values y1, . . . , yr. If the matrix M is hyper-invertible, then one can show that actually
for any c values (some inputs, some outputs), the remaining r values are deﬁned (cg. [5,
Lemma 2]).
Such a mapping can, for example, be used for eﬃciently generating sharings of random
values. The standard way for generating random sharings is to let every party share
a random value (using a linear secret-sharing scheme) and then take the sum of theses
sharings. However, this approach is rather ineﬃcient, as it requires n initial sharings to
produces a single good sharing. As t of the initial sharings are provided by corrupted
parties and hence known to the adversary, the best one can hope for is to produce n − t
good sharings from n initial sharings; and this can actually be achieved. Using an (n − t)-
by-n hyper-invertible matrix, the given n sharings can be mapped to (n − t) sharings such
that the resulting sharings are “as random as” the good n − t initial sharings. The reason
for this is that the n−t output sharings are determined by a bijective function from the n−t
input sharings of the honest parties, where the function is determined by the t sharings
of the corrupted parties. Formally, assume that I ⊆ {1, . . . , n} is the (unknown) set of
indexes of the corrupted parties, where |I| = t. Then, one can write (cid:126)y = M ¯I · (cid:126)x ¯I + M I · (cid:126)xI ,
2Note that (x1, . . . , xn)T and (y1, . . . , yn)T are column vectors.
21
where ¯I = {1, . . . , n} \ I is the set complement of I.3 As M ¯I is invertible, this mapping is
bijective.
The above construction requires all initial sharings to be valid (e.g., to have the right
degree). This can be ensured by either assuming that the adversary is passive only, or
by using some expensive mechanisms to verify the validity of each single sharing. Further
exploiting the structure of hyper-invertible matrices, this veriﬁcation can be done at very
little cost. Again, each party shares a random value, but this time, we allow corrupted
parties to distribute invalid sharings (which is equivalent to using polynomials of too high
degree). This time, the parties apply an n-by-n hyper-invertible matrix on these initial
sharings, and 2t of the produced sharings are reconstructed, each towards a diﬀerent single
party. Each party checks whether its sharing is valid, and complains otherwise. If no party
complains, then the remaining n − 2t output sharings are used as random sharings.
We argue why the remaining n− 2t sharings are (i) valid sharings and are (ii) unknown
to the adversary. (i) We know that at least n − t of the initial sharings, and, if no party
has complained, also at least t of the output sharings are valid. Due to the property of
the hyper-invertible matrix, the other sharings can be expressed as linear combination of
those n valid sharings, which implies that they are valid as well (due to the linearity of the
sharing scheme). (ii) The adversary knows at most t initial and t output sharings. Fixing
these sharings, there is a bijective (aﬃne) function from any other n− 2t input sharings to
the non-reconstructed n − 2t output sharings. Hence, the produced random sharings are
indeed random and unknown the the adversary.
3.2 Protocol Overview
Our protocol is based on [5], adjusted and simpliﬁed to better ﬁt our needs. In particular,
as in the considered model robustness is not possible, we employ neither the player elim-
ination framework [16] nor circuit randomization [3]. This not only signiﬁcantly reduces
the intricacy of the implementation, but also improves the performance of the protocol
by a constant factor of 4, which is signiﬁcant in practice. See Section 3.9 for a detailed
explanation of the diﬀerence between HyperMPC and the protocol of [5].
Our protocol follows the usual oﬄine/online pattern: In the oﬄine phase, a number
of so-called random double-sharings is generated [13, 5]. A random double-sharing is a
pair of two sharings, one with degree t, and one with degree 2t, of the same random (and
unknown) value. The generation of these double-sharings can be performed in parallel.
In the online phase, the actual circuit is computed. For input gates, multiplication
gates, and random gates, one of the prepared double-sharings is consumed (where for
input and random gates, only the t-sharing is used). Due to the linearity of the secret-
sharing scheme, linear gates can be evaluated locally. Output gates use standard secret
reconstruction.
3We write MR for the matrix consisting of those rows of M with the row index in R, and M C for the
matrix consisting of those columns of M with the column index in C.
22
All given protocols are non-robust. This means that in the presence of malicious parties,
honest parties might not complete the protocol. They may abort (e.g., when observing
cheating) a run forever (e.g., when waiting for a message from a corrupted party). The
latter case can easily be turned into abort by implementing some reasonable time-out
mechanism.
3.3 Secret Sharing
The secret-sharing scheme used in our protocol is the standard Shamir sharing scheme [27].
We assume that every party Pi is assigned some ﬁxed unique non-zero ﬁeld element αi. We
say that a value s is d-shared if every honest party Pi ∈ P holds a share si, such that there
exists a degree-d polynomial p(·) with p(0) = s and p(αi) = si.4 The vector (s1, . . . , sn) of
shares is called a d-sharing of s, and is denoted by [s]d.
We will mostly use sharings of degree t. However, in the multiplication, we also need
sharings of degree 2t.
Below, we provide protocols for sharing and reconstruction. The sharing protocol Share
is completely insecure; it computes a correct sharing only if the dealer is honest. Hence,
the consistency of the sharing must be checked before the sharing can be used. We provide
two reconstruction protocols, one for private reconstruction ReconsPriv, and one for public
reconstruction ReconsPubl. Both protocols non-robustly reconstruct sharings of degree d
with d  2n
cost of 2n2. Thus, the amortized cost of public reconstruction per element is 2n2/ 2n
3 elements, at a
3 = 3n.
24
3.4 Broadcast
In the sequel, we construct a non-robust broadcast protocol with linear communication
complexity. This protocol is a variation of the basic broadcast protocol of [5]. Note
that the trivial approach to non-robust broadcast (distribute value, one round of echoing)
requires quadratic communication per element, which is too much.
We construct a broadcast protocol that allows one (or several) senders to broadcast
T = n − t ﬁeld elements overall. First, these elements are sent to every party. Then the
parties need to verify that they all hold the same values. Instead of echoing all elements,
the parties use a hyper-invertible matrix and then each element is echoed to only one
recipient, who checks consistency. The protocol has quadratic communication complexity
for broadcasting n − t elements, and so is linear per element.
Protocol Broadcast(Ps, (cid:126)x).
1. Ps sends (cid:126)x (of length T = n − t) to every Pj ∈ P.5 Denote the received vector as (cid:126)x(j)
2. Every Pj ∈ P applies the hyper-invertible matrix M :6
(Pj-th view on the vector).
(cid:17)T
(cid:124) (cid:123)(cid:122) (cid:125)
T , 0, . . . , 0
t zeros
(cid:16)
(cid:17)T
= M ·(cid:16)
y(j)
1 , . . . , y(j)
n
x(j)
1 , . . . , x(j)
to every Pk ∈ P.
3. Every Pj ∈ P sends y(j)
4. Every Pk ∈ P checks whether all received values {(y(j)
k }j are equal; if yes sends a 1-bit
5. Every Pk ∈ P checks that he received a 1-bit from every other party, and aborts
and if not a 0-bit, to all other parties.
k
otherwise.
Lemma 3.4 The protocol Broadcast achieves non-robust broadcast, i.e., every (honest)
party who does not abort outputs the vector (cid:126)x = (x1, . . . , xn−t). Broadcast communicates
exactly 2n2 − nt > 2n2 − n2
3 ﬁeld elements and n2 bits.
Proof: An honest party does not abort only if in Step 5, it received a 1-bit from every
other party. Hence, in Step 4, every honest party Pk ∈ P has received n identical versions
of {(y(j)
k }j. This means that all honest parties holds the same value for each yk where Pk
is honest; there are at least n − t such values yk.
a sender Pi.
5Actually, not all values xi must be sent by the same sender Ps. It is suﬃcient that for each xi there is
6Instead of appending t zeros to the x-vector, one can use an n-by-(n− t) hyper-invertible matrix (which
can be derived from a n-by-n hyper-invertible matrix by removing t rows).
25
Furthermore, for every honest party Pj ∈ P, the equation
y(j)
1 , . . . , y(j)
n
x(j)
1 , . . . , x(j)
(cid:16)
(cid:17)
= M ·(cid:16)
(cid:17)T
(cid:124) (cid:123)(cid:122) (cid:125)
n−t, 0, . . . , 0
t zeros
holds. As M is hyper-invertible, from any n input/output values, the other n input/output
values can be computed. As seen above, all honest parties have the same value for at least
n − t of the yk, and furthermore have the same values for the t zeros. Hence, all honest
parties have all values identical, in particular the values in (cid:126)x.
Regarding communication, the ﬁrst step of Broadcast communicates n · T = n(n − t) =
n2 − nt > n2 − n2
3 ﬁeld elements. An additional n2 elements are communicated in the
3rd step, and n2 bits in the 4th step. From here on, we ignore the n2 bits since they are
insigniﬁcant next to the ﬁeld elements.
Observe that Broadcast broadcasts n − t > 2n
ﬁeld elements. Thus, the amortized cost of broadcast per element is 5n2
3 elements, at a cost of 2n2 − n2
3 = 2.5n.
3 / 2n
3 = 5n2
3
3.5 Preparation (Oﬄine) Phase
The goal of the preparation phase is to generate a number of double-sharings of random
values, i.e., each random value is shared once with degree t and once with degree 2t.
One double-sharing is consumed for each input gate, for each random gate, and for each
multiplication gate. We generate L random double-sharings, where L is an upper bound
on cI + cR + cM . We stress that in actuality, a simple sharing suﬃces for input and random
gates, and double sharing isn’t needed. Nevertheless, we do it this way for simplicity (and
since it makes little diﬀerence to the cost in practice in most circuits).
Formally, we say that a value x is (d, d(cid:48))-shared, denoted as [x]d,d(cid:48), if x is both d-shared
and d(cid:48)-shared via valid Shamir sharings. We observe that double-sharings are linear, i.e.,
the sum of correct (d, d(cid:48))-sharings is a correct (d, d(cid:48))-sharing of the sum.
The following protocol DoubleShareRandom(d, d(cid:48)) non-robustly generates T = n − 2t
independent secret random values r1, . . . , rT , each independently (d, d(cid:48))-shared among P.