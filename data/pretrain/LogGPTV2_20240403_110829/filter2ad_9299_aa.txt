**作者：天融信阿尔法实验室  
原文链接：**
## 1 漏洞背景
2021年07月14日Google威胁分析团队(TAG：Threat Analysis Group)发布了一篇标题为"How We Protect
Users From 0-Day
Attacks"的文章。这篇文章公布了2021年Google威胁分析团队发现的4个在野利用的0day漏洞的详细信息。Google
Chrome中的CVE-2021-21166和CVE-2021-30551，Internet Explorer中的CVE-2021-33742和Apple
Safari中的CVE-2021-1879。
2021年4月，TAG发现了一项针对亚美尼亚用户的攻击活动，该活动通过恶意的Office文档调用Internet
Explorer加载远程的恶意Web页面来利用Internet
Explorer渲染引擎中的一个漏洞进行攻击。该恶意文档通过使用Shell.Explorer.1
OLE对象嵌入远程ActiveX对象或通过VBA宏生成Internet
Explorer进程并导航到恶意网页来实现攻击。此攻击中使用的漏洞被分配为CVE-2021-33742，并于2021年6月由Microsoft修复。
微软计划将于2022年6月停用Internet Explorer 11，用微软推出的新版本浏览器Microsoft
Edge来替代它。为了兼容旧网站，Microsoft Edge内置了Internet Explorer模式。按理说，继续研究Internet
Explorer漏洞，不再有较大意义，但是今年还是发生了多个Internet Explorer
0day漏洞在野利用的攻击事件，例如：CVE-2021-26411、CVE-2021-40444，所以研究Internet
Explorer漏洞，还是存在一定的意义。
本文要分析的漏洞是存在于Trident渲染引擎/排版引擎中的一个漏洞。如今，在最新版的Windows11中，依旧可以看到Trident渲染引擎(mshtml.dll)和EdgeHTML渲染引擎(edgehtml.dll)的身影。Trident是Internet
Explorer使用的排版引擎。它的第一个版本随着1997年10月发布的Internet Explorer
4发布，之后不断的加入新的技术并随着新版本的Internet Explorer发布。在Trident7.0(Internet Explorer
11使用)中，微软对Trident排版引擎做了重大的变动，除了加入新的技术之外，并增加了对网页标准的支持。EdgeHTML是由微软开发并用于Microsoft
Edge的专有排版引擎。该排版引擎是Trident的一个分支，但EdgeHTML移除所有旧版Internet
Explorer遗留下来的代码，并重写主要的代码以和其他现代浏览器的设计精神互通有无。
在Google威胁分析团队发布了上面所说的那篇文章之后，又在Google Project Zero的博客上公布了这些漏洞的细节。本文章就是对Internet
Explorer中的CVE-2021-33742漏洞的分析过程的一个记录。我之前分析过老版本的Internet
Explorer的漏洞，这是第一次比较正式的分析新版本Internet Explorer的漏洞，如有错误和不足之处，还望见谅。
## 2 漏洞简介
CVE-2021-33742是存在于Internet
Explorer的Trident渲染引擎(mshtml.dll)中的一个堆越界写漏洞。这个漏洞是由于通过JavaScript使用DOM
innerHTML属性对内部html元素设置内容(包含文本字符串)时触发的。通过innerHTML属性修改标签之间的内容时，会造成IE生成的DOM树/DOM流的结构发生改变，IE会调用CSpliceTreeEngine类的相关函数对IE的DOM树/DOM流的结构进行调整。当调用CSpliceTreeEngine::RemoveSplice()去删除一些DOM树/DOM流结构时，恰好这些结构中包含文本字符串时，就有可能会造成堆越界写。
## 3 分析环境
| 使用的环境 | 备注  
---|---|---  
操作系统 | Windows 10 1809 Pro x64 Windows 10 Enterprise LTSC 2019 x64 |
版本号1：10.0.17763.864(Updated Nov 2019) 版本号2：10.0.17763.316(Updated March 2019)  
调试器 | WinDbg | 版本号:v10.0.16299.15(x64)  
反汇编器 | IDA Pro | 版本号:7.5  
漏洞软件 | Internet Explorer | 版本号: 11.864.17763.0 更新版本：11.0.160(KB4525106)  
漏洞模块 | mshtml.dll | 版本号1：11.0.17763.831(逆向) 版本号2：11.0.17763.1911(补丁前)
版本号3：11.0.17763.1999(补丁后)  
### 3.1 提取漏洞模块
Windows 10 x64版本内置32位和64位两个版本的Internet Explorer，分别在“C:\Program Files
(x86)\Internet Explorer”和“C:\Program Files\internet
explorer”两个文件夹下。但是相应架构的Internet
Explorer的Trident渲染引擎(mshtml.dll)位于“C:\Windows\SysWOW64\mshtml.dll”和“C:\Windows\System32\mshtml.dll”。64位操作系统能够独立运行32位和64位版本软件，“Program
Files (x86)”和“SysWOW64”存放32位软件的软件模块，“Program
Files”和“System32”存放64位软件的软件模块。32位软件并不能在64位系统中直接运行，所以微软设计了WoW64(Windows-on-Windows
64-bit)，通过Wow64.dll、Wow64win.dll、Wow64cpu.dll三个dll文件进行32位和64位系统的切换来运行32位软件。
本次分析，我使用的是32位Internet
Explorer的Trident渲染引擎(mshtml.dll)，也就是“C:\Windows\SysWOW64\mshtml.dll”。
### 3.2 关闭ASLR
关闭了ASLR后，可以更方便的进行调试，dll模块的加载基址不会在每次调试时发生改变，造成调试障碍。Windows10是通过Windows
Defender来关闭Windows缓解措施的。打开Windows Defender后，选择“应用和浏览器控制”，然后找到“Exploit
Protection”，选择“Exploit Protection
设置”。注意：设置界面拥有两个选项卡，“系统设置”和“程序设置”。我们先看“系统设置”，与ASLR有关系的是“强制映像随机化(强制性ASLR)”、“随机化内存分配(自下而上ASLR)”、“高熵ASLR”，我们都将其设为关闭状态。先关闭“高熵ASLR”，然后再关闭其他两项。
“强制映像随机化(强制性ASLR)”，不管编译时是否使用“/DYNAMICBASE”编译选项进行编译，开启了“强制性ASLR”后，会对所有软件模块的加载基址进行随机化，包括未使用“/DYNAMICBASE”编译选项编译的软件模块。关于编译时是否使用了“/DYNAMICBASE”编译选项进行编译，可以使用“Detect
It Easy”查看PE文件的“IMAGE_NT_HEADERS -> IMAGE_OPTIONAL_HEADER ->
DllCharacteristics -> IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE”标志位是否进行了设置。
“随机化内存分配(自下而上ASLR)”，开启了该选项后，当我们使用malloc()或HeapAlloc()在堆上申请内存时，得到的堆块地址将在一定程度上进行随机化。
“高熵ASLR”，这个选项需要配合“随机化内存分配(自下而上ASLR)”选项使用，开启了该选项后，会在“随机化内存分配(自下而上ASLR)”基础上，更大程度的随机化堆块的分配地址。
接下来，我们来看“程序设置”。由于Windows10可以对单独的应用程序设置缓解措施的开启或关闭，并且替换“系统设置”中的设置，造成关闭了“系统设置”中所有与ASLR相关的缓解措施后，dll模块的加载基址还是在变化。切换到“程序设置”选项卡后，找到iexplore.exe，点击编辑，将所有与ASLR有关的设置的“替代系统设置”的勾去掉。
设置完成后，重启一下操作系统。
这样设置完后，你可能会发现，软件模块的加载基址仍然不是一个确定的值，这时，就需要使用16进制编辑器将PE文件头中的NT Headers->Optional
Header->DllCharacteristics->IMAGE_DLL_CHARACTERISTICS_
DYNAMIC_BASE设置为0，用其替换原有的软件模块。这样就彻底关闭了Internet
Explorer的ASLR了。这里推荐使用010Editor，借助它的Templates功能，可以很方便的修改该标志位。
## 4 漏洞复现
我使用的是Google Project Zero的Ivan Fratric提供的PoC。
由于原始PoC过于精简，无法观察到执行效果，对我理解程序的执行流程造成了一定的障碍。所以我尝试了以下几种经过修改的PoC，用于观察执行效果。
                window.onload=function(){
                    var b = document.createElement("html");
                    document.body.appendChild(b);
                    var arr = Array(4);
                    for (var i=0;i
执行效果如下：
我们可以得出以下结论：PoC通过HTML
DOM方法document.createElement()，创建了一个“html”结点(同时创建“head”和“body”结点)，并把新创建的“html”结点添加到原有的“body”结点中。然后，创建了一个Array数组并进行了初始化。最后将该数组转化为字符串，通过HTML
DOM的innerHTML属性，添加到新创建的“html”结点中的“body”结点中。
原始PoC中，并未将创建的Array数组初始化，我们通过Chrome的开发者工具查看未初始化的Array数组转化为字符串后，得到的是什么。这有助于我们后面在调试PoC时，观察字符串所对应的内存数据。
可以看到，初始化后的Array数组转化成字符串后，每个元素是使用“,”分隔的。未初始化的Array数组转化成字符串后，只有一连串的“,”。其个数为Array数组元素个数减1。
经过测试，PoC2也可以成功造成Crash。关于document.createElement()的参数，只有“html”元素可以成功触发Crash，其他标签无法造成Crash(我不确定)。
好了，我们现在开始通过调试复现此漏洞。这里使用的是原始的PoC。首先打开Internet Explorer，拖入PoC，会弹出一个提示框“Internet
Explorer已限制此网页运行脚本或ActiveX控件”，表示现在html中的javascript代码还没有得到执行。这时，我们打开WinDbg，附加到iexplore.exe上，输入g命令运行，然后在Internet
Explorer界面点击提示框中的“允许阻止的内容”(可能需要刷新一下)。然后Internet
Explorer会执行异常，WinDbg会捕获到异常并中断下来。以下是Crash的现场情况：
    (211c.80c): Break instruction exception - code 80000003 (first chance)
    ntdll!DbgBreakPoint:
    00007ffd`64a43150 cc              int     3
    0:015> g
    ModLoad: 00000000`70a90000 00000000`70aaf000   C:\Windows\SysWOW64\WLDP.DLL
    ModLoad: 00000000`771f0000 00000000`77235000   C:\Windows\SysWOW64\WINTRUST.dll
    Invalid parameter passed to C runtime function.
    (211c.2320): Access violation - code c0000005 (first chance)   r
    eax=2211a020 ebx=0504cb38 ecx=04915644 edx=02680002 esi=0504ca08 edi=0000fdef
    eip=63a46809 esp=0504c7a8 ebp=0504c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x4e9:
    63a46809 66893c50        mov     word ptr [eax+edx*2],di  ds:002b:26e1a024=????
    0:004:x86> !address 26e1a024
    Usage:                  Free
    Base Address:           00000000`22e1c000
    End Address:            00000000`63580000
    Region Size:            00000000`40764000 (   1.007 GB)
    State:                  00010000          MEM_FREE
    Protect:                00000001          PAGE_NOACCESS     
    Content source: 0 (invalid), length: 3c765fdc
    0:004:x86> k
     # ChildEBP RetAddr  
    00 0504c9f0 63a44fe6 MSHTML!CSpliceTreeEngine::RemoveSplice+0x4e9
    01 0504cb1c 63b91ff9 MSHTML!Tree::TreeWriter::SpliceTreeInternal+0x8d
    02 0504cbf8 63bca8e3 MSHTML!CDoc::CutCopyMove+0x148759
    03 0504cc2c 63a80d38 MSHTML!RemoveWithBreakOnEmpty+0x1499bd
    04 0504cd7c 63a80a5d MSHTML!InjectHtmlStream+0x29b
    05 0504cdc0 63a81a2f MSHTML!HandleHTMLInjection+0x86
    06 0504ceb8 63a816a2 MSHTML!CElement::InjectInternal+0x2c9
    07 0504cf2c 63a815ba MSHTML!CElement::InjectTextOrHTML+0xdf
    08 0504cf58 63a8153c MSHTML!CElement::Var_set_innerHTML+0x51