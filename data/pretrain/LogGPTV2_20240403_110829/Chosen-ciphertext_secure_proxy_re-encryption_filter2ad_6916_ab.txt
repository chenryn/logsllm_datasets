analysis. Section 3.3 then shows how to replace the random
oracles with speciﬁc concrete hash functions, which will be
carefully manipulated to (among other things) sometimes
allow the reduction to decrypt or re-encrypt a ciphertext
without knowing the correct keys. Our ﬁnal scheme is only
slightly less eﬃcient than its random oracle counterpart.
1.3 Related Work
There is a large related body of work with the very similar
name proxy encryption (no “re-”) [22, 27, 14]. In proxy en-
cryption, Alice allows Bob to decrypt ciphertexts meant for
her with the help of a proxy. In these schemes, Alice’s secret
key is shared between Bob and the proxy. An encryption
for Alice is ﬁrst partially decrypted by the proxy, and then
fully decrypted by Bob. However, this approach requires
that Bob obtain and store an additional secret (for every de-
cryption delegation he accepts!). Proxy encryption schemes
are currently realized under a broader class of complexity as-
sumptions than PREs. For example, Dodis and Ivan present
both CPA and CCA secure constructions based on RSA,
Decisional DH, and bilinear assumptions [14]. PREs are a
(strict) subset of proxy encryption schemes [1], where Bob
need only have his own decryption key.
In a concurrent and independent work, Green and Ate-
niese presented the ﬁrst CPA and CCA-secure identity-based
PREs in the random oracle model [18]. They employ the
above key sharing technique, but alter it as follows: Alice
gives one share of her key to the proxy in the clear and
the other share to the proxy encrypted under Bob’s public
key. To perform re-encryption, the proxy ﬁrst partially de-
crypts the ciphertext and then attaches the ciphertext con-
taining the secret share so that Bob can decrypt the rest.
In the CCA case, this requires carefully ensuring that the
composition of these ciphertexts results in a non-malleable
joint-ciphertext. Their CCA IBE scheme is unidirectional
and single-hop in the random oracle model, whereas ours
is bidirectional and multi-hop in the standard model. De-
pending on the application, one may need one or the other.
One additional diﬀerence between the schemes is that our
original and re-encrypted ciphertexts come from the same
distribution and thus when Bob receives a re-encrypted ci-
phertext he cannot tell (based on the ciphertext) whether it
is an original or re-encrypted one. In [18], original and re-
encrypted ciphertexts come from two separate distributions
and moreover Bob must know who the ciphertext was origi-
nally sent to in order to decrypt a re-encryption. Green and
Ateniese [18] also present a game-based unidirectional CCA
IBE security deﬁnition, which shares many properties with
ours. They do not consider simulation-based deﬁnitions.
This work should not be confused with the “universal re-
encryption” literature [17], which re-randomizes ciphertexts
instead of changing the underlying public key.
2. DEFINITIONS
Throughout this section we concentrate on deﬁning bidi-
rectional re-encryption schemes. The case of unidirectional
schemes, namely where a re-encryption key from pk 1 to
pk 2 should not provide the ability to re-encrypt from pk 2
to pk 1 can be inferred in a straightforward way. We allow
re-encryption proxies between uncorrupted parties to be cor-
rupted adaptively during the course of the computation. In
contrast, we restrict the adversary to determine the iden-
tities of the corrupted key-holders before the computation
starts. Furthermore, do not allow adaptive corruption of
proxies between corrupted and uncorrupted parties.1
We ﬁrst give the input-output speciﬁcations for a proxy
re-encryption scheme (PRE). Section 2.1 gives a game-based
security deﬁnition. Section 2.2 gives a security deﬁnition
within the Universally Composable security framework. Sec-
tion 2.3 discusses the relationship between the deﬁnitions.
Definition 2.1
(Bidirectional PRE I/O). A bidirec-
tional, proxy re-encryption scheme is a tuple of algorithms
(KeyGen, ReKeyGen, Enc, ReEnc, Dec):
• KeyGen(1k) → (pk , sk ). On input the security parame-
ter 1k, the key generation algorithm KeyGen outputs a
public key pk and a secret key sk .
• ReKeyGen(sk 1, sk 2) → rk 1↔2. On input two secret
keys sk 1 and sk 2, the re-encryption key generation al-
gorithm ReKeyGen outputs a bidirectional re-encryption
key rk 1↔2.
• Enc(pk , m) → C. On input a public key pk and a
message m ∈ {0, 1}∗, the encryption algorithm Enc
outputs a ciphertext C.
• ReEnc(rk 1↔2, C1) → C2. On input a re-encryption
key rk 1↔2 and a ciphertext C1, the re-encryption al-
gorithm ReEnc outputs a second ciphertext C2 or the
error symbol ⊥.
• Dec(sk , C) → m. On input a secret key sk and a
ciphertext C, the decryption algorithm Dec outputs a
message m ∈ {0, 1}∗ or the error symbol ⊥.
Remark 2.2
(On generating re-encryption keys:).
Here ReKeyGen is treated as an algorithm that takes for input
the two relevant secret keys and generates a re-encryption
key. Alternatively, a re-encryption key can be generated via
a protocol involving the proxy and the two holders of the se-
cret keys. The requirements are that the proxy learns the re-
encryption key as deﬁned here and nothing else. The holders
of the secret keys learn nothing from the protocol. These se-
curity requirements must hold only when at most one of the
three parties is corrupted. When any two of the parties are
corrupted, we no longer have security requirements.
1This limitation reﬂects the current state of the art: Unfor-
tunately, we do not have notions of security that adequately
capture adaptive corruption of principals, and are at the
same time realizable by realistic protocols.
The input/output speciﬁcation for a unidirectional PRE
scheme would change as follows: instead of taking two secret
keys as input, the ReKeyGen algorithm would take as input
a secret key sk 1 and a public key pk 2, and output a re-
encryption key rk 1→2. Here the protocol for providing a
proxy with a re-encryption key from pk 1 to pk 2 is simple:
The owner of sk 1 locally computes rk 1→2 and sends it to the
proxy. The owner of sk 2 need not be part of this process.
2.1 Game-Based Deﬁnition of Security
We start by formulating the requirements for correctness
of decryption.
Definition 2.3
(Bidirectional PRE Correctness).
A bidirectional PRE scheme (KeyGen, ReKeyGen, Enc, ReEnc,
Dec) is perfectly correct with respect to domain D if:
holds that Dec(sk , Enc(pk , m)) = m;
• For all (pk , sk ) output by KeyGen and all m ∈ D, it
• For any n > 1, any sequence of pairs (pk 1, sk 1),...,(pk n,
sk n) output by KeyGen, any i < n, all re-encryption
keys rk i↔i+1 output by ReKeyGen(sk i, sk i+1), all mes-
sages m ∈ D and all C1 output by Enc(pk 1, m), it holds
that Dec(sk n, ReEnc(rk n−1↔n, ...ReEnc(rk 1↔2, C1)...) =
m. If for any m ∈ D correctness holds only with prob-
ability 1 minus a negligible quantity, we say that the
scheme is correct with respect to D.
Next we deﬁne the game used for formulating the security
requirement. The game deﬁnes an interaction between an
adversary and a number of oracles, representing the capabil-
ities of the adversary in an interaction with a PRE scheme.
It proceeds as follows:
Definition 2.4
(Bidirectional PRE-CCA game).
Let k be the security parameter. Let A be an oracle TM,
representing the adversary. The game consists of an execu-
tion of A with the following oracles, which can be invoked
multiple times in any order, subject to the constraints below:
Uncorrupted key generation: Obtain a new key pair as
(pk , sk ) ← KeyGen(1k). A is given pk .
Corrupted key generation: Obtain a new key pair as (pk ,
sk ) ← KeyGen(1k). A is given pk , sk .2
Re-encryption key generation Orkey: On input (pk , pk(cid:48))
by the adversary, where pk , pk(cid:48) were generated before
by KeyGen, return the re-encryption key rk pk↔pk(cid:48) =
ReKeyGen(sk , sk(cid:48)) where sk , sk(cid:48) are the secret keys that
correspond to pk , pk(cid:48).
We require that either both pk and pk(cid:48) are corrupted,
or alternatively both are uncorrupted. We do not al-
low for re-encryption key generation queries between
a corrupted and an uncorrupted key. (This represents
the restriction that the identities of parties whose se-
curity is compromised should be ﬁxed in advance.)
Challenge oracle: This oracle can be queried only once.
On input (pk∗, m0, m1), where pk∗ is called the chal-
lenge key, the oracle chooses a bit b ← {0, 1} and re-
turns the challenge ciphertext C∗ = Enc(pk∗, mb). (As
we note later, the challenge key must be uncorrupted
for A to win.)
2Alternatively, the adversary A could register her public key
with an authority by proving knowledge of the corresponding
secret key, as in the registered keys model of Barak et al. [3].
Re-encryption Orenc: On input (pk , pk(cid:48), C), where pk , pk(cid:48)
were generated before by KeyGen, if pk(cid:48) is corrupted
and (pk , C) is a derivative of (pk∗, C∗), then return a
special symbol ⊥ which is not in the domains of mes-
sages or ciphertexts. Else, return the re-encrypted ci-
phertext C(cid:48) = ReEnc(ReKeyGen(sk , sk(cid:48)), C). Deriva-
tives of (pk∗, C∗) are deﬁned inductively, as follows.
(See informal discussion immediately below.)
1. (pk∗, C∗) is a derivative of itself.
2. If (pk , C) is a derivative of (pk∗, C∗) and (pk(cid:48), C(cid:48))
is a derivative of (pk , C) then (pk(cid:48), C(cid:48)) is a deriva-
tive of (pk∗, C∗).
3. If A has queried the re-encryption oracle Orenc on
input (pk , pk(cid:48), C) and obtained response (pk(cid:48), C(cid:48)),
then (pk(cid:48), C(cid:48)) is a derivative of (pk , C).
4. If A has queried the re-encryption key genera-
tion oracle Orkey on input (pk , pk(cid:48)) or (pk(cid:48), pk ),
and Dec(pk(cid:48), C(cid:48)) ∈ {m0, m1}, then (pk(cid:48), C(cid:48)) is a
derivative of (pk , C).
Decryption oracle Odec: On input (pk , C), if the pair (pk ,
C) is a derivative of the challenge ciphertext C∗, or
pk was not generated before by KeyGen, then return
a special symbol ⊥ which is not in the domain D of
messages. Else, return Dec(sk , C).
Decision oracle: This oracle can also be queried only once.
On input b(cid:48): If b(cid:48) = b and the challenge key pk∗ is not
corrupted, then output 1; else output 0.
We say that A wins the PRE-CCA game with advantage ε if
the probability, over the random choices of A and the oracles,
that the decision oracle is invoked and outputs 1, is at least
1/2 + ε.
We motivate the above deﬁnition of derivatives, which is
Informally, a pair
at the heart of the notion of security.
(pk , C) is a derivative of (pk∗, C∗) if decrypting C with the
secret key sk that corresponds to pk would give the adver-
sary “illegitimate information” on the hidden bit b. The ﬁrst
three conditions are obvious. The fourth condition repre-
sents the fact that if the adversary has the re-encryption key
between pk∗ and pk (or alternatively a chain of re-encryption
keys (pk∗, pk(cid:48)(cid:48)(cid:48)), (pk(cid:48)(cid:48)(cid:48), pk(cid:48)(cid:48)), ..., (pk(cid:48), pk )) then it is possible
that C is the result of legitimately re-encrypting C∗ to key
pk , in which case decrypting C would give the adversary
“illegitimate” information on b.
A ﬁrst attempt to prevent this may be to not allow the
adversary to decrypt any ciphertext with respect to key pk .
However, such a rule would be too restrictive (resulting in
an overly weak deﬁnition), since C might be generated not
as a re-encryption of C∗, in which case we want to allow
the adversary to obtain the decryption of C. So we would
like to allow the adversary to decrypt to key pk ciphertexts
that were “not generated as a re-encryption of C∗”. How-
ever, telling whether C was generated as a re-encryption of
C∗ may be problematic, especially when the re-encryption
algorithm is randomized. In particular, requiring that C is
not the result of running the re-encryption algorithm on the
challenge ciphertext C∗, for any randomness, would result
in an overly weak deﬁnition, since a re-encryption algorithm
could artiﬁcially output any string in {0, 1}∗ with negligi-
ble but positive probability. Restricting to non-negligible
outputs does not seem to suﬃce either.
We circumvent this diﬃculty by allowing the adversary to
decrypt C, while making sure that if C was generated as
a re-encryption of C∗ then the adversary gains no informa-
tion from the decryption query. This deﬁnitional approach
is reminiscent of the deﬁnition of Replayable CCA security
in [13].
In both cases we want to guarantee “CCA secu-
rity” while allowing re-encryptions that do not change the
decrypted value.
This deﬁnition too results in a relaxation of plain CCA
security, in the same way that RCCA relaxes CCA security.
That is, the present deﬁnition allows “harmless mauling” of
the ciphertext to a diﬀerent ciphertext that decrypts to the
same value (see discussion in [13].) We view this relaxation
as an additional feature of the present deﬁnition. In partic-
ular, it allows for potential re-randomization and unlinka-
bility of the re-encryption process along the lines of [13, 19,
24]. Such re-randomization is ruled out by strict CCA secu-
rity. The relations with the UC notions of security provide