让OpenStacker比较头疼的事情，因为要在保证现有现有业务不能受影响的同时又要快速完成
最近我们又尝试去触碰一下 OpenStack 的另一个硬骨头--升级。OpenStack 升级是另一件
公司和企业都不得不望而生畏，不过还好我们Hold 住了，而且整个还很流程化、自动化；但是
大家都知道OpenStack最大的痛点莫过于组件过多而导致的安装部署繁琐的问题，因此很多
INOVA从KILO升级到MITAKA遇到的坑
升级之前我们肯定是要调研版本之间都做了哪些变更（功能增删、配置增删等）做到心中
I Feb. 1st 2017 BY 霍明明
wyepengta/oestak-a
 aotaras'arnduos-aou-yoeasuado doss Taowessis
虚拟化－Nova从Kilo升级到Mitaka 遇到的坑77
sot/openstack-ki1o-db-backup/nova.sq1
etc/yum.
.repos.d/openstack-mitaka.re
---
## Page 83
现场日志
QAO1.RPC 版本Controller节点与Compute节点不匹配
升级遇到的坑
启动计算节点
启动控制节点
启动并检查服务状态
在 Mitaka 版本中新增nova_api数据库，
同步最新数据库结构
使用ansible升级Nova组件及修改配置
停止控制节点服务
 78  Nova 从Kilo 升级到 Mitaka 遇到的坑－ 虚拟化 
systemctl start openstack-nova-compute.service
根据自己实际环境书写playbook
sync
5
，所以要同步api_db。
nova
update
---
## Page 84
Liberty 版本
Kilo 版本
据日志排查发现Kilo版本的RPC和Mitaka版本的RPC版本不匹配。
[upgrade_level组中配置使用的RPC版本号即可，但是实际在使用时还是一直报错。最终根
里去了。
定版本号的方式来统一他们之间的通信。但是由于我们是跨大版本升级，所以在这个地方掉坑
升级时高版本组件和低版本组件RPC正常通信，通过在 Controller 和 Compute 配置文件中指
那跨版本为啥有问题呢？正常的流程是我们在Controller和Compute中的配置文件
针对这个问题官方已经给出了解决方案nova的upgrade机制了解。简单理解的话就是为了
4745
ERROR
Traceback (most recent call
pes
ERROR
虚拟化－Nova 从Kilo 升级到 Mitaka 遇到的坑
File
RROR
c0/da/pat/hb/bython2ne
oming.message))
nethod)
Atte
79
---
## Page 85
码如下：
nova-compute升级到Mitaka启动服务时，又报如下异常：（异常日志扫描文末二维码查看）
pute组件，让Controller和Compute使用同一版本。本以为这样就解决问题了，但是在将
建议，这才明白为啥必须从这个commit id后的版本升级才能够比较平滑的升级。
Mitaka 版本
80Nova 从Kilo 升级到 Mitaka 遇到的坑－虚拟化
根据输出的异常日志，进行排查，最终发现是由于python-kombu库兼容性导致，相关代
Mitaka ）
 713d8cb0777afb9fe4f665b9a40cac894b04aacb before deploying this one (
which means that you must have deployed at least commit
问题解决：放弃Mitaka版Controller与Kilo版Compute兼容的方案。同步升级nova-com-
fa2555046c01c8624be014ce2d8 drops support for an instance major version,
 Only if you do continuous deployment 1337890ace918-
所以，不管我们怎么配置都达不到Kilo版和Mitaka版的兼容。翻了翻调研升级时官方给的
ALIA
ASES
ES
---
## Page 86
以上就是 Nova 从 Kilo 跨版本升级到 Mitaka 的过程及遇到的问题，希望对你有帮助。
问题解决：在[neutron]中添加如下几项：
经过分析发现是Mitaka版本中对于neutron配置部分配置改变导致。
现场日志(现场日志扫描文末二维码查看)
QA02：neutron配置错误导致创建虚拟机失败
和当前环境使用的配置项进行调整。
相比Kilo版本Mitaka版本对很多配置项都做了调整，所以在升级时需要根据官方配置样例
project_name = service
 project_domain_name=Default 
user_domain_name=Default
return timeout
LOG.trace(
1og
NOTE（silel
ans
info
xchange,
msg,
虚拟化－Nova从Kilo升级到 Mitaka 遇到的坑
routing_key=
default",
sendingmessage
nds
exchange=e
instead
6u
ec.
suppor
tim
ot
---
## Page 87
https://opsdev.cn/post/nova_upgrade_kilo_to_mitaka.html 
本文链接：
计算节点服务停止不会对现有的虚拟机造成任何影响。
各个组件大量的刷日志。计算节点这么多，不太好控制，所以先把计算节点服务给停掉了，保证升级的顺利。
升级 Controller 节点还是Compute节点两个版本的组件是不能同时工作的，而且由于版本的不兼容，会造成
A：是个好问题。就像文章中提到的“RPC 版本 Controller 节点与 Compute 节点不匹配”问题，不管是先
Q：升级的时候，为什么要先停掉所有的计算节点，这么多机器会不会对现有的虚拟机有影响？
做测试，直到没有任何问题，我们才敢在线上做升级变更。
发布。在升级前我们做了大量的调研，查了很多资料，把可能遇到的问题都梳理出来，并且在测试环境中重复
A：在我们升级的时候赶上Mitaka发布了一段时间也算是比较稳定，而且很多新功能也都是在Mitaka版本中
Q：OpenStack紧邻版本升级都是一件很痛苦的事，你们为啥要跨版本升级呢？
面对面：
82Nova 从Kilo 升级到 Mitaka 遇到的坑－虚拟化 
扫查看文章详情
---
## Page 88
数据分析
法，下面将重点介绍我们在实践过程中的经验。
常点的检测。
线拟合方法来检测新的节点和拟合曲线的偏离程度；甚至有人将 CNN 和 RNN 技术应用到异
的统计学习方法-－3α原则，它利用检测点偏移量来检测出异常；比如普通的回归方法，用曲
针对的是时间序列的异常检测。时间序列异常的检测算法有很多，业界比较流行的，比如普通
外，一套理想的异常检测机制也是非常非常重要的。
天猫的主页访问不了，那马爸爸得损失好多个亿。为了防止这样的情况出现，除了疯狂扩容以
家公司在应对神棍节的时候都有自己的一套针对不同场景的策略。试想一下，假如双十一那天
■时间序列异常检测机制的研究
I Nov. 17th 2017 BY 籍鑫璞
机器学习
一种是如下图一的具有周期性的数据，这种情况更多需要考虑周期性给数据带来的影响。
获取过去7天的LVS 流量的数据，我们可以大致将趋势分为两种：
通过普通的阈值来检测LVS 流量异常的方法效果比较差，本篇文章提出了一种新的检测算
异常检测的场景很多，例如硬件的故障检测、流量的异常点的检测等场景。这篇博客我们
双十一刚过，阿里还有京东就在疯狂地 show 他们的技术有多牛逼多牛逼。无可厚非，两
机器学习－时间序列异常检测机制的研究
83
---
## Page 89
age、……。在这篇文章中，我们使用EWMA，即指数权重移动平均方法来拟合曲线。在
使曲线变得不平滑，则该点就出现了异常。曲线拟合的方法有很多，比如回归、moving aver-
更长时间内数据的总体走势。
此条件，减少一些漏报的事件。
和 avg-min 的最小值。之所以取最小值的原因是让筛选条件设置的宽松一些，让更多的值通过
用此方法。取过去一段时间（比如T 窗口）的平均值、最大值以及最小值，然后取max-avg
置方法。通常阈值设置方法会参考过去一段时间内的均值、最大值以及最小值，我们也同样应
值我们将 count 加 1，如果 count 超过我们设置的 count_num，则认为该点是异常点。
将T设置为7，则我们取检测值（now_value）和过去7个（记为i）点进行比较，如果大于阈
是很大的，但是07:01时刻对于 8:01时刻影响不是很大。
说，T时刻的数值对于T-1时刻有很强的依赖性。比如流量在8:00 很多，在 8:01时刻的概率
算法
式。下面我们将详细介绍每个算法：
检测机制的研究
略来检测。
84时间序列异常检测机制的研究－机器学习
通常使用一条曲线对该趋势进行拟合来反应曲线的走势，如果新的数据打破了这种趋势，
上面短期环比参考的是短期内的数据，而仅仅有短期内的数据是不够的，我们还需要参考
长期环比（LS）
业界关于动态阈值设置的方法有很多，今天介绍一种针对我们LVS 流量异常检测的阈值设
动态阈值
首先，我们可以使用最近时间窗口（T）内的数据遵循某种趋势的现象来做文章。比如我们
对于时间序列（是指将同一统计指标的数值按其发生的时间先后顺序排列而成的数列）来
短期环比（SS）
由于曲线就有周期性和非周期性的两种趋势，所以我们的检测机制就需要能够处理两种方
而另一种如上图二的随机的数据，不具有周期性，这种情况需要采用和周期性不一样的策
count
threshold = min(max - avg,avg - min))
IM
(nowvalue - i) >threshold)
>count_num
---
## Page 90
t时刻的流量为900bit，t－1时刻的是1000bit，那么可以计算出掉线人数是10%。如果参考过去
？那就是振幅了。
觉的说法是，两个曲线虽然不一样高，但是“长得差不多”。那么怎么利用这种“长得差不多”呢
是高很多的。这样的故障，使用方法二就检测不出来，那么我们将如何改进我们的方法呢？一个直
必然会比今天的曲线低很多。那么今天出了一个小故障，曲线下跌了，相对于过去14天的曲线仍然
是一个需要讨论的话题。根据目前动态阈值的经验规则来说，取平均值是一个比较好的思路。
同一时刻的最大值乘以一个阈值还大，就会认为该输入为异常点（突增）。
天的数据。对于某个时刻，将得到14个点可以作为参考值，我们记为×i，其中i=1.，14。
4 点最低，而在晚上11点最高。为了将监控项的周期性考虑进去，我们选取了某个监控项过去14
实际的值是否超出了这个范围就可以知道是否可以告警了。
EWMA值，每个数据的权重是不一样的，越近的数据将拥有越高的权重。
EWMA中，下一点的平均值是由上一点的平均值，加上当前点的实际值修正而来。对于每一个
一时刻的最小值乘以一个阈值还小，就会认为该输入为异常点（突减）；而如果 input 比过去14 天
怎么计算t时刻的振幅呢？我们使用×(t）－x(t-1)再除以x(t-1)来表示振幅。举个例子，例如
同比的方法遇到下图的现象就不能检测出异常。比如今天是11.18 日，过去 14天的历史曲线
同比振幅(CA)
静态阈值的方法是根据历史经验得出的值，实际中如何给 max_threshold 和 min_threshold
我们先考虑静态阈值的方法来判断 input 是否异常（突增和突减）。如果 input 比过去14 天同
很多监控项都具有一定的周期性，其中以一天为周期的情况比较常见，比如，LVS流量在早上
同比(chain)
有了平均值之后，我们就可以使用 3-sigma 理论来判断新的 input 是否超过了容忍范围。比较
if new_value max(过去14天同一时刻的值)*max_threshold:
if abs(data.values[-1] - expAverage.values[-1])
stdDev = pd.stats.moments.ewmstd(data, com=50)
expAverage = pd.stats.moments.ewma(data, com=50)
print"突减"
print"突增"
机器学习－时间序列异常检测机制的研究
*E<
85
---
## Page 91
在此就不说明了。
之前先对数据进行归一化（比如z-Score）。
方差阈值判断的判断方法来确定数据的周期性。当然，如果数据波动范围比较大，可以在差分
期性。比如取最近两天的数据来做差分，如果是周期数据，差分后就可以消除波动，然后结合
介绍两种使用方法：
chain和 CA是针对周期性数据的验证方法。那这四种方法应该如何选择和使用呢？下面我们
算法组合
则认为该时刻发生突减。
该时刻发生突增，而如果 m 时刻的振幅大于 amplitudethreshold 并且 m 时刻的振幅小于 0,
reshold 小于 m 时刻的振幅([m(t)-m(t-1)] / m(t-1)）并且 m 时刻的振幅大于 0，则我们认为
的数据，
86时间序列异常检测机制的研究－机器学习
二、不区分周期性，直接根据“少数服从多数”的方法来去检测，这种方法比较好理解，
上面涉及到了如何检测数据周期的问题，我们可以使用差分的方法来检测数据是否具有周
一、根据周期性的不同来选择合适的方法。这种方法需要首先验证序列是否具有周期性，
上面介绍了四种方法，这四种方法里面，SS 和LS是针对非周期性数据的验证方法，而
，我们会得到 14 个振幅值。使用 14 个振幅的绝对值作为标准，如果 amplitudeth-
amplitude=max
chain
4
[a;(t) -a;(t -1))|]
ci(t-1)
输入数据
,c = 1,2,...,14
---