title:Phishpedia: A Hybrid Deep Learning Based Approach to Visually Identify
Phishing Webpages
author:Yun Lin and
Ruofan Liu and
Dinil Mon Divakaran and
Jun Yang Ng and
Qing Zhou Chan and
Yiwen Lu and
Yuxuan Si and
Fan Zhang and
Jin Song Dong
Phishpedia: A Hybrid Deep Learning Based 
Approach to Visually Identify Phishing Webpages
Yun Lin and Ruofan Liu, National University of Singapore; Dinil Mon Divakaran, 
Trustwave; Jun Yang Ng and Qing Zhou Chan, National University of Singapore; 
Yiwen Lu, Yuxuan Si, and Fan Zhang, Zhejiang University; Jin Song Dong, 
National University of Singapore
https://www.usenix.org/conference/usenixsecurity21/presentation/lin
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Phishpedia: A Hybrid Deep Learning Based Approach to Visually Identify
Phishing Webpages
Yun Lin1, Ruofan Liu1(cid:3), Dinil Mon Divakaran2, Jun Yang Ng1, Qing Zhou Chan1,
Yiwen Lu3, Yuxuan Si3, Fan Zhang3, Jin Song Dong1
School of Computing, National University of Singapore1
{dcsliny, dcslirf}@nus.edu.sg, {ng.junyang, chanqingzhou}@u.nus.edu, PI:EMAIL
Trustwave2; PI:EMAIL
College of Computer Science and Technology, Zhejiang University3; {3160102248, 3170105952, fanzhang}@zju.edu.cn
Abstract
Recent years have seen the development of phishing detec-
tion and identiﬁcation approaches to defend against phishing
attacks. Phishing detection solutions often report binary re-
sults, i.e., phishing or not, without any explanation. In con-
trast, phishing identiﬁcation approaches identify phishing
webpages by visually comparing webpages with predeﬁned
legitimate references and report phishing along with its target
brand, thereby having explainable results. However, there are
technical challenges in visual analyses that limit existing solu-
tions from being effective (with high accuracy) and efﬁcient
(with low runtime overhead), to be put to practical use.
In this work, we design a hybrid deep learning system,
Phishpedia, to address two prominent technical challenges in
phishing identiﬁcation, i.e., (i) accurate recognition of identity
logos on webpage screenshots, and (ii) matching logo variants
of the same brand. Phishpedia achieves both high accuracy
and low runtime overhead. And very importantly, different
from common approaches, Phishpedia does not require train-
ing on any phishing samples. We carry out extensive experi-
ments using real phishing data; the results demonstrate that
Phishpedia signiﬁcantly outperforms baseline identiﬁcation
approaches (EMD, PhishZoo, and LogoSENSE) in accurately
and efﬁciently identifying phishing pages. We also deployed
Phishpedia with CertStream service and discovered 1,704 new
real phishing websites within 30 days, signiﬁcantly more than
other solutions; moreover, 1,133 of them are not reported by
any engines in VirusTotal.
1
Introduction
Phishing, an important step in an attack chain, has evolved
over the past years to such an extent that it is now available and
delivered as a service [19, 49, 71]. As per recent reports [26],
the price of phishing kits more than doubled from 2018 to
2019, making them the “new bestseller” in the dark market.
It is thus not surprising that phishing attacks soared by 4-5
(cid:3)Ruofan Liu shares equal contribution with the ﬁrst author for this work.
times during the COVID-19 pandemic [3]. Meanwhile re-
searchers have been developing new and different solutions to
detect phishing pages. We classify them broadly as phishing
detection and phishing identiﬁcation approaches.
Phishing detection solutions are often based on dynamic
black lists, or supervised machine learning models that are
trained on datasets with ground truth. While some phishing
detection models use only URLs (for training and predict-
ing) [22, 27, 36, 76], others additionally use HTML contents
for feature extraction [31, 39, 44–46, 62, 63, 79, 80, 82]. They
suffer from three fundamental limitations: (i) biased phishing
datasets used for training leads to biased models, (ii) keep-
ing the model up-to-date requires continuous supply of large
labelled phishing datasets, and (iii) there is no explanation
for the predicted results. In addition, note that similar looking
webpages can be rendered via very different HTML scripts.
This leads to technical challenges in inferring the visual se-
mantics of webpages, affecting detection accuracy. Besides,
attackers can easily adopt evasion techniques for deceiving
such solutions [38, 68].
In contrast, phishing identiﬁcation solutions maintain a ref-
erence set of brands (or their webpages) targeted by phishing
attacks; based on such a legitimate reference database a model
is built. Subsequently, in operation, if the model predicts that
a given webpage is similar to that of a speciﬁc brand in the
reference database, but yet has a domain name that is different
from the identiﬁed brand, then the webpage is classiﬁed as
a phishing page [11, 13, 21, 46, 59, 74]. The goal of phish-
ing identiﬁcation models is to go beyond detecting phishing
pages, and also identify the phishing targets.
Some of the early phishing identiﬁcation proposals com-
pare the screenshot of a given webpage to the screenshots of
all the webpages in the reference database. For example, Fu
et al. [21] propose to compute the similarity of screenshots
of two webpages using Earth Mover’s Distance (EMD) tech-
nique. However, such an approach is limited by the fact that
webpages and their contents are dynamic and also updated
frequently [20,64]. This results in lower accuracy; in addition,
the computational overhead increases with the increase in
USENIX Association
30th USENIX Security Symposium    3793
Figure 1: Problem of SIFT-based identiﬁcation approach. It
takes a logo (left) and a screenshot (right), and checks whether
the screenshot contains such a logo. SIFT ﬁrst extracts fea-
ture points from the logo and the screenshot, then matches
their feature points to recognize whether the given logo ap-
pears in the screenshot. The red lines between the logo and
the screenshot show the matching relations between the re-
spective feature points. In this ﬁgure, the Verizon logo does
not appear in the screenshot. However, SIFT matches many
irrelevant feature points and reports a wrong match.
the number of referenced screenshots (see Section 5.2.3 for
our experimental evaluations). More recent works therefore
moved to the use of the very identity of brands — logos — for
the purpose of phishing identiﬁcation [11, 13, 16, 74]. Com-
parison of logos of a suspicious website to that of the brands
in a reference database is tolerant to variations in webpages
and their designs. Besides, with the advent of techniques such
as Scale-Invariant Feature Transform (SIFT), it is possible to
compare images that have differences in scale and orientation.
However, SIFT-based approaches [11, 74] are not only com-
putationally expensive (our experiments show that it takes
around 19 seconds for processing each screenshot; see Ta-
ble 2), but are also inaccurate. As illustrated in Figure 1, SIFT
often does not extract the relevant feature points to match
reference logos. This is also reﬂected in our experimental
evaluations (Section 5.2.3).
Addressing the limitations of the current state-of-the-art
research on phishing identiﬁcation, in this work we propose
Phishpedia, a practical and explainable phishing identiﬁcation
system. We design Phishpedia as a hybrid deep learning sys-
tem which consists of two pipelined deep learning models for
identifying phishing pages. More speciﬁcally, we decompose
the phishing identiﬁcation problem into i) an identity logo
recognition problem, and (ii) a brand recognition problem. We
address the former with customized object detection model
and the latter with a transfer-learning based Siamese model.
The hybrid deep learning system allows Phishpedia to achieve
high accuracy in identifying phishing attempts and their tar-
gets. And very importantly, Phishpedia achieves this without
requiring any phishing dataset for training the models, thus
avoiding potential biases in phishing samples (see discussion
in Section 6.4). Besides, Phishpedia also provides explain-
Figure 2: Screenshot of Phishpedia, highlighting the iden-
tity logo annotated with the phishing target brand and the
input boxes for providing user credentials. It also generates a
warning of how the attacker is disguising the domain name.
able visual annotations on the phishing page screenshot (see
Figure 2 for a sample output from our system). Furthermore,
since deep-learning based image recognition solutions are
prone to evasion attacks [24, 25, 48], we also incorporate a
gradient masking technique on to Phishpedia to counter ad-
versarial attacks (Section 3.3). Finally, given a screenshot and
its URL, Phishpedia predicts within 0.2 second, which also
makes it more practical than existing solutions.
We conduct comprehensive experiments to evaluate Phish-
pedia. First, we compare Phishpedia with state-of-the-art
phishing identiﬁcation approaches (i.e., EMD, PhishZoo, and
LogoSENSE) using six months of phishing URLs obtained
from OpenPhish premium subscription. The experiments
show that Phishpedia signiﬁcantly outperforms the baseline
approaches in terms of identiﬁcation accuracy and runtime
overhead. Second, we show that our hybrid deep learning sys-
tem is able to defend some well-known gradient-based adver-
sarial attacks such as DeepFool [48], JSMA [24], StepLL [34],
and FGSM [35]. Third, we conduct a phishing discovery ex-
periment where we run Phishpedia with ﬁve phishing detec-
tors/identiﬁers to look for new phishing webpages in the wild.
The results show that Phishpedia has a huge performance ad-
vantage over the baselines in discovering new phishing pages
on the Internet. In comparison to other solutions, Phishpedia
reports much more phishing webpages and with much less
false positives — Phishpedia discovered 1,704 phishing web-
pages within 30 days and 1,133 of them are not detected by
any engines in VirusTotal [9]. Moreover, 74.6% of them were
not reported by VirusTotal even after one week.
We summarize our contributions in this work:
• We propose a phishing identiﬁcation system Phishpe-
dia, which has high identiﬁcation accuracy and low run-
time overhead, outperforming the relevant state-of-the-
art identiﬁcation approaches.
3794    30th USENIX Security Symposium
USENIX Association
Figure 3: Phishpedia framework: a hybrid deep learning system consisting of pipelined object detection model and Siamese
model (highlighted red boxes).
• We prototype our Phishpedia system, which provides
explainable annotations on webpage screenshot for ex-
plaining the phishing report, facilitating its practical use.
For example, with Phishpedia, a security analyst or a
user has readily available easy explanations that tell why
a page is classiﬁed as a phishing attempt.
• We conduct a systematic evaluation of Phishpedia us-
ing six months of phishing URLs obtained from Open-
Phish (Premium service). The experiments demonstrate
the effectiveness and efﬁciency of our proposed system.
Besides, Phishpedia discovers 1,704 real phishing web-
pages within 30 days.
• To the best of our knowledge, we collected the largest
phishing dataset for evaluating phishing identiﬁcation so-
lutions (i.e., including phishing brand information). We
publish two datasets [7] for cyber-security and AI com-
munity: (i)(cid:24)30K phishing webpages with their phishing
brands, screenshots and HTML contents, and (ii) the la-
belled identity logos in over 30K webpage screenshots.
2 Overview of Phishpedia
2.1 Threat model
The threat model considered in this work is the following.
An attacker constructs a fake webpage W that disguises as a
legitimate website W of a particular brand (e.g., Paypal). The
constructed webpage W has a user interface, more speciﬁcally,
a form with input boxes, that allows a user to input credential
information (e.g., username, password, bank account details,
etc.). The attacker then sends the URL of the webpage W to
many users, via e-mail, social networks, etc. A user obtaining
such a link becomes a victim when she clicks on the URL of
this phishing page and provides sensitive account information
corresponding to the legitimate website W . Our goal is to
detect such a phishing webpage, identify the target brand, and
generate intuitive annotations for explaining the reason(s) for
classifying the webpage as a phishing page.
2.2 Overview
Figure 3 provides an overview of our proposed system, Phish-
pedia. Phishpedia takes as input a URL and a target brand
list describing legitimate brand logos and their web domains;
it then generates a phishing target (if the URL is considered
as phishing) as output. We refer to the logo that identiﬁes
with the legitimate brand as the identity logo of that brand.
Moreover, input boxes are the small forms where a user inputs
credential information such as username and password.
Given a URL, we ﬁrst capture its screenshot in a sandbox.
Then, we decompose the phishing identiﬁcation task into two:
an object-detection task and an image recognition task. First,
we detect important UI components, speciﬁcally identity logos
and input boxes, in the screenshot with an object detection
algorithm [57, 58] (Section 3.1). As the next step, we identify
the phishing target by comparing the detected identity logo
with the logos in the target brand list via a Siamese model [33]
(Section 3.2). Once a logo in the target brand list (e.g., that
of Paypal) is matched, we consider its corresponding domain
(e.g., paypal.com) as the intended domain for the captured
screenshot. Subsequently, we analyze the difference between
the intended domain and the domain of the given URL to
report the phishing result. Finally, we combine the reported
identity logo, input box, and phishing target to synthesize a
visual phishing explanation (as shown in Figure 2).
3 Design and development of Phishpedia
3.1 Detection of UI components
We ﬁrst explain some important concepts. An object detection
model takes as input an image and generates a set of bounding
boxes to annotate the position and size of the objects on
the image. In our problem setting, the image is a webpage
screenshot and objects of interest are either logos or input
boxes. The model is to generate a bounding box for each
object (i.e., logo or input box) with a conﬁdence score.
We analyze multiple solutions for detecting the position
and shape of a logo and input box [83], and we select Faster-
USENIX Association
30th USENIX Security Symposium    3795
Suspicious URLScreenshot CaptureTarget Domain ListURL ScreenshotUI Component DetectionIdentity LogoInput BoxBrand RecognitionIntended DomainPhishing ExplanationDomain Diff AnalysisInputOutputPhishing TargetLegendartifactprocessinput/output relationDeep Object Detection ModelDeep Siamese ModelFigure 4: Faster-RCNN model for logo/input box detection
RCNN model [58] to solve this problem as it is best in meeting
our requirement of reporting logos completely. We compare
Faster-RCNN model with other candidates in Section 5.5. We
brieﬂy describe its network structure for explaining how we
apply it to detect logos and input boxes.
Figure 4 presents the network structure of Faster-RCNN; it
is a two-stage object detection model, consisting of a region
proposal network (RPN) [58] and a Fast RCNN model [23].
Given an input screenshot, we use a backbone network (e.g.,
Resnet50 [28]) to transform the input screenshot into a fea-
ture map of shape M (cid:2) M (cid:2) c, where M denotes the size of
the feature map and c denotes the channel size. Taking the
feature map as input, Faster-RCNN uses RPN to predict a
set of bounding boxes on the input screenshot, presenting a
set of “objects” for the screenshot. As shown in Figure 4,
for each bounding box (grey rectangles), RPN will report an
objectness score to indicate its probability of containing an
object (i.e., UI component in our settings) and its shape. Then,
the Fast-RCNN model takes the input of the output feature
map and bounding boxes to (i) predict the object class (i.e.,
logo or input box) and (ii) reﬁne shape and size of each object.
Readers can refer to [58] for more details of Faster-RCNN.
As a result, given a screenshot, the Faster-RCNN model
reports a set of candidate logos L = fl1;l2; :::;lng; each li
(i 2 [1;n]) is attached with a conﬁdence score. We rank the
logos by their score and take the top one as the identity logo.
3.2 Brand recognition
The target brand list consists of multiple brands considered
for phishing identiﬁcation. For each brand, we maintain a
list of logo variants and a list of legitimate domains, for two
reasons. First, maintaining multiple brand logo variants al-
lows us to match logo images in a more precise and ﬂexible
way. Second, a brand can correspond to multiple legitimate
domains. For example, the brand Amazon can have domains
such as “amazon.com” and “amazon.jp.co”. Capturing such
information allows us to reduce false positives.
Given a reported identity logo l, if its similarity with a logo