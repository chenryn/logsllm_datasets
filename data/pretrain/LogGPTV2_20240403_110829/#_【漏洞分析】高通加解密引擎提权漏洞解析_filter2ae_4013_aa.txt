# 【漏洞分析】高通加解密引擎提权漏洞解析
##### 译文声明
本文是翻译文章，文章来源：iceswordlab.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
作者：[jiayy(@chengjia4574) ](https://twitter.com/chengjia4574)
****
**前言**
CVE-2016-3935 和 CVE-2016-6738 是我们发现的高通加解密引擎（Qualcomm crypto
engine）的两个提权漏洞，分别在2016年10月和11月的谷歌android漏洞榜被公开致谢，同时高通也在2016年10月和11月的漏洞公告里进行了介绍和公开致谢。这两个漏洞报告给谷歌的时候都提交了exploit并且被采纳，这篇文章介绍一下这两个漏洞的成因和利用。
**背景知识**
高通芯片提供了硬件加解密功能，并提供驱动给内核态和用户态程序提供高速加解密服务，我们在这里收获了多个漏洞，主要有3个驱动
    - qcrypto driver:  供内核态程序使用的加解密接口 
    - qcedev driver: 供用户态程序使用的加解密接口
    - qce driver:  与加解密芯片交互，提供加解密驱动底层接口
    Documentation/crypto/msm/qce.txt
      Linux kernel
      (ex:IPSec)|
                                                  |
                                                  | *qce    Qualcomm
                                                  | driver        ADM driver  ADM HW
                                              +-->|                 |               |
                                              |                     |               |
                                              |                     |               |
                                              |                     |               |
       Linux kernel                           |                     |               |
       misc device  addr_limit 大的属于内核态地址，比它小的属于用户态地址
2) linux kernel 用户态和内核态之间数据怎么传输？
不可以直接赋值或拷贝，需要使用规定的接口进行数据拷贝，主要是4个接口：
    copy_from_user/copy_to_user/get_user/put_user
这4个接口会对目标地址进行合法性校验，比如：
    copy_to_user = access_ok + __copy_to_user // __copy_to_user 可以理解为是memcpy
下面看漏洞代码
    file: drivers/crypto/msm/qcedev.c
    long qcedev_ioctl(struct file *file, unsigned cmd, unsigned long arg)
    {
    ...
            switch (cmd) {
            case QCEDEV_IOCTL_ENC_REQ:
            case QCEDEV_IOCTL_DEC_REQ:
                    if (!access_ok(VERIFY_WRITE, (void __user *)arg,
                                    sizeof(struct qcedev_cipher_op_req)))
                            return -EFAULT;
                    if (__copy_from_user(&qcedev_areq.cipher_op_req,
                                    (void __user *)arg,
                                    sizeof(struct qcedev_cipher_op_req)))
                            return -EFAULT;
                    qcedev_areq.op_type = QCEDEV_CRYPTO_OPER_CIPHER;
                    if (qcedev_check_cipher_params(&qcedev_areq.cipher_op_req,
                                    podev))
                            return -EINVAL;
                    err = qcedev_vbuf_ablk_cipher(&qcedev_areq, handle);
                    if (err)
                            return err;
                    if (__copy_to_user((void __user *)arg,
                                            &qcedev_areq.cipher_op_req,
                                            sizeof(struct qcedev_cipher_op_req)))
                                    return -EFAULT;
                    break;
    ...
            }
            return 0;
    err:
            debugfs_remove_recursive(_debug_dent);
            return rc;
    }
当用户态通过 ioctl 函数进入 qcedev 驱动后，如果 command 是 **QCEDEV_IOCTL_ENC_REQ** （加密）或者
**QCEDEV_IOCTL_DEC_REQ** （解密），最后都会调用函数 **qcedev_vbuf_ablk_cipher** 进行处理。
    file: drivers/crypto/msm/qcedev.c
    static int qcedev_vbuf_ablk_cipher(struct qcedev_async_req *areq,
                                                    struct qcedev_handle *handle)
    {
    ...
            struct  qcedev_cipher_op_req *creq = &areq->cipher_op_req;
            /* Verify Source Address's */
            for (i = 0; i cipher_op_req.entries; i++)
                    if (!access_ok(VERIFY_READ,
                            (void __user *)areq->cipher_op_req.vbuf.src[i].vaddr,
                                            areq->cipher_op_req.vbuf.src[i].len))
                            return -EFAULT;
            /* Verify Destination Address's */
            if (creq->in_place_op != 1) {
                    for (i = 0, total = 0; i cipher_op_req.vbuf.dst[i].vaddr != 0) &&
                                                    (total data_len)) {
                                    if (!access_ok(VERIFY_WRITE,
                                            (void __user *)creq->vbuf.dst[i].vaddr,
                                                    creq->vbuf.dst[i].len)) {
                                            pr_err("%s:DST WR_VERIFY err %d=0x%lxn",
                                                    __func__, i, (uintptr_t)
                                                    creq->vbuf.dst[i].vaddr);
                                            return -EFAULT;
                                    }
                                    total += creq->vbuf.dst[i].len;
                            }
                    }
            } else  {
                    for (i = 0, total = 0; i entries; i++) {
                            if (total data_len) {
                                    if (!access_ok(VERIFY_WRITE,
                                            (void __user *)creq->vbuf.src[i].vaddr,
                                                    creq->vbuf.src[i].len)) {
                                            pr_err("%s:SRC WR_VERIFY err %d=0x%lxn",
                                                    __func__, i, (uintptr_t)
                                                    creq->vbuf.src[i].vaddr);
                                            return -EFAULT;
                                    }
                                    total += creq->vbuf.src[i].len;
                            }
                    }
    }
            total = 0;