假设你将根据收盘价进行买卖。
![Validation function](/data/attachment/album/202103/28/094055jx5yz5ctp8qctej9.png "Validation function")
*回测功能*
在此示例中，`buy_factor` 和 `sell_factor` 是预先定义好的。因此，发散思维用直接计算出表现最佳的参数。
![Nested for loops for determining the buy and sell factor](/data/attachment/album/202103/28/094055b6i0t6cqv5ffhbwq.png "Nested for loops for determining the buy and sell factor")
*嵌套的 for 循环，用于确定购买和出售的参数*
这要跑 81 个循环（9x9），在我的机器（Core i7 267QM）上花费了几分钟。
![System utilization while brute forcing](/data/attachment/album/202103/28/094055bquv9iyqi0rbtqth.png "System utilization while brute forcing")
*在暴力运算时系统的利用率*
在每个循环之后，它将 `buy_factor`、`sell_factor` 元组和生成的 `profit` 元组追加到 `trading_factors` 列表中。按利润降序对列表进行排序。
![Sort profit with related trading factors in descending order](/data/attachment/album/202103/28/094056ze0gzqu9vgg22v2w.png "Sort profit with related trading factors in descending order")
*将利润与相关的交易参数按降序排序*
当你打印出列表时，你会看到 0.002 是最好的参数。
![Sorted list of trading factors and profit](/data/attachment/album/202103/28/094056oxlihvaiixwg84jw.png "Sorted list of trading factors and profit")
*交易要素和收益的有序列表*
当我在 2020 年 3 月写下这篇文章时，价格的波动还不足以呈现出更理想的结果。我在 2 月份得到了更好的结果，但即使在那个时候，表现最好的交易参数也在 0.002 左右。
### 分割执行路径
现在开始新建一个网格以保持逻辑清晰。使用 **返回** 元素将带有 EMA-25 列的 DataFrame 从网格 2 传递到网格 3 的 0A 元素。
在网格 3 中，添加 **基础操作** 元素以执行评估逻辑。这是该元素中的代码：
![Implemented evaluation logic](/data/attachment/album/202103/28/094056ofn26ububue22fuz.png "Implemented evaluation logic")
*实现评估策略*
如果输出 `1` 表示你应该购买，如果输出 `2` 则表示你应该卖出。 输出 `0` 表示现在无需操作。使用    分支    Branch  元素来控制执行路径。
![Branch element: Grid 3 Position 2A](/data/attachment/album/202103/28/094056q3tp37wwlz0b0on1.png "Branch element: Grid 3 Position 2A")
*分支元素：网格 3，2A 位置*
因为 `0` 和 `-1` 的处理流程一样，所以你需要在最右边添加一个分支元素来判断你是否应该卖出。
![Branch element: Grid 3 Position 3B](/data/attachment/album/202103/28/094057stk7jj4nlwnk2puw.png "Branch element: Grid 3 Position 3B")
*分支元素：网格 3，3B 位置*
网格 3 应该现在如下图所示：
![Workflow on Grid 3](/data/attachment/album/202103/28/094057fe1wnzar6x664rnz.png "Workflow on Grid 3")
*网格 3 的工作流程*
### 下单
由于无需在一个周期中购买两次，因此必须在周期之间保留一个持久变量，以指示你是否已经购买。
你可以利用    栈    Stack  元素来实现。顾名思义，栈元素表示可以用任何 Python 数据类型来放入的基于文件的栈。
你需要定义栈仅包含一个布尔类型，该布尔类型决定是否购买了（`True`）或（`False`）。因此，你必须使用 `False` 来初始化栈。例如，你可以在网格 4 中简单地通过将 `False` 传递给栈来进行设置。
![Forward a False-variable to the subsequent Stack element](/data/attachment/album/202103/28/094057yiszipdxx9dxizfw.png "Forward a False-variable to the subsequent Stack element")
*将 False 变量传输到后续的栈元素中*
在分支树后的栈实例可以进行如下配置：
![Configuration of the Stack element](/data/attachment/album/202103/28/094058xquob8epsfqzopif.png "Configuration of the Stack element")
*设置栈元素*
在栈元素设置中，将  对输入的操作   Do this with input  设置成  无   Nothing 。否则，布尔值将被 `1` 或 `0` 覆盖。
该设置确保仅将一个值保存于栈中（`True` 或 `False`），并且只能读取一个值（为了清楚起见）。
在栈元素之后，你需要另外一个 **分支** 元素来判断栈的值，然后再放置  币安订单   Binance Order  元素。
![Evaluate the variable from the stack](/data/attachment/album/202103/28/094058vwu6v7ii6kvwwx9a.png "Evaluate the variable from the stack")
*判断栈中的变量*
将币安订单元素添加到分支元素的 `True` 路径。网格 3 上的工作流现在应如下所示：
![Workflow on Grid 3](/data/attachment/album/202103/28/094059oreu9efclcs5glo9.png "Workflow on Grid 3")
*网格 3 的工作流程*
币安订单元素应如下配置：
![Configuration of the Binance Order element](/data/attachment/album/202103/28/094059cc5ntnvbsqriu43w.png "Configuration of the Binance Order element")
*编辑币安订单元素*
你可以在币安网站上的帐户设置中生成 API 和密钥。
![Creating an API key in Binance](/data/attachment/album/202103/28/094059dlcgcx40e8eeb4bu.png "Creating an API key in Binance")
*在币安账户设置中创建一个 API 密钥*
在本文中，每笔交易都是作为市价交易执行的，交易量为 10,000 TRX（2020 年 3 月约为 150 美元）（出于教学的目的，我通过使用市价下单来演示整个过程。因此，我建议至少使用限价下单。）
如果未正确执行下单（例如，网络问题、资金不足或货币对不正确），则不会触发后续元素。因此，你可以假定如果触发了后续元素，则表示该订单已下达。
这是一个成功的 XMRBTC 卖单的输出示例：
![Output of a successfully placed sell order](/data/attachment/album/202103/28/094059o026ikbaqx3ak6e4.png "Output of a successfully placed sell order")
*成功卖单的输出*
该行为使后续步骤更加简单：你可以始终假设只要成功输出，就表示订单成功。因此，你可以添加一个 **基础操作** 元素，该元素将简单地输出 **True** 并将此值放入栈中以表示是否下单。
如果出现错误的话，你可以在日志信息中查看具体细节（如果启用日志功能）。
![Logging output of Binance Order element](/data/attachment/album/202103/28/094100lksn1anu9npa99aw.png "Logging output of Binance Order element")
*币安订单元素中的输出日志信息*
### 调度和同步
对于日程调度和同步，请在网格 1 中将整个工作流程置于  币安调度器   Binance Scheduler  元素的前面。
![Binance Scheduler at Grid 1, Position 1A](/data/attachment/album/202103/28/094100vg5oseqx5mmongua.png "Binance Scheduler at Grid 1, Position 1A")
*在网格 1，1A 位置的币安调度器*
由于币安调度器元素只执行一次，因此请在网格 1 的末尾拆分执行路径，并通过将输出传递回币安调度器来强制让其重新同步。
![Grid 1: Split execution path](/data/attachment/album/202103/28/094100wq624z79q2732w6b.png "Grid 1: Split execution path")
*网格 1：拆分执行路径*
5A 元素指向 网格 2 的 1A 元素，并且 5B 元素指向网格 1 的 1A 元素（币安调度器）。
### 部署
你可以在本地计算机上全天候 7×24 小时运行整个程序，也可以将其完全托管在廉价的云系统上。例如，你可以使用 Linux/FreeBSD 云系统，每月约 5 美元，但通常不提供图形化界面。如果你想利用这些低成本的云，可以使用 PythonicDaemon，它能在终端中完全运行。
![PythonicDaemon console interface](/data/attachment/album/202103/28/094101rmm0m11k2so4r1yp.png "PythonicDaemon console interface")
*PythonicDaemon 控制台*
PythonicDaemon 是基础程序的一部分。要使用它，请保存完整的工作流程，将其传输到远程运行的系统中（例如，通过 安全拷贝协议   Secure Copy  SCP），然后把工作流程文件作为参数来启动 PythonicDaemon：
```
$ PythonicDaemon trading_bot_one
```
为了能在系统启动时自启 PythonicDaemon，可以将一个条目添加到 crontab 中：
```
# crontab -e
```
![Crontab on Ubuntu Server](/data/attachment/album/202103/28/094101gpj5vpvp3vps33ut.png "Crontab on Ubuntu Server")
*在 Ubuntu 服务器上的 Crontab*
### 下一步
正如我在一开始时所说的，本教程只是自动交易的入门。对交易机器人进行编程大约需要 10％ 的编程和 90％ 的测试。当涉及到让你的机器人用金钱交易时，你肯定会对编写的代码再三思考。因此，我建议你编码时要尽可能简单和易于理解。
如果你想自己继续开发交易机器人，接下来所需要做的事：
* 收益自动计算（希望你有正收益！）
* 计算你想买的价格
* 比较你的预订单（例如，订单是否填写完整？）
你可以从 [GitHub](https://github.com/hANSIc99/Pythonic) 上获取完整代码。
---
via: 
作者：[Stephan Avenwedde](https://opensource.com/users/hansic99) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wyxplus](https://github.com/wyxplus) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出