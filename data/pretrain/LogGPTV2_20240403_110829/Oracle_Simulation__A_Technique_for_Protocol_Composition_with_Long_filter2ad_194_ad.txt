=4 Pc,v
=5 Pc,v
ρs,ρr,ρO (DO,OP (ρs0 ,ρs1 ,ρs2 ),OQ(ρs0 ,ρs1 ,0)(ρr, 1η))
ρs1 ,ρs2 ,ρr,ρO (DO,OP (ρs0 ,0,ρs2 ),OQ(ρs0 ,ρs1 ,0)(ρr, 1η))
ρs1 ,ρs2 ,ρr,ρO (DO,OP (v,0,ρs2 ),OQ(v,ρs1 ,0)(ρr, 1η))
ρsQ,ρs,ρrD,ρO (DO,OP (v,0,ρs),OQ(v,ρsQ,0)(ρr, 1η))
ρs,ρr,ρO ([D]
(ρr, 1η)) (ii)
O,OP (ρs)
n
Since
1. OQ does not access ρs2
2. OP does not access ρs1
3. We are sampling under the assumption that [[n]]η
4. Renaming of tapes
ρs = v, i.e., ρs0
is equal to v.
5. By construction
And we also have similarly that, for any c:
Pρs,ρr,ρO{D[AO
= Pρs,ρr,ρO{[D[AO
P ]]O
By applying the left-handside of (1) to [D]
v (ρr, 1η), and using
(ii) and (iii), we can conclude by transitivity. We conclude the proof of the lemma by putting
Part 1 and Part 2 together.
P ]O,OQ(ρr, 1η) = c | [[n]]η
v (ρr, 1η) = c | [[n]]η
O,OP (ρs)
n
ρs = v}
ρs = v} (iii)
(ρr, 1η) and [D[AO
P ]j]O
We now prove the converse direction.
18
Lemma 11. Given an oracle O with support n, a cryptographic library Mf , protocols P, Q
such that N (P ) ∩ N (Q) ⊂ n, if there is a PTOM AO
P such that, for every PTOM DO,OP ,OQ,
for every η, every v ∈ Dη
n and every c ∈ {0, 1}(cid:63),
Pρs,ρr,ρO{DO,OP ,OQ(ρr, 1η) = c | [[n]]η
ρs = v}
P ]O,OQ(ρr, 1η) = c | [[n]]η
= Pρs,ρr,ρO{D[AO
ρs = v}
then νn.P is O-simulatable.
Proof. Let B be a PTOM, η, an interpretation v ∈ Dη
and m ∈ N , we must prove that the
output distribution of B will be the same whether it interacts m-th time with AO
or OP .
We deﬁne D as follows. For i := 0 to m − 1, D computes wi := B(α1, . . . , αi). Then D calls
OP with wi and let αi+1 be the reply. D ﬁnally outputs αm. We denote by w(cid:48)
the
corresponding values for D[AO
and α(cid:48)
P
n
i
i
Let us denote
P ]O,OQ
k,OP (ρs, θ2
k)
k+1 = φ2
φ2
k,AO(ρs,ρO)(Mf , ρr1, θ1
k, η)
k,BO(ρs,ρO)(Mf , ρr2, η, φi
k)
k+1 = φ1
φ1
k+1 = θi
θi
for 0 ≤ k < m and φ0 = θ0 = ∅.
We have by construction of D for any c:
Pρs,ρr1 ,ρr2 ,ρO{wm = c | [[n]]η
and
m = c | [[n]]η
Pρs,ρr1 ,ρr2 ,ρO{w(cid:48)
m) = c | [[n]]η
ρs = v} = Pρs,ρr1 ,ρr2 ,ρO{OP (ρs, θ2
ρs = v} = Pρs,ρr1 ,ρr2 ,ρO{AO(ρs,ρO)(Mf , ρr1, θ1
ρs = v}
m, η) = c | [[n]]η
ρs = v}
The hypothesis gives us that :
Pρs,ρr1 ,ρr2 ,ρO{wm = c | [[n]]η
ρs = v} = Pρs,ρr1 ,ρr2 ,ρO{w(cid:48)
m = c | [[n]]η
ρs = v}
So we conclude that:
Pρs,ρr1 ,ρr2 ,ρO{AO(ρs,ρO)(Mf , ρr1, θ1
= Pρs,ρr1 ,ρr2 ,ρO{OP (ρs, θ2
m, η) = c | [[n]]η
ρs = v}
m) = c | [[n]]η
ρs = v}
We can ﬁnally conclude, as Lemmas 10 and 11 directly yields that Deﬁnition 8 is equivalent
to Deﬁnition 8 simply by taking Q as the empty protocol.
Example 3.1. We ﬁx ﬁrst Mf (in an arbitrary way). We consider the following handshake
protocol, in which n, r, k, r(cid:48) are names:
A := in (cA, x0).out(cA, enc(n, r, k)). in (cA, x).
(cid:107) B := in (cB, y).out(cB, enc((cid:104)dec(y, k), 1(cid:105) , r(cid:48), k))
if dec(x, k) = (cid:104)n, 1(cid:105) then out(cA, ok)
We consider the oracle Oenc,dec
that, when receiving (cid:104)t, m(cid:105) as input, answers enc(m, ro, k)
if t = "enc", and dec(m, l) if t = "dec" (the oracle actually also expects an handle for
the secret key and a tag to specify where to sample ro). We can easily prove that νk.A is
k
19
k
Oenc,dec
-simulatable, as the attacker can sample an arbitrary n(cid:48), use the oracle to compute
enc(n(cid:48), ro, k) (which has the same distribution as enc(n(cid:48), r, k) for any ﬁxed value of k) with
the request (cid:104)"enc", n(cid:105), and dec(x, k) with the request (cid:104)"dec", x(cid:105).
the oracle, and A is thus O-simulatable.
Intuitively, the shared secret k is only used in A in ways that are directly simulatable with
Thanks to the more intuitive Deﬁnition of simulatability (cf. Deﬁnition 8 for details),
proving simulatability is in practice a syntactic veriﬁcation. With Oenc,dec
from the previous
example, νk.P is O-simulatable for any P where all occurrences of k occurs at key position,
and all encryptions use fresh randoms.
k
Let us explain why the previous examples illustrate the need for preﬁxed models.
Example 3.2. We take a more formal view on Example 3.1.
Let O be the encryption-decryption oracle: it expects an input (cid:104)"dec", m(cid:105) or (cid:104)"enc", m(cid:105),
a key s = 1 (only one encryption key is considered), an input tag t and a security parameter
η and returns
• enc(m, r, k) if the query is preﬁxed by "enc", k is the secret value extracted from ρs
corresponding to the key 1, r is drawn from ρO and associated with the tag t (via e1).
• dec(m, k) if the query is preﬁxed by "dec", k is the secret value extracted from ρs
corresponding to the key 1
• an error message otherwise (either the primitives fail or the query does not have the
expected format).
A).
The goal is to show that νk.A is O-simulatable. (So, here, B is useless, and we let P be
OP is then deﬁned as follows:
• On input w1, with an empty history, it outputs [[enc(n, r, k)]]η
ρs
and writes w1 on the
history tape.
ρs
• On input w2 with a non empty history tape,
and an error otherwise.
[[(cid:104)n, 1(cid:105)]]η
The machine AO(ρr1, θ, η) is then deﬁned as follows:
• If θ = {m1}
it outputs ok if [[dec(x, k)]]η,x(cid:55)→w2
ρs
=
1. A draws α (for the value of n) from ρr1
2. calls O with ((cid:104)"enc", α(cid:105) , 1, t) and gets back the bitstring [[enc(n, r, z)]]η,z(cid:55)→[[k]]η
.
ρr1 ,ρO
The interpretation of k is indeed ﬁxed at once since it belongs to the “shared”
names bounded by ν.
and draws t from ρr1
ρs
3. outputs [[enc(x, r, z)]]η,x(cid:55)→α,z(cid:55)→[[k]]η
ρs
ρr1
• If θ = (m1, m2),
1. calls O with ((cid:104)"dec", m2(cid:105) , 1,−) and gets back the bitstring w = [[dec(y, z)]]y(cid:55)→m2,z(cid:55)→[[k]]η
ρs
or an error message.
20
2. checks whether w = [[(cid:104)n, 1(cid:105)]]η
ρr1
Now, consider an arbitrary PTOM BO.
• φ1
. If it is the case, then outputs ok.
ρr1
1 = [[enc(n, x, k)]]η,x(cid:55)→s1
where s1 is the randomness used by O when queried with [[t]]ρr1
(note: we will see that it does matter to be very precise here; we cannot simply claim
that the value of x is just a randomness drawn by O).
1 = [[enc(n, r, k)]]η
ρs
i = wi, an arbitrary bitstring, computed by BO using the oracle O, φ1
tape ρr2
2 = φ1
[[dec(y, z)]]y(cid:55)→w1,z(cid:55)→[[k]]η
otherwise
ρs = [[(cid:104)n, 1(cid:105)]]η
ρr1
.
1, ok if
and the random
and an error
i
• φ2
• θ1
• φ1
2 = φ2
1, ok if [[dec(x, k)]]η,x(cid:55)→w2
= [[(cid:104)n, 1(cid:105)]]η
• φ2
ρs
A O-simulates νk.P iﬀ, for every v = [[k]]ρs
,
ρs
and an error otherwise
ρs
and ρO, while φ2
}
Pρs,ρr1,ρr2 ,ρO{[[dec(y, z)]]y(cid:55)→w1,z(cid:55)→v = [[(cid:104)n, 1(cid:105)]]η
ρr1
= Pρs,ρr1 ,ρr2,ρO{[[dec(x, k)]]η,x(cid:55)→w2
ρs}
= [[(cid:104)n, 1(cid:105)]]η
are identical. φ1
1
1, [[(cid:104)n, 1(cid:105)]]ρr1
1, ρr2), [[(cid:104)n, 1(cid:105)]]ρr1
and ρr2
depends on ρr1
1, [[(cid:104)n, 1(cid:105)]]ρs
and φ2
and w2 = BO(φ1
First, the distributions of φ1
and φ2
1
1
Now the distributions w1 = BO(φ1
are also identical.
2, ρr2), [[(cid:104)n, 1(cid:105)]]ρs
depends on ρs only. The distributions of φ1
are
equal if the randomness used by B are disjoint from the random coins used in φ1
. This is
why there is an assumption that ρr1
are disjoint and why it should be the case that
the random coins used in the oracle queries of B are distinct from the ones used in the oracle
queries of A. This can be ensured by the disjointness of tags used by A and B respectively.
With these assumptions, we get the identity of the distributions of dec(w1, v), [[(cid:104)n, 1(cid:105)]]ρs
and dec(w2, v), [[(cid:104)n, 1(cid:105)]]ρs
Without these assumptions (for instance non-disjointness of tags used by B, A), B can
query O with a random input and a random tag, say n(cid:48), t(cid:48). As above, we let s1 be the random
value drawn by O corresponding to the tag t(cid:48). Then P{[[n]]ρs = n(cid:48) ∧ [[r]]ρs = s1} = 1
22η while
= [[r(cid:48)]]ρO )}
, hence the desired result.
= n(cid:48) ∧ [[r]]ρr1
P{[[n]]ρr1
(cid:54)= [[t(cid:48)]]ρr2
∧ [[r]]ρr1
1, φ2
1
1
= s1} = 1
= 1
= 1
2η P{[[t]]ρr1
2η × ( 1
2η + 2η−1
22η (2 − 1
2η )
∨ ([[t]]ρr1
= [[t(cid:48)]]ρr2
2η × 1
2η )
In other words, the collision is more likely to occur since it can result from either a collision
in the tags or a collision in the randomness corresponding to diﬀerent tags.
As demonstrated in the previous example, it is necessary to assume that oracle random-
ness used by the simulator queries and the attacker queries are disjoint. The simplest way
of ensuring this is to force all tags of oracle calls to be preﬁxed. We show here that this
assumption can be made without loss of generality.
21
as a copy of A,
Deﬁnition 12. Given a PTOM AO and a constant c. We deﬁne AO
except that all calls to the oracle of the form w, r, s are replaced with calls of the form w, c·r, s,
where the · denotes the concatenation of bitstrings.
pref−c
The following lemma shows that we can, w.l.o.g., consider models, in which the tags are
preﬁxed.
Lemma 13. For any non-empty constant c and any PTOM AO, we haves
Pρs,ρr,ρO{AO(ρs,ρO)(ρr, 1η) = 1} = Pρs,ρr,ρO{AO(ρs,ρO)
pref−c (ρr, 1η) = 1}
Proof. We ﬁx a constant c, for any oracle O (with functions n, e1, e2), we deﬁne Opref−c (with
mapping function n(cid:48), e(cid:48)
) the copy of O such that:
1, e(cid:48)
2
n(cid:48)(w, s, r) = n(w, s, c|r)
n is injective by deﬁnition, so n(cid:48) is injective too. For any v ∈ {0, 1}η, as all extractions of e1
are unique for each value of n and their length only depends on η, we have for any w, r, s
PρO{e1(n(w, s, r), η, ρO) = v} = PρO{e(cid:48)
1(n(cid:48)(w, s, r), η, ρO) = v}
This implies that for any input, O and Opref−c will produce the same output distribution.
So AO and AOpref−c will produce the same distributions for any input. We conclude by
remarking that AOpref−c and AO
behaves the same by construction.
pref−c
An immediate consequence of this Lemma is that for all indistinguishability results, we
can, w.l.o.g., constrain attackers to only use preﬁxed oracle calls.
In particular it implies equivalence between indistinguishability in a computational model
and indistinguishability for preﬁxed distinguishers in the preﬁxed computational model.
Thanks to the previous Deﬁnitions, simulatability is stable under composition operators.
This is an important feature of the notion of simulatability, as it allows to reduce the simulation
of large processes to the simulation of simpler processes.
Theorem 1. Given an oracle O, protocols P, Q, and n = N (P ) ∩ N (Q), if
• νn.P is O-simulatable
• νn.Q is O-simulatable
Then νn.P(cid:107)Q and νn.P ; Q are O-simulatable.
Proof. Let D be an arbitrary PTOM. By Lemma 10, there is a machine AO
s.t.
P
Pρs,ρr,ρO{DO,OP ,OQ(ρr, 1η) = c | [[n]]η
ρs = v}
P ]O,OQ(ρr, 1η) = c | [[n]]η