Finally, the client and the server mutually exchange the
Finished message containing a transcript of the handshake.
If the peers received different messages, possibly due to
tampering by an attacker, their transcripts will differ. Since
the communication is encrypted and authenticated with the
session keys at this point, the attacker cannot tamper with the
transcripts. The PMS is shared using a public key that is tied
to the identity of the server, hence the server authenticates by
using the PMS to compute the session keys.
B. Ciphersuites
A key ingredient of the Handshake Protocol is the negotia-
tion of the cryptographic mechanisms in the ciphersuite. The
most common algorithms are:
Key exchange: how to share the PMS:
RSA key exchange: the client
randomly generates a
PMS, encrypts it with the RSA public key of the server
obtained from the server’s trusted certiﬁcate, and sends
it in the ClientKeyExchange;
Static Difﬁe-Hellman key exchange – (EC)DH: the
DH parameters are deﬁned either on a prime ﬁeld
(DH) or on an elliptic curve (ECDH). The client
generates a random (EC)DH key and sends the public
part in the ClientKeyExchange. The public key
of the server is contained within its certiﬁcate. The
shared DH secret is used as the PMS;
Ephemeral Difﬁe-Hellman key exchange – (EC)DHE:
similar to the previous case, however the client and
the server generate fresh (ephemeral) (EC)DHE keys
and send them in the Client- and Server-
KeyExchange messages, respectively. The server
must sign its message with a private key corresponding
to its certiﬁcate. DHE uses RSA or DSA [60], ECDHE
uses RSA or ECDSA [60].
Conﬁdentiality and integrity: how messages sent over the
Record Protocol are protected:
Block ciphers in AEAD mode: Authenticated Encryp-
tion with Associated Data (AEAD) combines encryp-
tion and authentication in a single primitive. Examples
are AES in the GCM or CCM mode of operation;
Block ciphers in CBC mode with MAC: combination
of CBC mode of operation of a symmetric block
cipher with Keyed-hash Message Authentication Code
(HMAC) for authentication. The order of operations
is MAC-then-Pad-then-Encrypt. For example, AES,
Camellia, Triple-DES or DES in CBC mode combined
with HMAC based on SHA-2, SHA-1 or MD5;
Stream cipher with MAC: for
example, ChaCha20
with Poly1305 (that combine into an AEAD primitive)
or RC4 with HMAC based on SHA-1 or MD5.
III. ATTACK TREES FOR TLS SECURITY
We describe notable cryptographic attacks against TLS and
divide them by their impact on conﬁdentiality and integrity of
the communication. We discuss how the attacks are mitigated
by client conﬁguration and speciﬁc countermeasures, focusing
on attacks that fall under our threat model. See Appendix A
for out of scope attacks and Appendix B for more details on
the attacks introduced in this section.
A. Threat Model
We assume an active network attacker able to add, remove
or modify messages sent between a client and a server. The
attacker also controls a malicious website, say at evil.com,
which is navigated by the attacked client. By means of the
(cid:19)(cid:25)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
website, the attacker can inject scripts in the client from an
attacker-controlled origin, which is relevant for a subset of
the attacks. However, the attacker can neither break the Same
Origin Policy (SOP)1 nor exploit any bug in the browser. We
assume the attacker cannot exploit timing side-channels, since
the feasibility of such attacks is generally hard to assess.
The client is a modern browser that (i) supports TLS 1.0,
1.1, and 1.2 with key establishment based on ECDH and
AEAD ciphersuites (cf. MozillaWiki [89] for the purpose
of “Modern” compatibility); (ii) does not support SSLv3
or lower, does not offer weak or anonymous ciphersuites
(such as DES, RC4 and EXPORT ciphers, or suites without
encryption or authentication) and enforces a minimal key size
of cryptographic algorithms; (iii) correctly handles certiﬁcate
validation and rejects certiﬁcates with weak algorithms. All
the major browsers released in the last two years satisfy these
assumptions, starting from Firefox 44, Chrome 48, IE 11 on
Windows 7, Edge, Opera 35, Safari 10, and Android 6.0.
B. Review of Known Attacks against TLS
Protocol version downgrade: A TLS server should respond
to a ClientHello with the offered version of the protocol,
or the highest
it supports. However, some legacy servers
simply drop connections with unsupported TLS versions,
without offering an alternative. Thus, browsers may repeat the
handshake with a lower protocol version. An attacker in the
middle could drop ClientHello messages until the client
downgrades to an older, vulnerable version of the protocol.
To prevent this attack, the client attaches a fake ciphersuite
to repeated handshake attempts, as deﬁned in RFC 7507 [58],
indicating that the handshake did not use the highest client-
supported TLS version. The presence of that ciphersuite in
a ClientHello, with a TLS version that is lower than
the highest supported by the server, reveals a potential attack
and should be treated as such by the server. Safari, Internet
Explorer, and Edge fall back to TLS 1.0. Only Safari appends
the ciphersuite. Firefox, Chrome, and Opera, instead, removed
insecure fallback entirely when the ClientHello messages
are dropped.
RSA decryption oracles:
In the RSA key exchange, the
client chooses the PMS and sends it to the server, encrypted
under the server’s public RSA key. TLS uses the padding
scheme deﬁned in PKCS #1 v1.5 [47], which is known to
be vulnerable to a padding oracle attack [13]. The attack
is possible when the server provides a padding oracle, i.e.,
when it behaves differently when decrypting messages that
have invalid paddings. An attacker can multiply a ciphertext
to create a new ciphertext (RSA is malleable), until a new
correctly padded message is forged. When this happens, the
attacker learns partial information about the plaintext message
and the process can be iterated until the key exchange is
fully decrypted. The original attack was proposed by Ble-
ichenbacher in 1998 [13] and requires on the order of million
connections to decrypt a ciphertext. The attack was later
1https://developer.mozilla.org/docs/Web/Security/Same-origin policy
improved [5], [46], [50], [57], especially in the presence of
an oracle that does not strictly enforce the padding scheme
[5], to require on the order of tens of thousands of messages.
In our analysis, we only consider such strong version of the
oracle as exploitable.
RSA signature oracles: A very fast decryption oracle can
be used to compute RSA signatures. Hence, even without the
knowledge of the private key, an attacker can impersonate
the server in the (EC)DHE exchange with such oracle. The
attack applies to all TLS versions up to TLS 1.2. However, the
signature generation using a Bleichenbacher’s oracle is even
slower than the decryption [14]. Therefore, the attacker would
prefer the decryption of RSA key exchange, if supported by the
targeted host. Interestingly, a signature oracle makes it possible
to impersonate the target server even with other certiﬁcates
valid for that target (such as wildcard certiﬁcates).
Advanced RSA padding oracles – DROWN and key reuse:
When a server is vulnerable to the decryption oracle, all
servers that use the same RSA key for key encryption (e.g.,
due to using the same certiﬁcate) are vulnerable to the de-
cryption of the key exchange, even if they do not provide the
oracle directly. Furthermore, TLS can be enabled for other
application level protocols than HTTPS, such as email (SMTP,
POP3, and IMAP with STARTTLS, or SMTPS, IMAPS,
POP3S). The attack surface of the DROWN attack [4] was
in fact ampliﬁed by the possibility of using vulnerable servers
supporting SSLv2 in order to break servers running newer
protocol versions. DROWN uses the fact that SSLv2 provides
the padding oracle in combination with weak export grade
ciphersuites and speciﬁc OpenSSL bugs. The attack comes
in two variants, General and Special, requiring respectively
about 8 hours and less than a minute to complete. Thus, only
the Special case is suitable for Man In The Middle (MITM)
attacks. Not all handshakes are vulnerable: 1 out of 900, for
the General case, and 1 out of 260 for the Special case.
RSA padding oracle countermeasures: TLS 1.0 [25], 1.1
[26], and 1.2 [27] introduced countermeasures to remove the
padding oracle, instead of replacing the padding scheme. How-
ever, the ROBOT attack [14] has shown that a surprisingly high
number of implementations in the wild still present padding
oracles that can be used to decrypt RSA encrypted messages.
The attacks are partially mitigated by the support for Perfect
Forward Secrecy, typically by preferring the elliptic curve
Difﬁe-Hellman key establishment with ephemeral private keys
(ECDHE) over the RSA key exchange on the server side. Since
all modern web browsers support ECDHE cipher suites [89],
the RSA key exchange will be voluntarily negotiated only with
servers that prefer it due to lack of ECDHE support or bad
conﬁguration. It would be thus recommended to completely
disable RSA encryption at the server side [14].
CBC mode padding oracles: TLS uses the CBC mode of
operation of a symmetric block cipher with MAC-then-Pad-
then-Encrypt scheme for record-level encryption. Since the
padding is not covered by the MAC, changing the padding
does not change the integrity of the message, and could enable
a padding oracle vulnerability. A class of vulnerabilities of
(cid:19)(cid:25)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
the MAC-then-Pad-then-Encrypt construction was described
by Vaudenay [88] and Canvel et al. [21]. The attacks are
based on distinguishing failures due to bad padding and due
to failed integrity check. In TLS, the server should issue the
same response in both situations, however there are buggy
implementations (e.g., [79]) that produce different errors. The
POODLE attack [59] leverages the above padding oracle prob-
lem in combination with the fact that SSLv3 (and some ﬂawed
TLS implementations) only checks the last byte of padding.
Since a padding error ends in a termination of the session,
the attacker must be able to force the client to open a new
session every time she wants to make a guess. Furthermore, the
client must repeat the target secret s in every connection, e.g.,
when s is a secret cookie attached to every HTTPS request.
All CBC attacks can be mitigated in TLS 1.2 by supporting
either AEAD ciphersuites or stream ciphers that do not require
padding, on both servers and clients (as in modern browsers).
TLS version downgrades must also be mitigated, to prevent a
downgrade to a version that only supports CBC-mode ciphers.
Heartbleed: Due to memory management problems in
server implementations, an attacker could reveal the long-term
private keys of the server, thus allowing a full impersonation
of the server [83], [33].
C. Insecure Channels
To understand the import of cryptographic ﬂaws of TLS
on web application security, it is useful to categorize known
cryptographic attacks in terms of the security properties they
break. We propose three categories of insecure channels:
Leaky: a channel established with servers vulnerable to con-
ﬁdentiality attacks, which give the attacker the ability to
decrypt all the network trafﬁc (Section III-D);
Tainted: a channel susceptible to Man In The Middle (MITM)
attacks, which give the attacker the ability to decrypt and
arbitrarily modify all the network trafﬁc (Section III-E).
Tainted channels are also leaky;
Partially leaky: a channel exposing side-channels which give
the attacker the ability to disclose selected (small) secrets
over time. These channels typically rely on a secret
repetition assumption, because the attacker abuses the
exchange of repeated messages containing the secret on
the vulnerable channel (Section III-F). Leaky and tainted
channels also qualify as partially leaky.
In the rest of this section, we precisely characterize how
we mapped existing cryptographic attacks against TLS to the
proposed channel categories in terms of attack trees.
D. Leaky Channels
Channels are leaky when established with servers vulnerable
to attacks that fully compromise conﬁdentiality. The attacker
tries to obtain the PMS to learn the session keys, giving her
the ability to decrypt all the captured network trafﬁc.
Figure 2 shows the attack tree of conditions that enable the
attacker to learn the session keys. The main goal is listed on
the ﬁrst line. Each goal or sub-goal may have alternative ways
of reaching it (marked as logical OR ‘|’) or it may require
| 1 RSA key exchange is preferred in the
highest supported version of TLS
| 2 Downgrade is possible to a version of TLS
where RSA key exchange is preferred
& 2 RSA decryption oracle (DROWN or Strong
Bleichenbacher’s oracle) is available on:
| 1 This host
| 2 Another host with the same certificate
| 3 Another host with the same public RSA key
Fig. 2. Attack tree for leaky channels
GOAL Potential MITM (decryption and modification)
| 1 Force RSA key exchange by modifying ClientHello
and decrypt it before the handshake times out
& 1 RSA key exchange support in any TLS version
& 2 Fast RSA decryption oracle (Special DROWN or
Strong Bleichenbacher’s oracle) available on:
| 1 This host
| 2 Another host with the same certificate
| 3 Another host with the same public RSA key
| 2 Learn the session keys of a long lived session
& 1 Learn the session keys (Figure 2)
& 2 Client resumes the session
| 1 Session resumption with tickets
| 2 Session resumption with session IDs
GOAL Learn the session keys (allows decryption)
| 1 Decrypt RSA key exchange offline
& 1 RSA key exchange is used
| 3 Forge an RSA signature in the key establishment
& 1 Fast RSA signature oracle (Strong
Bleichenbacher’s oracle) is available on:
| 1 This host
| 2 Another host with the same certificate
| 3 Another host with the same public RSA key
| 4 A host with a certificate where the Subject
Alternative Names (SAN) match this host
& 2 The same RSA key is used for RSA key exchange
and RSA signature in ECDHE key establishment
| 4 Private key leak due to the Heartbleed bug