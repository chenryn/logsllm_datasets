Return (cid:4)σ(cid:2)
= (ω, Z), U, ε(cid:5).
t ← St · DecK2(cid:2)t
t mod N .
mod N and
by choosing s = log log T and iterating the composition
log T − log log log T times, which lengthens signatures (that
still keep sub-logarithmic size).
Note that we used the concrete forward-secure signature
of Abdalla-Reyzin [2] (which itself extends [31]) but we could
have utilized the Fiat-Shamir-based [18] scheme of Bellare-
Miner in the same way as originally suggested in [12]. Un-
fortunately, it would signiﬁcantly increase the size of sig-
natures that would include long Fiat-Shamir public keys.
The Kozlov-Reyzin system [26], where signatures also prove
knowledge of the 2s+1−j -root of some public element, can be
hybridized in the same way to provide faster updates since a
single modular squaring (instead of (cid:5)) suﬃces. In this case,
signing is also faster since O(t) squarings suﬃce to compute
S(cid:2)
t from St at the “key unblinding” of step 3.
Security proofs in the random oracle model under the
factoring assumption are easily obtained using the forking
lemma [32] combined with ideas from [2, 4].
Theorem 4.3. The above hybrid scheme has secure up-
dates in the random oracle model assuming that factoring
Blum integers is hard.
Proof. Detailed in the full version of the paper.
4.2 The Product Composition
The sum composition is suﬃcient to obtain forward se-
cure signatures with untrusted updates with T periods from
any FSS-UU scheme with only 1 period. However, to ben-
eﬁt from the full power of the MMM construction (and no-
tably obtain a key generation of constant cost), we also need
a product composition like the one suggested in [28]. Re-
call that the latter combines two traditional forward-secure
signatures with respectively T0 and T1 periods into a FSS
scheme over T0 · T1 stages. The idea is to use a new instance
of the second scheme Σ1 at each period (called epoch) of the
ﬁrst scheme Σ0. At the beginning of each epoch, the newly
generated public key for Σ1 is certiﬁed by means of a signa-
ture from Σ0. In the product system Σ0 ⊗ Σ1, a signature
for period t consists of a signature generated using the Σ0
scheme at epoch (cid:11)t/T1(cid:12) as well as a signature and a public
key for the Σ1 scheme at period t mod T1.
The product composition is not directly adaptable to the
untrusted update setting in that we cannot obtain a FSS-UU
with T0 · T1 periods by combining two such schemes with T0
and T1 periods. The diﬃculty is that the update algorithm
of Σ0 ⊗ Σ1 uses the signing algorithm of Σ0 which needs
the second factor DecK in an untrusted update setting. As
a consequence, the second factor would be involved in the
update algorithm of the product composition, which is what
we want to avoid.
Nevertheless, this section shows that a FSS-UU scheme
1 = (Keygen1, CheckKey1, Update1, Sign1, Verify1) result-
ΣUU
ing from the sum compostion can be combined with a regular
(i.e. without untrusted updates) forward-secure signature
Σ0 = (Keygen0, Update0, Sign0, Verify0) over T0 stages so as
1 with T0 · T1 periods.
to obtain a product scheme Σ0 ⊗ ΣUU
We insist that the result does not appear to be true in gen-
eral. A necessary condition is to use a scheme ΣUU
resulting
1
from the sum composition applied log T1 times. Moreover,
the proof of update security demands that the underlying 2-
party multi-signature be secure in the plain public key model
of [7], as opposed to the relaxed registered public key model
used in [9, 27]. Hence, it is not clear whether or not a
product combination of the scheme in [12] with a regular
forward-secure signature yields a FSS-UU scheme.
Since public keys of ΣUU
1
are certiﬁed using the signing
algorithm of a traditional FSS scheme at each epoch, the
second factor is not needed in the update algorithm of the
product Σ0 ⊗ ΣUU
1 .
4.2.1 Description
⊗
In the resulting product system, called FSS-UU
here-
after, the key generation algorithm randomly selects a sec-
ond factor DecK which is used in instances of ΣUU
through-
1
out all epochs. This factor is utilized as a random seed to
generate a key pair ( ˜sk, ˜pk) for the 2-party multi-signature
scheme 2MS that serves as a building block to construct
1 . Note that ˜pk and the public parameters cp of 2MS
ΣUU
are normally included in the public key of ΣUU
1 . However, in
order to minimize private key and signature sizes and avoid
unnecessary redundancies in the overall storage, we only in-
= Σ0⊗ΣUU
1 .
clude them as public key elements for FSS-UU
⊗
Keygen(λ, r, T )
Choose T0, T1 s.t. T = T0 · T1;
cp ← PGMS(λ);
(r, DecK) ← G(r);
( ˜sk, ˜pk) ← KgMS(DecK);
pk(cid:2) ← (cp, ˜pk);
(r0, r1) ← G(r);
1 ) ← G(r1);
(r(cid:2)
1, r(cid:2)(cid:2)
(SK0, PKFS) ← Keygen0(λ, r0, T0);
(EncSK0, PKUU) ← Keygen1(λ, r(cid:2)
σ0 ← Sign0(0, T0, SK0, PKUU);
SK0 ← Update0(0, T0, SK0, PKFS);
PK ← (pk(cid:2), PKFS);
Parse PKUU as (pk(cid:2), PK
(cid:2)
Return ((cid:4)SK0, σ0, EncSK0, PK
);
(cid:2)
/* PK
(cid:5)(cid:6)
(cid:4)
1, T1, pk(cid:2)
);
is a hash value */
1(cid:5)
(cid:2), r(cid:2)(cid:2)
, PK);
(cid:7)
(cid:2)
EncSK
EncSK
(cid:6)
(cid:4)SK0, σ0, EncSK
(cid:7)(cid:4)
(cid:5)
(cid:3)
(cid:2), r(cid:5), PK
(cid:2), PK
CheckKey
t, T,
Parse PK as (pk(cid:2), PKFS) ; Set PKUU ← (pk(cid:2), PK
(cid:2)
Output ⊥ if (SK0, PKFS) is not a valid
key pair for Σ0 for period (cid:11)t/T1(cid:12) or if
Verify0((cid:11)t/T1(cid:12), T0, PKFS, PKUU, σ0) = ⊥;
(cid:2), PKUU
t mod T1, T1, EncSK
Return CheckKey1
EncSK
(cid:3)
(cid:2), r(cid:5), PK
(cid:6)
(cid:4)SK0, σ0, EncSK
(cid:2), PK
t, T,
(cid:7)(cid:4)
(cid:2)
(cid:3)
(cid:5)
(cid:2)
Update
;
);
If (t = T − 1) erase EncSK and return “no period left”;
Parse PK as (pk(cid:2), PKFS); Set PKUU ← (pk(cid:2), PK
If (t + 1 (cid:7)= 0 mod T1)
(cid:2)
(cid:2) ← Update1
t mod T1, T1, EncSK
);
(cid:2), PKUU
EncSK
(cid:3)
;
(cid:2)
else
/* initialization of a new epoch */
(cid:2)
(cid:3) ← Keygen1(λ, r(cid:2), T1, pk(cid:2)
(r(cid:2), r) ← G(r);
(cid:2)
(cid:3)
(cid:2)(cid:11)t/T1(cid:12), T0, SK0, (pk(cid:2), PK
EncSK
σ0 ← Sign0
(cid:2)
)
;
SK0 ← Update0((cid:11)t/T1(cid:12), T0, SK0, PKFS);
(cid:2), (pk(cid:2), PK
);
)
endif
Sign
(cid:5)
EncSK
(cid:7)(cid:4)
t, T,
(cid:6)
(cid:4)SK0, σ0, EncSK
(cid:2)
(cid:3)
(cid:2), r(cid:5), DecK, M, PK
Parse PK as (pk(cid:2), PKFS); Set PKUU ← (pk(cid:2), PK
(cid:2)
);
σ1 ← Sign1(t mod T1, T1, EncSK
(cid:2)||t, PKUU)
(cid:2), DecK, M||PK
Return ((cid:4)PK
(cid:2), PK
(cid:4)
(cid:2), σ0, σ1(cid:5)
, t)
(cid:7)
(cid:5)(cid:6)
(cid:7)(cid:4)
(cid:5)
(cid:2), σ0, σ1(cid:5) (cid:3)
(cid:6)
(cid:4)PK
σ
σ
(cid:2)
Verify
t, T, PK, M,
Parse PK as (pk(cid:2), PKFS); Set PKUU ← (pk(cid:2), PK
Return ⊥ if Verify0((cid:11)t/T1(cid:12), T0, PKFS, PKUU, σ0) = ⊥;
Return ⊥ if
(cid:2)||t, σ1) = ⊥;
Return (cid:2);
Verify1(t mod T1, T1, PKUU, M||PK
);
(cid:2)
(cid:2)
When the subroutine Sign1 is called by the the signing
algorithm, the public key PK
is included in the augmented
message M||PK
(cid:2)||t in order to be consistent of the Bellare-
Neven security model for multi-signatures. When restricted
to bipartite signatures, the latter allows the adversary to
produce her forgery on a previously signed message for a
diﬀerent second party of adversarially-chosen public key.
4.2.2 Security
When restricted to schemes involving two signers, the
model of [7] considers a game where a challenger C gen-
erates a key pair ( ˜sk, ˜pk) for a single honest signer. The
public key ˜pk is given to the adversary A. A polynomial
number of times, the latter chooses arbitrary messages M
and public keys pk to start a protocol instance with C. The
latter uses ˜sk carry out operations on behalf of the honest
signer and interacts with A that plays the role of the cor-
rupt party. An arbitrary number of concurrent instances of
the protocol may be started. Upon termination, A outputs
an arbitrary public key pk(cid:2) along with a message-signature
pair (M, σ). She wins if σ is a valid signature on M for pub-
lic keys (pk(cid:2), ˜pk) and C was never involved in an execution
of the protocol on message M with a co-signer of public
key pk(cid:2). The strength of the model lies in that A is not
required to hand over private keys matching adversarially-
chosen public keys in signing queries or in the forgery stage.
Theorem 4.4. If the underlying 2-party multi-signature
2MS is secure against chosen-message attacks in the plain
ensures update security. Namely,
public key model, FSS-UU
an adversary F in the sense of deﬁnition 2 implies a chosen-
message attacker A having identical advantage AdvUS(F)
over 2MS within comparable running time.
⊗
Proof. We outline a chosen-message attacker A against
2MS = (PGMS, KgMS, SignMS, VerifyMS) using F as a subrou-
tine and which is successful (in the plain public key model)
whenever F is so. Algorithm A interacts with a challenger
C that gives her a challenge public key ˜pk for 2MS.
At any time, A may start a joint execution of the signing
protocol with C which plays the role of the honest signer ˜pk
whilst she emulates the unregistered corrupt signer pk.
over T = T0·T1
stages. This public key is produced almost exactly as in
. Namely, A runs
the key generation algorithm of FSS-UU
Keygen but deﬁnes pk(cid:2)
= (cp, ˜pk) using her own challenge
public key ˜pk as well as the public parameters cp received
from C instead of generating a pair ( ˜sk, ˜pk) from a second
F gets as input a public key for FSS-UU
⊗
⊗
⊗
In other words, A skips lines 2 to 4 in the above
factor.
description of Keygen and deﬁnes pk(cid:2)
using her own input