we say it is unlabeled. Labeled users form a training dataset.
Our structure-based Sybil detection is deﬁned as follows:
Deﬁnition 1 (Structure-based Sybil Detection): Suppose
we are given a social network, and a training dataset
consisting of some labeled benign nodes and some labeled
Sybils. Structure-based Sybil detection is to predict the label
of each remaining node by leveraging the structure of the
social network.
B. Design Goals
We target a method that satisﬁes the following goals:
1) Leveraging both labeled benign users and labeled
Sybils: OSN providers often have a set of labeled benign
users and labeled Sybils. For instance, veriﬁed users on Twitter
or Facebook can be treated as labeled benign users; users
275
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:48 UTC from IEEE Xplore.  Restrictions apply. 
Attack 
Edges
Benign Region
Sybil Region
Fig. 1: Benign region, Sybil region, and attack edges.
spreading spam or malware can be treated as labeled Sybils,
which can be obtained through manual inspection [10] or
crowdsourcing [29]. Our method should be able to leverage
both labeled benign users and labeled Sybils to enhance
detection accuracy.
2) Robust to label noise: A given label of a user is noisy if it
does not match the user’s true label. Labeled users may have
noisy labels. For instance, an adversary could compromise a
labeled benign user or make a Sybil whitelisted as a benign
user. In addition, labels obtained through manual inspection,
especially crowdsourcing, often contain noises due to human
mistakes [29]. We target a method that
is robust when a
minority fraction of given labels in the training dataset are
incorrect.
3) Scalable: Real-world OSNs often have hundreds of mil-
lions of users and edges. Therefore, our method should be
scalable and easily parallelizable.
4) Theoretical guarantee: Our method should have a theo-
retical guarantee on the number of Sybils that can be falsely
accepted into an OSN. This theoretical guarantee is important
for security-critical applications that leverage social networks,
e.g., social network based Sybil defense in peer-to-peer and
distributed systems [6], and social network based anonymous
communications [30].
Existing random walk based methods SybilGuard [6] and
SybilLimit [7] [8] do not satisfy requirements 1), 2), and
3). SybilInfer [8] satisﬁes none of these requirements. Sybil-
Rank [10] and ´Integro [12] do not satisfy requirements 1) and
2). CIA [11] does not satisfy requirements 1), 2), and 4).
C. Threat Model
We call the subgraph containing all benign nodes and edges
between them the benign region, and call the subgraph contain-
ing all Sybil nodes and edges between them the Sybil region.
Edges between the two regions are called attack edges. Fig. 1
illustrates these concepts. Note that both the benign region and
the Sybil region can consist of multiple communities. Once we
have a labeled node in each community, our method is able
to detect Sybils accurately. We consider the following threat
model.
One basic assumption under structure-based Sybil detec-
tion methods is that the benign region and the Sybil region
are sparsely connected (i.e., the number of attack edges is
relatively small), compared with the edges among the two
regions. In other words, most benign users would not establish
trust relationships with Sybils. We note that this assumption
is equivalent to requiring that the OSNs have the homophily
property, i.e., two linked nodes share the same label with a high
probability. For an extreme example, if the benign region and
the Sybil region are separated from each other, then the OSN
has a perfect homophily, i.e., every two linked nodes have the
same label. Note that, it is of great importance to obtain OSNs
that satisfy this assumption, otherwise the detection accuracies
of structure-based methods are limited. For instance, Yang
et al. [28] showed that RenRen friendship social network
does not satisfy this assumption, and thus the performance of
structure-based methods are unsatisfactory. However, Cao et
al. [10] found that Tuenti, the largest OSN in Spain, satisﬁes
the homophily assumption, and SybilRank can detect a large
amount of Sybils in Tuenti.
Generally speaking, there are two ways for OSN providers
to construct a social network that satisﬁes homophily. One way
is to approximately obtain trust relationships between users by
looking into user interactions [31], predicting tie strength [32],
asking users to rate their social contacts [33], etc. The other
way is to preprocess the network structure so that structure-
based methods are suitable to be applied. Speciﬁcally, human
analysts could detect and remove compromised benign nodes
(e.g., front peers) [34], or employ feature-based classiﬁer to
ﬁlter Sybils, so as to decrease the number of attack edges
and enhance the homophily. For instance, Alvisi et al. [35]
showed that
if the attack edges are established randomly,
simple feature-based classiﬁers are sufﬁcient to enforce Sybils
to be suitable for structure-based Sybil detection. We note
that the reason why the RenRen friendship social network
did not satisfy homophily in the study of Yang et al. is that
RenRen even didn’t deploy simple feature-based classiﬁers at
that time [28].
Formally, we measure homophily as the fraction of edges
in the OSN that are not attack edges. For the same benign
region and Sybil region, more attack edges indicate weaker
homophily. As we will demonstrate in our empirical eval-
uations, our SybilWalk can tolerate weaker homophily than
existing random walk based methods, i.e., SybilWalk is more
accurate than existing random walk based methods when the
number of attack edges gets larger. This is because SybilWalk
incorporates both labeled benign users and labeled Sybils in
the training dataset via a novel random walk.
Apart from the homophily property, we also require the
benign region to be fast mixing. We stress that fast mixing
is not contradictory to community structure, i.e., having rich
community structures does not necessarily mean slow mixing.
Moreover, the fast mixing assumption is mainly used to derive
SybilWalk’s theoretical bound. In practice, SybilWalk still
accurately detects Sybils even if the benign region is not fast
mixing. Speciﬁcally, Mohaisen et al. [36] measured the mixing
time for some OSNs and found that they have relatively large
mixing time. Our SybilWalk is still accurate in such OSNs,
once we have labeled nodes in each community in the training
dataset.
276
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:48 UTC from IEEE Xplore.  Restrictions apply. 
To capture such intuition, we deﬁne badness scores using
random walks on the label-augmented social network.
Badness scores for label nodes: For the benign label node lb,
we deﬁne its badness score to be 0; and we deﬁne the badness
score for the Sybil label node ls to be 1.
Badness scores for user nodes: For a user u, we initiate a
random walk from u and the random walk spreads among the
label-augmented social network. We deﬁne the badness score
of u as the probability that this random walk reaches ls before
reaching lb. In particular, imagine we have a particle, which
can stay on nodes of the label-augmented social network.
Initially, the particle stays on u. In the next step, the random
walk picks a neighbor v of u with a probability that
is
proportional to wuv, and the particle moves the v. Formally,
t∈Γu wut , where
the particle moves to v with a probability
Γu is the set of neighbors of u. This pick-and-move process
is repeated many times until the particle reaches either ls or
lb. Since each pick-and-move is a random event, it is also
random regarding whether the particle reaches ls ﬁrst or lb
ﬁrst. However, if u is structurally closer to the labeled Sybils
than the labeled benign nodes in the training dataset, then the
particle in the random walk is more likely to ﬁrst reach ls than
to ﬁrst reach lb. Therefore, our random walk based badness
scores capture the structural information of the social network
as well as incorporate both labeled benign nodes and labeled
Sybil nodes.
wuv(cid:2)
C. Computing Badness Scores Using an Iterative Method
Computing our random walk based badness scores is non-
trivial. For instance, one way to compute the badness score for
a node u is to simulate r random walks that all start from the
node. If rs of them reach ls before reaching lb, then we can
r . However, this method is
approximate the badness score as rs
inefﬁcient, because 1) we often need to simulate a large num-
ber of random walks in order to obtain a conﬁdent approximate
of the badness score, and 2) we need to simulate different
random walks for each node. To address the challenge, we
design an iterative method to efﬁciently compute the badness
scores. Our method computes the exact badness scores and
computes them for all users simultaneously.
(cid:2)
Notations: We denote the badness score of a node u as pu. We
denote by Γu the set of neighbors of u. Moreover, we denote
by du the weighted degree of u, i.e., du =
v∈Γu wuv, where
wuv is the weight of edge (u, v).
Representing a node’s badness score using its neighbors’
badness scores: We show that a node’s badness score
can be represented as a linear combination of its neighbors’
badness scores. We ﬁrst use an example to illustrate this linear
relationship, and then we describe the relationship formally.
Suppose we want to compute the badness score pu1 of u1 in
the example label-augmented social network shown in Fig. 2.
u1 has two neighbors u2 and u3. Recall that u1’s badness score
is the probability that a random walk, which starts from u1,
reaches the label node ls before reaching the label node lb.
Initially, the particle in the random walk stays on u1. In
the next step, the particle moves to a neighbor u2 with a
, and the particle moves to u3 with
probability of
wu1 u2
wu1 u2 +wu1 u3
(cid:79)(cid:68)(cid:69)(cid:72)(cid:79)(cid:3)(cid:72)(cid:71)(cid:74)(cid:72)
(cid:88)(cid:86)(cid:72)(cid:85)(cid:3)(cid:72)(cid:71)(cid:74)(cid:72)
Fig. 2: An example of label-augmented social network.
IV. SYBILWALK
We ﬁrst introduce label-augmented social network to inte-
grate labels and social network structure. Second, we deﬁne
badness score for nodes using a novel random walk on the
label-augmented social network. Third, we develop an iterative
method to compute the badness scores efﬁciently. Fourth, we
present a variant of SybilWalk.
A. Label-augmented Social Network
Leveraging random walks to incorporate both labeled
benign nodes and labeled Sybils in the training dataset is
challenging. For instance, no existing random walk based Sybil
detection methods can incorporate both labels. To address
this challenge, we design a label-augmented social network
(LASN), on which we can gracefully incorporate both labels.
Fig. 2 illustrates an example LASN. Speciﬁcally, we add two
additional nodes into an existing social network; one node
represents the label benign and the other node represents the
label Sybil. We call the two nodes benign label node and Sybil
label node, respectively. Moreover, we denote them as lb and
ls, respectively. Then, given a training dataset, we create an
edge between each labeled benign node and the benign label
node lb; and we create an edge between each labeled Sybil
node and the Sybil label node ls.
We call a node corresponding to a user user node and a
node corresponding to a label label node. We call an edge
between two user nodes user edge, while we call an edge
between a user and a label node label edge. We can assign
weights to different edges, which balance the importance of
different edges. For instance, weights on user edges could be
tie strengths, characterizing the closeness between two users.
We use wuv to represent the weight between nodes u and v.
We note that our label-augmented social network can also be
viewed as a Social-Attribute Network [37] or Social-Behavior-
Attribute network [38], where the two label nodes are treated
as attributes.
B. Deﬁning Badness Scores Using Random Walks
The badness score of a node is the node’s likelihood of
being a Sybil. A larger badness score means that the node
is more likely to be a Sybil. Intuitively, a node has a larger
badness score if the node is structurally closer to the labeled
Sybils than the labeled benign nodes among the social network.
277
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:48 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 SybilWalk
Input: A label-augmented social network, , and T .
Output: pu for every user node u.
Initialize p(0)
u = 0.5 for every user node u.
Initialize p(0)
lb = 0.
Initialize p(0)
ls = 1.
Initialize t = 1.
u − p(t−1)
while
u(p(t)
(cid:2)
u
for each user u do
)2 ≥  and t ≤ T do
(cid:2)
wuv
du p(t−1)
v
.
v∈Γu
p(t)
u =
end for
t = t + 1.
end while
return pu for every u.
wu1 u3
wu1 u2 +wu1 u3
a probability of
. If the particle moves to u2, then
the probability that the particle reaches ls before reaching lb is
pu2, the badness score of u2. If the particle moves to u3, then
the probability that the particle reaches ls before reaching lb is
pu3, the badness score of u3. Therefore, we can represent u1’s
badness score using u2’s and u3’s badness scores. Speciﬁcally,
pu3. In other
we have pu1 =
words, a node’s badness score is a linear combination of
its neighbors’ badness scores. More formally, we have the
following linear equation for each node u:
wu1 u2 +wu1 u3
wu1 u2 +wu1 u3
pu2 +
wu1 u2
wu1 u3
(cid:3)
pu =
v∈Γu
wuv
du
pv.
(1)
Our SybilWalk algorithm: We leverage Equation 1 to design
an iterative algorithm to compute the badness scores for all
user nodes. We initialize the badness score of every user node
u to be 0.5, i.e., p(0)
u = 0.5. Note that the badness scores of
the label nodes lb and ls are initialized and ﬁxed to be 0 and 1,
respectively. Then, in the tth iteration, we update the badness
score for every user node as follows:
(cid:3)
p(t)
u =
v∈Γu
p(t−1)
v
.
wuv
du
(2)
The iterative process halts when the change of the badness
scores of all user nodes in two consecutive iterations is smaller
−3) or the number
than a given small threshold  (i.e., 10
of iterations has reached a predeﬁned maximum number of
iterations T . Algorithm 1 shows our SybilWalk algorithm.
D. A Variant of SybilWalk (SybilWalk-Var)
An alternative way to incorporate both labeled benign
nodes and labeled Sybil nodes in the training dataset is to
deﬁne the badness score of a node u as the probability that the
random walk, which starts from u, reaches a labeled Sybil node
before reaching any labeled benign node in the social network.
This alternative formulation does not require the creation of the
additional label nodes, and the random walks can be performed
on the original social network.
We can adapt SybilWalk algorithm to compute such bad-
ness scores. Speciﬁcally, we initialize the badness score of
278
TABLE I: Summary of theoretical guarantees of various ran-
dom walk based methods. g is the number of attack edges, n
is the number of users in the social network, and d(s) is the
√
average node degree in the Sybil region. SybilGuard requires
n/ log n). The symbol “–” means the corresponding
g = o(
bound is unknown.
Method