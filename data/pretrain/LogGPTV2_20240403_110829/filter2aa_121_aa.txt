SECURITY PAPER
Preparation Date: 11 Dec 2016
Art of Anti Detection – 3
Shellcode Alchemy
Prepared by:
Ege BALCI
Penetration Tester
ege.balciinvictuseurope.com
INVICTUS
2
Security Paper
TABLE OF CONTENT
1. Abstract:.....................................................................................................................................................3
2. Terminology..............................................................................................................................................3
3. Introduction.............................................................................................................................................. 4
4. Basic Shellcoding.....................................................................................................................................5
5. Solving The Addressing Problem....................................................................................................... 5
6. Hash API...................................................................................................................................................10
7. Encoder/Decoder Design................................................................................................................... 11
8. Anti Exploit Mitigations......................................................................................................................16
9. Bypassing EMET.....................................................................................................................................17
10. References:...........................................................................................................................................18
INVICTUS
3
Security Paper
1. Abstract:
This paper will deal with subjects such as basic shellcoding concepts, assembly level
encoder/decoder design and few methods for bypassing anti exploit solutions such as
Microsoft’s Enhanced Mitigation Experience Toolkit(EMET). In order to understand the
content of this paper readers needs to have at least intermediate x86 assembly
knowledge and decent understanding of basic file formats such as COFF and PE, also
reading other articles (Art of Anti Detection 1 – Introduction to AV & Detection
Techniques and Art of Anti Detection 2 – PE Backdoor Manufacturing) will help with
understanding the inner workings of basic detection techniques used by AV products
and terminology in this paper.
2. Terminology
Process Environment Block(PEB):
In computing the Process Environment Block (abbreviated PEB) is a data structure in the
Windows NT operating system family. It is an opaque data structure that is used by the
operating system internally, most of whose fields are not intended for use by anything
other than the operating system. Microsoft notes, in its MSDN Library documentation —
which documents only a few of the fields — that the structure "may be altered in future
versions of Windows". The PEB contains data structures that apply across a whole
process, including global context, startup parameters, data structures for the program
image loader, the program image base address, and synchronization objects used to
provide mutual exclusion for process-wide data structures.
Address Space Layout Randomization:
(ASLR) is a computer security technique involved in protection from buffer overflow
attacks. In order to prevent an attacker from reliably jumping to, for example, a
particular exploited function in memory, ASLR randomly arranges the address space
positions of key data areas of a process, including the base of the executable and the
positions of the stack, heap and libraries.
Import Address Table(IAT):
Address table is used as a lookup table when the application is calling a function in a
different module. It can be in the form of both import by ordinal and import by name.
Because a compiled program cannot know the memory location of the libraries it
depends upon, an indirect jump is required whenever an API call is made. As the dynamic
linker loads modules and joins them together, it writes actual addresses into the IAT
slots, so that they point to the memory locations of the corresponding library functions.
INVICTUS
4
Security Paper
Data Execution Prevention(DEP):
Data Execution Prevention (DEP) is a set of hardware and software technologies that
perform additional checks on memory to help prevent malicious code from running on a
system. In Microsoft Windows XP Service Pack 2 (SP2) and Microsoft Windows XP Tablet
PC Edition 2005, DEP is enforced by hardware and by software.The primary benefit of
DEP is to help prevent code execution from data pages. Typically, code is not executed
from the default heap and the stack. Hardware-enforced DEP detects code that is
running
from
these
locations
and
raises
an
exception
when
execution
occurs.
Software-enforced DEP can help prevent malicious code from taking advantage of
exception-handling mechanisms in Windows.
Address Layout Randomization(ASLR):
Address space layout randomization (ASLR) is a computer security technique involved in
protection from buffer overflow attacks. In order to prevent an attacker from reliably
jumping to, for example, a particular exploited function in memory, ASLR randomly
arranges the address space positions of key data areas of a process, including the base of
the executable and the positions of the stack, heap and libraries.
stdcall Calling Convention:
The stdcall calling convention is a variation on the Pascal calling convention in which the
callee is responsible for cleaning up the stack, but the parameters are pushed onto the
stack in right-to-left order, as in the _cdecl calling convention. Registers EAX, ECX, and
EDX are designated for use within the function. Return values are stored in the EAX
register. stdcall is the standard calling convention for the Microsoft Win32 API and for
Open Watcom C++.
3. Introduction
Shellcodes plays a very important role in cyber security field, they are widely used in a
lot of malware and exploits. So, what is shellcode? Shellcode is basically a series of bytes
that will be interpreted as instructions on CPU, the main purpose of writing shellcodes is
exploiting vulnerabilities that allows executing arbitrary bytes on the system such as
overflow vulnerabilities also, because of shellcodes can run directly inside memory wast
amount of malware takes advantage of it, the reason behind the name shellcode is
usually shellcodes returns a command shell when executed but in time the meaning has
evolved, today almost all compiler generated programs can be converted to shellcode,
because of writing shellcode involves an in-depth understanding of assembly language
for the target architecture and operating system, this paper will assume reader knows
how to write programs in assembly on both Windows and Linux environments. There are
a lot of open source shellcodes on the internet but for exploiting new and different
vulnerabilities every cyber security researcher should be able to write his/her own
sophisticated shellcode,
INVICTUS
5
Security Paper
also writing your own shellcodes will help a lot for understanding the key concepts of
operating systems, the aim of this paper is explaining basic shellcoding concepts,
showing effective methods for decreasing the detection rate on shellcodes and
bypassing some anti exploit mitigation.
4. Basic Shellcoding
Writing shellcodes for different operating systems requires different approaches, unlike
Windows, UNIX based operating systems provides a direct way to communicate with the
kernel through the int 0x80 interface, all syscalls inside the UNIX based operating
systems has a unique number, with calling the 0x80’th interrupt code(int 0x80), kernel
executes the syscall with given number and parameters, but here is the problem,
Windows does not have a direct kernel interface, this means there has to be exact
pointers(memory addresses) to functions in order to call them and unfortunately hard
coding the function addresses does not fully solve the problem, every function address
inside windows changes in every service pack,version and even configuration, using hard
coded addresses makes the shellcode highly version dependent, writing version
independent shellcodes on windows is possible throughout solving the addressing
problem, this can be achieved with finding the function addresses dynamically on
runtime.
5. Solving The Addressing Problem
Throughout the time shellcode writers found clever ways to find the addresses of
Windows API functions on runtime, in this paper we will focus on a specific method
called PEB parsing, this method uses the Process Environment Block(PEB) data structure
to locate the base addresses of loaded DLLs and finding their function addresses with
parsing the Export Address Table(EAT), almost all version independent windows
shellcodes inside metasploit framework uses this technique to find the addresses of
Windows API functions,
Shellcodes witch is using this method takes advantage of “FS”segment register, in
windows this register points out the Thread Environment Block(TEB) address, TEB block
contains a lot of useful data including PEB structure we are looking for, when shellcode
is executed inside memory we need to go 48 bytes forward from the beginning of the
TEB block,
xor eax, eax
mov edx, [fs:eax+48]
INVICTUS
6
Security Paper
now we have a pointer to EB structure,
After getting the PEB structure pointer, now we will move 12 bytes forward from the
beginning of the PEB block in order to get the address for “Ldr” data structure pointer
inside PEB block,
mov edx, [edx+12]
INVICTUS
7
Security Paper
Ldr structure contains information about the loaded modules for the process, if we move
20 byte further inside Ldr structure we will reach the first module from the
“InMemoryOrderModuleList”,
mov edx, [edx+20]
Now our pointer is pointing to InMemoryOrderModuleList witch is a LIST_ENTRY
structure, Windows defines this structure as a “head of a doubly-linked list that contains
the loaded modules for the process.” each item in the list is a pointer to an
LDR_DATA_TABLE_ENTRY structure, this structure is our main target, it contains full
name and base address of loaded DLLs(modules), since the order of the loaded modules
can change, we should check the full name in order to choose the right DLL that is
containing the function we are looking for, this can be easily done with moving 40 bytes
forward from the start of the LDR_DATA_TABLE_ENTRY if the DLL name matches the
one that we are looking for, we can proceed,
INVICTUS
8
Security Paper
with moving 16 byte forward inside LDR_DATA_TABLE_ENTRY we now finally have the
base address of the loaded DLL,
mov edx, [edx+16]
The first step of getting the function addresses is complete, now we have the base
address of the DLL that is containing the required function, we have to parse the DLL’s
export address table in order to find the required function address, export address table
is located inside the PE optional header, with moving 60 bytes forward from the base
address we now have a pointer to DLL’s PE header on memory,
INVICTUS
9
Security Paper
finally we need to calculate the address of the export address table with (Module Base
Address + PE header address + 120 byte) formula, this will give the address of the export
address table(EAT), after getting the EAT address we now have access to all functions
that is exported by the DLL, Microsoft describes the IMAGE_EXPORT_DIRECTORY with
below figure,
This structure contains the addresses, names, and number of the exported functions,
with using the same size calculation traversing techniques desired function addresses
can be obtained inside this structure, of course the order of the exported functions may
change in every windows version, because of this before obtaining the function
addresses, name of the function should be checked, after being sure of the function
name, the function address is now in our reach,
INVICTUS