# What / Why
`npm i` can fail when using local deps in a certain way.
## When
Running `npm i`
## Where
In a package that includes local dependencies that depend on a common
registry-derived module.
## How
In the situation where local (`file:`) deps form a chain and two share a
common registry-derived dep, `npm i` will fail with an `ENOENT` error.
    A
    |
    B -> some-module
    |
    C -> some-module
☝️ `A` depends on `B`. `B` depends on `C` and `some-module`. `C` depends on
`some-module`.
### Current Behavior
Running `npm i` will throw an error like this:
    npm WARN rollback Rolling back some-module@x.y.z failed (this is probably harmless): /npm-nested-deps-issue/c/node_modules/some-module is not a child of /npm-nested-deps-issue/a
    npm WARN a@1.0.0 No description
    npm WARN a@1.0.0 No repository field.
    npm ERR! code ENOENT
    npm ERR! syscall rename
    npm ERR! path /npm-nested-deps-issue/a/node_modules/.staging/some-module-de6f41e0
    npm ERR! dest /npm-nested-deps-issue/c/node_modules/some-module
    npm ERR! errno -2
    npm ERR! enoent ENOENT: no such file or directory, rename '/npm-nested-deps-issue/a/node_modules/.staging/some-module-de6f41e0' -> '/npm-nested-deps-issue/c/node_modules/some-module'
    npm ERR! enoent This is related to npm not being able to find a file.
    npm ERR! enoent
### Steps to Reproduce
  1. Clone https://github.com/treydavis/npm-nested-deps-issue
  2. run `npm i` in the `a` module
### Expected Behavior
Install with no errors