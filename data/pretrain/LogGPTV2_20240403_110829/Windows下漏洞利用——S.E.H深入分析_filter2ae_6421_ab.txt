Next指针存放在0x12FF1C，指向0x12FFB0地址空间。
Handler句柄则指向0x4016B0
**1.2.4 S.E.H handler结构分析**
SE handler的结构体名为EXCEPTION_DISPOSITION
MSDN描述的结构如下
    EXCEPTION_DISPOSITION
    __cdecl _except_handler(
            struct _EXCEPTION_RECORD *ExceptionRecord,
            void * EstablisherFrame,
            struct _CONTEXT *ContextRecord,
            void * DispatcherContext
    );
* EstablisherFrame这个存放便是我们S.E.H结构中Next handler的地址。
经过实际调试，我们发现。当程序发生异常，跳转到SE handler指向的地址
EXCEPTION_DISPOSITION结构会入栈，顺序为 _DispatcherContext - >_ContextRecord ->
_EstablisherFrame- >_ExceptionRecord
所以当程序跳转进入S.E.H handler EstablisherFrame位于ESP+8的位置。
程序将这个结构入栈的原因大概是方便在执行完 handler函数之后，如果程序依旧不能解决问题，会进入下一个S.E.H结构，所以会将Next
Recrod的地址入栈帧。
调试截图
覆盖SE handler为0x41414141
覆盖Next record为0x42424242
程序处理异常时，EIP跳转到了0x41414141（SE
handler），而此时ESP+8的位置存储的0x17EE4C（EstablisherFrame）指针指向的数据正是0x42424242（Next
record）
通过调试，不难发现，这个特性同样容易让攻击者利用，一旦进入SE handler，调用POP POP
RET，便能让程序跳转到EstablisherFrame指向的内容，也就是同样可控的Next Record地址。
当然这点在绕过SafeSEH中才会用到，在之后的章节中会进行解析，详见第二章2.3节。
## 第二章 S.E.H的利用
###  2.1 Windows XP SP2之前的利用
**2.1.1 S.E.H结构覆盖**
首先，让我们重新观察这张S.E.H的简化图，有两个要点引起我们的注意。
首先S.E.H是在栈中的也就说有可能被我们写入的数据覆盖。其次Handler指向的是我们的异常处理函数，会造成EIP的跳转（虽然Handler并不直接指向我们的异常处理函数，而是经过多次跳转）。
所以我们就有了最基础的思路—通过覆盖SE handler，然后触发异常（除0），使得程序跳转到我们的shellcode，和经典栈溢出如出一辙，岂不美哉。
**2.1.2测试案例**
在OD中在View中可以直接查看S.E.H
chains（S.E.H链），可以看到我们的程序的S.E.H链存在三个结点。我们要覆盖的是位于0x12ff1c的S.E.H结构。
生成pattern用例
0xD8*”A”+EIP
从buf首地址到S.E.H结构中间存在0xD4（212）字节的空间，将我们的shellcode地址设置在212字节中，多余的空间用0x90填充。我们的目标是覆盖SE
handler（距离首地址0xD8个字节）为我们的shellcode地址/buf的首地址。
调试方面的问题
覆盖S.E.H成功。通过OD的S.E.H链查看器发现链已经成功被覆盖为了Shellocde的首地址。
程序调试卡在IDIV处。提示整数除以0异常，使用Shift+F9继续运行。（当然啦，可以在Debug Options中选择忽略这个异常，OD就不会中断了）
但是覆盖SE handler为栈地址，提示应用程序无法处理异常。无论怎么调试都无法成功。
后来发现覆盖0x41414141甚至都可以成功让EIP跳转，但是偏偏栈地址不行。Windows
SP0应该是没有开启SafeSEH的，所以这里是这次实验的一个疑点。一般来说，Shellocde已经被执行了。
甚至可以修改覆盖Handler使得程序跳转到printf函数，重新输出一次In the SEH_test!
案例代码如下
    #include "stdafx.h"
    #include
    #include
    char shellcode[]=
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90"
    "xFCx68x6Ax0Ax38x1Ex68x63x89xD1x4Fx68x32x74x91x0C"
    "x8BxF4x8Dx7ExF4x33xDBxB7x04x2BxE3x66xBBx33x32x53"
    "x68x75x73x65x72x54x33xD2x64x8Bx5Ax30x8Bx4Bx0Cx8B"
    "x49x1Cx8Bx09x8Bx69x08xADx3Dx6Ax0Ax38x1Ex75x05x95"
    "xFFx57xF8x95x60x8Bx45x3Cx8Bx4Cx05x78x03xCDx8Bx59"
    "x20x03xDDx33xFFx47x8Bx34xBBx03xF5x99x0FxBEx06x3A"
    "xC4x74x08xC1xCAx07x03xD0x46xEBxF1x3Bx54x24x1Cx75"
    "xE4x8Bx59x24x03xDDx66x8Bx3Cx7Bx8Bx59x1Cx03xDDx03"
    "x2CxBBx95x5FxABx57x61x3Dx6Ax0Ax38x1Ex75xA9x33xDB"
    "x53x68x61x69x6Ex65x68x6Dx69x67x72x8BxC4x53x50x50"
    "x53xFFx57xFCx53xFFx57xF8x90x90x90x90x90x90x90x90"
    "x3Cx11x40x00"; //跳转到0x40113C
    void MyExceptionhandler()
    {
    ​    printf("got an exception ,press Enter to kill the process!n");
    ​    getchar();
    ​    ExitProcess(1);
    }
    void SEH_test()
    {
    ​    char buf[200];
    ​    int zero=0;
    ​    
    ​    //__asm int 0x3;
    ​    __try{
    ​        printf("In the S.E.H_test!n");
    ​        strcpy(buf,shellcode);
    ​        zero=4/zero;
    ​    }
    ​    __except(MyExceptionhandler()){};
    }
    int main(int argc, char* argv[])
    {
    ​    S.E.H_test();
    ​    return 0;
    }
在这里提供一种思路—使用“JMP/CALL寄存器”跳转
如何寻找指令碎片
在OD调试界面右键-选择模块-kernel32，右键-搜索所有指令（Ctrl+F）
因为我们的编写的程序体量比较小，很多代码碎片都搜索不到。所以我们直接在kernel32中找，因为WinXP下并没有开启ASLR，所以kernel的基地址是不会变化的。
重新布置Shellcode，— 一种错误的布置
将CALL EBP指令布置在SE handler，将shellcode布置在SE
handler+8的位置，因为EBP正好指向这个位置。所以如果触发异常，程序就会执行CALL EBP，使得程序跳转执行shellcode。
用例pattern为`0xD8*”x90”+Call_esp+8*”x90”+shellcode`
这种情况，没有考虑在触发SEH时候，栈帧也会变化，导致失效。
虽然我们没有成功执行shellcode，不过我们还是可以通过覆盖SE handler成功修改程序执行流程。
经过上面的调试，我们已经知道了覆盖SE
handler使得程序跳转的思路。并且知道了上古windows下是如何利用S.E.H覆盖的。虽然没有成功执行shellcode，不过成功使得程序的流程做出了改变。
（至于具体原因，可能是我的Windows XP版本的问题，虽然没有写是SP几的版本，但是在2019年要找到一个纯净版的windows xp的确非常困难）
到目前，这种S.E.H的利用方法，在目前的系统中已经失效了。
在WindowsXP SP2中引入了SafeSEH，对传统的S.E.H覆盖进行了检查，导致这种利用手法的失效。
**2.2 Windows XP SP2后的SEH [SafeSEH]**
SafeSEH，也就是俗称的软件DEP。是微软在Windows XP
SP2引入的一个S.E.H校验机制。其原理非常好理解。就是对S.E.H行为做检测，主要有如下两个检测
（1）检查异常处理链是否位于当前程序中，如果不在当前栈中，程序将中止异常处理函数的调用。
（2）检查异常处理函数指针是否指向当前程序的栈中。
尤其是第二个检测，几乎就是针对我们覆盖SE handler跳转到栈中shellcode的这种利用手法。不过绕过方式也有很多种，会在下文进行介绍。
SafeSEH可以通过/SafeSEH链接选项，让程序具有SafeSEH功能。
VS中 项目-属性-链接器-命令行 输入/SafeSEH即可
问：如何判断一个程序开启SafeSEH
答：可以使用VS自带的工具dumpbin，在Visual Stdio 2010-Visual Studio Tools-Visual
Stdio兼容工具命令中运行
使用dumpbin /loadconfig 文件路径/文件名 就可以获取PE文件当前是否开启S.E.H
当然这个程序让我想起了Linux下玩PWN经常用的工具 objdump和readelf，功能非常类似，需要的只是时间去适应。
当然还有更简单的方法，使用mona插件的modules功能，可以非常快捷地查询软件加载的各个分别开启了哪些保护，就像gdb的peda插件一样方便。（注：下图与本次实验无关）
执行`!py mona modules`
SafeSEH未开启的情况
使用dumpbin分析，没有提示存在SafeSEH链接
添加了 /SafeSEH 选项之后编译的文件
SafeSEH最终的行为是防止栈执行，所以被称为是软件DEP，但是没有硬件DEP，shellcode还是又可能被执行。
所以在最后一个实验，我们会将硬件DEP也开启，SafeSEH结合DEP，也会大大提高利用难度。我们将会学习使用ROP来绕过软件和硬件的DEP。
当然首先要学习的是如何绕过SafeSEH。
###  2.3 SafeSEH的绕过（基础）
**2.3.1 SafeSEH绕过原理浅析**
通过覆盖NEXT指针和SE handler，使用未开启SafeSEH模块的Gadgets绕过SafeSEH。
PS：因为WindowsXP的kernel模块并没有开启SafeSEH，所以我们可以直接利用Kernel里的gadget
我们需要寻找Gadget的格式为
    POP Reg32
    POP Reg32
    RET
我们要覆盖SE handler使得程序执行这段gadget，最终跳转到shellcode。
**2.3.1向后跳转0x6字节的方案**
如下布置栈帧，注意JMP SHORT 0x6是通过机器码EB 06 90 90（90为NOPs不影响程序执行）实现。
    Before OverFlow[        ][ NEXT RECORD ][ SE Handler  ][ ]
    After OverFlow  [  Nop’s ][ JMP SHORT 0x6 ][POP POP RET][ SHELLCODE ]
覆盖SE handler指向一段POP POP RET的Gadgets，当发生程序错误，调用S.E.H会让程序跳转到POP POP
RET指令的位置，当执行到RET的时候，会发现此时ESP正好指向JMP SHORT
0x6，程序执行这个代码，使得EIP向后调转0x6个字节，跳入我们埋在缓冲区后方的shellcode，成功执行代码。
> 问：那么POP POP RET是如何发挥作用的？
>
> 答：在《Exploit编写教程》中这样描述—
>
> 在于S.E.H的Exploit中pop pop ret指令串到底是如何起作用的? 当异常发生时，异常分发器创建自己的栈帧。它会把EH
> Handler成员压入新创的栈帧中(作为函数起始的一部分)在EH结构中有一个域是EstablisherFrame。
>
> 这个域指向异常注册记录 (next SEH)的地址并被压入栈中，当一个例程被调用的时候被压入的这个值都是位于 ESP+8的地方。
>
> 现在如果我们用pop pop ret串的地址覆盖SE Handler: -第一个pop将弹出栈顶的4 bytes
> -接下来的pop继续从栈中弹出4bytes -最后的ret将把此时ESP所指栈顶中的值(next SEH的地址)放到EIP中。