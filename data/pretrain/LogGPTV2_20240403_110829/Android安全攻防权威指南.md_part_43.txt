Cp -f $GDBSETUP_INIT $GDBSETUP
GDBSETUP=$APP_OUT/gdb.setup
735 #uncomment the following to debug the remote connection only
736 #echo *set debug remote 1* >> $GDBsETUP
737
738 echo *target remote :SDEBUG_PORT* >> $GDBSETUP
740
cat $OPTION_EXEC >> $GDBSETUP
741
大部分语句（第733行至第741行）是在生成一个GDB客户端使用的脚本。首先复制一份
在调试生成过程中放入应用的gdb.setup文件，然后出现了一些注释。取消注释这些行可以支持
调试GDB自身的协议通信。该级别的调试有助于跟踪gdbserver不稳定的问题，但对调试自已的
代码没有帮助。接下来的两行告知GDB客户端在哪里找到调试二进制文件以及如何连接到等待
的GDB服务器。在第739行至第741行，ndk-gdb附加了一个自定义的脚本，可以通过-x或--exec
标识指定。此选项对自动产生断点或执行更复杂的脚本非常有帮助。关于此话题的更多细节将在
7.6.4节中讨论。最后，执行GDB客户端和新生成的GDB脚本。了解ndk-gdb脚本如何工作为高
级脚本调试铺平了道路，详见7.6.4节。
7.6.2使用Eclipse进行调试
2012年6月，ADT插件的20版本发布，增加了对原生代码生成和调试的支持，因此能够使
用EclipseIDE来调试C/C++代码。不过只安装这个新版ADT仍不足以进行原生代码调试，还需
要一些额外的步骤。本节会进行详细介绍，带大家实现原生代码的源代码级调试。
1.添加原生代码支持
打开项目后，实现原生代码调试的第一步是告知ADT安装NDK的位置。在Eclipse中，从
窗体菜单中选择Preferences，展开Android项并选择NDK，输人或浏览NDK的安装路径，点击
---
## Page 194
178
第7章调试与分析安全漏润
Apply后再点击OK。
通常来说，有必要向项目中添加原生代码。幸运的是，本章随书资料中的源代码已经包含了
所需要的原生代码。如果遇到问题，或者想给一个新的Android应用工程添加原生代码，步骤如
下。否则，可以跳过下一段。要给工程添加原生支持，首先右击Package Explorer窗口中的项目，
并选择AndroidTools》Add Native Suppornt菜单项。在显示的对话框中，输人JNI名称。以我们的
演示应用为例，输入hello-jni，点击OK。此时，ADT创建了jni目录并向工程中添加了一个名为
hello-jnicpp的文件。下一步是在启动调试器前调整一些配置。
2.准备调试原生代码
正如之前使用ndk-gdb时所做的，需要告知Android生成系统要生成的应用必须支持调试。
在Eclipse中实现以上功能只需要一些简单的步骤。首先，选择Project>Properties。展开C/C++
生成选项并选择Environment，点击Add按钮，变量名输入NDK_DEBUG，值输人1。点击OK后，
就可以开始调试了。为了确保新的环境变量生效，选择Projcct>BuildAll。Console窗口会显示
与直接使用ndk-gdb时相似的输出结果。尤其要注意以gdb开头的行。
3.实践所见
因为目标是调试代码，所以要确保一切运行正常。最简单的方法是验证是否可以在Eclipse
中交互式地设置断点。首先，在INI函数中想要中断的地方设置断点。对于演示应用，调用
_android_1og_print 方法的那行是理想的位置。设置断点后，点击DebugAs工具栏按钮启
动调试会话。如果该应用以前从没被调试过，就会看到询问采用何种调试方式的对话框。对于调
试原生代码，选择Android NativeApplication并点击OK。ADT启动原生调试器，附加到远程进
程上并继续执行。幸运的话，会看到设置的断点，如图7-8所示。
图7-8Eclipse停在一个原生代码断点上
---
## Page 195
7.6调试原生代码
179
由于另一种“等待调试器”问题，成功调试要靠运气。这次不是一直等待，面是很快被驳回，
这将导致在第一时间错过断点。值得庆幸的是，调整屏幕的方向可以再次触发onCreate事件，
重新执行原生代码，并停在你的断点上。
7.6.3使用AOSP进行调试
它通常来自SDKPlatformTools。由于AOSP直接支持Nexus设备，使用Nexus设备调试原生代
码的体验是最好的。事实上，本章几乎所有的示例都是使用Nexus设备开发的。另外，Nexus设
备中的二进制文件都是使用userdebug变量编译生成的，这是因为可以在可执行与可链接格式
（ELF）二进制文件中找到.gnu_debuglink段。使用userdebug 生成变量时，设备上所有的
原生代码二进制文件都带有部分符号。本节会展示调试AOSP仓库中Android浏览器的整个过程，
主要分为三个基本阶段：配置环境，附加至测览器进程，以及连接调试器客户端。
注意由于Android的安全模型，调试原生代码编写的系统进程需要root访问权限。可以通过
使用eng配置生成，或者使用第三章提供的信息来获取root访问权限：
1.配置环境
在将GDB附加至目标进程之前要配置好环境，通过一些AOSP中的简单命令就能完成。下面
在搭载Android4.3（JWR66Y）的GSMGalaxyNexus设备上配置环境，来调试用C/C++编写的
程序：
$po 5umsues/eoTaep d- xTpxm $ 9oxmos/ptoxpue/-:Aap
dev:=/android/source/device/samsung S git clone \
Cloning into *maguro'...
/aospmirror/devi.ce/samsung/maguro gi t
done.
dev:~/android/source/device/sansung S git clone \
/aosp-mirror/Gevice/samsung/tuna, git
Cloning into 'tuna'...
dev: -/android/source/device/samsung $ cd .. /. .
dev:-/android/source $ . bui1d/envsetup.sh
ws*dnzasxopuan/oxnfee/5unsues/aotAep Butpntou
inc1uding sdk/bash_completion/adb,bash
dev:~/android/source $ 1unch fu11_maguro-userdebug
PLATPORM_VERSION_CODENANE=REL
TARGEr_PRoDUCT=fu11_maguro
PLATPORM_VERSION=4 .3
TARGEr_BUILD_TYPE=release
TARGEr_BUILD_VARIANT"uSerdebug
TARGET_BUILD_APPS=
---
## Page 196
081
第7章调试与分析安全漏润
TARG8T_ARCH=arm
TARGET_CPU_VARIANT=cortex-a9
TARGET_ARCH_VARIANT-armv7aneon
HOST_ARCH=x86
HOST_0S=1inux
H0ST_0S_ExTRA=Linux-3 .2.052-genericx86_64with-Ubuntu-12.04-precise
HOST_BUILD_TYPE=reLease
BUILD_ID=JWR66Y
OUT_DIR=out
开头的几个命令用于获取GalaxyNexus上特定于设备的目录，这些目录是配置环境需要的。
device/samsung/maguro仓库是 GSMGalaxy Nexus 设备专有的，device/samsung/tuna 仓库则包含了
与 CDMA/LTE Galaxy Nexus 共享的项目。最后，通过下载build/envsetup.sh脚本并执行1unch
命令来配置和初始化AOSP生成环境。
配置好AOSP环境，下一步是配置设备。因为产品镜像（user和userdebug 生成）不包含
GDB服务器二进制文件，需要上传。幸运的是，AOSP的prebuilts目录恰好包含所需的gdbserver
二进制文件。以下片段展示了实现步骤，包括gdbserver二进制文件在AOSP资料库中的路径。
dev:~/android/source $ adb push prebui1ta/misc/android-arm/gdbserver/
gdbserver \
1393 K8/s (186112 bytes in 0.130s)
/data/1ocal/tnp
dev:~/android/source $ adb she11 chmod 755 /data/1oca1/tmp/gdbserver
$eoxmoe/ptoxpue/-1aep
现在gdbserver已经在设备上了，马上就可以附加至浏览器进程。
演示过程中，使用标准TCP/IP连接将GDB客户端连接到GDB服务器上。为了完成连接，
必须采用两种方法中的一种。如果设备和调试主机在同一个Wi-Fi网络里，可以使用其IP地址而
不是后面使用的127.0.0.1。但是通过Wi-Fi远程调试可能有速度慢、信号差、省电功能或其他问
题，从而导致一些麻烦。为了避免这些问题，建议通过USB使用ADB进行调试。但是在一些特
殊情况下，例如调试USB进程时，可能就没有选择的余地了。如果使用USB，就需要使用ADB
的端口转发功能为GDB客户端打开一个管道。这个实现是比较简单的，如下所示：
dev:=/android/source $ adb forward tcp:31337 tcp:31337
完成这一步，最轻量级的调试环境就配置好了。
2.附加至浏览器
下一步，使用GDB服务器执行目标程序，或者附加至现有进程。不带参数运行gdbserver
二进制文件可以查看所需的命令行参数。
dev:~/android/source S adb she11 /data/loca1/tmp/gdbserver
Usage1S
gdbserVer [OPTIONS] COMK PROG[ARGS ...]
gdbserver
[OPTIONS] --attach COMM PID
gdbserver [OPTIoNS] --mult1 COMM
Coe8d may either be a tty device (for serial debugging). or
HOST:PORT to listen for a TCP connection.
---
## Page 197
7.6调试原生代码
181
Options1
--debug
--remote-debug
Bnable general debugging output.
Enable remote protocol debugging output.
--Mrapper MRAPPER --  Run WRAPPER to start new programs.
-=versLon
Display version information and exit,
上面的输出结果显示gdbserver支持三种不同的模式，三种模式都需要coMM参数。上面已
经介绍了该参数的用法，这里使用之前通过ADB转发的端口tcp：31337作为这个参数。第一种模
式用于执行程序、允许指定目标程序并传递期望的参数。第二种模式允许附加至现有进程，使用
PID参数指定进程ID。第三种模式是多进程模式。在此模式中，gdbserver依然会监听客户端的
连接，但不会自动执行程序或附加进程，面是按照客户端的命令来执行。
选定操作模式后，就可以准备附加至浏览器进程了，但是这需要浏览器处于运行状态。设备
启动时浏览器不会自动运行，需要通过以下命令来启动它：
shelleandroid:/ $ am start -a android.intent,action.VIew \
Starting: Intent ( act=android.intent.action.View dat=about :blank )
-d about :blank com.google.android,browser
可以使用带有start参数的am命令，通过发送intent打开浏览器并导航至空白页about:blank
的URI。另外，为了避免不小心打开已安装的其他浏览器，需要指定浏览器的包为com.google.
android.browser。当然，手动打开浏览器也是可行的。
附加至已运行浏览器的最后一步是获取测览器进程ID号，可以使用BusyBox工具或者ps
命令。
2051she118android1/ $ p8 1/data/1local/tmp/busybox grep browser
u0_a4
2051 129 522012 59224 ffffffff 00000000 S
com. google.android.browser
she11eandroid: / $ /data/local/tmp/busybox pidof \
com-google.android.browser
2051
现在，使用附加模式启动gdbserver。首先退出ADB shell并返回主机shell，使用adb she11
命令启动gdbserver，让它附加到测览器进程ID。
dev:~/android/source $ adb shel1 su -e /data/loca1/tmp/gdbserver \
--attach tcp:31337 2225
Attached;pid-2225
Listening on port 31337
[1]+ Stopped
*Z
--attach tcp:31337 2225
adb shel1 su -c /deta/1ocal/tmp/gdbserver
[1]+ adb shel1 su -c /data/loca1/tmp/gdbserver --attach tep:31337 2225 &
dev;~/android/source S bg
gdbserver启动后，使用Control-Z组合键来挂起该进程。然后使用bash的bg命令将adb进
程转到后台运行。还可以从一开始就使用bash的&控制操作符（与bg命令类似）让ADB后台运
行。这样就可以释放终端，从而附加GDB客户端。
---
## Page 198
182第7章调试与分析安全漏洞
3.连接GDB客户端
最后一步是将GDB客户端连接至正在设备上监听的GDB服务器。AOSP包含一个全功能的
GDB客户端。较新版本的AOSP甚至在GDB客户端中包含了对Python的支持。启动并连接客户
端，如下所示：
dev: ~/android/source $ arm-eabi -gdb -q