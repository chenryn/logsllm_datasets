#!/work/bin/nawk -f 
#
#
23-25
#
共
共
开
共
#
 combine.idx -- merge keys with same PRIMARY key 
It compares the keys and merges the duplicates.
input should be PRIMARY:SECONDARY:PAGELIST 
Version 1.1 7/10/90
and combine consecutive page numbers 
----
Author: Dale Dougherty
# test that tertiary key exists
TERTIARY = array[2] 
size0fArray = split($2, array, ";") 
SECONDARY = array[1]
# split second field, getting SEC and TERT keys.
# assign first field
if
PRIMARY=$1
(size0fArray > 1) { 
# two cases where ";" might turn up 
# tertiary key exists 
#
isTertiary = 1 
 check SEC key for list of "see also"
(SECONDARY ~
QQ群：
 SECONDARY = $2
isTertiary =
50192241
八\([sS]ee also/) {
- 350 -
0
第十二章
综合应用
---
## Page 333
#
#
#
NF:
 routine for "See" entries (primary key only)
# end of main procedure 
It handles output of the page number.
routine for all other entries
== 1 { printf ("\n") }
# consecutive page numbers.
# calls function numrange() to look for
>1{
 prevSecondary = SECONDARY
if (PAGELIST)
else {
# determines which non-duplicate keys to output.
# of previous entry. Then compare secondary keys. This 
# Conditional to compare primary key of this entry to that
# assign third field
else # tertiary key does not exist
if (PRIMARY == prevPrimary) {
PAGELIST = $3 
printf (":%s", numrange (PAGELIST))
 isTertiary = 0 
 prevPrimary = PRIMARY 
else
if ($2 != ""）
if (NR != 1)
else
if (isTertiary && SECONDARY == prevSecondary)
if (TERTlARY ~ /\([sS]ee also/){
# check TERT key for "see also"
printf ("%s", PRIMARY)
printf ("%s:%s", PRIMARY, $2)
printf ("\n")
printf (";\n::%s", TERTIARY)
QQ群：
else
TERTIARY = substr($2, （index($2, ";") + 1))
if (isTertiary)
printf ("\n:%s", SECONDARY)
printf ("\n:%s; %s", SECONDARY, TERTIARY)
50192241
- 351 -
第十二章
综合应用
---
## Page 334
function numrange (PAGE, listOfPages, sizeOfArray)
# Supporting Functions 
#
中
#
共
END { printf ("\n")}
 separated by ^.
PAGE = volumes separated by semicolons; volume and page 
to combine consecutive page numbers in the list.
from Page for each Volume and call rangeOfPages
numrange -- read list of Volume^Page numbers, detach Volume
# Check to see if more than 1 volume.
sizeOfArray = split(PAGE, howManyVolumes,";")
# Split up list by volume.
else
 # END procedure outputs newline
else ↑ # not more than 1 volume 
if (! isTertiary Il (TERTIARY && SECONDARY)） printf (":")
QQ群：
if (split(PAGE, volPage,"~") == 2 )
# check for single volume index with volume number
} # end for loop 
for (i = 1; i  1 
listofPages = volPage[1] "~"
else 
# for each Volume^Page element, detach Volume
if (i == 1)
+
consecutive numbers.
separate page numbers and compare to find
and call rangeOfPages function on Page to
50192241
result=result ";" listOfPages
 result = listofPages
# collect output in listOfPages
listOfPages = volPage[1] "~"
range0fPages (volPage [2])
- 352 -
第十二章
综合应用
---
## Page 335
function rangeOfPages (PAGENUMBERS, pagesAll, sizeOfArray, pages,
#
#
#
#
 PAGENUMBERS = comma-separated list of page numbers 
 to the next, looking for consecutive numbers.
 range0fPages -- read list of comma-separated page numbers,
 # End of numrange function 
load them into an array, and compare each one
# if more than 1 page number 
gsub(/ － /，",-"， PAGENUMBERS)
#
#
+
 split list up into eachpage array.
 close-up space on troff-generated ranges 
# for each page number, 
(size0fArray > 1) {
for
# for loop starts at 2 
return result # Volume^Page list 
# end of else 
 = 0 # flag indicates assignment to pagesAll
QQ群：
# use values of firstpage and lastpage to make range.
while ((eachpage[j-1]+1) == eachpage[j] ll
（j = 2; j-1 = 1) {
1 # end of while loop 
result = listOfPages
else # No volume number involved 
range0fPages (volPage[2])
= 0 # flag indicates consecutive numbers found
irstpage = eachpage[j-1] 
 and loop until we find last page (lastpage)
loop while page numbers are consecutive
listOfPages, d, p, j）{
listOfPages = rangeOfPages (volPage[1])
++j
# increment counters
++d
lastpage = eachpage[j]
50192241
if (eachpage[j]~
sub(/^-/, "", eachpage[j])
"-" from troff-generated range
- 353 -
 compare it to previous number + 1 
/^-/）{
第十二章
综合应用
---
## Page 336
下面列出了不同的形式：
字和次关键字为空。
字匹配，那么第三关键字必须是唯一的。那么我们只输出第三关键字，主关键
一起输出。如果主关键字和前面的关键字匹配，而且次关键字和前面的次关键
的匹配，则比较次关键字。如果关键字是唯一的，那么连同条目中余下的部分
关键字是唯一的，那么连同条目中余下的部分一起输出。如果主关键字和前面
pagenums.idx 删除。
码时对这个例程的本部分介绍的一样，具有完全相同关键字的条目已经被
主过程的下一部分包含用于查找相通关键字的条件表达式。和我们在讨论伪代
置标志isTertiary为1或 0。
关键字，我们使用 split()分隔它们。然后我们测试第三关键字是否存在并设
字
这个脚本包括很短的 BEGIN和 END 过程。主例程用于比较主关键字和次关键
。这个例程的第一部分将字段赋值给变量。第二个字段包含次关键字和第三
” # End of range0fPages function 
return listofPages
gsub(/, /,
else # only one page 
} # end of sizeOfArray >
# assign pagesAll to listOfPages
listOfPages = pagesAll 
 # return changed list of page numbers
 # add space following comma 
listOfPages = PAGENUMBERS
↓# end of for loop 
"，"，listOfPages)
QQ群：
 # assign range to pagesAll
pages = firstpage 
else {
} (0 == d) +!
# there is a range
sased "‘. Ilasa?ed = Illysaaed
50192241
p=1
pagesAll = pages
354
第十二章
综合应用
---
## Page 337
这个程序的样本输出如下所示:
比较。这个函数返回页码的列表。
码列表，我们将调用第二个函数range0fPages（）来查找连续的页码。对于单）
用 split()利用“~”作为定界符将卷号从页码列表中分离开。一旦有了这个页
这个函数调用 split()并利用一个分号作为定界符来分隔每个卷。然后我们调
卷索引，这里的页码列表如下所示：
拆开并寻找连续的页。它还调用函数 numrange()，该函数的主要目的是处理多
第二个过程处理所有页码的条目，在这个过程中我们调用一个函数将页码列表
输入。
列表中的第一种形式。也就是说，因为没有页码，所以必须输出换行符来完成
书的索引，如本章所给出的样本例子，函数numrange（)没有做任何事，只是调
主过程后面跟着两个附加程序。第一个只有在NF 等于1时才执行。它处理以上
容
田
容，创建了eachpage 数组并利用 while 循环访问这个数组来与前一个的元素相
:generic functions:21
:concept of windows differs from X:25
:about:3, 7, 10 
xView: 18
Xv_Font type:310
Xlib.h header file:89,
:repainting canvas:88
xlib:6 
I~35,55;11~200
主关键字：次关键字：第三关键字
：第三关键字
：次关键字：第三关键字
:frames and subframes:26
:example of programming interface:44
:data types; table of:20 
:compi ling programs:41
:as object-oriented system:17
：次关键字
主关键字：次关键字
主关键字
QQ群：
50192241
294
- 355
第十二章
综合应用
本
---
## Page 338
下面是format.idx 的完整程序：
用命令行参数设置变量FMT 来确定采用哪种输出格式。
印。唯一的问题时我们要输出的条目需要依据字母表的字母来分组。
同的报告，
Format.idx脚本或许是最简单的脚本,
前面的脚本几乎完成了所有的处理，并给出了有序的输入纪律的列表。
格式化索引
的例子。他也是有连续页码范围的条目的一个例子
要特别注意在“XView”下的“对象”。
#
#!/work/bin/nawk -f
#
#
#
#
: window objects:25
: types:43
: subwindows : 28 
:structure of applications:41
: reserved prefixes:43 
: reserved names:43
:programs; initialization:45
:programming interface:41
:programmer'
:packages: 18,
:: list of:43
:: table of:20;
:objects:23-24;
:notification:10, 35
: libraries:42 
:Generic 0bject:18, 24
 FMT = 1 output with troff macros
Args: FMT = O (default) format for screen 
Version 1.1 7/10/90
 format.idx -- prepare formatted index
input should be PRIMARY:SECONDARY:PAGE:VOLUME 
Author: Dale Dougherty
一个显示在终端屏幕上，
QQ群：
s model:17-23
43
50192241
356
一个被输送到 troff 利用激光打印机打
 读取输入记录的列表被生成两个格式不
。这是一个有多个第三关键字和次关键字
第十二章
综合应用
---
## Page 339
else
printf (" %s", TERTIARY)
printf (". XF 3 \"%s", TERTIARY)
# Look for empty fields to determine what to output
# assign field to variables 
gsub (/\\72/,
gsub (/\\72/,
Pased rou ahe sia!t zeue os 'os tou ‘pia!t yoee dot qns ayeu #
# main routine - 
printf (". so indexmacs\n")
# Output initial macros if troff FMT
BEGIN {FS = ":" 
# MACDIR = pathname of index troff macro file 
else
if (FMT == 1)
PAGE = $4
TERTIARY = $3
if (! PRIMARY) {
PAGE =
SECONDARY
if (NF 
PAGE=
SECONDARY =：
PRIMARY = $1
gsub(/\\72/,