本文是[Reading privileged memory with a side-channel](https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html)的翻译文章。下篇见[这里](https://xz.aliyun.com/t/2274)
# 前言
我们发现，CPU数据高速缓存时序可能会被滥用，从错误推测的执行中高效地泄漏信息，导致（最坏的情况下）各种上下文中跨本地安全边界的任意虚拟内存读取漏洞。
已知这个问题的变体会影响许多现代处理器，包括英特尔，AMD和ARM的某些处理器。对于少数英特尔和AMD
CPU型号，我们有针对真正软件的攻击。我们在2017-06-01向英特尔，AMD和ARM报告了此问题[1] 。
到目前为止，这个问题有三种已知的变体：
  * 变体1：边界检查旁路（CVE-2017-5753）
  * 变体2：分支目标注入（CVE-2017-5715）
  * 变体3：流氓数据缓存加载（CVE-2017-5754）
在此处所述的问题公开披露之前，Daniel Gruss，Moritz Lipp，Yuval Yarom，Paul Kocher，Daniel
Genkin，Michael Schwarz，Mike Hamburg，Stefan Mangard，Thomas Prescher和Werner
Haas也报告了这些问题; 他们的[writeups/博文/论文稿]可以在下面找到：
  * [幽灵](https://spectreattack.com/spectre.pdf)
  * [熔断](https://meltdownattack.com/meltdown.pdf)
在我们的研究过程中，我们开发了以下概念验证（PoC）：
  * PoC演示了经测试的Intel Haswell Xeon CPU，AMD FX CPU，AMD PRO CPU和ARM Cortex A57 [2]中用户空间中变体1的基本原理。这个PoC只测试在同一个进程中读取错误推测执行的数据的能力，而不会跨越任何特权边界。
  * 变种1的PoC在具有发行标准配置的现代Linux内核下以普通用户权限运行时，可以在Intel Haswell Xeon CPU上的内核虚拟内存中执行4GiB范围内的任意读取[3] 。如果内核的BPF JIT被启用（非默认配置），它也可以在AMD PRO CPU上运行。在Intel Haswell Xeon CPU上，大约4秒的启动时间后，内核虚拟内存可以以每秒2000字节左右的速度读取。[4]
  * 对于版本2的PoC，当在基于Intel Haswell Xeon CPU的virt-manager创建的KVM guest虚拟机中以超级用户权限运行时，可以读取在主机上运行的特定（已过时）版本的Debian发行版内核[5]以大约1500字节/秒的速率托管内核内存，并具有优化空间。在执行攻击之前，对于具有64GiB RAM的机器，需要执行大约10到30分钟的初始化; 所需的时间应该与主机RAM的数量大致呈线性关系。（如果客户端有2MB大容量页面，初始化应该快得多，但是还没有经过测试。）
  * 变种3的PoC在以正常用户权限运行时，可以在某种先决条件下读取Intel Haswell Xeon CPU上的内核内存。我们相信这个先决条件是目标内核内存存在于L1D缓存中。
有关此主题的有趣资源，请参阅“文献”部分。
在这篇博文中关于处理器内部解释的警告：这篇博文包含了很多关于基于观察到的行为的硬件内部的推测，这可能不一定对应于实际处理器。
我们对可能的缓解有一些想法，并向处理器供应商提供了其中的一些想法。然而，我们相信处理器供应商的地位远比我们设计和评估缓解措施更好，我们期望它们成为权威指导的来源。
我们发送给CPU供应商的PoC代码和写法可以在这里找到:
# 测试处理器
  * Intel(R) Xeon(R) CPU E5-1650 v3 @ 3.50GHz (本文档的其余部分称为“Intel Haswell Xeon CPU”)
  * AMD FX(tm)-8320 Eight-Core Processor (本文档的其余部分称为“AMD FX CPU”)
  * AMD PRO A8-9600 R7, 10 COMPUTE CORES 4C+6G (本文档的其余部分称为“AMD PRO CPU”)
  * An ARM Cortex A57 core of a Google Nexus 5x phone [6] (本文档的其余部分称为“ARM Cortex A57”)
# 词汇表
退出（retire）:当其结果（例如寄存器写入和存储器写入）被提交并使其对系统的其他部分可见时，指令退出。指令可以不按顺序执行，但必须按顺序退出。
逻辑处理器核心（logical processor core）：逻辑处理器核心是操作系统认为的处理器核心。启用超线程后，逻辑核心的数量是物理核心数量的倍数。
缓存/未缓存的数据（cached/uncached
data）：在本文中，“未缓存”的数据是仅存在于主内存中的数据，而不是CPU的任何缓存级别中的数据。加载未缓存的数据通常需要超过100个CPU时间周期。
推测性执行（speculative
execution）：处理器可以执行经过分支而不知道其是否被采用或其目标在何处，因此在知道它们是否应该被执行之前执行指令。如果这种推测结果不正确，那么CPU可以放弃没有架构效应的结果状态，并继续在正确的执行路径上执行。在知道它们处于正确的执行路径之前，指令不会退出。
错误推测窗口（mis-speculation window）：CPU推测性地执行错误代码并且尚未检测到错误发生的时间窗口。
# 变体1：边界检查旁路
本节解释所有三种变体背后的常见理论，以及我们PoC变体1背后的理论，在Debian
distro内核下运行在用户空间中时，可以在内核内存的4GiB区域执行任意读取，至少在以下配置中：
  * Intel Haswell Xeon CPU，eBPF JIT关闭（默认状态）
  * Intel Haswell Xeon CPU，eBPF JIT打开（非默认状态）
  * AMD PRO CPU，eBPF JIT打开（非默认状态）
eBPF JIT的状态可以使用net.core.bpf_jit_enable sysctl进行切换。
## 理论解释
“[英特尔优化参考手册](https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf)”在第2.3.2.3节（“分支预测”）中对Sandy Bridge（以及后来的微架构修订版）进行了如下说明：
> 分支预测预测分支目标并启用该分支  
>  处理器在分支之前很久就开始执行指令  
>  真正的执行路径是已知的。
在第2.3.5.2节（“L1 DCache”）中：
> 负载可以：  
>  [...]  
>  在前面的分支得到解决之前进行推测。  
>  不按顺序并以重叠方式进行缓存未命中。
英特尔软件开发人员手册[7]在第3A卷第11.7节（“隐式高速缓存（Pentium 4，Intel Xeon和P6系列处理器）”中声明：
>
> 隐式高速缓存发生在内存元素具有可缓存性时，尽管该元素可能永远不会以正常的冯诺依曼序列被访问。由于积极的预取，分支预测和TLB未命中处理，隐式高速缓存出现在P6和更新的处理器系列上。隐式缓存是现有Intel386，Intel486和Pentium处理器系统行为的扩展，因为在这些处理器系列上运行的软件也无法确定性地预测指令预取的行为。
考虑下面的代码示例。如果`arr1-> length` 未缓存，则处理器可以推测性地从`arr1-> data
[untrusted_offset_from_caller]` 加载数据。这是一个超出界限的阅读。这应该不重要，因为处理器将在分支执行时有效回滚执行状态;
推测性执行的指令都不会退出（例如导致寄存器等被影响）。
    struct array {
    unsigned long length;
    unsigned char data[];
    };
    struct array *arr1 = ...;
    unsigned long untrusted_offset_from_caller = ...;
    if (untrusted_offset_from_caller length) {
    unsigned char value = arr1->data[untrusted_offset_from_caller];
    ...
    }
但是，在下面的代码示例中，存在一个问题。如果`arr1-> length`，`arr2-> data [0x200] 和arr2-> data
[0x300]` 没有被缓存，但所有其他被访问的数据都是，并且分支条件预测为true，处理器可以在加载arr1-> length并重新执行之前进行如下推测：
  * `load value = arr1-> data [ untrusted_offset_from_caller ]`
  * 从`arr2-> data`中的数据相关偏移量开始加载，将相应的高速缓存行加载到L1高速缓存中
        struct array {