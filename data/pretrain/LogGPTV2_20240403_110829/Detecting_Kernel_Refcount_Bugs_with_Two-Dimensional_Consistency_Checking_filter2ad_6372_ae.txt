### Introduction
Despite the advantages of CRCount in simplifying object and reference management, its performance overhead limits its widespread adoption. For programs that still rely on manual refcount operations, such as the Linux kernel and Mozilla Firefox, tools like CID (Consistency-based Inconsistency Detector) are essential for detecting refcount bugs.

### Refcount Bug Detection
Refcount management is critical in software development, and several approaches have been proposed to detect refcount-related issues. For instance, developers and testers have implemented refcount tracing and balancing techniques in Firefox to dynamically track refcounted objects. However, the effectiveness of dynamic testing is limited by the input coverage. Consequently, researchers often prefer static analysis or symbolic execution for more comprehensive bug detection.

- **Referee [17]**: Uses symbolic model checking to identify refcount errors in multi-threaded environments. This method requires a complete control flow of the program and assumes uniform resource management, making it unsuitable for OS kernels.
- **Pungi [24]**: Detects refcount bugs in Python/C programs by ensuring that changes in refcount equal the number of references escaping a function. Its applicability to OS kernels is limited due to the difficulty of accurate inter-procedural escape analysis and the presence of functions that modify refcounts without reference-escaping.
- **RID [29]**: Introduces inconsistent path pair (IPP) checking to detect refcount inconsistencies. While effective, its scope is narrow, as it only detected 10 out of 60 reported refcount bugs in the Linux kernel between 2018 and 2020.

### Consistency Checking
Engler et al. [18] pioneered the use of statistical analysis for bug detection, which, although not sound, has been widely adopted. Other notable works include:
- **Juxta [31]**: Cross-checks semantically equivalent file system implementations to detect semantic bugs.
- **Yamaguchi et al. [41]**: Infers search patterns for taint-style vulnerabilities through sink pattern clustering.
- **APISan [43]**: Identifies deviations in API usage under rich symbolic contexts.
- **CRIX [26]**: Cross-checks the semantics of conditional statements in critical variable slices.
- **RoleCast [38]**: Detects role-specific missing checks in web applications using consistency checking.

CID stands out from these works in two key ways:
1. It is the first to apply cross-checking specifically to refcount bug detection, which requires identifying refcount fields and operations.
2. Many refcount functions are called infrequently, making traditional cross-checking ineffective. CID addresses this by incorporating INC-DEC consistency checking, which requires only one occurrence.

### Static Analysis in Kernels
With the increasing availability of open-source operating systems like Linux and FreeBSD, static analysis has become a popular tool for detecting security bugs in kernels. Commonly used source code-based static analysis tools include Smatch [8], Sparse [9], and Coccinelle [32]. However, these tools are not suitable for implementing CID because:
1. CID leverages correlations across different operations rather than specific patterns within a single function.
2. CID relies on more complex data-flow analyses, such as reference-escape and path-constraint analysis, which are challenging to implement in Coccinelle scripts.

Recent works have also explored intermediate code-based analysis:
- **K-Miner [20]**: Partitions kernel code along separate execution paths for inter-procedural data-flow analysis.
- **Dr.Checker [28]**: Focuses on improving the precision of data-flow analysis in Linux kernel drivers, sometimes sacrificing soundness.
- **UniSan [27]**: Detects information leaks caused by uninitialized reads.
- **KINT [39]**: Detects integer errors.

In contrast, CID uses precise path-sensitive intra-procedural analysis for refcount bug detection, avoiding the complexity of inter-procedural analysis in the kernel. Additionally, CID employs tailored techniques to identify refcount-related fields and operations.

### Conclusion
Refcount bugs are prevalent in the Linux kernel and can cause significant security issues. CID, a scalable and effective system, uses two-dimensional consistency checking to detect these bugs. It models all refcount behaviors, infers condition-aware rules for detecting refcount bugs, and identifies deviating DEC behaviors across refcount callers. By applying CID to the Linux kernel, 44 new bugs were discovered, with 36 confirmed by maintainers.

### Acknowledgements
We thank Thorsten Holz and anonymous reviewers for their valuable feedback. This work was supported by the National Natural Science Foundation of China, the Natural Science Foundation of Shanghai, and the National Program on Key Basic Research. Min Yang is the corresponding author and a faculty member at the Shanghai Institute of Intelligent Electronics & Systems, Shanghai Institute for Advanced Communication and Data Science, and the Engineering Research Center of CyberSecurity Auditing and Monitoring, Ministry of Education, China. The authors from the University of Minnesota were supported by NSF awards CNS-1815621 and CNS-1931208.

### References
[References listed as provided]

### Appendix
**Table 8: List of New Refcount Bugs Detected by CID**
| ID | File | Buggy Function | Type | Impact | Latent Period |
|----|------|----------------|------|--------|---------------|
| 1  |      | tipc_crypto_rcv | I-D  | ML     |               |
| 2  |      | prq_event_thread | D-D  |        |               |
| 3  |      | ip6_route_info_create | I-D | ML    |               |
| 4  |      | aa_change_profile (#Line: 1328) | D-D |    |             |
| 5  |      | tcp_bpf_recvmsg | I-D  | ML     |               |
| ... | ...  | ...            | ...  | ...    | ...           |

**Note**: "ML" represents memory leak, "I-D" and "D-D" represent INC-DEC and DEC-DEC consistency checking, respectively.