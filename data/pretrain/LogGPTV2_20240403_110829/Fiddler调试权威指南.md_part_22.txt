### 7.3 Fiddler的Viewer模式

通常情况下，一次只能运行一个Fiddler实例。当Fiddler已经打开时，尝试启动新的实例只会激活现有的实例。然而，在某些情况下，可能需要再打开一个独立的Fiddler实例来查看SAZ文件或生成请求。为此，Fiddler提供了两种方法来启动新的Viewer模式：

1. **通过命令行参数**：使用`-viewer`参数。
2. **通过Windows资源管理器**：右键点击SAZ文件并选择“Open in Viewer”。

在Viewer模式下，状态栏会显示Viewer模式图标（如图7-9所示）。如果没有加载任何SAZ文件，窗口标题将显示为“FiddlerViewer”（如图7-10所示）。

![图 7-9](#)
![图 7-10](#)

用户可以通过点击窗口标题并输入新标题来标识该Viewer实例（如图7-11所示）。如果加载了SAZ文件，标题将显示为文件名，并且工具栏提示将显示文件的完整路径（如图7-12所示）。

![图 7-11](#)
![图 7-12](#)

需要注意的是，FiddlerViewer实例不能捕获数据流，且在Viewer模式下所做的大多数用户界面更改（例如隐藏工具栏或重新排列WebSession列表中的列）将在关闭实例时被丢弃。

### 7.4 导入和导出Session

除了Fiddler原生的SAZ格式外，Fiddler还支持多种导入导出功能（即“Transcoders”），从而可以与其他工具共享捕获的网络流量。Fiddler的文件菜单提供了这些功能。使用“Import Sessions...”命令可以从其他格式加载Session，而“Export Sessions”子菜单则允许导出所有Session或仅导出WebSession列表中选中的Session（如图7-13所示）。

![图 7-13](#)

#### 7.4.1 导入格式

当前版本的Fiddler支持以下两种导入格式：

- **HTTP Archive (HAR)**: 基于JSON的有损格式，广泛支持于多种工具，包括Firebug、Chrome开发者工具和HTTPWatch。支持1.1和1.2版本。
- **F12NetXML**: 类似于IE9开发者工具Network选项卡导出的格式，实际上是通过XML编码的HTTPArchive文件。尽管最初的HTTPArchive格式建议使用JSON，但F12NetXML仍然采用XML。Fiddler是唯一较流行的可读取NetXML格式的工具，可以通过它将NetXML文件转换为更常见的格式（如HAR）。

这两种格式都是有损压缩格式，因此可能会丢失一些数据（特别是大型二进制图像）。

选择要导入的格式后，系统会弹出对话框要求选择文件。Fiddler解析选定文件并将数据流添加到WebSession列表中。开发人员还可以添加其他导入格式，目前我正在开发支持Wireshark pcap和NetMon.cap格式的导入程序。

#### 7.4.2 导出格式

Fiddler提供了多种导出功能，支持将数据流导出给其他工具或应用程序使用。以下是Fiddler支持的一些导出格式：

- **HTML5 AppCache Manifest**: 用于生成HTML5应用缓存声明文件。步骤如下：
  1. 清空浏览器缓存。
  2. 启动Fiddler。
  3. 在浏览器中加载网站。
  4. 在Fiddler中选择“File > Export Sessions > All Sessions...”。
  5. 在“Select Format”窗口中选择“HTML5AppCache Manifest”。
  6. 点击“Next”，在“Adjust AppCache Manifest”窗口中选择不希望包含在CACHE部分的资源，将其添加到NETWORK部分（如图7-14所示）。
  7. 在底部文本框中指定Base URL。
  8. 点击“Save”按钮，生成并在文本编辑器中显示声明文件（如图7-15所示）。
  9. 将生成的声明文件保存到Web服务器的适当位置，并配置Web服务器以返回正确的Content-Type。
  10. 在Web页面中，确保页面使用HTML5文档格式，并在HTML元素中添加Manifest属性（如图7-16所示）。

![图 7-14](#)
![图 7-15](#)
![图 7-16](#)

- **HTTP Archive v1.1 和 v1.2**: 包含WebSession的header、body和时间信息。主要区别在于v1.2支持包含小的二进制body。
- **MeddlerScript**: 用于生成HTTP数据流脚本，支持底层socket操作。
- **RawFiles**: 支持将每个响应体保存到磁盘文件，适用于媒体内容的导出（如图7-17所示）。
- **VisualStudio WebTest**: 生成Visual Studio WebTest文件，用于功能测试或本地测试。
- **WCAT Script**: 生成WCAT请求脚本，用于测量Web服务器性能。

![图 7-17](#)

### 8.1 使用FiddlerScript扩展Fiddler

早期版本的Fiddler缺乏扩展功能，仅提供基本功能。随着用户需求的增长，我意识到需要提供更多灵活性。最初的想法是创建一个复杂的过滤器UI，但这既繁琐又难以满足所有用户的需求。于是，我决定让用户自己编写代码来实现过滤功能，这一想法最终演变成了FiddlerScript引擎。

FiddlerScript使得用户能够自定义处理每个Session的方法，极大地增强了Fiddler的功能。学习FiddlerScript不仅可以帮助你更好地理解Fiddler的工作原理，还能让你根据具体需求进行定制化扩展。

#### 8.1.1 关于FiddlerScript

Fiddler在处理每个Session时，都会运行CustomRules.js脚本文件中的方法。这使得用户能够对每个请求和响应进行自定义处理。