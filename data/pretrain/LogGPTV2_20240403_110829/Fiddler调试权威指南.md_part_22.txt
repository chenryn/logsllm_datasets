MARKER.
7.3Fiddler的Viewer模式
通常情况下，每次只能执行一个Fiddler实例：当Fiddler已经打开一个实例时，如果想
打开一个新的实例，只会激活已有的Fiddler实例。
但是，有时再打开一个独立的Fiddler实例查看SAZ文件或生成请求是必要的。要实现这
一点，Fiddler支持通过两种方式打开新的Viewer实例，一是传递命令行参数-viewer，二是在
Windows Explorer中右键点击SAZ文件，从上下文菜单中选中OpeninViewer，如图7-9所示。
ViewerMode实例在状态栏中会以Viewer模式图标VeweMode显示，面且可以通过工具栏
143
---
## Page 144
第7章保存、导入和导出数据流
前面的文本来表示。如果没有加载任何SAZ文件，文本会显示FiddlerViewer，如图7-10所示。
W
Open
Open with...
FiddlerViewerReplay
图 7-9
图 7-10
可以通过点击文本，输入新的标题来标识该Viewer实例，如图7-11所示。
如果把SAZ文件加载到实例中，文本会变成SAZ文件名称，显示文件的全路径的工具
栏提示，如图7-12所示。
nsansayXda
YourText HereReplay
WebSessions
C:\Users\ericlawA,Documents\Fiddler21Captures`test.saz
图 7-11
图 7-12
FiddlerViewer实例无法捕捉数据流，而且大多数在Viewer模式下所做的用户界面变化
（如隐藏工具栏或对WebSession列表中的列重新排序）在关闭实例时会被丢弃。
7.4导人和导出Session
除了Fiddler原始的SAZ格式，Fiddler调试器还提供丰富的导入导出功能（即“Transcoders”），
从面可以和其他工具共享捕捉到的网络流。除了Fiddler绑定的Transcoders，扩展机制支持其他
开发人员添加其他格式。
Fiddler的文件夹菜单提供导入导出功能。ImportSessions..命令支持从其他格式加载
Session，而ExportSessions子菜单支持导出所有的Session或只在WebSession列表中选中的
Session，如图7-13所示。
Import Sessions...
Export Sessions
All Sessions..
Eyit
Selected Sessions.
图 7-13
144
---
## Page 145
7.4导入和导出Session
7.4.1导入格式
当前的Fiddler版本包括两种导入格式：HTTPArchive和F12NetXML。HTTPArchive格
式（HAR;http://groups.google.com/group/http-archive-specification）是有损的基于JSON的格
式，很多工具支持它，包括Firebug、Chrome浏览器的开发者工具以及HTTPWatch。支持1.1
版本和1.2版本。
F12NetXML格式和IE9开发者工具的Network选项卡导出的格式非常类似。它实际
上就是HTTPArchive文件，这种文件通过XML面不是JSON编码。该格式不是故意要和
微软的IE导出格式不同，面是因为原始的HTTPArchive格式是通过XML语法定义的。
在说明的最上方，只是简单提了一下应该使用JSON格式。Fiddler是唯一较流行的可读取
NetXML格式的工具：可以通过Fiddler加载NetXML，保存成更常见的格式（如HAR）。
注意，这两种格式都是有损压缩格式，因此有些数据会丢失（特别地，不会显示大的二进
制图像）
选中了要导入的格式后，系统会弹出对话框要求你选择要导入的文件。Fiddler会解析选
中的文件，其数据流会添加到WebSession列表。
开发人员都可以添加其他导入格式。目前，我在开发可以导入Wiresharkpcap格式和
NetMon.cap格式文件的导入程序。
7.4.2导出格式
Fiddler提供了很多导出功能，支持导出数据流给其他工具或应用使用。本章的剩余部分
将会描述Fiddler本身支持的导出格式。
HTML5AppCache声朗文件
HTML引入了应用缓存（ApplicationCache）的概念，它支持Web开发人员提供页面声
明文件（manifest），可以缓存这些文件以供离线使用。声明文件指定测览器应该将哪个资源
下载到AppCache中，而哪些资源应该一直从网络获取。
声明文件只是文本文件，可以通过选中的文本编辑器创建它们。但是，该过程可能会很
繁琐，需要自动化解决方案。Fiddler的HTML5AppCacheManifest Exporter 使得生成声明文
件变得很简单：
1）清空浏览器缓存。
145
---
## Page 146
第7章保存、导入和导出数据流
2）启动Fiddler。
3）在浏览器加载web站点。
4）在 Fiddler 中点击i File > Export Sessions > All Sessions...
5）在SelectFormat窗口中，选中HTML5AppCache Manifest。
6）点击Next。在AdjustAppCacheManifest窗口中，选中不希望在声明文件（manifest）
的CACHE部分包含的资源：把这些资源添加到声明文件的NETWORK部分，如图7-14
所示。
dheAeaceTon
hepaunURLinheborbee
SeeType
Marivp
1ep /
8128 le6/ftei
htg//enionadft.con/tentdive/lews/Homepage/MDenosprg
Images
3157 ogeiprg
Cref//len
59439
9715
ntp//enonsdft.contetde/lews/Hmepae/com/pdOhwcking.ong
nageipng
4751
nageiprg
p//e
206mge9g
20018
inage-png
CSS
SR.OR
Script
Sase URL
(Detonal) Speoy (RL t 
图7-14
7）可以通过最下方的文本框，如果资源URL和声明相关，指定一个BaseURL。例如，
在上面的例子中，我会把声明文件放在目录http:/ie.microsofL.com/testdrive下，因而会使用它
作为Base URL。
8）点击Save按钮，在文本编辑器中生成并显示声明，如图7-15所示。
9）如果对生成的声明满意，就把它保存到Web服务器的合适位置。确保将Web服务器
配置为返回包含Content-Type:text/cache-manifest的声明文件类型。
146
---
## Page 147
7.4导入和导出Session
olax
CACE//6:：3
epoy se that uRLs are relative to: http:/fe.mfcrosoft.com/testdrive
ACHE
Vios
iosepape
vies
ews
epage/rapping.prg
图 7-15
10）在Web页面，确保页面会以标准模式运行（如使用HTML5文档格式），在指向应
用的声明文件的HTML元素中添加Manifest属性，如图7-16所示。
记住，当浏览器使用AppCached内容，会从缓存中重用
本地缓存的，在Fiddler中，你不会看到重新加载该内容的请
图7-16
求。如果你希望使用Fiddler修改这部分内容，需要清空浏览器缓存，从面强制浏览器在下一
次使用时重新从网络加载内容。
HTTPArchivev1.1和v1.2
HTTPArchive格式是一种JSON格式，它包含WebSession的header、body和时间信息。
1.1版本和1.2版本之间的主要区别是新版本支持包含小的二进制body。
默认情况下，Fiddler会保存最多1MB大小的文本类型的body，面二进制类型的body最
多可以保存32768字节：可以通过设置相应的preference对这些值进行修改。
fiddler.importexport.HTTPArchiveJSON.MaxTextBodyLength
fiddler.importexport.HTrPArchiveJSON.MaxBinaryBodyLength
如果body太长了，它不会以文件形式保存，相反地，在Session中会添加一条注释，表
示忽略该body。
MeddlerScript
Meddler（http://webdbg.com/Meddler/）是一个HTTP数据流生成工具，我开发它是为了支
147
---
## Page 148
第7章保存、导入和导出数据流
持创建小的、自包含的HTTP数据流。Meddler本质上是个“脚本Socket”，它支持非常底层
的socket操作，该功能对于调试浏览器或其他客户端很有用。
当你把WebSession导出到MeddlerScript时，生成的.MS文件可以加载到Meddler中，
从而可以“重放”数据流。从概念上讲，这和使用Fiddler的AutoResponder选项卡重放之前
从SAZ文件插提到的数据流非常类似，但是Meddler脚本更便于实现目动化，而且支持在底
层做一些调整（如“在发送header和发送body的第一个字节之间等待300ms，然后每隔10s
以每个分块2048字节写body”），而如果使用Fiddler本身则很难实现这一点。
除非你是构建浏览器或其他的HTTP客户端，否则导出MeddlerScript很可能对你没有什么
用处。
原始文件（RawFiles）
RawFilesExporter支持把每个响应体保存到磁盘文件。当把媒体内容导入到磁盘时，该功能
非常有用。举个例子，假设你测览了照片网站，在WebSession列表中收集了一批照片。你可以
使用Fiddler的过滤器和其他功能，只选中感兴趣的照片（如超过20k的JPG文件）。然后，可以
选择File>Export Sessions>Selected Sessions，在 SelectExport Format 选项框选中RawFiles
FileExporter窗口支持配置导出过程，如图7-17所示。
File Exporter
Oplene
Don>>
图 7-17
Path选项框支持选中要创建的新文件夹所在的根路径。该文件夹会自动命名为
Dump-MonthDay-Hour-Minute-Second.
Options选项框包含两个复选框。RecreateFolderStructure会为每个资源基于主机名和文
件路径创建子文件夹。通过它模拟网站在本地磁盘的层次结构。
Openfolderwhen complete选项会打开Windows Explorer，显示导出的文件所在的根目录。
点击Export>按钮可以启动导出。
除了导出媒体文件，RawFiles Exporter还可以方便地为捕捉到的 Web站点创建本地磁盘
的镜像文件。然后，可以拖拽文件夹内容到AutoResponsder选项卡，Fiddler会基于接收到的
---
## Page 149
7.4导入和导出Session
请求重放本地内容镜像。当你想用其他工具（如ExpressionWeb或VisualStudio）在本地编辑
HTML内容时，该功能对于调试Web站点是非常方便的。
VisualStudioWebTest
生成VisualStudio.WebTest文件后，便可以使用VisualStudioWebTest产品重新提交之前
捕捉到的请求，该功能可以用于功能测试或本地测试。在VisualStudio2008以及更新版本中
提供了Visual StudioWebTest工具。
WCATScript
诚如该工具的Web站点所描述的：
Web Capacity Analysis Tool (WCAT) is a lightweight HTTP load generation
tool designed to measure the performance ofa web server within a controlled
s
to a single web site or multiple web sites. The wCAT engine uses a simple script
Fiddler的WCATExporter可以很容易为WCAT生成请求脚本，可以在服务器重新执行这
些请求，校验其处理负载的能力。
可以在http://fiddler2.com/r/?WCAT下载32位或64位的WCAR安装文件。
149
---
## Page 150
O
第章
FiddlerScript
8.1使用FiddlerScript扩展Fiddler
最早版本的Fiddler没有任何扩展功能，用户只能使用其提供的基础功能。很快我就意识
到自己永远都无法满足Fiddler用户为解决各种问题而对该工具提出的各种需求。
Fiddler早期版本的局限性主要在于只提供了一个过滤器（HideImages），流量高峰期间
很容易出现过载。我计划在Fiddller中创建一个提供过滤功能的用户界面，包含很多下拉列表
框和文本框，用户基于其中提供的布尔值来过滤流量。这种方法存在两个明显问题：首先，
它需要我做很多烦人的U1开发；其次，我相信很多用户还是会不满意。高级用户觉得使用
UI控件构建复杂的查询很紧琐，而新用户在尝试创建涉及嵌套AND、OR和NOT操作符的
复杂查询时很容易感到迷茫。
幸运的是，“懒惰”往往会孕育出更好的工程思想。我当时想了一晚：“在Fiddler代码中
构建复杂的过滤表达式对我来说轻而易举。是不是也可以让用户自己写代码实现过滤？”这
个想法让我茅塞顿开，很兴奋一开始想到的是使用.NET框架在应用中构建脚本引擎，而且
把应用的对象模型开放给脚本引擎也很容易。在2003年年底给Fiddler添加了几行代码后，
它的功能就变得强大多了。
虽然Fiddler在过去9年中引入了不少新功能，包括Fiddler扩展和很多内置的过滤功能
但FiddlerScript引擎依然是Fiddler的一个不可或缺的功能特性。在学习FiddlerScript的过程
中，相信你会获益良多，对Fiddler的了解也会更上一层楼。
8.1.1关于FiddlerScript
Fiddler在处理每个Session时，脚本文件CustomRules.js中的方法都会运行，该脚本使得
150
---