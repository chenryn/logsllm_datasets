### Attack Surface Entry Points

- **Drivers**: A large number of drivers for various functionalities.
- **UNIX Philosophy**: Everything is a file.
- **Device Files**: Most drivers expose entry points in `/dev`.
- **File Operations**:
  - `open`
  - `ioctl`
  - `read`
  - `write`
  - `close`

#### Example: `cryptof_ioctl` Function

```c
int cryptof_ioctl(struct file *fp, u_long cmd, void *data) {
    switch (cmd) {
        // Other cases
        case CRYPTO_IOC_NFKEYM: {
            mutex_enter(&crypto_mtx);
            fcr->mname = fcr->aname;
            mutex_exit(&crypto_mtx);

            struct crypt_mkop *mkop = (struct crypt_mkop *)data;
            struct crypt_n_kop *knop = kmem_alloc(mkop->count * sizeof(struct crypt_n_kop), KM_SLEEP);
            int error = copyin(mkop->reqs, knop, mkop->count * sizeof(struct crypt_n_kop));

            if (error == 0) {
                error = cryptodev_mkey(fcr, knop, mkop->count);
                if (error == 0) {
                    error = copyout(knop, mkop->reqs, mkop->count * sizeof(struct crypt_n_kop));
                }
            }

            kmem_free(knop, mkop->count * sizeof(struct crypt_n_kop));
            break;
        }
        // Other cases
    }
    return 0;
}
```

**Security Issues**:
- **Integer Overflow**: Can lead to memory corruption.
- **Sample Bug**:
  - **Crypto Device `CIOCNFKEYM` ioctl**
  - **NetBSD 7.1**
  - **Present Since**: NetBSD 4.0.1 (April 10, 2008)
  - **Issue**: Classic integer overflow leading to memory corruption.

### Ksyms Device Vulnerability

#### Example: `ksyms_open` and `ksyms_mmap` Functions

```c
static int ksyms_open(struct cdev *dev, int flags, int fmt __unused, struct thread *td) {
    struct ksyms_soc *sc;

    sc = (struct ksyms_soc *)malloc(sizeof(*sc), M_KSYMS, M_NOWAIT | M_ZERO);
    sc->sc_proc = td->td_proc;
    sc->sc_pmap = &td->td_proc->p_vmspace->vm_pmap; // Used in d_mmap callback
    return devfs_set_cdevpriv(sc, ksyms_cdevpriv_dtr);
}

static int ksyms_mmap(struct cdev *dev, vm_offset_t offset, vm_paddr_t *paddr,
                      int prot __unused, vm_memattr_t *memattr __unused) {
    struct ksyms_soc *sc;
    int error;

    error = devfs_get_cdevpriv((void **)&sc);
    if (error)
        return error;

    if (offset > round_page(sc->sc_usize) || pmap_extract(sc->sc_pmap, (vm_offset_t)sc->sc_uaddr + offset) != 0)
        return -1;

    return 0;
}
```

**Security Issues**:
- **Sample Bug**:
  - **Ksyms Device**
  - **FreeBSD 11**
  - **Present Since**: FreeBSD 8.0 (May 26, 2009)
  - **Issue**: Expired pointer. The `open()` callback saves a pointer to the `pmap` in private fd/device storage, and the `mmap()` callback uses this saved pointer. If the fd is handed off to another process and the original process exits, the other process will use an expired `pmap`.

### Compatibility Code

- **Binary Compatibility**: BSDs support binary compatibility for older versions, 32-bit programs on 64-bit OS, and other operating systems like Linux.
- **Emulation**: Requires emulation of system calls and other features.
- **Quote**: "The people who rely on the compat layers don't care enough to maintain it. The people who work on the mainline system don't care about the compat layers because they don't use them. The cultures aren't aligned in the same direction. Compat layers rot very quickly." â€“ Theo De Raadt

#### Example: SVR4 Streams Compatibility Code

```c
static int _4_bind(file_t *fp, int fd, struct svr4_strioctl *ioc, struct lwp *l) {
    struct svr4_strmcmd bnd;

    if (ioc->len > sizeof(bnd))
        return EINVAL;

    if ((error = copyin(NETBSD32PTR(ioc->buf), &bnd, ioc->len)) != 0)
        return error;

    switch (st->s_family) {
        case AF_INET:
            netaddr_to_sockaddr_in(&sain, &bnd);
            break;
    }
}

#define SVR4_C_ADDROF(sc) (const void *)((const char *)(sc) + (sc)->offs)

static void netaddr_to_sockaddr_in(struct sockaddr_in *sain, const struct svr4_strmcmd *sc) {
    const struct svr4_netaddr_in *na;

    na = SVR4_C_ADDROF(sc); // Could point to anywhere in memory
    memset(sain, 0, sizeof(*sain));
    sain->sin_len = sizeof(*sain);
    sain->sin_family = na->family; // Crash or info leak
    sain->sin_port = na->port; // Crash or info leak
    sain->sin_addr.s_addr = na->addr; // Crash or info leak
}
```

**Security Issues**:
- **Sample Bug**:
  - **SVR4 Streams Compatibility Code**
  - **NetBSD 7.1**
  - **Present Since**: NetBSD 1.2 (April 11, 1996)
  - **Issue**: Uses an offset from userland without validation, allowing arbitrary kernel memory read, leading to panic or information leak.

### Trap Handlers

- **Purpose**: Handle exceptions or faults such as divide by zero, syscalls, breakpoints, and invalid memory access.
- **Nature**: Ugly and highly architecture-specific, some can be triggered by userland.

### Fuzzing

- **Concept**: Executing random bytes as instructions to generate traps and test kernel handling.
- **Example Fuzzer**:

```c
int rfd;

void execute_code(unsigned char *p) {
    int (*fn)();
    fn = p;
    fn();
    return;
}

void fuzz() {
    unsigned char *code = mmap(NULL, lenbuf, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    while (1) {
        read(rfd, code, lenbuf);
        int pid = fork();
        if (pid != -1) {
            exit(0);
        } else if (pid != 0) {
            execute_code(code);
        } else {
            int status;
            pid_t r;
            r = waitpid(pid, &status, 0);
            if (r != -1) {
                kill(pid, 9);
                sleep(1);
                waitpid(pid, &status, WNOHANG);
            }
        }
    }
}

int main(void) {
    rfd = open("/dev/urandom", O_RDONLY);
    fuzz();
    return 0;
}
```

**Hit Trap Bugs**:
- **Xen NULL Dereference**
- **`tdsendsignal` Invalid Signal 0**

### File Systems

- **Attack Surface**: Malicious filesystem images that get mounted and file operations performed on them.
- **Recent Developments**: All three BSDs now support FUSE, requiring the VFS layer to handle malicious data from userland.

#### FUSE Implementations

- **NetBSD**: Most complete, allows the most file operations.
- **FreeBSD**: Most controlled arguments passed back and forth, less opportunity for consumer mistakes but more parsing/processing in FUSE itself.
- **OpenBSD**: Minimal functional implementation.
- **Common Operations**:
  - `read`
  - `write`
  - `readdir`
  - `getattr`
  - `setattr`

#### Example: `vfs_getcwd_scandir` Function

```c
int vfs_getcwd_scandir(struct vnode **lvpp, struct vnode **uvpp, char **bpp, char *bufp, struct proc *p) {
    int eo_flag, tries, dirbuflen, len, reclen, error = 0;
    struct vattr va;

    error = VOP_GETATTR(lvp, &va, p->p_ucred, p); // Data can come from FUSE
    dirbuflen = DIRBLKSIZ;

    if (dirbuflen < 0)
        return EFAULT;

    error = VOP_READDIR(uvp, &uio, p->p_ucred, &eo_flag); // FUSE can provide arbitrary content
    cpos = dirbuf;

    for (len = (dirbuflen - uio.uio_resid); len > 0; len -= reclen) {
        dp = (struct dirent *)cpos;
        reclen = dp->d_reclen;

        if (reclen < 0 || reclen > dirbuflen || dp->d_fileno != fileno) {
            char *bp = *bpp;
            bp -= dp->d_namlen; // FUSE can lie about d_namlen
            if (bp < bufp)
                return EFAULT;
            strncpy(bp, dp->d_name, dp->d_namlen); // Out-of-bound read
        }
    }
    return 0;
}
```

**Security Issues**:
- **Sample Bug**:
  - **Unbounded malloc and out-of-bound read**
  - **OpenBSD 6.1**
  - **Present Since**: OpenBSD 4.0 (April 28, 2006)
  - **Issue**: `getcwd` syscall when taking data from FUSE/userland.

### Ext2 Filesystem Vulnerability

#### Example: `ext2_nodealloccg` Function

```c
static daddr_t ext2_nodealloccg(struct inode *ip, int cg, daddr_t ipref, int mode) {
    error = bread(ip->i_devvp, fsbtodb(fs, fs->e2fs_gd[cg].ext2bgd_i_bitmap), (int)fs->e2fs_bsize, NOCRED, &bp); // Read from filesystem
    ibp = (char *)bp->b_data;
    len = howmany(fs->e2fs->e2fs_ipg - ipref, NBBY);
    loc = memcchr(&ibp[start], 0xff, len);
    if (loc != NULL) {
        len = start + 1;
        start = 0;
        loc = memcchr(&ibp[start], 0xff, len);
        if (loc != NULL) {
            printf("cg = %d, ipref = %lld, fs = %s\n", cg, (long long)ipref, fs->e2fs_fsmnt);
            panic("ext2fs_nodealloccg: map corrupted"); // Panic driven by filesystem data
        }
    }
    return 0;
}
```

**Security Issues**:
- **Sample Bug**:
  - **Unbounded malloc and out-of-bound read**
  - **OpenBSD 6.1**
  - **Present Since**: OpenBSD 4.0 (April 28, 2006)
  - **Issue**: `getcwd` syscall when taking data from FUSE/userland.