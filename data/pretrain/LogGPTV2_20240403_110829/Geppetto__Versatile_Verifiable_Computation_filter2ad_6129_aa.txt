title:Geppetto: Versatile Verifiable Computation
author:Craig Costello and
C&apos;edric Fournet and
Jon Howell and
Markulf Kohlweiss and
Benjamin Kreuter and
Michael Naehrig and
Bryan Parno and
Samee Zahur
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Geppetto: Versatile Veriﬁable Computation
Craig Costello C´edric Fournet
Benjamin Kreuter† Michael Naehrig Bryan Parno
† University of Virginia
Jon Howell Markulf Kohlweiss
Samee Zahur†
Microsoft Research
Abstract
Cloud computing sparked interest in Veriﬁable Computation
protocols, which allow a weak client to securely outsource com-
putations to remote parties. Recent work has dramatically re-
duced the client’s cost to verify the correctness of their results,
but the overhead to produce proofs remains largely impractical.
Geppetto introduces complementary techniques for reducing
prover overhead and increasing prover ﬂexibility. With Multi-
QAPs, Geppetto reduces the cost of sharing state between com-
putations (e.g., for MapReduce) or within a single computation
by up to two orders of magnitude. Via a careful choice of cryp-
tographic primitives, Geppetto’s instantiation of bounded proof
bootstrapping improves on prior bootstrapped systems by up
to ﬁve orders of magnitude, albeit at some cost in universality.
Geppetto also efﬁciently veriﬁes the correct execution of propri-
etary (i.e., secret) algorithms. Finally, Geppetto’s use of energy-
saving circuits brings the prover’s costs more in line with the
program’s actual (rather than worst-case) execution time.
Geppetto is implemented in a full-ﬂedged, scalable compiler
and runtime that consume LLVM code generated from a variety
of source C programs and cryptographic libraries.
1 Introduction
The recent growth of mobile and cloud computing makes out-
sourcing computations from a weak client to a computationally
powerful worker increasingly attractive economically. Verify-
ing the correctness of such outsourced computations, however,
remains challenging, as does maintaining the privacy of sen-
sitive data used in such computations, or even the privacy of
the computation itself. Prior work on verifying computation
focused on narrow classes of computation [32, 51], relied on
physical-security assumptions [41, 47], assumed uncorrelated
failures [19, 20], or achieved good asymptotics [2, 28, 30, 31,
33, 38, 44] but impractical concrete performance [46, 50].
Recently, several lines of work [9, 46, 49, 52] on veriﬁable
computation [28] have combined theoretical and engineering in-
novations to build systems that can verify the results of general-
purpose outsourced computations while making at most cryp-
tographic assumptions. Two of the best performing, general-
purpose protocols for veriﬁable computation [46, 49] are based
on Quadratic Arithmetic Programs (QAPs) [29]. To provide
non-interactive, publicly veriﬁable computation, as well as
zero-knowledge proofs (i.e., proofs of computations in which
some or all of the worker’s inputs are private), many recent sys-
tems [3, 7, 9, 10, 16, 25, 39, 54] have converged on the Pinoc-
chio protocol [46] as a cryptographic back end. Pinocchio, in
turn, depends on QAPs.
While these protocols have made veriﬁcation nearly practical
for clients, the cost to generate a proof remains a signiﬁcant
barrier to practicality for workers.
Indeed, most applications
are constrained to small instances, since proof generation costs
3–6 orders of magnitude more than the original computation.
With Geppetto1, we combine a series of interlocked tech-
niques that support more ﬂexible, and hence more efﬁcient,
provers. These techniques include the new notion of Multi-
QAPs for sharing state between or within computations,
bounded bootstrapping for succinct proof aggregation, a QAP-
friendly C library for verifying cryptographic computations,
and a new technique for energy-saving circuits, which ensures
the prover’s costs grow with actual execution time, rather than
worst-case execution time.
In more detail, we ﬁrst generalize QAPs to create MultiQAPs,
which allow the veriﬁer (or prover) to commit to data once and
then use that data in multiple related proofs. For example, the
prover can commit to a data set and then use it in many differ-
ent MapReduce jobs. At a ﬁner granularity, we show how to use
MultiQAPs to break an arithmetic circuit up into many smaller,
simpler veriﬁable circuits that efﬁciently share state. Today,
compiling code from C to a QAP typically requires unrolling
all loops and inlining all functions, leading to a huge circuit
full of replicated subcircuit structures. Since key size, and key
and proof generation time all depend linearly (or quasilinearly)
on the circuit size, this blowup severely degrades performance.
With MultiQAPs, instead of unrolling a loop, we can create a
single circuit for the loop body, use a proof for each iteration
of the loop, and connect the state at the end of each iteration
to the input of the next iteration. This allows us to shrink key
size and key generation time, and, more importantly, to save
the prover time and memory. Prior work suggested achieving
similar properties via Merkle hash trees [8, 12, 27, 29, 43], but
implementations show that this approach increases the degree
of the QAP by tens or hundreds per state element [9, 16, 54],
whereas with MultiQAPs, the degree increases only by 1.
With MultiQAPs, the prover generates multiple proofs about
related data. This improves ﬂexibility and performance for the
prover, but it degrades attractive features of Pinocchio, namely
that the proof consists of a (tiny) constant-sized proof, and the
veriﬁer’s work scales only with the IO.
1A skilled craftsman who can create and coordinate many Pinocchios.
© 2015, Craig Costello. Under license to IEEE.
© 2015, Craig Costello. Under license to IEEE.
DOI 10.1109/SP.2015.23
DOI 10.1109/SP.2015.23
253
253
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
As a second contribution, we explore the use of bounded
proof bootstrapping to obtain MultiQAPs with constant-sized
proofs. In theory, with proof bootstrapping [11, 53], the prover
can combine any series of proofs into one by veriﬁably com-
puting the veriﬁcation of all of those proofs. Very recent work
elegantly instantiates unbounded proof bootstrapping [9], but
this generality comes at a cost (§5,§7.3.1). Our instantiation and
implementation of bounded proof bootstrapping shows that, as
with semi-homomorphic vs. fully homomorphic encryption, if
we pragmatically set a bound on the number of proofs we intend
to combine, we can achieve more practical performance.
To support bounded proof bootstrapping, Geppetto includes a
QAP-friendly C library for general-purpose cryptographic com-
putations. Such computations arise in many outsourcing appli-
cations. For instance, a MapReduce job may need to compute
over signed data, or a customer with a smart meter may wish to
privately compute a bill over signed readings [48]. As another
example, recent work [7, 25] shows how to anonymize Bitcoin
transactions using Pinocchio [46] and would beneﬁt from the
ability to verify signatures within transactions. In existing QAP
systems, computations take place over a relatively small (e.g.,
254-bit) ﬁeld, so computing cryptographic operations (e.g., a
signature veriﬁcation) requires an awkward embedding of the
cryptographic machinery via either a BigInteger library built
out of ﬁeld elements or via large extension ﬁelds [25]. With
our techniques, all of these examples can be naturally and efﬁ-
ciently embedded into a proof of an outsourced computation.
By considering (bounded or unbounded) bootstrapping in the
context of our QAP-friendly crypto library, we show how to ef-
ﬁciently compile and outsource computations so that the com-
putation itself is hidden from the veriﬁer. For example, a patient
might verify that a trusted authority (say the US FDA) signed
the code for a medical-data analysis, and that the analysis was
correctly applied to the patient’s data, without the patient ever
learning anything about the proprietary analysis algorithm. Pre-
vious systems could potentially support this scenario via univer-
sal circuits [46, 49] or circuits executing CPU instructions [9],
but the extra level of interpretation potentially slows the com-
putation down by orders of magnitude (see §7.3.1).
Lastly,
just as MultiQAPs eliminate the redundancy that
comes from code repetition (e.g., in the form of loops or func-
tion invocations), we introduce the notion of energy-saving cir-
cuits to eliminate the redundant work that arises from code
branching. With energy saving, the prover only exerts crypto-
graphic effort for the actual path taken (e.g., only the ‘if’ branch
when the condition is true). While energy-saving circuits are
generally useful, they are particularly beneﬁcial when using
bounded proof bootstrapping to combine many proofs from a
MultiQAP. Such proof compaction requires the key generator
to commit, in advance, to the maximal number of proofs to
be combined. With energy saving circuits, the key generator
can choose a large number, and if a particular computation re-
quires fewer proofs, the prover only performs cryptographic op-
erations proportional to the number of proofs used, rather than
the maximum chosen by the key generator.
We have implemented Geppetto as a complete toolchain for
verifying the execution of C programs. Geppetto’s code is avail-
F
F0
(1)
F1
(8)
F1
...
F0
F1
F2
(a)
F2
(b)
F
s
e
s
u
b
F1
F0
F2
(c)
Figure 1: MultiQAPs (a) Most existing veriﬁable computation sys-
tems compile programs to a single large circuit-like representation,
leading to internal redundancy. (b) By extracting common substruc-
tures, we can represent a program as an assembly of smaller circuits,
but the veriﬁer must now also check all connections between circuits.
(c) MultiQAPs connect circuits using bus structures that support suc-
cinct and efﬁcient commitments to the bus values.
able at https://vc.codeplex.com.
It includes a compiler
in F#, a cryptographic runtime in C++, QAP-friendly libraries
in C, and various programming examples. Our compiler takes
as input LLVM code produced by clang, a mainstream state-of-
the-art optimizing C compiler; this enables us to focus on QAP-
speciﬁc compilation. Our libraries support explicit, low-level
control for programming MultiQAPs, allowing the C program-
mer to dictate how state ﬂows from one QAP to another and
hence control the resulting cryptographic costs. Geppetto also
provides higher-level C libraries for common programming pat-
terns, such as MapReduce or loops.
2 Geppetto Overview
In this section, we give an overview of Geppetto’s main con-
structions: MultiQAPs (§2.1), proofs for cryptographic op-
erations and bootstrapping (§2.2), and energy-saving circuits
(§2.3). We defer cryptographic deﬁnitions to §3 and our pro-
tocol to §4.
2.1 MultiQAPs
2.1.1 MultiQAP Intuition
At a high level, prior veriﬁable computation systems like Pinoc-
chio [46] allow a prover to convince a skeptical veriﬁer that
F(u) = y, where u is a veriﬁer-supplied vector of inputs. The
prover accomplishes this with a constant-sized proof π, and the
veriﬁer’s work scales linearly in |u| +|y|, regardless of the com-
plexity of F. However, as F grows to encompass larger and
more complex functionality (see Figure 1), the CPU and mem-
ory costs for the prover (as well as its key size) increase su-
perlinearly. As §7.2 shows, this limits prior systems to modest
application parameters.
254254
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
To scale to larger problems, we can naturally decompose the
proof of F into a conjunction of proofs of m simpler functions
F0, . . . , Fm−1. For example, if F(u) = F1(F0(u)), then na¨ıvely
the prover could use Pinocchio twice to prove:
z = F0(u)
y = F1(z)
(0)
(1)
The veriﬁer would check a proof for each equation separately
and check that the output from F0 was correctly used as input
to F1. Unfortunately, this means that the prover must send the
intermediate state z to the veriﬁer, and the veriﬁer must perform
work linear in |z|. If z is large, then handling so much interme-
diate state would make it difﬁcult or impossible for the veriﬁer
to beneﬁt from outsourcing.
Instead, with Geppetto, we have the prover return a constant-
sized digest, Dz, representing the intermediate state z. The ver-
iﬁer uses this digest when checking the proof for Equation (0)
and when checking the proof for Equation (1), ensuring that
the prover consistently used the same intermediate state in both
proofs, but without requiring the veriﬁer to explicitly handle z.
Prior work achieved a similar reduction in veriﬁer effort by
extending F0 to hash its output and F1 to hash its input, so the
veriﬁer need only handle the constant-sized hash value [8, 12,
29, 43]. However, those hash computations make both functions
more expensive [9, 16]. In contrast, with Geppetto, we observe
that Pinocchio already computes a digest-like structure and that,
with a careful reﬁnement of its encoding, we can have the prover
compute digests almost for free.2
In more detail, we divide all of the variables used to com-
pute F into disjoint sets we call banks. Each bank falls into one
of three categories: a bank may represent F’s (the overall com-
putation’s) input and output (u and y in our earlier example); it
may represent a set of ‘local’ variables used within a single Fi;
or it may be a bus, i.e., a set of variables shared between multi-
ple Fi (e.g., z).
Each bank is associated with its own cryptographic key ma-
terial, used to compute a succinct digest of the values assigned
to the bank’s variables: the prover produces a digest for each
local bank and for each bus, while the veriﬁer produces a digest
for the IO banks as part of the veriﬁcation process. The latter
ensures that the proof veriﬁcation is with respect to the input the
veriﬁer supplied, and the alleged output the prover produced.
To verify a proof that a given Fi was computed correctly, the
veriﬁcation algorithm will need a digest for Fi’s local bank, and
digests for any buses or IO banks that Fi reads or writes. Con-
tinuing our earlier example, the veriﬁer computes IO digests Du
and Dy. The prover computes and returns digests DF0 and DF1
summarizing the intermediate variables used by F0 and F1 re-
spectively, and a single digest Dz representing the values on the
bus between them. He also returns proofs π0 and π1 to demon-
strate that F0 and F1 were computed correctly. The veriﬁer runs