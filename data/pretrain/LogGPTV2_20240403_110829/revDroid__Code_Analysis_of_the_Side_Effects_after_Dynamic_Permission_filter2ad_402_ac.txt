READ_PHONE_STATE
ACCESS_COARSE_LOCATION
ACCESS_FINE_LOCATION
AUTHENTICATE_ACCOUNTS
GET_ACCOUNTS
ACCESS_COARSE_LOCATION
ACCESS_FINE_LOCATION
Mis-usage Count
77
76
70
58
43
42
36
28
28
27
752handling SecurityException. We ran the application on
Android 6.0 and observed that it crashed after we revoked
several permissions. Table 4 shows examples of these APIs
and their corresponding mis-usage count in the regular ap-
plication dataset. What is worse, we ﬁnd out that for the
android.telephony.TelephonyManager:
java.lang.String getDeviceId() API, which is widely used
by applications to get the unique device identiﬁer, there is
no warning about potential side eﬀects either in the oﬃcial
documentation or from the Android Studio IDE. Google’s
oﬃcial documentation should specially instruct application
developers to correctly handle permission failure when they
are using these APIs.
Table 4: Examples of APIs which will cause crash even in
Android 6.0 if not correct used
Figure 3: Distribution of malwares’ handling of potential
side eﬀects. 27% of malwares do not handle all occurrences
of potential side eﬀects, while 73% of malwares handle all.
API
android.location.LocationManager: an-
droid.location.Location getLastKnownLoca-
tion(java.lang.String)
android.telephony.TelephonyManager:
java.lang.String getDeviceId()
android.location.LocationManager: boolean
isProviderEnabled(java.lang.String)
android.location.LocationManager: an-
droid.location.LocationProvider get-
Provider(java.lang.String)
Mis-
usage
Count
77
70
58
36
Figure 4: Distribution of malwares’ handling of potential
side eﬀects categorized by correct usage rate
On the other hand, as shown in Figure 6, 36% API calls in
malwares which require permissions are not correctly han-
dled. The percentage is smaller than that of regular appli-
cations, which echoes the conclusion in Section 4.2.1 that
developers of malwares handle potential side eﬀects better
than those of regular applications.
Figure 5: Distribution of regular applications’ handling of
potential side eﬀects by API calls. 46% of API calls which
require permissions are not correctly handled by regular ap-
plications.
Figure 6: Distribution of malwares’ handling of potential
side eﬀects by API calls. 36% of API calls which require
permissions are not correctly handled by malwares.
4.2.3 Results by Permission
For regular applications, we group the results by permis-
sions to see how many occurrences of unhandled Securi-
tyExceptions there are for API calls which require to work
with one or more permissions. If an API call requires mul-
Malwares handling all potential side effects, 96, 73%Malwares not handling all potential side effects, 36(27%)29212296020406080100120[0, 20%)[20%, 40%)[40%, 60%)[60%, 80%)[80%, 100%)100%Application CountCorrect Usage RateCorrect usages, 965(54%)Mis-usages, 806(46%)Correct usages, 219(64%)Mis-usages, 125(36%)753tiple permissions, the API call will be counted as the occur-
rences of mis-usages for multiple permissions.
Table 5 shows the correct usage rates for the permissions
used by regular applications in our dataset. We can see
from the table that except the permissions with low usage,
the CAMERA permission has the highest correct usage rate of
94.83%. On the other hand, the GET_ACCOUNTS permission is
frequently used but its correct usage rate of 24.35% is low.
The Android documentation and the code lint check func-
tionality in the IDEs for Android [1] partially lead to the
diﬀerence between the correct usage rates of diﬀerent per-
missions. For example, we discover that in the API guides
for the camera functionality, Google explicitly asks devel-
opers to always check for exceptions when using the cam-
era and gives a code example which wraps the invocation
of camera API with an exception handler [2].
In addi-
tion, the code lint check functionality which is provided by
Google and built in the IDEs for Android, e.g., Android
Studio and Eclipse, will show warnings to instruct develop-
ers to handle permission revocation for revocable permis-
sions in Android 6.0 [1]. However, as we test in Android
Studio, this functionality has two issues:
i) this function-
ality is only available for Android Studio 1.4 or later and
not provided on previous versions of Android Studio; ii)
not all APIs which require revocable permissions in An-
droid 6.0 are checked. For example, the code lint check
functionality will warn developers about permission revo-
cation for the android.location.LocationManager: an-
droid.location.Location getLastKnownLocation
(java.lang.String) API, while will not warn developers
about permission revocation for the android.accounts.Account-
Manager: android.accounts.Account[] getAccountsBy-
Type(java.lang.String) API.
4.2.4 Source of Mis-usages in Regular Applications
Many regular applications include third-party libraries,
such as the AdMob ad library2 and the Facebook SDK3,
which are not written by the developers of the applica-
tions but share all the permissions with the hosting applica-
tions [13]. Third-party libraries tend to have common pack-
age name preﬁxes, like com.google.ads or com.facebook.
android [16]. These libraries could unfortunately be the
source of mis-usages, even when the libraries are written by
Google itself, such as Google’s Google Play Services4 which
is an API package for Android applications providing access
to a variety of Google services.
Therefore, it is necessary to ﬁnd out the actual source
of mis-usages. We divide the mis-usages in regular appli-
cations into two categories: one is mis-usages which are
caused by the application developers themselves, and the
other is mis-usages which are caused by third-party libraries.
Our set of third-party libraries contains 86 common libraries
which are widely used by Android applications, especially
popular Android applications on the Google Play Store. We
distinguish the code from third-party libraries from develop-
ers’ own code by matching package name preﬁxes. The set of
third-party libraries are further classiﬁed into the following
four categories:
• Ad libraries. Ad libraries allow developers to embed
2https://www.google.com/admob/
3https://developers.facebook.com/docs/android
4https://developers.google.com/android/guides/overview
ads into their applications to achieve monetization, for
example, Google AdMob, StartApp5 and Tapjoy6.
• Analytics libraries. Analytics libraries help develop-
ers collect data about the usage of their applications,
including running logs, performance metrics, crash re-
port and users’ characteristic, for example, New Relic7,
Splunk8 and HockeyApp9.
• Social libraries. Social libraries, such as Facebook
SDK, provide developers with the ability to integrate
social features, including third-party login, social shar-
ing and user experience personalization, into their ap-
plications.
• Other libraries. This category of libraries include
libraries which do not belong to any of the aforemen-
tioned three categories, including Android Support Li-
brary10, Apache Cordova11 and Apache Thrift12.
As is shown in Figure 7, in the regular application dataset,
developers’ own code accounts for the large majority (96%)
of occurrences of unhandled potential side eﬀects, while third-
party libraries account for only 4%. We can see that third-
party libraries account for much less mis-usages than appli-
cation developers’ own code. As for diﬀerent categories of
third-party libraries, analytics libraries and social libraries
have no mis-usages, while ad libraries and other libraries
both make up the 2% of mis-usages. Note that for ad li-
braries, after careful examination, we ﬁnd out that the 16
(2%) mis-usages are false-positives, so actually ad libraries
also have no mis-usages.
For each category, we also calculate the correct usage rate.
The result is shown in Table 6. Note that for ad libraries,
as we describe in the last paragraph, actually the correct
usage rate for ad libraries is 100%. As the ﬁfth row and
sixth rows in the table show, third-party libraries as a whole
handle 90.72% of potential side eﬀects, while the case for
developers’ own code is worse, with a correct usage rate of
46.07%.
In conclusion, third-party libraries handle potential side
eﬀects of permission revocation much better than develop-
ers’ own code. One possible explanation is that third-party
libraries may be run inside a large number of hosting ap-
plications with diverse permissions so they should be more
robust as we describe in Section 3.2.2. However, this result
also shows the possible awful situation when the developed
applications based on these third-party libraries run on the
new platform of Android 6.0.
4.2.5 Type of Handled Exceptions
For regular applications which handle the potential side
eﬀects of permission revocation, we manually examine the
type of exceptions which are handled. Most of the exceptions
5http://www.startapp.com/
6http://home.tapjoy.com/
7http://newrelic.com/
8http://www.splunk.com/
9http://hockeyapp.net/features/
10http://developer.android.com/tools/support-library/
index.html
11https://cordova.apache.org/
12https://thrift.apache.org/
754Table 5: Correct usage rates for permissions of regular applications
Permission
BATTERY_STATS
CAMERA
READ_PHONE_STATE
SEND_SMS
ACCESS_FINE_LOCATION
ACCESS_COARSE_LOCATION
RECORD_AUDIO
WRITE_EXTERNAL_STORAGE
GET_TASKS
AUTHENTICATE_ACCOUNTS
RESTART_PACKAGES
USE_CREDENTIALS
MANAGE_ACCOUNTS
GET_ACCOUNTS
READ_CALENDAR
WRITE_SETTINGS
READ_SOCIAL_STREAM
READ_USER_DICTIONARY
READ_CONTACTS
WRITE_CONTACTS
WRITE_CALENDAR
Correct Usage Mis-usage Correct Usage Rate
100.00%
94.83%
71.69%
71.43%
58.36%
56.20%
55.56%
54.55%
53.33%
50.51%
28.57%
28.57%
24.56%
24.35%
6.45%
6.25%
0.00%
0.00%
0.00%
0.00%
0.00%
3
55
319
5
426
444
10
12
24
50
6
12
14
47
2
1
0
0
0
0
0
0
3
126
2
304
346
8
10
21
49
15
30
43
146
29
15
73
72
73
73
10
Figure 7: Distribution of unhandled potential side eﬀects of regular applications. Third-party libraries account for much less
occurrences of unhandled potential side eﬀects than application developers’ own code.
Table 6: Correct usage rates for diﬀerent categories of third-party libraries in regular applications. Third-party libraries’ code
has a higher correct usage rate than developers’ own code.
Category
Ad
Analytics
Social
Other
Third-party Libraries Subtotal
Developers’ Own Code
Total
Correct Usage Mis-usage Correct Usage Rate
90.36%
100.00%
100.00%
72.22%
90.72%
46.07%
54.49%
16
0
0
15
31
775
806
150
110
4
39
303
662
965
Developers' own code, 775(96%)Ad, 16(2%)Other, 15(2%)Third-party libraries, 31(4%)755handled by applications are general RuntimeException, Ex-
ception, or even Throwable, which are super classes of Se-
curityException. Handling super classes of SecurityEx-
ception can also prevent the side eﬀects of permission revo-
cation. The reasons why application developers handle the
super classes of SecurityException instead of SecurityEx-
ception are three-fold: i) developers need to handle other
exceptions besides SecurityException. For example, when
using the camera API, developers will need to handle not
only permission revocation, but also cases where the camera
is in use or does not exist, so all these cases are handled to-
gether with an exception handler for the general Exception
class. ii) developers are intended to handle other exceptions,
and SecurityException is handled incidentally.
iii) infor-
mation is lost when the application is reverse-engineered and
Soot fails to infer the speciﬁc type of exceptions which are
caught.
4.2.6 Content of Exception Handler
In addition, we also examine the content of the excep-
tion handler. The operations which applications execute in