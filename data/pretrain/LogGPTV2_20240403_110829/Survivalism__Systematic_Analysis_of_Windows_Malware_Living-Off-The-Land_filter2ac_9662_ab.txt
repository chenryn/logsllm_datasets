threat’ or ‘ﬁleless’ malware are mentioned sparsely in the
current academic literature. This is mostly limited to intro-
ductory analyses or described as an emerging highly evasive
malware variant. Li et al. [31] present an analysis of malicious
Powershell scripts that has a subsection speciﬁcally describing
LotL attacks and ﬁleless attacks as the trend of cyber attacks in
recent years. A recent paper by Wang et al. [72] on the subject
of data provenance analysis identiﬁes Living-Off-The-Land as
an emerging prominent evasive malware subtype. Prior work
includes introductory analyses [64], however LotL malware
has not yet been subject to robust academic analysis. Syman-
tec [73, 66] and Cisco Talos’ [65] white papers introduce the
subject with an analysis of prevalence across a number of
datasets. Currently, no papers conduct a systematic analysis
of the use of LotL techniques by Windows malware at scale,
comprising multiple datasets.
LotL techniques are mentioned in some papers, emphasising
stealthiness and their use by APT malware. Pendergrass et
al. [56] state LotL is a malware subtype that is often unde-
tected. These descriptions provide evidence of the need to
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1559
quantify the evasive capabilities of these techniques against
speciﬁc AV engines.
In a paper on the malware analysis tool Yara, Cohen [9]
describes LotL as a trend that has been recently observed in
the tactics used by elite threat actors; this claim is reinforced
by the results of our analysis. Research by Hassan et al. [21]
states that APT malware uses LotL attack strategies to enable
persistent campaigns and analyses two campaigns, compared
to our less granular analysis of 16,232 samples. Their work
also leverages MITRE’s ATT&CK [45] by which MITRE de-
ﬁnes an excellent taxonomy that describes and classiﬁes most
well-known attacks. Numerous LotL techniques are indexed
within the MITRE ATT&CK framework. MITRE corporation
and their Common Vulnerabilities and Exposures (CVE) are an
established authority within the security ﬁeld. Their inclusion
and description of many LotL techniques are an indication that
this is a subject worthy of further analysis.
Orthogonal to our research is the analysis and deobfuscation of
script-based malware. Malware making use of LotL techniques
often uses malicious scripts as payloads. Mitigations against
malicious scripts invoked by the Powershell.exe binary
have been tested by the identiﬁcation of suspicious behavioural
patterns by Ugarte et al. [67]. Other papers such as Rubin et
al. [61] apply machine learning to the detection of Powershell
malware. Curtsinger et al. [11] propose detection mechanisms
for malicious Javascript. While these papers propose effective
detection methods for narrow subsets of malicious payloads
delivered, they do not analyse the wider malware ecosystem
and how these payloads are triggered by LotL binaries.
III. MOTIVATION: ANTI-VIRUS PRODUCTS VS.
LIVING-OFF-THE-LAND TECHNIQUES
Security researchers have documented many cases where LotL
techniques can be used to successfully evade security products
[41]. In many of these cases, these LotL binaries are leveraged
to proxy the execution of a malicious payload, having it
execute under the context of a legitimate looking process, or
spawning a new process as a child of a legitimate system
process. In some cases, these payloads are executed as a side
effect of the LotL binary invocation, while in others it is just
the result of its main documented behaviour. Many AV prod-
ucts reportedly fail to properly detect these techniques.
To answer our ﬁrst research question, we ﬁrst analysed
whether current AV products ﬂag LotL techniques as indi-
cators of malicious behavior. To this end, we ﬁrst selected a
representative set of 10 end-user AV products and simulated
attacks by leveraging a reverse shell executed by common
well-known LotL based proxied execution techniques. The AV
engines we installed on each host were taken from an industry
compiled list of the ten most popular AV engines [54], all of
which advertise behavioural analysis capabilities. Moreover,
the intention of this study is not to test the detection capabili-
ties of any particular AV product or to compare them against
each other, but to determine if a generalised detection gap
e
x
e
.
a
t
h
s
M
e
x
e
.
c
i
m
W
e
x
e
.
p
t
F
e
x
e
.
2
3
l
l
d
n
u
R
e
x
e
.
2
3
r
v
s
g
e
R
i
e
x
e
.
n
m
d
a
s
t
i
B




AV
Avast Premium Security
Bitdefender Internet Security
Cylance Smart AV
Eset Internet Security
Kaspersky AV
Malwarebytes for Windows Pre-
mium
McAfee Total Protection
Sophos Home Premium
Webroot SecureAnywhere AV
Windows Defender / AMSI
TABLE II: AV detections for our initial experiments on
Windows 10.
exists. Although we endeavoured to conﬁgure every product
to apply its full detection capabilities, these results shall not be
used for comparison of AVs as behavior may vary depending
on the environment,
targeted end users, and conﬁguration
settings.
We performed these experiments within networked Windows
10 virtual machines, with up-to-date local AV products con-
nected to their cloud components. We omit the precise setup
details here, but describe them in Appendix C.
We leveraged a reverse shell to assess how vulnerable AV
systems are to evasion by malware deploying LotL techniques.
We deem a reverse shell, capable of allowing remote execution
of commands, to be a sufﬁcient proof of successful code
execution. A remote network connection executing commands
is identical to many Remote Access Trojans (RAT)’s function-
ality. We conducted our experiments by running this reverse
shell from different LotL binaries to test whether AV products
detect these techniques as malicious. We obfuscated reverse-
shell payloads when necessary and used various payload types
to test AV’s capability to detect
the delivery mechanism
itself, not the speciﬁc payload being delivered through static
signatures. The LotL binaries that we leveraged for testing
and the speciﬁc techniques by which we achieved evasion are
described in detail in Appendix D.
Table II shows the results for this experiment. We can observe
that most popular AV engines allowed us to establish a reverse
shell and execute commands, using various LotL techniques
that are common in commodity and APT malware.
Responsible Disclosure and Response. We issued a docu-
ment to all AV vendors concerned, containing in-depth tech-
nical results of our evasion tests with above 90 days notice. To
assist with remediation, the documents we provided included
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1560
e
x
e
.
a
t
h
s
M
e
x
e
.
c
i
m
W
e
x
e
.
p
t
F
e
x
e
.
2
3
l
l
d
n
u
R
e
x
e
.
2
3
r
v
s
g
e
R
i
e
x
e
.
n
m
d
a
s
t
i
B

























AV
Avast Premium Security
Bitdefender Internet Security
Cylance Smart AV
Eset Internet Security
Kaspersky AV
Malwarebytes for Windows Pre-
mium
McAfee Total Protection
Sophos Home Premium
Webroot SecureAnywhere AV
Windows Defender / AMSI
TABLE III: AV detections for our repeated experiments (9
months after initial testing).
evidence of how each evasion was conducted. Some vendors
patched their detection algorithms and actively engaged with
our research; others denied or ignored the responsible disclo-
sure process. Moreover, some AV vendors reported difﬁculties
with detecting some of the documented cases as detection rules
are prone to false positives.
Experiment Repetition. We repeated our tests on Windows
10 machines, nine months after our initial evasion testing.
This allowed us to test
if AV vendors had included new
heuristic rules in their products to detect LotL binary usage.
The detection capabilities of AVs in this second experiment is
shown in Table III. We can observe that a number of vendors
updated their detection capability. 25 out of 60 of the exact
same payloads were detected.
In some of the tests where our reverse shell was detected, we
modiﬁed the payload (applied a different obfuscation method
or ran a different payload) while maintaining the exact same
command line arguments for the LotL binaries, in an attempt
to establish whether the detection was implemented to match
the delivery mechanism or the payload. By leveraging these
obfuscated and modiﬁed payloads, we successfully executed
a reverse shell in 19 of these 25 blocked instances.
These results show that LotL techniques are still a signiﬁcant
challenge for AV vendors. These tools are commonly lever-
aged by legitimate users in unpredictable ways, and security
companies struggle to deploy effective detection strategies
without false positives. The following sections will show how
these techniques are a prevalent phenomenon in commodity
malware, and how this problem should not be overlooked by
the security community.
IV. MEASURING LOTL PREVALENCE
In this section we measure the prevalence of LotL techniques
in malware and try to answer the research questions raised.
This measurement effort was conducted over 9 separate sub-
datasets. In total, we collected 31,805,549 samples from which
we obtained 16,048,202 behavioural reports from VirusTotal
(VT).
A. Dataset Composition
To be as comprehensive as possible, we obtained public
and private datasets from different sources. We chose var-
ied datasets to represent possible malware distributions. We
included public malware datasets leveraged by the research
community throughout the years to ensure completeness and
reproducibility. To complement these data sources, we created
three additional datasets following three different collection
strategies. These datasets are listed in Table IV.
Public Datasets. We included several public and well-known
malware datasets to enable reproducibility, conducting pre-
processing where necessary to isolate PE binaries. We included
these larger scale datasets to represent commodity malware
used in previous research efforts [2, 55]. We included a
collection from the VirusShare [69] corpus of hashes of un-
packed binaries, in addition to hashes identiﬁed as PE hashes
by existing pre-processing of ﬁles. We included the Ember
dataset [3] of Windows malware PE ﬁles, released for training
machine learning models. We also leveraged a feed of malware
executables, collected and distributed by Georgia Tech [26].
Finally, we also included samples from VX-Underground [70]
and Malshare [33], both well known public datasets.
VirusTotal Balanced Dataset. We gathered 237,288 hashes
from VT. We attempted to balance the presence of families and
variants to avoid over-representing certain proliﬁc families.
Malware feeds like VT usually distribute large numbers of
variants of the same polymorphic families [68]. The prevalence
of a given malware family in such a feed is not necessarily
related to its freshness, impact, or prevalence in the wild. For
this reason, we used a custom approach to measure AV label
similarity. This approach is based on the min-hash algorithm
applied to normalised AV labels for samples with at least 20
positives. In order to normalise labels, we leveraged the pre-
processing code in the AVClass [62] project. AVClass is a tool
that facilitates extraction of the family name that a sample
belongs to, according to the labels provided by the different
AV vendors.
By leveraging this sample selection method, we avoided the
over-representation of prominent polymorphic families (such
as worms or ﬁle infectors like Virut or Allaple) [68] or
identical variants of the same family. The removal of these
variants balanced the representation of every family in the
dataset.
We collected a total of 1.5 million unique PE executable ﬁles
from VT in the course of 6 days (December 10th to December
16th, 2019), and ﬁnally selected a subset of 237,288 diverse
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1561
Type
Public
Dataset
Name
Ember [3]
Ember Benign
VirusShare [69]
Vx Underground [70]
Georgia Tech [26]
MalShare [33]
Private APT
Yara
VirusTotal Balanced
No. Of
Hashes
1,235,190
740,679
18,176,364
394,383
8,070,223
2,903,350
16,232
31,840
237,288
No. Of
Behavioural
Reports
612,400
158,763
8,639,474
102,541
5,095,615
1,277,507
7,668
31,834
122,400
No. Of
Crash
Reports
56,339
10,364
234,416
6,550
285,134
66,319
336
436
10,270
No. Of
Blank
Reports
113,021
76,320