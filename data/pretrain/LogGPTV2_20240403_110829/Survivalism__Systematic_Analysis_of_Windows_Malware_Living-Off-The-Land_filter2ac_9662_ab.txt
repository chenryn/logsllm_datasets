### Fileless or Living-Off-The-Land (LotL) Malware in Academic Literature

Fileless or Living-Off-The-Land (LotL) malware is a topic that has received limited attention in the current academic literature. Existing studies often provide introductory analyses or describe these as highly evasive and emerging malware variants. For instance, Li et al. [31] conducted an analysis of malicious PowerShell scripts, including a section specifically on LotL and fileless attacks, highlighting their increasing prevalence in recent years. Similarly, Wang et al. [72] identified LotL as an emerging and prominent subtype of evasive malware in their work on data provenance analysis. Prior research includes introductory analyses [64], but robust academic analysis of LotL malware remains scarce. Symantec [73, 66] and Cisco Talos [65] have published white papers that introduce the subject and analyze its prevalence across various datasets. However, no existing studies have conducted a systematic analysis of LotL techniques used by Windows malware at scale, encompassing multiple datasets.

### References to LotL Techniques in Academic Papers

Several papers mention LotL techniques, emphasizing their stealthiness and use by advanced persistent threat (APT) malware. Pendergrass et al. [56] state that LotL malware often goes undetected, underscoring the need to quantify the evasive capabilities of these techniques against specific antivirus (AV) engines. Cohen [9] describes LotL as a recent trend in the tactics of elite threat actors, which aligns with the findings of our analysis. Hassan et al. [21] highlight that APT malware uses LotL attack strategies for persistent campaigns, analyzing two such campaigns. Their work also leverages MITREâ€™s ATT&CK framework [45], which provides a comprehensive taxonomy of known attack techniques, including numerous LotL methods. The inclusion of LotL techniques in the MITRE ATT&CK framework, along with the established authority of MITRE and its Common Vulnerabilities and Exposures (CVE), indicates the importance of further analysis in this area.

### Related Research on Script-Based Malware

Research on the deobfuscation and analysis of script-based malware is relevant to LotL techniques, as LotL malware often employs malicious scripts as payloads. Ugarte et al. [67] tested mitigations against malicious PowerShell scripts by identifying suspicious behavioral patterns. Other studies, such as Rubin et al. [61], apply machine learning to detect PowerShell malware, while Curtsinger et al. [11] propose detection mechanisms for malicious JavaScript. Although these papers propose effective detection methods for specific types of malicious payloads, they do not analyze the broader malware ecosystem and how these payloads are triggered by LotL binaries.

### Motivation: Antivirus Products vs. Living-Off-The-Land Techniques

Security researchers have documented numerous cases where LotL techniques can successfully evade security products [41]. These techniques often involve leveraging legitimate system processes to proxy the execution of malicious payloads, making them appear as legitimate activities. Many AV products fail to properly detect these techniques. To address this, we first analyzed whether current AV products flag LotL techniques as indicators of malicious behavior. We selected a representative set of 10 end-user AV products from an industry-compiled list [54] and simulated attacks using common LotL-based proxied execution techniques. Our goal was to determine if there is a generalized detection gap rather than to compare individual AV products. The experiments were conducted on networked Windows 10 virtual machines with up-to-date local AV products connected to their cloud components. We used a reverse shell to assess the vulnerability of AV systems to evasion by LotL malware, as a remote network connection executing commands is similar to the functionality of many Remote Access Trojans (RATs). The results, shown in Table II, indicate that most popular AV engines allowed us to establish a reverse shell and execute commands using various LotL techniques common in commodity and APT malware.

### Responsible Disclosure and Experiment Repetition

We issued a document to all concerned AV vendors, providing in-depth technical results of our evasion tests with over 90 days' notice. Some vendors patched their detection algorithms and engaged with our research, while others denied or ignored the responsible disclosure process. We repeated our tests nine months later to evaluate if AV vendors had implemented new heuristic rules to detect LotL binary usage. The results, shown in Table III, indicate that several vendors updated their detection capabilities, detecting 25 out of 60 of the same payloads. In some cases, we modified the payload (using different obfuscation methods or running different payloads) while maintaining the same command line arguments for the LotL binaries. This allowed us to determine whether the detection was based on the delivery mechanism or the payload itself. Using these obfuscated and modified payloads, we successfully executed a reverse shell in 19 of the 25 blocked instances. These results highlight the ongoing challenge that LotL techniques pose for AV vendors, as these tools are commonly used by legitimate users in unpredictable ways, making it difficult to deploy effective detection strategies without false positives.

### Measuring LotL Prevalence

To measure the prevalence of LotL techniques in malware, we conducted an extensive analysis over nine separate sub-datasets, collecting a total of 31,805,549 samples and obtaining 16,048,202 behavioral reports from VirusTotal (VT).

#### Dataset Composition

To ensure comprehensiveness and reproducibility, we obtained public and private datasets from various sources. The datasets included well-known public malware datasets, such as the Ember dataset [3], VirusShare [69], VX-Underground [70], Georgia Tech [26], and Malshare [33]. We also created three additional datasets using different collection strategies. Additionally, we gathered 237,288 hashes from VT, balancing the presence of families and variants to avoid over-representing certain prolific families. We used a custom approach based on the min-hash algorithm and the AVClass project [62] to normalize AV labels and select a diverse subset of 237,288 unique PE executable files. The dataset composition is detailed in Table IV, including the number of hashes, behavioral reports, crash reports, and blank reports for each dataset.