删除光标下的字符时，光标右边的字符也会被“推过来”以填入删除后留出的空白中，下面是编辑输入文本行
用到的最基础的命令：
向后移动一个字符（的位置）。
向后移动一个字符（的位置）。
DEL或Bsckspace
删除光标左边的字符。
删除光标下面的字符。
可打印字符
在光标处插入该字符。
或
取消最后一次输入命令，可以一直取消直到行为空。
（取决于配置，Backp可以设为删除光标左边的字符，而DEL设为和
一样删除光标下面的字
符，而不是其左边的。）
S8.2.2Readline的移动命令
上面列出了编辑输入行时要用到的最基本的键。为了方便，除了C、、、DEL以外，
还有其它编辑命令，下面这些命令可以用来在行内部快速移动。
移到行的开头。
国
移到行的结尾。
向前移动一个单词（的位置）：单词是由字母和数字构成的。
向后移动一个单词（的位置）。
国
清除屏幕，然后在顶端打印当前行。
注意向前移动一个字符，而M向前移动一个单词.有个很松散的习惯，就是Control键操纵字
符而Me键操纵单词。
8.2.3Readline的删除命令
删除（“kill"）是指把文本从行中移除并保存下来以备后用，通常是后来重新插入（"yank）到行中（现在
常说“剪切”和“复制"）.如果介绍命令时说它“删除”文本，则可以保证在另外一个地方（或者同一地方）恢
复这些文本。使用删除命令时，文本被放在删除环中。后面连续删除的文本也会被放在一起，所以重新插入
时，会一下子恢复所有文本。删除环不是针对行的：在前面一行删除的文本可以在以后输入另外一行时恢
复。
下面的命令用来删除文本。
从当前光标的位置删除到行的结尾。
M
从光标的位置剩除到当前单词的结尾：如果是在单词之间，则删除到下一个单词的结尾。单词界
限和M所使用的一样。
剪切的文本一般直接丢弃，而到除的会保存在副除环中。
p73
目录
BASH中文文
---
## Page 85
第八章编辑命令行
§8.3READLINE 的启动脚本
+++++++++++++++++++++++++++++++++++++++++++++++++4
M-DEL]
从光标删除到当前单词的开头：如果是在单词之间，则删除到止上个单词的开头。单词界限和
M-b所使用的一样。
从光标删除到上一个空白符。这和M-DEL使用的单词界限是不一样的。
下面这些命令用来在行中恢复文本。重新插入是指从删除缓存中复制最后被删除的文本。
把最近删除的文本插入到光标所在的缓存中。
M
循环到删除环，并插入新的顶端文本。只有当前一个命令是或者M时才可以用这个命
令
S8.2.4Readline的参数
Readine命令可以接受数值型参数。有时这些参数可以表示重复次数，有时数值的正负符号很重要。
如果一个通常向前进行的命令得到了一个负的参数，则它会向后进行。例如，删除到行开头的文本，可以使
用-M]
给命令指定参数的一般方法是在命令前面输入Meta化的数字。如果输入的第一个“数位”是负号“
“，则这个参数将是负数。开始输入了参数的第一个Meta化的数字后，就可以输入其余数字，然后再输入
命令。例如，给命令以参数10，则可以输入“MI回，这会删除输入行中后面十个字符。
88.2.5在历史中搜索命令
Readline提供的可以搜索历史（参见≤9.1[Bash的历史功能]，p90）的命令以寻找包含指定字符申的行。
搜索命令有两种，增量的和非增量的。
增量搜索在用户输入搜索字符串结束前就开始搜索。第输入字符申的一个字符时，Readline都会显示
历史中与已经输入的字符串匹配的行，增量搜索时，实际需要输入多少字符就输入多少，就能找到想要的历
史。在历史中向后搜索包含特定字符串的行可以用C：而C-表示向前搜索。isearch-terninatora
变量中的字符可以用来结束增量搜索。如果这个变量没有设置值，就用ESC或来结束增量搜索。
可以退出增量搜索并恢复之前的行。搜索结束以后，历史中包含搜索字符串的行就成为当前行。
如果要在历史中搜索其它匹配的行，可以根据需要再输入或：这会在历史中向前或向后搜
索与已经输入的搜索字符串匹配的下一行。与Readline命令绑定的任何其它键序列都会结束搜索并执行搜
索到的命令。例如，RET会结束搜索并提交一整行，所以会执行历史中的对应命令，移动命令也会结束搜
索，并把最后找到的行作为当前行后开始编辑。
Readline会记住最后一次增量搜索的字符串。如果输入的两个之间没有其它搜索字符串，就会使
用已经记住的字符串，
非增量搜索在开始搜索匹配的历史行之前要读取整个搜索字符串。搜索字符串可以由用户输入，也可以
的当前行的部分内容。
S8.3Readline的启动脚本
虽然Readine库默认安装了一套eamcs风格的键绑定，使用其它的键绑定也是可以的。任何用户
都可以在一个inputrc文件中放入Readline命令来对使用Readline的程序进行自定义：这个文件通
常在用户的主目录内。文件的名称来自shell变量INPUTRC的值。如果这个变量没有设置，则使用默认
的"-/.inputre”：如果这个文件不存在或者不可读取，则最终的默认值是"/etc/inputre”。
一个使用Readline库的程序在启动时会读取初始化文件并绑定键。此外，会重新读入初始
化文件，所以会使用任何改动生效。
 e ee e e e ee e e e ee ee e ee eeeee eeeee eee ee ee e ee e e e ee e @
BASH中文文档
目录
d
---
## Page 86
8.3 READLINE 的启动脚本
第八章编辑命令行
S8.3.1Readline启动脚本的语法
Readlline的初始化文件里面只能使用一些基本的结构。空行会被忽略掉。以“#"开头的行是注释。
以“$"开头的行表示条件结构（参见58.3.2[Readline启动脚本的条件结构]，p78）.其它行表示变量赋值和键
绑定。
A.变量赋值
可以用在初始化脚本中用Readine的Bet命令修改变量的值来改变Readline的运行时行为.其语法很
简单：
Bet变量值
例如，下面就示范了怎么把默认的eamcs风格键绑定改成使用vi风格的行编辑命令：
set editing-mode vi
在解析变量的名称和值时会根据情况忽略大小写。不能识别的变量会被忽略，对于布尔型的变量（即可以
打开或关闭的），如果其值没有设置、或者为空、或者是on（不区分大小写）、或者是1，就会打开。任何其
它值都会关闭这个变量。命令bind-V可以列出当前的 Readline变量和值（参见54.2[Bash的内部命令]：
p34)-
大量的运行时行为都可以由下列变量来更改。
bell=style
控制Readline想让终端铃声响起时发生的动作。如果设为none，则不响铃：如果设为
vieible，则如果有可见响铃就使用可见响铃2l：如果设为audible（默认的），Readlline会试图让终
端的铃声响起。贴记司：响持方式
bind-tty-special-chars
如果设为on，Readline会试图把内核的终端驱动程序要特殊处理的字符映
射到自己对应的字符上，
，助记司：韩定终端特殊字符
conment-begin
在执行in&ert=comment命令时要插入行开头的字符：默认值是“#"。助记词：注释开始
conpletion-ignore-case
如果设为on，Readline在进行文件名匹配和补全时会忽略大小写。默认值
是off。助记词：忽略补全大小写
补全列表中不加修改而直接显示的公共前缀的字符长度。如果设
为大于零的值，则比这个值大的公共前级将会在列出补全时被替换成省略号。助记司：补全首短是示长度
conpletion-query-items
决定询问用户是否需要显示补全列表时补全列表的长度。如果补全列表的长
度大于这个值，Readline会询间用户是否想查看：否则，就直接显示列表，这个变量必须设置一个大
于或等于0的整数。负值表示Readline不会询间。默认值是100.助记词：补全询网长度
convert-meta
如果设为on，Readline 会把设置了高八位的字符的第八位（最高位）去掉并加上一个前
导的ESC字符，从而把它们转换成Me化的 ASCII字符序列。默认值是on。助记词：Beta 转换
disable-completion
如果设为on，Readline将不会补全单词。补全字符会被插入行中，就好像这些字
符也绑定了Belf=insert命令。默认值是off。助记词：禁用补全
editing-mode
这个变量控制默认使用哪种键绑定。默认情况下，Readline启动emacs风格的编辑模式，
其中的键很像emacs。这个变量可以被设为emace或vi。助记词：编氧损式
叫大部分情况下都是让终端闪烁几下。
p75
目录
BASH 中文文
---
## Page 87
第八章编辑命令行
§8.3READLINE的启动脚本
enable-keypad
如果设为on，Readline在启动时启用小键盘。有些系统依赖小键盘上的方向键。默认
值是off。助记词：启用小键查
expand=tilde
如果设为on，Readline在试图对单词进行补全时要进行波浪号扩展、默认值是off。助
记词：扩展波流号
history-preserve-point
如果设为on，则对于通过previous-higtory 或next=history 得到的每个
历史行，标志点（光标的当前位置）将会停留在行中同样的地方。默认值是off。功记词：保持历史标志点
history-size
历史列表中所保存的历史行的最大数目。如果设为零，则历史列表中保存的历史行不受
限制。财记词：历史长度
horizontal-scroll-node
可以设为on或off。如果设为on，则如果正在编辑的行比屏幕宽，就会在
单行内水平滚动，而不是开始新行。默认值是of。历记词：水平滨动模式
Input-neta
如果设为on，Readine会启用八位字符的输入（即不会清除每个所读入字符的第八位），不
管终端支持与否。默认值是off.meta=flag和它是同义的.的记司：Hsta输入
isearch-terninators
结束增量搜索而不会把字符当作命令去执行（参见58.2.5在历史中搜索命令]
站束符
keymap
设置Readline当前用来绑定命令的键映射。可用的键映射有emacs、enacs=standard、enace=meta、
enacs=ctlx、vi、vi=move、vi=conmand、vi-insert。其中，vi 和vi=conmand 是等价的，emaca
和emace=&tandard也是等价的.默认值是emace。editing-mode变量的值也会影响默认的键映射。
助记词：键映射
mark-directories
如果设为on，在补全后的目录后面加上斜杠。默认值是off。助记司：标志出日录
mark=nodified-lines
如果设为on，Readline将会在已被修改的历史行开头显示一个星号（*）。默
认值是off。助记词：标志已改的行
mark=symlinked-directories
如果设为n，并且补全后的名称是个指向目录的符号链接，则在后面
加上斜杠（还要看mark=directorea的值）-默认值是off。助记词：标志日录的符号链接
match-hidden-files
如果设为on，Readline在补全文件名时会匹配以“."开头的文件（即隐藏文件），
除非用户在要补全的文件名开头指定了“"。默认值是on。功记词：匹配总藏文件
output-meta
如果设为on，Readline会直接显示设置了高八位的字符，而不是显示Meta化的序列。
默认值是off.助记词：Hats输出
page-conpletions
如果设为on，Readline会使用其内部类似于nore命令的分页程序来显示一次性满
屏的补全。默认值是on。
助记词：
补全分页
print-cospletions-horizontally
如果设为on，Readline会把匹配的补全条目按字母顺序排列并水
平显示，而不是在屏幕中垂直显示。默认值是off。助记词：本平是示补全
revert=all-at-newline
如果设为on，Readlline 会在执行accept-line时恢复历史行的所有改动。默
认情况下，改动过的历史行在多次使时可以各自恢复。默认值是off。助记词：提交时恢复所有历史
shov-all-if-ambiguous
这会改变补全命令的默认行为。如果设为on，则如一个单词有多个匹配将会
立即被全部列出，而不是响铃。默认值是off。助记词：如有歧义就是示全部
BASH 中文文档
目录
p76
---
## Page 88
8.3 READLINE 的启动脚本
第八章编辑命令行
show=all-if=unnodified
这会以类似于show=all=if=ambiguous的方式改变补全命令的默认行为。
如果设为on，则如一个单词有多个匹配，并且它们都不是部分匹配（即匹配的条目不含有公共前
级）将会立即被全部列出，而不是响铃。默认值是off。助记词：如未您改则是示全部
visible-stats
如果设为on，则在列出补全条目时在文件名后面加上一个用以显示其类别的字符。默
认值是off。助记词：可见的类型
B.键绑定
表，以及命令功能的简单描述：如果有键绑定，也一并列出，知道了命令名称以后，只要在初始化文件的某
一行中写入要和该命令绑定的键，后面加个冒号，然后再写上这个命令就可以了，在键名和冒号之间不可以
有空格，否则这些空格也会成为键名的一部分。键名可以有不同的表示方法，自已看着舒服的那种就行。
除了可以绑定命令名称，Readline还允许绑定一个字符串，这样键入绑定的键名（宏）后就能插入这
见g4.2Bash的内部命令bind]，p34）-
键名：命令名或宏
键名是英语中一个键的名称。例如：
Control-u: universal=argument
Meta-Rubout: backward-kill-word
Control-o:
ndno<
在上面的例子中，C-u绑定到了univereal=argument命令上，M-DEL绑定到了backward=kill=word
命令，而[C绑定可以运行其右边所写的宏（即把文本"output"插入到行中）。在处理绑定时可以
SPACE、SPC、以及TAB
键序列：命令名或宏
键序列和上面的键名不同之处在于它可以把键名序列放在双引号中间的字符串来
表示整个键序列。这里可以使用emacs风格的转义键名，如下例所示，但不能使用特殊的键名。
"\\C=u":universal=argument
"\\C=x\\C=r:re=read=init=file
"\\e[11-":
"Function Key 1*
在上例中，Cu仍绑定到univeraal-argunent命令（同前一个例子）：
re-read-init=file 命令：而[ESC] 绑定可以插入文本"Function Key 1"。