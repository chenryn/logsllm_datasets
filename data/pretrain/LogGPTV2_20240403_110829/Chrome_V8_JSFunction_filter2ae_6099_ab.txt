    4.    i::Isolate* isolate = function_info->GetIsolate();
    5.    i::Handle function =
    6.        isolate->factory()->NewFunctionFromSharedFunctionInfo(
    7.            function_info, isolate->native_context());
    8.    return ToApiHandle(function);
    9.  }
    10.  //..................分隔线........................................
    11.  Handle Factory::NewFunctionFromSharedFunctionInfo(
    12.      Handle initial_map, Handle info,
    13.      Handle context, AllocationType allocation) {
    14.    DCHECK_EQ(JS_FUNCTION_TYPE, initial_map->instance_type());
    15.    Handle result =
    16.        NewFunction(initial_map, info, context, allocation);
    17.    // Give compiler a chance to pre-initialize.
    18.    Compiler::PostInstantiation(result);
    19.    return result;
    20.  }
上述代码2行`this`转为`SharedFunctionInfo`，代码5行，`function_info`和`native_context`作为参数，返回`JSFunction`。代码5行的工厂方法`factory()`进入代码11行的`NewFunctionFromSharedFunctionInfo()`，初始创建map，最终调用下面的方法：
    1.  Handle Factory::NewFunction(Handle map,
    2.                                          Handle info,
    3.                                          Handle context,
    4.                                          AllocationType allocation) {
    5.    Handle function(JSFunction::cast(New(map, allocation)),
    6.                                isolate());
    7.    function->initialize_properties(isolate());
    8.    function->initialize_elements();
    9.    function->set_shared(*info);
    10.    function->set_code(info->GetCode());
    11.    function->set_context(*context);
    12.    function->set_raw_feedback_cell(*many_closures_cell());
    13.    int header_size;
    14.    if (map->has_prototype_slot()) {
    15.      header_size = JSFunction::kSizeWithPrototype;
    16.      function->set_prototype_or_initial_map(*the_hole_value());
    17.    } else {
    18.      header_size = JSFunction::kSizeWithoutPrototype;
    19.    }
    20.    InitializeJSObjectBody(function, map, header_size);
    21.    return function;
    22.  }
上述代码9行，把`SharedFunctionInfo`保存到`kSharedFunctionInfoOffset`位置。代码10行，`GetCode()`源码如下：
    1.  Code SharedFunctionInfo::GetCode() const {
    2.    Isolate* isolate = GetIsolate();
    3.    Object data = function_data();
    4.    if (data.IsSmi()) {
    5.      DCHECK(HasBuiltinId());
    6.      return isolate->builtins()->builtin(builtin_id());
    7.    } else if (data.IsBytecodeArray()) {
    8.      DCHECK(HasBytecodeArray());
    9.      return isolate->builtins()->builtin(Builtins::kInterpreterEntryTrampoline);
    10.    } else if (data.IsAsmWasmData()) {
    11.      DCHECK(HasAsmWasmData());
    12.      return isolate->builtins()->builtin(Builtins::kInstantiateAsmJs);
    13.    } else if (data.IsUncompiledData()) {
    14.      DCHECK(HasUncompiledData());
    15.      return isolate->builtins()->builtin(Builtins::kCompileLazy);
    16.    } else if (data.IsFunctionTemplateInfo()) {
    17.      DCHECK(IsApiFunction());
    18.      return isolate->builtins()->builtin(Builtins::kHandleApiCall);
    19.    } else if (data.IsWasmExportedFunctionData()) {
    20.      DCHECK(HasWasmExportedFunctionData());
    21.      return wasm_exported_function_data().wrapper_code();
    22.    } else if (data.IsInterpreterData()) {
    23.      Code code = InterpreterTrampoline();
    24.      DCHECK(code.IsCode());
    25.      DCHECK(code.is_interpreter_trampoline_builtin());
    26.      return code;
    27.    } else if (data.IsWasmJSFunctionData()) {
    28.      return wasm_js_function_data().wrapper_code();
    29.    } else if (data.IsWasmCapiFunctionData()) {
    30.      return wasm_capi_function_data().wrapper_code();
    31.    }
    32.    UNREACHABLE();
    33.  }
上述代码中，我们的测试用例满足代码7行的判断条件，得到`Builtins::kInterpreterEntryTrampoline`，它负责堆栈，压入参数等等（参见第八篇文章），即前面提到的绑定入口(Entry)。  
返回到`NewFunction()`，11行绑定Context。至此，字节码流，入口、上下文三个最重要的数据都安装到了`function`中，new
JSFunction完成，图1给出函数调用堆栈。注:map机制，JSObject后续文章讲解。
## 3 JSFunction内存布局
下面讲解JSFuncion的内存布局，JSFunction是堆对象，它的成员有固定的存储偏移（offset），`class
JSFunction`中的`DEFINE_FIELD_OFFSET_CONSTANTS`宏模板定义了JSFuncion成员的读/写方法，源码如下：
    #define TORQUE_GENERATED_JSFUNCTION_FIELDS(V) \
    V(kStartOfStrongFieldsOffset, 0) \
    V(kSharedFunctionInfoOffset, kTaggedSize) \
    V(kContextOffset, kTaggedSize) \
    V(kFeedbackCellOffset, kTaggedSize) \
    V(kEndOfStrongFieldsOffset, 0) \
    V(kStartOfWeakFieldsOffset, 0) \
    V(kCodeOffset, kTaggedSize) \
    V(kPrototypeOrInitialMapOffset, kTaggedSize) \
    V(kEndOfWeakFieldsOffset, 0) \
    V(kSize, 0) \
    //.................分隔.....................
    #define DEFINE_ONE_FIELD_OFFSET(Name, Size) Name, Name##End = Name + (Size)-1,
    #define DEFINE_FIELD_OFFSET_CONSTANTS(StartOffset, LIST_MACRO) \
      enum {                                                       \
        LIST_MACRO##_StartOffset = StartOffset - 1,                \
        LIST_MACRO(DEFINE_ONE_FIELD_OFFSET)                        \
      };
`TORQUE_GENERATED_JSFUNCTION_FIELDS`定义了所有成员的存储偏移，StartOffset是`kHeaderSize`，它是基址，通过基址+偏移的方法实现读/写成员，以JSFunction的set_code为例讲解，代码如下:
    void JSFunction::set_code(Code value) {
      DCHECK(!ObjectInYoungGeneration(value));
      RELAXED_WRITE_FIELD(*this, kCodeOffset, value);
    #ifndef V8_DISABLE_WRITE_BARRIERS
      MarkingBarrier(*this, RawField(kCodeOffset), value);
    #endif
    }
代码中`RELAXED_WRITE_FIELD`模板的展开如下：
    #define RELAXED_WRITE_FIELD(p, offset, value) \
      TaggedField::Relaxed_Store(p, offset, value)
    //.................分隔线...........................
    template 
    void TaggedField::Relaxed_Store(HeapObject host, int offset,
                                                     T value) {
      AsAtomicTagged::Relaxed_Store(location(host, offset),
                                    full_to_tagged(value.ptr()));
    }
    //.................分隔线...........................
      template 
      static void Relaxed_Store(T* addr,
                                typename std::remove_reference::type new_value) {
        STATIC_ASSERT(sizeof(T) ::to_storage_type(new_value));
      }
两个`Relaxed_Store()`配合上述的宏模板实现`set_code()`的写入功能，图2给出函数调用堆栈。
读数据与写数据的方式相同，在正确的偏移位置读取数据，并用类型转换获取正确内容，下面给关键代码，请读者自行分析。
    #define RELAXED_READ_FIELD(p, offset) \
      TaggedField::Relaxed_Load(p, offset)
    //.................分隔线...........................
      template 
      static T Relaxed_Load(T* addr) {
        STATIC_ASSERT(sizeof(T) ::to_return_type(
            base::Relaxed_Load(to_storage_addr(addr)));
      }
上面给出的`Relaxed_Load()`方法是公共方法，通过图2的堆栈可以看出`Relaxed_Load()`和`Relaxed_Store()`都是V8的基类方法，堆上对象的读/写都会用这几个方法。  
好了，今天到这里，下次见。
**恳请读者批评指正、提出宝贵意见**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**