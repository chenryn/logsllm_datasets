column. This cannot be programmatically determined from the content of a CSV
file alone, so some applications prompt the user to decide how the first row should
be handled.
RFC 4180 specifies that leading and trailing spaces in a field are part of the value.
Some older versions of Excel ignored these spaces, but Excel 2003 and later follow
double quotes or pretty much anything else. Excel's handling can be a bit
the RFC on this point. The RFC does not specify error handling for unescaped
508 | Chapter 9: Markup and Data Fermats
---
## Page 525
unpredictable in edge cases, so it's important to ensure that double quotes are
escaped, fields containing double quotes are themselves enclosed with double
quotes, and quoted fields do not contain leading or trailing spaces outside of the
quotes.
The following CSV example demonstrates many of the rules we’ve just discussed.
It contains two records with three fields each:
aaa,b b,*"""* cc"
still more threes"
1,,*333, three,
Table 9-1 shows how the CSV content just shown would be displayed in a table.
Table 9-1. Example CSV output
aaa
b b
'c* cc
1
(empty)
333, three,
still more threes
Although we've described the CSV rules observed by the recipes in this chapter,
there is a fair amount of variation in how different programs read and write CSV
files. Many applications even allow files with the .csv extension to use any delimiter,
not just commas. Other common variations include how commas (or other field
delimiters), double quotes, and line breaks are embedded within fields, and wheth-
er leading and trailing whitespace in unquoted fields is ignored or treated as literal
‘1x31
Initialization files (INI)
The lighrweight INI file format is commonly used for configuration files. It is poorly
defined, and as a result, there is plenty of variation in how different programs and
systems interpret the format. The regexes in this chapter adhere to the most com-
mon INI file conventions, which we'll describe here.
jeuondo pue u8is sqenba ue Xq pajeuedas sared anqea-atueu aue suajsurund ag INI
spaces or tabs. Values may be enclosed in single or double quotes, which allows
them to contain leading and trailing whitespace and other special characters.
Parameters may be grouped into sections, which start with the section’s name en-
closed in square brackets on its own line. Sections continue until either the next
section declaration or the end of the file. Sections cannot be nested.
line. A comment may appear on the sameline asa parameter orsection declaration.
A semicolon marks the start of a comment, which continues until the end of the
Content within commens has no special meaning.
Following is an example INI file with an introductory comment (noting when the
file was last modified), two sections (°user” and “*post"), and a total of three pa-
rameters (°name,* *title,” and “content"):
Procesing Markup and Data Formats with RegularExpressions | 509
---
## Page 526
;last modif1ed 2012-02-14
[user]
name=3. Randon Hacker
[post]
title = How do I love thee, regular expressions?
content = "Let me count the ways...*
9.1Find XML-StyleTags
Problem
You want to match any HTML, XHTML, or XML tags in a string, in order to remove,
modify, count, or otherwise deal with them.
Solution
The most appropriate solution depends on several factors, including the level of accu-
racy, efficiency, and tolerance for erroneous markup that is acceptable to you. Once
you’ve determined the approach that works for your needs, there are any number of
things you might want to do with the results. But whether you want to remove the tags,
search within them, add or remove attributes, or replace them with altermative markup,
the first step is to find them.
Be forewarmed that this will be a long recipe, fraught with subtleties, exceptions, and
variations. If you're looking for a quick fix and are not willing to put in the effort to
determine the best solution for your needs, you might want to jump to the * (X)HTML
tags (loose)” section of this recipe, which offers a decent mix of tolerance versus
precaution.
Quick and dirty
This first solution is simple and more commonly used than you might expect, but it's
included here mostly for comparison and for an examination of its flaws. It may be
good enough when you know exactly what type of content you're dealing with and are
not overly concerned about the consequences ofincorrecr handling. This regex matches
a  occurs:
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Allow > in attribute values
This next regex is again rather simplistic and does not handle all cases correctly. How-
ever, it might work well for your needs if it will be used to process only snippets of valid
510 | Chapter 9: Markup and Data Fermats
---
## Page 527
(X)HTML. It's advantage over the previous regex is that it correctly passes over > char-
acters that appear within attribute values:
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Here is the same regex, with added whitespace and comments for readability:
(？:[^>""]
 Non-quoted character
"A"]*"
# Double-quoted attribute value
*[，v].|
# Single-quoted attribute value
Regex options: Free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
The rwo regexes just shown work identicall, so you can use whichever you prefer.
JavaScripters are stuck with the first option unless using the XRegExp library, since
standard JavaScript lacks a free-spacing option.
(X)HTML tags (loose)
In addition to supporting > characters embedded in atribute values, this next regex
emulates the lenient rules for (X)HTML tags that browsers actually implement. This
both improves accuracy with poorly formed markup and lets the regex avoid content
that does not look like a tag, including comments, DOCTYPEs, and unencoded /]*)(?:=\s*(?:"[^]**|[^]*|[^\s>]+)∣[^>])*(?:>$)
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
And in free-spacing mode:
/]*)
)# Capture the tag nane to backreference 1
(?:
# Attribute value branch:
=\s*
Signals the start of an attribute value
(?:
A"**
Double-quoted attribute value
Single-quoted attribute value
[^\s>]+
Unquoted attribute value
9.1 FindXML-Style Tags | 511
---
## Page 528
# Non-attribute-value branch:
[^>]
#Character outside of an attribute value
(?:>15)
）*
# End of the tag or string
Regex options: Free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
The last rwo regexes work identically, although the latter cannot be used in JavaScript
(without XRegExp), since it lacks a free-spacing option.
(X)HTML tags (strict)
This regex is more complicated than those we’ve already seen in this recipe, because it
actually follows the rules for (X)HTML tags explained in the introductory section of
this chapter. This is not always desirable, since browsers don’t strictly adhere to these
rules. In other words, this regex will avoid matching content that does not look like a
valid (X)HTML tag, at the cost of possibly not matching some content that browsers
wouldinfact interpret as atag e.g., ifyourmarkupuses anatribte namethat includs
characters not accounted for here, or if attributes are included in a closing tag). Both
HTML and XHTML tag rules are handled together since it is common for their con-
ventions to be mixed. The tag name is captured to backreference 1 or 2 (depending on
whether it is an opening or closing tag), in case you need to refer back to it:
s]+))²)*\s*/>|/([A-Z][-:A-Z0-9]*)s*]>
Regexoptions: Case insensitive
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
To make it a little less cryptic, here is the same regex in free-spacing mode with
comments:
\s]+ #
Unquoted attribute value (HTML)
#
Permit attributes without a value (HTML)
)*
s*
Permit self-closed tags
Permit trailing whitespace
/?
# Branch for closing tags:
2 axeq o eu e s a axd # ([6-v:]z])
512 | Chapter 9: Markup and Data Fermats
---
## Page 529
s*
#Permit trailing whitespace
Regex options: Case insensitive, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
XML tags (strict)
XML is a precisely specified language, and requires that user agents strictly adhere to
and enforce its rules. This is a stark change from HTML and the longsuffering browsers
that process it. We’ve therefore included only a “*strict” version for XML:
 Busedat aje samque ou pa sBe
proved atributes). For example, to bring back , , and 
ences, search case-insensitively using the regex (&lt;(/?)(p|en]
strong)&gt;> and replace matches with > (or in Python and Ru-
by, >). If necessary, you can then safely search your modified
sting for HTML tags using the regexes in this recipe.
With those disclaimers out of the way, let’s examine the regexes we’ve already seen in
this recipe. The first rwo solutions are overly simplistic for most cases, but handle XML
style markup languages equally. The latter three follow sricter rules and are tailored
to their respective markup languages. Even in the latter solutions, however, HTML and
XHTML tag conventions are handled together since it's common for them to be mixed,
often inadvertently. For example, an author may use an XHTML-style self-closing
 tag in an HTML4 document, or incorrectly use an uppercase element name in
a document with an XHTML DOCTYPE. HTML5 furtherblurs the distinction between
HTML and XHTML syntax.
Quick and dirty
The advantage of this solution is its simplicity, which makes it easy to remember and
type, and also fast to run. The trade-off is that it incorrectly handles certain valid and
invalid XML and (X)HTML constructs. If you're working with markup you wrote
514 IChapter 9: Markup and Data Fermats
---
## Page 531
yourself and know that such cases will never appear in your subject text, or if you are
not concermed about the consequences if they do, this trade-off might be OK. Another
example of where this solution might be good enough is when you're working with a
text editor that lets you preview regex matches.
The regex starts off by finding a literal ]*> to match zero or more
following characters that are not >. This takes care of matching the name of the tag,