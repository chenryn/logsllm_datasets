.NET WebShell 免杀系列Ⅱ之 Tricks 分享 
Ivan1ee@dotNet 安全矩阵 
[ dotNet 安全矩阵] —— 聚焦于微软.NET 安全技术，关注基于.NET
衍生出的各种红蓝攻防对抗技术、分享内容不限于 .NET 代码审计、 
最新的.NET 漏洞分析、反序列化漏洞研究、有趣的.NET 安全
Trick、.NET 开源软件分享、. NET 生态等热点话题，愿你能在这里学
到实在的干货，共同推动.NET 安全氛围卷起来。 
配套的[ dotNet 安全矩阵]知识星球优惠活动持续进行，每天只需要 1
块钱不到，就可以让自己从.NET 小白成为高手，因为星球里的资料
和教程很少在市面上广泛传播，价值完全划算，还可以获得阿里、蚂
蚁、字节等大厂内推实习或社招岗位的机会，欢迎对.NET 感兴趣的
小伙伴们加入我们，一起做一件有情有意义的事。 
0x01 背景 
.NET WebShell 绕过和免杀的方法系列第二季开始啦，接上季走硬刚 Unicode
编码绕过的方式 Bypass 主流的 webshell 查杀工具之后，本文介绍几种特殊的
免杀和绕过技巧，有助于在实战中对抗 WAF 等安全产品，希望能帮助到大
伙。 
0x02 技巧一符号 
2.1 逐字标识符 
@符号在.NET 字符中有着特殊的意义，把“@”放在一个字符串前面，表示后面是一个逐字
字符串，@符号的这个特点使得在表示系统文件路径时很方便，就可以不再需要转义符。
使用@字符后无法在字符串中插入有效的换行符(\n)或制表符(\t)，因为将被当成正常字符
串输出。例如以下 Demo 
另外还可以转义.NET 平台保留的关键词，如 Class、NameSpace、int 等，参考如下
Demo 
string filepath = "C:\\Program Files\\wmplayer.exe"; => C:\Program Files\wmplayer.exe 
string filepath = @"C:\Program Files\wmplayer.exe"; => C:\Program Files\wmplayer.exe 
string filename = @"dotNet\tFile";  => dotNet\tFile 
既然@字符可以做这么多有趣的事，咱们就研究下利用它绕过某些安全产品的防护规则，
笔者在 Process 类完整的命名空间处每个点之间都加上@符，如下 
2.2 内联注释符 
在.NET 项目中单个 aspx 页面里支持使用内联注释符 /**/ , 此符号只会注释掉两个*号之间
的内容，利用此特点也可以在类完全限定名每个点之间加上内联注释，如下 
namespace @namespace   
{   
  class @class {   
        public static void @static(int @int)  {   
            if (@int > 0) {   
                 System.Console.WriteLine("Positive Integer");     }   
            else if (@int == 0)  {   
                 System.Console.WriteLine("Zero");    }   
            else  {   
                 System.Console.WriteLine("Negative Integer");  }   
         }   
     }   
} 
0x03 语言 
3.1 托管语言 c# 
.NET WebForm 项目通常包含多个 ASPX 文件，每个文件都是 C#语言编写服务端代码，其
@Page 指令最常用的设置如以下代码所示，[ Language ] 属性指明服务端所使用的托管
语言类型，默认均为 Language="C#" 
[ AutoEventWireup ] 属性可设置 Index.aspx 页面的事件是否自动绑定，其值为布尔类
型，[ CodeBehind ] 属性指定包含与页关联的类的已编译文件的名称，这个属性不能在运
行时使用。[ Inherits ] 定义本页面所继承的代码隐藏类，该类的以分部类方式定义于 
[ CodeBehind ] 属性所指向的 .cs 文件中，该类派生于 System.Web.UI.Page 类。 
3.2 托管语言 csharp 
在 WebForm 项目单个 ASPX 文件中@Page 指令也不是必须要声明的，可以省略。 标签表示代码运行于服务端，language 可指定为 csharp 
3.3 托管语言 cs 
现在市面上大多数的安全防护产品和规则都紧盯着 language=csharp 或 language=c# 
这两种，很多大马和小马在上传漏洞的场景下被封杀的死死的，但却忽略了.NET 编译器还
提供了 language=cs 这样的简略写法，有天帮助一位师傅成功绕过 WAF 拦截，哈哈挺有
效的。 
参考的 demo 代码如下原因在于 .Net 编译器提供 Microsoft.CSharp.CSharpCodeProvider
类实现对 C#代码编译的 
笔者分析程序集完全限定名为 Microsoft.CSharp.CSharpCodeProvider, System, 
Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089，因为 
System.CodeDom.Compiler.CodeDomProvider 类里的私有方法 
GetCompilerInfoForLanguageNoThrow 获取 config 配置文件里的语言类型编译选项 
从 PrivilegedConfigurationManager.GetSection 方法可以清楚的看到从配置文件的
system.codedom 标签下获取定义的所有语言类型，微软官方文档预设定义了三种，如下
所示，详情点击 微软官方文档 
属性 
描述 
compilerOptions 
指定用于编译的其他特定于编译器的参数。  
extension 
为语言提供程序提供由源文件使用的文件扩展名的分号分隔列表。 例如“.cs”
language 
提供由语言提供程序支持的语言名称的分号分隔列表。 例如“C#;cs;csharp”。
type 
包括包含提供程序实现的程序集的名称。 类型名称必须符合指定完全限定的类型
warningLevel 
指定默认的编译器警告级别；确定语言提供程序将编译警告视为错误的级别。 
所以在默认的.NET 编译器里支持 language=cs 这样的声明，基于这点创造的 webshell 代
码如下 
0x04 别名 
using + 命名空间名，这样可以在程序中直接用命令空间中的类型，而不必指定类型的详细
命名空间，类似于 Java 的 import，这个功能也是最常用的，如下 
另外 using 语句还可以定义.NET 资源使用范围，在程序结束时处理对象释放资源，比较常
见与文件读写或者数据库连接等场景，如下代码 
using 还有个取别名的功能，using + 别名 = 包括详细命名空间信息的具体的类型，当需
要用到这个类型的时候，就每个地方都要用详细命名空间的办法来区分这些相同名字的类
型，当然被笔者用来做免杀也是相当的赞，但在 ASPX 单个页面使用时，using 变成
Import 关键词，如下代码 
using System;  
using System.Data; 
using (SqlDataAdapter sqa = new SqlDataAdapter(sql, sc))  
{  
    sqa.SelectCommand.CommandTimeout = executeTimeOut;  
    sqa.Fill(dtRet);  
    return dtRet;  
} 
将 Process 类的完全命名空间赋给 dotNet 这个别名，然后再代码中直接使用 
dotNet.Start 方法启动新进程，这种方式或许能绕过一些安全产品的规则。 
0x05 结语 
.NET 这些有趣的 Tricks 还有很多，如果对这些技巧感兴趣的话可以多关注我们的博客、公
众号 dotNet 安全矩阵以及星球，下一篇将继续分享 .NET 免杀 Trick，请大伙继续关注文
章。另外文章涉及的 PDF 和 Demo 已打包发布在星球，欢迎对.NET 安全关注和关心的同
学加入我们，在这里能遇到有情有义的小伙伴，大家聚在一起做一件有意义的事。 
0x06 星球 
为了庆祝公众号粉丝突破 5K，星球提供优惠劵立减【￥30】 ，加入星球每天只需要 1 块钱
不到，就可以让自己从.NET 小白成为高手，因为星球里的资料和教程很少在市面上广泛传
播，价值完全划算，对.NET 关注的大伙请尽快加入我们吧！ 
dotNet 安全矩阵知识星球 — 聚焦于微软.NET 安全技术，关注基于.NET 衍生出的各种红
蓝攻防对抗技术、分享内容不限于 .NET 代码审计、 最新的.NET 漏洞分析、反序列化漏
洞研究、有趣的.NET 安全 Trick、.NET 开源软件分享、. NET 生态等热点话题、还可以获得
阿里、蚂蚁、字节等大厂内推的机会。