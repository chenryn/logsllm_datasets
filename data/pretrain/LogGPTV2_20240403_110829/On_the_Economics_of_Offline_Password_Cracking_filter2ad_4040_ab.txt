adversary’s i’th guess is correct. Wang et al. observed that
a targeted distribution over user passwords p1, p2 . . . still
seems to follow Zipf’s law [27].
Rational Attacker Behavior. If the adversary chooses
a threshold t then his expected guessing costs are
⎛
⎝
t(cid:4)
pj
1 −
j=1
C(t) = t
⎞
⎠
⎛
⎝ t(cid:4)
t(cid:4)
j=1
j · pj .
k + k
⎞
⎠a
pj
Similarly, his expected reward is
R(t) = v
j=1
= 0.01 (p1 + . . . + pt2%
where the parameter 0 ≤ a ≤ 1 allows us to model
diminishing returns for the attacker as he obtains additional
cracked passwords. For example, let t1% (resp. t2%) be given
such that p1 + . . . + pt1%
= 0.02)
R(t1%) < 2 × R(t1%)
a
then for a < 1 we have R(t2%) = 2
even though an adversary cracks twice as many passwords
by increasing his threshold from t1% to t2%.
Diminishing Returns: We note that the original model of
Blocki and Datta [10] is a special case of our model when
a = 1 (no diminishing returns). There are a number of
reasons why an attacker may encounter diminishing returns
(a < 1) for additional cracked passwords. First, if the
attacker plans to sell the passwords on the black market
then basic economics suggests that increasing the supply of
cracked passwords is likely to drive down prices. In the case
of a large breach like Yahoo! (500 million passwords) it is
conceivable the number of available passwords on the black
market might quickly increase by two orders of magnitude.
Second, the more user accounts that are hacked/actively
exploited the more likely it is that the original breach will be
detected. If the breach is detected then an organization can
ask (or require) users to change their passwords or require
two-factor authentication, which will reduce the value of
each cracked password5.
Interpreting model parameter v: We note that we have
v = R(∞), where R(∞) × N denotes the total value of
a completely cracked password dataset of size N. Thus,
the parameter v denotes the average value of a cracked
password given that all password have been cracked. We can
estimate this parameter v based on black market sales data.
For example, suppose that we know that R(t1%) = $4× 1%
e.g., from equilibrium black market prices when only 1% of
cracked passwords are on the market. In this case we can
extrapolate
v = R(∞) = R(t100%) = 100
a
R(t1%) = $4
1001−a .
(1)
Rational Attacker Behavior: Formally, the rational ad-
∗ maximizing his overall
versary will select the threshold t
utility
∗ = arg max
t
t
(R(t) − C(t)) .
∗) = C(t
Intuitively, a rational adversary should stop guessing
if the marginal cost of one more password guess exceeds
the marginal beneﬁt of that guess. Thus, we will have
∗−1).
MC(t
The marginal cost of increasing the threshold from t − 1 to
t is
∗−1) ≈ MR(t
∗) = R(t
⎛
⎝
∗)−R(t
⎞
⎠
∗)−C(t
MC(t) = C(t) − C(t − 1) = k
t−1(cid:4)
1 −
(2)
pj
.
j=1
Intuitively, the attacker pays an extra cost k to hash pwdt
if and only if the ﬁrst t − 1 guesses are incorrect. Similarly,
the attacker’s marginal revenue is MR(t) = R(t) − R(t − 1)
⎠a⎞
⎞
when a = 1 we have MR(t) = v × pt otherwise
⎠ × pt .
⎛
⎛
⎝
⎝ t(cid:4)
⎛
⎝t−1(cid:4)
⎞
⎠a
MR(t) = v
(3)
pj
pj
−
j=1
j=1
Note that λt∗ denotes the expected fraction of passwords
compromised by an rational attacker. Given a speciﬁc as-
sumption about the password distribution (e.g., Zipf’s law)
we can derive bounds on λt∗.
Competition. We do not attempt to directly model the
behavior of an adversary who faces competition from other
password crackers. Many breaches (e.g., Yahoo!, LinkedIn,
5. However, the cracked passwords arguably still have signiﬁcant value
after the breach is detected for two reasons. First, many users will not
update their passwords unless they are required to do so. Second, many
of the users that do update their passwords may do so in a predictable
way [28]. Third, many users will have the same password for other
accounts.
856
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
Dropbox) remained undetected for several years. In these
cases it may be reasonable to assume that the password
cracker faced no competition. However, competition cer-
tainly could occur in the event that the breach is public
(e.g., Ashley Madison). In an extremely competitive setting
(e.g., password for a cryptocurrency wallet) only the ﬁrst
attacker to crack the password will be rewarded6. Such
competition would decrease the expected reward for each
cracked password and could potential reduce the total % of
passwords cracked by each individual attacker.
max{Cracked(pv, a), 1 − p} .
However, from the defender’s point of view the goal is
to minimize the % of passwords that are cracked by any
attacker. Thus, we can argue that competition will have a
minimal impact on the total % of cracked passwords. In
particular, even in an extremely competitive setting where
only the ﬁrst attacker to ﬁnd the password is rewarded we
still have
CompCrack(v, a) ≥ min
0≤p≤1
Here CompCrack(v) (resp. Cracked(v)) denotes the % of
passwords that are cracked by some attacker when the value
of a password is v and attackers face competition (resp. do
not face competition). This follows because the expected
reward for attacker when faced with competition is at least
Rcomp(t) ≥ pfirst × R(t) where pfirst is the probability
that no competing attacker managed to crack the password
already. If pfirst is small then the marginal rewards will also
be small so the attacker may quit earlier, but in this case it
is likely that another attacker has already compromised the
account (1 − pfirst).
Defender Actions. The value λt∗ will depend on k,
v as well as the underlying password distribution p1 ≥
p2 ≥ . . .. The goal of key-stretching is to increase k so that
we can reduce λt∗, the fraction of compromised accounts,
in the event of an authentication server breach. However,
the defender is constrained by server workload and by
authentication times. In particular, the number of sequential
hash iterations (τ) is bounded by usability constraints as
users may be unhappy if they need to wait a long time
to authenticate e.g., it would at least a second to compute
7 hash iterations on a mod-
PBKDF2-SHA256 with τ = 10
ern CPU [29]. Similarly, the total workload k is similarly
bounded by workload constraints e.g., the authentication
server must be able to handle all of the authentication re-
quests even during trafﬁc peaks. If the value v is sufﬁciently
large (in proportion to the cost k of a password guess) then
a rational attacker will crack every password λt∗ = 1. In
this case we say that all of the key-stretching effort was
useless against a value v rational adversary.
Password hashing algorithms like BCRYPT, PBKDF2
and SCRYPT have parameters that control the running time
(number of hash iterations) τ and total cost k of computing
the password hash function. Thus, the cost k of computing
6. However, we remark that in many instances attackers may unknow-
ingly “share” the beneﬁt of a cracked account. For example, an attacker
who cracks a password may not actually change the password since such
an action would alert the legitimate user of the breach.
857
PBKDF2 or BCRYPT is k = τ × CH, where CH denotes
the cost of computing the underlying hash function (e.g.,
SHA256 or Blowﬁsh). We will treat CH as a unit of mea-
surement when we report the cost k and write k = τ for
the BCRYPT and PBKDF2 functions. Given an estimate of
CH in USD we will use k$ = k× CH to denote the cost of
computing the password hash function in USD.
Intuitively, a memory hard function is a function whose
computation requires large amounts of memory. One of the
key advantages of a memory hard function is that cost k
2 instead of τ making it possible to
potentially scales with τ
increase costs without introducing intolerable authentication
delays. An ideal memory hard function runs in time τ and
requires τ blocks of memory to compute. Thus, the Area
x Time (AT) complexity of computing the Memory Hard
2 because the adversary must allocate
Function scales with τ
τ blocks of memory for τ units of time. In particular, we
use k = τ × CH + τ
2 × Cmem to model the approximate
cost of computing a memory hard function which iteratively
makes τ calls to the underlying hash function H and requires
τ blocks of memory. By contrast, the AT complexity of
BCRYPT and PBKDF2 is just k = τ since these functions
can be computed with a single block of memory. Here,
Cmem is a constant representing the core memory-area
ratio. That is the area of one block of memory on chip
divided by the the area of a core evaluating H on chip.
In this paper we use the estimate Cmem ≈ 1/3000 as in
[30], [31] though we stress that our analysis could be easily
repeated with different parameter choices.
Model Limitations. To keep exposition simple we do
not attempt to incorporate any model of equilibrium prices
for cracked passwords on the black market and instead
assume that the value of a cracked password v$ is static for
all users. A targeted adversary may have higher valuations
for speciﬁc user passwords e.g., celebrities, politicians. Sim-
ilarly, an attacker who ﬂoods a black market with cracked
passwords may drive equilibrium prices down. Our primary
ﬁndings would not be altered in any signiﬁcant way by
including such a model unless equilibrium prices drop by
1–2 orders of magnitude [16]. We also remark that our
intention is to model an untargeted economically motivated
attacker and not a nation state focused on cracking the
passwords of a particular person of interest. However, it may
still be reasonable to believe that a nation state attacker will
be largely be constrained by economic considerations (e.g.,
expected value of additional intelligence gained by cracking
the password versus expected cost to crack password).
3. Yahoo! Passwords follow Zipf’s Law
Zipf’s law states that the frequency of an element in a
distribution is related to its rank in the distribution. There
are two variants of Zipf’s law for passwords: PDF-Zipf
(cid:2)t
and CDF-Zipf. In the CDF-Zipf model we have λt =
j=1 pi = y· t
r, where the constants y and r are the CDF-
Zipf parameters. In the PDF-Zipf model we have fi = C
is ,
where s and C are the PDF-Zipf parameters. Normalizing
by N the number of users we have pi = z
is , where z = C
N.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
Wang et al. [32] previously found that password frequen-
cies tend to follow PDF-Zipf’s law if the tail of the password
distribution (e.g., passwords with frequency fi < 5) is
dropped. Wang and Wang [11] subsequently found that
CDF-Zipf’s model is superior in that the CDF-Zipf ﬁts
were more stable than PDF-Zipf ﬁts and that the CDF-
Zipf ﬁt performed better under Kolmogorov-Smirnov (KS)
tests. Furthermore, the CDF-Zipf model can ﬁt the entire
password distribution (e.g., without excluding passwords
with frequency fi < 5). These claims were based on analysis
of several smaller password datasets (N ≤ 32.6 million
users) which were released by hackers.
In 2016 Yahoo! allowed the release of a differentially
private list of password frequencies for users of their ser-
vices [13]. We refer an interested reader to [12], [13] for
additional details about how the Yahoo! data was collected
and how it was perturbed to preserve differential privacy.
The Yahoo! dataset is superior to other datasets in that
it offers the largest sample size N = 70 million and the
dataset was collected and released by trusted parties. We
show that the Yahoo! dataset is also well modeled by CDF-
Zipf’s law. Our analysis comprises the strongest evidence
to date of Wang and Wang’s premise [11] that password
distributions follow CDF-Zipf’s law due to the advantages
of the Yahoo! dataset. We focus on the CDF-Zipf’s law
model in this section since it can ﬁt the entire password
distribution [11]. We also veriﬁed that the Yahoo! dataset is
also well modeled by PDF-Zipf’s law if we drop passwords
with frequency fi < 5 like Wang et al. [32], but we omit
this analysis from the submission due to lack of space.
The rest of this section is structured as follows: First, in
section 3.1 we discuss the advantages of using the Yahoo!
dataset over leaked datasets like RockYou. In 3.2 we show
that the noise that was added to preserve differential privacy
will have a negligibly small impact on CDF-Zipf ﬁttings. In
section 3.3 we use subsampling to show that the CDF-Zipf
ﬁttings for Yahoo! converge to a stable solution. Finally, in
section 3.4 we present the CDF-Zipf ﬁtting for the entire
Yahoo! dataset.
3.1. On Ecological Validity
The Yahoo! frequency corpus offers many advantages
over breached password datasets such as RockYou or
Tianya.
• The Yahoo! password frequency corpus is based on 70
million Yahoo! passwords — more than twice as large
as any of the breached datasets analyzed by Wang and
Wang [11].
• The records were collected in a trusted fashion. No
inﬁltration, hacking, tricks, or general foul play was
used to obtain any of this data. There was no ulterior
motive behind collecting these passwords other than
to provide valuable data in a way that can be used
for scientiﬁc research. By contrast, it is possible that
hackers strategically omit (or inject) password data
before they release a breached dataset like RockYou or
List Version
RockYou Standard
RockYou Diff. Private
RockYou Standard
RockYou Diff. Private
RockYou Standard
RockYou Diff. Private
y
0.0288
0.0302
r
0.2108
0.2077
2
R
0.9687
0.9681
σy
1.348 ∗ 10
−6
σr
2.94 ∗ 10
−6
σR2
6.50 ∗ 10
−7
TABLE 1: Impact of Differential Privacy on CDF Fit
Tianya! Why should we trust rogue hackers to provide
researchers with representative password data?
• Breached password datasets often contain many pass-
words/ accounts that look suspiciously fake. In 2016
Yang et al [14] suggested that such passwords can
be removed with DBSCAN [33]. Cleansing operations
ended up removing a reasonable portion of the dataset
(e.g., 5 million passwords were removed from Rock-
You’s data). With the Yahoo! data such cleansing is
not needed, as it was collected in a manner that ensured
collected passwords were in use. Previous work that has
been done on Zipf distributions in breached password
datasets [11] did not perform any sort of sanitizing step
on the data. It is unclear how such operations would
affect the Zipf law ﬁt.
• The information is released in a responsible way that
preserves users’ privacy. The differential privacy mech-
anism means that even with the released data it is
not possible to determine any new information about
Yahoo’s users that an adversary would not be able to
obtain anyways.
• Data from the Yahoo! password frequency corpus ulti-
mately is derived from the passwords of active Yahoo!
users who were logging in during the course of the
study as opposed to passwords from throwaway ac-
counts that have been long forgotten.
3.2. On the Impact of Differential Privacy on CDF-
Zipf Fits
The published Yahoo! password frequency lists were
perturbed to ensure differential privacy. Before attempting
to ﬁt this dataset using Zipf’s law we seek to answer the