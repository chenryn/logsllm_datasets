 checkpoint_segments                 | 64                        |   -- shared buffer只有256MB，但是这个有1GB的间隔，可以考虑加大shared buffer。前提是cgroup不会限制。  
 checkpoint_timeout                  | 300                       | s  
 checkpoint_warning                  | 30                        | s  
 commit_delay                        | 0                         |   --  未开启分组提交，对于高并发的场景，建议打开。当然也可以关闭synchronous_commit          达到同样的目的。  
 commit_siblings                     | 5                         |   
 fsync                               | on                        |   
 full_page_writes                    | on                        |   -- 如果底层块设备的原子写大于等于block_size，和wal_block_size，可以关闭full_page_writes, 或者底层文件系统可以避免partial write，也可以关闭fpw.  
 synchronous_commit                  | on                        |   -- 对于非重要事务，建议在事务级别关闭synchronous_commit   来提高性能。  
 wal_buffers                         | 983                       | 8kB  
 wal_level                           | hot_standb                |   
 wal_log_hints                       | off                       |   
 wal_sync_method                     | fdatasync                 |   -- 建议根据wal所在的块设备测试一下，使用最快的fsync接口，fdatasync刷data page, 不刷inode。  
 wal_writer_delay                    | 200                       | ms  --  建议改为10ms  
(228 rows)  
```  
以上有很多可以优化或调整的地方，希望阿里云RDS团队的人看到或者用户看到，大家一起来把RDS搞好，用好。  
接下来先做一个简单的单个实例的性能测试，因为RDS实例是最低配置的，而且鉴于以上配置有些对性能影响较大的，同时网络层面不是直连数据库，因为阿里云里面还有一层中间件，另外还有一个对性能有影响的是用了其他机房的ECS去测试RDS，所以结果可能和我们自己笔记本上测试的都相差甚远。  
请看：  
生成测试数据，为了减少IOPS，因为CGROUP限制了只有400的IOPS，所以我们的测试数据和索引加起来要小于256MB，用户数据200万条，会话数据200万条，一共400万条初始数据，以及日志表一个。  
```  
\timing  
set synchronous_commit=off;  
create table userinfo (userid int,info jsonb);  
insert into userinfo select generate_series(1,2000000);  
create table session (userid int,last_login timestamp);  
insert into session select generate_series(1,2000000);  
create table login_log (userid int,db_user name,client_addr inet,  
                       client_port int,server_addr inet,server_port int,login_time timestamp);  
set maintenance_work_mem='1GB';  
alter table userinfo add constraint pk_userinfo primary key (userid);  
alter table session add constraint pk_session primary key (userid);  
postgres=> \dt+  
                        List of relations  
 Schema |      Name       | Type  | Owner  |  Size  | Description   
--------+-----------------+-------+--------+--------+-------------  
 public | ha_health_check | table | aurora | 40 kB  |   
 public | login_log       | table | digoal | 141 MB |   
 public | session         | table | digoal | 75 MB  |   
 public | userinfo        | table | digoal | 69 MB  |   
(4 rows)  
postgres=> \di+  
                                   List of relations  
 Schema |         Name         | Type  | Owner  |      Table      | Size  | Description   
--------+----------------------+-------+--------+-----------------+-------+-------------  
 public | ha_health_check_pkey | index | aurora | ha_health_check | 16 kB |   
 public | login_log_pkey       | index | digoal | login_log       | 22 MB |   
 public | pk_session           | index | digoal | session         | 43 MB |   
 public | pk_userinfo          | index | digoal | userinfo        | 43 MB |   
(4 rows)  
```  
将数据加载到内存：  
```  
create extension pg_prewarm;  
select pg_prewarm('userinfo');  
select pg_prewarm('pk_userinfo');  
select pg_prewarm('session');  
select pg_prewarm('pk_session');  
```  
创建测试函数，包含3个操作：  
1\. 基于PK执行查询用户表，  
2\. 基于PK更新会话表，  
3\. 插入日志  
共三个操作的事务，使用异步提交。  
```  
create or replace function f_test(i_id int) returns void as $$  
declare  
  v_t timestamp := now();  
begin  
  set synchronous_commit = off;  
  perform 1 from userinfo where userid=i_id;  
  update session set last_login=v_t where userid=i_id;  
  insert into login_log (userid,db_user,client_addr,client_port,server_addr,server_port,login_time)  
                        values (i_id,current_user,inet_client_addr(),inet_client_port(),inet_server_addr(),inet_server_port(),v_t);  
  return;  
end;  
$$ language plpgsql strict;  
```  
验证：  
```  
postgres=> select f_test(1);  
 f_test   
--------  
(1 row)  
postgres=> select now(),* from session where userid=1;  
              now              | userid |        last_login           
-------------------------------+--------+---------------------------  
 2015-06-10 11:44:01.820262+08 |      1 | 2015-06-10 11:44:01.22805  
(1 row)  
```  
测试机是阿里云的ECS（1核的ECS，也是较烂的性能了），与数据库在北京的不同机房（因为没找到同机房的ECS），测试：  
```  
vi test.sql  
\setrandom id 1 2000000  
select f_test(:id);  
```  
测试5分钟，每5秒输出一次tps统计，测试结果：  
```  
pgbench -M prepared -n -r -f ./test.sql -c 16 -j 16 -P 5 -h xxxx -p 3433 -U digoal -T 300 postgres  
progress: 5.0 s, 2903.1 tps, lat 5.482 ms stddev 7.189  
progress: 10.0 s, 3101.8 tps, lat 5.162 ms stddev 6.366  
progress: 15.0 s, 3131.1 tps, lat 5.098 ms stddev 6.286  
progress: 20.0 s, 3060.6 tps, lat 5.234 ms stddev 6.591  
progress: 25.0 s, 3198.8 tps, lat 4.998 ms stddev 6.069  
progress: 30.0 s, 3110.7 tps, lat 5.144 ms stddev 6.362  
progress: 35.0 s, 2972.9 tps, lat 5.376 ms stddev 6.899  
progress: 40.0 s, 3060.7 tps, lat 5.224 ms stddev 6.609  
progress: 45.0 s, 3057.8 tps, lat 5.232 ms stddev 6.642  
progress: 50.0 s, 3051.0 tps, lat 5.242 ms stddev 6.601  
progress: 55.0 s, 3083.9 tps, lat 5.192 ms stddev 6.454  
progress: 60.0 s, 3154.5 tps, lat 5.063 ms stddev 6.247  
progress: 65.0 s, 3103.8 tps, lat 5.166 ms stddev 6.421  
progress: 70.0 s, 3099.7 tps, lat 5.158 ms stddev 6.464  
progress: 75.0 s, 3141.9 tps, lat 5.092 ms stddev 6.292  
progress: 80.0 s, 3105.9 tps, lat 5.140 ms stddev 6.406  
progress: 85.0 s, 3097.7 tps, lat 5.161 ms stddev 6.412  
progress: 90.0 s, 3112.3 tps, lat 5.146 ms stddev 6.339  
progress: 95.0 s, 3023.9 tps, lat 5.271 ms stddev 6.627  
progress: 100.0 s, 3088.4 tps, lat 5.194 ms stddev 6.426  
progress: 105.0 s, 3095.3 tps, lat 5.178 ms stddev 6.358  
progress: 110.0 s, 3085.7 tps, lat 5.172 ms stddev 6.465  
progress: 115.0 s, 3143.2 tps, lat 5.099 ms stddev 6.185  
progress: 122.9 s, 1429.7 tps, lat 6.803 ms stddev 78.508  
progress: 127.8 s, 174.7 tps, lat 95.927 ms stddev 617.430  
progress: 130.5 s, 443.2 tps, lat 61.379 ms stddev 460.493  
progress: 135.5 s, 240.0 tps, lat 68.903 ms stddev 379.392  
progress: 143.0 s, 179.9 tps, lat 45.773 ms stddev 314.194  
progress: 148.1 s, 330.8 tps, lat 74.456 ms stddev 564.188  
progress: 150.2 s, 993.0 tps, lat 20.515 ms stddev 249.150  
progress: 158.5 s, 265.6 tps, lat 58.506 ms stddev 422.513  
progress: 160.3 s, 1535.6 tps, lat 15.287 ms stddev 188.301  
progress: 168.8 s, 377.9 tps, lat 34.676 ms stddev 309.978  
progress: 170.0 s, 2758.9 tps, lat 15.764 ms stddev 204.179  
progress: 175.0 s, 992.6 tps, lat 16.132 ms stddev 146.747  
progress: 180.0 s, 1061.1 tps, lat 15.093 ms stddev 136.797  
progress: 185.0 s, 487.3 tps, lat 32.812 ms stddev 302.795  
progress: 190.8 s, 1665.7 tps, lat 6.174 ms stddev 57.000  
progress: 195.7 s, 834.5 tps, lat 16.647 ms stddev 189.034  
progress: 204.2 s, 1839.9 tps, lat 10.975 ms stddev 147.814  
progress: 205.0 s, 3180.3 tps, lat 8.171 ms stddev 95.892  
progress: 210.0 s, 3216.4 tps, lat 4.972 ms stddev 10.054  
progress: 215.0 s, 1229.4 tps, lat 13.029 ms stddev 166.420  
progress: 220.0 s, 3178.3 tps, lat 5.039 ms stddev 7.517  
progress: 225.0 s, 3261.0 tps, lat 4.897 ms stddev 11.573  
progress: 230.0 s, 3149.3 tps, lat 5.073 ms stddev 7.657  
progress: 235.0 s, 3200.8 tps, lat 4.995 ms stddev 7.128  
progress: 240.0 s, 3128.6 tps, lat 5.121 ms stddev 9.665  
progress: 245.0 s, 3063.0 tps, lat 5.223 ms stddev 6.571  
progress: 250.0 s, 3047.3 tps, lat 5.250 ms stddev 6.514  
progress: 255.0 s, 3192.3 tps, lat 5.007 ms stddev 6.121  
progress: 260.0 s, 3113.3 tps, lat 5.148 ms stddev 6.379  
progress: 265.0 s, 3278.1 tps, lat 4.871 ms stddev 5.762  
progress: 270.0 s, 3091.6 tps, lat 5.181 ms stddev 6.378  
progress: 275.0 s, 3172.2 tps, lat 5.034 ms stddev 6.098  
progress: 280.0 s, 2879.8 tps, lat 5.556 ms stddev 7.319  
progress: 285.0 s, 3267.2 tps, lat 4.900 ms stddev 5.850  
progress: 290.0 s, 3174.6 tps, lat 5.035 ms stddev 6.097  
progress: 295.0 s, 3201.1 tps, lat 4.996 ms stddev 6.033  
progress: 300.0 s, 3071.6 tps, lat 5.216 ms stddev 6.439  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 16  
duration: 300 s  
number of transactions actually processed: 720287  
latency average: 6.663 ms  
latency stddev: 72.356 ms  
tps = 2400.926759 (including connections establishing)  
tps = 2401.013184 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002118        \setrandom id 1 2000000  
        6.659889        select f_test(:id);  
```  
性能抖动分析，虽然拿不到数据库的日志，但是基本上判断和检查点有关，检查点时会产生刷脏数据的IO，因此更新会变慢，同时又开启了FPW，所以接下来的脏块写WAL BUFFER开销会变大，所以性能抖动严重，这个是需要优化的，但是IOPS是无法优化的硬伤。详见我以前写的一些分析文章：  
http://blog.163.com/digoal@126/blog/static/163877040201542103933969/  
http://blog.163.com/digoal@126/blog/static/1638770402015463252387/  
http://blog.163.com/digoal@126/blog/static/16387704020154651655783/  
http://blog.163.com/digoal@126/blog/static/16387704020154653422892/  
http://blog.163.com/digoal@126/blog/static/16387704020154811421484/  
http://blog.163.com/digoal@126/blog/static/16387704020154129958753/  
所以我们再看看不带更新, 只有查询和插入的测试吧：  
```  
create or replace function f_test(i_id int) returns void as $$  
declare  
  v_t timestamp := now();  
begin  
  set synchronous_commit = off;  
  perform 1 from userinfo where userid=i_id;  
  -- update session set last_login=v_t where userid=i_id;  
  insert into login_log (userid,db_user,client_addr,client_port,server_addr,server_port,login_time)  
                        values (i_id,current_user,inet_client_addr(),inet_client_port(),inet_server_addr(),inet_server_port(),v_t);  
  return;  
end;  
$$ language plpgsql strict;  
```  
测试结果，性能相当平稳：  
```  
pgbench -M prepared -n -r -f ./test.sql -c 16 -j 16 -P 5 -h xxxx -p 3433 -U digoal -T 300 postgres  
progress: 5.0 s, 3571.7 tps, lat 4.466 ms stddev 4.847  
progress: 10.0 s, 3653.7 tps, lat 4.379 ms stddev 4.484  
progress: 15.0 s, 3675.6 tps, lat 4.352 ms stddev 4.416  
progress: 20.0 s, 3688.8 tps, lat 4.337 ms stddev 4.420  
progress: 25.0 s, 3766.2 tps, lat 4.247 ms stddev 4.116  
progress: 30.0 s, 3626.6 tps, lat 4.411 ms stddev 4.657  
progress: 35.0 s, 3683.6 tps, lat 4.342 ms stddev 4.424  
progress: 40.0 s, 3735.7 tps, lat 4.282 ms stddev 4.283  
progress: 45.0 s, 3818.3 tps, lat 4.189 ms stddev 4.027  
progress: 50.0 s, 3736.7 tps, lat 4.281 ms stddev 4.259  
progress: 55.0 s, 3763.7 tps, lat 4.250 ms stddev 4.158  
progress: 60.0 s, 3768.1 tps, lat 4.245 ms stddev 4.169  