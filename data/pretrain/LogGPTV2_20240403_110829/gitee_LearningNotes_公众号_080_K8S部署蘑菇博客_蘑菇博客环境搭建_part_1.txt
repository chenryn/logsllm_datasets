# kubernetes搭建蘑菇博客项目
## 一.安装部署k8s集群
### 1.初始化集群系统
```shell
1.初始化集群信息
# 关闭防火墙
systemctl stop firewalld && systemctl disable firewalld && systemctl status firewalld
# 关闭selinux
setenforce 0
sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
# 配置主机网卡信息
cp /etc/sysconfig/network-scripts/ifcfg-ens33{,.bak}
cat > /etc/sysconfig/network-scripts/ifcfg-ens33> /etc/hosts> /etc/profile
cat > /etc/sysctl.d/k8s.conf > /var/spool/cron/root
systemctl restart crond
# 开启ipvs模式
cp  /root/k8s-yilai/ipvs.modules  /etc/sysconfig/modules/
chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep ip_vs
#禁用iptables清空防火墙规则
service iptables stop   && systemctl disable iptables && systemctl status iptables && iptables -F
```
### 2.安装docker及所需rpm包，以及harbor仓库
```shell
# 启动docker 
systemctl start docker && systemctl enable docker.service && systemctl status docker
cat >  /etc/docker/daemon.json                  103s    v1.20.6
#  到这里k8s 集群就已经安装完成了
2.打上node工作节点worker标签
[root@k8s-master1 k8s-yilai]# kubectl label node k8s-node1 node-role.kubernetes.io/worker=worker
3. 安装kubernetes网络组件-Calico （master1节点执行）
[root@k8s-master1 k8s-yilai]# kubectl apply -f  /root/k8s-yilai/calico.yaml
注：在线下载配置文件地址是： https://docs.projectcalico.org/manifests/calico.yaml
[root@k8s-master1 k8s-yilai]# kubectl get node
NAME          STATUS   ROLES                  AGE     VERSION
k8s-master1   Ready    control-plane,master   5m18s   v1.20.6
k8s-node1     Ready    worker                 4m39s   v1.20.6
[root@k8s-master1 k8s-yilai]# kubectl get po -A 
NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE
kube-system   calico-kube-controllers-6949477b58-2fnj2   1/1     Running   0          25s
kube-system   calico-node-9s7n8                          1/1     Running   0          25s
kube-system   calico-node-kc2f9                          1/1     Running   0          25s
kube-system   coredns-7f89b7bc75-cm9bx                   1/1     Running   0          5m5s
kube-system   coredns-7f89b7bc75-j86ff                   1/1     Running   0          5m5s
kube-system   etcd-k8s-master1                           1/1     Running   0          5m20s
kube-system   kube-apiserver-k8s-master1                 1/1     Running   0          5m20s
kube-system   kube-controller-manager-k8s-master1        1/1     Running   0          5m20s
kube-system   kube-proxy-4ft9w                           1/1     Running   0          5m5s
kube-system   kube-proxy-cflgh                           1/1     Running   0          4m43s
kube-system   kube-scheduler-k8s-master1                 1/1     Running   0          5m20s
#测试在k8s创建pod是否可以正常访问网络
#把busybox-1-28.tar.gz上传到k8s-node1,node2节点，手动解压
[root@k8s-node1 ~]# docker load -i /root/k8s-yilai/busybox-1-28.tar.gz
kubectl run busybox --image busybox:1.28 --restart=Never --rm -it busybox -- sh
/ # ping www.baidu.com
PING www.baidu.com (39.156.66.18): 56 data bytes
64 bytes from 39.156.66.18: seq=0 ttl=127 time=39.3 ms
#通过上面可以看到能访问网络，说明calico网络插件已经被正常安装了
#  到这里k8s 集群就已经安装完成了
# 配置 补全键
yum install bash-completion -y      # 永久方式 
source /usr/share/bash-completion/bash_completion
cat >> /etc/profile-"
      # Here: "-"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding       #角色绑定
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount #绑定在这个用户 
    namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding      #集群绑定
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount   #集群绑定到这个serviceacount
    namespace: kube-system   #集群角色是可以跨namespace，但是这里只指明给这个namespce来使用
[root@k8s-master1 ingress]# kubectl apply -f nginx-ingress-controller-rbac.yml
```
#### 1.2 创建default-backend
```shell
[root@k8s-master1 ingress]# cat default-backend.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: default-http-backend
  labels:
    k8s-app: default-http-backend
  namespace: kube-system
spec:
  replicas: 1
  selector:
   matchLabels:
     k8s-app: default-http-backend
  template:
    metadata:
      labels:
        k8s-app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        # Any image is permissable as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: 192.168.229.21/test/defaultbackend:1.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz   #这个URI是 nginx-ingress-controller中nginx里配置好的localtion 
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30   #30s检测一次/healthz
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
#        resources:
#          limits:
#            cpu: 10m
#            memory: 20Mi
#          requests:
#            cpu: 10m
#            memory: 20Mi
#      nodeName: node1
---
apiVersion: v1