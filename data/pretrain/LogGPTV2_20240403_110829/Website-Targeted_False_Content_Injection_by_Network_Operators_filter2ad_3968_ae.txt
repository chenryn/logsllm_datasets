sorship in Iran: A ﬁrst look. In Proceedings of the USENIX Work-
shop on Free and Open Communications on the Internet (2013).
[10] BODE, K. Mediacom Injecting Their Ads Into Other Websites.
http://www.dslreports.com/shownews/112918.
[11] CLAYTON, R., MURDOCH, S. J., AND WATSON, R. N. Ignoring
the great ﬁrewall of China. In Privacy Enhancing Technologies
(2006), Springer, pp. 20–35.
[12] DIERKS, T., AND RESCORLA, E. The transport layer security
(TLS) protocol version 1.2. RFC 5246, August 2008.
[13] DUAN, H., WEAVER, N., ZHAO, Z., HU, M., LIANG, J.,
JIANG, J., LI, K., AND PAXSON, V. Hold-on: Protecting against
on-path dns poisoning. In Proc. Workshop on Securing and Trust-
ing Internet Names, SATIN (2012).
[14] FIELDING, R., AND ET AL. Hypertext transfer protocol –
HTTP/1.1. RFC 2616, June 1999.
[15] FIELDING, R., AND RESCHKE, J. Hypertext transfer protocol
(HTTP/1.1): Message syntax and routing. RFC 7230, June 2014.
[16] HERZBERG, A., AND SHULMAN, H. Security of patched DNS.
In Computer Security–ESORICS 2012. Springer, 2012, pp. 271–
288.
[17] HJELMVIK, E.
Packet
injection attacks
in the wild.
https://www.netresec.com/?page=Blog&month=2016-
03&post=Packet-Injection-Attacks-in-the-Wild.
240  25th USENIX Security Symposium 
USENIX Association
14
[18] HUFFAKER, B., PLUMMER, D., MOORE, D., AND CLAFFY, K.
Topology discovery by active probing. In Symposium on Appli-
cations and the Internet (SAINT) (Jan 2002), pp. 90–96.
[39] ZIMMERMAN, P. T. Measuring privacy, security, and censorship
through the utilization of online advertising exchanges. Tech.
rep., Princeton University, June 2015.
[19] KEARNEY, R. Comcast caught hijacking web trafﬁc. http:
//blog.ryankearney.com/2013/01/comcast-caught-
intercepting-and-altering-your-web-traffic/.
[20] KREIBICH, C., WEAVER, N., NECHAEV, B., AND PAXSON,
V. Netalyzr: illuminating the edge network. In Proceedings of
the 10th ACM SIGCOMM Conference on Internet Measurement
(2010), pp. 246–259.
[21] LEGUAY, J., LATAPY, M., FRIEDMAN, T., AND SALAMATIAN,
K. Describing and simulating Internet routes. In NETWORKING
2005. Springer, 2005, pp. 659–670.
[22] LEVIS, P. The collateral damage of internet censorship by DNS
injection. ACM SIGCOMM CCR 42, 3 (2012).
[23] MAO, Z. M., REXFORD, J., WANG, J., AND KATZ, R. H. To-
wards an accurate AS-level traceroute tool.
In Proceedings of
the Conference on Applications, Technologies, Architectures, and
Protocols for Computer Communications (2003), pp. 365–378.
[24] MARCZAK, B., WEAVER, N., DALEK, J., ENSAFI, R., FI-
FIELD, D., MCKUNE, S., REY, A., SCOTT-RAILTON, J., DEIB-
ERT, R., AND PAXSON, V. An analysis of China’s “Great Can-
non”. In 5th USENIX Workshop on Free and Open Communica-
tions on the Internet (FOCI 15) (2015).
[25] MCCANNE, S., AND JACOBSON, V. The BSD packet ﬁlter: A
new architecture for user-level packet capture. In Proceedings of
the Winter USENIX Conference (1993), USENIX Association.
[26] NCC, R. RIPE Atlas. https://atlas.ripe.net.
[27] POSTEL, J. Transmission control protocol. RFC 793, September
1981.
[28] REIS, C., GRIBBLE, S. D., KOHNO, T., AND WEAVER, N. C.
In NSDI
Detecting in-ﬂight page changes with web tripwires.
(2008), vol. 8, pp. 31–44.
[29] SIBY, S. Default TTL (Time To Live) Values of Differ-
https://subinsb.com/default-device-ttl-
ent OS.
values, 2014.
[30] SILVER, D., JANA, S., BONEH, D., CHEN, E., AND JACKSON,
C. Password managers: Attacks and defenses. In 23rd USENIX
Security Symposium (USENIX Security 14) (2014), pp. 449–464.
[31] TOPOLSKI, R. NebuAd and partner ISPs: Wiretapping, forgery
and browser hijacking, June 2008. http://www.freepress.
net/files/NebuAd_Report.pdf.
[32] TOUCH, J., MANKIN, A., AND BONICA, R. The TCP authenti-
cation option. RFC 5925, June 2010.
[33] VERKAMP, J.-P., AND GUPTA, M. Inferring mechanics of web
censorship around the world. Free and Open Communications on
the Internet, Bellevue, WA, USA (2012).
[34] WEAVER, N., KREIBICH, C., DAM, M., AND PAXSON, V. Here
In Passive and Active Measurement (2014),
be web proxies.
Springer, pp. 183–192.
[35] WEAVER, N., SOMMER, R., AND PAXSON, V. Detecting forged
TCP reset packets. In NDSS (2009).
[36] WEINSTEIN, L. Google Hijacked – Major ISP to Intercept and
Modify Web Pages. http://lauren.vortex.com/archive/
000337.html.
[37] XU, X., MAO, Z. M., AND HALDERMAN, J. A. Internet cen-
sorship in China: Where does the ﬁltering occur? In Passive and
Active Measurement (2011), Springer, pp. 133–142.
[38] ZHANG, C., HUANG, C., ROSS, K. W., MALTZ, D. A., AND
LI, J.
Inﬂight modiﬁcations of content: Who are the cul-
prits. In Workshop of Large-Scale Exploits and Emerging Threats
(LEET11) (2011).
A “Ack storm” due to TCP Injection
An “Ack storm” occurs when the injected segment
causes the receiver to send an acknowledgment for data
bytes having sequence numbers that were not yet sent
by the peer. This acknowledgment is dropped by the
peer, triggering it to respond by resending an earlier Ack,
which may in turn trigger a retransmission by the re-
ceiver. The retransmitted segment will include again an
acknowledgment for the yet to be sent sequence numbers
and so forth. Such a “ping-pong” exchange, if run long
enough, will cause the connection to timeout and reset.
In many cases this is undesirable for the injector as it
will interfere with the ﬂow of trafﬁc on the connection.
An “Ack storm” can subside if the peer eventually sends
data bytes having sequence numbers that correspond to
those of the forged data bytes injected by the third party.
B Injection Detection Algorithm
Algorithm 1 details the procedure for detecting packet
races. This algorithm is executed by each worker pro-
cess upon the receipt of a new packet. In the following,
CP denotes the currently received packet and S denotes
the set of packets received so far as part of the session
of CP. P( f ) denotes the value of parameter f of packet
P. If parameter f is a ﬁeld of TCP or IP, it is denoted by
the protocol and ﬁeld names, e.g., P(IP total length) de-
notes the value of the ﬁeld Total Length in the IP header
of packet P. The algorithm returns True if and only if a
race is detected.
In Algorithm 1, line 1 iterates over the previously
received packets of the current session. Line 2 veri-
ﬁes that the two considered packets have been received
within a time interval that does not exceed the parame-
ter MaxIntervalTime. Lines 5 and 6 compute the total
lengths of the TCP and IP headers of each of the two
packets. Lines 7 and 8 compute the payload size of each
of the two packets. Lines 9 and 10 compute the TCP
sequence number of the last byte delivered in the pay-
load in each of the two packets. Lines 11 and 12 check
for a sequence number overlap between the two packets.
Line 15 checks whether the overlapped payload is differ-
ent. If it is, a race is detected and the algorithm returns
True.
To avoid false positives, we did not consider the fol-
lowing packets (not shown in Algorithm 1):
1. Checksum errors – packets that have checksum er-
rors either in the TCP or IP headers will clearly have
USENIX Association  
25th USENIX Security Symposium  241
15
Input: CP, S
1 foreach OP in S do
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
if CP(t) - OP(t) > MaxIntervalTime then
continue;
end
CP(headers size) = CP(IP header length) + CP(TCP data offset)*4;
OP(headers size) = OP(IP header length) + OP(TCP data offset)*4;
CP(payload size) = CP(IP total length) - CP(headers size);
OP(payload size) = OP(IP total length) - OP(headers size);
CP(top sequence number) = CP(TCP sequence number) + CP(payload size);
OP(top sequence number) = OP(TCP sequence number) + OP(payload size);
if CP(top sequence number) > OP(TCP sequence number) then
if OP(top sequence number) > CP(TCP sequence number) then
bottom overlap = MAX(CP(TCP sequence number), OP(TCP sequence number));
top overlap = MIN(CP(top sequence number), OP(top sequence number));
if CP(TCP payload)[bottom overlap:top overlap] !=
OP(TCP payload)[bottom overlap:top overlap] then
return True;
end
end
end
20 end
21 return False;
Algorithm 1: Race detection algorithm
a different payload than that of their retransmission.
2. TCP reset – reset packets can carry data payloads
for diagnostic messages which are not part of the
regular session’s byte stream.
C False Positives
There were numerous events in which the race identiﬁ-
cation algorithm (described in Appendix B) of our mon-
itoring system identiﬁed a race that was not due to a
forged packet injection.
In the following we describe
these events and why they occur:
Retransmissions with different content As per the
TCP speciﬁcation [27], the payload of retransmitted seg-
ments must have the same content as the payload of the
original segment. In practice, however, this is not always
the case, and retransmitted segments sometimes carry
slightly different content, for the following reasons:
• Load balancing – some websites serve HTTP re-
quests using more than one server. Usually, a front-
end load balancer redirects the HTTP requests ac-
cording to the current load on each web server. It
is sometimes desirable that the same server serve
all HTTP requests coming from the same client.
To facilitate this, the ﬁrst HTTP response sent to
a client sets a cookie containing the identity of the
server chosen to serve the client from now on. Sub-
sequent requests from that client will include this
server ID and allow the load balancer to redirect
those requests to that server. If the ﬁrst HTTP re-
sponse needs to be retransmitted, some load bal-
ancers might, at the time of the retransmission,
choose a different web server than the one they
originally chose when the response was ﬁrst trans-
mitted. This results in a different cookie value set
in the retransmitted response. Examples of web-
sites that exhibit such behavior are wiley.com and
rottentomatoes.com.
• Accept-Ranges HTTP header – the HTTP 1.1 spec-
iﬁcation [15] allows a client to request a portion of
a resource by using the Range header in the HTTP
request. It may do so in cases where the web server
has indicated in previous responses its support of
such range requests. Such support is indicated
by the Accept-Ranges header. We observed cases
where a web server sent an HTTP response which
included ’Accept-Ranges: none’, indicating that the
server is unwilling to accept range requests, while
in a retransmission of the same response the header
was replaced by ’Accept-Ranges: bytes’, indicat-
ing that it is willing to accept range requests having
units of bytes. This happened when the retrieved
242  25th USENIX Security Symposium 
USENIX Association
16
resource spanned multiple TCP segments. Presum-
ably, the intention of the server is to allow the client
to retrieve a portion of a resource when network loss
is high. Examples of websites that exhibit such be-
havior are sagemath.org and nih.gov. Further-
more, such behavior was exhibited by several types
of web servers, including Apache, nginx and IIS.
mimic the identiﬁcation value of the legitimate packet.
Note that in order to increase the chances of winning the
race with the legitimate packet, the forged packet is in-
jected well before the injecting entity has a chance to in-
spect it. For this reason the injecting entity can not sim-
ply copy the identiﬁcation value of the legitimate packet
to the forged one.
• Non-standard HTTP headers – we have observed
that in some web applications that use non-standard
HTTP headers (namely, headers that begin with
’x-’), a retransmission of an HTTP response has dif-
ferent values for these headers than their value in the
initial response. For example, Amazon’s S3 service
includes in every response the headers ’x-amz-id-2’
and ’x-amz-request-id’, which help to troubleshoot
problems. These headers have a unique value for
each response even if it is a retransmission.
Retransmissions with different sequence numbers
For a few websites we encountered sessions in which a
retransmitted TCP segment started with a sequence num-
ber that was offset by 1 compared to the sequence num-
ber of the original segment. This might occur due to a
bug that caused the unnecessary incrementation when a
FIN segment was sent between the original and retrans-
mitted segment. There were no indications in the HTTP
responses as to the type of software executed by those
web servers. This unnecessary incrementation might also
be an artifact of a middle-box that serves the trafﬁc to
those servers. An example of a website that exhibits such
behavior is www.knesset.gov.il.
Non-compliant TCP trafﬁc We encountered many
TCP sessions (over port 80) which do not appear to
have originated from TCP-compliant nodes. There was
no proper 3-way handshake to open the session, the ac-
knowledgment did not correspond to the actual received
bytes, ﬂags were set arbitrarily, and the sequence num-
bers were not incremented consecutively. This last point
led our monitoring system to ﬂag many of these ses-
sions as injected sessions. Many of these sessions in-
cluded only unidirectional incoming trafﬁc that origi-
nated from a handful of networks primarily residing in
hosting providers (such as GoDaddy and Amazon). We
suspect that these are communication attempts by a com-
mand and control server to its bots. However, we have no
proof of this.
1. Duplicate ID with a packet from the server – in
some cases the injecting entity tries to mimic the
identiﬁcation values of the packets sent by the
server to make the forged packet less conspicuous.
Sometimes this is done rather carelessly by sim-
ply copying the identiﬁcation number of one of the
packets the server already sent (not the legitimate
packet the entity wishes to forge). This means that
the client receives two IP packets from the server
having the exact same identiﬁcation number. This
situation is highly unlikely to occur without the in-
tervention of a third party in the session, as the IP
layer of the server must make sure that each packet
in the session has a unique identiﬁcation value.
2. Duplicate ID with a packet from the client – in dif-
ferent attempts to, perhaps, mimic the identiﬁcation
values of the packets sent by the server, some in-
jectors simply copy an identiﬁcation value from the
HTTP request packet that triggered the response.
Since this packet is, of course, sent by the client,
the injector cannot achieve its goal; the identiﬁca-
tion values of the packets sent by the client are com-
pletely independent of those sent by the server. We
can use this to our advantage. It is possible but un-
likely that two packets – one sent by the server and
the other by the client – have the same identiﬁcation
value.
3. Swapped bytes of an ID in packets coming from
the client – we noticed that at least one injector that
aims to copy the identiﬁcation value from a packet
coming from the client (as described in the previ-
ous rule), does so in such a way that the two bytes
of the copied values are swapped. For example, if
the identiﬁcation value of a packet coming from the
client is 0xABCD, then the identiﬁcation value of
the injected packet will be 0xCDAB. This is prob-
ably due to a bug of the injector6. Occurrence of
such an event is highly unlikely without third-party
intervention.
D Attempts to Mimic the Identiﬁcation
E Improved Mitigation Algorithm
Values of the Legitimate Packet
In the following we account for some of the failed at-
tempts we observed in which the injecting entity tried to
Algorithm 2 details the proposed mitigation algorithm.
The algorithm is executed upon the receipt of a new in-
6Most likely the bug is a case of big endian/little endian confusion.
USENIX Association  
25th USENIX Security Symposium  243
17
Input: CP, S
1 if Check Race(CP,S(Suspicious Queue)) then
Block suspicious packet;
2
3 end
4 Suspicious = False;
5 if abs(CP(IP TTL)-S(Average TTL)) > 1 then
Suspicious = True;
6
7 end
8 Lower ID Boundary = (S(Last ID) - 10)%216;
9 Upper ID Boundary = (S(Last ID) + 5000)%216;
10 if CP(IP ID)  Upper ID Boundary then
Suspicious = True;
11
12 end
13 if Suspicious == True then
S(Suspicious Queue).append(CP);
14
15 end
16 else
17
18
19
Update S(Average TTL) with CP(IP TTL);
S(Last ID) = CP(IP ID);
Accept CP;
20 end
Algorithm 2: Mitigation algorithm
compromise the security of the client since in this case
the content of the injected packet will not be accepted by
the client’s TCP layer.
coming packet – CP. As in Algorithm 1 above, S denotes
the session of CP. P( f ) denotes the value of parameter f
of packet P. If parameter f is a ﬁeld of TCP or IP, it is de-
noted by the protocol and ﬁeld names, e.g., P(IP ID) de-
notes the value of the ﬁeld Identiﬁcation in the IP header
of packet P.
The algorithm maintains a queue of packets that are
suspected of being forged. The incoming packet is ﬁrst
checked against the suspicious packets for a race. If a
race is detected, the suspicious packet is blocked. Af-
terward, the TTL of the incoming packet is compared
against the average of TTL values of the previous pack-
ets received in the same session. If the difference is larger
than 1, then the packet is marked as suspicious. The
packet is also marked as suspicious if its Identiﬁcation
value is higher than 5000 plus the Identiﬁcation value
of the previously received packet of the session or lower
than that value minus 10. The rationale behind this com-
parison is that we generally expect the Identiﬁcation val-
ues of the session be monotonically increasing, except
in cases of packet reordering.
If the packet is marked
as suspicious it is enqueued to the suspicious queue for
200ms. If the packet is not suspicious the value of the
average TTL and last ID are updated and the packet is
accepted.
Note that a race will not be identiﬁed if the injected
packet arrives after the legitimate one. This is because
the legitimate packet will not be delayed, and once the
inject packet is received it will not be checked for a race
against the legitimate one. Nonetheless, this does not
244  25th USENIX Security Symposium 
USENIX Association
18