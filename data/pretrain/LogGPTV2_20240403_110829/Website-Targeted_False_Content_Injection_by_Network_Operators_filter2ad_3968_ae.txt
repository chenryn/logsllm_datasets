### References

1. **Sponsorship in Iran: A First Look.** In *Proceedings of the USENIX Workshop on Free and Open Communications on the Internet* (2013).

2. **BODE, K.** Mediacom Injecting Their Ads Into Other Websites. Available at: <http://www.dslreports.com/shownews/112918>.

3. **CLAYTON, R., MURDOCH, S. J., AND WATSON, R. N.** Ignoring the Great Firewall of China. In *Privacy Enhancing Technologies* (2006), Springer, pp. 20–35.

4. **DIERKS, T., AND RESCORLA, E.** The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246, August 2008.

5. **DUAN, H., WEAVER, N., ZHAO, Z., HU, M., LIANG, J., JIANG, J., LI, K., AND PAXSON, V.** Hold-on: Protecting against On-Path DNS Poisoning. In *Proc. Workshop on Securing and Trusting Internet Names, SATIN* (2012).

6. **FIELDING, R., AND ET AL.** Hypertext Transfer Protocol – HTTP/1.1. RFC 2616, June 1999.

7. **FIELDING, R., AND RESCHKE, J.** Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing. RFC 7230, June 2014.

8. **HERZBERG, A., AND SHULMAN, H.** Security of Patched DNS. In *Computer Security–ESORICS 2012*. Springer, 2012, pp. 271–288.

9. **HJELMVIK, E.** Packet Injection Attacks in the Wild. Available at: <https://www.netresec.com/?page=Blog&month=2016-03&post=Packet-Injection-Attacks-in-the-Wild>.

10. **HUFFAKER, B., PLUMMER, D., MOORE, D., AND CLAFFY, K.** Topology Discovery by Active Probing. In *Symposium on Applications and the Internet (SAINT)* (Jan 2002), pp. 90–96.

11. **ZIMMERMAN, P. T.** Measuring Privacy, Security, and Censorship through the Utilization of Online Advertising Exchanges. Tech. rep., Princeton University, June 2015.

12. **KEARNEY, R.** Comcast Caught Hijacking Web Traffic. Available at: <http://blog.ryankearney.com/2013/01/comcast-caught-intercepting-and-altering-your-web-traffic/>.

13. **KREIBICH, C., WEAVER, N., NECHAEV, B., AND PAXSON, V.** Netalyzr: Illuminating the Edge Network. In *Proceedings of the 10th ACM SIGCOMM Conference on Internet Measurement* (2010), pp. 246–259.

14. **LEGUAY, J., LATAPY, M., FRIEDMAN, T., AND SALAMATIAN, K.** Describing and Simulating Internet Routes. In *NETWORKING 2005*. Springer, 2005, pp. 659–670.

15. **LEVIS, P.** The Collateral Damage of Internet Censorship by DNS Injection. ACM SIGCOMM CCR 42, 3 (2012).

16. **MAO, Z. M., REXFORD, J., WANG, J., AND KATZ, R. H.** Towards an Accurate AS-Level Traceroute Tool. In *Proceedings of the Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications* (2003), pp. 365–378.

17. **MARZCAK, B., WEAVER, N., DALEK, J., ENSAFI, R., FI-FIELD, D., MCKUNE, S., REY, A., SCOTT-RAILTON, J., DEIBERT, R., AND PAXSON, V.** An Analysis of China’s “Great Cannon”. In *5th USENIX Workshop on Free and Open Communications on the Internet (FOCI 15)* (2015).

18. **MCCANNE, S., AND JACOBSON, V.** The BSD Packet Filter: A New Architecture for User-Level Packet Capture. In *Proceedings of the Winter USENIX Conference* (1993), USENIX Association.

19. **NCC, R.** RIPE Atlas. Available at: <https://atlas.ripe.net>.

20. **POSTEL, J.** Transmission Control Protocol. RFC 793, September 1981.

21. **REIS, C., GRIBBLE, S. D., KOHNO, T., AND WEAVER, N. C.** Detecting In-Flight Page Changes with Web Tripwires. In *NSDI* (2008), vol. 8, pp. 31–44.

22. **SIBY, S.** Default TTL (Time To Live) Values of Different OS. Available at: <https://subinsb.com/default-device-ttl-values>, 2014.

23. **SILVER, D., JANA, S., BONEH, D., CHEN, E., AND JACKSON, C.** Password Managers: Attacks and Defenses. In *23rd USENIX Security Symposium (USENIX Security 14)* (2014), pp. 449–464.

24. **TOPOLSKI, R.** NebuAd and Partner ISPs: Wiretapping, Forgery, and Browser Hijacking, June 2008. Available at: <http://www.freepress.net/files/NebuAd_Report.pdf>.

25. **TOUCH, J., MANKIN, A., AND BONICA, R.** The TCP Authentication Option. RFC 5925, June 2010.

26. **VERKAMP, J.-P., AND GUPTA, M.** Inferring Mechanics of Web Censorship Around the World. *Free and Open Communications on the Internet, Bellevue, WA, USA* (2012).

27. **WEAVER, N., KREIBICH, C., DAM, M., AND PAXSON, V.** Here Be Web Proxies. In *Passive and Active Measurement* (2014), Springer, pp. 183–192.

28. **WEAVER, N., SOMMER, R., AND PAXSON, V.** Detecting Forged TCP Reset Packets. In *NDSS* (2009).

29. **WEINSTEIN, L.** Google Hijacked – Major ISP to Intercept and Modify Web Pages. Available at: <http://lauren.vortex.com/archive/000337.html>.

30. **XU, X., MAO, Z. M., AND HALDERMAN, J. A.** Internet Censorship in China: Where Does the Filtering Occur? In *Passive and Active Measurement* (2011), Springer, pp. 133–142.

31. **ZHANG, C., HUANG, C., ROSS, K. W., MALTZ, D. A., AND LI, J.** In-Flight Modifications of Content: Who Are the Culprits. In *Workshop of Large-Scale Exploits and Emerging Threats (LEET11)* (2011).

### Ack Storm Due to TCP Injection

An "Ack storm" occurs when an injected segment causes the receiver to send an acknowledgment for data bytes that have not yet been sent by the peer. This acknowledgment is dropped by the peer, triggering it to resend an earlier ACK, which may, in turn, trigger a retransmission by the receiver. The retransmitted segment will again include an acknowledgment for the yet-to-be-sent sequence numbers, leading to a "ping-pong" exchange. If this continues long enough, the connection will time out and reset. This is often undesirable for the injector as it interferes with the flow of traffic on the connection. An "Ack storm" can subside if the peer eventually sends data bytes with sequence numbers corresponding to those of the forged data bytes injected by the third party.

### Injection Detection Algorithm

Algorithm 1 details the procedure for detecting packet races. This algorithm is executed by each worker process upon the receipt of a new packet. In the following, CP denotes the currently received packet, and S denotes the set of packets received so far as part of the session of CP. P(f) denotes the value of parameter f of packet P. If parameter f is a field of TCP or IP, it is denoted by the protocol and field names, e.g., P(IP total length) denotes the value of the Total Length field in the IP header of packet P. The algorithm returns True if and only if a race is detected.

```python
Input: CP, S
1 foreach OP in S do
2   if CP(t) - OP(t) > MaxIntervalTime then
3     continue;
4   end
5   CP(headers size) = CP(IP header length) + CP(TCP data offset)*4;
6   OP(headers size) = OP(IP header length) + OP(TCP data offset)*4;
7   CP(payload size) = CP(IP total length) - CP(headers size);
8   OP(payload size) = OP(IP total length) - OP(headers size);
9   CP(top sequence number) = CP(TCP sequence number) + CP(payload size);
10  OP(top sequence number) = OP(TCP sequence number) + OP(payload size);
11  if CP(top sequence number) > OP(TCP sequence number) then
12    if OP(top sequence number) > CP(TCP sequence number) then
13      bottom overlap = MAX(CP(TCP sequence number), OP(TCP sequence number));
14      top overlap = MIN(CP(top sequence number), OP(top sequence number));
15      if CP(TCP payload)[bottom overlap:top overlap] != OP(TCP payload)[bottom overlap:top overlap] then
16        return True;
17      end
18    end
19  end
20 end
21 return False;
```

To avoid false positives, we did not consider the following packets:
1. **Checksum errors** – Packets with checksum errors in the TCP or IP headers will clearly have different payloads than their retransmissions.
2. **TCP reset** – Reset packets can carry data payloads for diagnostic messages, which are not part of the regular session's byte stream.

### False Positives

There were numerous events where our monitoring system's race identification algorithm (described in Appendix B) identified a race that was not due to a forged packet injection. These events and their causes include:

- **Retransmissions with different content**: According to the TCP specification [27], the payload of retransmitted segments must have the same content as the original segment. However, in practice, retransmitted segments sometimes carry slightly different content due to:
  - **Load balancing**: Some websites serve HTTP requests using multiple servers. A front-end load balancer redirects requests based on server load. If the first HTTP response needs to be retransmitted, some load balancers might choose a different server, resulting in a different cookie value. Examples include wiley.com and rottentomatoes.com.
  - **Accept-Ranges HTTP header**: The HTTP 1.1 specification [15] allows clients to request portions of a resource using the Range header. We observed cases where a web server initially sent an HTTP response with 'Accept-Ranges: none' but retransmitted it with 'Accept-Ranges: bytes'. This happened when the retrieved resource spanned multiple TCP segments. Examples include sagemath.org and nih.gov.
  - **Non-standard HTTP headers**: Some web applications use non-standard HTTP headers (e.g., headers starting with 'x-'). Retransmissions of these responses sometimes have different values for these headers. For example, Amazon's S3 service includes 'x-amz-id-2' and 'x-amz-request-id' headers, which have unique values for each response, even if it is a retransmission.

- **Retransmissions with different sequence numbers**: For a few websites, we encountered sessions where a retransmitted TCP segment started with a sequence number offset by 1 compared to the original segment. This might be due to a bug causing unnecessary incrementation when a FIN segment was sent between the original and retransmitted segments. An example is www.knesset.gov.il.

- **Non-compliant TCP traffic**: Many TCP sessions over port 80 did not follow the standard 3-way handshake, had incorrect acknowledgments, and arbitrary flag settings. This led our system to flag many of these sessions as injected. Many of these sessions included unidirectional incoming traffic from hosting providers like GoDaddy and Amazon, possibly indicating communication attempts by a command and control server to its bots.

### Attempts to Mimic the Identification Values of the Legitimate Packet

We observed several failed attempts where the injecting entity tried to mimic the identification values of legitimate packets:

1. **Duplicate ID with a packet from the server**: Sometimes, the injecting entity copies the identification number of one of the packets already sent by the server, resulting in two IP packets from the server with the same identification number. This is highly unlikely without third-party intervention.
2. **Duplicate ID with a packet from the client**: Some injectors copy the identification value from the HTTP request packet that triggered the response. Since this packet is sent by the client, the identification values are independent of those sent by the server.
3. **Swapped bytes of an ID in packets coming from the client**: At least one injector swaps the two bytes of the copied identification value. For example, if the identification value of a packet from the client is 0xABCD, the injected packet will have 0xCDAB. This is likely due to a big endian/little endian confusion.

### Improved Mitigation Algorithm

Algorithm 2 details the proposed mitigation algorithm. The algorithm is executed upon the receipt of a new incoming packet – CP. As in Algorithm 1, S denotes the session of CP. P(f) denotes the value of parameter f of packet P. If parameter f is a field of TCP or IP, it is denoted by the protocol and field names, e.g., P(IP ID) denotes the value of the Identification field in the IP header of packet P.

The algorithm maintains a queue of packets suspected of being forged. The incoming packet is first checked against the suspicious packets for a race. If a race is detected, the suspicious packet is blocked. Afterward, the TTL of the incoming packet is compared against the average of TTL values of the previous packets received in the same session. If the difference is larger than 1, the packet is marked as suspicious. The packet is also marked as suspicious if its Identification value is higher than 5000 plus the Identification value of the previously received packet of the session or lower than that value minus 10. The rationale behind this comparison is that we generally expect the Identification values of the session to be monotonically increasing, except in cases of packet reordering.

If the packet is marked as suspicious, it is enqueued to the suspicious queue for 200ms. If the packet is not suspicious, the value of the average TTL and last ID are updated, and the packet is accepted.

```python
Input: CP, S
1 if Check Race(CP, S(Suspicious Queue)) then
2   Block suspicious packet;
3 end
4 Suspicious = False;
5 if abs(CP(IP TTL) - S(Average TTL)) > 1 then
6   Suspicious = True;
7 end
8 Lower ID Boundary = (S(Last ID) - 10) % 2^16;
9 Upper ID Boundary = (S(Last ID) + 5000) % 2^16;
10 if CP(IP ID) < Lower ID Boundary or CP(IP ID) > Upper ID Boundary then
11   Suspicious = True;
12 end
13 if Suspicious == True then
14   S(Suspicious Queue).append(CP);
15 end
16 else
17   Update S(Average TTL) with CP(IP TTL);
18   S(Last ID) = CP(IP ID);
19   Accept CP;
20 end
```

Note that a race will not be identified if the injected packet arrives after the legitimate one, as the legitimate packet will not be delayed, and once the injected packet is received, it will not be checked for a race against the legitimate one. Nonetheless, this does not compromise the security of the client since the content of the injected packet will not be accepted by the client's TCP layer.