# HR Agency 
* Category: Web
* 250 Points
* Solved by the JCTF Team
## Description
> Welcome to the HR agency!
> 
> You can updates your bio and personal details by the following link and credentials:
> 
> URL: https://hragency.appsecil.ctf.today/
> 
> Email: PI:EMAIL
> 
> Password: x!k_856hBM
> 
> Note: please don’t set your private used password, there are hackers that leaking our data.
## Hint
> NoSQL objectifying people!
## Solution
Using the provided credentials, we can login to an HR system which contains several personal details (Name, email, etc.).
The sources contain the following logic for personal information retrieval:
```javascript
    fetch("/api/getUserDetails", {
        method: 'post',
        body: JSON.stringify({"user_id":getCookie("user_id")}),
    })
    .then(res => res.json()).then(function(res) {
        if(!res.isSuccess) {
          $("#response").html(`${res.errorMessage}`)
          return
        }
        $("#firstName").val(res.first_name)
        $("#lastName").val(res.last_name)
        $("#email").val(res.email)
        $("#company").val(res.company)
        $("#job").val(res.job)
        $("#phone_number").val(res.phone_number)
        $("#address").val(res.address)
        $("#about").html(res.about)
    });
    document.querySelector('form').addEventListener('submit', event => {
        event.preventDefault();
        $("#response").html(`Currently unavailable!`)
    });
```
When logging in, the server sets two cookies:
```console
root@kali:/media/sf_CTFs/appsec/HR_Agency# curl 'https://hragency.appsecil.ctf.today/api/login' --data-raw '{"email":"PI:EMAIL","password":"x!k_856hBM"}' -q -v 2>&1 | grep cookie
 NoSQL objectifying people!
This hint sent us again towards NoSQL injection, but nothing seemed to work. At last, we realized that "objectifying" was pointing us towards the user-id, which in fact looks like a [MongoDB ObjectID](https://docs.mongodb.com/manual/reference/method/ObjectId/):
> * a 4-byte timestamp value, representing the ObjectId’s creation, measured in seconds since the Unix epoch
> * a 3-byte machine identifier
> * a 2-byte process id
> * a 3-byte counter, starting with a random value
Although there is some randomness in the object ID definition, it is quite predictable, especially if you already know a certain object ID. In our case, we have our own user-id, allowing us to easily try and guess other user-IDs.
We can use the [mongo-objectid-predict](https://github.com/andresriancho/mongo-objectid-predict) Python library for this, and script it all with the following script:
```python
from mongo_objectid_predict import predict
import requests