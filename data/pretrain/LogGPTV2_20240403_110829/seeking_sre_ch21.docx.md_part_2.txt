设计的"量子概率"阵营，因为我觉得它相当平衡风险。挑战在于如何定量设置它。SLO
是数据驱动的测量，SLO
的形成也应该是一个目标的、数据驱动的练习。很多时候，我看到百分位数和阈值从稀薄的空气（或不那么美味的地方）摘取，并积极管理；这种方法存在根本缺陷。
事实证明，需要相当多的数学（主要是统计学）才能真正理解和指导
SLO。事实上，太多的数学知识无法在如此简要的章节中深入讨论。话虽如此，我将尝试给出所需数学的最简洁的摘要。
 首先，概率密度函数 （PDF）
是一个函数，它将测量作为输入，并且给定样本具有该度量作为输出的概率。在我们的系统中，这些"函数"实际上是经验测量集。例如我对终结点进行了
100000 个 API
请求的延迟采样，我可以使用该数据来对以下问题进行大致回答："下一个请求的延迟为
1.2 毫秒的概率是多少？"PDF 善于回答这个问题。
PDF 还有个近亲，也就是累积密度函数 （CDF）。它只是 PDF
的积分（因此称为"累积"）。CDF
可以回答这个问题："下一个请求的延迟*小于（或大于)*1.2 ms 的概率是多少？"
概率范围从 0（nope） 到 1（当然），正如百分比范围从 0% 到
100%。百分位数（如第 99
百分位数）使用百分比作为术语；"数量"是同一回事，但它们使用概率作为术语。第
99 个百分位数是 0.99 分位数或*q(0.99)。*分位数函数只是到 CDF 的映射；在
CDF 的典型图形表示中，当 y 轴值为 0.99 时，我们询问什么是 x
轴值？[在#cdf_functiondot_0dot99_left_parenthesisy](#cdf_functiondot_0dot99_left_parenthesisy)中，*q(0.99)*（或第99百分位数）约为270。
![CDF 函数。0.99（y 轴）270（x
轴）](media/rId28.png){width="4.45484908136483in"
height="3.5016721347331585in"}
CDF 函数。0.99（y 轴）270（x 轴）
  通常，在算法方面会听到*正态分布*或*帕雷托分布*或*伽玛分布*，这些是不同的数学模型，表明您期望测量样本如何分布（[#common_pdfs_and_cdfs](#common_pdfs_and_cdfs)）。硬道理是，你几乎永远不会看到来自真实计算系统的正态分布；因为无法套用。事物有时看起来像伽玛分布，但计算机和计算机系统是复杂的系统，大多数样本分布实际上是几个不同分布模型的集成。更重要的是，你的模型通常不如实际数据重要。
![通用 PDF 和 CDF](media/rId29.png){width="4.782608267716536in"
height="4.983277559055118in"}
通用 PDF 和 CDF
 帕雷托分布可以用来对硬盘错误率和文件大小分布等内容进行建模。根据我的经验，由于服务速度太慢也被认为是一种错误，大多数
SLA 和 SLO 都是根据延迟期望值来表述的。我们跟踪服务的延迟，以通知外部
SLA 的定义，并评估我们内部 SLO 的性能。
# 直方图
  直方图允许我们在信息上将大量密集信息（延迟测量）压缩到相当小的空间量，同时保持询问数据分布的重要方面的能力（例如近似分位数值）。
在[#example_latency_histogram_for_data_servic](#example_latency_histogram_for_data_servic)，我们看到代表实际使用情况下延迟的秒数。x
轴以秒为单位，因此 1.0m 和 1.5m
的测量单位为千分之一（在这种情况下为毫秒）。 y
轴表示样本数。每个条形的区域表示一组样本，这些样本落入 x
轴上条形边界所描绘的等待时间范围内。在 x
轴下方，我们可以看到指示"分位数打包"的标记，显示*q(0)*（最小值），*q(0.25)*（第25百分位数）
，*q(0.5)*（中位数），*q(0.75)*（第75百分位数）。*q(1)*（最大值）在图表上不可见，因为分布的长尾部分位于图表视口的右侧之外。垂直线（m）表示分布的算术平均值（平均值）。[#example_latency_histogram_for_data_servic](#example_latency_histogram_for_data_servic)中的图表打包了！那里有大量的信息。
![数据服务请求的延迟直方图示例](media/rId31.png){width="4.672239720034995in"
height="1.8461537620297463in"}
数据服务请求的延迟直方图示例
在直方图的左侧，我们看到一个称为模式的峰值（A），它表示服务非常快（可能完全命中缓存），以及（A）和
1.0 ms
之间的分布，它们由几个不同的行为（B）、（C）和（D）组成。如果参考伽玛分布
PDF
图，则看起来有点像这些图形中几个相互堆叠在一起。此直方图中最大的样本实际上是在分布的长尾
（LT）右侧的"关闭"，但蓝色下框表示*p(100)（*我们的"最大值"）为 120
ms。分布具有复杂的累积模式和长尾分布，使简单的统计聚合（如最小数、最大值、中位数、平均值等）导致对基础数据的理解不足。
给定用于绘制此直方图（条形和样本计数）的数据，我们可以估计任意分位数（和反向分位数）和工作负载的更高级特征，如模态基数（直方图中的峰谷数）。
除了一些典型的第 99 百分位 SLA 外，我们可能还希望建立内部
SLO，其中规定针对此服务的请求应在 1
毫秒或更少数内完成。[#example_latency_histogram_for_data_servic](#example_latency_histogram_for_data_servic)中的直方图恰好包含1秒钟的样本，包含
60000
多个样本。如果你一直在查看数据随时间的"平均值"（恰好是垂直指标线），则这种
1 秒数据可视化应该是对系统行为现实的警醒。
围绕此服务设置 SLO
时，更具挑战性的问题是"对于大多数消费者来说，它的速度应该有多快？"该图应告知我们是否成功，但围绕服务的业务和技术要求应该是该问题的答案的驱动因素。在此特定情况下，这是一个数据检索
API，它所授权的应用程序已经协商，他们提出的 99% 的请求应该是 5
毫秒内的服务。对数据进行分析，前面的例子中 *q(0.99)* = 3.37 ms。
好极了！
# 百分位数的不足之处（和直方图的优点）
知道我们的 *q(0.99)* 是 3.37 毫秒，目前在
99％的概率下，我们的表现"超过"SLO 规定的 5
毫秒。但是，我们离边缘有多近？百分位数不会对此有所了解。比第99百分位样本慢的第一个样本可能是10毫秒还是（更）可能仍然小于
5
毫秒，目前我们不知道。此外，我们不知道我们的消费者中有多少百分比遭遇"缓慢"的表现。
谈到直方图的优点，有了待分析的整个直方图，我们实际上可以计算超出 5
毫秒合约的精确样本数。虽然你无法仅从可视化中判断，但通过基础数据可以计算出，99.4597%
的访问比 5 毫秒快，余下 0.5403% 的服务不尽如人意，即大约 60000
个样本中的 324
个。此外，我们可以调查这些"异常"样本的分布和蔓延情况。这是超越平均值、最小值、最大值甚至任意百分位数的能力。如果不衡量系统的行为，就无法理解系统的真实行为，也无法明智地思考它们。直方图也许是你武器库中最强大的工具。  
# 思路的不同：自底向上的分析 SLO
作为一个行业，我们任意选择百分位数和设置 SLO
的性能。应该有比这更充分的理由。如果你在*q(0.99)*进行测量，这真的是因为
1%
的消费者获得的低于标准的体验是令人满意的吗？这是你的团队和整个组织内部需要考虑和辩论的问题。
测量特定分位数，并围绕该特定分位数处的延迟构造 SLO
也是标准值。在这里，我相信业界可能会考虑反过来看待这个问题。1%
的消费者可以获得比理想性能更差的是什么？如果是 0.5% 或
0.1%，会更好些吗？当然会的。现在，您的绩效标准有什么特别要求？它是数据检索示例中的
5 毫秒（还是用户体验到的 250
毫秒）？如果速度更快会好一些吗？答案不是那么明显吗？谁会注意到这些问题？
鉴于此，我们不应围绕*q(0.99)*延迟建立 SLO，而应围绕 5 毫秒建立 SLO
并分析反向分位数：*q--1(5 ms)*？此函数的输出更有意义。前者只是告诉我们第
99 百分位数有多慢，而后者表示有多少人口达到或超过我们的绩效目标。
最终，SLO 应在你和潜在消费者的期望之间进行调节。SLO
只是你的团队表达这些期望的精确方式。使 SLO
与你的服务和客户相匹配；另一个组织的 SLO 可能对你没有任何意义。
SLO 的另一个优点是，通过超出
SLO，它们会定量地在预算中承担风险。当接近违反 SLO
时，风险相关的投入需要增加；否则，风向相关的投入可以减少；如果你有很大的空间，可以暂时不要管风险相关的事，可以放心投入创新！  
# 延伸阅读
-   Navidi, William. (2009). *Statistics for Engineers and
    Scientists*. New York: McGraw-Hill Education.
-   Limoncelli, Thomas A., et al. (2014). The Practice of Cloud System
    Administration: DevOps and SRE Practices for Web Services, Vol. 2.
    Boston: Addison-Wesley Professional. 
# 编者介绍
Theo Schlossnagle，他 20
年来一直在构建、编码、构建和操作可扩展系统。作为一名连续创业家，他创立了四家公司，并帮助建立了无数的工程组织。Theo
已经就软件、运营和许多与技术行业相关的基础问题进行了约 200 次演讲。