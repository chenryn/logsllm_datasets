### To
NULL  
0  
0,0  
0,1  
...  
49  
49,0  
49,1  
Attacker Master  
Slave1  
Master  
Slave1  
Victim  
Master  
Slave1  
...  
...  
Slave50  
Master  
Victim  
Slave50  
Slave50  
Master  
Entry function: 0x2b6cab44  
N/A: transfer(address,uint256)  
...  
N/A: transfer(address,uint256)  
Payload: 0x32  
Parameters: _to: Master, _amount: 1,000,000  
...  
Parameters: _to: Master, _amount: 1,000,000  
Type: call, create, call, suicide, ...  
Value: 0, 0, 0, 0, ...  
Status: Success, Success, Success (or Failed), Success, ...

### Explanation of Terms
- **Airdrop Hunting**: Airdrop hunting, as described in our running example (Section 2.1), involves the flow of tokens from the victim contract to the master controlled by the adversary.
- **Call Injection**: Call injection allows any contract, including adversaries, to call a sensitive function in a vulnerable contract. This is often used to change ownership and initiate ether or token transfers.
- **Reentrancy**: Reentrancy typically leads to repeated token or ether transfers from the victim to the adversary.
- **Integer Overflow**: Some integer overflow attacks target a variable recording the token amount owned by a victim, followed by the adversary transferring the overflowed amount. Other integer overflows, such as those causing denial-of-service, are out of scope.
- **Honeypot**: A honeypot lures a victim to transfer ethers or tokens with the promise of rewards but provides no actual payback.
- **Call-after-Destruct**: This involves invoking a function in a destructed contract with ethers, leading to the loss of these ethers. It differs from a suicidal attack, where an adversary exploits an unprotected interface and destroys the victim contract.

## 3. Methodology
In this section, we describe our measurement methodology.

### 3.1 Measurement Workflow
The overall workflow of our analysis, as shown in Figure 3, can be divided into four phases:
1. **Preparation Phase**:
   - Construction of action trees and result graphs from execution traces.
   - Manual generation of adversarial transaction signatures for different vulnerability types.
2. **Attack Analysis**:
   - Detection of both confirmed and attempted adversarial transactions using adversarial transaction signatures.
   - Matching the action clause against the action tree to find adversarial transactions.
   - Confirming them by matching the result clause against the result graph.
3. **Defense Analysis**:
   - Understanding why certain adversarial transactions fail.
   - Extracting code snippets that defend against adversarial transactions.
   - Finding more contracts that adopt these defenses via code similarity analysis.
4. **Evasion Analysis**:
   - Analyzing whether confirmed adversarial transactions can penetrate contracts with defense code.

### 3.2 Preparation Phase
In the preparation phase, we convert transaction execution traces into special representations, i.e., action trees and result graphs. We also generate adversarial transaction signatures for use in the attack analysis.

#### 3.2.1 Action Tree and Result Graph
We discuss the construction of two important representations: action trees and result graphs.

- **Action Tree**:
  - An ordered tree-like structure where each node is a contract and each edge is an action.
  - Actions include: `create`, `suicide`, and `call`.
  - Each action is annotated with the invoked function signature, function parameters, and trace address.

- **Result Graph**:
  - A graph-like structure where nodes are unique contracts and edges represent sensitive results (ether transfer, token transfer, ownership change).
  - Each edge is annotated with the number of transferred ethers or tokens if applicable.

- **Transaction-Centric Construction**:
  - Convert the execution traces of each transaction into action trees and result graphs.
  - Construct a transaction-centric action tree by following the initiating contract and all actions under it.
  - Construct a transaction-centric result graph by annotating the corresponding results from action raw traces and function parameters.

- **Contract-Centric Construction**:
  - Convert the execution traces of all transactions belonging to one contract.
  - Merge all transaction-centric action trees and result graphs to form a contract-centric representation.

#### 3.2.2 Adversarial Transaction Signature
We define and generate adversarial transaction signatures, which consist of two clauses: action and result.

- **Action Clause**:
  - A tree structure starting from a node C0, providing matching conditions for each level of the tree.
  - Example: In airdrop hunting, C0 has outgoing `create` edges, and second-level nodes eventually call a token transfer function.

- **Result Clause**:
  - A graph structure where nodes are from the action clause and edges provide corresponding matching conditions.
  - Example: In airdrop hunting, nodes C1 to Cn have outgoing edges to an arbitrary node, representing token transfers.

- **Signature Generation**:
  - Extract common nodes and edges (invariants) from existing adversarial transactions.
  - Human experts reason about the correctness of extracted invariants and adjust constraints based on attack semantics.

### 3.2.3 Signature Library
We list all our adversarial transaction signatures generated in our library based on the attack and signature type.

- **Transaction-Centric Signatures**:
  - **Call Injection**: A contract calls its own function, which proxies sensitive function calls. The result benefits the ancestor nodes.
  - **Reentrancy**: A contract calls another contract, which eventually calls back, involving at least one transfer function.
  - **Integer Overflow**: A contract calls a sensitive token transfer function with a large value, triggering the vulnerability.

- **Contract-Centric Signatures**:
  - **Honeypot**: A honeypot contract is created, set up, and accepts function calls from non-owner contracts. It then suicides and transfers collected ethers to the creator.
  - **Call-after-Destruct**: A contract suicides, and another contract still calls it with ether transfer, leading to the loss of ethers.

### 3.3 Attack Analysis Phase
Our attack analysis matches adversarial transaction signatures against action trees and result graphs of transaction execution traces. The analysis has two stages: action and result clause matching.

- **Action Clause Matching**:
  - Traverse through all nodes in the action tree.
  - Match the root node C0 and further levels.
  - If all levels match, the action tree matches the specific action clause.

- **Result Clause Matching**:
  - Confirm the adversarial transactions by matching the result clause against the result graph.

This structured approach ensures a comprehensive and systematic analysis of adversarial transactions and their effects.