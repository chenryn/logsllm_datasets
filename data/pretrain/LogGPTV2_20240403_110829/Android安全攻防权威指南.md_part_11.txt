### 2.3 深入理解各个层次

#### 2.3.1 应用层组件

- **Activity**
  Activity 是一种面向用户的应用组件或用户界面（UI）。基于 `Activity` 基类，它包含一个窗口及相关 UI 元素。Activity 的底层管理由 `Activity Manager` 组件处理，该组件还负责处理应用之间或应用内部用于调用 Activity 的 Intent。这些 Activity 在应用的 Manifest 文件中定义，例如：
  ```xml
  <activity android:name="com.yougetitback.androidapplication.ReportSplashScreen" />
  <activity android:name="com.yougetitback.androidapplication.SplashScreen" />
  ```
  在这里，可以指定样式/UI、屏幕方向等信息。`launchMode` 属性尤其重要，因为它影响 Activity 的启动方式。例如，`singleTask` 值表示在同一时间只能存在一个特定 Activity 实例，而不是每次调用时都启动一个新实例。如果当前已有该 Activity 实例，则会接收并处理新的 Intent。

- **Broadcast Receiver**
  Broadcast Receiver 是另一种类型的 IPC 端点，通常用于接收匹配特定标准的隐式 Intent。例如，若应用希望接收与短消息相关的 Intent，需在 Manifest 文件中注册一个 Receiver，并使用 Intent Filter 匹配 `android.provider.Telephony.SMS_RECEIVED` 动作。
  注意，Broadcast Receiver 也可以通过 `registerReceiver` 方法在运行时以编程方式注册，并且可以通过设置权限来限制哪些应用可以发送 Intent 至此端点。

- **Service**
  Service 是一类后台运行且无需用户界面的应用组件。常见的例子包括 `SmsReceiverService` 和 `BluetoothOppService`。尽管这些服务在用户不可见的情况下运行，但它们仍能利用 IPC 机制发送和接收 Intent。Service 必须在应用的 Manifest 文件中声明，例如：
  ```xml
  <service android:name="com.yougetitback.androidapplication.FindLocationService" />
  ```

- **Content Provider**
  Content Provider 用于提供数据访问接口。以下是一个简单的 Content Provider 定义示例：
  ```xml
  <provider
      android:name=".MyProvider"
      android:authorities="com.wiley.example.data"
      android:exported="false">
    <meta-data
        android:name="android.support.FILE_PROVIDER_PATHS"
        android:resource="@xml/file_paths"/>
  </provider>
  <permission
      android:name="com.wiley.example.permission.WRITE"
      android:protectionLevel="signature" />
  ```
  该应用声明了一个名为 `MyProvider` 的 Content Provider，并指定了只有携带自定义写权限的应用才能写入此 Provider。最后，它指明了 Provider 将采取动作的 authorities 或内容统一资源描述符 (URI)。

#### 2.3.2 Android 框架层

作为应用与运行时之间的桥梁，Android 框架层为开发者提供了执行通用任务的程序包及其类。这些任务可能包括管理 UI 元素、访问共享数据存储以及在应用组件间传递消息等。框架层中的通用包位于 `android.*` 名字空间中，如 `android.content` 或 `android.telephony`。此外，Android 还提供了许多 Java 标准类（位于 `java.*` 和 `javax.*` 名字空间）及第三方库，如 Apache HTTP 客户端库和 SAX XML 解析器。

表 2-1 列出了部分框架层服务及其角色：

| 框架层服务       | 描述                                                     |
|------------------|----------------------------------------------------------|
| ActivityManager  | 管理 Intent 解析与目标、应用/Activity 启动等               |
| View System      | 管理 Activity 中的视图（用户可见的 UI 组合）                |
| PackageManager   | 管理系统上已安装或正在安装的程序包相关信息                   |
| TelephonyManager | 管理电话服务、无线电状态、网络与注册信息等相关信息与任务     |
| ResourcesManager | 为图形、UI 布局、字符串数据等非代码应用资源提供访问         |
| LocationManager  | 提供设置和读取位置信息（GPS、手机、Wi-Fi）的接口           |
| NotificationManager | 管理不同事件通知，如播放声音、震动、LED 闪灯等              |

#### 2.3.3 DalvikVM

DalvikVM 是一种基于寄存器而非栈的虚拟机。虽然其语法类似于 Java，但它并非 Java 虚拟机。开发流程如下：
1. 开发者以类似 Java 的语法进行编码；
2. 源代码被编译成 `.class` 文件；
3. 类文件被转换为 Dalvik 字节码；
4. 所有类文件被合并为一个 Dalvik 可执行文件（DEX）；
5. 字节码被 DalvikVM 加载并解释执行。

DalvikVM 设计针对嵌入式系统的约束（如内存小和处理器速度慢），因此注重速度和效率。为了提高性能，DEX 文件在首次加载时会进行优化，生成优化后的 DEX 文件（ODEX）。需要注意的是，ODEX 文件不具备跨版本或跨设备移植性。

#### 2.3.4 用户空间原生代码层

操作系统用户空间内的原生代码构成了 Android 系统的重要部分，主要包括程序库和核心系统服务。

- **程序库**
  许多底层功能通过共享库实现，并通过 JNI 访问。一些知名的开源项目如 SQLite、Webkit 和 FreeType 也被广泛使用。供应商特定的库保存在 `/vendor/lib` 或 `/system/vendor/lib` 目录下，而非厂商特定的库则保存在 `/system/lib` 目录下。常见的库包括：
  - `libexif`：JPEG EXIF 格式处理库。
  - `libexpat`：Expat XML 解析器。
  - `libaudioalsa/libtinyalsa`：ALSA 音频库。
  - `libbluetooth`：BlueZ Linux 蓝牙库。

以上是对 Android 系统各层次的深入理解，接下来我们将探讨如何发现和攻击这些 IPC 端点。