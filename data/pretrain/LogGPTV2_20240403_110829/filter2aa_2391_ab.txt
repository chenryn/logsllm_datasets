### Event Log Entries and PowerShell Remoting

**EID 7937: Command Write-Output is Started.**
- **Description:** The `Write-Output` command has been initiated.

**EID 7937: Command dropper.exe is Started**
- **Description:** The `dropper.exe` command has been initiated.
- **Note:** These events are specific to PowerShell 3.0 or later versions.
- **Question:** What was executed? (Arguments not logged)

**Remoting (Accessed Host) - Event ID 25**

**PowerShell Events:**
- **EID 600:** The WSMan provider has been started.
- **EID 400:** The engine state has changed from `None` to `Available`.
- **Indication:** This indicates the start of a PowerShell session and the use of PowerShell remoting.

**Remoting (Accessed Host) - Event ID 26**

**WinRM Operational Events:**
- **EID 81:** Processing client request for operation `CreateShell`.
- **EID 169:** User `CORP\MattH` authenticated successfully using NTLM.
- **EID 134:** Sending response for operation `DeleteShell`.
- **Indication:** Identifies who connected via remoting and the timeframe of the remoting activity.

**Remoting (Accessed Host) - Event ID 27**

**PowerShell Analytic Events:**
- **EID 32850:** Request 7873936. Creating a server remote session. `UserName: CORP\JohnD`.
- **EID 32867:** Received remoting fragment. Payload Length: 752. Payload Data: `0x020000000200010064D64FA51E7C78418483DC[…]`.
- **EID 32868:** Sent remoting fragment. Payload Length: 202. Payload Data: `0xEFBBBF3C4F626A2052656649643D223E3[…]`.
- **Indication:** Identifies who connected via remoting and provides encoded contents of remoting I/O.

**PS Analytic Log: Encoded I/O - Event ID 28**
- **Command:** `Invoke-Command {Get-ChildItem C:\}`

**PS Analytic Log: Decoded Input - Event ID 29**
- **Command:** `Invoke-Command {Get-ChildItem C:\}`

**PS Analytic Log: Decoded Output - Event ID 30**
- **Command:** `Invoke-Command {Get-ChildItem C:\}`

### Logging Solutions for PowerShell

**Set Global Profile to Log Console Command Activity:**
- **Location:** `%windir%\system32\WindowsPowerShell\v1.0\profile.ps1`
- **Use Start-Transcript Cmdlet:**
  - **Function:** Records all session input/output to a text file.
  - **Overwrite Default Prompt Function:**
    - **Function:** Intercepts commands and adds them to the event log.
    - **Limitation:** Works only for local PowerShell execution.
    - **Note:** PowerShell can be run without loading profiles.

**Other Logging Solutions for PS 2.0:**
- **AppLocker – Script Rules:**
  - **Function:** Provides additional logging and control over script execution.

**PowerShell 3.0: Module Logging:**
- **Configuration Path:**
  - **Computer Configuration → Administrative Templates → Windows Components → Windows PowerShell → Turn on Module Logging**
  - **Benefit:** Solves most logging problems.

**Module Logging Examples:**
- **Event ID 34:**
  - **Parameter Binding (Get-ChildItem):**
    - `name="Filter"; value="*.txt"`
    - `name="Recurse"; value="True"`
    - `name="Path"; value="c:\temp"`
  - **Parameter Binding (Select-String):**
    - `name="Pattern"; value="password"`
    - `name="InputObject"; value="creds.txt"`
  - **Command Name:** `Get-ChildItem`
  - **User:** `CORP\MHastings`
  - **Parameter Binding (Out-Default):**
    - `name="InputObject"; value="C:\temp\creds.txt:2:password: secret"`
    - `name="InputObject"; value="C:\temp\creds.txt:5:password: test"`

**Logged upon Command Execution:**
- **Microsoft-Windows-PowerShell/Operational (EID 4103):**
  - **Command:** `Get-ChildItem c:\temp -Filter *.txt -Recurse | Select-String password`

**Logged upon Command Output:**
- **Command:** `Get-ChildItem c:\temp -Filter *.txt -Recurse | Select-String password`

**Module Logging Examples - Event ID 35:**
- **Command:** `Invoke-Mimikatz.ps1 via remoting`
- **Detailed "per-command" logging.**

**Mimikatz Output in Event Log:**
- **Persistence:**
  - **Scenario:** Attacker configures the system to load malicious PowerShell scripts upon startup/logon.
  - **Why Persist?**
    - **Backdoors**
    - **Keyloggers**
  - **Common PowerShell Persistence Mechanisms:**
    - **Registry "autorun" keys**
    - **Scheduled tasks**
    - **User "startup" folders**
  - **Detection:**
    - **Autorun review**
    - **Registry timeline analysis**
    - **File system timeline analysis**
    - **Event log review**

**Persistence via WMI:**
- **WMI Objects:**
  - **Namespace:** `root\subscription`
  - **EventFilter:**
    - **Filter name, event query**
  - **CommandLineEventConsumer:**
    - **Consumer name, path to powershell.exe**
  - **FilterToConsumerBinding:**
    - **Filter name, consumer name**

**Event Filters:**
- **Query Example:**
  - **Run within minutes of startup:**
    - `SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325`
  - **Run at 12:00:**
    - `SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_LocalTime' AND TargetInstance.Hour = 12 AND TargetInstance.Minute = 00 GROUP WITHIN 60`

**Event Consumers:**
- **Launch `PowerShell.exe` when triggered by filter:**
  - **Where does the evil PowerShell code load from?**
    - **Stored in user or system-wide "profile.ps1"**
    - **Example Command:**
      ```powershell
      sal a New-Object; iex(a IO.StreamReader((a IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String('7L0HYBxJliUmL23Ke39K9UrX4HShCIBgEyTYkEAQ7MGIzeaS7B1pRyMpqyqBymVWZV1mFkDM7Z28995777333nvvvfe6O51OJ/ff/z9cZmQBbPbOStrJniGAqsgfP358Hz8ivlsXbb795bpdrdv0o2/nZVml363qcvbR/xMAAP//'),[IO.Compression.CompressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd()
      ```
    - **Set-WmiInstance:**
      ```powershell
      Set-WmiInstance -Namespace "root\subscription" -Class 'CommandLineEventConsumer' -Arguments @{ name='TotallyLegitWMI'; CommandLineTemplate="$($Env:SystemRoot)\System32\WindowsPowerShell\v1.0\powershell.exe -NonInteractive"; RunInteractively='false'}
      ```

**Enumerating WMI Objects with PowerShell:**
- **Commands:**
  - `Get-WMIObject –Namespace root\Subscription -Class __EventFilter`
  - `Get-WMIObject -Namespace root\Subscription -Class __EventConsumer`
  - `Get-WMIObject -Namespace root\Subscription -Class __FilterToConsumerBinding`

**PS WMI Evidence: File System:**
- **WBEM Repository Files:**
  - **Changed (common)**
  - **Profile.ps1:**
    - **Global or per-user "profile.ps1" changed (if used to store code)**
  - **Strings in "objects.data"**

**PS WMI Evidence: Registry:**
- **Key:**
  - `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\ESS\//./root/CIMV2\Win32ClockProvider`
  - **Key Last Modified:**
    - `06/04/14 01:30:03 UTC`
  - **Created only when setting a time-based WMI filter (many other types of triggers may be used)**

**PS WMI Evidence: Other Sources:**
- **SysInternals AutoRuns (v12):**
  - **Memory: WMI filter & consumer names**
  - **svchost.exe (WinMgmt service)**
  - **WmiPrvse.exe**
  - **Event logs: WMI Trace**
  - **Too noisy**

### Conclusions

- **Refer to the whitepaper for more details.**
- **Prefetch file for "PowerShell.exe":**
  - **Local execution only**
  - **Scripts in Accessed File list**
  - **Registry**
  - **PowerShell "ExecutionPolicy" setting**
  - **Network traffic analysis (WinRM)**
    - **Port 5985 (HTTP) / port 5986 (HTTPS)**
    - **Payload always encrypted**
    - **Identify anomalous netflows**

### Lessons Learned

- **Upgrade to PS 3.0 and enable Module Logging if possible.**
- **Baseline legitimate usage in the environment:**
  - **ExecutionPolicy setting**
  - **Remoting enabled**
  - **Script naming conventions, paths**
  - **Which users**
  - **Source systems**
  - **Destination systems**
  - **Recognize artifacts of anomalous usage**

### Acknowledgements

- **Matt Graeber**
- **Joseph Bialek**
- **Chris Campbell**
- **Lee Holmes**
- **David Wyatt**
- **David Kennedy**
- **Josh Kelley**
- **All the other PowerShell authors, hackers, and researchers!**

**Questions?**
- **Contact:**
  - **Email:** PI:EMAIL
  - **Twitter:** @ryankaz42, @HastingsVT

© Mandiant, A FireEye Company. All rights reserved.