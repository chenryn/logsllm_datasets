observed, however, that there is little performance enhance-
ment from verifying FVDS with smaller primes: except in
the case of very large (4096-bit moduli) keys, the cost of sev-
′
eral modular reductions (s
mod c) followed
by 1 small mod-squaring and 2 small mod-mults outweighs
the cost of 1 full mod-squaring and 2 full mod-mults.2
3.2 Signature-based client authentication with
, and h
, n
, t
′
′
′
client puzzles
We have integrated our proposed client puzzle scheme
(Section 2) with the FVDS scheme to develop a client au-
thentication protocol that resists DoS attacks. The main
bene(cid:12)t of this tight integration is to provide gradual au-
thentication at reduced cost.
summarizes the proposed protocol.
We now discuss the proposed scheme in detail; Figure 3
(cid:15) Setup. Each client obtains a FVDS public-key / private-
key pair using the KeyGen algorithm, and each server
obtains an authentic copy of each client’s public key.
(cid:15) Periodic precomputation. A defending server periodi-
cally selects a secret K, generates NS and sets puzzle
2Where this tradeo(cid:11) point appears depends on the degree of
optimization in the implementation. While our implemen-
tation may not achieve the performance extremes of highly-
optimized hand-coded assembly, we believe our implementa-
tion re(cid:13)ects the performance one might expect from a practi-
cal real-world implementation since the modular arithmetic
is a widely used, well-developed, mature, and fairly opti-
mized code base.
118
32-bit i386 build
modulus
RSA
(bits)
1024
1536
2048
4096
e = 65537
full verify
14013
6782
3949
1013
112690
68165
52036
20688
FVDS
32-bit c
79502
72252
55838
42650
128-bit c
e = 65537
RSA
70543
59412
50534
33557
29726
14947
8844
2354
full verify
64-bit x86 64 build
FVDS
32-bit c
108950
94707
84319
58393
180938
122558
103962
46532
128-bit c
95268
81212
71418
47481
Table 1: Signature veri(cid:12)cation performance in operations per second (OpenSSL 1.0.0 (modi(cid:12)ed), Intel Core
2 Duo 2.53GHz T9400, one core).
di(cid:14)culty parameters as (Q, D), based on the availabil-
ity of system resources.
(cid:15) Challenge. When a server receives a request, it issues
the tuple (Q, D, NS) along with a uniquely generated
challenge Z. Here Z is a client-dependent string com-
puted as Z = HK (NS, Q, D, IDC ) where IDC is the
client’s identity.
(cid:15) Solution and client authentication. Upon receipt of
(NS, Q, D, Z), the client (cid:12)rst generates a nonce NC ,
sets M   ZjjNSjjNCjjIDSjjIDC and (cid:12)nds a value X
such that H(M, X) mod 2Q (cid:20) D. That is, clien-
It sets
t (cid:12)nds a solution to the associated puzzle.
h   H(M, X) and computes an FVDS signature σ  
(X, h, f, t, s) on the string M . It (cid:12)nally sends NS, NC ,Z
along with the computed FVDS signature σ to the
server.
(cid:15) Veri(cid:12)cation. First the server checks if NS is recen-
t and NC exists in the list of successfully completed
connections. Then it performs the reachability test by
recomputing Z and matching it with the received one.
Finally, the server sets M   ZjjNSjjNCjjIDSjjIDC
and veri(cid:12)es the FVDS signature σ = (X, h, f, t, s) on it
by (cid:12)rst checking if h ?= H(M, X) and h mod 2Q (cid:20) D
and then s2 ?= f (cid:1) h + t (cid:1) n. If none of the above checks
fails, then the server authenticates the client. Other-
wise it sends service failure to client.
Note that clients do not have to solve puzzles unless the
server is under attack. Therefore, when there is no DoS
attack, the server in key establishment protocols can imme-
diately engage in a signature-based authentication by setting
the puzzle di(cid:14)culty Q to 0. In this case, any random value
of X is accepted as a solution of a given puzzle.
Implementation. In order to see if the proposed client au-
thentication scheme is a good DoS countermeasure, we car-
ried out performance evaluations as in Section 3.1. For this
experiment we modi(cid:12)ed OpenSSL version 1.0.0 to support
signature-based client authentication scheme using the built-
in big-integer operations, and compared the performance of
this scheme with the built-in RSA implementation. Our re-
sults are presented in Table 2.
The experiment for the FVDS-based client authentication
scheme is very similar to the one described in Section 3.1.
The only di(cid:11)erence between the two experiments is a hash
operation being performed for puzzle veri(cid:12)cation in addition
to RSA signature veri(cid:12)cation. Note that results for FVDS
in Table 1 and Table 2 are the same as the hash operation
is already a part of FVDS signature veri(cid:12)cation.
Our FVDS-based client authentication scheme signi(cid:12)cant-
ly outperforms an RSA-based scheme; for example, for a
119
4096-bit modulus, a 32-bit computer can do 20 times as
many FVDS-based protocol runs compared to RSA-based
protocol runs. Our technique facilitates counterbalancing
computational expenditure by requiring clients to perform
more work and servers to perform signi(cid:12)cantly less work,
thereby enabling the server to process more requests. Per-
formance results in Table 2 demonstrate that our suggested
method can speed up the client authentication process by a
factor of between 6 to 20, depending on the RSA key size.
In defense against DoS attacks, this improvement is con-
siderable. Note that the speed up factor increases as the
RSA key size increases even with the (cid:12)xed public exponent.
Therefore, our scheme is more favourable for future security
levels.
Moreover our FVDS-based client authentication technique
can be adapted to work with any network protocol to miti-
gate DoS attacks e(cid:11)ectively. To show its promising perfor-
mance when adapted in a security protocol, we implement-
ed the proposed FVDS-based client authentication scheme
in the OpenSSL open source cryptographic library [29] for
use in the SSL protocol. Our results imply that the pro-
posed scheme is a promising and useful companion tool for
SSL client puzzles in defense against DoS attacks. More de-
tails on this experiment and its results are provided in the
following section.
4. DOS RESISTANCE IN SSL
The Secure Sockets Layer (SSL) protocol does not o(cid:11)er
any built-in denial of service resistance features. Given its
wide-spread deployment on the Internet, and that a server
can be directed to do expensive operations with a single
simple message from the client, it presents a denial of service
risk. Our focus is on mutual authentication in SSL, where
both clients and servers authenticate themselves.
We have modi(cid:12)ed the SSL protocol in two ways to improve
its denial of service resistance. The main modi(cid:12)cation we
have made is the implementation of a cipher suite involving
the FVDS protocol from Section 3.2. In order to evaluate
the e(cid:11)ectiveness of this new cipher suite, we implemented
an alternative client puzzle mechanism and analyzed various
attack scenarios.
There are a number of di(cid:11)erent DoS attack strategies open
to an adversary. The most obvious attack is simply to send
garbage for both the puzzle solution and the signature. The
server will then check the puzzle solution and, in most cas-
es, veri(cid:12)cation will fail and the connection will be aborted.
A more sophisticated attack is when the adversary spends
computational e(cid:11)ort in solving the puzzle but sends garbage
for the signature.
In this case the server will check both
puzzle and signature before aborting the connection. This
latter strategy will bene(cid:12)t most from our FVDS solution
Client (C)
Select (p; q)
Compute n = p:q
Secret: p and q
Public: n
Generate NC and
Set M   ZjjNSjjNCjjIDSjjIDC
(1) Solving the puzzle
Find X such that
H(M; X) mod 2Q (cid:20) D
(2) Generating signature (cid:27)
Generate (cid:27)   (X; h; f; t; s)
where h   H(M; X) and
s2   f (cid:1) h + t (cid:1) n:
Server (S)
Setup phase
Select a secret K, and
generate a nonce NS .
Pick the puzzle di(cid:14)culty level Q
and an Q-bit integer D.
Compute Z   HK (NS ; Q; D; IDC )
Connection phase
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
Request
 (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
Z; NS ; Q; D
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! Check if (NS ; Q; D) is recent
Z; NS ; NC ; (cid:27)
and NC is not reused.
?
= HK (NS ; Q; D; IDC )
Check if Z
Set M   ZjjNSjjNCjjIDSjjIDC
(1) Verifying the puzzle solution
Check if h
h mod 2Q (cid:20) D
?
= H(M; X) and
(2) Verifying the signature (cid:27)
Check if s2 ?
= f (cid:1) h + t (cid:1) n:
Figure 3: DoS resistant authentication with fast veri(cid:12)cation signatures and hash-based puzzles
Record NC as used.
S authenticates C only if
none of the above checks fails.
S may now commit its resources.
32-bit i386 build
64-bit x86 64 build
modulus
RSA (e = 65537)
(bits)
1024
1536
2048
4096
with GPuz
13970
6757
3943
1011
FVDS (full verify)
with built-in puzzle
RSA (e = 65537)
with GPuz
FVDS (full verify)
with built-in puzzle
112690
68165
52036
20688
29630
14891
8710
2354
180938
122558
103962
46532
Table 2: Performance of client authentication with puzzle veri(cid:12)cation in operations per second (OpenSSL
1.0.0 (modi(cid:12)ed), Intel Core 2 Duo 2.53GHz T9400, one core).
120
and we can expect the 6 to 20 times improvement reported
in Section 3.2. In the experiments described in this section
we concentrate on the former attack strategy. More modest
gains can be expected because the faster signature will be
only one part of the overall computation at the server.
4.1 Overview of SSL
The SSL protocol has two main components; the Hand-
shake protocol and the Record Layer protocol. The goal
of the Handshake protocol is to negotiate a common cipher
suite for an SSL client and server, authenticate each other,
and establish a shared master secret using public-key cryp-
tographic algorithms.
We now brie(cid:13)y explain how the SSL handshake protocol
establishes a master secret key and checks authentication.
An overview of the messages in the SSL handshake protocol,
including our modi(cid:12)cations, appears in Figure 4.
Our focus is on RSA-based key transport cipher suites.
The client initiates a session by sending a ClientHello mes-
sage to the server. The server responds with a ServerHello
message and sends a ServerCertificate message contain-
ing the server’s RSA public key and other information. The
client picks a random pre-master secret key, encrypts it un-
der the server’s RSA public key, and sends it in the Clien-
tKeyExchange message; it also sends a ClientCertificate
message containing its certi(cid:12)cate. The server decrypts the
pre-master secret and both parties derive the master secret
key by hashing the pre-master secret with the transcript.
The parties then exchange Finished messages to provide
authentication: the client signs a transcript of messages us-
ing its signing key, while the server hashes a transcript of
messages under a key derived from the master secret key.
The master secret key is also used to derive encryption keys
for a symmetric cipher, which are then used to protect ap-
plication data transmitted in the Record protocol.
In the above RSA-based handshake, the server must per-
form one RSA private key operation { decrypting the pre-
master secret { and one public key operation { verifying the
client’s signature; depending on how client certi(cid:12)cates are
managed, the server may also need to perform public key
operations to validate the client’s certi(cid:12)cate.