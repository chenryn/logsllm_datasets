should appear. It will include an Environment Variables button that will display
another dialog box allowing you to edit the environment variables. Edit the Path vari-
able either under System Variables or User Variables. Make sure the path you add is
separated from the other paths by a semicolon (;).
Mac OS
There are multiple ways to edit your PATH on Mac OS. You can open the /etc/paths
file (as root using sudo nano /etc/paths or via your favorite editor) and append the
Nim bin path to the bottom. Alternatively, you can edit the ~/.profile file and add
export PATH=$PATH:/home/user/path/to/Nim/bin to the bottom.
Linux
If you want the change to be system-wide, you can edit the /etc/profile file. To make
Nim available only for your user, you can edit the ~/.profile file. In both cases you
should add export PATH=$PATH:/home/user/path/to/Nim/bin to the bottom of
those files. 
Licensed to   
287
Testing your new development environment
B.2
Installing the Aporia IDE
The installation of Aporia is entirely optional. Aporia integrates with the Nim com-
piler, so it makes experimenting with Nim easier. With Aporia, you’ll be able to
compile and run Nim source code by pressing the F5 key on your keyboard. Later in
this section, you’ll also learn how to compile Nim source code using the command
line, so you won’t miss out by using a different source code editor.
 Releases of Aporia can be downloaded from GitHub, and you’ll find detailed instruc-
tions on how to install it on your OS here: https://github.com/nim-lang/Aporia#readme.
 There are also other editors that can be used instead of Aporia. For example,
Visual Studio code with the Nim plugin is another good choice, especially for Mac OS
users. For a full list, see the following Nim FAQ answer: https://nim-lang.org/faq
.html#what-about-editor-support. 
B.3
Testing your new development environment
You should now have a basic Nim development environment set up. This setup should
include the Nim compiler and may also include Aporia or a different source code edi-
tor that supports Nim syntax highlighting.
 You can test your new environment with a simple Nim Hello World program.
 Open your source code editor and type in the following short piece of code.
echo "Hello World!"
Save the file as hello.nim. Then, open a new terminal in the directory that contains
the file you just saved, and execute nim c -r hello.nim. This command will compile
the hello.nim file you’ve written, generating as output a brand-new binary file (the c
subcommand stands for compile). Once the compilation finishes, the binary will be
executed, as specified by the -r option (which stands for run).
Listing B.1
Hello World
Nim command syntax
The Nim command syntax takes the form of nim command [options] projectFile
.nim, where the options are optional. The following table shows some common Nim
commands. 
Command
Description
c, compile
Compiles the projectFile.nim file and all its dependencies into an executable 
using the default backend (C).
cpp
Compiles the projectFile.nim file and all its dependencies using the C++ back-
end. The result is an executable.
js
Compiles the projectFile.nim file and all its dependencies using the JavaScript 
backend. The result is a JavaScript file.
check
Parses the projectFile.nim file and checks it for errors, displaying all the errors found.
Licensed to   
288
APPENDIX B 
Installing Nim
APORIA
In Aporia, you can simply press F5 to compile and run your pro-
gram. You don’t even have to save it manually!
At this point, if you’ve followed along and performed these steps yourself (I strongly
encourage you to do this!), you may be wondering what to make of all the messages
being output to your screen. These messages come from the Nim compiler. By
default, the Nim compiler displays information about which modules it’s currently
processing to notify you of its progress. Other information includes warnings, errors,
and other messages triggered by your source code. The following listing shows a sam-
ple of output from the Nim compiler.
config/nim.cfg(54, 3) Hint: added path: '~/.nimble/pkgs/' [Path]
Hint: used config file '~/nim/config/nim.cfg' [Conf]
Hint: system [Processing]
Hint: hello [Processing]
CC: hello
CC: stdlib_system
[Linking]
Hint: operation successful (9407 lines compiled; 1.434 sec total;
➥14.143MB; Debug Build) [SuccessX]
/Users/dominikp/nim-in-action/examples/hello
Hello World!
You’re probably surprised at just how short the Hello World example is. In compari-
son to other programming languages like C, Nim doesn’t require a main function,
which drastically reduces the amount of code needed for this example. In Nim, top-
level statements are executed from the top of the file to the bottom, one by one.
WARNING: PERFORMANCE
Top-level statements are generally harder to opti-
mize for the compiler. To get maximum performance, use a main procedure
and compile with the -d:release flag.
Listing B.2
Compiler output
(continued)
For a full list of commands, execute nim --help and nim --advanced. When you’re
compiling with the C/C++ backends, passing in the -r flag will run the resulting
executable after compilation. Arguments to this executable can be passed after the
projectFile.nim param: nim c -r projectFile.nim arg1 arg2.
Added Nimble packages to 
its module search path
Used a config file located
in ~/nim/config/nim.cfg
Parsing and compiling the system module to C
Using a C compiler to compile the 
hello module to a binary format
Executing the resulting binary 
located at that file path
Output from the resulting 
binary’s execution
Licensed to   
289
Troubleshooting
Congratulations! You’ve successfully written your first Nim application. More impor-
tantly, you have successfully set up a Nim development environment and are now
ready to begin learning the basics of the Nim programming language. 
B.4
Troubleshooting
This section identifies some problems that you may run into during the installation of
Nim, and provides solutions. This is certainly not a complete list, and I invite you to
consult the following website, which I’ll be keeping up to date, with solutions to other
problems that various users run into: https://github.com/dom96/nim-in-action-
code/wiki/Installation-troubleshooting.
 Please get in touch if you run into a problem that isn’t described in this section or
on the website. Instructions for getting in touch are available in appendix A.
B.4.1
Nim command not found
If you attempt to execute nim -v (or similar), and you see a message such as this,
command not found: nim
the likely problem is that you haven’t successfully added Nim to your PATH. Ensure
that the directory you added to your PATH contains the nim binary. You may need to
restart your terminal for the PATH changes to take effect.
 Another diagnosis tool you can use is displaying the contents of the PATH environ-
ment variable using echo $PATH on Unix or echo %PATH% on Windows. 
B.4.2
Nim and C compiler disagree on target architecture
This problem manifests in an error that looks something like this:
error: 'Nim_and_C_compiler_disagree_on_target_architecture'
➥declared as an array with a negative size
Usually the problem is that your Nim compiler’s architecture isn’t the same as your C
compiler’s. For example, this can mean that the C compiler targets 32-bit CPUs,
whereas Nim targets 64-bit CPUs, or vice versa.
 To solve this issue, you can either ensure that a C compiler that targets the correct
architecture is in your PATH, or you can build a Nim compiler that targets the other
architecture. This is usually a problem on Windows, and you just need to use
build32.bat instead of build64.bat, or vice versa. 
B.4.3
Could not load DLL
This issue usually presents itself when you’re executing a Nim application, either your
own or one of the Nim tools like the Nimble package manager.
 You might see a variation of the following error when executing the application:
could not load: (ssleay64|libssl64).dll
Licensed to   
290
APPENDIX B 
Installing Nim
This error means that the application can’t find a DLL that it depends on to execute.
In the preceding case, the missing DLL is used for secure socket connections via the
TLS or SSL protocols, such as HTTPS.
 This is usually an issue only on Windows. Mac OS and Linux typically already have
these dependencies installed.
 The solution is to download or install the missing DLLs. Unfortunately, on Win-
dows it’s not easy to find them online, and the Nim distribution might not include
them. That said, the Nim website does usually have a link to download them. Look for
them here: https://nim-lang.org/install.html. After downloading them, place them
somewhere in your PATH or beside your executable file.
 For Linux and Mac OS, you should be able to use a package manager to install
them if they’re missing. 
Licensed to   
291
Symbols
_ (underscore character) 8, 
32, 51, 171
, (comma) character 36
; (semicolon) character 24, 
286
: (colon) character 31
: symbol 124
!= operator 255
!$ operator 114
. (dot) character 52
.. operator 124
" (double-quote) character
29, 66
( ) (parentheses) 116
[] (square brackets) 69, 159
{:} syntax 78, 113
@ character 135, 139, 216
* operator 43, 72, 103
/ operator 118–119, 165
\ (backward-slash) character
28–29
\n (newline escape sequence)
28, 168
\r (carriage return) 28
& (ampersand) character 201
# (hash) character 25
% operator 78–79
` (backtick) character 33, 202
^ operator 68, 124, 158
+ operator 110, 213, 264
= (equals) character 36, 125
=~ operator 259
| operator 9
~ character 286
$ operator 31, 78–79, 93, 110, 
170, 202
$! operator 207, 209
Numerics
80 port 219
404 error 216, 218
5000 port 219
7687 port 96
A
abstract syntax tree. See AST
accept procedure 83–84, 91
acceptAddr variant 92
add procedure 110, 123, 140
addr keyword 234
advantages of Nim 12–20
catches errors ahead of 
time 18
efficient 13
flexible 16–18
readable 13–14
stands on its own 14–15
algorithm module 127
algorithms 111–117
allocShared procedure 174
ampersands 201
anonymous procedures
38–39
Aporia IDE
installing 287
overview 282
application-level package 
managers 130
architecture
of chat applications 58–61
client components 60–61
finished product 58–61
network architectures
59–60
network models 59–60
server components 60–61
of web applications
181–186
routing in microframe-
works 183–184
Tweeter 185–186
archives, for compiler
downloading 284
extracting 284–285
moving to safe location
284–285
arguments
command-line 122–126
in macros 266–267
array type 39
arrays, bounds-checked 9
AssertionFailed exception 76
AST (abstract syntax tree)
7, 260, 262–265
ast module 19
async await 86
async procedure 250
asyncCheck command 85, 90, 
94
asyncdispatch module 80, 84, 
126
asyncftpclient module 126
asynchronous data transfer
91–99
adding network functional-
ity to client 95–98
index
Licensed to   
292
INDEX
asynchronous data transfer 
(continued)
creating new Client instance 
to hold data about 
client 92
final results of 98–99
processing client messages
92–95
sending messages to other 
clients 95
testing server without client
91–92
asynchronous execution, ver-
sus synchronous 85–86
asynchronous I/O (input/ 
output) 83–91
await keyword 88–91
difference between synchro-
nous and asynchronous 
execution 85–86
event loops 87–88
example using callbacks
86–87
Future type 84–85
asynchronous sockets 83
AsyncHttpClient type 126
asynchttpserver module 126
asyncnet module 80, 83, 126
AsyncSocket type 80
auto type 36
await keyword 88–91, 100
B
backend, of JavaScript 242–247
using Canvas API wrapper
246–247
wrapping canvas elements
243–246
backticks 33, 202
backward-slash character
28–29
basic types 25–30
Boolean 28
characters 28
floating-points 28
integers 26–27
strings 29–30
benchmark tests 13
bigints package 142
binary notation 27
bindAddr procedure 82–83
Bitwise operations 110
block keyword 45
blocked state 66
blocking input/output, using 
spawn to avoid 68–70
body parameter 207
Boehm 19
Boolean operations 110
Boolean type 26, 28
--boundsChecks option 40
break keyword 44
buffer overread 242
buffer string 171
build scripts 285
busy waiting 86
buttons, adding 217–218
C
C ++ programming language, 
features of 19
c command 142, 287
C library 226
C programming language
building compiler from 
source code of 283–286
adding Nim programming 
language to PATH 286
compiling 285
downloading archives 284
extracting archives
284–285
moving archives to safe 
location 284–285
verifying installation of
286
features of 19
wrapping external libraries
234–242
creating wrapper for SDL 
(Simple DirectMedia 
Layer) library 235–236
downloading SDL (Simple 
DirectMedia Layer) 
library 235
dynamic linking 236–237
using SDL wrappers
240–242
wrapping SDL procedures
238–240
wrapping SDL types
237–238
wrapping procedures
228–230
wrapping types 231–234
c subcommand 287
c1 sequence 79
c2nim tool 10
calculate macro 266
callback hell 88
callbacks, example of asynchro-
nous input/output 
using 86–87
camelCase 8, 32
Canvas API, using wrappers
246–247
canvas elements, wrapping
243–246
CanvasRenderingContext2D 
type 244
carriage return 28
case keyword 44
case statements 44
cd command 285
cfg parameter 276
chan variable 177
channels
overview 173
sending and receiving mes-
sages with 176–178
channels module 111, 177
character type 26, 28, 42
character-escape sequences 28
chat applications
architecture of 58–61
client components 60–61
finished product 58–61
network architectures
59–60
network models 59–60
server components 60–61
writing
first steps 61–62
implementing protocols
70–79
retrieving input in client 
components 63–70
transferring data using 
sockets 79–99
check command 287
chunks 160, 169
Clang 283