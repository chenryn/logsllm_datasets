作者：Hcamael@知道创宇404区块链安全研究团队
### 背景
最近学习了下以太坊的智能合约，而且也看到挺多厂家pr智能合约相关的漏洞，其中[《ERC20智能合约整数溢出系列漏洞披露》](https://paper.seebug.org/626/
"《ERC20智能合约整数溢出系列漏洞披露》")文章中披露了6个CVE编号的漏洞，而这些漏洞都属于整型溢出漏洞范畴，其中5个漏洞均需要合约Owner才能触发利用。本文正是针对这些漏洞从合约代码及触发逻辑上做了详细分析，并提出了一些关于owner相关漏洞的思考。
### 漏洞分析
#### 1\. CVE-2018-11809
该漏洞被称为“超额购币”，相关合约（EthLendToken）源码:
在合约代码中，`buyTokensPresale`和`buyTokensICO`两个函数都是存在整型上溢出的情况：
    function buyTokensPresale() public payable onlyInState(State.PresaleRunning)
        {
            // min - 1 ETH
            require(msg.value >= (1 ether / 1 wei));
            uint newTokens = msg.value * PRESALE_PRICE;
            require(presaleSoldTokens + newTokens = ((1 ether / 1 wei) / 100));
            uint newTokens = msg.value * getPrice();
            require(totalSoldTokens + newTokens >> (2**256-1)-(6*(10**25))/(3*(10**22))
    115792089237316195423570985008687907853269984665640564039457584007913129637935L
才可以造成整型上溢出，超额购币，整个以太坊公链，发展至今，以太币总余额有达到这个数吗？
虽然理论上该合约的确存在漏洞，但是实际却无法利用该漏洞
#### 2\. CVE-2018-11810
该类漏洞被称为：“超额定向分配”
相关事例（ LGO
）源码：
根据该漏洞的描述：
> 管理员绕过合约中规定的单地址发币上限，给指定地址分配超额的token
跟上一个漏洞相比，因为该漏洞存在于`onlyOwner`的函数中，只能Owner(管理员)才能调用该漏洞，所以我认为该类漏洞可以算做是“后门“类漏洞。
所以该类漏洞的利用有两个思路：
  1. Owner留下来的“后门”，供自己使用，专门用来坑合约的其他使用者(所谓的”蜜罐合约“，就是这种情况)
  2. 该合约有其他漏洞，能让自己成为Owener，或者可以说，结合提权漏洞进行利用
首先，我们先假设自己就是Owner，来研究该漏洞的利用流程，以下是存在漏洞的函数：
    function allocate(address _address, uint256 _amount, uint8 _type) public onlyOwner returns (bool success) {
            // one allocations by address
            require(allocations[_address] == 0);
            if (_type == 0) { // advisor
                // check allocated amount
                require(advisorsAllocatedAmount + _amount <= ADVISORS_AMOUNT);
                // increase allocated amount
                advisorsAllocatedAmount += _amount;
                // mark address as advisor
                advisors[_address] = true;
            } else if (_type == 1) { // founder
                // check allocated amount
                require(foundersAllocatedAmount + _amount <= FOUNDERS_AMOUNT);
                // increase allocated amount
                foundersAllocatedAmount += _amount;
                // mark address as founder
                founders[_address] = true;
            } else {
                // check allocated amount
                require(holdersAllocatedAmount + _amount <= HOLDERS_AMOUNT + RESERVE_AMOUNT);
                // increase allocated amount
                holdersAllocatedAmount += _amount;
            }
            // set allocation
            allocations[_address] = _amount;
            initialAllocations[_address] = _amount;
            // increase balance
            balances[_address] += _amount;
            // update variables for bonus distribution
            for (uint8 i = 0; i < 4; i++) {
                // increase unspent amount
                unspentAmounts[BONUS_DATES[i]] += _amount;
                // initialize bonus eligibility
                eligibleForBonus[BONUS_DATES[i]][_address] = true;
                bonusNotDistributed[BONUS_DATES[i]][_address] = true;
            }
            // add to initial holders list
            initialHolders.push(_address);
            Allocate(_address, _amount);
            return true;
        }
该合约相当于一个代币分配的协议，Owner可以随意给人分配代币，但是不能超过如下的限制：
代币的总额: `uint256 constant INITIAL_AMOUNT = 100 * onePercent;` 给顾问5%: `uint256