title:Chameleon: A Hybrid Secure Computation Framework for Machine Learning
Applications
author:M. Sadegh Riazi and
Christian Weinert and
Oleksandr Tkachenko and
Ebrahim M. Songhori and
Thomas Schneider and
Farinaz Koushanfar
Chameleon: A Hybrid Secure Computation Framework
for Machine Learning Applications
M. Sadegh Riazi
UC San Diego
PI:EMAIL
Ebrahim M. Songhori
UC San Diego
PI:EMAIL
Christian Weinert
TU Darmstadt, Germany
PI:EMAIL
Thomas Schneider
TU Darmstadt, Germany
PI:EMAIL
Oleksandr Tkachenko
TU Darmstadt, Germany
PI:EMAIL
Farinaz Koushanfar
UC San Diego
PI:EMAIL
ABSTRACT
We present Chameleon, a novel hybrid (mixed-protocol) framework
for secure function evaluation (SFE) which enables two parties to
jointly compute a function without disclosing their private inputs.
Chameleon combines the best aspects of generic SFE protocols with
the ones that are based upon additive secret sharing. In particular,
the framework performs linear operations in the ring Z2l using
additively secret shared values and nonlinear operations using
Yao’s Garbled Circuits or the Goldreich-Micali-Wigderson protocol.
Chameleon departs from the common assumption of additive or
linear secret sharing models where three or more parties need to
communicate in the online phase: the framework allows two parties
with private inputs to communicate in the online phase under the
assumption of a third node generating correlated randomness in an
offline phase. Almost all of the heavy cryptographic operations are
precomputed in an offline phase which substantially reduces the
communication overhead. Chameleon is both scalable and signifi-
cantly more efficient than the ABY framework (NDSS’15) it is based
on. Our framework supports signed fixed-point numbers. In partic-
ular, Chameleon’s vector dot product of signed fixed-point numbers
improves the efficiency of mining and classification of encrypted
data for algorithms based upon heavy matrix multiplications. Our
evaluation of Chameleon on a 5 layer convolutional deep neural
network shows 110x and 3.5x faster executions than Microsoft
CryptoNets (ICML’16) and MiniONN (CCS’17), respectively.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols;
KEYWORDS
Secure Function Evaluation; Privacy-Preserving Computation; Gar-
bled Circuits; Secret Sharing; Deep Neural Networks; Machine
Learning
1 INTRODUCTION
Secure Function Evaluation (SFE) is one of the great achievements
of modern cryptography. It allows two or more parties to evaluate
a function on their inputs without disclosing their inputs to each
other; that is, all inputs are kept private by the respective owners.
In fact, SFE emulates a trusted third party which collects inputs
from different parties and returns the result of the target function
to all (or a specific set of) parties. There are many applications
in privacy-preserving biometric authentication [17, 37, 38, 71, 76],
1
secure auctions [39], privacy-preserving machine learning [35],
and data mining [59, 60, 69]. In 1986, Yao introduced a generic
protocol for SFE, called Yao’s Garbled Circuit (GC) protocol [83].
The Goldreich-Micali-Wigderson (GMW) protocol [42] is another
SFE protocol that was introduced in 1987.
In theory, any function that can be represented as a Boolean
circuit can securely be evaluated using GC or GMW protocols.
However, GC and GMW can often be too slow and hence of limited
practical value because they need several symmetric key operations
for each gate in the circuit. During the past three decades, the great
effort of the secure computation community has decreased the
overhead of SFE protocols by several orders of magnitude. The
innovations and optimizations span the full range from protocol-
level to algorithm-level to engineering-level. As a result, several
frameworks have been designed with the goal of efficiently realizing
one (or multiple) SFE protocols. They vary by the online/offline run-
time, the number of computing nodes (two-party or multi-party),
online/offline communication, the set of supported instructions,
and the programming language that describes the functionality.
These frameworks accept the description of the function as either
(i) their own customized languages [64, 67], (ii) high-level languages
such as C/C++ [46] or Java [48, 61], or (iii) Hardware Description
Languages (HDLs) [32, 81].
A number of SFE compilers have been designed for translat-
ing a program written in a high level language to a low-level
code [43, 64, 67]. The low-level code is supported by other SFE
frameworks that serve as a backbone for executing the crypto-
graphic protocols. In addition to generic SFE protocols, additive/lin-
ear secret sharing enables secure computation of linear operations
such as multiplication, addition, and subtraction. In general, each
framework introduces a set of trade-offs. The frameworks based on
secret-sharing require three (or more) computing nodes which op-
erate on distributed shares of variables in parallel and need multiple
rounds of communication between nodes to compute an operation
on shares of two secret values. The main idea behind Chameleon is
to create a framework that combines the advantages of the previous
secure computation methodologies.
One of the most efficient secure computation frameworks is
Sharemind [18] which is based on additive secret sharing over the
specific ring Z232. All operations are performed by three comput-
ing nodes. Sharemind is secure against honest-but-curious (semi-
honest) nodes which are assumed to follow the protocol but they
cannot infer any information about the input and intermediate re-
sults as long as the majority of nodes are not corrupted. We consider
the same adversary model in this paper. Securely computing each
operation in Sharemind needs multiple communication rounds be-
tween all three nodes which makes the framework relatively slow
in the Internet setting. Computation based on additive shares in
the ring Z2l enables very efficient and fast linear operations such
as Multiplication (MULT), Addition (ADD), and Subtraction (SUB).
However, operations such as Comparison (CMP) and Equality test
(EQ) are not as efficient and non-linear operations cannot easily be
realized in the ring Z2l .
We introduce Chameleon, a fast, modular, and hybrid (mixed-
protocol) secure two-party computation framework that utilizes GC,
GMW, and additive secret sharing protocols and achieves unprece-
dented performance both in terms of run-time and communication
between parties. The analogy comes from the fact that similar to a
chameleon that changes its color to match the color of the environ-
ment, our framework allows changing the executing SFE protocol
based on the run-time operation. The idea of a mixed-protocol
solution was first introduced in [20] which combines GC with Ho-
momorphic Encryption (HE). HE enables to perform MULT and
ADD operations on encrypted values without actually knowing the
unencrypted data.
The TASTY framework [43] enables automatic generation of
protocols based on GC and HE. However, due to the high computa-
tional cost of Homomorphic Encryption (HE) and costly conversion
between HE and GC, they achieve only marginal improvement
compared to the single protocol execution model [51].
Our framework Chameleon is based on ABY [34] which imple-
ments a hybrid of additive SS, GMW, and GC for efficient realization
of SFE. However, we overcome three major limitations, thereby
improving efficiency, scalability, and practicality: First, ABY’s scal-
ability is limited since it only supports combinational circuit de-
scriptions, but most functionalities cannot be efficiently expressed
in a combinational-only format [81]. Therefore, we add the ability
to handle sequential circuits. In contrast to combinational circuit
representation, sequential circuits are a cyclic graph of gates and
allow for a more compact representation of the functionality. Sec-
ond, the ABY model relies on oblivious transfers for precomputing
arithmetic triples which we replace by more efficient protocols
using a Semi-honest Third Party (STP). The STP can be a separate
computing node or it can be implemented based on a smartcard [33]
or Intel Software Guard Extensions (SGX [7]). Therefore, the online
phase of Chameleon only involves two parties that have private
inputs. Third, we extend ABY to handle signed fixed-point num-
bers which is needed in many deep learning applications, but not
provided by ABY and other state-of-the-art secure computation
frameworks such as TASTY.
Chameleon supports 16, 32, and 64 bit signed fixed-point num-
bers. The number of bits assigned to the fraction and integral part
can also be tuned according to the application. The input programs
to Chameleon can be described in the high-level language C++. The
framework itself is also written in C++ which delivers fast execution.
Chameleon provides a rich library of many non-linear functions
such as exp, tanh, sigmoid, etc. In addition, the user can simply add
any function description as a Boolean circuit or a C/C++ program
to our framework and use them seamlessly.
Machine Learning on Private Data Using Chameleon.
Chameleon’s efficiency helps us to address a major problem in
contemporary secure machine learning on private data. Matrix
multiplication (or equivalently, vector dot product) is one of the
most frequent and essential building blocks for many machine
learning algorithms and applications. Therefore, in addition to scal-
ability and efficiency described earlier, we design an efficient secure
vector dot product protocol based on the Du-Atallah multiplication
protocol [36] that has very fast execution and low communication
between the two parties. We address secure Deep Learning (DL)
which is a sophisticated task with an increasing attraction. We
also provide the privacy-preserving classification based on Support
Vector Machines (SVMs).
The fact that many pioneering technology companies have
started to provide Machine Learning as a Service (MLaaS1,2,3)
proves the importance of DL. Deep and Convolutional Neural Net-
works (DNNs/CNNs) have attracted many machine learning practi-
tioners due to their capabilities and high classification accuracy. In
MLaaS, clients provide their inputs to the cloud servers and receive
the corresponding results. However, the privacy of clients’ data is
an important driving factor. To that end, Microsoft Research has
announced CryptoNets [35]. CryptoNets is an HE-based methodol-
ogy that allows secure evaluation (inference) of encrypted queries
over already trained neural networks on the cloud servers. Queries
from the clients can securely be classified by the trained neural net-
work model on the cloud server without inferring any information
about the query and the result. In §6.1, we show how Chameleon
improves over CryptoNets and other previous works. In addition,
we evaluate Chameleon for privacy-preserving classification based
on Support Vector Machines (SVMs) in §6.2.
Our Contributions. In brief, we summarize our main contribu-
tions as follows:
• We introduce Chameleon, a novel mixed SFE framework
based on ABY [34] which brings benefits upon efficiency,
scalability, and practicality by integrating sequential GCs,
fixed-point arithmetic, as well as STP-based protocols for
precomputing OTs and generating arithmetic and Boolean
multiplication triples, and an optimized STP-based vector
dot product protocol for vector/matrix multiplications.
• We provide detailed performance evaluation results of
Chameleon compared to the state-of-the-art frameworks.
Compared to ABY, Chameleon requires up to 321× and 256×
less communication for generating arithmetic and Boolean
multiplication triples, respectively.
• We give a proof-of-concept implementation and experimen-
tal results on deep and convolutional neural networks. Com-
paring to the state-of-the-art Microsoft CryptoNets [35], we
achieve a 110x performance improvement. Comparing to the
recent work of [62], we achieve a 3.5x performance improve-
ment using a comparable configuration.
1Amazon AWS AI (https://aws.amazon.com/amazon-ai/)
2Google Cloud Machine Learning Engine (https://cloud.google.com/ml-engine/)
3Microsoft Azure Machine Learning Services (https://azure.microsoft.com/
services/machine-learning-services/)
2
2 PRELIMINARIES
In this section, we provide a concise overview of the basic protocols
and concepts that we use in the paper. Intermediate values are
kept as shares of a secret. In each protocol, secrets are represented
differently. We denote a share of value x, in secret type T , and held
by party i as ⟨x⟩T
i
.
2.1 Oblivious Transfer Protocol
Oblivious Transfer (OT) is a building block for secure computation
protocols. The OT protocol allows a receiver party R to obliviously
select and receive a message from a set of messages that belong
to a sender party S, i.e., without letting S know what was the
selected message. In 1-out-of-2 OT, S has two l-bit messages x0, x1
and R has a bit b indicating the index of the desired message. After
performing the protocol, R obtains xb without learning anything
about x1−b and S learns no information about b. We denote n
parallel 1-out-of-2 OTs on l-bit messages as OT n
l
The OT protocol requires costly public-key cryptography that as
a result significantly degrades the performance of secure computa-
tions. A number of methods have been proposed to extend a small
number of OTs using less costly symmetric key cryptography and
a constant number of communication rounds to a larger number of
OTs [6, 13, 49]. Although the OT extension methods significantly
reduce the cost compared to that of the original OT, the cost is still
prohibitively large for complex secure computation that relies heav-
ily on OT. However, with the presence of a semi-trusted third party,
the parties can perform OT protocols with very low cryptographic
computation as explained in §4.5.
.
2.2 Garbled Circuit Protocol
One of the most efficient solutions for generic secure two-party
computation is Yao’s Garbled Circuit (GC) protocol [83] that re-
quires only a constant number of communication rounds. In the GC
protocol, two parties, Alice and Bob, wish to compute a function
f (a, b) where a is Alice’s private input and b is Bob’s. The func-
tion f (., .) has to be represented as a Boolean circuit consisting
of two-input gates, e.g., AND, XOR. Alice randomly generates a
k-bit binary string R for the garbling process where k is a security
parameter, usually set to k = 128 [14]. For each wire w in the circuit,
0
Alice generates and assigns two k-bit strings, called labels, X
w and
1
w representing 0 and 1 Boolean values. Next, she encrypts the
X
output labels of a gate using the two corresponding input labels as
the encryption keys and creates a four-entry table called garbled
table for each gate. The garbled table’s rows are shuffled according
to the point-and-permute technique [68] where the four rows are
permuted by using the Least Significant Bit (LSB) of the input labels
as the permutation bits. Alice sends the garbled tables of all the
gates in the circuit to Bob along with the labels corresponding to
her input a. Bob also obliviously receives the labels for his inputs
from Alice through an OT. He then decrypts the garbled tables one
by one to obtain the output labels. Finally, Bob achieves the final
output labels of the circuit’s output bits and Alice has the mapping
of the labels to 0 and 1 Boolean values. They can learn the output
of the function by sharing this information.
3
= ⟨y⟩B
i ⊕ ⟨b⟩B
and ⟨e⟩B
i
i ⊕ ⟨a⟩B
2.3 GMW Protocol
The Goldreich-Micali-Wigderson (GMW) protocol is a simple and
interactive secure multi-party computation protocol [41, 42]. In the
two-party GMW protocol, Alice and Bob compute f (a, b) using the
secret-shared values, where a is Alice’s private input and b is Bob’s.
Similar to the GC protocol, the function f (., .) has to be represented
as a Boolean circuit. In GMW, the Boolean value of a wire in the
circuit is shared between the parties. Alice has ⟨v⟩B0 and Bob has
⟨v⟩B1 and the actual Boolean value is v = ⟨v⟩B0 ⊕ ⟨v⟩B1 . Since the
XOR operation is associative, the XOR gates in the circuit can be
evaluated locally and without any communication between the
parties. The secure evaluation of AND gates requires interaction
and communication between the parties. The communication for
the AND gates in the same level of the circuit can be done in parallel.
Suppose an AND gate x ∧ y = z (where ∧ is the AND operation)
where Alice has shares ⟨x⟩B0 and ⟨y⟩B0 , Bob has shares ⟨x⟩B1 and
⟨y⟩B1 , and they wish to obtain shares ⟨z⟩B0 and ⟨z⟩B1 respectively.
As shown in [34], the most efficient method for evaluating AND
gates in the GMW protocol is based on Beaver’s multiplication
triples [11]: Multiplication triples are random shared-secrets a, b,
and c such that ⟨c⟩B0 ⊕ ⟨c⟩B1 = (⟨a⟩B0 ⊕ ⟨a⟩B1 ) ∧ (⟨b⟩B0 ⊕ ⟨b⟩B1 ). The
triples can be generated offline using OTs (cf. [78]) or by a semi-
trusted third party (cf. §3.3). During the online phase, Alice and
Bob use the triples to mask and exchange their inputs of the AND
gate: ⟨d⟩B
. After that, both
i
can reconstruct d = ⟨d⟩B0 ⊕ ⟨d⟩B1 and e = ⟨e⟩B0 ⊕ ⟨e⟩B1 . This way, the
output shares can be computed as ⟨z⟩B0 = (d ∧ e) ⊕ (⟨b⟩B0 ∧ d ) ⊕
(⟨a⟩B0 ∧ e) ⊕ ⟨c⟩B0 and ⟨z⟩B1 = (⟨b⟩B1 ∧ d ) ⊕ (⟨a⟩B1 ∧ e) ⊕ ⟨c⟩B1 .
2.4 Additive Secret Sharing