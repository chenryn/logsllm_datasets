the speciﬁc optimizations):
A: πA is a protocol for computing arithmetic circuits over the ﬁnite ﬁeld Z2k . Such a protocol uses the
BGW gate-by-gate evaluation paradigm, where so-called Beaver multiplication triples [Bea92]—which
can be pre-computed—are used to make the online phase linear.5 Concretely, the protocol stores each
value s in its state as an arithmetic secret sharing, denoted by (cid:104)s(cid:105)A: Each pi holds a share (cid:104)s(cid:105)i ∈ Z2k
such that (cid:104)s(cid:105)A
2 ≡ s (mod 2(cid:96)). (Consistently with [DSZ15], for clarity we will denote the type of the
sharing by a letter A the exponent.) As demonstrated in [DSZ15], with the appropriate optimizations πA
is the best known protocol for arithmetic operations, primarily in WAN setting but also in LAN setting
if suﬃciently amortized.
B: πB is a protocol for computing Boolean circuits based on GMW. It uses the XOR sharing which is the
same as the arithmetic sharing but for Z2, i.e., a bit s is shared by bits (cid:104)s(cid:105)B
2 = s.
As demonstrated in [DSZ15], with the appropriate optimizations πB is the best known protocol for
comparisons and logical operations in LAN setting, provided the operations are amortized.
Y: Finally, we will denote by πY the (optimized) version of Yao’s protocol used in [DSZ15]. For brevity, we
refer to πY as the Yao-based protocol. Note that although the original Yao protocol does not operate on
secret shared value, one can interpret the state, i.e., for each wire of the Boolean circuit, the corresponding
value sw of the wire w, as being shared among the to parties as follows: P1, the circuit creator, holds
the two keys K w
, i.e.,
(cid:104)sw(cid:105)Y
2 = K w
0 , K w
2), p1 does not know sw and p2
sw
does not known which value K w
corresponds to. Hence, none of the parties knows sw but by pooling
sw
their shares together they can easily reconstruct by checking if K w
1 . We refer to this secret
sw
sharing scheme as Yao sharing. As demonstrated in [DSZ15], with the appropriate optimizations πY is
the best known protocol for comparisons and logical operations, especially in LAN setting.
1 corresponding to wire inputs 0 and 1 respectively, and P2 holding K w
sw
. Clearly, in (cid:104)sw(cid:105)Y = ((cid:104)sw(cid:105)Y
0 and K w
1 ) and (cid:104)sw(cid:105)Y
1 and (cid:104)s(cid:105)B
2, s.t., (cid:104)s(cid:105)B
1⊕(cid:104)s(cid:105)B
1,(cid:104)sw(cid:105)Y
equals K w
1 +(cid:104)s(cid:105)A
1 = (K w
Share conversion As discussed above, in order to stitch diﬀerent modules in a single protocol we need to
transform the (output) sharing of one module to the (input) sharing of the following module. There are
several such share conversion protocols. In our benchmarks we use the ones from [DSZ15] but our OPA
solver can be instantiated with any such protocol. We refer to the share conversion protocol that converts
sharing of type X to sharing of type Y as X2Y, where X and Y take the value A for arithmetic, B for Boolean,
and Y for Yao sharing. E.g., a share conversion protocol from arithmetic to Yao sharing is denoted by A2Y.
5 Looking ahead, the costs used in our empirical study will be be sum of the setup and online costs.
5
1 int gcd(int a, int b) {
2
int x = a;
int y = b;
for (int i = 0; i >j)&1);
if (rem ≥ mod)
{
rem = rem - mod;
}
}
return rem;
3
4
5
6
7
8
9
10
11
12
19
20
21
22
23
24
25
26
27
28
29
30 }
1 int gcd(int a, int b) {
2
int x0 = a;
int y0 = b;
for (int i = 0; i >j)&1;
if (rem3 ≥ y1)
{
rem4 = rem3 - y1;
}
rem5 = φ(rem4,rem3);
}
// end inline rem
int r = rem5;
x2 = y1;
y2 = r;
}
x3 = φ(x2,x1);
y3 = φ(y2,y1);
}
return x3;
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33 }
1 int gcd(int a, int b) {
2
int x0 = a;
int y0 = b;
for(int i = 0; i = 0; j--)
{
rem1 = (j==LEN-1) ? rem0 : rem5;
rem2 = rem1 >j)&1;
rem4 = rem3 - y1;
cnd1 = CMP(rem3 >= y1);
rem5 = MUX(rem3,rem4,cnd1);
}
// end inline rem
int r = rem5;
x2 = y1;
y2 = r;
cnd2 = CMP(y1 != 0);
x3 = MUX(x1,x2,cnd2);
y3 = MUX(y1,y2,cnd2);
}
return x3;
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26