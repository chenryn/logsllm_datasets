### Process Injection Techniques and Stability Considerations

#### 1. SetWindowLong/SetWindowLongPtr
- **Return State**: The return state from the `FindWindow`/`OpenWindow` function.
- **Target Address Requirements**: The target address must have RX (Read-Execute) permissions.
- **Stability**:
  - Code should ensure that the state of the module's static variables is retained, as it is impossible to unmap partial module memory.
  - The instruction cache must be flushed.
  - These operations need to be performed while the target process is suspended.
  - Requires a memory read primitive (e.g., `ReadProcessMemory`) and process suspend/resume functions.
- **Required Functions**:
  - `OpenProcess`
  - `ntdll!NtUnmapViewOfSection`
  - `ntdll!NtSuspendProcess`
  - `ntdll!ResumeProcess`
  - `FlushInstructionCache`
  - `ReadProcessMemory`

#### 2. PROPagate Switch Virtual Table and Trigger
- **Requirements**:
  - A window belonging to the target process, which is subclassed. Specifically, one of Explorerâ€™s System Tray sub-windows is subclassed.
  - Target address must have RX permissions.
- **Cleanup**:
  - The original subclass structure needs to be restored.
- **Required Functions**:
  - `FindWindow`/`OpenWindow`
  - `GetProp`
  - `SetProp`
  - `ReadProcessMemory`

#### 3. Kernel Callback Table Switch Virtual Table and Trigger
- **Requirements**:
  - The target process must own a window.
  - Target address must have RX permissions.
- **Cleanup**:
  - The original kernel callback table must be restored.
- **Required Functions**:
  - `FindWindow`/`OpenWindow` (or similar)
  - `OpenProcess`
  - `ntdll!NtQueryInformationProcess`
  - `SendMessage`

#### 4. Ctrl-Inject Switch Virtual Table and Trigger
- **Requirements**:
  - The target must be a console application.
  - Target address must have RX permissions.
- **Cleanup**:
  - The original Ctrl-C handler must be restored, and the key pressed must be released.
- **Required Functions**:
  - `OpenProcess`
  - `ntdll!RtlEncodeRemotePointer`
  - `SendInput`
  - `PostMessage`

#### 5. Service Control Overwrite Virtual Table and Trigger
- **Requirements**:
  - The target process must be a service.
  - Target address must have RX permissions.
- **Cleanup**:
  - (Probably) restore the original handler.
- **Required Functions**:
  - `OpenSCManager`
  - `OpenService`
  - `OpenProcess`
  - `ControlService`
  - `VirtualQueryEx`
  - `ReadProcessMemory`

#### 6. USERDATA Switch Virtual Table and Trigger
- **Requirements**:
  - The target must be a console application.
  - Target address must have RX permissions.
- **Cleanup**:
  - The original dispatch table pointer must be restored.
- **Required Functions**:
  - `OpenProcess`
  - `FindWindow`/`OpenWindow` (or similar)
  - `GetWindowLongPtr`
  - `SendMessage`

#### 7. ALPC Callback Overwrite Virtual Table and Trigger
- **Requirements**:
  - The target process must have an open ALPC port.
  - Target address must have RX permissions.
- **Cleanup**:
  - Restore the original callback.
- **Required Functions**:
  - `OpenProcess`
  - `VirtualQueryEx`
  - `NtDuplicateObject`
  - `NtConnectPort`
  - `ReadProcessMemory`

#### 8. WNF Callback Overwrite Virtual Table and Trigger
- **Requirements**:
  - The target process must use WNF.
  - Target address must have RX permissions.
- **Cleanup**:
  - Restore the original callback.
- **Required Functions**:
  - `OpenProcess`
  - `ReadProcessMemory`
  - `NtUpdateWnfStateData`

#### 9. Stack Bombing
- **Requirements**:
  - Target address must have RX permissions.
  - The thread must be in an alertable state.
- **Cleanup**:
  - The original thread stack and registers need to be restored. This is straightforward with the five alertable functions.
- **Required Functions**:
  - `OpenThread`
  - `GetThreadContext`
  - `SetThreadContext`
  - `ntdll!NtQueueApcThread`

### Auxiliary Technique for DLL Loading
During our research, we discovered an auxiliary technique that can be helpful for future injection attack development. This technique loads a system DLL into the target process without writing its path to the process.

- **Use Case**: Forcibly loading a system DLL into a process, e.g., when a ROP gadget is needed from such a DLL.
- **Execution Method**: Generally, an execution method with `LoadLibraryA` can be used to load a DLL, provided the DLL path is in memory.
- **Kernelbase.dll Feature**: `kernelbase.dll` contains a list of 1000+ system DLLs (as NUL-terminated strings). This allows arbitrary system DLL loading even without prior write primitive.
- **List Location**: The list can be found at `kernelbase!g_DllMap+8`, which is a pointer to an array of structures. Each structure is 3 QWORDs, with the first one pointing to a string (ASCII, NUL-terminated). The strings populate a consecutive area in the `.rdata` section, where each string is 8-byte aligned.

### PoCs and Library
- **PoCs Availability**: All the above PoCs are available at our GIT repository.
- **Full Exploitation PoCs**: We provide "full exploitation" PoCs that demonstrate execution (MessageBox) for all techniques.
- **PINJECTRA Library**: A unique offering in the form of a "mix and match" C++ class library (code name PINJECTRA), allowing users to construct process injections by combining compatible write primitives with execution methods. This is the first such offering.

### Conclusions
This paper fills a major gap in the documentation, analysis, update, and comparison of true process injection techniques for Windows 10 x64. Additionally, it presents a novel technique for writing data to memory and a related technique for execution, both unaffected by all Windows 10 process protection methods. All techniques are offered as barebone PoCs and as interchangeable classes in a library, enabling "mix and match" style process injection coding.

### Acknowledgements
Special thanks to the EnSilo research team, Odzhan, Adam of Hexacorn, and Csaba Fitzl (AKA TheEvilBit) for their research and innovation over the recent years.