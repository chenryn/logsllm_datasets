choice to avoid code coverage issues inherent with
runtime analysis and for analysis speed (end-to-end
processing is several minutes per app). In this sec-
tion we discuss some of the limitations of our current
static analysis approach. There are two potential
sources of errors in our analysis. Our analysis may
classify a resource access as unprotected whereas it
is properly protected with runtime prompts; we call
these cases false positives. By the same token, our
analysis may classify a resource access as protected
whereas in fact at runtime there are no preceding
prompts that protect the resource access; we call
these cases false negatives.
Manual inspection: We examined a subset of ap-
plications to manually check for these errors. The
USENIX Association  
22nd USENIX Security Symposium  125
veriﬁcation process includes running these applica-
tions in the emulator to collect network packets and
to collect API calls invoked by each application at
runtime. We manually exercise as much functional-
ity of each application as possible. If the application
presented a runtime prompt, we inspected the text
of the message and clicked through each “allow” (to
use my location) and “don’t allow” button to deter-
mine how the choice aﬀects application behavior.
Once the runtime inspection was complete, we ex-
amined network packets and invoked API lists, cor-
relating them with the app’s disassembled code to
verify the observed behavior. Although this veriﬁca-
tion process is thorough, it requires signiﬁcant man-
ual eﬀorts, thus limiting the number of cases that can
be examined. Next, we discuss ﬁndings from 10 ap-
plications. These apps contain 27 resource access
points, among which 21 are classiﬁed as unprotected
by our analysis.
6.1 False Negatives
Our manual analysis found no false negatives. On
a close examination of each of the 27 resource ac-
cesses, we ﬁnd 10 accesses that are not protected.
Our analysis correctly identiﬁes all of these accesses
as unprotected and ﬁnds proper placements.
These unprotected accesses are found in third-
Interest-
party libraries included across 5 apps.
ingly,
in an eﬀort to maximize revenue, one app
embeds two advertising related third-party libraries
(SOMAWP7.dll and AdRotatorXNA.dll) and both con-
tain unprotected location accesses. Two placements
are made via dominator-based placement; the other
eight through backward placement. Backward place-
ments result in 40 inserted prompts in application
code, which upon casual examination appear to be
correct. We ﬁnd these results promising, as users
express increasing concern about data sharing with
third parties [21], and our analysis properly detects
and ﬁxes such unprotected accesses.
6.2 False Positives
Eleven out of 21 accesses ﬂagged as unprotected turn
out to be properly protected. Although the number
of false positives is somewhat high, with manual in-
spection, we found the following reasons for them:
Sticky location prompt: Seven false positives are
due to our analysis’s inability to analyze sticky lo-
cation prompts, as shown in Figure 5. Three cases
are similar to the example in Figure 18(a). The rest
are caused by one application that uses the location
ﬂag to enable or disable the button that allows the
private void mapLocaitons() {
if (this.avisAppUnitService.UseLocationsMapping) {
this.watcher=null;
GeoCoordinateWatcher watcher=new GeoCoordinateWatcher
(GeoPositionAccuracy.Default){MovementThreshold = 20.0};
this.watcher = watcher;
...
this.watcher.Start();
}
}
(a) Sticky
saves
the
Athis.avisAppUnitService.UseLocationsMapping.
prompt
result
example #1:
of
the
prompt
response
This
app
in
public MapPage() {
this.InitializeComponent();
base.DataContext = new MapViewModel();
this.BuildApplicationBar();
if (AppSettings.Current.UseLocationService) {
this.watcher = new GeoCoordinateWatcher();
}
((ApplicationBarIconButton)base.ApplicationBar.Buttons[0]).
IsEnabled = AppSettings.Current.UseLocationService;
((ApplicationBarIconButton)base.ApplicationBar.Buttons[2]).
IsEnabled = AppSettings.Current.UseLocationService;
this.UpdatePushpinsBackground();
}
(b) Sticky prompt example #2: This app disables page
navigation based on the location access depending on
AppSettings.Current.UseLocationService.
Figure 18: Sticky prompt examples.
user to navigate to the page (that invokes location
access) as shown in Figure 18(b). WP apps can use
several diﬀerent storage mechanisms; we are looking
into ways to detect them statically.
Consent dialog implementation: Two false pos-
itives are due to the limitation of identifying exist-
ing prompts. Both result from a single app that
implements a custom consent dialog page instead
of MessageBox(), as shown in Figure 19. We are
looking into ways to parse a blocking page with
buttons to detect such custom-made consent dialog
pages, although this is obviously a diﬃcult problem.
However, such cases are not common and we ﬁnd
that ﬁve out of six applications that show prompts
employ MessageBox(), as expected.
Async calls and XAML ﬁles: Two false positives
are due to limitations of call graph construction.
Figure 20(a) shows an expanded example of the
case discussed in Section 4.1. Applications may
use multiple types of EventHandlers to be called
asynchronously. In our current implementation, we
parse EventHandlers and add links when handlers
are registered. However, the current implementa-
tion fails when multiple delegates and EventHandlers
are used in a tricky way, as shown in Figure 20(b).
We are investigating ways to extend our call graph
construction to support these cases.
126  22nd USENIX Security Symposium 
USENIX Association
USENIX Association  
22nd USENIX Security Symposium  127
(a)Apppagewithloca-tionaccess.(b)Prompt(consentdi-alog).Figure19:Falsepositiveduetoacustomprompt:ApromptiscustomizedasaseparateWPUIpage.6.3EﬀectofFalsePositivesLikemostpracticalstaticanalysistools,ouranalysisispotentiallyvulnerabletofalsepositives,primarilybecauseofprogramrepresentationchallenges.Un-likemoststaticanalysistoolsforbugdetection,ouranalysisistwo-phase:ifitdetectsthataresourceaccessisnotadequatelyprotected,ittriestopro-poseaplacementofpromptsthatwouldprotectit.Ouranalysiserrsonthesafeside,introducingfalsepositivesandnotfalsenegatives.Falsepositives,however,mayleadtodouble-prompting,sinceouranalysiswillinjectaprompttoprotectalreadyprotectedresourceaccesses.Be-causeourinsertedpromptsaresticky,ourapproachintroducesatmostoneextraruntimepromptperappduringtheentireapp’slifecycle,whichwebe-lievewillnotleadtopromptfatigue.Nonetheless,double-promptingcantriggerconfusioninend-usersandthereforeshouldbeminimized.Ourexperiencewiththetentestapplicationsshowsthatinallcases,resourceaccessesgettriggeredquickly,withseveralclicks,soruntimecheckingofthiskindisunlikelytorequireexcessiveeﬀort.Ifdesired,runtimetest-ingbythedeveloperorAppStoremaintainerscanaccompanyouranalysistodetectandeliminatepo-tentialdouble-prompting.7RelatedWorkTherequirementofprotectingprivacy-sensitivere-sourceaccesseswithruntimepromptsorconsentdi-alogshasonlyrecentlybeenintroducedtomobileapplications.Toourknowledge,nopreviousworkhasinvestigatedstaticanalysisapproachestodetectprivatevoidGPS_MouseLeftButtonDown(objectsender,MouseButtonEventArgse){...elseif(MessageBox.Show("Sharingthisinfoallowsustofindtheatersandeventsnearyou.Wewon’tsharethisinformation.","AllowBookMyShowtoaccessanduseyourlocation.",MessageBoxButton.OKCancel)==MessageBoxResult.OK){...base.NavigationService.Navigate(newUri("/VenueByGeo.xaml?mc="+this.strMenuCode+"&t="+this.strToken,UriKind.RelativeOrAbsolute));}...}(a)ComplexCFG#1:FunctionNavigate()internallycallsBMSApp.VenueByGeo.OnNavigatedTo()asdeﬁnedinVenueByGeo.xaml.publicstaticboolGetCurrentLocation(){...Observable.FromEvent(delegate(EventHandlerev){GeoCoordinateWatcher.StatusChanged+=ev;},delegate(EventHandlerev){GeoCoordinateWatcher.StatusChanged-=ev;}).Where>(delegate...args){if(args.EventArgs.Status!=GeoPositionStatus.Ready){return(args.EventArgs.Status==GeoPositionStatus.Disabled);}returntrue;}).Take>(1).Subscribe>(delegate(IEventargs){if(args.EventArgs.Status==GeoPositionStatus.Ready){RaiseCurrentLocationAvailable(newCurrentLocationAvailableEventArgs(GeoCoordinateWatcher.Position.Location));}...}(b)ComplexCFG#2:Thiscodegeneratesacompiler-generatedfunctionb3inEventful.Helpers.LocationHelper,whichiscalledwithinGetCurrentLocation(),asdeﬁnedinVenueByGeo.xaml.Figure20:ComplexCFGcases.unprotectedresourceaccessesinmobileapplicationbinaries.Thissectiondiscussespreviousresearchinthreerelatedareas:automatichookplacement,graph-basedanalysisforinformationsecurity,anduserstudiesofconsentdialogs.Automatichookplacement:Anumberofprevi-ousstudiesexaminetheissuesofprotectingsecurity-sensitiveoperationswithauthorizationhooks(e.g.,checkingpermissionsforﬁleoperations).Ganapa-thyetal.[14]useastaticprogramanalysisovertheLinuxkernelsourcecodetoidentifypreviouslyun-speciﬁedsensitiveoperationsandﬁndtherightsetof hooks that need to protect them. AutoISES by
Tan et al. [34] is designed for the similar goal as [14]
but the ways that AutoISES infers access to sensi-
tive data structure are diﬀerent from [14]. Muthuku-
maran et al. [27] focus on server code such as the
X server and postgresql and use their insight con-
cerning object access patterns in order to identify
sensitive operations that require authorization.
In comparison to these eﬀorts, our work begins
with a set of known APIs that access sensitive re-
sources. Such a set is easy to mine from developer
documentation for most mobile operating systems.
In particular, our work focuses on algorithms to ﬁnd
placements that meet the four important conditions
speciﬁc to user prompts on mobile devices, whereas
the previous work concentrates of placement being
safe [14, 34] or safe and not-repetitive [27].
Program dependence
Graph-based analysis:
graphs are used for analyzing information security
of programs in several projects [16, 17, 32]. Program
dependence graphs include both data dependen-
cies and control dependencies whereas the dataﬂow
graphs that we use in this work typically contain
just data dependencies. Hammer et al. [15] con-
sider the enforcement of declassiﬁcation [30] using
program dependence graphs. Recent eﬀorts focus
on automating security-critical decisions for appli-
cation developers [31, 36]. The use of a security type
system for enforcing correctness is another case of co-
operating with the developer to achieve better code
quality and correctness guarantees [29]. Livshits and
Chong [25] address the problem of sanitizer place-
ment through static analysis and partially inspire
our work on consent dialog placement. In our work,
we use a backwards traversal to ﬁnd the closest
valid node to insert a missing prompt. Au et al. [5]
use a similar backward reachability analysis over a
call graph constructed from the Android framework.
However, their goal is to create a mapping between
API calls and permission checks and therefore their
analysis need not consider the four conditions.
Mobile user privacy and consent dialogs: Sev-
eral recent studies have investigated the eﬀectiveness
of existing consent dialogs used on mobile devices at
informing users about which privacy-sensitive data
can be accessed by apps. Felt et al. [12] show that
only 17% of study participants paid attention to the
permissions when installing Android applications.
This ﬁnding may indicate that placing consent di-
alogs at install time (far removed from when the data
is actually being accessed) renders these dialogs in-
eﬀective. On the contrary, a study by Fisher et al.
focus on iPhone users’ responses to runtime consent
dialogs to location access and shows that 85% of
study participants actually denied location requests
for at least one app on their phone [13].
Although orthogonal to our work, previous stud-
ies have explored ways to improve the presentation
of consent dialogs in mobile devices. Lin et al. mea-
sure users’ “expectations” of apps’ access to phone
resources [23]. By highlighting unexpected behav-
iors in the Android permissions interface, the au-
thors show that the new permission interface is more
easily understood and eﬃcient than the existing one.
Felt et al. propose a framework for requesting per-
missions on smartphones [11]. Findings of these
studies can inform a better usable privacy design of a
consent dialog, which our analysis can automatically
insert in mobile apps.
8 Conclusions
In this paper, we have explored the problem of miss-
ing prompts that should guard sensitive resource ac-
cesses. Our core contribution is a graph-theoretic
algorithm for placing such prompts automatically.
The approach balances the execution speed and few
prompts inserted via dominator-based placement
with a comprehensive nature of a more exhaustive
backward analysis.
Overall, our two-prong strategy of dominator-
based and backward placement
in
about 95% of all unique cases. Our approach is
highly scalable; once the application has been
represented in the form of a graph, analysis usually
takes under a second on average.
succeeds
References
[1] Pandora discloses privacy-related US inquiry into phone
http://www.nytimes.com/2011/04/05/technology/
apps.
05pandora.html, April 2011.
[2] Daily report:
Social app makes oﬀ with address
books.
http://bits.blogs.nytimes.com/2012/02/08/daily-
report-social-app-makes-off-with-address-books/, Febru-
ary 2012.
[3] LinkedIn’s
iOS app collects
and transmits names,
emails and notes
in plain text.
http://thenextweb.com/insider/2012/06/06/linkedins-ios-
app-collects-and-sends-names-emails-and-meeting-notes-
from-your-calendar-back-in-plain-text/, June 2012.
from your calendar,
[4] A. V. Aho, M. Lam, R. Sethi, and J. D. Ullman. Compilers:
Principles, Techniques, and Tools. Addison-Wesley, 2007.
[5] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. Pscout: an-
alyzing the android permission speciﬁcation. In ACM CCS,
2012.
[6] E. Bodden, A. Sewe, J. Sinschek, H. Oueslati, and M. Mezini.
Taming reﬂection: Aiding static analysis in the presence of
reﬂection and custom class loaders. In Software Engineer-
ing (ICSE), 2011 33rd International Conference on, pages
241–250, 2011.
128  22nd USENIX Security Symposium 
USENIX Association
[7] R. B¨ohme and S. K¨opsell. Trained to accept?: a ﬁeld exper-
iment on consent dialogs. In Proceedings of CHI, 2010.
[8] A. S. Christensen, A. Møller, and M. Schwartzbach. Precise
analysis of string expressions. In International Conference
on Static analysis, 2003.
[9] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: De-
tecting privacy leaks in iOS applications.
In Proceedings
of the Annual Network and Distributed System Security
Symposium, Feb. 2011.
[10] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. N. Sheth. TaintDroid: an information-ﬂow
tracking system for realtime privacy monitoring on smart-
phones. In Proceedings of the Usenix Conference on Oper-
ating Systems Design and Implementation, 2010.
[11] A. P. Felt, S. Egelman, M. Finifter, D. Akhawe, and D. Wag-
ner. How to ask for permission. In Proceedings of HotSec,
2012.
[12] A. P. Felt, E. Hay, S. Egelman, A. Haney, E. Chin, and
D. Wagner. Android permissions: User attention, compre-
hension, and behavior. In Proceedings of SOUPS, 2012.
[26] B. Livshits, J. Whaley, and M. S. Lam. Reﬂection analysis
for Java. In Asian Symposium on Programming Languages
and Systems, Nov. 2005.
[27] D. Muthukumaran, T. Jaeger, and V. Ganapathy. Leverag-
ing ”choice” to automate authorization hook placement. In
ACM CCS, 2012.
[28] G. Richards, S. Lebresne, B. Burg, and J. Vitek. An analysis
In ACM
of the dynamic behavior of javascript programs.
Sigplan Notices, volume 45, pages 1–12. ACM, 2010.
[29] W. Robertson and G. Vigna. Static enforcement of Web
application integrity through strong typing. In Proceedings
of the Usenix Security Symposium, Aug. 2009.
[30] A. Sabelfeld and D. Sands. Dimensions and principles of de-
classiﬁcation. In Proceedings of the 18th IEEE Computer
Security Foundations Workshop, pages 255–269. IEEE
Computer Society, June 2005.
[31] M. Samuel, P. Saxena, and D. Song. Context-sensitive auto-
sanitization in web templating languages using type quali-
ﬁers. In Proceedings of the Conference on Computer and
Communications Security, Oct. 2011.
[13] D. Fisher, L. Dorner, and D. Wagner. Short paper: location
privacy: user behavior in the ﬁeld. In Proceedings of SPSM,
2012.
[32] B. Scholz, C. Zhang, and C. Cifuentes. User-input depen-
dence analysis via graph reachability. Technical Report 2008-
171, Sun Microsystems Labs, 2008.
[14] V. Ganapathy, T. Jaeger, and S. Jha. Automatic placement
of authorization hooks in the linux security modules frame-
work. In ACM CCS, 2005.
[15] C. Hammer, J. Krinke, and F. Nodes. Intransitive noninter-
ference in dependence graphs. In 2nd International Sympo-
sium on Leveraging Application of Formal Methods, Veri-
ﬁcation and Validation, Nov. 2006.
[16] C. Hammer, J. Krinke, and G. Snelting. Information ﬂow
control for java based on path conditions in dependence
graphs. In IEEE International Symposium on Secure Soft-
ware Engineering, Mar. 2006.
[17] C. Hammer and G. Snelting.
Flow-sensitive, context-
sensitive, and object-sensitive information ﬂow control based
on program dependence graphs. International Journal of
Information Security, 8(6):399–422, Dec. 2009.
[18] M. Hirzel, D. von Dincklage, A. Diwan, and M. Hind. Fast
online pointer analysis. ACM Trans. Program. Lang. Syst.,
29(2), 2007.
[19] P. Hooimeijer and M. Veanes. An evaluation of automata al-
gorithms for string analysis. In Veriﬁcation, Model Check-
ing, and Abstract Interpretation, pages 248–262. Springer,
2011.
[33] D. Shannon, S. Hajra, A. Lee, D. Zhan, and S. Khur-
shid. Abstracting symbolic execution with string anal-
ysis.
In Testing: Academic and Industrial Conference
Practice and Research Techniques-MUTATION, 2007.
TAICPART-MUTATION 2007, pages 13–22, 2007.
[34] L. Tan, X. Zhang, X. Ma, W. Xiong, and Y. Zhou. Autoises:
Automatically inferring security speciﬁcation and detecting
violations. In USENIX Security Symposium, 2008.
[35] O. Tripp, M. Pistoia, S. J. Fink, M. Sridharan, and O. Weis-
man. TAJ: eﬀective taint analysis of Web applications. In
Proceedings of the Conference on Programming Language
Design and Implementation, 2009.
[36] J. Weinberger, P. Saxena, D. Akhawe, M. Finifter, R. Shin,
and D. Song. A systematic analysis of XSS sanitization in
Web application frameworks. In Proceedings of the Euro-
pean Symposium on Research in Computer Security, Sept.
2011.
[20] P.
Internet.
Privacy and data management on mo-
bile devices. http://pewinternet.org/Reports/2012/Mobile-
Privacy.aspx, September 2012.
[21] J. Jung, S. Han, and D. Wetherall. Short paper: Enhancing
mobile application permissions with runtime feedback and
constraints. In Proceedings of SPSM, 2012.
[22] S. Kaplan, B. Livshits, B. Zorn, C. Seifert,
and
”nofus: Automatically detecting” +
C. Curtsinger.
string.fromcharcode(32) + ”obfuscated ”.tolowercase() +
”javascript code”. Technical Report MSR-TR-2011-57, Mi-
crosoft Research, May 2011.
[23] J. Lin, S. Amini, J. Hong, N. Sadeh, J. Lindqvist, and
J. Zhang. Expectation and purpose: Understanding users’
mental models of mobile app privacy through crowdsourcing.
In Proceedings of UbiComp 2012, 2012.
[24] B. Livshits. Dynamic taint tracking in managed runtimes.
Technical Report MSR-TR-2012-114, Microsoft Research,
2012.
[25] B. Livshits and S. Chong. Towards fully automatic place-
ment of security sanitizers and declassiﬁers. In Proceedings
of the Sympolisium on Principles of Programming Lan-
guages (POPL), Jan. 2013.
USENIX Association  
22nd USENIX Security Symposium  129