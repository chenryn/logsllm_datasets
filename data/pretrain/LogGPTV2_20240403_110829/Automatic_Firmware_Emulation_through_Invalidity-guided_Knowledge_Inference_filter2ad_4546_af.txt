tion to infer appropriate responses to unknown peripheral
accesses. However, Laelaps only stays in symbolic execution
mode for a short period (less than six basic blocks based on
the paper) before the path explosion problem begins to inﬂu-
ence its performance. Therefore, a peripheral input, after six
basic blocks, has to be concertized and cannot be involved
in constraint solving. In other words, Laelaps can only ﬁnd
the “best” short-term path, which may not be a valid path in
the long run. In addition, the architecture of Laelaps does not
support caching. Every access to peripherals traps the system
into the symbolic execution engine, leading to unacceptable
performance overhead. For example, in fuzzing the synthe-
sized vulnerable ﬁrmware, Laelaps executed less than 1,000
test-cases in an hour [16]. The low performance makes it very
inefﬁcient in fuzzing, which relies on executions per second.
PRETENDER [25] observes interactions between the hard-
ware and ﬁrmware, and uses machine learning and pattern
recognition to create models of peripherals. Thus, it needs
real devices to collect the interactions between the original
hardware and ﬁrmware, and then learns the behavior. This
approach is less scalable if the ﬁrmware was written for unpop-
ular MCUs. Moreover, the analyzed ﬁrmware cannot activate
more peripheral features apart from those already learned on
real devices.
P2IM [21] generates responses to peripheral accesses based
on the categorization information of the peripheral. It ob-
serves the access pattern of peripherals and relies expert-
provided heuristics to categorize each peripheral register. We
discuss how mis-categorization inﬂuences the accuracy of
P2IM in handing complex peripherals like USB, CAN and
Radio in Section 5.3. Moreover, it cannot generate responses
for many kinds of registers, in particular status registers. This
is because P2IM uses a concrete exploration algorithm to
guess valid readings of registers, while the huge search space
makes it impractical. For example, if the ﬁrmware waits for a
status register to have multiple bits set, P2IM can never ﬁnd
the expected value as discussed in Appendix 5.3.
HALucinator [19] avoids peripheral emulation by replac-
ing the high-level hardware abstraction layer (HAL) func-
tions with a host implementation. In this sense, it does not
really model peripherals. Therefore, comparing HALucinator
with µEmu, P2IM or Laelaps is not perfectly fair. Since HAL
functions are replaced by host functions, it does not need to
consider low-level implementation, such as DMA. However,
since low-level drivers are skipped for emulation, bugs resting
there can never be exposed. Also, building a database that
matches all HAL libraries needs the HAL source code from
all the major MCU vendors. As a result, the wide adaptation
of HALucinator demands collaboration from industry. SoCs
with proprietary SDKs (e.g., Samsung SmartThings [38] and
Philips [36]) cannot be supported by HALucinator. Given
the clear advantages and disadvantages of HALucinator and
µEmu/P2IM/Laelaps, we argue that a combination could gen-
erate a state-of-the-art tool for analyzing MCU ﬁrmware. We
USENIX Association
30th USENIX Security Symposium    2021
can ﬁrst use HALucinator to match any HAL functions and
hook them with host implementations. During run-time, if
any unknown peripheral is accessed, µEmu, P2IM or Laelaps
can kick in and emulate the rest.
Apart from the emulation capability itself, a distinct ad-
vantage of µEmu to related work is the tight integration with
S2E, a platform for software analysis. Therefore, there are
many excellent plugins which are readily available. Also, ana-
lysts can develop new plugins for µEmu so that other dynamic
analysis mechanisms can be integrated.
8 Conclusions
This paper presents µEmu, a new tool to emulate ﬁrmware
execution, for the purpose of ﬁnding bugs in task code of
ﬁrmware, with a focus on those caused by malformed in-
puts from I/O interfaces. It automatically ﬁnds appropriate
responses for accesses to unknown peripherals, allowing for
executing MCU ﬁrmware in an emulated environment without
requiring real hardware. Our algorithm leverages symbolic ex-
ecution to ﬁnd new paths and uses invalidity checking to make
sure that the ﬁrmware execution does not enter an invalid state.
At the same time, µEmu learns the appropriate values for pe-
ripheral access and store them into a knowledge base. After
the knowledge extraction phase, with the returned knowledge
base, µEmu efﬁciently responds to peripheral reading opera-
tions for dynamic analysis. We have implemented our idea on
top of S2E and developed a fuzzing plugin. Evaluation results
show that µEmu is capable of emulating real-world ﬁrmware
and ﬁnding new bugs.
Acknowledgments
We would like to thank our shepherd William Enck and the
anonymous reviewers for their helpful feedback. We thank
Bo Feng for providing us with the ﬁrmware samples used
in P2IM [21] and kind guidance on conﬁguring P2IM. We
also thank Vitaly Chipounov for his help on adding ARM
support to S2E. Wei Zhou and Yuqing Zhang were support by
National Natural Science Foundation of China (U1836210)
and CSC scholarship. Le Guan was supported in part by
JFSG from the University of Georgia Research Foundation,
Inc. Peng Liu was supported by ARO W911NF-13-1-0421
(MURI), NSF CNS-1814679, and NSF CNS-2019340.
References
[1] HALucinator ﬁrmware samples. https://github.com/ucsb-sec
lab/hal-fuzz/tree/master/tests.
[2] P2IM real-world ﬁrmware samples. https://github.com/RiS3-L
ab/p2im-real_firmware.
[3] P2IM unit test samples.
https://github.com/RiS3-Lab/p2i
m-unit_tests/tree/30e6aec9f5c44f11b8072bf597eb80729dad
417d.
[4] Pretender ﬁrmware samples. https://github.com/ucsb-seclab/
pretender/tree/master/test_programs/max32600.
[5] Bug Report: Critical memory leak in DSPI Master Pe-
https:
ripheral Driver
//community.nxp.com/t5/Kinetis-Software-Development
-Kit/Bug-Report-Critical-memory-leak-in-DSPI-Master-P
eripheral-Driver/m-p/374518, 2020.
in combination with FreeRTOS.
[6] LiteOS Partner Development Kits. https://github.com/LiteOS/
LiteOS_Partner_Development_Kits, 2020.
[7] µTasker. https://www.utasker.com/index.html, 2020.
[8] µTasker MODBUS Extension Module. https://www.utasker.co
m/modbus.html, 2020.
[9] µTasker USB Demo. https://www.utasker.com/docs/uTasker
/uTaskerV1.3_USB_Demo.PDF, 2020.
[10] S2E: A Platform for In-Vivo Analysis of Software Systems) Manufac-
turers for 2020. https://s2e.systems/, 2020.
[11] S2E ofﬁcial Issue of ARM Support. https://github.com/S2E/s
2e-env/issues/268, 2020.
[12] Socket CAN Sample. https://docs.zephyrproject.org/lates
t/samples/net/sockets/can/README.html, 2020.
[13] Top 10 Microcontrollers (MCU) Manufacturers for 2020.
https://www.bisinfotech.com/top-10-microcontrollers-m
cu-manufacturers-2020/, 2020.
[14] Zephyr. https://www.zephyrproject.org/, 2020.
[15] Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. Klee: Unas-
sisted and automatic generation of high-coverage tests for complex
systems programs. In OSDI, volume 8, pages 209–224, 2008.
[16] Chen Cao, Le Guan, Jiang Ming, and Peng Liu. Device-agnostic
ﬁrmware execution is possible: A concolic execution approach for
peripheral emulation. In Annual Computer Security Applications Con-
ference, pages 746–759, 2020.
[17] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. To-
wards automated dynamic analysis for linux-based embedded ﬁrmware.
In NDSS, volume 16, pages 1–16, 2016.
[18] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. S2e:
A platform for in-vivo multi-path analysis of software systems. ACM
Sigplan Notices, 46(3):265–278, 2011.
[19] Abraham A Clements, Eric Gustafson, Tobias Scharnowski, Paul
Grosen, David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh
Bagchi, and Mathias Payer. Halucinator: Firmware re-hosting through
In 29th USENIX Security Symposium,
abstraction layer emulation.
pages 1–18, 2020.
[20] Andrei Costin, Apostolis Zarras, and Aur’elien Francillon. Automated
dynamic ﬁrmware analysis at scale: a case study on embedded web
interfaces. In Proceedings of the 11th ACM on Asia Conference on
Computer and Communications Security, pages 437–448, 2016.
[21] Bo Feng, Alejandro Mera, and Long Lu. P2im: Scalable and hardware-
independent ﬁrmware testing via automatic peripheral interface model-
ing. In Proceedings of Usenix Security Symposium, 2020.
[22] Matheus E Garbelini, Chundong Wang, Sudipta Chattopadhyay, Sun
Sumei, and Ernest Kurniawan. Sweyntooth: Unleashing mayhem over
bluetooth low energy. In 2020 {USENIX} Annual Technical Conference
({USENIX} {ATC} 20), pages 911–925, 2020.
[23] GEOLINK. OpenTracker - 100% Arduino compatible GPS/GLONASS
https://github.com/geolink/opentracker,
vehicle tracker.
2020.
[24] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. Automated
whitebox fuzz testing. In NDSS, volume 8, pages 151–166, 2008.
[25] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind
Machiry, Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon,
Yung Ryn Choe, Christophe Kruegel, et al. Toward the analysis of em-
bedded ﬁrmware through automated re-hosting. In 22nd International
Symposium on Research in Attacks, Intrusions and Defenses ({RAID}
2019), pages 135–150, 2019.
2022    30th USENIX Security Symposium
USENIX Association
[26] HUAWEI. Huawei LiteOS. https://www.huawei.com/minisite/
liteos/cn/index.html, 2020.
[27] Markus Kammerstetter, Daniel Burian, and Wolfgang Kastner. Embed-
ded security testing with peripheral device caching and runtime pro-
gram state approximation. In 10th International Conference on Emerg-
ing Security Information, Systems and Technologies (SECUWARE),
2016.
[28] Markus Kammerstetter, Christian Platzer, and Wolfgang Kastner.
Prospect: peripheral proxying supported embedded code testing. In
Proceedings of the 9th ACM symposium on Information, computer and
communications security, pages 329–340, 2014.
[29] Ori Karliner. FreeRTOS TCP/IP Stack Vulnerabilities – The De-
tails. https://blog.zimperium.com/freertos-tcpip-stack-v
ulnerabilities-details/, December 2018.
[30] Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin
Jang, and Yongdae Kim. Firmae: Towards large-scale emulation of iot
ﬁrmware for dynamic analysis. In Annual Computer Security Applica-
tions Conference, pages 733–745, 2020.
[31] James C King. Symbolic execution and program testing. Communica-
tions of the ACM, 19(7):385–394, 1976.
[32] Karl Koscher, Tadayoshi Kohno, and David Molnar. Surrogates: En-
abling near-real-time dynamic analyses of embedded systems. In 9th
USENIXWorkshop on Offensive Technologies (WOOT 15), 2015.
[33] A. Mera, B. Feng, L. Lu, and E. Kirda. Dice: Automatic emulation
of dma input channels for dynamic ﬁrmware analysis. In 2021 2021
IEEE Symposium on Security and Privacy (SP), pages 302–318, Los
Alamitos, CA, USA, may 2021. IEEE Computer Society.
[34] Marius Muench, Dario Nisi, Aurélien Francillon, and Davide Balzarotti.
Avatar2: A multi-target orchestration platform. In Proc. Workshop
Binary Anal. Res.(Colocated NDSS Symp.), volume 18, pages 1–11,
2018.
[35] Marius Muench, Jan Stijohann, Frank Kargl, Aurélien Francillon, and
Davide Balzarotti. What you corrupt is not what you crash: Challenges
in fuzzing embedded devices. In NDSS, 2018.
[36] Philips. Philips Hue.
2020.
https://www.philips-hue.com/en-us,
[37] Jan Ruge, Jiska Classen, Francesco Gringoli, and Matthias Hollick.
Frankenstein: Advanced wireless fuzzing to exploit new bluetooth
escalation targets. In 29th {USENIX} Security Symposium ({USENIX}
Security 20), pages 19–36, 2020.
[38] Samsung. SmartThings Developer. https://smartthings.develo
per.samsung.com/, 2020.
[39] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and
Dmitriy Vyukov. AddressSanitizer: A Fast Address Sanity Checker.
In Proceedings of the 2012 USENIX Conference on Annual Technical
Conference (ATC’12), 2012.
[40] Ben Seri, Gregory Vishnepolsky, and Dor Zusman. Critical vulnera-
bilities to remotely compromise VxWorks, the most popular RTOS.
Technical report, ARMIS, INC., 2019.
[41] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher
Kruegel, and Giovanni Vigna. Firmalice-automatic detection of authen-
tication bypass vulnerabilities in binary ﬁrmware. In NDSS, 2015.
[42] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang,
Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. Charm: Facili-
tating dynamic analysis of device drivers of mobile systems. In 27th
USENIX Security Symposium, pages 291–307, 2018.
[43] TP-LINK. KASA.
/kasa.html, 2020.
https://www.tp-link.com/us/kasa-smart
[44] Erik van der Zalm et.al. Marlin Firmware. https://marlinfw.org/,
2020.
[45] Zalewski, Michal. American Fuzzy Lop. http://lcamtuf.coredu
mp.cx/afl/, 2010.
Table 3: Number of entries for each cache type in the KB
Conditional Regs. Read by Firmware
Regs. Read by Firmware
Firmware
CNC
Console
Drone
Gateway
Heat_Press
PLC
Reﬂow_Oven
Robot
Soldering_Iron
Steering_Control
6LoWPAN_Sender
6LoWPAN_Receiver
RF_Door_Lock
Thermostat
XML_Parser
GPS_Tracker
LiteOS_IoT
Zepyhr_SocketCan
3Dprinter
µµµtasker_MODBUS
µµµtasker_USB
T0
37
12
32
47
5
14
27
19
38
6
18
18
21
19
26
11
36
23
26
43
29
517
T1
8
11
6
15
14
4
8
4
14
17
29
29
14
18
11
16
9
12
16
18
31
304
T2 T3 Total T0
3
0
2
0
2
0
6
0
0
0
1
0
4
0
2
1
11
1
0
0
3
0
0
3
5
2
5
2
3
0
1
0
2
2
1
0
0
1
5
1
5
0
9
65
48
23
39
63
20
18
35
25
54
23
48
48
38
40
37
28
47
35