### Introduction to Peripheral Access Emulation

Laelaps, a tool designed to infer appropriate responses to unknown peripheral accesses, operates in symbolic execution mode for a limited duration (less than six basic blocks, as per the paper) before the path explosion problem significantly impacts its performance. Consequently, after this short period, any peripheral input must be concretized and cannot be involved in further constraint solving. This limitation means that Laelaps can only identify the "best" short-term paths, which may not be valid in the long run. Additionally, Laelaps lacks caching, causing every peripheral access to trigger the symbolic execution engine, leading to unacceptable performance overhead. For instance, in fuzzing synthesized vulnerable firmware, Laelaps executed fewer than 1,000 test cases in an hour [16]. This low performance is particularly problematic for fuzzing, which relies on a high number of executions per second.

### PRETENDER: Machine Learning and Pattern Recognition

PRETENDER [25] observes interactions between hardware and firmware and uses machine learning and pattern recognition to create models of peripherals. It requires real devices to collect these interactions, making it less scalable for firmware written for less popular MCUs. Furthermore, the analyzed firmware cannot activate additional peripheral features beyond those already learned from real devices.

### P2IM: Categorization-Based Response Generation

P2IM [21] generates responses to peripheral accesses based on categorization information. It observes the access patterns of peripherals and relies on expert-provided heuristics to categorize each register. Mis-categorization can significantly affect P2IM's accuracy, especially with complex peripherals like USB, CAN, and Radio, as discussed in Section 5.3. Additionally, P2IM struggles to generate responses for many types of registers, particularly status registers, due to the vast search space. For example, if the firmware waits for a status register to have multiple bits set, P2IM may never find the expected value, as detailed in Appendix 5.3.

### HALucinator: High-Level Abstraction Layer Emulation

HALucinator [19] avoids peripheral emulation by replacing high-level hardware abstraction layer (HAL) functions with host implementations. This approach does not model peripherals, making a direct comparison with µEmu, P2IM, or Laelaps somewhat unfair. By replacing HAL functions with host functions, HALucinator bypasses low-level implementation details such as DMA. However, this also means that bugs in low-level drivers are not exposed. Moreover, building a comprehensive database of HAL libraries requires collaboration from major MCU vendors. SoCs with proprietary SDKs, such as Samsung SmartThings [38] and Philips [36], cannot be supported by HALucinator. Given the distinct advantages and disadvantages of HALucinator and µEmu/P2IM/Laelaps, a combination of these tools could potentially create a state-of-the-art solution for analyzing MCU firmware. Specifically, HALucinator can match and hook HAL functions with host implementations, while µEmu, P2IM, or Laelaps can handle unknown peripheral accesses during runtime.

### µEmu: Integration with S2E

Apart from its emulation capabilities, µEmu offers a significant advantage through its tight integration with S2E, a platform for software analysis. This integration provides access to a wide range of plugins, and analysts can develop new plugins to integrate other dynamic analysis mechanisms.

### Conclusions

This paper introduces µEmu, a tool designed to emulate firmware execution to detect bugs in task code, particularly those caused by malformed inputs from I/O interfaces. µEmu automatically finds appropriate responses for unknown peripheral accesses, enabling the execution of MCU firmware in an emulated environment without requiring real hardware. The algorithm leverages symbolic execution to discover new paths and uses invalidity checking to ensure the firmware does not enter an invalid state. During the knowledge extraction phase, µEmu learns and stores appropriate values for peripheral access, allowing efficient responses to peripheral reading operations for dynamic analysis. We have implemented our idea on top of S2E and developed a fuzzing plugin. Evaluation results show that µEmu is capable of emulating real-world firmware and finding new bugs.

### Acknowledgments

We would like to thank our shepherd William Enck and the anonymous reviewers for their valuable feedback. Special thanks to Bo Feng for providing the firmware samples used in P2IM [21] and for his guidance on configuring P2IM. We also thank Vitaly Chipounov for his assistance in adding ARM support to S2E. Wei Zhou and Yuqing Zhang were supported by the National Natural Science Foundation of China (U1836210) and CSC scholarship. Le Guan was partially supported by JFSG from the University of Georgia Research Foundation, Inc. Peng Liu was supported by ARO W911NF-13-1-0421 (MURI), NSF CNS-1814679, and NSF CNS-2019340.

### References

[1] HALucinator firmware samples. https://github.com/ucsb-seclab/hal-fuzz/tree/master/tests.
[2] P2IM real-world firmware samples. https://github.com/RiS3-Lab/p2im-real_firmware.
[3] P2IM unit test samples. https://github.com/RiS3-Lab/p2im-unit_tests/tree/30e6aec9f5c44f11b8072bf597eb80729dad417d.
[4] Pretender firmware samples. https://github.com/ucsb-seclab/pretender/tree/master/test_programs/max32600.
[5] Bug Report: Critical memory leak in DSPI Master Peripheral Driver in combination with FreeRTOS. https://community.nxp.com/t5/Kinetis-Software-Development-Kit/Bug-Report-Critical-memory-leak-in-DSPI-Master-Peripheral-Driver/m-p/374518, 2020.
[6] LiteOS Partner Development Kits. https://github.com/LiteOS/LiteOS_Partner_Development_Kits, 2020.
[7] µTasker. https://www.utasker.com/index.html, 2020.
[8] µTasker MODBUS Extension Module. https://www.utasker.com/modbus.html, 2020.
[9] µTasker USB Demo. https://www.utasker.com/docs/uTasker/uTaskerV1.3_USB_Demo.PDF, 2020.
[10] S2E: A Platform for In-Vivo Analysis of Software Systems. https://s2e.systems/, 2020.
[11] S2E official Issue of ARM Support. https://github.com/S2E/s2e-env/issues/268, 2020.
[12] Socket CAN Sample. https://docs.zephyrproject.org/latest/samples/net/sockets/can/README.html, 2020.
[13] Top 10 Microcontrollers (MCU) Manufacturers for 2020. https://www.bisinfotech.com/top-10-microcontrollers-mcu-manufacturers-2020/, 2020.
[14] Zephyr. https://www.zephyrproject.org/, 2020.
[15] Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In OSDI, volume 8, pages 209–224, 2008.
[16] Chen Cao, Le Guan, Jiang Ming, and Peng Liu. Device-agnostic firmware execution is possible: A concolic execution approach for peripheral emulation. In Annual Computer Security Applications Conference, pages 746–759, 2020.
[17] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. Towards automated dynamic analysis for Linux-based embedded firmware. In NDSS, volume 16, pages 1–16, 2016.
[18] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. S2E: A platform for in-vivo multi-path analysis of software systems. ACM Sigplan Notices, 46(3):265–278, 2011.
[19] Abraham A Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen, David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer. Halucinator: Firmware re-hosting through abstraction layer emulation. In 29th USENIX Security Symposium, pages 1–18, 2020.
[20] Andrei Costin, Apostolis Zarras, and Aur’elien Francillon. Automated dynamic firmware analysis at scale: a case study on embedded web interfaces. In Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security, pages 437–448, 2016.
[21] Bo Feng, Alejandro Mera, and Long Lu. P2IM: Scalable and hardware-independent firmware testing via automatic peripheral interface modeling. In Proceedings of Usenix Security Symposium, 2020.
[22] Matheus E Garbelini, Chundong Wang, Sudipta Chattopadhyay, Sun Sumei, and Ernest Kurniawan. Sweyntooth: Unleashing mayhem over Bluetooth Low Energy. In 2020 USENIX Annual Technical Conference (USENIX ATC 20), pages 911–925, 2020.
[23] GEOLINK. OpenTracker - 100% Arduino compatible GPS/GLONASS vehicle tracker. https://github.com/geolink/opentracker, 2020.
[24] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. Automated whitebox fuzz testing. In NDSS, volume 8, pages 151–166, 2008.
[25] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry, Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon, Yung Ryn Choe, Christophe Kruegel, et al. Toward the analysis of embedded firmware through automated re-hosting. In 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2019), pages 135–150, 2019.
[26] HUAWEI. Huawei LiteOS. https://www.huawei.com/minisite/liteos/cn/index.html, 2020.
[27] Markus Kammerstetter, Daniel Burian, and Wolfgang Kastner. Embedded security testing with peripheral device caching and runtime program state approximation. In 10th International Conference on Emerging Security Information, Systems and Technologies (SECUWARE), 2016.
[28] Markus Kammerstetter, Christian Platzer, and Wolfgang Kastner. PROSPECT: Peripheral proxying supported embedded code testing. In Proceedings of the 9th ACM symposium on Information, computer and communications security, pages 329–340, 2014.
[29] Ori Karliner. FreeRTOS TCP/IP Stack Vulnerabilities – The Details. https://blog.zimperium.com/freertos-tcpip-stack-vulnerabilities-details/, December 2018.
[30] Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin Jang, and Yongdae Kim. Firmae: Towards large-scale emulation of IoT firmware for dynamic analysis. In Annual Computer Security Applications Conference, pages 733–745, 2020.
[31] James C King. Symbolic execution and program testing. Communications of the ACM, 19(7):385–394, 1976.
[32] Karl Koscher, Tadayoshi Kohno, and David Molnar. Surrogates: Enabling near-real-time dynamic analyses of embedded systems. In 9th USENIX Workshop on Offensive Technologies (WOOT 15), 2015.
[33] A. Mera, B. Feng, L. Lu, and E. Kirda. DICE: Automatic emulation of DMA input channels for dynamic firmware analysis. In 2021 IEEE Symposium on Security and Privacy (SP), pages 302–318, Los Alamitos, CA, USA, May 2021. IEEE Computer Society.
[34] Marius Muench, Dario Nisi, Aurélien Francillon, and Davide Balzarotti. Avatar2: A multi-target orchestration platform. In Proc. Workshop Binary Anal. Res. (Colocated NDSS Symp.), volume 18, pages 1–11, 2018.
[35] Marius Muench, Jan Stijohann, Frank Kargl, Aurélien Francillon, and Davide Balzarotti. What you corrupt is not what you crash: Challenges in fuzzing embedded devices. In NDSS, 2018.
[36] Philips. Philips Hue. https://www.philips-hue.com/en-us, 2020.
[37] Jan Ruge, Jiska Classen, Francesco Gringoli, and Matthias Hollick. Frankenstein: Advanced wireless fuzzing to exploit new Bluetooth escalation targets. In 29th USENIX Security Symposium (USENIX Security 20), pages 19–36, 2020.
[38] Samsung. SmartThings Developer. https://smartthings.developer.samsung.com/, 2020.
[39] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy Vyukov. AddressSanitizer: A Fast Address Sanity Checker. In Proceedings of the 2012 USENIX Conference on Annual Technical Conference (ATC’12), 2012.
[40] Ben Seri, Gregory Vishnepolsky, and Dor Zusman. Critical vulnerabilities to remotely compromise VxWorks, the most popular RTOS. Technical report, ARMIS, INC., 2019.
[41] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. Firmalice: Automatic detection of authentication bypass vulnerabilities in binary firmware. In NDSS, 2015.
[42] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang, Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. CHARM: Facilitating dynamic analysis of device drivers of mobile systems. In 27th USENIX Security Symposium, pages 291–307, 2018.
[43] TP-LINK. KASA. https://www.tp-link.com/us/kasa-smart/kasa.html, 2020.
[44] Erik van der Zalm et al. Marlin Firmware. https://marlinfw.org/, 2020.
[45] Zalewski, Michal. American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/, 2010.

### Table 3: Number of Entries for Each Cache Type in the KB

| Conditional Regs. Read by Firmware | Regs. Read by Firmware | Firmware | CNC | Console | Drone | Gateway | Heat_Press | PLC | Reflow_Oven | Robot | Soldering_Iron | Steering_Control | 6LoWPAN_Sender | 6LoWPAN_Receiver | RF_Door_Lock | Thermostat | XML_Parser | GPS_Tracker | LiteOS_IoT | Zephyr_SocketCan | 3Dprinter | µtasker_MODBUS | µtasker_USB | T0 | T1 | T2 | T3 | Total |
|-------------------------------------|-------------------------|-----------|------|----------|-------|----------|-------------|------|--------------|--------|-----------------|------------------|-----------------|-------------------|---------------|--------------|-------------|--------------|------------|-----------------|------------|-----------------|-------------|----|----|----|----|-------|
| 37                                  | 12                      | 32        | 47   | 5        | 14    | 27       | 19          | 38   | 6            | 18     | 18              | 21               | 19              | 26                | 11            | 36           | 23          | 26           | 43         | 29              | 517        | 8  | 11 | 6  | 15 | 14    | 4  | 8  | 4  | 14 | 17  | 29  | 29  | 14  | 18  | 11  | 16  | 9  | 12  | 16  | 18  | 31  | 304  | 3  | 0  | 2  | 0  | 2  | 0  | 6  | 0  | 0  | 0  | 1  | 0  | 4  | 0  | 2  | 1  | 11  | 1  | 0  | 0  | 3  | 0  | 0  | 3  | 5  | 2  | 5  | 2  | 3  | 0  | 1  | 0  | 2  | 2  | 1  | 0  | 0  | 1  | 5  | 1  | 5  | 0  | 9  | 65  | 48  | 23  | 39  | 63  | 20  | 18  | 35  | 25  | 54  | 23  | 48  | 48  | 38  | 40  | 37  | 28  | 47  | 35  |

---

This optimized version of the text aims to improve clarity, coherence, and professionalism.