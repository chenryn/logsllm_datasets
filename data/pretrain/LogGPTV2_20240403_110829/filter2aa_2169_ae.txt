class A{
    public:
        void print();
声明同名的数据成员会作为新的变量出现：
访问声明
访问声明用来个别调整基类成员在派生类中保持原来（原来的访问属性不可改变）的访问属性。
声明方法是：把基类成员写在派生类中，同时给成员名前加上 基类名：： ，访问声明中不带有类型和参
数
数据成员也可以访问声明。
对于重载函数名，访问声明将对所有同名函数生效。
};
class B: public A{
    public:
        void print(){
            A::print();
            cout 
using namespace std;
class base {
public:
    int i;
    base(int x):i(x){}
};
class derived :private base {
public:
    derived(int a,int b) :base(a),i(b){}
    int i;
};
int main() {
    derived A(2,4);
    cout 
#include
using namespace std;
class base {
private:
    int a;
public:
    base(int a):a(a){
        cout 
using namespace std;
class base {
protected:
    int a;
public:
    base(int a1) {
        a = a1;
        cout 
using namespace std;
class base {
public:
    int i;
    base(int x) {
        i = x;
    }
    void show() {
        cout show();
    fun(op2);//派生类对象可以代替基类对象作为函数参数
    return 0;
}
base:23
base:23
base:23
23
多态性是指不同对象接收到相同消息执行不同的操作
程序编译过程分为静态联编和动态联编
静态联编支持多态性通过重载（函数重载[第二章]，运算符重载）实现
动态联编支持多态性通过虚函数实现
运算符重载
运算符的重载通过创建运算符重载函数来实现。可以是如下几种：
在类外定义的运算符重载函数
类的成员函数
类的友元函数
运算符重载用于简化类的对象与其他数据进行运算的操作
在类外定义的运算符重载函数
这种运算符重载函数仅能用于操作类的公有成员，私有成员和保护成员需要用到类的成员重载函数和友
元函数。
定义方法：定义函数名为operator@(@表示运算符，可以是+-*/...等)的函数
说明：
1. 只有以下运算符不允许重载：
2. 只能对C++已有的运算符进行重载，不能新定义运算符
3. 重载不能改变运算符的
1. 操作对象
2. 优先级
3. 结合特性
4. 运算符重载函数的参数需要至少有一个是类对象
5. 运算符重载函数可以是普通函数，类的成员函数，类的友元函数
6. 一般用作类的运算符必须重载
7. 赋值运算符 = ，默认有重载，功能是赋值
示例：
友元运算符重载
定义形式有两种：
1. 在类内定义
2. 在类外定义，在类内声明友元函数原型（类外的重载函数不属于成员）
定义方式同普通友元函数一样，详见第二章
对双目运算符重载需要两个参数
.   成员访问运算符
.*  成员访问指针运算符
::  作用域运算符
sizeof 长度运算符
?:  条件运算符
#include
using namespace std;
class complex {