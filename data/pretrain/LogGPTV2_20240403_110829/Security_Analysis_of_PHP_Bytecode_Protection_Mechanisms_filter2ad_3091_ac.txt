zend execute().
3.5 Security Vulnerabilities in Loader Extensions
Protecting a PHP application can prevent intellectual property theft and mod-
iﬁcation when shipped to a customer. At the same time, however, it prohibits
that the customer can review the code before it is deployed and run on his
server. In order to mitigate risks, PHP mechanisms such as safe mode and
disable functions can be activated that can forbid OS interaction, such as
executing system commands, when running unknown protected PHP code.
During the process of reverse engineering, we detected memory corruption
vulnerabilities in each of the loader extension. By crafting a malicious PHP ﬁle,
it is possible to corrupt the loader’s parser and to inject shellcode. While these
vulnerabilities are not remotely exploitable, they allow a protected application to
bypass PHP’s security mechanisms and to execute arbitrary system commands
with user privileges of the web server. We informed ionCube, Zend Guard, and
SourceGuardian about these issues.
Furthermore, we detected an undocumented feature in SourceGuardian which
allows to leak the license information. By sending the HTTP GET parameter
to a protected application, it responds with the encoder version,
sginfo
registration date, license owner, and date of encoding.
4 Generic Deobfuscation via Dynamic Analysis
We now introduce two dynamic approaches to analyze protected PHP applica-
tions. Our goal is to retrieve information about the original code by circum-
venting deployed encryption or obfuscation layers at runtime. We tested both
approaches against ionCube, Zend Guard, and SourceGuardian and found all
tools to be vulnerable against both attacks.
4.1 Debugging
A straight-forward approach to analyze protected PHP code is to include it
into the context of own code that uses PHP’s built-in debug functions to leak
information about the current runtime environment. For example, the functions
get defined vars(), get defined functions(), get declared classes(),
and get class methods(), as well as PHP’s built-in ReflectionClass allow to
Security Analysis of PHP Bytecode Protection Mechanisms
505
retrieve a list of all variables, user-deﬁned functions, classes, and methods. Once
obtained, variables can be dumped and functions can be called as a blackbox
with diﬀerent input in order to obtain further information. All three tested tools
have an option to prevent the inclusion of compiled code within an untrusted
context to prevent this analysis, but this is disabled by default.
4.2 Hooking
A more sophisticated approach is to hook [10] internal PHP functions in order to
retrieve the complete bytecode before it is executed. As explained in Sect. 3, Zend
Guard and ionCube replaces the zend compile file() function. It returns the
decoded and decrypted bytecode of a given ﬁle. We can use these functions as a
black box in order to retrieve the deobfuscated opcode arrays without knowledge
of the loaders’ inner working. Bytecode from SourceGuardian ﬁles cannot be
obtained this way because it does not replace zend compile file().
However, every product passes the deobfuscated opcode arrays as an argu-
ment to zend execute() (see Fig. 1, dashed arrow). By hooking this function,
we can interrupt the execution and obtain the main opcode array. Opcode
arrays of methods and functions can be located with the help of PHP’s internal
compiler globals structure. This way, the raw PHP bytecode of applications
protected with SourceGuardian can be retrieved directly. For ionCube and Zend
Guard, further obfuscation has to be removed (see Sects. 3.2 and 3.3).
ionCube. To avoid opcode dumping, ionCube implements a runtime obfusca-
tion that XOR’s single opcodes before execution and XOR’s them again after-
wards. This ensures that only one opcode is deobfuscated at a time. Furthermore,
ionCube contains a copy of the native PHP engine and bytecode is processed
within the loader instead of the PHP VM. Consequently, the last step in Fig. 2
is omitted and ionCube’s internal zend execute() function needs to be hooked
for dynamic analysis.
The executed instructions are obfuscated with two techniques. First, the
opcode number, the handler address, and the operands of all opcodes are
encrypted with XOR. Second, numeric operands of assignments are obfuscated
by mathematical operations with constants. The reserved variable of the opcode
array references to an ionCube structure which contains the keys for opcode
decryption (see Sect. 3.2) and assignment deobfuscation. Each opcode is XOR’ed
with a diﬀerent key which is referenced by the opcode index. Then, the opcode
is executed and obfuscated again using the same XOR operation. By retrieving
all keys from the ionCube structure, we are able to deobfuscate all opcodes.
Zend Guard. When a PHP ﬁle is parsed, the opcode number is used by
the PHP interpreter to resolve the handler’s address. As noted in Sect. 3.3,
Zend Guard removes the opcode number before passing the bytecode to
zend execute(). In order to recover the opcode number again, we can search the
506
D. Weißer et al.
present handler address in the opcode lookup table. This is achieved by calculat-
ing the index of all existent opcodes (see Formula 1 in Sect. 2.2) and comparing
it to the index of the current address.
5 Decompiler for Obfuscated PHP Bytecode
Using the insights introduced in Sect. 3 and the techniques presented in Sect. 4.2,
we implemented a decompiler. For this purpose, we set up a PHP environment
with the three loader extensions as well as a custom PHP extension. The decom-
pilation is performed in three steps. First, we hook PHP’s executor in order to
access the bytecode. Second, we remove all remaining obfuscation and dump the
bytecode to a ﬁle. Third, the dumped bytecode is decompiled into PHP syntax.
It is also possible to statically recover the PHP bytecode from the protected PHP
ﬁle without execution by using the insights presented in Sect. 3. However, the
implementation of a version-speciﬁc parser for each loader extension is required,
while the dynamic approach can be applied generically.
5.1 Hooking
Our PHP extension hooks the zend execute() function by replacing it with our
own implementation. Then, we execute each ﬁle of a protected PHP application
in our PHP environment. As explained in Sect. 3, the corresponding loader exten-
sion now hooks zend compile file() and extracts the PHP bytecode from the
proprietary binary format. When the bytecode is passed to zend execute(),
our extension terminates the execution. Because SourceGuardian does not hook
zend compile file() and implements the native PHP function sg load(), we
here intercept only the second invocation of zend execute(). This way, we allow
the initial execution of sg load() that performs the initial decryption and deob-
fuscation of the bytecode, before it is passed to zend execute() again.
5.2 Dumping
For ionCube and Zend Guard, we perform further bytecode deobfuscation as
described in Sect. 4.2. Then, the bytecode is free of any encoder-speciﬁc modiﬁ-
cations. Each opcode array contains several data structures which are referred
by the operands (see also Sect. 2.2). Operands of type VAR and CV refer to vari-
ables with a name which is stored within the vars structure. Constants are used
by operands of type CONST and can be found within the literals structure.
Opcodes themselves are stored in the opcodes structure. If the opcode array
represents a function, the parameters are available in the structure arg info.
We begin dumping the main opcode array and continue with user deﬁned func-
tions. Classes are stored in an own structure that basically contain information
about member variables and the method table. After dumping the bytecode into
a ﬁle, it can be deployed to our decompiler for further processing.
Security Analysis of PHP Bytecode Protection Mechanisms
507
5.3 Decompilation
Next, each instruction is inspected and transformed into the corresponding
source code representation. The opcodes can be grouped into one of three dif-
ferent types of instructions:
1. Expressions are instructions which produce temporary values that are used
as operands by other instructions, for example, a mathematical operation.
2. Statements are instructions that cannot be used as an expression and do
not have a return value, for example an echo or break statement.
3. Jumps are special cases of statements. They defer the execution by a jump
and represent a loop or conditional code.
In general, the best way of decompiling bytecode back into source code is to cre-
ate a graph by connecting separated basic blocks such that each part of the code
can be converted separately [1,2,12]. However, this approach is out of scope for
this paper. For our proof of concept, we follow a simpler approach: our decompiler
is based on a pattern recognition approach that ﬁnds jump and loop structures.
Empirically we found that this approach is already suﬃcient to recover most
PHP source code.
Our approach consists of two steps. First, we iterate over all opcodes in
order to reconstruct expressions and statements. During this process, ternary
operators and arrays are rebuilt and coherent conditions are merged. Afterwards,
we remain with PHP source code and jump instructions. Finally, we try to ﬁnd
patterns of commonly used jump and loop structures in order to reassemble the
control ﬂow.
The code in Table 3 provides an example of PHP bytecode. Here, we ﬁrst
buﬀer the PHP syntax of the ADD expression stored in TMP:1 (op1+op2). Next, the
ﬁrst line of code is recovered by resolving the operand TMP:1 in the assignment of
variable $test. Further, we construct the greater-than constraint created from
the variable $test and the constant value 500 (op1>op2). Then, the operand
TMP:2 can be resolved in line 4. In the next line, we create the echo statement.
We ignore the JMP for now and ﬁnish with the transformation of the return
Table 3. Exemplary bytecode with decompiled syntax.
# Opcode
Operand1 Operand2 Result Code
1 ADD
2 ASSIGN
222
$test
333
TMP:1
TMP:1
3
IS GREATER $test
500
TMP:2
4 JMPZ
5 ECHO
6 JMP
TMP:2
JMP:7
$test
JMP:7
7 RETURN
1
$test = 222 + 333;
if ($test>500) {
echo $test;
}
return 1;
508
D. Weißer et al.
statement. When all expressions and statements are processed, we begin with
ﬁnding patterns by processing the jump operands. In our example, we recognize
the JMPZ in line 4 that jumps to the same location as the following JMP in line 6
as an if construct.
Similarly, we can recognize more complex if/else constructs. As shown
previously, a single if block without an else branch is identiﬁed by a conditional
jump instruction that skips upcoming statements in case the condition fails.
Unoptimized bytecode has a JMP instruction inside the if block that jumps
to the next instruction after the if block. In this particular case, the second
jump is unnecessary for execution but helps to recognize the pattern. If this JMP
instruction would skip upcoming statements instead, these statements would be
assigned to an elseif/else block.
In PHP bytecode, for loops have an unique pattern. The overall layout
comprises a loop constraint, a JMPZNZ, an iteration expression, a JMP, followed
by the loop body and a ﬁnal JMP. The JMPZNZ operation has two jump locations
stored in its operands. The ﬁrst jump is taken in case of a zero value, and the
second one otherwise. The second location points behind the loop body. The
interpreter jumps to this location when the condition of the JMPZNZ instruction
does not match. The bytecode at the ﬁrst location represents the start of the loop
body. The JMP instruction at the body’s end jumps back to the loop’s constraint.
Similarly, while loops can be detected. Here, a constraint is followed by a
JMPZ instruction that points behind the loop’s body. Then, the loop’s body fol-
lows which ends with a JMP instruction that points back to the loop’s constraint.
More convenient is the recognition of foreach loops. Here, the rare opcode
FE RESET is used to reset an array’s pointer and then a FE FETCH opcode follows
to fetch the current array’s element. Then, the loop body follows that ends with
a JMP instruction. The initial FE opcodes both have a jump location stored in
their second operand. This location points behind the last JMP instruction in the
loop’s body and it is accessed when the loop is ﬁnished. The JMP instruction
itself points back to the FE FETCH opcode.
In order to resolve nested constructs, our algorithm uses an inside out app-
roach in several iterations. We mark sustained patterns as resolved and repeat
our pattern matching algorithm until no new patterns are detected. This way,
in a nested construct, the most inner pattern is resolved ﬁrst, followed by the
identiﬁcation of the outer pattern in the next iteration.
Our pattern matching approach works very well on unoptimized bytecode
since PHP adds redundant opcodes that ease the recognition process. Unfortu-
nately, these patterns can change when bytecode optimization is enabled. Here,
redundant operations are removed, structures are compressed, and targets of
jump operations are pre-resolved. This makes it signiﬁcantly harder to ﬁnd and
decompile structures. To overcome such limitations, a more elaborated decom-
piler design could be implemented in the future [2].
Parts of our approach for reconstructing expressions and statements into
source code could be adopted for other register-based virtual machines. While
simple opcodes, such as for addition or concatenation, can be compared to other
Security Analysis of PHP Bytecode Protection Mechanisms
509
languages, complex opcodes, such as for the access of arrays, are very PHP
speciﬁc. For stack-based bytecode, as used in Java, Python, or Perl, the operands
have to be resolved from the stack ﬁrst. Our pattern matching approach for the
evaluation of code structures bases on artifacts found in PHP bytecode and thus
is not directly applicable to other languages.
6 Evaluation
We evaluate our decompiler in two steps. First, we try to quantify our decom-
pilation results by encoding a set of known source code and comparing the
decompiled code to the original version. Then, we test our decompiler against
10 protected real-world applications and try to recover unknown source code.
6.1 Source Code Reconstruction
Measuring the quality of decompiled PHP code is hard and, to the best of our
knowledge, no code similarity algorithm for PHP exists. While the code’s seman-
tic remains after decompilation, the syntax changes due to PHP’s native and the
encoders’ additional bytecode optimization. Due to limitations of our proof of
concept implementation (see Sect. 5.3), our prototype does not always produce
syntactically correct code and a comparison of successful unit tests of a decom-
piled application is not applicable. Hence, we developed a basic metric based on
PHP tokens [23]. We categorized all tokens into one of seven groups:
1. DATA: tokens of literals, constants, and variables (T VARIABLE)
2. EQUAL: tokens of assignment operators, such as T PLUS EQUAL
3. COMP: tokens of comparison operators, such as T EQUAL and T ISSET
4. CAST: tokens of type casts, such as T INT CAST and T STRING CAST
5. INCL: tokens of include statements, such as T INCLUDE and T REQUIRE
6. PROC: tokens of procedural code, such as T FUNCTION and T NEW
7. FLOW: tokens of jump and loop statements, such as T IF and T WHILE
Tokens that do not fall into one of these categories were ignored. We also ignored
encapsulated variables and constants, comments, whitespaces, logical operators,
and inline HTML. Next, we compiled the three most popular PHP projects
Wordpress, Drupal, and Joomla with the most complex encoder ionCube with
default optimization level. Then, we used our prototype for decompiling the
protected code again. We used PHP’s built-in tokenizer [24] to collect the number
of tokens in all PHP ﬁles of the original and the recovered source code and
calculated the individual success rate for each token. In Table 4, we list the
average similarity of each token category that was weighted by token popularity
in each group. We observed a very similar amount for tokens that are not part
of optimization. As expected, the number of tokens for optimized instructions
or loops (FLOW) vary more signiﬁcantly. Based on our results, we estimate a
successful reconstruction rate of about 96 %.
510
D. Weißer et al.
Table 4. Average token similarity (in %) for three compiled/decompiled applications.
Software
Version EQUAL DATA COMP CAST INCL FLOW PROC
Wordpress 4.2.2
Joomla
Drupal
3.4.1