# 尽可能详细的文件上传讲解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
大部分看到这篇文章的人应该都明白什么是文件上传，文件上传是攻击非常常见的方式，网上也有非常多的优秀文章，不过还是想自己整理+归纳+总结+讲解一篇关于文件上传的文章
这里借助一个靶场总结了一下常见的文件上传漏洞类型，在平时的业务、实战或CTF中可能会遇到这个漏洞，在做靶场时应该抱着学习此类型及其相关技术为目的，不要单纯拿结果
因为lmn有做过几遍upload-labs master靶场的题目，而且靶场囊括的类型也比较全面，这里也就结合了靶场的题目
## 0x01 upload-labs master的安装
“upload-labs master”这个靶场在接触文件上传的人应该都听过，lmn也做了几遍整理过笔记，毕竟网上教程这么多这里就简单总结一下
下面借助了很多靶场中的题目，可以自行安装
下载地址：
运行环境：
操作系统：windows、Linux
php版本：大部分都是推荐 5.2.17版本
别忘了新建一个upload
配置好就可以开始了！
## 0x02 前端JavaScript检测
这道题Pass-01就是利用前端校验，也属于客户端校验，经常碰到前端使用JS代码检测被上传文件的上传类型和文件大小，只有前端教研安全性很低，可以通过禁用JS来绕过
上传入口看到一个 onsubmit 参数，onsubmit是在表单提交之前调用，在我们点击提交之后，就会调用这个事件句柄函数，也就是 checkFile()
确定为js绕过代码
推荐一个很好用的禁止js的插件，叫NoScript，可以方便打开或禁止js
还有一种方法就是直接删掉checkFile()函数
## 0x03 检测文件类型
文件上传中文件类型的检测也比较常见比较好绕过，例如这么一段代码
$_FILES[‘upload_file’][‘type’] == ‘image/jpeg’
意思是判断文件类型是否等于image/jpeg，是的话提交成功，不是则通知用户提交失败
这里可以拓展一下php的$_FILES系统函数用法
  1. $_FILES[‘myFile’][‘name’] 表示文件的名称
  2. $_FILES[‘myFile’][‘type’] 表示文件的 MIME 类型
  3. $_FILES[‘myFile’][‘size’] 已上传文件的大小（单位：字节）
  4. $_FILES[‘myFile’][‘tmp_name’] 储存的临时文件名，一般是系统默认
  5. $_FILES[‘myFile’][‘error’] 该文件上传相关的错误代码，PHP4.2版本后增加的
**例如Pass-02（MIME 类型验证）这道题，尝试通过burp拦截包对Content-Type进行修改**
MIME全名叫多用途互联网邮件扩展(Multipurpose Internet
MailExtensions)，现在被应用到多种协议里，MIME的常见形式是一个主类型加一个子类型，用斜线分隔
  1. 百科给出的比较全面的类型：
  2. 超文本标记语言文本 .html text/html
  3. xml文档 .xml text/xml
  4. XHTML文档 .xhtml application/xhtml+xml
  5. 普通文本 .txt text/plain
  6. RTF文本 .rtf application/rtf
  7. PDF文档 .pdf application/pdf
  8. Microsoft Word文件 .word application/msword
  9. PNG图像 .png image/png
  10. GIF图形 .gif image/gif
  11. JPEG图形 .jpeg,.jpg image/jpeg
**Content-Type（内容类型）：用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件**
查看题目给出的源码进行分析，我添加上了一些注释，会的可以忽略，不会的可以参考
$is_upload = false;
$msg = null;
// isset()函数用于检测变量是否已设置并且非NULL
if (isset($_POST[‘submit’])) {
// file_exists() 函数检查文件或目录是否存在
// $UPLOAD_ADDR 为上传到哪个地址
if (file_exists($UPLOAD_ADDR)) {
// 必须满足 upload_file 的类型为’image/jpeg’或’image/png’或’image/gif’
if (($_FILES[‘upload_file’][‘type’] == ‘image/jpeg’) ||
($_FILES[‘upload_file’][‘type’] == ‘image/png’) ||
($_FILES[‘upload_file’][‘type’] == ‘image/gif’)) {
// move_uploaded_file() 函数将上传的文件移动到新位置
if (move_uploaded_file($_FILES[‘upload_file’][‘tmp_name’], $UPLOAD_ADDR . ‘/’
. $_FILES[‘upload_file’][‘name’])) {
$img_path = $UPLOAD_ADDR . $_FILES[‘upload_file’][‘name’];
$is_upload = true;
}
} else {
$msg = ‘文件类型不正确，请重新上传！’;
}
} else {
$msg = $UPLOAD_ADDR.’文件夹不存在,请手工创建！’;
}
}
## 0x04 根据文件头检测文件类型
### 根据文件内容类型
与上一个类似，检查文件的类型，但这个是通过检查文件的内容，根据文件的内容判断文件类型，这里就不能直接burp抓包修改Content-Type了
upload-labs master中有几道关于此类型的题，我们先看 Pass-14（图片马字节）这道
首先看一下题目给出的判断文件类型的源码：
function getReailFileType($filename){
// 为移植性考虑，强烈建议在用 fopen() 打开文件时总是使用 ‘b’ 标记。
$file = fopen($filename, “rb”);
// 只读2字节，fread单位为字节
$bin = fread($file, 2);
fclose($file);
// unpack() 函数从二进制字符串对数据进行解包
// 前面的参数表示在解包数据时所使用的格式
$strInfo = @unpack(“C2chars”, $bin);
// intval() 函数用于获取变量的整数值
$typeCode = intval($strInfo[‘chars1’].$strInfo[‘chars2’]);
$fileType = ”;
switch($typeCode){
case 255216:
$fileType = ‘jpg’;
break;
case 13780:
$fileType = ‘png’;
break;
case 7173:
$fileType = ‘gif’;
break;
default:
$fileType = ‘unknown’;
}
return $fileType;
}
其中最关键的读取代码为
$bin = fread($file, 2); //只读2字节
fclose($file);
根据源码知道只对文件的头2个字节做检测
这里就需要制作木马图片，然后上传即可
copy 1.jpg /b + 1l.php /a 1.jpg
/be为二进制，表示以二进制格式合并1.jpg和1l.php
也可以用winhex、010editor等工具在图片添加上图片的文件头
而Pass-15（图片马getimagesize）这题添加了getimagesize()函数，getimagesize()对目标文件的16进制去进行一个读取，可以伪造假图片，上传同14
Pass-16（图片马php_exif）
$image_type = exif_imagetype($filename);
exif_imagetype()函数是PHP中的内置函数，用于确定图像的类型(读取一个图像的第一个字节并检查其签名。如果发现了恰当的签名则返回一个对应的常量，否则返回
FALSE。)
上传同14
常见的头部对应关系比如（可以多总结一下）
.JPEG;.JPE;.JPG，”JPGGraphic File”
.gif，”GIF 89A”
.zip，”Zip Compressed”
.doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”
## 0x04 检测文件名进行过滤
### 黑名单绕过
黑名单校验就很不安全，很多网站会采用黑名单过滤的方法，但是又很容易就被绕过，例如用一些常见的扩展名就可以轻而易举绕过。
例如Pass-03（黑名单验证）这道题，首先分析源码
$is_upload = false;
$msg = null;
// isset() 用于检测变量是否已设置并且非NULL
// 判断是否存在通过POST方式提交过来的变量
if (isset($_POST[‘submit’])) {
// file_exists() 检查文件或目录是否存在
if (file_exists($UPLOAD_ADDR)) {
$deny_ext = array(‘.asp’,’.aspx’,’.php’,’.jsp’);
// trim() 函数移除字符串两侧的空白字符或其他预定义字符
// 空格、制表符 tab、换行符等等
$file_name = trim($_FILES[‘upload_file’][‘name’]);
// 删除文件名末尾的点
$file_name = deldot($file_name);
// 搜索 “.” 在字符串中的位置并返回从该位置到字符串结尾的所有字符
$file_ext = strrchr($file_name, ‘.’);
// 转换为小写
$file_ext = strtolower($file_ext);
// 去除字符串::$DATA
$file_ext = str_ireplace(‘::$DATA’, ”, $file_ext);
// 收尾去空
$file_ext = trim($file_ext);
该代码是对上传后的文件后缀进行检测，我们可以上传不在黑名单的文件后缀，.php3可以被解析成.php，前提是Apache的httpd.conf中配置有如下代码:
AddType application/x-httpd-php .php .php3 .phtml
常见的可执行文件的后缀：
  1. PHP: php2、php3、php5、phtml、pht
  2. ASP: aspx、ascx、ashx、cer、asa
  3. JSP: jspx
换后缀名上传成功
当然，针对这道题有一种非常巧妙的解题方法，也适用于一些其他道题，仔细分析中间那段代码
上传XXX.php. .
先将文件名最后的点删掉，再通过 strrchr() 函数返回最右边“.”的后面饿字符
strrchr() 函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符
这样上传的文件名就为 XXX.php. 因为在存储时会默认删掉这个点，也就可以上传成功
这里有个Tips：Apache的解析顺序是从右到左开始解析文件后缀的，如果最右侧扩展名不可识别，就继续往左判断。直到遇到可以解析的文件后缀为止