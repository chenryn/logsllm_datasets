### 第8章 掌握实用的Linux安全工具
#### 5. SMARTARP模式
- **适用范围**：SMARTARP模式通过ARP欺骗技术监听一台主机与所有特定主机之间的通信。由于采用了ARP欺骗技术，这种模式适用于交换网络环境下的监听。
- **参数**：使用 `-a` 选项、一个IP地址和一个主机列表来指定此模式。
- **特点**：在此模式下，不仅修改了被监听主机在指定主机ARP表中的MAC地址，还修改了指定主机的MAC地址，从而实现全双工功能的中间人攻击。在这种模式下，Ettercap不会通过广播方式发送ARP响应包，而是有选择地将这些包发送给主机列表中的主机，这样可以避免将用于修改被监听者MAC地址的ARP欺骗包发送给被监听者并引起IP地址冲突。

#### 8.3.3 案例分析：使用Ettercap的方法
为了更好地理解这些方法，我们将进行一些实战分析，以便更深入地了解Ettercap的相关功能。

1. **使用Ettercap进行ARP欺骗攻击的实例**
   - 实验室环境：包含以下机器：
     - 192.168.1.138：默认网关
     - 交换机型号：Cisco Catalyst 2900XL
     - 该环境是一个典型的交换网络环境（如图8.21所示）。

   - **假设攻击目标**：192.168.1.1（操作系统为Windows 2000 + SP3）

   - **步骤**：
     1. 在192.168.1.1上执行 `ipconfig` 和 `arp` 命令，查看默认网关和MAC地址。
        ```shell
        H:\> ipconfig
        Ethernet adapter Local Area Connection:
        Windows IP Configuration
        IP Address: 192.168.1.1
        Subnet Mask: 255.255.255.0
        Default Gateway: 192.168.1.138
        ```
     2. 启动ARP欺骗攻击后，在192.168.1.1上再次执行 `arp -a` 命令，会发现192.168.1.10（攻击机器）和192.168.1.138（默认网关）的MAC地址相同。
        ```shell
        H:\> arp -a
        Interface: 192.168.1.1 on Interface 0x1000003
        Internet Address      Physical Address      Type
        192.168.1.10          00-02-b3-20-23-c2     dynamic
        192.168.1.14          00-06-29-25-60-47     dynamic
        192.168.1.138         00-02-b3-20-23-c2     dynamic
        ```

     3. 成功欺骗后，尝试从192.168.1.1进行FTP会话（例如 `ftp ftp.inter.net.il`），可以看到Ettercap记录了FTP会话的所有数据，包括用户名和密码（如图8.23所示）。

2. **查看和修改网络数据包**
   - 通过ARP欺骗，被欺骗主机的数据流会被主动发送到监听主机。我们可以在转发之前修改这些数据包，只需重新计算校验和并替换原来的校验和即可。进一步，还可以插入或丢弃数据包，并通过比较查看数据变化。
   - 使用View菜单下的Statistics命令可以查看当前的数据情况（如图8.24所示）。

#### 注意事项
- 修改了某些主机的ARP表后，监听者需负责数据包转发任务。一旦监听者离开，被监听主机与其他主机的通信会受到影响，直到双方自主更新ARP表。
- 大量的ARP请求或响应数据包可能会触发基于网络的IDS报警。
- 个人防火墙（如ISS的黑冰）可能会对ARP欺骗数据包产生报警。
- 监听者离开时，被监听主机及其通信的主机会感到网络异常。

#### 8.4 轻松阻止Linux下的非法进程
随着开放和共享理念的传播，Linux操作系统逐渐应用于教育、政府、商业、军事等领域。然而，许多Linux系统运行在不安全的网络环境中，面临非法用户入侵的风险。恶意程序可能以合法进程为目标，导致系统无法正常工作甚至瘫痪。因此，掌握Linux系统的进程管理和监控技术至关重要。

#### 8.4.1 Linux下的快速进程管理
- **进程的概念**：当运行任何Linux命令时，Shell会创建至少一个进程来执行该命令。程序是磁盘上的静态实体，而进程则是操作系统中执行特定任务的动态实体。

- **进程生命周期**：
  1. **诞生**：现有进程使用 `fork()` 函数创建子进程，子进程继承父进程的数据空间、堆、栈等资源。
  2. **成长**：新进程通过 `exec()` 函数逐步成长并开始其任务。
  3. **死亡**：进程可以自然死亡（运行到main函数的末尾）、自杀（调用 `exit()` 函数）或他杀（被其他进程结束）。
  4. **结局**：进程死亡后留下僵尸进程，由 `wait()` 函数处理。

- **进程状态查看**：使用 `ps` 命令可以查看进程状态，确定哪些进程正在运行、挂起、已运行时间、资源使用情况、优先级及PID等信息（如图8.25所示）。

通过上述实践和掌握相关知识，我们可以更好地管理Linux系统中的进程，确保系统的安全和稳定运行。