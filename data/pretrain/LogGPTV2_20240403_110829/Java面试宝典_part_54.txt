### 8. Consumer Group
在同一个Consumer Group中的多个Consumer实例不会同时消费同一个partition，这类似于队列模式。每个partition内的消息是有序的，Consumer通过pull方式从broker拉取消息。Kafka不会删除已消费的消息，而是保留它们，并且通过顺序读写磁盘数据来实现时间复杂度为O(1)的消息持久化能力。

### 9. 如何获取topic主题列表
```bash
bin/kafka-topics.sh --list --zookeeper localhost:2181
```

### 10. 生产者和消费者的命令行
- **生产者**向主题发布消息：
  ```bash
  bin/kafka-console-producer.sh --broker-list 192.168.43.49:9092 --topic Hello-Kafa
  ```
  注意这里的IP地址应与`server.properties`文件中`listeners`配置项相匹配。每输入一行即发送一条新消息。
- **消费者**接收消息：
  ```bash
  bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic Hello-Kafka --from-beginning
  ```

### 11. 消费者采用的是推还是拉模式？
Kafka选择了一种大多数消息系统常用的pull模式：producer将消息推送到broker，而consumer则从broker处拉取消息。相较于push模式（如Scribe或Apache Flume所使用的），pull模式允许consumer根据自身的处理能力和策略决定何时以及如何批量地拉取消息，从而避免了因broker推送速度过快而导致consumer崩溃的问题。尽管pull模式可能导致consumer在没有新消息时不断轮询broker，但Kafka提供了参数设置以使consumer阻塞直到新消息到达或达到特定数量。

### 12. Kafka维护消费状态跟踪的方法
Kafka通过记录每个partition内被消费的消息偏移量(offset)来跟踪消费状态，而不是直接标记消息是否已被消费。这种方式不仅简化了状态管理，还允许consumer回溯到较早的offset重新消费旧消息。这种设计使得Kafka能够轻松支持高吞吐量的数据流处理，并确保即使在出现故障的情况下也不会丢失数据。

### 13. 主从同步机制
参见[这里](https://blog.csdn.net/honglei915/article/details/37565289)了解Kafka主从同步的具体实现细节。

### 14. 消息系统的必要性及优势
与MySQL相比，消息系统提供了一系列独特的优势，包括但不限于解耦服务、增强冗余、提高扩展性和灵活性、保证消息传递顺序等。具体来说，它能够帮助应用程序更好地应对突发流量、提升系统整体的可靠性和恢复能力。

### 15. Zookeeper对Kafka的作用
Zookeeper作为高性能协调服务，在Kafka集群中扮演着至关重要的角色，主要用于维护节点间的通信、提交offset、进行leader选举以及执行其他分布式任务如配置管理和实时状态监控等。

### 16. 数据传输事务定义类型
与MQTT类似，Kafka支持三种级别的数据传输事务保障：
- 最多一次 (At most once)
- 至少一次 (At least once)
- 精确一次 (Exactly once)

### 17. 判断Kafka节点存活条件
一个Kafka节点被认为是活跃的，如果它满足以下两个条件之一：
- 能够保持与Zookeeper的心跳连接；
- 如果是follower，则需及时同步leader的日志更新。

### 18. Kafka的ack确认机制
Kafka提供了三种ack确认机制供生产者使用，分别是：
- `0`：不等待任何服务器响应；
- `1`：等待leader副本响应；
- `-1` 或 `all`：等待所有副本响应。

### 19. 手动提交偏移量
要禁止自动提交offset并改为手动提交，可以设置`auto.commit.offset=false`，然后在适当位置调用`commitSync()`或`commitAsync()`方法。

### 20. 解决消费者活锁问题
针对可能出现的“活锁”现象（即持续发送心跳但未实际处理消息的情况），可以通过调整`max.poll.interval.ms`参数值来控制poll操作的最大间隔时间，从而确保只有活跃成员才能提交offset。此外，还可以利用`pause()`函数暂停分区，防止新的消息进入处理队列直至当前批次全部完成。

### 21. 控制消费位置
使用`seek(TopicPartition, long)`方法可以直接设定新的消费起点。另外还有专门用于定位最早(`seekToBeginning`)或最晚(`seekToEnd`)可用offset的方法可供调用。

### 22. 分布式环境下确保消息顺序
在Kafka集群环境中，通过将具有相同key的所有消息路由至同一partition内来保证其顺序性。只要保证单个partition只由一个consumer负责消费即可维持FIFO原则。

### 23. 高可用性机制概述
Kafka通过复制日志、选举leader以及利用Zookeeper进行协调等方式实现了高可用性。更多详细信息请参考相关链接。

### 24. 减少数据丢失策略
为了最大限度减少数据丢失风险，Kafka采取了多种措施，比如增加replication factor、启用acks=all配置选项等。具体内容可查阅官方文档或其他资源。

### 25. 避免重复消费
防止重复扣款等问题通常需要结合业务逻辑处理，例如引入全局唯一ID作为去重依据、利用数据库约束限制重复插入等手段。

---

### 微服务面试题补充

#### 什么是微服务架构？
微服务架构是一种将大型应用分解成一系列小型、独立服务的设计风格，每个服务都围绕特定业务功能构建，并且可以单独部署、扩展和维护。

#### 微服务架构的优点
- 支持快速迭代开发
- 提升系统的容错率
- 可灵活选用不同技术栈
- 实现细粒度的服务水平扩展
- 增强团队自治性

#### 特征
- 松耦合
- 组件化
- 关注单一职责
- 自治性强
- 支持持续集成/交付
- 强调产品而非项目视角
- 分散治理模型
- 敏捷开发友好

#### 设计最佳实践
遵循领域驱动设计原则、采用API网关模式、实施限流降级策略等都是良好微服务架构设计中推荐的做法。

#### 工作原理
微服务体系结构主要包括客户端请求发起端、身份验证服务、API网关层以及后端的各种服务组件构成。API网关负责接收来自外部的所有请求并将其转发给相应服务进行处理。