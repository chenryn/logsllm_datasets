NSFileType Perms NSFileProtection Read Write Name
------------ ------- ------------------ ------ ------- -------------------------
Directory 493 None True False NotificationContent.appex
Directory 493 None True False Widget.appex
Directory 493 None True False Share.appex
Directory 493 None True False SiriIntents.appex
We can see now the same four app extensions that we saw in Xcode before.
Determining the Supported Data Types
This is important for data being shared with host apps (e.g. via Share or Action Extensions). When the user selects
some data type in a host app and it matches the data types define here, the host app will offer the extension. It is
worth noticing the difference between this and data sharing via UIActivity where we had to define the document
types, also using UTIs. An app does not need to have an extension for that. It is possible to share data using only
UIActivity .
Inspect the app extension's Info.plist file and search for NSExtensionActivationRule . That key specifies the data
being supported as well as e.g. maximum of items supported. For example:
NSExtensionAttributes
NSExtensionActivationRule
NSExtensionActivationSupportsImageWithMaxCount
10
NSExtensionActivationSupportsMovieWithMaxCount
1
446
iOS Platform APIs
NSExtensionActivationSupportsWebURLWithMaxCount
1
Only the data types present here and not having 0 as MaxCount will be supported. However, more complex filtering
is possible by using a so-called predicate string that will evaluate the UTIs given. Please refer to the Apple App
Extension Programming Guide for more detailed information about this.
Checking Data Sharing with the Containing App
Remember that app extensions and their containing apps do not have direct access to each otherâ€™s containers.
However, data sharing can be enabled. This is done via "App Groups" and the NSUserDefaults API. See this figure
from Apple App Extension Programming Guide:
As also mentioned in the guide, the app must set up a shared container if the app extension uses the NSURLSession
class to perform a background upload or download, so that both the extension and its containing app can access the
transferred data.
Verifying if the App Restricts the Use of App Extensions
It is possible to reject a specific type of app extension by using the method
application:shouldAllowExtensionPointIdentifier: . However, it is currently only possible for "custom keyboard" app
extensions (and should be verified when testing apps handling sensitive data via the keyboard like e.g. banking apps).
Dynamic Analysis
For the dynamic analysis we can do the following to gain knowledge without having the source code:
Inspecting the items being shared
Identifying the app extensions involved
Inspecting the Items Being Shared
For this we should hook NSExtensionContext - inputItems in the data originating app.
Following the previous example of Telegram we will now use the "Share" button on a text file (that was received from
a chat) to create a note in the Notes app with it:
447
iOS Platform APIs
If we run a trace, we'd see the following output:
(0x1c06bb420) NSExtensionContext - inputItems
0x18284355c Foundation!-[NSExtension _itemProviderForPayload:extensionContext:]
0x1828447a4 Foundation!-[NSExtension _loadItemForPayload:contextIdentifier:completionHandler:]
0x182973224 Foundation!__NSXPCCONNECTION_IS_CALLING_OUT_TO_EXPORTED_OBJECT_S3__
0x182971968 Foundation!-[NSXPCConnection _decodeAndInvokeMessageWithEvent:flags:]
0x182748830 Foundation!message_handler
0x181ac27d0 libxpc.dylib!_xpc_connection_call_event_handler
0x181ac0168 libxpc.dylib!_xpc_connection_mach_event
...
RET: (
" - userInfo:
{
NSExtensionItemAttachmentsKey = (
" {types = (\n \"public.plain-text\",\n \"public.file-url\"\n)}"
);
}"
)
Here we can observe that:
This occurred under-the-hood via XPC, concretely it is implemented via a NSXPCConnection that uses the
libxpc.dylib Framework.
The UTIs included in the NSItemProvider are public.plain-text and public.file-url , the latter being included
in NSExtensionActivationRule from the Info.plist of the "Share Extension" of Telegram.
448
iOS Platform APIs
Identifying the App Extensions Involved
You can also find out which app extension is taking care of your the requests and responses by hooking NSExtension
- _plugIn :
We run the same example again:
(0x1c0370200) NSExtension - _plugIn
RET: 
(0x1c0372300) -[NSExtension _plugIn]
RET: 
As you can see there are two app extensions involved:
Share.appex is sending the text file ( public.plain-text and public.file-url ).
com.apple.mobilenotes.SharingExtension.appex which is receiving and will process the text file.
If you want to learn more about what's happening under-the-hood in terms of XPC, we recommend to take a look at
the internal calls from "libxpc.dylib". For example you can use frida-trace and then dig deeper into the methods that
you find more interesting by extending the automatically generated stubs.
UIPasteboard
Overview
The UIPasteboard enables sharing data within an app, and from an app to other apps. There are two kinds of
pasteboards:
systemwide general pasteboard: for sharing data with any app. Persistent by default across device restarts and
app uninstalls (since iOS 10).
custom / named pasteboards: for sharing data with another app (having the same team ID as the app to share
from) or with the app itself (they are only available in the process that creates them). Non-persistent by default
(since iOS 10), that is, they exist only until the owning (creating) app quits.
Some security considerations:
Users cannot grant or deny permission for apps to read the pasteboard.
Since iOS 9, apps cannot access the pasteboard while in background, this mitigates background pasteboard
monitoring. However, if the malicious app is brought to foreground again and the data remains in the pasteboard,
it will be able to retrieve it programmatically without the knowledge nor the consent of the user.
Apple warns about persistent named pasteboards and discourages their use. Instead, shared containers should
be used.
Starting in iOS 10 there is a new Handoff feature called Universal Clipboard that is enabled by default. It allows
the general pasteboard contents to automatically transfer between devices. This feature can be disabled if the
developer chooses to do so and it is also possible to set an expiration time and date for copied data.
Static Analysis
The systemwide general pasteboard can be obtained by using generalPasteboard , search the source code or the
compiled binary for this method. Using the systemwide general pasteboard should be avoided when dealing with
sensitive data.
449
iOS Platform APIs
Custom pasteboards can be created with pasteboardWithName:create: or pasteboardWithUniqueName . Verify if custom
pasteboards are set to be persistent as this is deprecated since iOS 10. A shared container should be used instead.
In addition, the following can be inspected:
Check if pasteboards are being removed with removePasteboardWithName: , which invalidates an app pasteboard,
freeing up all resources used by it (no effect for the general pasteboard).
Check if there are excluded pasteboards, there should be a call to setItems:options: with the
UIPasteboardOptionLocalOnly option.
Check if there are expiring pasteboards, there should be a call to setItems:options: with the
UIPasteboardOptionExpirationDate option.
Check if the app swipes the pasteboard items when going to background or when terminating. This is done by
some password manager apps trying to restrict sensitive data exposure.
Dynamic Analysis
Detect Pasteboard Usage
Hook or trace the following:
generalPasteboard for the system-wide general pasteboard.
pasteboardWithName:create: and pasteboardWithUniqueName for custom pasteboards.
Detect Persistent Pasteboard Usage
Hook or trace the deprecated setPersistent: method and verify if it's being called.
Monitoring and Inspecting Pasteboard Items
When monitoring the pasteboards, there is several details that may be dynamically retrieved:
Obtain pasteboard name by hooking pasteboardWithName:create: and inspecting its input parameters or
pasteboardWithUniqueName and inspecting its return value.
Get the first available pasteboard item: e.g. for strings use string method. Or use any of the other methods for
the standard data types.
Get the number of items with numberOfItems .
Check for existence of standard data types with the convenience methods, e.g. hasImages , hasStrings ,
hasURLs (starting in iOS 10).
Check for other data types (typically UTIs) with containsPasteboardTypes:inItemSet: . You may inspect for more
concrete data types like, for example an picture as public.png and public.tiff (UTIs) or for custom data such as
com.mycompany.myapp.mytype. Remember that, in this case, only those apps that declare knowledge of the
type are able to understand the data written to the pasteboard. This is the same as we have seen in the
"UIActivity Sharing" section. Retrieve them using itemSetWithPasteboardTypes: and setting the corresponding
UTIs.
Check for excluded or expiring items by hooking setItems:options: and inspecting its options for
UIPasteboardOptionLocalOnly or UIPasteboardOptionExpirationDate .
If only looking for strings you may want to use objection's command ios pasteboard monitor :
Hooks into the iOS UIPasteboard class and polls the generalPasteboard every 5 seconds for data. If new data
is found, different from the previous poll, that data will be dumped to screen.
You may also build your own pasteboard monitor that monitors specific information as seen above.
For example, this script (inspired from the script behind objection's pasteboard monitor) reads the pasteboard items
every 5 seconds, if there's something new it will print it:
450
iOS Platform APIs
const UIPasteboard = ObjC.classes.UIPasteboard;
const Pasteboard = UIPasteboard.generalPasteboard();
var items = "";
var count = Pasteboard.changeCount().toString();
setInterval(function () {
const currentCount = Pasteboard.changeCount().toString();
const currentItems = Pasteboard.items().toString();
if (currentCount === count) { return; }
items = currentItems;
count = currentCount;
console.log('[* Pasteboard changed] count: ' + count +
' hasStrings: ' + Pasteboard.hasStrings().toString() +
' hasURLs: ' + Pasteboard.hasURLs().toString() +
' hasImages: ' + Pasteboard.hasImages().toString());
console.log(items);
}, 1000 * 5);
In the output we can see the following:
[* Pasteboard changed] count: 64 hasStrings: true hasURLs: false hasImages: false
(
{
"public.utf8-plain-text" = hola;
}
)
[* Pasteboard changed] count: 65 hasStrings: true hasURLs: true hasImages: false
(
{
"public.url" = "https://codeshare.frida.re/";
"public.utf8-plain-text" = "https://codeshare.frida.re/";
}
)
[* Pasteboard changed] count: 66 hasStrings: false hasURLs: false hasImages: true
(
{
"com.apple.uikit.image" = " size {571, 264} orientation 0 scale 1.000000";
"public.jpeg" = " size {571, 264} orientation 0 scale 1.000000";
"public.png" = " size {571, 264} orientation 0 scale 1.000000";
}
)
You see that first a text was copied including the string "hola", after that a URL was copied and finally a picture was
copied. Some of them are available via different UTIs. Other apps will consider these UTIs to allow pasting of this data
or not.
Testing Custom URL Schemes (MSTG-PLATFORM-3)
Overview
Custom URL schemes allow apps to communicate via a custom protocol. An app must declare support for the
schemes and handle incoming URLs that use those schemes.
Apple warns about the improper use of custom URL schemes in the Apple Developer Documentation:
URL schemes offer a potential attack vector into your app, so make sure to validate all URL parameters and
discard any malformed URLs. In addition, limit the available actions to those that do not risk the userâ€™s data. For
example, do not allow other apps to directly delete content or access sensitive information about the user.
451
iOS Platform APIs
When testing your URL-handling code, make sure your test cases include improperly formatted URLs.
They also suggest using universal links instead, if the purpose is to implement deep linking:
While custom URL schemes are an acceptable form of deep linking, universal links are strongly recommended
as a best practice.
Supporting a custom URL scheme is done by:
defining the format for the app's URLs,
registering the scheme so that the system directs appropriate URLs to the app,
handling the URLs that the app receives.
Security issues arise when an app processes calls to its URL scheme without properly validating the URL and its
parameters and when users aren't prompted for confirmation before triggering an important action.
One example is the following bug in the Skype Mobile app, discovered in 2010: The Skype app registered the
skype:// protocol handler, which allowed other apps to trigger calls to other Skype users and phone numbers.
Unfortunately, Skype didn't ask users for permission before placing the calls, so any app could call arbitrary numbers
without the user's knowledge. Attackers exploited this vulnerability by putting an invisible  (where xxx was replaced by a premium number), so any Skype user who inadvertently visited a
malicious website called the premium number.
As a developer, you should carefully validate any URL before calling it. You can whitelist applications which may be
opened via the registered protocol handler. Prompting users to confirm the URL-invoked action is another helpful
control.
All URLs are passed to the app delegate, either at launch time or while the app is running or in the background. To
handle incoming URLs, the delegate should implement methods to:
retrieve information about the URL and decide whether you want to open it,
open the resource specified by the URL.
More information can be found in the archived App Programming Guide for iOS and in the Apple Secure Coding
Guide.
In addition, an app may also want to send URL requests (aka. queries) to other apps. This is done by:
registering the application query schemes that the app wants to query,
optionally querying other apps to know if they can open a certain URL,
sending the URL requests.
All of this presents a wide attack surface that we will address in the static and dynamic analysis sections.
Static Analysis
There are a couple of things that we can do in the static analysis. In the next sections we will see the following:
Testing custom URL schemes registration
Testing application query schemes registration
Testing URL handling and validation
Testing URL requests to other apps
Testing for deprecated methods
Testing Custom URL Schemes Registration
The first step to test custom URL schemes is finding out whether an application registers any protocol handlers.
452
iOS Platform APIs
If you have the original source code and want to view registered protocol handlers, simply open the project in Xcode,
go to the "Info" tab and open the "URL Types" section as presented in the screenshot below:
Also in Xcode you can find this by searching for the CFBundleURLTypes key in the appâ€™s Info.plist file (example from
iGoat-Swift):
CFBundleURLTypes
CFBundleURLName
com.iGoat.myCompany
CFBundleURLSchemes
iGoat
In a compiled application (or IPA), registered protocol handlers are found in the file Info.plist in the app bundle's
root folder. Open it and search for the CFBundleURLSchemes key, if present, it should contain an array of strings
(example from iGoat-Swift):
grep -A 5 -nri urlsch Info.plist
Info.plist:45: CFBundleURLSchemes
Info.plist-46- 
Info.plist-47- iGoat
Info.plist-48- 
Once the URL scheme is registered, other apps can open the app that registered the scheme, and pass parameters
by creating appropriately formatted URLs and opening them with the openURL:options:completionHandler: method.
Note from the App Programming Guide for iOS:
If more than one third-party app registers to handle the same URL scheme, there is currently no process for
determining which app will be given that scheme.
This could lead to a URL scheme hijacking attack (see page 136 in [#THIEL]).
Testing Application Query Schemes Registration
Before calling the openURL:options:completionHandler: method, apps can call canOpenURL: to verify that the target