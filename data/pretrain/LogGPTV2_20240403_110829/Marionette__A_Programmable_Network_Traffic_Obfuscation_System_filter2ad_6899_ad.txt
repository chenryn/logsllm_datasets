7.2 Protocol-Compliance
As our next test, we aim to achieve protocol compli-
ance for scenarios that require a greater degree of inter-
message and inter-connection state.
In our testing we
created model speciﬁcations for HTTP, POP3, and FTP
that generate protocol-compliant (i.e., correctly classi-
ﬁed by bro) network trafﬁc. The FTP format was the
most challenging of the three, so we will use it as our
illustrative example.
An FTP session in passive mode uses two data con-
nections: a control channel and a data channel. To
enter passive mode a client
issues the PASV com-
mand, and the server responds with an address in
the form (a,b,c,d,x,y). As deﬁned by the FTP
protocol [30],
the client then connects to TCP port
a.b.c.d:(256*x+y) to retrieve the ﬁle requested in
the GET command.
Building our FTP model speciﬁcation.
In building
our FTP model we encounter three unique challenges,
compared to other protocols, such as HTTP:
1. FTP has a range of message types, including user-
names, passwords, and arbitrary ﬁles, that could be
used to encode data. In order to maximize potential
encoding capacity, we must utilize multiple encod-
ing strategies (e.g., FTE, template grammars, etc.)
2. The FTP protocol is stateful (i.e., message order
matters) and has many message types (e.g., USER,
PASV, etc,) which do not have the capacity to en-
code information.
3. Performing either an active or passive FTP ﬁle
transfer requires establishing a new connection and
maintaining appropriate inter-connection state.
To address the ﬁrst challenge, we utilize Marionette’s
plugin architecture, including FTE, template grammars,
multi-layer models, and the ability to send/receive static
strings. To resolve the second, we rely on Marionette’s
ability to model stateful
transitions and block until,
say, a speciﬁc static string (e.g., the FTP server ban-
ner) has been sent/received. For the third, we rely not
only on Marionette’s ability to spawn a new model, but
we also rely on inter-model communications.
In fact,
we can generate the listening port server-side on the
the ﬂy and communicate it in-band to the client via
the 227 Entering Passive Mode (a,b,c,d,x,y)
command, which is processed by a client-side template-
grammar handler to populate a client-side global vari-
able. This global variable value is then used to inform
the spawned model as to which server-side TCP port it
should connect.
Our FTP model speciﬁcation relies upon the up-
stream password ﬁeld, and upstream (PUT) and down-
stream (GET) ﬁle transfers to relay data. In our testbed
the FTP model
achieved 6.6Mbps downstream and
6.7Mbps upstream goodput.
7.3 Proxy Traversal
As our next case study, we evaluate Marionette in a set-
ting where a protocol-enforcing proxy is positioned be-
tween the client and server. Given the prevalence of the
HTTP protocol and breadth of proxy systems available,
we focus our attention on engineering Marionette model
speciﬁcations that are able to traverse HTTP proxies.
When considering the presence of an HTTP proxy,
there are at least ﬁve ways it could interfere with our
communications. A proxy could: (1) add HTTP headers,
(2) remove HTTP headers, (3) modify header or payload
contents, (4) re-order/multiplex messages, or (5) drop
messages. Marionette is able to handle each of these
cases with only slight enhancements to the plugins we
have already described.
We ﬁrst considered using FTE to generate ciphertexts
that are valid HTTP messages. However, FTE is sensi-
tive to modiﬁcations to its ciphertexts. As an example,
changing the case of a single character of an FTE cipher-
text would result in FTE decryption failure. Hence, we
need a more robust solution.
376  24th USENIX Security Symposium 
USENIX Association
Fortunately, template grammars (Section 4) give us
ﬁne-grained control over ciphertexts and allows us to
tolerate ciphertext modiﬁcation, and our record layer
(Section 6.1) provides mechanisms to deal with stream
multiplexing, message re-ordering and data loss. This
covers all ﬁve types of interference mentioned above.
Building our HTTP template grammar. As a proof
of concept we developed four HTTP template grammars.
Two languages that are HTTP-GET requests, one with
a header ﬁeld of Connection: keep-alive and one
with Connection: close. We then created analo-
gous HTTP-OK languages that have keep-alive and close
headers. Our model oscillates between the keep-alive
GET and OK states with probability 0.9, until it transi-
tions from the keep-alive OK state to the GET close state,
with probability 0.1
In all upstream messages we encode data into the URL
and cookie ﬁelds using the FTE template grammar han-
dler. Downstream we encode data in the payload body
using the FTE handler and follow this with a separate
handler to correctly populate the content-length ﬁeld.
We provide receiver-side HTTP parsers that validate
incoming HTTP messages (e.g., ensure content length is
correct) and then extract the URL, cookie and payload
ﬁelds. Then, we take each of these components and re-
assemble them into a complete message, independent of
the order they appeared. That is, the order of the incom-
ing headers does not matter.
Coping with multiplexing and re-ordering. The tem-
plate grammar plugin resolves the majority of issues that
we could encounter. However, it does not allow us to
cope with cases where the proxy might re-order or multi-
plex messages. By multiplex, we mean that a proxy may
interleave two or more Marionette TCP channels into a
single TCP stream between the proxy and server. In such
a case, we can no longer assume that two messages from
the same incoming datastream are, in fact, two sequential
messages from the same client model. Therefore, in the
non-proxy setting there is a one-to-one mapping between
channels and server-side Marionette model instances. In
the proxied setting, the channel to model instance map-
ping may be one-to-many.
We are able to cope with this scenario by relying upon
the non-determinism of our Marionette models, and our
record layer. The server-side broker attempts to execute
all action blocks for available transitions across all active
models. If no active model was able to successfully pro-
cess the incoming message, then the broker (Section 5)
attempts to instantiate a new model for that message. In
our plugins we must rely upon our record layer to deter-
mine success for each of these operations. This allows us
to deal with cases where a message may successfully de-
code and decrypt, but the model instance ID ﬁeld doesn’t
match the current model.
Testing with Squid HTTP proxy. We validated our
HTTP model speciﬁcation and broker/plugin enhance-
ments against the Squid [39] caching proxy (version
3.4.9). The Squid caching proxy adds headers, removes
header, alters headers and payload contents, and re-
orders/multiplexes datastreams. We generated 10,000
streams through the Squid proxy and did not encounter
any unexpected issues, such as message loss.
In our testbed, our HTTP model speciﬁcation for use
with Squid proxy achieved 5.8Mbps downstream and
0.41Mbps upstream goodput, with the upstream band-
width limited by the capacity of the HTTP request for-
mat.
7.4 Trafﬁc Analysis Resistance
In our next case study, we control statistical features of
HTTP trafﬁc. As our baseline, we visited Amazon.com
with Firefox 35 ten times and captured all resultant net-
work trafﬁc8. We then post-processed the packet cap-
tures and recorded the following values: the lengths of
HTTP response payloads, the number of HTTP request-
response pairs per TCP connection, and the number of
TCP connections generated as a result of each page visit.
Our goal in this section is to utilize Marionette to model
the trafﬁc characteristics of these observed trafﬁc pat-
terns to make network sessions that “look like" a visit
to Amazon.com. We will discuss each trafﬁc character-
istic individually, then combine them in a single model
to mimic all characteristics simultaneously.
Message lengths. To model message lengths, we
started with the HTTP response template grammar de-
scribed in Section 7.3. We adapted the response body
handler such that it takes an additional, integer value as
input. This integer dictates the output length of the HTTP
response body. On input n, the handler must return an
HTTP response payload of exactly length n bytes.
From our packet captures of Amazon.com we
recorded the message length for each observed HTTP
response payload. Each time our new HTTP response
template grammar was invoked by Marionette, we sam-
pled from our recorded distribution of message lengths
and used this value as input to the HTTP response tem-
plate grammar. With this, we generate HTTP response
payloads with lengths that match the distribution of those
observed during our downloads of Amazon.com.
8Retrieval performed on February 21, 2015.
USENIX Association  
24th USENIX Security Symposium  377
Figure 8: A comparison of the aggregate trafﬁc features for ten downloads of amazon.com using Firefox 35, compared to the trafﬁc
generated by ten executions of the Marionette model mimicking amazon.com.
Messages per TCP connection. We model the num-
ber of HTTP request-response pairs per TCP connection
using the following strategy, which employs hierarchi-
cal modeling. Let’s start with the case where we want to
model a single TCP connection that has n HTTP request-
response pairs. We start by creating a set of models
which contain exactly n request-response pair with prob-
ability 1, for all n values of interest. We can achieve this
by creating a model Mn with n + 1 states, n transitions,
and exactly one path. From the start state each transi-
tion results in an action block that performs one HTTP
request-response. Therefore, Mn models a TCP connec-
tion with exactly n HTTP request-response pairs.
Then, we can employ Marionette’s hierarchical model
structure to have ﬁne-grained control over the number
of HTTP request-response pairs per connection. Let’s
say that we want to have n1 request-response pairs with
probability p1, n2 with probability p2, and so on. For
simplicity, we assume that all values ni are unique, all
values pi are greater than 0, and Σm
i=0pi = 1. For each
possible value of ni we create a model Mni, as described
above. Then, we create a single parent model which has
a start state with a transition that spawns Mn1 with prob-
ability p1, Mn2 with probability p2, and so on. This en-
ables us to create a single, hierarchical model that that
controls the number of request-response pairs for arbi-
trary distributions.
Simultaneously active connections. Finally, we aim
to control the total number of connections generated by
a model during an HTTP session. That is, we want our
model to spawn ni connections with probability pi, ac-
cording to some distribution dictated by our target. We
achieve this by using the same hierarchical approach as
the request-response pairs model, with the distinction
that each child model now spawns ni connections.
Building the model and its performance. For each
statistical trafﬁc feature, we analyzed the distribution of
values in the packet captures from our Amazon.com vis-
its. We then used the strategies in this section to construct
a three-level hierarchical model that controls all of the
trafﬁc features simultaneously: message lengths, number
of request-response pairs per connection, and the number
of simultaneously active TCP connections. With this new
model we deployed Marionette in our testbed and cap-
tured all network trafﬁc it generated. In Figure 8 we have
a comparison of the trafﬁc features of the Amazon.com
trafﬁc, compared to the trafﬁc generated by our Mari-
onette model.
In our testbed, this model achieved 0.45Mbps down-
stream and 0.32Mbps upstream goodput. Compared
to Section 7.3 this decrease in performance can be ex-
plained, in part, by the fact that Amazon.com has many
connections with only a single HTTP request-response,
and very short messages. As one example, the most
common payload length in the distribution was 43 bytes.
Consequently, the majority of the processing time was
spent waiting for setup and teardown of TCP connec-
tions.
7.5 Resisting Application Fingerprinting
In our ﬁnal case study, we evaluate Marionette’s abil-
ity to resist adversaries that wish to identify Marionette
servers using active probing or ﬁngerprinting methods.
We assume that an adversary is employing off-the-shelf
tools to scan a target host and determine which services
it is running. An adversary may have an initial goal to
identify that a server is running Marionette and not an
industry-standard service (e.g., Apache, etc.). Then, they
may use this information to perform a secondary inspec-
tion or immediately block the server. This problem has
been shown to be of great practical importance for ser-
vices such as Tor [41] that wish to remain undetected in
the presence of such active adversaries.
Our goal is to show that Marionette can coerce ﬁnger-
printing tools to incorrectly classify a Marionette server
378  24th USENIX Security Symposium 
USENIX Association
connection(tcp, 8080):
upstream
start
upstream downstream
upstream downstream_err http_ok_err error
...
http_get
http_ok
1.0
1.0
Protocol
HTTP
FTP
SSH
Fingerprint
Target
Apache 2.4.7
Pure-FTPd 1.0.39
OpenSSH 6.6.1
nmap



Scanner
Nessus metasploit






action http_ok_err:
server io.puts("HTTP/1.1 200 OK\r\n" \
+ "Server: Apache/2.4.7\r\n..."
...
Figure 10: A  indicates that Marionette was able to successful
coerce the ﬁngerprinting tool into reporting that the Marionette
server is the ﬁngerprint target.
Figure 9: Example HTTP model speciﬁcation including active
probing resistance.
as a service of our choosing. As one example, we’ll show
that with slight embellishments to the formats we de-
scribe in Section 7.1 and Section 7.2, we can convince
nmap [4] that Marionette is an instance of an Apache
server.
7.5.1 Building Fingerprinting-Resistant Formats
In our exploration of ﬁngerprinting attacks we consider
three protocols: HTTP [16], SSH [46], and FTP [30]. For
HTTP and SSH we started with the formats described in
Section 7.1, and for FTP we started the format described
in Section 7.2. We augmented these formats by adding
an error transition (Section 3) that invokes an action that
mimics the behavior of our target service. This error
transition is traversed if all other potential transitions en-
counter fatal errors in their action blocks, which occur if
an invalid message is received.
As an example, for our HTTP format we introduce an
error transition to the downstream_err state. This tran-
sition is taken if the http_ok action block encounters a
fatal error when attempting to invoke an FTE decryption.
In this speciﬁc format, a fatal error in the http_ok ac-
tion block is identiﬁed if an invalid message is detected
when attempting to perform FTE decryption (i.e., doesn’t
match the regex or encounters a MAC failure).
In the
example found in Figure 9, upon encountering an error,
we output the default response produced when request-
ing the index ﬁle from an Apache 2.4.7 server.
7.5.2 Fingerprinting Tools
For our evaluation we used nmap [4], Nessus [3], and
metasploit [2], which are three commonly used tools for
network reconnaissance and application ﬁngerprinting.
Our conﬁguration was as follows.
nmap: We used nmap version 6.4.7 with version detec-
tion enabled and all ﬁngerprinting probes enabled. We
invoked nmap via the command line to scan our host.
Nmap’s service and version ﬁelds were used to identify
its ﬁngerprint of the target.
Nessus: For Nessus we used version 6.3.6 and performed
a Basic Network Scan. We invoked Nessus via its REST
API to start the scan and then asynchronously retrieved
the scan with a second request. The reported ﬁngerprint
was determined by the protocol and svc_name for all
plugins that were triggered.
metasploit: We used version 4.11.2 of metasploit.
For ﬁngerprinting SSH, FTP, and HTTP we used the
ssh_version , ftp_version and http_version
modules, respectively. For each module we set the
RHOST and RPORT variable to our host and the reported
ﬁngerprint was the complete text string returned by the
module.
7.5.3 Results
We refer to the target or ﬁngerprint target as the appli-
cation that we are attempting to mimic. To establish
our ﬁngerprint targets we installed Apache 2.4.7, Pure-
FTPd 1.0.39 and OpenSSH 6.6.1 on a virtual machine.
We then scanned each of these target applications with
each of our three ﬁngerprinting tools and stored the ﬁn-
gerprints.
To create our Marionette formats that mimic these tar-
gets, we added error states that respond identically to our
target services. As an example, for our Apache 2.4.7, we
respond with a success status code (200) if the client re-
quests the index.html or robots.txt ﬁle. Otherwise
we respond with a File Not Found (404) error code. Each
server response includes a Server: Apache 2.4.7
header. For our FTP and SSH formats we used a sim-
ilar strategy. We observed the request initiated by each
probe, and ensured that our error transitions triggered ac-
tions that are identical to our ﬁngerprinting target.