tion (with at least 4 instructions) in the target set, we use
BinSequence to ﬁnd the matching function (with the highest
similarity) in the candidate set. In this experiment, all the
function names of both binaries are stripped away. But we
use the function names in the program debug database as
the ground truth to verify if the matching is correct.
Tool
FCatalog [4]
Diaphora [3]
PatchDiﬀ2 [7]
BinDiﬀ [1]
BinSequence
Correctly
Matched
Unmatched
5
105
110
130
135
139
10
28
5
0
Overall
Accuracy
3.47%
72.92%
76.39%
90.28%
93.75%
Table 5: Comparison with other tools
Since zlib is a relatively small library, all the tools ﬁnished
the comparison within seconds. Table 5 shows the results.
In total, our target set has 144 functions with more than
4 instructions. FCatalog correctly matched 5 functions, but
failed to ﬁnd any match for the remaining 139 functions. Di-
aphora matched 105 functions. However, for 10 functions,
Diaphora failed to match them and categorized them to “Un-
matched” group. The overall accuracy for Diaphora is about
72.92%. Similarly, if BinDiﬀ failed to match one function
with another, BinDiﬀ would classify it into “Unmatched”.
As shown in Table 5, there are 5 functions that BinDiﬀ failed
to match. However, given one target function, BinSequence
simply compares it with every function in the candidate set
and match it to the one with the highest similarity. As a
result, BinSequence has no “Unmatched” category.
We can see from Table 5 that BinSequence achieves the
highest accuracy, 93.75%. The reason is that BinSequence
is performing a fuzzy matching, which can better address
the mutations introduced by diﬀerent compilers.
6. RELATED WORKS
A lot of work has been done on the problem of code reuse
detection and function similarity calculation. We brieﬂy re-
view related works in this section.
Flake [14] and its extension [13] presented a pioneer work
of structural comparison approach, Bindiﬀ. Throughout our
work we also leverage the structural information to compare
two functions, but we focus more on fuzzy matching. More-
over, BinDiﬀ is mainly used for comparing two diﬀerent ver-
sions of the same binary, while BinSequence is an assembly
function-centric code reuse detector.
BinHunt [15] also uses a structural approach. It uses sym-
bolic execution to compare basic blocks and backtracking al-
gorithm to try to ﬁnd the graph isomorphism between CFGs.
However, both techniques are too strict. As a result, Bin-
hunt is suitable for ﬁnding semantic diﬀerences, not for large
scale code reuse detection.
Khoo et al.
[17] presented a binary code search engine
named Rendezvous. In their work, multiple features includ-
ing mnemonic n-grams, control ﬂow subgraphs and data
constants are extracted from the binary functions. How-
ever, they do not take the code of the node into account
when matching control ﬂow subgraphs. Consequently, the
uniqueness of control ﬂow subgraphs is relatively low and
a high number of false positives are produced by their ap-
proach.
Another approach called SIGMA [8] has been proposed
for identifying reused code in binaries. This technique uses a
graph-based representation of code, abstracting away much
of the instruction-level detail in favor of structural properties
of the program. However, the detection algorithm used is
time consuming.
Pewny et al.
[24] proposed TEDEM, which is a binary
code reuse detection system which can identify the buggy
function from a set of reference functions. Unlike previ-
ous semantic-based works which leverage symbolic execu-
tion and theorem proving, Pewny et al. designed a novel
way of comparing code regions semantically by leveraging
tree edit distance. However, their approach captures all the
functionality and “side eﬀects” of code regions, which makes
TEDEM suitable for bug search, but inappropriate for code
reuse detection where “noise” is very common.
Ng and Prakash [22] proposed a tool to identify binary
code reuse. They Adopted two approaches, semantic execu-
tion and syntactic matching to compare two function. The
problem is that semantic execution is too strict while syn-
tactic matching on the other hand, is too coarse.
David and Yahav [12] proposed a tracelet-based code search.
They ﬁrst break the CFG into small tracelets and use LCS
to align two tracertlets. This is also how BinSequence com-
pares two basic blocks. To deal with register reassignment,
they leverage constraint solver to rewrite the assembly code
in tracelet. But they did not take the whole structure of
the CFG into consideration, and many structure informa-
tion was lost when they break down the CFG. As a result,
they admit their tool produces bad results when applied on
functions with less than 100 basic blocks. Besides, their
approach is not scalable.
Luo et al. [19] combined symbolic execution with longest
common subsequence to compare two functions and bina-
ries. The problem is that the overhead of symbolic execution
is very high which renders this approach impractical when
dealing with a large data set. Also, it suﬀers from scalability
problem.
7. LIMITATIONS
Our approach has the following limitations:
- False positive: BinSequence can compare one target
function with a repository of functions. However, when
there is not a true match in the repository, BinSe-
quence still produce a function ranking according to
similarity scores. It is diﬃcult to determine a thresh-
old, to root out all the function that should be re-
ported.
- Function inlining:
If a target function is inlined in
another function, then our approach may not match
these two functions. However, normally function in-
lining only happens to small functions. Consequently,
their functionality are straightforward, and it does not
really help reverse engineers much to search for those
small functions from a large function repository. On
the other hand, if our target function inlined another
small function, then there is a high chance that BinSe-
quence can still match them since we are doing a fuzzy
matching.
- Equivalent instructions: The compilers may use diﬀer-
ent instructions to accomplish the same functionality.
For example, mov eax, 0 and xor eax, eax have the
same functionality but diﬀerent mnemonics. However,
they will be normalized to diﬀerent instructions by our
approach. Future versions of BinSequence may over-
come this limitation by dividing instructions into dif-
ferent classes and let instructions in the same class to
be matched.
- Instruction reordering: The compiler may change the
order of instructions for alignment or pipelining. When
we use LCS to compare two basic blocks, we take the
order of their consisting instructions into account. As
a result this will decrease the ﬁnal similarity score a
litter bit, but it will not jeopardise the entire rank-
ing. The reason is that the layout of instructions inside
one basic block corresponds to the layout of the source
code. Besides, some instructions may have dependen-
cies upon previous instructions. Thus, the compilers
can not change the order randomly. We can still catch
the overall pattern using LCS.
- Basic block reordering: Similarly, basic block reorder-
ing decreases the ﬁnal similarity score because we take
the order into consideration when doing path explo-
ration and neighborhood exploration. However, the
overall layout of basic blocks still corresponds to the
source code. Besides, some basic blocks might have
some dependencies upon previous basic blocks, as a re-
sult, their orders cannot be changed. Thus, our fuzzy
matching approach can still capture these patterns.
- Obfuscation: When designing BinSequence, we assume
that the binary is unobfuscated. In other words, Bin-
Sequence mainly deals with unobfuscated code. How-
ever, we also evaluated the robustness of BinSequence
on obfuscated code. We used obfuscator-llvm [16] as
our obfuscator, and experimented with three obfusca-
tion techniques: bogus control ﬂow, control ﬂow ﬂat-
tening and instructions substitution. In our test, the
accuracy of BinSequence after these three obfuscations
have been applied is 53.01%, 3.61% and 93.98%, re-
spectively. We can see that control ﬂow ﬂattening is
a challenge for BinSequence since we the structure of
CFGs into consideration. Future work may involve
merging basic blocks, or spiliting one basic into multi-
ple basic blocks, to achieve a better matching for this
case. Besides, deobfuscators could be used as a front-
end, to help analyze the obfuscated code.
8. CONCLUSION
In this paper we presented a fast, accurate and scalable bi-
nary code reuse detection system named BinSequence. Un-
like previous literatures, we focus on fuzzy matching that op-
erates at instruction level, basic block level and control ﬂow
structure level. To enable BinSequence on large data sets,
we designed two ﬁlters to save analysis eﬀort by ruling out
functions that are not likely to be matched.We conducted
extensive experiments and our results strongly suggest that
BinSequence can achieve high performance function ranking.
We also applied BinSequence on many practical use cases.
By leveraging BinSequence on both patched and unpatched
executables, we succeeded in revealing the vulnerability and
the patch information. By performing function reuse detec-
tion, we managed to identify the reused RC4 function in two
real-world malware, Zeus and Citadel. We also successfully
identiﬁed the buggy function in various versions of Firefox.
We believe that BinSequence can be of great help in many
reverse engineering and security scenarios.
Acknowledgment
The research leading to this work is supported by a research
grant under the Department of National Defence/Natural
Sciences and Engineering Research Council of Canada (NSERC)
grant in collaboration with Google.
9. REFERENCES
[1] BinDiﬀ. http://www.zynamics.com/bindiﬀ.html.
[2] CVE-2015-4485.
http://www.cvedetails.com/cve/CVE-2015-4485/.
[3] Diaphora: A Program Diﬃng Plugin for IDA Pro.
Available at:
https://github.com/joxeankoret/diaphora.
[4] FCatalog. http://www.xorpd.net/pages/fcatalog.html.
[5] IDA Pro. https://www.hex-rays.com/products/ida/.
[6] MS15-034. https://technet.microsoft.com/en-us/
library/security/ms15-034.aspx.
[7] PatchDiﬀ2: Binary Diﬃng Plugin for IDA. Available
at: https://code.google.com/p/patchdiﬀ2/.
[11] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and
C. Stein. Introduction to Algorithms, Third Edition.
The MIT Press, 2009.
[12] Y. David and E. Yahav. Tracelet-based code search in
executables. In Proceedings of the 35th ACM
SIGPLAN Conference on Programming Language
Design and Implementation, pages 349–360, 2014.
[13] T. Dullien and R. Rolles. Graph-based comparison of
executable objects (english version). SSTIC, 5:1–3,
2005.
[14] H. Flake. Structural comparison of executable objects.
In Proceedings of the IEEE Conference on Detection
of Intrusions and Malware & Vulnerability
Assessment, pages 161–173, 2004.
[15] D. Gao, M. K. Reiter, and D. Song. Binhunt:
Automatically ﬁnding semantic diﬀerences in binary
programs. In Proceedings of the 10th International
Conference on Information and Communications
Security, pages 238–255, 2008.
[16] P. Junod, J. Rinaldini, J. Wehrli, and J. Michielin.
Obfuscator-LLVM – software protection for the
masses. In Proceedings of the IEEE/ACM 1st
International Workshop on Software Protection,
SPRO’15, pages 3–9, 2015.
[17] W. M. Khoo, A. Mycroft, and R. Anderson.
Rendezvous: A search engine for binary code. In
Proceedings of the 10th Working Conference on
Mining Software Repositories, pages 329–338, 2013.
[18] Leskovec, Jure and Rajaraman, Anand and Ullman,
Jeﬀrey D. Mining of Massive Datasets. Cambridge
University Press, 2014.
[19] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu.
Semantics-based obfuscation-resilient binary code
similarity comparison with applications to software
plagiarism detection. In Proceedings of the 22nd ACM
SIGSOFT International Symposium on Foundations
of Software Engineering, pages 389–400, 2014.
[20] J. Milletary. Citadel trojan malware analysis. Dell
SecureWorks, 2012.
[21] J. Munkres. Algorithms for the assignment and
transportation problems. Journal of the Society for
Industrial and Applied Mathematics, 5(1):32–38, 1957.
[22] B. H. Ng and A. Prakash. Expos´e: discovering
potential binary code re-use. In Proceedings of the
2013 IEEE 37th Annual Computer Software and
Applications Conference, pages 492–501, 2013.
[23] J. Oh. Fight against 1-day exploits: Diﬃng binaries vs
anti-diﬃng binaries. In Blackhat technical Security
Conference, 2009.
[8] S. Alrabaee, P. Shirani, L. Wang, and M. Debbabi.
[24] J. Pewny, F. Schuster, L. Bernhard, T. Holz, and
Sigma: A semantic integrated graph matching
approach for identifying reused functions in binary
code. Digital Investigation, 12:S61–S71, 2015.
[9] A. Andoni and P. Indyk. Near-optimal hashing
algorithms for approximate nearest neighbor in high
dimensions. In Proceedings of the 47th Annual IEEE
Symposium on Foundations of Computer Science,
2006. FOCS’06, pages 459–468, 2006.
[10] B. Bencs´ath, G. P´ek, L. Butty´an, and M. Felegyhazi.
skywiper (aka ﬂame aka ﬂamer): A complex malware
for targeted attacks. CrySyS Lab Technical Report,
2012.
C. Rossow. Leveraging semantic signatures for bug
search in binary programs. In Proceedings of the 30th
Annual Computer Security Applications Conference,
pages 406–415, 2014.
[25] A. Rahimian, R. Ziarati, S. Preda, and M. Debbabi.
On the reverse engineering of the citadel botnet. In
Foundations and Practice of Security, pages 408–425.
Springer, 2014.
[26] A. Sæbjørnsen, J. Willcock, T. Panas, D. Quinlan, and
Z. Su. Detecting code clones in binary executables. In
Proceedings of the 18th international symposium on
Software testing and analysis, pages 117–128, 2009.