6.4 Latency
When the proxy’s cache is cold, SSL splitting performs
similar work to regular SSL; thus, we expect their la-
tency characteristics to be similar. However, repetition
within the trace confuses the analysis of latency factors,
since cached ﬁles are faster to download than uncached
ﬁles. To address this issue, we ﬁltered out repetitions
from the www.lcs trace chunk, and using the resulting
uncacheable trace, measured the start and end times of
each request. In order to avoid congestion effects, we
performed requests one at a time.
The resulting graph of latencies versus ﬁle size is shown
in Figure 12.
It shows three clear lines, one for each
of HTTP, HTTPS, and cold SSL splitting. Cold SSL
splitting is about 10% faster than HTTPS for small ﬁle
sizes and about 10% slower than HTTPS for large ﬁle
sizes, but for the most part they are a close match: the
majority of ﬁle downloads had less than a 5% difference
between the two latencies.
7 Discussion
7.1 The implications of key exposure
The implementation of SSL splitting provides the op-
tion to accept clients using a cipher-suite with encryp-
tion, and to expose intentionally the encryption key to
196
12th USENIX Security Symposium 
USENIX Association
HTTP (fit)
HTTPS (fit)
Cold cache (fit)
HTTP
HTTPS
Cold cache
1e+03
1e+02
1e+01
1e-00
1e-01
)
s
d
n
o
c
e
s
(
y
c
n
e
t
a
L
1e-02
10 B
100 B
1 KB
10 KB 100 KB 1 MB
10 MB
File size (bytes) 
Figure 12: Distribution of latencies vs. ﬁle sizes.
the proxy (see Section 3.4). Since the only indication
of security in most web browsers is a simple on/off lock
icon, there is a legitimate question of whether it is rea-
sonable to mislead clients about whether their communi-
cations with the server are encrypted and secure against
eavesdroppers. We expect that most applications of SSL
splitting will not have any Web forms, since it would
be pointless to try to cache dynamic content. How-
ever, a user browsing an URL beginning with https:
might reasonably believe that his browsing pattern was
not available to eavesdroppers; the only way to deal with
this is to notify the user in the text of the Web page.
In any case, normal SSL provides no guarantee that the
server will keep its transmissions private; SSL splitting
is merely equivalent to an SSL server which sends a car-
bon copy of all transmissions to a proxy.
7.2 Alternative proxy design
In the current design of the SSL splitting protocol,
the cache is a transparent forwarding proxy operating
at the level of SSL records. An alternative approach
would have been to have the client connect directly
to the server, and have the server compress its outgo-
ing stream by converting outgoing IP packets contain-
ing SSL records to stub records sent to the cache. The
cache would then reconstitute the IP packets and send
them to the client, forging the server’s IP address and
the TCP header. This approach would have the beneﬁt
of reducing the number of round-trip packet ﬂight times
from four to three, and would also permit the server to
“stripe” a connection with a single client across mul-
tiple caches. An additional beneﬁt is that no DNS or
HTTP redirection technique would be necessary, since
the client’s transmissions would be directly to the server.
However, operating at the IP layer instead of the SSL
record layer is fraught with peril: operating system inter-
faces are nonstandard and unreliable, networks are likely
to black-hole forged packets, and TCP will not behave
properly. Also, such an approach risks creating an “open
relay” which could be used by malicious clients to hide
the source of a denial-of-service attack.
8 Related work
Caching and replication in the Web is a subject of much
study. Like content-distribution networks [12] and peer-
to-peer systems [17], the primary focus of Barnraising is
cooperatively sharing the load of serving data. The main
difference between Barnraising and previous work is the
use of SSL splitting, which allows Barnraising to serve
data securely through untrusted proxies to unmodiﬁed
clients.
8.1 Verifying integrity
The standard approach to providing integrity of data
is signing the cryptographic hash of the data with the
server’s private key (or with the private key of the data’s
owner). When the client receives the data and its sig-
nature (perhaps through different channels), it veriﬁes
the integrity of the data by verifying the signature. This
solution is typically bundled in the client of a speciﬁc
application, which users must download to use the appli-
cation. RPM [25] and FreeNet [2] are among the many
applications that use this solution.
The system closest in spirit to Barnraising is read-only
SFS [8]. SFSRO allows secure distribution of soft-
ware bundles through untrusted machines. It provides a
generic ﬁle system interface, allowing unmodiﬁed appli-
cations to use SFSRO to distribute data securely. How-
ever, SFSRO requires that an SFS client runs on the
client machine, which restricts its deployment to SFS
users. On the other hand, unlike SSL splitting, the SF-
SRO server has to serve only the root block to clients,
and the computational requirements on the server, un-
trusted machines, and client are low.
The Secure HTTP (S-HTTP) [20] protocol contains
built-in support for caching proxies, in the form of the
“320 SHTTP Not Modiﬁed” response code. Like SSL
splitting, S-HTTP provides an end-to-end freshness and
integrity guarantee, but it also provides limited support
for conﬁdentiality from the proxy. S-HTTP’s computa-
tional requirements are similar to SSL, and like SFSRO,
the deployment of this protocol is limited.
USENIX Association
12th USENIX Security Symposium 
197
Untrusted surrogates [6] allow storage-limited clients
to cache data on nearby surrogate machines. A server
stores data on the surrogate on behalf of the client, and
sends the hash of the data to the client; hence, the client
can verify the integrity of data when retrieved from the
surrogate.
8.2 HTTPS proxies
WASP is a proxy for HTTPS connections [14]. Like
SSL splitting, it doesn’t require client changes, and de-
ﬁnes a separate protocol between proxy and server. Un-
like SSL splitting, WASP sends the SSL master secret to
the proxy. Since SSL uses the master secret to compute
the session keys for both encryption and authentication,
this solution puts considerably more trust in the proxy
than SSL splitting does. A malicious WASP proxy can
change the cached data without the client knowing it.
Proxy certiﬁcates [23] provides restricted impersonation
within an X.509 public-key infrastructure. A Web site
could generate a proxy certiﬁcate and hand it to a proxy.
The client can then verify the proxy certiﬁcate to de-
termine whether the proxy is trusted by the web site to
serve the data. Proxy certiﬁcates require client changes
to process the new X.509 certiﬁcate extensions ﬁelds.
8.3 Content distribution systems
Commercial content-distribution systems [12] own the
machines they use for serving data and therefore trust
them. When a client contacts a server with HTTPS via
a content-distribution network, the client must trust the
content-distribution network to authenticate the server.
If SSL splitting were used, the client itself could authen-
ticate the server; also, this would simplify the operation
of the content-distribution system.
Most of the content distribution systems based on
recently-developed, scalable lookup primitives [21, 13,
3] protect the integrity of data by identifying the data
by its cryptographic hash, but the clients must run spe-
cialized software to participate in those systems. Squir-
rel [9] doesn’t require special client software, but it
doesn’t provide data integrity. These systems comple-
ment Barnraising by providing it with good techniques
for organizing the proxies.
9 Summary
SSL splitting is a novel technique for safely distributing
the network load on Web sites to untrusted proxies with-
out requiring modiﬁcations to client machines. How-
ever, because SSL splitting is effective only at reducing
bandwidth consumption when the proxy has access to
the plaintext of the connection, it is not appropriate for
applications that require conﬁdentiality with respect to
the proxy. In addition, SSL splitting incurs a CPU load
on the central server due to public-key cryptography op-
erations; it does not address the issue of distributing this
load.
The main beneﬁts of SSL splitting are that it provides
an end-to-end data-integrity guarantee to unmodiﬁed
clients, that it reduces the bandwidth consumed by the
server, and that it requires only a simple protocol be-
tween the server and the proxy. Experiments with a
modiﬁed OpenSSL library that supports SSL splitting
show signiﬁcant bandwidth savings for ﬁles larger than
4,000 bytes: when the data of a ﬁle is cached on the
proxy, the server need only transmit the SSL handshake
messages, HTTP header, MAC stream, and payload IDs.
Because of these advantages and the ease of deployment,
we hope that SSL splitting will form a convenient tran-
sition path for content-distribution systems to provide
end-to-end data integrity.
10 Acknowledgements
Jacob Strauss, Richard Tibbetts,
We thank David Anderson, Russ Cox, Kevin Fu,
Thomer Gil,
the
anonymous reviewers, the members of the MIT SIPB,
and the members of the PDOS group at MIT. Also,
thanks to the denizens of TOE, Noah Meyerhans, and
the www.lcs.mit.edu webmasters, for making our
measurements possible.
More information on SSL splitting and Barnraising
can be found at http://pdos.lcs.mit.edu/
barnraising/ .
References
[1] CAIN, B., BARBIR, A., NAIR, R., AND SPATSCHECK,
O. Known CN request-routing mechanisms.
draft-
ietf-cdi-known-request-routing-02.txt, Network Working
Group, November 2002.
[2] CLARKE, I., SANDBERG, O., WILEY, B., AND HONG,
Freenet: A distributed anonymous informa-
T. W.
In Proc. ICSI Work-
tion storage and retrieval system.
shop on Design Issues in Anonymity and Unobserv-
ability (Berkeley, California, June 2000). http://
freenet.sourceforge.net.
[3] DABEK, F., KAASHOEK, M. F., KARGER, D., MOR-
RIS, R., AND STOICA, I. Wide-area cooperative storage
with CFS. In Proc. 18th ACM Symposium on Operating
Systems Principles (SOSP ’01) (Oct. 2001).
198
12th USENIX Security Symposium 
USENIX Association
[19] RESCORLA, E. SSL and TLS. Addison-Wesley, 2001.
[20] RESCORLA, E., AND SCHIFFMAN, A. The Secure Hy-
perText Transfer Protocol. RFC 2660, Network Working
Group, 1999.
[21] ROWSTRON, A., AND DRUSCHEL, P. Storage manage-
ment and caching in PAST, a large-scale, persistent peer-
to-peer storage utility. In Proc. 18th ACM Symposium on
Operating Systems Principles (SOSP ’01) (Oct. 2001).
[22] SHACHAM, H., AND BONEH, D. Fast-track session
establishment for TLS.
In Proceedings of NDSS (Feb.
2002), M. Tripunitara, Ed., Internet Society, pp. 195–
202. http://hovav.net/.
[23] TUCKE, S., ENGERT, D., FOSTER, I., WELCH, V.,
THOMPSON, M., PEARLMAN, L., AND KESSELMAN,
Internet x.509 public key infrastructure proxy cer-
C.
tiﬁcate proﬁle.
Internet draft (draft-ietf-pkix-proxy-
03), Network Working Group, October 2002. Work in
progress.
[24] WESSELS, D. Squid internet object cache. http://
squid.nlanr.net/Squid/.
[25] WWW.RPM.ORG.
RPM software packaging tool.
http://www.rpm.org/.
[4] DIERKS, T., AND RESCORLA, E. The TLS protocol ver-
sion 1.1. draft-ietf-tls-rfc2246-bis-04.txt, Network Work-
ing Group, April 2003.
[5] FIPS 180-1. Secure Hash Standard. U.S. Department of
Commerce/N.I.S.T., National Technical Information Ser-
vice, Springﬁeld, VA, April 1995.
[6] FLINN,
J.,
SINNAMAHIDEE,
S., AND SATYA-
NARAYANAN, M. Data staging on untrusted surrogates.
Tech. Rep. IRP-TR-02-2, Intel Research, May 2002.
[7] FREIER, A. O., KARLTON, P., AND KOCHER, P. C.
The SSL protocol version 3.0. Internet draft (draft-freier-
ssl-version3-02.txt), Network Working Group, Novem-
ber 1996. Work in progress.
[8] FU, K., KAASHOEK, M. F., AND MAZI `ERES, D. Fast
and secure distributed read-only ﬁle system. ACM Trans-
actions on Computer Systems 20, 1 (February 2002), 1–
24.
[9] IYER, S., ROWSTRON, A., AND DRUSCHEL, P. Squir-
rel: A decentralized, peer-to-peer web cache.
In 21st
ACM Symposium on Principles of Distributed Comput-
ing (PODC 2002) (July 2002).
[10] JANNOTTI, J., GIFFORD, D. K., JOHNSON, K. L.,
KAASHOEK, M. F., AND O’TOOLE, JR., J. W. Over-
cast: Reliable multicasting with an overlay network. In
Proc. of the 4th OSDI (Oct. 2002), pp. 197–212.
[11] KARGER, D., LEIGHTON, T., LEWIN, D., AND SHER-
MAN, A. Web caching with consistent hashing.
In
The eighth Word Wide Web Conference (Toronto, Canada,
May 1999).
[12] KRISHNAMURTHY, B., WILLS, C., AND ZHANG, Y.
On the use and performance of content distribution net-
works. Tech. Rep. TD-52AMHL, ATT Research Labs,
Aug. 2001.
[13] KUBIATOWICZ, J., BINDEL, D., CHEN, Y., CZERWIN-
SKI, S., EATON, P., GEELS, D., GUMMADI, R., RHEA,
S., WEATHERSPOON, H., WEIMER, W., WELLS, C.,
AND ZHAO, B. OceanStore: An architecture for global-
scale persistent storage. In Proceeedings of the Ninth in-
ternational Conference on Architectural Support for Pro-
gramming Languages and Operating Systems (ASPLOS
2000) (Boston, MA, November 2000), pp. 190–201.
[14] MODADUGU, N., AND GOH, E.-J.
The design
and implementation of WASP: a wide-area secure
proxy.
http:/
/crypto.stanford.edu/˜eujin/papers/
wasp.ps.
Tech. rep., Stanford, Oct. 2002.
[15] MOORE, D. MyDNS. http://mydns.bboy.net/.
[16] MYSQL AB. MySQL database server. http://
www.mysql.com/.
[17] ORAM, A., Ed. Peer-to-peer: Harnessing the power of
disruptive technologies. O’Reilly, Mar. 2001.
[18] RESCORLA, E. HTTP over TLS. RFC 2818, Network
Working Group, May 2000.
USENIX Association
12th USENIX Security Symposium 
199