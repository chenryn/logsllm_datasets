by a compiler called checkpolicy and loaded in the kernel at boot
time. Needless to say, configuring a SEAndroid policy is critical,
but at the same time, not an easy task [41, 42]. A misconfigured
policy will lead to misbehaviors or even security vulnerabilities. In
order to understand the complexity of the policy, we need to first
understand what the rules look like.
Allow rules. The majority of the policy consists of a sequence
of “allow rules”, such as allow appdomain zygote_tmpfs:file
read, which states that any subject of the type appdomain (i.e., all
applications) should be granted access to any file object of the
type zygote_tmpfs (i.e., files that the zygote process created in the
tmp file system). Besides file, typical classes also include directory,
socket, process, and so on, each indicating a particular category of
resources. This rule additionally specifies a read permission, mean-
ing that accesses can only happen via the read system call. As we
can see, such rules allow for very fine-grained policy, but writing
a rule for each subject and object/class pair for every system call
would not scale.
Abstraction features. To avoid the policy size from growing
out of control, the SEAndroid/SELinux policy language supports a
number of abstraction features, such as wildcards, groups, negation,
and complements. A wildcard (*) can be used in any object, class,
or permission fields to represent “any possible entity”. For instance,
a rule allow appdomain zygote_tmpfs:file * would allow any
system call, not just read. One could additionally group several
entities together, such as allow appdomain zygote_tmpfs: file
dir *. The complement feature is indicated using a tilde (∼), such
as allow init fs_type:filesystem ∼relabelto, meaning that
any system call but a relabelto is permitted.
Neverallow rules. “Neverallow” rules cancel any overlapping
allow rules, i.e., a neverallow rule will always take precedence over
a conflicting allow rule. These rules have a similar format with
allow rules, such as neverallow domain init:binder call.
2.4 The complexity of SEAndroid policy
Over the years, the SEAndroid policy has grown to be very complex.
For instance, the snapshot as of July 2017 specifies 91 classes and
1,603 permissions. In addition to this, three more factors exacerbate
the complexity.
First, the use of abstraction features only hide the complexity
but does not eliminate it. For instance, allow untrusted_app
self:file * may be easier to read, but the wildcard also provides
an opportunity to sweep important issues under the table. Similar
to abstraction features, SELinux supports DTE [4], which allows
a domain to be associated with multiple types. This significantly
decreases the number of rules, but again, hides complexity and
potential vulnerability.
Second, the mixed use of allow and neverallow rules makes
it challenging to accurately reason about the exact behavior of
the security policy. In fact, SEAndroid is by nature a mandatory
access control mechanism, which means that the default action for
anything is already “disallow”, unless explicitly granted access by
an allow rule. The existence of neverallow rules itself reflects that
the policy complexity has grown to an extent where such rules
need to be in place to ensure that misconfigurations are caught.
Third, the policy engineering practice is at times idiosyncratic.
One common practice of developers, for instance, is to extract denial
messages from the kernel log using tools like audit2allow and
simply create a new policy to allow them. Security concerns aside,
this tends to create unoptimized, messy policy rules.
The combination of the above factors mean that it becomes
difficult for an analyst to read the rules and understand exactly
what a given local change might entail in the final calculus of what
is allowed and what is denied. Such complexity, in fact, is one of
the motivating factors for us to perform this analysis.
631ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
B. Im et al.
3 METHODOLOGIES
To the best of our knowledge, we are the first to perform an histori-
cal analysis of the SEAndroid policy. This is in contrast to previous
work, such as Wang et al. [50] that use machine learning to im-
prove the policy, and Zanin et al. [51] that use formal methods to
verify policy correctness. Our goal is to understand not only the
most recent snapshot, but also how the policy has evolved over time.
Since its introduction, more than 16,000 commits have accumulated
in the repository, with detailed timestamps, author information,
and commit messages, providing a valuable source of information
for understanding SEAndroid.
3.1 The “box” metric
One might wonder whether the complexity of a policy snapshot
could simply be measured by counting the number of rules. How-
ever, this is not enough due to the abstraction features, such as
macros, groups, and wildcards, that are heavily used throughout
the policy base. To address this, we have designed a new metric,
the “box”, which is similar in spirit to Lampson’s term “attribute” in
his original work on access control matrices [22]. At a high level, a
box is a quadruple with one subject type, one object type, one class,
and one permission. This is the atomic unit that we use to quantify
the complexity. With this, we can look at two interesting metrics:
how many rules target each box, as well as how many boxes are
targeted by each rule.
From rules to boxes. In order to obtain the boxes, we decom-
pose each rule in the policy base in the following way. First, we
expand all the macros used in the policy rules, and obtain all the
classes and permissions from the access_vectors file. We then
scan all the policy files and obtain all attributes and types. After
this, we perform a second pass over all the policy files and decom-
pose each allow and neverallow rule to their respective boxes,
using the subject, object, class, and permission fields in each rule.
A single allow rule may be decomposed into many allow boxes;
neverallow rules are decomposed as “negative” boxes which are
then subtracted from the allow boxes. The final outcome is a list
of allow boxes equivalent to the original policy.
3.2 Git repository analysis
We repeat this analysis using boxes for each snapshot contained
in the Git history. A Git history is a directed acyclic graph (DAG),
where the commits are vertices and parent-child relations are edges.
Because Git supports multiple branches which might then merge,
not every pair of Git commits is necessarily going to have an
ancestor-descent relationship. By analyzing the graph along with
the contents of each vertex, we would be able to understand how the
policy evolved over time. In addition to analyzing the source code
“diff” in each commit, a commit also has various types of metadata,
such as the committer’s timestamp, email address, and comments.
Such information allows us to gain further understanding of the
rationale behind each policy change. Last but not least, based on
the timestamps of the Git commits, we can also associate these
changes to important historical events, such as security breaches.
One complication that arises due to the nature of Git is the
large number of branches, as it is a distributed source code man-
agement system with many contributors. A contributor can create
Figure 3: The number of rules vs. the number of boxes.
new branches any time without communicating with the master
branch, and merge these branches back. Consequently, if we looked
only at the timestamp of each commit and ordered every commit
by these timestamps, we would be looking at multiple interleaved
histories. Git also supports a “rebase” feature that allows separate
branches to be rearranged into single linear timeline, albeit with
the original timestamps, although multiple changes can also be
“squashed” post-facto into a single commit event. Suffice to say
that our view of the Git repository, as it’s delivered to us, certainly
represents the evolution of the SEAndroid policy over time, but it’s
possible that we’re not seeing important parts of the history.
To simplify our analysis, we decided to perform our measure-
ment study on the master branch only. Although looking at other
branches may give additional information, we believe that an anal-
ysis of the master branch is a useful starting point, because the
master branch reflects the history of Android as it was shipped
from Google through AOSP to the Android OEMs.
3.3 Our measurement tool
We build our measurement tool in Python using 2,000 lines of code,
with three components. Our crawler uses standard Git commands
to check out the repository snapshots, our parser generates the
box metrics from rules, and our serializer uses Python’s msgpack
library to store the policy to the disk.
On our experiment platform, an Intel Core i7 computer with
4 cores and 32 GB RAM and a 4 TB hard disk, our tool takes several
seconds per policy snapshot, parsing all rules and generating boxes
from the rules. For all commits from January 2012 to August 2018,
our tool generates 3 TB of raw data, with hundreds of thousands of
boxes per commit. Constructing the full database takes more than
90 hours of processing.
4 MEASUREMENT RESULTS
In this section and the next, we present the measurement results
obtained from 16,100 commits to the SEAndroid policy repository
between January 2012 and August 2018. We focus on the results
obtained using the new box metric in this section, and provide a
broader, historical analysis in the next section.
4.1 Boxes vs. rules
Figure 3 shows two time series of the number of rules versus the
number of boxes in each commit. We can see that, except for the
period of time between mid-2013 and mid-2015, the curves are
 1001,00010,000100,0001,000,000Jan-12Jan-13Jan-14Jan-15Jan-16Jan-17Jan-18Number of rules or boxesDateNumber ofboxesNumber ofrules4.34.45.06.07.08.09.0AABBB632An Historical Analysis of the SEAndroid Policy Evolution
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
increasing roughly exponentially (note that the Y-axis is in loga-
rithmic scale).
Zooming in on the timeline between mid-2013 and mid-2015, we
can see many fluctuations in both curves. We have in particular
identified two events that we marked as “A” and “B”. In the “A”
commit, authored by a Google engineer, the number of rules sud-
denly dropped from 1,000 to 200; but the number of boxes jumped
from 214,000 to 2,315,000, an increase of more than 10×. We have
manually analyzed this commit, as well as the differences from the
previous commit, and found that this new commit associated all
types to a single domain—unconfineddomain. This new domain
allowed virtually any access to any object, and removed all other
individual access rules with the same subjects and objects, which
represents a clear break from past practice. Interestingly, we found
that this “unconfined domain” was present even in the original
version authored by NSA; but at that time, it was intended for some
special entities that should bypass all security enforcement, and
nothing was associated with it.
So what was Google trying to accomplish with this one commit?
Here is the original commit message:
Make all domains unconfined.
This prevents denials from being generated by
the base policy. Over time, these rules will be
incrementally tightened to improve security.
We are not able to find any external documentation for this dras-
tic decision, but we could draw inferences about what problems
they may have been facing. In 2012, Android passed iOS in market
share [30], having roughly double the market share of iOS in 2013.
Such drastic growth and intense competition may have created
pressures to ship code on time, with security necessarily a lower
priority. As the commit text suggests, Google had long-term plans
for improving its use of SEAndroid, but for now wasn’t planning on
using it for anything beyond the benefit of having it integrated at all,
allowing OEMs to begin experimenting with SEAndroid security
policies.
Indeed, Google did fix it later. The “B” arrows indicate changes to
the SEAndroid policy that drastically shrank the size of the “uncon-
fined domain”, and the general downward slope of the number of
boxes during this time period shows a diligent effort over 1.5 years
to ultimately eliminate the unconfined domain from the SEAndroid
policy. By the Android 6.0 release, the unconfined domain was no
longer in use.
We note the disconnect between the number of rules and the
number of boxes. Each of the “B” arrows shows a significant reduc-
tion in the number of boxes, yet there is no corresponding change
in the number of rules. This suggests an engineering process of
methodically adding focused rules to cover the needs of various ap-
plications that were previously satisfied by the unconfined domain.
After policy testing, large chunks of the unconfined domain could
be unnecessary and therefore removed. We see this in several large
downward steps in the number of boxes, as well as in the broader
downward slope during this time period.
As of 2018, Android is even bigger than before, there are more
participants than before, and the policy is no more changing rapidly,
so we do not expect that a similar event is happening, but this is
Figure 4: Average number of boxes per rule.
a great example for us to suggest we need proper metrics on the
policy configuration as well as the documentation.
Takeaway #1: Such results illustrate the importance of consider-
ing rules and boxes as distinct metrics of policy complexity. Even
though in more recent years we see the rules and boxes growing
side by side, there is demonstrably no necessity that there be a
linear relationship between rules and boxes.
4.2 Number of boxes in a rule
As we noted earlier, the number of boxes or rules, by themselves,
do not necessarily tell a complete story about the complexity of a
given security policy. We next look at the number of boxes per rule,
which measures the complexity due to the use of macros and other
grouping features of SELinux security policies.
Figure 4 shows these ratios as of each major Android release from
Android 4.3 through 9.0. We then group the results into frequency
buckets on a logarithmic scale, so “< 101” counts the number of
rules that touch 2 − 9 boxes, and “< 102” counts the number of
rules that touch 10 − 99 boxes. From this, we can see that we have
similar numbers of rules that touch a single box as we have rules
that touch 10 − 99 boxes, with some falloff once we consider rules
that impact 100 or more boxes.
For each frequency bin, we see an upward slope from Android 4.3
through to 8.0. Keep in mind that the y-axis is log-scaled, so these
represent an exponentially growing number of rules in each bin,
which is consistent with our earlier measurements in Figure 3.