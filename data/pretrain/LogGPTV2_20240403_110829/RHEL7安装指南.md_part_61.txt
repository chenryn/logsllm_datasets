    *master*，并使用逗号分开的作为成组设备中辅助设备的物理（以太网）设备替换
    *slaves*。例如：
    :::
    ``` screen
    team=team0:em1,em2
    ```
:::
::: variablelist
[⁠]{#chap-anaconda-boot-options.html#list-boot-options-advanced}
**高级安装选项**
[`inst.kexec`{.option}]{.term}
:   []{#chap-anaconda-boot-options.html#idm139805809248800
    .indexterm}[]{#chap-anaconda-boot-options.html#idm139805796952160
    .indexterm}
    ::: para
    如果指定这个选项，安装程序将在安装结束时而不是重启时使用
    [**kexec**]{.application}
    系统调用。这样会立即载入新系统，并绕过通常有 BIOS
    或固件执行的硬件初始化。
    :::
    ::: {.important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    由于使用 [**kexec**]{.application}
    引导系统时的复杂性，可单独测试，并保证在每个状态下保证其功能。
    :::
    ::: para
    使用 [**kexec**]{.application}
    时，设备注册（通常完全系统重启后会清除）中仍有数据，可能会对一些设备驱动程序产生潜在影响。
    :::
    :::
    :::
[`inst.gpt`{.option}]{.term}
:   []{#chap-anaconda-boot-options.html#idm139805854432928
    .indexterm}[]{#chap-anaconda-boot-options.html#idm139805790140112
    .indexterm}[]{#chap-anaconda-boot-options.html#idm139805790138992
    .indexterm}
    ::: para
    强制安装程序在
    GUID分区表（GPT）而不是主引导记录（MBR）中安装分区信息。这个选项对使用
    UEFI 的系统没有任何意义，除非采用与 BIOS 兼容的模式。
    :::
    ::: para
    通常使用 BIOS 的系统和兼容 BIOS 的使用 UEFI 的系统会尝试使用 MBR
    方案保存分区信息，除非磁盘容积超过
    2TB。使用这个选项会更改这个行为，即使磁盘小于 2TB 也允许 GPT 写入。
    :::
    ::: para
    有关 GPT 和 MBR 的详情，请查看 [第 6.14.1.1 节 "MBR 和 GPT
    注意事项"](#chap-installing-using-anaconda-x86.html#sect-bootloader-mbr-gpt-x86){.xref}；有关常规
    GPT、MBR 和磁盘分区的详情，请查看 [第 A.1.4 节 "GUID
    分区表（GPT）"](#appe-disk-partitions-overview.html#sect-disk-partitioning-guid-partition-table){.xref}。
    :::
[`inst.multilib`{.option}]{.term}
:   []{#chap-anaconda-boot-options.html#idm139805871144288
    .indexterm}[]{#chap-anaconda-boot-options.html#idm139805875925664
    .indexterm}
    ::: para
    为 multilib 软件包配置该系统（即允许在 64 位 x86 系统中安装 32
    位软件包）并安装在本小节中指定的软件包。
    :::
    ::: para
    通常在 AMD64 和 Intel 64 系统中，只安装用于整个架构（标记为
    `x86_64`{.literal}）的软件包以及用于所有架构（标记为
    `noarch`{.literal}）软件包。使用这个选项时，将自动安装用于 32 位 AMD
    或者 Intel 系统（标记为 `i686`{.literal}）的软件包。
    :::
    ::: para
    这只适用于在 `%packages`{.literal}
    部分直接指定的软件包。如果软件包只作为相依性安装，则只会安装指定的相依性。例如：如果要安装软件包
    [bash]{.package}，它依赖于软件包
    [glibc]{.package}，会在多个变体中安装前一个软件包，而只具体要求的变体中安装后一个软件包。
    :::
[`inst.nosave=`{.option}]{.term}
:   ::: para
    这个选项是在 Red Hat Enterprise Linux 7.3 中引进，控制要将哪些
    Kickstart 文件和安装日志保存在安装的系统中。它对禁止在执行 OEM
    操作系统安装时保存此类数据时，或者使用敏感数据生产映象（比如内部存储库
    URL）时特别有帮助，因为这些资源可能会在 kickstart
    文件和（/或）映象日志中提及。这个选项的可能值为：
    :::
    ::: para
    `input_ks`{.literal} - 禁用保存 Kickstart 文件（如果有）输入。
    :::
    ::: para
    `output_ks`{.literal} - 禁止将 Anaconda 生成的输出 Kickstart 文件。
    :::
    ::: para
    `all_ks`{.literal} - 禁止保存输入和输出 Kickstart 文件。
    :::
    ::: para
    `logs`{.literal} - 禁止保存所有安装日志。
    :::
    ::: para
    `all`{.literal} - 禁止保存所有 Kickstart 文件及所有安装日志。
    :::
    ::: para
    可将多个值合并为一个逗号分开的列表，例如：`input_ks,logs`{.literal}
    :::
[`inst.zram`{.option}]{.term}
:   []{#chap-anaconda-boot-options.html#idm139805793712880
    .indexterm}[]{#chap-anaconda-boot-options.html#idm139805847459520
    .indexterm}[]{#chap-anaconda-boot-options.html#idm139805847458400
    .indexterm}
    ::: para
    这个选项控制安装过程中的 *zRAM* swap 使用。它可在系统 RAM
    内部创建压缩块设备，并在 swap 空间而不是硬盘中使用该
    RAM。这样可允许安装程序大量增加可用内存数量，这样比使用较低内存更迅速地安装。
    :::
    ::: para
    默认情况下，在使用 2GB 或更少 RAM 的 zRAM 系统中会启用
    swap，并在使用 2GB 以上内存的系统中禁用
    swap。可使用此选项更改这个行为 - 即 2GB 以上 RAM 的系统，使用
    `inst.zram=1`{.option} 启用 swap，并在使用 2GB
    或更少内存的系统中使用 `inst.zram=0`{.option} 禁用这个功能。
    :::
:::
::: variablelist
[⁠]{#chap-anaconda-boot-options.html#list-boot-options-vnc}
**启用远程访问**
[]{#chap-anaconda-boot-options.html#idm139805833962608
.indexterm}[]{#chap-anaconda-boot-options.html#idm139805840466096
.indexterm}
::: para
远程图形安装需要为 [**Anaconda**]{.application} 配置一下选项。详情请查看
[第 22 章 *使用 VNC 安装*](#chap-vnc-installations.html){.xref}。
:::
[`inst.vnc`{.option}]{.term}
:   ::: para
    指定应在 `VNC`{.systemitem}
    会话中运行该安装程序的图形界面。如果您指定这个选项，则需要使用可与安装程序互动的
    VNC 客户端应用程序连接到该系统。已启用 VNC
    共享，因此可同时连接多个客户端。
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    使用 VNC 安装的系统默认以文本模式启动。
    :::
    :::
    :::
[`inst.vncpassword=`{.option}]{.term}
:   ::: para
    为该安装程序使用的 VNC 服务器设置一个秘密。任意尝试连接到该系统的
    VNC
    客户端都必须提供正确的密码方可获得访问权限。例如：`inst.vncpassword=testpwd`{.option}
    会将密码设定为 `testpwd`{.literal}。VNC 密码长度必须在 6-8
    个字符之间。
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    如果您指定无效密码（太短或者太长），安装程序都会显示一条信息提示您指定一个新的密码。
    :::
    ``` screen
    VNC password must be six to eight characters long.
    Please enter a new one, or leave blank for no password.
    Password:
    ```
    :::
    :::
[`inst.vncconnect=`{.option}]{.term}
:   ::: para
    安装开始后在指定主机和端口连接侦听 VNC 客户端。正确的语法为
    `inst.vncconnect=host:port`{.option}，其中 *host* 为 VNC
    客户端主机的地址，*port* 指定要使用哪个端口。*port*
    参数为自选，如果您没有指定，安装程序就会使用 `5900`{.literal}。
    :::
:::
::: variablelist
[⁠]{#chap-anaconda-boot-options.html#list-boot-options-debug}
**调试及故障排除**
[]{#chap-anaconda-boot-options.html#idm139805799897168
.indexterm}[]{#chap-anaconda-boot-options.html#idm139805799393648
.indexterm}[]{#chap-anaconda-boot-options.html#idm139805870897952
.indexterm}
[`inst.updates=`{.option}]{.term}
:   ::: para
    指定安装程序运行时要使用的 `updates.img`{.filename}
    文件位置。其语法与 `inst.repo`{.option} 选项相同 - 详情请查看
    [表 20.1
    "安装源"](#chap-anaconda-boot-options.html#tabl-boot-options-installation-sources){.xref}。在所有格式中，如果没有指定文件名而只是指定目录，安装程序会寻找名为
    `updates.img`{.filename} 的文件。
    :::
[`inst.loglevel=`{.option}]{.term}
:   ::: para
    指定所要记录终端中信息的最低等级。这只适用于终端记录；日志文件总是包含所有等级的信息。
    :::
    ::: para
    这个选项的可能值从低到高的等级为：`debug`{.literal},
    `info`{.literal}, `warning`{.literal}, `error`{.literal} 和
    `critical`{.literal}默认值为
    `info`{.literal}，就是说默认情况下终端记录中只显示等级在
    `info`{.literal} 到 `critical`{.literal} 之间的信息。
    :::
[`inst.syslog=`{.option}]{.term}
:   ::: para
    开始安装后，这个选项会将日志信息发送到指定主机的 syslog
    进程。必须将这个远程 syslog 进程配置为接受进入的连接。有关如何将
    syslog 服务配置为接受进入的连接请查看[《Red Hat Enterprise Linux 7
    系统管理员指南》](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html)。
    :::
[`inst.virtiolog=`{.option}]{.term}
:   ::: para
    指定 `virtio`{.systemitem} 端口（`/dev/virtio-ports/name`{.filename}
    中的字符设备）用来转发日志。默认值为
    `org.fedoraproject.anaconda.log.0`{.literal}，如果显示此端口则会使用它。
    :::
:::
::: section
::: titlepage
## [⁠]{#chap-anaconda-boot-options.html#sect-boot-options-deprecated-removed}20.1.1. 淘汰及删除的引导选项 {.title}
:::
::: variablelist
[⁠]{#chap-anaconda-boot-options.html#list-boot-options-deprecated}
**淘汰的引导选项**
::: para
这个列表中的选项已[*被淘汰*]{.emphasis}。它们仍可以使用，但有其他可提供同样功能的选项。不建议您使用淘汰的选项，且这些选项将在今后的发行本中删除。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
注：如 [第 20.1 节
"在引导菜单中配置安装系统"](#chap-anaconda-boot-options.html#sect-boot-options-installer){.xref}
所述，具体安装程序的选项现在使用 `inst.`{.literal}
前缀。例如：`vnc=`{.option} 选项已淘汰，取而代之的是
`inst.vnc=`{.option} 选项。在这里没有列出这些变化。
:::
:::
:::
[`method=`{.option}]{.term}
:   ::: para
    配置的安装方法。请使用 `inst.repo=`{.option} 选项替换。
    :::
[`repo=nfsiso:server:/path`{.option}]{.term}
:   ::: para
    在 NFS 安装中，指定目标是位于 NFS 服务器中的一个 ISO
    映像而不是安装树。不同的是现在可自动探测，就是说它与
    `inst.repo=nfs:server:/path`{.option} 的功能相同。
    :::
[`dns=`{.option}]{.term}
:   ::: para
    配置的域名服务器（DNS）。请使用 `nameserver=`{.option} 选项替换。
    :::
[`netmask=`{.option}, `gateway=`{.option}, `hostname=`{.option}, `ip=`{.option}, `ipv6=`{.option}]{.term}
:   ::: para
    已将这些选项整合在 `ip=`{.option} 选项中。
    :::
[`ksdevice=`{.option}]{.term}
:   ::: para
    选择在安装初期要使用的网络设备。已采用不同选项替换不同值，如下表所示。
    :::
    ::: table
    [⁠]{#chap-anaconda-boot-options.html#tabl-boot-options-ksdevice}
    **表 20.7. 自动接口配置方法**
    ::: table-contents
      ----------------------------------------------------------------------------
      值                           目前行为
      ---------------------------- -----------------------------------------------
      Not present                  所有设备均使用 `dhcp`{.systemitem}
                                   激活，除非使用 `ip=`{.option} 选项和（/或者）
                                   `BOOTIF`{.option} 选项指定要求的设备及配置。
      `ksdevice=link`{.option}     类似上面的论述，不同的是总是使用 initramfs
                                   激活网络，无论您需要与否。
      `ksdevice=bootif`{.option}   忽略的选项（指定时默认使用 BOOTID= 选项）
      `ksdevice=ibft`{.option}     使用 `ip=ibft`{.option}
                                   [**dracut**]{.application} 选项替换
      `ksdevice=MAC`{.option}      使用 `BOOTIF=MAC`{.option} 替换
      `ksdevice=device`{.option}   使用 `ip=`{.option} [**dracut**]{.application}
                                   选项指定设备名称替换
      ----------------------------------------------------------------------------
    :::
    :::
    ::: {.important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    指定 Kickstart 安装时，如果使用本地介质引导，且在本地介质中保存
    Kickstart 文件，就不会初始化网络。就是说所有需要网络访问的 Kickstart
    选项，比如访问网络位置的预安装或者后安装脚本都会造成安装失败。这是个已知的问题，详情请查看
    BZ#[1085310](https://bugzilla.redhat.com/show_bug.cgi?id=1085310)。
    :::
    ::: para
    要解决这个问题，可以使用 `ksdevice=link`{.option} 引导选项，也可以在
    Kickstart 文件的 `network`{.command} 命令中添加
    `--device=link`{.option} 选项。
    :::
    :::
    :::
[`blacklist=`{.option}]{.term}
:   ::: para
    用来禁用指定的驱动程序。目前由 `modprobe.blacklist=`{.option}
    选项处理。
    :::
[`nofirewire=`{.option}]{.term}
:   ::: para
    禁用的防火墙接口支持。您也可以使用 `modprobe.blacklist=`{.option}
    选项禁用防火墙驱动程序（`firewire_ohci`{.literal}）：
    :::
    ``` screen
    modprobe.blacklist=firewire_ohci
    ```
:::
::: variablelist
[⁠]{#chap-anaconda-boot-options.html#list-boot-options-removed}
**删除的引导选项**
::: para