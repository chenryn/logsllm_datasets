to prevent this Dom0 information divulgation, EC2 has
hidden Dom0 in any and all routing paths, i.e. at present
the Dom0 does not appear in any trace-routing results.
5.2.2 Hidden hops
To suppress cloud cartography enabled by trace-routing,
EC2 has hidden certain hops in the routing paths. Ac-
cording to the work in May 2013 [13], trafﬁc only needs
to traverse one hop between two instances on the same
physical machine and two hops between instances in
936  24th USENIX Security Symposium 
USENIX Association
8
USENIX Association  
24th USENIX Security Symposium  937
Figure11:Acommontreetopologyofadatacenter.Figure12:ThetopologywithEndofRowswitch.Figure13:ThetopologywithTopofRackswitch.asamerackbutnotonthesamephysicalmachine.Thepathsbetweeninstancesindifferentrackstypicallyhave4or6hops.However,ourneighborhoodtrace-routingresultsshowthattheroutingmanagementhasbeenchangedinEC2.First,apathofonehopdoesnotnecessarilyindicateco-residenceanymore.Ourneighborhoodtrace-routingresultsshowthataninstancecanhaveaverylargenum-berof1-hopneighbors.Forinstance,onem1.smallin-stancecanhavemorethan601-hopneighbors.Itistechnicallyimpracticaltohostsomanyinstancesonanm1machine.Toverifyourhypothesis,weselectedsev-eralpairsofinstanceswitha1-hoppathandcheckedco-residenceusingcovertchannelconstruction.Ourco-residenceveriﬁcationfailsformostofthesepairs,con-ﬁrmingthattwoinstanceswitha1-hoppathdonotneces-sarilyco-locateonthesamephysicalmachine.Thisob-servationindicatesthatEC2evenhidestheToRswitchesintheroutingpathinsomecases,leavingonlyonehopinthepathbetweentwoinstancesinthesamerack.Second,weobservedmanyodd-hoppaths,accountingfor34.26%ofallpaths.Incontrast,almostallthepathsinthemeasurementconductedinMay2013areeven-hop[13].ThisindicatesthatthenetworkconﬁgurationofEC2haschangedsinceMay2013.Third,theToRswitchofasourceinstanceisshownastheﬁrsthopinthepath,whichindicatesthattheToRswitchshouldbeanL3router.However,wecannotob-servetheToRswitchofatargetinstanceinthetraces,im-plyingthatEC2hasconﬁguredtheToRswitchtohideit-selfintheincomingtrafﬁctotherack.Moreover,amongourtraces,weobservedthat76.11%ofpathshaveatleastonehopﬁlledwithstars.ThehopsﬁlledwithstarscanbearesultoftheconﬁgurationofcertaindevicessuchasL2switches;itisalsopossiblethatEC2hasdeliberatelyobscuredthosehopsforsecurityreasons.Thesepathswithinvisibleorobscuredhopssigniﬁcantlyincreasethedifﬁcultyofconductingcloudcartography.5.3IntroducingVPCTosuppressthethreatfrominternalnetworks,EC2pro-posesaservicecalledVirtualPrivateCloud(VPC).VPCisalogicallyisolatednetworkingenvironmentthathasaseparateprivateIPspaceandroutingconﬁguration.Af-tercreatingaVPC,acustomercanlaunchinstancesintoitsVPC,insteadofthelargeEC2networkpool.ThecustomercanalsodivideaVPCintomultiplesubnets,whereeachsubnetcanhaveapreferredavailabilityzonetoplaceinstances.Moreover,EC2providesinstancetypesthatareded-icatedforVPCinstances.Theseinstancetypesincludet2.micro,t2.small,andt2.medium.Accordingtothein-stancetypenamingpolicy,instanceswitht2typeshouldbeplacedonthosephysicalserverswiththet2model.AninstanceinaVPCcanonlybedetectedthroughitspublicIPaddress,anditsprivateaddresscanneverbeknownbyanyentityexcepttheowner.Therefore,withinaVPC,anattackercannolongerspeculatethephysicallocationofatargetusingitsprivateIPaddress,whichsigniﬁcantlyreducesthethreatofco-residence.5.4SpeculatingnetworktopologyBesidesroutingconﬁguration,theknowledgeofnetworktopologyalsohelpstoachieveco-residence,especiallyforhighlevelco-residencesuchasrack-level.Figure11depictsthetypicalnetworktopologyinadatacenter.Thecoreandaggregationswitchesconstructatreetopology.Beforeconnectingtotheaggregateswitches,therearetwomainstreamwaystoconnectserversinarack/racks:EndofRow(EoR)switchesandTopofRack(ToR)switches.ForEoRswitches,asillustratedinFigure12,serversofseveralracksareconnectedtothesameEoRswitch.Tobemoreprecise,anEoRswitchcanbeaswitchar-rayincludingagroupofinterconnectedswitches.Theseswitchescanfunctionasaggregateswitchesthemselves.ForToRswitches,asillustratedinFigure13,allserversinarackareﬁrstconnectedtoaseparateToRswitch,andthentheToRswitchisconnectedtoaggregateswitches.Suchatopologyhascurrentlybecomethemainstreamnetworktopologyinadatacenter.ThereareseveralvariantsofEoRtopology,suchasMiddleofRack(MoR)andToRswitchwithEoRman-agement.Meanwhile,thereareotherpotentialtopolo-giessuchasOpenStackclusterinadatacenter.There-fore,weclassifythenetworktopologyofarack/racksintotwoclasses:ToRconnectedandnon-ToRconnected.ToidentifywhetherarackusesaToRswitchoranon-ToRswitch,weanalyzetheneighborhoodtrace-routingresultsofmultipleinstances.Basedonouranalysis,we9proposed a method to identify the network topology of a
rack, ToR-connected or non-ToR-connected.
ToR-connected: a rack that deploys ToR switches
must satisfy all of the following conditions:
1. For an instance A in the rack, there should be at least
one instance B that is only one hop away from A.
2. For an instance A in the rack, there should be at least
8 instances that are two hops away from A.
3. For any two instances A and B, if (i) conditions 1
and 2 hold for both A and B, (ii) the trace-routing
path between A and B has no more than two hops,
and (iii) for any instance C, the ﬁrst hop in the trace-
routing path from A to C is the same as the ﬁrst hop
in the path from B to C, then A and B are considered
as being in the same ToR rack.
4. For an instance A in the rack, for any trace-routing
path with A as source and length larger than 2, the
ﬁrst hop in the path should share the /16 preﬁx with
the private IP address of A.
The IP address of the ﬁrst hop (i.e., ToR switch’s IP ad-
dress) is used to differentiate two ToR racks.
Non-ToR-connected: a rack that deploys non-ToR
switches must satisfy all of the following conditions:
1. For an instance A in the rack, there should be no
instance B such that the path between A and B has
two hops.
2. For an instance A in the rack, for any instance B
in EC2, either (i) A and B are machine-level co-
resident and the path between A and B has only one
hop or (ii) the path between A and B has more than
two hops.
3. For two instances A and B, if (i) conditions 1 and
2 hold for both A and B, (ii) A and B share the /24
preﬁx of their private IP, (iii) the trace-routing path
between A and B has 4 or 6 hops, and (iv) for any
instance C, the ﬁrst hop in the path between A and
C is the same as the ﬁrst hop in the path between B
and C, then A and B are considered as being in the
same non-ToR rack.
4. For an instance A in the rack, for any trace-routing
path with A as source and length larger than 2, the
ﬁrst hop in the path should not share the /20 preﬁx
with the private IP address of A.
Again, the IP address of the ﬁrst hop is used to differen-
tiate two non-ToR racks.
In EC2, there are two “generations” of instances. The
old generation carries all the instances with m1 type, and
the new generation covers all the instances with other
types. We applied our method on m1.small, m1.medium,
m3.medium, and m3.large type, which cover both old-
generation instances and new-generation instances.
Overall, we identiﬁed 59 distinct racks that host
m1.small instances, 18 racks that host m1.medium in-
stances, 22 racks that host m3.medium instances, and
10 racks that host m3.large instances. Among the 109
racks, there are only 14 racks identiﬁed as non-ToR-
connected while the rest are ToR-connected. Among the
14 non-ToR racks, we observed 12 old-generation racks,
in which 7 racks host m1.small instances and 5 racks host
m1.medium instances, and only 2 new-generation racks
host m3.medium instances.
Our results demonstrate that while both ToR racks and
non-ToR racks exist in EC2, ToR-connected is the dom-
inating topology in EC2. Moreover, it is evident that
new-generation machines are more likely to be located
in the ToR-connected topology, indicating that the ToR-
connected topology has become the main trend. While
the ToR-connected topology is easy to manage, the rout-
ing information is very straightforward since the ﬁrst hop
reveals which rack the instance is in. Such information
can be leveraged by an attacker to achieve rack-level co-
residence.
6 A New Battle in VPC
Using VPC, customers can protect their instances in an
isolated network environment. However, VPC only logi-
cally isolates the networks. The instances from different
VPCs may still share the same physical machine, leaving
the opportunity to achieve co-residence. In this section,
we ﬁrst take an overview on the usage of VPC in EC2,
and then we introduce a new method to attack instances
that are hidden behind VPCs.
6.1 The overview of VPC usage
For those instances in the default networks of EC2, our
inside scanner can obtain their private addresses via DNS
lookups. However, the DNS query for an instance in
a VPC will only return its public IP address. There-
fore, the instances in a VPC can be easily identiﬁed by
checking the DNS query results of our inside scanner,
i.e., any instance whose private IP address cannot be de-
tected by our inside scanner is an instance in a VPC. Fig-
ure 14 shows the VPC usage in EC2. As we can see,
all instances in VPC are assigned public IP addresses
in ﬁve different ranges: 107.20.0.0/14, 184.72.64.0/18,
54.208.0.0/15, 54.236.0.0/15, and 54.80.0.0/13. This im-
plies that all instances in a VPC are managed in a uni-
form manner. On average, in each round of our probing
we can observe 115,801 instances in a VPC, which are
around 17% of all live instances observed, demonstrat-
ing that VPC is widely used in EC2 to protect instances.
6.2 Routing paths of VPC instances
Since a VPC should be treated as a private network, the
routing policies for instances inside a VPC must be dif-
ferent from those in the default EC2 network. This rout-
ing difference can help us further understand the manage-
ment of a VPC. To connect a VPC to the public Internet, a
938  24th USENIX Security Symposium 
USENIX Association
10
4
x 10
P
I
e
t
a
v
i
r
p
o
n
h
4
3
2
1
0
0
t
i
w
s
t
s
o
h
f
o
r
e
b
m
u
N
107.20.0.0/14
184.72.64.0/18
54.208.0.0/15
54.236.0.0/15
54.80.0.0/13
200
800
400
Round of measurment
600
1000
1200
Figure 14: The live instances in VPCs.
customer must create a gateway and attach it to the VPC.
The gateway must be included into the route table of the
VPC. All trafﬁc from or to the Internet must go through
the gateway, but the trafﬁc inside EC2 does not require
the gateway to be involved.
Besides the basic understanding of the routing conﬁg-
uration of a VPC, we also need to know how a VPC is
connected with the default EC2 network and other VPCs.
We created several VPCs with two different accounts.
The instances with different types are launched into these
VPCs. Trace-routing is performed in four different ways:
(1) trace-routing from an instance in a VPC to another
instance in the same VPC, (2) trace-routing from an in-
stance in a VPC to an instance in another VPC, (3) trace-
routing from an instance in a VPC to an instance in the
default EC2 network, and (4) trace-routing from an in-
stance in the default EC2 network to an instance in a
VPC.
6.2.1 Routing within VPC
Routing inside the same VPC is expected to be simple.
We performed trace-routing between two instances in the
same VPC, using both private and public IP addresses.
The results show that trace-routing with private IP or
public IP addresses will yield different routing paths. If
trace-routing is performed with the private IP of the tar-
get instance, the result path has only one-hop, i.e., the
direct connection to the destination, which is reasonable.
However, if trace-routing is performed with the public IP
of the target, trace-routing will return two hops with the
ﬁrst hop obscured with stars. Apparently, EC2 intention-
ally hides some routing information. The routing infor-
mation between the two instances within the same VPC
is made transparent to customers. Such obscuration dis-
ables a customer from speculating the physical location
of the instances.
As discussed in Section V, even within the same VPC,
two instances can be located in different “subnets.” We
also performed trace-routing between two instances in
the same VPC but in different subnets. The resulting
paths do not differ from the paths between two instances
within the same subnet.
6.2.2 Routing between VPCs
The trafﬁc between instances in different VPCs should
traverse multiple switches and routers. Surprisingly, we
found that any routing path between any two instances in
any two different VPCs only has two hops: the ﬁrst hop is
obscured and the second hop is the destination. EC2 once
again obscures the routing path between VPCs to prevent
an adversary from revealing sensitive information of a
VPC, e.g., the IP address of a gateway.
6.2.3 Routing from VPC to default EC2 network
Although instances in a VPC no longer share a pri-
vate network with the default pool of EC2,
the
switches/routers that connect VPCs might still be physi-
cally connected to the other switches/routers in the data
center. How EC2 routes the trafﬁc between instances in a
VPC and instances in the default EC2 network can reveal
its network topology to some extent. Figure 15 shows
a sample trace-routing result from an instance in a VPC
to an instance in the default EC2 network. We can see
that the ﬁrst two hops of the path are obscured. This pre-
vents us from knowing the switch/router that connects
the VPC, thereby hiding the physical location of VPC
instances. However, we can still see parts of the path
and can infer the end-to-end latency based on the trace-
routing result.
6.2.4 Routing from default EC2 network to VPC
Figure 16 shows a sample trace-routing result from an
instance in the default EC2 network to an instance in a
VPC. The path is almost symmetric to the path from a
VPC to the default EC2 network. Again, the last two
hops before reaching the destination are obscured to hide
the information of the router/switch.
Overall, EC2 manages a VPC in a transparent fashion,
i.e., to a customer it should look like all instances in a
VPC are connected by a dedicated switch, just like a real
private network. However, instances in the same VPC
are not physically located together. These instances are
still located in different racks and are connected to differ-
ent ToR or EoR switches. Thus, the trafﬁc inside a VPC
might still traverse multiple switches/routers. Similarly,
the trafﬁc between an instance in a VPC and an instance
in the default EC2 network can have a similar path to the
trafﬁc between two instances in the default EC2 network.
However, EC2 hides or obscures certain hops in the path
to provide the image of “private network.”
6.3 Co-residence in VPC
The traditional way of achieving co-residence relies on
the knowledge of private IP address to seek potential can-
didates. With VPC, this approach no longer works as
VPC hides the private IP address of an instance. An alter-
native is to infer the physical location of a target based on
USENIX Association  
24th USENIX Security Symposium  939
11
940  24th USENIX Security Symposium 
USENIX Association
Figure15:Asampletrace-routingresultfromaninstanceinVPCtoaninstanceinEC2.Figure16:Asampletrace-routingresultfromaninstanceinEC2toaninstanceinVPC.theroutingpathstothetarget.Unfortunately,ourtrace-routingresultsshowthatsensitiveinformationofarout-ingpathisobscuredbyEC2,andthereforeitalsodoesnotworkwell.However,inourtrace-routingresultswefoundthattheend-to-endlatencytoandfromaninstanceinaVPCvarieswithdifferentinstancetypesandthelocationoftheinstance.Thislatencyvariationcanbeleveragedtohelpanattackerspeculatethetypeandlocationofatar-getinstance.Moreover,whileperformingtrace-routingbetweenaninstanceinaVPCandaninstanceinthede-faultEC2network,thenumberofhopsrequiredisnotobscured.Therefore,thenumberofhopsinapathcanalsobeleveragedtoderiveusefulinformationforachiev-ingco-residence.Basedonourmeasurementanalysis,weproposeanewmethodtoachieveco-residencewithinstancesinaVPC.Ithastwosteps:(1)speculatethetypeandavailabilityzoneofatargetand(2)launchprobinginstanceswiththesametypeinthesameavailabilityzoneandperformco-residenceveriﬁcation.6.3.1TypeandzonespeculationWecollectedstatisticaldataoftheend-to-endlatencybe-tweenapairofinstanceswithdifferenttypesandindif-ferentzones.Table2showspartoftheend-to-endlatencystatistics.EachrowrepresentsaninstanceinaVPCwithacertaintypeandavailabilityzonepreference.Eachcol-umnstandsforaninstanceinthedefaultEC2networkwithacertaintypeandavailabilityzonepreference.Eachvalueinthetableiscalculatedastheaverageof50sam-ples.Eachsampleisobtainedwithadistinctinstancepairandisaveragedoverﬁveroundsoflatencymeasure-ment.Withthislatencytable,weareabletoconstructalatencyvectorforeachtargetinstanceinaVPCandusethelatencyvectorstospeculatethetypeandavailabilityzoneofatarget.Therearethreeavailabilityzonesandeachzonehassixtypes:t1.micro,m1.small,m1.medium,m1.large,m3.medium,andm3.large.Thus,thecompleteversionofTable2has18rowsand18columns,whichcanbefoundinourtechnicalreport[22].Notethateachrowinthetablecanrepresentalatencyvector,andsuchalatencyvectorderivedfromourcontrolledsamplingiscalledabaselinevector.Ineachdifferentavailabilityzone,werandomlyse-lectaninstanceforeachdifferenttype,resultingin18(3×6)sampleinstancesintotalfortestingtypeandzonespeculation.ForeachtargetinaVPC,weperformtrace-routingfromeachofoursampleinstancestothetargetfor5timesandrecordtheaverageend-to-endlatencyofeachpair.Suchmeasurementcanprovideus18end-to-endla-tencyvalues,whichconstituteaninputvectoroflength18.Wethencalculatethecosinesimilaritybetweentheinputvectorandthese18baselinevectors.Thebaselinelatencyvectorthathasthehighestsimilaritywiththetar-getinputvectorisselected,andwecanspeculatethatthetargetinstancehasthesame{instancetype,availabilityzone}astheinstanceintheselectedbaselinevector.6.3.2Verifyingco-residenceToachieveco-residencewithaninstanceinaVPC,ourprobinginstancesarealsolaunchedinaVPC.TherearetworeasonsthatwedonotusetheinstancesinthedefaultEC2networkasprobinginstances.First,itispossiblethatEC2usesaseparatealgorithmtoplaceinstancesinaVPC.Inotherwords,comparedtoaninstanceinthedefaultEC2network,aninstanceinaVPCmayhaveabetterchancetoachieveco-residencewithaninstanceinanotherVPC.Second,aswehaveobserved,theend-to-endlatencybetweentwoinstancesintwodifferentVPCsismorestablethanthelatencybetweenaninstanceinthedefaultEC2networkandaninstanceinaVPC,whichallowsustoleveragelatencyforpre-ﬁltering.Similartoverifyingco-residenceinthedefaultEC2network,verifyingco-residenceinaVPCalsoincludestwosteps:pre-ﬁlteringandcovertchannelconstruction.Whilethewayofusingcovertchannelconstructiontoconﬁrmco-residenceremainsthesame,thepre-ﬁlteringprocessinaVPCisdifferent.Toverifywhetheranattackinstanceisco-residentwithatarget,werelyontworoundsofpre-ﬁlteringtoscreenoutirrelevantcandidates.First,weperformtrace-routingfromour18sampleinstancestoourattackinstanceandthetargetinstance.Ifanypathfromthesampleinstancetotheattackinstanceisnotequivalenttothecorrespond-ingpathfromthesampleinstancetothetargetintermsofnumberofhops,thisattackinstanceisabandoned.Second,ifallthepathsmatchinthenumberofhops,wemeasureend-to-endlatencybetweenourattackin-stanceandthetargetinstance.Figure17showsasam-plelatencydistributionbetweenaninstanceinaVPC121a-t1.micro
1a-m1.small
1a-m1.medium
1b-t1.micro
1b-m1.small
1b-m1.medium
1a-t1.micro
1.224ms
1.361ms
1.165ms
2.101ms
2.202ms
2.087ms
Table 2: End to end latency between different instances.
1a-m1.small
1.123ms
1.059ms
1.102ms
2.235ms
2.003ms
2.113ms
1a-m1.medium
1.025ms
1.100ms
0.986ms
2.188ms
2.190ms
1.965ms
1b-t1.micro
2.237ms
2.208ms
2.211ms
1.108ms
1.131ms
1.088ms
1b-m1.small
2.221ms
2.055ms
2.060ms
1.243ms
0.968ms
1.023ms
1b-m1.medium
2.304ms
2.198ms