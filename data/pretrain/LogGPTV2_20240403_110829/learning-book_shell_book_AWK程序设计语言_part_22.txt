伪操作符，用于定义一个常量C
汇编语言程序由语句序列组成，每一条语句都包括三个部分：标号，操作符，操作数，任意一个部分
都可以省略，标号如果存在，则必须是所在行的第一个字段，程序可以包含awk形式的注释，这里有一
个简单的汇编语言程序，它的功能是输出多个整数的和，0表示输入结束。
133
#print sum of input numbers (terminated by zero)
1d
zero
# initialize sum to zero
st
sum
loop get
read a number
jz
done
no more input if number is zero
add
sum
 add in accumulated sum
st
sum
 store new value back in sum
1o0p
 go back and read another number
done 1d
sum
print sum
put
halt
zero const 0
---
## Page 137
第六章小型语言
129
sum const
对应的目标程序由整数序列组成，这些整数其实就是程序的机器码形式，当目标程序运行时，CPU
从内存中读取指令，译码并执行，上面程序的机器码是：
0: 03010
1d
zero
# initialize sum to zero
1: 04011
st
sum
2:01000
loop get
read a number
3:08007
jz
done
 no more input if number is zero
4: 05011
add
sum
 add in accumulated sum
5: 04011
st
sum
# store new value back in sum
6: 09002
j
10op
#go back and read another number
7:03011
done 1d
sum
print sum
8:02000
put
9:10000
halt
10:00000
zero const 0
11: 00000
第一个字段是内存地址，第二个字段是编码后的指令，内存地址0存放的是汇编语言程序的第一条指令：
1d zero.
汇编程序对源程序进行汇编时需要遍历两次.第一次遍历利用字段分割操作对源程序进行词法与语
法检查：读取汇编语言源程序，忽略注释，为每一个标号分配内存地址，把操作符与操作数的中网表示形
式写到一个恪时文件中，第二次遍历读取临时文件，根据第一次遍历时计算的结果，把符号化的操作数转
换成内存地址，对操作符与操作数进行编码，把最终的机器语言程序保存到数组mem中.
我们将会开发一个解释器来完成另一半的工作，解释器可以用来模拟计算机执行机器语言程序时所
表现出的行为.解释器循环地从mem中读取指令，把指令译码成操作符与操作数，再模拟指令的执行.变
量 pc 用来模拟程序计数器(program counter).
134
# asm - assembler and interpreter for simple computer
#
usage: awk -f asm program-file data-files...
BEGIN{
srcfile = ARGV[1]
ARGV[1] = ""# remaining files are data
tempfile = "asm.temp"
n = split("const get put ld st add sub jpos jz j halt", x)
for (i = 1; i  0) {
sub(/#.*/, "")
strip comments
---
## Page 138
第六章小型语言
130
symtab[$1]= nextmem
#remember 1abel location
if (S2 != ""）{
 save op, addr if present
print $2 "\t" $3 >tempfile
nextmem++
}
close (tempfile)
ASSEMBLER PASS 2
nextmem = 0
while (getline  0) {
if ($2 !~ /^[0-9]*$/)# if symbolic addr,
$2 = symtab[$2]#replace by numeric value
x+]o=++x]
#INTERPRETER
for （pc = 0; pc >= 0; ){
addr = mem[pc]$ 1000
code = int(mem[pc++] / 1000)
if
(code == op["get"]){ getline acc }
else if (code == op["put"]){ print acc }
else if (code == op["st"])
{ mem[addr] = acc }
else if (code == op["ld"])
{acc = mem[addr]}
([ppeldo == apoo) T sta
{acc += mem[addr]}
else if (code == op["sub"])
{acc -= mem[addr]}
else if (code == op["jpos"]) { if (acc > 0) pc = addr }
（[1o == po）  s
{xppe=od（0==oe）}
else if (code "= op["j"])
( pc = addr }
else if (code == op["halt"]) { pc = -1 }
else
{pc =-1}
标号是汇编语句的第一个字段，操作符前面有一个空格符，第一次遍历前，把FS设置成【\t]+，于
135
是字段分隔符变成由多个空格符和制表符组成的序列，比较特殊的是，前导空格也被当作字段分隔符，所
以$1总是标号，而S2总是操作符.
因为伪操作符const的“操作码”是0，所以在第二次遍历时，语句
可以网时用来存放常数与指令.
---
## Page 139
第六章小型语言
131
Exercise 6.1修改asm,打印程序与内存的内容，就像上面显示的那样.
Exercise6.2增强解释器的功能，打印指令的执行轨迹
Exercise 6.3适当扩大汇编语言的规模，比如添加错误处理代码与其他条件判断指令.为了方便用户
使用，你会怎么处理立即数，比如add=1（如果不支持立即数，就必须要求用户自己创建一个名为one
的内存单元？
Exercise 6.4写一个反汇编程序，把内存中的内容转换成对应的汇编语言.
Exercise 6.5查看一台真实的机器（比如Apple-II和Commodore的6502芯片，或IBM PC及其兼
容机的8086芯片族），尝试为它的汇编语言子集写一个汇编程序。
6.2画图语言
利用字段分割操作，很容易就可以对我们自己定义的汇编语言作词法和语法分析，这种简易性对一
些高级语言来说同样成立，我们的下一个例子是graph的语言处理程序，graph是一种用来西数据坐
标图的原型语言，输入是一张图的规范说明，规范说明的每一行都表示一个数据点，或坐标轴的标签信
息.数据点有两种表示形式：一对x-y，或者只有一个y，此时默认x是从1开始的逼增序列，即1，2，3，
等等，两种形式中，数据值的后面都可以跟随一个可选的非数字字符，作为数据点的绘图字符（默认是星
号*).标签信息由一个关键词和多个参数值组成：
label caption
range xmin ymin xmax ymax
left ticks t1 f2 .
bottom ticks tt2 
height number
width number
这些行的出现顺序是任意的，任意一行都可以省略，也不需要指定数据的值的范围
处理程序按比例调整数据点的大小，并生成绘图命令，为了使讨论更加具体，我们把它们打印到
24×80的字符数组中，但是，如果是为某些图像设备生成绘图命令，实现起来其实也很容易，例如，输入
数据：
136
label Annual Traffic Deaths, USA, 1925-1984
range 1920 5000 1990 60000
left ticks 10000 30000 50000
1925 21800
1930 31050
1935 36369
---
## Page 140
第六章小型语言
132
1981 51500
1982 46000
1983 44600
1984 46200
的输出是：
50000
30000
10000
1930
1940
1950
1960
1970
1980
Annual Traffic Deaths, USA, 1925-1984
graph的处理程序分为两个阶段，主循环读取并解析图的规范说明，使用模式辨认不同类型的语句.
图的中间表示形式存放在若干个数组与变量中，如果必要的话，END据此计算值的范围，然后开始绘制边
柜，刻度，标签和数据点.输出操作被分散在若干个函数中，这样的话，即使以后要为特定的设备对代码
进行修改，也可以把修改局限在小范围内，
到目前为止，这是我们看过的最长的awk程序，大约有100行，其实它是本书第二长的程序，不过
不要担心，程序把一个大任务分成若干个小步骤来完成，所以每个部分都很简短，
137
# graph - processor for a graph-drawing language
input:data and specification of a graph
output: data plotted in specified area
BEGIN{
 set frame dimensions.
ht = 24; wid = 80
#height and width
deaths_in_u.s._by_yesr —者t
---
## Page 141
第六章小型语言
133
ox=6;oy=2
offset for x and y axes
number = "~[-+]?([09]+[- ]?[09]*|[- ][09]+)" \
"([eE][-+ ]?[09]+) ?$"
$1 == "1abel"{
for bottom
（/aqe/）qns
botlab = $0
next
"bottom"&& $2 ==
"ticks"{
# ticks for x-axis
for （i = 3; i  xmax) xmax = x[i]
if (y[i]  ymax) ymax = y[i]
frame(); ticks(); label(); data(); draw()