to the attack vectors discussed so far. In the remainder of
this section we discuss such defenses, as implemented in
a prototype system for automated defense against wild-
ﬁre worms and spooﬁng attacks based on the Linksys
OpenWRT [5] router and optionally using an external
controller and centralized threat analysis.
332
16th USENIX Security Symposium
USENIX Association
1
0.9
0.8
0.7
0.6
e
g
n
a
R
n
h
i
t
i
W
s
P
A
f
o
n
o
i
t
c
a
r
F
0.5
0.4
0.3
0.2
0.1
0
0
0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09
0.1
Fraction of Subverted hosts
Bay
Chicago
Dallas
Los Angeles
Las Vegas
New York
Philadelphia
Seattle
San Francsico
Singapore 
s
e
l
i
f
o
r
p
g
n
d
i
i
l
l
o
c
f
o
n
o
i
t
c
a
r
F
0.4
0.2
0.08
0.04
0.02
0.008
0.004
0.002
min set=0
min set=1
min set=2
min set=6
min set=8
0
10
20
30
40
50
60
70
80
Number of RSS profiles in set (x 10K)
Figure 6: AP coverage of a given fraction of random bots
in a metro area assuming a range of 60 m.
Figure 7: RSS set uniqueness.
5.1 Wireless IPS
In our implementation, we have adapted the snort
IPS [46] to run on OpenWRT. While previous implemen-
tations have used snort to ﬁlter trafﬁc between the wire-
less network and the external ethernet connection, our
implementation disables the normal low-level wireless-
to-wireless forwarding and uses ebtables and IPtables
to redirect trafﬁc through userland where it can be pro-
cessed by snort.
As APs typically have limited computing resources,
it may not be possible to have a fully ﬂedged IPS run-
ning on them. Increasing their capabilities may also be
prohibitively expensive. There are at least two possible
options to address this problem. The ﬁrst option is to use
only a subset of the signatures, most likely signatures
for attacks against vulnerabilities that may not be uni-
versally patched yet. The second option is to implement
the IPS functionality in a centralized wireless controller,
and have the APs forward all local trafﬁc for inspection
before retransmitting to the wireless medium.
The main advantage of using a wireless controller is
that it provides ﬂexibility for devoting more resources
to trafﬁc inspection. It is also consistent with industry
trends towards cheap, “dumb” access points managed
by a wireless switch. However, none of the wireless
switches we are aware of provide any ﬁltering capabil-
ities for internal WLAN trafﬁc such as wildﬁre worms.
In our case, the additional wireless-to-wireless IPS func-
tionality is implemented as a standalone wireless con-
troller. This functionality can be retroﬁtted into wireless
controllers or implemented as part of a secondary con-
troller – protocols for AP to controller communication
are being standardized, and thus interoperability is likely
to be achievable.
For zero-day attacks for which there are no signatures,
we rely on honeypot feeds from access points back to an
analysis center. There, we use the Argos system [45],
which uses dynamic taint analysis to trap the execution
of remotely-injected code, for detection coupled with our
custom signature generation system. Our system col-
lects packet trace samples corresponding to the exploita-
tion attempts detected by Argos and then uses a heuris-
tic for generating network-level attack signatures in the
form of simple patterns. The heuristic tries to identify
a substring that is sufﬁciently large, sufﬁciently frequent
in the attack samples and sufﬁciently infrequent in be-
nign trafﬁc. This last part is important for addressing
concerns about false positives as well as attempts to ma-
nipulate signature generation for denial-of-service pur-
poses. Our implementation uses a novel inverse indexing
scheme on previously collected packet traces. While in
our test setup these traces are maintained centrally at the
threat center, it is conceivable that such testing can be
performed at each site independently. These signatures
are then installed on the AP or the wireless controller as
snort sensor rules.
Filtering of internal WLAN trafﬁc assumes that the
worm does not tamper with the wireless device driver
and ﬁrmware.
If such tampering is possible, the at-
tacker may spoof access point transmissions directly –
for which tools are publicly available [9], and bypass
ﬁltering mechanisms applied to trafﬁc relayed over the
AP. The AP can detect attempts to impersonate it as long
as it can pick up the messages sent by the attacker, but
this leads immediately to another attack scenario: the at-
tacker can hide his emissions from the AP by tuning the
wiﬁ radio power or using directional antennas so that the
spoofed packets can reach the victim, but cannot reach
the AP (or external detection device). We refer to this
as the whisper attack. The attack seems difﬁcult to en-
gineer, as it requires both the low-level driver/ﬁrmware
USENIX Association
16th USENIX Security Symposium
333
hacks of the basic 802.11 spooﬁng attack, as well as care-
ful tuning of the radio. Unfortunately, newer chipsets
provide improvements in power control, and it is likely
that the attacker can easily ﬁnd the “right” power setting
to launch the attack by probing both the victim and the
AP with different power settings, all controlled through
the driver API. In some cases, the relative positions of
AP, victim, and attacker may prevent this attack. In ad-
dition, not using an AP to relay frames limits the com-
munication range. Using power control to evade the AP
may limit the range even further, to the point where it
may become impractical to perform whisper attacks in
the context of the massive attacks we discussed.
5.2 Spooﬁng defense strategy and attack-defense
co-evolution
Assuming WPA and VPN solutions comes with a con-
siderable usability cost; we investigate lightweight alter-
natives. Interestingly, our exploration of defenses against
spooﬁng attacks has revealed a small arms race. In par-
ticular, while developing defense techniques we discov-
ered several new variations of the attack, each defeat-
ing one of our countermeasures. In this section, we dis-
cuss the attacks, the countermeasures and present results
evaluating their effectiveness. These ﬁndings are sum-
marized in Figure 5. We focus on DNS spooﬁng for sim-
plicity, but in most cases the attacks and countermeasures
are similar for other protocols.
5.2.1 Wireless ingress ﬁltering defense
As discussed previously,
the simplest form of DNS
spooﬁng involves the attacker lurking for DNS requests
to the target site, and then injecting a fake DNS response
pointing to a site under the attacker’s control. It seems
straightforward to defend against this attack through the
use of ingress ﬁltering at the AP. Ingress ﬁltering ensures
that all trafﬁc broadcast by the AP on the wireless net-
work is checked in terms of IP address and the inter-
face on which it is received. That is, trafﬁc originating
from the wireless network should have IP addresses on
the local wireless network. (Similarly, but less relevant
here, trafﬁc from the external network should not have
an IP address on the internal network.) A DNS request is
usually sent to a resolver outside the wireless LAN, and
therefore the DNS response is expected from an external
address. A spoofed response is trivial to detect, as it ar-
rives on the AP from the wireless interface and has an
external IP address.
5.2.2 External collaborator attack
A variation of the spooﬁng attack that circumvents
ingress ﬁltering involves the use of an external collab-
orator. In this variation of the attack, the attacker is again
eavesdropping on the wireless LAN lurking for DNS re-
quests, but instead of sending the spoofed response from
the wireless LAN, signals another host on the Internet
to send a spoofed response to the victim. Being able to
eavesdrop is crucial, as it allows the attacker to relay the
needed DNS identiﬁer and port number information to
the remote collaborator.
There are two constraints for the attacker that make
this attack more difﬁcult. First, the remote collabora-
tor needs to be able to send packets with the source IP
spoofed. Unfortunately, a recent study [18] shows that
spooﬁng is still possible on more than 30% of hosts due
to the limited use of source ﬁltering. Second, the remote
collaborator needs to send the spoofed DNS response be-
fore the legitimate DNS response arrives. Thus, the at-
tacker would need to locate a collaborator that is closer
by in terms of round-trip times.
5.2.3 Packet rewriting defense
One way to defend against this attack is to rewrite pack-
ets as they ﬂow through the AP to the outside world,
mapping the DNS id and port number, TCP sequence
numbers, etc., to a different space, then doing the cor-
responding inverse mapping on packets on the way back.
The eavesdropper only knows the internal representa-
tion of those identiﬁers and cannot relay the necessary
information to the external collaborator. Any spoofed
response from the external collaborator will be trans-
formed to have an identiﬁer that will result in the re-
sponse getting dropped by the victim, making the attack
ineffective.
The mapping can be done using either a hash func-
tion, or a state table, and is robust as long as the map-
ping is unpredictable. In the case of hashing, we need to
use a keyed hash, with the key being the destination IP
address, to prevent the attacker from using a third-party
DNS server to map out the key space. The choice be-
tween state table and hash function is not always clear, as
it involves space-time tradeoffs. If the hardware provides
cheap hashing, then it may be preferred. In our Linksys
OpenWRT implementation the use of a state table was
more efﬁcient as hashing introduced a high per-packet
cost that turned the technique into a bottleneck.
5.2.4 802.11-level spooﬁng attack
As discussed in the context of wiﬁ IPS, a sophisticated
attacker can circumvent the ingress ﬁltering defense by
violating the 802.11 protocol to transmit frames directly
to the victim. The AP can detect this by monitoring
for transmissions that it did not send. However, it can-
not detect the whisper attack discussed earlier, where the
attacker tunes the wiﬁ radio power so that the spoofed
packets can reach the victim, but cannot reach the AP (or
external detection device).
When ﬁltering fails, the next best option is to detect
and forcibly abort the attack. We pursue this direction in
334
16th USENIX Security Symposium
USENIX Association
the next section.
5.2.5 Whisper attack detection
We have developed a set of defenses based on the detec-
tion of abnormal combinations of network events. For
example, to detect the injection of a DNS reply, we use
bookkeeping of request-reply pairs to ﬂag excess, incon-
sistent replies. We also raise an alert when a host ap-
pears to retransmit requests after having received replies,
so we can prevent a situation where the attacker keeps
inserting a fake request, just before the legitimate reply
for the previous request arrives, in order to maintain the
request-response balance.
While there are no visible duplicate replies in case of
a whisper attack, the AP may still detect the attack indi-
rectly. A solution for HTTP is to extract from each HTTP
connection the server hostname from the corresponding
mandatory HTTP header and the server address from the
IP header, and compare this pair against the hostname
and IP pairs extracted from observed DNS replies. If a
reply has been whispered, no DNS reply will match the
HTTP header and the attack will be detected.
We have evaluated our technique for detecting whis-
per attacks against 41,426 DNS and 339,317 HTTP re-
quests generated by 65 IP addresses over a period of a
week. We obtained 18 alerts (6 unique web sites), all
of them false, corresponding to a false positive rate of
0.53 × 10−4 of all HTTP requests. For the same trace
we observed zero excess DNS replies. We further eval-
uated only our ﬁrst technique for detecting excess DNS
replies against 43,272,448 DNS requests obtained over
a period of more than 1 month by instrumenting an en-
terprise network with about 400 users. We obtained 22
alerts, all of them false, corresponding to a false posi-
tive rate of 0.5 × 10−7. Looking deeper into the alerts
revealed a Content Delivery Network that is employing
spooﬁng, probably for server selection.
Once an attack is detected, it has to be blocked. How-
ever, given two inconsistent DNS responses, the detector
cannot directly distinguish which one is legitimate and
which one is spoofed. Doing a secondary lookup is one
option, but the wide use of load balancing, particularly
for popular services, implies that the secondary lookup
may not always agree with one of the two inconsistent re-
sponses. A more relaxed check against the network pre-
ﬁx is also unlikely to help in the general case, as server
replicas may not be co-located. In lack of any other sat-
isfactory solution, our current implementation blocks the
victim and redirects him to a warning page, notifying him
of a potential spooﬁng attack, and giving him the option
to proceed (and re-issue the request) through temporary
HTTP redirection.
6 Related work
With the growing popularity of mobile devices, mal-
ware targeting wireless environment have started to
emerge [27, 29]. This new security challenge has re-
cently gained some attention from the research commu-
nity.
A study related to ours is the one by Tsow et al [55].
The authors suggest that attackers could drive around a
city taking over vulnerable wireless home routers. Sim-
ilar to our study, the threat is ampliﬁed by dense wiﬁ
deployment, as attackers can take over hosts at a higher
rate. However, the attack depends on vulnerable access
points, and requires the physical presence of the attacker
for driving around to ﬁnd vulnerable routers. The attacks
we discuss in this paper can all be launched remotely,
and therefore easier and less risky for the attacker.
Anderson et al. [14] analyzed the speed of worm con-
tagion over campus-wide wireless networks. They de-
veloped a worm simulation using real data from Craw-
dad, e.g. user distribution, AP distribution and user mo-
bility, to realistically study the dynamics of a mobile
worm. However their results are constrained to dynam-
ics of mobile worm at relatively small scale of a univer-
sity campus with mobility as the major factor for worm
spread. In contrast, our work has investigated big cities
and metropolitan areas at much larger scale with wardriv-
ing data around. We have identiﬁed a much larger threat
e.g. infection completion in the order of minutes whereas
Anderson at al. [14] predict a few hours to infect just
the campus. The main difference is that wildﬁre-like
propagation—not just user mobility, is the key attack
vector in our work. It is also unclear whether their de-
fense proposals could be proven effective given recent
major changes of wiﬁ usage pattern.
Beyah et al. [19] discuss a worm that spreads by in-
fecting users sharing the same hotspot. They use epi-
demic models to simulate its spread and ﬁnd it can in-
fect a million users worldwide over the course of a year.
Again the main difference is that the simulated worm re-
lies on user mobility, but we show using wardriving data
that mere density is sufﬁcient in metropolitan areas lead-
ing to much faster spread.
Su et al. [52] investigate worm infections in a blue-
tooth environment. They expect Bluetooth to outnumber