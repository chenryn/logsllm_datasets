### Defenses Against Attack Vectors

In the remainder of this section, we will discuss the implemented defenses in a prototype system designed for automated defense against wildfire worms and spoofing attacks. This system is based on the Linksys OpenWRT [5] router and can optionally use an external controller and centralized threat analysis.

#### 5.1 Wireless Intrusion Prevention System (IPS)

In our implementation, we have adapted the Snort IPS [46] to run on OpenWRT. While previous implementations used Snort to filter traffic between the wireless network and the external Ethernet connection, our approach disables the normal low-level wireless-to-wireless forwarding. Instead, we use `ebtables` and `iptables` to redirect traffic through userland, where it can be processed by Snort.

**Challenges and Solutions:**
- **Limited Computing Resources:** Access Points (APs) typically have limited computing resources, making it impractical to run a fully-fledged IPS on them. Two possible solutions are:
  - **Subset of Signatures:** Use only a subset of signatures, focusing on vulnerabilities that may not be universally patched yet.
  - **Centralized Controller:** Implement IPS functionality in a centralized wireless controller, with APs forwarding all local traffic for inspection before retransmitting to the wireless medium.

**Advantages of Centralized Controllers:**
- **Resource Flexibility:** Centralized controllers allow for more resources to be devoted to traffic inspection.
- **Industry Trends:** Consistent with industry trends towards cheap, "dumb" access points managed by a wireless switch.
- **Current Limitations:** None of the wireless switches we are aware of provide filtering capabilities for internal WLAN traffic such as wildfire worms.

**Implementation Details:**
- **Zero-Day Attacks:** For attacks without known signatures, we rely on honeypot feeds from access points back to an analysis center. We use the Argos system [45], which employs dynamic taint analysis to detect remotely-injected code execution.
- **Signature Generation:** Our system collects packet trace samples corresponding to exploitation attempts detected by Argos and uses a heuristic to generate network-level attack signatures. The heuristic identifies substrings that are sufficiently large, frequent in attack samples, and infrequent in benign traffic. This helps address concerns about false positives and attempts to manipulate signature generation for denial-of-service purposes.
- **Deployment:** These signatures are installed on the AP or the wireless controller as Snort sensor rules.

**Assumptions and Limitations:**
- **Device Integrity:** Filtering internal WLAN traffic assumes the worm does not tamper with the wireless device driver and firmware. If tampering is possible, the attacker can spoof access point transmissions directly, bypassing filtering mechanisms.
- **Whisper Attack:** An attacker can hide their emissions from the AP by tuning the Wi-Fi radio power or using directional antennas, making it difficult for the AP to detect the attack. This attack is challenging to engineer but may become feasible with newer chipsets providing better power control.

#### 5.2 Spoofing Defense Strategy and Attack-Defense Co-evolution

**Lightweight Alternatives:**
- **Usability Cost:** Assuming WPA and VPN solutions comes with a considerable usability cost. We explore lightweight alternatives.
- **Arms Race:** Our exploration of defenses against spoofing attacks has revealed a small arms race, with new attack variations defeating each countermeasure. We discuss these attacks, countermeasures, and their effectiveness, summarized in Figure 5.

**5.2.1 Wireless Ingress Filtering Defense:**
- **Simplest Form of DNS Spoofing:** The attacker lurks for DNS requests to the target site and injects a fake DNS response. Ingress filtering at the AP ensures that all traffic broadcast on the wireless network is checked for IP addresses and interfaces, making it easy to detect spoofed responses.

**5.2.2 External Collaborator Attack:**
- **Circumventing Ingress Filtering:** The attacker eavesdrops on the wireless LAN, relaying DNS identifier and port number information to a remote collaborator who sends the spoofed response.
- **Constraints:**
  - **Source IP Spoofing:** A recent study [18] shows that spoofing is still possible on more than 30% of hosts due to limited source filtering.
  - **Round-Trip Times:** The remote collaborator must send the spoofed DNS response before the legitimate response arrives, requiring a closer collaborator in terms of round-trip times.

**5.2.3 Packet Rewriting Defense:**
- **Defending Against Collaborator Attacks:** Rewrite packets as they flow through the AP, mapping DNS identifiers and port numbers to a different space, and performing the inverse mapping on returning packets. This prevents the eavesdropper from relaying necessary information to the external collaborator.
- **Mapping Methods:** Use either a hash function or a state table. A keyed hash with the destination IP address as the key prevents the attacker from using a third-party DNS server to map out the key space. In our Linksys OpenWRT implementation, a state table was more efficient due to high per-packet costs with hashing.

**5.2.4 802.11-Level Spoofing Attack:**
- **Protocol Violation:** A sophisticated attacker can circumvent ingress filtering by violating the 802.11 protocol to transmit frames directly to the victim. The AP can detect this by monitoring for transmissions it did not send but cannot detect the whisper attack.

**5.2.5 Whisper Attack Detection:**
- **Detection Techniques:** We use detection of abnormal combinations of network events, such as bookkeeping of request-reply pairs to flag excess, inconsistent replies. Alerts are raised when a host retransmits requests after receiving replies.
- **HTTP Solution:** Extract the server hostname from HTTP headers and compare it with observed DNS replies. If a reply has been whispered, no DNS reply will match the HTTP header, and the attack will be detected.
- **Evaluation:** Our technique was evaluated against 41,426 DNS and 339,317 HTTP requests, resulting in a false positive rate of 0.53 × 10−4. Further evaluation against 43,272,448 DNS requests over a month resulted in a false positive rate of 0.5 × 10−7.
- **Blocking Mechanism:** Upon detecting an attack, the victim is blocked and redirected to a warning page, notifying them of a potential spoofing attack and giving them the option to proceed through temporary HTTP redirection.

### 6 Related Work

**Emerging Malware:**
- **Mobile Devices:** With the growing popularity of mobile devices, malware targeting wireless environments has started to emerge [27, 29]. This security challenge has gained attention from the research community.

**Studies and Comparisons:**
- **Tsow et al. [55]:** Suggested attackers could drive around a city taking over vulnerable wireless home routers. Similar to our study, dense Wi-Fi deployment amplifies the threat. However, their attack requires physical presence, whereas our attacks can be launched remotely.
- **Anderson et al. [14]:** Analyzed the speed of worm contagion over campus-wide wireless networks, using real data from Crawdad. Their results are constrained to a university campus scale, while our work investigates larger metropolitan areas, identifying a much larger threat with faster infection rates.
- **Beyah et al. [19]:** Discussed a worm spreading by infecting users sharing the same hotspot, using epidemic models. They predict a million users infected worldwide over a year, relying on user mobility. Our work shows that density alone in metropolitan areas leads to much faster spread.
- **Su et al. [52]:** Investigated worm infections in a Bluetooth environment, expecting Bluetooth to outnumber other wireless technologies.