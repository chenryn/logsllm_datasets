we thought that it might have been a complete API Update since
the changes were so drastic. However, after subsequent visits, we
observe that the changes converge into a ﬁnite set of script versions.
As an example, such case happens in a script hosted at the following
URL http://v6.top.rbk.ru/rbc_static/version-1.2.1/
scripts/build/~_layout-main-live-tv.js. In total, we ob-
serve 68 scripts that indicate similar characteristics.
6. RELATED WORK
Structural Integrity on the Web. Several solutions have pro-
posed different notion of structural integrity on the web. In Doc-
ument Structure Integrity (DSI) [39] and Blueprint’s [34] notion
of structural integrity, there is a distinction between nodes in the
DOM’s abstract syntax tree which are trusted and those which are
not trusted. As a result, both the solutions try to impose certain
policy to conﬁne the untrusted nodes in order to prevent code injec-
tion, either by rendering such nodes using special DOM construc-
tion techniques (implemented in Blueprint) or using taint-tracking
(in DSI). In contrast to that notion, we guarantee that every node in
the script’s AST is trusted and therefore technique to conﬁne such
untrusted nodes in the AST is no longer needed.
JavaScript Whitelisting. Whitelisting is a promising direction for
preventing malicious script injection into a website. Jim et.al. in-
troduce the idea of whitelisting script by embedding a policy in its
pages that speciﬁes which scripts are allowed to run in their sys-
tem called BEEP [29]. Braun et.al., proposes a validation scheme
to extend several HTML elements with an integrity attribute that
contains a cryptographic hash of the representation of the resource
the author expects to load. This scheme is named Subresource
Integrity (SRI) in their latest W3C recommendation [53]. These
works mainly use raw signature scheme, which validates the in-
tegrity of a resource based on the cryptographic hash computation
on the resource’s source code. In SICILIAN, we introduce a new
signature scheme that is robust against scripts’ changes, which are
pervasive in real world websites. On the other hand, web primi-
tive such as Content Security Proposal [52] performs domain white-
listing, which speciﬁes the origin of resources but does not give any
particular restriction on the integrity of the resources. The policy
effort for CSP seems to be higher than SICILIAN [16].
Script Injection Prevention. A different approach for prevent-
ing script injection has been proposed by a variety of XSS de-
fenses. The main line of research has focused on sanitizing un-
trusted input [5, 25, 44, 56]. However, performing only sanitization
does not fully protect web applications from script injection attacks
due to other client-side attack variants such as DOM-based XSS
or second-order vulnerabilities [11]. Other XSS defenses include
privilege separation [4,8,10,15,39], DOM isolation [3,13,21], and
taint tracking [22, 31, 43, 49, 50]. Most of the above solutions as-
sume the content integrity of site’s scripts. However, this may not
always the case in the presence of attacks on third-party library or
CDNs [32]. SICILIAN is not designed solely for preventing XSS
attacks. Rather we build our solution as a channel-agnostic mech-
anism which checks any injected scripts wherever it came from.
1555JavaScript Measurement Study. To the best of our knowledge,
there has been no study on how scripts change in popular websites
that is of comparable breadth and depth to our work. We are aware
of the archive.org project [26] which records content changes in
the internet over period of years, including JavaScript. However,
it does not completely record all the web contents in Alexa’s top
websites nor are we aware of any study in JavaScript changes that
makes use of such data. Nikiforakis et.al. study the evolution of
JavaScript inclusions over time and identify the trust relationships
of these sites with their library providers [40]. This study shows
types of vulnerabilities that are related to unsafe third-party inclu-
sion practices although there is no particular study on the changes
reﬂected as well as any defenses proposed in the paper to prevent
those.
7. CONCLUSION
In this paper, we conduct a longitudinal study on changes in
scripts to evaluate the efﬁcacy of signature-based JavaScript white-
listing for preventing script injection attacks. We then propose a
system called SICILIAN, which 1) employs a multi-layered white-
listing approach using a novel signature scheme, structural signa-
ture, that is robust against mostly static scripts; and 2) comes with
an incremental deployment model called progressive lockdown to
ensure its practicality in real-world settings. Our large-scale eval-
uation shows that SICILIAN can whitelist scripts with reasonable
performance.
8. ACKNOWLEDGMENTS
We thank the anonymous reviewers of this paper for their helpful
feedback, and our shepherd Deepak Garg for his insightful com-
ments and suggestions for preparing the ﬁnal version of the paper.
We thank Zhenkai Liang, Xinshu Dong, and Yaoqi Jia for their con-
structive feedback on the paper. This research is supported in part
by the National Research Foundation, Prime Minister’s Ofﬁce, Sin-
gapore under its National Cybersecurity R&D Program (Award No.
NRF2014NCR-NCR001-21) and administered by the National Cy-
bersecurity R&D Directorate. This work is also supported in part
by a university research grant from Intel.
9. REFERENCES
[1] E. Abgrall, Y. L. Traon, M. Monperrus, S. Gombault,
M. Heiderich, and A. Ribault. Xss-fp: Browser ﬁngerprinting
using html parser quirks. arXiv preprint arXiv:1211.4812,
2012.
[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song.
Towards a formal foundation of web security. In Computer
Security Foundations Symposium (CSF), 2010 23rd IEEE,
pages 290–304. IEEE, 2010.
[3] D. Akhawe, F. Li, W. He, P. Saxena, and D. Song.
Data-conﬁned html5 applications. In Computer
Security–ESORICS 2013, pages 736–754. Springer, 2013.
[4] D. Akhawe, P. Saxena, and D. Song. Privilege separation in
html5 applications. In Proceedings of the 21st USENIX
conference on Security symposium, pages 23–23. USENIX
Association, 2012.
[5] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic,
E. Kirda, C. Kruegel, and G. Vigna. Saner: Composing static
and dynamic analysis to validate sanitization in web
applications. In Security and Privacy, 2008. SP 2008. IEEE
Symposium on, pages 387–401. IEEE, 2008.
[6] D. Bates, A. Barth, and C. Jackson. Regular expressions
considered harmful in client-side xss ﬁlters. In Proceedings
of the 19th international conference on World wide web,
pages 91–100. ACM, 2010.
[7] F. Braun, D. Akhawe, J. Weinberger, and M. West.
Subresource integrity. https:
//rawgithub.com/w3c/webappsec/master/
specs/subresourceintegrity/index.html.
[8] E. Budianto, Y. Jia, X. Dong, P. Saxena, and Z. Liang. You
can’t be me: Enabling trusted paths and user sub-origins in
web browsers. In Research in Attacks, Intrusions and
Defenses, pages 150–171. Springer, 2014.
[9] Y. Cao, Z. Li, V. Rastogi, Y. Chen, and X. Wen. Virtual
browser: a virtualized browser to sandbox third-party
javascripts with enhanced security. In Proceedings of the 7th
ACM Symposium on Information, Computer and
Communications Security, pages 8–9. ACM, 2012.
[10] Y. Cao, V. Yegneswaran, P. Porras, and Y. Chen. Pathcutter:
Severing the self-propagation path of xss javascript worms in
social web networks. In Proceedings of the 19th NDSS
Symposium, 2012.
[11] J. Dahse and T. Holz. Static detection of second-order
vulnerabilities in web applications. In USENIX Security
Symposium, 2014.
[12] J. L. Donaldson, A.-M. Lancaster, and P. H. Sposato. A
plagiarism detection system. In ACM SIGCSE Bulletin,
volume 13.
[13] X. Dong, Z. Chen, H. Siadati, S. Tople, P. Saxena, and
Z. Liang. Protecting sensitive web content from client-side
vulnerabilities with cryptons. In Proceedings of the 2013
ACM SIGSAC conference on Computer & communications
security, pages 1311–1324. ACM, 2013.
[14] X. Dong, K. Patil, J. Mao, and Z. Liang. A comprehensive
client-side behavior model for diagnosing attacks in ajax
applications. In Engineering of Complex Computer Systems
(ICECCS), 2013 18th International Conference on, pages
177–187. IEEE, 2013.
[15] A. Doupé, W. Cui, M. H. Jakubowski, M. Peinado,
C. Kruegel, and G. Vigna. dedacota: toward preventing
server-side xss via automatic code and data separation. In
Proceedings of the 2013 ACM SIGSAC conference on
Computer & communications security, pages 1205–1216.
ACM, 2013.
[16] M. Fazzini, P. Saxena, and A. Orso. Autocsp: Automatically
retroﬁtting csp to web applications. In the Proceedings of the
37th International Conference on Software Engineering
(ICSE), 2015.
[17] C. Fournet and A. D. Gordon. Stack inspection: Theory and
variants. In ACM SIGPLAN Notices, volume 37, pages
307–318. ACM, 2002.
[18] Google. Content security policy (csp).
https://goo.gl/Y7u2ee.
[19] A. Guha, S. Krishnamurthi, and T. Jim. Using static analysis
for ajax intrusion detection. In Proceedings of the 18th
international conference on World wide web, pages 561–570.
ACM, 2009.
[20] M. V. Gundy and H. Chen. Noncespaces: Using
randomization to enforce information ﬂow tracking and
thwart cross-site scripting attacks. In Proceedings of the 16th
Network and Distributed System Security Symposium
Symposium, 2009.
[21] W. He, D. Akhawe, S. Jain, E. Shi, and D. Song.
Shadowcrypt: Encrypted web applications for everyone. In
Proceedings of the 2014 ACM SIGSAC Conference on
1556Computer and Communications Security, pages 1028–1039.
ACM, 2014.
[41] OWASP. Xss ﬁlter evasion cheat sheet.
https://goo.gl/Iq60U0.
[22] D. Hedin, A. Birgisson, L. Bello, and A. Sabelfeld. Jsﬂow:
Tracking information ﬂow in javascript and its apis. In
Proceedings of the 29th Annual ACM Symposium on Applied
Computing, pages 1663–1671. ACM, 2014.
[23] M. Heiderich, J. Schwenk, T. Frosch, J. Magazinius, and
E. Z. Yang. mxss attacks: Attacking well-secured
web-applications by using innerhtml mutations. In
Proceedings of the 2013 ACM SIGSAC conference on
Computer & communications security, pages 777–788.
ACM, 2013.
[24] A. Hidayat. http://esprima.org.
[25] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and
M. Veanes. Fast and precise sanitizer analysis with bek. In
Proceedings of the 20th USENIX conference on Security.
USENIX Association, 2011.
[26] Internet Archive.
https://archive.org/index.php.
[27] C. Jackson and A. Barth. Forcehttps: protecting
high-security web sites from network attacks. In Proceedings
of the 17th international conference on World Wide Web,
pages 525–534. ACM, 2008.
[28] Jeremiah Grossman and Matt Johansen.
https://goo.gl/kwgWPm.
[29] T. Jim, N. Swamy, and M. Hicks. Defeating script injection
attacks with browser-enforced embedded policies. In
Proceedings of the 16th international conference on World
Wide Web, pages 601–610. ACM, 2007.
[30] jQuery. Update on jquery.com compromises.
http://goo.gl/uFcPKM/.
[31] S. Lekies, B. Stock, and M. Johns. 25 million ﬂows later:
large-scale detection of dom-based xss. In Proceedings of the
2013 ACM SIGSAC conference on Computer &
communications security, pages 1193–1204. ACM, 2013.
[32] A. Levy, H. Corrigan-Gibbs, and D. Boneh. Stickler:
Defending against malicious cdns in an unmodiﬁed browser.
2015.
[33] R. Lipton. Fingerprinting sets.
http://goo.gl/tx7pWq.
[34] M. T. Louw and V. Venkatakrishnan. Blueprint: Robust
prevention of cross-site scripting attacks for existing
browsers. In Security and Privacy, 2009 30th IEEE
Symposium on, pages 331–346. IEEE, 2009.
[35] R. C. Merkle. A certiﬁed digital signature. In CRYPTO,
1989.
[36] Mozilla. https://developer.mozilla.org/
en-US/docs/Web/XPath.
[37] Mozilla. Http strict transport security.
https://developer.mozilla.org/en-
US/docs/Web/Security/HTTP_strict_transport_security/.
[38] Mozilla. Signing a xpi. https://goo.gl/Fﬂs5r.
[39] Y. Nadji, P. Saxena, and D. Song. Document structure
integrity: A robust basis for cross-site scripting defense. In
Proceedings of the 16th Network and Distributed System
Security Symposium, 2009.
[40] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker,
W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. You are
what you include: large-scale evaluation of remote javascript
inclusions. In Proceedings of the 2012 ACM conference on
Computer and communications security. ACM, 2012.
[42] P. Rogaway and T. Shrimpton. Cryptographic hash-function
basics: Deﬁnitions, implications, and separations for
preimage resistance, second-preimage resistance, and
collision resistance. In Fast Software Encryption, pages
371–388. Springer, 2004.
[43] P. Saxena, S. Hanna, P. Poosankam, and D. Song. Flax:
Systematic discovery of client-side validation vulnerabilities
in rich web applications. In Proceedings of the 17th Network
and Distributed System Security Symposium, 2010.
[44] P. Saxena, D. Molnar, and B. Livshits. Scriptgard: automatic
context-sensitive sanitization for large-scale legacy web
applications. In Proceedings of the 18th ACM Conference on
Computer and Communications Security, 2011.
[45] Security Affairs. Afghanistan cdn network compromised by
chinese hackers. http://goo.gl/Kh8zqN.
[46] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee. On the
incoherencies in web browser access control policies. In
Security and Privacy (SP), 2010 IEEE Symposium on, pages
463–478. IEEE, 2010.
[47] Softpedia. Exploit kit dropped through akamai content
delivery network. http://goo.gl/1UgGgT.
[48] S. Son and V. Shmatikov. The postman always rings twice:
Attacking and defending postmessage in html5 websites. In
Proceedings of the 20th Network and Distributed System
Security Symposium, 2013.
[49] B. Stock, S. Lekies, T. Mueller, P. Spiegel, and M. Johns.
Precise client-side protection against dom-based cross-site
scripting. In Proceedings of the 23rd USENIX security
symposium.
[50] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel,
and G. Vigna. Cross site scripting prevention with dynamic
data tainting and static analysis. In Proceedings of the 14th
Network and Distributed System Security Symposium, 2007.
[51] W3C. All standards and drafts. http://www.w3.org/TR/.
[52] W3C. Content security policy 2.0.
http://www.w3.org/TR/CSP2/.
[53] W3C. Subresource integrity.
http://www.w3.org/TR/SRI/.
[54] D. Wagner and P. Soto. Mimicry attacks on host-based
intrusion detection systems. In Proceedings of the 9th ACM
Conference on Computer and Communications Security,
pages 255–264. ACM, 2002.
[55] J. Wang, Y. Takata, and H. Seki. Hbac: A model for
history-based access control and its model checking. In
Computer Security–ESORICS 2006, pages 263–278.
Springer, 2006.
[56] J. Weinberger, P. Saxena, D. Akhawe, M. Finifter, R. Shin,
and D. Song. A systematic analysis of xss sanitization in web
application frameworks. In ESORICS, 2011.
[57] M. Weissbacher, T. Lauinger, and W. Robertson. Why is csp
failing? trends and challenges in csp adoption. In
Proceedings of the 17th Research in Attacks, Intrusions and
Defenses, 2014.
[58] D. Wendlandt, D. G. Andersen, and A. Perrig. Perspectives:
Improving ssh-style host authentication with multi-path
probing. In USENIX Annual Technical Conference, pages
321–334, 2008.
[59] Z. Yan and S. Holtmanns. Trust modeling and management:
from social trust to digital trust. IGI Global, 2008.
1557