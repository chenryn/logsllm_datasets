.br sigaction (2)
for details.
.ss fork(2) semantics
after a
.br fork (2),
the child inherits a copy of the signalfd file descriptor.
a
.br read (2)
from the file descriptor in the child will return information
about signals queued to the child.
.ss semantics of file descriptor passing
as with other file descriptors,
signalfd file descriptors can be passed to another process
via a unix domain socket (see
.br unix (7)).
in the receiving process, a
.br read (2)
from the received file descriptor will return information
about signals queued to that process.
.ss execve(2) semantics
just like any other file descriptor,
a signalfd file descriptor remains open across an
.br execve (2),
unless it has been marked for close-on-exec (see
.br fcntl (2)).
any signals that were available for reading before the
.br execve (2)
remain available to the newly loaded program.
(this is analogous to traditional signal semantics,
where a blocked signal that is pending remains pending across an
.br execve (2).)
.ss thread semantics
the semantics of signalfd file descriptors in a multithreaded program
mirror the standard semantics for signals.
in other words,
when a thread reads from a signalfd file descriptor,
it will read the signals that are directed to the thread
itself and the signals that are directed to the process
(i.e., the entire thread group).
(a thread will not be able to read signals that are directed
to other threads in the process.)
.\"
.ss epoll(7) semantics
if a process adds (via
.br epoll_ctl (2))
a signalfd file descriptor to an
.br epoll (7)
instance, then
.br epoll_wait (2)
returns events only for signals sent to that process.
in particular, if the process then uses
.br fork (2)
to create a child process, then the child will be able to
.br read (2)
signals that are sent to it using the signalfd file descriptor, but
.br epoll_wait (2)
will
.b not
indicate that the signalfd file descriptor is ready.
in this scenario, a possible workaround is that after the
.br fork (2),
the child process can close the signalfd file descriptor that it inherited
from the parent process and then create another signalfd file descriptor
and add it to the epoll instance.
alternatively, the parent and the child could delay creating their
(separate) signalfd file descriptors and adding them to the
epoll instance until after the call to
.br fork (2).
.sh return value
on success,
.br signalfd ()
returns a signalfd file descriptor;
this is either a new file descriptor (if
.i fd
was \-1), or
.i fd
if
.i fd
was a valid signalfd file descriptor.
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
the
.i fd
file descriptor is not a valid file descriptor.
.tp
.b einval
.i fd
is not a valid signalfd file descriptor.
.\" or, the
.\" .i sizemask
.\" argument is not equal to
.\" .ir sizeof(sigset_t) ;
.tp
.b einval
.i flags
is invalid;
or, in linux 2.6.26 or earlier,
.i flags
is nonzero.
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached.
.tp
.b enfile
the system-wide limit on the total number of open files has been
reached.
.tp
.b enodev
could not mount (internal) anonymous inode device.
.tp
.b enomem
there was insufficient memory to create a new signalfd file descriptor.
.sh versions
.br signalfd ()
is available on linux since kernel 2.6.22.
working support is provided in glibc since version 2.8.
.\" signalfd() is in glibc 2.7, but reportedly does not build
the
.br signalfd4 ()
system call (see notes) is available on linux since kernel 2.6.27.
.sh conforming to
.br signalfd ()
and
.br signalfd4 ()
are linux-specific.
.sh notes
a process can create multiple signalfd file descriptors.
this makes it possible to accept different signals
on different file descriptors.
(this may be useful if monitoring the file descriptors using
.br select (2),
.br poll (2),
or
.br epoll (7):
the arrival of different signals will make different file descriptors ready.)
if a signal appears in the
.i mask
of more than one of the file descriptors, then occurrences
of that signal can be read (once) from any one of the file descriptors.
.pp
attempts to include
.b sigkill
and
.b sigstop
in
.i mask
are silently ignored.
.pp
the signal mask employed by a signalfd file descriptor can be viewed
via the entry for the corresponding file descriptor in the process's
.ir /proc/[pid]/fdinfo
directory.
see
.br proc (5)
for further details.
.\"
.ss limitations
the signalfd mechanism can't be used to receive signals that
are synchronously generated, such as the
.br sigsegv
signal that results from accessing an invalid memory address
or the
.br sigfpe
signal that results from an arithmetic error.
such signals can be caught only via signal handler.
.pp
as described above,
in normal usage one blocks the signals that will be accepted via
.br signalfd ().
if spawning a child process to execute a helper program
(that does not need the signalfd file descriptor),
then, after the call to
.br fork (2),
you will normally want to unblock those signals before calling
.br execve (2),
so that the helper program can see any signals that it expects to see.
be aware, however,
that this won't be possible in the case of a helper program spawned
behind the scenes by any library function that the program may call.
in such cases, one must fall back to using a traditional signal
handler that writes to a file descriptor monitored by
.br select (2),
.br poll (2),
or
.br epoll (7).
.\"
.ss c library/kernel differences
the underlying linux system call requires an additional argument,
.ir "size_t sizemask" ,
which specifies the size of the
.i mask
argument.
the glibc
.br signalfd ()
wrapper function does not include this argument,
since it provides the required value for the underlying system call.
.pp
there are two underlying linux system calls:
.br signalfd ()
and the more recent
.br signalfd4 ().
the former system call does not implement a
.i flags
argument.
the latter system call implements the
.i flags
values described above.
starting with glibc 2.9, the
.br signalfd ()
wrapper function will use
.br signalfd4 ()
where it is available.
.sh bugs
in kernels before 2.6.25, the
.i ssi_ptr
and
.i ssi_int
fields are not filled in with the data accompanying a signal sent by
.br sigqueue (3).
.\" the fix also was put into 2.6.24.5
.sh examples
the program below accepts the signals
.b sigint
and
.b sigquit
via a signalfd file descriptor.
the program terminates after accepting a
.b sigquit
signal.
the following shell session demonstrates the use of the program:
.pp
.in +4n
.ex
.rb "$" " ./signalfd_demo"
.br "\(hac" "                   # control\-c generates sigint"
got sigint
.b \(hac
got sigint
\fb\(ha\e\fp                    # control\-\e generates sigquit
got sigquit
$
.ee
.in
.ss program source
\&
.ex
#include 
#include 
#include 
#include 
#include 
#define handle_error(msg) \e
    do { perror(msg); exit(exit_failure); } while (0)
int
main(int argc, char *argv[])
{
    sigset_t mask;
    int sfd;
    struct signalfd_siginfo fdsi;
    ssize_t s;
    sigemptyset(&mask);
    sigaddset(&mask, sigint);
    sigaddset(&mask, sigquit);
    /* block signals so that they aren\(aqt handled
       according to their default dispositions. */
    if (sigprocmask(sig_block, &mask, null) == \-1)
        handle_error("sigprocmask");
    sfd = signalfd(\-1, &mask, 0);
    if (sfd == \-1)
        handle_error("signalfd");
    for (;;) {
        s = read(sfd, &fdsi, sizeof(fdsi));
        if (s != sizeof(fdsi))
            handle_error("read");
        if (fdsi.ssi_signo == sigint) {
            printf("got sigint\en");
        } else if (fdsi.ssi_signo == sigquit) {
            printf("got sigquit\en");
            exit(exit_success);
        } else {
            printf("read unexpected signal\en");
        }
    }
}
.ee
.sh see also
.br eventfd (2),
.br poll (2),
.br read (2),
.br select (2),
.br sigaction (2),
.br sigprocmask (2),
.br sigwaitinfo (2),
.br timerfd_create (2),
.br sigsetops (3),
.br sigwait (3),
.br epoll (7),
.br signal (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/byteorder.3
.\" copyright (c) 2016, ibm corporation.
.\" written by mike rapoport 
.\" and copyright (c) 2016 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\"
.th ioctl_userfaultfd 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
ioctl_userfaultfd \- create a file descriptor for handling page faults in user
space
.sh synopsis
.nf
.br "#include " "  /* definition of " uffd* " constants */"
.b #include 
.pp
.bi "int ioctl(int " fd ", int " cmd ", ...);"
.fi
.sh description
various
.br ioctl (2)
operations can be performed on a userfaultfd object (created by a call to
.br userfaultfd (2))
using calls of the form:
.pp
.in +4n
.ex
ioctl(fd, cmd, argp);
.ee
.in
in the above,
.i fd
is a file descriptor referring to a userfaultfd object,
.i cmd
is one of the commands listed below, and
.i argp
is a pointer to a data structure that is specific to
.ir cmd .
.pp
the various
.br ioctl (2)
operations are described below.
the
.br uffdio_api ,
.br uffdio_register ,
and
.br uffdio_unregister
operations are used to
.i configure
userfaultfd behavior.
these operations allow the caller to choose what features will be enabled and
what kinds of events will be delivered to the application.
the remaining operations are
.ir range
operations.
these operations enable the calling application to resolve page-fault
events.
.\"
.ss uffdio_api
(since linux 4.3.)
enable operation of the userfaultfd and perform api handshake.
.pp
the
.i argp
argument is a pointer to a
.ir uffdio_api
structure, defined as:
.pp
.in +4n
.ex
struct uffdio_api {
    __u64 api;        /* requested api version (input) */
    __u64 features;   /* requested features (input/output) */
    __u64 ioctls;     /* available ioctl() operations (output) */
};
.ee
.in
.pp
the
.i api
field denotes the api version requested by the application.
.pp
the kernel verifies that it can support the requested api version,
and sets the
.i features
and
.i ioctls
fields to bit masks representing all the available features and the generic
.br ioctl (2)
operations available.
.pp
for linux kernel versions before 4.11, the
.i features
field must be initialized to zero before the call to
.br uffdio_api ,
and zero (i.e., no feature bits) is placed in the
.i features
field by the kernel upon return from
.br ioctl (2).
.pp
starting from linux 4.11, the
.i features
field can be used to ask whether particular features are supported
and explicitly enable userfaultfd features that are disabled by default.
the kernel always reports all the available features in the
.i features
field.
.pp
to enable userfaultfd features the application should set
a bit corresponding to each feature it wants to enable in the
.i features
field.
if the kernel supports all the requested features it will enable them.
otherwise it will zero out the returned
.i uffdio_api
structure and return
.br einval .
.\" fixme add more details about feature negotiation and enablement
.pp
the following feature bits may be set:
.tp
.br uffd_feature_event_fork " (since linux 4.11)"
when this feature is enabled,
the userfaultfd objects associated with a parent process are duplicated
into the child process during
.br fork (2)
and a
.b uffd_event_fork
event is delivered to the userfaultfd monitor
.tp
.br uffd_feature_event_remap " (since linux 4.11)"
if this feature is enabled,
when the faulting process invokes
.br mremap (2),
the userfaultfd monitor will receive an event of type
.br uffd_event_remap .
.tp
.br uffd_feature_event_remove " (since linux 4.11)"
if this feature is enabled,
when the faulting process calls
.br madvise (2)
with the
.b madv_dontneed
or
.b madv_remove
advice value to free a virtual memory area
the userfaultfd monitor will receive an event of type
.br uffd_event_remove .
.tp
.br uffd_feature_event_unmap " (since linux 4.11)"
if this feature is enabled,
when the faulting process unmaps virtual memory either explicitly with
.br munmap (2),
or implicitly during either
.br mmap (2)
or
.br mremap (2),
the userfaultfd monitor will receive an event of type
.br uffd_event_unmap .
.tp
.br uffd_feature_missing_hugetlbfs " (since linux 4.11)"
if this feature bit is set,
the kernel supports registering userfaultfd ranges on hugetlbfs
virtual memory areas
.tp
.br uffd_feature_missing_shmem " (since linux 4.11)"
if this feature bit is set,
the kernel supports registering userfaultfd ranges on shared memory areas.
this includes all kernel shared memory apis:
system v shared memory,
.br tmpfs (5),
shared mappings of
.ir /dev/zero ,
.br mmap (2)
with the
.b map_shared
flag set,
.br memfd_create (2),
and so on.
.tp
.br uffd_feature_sigbus " (since linux 4.14)"
.\" commit 2d6d6f5a09a96cc1fec7ed992b825e05f64cb50e
if this feature bit is set, no page-fault events
.rb ( uffd_event_pagefault )
will be delivered.
instead, a
.b sigbus
signal will be sent to the faulting process.
applications using this
feature will not require the use of a userfaultfd monitor for processing
memory accesses to the regions registered with userfaultfd.
.tp
.br uffd_feature_thread_id " (since linux 4.14)"
if this feature bit is set,
.i uffd_msg.pagefault.feat.ptid
will be set to the faulted thread id for each page-fault message.
.pp
the returned
.i ioctls
field can contain the following bits:
.\" fixme this user-space api seems not fully polished. why are there
.\" not constants defined for each of the bit-mask values listed below?
.tp
.b 1 << _uffdio_api
the
.b uffdio_api
operation is supported.
.tp
.b 1 << _uffdio_register
the
.b uffdio_register
operation is supported.
.tp