# Unboxing Android: A Comprehensive Guide to Android Packers

## Authors
- **Slava Makkaveev**: Senior Security Researcher at Check Point, formerly at Verint. Specializes in mobile OS research and Linux internals.
- **Avi Bashan**: R&D Team Leader at Check Point, previously a security researcher at Lacoon Mobile Security. Expertise in OS internal research, mobile security, and the Linux kernel.

## Introduction
This document provides an in-depth look into the world of Android packers, including their usage, techniques, and how to unpack them. We will also share our approach to developing a solution that minimally alters the Android environment while effectively working on most popular packers.

## "Boxing" Techniques
Malware authors use various "boxing" techniques to protect their apps from static code analysis and reverse engineering. These techniques can be proprietary or implemented using third-party software. Common methods include:
- **Code Obfuscation**
- **Anti-Debugging**
- **Anti-Tampering**
- **Anti-Dumper**
- **Anti-Decompiler**
- **Anti-Runtime Injection**

## Maliciousness of Packed Apps
In July 2017, we analyzed 13,000 apps and identified several techniques used to protect app code, such as:
- **Obfuscators**
- **Packers**
- **Protectors**

## APK Protection Techniques
APK protection techniques typically involve:
- **Obfuscators**: To make the code difficult to understand.
- **Packers**: To compress and encrypt the DEX file.
- **Protectors**: To add additional layers of security.

### Packing Process
The packing process involves:
1. **Original DEX**: The original DEX file is encrypted.
2. **Packer Loader**: A loader that decrypts and loads the encrypted DEX file.
3. **Encrypted DEX**: The encrypted DEX file is stored in the APK.

### Execution
During execution:
1. The **Packer Loader** decrypts the DEX file.
2. The **Original DEX** is loaded and executed.

### Protector Process
For more advanced protection:
1. **Original DEX**: The original DEX file is modified and encrypted.
2. **Protector Loader**: A loader that decrypts and loads the modified DEX file.
3. **Modified DEX**: The modified DEX file is stored in the APK.

### Execution
During execution:
1. The **Protector Loader** decrypts the DEX file.
2. The **Modified DEX** is loaded and executed.

## Back to Basics: ART - Android Runtime VM
ART (Android RunTime) uses Ahead of Time (AOT) compilation, which pre-compiles DEX files to OAT files during installation. This approach:
- Reduces startup time of applications
- Improves battery performance
- Uses less RAM

### DEX Loading Process
- **Zygote Process**: Forks a new process for the app.
- **App Process**: Loads the `classes.dex` file.
- **dex2oat**: Compiles the DEX file to an OAT file.
- **Load App Code**: The app code is loaded and executed.

### OAT File
An OAT file is an ELF file with three special symbols in the dynamic section:
- **oatdata**: Contains the original DEX file.
- **oatexec**: Contains compiled native instructions.
- **aotlastword**: Marks the end of the OAT file.

## Android Java Native Interface (JNI)
JNI allows calling native code directly from the JVM. It is often used by packers for the packing logic. The execution path starts from `System.loadLibrary`, and the packer library is called after the activity is started.

## How to Unpack
Possible approaches to unpack an Android app include:
- Finding the algorithm
- Extracting DEX from compiled OAT
- Dumping DEX from memory
- Modifying the runtime environment

### Notable Previous Work
- **Android Hacker Protection Level 0** by Tim Strazzere and Jon Sawyer (DEFCON 22, 2015): Released a set of unpacking scripts.
- **DexHunter** by Yueqian Zhang, Xiapu Luo, and Haoyang Yin (HITCON, 2015): Released a modified version of the Android Dalvik/ART VM.

## Our Approach
### Goals
- Find a solution that requires minimal changes to Android.
- Ensure the solution works on most packers.

### Methodology
- Reversed the most popular packers.
- Patched a few lines of code in the Android Runtime.

### Results
We successfully encountered and unpacked the following popular packers:
- Baidu
- Bangcle
- Tencent
- Ali
- 360 Jiagu
- And a few more

### Abstract Packer Model
- **Loader DEX**: Loads the protected DEX file.
- **libart.so and libc.so**: Used for opening, reading, and mapping data.
- **Protected DEX**: The encrypted DEX file.

### Bangcle - Detailed Analysis
#### Classes
- **ApplicationWrapper**
- **FirstApplication**
- **MyClassLoader**
- **ACall**

#### Files
- **libsecse.so**
- **libsecmain.so**
- **libsecexe.so**
- **libsecpreload.so**
- **bangcle_classes.jar** (original DEX)

#### Java Loader Implementation
- Moves assets to the cache directory.
- Uses `MyClassLoader` to load the decrypted DEX file.

#### Native Loader Implementation
- **ACall Class**: Contains native methods for loading and decrypting the DEX file.
- **libsecexe.so**: Contains the native implementation for the `ACall` class.

### Conclusion
By understanding the underlying mechanisms and techniques used by packers, we can develop effective methods to unpack and analyze protected Android apps. Our approach ensures minimal disruption to the Android environment while providing a robust solution for unpacking a wide range of packers.