docker push /:
docker push xxxx/ubuntu:18.04
# 报错 : denied: requested access to the resource is denied
docker tag nginx zhang3/nginx:latest
docker push zhang3/nginx:latest
# tag 修改为 zhang3/xxxxx 就 push 成功。需要注意的是 zhang3 需要是本人的 docker 用户名。
```
---
## docker remote api
> ⚠️ 注意: 监听 0.0.0.0 有安全风险,生产环境下请监听 127.0.0.1
```bash
vim /usr/lib/systemd/system/docker.service
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock
systemctl daemon-reload
systemctl restart docker
```
---
## 容器网络管理
### 原生网络
Docker 安装完成存在多种原生网络模式 bridge、host、none。
**bridge 模式（桥接模式）**
> -net=bridge(默认)
这是dokcer网络的默认设置，为容器创建独立的网络命名空间，容器具有独立的网卡等所有单独的网络栈，是最常用的使用方式。
在 docker run 启动容器的时候，如果不加 -net 参数，就默认采用这种网络模式。
安装完 docker，系统会自动添加一个供 docker 使用的网桥 docker0，我们创建一个新的容器时，容器通过 DHCP 获取一个与 docker0 同网段的 IP 地址，并默认连接到 docker0 网桥，以此实现容器与宿主机的网络互通。
当执行 docker run 加入 -p 参数是，实际是在 iptables 中加入了对应的 DNAT 端口转发规则。
**host 模式（主机模式）**
> -net=host
host 模式的容器跟宿主机共用一个 namespace，拥有一样的 IP 和路由，因此容器内的服务端口不能跟宿主机相同。
这个模式下创建出来的容器，直接使用容器宿主机的网络命名空间。将不拥有自己独立的Network Namespace，即没有独立的网络环境。它使用宿主机的ip和端口。这种模式主要适用于管理员希望以docker方式管理服务器。
**none 模式（禁用网络模式）**
> -net=none
为容器创建独立网络命名空间，但不为它做任何网络配置，容器中只有lo，用户可以在此基础上，对容器网络做任意定制。这个模式下，dokcer不为容器进行任何网络配置。需要我们自己为容器添加网卡，配置IP。因此，若想使用pipework配置docker容器的ip地址，必须要在none模式下才可以。
**其他容器模式（即container模式，join模式）**
-net=container:NAME_or_ID 与host模式类似，只是容器将与指定的容器共享网络命名空间。这个模式就是指定一个已有的容器，共享该容器的IP和端口。除了网络方面两个容器共享，其他的如文件系统，进程等还是隔离开的。
**用户自定义**
docker 1.9版本以后新增的特性，允许容器使用第三方的网络实现或者创建单独的bridge网络，提供网络隔离能力。
### 外部访问容器
容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。
当使用 -P 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。
> ⚠️ 注意 -p 标记可以多次使用来绑定多个端口
使用 docker container ls 可以看到,端口映射情况
可以通过 docker logs 命令来查看访问记录
```
docker logs xxx
```
-p 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort。
**映射所有接口地址**
使用 hostPort:containerPort 格式本地的 80 端口映射到容器的 80 端口，可以执行
```bash
docker run -d -p 80:80 nginx:alpine
```
此时默认会绑定本地所有接口上的所有地址。
**映射到指定地址的指定端口**
可以使用 ip:hostPort:containerPort 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1
```bash
docker run -d -p 127.0.0.1:80:80 nginx:alpine
```
**映射到指定地址的任意端口**
使用 ip::containerPort 绑定 localhost 的任意端口到容器的 80 端口，本地主机会自动分配一个端口。
```bash
docker run -d -p 127.0.0.1::80 nginx:alpine
```
还可以使用 udp 标记来指定 udp 端口
```bash
docker run -d -p 127.0.0.1:80:80/udp nginx:alpine
```
**查看映射端口配置**
使用 docker port 来查看当前映射的端口配置，也可以查看到绑定的地址
```bash
docker port xxxx 80
```
### 查看容器的ip地址
```bash
# 进入容器后
cat /etc/hosts
```
```bash
# 在宿主机
docker inspect  | jq .[].NetworkSettings.Networks
# 或
docker inspect --format '{{ .NetworkSettings.IPAddress }}' 
# 或
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container_name_or_id
```
### 容器互联
新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。
```bash
docker network ls
# 新建虚拟网络
docker network create -d bridge demo-net
# -d 参数指定 Docker 网络类型，有 bridge overlay。其中 overlay 网络类型用于 Swarm mode
# 第二个例子
docker run -itd --name test1 --network demo-net alpine
docker run -itd --name test2 --network demo-net alpine
# 分别进入容器，能够互相ping通
docker exec -it test1 /bin/bash
docker exec -it test2 /bin/bash
```
### 自定义IP
```bash
# 用下面的命令创建docker网桥
docker network create -d bridge -o com.docker.network.bridge.name='demo-net2' --subnet=172.10.200.0/24 --ip-range=172.10.200.0/24 --gateway=172.10.200.1 demo-net2
# 运行容器
docker run -itd --name test0 --network demo-net2 alpine
```
### 容器dns配置
```bash
# vi /etc/docker/daemon.json 设置所有容器的DNS
# 这样容器就可以共享这里的DNS配置，解析域名了。
"dns": [
  "223.5.5.5",
  "8.8.8.8"
]
# 单独指定容器DNS
docker run -it --rm --dns=223.5.5.5 --dns-search=test.com bmc/opensuse15.2:dev
```
如果在容器启动时没有指定 --dns/--dns-search 两个参数，Docker 会默认用主机上的 /etc/resolv.conf 来配置容器。
---
## 案例
### 推荐的镜像
**BusyBox**
BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、telnet 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。
BusyBox 可运行于多款 POSIX 环境的操作系统中，如 Linux（包括 Android）、Hurd、FreeBSD 等。
一般是 1～3M 的大小
```bash
docker pull busybox:latest
docker image ls
```
**Alpine**
Alpine 操作系统是一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musl libc 和 busybox 以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，因此得到开源社区越来越多的青睐。在保持瘦身的同时，Alpine 还提供了自己的包管理工具 apk，可以通过 https://pkgs.alpinelinux.org/packages 网站上查询包信息，也可以直接通过 apk 命令直接查询和安装各种软件。
Alpine 由非商业组织维护的，支持广泛场景的 Linux发行版，它特别为资深/重度Linux用户而优化，关注安全，性能和资源效能。Alpine 镜像可以适用于更多常用场景，并且是一个优秀的可以适用于生产的基础系统/环境。
Alpine Docker 镜像也继承了 Alpine Linux 发行版的这些优势。相比于其他 Docker 镜像，它的容量非常小，仅仅只有 5 MB 左右（对比 Ubuntu 系列镜像接近 200 MB），且拥有非常友好的包管理机制。官方镜像来自 docker-alpine 项目。
目前 Docker 官方已开始推荐使用 Alpine 替代之前的 Ubuntu 做为基础镜像环境。这样会带来多个好处。包括镜像下载速度加快，镜像安全性提高，主机之间的切换更方便，占用更少磁盘空间等。
一般是 5～6M 的大小