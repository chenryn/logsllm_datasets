Value 
changing 
Truncation 
Implementat
ion defined 
Value 
changing 
Truncati
on 
Value 
changing 
Bit pattern 
same 
Implementat
ion defined 
Compati
ble types 
Value 
preserving 
Zero 
extension 
Value 
preservi
ng 
Zero 
extensio
n 
Int 
Value 
changing 
Truncation 
Implementat
ion defined 
Value 
changing 
Truncati
on 
Value 
changing 
Truncation 
Implementat
ion defined 
Value 
changing 
Truncati
on 
Compatible 
types 
Value 
changing 
Bit 
pattern 
same 
unsign
ed int 
Value 
changing 
Truncation 
Implementat
ion defined 
Value 
changing 
Truncati
on 
Value 
changing 
Truncation 
Implementat
ion defined 
Value 
changing 
Truncati
on 
Value 
changing 
Bit pattern 
same 
Implementat
Compati
ble types 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
245 
Table 6-4. Integer Type Conversion in C (Source on Left, Destination on Top) 
signed char unsigne
d char 
short int 
Unsigne
d short 
int 
int 
unsigne
d int 
ion defined 
Floating Point and Complex Types 
Although vulnerabilities caused by the use of floating point arithmetic haven't been 
widely published, they are certainly possible. There's certainly the possibility of subtle 
errors surfacing in financial software related to floating point type conversions or 
representation issues. The discussion of floating point types in this chapter is fairly 
brief. For more information, refer to the C standards documents and the previously 
mentioned C programming references. 
The C standard's rules for conversions between real floating types and integer types 
leave a lot of room for implementation-defined behaviors. In a conversion from a real 
type to an integer type, the fractional portion of the number is discarded. If the 
integer type can't represent the integer portion of the floating point number, the 
result is undefined. Similarly, a conversion from an integer type to a real type 
transfers the value over if possible. If the real type can't represent the integer's value 
but can come close, the compiler rounds the integer to the next highest or lowest 
number in an implementation-defined manner. If the integer is outside the range of 
the real type, the result is undefined. 
Conversions between floating point types of different precision are handled with 
similar logic. Promotion causes no change in value. During a demotion that causes a 
change in value, the compiler is free to round numbers, if possible, in an 
implementation-defined manner. If rounding isn't possible because of the range of 
the target type, the result is undefined. 
Other Types 
There are myriad other types in C beyond integers and floats, including pointers, 
Booleans, structures, unions, functions, arrays, enums, and more. For the most part, 
conversion among these types isn't quite as critical from a security perspective, so 
they aren't extensively covered in this chapter. 
Pointer arithmetic is covered in "Pointer Arithmetic(? [????.])" later in this chapter. 
Pointer type conversion depends largely on the underlying machine architecture, and 
many conversions are specified as implementation defined. Essentially, programmers 
are free to convert pointers into integers and back, and convert pointers from one 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
246 
type to another. The results are implementation defined, and programmers need to 
be cognizant of alignment restrictions and other low-level details. 
Simple Conversions 
Now that you have a good idea how C converts from one integer type to another, you 
can look at some situations where these type conversions occur. Simple 
conversions are C expressions that use straightforward applications of conversion 
rules. 
Casts 
As you know, typecasts are C's mechanism for letting programmers specify an explicit 
type conversion, as shown in this example: 
(unsigned char) bob 
Whatever type bob happens to be, this expression converts it into an unsigned char 
type. The resulting type of the expression is unsigned char. 
Assignments 
Simple type conversion also occurs in the assignment operator. The compiler must 
convert the type of the right operand into the type of the left operand, as shown in 
this example: 
short int fred; 
int bob = -10; 
fred = bob; 
For both assignments, the compiler must take the object in the right operand and 
convert it into the type of the left operand. The conversion rules tell you that 
conversion from the int bob to the short int fred results in truncation. 
Function Calls: Prototypes 
C has two styles of function declarations: the old K&R style, in which parameter types 
aren't specified in the function declaration, and the new ANSI style, in which the 
parameter types are part of the declaration. In the ANSI style, the use of function 
prototypes is still optional, but it's common. With the ANSI style, you typically see 
something like this: 
int dostuff(int jim, unsigned char bob); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
247 
void func(void) 
{ 
    char a=42; 
    unsigned short b=43; 
    long long int c; 
    c=dostuff(a, b); 
} 
The function declaration for dostuff() contains a prototype that tells the compiler the 
number of arguments and their types. The rule of thumb is that if the function has a 
prototype, the types are converted in a straightforward fashion using the rules 
documented previously. If the function doesn't have a prototype, something called 
the default argument promotions kicks in (explained in "Integer Promotions"). 
The previous example has a character (a) being converted into an int (jim), an 
unsigned short (b) being converted into an unsigned char (bob), and an int (the 
dostuff() function's return value) being converted into a long long int (c). 
Function Calls: return 
return does a conversion of its operand to the type specified in the enclosing 
function's definition. For example, the int a is converted into a char data type by 
return: 
char func(void) 
{ 
    int a=42; 
    return a; 
} 
Integer Promotions 
Integer promotions specify how C takes a narrow integer data type, such as a char 
or short, and converts it to an int (or, in rare cases, to an unsigned int). This 
up-conversion, or promotion, is used for two different purposes: 
Certain operators in C require an integer operand of type int or unsigned int. 
For these operators, C uses the integer promotion rules to transform a 
narrower integer operand into the correct typeint or unsigned int. 
Integer promotions are a critical component of C's rules for handling 
arithmetic expressions, which are called the usual arithmetic conversions. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
248 
For arithmetic expressions involving integers, integer promotions are usually 
applied to both operands. 
Note 
You might see the terms "integer promotions" and "integral promotions" used 
interchangeably in other literature, as they are synonymous. 
There's a useful concept from the C standards: Each integer data type is assigned 
what's known as an integer conversion rank. These ranks order the integer data 
types by their width from lowest to highest. The signed and unsigned varieties of each 
type are assigned the same rank. The following abridged list sorts integer types by 
conversion rank from high to low. The C standard assigns ranks to other integer types, 
but this list should suffice for this discussion: 
long long int, unsigned long long int 
long int, unsigned long int 
unsigned int, int 
unsigned short, short 
char, unsigned char, signed char 
_Bool 
Basically, any place in C where you can use an int or unsigned int, you can also use 
any integer type with a lower integer conversion rank. This means you can use 
smaller types, such as chars and short ints, in the place of ints in C expressions. You 
can also use a bit field of type _Bool, int, signed int, or unsigned int. The bit fields 
aren't ascribed integer conversion ranks, but they are treated as narrower than their 
corresponding base type. This makes sense because a bit field of an int is usually 
smaller than an int, and at its widest, it's the same width as an int. 
If you apply the integer promotions to a variable, what happens? First, if the variable 
isn't an integer type or a bit field, the promotions do nothing. Second, if the variable 
is an integer type, but its integer conversion rank is greater than or equal to that of an 
int, the promotions do nothing. Therefore, ints, unsigned ints, long ints, pointers, and 
floats don't get altered by the integer promotions. 
So, the integer promotions are responsible for taking a narrower integer type or bit 
field and promoting it to an int or unsigned int. This is done in a straightforward 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
249 
fashion: If a value-preserving transformation to an int can be performed, it's done. 
Otherwise, a value-preserving conversion to an unsigned int is performed. 
In practice, this means almost everything is converted to an int, as an int can hold the 
minimum and maximum values of all the smaller types. The only types that might be 
promoted to an unsigned int are unsigned int bit fields with 32 bits or perhaps some 
implementation-specific extended integer types. 
Historical Note 
The C89 standard made an important change to the C type conversion rules. In the 
K&R days of the C language, integer promotions were unsigned-preserving rather 
than value-preserving. So with the current C rules, if a narrower, unsigned integer 
type, such as an unsigned char, is promoted to a wider, signed integer, such as an int, 
value conversion dictates that the new type is a signed integer. With the old rules, the 
promotion would preserve the unsigned-ness, so the resulting type would be an 
unsigned int. This changed the behavior of many signed/unsigned comparisons that 
involved promotions of types narrower than int. 
Integer Promotions Summary 
The basic rule of thumb is this: If an integer type is narrower than an int, integer 
promotions almost always convert it to an int. Table 6-5 summarizes the result of 
integer promotions on a few common types. 
Table 6-5. Results of Integer Promotions 
Source Type 
Result Type Rationale 
unsigned char 
int 
Promote; source rank less than int rank 
char 
int 
Promote; source rank less than int rank 
short 
int 
Promote; source rank less than int rank 
unsigned short 
int 
Promote; source rank less than int rank 
unsigned int: 24 int 
Promote; bit field of unsigned int 
unsigned int: 32 unsigned int Promote; bit field of unsigned int 
int 
int 
Don't promote; source rank equal to int rank 
unsigned int 
unsigned int Don't promote; source rank equal to int rank 
long int 
long int 
Don't promote; source rank greater than int rank 
float 
float 
Don't promote; source not of integer type 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
250 
Table 6-5. Results of Integer Promotions 
Source Type 
Result Type Rationale 
char * 
char * 
Don't promote; source not of integer type 
Integer Promotion Applications 
Now that you understand integer promotions, the following sections examine where 
they are used in the C language. 
Unary + Operator 
The unary + operator performs integer promotions on its operand. For example, if the 
bob variable is of type char, the resulting type of the expression (+bob) is int, whereas 
the resulting type of the expression (bob) is char. 
Unary - Operator 
The unary - operator does integer promotion on its operand and then does a negation. 
Regardless of whether the operand is signed after the promotion, a twos complement 
negation is performed, which involves inverting the bits and adding 1. 
The Leblancian Paradox 
David Leblanc is an accomplished researcher and author, and one of the world's 
foremost experts on integer issues in C and C++. He documented a fascinating 
nuance of twos complement arithmetic that he discovered while working on the 
SafeInt class with his colleague Atin Bansal 
(http://msdn.microsoft.com/library/en-us/dncode/html/secure01142004.asp). 
To negate a twos complement number, you flip all the bits and add 1 to the 
result. Assuming a 32-bit signed data type, what's the inverse of 0x80000000? 
If you flip all the bits, you get 0x7fffffff. If you add 1, you get 0x80000000. So 
the unary negation of this corner-case number is itself! 
This idiosyncrasy can come into play when developers use negative integers to 
represent a special sentinel set of numbers or attempt to take the absolute 
value of an integer. In the following code, the intent is for a negative index to 
specify a secondary hash table. This works fine unless attackers can specify an 
index of 0x80000000. The negation of the number results in no change in the 
value, and 0x80000000 % 1000 is -648, which causes memory before the array 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
251 
to be modified. 
int bank1[1000], bank2[1000]; 
... 
void hashbank(int index, int value) 
{ 
  int *bank = bank1; 
  if (index<0) { 
   bank = bank2; 
   index = -index; 
  } 
  bank[index % 1000] = value; 
} 
Unary ~ Operator 
The unary ~ operator does a ones complement of its operand after doing an integer 
promotion of its operand. This effectively performs the same operation on both signed 