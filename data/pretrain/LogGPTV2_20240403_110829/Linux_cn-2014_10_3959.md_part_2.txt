# service puppet start
```
强制我们的客户端在 Puppet master 服务器上登记：
```
# puppet agent --test
```
你会看到类似于下面的输出。别怕，这是正常现象，因为服务器还没有在 Puppet master 服务器上验证过。
> 
> Exiting; no certificate found and waitforcert is disabled
> 
> 
> 
返回 Puppet master 服务器，检查证书验证请求：
```
# puppet cert list
```
你应该能看到一个列出了所有向 Puppet master 服务器发起证书签名请求的服务器。找到你客户端服务器的 hostname 然后使用下面的命令签名（client-node 是你客户端节点的域名）：
```
# puppet cert sign client-node
```
到此为止 Puppet 客户端和服务器都正常工作了。恭喜你！但是，现在 Puppet master 没有任何要客户端做的事儿。好吧，我们来创建一些基本的 manifest 文件然后让我们的客户端节点安装一些基本工具。
回到你的 Puppet 服务器，确保目录 /etc/puppet/manifests 存在。
```
# mkdir -p /etc/puppet/manifests
```
创建 manifest 文件 /etc/puppet/manifests/site.pp，内容如下
```
node 'client-node' {
        include custom_utils
}
class custom_utils {
        package { ["nmap","telnet","vim-enhanced","traceroute"]:
                ensure => latest,
                allow_virtual => false,
        }
}
```
然后重新启动 puppetmaster 服务。
```
# service puppetmaster restart
```
客户端默认每 30 分钟更新一次配置，如果你希望你的修改能强制生效，就在客户端执行如下命令：
```
# puppet agent -t
```
如果你需要修改客户端的默认刷新时间，编辑客户端节点的 /etc/puppet/puppet.conf 文件中“[agent]”小节，增加下面这一行：
> 
> runinterval =
> 
> 
> 
这个选项的值可以是秒（格式比如 30 或者 30s），分钟（30m），小时（6h），天（2d）以及年（5y）。值得注意的是，**0 意味着“立即执行”而不是“从不执行”**。
### 提示和技巧
#### 1. 调试
你免不了会提交错误的配置，然后不得不通过调试判断问题出现在哪儿。一般来说，你要么通过查看日志文件 /var/log/puppet 着手解决问题，要么手动执行查看输出：
```
# puppet agent -t
```
使用“-t”选项，你可以看到 Puppet 的详细输出。这条命令还有额外的选项可以帮你定位问题。首先要介绍的选项是：
```
# puppet agent -t --debug
```
debug 选项会显示 Puppet 本次运行时的差不多每一个步骤，这在调试非常复杂的问题时很有用。另一个很有用的选项是：
```
# puppet agent -t --noop
```
这个选项让 puppet 工作在 dry-run（译注：空转模式，不会对真实环境产生影响）模式下，不会应用任何修改。Puppet 只会把其工作内容输出到屏幕上，不会写到磁盘里去。
#### 2. 模块
有时候你需要更复杂的 manifest 文件，在你着手编写它们之前，你有必要花点儿时间浏览一下 [https://forge.puppetlabs.com](https://forge.puppetlabs.com/)。Forge 是一个集合了 Puppet 模块的社区，你的问题很可能已经有人解答过了，你能在那儿找到解决问题的模块。如果找不到，那就自己写一个然后提交上去，其他人也能从中获益。
现在，假设你已经找到了一个模块能解决你的问题。怎么把它安装到你的系统中去呢？非常简单，因为 Puppet 已经有了可以直接下载模块的用户界面，只需要执行下面的命令：
```
# puppet module install  --version 0.0.0
```
 是你选择的模块的名字，版本号可选（如果没有指定版本号，默认使用最新的版本）。如果你不记得想安装的模块的名字了，试试下面的命令搜索模块：
```
# puppet module search 
```
你会得到一个包含 search\_string 的列表。
```
# puppet module search apache
```
---
```
Notice: Searching https://forgeapi.puppetlabs.com ...
NAME                   DESCRIPTION                        AUTHOR          KEYWORDS
example42-apache       Puppet module for apache           @example42      example42, apache
puppetlabs-apache      Puppet module for Apache           @puppetlabs     apache web httpd centos rhel ssl wsgi proxy
theforeman-apache      Apache HTTP server configuration   @theforeman     foreman apache httpd DEPRECATED
```
如果你想查看已经安装了哪些模块，键入：
```
# puppet module list
```
### 总结
到目前为止，你应该有了功能完整的可以向一个或多个客户端服务器推送基本配置的 Puppet master 服务器。你可以自己随便加点儿配置适配你自己的网络环境。不必为试用 Puppet 担心，你会发现，它会拯救你的生活。
Puppet 实验室正在试着维护一个质量上乘的项目文档，所以如果你想学点儿关于 Puppet 相关的配置，我强烈推荐你访问 Puppet 项目的主页 [http://docs.puppetlabs.com](http://docs.puppetlabs.com/)。
如果你有任何问题，敬请在文章下方评论，我会尽我所能回答你并给你建议。
---
via: 
作者：[Jaroslav Štěpánek](http://xmodulo.com/author/jaroslav) 译者：[sailing](https://github.com/sailing) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出