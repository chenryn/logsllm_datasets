byte string alignment.
.sh errors
the
.br dbopen ()
routine may fail and set
.i errno
for any of the errors specified for the library routines
.br open (2)
and
.br malloc (3)
or the following:
.tp
.b eftype
a file is incorrectly formatted.
.tp
.b einval
a parameter has been specified (hash function, pad byte, etc.) that is
incompatible with the current file specification or which is not
meaningful for the function (for example, use of the cursor without
prior initialization) or there is a mismatch between the version
number of file and the software.
.pp
the
.i close
routines may fail and set
.i errno
for any of the errors specified for the library routines
.br close (2),
.br read (2),
.br write (2),
.br free (3),
or
.br fsync (2).
.pp
the
.ir del ,
.ir get ,
.ir put ,
and
.i seq
routines may fail and set
.i errno
for any of the errors specified for the library routines
.br read (2),
.br write (2),
.br free (3),
or
.br malloc (3).
.pp
the
.i fd
routines will fail and set
.i errno
to
.b enoent
for in memory databases.
.pp
the
.i sync
routines may fail and set
.i errno
for any of the errors specified for the library routine
.br fsync (2).
.sh bugs
the typedef
.i dbt
is a mnemonic for "data base thang", and was used
because no one could think of a reasonable name that wasn't already used.
.pp
the file descriptor interface is a kludge and will be deleted in a
future version of the interface.
.pp
none of the access methods provide any form of concurrent access,
locking, or transactions.
.sh see also
.br btree (3),
.br hash (3),
.br mpool (3),
.br recno (3)
.pp
.ir "libtp: portable, modular transactions for unix" ,
margo seltzer, michael olson, usenix proceedings, winter 1992.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/getifaddrs.3
.so man3/gethostid.3
import os
import glob
import random
# navigate to the directory
data_dir = '/media/external/man-pages-dataset/man-pages-5.13'
os.chdir(data_dir)
# function to preprocess the text
def preprocess_text(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        text = file.read()
    # simple preprocessing (e.g., lowercase conversion)
    text = text.lower()
    return text
# collect and preprocess the data
all_data = []
file_paths = glob.glob('**/*.txt', recursive=true)
print(f'found {len(file_paths)} files.')
for file_path in file_paths:
    preprocessed_text = preprocess_text(file_path)
    all_data.append(preprocessed_text)
print(f'processed {len(all_data)} files.')
# shuffle and split the data
random.shuffle(all_data)
train_size = int(0.8 * len(all_data))
train_data, val_test_data = all_data[:train_size], all_data[train_size:]
val_size = int(0.5 * len(val_test_data))
val_data, test_data = val_test_data[:val_size], val_test_data[val_size:]
# save the preprocessed data
output_dir = os.path.join(data_dir, 'preprocessed_data')
os.makedirs(output_dir, exist_ok=true)
with open(os.path.join(output_dir, 'train.txt'), 'w', encoding='utf-8') as file:
    file.write('\n'.join(train_data))
with open(os.path.join(output_dir, 'val.txt'), 'w', encoding='utf-8') as file:
    file.write('\n'.join(val_data))
with open(os.path.join(output_dir, 'test.txt'), 'w', encoding='utf-8') as file:
    file.write('\n'.join(test_data))
print(f'data preprocessing and splitting completed. preprocessed data saved to {output_dir}')
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\" and copyright 2008, linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified 1993-07-24 by rik faith (PI:EMAIL)
.\" modified 1995-08-14 by arnt gulbrandsen 
.\" modified 2002-07-27 by walter harms
.\" 	(PI:EMAIL)
.\"
.th exp 3  2021-03-22  "" "linux programmer's manual"
.sh name
exp, expf, expl \- base-e exponential function
.sh synopsis
.nf
.b #include 
.pp
.bi "double exp(double " x );
.bi "float expf(float " x );
.bi "long double expl(long double " x );
.fi
.pp
link with \fi\-lm\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br expf (),
.br expl ():
.nf
    _isoc99_source || _posix_c_source >= 200112l
        || /* since glibc 2.19: */ _default_source
        || /* glibc 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified by michael haardt 
.\" modified 1993-07-21 by rik faith 
.\" modified 1994-08-21 by michael chastain :
.\" modified 1997-01-31 by eric s. raymond 
.\" modified 1999-11-12 by urs thuermann 
.\" modified 2004-06-23 by michael kerrisk 
.\" 2006-09-04 michael kerrisk 
.\"     added list of process attributes that are not preserved on exec().
.\" 2007-09-14 ollie wild , mtk
.\"     add text describing limits on command-line arguments + environment
.\"
.th execve 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
execve \- execute program
.sh synopsis
.nf
.b #include 
.pp
.bi "int execve(const char *" pathname ", char *const " argv [],
.bi "           char *const " envp []);
.fi
.sh description
.br execve ()
executes the program referred to by \fipathname\fp.
this causes the program that is currently being run by the calling process
to be replaced with a new program, with newly initialized stack, heap,
and (initialized and uninitialized) data segments.
.pp
\fipathname\fp must be either a binary executable, or a script
starting with a line of the form:
.pp
.in +4n
.ex
\fb#!\fp\fiinterpreter \fp[optional-arg]
.ee
.in
.pp
for details of the latter case, see "interpreter scripts" below.
.pp
\fiargv\fp is an array of pointers to strings passed to the new program
as its command-line arguments.
by convention, the first of these strings (i.e.,
.ir argv[0] )
should contain the filename associated with the file being executed.
the
.i argv
array must be terminated by a null pointer.
(thus, in the new program,
.ir argv[argc]
will be null.)
.pp
\fienvp\fp is an array of pointers to strings, conventionally of the form
\fbkey=value\fp, which are passed as the environment of the new program.
the
.i envp
array must be terminated by a null pointer.
.pp
the argument vector and environment can be accessed by the
new program's main function, when it is defined as:
.pp
.in +4n
.ex
int main(int argc, char *argv[], char *envp[])
.ee
.in
.pp
note, however, that the use of a third argument to the main function
is not specified in posix.1;
according to posix.1,
the environment should be accessed via the external variable
.br environ (7).
.pp
.br execve ()
does not return on success, and the text, initialized data,
uninitialized data (bss), and stack of the calling process are overwritten
according to the contents of the newly loaded program.
.pp
if the current program is being ptraced, a \fbsigtrap\fp signal is sent to it
after a successful
.br execve ().
.pp
if the set-user-id bit is set on the program file referred to by
\fipathname\fp,
then the effective user id of the calling process is changed
to that of the owner of the program file.
similarly, if the set-group-id bit is set on the program file,
then the effective group id of the calling
process is set to the group of the program file.
.pp
the aforementioned transformations of the effective ids are
.i not
performed (i.e., the set-user-id and set-group-id bits are ignored)
if any of the following is true:
.ip * 3
the
.i no_new_privs
attribute is set for the calling thread (see
.br prctl (2));
.ip *
the underlying filesystem is mounted
.i nosuid
(the
.b ms_nosuid
flag for
.br mount (2));
or
.ip *
the calling process is being ptraced.
.pp
the capabilities of the program file (see
.br capabilities (7))
are also ignored if any of the above are true.
.pp
the effective user id of the process is copied to the saved set-user-id;
similarly, the effective group id is copied to the saved set-group-id.
this copying takes place after any effective id changes that occur
because of the set-user-id and set-group-id mode bits.
.pp
the process's real uid and real gid, as well as its supplementary group ids,
are unchanged by a call to
.br execve ().
.pp
if the executable is an a.out dynamically linked
binary executable containing
shared-library stubs, the linux dynamic linker
.br ld.so (8)
is called at the start of execution to bring
needed shared objects into memory
and link the executable with them.
.pp
if the executable is a dynamically linked elf executable, the
interpreter named in the pt_interp segment is used to load the needed
shared objects.
this interpreter is typically
.i /lib/ld\-linux.so.2
for binaries linked with glibc (see
.br ld\-linux.so (8)).
.\"
.ss effect on process attributes
all process attributes are preserved during an
.br execve (),
except the following:
.ip * 3
the dispositions of any signals that are being caught are
reset to the default
.rb ( signal (7)).
.ip *
any alternate signal stack is not preserved
.rb ( sigaltstack (2)).
.ip *
memory mappings are not preserved
.rb ( mmap (2)).
.ip *
attached system\ v shared memory segments are detached
.rb ( shmat (2)).
.ip *
posix shared memory regions are unmapped
.rb ( shm_open (3)).
.ip *
open posix message queue descriptors are closed
.rb ( mq_overview (7)).
.ip *
any open posix named semaphores are closed
.rb ( sem_overview (7)).
.ip *
posix timers are not preserved
.rb ( timer_create (2)).
.ip *
any open directory streams are closed
.rb ( opendir (3)).
.ip *
memory locks are not preserved
.rb ( mlock (2),
.br mlockall (2)).
.ip *
exit handlers are not preserved
.rb ( atexit (3),
.br on_exit (3)).
.ip *
the floating-point environment is reset to the default (see
.br fenv (3)).
.pp
the process attributes in the preceding list are all specified
in posix.1.
the following linux-specific process attributes are also
not preserved during an
.br execve ():
.ip * 3
the process's "dumpable" attribute is set to the value 1,
unless a set-user-id program, a set-group-id program,
or a program with capabilities is being executed,
in which case the dumpable flag may instead be reset to the value in
.ir /proc/sys/fs/suid_dumpable ,
in the circumstances described under
.br pr_set_dumpable
in
.br prctl (2).
note that changes to the "dumpable" attribute may cause ownership
of files in the process's
.ir /proc/[pid]
directory to change to
.ir root:root ,
as described in
.br proc (5).
.ip *
the
.br prctl (2)
.b pr_set_keepcaps
flag is cleared.
.ip *
(since linux 2.4.36 / 2.6.23)
if a set-user-id or set-group-id program is being executed,
then the parent death signal set by
.br prctl (2)
.b pr_set_pdeathsig
flag is cleared.
.ip *
the process name, as set by
.br prctl (2)
.b pr_set_name
(and displayed by
.ir "ps\ \-o comm" ),
is reset to the name of the new executable file.