title:The Case for In-Network Replay Suppression
author:Taeho Lee and
Christos Pappas and
Adrian Perrig and
Virgil D. Gligor and
Yih-Chun Hu
The Case for In-Network Replay Suppression
Taeho Lee∗
ETH Zürich
PI:EMAIL
Christos Pappas∗
ETH Zürich
PI:EMAIL
Adrian Perrig
ETH Zürich
PI:EMAIL
Virgil Gligor
Carnegie Mellon University
PI:EMAIL
Yih-Chun Hu
UIUC
PI:EMAIL
ABSTRACT
We make a case for packet-replay suppression at the network layer,
a concept that has been generally neglected. Our contribution is
twofold. First, we demonstrate a new attack, the router-reﬂection
attack, that can be launched using compromised routers. In this at-
tack, a compromised router degrades the connectivity of a remote
Internet region just by replaying packets. The attack is feasible
even if all packets are attributed to their sources, i.e., source au-
thentication is in place, and our evaluation shows that the threat
is pervasive—candidate routers for compromise are in the order of
hundreds or thousands.
Second, we design an in-network mechanism for replay suppres-
sion. We start by showing that designing such a mechanism poses
unsolved challenges and simple adaptations of end-to-end solu-
tions are not sufﬁcient. Then, we devise, analyze, and implement
a highly efﬁcient protocol that suppresses replayed trafﬁc at the
network layer without global time synchronization. Our software-
router prototype can saturate a 10 Gbps link using only two CPU
cores for packet processing.
INTRODUCTION
1.
End-to-end replay detection and suppression has been studied for
over three decades and practical mechanisms have been deployed
in many client-server [1–5], and host-to-host applications [6–9].
In contrast, in-network replay detection and suppression has been
generally considered unnecessary. For example, the end-to-end ar-
gument in network design states that since an end application will
detect and suppress replayed packets if deemed necessary, replay
suppression is unnecessary at the network layer [10]. In this pa-
per, we show that despite this seemingly persuasive argument, in-
network replay detection and suppression is becoming an indis-
pensable network functionality, and we provide a highly efﬁcient
mechanism that can be used on commodity routers.
We begin by the following two observations: 1) The common
assumption that routers are trustworthy no longer holds, as attack-
ers are becoming increasingly interested and successful in com-
promising network infrastructure. Poor security practices [11–13]
*These authors contributed equally to this work.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
© 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3052988
enable attackers to obtain access to routers. More signiﬁcantly,
the adoption of emerging technologies such as software-deﬁned
networking (SDN) enables attackers to compromise the network
directly [14, 15]. 2) In-network source and content authentica-
tion [16–19] is insufﬁcient to thwart a broad range of replay at-
tacks enabled by compromised routers. In the following, we de-
scribe three adverse consequences of packet replays by compro-
mised routers.
First, source authentication—counter-intuitive as it may sound—
can help an attacker to frame an innocent source. For example, a
compromised router can deliberately replay packets to cause ab-
normally high packet rates and trigger intrusion detection systems.
Here, the adversary takes advantage of typical intrusion classiﬁca-
tion rules to falsely accuse a source of misbehavior; e.g., to make
it appear malicious. Such attacks are particularly insidious, since
the source has no readily available recourse; e.g., because trafﬁc
repudiation mechanisms require global inter-ISP cooperation [20],
which is difﬁcult to orchestrate across different jurisdictions.
Second, replaying packets can be used to deliberately waste net-
work resources and corrupt accounting mechanisms. For instance,
a system that allocates network resources (e.g., bandwidth) to au-
thenticated sources [21, 22] can be easily overwhelmed by replay-
ing authentic packets. Furthermore, to increase billable trafﬁc on
one of its underutilized paths, a malicious network (e.g., Tier-1 ISP)
could compromise a router in an upstream network, replay authen-
ticated trafﬁc there, and then charge its customers for the artiﬁcially
generated extra trafﬁc.
Third, we show that the effects of potential attacks are not local,
i.e., they do not affect only the implicated source(s). We present
a new attack—the router-reﬂection attack—that enables an adver-
sary to attack a geographic region of the Internet. The adversary
uses a compromised router and leverages services that do not per-
form end-to-end replay detection (e.g., DNS or NTP): the attacker
ﬁnds the routing bottlenecks of the target region [23] and replays
requests whose responses will target these bottleneck links on the
return path. The attacker can easily ﬁnd such bottleneck links as
they are both pervasive and hard to remove in the current Internet;
and that these links are sufﬁciently provisioned only for a normal
mode of operation, but not for targeted ﬂooding [24, 25]. We dedi-
cate Section 2 to the design and analysis of the attack.
In our quest to devise a practical in-network replay-suppression
mechanism, we found that simple adaptations of well known end-
to-end mechanisms cannot be used at the network layer: process-
ing, storage and communication overheads, and time synchroniza-
tion requirements raise numerous challenges.
Our in-network replay detection and suppression design is based
on a combination of per-interval sequence numbers with small ro-
tating Bloom ﬁlters that store observed packets for the currently
active sequence-number window. Our design requires only mini-
mal coordination between domains (the sequence-number-window
update interval) and does not rely on global time synchronization.
Furthermore, we optimize the protocol parameters to ensure very
low overhead with respect to processing, storage, and communi-
cation latency. In fact, our software prototype demonstrates that
in-network replay suppression is practical to perform even on com-
modity routers.
In-network replay suppression comes with further interesting reper-
cussions:
it ensures that every bit in transit is attributable to its
actual source, which is necessary for all accounting mechanisms.
Moreover, loops are inherently prevented, thus the Time-To-Live
ﬁeld is no longer necessary.
In summary, this paper makes the following contributions:
• illustrate attack capabilities enabled by in-network replays and
evaluate their use in a new link-ﬂooding attack (Section 2);
• show that traditional end-to-end replay detection is not suitable
to prevent in-network replays (Section 3);
• deﬁne a new protocol for in-network replay detection and present
its salient features (Section 4);
• evaluate the new protocol and show that it provides efﬁcient and
scalable replay detection (Section 5).
2. ROUTER-REFLECTION ATTACK
In this section, we describe the router-reﬂection attack, a new attack
in which an adversary degrades, or blocks, legitimate trafﬁc from
ﬂowing into a chosen geographic region of the Internet. The ad-
versary compromises routers and replays packets in order to ﬂood
targeted links that carry a majority of routes into the region. The
attack has similar goals as that of the Crossﬁre attack [24], but the
strategy and the adversary’s capabilities are different: it does not
rely on large botnets; it focuses on responses from public servers,
rather than requests to public servers.
2.1 Overview
Consider a set of hosts V , which are distributed over the Internet,
and a set of hosts T inside a conﬁned region of the Internet—the
target area—against which the adversary launches the attack. A
target area can include the hosts of a city, an organization, or even
a small country. We refer to the trafﬁc direction from V to T as
the inbound direction and to its reverse as the outbound direction.
The set of layer-3 links that carry a majority of routes from V to T
are the routing bottlenecks of the target area. A routing bottleneck
is different from a bandwidth bottleneck [26] in that a bandwidth
bottleneck is determined by the trafﬁc load, whereas a routing bot-
tleneck is determined by the number of ﬂows (source-destination
pairs) that it carries. Typically, routing bottlenecks are adequately
provisioned and the trafﬁc ﬂows do not experience degraded per-
formance in the absence of ﬂooding attacks. Henceforth, the term
bottleneck refers to routing bottlenecks.
The goal of the adversary is to turn the routing bottlenecks of
the target area into bandwidth bottlenecks and degrade the perfor-
mance of as many ﬂows as possible. To this end, the adversary
compromises a router near the target area and replays observed traf-
ﬁc. Speciﬁcally, the adversary replays legitimate outbound requests
from hosts in T to selected services of hosts in V that do not per-
form end-to-end replay detection (e.g., most UDP-based services).
The corresponding responses from hosts in V hit the routing bottle-
necks of the target area in the inbound direction and consume the
bandwidth of these links (e.g., router R1 in Figure 1).
In its simpliﬁed version, the attack does not rely on trafﬁc re-
sponses: a router can replay inbound trafﬁc and hit routing bot-
Hosts in set V
Hosts in set T
Routing
Bottlenecks
R1
R2
Figure 1: Router-Reﬂection Attack: compromised routers R1
and R2 can target routing bottlenecks by replaying legitimate
trafﬁc.
tlenecks that are located downstream (e.g., router R2 in Figure 1).
Hence, a router can replay a larger portion of the observed ﬂows –
not only UDP-based services.
Our attack builds on intuition gained by recent work [23]: rout-
ing bottlenecks are target-area-speciﬁc, pervasive, and long-lived.
Furthermore, the attack has three distinguishing characteristics.
1. It exploits the fact that services that do not perform replay de-
tection are ubiquitous. There is an abundance of UDP-based
services used for common tasks (e.g., DNS, SSDP, NTP) that
will generate responses for replayed requests.
2. It does not inject “new” trafﬁc nor does it modify the observed
trafﬁc. Thus, the attack does not require large botnets to cre-
ate trafﬁc and it is feasible even with source-authentication sys-
tems [16–18] in place. Note the difference from common reﬂec-
tion attacks that spoof the source address, directing the response
trafﬁc to a victim.
3. It exploits the fact that Internet paths tend to be asymmetric,
especially when they traverse core backbone links [27, 28]. This
means that the responses generated by the replayed requests will
likely follow a different inbound path back to the target area.
Thus, a compromised router can launch such an attack without
attacking itself in the inbound direction.
We emphasize that we assume a source-authentication scheme is
in place. That is, a router can verify the authenticity of a packet
(e.g., at the AS level) and drop modiﬁed and injected trafﬁc. In
the strict sense, source authentication should detect replayed pack-
ets as well, since the actual source of a replayed packet is the en-
tity that injects the replayed packet. However, none of the source-
authentication schemes handle in-network replay detection explic-
itly; this raises the new class of attacks that we describe in this
section.
2.2 Execution
To launch a router-reﬂection attack against a target area, the adver-
sary proceeds in four stages: ﬁrst, she selects the set of hosts T and
V ; then, she computes the routing bottlenecks for the target area;
next, she identiﬁes candidate routers for compromise; and ﬁnally
she uses a compromised router to replay packets of speciﬁc ﬂows.
2.2.1
Stage 1: Selection of Host-Sets T and V
The adversary begins by selecting a set of public servers in a tar-
get area (set T ). Furthermore, she selects a set of nodes that are
geographically distributed across the globe and will act as vantage
points for the target area (set V ). Note that the hosts in V do not par-
ticipate in the attack and are not under the adversary’s control; they
are used only to map the target area. The set V can be constructed
using Looking Glass (LG) servers that are globally distributed. An
LG server is an Internet node that is accessed remotely (usually
through a web interface) and runs a limited number of commands
(e.g., traceroute and ping). For instance, CAIDA provides a list
with approximately 1500 LG servers located in 77 different coun-
tries and 268 different ASes [29].
2.2.2
Stage 2: Routing-Bottlenecks Computation
In order to compute the bottleneck links, the adversary constructs
a link-map that is centered at the target area and then computes
the ﬂow density for every link in the map. We brieﬂy present this
procedure, as it has been proposed in previous work [24].
Link-Map. To construct the link-map, the adversary performs
traceroutes from all vantage points (set V ) to all public servers in
the target area (set T ), which yields |V | · |T | distinct traces. A trace
consists of a sequence of IP addresses that belong to the interfaces
of the routers on the path. The IP addresses of two adjacent routers’
interfaces deﬁne a link. Thus, using all obtained traces, we get a
link-map centered at the target area.
The computed link-map includes unstable routes that must be
eliminated. In order to increase reliability and resource utilization,
routers are often conﬁgured to load-balance their trafﬁc over multi-
ple paths; e.g., using per-ﬂow or even per-packet policies [30, 31].
Thus, for the same source-destination pair, some links appear al-
ways in the traces— persistent links—and some do not—transient
links.1 The adversary eliminates transient links from the link-map,
as they do not qualify for candidate routing bottlenecks: it is un-
clear whether and under which conditions replayed trafﬁc can in-
deed reach a transient link.
Flow-Density. Given the link-map and the traces, the adversary
computes the ﬂow density for each persistent link, i.e., the num-
ber of ﬂows that traverse the link. A high ﬂow density for a link
means that it carries a large number of the generated traces and is
an indicative metric of the overall number of ﬂows as well.
Routing bottlenecks are determined by sorting the links in a de-
scending order of ﬂow density and then selecting the b highest
ranked links. Higher values of b mean that more links (and thus
more ﬂows) can be considered. However, attacking only a few
links is sufﬁcient to affect a large fraction of the inbound trafﬁc
and achieve the adversary’s goal.
2.2.3
Stage 3: Attack-Router Selection
In the third stage of the attack, the adversary discovers candidate
routers for compromise. The adversary will then try to compromise
routers that can target as many bottlenecks as possible.
Routers for outbound replay. The adversary discovers routers
that can replay outbound trafﬁc whose inbound responses will tra-
verse one or more bottlenecks.
To execute this step, the adversary performs traceroutes from
nodes in the target area to all hosts in V . The goal of the step
is to discover as many interfaces (and thus candidate routers) as
possible; thus, interfaces that perform load balancing are not elimi-
nated. Furthermore, the adversary must perform alias resolution for
the discovered interfaces, since the goal is to identify routers—not
links as in the inbound direction. Note that the adversary does not
control nodes in the target area, but there is a number of options to
perform this step. For example, she can use an LG server that is
located in the target area; or she can issue reverse traceroutes [32]
to hosts in V ; or use existing tools to discover the topology of an
ISP [33].
1The traceroute dataset for our experiments (See Section 2.3) con-
tains 2.3 million links, 44.6% of which are persistent.
Routers for inbound replay. For the simpler version of the attack,
the adversary uses the traceroutes from Stage 1. Using the traces
from V to T , the adversary locates the interfaces (and with alias
resolution the corresponding routers) that can replay packets and
target bottlenecks downstream.
Our evaluation (Section 2.3) follows the ﬁrst three stages of the
attack and demonstrates that candidate routers are in the order of
hundreds or thousands.
2.2.4
Stage 4: Packet Replay
In the ﬁnal stage, the adversary has compromised one or more of
the candidate routers and launches the attack. The adversary fol-
lows a similar procedure as in Stage 3, but this time using the
actual observed trafﬁc. For outbound trafﬁc, the adversary deter-
mines which ﬂows will result in responses that will traverse bot-
tleneck links and ensures that she is not on the inbound path. To
gain insight about the reverse path, she can use similar methods as
described in Stage 3 (e.g., LG servers and reverse traceroute). For
inbound trafﬁc, the adversary must determine which of the ﬂows
can be replayed in order to target a bottleneck link that is located
downstream. The adversary can simply traceroute to the destination
of the ﬂows and compare the traces with the bottlenecks computed
in Stage 1. In Section 2.4, we discuss more practical considerations
for launching the attack in both directions.
2.3 Experimental Results
In this section, we show that the router-reﬂection attack is practi-
cal; that is, we show that for a chosen target area there is an abun-
dance of candidate routers that can be compromised to attack rout-
ing bottlenecks. Our chosen target areas {Area1, Area2, Area3,
Area4} are a permutation of the alphabetically ordered list {Japan,
Rome, Seoul, Singapore}. We emphasize that the feasibility and
severity of the attack is not target-area speciﬁc since routing bot-
tlenecks are an elemental property of today’s Internet due to route-
cost minimization [23]; thus, our ﬁndings are not limited to the
above-mentioned areas.
In our experimental setup, we follow Stages 1-3 as described in
Section 2.2. For Stages 1-2, we use approximately 200 Planetlab
nodes as our vantage points, which are distributed in 34 different
countries and 97 different ASes. We choose 1000 public servers
in the target area using a public search engine with geolocation
properties.2 Furthermore, we vary the number b of links that we