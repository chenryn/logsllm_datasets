```
dl_and_move_plugin() {
  name="$1"
  curl -O $(curl -i -s "https://wordpress.org/plugins/$name/" | egrep -o "https://downloads.wordpress.org/plugin/[^']+")
  unzip -o "$name".*.zip -d $(pwd)/wp-content/plugins
}
```
现在我们已经有了这个函数，我们可以在文件末尾附近添加这些行，就在上面写着`chown –R www-data:www-data ..`的行:
```
dl_and_move_plugin "wp-super-cache"
dl_and_move_plugin "wp-mail-smtp"
```
将函数和函数调用放在底部——在`docker-entrypoint.sh`文件中，就在`exec`命令的上方。
我们将再次构建映像并启动一个容器，这样我们就可以验证一切是否如我们所愿:
```
docker build –t mod-wp:latest
```
这需要一段时间，当它准备好的时候，你可以启动一个 MySQL 容器和一个`mod-wp`容器:
```
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -d mysql
docker run --name some-wordpress --link some-mysql:mysql -d -p 80 mod-wp:latest
```
如果您收到一条错误消息，告诉您已经有一个同名的容器，要么移除带有`docker rm some-wordpress`的旧容器，要么为新容器使用另一个名称。
通过调用`docker ps`获取端口，在 WordPress 容器上查找绑定到端口`80`的端口。然后将网址加载到你的浏览器中。这次安装 WordPress，登录，进入插件页面，如下图截图所示:
![Plugin installation](img/00031.jpeg)
这看起来就像我们希望的那样！太好了。
让我们继续并激活并设置这些插件，只是为了验证它们是否工作。从 WP 邮件 SMTP 插件开始。我将使用我的 Gmail 帐户作为发件人，但您可以选择您想要的 SMTP。下面是 Gmail 的设置截图:
![Plugin installation](img/00032.jpeg)
从本页底部，您可以发送一封测试电子邮件。我强烈建议这样做，因为 Gmail 有时会阻止新的 SMTP 客户端。如果你收到一条错误消息说**请通过你的网络浏览器登录，然后再次尝试**，你已经触发了。在这种情况下，你很快就会收到一封来自谷歌的电子邮件，解释可疑的活动，并要求你通过几个步骤来使其工作。这很烦人，但这是件好事。
现在让我们进入 WP 超级缓存插件。从插件页面激活插件。在启用之前，我们必须转到**设置** | **永久链接**，检查**帖子名称**按钮，然后保存。
然后转到**设置** | **WP 超级缓存**。
点击上的**缓存，然后点击**更新状态**。现在点击**高级**选项卡，启用**mod _ 重写缓存**，如图所示:**
![Plugin installation](img/00033.jpeg)
向下滚动至**杂项**部分，勾选如下截图所示的框。如果你想知道所有这些复选框的确切作用，你可以参考插件的文档。
![Plugin installation](img/00034.jpeg)
保存后，您会在顶部看到一条通知，说您需要更新重写规则，如图所示:
![Plugin installation](img/00035.jpeg)
向下滚动页面，点击**更新 Mod _ 重写规则**按钮更新重写规则，如图所示:
![Plugin installation](img/00036.jpeg)
缓存插件的状态现在应该是绿色的，所有的设置都应该完成了。由于我们已经登录到这个网络浏览器，我们将不会收到缓存页面。知道这一点很重要，它的好处是你不必仅仅为了查看你网站的未缓存版本而禁用整个缓存插件。打开另一个网络浏览器(不仅仅是当前浏览器中的另一个窗口或选项卡，除非您使用的是匿名或私人模式)并转到您的 WordPress 实例。点击帖子上的**你好世界**标题。回到起始页。再次点击标题。感觉挺快的对吧？
要验证它是否有效，您可以在浏览器中打开开发工具。确保当开发工具打开时，浏览器中没有禁用缓存。点击**网络**选项卡上的，然后再次点击帖子的标题，然后检查该呼叫，如下图截图所示:
![Plugin installation](img/00037.jpeg)
这正是我们想要看到的。太好了。
# 让我们的改变持续下去
现在我们已经做出了我们的改变，我们想要创建我们自己的 Dockerfile 来构建在官方 WordPress 映像之上。
Dockerfile 应该是这样的:
```
FROM wordpress:latest
RUN apt-get update && apt-get install -y unzip && rm -r /var/lib/apt/lists/*
RUN touch /usr/local/etc/php/conf.d/upload-limit.ini \
 && echo "upload_max_filesize = 32M" >> /usr/local/etc/php/conf.d/upload-limit.ini \
 && echo "post_max_size = 32M" >> /usr/local/etc/php/conf.d/upload-limit.ini
RUN a2enmod expires headers
VOLUME /var/www/html
COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["apache2", "-DFOREGROUND"]
```
# 在 GitHub 上托管映像源
Docker 注册表中心非常支持从位桶和 GitHub 自动获取映像更新。你可以随便挑但是对于这本书，我会用 GitHub。这两项服务我都有账户，而且都很好。
![Hosting image sources on GitHub](img/00038.jpeg)
在 GitHub，创建一个名为`my-docker-images`的新的空存储库，如果你愿意的话，添加一个合适的许可证。
### 注
这本书不会讨论如何将 SSH 密钥添加到 GitHub 等等。这个网上有优秀指南。GitHub 在[https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/)有一个很棒的向导。
让我们创建一个分支，并将修改后的 Docker 映像的文件复制到其中。
在本地克隆存储库，以便您可以向其中添加文件。确保你不在你的`wordpress-master`目录内，但是在同一个层次上:
```
git clone PI:EMAIL:yourusername/my-docker-images.git
```
该命令的输出如下:
![Hosting image sources on GitHub](img/00039.jpeg)
我们将逐一执行这些命令:
```
cd my-docker-images
git checkout -b wordpress
git add .
git commit –m "Adding new files."
git push origin wordpress
```
转到你的 GitHub 页面，试着找到 WordPress 分支。
对于我们想要在 Docker 注册表中心创建和发布的每个新 Docker 映像，我们需要在这个 GitHub 存储库中创建一个新的分支。如果你有很多 Docker 映像，并且映像有很多版本，你可能想考虑一个不同的结构，但是对于这本书来说，这种方法会很棒！
![Hosting image sources on GitHub](img/00040.jpeg)
所有文件都已就位，您可以点击它们来验证内容是否符合我们的预期。
# 在 Docker 注册中心发布映像
如果您不是 Docker 注册表中心([https://hub.docker.com](https://hub.docker.com)的成员，现在是注册的时候了，这样您就可以在公共 Docker 存储库中发布您的映像，该存储库可以从任何地方访问。
## 自动化构建
当添加存储库时，您应该选择**自动构建**选项，以便您可以从 GitHub(或 Bitbucket)获取代码，如下图所示:
![Automated builds](img/00041.jpeg)
我们将连接我们的 GitHub 帐户，并选择我们刚刚创建并推送到`my-docker-images`的存储库。
我们将开始添加我们的 WordPress 映像，所以让我们在下一个屏幕上将存储库名称设置为`wordpress`。请务必正确输入此名称，因为它以后无法更改。
此时，我们将只为我们的映像使用一个标签——最新的**标签。确保来源:**类型**设置为**分支**，并输入`wordpress` 作为其名称。**
 **选择将此添加为公共存储库，并选中**激活的**复选框。这意味着，如果您在 GitHub 上对此推送任何更新，注册表 Hub 将自动将其拉出并发布其更改，如下图所示:
![Automated builds](img/00042.jpeg)
注册中心现在将拉你的分支，并试图建立你的 Docker 映像，以验证它的工作。您可以前往**构建细节**选项卡查看进度。由于这是官方的 WordPress 映像库，如果他们在构建服务器上缓存映像，速度应该会很快。如果没有，可能需要几分钟，因为 PHP 是从源代码编译的。
这显示在下面的截图中:
![Automated builds](img/00043.jpeg)
哇哦！我们刚刚在 Docker 注册表中心发布了一个映像，这意味着任何人都可以在其上获取和运行容器。图片发布后，状态将从**建筑**变为**完成**。
下一步将是我们自己实际拉动它，以验证它是否如预期那样工作:
```
docker pull oskarhane/wordpress
docker images
docker run --name mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -d mysql
docker run --name my-wordpress --link mysql:mysql -d -p 80 oskarhane/wordpress
docker ps
```
打开你的网络浏览器，前往你的新容器。您应该会看到 WordPress 设置页面。
# 总结
在这一章里，你学到了很多。大部分是关于修改 Dockerfile 和`ENTRYPOINT`文件，以便获得我们想要的 Docker 映像。Bash 知识和编程技巧非常方便，但由于所有这些大多是关于安装、移动文件和编辑设置文件，非常基础的知识就足够了。
GitHub 是托管 Docker 存储库的绝佳场所，并且很容易建立一个新的存储库来开始。Docker 注册中心接收你的 GitHub 库，让你选择一个分支。该分支将成为任何人都可以获取和使用的公共 Docker 映像的来源。
然而，一个问题出现了；我们的数据呢？它被困在这些 MySQL 和 WordPress 容器中。下一章将向您展示如何处理您的数据。**