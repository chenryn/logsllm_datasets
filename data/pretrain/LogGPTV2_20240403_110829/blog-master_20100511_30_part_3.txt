### PL/Python Enhancements
- **Array Parameter/Return Support**: Added support for array parameters and return values in PL/Python (Peter Eisentraut).
- **Domain to Base Type Mapping**: Improved the mapping of domains to Python base types in PL/Python (Peter Eisentraut).
- **Python 3 Support**: Added support for Python 3 in PL/Python. The new server-side language is called `plpython3u` (Peter Eisentraut).
- **Error Handling and Reporting**: Enhanced error location and exception reporting in PL/Python (Peter Eisentraut).

### Client Applications
#### psql
- **Variable and Identifier Escaping**: Properly escape psql variables and identifiers. For example, `:'var'` will be escaped as a literal string, and `:"var"` will be escaped as an SQL identifier (Pavel Stehule, Robert Haas).
- **UTF-8 Byte-Order Marker**: Ignore leading UTF-8-encoded Unicode byte-order markers in psql when the client encoding is UTF-8 (Itagaki Takahiro).
- **Single-Transaction Option**: Fixed the `--file --single-transaction` option to properly honor the single-transaction setting (Bruce Momjian).
- **Command-Line History**: Prevent overwriting of psql’s command-line history if two psql sessions are run simultaneously (Tom Lane).
- **Tab Completion**: Improved psql’s tab completion support (Itagaki Takahiro).
- **Display Improvements**:
  - **Unicode Line-Drawing Characters**: Allow psql to use fancy Unicode line-drawing characters via `\pset linestyle unicode` (Roger Leigh).
  - **Wrapped Columns**: Improved display of wrapped columns in psql. The previous format is available by using `\pset linestyle old-ascii` (Roger Leigh).
- **\d Commands**:
  - **Child Tables**: Show child tables that inherit from the specified parent. `\d` shows only the number of child tables, while `\d+` shows the names of all child tables (Damien Clochard).
  - **Index Definitions**: Show the definition of indexes in `\d index_name`, which is useful for expression indexes (Khee Chin).
  - **View Definition**: In psql, show the view definition only with `\d+`, not with `\d` (Peter Eisentraut).

#### pg_dump
- **Large Object Removal**: Have `pg_dump/pg_restore --clean` also remove large objects (Itagaki Takahiro).
- **Large Object Dumping**: Fixed `pg_dump` to properly dump large objects if `standard_conforming_strings` is enabled. Large object dumps now use hex format for output (Tom Lane).
- **Comments on Composite Types**: Allow `pg_dump` to dump comments attached to columns of composite types (Taro Minowa (Higepon)).
- **Version Information**: Have `pg_dump --verbose` output the `pg_dump` and server versions in text output mode. These were already present in custom output mode (Jim Cox, Tom).

#### pg_ctl
- **Boot-Time Safety**: Allowed `pg_ctl` to be safely used to start the postmaster at boot-time. Previously, the `pg_ctl` process could have been mistakenly identified as a running postmaster based on a stale postmaster lock file (Tom Lane).
- **Database Initialization**: Gave `pg_ctl` the ability to initialize the database (like `initdb`) (Zdenek Kotala).

### Development Tools
#### libpq
- **New Functions**: Added new functions `PQconnectdbParams()` and `PQconnectStartParams()` to allow a null-terminated array of connection options (Guillaume Lelarge).
- **Escape Functions**: Added `PQescapeLiteral()` and `PQescapeIdentifier()` to return appropriately quoted and escaped literal strings and identifiers (Robert Haas).
- **Service File Checking**: Added checking for a per-user service file (`~/.pg_service.conf`), which is checked before the site-wide service file (Peter Eisentraut).
- **Error Reporting**: Properly report an error if the specified `libpq` service cannot be found (Peter Eisentraut).
- **Password Warning**: Issue a warning if the `.pgpass`-retrieved password fails (Bruce Momjian).

#### ecpg
- **SQLDA Support**: Added SQL Descriptor Area (SQLDA) support to `ecpg` (Boszormenyi Zoltan).
- **DESCRIBE Statement**: Added the `DESCRIBE [OUTPUT]` statement to `ecpg` (Boszormenyi Zoltan).
- **Transaction Status**: Added an `ecpg` function to return the current transaction status (Bernd Helmle).
- **String Data Type**: Added the string data type in `ecpg` Informix-compatibility mode (Zoltan Boszormenyi).
- **Variable Names**: Allowed `ecpg` to use new and old variable names without restriction (Michael Meskes).
- **Non-SQL3 Data Types**: Made `ecpg` return zero for non-SQL3 data types (Michael Meskes). Previously, it returned the negative of the data type OID.

#### ecpg Cursors
- **Out-of-Scope Cursors**: Added out-of-scope cursor support in native mode, allowing `DECLARE` to use variables that are not in scope when `OPEN` is called (Boszormenyi Zoltan).
- **Dynamic Cursor Names**: Allowed dynamic `ecpg` cursor names (Boszormenyi Zoltan).
- **Noise Words**: Allowed `ecpg` to use noise words `FROM` and `IN` in `FETCH` and `MOVE` (Zoltan Boszormenyi).

### Build Options
- **Thread Safety**: Enabled client thread safety by default. Thread-safe builds can be disabled with `configure --disable-thread-safety` (Bruce Momjian).
- **OOM Killer**: Added a compile-time option to allow the Linux out-of-memory killer to kill backends. The new compile-time option `-DLINUX_OOM_ADJ=0` allows the killer to be enabled for postmaster children (Alex Hunsaker, Tom).
- **DocBook XSL Stylesheets**: Used DocBook XSL stylesheets for man page building (Peter Eisentraut).

#### Makefiles
- **New Targets**: Added new Makefile targets `world`, `install-world`, and `installcheck-world` (Andrew Dunstan). These are similar to the existing `all`, `install`, and `installcheck` targets but build HTML documentation, build and test `/contrib`, and test server-side languages and `ecpg`.
- **Data and Documentation Control**: Added data and documentation location control to PGXS Makefiles (Mark Cave-Ayland).
- **HTML Documentation**: Restructured the HTML documentation build Makefile rules (Peter Eisentraut).

#### New Requirements
- **Autoconf**: Required Autoconf 2.63 for building from source (Peter Eisentraut).
- **Flex**: Required Flex 2.5.31 or later to build from source (Tom Lane).
- **Perl**: Required Perl version 5.8 or greater to build the server from a CVS copy (John Naylor, Andrew).

#### Windows
- **64-bit Support**: Added support for compiling on 64-bit Windows and running in 64-bit mode, allowing for large shared memory sizes (Tsutomu Yamada, Magnus).
- **Visual Studio 2008**: Allowed server builds using Visual Studio 2008 (Magnus Hagander).
- **Multi-Processor Compilation**: Allowed multi-processor compilation using Microsoft Visual C (Magnus Hagander).

### Source Code
- **Documentation Directory**: Distributed documentation in a proper directory tree, rather than as tar archive files inside the main distribution tarball (Peter Eisentraut).
- **Reentrant Lexer**: Enabled the server lexer to be reentrant, needed for use of the lexer by PL/pgSQL (Tom Lane).
- **Memory Allocation Speed**: Improved the speed of memory allocation (Tom, Greg Stark).
- **System Columns**: Added system columns to better document the use of indexes for constraint enforcement (Tom Lane).
- **Signal Communication**: Allowed multiple actions to be communicated using the same operating system signal, improving backend communication as new features are added (Fujii Masao).
- **Test Coverage**: Improved source code test coverage, including `/contrib`, PL/Python, and PL/Perl (Peter, Andrew).
- **System Table Bootstrapping**: Removed the use of flat files for system table bootstrapping, improving performance when using millions of users and databases (Tom, Alvaro).
- **Translation**: Improved the ability to translate psql strings (Peter Eisentraut).
- **File Name Length**: Reduced the length of some file names so file paths are less than 100 characters, addressing issues with decompression programs (Tom Lane).
- **Input Requirements**: Tightened input requirements for int2 vector input (Caleb Welton).
- **Error Code**: Added a new `ERRCODE_INVALID_PASSWORD` SQLSTATE error code (Bruce Momjian).
- **Copyright Entries**: Properly removed the few remaining personal source code copyright entries (Bruce Momjian).

#### Feature Support
- **Bonjour API**: Used a more modern API for Bonjour, requiring OS X 10.3 or later (Tom Lane).
- **SuperH Architecture**: Added processor test-and-test lock support for the SuperH architecture (Nobuhiro Iwamatsu).
- **Inline Functions**: Allowed non-GCC compilers to use inline functions if they support them (Kurt Harriman).
- **64-bit Integer Support**: Removed support for platforms that don’t have a working 64-bit integer data type (Tom Lane).

#### Server Programming
- **C++ Functions**: Allowed the use of C++ functions in backend code, removing keyword conflicts (Kurt Harriman, Peter).
- **Aggregate Function Detection**: Added `AggCheckCallContext()` for detecting if a C function is being called as an aggregate (Hitoshi Harada).
- **Backend Macros**: Required `fastgetattr()` and `heap_getattr()` backend macros to use a non-NULL fourth argument (Robert Haas).

#### Server Hooks
- **Parser Hooks**: Added parser hooks to access column and parameter references in queries (Tom Lane).
- **Utility Command Control**: Added a hook so loadable modules can control utility commands (Itagaki Takahiro).
- **SPI and Cached Plans**: Allowed the calling of parser hooks from SPI and cached plans (Tom Lane).

#### Binary Upgrade Support
- **Relfilenode Preservation**: Added support for preservation of all relfilenodes during binary upgrades (Bruce Momjian).
- **OID Preservation**: Added support for binary upgrades to preserve `pg_type` and `pg_enum` OIDs, needed for user-defined composite types, arrays, and enums (Bruce Momjian).
- **Tablespace Directories**: Moved tablespace data directories into their own PostgreSQL version-specific subdirectory, simplifying binary upgrades (Bruce Momjian).

### Contrib
- **pgbench**:
  - **Multi-Threaded Option**: Added a multi-threaded option (`-j`) to `/contrib/pgbench` to allow multiple CPUs to be used for tests (Itagaki Takahiro).
  - **Meta Commands**: Added `\shell` and `\setshell` meta commands to `/contrib/pgbench` (Michael Paquier).
- **dict_xsyn**: Added new options `matchorig`, `matchsynonyms`, and `keepsynonyms` to `/contrib/dict_xsyn` (Sergey Karpov).
- **unaccent**: Added a full-text dictionary `/contrib/unaccent` to remove accents from tokens (Teodor Sigaev).
- **dblink**: Added `dblink_get_notify()` to `/contrib/dblink` to allow async notifications (Marcus Kempe).
- **hstore**: Greatly increased `/contrib/hstore`’s length limit and added btree and hash abilities for `GROUP BY` and `DISTINCT` operations. New functions and operators were also added (Andrew Gierth).
- **passwordcheck**: Added `/contrib/passwordcheck` to check the strength of assigned passwords. The module's source code should be modified to implement site-specific password policies (Laurenz Albe).
- **auto_explain**: Added query text to `/contrib/auto_explain` output (Andrew Dunstan).
- **pg_stat_statements**: Added buffer access counters to `/contrib/pg_stat_statements` (Itagaki Takahiro).
- **start-scripts/linux**: Updated `/contrib/start-scripts/linux` to use `/proc/self/oom_adj` to disable the Linux out-of-memory (OOM) killer (Alex Hunsaker, Tom).