Data Propagation—This relationship captures the propagation of
data items during the execution of a program. In our model, this
relationship is between two DFMs and represents the propagation
of data items across the tiers of a web application. For example,
consider a data value that is (cid:27)rst provided with a user action; then
the value is included in an HTTP request; and, (cid:27)nally, it is inserted
in a SQL query to be stored in the database.
Abstractions—Abstractions represent the link between an abstract
element and its concrete counterpart. Abstractions are an expedient
to reduce the complexity of a problem or to focus the analysis on
relevant parts. For example, abstractions remove variable parts such
as data values from SQL queries. The resulting abstract SQL query
is then compared with other abstract queries to group them. This
expedient is used by our model inference algorithms and we present
abstractions in Section 5.2.
Event Causality—This relationship can occur, for example, be-
tween a user click on a link and the resulting HTTP request. Our
sensors can establish this type of relationship.
Accepted Inputs—This relationship captures the connection be-
tween HTTP requests and state transitions. I(cid:29) HTTP requests cause
a transition, we say that the FSM accepts the HTTP request.
5.1.3 Graph Traversals. Graph traversals are the means to
retrieve information from property graphs. They allow querying
a graph based on nodes, edges, and properties. Deemon uses tra-
versals written in the Cypher query language [29], a graph query
language supported by popular graph databases such as Neo4j. The
Cypher language follows a declarative approach in which each
query describes what we want to retrieve and not how. The what
is speci(cid:27)ed with graph patterns, a description of a subgraph using
nodes, edges, labels, and properties. Deemon uses graph queries for
the creation of FSM and DFS (See Section 5.2) and to generate tests
for the detection of aCSRF (See Section 6).
For the sake of readability, we do not present the Cypher syntax
but a simpli(cid:27)ed notation that retains the declarative approach. We
use sets of nodes and edges to represent Cypher queries. For exam-
ple, a query Q can be de(cid:27)ned as all nodes n in the property graph
for which a given predicate p is true, i.e., Q = {n : p(n)}. In our
notation, the predicate p is the graph pattern. We use parametric
logic predicates for graph patterns. In the following, we present
elementary graph patterns that allow establishing a basic language
to operate with the property graph.
We start with an example to show elementary queries to retrieve
nodes and edges via labels. These queries are generic and are not
tied to our framework.
Example 5.1 (Elementary Queries). To create queries, we (cid:27)rst
de(cid:27)ne the graph pattern. Then, we use the predicate to de(cid:27)ne a set.
The (cid:27)rst elementary pattern is true i(cid:29) a node has a given label L:
LabelL(n) def:= “n : L”
Component
Node label(s)
FSM
State, StateTrans
DFM
Trace
Parse tree
Variable
Event
Root, NTerm, Term
Relationship(s)
trans−−−−→ t,
q
to−→ q,
t
accept
−−−−−→ q
t
v(cid:48) propagat
−−−−−−→ v(cid:48)(cid:48)
e(cid:48) next−−−→ e(cid:48)(cid:48)
child−−−→ m
n
Name
Data Flow Inform.
Data Propagation
Abstractions
Event Causality
Accepted Inputs
v : State
v1 : Variable
apt : Root
ae : Event
e1 : Event
st : StateTrans
−−−−−−→ pt : Root,
abstracts
−−−−−−→ e : Event
abstracts
−−−−−→ e2 : Event
causes
accepts
−−−−−→ pt : Root
Mapping into a Property Graph
has−−→ q : Variable
propag.
−−−−−→ v2 : Variable or t : Term
Table 1: List of nodes and edges for our models.
Table 2: List of relationships between models.
The second example pattern is true i(cid:29) a graph edge has a given
label R:
LabelR(n, m) def:= “e = (n, m) ∧ e : R”
These predicates can be used to de(cid:27)ne queries. For example, to (cid:27)nd
all nodes with label L we can write the following query:
Qlabel = {n : LabelL(n)}
As graph patterns may have more than one parameter, we can use
quanti(cid:27)ers (i.e., ∀ or ∃) to broaden or limit the scope of a query. For
example, consider the query to retrieve all nodes with an outgoing
edge R, we can use the following query:
Qout = {n : ∀m, LabelR(n, m)}
From these elementary patterns and queries, we create a basic
query language that can express elements of our models.
Example 5.2 (Queries for Models). Consider the example of re-
trieving the states of a FSM. First, we de(cid:27)ne a predicate for the
pattern, called State(q), that is de(cid:27)ned as LabelState(n). Then, we
use this pattern in a query that searches for all states q:
QStates
def:= {q : State(q)}
We create similar patterns for relationships. For example, with
reference to Figure 3, consider the graph pattern between the state
q0 and q1. We can call this pattern Trans(q0, t, q1) and we de(cid:27)ne it
as Labeltrans(q0, t) ∧ Labelto(t, q1).
In a similar way, we create patterns for all nodes and edges in
Table 1 and in Table 2. We also create patterns using properties.
For example, HTTPReq(pt) is a pattern for a Root node pt whose
property t = HttpReq. This gives us a basic language to operate
with our models.
The notation of these two examples adheres to the declarative ap-
proach followed by Cypher. The actual search of all nodes matching
the predicates used in the set de(cid:27)nition is performed by the query
processor. The query processor is a graph database component that
transforms declarative queries into a sequence of operations to
traverse the graph and search for all matching nodes.
5.2 Model Construction
After having presented the building blocks of our modeling ap-
proach, we present the construction of our model. The (cid:27)rst step of
the construction consists in importing traces and parse trees in the
property graph. Then, we use inference algorithms to create FSMs
and DFMs.
5.2.1 Importing Traces and Parse Trees. We import traces
and parse trees in the following order:
User Actions—We (cid:27)rst import user actions traces. For each ele-
ment of the trace, we create a node Event. If two events are consec-
utive in a trace, then we place an edge next between the two nodes.
Then, we parse the user action into the three main elements: the
type of action (e.g., mouse click or key stroke), the UI element on
which the action is performed (e.g., HTML element), and, if present,
the user input (e.g., username). Then, we connect the root node of
the parse tree to the trace node with a parses edge. To distinguish
user action events from other events (i.e., HTTP messages), we
add a node property t to UA which stands for user action. Finally,
we add a node property for the user performing these actions. For
example, if the user actions are performed by an administrator, we
add the property user = admin.
HTTP Messages—First, we import a trace as seen for user actions.
Second, for each HTTP message, we create parse trees for HTTP
requests, responses, URLs, cookies, HTTP POST data, and JSON
objects. We link the root with the event with a parses relationship.
Then, we link the HTTP messages to network events with parses
edges, and causes edges between user actions and HTTP request
events. The property t is set to HTTPReq. Finally, as described in
Section 4.3, Deemon reproduces user actions twice, thus generating
two HTTP message traces, i.e., sessions, which can be di(cid:29)erent due
to newly generated cookies or anti-CSRF tokens. When importing
traces, we add the trace session number as a node property.
Database Queries—We parse the call trees to extract calls to data-
base APIs and retrieve SQL queries. We add a parses relationship
between the parse trees and the trace event. Then, we add causality
edges between HTTP request events and the resulting query events.
Similarly as for HTTP messages, we add the trace session number
as a node property. Finally, the property t is set to SQL.
5.2.2 Finite-State Machines. After importing traces and cre-
ating parse trees, we construct the FSM.
Abstract Parse Trees—The rule to build a FSM is the following: A
state transition occurs when similar HTTP requests cause similar
SQL queries. Similarity between HTTP requests and queries is
achieved by the means of abstract parse trees, i.e., parse trees that
omit a few selected terminal nodes. For HTTP requests, we neglect
URL parameter values and POST data values. For SQL queries, we
neglect terminal nodes at the right-hand side of SQL comparison
operations. Figure 4 shows the parse tree of an HTTP request to
update a user password and an abstract parse tree in which terminal
HTTPReq
AbsHTTPReq
abstracts
(a) User action trace
POST
child
res
hdr.-list
body
POST
child
res
hdr.-list
body
child
SESSION
X4a
password
pwnd
child
SESSION
∅
password
∅
/change_pwd.php
/change_pwd.php
abstracts
AbsHTTPReq
abstracts
parses
HTTPReq’
HTTPReq”
parses
e(cid:48)
e(cid:48)(cid:48)
causes
causes
c(cid:48)
c(cid:48)(cid:48)
parses
SQL’
SQL”
parses
abstracts
AbsSQL
abstracts
(b) HTTP message trace
(c) DB queries trace
e1
next
e2
parses
parses
UserAction2
causes
UserAction1
child
pwnd
e(cid:48)
2
parses
Case 2
HTTPReq
causes
pwnd
child
e(cid:48)(cid:48)
2
parses
Case 1
SQL
child
pwnd
Figure 4: On top: abstract relationships between a parse tree
and an abstract one. Below: visualization of the graph pat-
tern to identify transitions.
Figure 5: Example of propagation along causality edges
(Case 1) and backward propagation chain (Case 1).
nodes were neglected. Abstract parse trees are unique. If two parse
trees result in the same abstract tree, we place two edges abstracts
from the abstract parse tree to the two parse trees.
Clustering—After the creation of abstract parse trees, we extract
HTTP requests triggering the same transition from the graph .
Figure 4 exempli(cid:27)es this situation, showing the roots of parse
trees and trace events. Two requests, e.g., the roots HTT PReq(cid:48) and
HTT PReq(cid:48)(cid:48), trigger the same transition if (i) the HTTP requests
have the same abstract parse tree, i.e., with root AbsHTT PReq, (ii)
the HTTP requests cause SQL queries, i.e., parse tree roots SQL(cid:48)
and SQL(cid:48)(cid:48), via a causality edge, and (iii) the SQL queries have the
same abstract parse tree, i.e., AbsSQL. HTTP requests matching
this description can be found with this query:
(cid:48)) : ∃e
(cid:48)
(cid:48)
, Abs(abs
, c
sql , sql
(cid:48))∧
(cid:48)
(cid:48)) ∧ Causes(e
, c
(cid:48)) ∧ Abs(abs
(cid:48)
sql , sql
, c
(cid:48)
(cid:48)
h, h
, abs
(cid:48)
Parses(h
, e
(cid:48)
Parses(sql
def:= {(abs
(cid:48))}
QAux
(cid:48)
(cid:48)
h, h
(cid:48))∧
This query returns a set of 4-tuples. For example, with reference to
Figure 4, this query returns two 4-tuples: the (cid:27)rst with AbsHTT PReq(cid:48),
HTT PReq(cid:48), AbsSQL(cid:48), and SQL(cid:48), and the second with AbsHTT PReq(cid:48)(cid:48),
HTT PReq(cid:48)(cid:48), AbsSQL(cid:48)(cid:48), SQL(cid:48)(cid:48). If we group these tuples by abstract
HTTP request and abstract SQL query, the resulting groups rep-
resent transitions satisfying our rule. The HTTP requests in each
group are the symbols causing the state transition.
FSM—To create a FSM, we create one state node for each edge next,
and a transition for each HTTP request. Then, we minimize the
FSM using the clustering algorithm [16].
5.2.3 Data(cid:30)ow Model and Information. Finally, we con-
struct the data (cid:30)ow model with types.
Variables—Variables are derived from terminal nodes in parse trees.
The terminal nodes are the same ones neglected in abstract parse
trees. The value of the variable is the symbol of the terminal node,
whereas the variable name is the path of the terminal node from
the root. Then, we link variables to states with an edge has.
2 to e(cid:48)(cid:48)
Data Propagation—After the creation of variable nodes, we recon-
struct the propagation of data values traversing application tiers.
Consider the example in Figure 5 which models a user changing
her password. The user types a new password pwnd via a user ac-
tion, i.e., e1. This user action is parsed by the parse tree with root
U serAction1. Then, the user submits the password (e2) which is
received by the server (e(cid:48)
2) in an HTTP request with root HTT PReq.
Finally, the server uses the password in a query (e(cid:48)(cid:48)
2 ) with root SQL.
In this example, we can distinguish two cases of data propagation.
In the (cid:27)rst case, the data item pwnd propagates along causality
edges, i.e., from e(cid:48)