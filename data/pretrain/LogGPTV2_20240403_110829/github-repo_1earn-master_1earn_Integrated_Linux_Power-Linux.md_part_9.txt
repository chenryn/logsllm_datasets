export TEMPLATE_NAME=General_Purpose.dbc
export CHARSET=ZHS16GBK
export PDB_NAME=ORA19CPDB
export CREATE_AS_CDB=true
```
复制参数文件
```bash
cd /etc/sysconfig/
cp oracledb_ORCLCDB-19c.conf  oracledb_ORA19C-19c.conf
/etc/init.d/oracledb_ORCLCDB-19c configure
# 等待 Oracle 数据库执行初始化操作即可
```
增加环境变量处理
```vim
vim /etc/profile.d/oracle19c.sh
export  ORACLE_HOME=/opt/oracle/product/19c/dbhome_1
export  PATH=$PATH:/opt/oracle/product/19c/dbhome_1/bin
export  ORACLE_SID=ORA19C
```
```
source /etc/profile.d/oracle19c.sh
```
```bash
# 修改 Oracle 用户的密码:
passwd oracle
# 使用 Oracle 登录进行相关的处理
su - oracle
sqlplus / as sysdba
# 查看 pdb 信息
show pdbs
# 修改密码
alter user system identified by Test1234;
# 启动
startup
exit
# 启动监听器
cd $ORACLE_HOME/bin
lsnrctl start
```
```
systemctl stop firewalld
systemctl disable firewalld
setenforce 0
```
使用 navicat 连接测试
默认 Oracle 数据库中的两个具有 DBA 权限的用户 Sys 和 System 的缺省密码是 manager。
![](../../../assets/img/Integrated/Linux/Power/1.png)
`注:我在 oracle-database-ee-19c-1.0-1.x86_64 环境下,使用 Navicat Premium 12.1.18 安装 instantclient-basic-windows.x64-12.1.0.2.0 可以成功连接`
**注 : 报错 ORA-03135**
把本机防火墙关掉,顺便看下数据库服务器防火墙有没有放行
**注 : 报错 ORA-28547:connection to server failed, probable Oracle Net admin error**
`oci.dll` 版本不对.因为 Navicat 是通过 Oracle 客户端连接 Oracle 服务器的,Oracle 的客户端分为两种,一种是标准版,一种是简洁版,即 Oracle Install Client.而我们用 Navicat 时通常会在自己的安装路径下包含多个版本的 OCI,如果使用 Navicat 连接 Oracle 服务器出现 ORA-28547 错误时,多数是因为 Navicat 本地的 OCI 版本与 Oracle 服务器服务器不符造成的.
OCI 下载地址 : https://www.oracle.com/database/technologies/instant-client/downloads.html ,解压 instantclient-basic-win-x64
打开 navicat,一次选择:工具->选项->环境-->OCI 环境,选择刚才解压好的 instantclient-basic-win-x64 目录中的 oci.dll 文件即可,重启 navicat
**注 : 报错 oracle library is not loaded**
还是 oci.dll 版本不对,换个低版本的 Instant Client 🤣
**注 : 报错 ORA-28040: No matching authentication protocol**
这个还是 oci.dll 版本不对,再换个高版本的 Instant Client 😂
**创建用户**
oracle 内部有两个默认的用户：`system` 和 `sys`。用户可直接登录到 `system` 用户以创建其他用户，因为 `system` 具有创建别的用户的权限。 在安装 oracle 时，用户或系统管理员首先可以为自己建立一个用户。
```
语法[创建用户]： create user 用户名 identified by 口令[即密码]；
例子： create user test identified by test;
语法[更改用户]: alter user 用户名 identified by 口令[改变的口令];
例子： alter user test identified by 123456;
```
> 注意 : 此处只是为了方便演示,生产环境下请不要使用类似 123456 这类弱口令
创建用户的时候用户名以 `c##` 或者 `C##` 开头即可。
```
错误写法：create user test identified by oracle;
正确写法：create user c##test identified by oracle;
```
**关闭**
```
su - oracle
sqlplus / as sysdba
shutdown
```
整个启动和关闭的过程都会记录在 alert 日志文件中。
**docker 部署**
```bash
# https://github.com/wnameless/docker-oracle-xe-11g
docker pull wnameless/oracle-xe-11g-r2
docker run -d -p 1521:1521 -e ORACLE_ALLOW_REMOTE=true wnameless/oracle-xe-11g-r2
# https://hub.docker.com/r/gvenzl/oracle-xe
docker pull gvenzl/oracle-xe:11
docker run -d -p 1521:1521 -e ORACLE_PASSWORD=123123123 gvenzl/oracle-xe:11
```
---
#### Mariadb
**官网**
- https://mariadb.org/
**安装**
- Centos下
  ```bash
  yum install -y mariadb mariadb-server
  ```
- Ubuntu下
  ```bash
  apt -y install mariadb-server mariadb-client
  ```
**数据库初始化**
```bash
systemctl start mariadb
mysql_secure_installation
```
|配置流程 	|说明 |操作|
|------------ | ------------- | ------------|
Enter current password for root (enter for none) |	输入 root 密码 	| 初次运行直接回车
Set root password? [Y/n] |	是设置 root 密码 |	可以 y 或者 回车
New password |	输入新密码
Re-enter new password |	再次输入新密码
Remove anonymous users? [Y/n] |	是否删除匿名用户 | 可以 y 或者回车 本次 y
Disallow root login remotely? [Y/n]  |	是否禁止 root 远程登录 |  可以 y 或者回车 本次 n
Remove test database and access to it? [Y/n]  |	是否删除 test 数据库 | y 或者回车 本次 y
Reload privilege tables now? [Y/n] | 是否重新加载权限表 | y 或者回车 本次 y
**配置远程访问**
Mariadb 数据库授权 root 用户能够远程访问
```bash
systemctl start mariadb
mysql -u root -p
select User, host from mysql.user;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY 'toor' WITH GRANT OPTION;
# 这句话的意思 ，允许任何 IP 地址（上面的 % 就是这个意思）的电脑 用 root 帐户 和密码 toor 来访问这个数据库
FLUSH PRIVILEGES;
exit
```
> 注意 : 此处只是为了方便演示,生产环境下请不要使用类似 toor 这类弱口令
- Centos下
  ```bash
  firewall-cmd --permanent --add-service=mysql
  firewall-cmd --reload
  systemctl enable mariadb
  systemctl restart mariadb
  ```
- Ubuntu下
  ```bash
  vim /etc/mysql/mariadb.conf.d/50-server.cnf
  # 注释掉 bind-address = 127.0.0.1 这一行
  systemctl restart mariadb
  ```
**重置密码**
```bash
# 先关服务
systemctl stop mariadb
# 用以下命令在没有权限检查的情况下重新启动数据库
mysqld_safe --skip-grant-tables &
# 这里, --skip-grant-tables 选项让你在没有密码和所有权限的情况下进行连接.如果使用此选项启动服务器,它还会启用 --skip-networking 选项,这用于防止其他客户端连接到数据库服务器.并且,& 符号用于在后台运行命令,因此你可以在以下步骤中输入其他命令.请注意,上述命令很危险,并且你的数据库会变得不安全.你应该只在短时间内运行此命令以重置密码.
# 接下来,以 root 用户身份登录 MySQL/MariaDB 服务器:
mysql
# 在 mysql > 或 MariaDB [(none)] > 提示符下,运行以下命令重置 root 用户密码:
UPDATE mysql.user SET Password=PASSWORD('NEW-PASSWORD') WHERE User='root';
# 使用你自己的密码替换上述命令中的 NEW-PASSWORD.
# 然后,输入以下命令退出 mysql 控制台.
FLUSH PRIVILEGES;
exit
# 最后,关闭之前使用 --skip-grant-tables 选项运行的数据库.为此,运行:
mysqladmin -u root -p shutdown
# 系统将要求你输入在上一步中设置的 MySQL/MariaDB 用户密码.
systemctl start mariadb
mysql -u root -p  # 本地连接
```
**连接远程数据库**
`mysql -u 用户名 -p密码 -h 服务器IP地址 -P 服务器端口号 -D 数据库名`
- 服务器端口标志 -P 一定要大些以区别于用户 -p,如果直接连接数据库标志 -D 也要大写；
- 如果要直接输入密码 -p 后面不能留有空格如 -pmypassword;
- 命令结束段没有';'分号。
例如 : `mysql -u root -p123456 -h 192.168.1.1 -P 3306 -D test`
**导入 .sql 文件**
```sql
mysql -u root -p
use [数据库]
source /tmp/dbname.sql
```
**docker 部署**
```bash
docker login
docker run -d -p 3306:3306 --name mariadb-test -e MYSQL_ROOT_PASSWORD=root1234 mariadb:latest
# 这里密码里不能带 !
```
---
#### MySQL
**官网**
- https://www.mysql.com
**安装**
和 Mariadb 差不多,看 Mariadb 的就行了
- Ubuntu
  ```
  apt install -y mysql-server mysql-client
  ```
- Centos
  ```bash
  yum install -y yum-utils
  wget https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm
  rpm -ivh mysql80-community-release-el7-1.noarch.rpm
  yum-config-manager --disable mysql80-community
  yum-config-manager --enable mysql57-community
  yum install -y mysql-community-server mysql-community-devel
  ```
**配置**
```bash
systemctl enable mysqld
# 初始化 mysql
/usr/bin/mysqld -initialize -basedir=/usr/share/mysql -datadir=/var/lib/mysql/data/
# 或
/usr/bin/mysql -initialize -basedir=/usr/share/mysql -datadir=/var/lib/mysql/data/
```
```bash
systemctl start mysqld
mysql -uroot -p
use mysql;
update user set authentication_string=password('123456') where user='root';
FLUSH PRIVILEGES;
exit
```
> 注意 : 此处只是为了方便演示,生产环境下请不要使用类似 123456 这类弱口令
my.cnf 配置文件内容见笔记 [mysql](./实验/mysql.md)
**配置远程连接**
```bash
mysql -u root -p
select User, host from mysql.user;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY '123456' WITH GRANT OPTION;
FLUSH PRIVILEGES;
exit
```
> 注意 : 此处只是为了方便演示,生产环境下请不要使用类似 123456 这类弱口令
```bash
firewall-cmd --permanent --add-service=mysql
firewall-cmd --reload
```
**远程访问报错 Table 'performance_schema.session_variables' doesn't exist**
```bash
mysql_upgrade -u root -p --force
systemctl restart mysqld
```
---
#### Postgresql
**官网**
- https://www.postgresql.org
**安装**
```bash
yum install -y postgresql-server
postgresql-setup initdb   # 初始化数据库
service postgresql start  # 启动服务
```
PostgreSQL 安装完成后,会建立一下 ‘postgres’ 用户,用于执行 PostgreSQL,数据库中也会建立一个 'postgres' 用户,默认密码为自动生成,需要在系统中改一下.
**修改用户密码**
```bash
sudo -u postgres psql postgres
\l                  # 查看当前的数据库列表
\password postgres  # 给 postgres 用户设置密码
\q                  # 退出数据库
```
**开启远程访问**
```vim
vim /var/lib/pgsql/data/postgresql.conf
listen_addresses='*'
```
```vim
vim /var/lib/pgsql/data/pg_hba.conf
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
host    all             all             0.0.0.0/0               md5
# 其中 0.0.0.0/0 表示运行任意 ip 地址访问.
# 若设置为 192.168.1.0/24 则表示允许来自 ip 为 192.168.1.0 ~ 192.168.1.255 之间的访问.
```
`service postgresql restart` 防火墙记得放行
---
### Document
#### MongoDB
**官网**
- https://www.mongodb.com/
**安装**
```vim
vim /etc/yum.repos.d/mongodb-org-4.0.repo
[mongodb-org-4.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc
```
```bash
yum install -y mongodb-org
```
**配置远程访问**
```vim
vim /etc/mongod.conf
# Listen to all ip address
bind_ip = 0.0.0.0
```
```bash
service mongod start
```
**创建管理员用户**
```sql
mongo
>use admin
 db.createUser(
  {
    user: "myUserAdmin",
    pwd: "abc123",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" }, "readWriteAnyDatabase" ]
  }
 )
> show dbs;	    # 查看数据库
> db.version();	# 查看数据库版本
```
**启用权限管理**
```vim
vim /etc/mongod.conf
#security
security:
authorization: enabled
```
```bash
service mongod restart
```
---
### Key-value
#### Redis