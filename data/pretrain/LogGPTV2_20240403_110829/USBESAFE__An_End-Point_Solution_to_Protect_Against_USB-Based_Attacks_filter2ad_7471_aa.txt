title:USBESAFE: An End-Point Solution to Protect Against USB-Based Attacks
author:Amin Kharraz and
Brandon L. Daley and
Graham Z. Baker and
William Robertson and
Engin Kirda
USBESAFE: An End-Point Solution to Protect Against USB-Based Attacks
Amin Kharraz†‡ Brandon L. Daley (cid:5)‡ Graham Z. Baker(cid:5) William Robertson‡ Engin Kirda‡
(cid:5)MIT Lincoln Laboratory
†University of Illinois at Urbana-Champaign
‡Northeastern University
Abstract
Targeted attacks via transient devices are not new. How-
ever, the introduction of BadUSB attacks has shifted the attack
paradigm tremendously. Such attacks embed malicious code
in device ﬁrmware and exploit the lack of access control in
the USB protocol. In this paper, we propose USBESAFE as a
mediator of the USB communication mechanism. By lever-
aging the insights from millions of USB packets, we propose
techniques to generate a protection model that can identify
covert USB attacks by distinguishing BadUSB devices as a
set of novel observations. Our results show that USBESAFE
works well in practice by achieving a true positive [TP] rate
of 95.7% with 0.21% false positives [FP] with latency as low
as three malicious USB packets on USB trafﬁc. We tested
USBESAFE by deploying the model at several end-points for
20 days and running multiple types of BadUSB-style attacks
with different levels of sophistication. Our analysis shows that
USBESAFE can detect a large number of mimicry attacks
without introducing any signiﬁcant changes to the standard
USB protocol or the underlying systems. The performance
evaluation also shows that USBESAFE is transparent to the
operating system, and imposes no discernible performance
overhead during the enumeration phase or USB communica-
tion compared to the unmodiﬁed Linux USB subsystem.
1
Introduction
Transient devices such as USB devices have long been used
as an attack vector. Most of these attacks rely on users who
unwittingly open their organizations to an internal attack. In-
stances of security breaches in recent years illustrate that
adversaries employ such devices to spread malware, take con-
trol of systems, and exﬁltrate information.
Most recently, researchers have shown that despite sev-
eral warnings that underscore the risk of malicious periph-
erals, users are still vulnerable to USB attacks [27, 28]. To
tackle this issue, antivirus software is becoming increasingly
adept at scanning USB storage for malware. The software
automatically scans removable devices including USB sticks,
memory cards, external hard drives, and even cameras after
being plugged into a machine. Unfortunately, bypassing such
checks is often not very difﬁcult as the ﬁrmware of USB de-
vices cannot be scanned by the host. In fact, the introduction
of BadUSB attacks has shifted the attack paradigm tremen-
dously as adversaries can easily hide their malicious code
in the ﬁrmware, allowing the device to take covert actions
on the host [9]. A USB ﬂash drive could register itself as
both a storage device and a Human Interface Device (HID)
such as a keyboard, enabling the ability to inject surreptitious
keystrokes to carry out malice.
Existing defenses against malicious USB devices have re-
sulted in improvements in protecting end-users, but these solu-
tions often require major changes in the current USB protocol
by introducing an access control mechanism [26], modify-
ing the certiﬁcate management [20], or changing the user
experience (i.e., a user-deﬁned policy infrastructure) [3, 24].
Our goal is different in a sense that we seek to improve the
security of USB devices while keeping the corresponding
protection mechanism completely in the background. The
immediate beneﬁt of such a solution is ﬂexibility, allowing:
(1) organizations to use standard devices, (2) manufacturers
to avoid changing how their hardware operates, and (3) users
to continue using their current USB devices.
In this paper, we propose USBESAFE, a system to identi-
fying BadUSB-style attacks, which are probably the most
prominent attack that exploits the USB protocol. Our ap-
proach relies upon analyzing how benign devices interact
with the host and the operating system. By leveraging the
insights from millions of USB Request Blocks (URBs) col-
lected over 14 months from a veriety of USB devices such as
keyboards, mouses, headsets, mass storage devices, and cam-
eras, we propose classiﬁcation techniques that can capture
how a benign USB device interacts with a host by monitoring
URBs as they traverse the bus. Starting with a wide range
of classiﬁcation features, we carefully analyze the labeled
data and narrow down to three feature categories: content-
based, timing-based, and type-based features. We train several
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 89different machine learning techniques including SVM [14],
Nearest Neighbor [13], and Cluster-based Techniques [12] to
ﬁnd the most accurate algorithm for building our detection
model. Our analysis showed that One-Class SVM achieved
the highest detection results with a low false positive rate (a
true positive [TP] rate of 95.7% with 0.21% false positives
[FPs]) on the labeled dataset. The constructed model allows
us to identify covert USB attacks by distinguishing BadUSB
devices as novel observations for the trained dataset.
To test USBESAFE, we deployed the constructed model
as a service on end-user machines for 20 days. Our analysis
shows that USBESAFE is successful in identifying several
forms of BadUSB attacks with a low false positive rate on
live, unknown USB trafﬁc. For a real-world deployment, we
also performed a training/re-training analysis to determine
how USBESAFE should be deployed on new machines to
keep the detection rate constantly high with under a 1% false
positive rate. We show that training USBESAFE with as low
as two training days and re-training it every 16 days for 82
seconds are sufﬁcient to maintain the detection rate over 93%
across all the machines.
The most important ﬁnding in this paper is practical ev-
idence that shows it is possible to develop models that can
explain the benign data in a very precise fashion. This makes
anomaly detection a promising direction to defend against
BadUSB-style attacks without performing any changes to
the standard USB protocol or underlying systems. We ran
multiple forms of adversarial scenarios to test USBESAFE’s
resilience to evasion with the assumption that adversaries have
signiﬁcant freedom to generate new forms of BadUSB-style
attacks to evade detection. Our analysis shows that USBE-
SAFE can successfully detect mimicry attacks with different
levels of sophistication without imposing a discernible per-
formance impact or changing the way users interact with the
operating system. We envision multiple potential deployment
models for USBESAFE. Our detection approach can be incor-
porated as a light-weight operating system service to identify
BadUSB attacks and disable the offending port or an early-
warning solution to automatically identify the attacks and
notify system administrators.
2 Background, Threat Model, and Related
Work
A Universal Serial Bus (USB) device can be a peripheral de-
vice such as a Human Interface Device (HID), printer, storage,
or a USB transceiver. An attached USB device can have mul-
tiple functionalities where each functionality is determined by
its interfaces. The host controller interacts independently with
these interfaces by loading a device driver for each interface.
When a USB device is attached, the USB controller in the
host issues a set of control requests to obtain the conﬁguration
parameters of the device in order to activate the supported
conﬁguration. The host parses the conﬁguration, and reads
the device descriptor which contains the information about
the functionality of device. This information allows the host
to load a driver based on the conﬁguration information. This
procedure is called enumeration phase. In the enumeration
phase of the USB protocol, the endpoints are addressed as IN
and OUT to manage the USB trafﬁc. The IN endpoint stores
the data coming to the host, and the OUT endpoint receives
the data from the host. After the enumeration phase, the host
loads the USB interfaces which allow a device to operate.
2.1 Threat Model
In our threat model, we assume that a connecting device can
report any capabilities to the bus, and the host machine trusts
the information that it receives from the device. Similar to
BadUSB attacks [9], an adversary can use this capability by
rewriting the ﬁrmware of an existing device to hide malware
in the code that communicates with a host. More speciﬁcally,
upon insertion into a host USB port, a mass storage device
– i.e., a USB ﬂash drive (with capabilities for Windows and
Linux) – covertly performs keyboard actions to open a com-
mand prompt, issue a shell command to download malicious
code from the Internet, and execute the downloaded malware.
We should mention that classic USB attacks, for example
using the autorun capabilities of USB devices to distribute
malware, are out of the scope of the paper as these attacks
can be detected by most of malware scanners. Similar to prior
work [24], we try to address the advanced persistent threat
(APT) scenario where an adversary is attempting to expand
its presence in a network by distributing USB devices with
malicious ﬁrmware as described above. We assume that the
malicious USB device is capable of generating new device
identities during the enumeration phase by providing varying
responses in each enumeration to evade potential device iden-
tiﬁcation mechanisms. We also assume that there exists no
USB-level authentication mechanism between the device and
the target host. The OS simply acts on information provided
by the device and will load a driver to accept the USB drive
as, e.g., an HID device. We assume that once the device has
been connected, the adversary can use any technique to ex-
pand her presence. For example, the malicious ﬁrmware can
open a command prompt to perform privilege escalation, exﬁl-
trate ﬁles, or copy itself for further propagation. Finally, in this
work, we also assume that the trusted computing base includes
the display module, OS kernel, and underlying software and
hardware stack. Therefore, we consider these components of
the system free of malicious code, and that normal user-based
access control prevents attackers from running malicious code
with superuser privileges.
2.2 Related Work
A wide range of attacks have been introduced via USB in-
cluding malware, data exﬁltration on removable storage [8,
16, 17, 22], and tampered device ﬁrmware [5, 9]. These cases
90          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationshow that defending against USB attacks is often not straight-
forward as these attacks can be tailored for many scenarios.
In the remainder of this section, we explore existing solutions
for this class of attack vector and their limitations.
One approach to defend against attacks involving subverted
ﬁrmware is to hardwire USB microcontrollers to only allow
ﬁrmware updates that are digitally signed by the manufac-
turer. Currently, the de facto technology to protect against
malicious data residing on and executing from a device exists
in IEEE Standard 1667 [20]. The standard seeks to create a
means for bidirectional authentication via an X.509 certiﬁcate
infrastructure between hosts and devices. Unfortunately, the
adoption of IEEE 1667 has been slow, and USB devices do
not possess any entity authentication mechanism as a means
of vouching for the safety of data residing on the device.
One of the ﬁrst research efforts to secure the USB protocol
was conducted by Bates et al. [4,15] where they measured the
timing characteristics during USB enumeration to infer char-
acteristics of host machines. Another class of work focuses
on proposing access control mechanisms on USB storage
devices [6, 19, 23, 30]. While these approaches can lead to
better defense mechanisms, recent studies [21,24] have shown
that these approaches are coarse and cannot distinguish be-
tween desired and undesired usage of a particular interface.
Very recently, Hernandez et al. [7] introduced FirmUSB, a
ﬁrmware analysis framework, to examine ﬁrmware images
using symbolic analysis techniques. By incorporating the
tool, the authors identiﬁed the malicious activity without any
source code analysis while decreasing the analysis time. In
fact, the proposed technique is very effective in addressing
some of the increasing concerns on the trustworthiness and
integrity of USB device ﬁrmwares.
One other approach to mitigating such attacks is to mini-
mize the attack surface without changing the fundamentals
of USB communication or patching major operating systems.
Recently, Tian et al. [24] have proposed GoodUSB which
has similar goals to ours. Their approach is based on con-
structing a policy engine that relies on virtualization and a
database that consists of already seen USB devices and report-
ing unknown USB devices to the user. The proposed solution
mediates the enumeration phase, and veriﬁes what the device
claims as its functionality by consulting to a policy engine.
GoodUSB shifts the burden of responsibility to the user to
decide whether a USB device is malicious or benign.
In another work, Tian et al. [26] proposed USBFilter, a
packet-driven access control mechanism for USB, which can
prevent unauthorized interfaces from connecting to the host
operating system. USBFilter traces individual USB packet,
and blocks unauthorized access to the device. Tian et al. [25]
complemented their previous work by introducing ProvUSB
which incorporated provenance-based data forensics and in-
tegrity assurance to defend against USB-based threats. Angel
et al. [3] uses a different approach and leverages virtualiza-
tion to achieve the same goal. We posit that a solution such
as the one described in this paper that introduces as little
change as possible to the user operational status quo is more
likely to prevent exploitation in practice, given that the un-
derlying detection mechanism is reliable. That being said,
these approaches are fundamentally orthogonal and could be
composed to obtain the beneﬁts of both.
3 Overview of The Approach
In this section, we provide more details on USBESAFE com-
ponents and the model we use to detect BadUSB attacks.
Figure 1 shows the pipeline used by USBESAFE to identify
BadUSB-style attacks.
Figure 1: A high level view of a USBeSafe-enabled machine.
3.1 System Design
The architecture of a USBESAFE-enhanced system requires
interactions among multiple components of the operating
system. In this section, we describe the abstract design of
USBESAFE, independent of the underlying OS. Later, we
will demonstrate how our design can be realized in a proto-
type running on Linux. USBESAFE’s components are mostly
managed by a user space daemon. The daemon includes three
main subsystems as shown in Figure 1: First, a lightweight
user space module that processes transaction ﬂows between
the host and the connected device; second, a detection module
that implements the USB mediator logic; and third, a user
interface that generates alerts and notiﬁes the user. When a
USB device is connected to the host (1), USBESAFE collects
and preprocesses the URBs (2). The protection engine utilizes
the preprocessed data to construct the feature vector, and test
whether the incoming USB packets are in fact new observa-
tions (3). In cases where the system detects a novel sequence
of USB packets, it creates a notiﬁcation, and sends an alert
HUBRoot HubHost ControllerDevice Class IdentifierEvent MonitorProtectionEngineNotification ModuleUSBeSafe SchedulerKernelUserHID deviceRogue HID Device1234USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 91to the user (4). In the following, we provide more details on
each proposed module.
3.1.1 USB Event Monitor
The ultimate goal of the event monitor is to analyze URBs
and transform them to an appropriate format that can be used
in the protection engine. To this end, the USB event moni-
tor detects a connected device, and processes the transaction
ﬂows in the form of URBs which contain USB packets during
a USB connection lifecycle from the enumeration, to con-
ﬁgured communication, to termination. To store and analyze
USB packets, we implemented a set of data objects. The mod-
ule parses each URB, extracts the USB packet, and generates
a TraceEvent containing the USB header information and
payload. In fact, each TraceEvent is a tuple that contains the
host bus ID as well as the assigned device ID on the bus. Each
TraceEvent, representing a single USB packet, is appended
to a Trace – a list of TraceEvents. USBESAFE generates a
single Trace ﬁle for each USB device from the enumeration
to disconnection phase of the connected device. TraceEvents
in each Trace are sorted according to their timestamp, from
earliest to most recent. For each Trace, we identify the de-
vice and conﬁguration descriptor responses, storing them as
auxiliary information for the Trace.
The root of the data structure is called the TraceLibrary