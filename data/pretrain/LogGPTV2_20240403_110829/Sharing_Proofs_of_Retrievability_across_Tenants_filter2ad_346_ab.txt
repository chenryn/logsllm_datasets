### Classical Single-Tenant Proof of Retrievability (POR) vs. Multi-Tenant POR

In the context of a single-tenant POR, when only one user is present, we do not integrate such a protocol into our model. Instead, we focus on the multi-tenant POR (MTPOR) which allows multiple users to verify the integrity of their files stored with a provider.

#### The POR Protocol

The primary goal of the POR protocol is to enable a user (or a verifier) to check if a file is still entirely stored by the provider. This verification process involves the following steps:

1. **User Verification**:
   - The user employs their personal secret key (`skU`), public key (`pkU`), and verification key (`vkU`) to verify the response sent by the provider.
   
2. **Provider Response**:
   - The provider uses the user's public key (`pkU`), the uploaded file, and the metadata to generate and send a response to the user.

3. **Output**:
   - The user outputs a Boolean value `dec ∈ {TRUE, FALSE}`. If `dec = TRUE`, the protocol run is accepted; otherwise, it is rejected.

Formally, the POR protocol can be represented as:
\[ \text{POR} : [U : skU, pkU, vkU; S : pkU, M, \text{Data}(M)] \rightarrow [U : vkU, dec] \]

It is important to note that in this protocol, the metadata maintained by the provider remains unmodified. However, the user may need to update their verification key `vkU`, which is why it is part of the local output.

#### Publicly-Verifiable vs. Privately-Verifiable MTPOR

- **Publicly-Verifiable MTPOR**: The POR protocol does not require the user's secret key `skU`. In such cases, verification can be outsourced to a third-party verifier `V`.
- **Privately-Verifiable MTPOR**: The POR protocol requires the user's secret key `skU` for verification.

### Correctness

We consider correctness from both the provider's and the user's perspectives:

1. **Provider Perspective**:
   - It is essential to ensure that if two honest users initiate the Store protocol with the same file, the same file is outsourced. This ensures correct and effective whole-file deduplication.

2. **User Perspective**:
   - Correctness means that if an honest user `U` uploads a file to an honest provider `S` and later runs the POR protocol, the user should accept. This must hold even if the provider has executed other Store protocol runs with different users, potentially changing the metadata. The POR protocol should still be successful, even if the metadata has changed since the initial upload.

Formally, we define evolvable metadata to capture this property:

- **Evolvable Metadata**: For a key pair `(sk, pk)`, a file `M`, and two metadata `Data` and `Data'`, the event `E = E(sk, pk, M, Data, Data')` denotes that running the Store protocol with inputs `sk, pk, M` on the user side and `Data` on the provider side results in the metadata being updated to `Data'`. We say `Data'` is evolvable from `Data` with respect to `(sk, pk, M)` if:
  \[ \Pr(E(sk, pk, M, Data, Data')) > 0 \]
  This is denoted as:
  \[ Data \xrightarrow{(sk, pk, M)} Data' \]

- **Multiple Executions**: We extend this notion to multiple executions of the Store protocol, where metadata can evolve through a series of updates. If there exist metadata `Data1, ..., Dataℓ` and key pairs `(sk1, pk1), ..., (skℓ, pkℓ)` such that:
  \[ Data \xrightarrow{(sk1, pk1, M)} Data1 \xrightarrow{(sk2, pk2, M)} ... \xrightarrow{(skℓ, pkℓ, M)} Data' \]
  We say `Data'` is evolvable from `Data`.

- **Correctness Definition**: An MTPOR scheme is correct if, with overwhelming probability in the security parameter, for any key pairs `(sk, pk)`, any file `M`, and any M-evolvable metadata `Data`, the following holds:
  - Consider a Store execution with inputs `sk, pk, M` and outputs `vk` and `Data'`.
  - For any metadata `Data''` such that `Data' M⇒ Data''`, and any protocol execution of POR with inputs `sk, pk, vk` (user side) and `M, Data''` (provider side), the user accepts at the end of the protocol run.

### Security

The security of MTPOR is similar to that of single-tenant POR, focusing on ensuring data retrievability. The main security concern is a dishonest provider `A` who aims to mislead the user by storing few or no parts of the file but still passing the POR protocol. Security is captured using the notion of an extractor, which ensures that if a provider can convince a user within the POR protocol, the file can be extracted from the provider.

- **Attacker Model**: The attacker can collude with one or several tenants, known as corrupted tenants, who are under the full control of the attacker. The attacker knows all their keys, including the verification key.

- **Security Game**:
  - **Setup-query**: A new honest user `U` is created, and a key pair `(skU, pkU)` is generated. The environment maintains a set `U` of all honest users.
  - **Store-query**: The adversary presents a user `U` and a file `M` to the environment. The environment checks if the user is honest and executes the Store protocol on behalf of the user.
  - **POR-query**: The attacker gives a user `U` and a file `M` to the environment. The environment checks if the user is honest and executes the POR protocol on behalf of the user.
  - **Corrupt-query**: The attacker hands a user `U` to the environment. If the user is honest, the environment provides the secret key `skU` and the set of verification keys `VKU` to the attacker and removes the user from the set `U`.

- **Soundness Definition**: An MTPOR is ε-sound if there exists an efficient extraction algorithm `Extr` such that, for every adversary `A`, whenever `A` outputs an ε-admissible cheating prover `P` for a file `M` and a user `U`, the extraction algorithm recovers `M` from `P` except with negligible probability. It is strongly ε-sound if this property holds in the presence of an adaptive attacker.

### Tag Sharing

To achieve storage efficiency, we introduce the concept of tag sharing in MTPOR. The goal is to make the storage consumed for storing the tags independent of the number of users.

- **Tag Sharing MTPOR**: An MTPOR achieves tag sharing if the size of the metadata `|Data(M)|` can be expressed as:
  \[ |Data(M)| = f(|M|) + g(k) \]
  where `f` and `g` are functions, `|M|` is the size of the file, and `k` is the number of users. The metadata is split into `Datafile` and `Datausers` such that:
  \[ |Datafile| = f(|M|) \quad \text{and} \quad |Datausers| = g(k) \]

- **Store Protocol Variant**: In a tag sharing MTPOR, the size of `Datafile` is independent of the number of users. Even if the number of users increases, the size of `Datafile` remains bounded by a function of `|M|`. This variant of the Store protocol is denoted as `Store*`.

By decoupling the storage efforts induced by the number of users and the file size, tag sharing MTPOR ensures efficient storage while maintaining the integrity and retrievability of the files.