乐系统、“智能”电视、室内气候控制系统、销售系统等设备中（这里只列举了一些常见设备）。
由于Android在众多类型的设备上运行，本章会尽可能介绍对这些设备的硬件进行攻击和逆向的
技术。
在传统的风险和威胁模型中，一般认为物理接触到设备就已经“游戏结束”了，因此威胁评
级较低。然面，许多情况下的“物理”技术也可以用于漏洞研究，从面发挥重大作用。例如，假
设可以连接到路由器或者交换机上一个未受保护的调试接口，只要访问得当，攻击者就可以籍此
任意寻找硬编码的加密密钥或者其他远程可利用漏润。可以物理接触到设备还意味看攻击者可以
取出其中的芯片进行逆向工程，其影响绝不仅仅是损失用于研究的几台设备而已。本章会介绍一
些简单的工具和技术，用于降低从硬件角度研究嵌人式设备安全性的入门门截。通过物理接触目
标设备并配合使用这些简单的技巧，既可以获得其中包含的软件代码，也可以通过硬件接口来攻
击这些软件。一且克服了硬件层面的困难，就可以再次使用许多基于软件的漏洞利用技术和逆
向技术，比如用反汇编器寻找固件中的漏洞，探索针对USB等硬件接口中数据传输的专有协议
解析器等。这些技术很简单，完全不需要深人核心的电子工程学领域。其中绝大部分技术相对来
说是被动形式的，比如调试、总线监控、设备模拟等；不过还是有少数技术会对目标设备产生轻
微的毁坏。
13.1设备的硬件接口
逆向工程人员或者漏洞研究人员首先要做的，是枚举能够通过哪些方式从物理层与目标设备
打交道。比如，该设备有没有任何暴露的接口，有没有用于USB设备或存储卡的接口或插座，
等等。本章稍后会讨论此类接口。本节关注打开设备外壳看到PCB板（印刷电路板）后可能见
到的一些东西，介绍设备常见硬件接口的基础知识，之后再进入具体示例和测试实例。
---
## Page 345
13.1设备的硬件接口
329
13.1.1UART串行接口
到目前为止，从嵌人式设备接收诊断和调试信息最常用到的是UART（通用异步收发器）接
口。UART串行接口一般实现了RS-232、RS-422、RS-485、EIA等通信标准中的个。不过这些
通信标准只定义了一些细节，比如信号的含义（不同的信号意味着开始传输、停止传输还是重置
连接等）。这些标准还规范了时序（数据传输速度应该有多快）等方面，有时定义了接头的尺寸
和含义。如果想了解各种不同的UART，了解这些非常古老面又有完整记录的标准，最好的途径
就是互联网。现在需要记住的是，这类接口在各种嵌入式设备中极为常见。
为什么UART如此普遍？因为它使用一种简单的方式直接从控制器和微处理器中接收数据，
不需要经过中间硬件。把中间硬件加入微处理器极其复杂，成本必然增加。图13-1展示了UART
接口如何直接与CPU相连
控制总线
CPU
地址总线
数财总线
x
串行数
图13-1UART串口直接与CPU相连
在显卡、键盘、鼠标、网卡等成为与计算机交互的主要方式之前，UART串口就已经出现了。
许多早期的计算机系统都没有键盘、鼠标、显示器和视频输出，唯一的控制接口就是串口，用户
可以将其与专用“哑终端”（例如Wyse）相连。在许多年里，UART串口都是使用计算机命令行
控制台的最常见途径。事实上，许多现代的Unix概念起源于这些早期事物。例如，Unix和Linux
的用户大多熟悉终端在TTY上运行的情况。这个词本身就来自那个古老的年代，当时操作Unix
系统的方式是通过串口将其与一台TeleTYpe打字机相连（因此缩写为TTY）。
UART串口有多种实现方法，最简单的情况下用三到四根连接线就够了。这样的简单性意味
着可以非常便宜而轻量地实现电路设计。因此，几乎在所有的嵌人式系统中都能找到UART接口，
它通常由OEM直接集成到SoC芯片中。
有些嵌人式系统（如机顶盒）的视频输出通常完全专用于上层用户界面，通常只有有限的用
户输入功能，比如专用遥控器。在这种情况下，面向最终市场的产品并没有为底层调试功能留下
多少空间。因此可以想象，对开发者来说隐藏在设备里的UART串口对于调试和诊断是多么有用。
事实上，绝大部分消费级产品都暴露并启用了这类接口。
13
---
## Page 346
330第13章硬件层的攻击
1.一个暴露的串口意味着什么？
通过一个暴露的申口直接与嵌入式操作系统打交道，与在芯片间的通信路径上拦截、查看、
寡改及生成数据有同样的后果：产生更多的攻击面。第5章中提到，攻击目标的攻击面数量直接
与该目标和其他系统、代码、设备、用户甚至自身其他组件的交互接口数量成正比。关注这些接
口可以拓宽对整个设备攻击面的理解。这一点也适用于运行其他系统的设备。
2. Android 和 Linux设备上暴露的 UART 串口
在基于Android的嵌人式系统中，经常能发现暴露的UART串口。连接好以后，可以通过它
直接访问底层操作系统。根据本书的讨论，最常用的Android交互方式是ADB。不过，许多暴露
了UART的Android嵌人式系统内核常在编译时加人这样编译选项：
CONFIG_SERIAL_MSM
CONFIG_SERIAL_MSM_CONSOL&
然后，诸如uBoot和X-Loader的bootloader还会通过下面这样的引导选项将串口配置参数传
违给内核：
console=ttyMSM2,115200n8*
此时，所有的 stdout、stderr和 debug 输出都会被定位到串口。如果设备中运行的是Android
或者标准的Linux，并且login是引导序列中的一步，还可以看到一个登录提示框。
注意虽然这些配置选项专门用于编译基于高通MSM芯片的Android，但是其他芯片在理念上
是一样的。
通过这些接口，可以观察到设备的启动过程、输出的调试和诊断信息（想想syslog或者
dmesg 的功能），甚至还能通过一个命令行shell与设备进行交互。图13-2就是一台机顶盒上的
UART引脚
图13-2机顶盒的引脚
---
## Page 347
13.1设备的硬件接口
331
将图13-2所示的引脚与电路板上恰当的引脚连接好以后，就可以获得设备中Android系统的
一个root权限shell。将这一技术用于另一个基于博通（Broadcom）的电缆调试解调器（有线电
视猫）时，暴露出的则是一个订制的实时操作系统。虽然博通的UART中没有交互式shell，但
是对其IP地址相关服务进行模糊测试时，UART中会显示栈回溯信息，可以将其反馈给模棚测
试流程。该设备的UART引I脚如图13-3所示。
图13-3Comcast 博通设备的引脚
这仅仅是我们研究中的两个简单例子。在许多其他的设备中都可以找到UART接口未受保护
的问题。互联网上有非常多基于UART接口暴露的博客文章和安全会议报告，比如femtocell、
OpenWRTLinksys路由器和碟形卫星天线的hack，以及电缆调制解调器的漏洞等。
那么，发现这些接口以后应该做什么？怎么判断每根引脚的用途？13.1.4节将介绍一些简单
的方法和工具来解决这些问题。现在还需要了解一些其他的常见接口，从而把它们区分开来。
13.1.2C、SPI和单总线接口
前面介绍的UART串口一般用于人与设备进行交互，而几乎所有的嵌入式设备都实现了一些
更为简单的串行协议。与UART不同，这些串行协议是为了满足电路中各个集成芯片互相通信的
需求。它们可以用极少的引脚（有时候甚至只需要一根）来实现，因此电路设计师可以在电路板
上实现类似于局域网的设计，让所有芯片能够互相通信。
这些简单的串行协议中，最常见的是I²C和SPI。I²C又写作I2C（读作“I平方C”），是集
成电路之间（Inter-Integrated Circuit）的缩写；SPI是串行外围接口（Serial Peripheral Interface）
总线：单总线（One-Wire或者1-Wire）的得名则源于它只需要一根电线或者一个引脚来提供电
---
## Page 348
332第13章硬件层的攻击
源与通信通道。
在继续讨论之前需要指出的是，在PCB板上，并不是任意两个元件之间的链路都可以承载
串行数据，这远没有想象中那么简单。许多集成芯片用一种非常古老的方式与其他芯片共享数据，
即简单地变化各个引脚的状态（通过相对高低的电压值和确定的规范标准来表示二进制的1和
一些引脚承载模拟信号，一些承载数字信号。因此，有时候需要清楚某个集成电路与外界通
信使用的具体协议。通常情况下，阅读这块集成电路的手册或者快速翻阅其引脚的规格说明书即
可（这样就进人了电子工程领域，超出了本书的范围）
不过事实上，由于这些串行协议极为普遍，很少需要了解深层细节。实现这些申行协议的复
杂性远低于UART，因此可以低成本地集成到几乎所有类型的集成电路中，通过几根引脚输出数
据。在真实世界里，可以在实现各种功能的集成芯片中找到它们，包括：
口倾斜/运动传感器（加速马达）
排口
口步进电机
口舵机
口稳压器
A/D（模拟信号到数字信号）转换器
口温度传感器
口数据存储芯片（EEPROM）
口LCD/LED显示屏
口GPS接收器
每个制造商都希望其生产的集成电路易于交互，因此IC和SPI成为了简单数字通信的事实
标准。例如，任天堂的Wi控制器使用rC进行串行通信，用在连接控制器与游戏主机的线缆上。
在大部分笔记本电脑中，电池也是通过SPI和IPC向笔记本系统的软件报告剩余的电量。在笔记
本电脑里，温度调节、电池状态及输出等逻辑通常都以软件的方式实现，这些软件走PC总线
来控制电池。
每根VGA、DVI和HDMI线及其要连接的设备上都有专门的IC引I脚，用于在设备与显卡
之间建立基本的通信信道。图13-4给出了常见VGA、HDMI和DVI控制器中的IPC接口。
将一台新的显示器插人计算机时，主机能准确了解到显示器的厂商和型号，就是因为它从视
频线缆中两根专用的rC引脚里收到了显示器发来的信息。
就连MicroSD卡和SD卡也通过一根SPI串行总线来传输所有的数据！是的，存储卡通过SPI
这种简单、可扩展的老式串行协议与计算机对话。图13-5给出了在MicroSD和SD卡接口中实
现SPI通信的具体引脚。
---
## Page 349
13.1设备的硬件接口
333
VGA:
DVI:
01口1
1718192021222324
HDMI:
1513119
+5V
数据引解
接地引脚时钟引脚
图 13-4 VGA、DVI 和 HDMI 中的 I°C引脚
DATI
图 13-5MicroSD卡和 SD卡中使用的 SPI
---
## Page 350
334第13章硬件层的攻击
通过这些简单的示例，相信你已经意识到这些串行协议到底有多么普遍了。有一个例子也许
和本书主题最为相关：智能手机的应用处理器与基带处理器之间也普遍使用rC通信。事实上，
通过噢探这条IC总线中传输的数据，GeorgeHotz（又名GeoHot）才能开发出对iPhone的第一
个越狱：通过噢探MacBook电池中内建的电量控制器经1C收到的数据，CharlieMiller博士才能
对其进行逆向工程，了解萃果笔记本控制电量的原理。
13.1.3JTAG
在信息安全领域，JITAG这个热词似乎具有丰富的含义。许多人都在并不了解这个词真实含
义的情况下随意使用过它，因为它的概念看起来真的非常简单：只是通过另外一台计算机调试芯
片的一种方法面已。然而，真实情况可能与想象中的有所不同。
前面已经介绍了集成电路如何使用简单串行协议相互通信或与外设通信。我们还了解到，开
发者经常使用这些串口与操作系统和boouloader进行交互，或者接收调试输出信息。这些交互和
输出当然很有用，但嵌人式开发者还需要另一个非常重要的功能：调试。
使用UART的前提是在目标设备中运行用于实现交互式接口（比如shell或交互式bootloader）
的专门代码。嵌人式开发者应该怎样了解处理器未执行任何代码时的状态，尤其是在其尚未执行
特定代码或者暂停执行时？在嵌入式系统中，这并不仅仅是安装一个软件调试器那么简单。比如，
如果被调试设备运行的是一个实时操作系统，其中没有用户态空间和多进程等概念，应该怎么
办？如果被调试目标运行的是一个实时操作系统或者裸机执行文件，只有一个单独的执行文件镜
像在运行，那么就只有一种选择：使用像JTAG这样的硬件调试接口。
JTAG的相关标准和规范已经超出了本章的讨论范围，不过还是需要进行说明。JTAG对应的
是 IEEE 1149.1号标准“Standard Test Access Port and Boundary Scan Architecture”。该标准来自
个名为“联合测试行动小组”（JointTestActionGroup）的组织，由OEM和开发者团体共同组成。
JTAG以这个组织命名，而非该标准。
这里需要记住一个很重要的细节，它可以消除对这个技术的误解和滥用：JTAG是一个定义
规范的标准，但是并未规定应该怎样实现软件调试。开发者和信息安全社区经常使用这个词但
对其理解甚少。只有认识准确，开发者和研究人员才能用它有效地调试嵌入式软件，找到其中
的漏洞。
1.JTAG的神话
对JTAG最大的误解是认为它对软件调试部分进行了高度标准化。事实上，这个标准只定义
执行”，面是一个电子工程场景下的概念：了解所有的芯片是否都已经就位，检查不同芯片的引
脚状态，甚至提供逻辑分析仪的基本功能。这些电子工程意义上的底层调试能力为高层软件调试
功能提供了能力支持，下面进行解释。