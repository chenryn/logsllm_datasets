title:Using SMT solvers to automate design tasks for encryption and signature
schemes
author:Joseph A. Akinyele and
Matthew Green and
Susan Hohenberger
Using SMT Solvers to Automate Design Tasks
for Encryption and Signature Schemes
Joseph A. Akinyele∗
Johns Hopkins University
PI:EMAIL
Baltimore, MD, USA
Matthew Green†
Johns Hopkins University
PI:EMAIL
Baltimore, MD, USA
Susan Hohenberger‡
Johns Hopkins University
Baltimore, MD, USA
PI:EMAIL
ABSTRACT
Cryptographic design tasks are primarily performed by hand
today. Shifting more of this burden to computers could make
the design process faster, more accurate and less expensive.
In this work, we investigate tools for programmatically alter-
ing existing cryptographic constructions to reﬂect particular
design goals. Our techniques enhance both security and ef-
ﬁciency with the assistance of advanced tools including Sat-
isﬁability Modulo Theories (SMT) solvers.
Speciﬁcally, we propose two complementary tools, Au-
toGroup and AutoStrong. AutoGroup converts a pairing-
based encryption or signature scheme written in (simple)
symmetric group notation into a speciﬁc instantiation in the
more eﬃcient, asymmetric setting. Some existing symmet-
ric schemes have hundreds of possible asymmetric transla-
tions, and this tool allows the user to optimize the construc-
tion according to a variety of metrics, such as ciphertext
size, key size or computation time. The AutoStrong tool
focuses on the security of digital signature schemes by auto-
matically converting an existentially unforgeable signature
scheme into a strongly unforgeable one. The main technical
challenge here is to automate the “partitioned” check, which
allows a highly-eﬃcient transformation.
These tools integrate with and complement the Auto-
Batch tool (ACM CCS 2012), but also push forward on the
∗Joseph A. Akinyele’s work was supported in part by Na-
tional Science Foundation (NSF) grant CNS-1154035.
†Matthew Green’s work was supported in part by the De-
fense Advanced Research Projects Agency (DARPA) and
the Air Force Research Laboratory (AFRL) under contract
FA8750-11-2-0211 and the Oﬃce of Naval Research (ONR)
contract N00014-11-1-0470.
‡Susan Hohenberger’s work was supported in part by NSF
CNS-1154035 and CNS-1228443; the DARPA and the AFRL
under contract FA8750-11-2-0211, DARPA N11AP20006,
the ONR under contract N00014-11-1-0470, and a Microsoft
Faculty Fellowship. Applying to all authors, the views ex-
pressed are those of the author(s) and do not reﬂect the
oﬃcial policy or position of the Department of Defense, the
NSF, or the U.S. Government.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Gernany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516718.
complexity of the automation tasks by harnessing the power
of SMT solvers. Our experiments demonstrate that the two
design tasks studied can be performed automatically in a
matter of seconds.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Cryptographic controls,
Authentication, Access controls, Veriﬁcation
Keywords
Digital Signatures, Public-Key Encryption, Pairing-Based
Cryptography, Automation, Cryptographic Compilers
1.
INTRODUCTION
Cryptographic design is challenging, time consuming and
mostly performed by hand. A natural question to ask is:
to what extent can computers ease this burden? Which
common design tasks can computers execute faster, more
accurately or less expensively?
In particular, this work investigates tools for programmat-
ically altering existing cryptographic constructions in order
to enhance eﬃciency or security design goals. For instance,
digital signatures, which are critical for authenticating data
in a variety of settings, ranging from sensor networks to soft-
ware updates, come in many possible variations based on ef-
ﬁciency, functionality or security. Unfortunately, it is often
infeasible or tedious for humans to document each possible
optimal variation for each application.
It would be enor-
mously valuable if there could be a small number of simple
ways to present a scheme – as simple as possible to avoid
human-error in the design and/or veriﬁcation process – and
then computers could securely provide any variation that
may be required by practitioners.
A simple, motivating example (which we explore in this
work) is the design of pairing-based signature schemes, which
are often presented in a simple “symmetric” group setting
that aids in exposition, but does not map to the speciﬁc
pairing-based groups that maximize eﬃciency. Addressing
this disconnect is ripe for an automated tool.
Summary of Our Contributions In this work, we ex-
plore two novel types of design problems for pairing-based
cryptographic schemes. The ﬁrst tool (AutoGroup) deals
with eﬃciency, while the second (AutoStrong) deals with
security. We illustrate how they interact in Figure 1. The
tools take a Scheme Description Language (SDL) represen-
tation of a scheme (and optionally some user optimization
399Figure 1: A high-level presentation of the new automated tools, AutoGroup and AutoStrong. They take as
input a Scheme Description Language (SDL) representation of a cryptographic scheme and output an SDL
representation of a transformation of the scheme, which can possibly be further transformed by another tool.
These tools are compatible with the existing AutoBatch tool and Code Generator (shaded). An SDL input
to the Code Generator produces a software implementation of the scheme in either C++ or Python.
constraints) and output an SDL representation of the altered
scheme. This SDL output can be run through another tool
or a Code Generator to produce C++ or Python software.
A contribution of this work is that we integrated our tools
with the publicly-available source code for AutoBatch [3, 4]
of Akinyele et al. (ACM CCS 2012), a tool that automati-
cally identiﬁes a batch veriﬁcation algorithm for a given sig-
nature scheme, therein weaving together a larger automa-
tion system. For instance, a practitioner could take any
symmetric-pairing signature scheme from the literature, use
AutoGroup to reduce its bandwidth in the asymmetric set-
ting, use AutoBatch to reduce its veriﬁcation time, and then
automatically obtain a C++ implementation of the opti-
mized construction. Our work appears unique in that we
apply advanced tools, such as SMT solvers and Mathemat-
ica, to perform complex design tasks related to pairing-based
schemes.
Automated Task 1: Optimize Eﬃciency of an En-
cryption or Signature Scheme via User Constraints.
Pairings are often studied because they can realize new func-
tionalities, e.g., [17, 19], or oﬀer low-bandwidth solutions,
e.g., [17, 21]. Pairing (a.k.a., bilinear) groups consist of
three groups G1, G2, GT with an eﬃcient bilinear map e :
G1 × G2 → GT . Many protocols are presented in a symmet-
ric setting where G1 = G2 (or equivalently, there exists an
eﬃcient isomorphism from G1 to G2 or vice versa).
While symmetric groups simplify the description of new
cryptographic schemes, the corresponding groups are rarely
the most eﬃcient setting for implementation [32]. The state
of the art is to use asymmetric groups where G1 (cid:54)= G2 and
no eﬃcient isomorphism exists between the two. See for
instance the work of Ramanna, Chatterjee and Sarkar [50]
(PKC 2012) which translates the dual system encryption
scheme of Waters [57] from the symmetric to a handful of
asymmetric settings.
Such conversions currently require manual analysis (of all
steps) – made diﬃcult by the fact that certain operations
such as group hash functions only operate in a single group.
Moreover, in some cases, there are hundreds of possible sym-
metric to asymmetric translations, making it tedious to iden-
tify the optimal translation for a particular application.
We propose a tool called AutoGroup that automatically
provides a “basic” translation from symmetric to asymmetric
groups.1 It employs an SMT solver to identify valid group
1By ”basic”, we mean that it translates the scheme as writ-
ten into the asymmetric setting, with minor optimizations
performed, but does not attempt a re-imagining of the con-
assignments for all group elements and also accepts user con-
straints to optimize the eﬃciency of the scheme according
to a variety of metrics, including signature/ciphertext size,
signing/encryption time, and public parameter size. The
tool is able to enumerate the full set of possible solutions
(which may run to the hundreds), and can rapidly identify
the most eﬃcient solution.
Automated Task 2: Strengthen the Security of a
Digital Signature Scheme. Most signature schemes are
presented under the classic, existential unforgeability deﬁni-
tion [35], wherein an adversary cannot produce a signature
on a “new” message. However, strong unforgeability guar-
antees more – that the adversary cannot produce a “new”
signature even on a previously signed message. Strongly-
unforgeable signatures are often used as a building block in
signcryption [6], chosen-ciphertext secure encryption [25,28]
and group signatures [7, 18].
There are a number of general transformations from clas-
sic to strong security [14, 15, 37, 53–55], but also a highly-
eﬃcient transformation due to Boneh, Shen and Waters [22]
that only applies to “partitioned” schemes. We propose a
tool called AutoStrong that automatically decides whether
a scheme is “partitioned” and then applies BSW if it is and
a general transformation otherwise. The partitioned test
is non-trivial, and our tool harnesses the power of both
an SMT solver and Mathematica to make this determina-
tion. We are careful to err only on false negatives (which
impact eﬃciency), but not false positives (which could com-
promise security.) Earlier works [14, 15] claimed that there
were “very few” examples of partitioned schemes; however,
our tool proved this was not the case by identifying valid
partitions for most schemes we tested.
1.1 Related Work
Many exciting works have studied how to automate var-
ious cryptographic tasks. Automation has been introduced
into the design process for various security protocols [38,
40, 49, 52], optimizations to software implementations in-
volving elliptic-curves [10] and bilinear-map functions [48],
the batch veriﬁcation of digital signature schemes [4], se-
cure two-party computation [36, 41, 42], and zero-knowledge
proofs [5, 8, 9, 23, 43].
struction based on a stronger asymmetric complexity as-
sumption. While the latter is sometimes possible, e.g., [50],
it may not be required in some applications and the novel se-
curity analysis required places it beyond the current ability
of our automation tools. See Section 3.3 for more.
Start: SDL ofScheme SSDL ofScheme S'Apply more transformations?AutoGroup(sym-to-asym groups)AutoStrong(increase security)AutoBatch(batch veriﬁcation)C++ or PythonCode Generatoryesno400Our current work is most closely related to the AutoBatch
tool of Akinyele et al. [4]. We borrow our tool-naming sys-
tem from their paper and designed our tools so that they
can integrate with the publicly-available source code of Au-
toBatch [3] to form a larger, more comprehensive solution.
This work is diﬀerent from AutoBatch in that it attacks new,
more complicated design tasks and integrates external SMT
solvers and Mathematica to ﬁnd its solutions.
Prior work on automating the writing and veriﬁcation of
cryptographic proofs, such as the EasyCrypt work of Barthe
et al. [13], are complimentary to but distinct from our eﬀort.
Their goal was automating the construction and veriﬁcation
of (game-based) cryptographic proofs. Our goal is automat-
ing the construction of cryptographic schemes. A system
that combines both to automate the design of a scheme and
then automate its security analysis would be optimal.
2. TOOLS USED
Our automations make use of three external tools. First,
Z3 [26, 46] is a freely-available, state-of-the-art and highly
eﬃcient Satisﬁability Modulo Theories (SMT) solver pro-
duced by Microsoft Research. SMT is a generalization of
boolean satisﬁability (SAT) solving, which determines whether
assignments exist for boolean variables in a given logical
formula that evaluates the formula to true. SMT solvers
builds on SAT to support many rich ﬁrst-order theories such
as equality reasoning, arithmetic, and arrays. In practice,
SMT solvers have been used to solve a number of constraint-
satisfaction problems and are receiving increased attention
in applications such as software veriﬁcation, program anal-
ysis, and testing. Z3 in particular has been used as a core
building block in API design tools such as Spec#/Boogie [11,
27] and in verifying C compilers such as VCC.
We leverage Z3 v4.3.1 to perform reasoning over state-
ments involving arithmetic, quantiﬁers, and uninterpreted
functions. We use Z3’s theories for equality reasoning com-
bined with the decision procedures for linear arithmetic ex-
pressions and elimination of universal quantiﬁers (e.g., ∀x)
over linear arithmetic. Z3 includes support for uninterpreted
(or free) functions which allow any interpretation consistent
with the constraints over free functions and variables.
Second, we utilize the development platform provided by
Wolfram Research’s Mathematica [59] (version 9), which al-
lows us to simplify equations for several of our analytical
techniques. We leverage Mathematica in our automation to
validate that given cryptographic algorithms have certain
mathematical properties. Finally, we utilize some of the
publicly-available source code of the AutoBatch tool [3], in-
cluding its Scheme Description Language (SDL) parser and
its Code Generator, which translates an SDL representation
to C++ or Python.
3. AUTOGROUP
In this section, we present and evaluate a tool, called Au-
toGroup, for automatically altering a cryptographic scheme’s
algebraic setting to optimize for eﬃciency.
3.1 Background on Pairing Groups
Let G1, G2, GT be algebraic groups of prime order p.2
We say that e : G1 × G2 → GT is a pairing (a.k.a., bi-
2Pairing groups may also have composite order, but we will
be focusing on the more eﬃcient prime order setting here.
linear map) if it is: eﬃciently-computable, (bilinear) for all
g ∈ G1, h ∈ G2 and a, b ← Zp, e(ga, hb) = e(g, h)ab; and
(non-degenerate) if g generates G1 and h generates G2, then
e(g, h) (cid:54)= 1. This is called the asymmetric setting. A spe-
cialized case is the symmetric setting, where G1 = G2.3
In practice, all eﬃcient candidate constructions for pairing
groups are constructed such that G1 and G2 are groups of
points on some elliptic curve E, and GT is a subgroup of a
multiplicative group over a related ﬁnite ﬁeld. The group of
points on E deﬁned over Fp is written as E(Fp). Usually G1
is a subgroup of E(Fp), G2 is a subgroup of E(F
pk ) where k
is the embedding degree, and GT is a subgroup of F∗
pk . In
the symmetric case G1 = G2 is usually a subgroup of E(Fp).
The challenge in selecting pairing groups is to identify
parameters such that the size of GT provides acceptable se-
curity against the MOV attack [44]. Hence the size of pk
must be comparable to that of an RSA modulus to provide
the same level of security – hence elements of F
pk must be of
size approximately 3,072 bits to provide security at the 128-
bit symmetric equivalent level. The group order q must also
be large enough to resist the Pollard-ρ attack on discrete
logarithms, which means in this example q ≥ 256.
Two common candidates for implementing pairing-based
constructions are supersingular curves [31, 47] in which the
embedding degree k is ≤ 6 and typically smaller (an example
is |p| = 1536 for the 128-bit security level at k = 2), or ordi-
nary curves such as MNT or Barreto-Naehrig (BN) [12]. In
BN curves in particular, the embedding degree k = 12, thus
|p| = |q| can be as small as 256 bits at the 128-bit security
level, with a corresponding speedup in ﬁeld operations.