In the following sections, I’ll examine how .NET and Java applications are packaged.
I’ll also demonstrate a few tools you can use to reverse engineer .NET and Java
applications efficiently.
.NET Applications
The .NET runtime environment is called the common language runtime (CLR). A .NET
application relies on the CLR as well as a large library of basic functionality called the base
class library (BCL).
Although .NET is primarily a Microsoft Windows platform (it is developed by
Microsoft after all), a number of other, more portable versions are available. The best
known is the Mono Project, which runs on Unix-like systems and covers a wide range of
CPU architectures, including SPARC and MIPS.
If you look at the files distributed with a .NET application, you’ll see files with .exe and
.ddl extensions, and you’d be forgiven for assuming they’re just native executables. But if
you load these files into an x86 disassembler, you’ll be greeted with a message similar to
the one shown in Figure 6-17.
Figure 6-17: A .NET executable in an x86 disassembler
As it turns out, .NET only uses the .exe and .dll file formats as convenient containers for
the CIL code. In the .NET runtime, these containers are referred to as assemblies.
Assemblies contain one or more classes, enumerations, and/or structures. Each type is
referred to by a name, typically consisting of a namespace and a short name. The
||||||||||||||||||||
||||||||||||||||||||
namespace reduces the likelihood of conflicting names but can also be useful for
categorization. For example, any types under the namespace System.Net deal with
network functionality.
Using ILSpy
You’ll rarely, if ever, need to interact with raw CIL because tools like Reflector
(https://www.red-gate.com/products/dotnet-development/reflector/) and ILSpy (http://ilspy.net/)
can decompile CIL data into C# or Visual Basic source and display the original CIL. Let’s
look at how to use ILSpy, a free open source tool that you can use to find an application’s
network functionality. Figure 6-18 shows ILSpy’s main interface.
The interface is split into two windows. The left window ➊ is a tree-based listing of all
assemblies that ILSpy has loaded. You can expand the tree view to see the namespaces and
the types an assembly contains ➋. The right window shows disassembled source code ➌.
The assembly you select in the left window is expanded on the right.
To work with a .NET application, load it into ILSpy by pressing CTRL+O and selecting
the application in the dialog. If you open the application’s main executable file, ILSpy
should automatically load any assembly referenced in the executable as necessary.
With the application open, you can search for the network functionality. One way to do
so is to search for types and members whose names sound like network functions. To
search all loaded assemblies, press F3. A new window should appear on the right side of
your screen, as shown in Figure 6-19.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 6-18: The ILSpy main interface
Figure 6-19: The ILSpy Search window
Enter a search term at ➊ to filter out all loaded types and display them in the window
below. You can also search for members or constants by selecting them from the drop-
down list at ➋. For example, to search for literal strings, select Constant. When you’ve
found an entry you want to inspect, such as TcpNetworkListener ➌, double-click it and
ILSpy should automatically decompile the type or method.
Rather than directly searching for specific types and members, you can also search an
application for areas that use built-in network or cryptography libraries. The base class
library contains a large set of low-level socket APIs and libraries for higher-level protocols,
such as HTTP and FTP. If you right-click a type or member in the left window and select
Analyze, a new window should appear, as shown at the right side of Figure 6-20.
||||||||||||||||||||
||||||||||||||||||||
Figure 6-20: ILSpy analyzing a type
This new window is a tree, which when expanded, shows the types of analyses that can
be performed on the item you selected in the left window. Your options will depend on
what you selected to analyze. For example, analyzing a type ➊ shows three options,
although you’ll typically only need to use the following two forms of analysis:
Instantiated By Shows which methods create new instances of this type
Exposed By Shows which methods or properties use this type in their declaration or
parameters
If you analyze a member, a method, or a property, you’ll get two options ➋:
Uses Shows what other members or types the selected member uses
Used By Shows what other members use the selected member (say, by calling the
method)
You can expand all entries ➌.
And that’s pretty much all there is to statically analyzing a .NET application. Find some
code of interest, inspect the decompiled code, and then start analyzing the network
protocol.
NOTE
Technet24
||||||||||||||||||||
||||||||||||||||||||
Most of .NET’s core functionality is in the base class library distributed with the .NET runtime
environment and available to all .NET applications. The assemblies in the BCL provide several
basic network and cryptographic libraries, which applications are likely to need if they
implement a network protocol. Look for areas that reference types in the System.Net and
System.Security.Cryptography namespaces. These are mostly implemented in the MSCORLIB and
System assemblies. If you can trace back from calls to these important APIs, you’ll discover
where the application handles the network protocol.
Java Applications
Java applications differ from .NET applications in that the Java compiler doesn’t merge all
types into a single file; instead, it compiles each source code file into a single Class file with
a .class extension. Because separate Class files in filesystem directories aren’t very
convenient to transfer between systems, Java applications are often packaged into a Java
archive, or JAR. A JAR file is just a ZIP file with a few additional files to support the Java
runtime. Figure 6-21 shows a JAR file opened in a ZIP decompression program.
Figure 6-21: An example JAR file opened with a ZIP application
To decompile Java programs, I recommend using JD-GUI (http://jd.benow.ca/), which
works in essentially the same as ILSpy when decompiling .NET applications. I won’t cover
using JD-GUI in depth but will just highlight a few important areas of the user interface in
Figure 6-22 to get you up to speed.
||||||||||||||||||||
||||||||||||||||||||
Figure 6-22: JD-GUI with an open JAR File
Figure 6-22 shows the JD-GUI user interface when you open the JAR file jce.jar ➊,
which is installed by default when you install Java and can usually be found in
JAVAHOME/lib. You can open individual class files or multiple JAR files at one time
depending on the structure of the application you’re reverse engineering. When you open
a JAR file, JD-GUI will parse the metadata as well as the list of classes, which it will
present in a tree structure. In Figure 6-22 we can see two important piece of information
JD-GUI has extracted. First, a package named javax.crypto ➋, which defines the classes for
various Java cryptographic operations. Underneath the package name is list of classes
defined in that package, such as CryptoAllPermissionCollection.class ➌. If you click the class
name in the left window, a decompiled version of the class will be shown on the right ➍.
You can scroll through the decompiled code, or click on the fields and methods exposed by
the class ➎ to jump to them in the decompiled code window.
The second important thing to note is that any identifier underlined in the decompiled
code can be clicked, and the tool will navigate to the definition. If you clicked the
underlined all_allowed identifier ➏, the user interface would navigate to the definition of the
all_allowed field in the current decompiled class.
Dealing with Obfuscation
All the metadata included with a typical .NET or Java application makes it easier for a
Technet24
||||||||||||||||||||
||||||||||||||||||||
reverse engineer to work out what an application is doing. However, commercial
developers, who employ special “secret sauce” network protocols, tend to not like the fact
that these applications are much easier to reverse engineer. The ease with which these
languages are decompiled also makes it relatively straightforward to discover horrible
security holes in custom network protocols. Some developers might not like you knowing
this, so they use obscurity as a security solution.
You’ll likely encounter applications that are intentionally obfuscated using tools such as
ProGuard for Java or Dotfuscator for .NET. These tools apply various modifications to
the compiled application that are designed to frustrate a reverse engineer. The
modification might be as simple as changing all the type and method names to meaningless
values, or it might be more elaborate, such as employing runtime decryption of strings and
code. Whatever the method, obfuscation will make decompiling the code more difficult.
For example, Figure 6-23 shows an original Java class next to its obfuscated version, which
was obtained after running it through ProGuard.
Figure 6-23: Original and obfuscated class file comparison
If you encounter an obfuscated application, it can be difficult to determine what it’s
doing using normal decompilers. After all, that’s the point of the obfuscation. However,
here are a few tips to use when tackling them:
• Keep in mind that external library types and methods (such as core class libraries) cannot
be obfuscated. Calls to the socket APIs must exist in the application if it does any
networking, so search for them.
• Because .NET and Java are easy to load and execute dynamically, you can write a simple
||||||||||||||||||||
||||||||||||||||||||
test harness to load the obfuscated application and run the string or code decryption
routines.
• Use dynamic reverse engineering as much as possible to inspect types at runtime to
determine what they’re used for.
Reverse Engineering Resources
The following URLs provide access to excellent information resources for reverse
engineering software. These resources provide more details on reverse engineering or
other related topics, such as executable file formats.
• OpenRCE Forums: http://www.openrce.org/
• ELF File Format: http://refspecs.linuxbase.org/elf/elf.pdf
• macOS Mach-O Format: https://web.archive.org/web/20090901205800/
http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/MachORuntime/Refer
• PE File Format: https://msdn.microsoft.com/en-
us/library/windows/desktop/ms680547(v=vs.85).aspx
For more information on the tools used in this chapter, including where to download
them, turn to Appendix A.
Final Words
Reverse engineering takes time and patience, so don’t expect to learn it overnight. It takes
time to understand how the operating system and the architecture work together, to
untangle the mess that optimized C can produce in the disassembler, and to statically
analyze your decompiled code. I hope I’ve given you some useful tips on reverse
engineering an executable to find its network protocol code.
The best approach when reverse engineering is to start on small executables that you
already understand. You can compare the source of these small executables to the
disassembled machine code to better understand how the compiler translated the original
programming language.
Of course, don’t forget about dynamic reverse engineering and using a debugger
whenever possible. Sometimes just running the code will be a more efficient method than
static analysis. Not only will stepping through a program help you to better understand
how the computer architecture works, but it will also allow you to analyze a small section
of code fully. If you’re lucky, you might get to analyze a managed language executable
written in .NET or Java using one of the many tools available. Of course, if the developer
has obfuscated the executable, analysis becomes more difficult, but that’s part of the fun of
reverse engineering.
Technet24
||||||||||||||||||||
||||||||||||||||||||
7
NETWORK PROTOCOL SECURITY
Network protocols transfer information between participants in a network, and there’s a
good chance that information is sensitive. Whether the information includes credit card
details or top secret information from government systems, it’s important to provide
security. Engineers consider many requirements for security when they initially design a
protocol, but vulnerabilities often surface over time, especially when a protocol is used on
public networks where anyone monitoring traffic can attack it.
All secure protocols should do the following:
• Maintain data confidentiality by protecting data from being read
• Maintain data integrity by protecting data from being modified
• Prevent an attacker from impersonating the server by implementing server
authentication
• Prevent an attacker from impersonating the client by implementing client authentication
In this chapter, I’ll discuss ways in which these four requirements are met in common
network protocols, address potential weaknesses to look out for when analyzing a protocol,
and describe how these requirements are implemented in a real-world secure protocol. I’ll
cover how to identify which protocol encryption is in use or what flaws to look for in
subsequent chapters.
The field of cryptography includes two important techniques many network protocols
use, both of which protect data or a protocol in some way: encryption provides data
confidentiality, and signing provides data integrity and authentication.
Secure network protocols heavily use encryption and signing, but cryptography can be
difficult to implement correctly: it’s common to find implementation and design mistakes
that lead to vulnerabilities that can break a protocol’s security. When analyzing a protocol,
you should have a solid understanding of the technologies and algorithms involved so you
can spot and even exploit serious weaknesses. Let’s look at encryption first to see how
mistakes in the implementation can compromise the security of an application.
Encryption Algorithms
The history of encryption goes back thousands of years, and as electronic communications
have become easier to monitor, encryption has become considerably more important.
Modern encryption algorithms often rely on very complex mathematical models.
However, just because a protocol uses complex algorithms doesn’t mean it’s secure.
||||||||||||||||||||
||||||||||||||||||||
We usually refer to an encryption algorithm as a cipher or code depending on how it’s
structured. When discussing the encrypting operation, the original, unencrypted message
is referred to as plaintext. The output of the encryption algorithm is an encrypted message
called cipher text. The majority of algorithms also need a key for encryption and decryption.
The effort to break or weaken an encryption algorithm is called cryptanalysis.
Many algorithms that were once thought to be secure have shown numerous
weaknesses and even backdoors. In part, this is due to the massive increase in computing
performance since the invention of such algorithms (some of which date back to the
1970s), making feasible attacks that we once thought possible only in theory.
If you want to break secure network protocols, you need to understand some of the
well-known cryptographic algorithms and where their weaknesses lie. Encryption doesn’t
have to involve complex mathematics. Some algorithms are only used to obfuscate the
structure of the protocol on the network, such as strings or numbers. Of course, if an
algorithm is simple, its security is generally low. Once the mechanism of obfuscation is
discovered, it provides no real security.
Here I’ll provide an overview some common encryption algorithms, but I won’t cover
the construction of these ciphers in depth because in protocol analysis, we only need to
understand the algorithm in use.
Substitution Ciphers
A substitution cipher is the simplest form of encryption. Substitution ciphers use an
algorithm to encrypt a value based on a substitution table that contains one-to-one
mapping between the plaintext and the corresponding cipher text value, as shown in
Figure 7-1. To decrypt the cipher text, the process is reversed: the cipher value is looked
up in a table (that has been reversed), and the original plaintext value is reproduced. Figure
7-1 shows an example substitution cipher.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 7-1: Substitution cipher encryption
In Figure 7-1, the substitution table (meant as just a simple example) has six defined
substitutions shown to the right. In a full substitution cipher, many more substitutions
would typically be defined. During encryption, the first letter is chosen from the plaintext,
and the plaintext letter’s substitution is then looked up in the substitution table. Here, H in
HELLO is replaced with the letter X. This process continues until all the letters are
encrypted.
Although substitution can provide adequate protection against casual attacks, it fails to
withstand cryptanalysis. Frequency analysis is commonly used to crack substitution ciphers
by correlating the frequency of symbols found in the cipher text with those typically found
in plaintext data sets. For example, if the cipher protects a message written in English,
frequency analysis might determine the frequency of certain common letters, punctuation,
and numerals in a large body of written works. Because the letter E is the most common in
the English language, in all probability the most frequent character in the enciphered
message will represent E. By following this process to its logical conclusion, it’s possible to
build the original substitution table and decipher the message.
XOR Encryption
The XOR encryption algorithm is a very simple technique for encrypting and decrypting
data. It works by applying the bitwise XOR operation between a byte of plaintext and a
byte of the key, which results in the cipher text. For example, given the byte 0x48 and the
key byte 0x82, the result of XORing them would be 0xCA.
Because the XOR operation is symmetric, applying that same key byte to the cipher text
returns the original plaintext. Figure 7-2 shows the XOR encryption operation with a
single-byte key.
||||||||||||||||||||
||||||||||||||||||||
Figure 7-2: An XOR cipher operation with a single-byte key
Specifying a single-byte key makes the encryption algorithm very simple and not very
secure. It wouldn’t be difficult for an attacker to try all 256 possible values for the key to
decrypt the cipher text into plaintext, and increasing the size of the key wouldn’t help. As
the XOR operation is symmetric, the cipher text can be XORed with the known plaintext
to determine the key. Given enough known plaintext, the key could be calculated and
applied to the rest of the cipher text to decrypt the entire message.
The only way to securely use XOR encryption is if the key is the same size as the
message and the values in the key are chosen completely at random. This approach is
called one-time pad encryption and is quite difficult to break. If an attacker knows even a
small part of the plaintext, they won’t be able to determine the complete key. The only
way to recover the key would be to know the entire plaintext of the message; in that case,
obviously, the attacker wouldn’t need to recover the key.
Unfortunately, the one-time pad encryption algorithm has significant problems and is
rarely used in practice. One problem is that when using a one-time pad, the size of the key
material you send must be the same size as any message to the sender and recipient. The
only way a one time pad can be secure is if every byte in the message is encrypted with a
completely random value. Also, you can never reuse a one-time pad key for different
messages, because if an attacker can decrypt your message one time, then they can recover
the key, and then subsequent messages encrypted with the same key are compromised.
If XOR encryption is so inferior, why even mention it? Well, even though it isn’t
“secure,” developers still use it out of laziness because it’s easy to implement. XOR
encryption is also used as a primitive to build more secure encryption algorithms, so it’s
Technet24
||||||||||||||||||||
||||||||||||||||||||
important to understand how it works.
Random Number Generators
Cryptographic systems heavily rely on good quality random numbers. In this chapter,
you’ll see them used as per-session keys, initialization vectors, and the large primes p and q
for the RSA algorithm. However, getting truly random data is difficult because computers
are by nature deterministic: any given program should produce the same output when
given the same input and state.
One way to generate relatively unpredictable data is by sampling physical processes. For
example, you could time a user’s key presses on the keyboard or sample a source of
electrical noise, such as the thermal noise in a resistor. The trouble with these sorts of
sources is they don’t provide much data—perhaps only a few hundred bytes every second
at best, which isn’t enough for a general purpose cryptographic system. A simple 4096-bit
RSA key requires at least two random 256-byte numbers, which would take several seconds
to generate.
To make this sampled data go further, cryptographic libraries implement pseudorandom
number generators (PRNGs), which use an initial seed value and generate a sequence of
numbers that, in theory, shouldn’t be predictable without knowledge of the internal state
of the generator. The quality of PRNGs varies wildly between libraries: the C library
function rand(), for instance, is completely useless for cryptographically secure protocols. A
common mistake is to use a weak algorithm to generate random numbers for
cryptographic uses.
Symmetric Key Cryptography
The only secure way to encrypt a message is to send a completely random key that’s the
same size as the message before the encryption can take place as a one-time pad. Of
course, we don’t want to deal with such large keys. Fortunately, we can instead construct a
symmetric key algorithm that uses mathematical constructs to make a secure cipher.
Because the key size is considerably shorter than the message you want to send and doesn’t
depend on how much needs to be encrypted, it’s easier to distribute.
If the algorithm used has no obvious weakness, the limiting factor for security is the key