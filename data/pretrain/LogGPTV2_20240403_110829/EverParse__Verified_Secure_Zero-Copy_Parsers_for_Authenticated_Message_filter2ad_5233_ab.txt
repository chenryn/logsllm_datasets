that do not consume their whole input.)
ate on strings of bytes B = {0,1}8.
In the rest of the paper, we only consider parsers that oper-
2.2 Attacks on Parsers
Heartbleed Unsurprisingly, the most common type of parser
vulnerability is simply memory safety bugs. Indeed, one of
the most impactful attacks in the past decade, Heartbleed
(which is estimated to have affected up to 55% of the top
internet websites [17]) is a simple buffer overrun caused by
improper validation of the length ﬁeld in the TLS messages
deﬁned in OpenSSL’s implementation of the heartbeat pro-
tocol extension (shown in Figure 3). Interestingly, the spec-
USENIX Association
28th USENIX Security Symposium    1467
{0,1}*s(V)V⊥spp⁻¹(V)p·p⁻¹(V)hashed into a digest h, then stored together with the identiﬁer
a of the hash algorithm into an ASN.1 DER [36] structure.
The distinguished encoding rules are supposed to ensure that
the serializer ρ for this structure is secure. The ﬁnal signature
is obtained by applying raw RSA to ρ(a,h) left-padded to the
size of N with padding of the form \x00\x01(\xFF)*\x00.
The security of the scheme relies heavily on (the integer
interpretation of) the padding: it is computationally hard to
forge a valid signature σ because σe modN must be of the
form 2(cid:100)log2(N)(cid:101)−15−2(cid:100)log2(ρ(a,h)(cid:101)+1 +ρ(a,h) for some digest h
and hash identiﬁer a. It is hard to ﬁnd such a value by brute
force because all but the (cid:100)log2(ρ(a,h)(cid:101) last bits are ﬁxed, and
inverting the modular exponentiation by e is hard without
knowing d. However, if the ASN.1 parser π used after expo-
nentiation is malleable (or non exact), there may exist a large
class of inputs x such that π(x) = (a,h). If this class contains
inputs that ﬁll most of the (cid:100)log2(N)(cid:101) bits of the message, the
padding may be reduced to \x00\x01\x00. When e is small
(e = 3 is commonly used by legacy public keys), it may be
easy to ﬁnd a value σ such that σe modN = 2(cid:100)log2(N)(cid:101)−15 + x
with π(x) = (a,h) for any h. For instance, in Bleichenbacher’s
original description of the attack (retold by Finney [18]), the
parser ignores the bytes that appear after the encoded ASN.1
structure, i.e. if π(x) (cid:54)= ⊥, π(x||z) = π(x) for all z. To forge a
valid signature for h, one can simply compute the cubic root
of 2(cid:100)log2(N)(cid:101)−(cid:100)log2(ρ(a,h)(cid:101)−16(\x0100||ρ(a,h)).
Ever since its publication, this attack has reappeared in
dozens of implementations, including several recent examples
(e.g. [9, 13, 37, 49]). Interestingly, the parser malleability
bugs that cause the attack are diverse: unparsed extra bytes are
tolerated at the end of the message [18, 49]; the parser accepts
arbitrary parameters in the algorithm identiﬁer [9]; and a
length overﬂow causes only its last 4 bytes to be counted [13].
This diversity illustrates how difﬁcult it is to write secure
parsers and to detect malleability vulnerabilities—some of
the attacks above have existed for years in popular libraries.
All variants lead to universal signature forgery: an attacker
can freely impersonate any client or server, sign malicious
code updates, etc.
Bitcoin transaction malleability Another well-documented
case of parser security attacks occurred against Bitcoin [34]
transactions, which are signed by the sender, then hashed (af-
ter serialization) and stored in Merkle trees. Transactions are
identiﬁed by their hash, which covers more data than what
the sender signs (in particular, the hash includes the signa-
ture itself). The format of transactions is malleable in several
ways: one example is the encoding of this signature, which
originally did not mandate the ASN.1 DER rules for non-
malleability. Another source comes from the ECDSA signing
algorithm, which is a randomized scheme (hence, there are
many valid signatures for the same message) that always has
two valid representations: if (r,s) is a valid signature, then
(r,−s) also is, and can be trivially computed without knowl-
edge of the private key. Other sources of malleability are
related to the scriptSig construct of the Bitcoin Script lan-
guage,1 inasmuch as the signature is passed to a stack-based
script to authorize spending. In total, BIP62 [50] lists 9 differ-
ent sources of malleability. Each of them allows an attacker
to alter a valid transaction t into a semantically-equivalent
valid transaction t(cid:48) such that h(t) (cid:54)= h(t(cid:48)). One way to exploit
this is to try to fool someone into believing that a transac-
tion they submitted was rejected by the network, although
in reality, it was accepted under a different transaction hash.
The Mt. Gox bitcoin exchange blamed this attack for the
loss of over 850,000 bitcoins (worth $473M at the time of
bankruptcy) and although this claim is heavily disputed, later
forensic examination of the blockchain by Decker et al. [12]
revealed that in total, 300,000 bitcoins were spent over 30,000
transactions conﬁrmed under a different identiﬁer than origi-
nally submitted between Feb 1, 2014 and Feb 28, 2014.
Ambiguous TLS message Sometimes, the message spec-
iﬁcations themselves are ambiguous, and cannot be im-
plemented by a secure parser. This is the case of the
ServerKeyExchange message in TLS:
enum {dh_anon, dhe, ecdhe, rsa,(255)} KeyExchange;
struct {
select (KeyExchange) {
case dh_anon: DHAnonServerKeyExchange;
case dhe: SignedDHKeyExchange;
case ecdhe: SignedECDHKeyExchange;
case rsa: Fail; /* Force error: no SKE in RSA */
} key_exchange;
} ServerKeyExchange;
This message represents an untagged union: the struct is
missing a ﬁeld of type KeyExchange that clariﬁes which case
to use in the union. A parser for an untagged union can
only be secure if the format of all cases share no com-
mon preﬁx. The speciﬁcation of TLS assumes that the
key exchange algorithm is available from the context (in
this case, it is part of the negotiation process). However,
it turns out that the security of the TLS negotiation de-
pends itself on the ServerKeyExchange message. This leads
to a real practical attack reported by Mavrogiannopoulos et
al. [32], where a SignedDHKeyExchange is interpreted as a
bogus SignedECDHKeyExchange. Worryingly, two other TLS
types use untagged unions: ClientKeyExchange (in TLS 1.2)
and CertificateEntry (in TLS 1.3).
3 Case Study: the TLS Message Format
We choose the TLS message format as our main case study
for several reasons: the message format description of TLS is
reasonably speciﬁed; it is designed to be secure and extensi-
ble; it deﬁnes hundreds of types that exercise the full range
1https://en.bitcoin.it/wiki/Script
1468    28th USENIX Security Symposium
USENIX Association
uint32 word; /* Type declaration */
word digest[16]; /* Fixed-length array of 4 words */
word phrase; /* List of 0 to 16 words */
struct {
opaque id[32]; /* Array of 32 bytes */
uint16 payload; /* List of 1 to 4 uint16 */
digest payload_digest;
} body; /* Struct with 3 fields */
enum {
request (0x2300), /* Constant tag */
response (0x2301),
(65535) /* Indicates 16 bit representation */
} header; /* Enum with 2 defined cases */
struct {
header tag;
select(tag) { /* Tagged union */
case request: body;
case response: phrase;
} x; /* Enum-dependent field type */
} message;
struct {
uint24 len; /* Explicit length */
message data[len]; /* Ensures length(data)=len */
} batch; /* Length encapsulation */
Figure 4: Sample type descriptions in TLS message format.
of available combinators in LowParse; and there exists a ver-
iﬁed F(cid:63) implementation of TLS that we can use to test the
integration of the generated parsers (including the integration
of parser security lemmas into the protocol security proof).
Language Description IETF’s RFC 2246 [14] speciﬁcation
of TLS 1.0, published in 1999, includes a section that de-
scribes the presentation language of its message format, in-
spired by C and XDR [46], and illustrated in Figure 4. A
description consists of a sequence of type declarations. The
base types are unsigned ﬁxed-length integers uint8, uint16,
uint24, and uint32, with opaque being used instead of uint8
to indicate raw bytes. The type constructors are ﬁxed-length
arrays, variable-length lists, structs, enums, and tagged unions.
The length boundaries of arrays and lists are all counted in
bytes rather than in elements: for instance, type digest in
Figure 4 is an array of elements of type word whose binary
representation takes 16 bytes in total; since each word takes
4 bytes, this array holds exactly 4 elements. Arrays can be
constructed only from ﬁxed-length types, whereas lists can be
deﬁned for any types: as illustrated by answer and payload,
their format declares the range of their length; and their binary
representation embeds their actual length within that range.
Following the convention of RFCs, we interpret types in
terms of the byte sequences that represent their elements. The
representation of a struct is the concatenation of the represen-
tations of each of its ﬁelds in sequence, without any padding.
Arrays are the concatenation of elements whose total length
in bytes is the array’s annotated size. Lists are represented by
a length ﬁeld encoded in a ﬁxed number of bytes (determined
by the maximum length of the list, encoded in big endian),
followed by a concatenation of the elements. A special case
of structs are length-dependent ﬁelds, e.g., the batch type in
Figure 4. In these types the ﬁrst ﬁeld describes the length
of a single (variable-length) element of the speciﬁed type of
the second ﬁeld represented adjacently. The interpretation of
enumerations contains the big endian encodings of its ele-
ments in a constant number of bytes determined by the size
descriptor of the enum type. Tagged unions (like message in
the ﬁgure) are encoded as the concatenation of the tag’s enum
representation followed by the encoding of the correspond-
ing case’s type. TLS messages are more compact than many
TLV formats: explicit tags only appear for tagged unions, and
lengths only for lists (or when ascribed). All structural infor-
mation is erased, in contrast with BSON [33] (which encodes
ﬁeld names) or Protocol Buffers [20] (which encodes ﬁeld
numbers).
We automatically extracted the data format descriptions
from the RFCs for TLS 1.2 [15] (including descriptions also
for TLS 1.0 and TLS 1.1), for TLS 1.3 [40], for TLS ex-
tensions (RFC 6066), and from the TLS IANA parameter
assignments, which deﬁnes additional constants for enumer-
ations. We then merged them together by hand, and edited
some of them to ﬁx minor mistakes, avoid name clashes in
the original descriptions, and gain precision (e.g. by adding
length dependencies documented in the RFC text).
Extensibility A difﬁcult issue for any format description lan-
guages is extensibility: as new versions of the protocol are
deﬁned, it is often necessary to extend messages with new
ﬁelds and cases while maintaining compatibility with older
implementations. To address this problem, TLS was designed
with extensibility through open enumerations. As a simple
example, TLS has an enum type that deﬁnes the possible ci-
pher suites to negotiate. Receiving a value that doesn’t match
any of the deﬁned cases of the enum is not a parsing error—
instead, the value should be treated as unknown but valid, and
the receiver should ignore it in the rest of the negotiation. This
also applies to enums that act as a tag for unions. For instance,
the hello messages contain a list of extensions tagged with
an extension type. Although this is implicit in the standard,
it is possible to deﬁne a default type for unknown values in
a select. The protocol is extended by deﬁning new values
for enums (such as new cipher suites or new group names),
and new deﬁned cases for tagged unions (for instance, new
extensions). Interestingly, many TLS implementations fail
to understand this concept, and incorrectly reject unknown
values. To ﬁght this problem, Google recently introduced
GREASE [4], which causes Chrome to randomly include un-
deﬁned values in all extensible ﬁelds of the protocol, thereby
enforcing that implementations that interoperate with Chrome
be extensible.
Unfortunately, the TLS standard does not clearly say which
USENIX Association
28th USENIX Security Symposium    1469
/* All TLS versions*/
struct {
ExtensionType extension_type;
opaque extension_data;
} Extension;
/* From RFC 5246, section 7.4.2 */
opaque ASN.1Cert;
struct {
ASN.1Cert certificate_list;
} Certificate;
/* From RFC 8446, section 4.4.2 */
enum { X509(0), RawPublicKey(2), (255)} CertType;
opaque ASN1_subjectPublicKeyInfo;
struct {
select (certificate_type) {
case RawPublicKey: ASN1_subjectPublicKeyInfo;
case X509: ASN.1Cert; } cert;
Extension extensions;
} CertificateEntry;
struct {
opaque certificate_request_context;
CertificateEntry certificate_list;
} Certificate;
Figure 5: The Certificate type for TLS 1.2 vs TLS 1.3.
enums and which tagged unions are extensible in the message
format, and instead explain their intended semantics in text. In
QuackyDucky, we add an explicit annotation to mark which
enums are extensible, and we extend the syntax of select
to support default cases. For instance, we mark the tag of
extensions ExtensionType with the /*@open*/ attribute, but
not the tag of messages HandshakeType, as the RFC states that
receiving any unknown message is an error.
Protocol versions Another complication stems from ver-
sion differences not captured by extensibility. Consider the
Certiﬁcate message in TLS 1.2 [15] and TLS 1.3 [40].
Its format, listed in Figure 5, illustrates several problems
with the TLS speciﬁcation. First, the two deﬁnitions of the
Certificate type are mutually incompatible, even though the
Certificate message is deﬁned in both versions using the
same handshakeType tag. Second, the CertificateEntry type
of TLS 1.3 uses an untagged union, where the value of the tag
depends on the context rather than on a value sent over the
network (as in ServerKeyExchange and ClientKeyExchange
where the key exchange algorithm is omitted). Third, the
Extension type is under-speciﬁed: there are complex rules
and tables about which extension may appear in which mes-
sage (see [40, §4.2]), and the type of each extension contents
depends on which message it appears in. None of these con-
straints are currently captured in type deﬁnitions.
To address the issue of conﬂicting deﬁnitions across ver-