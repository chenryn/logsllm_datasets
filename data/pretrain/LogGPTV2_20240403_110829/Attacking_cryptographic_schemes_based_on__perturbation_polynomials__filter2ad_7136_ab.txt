### Optimization of the Provided Text

#### Error-Correction and Recovery
Given a set \( S \) of \( n \) tuples \((x_i, y_i)\), the function \( f_0^* \) satisfies \( f_0^*(x_i) = y_i \). The error-correction algorithm by Ar et al. can be employed to recover \( f_0^* \). (The rest of the attack proceeds as previously described.)

For all \( x_i \), it holds that either \( f_0^*(x_i) = y_i \) or \( f_0^*(x_i) \neq y_i \).

#### Parameters and Vectors
All parameters in Table 1 satisfy \( 3t + 1 \). Let \( \mathbf{g}^* \) and \( \mathbf{h}^* \) be uniformly distributed in \([0, r]^n\). Denote by \( \boldsymbol{\lambda}_1 \) and \( \boldsymbol{\lambda}_2 \) the two shortest (independent and non-zero) vectors in the lattice \(\Lambda\). With high probability, one of these vectors is \( \pm (\mathbf{g}^* - \mathbf{h}^*) \), and the other is the shorter vector. In other words, with high probability, the original vectors \(\mathbf{g}^*\) and \(\mathbf{h}^*\) belong to the set \(\{\boldsymbol{\lambda}_1, \boldsymbol{\lambda}_2, \pm(\boldsymbol{\lambda}_1 \pm \boldsymbol{\lambda}_2)\}\). We can identify \(\mathbf{g}^*\) using the fact that \(\mathbf{g}^*\) and \(\mathbf{h}^*\) are random and the \( x_i \)'s are chosen such that \( g(x_i), h(x_i) \in [0, r] \). Thus, with high probability, the only vectors in the set \(\{\boldsymbol{\lambda}_1, \boldsymbol{\lambda}_2, \pm(\boldsymbol{\lambda}_1 \pm \boldsymbol{\lambda}_2)\}\) that belong to \([0, r]^n\) are the original \(\mathbf{g}^*\) and \(\mathbf{h}^*\).

#### Solving for \( F \)
Once we have recovered \(\mathbf{g}^*\) and \(\mathbf{h}^*\), we can solve for \( F \) itself. Recall that each \( s_i \) obtained from a compromised node satisfies:
\[ \mathbf{s}_i = \mathbf{f}_i + \alpha_i \cdot \mathbf{g} + \beta_i \cdot \mathbf{h}, \]
where \(\alpha_i, \beta_i \in [-u, u]\). Using the symmetry of \( F \), we have:
\[ s_i(x_j) - \alpha_i \cdot g(x_j) - \beta_i \cdot h(x_j) = f_i(x_j) = f_j(x_i) = s_j(x_i) - \alpha_j \cdot g(x_i) - \beta_j \cdot h(x_i) \]
for all \( i \neq j \). Having compromised \( n = t + 3 \) nodes, this gives a set of linear equations in the \( 2n \) unknowns \(\{\alpha_i, \beta_i\}_{i=0}^{n-1}\).

Naively, one would expect this system to have full rank when \(\binom{n}{2} \geq 2n\), in which case one could solve for all the \(\alpha_i, \beta_i\) and then recover the \( f_i \) and \( F \) itself. However, this is not the case: the system is underdetermined, even if we add the constraints from Eq. (1). In fact, the space of solutions to this system of equations has dimension three, irrespective of \( t \) or \( n \). (See Appendix A.2 for an explanation.)

Since we know that \(\alpha_i, \beta_i \in [-u, u]\) for all \( i \), we can exhaustively search for the desired solution as follows: Set the values of three of the \(\alpha\)'s and \(\beta\)'s to values in \([-u, u]\); then solve the linear system for the rest of the \(\alpha\)'s and \(\beta\)'s and check whether they also lie in the desired range. Heuristically, we expect that with overwhelming probability there will be a unique solution to the system of linear equations that also satisfies \(\forall i : \alpha_i, \beta_i \in [-u, u]\), and this is confirmed by our experiments. This exhaustive search can be done in time \( O(t^3 + t \cdot (2u)^3) \) by solving the system parametrically and then enumerating through \((2u)^3\) settings of the first three \(\alpha\)'s and \(\beta\)'s until the desired solution is found.

For large \( u \), one could also use lattice-reduction techniques to eliminate the exhaustive search for the \(\alpha\)'s and \(\beta\)'s. This follows from the observation that the set of solutions to our linear system forms a three-dimensional integer lattice, and the desired solution of \(\alpha\)'s and \(\beta\)'s is a short vector in that lattice.

#### Experimental Verification
We implemented our attack both in C++ using NTL and in Sage using Damien Stehlé’s fpLLL implementation. The source code of our attack (in Sage) is available online at http://www.bitbucket.org/malb/algebraic_attacks/noise_poly.py. Our attack ran quickly and was successful the vast majority of the time; see Table 2 for representative results. Note that what prevented us from carrying out our attack on larger parameter sets was not the time required for the attack, but the time required to initialize the system!

#### Adding More Noise in the Free Term
A further generalization of the scheme by Zhang et al. would be to add more noise in the free term of the secret polynomial.