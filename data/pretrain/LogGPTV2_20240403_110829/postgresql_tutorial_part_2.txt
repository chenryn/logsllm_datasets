PostgreSQL is Copyright © 1996-9 by the PostgreSQL Global Development Group, and is
distributed under the terms of the Berkeley license.
Postgres95 is Copyright © 1994-5 by the Regents of the University of California. Permission
to use, copy, modify, and distribute this software and its documentation for any purpose,
6
Chapter 1. Introduction
without fee, and without a written agreement is hereby granted, provided that the above
copyright notice and this paragraph and the following two paragraphs appear in all copies.
In no event shall the University of California be liable to any party for direct, indirect, special,
incidental, or consequential damages, including lost profits, arising out of the use of this
software and its documentation, even if the University of California has been advised of the
possibility of such damage.
The University of California specifically disclaims any warranties, including, but not limited
to, the implied warranties of merchantability and fitness for a particular purpose. The software
provided hereunder is on an "as-is" basis, and the University of California has no obligations to
provide maintainance, support, updates, enhancements, or modifications.
UNIX is a trademark of X/Open, Ltd. Sun4, SPARC, SunOS and Solaris are trademarks of Sun
Microsystems, Inc. DEC, DECstation, Alpha AXP and ULTRIX are trademarks of Digital
Equipment Corp. PA-RISC and HP-UX are trademarks of Hewlett-Packard Co. OSF/1 is a
trademark of the Open Software Foundation.
7
Chapter 2. SQL
This chapter originally appeared as a part of Stefan Simkovics’ Master’s Thesis (Simkovics,
1998).
SQL has become the most popular relational query language. The name SQL is an
abbreviation for Structured Query Language. In 1974 Donald Chamberlin and others defined
the language SEQUEL (Structured English Query Language) at IBM Research. This language
was first implemented in an IBM prototype called SEQUEL-XRM in 1974-75. In 1976-77 a
revised version of SEQUEL called SEQUEL/2 was defined and the name was changed to SQL
subsequently.
A new prototype called System R was developed by IBM in 1977. System R implemented a
large subset of SEQUEL/2 (now SQL) and a number of changes were made to SQL during the
project. System R was installed in a number of user sites, both internal IBM sites and also some
selected customer sites. Thanks to the success and acceptance of System R at those user sites
IBM started to develop commercial products that implemented the SQL language based on the
System R technology.
Over the next years IBM and also a number of other vendors announced SQL products such as
SQL/DS (IBM), DB2 (IBM), ORACLE (Oracle Corp.), DG/SQL (Data General Corp.), and
SYBASE (Sybase Inc.).
SQL is also an official standard now. In 1982 the American National Standards Institute
(ANSI) chartered its Database Committee X3H2 to develop a proposal for a standard relational
language. This proposal was ratified in 1986 and consisted essentially of the IBM dialect of
SQL. In 1987 this ANSI standard was also accepted as an international standard by the
International Organization for Standardization (ISO). This original standard version of SQL is
often referred to, informally, as "SQL/86". In 1989 the original standard was extended and this
new standard is often, again informally, referred to as "SQL/89". Also in 1989, a related
standard called Database Language Embedded SQL (ESQL) was developed.
The ISO and ANSI committees have been working for many years on the definition of a
greatly expanded version of the original standard, referred to informally as SQL2 or SQL/92.
This version became a ratified standard - "International Standard ISO/IEC 9075:1992, Database
Language SQL" - in late 1992. SQL/92 is the version normally meant when people refer to "the
SQL standard". A detailed description of SQL/92 is given in Date and Darwen, 1997. At the
time of writing this document a new standard informally referred to as SQL3 is under
development. It is planned to make SQL a Turing-complete language, i.e. all computable
queries (e.g. recursive queries) will be possible. This is a very complex task and therefore the
completion of the new standard can not be expected before 1999.
The Relational Data Model
As mentioned before, SQL is a relational language. That means it is based on the relational
data model first published by E.F. Codd in 1970. We will give a formal description of the
relational model later (in Relational Data Model Formalities) but first we want to have a look
at it from a more intuitive point of view.
8
Chapter 2. SQL
A relational database is a database that is perceived by its users as a collection of tables (and
nothing else but tables). A table consists of rows and columns where each row represents a
record and each column represents an attribute of the records contained in the table. The
Suppliers and Parts Database shows an example of a database consisting of three tables:
SUPPLIER is a table storing the number (SNO), the name (SNAME) and the city (CITY) of
a supplier.
PART is a table storing the number (PNO) the name (PNAME) and the price (PRICE) of a
part.
SELLS stores information about which part (PNO) is sold by which supplier (SNO). It
serves in a sense to connect the other two tables together.
Example 2-1. The Suppliers and Parts Database
SUPPLIER SNO | SNAME | CITY SELLS SNO | PNO
-----+---------+-------- -----+-----
1 | Smith | London 1 | 1
2 | Jones | Paris 1 | 2
3 | Adams | Vienna 2 | 4
4 | Blake | Rome 3 | 1
3 | 3
4 | 2
PART PNO | PNAME | PRICE 4 | 3
-----+---------+--------- 4 | 4
1 | Screw | 10
2 | Nut | 8
3 | Bolt | 15
4 | Cam | 25
The tables PART and SUPPLIER may be regarded as entities and SELLS may be regarded as
a relationship between a particular part and a particular supplier.
As we will see later, SQL operates on tables like the ones just defined but before that we will
study the theory of the relational model.
Relational Data Model Formalities
The mathematical concept underlying the relational model is the set-theoretic relation which is
a subset of the Cartesian product of a list of domains. This set-theoretic relation gives the
model its name (do not confuse it with the relationship from the Entity-Relationship model).
Formally a domain is simply a set of values. For example the set of integers is a domain. Also
the set of character strings of length 20 and the real numbers are examples of domains.
The Cartesian product of domains D1, D2, ... Dk, written D1 × D2 × ... × Dk is the set of all
k-tuples v1, v2, ... vk, such that v1 ∈ D1, v1 ∈ D1, ... vk ∈ Dk.
For example, when we have k=2, D1={0,1} and D2={a,b,c} then D1 × D2 is
{(0,a),(0,b),(0,c),(1,a),(1,b),(1,c)}.
A Relation is any subset of the Cartesian product of one or more domains: R ⊆ D1 × D2 × ... ×
Dk.
For example {(0,a),(0,b),(1,a)} is a relation; it is in fact a subset of D1 × D2 mentioned above.
9
Chapter 2. SQL
The members of a relation are called tuples. Each relation of some Cartesian product D1 × D2
× ... × Dk is said to have arity k and is therefore a set of k-tuples.
A relation can be viewed as a table (as we already did, remember The Suppliers and Parts
Database where every tuple is represented by a row and every column corresponds to one
component of a tuple. Giving names (called attributes) to the columns leads to the definition of
a relation scheme.
A relation scheme R is a finite set of attributes A1, A2, ... Ak. There is a domain Di, for each
attribute Ai, 1  10;
14
Chapter 2. SQL
and get the table:
PNO | PNAME | PRICE
-----+---------+--------
3 | Bolt | 15
4 | Cam | 25
Using "*" in the SELECT statement will deliver all attributes from the table. If we want to
retrieve only the attributes PNAME and PRICE from table PART we use the statement:
SELECT PNAME, PRICE
FROM PART
WHERE PRICE > 10;
In this case the result is:
PNAME | PRICE
--------+--------
Bolt | 15
Cam | 25
Note that the SQL SELECT corresponds to the "projection" in relational algebra not to the
"selection" (see Relational Algebra for more details).
The qualifications in the WHERE clause can also be logically connected using the keywords
OR, AND, and NOT:
SELECT PNAME, PRICE
FROM PART
WHERE PNAME = ’Bolt’ AND
(PRICE = 0 OR PRICE < 15);
will lead to the result:
PNAME | PRICE
--------+--------