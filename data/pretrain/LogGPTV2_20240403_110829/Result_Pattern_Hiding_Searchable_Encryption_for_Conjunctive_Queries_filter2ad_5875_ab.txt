of our Bloom filter array is encrypted into 1 PRF generated value,
i.e. typically 128 bits, whereas these bits are unencrypted in OXT,
leading to up to 128 factor overhead (in bit length) in XSet storage
for HXT over OXT. While this factor is quite large, our theoretical
analysis shows that for a fixed Pe = 10−6, the XSet Bloom filter
storage size in OXT is 35 times smaller than the TSet hash table size
(which is the same in HXT and OXT). Thus, the overall storage over-
head factor of HXT over OXT without Bloom filter will typically be
only 1 + 128/35 ≈ 4.65, which we believe is quite practical.
In terms of computational cost, the HXT has additional costs
compared to OXT due to the use of HVE (whereas the practical im-
plementations of OXT only uses plain Bloom filter). However, our
proposed HVE is based on symmetric key primitives and bitwise
operations. As a consequence, for typical parameters (e.g. n = 1
or n = 2 keyword queries with false positive rate Pe = 10−6), we
estimate that the overall server computation time overhead for HXT
over OXT in such practical applications is likely to be less than 1%
and is fully overlapped by I/O costs. Our implementation results
indeed show a server runtime overhead between 2% − 8% for a two
keywords query, and 21% for the six keywords query. The HXT
client computational cost overhead factor over OXT is higher at
≈ 0.06 ∗ log2(1/Pe) ≈ 1.19 for Pe = 10−6, but this is likely accept-
able as the overall client search time may be dominated by ‘out of
protocol’ costs such as the communication time for downloading
result documents. In terms of communications, HXT adds one ex-
tra round of communication over the OXT protocol, in which the
server communicates to the client the Bloom filter subset it needs
to check, and the client returns a HVE token to allow this search.
The communication length is still, as in OXT, only proportional to
the number of results for the least-frequent query keyword.
Additional Related Work. In practice, efficient unencrypted
search algorithms usually use a precomputed database index. This
allows keyword searches to be performed in essentially sublinear
time with respect to the size of the database (or more precisely,
in time proportional only to the number of results matching the
query). A number of index based SSE protocols have been proposed,
each more efficient than its predecessor. The first secure encrypted
index was proposed in [22], based on the form of forward index,
storing for each document a Bloom filter containing all the docu-
ment’s keywords. This allows a single document to be searched
in O(1) time but requires each document to be checked in turn,
with complexity proportional to the number of documents in the
database.
Curtmola et al. [16] were the first to propose using an inverted-
index data structure, storing in a hash table for each keyword, the
encrypted IDs of the documents that contain it (while hiding the
number of documents matching each keyword), resulting in com-
plexity proportional to the number of matching results, even for
searching the whole document collection. However, [16] does not
support multiple keyword conjunctive queries efficiently; it has
complexity proportional to the number of documents matching
the most frequent queried keyword. Later, [12] presented the OXT
protocol, extending [16] by adding a ‘Cross-Tag Set’ (XSet) data
structure, which lists hashed pairs of keywords and IDs of doc-
uments containing them, and reducing search complexity to be
proportional to the number of results matching the least frequent
queried keyword. Our HXT protocol is an improvement of OXT,
replacing the XSet by another encrypted data structure to eliminate
KPRP leakage, while preserving a low search complexity.
SE protocols have also been studied extensively in the public key
setting. Such protocols allow any user with the public key to insert
data but only allow the user with the private key to search. The
use of public key cryptography makes the protocols less efficient
than SSE, but allows more powerful functionality and/or better
security properties. The first such protocol was proposed by [5] as a
generalization of anonymous Identity-Based Encryption (IBE), and
supporting equality queries. It was significantly further generalized
in [6] to HVE, applied to conjunctive, subset and range searchable
encryption queries. However, it is not clear how to use it to obtain
Table 1: Notations and Terminologies
Notation Meaning
λ
idi
d
w
Wi
W the set of all keywords ∪d
ω
DB
DB(w)
a security parameter
the document identifier of the i-th document
number of documents in the database
a keyword
forward index {all w contained in idi}
i =1Wi
the number of elements in W
database (idi , Wi)d
i =1
inverted-index {all id : w ∈ Wid}
the number of all pairs of (id, w) in DB
max. number of conjunctive keywords per query
N
n
sterm the least frequent term among queried terms
xterm other queried terms (excluding sterm)
E
result set on server side (encrypted)
result set on client side
R
the number of all queries
Q
[n]
the set of integers {1, 2, . . . , n}
the number of hash functions in a Bloom filter
k
the length of a Bloom filter
m
query false positive probability (per sterm result)
Pe
negl(λ) a negligible function in λ
$←− S uniformly sampling a random s from S
s
a ← A(·) obtaining a as output of running algorithm A
efficient SSE protocols for conjunctive keyword queries. Our HXT
protocol fills this gap by proposing a symmetric-key HVE which is
significantly more efficient and suffices for symmetric-key setting
of SSE.
2 PRELIMINARIES
We first give a list of notations and definitions needed in our
construction and security analysis. A summary of notations and
terminologies used in this paper is given in Table 1. All needed
hardness assumptions and other necessary cryptographic primi-
tives including symmetric encryption scheme and pseudo-random
functions are given in Appendix A.
2.1 T-set
A T-set is an expanded inverted-index data structure [12] used for
efficient SSE. It is a cryptographic data structure that associates
a list of fixed-length data tuples to each keyword in a database.
Later it enables the owner to issue corresponding tokens to retrieve
these lists related to the queried keywords. A syntax, a correctness
definition, a security model, and an instantiation of such a hash
table is given in [12]. Throughout this paper, we identically adapt
the notations, definitions and results (in particular, those of Appen-
dix 2.2 and Sec. 6) of that paper regarding T-sets here. To summarise
what we use in this work, we give an instantiation of a T-set along
with a result regarding its security.
An instantiation of a T-set consists of three algorithms:
• TSet.Setup(T): The input to this algorithm is an array T and
the output is TSet with b buckets of size s each and a key κT .
This procedure places the i-th element of T[w] into bucket
TSet[b], where b is obtained using two secure pseudorandom
functions (PRFs) F and ¯F and a hash function H.
• TSet.GetTag(κT , w): The input to this procedure is the key
κT and a keyword w, it returns ¯F(w).
• TSet.Retrieve(TSet, ¯F(w)): This procedure accepts TSet and
the output of TSet.GetTag as its inputs and retrieves the
same bucket TSet(b) and recovers t = T[w].
The only leakage of T-set instantiation in [12] is
|DB(w)|,
|T[w]| = 
N = 
(1)
w ∈W
w ∈W
that is the number of all pairs of (id, w) in DB.
Theorem 1 (Th. 7 of [12]). For any keyword sequence q, including
an empty sequence, define LT(T, q) as (1). The T-set instantiation Γ
is LT-adaptively-secure assuming that F and ¯F are secure PRFs and
that H is a random oracle.
2.2 Searchable Encryption: Definition and
Security
In our single-writer single-reader setting, there are two parties:
the data owner (called client) of the plaintext database and a cloud
service provider (called server) that stores the encrypted database.
The client can interactively perform search queries over the data-
base. In more details, the client outsources her search service to the
server. When she wants to perform a search query, she generates
the search token by herself using her private key and forwards
the token to the server. With the token, the server retrieves the
encrypted identifier or documents for the client.
Formally, the syntax of our SSE protocol Π consists of the fol-
lowing algorithms:
• SE.EDBSetup(1λ , DB) → (param, mk, EDB): Run by client,
takes 1λ and DB as inputs and returns the system public
parameters param, master key mk and encrypted database
EDB. param is publicly known. mk is kept by client and EDB
is stored in the server.
• SE.Search(param, mk,ψ(w), EDB) → DB(ψ(w)): A proto-
col, runs between client and server interactively. Client’s
inputs are param, mk and query ψ(w), while server’s inputs
are param and EDB. At the end of the protocol, client out-
puts document identifiers DB(ψ(w)) matching query ψ(w),
and server outputs nothing.
We say that Π is computationally correct with false positive rate Pe
if for any database DB of size poly(λ) and any conjunctive query
ψ(w) = w1∧· · ·∧wn, the following game CorΠA(λ) is won with prob-
ability at most |DB(w1)| · Pe + negl(λ). In this game, the challenger
runs SE.EDBSetup to get EDB from DB and simulates SE.Search
on EDB and query ψ(w) to compute the client search result S. The
game is won (and returns 1) if S (cid:44) DB(ψ(w)). We remark that this
relaxed correctness definition, allowing a ‘per sterm result’ false
positive rate Pe, is also required for the Bloom filter based practical
implementation of OXT (though not formalised in [12]).
We consider the following security model for SSE, which is
exactly the one from [12], except that our leakage function will
reveal WRP instead of the KPRP (known as RP) in [12]. The model
is parameterised by a leakage function L, as described below, which
captures information allowed to learn by an adversary from the
interaction with a secure searchable encryption protocol. Loosely
speaking, the security says that the server’s view during a non-
adaptive attack can be properly simulated given only the output of
the leakage function L.
Let Π = (SE.EDBSetup, SE.Search) be a searchable encryption
protocol and A and S be two efficient algorithms. The security
is formally defined via a real experiment RealΠA(λ) and an ideal
experiment IdealΠ
A,S(λ) as follows:
• RealΠA(λ) : The adversary A(1λ) chooses a database DB and
a query list q. Then the experiment runs SE.EDBSetup(1λ ,
DB) to get (param, mk, EDB) and returns param and EDB
to A. After that, for each i ∈ |q|, the experiment runs the
SE.Search on input q[i], and stores the resulted transcript
and the client’s output into t[i]. Finally, EDB and t will be
given to A. Eventually, the experiment outputs the bit that
A returns.
• IdealΠA,S(λ) The adversary A(1λ) chooses a database DB
and a query list q. Then the experiment runs EDB ← S(L(
DB, q)) and gives it to A. Eventually, the experiment outputs
the bit that A returns.
Definition 1 (Security). The searchable encryption protocol Π
is called L-semantically secure against non-adaptive attacks if for
all PPT adversaries A there exists an efficient simulator S such that
| Pr[RealΠA(λ) = 1] − Pr[IdealΠ
A,S(λ) = 1]| ≤ negl(λ).
An adaptive model can also be defined correspondingly as in [12]. In
such a model, the query list q will not be known to the challenger
at the beginning of the real and ideal games. Instead, it selects
repeatedly search query q after each experiment runs SE.EDBSetup.
Note that in the real game, the input to SE.Search is only EDB and
to generate EDB, the simulator S has only access to the leakage
function L(DB, q).
2.3 Bloom Filters
A Bloom filter (BF) is a probabilistic (indexing) data structure to
represent a set V = {s1, s2, . . . , sN } of N elements. Its main func-
tionality is to support membership queries. The idea is to choose k
independent hash functions, {Hi}1≤i ≤k, each with domain V and
range [m]. The Bloom filter consists of a binary vector b of m bits,
initially all 0. In order to set up BF for V, for each element s ∈ V,
the bits at positions {Hi(s)}1≤i ≤k are changed to 1. To test mem-
bership of q, we check if b has 1’s in all positions {Hi(q)}1≤i ≤k,
and if so, we conclude q ∈ V with high probability. Otherwise, we
conclude q (cid:60) V with probability 1. If q (cid:60) V yet the membership
test returns 1, we call it a “false positive” event. Given a BF set
up for V, and q (cid:60) V, the false positive probability for q over a
uniformly random choice of {Hi(q)}1≤i ≤k is
Pe ≤ (1 − e−k·N/m)k .
(2)
Parameters are chosen such that Pe is negligible. It can be seen
from (2) that there is a trade-off between k and the probability of
having a false positive: smaller k are preferred since they reduce the
computation cost, but it is also necessary to maintain the desired
false positive rate. Given N , Pe, the optimal choice of k is k ≈
log2(1/Pe), while the required m ≈ 1.44 · log2(1/Pe) · N (i.e. k ≈ 20,
m ≈ 29 · N for Pe = 10−6) [8].
2.4 Hidden Vector Encryption and its Security
Predicate encryption offers a new cryptographic mechanism that
provides fine-grained access control over an encrypted database. In
predicate encryption, decryption keys are associated with boolean
: Σ −→ {0, 1} over a pre-defined set of attributes
predicates f
Σ, while each ciphertext is associated with an attribute I ∈ Σ,
and a payload messages µ ∈ M. A decryption key can be used to
decrypt a ciphertext only if the attribute I satisfies f (I) = 1. A major
application of this encryption paradigm is to outsource encrypted
data to a server, and yet retain the ability to make queries on the
data without revealing more information than absolutely necessary.
This is, in principle, similar to the concept of SSE described in the
previous subsection. Hidden vector encryption (HVE) is one such
predicate encryption scheme that supports conjunctive, equality,
comparison, and subset queries on encrypted data. While HVE
was formally defined in the public-key setting in [6], we adopt
their definition to the symmetric-key setting in order for it to be
applicable in the context of SSE.
following four PPT algorithms:
A symmetric-key HVE may be defined as an ensemble of the
• HVE.Setup(λ): takes a security parameter λ and outputs a
master secret key msk. It also defines the message space M.
• HVE.KeyGen(msk, v ∈ Σm∗ ): takes a predicate vector v, the
master secret key msk and outputs a decryption key s.
• HVE.Enc(msk, µ ∈ M, x ∈ Σm): takes as input a message µ,