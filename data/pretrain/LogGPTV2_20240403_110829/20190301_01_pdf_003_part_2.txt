END [ package_name ] ;
Where authorization_clause :=
{ AUTHID DEFINER } | { AUTHID CURRENT_USER }
Where procedure_or_function_declaration :=
procedure_declaration | function_declaration
Where procedure_declaration :=
PROCEDURE proc_name [ argument_list ];
[ restriction_pragma; ]
Where function_declaration :=
FUNCTION func_name [ argument_list ]
RETURN rettype [ DETERMINISTIC ];
[ restriction_pragma; ]
Where argument_list :=
( argument_declaration [, ...] )
Where argument_declaration :=
argname [ IN | IN OUT | OUT ] argtype [ DEFAULT value ]
Where restriction_pragma :=
PRAGMA RESTRICT_REFERENCES(name, restrictions)
Where restrictions :=
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 11
Database Compatibility for Oracle® Developers
Built-in Package Guide
restriction [, ... ]
Parameters
package_name
package_name is an identifier assigned to the package - each package must have
a name unique within the schema.
AUTHID DEFINER
If you omit the AUTHID clause or specify AUTHID DEFINER, the privileges of the
package owner are used to determine access privileges to database objects.
AUTHID CURRENT_USER
If you specify AUTHID CURRENT_USER, the privileges of the current user
executing a program in the package are used to determine access privileges.
declaration
declaration is an identifier of a public variable. A public variable can be
accessed from outside of the package using the syntax
package_name.variable. There can be zero, one, or more public variables.
Public variable definitions must come before procedure or function declarations.
declaration can be any of the following:
 Variable Declaration
 Record Declaration
 Collection Declaration
 REF CURSOR and Cursor Variable Declaration
 TYPE Definitions for Records, Collections, and REF CURSORs
 Exception
 Object Variable Declaration
proc_name
The name of a public procedure.
argname
The name of an argument. The argument is referenced by this name within the
function or procedure body.
IN | IN OUT | OUT
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 12
Database Compatibility for Oracle® Developers
Built-in Package Guide
The argument mode. IN declares the argument for input only. This is the default.
IN OUT allows the argument to receive a value as well as return a value. OUT
specifies the argument is for output only.
argtype
The data type(s) of an argument. An argument type may be a base data type, a
copy of the type of an existing column using %TYPE, or a user-defined type such
as a nested table or an object type. A length must not be specified for any base
type - for example, specify VARCHAR2, not VARCHAR2(10).
The type of a column is referenced by writing tablename.columnname%TYPE;
using this can sometimes help make a procedure independent from changes to the
definition of a table.
DEFAULT value
The DEFAULT clause supplies a default value for an input argument if one is not
supplied in the invocation. DEFAULT may not be specified for arguments with
modes IN OUT or OUT.
func_name
The name of a public function.
rettype
The return data type.
DETERMINISTIC
DETERMINISTIC is a synonym for IMMUTABLE. A DETERMINISTIC function
cannot modify the database and always reaches the same result when given the
same argument values; it does not do database lookups or otherwise use
information not directly present in its argument list. If you include this clause, any
call of the function with all-constant arguments can be immediately replaced with
the function value.
restriction
The following keywords are accepted for compatibility and ignored:
RNDS
RNPS
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 13
Database Compatibility for Oracle® Developers
Built-in Package Guide
TRUST
WNDS
WNPS
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 14
Database Compatibility for Oracle® Developers
Built-in Package Guide
2.1.2 Package Body Syntax
Package implementation details reside in the package body; the package body may
contain objects that are not visible to the package user. Advanced Server supports the
following syntax for the package body:
CREATE [ OR REPLACE ] PACKAGE BODY package_name
{ IS | AS }
[ private_declaration; ] ...
[ procedure_or_function_definition ] ...
[ package_initializer ]
END [ package_name ] ;
Where procedure_or_function_definition :=
procedure_definition | function_definition
Where procedure_definition :=
PROCEDURE proc_name[ argument_list ]
[ options_list ]
{ IS | AS }
procedure_body
END [ proc_name ] ;
Where procedure_body :=
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declaration; ] [, ...]
BEGIN
statement; [...]
[ EXCEPTION
{ WHEN exception [OR exception] [...]] THEN statement; }
[...]
]
Where function_definition :=
FUNCTION func_name [ argument_list ]
RETURN rettype [ DETERMINISTIC ]
[ options_list ]
{ IS | AS }
function_body
END [ func_name ] ;
Where function_body :=
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 15
Database Compatibility for Oracle® Developers
Built-in Package Guide
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declaration; ] [, ...]
BEGIN
statement; [...]
[ EXCEPTION
{ WHEN exception [ OR exception ] [...] THEN statement; }
[...]
]
Where argument_list :=
( argument_declaration [, ...] )
Where argument_declaration :=
argname [ IN | IN OUT | OUT ] argtype [ DEFAULT value ]
Where options_list :=
option [ ... ]
Where option :=
STRICT
LEAKPROOF
PARALLEL { UNSAFE | RESTRICTED | SAFE }
COST execution_cost
ROWS result_rows
SET config_param { TO value | = value | FROM CURRENT }
Where package_initializer :=
BEGIN
statement; [...]
END;
Parameters
package_name
package_name is the name of the package for which this is the package body.
There must be an existing package specification with this name.
private_declaration
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 16
Database Compatibility for Oracle® Developers
Built-in Package Guide
private_declaration is an identifier of a private variable that can be
accessed by any procedure or function within the package. There can be zero,
one, or more private variables. private_declaration can be any of the
following:
 Variable Declaration
 Record Declaration
 Collection Declaration
 REF CURSOR and Cursor Variable Declaration
 TYPE Definitions for Records, Collections, and REF CURSORs
 Exception
 Object Variable Declaration
proc_name
The name of the procedure being created.
PRAGMA AUTONOMOUS_TRANSACTION
PRAGMA AUTONOMOUS_TRANSACTION is the directive that sets the procedure as
an autonomous transaction.
declaration
A variable, type, REF CURSOR, or subprogram declaration. If subprogram
declarations are included, they must be declared after all other variable, type, and
REF CURSOR declarations.
statement
An SPL program statement. Note that a DECLARE - BEGIN - END block is
considered an SPL statement unto itself. Thus, the function body may contain
nested blocks.
exception
An exception condition name such as NO_DATA_FOUND, OTHERS, etc.
func_name
The name of the function being created.
rettype
The return data type, which may be any of the types listed for argtype. As for
argtype, a length must not be specified for rettype.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 17
Database Compatibility for Oracle® Developers
Built-in Package Guide
DETERMINISTIC
Include DETERMINISTIC to specify that the function will always return the same
result when given the same argument values. A DETERMINISTIC function must
not modify the database.
Note: the DETERMINISTIC keyword is equivalent to the PostgreSQL
IMMUTABLE option.
Note: If DETERMINISTIC is specified for a public function in the package body,
it must also be specified for the function declaration in the package specification.
(For private functions, there is no function declaration in the package
specification.)
PRAGMA AUTONOMOUS_TRANSACTION
PRAGMA AUTONOMOUS_TRANSACTION is the directive that sets the function as an
autonomous transaction.
declaration
A variable, type, REF CURSOR, or subprogram declaration. If subprogram
declarations are included, they must be declared after all other variable, type, and
REF CURSOR declarations.
argname
The name of a formal argument. The argument is referenced by this name within
the procedure body.
IN | IN OUT | OUT
The argument mode. IN declares the argument for input only. This is the default.
IN OUT allows the argument to receive a value as well as return a value. OUT
specifies the argument is for output only.
argtype
The data type(s) of an argument. An argument type may be a base data type, a
copy of the type of an existing column using %TYPE, or a user-defined type such
as a nested table or an object type. A length must not be specified for any base
type - for example, specify VARCHAR2, not VARCHAR2(10).
The type of a column is referenced by writing tablename.columnname%TYPE;
using this can sometimes help make a procedure independent from changes to the
definition of a table.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 18
Database Compatibility for Oracle® Developers
Built-in Package Guide
DEFAULT value
The DEFAULT clause supplies a default value for an input argument if one is not
supplied in the procedure call. DEFAULT may not be specified for arguments with
modes IN OUT or OUT.
Please note: the following options are not compatible with Oracle databases; they
are extensions to Oracle package syntax provided by Advanced Server only.
STRICT
The STRICT keyword specifies that the function will not be executed if called
with a NULL argument; instead the function will return NULL.
LEAKPROOF
The LEAKPROOF keyword specifies that the function will not reveal any
information about arguments, other than through a return value.
PARALLEL { UNSAFE | RESTRICTED | SAFE }
The PARALLEL clause enables the use of parallel sequential scans (parallel mode).
A parallel sequential scan uses multiple workers to scan a relation in parallel
during a query in contrast to a serial sequential scan.
When set to UNSAFE, the procedure or function cannot be executed in parallel
mode. The presence of such a procedure or function forces a serial execution plan.
This is the default setting if the PARALLEL clause is omitted.
When set to RESTRICTED, the procedure or function can be executed in parallel
mode, but the execution is restricted to the parallel group leader. If the
qualification for any particular relation has anything that is parallel restricted, that
relation won't be chosen for parallelism.
When set to SAFE, the procedure or function can be executed in parallel mode
with no restriction.
execution_cost
execution_cost specifies a positive number giving the estimated execution
cost for the function, in units of cpu_operator_cost. If the function returns a
set, this is the cost per returned row. The default is 0.0025.
result_rows
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 19
Database Compatibility for Oracle® Developers
Built-in Package Guide
result_rows is the estimated number of rows that the query planner should
expect the function to return. The default is 1000.
SET
Use the SET clause to specify a parameter value for the duration of the function:
config_param specifies the parameter name.
value specifies the parameter value.
FROM CURRENT guarantees that the parameter value is restored when the
function ends.
package_initializer
The statements in the package_initializer are executed once per user’s
session when the package is first referenced.
Please Note: The STRICT, LEAKPROOF, PARALLEL, COST, ROWS and SET keywords
provide extended functionality for Advanced Server and are not supported by Oracle.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 20
Database Compatibility for Oracle® Developers
Built-in Package Guide
2.2 Creating Packages
A package is not an executable piece of code; rather it is a repository of code. When you
use a package, you actually execute or make reference to an element within a package.
2.2.1 Creating the Package Specification
The package specification contains the definition of all the elements in the package that
can be referenced from outside of the package. These are called the public elements of
the package, and they act as the package interface. The following code sample is a
package specification:
--
-- Package specification for the 'emp_admin' package.
--
CREATE OR REPLACE PACKAGE emp_admin
IS
FUNCTION get_dept_name (
p_deptno NUMBER DEFAULT 10
)
RETURN VARCHAR2;
FUNCTION update_emp_sal (
p_empno NUMBER,
p_raise NUMBER
)
RETURN NUMBER;
PROCEDURE hire_emp (
p_empno NUMBER,
p_ename VARCHAR2,
p_job VARCHAR2,
p_sal NUMBER,
p_hiredate DATE DEFAULT sysdate,
p_comm NUMBER DEFAULT 0,
p_mgr NUMBER,
p_deptno NUMBER DEFAULT 10
);
PROCEDURE fire_emp (
p_empno NUMBER
);
END emp_admin;
This code sample creates the emp_admin package specification. This package
specification consists of two functions and two stored procedures. We can also add the
OR REPLACE clause to the CREATE PACKAGE statement for convenience.
2.2.2 Creating the Package Body
The body of the package contains the actual implementation behind the package
specification. For the above emp_admin package specification, we shall now create a
package body which will implement the specifications. The body will contain the
implementation of the functions and stored procedures in the specification.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 21
Database Compatibility for Oracle® Developers
Built-in Package Guide
--
-- Package body for the 'emp_admin' package.
--
CREATE OR REPLACE PACKAGE BODY emp_admin
IS
--
-- Function that queries the 'dept' table based on the department
-- number and returns the corresponding department name.
--
FUNCTION get_dept_name (
p_deptno IN NUMBER DEFAULT 10
)
RETURN VARCHAR2
IS
v_dname VARCHAR2(14);
BEGIN
SELECT dname INTO v_dname FROM dept WHERE deptno = p_deptno;
RETURN v_dname;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Invalid department number ' || p_deptno);
RETURN '';
END;
--
-- Function that updates an employee's salary based on the
-- employee number and salary increment/decrement passed
-- as IN parameters. Upon successful completion the function
-- returns the new updated salary.
--
FUNCTION update_emp_sal (
p_empno IN NUMBER,
p_raise IN NUMBER
)
RETURN NUMBER
IS
v_sal NUMBER := 0;
BEGIN
SELECT sal INTO v_sal FROM emp WHERE empno = p_empno;
v_sal := v_sal + p_raise;
UPDATE emp SET sal = v_sal WHERE empno = p_empno;
RETURN v_sal;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Employee ' || p_empno || ' not found');
RETURN -1;
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('The following is SQLERRM:');
DBMS_OUTPUT.PUT_LINE(SQLERRM);
DBMS_OUTPUT.PUT_LINE('The following is SQLCODE:');
DBMS_OUTPUT.PUT_LINE(SQLCODE);
RETURN -1;
END;
--
-- Procedure that inserts a new employee record into the 'emp' table.
--
PROCEDURE hire_emp (
p_empno NUMBER,
p_ename VARCHAR2,
p_job VARCHAR2,
p_sal NUMBER,
p_hiredate DATE DEFAULT sysdate,
p_comm NUMBER DEFAULT 0,
p_mgr NUMBER,
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 22
Database Compatibility for Oracle® Developers
Built-in Package Guide
p_deptno NUMBER DEFAULT 10
)
AS
BEGIN
INSERT INTO emp(empno, ename, job, sal, hiredate, comm, mgr, deptno)
VALUES(p_empno, p_ename, p_job, p_sal,