# 2.1 Package Syntax

The package syntax in Advanced Server is designed to be compatible with Oracle, allowing for the creation of reusable and modular code. Below are the detailed components and their descriptions.

### 2.1.1 Package Specification Syntax

A package specification defines the public elements (functions, procedures, and variables) that can be accessed from outside the package. The following is the syntax for a package specification:

```sql
CREATE [ OR REPLACE ] PACKAGE package_name
IS
[ AUTHID { DEFINER | CURRENT_USER } ]
[ declaration; ] ...
[ procedure_or_function_declaration; ] ...
END [ package_name ];
```

#### Components

- **package_name**: A unique identifier for the package within the schema.
- **AUTHID DEFINER**:
  - If omitted or specified as `AUTHID DEFINER`, the privileges of the package owner are used to determine access to database objects.
- **AUTHID CURRENT_USER**:
  - If specified as `AUTHID CURRENT_USER`, the privileges of the current user executing the package are used to determine access.
- **declaration**:
  - Public variable, record, collection, REF CURSOR, type, or exception declarations. These must come before any procedure or function declarations.
- **procedure_or_function_declaration**:
  - Definitions of public procedures and functions.

#### Procedure Declaration

```sql
PROCEDURE proc_name [ argument_list ];
[ restriction_pragma; ]
```

- **proc_name**: The name of the public procedure.
- **argument_list**: A list of arguments for the procedure.
- **restriction_pragma**: Optional pragma to restrict references.

#### Function Declaration

```sql
FUNCTION func_name [ argument_list ]
RETURN rettype [ DETERMINISTIC ];
[ restriction_pragma; ]
```

- **func_name**: The name of the public function.
- **argument_list**: A list of arguments for the function.
- **rettype**: The return data type of the function.
- **DETERMINISTIC**: Indicates that the function will always return the same result for the same input and does not modify the database.

#### Argument List

```sql
( argument_declaration [, ...] )
```

- **argument_declaration**:
  ```sql
  argname [ IN | IN OUT | OUT ] argtype [ DEFAULT value ]
  ```
  - **argname**: The name of the argument.
  - **IN | IN OUT | OUT**: The mode of the argument.
    - `IN`: Input only (default).
    - `IN OUT`: Can both receive and return a value.
    - `OUT`: Output only.
  - **argtype**: The data type of the argument.
  - **DEFAULT value**: Optional default value for the argument.

#### Restriction Pragma

```sql
PRAGMA RESTRICT_REFERENCES(name, restrictions)
```

- **restrictions**: A list of restrictions (e.g., RNDS, RNPS, TRUST, WNDS, WNPS).

### 2.1.2 Package Body Syntax

The package body contains the implementation details of the public elements defined in the package specification. It may also include private elements that are not visible to the package user.

```sql
CREATE [ OR REPLACE ] PACKAGE BODY package_name
IS
[ private_declaration; ] ...
[ procedure_or_function_definition; ] ...
[ package_initializer ]
END [ package_name ];
```

#### Components

- **private_declaration**:
  - Private variable, record, collection, REF CURSOR, type, or exception declarations.
- **procedure_or_function_definition**:
  - Definitions of procedures and functions, including their bodies.

#### Procedure Definition

```sql
PROCEDURE proc_name [ argument_list ]
[ options_list ]
IS
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declaration; ] ...
BEGIN
  statement; [...]
[ EXCEPTION
  WHEN exception [ OR exception ] [...] THEN
    statement; [...]
]
END [ proc_name ];
```

- **options_list**: Additional options such as `STRICT`, `LEAKPROOF`, `PARALLEL`, `COST`, `ROWS`, and `SET`.

#### Function Definition

```sql
FUNCTION func_name [ argument_list ]
RETURN rettype [ DETERMINISTIC ]
[ options_list ]
IS
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declaration; ] ...
BEGIN
  statement; [...]
[ EXCEPTION
  WHEN exception [ OR exception ] [...] THEN
    statement; [...]
]
END [ func_name ];
```

- **options_list**: Same as for procedures.

#### Package Initializer

```sql
BEGIN
  statement; [...]
END;
```

- **statement**: SQL statements that are executed once per session when the package is first referenced.

### 2.2 Creating Packages

A package is a repository of code, and its elements are executed or referenced when needed.

#### 2.2.1 Creating the Package Specification

The package specification defines the public elements of the package. Here is an example:

```sql
CREATE OR REPLACE PACKAGE emp_admin
IS
  FUNCTION get_dept_name (
    p_deptno NUMBER DEFAULT 10
  ) RETURN VARCHAR2;

  FUNCTION update_emp_sal (
    p_empno NUMBER,
    p_raise NUMBER
  ) RETURN NUMBER;

  PROCEDURE hire_emp (
    p_empno NUMBER,
    p_ename VARCHAR2,
    p_job VARCHAR2,
    p_sal NUMBER,
    p_hiredate DATE DEFAULT SYSDATE,
    p_comm NUMBER DEFAULT 0,
    p_mgr NUMBER,
    p_deptno NUMBER DEFAULT 10
  );

  PROCEDURE fire_emp (
    p_empno NUMBER
  );
END emp_admin;
```

#### 2.2.2 Creating the Package Body

The package body contains the implementation of the public elements defined in the specification. Here is an example:

```sql
CREATE OR REPLACE PACKAGE BODY emp_admin
IS
  -- Function to get department name
  FUNCTION get_dept_name (
    p_deptno IN NUMBER DEFAULT 10
  ) RETURN VARCHAR2
  IS
    v_dname VARCHAR2(14);
  BEGIN
    SELECT dname INTO v_dname FROM dept WHERE deptno = p_deptno;
    RETURN v_dname;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('Invalid department number ' || p_deptno);
      RETURN '';
  END;

  -- Function to update employee salary
  FUNCTION update_emp_sal (
    p_empno IN NUMBER,
    p_raise IN NUMBER
  ) RETURN NUMBER
  IS
    v_sal NUMBER := 0;
  BEGIN
    SELECT sal INTO v_sal FROM emp WHERE empno = p_empno;
    v_sal := v_sal + p_raise;
    UPDATE emp SET sal = v_sal WHERE empno = p_empno;
    RETURN v_sal;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('Employee ' || p_empno || ' not found');
      RETURN -1;
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('The following is SQLERRM:');
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
      DBMS_OUTPUT.PUT_LINE('The following is SQLCODE:');
      DBMS_OUTPUT.PUT_LINE(SQLCODE);
      RETURN -1;
  END;

  -- Procedure to hire an employee
  PROCEDURE hire_emp (
    p_empno NUMBER,
    p_ename VARCHAR2,
    p_job VARCHAR2,
    p_sal NUMBER,
    p_hiredate DATE DEFAULT SYSDATE,
    p_comm NUMBER DEFAULT 0,
    p_mgr NUMBER,
    p_deptno NUMBER DEFAULT 10
  ) AS
  BEGIN
    INSERT INTO emp(empno, ename, job, sal, hiredate, comm, mgr, deptno)
    VALUES(p_empno, p_ename, p_job, p_sal, p_hiredate, p_comm, p_mgr, p_deptno);
  END;

  -- Procedure to fire an employee
  PROCEDURE fire_emp (
    p_empno NUMBER
  ) AS
  BEGIN
    DELETE FROM emp WHERE empno = p_empno;
  END;
END emp_admin;
```

This completes the creation of the `emp_admin` package, which includes the specification and body.