拉响警报。如果人群中有多名恶棍，该函数也只汇报找出的第一名恶棍（我猜这
·测试。
·执行静态检查。
·从新建的查询函数中去掉所有造成副作用的语句。
·复制整个函数，将其作为一个查询来命名。
的，因为不论如何查询，总是获得相同结果。
大大加快速度。虽然这种做法改变了对象中缓存的状态，但这一修改是察觉不到
化办法是：将查询所得结果缓存于某个字段中，这样一来后续的重复查询就可以
（people）里是否混进了恶棍。如果发现了恶棍，该函数会返回恶棍的名字，
范例
个变量，这个变量的名字应该能对函数如何命名有所启发。
做法
for
从原函数中去掉返回值。
调用新建的查询函数，并在下面马上再调用一次原函数。每次修改之后都要测
试。
查找所有调用原函数的地方。
 setoffAlarms();
你也许已经注意到了：我使用“看得到的副作用"这种说法。
return'
setoffAlarms(
return "Don";
有这样一个函数：
完成重构之后，
如果想不出好名字，
"John";
 查询函数与原函数之间常会有重复代码，可以做必要的清
它会遍历一份恶棍（miscreant）名单，
可以看看函数返回的是什么。
。如果调用处用到了该函数的返回值，
，查询的结果会被填入一
检查一群人
有一种常见的优
，就将其改为
并
---
## Page 381
function alertForMiscreant (people） {
alertForMiscreant(people);
const found = findMiscreant(people);
就变成了
const found = alertForMiscreant(people);
用一次修改函数（也就是原函数）。
function findMiscreant (people) {
function findMiscreant (people）{
for
return "";
return "";
for
return "";
if
 setoffAlarms();
现在可以从修改函数中去掉所有返回值了
然后找到所有原函数的调用者，
return "John";
return "Don";
 setoffAlarms();
然后在新建的查询函数中去掉副作用
 return
return;
首先我复制整个函数，用它的查询部分功能为其命名。
(p ===
"John";
"Don"
people）{
。于是代码
D
 将其改为调用新建的查询函数，并在其后调
---
## Page 382
function 
用替换算法（195）
eturn;
现在，
原来的修改函数和新建的查询函数之间有大量的重复代码，我可以使
"John"）{
让修改函数使用查询函数。
---
## Page 383
·测试。
·修改该函数所有的调用处，使其在调用时传入该字面量值。
更有用，因为重构后的函数还可以用于处理其他的值。
成一个函数，以参数的形式传入不同的值，从而消除重复。这个重构可以使函数
·运用改变函数声明（124），把需要作为参数传入的字面量添加到参数列表
动机
function raise(aPerson, 
function tenPercentRaise(aPerson) {
做法
中。
 aPerson.salary = aPerson.salary.multiply(1.05);
 aPerson.salary = aPerson.salary.multiply(1.1);
11.2
从一组相似的函数中选择一个。
如果我发现两个函数逻辑非常相似，
曾用名：令函数携带参数（Parameterize Method）
函数参数化
factor）{
（Parameterize Function)
f(){}
只有一些字面量值不同，可以将其合并
---
## Page 384
function basecharge(usage) {
function
·修改函数体，令其使用新传入的参数。
function topBand(usage）{
function fivePercentRaise(aPerson） {
范例
先对参数化之后的函数做必要的调整，再做替换。
return usd(amount);
const
 aPerson.salary = aPerson.salary.multiply(1 + factor);
对于其他与之相似的函数，逐一将其调用处改为调用已经参数化的函数。每次
修改后都要测试。
这几个函数中的逻辑明显很相似，但是不是相似到足以支撑一个参数化的计
(usage
情况可能比这个更复杂一些。例如下列代码：
很明显我可以用下面这个函数来替换上面两个：
下面是一个显而易见的例子:
 如果第一个函数经过参数化以后不能直接替代另一个与之相似的函数，就
topBand(usage)
(abes
factor）
0.07;
0.05
每使用一个新参数都要测试。
---
## Page 385
function basecharge(usage)
function withinBand(usage, M
名，使其更好地表述参数化之后的含义。
和上界。
调整其他的调用者来适应它。
中间的范围开始着手较好。所以我首先选择了middleBand函数来添加参数，然后
加参数，同时留意其他几种情况。
算“计费档次”（band）的函数？这次就不像前面第一个例子那样一目了然了。
function bottomBand(usage) {
 return usd(amount);
const
return usd(amount);
const
 middleBand使用了两个字面量值，
 在尝试对几个相关的函数做参数化操作时，
对于原本调用bottomBand函数的地方，我将其改为调用参数化了的新函数。
然后是另一个：
在函数体内部，把一个字面量改为使用新传入的参数:
amount：
amount
我首先用改变函数声明（124）加上这两个参数，同时顺手给函数改个
return usd(0);
age)
0.07;
bottom，
bottom,
bottom,
，200）*0.05
‘200）
top)
*0.05
在类似这样处理“范围"的情况下，
即100和200，
，我会先从中挑选一个，
分别代表“中间档次"的下界
通常从位于
在上面添
---
## Page 386
了“传入的usage参数为负数"这种情况是如何处理的。
条语句已经失去了逻辑上的必要性，我还是愿意把它留在原地，
的上界。
function topBand(usage) {
const
照现在的逻辑，
withii
amount
inBand(usage, 0, 
（○>
basecharge-
100)*0.03
Infinity）
200：0
‘200)
一开始的卫语句已经可以去掉了。
0.05
0.07;
因为它阐明
不过，
尽管这
---
## Page 387
分逻辑。例如，我可能有下面这样一个函数：
function bookconcert(aCustomer, isPremium） {
function setHeight(value) {this._height = value;}
动机
11.3
 // logic for premium booking
“标记参数"是这样的一种参数：
return;
return;
(name
曾用名：以明确函数取代参数（Replace Parameter with Explicit Methods）
height
移除标记参数
nium)
value;
value）{
：调用者用它来指示被调函数应该执行哪一部
---
## Page 388
·针对参数的每一种可能值，新建一个明确函数。
个函数可能做得太多，应该考虑是否能用更简单的函数来组合出完整的逻辑。
个参数的各种取值的所有组合情况提供明确函数。不过这也是一个信号，
使用时的区别。
掉标记参数后，
标记参数；只有参数值影响了函数内部的控制流，这才是标记参数。
数。另外，
数据，这样的参数不算标记参数；，
premiumBookconcert(aCustomer);
成一项单独的任务，
在调用一个函数时，我很难弄清true到底是什么意思。如果明确用一个函数来完
有哪些可用的值。布尔型的标记尤其糟糕，
怎么调用。拿到一份API以后，我首先看到的是一系列可供调用的函数，但标记
bookconcert(aCustomer, "premium");
bookconcert(acustomer,
bookconcert(acustomer, true);
做法
如果一个函数有多个标记参数，
// logic for regular booking
 移除标记参数不仅使代码更整洁，
并非所有类似这样的参数都是标记参数。
我不喜欢标记参数，因为它们让人难以理解到底有哪些函数可以调用、应该
或者是以字符串（或者符号，如果编程语言支持的话）的形式出现
标记参数也可能以枚举的形式出现：
要预订一场高级音乐会（premium concert），就得这样发起调用:
在函数实现内部，如果参数值只是作为数据传给其他函数，这就不是
代码分析工具能更容易地体现出“高级"和“普通"两种预订逻辑在
其含义会清晰得多。
 CustomerType.PREMIUM)
 只有调用者直接传入字面量值，这才是标记参
 可能就不得不将其保留，
并且能帮助开发工具更好地发挥作用。
，因为它们不能清晰地传达其含义一
如果调用者传入的是程序中流动的
，否则我就得针对各
说明这
---
## Page 389
的形式明确说出调用者的意图。
标记参数。
干什么的？
aShipment.deliveryDate = deliveryDate(anorder, true);
货日期（delivery date）。
aShipment.deliveryDate = deliveryDate(anorder, false);
·对于“用字面量值作为参数"的函数调用者，将其改为调用新建的明确函数。
范例
明确函数；否则，可以在原函数之上创建包装函数。
else {
return an0rder.placedon.plusDays(2 + deliveryTime);
let deliveryTime;
return anorder.placedon.plusDays(1 + deliveryTime);
else
let
el
deliveryDate函数主体如下所示:
 面对这样的代码，我立即开始好奇：参数里这个布尔值是什么意思？是用来
对于这个例子，我可以使用分解条件表达式（260），得到下列代码：
原来调用者用这个布尔型字面量来判断应该运行哪个分支的代码一
另一些调用代码则是这样：
在浏览代码时，我发现多处代码在调用一个函数计算物流（shipment）的到
如果主函数有清晰的条件分发逻辑，
if
（["ME'
。，然而函数的重点就在于要遵循调用者的指令，所以最好是用明确函数
[HN 
[HN
一些调用代码类似这样：
可以用分解条件表达式（260）创建
-典型的
---
## Page 390
这一招才好用。函数内部也有可能以一种更纠结的方式使用标记参数，
逻辑发生在函数最外层（或者可以比较容易地将其重构至函数最外层）的时候，
数。这样我就提供了两套接口，分别支持不同的用途。
aShipment.deliveryDate
的形式直接设置参数值。如果所有调用deliveryDate的代码都像这样：
aShipment.deliveryDate = rushDeliveryDate(anorder);
aShipment.deliveryDate = deliveryDate(anorder,true);
用代码
（314）
function rushDeliveryDate(anorder) {
function deliveryDate(anorder,
（260）清理其内部实现）
Function regularDeliveryDate(anorder） {
些调用者则传入正常的数据。
else if
return anorder.placedon.plusDays(1 + deliveryTime);
else if.
else
return an0rder.placedon.plusDays(2 + deliveryTime);
else
el
 直接拆分条件逻辑是实施本重构的好方法，
可能有一些调用者给这个参数传入的是字面量，
 那我对这个函数的签名没有任何意见（不过我还是想用分解条件表达式
这个参数是标记参数，不仅因为它是布尔类型，而且还因为调用方以字面量
处理完所有调用处，
另一个分支也类似。
可以改为
这两个函数能更好地表达调用者的意图，现在我可以修改调用方代码了。调
(isRush)
"MA
 deliveryTime = 3
，但不修改传入正常数据的调用者，重构结束时也不删除deliveryDate函
（["ME"
'return regularDeliveryDate(anorder);
CT
/Time
return
HN
"NH"].includes(anorder.deliveryState))
al 