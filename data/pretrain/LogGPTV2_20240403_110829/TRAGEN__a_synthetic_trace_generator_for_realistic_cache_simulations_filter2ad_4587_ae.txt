Download
8.06
22.9
70
0.32
603
49.8
141
40
7.1
368
Table 2: Trace description for the TC trace
Image Media Web
144
406.7
250
11.1
255
85.4
243
8
33
20.5
Eviction age. We also compare the expected eviction age of the
original trace and of the synthetic trace for a LRU cache. Eviction
age is an important caching metric since it measures how long an
object stays in cache after its last access ‚Äì a smaller eviction age
means that the content in the cache is churning too quickly, leading
to worse cache performance. Upon assigning a timestamp to the
synthetic trace based on the byte rate of the original, the average
eviction age of the original and synthetic trace align for various
cache sizes (Figure 9). Particularly, eviction age of the synthetic
trace differs from the original trace by 1.8% on an average across all
cache sizes for the VIDEO trace.
Evaluating traffic mixes. We now show that our tool can generate
a synthetic trace for any specified traffic mix. We consider two case
studies. First, we consider the EU trace and a traffic mix specified
(a)
(b)
Figure 8: Converging to the required hit rates for an LRU cache of size
500GB. (a) Cumulative RHR; (b) Cumulative BHR.
Figure 9: Mean eviction age across cache sizes for VIDEO trace.
375
by the Media-0, Media-1 and Media-2 traffic classes with traffic
volumes 40, 140 and 90 requests/second, respectively. We then
generate a trace as described in Section 4. The result is seen in
Figure 11a. The curves RHR-Gen (resp., BHR-Gen) and RHR-Orig
(resp., BHR-Orig) depict the rHRC (resp., bHRC) of the synthetic
trace and the original trace as predicted by FD (resp., bFD) calculus.
Next, we consider a traffic mix of the Image, Media and Web traffic
classes from the TC trace with traffic volumes 80, 8 and 250 MBps,
respectively. We observe similar results (Figure 11b).
5.2 Determining the synthetic trace length
For using TRAGEN for cache simulations, it is necessary to
determine how long a cache simulation should run, starting from
an empty cache. The answer depends on how quickly the hit rates
converge to a stationary value, such convergence depends on the
caching policy, cache size, and the nature of the trace. As an example,
we explore the convergence of the hit rate of the synthetic trace
produced by TRAGEN to the stationary RHR and BHR for an LRU
cache of size 500 GB. For the WEB and TC trace, the convergence
to a stationary RHR is slower and takes up to 20 million requests.
However, for the traces VIDEO and EU the convergence occurs
within a million requests. A possible explanation is that for the EU
and VIDEO trace, a cache size of 500 GB is small as compared to
the overall footprint of the trace. Whereas, for the WEB and TC
trace a cache size of 500 GB is large enough. Results are shown in
Figure 8a. Similarly, we explore the convergence of BHR for the
various traces in Figure 8b.
5.3 Comparison with alternate approaches
We will now discuss two alternate approaches that can be used to
generate synthetic traces, LRUSM and Naive Merge, and show why
both approaches fail to produce synthetic traces that have similar hit
rates as the original. Thus, neither approach allows the synthetic trace
to take the place of an original trace in realistic cache simulations.
5.3.1 LRUSM Algorithm. The LRUSM algorithm has been used
extensively in the synthetic trace generation community for CPU
caches and Web Caches. LRUSM generates synthetic traces that
capture the temporal locality of the original trace [5, 12, 26]. All
prior work in the synthetic trace generation literature that capture
temporal correlations use the LRUSM algorithm [5, 12].
We experimented with the LRUSM algorithm to produce a syn-
thetic trace. We find that the synthetic trace in almost all cases does
not have the same HRCs as the original trace. For instance, Fig-
ure 12a depicts the HRCs for the VIDEO trace (Table 1). Thus, we
conclude that LRUSM algorithm fails to generate a synthetic trace
with similar hit rate curves as the original trace.
Adapting LRUSM to variable-sized objects. The LRUSM algo-
rithm considers unit size objects to produce a synthetic trace, and
then assigns each object a size from the object size distribution. If a
FD is provided as an input, the LRUSM algorithm can be updated as
follows. The LRU stack is initialized with objects and are assigned
sizes from the object size distribution. In each iteration, on sampling
a stack distance ùë† from ùëÉ(ùë†), where ùëÉ(ùë†) =ùë° ùëÉùëü (ùë†, ùë°), the object
that falls at a stack distance ùë† is added to the synthetic trace and
re-inserted at the top of the stack. Now, observe that the probability
of ùë† falling on a large object is higher as compared to a small object.
020004000Number requests (x 10^5)0.00.20.40.60.81.0Request hit rate (RHR)VideoWebTCEU020004000Number requests (x 10^5)0.00.20.40.60.81.0Byte hit rate (BHR)VideoWebTCEU0.250.50.751.01.251.51.752.02.252.5Cache size (TB)10203040Eviction age (minutes)OriginalSyntheticTRAGEN: A Synthetic Trace Generator for Realistic Cache Simulations
IMC ‚Äô21, November 2‚Äì4, 2021, Virtual Event, USA
Trace
Length (mil. reqs)
Req. rate (reqs/sec)
Traffic (MBps)
No. of objects (mil.)
Avg. object size (KB)
Media-0 Media-1 Media-2 Media-3 Media-4 Media-5 Media-6 Web-7 Media-8 Web-9
6.95
5.38
0.756
0.02
69.83
128.44
82.73
27.682
22.56
151.3
43.98
28.33
288.3
2.31
10286
36.56
23.55
26.8
14.45
1026
9.73
6.248
0.8
0.028
71.65
66.48
42.82
434.8
2.49
10291
70.3
45.32
13
18.62
286.4
91.92
59.2
36
39.64
653
32.04
20.64
12
15.55
679.2
109.3
70.44
480
2.66
9727
Table 3: Trace description for the EU trace
(a) RHR on Video trace
(b) RHR on EU trace
(c) BHR on Video trace
(d) BHR on EU trace
Figure 10: Observed RHRs and BHRs of the Original and Synthetic trace for the various caching policies and cache sizes for the Video and EU trace.
(a)
(b)
Figure 11: Traffic mix results for (a) EU Trace, and (b) TC trace
(a)
(b)
Figure 12: LRUSM approach. (a) HRCs under the LRUSM approach
with stack initialized with unit size objects, (b) HRCs under LRUSM
approach with stack initialized with object sizes.
Thus, the synthetic trace is likely to have a much higher proportion
of large objects. This in turn, causes the BHR of the synthetic trace
to be much higher than the RHR of the original trace. The results for
the VIDEO trace can be seen in Figure 12b.
5.3.2 Naive Merge. TRAGEN uses FD (resp., BFD) calculus
to compute a model for traffic class mixes and uses that model for
synthetic trace generation. We now ask if a naive approach (which
we call Naive Merge) could be used to derive synthetic traces for
traffic class mixes instead. Naive Merge uses TRAGEN to generate
synthetic traces for individual traffic classes and then merges them
in time-order by assigning each request a time stamp.
We consider three ways of assigning timestamps to the synthetic
trace, (i) request rate (number of requests per second), (ii) byte rate
(number of bytes requested per second), and (iii) unique byte rate
(number of unique bytes requested per second) of the traffic class.
376
(a)
(b)
Figure 13: Approach naive merge. (a) rHRCs of the synthetic traces for
the EU trace (b) bHRCs of the synthetic traces for the TC trace.
Figure 13a and Figure 13b depict our findings. For the result in Fig-
ure 13a, we consider traffic classes eu-0 and eu-1 from the EU trace
(Table 3). We observe that the rHRC of the trace computed using
Footprint Descriptor (FD) of the traffic mix and the one computed
using the calculus align. Whereas, the rHRC of the trace computed
by using any of the merge techniques are not equal to the rHRC of
the original trace. To compare bHRCs, we repeat the experiment
using the traffic classes Download and Images from the TC trace (Ta-
ble 2). Again, we observe similar results, results seen in Figure 13b.
Thus, simpler timestamp-based approaches to traffic mixing does
not produce realistic synthetic traces, providing support for our use
of FD and bFD calculus.
6 Related work
Synthetic workload generation has been an active research area
in several disciplines of computer science. We briefly review the
relevant literature on workload characterization and generation in
internet based systems.
Tools for synthetic trace generation. The tool SpecWeb96 [17] is
amongst the first tools to generate a synthetic web workload. The
tool generates a sequence of HTTP GET requests such that the re-
quests satisfy the size and popularity distribution of an expected
web trace. The tool is however dormant. HttpPerf [43] is a similar
tool that is used to generate a trace to test the performance of a web
server. SURGE [5] is a more realistic web workload generator and
LRUFIFORANDOMSLRUS4LRUMARKERSCLOCKPLRU0.00.20.40.60.81.0Request hit rate (RHR)OriginalSynthetic500GB1TB2TBLRUFIFORANDOMSLRUS4LRUMARKERSCLOCKPLRU0.00.20.40.60.81.0Request hit rate (RHR)OriginalSynthetic500GB1TB2TBLRUFIFORANDOMSLRUS4LRUMARKERSCLOCKPLRU0.00.20.40.60.81.0Byte hit rate (BHR)OriginalSynthetic500GB1TB2TBLRUFIFORANDOMSLRUS4LRUMARKERSCLOCKPLRU0.00.20.40.60.81.0Byte hit rate (BHR)OriginalSynthetic500GB1TB2TB0.02.55.07.510.0Cache size (TB)0.00.20.40.60.81.0Hit rateRHR-SynthRHR-OrigBHR-SynthBHR-Orig0.000.050.100.150.20Cache size (TB)0.00.20.40.60.81.0Hit rateRHR-SynthRHR-OrigBHR-SynthBHR-Orig0.02.55.07.510.0Cache size (TB)0.00.20.40.60.81.0Hit rateLrusm:RHRLrusm:BHROrig:RHROrig:BHR0.02.55.07.510.0Cache size (TB)0.00.20.40.60.81.0Hit rate Lrusm:RHRLrusm:BHROrig:RHROrig:BHR0.02.55.07.510.0Cache size (TB)0.00.20.40.60.81.0Request hit rate (RHR)CalculusOriginalReqBytesUniqBytes0.000.250.500.75Cache size (TB)0.800.850.900.951.00Byte hit rate (BHR)CalculusOriginalReqBytesUniq-bytesIMC ‚Äô21, November 2‚Äì4, 2021, Virtual Event, USA
Anirudh Sabnis and Ramesh K. Sitaraman
generates a trace that matches the empirical measurements of popu-
larity distribution, object size distribution, request size distribution,
relative object popularity, temporal locality of reference, idle periods
of individual users. Some of the other tools with similar capabilities
are Web Polygraph [47], Globetraff [32], Geist [30]. Unlike our
work, these tools do not generate a synthetic trace that is similar to
the original trace in terms of hit rates.
The work in [45] captures the correlations between requests and
the popularity distribution of the original workload and generates a
trace that satisfies both. The work does not consider the size distri-
bution of the objects. The tool MediSyn [52], generates a trace with
properties specific to streaming media characteristics such as file
duration, encoding bit rate, session duration and non-stationary pop-
ularity of media accesses, but does not consider the cache hitrates.
The tool closest to our work is ProwGen [12]. ProwGen was used
to study the workload characteristics that impact the cache hit rate
of a proxy server by generating a synthetic trace that closely satisfies
the workload characteristics. The tool however is limited to gener-
ating web traffic traces and is unable to generate a trace with the
same cache hit rates as the original trace as it relies on the LRUSM
algorithm. We have shown in Section 5.3 that the LRUSM algorithm
fails to produce a synthetic trace that is similar to original production
traces. Further, the tool considers very small cache sizes (order of
MBs) and runs in O(ùëõ2), which makes it impractical considering the
current workload and much larger cache sizes. A comprehensive sur-
vey of the available workload generation tools and their capabilities
is provided in [18].
Unlike prior work, TRAGEN is the first tool to produce synthetic
traces with similar hit rates as the original traces for a cross-section
of modern traffic classes. This makes TRAGEN suitable for realistic
cache simulations. Further, unlike prior work that produce traces
that cater only to small cache sizes and trace lengths, TRAGEN
incorporates better data structures to produce sufficiently long traces
that satisfy the caching properties of large caches.
Characterizing the workload of Internet services. There exist