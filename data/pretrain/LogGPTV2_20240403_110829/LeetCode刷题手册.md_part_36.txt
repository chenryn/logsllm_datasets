func canFinish(n int, pre [][]int) bool {
//AOV网的拓扑排序
package leetcode
是否可以完成所有任务。
Read more about how a graph is represented.
for i := O; i != len(next); i++ 
for i := O; i =s，返回最短的连续子数组的返回值。
给定一个整型数组和一个数字 s，找到数组中最短的一个连续子数组，使得连续子数组的数字之和
题目大意
complexity is O(n log n). 
If you have figured out the O(n) solution, try coding another solution of which the time
Follow up:
Example 1: 
contiguous subarray of which the sum ≥ s. If there isn't one, return O instead.
Given an array of n positive integers and a positive integer s, find the minimal length of a 
题目
209. Minimum Size Subarray Sum
、不断加入右边的值，直到 sum >s，之和再缩小i的左边界，不断缩小直到 sum= s {
if （right+l） true
search(".ad")
searchC"pad") -> false
addword("mad")
void addword(word)
return []int{}
if len(next) == numcourses {
for i := O; i != len(next); i++ 
 return next 
C := next[i] 
v := frees[c]
if in[vv] == 0 { 
in[vv]-- 
next = append(next, vv) 
-, vv := range v {
-> true
-> true
---
## Page 345
代码
解题思路
可以表示任何一个字母。
search(word)。search(word）可以搜索文字或正则表达式字符串，字符串只包含字母.或 a-z。""
设计一个支持以下两种操作的数据结构：void addword(word)、boo1
●设计一个 wordDictionary 的数据结构，要求具有 addword(word）和 search(word）的操
func (this *wordDictionary) Search(word string) bool {
character
/** Returns if the word is in the data structure. A word could contain the dot
func (this *wordDictionary) Addword(word string) {
/** Adds a word into the data structure.
func Constructor21l() wordDictionary {
/** Initialize your data structure here. */
type wordDictionary struct { 
package leetcode
parent := this 
 return wordDictionary{children: make(map[rune]*wordDictionary)}
 children map[rune]*wordDictionary
for i, ch := range word {
parent := this 
parent.isword = true
isword 
样
这一题是第 208 题的加强版，在第 208 题经典的 Trie上加上了模糊查找的功能。其他实现一模一
for
作，并且具有模糊查找的功能。
if rune(ch) == 
if child, ok := parent.children[ch]; ok {
} else{ 
 parent = child 
parent.children[ch] = newchild 
newchild := &wordDictionary{children: make(map[rune]*wordDictionary)]
parent = newchild 
 ch := range word {
'.' to represent any one letter. */
 bool
---
## Page 346
Note:
Example:
once in a word.
are those horizontally or vertically neighboring. The same letter cell may not be used more than 
Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells 
Given a 2D board and a list of words from the dictionary, find all words in the board.
题目
212. Word Search I
1. All inputs are consist of lowercase letters a-z.
 Output: ["eat","oath"]
words = ["oath","pea","eat","rain"]
board = [ 
Input:
['o','a','a','n'],
['i','f','l','v']
['i','h',
['e','t','a','e'],
return len(parent.children) == 0 ll parent.isword
param_2 := obj.Search(word):
 obj .Addword(word) ;
 obj := Constructor(）;
parent = parent.children[rune(ch)]
} else if -, ok := parent.children[rune(ch)]; !ok {
return false
return isMatched 
isMatched := false 
if v.Search(word[i+l:]) {
 isMatched = true 
,'k','r'],
---
## Page 347
Example 1: 
determine the maximum amount of money you can rob tonight without alerting the police.
 Given a list of non-negative integers representing the amount of money of each house, 
into on the same night.
connected and it will automatically contact the police if two adjacent houses were broken
amount of money stashed. All houses at this place are arranged in a circle. That means the first
You are a professional robber planning to rob houses along a street. Each house has a certain 
题目
213. House Robber Il
代码
解题思路
邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。
house is the neighbor of the last one. Meanwhile, adjacent houses have security system 
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中"相邻"单元格是那些水平相邻或垂直相
单词。
给定一个二维网格 board 和一个字典中的单词列表 words，找出所有同时在二维网格和字典中出现的
题目大意
·想想更优的解法。
·这一题是第79 题的加强版，在第 79 题的基础上增加了一个 word 数组，要求找出所有出现在地
 2. The values of words are distinct.
func findwords(board [][]byte, words []string] []string 
package leetcode 
图中的单词。思路还是可以按照第 79 题 DFS 搜索，不过时间复杂度特别高！
return res
for.
res := []string{} 
if exist(board,v) {
res = append(res, v)
 v := range words {
~
---
## Page 348
代码
解题思路
高金额。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最
如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统,
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成
题目大意
 Example 2:
package leetcode
·解题思路和第198 完全一致，只需要增加额外的一个转换。由于首尾是相邻的，所以在取了第一
·这一题是第198题的加强版。
func rob213(nums []int) int {
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). 
Output: 4 
Input: [1,2,3,1]
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money =
Output: 3 
Input: [2,3,2]
if n == 2 { 
if n ==1 { 
if n == 0 {
n := len(nums)
的区间内找出总价值最多的解，两者取最大值即可。
个房子以后就不能取第 n个房子，那么就在[0,n-1]的区间内找出总价值最多的解，然后再[1,n]
邻居，在不触碰警报的情况下，问能够窃取的财产的最大值是多少？
return max(nums[0], nums[1])
 return nums[0]
 return 
0
Total amount you can rob = 1 + 3 = 4.
because they are adjacent houses.
。不过这次是在一个环形的街道中，即最后一个元素和第一个元素是
---
## Page 349
解题思路
找出数组中第K大的元素。这一题非常经典。可以用 O(n)的时间复杂度实现。
题目大意
You may assume k is always valid, 1 ≤ k ≤ array's length.
Note:
Example 2:
Example 1: 
sorted order, not the kth distinct element.
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the
题目
215. Kth Largest Element in an Array.
output: 4 
Input: [3,2,3,1,2,4,5,5,6] and k = 4 
output:5
Input: [3,2,1,5,6,4] and k = 2 