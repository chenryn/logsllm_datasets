To measure the effectiveness of our system in the presence of at-
tacks, we performed an attack by bringing down overlay nodes at
random. In our experiment, the client kept spreading data across all
overlay nodes, since he was unaware which of the overlay nodes
were being attacked. We then varied the portion of the overlay
nodes we attacked and we measured the throughput of the result-
ing link. Figure 7 shows the decrease in the uplink throughput of
the system when under attack. The attack happens on a random
fraction of the overlay nodes. When we do not use any replication
and depend on TCP to “recover” the lost packets, the connection
performs relatively well when the losses are up to 9%-10% of the
total packets transmitted. Notice that as we increase the packet
replication factor, we achieve higher network resilience, something
that we also expected from our analysis. Corresponding results for
latency are given in Figure 8.
Finally, we measured the number of tickets a single overlay node
can generate. The ticket can be broken into four parts: the session
key generation, the AES encryption of the ticket, the computation
of the UMAC tag and the encryption of the packet using the client’s
public key. It appears that even for small size public keys (e.g., 256
bits) the public key encryption takes up 95% of the ticket genera-
tion time. The number of tickets that can be produced by an overlay
node decreases as we increase the size of the client’s public key, as
shown in Figure 9. Using a 3GHz Intel Pentium 4 machine, we
were able to generate approximately 11,862 tickets/sec. In an ION
with 128 nodes, the ticket-generation subsystem could sustain 1.5
million new users per second, assuming a random distribution of
users across ION nodes.
6. RELATED WORK
As a result of its increased popularity and usefulness, the In-
ternet contains both interesting targets and enough malicious and
ignorant users that DoS attacks are simply not going to disappear
on their own; indeed, although the press has stopped reporting such
[1] explores separately the two main facets of the SOS architec-
ture, ﬁltering and overlay routing, with several alternative mech-
anisms considered. It is observed that in some cases, the various
security properties offered by SOS can still be maintained using
mechanisms that are simpler and more predictable. However, some
second-order properties, such as the ability to rapidly reconﬁgure
the architecture in anticipation of or in reaction to a breach of the
ﬁltering identity (e.g., identifying the secret servlet) are compro-
mised. In most other respects, the two approaches are very simi-
lar. An analysis of some security/performance design tradeoffs in
IONs appears in [23]. Wang et al. [22] used an online network
simulator to investigate the resistance of proxy networks (such as
SOS) against simple DoS attacks. They conclude that the resis-
tance of a proxy network to ﬂooding attacks increases linearly with
its size. However, they assume that users can instantaneously detect
attacked ION nodes and switch to new ones with zero overhead, an
assumption that did not hold for any ION architecture prior to ours.
[24] is the ﬁrst system to create stateless ﬂow ﬁltering by hav-
ing each router add “capabilities” to packets that traverse them; the
receiver of these packets is then responsible for sending these capa-
bilities to its peers, which will allow them to send trafﬁc at higher
rates (privileged trafﬁc). Unprivileged trafﬁc is limited to a frac-
tion of the available bandwidth; thus, although a DoS attack can
prevent new connections from being established (by overloading
the control channel used to communicate these capabilities), exist-
ing connections will be unharmed. Estrin et al. ﬁrst proposed a
capability-like mechanism for network packets in [8].
Gligor [9] proposed the use of a server that can produce tickets
at line speeds. Clients must obtain a ticket from this server be-
fore they are allowed to access a protected service. The approach
is primarily geared towards application-level DoS protection. An-
derson et. al [4] subsequently proposed a similar system for use
at the network layer of an Internet-like architecture designed with
a clean slate, assuming a distributed token server architecture and
rate-limiting/ﬁltering trafﬁc on routers based on these tokens.
7. CONCLUSIONS
We examined the vulnerability of indirection-based overlay net-
works (IONs), as used for DDoS protection, to more sophisticated
attackers than have been considered to date by proposed systems
such as SOS, I3, MayDay and Tor. Our scope is both the simple
types of ﬂooding attacks, as well as more sophisticated attackers
that can eavesdrop the victim’s communication link and focus their
attack on the speciﬁc hosts the victim attempts to connect to. Even
with limited resources, a sophisticated attacker can disrupt all the
victim’s attempts to communicate with other nodes. We presented
an analytical model that quantiﬁes the impact of such attacks on the
throughput of end-to-end communications, and quantiﬁed the re-
silience of ION DDoS defenses to simple congestion-based DDoS
attacks. To our knowledge, this is the ﬁrst non-trivial attack model
for DoS attacks in the literature.
We proposed the use of a spread-spectrum-like paradigm to cre-
ate per-packet path diversity. Using the same analytical models, we
quantiﬁed the resistance resistance of our system to DDoS attacks
and we showed that a reasonably sized overlay network can resist
attacks much larger than we have seen to date. Our performance
measurements using an experimental prototype on PlanetLab show
that, despite the interjection of an overlay mechanism between com-
municating peers, there is very little to no increase in end-to-end
latency when our system uses packet replication, and that through-
put drops by less than 15% in all cases. Finally, we show that we
can withstand attacks that involve millions of attackers, causing up
to 40% of overlay nodes to become unreachable.
Our approach offers an attractive solution against congestion-
based denial of service attacks in most environments, as it does not
require modiﬁcations to clients, servers, protocols, or routers both
in terms of hardware and in terms of existing software. Our plans
for future work include a better characterization of the tradeoffs
that we have explored so far, by introducing a coding scheme for
the data transmission that will adapt to the network characteristics
of each path used. Furthermore, we are looking into mechanisms
to protect our system against attackers that can take over overlay
nodes, subverting part of the infrastructure. Finally, we are inter-
ested in deployment and use of such a protection system on a larger
scale than our experimental testbed to acquire operational experi-
ence in a real environment.
8. REFERENCES
[1] D. G. Andersen. Mayday: Distributed Filtering for Internet
Services. In Proceedings of the 4th USENIX Symposium on
Internet Technologies and Systems (USITS), March 2003.
[2] D. G. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. N.
Rao. Improving Web Availability for Clients with MONET.
In Proceedings of the 2nd Symposium on Networked Systems
Design and Implementation (NSDI), May 2005.
[3] D. G. Andersen, A. C. Snoeren, and H. Balakrishnan.
Best-Path vs. Multi-Path Overlay Routing. In Proceedings of
the Internet Measurement Conferencee, October 2003.
[4] T. Anderson, T. Roscoe, and D. Wetherall. Preventing
Internet Denial-of-Service with Capabilities. In Proceedings
of the 2nd Workshop on Hot Topics in Networks (HotNets-II),
November 2003.
[5] M. Bailey, E. Cooke, F. Jahanian, J. Nazario, and D. Watson.
The Internet Motion Sensor: A Distributed Blackhole
Monitoring System. In Proceedings of the ISOC Symposium
on Network and Distributed Systems Security (SNDSS),
pages 167–179, February 2005.
[6] J. Black, S. Halevi, H. Krawczyk, T. Krovetz, and
P. Rogaway. UMAC: Fast and Secure Message
Authentication. Lecture Notes in Computer Science,
1666:216–233, 1999.
[7] T. Diament, H. K. Lee, A. D. Keromytis, and M. Yung. The
Dual Receiver Cryptogram and Its Applications. In
Proceedings of the 11th ACM Conference on Computer and
Communications Security (CCS), October 2004.
[8] D. Estrin, J. Mogul, and G. Tsudik. VISA Protocols for
Controlling Inter-Organizational Datagram Flow. IEEE
Journal on Selected Areas in Communications, May 1989.
[9] V. D. Gligor. Guaranteeing Access in Spite of Distributed
Service-Flooding Attacks. In Proceedings of the Security
Protocols Workshop, April 2003.
[10] K. P. Gummadi, H. V. Madhyastha, S. D. Gribble, H. M.
Levy, and D. Wetherall. Improving the Reliability of Internet
Paths with One-hop Source Routing. In Proceedings of the
6th Symposium on Operating Systems Design &
Implementation, December 2004.
[11] J. Ioannidis and S. M. Bellovin. Implementing Pushback:
Router-Based Defense Against DDoS Attacks. In
Proceedings of the ISOC Symposium on Network and
Distributed System Security (SNDSS), February 2002.
[12] M. Jakobsson and A. Juels. Proofs of Work and Bread
Pudding Protocols. In Proceedings of the IFIP TC6 & TC11
Joint Conference on Communications and Multimedia
Security, September 1999.
[13] A. D. Keromytis, V. Misra, and D. Rubenstein. SOS: Secure
Overlay Services. In Proceedings of ACM SIGCOMM, pages
61–72, August 2002.
[14] A. D. Keromytis, J. L. Wright, and T. de Raadt. The Design
of the OpenBSD Cryptographic Framework. In Proceedings
of the USENIX Annual Technical Conference, pages
181–196, June 2003.
[15] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F.
Kaashoek. The Click modular router. ACM Transactions on
Computer Systems (ToCS), 18(3):263–297, August 2000.
[16] A. Kuzmanovic and E. W. Knightly. Low-Rate TCP-Targeted
Denial of Service Attacks. In Proceedings of ACM
SIGCOMM, pages 75–86, August 2003.
[17] D. Moore, G. Voelker, and S. Savage. Inferring Internet
Denial-of-Service Activity. In Proceedings of the 10th
USENIX Security Symposium, pages 9–22, August 2001.
[18] W. G. Morein, A. Stavrou, D. L. Cook, A. D. Keromytis,
V. Misra, and D. Rubenstein. Using Graphic Turing Tests to
Counter Automated DDoS Attacks Against Web Servers. In
Proceedings of the 10th ACM International Conference on
Computer and Communications Security (CCS), pages 8–19,
October 2003.
[19] E. M. Nahum, M.-C. Rosu, S. Seshan, and J. Almeida. The
effects of wide-area conditions on WWW server
performance. In Proceedings of the ACM SIGMETRICS,
pages 257–267, June 2001.
[20] A. Stavrou, A. D. Keromytis, J. Nieh, V. Misra, and
D. Rubenstein. MOVE: An End-to-End Solution To Network
Denial of Service. In Proceedings of the ISOC Symposium on
Network and Distributed System Security (SNDSS), pages
81–96, February 2005.
[21] L. von Ahn, M. Blum, N. J. Hopper, and J. Langford.
CAPTCHA: Using Hard AI Problems For Security. In
Proceedings of EUROCRYPT, May 2003.
[22] J. Wang, X. Liu, and A. A. Chien. Empirical Study of
Tolerating Denial-of-Service Attacks with a Proxy Network.
In Proceedings of the 14th USENIX Security Symposium,
pages 51–64, August 2005.
[23] D. Xuan, S. Chellappan, and X. Wang. Analyzing the Secure
Overlay Services Architecture under Intelligent DDoS
Attacks. In Proceedings of the 24th International
Conference on Distributed Computing Systems (ICDCS),
pages 408–417, March 2004.
[24] A. Yaar, A. Perrig, and D. Song. An Endhost Capability
Mechanism to Mitigate DDoS Flooding Attacks. In
Proceedings of the IEEE Symposium on Security and
Privacy, May 2004.
APPENDIX
A. ANALYSIS OF SWEEPING ATTACKS
PROPOSITION 1. The percentage of users that will have to reset
their connections at least k > 1 times during the attack is:
Pk(tu, ta, pd) =
⌊
tu
ta
⌋
X
i=1
P(k−1)(tu − i · ta, ta, pd) · pd
(1)
with tu: avg user time, ta: attack time, pd: % of nodes attacked
simultaneously. We assume immediate attack detection (td = 0).
PROOF. The percentage of users that will be affected by the at-
tack at least once is:
P1(tu, ta, pd) =
tu
ta
· pd
(2)
Notice that the above probability can go above 100% if tu >>
ta, meaning that the attack will certainly affect the clients possibly
more than once. When P1 > 100% we say that P1 = 100%, i.e.,
P1 = min(100, tu
ta
· pd). We will prove (1) using induction.
Base case for k = 2, in that case (1) becomes:
P2(tu, ta, pd) =
⌊
tu
ta
⌋
X
i=1
P1(tu − i · ta, ta, pd) · pd
(3)
In our model, the attacker can only attack tu
ta
· pd sets of nodes.
We say that a client suffers an attack when the set of overlay nodes
that he is connected to is attacked. The probability for a client to
be at the ﬁrst node is pd. After realizing an attack is underway, in
td time, the client will select a new overlay node. The probability
that this new overlay node is part of the attack window, and thus
the client will suffer another attack, is P1(tu − ta, ta, pd) since the
attacker will have to spent ta time attacking the ﬁrst set of nodes.
Thus, the probability to be attacked at least twice when the client
happens to be in the ﬁrst set of attacked nodes is P1(tu−ta, ta, pd)·
pd. For a client connected to the second set of nodes the probability
to be attacked twice is P1(pd, tu − 2 · ta, ta) · pd since the attacker
will have to spent 2 · ta time attacking the ﬁrst and the second node
before reaching any other node. Another way of saying the same
thing is that the user will have tu − 2 · ta time left in the system re-
ducing the probability of being attacked. A client that is connected
to a node in the ith set has a probability P1(tu − i · ta, ta, pd) to
be re-attacked. A client has probability pd to be connected to a set
and by summing up the fraction of clients connected to ith set for
which tu − i · ta > 0, we get (3).
We assume that the formula holds for k = j and we will prove
that it holds for k = j +1. Pk is the probability that a client will be
re-attacked at least k times. If the client is on the ﬁrst set attacked,
the probability of being attacked j + 1 times is the probability of
initially being at the ﬁrst set, which is pd, multiplied by the proba-
bility that he will select overlay nodes which can be re-attacked j
times in the tu − ta remaining time. The probability of both be-
ing in the ﬁrst attacked set and being re-attacked j more times is:
P 1
j+1 = Pj (tu − ta, ta, pd) · pd. For a node that connects initially
to the ith set we get that the probability of being attacked j + 1
times is P i
j+1 = Pj(tu − i · ta, ta, pd) · pd. If we sum all the sets
i for which tu − i · ta > 0, we get (1).
PROPOSITION 2. In the general case. where td ≥ 0, the per-
centage of nodes that will have to reset their connections at least
k > 1 times during the attack is:
a) if td ≥ ta we have that: Pk(tu, ta, pd) = (
b) if td  0, we assume
that the user is not going to be discouraged by the attack and will
want to use the system for tu time.
We derive (2) using the fact that since td ≥ ta, the client will
have the same probability to select a set of overlay nodes that will
be attacked as it had at the beginning of the attack: tu
· pd. The
ta
percentage of the users that will be attacked k times is ( tu
ta
Equation (4) follows from proposition 1 if we change the usage
time of a user from tu to tu + td, i.e., the user will have to pay
a penalty of td each time he is attacked, increasing his total time
usage time by the same amount.
· pd)k