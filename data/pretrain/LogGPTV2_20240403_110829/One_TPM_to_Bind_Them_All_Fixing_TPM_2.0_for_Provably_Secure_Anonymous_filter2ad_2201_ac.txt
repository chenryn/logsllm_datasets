### Modified TPM 2.0 Interface

**Figure 1: Our proposed modified TPM 2.0 interface (changes with respect to the current specification are highlighted in blue).**

### Variables and Their Types

**TPM:**
- **tsk**: Secret key held inside the TPM (in the DAA part of the platform secret key).
- **tpk**: Public key corresponding to tsk, i.e., \( \text{tpk} = \bar{g}^{\text{tsk}} \).
- **\(\bar{g}\)**: Fixed generator in all TPMs.
- **\(\tilde{g}\)**: Cleared generator created in TPM.Commit, with \(\tilde{g} \leftarrow H_{G1}(\text{bsnE})\) if \(\text{bsnE} \neq \bot\) and \(\tilde{g} \leftarrow \bar{g}\) otherwise.
- **hsk**: Secret key held by the host (in the DAA part of the platform secret key), set \(\text{hsk} = 1\) if not needed.
- **y1**: See SPK (1); if \( y1 \in G_T \) then \(\hat{g}_2\) is a mandatory input.
- **bsnE**: Basename for generator \(\tilde{g} \leftarrow H_{G1}(\text{bsnE})\), if \(\text{bsnE} = \bot\) then \(\tilde{g} \leftarrow \bar{g}\).
- **δ**: See SPK (1), set \(\delta = 1\) if not needed.
- **\(\hat{g}_2\)**: \( G_2 \) if \( y1 \in G_T \), or \(\bot\) if \(\hat{g}_2 \neq \bot\); it moves proof to \( G_T \) by setting \(\hat{g} \leftarrow e(\tilde{g}, \hat{g}_2)\); if \(\hat{g}_2 = \bot\) then \(\hat{g} \leftarrow \tilde{g}\).
- **γ**: \( Z_p \)
- **bsnL**: Basename for generator \( j \leftarrow H_{G1}(\text{bsnL}) \) if \(\text{bsnL} \neq \bot\).
- **y3**: See SPK (1), set \( y3 = \bot \) if not needed.
- **\(\alpha_i\)**: See SPK (1), input given as part of \(\{(\alpha_i, b_i, \beta_i, \gamma_i)\}\).
- **\(b_i\)**: Same group as \( y1 \).
- **\(\beta_i\)**: \( G_1 \)
- **\(\gamma_i\)**: Same group as \( y3 \).
- **mh**: Message that the host adds to an attestation.
- **mt**: Message the TPM attests to.

**Figure 2: Overview of variables used within the TPM and in our Prove protocol.**

### Protocol Description

The protocol allows the host to add a key hsk to the witness for tsk because, as we will see in later sections, this can improve the privacy of DAA schemes. Note that we could trivially generalize the proof statement (1) to include additional terms that do not contain \(\gamma \cdot (\text{tsk} + \text{hsk})\) as a witness, but for ease of presentation, we omit these additional terms.

The host can add any message \( mh \) to the proof. It also chooses \( mt \), but this is a value the TPM attests to and will be checked by the TPM.

The host can create such a proof using the Prove protocol described in Figure 3. We assume a perfectly secure channel between the host and TPM, i.e., the adversary does not notice the host calling TPM commands. Note that before starting the proof, the host may not know \( y2 \), as it does not know tsk, but learns this value during the proof because it is given as output of the Prove protocol. How to verify such proofs using the VerSPK algorithm is shown in Figure 3 as well. Note that verification does not require any participation of the TPM.

Figure 2 gives a brief overview of the required parameters and their respective types and conditions.

The completeness of these proofs can easily be verified. The proof is sound as we can extract a valid witness using the standard rewinding technique.

### Example for Using Prove

We now give a simple example to show how the Prove protocol must be invoked and provide some intuition on how the final proof is assembled by our protocol.

Suppose we want to prove:
\[ \text{SPK} \{ (\text{tsk} + \text{hsk}) : d = (H_{G1}(\text{bsnE})^\delta)^{(\text{tsk} + \text{hsk})} \land (H_{G1}(\text{bsnL}))^{(\text{tsk} + \text{hsk})} \} (mh, mt), \]
where the TPM holds tsk and the host knows hsk. The host will add hsk to the witness for tsk, which is the first input to Prove. The second argument is the left-hand side of the first equation, which is \( d \). The generator for the witness \(\text{tsk} + \text{hsk}\) is \( (H_{G1}(\text{bsnE})^\delta) \), which is passed on to the Prove protocol by giving bsnE and δ as the next arguments. The protocol has the option to move the proof to \( G_T \) by passing a value \(\hat{g}_2\), but as this proof takes place in \( G_1 \), we enter \(\hat{g}_2 = \bot\). We can prove knowledge of \(\gamma \cdot (\text{tsk} + \text{hsk})\), but as we want to use witness \(\text{tsk} + \text{hsk}\), we pass \(\gamma = 1\). In the second equation, we use \( H_{G1}(\text{bsnL}) \) as the generator, so we give argument bsnL.

### Prove and VerSPK Algorithms

**Prove(hsk, y1, bsnE, δ, \(\hat{g}_2\), γ, bsnL, y3, \(\{(\alpha_i, b_i, \beta_i, \gamma_i)\}\), mh, mt):**
1. If \(\text{bsnE} \neq \bot\), set \(\tilde{g} \leftarrow H_{G1}(\text{bsnE})\), otherwise set \(\tilde{g} \leftarrow \bar{g}\).
2. If \(\hat{g}_2 \neq \bot\), set \(\hat{g} \leftarrow e(\tilde{g}, \hat{g}_2)\), otherwise set \(\hat{g} \leftarrow \tilde{g}\).
3. If \(\text{bsnL} \neq \bot\), set \( j \leftarrow H_{G1}(\text{bsnL}) \).
4. Call TPM.Commit(bsnE, bsnL) → (commitId, \(\bar{nt}\), E, K, L).
5. Take \(\text{rhsk} \leftarrow Z_p\), set \( E' \leftarrow (E \cdot \tilde{g}^{\text{rhsk}})^\gamma \cdot \delta \). If \(\text{bsnL} \neq \bot\), set \( K' \leftarrow (K \cdot j^{\text{rhsk}})^\gamma \) and \( L' \leftarrow (L \cdot j^{\text{rhsk}})^\gamma \).
6. If \(\text{bsnL} \neq \bot\), set \( y2 \leftarrow K' \cdot \prod_{i=1}^l (b_i^{\text{rαi}}) \). If \( y3 \neq \bot\), set \( t3 \leftarrow \prod_{i=1}^l (\gamma_i^{\text{rαi}}) \) and \( t2 \leftarrow \bot \) else.
7. Set \( m_h \leftarrow (mh, y1, \hat{g}^\delta, \{ (b_i, \beta_i, \gamma_i) \}, t1, y2, \text{bsnL}, t2, y3, t3) \).
8. Call TPM.Hash(mt, \( m_h \)) → c.
9. Take \(\text{nh} \leftarrow \{0, 1\}^{\text{ln}}\).
10. Call TPM.Sign(commitId, c, nh) → (nt, s).
11. Check that \(\bar{nt} = H("nonce", nt)\) and set \( n \leftarrow \text{nh} \oplus \text{nt} \).
12. Set \( s' \leftarrow \gamma \cdot (s + \text{rhsk} + c) \).
13. Check \( (\hat{g}^\delta)^{s'} = E' \cdot K'^c \cdot j^s \).
14. Set proof \(\pi \leftarrow (c', s')\).

**VerSPK(π, y1, \(\hat{g}^\delta\), y2, bsnL, y3, \(\{(\alpha_i, b_i, \beta_i, \gamma_i)\}\), mh, mt):**
1. Parse \(\pi\) as \((c', \{s_{\alpha_i}\})\).
2. Set \( t1 \leftarrow y1^{c'} \cdot \prod_{i=1}^l (b_i^{s_{\alpha_i}}) \).
3. If \(\text{bsnL} \neq \bot\), set \( t2 \leftarrow y2^{c'} \cdot \prod_{i=1}^l (j^{s_{\alpha_i}}) \), otherwise set \( t2 \leftarrow \bot \).
4. If \( y3 \neq \bot\), set \( t3 \leftarrow y3^{c'} \cdot \prod_{i=1}^l (\gamma_i^{s_{\alpha_i}}) \), otherwise set \( t3 \leftarrow \bot \).
5. Output 1 if \( c' = H("FS", n, H("TPM", mt, (mh, y1, \hat{g}^\delta, \{ (b_i, \beta_i, \gamma_i) \}, t1, y2, \text{bsnL}, t2, y3, t3))) \), and 0 otherwise.

**Figure 3: Prove protocol and VerSPK algorithm to create and verify zero-knowledge proofs via the TPM interfaces from Fig. 1.**

### Security of Prove

**Zero-Knowledge of SPKs with a Corrupt TPM:**
An SPK created with the Prove protocol is zero-knowledge in the random oracle model, even when the TPM is corrupt. That is, we prove the absence of any subliminal channel that a malicious TPM could use to break the privacy of the platform. In Section 5, we show that this allows one to devise DAA schemes that guarantee privacy even when the TPM is malicious.

**Lemma 1 (Privacy of SPKs with a TPM):**
The signature proofs of knowledge generated by Prove as defined in Fig. 1 are zero-knowledge, even when the TPM is corrupt.

**Proof (sketch):**
A corrupt TPM may block the creation of the proof, but if it succeeds, it is zero-knowledge. The TPM is involved in proving knowledge of \(\gamma \cdot (\text{tsk} + \text{hsk})\). The host changes the r-value to \(\gamma \cdot (\text{rtsk} + \text{rhsk})\), with \(\text{rhsk}\) chosen by the host. It takes \(\text{rhsk} \leftarrow Z_p\), so \(\text{rtsk} + \text{rhsk}\) is uniform in \(Z_p\) regardless of how the TPM chooses \(\text{rtsk}\). Since \(\gamma \neq 0\), \(\gamma \cdot (\text{rtsk} + \text{rhsk})\) is still uniform in \(Z_p\).

The TPM also chooses a nonce \(\text{nt}\). It must first commit to this nonce with \(\bar{nt} = H("nonce", \text{nt})\). The host then chooses a nonce \(\text{nh}\) uniformly at random in \(\{0, 1\}^{\text{ln}}\), and the TPM must work with \( n = \text{nh} \oplus \text{nt} \), and show that it computed this correctly. Clearly, \( n \) is uniform if \(\text{nh}\) is uniform.

Since we know the distribution of every part of the zero-knowledge proof, even when the TPM is corrupt, we can simulate proofs of an honest host with a corrupt TPM.

**Unforgeability of SPKs with an Honest TPM:**
We now show that proofs generated by Prove are unforgeable with respect to \( mt \), i.e., if the TPM is honest, a corrupt host cannot create an SPK for message \( mt \) that the TPM did not approve to sign. We consider a corrupt host with oracle access to an honest TPM. The TPM executes TPM.Create, outputting \(\text{tpk} \leftarrow \bar{g}^{\text{tsk}}\). The corrupt host cannot create SPKs of structure (1) where tsk is protected by the TPM and \(\gamma\) and \(\text{hsk}\) are known and the TPM never signed \( mt \). We require the host to output \(\gamma\) and \(\text{hsk}\) along with his forgery. In a protocol, this means that these values must be provided.