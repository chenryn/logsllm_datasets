.BR klogd (8).
.SS "`profile=N'"
用来激活一个核心记录程序。
如果你需要了解核心在什么地方消耗其CPU周期，可以通过设置
.I prof_shift
为一个非零值来激活核心记录程序。
可以通过在编译内核的时候指定 CONFIG_PROFILE 值也可以通过 "profile=" 选项来指定
.I prof_shift
的值。
当
.I prof_shift
通过以上方式指定为 N，或通过 CONFIG_PROFILE_SHIT 的方式指定，
或者直接使用其缺省值 2 的时候，
这个值表示记录程序使用 prof_shift 个时间间隔进行记录：
每个时间间隔是一个时钟滴答。
当系统执行核心代码的时候，一个记数器的值会不断的增加。
.IP
profile[address >> prof_shift]++;
.LP
原始的配置文件可以从
.IR /proc/profile .
中读到。或者你也可以使用象 readprofile.c 之类的工具来阅读配置文件。任何写到
.I /proc/profile
中的操作将清除记数器。
.SS "`swap=N1,N2,N3,N4,N5,N6,N7,N8'"
设置控制核心的虚拟存储交换算法的 8 个参数。这8个参数是
max_page_age, page_advance, page_decline, page_initial_age, 
age_cluster_fract, age_cluster_min, pageout_weight, bufferout_weight。
只能用于核心控制。
.SS "`buff=N1,N2,N3,N4,N5,N6'"
设置核心缓存管理的 6 个参数，分别是
max_buff_age, buff_advance, buff_decline,
buff_initial_age, bufferout_weight, buffermem_grace。
同样也只能用于核心控制
.SH "使用内存虚拟磁盘的启动参数"
（该参数只在核心使用 CONFIG_BLK_DEV_RAM 进行编译后才有效）
在通常情况下，在 Linux 下使用一个内存虚拟磁盘（RAMDISK）并不是一个好的方法 - 
因为系统会自动、高效的使用可用的内存。
但是当用软盘启动的时候（或者当建立一个启动软盘的时候），
将软盘的内容读到一个内存虚拟磁盘中是非常有用的。
另外的情况也有可能是有一些模块（或者是文件系统又或者是硬件的）
必须在主磁盘被访问前被调到内存中来。
在 1.3.48 版本的 Linux 中，ramdisk 的操作被彻底的改变了。
在 1.3.48 以前的版本中，内存是静态分配的，"ramdisk = N" 参数提供内存的大小。
（这些也能够在核心被编译的时候被设置，或者也可以使用
.BR rdev (8).来进行设置）
从 1.3.48 开始，内存虚拟磁盘开始使用高速缓存，而且可以动态的增加其空间。
如果需要了解有关最新的内存虚拟磁盘设置（比如你要了解怎么使用
.BR rdev (8)
来进行ramdisk的设置）
请查看
.IR /usr/src/linux/Documentation/ramdisk.txt .
有关的参数一共有四个，两个是布尔变量，两个是整型值。
.SS "`load_ramdisk=N'"
如果 N=1，载入一个内存虚拟磁盘。如果 N=0，不载入内存虚拟磁盘（这是缺省值）。
.SS "`prompt_ramdisk=N'"
如果 N=1，需要提示插入软盘。（这是缺省值）
如果 N=0，没有提示。（因此，这个参数永远也不会需要）
.SS "`ramdisk_size=N' 或者 `ramdisk=N'
设置内存虚拟磁盘的最大空间为 N kB。缺省值是 4096 kB (4MB)。
.SS "`ramdisk_start=N'"
设置启动块数值（也就是内存虚拟磁盘从软盘的多少偏移量位置开始）为 N。
由于紧跟在内存虚拟磁盘后面的是核心映象文件，所以这个设置是必要的。
.SS "`noinitrd'"
（只有核心在编译时使用了 CONFIG_BLK_DEV_RAM 标志和
CONFIG_BLK_DEV_INITRD 标志时才会有效）
目前，我们基本上可以通过编译核心使其支持使用初始化内存虚拟磁盘
（initrd:Initial Ramdisk）。当启用 initrd 的时候，
启动进程会载入核心和一个已经初始化的内存虚拟磁盘，
然后核心会将 initrd 转变为一个"普通的"内存虚拟磁盘，
并将它激活为可读写的根设备。接下来，会被执行 /linuxrc，
"真正的"根文件系统被激活，而 initrd 文件系统则被转移到 /initrd 目录下。
最后顺序执行正常的启动程序（比如说是 /sbin/init 程序）。
如果希望得到关于 initrd 的详细的介绍，可以参考
.IR /usr/src/linux/Documentation/initrd.txt．
自然，'noinitrd' 参数告诉核心，尽管核心是按照使用 initrd 的参数来编译的，
但是也不需要使用我们上面描述的过程。但是，仍然保留 initrd 的所有数据到
.IR /dev/initrd .
目录下。
（该设备只能被使用一次，数据在最后一个使用 initrd 的进程被关闭后会释放掉）
.IR /dev/initrd ．）
.SH "SCSI设备启动参数"
关于这个区域的一些符号说明：
.I iobase
第一个SCSI主设备占用的I/O端口。它用 16 进制的数据指定，一般介于 0x200 到 0x3ff 之间。
.I irq
SCSI 卡设置的硬件中断号。具体的值取决于 SCSI 卡的具体要求，
一般使用的中断号是 5，7，9，10，11，12 和 15。
其他的中断号一般会被一些外设所占用，比如说，IDE 接口的硬盘，软盘驱动器，串口等等。
.I scsi-id
SCSI 适配器在 SCSI 总线上使用的用来标识自身的识别号码（ID）。
只有一部分 SCSI 适配器允许你改动该 ID 的值，大部分都是被固化好的。
缺省值一般是 7，可是，在 Seagate 和Future Domain TMC-950 的板卡上是 6。
.I parity
是否允许 SCSI 适配器在交换数据的时候使用奇偶效验。
指定一个非零值，奇偶效验会起用，如果指定为零则不会启动奇偶效验。
同样，不是所有的 SCSI 适配卡支持选择奇偶效验的启动参数。
.SS "`max_scsi_luns=...'"
一个 SCSI 设备能够使用一些包括它自己在内的"子设备"。
最常用的例子是现在的 SCSI CD-ROM 设备能够同时处理多张光盘。
每张光盘使用"逻辑单元号码"(LUN)来确定其位置。
当然，大部分设备，比如硬盘，磁带机都只能处理一个设备，因此它们的 LUN 会被设置为 0
一些设计上有缺陷的 SCSI 设备一旦发现 LUN 号码不为零时，就可能不再继续工作。
因此，如果在编译的时候没有设置 CONFIG_SCSI_MULTI_LUN 标志，
新的核心将使用 0 作为缺省值。
如果需要在启动的时候指定 LUN 的值，可以使用 "max_scsi_luns=n" 作为启动参数，
而 n 是一个大于 1 小于 8 的数值。
为了避免上面描述的问题，使用 n=1 可以避免那些设备的造成的错误。
.SS "SCSI 磁带配置"
一些 SCSI 磁带设备的启动设置能够使用下面的格式来进行：
.IP
.BI st= buf_size[,write_threshold[,max_bufs]]
.LP
前面的两个数字指定单元的大小（kB），缺省的值
.I buf_size
是 32kB，最大的值可以指定为 16384kB。
.I write_threshold
是磁带得到的缓存区大小，缺省的是 30kB。
其最大的缓存值依据不同的驱动设备的个数而得到不同的值，缺省值是两个设备。
缺省的格式可能象下面这样
.IP
st=32,30,2
.LP
你能够在核心源码的 scsi 目录下的 README.st 中看到所有的细节。
.SS "Adaptec aha151x, aha152x, aic6260, aic6360, SB16-SCSI 配置"
在这一句中 aha 数值代表适配卡类型，aic 数值表示适配卡的 SCSI 芯片类型，
也包括象 Soundblaster-16 这样的 SCSI 设备。
SCSI 主设备探测程序将从已经安装好的 BIOS 中进行查找，
如果没有的话，该检测将不会找到你的设备。
那么，你就必须使用以下格式的启动参数：
.IP
.BI aha152x= iobase[,irq[,scsi-id[,reconnect[,parity]]]]
.LP
如果驱动程序是以调试模式编译的话，第六个值能够被指定设置调试的级别。
其他的参数已经在上面描述过了。值得一提的是
.I reconnect
参数如果是非零值就能够允许设备"断连和重新连接"。下面是一个例子。
.IP
aha152x=0x340,11,7,1
.LP
要注意到的是参数必须按指定的顺序来设定，
这意味着如果你需要指定奇偶参数的话你就必须指定其他的所有参数。
.SS "Adaptec aha154x 配置"
aha1542 系列的适配卡上有一个 i82077 软盘控制器，aha1540 系列的卡没有。
这种卡叫做总线主控卡，它们能够通过参数的设置"合理"的与其他设备共享总线。
它们的启动参数就象下面这样：
.IP
.BI aha1542= iobase[,buson,busoff[,dmaspeed]]
.LP
通常可用的 iobase 值会是 0x130，0x134，0x230，0x234，0x330，0x334 其中的一个。
兼容的卡能够允许使用其他值。
.IR buson ", " busoff
值表示的是该卡占用 ISA 总线的时间（以微秒计）。缺省值是 11 微秒开，4 微秒关，
这样其他的卡（比如说基于 ISA 总线的 LANCE 以太网卡）就能够有机会访问 ISA 总线。
.I dmaspeed
值代表直接存储访问 （DMA） 的传输速度 （以MB/秒为单位）。
缺省值是 5MB/秒。
较新版本的卡允许你使用软件设置来选择该值，老版本的卡使用跳线来设置。
如果你的主板支持的话，你能够将该值提高到 10MB/秒。
如果使用 5MB/秒以上的传输速度，你就应该进行很小心的实验。
.SS "Adaptec aha274x, aha284x, aic7xxx 配置"
这些板卡能够接受象下面这样格式的参数：
.IP
.BI aic7xxx= extended,no_reset
.LP
.I extended
值，如果是非零的话，表明大容量磁盘的扩展转换模式可以被使用。而
.I no_reset
值如果是非零的话，告诉驱动程序在设置 SCSI 卡后重新启动时不要重新设置 SCSI 总线。
.SS "AdvanSys SCSI Hosts configuration (`advansys=')"
AdvanSys 驱动程序能够接收（最多） 4 个 I/O 地址用于来探测 AdvanSys SCSI 卡。
要注意的是这些值（如果使用了它们）并不会对 EISA 总线或者 PCI 总线的检测有任何作用。
它们只能用来检测 ISA 总线和 VLB 总线型的卡。
另外，如果驱动程序是使用调试模式编译的话，
调试级别能够通过加入一个 0xdeb[value] 参数来设定。
value 可以是 0-f（16进制），代表可以得到多达 16 个级别的调试信息。
.SS "AM53C974"
.IP
.BI AM53C974= host-scsi-id,target-scsi-id,max-rate,max-offset
.LP
.SS "BusLogic SCSI Hosts 配置 (`BusLogic=')"
.IP
.BI BusLogic= N1,N2,N3,N4,N5,S1,S2,...
.LP
作为更深层次的讨论，我们来分析一下 BusLogic 命令行参数，参考一下
.IR /usr/src/linux/drivers/scsi/BusLogic.c
(在我看的核心版本中是3149-3270行). 下面的文字是一段精辟的摘录
参数 N1-N5 是整数。参数 S1 是字符串。N1 是适配卡的 I/O 地址。
N2 是标记队列深度（Tagged Queue Depth），
是为那些支持标记队列（Tagged Queue）的目标设备而设置的。
N3 是总线停滞时间（以秒计），
这是表示从 SCSI 适配卡重新启动 SCSI 总线到发出一个 SCSI 指令之间的时间。 
N4 是区域选项（只适合特定的单个适配卡）
N5 是全局选项（针对所有的适配卡） 
字符串参数用来对于标记队列控制
（TQ:Default，TQ:Enable，TQ:Disable，TQ:），
出错处理（ER:Default，ER:HardReset，ER:BusDeviceReset，ER:None，ER:）
和适配卡检测（NoProbe，NoProbeISA，NoProbePCI）。
.SS "EATA/DMA 配置"
缺省的需要检测的 I/O 端口能够使用以下的参数来改变：
.IP
.BI eata= iobase,iobase,... .
.LP
.SS "Future Domain TMC-16x0 配置"
.IP
.BI fdomain= iobase,irq[,adapter_id]
.LP
.SS "Great Valley Products (GVP) SCSI 控制器配置"
.IP
.BI gvp11= dma_transfer_bitmask
.LP
.SS "Future Domain TMC-8xx, TMC-950 配置"
.IP
.BI tmc8xx= mem_base,irq
.LP
在这里，
.I mem_base
值是卡所使用的内存映射的 I/O 区域值。
常见的值会是 0xc8000，0xca000，0xcc000，0xce000，0xdc000，0xde000。
.SS "IN2000 配置"
.IP
.BI in2000= S
.LP
这里 S 是一个用逗号分隔的关键字 [：值]
可以被识别的关键字（有可能伴随着值）是：
ioport:addr, noreset, nosync:x, period:ns, disconnect:x,debug:x, proc:x.