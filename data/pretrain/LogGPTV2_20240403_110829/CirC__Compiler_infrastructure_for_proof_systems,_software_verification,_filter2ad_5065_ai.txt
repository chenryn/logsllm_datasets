File
CirC
Constraints
Time (s)
Circom
Constraints
Time (s)
aliascheck test
babyadd tester
babycheck test
babypbk test
binsub test
constants test
eddsamimc test
eddsaposeidon test
edwards2montgomery
escalarmulany test
escalarmulﬁx test
greatereqthan
greaterthan
isequal
iszero
lesseqthan
lessthan
mimc sponge hash test
mimc sponge test
mimc test
montgomery2edwards
montgomeryadd
montgomerydouble
mux1 1
mux2 1
mux3 1
mux4 1
pedersen2 test
sha256 2 test
sign test
smtprocessor10 test
smtveriﬁer10 test
sum test
261
6
3
776
49
1
5712
4208
2
2554
776
65
65
2
2
65
65
2640
660
364
2
3
4
1
3
5
9
701
30134
262
7895
4783
97
0.10
0.08
0.09
0.42
0.07
0.08
0.83
1.07
0.08
0.36
0.44
0.11
0.10
0.08
0.07
0.07
0.09
0.24
0.14
0.08
0.06
0.05
0.07
0.07
0.07
0.07
0.07
0.40
53.77
0.13
5.07
2.72
0.07
261
6
3
776
49
1
5712
4208
2
2554
776
65
65
2
2
65
65
2640
660
364
2
3
4
2
3
5
9
701
30134
262
7895
4783
97
0.30
0.30
0.27
4.96
0.22
0.13
19.05
18.44
0.15
1.18
5.00
0.18
0.17
0.17
0.18
0.17
0.17
0.71
0.31
0.20
0.18
0.13
0.13
0.15
0.20
0.21
0.22
3.91
80.88
0.33
158.39
50.12
0.20
Figure 23. CirC vs. the Circom compiler on the Circom test suite.
Benchmark
CirC
Constraints
Time (s)
Pequin
Constraints
Time (s)
sparse matvec
mm
rle decode
mergesort
kmp search
ptrchase
boyer moore
5806
27000
4560
10400
75650
168
2016
1.47
577.97
1.10
3.32
23.13
0.11
0.91
23466
27001
9847
19781
163664
1993
5612
7.63
17.44
6.23
5.45
30.56
1.43
2.06
Figure 24. CirC vs. the Pequin compiler on C-language benchmarks from [11].
For benchmarks that use Buffet’s loop-ﬂattening directives,
we manually apply Buffet’s C-to-C ﬂattening pass. This is
identical to the way that Pequin uses loop ﬂattening, except
that Pequin invokes the source-to-source transformation auto-
matically as the ﬁrst step in compilation.
Figure 24 shows the results. Generally, CirC produces
many fewer constraints. This is because these benchmarks—
similar to ptrs-8 from our main evaluation—are bottlenecked
on accesses to small arrays. Recall (§5.1) that CirC compiles
small arrays more efﬁciently than Pequin.
Since small array accesses are the bottleneck, we think that
this benchmark set portrays CirC in an unfairly favorable light.
Nonetheless, we include these benchmarks for consistency
with [11]; see Section 5.1 for a fairer comparison (in our view).
Appendix B.
ZKlog abstract syntax
Figure 25 shows the abstract syntax of ZKlog, our Datalog
dialect. A type is a bool, ﬁeld element, unsigned integer, or a
ﬁxed-size array. A rule holds for some input variables if any
2266
(cid:96) ∈ constant literals
n ∈ N i ∈ identiﬁers
⊕ ∈ binary ops. (cid:9) ∈ unary ops.
τ ::= un | bool | field | τ [n]
q ::= public | 
d ::= i : q τ
t ::= (cid:96) | i | t ⊕ t | (cid:9) t | t[t] | [ (cid:126)t ]
a ::= t | i( (cid:126)t )
c ::= ∃(cid:126)d. (cid:126)a
r ::= i( (cid:126)d ) :- (cid:126)c
types
qual. types
declarations
terms
atoms
cases
rules
Figure 25. The abstract syntax of our Datalog dialect. For a term class
represented by x, (cid:126)x denotes lists of such terms.
c2
c1
c0
a
(hi)
t1
b
×
(cid:107) t0 (lo)
overﬂow?
×2
+1?
of.?
×2
+1?
+1?
+
overﬂow?
+
?
w
o
e r ﬂ
+1? o
v
c2
c1
c0
Figure 26. Dataﬂow for the code in Figure 19. Conditional
increments
handle overﬂow. If the circled operation overﬂows, c2 should be (but is not)
incremented again.
case does. Each case can quantify existential variables and
holds if all of its atoms hold for some variable assignment.
Each atom is a rule application or a term: a literal, variable,
array, or an operator applied to other terms. A program com-
prises rules, including a distinguished entry rule: main.
Types can be qualiﬁed as public. For a zero knowledge
proof, inputs to the entry rule are public if so qualiﬁed and
private otherwise. All variables quantiﬁed by cases are private.
Appendix C.
OpenSSL Bug Details
Figure 26 illustrates the bug in the OpenSSL macro
mul_add_c2 (Figure 19). Double and add operations can
overﬂow by a single bit;
these overﬂows are handled by
conditional increments to c2 and t1. However, the conditional
increments themselves can also overﬂow. In some cases, this
does not introduce a bug. Overﬂows in c2 can be soundly
ignored, since this macro implements triple-word arithmetic.
The ﬁrst conditional increment to t1 cannot overﬂow, because
t1 must be even before the increment. However, if the second
condition increment to t1 (circled with a dashed red line)
overﬂows, c2 should be—but is not—incremented again.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply.