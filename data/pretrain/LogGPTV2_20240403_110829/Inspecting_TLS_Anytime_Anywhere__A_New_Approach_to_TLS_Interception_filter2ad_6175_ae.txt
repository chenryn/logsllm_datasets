key.
We observe that since the client should send key_share 𝑔𝑟 to
the server before it receives the server’s random nonce 𝜇𝑆 in TLS
v1.3, we cannot make use of 𝜇𝑆 but can use only the client nonce
𝜇𝐶 to generate the ephemeral random value 𝑟. In other words, we
should compute 𝑟 ← H( ˜𝑘, 𝜇𝑐), where ˜𝑘 is the inspection key. As
the inspector can recover 𝑟, he can also reconstruct the traffic
key.
Excluding the server random nonce 𝜇𝑆 from the inputs to H does
not prohibit the inspector from reconstructing the Secret value
𝑍, meaning TLS inspection is possible. However, absence of the
server random nonce will make the security model presented in
Definition 4.1 slightly weaker as now, the adversary might control
the generation of 𝑟 somewhat more easily. (However, we do assume
that the adversary should not have access to the inspection key, so
the full control of 𝑟 is hard.) In other words, the adversary A in in
Definition 4.1 no longer has the ability to choose the client random
nonce and fix it as a uniform string by the attack game.
It is straightforward to prove that the above KEM in TLSv1.3 is
secure under the weakened security model in a very similar way we
proved Theorem 4.3. A more formal treatment of this is provided
in Appendix A.
We remark that nevertheless, IA2-TLS based on RSA will no
longer be possible as RSA-KEM is not supported in TLS v1.3.
7.2 Application to IDS
Thanks to its flexibility, IA2-TLS can meet various demands on traf-
fic monitoring and inspection system over the network including
the Intrusion Detection System (IDS). When IA2-TLS is deployed in
IDS to inspect the organizational network, the company may want
to know whether their users access to HTTPS websites using the
browsers that support IA2-TLS before they connect. Naturally, IA2-
TLS offers this capacity as follows. Note that the TLS handshake
is completed after client and server exchange Finished messages.
The IDS can capture those messages and check whether the key
used to encrypt Finished messages is equal to the key derived
from the IA2-TLS protocol using the inspection key, and the client
and server random nonces. If the equality does not hold, the IDS can
terminate the connection to protect the system from unmonitored
traffic. When the ECDHE is used, the IDS can verify the user’s non-
compliant behavior by observing the CT-value, which is included in
ClientKeyExchange, instead of decrypting the Finished message.
This reduces the computational overhead required to detect the
monitoring bypass.
Session 3: Network Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan1247.3 Managing Inspection Key
Depending on applications, the inspector may create an inspection
key by applying a PRF to the user’s ID and a uniform string of
his/her choice. This way, a user-specific inspection key can be
generated. We remark that although our security model for IA2-TLS
does assume that the inspection key is not compromised, revealing
the inspection key has a drastic effect that the client’s PMS for all
the sessions can be exposed. Thus, minimizing the risk of inspection
key exposure is important. Updating the inspection key regularly
can be one of the solutions.
8 CONCLUSION
In this paper, we proposed IA2-TLS, a new TLS inspection solution.
Compared with the various inspection methods available in practice,
our solution offers higher flexibility and efficiency as it does not rely
on the methodology based on TLS proxies, which have to manage
the proxy’s certificate, and decrypt and re-encrypt the network
traffic.
As an implementation result, we presented IA2-TLS Client and
IA2-TLS Inspector programs, which realized the non-real time in-
spection functionality of IA2-TLS.
We envision that this work can bring out many in-network
monitoring tools, which are much less intrusive and more efficient.
Our ongoing works in this line of research include the implemen-
tation of the IA2-TLS v1.3 and a real-time inspector that integrates
the inspector program into an IDS, which involves more than the
implementation of the offline inspector presented in the current
paper.
REFERENCES
[1] M. Abdalla, M. Bellare and P. Rogaway. The Oracle Diffie-Hellman Assumptions
and an Analysis of DHIES. In CT-RSA 2001, LNCS 2020, pp. 143–158, Springer,
2001.
[2] M. Bellare and P. Rogaway. Random Oracles are Practical: A Paradigm for De-
[5] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version
signing Efficient Protocols. In ACM-CCS 1993, pp. 62–73, ACM, 1993.
[3] D. Bleichenbacher. Chosen Ciphertext Attacks against Protocols Based on the
RSA Encryption Standard PKCS #1. In Crypto 1998, LNCS 1462, pp. 1–12, Springer,
1998.
[4] S. Canard, A. Diop, N. Kheir, M. Paindavoine and M. Sabt. Blindids: Market-
compliant and privacy-friendly intrusion detection system over encrypted traffic.
In AsiaCCS 2017, pp. 561–574. ACM, 2017.
1.2. RFC 5246, Network Working Group. 2008.
[6] Z. Durumeric, Z. Ma, D. Springall, R. Barnes, N, Sullivan, E. Bursztein, M . Bailey,
J, A, Halderman and V. Paxson. The Security Impact of HTTPS Interception. In
NDSS 2017, 2017.
[7] R. Du Toit. Responsibly Intercepting TLS and the impact of TLS1.3. Symantec
Technical Brief. Available at https://www.symantec.com/content/dam/symantec/
docs/other-resources/responsibly-intercepting-tls-and-the-impact-of-tls-1.3-
en.pdf, 2018.
[8] M. Green. The Many Flaws of Dual_EC_DRBG. Available at https://blog.
cryptographyengineering.com/2013/09/18/the-many-flaws-of-dualecdrbg/,
2013.
[9] J. Han, S. Kim, J. Ha and D. Han. SGX-Box: Enabling Visibility on Encrypted
[10] L-S. Huang, A. Rice, E. Ellingsen and C. Jackson. Analyzing Forged SSL Certifi-
[11] T. Jager, F. Kohlar, S. Schäge and J. Schwenk. On the Security of TLS-DHE in the
Traffic Using a Secure Middlebox Module. In APNet 2017, ACM, 2017.
cates in the Wild. In IEEE S&P 2014, IEEE, 2014.
Standard Model. In Crypto 2012, LNCS 7417, pp. 273–293, Springer, 2012.
Black Hat Europe 2012.
Group. 1998.
[13] B. Kaliski. PKCS#1: RSA Encryption Version 1.5. RFC 2313, Network Working
[14] H. Krawczyk and P. Eronen. HMAC-based Extract-and-Expand Key Derivation
[12] J. Jarmoc. SSL/TLS Interception Proxies and Transitive Trust. Presentation at
Function (HKDF). RFC 5869, Network Working Group. 2010.
[15] H. Krawczyk, K. G. Paterson and H. Wee. On the Security of the TLS Protocol: A
Systematic Analysis. In Crypto 2013, LNCS 8042, pp. 429–448, Springer, 2013.
[16] D. Naylor, K. Schomp, M. Varvello, I. Leontiadis, J. Blackburn, D. R. Lopez, K.
Papagiannaki, P. Rodriguez Rodriguez and P. Steenkiste. Multi-Context TLS
(mcTLS): Enabling Secure In-Network Functionality in TLS. In SIGCOMM 2015,
ACM, 2015.
[17] T. Okamoto and D. Pointcheval. REACT: Rapid Enhanced-security Asymmetric
Cryptosystem Transform. In CT-RSA 2001, LNCS 2020, pp. 159–175, Springer,
2001.
[18] M. O’Neill, S. Ruoti, K. Seamons and D. Zappala. TLS Proxies: Friend or Foe? In
[19] K. Poulsen. Edward Snowden’s E-Mail Provider Defied FBI Demands to Turn
IMC 2016, ACM, 2016.
Over Crypto Keys, Documents Show, In Wired, October, 2013.
Network Working Group. 2018.
[20] E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.3. RFC 8446,
[21] J. Sherry, C. Lan, P. A. Popa and S. Ratnasami. BlindBox: Deep Packet Inspection
[22] D. Song, D. A. Wagner and A. Perrig. Practical techniques for searches on en-
over Encrypted Traffic. In SIGCOMM 2015, ACM, 2015.
crypted data. In IEEE S&P, 2000, pp. 44 –55. IEEE Computer Society, 2000.
overview?hl=en. Accessed: 15-05-2019.
[23] HTTPS encryption on the web. https://transparencyreport.google.com/https/
[24] BoringSSL. https://opensource.google.com/projects/boringssl. Accessed: 15-05-
[25] OpenSSL. https://www.openssl.org/. Accessed: 15-05-2019.
[26] The Chromium Projects. https://www.chromium.org/Home. Accessed: 2019-05-
[27] tshark - The Wireshark Network Analyzer 3.0.1. https://www.wireshark.org/
docs/man-pages/tshark.html. Accessed: 15-05-2019.
[28] CYBER; Middlebox Security Protocol; Part 3: Profile for Enterprise Network and
Data Centre Access Control. https://www.etsi.org/deliver/etsi_ts/103500_103599/
10352303/01.01.01_60/ts_10352303v010101p.pdf. Accessed: 31-07-2019.
2019.
15..
1.3
A SECURITY ANALYSIS OF IA2-TLS VERSION
IA2-TLSv1.3-KEM. For the formal security analysis, we extract the
key encapsulation (KEM) from the IA2-TLS handshake in TLS v.1.3
(described in Section 7.1) and define the following KEM scheme,
which we call “IA2-TLSv1.3-KEM”. This KEM scheme is based on
the randomized KEM scheme used in Section 2.2. But we rename the
PMS, CT and MS to “KS (key share)”, “SEC (secret)” and “TK (traffic
key), respectively to be compatible with the TLS v1.3 description.
A formal description of IA2-TLSv1.3-KEM is given as follows.
GIA2-TLSv1.3-KEM(1𝑛)
(𝑝𝑘𝑠, 𝑠𝑘𝑆) ← GKEM(1𝑛)
˜𝑘 ←$ {0, 1}ℓ
return (𝑝𝑘𝑆 , 𝑠𝑘𝑆 , ˜𝑘)
EIA2-TLSv1.3-KEM(𝑝𝑘𝑆, ˜𝑘, 𝜇𝐶)
𝑟 ← H( ˜𝑘, 𝜇𝐶)
(KS, SEC) ← EKEM(𝑝𝑘𝑆; 𝑟)
TK ← HKDF(SEC)
return (KS, TK)
DIA2-TLSv1.3-KEM(𝑠𝑘𝑆, KS)
SEC ← DKEM(𝑠𝑘𝑆 , KS)
TK ← HKDF(SEC)
return TK
Based on the discussion in Section 7.1, we formulate a security
model for the IA2-TLSv1.3-KEM, which is weaker than Definition
4.1 as the adversary now does not have a full control of 𝜇𝐶. A formal
definition is the following.
Definition A.1 (IND-CCA of IA2-TLSv1.3-KEM). Let A be an ad-
versary. Consider the following game:
Session 3: Network Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan125𝐶 ),Decap(𝑠𝑘𝑆 ,·) (𝑝𝑘𝑆 , 𝐾𝛽, KS∗, 𝜇∗
𝐶)
CCAA,IA2-TLSv1.3-KEM(𝑛)
(𝑠𝑘𝑆 , 𝑝𝑘𝑆 , ˜𝑘) ←$ GIA2-TLSv1.3-KEM(1𝑛)
𝜇∗
𝐶 ←$ {0, 1}𝜆
(KS∗, TK∗) ← EIA2-TLSv1.3-KEM(𝑝𝑘𝑆 , ˜𝑘, 𝜇∗
𝐶)
𝐾0 = TK∗; 𝐾1 ←$ {0, 1}𝜆′; 𝛽 ←$ {0, 1}
𝛽′ ← AEncap(𝑝𝑘𝑆 , ˜𝑘,𝜇∗
return (𝛽′ = 𝛽)
Encap(𝑝𝑘𝑆, ˜𝑘, 𝜇𝐶)
(KS, TK) ← EIA2-TLSv1.3-KEM(𝑝𝑘𝑆 , ˜𝑘, 𝜇𝐶)
return (KS, TK)
Decap(𝑠𝑘𝑆, KS)
TK ← DIA2-TLSv1.3-KEM(𝑠𝑘𝑆 , KS)
return TK
a negligible function 𝜖(𝑛) such that Adv
𝜖(𝑛).
We define A’s advantage as
ind−cca
A,IA2-TLSv1.3-KEM(𝑛) = Pr[CCAA,IA2-TLSv1.3-KEM(𝑛) = 1].
Adv
The IA2-TLSv1.3-KEM scheme is IND-CCA secure if there exists
ind−cca
A,IA2-TLSv1.3-KEM(𝑛) ≤
We can prove the security of IA2-TLSv1.3-KEM assuming that
the underlying randomized KEM is OW-PCA secure (Definition
4.2). Like the case of TLSv1.2, it is essential to assume that the hash
function H and HKDF are random oracles. By choosing a static
value for 𝜇𝐶, the adversary may be able to get some information
about the SEC value. However, this problem is fixed by weakening
the security model in the sense that 𝜇𝐶 is always chosen uniformly
at random and is not under the control of the adversary. We now
state the following theorem.
Theorem A.2. The IA2-TLSv1.3-KEM scheme is IND-CCA secure
if the underlying randomized KEM scheme is OW-PCA secure, and H
and HKDF are random oracles.
Proof. (Sketch) The proof is similar to the proof of Theorem 4.3.
The random oracles H and HKDF are simulated through a sequence
of games. Also, due to the weakened model of security, 𝜇𝐶 is chosen
uniformly by the game, so that the output of H is guaranteed to
be uniform in the space of randomness for 𝑟. The encapsulation
queries handled accordingly. The decapsulation queries are handled
using the PCA oracle. (The complete proof will be provided in the
full version of this paper.)
□
As mentioned previously in this paper, TLS v1.3 mandates to
use the ephemeral DH-KEM (DHE-KEM). Hence, in the above de-
scription, the server’s public key 𝑝𝑘𝑆 is equivalent to the ephemeral
DH value signed by the server itself, i.e., {{ID𝑆, 𝑝𝑘𝑆𝑖𝑔𝑆}CA, {𝑔𝑡}𝑆},
where {ID𝑆, 𝑝𝑘𝑆𝑖𝑔𝑆}CA is a certificate for the server’s signature
verification key 𝑝𝑘𝑆𝑖𝑔𝑆, which was issued by CA, and {𝑔𝑡}𝑆 is a
signature on the ephemeral DH value 𝑔𝑡. Then, the PCA oracle in
the above proof should be instantiated by the DDH oracle (𝑔, ·, ·, ·),
which is related to the GDH (not SDH) problem [17].
Session 3: Network Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan126