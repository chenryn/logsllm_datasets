\n
：回⻋符，光标移到同⼀⾏的开头。
\r
：制表符，光标移到下⼀个⽔平制表位，通常是下⼀个 8 的倍数。
\t
：垂直分隔符，光标移到下⼀个垂直制表位，通常是下⼀⾏的同⼀列。
\v
：null 字符，代表没有内容。注意，这个值不等于数字 0。
\0
转义写法还能使⽤⼋进制和⼗六进制表示⼀个字符。
：字符的⼋进制写法， 为⼋进制值。
\nn nn
：字符的⼗六进制写法， 为⼗六进制值。
\xnn nn
char x = 'B';
char x = 66;
char x = '\102';
char x = '\x42';
上⾯示例的四种写法都是等价的。
整数类型 #
简介 #
整数类型⽤来表示较⼤的整数，类型声明使⽤ 关键字。
int
int a;
上⾯示例声明了⼀个整数变量 。
a
不同计算机的 类型的⼤⼩是不⼀样的。⽐较常⻅的是使⽤ 4 个字节（32 位）存储⼀个 类型的
int int
值，但是 2 个字节（16 位）或 8 个字节（64 位）也有可能使⽤。它们可以表示的整数范围如下。
16 位：-32,768 到 32,767。
32 位：-2,147,483,648 到 2,147,483,647。
64 位：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807。
signed，unsigned #
C 语⾔使⽤ 关键字，表示⼀个类型带有正负号，包含负值；使⽤ 关键字，表示该类型不
signed unsigned
带有正负号，只能表示零和正整数。
对于 类型，默认是带有正负号的，也就是说 等同于 。由于这是默认情况，关键字
int int signed int
⼀般都省略不写，但是写了也不算错。
signed
signed int a;
int a;
类型也可以不带正负号，只表示⾮负整数。这时就必须使⽤关键字 声明变量。
int unsigned
unsigned int a;
整数变量声明为 的好处是，同样⻓度的内存能够表示的最⼤整数值，增⼤了⼀倍。⽐如，16 位
unsigned
的 最⼤值为 32,767，⽽ 的最⼤值增⼤到了 65,535。
signed int unsigned int
⾥⾯的 可以省略，所以上⾯的变量声明也可以写成下⾯这样。
unsigned int int
unsigned a;
字符类型 也可以设置 和 。
char signed unsigned
signed char c;
unsigned char c;
注意，C 语⾔规定 类型默认是否带有正负号，由当前系统决定。这就是说， 不等同于
char char signed
，它有可能是 ，也有可能是 。这⼀点与 不同， 就是等同于
char signed char unsigned char int int
。
signed int
整数的⼦类型 #
如果 类型使⽤ 4 个或 8 个字节表示⼀个整数，对于⼩整数，这样做很浪费空间。另⼀⽅⾯，某些场合
int
需要更⼤的整数，8 个字节还不够。为了解决这些问题，C 语⾔在 类型之外，⼜提供了三个整数的⼦
int
类型。这样有利于更精细地限定整数变量的范围，也有利于更好地表达代码的意图。
（简写为 ）：占⽤空间不多于 ，⼀般占⽤ 2 个字节（整数范围为 - 32768
short int short int
～32767)。
（简写为 ）：占⽤空间不少于 ，⾄少为 4 个字节。
long int long int
（简写为 ）：占⽤空间多于 ，⾄少为 8 个字节。
long long int long long long
short int a;
long int b;
long long int c;
上⾯代码分别声明了三种整数⼦类型的变量。
默认情况下， 、 、 都是带符号的（signed），即 关键字省略了。它们也可
short long long long signed
以声明为不带符号（unsigned），使得能够表示的最⼤值扩⼤⼀倍。
unsigned short int a;
unsigned long int b;
unsigned long long int c;
C 语⾔允许省略 ，所以变量声明语句也可以写成下⾯这样。
int
short a;
unsigned short a;
long b;
unsigned long b;
long long c;
unsigned long long c;
不同的计算机，数据类型的字节⻓度是不⼀样的。确实需要 32 位整数时，应使⽤ 类型⽽不是
long int
类型，可以确保不少于 4 个字节；确实需要 64 位的整数时，应该使⽤ 类型，可以确保不少于
long long
8 个字节。另⼀⽅⾯，为了节省空间，只需要 16 位整数时，应使⽤ 类型；需要 8 位整数时，应该
short
使⽤ 类型。
char
整数类型的极限值 #
有时候需要查看，当前系统不同整数类型的最⼤值和最⼩值，C 语⾔的头⽂件 提供了相应的常
limits.h
量，⽐如 代表 signed char 类型的最⼩值 ， 代表 signed char 类型的最⼤值
SCHAR_MIN -128 SCHAR_MAX
。
127
为了代码的可移植性，需要知道某种整数类型的极限值时，应该尽量使⽤这些常量。
， ：signed char 的最⼩值和最⼤值。
SCHAR_MIN SCHAR_MAX
， ：short 的最⼩值和最⼤值。
SHRT_MIN SHRT_MAX
， ：int 的最⼩值和最⼤值。
INT_MIN INT_MAX
， ：long 的最⼩值和最⼤值。
LONG_MIN LONG_MAX
， ：long long 的最⼩值和最⼤值。
LLONG_MIN LLONG_MAX
：unsigned char 的最⼤值。
UCHAR_MAX
：unsigned short 的最⼤值。
USHRT_MAX
：unsigned int 的最⼤值。
UINT_MAX
：unsigned long 的最⼤值。
ULONG_MAX
：unsigned long long 的最⼤值。
ULLONG_MAX
整数的进制 #
C 语⾔的整数默认都是⼗进制数，如果要表示⼋进制数和⼗六进制数，必须使⽤专⻔的表示法。
⼋进制使⽤ 作为前缀，⽐如 、 。
0 017 0377
int a = 012;
⼗六进制使⽤ 或 作为前缀，⽐如 、 。
0x 0X 0xf 0X10
int a = 0x1A2B;
有些编译器使⽤ 前缀，表示⼆进制数，但不是标准。
0b
int x = 0b101010;
注意，不同的进制只是整数的书写⽅法，不会对整数的实际存储⽅式产⽣影响。所有整数都是⼆进制形式
存储，跟书写⽅式⽆关。不同进制可以混合使⽤，⽐如 是⼀个合法的表达式。
10 + 015 + 0x20
的进制相关占位符如下。
printf()
：⼗进制整数。
%d
：⼋进制整数。
%o
：⼗六进制整数。
%x
：显示前缀 的⼋进制整数。
%#o 0
：显示前缀 的⼗六进制整数。
%#x 0x
：显示前缀 的⼗六进制整数。
%#X 0X
int x = 100;
printf("dec = %d\n", x);
printf("octal = %o\n", x);
printf("hex = %x\n", x);
printf("octal = %#o\n", x);
printf("hex = %#x\n", x);
printf("hex = %#X\n", x);
浮点数类型 #
e
任何有⼩数点的数值，都会被编译器解释为浮点数。所谓 “浮点数” 就是使⽤ m * b 的形式，存储⼀个数
值， 是⼩数部分， 是基数（通常是 ）， 是指数部分。这种形式是精度和数值范围的⼀种结
m b 2 e
合，可以表示⾮常⼤或者⾮常⼩的数。
浮点数的类型声明使⽤ 关键字，可以⽤来声明浮点数变量。
float
float c = 10.5;
上⾯示例中，变量 的就是浮点数类型。
c
类型占⽤ 4 个字节（32 位），其中 8 位存放指数的值和符号，剩下 24 位存放⼩数的值和符号。
float
类型⾄少能够提供（⼗进制的）6 位有效数字，指数部分的范围为（⼗进制的） 到 ，即数
float -37 37
-37 37
值范围为 10 到 10 。
有时候，32 位浮点数提供的精度或者数值范围还不够，C 语⾔⼜提供了另外两种更⼤的浮点数类型。
：占⽤ 8 个字节（64 位），⾄少提供 13 位有效数字。
double
：通常占⽤ 16 个字节。
long double
注意，由于存在精度限制，浮点数只是⼀个近似值，它的计算是不精确的，⽐如 C 语⾔⾥⾯ 并
0.1 + 0.2
不等于 ，⽽是有⼀个很⼩的误差。
0.3
if (0.1 + 0.2 == 0.3)
C 语⾔允许使⽤科学计数法表示浮点数，使⽤字⺟ 来分隔⼩数部分和指数部分。
e
double x = 123.456e+3;
double x = 123.456e3;
上⾯示例中， 后⾯如果是加号 ，加号可以省略。注意，科学计数法⾥⾯ 的前后，不能存在空格。
e + e
另外，科学计数法的⼩数部分如果是 或 的形式，那么 可以省略。
0.x x.0 0
0.3E6
.3E6
3.0E6
3.E6
布尔类型 #
C 语⾔原来并没有为布尔值单独设置⼀个类型，⽽是使⽤整数 表示伪，所有⾮零值表示真。
0
int x = 1;
if (x) {
printf("x is true!\n");
}
上⾯示例中，变量 等于 ，C 语⾔就认为这个值代表真，从⽽会执⾏判断体内部的代码。
x 1
C99 标准添加了类型 ，表示布尔值。但是，这个类型其实只是整数类型的别名，还是使⽤ 表示
_Bool 0
伪， 表示真，下⾯是⼀个示例。
1
_Bool isNormal;
isNormal = 1;
if (isNormal)
printf("Everything is OK.\n");
头⽂件 定义了另⼀个类型别名 ，并且定义了 代表 、 代表 。只要加载
stdbool.h bool true 1 false 0
这个头⽂件，就可以使⽤这⼏个关键字。
#include 
bool flag = false;
上⾯示例中，加载头⽂件 以后，就可以使⽤ 定义布尔值类型，以及 和 表示
stdbool.h bool false true
真伪。
字⾯量的类型 #
字⾯量（literal）指的是代码⾥⾯直接出现的值。
int x = 123;
上⾯代码中， 是变量， 就是字⾯量。
x 123
编译时，字⾯量也会写⼊内存，因此编译器必须为字⾯量指定数据类型，就像必须为变量指定数据类型⼀
样。
⼀般情况下，⼗进制整数字⾯量（⽐如 ）会被编译器指定为 类型。如果⼀个数值⽐较⼤，超出
123 int
了 能够表示的范围，编译器会将其指定为 。如果数值超过了 ，会被指定为
int long int long int
。如果还不够⼤，就指定为 或 。
unsigned long long long unsigned long long
⼩数（⽐如 ）会被指定为 类型。
3.14 double
字⾯量后缀 #
有时候，程序员希望为字⾯量指定⼀个不同的类型。⽐如，编译器将⼀个整数字⾯量指定为 类型，但
int
是程序员希望将其指定为 类型，这时可以为该字⾯量加上后缀 或 ，编译器就知道要把这个字⾯
long l L
量的类型指定为 。
long
int x = 123L;
上⾯代码中，字⾯量 有后缀 ，编译器就会将其指定为 类型。这⾥ 写成 ，效果也
123 L long 123L 123l
是⼀样的，但是建议优先使⽤ ，因为⼩写的 容易跟数字 混淆。
L l 1
⼋进制和⼗六进制的值，也可以使⽤后缀 和 指定为 Long 类型，⽐如 和 。
l L 020L 0x20L