evaluated as accesses with publicly known index, and as such
without any gates.
Decomposition by loops is especially beneficial for parallel loops,
as it allows to derive the placement costs of MPC protocols during
protocol selection from the analysis of only one loop iteration.
Arithmetic decomposition. In the last decomposition pass, con-
nected arithmetic expressions are extracted, as they are candidates
for arithmetic circuits. Therefore, all expressions in each module
are visited to extract expressions that purely consists of arithmetic
operations (supported by the used MPC protocol). This decomposi-
tion is realized as follows: For each module, a data flow dependency
graph is constructed from the output to the input interface. Each
node in the dependency graph is an elementary expression and an
edge represents the data that is computed on. By iterating over all
nodes, two sets of sub-graphs are formed. The first contains sub-
graphs consisting of connected arithmetic expressions, whereas
the second contains sub-graphs consisting of connected remaining
expressions. Each sub-graph forms its own module, where edges
between the sub-graphs define the respective I/O interfaces. This
form of decomposition is illustrated in Fig. 3 for the code excerpt
given in Listing 3 that computes a scalar multiplication.
We remark that during protocol selection, multiple (or even
all) modules can be merged to larger modules, that are jointly
evaluated with the same MPC protocol. Finally, the created DAG
that represents the modules and their I/O dependencies is exported
for the next compilation steps.
3.2.5 Circuit Compilation. The different modules identified in the
previous step are compiled separately into two or three circuit rep-
resentations. Namely, every module is compiled into size-optimized
Boolean circuits using the circuit compiler of CBMC-GC and into
depth-optimized Boolean circuits using its ShallowCC extension [9],
which uses depth-optimized building blocks (cf. §2.4). Moreover,
every module that can be represented with the arithmetic opera-
tions supported by ABY (cf. §2.2) is also compiled into an arithmetic
circuit using a straight-forward mapping of arithmetic expressions
to arithmetic gates. Note that modules representing functions or
loops that have not been unrolled are only compiled once.
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada853Figure 3: Code dependency graph and decomposition for
the code excerpt in Listing 3. Connected statements that
can efficiently be expressed as arithmetic circuits, i.e., ad-
dition (ADD) and multiplication (MUL), marked with a red
dashed circle, form sub-graphs. Statements that profit from
a Boolean representation, marked with a blue dotted circle,
i.e., greater-than (GT) and multiplexer (MUX), are grouped.
Inter-Procedural Circuit Optimization. So far, the compiled
3.2.6
circuits have only be optimized on the source code level, cf. §3.2.3.
After their creation, all Boolean circuits are optimized on the gate-
level, e.g., by removing unused bits (gates). Constants are propa-
gated between different modules and circuit types, including the
arithmetic circuits when applicable.
The scalability of logic minimization techniques for Boolean
circuits is limited, because these techniques are applied in a gate-
by-gate manner and some techniques involve computationally ex-
pensive operations, such as SAT sweeping to identify unnecessary
gates [8]. Thus, to distribute the available computational resources
onto all modules efficiently, we adapt a technique called source-
code guided optimization [10]. Here, over multiple time-constrained
optimization passes, the available computing time is distributed
using the structural information present on the source-code level
and the information about previous optimization passes. Namely,
in each pass, the available budget, which is a fraction of the total
upper compile time specified by the user, is distributed according to
the unrolled circuit size of each module. Thus, modules originating
from loops or function bodies are optimized with an effort that is
proportional to the number of their iterations or calls. Moreover,
outputs of modules identified as constant are propagated to sub-
sequent modules and optimization preference is given to modules
with many constant input gates.
In contrast to [10], which did not target hybrid compilation, we
optimize all types of circuits independently with a shared opti-
mization budget. Thus, the different optimizations are performed
separately. Yet, the information about identified constant output
variables or module outputs is propagated between optimization
routines, and will also be used to improve the arithmetic circuits, if
all bits of an output variable are identified as constant. We remark
that this form of cross propagation maintains functional correctness
because all circuits for one module are logically equivalent.
3.2.7 Circuit Export. Once a user-defined compile time has been
reached, the optimization routine is stopped and the DAG, con-
sisting of modules with optimized circuit representations and I/O
interfaces as well as information about identified parallel loops,
is exported. Given the circuits, an MPC framework can choose a
protocol selection to perform the computation as described next.
4 PROTOCOL SELECTION AND SCHEDULING
In this section, we describe how to determine an optimized sched-
uling and mapping of the modules that were created during compi-
lation to MPC protocols.
4.1 Problem Definition
We optimize evaluation costs of a hybrid MPC application by choos-
ing an efficient protocol representation and evaluation order of
all modules for a given program description. For this, we present
heuristics considering a user-specified cost model. A very interest-
ing use case is the optimization of the protocol’s online runtime,
yet, various other cost models are also of interest. For example
optimizing the cloud computing costs, i.e., the price to pay for com-
putational power and traffic to perform a computation using cloud
service providers, has been discussed in [44]. Further examples are
the total protocol runtime including or excluding the time spent
on preprocessing depending on the use case of the application, the
pure communication costs when considering a constrained network
connection, or the power consumption when considering mobile
devices. All these minimization problems can also be formulated as
constrained problems, e.g., minimizing the communication costs
while keeping the protocol runtime below a user-defined threshold.
The computation and communication costs of a hybrid MPC pro-
tocol depend on the combined costs to evaluate each module in the
selected protocol plus the time to convert between modules, when
evaluating them with different protocols. However, in contrast to
previous works, i.e., [32] and [44], we observe that the optimization
problem, i.e., achieving minimal costs for a given decomposition, is
not only a protocol selection problem but also a scheduling prob-
lem. Namely, the evaluation order of parallel modules, i.e., modules
without sequential dependencies, can significantly influence the
effectiveness of protocol selection, and thus the overall protocol
runtime. This is because of the non-linearity of computation and
communication costs of MPC protocols (e.g., parallel computations
in the program can be performed in the same communication round
or packed in the same cryptographic operation), as well as the
trade-off that has to be taken into account when converting be-
tween different MPC protocols. Fig. 4 illustrates this scheduling
problem for an example program description and naïve cost model.
Namely, Fig. 4a shows an exemplary program DAG resembling a
computation from inputs (top) to outputs (bottom) with different
modules (nodes) in between. For simplicity, we assume that mod-
ules illustrated as squares profit from an evaluation in a sharing
type A (e.g., arithmetic), whereas modules represented by circles
profit from a different sharing type B (e.g., Boolean). Furthermore,
for illustration purposes, we assume that a conversion between two
different sharings is reducing the total evaluation costs if at least
three modules are evaluated in the same sharing. The result of an
exemplary as-soon-as-possible (ASAP) scheduling followed by a
protocol selection is shown in Fig. 4b. Two groups of nodes (marked
with dashed lines) become a candidate for being evaluated in shar-
ing type B. However, when considering the assumption above, an
optimal protocol selection algorithm will propose to evaluate all
modules with type A, as the conversion is too expensive for only
two modules. An optimal scheduling is shown in Fig. 4c. In this
case, three modules that can jointly be evaluated in sharing type B
can be identified during protocol selection and are consequently
evaluated in sharing type B.
x1y1x2y2mincountMUL1MULADDGTMUXADDcountSession 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada854(b) ASAP scheduling
and subsequent pro-
tocol selection
(a) Example DAG
with
protocol
preferences
Figure 4: Exemplary DAG with different evaluation sched-
ules and protocol selections described §4.1.
(c) Optimal schedul-
ing and subsequent
protocol selection
Thus, we remark that optimal runtime can only be achieved when
optimizing both protocol selection and scheduling of modules. Next,
we present a formalization of the optimization problem, before
presenting optimization routines in the following subsections.
.
C
M
M ∪ Πt
C
Formalization. We formalize the cost model and optimization
problem as follows. Given is a program description in the form
of a DAG G from inputs i ∈ In to outputs o ∈ Out with modules
m ∈ M in between. Cost minimization for hybrid MPC consists of
two interleaving tasks, namely protocol selection and scheduling.
Protocol selection is an assignment that maps every module to an
MPC protocol, also referred to as sharing type t : M → {A, B, Y}.
We denote the set of protocols representing each modules in the se-
lected sharing with Πt
. Moreover, we denote the set of conversion
M
protocols required to convert between adjacent modules evaluated
with different MPC protocols with Πt
C
Scheduling is the task of assigning an evaluation order to all
modules for a given protocol selection. Modules and their conver-
sions form the set of elementary protocols Πt = Πt
that
are the atomic units of scheduling. As it is common in scheduling,
we use the notion of instructions I, which is the set of protocols
that are performed in parallel in hybrid MPC. Furthermore, note
that most modules and their conversions have data dependencies
to other modules, i.e., module m2 is dependent on m1, if the result
of m1 is needed to compute m2. Therefore, scheduling is the task of
creating a sequence of k instructions (I1, I2, ..., Ik) and assigning
protocols to instructions s : Πt → I1, . . . , Ik. This assignment must
guarantee that every protocol only appears in one instruction, pro-
tocols in each instruction are pairwise mutually independent, and
the order of protocols induced through the order of instructions
confirms to the dependencies between modules and conversions.
Given a schedule, i.e., an ordered list of instructions IL, the total
evaluation cost is the sum of the evaluation costs of all protocols
representing a module π t
and their respective conversions
c ∈ Πt
according to IL plus the cost to input, i.e., share, values
π t
into the protocol, plus the costs to reveal all outputs. In §4.3, we
illustrate the computation of the evaluation cost in more detail by
performing a runtime prediction for a given evaluation schedule.
In summary, the goal of optimized protocol selection and schedul-
ing is to minimize the total evaluation cost by choosing a schedule s
and protocol selection t. Next, we present approaches to achieve
efficient protocol selection and scheduling.
4.2 Protocol Selection in HyCC
Scheduling and protocol selection are tightly coupled problems,
where the latter alone is conjectured to be NP-hard [32, 44]. There-
fore, in HyCC we first select an evaluation schedule using a heuristic
m ∈ Πt
for a given program decomposition. The schedule is then used in a
second step to optimally solve the protocol selection problem.
Scheduling. In HyCC, protocol scheduling is performed with
respect to the parallelism present on the source code level. Conse-
quently, the identified parallelism, which has been annotated in the
program’s DAG during compilation, is used to schedule modules
in parallel. This explicit scheduling of parallel code structures is
necessary, as the straight forward application of an ASAP or other
scheduling algorithm cannot guarantee that parallel code state-
ments will be evaluated in parallel, as shown in Fig. 4. Moreover,
this approach is beneficial for hybrid MPC, as the MPC protocols,
conversion protocols, and their implementations benefit from paral-
lel execution. For example, n sequentially scheduled multiplications
in an arithmetic circuit require n communication rounds, whereas a
parallel alignment allows to perform all multiplications in a single
communication round, which leads to very different runtimes in an
high-latency network. Furthermore, parallelization is beneficial for
the later protocol selections, as multiple modules can be grouped
together and thus, optimized more efficiently.
Besides parallelization, modules are scheduled in an ASAP man-
ner. To combine both strategies in a single algorithm, parallel mod-
ules are merged in a single module when creating an ASAP schedule.
Afterwards, the merged modules are restored and placed in the same
instruction of the evaluation schedule. We leave more advanced
scheduling algorithms for future work.
Protocol selection. Even though in the general case protocol se-
lection is conjectured to be NP-hard, given a coarse-grained decom-
position, such as the one created by HyCC, an optimal protocol
selection can be computed under reasonable computational effort
for many practical applications, as we show in §5.1. This is because
the complexity of the protocol selection routine is dominated by the
width of the program’s DAG G rather than its size. Consequently,
all applications that only moderately divert in their data and control
flow are candidate problems for optimal protocol selection.
To identify the optimal protocol selection for a given DAG G,
we apply a straight-forward combinatorial optimization approach
by enumerating all possible protocol combinations using dynamic
programming. The core concept of the optimization routine is to
iteratively optimize the selection of protocols up to a certain module,
following the order of modules generated by the instruction list IL.
In every step, one module is added and modules that do not have
any open outputs, i.e., outputs that are required for subsequent
modules, are removed. We refer to the set of modules with open
outputs as the working set W S. For every W S, the best protocol
selection for every possible sharing combination is computed and
stored. When going from W S to the next W S′, the best protocol
selection to represent the new W S′ in every sharing combination
is computed by identifying the least cost to compute W S′ from
any configuration of W S. Thus, the complexity of this optimization
approach for a given DAG G with n modules, a maximum width of w,
and s different sharing types is in O(nsw), and thus exponential in
the size of the largest working set, i.e., the width of G. Consequently,
for a small number of sharing types and for DAGs with moderate
width, the protocol selection problem can be solved optimally in
seconds, as evaluated in §5.1.
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada855eval_costs(W S,W S′, c′, cost_table)
1 : min ← ∞
foreach c ∈ share_combinations(W S)
2 :
, c, c′)
cost ← cost_step(W S, W S′
3 :
if cost + cost_table[c] < min then
4 :
min ← cost + cost_table[c]
5 :
6 :
endif
7 :
8 :
return min
endfor
Algorithm 2: Algorithm to compute the cheapest evaluation
cost to compute the next W S′ in a specific sharing configura-
tion. The algorithm takes as input the two working sets W S,
W S′, the designated sharing configuration for W S′ denoted
with c′, as well as a table with the cheapest cost to compute
all possible sharing configurations c of W S.
foreach c in share_combinations(W S) do
cost_table[c] ← cost_input_sharing(c)
protocol_selection(DAG G, instruction list IL)
1 : W S ← G .inputs
2 :
3 :
4 :
5 :
6 :
7 :
8 :
9 :
10 :
11 :
12 :
13 :
endfor
foreach m in G .modules ordered by I L do
W S′ ← remove_completed(W S ∪ m)
foreach c′ ∈ share_combination(W S′) do
cost_table′[c′] ← eval_costs(W S, W S′
endfor
W S ← W S′
cost_table ← cost_table′
, c′
, cost_table)
endfor
return min(cost_table)
Algorithm 1: Optimal protocol selection algorithm. The al-
gorithm takes as input the DAG of the program with the cir-
cuit descriptions of all modules. It returns the protocol cost
for the optimal protocol selection.
Algorithmic implementation. The protocol selection algorithm is
given in Algorithm 1 and described next. The initial W S consists of
all inputs of the DAG G. Consequently, the cost to represent a W S
in a specific sharing combination is the cost to share each input
with the specified sharing (Line 2). Next, the iterative optimization
routine is initiated. A module from the ordered G is added to the
W S and completed modules are removed to create the next working
set W S′ (Line 6). Then, all possible sharing combinations of the
next W S′ are enumerated. For each of these combinations, the
best protocol selection based on all sharing configurations of the
previous W S is computed (Line 8). This task is realized in function
eval_costs(), outlined in Algorithm 2, which takes as input the
two working sets, as well as the desired sharing configuration
c′ of W S′ and a cost table that stores the costs to compute all
possible configurations of W S. The costs to evaluate the newly
added module, reflecting the sharings in W S and W S′ is computed
in function cost_step(), which models the evaluation costs of MPC
protocols. A discussion on cost models is given in §4.3. Once all
possible sharings of W S′ are computed, W S is replaced by W S′
to add a further module. The algorithm ends, once all modules
have been visited, and thus an optimal output sharing has been
identified.
Scalable protocol selection. In cases where the DAG exceeds the
computationally manageable width, the optimization algorithm can
compute the optimal protocol selection for all sub-graphs, which
have a width that is solvable. For the remaining sub-graphs, or
the combination of multiple sub-graphs, heuristics, such as the
hill-climbing heuristic proposed in [32] could be used to search for
an optimized selection in the combination of different optimally
solved sub-graphs.
4.3 Cost Model and Probing
The most relevant cost factors of MPC are the total protocol run-
time, the bandwidth requirement and the number of communication
rounds between the MPC parties. An accurate cost model is required
for an optimized protocol selection. The total communication com-
plexity can precisely be predicted by summing the communication
costs of all individual building blocks of a hybrid protocol, whereas
the runtime prediction is more complex. For large circuits (i.e., sev-
eral million non-linear gates) a simple approach can give a rough
estimate, where the circuit depth d is multiplied by the communica-
tion latencyTlat and added with the number of non-linear gates Gnl
divided by the maximum throughput of non-linear gates per sec-
ond T Pnl to get a runtime estimate Testim = d · Tlat + Gnl/T Pnl .
However, this does not work for smaller circuits, as these do not
fully saturate the network connection. We follow a more complex
approach, where the input of the runtime prediction is the compu-
tation and communication costs of the individual protocol building