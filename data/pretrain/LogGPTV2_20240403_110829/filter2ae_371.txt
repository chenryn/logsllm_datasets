# 深入理解win32（十）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在上一节里我们主要对标准空间和通用空间进行了了解，这一节我们来了解线程以及实现进程的遍历。
## 进程遍历
在实现进程的遍历之前，我们首先要了解进程这个概念：
>
> 进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。
用通俗点的话来说，一个exe在双击启动后就变成了一个进程。那么我们要想实现进程的遍历，这里就需要用到windows给我们提供的几个api。进程遍历的方式有很多，这里就说一种最常用的方式。
**CreateToolhelp32Snapshot**
    HANDLE WINAPI CreateToolhelp32Snapshot( 
    DWORD dwFlags,                     //用来指定快照中需要返回的对象
    DWORD th32ProcessID );            //一个进程的ID，用来指定要获取哪一个进程的快照
                                    //若想获得系统进程列表或获取当前进程快照时可以设置成0
> dwFlags
>
> Specifies portions of the system to include in the snapshot. This parameter
> can be one of the following: Value Description TH32CS_SNAPALL Equivalent to
> specifying TH32CS_SNAPHEAPLIST, TH32CS_SNAPMODULE, TH32CS_SNAPPROCESS, and
> TH32CS_SNAPTHREAD. TH32CS_SNAPHEAPLIST Includes the heap list of the
> specified process in the snapshot. TH32CS_SNAPMODULE Includes the module
> list of the specified process in the snapshot. TH32CS_SNAPPROCESS Includes
> the process list in the snapshot. TH32CS_SNAPTHREAD Includes the thread list
> in the snapshot.
>
> th32ProcessID
>
> Process identifier. This parameter can be zero to indicate the current
> process. This parameter is used when the TH32CS_SNAPHEAPLIST or
> TH32CS_SNAPMODULE value is specified. Otherwise, it is ignored.
`CreateToolhelp32Snapshot`这个api主要是用来创建一个进程快照，我们知道在一个程序运行起来过后，是不能够对这个程序进行任何修改的操作的，所以我们要想拿到进程的句柄，就需要使用到`CreateToolhelp32Snapshot`这个api首先拍摄一个进程的快照
这里`CreateToolhelp32Snapshot`的`dwFlags`一般有以下几个值
    TH32CS_SNAPHEAPLIST 枚举th32ProcessID参数指定的进程中的堆。
    TH32CS_SNAPMODULE 枚举th32ProcessID参数指定的进程中的模块。
    TH32CS_SNAPPROCESS 枚举系统范围内的进程，此时th32ProcessID参数被忽略。
    TH32CS_SNAPTHREAD 枚举系统范围内的线程，此时th32ProcessID参数被忽略。
函数执行成功会返回一个快照句柄，否则返回INVALID_HANDLE_VALUE（-1）。那么这里我们就首先可以写出一个拍摄快照的代码，若返回`INVALID_HANDLE_VALUE`则弹框显示快照没有拍摄成功
    void InitProcess(HWND hListProcess, HWND hDlg)
    {
        PROCESSENTRY p32;
        HANDLE Sanpshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (Sanpshot == INVALID_HANDLE_VALUE)
        {
            MessageBoxA(hDlg, TEXT("Createsnapshot failed"), TEXT("Error), MB_OK);
        }
    }
**Process32First** & **Process32Next**
当快照拍摄完成之后，我们就需要进行进程的遍历，这里就用到`Process32First`和`Process32Next`这两个api
    BOOL WINAPI Process32First( 
    HANDLE hSnapshot,                 //快照句柄
    LPPROCESSENTRY32 lppe );        //向PEOCESSENTRY32结构的指针
>   * _hSnapshot_
>
>
> Handle to the snapshot returned from a previous call to the
> [**CreateToolhelp32Snapshot**](_wcesdk_win32_createtoolhelp32snapshot.htm)
> function.
>
>   * _lppe_ Pointer to a
> [**PROCESSENTRY32**](_wcesdk_win95_processentry32_str.htm) structure.
>
    BOOL WINAPI Process32Next( 
    HANDLE hSnapshot, 
    LPPROCESSENTRY32 lppe );
>   * _hSnapshot_ Handle to the snapshot returned from a previous call to the
> [**CreateToolhelp32Snapshot**](_wcesdk_win32_createtoolhelp32snapshot.htm)
> function.
>   * _lppe_ Pointer to a
> [**PROCESSENTRY32**](_wcesdk_win95_processentry32_str.htm) structure.
>
相当于我们首次遍历进程的时候使用到`Process32First`然后后面遍历的过程使用到`Process32Next`即可，注意两个api的第二个值都是一个指针，指向的是`PROCESSENTRY32`这个结构体，`PROCESSENTRY32`结构体的结构如下
    typedef struct tagPROCESSENTRY32 { 
    {
        DWORD dwSize;             //结构的长度，需要预先设置
        DWORD cntUsage;            //进程的引用记数 
        DWORD th32ProcessID;    //进程ID
        DWORD th32DefaultHeapID;//进程默认堆的ID
        DWORD th32ModuleID；    //进程模块的ID
        DWORD cntThreads；        //进程创建的线程数
        DWORD th32ParentProcessID；//进程的父线程ID
        LONG pcPriClassBase；    //进程创建的线程基本优先级
        DWORD dwFlags；            //内部使用
        CHAR szExeFile[MAX_PATH];//进程路径
    }PROCESSENTRY32;
我们主要关注的是`dwSize`、`th32ProcessID`和`szExeFile[MAX_PATH]`，即结构长度、进程ID以及路径，我们知道在windows里面分为内核层和用户层，但是有内核层是不能够直接操作的，那么这时候就只能使用PID去调用。
实现代码如下
    #include "stdafx.h"
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char *argv[])
    {
        PROCESSENTRY32 pe32;
        pe32.dwSize = sizeof(pe32);
        HANDLE hSnapshot_proc = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (hSnapshot_proc != INVALID_HANDLE_VALUE)
        {
            BOOL check = Process32First(hSnapshot_proc, &pe32);
            while (check)
            {
                printf("进程PID = %d 进程名 = %s\n", pe32.th32ProcessID, pe32.szExeFile);
                check = Process32Next(hSnapshot_proc, &pe32);
            }
        }
        CloseHandle(hSnapshot_proc);
        system("pause");
        return 0;
    }
实现效果如下
## 线程
**线程** （英语：thread）是操作系统能够进行运算调度的最小单位。大部分情况下，它被包含在进程之中，是进程中的实际运作单位。
我们平时所看到的exe只是一个程序，而当程序跑起来之后才叫进程，而一个进程里面至少含有一个线程，也就是说必须要有线程才能让程序跑起来。
比如这里写一个循环输出
这里可以看到进程的线程数为1
**CreateThread**
是windows下创建线程的api，我们这里使用`CreateThread`创建一个线程实现循环输出
    DWORD WINAPI ThreadProc(
      LPVOID lpParameter   // thread data
    )
    {
        for (int i = 0 ; i  全局变量&线程参数
这里为了增强对线程的理解，我们试着使用`CreateProcess`创建线程创建文本框并点击开始后，每隔一秒钟，文本框中的值减1
创建窗口并给文本框赋初值为1000，把句柄`hEdit`定义成全局变量
        case WM_INITDIALOG:
            {
                hEdit = GetDlgItem(hDlg, IDC_EDIT);
                SetWindowText(hEdit, "1000");
                break;
            }
获取文本框内容
    TCHAR szBuffer[10];
    memset(szBuffer, 0 , 10);
    //获取文本框内容
    GetWindowText(hEdit, szBuffer, 10);
将文本框的内容转换为整数
    DWORD dwTimer;
    sscanf(szBuffer, "%d", &dwTimer);
整数自减
    dwTimer--;
整数转回字符串
    memset(szBuffer, 0 , 10);
    sprintf(szBuffer, "%d", dwTimer);
写回文本框
    SetWindowText(hEdit, szBuffer);
演示效果如下
创建线程实现每隔1秒自增自减
    // win32 thread.cpp : Defines the entry point for the application.
    //
    #include "stdafx.h"    
    HWND hEdit_SUB;
    HWND hEdit_ADD;
    DWORD WINAPI ThreadProc_SUB(LPVOID lpParameter)
    {
        TCHAR szBuffer[10];
        memset(szBuffer, 0 , 10);
        //获取文本框内容
        GetWindowText(hEdit_SUB, szBuffer, 10);
        //内容->整数
        DWORD dwTimer;
        sscanf(szBuffer, "%d", &dwTimer);
        while (dwTimer > 0)
        {
        //整数自减
        dwTimer--;
        Sleep(1000);
        //整数->字符串
        memset(szBuffer, 0 , 10);
        sprintf(szBuffer, "%d", dwTimer);
        //写回
        SetWindowText(hEdit_SUB, szBuffer);
        }
        return 0;
    }
    DWORD WINAPI ThreadProc_ADD(LPVOID lpParameter)
    {
        TCHAR szBuffer[10];
        memset(szBuffer, 0 , 10);
        //获取文本框内容
        GetWindowText(hEdit_ADD, szBuffer, 10);
        //内容->整数
        DWORD dwTimer;
        sscanf(szBuffer, "%d", &dwTimer);
        while (dwTimer 字符串
        memset(szBuffer, 0 , 10);
        sprintf(szBuffer, "%d", dwTimer);
        //写回
        SetWindowText(hEdit_ADD, szBuffer);
        }
        return 0;
    }
    BOOL CALLBACK MainDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
        BOOL bRet = FALSE;
        switch(uMsg)
        {
        case WM_CLOSE:
            {
                EndDialog(hDlg, 0);
                break;
            }
        case WM_INITDIALOG:
            {
                hEdit_SUB = GetDlgItem(hDlg, IDC_EDIT_SUB);
                hEdit_ADD = GetDlgItem(hDlg, IDC_EDIT_ADD);
                SetWindowText(hEdit_SUB, "1000");
                SetWindowText(hEdit_ADD, "0");
                break;
            }
        case WM_COMMAND:
            switch (LOWORD (wParam))
            {
            case IDC_BUTTON:
                {
                    HANDLE hThread_SUB = ::CreateThread(NULL, 0, ThreadProc_SUB, NULL, 0, NULL);    
                    HANDLE hThread_ADD = ::CreateThread(NULL, 0, ThreadProc_ADD, NULL, 0, NULL);
                    //如果不在其他的地方引用它 关闭句柄                
                    ::CloseHandle(hThread_SUB);
                    ::CloseHandle(hThread_ADD);
                    return TRUE;
                }
            break;
            }
        }
        return bRet;
    }
    int APIENTRY WinMain(HINSTANCE hInstance,
                         HINSTANCE hPrevInstance,
                         LPSTR     lpCmdLine,
                         int       nCmdShow)
    {
         // TODO: Place code here.
        DialogBox(hInstance, MAKEINTRESOURCE(IDD_DIALOG_MAIN), NULL,MainDlgProc);
        return 0;
    }