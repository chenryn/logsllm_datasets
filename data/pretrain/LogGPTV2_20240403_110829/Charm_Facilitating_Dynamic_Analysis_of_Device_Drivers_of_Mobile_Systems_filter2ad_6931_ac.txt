hence removing the wait-for-ack latency between these
consecutive writes.
4.4 Dependencies
A device driver does not merely interact with the I/O
device hardware interface. It often interacts with other
kernel modules in the mobile system. We use two solu-
tions for resolving these dependencies. First, if a kernel
module is not needed on the mobile system itself, we
move that module to the workstation virtual machine as
well. The more modules that are moved to the virtual
machine, the better we can analyze the device driver be-
havior. Consider fuzzing as an example. Fuzzing the
device driver in the virtual machine will manage to also
ﬁnd bugs in these other modules if they are moved to
the virtual machine. An example of a dependent mod-
ule that we move the virtual machine is the bus driver.
Many I/O devices are connected to the main system bus
in the System-on-a-Chip (SoC) via a peripheral bus. In
this case, the device driver does not directly interact with
its own I/O device. Instead, it uses the bus driver API.
Second, if a module is needed on the mobile system,
we keep the module in the mobile system and implement
a Remote Procedure Call (RPC) interface for the driver
in the virtual machine to communicate with it. We have
identiﬁed the minimal set of kernel modules that can-
not be moved to the virtual machine. We refer to these
modules as “resident modules”. These modules (which
include power and clock management system, pin con-
troller hardware, and GPIO) are in charge of hardware
components that are needed to boot the mobile system
and conﬁgure the USB interface. We refer to these hard-
ware components as “resident hardware”. Figure 2b il-
lustrates this design.
Note that we implement Charm’s RPC interface at the
boundary of generic kernel APIs. More speciﬁcally, we
use the generic kernel power management, clock man-
agement, pin controller, and GPIO API for RPC. This
allows for the portability of the RPC interface. That
is, since the kernel of all Android-based mobile systems
leverage mostly the same API (although different ker-
nel versions might have slightly different API), Charm’s
RPC implementation can be simply ported, requiring
minimal engineering effort.
4.5 Porting a Device Driver to Charm
Supporting a new driver in Charm requires porting the
driver to Charm. At its core, this is similar to porting a
driver from one Linux kernel to another, e.g., porting a
driver to a different Linux kernel version or to the kernel
used in a different platform. Device driver developers
are familiar with this task. Therefore, we believe that
porting a driver to Charm will be a routine task for driver
developers. Moreover, we show, through our evaluation,
that non-driver developers should also be able to perform
USENIX Association
27th USENIX Security Symposium    297
the port as long as they have some knowledge about ker-
nel programming, which we believe is a requirement for
security analysts working on kernel vulnerabilities.
Porting a device driver to run in Charm requires the
following steps. The ﬁrst step is to add the device driver
to the kernel of the virtual machine in Charm. This re-
quires copying the device driver source ﬁles to the kernel
source tree and compiling them. Moreover, if the de-
vice driver has movable dependencies, e.g., a bus driver,
the dependent modules must be similarly moved to the
virtual machine kernel. One might face two challenges
here. The ﬁrst challenge is that the virtual machine ker-
nel might have different core Linux API compared to the
kernel of the mobile system. To solve this challenge, it is
best to use a virtual machine kernel as close in version to
the kernel of the mobile system as possible. This might
not fully solve the incompatibilities. Hence, for the left-
over issues, small changes to the driver might be needed.
We have faced very few such cases in practice. For ex-
ample, when porting the Nexus 6P GPU driver, we no-
ticed that the Linux memory shrinker API in the virtual
machine kernel is slightly different than that of the smart-
phone. We addressed this by mainly modifying one func-
tion implementation. The second challenge is potential
incompatibilities due to the virtual machine kernel being
compiled for x86 rather than ARM. This is due to the po-
tential use of architecture-speciﬁc constants and API in
the driver. To solve these, it is best to support the ARM
constants and API in the x86-speciﬁc part of the Linux
kernel instead of modifying the driver. We have faced a
couple of such cases. For example, Linux x86 support
does not provide the kmap atomic flush unused()
API, which is supported in ARM and hence used in some
drivers. Therefore, this function needs to be added and
implemented in Charm.
The second step is to conﬁgure the driver to run in the
virtual machine given that the actual I/O device hardware
is not present. To do this, the device tree entries corre-
sponding to the I/O device hardware must be moved from
the mobile system’s device tree to that of the virtual ma-
chine (as discussed in §4.2). In doing so, dependent de-
vice tree entries, such as the bus entry, must be moved
too.
The third step is to conﬁgure Charm to remote the I/O
operations of the driver to the corresponding mobile sys-
tem. This includes determining the physical addresses of
register pages of the corresponding I/O device (easily de-
termined using the device tree of the mobile system) as
well as setting up the required RPC interfaces for interac-
tions with modules in the mobile system. The latter can
be time-consuming. Fortunately, it is a one-time effort
since the RPC interface is built on top of generic Linux
API shared across all Linux-based mobile systems (as
mentioned in §4.4). Hence, many of the RPC interfaces
Mobile System
I/O Device
LG Nexus 5X
LG Nexus 5X
Huawei Nexus 6P
Samsung Galaxy S7
Camera
Audio
GPU
IMU Sensors
(accelerometer, compass,
gyroscope)
Device
driver LoC
65,000
30,000
31,000
3,000
Table 1: Device drivers currently supported in Charm.
can simply be reused.
The last step is to conﬁgure the mobile system to han-
dle the remoted operations. This needs to be done in
two sub-steps. First, Charm’s stub needs to be ported
to the kernel of the mobile system. This step is trivial
and requires adding a kernel module and conﬁguring the
USB interface to work with the module. Second, the de-
vice drivers that are ported to the virtual machine must
be disabled in the mobile system (since we cannot have
two device drivers managing the same I/O device). This
is easily done by disabling the device driver in the kernel
build process. Alternatively, one can remove the corre-
sponding device tree entries of the I/O device from the
mobile system’s device tree.
5
Implementation & Prototype
We have ported 4 device drivers to Charm: the camera
and audio device drivers of LG Nexus 5X, the GPU de-
vice driver of Huawei Nexus 6P, and the IMU sensor
driver of Samsung Galaxy S7. Table 1 provides more de-
tails about these drivers. It shows that these drivers, alto-
gether, constitute 129,000 LoC. We extract these drivers
from LineageOS sources for each of the phones. The
Linux kernel versions of the operating system for Nexus
5X, Nexus 6P, and Galaxy S7 are 3.10.73, 3.10.73, and
3.18.14. We port these drivers to a virtual machine run-
ning Android Goldﬁsh operating system with Linux ker-
nel version 3.18.94.
As mentioned in §4.1, we do not currently support
DMA operations. DMA is often used for data movement
between CPU and I/O devices. Therefore, the lack of
DMA support does not mostly affect the behavior of the
driver; it only affect the data of I/O device (e.g., a cap-
tured camera frame). However, this is not always the
case, and DMA can be used for programming the I/O de-
vice as well. One device driver that does so is the GPU
driver.
It uses DMA to program the GPU’s command
streamer with commands to execute. We cannot cur-
rently support this part of the GPU driver, and we hence
disable the programming of the command streamer in the
driver. Regardless, we show in §6.2 and §6.4 that we can
still effectively fuzz the device driver and even ﬁnd bugs.
We use a workstation in our prototype consist-
298    27th USENIX Security Symposium
USENIX Association
ing of two 18-core Xeon E5-2697 V4 processors (on
a dual-socket SeaMicro MBD-X10DRG-Q-B mother-
board) with 132 GB of memory and 4 TB of hard disk
space. We install and use Ubuntu 16.04.3 in the work-
station with Linux kernel version 4.10.0-28.32. To sup-
port the remoting of I/O operations, we have modiﬁed
the QEMU/KVM hypervisor (QEMU in Android emula-
tor 2.4, which we use in our prototype). Note that while
we use a Xeon-based machine in our prototype, we be-
lieve that a desktop/laptop-grade processor can be used
as well, although we have not yet tested such a setup.
This is because, as we will show in §6.2, the virtual ma-
chine does not need a lot of resources to achieve good
performance for the device driver. A virtual machine
with 6 cores and 2 GB of memory is adequate.
We write device driver templates for Syzkaller. A tem-
plate provides domain knowledge for the fuzzer about
the structure of the system calls supported by the driver.
Our experience with Syzkaller is that without the tem-
plates, the fuzzer is not able to reach deep code within
the driver. We use these templates for all our experi-
ments with Syzkaller in §6. Alternatively, one can use
an automated tool for template generation, such as DI-
FUZE [36].
We faced a challenge in supporting interrupts. That is,
the x86-based interrupt controllers supported in the vir-
tual machine only supports up to 24 interrupt line num-
bers. The ARM interrupt controller, on the other hand,
supports interrupt line numbers as large as 987. Hence,
we extended the number of supported interrupt line num-
bers in our virtual machine to 128 and implemented an
interrupt line number translation in the hypervisor.
6 Evaluation
We answer the following questions in this section: (i)
Is it feasible to support various device drivers of dif-
ferent mobile systems in Charm? (ii) Does remote de-
vice driver execution affect the performance of the de-
vice driver? (iii) Is Charm’s record-and-replay effective?
(iv) Can Charm be effectively used for ﬁnding bugs in
device drivers? Does using an x86 machine (vs. ARM)
result in false positives? and (v) Can manual debugging
of a device driver, enabled by Charm, enable the secu-
rity analyst to understand a vulnerability and/or build an
exploit?
6.1 Feasibility
It is important that Charm supports diverse device drivers
in different mobile systems. We evaluate how long it
takes one to port a new driver to Charm. To do this,
we report the time it took one of the authors to port the
GPU driver of Nexus 6P and the IMU sensor driver of
Samsung Galaxy S7. This author ported these drivers
to Charm after the implementation of Charm was almost
complete, hence he could mainly focus on the port itself.
The port of these two drivers was mainly performed
by a different author from the author who ported the ﬁrst
two drivers (i.e., camera and audio drivers of Nexus 5X).
Therefore, this author had to learn about the port process
in addition to performing the port. These two new drivers
are each on a different smartphone compared to Nexus
5X used for camera and audio drivers. Therefore, the
port of these drivers required adding Charm’s component
to these smartphones’ kernels as well.
It took the author less than one week to port the GPU
driver and, after that, about 2 days to port the sensor
driver. This author is familiar with kernel programming
and device drivers. We believe that this is the proﬁle of a
security analyst who works on device drivers.
6.2 Performance
Charm adds noticeable latency to every remoted opera-
tion (i.e., register accesses, interrupts, and interactions
with the resident modules as discussed in §4.4). There-
fore, one might wonder if Charm impacts the perfor-
mance of the device driver signiﬁcantly.
To evaluate the performance of the device driver, we
perform two experiments. In the ﬁrst experiment, we use
the Syzkaller fuzzing framework. That is, we conﬁgure
Syzkaller to fuzz the driver by issuing a large number of
syscalls to the camera driver of Nexus 5X both directly
in the mobile system and in Charm. Syzkaller operates
by creating “programs”, which are ensembles of a set
of syscalls for the driver, and then executing these pro-
grams. We run Syzkaller for one hour in each experiment
and measure the number of executed programs as well as
the code coverage.
Figure 3a shows the results for the number of executed
fuzzer programs per minute. We show the results for 4
setups: LVM, MVM, HVM, and Phone. The ﬁrst three
setups (standing for Light-weight VM, Medium-weigh
VM, and Heavy-weight VM) represent fuzzing the de-
vice driver in Charm while the last one represents fuzzing
the device driver directly on the Nexus 5X smartphone.
LVM is a virtual machine with 1 core and 1 GB of mem-
ory. MVM is a virtual machine with 6 cores and about
2 GB of memory (similar to the specs of the Nexus 5X).
HVM is a virtual machine with 16 cores and 16 GB of
memory. Moreover, we conﬁgure Syzkaller to launch
as many fuzzer processes (one of the conﬁguration op-
tions of the framework that controls the degree of con-
currency) as the number of cores. The results show that
MVM achieves the best performance amongst the virtual
machine setups. It outperforms the LVM due to avail-
ability of more resources needed for execution of fuzzing
USENIX Association
27th USENIX Security Symposium    299
6.3 Record-and-Replay
We demonstrate the feasibility of record-and-replay in
Charm. As mentioned in §2.2, we implement a simple
record-and-replay solution for Charm.
It only records
and replays the interactions of the device drivers and the
I/O device (including register accesses and interrupts).
Replaying register accesses is simple: a write access is
simply ignored while a read access receives a value from
the recorded log. Replaying interrupts is done by inject-
ing the interrupt after observing all the preceding register
accesses. Our simple record-and-replay implementation
does not support concurrent execution of threads within
the driver.
To demonstrate the effectiveness of Charm’s record-
and-replay, we record the execution of a PoC (related to
bug #2 discussed in §6.4). We are then able to success-
fully replay the execution of the PoC and its interactions
with the device driver without requiring a mobile system.
Such a replay capability is signiﬁcant help to understand-
ing this bug.
We also evaluate the overhead of recording and the ex-
ecution speed of the replay. For this purpose, we record
the initialization phase of the camera device driver in
Nexus 5X and successfully replay it without needing a
Nexus 5X smartphone. We measure the recorded initial-
ization and the replayed initialization to take 1843 ms
and 344 ms, respectively. As mentioned in the previous
section, the normal initialization of this driver in Charm
takes 1760 ms. The results show that (i) recording does
not add signiﬁcant overhead to Charm’s execution and
(ii) the replay is much faster than the normal execution
(indeed, the replay is even faster than the initialization
time on the smartphone itself, which is 555 ms). The lat-
ter ﬁnding is important: replay accelerates the analysis,
e.g., for that of a PoC.
6.4 Bug Finding
We investigate whether Charm can be used to effectively
ﬁnd bugs in device drivers. We use Syzkaller for this
purpose and fuzz the drivers supported in Charm. One
key question that we would like to answer is whether us-
ing an x86 virtual machine for a mobile I/O device driver