### 4.4 Dependencies
A device driver not only interacts with the I/O device hardware interface but also often communicates with other kernel modules within the mobile system. To manage these dependencies, we employ two strategies:

1. **Module Relocation**: If a kernel module is not essential for the mobile system's operation, we relocate it to the workstation virtual machine. This approach enhances our ability to analyze the device driver's behavior. For example, during fuzzing, moving dependent modules to the virtual machine allows us to detect bugs in those modules as well. A typical module that can be relocated is the bus driver, which is responsible for managing communication between the main system bus and peripheral devices.

2. **Remote Procedure Call (RPC) Interface**: If a module must remain on the mobile system, we maintain it there and implement an RPC interface for the driver in the virtual machine to communicate with it. We have identified a minimal set of "resident modules" that cannot be moved to the virtual machine, such as power and clock management systems, pin controllers, and GPIO. These modules are critical for booting the mobile system and configuring the USB interface. We refer to the hardware components managed by these modules as "resident hardware." Figure 2b illustrates this design.

**Note**: Charm's RPC interface is implemented at the boundary of generic kernel APIs, including power management, clock management, pin controller, and GPIO. This ensures portability, as most Android-based mobile systems use similar APIs. Thus, Charm's RPC implementation can be easily ported with minimal engineering effort.

### 4.5 Porting a Device Driver to Charm
To support a new driver in Charm, the driver must be ported to the virtual environment. This process is similar to porting a driver from one Linux kernel to another, a task familiar to device driver developers. Our evaluation shows that even non-driver developers with some knowledge of kernel programming, which is a requirement for security analysts working on kernel vulnerabilities, can perform the port.

The steps to port a device driver to run in Charm are as follows:

1. **Add the Driver to the Virtual Machine Kernel**:
   - Copy the device driver source files to the kernel source tree.
   - Compile the driver.
   - Move any dependent modules, such as the bus driver, to the virtual machine kernel.
   - Address potential API incompatibilities by using a virtual machine kernel version close to the mobile system's kernel. Small changes to the driver may be necessary.
   - Handle architecture-specific incompatibilities, such as differences between x86 and ARM, by supporting ARM constants and APIs in the x86-specific part of the Linux kernel.

2. **Configure the Driver for the Virtual Environment**:
   - Move the device tree entries corresponding to the I/O device hardware from the mobile system's device tree to the virtual machine's device tree.
   - Ensure dependent device tree entries, such as the bus entry, are also moved.

3. **Set Up Remote I/O Operations**:
   - Determine the physical addresses of the register pages of the I/O device using the mobile system's device tree.
   - Set up the required RPC interfaces for interactions with modules in the mobile system. This step can be time-consuming but is a one-time effort due to the generic nature of the Linux APIs.

4. **Configure the Mobile System**:
   - Port Charm’s stub to the kernel of the mobile system, which involves adding a kernel module and configuring the USB interface.
   - Disable the device drivers in the mobile system that have been ported to the virtual machine to prevent conflicts.

### 5 Implementation & Prototype
We have successfully ported four device drivers to Charm: the camera and audio device drivers of LG Nexus 5X, the GPU device driver of Huawei Nexus 6P, and the IMU sensor driver of Samsung Galaxy S7. Table 1 provides details about these drivers, which collectively consist of 129,000 lines of code (LoC). These drivers were extracted from LineageOS sources and ported to a virtual machine running Android Goldfish with Linux kernel version 3.18.94.

**DMA Support**:
- DMA operations, commonly used for data movement between CPU and I/O devices, are currently not supported. While this does not significantly affect the driver's behavior, it can impact the I/O device data. For example, the GPU driver uses DMA to program the command streamer, which we currently disable. Despite this, we demonstrate in §6.2 and §6.4 that effective fuzzing and bug detection are still possible.

**Prototype Setup**:
- Our prototype uses a workstation with two 18-core Xeon E5-2697 V4 processors, 132 GB of memory, and 4 TB of hard disk space, running Ubuntu 16.04.3 with Linux kernel version 4.10.0-28.32.
- We modified the QEMU/KVM hypervisor (QEMU in Android emulator 2.4) to support remote I/O operations.
- Syzkaller templates were created to provide domain knowledge for the fuzzer, enabling it to reach deep code within the driver.

**Interrupt Support**:
- We extended the number of supported interrupt line numbers in the virtual machine to 128 and implemented an interrupt line number translation in the hypervisor to handle the difference between x86 and ARM interrupt controllers.

### 6 Evaluation
We address the following questions in this section:

1. **Feasibility**:
   - It is feasible to support various device drivers from different mobile systems in Charm. The porting process took less than one week for the GPU driver and about 2 days for the IMU sensor driver, indicating that a security analyst with kernel programming experience can effectively perform the port.

2. **Performance**:
   - Charm introduces latency to remoted operations, but the performance impact is manageable. Experiments with Syzkaller show that a virtual machine with 6 cores and 2 GB of memory (MVM) achieves the best performance, outperforming both a lightweight VM (LVM) and a heavy-weight VM (HVM).

3. **Record-and-Replay**:
   - Our simple record-and-replay solution for Charm records and replays interactions between the device driver and the I/O device, including register accesses and interrupts. Replaying a PoC for a known bug demonstrated the effectiveness of this feature. The overhead of recording is minimal, and the replay is faster than normal execution, aiding in the analysis of bugs.

4. **Bug Finding**:
   - Using Syzkaller, we effectively found bugs in the device drivers supported by Charm. The use of an x86 virtual machine did not result in false positives, and manual debugging enabled by Charm helped in understanding and exploiting vulnerabilities.

This structured and detailed approach ensures clarity, coherence, and professionalism in the text.