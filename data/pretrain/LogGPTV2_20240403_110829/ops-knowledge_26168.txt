User: 请回答以下安全问题XSS突破JSON.parse和href属性我有一个非常复杂的情况，当我上传带有恶意文件名的jpg文件时，我试图执行存储的XSS攻击。
正在过滤空白，但它似乎是单引号和双引号以及&lt；>不进行过滤。此外，斜杠/和反斜杠似乎是被禁止的。
用户控制的输入是一个文件名；该文件名首先传递给js脚本，该脚本以以下方式构建JSON数据（用户控制的文件名表示为INJECT_HERE）。
&lt；脚本&gt；
var foo=JSON.parse（'｛“x”：1，“id”：“2”，“myarr”：[｛“x1”：“1”｝]，“x2”：[{“id1”：3，“id2”：“15”，“name”：“INJECT_HERE”，“path”：“\/uploads\/pics\/1\/INJECT_HERE”
&lt/脚本&gt；
然后，上面的变量用于将用户提供的输入传递给HTML元素。文件名（通过foo.myarr.x2.name）被传递给href属性（带有vue-js和v-bind），结果html如下所示：
&lt；div href=“https://localhost/INJECT_HERE“class=”foobar“&gt；&lt；/div&gt；
如何同时突破这两个上下文来执行存储的XSS？这可行吗？还是我尝试了一些做不到的事情？

Assistant: 你做不到。Vue使用DOM来设置href属性，所以它不会以欺骗HTML解析器的方式从服务器硬编码。根本不可能用DOM设置一个attrib，使其“脱离”attrib，或者启动一个新的attrib，就像您有原始HTML源一样；所有无效字符都将被逻辑转义，即使开发工具中的原始值使攻击看起来应该有效。
如果您在服务器上进行了任何模板化（可能是为了预渲染），那么这是一个问题，但实际上，您是安全的。
请注意，data:和javascript:url可能仍然是一个问题，但考虑到您明显的专业水平，您可能已经从该设置中得到了保护。
编辑：回复评论
考虑一个使用DOM注入内容的简单页面：
&lt；html&gt；
&lt；a id=a href=“#”&gt；xss&lt/a&gt；
&lt；脚本&gt；a.href='“&gt；&lt；script&gt；警报（123）&lt；\/script&gt；'；&lt；
&lt/html&gt；
如果您查看开发人员工具检查视图，您可能会看到类似这样可怕的东西：
&lt；a id=“a”href=“”&gt&lt；脚本&gt；警报（123）&lt/脚本&gt；“&gt；xss&lt；/a&gt；
似乎有一个&lt；脚本&gt；标记在&lt；a&gt；标签，事实上，如果你把它复制到一个空白页面并查看它，它会发出警报。然而，这实际上并不是一个问题，因为开发人员工具在玩视觉把戏。序列化时元素的实际内容更像这样：
&lt；a id=“a”href=“&amp；quot；&amp；gt；&lt；脚本&gt；警报（123）&lt；/script&gt；”&gt；xss&lt/a&gt；
这就是我所说的DOM自动转义任意内容的意思；只要您使用DOM来设置attrib，就没有办法用任何内容“破坏”attrib。这并不意味着像onmouseover这样有副作用的attrib不会对你造成错误，只是你不能通过调整href来设置onmouseover。
data:和javascript:url协议在其他地方已经讨论过了，但请注意，这是链接到任意内容文档（data:）和JS代码（jacascript:）的一种方式。
例如，当点击时，这两个警告“666”（野兽的标记）：
Java脚本：&lt；a href=javascript:alert（666）&gt；xss&lt/a&gt；
数据：&lt；a href=data:text/html，%3Script%3Alert%228666%29%3C/script%3E&gt；xss&lt/a&gt；
两者都可以用来代替http（s）url，所以一定要防范这种情况，尤其是javascript：因为它不需要斜杠来使代码可执行。