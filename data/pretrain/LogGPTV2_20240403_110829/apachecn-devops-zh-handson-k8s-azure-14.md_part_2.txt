    acr 登入-n
    ACR 的凭据将在 3 小时后过期。如果在演示过程中遇到以下错误，您可以使用以下命令再次登录到 ACR:
    ![Potential error that you might get while authenticating your machine to ACR](img/B17338_14_10.jpg)
    图 14.10:未来潜在的身份验证错误
9.  Next, you'll install **kubectl** on your machine. The Azure CLI has a shortcut to install the CLI, which you can use to install it:
    sudo az aks 安装-cli
    让我们验证 **kubectl** 可以连接到我们的集群。为此，我们将首先获取凭据，然后执行一个 **kubectl** 命令:
    az aks get-凭证-n hand onaks-g rg-hand onaks
    kubectl 获取节点
10.  Now, you can install the Azure Functions tools on this machine. To do this, run the following commands:
    wget-q https://packages . Microsoft . com/config/Ubuntu/18.04/packages-Microsoft-prod . deb
    sudo dpkg -i 套装程式-microsoft-prod.deb
    sudo apt-get 更新
    sudo apt-get 安装 azure-functions-core-tools-3 -y
    这将返回类似于图 14.11 的输出:
![Installing Azure Functions Core Tools](img/B17338_14_11.jpg)
图 14.11:安装函数核心工具
#### 注意
如果您运行的是比 18.04 更新的 Ubuntu 版本，请通过更改第一行中的网址以反映您的 Ubuntu 版本，确保您下载了正确的 **dpkg** 包。
现在，您已经具备了在 Kubernetes 上开始使用函数的先决条件。您创建了一个 ACR 来存储自定义容器映像，并且您有一个将用于创建和构建 Azure 函数的虚拟机。在下一节中，您将构建第一个函数，它是由 HTTP 触发的。
## 创建一个 HTTP 触发的 Azure 函数
在第一个例子中，您将创建一个 HTTP 触发的 Azure 函数。这意味着您可以浏览到实际函数所在的页面:
1.  To begin, create a new directory and navigate to that directory:
    mkdir http
    cd http
2.  Now, you will initialize a function using the following command:
    func init Docker
    **––docker**参数指定您将该函数构建为 Docker 容器。这将导致创建一个 Dockerfile。选择 Python 语言，这是下面截图中的选项 3:
    ![Creating a Python function](img/B17338_14_12.jpg)
    图 14.12:创建一个 Python 函数
    这将为您的功能创建所需的文件。
3.  Next, you will create the actual function. Enter the following command:
    新功能
    这应该会产生如下输出。选择第八个选项，HTTP 触发器，函数名称 **python-http** :
    ![Creating an HTTP-triggered function using the required option](img/B17338_14_13.jpg)
    图 14.13:创建一个 HTTP 触发的函数
4.  The code of the function is stored in the directory called **python-http**. You are not going to make code changes to this function. If you want to check out the source code of the function, you can run the following command:
    cat python-http/__init__。巴拉圭
5.  You will need to make one change to the function's configuration file. By default, functions require an authenticated request. You will change this to **anonymous** for this demo. Make the change using the **vi** command by executing the following command:
    vi python-http/function.json
    将*5 号线*上的**授权等级**替换为**匿名**。要进行该更改，请按 *I* 进入插入模式，然后移除**功能**并将其替换为**匿名**:
    ![Modifying the configuration file by changing the authLevelfunction to anonymous](img/B17338_14_14.jpg)
    图 14.14:将 authLevel 函数更改为匿名
    点击 *Esc* ，输入 **:wq！**，然后点击*进入*保存退出**六**。
    #### 注意
    您将功能的认证要求更改为**匿名**。这将使演示更容易执行。如果您计划将功能发布到生产中，您需要仔细考虑此设置，因为它控制谁有权访问您的功能。
6.  You are now ready to deploy your function to AKS. You can deploy the function using the following command:
    func kuble deploy 名称 python-http \
    -注册表 .azurecr.io
    这将导致函数运行时执行几个步骤。首先，它将构建一个容器映像，然后将该映像推送到注册表，最后，它将把该功能部署到 Kubernetes:
    ![Using the func kubernetes deploy command for deploying the function to AKS](img/B17338_14_15.jpg)
    图 14.15:将该功能部署到 AKS
    您可以单击显示的调用网址来访问您的函数。不过，在此之前，让我们先来探索一下集群上创建了什么。
7.  To create the function, a regular deployment on top of Kubernetes was used. To check the deployment, you can run the following command:
    kubectl 获取部署
    这将向您显示部署，如图 14.16 :
    ![Checking the deployment](img/B17338_14_16.jpg)
    图 14.16:部署细节
8.  This process also created a service on top of your Kubernetes cluster. You can get the public IP of the service that was deployed and connect to it:
    忽必烈得到服务
    这将向您显示服务及其公共 IP，如图 14.17*所示。注意这个公共知识产权和*第四步*的输出中显示的知识产权是如何相同的。*
![Getting the service’s public IP](img/B17338_14_17.jpg)
图 14.17:获取服务的公共 IP
打开网页浏览器，浏览至**http:///API/python-http？名称=手摇**。你应该看到一个网页显示你好，手淫者。该 HTTP 触发函数执行成功。这在*图 14.18* 中显示:
![Navigating to the external IP will return the HTTP function output](img/B17338_14_18.jpg)
图 14.18:HTTP 触发函数的输出
现在，您已经创建了一个带有 HTTP 触发器的函数。在您提供的 HTTP 应用编程接口具有不可预测的负载模式的情况下，使用 HTTP 触发函数非常有用。在进入下一部分之前，让我们先清理一下这个部署:
kubectl 删除部署 python-http-http
kubectl 删除服务 python-http-http
kubi tol delete secret python-http-删除密码 python-http
在本节中，您使用 HTTP 触发器创建了一个示例函数。让我们更进一步，将新功能与存储队列集成，并在下一节中设置 KEDA 自动缩放器。
## 创建队列触发函数
在前一节中，您创建了一个示例 HTTP 函数。在本节中，您将使用队列触发函数构建另一个示例。队列通常用于在应用的不同组件之间传递消息。可以基于队列中的消息触发一个函数，然后对这些消息执行额外的处理。
在本节中，您将创建一个与 Azure 存储队列集成的函数来使用事件。您还将配置 KEDA，以便在流量较低的情况下允许扩展到零 Pod 或从零 Pod 扩展。
让我们从在 Azure 中创建一个队列开始。
### 创建队列
在本节中，您将在该存储帐户中创建新的存储帐户和新的队列。在下一节*中，您将把函数连接到该队列，创建一个队列触发函数*。
1.  To begin, create a new storage account. Search for **storage accounts** in the Azure search bar and select Storage accounts:
    ![Navigating to the storage account services through the Azure portal](img/B17338_14_19.jpg)
    图 14.19:通过 Azure 门户导航到存储帐户服务
2.  Click the + New button at the top to create a new storage account. Provide the details to create the storage account. The storage account name has to be globally unique, so consider adding your initials. It is recommended to create the storage account in the same region as your AKS cluster. Finally, to save on costs, you are recommended to downgrade the replication setting to Locally-redundant storage (LRS) as shown in *Figure 14.20*:
    ![Providing resource group and storage account details to create the storage account ](img/B17338_14_20.jpg)
    图 14.20:提供创建存储帐户的详细信息
    准备就绪后，单击底部的“审阅+创建”按钮。在结果屏幕上，选择创建开始创建过程。
3.  It will take about a minute to create the storage account. Once it is created, open the account by clicking on the Go to resource button. In the Storage account pane, select Access keys in the left-hand navigation, click on Show keys, and copy the primary connection string, as shown in *Figure 14.21*. Note down this string for now:
    ![Navigating to Access keys and copying the Connection string](img/B17338_14_21.jpg)
    图 14.21:复制主连接字符串
    #### 注意
    对于生产用例，不建议使用访问密钥连接到 Azure Storage。拥有该访问密钥的任何用户都可以完全访问存储帐户，并可以读取和删除其上的所有文件。建议生成一个**共享访问签名** ( **SAS** )令牌来连接到存储，或者使用 Azure AD 集成的安全性。要了解更多关于存储的 SAS 令牌认证，请参考[https://docs . Microsoft . com/rest/API/storage services/delegate-access-with-shared-access-signature](14.html)。要了解更多关于 Azure AD 认证到 Azure Storage 的信息，请参考[https://docs . Microsoft . com/rest/API/Storage service/authorize with-Azure-active-directory](14.html)。
4.  最后一步是在存储帐户中创建我们的队列。在左侧导航中查找**队列**，点击+ Queue 按钮添加队列，并提供名称。按照这个演示，使用**功能**作为队列名称:
![Creating a Queue service](img/B17338_14_22.jpg)
图 14.22:创建新队列
现在，您已经在 Azure 中创建了一个存储帐户，并拥有了它的连接字符串。您在此存储帐户中创建了一个队列。在下一节中，您将创建一个函数来使用队列中的消息。
### 创建队列触发函数
在前一节中，您在 Azure 中创建了一个队列。在本节中，您将创建一个新的函数来监视该队列并从队列中删除消息。您需要使用此队列的连接字符串配置此函数:
1.  From within the VM, begin by creating a new directory and navigating to it:
    激光唱片..