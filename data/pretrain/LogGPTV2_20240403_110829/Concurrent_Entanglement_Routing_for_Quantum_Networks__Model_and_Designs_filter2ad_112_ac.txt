66
SIGCOMM ’20, August 10ś14, 2020, Virtual Event, NY, USA
Shouqian Shi and Chen Qian
and stable network topology; and 2) path recovery on P4, based on
local and probabilistic link states. The recently proposed multipath
routing for quantum entanglements [36] is a circuit-switching style
protocol and will be compared to our work in Sec. 5.
4 ENTANGLEMENT ROUTING ALGORITHMS
The proposed entanglement routing algorithms utilize the unique
properties of quantum networks that have not been explored in
classic network routing. Compared to recent quantum network
studies [14, 24, 36, 49], the proposed protocols follow a standard
protocol-design approach and use more realistic network models:
arbitrary network topologies, multiple concurrent S-D pairs to
compete for links, link state exchanges, and limited qubit capacity
of each node.
4.1 Main ideas
Our design is based on the following three innovative ideas to
utilize the unique features of a quantum network:
1. Path computation based on global topology and path re-
covery based on local link states. The quantum network graph
G = ⟨V , E, C⟩ is relatively stable and hence can be known to every
node. However, the link states are highly dynamic and probabilis-
tic in each time slot. The frequent link state changes cannot be
propagated throughout the whole network, especially when the
entanglements decay quickly. Hence, nodes select and agree on the
same list of paths based on global topology information in P2, and
try to recover from link failures based on local link states in P4.
2. Wide paths are preferred. Recall that on a W -path, each
edge has at least W parallel channels. Fig. 4(a) shows an example
of a 2-path from A to B. Compared to two disjoint paths shown
in Fig. 4(b), which cost the same amount of qubits and channels,
the wide path is more reliable because it only fails when two links
fail simultaneously at a single hop. To achieve high throughput
on a path with W > 1, nodes should share a consensus on how to
perform swapping (place internal links in Fig. 4) instead of making
choice randomly. Each channel is assigned a globally unique ID.
During P4, each node places an internal link between the link with
the smallest ID to its predecessor and the link with the smallest ID
to its successor. And it repeats this process until no internal link
can be made for this path.
Formally, we may define a routing metric, called the expected
number of ebits or expected throughput (EXT) Et , to quantify
an end-to-end path on the network topology. For a (W , h)-path
P, suppose the success rate of a single channel on the i-th hop is
pi , where i ∈ {1, 2, · · · , h}. We denote the probability of the k-th
hop on the path having exactly i successful links as Qi
, and the
k
probability of each of the first k hops of P has ⩾ i successful links
as P i
. Then we get the recursive formula set, for i ∈ {1, 2, · · · ,W }
k
and k ∈ {1, 2, · · · , h}:
i (cid:1)pi
k(1 − pk)W −i
= (cid:0)W
Q i
k
P i
1 = Q i
1
P i
k
= P i
k−1 ·
W

l =i
Q l
k
+ Q i
k ·
W

l =i +1
P l
k−1
(1)
Further, considering the success probability q of each entanglement
swapping, we get the EXT:
67
Figure 4: A wide path (subfigure a) is more reliable than disjoint
paths (subfigure b) using the same resource
Figure 5: EXT, p = 0.9
Figure 6: EXT, p = 0.6
Et = qh ·
W

i =1
i · P i
h
(2)
We show some numerical results. For simplicity, we set p1, p2,
· · · , ph = p, and let p be 0.9 or 0.6. We vary the W from 1 to 3 and the
h from 1 to 10, and the results of the EXT of a W -path are shown
in Figures 5 and 6. It is obvious that a W -path has a significant
improvement of EXT over a 1-path, for more than a factor of W .
3. Offline computation versus contention-aware online path
selection. In different time slots, the S-D pairs may be different.
We propose two approaches to select paths for S-D pairs in each
time slot. The first approach utilizes offline computation, which hap-
pens before any time slot, e.g., during system initialization. Multiple
paths for each potential S-D pair are pre-computed and stored by
all nodes as common knowledge. In P2 of each time slot, nodes
select the pre-computed paths for current S-D pairs. The contention-
aware online algorithm, however, does not pre-compute the paths
for all S-D pairs. At each time slot, the algorithm finds contention-
free paths for current S-D pairs. A set of paths are ‘contention-free’
if the network can simultaneously satisfy the qubit and channel
requirement for all the paths in full width.
4.2 Q-PASS: Pre-computed pAth Selection and
Segment-based recovery
4.2.1 Algorithm overview. We present the algorithm Q-PASS, whose
workflow follows the four-phase time slot model with an additional
offline phase. The core idea of Q-PASS is to pre-compute potential
‘good’ paths between all possible S-D pairs based on the network
topology G. Then in each time slot, every node uses an online
algorithm to make qubit-to-channel assignments based on the pre-
computed paths of current S-D pairs and make local swapping de-
cisions based on local link states. The design includes both offline
and online algorithms.
The offline computation happens at the system initialization and
after the network topology changes. The results of an offline phase
can be used by many succeeding time slots until a topology change
happen. Hence, we may assume the time for an offline period is
sufficiently long. The offline algorithm runs at the network infor-
mation server, which is honest but curious, with replica servers
for robustness. These servers connect to all quantum nodes via
classical networks. The output of the offline algorithm is the łcan-
didate pathsž for all possible S-D pairs. The candidate paths of each
ACDBAC’DBCD’(b) Two disjoint paths may easily fail with two unsuccessful links(a) One path with width two can deliver one qubit even under threefailed links 246810Number of hops0.51.01.52.02.5EXT3-path2-path1-path246810Number of hops0.000.250.500.751.001.251.501.75EXT3-path2-path1-pathConcurrent Entanglement Routing for Quantum Networks: Model and Designs
SIGCOMM ’20, August 10ś14, 2020, Virtual Event, NY, USA
Figure 7: Example of Q-PASS. Suppose ⟨A, B⟩ is the only S-D pair.
S-D pair are paths connecting the S-D nodes and with the smallest
values of the selected metric.
The algorithm of each time slot follows the four-phase time
slot model shown in Fig. 2 and runs on each node in a distributed
and concurrent manner. It should be fast and only use the k-hop
link-state information. P1 and P3 only include standard processes
and do not have special algorithmic designs. Q-PASS P2 takes the
candidate paths from the offline algorithm and the S-D pairs as
the input. It computes a number of selected paths for the S-D pairs
and its local qubit-to-channel assignment. Note that the inputs
are globally consistent on all nodes. Hence, the selected paths are
also consistent on different nodes. The assignment will produce
a number of successful links in P2. And in P3, nodes exchange
the link states with their k-hop neighbors. Q-PASS P4 uses the
selected paths and link state information as the input to compute
the swapping decisions (i.e., internal links). After P4, possible long-
distance entanglement can be built for S-D pairs. We present the
algorithms in detail.
4.2.2 Offline path computation. The offline algorithm should find
multiple paths for each S-D pair to provide multiple candidate paths
in P2 of each time slot. We use Yen’s algorithm [58] to get multiple
paths for each pair. Note that the results of Yen’s algorithm are not
contention-free: the paths may overlap at nodes or channels, and
in a single time slot, the network may not have enough qubits or
channels to satisfy all the candidate paths for an S-D pair.
Yen’s algorithm implicitly requires a selection of the routing met-
ric. As shown in Equ. 1, computing the proposed routing metric EXT
involves recursions, which may be prohibitively slow for multi-path
computation for all possible S-D pairs. Hence, we propose three
routing metrics, which are suboptimal in overall throughput but
faster to compute. 1) Sum of node distances (SumDist). SumDist
is computed as ΣLi , where Li is the length of any channel on the
i-th hop of the path. As the success rate of a channel decreases
exponentially with the physical distance L, SumDist can partially
reflect the difficulty of a path. 2) Creation Rate (CR). CR is com-
puted as Σ1/pi , where pi is the success rate of any channel on the
i-th hop of the path. Compared to SumDist, CR further considers
the path width. 3) Bottleneck capacity (BotCap). From Figures 5
and 6, the path width W has a greater impact on the path qual-
ity. The BotCap metric is −W , prefers wider paths over narrower
paths, and uses the CR to break ties for paths with the same width.
We consider the routing metric as a design parameter, and their
efficiency is compared in ğ 5.
For each possible S-D pair, the server running the offline algo-
rithm will use Yen’s algorithm to get N = 25 paths (offline paths)
for the pair and tell each node in the network about the resulting
paths. An example is shown in Fig. 7(a), the offline algorithm finds
ACDEB and AC′D′DEB as two candidate paths. N will grow by
50% percent in the next offline phase if the paths happen to be not
enough for a pair.
4.2.3 P2 algorithm of Q-PASS. The P2 algorithm runs on each node
locally. The inputs are all the offline paths P (known before P1) and
the S-D pairs (received in P1) O = {oi}, where oi is an S-D pair
⟨si , di⟩. The output is an ordered list of selected paths P′, each of
which connects a single S-D pair in O. According to the output
path list, each node performs the local qubit-to-channel assignment
and tries to establish entanglements on the bound channels with
neighbor nodes to build quantum links on these paths. Since P and
O are globally known for all nodes, the output P′ is also consistent
on different nodes, similar to the global consistency of classical
link-state routing.
The algorithm consists of two steps. Step 1) The paths computed
from the offline algorithm for all S-D pairs are retrieved and put
into a priority queue, ordered by the selected routing cost metric.
Then from the path with the lowest routing cost to the highest,
channels and qubits taken by the path are reserved exclusively. If a
path has width w by the offline algorithm, but currently available
resource can only support width 0 ⩽ w′ < w, then the path is
reinserted to the queue with an updated metric calculated from w′.
This process ends until no paths can be fully satisfied. The paths
selected in Step 1 are called major paths. Step 2) After Step 1, the
queue contains all unsatisfiable paths in the ascending order of the
routing metric. Each unsatisfiable path, however, may contain one
or more satisfiable segments or ‘partial paths’. The partial paths can
be used to recover link failures for the major paths, and thus are
called recovery paths. The qubits and channels for recovery paths
are reserved in the order of its priority in the queue.
For example in Fig. 7, ACDEB and AC′D′DEB are two candi-
date paths. In Step 1, ACDEB and AC′D′DEB are put into a priority
queue, and ACDEB is more prioritized than the other and is reserved
as the major path. Since D, E, and B do not have enough resources
for AC′D′DEB, Step 1 stops. In Step 2, AC′D′D is reserved as a re-
covery path. When the two steps finish, all nodes know the same set
of selected major paths and recovery paths because they share the
same set of inputs: network topology, S-D pairs, and offline paths.
Hence, each node assigns its qubits to the corresponding channels
and try to generate quantum links together with the neighbors. For
example, node A in Fig. 7(b) will assign one qubit to the channel to
C and another to the channel to C′, and try to entangle with C and
C′ via channel AC and AC′ respectively. The pseudocode for the
P2 algorithm is shown in Alg. 1.
4.2.4 P4 algorithm of Q-PASS. If the entanglement attempts in P2
always succeed, each node just performs entanglement swapping
to connect the links on the major paths, and the whole paths will
be successful. In practice, however, link failures happen at a high
probability and are not predictable. The P4 algorithm focuses on
68
AC’DEBCD’(a)Offline algorithm finds two paths for A-B: ACDEBand AC’D’DEB(b) In P2, ACDEB is reserved as the main path. AC’D’DEB does not have enough resource but part of it can be the recovery pathAC’DEBCD’AC’DEBCD’ink DE with link DD’, instead of CD-DEIt chooses to route through AC’D’D, and swaps  (c) In P4, D finds that the main path is disconnected.SIGCOMM ’20, August 10ś14, 2020, Virtual Event, NY, USA
Shouqian Shi and Chen Qian
the recovery of broken major paths based on the recovery paths
established in P2. The inputs of P4 algorithm are: 1) S-D pairs from
P1, 2) a major path list and a recovery path list from P2, and 3) the
k-hop link states of this node from P3.
Algorithm 1: Adaptive resource allocation
: G = ⟨V , E , C⟩, O , P
Input
// O : list of S-D pairs
// P : mapping from any S-D pair to its offline paths
Output : ⟨LC , LP ⟩
// LC : list of channels to assign qubits
// LP : ordered list of selected paths
1 LC ← 
2 LP ← 
3 TQ ← a table to map a node x to its qubit capacity Qx
4 construct TQ from current topology
5 W ← 
// empty table to map a path p to its width wp
6 q ← 
// empty priority queue of paths, sorted by routing
metric
7 for o ∈ O do
for p ∈ P[o] do
8
9
10
TW [p] ← W idt h(p , TQ)
m ← routing metric of p with width W[p]
q .enqueue(p , m)
12 while q is not empty do
11