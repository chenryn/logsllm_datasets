### Protection Against Privilege Escalation and Policy Enforcement

While the system does provide protection against some privilege escalation attacks and allows for a more flexible range of policies, it also has limitations. For instance, applications may still launch denial-of-service (DoS) attacks on other applications by connecting to them and preventing them from using their full set of permissions. Additionally, once an application loses certain privileges due to communication with other applications, it cannot regain those privileges.

### Quire's Feature: Defeating Confused Deputy Attacks

One feature of Quire that is not utilized in AdSplit is its ability to defeat confused deputy attacks. This is achieved by annotating inter-process communications (IPCs) with the entire call chain. In related work, Felt et al. [20] present a solution to "permission re-delegation" attacks on the Android system. Their "IPC inspection" system ensures that apps receiving IPC requests are poly-instantiated based on the privileges of their callers, thereby ensuring that the callee has no greater privileges than the caller.

### Comparison of Approaches

Both Quire’s "security passing" IPC annotations and the IPC inspection system address the same type of confused deputy attack. However, they differ in how intentional deputies are handled. The IPC inspection system strictly enforces reduced privileges for callees, without providing a mechanism for a callee to offer a safe interface to an otherwise dangerous primitive. Unlike Quire, the IPC inspection system does not require apps to be recompiled or any modifications to be made to how apps make IPC requests. Consequently, AdSplit does not require Quire’s IPC inspection system, and thus does not necessitate recompiling apps to achieve the described semantics.

### Recent Work on Kernel Extensions

More recent research has focused on kernel extensions that can observe IPC traffic, label files, and enforce various policies [9, 52]. These systems enhance the assurance of many of the above techniques by centralizing policy specification and enforcement mechanisms.

### Dynamic Taint Analysis on Android

Projects such as TaintDroid [15] and ParanoidAndroid [46] use dynamic taint analysis to prevent runtime attacks and data leakage. These projects tag objects with metadata to track information flow and enable policies based on the path that data has taken through the system. TaintDroid, for example, restricts the transmission of tainted data to remote servers by monitoring outbound network connections and disallowing the flow of tainted data along these channels.

AdSplit allows ads to run in separate processes, but applications can still pass sensitive information to separated advertisements. TaintDroid and ParanoidAndroid can be used to detect and prevent such information flow, making them complementary to AdSplit.

### Future Work

The work presented in this paper touches on a trend that will become increasingly prevalent: the merger of the HTML security model and the smartphone application security model. HTML is evolving from its one-size-fits-all security origins to allow additional permissions, such as access to location information, for specific pages granted by the user. Similarly, HTML extensions are being granted varying permissions rather than all-or-nothing access [4, 34].

On the other hand, iOS apps originally ran with full, unrestricted access to the platform, subject only to vague policies enforced by human auditors. Only access to location information was restricted. In contrast, the Android security model restricts app permissions, with many popular apps running without any optional permissions. Despite this, Android malware remains a growing problem, particularly from third-party app stores [19, 56]. Clearly, there is a need for more restrictive Android security, more akin to the one-size-fits-all web security model.

While the details of how web apps and smartphone apps will eventually combine are still uncertain, our paper highlights where this merger is already underway: when web content is embedded in a smartphone app. Beyond advertising, many smartphone apps use native code to set up one or more web views and then do the rest in HTML and JavaScript. This approach has several advantages, including easier support across different smartphone platforms and the ability to quickly update apps without needing to go through a third-party review process.

These trends, combined with the increasing functionality of HTML5, suggest that "native" apps may be entirely supplanted by some form of "mobile HTML" variant, similar to HP/Palm's WebOS, where every app is built this way. This could lead to an industry battle, but it also offers the opportunity to explore various interesting security questions, such as how an "external" web intent can safely interact with the "internal" Android intent system. Both serve essentially the same purpose and use similar mechanisms. We, and others, will pursue these new technologies toward their (hopefully) interesting conclusions.

### Conclusion

We have presented AdSplit, an Android-based advertising system that provides advertisers with integrity guarantees against potentially hostile applications. AdSplit leverages several mechanisms from Quire to ensure that UI events are correct and to communicate with the outside world in a manner that hosting applications cannot forge. AdSplit runs with minimal performance overhead and, with its HTML-based design, offers a clear path to widespread adoption. AdSplit not only protects advertisers against click fraud and ad blocking but also reduces the need for permission bloat among advertising-supported free applications and has the potential to reduce the incentive for applications to leak privacy-sensitive user information in return for better advertising revenues.

### Acknowledgments

We would like to thank Adrienne Porter Felt, David Wagner, Adam Pridgen, and Daniel Sandler for their valuable feedback. This work builds on our prior Quire project. We would also like to thank Yuliy Pisetsky and Anhei Shu for their assistance and efforts. This work was supported in part by NSF grants CNS-1117943 and CNS-0524211.

### References

[References are listed as provided, with proper formatting and links.]