does protect against some privilege escalation attacks,
and allows for enforcing a more ﬂexible range of poli-
cies, applications may launch denial of service attacks on
other applications (e.g., connecting to an application and
thus preventing it from using its full set of permissions)
and it does not allow the ﬂexibility for an application to
regain privileges which they lost due to communicating
with other applications.
One feature of Quire that is not used in AdSplit is
its ability to defeat confused deputy attacks, by annotat-
ing IPCs with the entire call chain. In concurrent work
to Quire, Felt et al. present a solution to what they
term “permission re-delegation” attacks against deputies
on the Android system [20]. With their “IPC inspec-
tion” system, apps that receive IPC requests are poly-
instantiated based on the privileges of their callers, en-
suring that the callee has no greater privileges than the
caller.
IPC inspection addresses the same confused
deputy attack as Quire’s “security passing” IPC anno-
tations, however the approaches diﬀer in how inten-
tional deputies are handled. With IPC inspection, the
OS strictly ensures that callees have reduced privileges.
They have no mechanism for a callee to deliberately of-
fer a safe interface to an otherwise dangerous primitive.
Unlike Quire, however, IPC inspection doesn’t require
apps to be recompiled or any other modiﬁcations to be
made to how apps make IPC requests.
(AdSplit does not require Quire’s IPC inspection sys-
tem, and thus also does not require apps to be recompiled
to have the semantics described in this paper.)
More recent work has focused on kernel extensions
that can observe IPC traﬃc, label ﬁles, and enforce a
variety of policies [9, 52]. These systems can enhance
the assurance of many of the above techniques by cen-
tralizing the policy speciﬁcation and enforcement mech-
anisms.
9.5.2 Dynamic taint analysis on Android
The TaintDroid [15] and ParanoidAndroid [46] projects
present dynamic taint analysis techniques to preventing
runtime attacks and data leakage. These projects attempt
to tag objects with metadata in order to track information
ﬂow and enable policies based on the path that data has
taken through the system. TaintDroid’s approach to in-
formation ﬂow control is to restrict the transmission of
tainted data to a remote server by monitoring the out-
bound network connections made from the device and
disallowing tainted data to ﬂow along the outbound chan-
nels.
AdSplit allows ads to run in separate processes but ap-
plications can still pass sensitive information to separated
advertisements. TaintDroid and ParanoidAndroid can be
used to detect and prevent any such ﬂow of information.
Thus they are complementary to AdSplit.
10 Future Work
The work in this paper touches on a trend that will be-
come increasingly prevalent over the next several years:
the merger of the HTML security model and the smart-
phone application security model. Today, HTML is
rapidly evolving from its one-size-ﬁts-all security origins
to allow additional permissions, such access to location
information, for speciﬁc pages that are granted those per-
missions by the user. HTML extensions are similarly
granted varying permissions rather than having all-or-
nothing access [4, 34].
On the ﬂip side, iOS apps originally ran with full, un-
restricted access to the platform, subject only to vague
policies enforced by human auditors. Only access to lo-
cation information was restricted. In contrast, the An-
droid security model restricts the permissions of apps,
with many popular apps running without any optional
permissions at all. Despite this, Android malware is
a growing problem, particularly from third-party app
stores (see, e.g., [19, 56]). Clearly, there’s a need for
more restrictive Android security, more like the one-size-
ﬁts-all web security model.
While the details of how exactly web apps and smart-
phone apps will eventually combine, our paper shows
where this merger is already underway: when web con-
tent is embedded in a smartphone app. Well beyond ad-
vertising, a variety of smartphone apps take the strategy
of using native code to set up one or more web views,
then do the rest in HTML and JavaScript. This has sev-
eral advantages:
it makes it easier to support an app
across many diﬀerent smartphone platforms. It also al-
lows authors to quickly update their apps, without need-
ing to go through a third-party review process.
These trends, plus the increasing functionality in
HTML5, suggest that “native” apps may well be entirely
supplanted by some sort of “mobile HTML” variant, not
unlike HP/Palm’s WebOS, where every app is built this
way4.
Maybe this will result in a industry battle royale, but
it will also oﬀer the ability to ask a variety of interesting
security questions. For example, consider the proposed
“web intents” standard5. How can an “external” web in-
tent interact safely with the “internal” Android intent sys-
tem? Both serve essential the same purpose and use sim-
ilar mechanisms. We, and others, will pursue these new
technologies toward their (hopefully) interesting conclu-
sions.
11 Conclusion
We have presented AdSplit, an Android-based advertis-
ing system that provides advertisers integrity guarantees
against potentially hostile applications that might host
them. AdSplit leverages several mechanisms from Quire
to ensure that UI events are correct and to communicate
to the outside world in a fashion that hosting applica-
tions cannot forge. AdSplit runs with marginal perfor-
mance overhead and, with our HTML-based design, of-
fers a clear path toward widespread adoption. AdSplit
not only protects advertisers against click fraud and ad
blocking, it also reduces the need for permission bloat
among advertising-supported free applications, and has
the potential to reduce the incentive for applications to
leak privacy-sensitive user information in return for bet-
ter advertising revenues.
Acknowledgments
We would like to thank Adrienne Porter Felt, David Wag-
ner, Adam Pridgen, and Daniel Sandler for their valuable
feedback. This work builds on our prior Quire project.
We would like to thank Yuliy Pisetsky and Anhei Shu for
their assistance and eﬀorts. This work was supported in
part by NSF grants CNS-1117943 and CNS-0524211.
References
[1] ADsafe. ADsafe, Feb. 2012. http://www.adsafe.org.
[2] Android. Processes and Threads | Android Develop-
ers, Nov. 2011. http://developer.android.com/guide/topics/
fundamentals/processes-and-threads.html.
[3] Android Open Source Project. dex - Dalvik Executable
Format, Nov. 2007. http://source.android.com/tech/dalvik/
dex-format.html.
4http://developer.palm.com/blog
5http://webintents.org/
[4] A. Barth, A. P. Felt, P. Saxena, and A. Boodman. Protect-
ing browsers from extension vulnerabilities. In 17th Net-
work and Distributed System Security Symposium (NDSS
’10), San Diego, CA, Feb. 2010.
[5] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses
for cross-site request forgery. In 15th ACM Conference
on Computer and Communications Security (CCS ’08),
Alexandria, VA, Oct. 2008.
[6] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame
In 17th USENIX Security
communication in browsers.
Symposium, San Jose, CA, July 2008.
[7] D. F. C. Brewer and M. J. Nash. The Chinese wall security
policy. In Proceedings of the 1989 IEEE Symposium on
Security and Privacy, pages 206–214, Oakland, CA, May
1989.
[8] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and A.-
R. Sadeghi. XManDroid: A new Android evolution
to mitigate privilege escalation attacks. Technical Re-
port TR-2011-04, Technische Universität Darmstadt, Apr.
2011. http://www.trust.informatik.tu-darmstadt.de/ﬁleadmin/
user_upload/Group_TRUST/PubsPDF/xmandroid.pdf.
[9] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R.
Sadeghi, and B. Shastry. Towards taming privilege-
In 19th Network and
escalation attacks on Android.
Distributed System Security Symposium (NDSS ’12), San
Diego, CA, Feb. 2012.
[10] T. Cheshire.
In depth: How Rovio made Angry
Birds a winner (and what’s next). Wired, Mar.
2011.
http://www.wired.co.uk/magazine/archive/2011/04/
features/how-rovio-made-angry-birds-a-winner.
[11] M. Conti, V. T. N. Nguyen, and B. Crispo. CRePE:
Context-related policy enforcement for Android. In 13th
Information Security Conference (ISC ’10), Boca Raton,
FL, Oct. 2010.
[12] L. Desmet, W. Joosen, F. Massacci, P. Philippaerts,
F. Piessens, I. Siahaan, and D. Vanoverberghe. Security-
by-contract on the .NET platform. Information Security
Technical Report, 13(1):25–32, 2008.
[13] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wal-
lach. Quire: Lightweight provenance for smart phone op-
In 20th USENIX Security Symposium,
erating systems.
San Francisco, CA, Aug. 2011.
[14] eLinux.org. Android Memory Usage, Feb. 2012. http:
//elinux.org/Android_Memory_Usage.
[15] W. Enck, P. Gilbert, C. Byung-gon, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth.
TaintDroid: An
information-ﬂow tracking system for realtime privacy
monitoring on smartphones. In 9th USENIX Symposium
on Operating Systems Design and Implementation (OSDI
’10), pages 393–408, Vancouver, B.C., Oct. 2010.
[16] W. Enck, M. Ongtang, and P. McDaniel. On lightweight
mobile phone application certiﬁcation. In 16th ACM Con-
ference on Computer and Communications Security (CCS
’09), Chicago, IL, Nov. 2009.
[17] Federal Trade Commission. Mobile Privacy for Kids:
Current Privacy Disclosures are Disappointing, Feb.
2012.
http://ftc.gov/os/2012/02/120216mobile_apps_kids.
pdf.
[18] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner.
Android Permissions Demystiﬁed. In 18th ACM Confer-
ence on Computer and Communications Security (CCS
’11), Chicago, IL, 2011.
[19] A. P. Felt, M. Finifter, E. Chin, S. Hanna, and D. Wagner.
In 1st ACM
A survey of mobile malware in the wild.
Workshop on Security and Privacy in Smartphones and
Mobile Devices (SPSM ’11), Chicago, IL, Oct. 2011.
[20] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and
E. Chin. Permission re-delegation: Attacks and defenses.
In 20th USENIX Security Symposium, San Fansisco, CA,
Aug. 2011.
[21] Google.
View: Android developer reference, Feb.
2011. http://developer.android.com/reference/android/view/
View.html#Security.
[22] Google Inc. Google AdMob Ads Android Fundamen-
tals, Nov. 2011. http://code.google.com/mobile/ads/docs/
android/fundamentals.html.
[23] Google Project Hosting. android-apktool - A tool for
reengineering Android apk ﬁles, Feb. 2012. http://code.
google.com/p/android-apktool.
[24] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe
exposure analysis of mobile in-app advertisements. In 5th
ACM Conference on Security and Privacy in Wireless and
Mobile Networks (WiSec ’12), Tucson, AZ, Apr. 2012.
[25] GreyStripe Inc. Android - SDK Integration Overview,
http://wiki.greystripe.com/index.php/Android#
Nov. 2011.
AndroidManifest.xml.
[26] C. Grier, S. Tang, and S. T. King. Secure web browsing
with the OP web browser. In 2008 IEEE Symposium on
Security and Privacy, Oakland, CA, May 2008.
[27] S. Guha, B. Cheng, and P. Francis.
Privad: Practi-
In 8th Symposium on
cal privacy in online advertising.
Networked Systems Design and Implementation (NSDI),
Boston, MA, Mar. 2011.
[28] J. Howell, C. Jackson, H. J. Wang, and X. Fan. Mashu-
pOS: Operating system abstractions for client mashups.
In 11th USENIX Workshop on Hot Topics in Operating
Systems (HotOS ’07), pages 1–7, 2007.
[29] InMobi. InMobi Android SDK - Version a300, Nov. 2011.
http://developer.inmobi.com/wiki/index.php?title=Android.
[30] A. Juels. Targeted advertising ... and privacy too.
In
2001 Conference on Topics in Cryptology: The Cryp-
tographer’s Track at RSA (CT-RSA 2001), San Francisco,
CA, Apr. 2001.
[31] A. Juels, S. Stamm, and M. Jakobsson. Combating click
fraud via premium clicks. In 16th USENIX Security Sym-
posium, Boston, MA, 2007.
[32] Jumptap.
Jumptap Android SDK Integration, Nov.
https://support.jumptap.com/index.php/Jumptap_
2011.
Android_SDK_Integration.
[46] G. Portokalidis, P. Homburg, K. Anagnostakis, and
H. Bos. Paranoid Android: Zero-day protection for smart-
In Annual Computer Security
phones using the cloud.
Applications Conference (ACSAC ’10), Austin, TX, Dec.
2010.
[47] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Mon-
rose. All your iFRAMEs point to us. In 17th USENIX
Security Symposium, San Jose, CA, July 2008.
[48] C. Reis and S. D. Gribble.
Isolating web programs in
In 4th ACM European
modern browser architectures.
Conference on Computer systems (EuroSys ’09), Nurem-
berg, Germany, Apr. 2009.
[49] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J.
Wang, and C. Cowan. User-Driven Access Control: Re-
thinking permission granting in modern operating sys-
tems. In 2012 IEEE Symposium on Security and Privacy,
Berkeley, CA, May 2012.
[50] G. Rydstedt, E. Bursztein, and D. Boneh. Framing attacks
on smart phones and dumb routers: Tap-jacking and geo-
In USENIX Workshop on Oﬀensive Tech-
localization.
nologies (wOOt ’10), Washington, DC, Aug. 2010.
[51] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson.
Busting frame busting: a study of clickjacking vulnerabil-
ities at popular sites. In IEEE Oakland Web 2.0 Security
and Privacy (W2SP ’10), Oakland, CA, May 2010.
The case for SE Android.
In
Linux Security Summit 2011, Santa Rosa, CA, Sept.
2011.
http://selinuxproject.org/~jmorris/lss2011_slides/
caseforseandroid.pdf.
[52] S. Smalley.
[53] Tapjoy.
Getting Started with Publisher SDK, Nov.
2011. http://knowledge.tapjoy.com/integration-8-x/android/
publisher/getting-started-with-offers-sdk.
[54] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choud-
hury, and H. Venter. The multi-principal OS construction
In 18th USENIX Security
of the Gazelle web browser.
Symposium, Montreal, Canada, Aug. 2009.
[55] World Wide Web Consortium (W3C).
Frames in
http://www.w3.org/TR/
HTML Documents, Nov. 2011.
REC-html40/present/frames.html#h-16.5.
[56] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, you,
get oﬀ of my market: Detecting malicious apps in oﬃcial
In 19th Network and
and alternative Android markets.
Distributed System Security Symposium (NDSS ’12), San
Diego, CA, Feb. 2012.
[33] I. Leontiadis, C. Efstratiou, M. Picone, and C. Mascolo.
Don’t kill my ads! Balancing privacy in an ad-supported
mobile application market. In 12th Workshop on Mobile
Computing Systems & Applications (HotMobile ’12), San
Diego, CA, Feb. 2012.
[34] L. Liu, X. Zhang, G. Yan, and S. Chen. Chrome exten-
sions: Threat analysis and countermeasures. In 19th Net-
work and Distributed System Security Symposium (NDSS
’12), San Diego, CA, Feb. 2012.
[35] L. McGann.
How Ars Technica’s “experiment”
with ad-blocking readers built on its community’s
the site.
aﬀection for
Nieman Journalism Lab,
Mar. 2010.
http://www.niemanlab.org/2010/03/how-ars-
technica-made-the-ask-of-ad-blocking-readers/.
[36] Millenial Media. Millennial Media Android SDK - Ver-
http://wiki.millennialmedia.com/
sion 4.5.0, Nov. 2011.
index.php/Android.
[37] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay.
Caja: Safe active content in sanitized JavaScript. Google,
Dec. 2007.
http://google-caja.googlecode.com/ﬁles/caja-
2007.pdf.
[38] Mobclix. Mobclix SDK Integration Guide Version 3.1.0,
Nov. 2011. https://developer.mobclix.com/help/advertising/
sdk_api/android.
[39] Mozilla Foundation. How Many Firefox Users Have Add-
Ons Installed? 85%!, June 2011. http://blog.mozilla.com/
addons/2011/06/21/ﬁrefox-4-add-on-users/.
[40] MSDN.
About Cross-Frame Scripting and Secu-
rity., Oct. 2011. http://msdn.microsoft.com/en-us/library/
ms533028(v=vs.85).aspx.
[41] M. Nauman, S. Khan, and X. Zhang. Apex: extending
Android permission model and enforcement with user-
In 5th ACM Symposium
deﬁned runtime constraints.
on Information, Computer and Communications Secu-
rity(ASIACCS ’10), pages 328–332, Beijing, China, Apr.
2010.
[42] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel.
Semantically rich application-centric security in Android.
In 25th Annual Computer Security Applications Confer-
ence (ACSAC ’09), Honolulu, HI, Dec. 2009.
[43] M. Panzarino. Google: About 190 Million Android
Devices Activated Worldwide. That’s About 576900
A Day Since May.
The Next Web, Oct. 2011.
http://thenextweb.com/google/2011/10/13/google-190-
million-android-devices-activated-worldwide-thats-about-
576900-a-day-since-may/.
[44] A. Pathak, Y. C. Hu, and M. Zhang. Where is the energy
spent inside my app? Fine grained energy accounting on
smartphones with eprof. In 7th ACM European Confer-
ence on Computer Systems (EuroSys ’12), Bern, Switzer-
land, Apr. 2012.
[45] P. Pearce, A. P. Felt, and D. Wagner. AdDroid: Priv-
ilege separation for applications and advertisers in An-
droid. In 7th ACM Symposium on Information, Computer
and Communications Security (AsiaCCS ’12), Seoul, Ko-
rea, May 2012.