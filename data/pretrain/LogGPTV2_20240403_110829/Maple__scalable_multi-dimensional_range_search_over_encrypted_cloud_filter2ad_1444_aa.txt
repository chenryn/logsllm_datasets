title:Maple: scalable multi-dimensional range search over encrypted cloud
data with tree-based index
author:Boyang Wang and
Yantian Hou and
Ming Li and
Haitao Wang and
Hui Li
2015 IEEE International Conference on Cloud Engineering
Substring Position Search over Encrypted Cloud
Data using Tree-based Index
Mikhail Strizhov
Department of Computer Science
Colorado State University
Fort Collins, Colorado 80523–1873
PI:EMAIL
Indrajit Ray
Department of Computer Science
Colorado State University
Fort Collins, Colorado 80523–1873
PI:EMAIL
Abstract—Existing Searchable Encryption (SE) solutions are
able to handle simple boolean search queries, such as single
or multi-keyword queries, but cannot handle substring search
queries over encrypted data that also involves identifying the
position of the substring within the document. These types
of queries are relevant in areas such as searching DNA data.
In this paper, we propose a tree-based Substring Position
Searchable Symmetric Encryption (SSP-SSE) to overcome the
existing gap. Our solution efﬁciently ﬁnds occurrences of a
substrings over encrypted cloud data. We formally deﬁne
the leakage functions and security properties of SSP-SSE.
Then, we prove that the proposed scheme is secure against
chosen-keyword attacks that involve an adaptive adversary.
Our analysis demonstrates that SSP-SSE introduces very low
overhead on computation and storage.
Keywords—substring position search, searchable symmetric
encryption, cloud computing, position heap tree
I.
INTRODUCTION
Owing to the wide adoption of cloud computing services,
public as well as private organizations now outsource their
data to remote servers. Cloud computing services provide
efﬁcient and cost effective solutions for data storage. Never-
theless, outsourced data may contain sensitive information
that needs to be protected. Traditional encryption techniques
protect the data from unauthorized access; however,
it
introduces new challenges to data utilization. Speciﬁcally,
allowing users to efﬁciently search over encrypted data is
one of the most pressing issues in cloud computing.
In order to enable search over encrypted data, many
Searchable Encryption (SE) schemes have been proposed
in recent years [1]–[11], [11]–[19]. (Note, we use the term
searchable encryption somewhat loosely to include schemes
such as private information retrieval also.) Generally, SE
solutions involve building encrypted searchable indexes that
hide the sensitive information from the remote server, yet
allow search on the encrypted outsourced data. SE solutions
differ in the level of efﬁciency and security guarantees they
offer; however, most of them support only exact keyword
search. As a result, there is no tolerance of format in-
consistencies which are part of typical cloud user behav-
ior; and they happen very frequently. It is quite common
that the search queries do not exactly match the pre-set
keywords due to the lack of exact knowledge about the
data. For example, a ﬁnancial company stores its employees
income tax documents in encrypted form in the cloud. A
978-1-4799-8218-9/15 $31.00 © 2015 IEEE
DOI 10.1109/IC2E.2015.33
165
tax accountant may issue a search query of “form1040”,
which describes multiple keywords such as “form1040”,
“form1040A”, “form1040-ez”, “form1040es”, and she wants
to ﬁnd a position of the ﬁrst occurrence of the query in each
encrypted document that contain the string of characters.
The signiﬁcant drawback of existing schemes underlines
an important need for new techniques that support search
ﬂexibility over encrypted documents. In this work, we con-
sider the problem of efﬁcient substring position search over
encrypted data. The users can query the remote untrusted
server for a set of encrypted documents that contain a
substring of characters. The cloud server retrieves the set
of matching documents together with positions where the
queried string begins.
An important application of this work is in the area
of searching a DNA sequence against a DNA sequence
database. Such searching can be used in the analysis of
genetic diseases, genetic ﬁngerprinting or genetic genealogy,
and requires returning as result not only the matching DNA
but also the position of the DNA sequence within the DNA.
The major contribution of our work is to initiate the study
of a very important problem, namely, substring position
search over encryption data. Our solution should not be
considered as a complete approach of the subject, which has
very strong future directions of research. Nonetheless, our
solution provides the preliminary foundation for the study
of the subject, including formal deﬁnitions, building blocks,
basic construction as well as security proofs. In this work, we
continue exploring the line of recent searchable encryption
solutions, but from the slightly different standpoint.
We now give an overview of our contributions:
1) We present a Substring Position Searchable Symmetric
Encryption (SSP-SSE) scheme that allows a substring
search over encrypted document collection. The scheme
is based on a position heap tree data structure recently
proposed by Ehrenfeucht et al. [20].
2) We formally deﬁne two leakage functions and security
against adaptive chosen-keyword attack of a tree-based
SSP-SSE scheme. Apart from traditional access and
search patterns we include the deﬁnition of path pattern
in the leakage functions of a tree-based searchable
encryption. We show that SSP-SSE enjoys the strong
notion of semantic security [5].
3) We present a construction that is very efﬁcient and
does not require large ciphertext space. Our search
complexity is O(m + k), where m is the length of the
queried substring and k is the number of occurrences
of substring in the document collection.
4) We consider a natural extension of SSP-SSE scheme,
where an arbitrary group of data users can submit
substring queries to search the encrypted collection. We
formally deﬁne a Multi-User Substring Position Search-
able Symmetric Encryption (MSSP-SSE) and present an
efﬁcient construction.
We organize the rest of the paper as follows: Section
II gives an outline of the most recent related work. In
Section III we give an overview of the system and threat
models, notations and preliminaries, and review building
blocks used in our solution. In Section IV we provide the
details of SSP-SSE scheme and deﬁne the security deﬁni-
tions and requirements. Section V is devoted for security
and performance evaluation. The extension of our solution
towards an arbitrary group of users is presented in Section
VI. Lastly, we conclude in Section VII.
II. RELATED WORK
Efﬁcient searchable encryption methods are extensively
studied in the literature. Traditional searchable encryption
schemes focus on the problem of searching for a keyword
in the document collection. In this setting, each document
is assumed to consist of a sequence of keywords. The
cloud server must be able to determine which encrypted
documents contain a particular queried keyword, which is
also encrypted. Song et al. [1] presented the ﬁrst searchable
symmetric encryption scheme. Their scheme has provable
security properties,
linear-time search complexity in the
length of the document collection. Goh et al. [2] intro-
duced formal security deﬁnitions for searchable symmetric
encryption and proposed a scheme that is based on the
Bloom ﬁlters [21]. The scheme requires a linear search
time and provides some false positive results. Many other
schemes have been proposed to improve the efﬁciency of
keyword search by implementing an inverted searchable
index [3], [5], [12], [22]. Chang et al. [12] showed an
index construction that enables keyword search without
false positive results. Curtmola et al. [5] gave the ﬁrst
solution that enables sublinear search time to the entire
document collection. Here, the searchable index consists
of a keyword trapdoor and encrypted document identiﬁers
whose corresponding data ﬁles contain the keyword. Re-
cently, Cao et al. [9] proposed the multi-keyword ranked
search scheme. The solution ranks encrypted documents
based on similarity score. The score is calculated between
the search query (that contains multiple keywords) and the
set of encrypted documents. Moataz et al. [3] developed the
boolean symmetric searchable encryption (BSSE) scheme.
The scheme is based on the orthogonalization of the key-
words according to the Gram-Schmidt process. Later, Moataz
et al. [23] proposed the conjunctive symmetric searchable
encryption (PCSSE) scheme that allows cloud servers to
perform conjunctive keyword search on encrypted docu-
ments with different privacy assurance. Orencik’s solution
[4] proposed the privacy-preserving multi-keyword search
method that utilizes minhash functions.
Fig. 1. Cloud Data Hosting Architecture.
In the public-key setting, Boneh et al. [7] were the
ﬁrst to propose a searchable encryption using asymmetric
cryptography. The authors developed a construction where
anyone with the public key can write to the data stored on
the remote server, but only authorized users with the private
key can search. The other asymmetric solution was provided
by Di Crescenzo et al. in [24], where the authors designed a
public-key encryption scheme with keyword search based on
a variant of the quadratic residuosity problem. To support
more complex queries, conjunctive keyword search, subset
query and range query over encrypted data have also been
proposed in [6], [8], [13], [25], [26].
All of the schemes above support only exact keyword
search, i.e. there is no tolerance of format inconsistencies
in the search. Li et al. [16] were the ﬁrst to propose a
fuzzy keyword search scheme over encrypted data. The
authors developed a solution that constructs fuzzy keyword
sets based on document collection and later uses the edit
distance to measure the similarity between keyword query
and the sets. Wang et al. [17] improved previous work
and proposed a scheme that achieves constant search time
complexity. Later, Boldyreva et al. [18] gave an efﬁcient
fuzzy-searchable encryption (EFSE) scheme to locate the
similar records. The main drawback of fuzzy keyword search
solutions is that they require a large ciphertext and com-
putation overhead, and thus may not be suitable for the
real-world cloud storage systems.
III. BACKGROUND AND BUILDING BLOCKS
A. System & Threat Models
Consider a cloud data hosting service shown in Figure
1 that involves three entities: the cloud provider, the data
owner and the cloud user. The data owner has a collection
of documents D that he wants to outsource to the cloud
provider in a form C, encrypted with a secret key K. To
enable search capability over C, the data owner constructs
a searchable index element Λ from D, and then uploads
both the index Λ and the encrypted document collection C
to the cloud provider. When an authorized cloud user wants
to perform a search on remote data, she ﬁrst connects to
the data owner to acquire the secret key K and the trapdoor
information. The trapdoor serves to output secure search
query Q without revealing its original input. Moreover, the
trapdoor learning process is a one-time operation and thus
the cloud user does not need to contact the data owner
anymore. Finally, the cloud user submits the search query Q
166
to the cloud provider. Upon receiving Q, the cloud provider
is responsible to search the index element Λ and to return
the matching set of encrypted documents L ⊆ C. Later, the
cloud user uses the secret key K to decrypt L to its original
view.
As in previous works [5], [10], [11], the cloud provider
is assumed to be an honest-but-curious entity. The “honest”
means that the cloud provider can provide reliable data
storage: it is always available to the users,
it correctly
follows the designated protocol speciﬁcation and it provides
all services as expected. The “curious” means that the cloud
provider may execute some background analysis to breach
the conﬁdentiality of the stored data. In the rest of the paper
we assume that the cloud provider and the adversary are the
same entity. We do not consider the cloud provider being
able to link search query to a speciﬁc user.
B. Preliminaries and Notations
(cid:2)
Let D = {D1, D2, . . . , Dl} be an original set of documents
and let C = {C1, C2, . . . , Cl} be an encrypted collection
of documents from D. If Di and Dj are two documents,
we denote text t as their concatenation by Di||Dj. If A
is an algorithm, then a ← A(. . .) represents the result of
applying the algorithm A. Let
be an alphabet. We use
the convention of numbering the positions of the text t
from right to left, i.e. t = tntn−1 . . . t1. Let ti denote the
sufﬁx titi−1 . . . t1 of text t beginning at position i. Also, let
us deﬁne a substring χ = χ1χ2 . . . χm of a text t from an
instance i of χ in t, where χ = titi−1 . . . tt−m+1. Let |χ|
denote the length m of the substring χ. We say p is a preﬁx
of χ, χ−p denote the sufﬁx of χ consisting of the last |χ|−|p|
letters of χ.
In addition to notations above, we also make use of
cryptographic notations. A symmetric encryption scheme is a
set of three polynomial-time computable algorithms SKE =
(Gen, Enc, Dec), where Gen takes a security parameter k
and returns a secret key K; Enc algorithm inputs the secret
key K and a message m, and returns a ciphertext c; Dec
takes a key K and ciphertext c, and outputs m if secret key K
is the key used to output c. In our work SKE is secure against
pseudorandom chosen-plaintext attacks (PCPA) according to
following deﬁnition.
Deﬁnition 1: (PCPA-security). Let SKE = (Gen, Enc,
Dec) be a symmetric encryption scheme, A be an adversary
and there is a probabilistic experiment PCPASKE,A(k) that
is run as follows:
• Use secret parameter k to output the secret key K →
Gen(1k).
• The adversary A is given oracle access to EncK().
• The adversary A outputs a message m.
R←− C. C denotes the set
• Let c0 ← EncK(m) and c1
of all possible ciphertexts. A bit b is chosen at random
and cb is given to the adversary A.
• The adversary A is again given to the oracle access to
EncK(), and A runs number of polynomial queries to
output a bit b
.
(cid:2)
• The experiment outputs 1 if b = b
(cid:2)
, otherwise 0.
Symmetric encryption scheme SKE is PCPA-secure if for
all polynomial-size adversaries A,
Pr[PCPASKE,A(k) = 1] (cid:2) 1
2
+ negl(k),
(1)
where the probability is over the choice of bit b and the
coins of Gen and Enc.
Moreover, we also make use of pseudorandom func-
tions (PRF) and pseudorandom permutations (PRP), which
are polynomial-time computable functions that cannot be
distinguished from random functions by any probabilistic
polynomial-time (PPT) adversary, and random oracles to
which all parties have blackbox access.
:
{0, 1}k × {0, 1}n → {0, 1}l
Deﬁnition 2: (Pseudorandom function (PRF)). A func-
is a (t, , q)-
tion f
pseudorandom function if
• Given a key K ∈ {0, 1}k and an input X ∈ {0, 1}n there
is an algorithm to compute FK(X) = F(X, K).
• For any t-time oracle algorithm A, we have: