Figure 1: The disharmony between UIPI and AV software’s
protected folders mechanism, as described in (a) and (b), is
the root cause of the vulnerability which leads to the attack
depicted in (c).
4.2 Attack Overview
Using the vulnerability described in the previous section, ran-
somware can bypass anti-ransomware protection via controlling
a trusted application and encrypt the files of the victim, including
those stored in protected folders. To this end, for each file Ftarget,
the ransomware performs the following tasks as depicted in Fig. 2.
Firstly, ransomware reads the contents of Ftarget, which is in a pro-
tected folder (1). This is perfectly legal: in fact, reading a protected
file is permitted by default2. The plaintext retrieved from Ftarget is
encrypted in ransomware’s own memory. The resulting ciphertext
is then encoded in a suitable encoding format, e.g., Base64 [13], and
copied into the system clipboard (2). Next, the ransomware launches
the Run window (3) to start a trusted application Apptrusted, with
the goal of controlling it. In this example, Apptrusted is Notepad as it
is typically trusted in Windows environments. In addition, Notepad
understands shortcuts for file and edit commands that ransomware
will send. Using the Run window, ransomware executes Apptrusted
with the argument Ftarget, so that the contents of Ftarget is loaded
into Apptrusted’s window (4). Next, the data in Apptrusted’s window
are selected, and overwritten with the clipboard data (the encrypted
data) with a paste command (5). Finally, Apptrusted is instructed by
the ransomware to save the modifications, and close the handle to
Ftarget (6). All interactions in Steps 3-6 are carried out by sending
keyboard inputs which are synthesized programmatically by the
ransomware to control Apptrusted.
The combination of these actions effectively allows ransomware
to bypass the current protection methods of AVs that are aimed
explicitly at blocking ransomware. Therefore, by referring to the
2Some AVs also provide an optional, more strict access setting that, if activated, makes
AVs block the read requests from non-trusted applications.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Ziya Alper Genç, Gabriele Lenzini, and Daniele Sgandurra
0 For Each File
3 Open Run Window
Ransomware
1 Read File
Contents
Run Window
2 Copy to
Clipboard
4 Launch
Notepad
Protected Files
6 Save &
Close File
5 Paste to Notepad
Windows Clipboard
Trusted Application
e.g., Notepad
Figure 2: Bypassing anti-ransomware protection of AVs by
using inputs programmatically synthesized by ransomware
to control a trusted application.
never-ending ‘cat-and-mouse’ game of detection/anti-detection and
anti-evasion/evasion among AVs and malware, and the usage of
simulated keyboard and mouse inputs, we have named this attack
Cut-and-Mouse. Algorithm 1 details the main steps of the Cut-and-
Mouse attack.
▷ Application to Control.
Algorithm 1 Cut-and-Mouse Attack: Exploit Trusted Apps with
Simulated Keyboard and Mouse Inputs to Write to Protected Fold-
ers.
1: function Control(Apptrusted)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
FileList ← EnumerateTargetFiles()
for all f ∈ FileList do
plainBytes ← f .ReadAllBytes()
encBytes ← Encrypt(plainBytes)
encodedT ext ← Base64(encBytes)
CopyToClipboard(encodedT ext)
Simulate(Run, Apptrusted )
Simulate(SelectAll)
Simulate(Paste)
Simulate(Save)
Simulate(Close)
▷ Win+R
▷ Ctrl+A
▷ Ctrl+V
▷ Ctrl+S
▷ Alt+F4
return Success
In more detail, there are two steps that are required for the Cut-
and-Mouse attack to be successful. First, the step Open Run Window
(3) in Fig. 2 is needed to disguise the operation of starting a trusted
application as if it was executed on behalf of the user. If, instead,
Notepad is directly executed by the ransomware, AVs would block
write requests even if the rest of the attack is performed as described
previously. In fact, in this example, even if Notepad is a trusted
application (therefore allowed to write on protected folders), its
parent process would be the ransomware, which is not trusted
by the AVs, hence, write operations would be blocked. Secondly,
as noted in Footnote 2, the step Read File Contents depicted in (1)
in Fig. 2 can be blocked by AVs in some circumstances. For this
reason, this limitation (that of not being able to read file contents)
can be circumvented if ransomware exploits a trusted application
to access the content on behalf of the ransomware. For example,
ransomware could instruct Notepad to open the target file, and
then synthesize two keyboard press events for Ctrl+A (Select All)
and Ctrl+C (Copy), which would allow the ransomware to select all
the content of the file and copy it to the system clipboard. Since the
clipboard is shared between all running processes, ransomware can
easily obtain the clipboard contents. It should be noted that, though,
this technique might result in unrecoverable data loss with binary
encoded files, due to the the presence of non-printable characters
displayed by Notepad. However, ransomware can detect the content
of the file before deciding which file to encrypt.
4.3 Mitigation Strategy
As a simple yet effective countermeasure to protect AVs modules
against our Cut-and-Mouse attack, we suggest that trusted applica-
tions should not receive messages from non-trusted applications.
That is, AVs must intercept all the messages flowing to a trusted
process and block or discard the messages sent by non-trusted pro-
cesses. This countermeasure is analogous to what UIPI implements
to guarantee process privileges. It should be noted that, however,
UIPI is not provided with a whitelist of AVs: therefore, it cannot
enforce such a filtering in practice and this defense task should be
fulfilled by the AV programs.
We elaborate more on this strategy in §7, where we define a
requirement that a secure message filtering system should at least
have.
5 DISABLING ANTIVIRUS SOFTWARE
In this section, we describe how the simulation attack Cut-and-
Mouse described in §4 can also be effectively applied in other sce-
narios, and we also attempt to hypothesize how it can be used in
future attacks.
In the course of our analysis, we have found a surprisingly simple
utilization of synthesized mouse events technique, which would al-
low an attacker to deactivate some of the most popular AV programs.
We start by explaining the reasons for the presence of deactivation
functionalities in AVs. Next, we describe the steps to perform the
attack, investigate the weakness in detail, and propose a practical
solution to fix it.
5.1 Necessity of the AV Deactivation Function
Signature-based detection has been the primary defense method of
AVs, and naturally, this technique is efficient only against known
malware as it can be bypassed easily, e.g. by obfuscation/packing
and polymorphic malware. To minimize this limitation, nearly all
current AVs employ some heuristics to detect malware by monitor-
ing behaviors of processes and looking for anomalies. However, this
A Game of “Cut and Mouse”: Bypassing Antivirus by Simulating User Inputs
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
functionality comes with a price: occurrences of false positives. In
the context of malware defense, false positive is the situation where
an AV software flags a benign executable as malware, and it usually
proceeds with termination of the associated process, hence inter-
rupting the user. For example, when a user installs a new software
package, the installer may write to system directories, modify the
Windows Registry and configure itself to run when the user logs in.
The behavioral decision engine of an AV may be confused by these
activities, which indeed might look suspicious as they are largely
used by malware. Therefore, an AV may prevent the software from
being installed correctly. Consequently, some vendors recommend
the users to turn off their AV temporarily for a successful installa-
tion of their benign application, for instance [27]. Moreover, some
special software may require AV to be disabled while running, for
instance [12]. As a result, AV companies provide users with a switch
that can be used to deactivate the real-time protection for different
periods of time, ranging from a short period, such as 2 minutes, to
longer periods, such as 2 hours, or until the computer reboots. Of
course, the ability to "freeze" an AV might lure attackers to abuse
this functionality to bypass malware detection, hence, AVs should
offer ways to ensure that this functionality can be disabled only by
authorized users.
5.2 Stopping Real-time Protection
In our second attack, Ghost Control, we show how an attacker can
disable the AV protection by simulating legitimate user actions
to activate the Graphical User Interface (GUI) of the AV program,
and then to "click" the turn-off button. The proposed attack com-
prises two phases. The first phase, Collect, is performed off-line
by the malware author. In this phase, the developer collects the
required pieces of information about the user events to be simulated
to successfully disable the AV. This set of information consists of
(i) x and y coordinates on the screen; (ii) which mouse button to
be simulated; and (iii) length of time to wait until the next menu
is available. Please note that the mouse coordinates should lie in
the correct area on the screen for this attack to work. In addition,
these values would change from victim to victim, or even in the
same host, as the screen dimensions vary or would differ under
various resolutions. Therefore, the malware author needs to collect
the correct locations of the menus of all the major AVs under dif-
ferent display settings to increase the effectiveness. For example,
this would require the attacker to install the target AVs in virtual
environments with different screen dimensions to collect the neces-
sary data. Once Collect phase is completed, malware authors embed
the information into the sample to be used during the attack (or,
alternatively, they store these pieces of information on a server and
deliver them on a request made by the malware).
The second phase of the attack, Control, is the actual malicious
step which starts immediately after the infection. On the victim
machine, Control begins the reconnaissance phase to determine the
installed AV product(s) and obtain the screen dimensions. Using
this information, Control prepares the event sequence to be simu-
lated to turn off the AVs, by using the information stored during
Collect phase, and synthesizes the required user inputs accordingly.
Alg. 2 illustrates the part of Ghost Control that is responsible for
the turning off of the installed AV program.
Algorithm 2 Ghost Control Attack: Disable Real-Time Protection
of AV with Simulated Events.
1: global EventSequenceDatabase
2: function TurnOffProtection
3:
4:
5:
6:
7:
antivirus ← GetInstalledAV()
events ← GetEventSequenceFor(antivirus)
for all e ∈ events do
▷ AV to deactivate.
Simulate(e)
return Success
As a consequence, the range of functionalities that Ghost Control
enables to malware authors is very large, some having a high impact:
for instance, once the real-time scanning is stopped, malware can be
instructed to use Ghost Control to drop and execute any malicious
program from its Command and Control (C&C) server.
5.3 Mitigation
In order to develop a robust defense against this vulnerability, we
need to understand the root causes behind this vulnerability. Our
analysis shows that there are two reasons why Ghost Control is able
to deactivate the shields of several AV programs:
(W-i) AV Interface with Medium IL. Processes related to the AV
main interfaces that manage these defense systems run in
such a way that they are accessible from processes that run
without administrative privileges. It is therefore possible
to send “messages” from any process to these process, e.g.,
mouse click events, without any restriction.
(W-ii) Unrestricted Access to Scan Component. The scanning com-
ponents of vulnerable AVs do not require the user to have
administrative rights to communicate to them, e.g., they can
receive a TURN_OFF message from any process. Consequently,
Control can initiate and control the reaction which involves
accessing this critical component of AVs.
(W-ii) is actually a more critical vulnerability than (W-i). In fact,
if an AV software has (W-ii), then malware can skip interacting
with the GUI of AVs through (W-i) to directly communicate with
the AV’s scanner component and send a TURN_OFF message. This is
in fact only a practical limitation: for instance, in our experiments
(see §6), we have noticed that AV12 employs CAPTCHA mecha-
nisms to verify that the user really wants to turn-off the protection.
Even if we assume the CAPTCHA is a solid measure against auto-
mated attacks3, however, malware can still bypass the CAPTCHA
verification by directly accessing the scanner component due to
(W-ii).
To mitigate the root causes of the failure of the affected AVs, we
propose the following solution:
(F-i) AV Interface with High IL. AVs should run the main GUI
interface with administrative privileges. By doing so, AVs
would not receive the the messages of Control or any other
malware since UIPI would drop the unauthorized messages.
(F-ii) Restricted Access to Scan Component. AVs should design and
develop their scan components in such a way that accessing
it would require the user to have administrative rights.
3We note that CAPTCHA can actually be bypassed using other means, e.g. with
CAPTCHA solving services, but they might not always be applicable.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Ziya Alper Genç, Gabriele Lenzini, and Daniele Sgandurra
In the next section, we discuss and share the results of our ex-
periments, which show that (i) some AVs are vulnerable to Ghost
Control (ii) the proposed measures are actually employed by some
AVs that, therefore, are not vulnerable to the Ghost Control attack.
From that evidence, we conclude that (i) these attacks are able to
circumvent several off-the-shelf AVs (ii) the proposed mitigation is
both effective and practical to use in real-world systems.
6 EXPERIMENTAL RESULTS
To demonstrate the impact of the exploitation of the vulnerabilities
described in §4 and §5, we developed proof-of-concept prototype
of the attacks, and tested them against some commercial AVs. To
report our findings, we first describe the test environment.
6.1 Test Environment
We conducted all experiments on a Virtual Machine (VM) running
Windows 10 Pro x64 Version 1809 (OS Build 17763.437). After a
fresh installation of Windows 10 OS, we updated the system and
created a snapshot of a template VM. Next, in each run of the