aware of what LSPs are originally passing through the failed
link or node. However, for global recovery, the ingress node
is moving trafﬁc to backup LSPs. The ingress node can
be informed about all nodes of an LSP using, e.g., Record
Route Object in RSVP ( [2]).
5.1 MPLS Algorithms
LSPs for the layers can be created in several ways. A
simple approach is, for each layer, to set up an LSP from
each node to each candidate egress node, i.e., to each node
that could possibly be used as egress for a network path.
This approach is simple and provides protection also for
later dynamically created LSPs. In addition, it allows any
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:11 UTC from IEEE Xplore.  Restrictions apply. 
node in the network to switch layer. However, it would
likely produce unnecessarily many protection LSPs.
The second alternative is to operate similarly to the
standard MPLS operation mode, and provide protection
for the existing MPLS paths. In the following we present
an algorithm for calculating both global and local protec-
In a network topology G = (V, E), a set of
tion LSPs.
primary LSPs P = {p1, p2, . . . , pn}, and a set of safe lay-
ers L are given. Let each pi be represented by the ordered
i }, where mi is the length of LSP pi.
set {n1
The algorithm below creates global backup LSPs g l
i in each
layer l ∈ L to backup a particular primary LSP p i. In addi-
j
tion, it creates local backup LSPs q
i from a particular point
j
of repair n
i in the primary LSP pi.
foreach pi ∈ P
i , . . . , nmi
i , n2
i = sp(n1
i , nmi
i
, L)
(1)
foreach L ∈ L
create LSP gl
endfor
for j = 2 to mi − 2
create LSP qj
(2)
(3) if (link(nmi−1
(4)
, nmi
if (link(nmi−1
endfor
(5)
(6)
else
endif
create LSP qmi−1
i
endif
endfor
, L(nj+1
i
))
i = sp(nj
i
i , nmi
) ∈ L(nmi
i
, nmi
i
))
i
i
) ∈ L(nmi−1
i
i
of nmi−1
(cid:1)
choose neighbor n
i
mi−1
mi−1
= n
create LSP q
i
i
mi−1
create LSP q
i
mi−1
= sp(n
i
else
))
so that n
(cid:5) sp(n
(cid:1)
mi
, n
i
(cid:1) (cid:1)= nmi
mi−1
, L(n
i
i
mi
, n
i
mi−1
, L(n
i
))
Either the node detecting the failure or the ingress node
of the primary LSP has to move trafﬁc from original LSPs
to backup LSPs in the case of a failure.
If two node and link disjoint paths exist, MPLS global
recovery, as speciﬁed in [19], requires one backup LSP per
primary LSP. For local MPLS recovery, each primary LSP
requires n-1 backup LSPs where n is the number of nodes
in the LSP [19].
When comparing this with the RRL MPLS speciﬁcation,
i=1(mi − 2) backup
we get that both methods require
LSPs for local recovery. For global recovery, standard
MPLS requires |P|, while RRL MPLS requires |P| · |L|
backup LSPs.
(cid:1)|P|
Some MPLS applications advise the local backup path
to merge with the primary path as soon as possible after by-
passing the failure, even if its not the shortest path. That
is because the primary path is conﬁgured to fulﬁll all the
service requirements of the trafﬁc, which need not be the
case for the backup path. RRL can also support such an ap-
proach. The local node detecting the failure establishes a
backup LSP according to the safe layer of the failed node or
link. This backup LSP will end in the ﬁrst point in which
it merges with the primary LSP. In case of failure, the de-
tecting node then moves the trafﬁc to the correct layer and
stacks the corresponding header to the packets. This header
will be popped at the merge point and the packet routed ac-
cording to the full topology from there.
))
= sp(nmi−1
i
, nmi
i
, L(nmi
i
)
6 Conclusion and future work
j+1
i
j+1
i
j
i , n
in path pi.
) is the link connecting nodes n
Here, L(n) is the safe layer of node n in the topology
G, and link(n
j
i and
sp(a, b, G) calculates the shortest path
n
from from a to b in the topology G. Line (1) creates an
end-to-end (global) backup LSP for g i in each layer l by
ﬁnding the shortest path between the end points. Line (2)
creates backup LSPs for local recovery. We create a backup
LSP from the detecting node (n j) in the safe layer of the
upstream node (nj+1). The ingress node has been handled
in line (2), and the special case with link failure for a link
connected to an egress node is handled in lines (3) to (6).
Line (3) tests whether there exist a link to the egress node
that is included in the safe layer of the egress node. If so,
we have the two alternatives from Sec. 3. Line (4) covers
the case where the link is also included in the safe layer of
the detecting node (the upstream node). In that case we cre-
ate an LSP from the detecting node n mi−1
, but make sure
as forced next hop. Line (5)
that we use a deﬂection node n
covers the case where we are allowed to use the safe layer of
the detecting node without deﬂection. In line (6) we cover
the case where the link is not in the safe layer of node n mi
.
(cid:1)
i
i
In this paper we have presented a novel method for hand-
ling recovery in packet networks that we call Resilient Rout-
ing Layers (RRL). RRL is based on building simple and in-
tuitive recovery abstractions of the network that offer many
choices of different optimization criteria.
Even though RRL is supported by algorithms, we have
demonstrated that it is sufﬁciently simple even for a network
engineer to implement it by hand in relatively short time for
reasonably sized networks.
Compared to other recovery schemes, RRL seems to
be a good candidate for handling recovery in packet net-
works. Even for the two parameters for which RRL argu-
ably should have the most problems in competing, namely
path lengths and additional state information, we have
shown that it performs comparably to other methods. We
have also demonstrated that RRL is scalable, even very
large networks can be covered by 5 layers. In addition, it
has been shown how RRL is a good foundation for easy
creation of MPLS backup LSPs.
Future work regarding RRL will cover optimizations for
handling link failures and optimizations for fast local pro-
tection in connectionless networks like IP and Ethernet. As
part of our future work, we will also explore network trafﬁc
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:11 UTC from IEEE Xplore.  Restrictions apply. 
[18] F. Otel. On fast computing bypass tunnel routes in MPLS-
based local restoration. In Proceedings of 5th IEEE Interna-
tional Conference on High Speed Networks and Multimedia
Communications, pages 234–238, Jeju, Korea, 2002.
[19] P. Pan et al. Fast reroute extensions to RSVP-TE for LSP
tunnels. In IETF, Internet Draft, Aug. 2004.
[20] E. Rosen et al. Multiprotocol label switching architecture.
In IETF, RFC 3031, Jan. 2001.
[21] A. Sack and W. D. Grover. Hamiltonian p-cycles for ﬁber-
level protection in homogeneous and semi-homogeneous
optical networks. IEEE Network, 18:49–56, Mar. 2004.
[22] V. Sharma and F. Hellstrand. Framework for multi-protocol
In IETF, RFC
label switching (MPLS)-based recovery.
3469, Feb. 2003.
[23] D. Stamatelakis and W. D. Grover. Rapid span or node res-
In
toration in IP networks using virtual protection cycles.
Proc. CCBR’99, Ottawa, Nov. 1999.
[24] D. Stamatelakis and W. D. Grover. IP layer restoration and
network planning based on virtual protection cycles. IEEE
Journal on selected areas in communications, 18(10), Oct.
2000.
[25] J. W. Suurballe. Disjoint paths in a network. Networks,
pages 125–145, 1974.
[26] J. W. Suurballe and R. E. Tarjan. A quick method for ﬁnd-
ing shortest pairs of disjoint paths. Networks, 14:325–336,
1984.
[27] I. Theiss and O. Lysne.
FROOTS - fault handling in
up*/down* routed networks with multiple roots. In Proceed-
ings of the International Conference on High Performance
Computing (HiPC 2003), 2003.
[28] B. M. Waxman. Routing of multipoint connections. IEEE
Journal on Selected Areas in Communications, 6(9):1617–
1622, Dec. 1988.
[29] M. A. Weiss. Data Structures and Algorithm Analysis. Ben-
jamin/Cummings, 1992.
[30] J. S. Whalen and J. Kenney. Finding maximal link disjoint
In Proc. IEEE GLOBECOM ’90,
paths in a multigraph.
1990.
[31] G. Xue et al. Delay reduction in redundant trees for pre-
planned protection against single link/node failure in 2-
In IEEE GLOBECOM2002:
connected graphs.
(Optical
Networking Symposium), pages 2691–2695, 2002.
after failures, packet reordering, packet loss, load balan-
cing, and recovery differentiation.
References
[1] http://www.cs.washington.edu/research/networking/rocketfuel/.
[2] D. Awduche et al. RSVP-TE: Extensions to RSVP for LSP
tunnels. In IETF, RFC 3209, Dec. 2001.
[3] R. Bartos and M. Raman. A scheme for fast restoration in
MPLS networks. In Proc. of the Twelfth IASTED Interna-
tional Conference on Parallel and Distributed Computing
and Systems (PDCS), pages 488–493, 2000.
[4] R. Bartos and M. Raman. A heuristic approach to service
In Proc. ICC, pages 117–
restoration in MPLS networks.
121, June 2001.
[5] A. Bremler-Barr, Y. Afek, H. Kaplan, E. Cohen, and
M. Merritt. Restoration by path concatenation: Fast recov-
ery of MPLS paths. In Proc. ACM Symposium on Principles
of Distributed Computing, pages 43–52, 2001.
[6] T. Bu and D. Towsley. On distinguishing between internet
power law topology generators. In IEEE INFOCOM, pages
638–647, New York, June 2002.
[7] T. Cicic, A. Kvalbein, A. F. Hansen, and S. Gjessing. Re-
silient Routing Layers and p-Cycles: Tradeoffs in Network
Fault Tolerance. In to appear at High Performance Switch-
ing and Routing (HPSR2005), Hong Kong, May 2005.
[8] W. D. Grover and D. Stamatelakis. Cycle-oriented distrib-
uted preconﬁguration: Ring-like speed with mesh-like ca-
pacity for self-planning network restoration. In Proc. ICC,
volume 1, pages 537–543, June 1998.
[9] W. D. Grover and D. Stamatelakis. Self-organizing closed
path conﬁguration of restoration capacity in broadband mesh
transport networks. In Proc. CCBR’98, 1998.
[10] H. Huang and J. Copeland. A series of Hamiltonian cycle-
based solutions to provide simple and scalable mesh optical
network resilience. IEEE Communications Magazine, 40:46
–51, Nov. 2002.
[11] A. Itai and M. Rodeh. The multi-tree approach to reliabil-
ity in distributed networks. Inform. Computation, 79:43–59,
1988.
[12] C. Labovitz, A. Ahuja, A. Bose, and F. Jahanian. Delayed
IEEE/ACM Transactions on
Internet routing convergence.
Networking, 9(3):293–306, June 2001.
[13] C. Labovitz et al. Origins of Internet routing instability. In
Proceedings of IEEE/INFOCOM, Mar. 1999.
[14] M. H. Macgregor and W. Groover. Optimized k-shortest-
paths algorithm for facility restoration. Software-practice
and experience, 24(9):823–834, 1994.
[15] M. Medard, S. G. Finn, and R. A. Barry. Redundant trees for
preplanned recovery in arbitrary vertex-redundant or edge-
redundant graphs. IEEE/ACM Transactions on Networking,
7(5):641–652, Oct. 1999.
[16] A. Medina, A. Lakhina, I. Matta, and J. Byers. BRITE: An
approach to universal topology generation. In IEEE MAS-
COTS, pages 346–353, Aug. 2001.
[17] K. Menger. Zur allgemeinen kurventheorie. Fund. Math.,
10:95–115, 1927.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:11 UTC from IEEE Xplore.  Restrictions apply.