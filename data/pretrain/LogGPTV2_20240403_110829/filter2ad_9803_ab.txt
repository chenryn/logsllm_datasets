`serialFilter` 属性来配置的局部过滤器。
## 全局过滤器
设置全局过滤器，其实就是设置`Config`静态类的 `serialFilter` 静态字段值。
具体原因是因为在 `ObjectInputStream` 的两个构造函数中，都会为 `serialFilter` 属性赋值为
`ObjectInputFilter.Config.getSerialFilter()`。
而 `ObjectInputFilter.Config.getSerialFilter` 就是直接返回 `Config#serialFilter`：
### jdk.serailFilter
在介绍 `Config` 静态类的时候说到，`Config` 静态类初始化的时候，会解析 `jdk.serailFilter` 属性设置的 JEP 290
规则到一个 `Global` 对象的 `filters` 属性，并且会将这个 `Global` 对象赋值到 `Config` 静态类的
`serialFilter` 属性上。
所以，这里 `Config.serialFilter` 值默认是解析 `jdk.serailFilter` 属性得到得到的 `Global` 对象。
### weblogic 全局过滤器
在 weblogic 启动的时候，会赋值 `Config.serialFilter` 为
`WebLogicObjectInputFilterWrapper` 。
具体流程如下：
首先在 weblogic 启动的时候，先调用`WeblogicObjectInputFilter.initializeInternal` 方法，在
`initializeInternal` 方法中会先 `new`一个 `JreFilterApiProxy` 对象，这个对象是一个进行有关 JEP 290
操作的代理对象（具体原理是通过反射来调用的）。
随后 `new` 一个 `WeblogicFilterConfig` 对象。
在创建 `WeblogicFilterConfig` 对象的时候中会对 weblogic 黑名单进行整合，最后得到
`WeblogicFilterConfig`中 `serailFilter`，`golbalSerailFilter`，以及
`unauthenticatedSerialFilter`属性如下：
接着调用
`filterConfig.getWebLogicSerialFilter`取出上面赋值的`WeblogicFilterConfig#serailFilter`,并调用
`filterApliProxy.createFilterForString` 方法把`filter` 字符串转化为 `Object` 类型，并且封装到
`WebLogicObjectInputFilterWrapper` 对象中。
最后会取出刚刚设置的 `filter`，传入 `filterApiProxy.setGlobalFilter`方法中对 `Config` 的
`serialFilter` 属性赋值：
调用完之后我们利用 `filterApiProxy.methodConfigGetSerialFilter.invoke(null)` 来查看
`Config` 的 `serailFilter` 字段值， 可以看到 Config.serialFilter 成功被设置为一个
`WeblogicObjectInputFilterWrapper` 对象。
查看 `pattern` 正是打了 7 月份补丁的全局反序列化黑名单：
用一段话来阐述 weblogic 中 全局过滤器赋值的流程就是：
weblogic 启动的时候，会调用 `WeblogicObjectInputFilter` 的 `initializeInternal`
方法进行初始化，首先会`new` `JreFilterApiProxy` 对象，这个对象相当于JEP 290 有关操作的代理对象，里面封装了操作
`Config` 静态类的方法。然后会 `new` 一个 `WeblogicFilterConfig` 对象，这个对象在 `new` 的时候会把
weblogic 的黑名单赋值到 `WeblogicFilterConfig` 对象的属性中。之后，会从`WeblogicFilterConfig`
对象属性中取 `serialFilter` ，调用 `JreFilterApiProxy` 对象的 `setGlobalFilter` 来赋值
`Config.serailFilter` 。
## 局部过滤器
设置局部过滤器的意思是在 `new` `objectInputStream` 对象之后，再通过改变单个 `ObjectInputStream` 对象的
`serialFilter`字段值来实现局部过滤。
改变单个 `ObjectInputStream` 对象的 `serialFilter` 字段是有两种方法：
1.通过调用 `ObjectInputStream` 对象的 `setInternalObjectInputFilter` 方法：
注：低于 `JDK 9` 的时候，是 `getInternalObjectInputFilter` 和
`setInternalObjectInputFilter`，`JDK 9` 以及以上是 `getObjectInputFilter` 和
`setObjectInputFIlter` 。
2.通过调用 `Config.setObjectInputFilter` ：
局部过滤器典型的例子是 RMI 中针对 `RegsitryImpl` 和 `DGCImpl`有关的过滤。
### RMI 中采用了局部过滤
#### RMI 简单介绍
RMI 分为客户端和服务端，官方文档：
下面是对 RMI 官方文档介绍的理解：
另外 RMI 中其实并不一定要 `RegistryImpl` ,也就是我们熟称的注册中心，RMI
完全可以脱离注册中心来运行。可以参考：
。个人觉得之所以使用注册中心是因为注册中心的 `Registry_Stub` 以及 `Registry_Skel`
会为我们自动进行底层的协议数据通信（JRMP 协议），能让使用者可以不关心底层的协议数据交流，而专注在远程对象的调用上。
RMI 服务端远程对象导出实际上是将这个对象分装成一个 `Target` 对象，然后存放在 `ObjectTable#objTable` 这个静态的
HashMap 中：
每个`Target`对象都包含一个唯一的 `id` 用来表示一个对象，像 `RegistryImpl` 的 `id`就比较特殊是 0 ，其他普通对象的 id
都是随机的：
客户端要对服务端对象进行远程调用的时候，是通过这个 id 来定位的。
`ObjectTable#putTarget` 方法：
`ObjectTable#getTarget` 方法：
`ObjectEndpoint` 中的 `equals` 方法，可以看到是判断 `id` 和 `transport` ， `transport`
一般情况是相等的，所以一般都是通过 `id` 来判断：
#### RegistryImpl 对象与 JEP 290
`RegistryImpl` 作为一个特殊的对象，导出在 RMI 服务端，客户端调用的 `bind` , `lookup`，`list`
等操作，实际上是操作 `RegistryImpl` 的 `bindings` 这个 `Hashtable`。
`bind`：
`lookup`：
`list`：
这里我们之所以称`RegistryImpl` 是一个特殊的对象，是因为 ``RegistryImpl` 导出过程中生成 `Target`
对象是一个“定制”的 `Target` 对象，具体体现在:
    1.这个Target 中 id 的 objNum 是固定的，为 ObjID.REGISTRY_ID ，也就是 0 。
    2.这个Target 中 disp 是 filter 为 RegisryImpl::RegistryFilter ,skel 为 RegsitryImpl_skel 的 UnicastServerRef 对象。
    3.这个Target 中 stub 为 RegistryImpl_stub。
对比普通对象导出过程中生成的 `Target` ：
##### 导出过程
首先 `LocateRegistry.createRegsitry`：
`new RegistryImpl(port)`中会 `new` 一个`UnicastServerRef`对象，将 `RegistryImpl` 的
`id`（`OBJID.REGISTRY_ID`，也就是 0 ） 存入到 `LiveRef` 对象，随后 `LiveRef`对象赋值到
`UnicastServerRef` 对象中的 `ref` 字段，并且将 `RegsitryImpl::registryFilter` 赋值给这个
`UnicastServerRef` 对象的 `filter` 字段：
`RegistryImpl` 的 `id` 是 0 ：
随后在 `RegistryImpl#setup` 中调用 `UnicastServerRef.exportObject` 进行对象导出：
`UnicastServerRef.exportObject` 中会将远程对象分装成一个 `Target` 对象,并且在创建这个 `Target`
对象的时候，将上面的 `UnicastServerRef` 对象赋值为 `Target`中的 `disp`。于是这个 `Target` 对象的 `disp`
就设置为了有 `filter` 的 `UnicastserverRef`。
随后调用 `LiveRef.exportObject` ：
会调用 `TCPEndpoint.export`:
调用 `TCPTransport.exportObject`，在这一步会开启端口进行监听：
随后后调用到 `Transport.export`，可以看到就是将这个 `Target` 放到 `ObjectTable#objTable` 中：
##### 服务端处理请求过程
处理请求是在 `Transport#serviceCall`，首先从输入流中读取 `id` , 匹配到 `RegistryImpl` 对象对应的
`Target` 。
随后调用 `UnicastServerRef.dispatch`：
在 `UnicastServerRef#dispatch` 中，由于 `UnicastServerRef.skel` 不为 `null` ，所以会调用
`UnicastServerRef#oldDispatch` 方法：
`oldDispatch` 中会先调用 `unmarshalCustomCallData(in)` 方法，再调用
`RegistryImpl_skel.dispatch` 方法。
`unmarshalCustomCallData` 方法中会进行判断，如果 `UnicastServerRef.filter` 不为 `null`
,就会设置 `ConnectionInputStream`的 `serialFilter` 字段值为 `UnicastServerRef.filter`
（设置单个 `ObjectInputStream` 的 `serialFilter` 属性，局部过滤的体现）：
再看 `RegistryImpl_skel.dispatch` ：
我们以 `bind` 为例来讲解：
#### DGCImpl 对象与 JEP 290
`DGCImpl` 对象和 `RegistryImpl` 对象类似都是一个特殊的对象，他的”定制“ `Target` 对象的特殊体现在：
    1.这个Target 中 id 的 objNum 是固定的，为 ObjID.DGC_ID ，也就是 2 。
    2.这个Target 中 disp 是 filter 为 DGCImpl::DGCFilter ,skel 为 DGCImpl_skel 的 UnicastServerRef 对象。
    3.这个Target 中 stub 为 DGC_stub。
##### 导出过程
`DGCImpl` 会在导出 `RegsitryImpl` 的时候导出，具体分析如下：
`DGCImpl`静态代码块中会将一个 `DGCImpl` 封装为一个 `Target` 放到 ObjectTable 中，这个 `Target`
有以下特征：
`DGCImpl`静态代码块会在 `createRegistry` 的时候触发，调用链如下：