channel to the server.
服务器之后可以像使用本地 channel 一样，读取或是写入数据。我们以一个“echo”服务
器为例，它读入文本，再原样发送回去。它需要两个 channel，我们把客户端用来写入数
据的 channel 叫做“echo-out”，在服务器端，用它来读取数据。相似的，客户端用来读
取数据的 channel 叫做“echo-in”，服务器往里写入数据。
The server program is
服务器程序如下
/* EchoServer
*/
package main
import (
"fmt"
"os"
"old/netchan"
)
func main() {
// exporter, err := netchan.NewExporter("tcp", ":2345")
exporter := netchan.NewExporter()
err := exporter.ListenAndServe("tcp", ":2345")
checkError(err)
echoIn := make(chan string)
echoOut := make(chan string)
exporter.Export("echo-in", echoIn, netchan.Send)
exporter.Export("echo-out", echoOut, netchan.Recv)
for {
fmt.Println("Getting from echoOut")
s, ok := <-echoOut
if !ok {
fmt.Printf("Read from channel failed")
os.Exit(1)
}
fmt.Println("received", s)
fmt.Println("Sending back to echoIn")
echoIn <- s
fmt.Println("Sent to echoIn")
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
Note: at the time of writing, the server will sometimes fail with an error
message "netchan export: error encoding client response". This is logged
as Issue 1805
注意：在这篇教程写下的时候，服务器可能会收到“netchan export: error encoding
client response”的错误消息，这个问题被登记为Issue 1805。
14.3 Channel client 客户端 Channel
In order to find an exported channel, the client must import it. This is
created using Import which takes a protocol and a network service address
of "host:port". This is then used to import a network channel by name and
bind it to a local channel. Note that channel variables are references,
so you do not need to pass their addresses to functions that change them.
为了找到导出的 channel，客户端必须导入它。使用 Import方法可以完成，它接受两个
参数：协议名和形如“host:port”网络服务地址。之后就能通过名字导入，并绑定到本地
channel 上。注意，channel 变量是引用变量，不用向改变他们的函数传递 channel 的
地址。
The following client gets two channels to and from the echo server, and
then writes and reads ten messages:
以下客户端使用两个 channel 向/从服务器发送、接受消息，然后写入并读取收到的十条
信息。
/* EchoClient
*/
package main
import (
"fmt"
"old/netchan"
"os"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host:port")
os.Exit(1)
}
service := os.Args[1]
importer, err := netchan.Import("tcp", service)
checkError(err)
fmt.Println("Got importer")
echoIn := make(chan string)
importer.Import("echo-in", echoIn, netchan.Recv, 1)
fmt.Println("Imported in")
echoOut := make(chan string)
importer.Import("echo-out", echoOut, netchan.Send, 1)
fmt.Println("Imported out")
for n := 0; n < 10; n++ {
echoOut <- "hello "
s, ok := <-echoIn
if !ok {
fmt.Println("Read failure")
break
}
fmt.Println(s, n)
}
close(echoOut)
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
14.4 Handling Timeouts 处理超时
Because these channels use the network, there is alwasy the possibility
of network errors leading to timeouts. Andrew Gerrand points out a solution
using timeouts: "[Set up a timeout channel.] We can then use a select
statement to receive from either ch or timeout. If nothing arrives on ch
after one second, the timeout case is selected and the attempt to read from
ch is abandoned."
因为 channel 使用网络通信，存在因为网络错误导致超时的可能性。Andrew Gerrand
提出了一个办法 timeouts: "[Set up a timeout channel.]我们可以使用 select 语
句从 ch 或是 timeout 接受信息。如果超过 1 秒钟 ch 没有收到信息，timeout 通道被选
择，放弃从 ch 获取信息。
timeout := make(chan bool, 1)
go func() {
time.Sleep(1e9) // one second
timeout <- true
}()
select {
case <- ch:
// a read from ch has occurred
case <- timeout:
// the read from ch has timed out
}
14.5 Channels of channels 传递 channel 的 channel
The online Go tutorial at http://golang.org/doc/go_tutorial.html has an
example of multiplexing, where channels of channels are used. The idea is
that instread of sharing one channel, a new communicator is given their
own channel to have a privagye conversation. That is, a client is sent a
channel from a server through a shared channel, and uses that private
channel.
在线 Go 指导（http://golang.org/doc/go_tutorial.html）中展示了一个有点复杂
的例子，其中使用了传递 channel 的 channel。这个方法避免了总是使用共享 channel，
新的进程被赋予他们自己的 channel 进行私有交流。即，客户端通过共享 channel 从服
务器端获得一个 channel，之后使用这个私有 channel 进行通信。
This doesn't work directly with network channels: a channel cannot be sent
over a network channel. So we have to be a little more indirect. Each time
a client connects to a server, the server builds new network channels and
exports them with new names. Then it sends the names of these new channels
to the client which imports them. It uses these new channels for
communicaiton.
然而这对网络 channel 不起作用，网络 channel 不能发送 channel，所以我们要稍微绕
点弯路。每次客户端连接服务器，服务器建立一个新的 channel，然后用新名字导出他们。
之后向导入它们的客户端发送这些新 channel 的名字。最后使用这些新 channel 进行通
信。
A server is
服务器代码如下
/* EchoChanServer
*/
package main
import (
"fmt"
"os"
"old/netchan"
"strconv"
)
var count int = 0
func main() {
exporter := netchan.NewExporter()
err := exporter.ListenAndServe("tcp", ":2345")
checkError(err)
echo := make(chan string)
exporter.Export("echo", echo, netchan.Send)
for {
sCount := strconv.Itoa(count)
lock := make(chan string)
go handleSession(exporter, sCount, lock)
<-lock
echo <- sCount
count++
exporter.Drain(-1)
}
}
func handleSession(exporter *netchan.Exporter, sCount string, lock chan string) {
echoIn := make(chan string)
exporter.Export("echoIn"+sCount, echoIn, netchan.Send)
echoOut := make(chan string)
exporter.Export("echoOut"+sCount, echoOut, netchan.Recv)
fmt.Println("made " + "echoOut" + sCount)
lock <- "done"
for {
s := <-echoOut
echoIn <- s
}
// should unexport net channels
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
and a client is
客户端代码如下
/* EchoChanClient
*/
package main
import (
"fmt"
"old/netchan"
"os"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host:port")
os.Exit(1)
}
service := os.Args[1]
importer, err := netchan.Import("tcp", service)
checkError(err)
fmt.Println("Got importer")
echo := make(chan string)
importer.Import("echo", echo, netchan.Recv, 1)
fmt.Println("Imported in")
count := <-echo
fmt.Println(count)
echoIn := make(chan string)
importer.Import("echoIn"+count, echoIn, netchan.Recv, 1)
echoOut := make(chan string)
importer.Import("echoOut"+count, echoOut, netchan.Send, 1)
for n := 1; n < 10; n++ {
echoOut <- "hello "
s := <-echoIn
fmt.Println(s, n)
}
close(echoOut)
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
14.6 Conclusion 总结
Network channels are a distributed analogue of local channels. They behave
approximately the same, but due to limitations of the model some things
have to be done a little differently.
网络 channel 是本地 channel 的分布式模拟。它们表现的近乎相同，但是由于模型的限
制，存在一些不同。
Copyright Jan Newmarch, PI:EMAIL
版权所有 Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
如果你喜欢这本书，请通过 Flattr 支持
或是使用 Paypal 捐助，
Chapter 15 第十五章
Web sockets
Web sockets are designed to answer a common problem with web systems: the
server is unable to initiate or push content to a user agent such as a browser.
Web sockets allow a full duplex connection to be established to allow this.
Go has nearly complete support for them.
Web sockets 规范的设计是为了解决网络系统中的一个常见问题：服务器端无法发起或
推送内容到用户代理，例如浏览器。Web sockets 能够建立一个全双工的连接来进行这
些操作。Go 语言对此有近乎完整的支持。
Warning
警告
The Web Sockets package is not currently in the main Go 1 tree and is not
included in the current distributions. To use it, you need to install it
by
Web Sockets 包当前并不在 Go 1 的主代码树里，也不包含在当前的分发包里。为了使用
它，你必须先通过如下命令来安装它
go get code.google.com/p/go.net/websocket
15.1 Introduction 介绍
The websockets model will change for release r61. This describes the new
package, not the package in r60 and earlier. If you do not have r61, at
the time of writing, use hg pull; hg update weekly to download it.
websockets 模式(模型？？)会在 r61 版本里做些变更。此文介绍的是新的包，而不是
r60 或者更早之前的版本。如果你当前还没有 r61 版本，使用 hg pull; hg update
weekly 来下载它。
The standard model of interaction between a web user agent such as a browser
and a web server such as Apache is that the user agent makes HTTP requests
and the server makes a single reply to each one. In the case of a browser,
the request is made by clicking on a link, entering a URL into the address
bar, clicking on the forward or back buttons, etc. The response is treated
as a new page and is loaded into a browser window.
用户代理（例如浏览器）和 web 服务器（例如 Apache）之间进行交互的标准模型是这样
的：用户代理发送 HTTP 请求，然后服务器响应每个请求。以浏览器举例，请求是指点击
链接、在地址栏中输入网址、点击前进或后退按钮等行为。而响应则是在浏览器窗口里加
载的页面。
This traditional model has many drawbacks. The first is that each request
opens and closes a new TCP connection. HTTP 1.1 solved this by allowing
persistent connections, so that a connection could be held open for a short
period to allow for multiple requests (e.g. for images) to be made on the
same server.
这种传统模型有很多缺点。首先，每个请求都会开启和关闭一个新的 TCP 连接。HTTP 1.1
通过持久化连接来解决这个问题，一个连接能够在较短的时期里保持打开状态，从而达到
向同一个服务器发送多个请求(例如加载图片)的目的。
While HTTP 1.1 persistent connections alleviate the problem of slow loading
of a page with many graphics, it does not improve the interaction model.
Even with forms, the model is still that of submitting the form and
displaying the response as a new page. JavaScript helps in allowing error
checking to be performed on form data before submission, but does not change
the model.
虽然 HTTP 1.1 的持久化连接减轻了有很多图片的页面的加载缓慢问题，但它还是没有
改进旧的交互模型。特别是在有表单的情况，模型依然是提交表单然后展现一个新页面作
为响应。虽然在 JavaScript 的帮助下能做到在提交表单前进行错误检查，但依然没有改
变这种模型。
AJAX (Asynchronous JavaScript and XML) made a significant advance to the
user interaction model. This allows a browser to make a request and just
use the response to update the display in place using the HTML Document
Object Model (DOM). But again the interaction model is the same. AJAX just
affects how the browser manages the returned pages. There is no explicit
extra support in Go for AJAX, as none is needed: the HTTP server just sees
an ordinary HTTP POST request with possibly some XML or JSON data, and this
can be dealt with using techniques already discussed.
AJAX(异步 JavaScript 和 XML)对交互模型做了极大的改进。它允许浏览器发送请求然后
通过 DOM 将响应内容更新到页面上适当的部分。但是交互模型的本质还是没有变。AJAX
只是影响了浏览器对返回页面的处理方式。Go 没有为 AJAX 做明显的额外支持，其实也没
有这个必要：HTTP 服务器看到的仍然是常规的 HTTP POST 请求(可能带有一些 XML 或者
JSON 数据)，这种请求可以被已经谈及的技术进行处理。
All of these are still browser to server communication. What is missing
is server initiated communications to the browser. This can be filled by
Web sockets: the browser (or any user agent) keeps open a long-lived TCP
connection to a Web sockets server. The TCP connection allows either side
to send arbitrary packets, so any application protocol can be used on a
web socket.
前面提及的都还是浏览器向服务器通讯。所缺少的是服务器向浏览器发起通讯。Web
sockets 正好可以填补这个空缺：浏览器(或者任何其它的用户代理)保持开启一条和 Web
sockets 服务器的 TCP 长连接。这条 TCP 连接允许各边发送任意的数据包，因此可以在
web socket 上使用任何的应用层协议。
How a websocket is started is by the user agent sending a special HTTP request
that says "switch to web sockets". The TCP connection underlying the HTTP
request is kept open, but both user agent and server switch to using the