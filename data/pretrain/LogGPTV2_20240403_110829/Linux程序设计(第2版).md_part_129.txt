Act OdoCon
Csiopr:C3
TpePp
AtirPakRey
图20-11
加入iava编程群：524621833
---
## Page 695
678
Linux程序设计
如果这时点击一个高亮度的键接，我们将要访问的还是同一个可执行文件，但这次是在
URL的尾部增加了一个查询字符串。我们将会看到中选CD唱盘上的曲目清单。如图20-12所示。
DEHTMLCDDe
GO
Ralcad
L
http:/Looalhoat/cgi-bin/cddb/cdhtal7GA=04
eCcPVP
CDcataleguc enty
Dhy aoshau
Cy lvey
图20-12
你需要把鹏才持贝到cgi-bin/cddb子目录里去的cdc_和cdt_系列文件的读/写权限分
配给系统中的每一个人。虽然cdhtml是只读性的，但打开数据库的cd_access例程需要以
读写方式打开这文件。
如果读者不想自己把字符都一个一个地敲进去，请记住我们的提醒：这个程序和本书使用
的其他所有程序示例的源代码定义都可以从Wrox出版社的Web站点上找到。
20.7应用Perl语言
一本介绍Linux操作系统上Web服务器Apache软件程序设计方面内容的书如果没有提到Perl
语言，那它就算不上完整。虽然为了保持整书格调的统一我们基本上一直使用着C语言，但Perl
却可能是人们在Liux或UNIX系统上编写CGI程序时最经常使用的程序设计语言。
Perl语言里提供了许多与编写CGI程序有关的Perl模块，其中最醒目的要说CGl.pm模块了，
它能够为你完成大部分表单信息的分析工作。但我们还将继续向前跃进一步，向大家介绍一个
加入jaVa编程群：524621833
---
## Page 696
第20章因特网程序设计II：CGI679
更高级的论题：强大的mod_peri功能模块。它可以有效地把Perl解释器嵌人到web服务器Apache
软件里，从而允许Apache在处理需要执行Perl脚本的请求时不再需要为CGI程序的每次调用都启
动一个Perl解释器。
除此之外，我们还将能够访问到某些Apache的内部状态信息，这可以帮助我们开发出生成
机制更为复杂的Web主页来；而且，我们以后就不必在每次对Perl脚本进行了修改之后都必须重
建Web服务器了。有了这个功能模块，你可以随时对用Perl语言编写的CGI程序进行修改，然后
但你也必须为此付出一点代价。首先，利用mod_perl模块执行的Perl脚本必须编写得很小心
一因为它们将运行在服务器的内部，所以在变量的使用和初始化方面就必须非常非常的谨慎。
第二点，因为进程的长度可能会很大，所以你只有在大量增加了服务器机器上的内存之后才能
更多更好地使用mod_perl模块。尽管如此，许多站点仍然认为mod_perl模块的功能和灵活性使这
一问题的利远大于弊，因此因特网上广泛使用着mod_perl模块。在大多数情况下，你甚至可以
把mod_perl脚本未经修改地从Linux或UNIX服务器机器上的Apache里直接移植到微软Windows
系统上的Apache去。
这本书的篇幅只允许我们向大家简单地介绍一下怎样才能把mod（peri模块支持添加到Apache
里以及如何开始为它编写你们的第一个Perl脚本。我们希望对这一高级论题的简单介绍能够鼓励
大家继续对此做深人的研究，面在大家掌握了基本的原理之后，网上还有无数的在线文档可以
帮助你不断前进。
你首先需要有Apache的源代码。如果你的发行版本只有预装的Apache而没有源代码，就必
须按我们曾经走过的老路做一遍-—卸下预装的Apache，下载它最新的稳定版源代码，自行编
译并安装它们。别担心，Apache的编译和安装工作是很容易进行的，这只要花几分钟的时间。
我们假设你将会在一台测试用机上做这件事情。并且在把与现有的Apache服务器有关的一
切东西都保存起来以后，已经把它卸安装完毕并重新开始一次“清洁的”安装。如果你的Linux
发行版本已经自带了Apache和mod_perl模块，那你可就省大事了；你可以把这些步骤都跳过去。
如果不是这样，最安全的办法莫过于把发行版本自带的所有Web服务器软件程序都卸下来，然后
从源代码开始重新建立Apache，这样就可以把mod_perl模块链接到其中去。别担心，这真的很
容易。
先去http：//www.apache.org站点下载最新版的源代码，它们一般都保存在一个经过gzip压缩
的tar义件里，文件名带有版本号。把这个文件下载到一个方便的子目录里，对它进行解压和解
档操作。注意阅读INSTALL文件里的安装指南。如果你打算把Apache安装到子目录
/usr/local/apache里去（这是最常用的安装位置），那么第一步要执行“.Jconfigure--prefix=
/usr/local/apache”命令，然后再执行make命令。如果一切正常，用su命令把自已变为根用户，
再执行“make install”命令。最后，你用“/usr/local/apache/bin/apachectr start”命令启动自己
的Web服务器就大功告成了。我们说什么来着，确实不难嘛！
让自己从源代码开始建立起来的Apache运转起来之后，你就可以开始安装mod_peri模块了。
这一过程在我们写这本书的时候还需要有点技巧，但并不是特别复杂。
假设你已经安装好Perl，但手里还没有什么附加模块，那么要想让mod_perl模块工作还必须
加入jaVa编程群：524621833
---
## Page 697
680Linux程序设计
先到CPAN站点上取一些附加模块回来，CPAN的全称是“ComperhensivePerlArchiveNetwork”
（智能Perl档案网络）.站点网址是http：/www.cpan.org。mod_perl模块需要依赖大量的其他模块，
几乎每次编译它都会报告你需要先安装另外一个模块，这是它不太方便的地方。但这也可以看
出Per模块的再使用性是多么的高，所以这并不是什么坏消息！但令人头痛的是那些模块本身还
需要其他的模块。我们这里借用Douglas Adams在“The Hitch Hiker's Guide to the Galaxy”（《黑
客的天堂之路》）一书里的话来安慰大家一下：“别着急”、其实有一个比较容易的解决方案，那
就是CPAN的Perl模块。
第一步是下载FTP模块：在我们编写本书的时候，它还是libnet模块的一部分。登录站点htp：
/www.cpan.org的FTP服务，把该模块下载到一个空目录里去，把文件释放出来。然后，你可以
只用下面这四条命令就把它安装好：
per1 Makefile.PL
make test
na.ke
make insta11
严格说来你可以省略“maketest”步骤，但安全总比后悔要好。现在你就有了一个能够替你
完成FTP工作的Perl模块了。其实它还可以用于SMTP、NNTP等几种其他的协议，但我们现在最
感兴趣的就是FTP。
第二步是安装AndreasKonig编写的确实奇妙的CPAN模块。这个模块需要你配置一次，你必
须告诉它对你自已的站点来说哪个CPAN镜象站点是最好的下载地点，然后它就能够从CPAN那
里把你需要的模块取回来，找出它们的依鞍模块，把那些也取回来，然后一次性把模块们都安
装好。
对CPAN模块重复执行刚才对libner模块进行的操作。CPAN模块会问你几个问题，但不必担
没有更难回答的了。
把CPAN模块安装好以后，就进人第三阶段：下载安装Apache模块包。
注意，因为下载CPAN模块需要连接因特网，但在两次下载操作之间可能需要完成一些本地
的处理工作，所以如果你使用的是一个有自动倒计时功能的拨号上网链接，就可能需要采取
些步骤来保持拨号链接的活跃状态。告诉大家一个简单的花招，就是执行一条“ping-il15
www.perl.com”命令，但千万别忘了在CPAN变完魔术后把ping进程杀掉，要不然拨号链接可就
下不了线了。
用下面的命令以交互方式启动CPAN模块：
per1_XCPAN_e she11
Perl将启动，你会看到--个“cpan>”交互操作提示符。
输人下面这条命令：
install Bundle: tApache
然后就坐在电脑前看魔术表演吧。它会把所有的苦差事都替你搞据。
如果最后一步安装mod（perl模块的操作失败了，请不必担心。我们过一会儿还得遇见它
我们还得给它设定一些附加选项呢。
加入jaVa编程群：524621833
---
## Page 698
第20章因特网程序设计11：CGI
68/
CPAN完成操作之后，输人“exit”命令返回到shell提示符下。
第四步是重新从CPAN站点手动下载mod_perl模块（看到这儿你可别害怕），因为我们需要
一些与CPAN模块给我们的缺省值不一样的配置选项。象往常一样解开压缩文件，但在对它的这
次配置里我们要额外加上一些命令行选项。如下所示：
pet 1 Makefile. PL EVERYTHTNCv1 APACHZ_PREFIX='usr. ocal /apache
这条命令表示我们需要全部的mod_perl选项、而我们的Apache网络服务器软件安装在子目
录/usr/local/apache甲。如果你的Apache安装在另外--个地方，请对这条命令做相应的修改。命
令儿乎是立刻提示你输人在其中建立Apache的源文件月录，输人它，注意可能需要你在路径名
的最后加上.“/src”部分。我们是在一个本地子H录上建立Apache的，在作者之一的机器上，我
们门回答的是/home/rick/apache/src/apache_1.3.9/src
在大家读到这本书的时候，Apache的版本号可能已经增加了：
接下来要提问一些与重建Apache有关的问题，如果没有什么其他的想法，直接yes到底就是
了。接下来要执行make命令重新建立我们的httpd二进制代码，它将建立在Apache服务器的src了
目录里。
编译步骤结束后，你就可以执行“maketest”命令来检查自己是否已经建立起-个激活了
mod_perl模块的Apache服务器。这条命令会用一个不同的配置文件在另外一个端口运行-个特
殊的httpd进程，不会与机器上正在运行的现有Web服务器发生冲突。但这个操作可能会失败，
在我们的机器上就是如此！好在这看起来是测试工作本身的一个问题而不是新建立的httpd的过
错，所以如果没有其他的什么毛病，继续前进好了：
现在我们已经得到了一个带mod_perl支持的httpd程序，最后一个步骤是安装和配置它，然
后我们就可以开始编写一个测试用的Perl模块了。
把路径切换到/usr/local/appche子目录，用su命令变为根用户。
如果你的Web服务器正在运行中，请用下面这条命令停止它：
/usr/local/apache/bin/apachectr stop
备份现有的/bin/httpd和conf/httpd.conf文件以防万一：
现在用你刚才在Apache的/src子目录里新建立的htupd文件覆盖/bin/httpd文件。你会注意到新
httpd文件要比原来的老文件大许多。
在我们开始编写自己那简单的Perl模块之前还剩下一件事情要做了，那就是在Apache的配置
文件里加上与Perl有关的设置项。
有好几种办法可以完成这件工作。而我们将在这里介绍给大家的办法从执行角度看并不足
最有效率的，但它可能是最简单的办法了，而且对学习mod_perl模块也很有帮助。
编辑httpd.conf文件（记得先做个备份）。在文件里找个合适的地方把下面这几行加进去：
Per.FreshRestart On
SetHandler _perl-script
Pcr1Handler Apache ::He11o
.'Location>
“PerlFresbRestartOn”告诉Apache：当它被重新启动的时候，要重新加载所有的Perl脚本。
加入jaVa编程群：524621833
---
## Page 699
682Linux程序设计
如果你正在调试Perl脚本，就必须加上这个选项。
接下来的内容有点像HTML文档里的一个段落，它告诉Apache在有人请求blp-hello-perl文档
的时候它需要使用一个Perl脚本处理器来处理，而它将调用的Perl脚本是Apache模块里的
"Hello"。
现在停止再重新启动Apache服务器，让它重新读入配置文件。如下所示：
usr, local/apache/bin/apachectr stop
/usr. local/apache /h)n apachectr stat
到这里，我们已经有了自已的嵌人了Perl解释器的Apache服务器了，另外我们还配置它在我
们请求一个名为blp-hello-perl的文档时去启动调用一个Perl脚本。现在是动手试试的时间了。
动手试试：一个mod_perl模块
我们将要编写的文件是/usr/local/apache/lib/perl/Apache/Hello.pm
Apache安装目录下的lib/perl子目录是Apache中的mod_perl将自动在其中搜索Perl脚本的地点
之一。如果你想把它放到另外一个地方去，就需要在httpd.conf配置文件里另外增加一行
“PerISetEnvPERL5LIB”语句，新路径名用逗号隔开放
在命令中的尖括号里。之所以把Hello.pm文件放在lib/perl/Apache子目录里是因为我们打算把我
们的文件最终放人-个名为Apache的软件包里去。下面就是我们的第-个Perl模块。
package Apache::He110;
use Apache::Constants ':common':
use strict;
sub handler (
nty Suser_agent = $r->header_in('User-Agent′):
my $r = shift;
Sr->content_typet*text/html');
my Shost = Sr->get_remote_host;
r->send_http_header;
$r>print(
RELLO
/HEAD
END
$r->print I*Hello $host with browser Suser_agent \n\rWelcome to Apache
running mod_perl\r\n*}:
$r>prIint (*\r\n\r\n°1 :
return OK:
1
1;
操作注释：
这个文件声明自已是模块Apache里的那个Hello文件。然后我们打开“strict”（严格）选项
（应该永远这样做），声明自己希望使用Apache模块里“common”类别的各种常数。
我们定义了一个子例程handler，这是一个特殊名字，Apache知道要调用它来为一个Web主
加入jaVa编程群：524621833
---
## Page 700
第20章因转网程序设计11：CGI
683
页生成输出。
“mySr=shift:”语句使我们取得了·-个包含着请求对象的变量r。这个对象带有从Perl生成
我们的主页所必须调用的全部常用例程
接下来，我们取得了已经从HTTP请求里传递米的用户方代理，发送出content_type（内容类
型）、发送出一个预先定义好的HTTP表头、再取得远程主机的名字。
最后那几行都是比较简单的Perl语句，用来生成个非常基本的HTML主页，这个主页将简
单地通过调用请求对象自带的print方法而被发送给浏览器
这就是我们要做的全部工作，就差一件事一—测试，也许还需要做点调试工作。
启动我们的浏览器，把它指向http：//ocalhost/blp-hello-perl。
如果一切顺利，我们就将看到如图20-13所示的画面。
NetscapeHELLO
FEdVwGoComnar
N
BackFowardRlod
HOmE
BoumLocionhte://loalhost/blp-hollo-per1
wharse
enuaConcPepeYelowPagnDowaacFna
H12001[]0,L22-15
WApra
图20-13
如果第一次尝试没有成功，不要灰心。先去试试请求一下http：/localhost/index.html。你应
该看到标准的安装画面，告诉你Apache运行得一切正常。如果能够看到这个画面，你可以到
/usr/localapache/logs子目录里的日志文件里查查，看能不能找出一些哪里出了问题的好线索。
可惜的是因为篇幅有限，我们只能给大家准备这样一个极其简单的mod_perl示例了。但好
在网上有数不胜数的资料，沿着htup：//www.apache.org站点上的链接找去吧；如果你真的在
Apache模块上遇到了很严重的问题，可以再找几本专门介绍Apache的书来看看。
20.8本章总结
这-一章向大家介绍了创建动态交互式Web主页的方法。这是一个发展快得让人跟不上节奏的
领域，在网上显示信息的方法随时都在更新。我们希望这一章内容能够在理论和实践两方面帮
助大家掌握用C语言自行编写简单CGI应用程序的基本原理。
下面是我们这一章学习内容的一个总结：
加入jaVa编程群：524621833