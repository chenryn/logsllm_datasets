I understand you're encountering an `IllegalStateException` while using Glide version 3.6.1. The stack trace indicates that the exception is being thrown because the activity has already been destroyed, but Glide is still trying to perform an operation on it. Here's a more detailed and professional way to present this issue:

---

### Issue Description

**Glide Version:** 3.6.1

**Exception:** `java.lang.IllegalStateException: Activity has been destroyed`

**Context:** The exception occurs when the activity is being destroyed, and Glide is attempting to perform an operation on the already-destroyed activity.

### Stack Trace

```java
java.lang.RuntimeException: Unable to destroy activity {MY PACKAGE NAME}: java.lang.IllegalStateException: Activity has been destroyed
    at android.app.ActivityThread.performDestroyActivity(ActivityThread.java:4097)
    at android.app.ActivityThread.handleDestroyActivity(ActivityThread.java:4115)
    at android.app.ActivityThread.access$1400(ActivityThread.java:177)
    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1620)
    at android.os.Handler.dispatchMessage(Handler.java:111)
    at android.os.Looper.loop(Looper.java:194)
    at android.app.ActivityThread.main(ActivityThread.java:5771)
    at java.lang.reflect.Method.invoke(Native Method)
    at java.lang.reflect.Method.invoke(Method.java:372)
    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1004)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:799)
Caused by: java.lang.IllegalStateException: Activity has been destroyed
    at android.app.FragmentManagerImpl.enqueueAction(FragmentManager.java:1383)
    at android.app.BackStackRecord.commitInternal(BackStackRecord.java:745)
    at android.app.BackStackRecord.commitAllowingStateLoss(BackStackRecord.java:725)
    at com.bumptech.glide.manager.RequestManagerRetriever.getRequestManagerFragment(SourceFile:159)
    at com.bumptech.glide.manager.RequestManagerFragment.onAttach(SourceFile:117)
    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:865)
    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1079)
    at android.app.BackStackRecord.run(BackStackRecord.java:852)
    at android.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:1485)
    at android.app.FragmentManagerImpl.dispatchDestroy(FragmentManager.java:1929)
    at android.app.Fragment.performDestroy(Fragment.java:2279)
    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1029)
    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1079)
    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1061)
    at android.app.FragmentManagerImpl.dispatchDestroy(FragmentManager.java:1930)
    at android.app.Activity.performDestroy(Activity.java:6297)
    at android.app.Instrumentation.callActivityOnDestroy(Instrumentation.java:1151)
    at android.app.ActivityThread.performDestroyActivity(ActivityThread.java:4084)
    ... 10 more
```

### Analysis

The `IllegalStateException` is being thrown because the activity is being destroyed, but Glide is still trying to attach a fragment or perform an operation that requires the activity to be active. This can happen if Glide is not properly handling the lifecycle of the activity.

### Recommendations

1. **Check Lifecycle Management:**
   - Ensure that Glide requests are properly managed with respect to the activity's lifecycle. Use `Glide.with(context)` where `context` is the activity or application context, depending on the use case.
   - Consider using `RequestManager` to manage requests and ensure they are cleared when the activity is destroyed.

2. **Update Glide:**
   - Consider updating to a newer version of Glide, as later versions may have fixed this issue and provide better lifecycle management.

3. **Handle State Loss:**
   - If you need to commit fragment transactions after the activity has been destroyed, use `commitAllowingStateLoss()` carefully. However, this should be a last resort as it can lead to memory leaks and other issues.

4. **Debugging:**
   - Add logging to track when and where the `IllegalStateException` is being thrown to better understand the sequence of events leading to the error.

By following these recommendations, you should be able to handle the lifecycle issues more gracefully and avoid the `IllegalStateException`.

---

This format provides a clear and professional description of the issue, along with actionable recommendations for resolving it.