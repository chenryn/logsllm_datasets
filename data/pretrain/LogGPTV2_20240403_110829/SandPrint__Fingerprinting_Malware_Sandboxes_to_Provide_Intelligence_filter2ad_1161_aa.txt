title:SandPrint: Fingerprinting Malware Sandboxes to Provide Intelligence
for Sandbox Evasion
author:Akira Yokoyama and
Kou Ishii and
Rui Tanabe and
Yinmin Papa and
Katsunari Yoshioka and
Tsutomu Matsumoto and
Takahiro Kasama and
Daisuke Inoue and
Michael Brengel and
Michael Backes and
Christian Rossow
SandPrint: Fingerprinting Malware Sandboxes
to Provide Intelligence for Sandbox Evasion
Akira Yokoyama1, Kou Ishii1, Rui Tanabe1, Yinmin Papa1,
Katsunari Yoshioka1, Tsutomu Matsumoto1, Takahiro Kasama2,
Daisuke Inoue2, Michael Brengel3, Michael Backes3,
and Christian Rossow1,3(B)
1 Yokohama National University, Yokohama, Japan
{yokoyama-akira-bs,ishii-kou-yf,tanabe-rui-nv}@ynu.jp,
PI:EMAIL, PI:EMAIL,
2 National Institute of Information and Communications Technology,
PI:EMAIL
Koganei, Japan
{kasama,dai}@nict.go.jp
3 Center for IT-Security, Privacy, and Accountability, CISPA,
Saarland University, Saarbr¨ucken, Germany
{mbrengel,crossow}@mmci.uni-saarland.de,
PI:EMAIL
Abstract. To cope with the ever-increasing volume of malware sam-
ples, automated program analysis techniques are inevitable. Malware
sandboxes in particular have become the de facto standard to extract
a program’s behavior. However, the strong need to automate program
analysis also bears the risk that anyone that can submit programs to
learn and leak the characteristics of a particular sandbox.
We introduce SandPrint, a program that measures and leaks char-
acteristics of Windows-targeted sandboxes. We submit our tool to 20
malware analysis services and collect 2666 analysis reports that cluster
to 76 sandboxes. We then systemically assess whether an attacker can
possibly ﬁnd a subset of characteristics that are inherent to all sandboxes,
and not just characteristic of a single sandbox. In fact, using supervised
learning techniques, we show that adversaries can automatically gener-
ate a classiﬁer that can reliably tell a sandbox and a real system apart.
Finally, we show that we can use similar techniques to stealthily detect
commercial malware security appliances of three popular vendors.
1 Introduction
Malicious software poses one of the major security challenges nowadays. In its
various forms, malware is equally a threat to consumers (e.g., banking trojans,
ransomware), businesses (e.g., targeted attacks, denial-of-service bots), and soci-
ety in general (e.g., spambots). In 2014, Symantec faced 65 million previously-
unseen malicious ﬁles targeting Windows [51]. Similarly, PandaLabs reports on
a daily ﬂood of over 200,000 new unknown, potentially malicious programs [49].
c(cid:2) Springer International Publishing Switzerland 2016
F. Monrose et al. (Eds.): RAID 2016, LNCS 9854, pp. 165–187, 2016.
DOI: 10.1007/978-3-319-45719-2 8
166
A. Yokoyama et al.
This trend of increasing malware samples is a consequence of polymorphism, but
is also caused by new threats that are discovered almost on a daily basis.
To cope with the volume of malware, defenders started to improve technol-
ogy and their organization within the community. On the technological side,
researchers introduced several complementary approaches to analyze unknown
programs in an automated way. Windows-based malware sandboxes in particular
have become the de facto standard for automated malware analysis [24], equally
for academia and industry. Sandboxes are excessively leveraged to obtain threat
information, such as previously-unseen malware, inputs for supervised detection
mechanisms, malware C&C servers, targets of banking trojans, intelligence on
spreading campaigns, or simply to assist in the manual process of reverse engi-
neering. Finally, sandboxes are also used as part of commercial malware security
appliances that aim to protect organizations by dynamic malware analysis.
The requirement to automate the analysis of unknown programs (“samples”)
also bears the risk that the analysis is unattended. That is, oftentimes the entire
process from receiving a sample, scheduling it for analysis, executing it, and
possibly even returning an analysis result to the sample submitter is embedded in
a fully-automated processing chain. Anyone that can submit samples to the input
feed of a sandbox can possibly learn and leak the characteristics of a particular
sandbox. While it may seem non-trivial to send programs to any sandbox, as
we will show, it is typically suﬃcient to submit a sample to automated malware
analysis services, which then redistribute the samples for other sandboxes, easily
generating a massive source of insights about the internals of global sandboxes.
In this paper, we follow this general idea and introduce SandPrint, a
Windows-based program that measures and leaks characteristics of the sandbox,
such as precise OS information, network conﬁguration or installed (or emulated)
hardware. Over a period of 2 weeks, we continuously submit our tool to 20 mal-
ware analysis services [1–3,5–8,11–14,20,25,28,35,38,48,50,52,55] and collect
2666 analysis reports from eleven of these services. In an attempt to ﬁngerprint
sandboxes, we use unsupervised learning mechanisms to cluster the SandPrint
reports and their various features into groups to identify sandboxes. This process
exposes 76 sandboxes, many of which presumably obtain their samples via auto-
mated sample exchanges with malware analysis services.
We then turn to our next research question: Is it possible to detect a sandbox
from the perspective of a (potentially malicious) program? By now, many mal-
ware families already follow ad-hoc procedures to identify individual sandbox
artefacts, such as detecting virtualization or avoiding speciﬁc sandbox conﬁg-
urations. Instead, we assess a more systematic approach and explore whether
an attacker can possibly ﬁnd characteristics (e.g., using a tool like SandPrint)
that are inherent to all sandboxes, and not just characteristic of a single sand-
box. We leverage supervised learning based on the collected features to train an
automated classiﬁer that can reliably tell sandboxes apart from normal systems.
Finally, we turn our attention to the possibility of detecting malware appli-
ances of popular vendors. We follow the intuition that these appliances internally
also use sandboxing technology and are thus likely susceptible to similar evasion
SandPrint: Fingerprinting Malware Sandboxes
167
attacks. In fact, by training a classiﬁer just on the aforementioned sandboxes,
we show that adversaries can even evade appliances—undermining the entire
security concept of such installations.
Summarizing, the contributions of this paper are:
– We present SandPrint, a tool to exﬁltrate characteristics of malware sand-
boxes. We submit it to 20 public malware analysis services and use unsuper-
vised learning techniques to identify the characteristics of 76 sandboxes.
– We leverage the resulting SandPrint reports to train an automated classiﬁer
that can reliably distinguish between a sandbox and a user system.
– We show that we can use characteristics that we learned from public sandboxes
to detect malware security appliances, even without a priori insights on the
internals of the appliance’s sandbox.
2 Background
We ﬁrst describe the terminology that we use throughout the paper. We use the
term sandbox to refer to a dynamic analysis environment that executes unknown
programs (called samples). Sandboxes are widely used to gain insights on mali-
cious software (malware), such as its current campaigns [19], recent C&C servers
and traﬃc patterns [36,44,46] or attack targets [26]. Similarly, sandboxes can be
used to group behavior into malware families [16,45], or to identify suspicious
behavioral patterns [32]. Egele et al. give a comprehensive overview of known
sandbox implementations [24].
By now, malware sandboxes are not used only by academics. In contrast to
manual analysis, sandboxes are highly automatized. As a consequence, the anti-
virus industry and security companies that oﬀer anti-malware appliances heavily
rely on sandboxes as part of their daily business. In fact, sandboxes have become
the industry standard to cope with the daily feed of hundreds of thousands of
previously-unseen malware samples. In times where manually analyzing each
malware does not scale anymore, sandboxes are a vital component in the ﬁght
against malware.
Virtualization: To scale the analysis, most sandboxes rely on some form of vir-
tualization (with the notable exception of bare-metal sandboxes [30,31]). To this
end, sandboxes rely on various virtualization techniques such as VMWare [15]
and VirtualBox [10] or CPU emulators [4,17]. Cuckoo Sandbox [8] is a popular
open-source sandbox. However, as we will see, many security organizations oper-
ate other sandboxes, either choosing from commercial sandboxes or designing
their own solution. Virtualization oﬀers the beneﬁt that many virtual machines
(VMs) can run in parallel on a single system, each analyzing one sample. In
addition, virtualization software makes it possible to take so called snapshots
of VMs, which freeze the state of a VM and allow reversion back to this state.
Snapshots help to reset the system state once a piece of malware was executed,
so that future executions do not suﬀer from side eﬀects.
168
A. Yokoyama et al.
Operating System: Regardless of precise sandbox implementations, the most
common and popular sandboxes execute samples on commodity operating sys-
tems, such as MS Windows. Due to the prevalence of Windows-based malware,
we focus on Windows-based sandboxes, although our results likely also apply to
Android-based [37] or Linux-based [39] sandboxes.
Malware Analysis Services: In contrast to a sandbox, a malware analysis
service (or simply “service” hereafter) receives submissions of samples (e.g., via
a web interface), analyzes the submitted samples in various ways, and normally
provides analysis results to the users. As we will show, these services typically
use one or more sandboxes to analyze the sample. In addition, services such as
VirusTotal [14] and Jotti’s malware scan [28] provide anti-virus scans. Also, it
is quite common that services share samples with other sandbox operators. In
fact, some services oﬀer to search for submissions of other users with various
key words, such as the hash value of the sample or anti-virus labels, and parties
can use paid APIs to automate searches and downloads. Table 2 summarizes the
analysis results provided by each service. There are nine services that accept
the submission of samples but do not provide any analysis results to the users.
Following the feedback by the vendors, the submitted samples were manually
analyzed in an isolated environment without Internet access.
Malware Security Appliances: Sandboxes have become an integral part of
commercial malware security appliances (or simply “appliances” hereafter). Such
appliances protect endpoints by dynamically analyzing an unknown program and
inspecting its behavior for suspicious actions. Appliances are frequently deployed
at the network layer and are used orthogonally to anti-virus scanners, e.g., to
protect endpoints from opening malicious email attachments or malicious ﬁle
downloads. Internally, appliances also use sandbox technologies to analyze the
program behavior.
3 Sandbox Fingerprinting
Sandboxes are a vital tool for malware analysis, which highlights the importance
of having a thorough understanding of their live deployment and characteristics.
In this section, we will ﬁngerprint sandboxes to investigate the landscape of
Internet-connected sandboxes. In our context, a ﬁngerprint reveals artifacts that
are speciﬁc to individual sandboxes. In Sect. 3.1, we will describe 24 features,
i.e., attributes that reveal certain characteristics of a sandbox. We will then
present SandPrint, a tool that exﬁltrates characteristics from any sandbox. In
Sect. 3.2, we will use the tool to collect ﬁngerprints by submitting it to 20 public
malware analysis services, and describe the dataset obtained.
3.1 Sandbox Fingerprinting Features
We ﬁrst introduce ﬁngerprinting features that we use to discriminate sandboxes
from each other, or put diﬀerently, to describe characteristics of individual sand-
boxes. We propose a (non-exhaustive) list of 24 features, as shown in Table 1.
We group these characteristics into the following ﬁve categories:
SandPrint: Fingerprinting Malware Sandboxes
169
Table 1. Sandbox ﬁngerprinting features (Clustering distance metrics: ED = Edit
Distance, EU = Euclidean Distance, EQ = Equality Distance, JD = Jaccard Distance)
Category
Feature
System installation Host name
Clustering Category
(cid:2) ED
(cid:2) EQ
Feature
Network config Default gateway
Hardware
Installation date
OS information
(cid:2) EQ
Organization name
(cid:2) EQ
Owner name
Windows product ID (cid:2) EQ
System manufacturer
Disk space
Display resolution
Mouse devices
RAM
Processor
(cid:2) EQ
(cid:2) EU
Activity
External IP address
ARP list
MAC address
DNS servers
Clipboard
Desktop icons
Event log
Recent files
Execution start Sample name
Sample path
Time from boot to start
Clustering
(cid:2) EQ
(cid:2) EQ
(cid:2) EQ
(cid:2) JD
(cid:2) EQ
(cid:2) EQ
1. System Installation: Sandboxes require an operating system (OS) to run
samples. Typically, to minimize manual eﬀort, sandbox operators install and
conﬁgure the OS only once, and then take a snapshot of the system. Assuming
that all parallel instances of the sandbox (e.g., VMs) use the same system
snapshot, this results in many features that are persistent across executions.
2. Hardware: The underlying hardware, whether emulated or physical, can
also reveal unique characteristics of a sandbox. All features are agnostic to
whether the hardware is emulated or actually physically present.
3. Network Conﬁguration: Sandboxes are typically conﬁgured such that the
sample can communicate with the Internet, e.g., with C&C servers. We thus
collect network features and also local conﬁgurations.
4. Activity: The system snapshot reveals certain events that have taken place in
the past (i.e., during installation time). In general, these features can measure
whether the system is close to default settings.
5. Execution Start: Once the fresh, non-infected sandbox has been started,
it needs to obtain a sample that the analyst wants to analyze. There are
multiple diﬀerent ways to automate this process.
This list can easily be extended with further features. We favor features that
potentially show a high entropy and are speciﬁc to a certain sandbox—the more
a feature can diﬀerentiate a sandbox from others, the better. In addition, most
of the selected features are deterministic and their values discrete and reliable.
Note that a stealthy sandbox could try to diversify the feature values.
3.2 Extracting Sandbox Fingerprints with SandPrint
We implemented SandPrint, a tool to exﬁltrate all above-mentioned features
from a system. SandPrint is a Windows 32-bit PE binary written in C, which
uses the Windows API and custom functions to reveal the features. Once Sand-
Print is executed, it uses HTTP to communicate with the SandPrint server.
A unique identiﬁer is assigned to each SandPrint sample and after the HTTP
session is established, this ID, embedded in an HTTP POST request, is sent
170
A. Yokoyama et al.
Table 2. Malware analysis services and summary of SandPrint submissions
Malware analysis service
Service #1
Service #2
Service #3
Service #4
Service #5
Service #6
Service #7
Service #8
Service #9
Service #10
Service #11
Service #12