# Chakra漏洞调试笔记4——Array OOB
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
数组索引的边界检查是防止数组访问越界的有效手段。但是对数组索引的边界检查是比较耗时的，因此JIT引擎为了提高Javascript代码运行效率，对数组的边界检查在一定条件下进行了优化。Chakra中的相关代码主要在GlobOpt::OptArraySrc函数中，涉及的优化主要包括Bound
Check Elimination和Bound Check Hoist。因为这部分代码逻辑比较复杂，笔者水平有限，分析过程难免有疏漏，文中错误之处恳请斧正。
## 0x0 Bound Check Optimize
关于Chakra Array的基本结构可以参考《Chakra漏洞调试笔记3-MissingValue》，这里不再说明。
对于例如：arr[index] = 1.1; 这样的数组赋值语句，JIT一般会做如下检查操作：
  1. 数组类型检查
  2. 加载数组长度属性headSegmentLength
  3. 数组边界检查，包括：数组下界检查 0 ≤ index；数组上界检查：index ≤ headSegmentLength – 1
如果类似arr[index] =
1.1这样的数组元素访问语句存在循环体中，或者多个基本块中，那么每次都做这样的检查操作就会比较耗时并且也是没有必要的。因此Chakra的JIT引擎根据数组访问的各种情况进行分类优化，主要包括Bound
Check Elimination和Bound Check Hoist。
Bound Check Elimination是指数据的边界检查是否可以消除，比如如果在profile阶段知道 (0 ≤ index && index ≤
headSegmentLength– 1) == true，那么就可以消除边界检查。
Bound Check Hoist是指数据的边界检查是否可以提升，比如在循环体中的数组边界检查，在满足某些条件下可以将上述1）2）3）操作提升到loop
header前的一个新基本块landing pad，从而减少数组边界检查操作的次数，提高代码运行效率。
Bound Check Elimination
Chakra的数组边界检查优化流程比较复杂，其中Bound Check Elimination参考zenhumany师傅《Using the JIT
vulnerability to Pwning Microsoft Edge》第29页的流程图：
简而言之Bound Check
Elimination由eliminatedLowerBoundCheck和eliminatedUpperBoundCheck两个变量决定。eliminatedLowerBoundCheck
= true的条件是index >= 0，eliminatedUpperBoundCheck = true的条件是 index ≤ length –
1。如果不满足上述条件，则需要考虑是否提取边界检查。提取边界检查的条件由变量doExtractBoundChecks决定，而doExtractBoundChecks由如下代码决定：
这里的注释已经说的很清楚了：从指令中提取边界检查的条件是当边界检查失败的时候JIT不是调用helper call这样的slow
path处理而是直接bailout到Interpreter。这里关键变量是canBailOutOnArrayAccessHelperCall，一般情况下它由如下代码决定：
也就是说当满足 (createdMissingValue || filledMissingValue || neededHelperCall ||
storedOutsideHeadSegmentBounds)== false时，就可以提取边界检查（doExtractBoundChecks =
true），当然headSegmentLength属性必须是可用的或者可以加载的（如果有循环，headSegmentLength在循环中应当是不变的）。
Bound Check Hoist
Bound Check
Hoist的逻辑主要在函数GlobOpt::DetermineArrayBoundCheckHoistability中，大致的流程如下图：
DetermineArrayBoundCheckHoistability函数返回后，通过lowerBoundCheckHoistInfo和upperBoundCheckHoistInfo确定是否需要做下/上边界检查的提升。
通过上图可以看到，这里边界检查提升的条件一般有6种，接下来将分别说明。
（说明：这里的分析基于CVE-2018-0777修补前的commit: ee5ac64f965c44d97c3557951bdb88ef5889e213）
条件1：index is constant
index is constant 是指数组索引为常量的情况，对于索引为常量的边界检查提升，Chakra给出了明确的注释：
也就是说，对于索引是常量的情况，边界检查可以直接提升，如果有compatible bound check则更新compatible bound
check，如果有loop则提升到loop的landing pad基本块中。看这样一个例子：
这里index = 3是一个常量，并且arr[3] = 1.1存在于loop中，因此可以把边界检查直接提升到landing pad中，同时注意到index
= 3 >= 0，因此eliminatedLowerBoundCheck = true，下界检查被消除，Globopt后的部分dump如下：
条件2：Has compatible bound check
条件1中提到了compatible bound check。那么什么是compatible bound
check呢？我们知道一个函数由多个基本块组成，数组的访问可能存在于多个基本块中，那么就需要对每个有数组访问的基本块做边界检查。显然这个操作是可以进行优化的，优化的方法是取每个基本块边界检查的相同集合的子集合并到一个基本块中做检查，而每个基本块边界检查的集合保存在globOptData.availableIntBoundChecks中，由IntBoundCheck对象的leftValueNumber和rightValueNumber属性索引：
在做数组边界检查提升的时候，会检查globOptData.availableIntBoundChecks是否存在可用的边界检查，有的话则更新其Bound
Offset。看这样一个例子：
这里有两个基本块存在数组访问操作，在分析第一个基本块的时候，因为globOptData.availableIntBoundChecks ==
NULL，会生成新的边界检查。
在分析第二个基本块的时候，检查是否存在可用的globOptData.availableIntBoundChecks，存在则更新第一个基本块的边界检查信息，以lower
bound check为例：
具体地：
Bound Check in Block 0:
lower bound check: 0 ≤ (index – 1) (s17)
upper bound check: (index – 1) (s17) =
headSegmentLength，则不对上边界检查提升。否则进行边界检查提升。看这样一个例子：
这里index在循环中是不变的且满足Bound Check Hoist条件，Globopt后的部分dump如下：
条件4：index relative bound is invariant in loop
index relative bound is invariant in
loop即是指index的相对边界在循环中是不变的。那么什么是索引的相对边界呢？看这样一个例子：
这里索引i的相对边界就是[start, end)，其中相对下界relativeLowerBounds = start,
offset=0；相对上界relativeUpperBounds = end, offset=-1。对于相对边界在loop中不变的情况，可以Bound
Check Hoist，并使用相对边界进行边界检查。判断相对边界在loop中是否不变，主要通过在landing
pad中查找是否有和相对边界相同的ValueNumber确定：
Globopt后的部分dump如下：
条件5：index is induction variable &&
indexBounds->WasConstantUpperBoundEstablishedExplicitly =true && index has
constant bound
index is induction variable &&
indexBounds->WasConstantUpperBoundEstablishedExplicitly = true && index has
constant bound 是指数组索引为归纳变量且数组索引明确定义且数组索引有常量边界的情况。
归纳变量是指循环中的自变量，循环内一个整型变量只加减常数则可认为该变量为归纳变量。归纳变量由loop prepass阶段确定：
常量边界与相对边界类似，都是在profile阶段确定的整型变量的边界，一般来说一个整型变量默认的常量边界是：
[-0x80000000, 0x7fffffff]。根据Bound Check
Hoist流程，如果条件1，2，3，4均不满足，数组索引是归纳变量且indexBounds->WasConstantUpperBoundEstablishedExplicitly=
true且索引有常量边界，则可以通过归纳变量（索引）+常量边界（索引）的方式进行Bound Check Hoist。看这样一个例子：
这里索引i为归纳变量，i有常量边界[3, 5)且无相对边界。注意到i.constantLowerBound = 3 ≥
0，因此eliminatedLowerBoundCheck = true，下界检查被消除，只需要做上界检查，对应的代码如下：
Globopt后的部分dump如下：
条件6：induction variable(index) + loopCount
induction variable的概念在条件5中已经介绍过了。loopCount顾名思义就是循环次数，通过以下流程确认：
  1. MergePredBlocksValueMaps
在merge前向基本块信息的时候，如果当前基本块是loop
header的后继基本块，就调用DetermineLoopCount决定是否生成loopCount：
简单地说，当归纳变量具有有限范围的常量边界时，在MergePredBlocksValueMaps时就生成loopCount。为了后面计算归纳变量的上界方便，Chakra计算loopCount-1即loopCountMinusOne，具体计算公式：
loopCountMinusOne = (left – right + offset)/ minMagnitudeChange
其中：left是归纳变量的相对上界；right是归纳变量的相对下界；offset是常量合并(leftOffset-rightOffset)
后的结果，minMagnitudeChange = inductionVariable.ChangeBounds().LowerBound()。
当归纳变量具有有限范围的常量边界且没有相对边界时，left = right =
NULL，loopCountMinusOne唯一确定为loopCountMinusOneConstantValue = offset /
minMagnitudeChange。否则不生成loopCount，只保留loopCount相关信息（leftSym, rightSym, offset,
minMagnitudeChange）。
  2. Bound Check Elimination
在Bound Check Hoist阶段，如果条件1，2，3，4，5均不满足，则考虑采用induction variable(index) +
loopCount的方式确认Bound Check是否可以Hoist。
如果loopCount在MergePredBlocksValueMaps已经确认，则直接使用loopCount；否则在Bound Check