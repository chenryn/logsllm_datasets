### Confirmation for Premium SMS

The system prompts the user to confirm sending a premium SMS, as it incurs monetary charges. Enforcing the `SEND_RESPOND_VIA_MESSAGE` permission within the context of a broadcast receiver is ineffective, as it implies checking whether the SMS service itself holds the permission.

### SmsStorageMonitor and SMS Receipt DoS

The `SmsStorageMonitor` tracks available SMS storage space by listening to the protected broadcasts `ACTION_DEVICE_STORAGE_FULL` and `ACTION_DEVICE_STORAGE_NOT_FULL`. If the `ACTION_DEVICE_STORAGE_FULL` broadcast is received, the monitor sets the `mStorageAvailable` field to `false`, otherwise, it sets it to `true`. Upon receiving a new SMS from the Radio Interface Layer (RIL), the `InboundSMSHandler` consults this field to check if there is enough memory to store the incoming SMS and subsequently dispatches it to the SMS app. Our analysis reveals that Samsung and HTC added non-protected broadcasts to update the `mStorageAvailable` field, allowing non-system apps to exploit these broadcasts to prevent users from receiving SMS messages.

### DevicePolicyManager.Reboot() on Sony Devices

On Sony Xperia XA, the `DevicePolicyManager.Reboot()` API requires the `com.sonymobile.permission.ENTERPRISE_API` and a user privilege check (`UserId = 0`). The API then invokes the `reboot()` method with the `PowerManagerService` after escalating to system privilege. This API is vulnerable, as a calling app can meet the normal permission requirement and the `userId = 0` to trigger a system shutdown. In contrast, on Sony Xperia XZ, the same custom API is well-protected. The `reboot()` method enforces a conjoint UID requirement at the end of the execution, making it impossible for a calling app to exploit the normal permission requirement alone to trigger a reboot.

### Path-Sensitive Analysis and Normalization

Although our path-sensitive analysis and normalization primarily aim to suppress false positives, this specific case demonstrates their effectiveness in discovering important inconsistencies that would otherwise be missed. For example, Kratos would fail to detect this inconsistency, as the union of access control checks would appear the same for both instances.

### Eavesdropping Screen Taps on LG G4

Our cross-image analysis revealed that LG G4 (Android 6.0)’s `WindowManagerService` exposes a sensitive API, which is internal in other images (e.g., Nexus 6.0), without any security measures. This exposed API allows retrieving an `InputChannel` instance of a given input device, enabling the monitoring of screen tap coordinates received by the window manager. Since the API does not enforce any status checks for the calling app, we were able to invoke it in a background service and successfully eavesdrop on the user’s input taps (e.g., soft key strokes to infer typed text).

### Injecting Input Events on LG G4

Similarly, AceDroid revealed that LG G4 further exposes another critical API, which is private in other images. This API allows registering an `InputFilter` in the custom LG `WindowManagerService` without any security checks. The vulnerable API can be exploited to intercept all screen tap events, and the `InputFilter`'s callback method allows injecting new input events. An attacker can leverage this exposed API to perform critical operations, such as inferring the user’s password in a banking app or triggering a money transfer order.

### Related Work

#### Security Risks in Android Customization

Vendor customizations have been shown to introduce security issues. ADDICTED [37] finds under-protected Linux drivers on customized ROMs by comparing them with AOSP images. Harehunter [7] reveals the Hanging Attributes References vulnerability caused by under-regulated Android customization. Another study analyzes pre-installed apps and reports known problems such as over-privileged apps and permission re-delegation [15], [14]. Gallo et al. [16] analyzed five different custom devices and concluded that serious security issues, such as poorer permission control, increase with the level of customization. Zhang et al. [35] analyzed ION-related vulnerabilities caused by customization across different devices.

#### Vulnerability Detection on Android

Understanding the permission model is crucial due to the high flexibility of Android's security architecture. Stowaway [14] and other tools like FlowDroid [9], DroidSafe [19], AndroidLeaks [17], Amandroid [34], and BidText [21] employ static taint analysis to trace information flow and detect privacy leaks. Other tools such as Epicc [29], Didfail [25], and IccTA [26] address specific challenges of Android's Inter-Component Communication (ICC).

### Conclusion

Given the complexity of Android's access control enforcement, inconsistencies are likely to arise when new functionalities are integrated into the AOSP code base through version updates or vendor customization. In this paper, we provide a systematic categorization of access controls employed by Android system services and propose a path-sensitive modeling and normalization technique to address specific challenges. We used our tool to detect framework security inconsistencies in 12 Android images. Through our analyses within and across images, we uncovered substantial inconsistencies, some leading to high-impact security breaches.

### Acknowledgements

We thank the anonymous reviewers for their constructive comments. This research was supported, in part, by DARPA, NSF, ONR, and Sandia National Lab. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of our sponsors.