prompts the user to conﬁrm sending the premium SMS as it
imposes monetary charges. Clearly, enforcing the permission
SEND_RESPOND_VIA_ MESSAGE inside the context of the
broadcast receiver is not effective at all, as it implies checking
whether the SMS service itself holds the permission.
that
functionalities
additional
related
through
to
discovered
SMS
broadcast
the SmsStorageMonitor keeps
SMS Receipt DoS. We
another
is
component
the
receivers.
customized
Notably,
track
of
available SMS storage space through listening to the
protected broadcasts ACTION_DEVICE_STORAGE_FULL
the
and
the
former
ﬁeld mStorageAvailable to
to
ACTION_DEVICE_STORAGE_NOT_FULL.
the monitor
If
sets
otherwise
broadcast
is
received,
false,
Fig. 7. DevicePolicyManager.Reboot() across two Sony devices
(com.sonymobile.permission.ENTERPRISE_API).
Additionally, the calling app should satisfy the user privilege
check (UserId = 0). The API then invokes the API reboot()
with the PowerManagerService after escalating to system
privilege. Clearly,
this API is vulnerable as a calling app
can simply meet the normal permission requirement (and the
userId = 0) to trigger the system shutdown. On the contrary,
AceDroid found out
the same custom API on Sony
Xperia XZ is well protected. As illustrated on the right side
of the same ﬁgure, reboot() enforces a conjoint UID
requirement at the end of the execution (which was a disjoint
requirement in Xperia XA). As a result, a calling app cannot
exploit
to trigger the
reboot as it needs to satisfy the additional UID check.
the normal permission requirement
that
Although the main strength of our path-sensitive analysis
and normalization lies in suppressing false positives,
this
speciﬁc case proves that it is also powerful for discovering
important inconsistencies that cannot otherwise be found with-
out sophisticated analysis; e.g. Kratos would fail to discover
this case as the union of the access control checks would look
exactly the same for the two instances.
Eavesdropping Screen Taps on LG. We discovered
through our cross-image analysis
that LG G4 (6.0)’s
WindowManagerService has exposed a sensitive API,
which is internal in other images (e.g., Nexus 6.0), without
taking any security measures. Speciﬁcally, the exposed API
allows retrieving an InputChannel instance of a given
input device, and thus can be leveraged to monitor screen
tap coordinates received by the window manager. Since the
API does not enforce any status check for the calling app, we
were able to invoke this API in a background service and
successfully eavesdrop on the user’s input taps coordinates
(e.g., soft key strokes to infer typed text, etc).
Injecting Input Events on LG. Similarly, AceDroid revealed
through the cross-image analysis that LG G4 further exposes
another critical API, which is private on other images. The
API allows registering an InputFilter in the custom LG’s
WindowManagerService, without any security checks.
The vulnerable API can be exploited similarly to intercept
all screen tap events. More importantly, the InputFilter’s
callback method, further allows to inject new input events.
Given the capabilities it allows, an attacker can leverage the
exposed API to write a powerful
to achieve critical
operations; e.g., inferring the user’s password in a banking
app, triggering a money transfer order, etc.
tool
13
Normal Permission CheckUID Check 2DM.reboot()iPowerManager.Reboot()User Id CheckUID Check 3UID Check 1Sony XperiaXADM.reboot()iPowerManager.Reboot()User Id CheckUID Check 1UID Check 2Normal Permission CheckUID Check 3Sony XperiaXZPScout [10] lead the way by mapping individual APIs to
the required permission. Recently, Axplorer [11] produces
improved mappings based on an accurate static analysis of
the framework. This understanding has inspired us to conduct
our normalization analysis. It has inspired other researchers
to identify vulnerabilities at apps and framework. Prominent
examples include the re-delegation problem [15], content
provider leaks [20],
issues in push-cloud messaging [27],
in the app uninstallation process [36], crypto misuse in
apps [12], [24] and others [13]. In addition, Whyper [30]
and AutoCog [31] check the inconsistency between an app’s
permissions and its description. AsDroid [22] leverages the
inconsistency between the code and GUI to detect malicious
behaviors. AAPL [28] examines inconsistent behaviors within
similar functionalities of similar apps to detect privacy leaks.
Our work is fundamentally different from all these efforts,
as we do not focus on apps nor speciﬁc services. Rather,
we aim to analyze the whole framework with regards to
the consistency of security enforcements. A closely related
work to our user-based modeling and resulting inconsistencies
is the work
[32] aiming to evaluate Android’s multi-user
framework from several aspects. The work reveals important
vulnerabilities; however, it is based on hypotheses and manual
experiments and thus cannot be applied for our purpose.
Static analysis on Android. Static analysis techniques have
been proposed to address the special characteristics of An-
droid platform. Particularly, FlowDroid [9], DroidSafe [19],
AndroidLeaks [17], Amandroid [34] and BidText [21] have
employed static taint analysis on Android apps for tracing
information ﬂow and detecting privacy leaks. Other tools
such as Epicc [29], Didfail [25] and IccTA [26] handle other
particular challenges of Android’s ICC.
IX. CONCLUSION
it
that
is evident
Given the complexity of Android access control enforce-
ment,
inconsistencies will be introduced
when new functionalities are integrated into the AOSP code
base through version updates or vendor customization. In
this paper, we provide a systematic categorization of access
controls employed by Android system services and propose
a path-sensitive modeling and a normalization technique to
address speciﬁc challenges characterizing various checks. We
employed our tool to detect framework security inconsistencies
in 12 Android images. Through our conduct analyses within
and across images, we uncovered substantial inconsistencies,
some leading to high impact security breaches.
ACKNOWLEDGEMENT
We thank the anonymous reviewers for their construc-
tive comments. This research was supported,
in part, by
DARPA under contract FA8650-15-C-7562, NSF under awards
1748764, 1409668 , and 1320444, ONR under contracts
N000141410468 and N000141712947, and Sandia National
Lab under award 1701331. Ninghui Li's work was supported
in part by the United States National Science Foundation
under Grant No. 1314688, and the United States ARO grant
W911NF-16-1-0127. Any opinions, ﬁndings, and conclusions
in this paper are those of the authors only and do not
necessarily reﬂect the views of our sponsors.
14
Fig. 8. Sending SMS Paths
true. Upon receiving a new SMS from the RIL,
the
InboundSMSHandler consults
this ﬁeld to check if
there is enough memory to store the incoming SMS and
subsequently dispatches it
to the SMS app. Our analysis
reveals that Samsung and HTC added two non-protected
broadcasts updating the ﬁeld mStorageAvailable in a
similar manner. Non-system apps can exploit these broadcasts
to stop users from receiving SMS messages.
the
Quietly.
Bluetooth
The
bluetooth
Enabling
Bluetooth
ManagerService saves
across
state
boot-ups in the Settings.Global provider. Our analysis
reveals that updating the bluetooth entry in the provider can
be reached through different paths. The API disable sets
the state to Off after verifying that the calling app is either
SYSTEM, or the user is in the background and the app holds
BLUETOOTH_ADMIN permission. LG and Samsung add other
paths updating the state without user status or app privilege
checks. Consequently, an app belonging to a non-active user
can alter the bluetooth settings without any permissions.
VIII. RELATED WORK
Security risks in Android customization. The vendor cus-
tomizations have been proven to be problematic in prior
studies. ADDICTED [37] ﬁnds under-protected Linux drivers
on customized ROMs by comparing them with their coun-
terparts on AOSP images. Harehunter [7] reveals the Hang-
ing Attributes References vulnerability caused by the under-
regulated Android customization. The Hare vulnerability hap-
pens when an attribute is used on a device but the party
deﬁning it has been removed. A malicious app can then ﬁll
the gap to acquire critical capabilities, by simply disguising
as the owner of the attribute. Another prominent research
work analyzes pre-installed apps and reports the presence of
known problems such as over-privileged apps, permission re-
delegation [15], [14]. Gallo et al [16] analyzed ﬁve different
custom devices and concluded that serious security issues
such as poorer permission control grow sharply with the level
of customization. More recently, Zhang et al. analyzed ION
related vulnerabilities caused by the customization it undergoes
through different devices [35].
Vulnerability detection on Android. The high ﬂexibility
of Android’s security architecture demands a complete un-
derstanding of the permission model. Stowaway [14] and
sendText(..text..)onReceive(…)Action = “GCF_COMMAND”text = intent.getString(“..”); sendText(..text)sendSMS(..text)permissionSEND_SMSUserRestrictionDISALLOW_SMSPremium Number?SEND_RESPONSE_VIA_MESSAGE permission SEND_RESPONSE_VIA_MESSAGEpermissionCalling Identity is System in this case. So Permission check Will succeed SMS ManagerSMS Dispatcher3rd Party AppREFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
dex
format,”
Android’s
“Android revolution mobile device technologies,” http://android-
revolution-hd.blogspot.com/p/android-revolution-hd-mirror-site-
var.html, last Accessed: May 13, 2017.
“Baksmali:
disassembler
for
https://code.google.com/p/smali.
“Samsung updates: Latest news and ﬁrmware for your samsung de-
vices!” http://samsung-updates.com/, accessed: 05/02/2017.
“sdat2img: Convert sparse android data image (.dat) into ﬁlesystem ext4
image (.img),” https://github.com/xpirt/sdat2img.
“Smali:
for
https://github.com/JesusFreke/smali.
“70
http://expandedramblings.com/index.php/android-statistics/, 2017.
facts(april
Android’s
assembler
amazing
Android
statistics
and
dex
format,”
a
an
2017),”
[7] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou,
W. Du, and M. Grace, “Hare hunting in the wild android: A study on
the threat of hanging attribute references,” in Proceedings of the 22Nd
ACM SIGSAC Conference on Computer and Communications Security,
ser. CCS ’15. New York, NY, USA: ACM, 2015.
[8] Y. Aafer, X. Zhang, and W. Du, “Harvesting inconsistent security
conﬁgurations in custom android roms via differential analysis,” in
Proceedings of the 25th USENIX Conference on Security, ser. SEC’16,
2016.
[9] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for android
apps,” in Proceedings of
the 35th ACM SIGPLAN Conference on
Programming Language Design and Implementation, ser. PLDI ’14,
New York, NY, USA, 2014.
[10] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “Pscout: Analyzing
the android permission speciﬁcation,” in Proceedings of the 2012 ACM
Conference on Computer and Communications Security, ser. CCS ’12.
New York, NY, USA: ACM, 2012, pp. 217–228.
[11] M. Backes, S. Bugiel, E. Derr, P. McDaniel, D. Octeau, and S. Weisger-
ber, “On demystifying the android application framework: Re-visiting
android permission speciﬁcation analysis,” in 25th USENIX Security
Symposium (USENIX Security 16). Austin, TX: USENIX Association,
2016.
[12] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An empirical
study of cryptographic misuse in android applications,” in Proceedings
of the 2013 ACM SIGSAC conference on Computer & communications
security. ACM, 2013.
[13] S. Fahl, M. Harbach, M. Oltrogge, T. Muders, and M. Smith, Hey,
You, Get Off of My Clipboard. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2013, pp. 144–161.
[14] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
permissions demystiﬁed,” in Proceedings of the 18th ACM conference
on Computer and communications security, ser. CCS ’11. New York,
NY, USA: ACM, 2011.
[15] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin, “Permis-
sion re-delegation: Attacks and defenses,” in Proceedings of the 20th
USENIX Security Symposium, 2011.
[16] R. Gallo, P. Hongo, R. Dahab, L. C. Navarro, H. Kawakami, K. Galv˜ao,
G. Junqueira, and L. Ribeiro, “Security and system architecture: Com-
parison of android customizations,” in Proceedings of the 8th ACM
Conference on Security & Privacy in Wireless and Mobile Networks,
ser. WiSec ’15. New York, NY, USA: ACM, 2015.
[17] C. Gibler, J. Crussell, J. Erickson, and H. Chen, AndroidLeaks: auto-
matically detecting potential privacy leaks in android applications on
a large scale. Springer, 2012.
[18] Google, “ART compiler,” https://source.android.com/devices/tech/dalvik/,
2017.
[19] M. I. Gordon, D. Kim, J. Perkins, L. Gilhamy, N. Nguyenz, and M. Ri-
nard, “Information-ﬂow analysis of Android applications in DroidSafe,”
in NDSS, 2015.
[20] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic detection
of capability leaks in stock Android smartphones,” in Proceedings of
the 19th Network and Distributed System Security Symposium (NDSS),
2012.
15
[21]
[22]
[23]
J. Huang, X. Zhang, and L. Tan, “Detecting sensitive data disclosure via
bi-directional text correlation analysis,” in Proceedings of the 2016 24th
ACM SIGSOFT International Symposium on Foundations of Software
Engineering, ser. FSE 2016. New York, NY, USA: ACM, 2016.
J. Huang, X. Zhang, L. Tan, P. Wang, and B. Liang, “Asdroid: Detecting
stealthy behaviors in android applications by user interface and program
behavior contradiction,” in Proceedings of the 36th International Con-
ference on Software Engineering, ser. ICSE 2014. New York, NY,
USA: ACM, 2014.
IBM,
“WALA:
http://wala.sourceforge.net, 2017.
T.J. Watson
Analysis,”
Libraries
for
[24] S. H. Kim, D. Han, and D. H. Lee, “Predictability of android openssl’s
pseudo random number generator,” in Proceedings of the 2013 ACM
SIGSAC Conference on Computer and Communications Security, ser.
CCS ’13. New York, NY, USA: ACM, 2013, pp. 659–668. [Online].
Available: http://doi.acm.org/10.1145/2508859.2516706
[25] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer, “Android
the 3rd ACM
in Java
taint ﬂow analysis for app sets,” in Proceedings of
SIGPLAN International Workshop on the State of
Program Analysis. ACM, 2014.
the Art
[26] L. Li, A. Bartel, J. Klein, Y. L. Traon, S. Arzt, S. Rasthofer, E. Bodden,
D. Octeau, and P. McDaniel, “I know what leaked in your pocket:
uncovering privacy leaks on android apps with static taint analysis,”
arXiv preprint arXiv:1404.7431, 2014.
[27] T. Li, X. Zhou, L. Xing, Y. Lee, M. Naveed, X. Wang, and X. Han,
“Mayhem in the push clouds: Understanding and mitigating security
hazards in mobile push-messaging services,” in Proceedings of the 2014
ACM SIGSAC Conference on Computer and Communications Security,
ser. CCS ’14. New York, NY, USA: ACM, 2014.
[28] K. Lu, Z. Li, V. P. Kemerlis, Z. Wu, L. Lu, C. Zheng, Z. Qian, W. Lee,
and G. Jiang, “Checking more and alerting less: Detecting privacy
leakages via enhanced data-ﬂow analysis and peer voting.” in the 2015
Network and Distributed System Security Symposium (NDSS ’15), 2015.
[29] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and
Y. Le Traon, “Effective inter-component communication mapping in
android with epicc: An essential step towards holistic security analysis,”
in Proceedings of
the 22nd USENIX Conference on Security, ser.
SEC’13. Berkeley, CA, USA: USENIX Association, 2013.
[30] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie, “Whyper: Towards
automating risk assessment of mobile applications,” in Proceedings of
the 22Nd USENIX Conference on Security, ser. SEC’13, Berkeley, CA,
USA, 2013.
[31] Z. Qu, V. Rastogi, X. Zhang, Y. Chen, T. Zhu, and Z. Chen, “Autocog:
Measuring the description-to-permission ﬁdelity in android applica-
tions,” in Proceedings of
the 2014 ACM SIGSAC Conference on
Computer and Communications Security, ser. CCS ’14, 2014.
[32] P. Ratazzi, Y. Aafer, A. Ahlawat, H. Hao, Y. Wang, and W. Du, “A
systematic security evaluation of Android’s multi-user framework,” in
Mobile Security Technologies (MoST) 2014, ser. MoST’14, San Jose,
CA, USA, May 17 2014.
[33] Y. Shao, J. Ott, Q. A. Chen, Z. Qian, and Z. M. Mao, “Kratos:
Discovering inconsistent security policy enforcement in the android
framework,” in Proc. of ISOC NDSS, 2016.
[34] F. Wei, S. Roy, X. Ou, and Robby, “Amandroid: A precise and general
inter-component data ﬂow analysis framework for security vetting of
android apps,” in Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS ’14. ACM, 2014.
[35] H. Zhang, D. She, and Z. Qian, “Android ion hazard: The curse of
customizable memory management system,” in Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security,
ser. CCS ’16. ACM, 2016.
[36] X. Zhang, K. Ying, Y. Aafer, Z. Qiu, and W. Du, “Life after app
uninstallation: Are the data still alive? data residue attacks on android,”
ser. NDSS ’16.
[37] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang, “The peril of frag-
mentation: Security hazards in android device driver customizations,”
in 2014 IEEE Symposium on Security and Privacy, SP 2014, Berkeley,
CA, USA.