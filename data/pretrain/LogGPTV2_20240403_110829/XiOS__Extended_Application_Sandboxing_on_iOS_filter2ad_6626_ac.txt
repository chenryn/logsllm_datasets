For the invocation of public APIs, the (optional) developer-
deﬁned policies are consulted. The invocation of private
APIs is prevented by the design of our reference monitor as
it hides the crucial runtime addresses of public APIs and
dynamic loader functions. However, the challenge is to still
preserve the performance beneﬁts of lazy binding. We tackle
this as follows: when an external function is called for the
ﬁrst time, our reference monitor asks the dynamic loader to
resolve the runtime address, and stores its value for later
invocations in the shadow table.
4.4 Security Considerations
As mentioned in Section 4.1, we need to ensure the in-
tegrity of XiOS and prevent the untrusted application from
reading the shadow table (S1 and S2). This is challenging
as XiOS resides in the application’s address space.
As explained above, the shadow table contains runtime
addresses of public APIs and the dynamic loader functions.
If an adversary can access these addresses then the attacks
described in Section 2.2 and 3 can be launched. Ideally, the
XiOS reference monitor should be executed in a separate
process. However, due to the closed iOS, we can only im-
plant it into the application itself to avoid a jailbreak (R4).
To only allow the reference monitor to access the shadow
table, we need to enforce software fault isolation (SFI) [34],
i.e., basically dividing an application in trusted and un-
trusted code parts. Since realizing SFI is cumbersome [40],
we opted for a pragmatic SFI solution for our proof-of-concept
implementation: Whenever the (untrusted) main applica-
tion code is executing, XiOS marks all memory pages al-
located for the shadow table as non-readable. In contrast,
when the control is transferred to the reference monitor,
XiOS changes the access rights of the pages back to read-
able. We demonstrate in Section 6 that modifying the access
rights of the memory pages performs eﬃciently in XiOS. Al-
though we fully support multithreading, an adversary can
potentially trigger a policy validation, and force the iOS
scheduler to switch to another thread while the shadow ta-
ble is readable. We have not addressed this issue in our
current proof-of-concept implementation, but currently we
are working on ensuring that no other program thread is
allowed to execute while the shadow table is set to readable.
As XiOS invokes memory management functions to pre-
vent the main application from accessing the shadow table,
we need to prevent the main application to exploit system
calls to get access to the shadow table. Although it might
seem that applications become limited by not allowing them
to directly invoke system calls, this is not the case for iOS.
Note that applications can still indirectly use system calls
through external API functions that wrap their function-
ality and are mediated by our reference monitor. We pro-
hibit all applications to directly invoke system calls using
an in-house developed script that identiﬁes invocations of
system calls. Moreover, we have analyzed a large number
of popular iOS applications (e.g., Facebook, Google Maps,
YouTube, Angry Birds, Skype) and noticed that none uses
directly system calls, hence, XiOS can be applied to them.
We also need to ensure that at application-start XiOS
takes over the control ﬁrst. Otherwise, an application could
access the non-lazy symbol section to retrieve critical run-
time addresses. Hence, we dispatch the entry point of an
application such that XiOS is always executed ﬁrst to set-
up the shadow table and zeroing out the original lazy and
non-lazy symbol sections.
XiOS prevents attacks that attempt to jump over policy
validation code. Since we instrument all stubs (see Figure 4),
we ensure that policy validation always starts from its origi-
nal entry point. Note that stub code cannot be modiﬁed by
an adversary as the code is mapped as non-writable. A last
chance for the adversary is to exploit an indirect jump, call
or return to redirect the control-ﬂow to the place after the
policy check. These attacks can be prevented by control-
ﬂow integrity (CFI) for iOS [15], or by computing a secret
value at the beginning of the policy check and checking the
secret value at return of XiOS (see for instance checkpoint
handling in [27]). We leave this as future work to further
extend and improve XiOS.
4.5 XiOS Deployment
XiOS can be mainly deployed as an oﬀ-line remote hard-
ening service in two scenarios. Primarily, it can be deployed
by Apple or an enterprise before a new app is uploaded to
the application store. This provides protection against ma-
licious apps such as the one described in [19, 35])3. Alter-
natively, it can be deployed by (benign) developers that aim
at hardening their apps from being remotely exploited and
enforcing access control rules on public APIs.
For the former scenario, an enterprise can integrate XiOS
into its Mobile Device Management infrastructure. Apple
actively supports enterprise-speciﬁc app stores where em-
ployees can run applications that only need to be signed by
the developer and the enterprise [5]. In this case, the appli-
cations are instrumented by XiOS, signed by the enterprise’s
administration, and the employee can download and install
the hardened application over a custom enterprise applica-
tion store.
The latter scenario allows benign developers to deploy
XiOS to enforce ﬁne-grained access control rules on public
APIs. This provides better security than directly integrating
access control rules into an app’s source code, because an ad-
versary could bypass these checks by jumping over the policy
validation instructions. We prevent such attacks by enforc-
ing every external function call to be dispatched over our
instrumented code stubs. We are also currently working on
an XiOS extension where such policies can be downloaded
from and deﬁned on a remote server.
5.
IMPLEMENTATION
In this section we detail on our current implementation of
XiOS. Considering that our hardening process works directly
on the application’s binary executable, and that the Mach-O
ﬁle format is used by all iOS applications regardless of the
operating system version, our implementation is applicable
to any existing iOS app.
The ﬁrst step of the hardening process is to search for
direct invocations of system calls. To do so, we use binary
disassembly tools (speciﬁcally IDAPro) to identify the as-
sembler instruction used for system calls. On ARM, one
can directly invoke a system call by using the svc (super-
visor call) instruction3. In contrast to the x86 architecture,
ARM instructions are aligned and any unaligned memory ac-
cess generates a fault exception. Hence, an adversary must
explicitly insert the svc instruction. We search for these
instructions and raise an alarm if an app is using such an
instruction.
In the remainder of this section we describe how calls to
external functions are dispatched by XiOS and present the
implementation of our reference monitor.
5.1 Dispatching External Function Calls
As already mentioned in Section 4.3, we instrument the
stub code of an application to redirect execution to our ref-
erence monitor. Originally, each entry i in the stub code
section consists of a load instruction that loads the address
placed at entry i in the lazy symbol section into the program
counter pc. Eﬀectively, this instruction realizes an indirect
jump where the target address is taken from memory (i.e.,
from the lazy symbol section). Recall that this requires the
dynamic loader to relocate the runtime addresses of exter-
nal functions in the lazy symbol section section either at
load-time or on-demand at runtime, c.f. Section 2.
In our implementation, we replace the pc-load instruction
in the stub code with a branch instruction that targets our
reference monitor. Since both instructions have the same
size no realignment of the binary is required. Speciﬁcally,
we overwrite the original ldr (load register) instruction with
a b (branch) as follows:
ldr pc,[lazy_sym_i] -> b reference_monitor
5.2 Reference Monitor
The reference monitor achieves two important goals: (1) re-
places the iOS dynamic loader and oﬀers a mechanism for
dynamically searching the addresses of external functions
while protecting them from being leaked to the main appli-
cation, and (2) enforce developer-based policies.
The pseudo code of the reference monitor is shown in Al-
gorithm 1. First, we determine the name and parameters
of the hooked functions (lines 1-2). Second, based on the
enforcement rules deﬁned in the hardening process, we de-
termine if the call to the external function is allowed or
blocked (line 3). If the access to the external function is not
granted, the program exits and, thus, blocks any information
leakage. Third, if invocation is allowed and after marking
3Previously denoted as swi (software interrupt) instruction.
the shadow table as readable and writable (line 5), the refer-
ence monitor veriﬁes if a previous call to the same function
has been made (line 6). If so, the address of the function can
be retrieved from the shadow table (line 7) and the control-
ﬂow can be transferred to the external function (line 12). In
case the function is called for the ﬁrst time, we make use
of the standard iOS dynamic loader to resolve the runtime
address of the external function (line 9) and store it into the
shadow table for future invocations (line 10). Finally, the
reference monitor marks the shadow table as non-readable
and non-writable (line 13).
unprotect(shadow symbol table);
if shadow symbol table[f nct name] not 0 then
address = shadow symbol table[f nct name];
else
Algorithm 1 Reference monitor - pseudo-code
1: params[] = read params f rom registers();
2: f nct name = decode f unction name();
3: execution = apply pre policies(f nct name, params[]);
4: if (execution is granted) then
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15: end if
end if
protect(shadow symbol table)
execute f unction at(address);
apply post policies(f nct name, params[]);
address = bind(f nct name);
shadow symbol table[f nct name] = address
One technical challenge that our reference monitor needs
to tackle concerns the resolving of a function’s name at
runtime. This is required to accurately enforce policies at
function-level. To address this challenge, we exploit the fact
how functions are called in ARM-compiled binaries. In gen-
eral, a function can be called by means of a bl (branch with
link) or a blx (branch with link and exchange) instruction.
Both instructions have in common that they store the re-
turn address (which is simply the address following the bl
or blx instruction) into ARM’s dedicated link register lr.
Hence, when an application attempts to invoke an exter-
nal function, it actually uses a blx instruction targeting the
corresponding entry i in the code stub section:
1. blx code_stub_i
Since we instrumented the code stub section (i.e., by re-
placing pc-loads with branch instructions to our reference
monitor), the reference monitor will be invoked next:
2. b reference_monitor
Next, we let our reference monitor read the value of lr as
it contains the return address. This allows us to dynamically
calculate the address from where our reference monitor has
been invoked. As we now know from where inside the main
application the reference monitor has been called, we can dy-
namically compute the target address of blx code_stub_i.
Speciﬁcally, we decode the blx instruction on-the-ﬂy to de-
termine the targeted entry i in the code stub section. Once
we know i, we are able to resolve the function name from a
pre-computed table stored within the reference monitor:
3. decode_function_name(i)
This table is generated during static analysis of the binary
and contains a list with the names of all external functions
used by the iOS application. In addition, the equivalent dy-
namic loader code to resolve a function’s name is integrated
into our reference monitor. We have implemented the refer-
ence monitor using ARM assembly instructions.
5.3 Shadow Table
Recall that within a normal executable the addresses of
lazy-resolved functions are stored in the lazy symbol sec-
tion. Our approach for protecting lazy-resolved functions’
addresses is based on the following three steps: (1) the en-
tries from the lazy symbol section are stored into the shadow
table, (2) we zeroise the entries in the lazy symbol section,
and (3) we protect the shadow table from being accessed
outside the reference monitor. Note that we need to main-
tain a separate table due to limitations of existing memory
management capabilities, i.e., memory operations such as
changing access rights can only be done at page level. Hence,
we cannot apply such actions directly to sections from the
data segment of an iOS application without aﬀecting adja-
cent data.
The entries in the non-lazy symbol section are populated
by the dynamic loader before the program starts executing.
In order to prevent attackers from reading these values at
the beginning of program execution, we add a small startup
code that we refer to as pre-main which setups the reference
monitor and the shadow table, and zeroise the original lazy
and non-lazy symbol section. To this end, we overwrite the
LC_MAIN command in the iOS Mach-O header with the start
address of pre-main. Hence, pre-main is the code which is
executed ﬁrst when an application is launched. For protect-
ing the memory region of our shadow table, we invoke the
well-known mprotect() system call, which allows us to mark
the shadow table as readable when the reference monitor
is executed, and as non-readable when program control is
passed back to the application.
An adversary could try bypassing the mprotect-based shadow
table protection mechanism through accessible memory man-
agement functions. However, XiOS checks the arguments
(if they target the shadow table) and disallows these call to
prevent leakage of the shadow table.
Note that our binary rewriting does not impact the main
code section of the application. Thus our mechanism has no
impact on the internal ﬂow and performance of the applica-
tion, and avoids error-prone binary rewriting.