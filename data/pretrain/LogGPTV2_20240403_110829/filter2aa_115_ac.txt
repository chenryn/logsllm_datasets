# Branch History Injection (BHI) and Spectre-BHB Vulnerabilities

## Overview
This document provides a detailed explanation of the Branch History Injection (BHI) and Spectre-BHB vulnerabilities, including their exploitation, mitigations, and affected processors.

## BHI Capabilities
### Context Definition
- **Latest 67 branches** define the context.
- **Control 8 branches** for exploitation.
- **Exploitation Plan**:
  - **Step 1**: Kernel space `trigger_leak_gadget()`
  - **Step 2**: User space `leak_gadget()`

### Exploitation Steps
1. **Trigger Leak Gadget**:
   - **Kernel Space**: `trigger_leak_gadget()`
   - **User Space**: `leak_gadget()`
   - **Tag**: 1337
   - **Target**: `kernel` -> `leak_gadget`

2. **Syscall Handling**:
   - **Function Call**: `f_39ca7e94()`
     - Calls: `f_26a2be2()`
     - Syscall: `getpid`
   - **BTB**:
     - User space
     - Kernel space
   - **Syscall Table**: `sys_call_table[NR_getpid](regs)` -> ???

3. **Branch Prediction Unit (BPU)**:
   - **Tag**: 2B04
   - **Target**: `kernel` -> `sys_getpid`

4. **Predict Leak Gadget**:
   - **Function Call**: `f_d2550282()`
     - Calls: `f_6c6d0c06()`
     - Syscall: `getpid`
   - **Tag**: 5F33
   - **Target**: `kernel` -> `sys_getpid`

5. **Victim Branch**:
   - **Syscall Handler**: Good victim
     - Easily triggered with any syscall
     - RDI points to user-space saved registers

6. **Leak Gadget**:
   - **Find in Kernel Code**
   - **JIT with Unprivileged eBPF**: Use the JIT engine in the Linux kernel

### Transient Type Confusion
- **Architectural**:
  ```c
  x = skb->sk->mark
  fr_buf[(x & 0xff) << 12]
  ```
- **Speculative**:
  ```c
  x = *pt_regs.r12
  fr_buf[(x & 0xff) << 12]
  ```
- **Bypasses Spectre Mitigations**

### Covert Channel
- **eBPF Timer**: Nano-second precise timer for FLUSH+RELOAD covert channel

## Live Demo
- **Demonstration of the exploit**

## Vendor Response and Mitigations
### Affected Processors
- **Intel**:
  - **BHI (CVE-2022-0001)**
    - Every CPU since 10th generation included
- **Arm**:
  - **Spectre-BHB (CVE-2022-23960)**
    - Cortex-{R7, R8}
    - Cortex-{A57, A65, A72, A73, A75, A76, A77, A78, A710}
    - Neoverse-{E1, N1, V1, N2}
    - Cortex-{X1, X2}

### Mitigations
- **Intel**:
  - **Disable unprivileged eBPF and keep eIBRS enabled**
  - **Additional Hardening Options**:
    - [SW] Retpoline / Software BHB-clearing sequence
    - [HW] Future Processors may mitigate BHI in Hardware
- **Arm**:
  - [SW] BHB-clearing sequence / New clearbhb instruction / Trusted firmware workaround 3
  - [HW] CSV2.3 / Exception Clears Branch History Buffer
- **AMD**:
  - Not affected

## Conclusion
- **Spectre’s attack surface is too wide to define**
- **Disabling unprivileged eBPF is another stopgap defense**
- **Speculative execution attacks are becoming harder and harder 👍**

## Contact
- @b4rbito
- @pit_frg
- @nSinusR
- @vu5ec

## References
- [vusec.net/projects/bhi-spectre-bhb](https://vusec.net/projects/bhi-spectre-bhb)