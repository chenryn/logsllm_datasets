python中的列表是可迭代的，这意味着当你运行它时，列表可以提供连续的元素（请参见第198页）。这很有用，因为通常，当我们使用列表时，我们会查看它们以找到某个值，逐个打印出值，或者从一个列表中获取值并将其放入另一个列表中。我们可以通过调用列表的名称然后接方括号和我们想要获取元素的索引来访问和打印该元素。
所以，让我们想象我们需要显示列表17­2中列表HackersAriseList中的第四个元素。
要测试这个，请在脚本secondpythonscript.py底部添加以下行，以打印HackersAriseList索引3处的元素：
­­snip­­
print (HackersAriseStringVariable)
print (HackersAriseIntegerVariable)
print (HackersAriseFloatingPointVariable)
print (HackersAriseList[3])
当我们再次运行这个脚本时，我们可以看到新的print语句在其他输出下打印了 4：
kali \>./secondpythonscript.py
Hackers­Arise Is the Best Place to Learn Hacking 12
3.1415
4
#### *模块*
模块是保存到单独文件中的一段代码，因此你可以在程序中根据需要多次使用它，而无需再次输入。如果你想要使用模块或模块中的任何代码，你需要import
它。如前所述，使用标准和第三方模块是使Python对黑客如此强大的关键功能之一。如果要使用之前安装的nmap模块，我们将在脚本中添加以下行：
import nmap
在本章后面，我们将使用两个非常有用的模块：socket和ftplib。
### 面向对象编程（*OOP*）
在深入研究Python之前，可能需要花几分钟时间来讨论面向对象编程的概念（OOP）。Python与当今大多数编程语言（C++、Java和Ruby）一样，遵循OOP模型。
图
17­2展示了OOP背后的基本概念：编程语言的主要工具是对象，它具有属性和状态形式的属性，以及由对象执行或在对象上执行的操作的方法。
![](media/4084b66ecfbd01a7de38db1280dfb2ae.jpg)
*图 17­2: 面向对象编程*
OOP编程语言背后的思想是创建与现实世界中的事物类似的对象。例如，汽车是一个具有诸如轮子、颜色、大小和发动机类型等属性的对象；它也有一些方法，例如加速和锁门，这些方法就是汽车所采取的行动。从人类的自然语言来看，对象是名词，属性是形容词，方法一般是动词。
对象是类的成员，类基本上是用于创建具有共享初始变量、属性和方法的对象的模板。例如，假设我们有一个叫car的类；我们的车（宝马）将成为car类的一员。该类还包括其他对象/汽车，如奔驰和奥迪，如图17­3所示。
![](media/3d8bbfe4ed6e81e998728cae3cba1a94.jpg)
*图 17­3: OOP 类和对象*
类也可以有子类。我们的Car类有一个BMW子类，该子类的对象可能是320i。
每个对象都有属性（品牌、型号、年份和颜色）和方法（开始、驾驶和停车），如图
17­4所示。
![](media/a92812faed6dd13528ac35ae9a98e7c0.jpg)
*图 17­4: OOP 属性和方法*
在OOP语言中，对象继承了类的特性，因此BMW320i将从car类继承启动、驱动和驻车方法。
这些OOP概念对于理解Python和其他OOP语言的工作方式至关重要，正如你将在下面的部分的脚本中看到的那样。
### *PYTHON*网络通信
在我们继续讨论更多的python概念之前，让我们先用您到目前为止学到的知识编写一些黑客脚本来处理网络连接。
#### *建立TCP 客户端*
我们将使用套接字(socket)模块在Python中创建一个网络连接。我已经提到过Python附带了一个用于执行大量任务的模块库。在这种情况下，我们将需要socket模块来创建TCP连接。让我们看看它的实际效果。
看一下名为HackersAriseSSHBannerGrab.py的文本清单17-3中的脚本（我知道，这个名字很长，但请忍受）。banner是当某人或某物连接到它时应用程序呈现的内容。它有点像发送问候语的应用程序，宣布它是什么。黑客使用一种称为*banner获取*的技术来查找关于端口上运行的应用程序或服务的重要信息。
\#! /usr/bin/python3
➊ import socket
➋ s = socket.socket()
➌ s.connect(("192.168.1.101", 22))
➍ answer = s.recv(1024)
➎ print(answer)
*清单17­3: banner­获取Python脚本*
首先，我们导入socket模块➊，以便使用它的功能和工具。这里，我们将使用socket模块中的网络工具来为我们处理通过网络连接的接口。Socket为两个计算机节点提供了相互通信的方式。通常一个节点是服务端一个是客户端。
然后我们创建了一个新的变量 s
，然后将它和socket模块中的socket类关联➋。这样，每当我们想使用socket类时，就不必引用完整的socket.socket（）语法，只需使用s变量名即可。
然后，我们使用socket模块➌中的connect（）方法来建立到特定IP和端口的网络连接。记住，方法是可用于特定对象的函数，语法为object.method（例如socket.connect）。这里，我连接到IP地址192.168.1.101，它是我网络上一台电脑的IP地址，22端口是默认的ssh端口。您可以在Linux或Kali的另一个实例上对此进行测试。大多数22端口是默认打开。
一旦你建立了联系，就可以做很多事情。这里我们使用接收方法recv
来接收来自socket的1024 bytes数据 ➍ 并且将他们储存到一个叫answer的变量里；这1024
bytes包含了banner信息。然后，我们用print（）函数将该变量的内容打印到屏幕上，以查看通过该socket传递的数据，从而允许我们监视它！在最后一行，我们关闭连接。
保存脚本到HackersAriseSSHBannerGrab.py然后使用chmod命令更改权限，这样你就可以执行它。
让我们运行这个脚本来连接到另一个Linux系统上的22号端口（你可能使用Ubuntu系统，甚至另一个Kali系统）。如果ssh在那个端口上运行，我们应该能够将banner读取到我们的answer变量中，并将它打印到屏幕上，如下所示：
kali \>./HackersAriseSSHBannerGrab.py
SSH­2.0­OpenSSH_7.3p1 Debian­1
我们刚刚创建了一个简单的banner抓取python脚本！我们可以使用这个脚本来找出在IP地址和端口上运行的应用、版本和操作系统。这给了我们攻击系统前需要的关键信息。这的本质上就是shodan.io网站对地球上几乎每个IP地址所做的，它为我们把这些信息分类和建立索引。
#### *创建TCP 监听器*
我们刚刚创建了一个TCP客户机，它可以连接到另一个TCP/IP地址和端口，然后监视正在传输的信息。socket还可以用于创建TCP监听器，以监听从外部到服务器的连接。我们接下来尝试一下。
在清单列表
17-4的Python脚本中，你将创建一个任意端口的socket，当别人连接这个socket时，收集连接者系统的关键信息。输入脚本并保存为tcp_server.py。确保使用chmod授予你自己执行权限。
\#!/usr/bin/python3 import socket
➊ TCP_IP = "192.168.181.190" TCP_PORT = 6996
BUFFER_SIZE = 100
➋ s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
➌ s.bind((TCP_IP, TCP_PORT))
➍ s.listen (1)
➎ conn,addr = s.accept()
print ('Connection address: ', addr )
while 1:
data=conn.recv(BUFFER_SIZE)
if not data:break
print ("Received data: ", data)
conn.send(data) \#echo
conn.close
*清单17­4: TCP­监听Python脚本*
我们声明希望脚本使用Python解释器运行，然后像以前一样导入套接字模块，这样我们就可以使用它的功能。然后，我们定义变量来保存TCP/IP地址、要监听的端口以及要从连接系统捕获的数据的缓冲区大小的信息➊。
我们定义了socket
➋，并使用刚才创建的变量将socket绑定到IP地址和端口➌。我们告诉socket使用socket库➍中的listen()方法进行侦听。
然后，我们使用socket库的accept方法捕获连接系统的IP地址和端口，并将这些信息打印到屏幕上，以便用户可以看到它➎。注意这里的while
1:语法；我们将在本章后面更详细地讨论它，但现在只需知道它用于无限循环运行它下面缩进的代码，这意味着python会一直检查数据，直到程序停止。
最后，我们将来自连接系统的信息放入缓冲区，打印出来，然后关闭连接。
现在，转到网络上的另一台计算机，使用浏览器连接到脚本中指定的6996端口。运行tcp_server.py脚本，你应该能够连接和收集有关那个系统的关键信息，包括连接系统的IP地址和端口，如下所示：
kali \>./tcp_server.py
Connection Address: ('192.168.181.190', 45368) Received data: Get /HTTP/1.1
Host:192.168.181.190:6996
User ­Agent:Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gec
­­snip­­­
这是黑客在决定攻击前收集的关键信息。漏洞攻击（或黑客攻击）是针对特定的操作系统、应用程序，甚至是正在使用的语言，因此黑客需要在继续操作之前尽可能了解有关目标的信息。在黑客攻击之前收集信息的行为通常被称为侦察。你刚刚开发了一个工具，可以收集潜在目标的关键侦察信息，非常类似于流行的黑客工具p0f！
### 字典，循环，和控制语句
让我们继续扩展你对python的理解，然后使用所学的一切来为ftp服务器构建密码破解程序。
#### *字典*
字典以乱序对的形式保存信息，其中每对键值都包含一个键和一个关联的值。我们可以使用字典来存储事物列表，并给每个事物一个标签，这样我们就可以单独使用和引用该事物。例如，我们可以使用字典来存储用户ID及其关联名字，或者存储与特定主机关联的已知漏洞。Python中的字典在其他语言中的作用类似于关联数组。
与列表一样，字典也是可迭代的，这意味着我们可以使用一个控制结构，例如for语句遍历整个字典，将字典的每个元素赋给一个变量，直到字典结束。
除其他事情外，你可以使用此结构构建密码破解器，遍历存储在字典中的每个密码，直到某个密码生效或破解器到达字典末尾。
创建字典的语法如下：
dict = {key1:value1, key2:value2, key3:value3...}
值得注意的是，对于字典，使用大括号和逗号分隔项。你可以包括任意数量的键值对。
#### *控制语句*
控制语句允许你的代码根据某些条件做出决策。在Python中有许多方法可以控制脚本的流程。
让我们看看Python中的这些结构。
##### If语句
与许多其他编程语言（包括bash）一样，python中的if结构用于检查条件是否为真，并为每个场景运行不同的代码集。语法如下：
if conditional expression
run this code if the expression is true
if语句包含的条件可能类似于if
variable\<10，例如。如果满足条件，则表达式的结果为true，然后执行后面的代码（称为控制块）。如果语句的结果为false，则将跳过控制块中的语句，而不执行这些语句。
在python中，控制块必须缩进。这个缩进向解释器标识控制块。下一条未缩进的语句将会在控制块之外，因此不是if语句的一部分，这就是python知道如果条件不满足，跳到哪里的方法。
##### if...else
python中的if…else结构如下：
if conditional expression
\*\*\* \# run this code when the condition is met
else
\*\*\* \# run this code when the condition is not met
和前面一样，首先解释器检查if表达式中的条件。如果结果为true，解释器将执行控制块中的语句。如果条件语句的结果为false，则执行else语句后面的控制块。
例如，这里有一个用于检查用户ID的值的代码片段，如果它是0（Linux中的root用户始终是uid
0），则我们打印消息“You are the root
user.”否则，如果它是任何其他值，则我们打印消息“You are NOTthe root user.”。
if userid == 0
print ("You are the root user") else
print ("You are NOT the root user")
#### *循环*
循环是Python中另一个非常有用的结构。循环允许程序员根据值或条件多次重复代码块。两个最广泛使用的是while和for循环。
##### While循环