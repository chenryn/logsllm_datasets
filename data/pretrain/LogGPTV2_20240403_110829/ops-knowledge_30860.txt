User: In order to optimize application performance and response speed, a company needs to compress front-end resources and use CDN technology to accelerate. Please provide a front-end resource compression and CDN acceleration solution, including compression algorithm, CDN configuration, caching strategy, etc.
Assistant: 1. Front-end resource compression scheme Compression algorithm: Use the Gzip algorithm for front-end resource compression. This algorithm can compress files to 30-70% of the original file size and improve page loading speed. Specific steps: install the Gzip module on the server, and configure related parameters to allow the server to compress the file before transferring it to the browser. The corresponding code configuration is as follows: ``` # Apache Server # Enable the gzip module LoadModule deflate_module modules/mod_deflate.so # Tell the server that the client whose request contains the "Accept-Encoding" header can receive gzip compressed content <IfModule mod_deflate. c> # Specify the MIME types that can be compressed (text, application, image, etc.). Domestic CDN service providers generally do not support text/css, text/javascript and other non-image and font file types to compress AddOutputFilterByType DEFLATE text/html text/plain text/ xml application/xml application/xhtml+xml text/css text/javascript application/javascript application/x-javascript # Optimize the World Wide Web Consortium (W3C) standard Zopfli compression algorithm DeflateCompressionLevel 9 # means to compress data above 10K DeflateFilterNote Input input_info DeflateFilterNote Output output_info DeflateFilterNote Ratio ratio_info LogFormat '"%r" %{output_info}n/%{input_info}n (%{ratio_info}n%%) %{Content-Type}i" common_deflate CustomLog /www/logs/deflate.log common_deflate </IfModule> # Nginx server gzip on; gzip_types text/plain text/css text/javascript application/json application/font-woff application/x-shockwave-flash application/vnd.ms-fontobject application/xml application/xhtml+xml application/rss+xml application/javascript image/svg+xml; gzip_proxied any; gzip_vary on; gzip_disable "MSIE [1-6]\."; gzip_min_length 1k; gzip_buffers 16 8k; gzip_http_version 1.0; CDN configuration: Put static resources (pictures, CSS, JavaScript, fonts) on CDN nodes. When users in various places access static resources, the CDN node can provide the nearest node instead of our server, which can avoid slow download speed and access delay problems caused by network reasons. Specific steps: 1. Register an account with the CDN service provider, purchase the corresponding traffic and capacity packages, and obtain an ACCESS KEY. 2. Add the domain name in the backend of the CDN service provider, and upload the source site files to the CDN node. A domain name can correspond to multiple CDN nodes, and the CDN node will provide a corresponding URL address. 3. For multiple CDN nodes, we can use relative paths in the HTML code to refer to resources, and the URL address is provided by the CDN service provider. For example: Add the following tag in the HTML code to refer to the CDN link of jQuery: ``` <script src="//cdn.bootcss.com/jquery/3.1.1/jquery.min.js"></script > ``` where `//cdn.bootcss.com` is the CDN address, and `jquery/3.1.1/jquery.min.js` is the file path. The beginning of `//` indicates that the protocol is the same as the website page, which can avoid possible browser warnings under HTTPS. 3. Cache strategy Setting the cache strategy is to allow the browser to cache resources after the first request for resources and access them directly from the cache in subsequent requests, avoiding multiple requests. Specific strategies include: 1. For files that are requested many times (such as jQuery, Bootstrap, etc.), the cache time can be set to one year or forever. 2. For files that do not change frequently (such as icons, background images, etc.), you can set the cache time to a longer period (such as one month). 3. For files that change frequently (such as CSS, JavaScript, etc.), you can set the cache time to a shorter time (such as one hour), and use version control to update the visited URL link. The specific code is as follows: ``` # Apache server # Enable cache statement <IfModule mod_expires.c> ExpiresActive On # The cache time is 1 hour ExpiresByType text/css "access plus 1 hour" ExpiresByType application/javascript "access plus 1 hour" ExpiresByType application /x-javascript "access plus 1 hour" ExpiresByType text/javascript "access plus 1 hour" ExpiresByType application/font-woff "access plus 1 month" ExpiresByType application/vnd.ms-fontobject "access plus 1 month" ExpiresByType application/x -font-ttf "access plus 1 month" ExpiresByType font/opentype "access plus 1 month" ExpiresByType image/svg+xml "access plus 1 month" ExpiresByType image/gif "access plus 1 month" ExpiresByType image/jpeg "access plus us 1 month" ExpiresByType image/png "access plus 1 month" </IfModule> # Nginx server # cache time is 1 hour location ~* \.(css|js)$ { expires 1h; add_header Cache-Control "public, max-age =3600"; } # The cache time is January location ~* (ico|woff|eot|ttf|svg|gif|jpg|jpeg|png)$ { expires 30d; add_header Cache-Control "public, max-age=2592000 "; } ```