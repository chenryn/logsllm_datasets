 **Migrated issue, originally created by Anonymous**
it is a PITA to get a function index to work right using sqlalchemy.
for those that aren't familiar... postgres , oracle and a few other dbs all
allow for indexes to be created as a function
the idiomatic example is:
create unique index user_email_address_uidx on user(lower(email_address));
which allows for case-sensitive storing of the email address, and creates a
lower version to speed searching and preserve uniqueness
the planners automagically use the index on queries like:  
select * from user where lower(email_address) = %s
i'm not sure what a long-term solution would be, but in the short term... for
the two most common operations, my suggestion is to add two new operators to
sql.compiler
operators.lower_eq : lambda x, y: "lower(%s) = lower(%s)" % (x, y),
operators.upper_eq : lambda x, y: "upper(%s) = upper(%s)" % (x, y),
this should work too :
operators.lower_eq : lambda x, y: "lower(%s) = %s" % (x),
operators.upper_eq : lambda x, y: "upper(%s) = %s" % (x),