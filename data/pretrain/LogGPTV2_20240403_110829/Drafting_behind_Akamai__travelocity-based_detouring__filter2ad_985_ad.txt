networks (e.g., Kazaa [2]) is typically several orders of magnitude
larger than the total number of Akamai servers; thus, ﬁnding hosts
that share networks with Akamai edge servers should not be difﬁ-
cult. Moreover, Akamai deploys its edge servers within ISPs’ net-
works at no charge [1]. This both greatly reduces ISPs’ bandwidth
expenses and improves the performance of Akamai’s clients; like-
wise, it increases the number of potential overlay nodes that can
map their positions to Akamai servers.
As a concrete example of how Akamai-driven, one-hop source
routing works, consider two nodes in a large-scale overlay net-
work. To ﬁnd a high-quality path between them, the nodes perform
a “race” to determine which path has the smallest latency: the direct
path between the two nodes, or the one-hop path via a third node
mapped to an Akamai server.
In our scenario, the Akamai path
consists of two parts. The ﬁrst is the path from the source node
to the (frequently updated) Akamai edge server; the second part
is the path from the Akamai edge server to the destination. Thus,
we perform no mapping between overlay nodes and Akamai edge
server; rather, we simply “simulate” perfect matching. As such, the
presented results should be understood as an upper bound of the ac-
tual performance. As we showed above, by selecting low-latency
Internet paths, Akamai manages to successfully avoid network hot
spots; this can potentially improve the end-to-end (source — Aka-
mai node — destination) path performance.
Of course, the Akamai path is not always better than the direct
path. For example, consider two nodes in Brazil, a country poorly
served by Akamai. In this case, the nodes should clearly use the di-
rect path since the Akamai servers are likely to be located in the US.
Despite the potential for performance degradation, we will show
that it is possible to identify and use the better of the two types of
paths – without a large measurement overhead.
5.1 Methodology
Figure 11: Illustration of the measurement methodology.
Figure 11 depicts the experimental setup for the measurements
in this section. For each pair of nodes, one node is designated as
the source and the other as the destination. Throughout the exper-
iment, we measure the RTTs for 11 paths between the source and
the destination. The ﬁrst path is the direct one, which the source
node measures by pinging the destination and recording the corre-
sponding RTT. The other ten paths are “recommended” by Akamai,
and we measure their RTTs as follows. The source node iteratively
issues a DNS query for an Akamai customer. In Figure 11, it re-
peatedly requests a943.x.a.yimg.com, which is the CNAME
for Yahoo.3 As in the previous experiment, the source node mea-
sures and records the RTTs to the 10 current, lowest-latency Aka-
mai edge servers it witnessed. Additionally, the source node noti-
ﬁes the destination node of the IP addresses for those 10 Akamai
edge servers. This enables the destination node to measure RTTs to
the most recent edge servers that the source node has witnessed. Fi-
nally, by adding the corresponding RTTs measured from the source
and the destination to the set of Akamai servers, we estimate the
RTTs of the 10 distinct one-hop paths.
An important characteristic of the above measurement is its asym-
metry. For the same pair of nodes, the results can be quite different
depending on which node is assigned to be the source. This occurs
because the Akamai servers witnessed by the source and destina-
tion nodes are generally different, particularly for geographically
distant nodes. We explore such effects in more detail below.
experiments
3Our
Akamai
a1450.x.akamai.net.
customers,
show similar
performance
including Travelocity,
for
other
CNAME
5.2 A Case Study: Taiwan — UK
To demonstrate the potential of Akamai-driven one-hop source
routing, and to show the effects of asymmetry, we initially present
results for a pair of geographically distant PL nodes. The ﬁrst
is iis.sinica.edu.tw, located in Taiwan, and the second is
cambridge.intel-research.net, located in the UK.
Figure 12 plots the CDF functions of the RTTs for the following
paths. (i) Best path, deﬁned as the path with the lowest RTT in
each 20-second-long measurement round among the ten one-hop
paths and the direct path; (ii) Akamai’s path, deﬁned as the average
of the two one-hop paths via the two edge servers selected (and
frequently updated) by Akamai. (iii) Direct path, measured from
the source to the destination; (iv) Worst path, deﬁned as the path
with the highest RTT in each measurement round among all eleven
(ten one-hop and one direct) paths.
In Figure 12(a), the Taiwan
node is the source; in Figure 12(b), the UK node is the source.
The CDF curves from Figure 12 illustrate the gains that can be
achieved by using Akamai’s one-hop paths. For example, Aka-
mai’s path is nearly optimal in the Taiwan case, outpacing the di-
rect path by nearly 20 ms. On the other hand, while the paths cho-
sen using Akamai’s “recommendations” from the UK are subopti-
mal, they still generally beat the direct path. To shed more light
on these results, we collected statistics for the Akamai servers seen
by each node. For the Taiwan node, 80% of edge server “hits” are
in Tawain, 15% in Japan, and 5% in the US. For the UK’s node,
75% of the hits are in the UK, and 25% are in the US. The large
number of servers close (in the same country) to the source nodes
indicates that the gains over the direct path come from avoiding hot
spots close to the sources. Moreover, whenever the “middle nodes”
are not in the country of origin, they are still placed along a high
quality path to the destination, thus improving the performance.
5.3 Aggregate Results
In this section, we study a much broader range of sources and
destinations to determine the performance of Akamai-driven one-
hop source routing. For this study, we assemble a list of PL nodes
located in the US (6), Europe (3), Asia (3), and South America (2).
We then pair all nodes with each other by randomly choosing the
source and destination for each pair. Out of 91 attempted paths,
78 successfully completed 3-day-long experiments, while the rest
failed (e.g., due to a PL node rebooting).
)
s
m
(
y
c
n
e
t
a
l
p
o
h
-
e
n
o
s
u
n
m
i
t
c
e
r
i
D
 200
 150
 100
 50
 0
-50
-100
-150
-200
-250
-300
Average of two returned paths
 0
 10
 20
 30
 40
 50
 60
 70
 80
Pair id
Figure 13: Latency differences between one-hop routing and
direct-path routing.
Figure 13 illustrates the difference between the latency using a
direct path and the Akamai one-hop paths, all measured over short,
20-second-long, time scales. For each pair, we compute the best
and the worst (out of ten) one-hop Akamai paths, and the average of
the two one-hop paths returned by Akamai. A negative value means
that the corresponding direct path is better for the pair; otherwise,
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
Best Path
Akamai Path
Direct Path
Worst Path
 340
 360
 280
 300
 320
Delay (ms)
(a) Taiwan — UK
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
Best Path
Akamai Path
Direct Path
Worst Path
 340
 360
 280
 300
 320
Delay (ms)
(b) UK — Taiwan
Figure 12: CDFs for path latencies between Taiwan and the UK. In each ﬁgure, the ﬁrst country is designated as the source.
the Akamai-driven path is better. For example, the best, worst,
and Akamai-selected paths are, on average, worse than the direct
path for Pair ID 1. On the other hand, all one-hop Akamai paths
outperform the direct path for pair ID 78.
The ﬁgure indicates that in approximately 25% of scenarios (IDs
60-78), Akamai-driven paths outperform the direct path, in the same
manner as discussed for the Taiwan—UK example above. The ma-
jority of the paths are intercontinental, excluding South America,
e.g., Asia—US, US—Europe, Europe—Asia. The second group
(path IDs 30-60) is dominated by the intra-Europe or intra-US paths
for which the potential gains of detouring are smaller in general.
Finally, the third group (path IDs 0-30) consists of two subgroups:
(i) PL nodes that are close to each other and relatively far away
from Akamai servers (e.g., Korea—Japan) that have a better direct
path and (ii) all paths sourced in South America see no gain from
Akamai due to infrequent refreshing of the low-level Akamai DNS
server’s tables.
Finally, an important point is that in approximately 50% of sce-
narios, the best measured Akamai one-hop path outperforms the
direct path. While these paths are not “directly accessible” by fol-
lowing Akamai redirections (because Akamai optimizes only the
source part of the one-hop path), this indicates both that detour-
ing has a signiﬁcant potential for improving performance, and that
Akamai is successful in locating quality detouring points. These
results encouraged us to investigate to what extent we can capture
these performance improvements using a low-cost, deployable al-
gorithm.
5.4 Path Pruning
Here, we discuss practical techniques for determining which of
the following two paths to use for routing: the direct or the Akamai-
recommended path. Thus, while the measurement overhead is al-
ready signiﬁcantly reduced (to the above two paths), the question
is whether it can be reduced even further. Our goal is to prune low-
quality paths from the set of available paths. When making this
decision, there are are two issues: (i) how frequently to make a de-
cision whether to use a one-hop route or simply use the direct path
and (ii) if using one-hop routing, whether to use the ﬁrst Akamai
edge server that is returned or whether to perform a measurement
to determine the better of the two.
To determine the effectiveness of using Akamai-driven one-hop
routing, we must develop a low-cost algorithm that (i) enables nodes
to reap any performance beneﬁts of Akamai’s network measure-
ments and (ii) quickly determines when Akamai cannot improve
performance and, in this case, simply use the direct path between
the source and destination. In short, we want to ﬁnd the best path
among the direct path and Akamai-recommended paths, while min-
imizing the number of network measurements required to ﬁnd that
path. Thus, the algorithm must ﬁnd a good trade-off between net-
work performance and measurement overhead.
We evaluate four heuristics for determining routes. First, we con-
sider how frequently the algorithm should reevaluate the decision
to use the direct path or one-hop paths. This decision can be made
(i) once for the duration of the experiment (static) or (ii) it can be
reevaluated every y minutes (dynamic). In either case, if a one-hop
path is selected, we explore the performance of two alternatives:
First Akamai Server (FAS). We query the Akamai DNS for an
edge server approximately once per minute and use the ﬁrst server
returned by Akamai as our one hop.
Better of the Two Akamai Servers (BTAS). We query the Aka-
mai DNS for an edge server approximately once per minute. We
perform ping measurements to compare the quality of the paths
along the two edge servers returned by DNS and use the lower-
latency path.
For the static algorithms, we must include a bootstrap period that
enables the Akamai network to “warm up,” i.e., to determine which
servers are best for our measurement nodes. For the following ex-
periments, we use a bootstrap period of approximately 100 minutes.
To form a baseline for comparing the effectiveness of these al-
gorithms, we ﬁrst determine the maximum latency gain that can be
achieved by pruning paths. For example, if the best Akamai path
is 100 ms faster than the direct path, the maximum gain is 100 ms.
Similarly, if the worst Akamai path is 100 ms slower than the direct
path, then the maximum gain is again 100 ms. We aggregated the
maximum latency gain over all 78 pairs of nodes and used the av-
erage value as our baseline. Figure 14 depicts the performance of
our four algorithms relative to the maximum latency gain (100%)
and to the case where the direct path is always used (i.e., no routing
decisions are made).
Figure 14 shows that using the direct path alone accounts for
only about 78% of the performance gain seen in our experiments.
This further shows that Akamai is good at locating nodes along
high-quality paths. The ﬁgure also clearly shows that the dynamic
versions of FAS and BTAS can lead to signiﬁcant improvement
over the direct path. In particular, the update frequency for BTAS
and FAS can be as long as almost 2 hours before its performance
more sharply declines. Even with update intervals on the order of
a day, these algorithms outperform the direct path on average. It is
also clear that BTAS outperforms FAS over shorter timer intervals
(on the order of hours). As expected, choosing the better of the
two Akamai paths is more resilient to changes in path quality than
 100
 90
 80
h
t
a
P
t
s
e
B
f
o
t
n
e
c
r
e
P
 70