title:Systematic Signature Engineering by Re-use of Snort Signatures
author:Sebastian Schmerl and
Hartmut K&quot;onig and
Ulrich Flegel and
Michael Meier and
Ren&apos;e Rietz
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
Systematic Signature Engineering by Re-use of Snort Signatures 
Sebastian Schmerl1, Hartmut Koenig2, Ulrich Flegel3,i, Michael Meier4, René Rietz5 
1,2,5 Brandenburg University  
of Technology Cottbus 
 03013 Cottbus, Germany  
{sbs1, koenig2, rrietz5}@informatik.tu-cottbus.de 
3 SAP Research 
 Vincenz-Prießnitz-Str. 1 
76131 Karlsruhe, Germany
PI:EMAIL 
4 University of Dortmund
 44221 Dortmund,  
Germany 
 PI:EMAIL
Abstract 
Most  intrusion  detection  systems  apply  the  misuse de-
tection approach. Misuse detection compares recorded 
audit  data  with  predefined  patterns  denoted  as  signa-
tures. A signature is usually empirically engineered ba-
sed on experience and expert knowledge. This induces 
relatively long development times for novel signatures 
causing inappropriate long vulnerability windows. Me-
thods for a systematic engineering have been scarcely 
reported so far. Approaches for an automated re-use of 
design and modeling decisions of available signatures 
also do not exist. In this paper we present an approach 
for systematic engineering of signatures which is based 
on the re-use of existing signatures.  
1  Motivation 
The growing dependencies of social processes on IT 
infrastructures  as  well  as  their  increasing  complexity 
imply  a  large  potential  of  threats.  Intrusion  detection 
systems  (IDS)  are  a  fundamental  reactive  measure  to 
counter threats that could not be prevented. They provi-
de means to automatically detect occurred security vio-
lations  and  to  trigger  appropriate  countermeasures. 
IDSs  apply  two  complementary  approaches:  anomaly 
and misuse detection. Misuse detection focuses on the 
detection of attacks in audit trails described by patterns 
of  known  security  violations,  i.e.  so-called  signatures. 
Since  misuse  detection  systems  take  a  key  position  in 
productive systems we are focusing on optimizing the 
process of providing signatures for these systems. The 
effectiveness  of  misuse  detection  strongly  depends  on 
the  conciseness  and  the  timeliness  of  the  signatures 
used.  Imprecise  signatures  heavily  limit  the  detection 
capability of the IDSs and lead to false positives. The 
reasons  for  this  detection  inaccuracy  must  be  sought 
rather in the signature engineering process itself than in 
qualitative restrictions of the audit functions. In particu-
lar,  the  engineering  of  signatures  starting  from  given 
exploits often is a sore spot. The engineering of signa-
i The work of this author was funded by means of the German Federal Ministry of Economy and Technology 
under the promotional reference "01MQ07012". The author takes the responsibility for his contribution. 
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.20
DOI 10.1109/ACSAC.2008.20
13
23
tures relies mostly on expert knowledge and experience. 
Methods for systematic signature engineering have not 
been reported yet. 
In this paper we present a general method for deriv-
ing new signatures from a given set of signatures. The 
principle of the approach consists of generalizing a gi-
ven  signature  by  removing  selected  parts.  Although 
thus the detection accuracy is reduced the number of at-
tacks which can be detected is increasing. This process 
is repeated until traces of the attack under investigation 
are detected. The result of this process is a tree of ab-
stracted signatures. By assigning weights to the differ-
ent abstractions the signature engineer can select those 
signatures or fragments which are most appropriate for 
detecting the new attack. A specific starting point is va-
luable  because  it  provides  the  signature  engineer  with 
information about similar attacks and related detection 
rationale  as  well  as  design  decisions.  Ideally  the  new 
signature can be adopted from the tree by adding con-
straints to one of the abstracted signatures that already 
detect the attack. 
In the field of misuse detection two classes of attacks 
can be distinguished related to their operation sequence 
and the expense required for their detection: multi step 
attacks and single step attacks. The detection of multi 
step  attacks  requires  a  correlation  among  several  log 
entries,  therefore  multi  step  signatures  are  typically 
specified in highly expressive languages (cf. [8]). How-
ever,  today  many  IDSs,  and  especially  network  IDSs, 
are  still  geared  towards  single  step  attack  signatures, 
i.e.  they  use  signature  specification  languages  with  a 
lower expressiveness. In order to prove the feasibility of 
our approach for single step attacks we choose the sig-
nature specification language of the Snort IDS as an ex-
ample. The reason for using Snort is mainly due to its 
widespread deployment and the huge signature knowl-
edge base maintained by the user community. This pro-
vides a good basis for validating the approach and en-
sures that the results are relevant in practice and widely 
applicable.  
The paper is organized as follows. In Section 2 we 
describe the general principle of the approach and rela-
ted work. Next in Section 3, we adapt the procedure to 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
the  signature  description  language  of  Snort.  Section  4 
describes the evaluation method using an official set of 
the  Snort-VRT  Certified  Rules.  We  present  results  of 
applying the approach in two examples in Sect. 5 and 
conclude with final remarks and an overview of future 
work in Sect. 6. 
2  Deriving Signatures by Re-use 
The engineering of a signature for a novel attack can 
be divided into the following steps: (1) execution of the 
attack on a dedicated system to record its traces in an 
audit  trail.  Traces  represent  security  relevant  events 
(basic events) which are observed by sensors. (2) The 
signature engineer investigates the basic events, identi-
fies the relevant events, and (3) derives step by step the 
new signature considering the way how the attack ex-
ploits the vulnerability. An important aspect in this con-
text is the detection of patterns which allow the IDS to 
identify attack traces. (4) After specifying the signature 
its correctness and conciseness must be validated. If re-
quired the signature has to be corrected or changed.  
The  signature  engineering  process  is  time-consu-
ming, in particular for the phases (3) and (4). If know-
ledge  of  existing  signature  designs  can  be  re-used  the 
time exposure for the signature engineering will be re-
duced significantly and the quality of the new signature 
will  be  improved.  In  addition,  the  re-use  of  approved, 
i.e.  validated,  signature  fragments  will  also  consider-
ably shorten the expensive validation phase. 
The  idea  of  re-use  is  already  known  from  software 
engineering. There it is applied to reduce the time for 
software  developments  by  re-using  design  and  imple-
mentation  decisions  of  existing  software.  Only  a  few 
approaches have been published that deal with this sub-
ject in the context of signature engineering. Cheung et 
al. propose a method for simplifying the signature de-
sign by applying attack models [3]. This approach cor-
responds to the design patterns of software engineering 
[4].  It  allows  the  re-use  of  architectural  design  deci-
sions.  The  re-use  of  specified  signatures  or  signature 
fragments  is  not  supported.  Rubin  et  al.  describe  how 
mutants  can  be  generated  for  a  given  attack  [5].  Mu-
tants exploit the same vulnerabilities as the basic attack 
but  without  performing  the  same  security  relevant  ac-
tions. If a signature for an attack mutant is supposed to 
be engineered, the signature of the basic attack can be 
re-used, if available. The approach of Rubin et al. could 
be re-used for this purpose by deriving an abstracted at-
tack. The required transformations though (except sim-
ple transformations like IP fragmentation) strongly de-
pend on the specific attack. A universally valid proce-
dure for all kinds of attacks is not implementable with 
this  approach. Rubin  et  al.  further  describe the  refine-
ment of signatures based on formal languages [6]. This 
approach  may  help  the  signature  engineer  to  remove 
triggers  of  false  positives  caused  by  imprecise  signa-
tures.  The  procedure,  however,  assumes  an  almost  er-
ror-free reference signature. Larson et al. present a tool 
for  extracting  the  significant  events  of  an  attack  from 
the audit trail [7]. It executes the attack and records the 
respective audit data. Then the differences between this 
audit data and attack free audit data are determined. The 
problem  of  deriving  a  signature  from  the  differences, 
however, remains open. 
Our  approach  is  based  on  the  assumption  that  the 
signatures of related attacks look similarly. After select-
ing the relevant signatures with regard to the given new 
attack,  the  signature  engineer  can  look  for  similarities 
and adapt the selected signatures. The identification of 
relevant signatures can be accomplished by an iterative 
abstraction of existing signatures until traces of the gi-
ven attack are covered. Abstraction means a generaliza-
tion of signatures. Whether an abstracted signature de-
tects the traces of the new attack can be easily decided 
by matching the signature to the traces. Abstractions are 
accomplished by iteratively applying transformations to 
the given signatures. The abstraction procedure results 
in an abstraction tree. In order to evaluate the abstrac-
tions each transformation is weighted by a metric which 
defines a similarity measure related to the original sig-
nature. Re-usable signature fragments should be derived 
from  the  least  abstracted  signatures. The  signature  en-
gineer should try to understand the attack rationale by 
considering the original signature. In the following we 
introduce  the  transformation  process,  the  resulting  ab-
straction  trees,  and  the  applied  similarity  measures  of 
our approach in detail. 
2.1 Signature Transformations 
the  set  of 
A  signature  describes 
identifiable 
manifestations  of  an  attack. The  latter  is  characterized 
by  the  events  occurring  during  the  attack  execution. 
These events leave traces in the audit trail. When new 
signatures are engineered by re-use, signatures need to 
be  identified  that  detect  similar  attack  manifestations. 
Although the signatures may be similar, each signature 
is  specialized  to  detect  a  specific  attack.  Signature 
transformations strongly depend on the signature model 
underlying the signature specification language in use. 
To  identify  re-usable  signatures  it  is  necessary  to 
abstract from the attack-specific elements. This is done 
by iteratively removing semantic features with regard to 
the  applied  signature  specification 
language.  The 
semantic  features  (cf.  [9])  determine  the  set  of  attack 
manifestations  that  a  signature  detects.  New  signature 
abstractions can be obtained by removing constraining 
features  from  a  signature  or  by  broadening  their 
applicability. Transformations enlarge the set of attack 
manifestations  MAS 
that  can  be  detected  by  an 
1424
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
MAS that can be detected by an abstracted signature AS. 
A transformation T abstracts a signature S to AS only if 
MS ⊆ MAS  holds  for  the  related  sets  of  manifestations 
MS and MAS. 
The concrete transformations strongly depend on the 
signature modeling framework. Hence, they need to be 
determined  based  on  the  signature  specification  lan-
guage  applied.  In  order  to  perform  appropriate  trans-
formations the following three rules should be applied. 
(1)  No  two  transformations  should  be  defined  which 
produce the same abstraction. This rule prevents redun-
dant  transformations.  (2)  Transformations  should  al-
ways  be  selected  such  that  they  semantically  abstract 
the  signature  only  slightly,  i.e.  the  difference  of  the 
manifestation  sets  MAS/MS  of  the  original  signature  S 
and  the  abstracted  AS  should  be  small.  Such  transfor-
mations lead to fine-grained abstractions of signatures. 
(3) A transformation which generates an abstraction AS 
from  a  signature  S  should  preferably  fulfill  the  condi-
tion that the intersection of the associated manifestation 
sets MS and MAS is not empty.  
2.2 Signature Abstraction Tree 
The  iterative  application  of  transformations  to  a 
given signature S from the set K of existing signatures 
produces all abstracted signatures for S. There exists a 
relation between the derived signatures concerning their 
abstraction. Two signatures A and B are related, if B is 
abstracted  from  signature  A.  The  relations  between  a 
basic signature S and all of its abstractions can be repre-
sented  by  a  signature  abstraction  tree,  where  S  repre-
sents the root node. Direct children of S are those ab-
stractions  that  can  be  generated  by  applying  a  single 
transformation to S. The signature abstraction tree and 
the related abstracted signatures can be generated suc-
cessively. The tree structure determines the abstraction 
degree of S. 
An abstracted signature associated to a node of the 
abstraction  tree  matches  all  attack  manifestations  that 
are  matched  by  the  signature  associated  to  the  parent 
node, i.e. an abstraction tree defines a contained-in rela-
tion  over  all  sets  of  attack  manifestations.  Each  ab-
stracted  signature  accepts  at  least  the  manifestations 
that are accepted by S. 
Fig. 1 depicts an example abstraction tree of S. Ab-
straction AS1 is, for instance, directly generated from S 
by  transformation 1,  whilst  signature  AS7  is  derived 
from AS1 using transformation 3. The respective mani-
festation sets MS, MAS1, MAS7 must meet the condition 
MS ⊆ MAS1 ⊆ MAS7. 
The signature abstraction tree may contain identical 
nodes. Two nodes are identical if the associated signa-
tures  are  identical.  The  sub-trees  of  these  nodes  are 
equal. Therefore one of the identical nodes and its sub-
tree can be removed.  
S 
T1 
AS1 
T2 
AS2 