nore message and member failures and reduce to the unscal- 
able centralized  or the  fully  distributed approaches  when 
applied to calculating a composable global aggregate func- 
tion at each member. 
Random sampling techniques are used  in databases for 
aggregate calculation (e.g.,  salary  averages)  without scan- 
ning  all  the  input data (votes) [ IO].  These are potentially 
applicable to the global aggregation problem  [5], but these 
results are yet unpublished. 
Our  hierarchical  gossiping  solution  to  global  aggrega- 
tion  is  similar to the  philosophy  of  the  Astrolabe project 
[15].  Astrolabe  also  uses  a  hierarchy,  and  gossiping,  to 
provide scalable  management  support for distributed  sys- 
tems  and  applications.  However,  Astrolabe’s hierarchies 
are  fixed depending on  the  exact network  topology,  while 
our technique for constructing hierarchies  is  more general 
and can be modified on the fly.  Astrolabe  focuses on main- 
taining long-lived management information bases (MIBs) to 
answer queries regarding aggregate properties  at any time, 
while we focus on a one-shot evaluation  of a global  aggre- 
gate property. 
4. Fully Distributed Solution 
A  naive  solution  to  the  aggregation  problem  is  to  have 
each member send its vote to every other group member and 
calculate  the aggregate function  based  on  the  votes  it  has 
received.  While this solution  would work well in networks 
where  there is no message loss (such as synchronous net- 
works), the completeness of the calculated estimate is only 
as good as the network message loss rate for real-life  asyn- 
chronous fault-prone networks.  Moreover, as all  real  net- 
works constrain the bandwidth  per member, the time com- 
plexity of this approach varies as O ( N ) .  The message com- 
plexity is O ( N 2 ) ,  and this is not optimal. 
5. Centralized Solutions 
Another approach is to have each group member send its 
vote to a special member (or members) denoted as a leader 
(or committee of leaders), which calculates the global func- 
tion based on the votes received, and then disseminates this 
information  out to all the group members. 
This  scheme  has  an  optimal  message  complexity  of 
O ( N ) ,  but  has  a  message  implosion  problem  at  the 
leader(s). In the absence of highly available servers as lead- 
ers in  infrastructure-less ad-hoc sensor networks, a costly 
leader election protocol would  need  to  be  run.  The like- 
lihood  of  a  leader failing  and  losing  a  substantial  part  of 
the  votes  is  significant  for  large  groups since the  running 
time of the algorithm varies linearly  with group size, being 
43 5 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:46 UTC from IEEE Xplore.  Restrictions apply. 
Subtree - ** 
Subtree - O* 
Subtree - I* 
p E q  p F  [MZI 
Phase 3 
Phase 2 
subtree.  ** 
f(M1, ..., ME) 
Subtree - 0. 
f(M7,M,M&M6,M5) 
Subtree - I’ 
f(M2,M4,M1) 
I f(M7,hU,MB) 
1-  Fl 
f(M6,M5) 
f(M2,M4) 
f(M1) 
GridLtox-00 
GridLtox  -01 
GridBox-IO 
CridBox-11 
GridBox.OO 
GridBox  -01  Gridsor.10  Gridsor-11 
Figure  1.  Division  of  8  members  {MI  . . . M8)  into  4  grid 
boxes. and the Grid Box Hierarchy induced  therefrom. 
I’kJUre  2. Global aggregate function evaluation on the hierarchy 
t:xample of figure  I .  
O ( N )  because  of  the  bandwidth constraint  on  the  leader. 
Having a larger leader committee entails achieving coordi- 
nation among these leaders, and this is a non-trivial task. 
6. Hierarchical Solutions 
In  this  section,  we  explore  several  hierarchical  ap- 
proaches  to  solving  this  problem.  Hierarchical  solutions 
tend  to  have  very  good  scalability  in  terms  of  algorithm 
complexity but usually provide reduced robustness to (pro- 
cess and message delivery) failures. We first propose a tech- 
nique,  called  the  Grid Box  Hierarchy, to construct  an  ab- 
stract hierarchy for large groups.  Then, we discuss several 
ways of robustly calculating global aggregates using this hi- 
erarchy. 
6.1. A  Technique for Building  a  Hierarchy -  The 
Grid Box Hierarchy 
In  this  section,  we  present  a  technique  for building  an 
abstract  hierarchy,  called  the  Grid Box  Hierarchy,  over a 
large process group. 
The  hierarchy  is  constructed  by  first  dividing  the  N 
group members into NIK grid  boxes with  an  average of 
K members per  grid  box.  K is  a constant  integer chosen 
independent of  N ,  and well-known  at all group members. 
Each grid box is assigned a unique ( b g K N  - 1)-digit ad- 
dress in base K. So, each digit is an integer between 0 and 
( K  - 1) (inclusive of both).  Now, for all 1 5 i 5 LogKN, 
subtrees of height 7  in  the hierarchy  contain the set of grid 
boxes (actually, the members inside them) whose addresses 
match in the most significant (logK N - i) digits.  Figure  1 
shows a possible division  of N  = 8 members into 4  grid 
boxes  with  an  average  of  K  = 2  members per grid  box. 
The figure also illustrates the hierarchy induced among the 
members in these grid boxes. 
‘The global aggregate function is then calculated bottom- 
up in this hierarchy, and in lOgKN phases. In the first phase, 
each  group member Mj  (or a representative) evaluates an 
estimate  of the  function  when evaluated over the  votes  of 
all  members in  its  grid  box.  In  each  subsequent  ith (i  > 
1) phase, each member Mj (or a representative) evaluates 
the value of the aggregate function over the set of votes of 
members belonging  to  the  same height-i  subtree as Mj  - 
this is evaluated from the function evaluations for the child 
subtrees of height (i - 1) obtained from phase (i - l), and 
the  composable nature  of  the  aggregate function.  For the 
example of Figure  1, an ideal aggregate function evaluation 
wodd proceed as shown in Figure 2. 
‘Two  questions  arise:  1) what mechanism does one use 
to build  such a  hierarchy,.and  2 )  what is the  actual  proto- 
col used  to calculate the global function in the hierarchical 
manner described above. We answer the first question in the 
following paragraphs, and explore different solutions to the 
second question in the following sections. 
‘The easiest way to build the hierarchy described above is 
to use a well-known hash function H  that maps the unique 
group member identifiers randomly into the  interval  [O,  11. 
A member with  identifier Mj would  then belong to a grid 
box. with address H(n/rj) * $ (written in base-K). Further, 
notice  that  any  arbitrary  group member Mj  can  calculate 
the grid box address of any other group member Ml  (that is 
pre.sent in  its view) - this  is  simply  H ( M l )  * $. Thus, at 
each phase i of the global function calculation, member Mj 
would  know  about all the members in its view that belong 
to M j ’ s  height-i subtree in that phase. 
Such. a  construction  requires  that  the  hash  function  H 
and the group size N are well-known at all group members. 
The former  can easily  be achieved by  statically  fixing the 
hash function at all members. The global knowledge of N 
is  trivial  if  the  maximal  group membership is  fixed.  For 
a dynamically changing group membership, members need 
436 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:46 UTC from IEEE Xplore.  Restrictions apply. 
to be  periodically  informed of  changes  in  the  group size. 
However,  an  approximate estimate of  N  at  each  member 
usually  suffices, and thus these  updates  can be done rather 
infrequently. 
The above  randomized  scheme  ensures  an  average  K 
members per  grid  box,  regardless of  the  actual  composi- 
tion of the group, i.e., the hash function H  need not assume 
either a fixed group membership, or even a fixed set of pos- 
sible group members. This is a very desirable property. 
Further,  it  is  often  possible  to  have  the  grid  division 
scheme mirror the geographicalhetwork topology  location 
of  the  group members,  without  a  static  knowledge of  the 
group membership.  Mathematically, this  can  be  achieved 
by  replacing  the  random  hash  function  above  by  a  more 
“topologically  aware” function  that  maps group members 
that are nearby  in  the network  to the same grid box, while 
maintaining the average of K  members per grid box. 
Most sensors (group members) in sensor networks usu- 
ally know their exact geographical locations either by virtue 
of  having  a  fixed  physical  location  (e.g.,  sensors  on  an 
airplane wing),  or  via  GPS  (Global Positioning  System). 
In  the  Internet, IP addresses usually  reflect  the  geographi- 
calhetwork locations of group members, eg., CIDR (Class- 
less Interdomain  Routing) naming of Class C IP addresses 
by IANA allocates different subnet headers to addresses in 
Europe than  those in the Americas, and then  different sub- 
nets inside Europe depending on their location, and so on. 
A  topologically  aware hash  function  would  then  (deter- 
ministically)  map member addresses to  grid  boxes  so  that 
there are an average of K  members per  grid box, and  grid 
boxes consist of members that are topologically  proximate. 
If  members are mobile (e.g., mobile sensors) or member- 
ship  is  dynamic,  this  might  need  a  priori  knowledge  of 
the  probability  distribution  of  prospective  group members 
across  the  network  region.  Such  a  division  can  also  be 
achieved  in  network  routing  schemes  such  as  the  Land- 
mark  Hierarchy  [ 141 that  assign  hierarchical  addresses to 
machines depending on their network locations. 
Using such a topologically  aware H  would result in a re- 
duction of the load, imposed by the global aggregation pro- 
tocol (as described above), on links in a sparsely connected 
network.  This is because  the  ( O ( N ) )  messages in the  ini- 
tial phases of the protocol would be restricted to travel short 
distances  (hops) in  the network, and longer network routes 
would  be  taken  only  by  the  (much fewer) messages in  the 
latter phases. 
As an example, we can adapt the Grid Location Scheme 
described  in  [ 121 to  construct such a  topologically  aware 
hash  function  for wireless  sensor networks  or ad-hoc net- 
works.  In  [ 121, a  wireless  sensor network  is  divided into 
several closed, disjoint regions. If these  closed regions are 
tailored  to  have  an  equal  expected  number  of  members, 
they  can  be  treated  as  the  grid  boxes  in  our  scheme.  H 
GridBox  00 
GridBox  01 
Figure 3. An instance of a grid box division of a network region 
of eight wireless sensors using a topologically  aware hash function. 
This induces  the Grid Box hierarchy  shown in Figure  1, 
then simply specifies a mapping from member addresses to 
addresses of  these  closed  disjoint  regions (or grid boxes). 
For example, the region  occupied by  the eight sensors M 1 
through MS in Figure 3 can be divided into four grid boxes 
with addresses as shown, thus giving us the same Grid Box 
hierarchy as depicted in Figure 1 .  
Although H  is assumed to be well-known above, it could 
also be dynamically specified  by  a multicast  initiating  the 
aggregation  protocol.  Further  implementation  details  of 
such topologically aware or dynamic hash functions in more 
general scenarios are beyond the scope of this paper. We be- 
lieve that this is a significant area for future study. 
In the  next  few sections, we  discuss different strategies 
for using  the Grid  Box Hierarchy  described in  Section 6.1 
to calculate a composable global aggregate function. 
6.2. The Leader Election Approach 
This algorithm works by electing a single group member 
as a leader for every internal node of the tree constructed by 
the Grid Box Hierarchy.  More concretely, each member is 
initially  (before phase  1 )   a leader of  its own height 0 sub- 
tree.  In phase  i (1 < i < logKN), a leader is elected for 
each subtree of height i from the leaders of its child subtrees 
of height-(i - 1). This leader calculates the global aggregate 
function for the set of members in this subtree by obtaining 
and  then  composing the  global  function  values  calculated 
by the leaders of its height-(i - 1) child subtrees. The algo- 
rithm finally terminates in phase l o y ~ N  with the entire tree 
(thus the group) electing one leader who has the aggregate 
function estimate for the entire group, and subsequently dis- 
seminates this to the group via the tree. 
If the group membership view is consistent and complete 
at all group members, this scheme has a time complexity of 
437 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:46 UTC from IEEE Xplore.  Restrictions apply. 
O(logN), and  an  optimal  message  complexity  of  O ( N ) ,  
since K  is chosen  fixed independent  of  N .  However, this 
scheme is not fault-tolerant to failures of members, particu- 
larly leaders in latter phases. Failure of a member elected as 
the leader of a subtree of height i would result in the exclu- 
sion of the votes of an expected K z  members from the final 
global estimate.  The completeness of the algorithm is also 