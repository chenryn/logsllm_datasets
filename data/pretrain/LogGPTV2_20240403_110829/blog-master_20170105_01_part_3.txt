    -- 3 通过55P03捕获异常. 并发明显时, 这种异常会很多.  
    -- 3 select id into m_id from cnt_a where locked=false limit 1 for update nowait;    
    -- 4 以下需要关注高并发的情况下, 得到锁需要遍历的记录条数, 还有优化的空间. (结合mvcc与检索机制)  
    for a_lock,m_id in select pg_try_advisory_xact_lock(id),id from cnt_a loop   
      if a_lock then  
        -- 加锁成功  
	update cnt_a set cnt=cnt+1,pid=pg_backend_pid(),lock_time=now() where id=m_id returning cnt into new_cnt;  
        if new_cnt is null then   
          raise exception 'cnt_a.cnt is null, please init with zero.';  
        end if;  
	return null;  
      end if;  
    end loop;  
    -- 到这里说明遍历所有的cnt_a都没有加锁成功, 原因是都被锁了.  
    -- 那么随机取一条更新进行等待即可  
    select max(id),random() into max_id,rm from cnt_a;  
    update cnt_a set cnt=cnt+1,pid=pg_backend_pid(),lock_time=now() where id=(rm*m_id)::int returning cnt into new_cnt;  
    if not found or new_cnt is null then   
      raise exception 'cnt_a.id:%, cnt_a.cnt:%.', (rm*m_id)::int, new_cnt;  
    end if;  
    return null;  
  end if;  
return null;  
end;  
$function$;  
```  
创建删除触发器函数  
```  
CREATE OR REPLACE FUNCTION public.tg_delete_a()  
 RETURNS trigger  
 LANGUAGE plpgsql  
AS $function$  
declare  
  m_id int;  
  a_lock boolean;  
  rm numeric;  
  max_id int;  
  new_cnt int;  
begin  
  -- now()为stable, 同一事务结果一致.  
  select id into m_id from cnt_a where pid=pg_backend_pid() and lock_time=now() limit 1;  
  if found then   
    update cnt_a set cnt=cnt-1 where id=m_id returning cnt into new_cnt;  
    if new_cnt is null then   
      raise exception 'cnt_a.cnt is null, please init with zero.';  
    end if;  
    return null;  
  else  
    -- 1 由于read committed, 并发时可能同时抢锁1条记录. 造成不必要的等待.  
    -- 1 select id into m_id from cnt_a where locked=false limit 1 for update;    
    -- 2 使用这种方法可以减轻锁同一记录的压力,但是增加了查询开销.  
    -- 2 select id into m_id from cnt_a where locked=false order by random() limit 1 for update;    
    -- 3 通过55P03捕获异常. 并发明显时, 这种异常会很多.  
    -- 3 select id into m_id from cnt_a where locked=false limit 1 for update nowait;    
    -- 4 以下需要关注高并发的情况下, 得到锁需要遍历的记录条数, 还有优化的空间. (结合mvcc与检索机制)  
    for a_lock,m_id in select pg_try_advisory_xact_lock(id),id from cnt_a loop   
      if a_lock then  
        -- 加锁成功  
	update cnt_a set cnt=cnt-1,pid=pg_backend_pid(),lock_time=now() where id=m_id returning cnt into new_cnt;  
        if new_cnt is null then   
          raise exception 'cnt_a.cnt is null, please init with zero.';  
        end if;  
	return null;  
      end if;  
    end loop;  
    -- 到这里说明遍历所有的cnt_a都没有加锁成功, 原因是都被锁了.  
    -- 那么随机取一条更新进行等待即可  
    select max(id),random() into max_id,rm from cnt_a;  
    update cnt_a set cnt=cnt-1,pid=pg_backend_pid(),lock_time=now() where id=(rm*m_id)::int returning cnt into new_cnt;  
    if not found or new_cnt is null then   
      raise exception 'cnt_a.id:%, cnt_a.cnt:%.', (rm*m_id)::int, new_cnt;  
    end if;  
    return null;  
  end if;  
return null;  
end;  
$function$;  
```  
以下测试原始场景16个并发以及16条cnt_a记录的单事务多sql的场景, 发生了可以预料到的死锁.  
```  
postgres=# truncate a;  
TRUNCATE TABLE  
postgres=# delete from cnt_a ;  
DELETE 2002  
postgres=# insert into cnt_a(id,cnt) select generate_series(0,15),0;  
INSERT 0 16  
```  
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -r -n -f ./id.sql -h $PGDATA -p 1919 -U postgres -T 60 -c 16 -j 4 postgres  
Client 2 aborted in state 8: ERROR:  deadlock detected  
DETAIL:  Process 10738 waits for ShareLock on transaction 433211275; blocked by process 10737.  
Process 10737 waits for ShareLock on transaction 433211280; blocked by process 10738.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 3 aborted in state 8: ERROR:  deadlock detected  
DETAIL:  Process 10742 waits for ShareLock on transaction 433211275; blocked by process 10737.  
Process 10737 waits for ExclusiveLock on tuple (0,11) of relation 25592 of database 12044; blocked by process 10740.  
Process 10740 waits for ShareLock on transaction 433211281; blocked by process 10742.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 12 aborted in state 4: ERROR:  deadlock detected  
DETAIL:  Process 10732 waits for ShareLock on transaction 433211286; blocked by process 10740.  
Process 10740 waits for ShareLock on transaction 433211276; blocked by process 10736.  
Process 10736 waits for ExclusiveLock on tuple (0,12) of relation 25592 of database 12044; blocked by process 10734.  
Process 10734 waits for ShareLock on transaction 433211275; blocked by process 10737.  
Process 10737 waits for ExclusiveLock on tuple (0,11) of relation 25592 of database 12044; blocked by process 10732.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 13 aborted in state 11: ERROR:  deadlock detected  
DETAIL:  Process 10736 waits for ExclusiveLock on tuple (0,12) of relation 25592 of database 12044; blocked by process 10734.  
Process 10734 waits for ShareLock on transaction 433211275; blocked by process 10737.  
Process 10737 waits for ShareLock on transaction 433211286; blocked by process 10740.  
Process 10740 waits for ShareLock on transaction 433211276; blocked by process 10736.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 5 aborted in state 12: ERROR:  deadlock detected  
DETAIL:  Process 10737 waits for ShareLock on transaction 433211286; blocked by process 10740.  
Process 10740 waits for ShareLock on transaction 433211272; blocked by process 10731.  
Process 10731 waits for ShareLock on transaction 433211279; blocked by process 10734.  
Process 10734 waits for ShareLock on transaction 433211275; blocked by process 10737.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 1 aborted in state 10: ERROR:  deadlock detected  
DETAIL:  Process 10734 waits for ShareLock on transaction 433211287; blocked by process 10730.  
Process 10730 waits for ShareLock on transaction 433211286; blocked by process 10740.  
Process 10740 waits for ShareLock on transaction 433211272; blocked by process 10731.  
Process 10731 waits for ShareLock on transaction 433211279; blocked by process 10734.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 7 aborted in state 8: ERROR:  deadlock detected  
DETAIL:  Process 10743 waits for ShareLock on transaction 433211288; blocked by process 10744.  
Process 10744 waits for ShareLock on transaction 433211282; blocked by process 10733.  
Process 10733 waits for ExclusiveLock on tuple (0,22) of relation 25592 of database 12044; blocked by process 10730.  
Process 10730 waits for ShareLock on transaction 433211286; blocked by process 10740.  
Process 10740 waits for ShareLock on transaction 433211284; blocked by process 10743.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 14 aborted in state 12: ERROR:  deadlock detected  
DETAIL:  Process 10740 waits for ExclusiveLock on tuple (0,16) of relation 25592 of database 12044; blocked by process 10735.  
Process 10735 waits for ShareLock on transaction 433211274; blocked by process 10739.  
Process 10739 waits for ShareLock on transaction 433211282; blocked by process 10733.  
Process 10733 waits for ExclusiveLock on tuple (0,22) of relation 25592 of database 12044; blocked by process 10730.  
Process 10730 waits for ShareLock on transaction 433211286; blocked by process 10740.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 11 aborted in state 4: ERROR:  deadlock detected  
DETAIL:  Process 10745 waits for ExclusiveLock on tuple (0,3) of relation 25592 of database 12044; blocked by process 10741.  
Process 10741 waits for ShareLock on transaction 433211278; blocked by process 10735.  
Process 10735 waits for ShareLock on transaction 433211274; blocked by process 10739.  
Process 10739 waits for ShareLock on transaction 433211291; blocked by process 10733.  
Process 10733 waits for ShareLock on transaction 433211290; blocked by process 10730.  
Process 10730 waits for ExclusiveLock on tuple (0,3) of relation 25592 of database 12044; blocked by process 10745.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 0 aborted in state 10: ERROR:  deadlock detected  
DETAIL:  Process 10730 waits for ExclusiveLock on tuple (0,3) of relation 25592 of database 12044; blocked by process 10741.  
Process 10741 waits for ShareLock on transaction 433211278; blocked by process 10735.  
Process 10735 waits for ShareLock on transaction 433211274; blocked by process 10739.  
Process 10739 waits for ShareLock on transaction 433211291; blocked by process 10733.  
Process 10733 waits for ShareLock on transaction 433211290; blocked by process 10730.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 8 aborted in state 10: ERROR:  deadlock detected  
DETAIL:  Process 10731 waits for ShareLock on transaction 433211294; blocked by process 10733.  
Process 10733 waits for ExclusiveLock on tuple (0,76) of relation 25592 of database 12044; blocked by process 10744.  
Process 10744 waits for ShareLock on transaction 433211289; blocked by process 10731.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 4 aborted in state 8: ERROR:  deadlock detected  
DETAIL:  Process 10733 waits for ShareLock on transaction 433211293; blocked by process 10744.  
Process 10744 waits for ExclusiveLock on tuple (0,89) of relation 25592 of database 12044; blocked by process 10735.  
Process 10735 waits for ShareLock on transaction 433211294; blocked by process 10733.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 15 aborted in state 4: ERROR:  deadlock detected  
DETAIL:  Process 10744 waits for ShareLock on transaction 433211296; blocked by process 10735.  
Process 10735 waits for ShareLock on transaction 433211298; blocked by process 10739.  
Process 10739 waits for ExclusiveLock on tuple (0,90) of relation 25592 of database 12044; blocked by process 10744.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 9 aborted in state 10: ERROR:  deadlock detected  
DETAIL:  Process 10735 waits for ShareLock on transaction 433211298; blocked by process 10739.  
Process 10739 waits for ShareLock on transaction 433211296; blocked by process 10735.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
Client 6 aborted in state 11: ERROR:  deadlock detected  
DETAIL:  Process 10741 waits for ShareLock on transaction 433211317; blocked by process 10739.  
Process 10739 waits for ShareLock on transaction 433211316; blocked by process 10741.  
HINT:  See server log for query details.  
CONTEXT:  SQL statement "update cnt_a set cnt=cnt+1 where id=(rm*m_id)::int returning cnt"  
PL/pgSQL function tg_insert_a() line 8 at SQL statement  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 23826  
tps = 397.094633 (including connections establishing)  
tps = 397.187975 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002638        \setrandom id 1 20000000  
        0.063353        begin;  
        0.098917        delete from a where id=:id;  
        0.090903        delete from a where id=:id;  
        1.541656        insert into a (info) values ('test');  
        0.096450        delete from a where id=:id;  
        1.784244        insert into a (info) values ('test');  
        0.095878        delete from a where id=:id;  
        0.899185        insert into a (info) values ('test');  
        0.096219        delete from a where id=:id;  
        0.942108        insert into a (info) values ('test');  
        0.441609        insert into a (info) values ('test');  
        0.482926        insert into a (info) values ('test');  
        0.079380        end;  
```  
以下测试改进函数后的场景16个并发以及16条cnt_a记录的单事务多sql的场景, 避免了死锁, 同上提高了tps.  
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -r -n -f ./id.sql -h $PGDATA -p 1919 -U postgres -T 60 -c 16 -j 4 postgres  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 42402  
tps = 706.377762 (including connections establishing)  
tps = 706.544148 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.004023        \setrandom id 1 20000000  
        0.128100        begin;  
        0.376305        delete from a where id=:id;  
        0.149250        delete from a where id=:id;  
        14.473279       insert into a (info) values ('test');  
        0.206936        delete from a where id=:id;  
        1.340881        insert into a (info) values ('test');  
        0.207271        delete from a where id=:id;  
        1.301736        insert into a (info) values ('test');  
        0.209022        delete from a where id=:id;  
        1.294269        insert into a (info) values ('test');  
        1.342260        insert into a (info) values ('test');  
        1.337499        insert into a (info) values ('test');  
        0.250370        end;  
postgres=# select count(*) from a;  
 count    
--------  
 396719  
(1 row)  
postgres=# select sum(cnt) from cnt_a ;  
  sum     
--------  
 396719  
(1 row)  
```  