### Optimized Text

INDIO, renowned for its low false positive rate, demonstrated superior performance in reducing false positives during our experiments. A static analysis tool with a lower false positive rate is generally more "user-friendly" for programmers, making it easier to integrate into the software development process.

It is important to note that the SMT solver used in INDIO may fail to solve WP (Weak Precondition) constraints if their complexity exceeds the solver's analytical capabilities. In such cases, there are two options: (1) report all paths containing unsolvable WP conditions as vulnerable to avoid false negatives, or (2) do not report these paths to reduce false positives. In the current implementation of INDIO, we chose the second option, which may lead to false negatives. However, our experiments, as detailed in Sections 5.1 and 5.2, show that this choice, combined with a reasonable timeout for WP calculation, does not significantly increase false negatives in practical analyses.

### Threats to Validity

The validity of our experiments is threatened by two factors:

1. **Selection of Experiment Subjects**: The Windows binaries selected for the experiments might not fully represent real-world binaries affected by integer overflow. We chose a set of widely used binaries in common media and image applications, which have been extensively studied by various integer overflow analysis tools. This provides a solid basis for comparing INDIO with existing techniques. In future studies, we plan to evaluate INDIO against a more comprehensive test suite that covers typical integer operations and usage in Windows binaries.

2. **Uncovered Vulnerabilities**: It is possible that the binaries we analyzed contain vulnerabilities that have not been detected by any tools, which could affect our evaluation of INDIO's false negative rate. Despite thorough checks by numerous tools [4,10,12–16,20,24,25,29,31], INDIO successfully identified two new vulnerabilities. While an inaccurate estimation of the false negative rate is a concern, it does not undermine the conclusion that INDIO is more effective in detecting integer overflows with a much lower false positive rate.

### Related Work

#### Static Binary Analysis
Several tools have been proposed to use static analysis techniques for detecting integer overflows in binaries. For example, Loong Checker [8] uses value-set and data dependency analysis to retrieve function summaries and then applies taint analysis to investigate the use of potentially overflowed integer values in sinks. IntFinder [6] recovers type information from binaries to detect suspicious instructions that might cause integer overflows, also using taint analysis to reduce the number of suspicious instructions. Both LoongChecker and IntFinder suffer from high false positive rates and often require dynamic analysis to filter out false positives.

The work most closely related to ours is IntScope [25], which integrates path-sensitive data-flow and taint analysis to identify vulnerable points of integer overflow. Similar to our approach, IntScope performs expensive symbolic execution-based analysis only on paths where tainted values are used in sinks. Unlike these static approaches, INDIO significantly reduces the cost of static analysis using a vulnerability ranking mechanism, focusing on a small portion of likely genuine vulnerabilities. INDIO further improves efficiency and scalability with built-in heuristics, including taint analysis and path pruning. Additionally, the use of S2E enhances INDIO's accuracy in symbolic execution compared to IntScope, which uses abstract memory models to simulate the runtime environment.

#### Dynamic Analysis & Symbolic Execution
Fuzz testing (e.g., [12,13]) has traditionally been used to challenge system reliability with malformed inputs. Recent fuzz testing techniques incorporate symbolic [12,19,20] or taint analysis [16] on concrete (seed) inputs to generate sensible test inputs that explore program paths of interest. These techniques have the potential to detect vulnerabilities in binaries by generating inputs that explore vulnerable paths and trigger vulnerabilities.

However, unlike static analysis, fuzz testing and its variants cannot guarantee coverage of all possible paths in binaries or paths that matter, leading to potential omissions of vulnerabilities. The effectiveness of dynamic analysis is also limited by the quality of the generated test inputs, which depends on the level of knowledge about the binaries, particularly their input protocols. Without this knowledge, dynamic analysis becomes less effective in exploring program defects and vulnerabilities. For example, DIODE [20] uses a specific input format parser to reconstruct test input files, but it is unclear whether DIODE or similar tools can be applied to GUI-based executables like comctl32.dll, which receive non-file-based inputs.

Dynamic instrumentation tools like DynamoRIO [2] can monitor the dynamic execution of binaries and catch integer overflows if appropriately instrumented. However, they are limited to user-mode binaries and depend on other techniques to craft inputs that might trigger overflows.

#### Source Code Analysis
Numerous approaches have been proposed to detect integer overflows at the source code level. These include static analysis methods [26,27] and runtime instrumentation [10,17,31]. IntPatch [31] uses type analysis to locate potential overflow sites and applies backward slicing to find the operations affecting these sites. [27] aims to find multiple vulnerabilities, including integer overflows, by exploring the code property graph, a novel representation of source code. As noted in [10], different compilers interpret undefined integer operations differently, making pre-compilation analysis challenging. To address this, the IOC tool [10] instruments the source code with overflow checks during compilation and reports overflow sites at runtime. IntFlow [17] follows a similar approach to IOC while integrating information flow tracking to reduce high false positive rates.

### Conclusion
Static analysis techniques face challenges in achieving acceptable scalability and false positive rates. To address these, we presented INDIO, a tool that relies on static analysis to detect integer overflow vulnerabilities in Windows binaries while significantly reducing analysis costs and false positives. INDIO uses pattern matching to quickly identify potential vulnerabilities and employs a collection of optimization techniques to filter out false positives. It can also generate program inputs to trigger genuine vulnerabilities, aiding users in understanding and fixing them. Our experiments confirmed INDIO's effectiveness in detecting integer overflow vulnerabilities with low false positive rates, and the heuristics employed do not cause significant false negatives in practice.

For future work, we plan to conduct more comprehensive experiments to evaluate and optimize the vulnerability priority ranking mechanism, reflecting the latest trends in integer overflow vulnerabilities. We will also establish guidelines to assist users in adjusting the mechanism for their specific needs. To mitigate false negatives, we aim to enhance our taint analysis with techniques like control-flow propagation [23] to trace variable dependencies more accurately.

### Acknowledgments
We are grateful to Yi Zhang and the anonymous reviewers for their insightful comments and suggestions. This research was supported in part by the National Natural Science Foundations of China (Grant No. 61471344).

### References
1. Anand, S., Godefroid, P., Tillmann, N.: Demand-driven compositional symbolic execution. In: Ramakrishnan, C.R., Rehof, J. (eds.) TACAS 2008. LNCS, vol. 4963, pp. 367–381. Springer, Heidelberg (2008)
2. Bala, V., Duesterwald, E., Banerjia, S.: Dynamo: a transparent dynamic optimization system. SIGPLAN Not. 35(5), 1–12 (2000)
3. Cadar, C., Dunbar, D., Engler, D.: KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs. In: Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, OSDI 2008, pp. 209–224. USENIX Association, Berkeley (2008)
4. Cha, S.K., Avgerinos, T., Rebert, A., Brumley, D.: Unleashing mayhem on binary code. In: Proceedings of the 2012 IEEE Symposium on Security and Privacy, SP 2012, pp. 380–394. IEEE Computer Society, Washington, DC (2012)
5. Chen, D., Zhang, Y., Cheng, L., Deng, Y., Sun, X.: Heuristic path pruning algorithm based on error handling pattern recognition in detecting vulnerability. In: 2013 IEEE 37th Annual Computer Software and Applications Conference Workshops (COMPSACW), pp. 95–100, July 2013
6. Chen, P., Han, H., Wang, Y., Shen, X., Yin, X., Mao, B., Xie, L.: IntFinder: automatically detecting integer bugs in x86 binary program. In: Qing, S., Mitchell, C.J., Wang, G. (eds.) ICICS 2009. LNCS, vol. 5927, pp. 336–345. Springer, Heidelberg (2009)
7. Chen, P., Wang, Y., Xin, Z., Mao, B., Xie, L.: Brick: a binary tool for run-time detecting and locating integer-based vulnerability. In: International Conference on Availability, Reliability and Security, ARES 2009, pp. 208–215 (2009)
8. Cheng, S., Yang, J., Wang, J., Wang, J., Jiang, F.: Loongchecker: practical summary-based semi-simulation to detect vulnerability in binary code. In: 2011 IEEE 10th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom), pp. 150–159, November 2011
9. Chipounov, V., Kuznetsov, V., Candea, G.: S2e: a platform for in-vivo multi-path analysis of software systems. In: Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS XVI, pp. 265–278. ACM, New York (2011)
10. Dietz, W., Li, P., Regehr, J., Adve, V.: Understanding integer overflow in C/C++. In: Proceedings of the 34th International Conference on Software Engineering, ICSE 2012, pp. 760–770. IEEE Press, Zurich (2012)
11. Dijkstra, E.: Go to statement considered harmful. In: Classics in Software Engineering (incoll), pp. 27–33. Yourdon Press, Upper Saddle River (1979)
12. Godefroid, P., Levin, M.Y., Molnar, D.: SAGE: whitebox fuzzing for security testing. Commun. ACM 55(3), 40 (2012)
13. Haller, I., Slowinska, A., Neugschwandtner, M., Bos, H.: Dowsing for overflows: a guided fuzzer to find buffer boundary violations. In: Proceedings of the 22nd USENIX Conference on Security, SEC 2013, pp. 49–64 (2013)
14. Hasabnis, N., Misra, A., Sekar, R.: Light-weight bounds checking. In: Proceedings of the Tenth International Symposium on Code Generation and Optimization, CGO 2012, pp. 135–144. ACM, New York (2012)
15. Long, F., Sidiroglou-Douskos, S., Kim, D., Rinard, M.: Sound input filter generation for integer overflow errors. In: Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2014, pp. 439–452. ACM, New York (2014)
16. Molnar, D., Li, X.C., Wagner, D.: Dynamic test generation to find integer bugs in x86 binary Linux programs. In: Proceedings of the 18th Conference on USENIX Security Symposium, pp. 67–82. USENIX Association, Berkeley (2009)
17. Pomonis, M., Petsios, T., Jee, K., Polychronakis, M., Keromytis, A.D.: IntFlow: improving the accuracy of arithmetic error detection using information flow tracking. In: Proceedings of the 30th Annual Computer Security Applications Conference, ACSAC 2014, pp. 416–425. ACM, New Orleans (2014)
18. Schwartz, E.J., Avgerinos, T., Brumley, D.: All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask). In: Proceedings of the 2010 IEEE Symposium on Security and Privacy, SP 2010, pp. 317–331 (2010)
19. Sen, K., Marinov, D., Agha, G.: CUTE: a concolic unit testing engine for C. SIGSOFT Softw. Eng. Notes 30(5), 263–272 (2005)
20. Sidiroglou-Douskos, S., Lahtinen, E., Rittenhouse, N., Piselli, P., Long, F., Kim, D., Rinard, M.: Targeted automatic integer overflow discovery using goal-directed conditional branch enforcement. In: Proceedings of the Twentieth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS 2015, pp. 473–486. ACM, New York (2015)
21. Simon, A.: Value-Range Analysis of C Programs: Towards Proving the Absence of Buffer Overflow Vulnerabilities. Springer, Heidelberg (2010)
22. Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z., Newsome, J., Poosankam, P., Saxena, P.: BitBlaze: a new approach to computer security via binary analysis. In: Sekar, R., Pujari, A.K. (eds.) ICISS 2008. LNCS, vol. 5352, pp. 1–25. Springer, Heidelberg (2008)
23. Stephen, M., Dawnsong, M.P.: DTA++: dynamic taint analysis with targeted control-flow propagation. In: Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS), pp. 269–282, February 2011
24. Wang, T., Wei, T., Gu, G., Zou, W.: TaintScope: a checksum-aware directed fuzzing tool for automatic software vulnerability detection. In: 2010 IEEE Symposium on Security and Privacy (SP), pp. 497–512, May 2010
25. Wang, T., Wei, T., Lin, Z., Zou, W.: IntScope: automatically detecting integer overflow vulnerability in x86 binary using symbolic execution. In: Proceedings of the Network and Distributed System Security Symposium (2009)
26. Wang, X., Chen, H., Jia, Z., Zeldovich, N., Kaashoek, M.F.: Improving integer security for systems with KINT. In: Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation, pp. 163–177 (2012)
27. Yamaguchi, F., Golde, N., Arp, D., Rieck, K.: Modeling and discovering vulnerabilities with code property graphs. In: Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP 2014, pp. 590–604 (2014)
28. Yamaguchi, F., Lindner, F., Rieck, K.: Vulnerability extrapolation: assisted discovery of vulnerabilities using machine learning. In: Proceedings of the 5th USENIX Conference on Offensive Technologies, WOOT 2011, p. 13 (2011)
29. Yamaguchi, F., Wressnegger, C., Gascon, H., Rieck, K.: Chucky: exposing missing checks in source code for vulnerability discovery. In: Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, pp. 499–510 (2013)
30. Yang, Z., Yang, M., Zhang, Y., Gu, G., Ning, P., Wang, X.S.: AppIntent: analyzing sensitive data transmission in Android for privacy leakage detection. In: Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, CCS 2013, pp. 1043–1054. ACM, New York (2013)
31. Zhang, C., Wang, T., Wei, T., Chen, Y., Zou, W.: IntPatch: automatically fix integer-overflow-to-buffer-overflow vulnerability at compile-time. In: Gritzalis, D., Preneel, B., Theoharidou, M. (eds.) ESORICS 2010. LNCS, vol. 6345, pp. 71–86. Springer, Heidelberg (2010)