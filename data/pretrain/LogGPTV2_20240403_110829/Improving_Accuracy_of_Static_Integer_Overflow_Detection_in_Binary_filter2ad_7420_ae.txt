which is renown for its low false positive rate, INDIO performed more eﬀectively
in reducing false positives in our experiments. According to our experience, a
static analysis tool with the lower false positive rate is more “user-friendly” to
programmers, and hence is easier to be integrated into the software development
process.
It is worth noting that the SMT solver employed in INDIO might fail to
solve the WP constraints with the constraint’s complexity beyond the solver’s
analytical capability. There are two options to handle such situations: (1) report
all paths containing unsolvable WP conditions as vulnerable paths, in order to
avoid false negatives; or (2) do not report these paths, in order to reduce the
number of false positives. In the current implementation of INDIO, we took
the second option, which may lead to false negatives. However, our experiments
as described in Sects. 5.1 and 5.2 demonstrate that this choice (with a reason-
able timeout for WP calculation) does not result in noticeable increase of false
negatives in realistic analysis.
Improving Accuracy of Static Integer Overﬂow Detection in Binary
265
The validity of our experiments are threaten by two factors:
1. The experiment subjects selected might not well represent real (Windows)
binaries suﬀering from integer overﬂow. In the experiments, we selected a set
of Windows binaries that are widely used in common media or image appli-
cations. Most of them have been thoroughly studied by an array of integer
overﬂow analysis tools. Thus, they oﬀer us a good basis to compare our tool
with existing analysis techniques. In future study, we plan to evaluate INDIO
against more comprehensive test benches covering typical integer operation
and usage in (Windows) binaries.
2. It is possible that the binaries we studied contain vulnerabilities that have
not been uncovered by any tools, which might aﬀect our evaluation of INDIOs
false negative rates. In fact, INDIO succeeded in ﬁnding two new vulnerabil-
ities from the considered binaries, despite the fact that they have been well
checked by a host of tools before [4,10,12–16,20,24,25,29,31]. Nevertheless,
an inaccurate estimation of INDIO’s false negative rate does not compromise
the conclusion we have drawn from the experiments, which is that INDIO is
more eﬀective in detecting integer overﬂow from binaries with a much lower
false positive rate.
6 Related Work
Static Binary Analysis. A number of tools have been proposed to use static
analysis techniques to detect integer overﬂow in binaries. For example, Loong
Checker [8] retrieves the summary of functions in binaries using value-set analysis
and data dependency analysis. Based on the retrieved summaries, Loong Checker
applies taint analysis to investigate the use of potentially overﬂowed integer
values in sinks. IntFinder [6] recovers type information from binaries, and then
uses it to detect suspicious instructions that might cause integer overﬂow. Taint
analysis is also used in IntFinder to reduce the size of suspicious instructions.
Both LoongChecker and IntFinder suﬀer from the problem of high false positive
rates, and have to be used together with dynamic analysis to rule out false
positives.
The previous work closest to ours is IntScope [25], which integrates path-
sensitive data-ﬂow analysis and taint analysis to identify vulnerable points of inte-
ger overﬂow. Similar to our approach, IntScope also spends expensive symbolic
execution-based analysis only on paths on which tainted values are used in sinks.
Unlike these static approaches, INDIO signiﬁcantly reduces the cost of static
analysis using a vulnerability ranking mechanism. Thus, only a small portion of
vulnerabilities likely to be genuine are examined with expensive static analysis.
INDIO further improves the eﬃciency and scalability of static analysis using its
built-in heuristics, including taint analysis and path pruning. Moreover, the use
of S2E gives INDIO better accuracy in symbolic execution than IntScope, which
uses abstract memory models to simulate the runtime environment for binaries.
Dynamic Analysis & Symbolic Execution. Fuzz testing (e.g., [12,13]) has
been traditionally used to challenge the reliability of systems with excessive
266
Y. Zhang et al.
malformed test inputs. Recently, fuzz test has evolved to conduct symbolic analy-
sis [12,19,20] or taint analysis [16] on a concrete(seed) input to guide the gener-
ation of sensible test inputs that explore program paths of interest (e.g., tainted
paths). These evolved fuzz testing techniques have the potential of detecting vul-
nerabilities in binaries [12,16,24], because the test inputs they generate might
explore vulnerable program paths and trigger vulnerabilities.
However, in contrast to static analysis based approaches, fuzz testing and its
variants cannot guarantee to generate test inputs that cover all possible paths in
binaries or paths that matter. As a result, vulnerabilities might be omitted by
these approaches. In addition, the eﬀectiveness of dynamic analysis is limited by
the quality of test inputs crafted, which depends on the level of knowledge about
the binaries (in particular, the input protocols of the binaries) acquired. Without
such knowledge, dynamic analysis becomes less eﬀective in exploring program
defects and vulnerabilities. For example, DIODE [20] employs a speciﬁc input
format parser to reconstruct test input ﬁles. It is unknown whether DIODE or
tools alike can be applied to GUI-based executables such as comctl32.dll, which
are fed by non-ﬁle-based inputs.
Dynamic instrumentation tools like DynamoRIO [2] are often used to monitor
dynamic execution of binaries. If the binaries are appropriately instrumented,
these tools can catch the occurrence of integer overﬂow. However, they can only
be applied to binaries running in user mode, and depend on other techniques to
craft inputs that might trigger integer overﬂow.
Source Code Analysis. Numerous approaches have been proposed to detect
integer overﬂow at the source code level. These approaches either use static
analysis to detect integer overﬂow [26,27], or instrument the source code and
check integer overﬂow at runtime [10,17,31]. IntPatch [31] uses type analysis
to locate possible overﬂow sites and applies backward slicing to ﬁnd the oper-
ations that aﬀect the overﬂow sites. [27] aims to ﬁnd multiple vulnerabilities
including integer overﬂow in source code by exploring the code property graph,
a novel format of source code representation. However, as stated in [10], one rea-
son why it is challenging to detect integer issues in source code is that diﬀerent
compilers interpret undeﬁned integer operations in diﬀerent ways, making the
pre-compiling analysis approaches unable to detect integer bugs introduced by
compilers. To address this issue, the IOC tool [10] instruments the source code
with overﬂow check during compiling and reports overﬂow sites at runtime. Int-
Flow [17] follows the same idea of IOC while integrates information ﬂow tracking
to reduce the high positive rates troubling IOC.
7 Conclusion
It has been a challenge for static analysis techniques to analyze software pro-
grams with acceptable scalability and false positive rates. To address these chal-
lenges, we have presented a tool called INDIO that relies on static analysis to
detect integer overﬂow vulnerabilities in Windows binaries, while signiﬁcantly
reduces the analysis cost and the number of false positives being reported. INDIO
Improving Accuracy of Static Integer Overﬂow Detection in Binary
267
applies pattern matching to quickly identify potential integer overﬂow vulner-
abilities and establishes a collection of optimization techniques to ﬁlter out a
signiﬁcant portion of false positives. INDIO is also capable of generating pro-
gram inputs that could trigger the genuine vulnerabilities, a feature particularly
helpful for the user to understand and ﬁx integer overﬂow vulnerabilities. Our
experiments have conﬁrmed the eﬀectiveness of INDIO in detecting integer over-
ﬂow vulnerabilities with low false positive rates. The experiments also show that
the heuristics employed by INDIO to ﬁlter out false positives would not cause
false negatives in practices.
As of future work, we plan to conduct more comprehensive experiments to
evaluate and optimize the vulnerability priority ranking mechanism, making it to
reﬂect the latest trend of integer overﬂow vulnerabilities in reality. A guideline
can also be established from such experiments to assist the user in adjusting
the mechanism (e.g. sink weights, threshold) for their own analysis needs. To
mitigate the false negatives caused by the Variable Selection module, we plan to
enhance our taint analysis with techniques such as control-ﬂow propagation [23]
to trace the dependency among variables more accurately.
Acknowledgments. We are grateful to Yi Zhang, and the anonymous reviewers for
their insightful comments and suggestions. This research was supported in part by
National Natural Science Foundations of China (Grant No. 61471344).
References
1. Anand, S., Godefroid, P., Tillmann, N.: Demand-driven compositional symbolic
execution. In: Ramakrishnan, C.R., Rehof, J. (eds.) TACAS 2008. LNCS, vol.
4963, pp. 367–381. Springer, Heidelberg (2008)
2. Bala, V., Duesterwald, E., Banerjia, S.: Dynamo: a transparent dynamic optimiza-
tion system. SIGPLAN Not. 35(5), 1–12 (2000)
3. Cadar, C., Dunbar, D., Engler, D.: KLEE: unassisted and automatic generation
of high-coverage tests for complex systems programs. In: Proceedings of the 8th
USENIX Conference on Operating Systems Design and Implementation, OSDI
2008, pp. 209–224. USENIX Association, Berkeley (2008)
4. Cha, S.K., Avgerinos, T., Rebert, A., Brumley, D.: Unleashing mayhem on binary
code. In: Proceedings of the 2012 IEEE Symposium on Security and Privacy, SP
2012, pp. 380–394. IEEE Computer Society, Washington, DC (2012)
5. Chen, D., Zhang, Y., Cheng, L., Deng, Y., Sun, X.: Heuristic path pruning algo-
rithm based on error handling pattern recognition in detecting vulnerability. In:
2013 IEEE 37th Annual Computer Software and Applications Conference Work-
shops (COMPSACW), pp. 95–100, July 2013
6. Chen, P., Han, H., Wang, Y., Shen, X., Yin, X., Mao, B., Xie, L.: IntFinder: auto-
matically detecting integer bugs in x86 binary program. In: Qing, S., Mitchell, C.J.,
Wang, G. (eds.) ICICS 2009. LNCS, vol. 5927, pp. 336–345. Springer, Heidelberg
(2009)
7. Chen, P., Wang, Y., Xin, Z., Mao, B., Xie, L.: Brick: a binary tool for run-time
detecting and locating integer-based vulnerability. In: International Conference on
Availability, Reliability and Security, ARES 2009, pp. 208–215 (2009)
268
Y. Zhang et al.
8. Cheng, S., Yang, J., Wang, J., Wang, J., Jiang, F.: Loongchecker: practical
summary-based semi-simulation to detect vulnerability in binary code. In: 2011
IEEE 10th International Conference on Trust, Security and Privacy in Computing
and Communications (TrustCom), pp. 150–159, November 2011
9. Chipounov, V., Kuznetsov, V., Candea, G.: S2e: a platform for in-vivo multi-
path analysis of software systems. In: Proceedings of the Sixteenth International
Conference on Architectural Support for Programming Languages and Operating
Systems, ASPLOS XVI, pp. 265–278. ACM, New York (2011)
10. Dietz, W., Li, P., Regehr, J., Adve, V.: Understanding integer overﬂow in C/C++.
In: Proceedings of the 34th International Conference on Software Engineering,
ICSE 2012, pp. 760–770. IEEE Press, Zurich (2012)
11. Dijkstra, E.: Go to statement considered harmful. In: Classics in Software Engi-
neering (incoll), pp. 27–33. Yourdon Press, Upper Saddle River (1979)
12. Godefroid, P., Levin, M.Y., Molnar, D.: SAGE: whitebox fuzzing for security test-
ing. Commun. ACM 55(3), 40 (2012)
13. Haller, I., Slowinska, A., Neugschwandtner, M., Bos, H.: Dowsing for overﬂows:
a guided fuzzer to ﬁnd buﬀer boundary violations. In: Proceedings of the 22nd
USENIX Conference on Security, SEC 2013, pp. 49–64 (2013)
14. Hasabnis, N., Misra, A., Sekar, R.: Light-weight bounds checking. In: Proceedings
of the Tenth International Symposium on Code Generation and Optimization,
CGO 2012, pp. 135–144. ACM, New York (2012)
15. Long, F., Sidiroglou-Douskos, S., Kim, D., Rinard, M.: Sound input ﬁlter gen-
eration for integer overﬂow errors. In: Proceedings of the 41st ACM SIGPLAN-
SIGACT Symposium on Principles of Programming Languages, POPL 2014, pp.
439–452. ACM, New York (2014)
16. Molnar, D., Li, X.C., Wagner, D.: Dynamic test generation to ﬁnd integer bugs
in x86 binary linux programs. In: Proceedings of the 18th Conference on USENIX
Security Symposium, pp. 67–82. USENIX Association, Berkeley (2009)
17. Pomonis, M., Petsios, T., Jee, K., Polychronakis, M., Keromytis, A.D.: IntFlow:
improving the accuracy of arithmetic error detection using information ﬂow track-
ing. In: Proceedings of the 30th Annual Computer Security Applications Confer-
ence, ACSAC 2014, pp. 416–425. ACM, New Orleans (2014)
18. Schwartz, E.J., Avgerinos, T., Brumley, D.: All you ever wanted to know about
dynamic taint analysis and forward symbolic execution (but might have been afraid
to ask). In: Proceedings of the 2010 IEEE Symposium on Security and Privacy, SP
2010, pp. 317–331 (2010)
19. Sen, K., Marinov, D., Agha, G.: Cute: A concolic unit testing engine for c. SIG-
SOFT Softw. Eng. Notes 30(5), 263–272 (2005)
20. Sidiroglou-Douskos, S., Lahtinen, E., Rittenhouse, N., Piselli, P., Long, F., Kim,
D., Rinard, M.: Targeted automatic integer overﬂow discovery using goal-directed
conditional branch enforcement. In: Proceedings of the Twentieth International
Conference on Architectural Support for Programming Languages and Operating
Systems, ASPLOS 2015, pp. 473–486. ACM, New York (2015)
21. Simon, A.: Value-Range Analysis of C Programs: Towards Proving the Absence of
Buﬀer Overﬂow Vulnerabilities. Springer, Heidelberg (2010)
22. Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z.,
Newsome, J., Poosankam, P., Saxena, P.: BitBlaze: a new approach to computer
security via binary analysis. In: Sekar, R., Pujari, A.K. (eds.) ICISS 2008. LNCS,
vol. 5352, pp. 1–25. Springer, Heidelberg (2008)
Improving Accuracy of Static Integer Overﬂow Detection in Binary
269
23. Stephen, M., Dawnsong, M.P.: DTA++: dynamic taint analysiswith targetedcontrol-
ﬂow propagation. In: Proceedings of the 18th Annual Network and Distributed Sys-
tem Security Symposium (NDSS), pp. 269–282, February 2011
24. Wang, T., Wei, T., Gu, G., Zou, W.: TaintScope: a checksum-aware directed fuzzing
tool for automatic software vulnerability detection. In: 2010 IEEE Symposium on
Security and Privacy (SP), pp. 497–512, May 2010
25. Wang, T., Wei, T., Lin, Z., Zou, W.: IntScope: automatically detecting integer
overﬂow vulnerability in x86 binary using symbolic execution. In: Proceedings of
the Network and Distributed System Security Symposium (2009)
26. Wang, X., Chen, H., Jia, Z., Zeldovich, N., Kaashoek, M.F.: Improving integer
security for systems with KINT. In: Proceedings of the 10th USENIX Conference
on Operating Systems Design and Implementation, pp. 163–177 (2012)
27. Yamaguchi, F., Golde, N., Arp, D., Rieck, K.: Modeling and discovering vulnera-
bilities with code property graphs. In: Proceedings of the 2014 IEEE Symposium
on Security and Privacy, SP 2014, pp. 590–604 (2014)
28. Yamaguchi, F., Lindner, F., Rieck, K.: Vulnerability extrapolation: assisted discov-
ery of vulnerabilities using machine learning. In: Proceedings of the 5th USENIX
Conference on Oﬀensive Technologies, WOOT 2011, p. 13 (2011)
29. Yamaguchi, F., Wressnegger, C., Gascon, H., Rieck, K.: Chucky: exposing missing
checks in source code for vulnerability discovery. In: Proceedings of the 2013 ACM
SIGSAC Conference on Computer & Communications Security, pp. 499–510 (2013)
30. Yang, Z., Yang, M., Zhang, Y., Gu, G., Ning, P., Wang, X.S.: AppIntent: analyzing
sensitive data transmission in android for privacy leakage detection. In: Proceedings
of the 2013 ACM SIGSAC Conference on Computer & Communications Security,
CCS 2013, pp. 1043–1054. ACM, New York (2013)
31. Zhang, C., Wang, T., Wei, T., Chen, Y., Zou, W.: IntPatch: automatically ﬁx
integer-overﬂow-to-buﬀer-overﬂow vulnerability at compile-time. In: Gritzalis, D.,
Preneel, B., Theoharidou, M. (eds.) ESORICS 2010. LNCS, vol. 6345, pp. 71–86.
Springer, Heidelberg (2010)