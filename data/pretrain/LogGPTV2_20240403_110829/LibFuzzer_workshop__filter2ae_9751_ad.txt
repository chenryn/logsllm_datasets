    export FUZZ_CXXFLAGS="-O2 -fno-omit-frame-pointer -g -fsanitize=address \
        -fsanitize-coverage=trace-pc-guard,trace-cmp,trace-gep,trace-div"
    ./configure CC="clang" CFLAGS="$FUZZ_CXXFLAGS"
    make -j2     
    #2
    export FUZZ_CXXFLAGS="-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link"
    CXX="clang++ $FUZZ_CXXFLAGS" CC="clang $FUZZ_CXXFLAGS" \
        CCLD="clang++ $FUZZ_CXXFLAGS"  ./configure
    make -j$(nproc)
workshop给出的是#1的编译策略，没有启用采样分析器，而且 -fsanitize-coverage=trace-pc-guard适用在older
version的libfuzzer。因此我用的是#2的编译策略，上一个lesson证明这样的编译插桩能有效提高fuzz的效率。  
提供的harness：
    // Copyright 2015 The Chromium Authors. All rights reserved.
    // Use of this source code is governed by a BSD-style license that can be
    // found in the LICENSE file.
    #include 
    #include 
    #include 
    #include 
    #define PNG_INTERNAL
    #include "png.h"
    struct BufState {
      const uint8_t* data;
      size_t bytes_left;
    };
    struct PngObjectHandler {
      png_infop info_ptr = nullptr;
      png_structp png_ptr = nullptr;
      png_voidp row_ptr = nullptr;
      BufState* buf_state = nullptr;
      ~PngObjectHandler() {
        if (row_ptr && png_ptr) {
          png_free(png_ptr, row_ptr);
        }
        if (png_ptr && info_ptr) {
          png_destroy_read_struct(&png_ptr, &info_ptr, nullptr);
        }
        delete buf_state;
      }
    };
    void user_read_data(png_structp png_ptr, png_bytep data, png_size_t length) {
      BufState* buf_state = static_cast(png_get_io_ptr(png_ptr));
      if (length > buf_state->bytes_left) {
        png_error(png_ptr, "read error");
      }
      memcpy(data, buf_state->data, length);
      buf_state->bytes_left -= length;
      buf_state->data += length;
    }
    static const int kPngHeaderSize = 8;
    // Entry point for LibFuzzer.
    // Roughly follows the libpng book example:
    // http://www.libpng.org/pub/png/book/chapter13.html
    extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
      if (size  v(data, data + size);
      if (png_sig_cmp(v.data(), 0, kPngHeaderSize)) {
        // not a PNG.
        return 0;
      }
      PngObjectHandler png_handler;
      png_handler.png_ptr = png_create_read_struct
        (PNG_LIBPNG_VER_STRING, nullptr, nullptr, nullptr);
      if (!png_handler.png_ptr) {
        return 0;
      }
      png_set_user_limits(png_handler.png_ptr, 2048, 2048);
      png_set_crc_action(png_handler.png_ptr, PNG_CRC_QUIET_USE, PNG_CRC_QUIET_USE);
      png_handler.info_ptr = png_create_info_struct(png_handler.png_ptr);
      if (!png_handler.info_ptr) {
        return 0;
      }
      // Setting up reading from buffer.
      png_handler.buf_state = new BufState();
      png_handler.buf_state->data = data + kPngHeaderSize;
      png_handler.buf_state->bytes_left = size - kPngHeaderSize;
      png_set_read_fn(png_handler.png_ptr, png_handler.buf_state, user_read_data);
      png_set_sig_bytes(png_handler.png_ptr, kPngHeaderSize);
      // libpng error handling.
      if (setjmp(png_jmpbuf(png_handler.png_ptr))) {
        return 0;
      }
      // Reading.
      png_read_info(png_handler.png_ptr, png_handler.info_ptr);
      png_handler.row_ptr = png_malloc(
          png_handler.png_ptr, png_get_rowbytes(png_handler.png_ptr,
                                                   png_handler.info_ptr));
      // reset error handler to put png_deleter into scope.
      if (setjmp(png_jmpbuf(png_handler.png_ptr))) {
        return 0;
      }
      png_uint_32 width, height;
      int bit_depth, color_type, interlace_type, compression_type;
      int filter_type;
      if (!png_get_IHDR(png_handler.png_ptr, png_handler.info_ptr, &width,
                        &height, &bit_depth, &color_type, &interlace_type,
                        &compression_type, &filter_type)) {
        return 0;
      }
      // This is going to be too slow.
      if (width && height > 100000000 / width)
        return 0;
      if (width > 2048 || height > 2048)
        return 0;
      int passes = png_set_interlace_handling(png_handler.png_ptr);
      png_start_read_image(png_handler.png_ptr);
      for (int pass = 0; pass (png_handler.row_ptr), NULL);
        }
      }
      return 0;
    }
对于模糊测试来说，能否写出合适的harness关乎着fuzz最后的结果，我们通常选择涉及内存管理，数据处理等方面的函数作为我们的接口函数去fuzz。  
这里给出的harness中我们比较容易看到它会首先去通过`png_sig_cmp`函数去判断输入的data是否符合png的格式，符合才能进入到后面的逻辑中，这一方面是确保data的有效性，同时也提高了数据变异的速率。  
由于要求输入数据为png的格式，那自然想到使用字典去拼接关键字。这样的想法是正确的，下面比较一下两者的差异：  
先编译:`clang++ -O2 -fno-omit-frame-pointer -gline-tables-only
-fsanitize=address,fuzzer-no-link -std=c++11 libpng_read_fuzzer.cc -I libpng
libpng/.libs/libpng16.a -fsanitize=fuzzer -lz -o libpng_read_fuzzer`  
使用的也是AFL给出的png.dict:
    # Copyright 2016 Google Inc.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #
    ################################################################################
    #
    # AFL dictionary for PNG images
    # -----------------------------    #
    # Just the basic, standard-originating sections; does not include vendor
    # extensions.
    #
    # Created by Michal Zalewski 
    #
    header_png="\x89PNG\x0d\x0a\x1a\x0a"