# 使用ETW监控进程创建、服务启动及驱动程序加载

## 译文声明
本文为翻译文章，具体内容和含义以原文为准。

### 背景
在端点检测与响应（EDR）领域，通常需要监控Windows服务和驱动模块的加载。常见的方法是使用内核驱动中的`PsSetLoadImageNotifyRoutine`函数设置模块加载回调例程来监控用户态（Ring3）和内核态（Ring0）模块的加载。然而，这种方法在监控驱动加载时存在局限性，因为驱动加载时使用的APC线程导致进程ID（PID）为0，无法获取具体的进程信息。

### 监控驱动加载的堆栈跟踪
以下是典型的驱动加载堆栈跟踪示例：
```plaintext
## RetAddr : Args to Child : Call Site
00 fffff80004b1748d : fffff8800456b8a0 fffff880031ac0d0 0000000000000001 fffff80004b74dfe : nt!DebugService2+0x5
01 fffff80004b74ecb : fffff880031ac000 fffffa80016de070 fffff8800456b9b8 0000000000000007 : nt!DbgLoadImageSymbols+0x4d
...
09 0000000000000000 : fffff8800456c000 fffff88004566000 fffff8800456ae60 0000000000000000 : nt!KiStartSystemThread+0x16
```

### 使用ETW进行监控
为了更精确地监控具体的进程信息，可以使用事件跟踪（Event Tracing for Windows, ETW）。每个ETW日志都有其唯一的GUID。要监控服务和驱动加载的日志，需要找到对应的GUID。

#### 获取GUID
1. **逆向调试分析**：打开一个安装驱动服务的软件，并附加调试器。
2. **定位关键函数**：在调试器中找到`CreateServiceW`函数，发现它会调用`sechost.dll`中的`sechost.CreateServiceW`函数。
3. **跟踪调用链**：最终实现是在`sechost`模块中的`CreateServiceW`，在运行到最后会调用`NdrClientCall4`。
4. **解析结构体**：`NdrClientCall4`的第一个参数`pStubDescriptor`是一个结构体，其中最重要的是`RpcInterfaceInformation`字段，定义了RPC接口的GUID。
5. **确定GUID**：通过逆向分析，发现对应的GUID为`367ABB81-9844-35F1-AD32-98F038001003`。

#### 启用ETW日志
1. **查找服务进程**：在`service.exe`进程中找到对应的RPC接口函数`RCreateServiceW`。
2. **获取客户端PID**：调用`I_RpcBindingInqLocalClientPID(0i64, &Pid);`获取当前RPC客户端的PID。
3. **开启ETW日志**：在服务启动入口函数`Main`中调用`ScStartTracingSession`和`EnableTrace`启用ETW日志。
4. **获取GUID**：对应的服务控制管理器（SCM）的ETW日志GUID为`{EBCCA1C2-AB46-4A1D-8C2A-906C2FF25F39}`。

### 示例代码
以下是一个简单的示例代码，用于捕获并处理ETW事件记录：

```c
#include <windows.h>
#include <evntcons.h>

// 定义GUID
GUID RegistryProvGuid = { 0xEBCCA1C2, 0xAB46, 0x4A1D, 0x8c, 0x2a, 0x90, 0x6c, 0x2f, 0xf2, 0x5f, 0x39 };

void Monitor(PEVENT_RECORD pEvent)
{
    if (pEvent->EventHeader.EventDescriptor.Id == 0x28)
    {
        int i = 0;
        i++;
    }
    else if (pEvent->EventHeader.EventDescriptor.Id == 0x2A)
    {
        // 处理其他事件
    }
}

int main()
{
    // 省略ETW创建和开启代码
    // ...
    
    // 监控事件
    PEVENT_RECORD pEvent;
    while (GetNextEventRecord(&pEvent))
    {
        Monitor(pEvent);
    }

    return 0;
}
```

### 验证
使用上述代码和之前创建服务的程序进行调试。当点击安装时，可以通过断点捕获到相应的PID和模块地址，验证结果是否正确。

通过这种方式，可以有效地监控具体的进程信息，从而提高监控的准确性和效率。对于`OpenService`和`StartService`等其他操作，读者可以自行研究并找到对应的key ID。