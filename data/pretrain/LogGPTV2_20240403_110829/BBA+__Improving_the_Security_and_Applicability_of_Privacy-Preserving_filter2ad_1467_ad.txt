### Issue of Negligible Advantage in Security

**Definition 3.5** states that an adversary should not be able to successfully call the accumulation or verification protocol for a forged token, i.e., a token that has not been issued by a legitimate issuer.

**Definition 3.5.** A trapdoor-linkable BBA+ scheme \( \text{BBAP} \) is called **owner-binding** with respect to the Accum and Vfy protocols if, for any probabilistic polynomial-time (PPT) adversary \( A \) in the experiment \( \text{Exp}_{\text{ob-acc-ver}}^{\text{BBAP},A}(n) \) from Figure 2, the advantage of \( A \) defined as:
\[ \text{Adv}_{\text{ob-acc-ver}}^{\text{BBAP},A}(n) := \Pr[\text{Exp}_{\text{ob-acc-ver}}^{\text{BBAP},A}(n) = 1] \]
is negligible in \( n \).

### Balance Binding Experiment

**Definition 3.6** ensures that, unless a token is used twice (which would involve using the same token serial number), the claimed balance for a token in the verification protocol always matches the sum of points allegedly collected with this token. If this property is violated, it could mean that either the claimed balance does not equal the "real" balance of the presented token, or the "real" balance does not match the sum of legitimately collected points associated with this token in the records.

**Experiment Expbb**
\[ \text{Exp}_{\text{bb}}^{\text{BBAP},A}(n) \]
1. \((\text{CRS}, \text{td}) \leftarrow \text{Setup}(1^n)\)
2. \((\text{pk}_I, \text{sk}_I) \leftarrow \text{IGen}(\text{CRS})\)
3. \(b \leftarrow \text{AMalIssue,MalAcc,MalVer}(\text{pk}_I)\)

The experiment returns 1 if \( A \) made a successful call to MalVer resulting in a view \( \text{view} = (\text{pk}_I, \text{sk}_I, w, v, \text{msgs}, \text{dstag}, \text{hid}, 1) \in \text{VVfy} \) and extracted a user public key \( \text{pk}_U \leftarrow \text{ExtractUID}(\text{td}, \text{hid}) \) such that:
- All successful MalIssue/MalAcc calls produced unique token version numbers.
- The claimed balance \( w \in \mathbb{Z}_p \) does not equal the sum of previously collected accumulation values \( v \) for \( \text{pk}_U \), i.e.,
\[ w \neq \sum_{v \in V_{\text{pk}_U}} v, \]
where \( V_{\text{pk}_U} \) is the list of all accumulation values \( v \in \mathbb{Z}_p \) that appeared in previous successful calls to MalAcc or MalVer for which \( \text{pk}_U \) could be extracted using ExtractUID.

**Definition 3.6.** A trapdoor-linkable BBA+ scheme \( \text{BBAP} \) is called **balance-binding** if, for any PPT adversary \( A \) in the experiment \( \text{Exp}_{\text{bb}}^{\text{BBAP},A}(n) \) from Figure 3, the advantage of \( A \) defined as:
\[ \text{Adv}_{\text{bb}}^{\text{BBAP},A}(n) := \Pr[\text{Exp}_{\text{bb}}^{\text{BBAP},A}(n) = 1] \]
is negligible in \( n \).

### Double-Spending Detection Experiment

**Definition 3.7** enforces that two transactions leading to the same token version number have always been initiated by the same user, and this user can be identified.

**Experiment Expdsd**
\[ \text{Exp}_{\text{dsd}}^{\text{BBAP},A}(n) \]
1. \((\text{CRS}, \text{td}) \leftarrow \text{Setup}(1^n)\)
2. \((\text{pk}_I, \text{sk}_I) \leftarrow \text{IGen}(\text{CRS})\)
3. \(b \leftarrow \text{AMalIssue,MalAcc,MalVer}(\text{pk}_I)\)

The experiment returns 1 if \( A \) made two successful MalAcc/MalVer calls resulting in two views \( \text{view}_1 \) and \( \text{view}_2 \) including two double-spending tags \( \text{dstag}_1 = (s, z_1) \) and \( \text{dstag}_2 = (s, z_2) \) and extracted user public keys \( \text{pk}_U^{(1)} \) and \( \text{pk}_U^{(2)} \) (using ExtractUID) such that at least one of the following conditions is satisfied:
- \( \text{pk}_U^{(1)} \neq \text{pk}_U^{(2)} \)
- \( \text{IdentDS}(\text{pk}_I, \text{dstag}_1, \text{dstag}_2) \neq (\text{pk}_U^{(1)}, \Pi) \)
- \( \text{IdentDS}(\text{pk}_I, \text{dstag}_1, \text{dstag}_2) = (\text{pk}_U^{(1)}, \Pi) \) but \( \text{VerifyGuilt}(\text{pk}_I, \text{pk}_U^{(1)}, \Pi) = 0 \)

**Definition 3.7.** A trapdoor-linkable BBA+ scheme \( \text{BBAP} \) ensures **double-spending detection** if, for any PPT adversary \( A \) in the experiment \( \text{Exp}_{\text{dsd}}^{\text{BBAP},A}(n) \) from Figure 4, the advantage of \( A \) defined as:
\[ \text{Adv}_{\text{dsd}}^{\text{BBAP},A}(n) := \Pr[\text{Exp}_{\text{dsd}}^{\text{BBAP},A}(n) = 1] \]
is negligible in \( n \).

### Definition of User Security and Privacy

This section presents the key security properties for users, protecting them from dishonest operators. Firstly, a user should have the privacy guarantee that their individual interactions cannot be exploited for tracking. Secondly, no operator should be able to forge a proof that a user has committed a double-spending.

**Experiment Exppriv-real**
\[ \text{Exp}_{\text{priv-real}}^{\text{BBAP},A}(1^n) \]
1. \((\text{CRS}, \text{td}) \leftarrow \text{Setup}(1^n)\)
2. \((\text{pk}_I, \text{state}_0) \leftarrow A_0(\text{CRS})\)
3. \(b \leftarrow \text{AHonUser,RealHonIssue,RealHonAcc,RealHonVer,RealCorrupt}(\text{pk}_I)\)
4. return \( b \)

**Experiment Exppriv-ideal**
\[ \text{Exp}_{\text{priv-ideal}}^{\text{BBAP},A}(1^n) \]
1. \((\text{CRS}, \text{td}_{\text{sim}}) \leftarrow \text{SimSetup}(1^n)\)
2. \((\text{pk}_I, \text{state}_0) \leftarrow A_0(\text{CRS})\)
3. \(b \leftarrow \text{AHonUser,SimHonIssue,SimHonAcc,SimHonVer,SimCorrupt}(\text{pk}_I)\)
4. return \( b \)

**Definition 3.8.** We say that a BBA+ scheme \( \text{BBAP} \) is **privacy-preserving** if there exist PPT algorithms \( \text{SimSetup} \) and \( \text{SimCorrupt} \) as well as interactive PPT algorithms as described in \( \text{SimHonIssue} \), \( \text{SimHonAcc} \), and \( \text{SimHonVer} \), respectively, such that for all PPT adversaries \( A = (A_0, A_1) \) in the experiments from Figures 5 and 6, the advantage of \( A \) defined as:
\[ \text{Adv}_{\text{priv}}^{\text{BBAP},A}(n) := \left| \Pr[\text{Exp}_{\text{priv-real}}^{\text{BBAP},A}(n) = 1] - \Pr[\text{Exp}_{\text{priv-ideal}}^{\text{BBAP},A}(n) = 1] \right| \]
is negligible in \( n \).

### False Accusation Protection

**Definition 3.9** demands that honest users cannot be falsely accused of having committed a double-spending by an adversary who generates \( \text{pk}_I \) and may coincide with \( I \), \( AC \), and \( V \).

**Experiment Expfacp**
\[ \text{Exp}_{\text{facp}}^{\text{BBAP},A}(n) \]
1. \((\text{CRS}, \text{td}) \leftarrow \text{Setup}(1^n)\)
2. \((\text{pk}_I, \text{sk}_I) \leftarrow \text{IGen}(\text{CRS})\)
3. \((\text{pk}_U, \text{sk}_U) \leftarrow \text{UGen}(\text{CRS})\)
4. \(\Pi \leftarrow \text{ARealHonIssue,RealHonAcc,RealHonVer}(\text{pk}_I, \text{pk}_U)\)

The experiment returns 1 if \( \text{VerifyGuilt}(\text{pk}_I, \text{pk}_U, \Pi) = 1 \).

**Definition 3.9.** A trapdoor-linkable BBA+ scheme \( \text{BBAP} \) ensures **false-accusation protection** if, for any PPT adversary \( A \) in the experiment \( \text{Exp}_{\text{facp}}^{\text{BBAP},A}(n) \) from Figure 7, the advantage of \( A \) defined as:
\[ \text{Adv}_{\text{facp}}^{\text{BBAP},A}(n) := \Pr[\text{Exp}_{\text{facp}}^{\text{BBAP},A}(n) = 1] \]
is negligible in \( n \).

### BBA+ Instantiation

In this section, we present our basic scheme \( \text{BBAP} \) which is secure with respect to the "reduced model" presented in Section 3.3 and privacy-preserving with respect to the model in Section 3.4. As mentioned, this basic protocol can easily be made secure in a full-fledged model where eavesdropping on and corrupting of honest users is allowed by encrypting all messages transmitted during the Issue, Accum, and Vfy protocols. For details, refer to the full version of the paper [22].

#### Building Blocks

Let \( \text{SetupGrp} \) be a bilinear group generator (cf. Definition 2.1) which outputs the description of a bilinear group \( \text{gp} := (G_1, G_2, G_T, e, p, \dots) \).