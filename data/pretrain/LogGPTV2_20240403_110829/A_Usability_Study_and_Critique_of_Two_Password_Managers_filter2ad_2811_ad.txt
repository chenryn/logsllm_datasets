safekeeping; this has advantages and disadvantages, de-
pending on the threat model.
Users also did not like relinquishing control to a com-
puter program: “How do I know I can trust it?”, “Now
I have to trust two companies with my passwords, who
guards the guards?” and “I felt like I had no control.
Passwords are important but I have no idea what hap-
pened.” Even though they know that password security
is a problem, they feel that they are best equipped to care
for their own passwords. This view is clearly contrary
to that of security experts. The mismatch needs to be ad-
dressed if widespread adoption of security measures is to
take place.
5.2 Comparison of ﬁndings with previous PwdHash
ﬁndings
The authors of PwdHash brieﬂy report the ﬁndings of
their user study as follows [24]:
• “The participants did not experience any major dif-
ﬁculties signing up for new accounts and logging in
to them using the password preﬁx.”
• “The user interface was so invisible that many par-
ticipants did not observe the extension doing any-
thing at all. They did not notice the lock icon, and
their only clue that the extension was working was
the fact that their password changed length when
focus left the ﬁeld, which they found confusing”
• “It was only once the users had to log in using a dif-
ferent browser that didn’t have PwdHash installed
that they encountered difﬁculties. They found the
process of copying over the site address into the re-
mote hashing page to be annoying, and if they did so
incorrectly (for example, using gmail.com instead of
google.com) the site that they were logging into did
not provide useful feedback as to what went wrong.”
• “When presented with a fake eBay site at a nu-
meric IP address, most of the participants were will-
ing to try logging in anyway, but their use of the
password-preﬁx prevented the phishing page from
reading their eBay passwords.”
Very little detail is given about the user study, its method-
ology, its participants, or the actual results. This makes
it difﬁcult to assess the validity of the study and its thor-
oughness, or to attempt a replication study. We address
each of their reported results by comparing them to our
ﬁndings and report additional usability problems that we
discovered. Our results contradict those found by the
authors [24] with respect to the usability of PwdHash.
We found that even though performing better than P-
Multiplier, PwdHash still had major usability problems.
10
Security ’06: 15th USENIX Security Symposium
USENIX Association
While the success rates for our tasks with PwdHash were
fairly high, more than half of these successful outcomes
were only achieved after repeated attempts and errors by
the users. Many successes were due to participants trying
random actions until eventually something worked, not
because participants had a clear understanding of how to
use the software.
The majority of our participants did not comment on
the changing length of their password. Many did, how-
ever, fail to realize that they needed to enter @@ in front
their new password when re-typing it in for conﬁrmation
on a Change Password page. They assumed that enter-
ing the @@ once was enough. Visually, it was appar-
ent that the two new passwords did not match due to the
length difference, but users did not notice this cue. Many
were confused by the lack of feedback and did not know
if they had been successful in activating PwdHash. A
similar problem occurred with P-Multiplier where users
would activate the plug-in the ﬁrst time they entered their
password then assumed that the program remained active
and proceeded to re-type their password in the password
conﬁrmation ﬁeld without re-activating P-Multiplier.
Most of our users also had difﬁculty with the remote
interface, but the problems encountered were different
from those reported in the original study. First, users had
difﬁculty reaching the remote web site due to its compli-
cated URL. Several commented that they “would never
ﬁnd this site when they needed it”. The second concern
cited by several users was that the remote web site did not
ask them for a username. They found this disturbing and
could not understand how it was going to generate the
correct password when it did not know who they were.
“How will it know to generate my password?” and “How
does it know who I am?” were common questions. One
shrewd participant eventually concluded that “wait, it’s
going to give anyone who enters my regular password the
same complicated password? That’s not good!”. Users
obviously believe that the generated passwords are (and
should be) somehow unique to them. This points to prob-
lems with users’ mental model of the systems.
The users who successfully completed the remote
login task did not have any trouble identifying the
correct site URL to enter (granted, we were using
www.amazon.com as the site, alternatives may not have
been as obvious to users as with the Google and Gmail
problem reported in the ﬁrst study). Of those who failed
to complete the task, most never even reached the remote
web site. Although they were explicitly told that “you are
now at your friend’s house, they don’t have the software
installed, so you will need to log in remotely”, they still
attempted to log in using the @@. When this failed, they
attempted to use their plain password and made random
attempts at guessing the correct password. They did not
refer to their instruction sheet that clearly had a section
entitled “To log in remotely:”. Even when users had only
half a page of instructions, directly in front of them, they
tended not to refer to it. On a similar note, only one user
actually read and commented on the instructions posted
on the remote web site about whether to enter @@ in
front of their password on the remote site. Without read-
ing the instructions, about half of the users entered their
password with the @@ and half omitted it. Apparently,
the software is capable of dealing with both situations be-
cause they were successful in generating their password
in both cases. This may be good in terms of anticipating
users’ actions but breaks the mental model of what the
@@ symbols represent.
We did not test if users would try to log in to a fraud-
ulent site. Based on our observations, we predict that
users would attempt to log on without realizing the dan-
ger. And based on users’ behaviour at other sites when
they had an incorrect password, it is our guess that users
would divulge their plain text password when the ﬁrst
log in attempt failed and they tried alternatives. Thus
even though PwdHash would protect their initial attempt,
users would provide their clear text password on subse-
quent attempts thus creating a security vulnerability.
PwdHash alerts users when it thinks they are trying
to enter a password into a non-password ﬁeld. The
alert message is long; most users simply dismissed it
without reading it. Compounding the problem is that
this alert sometimes appeared with legitimate password
ﬁelds, usually when a user would start typing a password
and then try to include the @@ as an afterthought.
PwdHash more closely mimics the interaction with
which users are familiar. From a conceptual point of
view, users simply have to remember that passwords
starting with @@ are protected. They do not need to
really understand that the @@ is invoking a plug-in that
performs a cryptographic hash on their password. On
the other hand, this familiarity also caused confusion.
One participant voiced this concern: “Really, I don’t see
how my password is safer because of two @’s in front”.
This user obviously understood that the @@ were im-
portant but could not make the connection with typing in
these symbols and triggering a program that will generate
a stronger password. Some people were uncomfortable
with the transparency, commenting that “at least with P-
Multiplier I get a window, the password is going into the
program”.
5.3 Comments on usability of Password Multiplier
Although no user study was documented, we now com-
ment on statements made in Halderman et al. [11] about
the usability of P-Multiplier. They argue that their ap-
proach is “both convenient for users and highly secure, a
combination not offered by previous designs”. In terms
of convenience, they claim that their software can be run
USENIX Association
Security ’06: 15th USENIX Security Symposium
11
on different machines to access their password from any-
where and that the memory load is light because users
only need to remember a username, the domain name
for the site being accessed, and a single master pass-
word. They also highlight their browser integration,
stating that this integration “allows it to work as con-
veniently and transparently as possible, minimizing the
burden imposed on the user and increasing the chances
that the system will be used in practice. Second, browser
integration allows our system to offer some protection
against spooﬁng and phishing attacks, since by default
the password program will use the name of the server
that will actually receive the submitted password, even
if an attacker has tricked the user into believing she is
connecting to a different site” [11].
We argue that P-Multiplier fails to meet the usability
goals its authors set for themselves. P-Multiplier is not
easily portable since it requires that the program be in-
stalled on a remote computer. Many users do not have
privileges allowing them to install software on such ma-
chines and would likely ﬁnd it inconvenient to install
software in order to log in to a web site.
The memory load is not trivial. Users must remem-
ber the master username and master password for P-
Multiplier. In addition, they must still remember their
username for each web site. And ﬁnally, they must re-
member the modiﬁed domain names for all sites where
they have changed their password.
Transparency is often a cited goal for security sys-
tems. However transparency is often translated to a lack
of feedback and this leads to many usability problems as
users are unable to form an accurate mental model of the
system and its operation. Two participants never realized
that they only needed one password with P-Multiplier.
Each time, they entered a clear text password in the web
site’s password ﬁeld, double clicked to activate the dialog
box and then entered the master password. They never
realized the generated password was overwriting their
clear text password and that they did not have to man-
ually enter anything into the web site’s password ﬁeld.
P-Multiplier’s authors state that their plug-in helps to
protect against phishing attacks. While this is true, it re-
lies on the assumption that users correctly use the system.
This is a problematic assumption, as from our observa-
tions, users frequently entered their plain text passwords
and resorted to random guessing because they could not
correctly use P-Multiplier. In these cases, users are no
more protected against phishing than they would be with-
out a password manager.
(Some users might possibly
be less diligent in scrutinizing sites because they assume
that the software is protecting them.)
Users had high expectations of the password man-
agers. They expected that any password generated by
the software should be extremely strong, regardless of
their own input. One web site offered a “strength-meter”
when changing passwords, rating the strength of new
passwords. When the password manager failed to gener-
ate a password considered “strong” by the web site, users
expressed their concern and disapproval. Speciﬁcally,
passwords generated by P-Multiplier were often rated as
“medium” by Hotmail rather than “strong”. Users felt
that if they chose their own passwords, they would be
able to produce a strong password.
P-Multiplier’s solution for changing a password once
it is protected is nearly impossible for users to under-
stand. Of those who did understand it, they expressed
frustration at now having to remember the modiﬁed do-
main and having to enter it each time they logged in to
this web site. There also seems to be a bug in the pro-
gram where users were able to change their password by
entering a different master password instead of changing
the domain. The plug-in accepted this incorrect master
password and somehow generated a new password for
the site. It was unclear whether the passwords so gener-
ated were secure, and it violated the user’s mental model
that all passwords in P-Multiplier are protected by a sin-
gle master password.
5.4 Usability problems causing security exposures
Usability problems are of general concern in HCI and
should also concern the security community because
they may also lead users to bypass security mechanisms.
Here, we comment on a separate matter: usability prob-
lems which may directly cause security exposures, even
when the user has the intention of complying with the
security mechanism.
The ﬁrst concern is users failing to properly activate
the respective mechanisms (e.g., failing to enter @@ or
double-click the web site password ﬁeld). For both pass-
word managers, when users enter their password but for-
get to invoke the mechanism, the (raw) password is sent
on as if the manager software was not installed, naturally
exposing it to JavaScript and phishing attacks – both of
which PwdHash was designed to counter. In the case of
P-Multiplier, this exposes what is the master password,
sufﬁcient to generate site passwords for many sites. This
user error is a factor in three possible failure outcomes
(Dangerous Success, Failure, False Completion).
The same problem exists when users change pass-
words. The interface requires entering the old password,
the new password, and re-entering the latter.
In some
cases, users activate the respective mechanism for the
ﬁrst new password ﬁeld, but then re-enter their password
the second time without activating it.
A different problem resulted from user confusion.
When users failed to correctly activate the mechanism,
some started guessing, entering all passwords they could
think of, with and without the activation sequence. In this
12
Security ’06: 15th USENIX Security Symposium
USENIX Association
case, a phishing site (or JavaScript attack) could harvest
a number of passwords of interest.
Another generic danger, not speciﬁcally related to the
password managers in question, is that users who be-
lieve a password manager mechanism will be used may
be more inclined to choose a simple (low-entropy) pass-
word, believing it will be strengthened; when it is not, it
may be even more vulnerable to dictionary attacks.
6 Further Discussion and
Recommendations
As discussed in Section 1, the problem of establishing
and managing strong passwords for large numbers of ac-
counts is unlikely to disappear soon. While password
managers offer a solution, current implementations suf-
fer from signiﬁcant usability problems, which in our ob-
servation fall into two main categories: (1) users’ mental
models; and (2) users’ views on the necessity of tools
such as password managers, and acceptance (their will-
ingness to hand over control of passwords to a computer
program). We discuss these, in turn, in Sections 6.1 and
6.2. In Section 6.3, we consider additional criteria for
security software to be usable.
6.1 Mental Model
Incorrect user mental models appears to be the biggest
problem with the two password managers tested. While
manifested in different ways, the common cause is that
users do not even have a high-level understanding of
what the manager programs are doing. The importance
of a mental model for usability in security is a key is-
sue identiﬁed by Whitten and Tygar [31], and as early
as 1975 by Saltzer and Schroeder [25].6 To be usable,
a system must support a user’s mental model, and must
ﬁt into their regular work patterns. This is not simply a
matter of user satisfaction; failure to do so can result in
security exposures. Through interactions with a system,
users form a mental model as a mechanism to help in
understanding, learning, and remembering. The primary
means of doing so is by interpreting the actions and in-
terface of the system as they are presented; an incoherent
or inappropriate presentation leads to an erroneous, or
incomplete model. A user’s model serves as the basis
for their interactions; thus improper models often lead to
major usability problems. Norman’s [21] Gulf of Eval-
uation is a measure of how much effort must be exerted
to determine whether the system actions correspond to
the user’s intentions and expectations. Ideally this gulf
should be small, indicating that the system provides ac-
curate, understandable, and visible feedback to the user.
It is the responsibility of a good designer to ensure that
users have the cues needed to form an accurate and com-
plete mental model of a system [20]. Although the us-
ability literature has long supported the need for accurate
mental models, this seems not yet to be common knowl-
edge – or perhaps more correctly, not common practice –
for the security community. Users need not fully under-
stand the details of complex security programs, but rather
need a mental model that is consistent, and that will al-
low them to predict program behaviour and the results of
their own actions.
In addition, the interfaces should provide better feed-
back. It is a well accepted usability principle that system
feedback is necessary to narrow the Gulf of Evaluation
and for users to develop accurate mental models. In our
study, users were often left in states where they could not
tell if their actions had been successful. In some cases,
the systems provided feedback but it was not noticed by
the users. P-Multiplier changed the background colour of
the password ﬁelds containing generated passwords, but
in our study not one user remarked on this subtle change
or appeared to have noticed it. PwdHash alerted users
when they tried to enter a password in a non-password
ﬁeld. However this alert sometimes appeared when users
were in a valid ﬁeld and its wording was confusing for
users. Most users simply dismissed the warning. Partici-
pants were also confused when something had obviously
gone wrong, but they received no feedback as to what
may have caused the problem or how to recover from it.
In their effort to be unobtrusive and subtle, these inter-
faces have reached a point where they are impossible to
comprehend due to a lack of cues.
We make the following suggestions regarding feed-
back provided to users by the password managers tested:
1. It should be obvious when a password has been pro-
tected.
2. It should be obvious when the plug-in has been ac-
tivated and is awaiting input. This directly contra-