记⼀次CS RCE曲折的复现路 
0x00 前⾔ 
就在前⼏天，⽆敌的北⾠少爷向CS官⽅提交了⼀个RCE漏洞，通过该漏洞可以在捕获攻击者的beacon后
向teamserver发送包含xss的数据，经过反射后最终在攻击者的client上执⾏RCE，该漏洞编号为CVE-
2022-39197。可⻅这是⼀个可遇不可求的反制⿊客的神洞，安服仔的噩梦。既然是暴打jb⼩⼦的漏洞，
那⼀定要复现⼀下，于是我下定决⼼燃烧精元死命肝，在群友的⼤⼒⽀持下终于跌跌撞撞的完整的复现了
该漏洞。回过头来看这⼏天，真是学了⼀⻋⽪的东⻄。
0x01 起点 
相信⼤家在这⼏⽇都已经⻅过了插img标签来获取⼀个反弹的get请求，⽐如
在UI组件⾥写⼊  就会得到这样的效果
这是⼀个demo的java swing的代码，在jlabel⾥我直接输⼊了payload就会得到⼀个渲染失败的图⽚，学过
基础的xss的都知道，这就是个html的img标签渲染失败的样⼦。这也意味着如果填⼊了远程地址，就会对
远程服务器发送get请求。这也是这⼏天最常⻅的基础利⽤。
那么这是为什么呢？没错，这就是swing（⼀种java GUI的库）⾃带的特性，也是⼀切的起点。
我们直接⾕歌搜索swing html，第⼀条就是官⽅教你如何在swing⾥使⽤html标
签。 https://docs.oracle.com/javase/tutorial/uiswing/components/html.html
看到没，⽂档⾥直接告诉我们⼀个事实：在内容的开头插⼊  标签后续的内容就会被格式化为html
⽂档进⾏解析，也就是说⽀持html标签。
这⾥有个关键点就是at the beginning of the text，也就是说必须是开头插⼊  才⾏，这个点很关
键记⼀下。
⼤部分鲁特们看到这⾥，可能就很显然的认为既然⽀持html标签了那是不是直接套⼀套XSS那⼀套就可以
RCE了，这么看来北⾠也没什么了不起，我直接插⼀个
想怎么弹怎么弹，甚⾄还能引⼊外部js⽂件进⾏更多的XSS2RCE，这个漏洞没什么了不起，不过是他北⾠
发现了这个特性罢了。
很显然，事情没有那么简单，甚⾄复杂度超出你的想象。
0x02 swing的html解析器 
但凡盲测过也都会发现其实script标签是不⽣效的，不仅仅是script标签，很多标准的标签在swing这个场
景⾥或多或少都受到⼀些功能限制。那么要实现RCE的话，突破点在哪⾥呢？这时候我们就需要从swing
的代码⾥寻找答案了。
打开jdk的rt.jar包，我们可以定位到swing的包内容
接下来就是在swing⾥找答案了。
可以看到带了⼀个套的html解析器，我们打开那个HTML啥的类随便看看
会定义⼀⼤堆常⻅的html标签和属性，有标签定义那⼀定有标签解析之类的。东⻄太多我也不是⾮常看得
懂，我就⼤概挑⼏个点说⼀下，⾸先是他定义了标签和对应的action
⽐如我们熟悉的link标签
会关联到linkaction
会专⻔判断rel是不是stylesheet，是的话可以使⽤href去引⼊外部的css，但是如果你去查link⽀持的属性
还会发现标准⾥⽀持⼀⼤堆的type，会有⼀⼤堆的骚操作，但是在这⾥他只有这两个type实际测下来是有
反应的。
从注释和代码⾥我们也能看到script标签是不⽀持的，这⾥其实写的也不太对，但是⾄少可以说明这些标
签不是不⽀持，就是功能有残缺，实际上也是如此。
然后再来看另⼀⽚段
在HTMLEditorKit⾥的create⽅法可以看到不同的标签会对应到创建不同的view
这⾥重点来了，⾸先看这个object标签，这是个啥呀？我们跟进去看看
通过阅读注释我们可以了解到，这个objectview⼤体上就是可以实例化⼀个符合要求的类并且通过param
进⾏参数传递！
这有股天然的反序列化的味道了，因此这是RCE的⼀个极⼤可能的突破点。围绕这个object标签我们可以
做的事情突然就从弹图⽚开始突破到了实例化任意类。
先来看看后续的代码
明显的反射调⽤并且实例化类，这⾥要注意的是他还加了个限制判断，也就是实例必须继承与
Component，否则就抛出异常。这也⼤⼤限制了我们所能操作的范围。
我们继续跟⼊setParameters看看是怎么传递参数的
总结下来就是：
1. classid传⼊需要实例化的类，类必须继承与Component
2. 必须有⽆参构造⽅法，貌似是因为newinstant是调⽤的⽆参构造⽅法
3. 必须存在⼀个setXXX⽅法的XXX属性
4. setXXX⽅法的传参数必须是接受⼀个string类型的参数
因此找到符合上述条件的类和属性，接着看实例化后能做啥事即可。
⽐如我们可以简单的来测试⼀个
可以看到jlabel有⽆参数构造⽅法，并且有setText的满⾜条件的属性
那么我们可以构造
那其实就变成了从lib包⾥寻找符合条件的类和⽅法看看能不能最终做到RCE。
在寻找符合条件的类之前我们先来看看这个标签，假设我们已经找到了能够RCE的链，他会是什么样⼦
呢？
加载远程payload，⽐如jndi什么的
或者是直接打开本地的exe之类的
⼜或者是命令注⼊
是不是这⼏种的可能性最⼤？
关于⽤哪条链，我这边就不公开了，有兴趣的同学按照这个思路来寻找我相信很快就能在⼏百个类中找到
可能的链了。
接下来关于payload的⻓度，这怎么看都得六七⼗以上了，那么就会引出后续的⼀些限制问题。
0x03 CS⾃身的限制 
⼤家也都知道如何利⽤模拟beacon协议来插⼊img标签了，我这边再简单复述⼀下
https://github.com/LiAoRJ/CS_fakesubmit
这是⼀个模拟beacon的上线包的脚本，之前是⽤来打dos⽤的，现在可以⽤来插⼊payload，具体⽤法
github⾥都有我就不赘述了。
当插⼊数据的⻓度较⻓时，我们会发现⼀个问题：
这⾥加上⻓payload后整体的包⻓度为132字节，⽽他报错意思是整个空间只有117字节，也就是说payload
是有最⼤⻓度限制的。我们来更具体的解析⼀下为什么会有⻓度限制。先来⼤概了解⼀下beacon和team
server之间的交互流程，其实我也是临时百度的⽂章⾃⼰，基本上搜⼀下就有了类似的协议解析⽂章。
我也不赘述太多，⼤家可以先⾃⼰看⼀看⽂章
https://www.ijiandao.com/2b/baijia/423712.html
简单来说分为两部分，第⼀部分是上线包，上线包是由RSA加密的metadata插在cookie⾥，这个
metadata就是元数据，⼤体包含⼀些基本信息⽐如⽤户名、主机名、操作系统信息和AES KEY等。
teamserver通过metadata⾥解析这些数据后显示在⾸⻚，从⾥⾯获取aes key后⽤于后续的任务下发相关
的数据加解密。
⽽我们再来看CS的client的⾸⻚都有啥
没错，就是这熟悉的⼏个字段，这些字段中⼤部分信息都来⾃于metadata。⽽metadata⾥的数据就是我
们可以控制的插⼊到teamserver上进⾏展示的数据。
回到117字节限制问题上来，我们在到CS的代码⾥看⼀看
我们来到cs的teamserver的代码⾥直接搜117:
跟进asymmetricCrypto.java⾥看看
再来看fake client的代码
是不是对应上了？这⾥有个⻓度字段，可以看到服务端是获取的我们传输的⻓度字段来做判断的，那有的
同学就要问了，如果我把payload写的很⼤，但是⻓度给他传1是不是就过了校验了。答案是不⾏，有这个
校验的根本原因在于RSA的加密算法本身对明⽂加密⻓度的限制
⽽cs在加密metadata的时候⽤的RSA密钥的⻓度为128位，因此减去11刚好是117位。这个硬性的包体总⻓
度限制是绕不过去的。
那么payload最多可以压缩到什么程度呢？
回到fake client⾥我们看⼀下
可以看到前⾯⼀⼤坨都是改不了的，不是数字就是标识位写死的，会被teamserver⼀个个读取出来解析，
我们的payload是字符串，你可以简单的认为数字位的都是不能⽤的。那最终可以写⼊payload的只有这⾥
的computername、username、processname，对应到界⾯上就是这三个
这⾥还有个知识点就是，如果我们要插⼊有效的payload，肯定只能全部插⼊到⼀个单元格⾥，⽽不能三
个单元格格⾃插⼀部分来进⾏合并。因此我们看⼀下这三个字段在teamserver⾥是什么样⼦的形式
可以看到是直接以 \t 来切割字符串获取三个字段内容的，也就是说如果我们不⽤ \t 就可以把所有内容
都写到⼀个单元格⾥⽽且还能少省下两个字节的tab符号
这⾥的 \x09 也就是 \t ，因此我们把这些都去了直接写payload就可以获取到最⼤可以操作的⻓度。这个
⻓度为117-51=66，然后还要减去magic number和⻓度的8个字节，因此是66-8=58的⻓度限制。
当然这是metadata的⻓度限制，但如果我们从后续的aes通信⾥打⼊payload则不受这个限制，这个会在
后续再讲。
0x04 jdk版本带来的变数 
考虑到metadata有payload的限制，⽽前⾯说了利⽤object标签的话基本上你实际⽤过了就会发现58个字
符的⻓度根本就不够，压缩不下来，如果你找到的链很复杂就更不可能了。那么从⼀个受限制的payload
引申到不受限制的payload呢？
⼀般来说我们在浏览器场景上会很容易的想到引⼊iframe标签来引⼊外部⻚⾯，引⼊外部⻚⾯也就是意味
着引⼊外部html标签，那么这引⼊的外部html内容就不会受到⻓度限制了。可是当我们使⽤iframe标签盲