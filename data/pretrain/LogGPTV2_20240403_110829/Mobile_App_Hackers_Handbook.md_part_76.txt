Using the shared memory sample app previously referenced provides a good basis upon which to build an app to
read out the shared memory of other processes.
Identifying those apps that use shared memory primarily occurs via static analysis of either the code or binary.
That is, you look for programs that import the shm_open API or have a QSharedMemory
(http://developer.blackberry .com/native/reference/cascades/qsharedmemory.html) object. In the case of
Cascades, applications will allow you to identify such apps. It will then be a case of finding the name (if it is
indeed named) to attempt to connect to it.
PPS Objects
Persistent Publish/Subscribe (PPS) objects on BlackBerry are stored under the /pps path and can be created by
apps either via the Cascades class PpsObject
(http://developer.blackberry.com/native/reference/cascades/bb__ppsobject .html) or via a standard
POSIX file API such as open; for example, open ("/pps/an-object", O_RDWR | O_CREAT);.
Enumerating an app’s attack surface is as simple as enumerating the /pps namespace before and after
installation and execution of the app, or if persistent PPS objects are used by backing up the app, you’ll also get a
copy of the PPS objects.
Note that PPS objects are encoded. The example provided here is borrowed from
http://www.qnx.com/developers/docs/660/index.jsp?topic=%2Fcom
.qnx.doc.pps.developer%2Ftopic%2Fpps_encode.html:
pps_encoder_t encoder;
pps_encoder_initialize(&encoder, false);
pps_encoder_start_object(&encoder, "@gps");
pps_encoder_add_double(&encoder, "speed", speed);
pps_encoder_add_string(&encoder, "city", city);
pps_encoder_start_object(&encoder, "position");
pps_encoder_add_double(&encoder, "longitude", lon);
pps_encoder_add_double(&encoder, "latitude", lat);
pps_encoder_end_object(&encoder);
pps_encoder_end_object(&encoder);
if ( pps_encoder_buffer(&encoder) != NULL ) {
write(fd, pps_encoder_buffer(&encoder), pps_encoder_length(&encoder));
}
pps_encoder_cleanup(&encoder);
Using this code results in a PPS object that would look like this
(http://www.qnx.com/developers/docs/660/index.jsp?topic=%2Fcom.qnx.doc.pps
.developer%2Ftopic%2Fpps_encode.html):
@gps
speed:n:65.412
city::Ottawa
position:json:{"latitude":45.6512,"longitude":-75.9041}
The native C functions for encoding and decoding are not documented in the BlackBerry 10 API. Instead, you
can reference the QNX documentation (http://www.qnx.com/developers/docs/660/index.jsp?
topic=%2Fcom.qnx.doc.pps .developer%2Ftopic%2Fpps_api_reference.html). For Cascade applications, the
PpsObject exposes versions of the encode and decode functionality, which is documented at
http://developer.blackberry.com/native/reference/cascades/bb__ppsobject.html.
To attack PPS objects, you apply three types of attack:
Squatting—Squatting on a PPS name for an app that will be installed at a later point allows you to supply
information to consumers.
Reading—Access sensitive information such as configuration data or personally identifiable information
that is revealed over a PPS object.
Writing—Write PPS data that is consumed by the server. This is possible because PPS supports multiple
publishers that publish to the same PPS object.
Room exists for some mischief in the context of PPS objects.
Channels, Messages, and Events
Channels is a slightly confusing term in BlackBerry 10. BlackBerry has repurposed a QNX core concept into a
term it uses specifically in the context of BlackBerry Platform Services (BPS)
(http://developer.blackberry.com/playbook/native/reference/com.qnx.doc.bps.lib_ref/com.qnx.doc.bps.lib_ref/topic/overview.html
Specifically, in the context of BPS there is an API called bps_channel_create which is used to implement this
repurposed meaning (http://developer
.blackberry.com/playbook/native/reference/com.qnx.doc.bps.lib_ref/com.qnx.doc.bps.lib_ref/topic/bps_channel_create.html
However, within the context of QNX a lower-level concept of channels is implemented via a number of kernel
level APIs:
The lowest level of these APIs is
ChannelCreate—To create the listening half of a channel http://developer
.blackberry.com/native/reference/core/com.qnx.doc.neutrino .lib_ref/topic/c/channelcreate.html
ConnectAttach—To connect as a client to the listening half of a channel
http://developer.blackberry.com/native/reference/core/com.qnx
.doc.neutrino.lib_ref/topic/c/connectattach.html
To use ConnectAttach you need to know a Node Descriptor (ND), a process ID (PID), and a channel ID (CHID)
to be able to attach to a server. Blackberry provides several ways for you to obtain this information (that is,
advertised to other apps) in its documentation
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.neutrino.getting_started/topic/s1_msg_find77.html
However, at times you may need to try to brute-force these items.
A slightly higher-level version of the channels APIs exists for cross-process communication:
name_attach—Use this to register a name in the namespace and create a channel
(http://developer.blackberry.com/native/reference/core/com.qnx.doc.neutrino.lib_ref/topic/n/name_attach.html
name_open—Use this to open a name for a server connection
(http://developer.blackberry.com/native/reference/core/com.qnx.doc
.neutrino.lib_ref/topic/n/name_open.html).
You can find a couple of examples that show how channels are used in various apps for IPC. For example, to
create and connect to a channel across threads and use pulses for events, check out this site:
https://github.com/blackberry/Presentations/blob/master/2012-BlackBerryJam-
Americas/JAM15/FaceFilter/src/main.cpp
The likelihood you will see the use of channels outside of events in apps and their being vulnerable in some way
is low.
Higher-Level Concepts
In addition to the specific attack surface elements discussed already in this chapter, several other higher-level
concepts are worth considering when attacking BlackBerry applications.
Network Traffic
As with apps on other OSs, the analysis of network traffic for the lack of encryption or network analysis when
protocols, such as SSL/TLS, are used are common tasks that we perform to validate the implementation if the
verification of certificates is performed as well. The techniques employed to attack BlackBerry apps are no
different than those used on other mobile OSs that don’t easily allow instrumentation or where proxy settings
may not be honored. For suggested approaches and relevant caveats, read Chapter 14’s section called “Network
Traffic Analysis and Interception.”
Invocation Framework
The Invocation Framework addresses the concept of bounded and unbounded invocation.
First and foremost, there are two kinds of invocations—unbound and bound. An unbound invocation is
performed when an app does not specify a specific target app that should get invoked, and hence relies on the
invocation framework to select the best target. For example, if there are three apps that can open .DOC files,
the framework chooses the best one based on its own target selection logic. So, for unbound invocations, the
framework provides automatic brokering to find the best-fit targets and also performs target selection to
choose the best among the best.
http://devblog.blackberry.com/2012/08/blackberry-10-invocation-framework/
You primarily want to focus on bounded invocations because you want to target a specific application. To
understand what an app’s Invocation Framework attack surface is, you need to look in its bar-descriptor.xml.
Within this file there will be  tags; for example:
Foo Monster
icon.png
foo.monster
bb.action.OPEN
*
This code snippet says that it handles file URIs that end in .monster for OPEN requests. When attacking
Invocation Framework clients you will use these definitions to attack with URIs or files that are either
malformed to cause undesirable behavior in the target app or to cause files or URLs to be accessed that lead to a
second-stage attack.
Clipboard
To retrieve information from the clipboard that might be sensitive you need to use the Clipboard class in the
Cascades API (http://developer.blackberry .com/native/reference/cascades/bb__system__clipboard.html).
The challenge is you need to explicitly specify the MIME type; that is, text/plain, text/html, or text/url.
These types were identified by looking at the source code from the WebKit BlackBerry Port
(https://github.com/adobe/webkit/blob/master/Source/WebCore/platform/blackberry/ClipboardBlackBerry.cpp
The SDK documentation says:
Data in the clipboard is referenced by type. Multiple types of data can exist in the clipboard at the same time.
Each type typically refers to a different encoding of the same data. For example, an application copying data
from an HTML source might insert both HTML markup and plain text into the clipboard.
. . .
A type can be any non-empty string. For compatibility with other applications, using Internet media types
(i.e., MIME types) is recommended. For example, text/plain, text/html, and text/rtf are three commonly
used encodings for textual data.
http://developer.blackberry.com/native/reference/cascades/bb__system__clipboard.htm
Due to this limitation, doing a number of requests with a variety of MIME types makes sense if you are looking
to monitor the clipboard for changes. If you are writing an app to monitor the clipboard then make sure you
request the run_when_backgrounded capability; otherwise, your app won’t execute when it’s not in the
foreground.
Summary
This chapter covers a number of ways that you can attack apps, from low-level operating system interprocess
communication mechanisms through to higher-level, BlackBerry-specific concepts such as the Innovation
Framework.
The attack you apply will depend on the type of app, attack surface, and the app’s specific functionality. For
example, you may want to assess a WebWorks app for susceptibility to script injection vulnerabilities by looking
at the sources and syncs for data retrieved and processed by app. In the WebWorks extension example where
the authors embedded their own webserver (https://github .com/blackberry/WebWorks-Community-
APIs/tree/master/BB10/mongoose), you might look at the index.html and associated JavaScript to see whether it
pulls in a file from /shared (it doesn’t) that was under your control.
Attacking BlackBerry 10 apps is not dissimilar to attacking any other POSIX compatible–based mobile device
apps. Yes, attacking BlackBerry 10 apps has a few unique aspects due to QNX being the underlying operating
system, plus the way BlackBerry 10 is architected from a security perspective and the presence of some higher-
level functionality. However, on the whole, the attack methodologies you would employ for native (that is,
C/C++) or web (HTML5/JavaScript) apps apply when you’re assessing BlackBerry 10 apps.
CHAPTER 16
Identifying BlackBerry Application Issues
The preceding chapters discussed how to start analyzing BlackBerry 10 apps and how you might go about
attacking them. This chapter covers specific classes of vulnerability and how you go about identifying them
within the apps being assessed.
BlackBerry apps are not radically different from apps on any other platform. Thus the classes of issue that they
are potentially susceptible to are not radically different compared to other platforms either.
When you do practical and risk-aware assessments of apps, you are primarily concerned with attacks that fall
into five categories:
App permissions—The permissions requested by the app need to be proportional and essential to the
functionality the user expects. Determine whether the permissions requested are excessive in nature.
Data storage—The app should store data in such a way that information is not exposed unnecessarily, and
data that is accessible should not undermine the app's security.
Data transmission—Data should be transmitted by the app in a secure and integral manner proportional
to the sensitivity of the data.
Personally Identifiable Information (PII) handling and privacy—Where PII data or other privacy-
infringing data is processed and transmitted by the app, developers should be respectful of the user's privacy
and opt for providing informed consent.
Secure development—Developers should write the app in a broad and secure fashion to mitigate against
vulnerabilities that may lead to the compromise of the app itself either via local or remote means. This
category primarily deals with the lower-level programming language, operating system, and packaging
primitives. Check that developers haven't introduced security weaknesses or omitted mitigations.
Each of these five core categories may be comprised of many subcategories. These subcategories include things
such as cryptographic operations in the case of data transmission; this subcategory will in turn have a
subelement that ensures that the pseudorandom number generator source used for key material generation is
correct. Another example might be in relation to secure development with a subcategory of intellectual property
protection with a subelement of obfuscation or jailbreak detection.
Finally, a very broad category of consideration is privacy of the user beyond just PII. For example, tracking users
in apps that do not handle sensitive PII may still violate user privacy. The GSM Association provides some good
guidelines on this topic in the publication from 2012 titled, “Privacy Design Guidelines for Mobile Application
Development” (http://www.gsma.com/publicpolicy/privacy-design-guidelines-for-mobile-application-
development). Vodafone also provides some privacy guidelines in the form of an online reference
(http://developer.vodafone.com/develop-apps/privacy/privacy-guidelines/).
Limiting Excessive Permissions
Permissions form an application's first line of defense because they not only inform the user what the app needs
but also limit the impact if an app is compromised. In Chapter 14 we discussed application capabilities, which
are the manifestations of permissions on the BlackBerry platform. Also in Chapter 14 we discussed the app
packages and BAR files. MANIFEST.MF is the app's manifest file, which defines the permissions or capabilities the
apps needs. You define permissions within the manifest in Entry-Point-User-Actions.
To audit permissions:
1. Obtain the BAR file and/or MANIFEST.MF.
2. Where a BAR file is obtained, extract it as a Zip file.
3. Review MANIFEST.MF, specifically the Entry-Point-User-Actions, against the published list of capabilities
from BlackBerry ( http://developer
.blackberry.com/native/documentation/core/com.qnx.doc.native_sdk
.devguide/topic/c_appfund_accessing_restricted_functionality.html).
Determining whether an app is requesting too many permissions will normally involve a discussion with the
developers unless the app is obviously overly aggressive.
Resolving Data Storage Issues
The common types of data storage security issues include the following:
Storing information such as credentials or sensitive personally identifiable information in the shared data
directory, which is accessible to other apps with the access_shared capability
Storing configuration or execution-influencing files (that is, scripts) that undermine the app's security in the
shared data directory, which is accessible to other apps with the access_shared capability
Storing information that is highly sensitive to a service in the app's BAR file on the presumption it won't be
accessible
Storing information that is highly sensitive to a service in the app's sandbox on the presumption it won't be
accessible
These classes of issues can potentially impact the security or privacy of the user or potentially the app and its
supporting services. Over the years we've seen numerous examples of apps that embed secrets the developers
did not expect to be discoverable, however when pointed out required a significant re-architecture of the app in
order to resolve in a robust manner.
Auditing Shared Files
The easiest way to audit for issues involving shared files is to use SSH (Secure SHell) access to the device to take
a listing of the pre- and post-installation and usage (ls -
RLlathttp://www.qnx.org.uk/developers/docs/6.3.0SP3/neutrino/utilities/l/ls.html). An alternate method
is to use one of the many file browsers available in the App Store. For further information on shared files and
accessing files refer to Chapter 15 and the section titled, “Files.”
In addition to checking shared files, you should also check the system logger or slogger
(http://developer.blackberry.com/native/reference/core/com.qnx.doc.neutrino.utilities/topic/s/slogger.html
to see whether sensitive information is being logged.
Checking BAR Files
Auditing for sensitive information contained in BAR files is simple:
Obtain the BAR and/or MANIFEST.MF.
Where a BAR file is obtained extract it as a Zip.
You should then review each file for sensitive files, taking care to understand and investigate that any data or
files are actually archives or encoded in some manner (for example, BASE64). A useful tool for identifying file
types of common binary formats is the Linux file utility or any other utility that uses libmagic
(http://sourceforge.net/projects/libmagic/).
Reviewing the Application Sandbox
To be able to identify files that contain sensitive information in the app's sandbox, you first need to perform a
backup of the device using BlackBerry Link so you can access information that is not shipped as part of the BAR
file. You must then decrypt this backup file using a tool such as Elcomsoft Phone Password Breaker Forensic
Edition. The “Accessing App Data from a Device” section of Chapter 14 covers how to use this tool.
After you decrypt the backup file you are left with a .bbb file that contains three .tar files. The appdata.tar
contains the information you are interested in. Inside appdata.tar is a subdirectory for each of the installed
applications, including the app's private sandbox storage. You can then locate the subdirectory for the app in
which you are interested and review it. As with BAR files, carefully reviewing files that are not ASCII is
important because they also may contain easily decodable sensitive information.
Checking Data Transmission
When assessing an application's data transmission mechanisms you are interested in the following:
Sensitivity of the information and whether it should be encrypted.
Integrity requirements for the information and whether its integrity should be guaranteed.
Encryption and/or integrity checks are required if the protocol versions or ciphers used are known to be weak.
Encryption
To assess whether the transport security from the device to an online service is present, you first need to be in a
position to intercept traffic. How to do this is covered the section, “Network Traffic Analysis and Interception” in
Chapter 14. Analyze all traffic to and from the app for the presence of cleartext data that is weakly encoded or
encrypted, or that uses encrypted connections that are easy to intercept. The general rules are
Authentication-related information should be encrypted, including credentials and session tokens for
services protected by such mechanisms.
Sensitive PII including unique device or user tracker identifiers should be encrypted in transit.
Any encryption mechanism used to protect transport data should mitigate both active (man-in-the-middle)
and passive (traffic analysis) attacks.
The most common way to implement transport security is to use SSL (Secure Socket Layer) or TLS (Transport
Layer Security). Where possible, all apps should utilize TLS 1.2 or higher, which was introduced in OpenSSL
1.0.0h and OpenSSL 1.0.1. If TLS 1.1 needs to be supported for server compatibility, it can be, however given the
disclosure of the Poodle vulnerability (https://www.us-cert.gov/ncas/alerts/TA14-290A). SSL 3.0 and lower
should not be supported.
With regards to TLS usage within an app, you want to understand the following:
Which protocol versions are supported and whether protocol downgrade or renegotiation attacks are possible
Which ciphers are supported
Whether certificate validation is performed up to a trusted Certificate Authority
Whether Certificate Authority path validation is performed to verify that it chains to an expected CA