# From Mental Poker to Core Business: Why and How to Deploy Secure Computation Protocols?

**Author: Moti Yung**

**Affiliation: Google Inc. and Columbia University**

**Email: [PI:EMAIL]**

## Abstract

Technological innovations in security and privacy are crucial for advancing modern computing. This paper presents an effort to deploy experimental commercial applications designed as "secure multi-party computation (MPC) protocols" for specific tasks, to be used repeatedly to achieve concrete, ubiquitous business goals. In these applications, outputs are calculated under privacy constraints that prevent parties from sharing their individual inputs directly and openly.

The paper also discusses the inherent difficulties in developing such routines for achieving business goals. Despite the theoretical and experimental success of secure computation protocols, which were introduced nearly 40 years ago, they have not been widely adopted for routine business purposes. This contrasts with symmetric key and public key cryptosystems, which were also proposed around the same time and are extensively used, primarily for implementing secure authenticated channels.

The presentation will cover the bottom-up methodology used in this effort, including:
- A feasibility study of the specific domain
- Extraction of business needs limited by privacy constraints
- Application analysis from the perspective of utility metrics and secure computing
- Design, implementation, and experimentation, guided by the analysis and employing appropriate protocols, while considering scale, performance, and cost overhead.

## Categories and Subject Descriptors

Security

## Keywords

Privacy, deployment, cryptography, business applications, experimentation, cryptographic protocols, secure computation protocols

## Permission

Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the Author. Copyright is held by the author.

CCS'15, October 12–16, 2015, Denver, Colorado, USA.
ACM 978-1-4503-3832-5/15/10.
DOI: http://dx.doi.org/10.1145/2810103.2812701

## Short Bio

Moti Yung is a computer scientist with a focus on cryptography, security, and privacy. He currently works at Google. Yung earned his Ph.D. from Columbia University in 1988. He has worked at IBM Research, served as vice president and chief scientist at CertCo, and was director of Advanced Authentication Research at RSA Laboratories. He has held adjunct faculty positions at Columbia University, where he co-advised several Ph.D. students, and has consulted for leading companies and government projects. Yung's major interests include building strong, practical foundations for the field and transforming theoretical ideas into practice. He has contributed extensively to numerous new cryptographic ideas, techniques, protocols, and systems, and to central notions such as public key cryptosystems secure against chosen-ciphertext attacks. His contributions have led to practical system implementations in large-scale systems and networks, including IBM’s SNA network authentication, the distributed certification authority for Visa and Mastercard’s SET initiative, the Greek National Lottery system, and various security and privacy aspects of Google’s global systems.

## Synopsis

Modern cryptography deployment in commercial systems can be characterized by two distinct generations. The first generation, "symmetric key cryptography," was employed by banks in the 1970s, leading to the development of the Data Encryption Standard (DES). This enabled secure communication channels and authenticated messages based on a shared key, protecting against eavesdroppers. The evolution of distributed systems, especially the Internet and mobile networks, benefited from the second generation, "public key cryptography," first invented in the late 1970s and deployed on general PC platforms in the 1990s. This generation enabled the deployment of secure authenticated channels (e.g., SSL/TLS, IPSEC) as major tools for secure communication, with key management handled by the infrastructure itself.

The availability of public key cryptography in the late 1970s also led to the invention of a third area of cryptographic applications: "secure computation protocols." These protocols allow parties to collaborate while hiding partial information about their inputs, ensuring collaborative computing without revealing all privately known information. Since the 1970s, extensive literature on various protocols for specific tasks (e.g., elections, auctions) and general tasks (e.g., secure function evaluation) has been developed. Despite the theoretical advancements, commercial deployment of these protocols remains limited, and they cannot yet be considered the third generation of cryptographic technology.

This paper reports on a system in development that experiments with bringing secure computation protocols into mainstream commercial use. The system aims to solve concrete business problems involving information sharing and aggregation from mutually mistrusted entities, where the inputs need to remain private. The selection of the application area, motivation, and engineering background, as well as the development methodology, highlight the basic needs, issues, and approaches for exploiting new security and privacy technologies in solving business problems.

When developing secure computation protocols for a concrete application, it is essential to consider the following factors:
- **Generality vs. Specificity:** While secure computation is a general scheme, one must choose an application starting from a real business need, balancing security and privacy with other constraints.
- **Performance Requirements:** Given the inherent costs of secure computation, performance limitations should be reflected in the choice of problems and their scale.
- **No Easy Alternatives:** The needs should not be easily achievable by alternative methods, indicating that secure computation is essential to the problem.
- **Non-triviality of Sharing:** The problem should involve sharing inherently private information, with the computation being critical as determined by business analysis and development needs.
- **Understand, Employ, and Generalize Useful Routines:** Building more general routines and secure computation software packages may result from collecting examples of actual useful deployments and creating common APIs/software packages based on actual use and experience.

**Acknowledgments:** I wish to thank my colleagues at Google for their collaboration on the reported projects. Part of this work was written while visiting The Simons Institute for Theory of Computing at UC Berkeley.