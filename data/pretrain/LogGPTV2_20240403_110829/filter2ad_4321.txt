title:From Mental Poker to Core Business: Why and How to Deploy Secure Computation
Protocols?
author:Moti Yung
From Mental Poker to Core Business:  
Why and How to Deploy Secure Computation Protocols? 
Moti Yung 
Google Inc. and Columbia University 
PI:EMAIL 
Abstract 
Technological innovations in security and privacy are critical to 
advancing modern computing in our time. I will present an effort 
involving  deployment  of  experimental  commercial  applications 
designed and built as a `secure multi-party computation protocol 
for specific tasks,’ to be used repetitively to achieve a number of 
concrete  ubiquitous  business  goals.  In  these  applications,  the 
outputs  are  calculated  in  the  presence  of  privacy  constraints 
which prevent parties from sharing their individual inputs directly 
and openly. I will also discuss what I think are the reasons for the 
inherent  difficulty  of  developing  such  routines  in  general  (for 
achieving  business  goals).  In  particular,  I  will  survey  what  I 
believe  to  be  the  reasons  that  almost  40  years  since  secure 
computation protocols was invented as a basic theoretical notion, 
capturing  specific  and  then  general  computational  tasks,  and  in 
spite  of  its  theoretical  and  even  experimentation  success,  the 
notion  has  not yet  been  widely and  seriously  used  in achieving 
routine  relevant  business  goals  (in  contrast  with  symmetric  key 
and  public  key  cryptosystems  and  protocols,  which  were  also 
proposed  40  years  ago  and  are  used  extensively,  primarily  to 
implement secure authenticated channels). The presentation will 
also cover the general bottom up methodology used in this effort 
leading 
the  design  and  development  process.  This 
exemplifying  methodology  includes:  feasibility  study  of  the 
specific  domain,  extraction  of  business  needs  which  are limited 
by privacy constraints, application analysis from the perspective 
of utility metrics and secure computing. Then, the methodology 
further  includes  design,  implementation,  and  experimentation, 
guided  by  the  analysis  and  employing  appropriate  protocols, 
while  considering  scale  and  performance  constraints,  and  cost 
overhead that is tolerable. 
Categories and Subject Descriptors:  Security 
Keywords:   privacy; deployment; cryptography; business 
applications; experimentation; cryptographic protocols; secure 
computation protocols  
to 
Permission to make digital or hard copies of part or all of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. Copyrights for third-party components of this work must be honored. 
For all other uses, contact the Author.  
Copyright is held by the author. 
CCS'15, October 12–16, 2015,  Denver, Colorado, USA. 
ACM   978-1-4503-3832-5/15/10. 
DOI: http://dx.doi.org/10.1145/2810103.2812701  
 .
Short Bio 
Moti  Yung  is  a  computer  scientist  whose  main  interests  are  in 
cryptography, security, and privacy. He is currently with Google. 
Yung  earned  his  Ph.D.  from  Columbia  University  in  1988.  He 
worked at IBM Research, was a vice president and chief scientist 
at  CertCo,  and  was  director  of  Advanced  Authentication 
Research  at  RSA  Laboratories.  He  has  held  adjunct  faculty 
appointments  at  Columbia  where  he  co-advised  several  Ph.D. 
students  over  the  years,  and  served  as  consultant  to  leading 
companies  and  to  open  projects  with  various  governments  as 
well.  Yung’s  major 
interests  are  building  strong  useful 
foundations  for 
the  field  based  on  practical  needs,  and 
transforming  theoretical  ideas  into  practice.  He  has  contributed 
extensively  to  numerous  new  cryptographic  ideas,  techniques, 
protocols,  and  systems,  and  to  new  central  notions  (such  as  to 
innovating the notion of public key cryptosystems secure against 
chosen-ciphertext  attacks  -- currently a  major  requirement  from 
public-key  encryption  operating  on  the  Internet).  He  has  also 
contributed  to  innovative  constructions,  leading  to  practical 
systems  implementations  in  actual  large  scale  systems  and 
networks.  Examples  of  the  latter  are  IBM’s  SNA  network 
authentication, the distributed certification authority for Visa and 
Mastercard’s SET initiative, the Greek National Lottery system, 
the security and privacy aspects of Google’s global systems such 
as  the  Ad  Exchange  (ADX),  the  ephemeral  ID  efforts  within 
Google BLE beacons initiative, and some of Google’s most basic 
privacy  practices.  Yung’s  interest  in  trusted  systems  has  led  to 
inventing the notion of Cryptovirology, which predicted public-
key  based  ransomware,  and  the  notion  of  Kleptography:  a 
deniable  algorithm  substitution  attacks  on  cryptosystem,  which 
was  allegedly  mounted  within  the  deployed  American  Federal 
Information Processing Standard detailing the Dual_EC_DRBG. 
1 
authorities, 
encryption 
and  public-key 
 Synopsis  
Modern Cryptography deployment in commercial systems can be 
characterized as distinct two generations: The first one is that of 
`symmetric  key  cryptography,’  which  was  employed  originally 
by banks in the 1970’s, leading to the development of the Data 
Encryption  Standard  (DES)  cipher  and  standard.  This  enabled 
secure  communication  channels  and  authenticated  messages 
based on a key shared out of band, protecting the communication 
against  eavesdroppers.  The  evolution  of  distributed  systems, 
especially the Internet from the mid 1990’s and mobile networks 
and smartphones in the last decade or so, was, in turn, benefitted 
from  the  breakthrough  development  and  deployment  of  the 
second  generation  of  modern  days  cryptography:  Namely,  
`public  key  cryptography’  technology  first  invented  in  the  late 
70’s and was made possible to deploy on general PC platforms in 
the 90’s. In this generation, the availability of digital signatures, 
certification 
(in 
conjunction  with  symmetric  key  cryptography)  enabled  the 
deployment  of  secure  authenticated  channels  (in  SSL/TLS, 
IPSEC, etc.) as major tools in developing secure communication 
that  is  hidden  from  an  eavesdropper,  while  key  management  is 
handled by the communication infrastructure itself.  
The  availability  of  public  key  cryptography  in  the  late  1970’s 
also  led  to  the  invention  of  a  third  area  of  applications  of 
cryptography.  It  can  be  roughly  called  `secure  computation 
protocols,’  where  parties  collaborate  in  a  way  that  they  hide 
partial  information  about  their  inputs  from  each  other,  while 
computing a common function or a certain private utility. These 
protocols  (one  of  which  is  the  early  `mental  poker  protocol’ 
suggested  originally  in  1979)  are,  in  some  sense,  partial 
information  games,  assuring  collaborative  computing  without 
revealing  all that  is  privately known  by  the  different  parties.  In 
these protocols the adversary is not an outsider (an eavesdropper) 
but rather the collaborating parties themselves, which is a novel 
setting for applications of cryptography. Since the 1970’s a very 
extensive  literature  on  various  protocols  for  specific  tasks  (like 
elections,  auctions)  and  general  tasks  (like  secure  function 
evaluation  of  any  feasible  function),  and  foundational  work  as 
well,  have  been  developed.  Nowadays  the  vast  majority  of 
theoretical cryptography and foundations studies of the field are 
centered on this area. In contrast with the theoretical livelihood of 
the  sub-field,  commercial  deployment  of  the  basic  protocols  is 
essentially not developed, and the technology cannot be declared 
the  third  generation  of  deployment.  (This  is  so  in  spite  of  a 
number  of  initial  commendable  ongoing  efforts:  experimental 
works  concentrating  on  improving  performance,  open  source 
systems  (like  elections  and  crypto  currencies),  recent  startup 
companies  trying  specific  distributed  secure  computations  for 
well-defined tasks, and a showcase protocol which employs the 
technology  of  general  secure  computing  to  run  semi-annual 
auctions). But, it is safe to say that in spite of great efforts and in 
sharp contrast with the earlier two generations of cryptographic 
technology  deployment,  the  third  generation  of  cryptographic 
technologies  has  not  been  successful  commercially  to  date,  and 
presents a real challenge to developers of real systems. 
Here,  I  will  report  on  a  system 
in  development  which 
experiments  with  bringing  secure  computation  protocols  into 
mainstream  commercial  use,  namely  to  a  set  of  applications, 
solving concrete business problems that are performed routinely, 
the  application  area, 
solving  challenging  security  and  privacy  problems  involving 
information  sharing  and  aggregation  from  mutually  mistrusted 
entities holding inputs that need to remain private. The selection 
of 
the  motivation  and  engineering 
background,  as  well  as  the  development  methodology  indicate 
some  very  basic  needs,  issues,  and  approach  methodology  that 
allow  exploitation  of  new  security  and  privacy  technology  in 
solving  business  problems.  The  protocols  under  development 
compute  certain  financial  report,  subject  to  constraints  imposed 
on the selection of relevant inputs by the different parties, where 
these constraints and the inputs themselves must remain private.  
When  developing  secure  computation  protocols  for  a  concrete 
application,  one  has  to  first  realize  that  the  area,  so  far,  has  no 
real world experience. The first careful thought has to be given to 
the  reasons  for  the  lack  of  adoption,  and  this  stage  has  indeed 
been the starting point. In our case we realized that the typical top 
down  approach  as  appears  in  scientific  publications  in  the  area 
(theory  and  general  protocol  implying  applications)  has  not 
worked  to  date,  and,  therefore,  one  has  to  consider  a  different 
approach, taking the following factors into account : 
  Generality vs. specificity: Secure computation is a 
general scheme; in reality one has to choose an 
application, starting from a very real business need, and 
build the solution from the problem itself choosing the 
right tools, tuning protocol ideas into a reasonable 
solution, balancing security and privacy needs vs. other 
constraints: legal, system setting, etc. 
Performance requirements: since secure computation 
has cost, the performance inherent limitations should be 
reflected in the choice of problems and their scale.  
  No easy alternatives: The needs considered should not 
be easy to achieve by alternative methods, under a 
different trust structure or modified architecture, or in 
some relaxed form. Otherwise, the alternatives may be 
easier or cheaper to deploy (perhaps, indicating that 
secure computation is not inherent to the problem). 
  Non-triviality of sharing: the problem should involve 
sharing of information that is inherently private (from 
regulatory point of view, trade secret reasons, 
economic competition reasons, personal concerns, etc.), 
yet the computation should be critical, as determined 
by a true business analysis and actual business 
development needs.  
  Understand, employ, and generalize useful routines: 
Building more general routines and secure computation 
software packages of actual business value may, 
therefore, be a result of collecting various examples of 
actual useful deployments first, and then creating a 
common API/ software packages based on actual use 
and experience, in a bottom up fashion. 
Acknowledgments: I wish to thank my colleagues at Google for 
their collaboration on the reported projects. Part of this work was 
written while visiting The Simons Institute for Theory of 
Computing in UC Berkeley.      
2