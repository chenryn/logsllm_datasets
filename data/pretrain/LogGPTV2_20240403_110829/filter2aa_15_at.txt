）
        {
            foreach
（
$svar as $_k => $_v
）
$svar[$_k] = _RunMagicQuotes
（
$_v
）；
        }
        else
        {
          if
（
strlen
（
$svar
）
>0&& preg_match
（
'#^
（
cfg_|GLOBALS|_GET|_POST|_COOKIE
）
#'
，
$svar
））
        {
         exit
（
'Request var not allow
！
'
）；
        }
        $svar = addslashes
（
$svar
）；
      }
   }
   return $svar
；
}
而这里仅仅是使用addslashes（）函数过滤，确实能防御住一部分漏洞，但是对特定的场景和漏洞就不那么好使了。所以除了总入口，在具体的功能点也需要进行一些过滤。
9.1.1 discuz SQL安全过滤类分析
discuz全称Crossday Discuz！Board，是康盛创想（北京）科技有限公司（英文简称Comsenz）推出的一套开源通用的社区论坛软件系统，使用PHP＋MySQL开发，现已被腾讯收购，由于用户量巨大，discuz一直是众多安全爱好者重点研究的对象，所以也被公布过不少的安全漏洞。经过数年的沉淀，如今的discuz主程序在代码安全方面已经做得比较成熟。
discuz在专门有一个SQL注入过滤类来过滤SQL注入请求，不过也出现了多次绕过的情况，下面我们来分析它的这个SQL注入过滤的类。
首先我们先看到discuz的配置文件/config/config_global.php中的“CONFIG SECURITY”部分内容，如下：
// -------------------------  CONFIG SECURITY  -------------------------- //
$_config['security']['authkey'] = '3ca530i1uCe7lRke'
；
$_config['security']['urlxssdefend'] = 1
；
$_config['security']['attackevasive'] = '0'
；
$_config['security']['querysafe']['status'] = 1
；
//
是否开启
SQL
注入防御
//
以下是过滤规则
$_config['security']['querysafe']['dfunction']['0'] = 'load_file'
；
$_config['security']['querysafe']['dfunction']['1'] = 'hex'
；
$_config['security']['querysafe']['dfunction']['2'] = 'substring'
；
$_config['security']['querysafe']['dfunction']['3'] = 'if'
；
$_config['security']['querysafe']['dfunction']['4'] = 'ord'
；
$_config['security']['querysafe']['dfunction']['5'] = 'char'
；
$_config['security']['querysafe']['daction']['0'] = '@'
；
$_config['security']['querysafe']['daction']['1'] = 'intooutfile'
；
$_config['security']['querysafe']['daction']['2'] = 'intodumpfile'
；
$_config['security']['querysafe']['daction']['3'] = 'unionselect'
；
$_config['security']['querysafe']['daction']['4'] = '
（
select'
；
$_config['security']['querysafe']['daction']['5'] = 'unionall'
；
$_config['security']['querysafe']['daction']['6'] = 'uniondistinct'
；
$_config['security']['querysafe']['dnote']['0'] = '/*'
；
$_config['security']['querysafe']['dnote']['1'] = '*/'
；
$_config['security']['querysafe']['dnote']['2'] = '#'
；
$_config['security']['querysafe']['dnote']['3'] = '--'
；
$_config['security']['querysafe']['dnote']['4'] = '"'
；
$_config['security']['querysafe']['dlikehex'] = 1
；
$_config['security']['querysafe']['afullnote'] = '0'
；
根据笔者的标注（上面加粗代码），我们可以看到discuz配置文件中可以设置是否开启SQL注入防御，这个选项默认开启，一般不会有管理员去关闭，再往下的内容：
$_config['security']['querysafe']['daction']
以及
$_config['security']['querysafe']['dnote']
都是SQL注入过滤类的过滤规则，规则里包含了常见的注入关键字。
Discuz执行SQL语句之前会调用\source\class\discuz\discuz_database.php文件discuz_database_safecheck类下面的checkquery（$sql）函数进行过滤，我们来跟进这个函数看看，代码如下：
public static function checkquery
（
$sql
）
{if
（
self
：：
$config === null
）
{ self
：：
$config = getglobal
（
'config/security/querysafe'
）；
}if
（
self
：：
$config['status']
）
{ $check = 1
；
$cmd = strtoupper
（
substr
（
trim
（
$sql
），
0
，
3
））；
if
（
isset
（
self
：：
$checkcmd[$cmd]
））
{     $check = self
：：
_do_query_safe
（
$sql
）；
} elseif
（
substr
（
$cmd
，
0
，
2
）
=== '/*'
）
{ $check = -1
；
} if
（
$check < 1
）
{     throw new DbException
（
'It is not safe to do this query'
，
0
，
$sql
）；
}}return true
；
}
从代码中可以看到，程序首先加载配置文件中的config/security/querysafe，根据$config['status']判断SQL注入防御是否开启，再到$check=self：：_do_query_safe（$sql）；可以看到该函数又调用了同类下的_do_query_safe（）函数对SQL语句进行过滤，我们继续跟进_do_query_safe（）函数，代码如下：
private static function _do_query_safe
（
$sql
）
{
    $sql = str_replace
（
array
（
'\\\\'
，
'\\\''
，
'\\"'
，
'\'\''
），
''
，
$sql
）；
    $mark = $clean = ''
；
    if
（
strpos
（
$sql
，
'/'
）
=== false && strpos
（
$sql
，
'#'
）
=== false && strpos
（
$sql
，
'-- '
）
=== false && strpos
（
$sql
，
'@'
）
=== false && strpos
（
$sql
，
'`'
）
=== false
）
{   $clean = preg_replace
（
"/'
（
.+
？）
'/s"
，
''
，
$sql
）；
    } else {   $len = strlen
（
$sql
）；
   $mark = $clean = ''
；
for
（
$i = 0
；
$i < $len
；
$i++
）
{ $str = $sql[$i]
；
switch
（
$str
）
{     case '`'
：
    if
（！
$mark
）
{        $mark = '`'
；
        $clean .= $str
；
    } elseif
（
$mark == '`'
）
{        $mark = ''
；
    }    break
；
     case '\''
：
    if
（！
$mark
）
{        $mark = '\''
；
        $clean .= $str
；
    } elseif
（
$mark == '\''
）
{     $mark = ''
；
    }        break
；
    case '/'
：
        if
（
empty
（
$mark
）
&& $sql[$i + 1] == '*'
）
{            $mark = '/*'
；
            $clean .= $mark
；
            $i++
；
        } elseif
（
$mark == '/*' && $sql[$i - 1] == '*'
）
{            $mark = ''
；
            $clean .= '*'
；
        }            break
；
        case '#'
：
            if
（
empty
（
$mark
））
{                $mark = $str
；
                $clean .= $str