# Speed-Linux
`基础 Linux 命令、操作指南`
---
## 大纲
* **[👍 基础使用](#基础使用)**
	* [环境变量](#环境变量)
	* [符号](#符号)
	* [会话](#会话)
		* [历史记录](#历史记录)
	* [文件和目录](#文件和目录)
		* [查看](#查看)
		* [创建](#创建)
		* [删除](#删除)
		* [搜索](#搜索)
		* [修改](#修改)
		* [比较](#比较)
		* [链接](#链接)
		* [压缩备份](#压缩备份)
* **[📶 网络管理](#网络管理)**
	* [查看网络信息](#查看网络信息)
	* [配置](#配置)
	* [抓包](#抓包)
	* [传输-下载](#传输-下载)
		* [bt](#bt)
		* [远程访问](#远程访问)
	* [Firewall](#firewall)
		* [Firewalld](#firewalld)
		* [Iptables](#iptables)
		* [ufw](#ufw)
	* [软件包管理](#软件包管理)
		* [apt](#apt)
		* [Binary](#binary)
		* [dnf](#dnf)
		* [dpkg](#dpkg)
		* [Pacman](#pacman)
		* [rpm](#rpm)
		* [snap](#snap)
		* [yum](#yum)
			* 配置 yum 源
			* 配置 EPEL 源
		* [常用软件](#常用软件)
* **[🦋 系统管理](#系统管理)**
	* [系统信息](#系统信息)
		* [日志](#日志)
	* [系统设置](#系统设置)
		* [时间](#时间)
		* [时区](#时区)
		* [语言](#语言)
		* [启动项-计划任务](#启动项-计划任务)
		* [SELinux](#selinux)
	* [账号管控](#账号管控)
	* [进程管理](#进程管理)
	* [内核管理](#内核管理)
	* [设备管理](#设备管理)
		* [内存](#内存)
		* [磁盘](#磁盘)
		* [无线网卡](#无线网卡)
		* [蓝牙](#蓝牙)
		* [外接硬盘](#外接硬盘)
		* CD & DVD
---
**在线查询命令**
- [Linux命令搜索引擎](https://wangchujiang.com/linux-command/) - 非常牛逼,推荐
- [Linux命令大全(手册)](https://man.linuxde.net/)
---
## 基础使用
**帮助**
```bash
man		# man 是 manual 的缩写，将指令的具体信息显示出来。
	man ls	# 显示 ls 命令的手册,按 q 退出
```
**命令风格**
- Unix 风格的参数,前面加单破折线,例如: `-H`
- BSD 风格的参数,前面不加破折线,例如: `h`
- GNU 风格的长参数,前面加双破折线,例如: `--help`
**关机**
```bash
shutdown	# 关机命令
	shutdown now	# 立刻关机(需要 root 权限)
# 选项说明
# -k ： 不会关机，只是发送警告信息，通知所有在线的用户
# -r ： 将系统的服务停掉后就重新启动
# -h ： 将系统的服务停掉后就立即关机
# -c ： 取消已经在进行的 shutdown 指令内容
halt		# 立刻关机(无需 root 权限)
poweroff	# 立刻关机(无需 root 权限)
reboot 		# 重启
```
**别名**
如果要执行命令太长又不符合用户的习惯，那么我们可以为它指定一个别名
```bash
alias please="sudo"						# 临时将 please 作为 sudo 的别名
# 想让其永久生效只需要将这些 alias 别名设置保存到文件： ~/.bashrc 里面就可以了
```
**运行脚本**
```bash
source 						# 在当前 bash 环境下读取并执行 FileName 中的命令。
./xxx.sh								# 运行 xxx.sh 脚本
bash xxx.sh								# 运行 xxx.sh 脚本
```
### 环境变量
```bash
set
env
printenv
cat /proc/1/environ
cat /proc/$PID/environ
cat /proc/self/environ
```
- 图形模式登录时,顺序读取 : `/etc/profile` 和 `~/.profile`
- 图形模式登录后,打开终端时,顺序读取 : `/etc/bash.bashrc` 和 `~/.bashrc`
- 文本模式登录时,顺序读取 : `/etc/bash.bashrc` , `/etc/profile` 和 `~/.bash_profile`
**登录交互式 shell .bash_* files 的执行顺序**
```bash
execute /etc/profile
IF ~/.bash_profile exists THEN
    execute ~/.bash_profile
ELSE
    IF ~/.bash_login exist THEN
        execute ~/.bash_login
    ELSE
        IF ~/.profile exist THEN
            execute ~/.profile
        END IF
    END IF
END IF
```
**注销交互式 shell .bash_* files 的执行顺序**
```bash
IF ~/.bash_logout exists THEN
    execute ~/.bash_logout
END IF
```
**各变量文件区别**
- /etc/profile: 此文件为系统的每个用户设置环境信息。当用户登录时，该文件被执行一次，并从 /etc/profile.d 目录的配置文件中搜集shell 的设置。一般用于设置所有用户使用的全局变量。
- /etc/bashrc: 当 bash shell 被打开时，该文件被读取。也就是说，每次新打开一个终端 shell，该文件就会被读取。
- ~/.bash_profile 或 ~/.profile: 只对单个用户生效，当用户登录时该文件仅执行一次。用户可使用该文件添加自己使用的 shell 变量信息。另外在不同的LINUX操作系统下，这个文件可能是不同的，可能是 ~/.bash_profile， ~/.bash_login 或 ~/.profile 其中的一种或几种，如果存在几种的话，那么执行的顺序便是：~/.bash_profile、 ~/.bash_login、 ~/.profile。比如 Ubuntu 系统一般是 ~/.profile 文件。
- ~/.bashrc: 只对单个用户生效，当登录以及每次打开新的 shell 时，该文件被读取。
**bash 设置环境变量**
```bash
echo $PATH  						# 查看环境变量
```
- 一次性添加(关闭终端失效)
	```bash
	PATH=$PATH:/usr/local/python3/bin/
	```
- 永久修改变量(重启后生效)
	```diff
	vim ~/.bash_profile		在 Ubuntu 没有此文件，与之对应的是 /etc/bash.bashrc
	++ PATH=$PATH:/usr/local/bin/
	```
	```bash
	source ~/.bash_profile # 立即生效
	```
**fish 设置环境变量**
```vim
vim ~/.config/fish/config.fish
set PATH (你想要加入的路径) $PATH
```
```bash
souce ~/.config/fish/config.fish
```
**特殊变量**
bash 存在一些特殊变量，这些变量的值由shell提供，用户不能进行赋值。
```bash
$?   		# 为上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是0，表示上一个命令执行成功；如果是非零，上一个命令执行失败。
$$   		# 为当前shell的进程ID。
$_   		# 为上一个命令的最后一个参数。
$!   		# 为最后一个后台执行的异步命令的进程ID。
$0   		# 为当前shell的名称(在命令行直接执行时)或者脚本名(在脚本中执行时)。
$-   		# 为当前shell的启动参数。
$@ 和 $#   	# $#表示脚本的参数数量，$@表示脚本的参数值。
```
**变量的默认值**
bash提供四个特殊语法，跟变量的默认值有关，目的是保证变量不为空。
```
{varname:-wore}
如果变量varname存在且不为空，则返回它的值，否则返回word。它的目的是返回一个默认值，比如${count:-0}表示变量count不存在时返回0。
```
```
{varname:=word}
如果变量varname存在且不为空，则返回它的值，否则将它设为word，并且返回word。它的目的是设置变量的默认值，比如${count:=0}表示变量count不存在时返回0，且将count设为0。
```
```
{varname:?message}
如果变量varname存在且不为空，则返回它的值，否则打印出varname: message，并中断脚本的执行。如果省略了message，则输出默认的信息“parameter null or not set.”。它的目的是防止变量未定义，比如${count:?"undefined!"}
表示变量count未定义时就中断执行，抛出错误，返回给定的报错信息undefined!。
```
```
{carnage:+word}
如果变量名存在且不为空，则返回word，否则返回空值。它的目的是测试变量是否存在，比如${count:+1}表示变量count存在时返回1（表示true），否则返回空值。
```
例如
```bash
filename=${1:?"filename missing."}
# 1 表示脚本的第一个参数。如果该参数不存在，就退出脚本并报错。
```
**declare**
declare 命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量。
declare 命令如果用在函数中，声明的变量只在函数内部有效，等同于 local 命令。不带任何参数时，declare 命令输出当前环境的所有变量，包括函数在内，等同于不带有任何参数的 set 命令。
```
declare -i aaaaaa=1 bbbbbb=2
declare -i result
result=aaaaaa+bbbbbb
echo $result
```
**readonly**
readonly 命令等同于 declare -r，用来声明只读变量，不能改变变量值，也不能 unset 变量。
```bash
-f	# 声明的变量为函数名。
-p	# 打印出所有的只读变量。
-a	# 声明的变量为数组
```
```bash
readonly foo=1
foo=2
echo $?
```
---
### 符号
**基本符号**
```bash
				# 重定向输出
>>				# 末尾添加
&				# 与
|				# 管道符
```
```bash
*				# 匹配任意多个字符
	*.txt       	# 匹配全部后缀为 .txt 的文件
# * 这个通配符代表不以点 “.” 开头的所有文件。以 “.” 开头的文件默认属于 Linux 下的隐藏文件。
# 因此，不会删除目录下以 . 开头的隐藏文件，以及 . 和 .. 两个目录。但是在递归操作时，会递归地删除子目录下除了 . 和 .. 目录之外的所以文件和子目录——无论是否以 . 开头——因为递归操作不是由 Bash 等 shell 进行通配展开的。
# 至于为什么不在删除目录下的内容时也将 . 和 .. 一视同仁？因为自从 1979 年 rm 命令开始有删除目录的能力时，就专门避开了这两个特殊目录。
**				# 匹配任意级别目录(bash 4.0以上版本支持，shopt -s globstar)
	/etc/**/*.conf  # 查找 /etc/ 下所有 .conf 文件
?				# 匹配单个字符
	file?.log		# 匹配 file1.log, file2.log, ...
[]				# 匹配一个单字符范围,如[a-z],[0-9]
	[a-z]*.log  	# 匹配 a-z 开头的 .log 文件
# 反斜杠(\)或引号(', ")都会使通配符失效。
```
- grep
	```bash
	# 文本搜索工具,它能使用正则表达式搜索文本,并把匹配的行打印出来.
	# 选项释义
		# -a ： 将 binary 文件以 text 文件的方式进行搜寻
		# -c ： 计算找到个数
		# -i ： 忽略大小写
		# -n ： 输出行号
		# -v ： 反向选择，亦即显示出没有 搜寻字符串 内容的那一行
		# --color=auto ：找到的关键字加颜色显示
	# e.g.
	grep John /etc/passwd		# 在 /etc/passwd 文件中查找文本 John 并显示所有匹配的行
	grep -i john /etc/passwd	# 忽略大小写
	grep -ri john /home/users 	# 递归搜索目录中的匹配文本
	```
- awk
	```bash
	# 可以根据字段的某些条件进行匹配，例如匹配字段小于某个值的那一行数据。
	awk '条件类型 1 {动作 1} 条件类型 2 {动作 2} ...' filename
	# awk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：\$n，n 为字段号，从 1 开始，\$0 表示一整行。
	# e.g.
	cat /proc/cpuinfo | grep name | awk '{print $3}'		# 查询 cpuinfo 信息合并输入第 3 列
	```
- cut
	```bash
	# 剪切命令可用于仅显示文本文件或其他命令输出中的特定列
	# e.g.
	cut -d: -f 1,3 names.txt	# 显示冒号分隔文件中的第一和第三字段
	cut -c 1-8 names.txt		# 仅显示文件中每行的前 8 个字符
	cut -d: -f1 /etc/passwd		# 显示系统中所有用户的 UNIX 登录名
	```
- uniq
	```bash
	# 用于报告或忽略文件中的重复行
	# e.g.
	sort namesd.txt | uniq		# 使用 uniq 命令从文件中删除重复项
	sort namesd.txt | uniq -c	# 使用 Uniq 显示重复的行数
	sort namesd.txt | uniq -cd	# 使用 Uniq 仅显示重复的行
	grep name /proc/cpuinfo | uniq	# 查询 cpuinfo 信息合并成一条
	cat /proc/cpuinfo | grep name |cut -f2 -d ":" | uniq		# 查询 cpuinfo 信息合并成一条并只输出: 后的内容
	```
- sort
	```bash
	# 将文件进行排序,并将排序结果标准输出.
	# e.g.
	sort names.txt		# 以升序对文本文件进行排序
	sort -r names.txt	# 以降序对文本文件进行排序
	sort -t: -k 3n /etc/passwd | more	# 按第 3 个字段（数字用户 ID）对 passwd 文件进行排序
	sort -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n /etc/hosts	# 按 IP 地址对 /etc/hosts 文件进行排序
	```
- xargs
	```bash
	# 接收命令的输出并将其作为另一个命令的参数传递
	# e.g.
	find ~ -name '*.tmp' -print0 | xargs -0 rm -f	# 尝试使用 rm 删除所有 tmp 文件
	find /etc -name "*.conf" | xargs ls -l			# 获取 /etc/ 下所有 *.conf 文件的列表
	cat url-list.txt | xargs wget -c				# 如果需要从文件读取要下载的 URL 列表
	find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz	# 找出所有 jpg 图像并将其存档
	ls *.jpg | xargs -n1 -i cp {} /external-hard-drive/directory 		# 将所有图像复制到外部硬盘驱动器
	```
- tee
	```bash
	# tee 命令用于存储和查看（同时）任何其他命令的输出,默认下输出将覆盖原文件
	# e.g.
	ls | tee file 				# 将输出既写入屏幕（stdout），又写入文件
	ls | tee file1 file2 file3	# 输出写入多个文件
	ls | tee -a file			# 追加而不是覆盖
	crontab -l | tee crontab-backup.txt | sed 's/old/new/' | crontab -	# 对 crontab 条目进行备份，并将 crontab 条目作为 sed 命令的输入，由 sed 命令进行替换。替换后，它将被添加为一个新的cron作业。
	```