          jne  
SHORT $LN2@is_bool 
          mov  
al, 1 
          pop  
esi 
          ret  
0 
$LN2@is_bool: 
          mov  
ecx, OFFSET $SG3456 ; 'false' 
          mov  
eax, esi 
$LL10@is_bool: 
          mov  
dl, BYTE PTR [eax] 
          cmp  
dl, BYTE PTR [ecx] 
          jne  
SHORT $LN11@is_bool 
          test  
dl, dl 
          je  
SHORT $LN12@is_bool 
          mov  
dl, BYTE PTR [eax+1] 
          cmp  
dl, BYTE PTR [ecx+1] 
          jne  
SHORT $LN11@is_bool 
          add  
eax, 2 
          add  
ecx, 2 
          test  
dl, dl 
          jne  
SHORT $LL10@is_bool 
$LN12@is_bool: 
          xor  
eax, eax 
          jmp  
SHORT $LN13@is_bool 
$LN11@is_bool: 
          sbb  
eax, eax 
          sbb  
eax, -1 
$LN13@is_bool: 
          test  
eax, eax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 43 章  内 联 函 数 
469 
          jne  
SHORT $LN1@is_bool 
          xor  
al, al 
          pop  
esi 
          ret  
0 
$LN1@is_bool: 
          push  
11 
          push  
OFFSET $SG3458 
          push  
OFFSET $SG3459 
          call  
DWORD PTR __imp___wassert 
          add  
esp, 12 
          pop  
esi 
          ret  
0 
?is_bool@@YA_NPAD@Z ENDP ; is_bool 
43.1.2  字符串长度函数 strlen() 
指令清单 43.6  字符串长度函数 strlen()的例子 
int strlen_test(char *s1) 
{ 
          return strlen(s1); 
}; 
指令清单 43.7  采用 MSVC 2010 优化的例子 
_s1$ = 8 ; size = 4 
_strlen_test PROC 
          mov  
eax, DWORD PTR _s1$[esp-4] 
          lea  
edx, DWORD PTR [eax+1] 
$LL3@strlen_tes: 
          mov  
cl, BYTE PTR [eax] 
          inc  
eax 
          test  
cl, cl 
          jne  
SHORT $LL3@strlen_tes 
          sub  
eax, edx 
          ret  
0 
_strlen_test ENDP 
43.1.3  字符串复制函数 strcpy() 
指令清单 43.8  字符串复制函数 strcpy()的例子 
void strcpy_test(char *s1, char *outbuf) 
{ 
          strcpy(outbuf, s1); 
}; 
指令清单 43.9  采用 MSVC 2010 优化的例子 
_s1$ = 8  
; size = 4 
_outbuf$ = 12  
; size = 4 
_strcpy_test PROC 
          mov  
eax, DWORD PTR _s1$[esp-4] 
          mov  
edx, DWORD PTR _outbuf$[esp-4] 
          sub  
edx, eax 
          npad  
6 ; align next label 
$LL3@strcpy_tes: 
          mov  
cl, BYTE PTR [eax] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
470 
逆向工程权威指南（上册） 
          mov  
BYTE PTR [edx+eax], cl 
          inc  
eax 
          test  
cl, cl 
          jne  
SHORT $LL3@strcpy_tes 
          ret  
0 
_strcpy_test ENDP 
43.1.4  内存设置函数 memset() 
例子#1 如下所示。 
指令清单 43.10  32 字节的操作 
#include  
void f(char *out) 
{ 
         memset(out, 0, 32); 
}; 
在编译那些操作小体积内存块的 memset()函数时，多数编译器不会分配标准的函数调用指令（call），
反而会分配一堆的 MOV 指令，直接赋值。 
指令清单 43.11  64 位下的 GCC 4.9.1 优化 
f: 
          mov  
QWORD PTR [rdi], 0 
          mov  
QWORD PTR [rdi+8], 0 
          mov  
QWORD PTR [rdi+16], 0 
          mov  
QWORD PTR [rdi+24], 0 
          ret 
这让我们想起了本书 14.1.4 节介绍的循环展开技术。 
例子#2 如下所示。 
指令清单 43.12  67 字节内存的操作 
#include  
void f(char *out) 
{ 
         memset(out, 0, 67); 
}; 
当内存块的大小不是 4 或者 8 的整数倍时，不同的编译器会有不同的处理方法。 
比如说，MSVC 2012 依旧会分配一串 MOV 指令。 
指令清单 43.13  64 位下的 MSVC 2012 优化 
out$ = 8 
f         PROC 
          xor  
eax, eax 
          mov  
QWORD PTR [rcx], rax 
          mov  
QWORD PTR [rcx+8], rax 
          mov  
QWORD PTR [rcx+16], rax 
          mov  
QWORD PTR [rcx+24], rax 
          mov  
QWORD PTR [rcx+32], rax 
          mov  
QWORD PTR [rcx+40], rax 
          mov  
QWORD PTR [rcx+48], rax 
          mov  
QWORD PTR [rcx+56], rax 
          mov  
WORD PTR [rcx+64], ax 
          mov  
BYTE PTR [rcx+66], al 
          ret  
0 
f         ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 43 章  内 联 函 数 
471 
GCC 还会分配 REP STOSQ 指令。这可能比一堆的 MOV 赋值指令更短，效率更高。 
指令清单 43.14  64 位下的 GCC 4.9.1 优化 
f: 
          mov  
QWORD PTR [rdi], 0 
          mov  
QWORD PTR [rdi+59], 0 
          mov  
rcx, rdi 
          lea  
rdi, [rdi+8] 
          xor  
eax, eax 
          and  
rdi, -8 
          sub  
rcx, rdi 
          add  
ecx, 67 
          shr  
ecx, 3 
          rep stosq 
          ret 
43.1.5  内存复制函数 memcpy() 
在编译那些复制小尺寸内存块的 memcpy()函数时，多数编译器会分配一系列的 MOV 指令。 
指令清单 43.15  内存复制函数 memcpy() 
void memcpy_7(char *inbuf, char *outbuf) 
{ 
          memcpy(outbuf+10, inbuf, 7); 
}; 
指令清单 43.16  采用 MSVC 2010 优化 
_inbuf$ = 8  
; size = 4 
_outbuf$ = 12  
; size = 4 
_memcpy_7 PROC 
          mov  
ecx, DWORD PTR _inbuf$[esp-4] 
          mov  
edx, DWORD PTR [ecx] 
          mov  
eax, DWORD PTR _outbuf$[esp-4] 
          mov  
DWORD PTR [eax+10], edx 
          mov  
dx, WORD PTR [ecx+4] 
          mov  
WORD PTR [eax+14], dx 
          mov  
cl, BYTE PTR [ecx+6] 
          mov  
BYTE PTR [eax+16], cl 
          ret  
0 
_memcpy_7 ENDP 
指令清单 43.17  采用 GCC 4.8.1 优化 
memcpy_7: 
          push  
ebx 
          mov  
eax, DWORD PTR [esp+8] 
          mov  
ecx, DWORD PTR [esp+12] 
          mov  
ebx, DWORD PTR [eax] 
          lea  
edx, [ecx+10] 
          mov  
DWORD PTR [ecx+10], ebx 
          movzx  ecx, WORD PTR [eax+4] 
          mov  
WORD PTR [edx+4], cx 
          movzx  eax, BYTE PTR [eax+6] 
          mov  
BYTE PTR [edx+6], al 
          pop  
ebx 
          ret 
上述指令的操作流程是：首先复制 4 个字节，然后复制一个字（也就是 2 个字节），接着复制最后一个
字节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
472 
逆向工程权威指南（上册） 
此外，编译器还会通过赋值指令 MOV 复制结构体（structure）型数据。详情请参见本书的 21.4.1 节。 
大尺寸内存块的操作： 
不同的编译器会有不同的指令分配方案。 
指令清单 43.18  memcpy()内存复制的例子（这里列出了 2 个不同的例子，一个是 128 字节的操作，
另外一个则是 123 字节的内存操作） 
void memcpy_128(char *inbuf, char *outbuf) 
{ 
          memcpy(outbuf+10, inbuf, 128); 
}; 
void memcpy_123(char *inbuf, char *outbuf) 
{ 
          memcpy(outbuf+10, inbuf, 123); 
}; 
MSVC 分配了单条 MOVSD 指令。在循环控制变量 ECX 的配合下，MOVSD 可一步完成 128 个字节
的数据复制。其原因显然是 128 能被 4 整除。 
指令清单 43.19  MSVC 2010 优化  
_inbuf$ = 8  
; size = 4 
_outbuf$ = 12  
; size = 4 
_memcpy_128 PROC 
          push  
esi 
          mov  
esi, DWORD PTR _inbuf$[esp] 
          push  
edi 
          mov  
edi, DWORD PTR _outbuf$[esp+4] 
          add  
edi, 10 
          mov  