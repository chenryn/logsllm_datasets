## [珍藏级] PostgreSQL ssl 证书配置 - 防止中间攻击者 - 以及如何使用证书无密码登录配置cert      
### 作者    
digoal    
### 日期    
2020-06-19    
### 标签    
PostgreSQL , ssl , mitm , Man in the middle     
----    
## 背景    
[视频回放](https://yq.aliyun.com/live/43489)  
![pic](20200619_01_pic_001.jpg)    
SSL认证除了加密数据， 也可以识别目标端的真伪， 防止网络中间人的伪装攻击。 本文主要分析为什么需要ssl证书?    
1、客户把钥匙丢了, 拿到钥匙的人就可以开这个钥匙对应的门.    
2、有一扇假的门, 但是客户并不知道, 客户拿着钥匙去开门, 这扇门把你的钥匙复制了. 然后拿着复制的钥匙可以去开真的门.      
例如ATM取款机, 不法分子在前面粘了一个card复制装置, 复制卡的内容, 然后打电话骗取你的密码.     
实际上就是伪装的问题. 为了解决这两个问题, ssl里面引入了证书的概念, 用证书来判断身份.    
1、客户把钥匙丢了, 别人拿着钥匙开不了门, 因为门会问怎么证明你是你.     
2、客户也不需要担心有假的门, 因为客户先会问, 门啊门, 你是不是那扇门, 你不是我就不掏钥匙, 你也没发复制我的钥匙.    
具体怎么做?    
以PostgreSQL 12为例.     
The different values for the sslmode parameter provide different levels of protection. SSL can provide protection against three types of attacks:    
Eavesdropping    
If a third party can examine the network traffic between the client and the server, it can read both connection information (including the user name and password) and the data that is passed. SSL uses encryption to prevent this.    
Man in the middle (MITM)    
If a third party can modify the data while passing between the client and server, it can pretend to be the server and therefore see and modify data even if it is encrypted. The third party can then forward the connection information and data to the original server, making it impossible to detect this attack. Common vectors to do this include DNS poisoning and address hijacking, whereby the client is directed to a different server than intended. There are also several other attack methods that can accomplish this. SSL uses certificate verification to prevent this, by authenticating the server to the client.    
Impersonation    
If a third party can pretend to be an authorized client, it can simply access data it should not have access to. Typically this can happen through insecure password management. SSL uses client certificates to prevent this, by making sure that only holders of valid certificates can access the server.    
## 例子    
环境    
```    
CentOS 7.8 x64  
server a, 根服务器1, 用于给客户端颁发证书    
server b, 根服务器2, 给授权机构3签名发证    
server c, 根服务器2的授权机构3, 用于给数据库颁发证书    
server d, 数据库服务器    
server e, 客户端    
```    
部署    
```    
yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm    
yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm    
yum install -y centos-release-scl-rh    
yum install -y postgresql12*    
```    
### server a, 根服务器1, 用于给客户端颁发证书      
```    
mkdir keys certs    
chmod og-rwx keys certs    
openssl req -new -x509 -days 3650 -nodes -out certs/ca1.crt -keyout keys/ca1.key -subj "/CN=root-ca1"    
```    
或者分解步骤如下 :     
```    
openssl req -new -nodes -text -out root.csr -keyout root.key -subj "/CN=root.yourdomain.com"    
chmod og-rwx root.key    
find / -name openssl.cnf    
/etc/pki/tls/openssl.cnf    
openssl x509 -req -in root.csr -text -days 3650 -extfile /etc/pki/tls/openssl.cnf -extensions v3_ca -signkey root.key -out root.crt    
```    
```    
Signature ok    
subject=/CN=root.yourdomain.com    
Certificate:    
    Data:    
        Version: 1 (0x0)    
        Serial Number:    
            ce:c5:6e:31:31:dc:11:f0    
    Signature Algorithm: NULL    
        Issuer: CN=root.yourdomain.com    
....    
```    
```    
# less  root.csr    
Certificate Request:    
    Data:    
        Version: 0 (0x0)    
        Subject: CN=root.yourdomain.com    
        Subject Public Key Info:    
            Public Key Algorithm: rsaEncryption    
                Public-Key: (2048 bit)    
                Modulus:    
                    00:b2:1a:72:8b:46:9b:36:ae:9a:49:d8:4a:87:    
......    
```    
- ca1.key 私钥    
- ca1.crt 公钥    
### server b, 根服务器2    
```    
mkdir keys certs    
chmod og-rwx keys certs    
openssl req -new -x509 -days 3650 -nodes -out certs/ca2.crt -keyout keys/ca2.key -subj "/CN=root-ca2"    
```    
### server c, 根服务器2的授权机构3, 用于给数据库颁发证书    
```    
# intermediate    
openssl req -new -nodes -text -out intermediate.csr -keyout intermediate.key -subj "/CN=intermediate.yourdomain.com"    
chmod og-rwx intermediate.key    
```    
把intermediate.csr发给根服务器2去盖章(内容发过去就可以)     
以下在根服务器2操作     
```    
openssl x509 -req -in intermediate.csr -text -days 1825 -extensions v3_ca -CA certs/ca2.crt -CAkey keys/ca2.key -CAcreateserial -out intermediate.crt    
```    
```    
Signature ok    
subject=/CN=intermediate.yourdomain.com    
Certificate:    
    Data:    
        Version: 1 (0x0)    
        Serial Number:    
            d9:80:47:67:e3:6d:7a:ac    
    Signature Algorithm: NULL    
....    
```    
盖章后的证书intermediate.crt发给server c(根服务器2的授权机构3)    
### server d, 数据库服务器    
生成key、证书签名申请文件.     
```    
# leaf    
openssl req -new -nodes -text -out server.csr -keyout server.key -subj "/CN=dbhost.domain.name.or.ipaddress"    
chmod og-rwx server.key    
```    
因为key,pub是一对多的, 所以以后证书吊销了还可以继续申请.     
```    
openssl req -new -key server.key -out server123.csr -subj "/CN=dbhost.domain.name.or.ipaddress"    
```    
把server.csr发给授权机构服务器3去盖章(内容发过去就可以)     
以下在授权机构服务器3操作     
```    
openssl x509 -req -in server.csr -text -days 365  -CA intermediate.crt -CAkey intermediate.key -CAcreateserial  -out server.crt    
```    
```    
Signature ok    
subject=/CN=dbhost.domain.name.or.ipaddress    
Certificate:    
    Data:    
        Version: 1 (0x0)    
        Serial Number:    
            f2:8b:d8:17:17:5b:ed:0f    
    Signature Algorithm: NULL    
        Issuer: CN=dbhost.domain.name.or.ipaddress    
....    
```    
盖章后的证书server.crt发给server d(数据库服务器)    
```    
server.crt, server.key 都放到 $PGDATA/ 目录中, 设置为600权限    
```    
### server e, 客户端    
生成key、证书签名申请文件.     
指定cn=dbuser1, 如果数据库pg_hba.conf中配置了要求验证客户端verify-full, 那么客户端使用这个证书只能使用dbuser1这个数据库用户登录.       
```    
# leaf    
openssl req -new -nodes -text -out client.csr -keyout client.key -subj "/CN=dbuser1"    
chmod og-rwx client.key     
```    
因为key,pub是一对多的, 所以以后证书吊销了还可以继续申请.     
```    
openssl req -new -key client.key -out client123.csr -subj "/CN=dbuser1"    
```    
把server.csr发给根服务器1去盖章(内容发过去就可以)     
以下在根服务器1操作     
```    
openssl x509 -req -in client.csr -text -days 365  -CA certs/ca1.crt -CAkey keys/ca1.key -CAcreateserial  -out client.crt     
```    
```    
Signature ok    
subject=/CN=dbuser1    
Certificate:    
    Data:    
        Version: 1 (0x0)    
        Serial Number:    
            c8:05:4c:f8:bf:a3:a3:ea    
    Signature Algorithm: NULL    
        Issuer: CN=dbuser1    
        Validity    
            Not Before: Jun 19 06:42:37 2020 GMT    
            Not After : Jun 19 06:42:37 2021 GMT    
        Subject: CN=dbuser1    