i := 0; bq := 0; max := 0;
while (i  bq ∨ i = 0)
max := i;
bq := q[i] + η ;
i := i + 1;
1
2
3
4
5
6
7
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
◦
◦
†
†
;
8
9
while (i  bq ∨ i = 0)
η := sample[idx]; vϵ := (S ? vϵ : 0) + |A| × ϵ ;
:= 0; (cid:99)max
:= (cid:99)max
:= 0; (cid:99)max
:= (cid:98)bq
; (cid:99)max
:= 0; (cid:98)bq
(cid:98)η := A;
if (S) (cid:98)bq
assert(q[i] +(cid:98)q[i] + η + η◦ > bq + bq◦ ∨ i = 0);
assert((cid:99)max
:= bq + (cid:98)bq
(cid:98)bq
(cid:98)bq
:=(cid:98)q
[i] +(cid:98)η◦
assert(¬(q[i] +(cid:98)q[i] + η + η◦ > bq + bq◦ ∨ i = 0));
[i] + η > bq +(cid:98)bq
if (q[i] +(cid:98)q
(cid:98)bq
:= q[i] +(cid:98)q
(cid:99)max
bq := q[i] + η ;
;
max := i;
max◦ := 0;
// shadow execution
[i] + η − bq;
† ∨ i = 0)
- (q[i] + η);
:= i - max;
= 0);
else
†
◦
†
†
†
†
†
◦
◦
i := i + 1;
Figure 8: Report Noisy Max and its transformed code, where
S = q[i] + η > bq ∨ i = 0 ? θ[0] : θ[1] and A = θ[3] + θ[4] ×
(cid:98)q◦[i] + θ[5] × bq◦
D EXTRA CASE STUDIES
In this section we list the pseudo-code of the algorithms we eval-
uated in the paper for completeness. The incorrect part for the
incorrect algorithms is marked with a box.
D.1 Report Noisy Max
Report Noisy Max [25]. This is an important building block for de-
veloping differentially private algorithms. It generates differentially
private synthetic data by finding the identity with the maximum
(noisy) score in the database. Here we present this mechanism in a
simplified manner: for a series of query answers q, where each of
them can differ at most one in the adjacent underlying database,
its goal is to return the index of the maximum query answer in a
privacy-preserving way. To achieve differential privacy, the mecha-
nism first adds η = Lap 2/ϵ noise to each of the query answer, then
returns the index of the maximum noisy query answers q[i] + η,
instead of the true query answers q[i]. The pseudo code of this
mechanism is shown in Figure 8.
18
To prove its correctness using randomness alignment technique,
we need to align the only random variable η in the mechanism
(Line 3). Therefore, a corresponding privacy cost of aligning η
would be incurred for each iteration of the loop. However, manual
proof [25] suggests that we only need to align the random variable
added to the actual maximum query answer. In other words, we
need an ability to “reset” the privacy cost upon seeing a new current
maximum noisy query answer.
Bad Noisy Max. We also created an incorrect variant of Report
Noisy Max. This variant directly returns the maximum noisy query
answer, instead of the index.
More specifically, it can be obtained by changing Line 5 in Fig-
ure 8 from max := i to max := q[i] + η. CheckDP is then able
to find a counterexample for this incorrect variant.
D.2 Variants of Sparse Vector Technique
SVT. We first show a correctly-implemented standard version
of SVT [40]. This standard implementation is less powerful than
running example GapSVT, as it outputs true instead of the gap
between noisy query answer and noisy threshold. This can be
obtained by changing Line 7 in Figure 1 from out := (q[i] +
η2)::out; to out := true::out;.
i
SVT with Monotonic Queries. There exist use cases with SVT
where the queries are monotonic. More formally, queries are mono-
or ∀i. qi ≥ q′
tonic if for related queries q ∼ q′, ∀i. qi ≤ q′
.
i
As shown in [40]. When the queries are monotonic, it suffices to
add η2 := Lap 2N/ϵ to each queries (Line 5 in Figure 1) and the
algorithm still satisfies ϵ-DP.
Thanks to the flexibility of CheckDP, it only requires one change
in the function specification in order to verify this variant: mod-
new precondition for SVT with monotonic queries becomes ∀
ify the constraint on(cid:98)q[i] in the precondition. Specifically, the
and ∀ i. −1 ≤(cid:98)q[i] ≤ 0
i. 0 ≤(cid:98)q[i] ≤ 1 for the ∀i. qi ≤ q′
for the other case. The final found alignment by CheckDP is the
same as the ones reported in the manual randomness alignment
based proofs [24]:
i
q[i] + η2 ≥ Tη ? 1 −(cid:98)q[i] : 0, if ∀i. qi ≤ q′
q[i] + η2 ≥ Tη ? −(cid:98)q[i] : 0,
otherwise
i
η1 : 0 η2 :
To the best of our knowledge, no prior verification works have
(cid:40)
automatically verified this variant.
NumSVT. Numerical Sparse Vector (NumSVT) [28] is another
interesting correct variant of SVT which outputs a numerical an-
swer when the input query is larger than the noisy threshold. It
follows the same procedure as Sparse Vector Technique, the dif-
ference is that it draws a fresh noise η3 in the true branch, and
outputs q[i] + η3 instead of true. Note that this is very similar
to our running example GapSVT and BadGapSVT, the key differ-
ence is that the freshly-drawn random noise hides the information
about Tη, unlike the BadGapSVT. This variant can be obtained by
making the following changes in Figure 1: (1) Line 1 is changed
from Lap 2/ϵ to Lap 3/ϵ; (2) Line 5 is changed from Lap 4N/ϵ to
Lap 6N/ϵ; (3) Line 7 is change from out := (q[i] + η)::out;
to “η3 := Lap (3N/ϵ); out := (q[i] + η3)::out;”. CheckDP
function SVT (T,N,size : num0 , q : list num∗ )
returns (out : list bool ), check(ϵ)
precondition ∀ i. −1 ≤(cid:98)q[i] ≤ 1
η1 := Lap (2/ϵ)
Tη := T + η1 ;
count := 0; i := 0;
while ( count < N ∧ i < size )
η2 := Lap (4N/ϵ)
if (q[i] + η2 ≥ Tη ) then
out := true :: out ;
count := count + 1;
else
1
2
3
4
5
6
7
8
9
10
11
out := false :: out ;
i := i + 1;
returns (out)
function Transformed SVT (T,N,size,q,(cid:98)q, sample, θ)
vϵ := vϵ + |A1| × ϵ/2; (cid:98)η1 := A1;
16 (cid:99)Tη := (cid:98)η1;
vϵ := 0; idx = 0;
η1 := sample[idx]; idx := idx + 1;
Tη := T + η1 ;
12
13
14
15
17
18
19
20
21
22
23
24
25
26
27
28
29
count := 0; i := 0;
while ( count < N ∧ i < size )
η2 := sample[idx]; idx := idx + 1;
if (q[i] + η2 ≥ Tη ) then
vϵ := vϵ + |A2| × ϵ/4N ; (cid:98)η2 := A2;
assert(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη );
assert(¬(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη ));
out := true :: out ;
count := count + 1;
else
out := false :: out ;
i := i + 1;
assert(vϵ ≤ ϵ );
Figure 9: Standard Sparse Vector Technique and its trans-
formed code, where underlined parts are added by CheckDP.
The transformed code contains two alignment templates for
η1 and η2: A1 = θ[0] and A2 = (q[i] + η2[i] ≥ Tη) ? (θ[1] +
θ[2] ×(cid:98)Tη + θ[3] ×(cid:98)q[i]) : (θ[4] + θ[5] × Tη + θ[6] ×(cid:98)q[i]).
finds the same alignment as shown in [51] with which CPAChecker
is able to verify the algorithm with this generated alignment.
Adaptive SVT. As mentioned in Section 5, we list the pseudo
code of Adaptive SVT in Figure 11.
BadSVT1 - 3. We now study other three incorrect variants of
SVT collected from [40]. All three variants are based on the classic
SVT algorithm we have seen (i.e., Line 7 in Figure 1 is out :=
true::out;).
BadSVT1 [47] adds no noise to the query answers and has no
bounds on the number of true’s it can output. This variant is
obtained by changing Line 4 from while (count<N∧i<size) to
while (i<size) and Line 5 from Lap 4N/ϵ to 0. Another variant
BadSVT2 [20] has no bounds on the number of true’s it can output
as well. It keeps outputting true even if the given privacy budget
has been exhausted. Moreover, the noise added to the queries does
not scale with parameter N. Specifically, based on BadSVT1, Line 5 is
changed to Lap 2/ϵ. BadSVT3 [38] is an interesting case since it tries
to spend its privacy budget in a different allocation strategy between
the threshold T and the query answers q[i] (1 : 3 instead of 1 : 1).
However, the noise added to η2 does not scale with parameter N.
The 3/4 privacy budget is allocated to each of the queries where it
should be shared among them. To get this variant, based on SVT
algorithm, the noise generation commands (Line 1 and Line 5) are
changed to η1 := Lap 4/ϵ and η2 := Lap 4/(3 × ϵ) , respectively.
1
2
3
4
5
6
7
8
9
10
11
12
function NumSVT (T,N,size : num0 , q : list num∗ )
returns (out : list bool ), check(ϵ)
precondition ∀ i. −1 ≤(cid:98)q[i] ≤ 1
η1 := Lap (3/ϵ)
Tη := T + η1 ;
count := 0; i := 0;
while ( count < N ∧ i < size )
η2 := Lap (6N/ϵ)
if (q[i] + η2 ≥ Tη ) then
η3 := Lap (3N/ϵ);
out := (q[i] + η3 ):: out ;
count := count + 1;
else
out := false :: out ;
i := i + 1;
returns (out)
function Transformed NumSVT (T,N,size,q,(cid:98)q, sample, θ)
vϵ := vϵ + |A1| × ϵ/3; (cid:98)η1 := A1;
16 (cid:99)Tη := (cid:98)η1;
vϵ := 0; idx = 0;
η1 := sample[idx]; idx := idx + 1;