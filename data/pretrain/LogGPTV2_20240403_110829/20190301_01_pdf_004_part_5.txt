The WHERE clause contains a Boolean (truth value) expression, and only rows for which
the Boolean expression is true are returned. The usual Boolean operators (AND, OR, and
NOT) are allowed in the qualification. For example, the following retrieves the employees
in department 20 with salaries over $1000.00:
SELECT ename, sal, deptno FROM emp WHERE deptno = 20 AND sal > 1000;
ename | sal | deptno
-------+---------+--------
JONES | 2975.00 | 20
SCOTT | 3000.00 | 20
ADAMS | 1100.00 | 20
FORD | 3000.00 | 20
(4 rows)
You can request that the results of a query be returned in sorted order:
SELECT ename, sal, deptno FROM emp ORDER BY ename;
ename | sal | deptno
--------+---------+--------
ADAMS | 1100.00 | 20
ALLEN | 1600.00 | 30
BLAKE | 2850.00 | 30
CLARK | 2450.00 | 10
FORD | 3000.00 | 20
JAMES | 950.00 | 30
JONES | 2975.00 | 20
KING | 5000.00 | 10
MARTIN | 1250.00 | 30
MILLER | 1300.00 | 10
SCOTT | 3000.00 | 20
SMITH | 800.00 | 20
TURNER | 1500.00 | 30
WARD | 1250.00 | 30
(14 rows)
You can request that duplicate rows be removed from the result of a query:
SELECT DISTINCT job FROM emp;
job
-----------
ANALYST
CLERK
MANAGER
PRESIDENT
SALESMAN
(5 rows)
The following section shows how to obtain rows from more than one table in a single
query.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 33
Database Compatibility for Oracle® Developers Guide
2.1.5 Joins Between Tables
Thus far, our queries have only accessed one table at a time. Queries can access multiple
tables at once, or access the same table in such a way that multiple rows of the table are
being processed at the same time. A query that accesses multiple rows of the same or
different tables at one time is called a join query. For example, say you wish to list all the
employee records together with the name and location of the associated department. To
do that, we need to compare the deptno column of each row of the emp table with the
deptno column of all rows in the dept table, and select the pairs of rows where these
values match. This would be accomplished by the following query:
SELECT emp.ename, emp.sal, dept.deptno, dept.dname, dept.loc FROM emp, dept
WHERE emp.deptno = dept.deptno;
ename | sal | deptno | dname | loc
--------+---------+--------+------------+----------
MILLER | 1300.00 | 10 | ACCOUNTING | NEW YORK
CLARK | 2450.00 | 10 | ACCOUNTING | NEW YORK
KING | 5000.00 | 10 | ACCOUNTING | NEW YORK
SCOTT | 3000.00 | 20 | RESEARCH | DALLAS
JONES | 2975.00 | 20 | RESEARCH | DALLAS
SMITH | 800.00 | 20 | RESEARCH | DALLAS
ADAMS | 1100.00 | 20 | RESEARCH | DALLAS
FORD | 3000.00 | 20 | RESEARCH | DALLAS
WARD | 1250.00 | 30 | SALES | CHICAGO
TURNER | 1500.00 | 30 | SALES | CHICAGO
ALLEN | 1600.00 | 30 | SALES | CHICAGO
BLAKE | 2850.00 | 30 | SALES | CHICAGO
MARTIN | 1250.00 | 30 | SALES | CHICAGO
JAMES | 950.00 | 30 | SALES | CHICAGO
(14 rows)
Observe two things about the result set:
 There is no result row for department 40. This is because there is no matching
entry in the emp table for department 40, so the join ignores the unmatched rows
in the dept table. Shortly we will see how this can be fixed.
 It is more desirable to list the output columns qualified by table name rather than
using * or leaving out the qualification as follows:
SELECT ename, sal, dept.deptno, dname, loc FROM emp, dept WHERE emp.deptno =
dept.deptno;
Since all the columns had different names (except for deptno which therefore must be
qualified), the parser automatically found out which table they belong to, but it is good
style to fully qualify column names in join queries:
Join queries of the kind seen thus far can also be written in this alternative form:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 34
Database Compatibility for Oracle® Developers Guide
SELECT emp.ename, emp.sal, dept.deptno, dept.dname, dept.loc FROM emp INNER
JOIN dept ON emp.deptno = dept.deptno;
This syntax is not as commonly used as the one above, but we show it here to help you
understand the following topics.
You will notice that in all the above results for joins no employees were returned that
belonged to department 40 and as a consequence, the record for department 40 never
appears. Now we will figure out how we can get the department 40 record in the results
despite the fact that there are no matching employees. What we want the query to do is to
scan the dept table and for each row to find the matching emp row. If no matching row
is found we want some “empty” values to be substituted for the emp table’s columns.
This kind of query is called an outer join. (The joins we have seen so far are inner joins.)
The command looks like this:
SELECT emp.ename, emp.sal, dept.deptno, dept.dname, dept.loc FROM dept LEFT
OUTER JOIN emp ON emp.deptno = dept.deptno;
ename | sal | deptno | dname | loc
--------+---------+--------+------------+----------
MILLER | 1300.00 | 10 | ACCOUNTING | NEW YORK
CLARK | 2450.00 | 10 | ACCOUNTING | NEW YORK
KING | 5000.00 | 10 | ACCOUNTING | NEW YORK
SCOTT | 3000.00 | 20 | RESEARCH | DALLAS
JONES | 2975.00 | 20 | RESEARCH | DALLAS
SMITH | 800.00 | 20 | RESEARCH | DALLAS
ADAMS | 1100.00 | 20 | RESEARCH | DALLAS
FORD | 3000.00 | 20 | RESEARCH | DALLAS
WARD | 1250.00 | 30 | SALES | CHICAGO
TURNER | 1500.00 | 30 | SALES | CHICAGO
ALLEN | 1600.00 | 30 | SALES | CHICAGO
BLAKE | 2850.00 | 30 | SALES | CHICAGO
MARTIN | 1250.00 | 30 | SALES | CHICAGO
JAMES | 950.00 | 30 | SALES | CHICAGO
| | 40 | OPERATIONS | BOSTON
(15 rows)
This query is called a left outer join because the table mentioned on the left of the join
operator will have each of its rows in the output at least once, whereas the table on the
right will only have those rows output that match some row of the left table. When a left-
table row is selected for which there is no right-table match, empty (NULL) values are
substituted for the right-table columns.
An alternative syntax for an outer join is to use the outer join operator, “(+)”, in the join
condition within the WHERE clause. The outer join operator is placed after the column
name of the table for which null values should be substituted for unmatched rows. So for
all the rows in the dept table that have no matching rows in the emp table, Advanced
Server returns null for any select list expressions containing columns of emp. Hence the
above example could be rewritten as:
SELECT emp.ename, emp.sal, dept.deptno, dept.dname, dept.loc FROM dept, emp
WHERE emp.deptno(+) = dept.deptno;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 35
Database Compatibility for Oracle® Developers Guide
ename | sal | deptno | dname | loc
--------+---------+--------+------------+----------
MILLER | 1300.00 | 10 | ACCOUNTING | NEW YORK
CLARK | 2450.00 | 10 | ACCOUNTING | NEW YORK
KING | 5000.00 | 10 | ACCOUNTING | NEW YORK
SCOTT | 3000.00 | 20 | RESEARCH | DALLAS
JONES | 2975.00 | 20 | RESEARCH | DALLAS
SMITH | 800.00 | 20 | RESEARCH | DALLAS
ADAMS | 1100.00 | 20 | RESEARCH | DALLAS
FORD | 3000.00 | 20 | RESEARCH | DALLAS
WARD | 1250.00 | 30 | SALES | CHICAGO
TURNER | 1500.00 | 30 | SALES | CHICAGO
ALLEN | 1600.00 | 30 | SALES | CHICAGO
BLAKE | 2850.00 | 30 | SALES | CHICAGO
MARTIN | 1250.00 | 30 | SALES | CHICAGO
JAMES | 950.00 | 30 | SALES | CHICAGO
| | 40 | OPERATIONS | BOSTON
(15 rows)
We can also join a table against itself. This is called a self join. As an example, suppose
we wish to find the name of each employee along with the name of that employee’s
manager. So we need to compare the mgr column of each emp row to the empno column
of all other emp rows.
SELECT e1.ename || ' works for ' || e2.ename AS "Employees and their
Managers" FROM emp e1, emp e2 WHERE e1.mgr = e2.empno;
Employees and their Managers
------------------------------
FORD works for JONES
SCOTT works for JONES
WARD works for BLAKE
TURNER works for BLAKE
MARTIN works for BLAKE
JAMES works for BLAKE
ALLEN works for BLAKE
MILLER works for CLARK
ADAMS works for SCOTT
CLARK works for KING
BLAKE works for KING
JONES works for KING
SMITH works for FORD
(13 rows)
Here, the emp table has been re-labeled as e1 to represent the employee row in the select
list and in the join condition, and also as e2 to represent the matching employee row
acting as manager in the select list and in the join condition. These kinds of aliases can be
used in other queries to save some typing, for example:
SELECT e.ename, e.mgr, d.deptno, d.dname, d.loc FROM emp e, dept d WHERE
e.deptno = d.deptno;
ename | mgr | deptno | dname | loc
--------+------+--------+------------+----------
MILLER | 7782 | 10 | ACCOUNTING | NEW YORK
CLARK | 7839 | 10 | ACCOUNTING | NEW YORK
KING | | 10 | ACCOUNTING | NEW YORK
SCOTT | 7566 | 20 | RESEARCH | DALLAS
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 36
Database Compatibility for Oracle® Developers Guide
JONES | 7839 | 20 | RESEARCH | DALLAS
SMITH | 7902 | 20 | RESEARCH | DALLAS
ADAMS | 7788 | 20 | RESEARCH | DALLAS
FORD | 7566 | 20 | RESEARCH | DALLAS
WARD | 7698 | 30 | SALES | CHICAGO
TURNER | 7698 | 30 | SALES | CHICAGO
ALLEN | 7698 | 30 | SALES | CHICAGO
BLAKE | 7839 | 30 | SALES | CHICAGO
MARTIN | 7698 | 30 | SALES | CHICAGO
JAMES | 7698 | 30 | SALES | CHICAGO
(14 rows)
This style of abbreviating will be encountered quite frequently.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 37
Database Compatibility for Oracle® Developers Guide
2.1.6 Aggregate Functions
Like most other relational database products, Advanced Server supports aggregate
functions. An aggregate function computes a single result from multiple input rows. For
example, there are aggregates to compute the COUNT, SUM, AVG (average), MAX
(maximum), and MIN (minimum) over a set of rows.
As an example, the highest and lowest salaries can be found with the following query:
SELECT MAX(sal) highest_salary, MIN(sal) lowest_salary FROM emp;
highest_salary | lowest_salary
----------------+---------------
5000.00 | 800.00
(1 row)
If we wanted to find the employee with the largest salary, we may be tempted to try:
SELECT ename FROM emp WHERE sal = MAX(sal);
ERROR: aggregates not allowed in WHERE clause
This does not work because the aggregate function, MAX, cannot be used in the WHERE
clause. This restriction exists because the WHERE clause determines the rows that will go
into the aggregation stage so it has to be evaluated before aggregate functions are
computed. However, the query can be restated to accomplish the intended result by using
a subquery:
SELECT ename FROM emp WHERE sal = (SELECT MAX(sal) FROM emp);
ename
-------
KING
(1 row)
The subquery is an independent computation that obtains its own result separately from
the outer query.
Aggregates are also very useful in combination with the GROUP BY clause. For example,
the following query gets the highest salary in each department.
SELECT deptno, MAX(sal) FROM emp GROUP BY deptno;
deptno | max
--------+---------
10 | 5000.00
20 | 3000.00
30 | 2850.00
(3 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 38
Database Compatibility for Oracle® Developers Guide
This query produces one output row per department. Each aggregate result is computed
over the rows matching that department. These grouped rows can be filtered using the
HAVING clause.
SELECT deptno, MAX(sal) FROM emp GROUP BY deptno HAVING AVG(sal) > 2000;
deptno | max
--------+---------
10 | 5000.00
20 | 3000.00
(2 rows)
This query gives the same results for only those departments that have an average salary
greater than 2000.
Finally, the following query takes into account only the highest paid employees who are
analysts in each department.
SELECT deptno, MAX(sal) FROM emp WHERE job = 'ANALYST' GROUP BY deptno HAVING
AVG(sal) > 2000;
deptno | max
--------+---------
20 | 3000.00
(1 row)
There is a subtle distinction between the WHERE and HAVING clauses. The WHERE clause
filters out rows before grouping occurs and aggregate functions are applied. The HAVING
clause applies filters on the results after rows have been grouped and aggregate functions
have been computed for each group.
So in the previous example, only employees who are analysts are considered. From this
subset, the employees are grouped by department and only those groups where the
average salary of analysts in the group is greater than 2000 are in the final result. This is
true of only the group for department 20 and the maximum analyst salary in department
20 is 3000.00.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 39
Database Compatibility for Oracle® Developers Guide
2.1.7 Updates
The column values of existing rows can be changed using the UPDATE command. For
example, the following sequence of commands shows the before and after results of
giving everyone who is a manager a 10% raise:
SELECT ename, sal FROM emp WHERE job = 'MANAGER';
ename | sal
-------+---------
JONES | 2975.00
BLAKE | 2850.00
CLARK | 2450.00
(3 rows)
UPDATE emp SET sal = sal * 1.1 WHERE job = 'MANAGER';
SELECT ename, sal FROM emp WHERE job = 'MANAGER';
ename | sal
-------+---------
JONES | 3272.50
BLAKE | 3135.00
CLARK | 2695.00
(3 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 40
Database Compatibility for Oracle® Developers Guide
2.1.8 Deletions
Rows can be removed from a table using the DELETE command. For example, the
following sequence of commands shows the before and after results of deleting all
employees in department 20.
SELECT ename, deptno FROM emp;
ename | deptno
--------+--------
SMITH | 20
ALLEN | 30
WARD | 30
JONES | 20
MARTIN | 30
BLAKE | 30
CLARK | 10
SCOTT | 20
KING | 10
TURNER | 30
ADAMS | 20
JAMES | 30
FORD | 20
MILLER | 10
(14 rows)
DELETE FROM emp WHERE deptno = 20;
SELECT ename, deptno FROM emp;
ename | deptno
--------+--------
ALLEN | 30
WARD | 30
MARTIN | 30
BLAKE | 30
CLARK | 10
KING | 10
TURNER | 30
JAMES | 30
MILLER | 10
(9 rows)
Be extremely careful of giving a DELETE command without a WHERE clause such as the
following:
DELETE FROM tablename;
This statement will remove all rows from the given table, leaving it completely empty.
The system will not request confirmation before doing this.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 41
Database Compatibility for Oracle® Developers Guide
2.1.9 The SQL Language
Advanced Server supports SQL language that is compatible with Oracle syntax as well as
syntax and commands for extended functionality (functionality that does not provide
database compatibility for Oracle or support Oracle-styled applications).
The Reference Guide that supports the Database Compatibility for Oracle Developer's
Guide provides detailed information about:
 Compatible SQL syntax and language elements
 Data types
 Supported SQL command syntax
To review a copy of the Reference Guide, visit the Advanced Server website at:
https://www.enterprisedb.com/resources/product-documentation
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 42
Database Compatibility for Oracle® Developers Guide