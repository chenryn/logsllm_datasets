use of bits indicating the encryption to be used may increase
depending on the selection of partial encryption. The function
to be applied for decryption need to be the reverse pair of the
encryption function on the compile process. In this way, it is
ensured that the same data is obtained again.
Signature Generator. Incoming programs to the SoC are
carried with signatures obtained before program encryption in
the software architecture. These signatures are also encrypted
with the program. The Signature Unit is used to recalculate the
signature from the decrypted program in the hardware. This
unit creates the signature of the program with the instructions
it receives as the program is decrypted. Finally, the generated
signature is transferred to the Validation Unit.
Validation Unit. When the decryption of the program is ﬁn-
ished, it transfers its own calculated signature to the Validation
Unit. Likewise, the encrypted signature that comes with the
program is transferred to the Validation Unit. After decrypting
the signature that comes with the program in the Validation
Unit, the signature calculated by the hardware itself and the
signature that comes with the program are compared. If there
is a match, the decrypted program is authorized for execution.
Figure 3 shows the schematic of the proposed architecture.
The orange color on this ﬁgure represents the key components
of ERIC. The numbers on the ﬁgure describe a typical work-
ﬂow of ERIC from program encryption to execution on the
SoC.
1 refers to the generation of PUF-based keys in hardware,
which is the ﬁrst step required for the architecture to work.
The PUF key obtained with the PUF Key Generator generates
the PUF-based key, which will be required for encryption and
decryption, with the Key Management Unit. In this way, it
also provides an abstraction layer over the PUF Key, which is
critical data for SoC’s security.
2 step is to give the requirements to the compilation stage
so that the correct encryption can be done. ERIC’s graphical
interface and technical documentation can be used for this step.
The ISA targeted by the program, the function to be used for
encryption, the partial or full encryption decision, and the key
information of the target hardware should be determined.
3 step involves encrypting the program and packaging it
with the signature. First, the program is compiled for the target
ISA using compiler libraries according to the requirements de-
termined in the previous step. After the compilation is ﬁnished,
the signature of the program is obtained with the Signature
Generator. Second, the key management function, using the
PUF-based key transferred to the compiler stage, generates
keys suitable for the encryption function. The obtained signa-
ture and keys are moved to the encryption function with the
compiled program. In this function, the program is encrypted
according to the encryption constraints of the previous step
and, if necessary, packed with the extra information needed
to decrypt it (in case ERIC performs partial encryption of
a program). Then, with the encryption of the signature, the
encrypted program package and the signature are ready to exit
from the software source.
4 step refers to the secure packaging of the program until
it reaches the target hardware. The program may be stored on a
server waiting to be requested by the target hardware, or it may
be compiled as one of the sub-threads in distributed systems.
It may also be sent to remote hardware from a program source.
In this situation, if the program is accessed by non-target
hardware or malicious parties, the program is protected by
the encrypted program package and the encrypted signature.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
469
Fig. 3: ERIC’s Architecture
5 At this stage, the program and its signature that reaches
the hardware are decrypted in the Decryption Unit with the
PUF Based Key. The decryption process is done in accordance
with the conﬁgurations determined in the encryption process.
Then, the decrypted program is used to generate signatures
again in the Signature Generator Unit. In addition, the de-
crypted signature is transferred to the Validation Unit.
6 step is the ﬁnal stage of the ﬂow. In the Validation
Unit, the signature that comes with the program is compared
with the signature recalculated in the Signature Generator
of hardware. In the case of a match, it is understood that
the program has come without any changes and is specially
packaged for this hardware, and the decrypted program is sent
to the Trusted Zone and becomes suitable for executing on the
processor.
IV. IMPLEMENTATION AND TEST RESULTS
In order to quantify the performance overhead introduced
by ERIC, we implement ERIC on (i) software source and (ii)
target hardware.
TABLE I: Test Environment
Parameter
FPGA
PUF Type
PUF Parameters
Signature Function
Encryption Function
SoC
Test Frequency
Target ISA
L1 Data Cache
L1 Instruction Cache
Register File
Value
Xilinx Zedboard [52]
Arbiter PUF
32x 8-bit challenge 1-bit response
SHA-256
XOR Cipher
Rocket Chip (In-Order 6-stage) [9]
25 MHz
RV64GC
16KiB, 4-way, Set-associative
16KiB, 4-way, Set-associative
31 Entries, 64-bit
We perform the evaluation of ERIC in two parts. First,
we measure ERIC’s encrypted compilation performance for
various software sources. Second, we evaluate ERIC’s per-
formance in decrypting the encrypted software binary on
the target hardware. Table I shows the conﬁguration of our
evaluation. We tested the software source that is encrypted for
the target hardware on our custom LLVM-based encryption
compiler design. We implement the target hardware by build-
ing the SoC we designed for the proposed architecture within
the FPGA. Figure 4 shows the schematic of these designs.
MiBench [23] is used as a benchmark when evaluating system
performance. We selected benchmark programs of MiBench
which is capable with LLVM and RISC-V architecture. Since
the framework we proposed is based on iterations on the pro-
gram and is directly related to the program size in memory, it
is also aimed to use programs of different sizes as benchmarks.
Fig. 4: Scheme of Implemented Model
A. Software Source
We evaluate the software source in a system that includes
the custom compiler we designed. We run benchmark pro-
grams on this system, in which we integrate the encryption and
signature generation functions with our custom compiler. The
compiler is ported from the Clang compiler driver. Also, en-
cryption and signature generation mechanisms are ported from
LLVM tools for integration with the compiler. LLVM provides
functions that support instruction sets and their extensions, so
instructions can be selected directly according to their ﬂags
during compilation. Also with LLVM support, ERIC allows
optimizing the distribution of encrypted instructions during
compilation in accordance with preferences. The mechanism
that we build is combined with ERIC’s interface where com-
pilation and encryption conﬁgurations can be selected
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
470
We use LLVM 11.1 and Clang 11.1 versions for our
prototype. To create the signature mechanism, we implement
the SHA-256 function in C++ and the XOR cipher function
for the encryption function. Since the XOR cipher function
is an encryption method made by passing instructions through
successive XOR gates, the encrypted message is accessed back
in symmetrical steps. We use this function for the simplicity
of the design. The encryption function is performed with the
keys from Key Management Unit. The Key Management Unit
converts the PUF-based key given from the user interface into
keys in the appropriate formats for the Encryption Unit. In
this way, multiple encryption iterations continue with a single
PUF-based key. A PUF-based key is a hardware-generated
key using a PUF key and it
is implemented by the Key
Management Unit on hardware. How we implemented this
process is explained in Section IV.B.
To demonstrate the performance of a system that compiles
programs by encryption and generates signatures, we show the
results with variation in compile-time and program size.
First, the constant change in program size is the addition of
signatures. Regardless of its size, every program is packaged
by adding a 256-bit signature due to the SHA-256 algorithm.
The dynamic increase in program size does not exist if all
instructions are encrypted. However, when the program is
partially encrypted, a bit is added for each instruction in the
program, indicating whether the instruction is encrypted or not.
For partial encryption conﬁguration, the instructions randomly
determined are selected for encryption from the program. This
means a 1-bit increase in program size for every instruction
in the program. As a result, if the program is fully encrypted,
only a 256-bit signature increase will be seen. On the other
hand, if the program is partially encrypted based on instruction
selection, the program package size will increase by 1 bit for
each instruction and by 256-bits for the signature. Program
package size converging to this calculation is measured in
tests. It has been observed that the rate of increases in program
package size can change since 1 bit of extra information is
received for 16 bits if the compressed instructions in the RISC-
V ISA are included in the program.
Fig. 5: Program Package Size Comparison of Encrypted Pro-
gram Packages and Unencrypted Compiled Programs based
on its Unencrypted Program’s Size Normalization
Since ﬁxed-size signature bits are added to each program
package regardless of the size of the program, it is expected
that the program size change rates will not be equal. Fig-
ure 5 shows the size change of encrypted program packages
relative to plain-text (i.e., not encrypted) program size. The
highest increase, the program size packed with the signature
in encrypted form, is 3.73% more than the normal compiled
program size and the average increase is 1.59%.
The change in compile time of Benchmark Programs is
shown in Figure 6. Each benchmark program is normalized
to its baseline and shown in the graph. To obtain the baseline,
each program was compiled with the default Clang compiler
and the compilation time was measured. Then, the time taken
by compiling and packaging the programs was measured with
the mechanism we implemented in the same environment. Ac-
cording to the results obtained, the compilation time increased
by 33.20% in the worst scenario and 15.22% on average.
Fig. 6: Compile-Time Comparison of Each Benchmark Ap-
plication based on its Unencrypted Program’s Compile-Time
Normalization
B. Target Hardware
We evaluate the performance of the target hardware by
implementing the HDE Units, which we develop as the
mechanism that provides security with Rocket Chip, on Xil-
inx Zedboard. XOR Cipher-based decryption is used for the
Decryption Unit. By connecting these units with a common
interface, the area overhead in the hardware was calculated.
FPGA implementation of Rocket Chip with the HDE Unit and
only Rocket Chip implementation are compared in Table II.
The proposed hardware architecture requires 2.63% more
lookup tables (LUTs) and 3.83% more ﬂip-ﬂops compared
to the Rocket Chip baseline.
TABLE II: Area Results of FPGA Implementation
Rocket Chip Rocket Chip + HDE Change (%)
Total Slice LUTs
Total Flip-Flops
Frequency(MHz)
33894
19093
25
34811
19854
25
+2,63
+3,83
-
We ran the encrypted program packages on the FPGA to
observe the performance of the encrypted programs on the
SoC. In order to create a baseline, we ran the programs com-
piled without encryption in the same system conﬁgurations
with Rocket Chip. The change in execution time is shown in
the graph in Figure 7, normalized to the baseline. According
to the results obtained, it is observed that the method we
recommended slows down the system by 7.05% at most and
4.13% on average. Since the architecture proposed by ERIC
is outside of the Rocket Chip,
the effect of the working
performance and working methods of the programs on the
system performance is not directly observed when working
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
471
ture we proposed is applicable to all processors, as it decrypts
the instructions without fetching them to the processor core.
It does not directly affect the execution process and can be
conﬁgured for all compilers as it supports standard ISAs.
On the other hand, there are proposed trusted execution
these studies are
environment studies [11], [41]. Mainly,
approaches to isolating execution within the processing unit.
However, the goal of ERIC is to protect the program from
malicious actions and any modiﬁcation during transit in an
untrusted network medium while ensuring that the program
comes from the correct software source and reaches the correct
target hardware. Also, ERIC does not directly involve the
architecture of the processing unit.
There are also prior works for the security of the pro-
gram on the processor and the execution of the trusted
program [54], [12], [2], [17], [43]. ERIC framework stands
out with its features: (i) provides a consistent end-to-end
architecture and offers compiler support for hardware changes
with low overhead for both, (ii) does not require modiﬁcations
to processor microarchitecture, so could be applied to different
architectures without extension or CPU support, (iii) can be
added to scalable systems such as servers and networks as
it is included in the SoC, not the processor design, (iv) can
authenticate not only the hardware but also the software source
(v) does not directly affect cache and TLB performance in a
system that has sufﬁcient resources.
VI. CONCLUSION