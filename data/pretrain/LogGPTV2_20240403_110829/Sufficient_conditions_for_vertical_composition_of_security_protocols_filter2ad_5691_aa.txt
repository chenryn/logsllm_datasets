title:Sufficient conditions for vertical composition of security protocols
author:Sebastian M&quot;odersheim and
Luca Viganò
Sufﬁcient Conditions for
Vertical Composition of Security Protocols
Sebastian Mödersheim
PI:EMAIL
DTU Compute
Lyngby, Denmark
ABSTRACT
Vertical composition of security protocols means that an ap-
plication protocol (e.g., a banking service) runs over a chan-
nel established by another protocol (e.g., a secure channel
provided by TLS). This naturally gives rise to a composi-
tionality question: given a secure protocol P1 that provides
a certain kind of channel as a goal and another secure proto-
col P2 that assumes this kind of channel, can we then derive
that their vertical composition P2[P1] is secure? It is well
known that protocol composition can lead to attacks even
when the individual protocols are all secure in isolation. In
this paper, we formalize seven easy-to-check static condi-
tions that support a large class of channels and applications
and that we prove to be suﬃcient for vertical security pro-
tocol composition.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Security
and protection; C.2.2 [Computer-Communication Net-
works]: Network Protocols—Protocol veriﬁcation
Keywords
Security protocols; protocol composition; veriﬁcation; static
analysis; model checking
1.
INTRODUCTION
It is preferable to verify small or medium-size security
protocols (such as TLS) in isolation because: (1) The com-
position of several protocols immediately leads to very com-
plex systems that are infeasible for formal veriﬁcation, be it
manual or automated; (2) one should not have to repeat a
security proof of all existing protocols whenever a new pro-
tocol is added to a system (i.e., the veriﬁcation should be
independent of what other protocols may later be used on
the same network); and (3) one should strive for general and
reusable results, e.g., that TLS provides a secure channel no
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan.
Copyright 2014 ACM 978-1-4503-2800-5/14/06 ...$15.00.
http://dx.doi.org/10.1145/2590296.2590330.
Luca Viganò
Department of Informatics
King’s College London, UK
PI:EMAIL
matter what application it is used for. Similarly, the ver-
iﬁcation of an application protocol that relies on a secure
channel should be completely independent of how (i.e., by
which other protocol) that channel is actually realized.
In general, however, the composition of secure protocols
may lead to attacks even when the individual protocols are
all secure in isolation. Compositional reasoning thus aims
at identifying conditions for security protocols that are suf-
ﬁcient to prove a statement of the form: whenever secure
protocols (that satisfy the conditions) are composed, then
also their composition is secure.
There are several results for the parallel composition of
security protocols (e.g., [11, 12]), i.e., when two or more pro-
tocols are used (independently) on the same network. The
general idea is here that the message formats of the involved
protocols need to be suﬃciently diﬀerent, so that message
parts of one protocol cannot be accidentally mistaken for
message parts of another protocol, to avoid any risk that
confusions could be exploited by an intruder. Note that, in
general, such conditions are suﬃcient for compositionality1
but not necessary: some protocols with confusable proto-
col formats may still be sound to compose when confusions
cannot be exploited by an intruder.
Another line of work concerns sequential protocol com-
position (e.g., [10, 12, 14, 18, 20]), where the result of one
protocol, e.g., a shared session key, becomes input to a sec-
ond, subsequent secure channel protocol. One may interpret
TLS as an example of sequential composition where the TLS
handshake protocol establishes a pair of symmetric keys and
the TLS transport protocol uses them to encrypt messages
of an application protocol. A disadvantage of this view is
that we must consider the agglomeration of TLS transport
with the application protocol, while we would rather like to
have a clear-cut dividing line between channel protocol and
application protocol, as is common in the layered Internet.
For such a view of layered protocols we will use the term
vertical protocol composition, in contrast to sequential and
parallel composition that we refer to as horizontal composi-
tions. Maurer et al. [24] (but see also the more recent [22,
23]) have initiated an idea to capture very diﬀerent means
of communication, based on cryptography, protocols, and
non-technical means (e.g., trust relationships or humans who
know each other) with a notion of channels that may build
on each other. For instance, a banking service may run
over a secure channel that is provided by another protocol
such as TLS. Another example is Diﬃe-Hellman that allows
1In this paper, we use the terms compositionality and com-
posability interchangeably.
435two agents A and B to establish secure channels with each
other, provided that they already have authentic channels;
how exactly these channels are realized does not matter for
Diﬃe-Hellman.
In [27], we used the concepts that Maurer et al. had pre-
sented informally in [24] and gave a formal deﬁnition in a
transition-system model for security protocols. In particu-
lar, channels can be both assumptions of a protocol (e.g., the
authentic channels in Diﬃe-Hellman) and goals of a protocol
(e.g., that Diﬃe-Hellman establishes secure channels).2 This
naturally gives rise to a compositionality question: given a
secure protocol P1 that provides a certain kind of channel
as a goal (e.g., TLS) and another secure protocol P2 that
assumes this kind of channel (e.g., a banking service), is it
then possible to derive that their vertical composition P2[P1]
(e.g., a banking service over TLS) is secure?
We can distinguish two aspects for the potential failure of
such a composition:
1. In [27], we considered what we call the logical aspect:
a mismatch between the behavior of a channel as an
assumption and as a goal.
2. But there is also a static aspect: an interference be-
tween the message formats (when message parts of P1
could be confused with message parts of P2).
In [27], we proved only the logical aspect of the composi-
tionality question for our notion of channels, while for the
static aspect we simply assumed that the composed proto-
cols do not interfere with each other. In fact, this assump-
tion is a semantical condition that involves the set of all
concrete runs of the composed protocols—as opposed to a
simple syntactic check on the protocols. We suggested there
that this could maybe be solved similar to existing disjoint-
ness notions in parallel protocol composition, but left this
complex problem open.
Contributions.
This open problem of how to deal with the static aspect
of vertical protocol composition turns out to be intricate for
two main reasons. First, in contrast to all horizontal compo-
sition types, the vertical composition has to deal with mes-
sages that are composed from the channel protocol P1 and
the application protocol P2, because the payload messages
of P2 are embedded into message-templates of P1 that are
used for transferring messages with the desired properties.
Second, we have that the channel protocol is parameterized
over a payload message.3 We want to be able to use stan-
dard existing veriﬁcation methods to verify P1, especially
independent of payload messages of a particular P2. This is
in fact why we call this problem the static aspect: we want
to see this independent of the dynamic behavior of P2 using
a form of abstract interpretation for the payload.
We deﬁne a precise interface for the abstract payload in a
“pure” P1 that is suitable for all standard protocol veriﬁca-
tion methods. This further gives rise to the notion of static
2In fact, later papers [22, 23] have more formal notions of
channels as well, but very remote from transition systems.
3As we describe in more detail below, the fact that the pay-
load is used as a placeholder for data from an arbitrary pro-
tocol makes this a complex problem that cannot be solved
simply by requiring the two protocols to be disjoint (which
is the typical solution for other kinds of compositionality).
vertical composition P P2
1 , where “statically” all possible pay-
loads of a protocol P2 are inserted into P1 and this serves as
an interface to the results of [27]. Building on this notion,
the main contributions of this paper are:
(1) We give a set of seven syntactic conditions on P1 and
P2 that are easy to check statically. In a nutshell, they re-
quire the disjointness of the message formats of P1 and P2,
and that the payloads of P2 are embedded into P1 under
a unique context to deﬁne a sharp borderline. Our seven
conditions are satisﬁed by a large class of protocols in prac-
tice. In fact, we believe (and discuss in detail at the end of
Section 4) that our conditions are in line with the general
principles of prudent engineering for security protocols [1].
(2) We give a compositionality result that shows that the
seven conditions are suﬃcient for static vertical composi-
tion, i.e., if P1 and P2 are secure in isolation (which can
be established using any classical method) and they satisfy
(cid:107) P2 is secure, where (cid:107)
the seven conditions, then also P P2
denotes parallel composition. That, in turn, is suﬃcient for
the result in [27] to infer that P2[P1] is secure. The proof of
our compositionality result can be found in [28].
1
Finally we also discuss how to extend the result to channel
protocols that support more than one channel type and to
an arbitrary number of message transmissions, and illustrate
this for a TLS-based example. These results are left infor-
mal though, since the general vertical protocol composition
framework of [27] needs to be extended to this end.
Related Work.
Like the previous results in horizontal protocol composi-
tion (see [2, 13, 16, 17] in addition to the works already
cited above), our result requires disjoint message formats of
the diﬀerent protocols involved to avoid confusions. Ver-
tical protocol composition, however, makes a diﬀerence in
that the several layers of a protocol stack can be veriﬁed
independently, even though messages of the composed pro-
tocols are themselves composed from the diﬀerent layers.
For instance, in contrast to [10], we can consider an applica-
tion protocol completely independent from a transport layer
(such as TLS).
The work most similar to ours is [15], which also con-
siders vertical protocol composition. The diﬀerence is that
[15] supports only one particular kind of channel protocol,
namely one that establishes a pair of symmetric keys (one for
each communication direction) and then encrypts all mes-
sages of the application protocol with the key for the respec-
tive direction. In contrast, our results in the present paper
are compatible with many channel types (for which the logi-
cal connection between channels as assumptions and as goals
has to be proved like in [27]) and the transmission over the
channel is not limited to symmetric encryption but may be
any realization of the desired channel type. Despite being
less general in this respect, [15] allows for arbitrary stacks
where the same protocol may occur several times, which is
here excluded due to disjointness.
Vertical protocol composition is conceptually close to the
view of many cryptographers such as [22, 23, 24] and the
Universal Composability (UC) framework [8]. The original
UC has however very restrictive assumptions that forbid its
application to many practical compositions, e.g., that dif-
ferent protocols use the same key-material. Recent exten-
sions and modiﬁcations of UC have improved the situation
drastically [21]. A detailed comparison is diﬃcult here be-
436cause the UC-works, and similarly the other cryptographic
approaches, are rooted in the cryptographic world based on
the indistinguishability of an ideal and a real system, while
our approach is based on trace-based protocol semantics and
properties (and treats cryptography as black boxes). Works
are emerging that bridge the gap between the cryptographic
and the symbolic world, but this is beyond the scope of
our paper. Rather, we are interested in obtaining results
that can be immediately applied with the established proto-
col veriﬁcation approaches and we formalize suﬃcient con-
ditions that are both easy to check and satisﬁed by many
protocols in practice.
Organization.
Section 2 contains some formal preliminaries. To ease the
reading, we ﬁrst (Section 3) discuss our compositionality
theorem that shows that the seven conditions that we for-
malize in this paper are suﬃcient for static vertical compo-
sition and then (Section 4) describe the conditions and illus-
trate the role that they play in the theorem. In Section 5,
we discuss an extension of our compositionality result, and
we draw conclusions in Section 6.
2. PRELIMINARIES: PROTOCOL MESSA-
GES AND TRANSITION SYSTEM
2.1 Messages
Following the line of black-box cryptography models, we
employ a term algebra to model the messages that partici-
pants exchange. Let Σ be a countable signature and V be a
countable set of variable symbols disjoint from Σ. The sig-
nature is partitioned into the set Σ0 of constants and the set
Σp of “public” operations. As a convention, we denote vari-
ables with upper-case letters and constants with lower-case
letters. We use standard notions about terms such as ground
(without variables), atomic, etc. We write TΣ to denote the
set of ground terms and TΣ(V) to denote all terms.
The constants represent agents, keys, nonces, and the like.
The function symbols of Σp represent operations on mes-
sages that every agent can perform. In this paper, we use the
following function symbols: {m}k represents the asymmet-
ric encryption of message m with a public or private key k;
{|m|}k represents the symmetric encryption of m with sym-
metric key k (we assume that this primitive includes also
integrity protection such as a MAC); and [m1, . . . , mn]n,
for every n ≥ 2, represents the concatenation of n messages
m1, . . . , mn (we use this family of operators to abstract from
the details of structuring messages in the implementation).
We also use a set of meta-symbols Σm that we refer to
as mappings. We use them to specify mappings that do not
necessarily correspond to operations that agents can per-
form on messages, e.g., pubk(s) and privk(s) represent the
public and private keys resulting from a seed s. Moreover,
pk(A) may represent the seed for the public key of agent
A to model a ﬁxed public-key infrastructure. Most impor-
tantly, we use the mapping payload(A, B) to denote an ab-
stract payload message that A wants to send to B (we will
make precise the details of payload messages below). For-
mally, these mappings are injective functions on Σ0 (rather
than function symbols of the term algebra). As a conse-
quence, the expression payload(A, B) represents a constant
of Σ0, and is thus regarded as atomic.
2.2 Transition system (ASLan)
For concreteness, as a formal protocol speciﬁcation lan-
guage, we use here the AVANTSSAR Speciﬁcation Language
ASLan [5, 3] but all our results carry over to other protocol
formalisms such as strands, the applied π calculus, and so
on. ASLan is (i) expressive enough that many high-level lan-
guages (e.g., BPMN or Alice-and-Bob-style languages such
as the one we will consider in the following for channels and
composition) can be translated to it, and (ii) amenable to
formal analysis (e.g., with the AVANTSSAR Platform [3]).
ASLan provides the user with an expressive language for
specifying security protocols and their properties, based on
set rewriting. At its core, ASLan describes a state-transition
system, where states are sets of facts (i.e., predicates that
express something that holds true in a give state) sepa-