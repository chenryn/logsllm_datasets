        if(!isset($arr_filename['extension'])){
            $arr_filename['extension']='';
        }
        //先验证后缀名
        if(!in_array(strtolower($arr_filename['extension']),$type)){//转换成小写，在比较
            $return_data['error']='你传的好像不是图片哦~(后缀名不是'.implode(',',$type).'中的一个)';
            $return_data['return']=false;
            return $return_data;
        }
        //验证MIME类型，MIME类型可以被绕过
        if(!in_array($_FILES[$key]['type'], $mime)){
            $return_data['error']='你上传的是个假图片，不要欺骗我xxx！';
            $return_data['return']=false;
            return $return_data;
        }
        //通过getimagesize来读取图片的属性，从而判断是不是真实的图片，还是可以被绕过的
        if(!getimagesize($_FILES[$key]['tmp_name'])){
            $return_data['error']='你上传的是个假图片，不要欺骗我！';
            $return_data['return']=false;
            return $return_data;
        }
        //验证大小
        if($_FILES[$key]['size']>$size){
            $return_data['error']='上传文件的大小不能超过'.$size.'byte(500kb)';
            $return_data['return']=false;
            return $return_data;
        }
        //把上传的文件给他搞一个新的路径存起来
        if(!file_exists($save_path)){
            if(!mkdir($save_path,0777,true)){
                $return_data['error']='上传文件保存目录创建失败，请检查权限!';
                $return_data['return']=false;
                return $return_data;
            }
        }
        //生成一个新的文件名，并将新的文件名和之前获取的扩展名合起来，形成文件名称
        $new_filename=str_replace('.','',uniqid(mt_rand(100000,999999),true));
        if($arr_filename['extension']!=''){
            $arr_filename['extension']=strtolower($arr_filename['extension']);//小写保存
            $new_filename.=".{$arr_filename['extension']}";
        }
        //将tmp目录里面的文件拷贝到指定目录下并使用新的名称
        $save_path=rtrim($save_path,'/').'/';
        if(!move_uploaded_file($_FILES[$key]['tmp_name'],$save_path.$new_filename)){
            $return_data['error']='临时文件移动失败，请检查权限!';
            $return_data['return']=false;
            return $return_data;
        }
        //如果以上都通过了，则返回这些值，存储的路径，新的文件名（不要暴露出去）
        $return_data['save_path']=$save_path.$new_filename;
        $return_data['filename']=$new_filename;
        $return_data['return']=true;
        return $return_data;
        }
    ?>
###  未知的风险-1
考点：JWT攻击、XXE
题目打开，显示`hello guest;`
猜测应该是用户身份伪造，查看Cookie
从Cookie中的token格式可以看出来是通过JWT进行身份验证的
jwt解码可以看到Head里面的签名算法和payload里面的用户验证id，下来就是要绕过用户guest，达到任意用户身份伪造。
一般常见的JWT攻击手法主要包括四种：
  * 算法修改
  * 密钥可控
  * 密钥爆破
  * None签名
知道了上面的四种攻击手法之后，先对网站进行敏感信息探测是否存在密钥key泄露问题（【X】未果）,接着尝试对上面的token进行密钥的爆破，使用常用的jwt弱密钥爆破工具[c-jwt-cracker: JWT brute force cracker written in C](https://github.com/brendan-rius/c-jwt-cracker)进行爆破
很长时间没爆出来，发现无效，尝试制作相关的弱口令字典
使用自制字典利用工具[JWTPyCrack](https://github.com/Ch1ngg/JWTPyCrack)协助再次进行爆破（结果总是令人伤感的23333）
测试到这里只有最后一种攻击手法了，利用很简单，直接伪造任意用户id，并使用None签名算法进行伪造Token。
根据题目描述只有用户`user`才有权限进行后续的操作，于是对用户`user`进行身份伪造
伪造脚本
    import jwt
    token = jwt.encode({"id":"user","iat":"1588902740", "jti": "cd811589c43d3d507c64b14a6f64e8d8"},algorithm="none",key="").decode(encoding='utf-8')
    print(token)
（在这里，细心的话会发现JWT的第三部分是空的，因为签名算法为None，密钥Key为空）
利用生成伪造的user身份的Token替换原有Token进行伪造用户验证
伪造的用户user通过验证，进入用户登录界面，查看源码，发现存在用户名和密码通过XML进行处理
直接抓包进行XXE漏洞的探测，构造XXE Payload进行敏感文件的读取
    ]>
    &file;66666
利用payload探测发现内容读取的文件正常回显，并且没有对用户的输入进行过滤
既然存在XXE漏洞且不存在过滤，尝试读取源码doLogin.php
从结果分析，存在xxe漏洞为什么读取不了呢，这里就需要注意了，php文件的格式``类似XML文件``，如果不做处理直接读取是读不出来的，因为其会把php文件当作xml进行解析导致读取出现问题，既然这样可以使用`php://filter`对文件进行base64编码再显示，这样就不会出现上述问题
再次构造Payload
    ]>
    &file;66666
可以看到这次结果正常，提取编码后的结果进行base64解码
从源码中可以看到包含有flag.php，利用上述payload直接读取得到flag
    flag{get_the_methodd}
**附题目源码**
  * index.php
    'guest','iat'=>time(),'jti'=>md5(uniqid($ip).time()));
        $cookie=$jwt->getToken($payload);
        setcookie('token',$cookie);
    }
    $cookie=$_COOKIE['token'];
    $identity='guest';
    if($jwt->verifyToken($cookie)){
        $identity=$jwt->getidentity();
    }
    else{
        $identity='guest';
    }
    $allowedPages = array(
        'guest'     => './in.html',
        'user'    => './login_for_user.html',
    );
    include(isset($allowedPages[$identity]) ? $allowedPages[$identity] : $allowedPages["guest"]);
  * doLogin.php
    loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
    //echo var_dump($dom);
    $creds = simplexml_import_dom($dom);
    $username = $creds->username;
    $password = $creds->password;
    if($username == $USERNAME && $password == $PASSWORD){
    $result = sprintf("%d%s",1,$username);
    //if not null
    }else{
    }$result = sprintf("%d%s",0,$username);
    }catch(Exception $e){
    $result = sprintf("%d%s",3,$e->getMessage());
    }
    header('Content-Type: text/html; charset=utf-8');
    echo $result;
    ?>
###  未知的风险-2
考点：PHP对象注入、代码审计、序列化
题目上来给了一个文件上传的服务，没有直接去测试，对网站进行敏感信息收集，发现存在`robots.txt`泄露
    User-agent: *
    Disallow: /index.txt
访问`index.txt`获取网站源码
    fakename = $fakename;
            $this->realname = sha1($content).$ext;
        }
        function open($fakename, $realname) {
            global $sandbox_dir;
            $analysis = "$fakename is in folder $sandbox_dir/$realname.";
            return $analysis;
        }
    }
    if(!is_dir($sandbox_dir)) {
        mkdir($sandbox_dir,0777,true);
    }
    if(!is_file($sandbox_dir.'/.htaccess')) {
        file_put_contents($sandbox_dir.'/.htaccess', "php_flag engine off");
    }
    if(!isset($_GET['action'])) {
        $_GET['action'] = 'home';
    }
    if(!isset($_COOKIE['files'])) {
        setcookie('files', myserialize([], $secret));
        $_COOKIE['files'] = myserialize([], $secret);
    }
    switch($_GET['action']){
        case 'home':
        default:
            $content = "";
            $files = myunserialize($_COOKIE['files'], $secret);
            if($files) {
                $content .= "";
                $i = 0;
                foreach($files as $file) {
                    $content .= "fakename)."'>Click to show locations";
                    $i++;
                }
                $content .= "";
            }
            echo $content;
            break;
        case 'upload':
            if($_SERVER['REQUEST_METHOD'] === "POST") {
                if(isset($_FILES['file'])) {
                    $uploadfile = new UploadFile;
                    $uploadfile->upload($_FILES['file']['name'], file_get_contents($_FILES['file']['tmp_name']));
                    $files = myunserialize($_COOKIE['files'], $secret);
                    $files[] = $uploadfile;
                    setcookie('files', myserialize($files, $secret));
                    header("Location: index.php?action=home");
                    exit;
                }
            }
            break;
        case 'changename':
            if($_SERVER['REQUEST_METHOD'] === "POST") {
                $files = myunserialize($_COOKIE['files'], $secret);
                if(isset($files[$_GET['i']]) && isset($_POST['newname'])){
                    $files[$_GET['i']]->fakename = $_POST['newname'];
                }
                setcookie('files', myserialize($files, $secret));
            }