    ntuser.ini
    thumbs.db
    RGNR_.txt
检查文件名是否在黑名单中：
如果文件使用了上述名称，则将会被忽略。不仅如此，如果文件使用特定的扩展名，恶意软件也同样会不对其进行加密处理，这些扩展名包括：
    .db
    .sys
    .dll
    .lnk
    .msi
    .drv
    .exe
检查文件扩展名是否在黑名单中：
以上就是全部的检查过程，这样可以充分防止勒索软件破坏操作系统，因为他们需要受害者能够访问主机，这样才能看到勒索信息并有可能支付赎金。
对于通过检查后的所有文件，恶意软件将会创建一个线程对其进行加密。创建所有线程后，恶意软件将使用`WaitForMultipleObjects`函数等待运行完成。
在加密进程的线程中，恶意软件通过`SetFilePointerEx`函数读取文件的最后9个字节，判断文件末尾是否带有“ _RAGNAR_
”标记。如果带有此标记，则该文件将会在加密过程中被忽略，并将再次对其重命名。
检查文件中是否有加密标记：
在其他情况下，恶意软件将会对文件进行加密，并在文件末尾写入密钥的加密块（256字节）、随机数（256字节）和“ _RAGNAR_
”标记，最后以一个NULL字符结尾（9字节）。在Salsa20算法中使用的密钥和随机数由嵌入在恶意软件中的RSA公钥进行加密。这样一来，就可以确保只有恶意软件开发人员才拥有RSA私钥，并有能力解密系统中的文件。
在写入信息前，恶意软件将使用`LockFile`函数，并在写入函数进程执行完成后使用`UnlockFile`函数释放已经加密的文件。这样做是为了防止在加密过程中文件被更改或删除。
在文件末尾写入新的内容：
在加密后，或者判断文件已经被加密后，恶意软件会将扩展名修改为新的扩展名，例如“.ragnar_45EF5632”。
修改文件扩展名：
在结束所有加密线程之后，恶意软件尝试获取终端服务会话，或使用`WTSGetActiveConsoleSessionId`函数登录本地计算机的用户会话。在这个会话中，恶意软件会使用`GetCurrentProcess`函数获取恶意软件的当前进程，并使用`OpenProcessToken`函数获取该进程的令牌。对于先前获得的会话，它尝试使用`DuplicateTokenEx`函数来复制令牌，并使用`SetTokenInformation`函数设置为这个令牌。之后，将使用`GetSystemDirectoryW`函数获取系统目录，并将字符串`notepad.exe`连接到该路径后面。
获取本地用户或终端服务的会话并管理令牌：
在准备好这项工作之后，恶意软件将运行记事本，并将赎金提示信息展示给用户。在这一过程，使用的函数是`CreateProcessAsUserW`，以模拟此前用户的会话。
创建记事本进程，并展示赎金提示信息：
在这一步骤之后，恶意软件就完成了其全部的功能，并使用`ExitProcess`函数退出，退出代码为0。
## 四、勒索软件免疫
在技术部分，我们已经详细分析了该勒索软件的工作原理。如果精心制作一个可以生成特定事件的程序，那么理论上就可以实现该勒索软件的免疫。如上一章所述，如果在系统中存在特定事件，则恶意软件就不会再产生破坏。但是，这种免疫的方式并不是一个长期稳妥的解决方案，原因主要在于：
1、恶意软件开发人员可以更改算法，或者调整事件名称的顺序，或者使用互斥锁来替代事件，这将导致免疫失效。
2、该算法具有硬编码值。如果更改此值，则最终的哈希值将会有所不同，并且免疫将会失效。
3、恶意软件的开发方式是，如果具有至少两个参数，则不会创建该事件，因此，如果恶意软件运营人员希望安全地执行，只需要带有一个参数执行即可，例如`
1`。
4、恶意软件可能随着时间不断发展，因此上述免疫方式可能非常脆弱，或受到一定限制。
## 五、总结
RagnarLocker勒索软件非常具有典型性，由于其体积较小，再加上恶意软件运营人员采取了比较激进的行为模式，以及其中使用了多种技术，导致该勒索软件可能会轻松进入到企业网络中，勒索企业人员支付赎金以防止信息泄露。RagnarLocker勒索软件在以后可能会成为一个巨大的威胁，这一点只能交由时间去证明。我们综合评估该勒索软件的代码质量是中等水平。
## 六、MITRE ATT&CK
1、命令和控制：标准应用层协议  
2、逃避防御：禁用安全工具  
3、侦查：侦查安全软件  
4、侦查：侦查软件  
5、侦查：侦查系统信息  
6、侦查：侦查系统服务  
7、侦查：侦查系统时间  
8、侦查：查询注册表  
9、执行：命令行界面  
10、执行：通过API执行  
11、渗出：数据加密  
12、影响：加密数据以产生影响  
13、影响：停止服务
## 七、YARA规则
    rule RagnarLocker
    {
        /*
          This YARA rule detects the ransomware RagnarLocker in memory or unpacked in disk for the sample with hash SHA1 97f45184770693a91054075f8a45290d4d1fc06f and perhaps other samples
        */
        meta:
            author      = “McAfee ATR Team”
            description = “Rule to detect unpacked sample of RagnarLocker”
            version     = “1.0”
        strings:
            $a = { 42 81 F1 3C FF 01 AB 03 F1 8B C6 C1 C0 0D 2B F0 3B D7 }
        condition:
            $a
    }
    import “pe”
    rule ragnarlocker_ransomware
    {
       meta:
          description = “Rule to detect RagnarLocker samples”
          author = “Christiaan Beek | Marc Rivero | McAfee ATR Team”
          reference = “https://www.bleepingcomputer.com/news/security/ragnar-locker-ransomware-targets-msp-enterprise-support-tools/”
          date = “2020-04-15”
          hash1 = “63096f288f49b25d50f4aea52dc1fc00871b3927fa2a81fa0b0d752b261a3059”
          hash2 = “9bdd7f965d1c67396afb0a84c78b4d12118ff377db7efdca4a1340933120f376”
          hash3 = “ec35c76ad2c8192f09c02eca1f263b406163470ca8438d054db7adcf5bfc0597”
          hash4 = “9706a97ffa43a0258571def8912dc2b8bf1ee207676052ad1b9c16ca9953fc2c”
       strings:
          //—RAGNAR SECRET—
          $s1 = {2D 2D 2D 52 41 47 4E 41 52 20 53 45 43 52 45 54 2D 2D 2D}
          $s2 = { 66 ?? ?? ?? ?? ?? ?? 66 ?? ?? ?? B8 ?? ?? ?? ?? 0F 44 }
          $s3 = { 5? 8B ?? 5? 5? 8B ?? ?? 8B ?? 85 ?? 0F 84 }
          $s4 = { FF 1? ?? ?? ?? ?? 3D ?? ?? ?? ?? 0F 85 }
          $s5 = { 8D ?? ?? ?? ?? ?? 5? FF 7? ?? E8 ?? ?? ?? ?? 85 ?? 0F 85 }
          $op1 = { 0f 11 85 70 ff ff ff 8b b5 74 ff ff ff 0f 10 41 }
          $p0 = { 72 eb fe ff 55 8b ec 81 ec 00 01 00 00 53 56 57 }
          $p1 = { 60 be 00 00 41 00 8d be 00 10 ff ff 57 eb 0b 90 }
          $bp0 = { e8 b7 d2 ff ff ff b6 84 }
          $bp1 = { c7 85 7c ff ff ff 24 d2 00 00 8b 8d 7c ff ff ff }
          $bp2 = { 8d 85 7c ff ff ff 89 85 64 ff ff ff 8d 4d 84 89 }
       condition:
         uint16(0) == 0x5a4d and
         filesize < 100KB and
         (4 of ($s*) and $op1) or
         all of ($p*) and pe.imphash() == “9f611945f0fe0109fe728f39aad47024” or
         all of ($bp*) and pe.imphash() == “489a2424d7a14a26bfcfb006de3cd226”
    }
## 八、威胁指标
SHA256 7af61ce420051640c50b0e73e718dd8c55dddfcb58917a3bead9d3ece2f3e929  
SHA256 c2bd70495630ed8279de0713a010e5e55f3da29323b59ef71401b12942ba52f6  
SHA256 dd5d4cf9422b6e4514d49a3ec542cffb682be8a24079010cda689afbb44ac0f4  
SHA256 63096f288f49b25d50f4aea52dc1fc00871b3927fa2a81fa0b0d752b261a3059  
SHA256 b670441066ff868d06c682e5167b9dbc85b5323f3acfbbc044cabc0e5a594186  
SHA256 68eb2d2d7866775d6bf106a914281491d23769a9eda88fc078328150b8432bb3  
SHA256 1bf68d3d1b89e4f225c947442dc71a4793a3100465c95ae85ce6f7d987100ee1  
SHA256 30dcc7a8ae98e52ee5547379048ca1fc90925e09a2a81c055021ba225c1d064c