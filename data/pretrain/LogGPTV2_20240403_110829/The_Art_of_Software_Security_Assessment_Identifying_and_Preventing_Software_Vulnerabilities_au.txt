based on variables the user wants to track and what code paths are affected by that 
variable. This feature can be useful for enforcing the control-flow and data-flow 
sensitivities of your analysis. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
165 
Table 4-24. Code Surfer 
Operating system 
UNIX and Windows 
Product requirements Cygwin if installed on Windows 
Free version available No 
URL 
www.grammatech.com/products/codesurfer/ 
Key features 
Multiple language support 
Cross-referencing 
Graphing capabilities 
Text searching and replacing 
Definition lookups 
Understand 
Understand by SciTools (summarized in Table 4-25) is designed for analyzing large 
codebases and supports a number of different languages. It's available as a GUI for 
both Windows and UNIX OSs. Understand is one of the most full-featured source code 
reading environment available today (with an especially easy-to-use and configurable 
interface). Understand also has a scripting interface for automating source-code 
analysis tasks. 
Table 4-25. Understand 
Operating system 
UNIX and Windows 
Product requirements None 
Free version available Time-limited trial 
URL 
www.scitools.com/ 
Key features 
Multiple language support 
Cross-referencing 
Graphing capabilities 
Text searching and replacing 
Definition lookups 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
166 
Table 4-25. Understand 
Operating system 
UNIX and Windows 
Scripting and plug-in capabilities 
Debuggers 
Debugging is an integral part of a code auditor's job. It might be helpful when 
tracking down what code paths are used under a given set of circumstances, tracking 
down a fault that occurred as a result of black box testing, or verifying a vulnerability 
that has been located in the code. Quite a selection of debuggers are available for 
both Windows and UNIX-based OSs, and many have support for any architecture the 
OS is available on (to varying degrees). The level of sophistication in debuggers 
varies widely, as do their feature sets, so familiarize yourself with a number of 
debuggers to see which one suits you best. The following features are some good 
things to look for when selecting a debugger: 
Kernel debugging Most debuggers are designed for debugging user land 
processes. You might be required to debug a kernel or kernel drivers, however. 
If so, you need a debugger with the capability of stepping through code that's 
running in kernel mode. Kernel debuggers are few and far between compared 
to regular debuggers, so if you anticipate doing any kernel-related work, 
familiarizing yourself with the popular ones is well worth your time. 
Memory searching This is simply the ability to search for strings and values 
through arbitrary memory ranges. It might seem like a basic requirement for 
debuggers, but surprisingly, a few lack this feature. 
Scripting capabilities Defining custom commands or macros for use when 
debugging an application can be useful. Scripting capabilities can be a 
powerful feature, and they're convenient for automating repetitive tasks. 
Debugging support Certain binary file formats (such as ELF) have the 
capability to contain extensive debugging information, including source code, 
line numbering, source filenames, and so on. Other file formats are created 
when a program is compiled specifically to store debugging information (such 
as DBG files). This information is often useful, and a good debugger should be 
able to interpret this data to make debugging more manageable. 
Conditional breakpoints You might need the ability to provide a set of 
requirements to be met for a breakpoint to trigger. This way, you don't need 
to manually check process state every time a breakpoint is triggered to 
determine whether it's relevant to what you're examining. 
Thread support Debugging multithreaded applications can be quite difficult. 
Although nearly all debuggers support debugging multithreaded applications, 
some are better than others. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
167 
On-the-fly assembling It can be useful to write assembly code that the 
debugger interprets into bytecode, especially when you're injecting code 
manually in a process or modifying code to test some condition. 
Remote debugging support Depending on the task at hand, being able to 
debug a machine over the network can be convenient. 
The following sections describe some popular debuggers available for different OSs. 
GNU Debugger (GDB) 
GDB, summarized in Table 4-26, is probably the most widely used debugger for 
UNIX-based systems. It's a console debugger (although GUI front ends are available) 
that offers a fairly rich feature set and is quite easy to use (if you're familiar with 
assembly code and general debugger usea requirement if you plan to be effective 
with a debugger). Most of the commands use a similar syntax, so after you familiarize 
yourself with the basics, the rest comes easily. GDB is useful when you have source 
code access to the code you're debugging, as you can compile it with debugging 
information. (This level of information is specific to ELF binaries, a common binary file 
format on contemporary UNIX variants.) You can step through assembly code, and 
GDB shows the line of source code relating to the instruction being carried out. This 
feature makes it easy to do fault tracing or see what's going wrong when attempting 
to exercise code paths to test potential vulnerabilities in the code. 
Table 4-26. GDB 
Operating system 
UNIX and Windows 
Product requirements None 
Free version available Yes 
URL 
www.gnu.org/ 
Key features 
Kernel debugging (in some limited circumstances) 
Scripting capabilities 
File format debugging support 
Conditional breakpoints 
Thread support (limited) 
Remote debugging support 
GDB also has a scripting interface, which is useful for creating customized commands 
that can speed up debugging. The scripting interface is quite limited in many ways; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
168 
for example, it can't keep state information between command calls. It's primarily 
meant for defining macros for a series of commands instead of building fully featured 
plug-ins, which is a shame. 
GDB also lacks a couple of features. On-the-fly assembly would be useful, as would 
memory searching. (There's no command to search through memory, although it's 
fairly easy to make a script to do so.) The interface can be a bit awkward for tasks 
such as editing data in memory (compared with a debugger such as SoftICE, covered 
later in this section). Further, GDB has a limitation when a process spawns several 
child processes: tracing into children can be difficult. Having said that, other UNIX 
debuggers have similar limitations, so it's not a GDB-specific issue. GDB supports 
non-Intel architectures, but sometimes it doesn't work quite as well on others; 
specifically, debugging sparc binaries is known to cause problems. 
OllyDbg 
OllyDbg is a free user land Windows debugger with an easy-to-use GUI for analyzing 
programs at runtime (see Table 4-27). 
Table 4-27. OllyDbg 
Operating system 
Windows 
Product requirements None 
Free version available Yes 
URL 
www.ollydbg.de/ 
Key features 
Conditional breakpoints 
Thread support 
Remote debugging support 
Plug-in capabilities 
On-the-fly assembly 
OllyDbg is feature rich and simplifies some time-consuming debugging tasks. Some 
of OllyDbg's features include the following: 
The ability to record execution paths (useful in analyzing crashes, as you can 
step backward in the program to see what went wrong, which branches were 
taken, and so forth) 
Exception handler chain view (saves you from manually walking the stack) 
Setting marks you can return to (such as IDA has) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
169 
On-the-fly assembly 
Exception blocking (you can choose to pass certain exceptions on to the 
debugged process, but not others) 
In addition to basic debugging capabilities, Ollydbg has a sophisticated engine that 
enables developing plug-ins for extending the debugger's functionality. Some 
plug-ins include OllyDump (available at 
www.openrce.org/downloads/details/108/OllyDump), which allows the in-memory 
image of a process to be dumped to disk, and HeapVis (available at 
http://labs.idefense.com/labs.php?show=), a tool for visualizing the program heap's 
current state. 
SoftICE 
SoftICE from Compuware, summarized in Table 4-28, is a popular kernel-level 
debugger for Windows OSs. Because SoftICE runs in kernel mode, it can be used to 
debug user land applications and kernel drivers (or the kernel itself). SoftICE has a 
number of helpful features, including remote debugging, on-the-fly assembly, an 
efficient command language, and powerful search, replace, and edit features. 
Compuware recently discontinued SoftICE; however, it remains a popular Windows 
kernal debugger. 
Table 4-28. SoftICE 
Operating system 
Windows 
Product requirements None 
Free version available Trial version only 
URL 
www.compuware.com 
Key features 
Kernel debugging 
Conditional breakpoints 
Thread support 
Remote debugging support 
On-the-fly assembly 
Binary Navigation Tools 
Not all the applications you audit are available as source code. In fact, source code 
often isn't provided, so you must audit the program binaries by reading the 
application's assembly code and figuring out how it works from there. You need some 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
170 
tools that aid in binary navigation so that examining executables is less 
cumbersome. Some good features for binary navigation tools include the following: 
Annotation options Auditing assembly code can be tedious and difficult. It's 
useful for code reviewers to be able to annotate code with remarks about what 
the code does or potential errors that need to be followed up. 
Markers As an addition to annotation, markers enable you to return to 
previous suspect code locations automatically. These markers are useful, 
especially when you're returning to an application you worked on all last night. 
Graphing capabilities As with source code navigators, graphing capabilities 
enable you to see the structure of a function or function call tree. This feature 
is useful when you need to establish a call path to a suspect function or 
examine the logical layout of how a function operates internally. 
Structure definition capabilities Because assembly code can be difficult to 
follow, it's useful to be able to define structures with discernible members 
discovered during the reverse-engineering process. Applying these structures 
is essential when performing data-flow sensitive analysis, especially in 
object-oriented code. 
Scripting capabilities The ability to write scripts or plug-ins is particularly 
useful for binary analysis. They can be useful for unpacking an executable 
automatically as well as writing tools to automatically analyze certain 
constructs in the code. For instance, scripts can aid static analysis for 
automatic vulnerability detection or provide useful information, such as object 
recognition, structure definitions, or variable tracking. 
IDA Pro 
IDA Pro, summarized in Table 4-29, is the tool for binary navigation and a mandatory 
part of code reviewers' toolkit. Get this product if you don't have itthat's an order! IDA 
Pro can be used to interpret many binary file formats targeted for a range of 
processors, so it's useful for nearly any sort of binary you encounter. 
Table 4-29. IDA Pro 
Operating system 
Linux and Windows 
Product requirements None 
Free version available No 
URL 
www.datarescue.com 
Key features 
Multiple language support 
Cross-referencing 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
171 
Table 4-29. IDA Pro 
Operating system 
Linux and Windows 
Graphing capabilities 
Text searching and replacing 
Definition lookups 
Scripting and plug-in capabilities 
Note 
Even if IDA doesn't recognize the file format you're trying to analyze, it's possible to 
construct a loader module for specific binary types by using the IDA plug-in interface. 
IDA Pro has a rich (and unparalleled) feature set, which includes the following: 
Automatic recognition of functions and data elements in a binary 
Propagation of type information across function calls 
Recognition of common compiler constructs 
Recognition of fragmented function blocks 
The ability to navigate a binary graphically (new to version 5) 
Cross-referencing capabilities 
Flowchart and graphing capabilities 
A flexible scripting language for automating analysis tasks 
An extensible plug-in framework that allows developers to write sophisticated 
analysis modules (or binary loaders) 
IDA also integrates debugging into its disassembler product. This product can be used 
instead of a standalone debugger and has the advantage of combining static analysis 
features with live debugging for a more comprehensive reverse-engineering 
environment. The debugger in IDA also has a lot of the features that other popular 
debuggers have. 
BinNavi 
BinNavi is an exciting new product by Sabre (see Table 4-30). Developed as an IDA 
plug-in targeted at code auditors who want to understand a program's inner workings 
more clearly, BinNavi provides a graphical representation of a binary that users can 
navigate easily. Call trees or internal function workings can be expressed in a variety 
of graphical formats, from circular graphs to tree flowcharts. BinNavi enables users to 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
172 
pinpoint interesting code paths quickly by eliminating extraneous code paths and 
saving different views of the same binary that highlight the paths being analyzed. 
Graph nodes can be colored separately to help highlight certain components in a 
function or call tree. 
Table 4-30. BinNavi 
Operating system 
Windows and Linux 
Product requirements IDA Pro 
Free version available No 
URL 
www.sabre-security.com/ 
Key features 
Graphing capabilities 
Annotation 
Debugging 
Scriptable interface 
Graphing is just one of the tools that BinNavi provides for annotation. Users can also 
maintain detailed notes on each node on a graph, and these notes can be found 
quickly by using saved views and BinNavi's built-in search capabilities. 
Of course, the features described so far are useful for static analysis, but users need 
to be able to correlate their notes with runtime instances of the application. Therefore, 
BinNavi also gives users basic debugging capabilities, so they can select nodes to 
break on for further analysis while the process is running. The latest version of 
BinNavi offers some Python scripting capabilities to perform some of the features 
mentioned in the previous section on debuggers. 
Fuzz-Testing Tools 
At times, fuzz-testing is required as part of an audit in addition to code review. 
Fuzz-testing can be useful for finding bugs missed during the code audit because of 
complex code constructs and time constraints. This testing can be invaluable in 
ensuring that you have caught the most readily detected vulnerabilities. 
A good fuzz-testing tool should be protocol aware or capable of scripting so that it can 
provide a thorough test of known problems with the protocol in question. In addition, 
some new fuzz-testing tools might attempt intelligent attack vectors, which means 
they receive results of a request and use that information to build further requests to 