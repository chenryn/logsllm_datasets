User: Please write a script to automatically expand and shrink the nodes in the Kubernetes cluster while ensuring high availability of services.
Assistant: #!/bin/bash # Expansion node scale_out() { # Select the tenant and availability zone where the expansion node is located tenant="example-tenant" zone="us-east-1b" # Generate a unique instance id for the new node instance_id= $(uuidgen) # Create a new cloud server instance kubectl create -f - <<EOF apiVersion: v1 kind: Pod metadata: name: $instance_id spec: containers: - name: node image: my-nodejs-app resources: limits: cpu: 500m memory: 512Mi command: ["/bin/bash", "-c", "node index.js"] volumeMounts: - name: data mountPath: /data volumes: - name: data persistentVolumeClaim: claimName: data EOF # Add new nodes to the cluster as worker nodes kubectl label node $instance_id node-role.kubernetes.io/worker=worker # Deploy services to new nodes # ... # Start services on new nodes # ... # Wait The new node is in running state until the node is ready to serve ready=$(kubectl get pod $instance_id -o jsonpath='{.status.containerStatuses[0].ready}') while [[ $ready != "true" ]] ; do sleep 5 ready=$(kubectl get pod $instance_id -o jsonpath='{.status.containerStatuses[0].ready}') done # Let the new node join the load balancer to ensure that the new node can receive traffic# ... } # Shrinkage node scale_in() { # Select the tenant and availability zone where the shrinkage node is located tenant="example-tenant" zone="us-east-1b" # Get all worker nodes in the current cluster nodes= $(kubectl get nodes -l node-role.kubernetes.io/worker=worker -o jsonpath='{.items[*].metadata.name}') # Randomly select a worker node to shrink # Here is just an example , the actual production environment may need more logic to select the shrinking node node_to_remove=$(echo $nodes | awk '{print $1}') # Remove the shrinking node from the load balancer to prevent new traffic from being sent to The node# ... # Remove the node from the cluster kubectl drain $node_to_remove --delete-local-data --force --ignore-daemonsets # Delete the node kubectl delete node $node_to_remove # Wait for the service data migration to complete# ... } # Main function main() { # Check whether the current number of nodes needs to be expanded or reduced current_nodes=$(kubectl get nodes -l node-role.kubernetes.io/worker=worker -o jsonpath='{.items[*] .metadata.name}') num_nodes=$(echo $current_nodes | wc -w) desired_num_nodes=3 if [[ $num_nodes -lt $desired_num_nodes ]]; then # The cluster needs to expand scale_out elif [[ $num_nodes -gt $desired_num_nodes ] ]; then # The cluster needs to shrink scale_in else # The number of cluster nodes meets expectations, no need to operate echo "No scaling necessary" fi } main