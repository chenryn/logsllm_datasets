### Path Adaptation and Association Maintenance

When a node first receives a beaconing message during the current epoch, it rebroadcasts the message. This process can alter the path between a cluster head and the base station if an intermediate node selects a different parent node in consecutive time epochs.

To adapt to these changes, our scheme allows for the execution of the base station hello step in each epoch by including node IDs in every beaconing message. The cluster acknowledgment process can be omitted by allowing a lower-association node to include its ID with its pairwise MAC when forwarding a report. This strategy is effective in networks with frequent topology changes, although it incurs additional bandwidth overhead of \( t + 1 \) IDs per beaconing message. For less dynamic networks, this overhead should be minimized. If a path remains unchanged across epochs, there is no need for a node to attach its ID to the beaconing message.

### Reactive Approach for Static Networks

In relatively static networks, we adopt a reactive approach for association maintenance. During the base station hello step, each node records \( s \) IDs, which are the IDs of the nodes on its path to the base station. Here, \( s = t + 1 \) if the node is more than \( t \) hops away from the base station; otherwise, \( s \) is the actual number of hops. A node can infer that its \( s \) upstream nodes are unchanged if it receives a beaconing message from the same parent node in its original format (i.e., without added node IDs). If a node forwards the original beaconing message, it implies that its \( s - 1 \) upstream nodes are unchanged. Thus, if a path remains unchanged, our scheme does not incur additional bandwidth overhead. However, if a node selects a new parent node, it sends a request to the new parent to get the IDs of \( s - 1 \) upstream nodes, and then attaches these IDs and its own ID to the beaconing message it forwards.

### Local Repair Mechanism

In the base station-initiated repair scheme, a large beaconing period can cause many reports to be dropped if an intermediate node fails. Therefore, it is necessary for nodes detecting a neighbor's failure to locally repair the path to avoid the failed node. This can lead to inconsistent node associations, necessitating an adaptive local repair scheme.

Our local repair approach is based on the right-hand rule in the Greedy Perimeter Stateless Routing (GPSR) protocol [11], assuming each node knows the locations or relative locations of its neighbors (e.g., via GPS). When node \( u4 \) detects that its parent node \( u5 \) has failed, it sends a REPAIR message to \( w1 \), the first node counterclockwise about \( u4 \) from edge \( (u4, u5) \). The REPAIR message includes the IDs of \( t + 1 \) upstream nodes of \( u4 \) except \( u5 \). Nodes \( w1 \) and \( w2 \) forward the REPAIR message based on the same rule. When \( w3 \) receives the message, it finds that its next node is \( u6 \) and that \( u6 \) is in the list, indicating that the failed node has been bypassed. \( w3 \) then requests an ID list from \( u6 \), which includes the IDs of \( t \) upstream nodes of \( u6 \) and \( u6 \) itself. Node \( w3 \) then forwards this list to its downstream nodes, reestablishing the association relationships proactively.

To prevent a compromised node from invoking the local repair process frequently, we can limit the number of invocations to at most one per beaconing epoch.

### Interaction with Routing Protocols

The two-way association discovery protocol is independent of underlying protocols, making it applicable to various sensor network applications. In practice, the association discovery process can be combined with the route discovery process in a routing protocol. For example, the base station hello process can be integrated with the TinyOS beaconing protocol [10] by piggybacking the IDs of upper-association nodes in a beaconing message. Similarly, for the GPSR [11] protocol, the base station can unicast HELLO messages to the next node towards the cluster head based on the cluster head's location.

### Security Analysis

#### Base Station Detection

Our authentication scheme requires each of \( t + 1 \) cluster nodes to compute an individual MAC based on its authentication key shared only with the base station. This ensures that an adversary must compromise at least \( t + 1 \) nodes to forge a report. To reduce message overhead, our scheme compresses \( t + 1 \) individual MACs into one MAC using bitwise XOR, which is secure as it is a special case of the XOR-MAC scheme [1].

#### En-route Filtering

##### Outsider Attacks

Every message is authenticated hop-by-hop, preventing unauthorized nodes from injecting false data. Additionally, timestamps detect replay attacks.

##### Insider Attacks

We consider insider attacks by up to \( t \) compromised nodes. Assuming each node knows the authentic IDs of its upper and lower associations, a compromised node can provide an authenticated pairwise MAC over any data. If \( t \) nodes are compromised, they can provide \( t \) authenticated pairwise MACs, but our scheme requires \( t + 1 \) pairwise MACs, ensuring that one non-compromised node will filter out the false report.

The security of the association discovery process, particularly the cluster acknowledgment process, is critical. Before showing two types of attacks, we clarify the attack model: in the cluster acknowledgment phase, a node verifies an ACK and checks if all IDs in the list are distinct. If successful, it sets its lower-association node to the last ID in the list, removes the last ID, and adds its own ID to the beginning.

##### Cluster Insider Attacks

If all \( t \) compromised nodes are from the cluster, the ACK must contain \( t + 1 \) distinct node IDs, including a non-compromised or non-existent node. One of the \( t + 1 \) relaying nodes closest to the cluster head will be lower-associated to a non-compromised or non-existent node, dropping a false report after it is forwarded by at most \( t \) non-compromised nodes.

##### En-route Insider Attacks

If \( t \) compromised nodes lie on the path to the base station, the worst-case scenario involves the cluster head and \( t - 1 \) forwarding nodes being compromised, isolating \( t^2 \) non-compromised nodes into \( t \) blocks of \( t \) nodes each. The cluster head forges a list of \( t + 1 \) IDs, and each non-compromised node between \( u1,1 \) and \( u1,t \) sets its lower-association node as the last ID in the list, removing the last ID and adding its own ID. This results in each of \( u1,1, u1,2, ..., u1,t \) being lower-associated to a compromised node. The id list output by \( u1,t \) is {u1,t, ..., u1,2, u1,1, y}, and the next en-route node will be lower-associated to \( y \). If the next node has not been compromised, it will drop any false data immediately.

To enhance the basic scheme, we can add constraints such as checking if the downstream node is the first in the list, adding an ID pair that includes the node's ID and its lower-association node's ID, and implementing a node feedback mechanism to facilitate compromise detection. These enhancements reduce the upper bound of non-compromised nodes that can be deceived by compromised nodes.

### Enhancements to the Basic Scheme

1. **Neighbor Set Check**: Each node checks if the downstream node is the first in the list, reducing the upper bound to \( t(t - 1) \).
2. **ID Pair Addition**: Adding an ID pair reduces the upper bound to \( t(t - 2) \).
3. **Node Feedback Mechanism**: Nodes send ALERT reports to the base station after receiving a certain number of false data packets, further reducing the upper bound.
4. **GPS Integration**: If all sensor nodes have GPS devices, the upper bound can be significantly reduced.

These enhancements improve the security and efficiency of the scheme, making it more robust against insider attacks.