(Apple February 2014) we see 9 root removals, and the addition of
a large number of diverse CAs after nearly one-and-a-half years of
Apple root store stagnation. This outlier is either a lapse in Apple’s
open-source repository data, or an intentional delayed update in
one large batch.
The outliers are also exaggerated by their visual location in the
MDS plot. Unfortunately, the high dimensionality (243 dimensions)
of pairwise snapshot distances—the reason we use MDS—impedes
us from definitively explaining the location of the outliers between
Microsoft and NSS in two dimensional space. Instead, we provide
an intuitive rationale: these large deviation outliers are sufficiently
distanced from other Java/Apple snapshots that the large num-
ber of Microsoft/NSS-like snapshots causes MDS to prioritize the
preservation of these high-volume long range interactions over the
preservation of fewer, but closer interactions with Apple snapshots.
Put another way, placing the Apple outliers closer to Apple (i.e.,
between NSS and Apple) would misrepresent the distance between
the outliers and all NSS-like snapshots and all Microsoft snapshots,
which account for 88% of all snapshots.
To understand the utilization of root stores in the wild, we traced
the top 200 user agents to their root store family and found that
NSS (34%), Apple (23%), and Windows (20%) together account for
a majority of the user agents. Java is not linked to any of the top
user agents. As shown in Figure 2, the root store ecosystem is an
inverted pyramid, with a diversity of user agents relying on a cen-
tralized foundation of three root programs. This structure inflates
the importance of CA trust decisions made by each foundational
root program, which we examine below.
Figure 1: Root Store Similarity—Performing MDS on the Jaccard distance between root store providers from 2011–2021 illustrates
four distinct clusters of roots. From left to right: Microsoft, NSS-like, Apple, Java.
Figure 2: Root Store Ecosystem—The TLS root store ecosystem is an inverted pyramid, with a majority of clients trusting one of
four root families.
5 COMPARING ROOT STORES
In this section, we evaluate the four independent root store pro-
grams used for TLS server authentication: Apple, Java, Microsoft,
and NSS. We compare their security-relevant hygiene, response to
major CA distrust events, and investigate differences in CA trust.
In doing so, we aim to better understand the operational behavior
of each root store and gain insight into their observed differences.
6
184
−0.4−0.20.00.20.40.6−0.6−0.4−0.20.00.20.40.6166ASSleAndUoLd0LcUosoftAlSLneUbuntuDebLDnAmDzonLLnuxJDvD1odeJ620112021DDteMicrosoftNSSAppleJavaUser AgentsRoot Store ProvidersRoot Store ProgramsMozillaAppleMicrosoftJavaOSWindowsAndroidiOSmacOSUbuntuDebianAmazon LinuxAlpineFedoraLibraries / FrameworksElectronNodeJSJavaNSSWeb BrowsersChromeChrome MobileMobile SafariSafariFirefoxOperaIEEdgeChromiumOther TLS Clients / LibrariesOpenSSLcurlwgetGnuTLSokhttpBoringSSLLibreSSLMbed TLSs2n-tlsDefault / conﬁguredRoot store Avg. Size Avg. Expired MD5
2016-09
Apple
2019-02
Java
2018-03
Microsoft
NSS
2016-02
152.9
89.4
246.6
121.8
2.9
1.3
9.9
1.2
1024-bit RSA
2015-09
2021-02
2017-09
2015-10
Table 3: Root store hygiene—The average number of total
and expired roots in each root store snapshot and removal
dates for trusted MD5/1024-bit RSA certificates.
5.1 Root store management
As a proxy for responsible root store management, we examine
three metrics (Table 3): removal of roots with MD5-based signatures,
removal of roots with 1024-bit RSA keys, and removal of expired
root certificates. Apple and NSS were the most proactive in purging
1024-bit RSA and MD5 certificates, in 2015 and 2016, while Microsoft
took 2 additional years, and Java even longer. On the other hand,
NSS and Java have fewer expired roots present in each root store
update than Apple and especially Microsoft, which averages nearly
10 expired roots. Microsoft does manage a larger root store, but
this is not proportional to the increased expirations. Our results
suggest that NSS exhibits the best root store hygiene, followed by
Apple, and then Java/Microsoft.
5.2 Exclusive Differences
To better quantify the differences between each root store family,
we characterize the root CAs that are unique to each. Appendix B
displays the unique, most recently trusted roots for each root store
that have never been trusted for TLS server authentication by any
of the other independent root programs. For each root, we look for
an NSS inclusion request as an additional data source about a given
root and its reason for requested inclusion. We also identify the CA
operator for each root by examining CCADB and the certificate
itself. The unique roots for each store are described below.
The only NSS root not trusted by other root programs is a
NSS
newly included Microsec root that uses elliptic curve cryptography
(ECC). This exclusive root does not indicate NSS-only trust in Mi-
crosec; rather, the new root accompanies an existing Microsec root
that is already trusted by NSS, Apple, and Microsoft.
Java operates a relatively small root store that includes
Java
substantially fewer roots than the other three root programs. No
Java-exclusive root trust is observed.
The thirteen Apple-exclusive roots can be categorized
Apple
into three broad categories. First, six roots are trusted by Microsoft
or NSS, but only for email. Apple has the technical mechanisms to
restrict the trust purposes for each root, but it does not appear to
provide default policies that specify which roots should be used for
which purposes. Second, five roots are controlled by Apple’s CA
and utilized primarily for Apple specific services, such as FairPlay
and Developer ID code signing. This is an expected divergence
in trust from other root programs since they do not participate
in proprietary Apple software and protocols. Finally, we discover
two roots that are actively distrusted by either Microsoft or NSS.
Apple’s trust in the Certipost root is likely benign, since the CA
7
185
requested revocation in NSS “solely because they no longer issue
SSL/TLS server certificates.” Apple’s inclusion of a Government of
Venezuela root is more questionable. This root was rejected from
NSS due to the CA’s position as a super-CA [71] that acts as a trust-
bridge to large numbers of independent subordinate CAs, which
each have the capability to issue trusted certificates for any TLS
server identity5. One such subordinate CA, PROCERT, gained entry
into NSS in 2010, but was subsequently removed after repeated
transgressions [38]. This issuer was also trusted by Microsoft, but
only for email, until it was blacklisted in 2020. Apple’s custom
revocation system has blocked this root, but its inclusion in the
set of shipped trust anchors presents an opportunity to clean up
untrusted roots.
Microsoft Microsoft contains 30 exclusive root certificates. Eleven
of these roots attempted and failed the NSS inclusion process, either
due to NSS rejection (7 roots) or CA abandonment (4 roots) after
critical review. Three of these roots belong to national governments
(Brazil, Korea, Tunisia), and two out of three were rejected from
NSS due to secret or insufficiently disclosed subCAs. Worryingly,
Microsoft also trusts a unique root belonging to AC Camerfirma,
which was removed from NSS in May 2021 due to a long-running
list of misissuances. Microsoft’s inclusion of these roots indicates a
lower standard for trust in root CAs. The remaining 19 Microsoft-
exclusive roots reflect a more innocuous collection of CAs with
ongoing NSS inclusion evaluation (6 roots), recently accepted in NSS
(3 roots), trusted by Apple/NSS through cross-signing (2 roots), min-
imal Certificate Transparency presence (6 roots), a WiFi Alliance
root for automatic WiFi roaming, and a Government of Finland
root. For more details, see Appendix B.
Takeaways Root programs serve different applications and users,
and thus, their root CA trust decisions will likely differ. By examin-
ing the exclusive differences between root programs, we highlight
some of their major policy distinctions. Microsoft appears to have a
stronger tolerance for national government super-CAs, while Apple
utilizes its root program to manage roots for TLS server authentica-
tion, email signing, and its own proprietary services. Future work
can determine the security consequences of these uniquely trusted
roots and evaluate the overall performance (scale and security, see
Section 7) of each root program.
5.3 Trusting NSS removals
Another measure of a root store’s responsible management is its
agility and responsiveness to root CA incidents. Since NSS provides
the only transparent mechanism for CA issue tracking, we catalog
all NSS removals after 2010 , track the Bugzilla bug report, and
group the issue into one of three severities: low, medium, high.
Low severity issues consist of routine removal of expired roots or
removal of roots at the request of the CA, typically due to cessation
of operation. Medium severity removals are driven by Mozilla due
to non-urgent security concerns. High severity indicates a Mozilla-
prompted removal due to urgent security concerns. These high and
medium severity removals are shown in Appendix C. Although
5Super-CAs are not prohibited, but NSS requires sub-CAs to be audited and accounted
for essentially as a stand-alone CA.
Root store
DigiNotar [101]
Microsoft
Apple
Debian/Ubuntu
CNNIC [78]
Apple
Android
Debian/Ubuntu
NodeJS
AmazonLinux
Microsoft
StartCom [113]
Debian/Ubuntu
Microsoft
Android
NodeJS
AmazonLinux
Apple
# Certs
1
1
1
2
1
2
2
2
2
3
2
3
3
3
3
Trusted until
2011-10-06
2011-08-30
2011-10-12
2011-10-22
2017-07-27
2015-06-30
2017-12-05
2018-04-09
2018-04-24
2019-02-18
2020-02-26
2017-11-14
2017-07-17
2017-09-22
2017-12-05
2018-04-24
2019-02-18
1 root still trusted
Lag (days)
-37
6
16
-758
131
256
271
571
944
-120
-53
21
161
461
1,175+
Root store
WoSign [113]
Debian/Ubuntu
Microsoft
Android
NodeJS
AmazonLinux
PSPProcert [38]
Debian/Ubuntu
NodeJS
AmazonLinux
Certinomis [37]
NodeJS
Alpine
Debian/Ubuntu
Android
AmazonLinux
Apple
Microsoft
*Revoked via valid.apple.com at unknown date.
# Certs Trusted until
2017-11-14
2017-07-17
2017-09-22
2017-12-05
2018-04-24
2019-02-18
4
4
4
4
4
1
1
1
1
1
1
1
1
1
1
2017-11-14
2018-04-09
2018-04-24
2019-02-18
2019-07-05
2019-10-22
2020-03-23
2020-06-01
2020-09-07
2021-03-26
2021-01-01*
Still trusted
Lag (days)
-120
-53
21
161
461
146
161
461
109
262
332
430
630
577
607+
Table 4: High severity removals—Comparison of root store responses to high severity NSS removals.
Mozilla provides a Removed CA Report [64], this data misses 92 re-
movals (mostly due to expiration or CA removal request) found in
our manual analysis. It also includes two incomplete “removals”,
where a CA is distrusted for email/code signing but remains trusted
for TLS, that our dataset does not capture. We have notified Mozilla
of this discrepancy.
Table 4 shows the responsiveness of different root stores to high-
severity removals. We do not include medium and low severity
removals, since root store inclusion / removal decisions are highly
contextual to different root stores, and we do not expect all root
stores to respond to lower severity removals. We do not discuss
all trust actions (e.g., revocations, cross-signing, etc.) for each inci-
dent, only examining the relevant root store details, and provide
references to more detailed descriptions.
In 2011, attackers gained access to DigiNotar private
Diginotar
keys and forged trusted certificates for high-profile websites [82],