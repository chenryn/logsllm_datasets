attacker can break the security guarantees of different
cryptographic primitives by making them use insecure
random numbers. We have received conﬁrmation from
OpenSSL developers about these issues.
Incorrect cryptography implementations. Here, we ex-
hibit an example from OpenSSL demonstrating an error
handling bug that EPEX found in the implementation of
a cryptographic algorithm.
Insecure SRP keys. EPEX found that the function
SRP_Calc_server_key, which is part of the SRP
(Secure Remote Password) module in OpenSSL, con-
tains an error handling bug while calling BN_mod_exp,
as shown in the code below.
BIGNUM *SRP_Calc_server_key(BIGNUM *A,
BIGNUM *v,
BIGNUM *u, BIGNUM *b, BIGNUM *N)
{
BIGNUM *tmp = NULL, *S = NULL;
BN_CTX *bn_ctx;
...
if ((bn_ctx = BN_CTX_new()) == NULL ||
(tmp = BN_new()) == NULL ||
(S = BN_new()) == NULL)
goto err;
if (!BN_mod_exp(tmp, v, u, N, bn_ctx))
goto err;
...
err:
BN_CTX_free(bn_ctx);
BN_clear_free(tmp);
return S;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
}
The BN_mod_exp function takes four big numbers
(arbitrary-precision integers) tmp, v, u, N, and a context
It then computes v raised to the uth
bn_ctx as input.
power modulo N and stores it in tmp (i.e. tmp = vu%N).
However, BN_mod_exp can fail for different reasons
including memory allocation failures.
It returns 0 to
indicate any such error. The call-site of BN_mod_exp
(line 12), in fact, correctly checks for such an error and
jumps to the error handling code at line 15. The error
handling code frees the resources and returns S (line 18).
However, S is guaranteed to be not NULL at this point
as it has been allocated by calling a BN_new function
at line 9. This leads SRP_Calc_server_key to
return an uninitialized big number S. Thus, the func-
tions upstream will not know about the error returned
by BN_mod_exp, as SRP_Calc_server_key is
supposed to return a NULL pointer in case of an error.
This leads to silent data corruption that can be leveraged
to break the security guarantees of the SRP protocol.
Incorrect X.509 certiﬁcate revocation. Here we cite
two examples from mbedTLS and GnuTLS respectively
showing different types of incorrect error handling bugs
in implementations of two different X509 certiﬁcate re-
vocation mechanisms: CRL (Certiﬁcate Revocation List)
and OCSP (Online Certiﬁcate Status Protocol).
CRL parsing discrepancy. In mbedTLS, EPEX found
that x509_crl_get_version, which retrieves the
version of a X509 certiﬁcate revocation list, has an error
handling bug while calling function asn1_get_int
(line 7 in the code below). Function asn1_get_int
reads an integer from an ASN1 ﬁle. It returns different
negative values to indicate different errors.
In case of
a malformed CRL (Certiﬁcate Revocation List) ﬁle, it
returns POLARSSL_ERR_ASN1_UNEXPECTED_TAG
error value. In case of such an error, line 9-13 treats the
CRL version as 0 (version 1). Thus, mbedTLS parses a
malformed CRL ﬁle as version 1 certiﬁcate. However,
other SSL implementations (e.g., OpenSSL) treat these
errors differently and parse it as a version 2 certiﬁcate.
We are currently discussing the exploitability of this in-
consistency with the developers.
int x509_crl_get_version(unsigned char **p,
const unsigned char
*end,
int *ver )
if((ret = asn1_get_int(p, end, ver))!= 0)
{
POLARSSL_ERR_ASN1_UNEXPECTED_TAG )
}
return(POLARSSL_ERR_X509_INVALID_VERSION +
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
10
{
int ret;
if( ret ==
{
*ver = 0;
return(0);
ret);
}
return( 0 );}
354  25th USENIX Security Symposium 
USENIX Association
Incorrect OCSP timestamps.
GnuTLS function
gnutls_ocsp_resp_get_single is used to read
the timestamp of an Online Certiﬁcate Status Protocol
(OCSP) message along with other information. EPEX
found an error handling bug in it while calling function
asn1_read_value, as shown in line 5 in the follow-
ing code. asn1_read_value reads the value of an
ASN1 tag. It returns an error while failing to read the
tag correctly. gnutls_ocsp_resp_get_single
correctly checks for the error conditions (line 6), but
instead of returning an error value, simply sets the
this_update parameter to −1. However, further up-
stream, in check_ocsp_response, which calls the
function gnutls_ocsp_resp_get_single (line
16), the corresponding variable vtime is not checked
for an error value; only the return value is checked, but
that is a non-error value. Further down the function, at
line 22, vtime is used to check whether the message is
too old. However, in the error path, since vtime is set to
-1 from line 7, the left-hand side of the conditional check
will always be a positive number. Due to a large value of
the variable now (representing current time), the condi-
tional check will always be positive, and result in catego-
rizing all messages to be over the OCSP validity thresh-
old irrespective of their actual timestamp. Depending on
the conﬁguration of GnuTLS, this may result in ignoring
new OCSP responses containing information on recently
revoked certiﬁcates.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
int
gnutls_ocsp_resp_get_single (..., time_t *
this_update)
...
ret = asn1_read_value(resp->basicresp,
name, ttime, &len);
if (ret != ASN1_SUCCESS) {
*this_update = (time_t) (-1);
}
...
return GNUTLS_SUCCESS;
{
}
static int
check_ocsp_response(...)
{ ...
ret = gnutls_ocsp_resp_get_single(...,&
vtime);
if (ret 
MAX_OCSP_VALIDITY_SECS) {
...
}
...
}
Incorrect protocol implementations.
Here we show
two examples from OpenSSL where error handling bugs
occur in implementations of two different protocols: Se-
cure/Multipurpose Internet Mail Extensions (S/MIME)
and Datagram Transport Layer Security (DTLS ).
that
the
found
function
OpenSSL
EPEX
does
cms_SignerIdentifier_cert_cmp
not check the return value returned by function
X509_get_serialNumber, as shown in the code
below. This code is part of the OpenSSL code that han-
dles S/MIME v3.1 mail. Here, the error point (see line
6) is at the call site of X509_get_serialNumber,
which returns a pointer to the ASN_INTEGER object
that contains the serial number of the input x509 certiﬁ-
cate. However, in case of a malformed certiﬁcate missing
the serial number, X509_get_serialNumber re-
turns NULL to indicate an error. In this case, the caller
function
cms_SignerIdentifier_cert_cmp
does not check for an error and passes the return value
directly to ASN1_INTEGER_cmp. Thus, the second
argument of ASN1_INTEGER_cmp (y in line number
12) is set to NULL, in the case of an error. At line
16, ASN1_INTEGER_cmp tries to read y−> type and
causes a NULL pointer dereference and results in a
crash. This can be exploited by a remote attacker to
cause a denial of service attack by supplying malformed
X.509 certiﬁcates. This issue was conﬁrmed by the
corresponding developers but they believe that that it
is up to the application programmer to ensure that the
input certiﬁcate is properly initialized.
int cms_SignerIdentifier_cert_cmp(
CMS_SignerIdentifier *sid, X509 *cert)
if (sid->type ==
CMS_SIGNERINFO_ISSUER_SERIAL) {
...
return ASN1_INTEGER_cmp(serialNumber,
X509_get_serialNumber(cert));
}
...
return -1;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
{
{
}
}
int ASN1_INTEGER_cmp(const ASN1_INTEGER *x,
const ASN1_INTEGER *y)
int neg = x->type & V_ASN1_NEG;
/* Compare signs */
if (neg != (y->type & V_ASN1_NEG)) {
...
}
...
Faulty encoding of X.509 certiﬁcates in DTLS. EPEX
found that the function dtls1_add_cert_to_buf
that reads a certiﬁcate from DTLS 2 handshake message
contains an error handling bug while calling i2d_X509
(line 8 in the code below). Function i2d_X509 encodes
the input structure pointed to by x into DER format. It
returns a negative value to indicate an error, otherwise it
returns the length of the encoded data. Here, the caller
code (line 8) does not check for error cases, and thus
gives no indication of whether the read data was valid or
not. In case of an error, this will lead to incorrect results
and silent data corruption.
Faulty parsing of X.509 certiﬁcates in S/MIME.
2Datagram Transport Layer Security: a protocol in SSL/TLS family
USENIX Association  
25th USENIX Security Symposium  355
11
static int dtls1_add_cert_to_buf(BUF_MEM *
buf, unsigned long *l, X509 *x)
int Curl_ossl_random(struct SessionHandle *
data, unsigned char *entropy,
size_t length)
1
2
3
4
5
6
7
8
9
10
11
12
{
}
int n;
unsigned char *p;
...
p = (unsigned char *)&(buf->data[*l]);
l2n3(n, p);
i2d_X509(x, &p);
*l += n + 3;
return 1;
1
2
3
4
5
6
7
{
...
}
5.4 Bugs in applications
Beside libraries, we used EPEX to evaluate error han-
dling implementations in application software that use
SSL/TLS library APIs. We have performed tests on 5
programs that use the OpenSSL library: cURL 3, httpd 4,
Lynx 5, Mutt 6, and Wget 7. Our error speciﬁcation in-
cluded 29 OpenSSL APIs that are used by at least one of
these applications. As the results show in Table 5, even
though EPEX is not as accurate for applications as for li-
braries, and we had to discard 2 alerts because the callers
did not follow the error protocol, it still found 12 real
bugs.
In case of applications, unlike libraries, Step-III of
EPEX was able to compare error behavior across multi-
ple applications and libraries that use the same API. This
allowed us to detect bugs in the cases where an applica-
tion developer has consistently made error handling mis-
takes for an API function as long as other applications
using the same API function are correctly handling the
errors.
In terms of security effects, the bugs that we found
range from causing serious security vulnerabilities to
denial-of-service attacks. We found 2 bugs in cURL ran-
dom number generation modules that can be exploited
to make cURL vulnerable to man-in-the-middle attacks.
We also found 4 bugs in httpd, Mutt, and Lynx that will
cause denial-of-service attacks. The other bugs that we
found mostly lead to resource leakage. We provide one
example of the cURL random number generation bug be-
low.
cURL ignores the return value of the Pseudorandom
In case of an error,
number generator RAND_bytes.
RAND_bytes will return an output buffer with non-
random values. In that case cURL will use it for gen-
erating SSL session keys and other secrets. Note that
a failure in RAND_bytes can be induced by an attacker
by launching a denial of service attack and causing mem-
ory allocation failures, ﬁle descriptor exhaustion, etc.
RAND_bytes(entropy, curlx_uztosi(length));
return 0; /* 0 as in no error */
5.5 Checking for correct error propagation
Besides producing bugs, EPEX also conﬁrms whether a
function call’s error handling code correctly takes care of
all possible errors. Note that EPEX only checks whether
error values are propagated upstream but does not check
whether other error handling tasks (e.g., freeing up all
acquired resources) have been implemented correctly.
The following example shows an instance where
EPEX conﬁrmed that the error codes are correctly prop-
agated by the error handling code. This piece of code is
from GnuTLS 3.3.17.1 and contains the ﬁx for the CVE-
2014-92 vulnerability that we described in the introduc-
tion (Listing 1). EPEX conﬁrmed that the ﬁx indeed cor-
rectly handles the error case.
Besides ﬁxing the bug, the updated version of the
code has also been slightly refactored and reorganized
as shown below. Code in red highlights the bug,
while green shows the ﬁx. The return type of function
check_if_ca has been updated to bool, where re-
turning false (0) indicates an error (see line 1 and 10).
The caller function verify_crt is correctly checking (cid:31)= 1
(i.e. True) at line 17 to handle the error case.
gnutls_assert();
goto fail;
int bool
check_if_ca(...)
{ ...
if (ret < 0) {
}
fail:
...
result = 0;
return result;
}
bool verify_crt(...)
{ ...
if (check_if_ca(...) ==0 != 1) {
result = 0;
goto cleanup;
}
...
cleanup:
...
return result;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18