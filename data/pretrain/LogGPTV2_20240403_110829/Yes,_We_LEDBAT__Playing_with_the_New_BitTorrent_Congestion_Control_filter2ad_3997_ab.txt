### 图2. 不同变体的吞吐量：(a) 无瓶颈容量限制，(b) 有瓶颈容量限制

在进行的多个实验中，我们报告了对性能评估最为相关的部分。具体而言，我们考虑了以下几种情况：(i) 瓶颈容量限制；(ii) 前向或后向路径上的单向延迟损伤；(iii) 不同的接入技术；(iv) 单个TCP流与LEDBAT在前向或后向路径上相互干扰；(v) 多个流共享同一瓶颈链路，并改变LEDBAT和TCP流的比例，以更好地评估协议间的相互影响。

### 3.1 单一流：瓶颈容量、延迟和接入技术的影响

首先，我们测试BitTorrent如何应对变化的瓶颈容量。我们使用类似于先前实验的设置，但这次通过netem中的分层令牌桶（HTB）来限制中间盒与下载者之间链路的容量。具体来说，我们在t=60秒时开始，让LEDBAT吞吐量稳定在一个稳态，然后开启HTB整形器。最初将其调至250 Kbps，并每隔2分钟增加250 Kbps的可用容量，如图2-(b)中的实线所示。减少容量的情况得到了类似的结果，因此未在图中显示。

图中展示了新变体α2和β1以及旧版TCP客户端的吞吐量随时间的变化情况。变体α2无法快速适应变化的链路速率：它会周期性地进入探测（或慢启动）阶段，在此期间可能通过调整段大小和发送速率来推断网络状况。然而，这个阶段似乎并不成功，导致α2的吞吐量下降（当瓶颈大于1000 Kbps时，我们没有观察到这种饥饿现象）。此问题已在后续版本中修复：β1能够匹配可用带宽，并且LEDBAT显示出比TCP更平滑的曲线。在这种情况下，可以说LEDBAT的设计目标之一，即高效利用可用容量，已经完美实现。

接下来，考虑到LEDBAT拥塞控制基于发送窗口对前向数据路径排队延迟变化的线性适应（即通过测量单向延迟的变化来推断），因此评估其对测量的一次往返时间（RTT）的响应至关重要。

### 图3. 不同延迟设置下的吞吐量演变：(a) 平均延迟随时间增加，所有数据包延迟相同；(b) 平均延迟保持不变，延迟方差随时间增加

为了验证这一点，我们在前向（数据）或后向（确认）路径上添加增量单向延迟。同样，在LEDBAT稳定后，每2分钟增加20毫秒的额外延迟，使得RTT范围从20毫秒到100毫秒，如图3-(a)中的阶梯状曲线所示。实验结果表明，随着延迟的增加，不同变体的吞吐量表现各异。