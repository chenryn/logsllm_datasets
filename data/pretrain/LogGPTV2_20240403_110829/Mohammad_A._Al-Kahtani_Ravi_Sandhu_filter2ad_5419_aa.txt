# Title: Mohammad A. Al-Kahtani, Ravi Sandhu

## Authors: 
- Mohammad A. Al-Kahtani
- Ravi S. Sandhu

## Affiliations:
- **Mohammad A. Al-Kahtani**: Computer Department of Saudi Air Defense
- **Ravi S. Sandhu**: George Mason University & NSD Security

## Contact Information:
- PI: [EMAIL]
- PI: [EMAIL]

## Abstract
Role-Based Access Control (RBAC) has proven to be a flexible and useful access control model in practice. The Rule-Based RBAC (RB-RBAC) family of models was developed to overcome some of the limitations of traditional RBAC. One particular model in this family, which we call RB-RBAC-ve, introduces the concept of negative authorization to the RBAC framework. This paper provides a detailed analysis of RB-RBAC-ve, including user authorization, conflict among rules, conflict resolution policies, the impact of negative authorization on role hierarchies, and enforcement architecture.

## 1. Introduction
Role-Based Access Control (RBAC) has emerged as a widely deployed alternative to classical discretionary and mandatory access controls [1, 2, 3]. Since roles in an organization are relatively persistent with respect to user turnover and task re-assignment, RBAC provides a powerful mechanism for reducing the complexity, cost, and potential for error in assigning users permissions within the organization. Traditional RBAC was designed for a closed-enterprise environment where security officers manually assign users to roles. However, the landscape of business and information technologies has changed dramatically in recent years.

An increasing number of service-providing enterprises make their services available to users via the Internet. There has been some work to extend existing RBAC models so they can manage users' access to enterprise services and resources over the Internet [4, 5, 6]. Additionally, many enterprises have large numbers of users, such as banks, utility companies, insurance companies, and popular websites, with user bases in the hundreds of thousands or millions [7]. For such enterprises, manually assigning users to roles is not feasible, especially for external users like customers and business partners.

Moreover, RBAC is supported by software products designed to serve a large number of clients, such as popular commercial database management systems like Oracle, Informix, and Sybase [8]. These factors render manual user-to-role assignment a formidable task because maintaining up-to-date user-role assignments is both costly and error-prone. Automated assignment gives the enterprise an edge by extending its user-consumer business partnership.

In fact, some enterprises with large customer bases have already implemented systems that automatically assign and revoke users, achieving 90-95% automation of administration [7, 9]. The Rule-Based RBAC (RB-RBAC) family of models was suggested to provide a sound conceptual basis for the automation process and software implementations [10, 11, 16]. RB-RBAC provides the specification needed to automatically assign users to roles based on a finite set of authorization rules defined by the enterprise, hence the name Rule-Based RBAC or RB-RBAC. The RB-RBAC family introduces negative authorization, a new concept in the RBAC world. The central contribution of this paper is to explore and analyze different aspects of negative authorization in the RB-RBAC context.

This paper is organized as follows. Section 2 provides an overview of related research. In Section 3, RB-RBAC is revisited. In Section 4, we introduce the RB-RBAC-ve model, i.e., RB-RBAC with negative authorization. Section 5 concludes the paper, including a discussion of issues that we have not explored in this paper but are closely related to the topic discussed.

## 2. Related Work
In the real world of access control, there are two well-known decision policies [12]:
- **Closed policy**: This policy allows access if there exists a corresponding positive authorization and denies it otherwise.
- **Open policy**: This policy denies access if there exists a corresponding negative authorization and allows it otherwise.

Bertino et al. contend that the closed policy approach has a major problem in that the lack of a given authorization for a given user does not prevent this user from receiving the authorization later on. They proposed explicit negative authorization as blocking authorizations. Whenever a user receives a negative authorization, their positive authorizations become blocked [13].

Negative authorization is typically discussed in the context of access control systems that adopt an open policy. There is extensive work in this regard, see, for example, [14] and [13]. The introduction of negative authorization brings the possibility of conflict in authorization, an issue that needs to be resolved for the access control model to give a conclusive result. The types of conflicts brought about by negative authorization and conflict resolution policies are discussed extensively outside RBAC literature. For example, Jajodia et al. suggest a model based on a logical authorization language that allows users to specify, along with the authorizations, the policy according to which access control decisions are to be made [15]. The key components of the model are objects, subjects, actions, and rules. Subjects who may be authorized to perform actions on objects include users, roles, and groups. The unit of authorization is an action on an object. The authorization language expresses the policy by means of rules of different types. One type of rule is used to explicitly authorize users, roles, or groups. Another type of rule is used to derive further authorization based on those provided by the first type of rule. Any conflict that might arise with respect to authorization derivation is resolved using a third type of rule. Several types of conflicts and conflict resolution policies are suggested. RB-RBAC utilizes some of these policies as well as some new conflict resolution policies specified in this paper for the first time. In another work, Jajodia et al. provide formal definitions for several policies for authorization propagation and conflict resolution [12].

Negative authorization is rarely mentioned in RBAC literature, mainly because RBAC models such as RBAC96 and the proposed NIST standard model are based on positive permissions that confer the ability to do something on holders of the permissions [2]. This is different from the semantics given to this concept in RB-RBAC, as will be discussed in Section 4.

Al-Kahtani has proposed a family of models that can be used to dynamically assign users to roles based on a set of authorization rules defined by the enterprise. These rules take into consideration users' attributes and any constraints set forth by the enterprise's security policy. The Rule-Based RBAC (RB-RBAC) models provide a Specification Language (ASL) to express these rules. The models also define relations among rules, provide specifications for derived induced hierarchies among the roles, and allow constraints specification. Figure 1 shows members of the RB-RBAC family. Model A is the most basic among the family, allowing the specification of a set of authorization rules that can be used to assign users to roles based on users' attributes. Model B extends Model A to allow the specification of negative authorization (Model B1) and mutual exclusion (Model B2) by extending the ASLA language. The extended languages are called ASLB1 and ASLB2, respectively. Model C extends Model A to allow constraints specification. In the following sections, we will briefly discuss Model A, which is the basic model, and then introduce negative authorization to RB-RBAC, which yields Model B1, which we name RB-RBAC-ve in this paper.

### Figure 1: RB-RBAC Family
```
Model C (Model A + Constraints Specification)
Model B (Model A + Negative Authorization/Mutual Exclusion)
  - Model B1 (Negative Authorization)
  - Model B2 (Mutual Exclusion)
Model A (Monotonic Language)
```

## 3. RB-RBAC Model A
### 3.1 Basic Concepts
This model is discussed in [10, 11, and 16]. The main components of the RB-RBAC Model A are the sets U, AE, R, and P, which represent users, attribute expressions, roles, and permissions, respectively (Figure 2).

### Figure 2: RB-RBAC Main Components
```
U
AE
R
P
```

The U, R, and P sets are imported from RBAC96. In RB-RBAC, the security policy of the enterprise is expressed in the form of a set of authorization rules. Each rule takes as input an attribute expression (a member of the AE set) that is satisfied by a user (a member of the U set) and produces one or more roles (a member of the R set). An attribute expression is a well-formed formula in propositional logic that specifies what combination of attribute values a user must satisfy to be authorized to the roles specified in the rule. The attribute expressions can be stated using the language provided by the model. Syntactically, a rule has two parts:
- **Left-hand side (LHS)**: An attribute expression.
- **Right-hand side (RHS)**: One or more roles.

If a user u satisfies the attribute expression, u is authorized to the role(s) specified in the RHS of the rule. The following is an example of a rule:

```
aei → rg
```

where `aei` is the attribute expression and `rg` is the produced role. If user u satisfies `aei`, then u is authorized to all the roles in the RHS of the rule. To maintain user-role authorization, the set `URAuth` is defined as follows:

```
URAuth = {(u, r) | (∃rulei)[u satisfies aei ∧ r ∈ RHS(aei)]}
```

If `(u, r) ∈ URAuth`, then this means that u is authorized to role r. This set is the key component of RB-RBAC since it captures the semantics of user-role assignment in the models. Only a user who has authorization on roles specified in the RHS can activate these roles. Activating a role enables the user to execute the permissions assigned to that role. A user can activate one or more of their authorized roles in a session. Different sessions belonging to the same user can have different roles.

There is an implicit "OR" among the rules. If u satisfies one or more rules that produce different roles, then u is authorized to activate any combination of these roles. Upon receiving a user request for a role, the system implementing RB-RBAC searches the authorization rules set to find a rule that the user satisfies and that yields the requested role. As a user satisfies more rules, the set of roles that they are authorized to assume does not diminish. Thus, Model A is monotonic.

### 3.2 User States
A user can be in any of several states with respect to a specific role. For a given role r, we distinguish the following user states:
- **Potential (P)**: User u is authorized to role r but has not activated it yet.
- **Revoked (R)**: User u has activated role r at least once but is not currently authorized to activate it.
- **Not-candidate (N)**: User u has not activated role r and is not currently authorized to activate it because they do not have the required attributes for assuming r, i.e., u is not authorized to r.
- **Deleted (Del)**: User u has been deleted from the system by an authorized individual such as the System Security Officer (SSO).
- **Active (Act)**: Refers to the state where the user is currently active in the role.
- **Dormant (D)**: After deactivating a role, the user becomes dormant with respect to that specific role, i.e., in the "D" state.

The importance of this distinction among different states of users becomes clear when specifying constraints and enforcing policies like the Chinese Wall. Figure 2 shows the state diagram of a user with respect to a single role.

To express authorization rules, RB-RBAC provides ASLA, a language based on a context-free grammar.