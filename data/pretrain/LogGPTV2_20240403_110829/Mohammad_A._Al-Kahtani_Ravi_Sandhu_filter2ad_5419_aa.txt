title:Mohammad A. Al-Kahtani, Ravi Sandhu
author:Mohammad A. Al-Kahtani and
Ravi S. Sandhu
Rule-Based RBAC with Negative Authorization 
Mohammad A. Al-Kahtani 
Ravi Sandhu 
Computer Department of Saudi Air Defense 
George Mason University & NSD Security  
PI:EMAIL 
PI:EMAIL 
Abstract 
RBAC  has  proven  to  be  a  flexible  and  useful  access 
control  model  in  practice.  Rule-Based  RBAC  family  of 
models was developed based on RBAC to overcome some 
of  its  limitations.  One  particular  model  of  this  family, 
which  we  call  RB-RBAC-ve,  introduces  the  concept  of 
negative  authorization  to  the  RBAC  arena.  This  paper 
provides  a  more  detailed  analysis  of  RB-RBAC-ve.  The 
analysis includes user authorization, conflict among rules, 
conflict  resolution  polices, 
impact  of  negative 
authorization  on  role  hierarchies  and  enforcement 
architecture.
the 
1. Introduction.
Role-based  access  control  (RBAC)  has  emerged  as  a 
widely  deployed  alternative  to  classical  discretionary  and 
mandatory  access  controls  [1,  2  and  3].  Since  roles  in  an 
organization  are  relatively  persistent  with  respect  to  user 
turnover  and  task  re-assignment,  RBAC  provides  a 
powerful  mechanism  for  reducing  the  complexity,  cost, 
and  potential  for  error  of  assigning  users  permissions 
within 
the  organization.  Conventional  RBAC  was 
designed  with  a  closed-enterprise  environment  in  mind 
where a team of security officers manually assign users to 
roles. However, the landscape of business and information 
technologies has changed dramatically in recent years. An 
increasing  number  of  service-providing  enterprises  make 
their  services  available  to  their  users  via  the  Internet. 
There  has  been  some  work  to  extend  present  RBAC 
models so they can be used to manage users’ access to the 
enterprise  services  and  resources  over  the  Internet  [4,5, 
and 6].  
Also, many enterprises have users (i.e. workers and/or 
clients)  whose  numbers  can  be  in  the  hundreds  of 
thousands  or  millions  [7].  Typical  examples  are  banks, 
utility  companies,  insurance  companies  and  popular  Web 
sites,  to  name  a  few.  For  such  enterprises,  manually 
assigning users to roles may  not be feasible, especially in 
case  of  external  users,  i.e.  the  enterprise  customers  and 
business partners.  
Moreover,  RBAC  is  being  supported  by  software 
products designed to serve large number of clients, such as 
popular  commercial  database  management  systems,  e.g. 
Oracle, Informix, and Sybase [8].  
All  of  these  factors  mentioned  above  render  the 
manual user-to-role assignment a formidable task because 
maintaining user-role assignment up-to-date is both costly 
and error-prone. Besides, automated assignment  gives the 
enterprise  an  edge  by  extending 
its  user-consumer 
business partnership. 
and 
a 
for 
sets 
benchmark 
In  fact,  some  enterprises  with  large  customer  bases 
have already implemented systems that assign and revoke 
users  automatically  [7],  and  many  of  them  have  achieved 
90-95%  automation  of  administration  [9].  Rule-Based 
RBAC  (RB-RBAC)  Family  of  models  was  suggested  to 
provide  a  sound  conceptual  basis  for  the  automation 
process 
software 
implementations  of  the  process  [10,  11  and  16].  RB-
RBAC provides the  specification  needed to automatically
assign  users to roles based on a finite set of authorization 
rules  defined  by  the  enterprise,  hence  the  name  Rule-
Based  RBAC  or  RB-RBAC  for  short.  The    RB-RBAC 
family  introduces  negative  authorization,  represented  by 
negative 
the  RBAC  world.  The  central 
contribution  of  this  paper  is  to  explore  and  analyze 
different  aspects  of  negative  authorization  in  RB-RBAC 
context. 
roles, 
to 
This paper is organized as follows. Section 2 provides 
an overview of related research. In section 3, RB-RBAC is 
revisited.  In  section  4,  we  introduce  the  RB-RBAC-ve 
model i.e. RB-RBAC with negative authorization. Section 
5 concludes the paper including a discussion of issues that 
we have not explored in this paper, though they are closely 
related to the topic discussed. 
2. Related Work. 
In  the  real  world  of  access  control,  there  are  two  well-
known decision policies [12]:  
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
1
a. Closed  policy:  This  policy  allows  access  if  there 
exists  a  corresponding  positive  authorization  and 
denies it otherwise. 
b. Open policy: This policy denies access if there exists 
a  corresponding  negative  authorization  and  allows  it 
otherwise. 
Bertino et al. contends that the closed policy approach 
has  a  major  problem  in  that  the  lack  of  a  given 
authorization  for  a  given  user  does  not  prevent  this  user 
from  receiving  this  authorization  later  on.  They  therefore 
proposed  an  explicit  negative  authorization  as  blocking 
authorizations.  Whenever  a  user  receives  a  negative 
authorization,  his  positive  authorizations  become  blocked 
[13].
Negative  authorization  is  typically  discussed  in  the 
context  of  access  control  systems  that  adopt  open  policy. 
There  is  an  extensive  amount  of  work  in  this  regard,  see 
for  example  [14]  and  [13].  The  introduction  of  negative 
authorization  brings  with  it  the  possibility  of  conflict  in 
authorization,  an  issue  that  needs  to  be  resolved  in  order 
for  the  access  control  model  to  give  a  conclusive  result. 
The  types  of  conflicts  brought  about  by  the  negative 
authorization and conflict resolution polices are discussed 
in  abundance  outside  RBAC  literature.  For  example, 
Jajodia  et  al.  suggest  a  model  that  is  based  on  a  logical 
authorization  language  that  allows  users  to  specify, 
together  with  the  authorizations,  the  policy  according  to 
which  access  control  decisions  are  to  be  made  [15].  The 
key  components  of  the  model  are  objects,  subjects, 
actions,  and  rules.  Subjects  who  may  be  authorized  to 
perform actions on objects include user, roles and groups. 
The  unit  of  authorization  is  an  action  on  an  object.  The 
authorization  language  expresses  the  policy  by  means  of 
rules  of  different  types.  One  type  of  rule  is  used  to 
explicitly authorize users, roles or group. Another type of 
rule is used to derive further authorization based on those 
provided by the first type of rule. Any conflict that might 
arise  with  respect  to  authorization  derivation  is  resolved 
using  a  third  type  of  rule.  Several  types  of  conflicts  and 
conflict  resolution  policies  are  suggested.  RB-RBAC 
utilizes  some  of  these  policies  as  well  as  some  new 
conflict  resolution  policies  specified  in  this  paper  for  the 
first  time.  In  another  work,  Jajodia  et  al.  provide  formal 
definitions 
authorization 
propagation and conflict resolution [12]. 
several  policies 
for 
for 
Negative  authorization  is  rarely  mentioned  in  RBAC 
literature,  mainly  because  RBAC  Models  such  as 
RBAC96  and  the  proposed  NIST  standard  model  are 
based on positive permissions that confer the ability to do 
something  on  holders  of  the  permissions  [2].  This  is 
different  from  the  semantics  given  to  this  concept  in  RB-
RBAC, as will be discussed in section 4. 
Al-Kahtani  has  proposed  a  family  of  models  which 
can be used to dynamically assign users to roles based on a 
set of authorization rules defined by the enterprise. These 
of 
the 
languages 
(Authorization 
rules  take  into  consideration  users’  attributes  and  any 
constraints  set  forth  by  the  enterprise’s  security  policy. 
The  Rule-Based  RBAC  (RB-RBAC)  models  provide  a 
Specification 
family 
Languages  or  ASL  for  short)  to  express  these  rules.  The 
models  also  define  relations  among  rules,  provide 
specification  for  derived  induced  hierarchies  among  the 
roles,  and  allow  constraints  specification.  Figure  1  shows 
members  of  the  RB-RBAC  family.  Model  A  is  the  most 
basic  among 
the 
specification  of  a  set  of  authorization  rules  that  can  be 
used  to  assign  users  to  roles  based  on  users’  attributes. 
Model  B  extends  Model  A  to  allow  the  specification  of 
negative  authorization  (Model  B1)  and  mutual  exclusion 
(Model B2) by extending the ASLA language. The extended 
language is called ASLB1 and ASLB2, respectively. Model C 
extends Model A to allow constraints specification. In the 
following  two  sections  we  will  briefly  discuss  model  A 
which  is  the  basic  model  and  then  we  introduce  negative 
authorization  to  RB-RBAC  which  yields  model  B1  which 
we name RB-RBAC-ve in this paper.
family.  This  model  allows 
Model C 
(Model A + 
Constraints  
Specification) 
Model B 
(Model A + Negative 
Authorization/Mutual 
Exclusion)
Model A 
(Monotonic 
Language) 
Figure 1 :RB-RBAC Family 
3. RB-RBAC Model A. 
3.1 Model A Basic Concepts. 
This  model  is  discussed  in  [10,11  and  16]. The  main 
components of the RB-RBAC model A are the sets U, AE, 
R,  and  P  which  represent  users,  attribute  expressions,  
roles, and  permissions respectively (Figure 1). 
U
A
R
P
Figure 2: RB-RBAC Main Components 
The U, R, and P sets are imported from RBAC96. In 
RB-RBAC,  the  security  policy  of  the  enterprise  is 
expressed in the form of a set of authorization rules. Each 
rule takes as an input the attributes expression (a member 
of  AE set) that is satisfied by a user (a  member of U set) 
and  produces  one  or  more  roles  (a  member  of  R  set).  An 
attribute  expression 
in 
is  a  well-formed 
formula 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
2
propositional  logic  that  specifies  what  combination  of 
attributes  values  a  user  must  satisfy  in  order  to  be 
authorized  to  roles  specified  in  the  rule.  The  attributes 
expressions  can  be  stated  using  the  language  provided  by 
the model. Syntactically, a rule has two parts: 
a. The  left  hand  side  (LHS)  of  a  rule  is  an  attribute 
expression.  
b. One or more role(s) in the right hand side (RHS). 
If u satisfies the attribute expression, u is authorized to the 
role(s)  specified  in  RHS  of  the  rule.  The  following  is  an 
example of a rulei:
aei (cid:159) rg
where aei is the attribute expression and rg is the produced 
role.  If  user  u satisfies  aei,  then  u  is  authorized  to  all  the 
roles in the right hand side of rulei. To maintain user-role 
authorization the set URAuth is defined as follows:  
URAuth  =  {(u,r)|  (∃rulei)[u  satisfies  aei
∈RHS(aei)}
If (u,r) ∈ URAuth then this means that u is authorized 
to  role  r.  This  set  is  the  key  component  of  RB-RBAC 
since  it  captures  the  semantics  of  user-role  assignment  in 
the  models.  Only  a  user  who  has  authorization  on  roles 
that  are  specified  in  RHS  can  activate  these  roles. 
Activating  a  role  enables 
the 
permissions assigned to that role. A user can activate one 
or  more  of  his  authorized  roles  in  a  session.  Different 
sessions  belonging  to  the  same  user  can  have  different 
roles. 
to  execute 
∧ r
the  user 
There  is  an  implicit  “OR”  among  the  rules.  If  u
satisfies  one  or  more  rules  that  produce  different  roles, 
then he is authorized to activate any combination of these 
roles.  Upon  receiving  a  user  request  of  a  role,  the  system 
that  implements  RB-RBAC  searches  the  authorization 
rules set to find a rule which the user satisfies such that the 
rule  yields  that  requested  role.  As  a  user  satisfies  more 
rules, the set of roles that he is authorized to assume does 
not diminish. Thus Model A is monotonic.
3.2 User States. 
A  user  can  be  in  any  of  several  states  wrt  a  specific 
role. For a given role r, we distinguish the following user’s 
states:  
a. Potential (P): user u is authorized to role r but has not 
activated it yet. 
b. Revoked (R): user u has activated role r at least once 
but is not currently authorized to activate it. 
c. Not-candidate (N): user u has not activated role r and 
is  not  currently  authorized  to  activate  it  because  he 
does  not  have  the  required  attributes  for  assuming  r,
i.e. u is not authorized to r.
d. Deleted  (Del):  user  u  has  been  deleted  from  the 
system by an authorized individual such as the System 
Security Officer (SSO). 
e. Active  (Act):  refers  to  the  state  where  the  user  is 
currently active in the role. 
f. Dormant  (D):  After  deactivating  a  role,  the  user 
becomes dormant with respect to that specific role, i.e. 
in “D” state. 
The  importance  of  this  distinction  among  different 
states  of  users  becomes  clear  when  specifying  constraints 
and  enforcing  policies  like  the  Chinese  Wall.    Figure  2 
shows the state diagram of a  user  with respect to a single 
role.
To  express  authorization  rules,  RB-RBAC  provides 
ASLA a  language  based  on  a  context-free  grammar.  The 