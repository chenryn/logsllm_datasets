76 (9)
36 (7)
8.0%
3.4%
3.2%
1.5%
WHOIS
TABLE VII.
16.4%
254 (42)
12.7%
READ EMAILS AND VIEWED REPORTS THEREAFTER,
302 (38)
GROUPED BY GENERIC ALIASES/WHOIS CONTACT
the technical details about the reported issue compared to WP
webmasters. This may also explain the higher Git ﬁx rate even
when viewing only the email. Additionally, our hypothesis that
the vulnerable WP sites are less actively maintained and run
outdated software may also be a contributing factor.
Usefulness of Generic Alias Addresses — RFC-speciﬁed
generic email aliases (such as security@) may not be con-
sistently available. To evaluate their effectiveness, we compare
the fraction of address recipients that accessed our emails and
our reports for WHOIS contacts versus generic aliases.
Our ﬁndings for email accesses are shown in Table VII.
We note that the total number of viewed reports from generic
aliases exceeds group sizes in Table VI, because a site might
access the report from messages received at multiple aliases.
Notably, the least effective alias appeared to be the security
alias, whereas info was most effective. This can be explained
in part by the fact that for the ﬁrst round of notiﬁcations, 85%
of the emails to security bounced, while for info, the
bounce rate was only at 62%. Nevertheless, this highlights that
a dedicated security email address is hard to reach. Moreover,
it seems like the WHOIS contact information is more useful,
allowing us to deliver the initial notiﬁcation to 12.7% and
16.4% of the WP and Git sites, respectively.
The table also shows the number of domains for which a
report was accessed after the email was opened. While the
overall numbers are generally low, it is worth noting that
for Git, abuse and webmaster had the highest number
of viewed reports, even though they did not have the highest
number of emails opened. Hence, while it appears that these
aliases are not as easy to reach as info, recipients of the
technical email addresses might have a better understanding
of the issue described, prompting them to view the report.
D. Parameters for the Success of a Notiﬁcation Campaign
The dimensions of potential biases introduced by tracking
users are unclear. One could argue that security-aware recip-
ients would have external resource retrieval disabled in their
mail client. Yet we discovered that several mail clients, such as
Apple Mail and GMail, enable such external resources by de-
fault. Thus, under the assumption that the results we gathered
at least approximate the whole population of vulnerable sites
we notiﬁed, the analysis shows that the success of a notiﬁcation
campaign depends largely on three key factors:
1) The email reading rate heavily depends on how many
emails are successfully delivered to the inbox of the
recipient and sets the basis for the campaign’s success.
2) The awareness raising factor of the campaign sets the
baseline for people being aware of the security problem,
8
largely inﬂuenced by the recipient’s trust in the email and,
consequently, if she considers the reported vulnerabilities
as serious (e.g., by viewing the detailed report).
3) The aware-to-ﬁx rate, which was high (above 75%) for
Git, can be inﬂuenced by the type of report and type of
vulnerability and represents the chance that an issue is
ﬁxed after the report was viewed (or the target became
aware of the issue implicitly by seeing our email).
the Alexa Top 10,000). For them,
Regarding the email reading rate, our observations show
that it is independent of the type of vulnerability. We found
the bounce rates and tracking rates are comparable between
Git and WP. We note however that Stock et al. [25] also
considered Client-Side XSS issues focusing on highly-popular
sites (i.e.,
the bounce
rates varied between WordPress (Alexa Top 1m) and Client-
Side XSS bugs (Alexa Top 10k). We believe that the email
reading rate is independent of the type of vulnerability, but
is inﬂuenced by the popularity of a Web site. Moreover, we
showed that Google Mail in particular exhibited a much lower
tracking rate than other mail servers. This is likely caused by
more restrictive ﬁltering rules employed by Google, especially
compared to Microsoft mail services. At the same time, of the
103,189 emails we sent for our ﬁrst round of notiﬁcations,
21,380 (21%) were delivered to Google. Considering only
those emails which did not bounce due to a non-existing
mailbox, 12,336/40,002 (31%) of successful deliveries went to
a Google mail exchange. Hence, if our messages were ﬂagged
as possible spam by Google, this single service had a severe
impact on the success of our campaign. To solve such an issue,
large-scale notiﬁcation campaigns can aim to collaborate with
larger email providers to achieve a higher coverage of mail
servers ﬂagging the emails as benign.
The second parameter, i.e., the ability to raise awareness of
a vulnerability issue, is hard to measure. One way of doing so
is looking at the likelihood of a recipient actually viewing the
report. However, from our experience, this view rate depends
on the type of vulnerability (and implicitly also the type
of administrator). The fraction of operators who opened our
emails and subsequently visited the contained link varied from
15% to 26%. A possible explanation for the difference is
the audience of the notiﬁcations: for Git, the expected tech-
savviness is higher than for an operator of a WP domain. In
fact, although it contained important technical information on
how to ﬁx the vulnerability, only about one in six recipients
who opened an email in our WP data set also visited the
Web site. Second, after reading our initial notiﬁcation email, it
might not be necessary to fetch further information by reading
a report, which also inﬂuences the view rate.
Finally, the aware-to-ﬁx rate is signiﬁcantly lower than the
optimum rate of near 100%. We showed (similar to previous
work [19, 25]) that even viewing the detailed report about a
security issue does not always result in a ﬁxed site. Especially
for WordPress, ﬁx rates of sites that viewed the report were
around 40%, showing that 60% of the sites do not ﬁx the issue
even when aware of it. For Git, the ﬁx rate was much higher
at around 80%. It appears that there are two major factors for
the low ﬁx rate on WordPress. First, notiﬁed site operators
might not have been able to understand the implications of the
disclosed vulnerabilities. Arguably, researchers should try to
better understand what level of detail is needed for the expected
type of recipient. Second, they might not have considered
these a risk for their sites. This is partially underlined by the
responses we received to the emails we sent to operators who
had not ﬁxed their sites despite viewing a report. Six out of
15 respondents stated that they were not going to address the
vulnerability due to the limited risk they associated with the
issues. Hence, it is reasonable to assume that the perceived
risk associated with the type of disclosed issue inﬂuences the
fraction of ﬁxed sites and our results should be re-evaluated
with other types of vulnerabilities.
V. NOTIFYING MANUALLY ACQUIRED CONTACTS
So far we used contact points which could be automatically
deduced (e.g., generic aliases) or retrieved from a database
(e.g., WHOIS data). Furthermore, with email, we used a fully-
automated communication channel. However, following this
procedure did not perform in a satisfactory manner when
considering the fraction of contacts that were successfully
reached. In this section, we study how alternative communi-
cation channels can help to improve this situation.
A. Experiment Parameters
As outlined in the following, the alternative communication
channels we chose require signiﬁcant manual effort to collect
contact points or to perform the notiﬁcation. We therefore
randomly sampled 1,000 vulnerable domains which were in
an unknown state by April 10th, 2017, i.e., had not accessed
a report, had not retrieved the external resource linked in
our email and had not bounced all emails. We selected these
domains before excluding core dumps from our experiments,
which slightly reduces the ﬁnal set to 970 domains.
B. Manual Communication Channels
In the following, we brieﬂy outline each of the manual
communication channels we selected. To ﬁnd such a channel,
we manually analyzed the vulnerable Web sites to extract as
many of the available contact points as possible. In total, this
task required about 40 person hours to complete.
Postal — The ﬁrst manual channel is postal snail mail. We,
therefore, searched either for a contact page or an imprint
to retrieve the postal address associated with a Web site. In
case more than one address could be found (e.g., because
a company had multiple ofﬁces), we prioritized locations in
English-speaking countries. For the letters, we used the address
format of the destination country, most importantly also the
character set (e.g., for China or Russia). Since the recipient had
to manually type the URL to the vulnerability report, we set up
shortened URLs with site-unique six-character tokens. Apart
from this shortened URL, we used the same template as for
the automated disclosure via email. For all manuals channels
described in the following, we also used the shortened URLs.
Email — Another manual channel was again email, but this
time contacting email addresses contained on the Web site that
had to be searched manually. Whenever we discovered more
than one email address on a site, we used the one which most
closely resembled an administrator. In many cases, however,
we had to resort to a general contact@ alias. Once an email
address was retrieved, we followed the exact procedure of the
Plain group to send an email.
9
Web forms — Some Web sites offer HTML-based forms to
get into contact. In such cases, we either used general purpose
forms or if the form was guided (i.e., we had to select a reason
for our contact request) we used the topic which most closely
resembled security. Whenever possible, we provided our full
names, afﬁliation, postal address, phone number, and email to
allow for the notiﬁed party to get back to us.
Social Media — We tried to ﬁnd the social media accounts on
Facebook and Twitter that belong to the Web site. While on
Facebook, directly messaging a person or company is possible,
Twitter does not allow sending direct messages to users that are
not following the sender. Therefore, on Twitter we send an @
message to the account, asking them to contact us via email so
that we could disclose the vulnerability. In both cases, instead
of setting up a new account without any friends or followers,
we used two of the authors’ well-established real accounts to
convey trust in the sender.
Phone Numbers — Finally, we chose to call vulnerable sites
to disclose the issues. Similar to postal mail, we selected the
phone number which was most likely to reach an English-
speaking person (e.g., a US or UK-based ofﬁce). We then
determined the best time to call the remote party based on
their timezone. When calling, we ﬁrst established whether the
person on the other end understood English. If not, we asked
to speak to somebody who could, or ended the call if no such
person was available. Once we reached someone who could
speak English, we told them our afﬁliation and that we had
discovered a vulnerability on their site. We inquired whether
they would be the right person to speak to about this and if not,
asked to be forwarded. If the correct person was not available
via phone, we asked them to either give us their email address
or to send us an email. Unless speciﬁcally asked, we did not
disclose any more information on the actual vulnerability over
the phone but rather sent the report via email.
C. Availability of Manual Channels and Group Assignment
Table VIII shows the fraction of domains for which we
could ﬁnd any of the aforementioned contact channels, split
for Git and WordPress. This table reveals a notable insight:
approximately half of all
the domains do not provide an
email address. Previous work on notiﬁcation has, however,
always focused on using emails as the main channel to reach
administrators. Yet, it appears that at least for the snapshot of
our data used for this experiment, site admins prefer not to be
contacted via email.
Apart from this, we observe that both types of considered
Web sites, i.e., those using Git and those run on WordPress,
provide at least one communication channel in about 90%
of the cases. Hence,
it arguably is possible to retrieve a
contact point for almost any domain in need of a vulnerability
notiﬁcation. However, looking up such information at scale is
not feasible. Moreover, considering that calling sites or sending
them postal mail incurs costs, we will discuss if the beneﬁt can
outweigh these costs in the following.
To avoid any bias in the selection of a channel, we
randomly assigned each domain in the data set to any of the
aforementioned channels. After this, we determined whether
a given domain could be contacted via that channel,
i.e.,
whether there was such a contact point for it. If it could
Channel
Git Conﬁg WordPress
Postal
Email
Web forms
Social Media
Phone
At least one
38.4%
57.1%
36.1%
52.8%
43.4%
89.9%
32.0%
45.6%
39.2%
46.1%
33.6%
89.3%
TABLE VIII.
AVAILABILITY OF COMM. CHANNELS CONTACTS
not be contacted, we removed that domain from any further
consideration. Hence, of the 970 domains, only 364 could be
contacted manually. The number of domains for each channel
are shown in Table IX in the Cont. columns.
D. Success of Our Manual Notiﬁcation
After the assignment of the groups, we started our manual
notiﬁcation on April 11th with Social Media, Web forms, and
target-speciﬁc email. We received no bounces for any email
we sent. The next day we called the sites in the phone group.
The same evening, we prepared the letters, which were sent
out on April 13th. We ended our measurements on May 23rd.
The overall results of our manual notiﬁcation are depicted
in Table IX, showing the number of contacted domains, reports
accessed, and ﬁxed domains (after having accessed a report)
for Git and WordPress, respectively. Notably, the email ad-
dresses collected from the Web sites did not appear to be useful
for notiﬁcations. Given that we contacted only such domains
for which we had previously no information whether they
received our message in the ﬁrst place, two reasons might have
come into play. First, our email triggered the same technical
measures as before (e.g., spam ﬁlters). Second, our email was
already received the ﬁrst time we sent it, but disregarded as
untrustworthy. Regardless of the reason, even using manually-
vetted addresses did not increase the effectiveness of emails.
For Git, the most successful channels were postal and
phone, leading to 23% and 25% accessed reports, respectively.
At the same time, these channels are the most expensive ones.
For WordPress, we ﬁnd that Social Media performed best,
followed by the phone channel. However, the generally low
number of reactions do not allow for a meaningful comparison
to the automated notiﬁcation. Nevertheless, we observe that the
respective best channels appeared to reach more administrators
than our original email campaign.
E. Discussion
The goal of this experiment was to determine if alternative
channels could be used to improve vulnerability notiﬁcations.
For 90% of the domains, at least one such channel could
Git Conﬁg
Reports
7 (23.3%)
0 (0.0%)
6 (20.7%)
5 (16.7%)
5 (25.0%)
Fixed
Cont.
5
0
4
1
2
37
43
40
55
26