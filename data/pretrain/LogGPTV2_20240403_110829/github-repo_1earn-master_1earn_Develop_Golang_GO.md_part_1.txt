# GO
---
**推荐工具/资源书籍**
- [Go - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go)
- [GoLand: A Clever IDE to Go by JetBrains](https://www.jetbrains.com/go/)
- [re4lity/Hacking-With-Golang](https://github.com/re4lity/Hacking-With-Golang) - Golang安全资源合集
- [Quorafind/golang-developer-roadmap-cn](https://github.com/Quorafind/golang-developer-roadmap-cn) - Go 开发者路线图
---
## 常见报错
- **fatal error: can’t find import: fmt**
	说明你的环境变量没有配置正确
---
## IDE
### vscode
- [在VsCode中搭建Go开发环境，手把手教你配置](https://juejin.im/post/5cdd811fe51d45475d5e8e0c)
### Goland 常用快捷键
**文件操作相关**
- `Ctrl + E` 	打开最近浏览过的文件
- `Ctrl + N` 	快速打开某个 struct 结构体所在的文件
- `Ctrl + Shift + N` 	快速打开文件
- `Shift + F6` 	重命名文件夹、文件、方法、变量名等
**代码格式化相关**
- `Ctrl + Alt + L` 	格式化代码
- `Ctrl + 空格` 	代码提示
- `Ctrl + /` 	单行注释
- `Ctrl + Shift + /` 	多行注释
- `Ctrl + B 或 F4` 	快速跳转到结构体或方法的定义位置(需将光标移动到结构体或方法的名称上)
- `Ctrl + "+ 或 -"` 	可以将当前(光标所在位置)的方法进行展开或折叠
**查找和定位相关**
- `Ctrl + R`    替换文本
- `Ctrl + F` 	查找文本
- `Ctrl + Shift + F` 	全局查找
- `Ctrl + G` 	显示当前光标所在行的行号
- `Ctrl + Shift + Alt + N` 	查找类中的方法或变量
**编辑代码相关**
- `Ctrl + J` 	快速生成一个代码片段
- `Shift+Enter` 	向光标的下方插入一行,并将光标移动到该行的开始位置
- `Ctrl + X` 	删除当前光标所在行
- `Ctrl + D` 	复制当前光标所在行
- `Ctrl + Shift + 方向键上或下` 	将光标所在的行进行上下移动(也可以使用 Alt+Shift+方向键上或下)
- `Alt + 回车` 	自动导入需要导入的包
- `Ctrl + Shift + U` 	将选中的内容进行大小写转化
- `Alt + Insert` 	生成测试代码
- `Alt + Up/Down` 	快速移动到上一个或下一个方法
- `Ctrl + Alt + Space` 	类名或接口名提示(代码提示)
- `Ctrl + P` 	提示方法的参数类型(需在方法调用的位置使用,并将光标移动至( )的内部或两侧)
**编辑器相关**
- `Ctrl + Alt + left/right` 	返回至上次浏览的位置
- `Alt + left/right` 	切换代码视图
- `Ctrl + W` 	快速选中代码
- `Alt + F3` 	逐个向下查找选中的代码,并高亮显示
- `Tab` 	代码标签输入完成后,按 Tab,生成代码
- `F2 或 Shift + F2` 	快速定位错误或警告
- `Alt + Shift + C` 	查看最近的操作
- `Alt + 1` 	快速打开或隐藏工程面板
---
## 安装/配置/报错
### 安装
**windows**
默认情况下 `.msi` 文件会安装在 `c:\Go` 目录下.且环境变量自动配置好.`GOPATH` 变量请自己指定
**linux**
```bash
访问 https://golang.org/dl/ 下载最新版本包
tar -C /usr/local -xzf 相应文件.tar.gz
export PATH=$PATH:/usr/local/go/bin
export GOROOT=/usr/local/go
export GOPATH=$HOME/Applications/Go
source $HOME/.profile
source ~/.bash_profile
# $GOPATH 可以包含多个工作目录,取决于你的个人情况.如果你设置了多个工作目录,那么当你在之后使用 go get(远程包安装命令)时远程包将会被安装在第一个目录下.
go version
```
**安装目录清单**
你的 Go 安装目录的文件夹结构应该如下所示:
- api   每个版本的 api 变更差异
- bin   go 源码包编译出的编译器(go)、文档工具(godoc)、格式化工具(gofmt)
- doc   英文版的 Go 文档
- lib   引用的一些库文件
- misc  杂项用途的文件,例如 Android 平台的编译、git 的提交钩子等
- pkg   Windows 平台编译好的中间文件
- src   标准库的源码
- test  测试用例
---
### 配置
**Go 环境变量**
Go 开发环境依赖于一些操作系统环境变量,你最好在安装 Go 之间就已经设置好他们.如果你使用的是 Windows 的话,你完全不用进行手动设置,Go 将被默认安装在目录 `c:/go` 下.这里列举几个最为重要的环境变量:
- $GOROOT 表示 Go 在你的电脑上的安装位置,它的值一般都是 `$HOME/go`,当然,你也可以安装在别的地方.
- $GOARCH 表示目标机器的处理器架构,它的值可以是 386、amd64 或 arm.
- $GOOS 表示目标机器的操作系统,它的值可以是 darwin、freebsd、linux 或 windows.
- $GOBIN 表示编译器和链接器的安装位置,默认是 `$GOROOT/bin`,如果你使用的是 Go 1.0.3 及以后的版本,一般情况下你可以将它的值设置为空,Go 将会使用前面提到的默认值.
目标机器是指你打算运行你的 Go 应用程序的机器.
Go 编译器支持交叉编译,也就是说你可以在一台机器上构建运行在具有不同操作系统和处理器架构上运行的应用程序,也就是说编写源代码的机器可以和目标机器有完全不同的特性(操作系统与处理器架构).
为了区分本地机器和目标机器,你可以使用 $GOHOSTOS 和 $GOHOSTARCH 设置目标机器的参数,这两个变量只有在进行交叉编译的时候才会用到,如果你不进行显示设置,他们的值会和本地机器($GOOS 和 $GOARCH)一样.
> Mac 下编译 Linux 和 Windows 64位可执行程序
```
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go
CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go
```
> Linux 下编译 Mac 和 Windows 64位可执行程序
```
CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go
CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go
```
> Windows 下编译 Mac 和 Linux 64位可执行程序
```
SET CGO_ENABLED=0
SET GOOS=darwin
SET GOARCH=amd64
go build main.go
SET CGO_ENABLED=0
SET GOOS=linux
SET GOARCH=amd64
go build main.go
```
- $GOPATH 默认采用和 $GOROOT 一样的值,但从 Go 1.1 版本开始,你必须修改为其它路径.它可以包含多个包含 Go 语言源码文件、包文件和可执行文件的路径,而这些路径下又必须分别包含三个规定的目录:src、pkg 和 bin,这三个目录分别用于存放源码文件、包文件和可执行文件.
- $GOARM 专门针对基于 arm 架构的处理器,它的值可以是 5 或 6,默认为 6.
- $GOMAXPROCS 用于设置应用程序可使用的处理器个数与核数.
---
### Test
```bash
mkdir -p $HOME/Applications/Go
cd $HOME/Applications/Go
```
```vim
vim hello.go
package main
import "fmt"
func main() {
	fmt.Printf("hello, world\n")
}
```
```bash
go build
./Go
```
### 报错
**解决 Golang https 请求时，x509: certificate signed by unknown authority 问题**
- http://www.honlyc.com/post/golang-x509-certificate-unknown-authority/
---
## 简介知识
### 工程结构
**工作区**
一般情况下,Go 语言的源码文件必须放在工作区中.但是对于命令源码文件来说,这不是必需的.工作区其实就是一个对应于特定工程的目录,它应包含 3 个子目录:src 目录、pkg 目录和 bin 目录,下面逐一说明.
- src 目录
    用于以代码包的形式组织并保存 Go 源码文件,这里的代码包与 src 下的子目录一一对应.例如,若一个源码文件被声明属于代码包 log,那么它就应当保存在 src/log 目录中.
    当然,也可以把 Go 源码文件直接放在 src 目录下,但这样的 Go 源码文件就只能被声明属于 main 代码包了.除非用于临时测试或演示,一般还是建议把 Go 源码文件放入特定的代码包中.
- pkg 目录
    用于存放通过 go install 命令安装后的代码包的归档文件.前提是代码包中必须包含 Go 库源码文件.归档文件是指那些名称以".a"结尾的文件.该目录与 GOROOT 目录下的 pkg 目录功能类似.区别在于,工作区中的 pkg 目录专门用来存放用户代码的归档文件.
    编译和安装用户代码的过程一般会以代码包为单位进行.比如 log 包被编译安装后,将生成一个名为 log.a 的归档文件,并存放在当前工作区的 pkg 目录下的平台相关目录中.
- bin 目录
    与 pkg 目录类似,在通过 go install 命令完成安装后,保存由 Go 命令源码文件生成的可执行文件.在类 Unix 操作系统下,这个可执行文件一般来说名称与源码文件的主文件名相同.而在 Windows 操作系统下,这个可执行文件的名称则是源码文件主文件名加 .exe 后缀.
**GOPATH**
我们需要将工作区的目录路径添加到环境变量 GOPATH 中.否则,即使处于同一工作区,代码之间也无法通过绝对代码包路径调用.在实际开发环境中,工作区可以只有一个,也可以有多个,这些工作区的目录路径都需要添加到 GOPATH 中.与 GOROOT 一样,我们应该确保 GOPATH 一直有效.
需要注意一下两点:
1. GOPATH 中不要包含 Go 语言的根目录,以便将 Go 语言本身的工作区同用户工作区严格分开.
2. 通过 Go 工具中的代码获取命令 go get,可将指定项目的源码下载到我们在 GOPATH 中设定的第一个工作区中,并在其中完成编译和安装.
**源码文件**
Go 的源码文件有 3 个种类,即命令源码文件、库源码文件和测试源码文件,下面详细说明这 3 类源码文件.
- 命令源码文件
    如果一个源码文件被声明属于 main 代码包,且该文件代码中包含无参数声明和结果声明的 main 函数,则它就是命令源码文件.命令源码文件可通过 go run 命令直接启动运行.
    同一个代码包中的所有源码文件,其所属代码包的名称必须一致.如果命令源码文件和库源码文件处于同一个代码包中,那么在该包中就无法正确执行 go build 和 go install 命令.换句话说,这些源码文件将无法通过常规方法编译和安装.