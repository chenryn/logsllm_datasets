# Optimal Average-Complexity Ideal-Security Order-Preserving Encryption

**Authors:**
- Florian Kerschbaum, SAP, Karlsruhe, Germany
- Axel Schröpfer, SAP, Karlsruhe, Germany

## Abstract
Order-preserving encryption (OPE) enables the execution of various queries, including range queries, on encrypted databases. Popa et al. recently introduced an ideal-secure OPE scheme, but its insertion (encryption) cost is prohibitively high. This paper presents an alternative ideal-secure OPE scheme that is significantly more efficient. Our approach is inspired by Reed's work on the average height of random binary search trees. We demonstrate that our scheme reduces the average communication complexity from \(O(n \log n)\) to \(O(n)\) under a uniform distribution. Additionally, our scheme integrates efficiently with adjustable encryption, as used in CryptDB. In our experiments, we achieved performance improvements of up to 81% in LANs and 95% in WANs for database insertions.

**Categories and Subject Descriptors:**
- D.4.6 [Operating Systems]: Security and Protection—Cryptographic controls
- C.2.4 [Computer-Communication Networks]: Distributed Systems—Distributed databases

**Keywords:**
- Order-Preserving Encryption, Indistinguishability, Ideal Security, Efficiency, Adjustable Encryption, In-Memory Column Database

## 1. Introduction
Order-preserving encryption [6, 8, 9, 32] allows performing many types of queries, including range queries, on encrypted data without modifying the database engine. Recent studies suggest that these queries are practical in terms of performance [17, 33]. Several OPE schemes have been proposed, but their security remains a topic of debate.

Boldyreva et al. provided the first formal treatment of security in OPE [8]. An ideal-secure OPE (indistinguishable under ordered chosen plaintext attack – IND-OCPA) leaks only the order of the plaintexts. For example, the ideal encryption of {7, 12, 19} would be {1, 2, 3}, preserving their order. Achieving this type of encryption is challenging. Boldyreva et al. proved that it is impossible to design a linear-length ciphertext scheme if the encryption is static and stateless. They settled for a weaker security notion (random order-preserving function), which later was shown to leak at least half of the bits [9, 37].

Popa et al. modified the construction of the encryption scheme (now called an encoding scheme) [32]. They proved that even with a stateful encryption function, a linear-length scheme is not possible. They then proposed an interactive protocol that updates the encryption on inserts, achieving ideal security. However, the update cost in their scheme is high, with a best-case communication cost of \(\Omega(n \log n)\).

Reed's work on the average height of random binary search trees [34] shows that the height is tightly centered around \(O(\log n)\). We use this result to construct an OPE scheme with an \(\Omega(n)\) lower bound communication cost and an \(O(n)\) average case under uniform distribution, which is also the theoretical lower bound. Table 1 compares our scheme with other formally analyzed OPE schemes by Popa et al. and Boldyreva et al.

We apply our OPE scheme to an outsourced, in-memory column-store database. The client retains the key, and queries are performed on encrypted data. Column-store databases store data in columns for faster sequential access and compress it using a dictionary. We argue that our OPE scheme is well-suited for this architecture and is efficiently compatible with adjustable encryption, as introduced by CryptDB [33]. Our experimental results show performance improvements of up to 81% in LANs and 95% in WANs for database insertions.

In summary, our contributions include:
- A novel OPE scheme with updates that is ideally secure under the IND-OCPA definition.
- Improved efficiency in the average case and in experimental benchmarks.

The rest of the paper is organized as follows: Section 2 reviews related work, Section 3 presents our OPE scheme, including algorithms, security proof, and complexity analysis. Section 4 discusses the application to an outsourced, encrypted database. Section 5 summarizes our experimental findings, and Section 6 concludes the paper.

## 2. Related Work

### 2.1 Order-Preserving Encryption
Several OPE schemes have been proposed [6, 8, 9, 32, 5, 17, 19, 20, 23, 25, 26, 28, 38, 39, 42], but most use ad-hoc or speculative security models. Popa et al. [32] achieved ideal security, and we improve on their result by lowering the cost in the best and average cases and enabling compatibility with adjustable encryption.

The notion of ideal security (IND-OCPA) was introduced by Boldyreva et al. [8]. They settled for a weaker notion of random order-preserving functions in their construction. Yum et al. [42] improved their construction but remained in the same security model. Popa et al. [32] pointed out that immutable ciphertexts are not necessary for encrypted databases. We improve on their result by reducing the probability of updates to be negligible, resulting in optimal average cost.

### 2.2 Applications
OPE has applications in database-as-a-service (DAS) [6, 15, 16, 33], where the database is outsourced to the cloud and values are encrypted before being sent. OPE enables range queries over encrypted data without changing the database engine. We focus on in-memory, column-store databases and support adjustable encryption as in CryptDB [33]. 

OPE also has applications in general software-as-a-service, such as business software and email [1, 2]. While we do not specifically address these, our scheme is expected to be highly compatible.

### 2.3 Other Cryptographic Schemes
Searchable encryption achieves stronger security than OPE but requires a linear scan of the data unless additional indexing is provided. Lu [27] presented a searchable encryption scheme for ranges with logarithmic time-complexity, but its indexing information makes it vulnerable, similar to OPE. Searchable encryption is a special case of functional encryption, which allows evaluating any function on a set of ciphertexts. Fully homomorphic encryption [13] enables this for arbitrary functions, but it is often too inefficient for practical use.

## 3. Our Scheme

### 3.1 Example
Consider a salary table in a database with fields for first name, last name, and salary amount. Table 2 shows an example.

| First Name | Last Name | Salary |
|------------|-----------|--------|
| John       | Smith     | 50000  |
| Jack       | Doe       | 60000  |
| Jack       | Smith     | 55000  |
| John       | Doe       | 52000  |

Before delving into the details of our OPE scheme, we provide a motivating example.