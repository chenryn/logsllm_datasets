历史说明：我们的部署平台叫做
Bazooka。你仍然可能会发现引用它的谈话和在互联网上的帖子。当时，它是一个高度创新的容器编排平台。当时，没有
Docker，容器对大多数人是相当神秘的东西，显然在开源空间里没有成熟的容器编排平台。因此，建造
Bazooka 是必须的，而不是一种东施效颦。后来，我们完全迁移到了
Kubernets。Bazooka 和平台团队现在成为历史。
## 完成循环：自行运维
  现在，部署更改和创建新服务变得简单而快速，一个新的瓶颈变得显而易见：即使开发人员可以随时部署，他们还是必须注意并与那些为其系统进行轮值的人员进行协调。
从 SoundCloud
的最初时代起，何时部署更改就由开发人员做出决定。另一方面，由经验丰富的系统和网络工程师组成的
SysOps 团队安装了第一个监控，默认情况下，他们收到了所有通知和警报。
这种情况引起了大量的摩擦：SysOps
定期处理他们无法控制的代码部署的后果。他们不熟悉未在 Bazooka
上运行的应用程序的部署机制，并且不知道可以安全地回滚到哪些版本。由于全球流量高峰通常发生在欧洲正常工作时间结束后，因此性能问题通常在非工作时间出现。对于大多数问题，轮值的
SysOps
工程师只能做一件事：找到要上报的应用程序开发人员。由于不存在有组织的开发人员轮班，这有时可能很困难，并且接受上报的几率在开发人员之间分布非常不均匀。
显然，在保持开发团队以尽快部署功能的独立性的同时，我们的运维团队不可能进行可持续的轮值。增加更多的更新门槛是不可能的。相反，我们走另一条路：在平台团队的引领下，越来越多的团队接管了自己的服务。
从服务本身的运行状况开始，开发人员逐渐将其责任扩展到所有直接依赖项（如数据库群集）。团队承担运维责任的主要诱因是自主性：他们现在可以构建和部署新功能，而无需等待任何其他团队。
为了缓解没有轮值经验的工程师的压力，我们开发了一系列交互式学习研讨会。为了帮助所有工程师提高运维技能，这些研讨会涵盖了监控、事件响应和进行事后分析等主题。
SysOps
中释放的资源被重新投资用于持续改进工具，以支持开发团队的旅程，以便可以移交更多的所有权和警报。我们创造了一个良性循环：我们越是改进自己的系统和自动化，就能越快地做到这一点。
## 介绍生产工程
    由于每个团队都在自己的域内工作，因此总体可用性会受到影响。将系统去耦到一定程度，以至于一个系统的故障不会影响任何其他系统，可以减少这类问题，但不能完全消除这一问题。有时用户体验会形成一个整体，这就是发生跨域故障的地方。生产工程团队的职责是应对这一问题，维护整体系统的稳定性，并促进整个组织内知识和良好实践的交流。
由于 SysOps
团队成功地转移了大部分日常服务的运维及其直接依赖关系，因此它仍然主要负责物理层（服务器和网络）的构建和维护。但是，这个定位还导致这个团队与几乎所有其他团队松散地交互。团队将利用这一机会收集系统设计方面的输入，帮助解决数据库问题，或与其他团队建立联系，解决类似的挑战。
随着 SysOps 团队继续挖掘自己的老古董，生产工程（简称
ProdEng）通过将一些前 SysOps
工程师与上述平台团队合并而形成，因为平台团队在其大型项目完成后大幅减员。因此，它再次具有
SRE
典型的系统和软件工程师的组合。这里的目标是通过分离咨询和数据中心运维功能来提高关注度。
与传统运维团队和 Google 风格的 SRE 团队相比，一个显著区别是，SoundCloud
的 ProdEng
没有正式的能力来阻止功能发布，更不用说任何更复杂的安全措施（如错误预算）。（事实上，在我们早期，我们只从
Twitter 中了解到用户体验的故障。）与谷歌风格的 SRE 团队不同，ProdEng
甚至不能威胁放弃轮值义务，因为他们一开始就没有必要为了解决客户问题而关注警报。虽然这是一个挑战，但事实证明这是可以克服的。正如我们稍后将更详细地看到的那样，没有必要把
ProdEng
的建议当成圣旨，特别是因为我们的工程文化将重点放在团队的自主性上。
从平台团队，ProdEng
继承了部署平台的所有权。通过提供每个生产部署所需的这种基本服务，他们与所有工程团队保持联系，而无需成为守门员。从
Mikey Dickerson
的服务可靠性层次结构的底部开始工作，*站点可靠性工程：谷歌如何运行生产系统*，[图3-1。](https://landing.google.com/sre/book/chapters/part3.html#fig_part-practices_reliability-hierarchy)ProdEng
提供监控帮助和通用技术（以便我们可以在用户发布关于故障的 Twitter
之前检测到故障）、指导事件响应并简化事后处理，所有这些都考虑到了众所周知的
SRE 实践。
由于集成了各种经验和对过去选择的接触，ProdEng
也经常被要求帮助设计新系统。但是，这一步是完全自愿的：开发团队可以自由选择是任意步骤进行咨询还是采用自己的意见。这些咨询通常是非正式的，例如在早期构思新功能时，走廊对话可能会变成一个小时的头脑风暴。正式审查也会发生，但前提是拥有服务的团队感到有必要。它们是
ProdEng
渴望提供的一项服务，但不是启动的要求。审核可以在服务生命周期的任何时候进行，服务所有权的更改是常见原因。
开发团队是否以何种形式与 ProdEng
接洽，由开发团队决定。这使他们能够根据自己的需求加快功能开发的步伐。
在同一团队内保持开发和生产支持可以产生自我调节：一个随意将半生不熟的功能发布到生产中的团队将因他们的选择而放慢速度，从而推迟未来的功能。过度思考和过度设计的团队同样会缓慢交付，但每个团队在这个过程中都能找到自己的最佳位置，如果情况需要，也可以暂时偏离它。
在使用此控制循环时，不要对用户体验造成太大损害，这一点很重要。量化和设置对用户体验的影响的限制并非易事。我们设定了一些明确定义的高级别可用性目标，但依靠我们共同的事后分析流程，让每个团队对其选择的影响负责，这种方法主要取决于我们的工程组织规模有限，当然有助于与我们的用户强烈的同情感。      
# 一些实施详细信息
 本节详细介绍了我们如何在精神上应用 SRE
原则，同时根据给定情况调整实现，其中相对较少的工程师运行一组相对不同的功能。我们挑选了我们认为最有趣、最合适的例子来说明调整是如何进行的。
## 开发人员的工作效率和健康与监控
     有一群人负责轮值，看守太多的频繁变动组件，这不仅很容易出现疲劳，而且很难以称职的方式做出反应，从而导致他们感觉自己不过是动物园看守员。然而，解决方案的另一端同样危险。随着我们向开发人员的迁移，他们构建的系统也需要轮值，因此自然倾向于进行非常小规模的专家轮换。这听起来很棒，但落入一些陷阱：
-   "仅限专家"通常意味着很少的工程师在轮值，这导致太多的时间要求健康的工作和生活平衡（特别是如果不能在白天轮值，而是要定期夜间待命）。
-   轮值人员若看守很少的事情，对嘈杂的警报会产生更大的容忍度，在承担更多责任的轮值团队中，这种容忍是难以忍受的。因此，很容易陷入拖延改善的坏习惯，因为总有更紧迫的事情要处理。
-   由于只有专家轮值，"部落知识"是另一个容易陷入的坏习惯。编写正确的
    Runbook，甚至以易于理解的方式设置警报的动机变得相当低。
我们陷入了所有这些陷阱，有无数的两人或三人轮值组，一直被完全没有文档记录，往往毫无意义的警报骚扰。这时我们面对的不仅仅是纪律和准则的问题，合适的技术（如用于监控和警报的[Prometheus）](https://prometheus.io)在启用有意义的警报和促进事件响应方面发挥了重要作用，即使是对于非专家也是如此。
 这次仍然遵循我们的策略，使用正确的解决方案应该非常容易，而无需强制推广，我们的向首选的应用程序框架增加了