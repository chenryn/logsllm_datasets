7
8
9
10
11
12
13
pattern is executed in case at least one element x has the
proper data ﬂow and semantic label (lines 6-7). For each se-
lected element x (line 9), the function extract (x, UAs(UV,SPM))
(line 10) executes UAs(UV, SPM), returning the value e as-
sociated with x. This value e is then used by the function
replay (x, e, UAs(UM, SPT)) (line 11) to replay the value of e
while executing UAs(UM, SPT), and generating the correspond-
ing HTTP trafﬁc logs (HTTP logs). This logs are ﬁnally used
in the Postconditions to check whether Flag(UV, SPT)
occurs. To clarify how the attack pattern engine leverages the
API exposed by ZAP to interact with the built-in proxy, the
pseudo-codes corresponding to the extract and replay functions
are reported in Listing 2 and Listing 3, respectively.
In List-
ing 2, at ﬁrst, the function generate break rule (x) is invoked.
Given an element x, it returns a proxy rule rb which sets a
break point to the execution of the user actions in ZAP, when
an occurrence of x is detected. The proxy rule includes regular
expressions for uniquely identifying an elements in the HTTP
trafﬁc. Then, the ZAP API call load rule ZAP(rule) loads rb in
11
promptly notiﬁed our ﬁndings to the ﬂawed SPs and TTPs
and most of them acknowledged our reports and patched
their solutions accordingly. Additional information regarding
the disclosures is given in Section VI-D. Screencasts of the
attacks and the details about our interactions with the vendors
are available in the companion website. Some SPs have not
patched the vulnerabilities yet, and thus in Table IV we have
anonymized their names.
We cluster the attacks into four classes (see last column of
Table IV) according to their similarities with respect to known
attacks. This allows us to show the capability of our approach
to not only detect attacks that are already known in literature,
but also to ﬁnd similar attacks in MPWAs implementing
different protocols and in different MPWA scenarios.
1) New kind of attack (N): The RA5 pattern that leverages
the browser history attacker threat model discovered an attack
in the integration of the LinkedIn JS API SSO solution
at developer.linkedin.com (#a2). The presence of the non-
expiring user id of the victim in the browser history allows
an attacker to hijack the victim’s account. Another SP website
that appears in the Alexa top 10 e-commerce website category8
is also vulnerable to the same attack (#a1).
2) Attacks to different scenarios (NS): A known kind of
attack has been applied to a different MPWA scenario. By
applying the RA4 attack pattern, we were able to detect
a previously unknown attack in the CaaS scenario (#a3 of
Table IV). It must be noted that RA4 is inspired by an attack in
SSO scenario (see #6 of Table I), and our protocol-independent
approach allowed us to detect it in CaaS scenario. In particular,
we identiﬁed the attack in the payment checkout solution
offered by Stripe: the attack allows an attacker to impersonate
a SP by replaying its publicly available API key (DataKey
in Figure 4a) to obtain a payment token (T oken in Figure 4a)
from the victim user which is subsequently used to shop at
the impersonated SP’s online shop using the victim’s credit
card. As reported in Table IV, this attack is applicable to all
SPs implementing the Stripe checkout solution [14]. Similarly,
using our login CSRF attack pattern (inspired by attacks in
SSO), we tested the VvE scenario and discovered the following
(#a4):
•
login CSRF attack in the account registration process
of open.sap.com and six other SPs (all having Alexa
Global rank less than 500). One of the victim SP is a
popular video-sharing website. The account activation
link (ActLink of Figure 1c) issued by this website
not only activated the account, but also authenticated
the user without asking for credentials. An attacker
can create a fake account that looks similar to the
victim’s account and authenticate the victim to the
fake account (this can be done when victim visits
attacker’s website). As mentioned in [26], this enables
the attacker to keep track of the videos searched by
the victim and use this information to embarrass the
victim.
twitter.com sends an email to a user if he/she has
not signed into twitter for more than 10 days. The
URLs included in this email directly authenticates the
user without asking for credentials. This is a perfect
launchpad for performing login CSRF attacks. The
authors of [25] discovered a standard form-based login
•
8www.alexa.com/topsites/category/Top/Business/E-Commerce
12
CSRF attack against
twitter.com and demonstrated
how a login CSRF attack in twitter.com becomes a
login CSRF vulnerability on all of its client websites.
3) Attacks to different protocols (NP): A known kind of
attack is applied to different protocols or implementations
of the same scenario (SSO, CaaS, or VvE). Using the RA1
attack pattern which is inspired by the attacks against Google’s
SAML SSO (cf. #1 of Table I) and Facebook’s OAuth SSO
(cf. #2 of Table I), we discovered a similar issue in the
integration of the LinkedIn JS API SSO solution at INstant [7]
(#a6 ) and another SP (#a5) which has an Alexa US Rank9
less than 55,000. The vulnerable SPs authenticated the users
based on their email address registered at LinkedIn and not
based on their SP-speciﬁc user id.
We discovered login CSRF attacks in two SPs (#a8, both
having Alexa Global Rank less than 1000) integrating the
Instagram SSO solution and another SP (#a9 of Table IV,
with Alexa Australia rank10 less than 4200) integrating the
LinkedIn OAuth 2.0 SSO. The attack pattern that discovered
these attacks is inspired by login CSRF attacks against SPs
integrating the Browser Id SSO and Facebook SSO solutions
(see #7 and #8 of Table I).
Our attack pattern that tampers the redirect URI (inspired
by #9 of Table I) reported that in Pinterest’s implementation
of the Facebook SSO, it is possible to leak the OAuth 2.0
authorization code of the victim to the network attacker by
changing the protocol of the redirect URI from “https” to
“http” (#a10 of Table IV). This attack was possible due to
the presence of a Pinterest authentication server that is not
SSL protected. The same vulnerability was found in all SPs
implementing the “Login with PayPal” SSO solution [5] (#a11
of Table IV). However, in this case it was due to incorrect
validation of the redirect URI by the IdP PayPal.
4) Attacks to new SPs (NA): A known kind of attack
is applied to new SPs (still using
on a speciﬁc protocol
the same protocol offered by the same TTP). This shows
how our technique can cover the kinds of attacks that were
reported in literature. For instance, in [35], the authors mention
that a logical vulnerability in the 2Checkout integration in
osCommerce v2.3 enables an attacker to reuse the payment
status values of the paid order to bypass payment for future
orders (cf. #4 of Table I). We tested the 2Checkout integration
in the latest version of OpenCart (v2.1.0.1) and noticed that
our RA3 attack pattern discovered a similar attack (#a12 of
Table IV).
C. Manual Findings
In [36], the authors were able to manually discover exploit
opportunities in SSO integrations by analyzing the inference
results of the HTTP trafﬁc. Since our inference module is an
extension of [36], we were also able to manually identify two
attacks. We created one single attack pattern that generalizes
the XSS attack strategy reported in [22, §4]. While writing the
preconditions and the attacker strategy was straightforward,
the postcondition was more challenging. Indeed establishing
whether a XSS payload is successfully executed is a well-
known issue in the automatic security testing community. In
our preliminary experiments, we just relied on the tester to
inspect the results of the pattern and to determine whether
9http://www.alexa.com/topsites/countries/US
10http://www.alexa.com/topsites/countries/AU
#
a1
a2
a3
a4
Attack
Pattern
RA5
RA5
RA4
LCSRF
RA1
a5
RA1
a6
XSS
a7
LCSRF
a8
a9
LCSRF
a10 RedURI
a11 RedURI
a12 RA3
a13 XSS
TABLE IV: Attacks discovered
SP
TTP (& protocol)
Element(s)
Class
LinkedIn JS API SSO
LinkedIn JS API SSO
Stripe Checkout
Gmail
AlexaEcommerce-10
developer.linkedin.com
All SPs
twitter.com, open.sap.com,
other 6 SPs in Alexa Global Top 500
LinkedIn JS API SSO
AlexaUS-55000
LinkedIn JS API SSO
INstant
INstant
LinkedIn JS API SSO
AlexaGlobal-1000a, AlexaGlobal-1000b Log In With Instagram
AlexaAu-4200
pinterest.com
All SPs
OpenCart v2.1.0.1
AlexaGlobal-300
LinkedIn OAuth 2.0 SSO
Facebook SSO Auth.Code Flow RedU ri
PayPal Log In
RedU ri
Order number, Key
2Checkout
LinkedIn REST API SSO
AboutM e
U Id, Email
M emberId, AT oken
DataKey, T oken
ActLink
Email
AccessT oken
F name, LN ame
Code
Code
N
NS
NP
NA
the XSS payload was successfully executed. By doing so,
we uncovered a XSS vulnerability in the INstant website
[7] integrating the LinkedIn JS API SSO. Additionally, we
manually analyzed the data ﬂow between SP and TTP in SPs
integrating LinkedIn REST API SSO to identify tainted data
elements. We replaced the value of tainted elements with XSS
payloads and identiﬁed another XSS vulnerability in a SP that
has Alexa Global rank less than 300 (#a13).
D. Disclosures
Pinterest acknowledged our report about the redirect uri
ﬁxation attack and recently they updated their Facebook SSO
implementation. The redirect uri ﬁxation attack against all
SPs integrating the PayPal SSO was due to the deviation
from the OAuth 2.0 standard by PayPal. Even though PayPal
acknowledged our report, we did not win the bug bounty as
another security researcher simultaneously reported the attack.
However, none of the details regarding this attack was publicly
available and we have the screencast of the attack in our
website to support our claim. The attack against online shop-
ping websites integrating Stripe checkout was appreciated by
Stripe and they rewarded us for our ﬁndings. LinkedIn updated
the LinkedIn Developers website after receiving our report
about the attack by the browser history attacker. OpenSAP
acknowledged our report about the login CSRF attack in the
account registration process of open.sap.com and ﬁxed the
issue. We reported the XSS attacks we discovered against
the SPs integrating the LinkedIn SSO to the corresponding
vendors. LinkedIn was partially responsible for this attack
as it was possible to create a LinkedIn account and provide
XSS payload as the value of user information ﬁelds (e.g., ﬁrst
name, last name). However, it was the responsibility of SPs
to properly ﬁlter and encode the user information received
from LinkedIn. After notifying LinkedIn about the issue, we
noticed that they enforce restrictions in the usage of HTML
characters in input ﬁelds. Login CSRF is out of scope for
Twitter’s vulnerability rewards program [19]. Hence, we did
not win a bounty for our report. However, in Section V.F of
[25], it is mentioned that the authors discovered a standard
form-based login CSRF in the login form of twitter.com (which
13
was already known) and the authors explain how this causes a
login CSRF in SPs integrating Twitter’s SSO solution. Further
details about the disclosures are available at our website.
VII. RELATED WORK
A. Attack pattern-based Black-Box Techniques.
Wang et al. [37] conducted a detailed study of the security
of Cashier-as-a-Service based web stores. Inspired from [37],
Pellegrino et al. [32] proposed the idea of black-box detec-
tion of logical vulnerabilities in e-shopping applications. The
proposed approach creates an abstract model of the application
from the HTTP trafﬁc, identiﬁes the applicability of predeﬁned
behavioral patterns and generate test cases misusing these
patterns. It is interesting to note that the strategy behind all the
exploitable attacks discovered by [32] falls under the category
of replay attacks (precisely those covered by our RA2 and
RA3 attack patterns). We follow a different complementary
approach by neglecting the application model and directly
focusing on replay attacks (among others). We reckon that, in
principle, there could be control-ﬂow attacks that [32] could
detect and we may not (even if there is no experimental
evidence for this). However, it is also true that our attack
on Stripe would require not-so-obvious extensions of [32]:
consider malicious SP as we do and generate online test-cases
to deal with short-lived/one-time tokens.
Somorovsky et al. [34] conducted an in-depth analysis of
14 different SAML frameworks and developed a framework