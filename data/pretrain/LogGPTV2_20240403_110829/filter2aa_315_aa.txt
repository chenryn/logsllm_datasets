© 2012 The MITRE Corporation. All rights reserved.

Title: No More Hooks: Trustworthy Detection of Code Integrity Attacks
Authors: Xeno Kovah, Corey Kallenberg, Chris Weathers, Amy Herzog, Matthew Albin, John Bugajewski

---

### Security Software vs. Malicious Software

**Slide 1:**
- **Security Software:** This system is infected!
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 2:**
- **Security Software:** I don't like you. You are annoying.
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 3:**
- **Security Software:** I don't like you. You are annoying. *scribble* *scribble* *scribble*
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 4:**
- **Security Software:** Dear everyone: This system is A-OK!
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 5:**
- **Security Software:** That's what I'm talkin' 'bout (Bruce) Willis!
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 6:**
- **Security Software:** Checkmate *scan* *scan* *scan* Security Software is compromised!
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 7:**
- **Security Software:** Checkmate. You are similarly annoying! *scribble* *scribble* *scribble*
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 8:**
- **Security Software:** Security Software is OK. Checkmate *scan* *scan* *scan* Don't believe me! I'm compromised!
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 9:**
- **Security Software:** Checkmate. Are you kidding me? F*&@^ self-checking tricorder… This is ridiculous! *scribble* *scribble* *scribble*
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

**Slide 10:**
- **Security Software:** Security Software is OK. Checkmate. I…am…O…K…
- **Malicious Software:** © 2012 The MITRE Corporation. All rights reserved.

### Timing-Based Attestation (aka Software-Based Attestation)

- **Concept:** Based on the concept of Pioneer by Seshadri et al.
- **Assumptions:**
  - You can know the client hardware profile.
  - Your self-check is the most optimized implementation.
- **Implementation:**
  - Implemented from scratch and independently confirmed previous results.
  - Source code released for collaboration and improvement.
  - Available at: [http://code.google.com/p/timing-attestation](http://code.google.com/p/timing-attestation)

### How Does It Work?

- **Self-Check:** Hand-coded assembly to build a timing side-channel into its execution.
- **System Measurements:** Similar to those in memory integrity checking software like MS's PatchGuard, Mandiant's MIR, or HBGary's Active Defense.
- **Focus:** On the self-check, as this is unique to our approach.

### First Principles

1. **Objective:** Ensure that the code remains unchanged while running.
   - **Common Method:** Self-checksumming or using the `rdtsc` instruction.
   - **Problem:** An attacker can force the check to always succeed.

#### Original Code Example
```c
int main() {
    foo = Selfcheck();
    if (foo == 0x12341234) {
        DoSomething();
        return SUCCESS;
    } else {
        return FAILURE;
    }
}
```

#### Attacker-Modified Code
```c
int main() {
    foo = Selfcheck();
    foo = 0x12341234;
    if (foo == 0x12341234) {
        DoSomething();
        return SUCCESS;
    } else {
        return FAILURE;
    }
}
```

### Enhanced Approach

- **Nonce-Based Self-Check:**
  - Use a nonce to make the self-check a function of a variable value.
  - Control the execution environment for predictable runtime.
  - Evaluate tampering based on the self-checksum and runtime at a remote server.

#### New Code Outline
```c
int main() {
    int selfchecksum[6];
    nonce = WaitForMeasurementRequestFromVerifier();
    Selfcheck(&selfchecksum, nonce);
    SendResultsToVerifier(selfchecksum, nonce);
    results = DoSomething();
    SendResultsToVerifier(results);
    return SUCCESS;
}
```

### Nonce Considerations

- **No Single Correct Value:** Reduces the probability of precomputation attacks.
- **Large Nonce and Self-Checksum Size:**
  - 32-bit precomputation: 2^32 * 192 bits (96GB).
  - 64-bit implementation: 2^64 * 384 bits (768 Zetabytes).

### Indicators of Unmodified Code

- **Data Pointer (DP):** Points to the executing code range.
- **Code Bytes (*DP or [DP]):** Dereferenced data pointer.
- **Instruction Pointer (EIP):** Indicates the memory range of executing code.

#### Selfcheck Function
```c
void Selfcheck(int *selfchecksum, int nonce) {
    int *DP = GetMyCodeStart();
    int *end = GetMyCodeEnd();
    while (DP < end) {
        selfchecksum[0] += nonce;
        selfchecksum[1] += *DP;
        __asm { call $+5; pop eax; mov EIP, eax; }
        selfchecksum[2] += EIP;
        mix(selfchecksum);
        DP++;
    }
}
```

### Problems with Selfcheck

- **Parallelizability:** Attackers can add compute power from GPUs or other processors to counteract any incurred time.

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.