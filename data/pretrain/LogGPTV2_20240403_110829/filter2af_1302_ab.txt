回到`afp_over_dsi()`函数，在`while`循环中其会调用`dsi_stream_receive()`来读取对应的数据包。如果后续没有数据包了，则返回的`cmd`值为`0`，根据对应的`dsi->flags`，其会调用`afp_dsi_close()`
或
`dsi_disconnect()`，而这两个函数最终都会执行`dsi->proto_close(dsi)`。也就是说，在后续的正常流程中会使用函数指针`dsi->proto_close`，因此，通过溢出来修改该指针，即可劫持程序的控制流。
    void afp_over_dsi(AFPObj *obj)
    {
        /* ... */
        /* get stuck here until the end */
        while (1) {
            /* Blocking read on the network socket */
            cmd = dsi_stream_receive(dsi);   // (1)
            if (cmd == 0) {
                /* the client sometimes logs out (afp_logout) but doesn't close the DSI session */
                if (dsi->flags & DSI_AFP_LOGGED_OUT) {
                    LOG(log_note, logtype_afpd, "afp_over_dsi: client logged out, terminating DSI session");
                    afp_dsi_close(obj);
                    exit(0);
                }
                if (dsi->flags & DSI_RECONINPROG) {
                    LOG(log_note, logtype_afpd, "afp_over_dsi: failed reconnect");
                    afp_dsi_close(obj);
                    exit(0);
                }
                if (dsi->flags & DSI_RECONINPROG) {
                    LOG(log_note, logtype_afpd, "afp_over_dsi: failed reconnect");
                    afp_dsi_close(obj);
                    exit(0);
                }
                /* Some error on the client connection, enter disconnected state */
                if (dsi_disconnect(dsi) != 0)
                    afp_dsi_die(EXITERR_CLNT);
            }
            /* ... */
    void dsi_close(DSI *dsi)
    {
      /* server generated. need to set all the fields. */
      if (!(dsi->flags & DSI_SLEEPING) && !(dsi->flags & DSI_DISCONNECTED)) {
          dsi->header.dsi_flags = DSIFL_REQUEST;
          dsi->header.dsi_command = DSIFUNC_CLOSE;
          dsi->header.dsi_requestID = htons(dsi_serverID(dsi));
          dsi->header.dsi_code = dsi->header.dsi_reserved = htonl(0);
          dsi->cmdlen = 0; 
          dsi_send(dsi);
          dsi->proto_close(dsi);        // hijack control flow
          /* ... */
基于前面构造的数据包，在劫持控制流时，对应的上下文如下。可以看到，`R3`寄存器的值已被覆盖，`R4`和`R5`寄存器可控，同时`R0`和`R2`中包含指向`DSI`结构体的指针。
    ──────────────────────────────────────────────────────────────────────────────────── code:arm:ARM ────
          0x6a2cc   movw   r3,  #16764       ; 0x417c
          0x6a2d0   ldr    r3,  [r2,  r3]
          0x6a2d4   ldr    r0,  [r11,  #-8]  ; r0: points to dsi
    ●→    0x6a2d8   blx    r3
          0x6a2dc   ldr    r0,  [r11,  #-8]
          0x6a2e0   bl     0x112c4 
          0x6a2e4   sub    sp,  r11,  #4
          0x6a2e8   pop    {r11,  pc}
    ───────────────────────────────────────────────────────────────────────────── arguments (guessed) ────
    *0x61616161 (
       $r0 = 0x0e8498 → 0x0e1408 → 0x00000002,
       $r1 = 0x000001,
       $r2 = 0x0e8498 → 0x0e1408 → 0x00000002,
       $r3 = 0x61616161
    )
    ─────────────────────────────────────────────────────────────────────────────────────────── trace ────
    [#0] 0x6a2d8 → dsi_close()
    [#1] 0x1225c → afp_dsi_close()
    [#2] 0x13994 → afp_over_dsi()
    [#3] 0x116c8 → dsi_start()
    [#4] 0x3f5f8 → main()
    ──────────────────────────────────────────────────────────────────────────────────────────────────────
    gef?  i r
    r0             0xe8498             0xe8498
    r1             0x1                 0x1
    r2             0xe8498             0xe8498
    r3             0x61616161          0x61616161
    r4             0x58585858          0x58585858
    r5             0x43385858          0x43385858
    r6             0x7                 0x7
    r7             0xbec72f65          0xbec72f65
    r8             0x10a3c             0x10a3c
    r9             0x3e988             0x3e988
    r10            0xbec72df8          0xbec72df8
    r11            0xbec72c3c          0xbec72c3c
    r12            0x401e0edc          0x401e0edc
    sp             0xbec72c30          0xbec72c30
    lr             0x6fffc             0x6fffc
    pc             0x6a2d8             0x6a2d8 
程序`afpd`启用的缓解机制如下，同时设备上的`ASLR`
级别为`1`。`DSI`结构体在堆上分配，故发送的数据包均存在于堆上，因此需要基于该上下文，找到合适的`gadgets`完成利用。
    cq@ubuntu:~$ checksec --file ./afpd
        Arch:     arm-32-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8000)
通过对`afpd`程序进行分析，最终找到一个可用的`gadget`，如下。其中，`[R11-0x8]`中的值指向`DSI`结构体，整个执行的效果等价于`[dsi]
= [dsi + 0x2834]; func_ptr = [dsi + 0x2830];
func_ptr([dsi])`。因为`DSI`结构体的地址是固定的，且偏移`0x2834`处的内容可控，通过精心构造数据包，可实现执行`system(arbitrary_cmd)`的效果。
> 针对不同型号的设备，具体的上下文可能不同，利用可能更简单或更麻烦。
![
](https://images.seebug.org/content/images/2023/02/24e459b5-24ff-4b18-8cf9-33a3f026bdae.png-w331s)
最终效果如下。
![
](https://images.seebug.org/content/images/2023/02/1fdba209-1749-43ec-8765-57c982aaf321.gif-w331s)
### 小结
本文基于`R8500`型号设备，对其使用的`Netatalk`组件中存在的一个缓冲区溢出漏洞进行了分析。由于在处理接收的`DSI`数据包时，缺乏对数据包中某些字段的适当校验，在`dsi_writeinit()`中调用`memcpy()`时会出现缓冲区溢出。通过覆盖`DSI`结构体中的`proto_close`函数指针，可以劫持程序的控制流，并基于具体的漏洞上下文，实现了代码执行的目的。
### 相关链接
  * [SSD ADVISORY – NETGEAR R7800 AFPD PREAUTH](https://ssd-disclosure.com/ssd-advisory-netgear-r7800-afpd-preauth/)
  * [NETGEAR Open Source Code for Programmers (GPL)](https://kb.netgear.com/2649/NETGEAR-Open-Source-Code-for-Programmers-GPL)
* * *