这样的矛盾就让反射机制诞生了，对于控件自己应该处理的内容，当父窗口收到了相关消息时，重新发回给控件。
## MFC消息映射
MFC的消息处理其实本质上并没有什么不同，但是MFC做了一定的封装，掩盖了一部分消息的处理，使用起来比Windows消息处理更加简洁，这个封装起来的过程也就是消息映射。我们在vs上试着编辑一个mfc程序，当我们手动添加一个控件并指定了它的OnLButtonDown时，会自动为我们添加三处代码
    class CDrawView : public CView
    {
        afx_msg void OnLButtonDown(UINT nFlags, CPoint point);//afx_msg指的是消息响应函数，此处也就是函数的声明
    };
    ON_WM_LBUTTONDOWN()//此处定义了消息的映射宏
    void CDrawView::OnLButtonDown(UINT nFlags, CPoint point)
    {
        // TODO: 在此添加消息处理程序代码和/或调用默认值
        CView::OnLButtonDown(nFlags, point);//此处为消息响应函数的定义
    }
实际上mfc为每一个要处理消息的类都维护了一个静态的消息映射表，一种消息对应了一种消息处理函数指针，不同的类因为要处理的消息不同，所以维护的表的大小也有差异，当该类的实例需要处理消息时，只需要搜索该表寻找相应的函数即可。上面为我们添加的消息的映射宏就是实现了高效的维护消息映射表的功能，实际上它展开后就是一个具体的消息结构
    struct AFX_MSGMAP_ENTRY
    {
        UINT nMessage;   // windows message
        UINT nCode;      // control code or WM_NOTIFY code
        UINT nID;        // control ID (or 0 for windows messages)
        UINT nLastID;    // used for entries specifying a range of control id's
        UINT_PTR nSig;       // signature type (action) or pointer to message #
        AFX_PMSG pfn;    // routine to call (or special value)
    };
消息的处理过程在一下函数中完成
    LRESULT CWnd::WindowProc(UINT message, WPARAM wParam, LPARAM lParam)
    {
        // OnWndMsg does most of the work, except for DefWindowProc call
        LRESULT lResult = 0;
        if (!OnWndMsg(message, wParam, lParam, &lResult))
            lResult = DefWindowProc(message, wParam, lParam);
        return lResult;
    }
其中的关键函数也就是OnWndMsg
    BOOL CWnd::OnWndMsg(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)
    {
        LRESULT lResult = 0;
        union MessageMapFunctions mmf;
        mmf.pfn = 0;
        CInternalGlobalLock winMsgLock;
        // special case for commands
        if (message == WM_COMMAND)
        {
            if (OnCommand(wParam, lParam))
            {
                lResult = 1;
                goto LReturnTrue;
            }
            return FALSE;
        }
        // special case for notifies
        if (message == WM_NOTIFY)
        {
            NMHDR* pNMHDR = (NMHDR*)lParam;
            if (pNMHDR->hwndFrom != NULL && OnNotify(wParam, lParam, &lResult))
                goto LReturnTrue;
            return FALSE;
        }
    ...
    LDispatch:
        ASSERT(message pfn;
        switch (lpEntry->nSig)
        {
        default:
            ASSERT(FALSE);
            break;
        case AfxSig_l_p:
            {
                CPoint point(lParam);        
                lResult = (this->*mmf.pfn_l_p)(point);
                break;
            }
  * 检查消息是否有对应的处理函数声明和消息映射宏
  * 检查相应的消息响应函数，存在则执行
  * 检查基类的消息响应函数，存在则执行
当然这里只是简单的聊了一聊，关于MFC的消息映射实际上还有很多很多的门道，由于篇幅问题就不再说了，以后再做总结。最后还有个问题，同样是维护一张表，为什么不干脆就用c++的虚函数实现呢？其实答案很简单，上面也提到了，大家可以自己想一想。
## 实战病毒程序
由于实际分析一个病毒过程很繁琐，所以我们这里只说重点，其余的详细病毒行为不再赘述
###  病毒行为捕获
利用云沙箱、虚拟机等对病毒的行为进行测试
  * 在C:UsersxxxAppDataRoaminghao123释放hao123.exe，并创建桌面的快捷方式
  * 修改注册表、篡改首页
  * 自删除，但是云沙箱并没有检测到
###  逆向分析
通过od查询到了大量的可疑字符串，包括系统应用名、注册表项、网址等
看ida的反汇编结果，可以看到似乎病毒没有做什么恶意操作，虽然有几个call比较可疑，但点进去分析都没有发现和我们之前发现的恶意行为相关的代码，连之前发现的可以字符串都没有了踪迹，仿佛就是单单调用了几个常见的函数而已
紧接着看一看od的载入情况，可疑字符串的调用似乎仍然和程序没关系，仅仅是有代码而已，但我们多次实验后，可以在某个call找到了程序唯一的行为，并且这里我们总算是发现了可疑之处
程序调用了CreateWindowEx函数，但却将窗口的样式被设置成为WS_EX_TOOLWINDOW，查阅资料我们可以发现带有这个属性的窗口有以下特点：
  1. 不在任务栏显示。
  2. 不显示在Alt+Tab的切换列表中。
  3. 在任务管理器的窗口管理Tab中不显示。
换句话说，用户就基本上是发现不了病毒创建窗口这一操作的，那这又有什么用呢？
我们用od在此处下断点，仔细观察，发现当od执行到该命令时会产生特别奇怪的现象，之前发现的那个hao123的exe竟然出现了，并且也成功在桌面创建了快捷方式，这就很让人疑惑了，明明前面的函数调用完全没有涉及这方面的操作，这是怎么实现的呢？
实际上这就是通过消息机制调用回调函数实现的，因为回调函数是不需要我们去指定调用的时机，只要有相应的消息就会触发，病毒正是钻了这个空子，让我们第一时间无法发现函数的调用。
程序调用的CreateWindows会发送一个名为WM_CREATE的消息，而既然有这个消息了，那我们的程序就要对这个消息有所反馈，在CreateWindows这个消息发出后，我们的恶意程序就接受了这个消息，紧接着按照程序设定的原始方案执行恶意代码。
我们去找RegisterClass这个函数，这个函数就帮程序设置好了对应不同的消息要进行哪一些的处理。
利用od找到函数的参数中包含的消息的结构体，结构体的第三个成员处下断，我们就可以截获到处理各个消息的switch语句了。进入即可找到恶意代码的位置了
首先就是在此处修改了注册表，将目标网址添加了进去，从而实现了篡改主页的功能。
同样利用注册表修改了我们的收藏夹
这里调用了SHGetFolderPathW这个函数，这个函数在病毒中很常见，是用来获取系统的特殊路径的，也就是上面提到的C:UsersxxxAppDataRoaming，紧接着又将hao123和上面的路径连接起来，这样就组成了之前释放的恶意文件的存储路径
释放了另外一个恶意文件
创建快捷方式
到这里该消息的响应操作就执行完了，但程序不应该结束啊，因为我们还是没有找到自删除相关的操作啊。这里大胆发挥想象力，会不会和开始一样，也是通过某个消息机制实现的呢？
联系带程序非常诡异的自删除时间和之前那个用户“感受”不到的窗口，我们好像稍微有了一点点思路：既然开窗口有操作，那关闭窗口是不是也可以有操作呢？我们立刻着手寻找VM_DESTROY
果然，它释放了一个bat批处理文件，内容很简单，删除恶意程序，然后把自己也删除。