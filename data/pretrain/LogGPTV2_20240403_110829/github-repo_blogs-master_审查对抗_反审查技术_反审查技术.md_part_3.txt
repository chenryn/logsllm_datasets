用命令来操作就是：
```shell
gpg --decrypt --output plain_msg.txt  received_msg.txt
gpg --verify plain_msg.sig.txt plain_msg.data.txt
```
**step4**：在完成上面3步后，双方就可以使用对方的公钥加密内容进行通信了。在密件中还可以带上签名文件，帮助对方判断内容来源的真实性。
上面提到的都是对文本的加密，对文件的加解密则更简单。下面是具体命令，使用命令行解密时还会自动验签。
```shell
# 发信者对文件的加密
gpg --local-user [发信者ID] --recipient [接收者ID] --armor --sign --encrypt demo.txt
# 收信人对文件的解密，解密时会自动验证签名
gpg --decrypt --output data.txt msg.txt.asc
```
![2021-06-19_123535](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_123535.png)
#### 2.1.2 匿名邮箱
邮件服务提供商是另外一个必须考虑的因素，邮件数据不能托管给不具备中立性的商业公司，这样很容易发生数据失窃的问题。同时为了保证发信双方的安全，需要实名的邮箱显然是不能被考虑在内的。
##### 2.1.2.1 Protonmail
Protonmail是当前颇受高隐私需求群体青睐的邮件服务商，甚至连暗网中的不少人都使用该邮件进行交流。
官网：https://protonmail.com/
##### 2.1.2.2 YandexMail
俄罗斯的邮箱，注册页面可以不提供手机号。
官网：https://mail.yandex.com/
#### 2.1.3 内容安全
最后，对发件人发来的内容也需要有一定的警惕性，除非我们能确保发信方是绝对可信任的。对邮件的具体内容有以下几点需要重点考虑：
-**邮件图片**。邮件内加载的图片可被用于制作邮件探针，获取收方的真实公网IP。攻击者只需要搭建一个web服务器，当作图床服务器，收件方加载该图片时会向服务器发请求，从而泄露收件方的公网地址。
-**邮件链接**。邮件内的链接不要轻易点击，可能存在钓鱼或劫持的风险。
-**邮件附件**。大多数office恶意宏都是通过邮件内附件来欺骗用户打开运行并感染的。
### 2.2 浏览器安全
打开浏览器浏览网页的过程中实际上会存在很多的安全风险。这一节主要记录反审查场景下的浏览器安全。
#### 2.3.1 前端动态脚本
从web前端技术栈的角度来看，网站拥有者能通过JS等动态脚本在用户浏览器侧实现很多功能（如：客户端情报分析、控制浏览器、窃取cookie、0day利用等）。下面给出的这个网站能帮助我们了解浏览器究竟能泄露什么信息：
```text
https://panopticlick.eff.org
https://coveryourtracks.eff.org/kcarter?aat=1
https://wzyboy.im/post/1130.html
```
##### 2.3.1.1 NoScript
Firefox有一个可以称之为神器的插件，名叫NoScript。NoScript通过对网页资源的加载进行控制实现对浏览器客户端的信息保护，确保浏览器在受信任的站点运行动态内容。
![2021-06-20_002402](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-20_002402.png)
首次使用这个插件时可能比较难受，需要对访问的各种网站进行加载策略配置，等待对常见资源的策略清单收集的差不多的时候，使用将会变得比较容易。
![2021-06-20_122610](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-20_122610.png)
默认情况下，每当访问一个从未打开的网页都需要对网站资源进行配置，Noscript支持5种预置的访问策略控制，每种策略的资源加载种类也可以具体在Noscript的设置选项中进行配置。
![2021-06-20_120616](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-20_120616.png)
![2021-06-20_110322](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-20_110322.png)
NoScript还会贴心的提示当前页面屏蔽了多少动态对象的加载。
![2021-06-20_123216](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-20_123216.png)
##### 2.3.1.2 uBlock origin
uBlock是另一款FireFox上热门的隐私保护工具，支持对多种浏览器可能涉及的隐私问题的选项设置。
![2021-06-21_153748](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-21_153748.png)
工具的复杂度较NoScript要高一些，说实话本人并没怎么使用过。
![2021-06-21_154136](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-21_154136.png)
#### 2.3.2 流媒体泄露
实际上，对任何页面上可能会产生的udp报文而言，都可能在代理场景下产生泄漏问题。虽然socks5标准支持udp，但并非每一个socks5工具都支持代理udp，这就导致本地机器可能直接向目标设备发送udp报文。如果我们本身的tcp流量是经过代理的，这时udp流量便泄露了我们的真实IP。
比如不少流媒体协议，流媒体协议往往应用于视频、音频等需要大数据量的场景，为了传输速率，普遍基于面向非连接的UDP协议。历史上关于流媒体协议族泄露用户真实IP的报道与文章已经层出不穷了。比如，WebRTC是用于实时语音对话或视频对话的流媒体类的API，它默认使用UDP方式进行传输。
https://webrtc.org.cn/is-webrtc-safe/
#### 2.3.3 DNS请求泄露
当我们没配置DNSoverHTTPS或DNSoverSocks5时就会产生这种问题。正常来说我们访问一个网页，要先向DNS服务器发一个域名解析请求获得网站真实地址，之后再向真实设备发请求。如果目标域名是运营商的黑名单，那通过分析短时间内的发包请求可以关联出代理服务器的地址，如果进一步反向溯源的话可能会定位到我们，当然只是可能，具体能不能定位到取决于从公网逐渐向小网逐层深入时是不是固定IP，有没有数据包记录等等。
下图是Firefox的代理设置页面，如果开启了DNS over Socks5就能绕过GFW对DNS流量的劫持，将实际请求放在远端发送。反之就会引发DNS泄露问题，产生一定的问题。
![2021-06-21_152435](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-21_152435.png)
#### 2.3.4 证书安全
浏览器的证书安全常常被人忽略。简单来说，如果浏览器被导入了不可信证书，将无法感知到https协商过程出现证书调包问题。而通过证书调包，中间人可以实现对数据的篡改与监听，实际上Web安全中非常出名的Burpsuite工具就使用了这种原理，企业网中实现对员工的数据监控也是基于这一原理。
想要完全明白为什么会出现中间人问题，需要搞明白https网站的加密协商原理。HTTPS本质是HTTP套了一层加密，这套TLS/SSL加密最核心是实际上通过对称加密实现的。然而如何让浏览器客户端与服务器之间在公开网络中决定**使用什么样的对称加密算法**及**对称密钥的内容**是个比较棘手的问题。为了确保这些信息不为其他人所知，这里引入了非对称加密，非对称加密体系的核心时公钥与私钥，私钥用于签名与解密、公钥用于加密与验签。具体解决方案如下：浏览器客户端与服务器在商定对称加密的具体方式时由服务器告知浏览器客户端公钥，这个公钥是依附在一张证书中的，客户端使用这个公钥来加密指定的算法及密钥，服务器使用私钥解出这些内容，协商便基本完成。
基本协商过程就是这样，但是中间有点问题。网站服务器将公钥回复给浏览器客户端时，客户端需要想办法确认这个公钥到底是不是服务器的公钥，而对公钥身份的认证就要用到证书，这也是为什么公钥要依附在证书里发给浏览器客户端的原因。这时，对公钥的认证就转化为了对证书的认证。证书验证通常是个信任链传导问题，通俗来说，要检查一个证书是否可信，需要按照证书内提供的信息去询问给它签发证书的机构这本证书是否可信。证书就是这么一个东西，提供对公钥的信任背书。现代浏览器客户端内往往内置了大量的CA颁发机构，常见的各种https网站中的证书向上回溯时都可以回溯到这些CA颁发机构上，因此访问这些网站时不会跳出感叹号告诉你有安全风险。反之，一旦https协商过程中用到的证书的颁发机构不在范围内，就会跳出告警页面询问你是否添加例外。BurpSuite和大型企业为了实现对https流量的控制，会让浏览器导入一份已自己作为证书颁发机构的CA证书。当用户向web网站发起https请求时，它们将网站返回的证书替换成自己的证书，客户端使用被替换的证书后实际将与中间人进行协商，而后续中间人再与网站进行协商，进而完美的插入双方的通信过程而双方无法感知。
因此可以看出如果浏览器预制或被导入了攻击者的证书颁发机构CA证书，将会对隐私安全造成极大的安全风险。当然，不可否认的是想要切实的实施这种攻击，攻击复杂度是比较高的，攻击者需要想尽办法先搞定我们的浏览器，之后使用ARP欺骗在局域网或在流量路由转发中实施流量拦截才行。
##### 2.3.4.1 Firefox检查证书
方法一：在URL框中查看当前网页的证书信息，如果不是浏览器原生的证书，浏览器会给出相应的提示。
![2021-06-18_195547](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-18_195547.png)
方法二：“打开应用程序菜单”=>“隐私与安全”=>“证书”=>“查看证书”=>“证书颁发机构”
##### 2.3.4.2 Chrome检查证书
方法一：查看地址栏中的证书信息。
![image-20210618200241475](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/image-20210618200241475.png)
方法二："设置"=>"隐私设置和安全性"=>"安全"=>"管理证书"=>"受信任的根证书颁发机构"
#### 2.3.5 搜索引擎安全
搜索引擎通过获取搜索记录进行分析已经不是个秘密了，商业公司是要赚钱的，对搜索记录筛查、提取、分析进而用于广告投放，是这些搜索公司业务中比较重要的一部分。当这项技术通过账号与政府、运营商联合起来使用后就能用于精准定位。
下面给出一些比较注重用户隐私的搜索引擎，以及使用不安全搜索引擎时的安全设置。
##### 2.3.5.1 DuckDuckGo 
DuckDuckGo是一款互联网搜索引擎，它注重用户隐私避免个性化检索所致的数据收集问题。它与其它搜索引擎不同的地方在于其不会分析自己的用户、对所有使用同一组关键词的用户显示同样的结果。
**搜索地址：**https://duckduckgo.com/
##### 2.3.5.2 searx
DuckDuckGo是一款基于`Python`的完全开源免费搜索引擎平台，不会存储你的任何搜索信息它注重用户隐私避免个性化检索所致的数据收集问题。用户甚至可以在自己本地搭建。
**安装方式：**https://searx.github.io/searx/admin/installation.html
### 2.3 接入安全
#### 2.3.1 接入局域网
尽可能的考虑让计算机处于一个封闭的网络环境中，避免使用无线，且网络内的设备间除网关外不可互相访问。下面给出几个近源场景下的安全问题。
##### 2.3.1.1 无线连接历史泄露
如果某台设备成功连接过无线且设置了自动连接选项，那么当打开无线开关后电脑会自动尝试广播802.11 Probe 请求，这种无线帧含有本台电脑历史连接过的wifi ssid，通过记录网络内发出的各种Probe帧即可知道某台设备的历史连接记录，这可能导致一定的隐私问题。因此，在不可信的网络环境下进行接入时一定要关闭自己的无线开关或将自己的无线连接设置及时的清理掉。
![2021-06-18_214308](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-18_214308.png)
##### 2.3.1.2 mac地址修改
而在已经明确不得不将设备接入到不可信网络的情况下，必须要对mac地址进行修改。防止后续能够通过mac地址实现事件追踪。
**windows:**
k-mac（https://www.52pojie.cn/forum.php?mod=viewthread&tid=1275593）
**Linux:**
```shell
#接入网络前，输入以下命令
ifconfig eth0 down
ifconfig eth0 hw ether 00:0C:18:EF:FF:ED
ifconfig eth0 up
```
#### 2.3.2 流量代理
流量代理在使用过程有不少安全问题值得注意。
1.流量特征问题。加密的流量代理可以解决跨网络数据传输及中间设备对流量进行窃听阻断问题。然而代理技术与这些中间设备之间是一个矛盾对抗的关系，这些流量审查设备也在不断的升级学习，尝试提取加密流量的特征。GFW就是这样一种典型的设备（现在称之为基础设施应该更合适）。
2.流量泄露问题。日常使用代理的过程中，如果没有经过合理的配置，浏览器在访问某些web页面时会发生流量泄露的现象，这时我们将不走代理直接与目标进行交互，如果目标正好被重点监控，那么就可能通过过往流量反向回溯到我们的代理服务器，甚至我们本身。
关于使用代理达到绕过审查或单纯想要掩盖源IP的工具现在已经非常非常多了。这里先给几个精品文章，可以仔细品品。之后就能发现以往我们大多数人对所谓的socks5代理，加密代理等存在一定的认识误区，没有搞明白到底什么样的代理是经过流量加密的。