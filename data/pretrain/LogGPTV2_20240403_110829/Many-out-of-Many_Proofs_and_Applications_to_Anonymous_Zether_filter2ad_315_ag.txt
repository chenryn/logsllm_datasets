### Zether and Anonymous Zether: Overview and Performance

Zether is a privacy-preserving payment system that addresses issues such as "front-running" [6, §3.1] and replay protection, while also providing an efficient wallet. It features constant storage per user, which is automatically managed. 

Zether ensures transaction amount confidentiality but does not provide anonymity (i.e., hiding participants' identities) or deniability. An appendix [6, §D] suggests an approach to achieve anonymity, which we have implemented in our construction, Anonymous Zether. This new construction combines the attractive features of Zether with strong anonymity.

The key attributes of this section are summarized in Table I.

#### I. Performance

We now describe our implementation of Anonymous Zether, which is open-source and available at [github.com/benediamond/anonymous-zether](http://github.com/benediamond/anonymous-zether).

Surprisingly, Anonymous Zether is competitive in traditional efficiency measures (proving time, verification time, and proof size) with standalone cryptocurrencies like Zcash, Monero, and Quisquis. This is despite its additional advantages and the fact that it operates entirely within an Ethereum smart contract, a highly constrained computing environment.

Our implementation is fully functional for immediate use. It supports the generation and verification of proofs and includes a fully-featured, efficient wallet.

Each Anonymous Zether contract interoperates with an ERC-20-compliant token contract. Our client can either generate a new account or "mount" an existing one (using the provided private key). Mounting requires querying only 128 bytes from an untrusted full node and is completed in constant time, without scanning prior transactions. The client's "fund" and "burn" methods facilitate the transfer of ERC-20 tokens into and out of the Anonymous Zether contract's escrow pool. The "transfer" method encapsulates the entire process of constructing a statement, generating a proof, dispatching both to the contract, and updating the wallet's local account state if the transaction succeeds. It also asynchronously receives incoming transfers using Ethereum's "event" system.

Our web3-based wallet is written in JavaScript, with proving taking place in a Node.js module and verification in Solidity contracts. We use only native Solidity code, avoiding ad-hoc precompiles.

Table II provides online performance measurements. Each number next to "Tr" (i.e., "Transfer") indicates the size of the anonymity set used (including the actual sender and recipient). For typographical reasons, we suppress the O(·) notation in the bottom row, which records asymptotic behavior. Proving times were obtained on a standard MacBook Pro with a 2.6GHz Intel Core i7 processor. Verification times reflect the local EVM's evaluation of a read-only call to the verification contract. Proof size assumes 32-byte field elements and 64-byte (uncompressed) points, as required by Ethereum's precompiled contracts. Transaction size reflects the full Solidity ABI-encoded data payload, including both the statement and its proof. Gas usage includes not just verification but also relevant account maintenance associated with the Zether Smart Contract, incorporating EIP-1108.

#### Table I: Attributes of Various Anonymous Cryptocurrencies

| System        | Zcash | Monero | Lelantus | Quisquis | Basic Zether | Anon. Zether |
|---------------|-------|--------|----------|----------|--------------|--------------|
| Standard Assumptions and No Trusted Setup | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| Strong Anonymity | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| Deniability | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| Direct Payments w/o Out-of-Band Comm. | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| Full Node’s Storage is Constant Per User | ? | ✓ | ✓ | ✓ | ✓ | ✓ |
| Tx. Overhead Independent of Amt. of Funds Spent | ? | ✓ | ✓ | ✓ | ✓ | ✓ |
| Honest Transactions Necessarily Succeed | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| Efficient Wallet | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |

#### Table II: Transaction Benchmarks by Anonymity Set Size

| Anonymity Set | Prv. Time (ms) | Vf. Time (ms) | Prf. Size (bytes) | Tx. Size (bytes) | Gas Used (units) |
|---------------|-----------------|----------------|--------------------|------------------|-------------------|
| Tr (2)        | 820             | 45             | 1,152              | 1,380            | 2,323,693         |
| Tr (4)        | 1,618           | 68             | 2,048              | 2,628            | 4,798,095         |
| Tr (8)        | 1,754           | 80             | 2,624              | 3,460            | 5,626,028         |
| Tr (16)       | 1,942           | 100            | 3,200              | 4,548            | 7,306,703         |
| Tr (32)       | 2,478           | 152            | 3,776              | 6,148            | 10,890,953        |
| Tr (64)       | 3,530           | 265            | 4,352              | 8,772            | 18,690,516        |
| Tr (N)        | 5,987           | 502            | 4,928              | 13,444           | 36,152,558        |

In Table III, we compare our protocol to others along more traditional metrics. Zcash and Monero depend on the number of input and output UTXOs consumed and produced. We restrict comparisons to transactions where two (shielded) UTXOs are consumed and two are produced, with 10 mix-ins per UTXO in Monero. For fair comparison, we fix anonymity sets of size 16 in Quisquis and Anonymous Zether.

Additional factors complicate the comparison. Zcash, Monero, and Quisquis use compressed (33-byte) point representations, whereas Ethereum's precompiles—and hence Anonymous Zether—do not, inflating our transaction sizes. Additionally, our prover and verifier are written in JavaScript and Solidity, while Zcash, Monero, and Quisquis are written in C++ and Go, potentially inflating our prover and verifier times by an order of magnitude.

#### Table III: Direct Performance Comparisons

| System        | Proving Time (ms) | Verif. Time (ms) | Transaction Size (bytes) |
|---------------|--------------------|-------------------|-------------------------|
| Zcash         | 5,600              | 9                 | 2,757                   |
| Monero        | 982                | 46                | 2,543                   |
| Quisquis      | 471                | 72                | 26,060                  |
| Anonymous Zether | 2,478            | 170               | 6,148                   |

We stress that Zcash and Monero depend on the quantity of funds spent, whereas Quisquis and Anonymous Zether do not. For example, fixing N = 16, our transactions become smaller than Monero's when consuming 7 or more UTXOs (with 2 output UTXOs). Our proving time is faster than Zcash's when at least 2 Sapling notes are spent.

We further compare transaction sizes with Quisquis. Our full transactions feature 2N + 8 log(N) + 20 group elements and 2 log(N) + 10 field elements (plus an additional 196 bytes for Solidity ABI encoding). Quisquis (assuming t = 1 recipient) contains N + 39 field elements and 30N + 22 group elements. Using uncompressed point representations, this would result in total transaction sizes of 6.1 kB and 45.3 kB, respectively, for N = 16.

#### Acknowledgment

I would like to thank Markulf Kohlweiss and Michele Ciampi for their valuable discussions and suggestions.

#### Disclaimer

This paper was prepared for informational purposes by the Artificial Intelligence Research group of JPMorgan Chase & Co. and its affiliates ("J.P. Morgan"), and is not a product of the Research Department of J.P. Morgan. J.P. Morgan makes no representation and warranty whatsoever and disclaims all liability for the completeness, accuracy, or reliability of the information contained herein. This document is not intended as investment research or investment advice, or a recommendation, offer, or solicitation for the purchase or sale of any security, financial instrument, financial product, or service, or to be used in any way for evaluating the merits of participating in any transaction, and shall not constitute a solicitation under any jurisdiction or to any person, if such solicitation under such jurisdiction or to such person would be unlawful.

#### References

[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system.” 2008.
[2] D. Ron and A. Shamir, “Quantitative analysis of the full Bitcoin transaction graph,” in Financial Cryptography and Data Security (A.-R. Sadeghi, ed.), (Berlin, Heidelberg), pp. 6–24, Springer Berlin Heidelberg, 2013.
[3] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E. Tromer, and M. Virza, “Zerocash: Decentralized anonymous payments from Bitcoin,” in 2014 IEEE Symposium on Security and Privacy, pp. 459–474, 2014. Full version.
[4] S. Noether, A. Mackenzie, and the Monero Research Lab, “Ring confidential transactions,” Ledger, vol. 1, pp. 1–18, May 2016.
[5] P. Fauzi, S. Meiklejohn, R. Mercer, and C. Orlandi, “Quisquis: A new design for anonymous cryptocurrencies,” in Advances in Cryptology – ASIACRYPT 2019 (S. D. Galbraith and S. Moriai, eds.), Springer International Publishing, 2019.
[6] B. Bünz, S. Agrawal, M. Zamani, and D. Boneh, “Zether: Towards privacy in a smart contract world,” in International Conference on Financial Cryptography and Data Security, 2020. Full version.
[7] B. Bünz, L. Kiffer, L. Luu, and M. Zamani, “Flyclient: Super-light clients for cryptocurrencies,” in 2020 IEEE Symposium on Security and Privacy, pp. 928–946, 2020.
[8] E. Stefanov, M. V. Dijk, E. Shi, T.-H. H. Chan, C. Fletcher, L. Ren, X. Yu, and S. Devadas, “Path ORAM: An extremely simple oblivious RAM protocol,” Journal of the ACM, vol. 65, Apr. 2018.
[9] J. Groth and M. Kohlweiss, “One-out-of-many proofs: Or how to leak a secret and spend a coin,” in Advances in Cryptology – EUROCRYPT 2015 (E. Oswald and M. Fischlin, eds.), vol. 9057 of Lecture Notes in Computer Science, pp. 253–280, Springer Berlin Heidelberg, 2015.
[10] J. Bootle, A. Cerulli, P. Chaidos, E. Ghadafi, J. Groth, and C. Petit, “Short accountable ring signatures based on DDH,” in Computer Security – ESORICS 2015 (G. Pernul, P. Y A Ryan, and E. Weippl, eds.), vol. 9326 of Lecture Notes in Computer Science, pp. 243–265, Springer International Publishing, 2015.
[11] M. F. Esgin, R. Steinfeld, A. Sakzad, J. K. Liu, and D. Liu, “Short lattice-based one-out-of-many proofs and applications to ring signatures,” in