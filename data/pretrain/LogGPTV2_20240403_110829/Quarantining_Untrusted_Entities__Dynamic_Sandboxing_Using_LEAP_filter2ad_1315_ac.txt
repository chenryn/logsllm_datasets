### Implementation of KernelSec Domains in the Linux Operating System

We implemented an access matrix-based enforcement engine, named KernelSec Domains, within the Linux Operating System using the Linux Security Modules (LSM) framework [48]. The permissions in this system are stateless; the only state maintained at the high-level specification is the group memberships. KernelSec domains are generated automatically from a LEAP specification through an algorithm we call factoring [23]. These domains are designed to work seamlessly with LEAP, ensuring that group definitions, labels, users, and aspects are consistent between the two systems. An overview of our system is provided in Figure 3.

**Figure 3. Factoring LEAP Specifications into KernelSec Domains**

Due to space constraints, a detailed discussion of the KernelSec mechanisms is not possible here. We will highlight a few key issues.

#### 3.1. KernelSec Issues

##### 3.1.1 Aspects
KernelSec incorporates implicit permissions based on aspects, which extend POSIX's implicit permissions. For example, in POSIX, sending a signal from process \( p_1 \) to \( p_2 \) requires both processes to have the same UID or for the sender to be root. In KernelSec, it requires that \( p_1 \)'s aspect is greater than or equal to \( p_2 \)'s, refining the POSIX rules. This rule applies to all inter-process communication that POSIX restricts to the same user. Thus, a sandboxed process operating at a minimum aspect can only send signals to other processes sharing its sandbox (and hence its aspect).

##### 3.1.2 System Calls
Only one KernelSec-specific system call is required to support the sandbox semantics. A process can relabel an object by invoking the following syscall:
```c
relabel(objectName obj, label l)
```
This syscall relabels the object `obj` to `l`. For this call to be allowed, assuming the object's initial label is \( l_0 \), the domain must have the permission `relabel(l0, l)`.

##### 3.1.3 Domains
In KernelSec, domains define the privileges associated with a process. Additionally, KernelSec domains can specify actions to occur upon exercising a permission, such as changing privileges when reading a MAIL file (implementing dynamic information flow restrictions) and using a minimal aspect when sandboxing a process.

### 3.2. Performance

This section presents performance results from executing micro-benchmarks using the domains described above. We have started porting X11 applications to KernelSec, including xpdf, bash (the Bourne Again Shell), and Thunderbird. These applications cover most of the functionality described here. The performance overhead of KernelSec is negligible for these applications, so we focus on micro-benchmarks where the overhead is more noticeable.

We measured the elapsed times for the following operations:

- **Jailing Minimum Viewer on Read**: This transition occurs during a read operation and involves an aspect reduction followed by a domain transition. The time measured includes the actual read (of 1K bytes).
- **Minimum Viewer Invocation**: This performs a fork-exec of the minimum viewer, requiring a domain transition and various inode permission checks.
- **Client Application and Minimum Viewer Invocations**: This starts from the shell, performing a fork-exec of the client application followed by a fork-exec of the minimum viewer. This is essentially twice the work of the minimum viewer invocation and takes approximately twice the time.

The measurements reflect the entire sandboxing mechanism described. The overhead is modest, even in the microbenchmarks, with a few percent for larger operations. The minimum viewer read, which reads 1000 bytes and switches domains, has a modest overhead of 14.58%. When compared to executing xpdf, the increased overhead of 40,000 ticks is insignificant.

### 4. Related Work

Sandboxing is a form of isolation, which can be divided into the isolation of execution environments and the isolation of data (also known as information flow). We also address the use of dynamic mechanisms in authorization models.

#### Isolation
Isolation of execution environments is achieved through address space separation and restricted interfaces. Virtual Machines (VMs) like Xen [14], VMware [46], and UML [13] provide highly isolated environments. VMs are coarse-grained and static in resource sharing [36].

Finer-grained techniques can be implemented inside the kernel or via system call interposition. System call interposition techniques [20, 22, 29, 32, 18] are orthogonal to the access control model and have been used for creating sandboxes, intrusion detection, and selective privilege elevation. Kernel-based mechanisms are generally more efficient, while system call interposition mechanisms are easier to implement and more extensible.

Sandboxing provides protection at the process or process group level. Unlike VMs, sandboxes exist within an operating system and restrict the address space and interactions of sandboxed applications with the rest of the system. Sandboxed processes can communicate via networking but have limited visibility and effect outside the sandbox.

#### Information Flow
Our dynamic sandboxing is based on information flow techniques. Foundations were established by Bell-LaPadula [4] and Biba [7]. Asbestos [15] provides a DAC-based mechanism for information flow. Other models supporting information flow include RBAC [37] and EROS’s extended capability model [38]. These techniques do not change process-level labeling, which is necessary for dynamic sandboxing.

In subOS [21], objects from remote sources are tagged with an immutable sub-user ID. When such an object is read, permissions are reduced based on the sub-user's permissions.

#### Dynamic Mechanisms
Dynamic sandboxes have explicit mechanisms to reduce privileges on permission use and implicit mechanisms based on past reads. These mechanisms operate in the authorization system, not the user program, and thus cannot be bypassed. TE domain transitions occur only on exec and are not dynamic. KernelSec can implement groups, information flow, Chinese Wall [34], and dynamic separation of duty [40].

Many special-purpose mechanisms have been used for dynamic authorization, but they are less general than KernelSec’s dynamic mechanisms. In POSIX systems, the setuid-bit on files changes the process' privileges on exec [10]. In TE, domains change on exec, but this is not dynamic.