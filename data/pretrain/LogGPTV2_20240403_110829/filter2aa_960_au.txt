Any type that implements the BinaryMarshallable interface can control its 
own encoding. Unfortunately, it’s not as simple as just defining a few func-
tions on the Foo data type. After all, Go’s binary.Write() and binary.Read() 
methods, which you use for encoding and decoding binary data, don’t know 
anything about your arbitrarily defined interface. You need to create a 
marshal() and unmarshal() wrapper function, within which you inspect the 
data to determine whether the type implements the BinaryMarshallable inter-
face, as in Listing 6-3. (All the code listings at the root location of / exist 
under the provided github repo https://github.com/blackhat-go/bhg/.)
func marshal(v interface{}, meta *Metadata) ([]byte, error) {
    --snip-- 
    bm, ok := v.(BinaryMarshallable) u
    if ok {
        // Custom marshallable interface found.
        buf, err := bm.MarshalBinary(meta) v
        if err != nil {
            return nil, err
        }
        return buf, nil
    }
    --snip--
}
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    137
--snip--
func unmarshal(buf []byte, v interface{}, meta *Metadata) (interface{}, error) {
    --snip--
    bm, ok := v.(BinaryMarshallable) w
    if ok {
        // Custom marshallable interface found.
        if err := bm.UnmarshalBinary(buf, meta)x; err != nil {
            return nil, err
        }
        return bm, nil
    }
    --snip--
}
Listing 6-3: Using type assertions to perform custom data marshaling and unmarshaling (/ch-6/smb/smb 
/encoder/encoder.go)
Listing 6-3 details only a subsection of the marshal() and unmarshal() 
functions taken from https://github.com/blackhat-go/bhg/blob/master/ch-6/smb 
/smb/encoder /encoder.go. Both functions contain a similar section of code that 
attempts to assert the supplied interface, v, to a BinaryMarshallable variable 
named bm uw. This succeeds only if whatever type v is actually implements 
the necessary functions required by your BinaryMarshallable interface. If 
it succeeds, your marshal() function v makes a call to bm.MarshalBinary(), 
and your unmarshal() function x makes a call to bm.UnmarshalBinary(). At 
this point, your program flow will branch off into the type’s encoding and 
decoding logic, allowing a type to maintain complete control over the way 
it’s handled.
Forcing ASN.1 Encoding
Let’s look at how to force your Foo type to be ASN.1 encoded, while leaving 
other fields in your Message struct as-is. To do this, you need to define the 
MarshalBinary() and UnmarshalBinary() functions on the type, as in Listing 6-4.
func (f *Foo) MarshalBinary(meta *encoder.Metadata) ([]byte, error) {
    buf, err := asn1.Marshal(*f)u
    if err != nil {
        return nil, err
    }
    return buf, nil
}
func (f *Foo) UnmarshalBinary(buf []byte, meta *encoder.Metadata) error {
    data := Foo{}
    if _, err := asn1.Unmarshal(buf, &data)v; err != nil {
        return err
    }
    *f = data
    return nil
}
Listing 6-4: Implementing the BinaryMarshallable interface for ASN.1 encoding
前沿信安资讯阵地  公众号：i nf osrc
138   Chapter 6
The methods don’t do much besides make calls to Go’s asn1.Marshal() u 
and asn1.Unmarshal() v functions. You can find variations of these functions 
within the gss package code at https://github.com/blackhat-go/bhg/blob/master 
/ch-6/smb/gss/gss.go. The only real difference between them is that the gss 
package code has additional tweaks to make Go’s asn1 encoding function 
play nicely with the data format defined within the SMB spec. 
The ntlmssp package at https://github.com/blackhat-go/bhg/blob/master 
/ch-6/smb/ntlmssp/ntlmssp.go contains an alternative implementation of the 
MarshalBinary() and Unmarshal Binary() functions. Although it doesn’t demon-
strate ASN.1 encoding, the ntlmssp code shows how to handle encoding of an 
arbitrary data type by using necessary metadata. The metadata—the lengths 
and offsets of variable-length byte slices—is pertinent to the encoding pro-
cess. This metadata leads us to the next challenge you need to address.
Understanding Metadata and Referential Fields
If you dig into the SMB specification a little, you’ll find that some messages 
contain fields that reference other fields of the same message. For example, 
the fields—taken from the Negotiate response message—refer to the offset 
and length of a variable-length byte slice that contains the actual value:
SecurityBufferOffset (2 bytes): The offset, in bytes, from the 
beginning of the SMB2 header to the security buffer. 
SecurityBufferLength (2 bytes): The length, in bytes, of the 
security buffer.
These fields essentially act as metadata. Later in the message spec, you 
find the variable-length field within which your data actually resides:
Buffer (variable): The variable-length buffer that contains 
the security buffer for the response, as specified by Security 
BufferOffset and SecurityBufferLength. The buffer SHOULD 
contain a token as produced by the GSS protocol as specified 
in section 3.3.5.4. If SecurityBufferLength is 0, this field is 
empty and client-initiated authentication, with an authen-
tication protocol of the client’s choice, will be used instead 
of server-initiated SPNEGO authentication, as described in 
[MS-AUTHSOD] section 2.1.2.2.
Generally speaking, this is how the SMB spec consistently handles 
variable- length data: fixed-position length and offset fields depicting the 
size and location of the data itself. This is not specific to response messages 
or the Negotiate message, and often you’ll find multiple fields within a single 
message using this pattern. Really, anytime you have a variable-length 
field, you’ll find this pattern. The metadata explicitly instructs the message 
receiver on how to locate and extract the data. 
This is useful, but it complicates your encoding strategy because you 
now need to maintain a relationship between different fields within a 
struct. You can’t, for example, just marshal an entire message because 
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    139
some of the metadata fields—for example, length and offset—won’t be 
known until the data itself is marshaled or, in the case of the offset, all 
fields preceding the data are marshaled.
Understanding the SMB Implementation
The remainder of this subsection addresses some of the ugly details regard-
ing the SMB implementation we devised. You don’t need to understand this 
information to use the package. 
We played around with a variety of approaches to handle referential 
data, eventually settling on a solution that utilizes a combination of struc-
ture field tags and reflection. Recall that reflection is a technique through 
which a program can inspect itself, particularly examining things like its 
own data types. Field tags are somewhat related to reflection in that they 
define arbitrary metadata about a struct field. You may recall them from 
previous XML, MSGPACK, or JSON encoding examples. For example, 
Listing 6-5 uses struct tags to define JSON field names.
type Foo struct {
    A int    `json:"a"`
    B string `json:"b"`
}
Listing 6-5: A struct defining JSON field tags
Go’s reflect package contains the functions we used to inspect data 
types and extract field tags. At that point, it was a matter of parsing the tags 
and doing something meaningful with their values. In Listing 6-6, you can 
see a struct defined in the SMB package.
type NegotiateRes struct {
    Header
    StructureSize        uint16
    SecurityMode         uint16
    DialectRevision      uint16
    Reserved             uint16
    ServerGuid           []byte `smb:"fixed:16"`u
    Capabilities         uint32
    MaxTransactSize      uint32
    MaxReadSize          uint32
    MaxWriteSize         uint32
    SystemTime           uint64
    ServerStartTime      uint64
    SecurityBufferOffset uint16 `smb:"offset:SecurityBlob"`v
    SecurityBufferLength uint16 `smb:"len:SecurityBlob"`w
    Reserved2            uint32
    SecurityBlob         *gss.NegTokenInit
}
Listing 6-6: Using SMB field tags for defining field metadata (/ch-6/smb/smb/smb.go)
前沿信安资讯阵地  公众号：i nf osrc
140   Chapter 6
This type uses three field tags, identified by the SMB key: fixed u, 
offset v, and len w. Keep in mind that we chose all these names arbitrarily. 
You aren’t obligated to use a specific name. The intent of each tag is as follows:
•
fixed identifies a []byte as a fixed-length field of the provided size. In 
this case, ServerGuid is 16 bytes in length.
•
offset defines the number of bytes from the beginning of the struct 
to the first position of a variable-length data buffer. The tag defines 
the name of the field—in this case, SecurityBlob—to which the offset 
relates. A field by this referenced name is expected to exist in the 
same struct.
•
len defines the length of a variable-length data buffer. The tag defines 
the name of the field—in this case, SecurityBlob, to which the length 
relates. A field by this referenced name should exist in the same struct.
As you might have noticed, our tags allow us not only to create rela-
tionships—through arbitrary metadata—between different fields, but also 
to differentiate between fixed-length byte slices and variable-length data. 
Unfortunately, adding these struct tags doesn’t magically fix the problem. 
The code needs to have the logic to look for these tags and take specific 
actions on them during marshaling and unmarshaling. 
Parsing and Storing Tags 
In Listing 6-7, the convenience function, called parseTags(), performs the 
tag-parsing logic and stores the data in a helper struct of type TagMap.
func parseTags(sf reflect.StructFieldu) (*TagMap, error) {
    ret := &TagMap{
        m:   make(map[string]interface{}),
        has: make(map[string]bool),
    }
    tag := sf.Tag.Get("smb")v
    smbTags := strings.Split(tag, ",")w
    for _, smbTag := range smbTagsx {
        tokens := strings.Split(smbTag, ":")y
        switch tokens[0] { z
        case "len", "offset", "count":
            if len(tokens) != 2 {
                return nil, errors.New("Missing required tag data. Expecting key:val")
            }
            ret.Set(tokens[0], tokens[1])
        case "fixed":
            if len(tokens) != 2 {
                return nil, errors.New("Missing required tag data. Expecting key:val")
            }
            i, err := strconv.Atoi(tokens[1])
            if err != nil {
                return nil, err
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    141
            }
            ret.Set(tokens[0], i) {
    }
Listing 6-7: Parsing structure tags (/ch-6/smb/smb/encoder/encoder.go)
The function accepts a parameter named sf of type reflect.StructField u, 
which is a type defined within Go’s reflect package. The code calls sf.Tag 
.Get("smb") on the StructField variable to retrieve any smb tags defined on the 
field v. Again, this is an arbitrary name we chose for our program. We just 
need to make sure that the code to parse the tags is using the same key as 
the one we used in our struct’s type definition. 
We then split the smb tags on a comma w, in case we need to have 
multiple smb tags defined on a single struct field in the future, and loop 
through each tag x. We split each tag on a colon y—recall that we used 
the format name:value for our tags, such as fixed:16 and len:SecurityBlob. 
With the individual tag data separated into its basic key and value pairing, 
we use a switch statement on the key to perform key-specific validation 
logic, such as converting values to integers for fixed tag values z. 
Lastly, the function sets the data in our custom map named ret {. 
Invoking the parseTags() Function and Creating a reflect.StructField Object
Now, how do we invoke the function, and how do we create an object of 
type reflect.StructField? To answer these questions, look at the unmarshal() 
function in Listing 6-8, which is within the same source file that has our 
parseTags() convenience function. The unmarshal() function is extensive, so 
we’ll just piece together the most relevant portions. 
func unmarshal(buf []byte, v interface{}, meta *Metadata) (interface{}, error) {
    typev := reflect.TypeOf(v) u
    valuev := reflect.ValueOf(v) v
    --snip--
    r := bytes.NewBuffer(buf)
    switch typev.Kind() { w
    case reflect.Struct:
        --snip--
    case reflect.Uint8:
        --snip--
    case reflect.Uint16: 
        --snip--
    case reflect.Uint32: 
        --snip--
    case reflect.Uint64: 
        --snip--
    case reflect.Slice, reflect.Array: 
        --snip--
    default:
        return errors.New("Unmarshal not implemented for kind:" + typev.Kind().String()), nil
    }
前沿信安资讯阵地  公众号：i nf osrc
142   Chapter 6
    return nil, nil
}
Listing 6-8: Using reflection to dynamically unmarshal unknown types (/ch-6/smb/smb /encoder/encoder.go)
The unmarshal() function uses Go’s reflect package to retrieve the type u 
and value v of the destination interface to which our data buffer will be 
unmarshaled. This is necessary because in order to convert an arbitrary 
byte slice into a struct, we need to know how many fields are in the struct 
and how many bytes to read for each field. For example, a field defined as 
uint16 consumes 2 bytes, whereas a uint64 consumes 8 bytes. By using reflec-
tion, we can interrogate the destination interface to see what data type it 
is and how to handle the reading of data. Because the logic for each type 
will differ, we perform a switch on the type by calling typev.Kind() w, which 
returns a reflect.Kind instance indicating the kind of data type we’re work-
ing with. You’ll see that we have a separate case for each of the allowed 
data types. 
Handling Structs
Let’s look at the case block, in Listing 6-9, that handles a struct type, since 
that is a likely initial entry point.
case reflect.Struct:
        m := &Metadata{ u
            Tags:       &TagMap{},
            Lens:       make(map[string]uint64),
            Parent:     v,
            ParentBuf:  buf,
            Offsets:    make(map[string]uint64),
            CurrOffset: 0,
    }
    for i := 0; i < typev.NumField(); i++ { v
        m.CurrField = typev.Field(i).Namew
        tags, err := parseTags(typev.Field(i))x
        if err != nil {
            return nil, err
        }
        m.Tags = tags
        var data interface{}
        switch typev.Field(i).Type.Kind() { y
            case reflect.Struct:
                data, err = unmarshal(buf[m.CurrOffset:], valuev.Field(i).Addr().Interface(), m)z
            default:
                data, err = unmarshal(buf[m.CurrOffset:], valuev.Field(i).Interface(), m){
        }
        if err != nil {
            return nil, err
        }
        valuev.Field(i).Set(reflect.ValueOf(data)) |
    }
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    143
    v = reflect.Indirect(reflect.ValueOf(v)).Interface()
    meta.CurrOffset += m.CurrOffset }
    return v, nil
Listing 6-9: Unmarshaling a struct type (/ch-6/smb/smb/encoder/encoder.go)
The case block begins by defining a new Metadata object u, a type used 
to track relevant metadata, including the current buffer offset, field tags, 
and other information. Using our type variable, we call the NumField() 
method to retrieve the number of fields within the struct v. It returns 
an integer value that acts as the constraint for a loop. 
Within the loop, we can extract the current field through a call to the 
type’s Field(index int) method. The method returns a reflect.StructField 
type. You’ll see we use this method a few times throughout this code snippet. 
Think of it as retrieving an element from a slice by index value. Our first 
usage w retrieves the field to extract the field’s name. For example, Security 
BufferOffset and SecurityBlob are field names within the NegotiateRes struct 
defined in Listing 6-6. The field name is assigned to the CurrField property 
of our Metadata object. The second call to the Field(index int) method is 
inputted to the parseTags() function x from Listing 6-7. We know this func-
tion parses our struct field tags. The tags are included in our Metadata object 
for later tracking and usage. 