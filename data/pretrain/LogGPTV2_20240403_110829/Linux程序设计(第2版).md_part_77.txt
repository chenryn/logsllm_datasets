---
## Page 402
384Linux程序设计
只调用这个函数一次。我们在第7章里的做法是这样的：在第一次调用搜索函数的时候把
"*first_call_ptr”设置为true，它将返问第一个匹配；搜索函数后续的每--次调用都要把
"*firs_call_ptr”设置为false，面返回的是其他匹配
既然我们把整个软件划分为两个进程，我们在服务器里就不能再让搜索每次只前进一个数
据项了、因为在前一次搜索正在进行的时候，可能会有另外一个客户请求服务器开始另外一次
搜索。我们不能把米自不同客户的每-一个搜索请求的上下文（即搜索操作当时到达的位置）都
分别保存在服务器端，因为在搜索进行到半路的时候一比如用户已经找到了想找的CD唱盘数
据、或者客户“摔倒”时，用户有可能会在客户端停止这次搜索。
我们可以改变搜索动作的执行方式，也可以象我们这里选择的那样把这些复杂的问题隐藏
到接口例程里去。我们的做法是：安排服务器把一次搜索的可能匹配全部都找出来，把它们保
存到客户端的一个临时文件里去，同一次查询的后续结果将在客户端处理。
我们原来的软件在使用中与SQL数据床的做法相类似，可以用一个光标在中间结果
上移动。如果一次SQL查询产生了多个查询结果，那么在如何返回这些查询结果的问题
上，这类系统也需要面对我们刚才遇见的设计快择：
动手试试：搜索数据库
1）这个函数实际上并不是很复杂，但看上去却让人眼花缭乱。它调用了三个管道函数（管
道函数将在下小节介绍），分别是send_mess_to_server、start_resp_from_server和read_resp
_from_server，如下所示：
cdc_entry search_cdc_entry(const char *cd_catalog_ptr. int *first_call_ptr)
message_db_t mess_send;
static FILE *work_file - (FItS *)0;
static int entries_matching = 0:
cdc_entry ret_val;
ret_val.catalog
include 
#include 
tinclude 
#include 
#include 
#include 
#include 
#include 
#include 
tinclude *cliserv.h*
#include *cd_data.h*
int save_errno;
static int server_running = 1;
static void process_cormand(const message_db_t ness_corumand) ;
void catch_signals()
server_running = 0;
}
2）现在来到main函数面前。它先检查信号捕捉器例程能否正常工作，然后程序检查用户是
否在命令行上输人了“i”选项。如果有这个选项，它就创建一个新的数据库。如果在调用
cd_dbm.c文件里的database_initilize函数时失败了，就给出一条出错信息。如果一切正常并且服
务器也运转起来，来自客户的任何请求就会被送人process_command函数。我们马上就要讲到这
个函数了。
int main(int argc, char *argv[1)(
struct sigaction new_action, oid_action;
int database_init_type = 0:
new_action.sa_handler = catch_sigmals;
sigenptyset (snew_action.sa_mask) :
new_action.sa_flags =0;
&new_action,&old_action}!= 0) 11
(sigaction(SIGHUP,
&new_action,&old_action1!= 0)
fprintf(stderr,
(sigaction(SIGreRM,&new_action, &old_action) != 0}}(
exit(EXIT_PAILURE):
*Server startup error,signal catching failed\n*}:
if (argc > 1) {
if (strncnp(*-i*,*argv, 2} sr 0) database_init_type = 1;
argv++;
if (:database_initialize(database_init_type)){
fprintf(stderr,*Server error:-\
exit(EXIT_FAILURE)；
could not initialize database\n*):
if (1server_starting(})exit (BXIT_FAILURE);
while(server_running)_(
if (read_request_from_client (&mess_cornand)){
}else{
process_cormand (mess_command) :
if(server_running) fprintf(stderr, *Server ended - can not \
read pipe\n*):
加入java编程群：524621833
---
## Page 405
第12章进程间通信：管道
387
server_running = 0;
}/*while */
server_ending();
exit (EXIT_SUCCESS):
3)任何客户消息都将被送人process_command函数，在那里它们被馈人一个case语句，进而
调用ed_dbm.c文件中相应的函数。
static void process_command(const message_db_t comm)
dsa1 1qp6esso
int first_time = 1;
resp = comn; /* copy command back, then change resp as required */
if (!start_resp_to_client (resp)1(
fprintf(stderr,*Server Warning:-)
start_resp_to_client ed failed\n*, resp.client_pid);
return:
1
resp.response = r_success:
memset(resp.error_text,
0=oa
'\o′, sizeof(resp.error_text));
switch(resp.request)(
case s_create_new_database:
if (1database_initialize(1)) resp.response =r_failure:
case s_get_cdc_entry:
break;
resp.cdc_entry_data =
break;
get_cdc_entry(comn.cdc_entry_data.catalog):
case s_get_cdt_entry:
resp.cdt_entry_data
get_cdt_entry(comm.cdt_entry_data.catalog,
bresk;
comm.cdt_entry_data.track_no):
case s_add_cdc_entry:
if (!add_cdc_entry(comm.cdc_entry_data))resp.response =
r_taiivre;
break;
if (tadd_edt_entry(coom.cdt_entry_data)) resp.response =
break:
r_failure;
case o_del
if(!del_cdc_entry(comm.cdc_entry_data.catalogl)resp.response
_cdc_entry:
=r_failure;
break;
if(!del_cdt_entry(comm.cdt_entry_data.catalog,
break;
do(
resp.cdc_entry_data =
search_cdc_entry(conm.cdc_entry_data.catalog.
if （xesp.cdc_entry_data.catalog[0]10){
sfirst_tine):
if (1send_resp_to_client(resp)){
resp.response = r_success;
break;
}else(
加入java编程群
：524621833
---
## Page 406
388
Linux程序设计
resp.response = r_find_no_more;
}while (resp.response ==
1
default:
break:
resp.response = r_failure;
)/*switch */
break;
sprintf(resp.error_text,*Command failed:\n\tesn*
strerror(save_errno) }:
if （!send_resp_to_client{resp))(
fprintf(stderr,
failed to respond to ed\n*. resp.client_pid):
*Server Hazning:-\
end_resp_to_client():
returG;
在继续介绍管道的具体实现之前，我们先来看看在客户和服务器进程之间传递数据时各种
事件发生的先后次序。图12-9给出了客户进程和服务器进程在各自启动之后，双方在处理命令
和数据时的循环情况。
服务器启动
客户启动
客户读用户
命令
客户发送数据
服务券接收
数据
服务器处理
数据
服务器返国
客户读数据
数据
客户显示数据
图12-9
加入jaVa编程群：524621833
---
## Page 407
第12章进程间通信：管道
68
具体实现要比这个示意图中给出的情况稍微复杂一些，因为在查询操作中，客户只向服务