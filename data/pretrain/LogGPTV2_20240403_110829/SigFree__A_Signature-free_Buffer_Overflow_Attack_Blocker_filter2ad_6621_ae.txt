40
90 100
60
70
80
(a)
Figure 12: Performance impact of SigFree on Apache HTTP Server
(b)
7 Discussions
7.1 Robustness to Obfuscation
Most malware detection schemes include two-stage
analysis. The ﬁrst stage is disassembling binary code
and the second stage is analyzing the disassembly re-
sults. There are obfuscation techniques to attack each
stage [19, 38] and attackers may use them to evade de-
tection. Table 1 shows that SigFree is robust to most of
these obfuscation techniques.
Obfuscation in The First Stage Junk byte insertion
is one of the simplest obfuscation against disassembly.
Here junk bytes are inserted at locations that are not
reachable at run-time. This insertion however can mis-
lead a linear sweep algorithm, but can not mislead a
recursive traversal algorithm [33], which our algorithm
bases on.
Opaque predicates are used to transform uncondi-
tional jumps into conditional branches. Opaque predi-
cates are predicates that are always evaluated to either
true or false regardless of the inputs. This allows an ob-
fuscator to insert junk bytes either at the jump target or
in the place of the fall-through instruction. We note that
opaque predicates may make SigFree mistakenly inter-
pret junk byte as executable codes. However, this mis-
take will not cause SigFree to miss any real malicious
instructions. Therefore, SigFree is also immune to ob-
fuscation based on opaque predicates.
Obfuscation in The Second Stage Most of the
second-stage obfuscation techniques obfuscate the be-
haviors of a program; however, the obfuscated programs
still bear characteristics of programs. Since the pur-
pose of SigFree is to differentiate executable codes and
random binaries rather than benign and malicious exe-
cutable codes, most of these obfuscation techniques are
ineffective to SigFree. Obfuscation techniques such as
instruction reordering, register renaming, garbage inser-
tion and reordered memory accesses do not affect the
number of calls or useful instructions which our schemes
Disassembly
stage
Analysis
stage
SigFree
Obfuscation
Yes
Junk byte insertion
Yes
Opaque predict
partial
Branch function
Scheme 1
Obfuscation
Yes
Instruction reordering
Yes
Register renaming
Yes
Garbage insertion
No
Instruction replacement
Equivalent funcationality
No
Reordered memory accesses Yes
Scheme 2
Yes
Yes
Yes
Yes
Yes
Yes
Table 1: SigFree is robust to most obfuscation
are based on. By exploiting instruction replacement and
equivalent functionality, attacks may evade the detection
of Scheme 1, but cannot evade the detection of Scheme
2.
7.2 Limitations
SigFree also has several limitations. First, SigFree
cannot fully handle the branch-function based obfusca-
tion, as indicated in Table 1. Branch function is a func-
tion f (x) that, whenever called from x, causes control
to be transferred to the corresponding location f (x). By
replacing unconditional branches in a program with calls
to the branch function, attackers can obscure the ﬂow of
control in the program. We note that there are no gen-
eral solutions for handling branch function at the present
state of the art.
With respect to SigFree, due to the obscurity of the
ﬂow of control, branch function may cause SigFree to
break the executable codes into multiple instruction se-
quences. Nevertheless, it is still possible for SigFree
to ﬁnd this type of buffer overﬂow attacks as long as
SigFree can still ﬁnd enough push-calls or useful instruc-
tions in one of the distilled instruction sequences.
Second, the executable shellcodes could be written in
alphanumeric form [45]. Such shellcodes will be treated
as printable ASCII data and thus bypass our analyzer.
USENIX Association
Security ’06: 15th USENIX Security Symposium
237
By turning off the ASCII ﬁlter, Scheme 2 can success-
fully detect alphanumeric shellcodes; however, it will in-
crease unnecessary computational overhead. It therefore
requires a slight tradeoff between tight security and sys-
tem performance.
Finally, the current implementation of SigFree cannot
detect malicious code which consists of fewer useful in-
structions than current threshold 15. Figure 13 shows a
possible evasion which has only 7 useful instructions for
a decryption routine. One solution to catch this evasion
is to use a comprehensive score rather than the absolute
number of useful instructions as the threshold. For ex-
ample, we may give larger weights to instructions that
are within a loop because most decryption routines con-
tain loops. This approach, however, may introduce some
false positives, which we will report in our future work.
00000000: push 0x47
00000002: pop ecx
00000003: call 0x08
00000008: pop esi
00000009: xor [dword ds:esi+0x0d], 0xc2122b7a
00000010: sub esi, -0x04
00000013: loopd short 0x09
Figure 13: A decryption routine with 7 useful instructions.
The ﬁrst two instructions are used to set the initial value for
loop counter ecx. The next two instructions are used to acquire
the value of EIP (instruction pointer register). The last three
instructions form the decryption loop.
7.3 Application-Speciﬁc Encryption Han-
dling
The proxy-based SigFree could not handle encrypted
or encoded data directly. A particular example is SSL-
enabled web server. Enhancing security between web
clients and web servers by encrypting HTTP messages,
SSL also causes the difﬁculty for out-of-box malicious
code detectors.
To support SSL functionality, an SSL proxy such as
Stunnel [6] (Figure 14) may be deployed to securely
tunnel the trafﬁc between clients and web servers.
In
this case, we may simply install SigFree in the machine
where the SSL proxy is located. It handles the web re-
quests in cleartext that have been decrypted by the SSL
proxy. On the other hand, in some web server appli-
cations, SSL is implemented as a server module (e.g.,
mod ssl in Apache). In this case, SigFree will need to
be implemented as a server module (though not shown
in Figure 14), located between the SSL module and the
WWW server. We notice that most popular web servers
allow us to write a server module to process requests and
specify the order of server modules. Detailed study will
be reported in our future work.
Internet
Port 80
Proxy-based
Sigfree
WWW
Port 80
Port 443
SSL
proxy
Firewall
Figure 14: SigFree with a SSL proxy
Web Server
7.4 Applicability
So far we only discussed using SigFree to protect web
servers.
It is worth mentioning that our tool is also
widely applicable to many programs that are vulnera-
ble to buffer overﬂow attacks. For example, the proxy-
based SigFree may be used to protect all internet services
which do not permit executable binaries to be carried in
requests, e.g., database servers, email servers, name ser-
vices, and so on. We will investigate the deployment is-
sue in our future work.
In addition to protecting severs, SigFree can also pro-
vide ﬁle system real-time protection. Buffer overﬂow
vulnerabilities have been found in some famous applica-
tions such as Adobe Acrobat and Adobe Reader [5], Mi-
crosoft JPEG Processing (GDI+) [1], and WinAmp [8].
This means that attackers may embed their malicious
code in PDF, JPEG, or mp3-list ﬁles to launch buffer
overﬂow attacks. In fact, a virus called Hesive [7] was
disguised as a Microsoft Access ﬁle to exploit buffer
overﬂow vulnerability of Microsoft’s Jet Database En-
gine. Once opened in Access, infected .mdb ﬁles take
advantage of the buffer overﬂow vulnerability to seize
control of vulnerable machines. If mass-mailing worms
exploit these kinds of vulnerabilities, they will become
more fraudulent than before, because they may appear as
pure data-ﬁle attachments. SigFree can be used alleviate
these problems by checking those ﬁles and email attach-
ments which should not include any code.
If the buffer being overﬂowed is inside a JPEG or GIF
system, ASN.1 or base64 encoder, SigFree cannot be di-
rectly applied. Although SigFree can decode the pro-
tected ﬁle according to the protocols or applications it
protects, more details need to be studied in the future.
8 Conclusion
We proposed SigFree, a realtime, signature free, out-
of-the-box blocker that can ﬁlter code-injection buffer
overﬂow attack messages, one of the most serious cy-
ber security threats, to various Internet services. SigFree
does not require any signatures, thus it can block new,
unknown attacks. SigFree is immunized from most
238
Security ’06: 15th USENIX Security Symposium
USENIX Association
attack-side code obfuscation methods, good for econom-
ical Internet wide deployment with little maintenance
cost and negligible throughput degradation, and can also
handle encrypted SSL messages.
Acknowledgments We would like to thank our shep-
herd Marc Dacier and the anonymous reviewers for their
valuable comments and suggestions. We are grateful to
Yoon-Chan Jhi for helpful suggestions. We also thank
the members of Penn State Cyber Security Lab for col-
lecting real traces. The work of Xinran Wang and Sen-
cun Zhu was supported in part by Army Research Ofﬁce
(W911NF-05-1-0270) and the National Science Foun-
dation (CNS-0524156); the work of Chi-Chun Pan and
Peng Liu was supported in part by NSF CT-3352241.
References
[1] Buffer overrun in jpeg processing (gdi+) could allow code execu-
tion (833987). http://www.microsoft.com/technet/security/bulle-
tin/MS04-028.mspx
[2] Fnord snort preprocessor. http://www.cansecwest.com/spp fnord.c.
[3] Intel ia-32 architecture software developer’s manual volume 1:
Basic architecture.
[4] Metasploit project. http://www.metasploit.com.
[5] Security advisory: Acrobat and adobe reader plug-in buffer over-
ﬂow. http://www.adobe.com/support/techdocs/321644.html.
[6] Stunnel – universal ssl wrapper. http://www.stunnel.org.
[7] Symantec security response: backdoor.hesive.
http://securityresponse.symantec.com/avcenter/venc/data/
backdoor.hesive.html
[8] Winamp3 buffer overﬂow. http://www.securityspace.com/ smy-
secure/catid.html?id=11530.
[9] Pax documentation.
http://pax.grsecurity.net/docs/pax.txt,
November 2003.
[10] BARATLOO, A., SINGH, N., AND TSAI, T. Transparent run-time
defense against stack smashing attacks. In Proc. 2000 USENIX
Technical Conference (June 2000).
[11] BARRANTES, E., ACKLEY, D., PALMER, T., STEFANOVIC, D.,
AND ZOVI, D. Randomized instruction set emulation to disrupt
binary code injection attacks.
In Proceedings of the 10th ACM
conference on Computer and communications security (October
2003).
[12] BERNERS-LEE, T., MASINTER, L., AND MCCAHILL, M. Uni-
form Resource Locators (URL). RFC 1738 (Proposed Standard).
Updated by RFCs 1808, 2368, 2396, 3986.
[13] BHATKAR, S., SEKAR, R., AND DUVARNEY, D. C. Efﬁcient
techniques for comprehensive protection from memory error ex-
ploits. In USENIX Security (2005).
[14] CHEN, H., DEAN, D., AND WAGNER, D. Model checking one
million lines of c code. In NDSS (2004).
[15] CHINCHANI, R., AND BERG, E. V. D. A fast static analysis
approach to detect exploit code inside network ﬂows. In RAID
(2005).
[16] CHRISTODORESCU, M., AND JHA, S. Static analysis of executa-
bles to detect malicious patterns. In Proceedings of 12th USENIX
Security Symposium (August 2003).
[17] CHRISTODORESCU, M., JHA, S., SESHIA, S. A., SONG, D.,
AND BRYANT, R. E. Semantics-aware malware detection.
In
IEEE Symposium on Security and Privacy, Oakland (May 2005).
[18] CKER CHIUEH, T., AND HSU, F.-H. Rad: A compile-time solu-
tion to buffer overﬂow attacks. In ICDCS (2001).
[19] COLLBERG, C., THOMBORSON, C., AND LOW, D. A taxonomy
of obfuscating transformations. Tech. Rep. 148, Department of
Computer Science,University of Auckland, July 1997.
[20] CORMEN, T. H., LEISERSON, C. E., AND RIVEST, R. L. Intro-
duction to Algorithms. MIT Press/McGraw-Hill, 1990.
[21] COSTA, M., CROWCROFT, J., CASTRO, M., ROWSTRON, A.,
ZHOU, L., ZHANG, L., AND BARHAM, P. Vigilante: End-to-
end containment of internet worms. In SOSP (2005).
[22] COWAN, C., PU, C., MAIER, D., HINTON, H., WALPOLE, J.,
BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., AND ZHANG,
Q. Stackguard: Automatic adaptive detection and prevention of
buffer-overﬂow attacks. In Proceedings of 7th USENIX Security
Conference (January 1998).
[23] DETRISTAN, T., ULENSPIEGEL, T., MALCOM, Y., AND UN-
DERDUK, M. S. V. Polymorphic shellcode engine using spec-
trum analysis. http://www.phrack.org/show.php?p=61&a=9.
[24] EVANS, D., AND LAROCHELLE, D.
ing extensible lightweight static analysis.
(2002).
Improving security us-
IEEE Software 19, 1
[25] FOSDICK, L. D., AND OSTERWEIL, L. Data ﬂow analysis
in software reliability. ACM Computing Surveys 8 (September
1976).
[26] HUANG, J. Detection of data ﬂow anomaly through program
instrumentation. IEEE Transactions on Software Engineering 5,
3 (May 1979).
[27] JUNG, J., PAXSON, V., BERGER, A., AND BALAKRISHNAN,
H. Fast portscan detection using sequential hypothesis testing. In
Proc. IEEE Symposium on Security and Privacy (2004).
[28] KC, G., KEROMYTIS, A., AND PREVELAKIS, V. Countering
code-injection attacks with instruction-set randomization. In Pro-
ceedings of the 10th ACM conference on Computer and commu-
nications security (October 2003).
[29] KIM, H.-A., AND KARP, B. Autograph: Toward automated,
distributed worm signature detection. In Proceedings of the 13th
Usenix Security Symposium (August 2004).
[30] KIRIANSKY, V., BRUENING, D., AND AMARASINGHE, S. Se-
In Proceedings of
cure execution via program shepherding.
USENIX Security Symposium (2002).
[31] KOLESNIKOV, O., AND LEE, W. Advanced polymorphic worms:
Evading ids by blending in with normal trafﬁc.
[32] KRUEGEL, C., KIRDA, E., MUTZ, D., ROBERTSON, W., AND
VIGNA, G. Polymorphic worm detection using structural infor-
mation of executables. In RAID (2005).
[33] KRUEGEL, C., ROBERTSON, W., VALEUR, F., AND VIGNA,
G. Static disassembly of obfuscated binaries. In Proceedings of
USENIX Security 2004 (August 2004).
[34] KUPERMAN, B. A., BRODLEY, C. E., OZDOGANOGLU, H.,
VIJAYKUMAR, T. N., AND JALOTE, A. Detecting and preven-
tion of stack buffer overﬂow attacks. Communications of the
ACM 48, 11 (2005).
[35] LAKHOTIA, A., AND ERIC, U. Stack shape analysis to detect
obfuscated calls in binaries. In Proceedings of Fourth IEEE In-
ternational Workshop on Source Code Analysis and Manipulation
(September 2004).
[36] LIANG, Z., AND SEKAR, R. Automatic generation of buffer
overﬂow attack signatures: An approach based on program be-
havior models. In Proceedings of the Annual Computer Security
Applications Conference(ACSAC) (2005).
[37] LIANG, Z., AND SEKAR, R. Fast and automated generation of
attack signatures: A basis for building self-protecting servers. In
Proc. 12th ACM Conference on Computer and Communications
Security (2005).
[38] LINN, C., AND DEBRAY, S. Obfuscation of executable code
to improve resistance to static disassembly. In 10th ACM Confer-
ence on Computer and Communications Security (CCS) (October
2003).
USENIX Association
Security ’06: 15th USENIX Security Symposium
239
[39] LOCASTO, M. E., WANG, K., KEROMYTIS, A. D., AND
STOLFO, S. J. Flips: Hybrid adaptive intrusion prevention. In
RAID (2005).
[40] MACAULAY, S. Admmutate: Polymorphic shellcode engine.
http://www.ktwo.ca/security.html.
[41] MCGREGOR, J., KARIG, D., SHI, Z., AND LEE, R. A processor
architecture defense against buffer overﬂow attacks. In Proceed-
ings of International Conference on Information Technology: Re-
search and Education (ITRE) (2003), pp. 243 – 250.
[42] NEWSOME, J., KARP, B., AND SONG, D. Polygraph: Automatic
signature generation for polymorphic worms. In IEEE Security
and Privacy Symposium (May 2005).
[43] NEWSOME, J., AND SONG, D. Dynamic taint analysis for auto-
matic detection, analysis, and signature generation of exploits on
commodity software. In NDSS (2005).
[44] PANG, R., YEGNESWARAN, V., BARFORD, P., PAXSON, V.,
AND PETERSON, L. Characteristics of internet background radi-
ation. In Proc. ACM IMC (2004).
[45] RIX.
Writing
ia32
alphanumeric
shellcodes.
http://www.phrack.org/show.php?p=57&a=15, 2001.
[46] SCHWARZ, B., DEBRAY, S. K., AND ANDREWS, G. R. Disas-
sembly of executable code revisited. In Proc. IEEE 2002 Working
Conference on Reverse Engineering (WCRE) (October 2002).
[47] SINGH, S., ESTAN, C., VARGHESE, G., AND SAVAGE, S.
The earlybird system for real-time detection of unknown worms.
Tech. rep., University of California at San Diego, 2003.
[48] S.KC, G., AND KEROMYTIS, A. D. e-nexsh: Achieving an ef-
fectively non-executable stack and heap via system-call policing.
In Proceedings of the Annual Computer Security Applications
Conference(ACSAC) (2005).
[49] SMIRNOV, A., AND CKER CHIUEH, T. Dira: Automatic de-
tection, identiﬁcation, and repair of control-hijacking attacks. In
NDSS (2005).
[50] TOTH, T., AND KRUEGEL, C. Accurate buffer overﬂow detec-
tion via abstract payload execution. In RAID (2002).
[51] WAGNER, D., FOSTER, J. S., BREWER, E. A., AND AIKEN, A.
A ﬁrst step towards automated detection of buffer overrun vulner-
abilities. In Network and Distributed System Security Symposium
(February 2000).
[52] WANG, H. J., GUO, C., SIMON, D. R., AND ZUGENMAIER, A.
Shield: Vulnerability-driven network ﬁlters for preventing known
vulnerability exploits.
In Proceedings of the ACM SIGCOMM
Conference (August 2004).
[53] WANG, K., , CRETU, G., AND STOLFO, S. J. Anomalous
payload-based worm detection and signature generation. In RAID
(2005).
[54] WANG, K., AND STOLFO, S. J. Anomalous payload-based net-
work instrusion detection. In RAID (2004).
[55] XU, J., NING, P., KIL, C., ZHAI, Y., AND BOOKHOLT, C. Au-
tomatic diagnosis and response to memory corruption vulnerabil-
ities. In Proc. 12th ACM Conference on Computer and Commu-
nications Security (2005).
Notes
1An attack may direct execution control to existing system code or
change the values of certain function arguments.
2http://www.research.ibm.com/trl/projects/security/ssp/
3http://www.acme.com/software/http load/
240
Security ’06: 15th USENIX Security Symposium
USENIX Association