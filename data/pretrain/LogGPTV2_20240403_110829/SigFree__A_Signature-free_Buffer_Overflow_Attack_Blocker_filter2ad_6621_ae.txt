# Performance Impact of SigFree on Apache HTTP Server

Figure 12: Performance impact of SigFree on Apache HTTP Server
- (a) [Insert Figure 12(a) here]
- (b) [Insert Figure 12(b) here]

## 7. Discussions

### 7.1 Robustness to Obfuscation

Most malware detection schemes involve a two-stage analysis. The first stage is the disassembly of binary code, and the second stage involves analyzing the disassembled results. Attackers can use various obfuscation techniques to evade detection at both stages [19, 38]. Table 1 demonstrates that SigFree is robust against most of these obfuscation techniques.

#### Obfuscation in the First Stage

**Junk Byte Insertion:** One of the simplest obfuscation techniques against disassembly is junk byte insertion, where junk bytes are inserted at locations that are not reachable at runtime. While this can mislead a linear sweep algorithm, it cannot mislead a recursive traversal algorithm [33], which our algorithm is based on.

**Opaque Predicates:** Opaque predicates transform unconditional jumps into conditional branches. These predicates always evaluate to either true or false, regardless of the inputs. This allows an obfuscator to insert junk bytes either at the jump target or in the place of the fall-through instruction. Although opaque predicates may cause SigFree to mistakenly interpret junk bytes as executable code, this mistake will not cause SigFree to miss any real malicious instructions. Therefore, SigFree is also immune to obfuscation based on opaque predicates.

#### Obfuscation in the Second Stage

Most second-stage obfuscation techniques aim to obfuscate the behavior of a program, but the obfuscated programs still retain characteristics of valid programs. Since SigFree's purpose is to differentiate between executable code and random binaries, rather than benign and malicious executable codes, many of these obfuscation techniques are ineffective against SigFree. Techniques such as instruction reordering, register renaming, garbage insertion, and reordered memory accesses do not affect the number of calls or useful instructions, which our schemes are based on. However, by using instruction replacement and equivalent functionality, attacks may evade the detection of Scheme 1, but they cannot evade the detection of Scheme 2.

| **Disassembly Stage** | **Analysis Stage** | **SigFree** | **Obfuscation** |
|-----------------------|--------------------|-------------|-----------------|
| Yes                   | Junk Byte Insertion | Yes         | Opaque Predict  |
| Partial                | Branch Function    | Scheme 1    | Instruction Reordering |
| Yes                   | Register Renaming  | Garbage Insertion |
| No                    | Instruction Replacement | Equivalent Functionality |
| No                    | Reordered Memory Accesses | Yes         | Scheme 2        |

Table 1: SigFree is robust to most obfuscation techniques

### 7.2 Limitations

SigFree has several limitations. First, it cannot fully handle branch-function-based obfuscation, as indicated in Table 1. A branch function is a function \( f(x) \) that, when called from \( x \), transfers control to the corresponding location \( f(x) \). By replacing unconditional branches with calls to the branch function, attackers can obscure the flow of control in the program. Currently, there are no general solutions for handling branch functions. For SigFree, the obscurity of the flow of control may cause it to break executable code into multiple instruction sequences. However, SigFree can still detect buffer overflow attacks as long as it finds enough push-calls or useful instructions in one of the distilled instruction sequences.

Second, executable shellcodes can be written in alphanumeric form [45]. Such shellcodes will be treated as printable ASCII data and bypass our analyzer. By turning off the ASCII filter, Scheme 2 can successfully detect alphanumeric shellcodes, but this increases unnecessary computational overhead. Thus, there is a tradeoff between tight security and system performance.

Finally, the current implementation of SigFree cannot detect malicious code with fewer useful instructions than the current threshold of 15. Figure 13 shows a possible evasion with only 7 useful instructions for a decryption routine. One solution is to use a comprehensive score rather than the absolute number of useful instructions as the threshold. For example, we could give larger weights to instructions within loops, as most decryption routines contain loops. This approach may introduce some false positives, which we will address in future work.

```assembly
00000000: push 0x47
00000002: pop ecx
00000003: call 0x08
00000008: pop esi
00000009: xor [dword ds:esi+0x0d], 0xc2122b7a
00000010: sub esi, -0x04
00000013: loopd short 0x09
```

Figure 13: A decryption routine with 7 useful instructions. The first two instructions set the initial value for the loop counter `ecx`. The next two instructions acquire the value of the EIP (instruction pointer register). The last three instructions form the decryption loop.

### 7.3 Application-Specific Encryption Handling

Proxy-based SigFree cannot directly handle encrypted or encoded data. For example, SSL-enabled web servers enhance security by encrypting HTTP messages, but this also complicates the detection of malicious code. To support SSL functionality, an SSL proxy such as Stunnel [6] can be deployed to securely tunnel traffic between clients and web servers. In this case, SigFree can be installed on the machine where the SSL proxy is located, handling web requests in cleartext after they have been decrypted by the SSL proxy. Alternatively, in web server applications where SSL is implemented as a server module (e.g., mod_ssl in Apache), SigFree would need to be implemented as a server module, located between the SSL module and the WWW server. Most popular web servers allow the writing of server modules and specifying their order. Detailed studies will be reported in future work.

### 7.4 Applicability

So far, we have discussed using SigFree to protect web servers. It is worth noting that SigFree is also widely applicable to many other programs vulnerable to buffer overflow attacks. For example, proxy-based SigFree can be used to protect all internet services that do not permit executable binaries in requests, such as database servers, email servers, name services, and more. We will investigate deployment issues in future work.

In addition to protecting servers, SigFree can provide real-time file system protection. Buffer overflow vulnerabilities have been found in applications like Adobe Acrobat and Reader [5], Microsoft JPEG Processing (GDI+) [1], and WinAmp [8]. Attackers can embed malicious code in PDF, JPEG, or MP3 files to launch buffer overflow attacks. For instance, the Hesive virus [7] was disguised as a Microsoft Access file to exploit a buffer overflow vulnerability in Microsoft’s Jet Database Engine. Once opened in Access, infected .mdb files take advantage of the buffer overflow vulnerability to seize control of vulnerable machines. If mass-mailing worms exploit these vulnerabilities, they can appear as pure data-file attachments, making them more deceptive. SigFree can help alleviate these problems by checking files and email attachments that should not include any code.

If the buffer being overflowed is inside a JPEG or GIF system, ASN.1 or base64 encoder, SigFree cannot be directly applied. Although SigFree can decode protected files according to the protocols or applications it protects, more details need to be studied in the future.

## 8. Conclusion

We proposed SigFree, a real-time, signature-free, out-of-the-box blocker that can filter code-injection buffer overflow attack messages, one of the most serious cyber security threats to various Internet services. SigFree does not require signatures, allowing it to block new, unknown attacks. It is immune to most attack-side code obfuscation methods, making it suitable for economical, wide-scale deployment with minimal maintenance costs and negligible throughput degradation. SigFree can also handle encrypted SSL messages.

## Acknowledgments

We would like to thank our shepherd Marc Dacier and the anonymous reviewers for their valuable comments and suggestions. We are grateful to Yoon-Chan Jhi for helpful suggestions. We also thank the members of Penn State Cyber Security Lab for collecting real traces. The work of Xinran Wang and Sencun Zhu was supported in part by Army Research Office (W911NF-05-1-0270) and the National Science Foundation (CNS-0524156); the work of Chi-Chun Pan and Peng Liu was supported in part by NSF CT-3352241.

## References

[1] Buffer overrun in jpeg processing (gdi+) could allow code execution (833987). http://www.microsoft.com/technet/security/bulletin/MS04-028.mspx
[2] Fnord snort preprocessor. http://www.cansecwest.com/spp_fnord.c
[3] Intel IA-32 Architecture Software Developer’s Manual Volume 1: Basic Architecture.
[4] Metasploit project. http://www.metasploit.com
[5] Security advisory: Acrobat and Adobe Reader plug-in buffer overflow. http://www.adobe.com/support/techdocs/321644.html
[6] Stunnel – universal SSL wrapper. http://www.stunnel.org
[7] Symantec security response: Backdoor.Hesive. http://securityresponse.symantec.com/avcenter/venc/data/backdoor.hesive.html
[8] Winamp3 buffer overflow. http://www.securityspace.com/smy-secure/catid.html?id=11530
[9] Pax documentation. http://pax.grsecurity.net/docs/pax.txt, November 2003
[10] BARATLOO, A., SINGH, N., AND TSAI, T. Transparent run-time defense against stack smashing attacks. In Proc. 2000 USENIX Technical Conference (June 2000).
[11] BARRANTES, E., ACKLEY, D., PALMER, T., STEFANOVIC, D., AND ZOVI, D. Randomized instruction set emulation to disrupt binary code injection attacks. In Proceedings of the 10th ACM conference on Computer and communications security (October 2003).
[12] BERNERS-LEE, T., MASINTER, L., AND MCCAHILL, M. Uniform Resource Locators (URL). RFC 1738 (Proposed Standard). Updated by RFCs 1808, 2368, 2396, 3986.
[13] BHATKAR, S., SEKAR, R., AND DUVARNEY, D. C. Efficient techniques for comprehensive protection from memory error exploits. In USENIX Security (2005).
[14] CHEN, H., DEAN, D., AND WAGNER, D. Model checking one million lines of C code. In NDSS (2004).
[15] CHINCHANI, R., AND BERG, E. V. D. A fast static analysis approach to detect exploit code inside network flows. In RAID (2005).
[16] CHRISTODORESCU, M., AND JHA, S. Static analysis of executables to detect malicious patterns. In Proceedings of 12th USENIX Security Symposium (August 2003).
[17] CHRISTODORESCU, M., JHA, S., SESHIA, S. A., SONG, D., AND BRYANT, R. E. Semantics-aware malware detection. In IEEE Symposium on Security and Privacy, Oakland (May 2005).
[18] CKER CHIUEH, T., AND HSU, F.-H. RAD: A compile-time solution to buffer overflow attacks. In ICDCS (2001).
[19] COLLBERG, C., THOMBORSON, C., AND LOW, D. A taxonomy of obfuscating transformations. Tech. Rep. 148, Department of Computer Science, University of Auckland, July 1997.
[20] CORMEN, T. H., LEISERSON, C. E., AND RIVEST, R. L. Introduction to Algorithms. MIT Press/McGraw-Hill, 1990.
[21] COSTA, M., CROWCROFT, J., CASTRO, M., ROWSTRON, A., ZHOU, L., ZHANG, L., AND BARHAM, P. Vigilante: End-to-end containment of internet worms. In SOSP (2005).
[22] COWAN, C., PU, C., MAIER, D., HINTON, H., WALPOLE, J., BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., AND ZHANG, Q. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Proceedings of 7th USENIX Security Conference (January 1998).
[23] DETRISTAN, T., ULENSPIEGEL, T., MALCOM, Y., AND UNDERDUK, M. S. V. Polymorphic shellcode engine using spectrum analysis. http://www.phrack.org/show.php?p=61&a=9
[24] EVANS, D., AND LAROCHELLE, D. Improving security using extensible lightweight static analysis. IEEE Software 19, 1 (2002).
[25] FOSDICK, L. D., AND OSTERWEIL, L. Data flow analysis in software reliability. ACM Computing Surveys 8 (September 1976).
[26] HUANG, J. Detection of data flow anomaly through program instrumentation. IEEE Transactions on Software Engineering 5, 3 (May 1979).
[27] JUNG, J., PAXSON, V., BERGER, A., AND BALAKRISHNAN, H. Fast portscan detection using sequential hypothesis testing. In Proc. IEEE Symposium on Security and Privacy (2004).
[28] KC, G., KEROMYTIS, A., AND PREVELAKIS, V. Countering code-injection attacks with instruction-set randomization. In Proceedings of the 10th ACM conference on Computer and communications security (October 2003).
[29] KIM, H.-A., AND KARP, B. Autograph: Toward automated, distributed worm signature detection. In Proceedings of the 13th Usenix Security Symposium (August 2004).
[30] KIRIANSKY, V., BRUENING, D., AND AMARASINGHE, S. Secure execution via program shepherding. In Proceedings of USENIX Security Symposium (2002).
[31] KOLESNIKOV, O., AND LEE, W. Advanced polymorphic worms: Evading IDS by blending in with normal traffic.
[32] KRUEGEL, C., KIRDA, E., MUTZ, D., ROBERTSON, W., AND VIGNA, G. Polymorphic worm detection using structural information of executables. In RAID (2005).
[33] KRUEGEL, C., ROBERTSON, W., VALEUR, F., AND VIGNA, G. Static disassembly of obfuscated binaries. In Proceedings of USENIX Security 2004 (August 2004).
[34] KUPERMAN, B. A., BRODLEY, C. E., OZDOGANOGLU, H., VIJAYKUMAR, T. N., AND JALOTE, A. Detecting and prevention of stack buffer overflow attacks. Communications of the ACM 48, 11 (2005).
[35] LAKHOTIA, A., AND ERIC, U. Stack shape analysis to detect obfuscated calls in binaries. In Proceedings of Fourth IEEE International Workshop on Source Code Analysis and Manipulation (September 2004).
[36] LIANG, Z., AND SEKAR, R. Automatic generation of buffer overflow attack signatures: An approach based on program behavior models. In Proceedings of the Annual Computer Security Applications Conference (ACSAC) (2005).
[37] LIANG, Z., AND SEKAR, R. Fast and automated generation of attack signatures: A basis for building self-protecting servers. In Proc. 12th ACM Conference on Computer and Communications Security (2005).
[38] LINN, C., AND DEBRAY, S. Obfuscation of executable code to improve resistance to static disassembly. In 10th ACM Conference on Computer and Communications Security (CCS) (October 2003).
[39] LOCASTO, M. E., WANG, K., KEROMYTIS, A. D., AND STOLFO, S. J. FLIPS: Hybrid adaptive intrusion prevention. In RAID (2005).
[40] MACAULAY, S. Admmutate: Polymorphic shellcode engine. http://www.ktwo.ca/security.html
[41] MCGREGOR, J., KARIG, D., SHI, Z., AND LEE, R. A processor architecture defense against buffer overflow attacks. In Proceedings of International Conference on Information Technology: Research and Education (ITRE) (2003), pp. 243–250.
[42] NEWSOME, J., KARP, B., AND SONG, D. Polygraph: Automatic signature generation for polymorphic worms. In IEEE Security and Privacy Symposium (May 2005).
[43] NEWSOME, J., AND SONG, D. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In NDSS (2005).
[44] PANG, R., YEGNESWARAN, V., BARFORD, P., PAXSON, V., AND PETERSON, L. Characteristics of internet background radiation. In Proc. ACM IMC (2004).
[45] RIX. Writing IA32 alphanumeric shellcodes. http://www.phrack.org/show.php?p=57&a=15, 2001.
[46] SCHWARZ, B., DEBRAY, S. K., AND ANDREWS, G. R. Disassembly of executable code revisited. In Proc. IEEE 2002 Working Conference on Reverse Engineering (WCRE) (October 2002).
[47] SINGH, S., ESTAN, C., VARGHESE, G., AND SAVAGE, S. The earlybird system for real-time detection of unknown worms. Tech. rep., University of California at San Diego, 2003.
[48] S.KC, G., AND KEROMYTIS, A. D. e-nexsh: Achieving an effectively non-executable stack and heap via system-call policing. In Proceedings of the Annual Computer Security Applications Conference (ACSAC) (2005).
[49] SMIRNOV, A., AND CKER CHIUEH, T. DIRA: Automatic detection, identification, and repair of control-hijacking attacks. In NDSS (2005).
[50] TOTH, T., AND KRUEGEL, C. Accurate buffer overflow detection via abstract payload execution. In RAID (2002).
[51] WAGNER, D., FOSTER, J. S., BREWER, E. A., AND AIKEN, A. A first step towards automated detection of buffer overrun vulnerabilities. In Network and Distributed System Security Symposium (February 2000).
[52] WANG, H. J., GUO, C., SIMON, D. R., AND ZUGENMAIER, A. SHIELD: Vulnerability-driven network filters for preventing known vulnerability exploits. In Proceedings of the ACM SIGCOMM Conference (August 2004).
[53] WANG, K., CRETU, G., AND STOLFO, S. J. Anomalous payload-based worm detection and signature generation. In RAID (2005).
[54] WANG, K., AND STOLFO, S. J. Anomalous payload-based network intrusion detection. In RAID (2004).
[55] XU, J., NING, P., KIL, C., ZHAI, Y., AND BOOKHOLT, C. Automatic diagnosis and response to memory corruption vulnerabilities. In Proc. 12th ACM Conference on Computer and Communications Security (2005).

**Notes:**
1. An attack may direct execution control to existing system code or change the values of certain function arguments.
2. http://www.research.ibm.com/trl/projects/security/ssp/
3. http://www.acme.com/software/http_load/

---

This revised version aims to make the text more coherent, clear, and professional. I have organized the content, added headings, and improved the overall structure.