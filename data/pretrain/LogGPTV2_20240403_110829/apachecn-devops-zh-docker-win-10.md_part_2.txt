 * [new branch]      second-edition -> second-edition
```
Gogs 在 Docker 容器中是稳定和轻量级的。我的实例在空闲时通常使用 50 MB 内存和不到 1%的 CPU。
Running a local Git server is a good idea, even if you use a hosted service such as GitHub or GitLab. Hosted services have outages, and, although rare, they can have a significant impact on productivity. Having a local secondary running with very little cost can protect you from being impacted when the next outage occurs.
下一步是在 Docker 中运行一个 CI 服务器，它可以从 Gogs 获取代码并构建应用。
# 将配置项服务器打包到 Windows Docker 映像中
Jenkins 是一个流行的自动化服务器，用于 CI/CD。它支持具有多种触发器类型的自定义作业工作流，包括计划、配置管理轮询和手动启动。这是一个可以直接打包到 Docker 中的 Java 应用，尽管完全自动化 Jenkins 设置并不那么简单。
在本章的源代码中，我有一个`dockersamples/ch10-jenkins-base:2e`映像的 Dockerfile。这个 Dockerfile 打包了一个干净的 Jenkins 安装，在安装阶段使用 Windows Server Core 下载 Jenkins 网络存档。我使用一个参数来捕获 Jenkins 版本，安装程序也会下载 SHA256 哈希进行下载，并检查下载的文件是否已损坏:
```
WORKDIR C:\jenkins
RUN Write-Host "Downloading Jenkins version: $env:JENKINS_VERSION"; `
    Invoke-WebRequest "http://.../jenkins.war.sha256" -OutFile 'jenkins.war.sha256'; `
    Invoke-WebRequest "http://../jenkins.war" -OutFile 'jenkins.war'
RUN $env:JENKINS_SHA256=$(Get-Content -Raw jenkins.war.sha256).Split(' ')[0]; `
    if ((Get-FileHash jenkins.war -Algorithm sha256).Hash.ToLower() -ne $env:JENKINS_SHA256) {exit 1}
```
Checking the file hash for a download is an important security task to make sure that the file you download is the same as the one the publisher made available. It's a step that people typically leave out when they manually install software, but it's easy to automate in your Dockerfile and it gives you a more secure deployment.
Dockerfile 的最后阶段使用官方 OpenJDK 映像作为基础，设置环境，并从安装程序阶段下载副本:
```
FROM openjdk:8-windowsservercore-1809
ARG JENKINS_VERSION="2.150.3"
ENV JENKINS_VERSION=${JENKINS_VERSION} `
    JENKINS_HOME="C:\data"
VOLUME ${JENKINS_HOME}
EXPOSE 8080 50000
WORKDIR C:\jenkins
ENTRYPOINT java -jar C:\jenkins\jenkins.war
COPY --from=installer C:\jenkins .
```
干净的詹金斯安装没有很多有用的功能；几乎所有的功能都是由你在 Jenkins 设置好之后安装的插件提供的。这些插件中的一些也安装了它们需要的依赖项，但是其他的没有。对于我的 CI/CD 管道，我需要 Jenkins 中的一个 Git 客户端，这样它就可以连接到 Docker 中运行的 Git 服务器，我还需要 Docker CLI，这样我就可以在我的构建中使用 Docker 命令。
我可以在 Jenkins Dockerfile 中安装这些依赖项，但这会使它变得庞大且难以管理。相反，我将从其他 Docker 映像中获取这些工具。我用的是`sixeyed/git`和`sixeyed/docker-cli`，都是 Docker Hub 上的公开图片。我使用这些与詹金斯基地形象，以建立我的最终詹金斯形象。
`dockeronwindows/ch10-jenkins:2e`的 Docker 文件从基础开始，并从 Git 和 Docker 命令行界面映像复制二进制文件:
```
# escape=`
FROM dockeronwindows/ch10-jenkins-base:2e
WORKDIR C:\git
COPY --from=sixeyed/git:2.17.1-windowsservercore-ltsc2019 C:\git .
WORKDIR C:\docker
COPY --from=sixeyed/docker-cli:18.09.0-windowsservercore-ltsc2019 ["C:\\Program Files\\Docker", "."]
```
最后一行只是将所有新的刀具位置添加到系统路径中，这样 Jenkins 就可以找到它们:
```
RUN $env:PATH = 'C:\docker;' + 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH; `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine)
```
对依赖项使用公共 Docker 映像给了我一个最终的 Jenkins 映像，它包含了我需要的所有组件，但是有一个使用一组可重用的源映像的可管理的 Docker 文件。现在，我可以在一个容器中运行 Jenkins，并通过安装插件来完成设置。
# 在 Docker 中运行詹金斯自动化服务器
Jenkins 将端口`8080`用于 Web UI，因此您可以使用以下命令从本章中的映像运行它，该命令映射端口并为 Jenkins 根目录挂载一个本地文件夹:
```
mkdir C:\jenkins
docker run -d -p 8080:8080 `
 -v C:\jenkins:C:\data `
 --name jenkins `
 dockeronwindows/ch10-jenkins:2e
```
Jenkins 为每个新部署生成一个随机的管理员密码。我可以在浏览网站之前从容器日志中获取密码:
```
> docker container logs jenkins
...
*************************************************************
Jenkins initial setup is required. An admin user has been created and a password generated.
Please use the following password to proceed to installation:
6467e40d9c9b4d21916c9bdb2b05bba3
This may also be found at: C:\data\secrets\initialAdminPassword
*************************************************************
```
现在，我将浏览到 localhost 上的端口`8080`，输入生成的密码，添加我需要的 Jenkins 插件。作为一个最起码的例子，我选择了定制插件安装，并选择了文件夹、凭证绑定和 Git 插件，这为我提供了所需的大部分功能:
![](img/70485e78-a4b8-4455-bde2-bb6d97d03c8a.png)
我还需要一个插件来在构建作业中运行 PowerShell 脚本。这不是一个推荐的插件，所以它不会显示在初始设置列表中。一旦 Jenkins 启动，我将转到管理 Jenkins |管理插件，并从可用列表中选择 PowerShell，然后单击安装而不重启:
![](img/fb15f9c8-c31c-4d2b-a3b7-3c6d8d03dfaa.png)
完成后，我就拥有了运行配置项/光盘管道所需的所有基础架构服务。然而，它们在定制的容器中运行。Gogs 和 Jenkins 容器中的应用已经经历了手动设置阶段，与运行它们的映像状态不同。如果我更换容器，我将失去我所做的额外设置。我可以通过从容器中创建映像来解决这个问题。
# 从正在运行的容器提交映像
您应该从 Dockerfile 构建您的映像。这是脚本中的一个可重复的过程，可以存储在源代码管理中，用于版本控制、比较和授权。但是有些应用在部署后需要额外的设置步骤，这些步骤需要手动执行。
詹金斯就是一个很好的例子。您可以使用 Jenkins 自动安装插件，但是需要额外下载 Jenkins API 并编写一些脚本。以这种方式安装时，插件依赖关系并不总是得到解决，因此手动设置插件并验证部署会更安全。完成后，您可以通过提交容器来保持最终设置，这将从容器的当前状态生成一个新的 Docker 映像。
在 Windows 上，您需要停止容器来提交它们，然后运行`docker container commit`，给出容器的名称和要创建的新映像标签:
```
> docker container stop jenkins
jenkins
> docker container commit jenkins dockeronwindows/ch10-jenkins:2e-final
sha256:96dd3caa601c3040927459bd56b46f8811f7c68e5830a1d76c28660fa726960d
```
对于我的设置，我已经提交了 Jenkins 和 Gogs，并且我有一个 Docker Compose 文件来配置它们以及注册表容器。这些都是基础设施组件，但这仍然是一个分布式解决方案。詹金斯容器将访问 Gogs 和注册表容器。这些服务都有相同的服务级别协议，所以在一个合成文件中定义它们可以让我捕获它们并一起启动所有的服务。
# 在 Docker 中使用詹金斯配置配置项/光盘
我将配置我的 Jenkins 构建作业来轮询 Git 存储库，并使用 Git 推送作为新构建的触发器。
Jenkins 将通过 Gogs 的存储库 URL 连接到 Git，构建、测试和部署解决方案的所有操作都将作为 Docker 容器运行。Gogs 服务器和 Docker 引擎具有不同的认证模型，但是 Jenkins 支持许多凭据类型。我可以配置构建作业来安全地访问主机上的源存储库和 Docker。
# 设置詹金斯凭据
Gogs 与外部身份提供者集成，并且还具有自己的基本用户名/密码认证，我正在我的设置中使用它。这在 HTTP 上是不安全的，所以，在真实环境中，我会使用 SSH 或 HTTPS 来获得 Git，要么通过在映像中打包一个**安全套接字层** ( **SSL** )证书，要么通过在 Gogs 前面使用代理服务器。
在 Gogs 管理界面的`Users`部分，我创建了一个`jenkins`用户，并授予其对`docker-on-windows` Git 存储库的读取权限，我将在我的示例 CI/CD 作业中使用该存储库:
![](img/2f498d84-eb8f-4736-98db-af02df316ae2.png)
詹金斯将从 Gogs 获取源代码库，作为`jenkins`用户进行认证。我已将用户名和密码作为全局凭据添加到 Jenkins 中，以便它们可以被任何作业使用:
![](img/7340759f-72e0-4e85-813e-65ba10c4dee1.png)
一旦输入密码，Jenkins 不会显示密码，它会记录所有使用该凭据的作业的审计跟踪，因此这是一种安全的认证方式。我的 Jenkins 容器正在运行一个卷，该卷从 Windows 主机装载 Docker 命名管道，这样它就可以在不进行认证的情况下与 Docker 引擎一起工作。
As an alternative, I could connect to a remote Docker API over TCP. To authenticate with Docker, I would use the **Transport Layer Security** (**TLS**) certificates I generated when securing the Docker engine. There are three certificates—the **Certificate Authority** (**CA**), the client certificate, and the client key. They need to be passed to the Docker CLI as file paths, and Jenkins supports this with credentials that can be saved as secret files, thus storing the certificate PEM files in Jenkins.
# 配置詹金斯配置项作业
在本章中，样品溶液在`ch10-nerd-dinner`文件夹中。这是一个现代化的 NerdDinner 应用，它在前面的章节中有所发展。每个组件都有一个 Dockerfile。这使用一个多阶段构建和一组 Docker Compose 文件来构建和运行应用。
这里的文件夹结构值得一看，看看分布式应用通常是如何排列的——`src`文件夹包含所有应用和数据库源代码，`docker`文件夹包含所有 Dockerfiles，`compose`文件夹包含所有 Compose 文件。