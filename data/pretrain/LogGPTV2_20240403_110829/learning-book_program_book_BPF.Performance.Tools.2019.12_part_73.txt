proc/16914/task/16983/comm:Java Sound Even
proc/16914/ task/16985/conm:FreeCo1Server: S
/proc/16914/task/16989/comm:FreeCo1C1ient:b
/proc/16914/task/16990/com:FreeCo1Server: =
The examples in the following sections match on the Java PID rather than the name * java°, and
now you know why. There is an additional reason: USDT probes that use a semaphore require a
PID so that bpftrace knows to set the semaphore for that PID, See Section 2.10.1 in Chapter 2 for
more details on these semaphore probes.
12.3.4 Java Method Symbols
the addresses of the complied Java methods [135]. This is necessary any time you are printing
The open source perf-map-agent can be used to create supplemental symbol files containing
stack traces or addresses containing Java methods; otherwise, the addresses will be unknown.
perf-map-agent uses the convention created by Linux perf(1) of writing a text file in /tmp/perf-PID.
map with the following format [136]:
START SIZE symbo1nane
Here are some example symbols from a production Java application, where the symbol contains
'sun’′ (just as an example):
 grep sun /tmp/perf-3752.map
[.- -]
7f9cela04f60 80 Lsun/misc/FormattedlrloatingDecinal/1rgetMantisss
mxonut:1+6,sxossecoypoua8gpa1eaeueg/4oetgea/umsg 0e& 09p90eteo6tL
7f9cela08de0 B0 Lsun/misc/FloatingDecimal$BinaryToAsClIBuffer,::isExceptiona]
7f9cela23fc0 140 Lsrun/secuz1ty/ut11/Cache;::nevSoftMenoxyCache
7f9cela243c0 120 Laun/security/uti1/Cachez1:
mebeαu6Tgs6::raeggmganduxeo/tn/txnoes/anst 0eet 0boezeteo6L
7f9cela2ccc0 980 Laun/security/uti1/DisabledAlgorithnConstraintss:ipernits
7f9cela36c20 20o Lcon/sun/)ersey/coze/zerlectlon/ReflectionHelpex;::findNethodonCl...
7f9cela3a360 6e0 Laun/security/uti1/MemoryCachez1:
Tf9cela523c0 760 Lcom/sun/jersey/coze/zeflectlon/AnnotatedMethod,; ::hasMethodAnnot.a..-
7f9ce1s60b60 B60 Leun/reflect/GeneratedMethodAccessor682>1:invoke
7f9cela68t20 320 L4un/n1o/ch/EPo11SelectorInpl;::vakeup
[...]
perf-map-agent can be run on-demand, and attaches to a live Java process and dumps the symbol
table. Note that this procedure that can generate some performance overhead during the symbol
dump, and for large Java applications it can take more than one second of CPU time.
---
## Page 575
538
8Chapter 12 Languages
Since this is a snapshot of the symbol table, it will quickly become out of date as the Java compiler
recompiles methods, which it may continue to do after the workload seems to have reached a
steady state. The more time between the symbol snapshot and the BPF tool translating method
symbols, the more chances for symbols to be stale and mistranslated. For busy production
workloads with high rates of compilation, I do not trust Java symbol dlumps that are more than
60 seconds old.
then with it after jmaps was run.
Section 12.3.5 provides an example of a stack trace without the perf-map-agent symbol table,
Automation
You can automate these symbol dumps to minimize the time between their creation and
a,1 pue *sug apeuopne oq auemos suequo pafosd juage-deu-pad auL joo dd e q asn
published my own program called jmaps [137]. jmaps finds all java processes (based on their
process name) and dumps their symbol tables. An example of running jmaps on a 48-CPU
production server:
 time / maps
Fetching maps for all java processes.--
Mapping PID 3495 (user xw) :
vc (1) :  116736351865 9829226 /tnp/perf3495.nap
rea1
0n10, 495s
0n0 397s
sfs
0n0 .134s
This output includes various statistics: jmaps runs wc(1) on the final symbol dump, which shows
it is 116,000 lines (symbols) and 9.4 Mbytes (9829226 bytes). 1 also ran it through time(1) to show
how long it took: this is a busy Java application with 174 Gbytes of main memory, and it took
10.5 seconds to run. (Much of the CPU time involved is not seen by the user and sys statistics, as it
was in the running JVM.)
For use with BCC, jmaps can be run immediately before the tool. For example:
-/jmspss trace - *...*
This would invoke the trace(8) command immediately after jmaps completed, minimizing
the time for symbols to become stale. For tools that collect a summary of stack traces (e-g.-
stackcount(8), the tool itself could be modified to call jmaps immediately before printing the
summary.
With bpftrace, jmaps can be run in a BEGIN clause for tools that use printf0, and an END
jo adurexa ue sem poo (s)soesu snotaad au saeuns deu jud peq asou rog asme[
the latter.
---
## Page 576
12.3Java  539
Other Techniques and Future Work
ueu paauas seq qoeodde uae-dew-uad aq *unq joqus upnpa sanbuoa asau 
environments well. However, other approaches may beter solve the stale symbol table problem,
and may be supported by BCC in the future. In summary:
Timestamped symbol logging: perf(1) supports this, and the software is in the Linux
source. It currently involves always-on logging, which incurs some performance
overhead. Ideally, it would not require always-on logging but instead could be enabled
on demand at the start of a trace, and then when disabled it could take a full symbol
table snapshot. This would allow the symbol state over time to be reconstructed from the
time-trace + snapshot data, without the performance overhead of always-on logging.
 Making the stale symbols visible: It should be possible to dump a before and after symbol
table, find locations that have changed, and then construct a new symbol table with these
locations flagged as unreliable.
 async-profile: This marries perf_events stack traces with those fetched using Java's
AsyncGetCalTrace interface. This approach does not require frame pointers to be enabled.
• Kernel support: This has been discussed in the BPF community. One day we may add
kernel support to improve such stack trace collection with in-kernel symbol translation.
This was mentioned in Chapter 2.
• JVM built-in support for symbol dumps: perf-map-agent is a single-threaded module that
is bounded by the JVMTI interface. If the JVM were to support a way to write /tmp/perf-PID.
map supplemental symbol files directly—say, when it received a signal or another JVMTI
call]it is likely that such a built-in JVM version could be much more efficient.
This is an evolving space.
12.3.5 Java Stack Traces
By default, Java does not honor the frame pointer register, and that method of stack walking does
not work. For example, using bpftrace to take timed stack samples of the Java process:
:(1uoo =[xoesn] ) /9 == prd/ 66:z:oad, -8oe2agdg 
sttaching 1 probe..
0x?efcff88a7bd
]: 1
10 In the Linuax sourre, see tools/perf/ymti.
1.1 1 have spoken about this to Stephane Erani
 apoo o] euug 94i peuq a4e4 1
---
## Page 577
540
Chapter 12 Languages
9 [
x7efcff88aT36
0x12f023020020fd4
] : 1
IndexSet: :al1oc_block_contain1ng (unslgned Int) +75
Ph.aseChaitin:rinterfere_with_live (unsigned int, IndexSet*) +628
PhaseChal tin: :bu11d_1fg_phys1cal (ResouxoeArea*) +1812
PhaseChaitin::Register_Allocate () +1834
Conp 1 1e : :Code_Gen () + 628
Compile::Conpile (ciEnv*, C2Conpiler*, ciMethod*, int, bool, bool, bool, Direct.
C2Conpilez::conp1le_nethod(ciEnv*, ciMethod*, int, DizectiveSet*) +1T7
Compi leBroker=:invoke_compi ler_on_method (CompileTask*) + 931
Conp1leBroker::conp11ez_thxead_1cop (1 +1224
JavaThread::th.read_ma.in_inner () +259
th.read_native_ent.ry (Thzead*) +240
start_thread+219
] : 1
x7efcffT2fc9e
0×620000cc4
1 : 1
1
Dx7efcff969ba8
] : 1
[.--]
This output includes broken stacks, seen as just one or two hex addresses, The Java compiler has
used the frame pointer register for local variables, as a compiler optimization. This makes Java
slightly faster (on register-limited processors), at the expense of breaking this method of stack
walking as used by debuggers and tracers. Attempting to walk the stack trace usually either fails
after the first address. The above output includes such failures, and also a working stack that is
entirely C++: since the code path dixdn’t enter any Java methods, the frame pointer was intact.
PreserveFramePointer
Since Java 8 update 60, the JVM has provided the XX: +PresexveFxamePointer option to enable
the frame pointer, 2 which fixes frame pointer-based stack traces. Now the same bpftrace one-liner,
but with Java running with this option (this involved ading the XX : +PreserveFrane Poi.ntex
option to the start script, /usr/games/freecol, in the run_java line):
12 1 developed this capsbilty and sent it as 8 petch to the hotspotcompiler-devs mailing ist, with a CPU flame graph to
explain its value. Zoltin Majo from Oracle rewrote it to be parameterized (PreservelramePointer) and integrated it in the
official JDK,
---
## Page 578
12.3Java 541
（: (1qumoo = [xoe4sn]8 ) /t9 == prd/ 66:zq:#Tgoad, - soexagdq 
Attaching l probe...
[..]
0x7fdlbdf7 4ba04
0x7f dlbd8be881 4
feqpaqePPF×)
[x7fdbd8beb874
0x7fdld8ca336c
0x7fdldf96306c
0x7fdlbdf962504
0x7fdbdf62fef8
0x7fdld8cd85b4
0x7fdbd8c8eTc4
0x7fdlbdf9e9688
0x7fdbd8c83114
0x7fdlod8817184
0x7fdbdf9e96b8
[x7fdbd8ce5Ta4
aqP[P,×)
[x7fdbd8cb232c
0x7fdbd8ce715c
0x7fdbd8c846ec
STqPP,X)
0x7fdbd8c7fdc4
0x7fdbd7b25849
JavaCalls::cal1_helper (JavaValue*, nethodHandle consts, JavaCal1Argunents*, Th.. -
JVM_DoPri vi.1eged+1 600
0x7fdbdf77fe18
0x7fdbd8ccd37c
0x7fdbd8cd1674
pgp,x)
0x7fdbd8c8783c
0x7fdld8bd8fac
bg,egg8pgp,x
TSBePPF,×)
]: 1
[...]
These stack traces are now complete, except for the symbol translation.
---
## Page 579
542
Chapter 12 Languages
Stacks and Symbols
As covered in Section 12.3.4, a supplemental symbol file can be created with the perf-map-agent
software, automated by jmaps. After taking this step in an END clause:
[(1m =[xoes])/99 ==pd/ 66:z:oad,-esu--e2gdg 
END ( systen("jmaps") : *
Attaching 2 pzobes...
^CFetching maps for all java processes.
Mapping PID 4663 (user bgregg) :
vc 11) : 6555 20559 388964 /trp/perf-4663,nsp
Lsun/axt/X11/X1ibMrapperz1:Rootxindov+31
Lsun/axt/X11/XDecoratedPeex:::getLocat1onOnScreen+3764
Ljava/avt/Component, 1igetLocat.ion0nScreen_MoTreeLock+2260
Ljavax/sving/SvingUt111ties;#:convextPolntFronScreen+1820
Lnet/sf/freeco1/client/gui/plaf/FreeCo1ButtonUI;:spaint+1068
Ljavax/sving/plaf/ConponentUI; ::update+1804
Ljavax/sving/plaf/metal/MetalButtonUI1rupdate+4276
Z19+ueuodaogauted::+queuoduoor/butns/xene(
Ljavax/sving/JConponent11paint+2120
Z6Et+uexpTTu2auted::+queuoduoor/butns/xene[
Ljavax/sving/JConponent:1paint+2168
Ljavax/sving/JLayeredPane, ::paint+2356
Ljavax/sving/JConponent::1paintChi 1dren+13924
Ljavax/sving/JConponent11paint+2168
Ljavax/sving/JConponent;:=paintTooffscxeen+836
Ljavax/sving/BufferStrategyPaintManagerr1 paint+3244
Ljavax/sving/BepalntManagex:+:palnt+1260
Ljavax/sving/JConponent::1_paintInmediately+12636
Ljavax/sving/JConponent,::=paintInnedlate1y+3564
Ljavax/sving/RepaintManager$4; :1run+1684
Ljavax/sving/BepaIntManagex$4; ::xun+132
ca11_stub+138
JavaCalls::cal1_helper (JavaValue*, nethodHandle consts, JavaCallArgunenta*, Th.. -
JVM_DoPrivileged+1600
Ljava/secux1ty/AccessContzo11ez,::doPr1vi1eged+216
Ljavax/sving/RepaintManager71tpaintDirtyRegions+4572
Ljavax/sving/RepalntHanagex:#:palntDLrtyRegions+660
Ljavax/sving/BepaintManagerz1tprePaintDirtyRegions+1556
Ljavax/sving/BepalntHanagexSPxocess1ngRunnable;+:run+572
Ljava/avt/erent/InvocationEvent, 1:disgatch+524
Ljava/avt/EventQueue ::: dispatchEventInpL+6260
Ljava/axt/EventQueve$4;±:eun+372
] : 1
---
## Page 580
12.3Jav8 543
The stack is now complete, and fully translated. This stack looks like it was painting a button in
the UI (FreeColButtonUI:paint().
Library Stacks
One last example, this time tracing stack traces from the read(2) syscall:
 bpftrace -e *t:syscalls:sys_enter_zead /pld == 4663/ ( [ustack] = count() : }'
Attaching l probe...
°C
]@
89 +p9a3
P96eP28270828250x0
〕 : 11
1@
89 +p9a3
]: 25
These stacks are still broken, even though Java is running with XX: +PreserveFrame Poi n.ter ,
The problem is that this syscall has walked into the libc library’s read( function, and that library
has not been compiled with the frame pointer. The fix is to recompile the library, or use a differ
ent stack walker once BPF tools support it (e.g., DWARF or LBR).
Fixing stack traces can be a lot of work. But it is worth it: it enables profiling including CPU flame
uaa Aue tuo xaquoo aoen xoes pue sudeas
12.3.6 Java USDT Probes
USDT probes, introduced in Chapter 2, have the advantage of providing a stable interface for
instrumenting events. There are USDT probes in the JVM for various events, including:
•Virtual machine life cycle
*Thread life cycle
Supeo sseD ·
 Garbage collection
uoeduoo poqa •
 Monitor
● Application tracking
se poqa 
• Object allocation
= Monitor events
---
## Page 581
544
Chapter 12 Languages
These are only available if the IDK has been compiled with the enable dtra ce option, which,
unfortunately, is not yet commonly enabled for Linux distributions of the JDK. To use these USDT
probes, you will need to compile the JDK from source with enab1edtrace, or ask the package
maintainers to enable this option.
The probes are documented in the *DTrace Probes in HotSpot VM° section of the Java Virtual
Machtine Guide [138], which describes the purpose of each probe and its arguments. Table 12-3 lists
some selected probes.
Table 12-3 USDT Probes
USDT Group
USDT Probe
Arguments
hotspot
thread_start,
char *thread_name, u64 thread_name_len, u64 thread_id,
thread_stop
u64 os_thread_id, bool is_daemon
hotspot
class_loaded
char *class_name, u64 class_name_len, u64 loader_id,
bool is_shared
hotspot
gc_begin
bool is_ful_gec
hotspot
gc_end
一
hotspot
object__alloc
int thread_id, char *class_name, u64 class_name_len,
u64 size
hotspot
method_entry,
int thread_id, char *class_name, int class_name_len,
method_return
char *method_name, int method_name_len, char
+ signature, int signature_en
hotspot_jini
AllocObject_entry
void *enw, void *clazz
See the fzve VirtuzI Machine Guide for the fullist.
Java USDT Implementation
As an example of how the USDT probes have been inserted into the JDK, the following shows the
code behind a hotspot:gc__begin probe. For most people, it is not necessary to learn these details;
they have been provided just to give some insight into how the probes work.
The probe is defined in src/hotspot/os/posix/dtrace/hotspot.d, a definitions file for the USDT
probes:
14ode,oq 3aptao3d
[..-]
probe gc,
begin (uintptr_t) 
From this definition, the probe will be called hotspot:gc__begin. At build time this file is
compiled to a hotspot.h header file, containing a HOTSPOT_GC_BEGIN macro:
define HOTSPOr_GC_BEGIN (axg1)\
DTRACE_PR0BE1(hotspot, gc__begin,arg1)
---
## Page 582
12.3 Java 545
This macro is then inserted where needed in the JVM code. It has been put in a notify_gc_begin0
function, so that that function can be called for executing the probe. From src/hotspot/share/gc
/shared/gcVMOperations.cpp:
vold VM_GC_0peratloni:notify_gc_begin (bcol full1) (
BOTSPOT_GC_BEGINI
fu11) 
BS_DTRACE_MORKAROUND_TAIL_CALL_BUG (1 
This function happens to have a DTrace bug workaround macro, which is declared in a dtrace.
hpp header file with the comment */ Work around dtrace tail call bug 6672627 until it is fixed in
solaris 10°.
If the JDK was built without -enab1edt.race, then a dtrace_disabled.hpp header file is used
instead that returns nothing for these macros.
There is also a HOTSPOT_GC_BEGIN_ENABLED macro used for this probe: this returns true when
the probe is under live instrumentation by a tracer, and is used by the code to know whether to
calculate expensive probe arguments if the probe is enabled, or whether those can be skipped if
no one is currently using the probe.
Listing Java USDT Probes
The tplist(8) tool from BCC can be used to list USDT probes from a file or a running process. On
the JVM, it lists more than 500 probes. The output has been truncated here to show some interest-
ing probes, and the full path to libjvm.so was elided (**):
+ tplist -p 6820
/.-./libjvm,so hotspot:class_loaded
/.../libjvm,so hotspot:eLass_unloaded
/.../1ibgvm,so hs_private:cns_inil tsark_begin
/'.../libjvm.ao hs_prirateicnsinitmarkend
/.../libjv,so hs_private:cns_renazk__begln
/.../libjvm.so hs_prirateicns_renark__end
/..-/1ibgvm,so hotapot:method_conpile_begl.n
/.../libjvm.so botsotimethod_congile_end
/.--/lib?v.so hotspot:gcbegln
/.../1ibjvm.so hotspotigc_end
..-]
/.../libjv.so botapot_Jni:tlexobjectArray._entry
/.- -/1ib?vm,so hotspot_jni:BewObjectArrayreturn
/.../libjvm.ao botspot_jni:exDirectByteBuffer_entey
/. -./1ibjv,so hotspot_jni:lexDizectByteBuffex_zeturn
[...]
---
## Page 583
546
Chapter 12 Languages
/.../libjvm.so hs_privatersafepoint_begin
/..../1ibjvm,so hs_private:safepoint_end
/.../libjvm.so hotapotiobject_alloc
/.--/lib?vm,so hotspot:method_entey
/.../libjvm.so botspotimethod_retuen
/...-/1ibgvm,so hotspot:monitox_xaited
/..../libjvm,so botagotimoni tor__xait
/..--/1ibjvm,so hotspot:thread_stop