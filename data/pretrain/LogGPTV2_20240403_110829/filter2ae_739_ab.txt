_frame ancestor_ 还没有得到普遍的支持，而 `X-Frame-Options` 得到了广泛的支持。
**建议**  
确定你的网站是否需要被允许呈现在一个 frame 中。完全不允许使用 sameorigin 拒绝或允许同源框架的选项。避免由于受限或 bug
浏览器支持而允许的选项。示例 HTTP 头:
    X-Frame-Options: deny
#### 2.3 XSS Protection
跨站点脚本（XSS 或 CSS）的保护被构建到大多数流行的浏览器中，除了 Firefox
之外。这种保护是用户可配置的，可以关闭。因此，明确要求浏览器在你的网站上使用它的 XSS 过滤器是个好主意。
相反，网站可以要求 XSS 保护在页面的基础上被禁用。这绝对不是一个好主意。
**建议**  
使用入校 HTTP header:
    X-Xss-Protection: 1; block
#### 2.4 Cache Control
表示缓存页面输出的首选项。适当的值随网站数据的性质而变化，但强烈推荐使用偏好。否则，它取决于浏览器和代理来选择是否缓存内容。不恰当的选择可能会导致性能问题、安全问题，或者两者都有。
**建议**  
开发缓存策略，然后将缓存首选项包括为 HTTP 头。
    Cache-Control: public*
其中的一个 public，private，no-cache 或 no-store。如果允许缓存，则应该将 _max-age_ 值包含在 **Cache-Control** 以及 **Etag** 头文件中，以允许客户端缓存验证。
#### 2.5 Content Type Options
当浏览器以不同的方式处理来自服务器的文件时，MIME
嗅探就是服务器指令。当一个网站承载不受信任的内容（如用户提供的）时，这是很危险的。假设服务器允许用户上传 image。如果用户上传 HTML
文档，浏览器可能会将其呈现为 web 执行 scriptpage，即使服务器明确表示正在发送 image。非标准的标头 `X-Content-Type-Options`选项指示浏览器不做任何模仿指定类型的 MIME。
**建议**  
总是设置 header:
    X-Content-Type-Options: nosniff
#### 2.6 Subresource Integrity
浏览器通常从外部域加载大量资源、javascript
和样式表。内容交付网络经常被使用。如果外部资源被破坏，依赖站点的安全性也可以。子资源完整性允许浏览器验证 javascript 或样式表未被意外修改。
**建议**  
设置外部 javascript 和样式表的完整性属性。
**注意**  
您应该始终提供外部脚本的本地副本，并实现一种方法，以便在外部负载失败的情况下重新加载它们。否则你的网站可能会崩溃。例子:
    window.jQuery || document.write('')
#### 2.7 Iframe Sandbox
iframe 在 WWW 上随处可见。网站平均有 [5.1 iframe](http://www.debug.is/2015/04/15/youve-been-framed)，主要用于装载第三方内容。这些 iframe
有很多方法来伤害托管网站，包括运行脚本和插件和重新引导访问者。`sandbox`属性允许对 iframe 中可以进行的操作进行限制。
**建议**  
设置 iframe 的 `sandbox` 属性，然后添加所需的权限。
#### 2.8 Server Clock
服务器包括所有响应的时间戳。不准确的时钟不会给客户机浏览器带来问题。然而，当与其他系统或服务交互时，问题就会出现。
**建议**  
使用网络时间协议（NTP）来保持服务器时钟的准确性。
### 3 Information disclosure
#### 3.1 Server Banner
大多数 web
服务器设置报头来识别自己和他们的版本号。这只服务于信息目的和实际用途是非常有限的。去掉整个头，而完全可以接受，通常是不必要的。但是，建议从头中删除版本号。在特定
web 服务器版本中存在 bug 的情况下，包括版本号可以作为对脚本 kiddy 的邀请来尝试对服务器的攻击。
**建议**  
包含服务器名称但去掉版本号；
    Server: nginx
#### 3.2 Web Framework Information
许多 web 框架设置 HTTP
头，识别框架或版本号。除了满足用户的好奇心，而且主要作为技术堆栈的广告，这几乎没有什么作用。这些头是不标准的，对浏览器渲染站点的方式没有影响。
虽然它们没有什么实际用途，但对于搜索运行过时版本的软件的机器人或蜘蛛来说，这些标头是无价的，因为这些软件可能包含安全漏洞。如果没有定期更新，这些头文件可以使网站的目标变得容易。
**建议**  
从服务器响应中删除这些标头: `X-Powered-By`, `X-Runtime`, `X-Version` 和 `X-AspNet-Version`。
### 4 Cookies
#### 4.1 Cookie Security
包含敏感信息的 cookie，特别是会话 id，需要标记为安全的，假设网站是通过 HTTPS 传输的。这会阻止 cookie 通过 HTTP
发送明文文本。另一种方法是通过 HSTS 来阻止非安全 cookie 在 HTTP 上传输。建议使用安全 cookie 和 HSTS。
会话 cookie 应该与 HttpOnly 值进行标记，以防止它们被 javascript 访问。这可以防止攻击者利用 XSS 窃取会话
cookie。其他 cookie 可能不需要这样标记。但是，除非有明确的需要从 javascript
中访问他们的值，否则最好还是呆在安全的一边，把所有cookie标记为 _HttpOnly_
**建议**  
标记所有 cookie 安全和 _HttpOnly_ 。
    Set-Cookie: Key=Value; path=/; secure; HttpOnly, Key2=Value2; secure; HttpOnly