### Necessary for JIT Improvements

---

### Advantages of Parallel Shard Access
- **Asynchronous API Utilization**: Leverage `libpq`'s asynchronous API to issue multiple pending queries.
- **Ideal for Specific Queries**:
  - Queries that must run on every shard, such as:
    - Restrictions on static tables
    - Queries with no sharded-key reference
    - Queries with multiple sharded-key references
- **Parallel Aggregation Across Shards**: Enables efficient aggregation by processing data in parallel across different shards.

---

### Joins with Replicated Tables
- **SQL Queries and PG FDW**:
  - SQL queries with joins to static data and static data restrictions.
  - Foreign Servers (repl.): Replicated tables are used to join with sharded data.

---

### Implementing Joins with Replicated Tables
- **Join Pushdown**: Joins with replicated tables allow for join pushdown when the query restriction is on the replicated (lookup) table, not on the sharded column.
- **Replication**: Tables can be replicated to shards using logical replication.
- **Optimizer Adjustments**: The optimizer must be able to adjust join pushdown based on which tables are replicated on the shards.

---

### Shard Management
- **SQL Queries and PG FDW**:
  - DDL queries for managing shards.
  - Foreign Servers: Used for shard management.
- **Integration with Partitioning Syntax**: Shard management will be added to the existing partitioning syntax, which was introduced in Postgres 10.

---

This revised version aims to provide a more structured and clear presentation of the information, making it easier to understand and follow.