sible  via  Javascript.  To  discover  the  best  network  path  be­
tween  peers,  each  peer  collects  all  available  candidate  ad­
dresses,  including  addresses  from  the  local  network  inter­
faces  (such  as  ethernet  or  WiFi)  and  addresses  from  the 
public  side  of  the  NAT  and  makes  them  available  to  the 
web  application  without  explicit  permission  from  the  user. 
This  has  led  to  serious  privacy  concerns:  users  behind  a 
proxy  or  VPN  can  have  their  ISP’s  public  IP  address  ex­
posed [59].  We focus on a slightly diﬀerent privacy concern: 
users behind a NAT can have their local IP address revealed, 
which  can  be  used  as  an  identiﬁer  for  tracking.  A  detailed 
description  of  the  discovery  process  is  given  in  Appendix 
Section 11. 
Detection  methodology.  To  detect  WebRTC  local  IP 
discovery, we instrument the RTCPeerConnection 
interface  prototype  and  record  access  to  its  method  calls 
and  property  access.  After  the  measurement  is  complete, 
we select the scripts which call the createDataChannel and 
createOffer APIs, and access the event handler onicecan­
didate14 .  We  manually  veriﬁed  that  scripts  that  call  these 
functions are in fact retrieving candidate IP addresses, with 
zero  false  positives  on  1  million  sites.  Next,  we  manually 
tested if such scripts are using these IPs for tracking.  Specif­
ically, we check if the code is located in a script that contains 
other known ﬁngerprinting techniques, in which case we la­
bel  it  tracking.  Otherwise,  if  we  manually  assess  that  the 
code  has  a  clear  non-tracking  use,  we  label  it  non-tracking. 
If  neither  of  these  is  the  case,  we  label  the  script  as  ‘un­
13https://trac.torproject.org/projects/tor/ticket/13400 
14Although  we  found  it  unnecessary  for  current  scripts, 
instrumenting  localDescription  will  cover  all  possible  IP 
address retrievals. 
known’.  We  emphasize  that  even  the  non-tracking  scripts 
present a privacy concern related to leakage of private IPs. 
Results.  We  found  WebRTC  being  used  to  discover  lo­
cal  IP  addresses  without  user  interaction  on  715  sites  out 
of  the  top  1  million.  The  vast  majority  of  these  (659)  were 
done  by  third-party  scripts,  loaded  from  99  diﬀerent  loca­
tions.  A  large  majority  (625)  were  used  for  tracking.  The 
top  10  scripts  accounted  for  83%  of  usage,  in  line  with  our 
other  observations  about  the  small  number  of  third  parties 
responsible for most tracking.  We provide a list of scripts in 
Table 13 in the Appendix. 
The number of conﬁrmed non-tracking uses of unsolicited 
IP  candidate  discovery  is  small,  and  based  on  our  analysis, 
none  of  them  is  critical  to  the  application.  These  results 
have implications for the ongoing debate on whether or not 
unsolicited  WebRTC  IP  discovery  should  be  private  by  de­
fault [59, 8, 58]. 
Classiﬁcation  #  Scripts  #  First-parties 
Tracking 
Non-Tracking 
Unknown 
625 (88.7%) 
40 (5.7%) 
40 (5.7%) 
57 
10 
32 
Figure  8:  AudioContext  node  conﬁguration  used  to  gen­
erate  a  ﬁngerprint.  Top:  Used  by  www.cdn-net.com/cc.js 
in  an  AudioContext.  Bottom:  Used  by  client.a.pxi. 
pub/*/main.min.js  and  js.ad-score.com/score.min.js  in  an 
OfflineAudioContext.  Full details in Appendix 12. 
Table  8:  Summary  of  WebRTC  local  IP  discovery 
on the top 1 million Alexa sites. 
6.4  AudioContext Fingerprinting 
The scale of our data gives us a new way to systematically 
identify new types of ﬁngerprinting not previously reported 
in the literature.  The key insight is that ﬁngerprinting tech­
niques  typically  aren’t  used  in  isolation  but  rather  in  con­
junction  with  each  other.  So  we  monitor  known  tracking 
scripts and look for unusual behavior (e.g., use of new APIs) 
in a semi-automated fashion. 
Using this approach we found several ﬁngerprinting scripts 
utilizing  AudioContext and related interfaces. 
In the simplest case, a script from the company Liverail15 
checks  for  the  existence  of  an  AudioContext  and  Oscilla­
torNode to add a single bit of information to a broader ﬁn­
gerprint.  More sophisticated scripts process an audio signal 
generated with an OscillatorNode to ﬁngerprint the device. 
This  is  conceptually  similar  to  canvas  ﬁngerprinting:  audio 
signals processed on diﬀerent machines or browsers may have 
slight diﬀerences due to hardware or software diﬀerences be­
tween the machines, while the same combination of machine 
and browser will produce the same output. 
Figure  8  shows  two  audio  ﬁngerprinting  conﬁgurations 
found  in  three  scripts.  The  top  conﬁguration  utilizes  an 
AnalyserNode  to  extract  an  FFT  to  build  the  ﬁngerprint. 
Both conﬁgurations process an audio signal from an Oscil­
latorNode  before  reading  the  resulting  signal  and  hashing 
it  to  create  a  device  audio  ﬁngerprint.  Full  conﬁguration 
details are in Appendix Section 12. 
We  created  a  demonstration  page  based  on  the  scripts, 
which  attracted  visitors  with  18,500  distinct  cookies  as  of 
this  submission.  These  18,500  devices  hashed  to  a  total  of 
713 diﬀerent ﬁngerprints.  We estimate the entropy of the ﬁn­
gerprint at 5.4 bits based on our sample.  We leave a full eval­
uation of the eﬀectiveness of the technique to future work. 
We  ﬁnd  that  this  technique  is  very  infrequently  used  as 
of  March  2016.  The  most  popular  script  is  from  Liverail, 
15https://www.liverail.com/ 
9: 
from 
the 
ﬁngerprinting 
output 
Visualization 
Figure 
Oscilla­
torNode 
script 
https://www.cdn-net.com/cc.js  for  three  diﬀerent  browsers 
on  the  same  machine.  We  found  these  values  to  remain 
constant for each browser after several checks. 
of  processed 
present  on  512  sites.  Other  scripts  were  present  on  as  few 
as 6 sites. 
This  shows  that  even  with  very  low  usage  rates,  we  can 
successfully  bootstrap  oﬀ  of  currently  known  ﬁngerprinting 
scripts to discover and measure new techniques. 
6.5  Battery API Fingerprinting 
As  a  second  example  of  bootstrapping,  we  analyze  the 
Battery Status API, which allows a site to query the browser 
for  the  current  battery  level  or  charging  status  of  a  host 
device.  Olejnik  et  al.  provide  evidence  that  the  Battery 
API  can  be  used  for  tracking  [43].  The  authors  show  how 
the battery charge level and discharge time have a suﬃcient 
number  of  states  and  lifespan  to  be  used  as  a  short-term 
identiﬁer.  These status readouts can help identify users who 
take  action  to  protect  their  privacy  while  already  on  a  site. 
For example, the readout may remain constant when a user 
clears  cookies,  switches  to  private  browsing mode,  or  opens 
a new browser before re-visiting the site.  We discovered two 
ﬁngerprinting  scripts  utilizing  the  API  during  our  manual 
analysis of other ﬁngerprinting techniques. 
One script, https://go.lynxbroker.de/eat  heartbeat.js, re­
trieves the current charge level of the host device and com­
bines  it  with  several  other  identifying  features.  These  fea­
tures  include  the  canvas  ﬁngerprint  and  the  user’s  local  IP 
OscillatorGainAnalyserDestinationFFT[-121.36, -121.19, ...]SHA1(                 )eb8a30ad7...=0OscillatorDynamicsCompressorDestinationTriangle WaveSine WaveBuﬀerMD5(                 )ad60be2e8...[33.234, 34.568, ...]700 -80-100-120-140dBFrequency Bin Number-160-180-200-220Chrome Linux 47.0.2526.106Firefox Linux 41.0.2Firefox Linux 44.0b27508008509009501000address retrieved with WebRTC as described in Section 6.1 
and Section 6.3.  The second script, http://js.ad-score.com/ 
score.min.js,  queries  all  properties  of  the  BatteryManager 
interface,  retrieving  the  current  charging  status,  the  charge 
level,  and  the  time  remaining  to  discharge  or  recharge.  As 
with  the  previous  script,  these  features  are  combined  with 
other identifying features used to ﬁngerprint a device. 
6.6  The wild west of ﬁngerprinting scripts 
In  Section  5.5  we  found  the  various  tracking  protection 
measures to be very eﬀective at reducing third-party track­
ing.  In Table 9 we show how blocking tools miss many of the 
scripts we detected throughout Section 6, particularly those 
using  lesser-known  techniques.  Although  blocking  tools  de­
tect the majority of instances of well-known techniques, only 
a fraction of the total number of scripts are detected. 
Disconnect 
EL  +  EP 
Technique  % Scripts  % Sites  % Scripts  % Sites 
88.3% 
Canvas 
90.6% 
Canvas Font 
WebRTC 
5.6% 
1.6% 
Audio 
17.6% 
10.3% 
1.9% 
11.1% 
78.5% 
97.6% 
21.3% 
53.1% 
25.1% 
10.3% 
4.8% 
5.6% 
Table  9:  Percentage  of  ﬁngerprinting  scripts  blocked  by 
Disconnect or the combination of EasyList and EasyPrivacy 
for  all  techniques  described  in  Section  6.  Included  is  the 
percentage  of  sites  with  ﬁngerprinting  scripts  on  which 
scripts are blocked. 
Fingerprinting  scripts  pose  a  unique  challenge  for  manu­
ally curated block lists.  They may not change the rendering 
of a page or be included by an advertising entity.  The script 
content  may  be  obfuscated  to  the  point  where  manual  in­
spection is diﬃcult and the purpose of the script unclear. 
Figure  10:  Fraction  of  ﬁngerprinting  scripts  with  promi­
nence  above  a  given  level  blocked  by  Disconnect,  EasyList, 
or EasyPrivacy on the top 1M sites. 
OpenWPM’s active instrumentation (see Section 3.2) de­
tects  a  large  number  of  scripts  not  blocked  by  the  current 
privacy  tools.  Disconnect  and  a  combination  of  EasyList 
and EasyPrivacy both perform similarly in their block rate. 
The  privacy  tools  block  canvas  ﬁngerprinting  on  over  78% 
of  sites,  and  block  canvas  font  ﬁngerprinting  on  over  90%. 
However,  only  a  fraction  of  the  total  number  of  scripts  uti­
lizing  the  techniques  are  blocked  (between  10%  and  25%) 
showing  that  less  popular  third  parties  are  missed.  Lesser-
known  techniques,  like  WebRTC  IP  discovery  and  Audio 
ﬁngerprinting have even lower rates of detection. 
In  fact,  ﬁngerprinting  scripts  with  a  low  prominence  are 
blocked  much  less  frequently  than  those  with  high  promi­
nence.  Figure  10  shows  the  fraction  of  scripts  which  are 
blocked by Disconnect, EasyList, or Easyprivacy for all tech­
niques analyzed in this section.  90% of scripts with a promi­
nence  above  0.01  are  detected  and  blocked  by  one  of  the 
blocking  lists,  while  only  35%  of  those  with  a  prominence 
above 0.0001 are.  The long tail of ﬁngerprinting scripts are 
largely unblocked by current privacy tools. 
7.  CONCLUSION AND FUTURE WORK 
Web privacy measurement has the potential to play a key 
role  in  keeping  online  privacy  incursions  and  power  imbal­
ances in check.  To achieve this potential, measurement tools 
must be made available broadly rather than just within the 
research  community.  In  this  work,  we’ve  tried  to  bring  this 
ambitious goal closer to reality. 
The analysis presented in this paper represents a snapshot 
of results from ongoing, monthly measurements.  OpenWPM 
and census measurements are two components of the broader 
Web Transparency and Accountability Project at Princeton. 
We are currently working on two directions that build on the 
work presented here.  The ﬁrst is the use of machine learning 
to  automatically  detect  and  classify  trackers.  If  successful, 
this  will  greatly  improve  the  eﬀectiveness  of  browser  pri­
vacy  tools.  Today  such  tools  use  tracking-protection  lists 
that  need  to  be  created  manually  and  laboriously,  and  suf­
fer from signiﬁcant false positives as well as false negatives. 
Our large-scale data provide the ideal source of ground truth 
for training classiﬁers to detect and categorize trackers. 
The  second  line  of  work  is  a  web-based  analysis  platform 
that  makes  it  easy  for  a  minimally  technically  skilled  ana­
lyst to investigate online tracking based on the data we make 
available.  In  particular,  we  are  aiming  to  make  it  possible 
for  an  analyst  to  save  their  analysis  scripts  and  results  to 
the server, share it, and for others to build on it. 
8.  ACKNOWLEDGEMENTS 
We  would  like  to  thank  Shivam  Agarwal  for  contribut­
ing  analysis  code  used  in  this  study,  Christian  Eubank  and 
Peter Zimmerman for their work on early versions of Open-
WPM, and Gunes Acar for his contributions to OpenWPM 
and helpful discussions during our investigations, and Dillon 
Reisman for his technical contributions. 
We’re  grateful  to  numerous  researchers  for  useful  feed­
back:  Joseph  Bonneau,  Edward  Felten,  Steven  Goldfeder, 