### WebRTC Local IP Discovery and Privacy Concerns

WebRTC (Web Real-Time Communication) allows for the discovery of the best network path between peers via JavaScript. Each peer collects all available candidate addresses, including local network interface addresses (such as Ethernet or WiFi) and public-side NAT (Network Address Translation) addresses, and makes them available to the web application without explicit user permission. This has raised significant privacy concerns: users behind a proxy or VPN can have their ISP’s public IP address exposed [59]. We focus on a slightly different privacy concern: users behind a NAT can have their local IP address revealed, which can be used as an identifier for tracking. A detailed description of the discovery process is provided in Appendix Section 11.

#### Detection Methodology

To detect WebRTC local IP discovery, we instrument the `RTCPeerConnection` interface prototype and record access to its method calls and property access. After the measurement is complete, we select the scripts that call the `createDataChannel` and `createOffer` APIs and access the `onicecandidate` event handler. We manually verified that these scripts are indeed retrieving candidate IP addresses, with zero false positives across 1 million sites. Next, we manually tested if such scripts are using these IPs for tracking. Specifically, we check if the code is located in a script that contains other known fingerprinting techniques, in which case we label it as "tracking." Otherwise, if we manually assess that the code has a clear non-tracking use, we label it as "non-tracking." If neither of these is the case, we label the script as "unknown." We emphasize that even non-tracking scripts present a privacy concern related to the leakage of private IPs.

#### Results

We found WebRTC being used to discover local IP addresses without user interaction on 715 sites out of the top 1 million. The vast majority (659) were done by third-party scripts, loaded from 99 different locations. A large majority (625) were used for tracking. The top 10 scripts accounted for 83% of usage, consistent with our other observations about the small number of third parties responsible for most tracking. A list of scripts is provided in Table 13 in the Appendix.

The number of confirmed non-tracking uses of unsolicited IP candidate discovery is small, and based on our analysis, none of them are critical to the application. These results have implications for the ongoing debate on whether or not unsolicited WebRTC IP discovery should be private by default [59, 8, 58].

| Classification | # Scripts | # First-parties |
|---------------|-----------|-----------------|
| Tracking      | 625 (88.7%) | 57 |
| Non-Tracking  | 40 (5.7%)  | 10 |
| Unknown       | 40 (5.7%)  | 32 |

**Figure 8:** AudioContext node configuration used to generate a fingerprint. Top: Used by `www.cdn-net.com/cc.js` in an `AudioContext`. Bottom: Used by `client.a.pxi.pub/*/main.min.js` and `js.ad-score.com/score.min.js` in an `OfflineAudioContext`. Full details in Appendix 12.

**Table 8:** Summary of WebRTC local IP discovery on the top 1 million Alexa sites.

### AudioContext Fingerprinting

The scale of our data provides a new way to systematically identify new types of fingerprinting not previously reported in the literature. The key insight is that fingerprinting techniques typically aren’t used in isolation but rather in conjunction with each other. So, we monitor known tracking scripts and look for unusual behavior (e.g., use of new APIs) in a semi-automated fashion.

Using this approach, we found several fingerprinting scripts utilizing `AudioContext` and related interfaces. In the simplest case, a script from the company Liverail15 checks for the existence of an `AudioContext` and `OscillatorNode` to add a single bit of information to a broader fingerprint. More sophisticated scripts process an audio signal generated with an `OscillatorNode` to fingerprint the device. This is conceptually similar to canvas fingerprinting: audio signals processed on different machines or browsers may have slight differences due to hardware or software differences between the machines, while the same combination of machine and browser will produce the same output.

**Figure 8** shows two audio fingerprinting configurations found in three scripts. The top configuration utilizes an `AnalyserNode` to extract an FFT to build the fingerprint. Both configurations process an audio signal from an `OscillatorNode` before reading the resulting signal and hashing it to create a device audio fingerprint. Full configuration details are in Appendix Section 12.

We created a demonstration page based on the scripts, which attracted visitors with 18,500 distinct cookies as of this submission. These 18,500 devices hashed to a total of 713 different fingerprints. We estimate the entropy of the fingerprint at 5.4 bits based on our sample. A full evaluation of the effectiveness of the technique is left for future work.

We find that this technique is very infrequently used as of March 2016. The most popular script is from Liverail, present on 512 sites. Other scripts were present on as few as 6 sites.

This shows that even with very low usage rates, we can successfully bootstrap off currently known fingerprinting scripts to discover and measure new techniques.

### Battery API Fingerprinting

As a second example of bootstrapping, we analyze the Battery Status API, which allows a site to query the browser for the current battery level or charging status of a host device. Olejnik et al. provide evidence that the Battery API can be used for tracking [43]. The authors show how the battery charge level and discharge time have a sufficient number of states and lifespan to be used as a short-term identifier. These status readouts can help identify users who take action to protect their privacy while already on a site. For example, the readout may remain constant when a user clears cookies, switches to private browsing mode, or opens a new browser before re-visiting the site. We discovered two fingerprinting scripts utilizing the API during our manual analysis of other fingerprinting techniques.

One script, `https://go.lynxbroker.de/eat heartbeat.js`, retrieves the current charge level of the host device and combines it with several other identifying features. These features include the canvas fingerprint and the user’s local IP address retrieved with WebRTC as described in Sections 6.1 and 6.3. The second script, `http://js.ad-score.com/score.min.js`, queries all properties of the `BatteryManager` interface, retrieving the current charging status, the charge level, and the time remaining to discharge or recharge. As with the previous script, these features are combined with other identifying features used to fingerprint a device.

### The Wild West of Fingerprinting Scripts

In Section 5.5, we found various tracking protection measures to be very effective at reducing third-party tracking. In Table 9, we show how blocking tools miss many of the scripts we detected throughout Section 6, particularly those using lesser-known techniques. Although blocking tools detect the majority of instances of well-known techniques, only a fraction of the total number of scripts are detected.

| Technique        | % Scripts | % Sites | Disconnect | EL + EP |
|------------------|-----------|---------|------------|---------|
| Canvas           | 88.3%     | 90.6%   | 78.5%      | 97.6%   |
| Canvas Font      | 5.6%      | 1.6%    | 21.3%      | 53.1%   |
| WebRTC           | 17.6%     | 10.3%   | 25.1%      | 10.3%   |
| Audio            | 1.9%      | 11.1%   | 4.8%       | 5.6%    |

**Table 9:** Percentage of fingerprinting scripts blocked by Disconnect or the combination of EasyList and EasyPrivacy for all techniques described in Section 6. Included is the percentage of sites with fingerprinting scripts on which scripts are blocked.

Fingerprinting scripts pose a unique challenge for manually curated block lists. They may not change the rendering of a page or be included by an advertising entity. The script content may be obfuscated to the point where manual inspection is difficult and the purpose of the script unclear.

**Figure 10:** Fraction of fingerprinting scripts with prominence above a given level blocked by Disconnect, EasyList, or EasyPrivacy on the top 1M sites.

OpenWPM’s active instrumentation (see Section 3.2) detects a large number of scripts not blocked by the current privacy tools. Disconnect and a combination of EasyList and EasyPrivacy both perform similarly in their block rate. The privacy tools block canvas fingerprinting on over 78% of sites and block canvas font fingerprinting on over 90%. However, only a fraction of the total number of scripts utilizing the techniques are blocked (between 10% and 25%), showing that less popular third parties are missed. Lesser-known techniques, like WebRTC IP discovery and Audio fingerprinting, have even lower rates of detection.

In fact, fingerprinting scripts with low prominence are blocked much less frequently than those with high prominence. **Figure 10** shows the fraction of scripts which are blocked by Disconnect, EasyList, or EasyPrivacy for all techniques analyzed in this section. 90% of scripts with a prominence above 0.01 are detected and blocked by one of the blocking lists, while only 35% of those with a prominence above 0.0001 are. The long tail of fingerprinting scripts are largely unblocked by current privacy tools.

### Conclusion and Future Work

Web privacy measurement has the potential to play a key role in keeping online privacy incursions and power imbalances in check. To achieve this potential, measurement tools must be made available broadly rather than just within the research community. In this work, we’ve tried to bring this ambitious goal closer to reality.

The analysis presented in this paper represents a snapshot of results from ongoing, monthly measurements. OpenWPM and census measurements are two components of the broader Web Transparency and Accountability Project at Princeton. We are currently working on two directions that build on the work presented here. The first is the use of machine learning to automatically detect and classify trackers. If successful, this will greatly improve the effectiveness of browser privacy tools. Today, such tools use tracking-protection lists that need to be created manually and laboriously, and suffer from significant false positives as well as false negatives. Our large-scale data provide the ideal source of ground truth for training classifiers to detect and categorize trackers.

The second line of work is a web-based analysis platform that makes it easy for a minimally technically skilled analyst to investigate online tracking based on the data we make available. In particular, we are aiming to make it possible for an analyst to save their analysis scripts and results to the server, share it, and for others to build on it.

### Acknowledgements

We would like to thank Shivam Agarwal for contributing analysis code used in this study, Christian Eubank and Peter Zimmerman for their work on early versions of OpenWPM, and Gunes Acar for his contributions to OpenWPM and helpful discussions during our investigations, and Dillon Reisman for his technical contributions.

We are grateful to numerous researchers for useful feedback: Joseph Bonneau, Edward Felten, Steven Goldfeder, and others.