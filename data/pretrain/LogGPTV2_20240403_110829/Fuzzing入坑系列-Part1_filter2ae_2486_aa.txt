# Fuzzing入坑系列-Part1
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言:
最近啃了[FuzzingBook](https://www.fuzzingbook.org)，然后记录一个关于入坑fuzzing的学习历程
## Fuzzing简介：
首先是关于软件测试：
软件测试主要是三种方式：
  1. 手工测试
  2. 半自动化测试
  3. 自动化测试
作者觉得Fuzzing是一种介于自动化和半自动化的测试方法
>
> 其核心思想是自动或半自动的生成随机数据输入到一个程序中，并监视程序异常，如崩溃，断言(assertion)失败，以发现可能的程序错误，比如内存泄漏。模糊测试常常用于检测软件或计算机系统的安全漏洞。
>
> ​
> ——[维基百科:模糊测试](https://zh.wikipedia.org/wiki/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95)
就Fuzzing来说，模糊测试主要有两个重要的模块组成 **Fuzzer** 和 **Runner**
下面是其类图：
一个很简单的调用关系来进行简单的包装，Runner类主要负责将数据输入程序，以及监控程序的运行状态，这次我们先重点介绍Fuzzer
## Fuzzer
对于模糊测试来说，很重要的一点就是对数据进行模糊处理，所以一般在实现上都会单独把 **Fuzzer** 模块抽离出来
如上图所示，对于数据变异常用的三种基础的方式是 **随机删除** ， **随机添加** ， **随机反转(filp)**
，下面是简单的实现代码，我们后续的工作也是基于其来进行的构建
    def del_random_chr(s):
            if s is None:
                return self.insert_random_chr(s)
            pos = random.randint(0, len(s))
            return s[:pos]+s[pos+1:]
        def insert_random_chr(s):
            pos = random.randint(0, len(s))
            new_s = chr(random.randrange(32, 127))
            return s[:pos]+new_s+s[pos:]
        def flip_random_chr(s):
            if s is None:
                return self.insert_random_chr(s)
            pos = random.randint(0, len(s)-1)
            bit = 1 python3 mutator_test.py
    http://www.google.com/search?q=fuzzing
    http:/ww.gooc:le.co/earcH?qcom/sarch?=uuzinw
    http://www.google.com[/search?q=fuzzing;
    http://www.g%oogl.c`omd-se]rc?qfi9o
    htp:/cww.qgoglg.coi/search?pfuzajg
    http:/+www.eoogle.coe/ search?q=fuzzing
确实将数据进行了模糊处理，但其似乎太发散了，基本不在我们可控范围内，所以我们需要考虑一种方案，其能够引导我们的Fuzzer来生成数据，相当于一种具有引导性的Fuzzer，所以我们需要学习一个新的概念：
**Code Coverage** (代码覆盖率)
## Code Coverage:
> **代码覆盖** （英语： **Code coverage**
> ）是[软件测试](https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94%E6%B8%AC%E8%A9%A6)中的一种[度量](https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94%E5%BA%A6%E9%87%8F)，描述[程序](https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F)中[源代码](https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A2%BC)被测试的比例和程度，所得比例称为
> **代码覆盖率** 。
> ——[维基百科:代码覆盖率](https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A2%BC%E8%A6%86%E8%93%8B%E7%8E%87)
关于代码覆盖率，其实顾名思义，说简单了也就是我们输入的数据，能够让程序的那些代码得倒执行以及其执行的次数，包括其执行次数占总数的一个比例。
在FuzzingBook中，其作者举了一个🌰：
    /* CGI decodeing as c program */
    #include 
    #include 
    #include 
    #define DEBUG   0
    typedef unsigned int bool;
    bool true = 1;
    bool false = 0;
    int hex_values[256];
    #define HEX_VALUES_LENGTH sizeof(hex_values)/sizeof(int)
    void init_hex_values() {
        for (int i = 0; i < HEX_VALUES_LENGTH; i++) {
            hex_values[i] = -1;
        }
       for (char i='0'; i<='9'; i++) {
           hex_values[i] = i-'0';
       }
       for (char i='a'; i<='f'; i++) {
           hex_values[i] = i-'a'+0xa;
       }
       for (char i='A'; i<='F'; i++) {
           hex_values[i] = i-'A'+0xA;
       }
    }
    bool cgi_decode(char *s, char *t) {
        while (*s!='\0')
        {
            switch (*s)
            {
            case '+':
                *t++ = ' ';
                break;
            case '%':
                {
                    int dight_high = *++s;
                    int dight_low = *++s;
                    if (hex_values[dight_high]<0 && hex_values[dight_low]<0) {
                        return false;
                    }
                    *t++ = (hex_values[dight_high]<<4) + hex_values[dight_low];
                }
                break;
            default:
                *t++ = *s;
                break;