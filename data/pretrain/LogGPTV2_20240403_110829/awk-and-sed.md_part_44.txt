339.
第十二章 
综合应用
---
## Page 322
序。因此，第1卷的所有页码都被按顺序排列，然后才排到第2卷的页码。最
一个参数-t可能是最重要的，
和大写字母叠放在一起；换句话说，在排序中它们将被看做是同一个字符。
空格。选项-d 表示按字典排序且忽略符号和特殊字符。选项-F 表示将小写字母
可以看出，我们为 sort 命令设置一些选项。第一个选线为-b，表示忽略前导的
下面是使用的命令行：
input.idx 的输出，命令 sort 的结果为：
1后面将跟随10，而不是2）。
字
序
王
符
，我们将输出结果由管道输送给unia 来删除相同的条目。处理来自
需要使用数值型排序（如果我们没有告诉 sort关键字是数值型的，那么数字
。如果第四个字段（+3）存在，
主关键字为第一个字段的末端，
关键字为第-个字段。同样，用“-”表示排序关键字的末端。
。选项“+”表示从行开始处跳过的字段数。
Xlib:repainting canvas:88
 graphics : CANVAS_X_PAINT _WINDOW : 86
sort -bdf -t: +0 -1 +1 -2 +3 -4 +2n -3n | uniq
Xlib.h header file::89
X Window System:X Window ID for paint window:87
X Window System:events:84
type:Xv_singlecolor:80
type:Xv_object : 49
toolkit: (See X Window System) . :
macro: XV_INIT_ARGS: 46
header file:Xlib. h:89
graphics:^zz(see also server image) :
graphics:XView model :83
QQ群：
50192241
。注意，
，它告诉程序在排序关键字时用冒号作为字段定界
表示卷号。排序的最后一个关键字是页码，
或第二个字段的开始。第二个字段是此关键
340
我们在按卷号排序后才对页码进行排
，因此，
我们用“+0”来表示排序
第十二章 
“-|”表示排
综合应用
下
---
## Page 323
的条件可以提取出来并表示成如下的伪代码：
这个程序的核心是将当前与前面的条目相比较并决定输出的那一个。实现比较
在条目已经排好序了。
第四个域是可选的。现在，我们只考虑单本书的索引，因此没有卷号。注意现
PRIMARY : SECONDARY : PAGE : VOLUME
列表。这个程序的输入是用冒号分隔的4个字段：
处理页码
print PAGE
if (SECONDARY == prevSECONDARY)
if (PRIMARY == prevPRIMARY)
PAGE = $3 
SECONDARY = $2
prevSECONDARY = SECONDARY
prevPRIMARY = PRIMARY
print PRI MARY:SECONDARY: PAGE
print PRI MARY:SECONDARY:PAGE
else
PRIMARY = $1
Xv_singlecolor type::80
Xv_object type::49
XV_INIT_ARGS macro: :46
XView:programs; initialization:45
else
QQ群：
50192241
341
第十二章 
综合应用
---
## Page 324
在完整的脚本中添加一个附加的测试，
这样3个只有页码不同的条目将被合并为一个项。
再次只输出页码，
下一个条目也和两个关键字都匹配：
printf语句代替 print语句避免自动换行。）这个页码被添加到前面的条目
因为主关键字和次关键字都和前面的条目相匹配，
下一条目是：
关键字时，它们不同，我们输出下面的记录：
当我们将这个条目的主关键字和前面一个相比较时，它们是相同的。当比较次
下一个条目是：
主关键字和前面的主关键字不匹配，将按下面形式输出行：
我们来看这些代码如何处理一系列的条目，首先是：
和下面的一样：
#
#!/work/bin/nawk -f
XView: about:3, 7, 10 
xView: about : 10
XView: about:3,7
XView: about : 7
XView: about : 3
XView: about :3
XView: :18
xView: : 18
QQ群：
现在的条目如下所示：
50192241
342
来确定卷的标示符是否匹配。下面是完
我们将只输出页码。
第十二章
综合应用
（用
---
## Page 325
PAGE = $3 
SECONDARY = $2
PRIMARY = $1 
#将字段赋给变量
# remove secondary key along with "^zz"
#创建临时副本并将"~zz"从副本中除去
#检查 see also 条目并收集到数组中
VOLUME = $4 
#主例程－应用到所有的输入行
#输入应该是PRIMARY:SECONDARY:PAGE:VOLUME
# Version 1. 1 7/10/90
#作者：Dale Dougherty
# pagenums.idx－收集相同条目的页面
sub(/\) */, "", tmpSecondary)
sub(/~zz\([Ss]ee +[Aa]Iso */, "", tmpSecondary)
tmpSecondary = SECONDARY
if (SECONDARY ~ /\([Ss]ee +[Aa] Iso/)
. = SHO · = SH  N1938
#
QQ群：
50192241
343
第十二章 
综合应用
---
## Page 326
volpage(VOLUME, PAGE)
printf (";")
printf (",%s", PAGE)
if (vOLUME == prevVolume)
# print only VOLUME:PAGE
# test to see 
# test to see if each SECONDARY key matches previous key
# test to see if each PRIMARY key matches previous key
# the page number is printed.
# record. 
# Conditionals to compare keys of current record to previous
else {
if (SECONDARY == prevSecondary)
if (PRIMARY == prevPrimary) {
↓ # end test for see Also 
prevSecondary = tmpSecondary
# assign copy to previous secondary key
prevPrimary = PRIMARY 
seeAlsoList[++eachSeeAlso] = SECONDARY "; "
# assign to next element of seeAlsoList
next
sub(/\）*/，""， SECONDARY)
sub(/^.*~zz\([Ss]ee +[Aa] Iso */, "", SECONDARY)
 If Primary and Secondary keys are the same, only 
QQ群：
if VOLUME matches;
50192241
第十二章 
综合应用
---
## Page 327
volpage (VOLUME, PAGE)
printf ("%s:%s:", PRIMARY, SECONDARY)
else {
printf ("%s:"， $0)
printf ("\n")
# if we have an array of See Alsos, output them now
else { # PRIMARY != prev 
} # end of test for PRIMARY == prev 
volpage (VOLUME, PAGE)
printf ("\n%s:%s:", PRIMARY, SECONDARY)
# pr int PRIMARY:SECONDARY: VOLUME:PAGE
if (eachSeeAlso) outputSeeAlso(2)
# if array of See Alsos, output them now 
if (NF == 1) {
if (NR != 1)
else{
if (eachSeeAlso) outputSeeAlso(1)
QQ群：50192241
345
第十二章 
综合应用
---
## Page 328
printf ("%s", seeAlsoList[i])
for (i = 1; i <= eachSeeAlso; ++i)
printf ("\n%s:%s; (See also ", prevPrimary, prevSecondary)
printf ("\n%s: (See also ", prevPrimary)
# LEVEL - indicates which key we need to output
function outputSeeAlso(LEVEL) {
# outputSeeAlso function -- list elements of seeAlsoList 
printf("\n")
if (eachSeeAlso) outputSeeAlso(1)
# in case last entry has "see Also"
sub(/; $/, ".):", seeAlsoList[eachSeeAlso])
sub (/;.*$/, "", prevSecondary)
else {
if (LEVEL == 1)
END {
# at end, print newline
} # end of main routine
prevVolume = VOLUME
prevSecondary = SECONDARY
prevPrimary = PRIMARY 
QQ群：
50192241
346
第十二章 
综合应用
---
## Page 329
而我们希望下面所示的那样，将它们组合并放到一个列表中：
况。我们不希望输出：
这个脚本也可以处理“see also”条目。因为这些记录已经被排序，所以可以
中。
序；它只是简单地比较关键字，如果它们相同，将相应的页码加入到一个列表
注意，
nfo
，用这个方法可以减少条目。
printf ("%s%s",v, p) 
 # otherwise print VOLUME^PAGE
 # if VOLUME is empty then print PAGE only
# two args: volume & page
 # volpage function -- determine whether or not to print volume 
Toolkit (see also Xt; XView; Motif)
Toolkit (see also Xt) (See also XView) (See also Motif).
else
printf ("%s", p) 
if （v == "" 
function volpage(v, p) 
eachSeeAlso = 0
首先程序的输入应该已经按关键字排序。
QQ群：
50192241
347
页码也是有顺序的，因此在输
第十二章 
综合应用
---
## Page 330
程序 combine.idx和 pagenums.idx很相像，它对索引来进行另一次扫描，比较
们将处理有相同主关键字的条目。我们还希望查找连续的页码并将它们合并为
合并具有相同关键字的条目
符号“~”作为卷号和页码列表之间的临时定界符。
一个范围。
程序 pagenums.idx减少了一些条目，这些条目除了页码外都是相同的。现在我
下面是一个处理主索引所产生的结果：
下面是一个处理单本书索引的结果：
被调用，因此将它们定义为函数的主要原因是为了减少重复。
volpage(（）用于确定是否需要输出卷号。这两个函数在程序代码中不止一个地方
调用函数outputSeeAlso（)来读取这个数组的所有元素并打印它们。函数
给 prevSecondary，以便和下一个条目比较。
seeAlsoList的一个元素。我们对 SECONDARY中的次关键字做备份，并将它赋
除圆括号，次关键字（如果存在）和“see also”
要完成这一功能，我们创建了名为 seeAIsoList 的数组。从 SECONDARY开始删
Xt: types: I^ 43, 54, 61 
Xt: reserved names: I^43,58
Xt:packages:I^43,61; I1^42 
Xt:objects; list of:I^43,58; 11~40 
Xt:example of programming interface:I^44,65 
 XView:as object-oriented system:17
Xv_Font type::310
Xlib.h header file::89,294
Xlib:repainting canvas:88
Xlib: :6 
XFontStruct structure::317
X Window System:Xlib:6
Xt:reserved prefixes: I^43,58
reserved names:table of:I^43
xView: about:3, 7, 10 
XView: :18 
QQ群：
50192241
348
然后将它赋给
第十二章
综合应用
---
## Page 331
换句话说就是，如果前面的元素加1后得到当前的元素，那么它们是连续的。
素加一的结果相比较。
要检查代码是否连续，
函数将它们输入到一个数组中。
你将注意到上面的伪代码没有输出页码。这个脚本的第二个作用就是检查页
测试第三关键字（我们只需知道它们存在）。
关键字。我们必须测试主关键字和次关键字来看他们是否唯一或相同，而不必
码，并将连续的页码合并到一个列表。由逗号分隔的页码列表可以用 split()
当主关键字相同时可以将它们删除。实际代码要更复杂一些，因为包含了第三
他们将按下面的方式输出：
如果主关键字匹配，我们将只输出次关键字。例如，如果有下面的三个条目：
条目。因此，我们不必比较次关键字。
pagenums.idx 处理完所有条目时，则不存在主关键字和次关键字都相同的两个
们将忽略第三关键字。
主关键字相同的条目。下面的伪代码抽象了这个比较（为了使问题更简单，我
eachpage[j-1]+1 == eachpage[j]
:as object-oriented system:17
XView: 18
 XView:as object-oriented system:17
XView:about:3, 7, 10 
xView: 18
:about:3, 7, 10 
prevSECONDARY = SECONDARY
prevPRIMARY = PRIMARY
print PRIMARY:SECONDARY
else
print :SECONDARY:
if (PRIMARY == prevPRIMARY)
PAGE = $3
SECONDARY
PRIMARY = $1
= $2
QQ群：
我们可以遍历数组，并将其中的每个元素与它前面的元
而只显示如何比较主关键字和次关键字）。当
50192241
349.
第十二章
综合应用
---
## Page 332
下面是程序 combine.idx 的完整代码：
页码列表。
必须将卷号从页码列表中分离出来，然后通过调用函数[rageOfPage()}来处理
实际代码比这更复杂，因为要从一个函数中调用它并且识别卷和页码对。首先
连字符分隔的第一个页码和最后一个页码：
实在 while循环中处理的知道循环条件为假，且页码不连续。然后我们输出用
前面一个元素成为这个范围中的第一个页码而当前元素成为最后一个页码。这
BEGIN {FS = ":"; OFS = ""}