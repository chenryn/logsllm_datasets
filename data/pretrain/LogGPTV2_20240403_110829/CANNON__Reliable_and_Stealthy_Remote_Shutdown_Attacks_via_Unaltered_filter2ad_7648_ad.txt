the victim’s error count reaches 256 (8x32) and enters the
bus-off state. Thus, after the adversary causes an error in
the ﬁrst victim transmissions (using its period), targeting the
retransmissions is signiﬁcantly easier for the adversary.
E. Alternative CANnon implementations
Although the strategy described above is an efﬁcient method
to force the compromised CAN controller to transmit, we
also describe alternative methods that achieve a shutdown
attack using different parts of the CAN frame to highlight
the ﬂexibility an adversary has for the CANnon attack.
Firing with SOF bit: Instead of the above two-phase ap-
proach, imagine if the adversary could just skip to the ﬁring
phase. Our insight here is to use the SOF bit but with a
different approach from Sec. IV. By stopping the clock right
before a SOF transmission, the adversary can inject a dominant
SOF bit during a victim’s recessive bit. Since the SOF is
only transmitted after a bus idle,
the adversary can only
transmit a SOF when it knows the bus is idle. Once bus
idle is detected, the compromised CAN controller will load
the registers to prepare for frame transmission. The adversary
can pause the clock right when the transmit registers are
loaded (experimentally, we ﬁnd this to be two CAN bit times),
effectively stopping the transmitter before it sends a SOF.
However, as the SOF is only a single bit, the error active ﬂag
from the victim will cause an error on the compromised ECU,
forcing it to retransmit. Instead of avoiding this retransmission,
the adversary can exploit it. The victim’s error ﬂag will cause
the compromised ECU to think it simply lost arbitration.
The adversary can then wait for a bus idle to occur and
perform its attack again. Bus idle will not be observed until
after the victim successfully retransmits so the adversary will
need to target the periodic victim transmissions instead of
its retransmissions from the loading/ﬁring attack. While this
attack is not as fast as the loading/ﬁring attack,
it does
enable the CANnon attack on alternative MCU architectures
as explained in Sec. VI.
Firing with ACKs: Instead of using data frame transmissions
to attack a victim ECU, the adversary could exploit another
scenario where the compromised ECU transmits a dominant
bit:
the acknowledgement (ACK) slot. To acknowledge a
correctly received data frame, an ECU will set a dominant
bit during the ACK slot of the data frame. Our idea here is
the adversary could pause the compromised ECU right before
it transmits the ACK bit for a victim’s frame (the bit before
the ACK slot is a recessive CRC delimiter bit). Suppose the
CAN peripheral offers a SOF bit interrupt, which we observe
in a number of automotive MCUs [30], [31]. If the adversary
knows when the victim frame transmission starts and can
determine when the CRC delimiter bit occurs in the frame,
the adversary can pause the clock before the ACK slot and
resume the clock just a few bit times later during the EOF,
causing an error on the victim. The challenge here is that the
adversary must precisely predict when an ACK will occur and
the number of bits in the victim frame. Thus, victim frames
that contain static or predictable data make an ideal target.
F. Practical challenges
We now discuss approaches to solving two practical chal-
lenges we encounter when launching CANnon against real
vehicles in Sec. VI, one of which is a new capability resulting
from the peripheral clock gating vulnerability.
Period deviations in victim frames: Up to now, we make the
assumption that victim frame transmissions will be periodic.
However, in practice, prior work [21] has found that period
deviation is nonzero, which makes it difﬁcult for the adversary
to predict victim transmission times and thus perform the
shutdown attack. Using insights from prior work [15], we
could estimate when a victim message will initially appear
on the bus. However, these insights relied on other messages
in the network that would transmit immediately before the
victim message, which is not always guaranteed. Likewise,
even considering these circumstances, this approach has been
found to not be reliable [21].
We introduce a new capability that permits an adversary
to guarantee when a victim message appears on the CAN
bus. We ﬁrst revisit an observation made in Sec. IV during
tests on real vehicles. When the compromised ECU holds a
dominant state, all other ECUs will queue their frames waiting
to transmit during bus idle. Upon releasing this dominant state,
all transmitting ECUs will attempt to clear their queues. We
ﬁnd that these queued frames appear on the bus in a pre-
deﬁned order: by their arbitration ID. Our insight here is to
determine which messages should arrive in a given range of
time prior to launching our attack. By holding the dominant
203
state for this range of time,4 we can predict the ordering of
messages and thus predict the start of the victim transmission.
Interruptions by higher-priority messages: Another practi-
cal challenge we encounter when launching CANnon against
real vehicles is that higher-priority messages can interrupt the
attack. If the adversary targets a victim frame with a low
priority, we ﬁnd that higher-priority messages can interrupt
the repeated retransmissions by the victim. As the adversary
expects the victim retransmissions to occur back-to-back, these
interruptions can cause the attack to fail by causing collateral
damage against unintended victims. Thus, the adversary could
use prior work [21] to identify all source IDs of a victim ECU
and simply select the highest-priority message, minimizing the
chance of interruption by a higher-priority message. Addition-
ally, prior work [21] also ﬁnds that safety-critical ECUs tend
to transmit higher-priority frames so our adversary is already
incentivized to target higher-priority frames.
VI. EVALUATION
In this section, we demonstrate CANnon using two auto-
motive MCUs found in modern vehicles and launch shutdown
attacks against a variety of targets, including two real vehicles.
We also detail experiments to highlight the reliability and
stealth of CANnon.
A. Experimental setup
To demonstrate the signiﬁcance of this attack, we launch
CANnon from automotive MCUs used by modern vehicles, and
we target real ECUs from two real vehicles. In this work, we
do not explicitly show the ability to compromise an in-vehicle
ECU remotely as this has been the focus of a large number of
papers [3], [4], [26]–[28]. Rather, we build our attack on the
assumption that these existing techniques would be successful
in remotely compromising the software of automotive ECUs.
One of the key factors that enabled the discovery of this
vulnerability was our choice of experimental setup, which is
likely why, to the best of our knowledge, this incidence has not
been studied before. In this work, we initially used the Arduino
Due board, which closely resembles the capabilities of modern
automotive MCUs. However, if we look at prior work in the
ﬁeld [6], [10], [11], [15]–[17], [32], [33], we ﬁnd widespread
use of the legacy design of automotive ECUs, namely an
Arduino Uno board with a standalone controller. Thus, as a
result of our choice of experimental setup, none of these prior
works could have identiﬁed the CANnon vulnerability; where
the industry moved to a modern design, prior research has
continued to use the legacy design.
Automotive MCUs: In addition to the Arduino, we test
CANnon on evaluation boards for two automotive MCUs from
Microchip and STMicro (commonly known as ST). These
boards will serve as the compromised in-vehicle ECUs as they
are used in modern production vehicles. In fact, STMicro is
one of the top ﬁve semiconductor suppliers for the automotive
industry [34], and its MCUs are likely to be in many modern
vehicles. The features and architectures they offer are likely
generalizable to other automotive MCUs as they are both
marketed as high-performance networking MCUs, which are
two key features we identify in Sec. IV. While we do not
evaluate boards from every MCU supplier, we ﬁnd multiple
references to software APIs for peripheral clock gating in
reference manuals and market reports [35]–[39].
Speciﬁcally, we evaluate: (1) the Microchip SAM V71
Xplained Ultra board, which uses an ATSAMV71Q21 32-bit
MCU operating at 150 MHz and is designed for in-vehicle
infotainment connectivity [31], [40], and (2) the STMicro
SPC58EC Discovery board, which uses an SPC58EC80E5 32-
bit MCU operating at 180MHz and is designed for automotive
general-purpose applications [41], [42]. It is likely that other
MCUs in the same family (i.e. SAM V MCUs and ST SPC5
MCUs) share the same peripheral clock gating vulnerability
as demonstrated by similarities within an MCU family’s
reference manuals [30], [31]. Consequently, the Arduino Due
board identiﬁed in Sec. IV uses an AT91SAM3X8EA 32-bit
MCU operating at 84 MHz from an older series of the same
SAM family [30].
For the SPC58 MCU, we encountered a challenge in ﬁnding
a clock enable/disable function. All clock functions requested
the peripheral
to essentially give the MCU permission to
disable the peripheral’s clock. Upon receiving the request,
the peripheral waits for all transmission operations to stop
before the MCU can disable its clock. However, we found an
alternative approach to directly control the clock on the SPC58
that bypasses this request procedure. In fact, this alternative
contradicts the expected implementation as described in the
SPC58’s reference manual [42]. The SPC58 utilizes operat-
ing modes that change the conﬁgurations for the MCU. In
particular, we focus on two modes: the DRUN mode, which
permits all peripherals to run normally, and the SAFE mode,
which stops the operation of all active peripherals. We ﬁnd
that a transition to DRUN is equivalent to enabling the CAN
peripheral’s clock and a transition to SAFE effectively disables
the peripheral’s clock without permission from the peripheral
itself. A limitation introduced here is that a clock enable could
not occur soon after a clock disable5, but the SOF-based attack
from Sec. V successfully works for the SPC58.
Real vehicle testbed: Additionally, we demonstrate CANnon
against two real vehicles: a 2009 Toyota Prius and a 2017
Ford Focus. We connect to the CAN bus by accessing the bus
via the vehicle’s On-Board Diagnostics (OBD) port to emulate
a remotely-compromised ECU. We also identify the mapping
of arbitration IDs to source ECUs using details from prior
work [21]. We only launch the CANnon attack against vehicles
while they are parked to avoid any potential safety concerns.
Note that these vehicles have their engine running with all
ECUs actively transmitting onto the network. As detailed in
prior work [21], vehicles tend to transmit mostly periodic
4Where prior work required injecting a message to guarantee transmission
time of a victim, we can simply disrupt the bus to “simulate” an injected
message.
5The transition to SAFE mode (or effectively disabling the clock) includes
several processes that must complete for safety reasons before the peripheral
clocks can be enabled.
204
messages, and we ﬁnd that these transmissions start when the
engine is started. Even if the vehicle is taken on a drive, only
the data payloads change rather than periodic transmission
rates. We also launch CANnon against an Arduino Due, a
PeakCAN USB device, and a 2012 Ford Focus powertrain
ECU in a variety of synthetic network setups.
B. CANnon against real vehicles
Basic disruption on real vehicles: We launch the basic
disruption attack against both real vehicles using the SAM
V71 and SPC58 evaluation boards. As discussed in Sec. IV,
ECUs often implement a time-out feature that prevents a CAN
transceiver from holding the dominant state for an extended
period of time. We experimentally ﬁnd that we can maintain
up to 1ms of dominant state on the bus with at least 4µs
of recessive in-between on both vehicles. We ﬁnd that this
attack prevents ECUs from communicating on the bus and will
trigger malfunction lights on the instrument panel and even
diagnostic codes that indicate loss of ECU communication.
Powertrain ECU shutdown in 2017 Focus: We demonstrate
a shutdown attack with the V71 MCU using the loading/ﬁring
attack in Sec. V. The powertrain ECU transmits several
arbitration IDs, but we select the highest-priority ID using
methods from prior work [21]. In our pre-analysis of the
victim transmission times, we ﬁnd that a majority of the
powertrain ECU’s IDs will transmit back-to-back. With our
technique for guaranteeing transmission times in Sec. V, we
hold the dominant bit when we expect the victim to appear
(for approximately 50µs). Upon release of the dominant bit,
the target victim frame will be the ﬁrst frame to transmit and,
thus, we launch our ﬁring phase on that frame. We target the
control ﬁeld and perform this attack 32 times, allowing us to
shut down the powertrain ECU in about 2ms. Although the
powertrain ECU does auto-recover, the ability to shut down
the ECU quickly demonstrates the speed of our attack.
Power steering ECU shutdown in 2009 Prius: We demon-
strate a shutdown attack with the SPC58 MCU using the
SOF-based attack in Sec. V as the SPC58 cannot enable
the clock immediately after disabling it. The target victim
is a power steering ECU that transmits three IDs: 0x262,
0x4C8, and 0x521. We choose the ID with the smallest period
(0x262 with period of 20ms) and ﬁnd that its period deviation
is quite small using methods from prior work [21]. As the
SOF approach requires a successful transmission between each
attack, this shutdown is signiﬁcantly longer since we do not
target retransmissions. We shut down the power steering ECU
after 700ms, and we ﬁnd that it remains permanently ofﬂine.
C. Attack reliability
One important aspect of a reliable attack is repeatability.
We envision an adversary who purchases the same MCU that
the compromised ECU uses as preparation for their remote
exploit and shutdown attack. After tuning attack parameters to
the speciﬁc MCU (e.g. number of MCU cycles prior to SOF
transmission), the adversary hopes that the tuned parameters
will be similar to that of the real victim MCU. We ﬁnd
that properly tuned attack code across multiple copies of
our test MCUs over a few months could repeatedly produce
the same output to the bus. We attribute this success to the
strict speciﬁcations that ECU hardware must follow in the
manufacturing stage.
We now compare the reliability of CANnon using the
hardware timer interrupt centered on each CAN bit versus
manually counting MCU clock cycles. In this experiment, we
use the Microchip and Arduino Due boards to transmit active
error frames at repeated intervals. We transmit these frames
against an Arduino Due victim that sends its frames every
10ms with zero deviation in the period. Using a hardware
timer to launch our attack, we ﬁnd that both the Microchip
and Arduino Due boards can shut down the victim 100%
of the time. However, if we try to perform the active frame
transmissions by manually keeping count of MCU clock
cycles, we only achieve the attack 10% of the time due to
variations discussed in Sec. V.
We also compare the reliability to guarantee victim trans-
mission time versus prior work [15] that overwrites messages
using injected messages to predict victim transmission. Here,
we use the Arduino Due board to target three different victims:
(1) another Arduino Due, (2) a PeakCAN device, and (3) a
2012 Ford Focus powertrain ECU. Using our method, we can
achieve a shutdown of all three victims using all three of
our MCUs 100% of the time. However, using prior work to
perform the message overwrite attack, we only succeed for the
Arduino Due and PeakCAN device. On the powertrain ECU,
we cannot achieve even a single success as its transmissions
exhibit signiﬁcant period deviation.
D. Stealth analysis
We now compare the stealth of CANnon versus the state-
of-the-art message overwrite attack [15]. We construct three
simple detection methods at each layer of the CAN stack based
on existing defenses.6 The goal of either shutdown attacker is