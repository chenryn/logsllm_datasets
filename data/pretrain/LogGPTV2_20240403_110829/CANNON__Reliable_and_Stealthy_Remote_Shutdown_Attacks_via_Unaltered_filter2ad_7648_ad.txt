### Victim Error Count and Bus-Off State

When the victim's error count reaches 256 (8x32), it enters the bus-off state. Consequently, after the adversary causes an error in the first victim transmission (using its period), targeting the retransmissions becomes significantly easier for the adversary.

### Alternative CANnon Implementations

Although the strategy described above is an efficient method to force a compromised CAN controller to transmit, we also explore alternative methods that achieve a shutdown attack by exploiting different parts of the CAN frame. This highlights the flexibility an adversary has in executing the CANnon attack.

#### Firing with SOF Bit

Instead of the two-phase approach, the adversary can directly proceed to the firing phase using the Start of Frame (SOF) bit. By stopping the clock just before a SOF transmission, the adversary can inject a dominant SOF bit during a victim’s recessive bit. Since the SOF is only transmitted after a bus idle, the adversary can only inject a SOF when the bus is known to be idle. Once the bus idle is detected, the compromised CAN controller will load the registers to prepare for frame transmission. The adversary can pause the clock at the moment the transmit registers are loaded (experimentally, this is found to be two CAN bit times), effectively stopping the transmitter before it sends a SOF. However, as the SOF is only a single bit, the error active flag from the victim will cause an error on the compromised ECU, forcing it to retransmit. Instead of avoiding this retransmission, the adversary can exploit it. The victim’s error flag will cause the compromised ECU to think it simply lost arbitration. The adversary can then wait for a bus idle to occur and perform the attack again. Since the bus idle will not be observed until after the victim successfully retransmits, the adversary must target the periodic victim transmissions instead of the retransmissions from the loading/firing attack. While this attack is not as fast as the loading/firing attack, it enables the CANnon attack on alternative MCU architectures, as explained in Section VI.

#### Firing with ACKs

Instead of using data frame transmissions to attack a victim ECU, the adversary can exploit the acknowledgment (ACK) slot, where the compromised ECU transmits a dominant bit to acknowledge a correctly received data frame. The idea is to pause the compromised ECU right before it transmits the ACK bit for a victim’s frame (the bit before the ACK slot is a recessive CRC delimiter bit). If the CAN peripheral offers a SOF bit interrupt, which is observed in many automotive MCUs [30], [31], and if the adversary knows when the victim frame transmission starts and can determine when the CRC delimiter bit occurs, the adversary can pause the clock before the ACK slot and resume the clock a few bit times later during the End of Frame (EOF), causing an error on the victim. The challenge here is that the adversary must precisely predict when an ACK will occur and the number of bits in the victim frame. Thus, victim frames containing static or predictable data make ideal targets.

### Practical Challenges

We now discuss approaches to solving two practical challenges encountered when launching CANnon against real vehicles, as detailed in Section VI. One of these challenges is a new capability resulting from the peripheral clock gating vulnerability.

#### Period Deviations in Victim Frames

Up to now, we have assumed that victim frame transmissions are periodic. However, prior work [21] has found that period deviation is non-zero, making it difficult for the adversary to predict victim transmission times and thus perform the shutdown attack. Using insights from prior work [15], we could estimate when a victim message will initially appear on the bus. However, these insights relied on other messages in the network that would transmit immediately before the victim message, which is not always guaranteed. Additionally, even under these circumstances, this approach has been found to be unreliable [21].

We introduce a new capability that allows the adversary to guarantee when a victim message appears on the CAN bus. During tests on real vehicles, we observed that when the compromised ECU holds a dominant state, all other ECUs queue their frames waiting to transmit during bus idle. Upon releasing this dominant state, all transmitting ECUs attempt to clear their queues. We find that these queued frames appear on the bus in a predefined order: by their arbitration ID. Our insight is to determine which messages should arrive within a given time range before launching the attack. By holding the dominant state for this range, we can predict the ordering of messages and thus predict the start of the victim transmission.

#### Interruptions by Higher-Priority Messages

Another practical challenge is that higher-priority messages can interrupt the attack. If the adversary targets a victim frame with low priority, higher-priority messages can interrupt the repeated retransmissions by the victim. As the adversary expects the victim retransmissions to occur back-to-back, these interruptions can cause the attack to fail by causing collateral damage to unintended victims. The adversary can use prior work [21] to identify all source IDs of a victim ECU and select the highest-priority message, minimizing the chance of interruption by a higher-priority message. Additionally, prior work [21] finds that safety-critical ECUs tend to transmit higher-priority frames, so the adversary is already incentivized to target higher-priority frames.

### Evaluation

In this section, we demonstrate CANnon using two automotive MCUs found in modern vehicles and launch shutdown attacks against a variety of targets, including two real vehicles. We also detail experiments to highlight the reliability and stealth of CANnon.

#### Experimental Setup

To demonstrate the significance of this attack, we launch CANnon from automotive MCUs used in modern vehicles and target real ECUs from two real vehicles. In this work, we do not explicitly show the ability to compromise an in-vehicle ECU remotely, as this has been the focus of many papers [3], [4], [26]–[28]. Instead, we build our attack on the assumption that existing techniques would be successful in remotely compromising the software of automotive ECUs.

One key factor enabling the discovery of this vulnerability was our choice of experimental setup. We initially used the Arduino Due board, which closely resembles the capabilities of modern automotive MCUs. However, prior work in the field [6], [10], [11], [15]–[17], [32], [33] has used the legacy design of automotive ECUs, such as the Arduino Uno board with a standalone controller. Thus, none of these prior works could have identified the CANnon vulnerability, as they continued to use the legacy design while the industry moved to a modern design.

**Automotive MCUs:**
- **Microchip SAM V71 Xplained Ultra Board:** Uses an ATSAMV71Q21 32-bit MCU operating at 150 MHz, designed for in-vehicle infotainment connectivity [31], [40].
- **STMicro SPC58EC Discovery Board:** Uses an SPC58EC80E5 32-bit MCU operating at 180 MHz, designed for automotive general-purpose applications [41], [42].

For the SPC58 MCU, we found an alternative approach to directly control the clock, bypassing the request procedure. A transition to DRUN mode enables the CAN peripheral’s clock, and a transition to SAFE mode disables the peripheral’s clock without permission from the peripheral itself. This alternative contradicts the expected implementation as described in the SPC58’s reference manual [42].

**Real Vehicle Testbed:**
- **2009 Toyota Prius and 2017 Ford Focus:** We connect to the CAN bus via the vehicle’s On-Board Diagnostics (OBD) port to emulate a remotely-compromised ECU. We also identify the mapping of arbitration IDs to source ECUs using details from prior work [21]. We only launch the CANnon attack against vehicles while they are parked to avoid any potential safety concerns.

#### CANnon Against Real Vehicles

**Basic Disruption:**
- We launch the basic disruption attack against both real vehicles using the SAM V71 and SPC58 evaluation boards. We experimentally find that we can maintain up to 1ms of dominant state on the bus with at least 4µs of recessive in-between. This attack prevents ECUs from communicating on the bus and triggers malfunction lights on the instrument panel and diagnostic codes indicating loss of ECU communication.

**Powertrain ECU Shutdown in 2017 Focus:**
- We demonstrate a shutdown attack with the V71 MCU using the loading/firing attack. The powertrain ECU transmits several arbitration IDs, but we select the highest-priority ID using methods from prior work [21]. We hold the dominant bit when we expect the victim to appear (for approximately 50µs). Upon release of the dominant bit, the target victim frame will be the first frame to transmit, and we launch our firing phase on that frame. We target the control field and perform this attack 32 times, allowing us to shut down the powertrain ECU in about 2ms. Although the powertrain ECU does auto-recover, the ability to shut down the ECU quickly demonstrates the speed of our attack.

**Power Steering ECU Shutdown in 2009 Prius:**
- We demonstrate a shutdown attack with the SPC58 MCU using the SOF-based attack, as the SPC58 cannot enable the clock immediately after disabling it. The target victim is a power steering ECU that transmits three IDs: 0x262, 0x4C8, and 0x521. We choose the ID with the smallest period (0x262 with a period of 20ms) and find that its period deviation is quite small using methods from prior work [21]. As the SOF approach requires a successful transmission between each attack, this shutdown is significantly longer since we do not target retransmissions. We shut down the power steering ECU after 700ms, and it remains permanently offline.

#### Attack Reliability

Repeatability is a crucial aspect of a reliable attack. We envision an adversary who purchases the same MCU that the compromised ECU uses and tunes the attack parameters to the specific MCU. We find that properly tuned attack code across multiple copies of our test MCUs over a few months can repeatedly produce the same output to the bus, attributed to the strict specifications that ECU hardware must follow in the manufacturing stage.

**Reliability Comparison:**
- **Hardware Timer Interrupt vs. Manual Clock Cycle Counting:**
  - Using a hardware timer to launch the attack, both the Microchip and Arduino Due boards can shut down the victim 100% of the time.
  - Manually counting MCU clock cycles results in only a 10% success rate due to variations discussed in Section V.

**Guaranteeing Victim Transmission Time:**
- Using our method, we can achieve a shutdown of all three victims (another Arduino Due, a PeakCAN device, and a 2012 Ford Focus powertrain ECU) 100% of the time with all three of our MCUs.
- Using prior work to perform the message overwrite attack, we only succeed for the Arduino Due and PeakCAN device. On the powertrain ECU, we cannot achieve even a single success due to significant period deviation.

#### Stealth Analysis

We compare the stealth of CANnon versus the state-of-the-art message overwrite attack [15]. We construct three simple detection methods at each layer of the CAN stack based on existing defenses. The goal of either shutdown attacker is to remain undetected.