(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
Nginx +
(ModSecurity)
400
Sanitized
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
400
IIS
400
400
400
400
400
(cid:35)
400
400
400
400
400
(cid:35)
(cid:35)
(cid:35)
(cid:35)
400
400
400
400
400
400
(cid:35)
(cid:35)
Beego
400
400
400
400
400
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
400
400
400
400
400
400
(cid:35)
(cid:35)
Gitlab Pages
400
400
400
400
Heroku
Express.js
Amazon S3
Google
Storage
Fastly
No Response
400
400
400
(cid:35)
Sanitized
400
400
400
400
400
(cid:35)
(cid:35)
Squid
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
Gin
400
400
400
400
(cid:35)
(cid:35)
400
400
400
400
400
400
(cid:35)
(cid:35)
Sanitized
Sanitized
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
Varnish
400
400
400
400
400
Sanitized
400
400
400
400
400
(cid:35)
(cid:35)
Meteor
400
400
400
400
400
400
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
400
400
No Response
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
Play 1
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
No Response
Sanitized
Sanitized
Sanitized
Sanitized
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
400
400
400
400
400
(cid:35)
(cid:35)
(cid:35)
Play 2
400
400
400
400
Akamai
400
Legend:(cid:35) processed/forwarded without error and sanitization
Cloudfront
400
CDNSun
400
Cloudflare
400
G-Core Labs
400
KeyCDN
400
Stackpath
Sanitized
Table 4: Meta string handling in request header of HTTP implementations
the problem of oversized header in Play 1. When sending a request
header with multiple control characters Express.js does not reply
at all. Accordingly, CloudFront returns the error message 502 Bad
Gateway to the client. This error code is also stored and reused for
subsequent requests.
5.5 Consolidated Review of Analysis Results
Based on our findings of all three experiments, we detected many
CPDoS attack vectors in various different combinations of web
caching systems and HTTP implementations. Most of the attacks
are executable on CloudFront as shown in Table 5. This overview
summarizes what pair of web caching system and HTTP implemen-
tation is vulnerable to what CPDoS attack. The experimentsâ€™ results
show that web applications using CloudFront are highly vulnerable
to CPDoS attacks, since the CDN caches the error code 400 Bad
Request by default. Many server-side HTTP implementations re-
turn this error message when sending a request with an oversized
header or meta characters. The likelihood to be affected by CPDoS
attacks when utilizing the other analyzed caches including Varnish,
Akamai, CDN77, Cloudflare or Fastly is rather lower. These web
caching systems do store the error code 404 Not Found but not
400 Bad Request. The caching of error pages with status code 404
9
Not Found is a proper and compliant approach for optimizing web-
site performance. In this case, there is no malfunction in Varnish,
Akamai, CDN77, Cloudflare and Fastly. The reason for a successful
CPDoS attack lies in the fact that, Play 1 and Microsoft IIS allows to
provoke 404 Not Found error pages on resource endpoints which
do not return an error message when sending a benign request.
5.6 Practical Impact
In the first step to estimate the practical impact of CPDoS attacks, we
determined the amount of websites that use one of the vulnerable
web caching systems and HTTP implementations listed in Table 5.
Our approach to find vulnerable real world websites is to inspect
the response header.
Many HTTP implementations append informational headers to
the response for declaring that a message is processed by this entity.
For instance, CloudFront includes the values Hit from CloudFront
or Miss from CloudFront to the x-cache header and Microsoft IIS
adds the string Microsoft-IIS to the Server header. By means of
this information an attacker can unambiguously detect what cache
or what server-side HTTP implementation is used by the target web
application respectively. Based on this approach, we analyzed the
websites of the U.S. Department of Defense (DoD)1 and the Alexa
1https://dod.defense.gov/About/Military-Departments/DoD-Websites/
D
P
T
T
H
e
h
c
a
p
A
S
T
e
h
c
a
p
A
x
n
i
g
N
d
i
u
q
S
h
s
i
n
r
a
V
i
a
m
a
k
A
e
r
u
z
A
7
7
N
D
C
n
u
S
N
D
C
e
r
a
fl
d
u
o
l
C
t
n
o
r
F
d
u
o
l
C
y
l
t
s
a
F
s
b
a
L
e
r
o
C
-
G
N
D
C
y
e
K
h
t
a
P
k
c
a
t
S
Legend:(cid:35) no CPDoS attack dectected
Web caching system
Origin server HTTP implemenation
(cid:35) (cid:35) (cid:35)