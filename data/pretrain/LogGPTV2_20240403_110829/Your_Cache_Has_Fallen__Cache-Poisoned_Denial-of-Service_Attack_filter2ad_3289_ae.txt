### 4. Meta String Handling in Request Headers of HTTP Implementations

The following table (Table 4) summarizes the handling of meta strings in request headers by various HTTP implementations and web caching systems. The presence of `400` indicates that the server returned a "Bad Request" error, while "Sanitized" indicates that the request was processed and forwarded without errors but with sanitization. 

| Web Caching System | Origin Server HTTP Implementation | Response |
|--------------------|-----------------------------------|----------|
| Nginx + ModSecurity | 400                               | Sanitized |
| IIS                | 400                               | 400      |
| Beego              | 400                               | 400      |
| GitLab Pages       | 400                               | 400      |
| Heroku             | Express.js                        | 400      |
| Amazon S3          | 400                               | 400      |
| Google Storage     | 400                               | 400      |
| Fastly             | No Response                       | 400      |
| Squid              | 400                               | 400      |
| Gin                | 400                               | 400      |
| Varnish            | 400                               | 400      |
| Meteor             | 400                               | 400      |
| Play 1             | 400                               | 400      |
| Play 2             | 400                               | 400      |
| Akamai             | 400                               | 400      |
| CloudFront         | 400                               | 400      |
| CDNSun             | 400                               | 400      |
| Cloudflare         | 400                               | 400      |
| G-Core Labs        | 400                               | 400      |
| KeyCDN             | 400                               | 400      |
| Stackpath          | 400                               | 400      |

**Legend:**
- **(cid:35)**: Processed/forwarded without error and sanitization
- **400**: Bad Request error
- **Sanitized**: Request was sanitized and processed

### 5.5 Consolidated Review of Analysis Results

Based on our findings from all three experiments, we identified multiple CPDoS (Cache Poisoning Denial of Service) attack vectors across various combinations of web caching systems and HTTP implementations. Most of these attacks are executable on CloudFront, as shown in Table 5. This overview summarizes the vulnerabilities of different pairs of web caching systems and HTTP implementations to CPDoS attacks.

Web applications using CloudFront are highly vulnerable to CPDoS attacks because the CDN caches the "400 Bad Request" error by default. Many server-side HTTP implementations return this error when receiving a request with an oversized header or meta characters. The likelihood of being affected by CPDoS attacks is lower for other analyzed caches, including Varnish, Akamai, CDN77, Cloudflare, and Fastly. These web caching systems store the "404 Not Found" error but not the "400 Bad Request." Caching error pages with a status code of 404 is a proper and compliant approach for optimizing website performance, and there is no malfunction in Varnish, Akamai, CDN77, Cloudflare, and Fastly. However, Play 1 and Microsoft IIS can be provoked to return "404 Not Found" error pages on resource endpoints that do not return an error message for benign requests.

### 5.6 Practical Impact

To estimate the practical impact of CPDoS attacks, we determined the number of websites using the vulnerable web caching systems and HTTP implementations listed in Table 5. Our method involves inspecting the response headers, as many HTTP implementations append informational headers to declare that a message has been processed by a specific entity. For example, CloudFront includes "Hit from CloudFront" or "Miss from CloudFront" in the x-cache header, and Microsoft IIS adds "Microsoft-IIS" to the Server header. An attacker can use this information to identify the cache or server-side HTTP implementation used by the target web application.

Using this approach, we analyzed the websites of the U.S. Department of Defense (DoD) and the Alexa top sites. Based on this analysis, we found that a significant number of websites are potentially vulnerable to CPDoS attacks due to their use of the identified web caching systems and HTTP implementations.

### Table 5: CPDoS Attack Vectors

| Web Caching System | Origin Server HTTP Implementation | CPDoS Attack Detected? |
|--------------------|-----------------------------------|------------------------|
| Nginx + ModSecurity | 400                               | Yes                    |
| IIS                | 400                               | Yes                    |
| Beego              | 400                               | Yes                    |
| GitLab Pages       | 400                               | Yes                    |
| Heroku             | Express.js                        | Yes                    |
| Amazon S3          | 400                               | Yes                    |
| Google Storage     | 400                               | Yes                    |
| Fastly             | No Response                       | No                     |
| Squid              | 400                               | Yes                    |
| Gin                | 400                               | Yes                    |
| Varnish            | 400                               | Yes                    |
| Meteor             | 400                               | Yes                    |
| Play 1             | 400                               | Yes                    |
| Play 2             | 400                               | Yes                    |
| Akamai             | 400                               | Yes                    |
| CloudFront         | 400                               | Yes                    |
| CDNSun             | 400                               | Yes                    |
| Cloudflare         | 400                               | Yes                    |
| G-Core Labs        | 400                               | Yes                    |
| KeyCDN             | 400                               | Yes                    |
| Stackpath          | 400                               | Yes                    |

**Legend:**
- **(cid:35)**: No CPDoS attack detected
- **400**: Bad Request error
- **Sanitized**: Request was sanitized and processed

This consolidated review highlights the need for web administrators to be aware of the potential CPDoS vulnerabilities in their configurations and to take appropriate measures to mitigate these risks.