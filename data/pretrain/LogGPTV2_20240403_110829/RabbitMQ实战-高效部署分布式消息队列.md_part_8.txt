和事务相仿，你需要告诉Rabbit将信道设置成confirm模式，而且你只能通过重新
创建信道来关闭该设置。一旦信道进入confirm模式，所有在信道上发布的消息都
产者知晓消息已经安全到达目的队列了。如果消息和队列是可持久化的，那么确认
消息只会在队列将消息写人磁盘后才会发出。发送方确认模式的最大好处是它们是
异步的。一旦发布了一条消息，生产者应用程序就可以在等待确认的同时继续发送
下一条。当确认消息最终收到的时候，生产者应用的回调方法就会被触发来处理该
确认消息。如果Rabbit发生了内部错误从而导致了消息的去失，Rabbit会发送一条
nack（notacknowledged，未确认）消息。就像发送方确认消息那样，只不过这次说
明的是消息已经去失了。同时，由于没有消息回滚的概念（同事务相比），因此发送
方确认模式更加轻量级，同时对Rabbit代理服务器的性能影响几乎可以忽略不计。
至此，你了解了RabbitMQ的各个部分，包括从消费者和生产者到持久化消息
3阿喀琉斯之踵（Achilles'Heel），原指阿喀琉斯的脚跟。因为这是其唯一一个没有浸泡到神水的地
方，所以是他唯一的弱点。后来，他在特洛伊战争中被人射中脚跟而致命。这里指事务本身具有致
命的弱点。一译者注
4发送方确认（publisherconfirm）模式是RabbitMQ独有的针对AMQP的扩展（尽管其他服务器也可以
自由地将其添加到AMQP实现中去）。该模式仅在RabbitMQ2.3.1或更高版本中可用）。
---
## Page 54
32
第2章理解消息通信
通信。那么它们如何结合起来呢？一条真实消息的生命周期是怎样的呢？回答这些
问题最好的方法就是，在代码层面来看看消息的一生。
2.6把所有内容结合起来：一条消息的一生
我们已经讨论了RabbitMQ的历史，我们也讨论了AMQP及其细节，也安装了
服务器；现在是时候让我们动手写点代码了。我们会演示消息的创建、发布，然后
在服务器的另一端进行消费。我们会按照传统来开始自己的第一个HelloWorld例子，
就这么办吧。
在本书中，我们用PHP和Python语言来编写代码。感谢AMQP，代码示例可
以轻而易举地移植到另一门库和语言（如果仔细比较Python代码和PHP代码，就
会明白这一点）
为了构建HelloWorld程序，让我们从你需要做哪些准备开始。
■Python2.6或更高版本一你需要Python解释器的最新版本。我们使用的是
安装在MacOSX10.6平台的2.6.1版本。你可以使用包管理器在你的Linux
平台上安装Python。
■easy_install—这个小程序是Python包setuptools的一部分。它会帮你
安装额外的包。
■Pika0.9.6或更高版本一Pika是rabbit家族可爱的成员，同时也是Rabbit
团队编写的官方PythonAMQP库。
为了设置环境，首先需要安装easy_install（根据操作系统的要求，你也许需要
在sudo下运行这些命令）：
$ wget http://peak.telecommunity.com/dist/ez_setup.py
(25.9 KB/s) - ez_setup.py saved [10285/10285]
$ python ez_setup.py
Installed /Library/Python/2.6/site-packages/setuptools-0:6...
安装完 easy_install 之后，下一步安装 Pika：
$ easy_install pika
---
## Page 55
2.6把所有内容结合起来：一条消息的一生
33
Installed /Library/Python/2.6/site-packages/pika-0.9.6-py2.6.egg
Processing dependencies for pika
Finished processing dependencies for pika
下一步创建文件夹存放你的示例代码：
$ mkdir chapter-2
$cd chapter-2
让我们从发布者的代码开始。它需要完成以下任务：
■连接到RabbitMQ
■获取信道
■声明交换器
■创建消息
■发布消息
■关闭信道
■关闭连接
至此你完成了所有的设置工作，在文本编辑器里打开hello_world_producer.py
文件，并键人以下代码。
清单2.1HelloWorld生产者
import pika, sys
建立到代理服1
credentials = pika.PlainCredentials("guest","guest")
务器的连接
conn_params = pika.ConnectionParameters("localhost",
credentials = credentials)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()
channel.start_consuming()
在1处你建立了到服务器的连接，并在2处创建了信道。在获得了连接之后，
你在3处再一次声明了交换器°。由于declare命令的语义是“如果没有就创建；否
则继续”，所以这里什么都没发生。如果之后你发送queue_bind命令时，万一交
换器并没有预先创建好。这样做为的是要避免这类错误的发生。
在4处，你使用AMQP默认参数声明了一个名为hello-queue的队列。之后
你把队列绑定到hello-exchange5。你使用的路由键为hola。
你几乎已经准备就绪开始消费消息了，不过你还需要一个用于处理消息的回调
函数。在6处你创建了该函数，它会确认消息7。因此，RabbitMQ才能删除消息并
给消费者发送新的消息。在回调函数的末尾，你打印出了消息体。不久你就会知道
8处做了什么。
6第一次是在hello_world_producer.py文件中声明的。—译者注
---
## Page 58
36
第2章理解消息通信
有了回调函数，你就可以发送9basic_consume命令订阅队列了。第一个参
数就是你刚编写的回调函数。接下来的参数分别是队列的名称和用于标识进程的消
费者标记。RabbitMQ发送给消费者的每一条消息都会传入你的回调函数。
通过之前的命令，你已经准备好接收消息了。现在你必须要真的这样做了。你
在0处开始了一个阻塞的循环等待从信道进来的数据。如果RabbitMQ发送消息给
你，pika会把消息传递给你的回调函数的。
我们还剩最后一点困惑8没有讲到。start_consuming（）是一个无尽的阻塞
while循环。要想让它停止，你可在回调函数内插入一个条件判断。条件判断会检查
消息体是否为'quit'，如果是的话，就会发送basic_cancel命令以结束消费（同
时关闭信道和连接）。你必须提供消费者标记作为basic_cancel的参数。
现在让我们来测试一下代码吧。首先你必须启动RabbitMQ，然后打开新的终
端窗口，移动到RabbitMQ的安装目录，输入以下命令：
$ sbin/rabbitmq-server
一旦RabbitMQ运行起来了，切换回之前的终端窗口，用以下命令启动消费者（见
图2.7）：
$ python ./hello_world_consumer.py
OTerminal-tmux-80x24
mrhyde:chapter-2mrhydes
ython./hello_world_producer.py'quit'
mrhyde:chapter-2 mrhyde$
mrhyde:chapter-2mrhyde$python./hello_world_consumer.py
HelloWorld!
HelloMundo!
mrhyde:chapter-2 mrhyde$
图2.7RabbitMQHelloWorld
---
## Page 59
2.7使用发送方确认模式来确认投递
37
打开一个新的终端窗口，移动到chapter-2文件夹，输入以下命令：
$ python ./hello_world_producer.py ‘Hello World!'
如果一切正常，你应该会在运行消费者的终端窗口上看到"HelloWorld！"
文本。恭喜你，一切工作正常！
现在像这样发送其他消息试试：
$ python ./hello_world_producer.py ‘Hello Mundo!'
你应该可以看到：“HelloMundo!"
最后我们停止消费者：
$ python ./hello_world_producer.py 'quit'
让我们看看你刚刚做了些什么。你想要发送消息并消费它们，因此你声明了交
换器以保证有地方发布消息。同时你也创建了队列并绑定到hello-exchange上。
然后基于你在命令行输入的文本，你创建了消息实例并通过RabbitMQ发送出去。
基于direct交换器类型，RabbitMQ将消息路由到hello-queue上。由于在另一
端有消费者在等待消费，因此RabbitMQ投递了消息并由回调函数进行处理。你看
到此处并没有提供路由键。那是因为AMQP既可以很简单也可以很复杂，这取决于
我们怎么使用它。对我们的例子来说空白路由键就够了。
2.7使用发送方确认模式来确认投递
你明白了如何编写基本的消费者和生产者。但你也许还在思考如何将发送方确
认模式和事务结合起来。让我们看看你如何改进HelloWorld生产者，利用publisher
confirm来追踪消息投递”。在我们动手改进HelloWorld生产者使用发送方确认模式
之前先看看图2.8，它形象地展示了消息ID是如何指派的。
7由于事务会影响性能，因此我们专注于使用publisherconfirm作为消息投递保障的首选方案。我
们将HelloWorld生产者的事务版本包含在了本书的在线示例中：https://github.com/rabbitinaction/
sourcecode
---
## Page 60