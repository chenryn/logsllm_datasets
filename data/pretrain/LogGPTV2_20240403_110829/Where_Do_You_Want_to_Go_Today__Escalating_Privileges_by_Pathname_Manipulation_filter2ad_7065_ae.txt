T. J. Watson Research Center, 2009.
[7] H. Chen, D. Wagner, and D. Dean. Setuid Demysti(cid:2)ed. In
USENIX Security Symposium, pages 171(cid:150)190, 2002.
[8] D. Dean and A. J. Hu. Fixing races for fun and pro(cid:2)t: how
to use access(2). In 13th USENIX Security Symposium, pp.
195(cid:150)206, Aug 2004.
[9] CERT Coordination Center.
CERT Advisory CA-
1995-02.
http://www.cert.org/advisories/
CA-1995-02.html, January 26, 1995. (Accessed De-
cember 2009).
[10] CERT Coordination Center.
CERT Advisory CA-
1993-17.
http://www.cert.org/advisories/
CA-1993-17.html, November 11, 1993. (Accessed De-
cember 2009).
[11] Common Vulnerabilities and Esposures. CVE-2001-0529.
http://cve.mitre.org/, March 9, 2002. (Accessed
December 2009).
[12] Security Vulnerability in inetd(1M) Daemon When
CVE-2008-1684.
is Enabled
Debug Logging
http://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2008-1684,
2008. (Accessed December 2009).
September
[13] initscripts Arbitrary File Deletion Vulnerability.
http://web.nvd.nist.gov/
CVE-2008-3524.
view/vuln/detail?vulnId=CVE-2008-3524,
September 2008. (Accessed December 2009).
[14] T. Gar(cid:2)nkel. Traps and Pitfalls: Practical Problems in Sys-
tem Call Interposition Based Security Tools. In Proceedings
of the Network and Distributed System Security Symposium,
NDSS 2003, San Diego, California, USA.
[15] D. Mazieres and F. Kaashoek. Secure applications need (cid:3)ex-
ible operating systems. In IEEE Workshop on Hot Topics in
Operating Syst. (HOTOS), p. 56, 1997.
[16] National Vulnerability Database. http://nvd.nist.
gov/. (Accessed December 2009).
[17] The Open Group Base Speci(cid:2)cations Issue 7; IEEE Std
1003.1-2008. http://www.opengroup.org/. (Ac-
cessed December 2009).
[18] M. Seaborn.
Plash:
tools for practical least privilege.
http://plash.beasts.org/. (Accessed December
2009).
[19] D. Tsafrir, D. Da Silva, and D. Wagner. The murky issue
of changing process identity: revising (cid:147)setuid demysti(cid:2)ed(cid:148),
USENIX ;login, 33(3), pages 55(cid:150)66. 2008.
[20] D. Tsafrir, T. Hertz, D. Wagner, and D. Da Silva. Portably
Solving File TOCTOU Races with Hardness Ampli(cid:2)cation.
In Proceedings of USENIX Conference on File and Storage
Technologies (FAST), pages 189(cid:150)206, 2008.
[21] D. Tsafrir, T. Hertz, D. Wagner, and D. Da Silva. Portably
preventing (cid:2)le race attacks with user-mode path resolution.
Technical Report RC24572, IBM T. J. Watson Research
Center, June 2008.
[22] W. Venema. The Post(cid:2)x mail transfer agent. http://
www.postfix.org/. (Accessed December 2009).
[23] R. N. M. Watson. Exploiting Concurrency Vulnerabilities in
System Call Wrappers. In Proceedings of the 1st USENIX
Workshop on Offensive Technologies, Boston, August 2007.
[24] K. Seidler. The XAMPP software.
http://www.
apachefriends.org/. (Accessed December 2009).
A Relative pathnames
When resolving a pathname relative to an initial direc-
the current directory or a directory handle with
tory (i.e.
functions such as openat), the resolver needs to determine
if the initial directory is safe, before following the same
steps as with absolute pathnames (Section 2.2). For this, the
implementation needs to maintain safety information about
directory handles, including the implicit directory handles
for the current and root directories of all processes.
The per-handle safety information needs to be initial-
ized when a directory handle is instantiated with functions
such as open, chdir or chroot, and the safety infor-
mation needs to be propagated when a directory handle is
copied with functions such as dup, fcntl, fork, or with
functions that transmit a (cid:2)le handle over an inter-process
communication channel. Maintaining this information is
straightforward in the (cid:2)le system itself (i.e.
in the oper-
ating system kernel). We discuss our user-level approach in
Appendix C.
In a simplistic implementation, each directory handle has
a static (cid:3)ag that indicates if the directory is safe. How-
ever, additional care is needed with processes that change
their effective uid (for example, a process that invokes the
seteuid function, or a process that executes a (cid:2)le with
the setuid bit turned on). As the result of an effective uid
change, a directory that was safe may become unsafe or vice
versa. As a further complication, the safety of a directory
depends on the program execution history. For example,
a handle for directory /etc is normally safe for every-
one, but that same directory handle would be safe only for
joe if a pathname resolved through a symbolic link under
/home/joe.
To account for processes that change execution privilege,
we propose that each directory handle would include a (cid:2)eld
specifying the uid that the directory’s pathname pre(cid:2)x was
(cid:147)safe for(cid:148) when the pathname was resolved. Namely, this
(cid:2)eld will indicate root if the directory was reached via
a system-safe pathname, it will indicate a single non-root
uid if it was reached via a pathname that has only uid
/* Resolve a pathname and open the target file */
/* Resolve pathname, invoke action on final component */
safe_open(path, open_flags, is_safe_wd)
{
if (path is absolute) {
is_safe_wd = 1; dirhandle = null;
} else {
dirhandle = open(".", O_RDONLY) or return error;
}
return safe_lookup(dirhandle, path, is_safe_wd,
lookup_flags_for_open,
open_action_func, open_flags);
}
/* Call-back to open the final pathname component */
open_action_func(dirhandle, name, is_safe_wd, open_flags)
{
truncate = (open_flags & O_TRUNC);
flags = (open_flags & (cid:152)O_TRUNC);
filehandle = openat(dirhandle, name, flags)
or return error;
fst = fstat(filehandle) or return error;
/* lstatat(args) is local alias for
fstatat(args, AT_SYMLNK_NOFOLLOW) */
lst = lstatat(dirhandle, name) or return error;
if (fst and lst don’t match) return EACCESS;
check dirhandle permissions again,
and update is_safe_wd if unsafe;
if (!is_safe_wd && name is "..") return EACCES;
if (!is_safe_wd && fst is not a directory
&& fst has multiple hard links)
return EACCES;
if (truncate) ftruncate(filehandle,0)
or return error;
return filehandle;
}
Figure 1. The top›level safe open and a call›
back function open action func.
and root as manipulators, and it will indicate no-one if the
pathname had more than one non-root manipulator. When
resolving a pathname relative to an initial directory, one
determines the safety of the initial directory by combining
the (cid:147)safe for(cid:148) uid from the handle with fresh information
about the owner and writers for the initial directory itself.
B Pseudo-Code Implementation
The safe-lookup procedure described in Figure 2
implements our safe pathname resolution principle and
is the common routine used to implement safe-open,
safe-create and other safe versions of the POSIX in-
terface. The speci(cid:2)cs of each individual function are re-
(cid:3)ected in the arguments lookup flags, action func
and action args. The top-level function safe open
and the corresponding parameters to safe lookup are
described in Figure 1.
safe_lookup(dirhandle, path, is_safe_wd, lookup_flags,
action_func, action_args)
{
if (path is empty) return ENOENT;
if (path is absolute) {
dirhandle = open("/", O_RDONLY) or return error;
fst = result of lstat("/") or return error;
skip leading "/" in path, and replace
path by "." if the result is empty;
} else
fst =result of fstat(dirhandle) or return error;
while (true) {
/* check dirhandle permissions */
if (fst.owner not in [root, euid]
|| anyone not in [root, euid] can write)
is_safe_wd = false;
split path into first and suffix,
and replace all-slashes suffix by ".";
lst = result of lstatat(dirhandle, first)
or return error;
/* the meaning of "final pathname component" *
* depends on lookup_flags, it has different *
*/
* meaning for open, unlink, etc.
if (first component is final pathname component)
return action_func(dirhandle, first,
is_safe_wd, action_args);
if (first component is a symlink) {
newpath = readlinkat(dirhandle, first)
or return error;
check dirhandle permissions again,
and return EACCES if unsafe;
/* symlink at end of pathname */
if (suffix == null)
return safe_lookup(dirhandle, newpath,
is_safe_wd, lookup_flags,
action_func, action_args);
/* other symlink */
[newhandle, fst] =
safe_lookup(dirhandle, newpath, is_safe_wd,
lookup_flags, null, null)
or return error;
} else {
/* first component is not a symlink */
newhandle = openat(dirhandle,first,O_RDONLY)
or return error;
check dirhandle permissions again,
and update is_safe_wd if unsafe;
if (!is_safe_wd && name is "..")
return EACCES;
fst = result of fstat(newhandle)
or return error;
if (first component is not a directory)
return ENOTDIR;
lst = result of lstatat(dirhandle, first)
or return error;
if (lst does not match fst) return EACCES;
/* reached the end of readlinkat result */
if (suffix == null) return [newhandle, fst];
}
path = suffix;
dirhandle = newhandle;
}
}
Figure 2. The safe lookup recursive call.
application
open etc.
other
monitor
logfile
library
kernel
Figure 3. In›process monitor architecture.
C User-level implementation
As mentioned earlier in this paper, a kernel-based imple-
mentation of safe pathname resolution is straightforward:
while visiting each pathname element one at a time, main-
tain a safety (cid:3)ag and apply the safety policy for follow-
ing symbolic links, (cid:147)..(cid:148), and for (cid:2)les with multiple hard
links as appropriate. With a kernel-based implementation,
maintaining per-handle directory safety information is also
straightforward. This approach is preferable, but only after
it has been demonstrated that safe pathname resolution does
not break well-behaved programs.
To demonstrate the feasibility of our pathname safety
policy, we chose an approach that is based on library-call
interposition with an in-process monitor. This approach
works with dynamically-linked programs, including pro-
grams that are setuid or setgid, and it provides acceptable
performance on Linux, FreeBSD and Solaris systems. We
opted against external-process monitors such as strace or
truss: they suffer from TOCTOU problems, they cause
considerable run-time overhead, and they don’t have direct
access to the monitored process’s effective uid which is
needed for pathname safety decisions.
As illustrated in (cid:2)gure 3, the monitor is implemented as a
library module that is loaded into the process address space
between the application and the libraries that are dynami-
cally linked into the application. Depending on con(cid:2)gura-
tion, the monitor can log function calls such as open with
the effective uid, and can log whether or not a call vio-
lates our pathname safety policy. For the purpose of the
feasibility test the monitor does not enforce policy, but in-
stead passes control to the real open etc. function. The
in-process monitor for Linux, FreeBSD and Solaris is im-
plemented in about 2000 lines of K&R-formatted C code,
comments not included, plus a small shell script that imple-
ments the command-line interface.
Besides interposing on functions such as open that re-
quire pathname resolution, our in-process monitor inter-
poses on additional functions to ensure proper operation
of the monitor itself. For example, the monitor intercepts
function calls such as close and closefrom, to prevent
the logging (cid:2)le handle from being closed by accident. The
monitor intercepts function calls such as execve to en-
sure consistent process monitoring when a new program is
executed. Upon execve entry, the monitor exports envi-
ronment variables to control run-time linker behavior and
to propagate monitor state, and it resets the close-on-exec
(cid:3)ag on the logging (cid:2)le handle. When the execve call
returns in the newly-loaded program, the monitor restores
private state from environment variables before the applica-
tion’s code starts execution.
To track per-handle directory safety state, an in-process
monitor would need to interpose on functions that copy (cid:2)le
handles such as dup or fcntl. Interposition is not nec-
essary with process-creating primitives such as fork or
vfork, since these are not designed to share the in-kernel
(cid:2)le descriptor table or process memory between parent and
child processes. On the other hand, the Linux clone and
BSD rfork process-creating primitives are designed so
that they can share the (cid:2)le descriptor table or process mem-
ory, meaning that changes made by one process will affect
the other process. This behavior complicates a user-level
monitor implementation, and is not yet supported by our
monitor.
Our preliminary in-process monitor maintains
a
safe/unsafe (cid:3)ag for directory handles created with open
so that it can check programs that use the open-fchdir
idiom. The monitor does not yet check lookups relative to
a directory handle. In our measurements, we found that the
functions are used by only few programs,
openat etc.
and that
those functions are called almost exclusively
with absolute pathnames or with pathnames relative to the
current directory. The monitor currently does not propagate
the per-process current directory and root directory safety
state across function calls such as execve.
Instead, it
initializes their safety state on the (cid:3)y at program start-up
time. Without modi(cid:2)cation to monitored applications, it is
not practical for a user-level monitor to track safety (cid:3)ags
for directory handles that are sent over an inter-process
communication channel. Fortunately, such usage is rare.