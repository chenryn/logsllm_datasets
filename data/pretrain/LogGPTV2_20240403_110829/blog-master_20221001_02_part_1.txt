## duckdb postgres_scan 插件 - 不落地数据, 加速PostgreSQL数据分析  
### 作者                      
digoal                      
### 日期                      
2022-10-01                     
### 标签                      
PostgreSQL , duckdb , olap , parquet              
----                      
## 背景   
大家应该体验了duckdb在计算、数据湖方面的优越, 同时duckdb和PG一样也支持extension, 近期duckdb将postgres_scanner集成到了官方extension内, 可以直接install和load.   
postgres_scanner带来了什么用户价值?    
- 1、使用duckdb可以非常方便的实现数据不落地(无需导入到duckdb落地存储)分析PG内部的数据, 同时提供AP加速.   
- 2、使用duckdb还可以帮助PG来加速归档历史数据到parquet, 写入S3或OSS.  (使用duckdb的copy to format parquet, 以及duckdb s3的extesion.).   
```  
例如  
COPY (SELECT * FROM postgres_scan('dbname=myshinydb', 'public', 'lineitem'))   
  TO 'S3://...../lineitem.parquet' (FORMAT PARQUET);   
或者增量归档、同步:   
INSERT INTO my_table_duckdb_cache  
  SELECT * FROM postgres_scan_pushdown('dbname=myshinydb', 'public', 'my_table')   
    WHERE incrementing_id_column > (SELECT MAX(incrementing_id_column) FROM my_table_duckdb_cache);  
SELECT * FROM my_table_duckdb_cache;  
```  
## duckdb postgres_scanner的几项加速手段  
1、pushdown  
- projection  (select what columns?)  
- filter   (where conditions?)  
2、使用copy binary协议加速传输  
- 数据从pg到duckdb   
```  
例如:  
COPY (SELECT * FROM lineitem) TO STDOUT (FORMAT binary);  
```  
3、parallel copy 加速传输  
- 采用PG ctid range scan. (即按数据块进行快速扫描, 因为PG的block size固定, 按数据块ID扫描只需要提供file offset访问即可, 定位非常快速.)  
- 采用 pg_export_snapshot id 和 import snapshot_id to new transaction 支持并行会话全局一致性. (这个技术是PG很早以前用来加速并行备份, 后来也用来加速逻辑复制时并行初始化数据)   
```  
例如   
ctid >= (P_MIN,0) and ctid < (P_MAX,0)   
COPY (  
   SELECT   
     *   
   FROM lineitem   
   WHERE   
     ctid BETWEEN '(P_MIN,0)'::tid AND '(P_MAX,0)'::tid  
   ) TO STDOUT (FORMAT binary);  
```  
## tpch 性能提升了多少  
请参考  https://duckdb.org/2022/09/30/postgres-scanner  
[《DuckDB 采用外部 parquet 格式存储 - tpch 测试 - in_memory VS in_parquet》](../202209/20220901_05.md)    
[《DuckDB TPC-H, TPC-DS 测试》](../202208/20220828_01.md)    
[《DuckDB vs PostgreSQL TPC-H 测试》](../202208/20220829_01.md)    
[《DuckDB 定位OLAP方向的SQLite, 适合嵌入式数据分析 - tpch测试与简单试用》](../202208/20220826_02.md)    
## 使用例子  
```  
D install postgres_scanner;  
D select function_name from duckdb_functions() where function_name like '%scan%';  
┌───────────────┐  
│ function_name │  
├───────────────┤  
│ seq_scan      │  
│ index_scan    │  
│ arrow_scan    │  
│ parquet_scan  │  
│ parquet_scan  │  
└───────────────┘  
D load postgres_scanner;  
D select function_name from duckdb_functions() where function_name like '%scan%';  
┌────────────────────────┐  
│     function_name      │  
├────────────────────────┤  
│ seq_scan               │  
│ index_scan             │  
│ arrow_scan             │  
│ parquet_scan           │  
│ parquet_scan           │  
│ postgres_scan          │  
│ postgres_scan_pushdown │  
└────────────────────────┘  
```  
```  
pg_ctl start  
postgres=# create unlogged table t (id int, info text, c1 int8, c2 float8, c3 float4);  
CREATE TABLE  
postgres=# insert into t select generate_series(1,10000000), random()::text, random()*10000, random()*10000, random();  
INSERT 0 10000000  
postgres=# create view vt as select * from t;  
CREATE VIEW  
postgres=# SELECT count(distinct id) FROM t;  
  count     
----------  
 10000000  
(1 row)  
Time: 2328.769 ms (00:02.329)  
```  
```  
D explain SELECT * FROM postgres_scan('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 't') limit 1;  
┌─────────────────────────────┐  
│┌───────────────────────────┐│  
││       Physical Plan       ││  
│└───────────────────────────┘│  
└─────────────────────────────┘  
┌───────────────────────────┐  
│      STREAMING_LIMIT      │  
└─────────────┬─────────────┘                               
┌─────────────┴─────────────┐  
│       POSTGRES_SCAN       │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             t             │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             id            │  
│            info           │  
│             c1            │  
│             c2            │  
│             c3            │  
│            EC=1           │  
└───────────────────────────┘                               
Run Time (s): real 0.011 user 0.000738 sys 0.000584  
D SELECT * FROM postgres_scan_pushdown('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 't') limit 1;  
D SELECT count(distinct id) FROM postgres_scan('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 't');  
┌────────────────────┐  
│ count(DISTINCT id) │  
├────────────────────┤  
│ 10000000           │  
└────────────────────┘  
Run Time (s): real 1.233 user 4.161512 sys 0.567365  
D explain SELECT count(distinct id) FROM postgres_scan_pushdown('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 't');  
┌─────────────────────────────┐  
│┌───────────────────────────┐│  
││       Physical Plan       ││  
│└───────────────────────────┘│  
└─────────────────────────────┘  
┌───────────────────────────┐  
│    UNGROUPED_AGGREGATE    │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│     count(DISTINCT #0)    │  
└─────────────┬─────────────┘                               
┌─────────────┴─────────────┐  
│         PROJECTION        │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             id            │  
└─────────────┬─────────────┘                               
┌─────────────┴─────────────┐  
│   POSTGRES_SCAN_PUSHDOWN  │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             t             │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             id            │  
│            EC=1           │  
└───────────────────────────┘   
```  
可以观察到PG内的日志, projection pushdown, ctid parallel scan, copy binary等:  
```  
D SELECT count(distinct id) FROM postgres_scan('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 't') where id<100;  
┌────────────────────┐  
│ count(DISTINCT id) │  
├────────────────────┤  
│ 99                 │  
└────────────────────┘  
```  
```  
2022-10-01 10:15:48.802 CST,"postgres","postgres",1225,"127.0.0.1:50154",6337a2d3.4c9,12,"idle in transaction",2022-10-01 10:15:47 CST,7/12,0,LOG,00000,"statement:   
COPY (SELECT ""id"" FROM ""public"".""t"" WHERE ctid BETWEEN '(86000,0)'::tid AND '(87000,0)'::tid ) TO STDOUT (FORMAT binary);  
",,,,,,,,,"","client backend",,0  
2022-10-01 10:15:48.802 CST,"postgres","postgres",1229,"127.0.0.1:50152",6337a2d3.4cd,12,"idle in transaction",2022-10-01 10:15:47 CST,11/12,0,LOG,00000,"statement:   
COPY (SELECT ""id"" FROM ""public"".""t"" WHERE ctid BETWEEN '(87000,0)'::tid AND '(88000,0)'::tid ) TO STDOUT (FORMAT binary);  
",,,,,,,,,"","client backend",,0  
...  
```  
```  
D SELECT count(distinct id) FROM postgres_scan_pushdown('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 't') where id<100;  
┌────────────────────┐  