title:One TPM to Bind Them All: Fixing TPM 2.0 for Provably Secure Anonymous
Attestation
author:Jan Camenisch and
Liqun Chen and
Manu Drijvers and
Anja Lehmann and
David Novick and
Rainer Urian
2017 IEEE Symposium on Security and Privacy
One TPM to Bind Them All: Fixing TPM 2.0 for
Provably Secure Anonymous Attestation
Jan Camenisch∗, Liqun Chen†, Manu Drijvers∗‡, Anja Lehmann∗, David Novick§, and Rainer Urian¶
∗IBM Research – Zurich, †University of Surrey, ‡ETH Zurich, §Intel, ¶Inﬁneon
Abstract—The Trusted Platform Module (TPM) is an inter-
national standard for a security chip that can be used for the
management of cryptographic keys and for remote attestation.
The speciﬁcation of the most recent TPM 2.0 interfaces for
direct anonymous attestation unfortunately has a number of
severe shortcomings. First of all, they do not allow for security
proofs (indeed, the published proofs are incorrect). Second, they
provide a Difﬁe-Hellman oracle w.r.t. the secret key of the TPM,
weakening the security and preventing forward anonymity of
attestations. Fixes to these problems have been proposed, but
they create new issues: they enable a fraudulent TPM to encode
information into an attestation signature, which could be used
to break anonymity or to leak the secret key. Furthermore,
all proposed ways to remove the Difﬁe-Hellman oracle either
strongly limit the functionality of the TPM or would require
signiﬁcant changes to the TPM 2.0 interfaces. In this paper we
provide a better speciﬁcation of the TPM 2.0 interfaces that
addresses these problems and requires only minimal changes to
the current TPM 2.0 commands. We then show how to use the
revised interfaces to build q-SDH- and LRSW-based anonymous
attestation schemes, and prove their security. We ﬁnally discuss
how to obtain other schemes addressing different use cases such
as key-binding for U-Prove and e-cash.
1. INTRODUCTION
The amount of devices connected to the Internet grows
rapidly and securing these devices and our electronic infras-
tructure becomes increasingly difﬁcult, in particular because
a large fraction of devices cannot be managed by security
professional nor can they be protected by ﬁrewalls. One
approach to achieve better security is to equip these devices
with a root of trust, such as a Trusted Platform Module (TPM),
a Trusted Execution Environment (TEE), and Software Guard
Extensions (SGX), and then have that root of trust attest to the
state of the device or to computations made. When doing such
attestations, it is crucial that they be privacy-protecting. On the
one hand, to protect the privacy of users of such devices, and
on the other hand, to minimize the information available to
attackers. Realizing this, the Trusted Computing Group (TCG)
has developed a protocol called direct anonymous attestation
(DAA) [1] and included it in their TPM 1.2 speciﬁcation [2].
The protocol allows a device to authenticate as a genuine
device (i.e., that it is certiﬁed by the manufacturer) and attest
to messages without the different attestations being linkable
to each other and has since been implemented in millions of
chips.
Later, Brickell and Li
[3] proposed a scheme called
Enhanced-privacy ID (EPID) that is based on elliptic curves
and adds signature-based revocation which is a revocation
capability based on a previous signature of a platform. This
scheme has become Intel’s recommendation for attestation
of a trusted system, has been incorporated in Intel chipsets
and processors, and is recommended by Intel to serve as the
industry standard for authentication in the Internet of Things.
Being based on elliptic curves, EPID is much more efﬁcient
than the original RSA-based DAA scheme. Therefore, the
TCG has revised the speciﬁcation of the TPM and switched
to elliptic curve-based attestation schemes [4], [5]. The design
idea of this new speciﬁcation is rather beautiful: the TPM only
executes a simple core protocol that can be extended to build
different attestation schemes. Essentially, the core protocol is
a Schnorr proof of knowledge of a discrete logarithm [6], the
discrete logarithm being the secret key stored and protected
inside the TPM. Chen and Li [5] describe how to extend this
proof of knowledge to DAA schemes, one based on the q-
SDH assumption [14] and one based on the LRSW assumption
[15]. The idea here is that the host in which the TPM is
embedded extends the protocol messages output by the TPM
into messages of the DAA protocol. They further show how
to extend it to realize device-bound U-Prove [7], so that the
U-Prove user secret key is the one stored inside the TPM.
These issues were all pointed out in the literature before
and ﬁxes have been proposed [8]–[10]. However, the proposed
ﬁxes either introduce new problems or are hard to realize. Xi
et al. [8] propose a change to the TPM speciﬁcation that allows
one to prove the unforgeability of TPM-based attestations.
This change introduces a subliminal channel though, i.e., a
subverted TPM could now embed information into the values
it produces and thereby into the ﬁnal attestation. This covert
channel could be used to break anonymity of the platform and
its user, or to leak the secret key held in the TPM. The pro-
posed ﬁxes to remove the static Difﬁe-Hellman oracle [8]–[10]
either require substantial changes to the TPM to the extend that
they are not implementable, or restrict the functionality of the
TPM too much, excluding some major DAA schemes from
Unfortunately,
the core protocol as speciﬁed has severe
shortcomings. First, the random oracle based security proof
for attestation unforgeability by Chen and Li is ﬂawed [8] and
indeed it seems impossible to prove that a host cannot attest
to a message without involving the TPM. Second, the core
protocol can be abused as a Difﬁe-Hellman oracle w.r.t. the
secret key tsk inside the TPM. It was shown that such an
oracle weakens the security, as it leaks a lot of information
about tsk [26]. Further, the presence of the oracle prevents
forward anonymity, as an attacker compromising a host can
identify the attestations stemming from this host.
© 2017, Jan Camenisch. Under license to IEEE.
DOI 10.1109/SP.2017.22
901
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:02 UTC from IEEE Xplore.  Restrictions apply. 
being supported. For instance, it was priorly proposed to have
the host prove in zero knowledge that a new base is safe to
use for the TPM, who then needs to verify that proof. This
does not only take a heavy toll on the resources of the TPM
but also excludes signature-based revocation, thus not meeting
the requirements of the TCG. We refer to Sec. 3 for a detailed
discussion of the existing proposals and their shortcomings.
Our Contributions. In this paper we provide a new speciﬁ-
cation of the DAA-related interfaces of the TPM that requires
only minimal changes to the current TPM 2.0 commands. It
is the ﬁrst one that addresses all the issues discussed and that
can easily be implemented on a TPM. We then show what
kind of proof of knowledge statements can be proven with
the help of our new TPM interfaces and how to build secure
DAA schemes with them. Our speciﬁcation supports both
LRSW-based and q-SDH-based direct anonymous attestation,
signature-based revocation, and extensions to attributes. Our
LRSW-based scheme has a new way to issue credentials that
is much more efﬁcient than prior ones that aimed to avoid
a DH-oracle in the TPM interfaces. To achieve this, we use
a slight modiﬁcation of the LRSW assumption (which we
prove to hold in the generic group model). Avoiding this
modiﬁcation would be possible, but requires a second round
of communication with the issuer.
We further show how to extend the DAA schemes to support
attributes and signature-based revocation and give security
proofs for all of that. For space reasons, we give only sketches
in this extended abstract and refer to the full version of this
paper for the detailed proofs. The TPM interfaces that we give
can also be used to realize other schemes, such as device-
bound U-Prove [7] and e-cash [11], for which it is beneﬁcial
that a secret key be kept securely inside a TPM.
To make the construction of such schemes easier, we give
for the ﬁrst time a thorough characterization of statements that
can be proven with a TPM w.r.t. a secret key inside the TPM.
We provide a generic protocol that orchestrates our new TPM
interfaces and allows one to generate TPM-based proofs for
a wide class of statements. We further prove the security of
such generated TPM-based proofs. This facilitates the use of
the TPM interfaces for protocol designers who can simply use
our generic proof protocol to devise more complex protocols.
Some of the changes to the TPM 2.0 interfaces we propose
have already been adopted by the TCG and will appear in
the forthcoming revision of the TPM 2.0 speciﬁcations. The
remaining changes are currently under review by the TPM
working group. Furthermore, the authors are in discussion
with the other bodies standardizing DAA protocols to adopt
our changes and schemes, in particular ISO w.r.t. to ISO/IEC
20008-2, Intel for EPID, and with the FIDO alliance for their
speciﬁcation of anonymous attestation [34], so that all of
these standards will deﬁne provably secure protocols that are
compatible with each other.
Outline. We start by presenting the necessary preliminaries
in Sec. 2. In Sec. 3, we describe the current TPM 2.0
commands and their inherent security issues and also discuss
how previous work aims to overcome these problems. Sec. 4
then presents our proposed changes to the TPM 2.0 speciﬁ-
cation and our generic proof protocol to create TPM-based
attestations. How to build direct anonymous attestation with
signature-based revocation and attributes is described in Sec. 5.
We discuss forward anonymity separately in Sec. 6, show
other applications of the revised TPM interfaces in Sec. 7,
and conclude in Sec. 8.
2. BUILDING BLOCKS AND ASSUMPTIONS
This section introduces the notation for signature proofs of
knowledge and the complexity assumptions required for our
schemes. Here we also present the new generalized version of
the LRSW assumption.
2.1 Bilinear Maps
y
1 , g
Let G1, G2, and GT be groups of prime order p. A bilinear
map e : G1 × G2 → GT must satisfy bilinearity,
i.e.,
2 ) = e(g1, g2)xy for all x, y ∈ Zq; non-degeneracy, i.e.,
e(gx
for all generators g1 ∈ G1 and g2 ∈ G2, e(g1, g2) generates
GT ; and efﬁciency, i.e., there exists an efﬁcient algorithm
G(1τ ) that outputs the bilinear group (p, G1, G2, GT , e, g1, g2)
and an efﬁcient algorithm to compute e(a, b) for any a ∈ G1,
b ∈ G2.
Galbraith et al. [12] distinguish three types of pairings:
Type-1, in which G1 = G2; Type-2, in which G1 (cid:4)= G2 and
there exists an efﬁcient isomorphism ψ : G2 → G1; and Type-
3, in which G1 (cid:4)= G2 and no such isomorphism exists. Type-
3 pairings currently allow for the most efﬁcient operations
in G1 given a security level using Barreto-Naehrig curves
with a high embedding degree [13]. Therefore it is desirable
to describe a cryptographic scheme in a Type-3 setting, i.e.,
without assuming G1 = G2 or the existence of an efﬁcient
isomorphism from G2 to G1.
2.2 Complexity Assumptions
We recall some existing complexity assumptions and intro-
duce a variation of one of them (which we prove to hold in
the generic group model). Let G(1τ ) generate random groups
G1 = (cid:5)g1(cid:6), G2 = (cid:5)g2(cid:6), GT = (cid:5)e(g1, g2)(cid:6), all of prime order
p where p has bith length τ, with bilinear map e.
Recall the q-SDH assumption [14] and the LRSW assump-
.
tion [15] in a bilinear group.
Assumption 1 (q-SDH). Deﬁne the advantage of A as:
(cid:2)
(G1, G2, GT , e, q) ← G(1τ ), x ←$ Z
Adv(A) = Pr
(c, h) ← A(g1, g
x
2 ) : h = g
No PPT adversary has Adv(A) non-negligible in τ.
y
Assumption 2 (LRSW). Let X = gx
2 and Y = g
2, and let
OX,Y (·) be an oracle that, on input a value m ∈ Zp, outputs
, . . . , g
(xq)
1
, g2, g
x
1 , g
(x2)
1
(cid:3)
∗
p,
1
x+c
1
902
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:02 UTC from IEEE Xplore.  Restrictions apply. 
a triple (a, ay, ax+xym) for a randomly chosen a. Deﬁne the
advantage of A as follows:
(cid:2)
Adv(A) = Pr
(G1, G2, GT , e, q) ← G(1τ ), (x, y) ←$ Z
2 , (a, b, c, m) ← AOX,Y (·)(X, Y ) :
(cid:3)
y
2
p,
∧ b = a
y ∧ c = a
x+xym
.
x
2 , Y ← g
X ← g
m (cid:4)∈ Q ∧ a ∈ G1 ∧ a (cid:4)= 1G1
No PPT adversary has Adv(A) non-negligible in τ.
We introduce a generalized version of the LRSW assump-
tion where we split the oracle OX,Y into one that ﬁrst gives
the values a and b, the two elements that do not depend on the
message, and one that later provides c upon input of m. That
is, after receiving a, b, the adversary may specify a message
m to receive c = ax+xym.
Assumption 3 (Generalized LRSW). Let X = gx
2 and Y =
2, and let Oa,b
X (·) return (a, b) with a ←$ G1 and b ← ay.
y
g
Let Oc
X,Y (·) on input (a, b, m), with (a, b) generated by Oa,b
X,Y ,
output c = ax+xym. It ignores queries with input (a, b) not
generated by Oa,b
X,Y or inputs (a, b) that were queried before.
Deﬁne the advantage of A as follows.
(cid:2)
Adv(A) = Pr
X ← g
2 , Y ← g
x
(G1, G2, GT , e, q) ← G(1τ ), (x, y) ←$ Z
2
p,
2 , (a, b, c, m) ← AOa,b
(cid:3)
X,Y (·)(X, Y ) :
∧ b = a
X (·),Oc
x+xym
y
m (cid:4)∈ Q ∧ a ∈ G1 ∧ a (cid:4)= 1G1
y ∧ c = a
No PPT adversary has Adv(A) non-negligible in τ.
Note that our assumption implies the LRSW assumption,
but the contrary is not true. In our assumption, the adversary
may let m depend on (a, b). Intuitively, it is clear that this
does not give any meaningful advantage, as a is random in
G1. We formalize this intuition and prove that Assumption 3
holds in Shoup’s generic group model [16] in the full version
of this paper.
2.3 Proof Protocols
For zero-knowledge proofs of knowledge of discrete loga-
rithms and statements about them, we will follow the notation
introduced by Camenisch and Stadler [19] and formally de-
ﬁned by Camenisch, Kiayias, and Yung [20]. For instance,
PK{(a) : y = ga} denotes a “zero-knowledge Proof of
Knowledge of integer a such that y = ga holds.” SPK{. . .}(m)
denotes a signature proof of knowledge on m, that is a non-
interactive transformation of a zero-knowledge proof PK with
the Fiat-Shamir heuristic [21] in the random oracle model [22].
(S)PK protocols have three moves: In the ﬁrst move the
prover sends to the veriﬁer what is often referred to as a
commitment message or t-values. In the second move, the
veriﬁer sends a random challenge c to which the prover
responds with the so-called s-values.
When describing our protocols at a high-level, we use
the following, more abstract notation. By NIZK{(w)
:
statement(w)}(ctxt) we denote any non-interactive zero-
knowledge proof that is bound to a certain context ctxt and
903
proves knowledge of a witness w such that the statement
statement(w) is true.
3. RELATED WORK & CURRENT TPM 2.0 SPECIFICATION
We now summarize the speciﬁcation of current TPM 2.0
DAA interfaces and discuss its inherent security and privacy
issues and how existing work aims to overcome them.
TPM 2.0 Interface and SPKs. For realizing DAA, and
signature proofs of knowledge of a TPM secret key in gen-
eral, the TPM 2.0 speciﬁcation offers four main commands
TPM.Create, TPM.Hash, TPM.Commit, and TPM.Sign. Calling
TPM.Create triggers the creation of a secret key tsk ∈ Zp and
a public key tpk ← ¯gtsk , where ¯g and Zp are ﬁxed parameters.