#links
196
245
144
194
48
84
46
63
Deutsche
Telekom
38
55
TABLE I: Five ISP networks used for large-scale simula-
tions and their number of routers and links.
over time. Figure 13b illustrates the number of bots used in
the attack, which represents the attack cost. The number of
required bots varies widely for different defense strategies.
For no defense, only 10 bots are needed to achieve the goal.
For ordinary TE, initially the attack needs only 8 bots to
achieve its goal. However, as soon as the target network is
ﬂooded at around t = 12 seconds, ordinary TE expands its
defense bandwidth by a factor of three and the average per-
ﬂow rate of the target recovers the initial rg = 100 Kbps. As
a result, the adversary needs to further increase the number of
bots up to 31. Notice that both the attack and defense costs
increase roughly three times, which suggests that there is no
reduction in cost asymmetry. For SPIFFY, we observe that the
adversary requires 80 bots in total to achieve the rate-reduction
goal Gstrength while the defense does not use additional
bandwidth.5 This shows that the rate-increase mimicry (RM)
costs the adversary use roughly M = 10 times more bots to
achieve the attack goal Gstrength.
B. Large-Scale Flow-Level Simulations
In this section, we evaluate the feasibility of SPIFFY
in large-scale ﬂow-level simulations with up to about 200
routers. In particular, we focus on the implementation of the
TBE to show that its proposed design (Section V-B) can be
implemented in practical ISP networks. For scalable evaluation
(e.g., millions of ﬂooding ﬂows and hundreds of routers), we
developed a simulator that models TCP ﬂows (deﬁned by srcIP,
dstIP, srcPort, dstPort, and protocol) as ﬂuid ﬂows [14]; i.e.,
each ﬂow at each time epoch has its ﬂow rate and occupies the
same amount of bandwidth at all the network links it travels.
We model the behavior of TCP ﬂows by implementing the
ideal fair-share rate property (i.e., allocating equal bandwidth
to all competing ﬂows) at every attack-targeted link in the
network. We examine the TBE algorithm using the ﬂow
simulator with millions of ﬂows. Our simulator models the ﬁve
large ISP topologies from the Topology Zoo database [32] as
shown in Table I. We use the uniform link-bandwidth model,
where all links have the same bandwidth, and non-uniform
model, where links in the center of the ISP topology have
higher bandwidth. The simulation proceeds in discrete time
5The TBE operations use additional bandwidth at the target only temporarily. Thus,
the increase in defense cost on average is negligible.
Cogent
Tata
UUNET
NTT
0.79
0.65
0.27
0.35
(in seconds)
Deutsche
Telekom
0.27
0.26
2,039.06
14.71
Greedy algorithm
LP solution Mnetwork
solution cMnetwork
greedy algorithm solution cMnetwork.
435.79
9.07
TABLE II: Execution times for LP solution Mnetwork and
Fig. 14: Mnetwork values for the ﬁve ISPs in two link-
bandwidth models.
ticks. At each tick, the simulation updates the rates of all ﬂows
in the network by visiting each network link and updating the
rates of all ﬂows on the link.
Real-time operation of TBE in large networks. The
TBE operation needs to calculate the new route sets in real-
time; e.g., within few seconds. We evaluate the execution
time to calculate the new routes using the greedy routing
algorithm (i.e., Algorithm 1) and show how time efﬁcient it
is, compared to solving the optimal LP. When solving the
viz., Section V-A. We utilize the multi-core architecture of
our SDN controller for the binary search and evaluate 12
values of m concurrently at each iteration. Table II shows the
execution time for the LP solution Mnetwork and the greedy
greedy algorithm solutioncMnetwork, we apply a binary search;
algorithm solution cMnetwork. LP is solved with the CPLEX
calculate cMnetwork. Even in the largest network we evaluate
solver in a server-grade machine with 20 cores. As explained,
LP requires an impractical amount of time for networks with
large number of routers R. In contrast, the greedy algorithm
with binary search requires only few seconds in general to
(i.e., Cogent), it takes only 14.7 seconds, which is less than 1
percent of the time taken by the LP solution, which is 2,039
seconds.
Optimal LP solutions Mnetwork and effectiveness of
the TBE algorithm. We solve LP in the ﬁve ISP networks
with two different link-bandwidth models. The uniform link-
bandwidth model assumes the same bandwidth of 40 Gbps
for all the links. To model more realistic network bandwidth
provisioning, we also use the non-uniform model that assigns
link bandwidth based on the betweenness centrality of each
link. The betweenness centrality of a link is the number of
shortest-path routes between all pairs of edge routers that
include the link [26]. This metric represents how (logically)
central the link is in the network topology. We assign 40
Gbps link bandwidth to the 33% of links with the highest
centrality, 5 Gbps bandwidth to the 33% of links with the
smallest centrality, and 10 Gbps bandwidth to all other links
in the middle. For each case, we setup 10 different attacks,
11
r avg (Kbps)020406080100(a) avg per-flow rateat the target link100#bots020406080time (sec)204060801000time (sec)204060801000(b)     number of botssending at each timeno defenseSPIFFYordinary TECogentTata   UUNET   NTTDTCogentTata   UUNET   NTTDTMnetwork0123456 Uniform Link Capacity Non-uniform Link Capacity Uniform Link Capacity Non-uniform Link Capacity Uniform Link Capacity Non-uniform Link CapacityHence, collaborative defenses should not be the ﬁrst-line of
defense.
To date, all available evidence indicates that the majority
of the link-ﬂooding adversaries are in fact rational; e.g., cost
sensitive and stealthy as witnessed by the desire to use high-
ampliﬁcation, low-cost attack trafﬁc afforded by ampliﬁcation
attacks that use hard-to-track sources [45]. Since rational
adversaries can always be deterred, SPIFFY can become an
effective ﬁrst-line of defense for an ISP.
B. Legitimate Senders with Application-layer Rate Adaptation
Although the rate of a legitimate sender is mainly deter-
mined by its TCP window control (as discussed and evaluated
in Section VI-B), application programs might also adapt their
data rates and thus affect the send rate of the legitimate senders.
Such application-layer rate adaptation can potentially reduce
the effectiveness of bot detection. For example, let us assume
a legitimate sender that has suffered from severe congestion
for few minutes and its application program has adapted (i.e.,
reduced) its data rate to a low degraded rate. In such a case, if
the adaptation of the application-layer data rate is slow (e.g.,
few minutes), our bot detection mechanism might miss the
send rate increase of the sender and false identify the sender
as a bot.
In practice, video streaming is one of the most popular
examples of application-layer rate adaptation. Today’s most
video streaming services periodically (e.g., 1 – 10 seconds)
adjust the quality of a video stream to provide continuous
playback under various range of available network bandwidth.
An experimental evaluation study with major video streaming
services showed that the rate adaptation algorithm can adapt
its bitrate very quickly [9]. In particular, Netﬂix, the most
popular video streaming service, is shown to quickly adapt
to the sudden spikes of short-term (e.g., 2, 5, and 10 seconds)
bandwidth expansion; viz., Figure 12 in [9]. Based on this
experimental evidence, we believe that SPIFFY is effective to
most legitimate senders with application-layer rate adaptation.
C. Robustness against Multiple Link-Flooding Attacks
Rational, cost-sensitive adversaries might also target multi-
ple links concurrently to achieve higher damage to end targets.6
In such cases, individual links interact with the SPIFFY test
at each ISP. Thus, all the security analyses in Section III-B
are applicable to the multiple link-ﬂooding attacks. That is,
the attacks must satisfy the rate-increase mimicry goal RM
to circumvent the tests launched by each link target and this
causes the attacks to increase the number of bots by a factor
of M for ﬂooding each target link. If multiple link targets are
located in the same network, SPIFFY can simply measure the
per-sender rate changes as if single link in the network is being
targeted.
Multiplexed link attack: Although simple extensions of
single link attacks can be easily handled, when an adversary
carefully multiplexes the attack ﬂows across her bots and a
small number (e.g., 10) target links, SPIFFY can detect the
bots only probabilistically. The steps of a multiplexed link
6Note that the irrational, cost-insensitive adversaries that ﬂood a large
number of (if not all) links to the targets are discussed in Section VIII-A
Fig. 15: Required number of TBE operations for varying
RT BE = Mnetwork=Mideal and Ps.
which target 10 different links for ﬂooding. The targeted links
are chosen from the 10 links with the highest betweenness
centrality in each ISP topology. We assume that 30% of
bandwidth of each link is already used for underlying trafﬁc
that is unrelated to the link-ﬂooding attack. Figure 14 shows
the distribution of Mnetwork in the box plots. We achieve
Mnetwork close to 3 with the uniform model while Mnetwork
is close to 2 with the non-uniform model. The non-uniform
model has smaller Mnetwork since it provides less bandwidth
for alternative paths for TBE than the uniform model. As we
will see later in this section, a small value of Mnetwork ≃ 2 can
still be effective when used with the sequential TBE. Moreover,
we also evaluate the accuracy of the greedy algorithm solution
cMnetwork compared to the LP solution Mnetwork. We ﬁnd
cMnetwork is nearly identical to the LP solution Mnetwork,
that in all ﬁve ISP networks the greedy algorithm solution
showing a difference of only few percentages (almost 1–2%).
Also, we ﬁnd that the new routes due to TBE need just 1 to
3 more router hops (or 4 – 24% longer average route length
in the target network) compared to the original routes before
TBE.
Operation of randomized sequential TBE. We also
evaluate how many times the TBE operations need to be
performed to test the majority of all senders contributing to
the congest on the target link. As explained in Section V,
the required number of randomized sequential TBE operations,
n, depends on the ratio RT BE = Mnetwork=Mideal and the
percentage Ps of senders that must be tested at least once.
Figure 15 shows the required number of TBE operations for
various RT BE and Ps. As expected, the higher RT BE, the
lower n. Moreover, the lower Ps, the smaller the number of
TBE operations are required. Based on the observation that the
ﬁve ISPs we evaluate have Mnetwork in between 2.21 and 3.19,
we conclude that roughly 4 – 10 TBE rounds are required.
VIII. DISCUSSION
A. Handling Cost-Insensitive Irrational Adversaries
Countermeasures for cost-insensitive (e.g., state-sponsored)
or irrational adversaries require collaborative defenses, which
involve communication and coordination among different ISPs.
Collaborative defenses are necessary because cost-insensitive
adversaries can ﬂood a large number of (if not all) the links
to a target, by deﬁnition. These defenses are more complex
to deploy and more expensive because they require bilateral
deployment agreements and coordination, added infrastructure
(e.g., CoDef [38]), and increased run-time detection costs.
12
RTBE = Mnetwork / Mideal00.20.40.60.81Required numberof TBE operations05101520Ps = 70%Ps = 80%Ps = 90%attack are as follows. Each bot ﬂoods multiple (up to M)
link targets concurrently while using only 1=M of its upload
bandwidth (say u) for each link target. When one of the link
targets starts testing a bot, the bot allocates all of its upload
bandwidth u to the ﬂows that are dedicated to that link by
pausing all the other attack ﬂows. As a result, the bot can pass
the test by the link, and after the test the bot can continue to
ﬂood the multiple link targets again. The bots in this attack can
be detected probabilistically when a bot is tested by more than
one target link simultaneously since it cannot increase rates for
the two tests simultaneously. The detection of the multiplexed
link attack can be improved to become deterministic when
the multiple SPIFFY operations in different ISPs exchange
the sender information they are testing (e.g., via standardized
channels [41]) and test same bots simultaneously.
D. Multiple senders sharing a single IP address
When multiple senders in a local network are served by
a single NAT gateway,
they share the same source IP. If
some bots are located in the same local network, they might
identiﬁed as legitimate senders by SPIFFY because their ﬂows
are mixed with other legitimate ﬂows under the same source
IP.
In such cases, we examine whether a particular IP address
is shared or not; e.g., via existing mechanisms [15]. Then,
we perform the SPIFFY test with ﬁner granularity of ﬂow
aggregates; e.g., per-source-destination, per-source-protocol.
This enables SPIFFY to test different smaller sender groups
than the entire sender set sharing the same source IP and
thus improve the bot-identiﬁcation accuracy even when senders
share a single source IP.
IX. RELATED WORK
We ﬁrst summarize link-ﬂooding attacks targeting core
network links. We then categorize existing defense approaches,
which are insufﬁcient
the link-ﬂooding
attacks. Last, we list several other ﬂooding attacks and discuss
their relationships with SPIFFY.
to defend against
Link-ﬂooding attacks. The link-ﬂooding attacks that target
the core network links are the main threat model we consider in
this paper. The Coremelt attack [51] utilizes bots to send attack
trafﬁc to other bots. This Coremelt attack coordinates large
numbers of bot pairs in a way that their communication paths
share the links in the Internet core. The Crossﬁre attack [31]
coordinates bots to send legitimate-looking low-rate trafﬁc to
the attacker-chosen publicly accessible servers (e.g., HTTP
servers) in a way that their routes cross the link targets in
the core Internet. All attack ﬂows are indistinguishable since
they are the connections to the legitimate open services and
low-rate protocol-conforming ﬂows.
Proﬁling-based defense approaches. This type of mech-
anisms maintain the proﬁles of legitimate trafﬁc based on
their ﬂow rates, source IPs, destination IPs, protocols, etc.,
and distinguish attack trafﬁc from legitimate one. PSP [20]