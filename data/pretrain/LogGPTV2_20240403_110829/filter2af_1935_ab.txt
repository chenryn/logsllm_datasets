    // [include/linux/wait.h]
    #define wake_up(x)          __wake_up(x, TASK_NORMAL, 1, NULL)
    #define wake_up_nr(x, nr)       __wake_up(x, TASK_NORMAL, nr, NULL)
    #define wake_up_all(x)          __wake_up(x, TASK_NORMAL, 0, NULL)
    #define wake_up_interruptible(x)    __wake_up(x, TASK_INTERRUPTIBLE, 1, NULL)
    #define wake_up_interruptible_nr(x, nr) __wake_up(x, TASK_INTERRUPTIBLE, nr, NULL)
    #define wake_up_interruptible_all(x)    __wake_up(x, TASK_INTERRUPTIBLE, 0, NULL)
## 一个完整的例子
这是一个简单的例子来总结上述概念：
    struct resource_a {
      bool resource_is_ready;
      wait_queue_head_t wq;
    };
    void task_0_wants_resource_a(struct resource_a *res)
    {
      if (!res->resource_is_ready) {
        // "register" to be woken up
        DECLARE_WAITQUEUE(task0_wait_element, current);
        add_wait_queue(&res->wq, &task0_wait_element);
        // start sleeping
        __set_current_state(TASK_INTERRUPTIBLE);
        schedule();
        // We'll restart HERE once woken up
        // Remember to "unregister" from wait queue
      }
      // XXX: ... do something with the resource ...
    }
    void task_1_makes_resource_available(struct resource_a *res)
    {
      res->resource_is_ready = true;
      wake_up_interruptible_all(&res->wq);  // sk_flags |= (1 state |= 1;   // enter the netlink_attachskb() retry path    
          struct files_struct *files = current->files;
          struct fdtable *fdt = files_fdtable(files);
          fdt->fd[3] = NULL; // makes the second call to fget() fails
        %}
在本节中，我们将尝试删除设置sk的sk_flags字段的行[0]。这意味着mq_notify()的调用将再次阻塞。有两种可能：
  * 设置sk的sk_flags为SOCK_DEAD（如STAP脚本所做）
  * 线程解除阻塞
## 控制（并赢得）竞态
从漏洞利用者的角度来看，主线程被阻塞实际上是一件 **好事** 。还记得补丁描述中的“small window”吗？我们的攻击场景是什么？
Thread-1 | Thread-2 | file refcnt | sock refcnt | sock ptr  
---|---|---|---|---  
mq_notify() |  | 1 | 1 | NULL  
|  |  |  |  
fget() -> ok |  | 2 (+1) | 1 | NULL  
|  |  |  |  
netlink_getsockbyfilp() -> ok |  | 2 | 2 (+1) | 0xffffffc0aabbccdd  
|  |  |  |  
fput() -> ok |  | 1 (-1) | 2 | 0xffffffc0aabbccdd  
|  |  |  |  
netlink_attachskb() -> returns 1 |  | 1 | 1 (-1) | 0xffffffc0aabbccdd  
|  |  |  |  
| close() | 0 (-1) | 0 (-1) | 0xffffffc0aabbccdd  
|  |  |  |  
goto retry |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
fget( returns NULL |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
goto out |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
netlink_detachskb() -> UAF! |  | FREE | (-1) in UAF | 0xffffffc0aabbccdd  
所以，“small
window”是我们有机会调用close()的地方。提醒一下，调用close()将使对fget()的调用返回NULL。竞态条件的窗口期起始于第一次调用fget()成功后，并终止于第二次调用fget()之前。在攻击场景中，netlink_attachskb()之后才调用close()，但是在system
stap脚本中我们实际上是在调用netlink_attachskb()之前就模拟close操作了（没有真的调用close）。
如果绕过不执行schedule_timeout()，那么窗口期确实“很小”。在调用netlink_attachskb()之前通过STAP脚本修改了内核数据结构，但在用户空间无法这样做。
另一方面，如果我们可以阻塞在netlink_attachskb()中并有办法解除阻塞，那么窗口期就要多长就有多长，也就是说，我们有办法 **控制竞态条件**
，可以将其视为主线程中的“断点”（breakpoint）。
攻击计划变为：
Thread-1 | Thread-2 | file refcnt | sock refcnt | sock ptr  
---|---|---|---|---  
mq_notify() |  | 1 | 1 | NULL  
fget() -> ok |  | 2 (+1) | 1 | NULL  
|  |  |  |  
netlink_getsockbyfilp() -> ok |  | 2 | 2 (+1) | 0xffffffc0aabbccdd  
|  |  |  |  
fput() -> ok |  | 1 (-1) | 2 | 0xffffffc0aabbccdd  
|  |  |  |  
netlink_attachskb() |  | 1 | 2 | 0xffffffc0aabbccdd  
|  |  |  |  
schedule_timeout() -> SLEEP |  | 1 | 2 | 0xffffffc0aabbccdd  
|  |  |  |  
| close() | 0 (-1) | 1 (-1) | 0xffffffc0aabbccdd  
|  |  |  |  
| UNBLOCK THREAD-1 | FREE | 1 | 0xffffffc0aabbccdd  
>> |  |  |  |  
sock_put() |  | FREE | 0 (-1) | 0xffffffc0aabbccdd  
|  |  |  |  
netlink_attachskb() -> returns 1 |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
goto retry |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
fget( returns NULL |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
goto out |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
netlink_detachskb() -> UAF! |  | FREE | (-1) in UAF | 0xffffffc0aabbccdd  
阻塞主线程似乎是赢得竞态条件的好主意，但这意味着我们现在需要解除阻塞的线程。
## 解除阻塞
如果你现在还不理解“核心概念 #2”部分，那最好再看一下那部分内容。在本节中，我们将看到netlink_attachskb()如何开始阻塞以及如何解除阻塞。
再看一下netlink_attachskb()代码：
    // [net/netlink/af_netlink.c]
        int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
                  long *timeo, struct sock *ssk)
        {
          struct netlink_sock *nlk;
          nlk = nlk_sk(sk);
          if (atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf || test_bit(0, &nlk->state)) {
    [0]     DECLARE_WAITQUEUE(wait, current);
            if (!*timeo) {
              // ... cut (unreachable code from mq_notify) ...
            }
    [1]     __set_current_state(TASK_INTERRUPTIBLE);
    [2]     add_wait_queue(&nlk->wait, &wait);
    [3]     if ((atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf || test_bit(0, &nlk->state)) &&
                !sock_flag(sk, SOCK_DEAD))
    [4]       *timeo = schedule_timeout(*timeo);
    [5]     __set_current_state(TASK_RUNNING);
    [6]     remove_wait_queue(&nlk->wait, &wait);
            sock_put(sk);
            if (signal_pending(current)) {
              kfree_skb(skb);
              return sock_intr_errno(*timeo);
            }
            return 1;
          }
          skb_set_owner_r(skb, sk);
          return 0;
        }
这些代码现在看起来很熟悉。 **__set_current_state(TASK_INTERRUPTIBLE)** [1]和
**schedule_timeout()** [4]组合使当前线程阻塞。[3]处的条件成真，因为：
  * 通过System Tap设置状态：nlk->state|=1
  * sk状态不再是SOCK_DEAD，System Tap中删除了这一行：sk->sk_flags|=(1wait**。它属于netlink_sock对象：
    struct netlink_sock {
        /* struct sock has to be the first member of netlink_sock */
        struct sock     sk;
      // ... cut ...
        wait_queue_head_t   wait;           // wait等待队列在四个地方被实际使用：
  * __netlink_create()
  * netlink_release()
  * netlink_rcv_wake()
  * netlink_setsockopt()
__netlink_create()在netlink套接字创建期间调用。通过 **init_waitqueue_head()** 初始化一个空的等待队列。
netlink_rcv_wake()由 **netlink_recvmsg()** 调用并在内部调用 **wake_up_interruptible()**
。它实际上是有道理的，产生阻塞的第一个原因可能是由于接收缓冲区已满。如果调用netlink_recvmsg()，那么接收缓冲区现在可能存在更多空闲空间。
当关联的文件对象即将被释放时（引用计数为0），将调用netlink_release()。它会调用
**wake_up_interruptible_all()** 。
最后，可以通过系统调用setsockopt()调用netlink_setsockopt()。如果参数“optname”是
**NETLINK_NO_ENOBUFS** ，则会调用wake_up_interruptible()。
现在有三个候选者来唤醒我们的线程（__netlink_create()被排除在外，因为它没有唤醒任何东西）。面对这些选择，我们需要一条这样的路径：
  * 快速到达所需目标（在我们的例子中是wake_up_interruptible()）。尽可能少的调用过程，尽可能少的“条件”需要满足......
  * 对内核几乎没有影响/副作用（没有内存分配，没有影响其他数据结构......）
出于漏洞利用原因，排除netlink_release()路径。在[第3部分](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part3.html)会有说明。
netlink_rcv_wake()是最“复杂”的路径。在系统调用“recvmsg()”调用netlink_rcv_wake()之前，还需要满足通用套接字API中的几个检查。函数调用流程是：
    - SYSCALL_DEFINE3(recvmsg)
    - __sys_recvmsg
    - sock_recvmsg
    - __sock_recvmsg
    - __sock_recvmsg_nosec  // calls sock->ops->recvmsg()
    - netlink_recvmsg
    - netlink_rcv_wake
    - wake_up_interruptible
相比之下，"setsockopt()"的调用流程是：
    - SYSCALL_DEFINE5(setsockopt) // calls sock->ops->setsockopt()
    - netlink_setsockopt()
    - wake_up_interruptible
更简单，不是吗？
## 从setsockopt系统调用到wake_up_interruptible()
从setsockopt系统调用到wake_up_interruptible()是最简单的方法。让我们分析一下需要满足的条件：
    // [net/socket.c]
        SYSCALL_DEFINE5(setsockopt, int, fd, int, level, int, optname,
            char __user *, optval, int, optlen)
        {
          int err, fput_needed;
          struct socket *sock;
    [0]   if (optlen < 0)
            return -EINVAL;
          sock = sockfd_lookup_light(fd, &err, &fput_needed);
    [1]   if (sock != NULL) {
            err = security_socket_setsockopt(sock, level, optname);
    [2]     if (err)
              goto out_put;
    [3]     if (level == SOL_SOCKET)