ﬁlesystem search service Spotlight are multi-user. While
permissions models can be rather complex, we will focus our
attacks on settings in which users should only be able to read
the ﬁles they own, and no others.
In this context, B¨uttcher and Clarke show that idf(t, D)
forms a potentially exploitable side channel that violates
document conﬁdentiality, even if a search index properly
ﬁlters out search results on documents not owned by the user
performing the search. This channel will allow an adversary
to learn partial information about document frequency, so we
call this the DF side channel.
To demonstrate their observation, consider an adversarial
user Eve that wants to determine the number of documents
that contain a term t∗. For example, it may be that Eve
wants to learn whether another user Alice has a document
dA = {t∗} stored on the system. Then, there is a simple
attack exploiting the scoring function as a side channel.
Eve generates two documents d1 = {t∗} and d2 = {r}
where r is some random term of length sufﬁcient to ensure
that it will not appear in any user document. Then Eve issues
two search queries: First for SEARCH(t∗
), which returns
document d1 with score s1, and then for SEARCH(r) which
returns document d2 with score s2. Even though SEARCH
only returns results related to documents owned by Eve, Eve
can anyway use s1 and s2 to infer information about other
users’ documents. By construction Eve has arranged that
tf(t∗, d1) = tf(r, d2) = 1 and df(r) = 1. Thus referring
back to (1), Eve knows that
s1 = tf(t∗, d1) · idf(t∗, D) = 1 + log
s2 = tf(r, d2) · idf(r, D) = 1 + log N/2 .
N
df(t∗, D) + 1
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:39 UTC from IEEE Xplore.  Restrictions apply. 
Thus Eve now has two equations in two unknowns and can
solve for N and df(t∗, D). The latter reveals how many
documents in D contain t∗. Under the assumption that t∗
would only appear, if at all, in dA (e.g., because it is rather
high entropy), then Eve can conclude that Alice’s document
contains t∗.
The attack as described requires scores, but B¨uttcher and
Clarke detail another attack that uses only the order of
documents returned by a multi-term search to approximately
bound df(t∗, D). They also mention that their techniques
could be used to perform brute-force attacks, repeatedly
using the side channel for different possible values for the
target term t∗.
B¨uttcher and Clarke conjecture that this side channel could
be used to recover information from real multi-user search
indexes, but they do not demonstrate any working attacks. So
while the DF side channel has been known to exist in theory
since 2005, we are unaware of any investigation into its
exploitability in practice, despite the widespread deployment
of multi-user indexes. As we will discuss in the next section,
there appear to be inherent challenges to building real attacks,
including some noted by B¨uttcher and Clarke and others that
we uncover related to distributed system design.
Other storage system side channels. Other side channels on
search indexes and databases have been developed. Gelernter
and Herzberg [17] show how to exploit a cross-site timing
side channel to test for the presence of terms in a target
search index. Our attack does not require malicious code
injection, but does enable term extraction from a search
index. Futoransky et al. use a timing side channel on
insertions into MySQL and MS SQL databases to extract
private information [16]. They observe that insertions take
longer if a new virtual memory page is written, and use a
divide-and-conquer approach to learn private terms. Their
side channel is much harder to exploit than ours because it
requires fairly high-precision timing measurements.
III. SURVEY OF MULTI-TENANT SEARCH SIDE
CHANNELS
is unknown what search systems,
The basic DF side channel has only been discussed in
theory, and it
if any,
are vulnerable. We therefore begin by surveying existing
open-source multi-tenant search systems, and experimentally
conﬁrm that the DF side channel exists in every setting
we consider.
Elasticsearch. There are a few prominent systems for
implementing full-text search on unstructured documents.
Lucene [27] is a Java library which implements the building
blocks of a search index, including functionality such as
document tokenizers and query parsers. It also implements
common data structures used for indexing. Elasticsearch (ES)
and Solr are two libraries that implement sharding and cluster
management for Lucene indexes. ES and Solr are widely used
in industry due to their efﬁciency and scalability.
676
(cid:12)(cid:15)(cid:15)(cid:1)(cid:15)(cid:24)(cid:14)(cid:29)(cid:22)(cid:16)(cid:23)(cid:28)(cid:27)
(cid:35)(cid:15)(cid:24)(cid:18)(cid:1)(cid:14)(cid:12)(cid:28)(cid:36) (cid:35)(cid:15)(cid:24)(cid:18)(cid:1)(cid:14)(cid:12)(cid:28)(cid:36) (cid:35)(cid:14)(cid:24)(cid:31)(cid:36)
(cid:15)(cid:2)
(cid:15)(cid:3)
(cid:15)(cid:4)
(cid:35)(cid:13)(cid:20)(cid:26)(cid:15)(cid:36)
(cid:15)(cid:5)
(cid:7)(cid:11)(cid:1)(cid:21)(cid:24)(cid:12)(cid:15)(cid:1)
(cid:13)(cid:12)(cid:21)(cid:12)(cid:23)(cid:14)(cid:16)(cid:26)
(cid:27)(cid:19)(cid:12)(cid:26)(cid:15)(cid:2)
(cid:15)(cid:2) (cid:15)(cid:3)
(cid:34)
(cid:27)(cid:19)(cid:12)(cid:26)(cid:15)(cid:3)
(cid:15)(cid:4)
(cid:15)(cid:5)
(cid:34)
(cid:34)(cid:1)(cid:27)(cid:19)(cid:12)(cid:26)(cid:15)(cid:1)(cid:23)
(cid:34)(cid:1)(cid:27)(cid:19)(cid:12)(cid:26)(cid:15)(cid:1)(cid:23)
(cid:34)(cid:1)(cid:27)(cid:19)(cid:12)(cid:26)(cid:15)(cid:1)(cid:23)
(cid:27)(cid:19)(cid:12)(cid:26)(cid:15)(cid:1)(cid:23)
(cid:9)(cid:23)(cid:15)(cid:16)(cid:32)(cid:16)(cid:27)
(cid:25)(cid:29)(cid:16)(cid:26)(cid:33)(cid:1)(cid:6)(cid:1)(cid:35)(cid:14)(cid:12)(cid:28)(cid:1)(cid:15)(cid:24)(cid:18)(cid:36)
(cid:15)(cid:2)
(cid:15)(cid:24)(cid:18)
(cid:14)(cid:12)(cid:28)
(cid:15)(cid:3)
(cid:15)(cid:2)
(cid:15)(cid:3)
(cid:14)(cid:24)(cid:31)
(cid:20)(cid:23)(cid:30)(cid:16)(cid:26)(cid:28)(cid:16)(cid:15)(cid:1)
(cid:20)(cid:23)(cid:15)(cid:16)(cid:32)
(cid:15)(cid:4)
(cid:27)(cid:14)(cid:24)(cid:26)(cid:16)
(cid:27)(cid:14)(cid:24)(cid:26)(cid:16)
(cid:15)(cid:2)
(cid:27)(cid:14)(cid:24)(cid:26)(cid:16)
(cid:15)(cid:3)
(cid:27)(cid:14)(cid:24)(cid:26)(cid:16)
(cid:10)(cid:12)(cid:31)(cid:1)(cid:26)(cid:16)(cid:27)(cid:29)(cid:21)(cid:28)(cid:27)(cid:1)(cid:17)(cid:26)(cid:24)(cid:22)(cid:1)(cid:20)(cid:23)(cid:15)(cid:16)(cid:32)
(cid:27)(cid:14)(cid:24)(cid:26)(cid:16)
(cid:15)(cid:2)
(cid:27)(cid:14)(cid:24)(cid:26)(cid:16)
(cid:15)(cid:3)
(cid:8)(cid:20)(cid:21)(cid:28)(cid:16)(cid:26)(cid:16)(cid:15)(cid:1)(cid:26)(cid:16)(cid:27)(cid:29)(cid:21)(cid:28)(cid:27)
Figure 1: A typical multi-tenant ES deployment consisting
of several shards, and an example of inverted indexes and
query ﬁltering in ES. Documents from different users are in
different colors.
An architectural diagram of a canonical ES deployment is
depicted in Figure 1. We assume a multi-tenant setting, in
which multiple distinct user accounts have their documents
indexed. In large deployments, a single server is insufﬁcient
to handle search queries, and so one instead builds separate
indexes across multiple shards. A common way of load
balancing across shards is to assign users at random to a
shard, meaning all their ﬁles will be in that shard. Should
individual users have many ﬁles,
it may be needed to
have more granular load balancing. For example, one can
assign each individual document to a shard randomly when
the document is uploaded, or there may be other logical
groupings of documents. For example in GitHub, users may
have multiple git repositories, and as we will see later GitHub
load balances across shards at the granularity of repository.
Lucene, Solr, and ES are all open-source projects, and
typical conﬁgurations for the ranking function can be found
online in forums [29,42]. The default ranking used by Lucene
(and so, in turn, by ES and Solr) is a variant of TF-IDF given
by the equation
(cid:2)
ρq,d · βt · tf(t, d) · idf(t, D)2
(3)
scorees(q, d) =
t∈q
(cid:3)|d| · (cid:4)
t∈q
idf(t, D)2
(cid:4)
t∈q I(t ∈ d)/|q|
The query coordination factor ρq,d =
boosts documents that contain more terms matched by
the query. It counts the number of query terms matching
the document and divides by the total number of terms
in the query |q|. The per-term boost function βt allows
(cid:3)|d| is what’s referred to as
customization of scores based on important application-
speciﬁc terms. The division by
the ﬁeld-length norm, and it simply acts to normalize relative
to the size of the document. In some conﬁgurations, the ﬁeld-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:39 UTC from IEEE Xplore.  Restrictions apply. 
length norm is combined with an index-time ﬁeld-level boost,
which for our purposes would simply change βt.
An attacker that retrieves a score scorees(q, d, D) on their
document d will know most of the terms in the right hand side
of (3), with the only unknowns being the value N, df(t, D)
for each t ∈ q, and, if the conﬁguration is unknown, the boost
function and other factors. When the conﬁguration is known,
this is just a (log-linear) equation in two unknowns. In this
case the attack applies as in §II.
To test if ES has the DF side channel, we set up a local
installation of ES version 2.3.4, and conﬁgure it to use one
shard with zero replicas. We leave the other conﬁguration
options default. Following the suggestions provided by
ES [34], we adopt the shared index strategy, create two
tenants alice and bob, and add a tenant-id ﬁeld to a document
data structure to specify the document owner. A document
data structure is a piece of JSON data that consists of three
ﬁelds: a tenant-id ﬁeld, a name to store the document name,
and a content ﬁeld to store the document content.
We implement and test
a < sa, and s(cid:2)
a = scorees(t, da), and saw s(cid:2)(cid:2)
two common search ﬁltering
mechanisms to enforce access control: ﬁltering on tenant-
id in the query [13] and ﬁltered index alias [1]. The
former excludes the documents that fail to meet the ﬁltering
conditions, e.g., excluding documents whose tenant-id (cid:4)=
alice for queries issued by the tenant alice. The latter works
in the same way as the former, but it makes search ﬁltering
easier by allowing a user to create an alias name for a set of
ﬁltering conditions.
We ﬁrst generated a unique term t, added a document da =
{t} as alice (the tenant-id of da is set to alice), and got a score
sa = scorees(t, da). Then, we added a document db = {t}
with tenant-id = bob, and measured s(cid:2)
a = scorees(t, da). We
observed that s(cid:2)
a decreases as more documents
that contain t are added by the tenant bob. Finally, we deleted
all the documents associated with bob, measure again as
alice to get s(cid:2)(cid:2)
a is the same
as sa. We observed the same results under different ﬁltering
mechanisms. These observations strongly suggest that one
can infer if there are other documents containing a term by
examining relevance scores; therefore, the DF side channel
exists in ES.
MySQL. We set up a MySQL 5.6 server using its default
conﬁgurations. In MySQL-based multi-tenant applications,
a common design is multi-tenant-per-table, that is, storing
all tenant’s data in the same table, with a tenant-id ﬁeld
to distinguish each tenant’s records [32]; then, to get the
records only associated with a tenant alice, one can issue
SQL queries with a condition tenant-id = alice. We achieve
multi-tenancy in MySQL based on this design pattern. Our
simple multi-tenant application uses one table, each record
in which corresponds to a document. A record has the same
three ﬁelds as the documents in the ES tests. To enable full-
text search in MySQL, we build a FULLTEXT index on
the content ﬁeld [35]. As a result, all the tenants share the
same index.
We conducted the same tests as we do for ES, and observed
the same result: the relevance score of a document for a
given term will be affected by the documents that contain
the same term, even if these documents are owned by other
tenants. The result also suggests that the DF side channel
exists in MySQL.
Other vulnerable systems. We found ﬁve vulnerable cloud-
based search services using the similar methodology as in
ES and MySQL. A cloud-based search service aims to
provide scalable, easy-to-manage full-text search for web or
mobile applications. An application can use it to build and
maintain indexes on its data, and handle search requests.
Such services usually charge the applications based on the
amount of storage used or the number of requests processed.
All of the systems we considered provide RESTful APIs and
reveal relevance scores. Four of the services are built on ES
(i.e., hosted-ES services), including AWS Elasticsearch [3],
AWS CloudSearch [2], Searchly [45] and bonsai [6]. It’s
easy to conﬁrm that they inherit the DF side channels from
ES. We investigated these four due to their popularity, but
there are many other hosted-ES services that could also have
the vulnerability. One vulnerable system called Swiftype
implements its own search engine [50].
Note that even if the side channel exists in a hosted
search service, an application built atop that service will
not necessarily have the DF side channel. For example,
an application could conceivably assign each of their users
to an independent
index. However, due to the costs of
cloud-based search services, application developers would
typically prefer to use shared indexes. In Swiftype, a basic
plan ($299 per month) only provides one index for usage,
while a business plan ($999 per month) provides up to three
indexes. In Searchly, a professional plan ($99 per month)
offers 13 indexes. So if a multi-tenant application is built
atop the service, the application’s users will share the same
indexes and might be vulnerable to information leakage.
Looking at the case studies advertised by Swiftype [49], we
realized some of them are indeed multi-tenant applications.
We also noticed that Heroku uses Swiftype and Searchly as
its search add-on [21], suggesting the DF side channel might
be inherited by Heroku-based applications.
Non-vulnerable
systems. We also investigated Post-
greSQL [41], CouchBase [9], crate.io [10], Searchify [44]
(not to be confused with Searchly above), and Google App
Engine [20]. Our experimentation suggests that these systems
do not exhibit the DF side channel, primarily because they
appear to use independent indexes for different tenants.
IV. THE DF SIDE CHANNEL IN ENTERPRISE SYSTEMS
In the controlled or partially-controlled settings above, we
veriﬁed that the DF side channel was present. Enterprise
677
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:39 UTC from IEEE Xplore.  Restrictions apply. 
search systems however introduce a number of complica-
tions, and it is at ﬁrst unclear if the DF side channel can
be exploited. In this section we discuss the major issues
that must be addressed in understanding if such a system is
vulnerable in practice.
Hidden relevance formulae. An adversary may not know
which TF-IDF variant is being used. The space of TF-IDF
variants is large, with several different possible choices for
tf(t, d) and idf(t, D) other than what we deﬁned above, as