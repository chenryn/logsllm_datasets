培训
PostgreSQL 9.3
Day 3
digoal.zhou
2013/12/11
课程内容
 Day - 3
 数据分区
 目标:
 了解本地表分区的方法和具体实现, 了解分区表的DML操作
 了解异地分区的方法, 挑选PL/Proxy分区为例进行介绍
 了解异地数据合并和数据拆分的方法
 事务处理与并发控制
 目标:
 事务, 并发控制, 锁的介绍, 死锁的发现和处理, 实际应用中如何避免死锁
 监控数据库活动
 目标:
 了解各种维度的统计信息的解读(table, index, database, replication, sql...), 锁, 磁盘使用, 活动信息, 历史数据库活动统计报告
 PostgreSQL日常维护和检查
 目标:
 日志记录类型, 日志的处理, 表的维护, 数据的维护.
PostgreSQL 数据分区
 了解本地表分区的方法和具体实现, 了解分区表的DML操作
 了解异地分区的方法, 挑选PL/Proxy分区为例进行介绍
 了解异地数据合并和数据拆分的方法
PostgreSQL 本地分区
 PostgreSQL通过继承表的概念来实现数据分区表的查询,更新,删除,插入数据的逻辑.
 继承表和主表以及继承表之间是完全独立的存储结构, 可以单独指定表空间, 甚至允许字段不完全一致.
 数据分区的好处
 分区后, 单个分区表的索引和表都变小了, 可以保持在内存里面, 适合把热数据从大表拆分出来的场景.
 对于大范围的查询, 大表可以通过索引来避免全表扫描. 但是如果分区了的话, 可以使用分区的全表扫描. 适合经常要做大
范围扫描的场景, 按照范围分区(分区后采用全表扫描), 减少索引带来的随机BLOCK扫描.
 大批量的数据导入或删除, 对于大表来说, 删除大量的数据使用DELETE的话会带来大量的VACUUM操作负担.而使用分
区表的话可以直接DROP分区, 或者脱离子表和父表的继承关系.
 使用分区表, 还有一个好处是, 可以把不常用的分区放到便宜的存储上.
 因为每个表只能放在一个表空间上, 表空间和目录对应, 表的大小受到表空间大小的限制. 使用分区表则更加灵活.
PostgreSQL 本地分区
 数据库分区表举例
 范围分区
 根据字段存储的值取值范围进行分区, 例如日志表的时间字段, 用户表的ID范围等等.
 哈希分区
 根据字段存储值HASH再做和分区数做比特运算得到一个唯一的分区ID.
 或者取模也行.
 例如mod(hashtext(name),16), 对16个分区的场景.
 list分区
 与哈希分区类似, 但是直接使用字段值作为分区条件. 适合KEY值比较少并且比较均匀的场景.
 例如按性别字段作为分区字段. 那么就分成了2个区.
PostgreSQL 本地分区
 分区和表继承的概念
 继承表自动继承父表的约束, 非空约束. 但是不自动继承的是(uk,pk,fk,索引,存储参数等).
 例如 :
 digoal=# create table p1(id int primary key, info text unique, c1 int check(c1>0), c2 int not null, c3 int unique);
 CREATE TABLE
 digoal=# create table c1(like p1) inherits(p1);
 NOTICE: merging column "id" with inherited definition
 NOTICE: merging column "info" with inherited definition
 NOTICE: merging column "c1" with inherited definition
 NOTICE: merging column "c2" with inherited definition
 NOTICE: merging column "c3" with inherited definition
 CREATE TABLE
PostgreSQL 本地分区
 digoal=# \d+ p1
 Table "postgres.p1"
 Column | Type | Modifiers | Storage | Stats target | Description
 --------+---------+-----------+----------+--------------+-------------
 id | integer | not null | plain | |
 info | text | | extended | |
 c1 | integer | | plain | |
 c2 | integer | not null | plain | |
 c3 | integer | | plain | |
 Indexes:
 "p1_pkey" PRIMARY KEY, btree (id)
 "p1_c3_key" UNIQUE CONSTRAINT, btree (c3)
 "p1_info_key" UNIQUE CONSTRAINT, btree (info)
 Check constraints:
 "p1_c1_check" CHECK (c1 > 0)
 Child tables: c1
 Has OIDs: no
PostgreSQL 本地分区
 子表自动继承了父表的非空约束, 自定义约束. 未自动继承PK和UK.
 digoal=# \d+ c1
 Table "postgres.c1"
 Column | Type | Modifiers | Storage | Stats target | Description
 --------+---------+-----------+----------+--------------+-------------
 id | integer | not null | plain | |
 info | text | | extended | |
 c1 | integer | | plain | |
 c2 | integer | not null | plain | |
 c3 | integer | | plain | |
 Check constraints:
 "p1_c1_check" CHECK (c1 > 0)
 Inherits: p1
 Has OIDs: no
PostgreSQL 本地分区
 如果要继承UK,PK,索引,存储结构等, 创建时加including all;
 digoal=# drop table c1;
 digoal=# create table c1(like p1 including all) inherits(p1);
 digoal=# \d c1
 Table "postgres.c1"
 Column | Type | Modifiers
 --------+---------+-----------
 id | integer | not null
 info | text |
 c1 | integer |
 c2 | integer | not null
 c3 | integer |
 Indexes:
 "c1_pkey" PRIMARY KEY, btree (id)
 "c1_c3_key" UNIQUE CONSTRAINT, btree (c3)
 "c1_info_key" UNIQUE CONSTRAINT, btree (info)
 Check constraints:
 "p1_c1_check" CHECK (c1 > 0)
 Inherits: p1
PostgreSQL 本地分区
 可以使用alter table解除和加入继承关系.
 digoal=# alter table c1 no inherit p1;
 ALTER TABLE
 digoal=# alter table c1 drop constraint p1_c1_check;
 ALTER TABLE
 当主表和继承表的字段个数, 顺序, 名字, 以及类型或者约束条件有任何不一致时, 就无法自动添加继承.
 这里指的是默认继承的约束, 非空约束等. 不包含不会默认继承的约束UK,PK,FK等.
 digoal=# alter table c1 inherit p1;
 ERROR: child table is missing constraint "p1_c1_check"
 加上约束后就可以了
 digoal=# alter table c1 add constraint p1_c1_check check(c1>0);
 ALTER TABLE
 digoal=# alter table c1 inherit p1;
 ALTER TABLE
PostgreSQL 本地分区
 一个表可以同时继承多个父表, 一个父表可以被多个子表继承.
 但是必须注意, 一个表继承了多个主表的情况, 共有字段上, 所有的父表的约束包括not null的定义都必须继承过来. (同样
不包扩pk, uk, fk等)
 查主表默认情况下是会连带查询所有的子表的, 包括更深的子表(子表的子表).
 例如select * from p1; 默认会查询所有子表和自身.
 digoal=# explain select * from p1;
 QUERY PLAN
 -------------------------------------------------------------
 Append (cost=0.00..20.40 rows=1041 width=48)
 -> Seq Scan on p1 (cost=0.00..0.00 rows=1 width=48)
 -> Seq Scan on c1 (cost=0.00..20.40 rows=1040 width=48)
 (3 rows)
PostgreSQL 本地分区
 除非使用only或者修改sql_inheritance
 digoal=# set sql_inheritance=false; -- false时不会自动在表后面加*
 SET
 digoal=# explain select * from p1;
 QUERY PLAN
 ---------------------------------------------------
 Seq Scan on p1 (cost=0.00..0.00 rows=1 width=48)
 (1 row)
 digoal=# set sql_inheritance=true; -- true时自动在表后面加*, 使用only可以忽略*.
 SET
 digoal=# explain select * from only p1;
 QUERY PLAN
 ---------------------------------------------------
 Seq Scan on p1 (cost=0.00..0.00 rows=1 width=48)
 (1 row)
PostgreSQL 本地分区
 set sql_inheritance=true;的目的是在表名后自动添加星号.
 Select * from p1*;
 这样就会自动查所有的子表.
 所以set sql_inheritance=false, 使用星号suffix就和set sql_inheritance=true的目的意义.
 digoal=# set sql_inheritance=false;
 SET
 digoal=# explain select * from p1*;
 QUERY PLAN
 -------------------------------------------------------------
 Append (cost=0.00..20.40 rows=1041 width=48)
 -> Seq Scan on p1 (cost=0.00..0.00 rows=1 width=48)
 -> Seq Scan on c1 (cost=0.00..20.40 rows=1040 width=48)
 (3 rows)
PostgreSQL 本地分区
 SELECT, UPDATE, DELETE, TRUNCATE, DROP命令在主表上操作默认都会影响到子表.
 这些操作必须注意了, 小心谨慎.
 INSERT和COPY命令, 这两条命令是只对当前表操作的, 不会扩展到子表.
 结合分区规则优化DML
 查询优化, 主要目标缩小表的扫描范围. 只需要扫描有效子表.
 通过约束和参数constraint_exclusion来优化.
 The allowed values of constraint_exclusion are on (examine constraints for all tables), off (never examine constraints), and
partition (examine constraints only for inheritance child tables and UNION ALL subqueries). partition is the default setting.
 例如 :
 digoal=# show constraint_exclusion;
 ----------------------
 partition
 digoal=# create table p(id int, info text, crt_time timestamp);
 digoal=# create table c1(like p) inherits(p);
 digoal=# create table c2(like p) inherits(p);
 digoal=# create table c3(like p) inherits(p);
 digoal=# create table c4(like p) inherits(p);
PostgreSQL 本地分区
 digoal=# alter table c1 add constraint ck check (crt_time>='2013-01-01' and crt_time='2013-02-01' and crt_time='2013-03-01' and crt_time='2013-04-01' and crt_time Seq Scan on p (cost=0.00..0.00 rows=1 width=44)
 Filter: (crt_time = '2013-01-01 00:00:00'::timestamp without time zone)
 -> Seq Scan on c1 (cost=0.00..23.75 rows=6 width=44)
 Filter: (crt_time = '2013-01-01 00:00:00'::timestamp without time zone)
 (5 rows)
 这种方法同样适用UPDATE, DELETE.
PostgreSQL 本地分区
 digoal=# set constraint_exclusion=off;
 SET
 digoal=# explain select * from p where crt_time='2013-01-01';
 QUERY PLAN
 ---------------------------------------------------------------------------------
 Append (cost=0.00..95.00 rows=25 width=44)
 -> Seq Scan on p (cost=0.00..0.00 rows=1 width=44)
 Filter: (crt_time = '2013-01-01 00:00:00'::timestamp without time zone)
 -> Seq Scan on c1 (cost=0.00..23.75 rows=6 width=44)
 Filter: (crt_time = '2013-01-01 00:00:00'::timestamp without time zone)
 -> Seq Scan on c2 (cost=0.00..23.75 rows=6 width=44)
 Filter: (crt_time = '2013-01-01 00:00:00'::timestamp without time zone)
 -> Seq Scan on c3 (cost=0.00..23.75 rows=6 width=44)
 Filter: (crt_time = '2013-01-01 00:00:00'::timestamp without time zone)
 -> Seq Scan on c4 (cost=0.00..23.75 rows=6 width=44)
 Filter: (crt_time = '2013-01-01 00:00:00'::timestamp without time zone)
 (11 rows)
PostgreSQL 本地分区
 更新, 删除优化, 优化目标同样是缩小扫描范围. 除了使用约束的方法, 还可以使用触发器或规则.