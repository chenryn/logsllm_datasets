            mov      edx, [ebp+var_18 ; [EBP-18h]=0x50 
            mov      dword ptr [ebx], 5 
            test     edx, edx          ; EDX=0x50 
            jnz      loc_2CE1192 
            mov      edx, [ebp+var_14] 
            mov      esi, [ebp+var_C] 
            mov      eax, ebx 
            mov      ebx, [ebp+var_8] 
            mov      ecx, 5 
            jmp      loc_2CE10F6 
loc_2CE127A: ; DATA XREF: .rdata:0628B0B0 
            mov      edx, [ebp+var_14] ; [EBP-14h]=0xc98c938 
            mov      esi, [ebp+var_C] ; [EBP-0Ch]=0xcdfe248 
            mov      edi, [ebp+var_4] ; [EBP-4]=0xc98c938 
            mov      eax, ebx          ; EBX=0xcdfe554 
            mov      ebx, [ebp+var_8] ; [EBP-8]=0 
loc_2CE1288: ; CODE XREF: _kqvrow_+1F 
            mov      eax, [eax+8]     ; [EAX+8]=0xce2ffb0, "NLSRTL Version 11.2.0.1.0 - Production" 
            test     eax, eax          ; EAX=0xce2ffb0, "NLSRTL Version 11.2.0.1.0 - Production" 
            jz        short loc_2CE12A7 
            push     offset aXKqvvsnBuffer ; "x$kqvvsn buffer" 
            push     eax                ; EAX=0xce2ffb0, "NLSRTL Version 11.2.0.1.0 - Production" 
            mov       eax, [ebp+arg_C] ; [EBP+14h]=0x8a172b4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 81 章 Oracle RDBMS 
805 
            push      eax                ; EAX=0x8a172b4 
            push     dword ptr [edx+10494h] ; [EDX+10494h]=0xc98cd58 
            call     _kghfrf           ; tracing nested maximum level (1) reached, skipping this  
      CALL 
            add      esp, 10h 
loc_2CE12A7: ; CODE XREF: _kqvrow_+1C1 
            xor      eax, eax 
            mov      esp, ebp 
            pop      ebp 
            retn                        ; EAX=0 
_kqvrow_  endp 
不难看出，该函数从外部获取行号信息，然后按照下述顺序组装、返回字符串。 
String 1 
String 2 
String 3 
String 4 
String 5 
Using vsnstr, vsnnum, vsnban global variables. Calling sprintf(). 
Calling kkxvsn(). 
Calling lmxver(). 
Calling npinli(), nrtnsvrs(). 
Calling lxvers(). 
Oracle 按照上述次序依次调用相应函数，从而获取各个模块的版本信息。 
81.2  X$KSMLRU 表 
官方文件《Diagnosing and Resolving Error ORA-04031》
①
Oracle 能够记录内存池内发生的、强制释放其他对象的内存占用情况。负责记录这种情况的数据表
是固定表 x$ksmlru。它可用来诊断内存异常消耗的具体原因。 
如果内存池里发生了大量对象周期性释放的情况，那么这种问题会增加数据库的响应时间。而且当
这些对象再次被加载到内存池时，这一现象还会增加库缓存（library cache）互锁的概率。 
固定表 x$ksmlru 具有一个特性：只要出现了检索表的人为操作，那么这个表内的数据就会被立刻清
空。此外，该数据表只会存储内存占用最大的前几项记录。“查询后立刻清空”的设定，是为了凸显那些
先前并不那么耗费资源的内存分配情况。也就是说，每次检索所对应的时间段都是不同的。正因如此，数
据库用户应当妥善保管该表的查询结果。 
特别提到了这个数据表： 
换句话说，查询这个表不是问题，问题是查询后它会被立即清空。那么，清空表的具体原因是什么？
既然 kqftab 表和 kqftap 表含有 X$-表的全部信息，我们可以继续使用前文介绍的 oracle_tables 进行分析。
在 oracle_tables 的返回结果里，我们看到：在制备 X$KSMLRU 表的元素时，oracle 调用了 ksmlrs() 函数。 
指令清单 81.10  Result of oracle tables 
kqftab_element.name: [X$KSMLRU] ?: [ksmlr] 0x4 0x64 0x11 0xc 0xffffc0bb 0x5 
kqftap_param.name=[ADDR] ?: 0x917 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[INDX] ?: 0xb02 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[INST_ID] ?: 0xb02 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[KSMLRIDX] ?: 0xb02 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[KSMLRDUR] ?: 0xb02 0x0 0x0 0x0 0x4 0x4 0x0 
kqftap_param.name=[KSMLRSHRPOOL] ?: 0xb02 0x0 0x0 0x0 0x4 0x8 0x0 
kqftap_param.name=[KSMLRCOM] ?: 0x501 0x0 0x0 0x0 0x14 0xc 0x0 
kqftap_param.name=[KSMLRSIZ] ?: 0x2 0x0 0x0 0x0 0x4 0x20 0x0 
kqftap_param.name=[KSMLRNUM] ?: 0x2 0x0 0x0 0x0 0x4 0x24 0x0 
kqftap_param.name=[KSMLRHON] ?: 0x501 0x0 0x0 0x0 0x20 0x28 0x0 
kqftap_param.name=[KSMLROHV] ?: 0xb02 0x0 0x0 0x0 0x4 0x48 0x0 
① http://www.oralab.net/METANOTES/DIAGNOSING%20AND%20RESOLVING%20ORA-04031%20ERROR.htm。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
806 
逆向工程权威指南（下册） 
kqftap_param.name=[KSMLRSES] ?: 0x17 0x0 0x0 0x0 0x4 0x4c 0x0 
kqftap_param.name=[KSMLRADU] ?: 0x2 0x0 0x0 0x0 0x4 0x50 0x0 
kqftap_param.name=[KSMLRNID] ?: 0x2 0x0 0x0 0x0 0x4 0x54 0x0 
kqftap_param.name=[KSMLRNSD] ?: 0x2 0x0 0x0 0x0 0x4 0x58 0x0 
kqftap_param.name=[KSMLRNCD] ?: 0x2 0x0 0x0 0x0 0x4 0x5c 0x0 
kqftap_param.name=[KSMLRNED] ?: 0x2 0x0 0x0 0x0 0x4 0x60 0x0 
kqftap_element.fn1=ksmlrs 
kqftap_element.fn2=NULL 
tracer 程序可以印证这个结果：每次查询 X$KSMLRU 表时，Oracle 都会调用这个函数。 
另外，我们还看到 ksmsplu_sp() 函数和 ksmsplu_jp() 函数都引用了 ksmsplu() 函数。即，无论是执行
ksmsplu_sp() 函数、还是执行 ksmsplu_jp() 函数，最后都会调用 ksmsplu() 函数。在 ksmsplu() 结束之前，它
调用了 memset() 函数。 
指令清单 81.11  ksm.o 
… 
.text:00434C50 loc_434C50:                                   ; DATA XREF: .rdata:off_5E50EA8 
.text:00434C50                     mov       edx, [ebp-4] 
.text:00434C53                     mov       [eax], esi 
.text:00434C55                     mov       esi, [edi] 
.text:00434C57                     mov       [eax+4], esi 
.text:00434C5A                     mov       [edi], eax 
.text:00434C5C                     add       edx, 1 
.text:00434C5F                     mov       [ebp-4], edx 
.text:00434C62                     jnz       loc_434B7D 
.text:00434C68                     mov       ecx, [ebp+14h] 
.text:00434C6B                     mov       ebx, [ebp-10h] 
.text:00434C6E                     mov       esi, [ebp-0Ch] 
.text:00434C71                     mov       edi, [ebp-8] 
.text:00434C74                     lea       eax, [ecx+8Ch] 
.text:00434C7A                     push      370h             ; Size 
.text:00434C7F                     push      0                 ; Val 
.text:00434C81                     push      eax               ; Dst 
.text:00434C82                     call      __intel_fast_memset 
.text:00434C87                     add       esp, 0Ch 
.text:00434C8A                     mov       esp, ebp 
.text:00434C8C                     pop       ebp 
.text:00434C8D                     retn 
.text:00434C8D _ksmsplu          endp 
含有 memset（block，0，size）的构造函数通常用于清空内存区域。如果我们阻止它调用这个 memset() 函数，
那么将发生什么情况？ 
为此，我们在程序向 memset() 函数传递参数的 0x434C7A 处设置断点、令调试程序 tracer 在此刻将程
序计数器（PC，即 EIP）调整为 0x434C8A，从而使程序“跳过”清除内存的 memset() 函数。可以说，这
种“调试”相当于令程序在 0x434C7A 处无条件转移到 0x434C8A。相关的 tracer 指令如下： 
tracer -a:oracle.exe bpx=oracle.exe!0x00434C7A,set(eip,0x00434C8A) 
请注意：上述地址仅对 Win32 版本的 Oracle RDBMS 11.2 有效。 
经上述调试指令启动 Oracle 以后，无论查询 X$ KSMLRU 表多少次，这个表都不会被清空了。当然，
不要在投入实用的业务服务器上进行这种测试。 
或许这种调试的用处不大，或许这种修改有悖实用性原则。不过，当我们要查找特定的指令时，我们
可以采用这样的调试步骤！ 
81.3  V$TIMER 表 
固定视图 V$TIMER 算得上是更新最频繁的视图之一了。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 81 章 Oracle RDBMS 
807 
V$TIME 以百分之一秒为单位、记录实际运行时间。这个值以计时原点开始测算，因此具体数值与
操作系统相关。它会在 4 字节溢出时（大约历经 497 天后）循环，重新变为 0。 
上述内容摘自官方文档。
①
① http://docs.oracle.com/cd/B28359_01/server.111/b28320/dynviews_3104.htm。 
比较有趣的是：Win32 版本的 Oracle 程序和 Linux 版本的程序，返回的时间戳竟然是不同的。我们能
否找到生成返回值的函数呢？ 
下述操作表明，时间信息最终取自 X$KSUTM 表： 
SQL> select * from V$FIXED_VIEW_DEFINITION where view_name='V$TIMER'; 
VIEW_NAME 
------------------------------ 
VIEW_DEFINITION 
-------------------------------------------------------------------------------- 
V$TIMER 
select  HSECS from GV$TIMER where inst_id = USERENV('Instance') 
SQL> select * from V$FIXED_VIEW_DEFINITION where view_name='GV$TIMER'; 
VIEW_NAME 
------------------------------ 
VIEW_DEFINITION 
-------------------------------------------------------------------------------- 
GV$TIMER 
select inst_id,ksutmtim from x$ksutm 
不过 kqftab/kqftap 表没有引用生成这项数值的函数。 
指令清单 81.12  Result of oracle tables 
kqftab_element.name: [X$KSUTM] ?: [ksutm] 0x1 0x4 0x4 0x0 0xffffc09b 0x3 
kqftap_param.name=[ADDR] ?: 0x10917 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[INDX] ?: 0x20b02 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[INST_ID] ?: 0xb02 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[KSUTMTIM] ?: 0x1302 0x0 0x0 0x0 0x4 0x0 0x1e 
kqftap_element.fn1=NULL 
kqftap_element.fn2=NULL 
当我们搜索字符串 KSUTMTIM 时，我们看到了下述函数： 
kqfd_DRN_ksutm_c proc near                 ; DATA XREF: .rodata:0805B4E8 
arg_0             = dword ptr   8 
arg_8             = dword ptr   10h 
arg_C             = dword ptr   14h 
                   push     ebp 
                   mov      ebp, esp 
                   push     [ebp+arg_C] 
                   push     offset ksugtm 
                   push     offset _2__STRING_1263_0 ; "KSUTMTIM" 
                   push     [ebp+arg_8] 
                   push     [ebp+arg_0] 
                   call     kqfd_cfui_drain 
                   add      esp, 14h 
                   mov      esp, ebp 
                   pop      ebp 
                   retn 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
808 
逆向工程权威指南（下册） 
kqfd_DRN_ksutm_c endp 
而数据表 kqfd_tab_registry_0 引用了 kqfd_DRN_ksutm_c() 函数： 
dd offset _2__STRING_62_0 ; "X$KSUTM" 
dd offset kqfd_OPN_ksutm_c 
dd offset kqfd_tabl_fetch 
dd 0 
dd 0 
dd offset kqfd_DRN_ksutm_c 
打开 Linux x86 版本的这个文件，可看到如下所示的代码。 
指令清单 81.13  ksu.o 
ksugtm               proc near 
var_1C               = byte ptr  -1Ch 
arg_4                = dword ptr  0Ch 
                      push     ebp 
                      mov       ebp, esp 
                      sub       esp, 1Ch 
                      lea       eax, [ebp+var_1C] 
                      push     eax 
                      call     slgcs 
                      pop       ecx 
                      mov       edx, [ebp+arg_4] 
                      mov       [edx], eax 
                      mov       eax, 4 
                      mov       esp, ebp 
                      pop       ebp 
                      retn 
ksugtm               endp 
在 Win32 版本的程序里，相应文件的有关指令几乎相同。 
这是我们寻找的函数吗？我们通过下述指令验证一下： 
tracer -a:oracle.exe bpf=oracle.exe!_ksugtm,args:2,dump_args:0x4 
然后在 SQL*Plus 里执行以下指令： 
SQL> select * from V$TIMER; 
      HSECS 
---------- 
  27294929 
SQL> select * from V$TIMER; 
      HSECS 
---------- 
  27295006 
SQL> select * from V$TIMER; 
      HSECS 
---------- 
  27295167 
指令清单 81.14  tracer output 
TID=2428|(0) oracle.exe!_ksugtm (0x0, 0xd76c5f0) (called from oracle.exe!__VInfreq__qerfxFetch  
      +0xfad (0x56bb6d5)) 
Argument 2/2 
0D76C5F0: 38 C9                                                    "8.                 " 
TID=2428|(0) oracle.exe!_ksugtm () -> 0x4 (0x4) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 81 章 Oracle RDBMS 
809 
Argument 2/2 difference 
00000000: D1 7C A0 01                                             ".|..               " 
TID=2428|(0) oracle.exe!_ksugtm (0x0, 0xd76c5f0) (called from oracle.exe!__VInfreq__qerfxFetch  
      +0xfad (0x56bb6d5)) 
Argument 2/2 
0D76C5F0: 38 C9                                                     "8.                  " 
TID=2428|(0) oracle.exe!_ksugtm () -> 0x4 (0x4) 
Argument 2/2 difference 
00000000: 1E 7D A0 01 
TID=2428|(0) oracle.exe!_ksugtm (0x0, 0xd76c5f0) (called from oracle.exe!__VInfreq__qerfxFetch  
      +0xfad (0x56bb6d5)) 
Argument 2/2 
0D76C5F0: 38 C9                                                     "8.                   " 
TID=2428|(0) oracle.exe!_ksugtm () -> 0x4 (0x4) 
Argument 2/2 difference 
00000000: BF 7D A0 01                                              ".}..                 " 
上述数据和我们在 SQL*Plus 看到的数据完全一样。它是函数的第二个参数。 
然后我们再来分析 Linux x86 程序里的 slgcs() 函数： 
slgcs                proc near 
var_4                = dword ptr -4 
arg_0                = dword ptr  8 
                      push     ebp 
                      mov       ebp, esp 
                      push     esi 
                      mov      [ebp+var_4], ebx 
                      mov      eax, [ebp+arg_0] 
                      call     $+5 
                      pop      ebx 
                      nop                         ; PIC mode 
                      mov      ebx, offset _GLOBAL_OFFSET_TABLE_ 
                      mov      dword ptr [eax], 0 
                      call     sltrgatime64     ; PIC mode 
                      push     0 
                      push     0Ah 
                      push     edx 
                      push     eax 
                      call     __udivdi3        ; PIC mode 
                      mov      ebx, [ebp+var_4] 
                      add      esp, 10h 
                      mov      esp, ebp 
                      pop      ebp 
                      retn 
slgcs                endp 
这个函数调用了sltrgatime64()，然后把返回值除以 10。
①
① 有关除法运算的有关细节，请参见本书第 41 章。 
在 Win32 版本的程序里，这个函数则是： 
_slgcs               proc near                  ; CODE XREF: _dbgefgHtElResetCount+15 
                                                   ; _dbgerRunActions+1528 
                      db       66h 
                      nop 
                      push     ebp 
                      mov      ebp, esp 
                      mov      eax, [ebp+8] 
                      mov      dword ptr [eax], 0 
                      call     ds:__imp__GetTickCount@0 ; GetTickCount() 
                      mov      edx, eax 
                      mov      eax, 0CCCCCCCDh 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
810 
逆向工程权威指南（下册） 
                      mul      edx 
                      shr      edx, 3 
                      mov      eax, edx 
                      mov      esp, ebp 
                      pop      ebp 
                      retn 
_slgcs               endp 
Win32 的结果就是GetTickCount() 函数返回值的十分之一。
①
① 有关 GetTickCount() 函数，请参见 MSDN：https://msdn.microsoft.com/en-us/library/windows/desktop/ms724408(v=vs.85).aspx。 
这就是 Oracle 在 Win32 下和 Linux x86 下返回不同结果的根本原因—它调用了完全不同的操作系统
函数。 
“call kqfd_cfui_drain”里有个“drain”。这个关键字有“表中的某个列取自特定函数的返回值”的含义。 
前面介绍过的 oracle_tables 工具能够处理 kqfd_tab_registry_0。因此，我们可以用它分析“列”的值与
特定函数之间的关联关系： 
[X$KSUTM] [kqfd_OPN_ksutm_c] [kqfd_tabl_fetch] [NULL] [NULL] [kqfd_DRN_ksutm_c] 
[X$KSUSGIF] [kqfd_OPN_ksusg_c] [kqfd_tabl_fetch] [NULL] [NULL] [kqfd_DRN_ksusg_c] 
上述信息中的 OPN 代表“Open”和“DRN”。DRN 当然还是“drain”的意思。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 8822 章