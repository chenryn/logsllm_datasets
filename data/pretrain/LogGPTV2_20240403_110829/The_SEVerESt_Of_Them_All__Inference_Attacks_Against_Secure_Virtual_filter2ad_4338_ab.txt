Scope
Control of
state transition
Available
information
SGX
Enclave in userspace
No access to registers
Host controls the enclave
Software executing
in the enclave,
page faults
Attacks
Data in the enclave
[41], [30], [31], [53], [7]
SEV
Virtual Machine
Full access to guest registers
Hypervisor controls
VMEXITs
Software executing in the enclave [36], [24],
Register state, page faults, debug events
Recovery of specific data[36], [24]
Replay of code [24]
Recovery of instructions executed [this paper]
SEV-ES
Virtual Machine
Guest controls access to
registers
Guest controls most
of VMEXITs
Application performance
data (virtual addr, physical addr,
instruction type (branch, load/store))
Structure of an application [this paper]
For efficiency, memory encryption is performed using a high
performance AES engine in dedicated hardware in the memory
controllers. Each virtual machine is tagged with an associated en-
cryption key, and data is restricted to only the VM using that tag.
It is expected that the guest owner provides the guest image to
the cloud system. The firmware assists in launching the guest and
provides a measurement back to the guest owner. If the guest owner
deems this measurement correct, they in turn provide additional
secrets (such as a disk decryption key) to the running guest to al-
low it to proceed with start-up. The key is provided via a secure
key management interface to ensure that the hypervisor never
has access to it. Confidentiality of the guest is accomplished by
encrypting memory with a key that only the firmware knows. The
management interface does not allow the memory encryption key
or any other secret state to be exported outside of the firmware
without properly authenticating the recipient. This prevents the
hypervisor from gaining access to the keys2.
2.1 Register Inference Attacks
To re-cap, when SEV is enabled, the security processor is used
to automatically encrypt and decrypt the contents of memory on
transitions between the guest and the hypervisor. All that is left
unencrypted are general purpose registers in the virtual machine
control block and DMA pages used by the virtual input/output
devices. To see why this is a cause of concern, let us first assume
the expected deployment model where: the owner of the virtual
machine verifies the platform measurements, the disk image of the VM
is encrypted and cannot be read by the hypervisor, and the guest policy
is set to prevent the debug access to VM memory. Additionally, the
hypervisor has access to shared memory regions (e.g., input/output
data buffers), it can force the guest to exit, and it has access to the
Virtual Machine Control Block (VMCB) that includes unencrypted
processor registers (general purpose and machine specific).
With that in mind, recall that the CPU fetches instructions from
memory locations indicated by the instruction pointer, then decodes
and executes them. Optionally, the results can be stored in memory.
Different types of instructions (e.g., arithmetic, logical, and storage)
all operate on general purpose registers and memory locations.
Special classes of instructions such as floating point arithmetic or
hardware assisted encryption, operate on dedicated registers.
In Section 4, we show the security afforded by designs that leave
register contents unprotected can be undermined by judiciously
2This assumes a correct implementation of the PSP and so the vulnerabilities presented
by CTS-LABS [12] are out of scope.
inspecting the general purpose registers and unmasking the com-
putation that passes through them. By passively observing changes
in the registers, an adversary can recover critical information about
activities in the encrypted guest. Naïvely, one could do this by single
stepping a target process from within the hypervisor, but doing so
would incur a significant performance penalty that would be easily
noticeable in the guest. Moreover, the amount of data collected (i.e.,
register contents) would quickly become overwhelming.
2.2 Structural Inference Attacks
When SEV-ES is enabled, the register state in the Virtual Machine
Control Block is no longer available. SEV-ES not only encrypts but
also protects the integrity of the VMCB, thus preventing attacks on
the register state. A new structure called Guest Hypervisor Control
Block (GHCB) [4] acts as an intermediary between the guest and
the hypervisor during hypercalls. The guest dictates, via a policy,
what information is shared in the GHCB. Furthermore, from a
design perspective, VMEXITs are classified as either Automatic
(AE) or Non-Automatic (NAE); AE events do not require exposing
any state from the guest and trigger an immediate control transfer
to the hypervisor. Performance measurement events, such as the
delivery of an interrupt when the data is ready, are automatic events.
In Section 4.3, we show how one can use data provided by the
Instruction Based Sampling (IBS) subsystem (e.g., to learn whether
an executed instruction was a branch, load, or store) to identify the
applications running within the VM. Intuitively, one can collect
performance data from the virtual machine and match the observed
behavior to known signatures of running applications.
Before delving into the particulars of our attacks, we first review
some pertinent related work to help set the broader context. For
ease of presentation, Table 1 provides a high-level overview of
the protection provided by commercial offerings, the information
leaked under each offering, and the types of attacks known to date.
As noted we assume the ability to control the hypervisor running
the secured VMs, but not any prior knowledge of the software
running inside the VMs. The attack against SEV protected VMs
requires access to general purpose registers (in VMCB), as well as
the ability to control second level translation page faults. The attack
against SEV-ES only assumes the availability of information from
the performance measuring subsystem (i.e., IBS).
3 RELATED WORK
Side-Channels. To date, numerous attacks (e.g., [29, 30, 33, 35,
50]) have been proposed for leaking information across security do-
mains by leveraging architectural or micro-architectural artifacts.
Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand75Lee et al. [31], for instance, demonstrated the feasibility of fine
grained control flow attacks in an enclave. The attack takes advan-
tage of the fact that SGX does not clear the branch history when
switching security boundaries. Like other attacks [7, 41, 45, 58] on
SGX, the adversary model assumes the attacker knows the possible
flows of a target enclave program (e.g., by statically or dynamically
analyzing its source code or binary).
Using similar knowledge, Xu et al. [58] introduce so-called control-
led-channel attacks to extract information from victim enclaves.
Such attacks exploit secret-dependent control flow and data ac-
cesses in legacy applications. The attacks are based on the observa-
tion that a processor in enclave mode accesses unprotected page
table memory during the address translation process, and so a
page table walk can be used to identify which pages were accessed.
Specifically, they rely on sequences of page faults to identify specific
memory addresses, and show that the page fault side channel is
strong enough to extract sensitive data from enclave applications.
Wang et al. [53] provide a review of memory and cache side
channels, and propose a series of cache-line attacks related to ad-
dress translation in CPU hardware. Their attacks achieve spatial
granularity via cross-enclave PRIME+PROBE [20] attacks or cross-
enclave shared DRAM attacks (e.g., [28, 40, 57]) to extract sensitive
information. More recently, Kocher et al. [29] and Lipp et al. [33]
introduce ingenious micro-architectural attacks that trick the pro-
cessor into speculatively executing instructions that ultimately leak
information about a victim’s memory address space. The interested
reader is referred to [6, 34, 46] for excellent surveys. As articulated
in Table 1, these attacks are unrelated to what we study herein.
Attacks on SEV. Most germane are the ideas presented by Het-
zelt and Buhren [24] and Sharkey [44]. Hetzelt and Buhren [24]
analyzed the design documents for SEV and posit a series of attacks.
The most powerful of their attacks tries to force leakage of infor-
mation by introducing an interruption of the guest execution after
protected data has been transferred from an attacker controlled
memory location into an unencrypted register. The authors show
how the gadgets used to force the vmexit can be located via static
analysis, and used later in an online attack. Essentially, Hetzelt and
Buhren [24] argue that an adversary can perform a linear sweep of
memory where the contents of the VM are dumped by forcing a
vmexit to read the data moved to the unencrypted register.
Although the attack is plausible, it has several practical limita-
tions. For one, it assumes the adversary has in-depth knowledge
of the guest’s operating system (e.g., the kernel binary layout). In
fact, lack of knowledge of exact offsets renders the attacks [24,
Section 5.1] infeasible. Most critically, the attack requires intricate
knowledge of the memory allocation process in order to allocate
an unencrypted page in the guest or to modify an encrypted page
to remove the C-bit [27] that enables memory encryption.
Sharkey [44] discussed a similar idea at BlackHat, but the tech-
niques for undermining SEV either bypass the load-time integrity
checks (e.g., to install a rootkit) or intercept the AES-NI instructions
(to read the register contents) by generating an exception anytime
an AES-NI instruction is executed. The adversarial model also as-
sumes no encrypted storage or attestation is in place, which does
not conform to AMD’s envisioned deployment model.
Alternatively, Du et al. [14] explored the possibility of chosen
ciphertext attacks against SEV, based on theoretical weaknesses in
the tweak-based algorithm suggested by AMD as a replacement to
AES-CTR mode. They argue that attacks can be designed concep-
tually based on the assumption that i) data integrity protection is
not provided in SEV and ii) the tweak algorithm uses host physical
addresses instead of VM physical addresses;3 the combination of
which allows an adversary to swap the VM addresses of two en-
crypted pages and perform chosen ciphertext attacks under specific
conditions. As a mitigation, the authors recommend the use of a
different key derivation function (namely NIST SP 800-108). Like
the work of Hetzelt and Buhren [24], their attack was only a simu-
lation and not on the SEV-enabled hardware that became available
in late 2017. Most recently, Morbitzer et al. [36, 37] explored the
idea of using the applications running within the protected enclave
to leak the data from the VM. This attack hinges on the presence of
an application that serves data from the VM to the outside (e.g., a
web server) and uses the second level address translation to replace
the memory pages of the content to be served, where the chosen
pages are those an adversary wants to leak.
Unlike these works, we present a comprehensive technique for
identifying the instructions executed in the encrypted guest given
only a trace of changes of general purpose registers. Our analyses
are on the real hardware and we pay particular attention to general-
izable techniques (e.g., that go beyond simply peeking into AES-NI
instructions [44]) that can be stealthily performed.
Attacks on SEV-ES. To the best of our knowledge, there are
no attacks specifically designed for SEV-ES. Although the attack on
SEV by Morbitzer et al. [36, 37] does not depend on any state that
would be encrypted under SEV-ES, success of that attack hinges
on the presence of a remote communication service running in the
target VM. Specifically, like Du et al. [14], Morbitzer et al. [37] take
advantage of the fact that since (i) SEV-encrypted VMs lack integrity
protection, and (ii) the hypervisor is responsible for second-level
address translation, a malicious or compromised hypervisor could
leverage the communication service to learn host physical address
mappings in main memory, change the memory layout, and subse-
quently leak the contents of memory. Of course, re-mapping the
memory for applications in flight can easily lead to crashing the
affected applicatons. We have no such limitation. Moreover, such
an attack is far from stealthy, requiring hundreds of thousands of
requests over several hours, during which any visitor requesting
data from the attacked service would notice the nonsensical re-
sponses [37]. Our attacks, by contrast, can be perpetrated with only
a handful of requests, and incur little to no user-perceived delay.
4 APPROACH
One challenge with our register inference attacks is that millions of
data points might need to be collected and processed. To alleviate
that, we take a white-box approach. The intuition is that since only
a small part of a target process’ computation needs to be closely
monitored, we can first identify that part using coarse-grained
monitoring, and once the computation of interest is about to begin,
switch to fine-grained monitoring. The key is knowing when to
switch modes.