### 固件解密与自定义固件写入研究

#### 1. 固件解密流程分析

`imgdecrypt` 是一个有趣的工具，它可以根据自身的文件名来决定执行镜像的解密或加密操作。在 `decrypt_firmware` 函数的开始部分，首先将字符串 `0123456789ABCDEF` 写入栈中，然后调用 `sub_40266C` 函数来计算用于解密镜像的密钥。通过分析 `sub_40266C` 函数可以发现，该函数从地址 `0x403010` 处获取 AES 解密所需的密钥和初始化向量 (IV) 等数据。随后，使用这些数据调用 `decryptData` 函数进行解密。

- **地址 `0x403010` 的数据**：成功解密后的密钥为 `C05FBF1936C99429CE2A0781F08D6AD8`。
- **终端输出**：程序会打印出计算得到的密钥，并且该密钥与 AES 解密结果一致。

接下来，程序调用 `verify_image` 函数对镜像进行解密操作。`verify_image` 函数首先检查镜像头部是否包含 `SHRS` 魔数。如果验证通过，函数会从镜像中的第 8 到第 12 字节读取解密数据长度字段，并从偏移量 `0x6dc` 开始获取加密的数据内容进行 SHA-512 校验。校验结果与镜像偏移量 `0x9C` 处存储的 SHA-512 值进行比对。

- **镜像头部结构**：
  - `0x9C`：存储加密数据的 SHA-512 校验值。
  - `0x5C`：存储原始数据的 SHA-512 校验值。

当加密数据的 SHA-512 校验通过后，`decryptData` 函数会被调用来解密数据。解密完成后，程序会计算解密后数据的 SHA-512 值，并从镜像 `0x5C` 处读取 SHA-512 值进行校验。所有校验通过后，调用 `verifyMD` 对解密和加密的数据进行 RSA 签名验证。签名验证通过后，解密后的镜像将被保存到 `/var/.firmware.orig` 文件中。

最后，`upload.cgi` 调用 `/bin/mtd_write` 命令将解密后的镜像文件写入闪存（flash）中，完成固件升级过程。由于固件升级包使用了 RSA 签名校验，直接伪造固件升级包的难度较大，需要结合其他漏洞才能实现自定义固件的写入。

#### 2. 自定义固件写入研究

##### 2.1 防砖准备工作

为了安全地进行固件写入测试，首先需要备份 flash 中的固件。可以通过以下方法从 MTD 设备中导出并下载 Kernel 部分：

```bash
# 查看 MTD 设备信息
cat /proc/mtd
```

示例输出：
```
dev:    size   erasesize  name
mtd0: 00400000 00010000 "ALL"
mtd1: 00030000 00010000 "Bootloader"
mtd2: 00010000 00010000 "Config"
mtd3: 00010000 00010000 "Factory"
mtd4: 003b0000 00010000 "Kernel"
```

使用 `dd` 命令从 MTD 设备导出 Kernel 部分到 web 目录：

```bash
/home/busybox.mipsel dd if=/dev/mtd4 of=/etc_ro/web/mtd4_Kernel.dump
```

示例输出：
```
7552+0 records in
7552+0 records out
3866624 bytes (3.7MB) copied, 1.412360 seconds, 2.6MB/s
```

备份完成后，如果测试过程中出现系统异常，只要 U-Boot 部分未被破坏，可以使用 U-Boot 引导界面的第二个菜单功能进行固件刷写还原。配置 TFTP 服务器及文件名称后，通过 TFTP 进行固件还原。

##### 2.2 Linux Kernel Image 分析

我们的目标是修改路由器内核中打包的文件，以实现篡改数据或植入恶意程序的目的。首先，使用 `binwalk` 工具对备份的 kernel image 进行分析，发现这是一个 uImage 封装并使用 LZMA 压缩的 Linux kernel image 文件。

手动从 uImage 封装的文件中提取 LZMA 压缩的 kernel image 文件：

```bash
# 根据 uImage 中 image size 字段的大小 3772774 字节
dd if=mtd4_Kernel.dump of=kernel_image.lzma bs=1 skip=64 count=3772774
```

注意：必须使用特定版本的 LZMA 工具才能正常解压和压缩。设备基于 Ralink SDK 开发，因此需要编译对应 SDK 中的 LZMA 和 XZ 工具。可以在网上搜索 `MediaTek_ApSoC_SDK_4320_20150414.tar.bz2` 版本的 SDK，经测试该 SDK 中的工具可以成功处理镜像文件。

使用编译好的 LZMA 工具解压镜像文件，并使用 `binwalk` 对解压后的文件进行分析，可以看到 kernel image 中有一个使用 XZ 压缩的文件。通常，在 Linux kernel image 中使用 XZ 压缩的大多是 rootfs 文件。

根据 XZ 文件格式的特征，XZ 压缩文件有特定的起始标识 `\xFD\x37\x7A\x58\x5A\x00` 和结束标识 `\x59\x5A`。通过对文件进行分析，可以得到 XZ 文件在镜像中的正确起始及结束地址，提取和解压命令如下：

```bash
# 提取 XZ 文件
dd if=kernel_image of=root_fs.xz bs=1 skip=4763648 count=2384780

# 查看 XZ 文件的内容
~/IoT/tool/bin/xz -l root_fs.xz 

# 解压 XZ 文件
~/IoT/tool/bin/xz -d root_fs.xz
```

解压后的 XZ 数据是一个 cpio 归档文件。使用 `file` 命令确认解压后的文件类型，并使用 `cpio` 命令查看归档的文件列表：

```bash
# 确认解压后的文件类型
file root_fs

# 使用 cpio 命令查看归档的文件列表
cpio -tv -F root_fs | more
```

下一步是提取 cpio 中的文件。创建目录 `rootfs` 并解压归档文件：

```bash
mkdir rootfs
cd rootfs
cat ../root_fs | cpio -idmvH newc --no-absolute-filenames
ls -la
```

通过以上步骤，可以成功解压并查看归档中的文件。