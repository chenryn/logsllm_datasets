# RATicate攻击活动分析
|
##### 译文声明
本文是翻译文章，文章原作者 sophos，文章来源：news.sophos.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 概述
在一系列可以追溯到2019年11月的恶意垃圾邮件活动中，某未确认身份的组织发送诸多安装程序，用以投递RAT及窃取受害者计算机信息的恶意软件。
我们已经确定了五次不同的攻击活动，位于2019年11月到2020年1月期间，其payload使用相似代码及指向相同C2。
攻击活动针对的企业位于欧洲，中东和韩国。这使得我们相信它们出于同一组织之手，故称之为 **RATicate** 。
在新发现的攻击活动中，我们发现其通过新冠肺炎(COVID-19)诱惑受害者打开恶意软件。 虽然其改变了策略，但我们仍怀疑此次攻击活动是该组织所为。
本篇文章中，我们将关注其初始载荷，即每次活动都使用到的 [Nullsoft Scriptable安装系统(NSIS)
](https://nsis.sourceforge.io/Main_Page)。
NSIS是一款开源工具，用以创建Windows安装程序及基于Internet的软件分发。 但它也被滥用了很长一段时间，用来伪装和部署恶意软件。
(在后续报告中，我们将讨论使用其他安装程序的攻击活动，以及该组织钓鱼策略的转变。)
## 0x01 初始载荷分析
NSIS一个有趣的功能是其支持插件，允许安装程序与其他组件（包括Windows操作系统组件）通信
([可用插件列表](https://nsis.sourceforge.io/Category:Plugins))。 这些插件本质为Windows
DLL文件。 如果于安装程序构建期间选择某插件，会被自动添加到最终编译完成的`$PLUGINS`文件夹内。
这些插件可以提供的功能包括:
  * [杀掉进程](https://nsis.sourceforge.io/Processes_plug-in)
  * [执行基于命令行的程序](https://nsis.sourceforge.io/NsExec_plug-in)
  * [解压文件](https://nsis.sourceforge.io/ExtractDLLEx_plug-in)
  * [加载DLL及调用其输出函数](https://nsis.sourceforge.io/Docs/System/System.html)
安装程序引起我们注意是因为它们都释放一组相同的`junk file`(这些文件并未被用来安装恶意软件)。过去我们看到过于NSIS安装程序中用`junk
file`以隐藏恶意软件；`junk file`旨在迷惑分析人员，及干扰沙箱分析。这种行为引起了我们的兴趣，于是开始对其进行更为详细的分析。
我们发现所有样本都使用了 **System.dll** 插件，它允许使用者加载某DLL以及调用其输出函数。
恶意安装程序调用该DLL以注入payload到内存中(多数情况下经由 `cmd .exe`)。
为了便于说明，本报告主要分析第一次发现的
[NSIS安装程序](https://www.virustotal.com/gui/file/4722dafde634152e42054038c6ab64563a9dd717edfa2e37f245c76f431cecec/detection)：
NSIS安装包中含压缩内容，其中有可执行程序，由安装包加载到内存中。 这些内容可以通过压缩工具(如7 zip)提取出来。
样本释放文件类型包括:
  * ASCII文本文件
  * C源码(ASCII文本格式)
  * 数据文件
  * 64位ELF
  * GIF
  * JPEG
  * BMP(Windows 3.x 格式，164 _314_ 4)
  * 32位可执行文件(DLL)
  * 32位可执行文件(GUI)
  * POSIX Shell(ASCII文本格式)
  * `.pyc`文件
  * XML 1.0
安装程序将释放`junk file`到`%TEMP%/careers/katalog/_mem_bin/page1/W3SVC2` 目录：
安装包释放到临时目录中的文件中仅有两个与恶意软件有关：
  * aventailes.dll(Loader)
  * Cluck(加密内容)
我们将重点分析这两个文件。
不过我们发现这些安装程序的payload有所不同。
在对发现的样本进行分析的过程中——手动分析以及借助沙盒工具——我们发现了数种不同的RAT及窃密软件，包括Lokibot，Betabot，Formbook与AgentTesla。
但是这些安装程序在执行时都遵循相同的过程。
## 0x02 第一阶段:Loader & Shellcode
在第一阶段，安装程序将部署初始Loader——恶意DLL文件。
然后，DLL文件开始解密payload，并最终将payload注入到内存中(此时NSIS安装包在释放`junk file`)。
下图展示了分析样本如何创建`cmd.exe`进程——注入payload到该进程：
样本创建子进程的内存内容如上所示。 payload位于地址`0x400000`处。
RATicate安装包释放的恶意DLL（本例中是 **aventailes.dll** ）本质是一
Loader，可能由此次活动策划者开发，存储于临时目录中。
分析的所有Loader都是只有一个输出函数的DLL文件，尽管各样本中Loader的名称和输出函数不尽相同。（本例中是Inquilinity)
如前文所述，该输出函数会被NSIS的System插件调用。 输出函数会加载并执行shellcode(位于Loader的`.rdata`区块)。
解密shellcode使用了一个简单的算法，该算法于不同Loader中不尽相同。
然后，由Loader加载的shellcode会读取存有其他Loader及payload的加密文件——Cluck。这些Loader（PE文件）和shellcode会在之后两个阶段中按需解密。第一阶段，由Loader调用的shellcode完成解密工作，解密后内容包含异或运算的密钥(用于解密
**shellcode2** 与 **Loader2** )，shellcode[ **shellcode 2** ]及一PE文件[ **Loader
2** ]。
第一阶段的工作流程如下所示：
第一阶段的工作流程：
  1. 执行NSIS exe。
  2. System.dll插件加载并调用Loader（aventailes.dll）。
  3. Loader的输出函数解密shellcode 1并调用之。
  4. shellcode1读取加载到内存中的Cluck文件。
  5. shellcode1解密shellcode2和Loader2并映射shellcode2，然后调用之。
  6. shellcode2将Loader2映射到内存中。
## 0x03 第二阶段：shellcode 2 & Loader DLL
当Shellcode 2将 Loader 2加载到内存中后，开始第二阶段解密 。Loader 2读取Cluck文件来解密其他内容。
根据包含加密内容的文件名（本例中是Cluck）动态生成异或运算密钥，该密钥用于解密第二阶段的数据。如下图所示，解密完成后，文件的第二部分中存储了另一个异或运算密钥(xor_key
2)，该密钥用于解密其他内容，例如字符串，shellcode和PE文件。
第二阶段工作流程：
  1. Loader 2执行其DllEntryPoint。
  2. Loader 2再次读取Cluck文件。
  3. Loader 2从Cluck中解密未使用的shellcode。
  4. Loader 2从Cluck读取的数据中解密shellcode 3。
  5. Loader 2执行shellcode3，该shellcode3解密最终payload（PE文件）。
## 0x04 第三阶段：Injection
解密工作完成之后，shellcode 3将在一子进程中注入最终payload。其使用了[NtCreateSection +
NtMapViewOfSection 注入技术](https://ired.team/offensive-security/code-injection-process-injection/ntcreatesection-+-ntmapviewofsection-code-injection)。
以下是分析时提取出来的组件：
## 0x05 如何确定其为同一组织所为？
我们共发现了38个NSIS安装包，都具有如下相似的特征：
相同的`junk file`。不仅仅是它们的名字，还有其内容。当NSIS脚本生成安装包时，攻击活动的参与者必须将这些文件统统保存在硬盘上。
相同的Loader：所分析NSIS安装包中所有的Loader都是相同的，不是在HASH值方面，而是在功能方面(具体如下)。