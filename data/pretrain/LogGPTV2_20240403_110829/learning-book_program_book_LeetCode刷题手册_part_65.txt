提示：
●两个列表的长度范围都在[1，1000]内。
·两个列表中的字符串的长度将在[1，30]的范围内。
·下标从0开始，到列表的长度减1。
·两个列表都没有重复的元素。
解题思路
·在Andy和Doris两人分别有各自的餐厅喜欢列表，要求找出两人公共喜欢的一家餐厅，如果共同
喜欢的次数相同，都输出。这一题是简单题，用map统计频次，输出频次最多的餐厅。
代码
package leetcode
func findRestaurant(list1 []string, list2 []string) []string {
m, ans := make(map[string]int, len(listl)), []string{}
for i, r := range listl {
m[r] = 1
for j, r := range list2 {
if _， ok := m[r]; ok {
m[r] += j
if len(ans) == 0 11 m[r] == m[ans[o]] {
ans = append(ans, r)
---
## Page 628
} else if m[r]  nl {
n3 = n2
n2 = n1
nl = V
} else if v > n2 {
zu = εu
n2 = V
} else if v > n3 {
n3 = V
ifv n4*n5{
return nl * n2 * n3
return nl * n4 * n5
632.SmallestRangeCoveringElementsfromKLists
题目
You have k lists of sorted integers in ascending order. Find the smallest range that includes at
least one number from each of the k lists.
We define the range [a,b] is smaller than range [c,d] if b-a = here.
2. 1 =。
●1 。重置代码模板后可以看到这项改动。
解题思路
·给出K个数组，要求在这K个数组中找到一个区间，至少能包含这K个数组中每个数组中的一个
---
## Page 631
元素。
·这一题是第76题的变种版。第76题是用滑动窗口来解答的，它要求在母字符串S中找到最小的
子串能包含T串的所有字母。这一题类似的，可以把母字符串看成K个数组合并起来的大数组，
那么T串是由K个数组中每个数组中抽一个元素出来组成的。求的区间相同，都是能包含T的最
小区间。另外一个区别在于，第76题里面都是字符串，这一题都是数字，在最终拼接成T串的时
候需要保证K个数组中每个都有一个元素，所以理所当然的想到需要维护每个元素所在数组编
号。经过上述的转换，可以把这道题转换成第76题的解法了。
·在具体解题过程中，用map来维护窗口内K个数组出现的频次。时间复杂度O（n*logn），空间复
杂度是O(n）。
代码
package leetcode
import(
"math"
"sort"
func smallestRange(nums [][]int) []int {
numList, left, right, count， freqMap, res, length := []element{}, 0, -1, 0,
map[int]int{}, make([]int, 2), math.MaxInt64
for i, ns := range nums {
for _, v := range ns {
numList = append(numList, element{val: v, index: i})
sort.Sort(SortByval{numList})
for left  c {
high--
}else{
return true
return false
636.ExclusiveTimeofFunctions
题目
On a single threaded CPU, we execute some functions. Each function has a unique id between 0
and N-1 .
We store logs in timestamp order that describe when a function is entered or exitedl.
Each log is a string with this format: "{function_id} : {"start" I"end"}: {timestamp3". For
"1: end: 2" means the function with id 1 ended at the end of timestamp 2 .
A function’s exclusive time is the number of units of time spent in this function. Note that this
does not include any recursive calls to child functions.
Return the exclusive time of each function, sorted by their function id.
Example 1:
---
## Page 634
1 start
1 end
0 start
0 end
0
1
2
3
4
5
6
Input:
n = 2
logs = ["0:start:0","1:start:2","1:end:5","0:end:6"]
output: [3, 4]
Explanation:
Function 0 starts at the beginning of time 0, then it executes 2 units of time
and reaches the end of time 1.
Now function 1 starts at the beginning of time 2, executes 4 units of time and
ends at time 5.
Function 0 is running again at the beginning of time 6, and also ends at the
end of time 6, thus executing for 1 unit of time.
So function 0 spends 2 + 1 = 3 units of total time executing, and function 1
spends 4 units of total time executing.
Note:
1.1  0 {
node := queue[0]
if node.Left != nil {
queue = append(queue, node.Left)
nextLevelNum++
if node.Right != nil {
queue = append(queue, node.Right)
nextLevelNum++
curNum=-
sum += node.Va1
queue = queue[1:]
if curNum == 0{
res = append(res,f
float64(sum)/f1oat64(count))
curNum, count, nextLevelNum, sum = nextLevelNum, nextLevelNum, 0, 0
return res
638.ShoppingOffers
题目
In LeetCode Store, there are some kinds of items to sell. Each item has a price.
However, there are some special offers, and a special offer consists of one or more dlifferent 
kinds of items with a sale price.
You are given the each item’s price, a set of special offers, and the number we need to buy for
se san uieao fgexa jog ed o aey no aod isamol au andsno o sl qof au wal upea
given, where you could make optimal use of the special offers.
---
## Page 638
Each special offer is represented in the form of an array, the last number represents the price