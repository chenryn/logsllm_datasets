title:SRR: An O(1) time complexity packet scheduler for flows in multi-service
packet networks
author:Chuanxiong Guo
SRR: An O(1) Time Complexity Packet Scheduler for Flows 
in Multi-Service Packet Networks  
Guo Chuanxiong 
Inst. of Comm. Eng. 
P.O.Box 110, 2 Biaoying, Yudao st.  
Nanjing, 210016, China  
PI:EMAIL 
ABSTRACT 
In this paper, we present a novel fair queueing scheme, which we 
call  Smoothed  Round  Robin  (SRR).  Ordinary  round  robin 
schedulers are well known  for  their  burstiness  in  the  scheduling 
output. In order to overcome this problem, SRR codes the weights 
of  the  flows  into  binary  vectors  to  form  a  Weight  Matrix,  then 
uses  a  Weight  Spread  Sequence  (WSS),  which  is  specially 
designed to distribute the output more evenly, to schedule packets 
by scanning the Weight Matrix. By using the WSS and the Weight 
Matrix,  SRR  can  emulate  the  Generalized  Processor  Sharing 
(GPS)  well.  It  possesses  better  short-term  fairness  and  schedule 
delay  properties 
in  comparison  with  various  round  robin 
schedulers.  At  the  same  time,  it  preserves  O(1)  time  complexity 
by avoiding the time-stamp maintenance employed in various Fair 
Queueing schedulers. Simulation and implementation experiments 
show  that  SRR  can  provide  good  average  end-to-end  delay  for 
soft  real-time  services.  SRR  can  also  be  implemented  in  high-
speed  networks  to  provide  QoS  for  its  simplicity  and  low  time 
complexity.  
Keywords 
QoS, packet scheduler, fair queueing, time complexity, end-to-end 
delay, high-speed networks. 
1.  INTRODUCTION 
With  the  expanding  of  the  Internet,  more  and  more  services 
besides  the  traditional  Best  Effort  services  are  added  into  the 
network.  Video  and  audio  conferencing,  remote  medical  caring 
are some of the examples. It is expected that more services to be 
introduced  in  the  near  future.  Different  types  of  services  have 
different 
different 
requirements. For example, video conferencing is a kind of VBR 
service  that  requires  broad  bandwidth  and  low  end-to-end  delay 
bound,  while  traditional  data  services  do  not  have  explicit  QoS 
the  rapid  increasing  rate  of  the 
requirements.  Even  with 
characteristics, 
and 
generally 
have 
This  work  was  supported  by  the  863  project  of  China  under  contract 
number      863-300-02-04-99 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies bear this notice and the full citation on the first page. To copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
SIGCOMM’01, August 27-31, 2001, San Diego, California, USA. 
Copyright 2001 ACM 1-58113-411-8/01/0008…$5.00. 
transmission medium, certain kind of isolation is needed to satisfy 
the QoS requirements of the competing flows (as defined in [29] , 
a flow is a stream of packets that traverse the same route from the 
source  to  the  destination,  and  that  require  the  same  grade  of 
transmission  service.  Flows  can  be  further  aggregated  into 
classes).  Many  mechanisms  on  how  to  provide  QoS  support  for 
packet networks have been proposed in [3], [8], [13], [19], [29], 
[30].  One  of  the  most  important  parts  of  these  mechanisms  is  a 
packet  scheduler.  A  packet  scheduler’s  task  is  to  decide  which 
packet to be transmitted when the output link is idle. Traditional 
routers use First Come First Serve (FCFS) scheduler to schedule 
packets. FCFS does not distinguish different flows. Thus, it does 
not provide any kind of isolation among them. We only consider 
schedulers that distinguish different flows or classes in this paper. 
Generally, packet scheduler should have the following properties: 
1. low time complexity to choose and forward a packet; 
2. treats different flows fairly; 
3. provides low worst case delay and delay variation; 
4. it should be simple enough to be implemented efficiently. 
The simplicity and time complexity properties always collide with 
the  fairness  and  delay  bound  properties.  Schedulers  with  short-
term  fairness  and  strict  delay  bound  generally  have  high  time 
complexity and are hard to be implemented. O(1) time complexity 
schemes  are  easy  to  be  implemented,  but  they  generally  fail  to 
provide short-term fairness and low local delay bound. 
In  time-stamp  based  schedulers  (one  of  the  two  kinds  of  well 
studied  work-conserving  scheduling  algorithms),  a  virtual  time 
clock  is  maintained  to  emulate  the  ideal  Generalized  Processor 
Sharing  (GPS  [19]).  Traditional  Weighted  Fair  Queuing  (WFQ) 
[11](PGPS [19]) has low local delay bound and good fairness, but 
its time complexity is O(N) (N is the number of the active flows). 
Variants  of  WFQ  such  as  Virtual-Clock  [29],  WF2Q  [1],  Start-
time FQ [16], FFQ, SPFQ [25], Time-shift  FQ  [9]  use  different 
methods  to  calculate  the  time-stamp,  but  still  have  at  least 
O(logN)  time  complexity.  Since  the  best  known  algorithm  to 
insert a number into a sorted array needs O(logN), it is unlikely 
that a time-stamp based scheduler with O(1) time complexity can 
be found. However, an O(logN) scheduler is not good enough for 
a  high-speed  link.  For  example,  it  takes  approximate  0.08us  to 
transmit a 100 bytes length packet for a 10Gbps link. That means 
an  O(logN)  scheduler  must  finish  the  packet  selection  in  0.08us 
regardless  of  the  number  of  flows.  The  situation  becomes  even 
worse when the capacity of the output link is  40Gbps or higher. 
On the  other  hand,  another  kind  of  work-conserving  schedulers, 
the round robin schemes are simple to be implemented and have 
O(1)  time  complexity,  but  they  are  well  known  for  their  output 
burstiness and short-term unfairness. Deficit Round Robin (DRR) 
[23] and Carry-Over Round Robin (CORR) [22] are typical round 
robin  schedulers.  In  these  kinds  of  round  robin  schedulers,  the 
schedulers  will  serve  a  flow  for  a  continuous  period  of  time  in 
proportion  to  the  weight  of  the  flow,  resulting  in  a  highly  burst 
scheduling output for each flow. Thus, these kinds of round robin 
schedulers are considered  not  suitable  to  provide  QoS  in  packet 
networks. 
In  this  paper,  we  present  a  Smoothed  Round  Robin  (SRR) 
scheduler  to  overcome  the  shortcomings  of  the  ordinary  round 
robin  schedulers.  SRR  has  short-term  fairness  and  certain 
schedule delay bound, as well as O(1) time complexity. A Weight 
Spread Sequence (WSS) and a Weight Matrix are used as two key 
data  structures  of  the  scheduler.  The  weights  of  the  flows  are 
coded into binary vectors to form a Weight Matrix, then SRR uses 
the  corresponding  WSS  to  scan  the  Weight  Matrix.  WSS  is  a 
specially designed sequence that can distribute the output  traffic 
of each flow evenly. Thus, SRR can emulate GPS as the various 
time-stamp  based  schedulers  do.  Since  it  does  not  need  to 
maintain  any  tags  or  states,  SRR  can  achieve  O(1)  time 
complexity,  short-term  fairness,  and  certain  delay  bound  at  the 
same time.  
In  the  following  paragraphs,  an  example  is  illustrated  to  show 
how SRR works. The concepts of WSS, Weight Matrix are used 
without  definitions.  The  formal  definitions  will  be  given  in 
Section 2. 
Suppose  there  are  four  flows  with  fixed  packet  size,  named 
,
, 
1f
3 =
.  The  packet  sizes  of  the  flows  are 
r
512 bytes; all the four flows are backlogged. And the bandwidth 
. The corresponding weights 
of the output link 
3 =w
of  the  flows  are 
.  By  coding 
, 
}1,0,0,0{
the  weights  into  binary  vectors,  we  have 
, 
4 =WV
2 =WV
for  the 
four  flows  respectively.  According  to  the  binary  vectors,  the 
Weight Matrix corresponding to flow 
4 =w
3
1 =WV
}1,1,0,0{
,  with  rates 
192
Mbps
1
=w
, 
2
,
3f
, 
kbps
220 =
1
,
=
C
1 =w
}0,0,0,1{
3 =WV
,
4f
4 =
r
}0,0,1,0{
2f
512
kbps
2 =
r
kbps
1 =
r
64
kbps
4
, 
256
8
, 
, 
WM
=
WV
1
WV
2
WV
3
WV
4
=
1f ,
2f ,
3f ,
1000
0010
0001
1100
4f  is, 
.
We  number  the  columns  of  this  WM  from  left  to  right  as 
column
3
column
2
column
0
column
1
and
. 
,
,
The corresponding WSS (which will be defined in Section 2.1) to 
this Weight Matrix is,  
1,2,1,3,1,2,1,4,1,2,1,3,1,2,1. 
column −4
SRR then scans the WSS term by term, when the value of the term 
is i ,  the 
,  the  scheduler 
will scan the terms from top to bottom, when the term is not 0, the 
scheduler  will  serve  the  corresponding  flow.  That  is,  the  flows 
will be served in the following service sequence, 
column −4
 is  chosen.  In 
i
i
8
7
6
5
4
3
2
1
0
8
7
6
5
4
3
2
1
0
8
7
6
5
4
3
2
1
0
s
t
e
k
c
a
p
s
t
e
k
c
a
p
s
t
e
k
c
a
p
WFQ
 f1
 f2
 f3
 f4
f3
f2
f4
f1
0
2
4
6
8
10
12
14
16
time(unit:4ms)
SRR
 f1
 f2
 f3
 f4
f3
f2
f4
f1
0
2
4
6
8
10
12
14
16
time(unit:4ms)
DRR
 f1
 f2
 f3
 f4
f3
f2
f4
f1
0
2
4
6
8
10
12
14
16
time(unit:4ms)
Figure 1. Service curves of the three schedulers 
2
3
4
3
2
3
4
3
3
2
3
4
3
2
3
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
.
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
1
2f ,
f
The  service  curves  of  the  flows  in  SRR  are  shown  in  Figure  1 
together with that in WFQ and DRR. From the above example, we 
can  observe  that  SRR  emulates  the  GPS  quite  well.  Both  WFQ 
and SRR perform much better than DRR in that they have much 
better  delay  bound  and  short-term  fairness.  It  is  also  easy  to 
4f  in DRR are very bursty. 
observe that the outputs of 
In Section 2, the definition of a set of Weight Spread Sequences 
(WSS) and their properties are presented first, then the definition 
of the Weight Matrix is given. In Section 3, the formal description 
of  SRR  is  described.  The  fairness,  schedule  delay  bound, 
scalability,  space  and  time  complexity  of  SRR  are  analyzed  in 
Section  4.  In  section  5,  simulation  experiments  are  designed  to 
compare the end-to-end delay property of SRR with that of WFQ 
and  DRR,  simulation  experiments  show  that  SRR  can  provide 
good average end-to-end delay for soft real-time services such as 
IP telephony. This paper concludes with Section 6. 
3f ,
2.  THE WEIGHT SPREAD SEQUENCE 
AND THE WEIGHT MATRIX 
2.1  The Weight Spread Sequence 
Definition  1:    A  set  of  Weight  Spread  Sequences  (WSS)  is 
defined recursively as, 
1 =S
1) The first WSS 
1
, 
=
=
−
1
k
k
k
i
S
S
is, 
for 
Sk
,
a
}{
i
≤≤
2) 
1
The 
k
2
kth  WSS 
−
1>k
1
,
                                             (1) 
kK . 
},
2 −ka
len  
The  set  corresponding  to  sequence 
k
is defined as the total number of terms of the kth WSS. The terms 
of the kth WSS can be arranged in a circle so that term 
 is 
,3,2,1{
kS is 
1
−
1
.
1a . 
next to term 
The distance between two terms  ma and 
be,  
na of 
kS  is defined to 
min[(
−
mn
)
2mod(
k
−
(),1
−
nm
)
2mod(
k
−
)].1
na (m>n) are called two adjacent occurrences of 
k
)
 if,  
, and,  
a
1) 
Two terms  ma , 
)
(
,
n
−
1
nmif
nmif
+>−
n
+<−
n
(
(
k
k
2
2
−−
)1
−−
)1
m
m
;
.
               (2) 
i
≤<
k
x
k
,  and 
.  The  proof  of  Proposition  3  is 
i
where 
given in the Appendix A. 
The following proposition is obvious in view of Proposition 3. 
Proposition 4: The distance between two adjacent occurrences of 
element 
kS is either 
i2  or 
2 −i
<≤
 in 
1
. 
i
1(
k
)
i
. 
1
2 −k
kS ,  the 
Since  there  is  only  one  occurrence  of  element  k  in 
distance of element k is defined to be 
2.2  The Weight Matrix 
In  various  Fair  Queueing  Schedulers,  each  flow  is  assigned  a 
weight in proportion to its reserved rate. In this paper, we assume 
that the set of weights is 
. By adjusting the 
value  of  kk,  rate  allocation  schemes  with  different  range  can  be 
accommodated. For example, for k=16, if the granularity of rate is 
1bps, then the set of rates corresponding to the set of weights is 
1{
.  For  k=32,  the  set  of  rates  is 
1{
5,4,3,2,1{
bps
bps
kbps
}
3,
64,
,
L
bps
bps
Gbps
3,
,
4,
}
. 
L
flow  can be coded as, 
The weight of 