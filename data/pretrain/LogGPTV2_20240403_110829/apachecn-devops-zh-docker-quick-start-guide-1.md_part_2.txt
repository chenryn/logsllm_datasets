```
# validate the install and functionality docker --version
sudo docker run hello-world
```
虽然这种方法看起来更简单，更容易执行，但它不太理想，因为它更多的是一个手动过程，尤其是在需要更新 Docker CE 版本的时候。你必须再次浏览到下载页面，找到更高的版本，下载它，然后做`yum install`。使用前面描述的 Docker Repository 方法，升级就像发出`yum upgrade`命令一样简单。现在让我们再看一个在您的 CentOS 工作站上安装 Docker CE 的方法。
# 通过运行便利脚本安装 Docker CE
安装 Docker 的第三种方法是使用 Docker 提供的便利脚本。这些脚本允许您安装 Docker 的最新边缘版本或最新测试版本。不建议在生产环境中使用这两种方法，但它们确实有助于测试和开发最新的 Docker 版本。这些脚本有些局限性，因为它们不允许您在安装过程中自定义任何选项。相同的脚本可以在各种 Linux 发行版中使用，因为它们决定了您正在运行的基础发行版，然后根据这个决定进行安装。过程很简单。
使用`curl`下拉想要的脚本，然后使用 sudo 运行脚本。
运行最新边缘版本的命令如下:
```
# download and run the install script curl -fsSL get.docker.com -o get-docker.sh
sudo sh get-docker.sh
```
执行脚本将产生如下输出:
![](img/a09ba16c-6262-4ae3-b391-a43c0c768ff5.png)
脚本已经为您创建了 docker 组，但是由于 CentOS 是以 RPM 为中心的，您仍然需要自己启动 Docker 服务:
```
# start docker sudo systemctl start docker
```
If this were a Debian-based system, the Docker service would have been started automatically by the script.
现在，我们已经研究了在您的 CentOS 工作站上安装 Docker 的三种方法，现在是讨论安装后设置中建议的一些附加步骤的好时机。
# 您可能需要考虑的安装后步骤
所有三种安装方法都会自动为您创建一个 docker 组，但是如果您希望能够在不使用`root`或 sudo 的情况下运行 docker 命令，那么您将希望将您的用户添加到 Docker 组中。
Be aware that many Docker commands require full admin access to execute, so adding a user to the docker group is comparable to granting them root access, and the security implications should be considered. If the user already has root access on their workstation, adding them to the docker group is only providing them a convenience.
使用以下命令可以轻松地将当前用户添加到 docker 组:
```
# add the current user to the docker group sudo usermod -aG docker $USER
```
您将需要注销并重新登录来更新您帐户上的组成员身份，但是一旦您这样做了，您应该都设置为执行任何 Docker 命令而不使用 sudo。
这可以通过在没有 sudo 的情况下运行 hello-world 容器来验证:
```
# test that sudo is not needed docker run hello-world
```
接下来，您需要配置您的系统，使 Docker 服务在系统引导时启动:
```
# configure docker to start on boot sudo systemctl enable docker
```
您应该考虑的另一个安装后步骤是安装 docker-compose。
这个工具可以成为你的 Docker 工具带的重要补充，我们将在[第 7 章](7.html)*Docker Stacks*中讨论它的使用。安装 docker-compose 的命令是:
```
# install docker compose
sudo curl -L \
 https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) \
 -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
```
恭喜，您的 CentOS 工作站现在可以开始开发您的 Docker 映像和部署您的 Docker 容器了。接下来，我们将学习如何使用 Ubuntu 工作站将 Docker 安装到基于 DEB 的系统上。如果你准备好了，继续读下去。
# 在 Ubuntu 工作站上安装 Docker
正如我们在 CentOS 工作站上所做的那样，我们将在我们的 Ubuntu 工作站上安装 Docker CE。在 Ubuntu 上安装 Docker CE 的要求是必须运行 64 位的最新 LTS 版本，比如仿生、Xenial 或 Trusty。你可以在 Ubuntu 的巧妙版本上安装 Docker CE 的边缘版本。
在 Ubuntu 上安装 Docker CE 有三种方法:
*   通过 Docker 存储库
*   下载并手动安装 DEB 包
*   运行便利脚本
最常用的方法是通过 Docker 存储库，所以让我们从这里开始。
# 通过 docker repository 安装 docker ce
我们需要先设置 Docker 存储库，然后才能进行安装，所以现在让我们来处理 repo。
第一步是更新 apt 包索引。使用以下命令来完成此操作:
```
# update apt-get libraries sudo apt-get update
```
现在我们需要安装一些支持包:
```
# install required packages sudo apt-get install \
 apt-transport-https \
 ca-certificates \
 curl \
 software-properties-common
```
接下来，我们需要为 Docker 获取 GPG 密钥:
```
# get the GPG key for docker curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
   sudo apt-key add -
```
您可以确认已成功添加 Docker 的 GPG 密钥；它会有`9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88`的指纹。
您可以通过检查最后八个字符是否与该命令的`0EBFCD88`匹配来验证密钥:
```
# validating the docker GPG key is installed sudo apt-key fingerprint 0EBFCD88
```
最后，我们需要实际设置存储库。在我们的示例中，我们将重点关注稳定回购。
如果要安装 Docker CE 的 edge 或测试版，请务必在`stable`一词后添加`edge`或`test`(不要替换以下命令中的`stable`一词):
```
# adding the docker repository sudo add-apt-repository \
 "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
 $(lsb_release -cs) \
 stable"
```
现在我们的系统已经为安装 Docker CE 建立了正确的存储库，让我们安装它。
首先，通过发出`apt-get update`命令，确保所有包都是最新的:
```
# update apt-get libraries again sudo apt-get update
```
现在我们将实际安装 Docker CE:
```
# install docker sudo apt-get install docker-ce
```
安装了 Docker。您可以在安装后检查 Docker 版本，以确认安装成功:
```
# validate install with version command docker --version
```
version 命令应该如下所示:
![](img/51eddd17-1070-4a6e-891c-16df43cb1920.png)
现在，让我们验证 Docker 安装是否按预期工作。为此，我们将使用以下命令运行 hello-world Docker 映像:
```
# validating functionality by running a container
sudo docker run hello-world
```
![](img/4abbab91-b0ea-4fc9-bf7c-6928739f5e36.png)