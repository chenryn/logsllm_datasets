below.
Sorts
σ
Terms
t
I-Predicates
I
U-Predicates P
I-Atoms
i
U-Atoms
p, q
Constraints
c
Formulas
r, s
::= principal | time | ﬁle | perm | . . .
::= a | v | h(t1, . . . , tn)
(Interpreted Predicates)
(Uninterpreted Predicates)
::= I(t1, . . . , tn)
::= P (t1, . . . , tn)
::= u1 ≤ u2 | k1 (cid:23) k2 | . . .
::= p | i | c | r ∧ s | r ∨ s | r ⊃ s | (cid:62) | ⊥ | ∀x:σ.s | ∃x:σ.s |
k says s | s @ [u1, u2]
1BL stands for “Binder Logic”, as a tribute to the trust management framework Binder [14] from
which the logic draws inspiration.
6
As in ﬁrst-order logic, subjects of predicates are called terms. They represent princi-
pals, ﬁles, time points, etc. Abstractly, terms can be either ground constants a, bound
variables v, or applications of uninterpreted function symbols h to ground terms. Terms
are classiﬁed into sorts σ (sometimes called types). We stipulate at least four sorts:
principal, whose elements are denoted by the letter k, time whose elements are denoted
by the letter u, ﬁle whose elements are denoted by the letter f, and perm (for permission)
whose elements are denoted by the letter η. Elements of time are called time points,
and it is assumed that ground time points are integers. In the external syntax of the
logic, we allow clock times written to second level accuracy as yyyy:mm:dd:hh:mm:ss,
but internally they are represented as integers that measure seconds elapsed from a ﬁxed
clock time.
The symbol Σ denotes a partial map v1:σ1, . . . , vn:σn from term variables to sorts.
The judgment Σ (cid:96) t : σ means that under the assignment of sorts Σ, term t is well
formed with sort σ. (We assume that the sorts of all function symbols and constants
are speciﬁed separately, but elide the details.)
Predicates in BL are divided into two categories: uninterpreted predicates, denoted
P , which are deﬁned using logical rules, and interpreted predicates, denoted I, which
capture properties of the environment. By environment we mean the state of the ﬁle
system, including, but not limited to, meta data contained in ﬁles. The environment
is reﬂected in the logic as a set E of interpreted predicates that hold in it. We write
E |= i to mean that in the environment E, the interpreted atomic formula i holds (i.e.,
i ∈ E). In practice, we require a procedure to decide whether each interpreted predicate
I holds for some terms in the prevailing state of the ﬁle system or not. We assume that
the state is volatile, i.e., it may change unpredictably. We believe that the inclusion
and enforcement of such interpreted predicates is novel, at least in the context of access
control.
Finally, we assume a syntactic class of constraints, denoted c. Like interpreted
predicates, constraints are also relations between terms whose satisfaction is determined
by decision procedures external to the logic. However, unlike interpreted predicates,
constraints are independent of the state of the system. We stipulate at least two types
of constraints: u1 ≤ u2 capturing the usual total order on time points, and a pre-order
k1 (cid:23) k2, read principal k1 is stronger than principal k2. If k1 (cid:23) k2, then BL’s inference
rules force (k1 says s) ⊃ (k2 says s) for every formula s. We also assume that there is a
strongest principal (cid:96), i.e., |= (cid:96) (cid:23) k for every k. In particular ((cid:96) says s) ⊃ (k says s) for
every k and s. For this reason (cid:96) is called the “local authority”, a principal whom everyone
believes. (The term local authority is borrowed from the language SecPAL [3, 10].) A set
of constraints is written Ψ. The decision procedure for checking constraints is reﬂected
in the logic as the judgment Ψ |= c, which means that if all constraints in Ψ hold, then
so does c.
3.1 Proof System
Next, we present a proof system for BL in the natural deduction style of Gentzen [19].
Our approach is based on the judgmental method [12, 29], where a syntactic category
of judgments (distinct from formulas) is the subject of proofs and deductions. Using
the judgmental method makes the meta-theory of the logic much easier. Our technical
presentation closely follows prior work by DeYoung et al. done in the context of a
7
related logic [16]. As in that work, we introduce two judgments: s ◦ [u1, u2] meaning
that formula s is provably true in the interval [u1, u2], and k claims s ◦ [u1, u2] meaning
that principal k states that s holds from u1 to u2. The symbol ◦ is read “during”. The
judgment s ◦ [u1, u2] is internalized in the logic as the formula s @ [u1, u2], whereas
k claims s ◦ [u1, u2] is internalized as (k says s) @ [u1, u2].
::= s ◦ [u1, u2] | k claims s ◦ [u1, u2]
J
Σ ::= v1:σ1 . . . vn:σn
Judgments
Sort Map
Hypothetical Constraints Ψ ::= c1 . . . cn
Abstract Environment
Views
Hypotheses
Hypothetical Judgments
E
α ::= k, ub, ue
Γ ::= x1 : J1 . . . xn : Jn
Σ; Ψ; E; Γ α−→ s ◦ [u1, u2]
(n ≥ 0)
Hypothetical judgments (which are established through proofs) have the form Σ; Ψ; E; Γ α−→
s ◦ [u1, u2]. Γ is the set of assumed judgments (hypotheses or policy), and Σ, Ψ, and E
have meanings described earlier. x1, . . . , xn are distinct names that refer to the assump-
tions in Γ. A novel feature here is the triple α = k, ub, ue on the entailment arrow, which
we call the view of the sequent. The view represents the principal and interval of time
relative to which reasoning is being performed. It aﬀects provability in the following
manner: while reasoning in view k, ub, ue, an assumption of the form k(cid:48) claims s ◦ [u(cid:48)
1, u(cid:48)
2]
entails s ◦ [u(cid:48)
2. This entailment does not hold in
general. Views are explained in greater detail in Appendix A.
term, denoted M. We write
M :: Σ; Ψ; E; Γ α−→ s ◦ [u1, u2] to mean that M is a proof term that represents a
proof of the hypothetical judgment that follows it. For each deduction rule in our proof
system, there is a unique constructor for proof terms. Consequently, an entire proof can
be reconstructed from its proof term and the hypotheses.
is represented compactly as proof
1 ≤ ub, and ue ≤ u(cid:48)
2] if k(cid:48) (cid:23) k, u(cid:48)
A proof
1, u(cid:48)
1, u(cid:48)
1, u(cid:48)
1, u(cid:48)
1 ≤ u1 and u2 ≤ u(cid:48)
2]. This makes intuitive sense:
2] entails s ◦ [u1, u2] if u(cid:48)
Figure 2 shows selected rules of the proof system. The remaining rules are shown in
Appendix A. As usual, we have introduction and elimination rules for each connective
(marked I and E respectively). For a syntactic entity R, R[t/x] denotes the capture
avoiding substitution of term t for variable x in R. The rule (hyp) states that the
assumption s ◦ [u(cid:48)
2, i.e., the interval
[u1, u2] is a subset of the interval [u(cid:48)
if a formula
s holds throughout an interval, it must hold on every subinterval as well. The proof
term corresponding to this (trivial) derivation is x, where x is also the name for the
assumption s ◦ [u(cid:48)
2]. The rule (claims) is similar, except that it allows us to conclude
s ◦ [u1, u2] from the assumption k(cid:48) claims s ◦ [u(cid:48)
In this case, it must also be
shown, among other things, that k(cid:48) is stronger than the principal k in the view (premise
|= k(cid:48) (cid:23) k).
(saysI) is the only rule which changes the view. The notation Γ| in this rule denotes
the subset of Γ that contains exactly the claims of principals, i.e., the set {(x : k(cid:48) claims
2]) ∈ Γ}. The rule means that (k says s) ◦ [u1, u2] holds in any view α if
s(cid:48) ◦ [u(cid:48)
s ◦ [u1, u2] holds in the view k, u1, u2 using only claims of principals. Assumptions of
the form s(cid:48) ◦ [u(cid:48)
2] are eliminated from Γ in the premise because they may have been
added in the view α (using other rules not shown here), but may not hold in the view
k, u1, u2.
1, u(cid:48)
2].
1, u(cid:48)
1, u(cid:48)
8
Σ; Ψ; E; Γ α−→ s ◦ [u1, u2]
Ψ |= u(cid:48)
1 ≤ u1
x :: Σ; Ψ; E; Γ, x : s ◦ [u(cid:48)
Ψ |= u2 ≤ u(cid:48)
1, u(cid:48)
2] α−→ s ◦ [u1, u2]
2
hyp
Ψ |= u(cid:48)
1 ≤ u1
Ψ |= u2 ≤ u(cid:48)
α = k, ub, ue
1 ≤ ub
Ψ |= u(cid:48)
x :: Σ; Ψ; E; Γ, x : k(cid:48) claims s ◦ [u(cid:48)
2
Ψ |= ue ≤ u(cid:48)
2] α−→ s ◦ [u1, u2]
2
1, u(cid:48)
Ψ |= k(cid:48) (cid:23) k
claims
M :: Σ; Ψ; E; Γ| k,u1,u2
−−−−−→ s ◦ [u1, u2]
(pf saysI M) :: Σ; Ψ; E; Γ α−→ (k says s) ◦ [u1, u2]
saysI
M2 :: Σ; Ψ; E; Γ α−→ s1 ◦ [u(cid:48)
M1 :: Σ; Ψ; E; Γ α−→ s1 ⊃ s2 ◦ [u1, u2]
1
1 u(cid:48)
1 ≤ u(cid:48)(cid:48)
1, u(cid:48)
2]
(pf impE M1 M2 u(cid:48)
Ψ |= u(cid:48)(cid:48)
Ψ |= u1 ≤ u(cid:48)
2) :: Σ; Ψ; E; Γ α−→ s2 ◦ [u(cid:48)(cid:48)
1 , u(cid:48)(cid:48)
2]
M :: Σ; Ψ; E; Γ α−→ ∀v:σ.s ◦ [u1, u2]
Σ (cid:96) t : σ
(pf forallE M t) :: Σ; Ψ; E; Γ α−→ s[t/v] ◦ [u1, u2]
Ψ |= c
∀E
E |= i
2 ≤ u(cid:48)
2 ≤ u2
⊃E
(pf sinjI) :: Σ; Ψ; E; Γ α−→ i ◦ [u1, u2]
interI
(pf cinjI) :: Σ; Ψ; E; Γ α−→ c ◦ [u1, u2]
consI
Figure 2: BL: Natural Deduction (Selected rules)
(⊃E) is a variant of the common rule of modus ponens. It means that if s1 ⊃ s2
holds during an interval [u1, u2], and s1 holds during a subinterval [u(cid:48)
2], then s2 must
2], which is contained in both. (∀E) states that if ∀x:σ.s
hold during any interval [u(cid:48)(cid:48)
holds during some interval [u1, u2], then s[t/x] holds during the same interval for any
term t.
The rule (interI) is used to establish interpreted predicates. It states that an inter-
preted atomic formula i is provable if E |= i. The rule (consI) is similar but it is used
to establish constraints.
1, u(cid:48)(cid:48)
1, u(cid:48)
Meta-theory. A meta-theorem is a theorem about the proof system in general. Meta-
theorems not only increase conﬁdence in the foundations of the logic, but also help in
constructing automatic proof search tools. We state below two important meta-theorems
about BL’s proof system: substitution and subsumption. Structural theorems such as
weakening for the hypotheses also hold, but we do not state them explicitly. M[M(cid:48)/x]
denotes the capture-avoiding substitution of proof term M(cid:48) for the name x in the proof
term M.
Theorem 3.1 (Substitution). Suppose the following hold:
1. M(cid:48) :: Σ; Ψ; E; Γ α−→ s ◦ [u1, u2]
2. M :: Σ; Ψ; E; Γ, x : s ◦ [u1, u2] α−→ r ◦ [u(cid:48)
1, u(cid:48)
2]
9
Then, (M[M(cid:48)/x]) :: Σ; Ψ; E; Γ α−→ r ◦ [u(cid:48)
Proof. See Appendix A.
1, u(cid:48)
2]
Theorem 3.2 (Subsumption). Suppose the following hold:
1. M :: Σ; Ψ; E; Γ α−→ s ◦ [u1, u2]
2. Ψ |= u1 ≤ un and Ψ |= um ≤ u2
Then, M :: Σ; Ψ; E; Γ α−→ s ◦ [un, um]
Proof. See Appendix A.
3.2 Connection to Enforcement
Representation of ﬁles and principals. The logic BL does not mandate how ﬁles
and users are concretely represented. However, from the perspective of an implemen-
tation, making this choice is important. In PCFS, ﬁles and directories are represented
by their full pathnames, relative to the path where PCFS is mounted. Thus, if PCFS
is mounted at /path/to/mountpoint, then the ﬁle /foo/bar in any formula refers to
the ﬁle /path/to/mountpoint/foo/bar in the ﬁle system. Principals are represented
in one of two ways: either as symbolic constants, or by their Linux user ids. The for-
mer representation is used for principals that do not correspond to any real users (e.g.,
organizational roles), while the latter is used for principals that do (e.g., users that run
programs and access ﬁles). Permissions are given on a per-ﬁle (or per-directory) basis
to real users.