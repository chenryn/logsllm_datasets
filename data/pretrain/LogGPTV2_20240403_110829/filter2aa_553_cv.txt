exit()函数结束程序，其原型在
stdlib.h中。EXIT_FAILURE的值也被定义在stdlib.h中。标准提供了两个返回
值以保证在所有操作系统中都能正常工作：EXIT_SUCCESS（或者，相当于
0）表示普通的程序结束， EXIT_FAILURE 表示程序异常中止。一些操作系
统（包括 UNIX、Linux 和 Windows）还接受一些表示其他运行错误的整数
值。
程序清单12.14 dyn_arr.c程序
/* dyn_arr.c -- 动态分配数组 */
#include 
#include  /* 为 malloc()、free()提供原型 */
int main(void)
{
912
double * ptd;
int max;
int number;
int i = 0;
puts("What is the maximum number of type double entries?");
if (scanf("%d", &max) != 1)
{
puts("Number not correctly entered -- bye.");
exit(EXIT_FAILURE);
}
ptd = (double *) malloc(max * sizeof(double));
if (ptd == NULL)
{
puts("Memory allocation failed. Goodbye.");
exit(EXIT_FAILURE);
}
/* ptd 现在指向有max个元素的数组 */
puts("Enter the values (q to quit):");
while (i 
#include 
#include 
int static_store = 30;
const char * pcg = "String Literal";
int main()
{
int auto_store = 40;
char auto_string [] = "Auto char Array";
int * pi;
char * pcl;
pi = (int *) malloc(sizeof(int));
921
*pi = 35;
pcl = (char *) malloc(strlen("Dynamic String") + 1);
strcpy(pcl, "Dynamic String");
printf("static_store: %d at %p\n", static_store, &static_store);
printf("  auto_store: %d at %p\n", auto_store, &auto_store);
printf("    *pi: %d at %p\n", *pi, pi);
printf("  %s at %p\n", pcg, pcg);
printf(" %s at %p\n", auto_string, auto_string);
printf("  %s at %p\n", pcl, pcl);
printf("  %s at %p\n", "Quoted String", "Quoted String");
free(pi);
free(pcl);
return 0;
}
在我们的系统中，该程序的输入如下：
static_store: 30 at 00378000
auto_store: 40 at 0049FB8C
*pi: 35 at 008E9BA0
String Literal at 00375858
922
Auto char Array at 0049FB74
Dynamic String at 008E9BD0
Quoted String at 00375908
如上所示，静态数据（包括字符串字面量）占用一个区域，自动数据占
用另一个区域，动态分配的数据占用第3个区域（通常被称为内存堆或自由
内存）。
923
12.5 ANSI C类型限定符
我们通常用类型和存储类别来描述一个变量。C90 还新增了两个属性：
恒常性（constancy）和易变性（volatility）。这两个属性可以分别用关键字
const 和 volatile 来声明，以这两个关键字创建的类型是限定类型（qualified
type）。C99标准新增了第3个限定符：restrict，用于提高编译器优化。C11
标准新增了第4个限定符：_Atomic。C11提供一个可选库，由stdatomic.h管
理，以支持并发程序设计，而且_Atomic是可选支持项。
C99 
为类型限定符增加了一个新属性：它们现在是幂等的
（idempotent）！这个属性听起来很强大，其实意思是可以在一条声明中多