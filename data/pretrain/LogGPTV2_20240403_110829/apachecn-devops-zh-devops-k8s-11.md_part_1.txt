# 十一、下一步是什么
到目前为止，我们已经全面讨论了围绕在 Kubernetes 上执行 DevOps 任务的主题。然而，在现实环境中实现知识总是具有挑战性的，因此你可能想知道 Kubernetes 是否能够解决你当前面临的特定问题。在本章中，我们将学习以下主题来应对挑战:
*   高级 Kubernetes 功能
*   Kubernetes 社区
*   其他容器编排器框架
# 探索 Kubernetes 的可能性
Kubernetes 每天都在发展，并且以每季度发布一个主要版本的速度发展。除了每一个新的 Kubernetes 发行版附带的内置功能之外，社区的贡献也在生态系统中扮演着重要的角色，我们将在本节中围绕它们进行一次参观。
# 掌握忽必烈
Kubernetes 的对象和资源分为三个 API 轨道，即 alpha、beta 和 stable，以表示它们的成熟度。每个资源头上的`apiVersion`字段表示它们的级别。如果一个特性有版本控制，比如 v1alpha1，它就属于 alpha 级别的 API，beta API 也是这样命名的。默认情况下，阿尔法级应用编程接口是禁用的，如有更改，恕不另行通知。
默认情况下启用测试级应用编程接口；它经过了良好的测试，被认为是稳定的，但是模式或对象语义也可以改变。其余部分是稳定的，通常可用的。一旦一个 API 进入稳定阶段，就不太可能再被更改了。
即使我们已经广泛地讨论了关于 Kubernetes 的概念和实践，仍然有相当多的特性我们没有提到，它们处理各种工作负载和场景，并使 Kubernetes 极其灵活。它们可能适用于也可能不适用于每个人的需求，并且在特定情况下不够稳定。让我们简单看一下流行的。
# 作业和 CronJob
它们也是高级 pod 控制器，允许我们运行最终将终止的容器。一项工作确保一定数量的 Pod 成功运行到完成；CronJob 确保在给定的时间调用作业。如果我们需要运行批处理工作负载或计划任务，我们会知道有内置控制器发挥作用。相关信息见:[https://kubernetes . io/docs/concepts/workloads/controller/jobs-run-to-complete/](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)。
# 荚果和节之间的亲和性和反亲和性
我们知道可以用节点选择器将一个 pod 手动分配给一些节点，节点可以拒绝带有污点的 pod。然而，当涉及到更灵活的情况时，比如说，我们可能希望一些 Pod 位于同一位置，或者我们希望 Pod 在可用性区域中平均分布，通过节点选择器或节点污点来安排我们的 Pod 可能需要很大的努力。因此，亲和度被设计来解决这种情况:[https://kubernetes . io/docs/concepts/configuration/assign-pod-node/#亲和度和反亲和度](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity)。
# Pod 的自动缩放
几乎所有现代基础设施都支持自动扩展运行应用的实例组，Kubernetes 也是如此。Pod 水平缩放器(`PodHorizontalScaler`)能够使用控制器(如部署)中的中央处理器/内存指标来缩放 Pod 副本。从 Kubernetes 1.6 开始，定标器正式支持基于自定义指标的定标，比如每秒事务数。更多信息可在[https://kubernetes . io/docs/tasks/run-application/horizontal-pod-autoscale/](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)找到。
# 防止和减轻 Pod 中断
我们知道 pods 是不稳定的，随着集群的扩展，它们会在节点间被终止和重新启动。如果一个应用中有太多的单元同时被销毁，可能会导致服务级别降低，甚至应用失败。尤其是当应用是有状态的或基于仲裁的，它可能几乎不能容忍 pod 中断。为了减轻中断，我们可以利用`PodDisruptionBudget`通知 Kubernetes 在任何给定时间我们的应用可以容忍多少不可用的 Pod ，以便 Kubernetes 能够在知道应用的情况下采取适当的行动。更多信息，请参考。
另一方面，由于`PodDisruptionBudget`是一个被管理对象，它仍然不能排除由 Kubernetes 之外的因素引起的中断，例如节点的硬件故障，或者节点组件由于内存不足而被系统杀死。因此，我们可以将诸如节点问题检测器之类的工具合并到我们的监控栈中，并正确配置节点资源的阈值，以通知 Kubernetes 哪个节点开始耗尽节点或驱逐过多的 pods，从而防止情况变得更糟。有关节点问题检测器和资源阈值的更多详细指南，请参考以下主题:
*   [https://kubernetes . io/docs/tasks/debug-application-cluster/monitor-node-health/](https://kubernetes.io/docs/tasks/debug-application-cluster/monitor-node-health/)
*   [https://kubernetes . io/docs/tasks/administrator-cluster/资源不足/](https://kubernetes.io/docs/tasks/administer-cluster/out-of-resource/)
# 忽必烈联合会
联盟是一组集群。换句话说，它由多个 Kubernetes 集群组成，可以从单个控制平面访问。在联盟上创建的资源将在所有连接的集群上同步。从 Kubernetes 1.7 开始，可以联合的资源包括命名空间、配置映射、机密、部署、DaemonSet、服务和入口。
当设计我们的软件时，联邦构建混合平台的能力给我们带来了另一个层次的灵活性。例如，我们可以联合部署在内部数据中心和各种公共云中的集群，以按成本分配工作负载，并利用特定于平台的功能，同时保持灵活性。另一个典型的使用案例是联合分散在不同地理位置的集群，以降低全球客户的边缘延迟。此外，由 etcd3 支持的单个 Kubernetes 集群支持 5，000 个节点，同时保持 p99 的 API 响应时间不到 1 秒(在 1.6 版本上)。如果需要一个具有数千个或更多节点的集群，我们当然可以联合集群来实现。
联盟指南可在以下链接找到:[https://kubernetes . io/docs/tasks/Federation/setup-cluster-Federation-kube fed/](https://kubernetes.io/docs/tasks/federation/set-up-cluster-federation-kubefed/)。
# 群集加载项
集群插件是为增强 Kubernetes 集群而设计或配置的程序，它们被认为是 Kubernetes 的固有部分。例如，我们在[第 6 章](06.html#43JDK0-6c8359cae3d4492eb9973d94ec3e4f1e)、*监控和日志*中使用的 Heapster 是一个附加组件，我们前面提到的节点问题检测器也是。
由于集群加载项可能用于一些关键功能，一些托管的 Kubernetes 服务(如 GKE)部署加载项管理器来保护加载项的状态不被修改或删除。托管加载项将在 pod 控制器上使用标签`addonmanager.kubernetes.io/mode`进行部署。如果模式为`Reconcile`，对规范的任何修改将回滚到其初始状态；`EnsureExists`模式只检查控制器是否存在，不检查其规格是否修改。例如，默认情况下，以下部署部署在 1.7.3 GKE 集群上，并且它们都在`Reconcile`模式下受到保护:
![](img/00147.jpeg)
如果您想在自己的集群中部署加载项，可以在以下网址找到它们:[https://github . com/kubernetes/kubernetes/tree/master/cluster/addons](https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)。
# Kubernetes 和社区
当选择一个开源工具来使用时，我们肯定想知道在我们开始使用它之后，它的支持度如何。支持度包括谁在领导项目、项目是否固执己见、项目受欢迎程度如何等因素。
Kubernetes 源于谷歌，现在得到了**云原生计算基金会** ( **CNCF** 、 [https://www.cncf.io](https://www.cncf.io) )的支持。在 Kubernetes 1.0 发布时，谷歌与 Linux 基金会合作成立了 CNCF，并捐赠了 Kubernetes 作为种子项目。CNCF 旨在促进容器化、动态编排和面向微服务的应用的开发。
由于 CNCF 的所有项目都是基于容器的，他们当然可以流畅地与 Kubernetes 一起工作。我们在[第 6 章](06.html#43JDK0-6c8359cae3d4492eb9973d94ec3e4f1e)、*监测和记录*中演示和提到的普罗米修斯、Fluentd 和 OpenTracing 都是 CNCF 的成员项目。
# 忽必烈的孵化器
Kubernetes 孵化器是一个支持 Kubernetes 项目的过程:
[https://github . com/kubrines/community/blob/master/incubator . MD](https://github.com/kubernetes/community/blob/master/incubator.md)。
分级项目可能会成为 Kubernetes 的一个核心功能，一个集群插件，或者 Kubernetes 的一个独立工具。在整本书中，我们已经看到并使用了其中的许多，包括 Heapster、cAdvisor、dashboard、minikube、kops、kube-state-metrics 和 kube-problem-detector，无论是什么让 Kubernetes 越来越好。你可以在 Kubernetes([https://github.com/kubernetes](https://github.com/kubernetes))或者孵化器([https://github.com/kubernetes-incubator](https://github.com/kubernetes-incubator)下探索这些项目。
# 舵轮和海图
helm([https://github.com/kubernetes/helm](https://github.com/kubernetes/helm))是一个包管理器，它简化了在 Kubernetes 上运行软件的第 0 天到第 n 天的操作。这也是孵化器毕业的项目。
正如我们在[第 7 章](07.html#4REBM0-6c8359cae3d4492eb9973d94ec3e4f1e)、*持续交付*中了解到的，向 Kubernetes 部署一个容器化的软件基本上就是写清单。尽管如此，一个应用可能是用几十个 Kubernetes 资源构建的。如果我们要多次部署这样的应用，重命名冲突部分的任务可能会很麻烦。如果我们引入模板引擎的思想来解决重命名地狱，我们将很快意识到我们应该有一个地方来存储模板以及呈现的清单。因此，掌舵人就是要解决这些烦人的琐事。
Helm 中的包称为图表，它是运行应用的配置、定义和清单的集合。社区贡献的图表在此发布:[https://github.com/kubernetes/charts](https://github.com/kubernetes/charts)。即使我们不打算使用它，我们仍然可以在那里找到某个包的验证清单。
使用 Helm 非常简单。首先通过运行这里的官方安装脚本获得 Helm:[https://raw . githubusercontent . com/kubernetes/Helm/master/scripts/get](https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get)。
在运行 Helm 二进制文件后，它获取我们的 kubectl 配置来连接到集群。我们需要在 Kubernetes 集群中有一个管理器`Tiller`来管理 Helm 的每个部署任务:
```
$ helm init
$HELM_HOME has been configured at /Users/myuser/.helm.