arrays的地址，这样我们才能对其进行利用。
同时，LargeHeapBlock对象只是为大型的array对象所创建的，而非typed arrays，因为typed
arrays的缓冲区是直接分配在CRT堆上的，因此，我们不能直接泄漏typed
arrays的地址。但我们可以借助下面的方法，首先将一个整数数组和一个typed arrays数组放置在相邻的内存地址处并确保其中有一个typed
arrays分配在整数数组之后，通过corrupt整数数组对象的长度就能访问到相邻的typed arrays数组了，这样，我们就可以泄漏出typed
arrays的地址，然后重新利用corrupt后的整数数组来修改这个typed arrays。最终，我们想要的内存布局应如下图所示：
其中，左侧为CRT堆的分配，右侧则显示了所有IE自定义堆的分配。可以看到，LargeHeapBlock对象以及typed
arrays的缓冲区都分配在CRT堆上，而array对象和typed arrays则分配在IE自定义堆上。
可以看到，LargeHeapBlock对象与IE自定义堆上的所有array对象存在关联，包括了两个整数数组和一个typed arrays数组。
通过从LargeHeapBlock对象中泄露的指针，我们一方面可以验证是否成功创建了所需的堆空间布局，另一方面可用于计算自定义堆中array对象间的确切距离，以便通过第一个整数数组去访问其它对象。
在自定义堆上所期望的内存布局为一整数数组，后面跟一typed arrays数组，再后面是一typed
arrays的引用，最后是另一整数数组。我们将交替分配整数数组和typed
arrays数组以期创建出所需的内存布局。下面的JavaScript代码能够完成此目的：
    for (var i = 0; i   
[2] Mozilla, "MDN Worker.postMessage() Documentation," [Online]. Available:  
[3] Mozilla, "MDN Transferable Documentation," [Online]. Available:  
[4] Mozilla, "MDN ArrayBuffer Documentation," [Online]. Available:  
[5] Y. Yu, "Write Once, Pwn Anywhere," [Online]. Available:  
[6] Y. Chen, "Exploit IE Using Scriptable ActiveX Controls," [Online].
Available:  
[7] Fortinet, "Advanced Exploit Techniques Attacking the IE Script Engine,"
[Online]. Available:  
[8] M. Tomassoli, "Exploit Development Course," [Online]. Available:  
* * *