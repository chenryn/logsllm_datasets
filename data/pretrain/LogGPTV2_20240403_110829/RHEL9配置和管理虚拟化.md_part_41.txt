    ```
2.  [**可选：**]{.strong}使用[适用的工具和实用程序](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel "虚拟机性能监控工具"){.link}测试虚拟机的性能。
3.  在主机上设置并挂载 1 GiB 巨页：
    ::: orderedlist
    1.  在主机的内核命令行中添加以下行：
        ``` literallayout
        default_hugepagesz=1G hugepagesz=1G
        ```
    2.  使用以下内容创建
        `/etc/systemd/system/hugetlb-gigantic-pages.service`{.literal}
        文件：
        ``` literallayout
        [Unit]
        Description=HugeTLB Gigantic Pages Reservation
        DefaultDependencies=no
        Before=dev-hugepages.mount
        ConditionPathExists=/sys/devices/system/node
        ConditionKernelCommandLine=hugepagesz=1G
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/etc/systemd/hugetlb-reserve-pages.sh
        [Install]
        WantedBy=sysinit.target
        ```
    3.  使用以下内容创建
        `/etc/systemd/hugetlb-reserve-pages.sh`{.literal} 文件：
        ``` literallayout
        #!/bin/sh
        nodes_path=/sys/devices/system/node/
        if [ ! -d $nodes_path ]; then
        	echo "ERROR: $nodes_path does not exist"
        	exit 1
        fi
        reserve_pages()
        {
        	echo $1 > $nodes_path/$2/hugepages/hugepages-1048576kB/nr_hugepages
        }
        reserve_pages 4 node1
        reserve_pages 4 node2
        ```
        这会从 [*node1*]{.emphasis} 保留 4 个 1GiB 巨页，并在
        [*node2*]{.emphasis} 中保留 4 个 1GiB 巨页。
    4.  使在上一步中创建的脚本可执行：
        ``` literallayout
        # chmod +x /etc/systemd/hugetlb-reserve-pages.sh
        ```
    5.  在引导时启用巨页保留：
        ``` literallayout
        # systemctl enable hugetlb-gigantic-pages
        ```
    :::
4.  使用 `virsh edit`{.literal} 命令编辑您要优化的虚拟机的 XML
    配置，在这个示例中 [*super-VM*]{.emphasis} ：
    ``` literallayout
    # virsh edit super-vm
    ```
5.  用以下方法调整虚拟机的 XML 配置：
    ::: orderedlist
    1.  将虚拟机设置为使用 8 个静态 vCPU。使用 ``{.literal}
        元素进行此操作。
    2.  将每个 vCPU 线程固定到拓扑中镜像的对应主机 CPU
        线程。要做到这一点，使用 ``{.literal} 部分中的
        ``{.literal} 元素。
        请注意，如上面的 `virsh capabilities`{.literal}
        工具程序所示，主机 CPU
        线程不会按其对应的内核按顺序排序。另外，vCPU 线程应固定到同一
        NUMA 节点上的可用主机内核集合。有关表图，请查看
        [**以下示例拓扑**]{.strong} 部分。
        步骤 a. 和 b. 的 XML 配置类似：
        ``` programlisting
        ```
    3.  将虚拟机设置为使用 1 GiB 巨页：
        ``` programlisting
        ```
    4.  配置虚拟机的 NUMA 节点，使其使用主机上对应的 NUMA
        节点的内存。要做到这一点，使用 ``{.literal} 部分中的
        ``{.literal} 元素：
        ``` programlisting
        ```
    5.  确保 CPU 模式被设置为 `host-passthrough`{.literal}，且 CPU 在
        `passthrough`{.literal} 模式中使用缓存：
        ``` programlisting
        ```
    :::
:::
::: orderedlist
**验证**
1.  确认虚拟机生成的 XML 配置包括以下部分：
    ``` programlisting
    [...]
      8
    ```
2.  [**可选：**]{.strong}使用[适用的工具和实用程序](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel "虚拟机性能监控工具"){.link}测试虚拟机的性能，以评估虚拟机优化的影响。
:::
::: itemizedlist
**拓扑示例**
-   下表演示了 vCPU 和主机 CPU 之间的连接：
    ::: table
    []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#idm139624727524784}
    **表 17.1. 主机拓扑**
    ::: table-contents
      -------------------------- -- -- --- --- --- --- --- --- --- --- --- ---- --- ----
       [**CPU 线程**]{.strong}         0   3   1   4   2   5   6   9   7   10   8   11
         [**内核**]{.strong}           0       1       2       3       4        5   
         [**插槽**]{.strong}           0                       1                    
       [**NUMA 节点**]{.strong}        0                       1                    
      -------------------------- -- -- --- --- --- --- --- --- --- --- --- ---- --- ----
    :::
    :::
    ::: table
    []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#idm139624744607664}
    **表 17.2. VM 拓扑**
    ::: table-contents
      -------------------------- -- -- --- --- --- --- --- --- --- ---
       [**vCPU 线程**]{.strong}        0   1   2   3   4   5   6   7
         [**内核**]{.strong}           0       1       2       3   
         [**插槽**]{.strong}           0               1           
       [**NUMA 节点**]{.strong}        0               1           
      -------------------------- -- -- --- --- --- --- --- --- --- ---
    :::
    :::
    ::: table
    []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#idm139624721829408}
    **表 17.3. 合并主机和虚拟机拓扑**
    ::: table-contents
      ------------------------------ -- -- --- --- --- --- --- --- --- --- --- ---- --- ----
         [**vCPU 线程**]{.strong}                  0   1   2   3           4   5    6   7
       [**主机 CPU 线程**]{.strong}         0   3  1   4   2   5    6   9  7   10   8   11
           [**内核**]{.strong}              0      1       2        3      4        5   
           [**插槽**]{.strong}              0                       1                   
         [**NUMA 节点**]{.strong}           0                       1                   
      ------------------------------ -- -- --- --- --- --- --- --- --- --- --- ---- --- ----
    :::
    :::
    在这种情况下，有 2 个 NUMA 节点和 8 个
    vCPU。因此，应该为每个节点固定 4 个 vCPU 线程。
    另外，红帽建议在每个节点中保留至少一个 CPU 线程用于主机系统操作。
    因为在这个示例中，每个 NUMA 节点都托管了 3 个内核，每个内核都有 2
    个主机 CPU 线程，所以为节点 0 设置的值如下：
    ``` programlisting
    ```
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#deactivating-ksm_optimizing-virtual-machine-cpu-performance}取消激活内核相同页面合并 {.title}
:::
虽然内核相同的页面合并(KSM)提高了内存密度，但会增加 CPU
使用率，并会根据工作负载造成总体性能造成负面影响。在这种情况下，您可以通过取消激活
KSM 来提高虚拟机(VM)性能。
根据您的要求，您可以为单个会话或永久停用 KSM。
::: itemizedlist
**步骤**
-   要在一个会话中取消激活 KSM，请使用 `systemctl`{.literal}
    实用程序停止 `ksm`{.literal} 和 `ksmtuned`{.literal} 服务。
    ``` literallayout
    # systemctl stop ksm
    # systemctl stop ksmtuned
    ```
-   要永久取消激活 KSM，请使用 `systemctl`{.literal} 实用程序禁用
    `ksm`{.literal} 和 `ksmtuned`{.literal} 服务。
    ``` literallayout
    # systemctl disable ksm
    Removed /etc/systemd/system/multi-user.target.wants/ksm.service.
    # systemctl disable ksmtuned
    Removed /etc/systemd/system/multi-user.target.wants/ksmtuned.service.
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
取消激活 KSM
前在虚拟机间共享的内存页将保持共享。要停止共享，请使用以下命令删除系统中的所有
`PageKSM`{.literal} 页面：
``` literallayout
# echo 2 > /sys/kernel/mm/ksm/run
```
在匿名页面替换了 KSM 页面后，`khugepaged`{.literal}
内核服务将在虚拟机物理内存上重建透明巨页。
:::
:::
:::
::: section
::: titlepage
# []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#optimizing-virtual-machine-network-performance_optimizing-virtual-machine-performance-in-rhel}优化虚拟机网络性能 {.title}
:::
由于虚拟机网络接口卡(NIC)的虚拟性质，虚拟机丢失了其分配的主机网络带宽的一部分，这可以降低虚拟机的整体工作负载效率。以下提示可以最小化虚拟化对虚拟
NIC(vNIC)吞吐量的影响。
::: title
**流程**
:::
使用以下任一方法并观察它是否对虚拟机网络性能有帮助：
::: variablelist
[启用 vhost_net 模块]{.term}
:   在主机上，确保 `vhost_net`{.literal} 内核功能已启用：