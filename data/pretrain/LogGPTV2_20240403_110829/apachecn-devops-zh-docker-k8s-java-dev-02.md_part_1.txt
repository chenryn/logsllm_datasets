# 二、网络和持久存储
在前一章中，我们学习了很多关于 Docker 的概念。我们知道容器是映像的运行时。它将包含您的 Java 应用以及所有需要的依赖项，例如 JRE 或应用服务器。但是，Java 应用自给自足的情况很少。它总是需要与其他服务器(作为数据库)通信，或者向其他服务器(作为运行在应用服务器上的 web 应用，需要接受来自用户或其他应用的请求)公开自己。是时候描述向外界开放 Docker 容器、网络和持久存储的方法了。在本章中，您将学习如何配置网络，以及公开和映射网络端口。通过这样做，您将使您的 Java 应用能够与其他容器通信。想象一下下面的场景:您可以让一个容器用您的 Java 应用运行 Tomcat 应用服务器，与另一个运行数据库的容器通信，例如`PostgreSQL`。虽然与 Docker 默认提供的相比，Kubernetes 的网络方法有些不同，但现在让我们简单地关注一下 Docker 本身。稍后，我们将介绍 Kubernetes 的特定网络。容器与外界的交流不仅仅是联网；在本章中，我们还将关注数据量，作为在容器运行和停止周期之间保持数据的一种方式。
本章涵盖以下主题:
*   Docker 网络类型
*   网络命令
*   创建网络
*   映射和公开端口
*   与音量相关的命令
*   创建和删除卷
让我们从 Docker 网络开始。
# 建立工作关系网
为了使您的容器能够与外部世界通信，无论是另一个服务器还是另一个 Docker 容器，Docker 都提供了不同的网络配置方式。让我们从可用于容器的网络类型开始。
# Docker 网络类型
Docker 提供了三种不同的网络类型。要列出它们，执行`docker network ls`命令:
```
$ docker network ls  
```
Docker 将输出可用网络列表，其中包含唯一的网络标识符、网络名称和幕后驱动程序:
![](img/0c6fb45d-2b80-408d-9033-468337e837e5.png)
为了概述各种网络类型之间的差异，让我们现在逐一描述它们。
# 桥
这是 Docker 中的默认网络类型。当 Docker 服务守护程序启动时，它会配置一个名为`docker0`的虚拟桥。如果没有使用`docker run -net=`选项指定网络，Docker 守护程序将默认将容器连接到桥接网络。此外，如果您创建一个新的容器，它将连接到桥接网络。对于 Docker 创建的每个容器，它分配一个虚拟以太网设备，该设备将连接到网桥。使用 Linux 命名空间，虚拟以太网设备被映射为在容器中显示为`eth0`，如下图所示:
![](img/c99217c4-525e-41ac-a366-5063a5515fd0.jpg)
`in-container eth0`接口从网桥的地址范围中获得一个 IP 地址。换句话说，Docker 将从桥上可用的范围中找到一个空闲的 IP 地址，并用该 IP 地址配置容器的`eth0`接口。从现在开始，如果新容器想，比如，连接到互联网，它将使用桥；主机自己的 IP 地址。网桥将自动在与其相连的任何其他网络接口之间转发数据包，并允许容器与主机以及同一台主机上的容器进行通信。桥接网络可能是最常用的网络。
# 主持
这种类型的网络只是将容器放在主机的网络栈中。也就是说，容器可以访问主机上定义的所有网络接口，如下图所示:
![](img/e3ab96e8-6bd0-4724-8851-08896804fc72.jpg)
如果使用`-net=host`选项启动容器，那么容器将使用主机网络。它将和正常的网络一样快:没有桥梁，没有翻译，什么都没有。这就是为什么当您需要获得最佳网络性能时，它会很有用。与运行在网桥网络上的容器相比，运行在主机网络栈中的容器将获得更快的网络性能，无需遍历`docker0` `bridge`和`iptables`端口映射。在主机模式下，容器共享主机的网络命名空间(例如，您的本地机器)，直接将其暴露给外部世界。通过使用`-net=host`命令开关，可以通过主机的 IP 地址访问您的容器。然而，你需要意识到这可能是危险的。如果您有一个以 root 用户身份运行的应用，并且它有一些漏洞，那么就会有安全漏洞的风险，因为有人可以通过 Docker 容器远程控制主机网络。使用主机网络类型还意味着您需要使用端口映射来访问容器内部的服务。我们将在本章后面介绍端口映射。
# 没有人
长话短说，无网络根本不配置网络。此网络类型没有使用驱动程序。当您不需要容器来访问网络时，这很有用；`-net=none`切换到`docker run`命令完全禁用网络。
Docker 提供了一个简短的命令列表来处理网络。您可以从 shell (Linux 或 macOS)或 Windows 中的命令提示符和 PowerShell 运行它们。让我们现在了解他们。
# 网络命令
Docker 中管理网络的父命令是`docker network`。您可以使用`docker network help`命令列出整个命令集，如下图所示:
![](img/782e50cf-06d7-445d-b62d-3c05b5db6dd5.png)
要获得特定命令可用的每个选项的详细语法和描述，请对每个命令使用`-help`开关。例如，要获得`docker network create`可用参数的描述，执行`docker network create -help`。
让我们简要描述每个可用的命令:
*   `**$ docker network ls**`:这是我们之前一直在使用的命令，它只是列出了你的容器可以使用的网络。它将输出网络标识符、名称、使用的驱动程序和网络范围
*   `**$ docker network create**`:创建新网络。该命令的完整语法是，`docker network create [OPTIONS] NETWORK`。我们一会儿将使用该命令
*   `**$ docker network rm**`:`dockercnetworkcrm`命令只是删除网络
*   `**$ docker network connect**`:将容器连接到特定网络
*   `**$ docker network disconnect**`:顾名思义，它会断开容器与网络的连接
*   `**$ docker network inspect**`:docker 网络检查命令显示网络的详细信息。如果你有网络问题，这非常有用。我们现在要创建并检查我们的网络
`docker network`检查命令显示网络的详细信息。如果你有网络问题，这非常有用。我们现在要创建并检查我们的网络。
# 创建和检查网络
让我们创建一个网络。我们将把我们的网络称为`myNetwork`。从 shell 或命令行执行以下命令:
```
$ docker network create myNetwork  
```
这是最简单的命令形式，但它可能是最常用的。它需要一个默认的驱动程序(我们没有使用任何选项来指定驱动程序，我们将只使用默认的驱动程序，即 bridge)。作为输出，Docker 将打印出新创建的网络的标识符:
![](img/01f89745-3ade-43bd-990b-c555ed1abf93.png)
稍后在将容器连接到该网络或检查网络属性时，您将使用该标识符来引用该网络。命令的最后一个参数是网络的名称，它比 ID 方便得多，也更容易记住。我们这里的网名是`myNetwork`。`docker network`创建命令需要更多参数，如下表所示:
| **选项** | **描述** |
| `-d, -driver="bridge"` | 管理网络的驱动程序 |
| `-aux-address=map[]` | 网络驱动程序使用的辅助 IPv4 或 IPv6 地址 |
| `-gateway=[]` | 主子网的 IPv4 或 IPv6 网关 |
| `-ip-range=[]` | 从子范围分配容器 IP |
| `-ipam-driver=default` | IP 地址管理驱动程序 |
| `-o`、`-opt=map[]` | 设置驾驶员的特定选项 |
| `-subnet=[]` | 代表网段的 CIDR 格式子网 |
最重要的参数之一是`-d` ( `--driver`)选项，默认值为 bridge。驱动程序允许您指定网络类型。如您所知，Docker 默认有几个可用的驱动程序:`host`、`bridge`和`none`。
创建网络后，我们可以使用`docker network inspect`命令检查其属性。从 shell 或命令行执行以下操作:
```
$ docker network inspect myNetwork 
```
作为回应，你会得到很多关于你的网络的详细信息。正如你在截图中看到的，我们新创建的网络使用桥驱动程序，即使我们没有明确要求:
![](img/43f9fa4c-5939-4aad-8f48-381d7d148e85.png)
如您所见，容器列表是空的，原因是我们还没有将任何容器连接到该网络。现在就开始吧。
# 将容器连接到网络
现在我们已经准备好了`myNetwork`，我们可以运行 Docker 容器并将其连接到网络。要启动容器，我们将使用`docker run --net=`选项，其中``是默认网络或您自己创建的网络的名称。让我们以 Apache Tomcat 为例，它是 Java Servlet 和 JavaServer 页面技术的开源实现:
```
docker run -it --net=myNetwork tomcat  
```
这需要一段时间。Docker 引擎将从 Docker Hub 中提取 Tomcat 的所有映像层，然后运行 Tomcat 容器。还有另一个选项可以将网络连接到容器，您可以通知 Docker 您希望容器连接到与其他容器使用的网络相同的网络。这样，不需要显式指定网络，只需指示 Docker 希望两个容器在同一个网络上运行。为此，使用`container:`前缀，如下例所示:
```
docker run -it --net=bridge myTomcat
docker run -it --net=container:myTomcat myPostgreSQL  
```
在前面的例子中，我们使用桥接网络运行`myTomcat`映像。下一个命令将运行`myPostgreSQL`映像，使用与`myTomcat`相同的网络。这是一个非常常见的场景；您的应用将在与数据库相同的网络上运行，这将允许它们进行通信。当然，您启动到同一个网络中的容器必须在同一个 Docker 主机上运行。网络中的每个容器都可以直接与网络中的其他容器进行通信。但是，网络本身将容器与外部网络隔离开来，如下图所示:
![](img/cdf93515-e096-476c-8486-5335466fffd9.jpg)
如果您在一个桥接的、隔离的网络中运行您的容器，我们需要指导 Docker 如何将我们容器的端口映射到主机的端口。我们现在就要这么做。
# 公开端口和映射端口
一个常见的场景通常是您希望您的容器化应用接受来自其他容器或 Docker 外部的传入连接。它可以是监听端口 80 的应用服务器，也可以是接受传入请求的数据库。
映像可以暴露端口。公开端口意味着您的容器化应用将监听公开的端口。举个例子，Tomcat 应用服务器默认会监听端口`8080`。在同一台主机和同一网络上运行的所有容器都可以在此端口上与 Tomcat 通信。公开端口有两种方式。它可以在带有`EXPOSE`指令的 Dockerfile 中(我们将在后面关于创建映像的章节中介绍)或者在使用`--expose`选项的`docker run`命令中。以这个正式的 Tomcat 映像 Dockerfile 片段为例(注意，为了示例清晰起见，它被缩短了):
```
FROM openjdk:8-jre-alpine
ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p "$CATALINA_HOME"
WORKDIR $CATALINA_HOME
EXPOSE 8080
CMD ["catalina.sh", "run"]  
```