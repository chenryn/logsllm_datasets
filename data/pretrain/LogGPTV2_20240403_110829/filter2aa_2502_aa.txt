# A Journey Into Fuzzing WebAssembly Virtual Machines

## Speaker: Patrick Ventuzelo
### @BlackHatEvents #BHUSA

**Patrick Ventuzelo (@Pat_Ventuzelo)**
- **Founder & CEO of FuzzingLabs | Senior Security Researcher**
  - Fuzzing and vulnerability research
  - Development of security tools
- **Training/Online Courses**
  - Rust Security Audit & Fuzzing
  - Go Security Audit & Fuzzing
  - WebAssembly Reversing & Analysis
  - Practical Web Browser Fuzzing
- **Main Focus**
  - Fuzzing, Vulnerability research
  - Rust, Golang, WebAssembly, Browsers
  - Blockchain Security, Smart contracts
- **Previous Speaking Engagements**
  - OffensiveCon, REcon, RingZer0, ToorCon, hack.lu, NorthSec, FIRST, etc.

---

## Introduction to WebAssembly

### What is WebAssembly?
- **Binary Instruction Format for a Stack-Based Virtual Machine**
  - Low-level bytecode
  - Compilation target for C/C++/Rust/Go/etc.
- **Generic Evolution of NaCl & Asm.js**
- **W3C Standard**
- **MVP 1.0 (March 2017), MVP 2.0 (2022/2023)**
- **Natively Supported in All Major Browsers**
- **WebAssembly Goals:**
  - Fast, efficient, and portable
  - Easily readable and debuggable
  - Safe (using sandboxed execution environment)
  - Open and modular

---

## How WebAssembly Works?

### Step 1: Compilation into WebAssembly Module
- **Compilers and Toolchains:**
  - LLVM, Emscripten, Binaryen
- **Source Code Compilation:**
  - Source code is compiled into a `.wasm` binary file

### Step 2: Execution by the WebAssembly VM
- **Runtime & Host Environments:**
  - V8, Wasmer, Wasmtime
- **Execution Stages:**
  1. **Decoding/Parsing:**
     - The binary format is parsed and converted into a module.
  2. **Validation:**
     - The decoded module undergoes validation checks (e.g., type checking).
  3. **Instantiation:**
     - Creation of a module instance with all the context instantiated.
  4. **Execution/Invocation:**
     - Exported functions are called by the host over the module instance.

### WebAssembly VM - Use-Cases
- **Standalone VM (Server):**
  - Edge computing
  - Back-end applications (Node.js)
  - Mobile & Desktop apps
  - IoT & Embedded OS
  - Blockchain (Polkadot, Substrate, Cosmos, NEAR, Spacemesh, Golem, EOS, DFINITY)
- **Browser (Client):**
  - Video, audio, and image processing
  - Video games
  - Complex web applications (Autocad, Google Earth, Photoshop, Shopify, Figma)
  - OS Emulation

---

## Focus of This Talk: WebAssembly VM

### Goal: Find Bugs at Every Stage on Different VMs!

### 1. Coverage-Guided Fuzzing
- **Coverage-Guided Fuzzing:**
  - Observe how inputs are processed to learn which mutations are interesting.
  - Save inputs to be re-used and mutated in future iterations.
- **Fuzzing Strategy:**
  - Input: WebAssembly Binary Format
    - Module structure
      - Header: magic number + version
      - 11 Sections: may appear at most once
      - 1 custom section: unlimited
  - Targets: Standalone VMs & parsing libraries (C/C++)
    - Binaryen, WABT, Wasm3, WAMR, WAC, Radare2, etc.
  - C/C++ Fuzzers:
    - AFL, Honggfuzz, AFL++
  - Complexity: None
    - Instrumentation using custom gcc/clang
    - Overwrite CC or CXX flags
    - Preferred AFL++ instead of vanilla AFL
- **Results: ~46 bugs/vulnerabilities**
  - Binaryen: Out-of-bound read
  - WABT: Assertion errors, uncontrolled memory allocation
  - WAMR: Null pointer dereference, heap out of bounds read, assertion errors, heap out of bounds write, segmentation fault
  - Radare2: Heap out of bounds read

### Fuzzing Strategy: Improvements #1
- **Reusing Corpora Between All Targets**
- **Add Crashing Files Inside the Existing Corpus**
  - It might crash other targets

### 2. In-Process Fuzzing
- **In-Process Fuzzing:**
  - Fuzz a specific entry point of the program in only one dedicated process.
  - For every test case, the process isn't restarted but the values are changed in memory.
- **Targets: Standalone VMs & Parsing Libraries (Rust)**
  - Wasmer, Wasmtime, wain, Wasmparser, wasmi, Cranelift, Lucet, pywasm, webassemblyjs
- **Rust Fuzzers:**
  - cargofuzz, honggfuzz-rs, afl.rs
  - Complexity: Low
    - Write some fuzzing harnesses
    - honggfuzz-rs is preferred (faster and better interface)
    - New fuzzer cargo-libafl is promising
- **Python/JS Fuzzers:**
  - Atheris, jsfuzz
  - Complexity: Low
    - Write some fuzzing harnesses
    - Learn how to use different fuzzing frameworks
- **Results: ~62 bugs/vulnerabilities**
  - Wasmer, Cranelift, Wasmparser, Wasmtime, wain, lucet, Pywasm, webassemblyjs
  - Type of bugs found: Panicking macros, index out of bound panic

---

This presentation aims to provide a comprehensive overview of fuzzing WebAssembly virtual machines, covering both the theoretical and practical aspects of the process.