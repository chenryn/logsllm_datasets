msf5 >
Listing A.6
Msfconsole: using the search command
Type search followed by the 
string you are trying to find.
A single exploit module is returned
when searching for “invoker.”
238
APPENDIX A
Building a virtual pentest platform
As you can see, this module is named jboss_invoke_deploy. It is located in the http
directory, which is in the multi directory in the top-level exploit directory. 
 To use a particular module, type use followed by the path to the module, as in the
following example: 
use exploit/multi/http/jboss_invoke_deploy
Notice how the prompt changes to show that you have selected a module. You can
learn more about a particular module by typing info. You can also see information
about the parameters you can use to run the module by typing show options.
msf5 exploit(multi/http/jboss_invoke_deploy) > show options 
Module options (exploit/multi/http/jboss_invoke_deploy):
   Name       Current Setting             Required  Description
   ----       ---------------             --------  -----------
   APPBASE                                no        Application...
   JSP                                    no        JSP name to u...
   Proxies                                no        A proxy chain of for...
   RHOSTS                                 yes       The target addres...
   RPORT      8080                        yes       The target port (TCP)
   SSL        false                       no        Negotiate SSL/TLS f...
   TARGETURI  /invoker/JMXInvokerServlet  yes       The URI path of th...
   VHOST                                  no        HTTP server virtua...
Exploit target:
   Id  Name
   --  ----
   0   Automatic
As you can see from the show options command, this module takes eight parameters:
APPBASE
JSP
Proxies
RHOSTS
RPORT
SSL
TARGETURI
VHOST
The msfconsole also displays some helpful information in the Description column
about what each parameter is and whether it’s required to run the module. In keeping
with the intuitive msfconsole commands, if you want to set the value of a particular
Listing A.7
Msfconsole: show options output
Type “show 
options” on any 
module to find 
out how to use it.
239
APPENDIX A
Building a virtual pentest platform
parameter, you can do so using the set command. For example, type the following
command to set the value for the RHOSTS parameter:
set RHOSTS 127.0.0.1
Then press Enter. Run the show options command again. Notice that the value you
specified for the RHOSTS parameter is now displayed in the Current Setting column.
The award for easiest commands to remember definitely goes to Metasploit. If you
want to run this module, type the run command at the prompt. To exit the msfconsole
and return to your bash prompt, you don’t have to think too hard about what the
command might be. You guessed it: exit.
TIP
Once you’ve finished installing all your tools, take a snapshot of your
VM. This is something you can revert back to before each new engagement.
When you inevitably find yourself installing new tools because you need them
for a specific engagement, go back to your snapshot, install the tools you
used, create a new snapshot, and use that one as your base system going for-
ward. Rinse and release throughout your entire pentest career.
240
appendix B
Essential
 Linux commands
I must admit, this appendix’s title is somewhat misleading. I should clarify that
when I say Linux commands, I’m not using proper terminology. Technically, Linux is
the name of the operating system; the command prompt or terminal that you
launch to run a command usually opens a Bourne shell or bash prompt. So, I sup-
pose I could have gone with the title “Essential bash commands,” but I thought that
might have confused some readers. 
 By no means are the commands in this appendix a comprehensive list, nor are
they the full extent of the commands you’ll need to know. Think of them instead as
a starting point to become familiar with command-line operations. These are the
absolute must-haves; without them, your job as a penetration tester would be excru-
ciatingly painful. 
B.1
CLI commands
In this section, I introduce the commands cat, cut, grep, more, wc, sort, |, and >.
The last two are actually special operators and work in conjunction with other com-
mands. I’ll explain each of these with specific examples. 
B.1.1
$ cat 
Suppose you find yourself with remote access to a compromised Linux system,
which you’ve managed to penetrate during your engagement. While looking
around the filesystem, you identify a curious-looking file named passwords.txt. (By
the way, that’s not a too-good-to-be-true scenario; I see this file all the time on client
networks.) If you were in a GUI environment, you would probably double-click that
file eagerly to see what’s inside; but from the command line, you can use cat—
short for concatenate—to see what’s in a file. If you were to cat out the file, it might
241
APPENDIX B
Essential Linux commands
look something like the following. This is a pretty typical output that you would see on
a pentest—even though the file has a .txt extension, it’s clearly a CSV file that was
exported from Excel or some other spreadsheet program:
cat passwords.txt 
ID   Name  Access Password 
1    abramov user  123456
2    account user  Password 
3    counter user  12345678
4    ad   user  qwerty 
5    adm   user  12345
6    admin  admin  123456789
8    adver  user  1234567
9    advert user  football 
10   agata  user  monkey 
11   aksenov user  login 
12   aleks  user  abc123 
13   alek  user  starwars 
14   alekse user  123123
15   alenka user  dragon 
16   alexe  user  passw0rd 
17   alexeev user  master 
18   alla  user  hello 
19   anatol user  freedom 
20   andre  admin  whatever 
21   andreev admin  qazwsx 
22   andrey user  trustno1
23   anna  user  123456
24   anya  admin  Password 
25   ao   user  12345678
26   aozt  user  qwerty 
27   arhipov user  12345
28   art   user  123456789
29   avdeev user  letmein 
30   avto  user  1234567
31   bank  user  football 
32   baranov user  iloveyou 
33   baseb1l user  admin123 
34   belou2 user  welcome 
35   bill  admin  monkey 
36   billy  user  login 
B.1.2
$ cut
Whenever you have output like the preceding example where data is separated into col-
umns or another repeatable format such as username:password, you can use the mighty
cut command to split the results into one or more columns. Let’s say you wanted to only
see the passwords. You can use the cat command to display the file contents and then
use the pipe operator (|), which is the straight vertical line above your Enter key, to
pipe the output of the cat command into the cut command, as follows: 
cat passwords.txt | cut -f4
Password 
242
APPENDIX B
Essential Linux commands
123456
Password 
12345678
qwerty 
12345
123456789
1234567
football 
monkey 
login 
abc123 
starwars 
123123
dragon 
passw0rd 
master 
hello 
freedom 
whatever 
qazwsx 
trustno1
123456
Password 
12345678
qwerty 
12345
123456789
letmein 
1234567
football 
iloveyou 
admin123 
welcome 
monkey 
login 
In case you’re wondering, the -f4 option means “Show me the 4th field,” which in the
case of this file is the Password field. Why the fourth field and not the third or twelfth?
Because the cut command by default delimits on the tab character. If you need to,
you can tell cut to delimit on a different character with cut -d [character]. If you
want to save this output into a new file, you can use the > operator like this:
cat passwords.txt | cut -f4 > justpws.txt 
This creates a new file called justpws.txt containing the previous output.
B.1.3
$ grep
Continuing with the same file, suppose you were interested in seeing only results that
matched a certain criterion or text string. For example, because column 3 displays the
user access level and you, as a penetration tester, want to obtain the highest level of
243
APPENDIX B
Essential Linux commands
access you can, it’s logical that you might want to see only users with admin access.
Here is how you would do that using grep:
cat passwords.txt | grep admin
6    admin  admin  123456789
20   andre  admin  whatever 
21   andreev admin  qazwsx 
24   anya  admin  Password 
33   baseb1l user  admin123
35   bill  admin  monkey 
This is great, but it looks like one of the users has user access. This is because you used
grep to limit the output to lines that contain the text string “admin”; because user 33
has the word admin in their password, it made its way into your output. Don’t worry,
though; there is no limit to the number of times you can chain grep together. To
remove this user from the output, simply modify the command like this:
cat passwords.txt | grep admin | grep -v admin123
6    admin  admin  123456789
20   andre  admin  whatever 
21   andreev admin  qazwsx 
24   anya  admin  Password 
35   bill  admin  monkey 
Using -v admin123 tells grep to only display lines of text that do not contain the
string “admin123.” 
B.1.4
$ sort and wc
You’ll often find yourself sorting through files with lots of repeat lines. When reporting
on your findings, it’s vital to be accurate with numbers. For example, you don’t want to
say you compromised about 100 accounts but rather that you compromised exactly 137
accounts. This is where sort and wc are very useful. Pipe the output of a cat or grep
command into sort and specify -u to only show unique results. Pipe that output into
the wc command with the -l argument to display the number of lines in your output:
cat passwords.txt | cut -f3 | sort -u
Access
admin
user
cat passwords.txt | cut -f3 | sort -u | wc -l
3
Without question, if you’re a Linux enthusiast, I have not included your favorite com-
mand in this appendix. I don’t mean to offend you or claim that it isn’t important or
useful; I’m simply including what is necessary to get through the exercises in this book.
The old saying about skinning a cat is very much applicable to Linux and the command
line—there are dozens of different ways to accomplish the same task. My only claim for
244
APPENDIX B
Essential Linux commands
the examples in this book is that they work, and they work reliably. Should you find a
better command or way of doing something that works for you, use it.
B.2
tmux
In the land of bash, processes that you launch from the command line are tied to your
active user session. (If it helps, you can think of every command you type as a little
application with its own icon in the Windows taskbar.) If your bash session dies for any
reason, your processes get killed.
 For this reason, terminal multiplexers were invented. The greatest terminal multi-
plexer in the world (in my opinion) is called tmux. With tmux, you are placed in a sort
of virtual terminal environment that is running in the background. You can back out
of a tmux session, close your terminal, log out of your system, log back in, open a new
terminal, and connect back to the same tmux session. It’s magic! tmux has a lot of
other great features that I recommend you explore outside of this book. For a deeper
dive, check out “A Gentle Introduction to tmux” by Alek Shnayder on Hacker Noon:
http://mng.bz/aw9j.
 My main reasons for loving tmux and using it on pentests are twofold:
 The ability to save a session, log out, and then return to the same session
 The ability to collaborate and share a single interactive terminal with others
As you likely know, some commands take a long time to process. Who has time to wait
around? Instead, you can fire off your long command in one terminal window and
then open another to play around in while you wait. You could consider it analogous
to having multiple browser tabs in a single instance of a browser, if it helps you visual-
ize, but it’s probably best if I show you. (I’ll explain my second reason for being a
tmux fanboy in just a moment.) Open a terminal in your Ubuntu VM, and type tmux
(see figure B.1).
 Don’t be overwhelmed by the power-line status bar in this screenshot. The most
important thing to note is the ribbon at bottom left with the word bash and the num-
ber 0. In tmux-speak, this is referred to as a window, and all windows have a numeric
identifier that starts at 0 and a title that defaults to the current running process, which
is bash. Renaming the title of this window is easy when you understand how tmux
commands work. 
Figure B.1
What you see when you first launch tmux
245
APPENDIX B
Essential Linux commands
B.2.1
Using tmux commands
Each tmux command is prefaced by a prefix key followed by the actual command. By
default, this prefix key is Ctrl-b. 
Swapping back and forth between windows is as simple as toggling Ctrl-b l (Ctrl-b fol-
lowed by a lowercase L) and Ctrl-b n. That’s l and n as in last and next window. If you have
many windows open and want to jump directly to a specific one, you can use Ctrl-b and
then the window number—for example, Ctrl-b 3 to jump straight to window 3.
 Table B.1 lists a few basic usage commands that you will use frequently.
Table B.1
Common tmux commands to remember
Keyboard shortcut
tmux command
Ctrl-b l (lowercase L)
Cycle back to the last tmux window.
Ctrl-b n 
Cycle up to the next tmux window.
Ctrl-b 3
Jump directly to window 3.
Ctrl-b c
Create a new window.
Ctrl-b , (comma)
Rename the current window.
Ctrl-b “ (double quotes)
Split the current window horizontally.
Ctrl-b %
Split the current window vertically.
Ctrl-b ?
View all the tmux commands.
Renaming a tmux window
First, I don’t recommend that you try to change the window name. This is because
the majority of help you’ll find on the internet will use the default, and it can be con-
fusing if you are using something else. 
The command to rename a window is Ctrl-b followed by a comma (that is, let go of
the key combination and then type a comma). Your tmux bar will change, and you will
have a cursor prompt with the text (rename-window) bash. Use the Delete key to
delete the word bash and then type the new name of your window. It’s a good idea to
rename each window something that tells you about what you are doing in that win-
dow, so you can make sense of it later when you return to a tmux session with mul-
tiple windows open. 