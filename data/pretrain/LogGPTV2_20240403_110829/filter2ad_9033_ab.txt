        sink = ma.getQualifier()
        or
        m instanceof XStreamReadObjectMethod and
        sink = ma.getAnArgument() and
        not exists(SafeXStream sxs | sxs.flowsTo(ma.getQualifier()))
        or
        m instanceof KryoReadObjectMethod and
        sink = ma.getAnArgument() and
        not exists(SafeKryo sk | sk.flowsTo(ma.getQualifier()))
        or
        ma instanceof UnsafeSnakeYamlParse and
        sink = ma.getArgument(0)
      )
    }
    class UnsafeDeserializationSink extends Expr {
      UnsafeDeserializationSink() {
        unsafeDeserialization(_, this)
      }
      MethodAccess getMethodAccess() { unsafeDeserialization(result, this) }
    }
    from UnsafeDeserializationSink sink, RemoteUserInput source
    where source.flowsTo(sink)
    select sink.getMethodAccess(), "Unsafe deserialization of $@.", source, "user input"
#### 黑盒检测
调用ysoserial并依次生成各个第三方库的利用payload(也可以先分析依赖第三方包量，调用最多的几个库的paylaod即可)，该payload构造为访问特定url链接的payload，根据http访问请求记录判断反序列化漏洞是否利用成功。如：
    java -jar ysoserial.jar CommonsCollections1 'curl " + URL + " '
也可通过DNS解析记录确定漏洞是否存在。现成的轮子很多，推荐NickstaDB写的SerialBrute，还有一个针对RMI的测试工具[BaRMIe](https://github.com/NickstaDB/BaRMIe)，也很不错～。.
#### RASP检测
Java程序中类ObjectInputStream的readObject方法被用来将数据流反序列化为对象，如果流中的对象是class，则它的ObjectStreamClass描述符会被读取，并返回相应的class对象，ObjectStreamClass包含了类的名称及serialVersionUID。
类的名称及serialVersionUID的ObjectStreamClass描述符在序列化对象流的前面位置，且在readObject反序列化时首先会调用resolveClass读取反序列化的类名，所以RASP检测反序列化漏洞时可通过重写ObjectInputStream对象的resolveClass方法获取反序列化的类即可实现对反序列化类的黑名单校验。
百度的开源RASP产品就是使用的这种方法，具体可参考其[DeserializationHook.java](https://github.com/baidu/openrasp/blob/master/agent/java/src/main/java/com/fuxi/javaagent/hook/DeserializationHook.java)的实现:
    @Override
        protected MethodVisitor hookMethod(int access, String name, String desc,
                                           String signature, String[] exceptions, MethodVisitor mv) {
            if ("resolveClass".equals(name) && "(Ljava/io/ObjectStreamClass;)Ljava/lang/Class;".equals(desc)) {
                return new AdviceAdapter(Opcodes.ASM5, mv, access, name, desc) {
                    @Override
                    protected void onMethodEnter() {
                        loadArg(0);
                        invokeStatic(Type.getType(HookHandler.class),
                                new Method("checkDeserializationClass", "(Ljava/io/ObjectStreamClass;)V"));
                    }
                };
            }
            return mv;
        }
其中检测覆盖的反序列化类黑名单如下:
    plugin.register('deserialization', function (params, context) {
        var deserializationInvalidClazz = [
            'org.apache.commons.collections.functors.InvokerTransformer',
            'org.apache.commons.collections.functors.InstantiateTransformer',
            'org.apache.commons.collections4.functors.InvokerTransformer',
            'org.apache.commons.collections4.functors.InstantiateTransformer',
            'org.codehaus.groovy.runtime.ConvertedClosure',
            'org.codehaus.groovy.runtime.MethodClosure',
            'org.springframework.beans.factory.ObjectFactory',
            'xalan.internal.xsltc.trax.TemplatesImpl'
        ]
        var clazz = params.clazz
        for (var index in deserializationInvalidClazz) {
            if (clazz === deserializationInvalidClazz[index]) {
                return {
                    action:     'block',
                    message:    '尝试反序列化攻击',
                    confidence: 100
                }
            }
        }
        return clean
    })
#### 攻击检测
通过查看反序列化后的数据，可以看到反序列化数据开头包含两字节的魔术数字，这两个字节始终为十六进制的0xAC
ED。接下来是两字节的版本号。我只见到过版本号为5（0x00
05）的数据。考虑到zip、base64各种编码，在攻击检测时可针对该特征进行匹配请求post中是否包含反序列化数据，判断是否为反序列化漏洞攻击。
    xxxdeMacBook-Pro:demo xxx$ xxd objectexp 
        00000000: aced 0005 7372 0032 7375 6e2e 7265 666c  ....sr.2sun.refl
        00000010: 6563 742e 616e 6e6f 7461 7469 6f6e 2e41  ect.annotation.A
        00000020: 6e6e 6f74 6174 696f 6e49 6e76 6f63 6174  nnotationInvocat
        00000030: 696f 6e48 616e 646c 6572 55ca f50f 15cb  ionHandlerU.....
但仅从特征匹配只能确定有攻击尝试请求，还不能确定就存在反序列化漏洞，还要结合请求响应、返回内容等综合判断是否确实存在漏洞。
### Java反序列化漏洞修复方案
#### 通过Hook resolveClass来校验反序列化的类
通过上面序列化数据结构可以了解到包含了类的名称及serialVersionUID的ObjectStreamClass描述符在序列化对象流的前面位置，且在readObject反序列化时首先会调用resolveClass读取反序列化的类名，所以这里通过重写ObjectInputStream对象的resolveClass方法即可实现对反序列化类的校验。这个方法最早是由IBM的研究人员Pierre
Ernst在2013年提出《[Look-ahead Java
deserialization](https://www.ibm.com/developerworks/library/se-lookahead/)》，具体实现代码示例如下:
    public class AntObjectInputStream extends ObjectInputStream{
        public AntObjectInputStream(InputStream inputStream)
                throws IOException {
            super(inputStream);
        }
        /**
         * 只允许反序列化SerialObject class
         */
        @Override
        protected Class resolveClass(ObjectStreamClass desc) throws IOException,
                ClassNotFoundException {
            if (!desc.getName().equals(SerialObject.class.getName())) {
                throw new InvalidClassException(
                        "Unauthorized deserialization attempt",
                        desc.getName());
            }
            return super.resolveClass(desc);
        }
    }
通过此方法，可灵活的设置允许反序列化类的白名单，也可设置不允许反序列化类的黑名单。但反序列化漏洞利用方法一直在不断的被发现，黑名单需要一直更新维护，且未公开的利用方法无法覆盖。
[SerialKiller](https://github.com/ikkisoft/SerialKiller) 是由Luca
Carettoni利用上面介绍的方法实现的反序列化类白/黑名单校验的jar包。具体使用方法可参考其代码仓库。
[contrast-rO0](https://github.com/Contrast-Security-OSS/contrast-rO0)是一个轻量级的agent程序，通过通过重写ObjectInputStream来防御反序列化漏洞攻击。使用其中的SafeObjectInputStream类来实现反序列化类白/黑名单控制，示例代码如下:
    SafeObjectInputStream in = new SafeObjectInputStream(inputStream, true);
    in.addToWhitelist(SerialObject.class);
    in.readObject();
#### 使用ValidatingObjectInputStream来校验反序列化的类
使用Apache Commons IO
Serialization包中的ValidatingObjectInputStream类的accept方法来实现反序列化类白/黑名单控制，具体可参考[ValidatingObjectInputStream](https://commons.apache.org/proper/commons-io/javadocs/api-release/index.html)介绍；示例代码如下:
    private static Object deserialize(byte[] buffer) throws IOException,
    ClassNotFoundException , ConfigurationException {
        Object obj;
        ByteArrayInputStream bais = new ByteArrayInputStream(buffer);
        // Use ValidatingObjectInputStream instead of InputStream
        ValidatingObjectInputStream ois = new   ValidatingObjectInputStream(bais); 
        //只允许反序列化SerialObject class
        ois.accept(SerialObject.class);
        obj = ois.readObject();
        return obj;
    }
#### 使用ObjectInputFilter来校验反序列化的类
Java
9包含了支持序列化数据过滤的新特性，开发人员也可以继承[java.io.ObjectInputFilter](http://download.java.net/java/jdk9/docs/api/java/io/ObjectInputFilter.html)类重写checkInput方法实现自定义的过滤器，，并使用ObjectInputStream对象的[setObjectInputFilter](http://download.java.net/java/jdk9/docs/api/java/io/ObjectInputStream.html#setObjectInputFilter-java.io.ObjectInputFilter-)设置过滤器来实现反序列化类白/黑名单控制。示例代码如下:
    import java.util.List;
    import java.util.Optional;
    import java.util.function.Function;
    import java.io.ObjectInputFilter;
    class BikeFilter implements ObjectInputFilter {
        private long maxStreamBytes = 78; // Maximum allowed bytes in the stream.
        private long maxDepth = 1; // Maximum depth of the graph allowed.
        private long maxReferences = 1; // Maximum number of references in a graph.
        @Override
        public Status checkInput(FilterInfo filterInfo) {
            if (filterInfo.references()  maxReferences || filterInfo.depth() > maxDepth|| filterInfo.streamBytes() > maxStreamBytes) {
                return Status.REJECTED;
            }
            Class clazz = filterInfo.serialClass();
            if (clazz != null) {
                if (SerialObject.class == filterInfo.serialClass()) {
                    return Status.ALLOWED;
                }
                else {
                    return Status.REJECTED;
                }
            }
            return Status.UNDECIDED;
        } // end checkInput
    } // end class BikeFilter
上述示例代码，仅允许反序列化SerialObject类对象，上述示例及更多关于ObjectInputFilter的均参考自NCC Group
Whitepaper由Robert C. Seacord写的《[Combating Java Deserialization Vulnerabilities
with Look-Ahead Object Input Streams
(LAOIS)](https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/2017/june/ncc_group_combating_java_deserialization_vulnerabilities_with_look-ahead_object_input_streams1.pdf)》
#### 黑名单校验修复
在反序列化时设置类的黑名单来防御反序列化漏洞利用及攻击，这个做法在源代码修复的时候并不是推荐的方法，因为你不能保证能覆盖所有可能的类，而且有新的利用payload出来时也需要随之更新黑名单。
但有某些场景下可能黑名单是一个不错的选择。写代码的时候总会把一些经常用到的方法封装到公共类，这样其它工程中用到只需要导入jar包即可，此前已经见到很多提供反序列化操作的公共接口，使用第三方库反序列化接口就不好用白名单的方式来修复了。这个时候作为第三方库也不知道谁会调用接口，会反序列化什么类，所以这个时候可以使用黑名单的方式来禁止一些已知危险的类被反序列化，部分的黑名单类如下：
  * org.apache.commons.collections.functors.InvokerTransformer
  * org.apache.commons.collections.functors.InstantiateTransformer
  * org.apache.commons.collections4.functors.InvokerTransformer
  * org.apache.commons.collections4.functors.InstantiateTransformer
  * org.codehaus.groovy.runtime.ConvertedClosure
  * org.codehaus.groovy.runtime.MethodClosure
  * org.springframework.beans.factory.ObjectFactory
  * com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl
  * org.apache.commons.fileupload
  * org.apache.commons.beanutils
  * ...
#### 安全编码建议
  * 更新commons-collections、commons-io等第三方库版本；
  * 业务需要使用反序列化时，尽量避免反序列化数据可被用户控制，如无法避免建议尽量使用白名单校验的修复方式；
### 总结
关于反序列化漏洞分析及利用研究的文章不少，但鲜有检测及修复方面的介绍，本文旨站在应用安全的角度，从安全编码、代码审计、漏洞检测及修复方案对反序列化漏洞进行详细分享。希望对从事应用安全的朋友有所帮助。文中若有问题之处欢迎指出交流。
### 参考
  * 
  * 
  * 
  * 
  * 
  * 
  * 