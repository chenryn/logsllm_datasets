in our system is the oracle analysis. When taking those into
account, the ratio of the malicious pages found over the visited
pages is 0.93%, which is two orders of magnitude higher than
the crawler (0.019%).
Expansion
URLs:
Links
Site Query
Term Query
Total
Domains:
Links
Site Query
Term Query
Total
Total
Cloaked
Cloaked %
537,729
134,364
525,172
1,219,090
52,053
10,304
177,542
239,899
158,536
105,443
141,765
319,949
10,028
7,970
15,230
33,228
29.5%
78.5%
27.2%
26.2%
19.2%
77.3%
8.6%
13.8%
ranged from 1.21% for 2-grams to 5.83% for 5-grams. In
hindsight, this is not too surprising. The reason is that smaller
n-grams are typically found on a larger number of pages.
Thus, when we assume that a malware distribution campaign
has compromised a certain number of pages, shorter n-grams
means that more pages will compete for the top spots in the
search engine rankings.
Although longer n-grams are typically better, it is interesting
to observe that the ﬁrst ten most-successful dorks in term of
toxicity were ﬁve 2-grams and ﬁve 3-grams, with the ﬁrst
two positions taken by “Centralized Admission Policy” and
“calendar about pregnancy.” The former trigram led to the
discovery of many compromised pages hosted at a Pakistani
university. The latter trigram can be found in the payload of a
large injection campaign, with more than 750 compromised
domains still listed on Bing at the time of writing, including
about.com (65th in the Alexa top domains) and several
.edu domains. The injected page is used for search engine
optimization; it contains thousands of terms that are likely
to be ranked highly in search engines. When visited, the
page redirects to a malicious URL. The third most successful
n-gram was “Gyj (SND) {var” with 19 malicious pages
detected. This is part of a JavaScript snippet (function
Gyj(SND){var) that is used in an injection campaign.
Google reports 304 active pages, of which about half have
been blacklisted by Google Safe Browsing.
Table IV
CLOAKING DETECTION RESULTS
D. Links Gadget
Table IV provides the results of cloaking detection on all
the URLs tested by the SEO gadget. Overall, 26.2% of the
URLs tested were in fact cloaked, and 7.3% of the domains
tested hosted at least one cloaked URL. The percentage is
lower for domains because, as we observed in Section III-C,
each domain in a blackhat SEO campaign hosts large numbers
of pages optimized for different search terms.
The tables also show the performance of the various
expansion strategies used by the SEO gadget. Only 4% of
the total URLs were produced by more than one of the three
expansion strategies. Site queries, where we search for other
websites hosted on the same domain as a seed URL, had the
best performance, with 77.3% cloaked URLs. However, such
queries clearly cannot expand to previously unknown malicious
domains. The remaining strategies have similar performance
at around 30% cloaked URLs, but the term queries strategy
provides larger numbers of distinct domains. For comparison,
the last row shows the cloaking detection results on URLs
obtained by querying for Google and Twitter trends topics:
Only 0.2% of the tested URLs were cloaked.
C. Content Dorks Gadget
We found that the most inﬂuential factor for the success
of a content dorks gadget is n, the length of the n-gram. In
particular, we found that the toxicity for the results of queries
We have observed three main categories of sites that have
been used by the Links Gadget to locate malicious content.
The ﬁrst one is unmaintained web sites. As an example, the
URL http://www.irkutsk.org/cgiapps/guestbook/guestbook.html
leads to a guestbook that has been active for almost ten years.
This guestbook contains 286 spam comments, 12 of which
have been found malicious by our oracles.
The second category is domains that publish black-
lists of malicious domains (e.g., http://www.mwis.ru and
http://urlquery.net). The advantage here is that this gadget
can automatically discover and parse these sources.
The last category is domains that list some additional
information about a domain. For example, http://calimartec.info
lists, for a given domain, the domains that are co-located on
the same IP, the domain hosted in the same subnet, and the
domains that have a similar spelling.
E. Domain Registrations Gadget
Starting from the 13th of November 2010, we collected a
year’s worth of domain registrations for the top-level domains
.COM., .NET., .ORG., .INFO. and .US (a total of 16, 663, 616
domains). During this time period, the Domain Registrations
Gadget identiﬁed malicious URLs on 10, 435 domains using
1, 002 domains as seeds. We can now revisit our hypothesis
that malicious domains are registered close in time to each
other. Let us now consider the probability P that, given that we
438
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:16 UTC from IEEE Xplore.  Restrictions apply. 
Seeds
Visited
Cloaked
Analyzed Malicious
Toxicity Malicious
Visited
Expansion
URLs
Domains
248
46
1,219,090
177,542
319,949
15,230
11,384
8,763
94.37%
94.53%
0.93%
4.93%
45.90
190.5
12,063
9.270
Table III
CLOAKING DETECTION RESULTS
domains queried in the trace: During this time, compromised
pages may have been cleaned up or removed from search
engine indexes. For the future, we intend to run the gadget in
parallel to the DNS data collection.
V. Discussion and Limitations
Security analysis. Our results have shown that EVILSEED
is effective at ﬁnding malicious content on the web starting
from an initial seed of malicious pages. However, an attacker
might try to prevent EVILSEED from ﬁnding and detecting
malicious pages. The most radical approach would be to make
sure that these pages are not indexed by search engines in the
ﬁrst place. This can easily be achieved by an attacker who
has full control of an exploited website and can restrict bot
access using robots.txt. On the other hand, this approach
may not be possible for cases where the attacker is able to
inject malicious content into a page, but does not have any
additional privileges on the exploited site. A more signiﬁcant
problem with this evasion approach, however, is that malicious
web sites often receive the bulk of their visitors from search
engines, so de-listing them would vastly reduce the number
of potential victims (this is particularly evident in the case of
pages of SEO campaigns).
Attackers could also try to perform evasion attacks against
the detection techniques employed by our oracle (Wepawet, our
custom fake AV page detector, and the Safe Browsing system).
This problem is orthogonal to the techniques presented in
this paper. In addition, our tool can be combined with any
other oracle for the detection of malicious web pages, thus
increasing the difﬁculty of evasion attempts.
Seed quality. The effectiveness of our gadgets is dependent
on the quality and diversity of the malicious seed that they
use as input. In the worst case, if the seed completely lacked
a particular class of malicious pages, our gadgets would not
be able to automatically generate search queries leading to
such pages. To minimize this risk, we rely on a collection of
malicious pages that is as large as possible, and we refresh it
frequently. We can obtain input pages from external sources,
such as Wepawet and public repositories of web malware,
e.g., the malwaredomainlist.com forum, which are constantly
updated. Wepawet currently ﬂags several thousand new pages
per month, and the malwaredomainlist.com database has
increased by about 500–4,000 entries every month since 2010.
Results over time. To be useful in practice, EVILSEED needs
to be able to provide a constant stream of high-quality candidate
URLs, rather than exhausting its effect after one or few runs.
The number of candidate URLs identiﬁed by a single query
is limited by the maximum number of results that a search
439
Figure 4. Consecutive registrations of malicious domains.
know that a particular domain registration is malicious, at least
one of the registrations that come immediately before or after
it (in chronological order) is also malicious. Given the scarcity
of malicious domains (0.1% of the total domains), if the
events “domain is malicious” and “domain has been registered
before/after a known malicious domain” were independent,
P would be 0.19%. The empirical evidence of the collected
data, instead, shows that these events are correlated, as P is
empirically equal to 7.51% (see Figure 4). Therefore, we
can conclude that the domains that have been registered
immediately before and after a known malicious domain are
much more likely (more than 35 times more likely) to also
serve malicious content.
F. DNS Queries Gadget
To test the DNS queries gadget, an Internet Service Pro-
vider (ISP) gave us access to a DNS trace collected from its
network during 43 days in February and March 2011. The trace
contained 377,472,280 queries sent by approximately 30,000
clients to one nameserver. The trace was made available to us
only at the end of this collection period, which, unfortunately,
introduced a signiﬁcant delay between the collection of data
and the time when the gadget was run.
As our seed, we considered 115 known, malicious domains
that were queried at least once in the trace. From these, our
gadget generated 4,820 candidate URLs (on 2,473 domains),
of which 171 URLs (on 62 domains) were determined to be
malicious by our oracles. Of the 115 malicious domains that
were used by our gadget, only 25 were indeed “effective,” i.e.,
led to the discovery of a malicious URL. The most effective
domain guided the gadget to locate 46 malicious URLs on 16
different servers; 21 domains led to the discovery of multiple
malicious URLs.
We speculate that the delay between recording the query
events and analyzing them with our gadget may explain why
no malicious URLs were identiﬁed for 90 of the malicious
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:16 UTC from IEEE Xplore.  Restrictions apply. 
!"!#"!##"!$###"!#$###"!##$###"!"%"&"'"(")"*"+","!#"!!"!%"!&"!'"!("!)"!*"!+"!,"%#"%!"%%"!"#$%&'()'*%+"%,-%*'.%,/01'()'01%'*%+"%,-%'engine will return for this query. To obtain more results, we
could borrow a technique used by cybercriminals, and reﬁne
the queries we issue with additional keywords, to elicit different
result sets from a search engine. For instance, results from
John et al. [12] show that attackers add restrictions such as
site:.com to their dorks, for different top level domains.
Moreover, as our results from running EVILSEED in online
mode have demonstrated (see Section IV-A), even a small
number of new seeds can be expanded into a signiﬁcant number
of additional, malicious pages. Thus, EVILSEED can be run
continuously alongside a traditional detection system (such
as Wepawet), discovering a signiﬁcant number of additional,
malicious URLs for each new seed that Wepawet ﬁnds.
Performance/scalability. The bottleneck of EVILSEED is
the cost of performing in-depth analysis with an oracle. For
example, Wepawet can process only about 100K URLs per day
(one URL takes about one minute). Currently, EVILSEED runs
on two ordinary servers: one runs the crawler, the other the
gadgets. Each search engine query returns tens of results, and
one machine can easily perform 10K searches per day without
getting rate-limited. This allows us to gather 100K URLs per
search engine. A single web crawling host can retrieve millions
of pages. This underlines the critical importance of feeding
the oracle (bottleneck) with pages of high toxicity.
Deployment. Search engines could deploy EVILSEED. This
might diminish its effectiveness. However, it also mean that
the vectors that EVILSEED targets were mitigated; we consider
this a success. Moreover, researchers with limited resources
can still deploy EVILSEED, harnessing search engines that
ﬁlter results more naively. A good candidate for this is Yacy,
which is a distributed crawling effort that strives to build a
search engine with no ﬁlters. Also, search engines might be
interested in offering to researchers an access to unﬁltered
results.
So far, we have presented EVILSEED from the point of
view of these researchers, because we belong to this group
ourselves: in fact, EVILSEED was born as a solution to the
problems we were facing in collecting malware samples.
However, we believe that EVILSEED can be beneﬁcial also to
search engines. EVILSEED “guided search” will not provide
search engines any performance gain in the crawling phase, as
they would still incur in the full crawling cost to build their
index: in fact, they provide the crawling infrastructure that the
small players deploying EVILSEED opportunistically leverage.
Instead, EVILSEED’s main contribution in the eye of search
engines are the new features we propose: by adding them to
their preﬁlters, search engines can select URLs candidates
that need in-depth analysis more timely, keeping more of their
users safe from malware. Also, a page selected by EVILSEED
is more likely to be malicious, thus improving the preﬁlter
efﬁciency. This is because the features identiﬁed by EVILSEED
and the preﬁlter are considering different aspects: EVILSEED
looks at the “neighborhood” of the candidate page, while the
preﬁlter looks at particular features of the page (e.g., javascript
obfuscation). Many details about the search engines’ ﬁltering
techniques are conﬁdential, so we cannot provide conclusive
proof that these features are not already in use. However,