### Oracle Analysis and Malicious Page Detection

In our system, the oracle analysis is a critical component. When considering the results, the ratio of malicious pages detected to the total number of visited pages is 0.93%, which is two orders of magnitude higher than the crawler (0.019%).

#### URL Expansion
- **Links**: 537,729
- **Site Query**: 134,364
- **Term Query**: 525,172
- **Total URLs**: 1,219,090

#### Domain Expansion
- **Links**: 52,053
- **Site Query**: 10,304
- **Term Query**: 177,542
- **Total Domains**: 239,899

- **Cloaked URLs**: 158,536
- **Cloaked Domains**: 105,443
- **Total Cloaked**: 141,765
- **Total Detected**: 319,949

- **Toxicity**:
  - **URLs**: 10,028
  - **Domains**: 7,970
  - **Total Toxic**: 15,230

- **Cloaking Percentage**:
  - **URLs**: 29.5%
  - **Domains**: 78.5%

### N-gram Analysis
The toxicity of n-grams ranged from 1.21% for 2-grams to 5.83% for 5-grams. This is not surprising because smaller n-grams are typically found on a larger number of pages. When a malware distribution campaign compromises a certain number of pages, shorter n-grams mean that more pages will compete for the top spots in search engine rankings.

Although longer n-grams are generally more effective, it is interesting to note that the first ten most successful dorks in terms of toxicity were five 2-grams and five 3-grams. The top two dorks were "Centralized Admission Policy" and "calendar about pregnancy." The former trigram led to the discovery of many compromised pages hosted at a Pakistani university. The latter trigram was found in the payload of a large injection campaign, with over 750 compromised domains still listed on Bing at the time of writing, including about.com (ranked 65th in the Alexa top domains) and several .edu domains. The injected page is used for search engine optimization, containing thousands of highly ranked terms. When visited, the page redirects to a malicious URL. The third most successful n-gram was "Gyj (SND) {var}" with 19 malicious pages detected. This is part of a JavaScript snippet (function Gyj(SND){var) used in an injection campaign. Google reports 304 active pages, of which about half have been blacklisted by Google Safe Browsing.

### Cloaking Detection Results
Table IV provides the results of cloaking detection on all the URLs tested by the SEO gadget. Overall, 26.2% of the URLs tested were cloaked, and 7.3% of the domains tested hosted at least one cloaked URL. The percentage is lower for domains because each domain in a blackhat SEO campaign hosts large numbers of pages optimized for different search terms.

The tables also show the performance of the various expansion strategies used by the SEO gadget. Only 4% of the total URLs were produced by more than one of the three expansion strategies. Site queries, where we search for other websites hosted on the same domain as a seed URL, had the best performance, with 77.3% cloaked URLs. However, such queries cannot expand to previously unknown malicious domains. The remaining strategies have similar performance at around 30% cloaked URLs, but the term queries strategy provides a larger number of distinct domains. For comparison, the last row shows the cloaking detection results on URLs obtained by querying for Google and Twitter trends topics: only 0.2% of the tested URLs were cloaked.

### Content Dorks Gadget
We found that the most influential factor for the success of a content dorks gadget is the length of the n-gram (n). Specifically, the toxicity for the results of queries increases with the length of the n-gram.

### Links Gadget
We observed three main categories of sites used by the Links Gadget to locate malicious content:

1. **Unmaintained Websites**: For example, the URL http://www.irkutsk.org/cgiapps/guestbook/guestbook.html leads to a guestbook that has been active for almost ten years and contains 286 spam comments, 12 of which were found to be malicious by our oracles.
2. **Blacklist Domains**: Domains that publish blacklists of malicious domains (e.g., http://www.mwis.ru and http://urlquery.net). The advantage here is that this gadget can automatically discover and parse these sources.
3. **Informational Domains**: Domains that list additional information about a domain, such as co-located IP addresses, subnets, and similar spellings (e.g., http://calimartec.info).

### Domain Registrations Gadget
Starting from November 13, 2010, we collected a year's worth of domain registrations for the top-level domains .COM, .NET, .ORG, .INFO, and .US (a total of 16,663,616 domains). During this period, the Domain Registrations Gadget identified malicious URLs on 10,435 domains using 1,002 domains as seeds. We revisited our hypothesis that malicious domains are registered close in time to each other. Given the scarcity of malicious domains (0.1% of the total), if the events "domain is malicious" and "domain has been registered before/after a known malicious domain" were independent, the probability P would be 0.19%. The empirical evidence shows that these events are correlated, with P empirically equal to 7.51%. Therefore, we can conclude that domains registered immediately before and after a known malicious domain are much more likely (more than 35 times more likely) to also serve malicious content.

### DNS Queries Gadget
To test the DNS queries gadget, an Internet Service Provider (ISP) provided us with a DNS trace collected from its network during 43 days in February and March 2011. The trace contained 377,472,280 queries sent by approximately 30,000 clients to one nameserver. As our seed, we considered 115 known, malicious domains that were queried at least once in the trace. From these, our gadget generated 4,820 candidate URLs (on 2,473 domains), of which 171 URLs (on 62 domains) were determined to be malicious by our oracles. Of the 115 malicious domains used by our gadget, only 25 were indeed "effective," leading to the discovery of multiple malicious URLs. The delay between recording the query events and analyzing them with our gadget may explain why no malicious URLs were identified for 90 of the malicious domains.

### Discussion and Limitations

#### Security Analysis
Our results show that EVILSEED is effective at finding malicious content on the web starting from an initial seed of malicious pages. However, an attacker might try to prevent EVILSEED from finding and detecting malicious pages. The most radical approach would be to ensure that these pages are not indexed by search engines in the first place. This can be achieved by restricting bot access using robots.txt. On the other hand, this approach may not be possible for cases where the attacker injects malicious content into a page but does not have additional privileges on the exploited site. A more significant problem with this evasion approach is that malicious websites often receive the bulk of their visitors from search engines, so de-listing them would reduce the number of potential victims.

Attackers could also try to perform evasion attacks against the detection techniques employed by our oracles (Wepawet, our custom fake AV page detector, and the Safe Browsing system). This problem is orthogonal to the techniques presented in this paper. Our tool can be combined with any other oracle for the detection of malicious web pages, thus increasing the difficulty of evasion attempts.

#### Seed Quality
The effectiveness of our gadgets depends on the quality and diversity of the malicious seed. In the worst case, if the seed lacks a particular class of malicious pages, our gadgets would not be able to generate search queries leading to such pages. To minimize this risk, we rely on a large and frequently refreshed collection of malicious pages from external sources, such as Wepawet and public repositories of web malware (e.g., malwaredomainlist.com forum).

#### Results Over Time
To be useful in practice, EVILSEED needs to provide a constant stream of high-quality candidate URLs. The number of candidate URLs identified by a single query is limited by the maximum number of results that a search engine will return. To obtain more results, we could refine the queries with additional keywords, as cybercriminals do. Even a small number of new seeds can be expanded into a significant number of additional, malicious pages. Thus, EVILSEED can be run continuously alongside a traditional detection system, discovering a significant number of additional, malicious URLs for each new seed.

#### Performance and Scalability
The bottleneck of EVILSEED is the cost of performing in-depth analysis with an oracle. For example, Wepawet can process only about 100K URLs per day (one URL takes about one minute). Currently, EVILSEED runs on two ordinary servers: one runs the crawler, the other the gadgets. Each search engine query returns tens of results, and one machine can easily perform 10K searches per day without getting rate-limited. This allows us to gather 100K URLs per search engine. A single web crawling host can retrieve millions of pages. This underlines the critical importance of feeding the oracle (bottleneck) with pages of high toxicity.

#### Deployment
Search engines could deploy EVILSEED, which might diminish its effectiveness. However, it would also mean that the vectors targeted by EVILSEED were mitigated, which we consider a success. Researchers with limited resources can still deploy EVILSEED, harnessing search engines that filter results more naively. A good candidate for this is Yacy, a distributed crawling effort that strives to build a search engine with no filters. Search engines might also be interested in offering researchers access to unfiltered results.

So far, we have presented EVILSEED from the perspective of researchers, as it was born as a solution to the problems we faced in collecting malware samples. However, we believe that EVILSEED can also benefit search engines. By adding the features proposed by EVILSEED to their pre-filters, search engines can select URLs that need in-depth analysis more timely, keeping more of their users safe from malware. A page selected by EVILSEED is more likely to be malicious, thus improving the pre-filter efficiency. This is because EVILSEED looks at the "neighborhood" of the candidate page, while the pre-filter looks at specific features of the page (e.g., JavaScript obfuscation).