𝑐 (𝑖)
given the authenticity of the garbled circuit scheme, this second
execution of the prover will be successful with probability at least
𝜌′ = 𝜌 − AdvauthGC (𝜅). If the prover is not successful after the fork, B
will try again with a different value of 𝛿2 until the prover succeeds.
By the Forking Lemma (Appendix A.3), in expected time 𝑂(𝜏𝑞/𝜌′2),
1) and (𝑠2, 𝑡2, 𝑡′
the adversary will obtain values (𝑠1, 𝑡1, 𝑡′
2) such that:
𝐴) = (𝑠1 − 𝑠∗) 𝐴 + 𝑡′
𝑖=1 2𝑖−1𝑧(𝑖)
com = 𝑠1 𝐴 + 𝑡1 𝑃
1𝑃
𝐴) = (𝑠2 − 𝑠∗) 𝐴 + 𝑡′
𝑖=1 2𝑖−1𝑧(𝑖)
com = 𝑠2 𝐴 + 𝑡2 𝑃
2𝑃 .
Now, if 𝑠1 ≠𝑝 𝑠2, the discrete logarithm of 𝐴 can be extracted as
𝑎 (cid:66) (𝑡2 − 𝑡1)/(𝑠1 − 𝑠2). Otherwise, let 𝑠 (cid:66) 𝑠1 (=𝑝 𝑠2), and assume
that 𝑠 ≠𝑝 𝑠∗. We have,
1 ( ˆ𝐵 −𝑛
2 ( ˆ𝐵 −𝑛
0 = 𝛿2 + 𝐻(𝑍 (𝑖)
𝛿-1
𝛿-1
𝑠∗
𝑠∗
𝑖
𝑖
𝛿1(𝑠 − 𝑠∗) 𝐴 + 𝛿1𝑡′
1 𝑃 = 𝛿2(𝑠 − 𝑠∗) 𝐴 + 𝛿2𝑡′
2 𝑃 ,
so we can extract the discrete logarithm of 𝐴 as
𝑎 (cid:66)
𝛿2𝑡′
2 − 𝛿1𝑡′
1
(𝛿1 − 𝛿2)(𝑠 − 𝑠∗)
.
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA649FCOT (choose, {𝑥𝑖}𝑖∈[𝑚])
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−→
{𝑐 (𝑖)
0 , 𝑐 (𝑖)
1 }𝑖∈[𝑛]
GC, FCOT (transfer, {𝐿(𝑖)
𝑥𝑖 }𝑖∈[𝑚])
←−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Verifier(com, 𝐴, 𝑓 )
Garble(1𝜅, 𝑓 ) →
(GC, {𝐿(𝑖)
1 }𝑖∈[𝑚], {𝑍 (𝑖)
0 , 𝐿(𝑖)
0 ←$ Z𝑝 and set 𝑧(𝑖)
∀𝑖 ∈ [𝑛], 𝑧(𝑖)
∀𝑏 ∈ {0, 1}, ∀𝑖 ∈ [𝑛], 𝑐 (𝑖)
𝑏 (cid:66) 𝑧(𝑖)
1 }𝑖∈[𝑛])
0 , 𝑍 (𝑖)
0 +𝛿
1 (cid:66) 𝑧(𝑖)
𝑏 + 𝐻(𝑍 (𝑖)
𝑏 )
ˆ𝐵
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−→
𝛿, FCOT (open-all), {𝑍 (𝑖)
1 }𝑖∈[𝑛]
←−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
0 , 𝑍 (𝑖)
compute 𝐵 (cid:66) 𝛿-1(cid:16) ˆ𝐵 −𝑛
0 𝐴(cid:17)
𝑖=1 2𝑖−1𝑧(𝑖)
Prover(com, 𝐴, 𝑓 , 𝑠, 𝑥, 𝑡)
(s.t. com = 𝑠 𝐴 + 𝑡 𝑃 ∧ 𝑓 (𝑥) = 𝑠)
{ ˆ𝑍 (𝑖)
𝑠𝑖 }𝑖∈[𝑛] ← Eval(GC, {𝐿(𝑖)
∀𝑖 ∈ [𝑛], set ˆ𝑧(𝑖)
𝑠𝑖
sample ˆ𝑡 ←$ Z𝑝; compute ˆ𝐵 (cid:66) ˆ𝑡 𝑃 +𝑛
𝑥𝑖 }𝑖∈[𝑚])
𝑠𝑖 − 𝐻( ˆ𝑍 (𝑖)
𝑠𝑖 )
𝑖=1 2𝑖−1 ˆ𝑧(𝑖)
(cid:66) 𝑐 (𝑖)
𝑠𝑖
𝐴
set ˆ𝑧(𝑖)¬𝑠𝑖 = ˆ𝑧(𝑖)
abort if Verify(GC, 𝑓 , {𝐿(𝑖)
1 }, {𝑍 (𝑖)
0 , 𝐿(𝑖)
or ∃𝑖 ∈ [𝑛], 𝑏 ∈ {0, 1} : 𝑐 (𝑖)
𝑏 ≠𝑝 𝑧(𝑖)
𝑠𝑖 +(-1)𝑠𝑖 𝛿, ∀𝑖 ∈ [𝑛] and 𝑡′ (cid:66) 𝛿-1ˆ𝑡
1 }) = 0
0 , 𝑍 (𝑖)
𝑏 )
𝑏 + 𝐻(𝑍 (𝑖)
←−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−→
PoK(cid:8)(𝑠, 𝑡, 𝑡′) : com = 𝑠 𝐴 + 𝑡 𝑃 ∧ 𝐵 = 𝑠 𝐴 + 𝑡′𝑃(cid:9)
accept iff PoK is accepting
Figure 4: Description of our protocol for hybrid statements for PoK {(𝑠, 𝑥, 𝑡) : com = 𝑠 𝐴 + 𝑡 𝑃 ∧ 𝑓 (𝑥) = 𝑠}, where 𝐴, com ∈ 𝐺 for
a group (of order 𝑝), generated by 𝑃, circuit 𝑓 : {0, 1}𝑚 → {0, 1}𝑛, and function 𝐻 : {0, 1}∗ → Z𝑝.
When 𝜏 is polynomial in the security parameter and 𝜌 is non-
negligible, our adversary B runs in expected polynomial time. This
completes the proof.
□
5 IMPLEMENTATION
We implement a general library for zero-knowledge proofs on arith-
metic circuits combined with algebraic statements, based on our
protocol from Figure 4. Our library is written in C/C++17 (compiled
using the g++ compiler from GCC) and uses the Relic-Toolkit [3]
for elliptic curves and the EMP-Toolkit [43] for garbled circuits and
committing oblivious transfer. Our code is publicly available and
open source for reproducibility and verifiability.6
In this section, we present the implementation details and mea-
surements of our library applied to the construction of an infor-
mation CP system for various purposes. In particular, we explore
the application of selling an ECDSA signature or RSA signature
on an agreed message. In Sections 5.1 and 5.2 we propose two
methods to argue (in zero-knowledge) knowledge of an ECDSA
or RSA signature (respectively) by showing the knowledge of a
discrete logarithm. Therefore these methods can be instantiated
very efficiently using the celebrated Schnorr sigma-protocol [40].
In all cases, we assume the seller (the prover) has encrypted
the secret 𝑠 to be sold under some key 𝑘, producing a ciphertext
𝑐 ← Enc𝑘(𝑠), computed 𝑦 (cid:66) SHA(𝑘) and shared both values (𝑐, 𝑦)
with the buyer (the verifier). The seller then committed to the secret
𝑠 as com = 𝑠 𝐴 + 𝑡 𝑃, for some 𝑡 chosen uniformly at random, where
𝐴 is an EC group element with unknown dlog (at least, unknown
to the seller, 𝐴 may be chosen by the verifier).
Our implementation consists of the computation of the previous
values and the execution of the protocol from Figure 4, so that
the verifier gets convinced about the fact that the value the seller
committed to in com is the output of circuit 𝑓(𝑐,𝑦) on some input
6Source code at https://github.com/security-kouza/cont-pay.
(on 𝑘), where 𝑓 is defined as:
𝑓(𝑐,𝑦)(𝑘) (cid:66) Dec𝑘(𝑐) if 𝑦 = SHA(𝑘) else ⊥ .
They will then execute an algebraic protocol where the prover
convinces the verifier about the fact that com contains a valid
(ECDSA or RSA) signature. In the next sections we describe how
these algebraic protocols can be implemented as knowledge of a
discrete logarithm.
𝑥 = 𝑟
5.1 ECDSA Signatures
First we recall the definition of ECDSA signatures. Key generation
selects an elliptic curve of order 𝑝 with generator 𝑃, samples 𝑑 ←$ Z𝑝
and produces (PK, SK) (cid:66) (𝑄, 𝑑), where 𝑄 = 𝑑 𝑃.
Sign(SK, 𝑚) :
Verify(PK, 𝑚, (𝑟, 𝑠)) :
𝐾′ (cid:66) 𝑠-1·SHA(𝑚) 𝑃 + 𝑠-1·𝑟 𝑄
accept iff 𝐾′
𝑘 ←$ Z𝑝
𝐾 (cid:66) 𝑘𝑃 (cid:66) (𝑟, 𝐾𝑦)
𝑠 =𝑝 𝑘-1 (SHA(𝑚) + 𝑟·𝑑)
output (𝑟, 𝑠)
We propose a very efficient algebraic method to prove knowl-
edge of an ECDSA signature. This method is not completely zero-
knowledge in the sense that it reveals the first component of the
signature 𝑟, whereas it is zero-knowledge for the second compo-
nent. Such a method can still be useful to perform fair-exchange
of a ECDSA signature, in scenarios where the signature is freshly
generated (in those scenarios, 𝑟 can be simulated by just taking the
𝑥 coordinate of elliptic curve point chosen uniformly at random).
More concretely, after computing a signature (𝑟, 𝑠) on an agreed
message 𝑚, the prover can share 𝐾 (sampled during the signature
generation) with the verifier and perform the zero-knowledge proof
(the prover can use 𝑠-1 as the witness 𝑤):
PoK {(𝑤) : 𝐾 = 𝑤 (SHA(𝑚) 𝑃 + 𝐾𝑥 𝑄)} .
(4)
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA650Observe that the knowledge of 𝐾 and such a 𝑤 implies the knowl-
edge of an ECDSA signature for message 𝑚: (𝐾𝑥, 𝑤-1).
Prover(𝑠, 𝑡, 𝑡′) :
Verifier:
5.2 RSA Signatures
Apart from the information CP system to sell ECDSA signatures,
we also experiment with the Full Domain Hash RSA signature
scheme [10]. We first recall the scheme specifications. On input 𝜅
as a security parameter, the key generation chooses two 𝜅-bit primes
𝑝, 𝑞, computes 𝑁 (cid:66) 𝑝𝑞 and selects some 𝑒 ∈ Z∗
𝜑(𝑁 ), where 𝜑 repre-
sents Euler’s totient function. It then computes 𝑑 (cid:66) 𝑒-1 (mod 𝜑(𝑁)),
and the public key is defined as PK = (𝑁 , 𝑒), whereas the secret key
is set to SK = 𝑑. Let 𝐻 : {0, 1}∗ → Z∗
𝑁 . The signing and verification
procedures are as follows.
Sign(SK, 𝑚) :
ℎ (cid:66) 𝐻(𝑚)
𝜎 (cid:66) ℎ𝑑 (mod 𝑁 )
output 𝜎
Verify(PK, 𝑚, 𝜎) :
ℎ (cid:66) 𝐻(𝑚)
accept iff ℎ =𝑁 𝜎𝑒
In order to prove in zero-knowledge the knowledge of an RSA
signature 𝜎 on an agreed message 𝑚 (let ℎ = 𝐻(𝑚)), the parties
can proceed as follows. The seller will sample 𝑟 ←$ Z𝑁 , compute
𝛼 (cid:66) ℎ𝑟 (mod 𝑁 ) and send 𝑡 (cid:66) 𝜎𝛼 (mod 𝑁 ), to the buyer. Since the
distribution of 𝛼 is statistically close to the uniform distribution
over the subset of Z𝑁 generated by ℎ, 𝛼 acts as a blinding factor
on the signature 𝜎 (which lives in the same subgroup). The prover
now performs a zero-knowledge proof of:
PoK(cid:8)(𝑟) : (𝑡𝑒/ℎ) =𝑁 (ℎ𝑒)𝑟(cid:9) .
(5)
Observe that the knowledge of dlog 𝑟 of (𝑡𝑒/ℎ) in base (ℎ𝑒)
implies the knowledge of a valid signature for 𝑚. More precisely,
one could compute a signature 𝜎 as 𝑡ℎ−𝑟 (mod 𝑁 ), since
𝜎𝑒 =𝑁 (𝑡ℎ−𝑟)𝑒 =𝑁 𝑡𝑒(ℎ𝑒)−𝑟 =𝑁 𝑡𝑒ℎ/𝑡𝑒 =𝑁 ℎ = 𝐻(𝑚) .
Remark 6. Observe that this protocol can be applied to scenar-
ios where the signed message is known to both parties. In those
cases, the relation to be proven is between signature 𝜎 and element
ℎ. Therefore, the full domain hash or, alternatively, the encoding
scheme like PKCS#1 padding or PSS encoding (used to convert a bit-
string message into integer ℎ) is not important for the application
of this protocol.
5.3 Linking with the CP functionality
Observe that both in the case of ECDSA signatures and RSA sig-
natures, we have reduced the problem of proving knowledge of a