title:HERCULE: attack story reconstruction via community discovery on
correlated log graph
author:Kexin Pei and
Zhongshu Gu and
Brendan Saltaformaggio and
Shiqing Ma and
Fei Wang and
Zhiwei Zhang and
Luo Si and
Xiangyu Zhang and
Dongyan Xu
HERCULE: Attack Story Reconstruction via Community
Discovery on Correlated Log Graph
Kexin Pei(cid:2), Zhongshu Gu‡, Brendan Saltaformaggio†, Shiqing Ma†, Fei Wang†,
Zhiwei Zhang†, Luo Si†, Xiangyu Zhang†, Dongyan Xu†
(cid:2)Columbia University, PI:EMAIL
‡IBM T.J. Watson Research Center, PI:EMAIL
†Purdue University, {bsaltafo, ma229, feiwang, zhan1187, lsi, xyzhang, dxu}@cs.purdue.edu
ABSTRACT
Advanced cyber attacks consist of multiple stages aimed at
being stealthy and elusive. Such attack patterns leave their
footprints spatio-temporally dispersed across many diﬀer-
ent logs in victim machines. However, existing log-mining
intrusion analysis systems typically target only a single type
of log to discover evidence of an attack and therefore fail
to exploit fundamental inter-log connections. The output of
such single-log analysis can hardly reveal the complete attack
story for complex, multi-stage attacks. Additionally, some
existing approaches require heavyweight system instrumenta-
tion, which makes them impractical to deploy in real produc-
tion environments. To address these problems, we present
HERCULE, an automated multi-stage log-based intrusion
analysis system.
Inspired by graph analytics research in
social network analysis, we model multi-stage intrusion anal-
ysis as a community discovery problem. HERCULE builds
multi-dimensional weighted graphs by correlating log entries
across multiple lightweight logs that are readily available on
commodity systems. From these, HERCULE discovers any
“attack communities” embedded within the graphs. Our eval-
uation with 15 well known APT attack families demonstrates
that HERCULE can reconstruct attack behaviors from a
spectrum of cyber attacks that involve multiple stages with
high accuracy and low false positive rates.
1.
INTRODUCTION
Emerging cyber attack campaigns (e.g., enterprise-wide
APT) exhibit “low-and-slow” attack patterns: attackers con-
duct reconnaissance and move laterally within a network
via many stealthy multi-stage payloads. One annual report
published by FireEye [18] highlighted that attackers may
reside in a victim’s environment for up to 205 days before
being discovered. Importantly, the covert nature of these
attacks is derived from their deliberately small footprints on
each aﬀected system.
Our analysis of the attacks spanning 15 well known cy-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05 - 09, 2016, Los Angeles, CA, USA
c(cid:2) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991122
ber attack families [3, 8, 9, 12, 21, 24, 28, 47–50, 61] (Section
4) shows that the stages of a single attack will often span
many users, processes, and systems. Typically, the initial
stage of a successful penetration is a social engineering cam-
paign (e.g., a phishing email), watering-hole attack [3], or
trojaned software or unoﬃcial patch containing malicious
payloads [9, 21, 24, 47–49, 61]. After gaining a foothold in the
network, reconnaissance payloads will be deployed, include
Command and Control (C&C) channels, stealing passwords,
or exploiting vulnerabilities to escalate privilege. In later
stages, attackers slowly move throughout the network [8]
seeking opportunities to exﬁltrate conﬁdential information,
eavesdrop on communications, or interrupt critical services.
Unfortunately, any footprints left by such multi-stage at-
tack pattern are spatio-temporally dispersed across many
separate logs on diﬀerent victims’ machines. For instance,
downloading a trojaned executable may leave evidence in
the web browser’s log, but accessing conﬁdential ﬁles may
only be revealed in the system audit log. Further, ﬁne-
grained on-host provenance logging systems [29, 36, 40] are
still rarely deployed on end-user systems. Therefore, piec-
ing together the contextual information of eachmalicious
footprint (scattered across many disconnected sources) still
demands signiﬁcant eﬀort from cyber investigators.
To date, most existing log-based intrusion analysis and
detection systems have the following three limitations: (1)
Lacking the panoramic view required to understand the wh-
ole attack trace due to their focus on only single log types.
For example, network intrusion analysis techniques [14, 51]
leverage deep packet inspection or packet headers from a
single network log, such as a DNS log or an HTTP proxy log.
Other systems [29, 33, 34, 36, 40] perform host-based analysis
on a system’s audit log, such as a Windows event log. (2)
The log collection process relies on logging systems that re-
quire heavyweight instrumentation, which incurs non-trivial
performance overhead. For example, to achieve ﬁne-grained
system call level traces of an attack, Gu et al. [27] perform
heavyweight event tracing for Windows (ETW) logging [15].
Yin et al. [64] use whole-system ﬁne-grained tracking to
detect and analyze privacy-breaching malware. Other ap-
proaches [29,30,33,34,36,46] perform static/dynamic analysis
to obtain execution models or control ﬂow graphs. While
shown to be ﬁne-grained, their substantial overhead limits
their applicability to the real-world environment. (3) Too
many uncorrelated alerts may be either deemed false positives
or overlooked by system administrators [1]. They provide
neither much actionable intelligence nor enough attack evi-
583Second Stage: 
Maintaining Persistence, 
Updates Codes and Tools
Tainted Log Entry
Third Stage: Moving 
Laterally, Exfiltration 
Sensitive Data
Attack-related 
community
First Stage: 
Reconnaissance 
Launch the Attack and 
Infect Target Hosts
Multidimensional vector
d1 d2 d3 d4 (cid:171) dn
1 0 1 0(cid:171) 0
Figure 1: Attack stages and correlated log entries.
dence. For instance, a single log entry of “user failed to login”
is a potential indicator of a compromise, but by correlating
with other alerts, such as suspicious reverse TCP activity,
investigators can (manually) piece together an attacker’s
footprints.
In light of the above three limitations, we are motivated
to focus our detection on the abundance of light-weight logs,
which are more likely to be deployed in end-user systems. By
correlating the many disparate entries across these logs, we
aim to automatically reveal the attacker’s footprints, just as
1
an investigator would have done. We present HERCULE
,
an attack analysis framework that aims to automatically
reconstruct an attack’s stages and movement from multiple
lightweight system logs. HERCULE is based on the obser-
vation that the attack-related log entries, triggered by the
multistage payloads, have dense and heavy-weighted con-
nections within themselves, but sparse and light-weighted
connections with the benign log entries. In this way, the
weighted graphs built from system logs is similar to social
networks: people with similar interests, backgrounds, or
friend circles, have closer connections to each other.
Figure 1 gives an overview of many log entries dispersed
in diﬀerent stages of the intrusion being correlated by mul-
tidimensional edges. The red nodes are real attack traces,
and yellow nodes are the suspicious log entries not belonging
to any real attacks. The white nodes represent benign log
entries. The tainted log entry is marked as “attack-related,”
which is used later to classify the attack-related community.
HERCULE is designed to discover the latent attack-related
community embedded in the graph (the extracted circle in
Figure 1), despite the benign and malicious log entries being
highly interleaved with each other.
Based on causality analysis, HERCULE extracts various
types of the correlations and construct a uniform vector
representation of the connections between the log entries
(Section 3.1). For example, the blue (vertical) edges in
Figure 1 illustrate the multi-dimensional network edges which
HERCULE assigns diﬀerent feature weights, revealing the
densely connected communities. We provide several versions
of weight assignment in Section 3.2, which helps to increase
the system performance by supervised learning and quadratic
programming.
HERCULE then applies a community detection algorithm
to the global graph and generates a series of community
1
HERCULE stands
for Harmful Episode Reconstruction by
Correlating Unsuspicious Logged Events, also as a tribute to Her-
cule Poirot, one of the most celebrated ﬁctional detectives
cliques. With the tainted attack-related log entry (e.g., via
malware binary analysis [35,53] or website blacklisting), HER-
CULE reveals the attack-related communities and their inter-
connections based on their relationship to any tainted entries
(Section 3.4).
Our work in this paper makes the following contributions:
• We propose a novel technique to model the relation-
ship between multiple logs in the system by leverag-
ing causality analysis without heavyweight logging or
program instrumentation. HERCULE automatically
generates a multi-dimensional weighted graph with po-
tentially valuable information embedded within. Our
proposed graph based representation provides a “pano-
ramic view” of the logs generated by diﬀerent system
components.
• We leverage social network analysis and adapt the
community detection algorithm in our weighted graph
settings. We also propose several learning techniques
to optimize weight assignment and increase the system
performance. To the best of our knowledge, no such
techniques have been adopted to date in log-based
attack analysis.
• We conduct an extensive evaluation of HERCULE for
the analysis of attack scenarios based on 15 real-world
APT reports with diverse combinations of applications,
malicious payloads, and attack methods, demonstrating
the eﬀectiveness of HERCULE.
2. SYSTEM OVERVIEW
Figure 2 shows a simpliﬁed attack scenario that leaves
malicious footprints across diﬀerent logs. In the ﬁrst stage,
the user V is tempted to download a trojaned version of
Notepad++.exe from Gmail in Firefox with a malicious pay-
load embedded. There are three actions in the second stage:
(1) V initiates the trojaned Notepad++.exe installation pro-
cess. This causes the embedded malicious payload to open a
reverse TCP connection to a remote C&C server. (2) After
establishing the C&C channel, the C&C server sends the
command to search for a private ﬁle plan.docx, attempt-
ing to collect the competitor’s business plan. (3) The C&C
server sends the instruction to download the NESSUS.exe [45]
vulnerability scanner from the C&C server through FTP.
In the third stage, the C&C client receives instructions to
run NESSUS.exe to scan within the subnet and exﬁltrate
plan.docx through FTP back to the C&C server.
Figure 2 shows the connections of the attack traces across
ﬁve diﬀerent logs (those connections that investigators must
manually recover). Further, besides the attack-related entries
shown in Figure 2, numerous benign entries and suspicious
entries (i.e., truly benign but still requiring investigation)
are also recorded in the logs. The goal for HERCULE is
to automatically extract and present investigators with the
three attack phases and their interconnection from the many
disparate log entries.
Workﬂow of HERCULE. Figure 3 presents the key
phases and operations of HERCULE. The input to HER-
CULE is multiple raw logs from both network (e.g., DNS,
WFP, HTTP) and system activity (e.g., Process creation,
File access, Authentication). HERCULE’s detection logic
is speciﬁcally designed to be log-format agnostic and thus
HERCULE can handle any input log ﬁle given that a parser
58400:07:49,DNS 
Query, 
mail.google.com
00:07:51,HTTP 
Request,mail.googl
e.com,filename=No
tepad++.exe
First stage
00:07:54,Object Access, 
Notepad++.exe, Firefox
 00:07:50,DNS 
Response, 
74.125.225.22
00:07:51,WFP 
Connect,0x750,firefox,
(cid:258),74.125.225.22,80
00:07:57,Process 
Create,Notepad++.exe, 
creator=Firefox
00:07:57,Process 
Create,P,0xbb8,creator=
Notepad++.exe
00:07:57,WFP 
Connect,0xbb8,P,.,19
2.168.2.15,4444
Second stage
00:07:57, Process 
Create, ftp.exe, 0x750, 
creator=P
00:08:11,WFP 
Connect,0xbb8,ftp.ex
e,192.168.2.15,4444
00:07:57,WFP 
Connect,0x750,ftp.exe
,(cid:258),192.168.2.15,21
00:08:11,Object 
Access, plan.docx, 
0xbb8, ftp.exe
00:07:59,Object 
Access,V,NESSUS.exe,
0x750,pname=FTP
00:08:09,Process 
Create,NESSUS.exe, 
0x260, creator=P
Third stage
00:08:11,WFP 
Connect,0x260,NESSU
S.exe,192.168.2.1,1,...
00:08:11,WFP 
Connect,0x260,NESSU
S.exe,192.168.2.1,2,...
Figure 2: Parsed attack-related log entries in diﬀerent types of logs (marked in blue), and the key observation
to correlate the log entries (marked in red). For clarity, some log entries are slightly diﬀerent from the real
parsed log entries in our experiment. We also delete some edges for illustrating clear graph.
Phase I
Network 
Raw Logs
System 
Raw Logs
Tainting 
Module
Raw Log 
Parser
Structured 
Network 
Logs
Structured 
System 
Logs
Phase II
Connection 
Generation
Log Correlation 
Module
Weight 
Assignment
Supervised 
learning
Correlated Log 
Entries
Added Weight
Unsupervised 
learning
Community 
Detection 
Module
Community1
(cid:258)
(cid:258)
CommunityN
Figure 3: Workﬂow of HERCULE.
Post 
Processing 
Module
Phase III
Attack Story
Classification 
Performance 
Evaluation
for its format can be supplied as a plugin. Notice that in-
vestigators would need to understand (and therefore parse)
the format of these logs anyway during their investigation.
Thus requiring such a parsing plugin is not a signiﬁcant ad-
ditional overhead. Further, parsing plugins are reusable in
any future investigations of those log types. The remainder
of HERCULE’s operation is fully automated.
Phase I. The Raw Log Parser processes each input log
entry via its parsing plugin to extract a set of predeﬁned
ﬁelds (refereed to as a data entity). Each data entity is
given as input to the Log Correlation Module (Phase II) and
the Tainting Module. The Tainting Module scans the data
entities and (1) analyzes any suspicious executable binary
appeared in the log entries that is not in a whitelist by
leveraging popular malware/virus analysis platform [60, 62]
or (2) scans for known malicious website accesses based on
a URL blacklist to identify initial attack-related log entries.
These initial attack-related log entries will subsequently be
processed by the Post Processing Module.
Phase II. The Log Correlation Module consists of two sub-
modules: Connection Generation and Weight Assignment.
(1) Connection Generation connects any two log entries (via
an unweighted multi-dimensional edge) if there exist one
or more types of correlation between them (this process is
detailed in Section 3.1). For example, in Figure 1, if the two
nodes connected by the blue edge have the same timestamp
(denoted by d1) or share the same process ID (denoted by
d3), then these entries should be correlated.
(2) Weight
Assignment assigns weight on each edge. Note that there are
multiple ways to assign weights to multi-dimensional edges,
in which one of the supervised learning techniques has proven
to achieve the best result. We present the details of weight
assignment in Section 3.2.
Phase III. The Community Detection Module takes the
correlated weighted graph as input and outputs all detected
communities to the Post Processing Module. Starting from
any log entries tainted in Phase I, the Post Processing Module
classiﬁes the communities that contain tainted entries as
malicious and the others as benign.
It then outputs the
reconstructed attach phases (temporally ordered actions or
communities) and their interconnection from the attack-
related community. Section 3.4 presents the detailed design
of HERCULE’s community detection.
3. SYSTEM DESIGN
Log parsing is an essential step to transform the raw data
into data entities before applying any learning model. Thus
far, we have implemented log parsing plugins for the logs
shown Table 1. To capture attack footprints projected across
various logs, we select diﬀerent sets of logs based on the host
OS platforms. For example, on Linux, we choose the Syslogd
authentication log, while on Windows we make use of the
Windows ﬁltering platform (WFP) log which records the
inbound and outbound network connections the processes
makes. For each log, raw log parser extracts pre-deﬁned
ﬁelds that capture representative information of each log
entry. We summarize these in Table 2.
3.1 Connection Generation
The input to the Connection Generation sub-module is
the parsed data entities. The output is the unweighted, undi-
rected, and multi-dimensional graph which is built from the
intra-log and inter-log correlation. Analogous to a social
network, we treat each log entry as an individual and each
edge dimension as one type of relationship between two indi-
viduals. Formally, in the unweighted n-dimensional network
G = (V, E, D) where V is a set of nodes, E is a set of edges
and D is a set of dimensions, G forms a|V | × |V | × |D|
585Table 1: Logs used in
Section 4.
# Logs
Provider
L1 DNS
Tshark
L2 WFP connect Auditd
L3 HTTP
Firefox
L4 Process create Auditd
L5 Object access Auditd
L6 Authentication Syslogd
Table 2: Fields Correlated Across Logs.
Field
Logs
Description
timestamp L1-L6
event timestamp
q domain
r ip
pid
ppid
L1
L1
DNS quiered domain name
DNS resolved ip address
L2, L4, L5