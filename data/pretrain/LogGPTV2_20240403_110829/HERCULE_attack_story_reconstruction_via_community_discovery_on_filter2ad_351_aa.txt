# HERCULE: Attack Story Reconstruction via Community Discovery on Correlated Log Graph

## Authors
- Kexin Pei (Columbia University, PI:EMAIL)
- Zhongshu Gu (IBM T.J. Watson Research Center, PI:EMAIL)
- Brendan Saltaformaggio, Shiqing Ma, Fei Wang, Zhiwei Zhang, Luo Si, Xiangyu Zhang, Dongyan Xu (Purdue University, {bsaltafo, ma229, feiwang, zhan1187, lsi, xyzhang, dxu}@cs.purdue.edu)

## Abstract
Advanced cyber attacks often involve multiple stages designed to be stealthy and elusive. These attack patterns leave their footprints spatio-temporally dispersed across various logs in victim machines. However, existing log-mining intrusion analysis systems typically focus on a single type of log, failing to exploit fundamental inter-log connections. This limitation makes it difficult to reconstruct the complete attack story for complex, multi-stage attacks. Additionally, some existing approaches require heavy system instrumentation, making them impractical for real-world production environments.

To address these issues, we present HERCULE, an automated multi-stage log-based intrusion analysis system. Inspired by graph analytics research in social network analysis, HERCULE models multi-stage intrusion analysis as a community discovery problem. It builds multi-dimensional weighted graphs by correlating log entries across multiple lightweight logs available on commodity systems. From these graphs, HERCULE discovers "attack communities" embedded within. Our evaluation with 15 well-known APT attack families demonstrates that HERCULE can accurately reconstruct attack behaviors from a spectrum of multi-stage cyber attacks with high accuracy and low false positive rates.

## 1. Introduction
Emerging cyber attack campaigns, such as enterprise-wide Advanced Persistent Threats (APTs), exhibit "low-and-slow" attack patterns. Attackers conduct reconnaissance and move laterally within a network using stealthy multi-stage payloads. According to FireEye's annual report [18], attackers may reside in a victim’s environment for up to 205 days before being discovered. The covert nature of these attacks is derived from their deliberately small footprints on each affected system.

Our analysis of 15 well-known APT attack families [3, 8, 9, 12, 21, 24, 28, 47–50, 61] shows that the stages of a single attack often span many users, processes, and systems. Typically, the initial stage involves a social engineering campaign (e.g., phishing email), watering-hole attack [3], or trojaned software containing malicious payloads [9, 21, 24, 47–49, 61]. After gaining a foothold, reconnaissance payloads are deployed, including Command and Control (C&C) channels, password theft, and privilege escalation. In later stages, attackers move throughout the network, seeking opportunities to exfiltrate confidential information, eavesdrop on communications, or interrupt critical services.

Unfortunately, the footprints of such multi-stage attack patterns are spatio-temporally dispersed across many separate logs on different victims’ machines. For example, downloading a trojaned executable may leave evidence in the web browser’s log, while accessing confidential files may only be revealed in the system audit log. Fine-grained on-host provenance logging systems [29, 36, 40] are rarely deployed on end-user systems, making it challenging to piece together the contextual information of each malicious footprint.

Most existing log-based intrusion analysis and detection systems have three main limitations:
1. **Lack of Panoramic View**: They focus on single log types, missing the broader context required to understand the entire attack trace.
2. **Heavyweight Instrumentation**: Many systems rely on logging mechanisms that incur significant performance overhead, limiting their practicality in real-world environments.
3. **False Positives and Overlooked Alerts**: Too many uncorrelated alerts may be deemed false positives or overlooked by system administrators, providing little actionable intelligence.

To address these limitations, HERCULE leverages the abundance of lightweight logs, which are more likely to be deployed in end-user systems. By correlating disparate entries across these logs, HERCULE aims to automatically reveal the attacker’s footprints, similar to how a human investigator would do. HERCULE is based on the observation that attack-related log entries, triggered by multistage payloads, have dense and heavily weighted connections among themselves but sparse and lightly weighted connections with benign log entries. This makes the weighted graphs built from system logs similar to social networks, where people with similar interests, backgrounds, or friend circles have closer connections.

Figure 1 provides an overview of the correlation of log entries across different stages of the intrusion. The red nodes represent real attack traces, yellow nodes are suspicious log entries not belonging to any real attacks, and white nodes are benign log entries. The tainted log entry is marked as "attack-related" and used to classify the attack-related community. HERCULE is designed to discover the latent attack-related community embedded in the graph, despite the benign and malicious log entries being highly interleaved.

Based on causality analysis, HERCULE extracts various types of correlations and constructs a uniform vector representation of the connections between log entries (Section 3.1). For example, the blue (vertical) edges in Figure 1 illustrate the multi-dimensional network edges, which HERCULE assigns different feature weights, revealing densely connected communities. We provide several versions of weight assignment in Section 3.2, which help increase system performance through supervised learning and quadratic programming.

HERCULE then applies a community detection algorithm to the global graph, generating a series of community cliques. With the tainted attack-related log entry (e.g., via malware binary analysis [35, 53] or website blacklisting), HERCULE reveals the attack-related communities and their interconnections based on their relationship to any tainted entries (Section 3.4).

### Contributions
- **Novel Technique for Log Correlation**: HERCULE models the relationships between multiple logs using causality analysis without heavyweight logging or program instrumentation. It automatically generates a multi-dimensional weighted graph, providing a "panoramic view" of the logs generated by different system components.
- **Adaptation of Social Network Analysis**: HERCULE leverages social network analysis and adapts the community detection algorithm in weighted graph settings. It also proposes several learning techniques to optimize weight assignment and increase system performance.
- **Extensive Evaluation**: We conduct an extensive evaluation of HERCULE for the analysis of attack scenarios based on 15 real-world APT reports, demonstrating its effectiveness in diverse combinations of applications, malicious payloads, and attack methods.

## 2. System Overview
Figure 2 illustrates a simplified attack scenario that leaves malicious footprints across different logs. In the first stage, the user V is tempted to download a trojaned version of Notepad++.exe from Gmail in Firefox with a malicious payload embedded. In the second stage, the trojaned Notepad++.exe installation process opens a reverse TCP connection to a remote C&C server, which sends commands to search for a private file plan.docx and download the NESSUS.exe vulnerability scanner. In the third stage, the C&C client receives instructions to run NESSUS.exe to scan within the subnet and exfiltrate plan.docx through FTP back to the C&C server.

Figure 2 shows the connections of the attack traces across five different logs, which investigators must manually recover. Besides the attack-related entries, numerous benign and suspicious entries (truly benign but still requiring investigation) are also recorded in the logs. The goal for HERCULE is to automatically extract and present investigators with the three attack phases and their interconnections from the many disparate log entries.

### Workflow of HERCULE
Figure 3 presents the key phases and operations of HERCULE. The input to HERCULE is multiple raw logs from both network (e.g., DNS, WFP, HTTP) and system activity (e.g., Process creation, File access, Authentication). HERCULE’s detection logic is log-format agnostic, allowing it to handle any input log file given a parser plugin for its format. Investigators would need to understand and parse the format of these logs anyway during their investigation, so requiring such a parsing plugin is not a significant additional overhead. Parsing plugins are reusable in future investigations of those log types.

#### Phase I
- **Raw Log Parser**: Processes each input log entry via its parsing plugin to extract a set of predefined fields (referred to as a data entity).
- **Tainting Module**: Scans the data entities to identify initial attack-related log entries by analyzing suspicious executable binaries not in a whitelist or scanning for known malicious website accesses based on a URL blacklist.

#### Phase II
- **Log Correlation Module**:
  - **Connection Generation**: Connects any two log entries if there exist one or more types of correlation between them.
  - **Weight Assignment**: Assigns weights to each edge, using supervised learning techniques to achieve the best results.

#### Phase III
- **Community Detection Module**: Takes the correlated weighted graph as input and outputs all detected communities to the Post Processing Module.
- **Post Processing Module**: Classifies the communities that contain tainted entries as malicious and the others as benign. It then outputs the reconstructed attack phases (temporally ordered actions or communities) and their interconnections from the attack-related community.

## 3. System Design
### Log Parsing
Log parsing is essential to transform raw data into data entities before applying any learning model. We have implemented log parsing plugins for the logs shown in Table 1. To capture attack footprints projected across various logs, we select different sets of logs based on the host OS platforms. For example, on Linux, we choose the Syslogd authentication log, while on Windows, we use the Windows Filtering Platform (WFP) log. For each log, the raw log parser extracts predefined fields that capture representative information of each log entry (Table 2).

### Connection Generation
The Connection Generation sub-module takes parsed data entities as input and outputs an unweighted, undirected, and multi-dimensional graph built from intra-log and inter-log correlations. Each log entry is treated as an individual, and each edge dimension represents a type of relationship between two individuals. Formally, in the unweighted n-dimensional network \( G = (V, E, D) \) where \( V \) is a set of nodes, \( E \) is a set of edges, and \( D \) is a set of dimensions, \( G \) forms a \( |V| \times |V| \times |D| \) tensor.

#### Tables
**Table 1: Logs Used in Section 4**
| # | Logs | Provider |
|---|------|----------|
| L1 | DNS | Tshark |
| L2 | WFP connect | Auditd |
| L3 | HTTP | Firefox |
| L4 | Process create | Auditd |
| L5 | Object access | Auditd |
| L6 | Authentication | Syslogd |

**Table 2: Fields Correlated Across Logs**
| Field | Logs | Description |
|-------|------|-------------|
| timestamp | L1-L6 | Event timestamp |
| q domain | L1 | DNS queried domain name |
| r ip | L1 | DNS resolved IP address |
| pid | L2, L4, L5 | Process ID |
| ppid | L2, L4, L5 | Parent Process ID |

This structured approach ensures that HERCULE can effectively correlate and analyze log entries, providing a comprehensive and accurate reconstruction of multi-stage cyber attacks.