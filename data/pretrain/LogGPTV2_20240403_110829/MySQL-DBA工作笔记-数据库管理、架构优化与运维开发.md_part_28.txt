Query OK, 0 rows affected (0.00 sec)
> INSERT INTO users2 (user_name) VALUES ('dd') ON DUPLICATE KEY UPDATE
最后我们来看一下查询类的特有 SQL。
Records:1
此外，补充 replace into 的另外一种使用方式，供参考，如下：
比如我们还是基于上面的数据，插入user_name 为'dd'的数据，如果存在则修改。
所以通过上面的测试和推理我们知道，replace into 是先 delete然后 insert 的操作，而
CREATE TABLEusers2
这个时候再次查看建表的 DDL，如下所示，可以看到 auto_increment 确实是递增了。
3 rows in set (0.00 sec)
>select *from users2;
所以任何语句和功能都不是万能的，还得看场景，脱离了使用场景就很难说得清了。
根据运行结果来看，没有修改数据，比我们期望的还要好一些。
可以看到user_id 做了递增，也就意味着这是一个全新的 insert 插入数据。
user_id|user_name
rows in set (0.00 sec)
user_id|user_name
name
UNIQUE KEY
PRIMARY KEY
user
=VALUES(user
23
name
2
88
Duplicates:1
P8
rows
users2
varchar(64)
unsigned NOT NULL AUTO_INCREMENT,
name)
Warnings:0
（username)
---
## Page 175
4.4
4.3.4
（2）数学函数
MySQL本身的功能是很丰富的，主要提供了以下的一系列函数。
2 rows in set, 2 warnings (0.00 sec)
（1）系统函数
> select -login_account from test_tab limit 2;
2rows in set(0.00 sec)
> select login_account from test_tab limit 2;
如果要对一些字符做筛检，以下也是一种特殊的处理方式。
1row in set (0.39 sec)
PI:EMAIL
 select +count(*)from test_tab;
> select -count(*) from test_tab;
除此之外，MySQL 还支持一些“偏门”的 SQL，我们简单看看就行。
select * from x limit 1, 10
row in set (0.39 sec)
语句如下：
如果要返回第2条到第12条的结果，其中下标是从0开始。
select*fromxlimit2只返回前2条结果
limit 语法是 MySQL 特有的 SQL 语法。
-1ogin_account
MySQL常用函数
PI:EMAIL
+count（*）
-count（*)
548650
-5486501
查询类
-180000000
-111000
第4章SQL开发规范和基础|153
---
## Page 176
154丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
弃多余小数位，不进行四舍五入);
最近的小数（小数点后保留y位)；truncate(x,y)函数负责返回小数点后保留y位的x（舍
算以 10 为底的对数)。
次方）以及 exp(x)函数（计算e的x次方)，例如：
余切函数 cot(x)、反正弦函数 asin(x)、反余弦函数 acos(x)以及反正切函数 atan(x)。例如:
degrees(x)函数负责将弧度x转换为角度。
4.4.1
即不鼓励把复杂的计算任务放到MySQL层面来做。
能可能用函数就很容易实现了；在这个基础上，我们还需要明白 MySQL 不可以做什么，
MySQL 提供的 round(x)函数负责计算离×最近的整数，round(x,y)函数负责计算离x
MySQL中常用的对数函数有 log(x)函数（计算x的自然对数）以及 log10(x)函数（计
select pow(2,3);
MySQL 中常用的指数函数有 sqrtO平方根函数、pow(x,y）幂运算函数（计算×的y
MySQL 还提供了三角函数，包括正弦函数 sin(x)、余弦函数 cos(x)、tan(x)正切函数、
format(x,y)函数负责返回小数点后保留y位的x（进行四舍五入)；ceil(x)函数负责返
5．求近似值函数
4.
3．对数函数
说明：pow(x,y）幂运算函数还有一个别名函数：power(x,y)，可实现相同的功能。
MySQL 提供了pi)函数计算圆周率；radians(x)函数负责将角度x 转换为弧度：
数学函数是常规功能，基本就是数值计算方向的。
学习这部分内容的要点是明白MySQL可以做什么，在不影响性能的前提下，有些功
1．三角函数
（8）其他常用的MySQL函数
（7）日期和时间函数
（6）系统信息函数
（5）务
（4）数据类型转换函数
（3）字符串函数
，求近似值函娄
指数函数
数学函数
条件控制函数
数
---
## Page 177
反三，给出两个来。
方法来做转换。如上的几种方法其实都比较麻烦，还有其他更简洁的办法呢，我就举一
replace(xxxx,right(xxx))；还有一种思路就是创建一个函数或者存储过程，通过结构化的
说勤能补拙，坚持学习会有不小的收获，收获到底有多少呢，我们可以写个函数来体会下。
数将code1进制的x变为 code2 进制数。
c2...的ASCII 码转换为字符，然后返回这些字符组成的字符串；conv(x,codel,code2)函
asci(c)函数返回字符c的ASCII码（ASCII码介于0～255）;char(c1,c2,c3,…）函数将cl、
回大于等于x的最小整数；floor(x)函数负责返回小于等于x的最大整数。
当然学习这些内容，我们要让学习的目的和输出匹配起来，推荐一个心灵鸡汤SQL，都
mysql> select cast('PI:EMAIL' as unsigned);
使用字符串的数据类型转换。比如：
解法一：
如果使用字符串函数，一种方式就是使用正则，或者直接给定条件来做过滤。比如
如果需要把里面的数字提取出来，有什么好的办法呢
●PI:EMAIL
·PI:EMAIL
· PI:EMAIL
PI:EMAIL
假设我有如下的需求，
“鼓动”完学习劲头，我们来一个实例来细化一
真可谓：积硅步以致千里，积怠惰以致深渊。
结果是0.03。
而反过来每天退步一点点，连续退步一年。
结果是37.8。
select power((1+0.01),365) /power((1-0.01),365) as success;
案例4-5：MySQL字符串中抽取数值的方法
SQL这么写：
即每天进步一点点，要求不高，基数是1，每天进步0.01，看看一年后的进步有多大：
bin(x)函数、oct(x)函数和 hex(x)函数分别返回x 的二进制、八进制和十六进制数;
7．二进制、八进制、十六进制函数
MySQL提供了randO函数负责返回随机数。
6．随机函数
，比如邮箱注册账号，指定账号是以数字开头，内容如下：
下
第4章SQL开发规范和基础
155
---
## Page 178
156丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
来排序的，这个和我们的预期明显不符，输出的结果类似下面的形式：
据库中排序，就会是下面的顺序：al，aal0，aall，aa2，看起来系统是按照数字的前缀
时候，系统的设置不够“智能”，比如我们的用户名为 aal，aa2，aal0，aall，如果在数
充说明。
区分数值大小那样区分字符串的大小的，这个问题我们可以通过下面的例子做一个补
神工的感觉。
select *from test 
在一些 SQL 查询中，我们经常会碰到一个比较纠结的问题，就是对一些字段排序的
案例 4-6：order by 的妙用
其实有些功能是数学函数无法支持的，
mysql> select -(-'PI:EMAIL');
如果是前面含有冗余的数字，也是可以转换的，如下：
1 row in set,1 warning
mysql> select -(-'PI:EMAIL');
这个解法更简单，
1 row in set (0.00 sec)
mysql> show warnings;
解法二：
我们可以很明显看到结果和一个警告。
1 row in set, 1 warning (0.00 sec)
-(-'PI:EMAIL')
row in set，1warning (0.00 sec)
-(-'PI:EMAIL')
Level
 id 丨 name |
３４２
aa2
aal
|Code|Message
1234561
12345|
一个减号就可以把后面的数据默认按照数值型来处理，有种鬼斧
order by name;
(0.00 sec)
1234561
，比如对于字符串的排序，计算机是无法像
一十
'PI:EMAIL'
---
## Page 179
符串占用字节数的函数等。
支持的字符串函数有以下的一些类型，我们逐个来说明下。
4.4.2
型，字段值的数值部分就可以满足我们的排序需求了。
字符串函数是我们学习函数的一个重点内容，在这个地方的篇幅也要多一些。MySQL
charset(x)函数返回x的字符集；
（1）获取字符串字符集的函数
字符串基本信息函数包括获取字符串字符集的函数、获取字符串长度函数和获取字
（1）字符串基本信息函数
如果要实现这样的一个需求，我们可以做点“小把戏”，即把字段 name 转换为数值
加密函数包括不可逆加密函数和加密-解密函数。
2.加密函数
length(x)函数用于获取字符串x的占用的字节数。
（4）获取字符串占用字节数函数
char_length(x)函数用于获取字符串x的长度。
（3）获取字符串长度函数
convert(x using charset)函数返回x的 charset 字符集数据(注意x的字符集没有变化)。
（2）转换字符串字符集的函数
1．字符串基本信息函数
（8）字符串逆序函数
（7）
（6）
（5）
（4）
（3）
（2）加密函数
select *from test order by name+0;
字符串比较函数
字符串复制函数
子字符串操作函数
修剪函数
字符串连接函数
字符串函数
2
4
aa10
aa11
aa2
collation(x)函数返回x 的字符序。
第4章SQL开发规范和基础|157
---
## Page 180
158丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
前n个字符；right(x,n)函数返回字符串x的后 n 个字符。
concat_ws(x,xl,x2,…·.)函数使用x将x1、x2等若干个字符串连接成一个新字符串。
默认返回值是一个128 位的二进制数；aes_decrypt(password,key)函数使用密钥key 对密
对x进行加密，默认返回32位的加密字符串。
码password进行解密。
mysql> select left('liushui',3);
!(,TOs:',w,'. )sm zeouoo 4oatas  select mid('mysql',3,3);
substring(x,start,length)函数与 mid(x,start,length)函数都是从字符串x的第 n 个位置开
(1）取出指定位置的子字符串函数
子字符串操作函数包括取出指定位置的子字符串函数、在字符串中查找指定子字符
5．子字符串操作函数
lpad(x1,len,x2)函数将字符串 x2 填充到 x1 的开始处,使字符串 x1的长度达到 lenght;
（3）填充字符串函数
upper(x)函数以及 ucase(x)函数将字符串x中的所有字母变成大写字母，字符串×并
（2）在字符串中查找指定子字符串的位置函数
I mid('mysql',3,3)
row in set (0.00 sec)
（2）字符串大小写转换函数
sql
符串xl。
replace('abcd',substring('abcd',2,2),'xx');
第4章SQL开发规范和基础|159
---
## Page 182
160丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
况，可以使用 MySQL 自带的 mysqlslap 来测试；而第二个单线程的压测，则可以使用
用 instr、locate 和 position 都可以实现。
亮，有一种进了大观园的感觉，哦，原来有这个函数；哦，竟然可以这样实现，以前怎
如果x1=x2，则函数返回值为 0；如果x1<x2，则函数返回值为-1。
可以得到一个很长的字符串，比如我们拼装后的字符串类似下图4-24所示。
得到一个很长的字符串，比如 concat(concat(repeat(abc',500),foobarbar)，repeat(abc',500)）就
MySQL 非常有特色的函数benchmark 来实现。
是单线程执行的性能情况。如果在对比测试中高出一筹，还有什么理由不去推荐呢。
过两种测试方式来得到一个初步的结论：第一个是高并发下多线程调用的性能情况；第二个