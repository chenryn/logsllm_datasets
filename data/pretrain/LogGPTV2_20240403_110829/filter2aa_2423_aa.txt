2021GKCTF-NAN-WP 
NaN 战队隶属 Nu1L 2.0 计划，有兴趣加入者可发送个人简历至 PI:EMAIL 
队伍名称：NAN 
队伍成员： 
Siebene 
pray77 
SYJ 
一：Reverse 
 1. QQQQT 
使用 exeinforpe 检查发现是用的 Enigma Virtual Box 打的包 
下载工具 EnigmaVBUnpacker 将 exe 解包一下 
得到 QQQQT_unpacked.exe 
拖入 IDA 分析 
 关键逻辑在函数 sub_4012F0 里面，就是一个标准的 base58，然后比较字符串，写个脚
本解一下即可 
查找字符串得到比较数据和 base58 的码表：56fkoP8KhwCf3v7CEz 和
123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz 
写一个脚本解一下即可 
# _*_ coding: utf-8 _*_ 
# editor: SYJ 
# function: Reversed By SYJ 
# describe: 
def b58encode(tmp:str) -> str: 
    tmp = list(map(ord,tmp)) 
    temp = tmp[0] 
    base58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" 
    for i in range(len(tmp)-1): 
        temp = temp * 256 + tmp[i+1] 
    tmp = [] 
while True: 
        tmp.insert(0,temp % 58) 
        temp = temp // 58 
        if temp == 0: 
break 
    temp = "" 
    for i in tmp: 
        temp += base58[i] 
return temp 
def b58decode(tmp:str) -> str: 
import binascii 
    base58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" 
    temp = [] 
for i in tmp: 
        temp.append(base58.index(i)) 
    tmp = temp[0] 
for i in range(len(temp)-1): 
        tmp = tmp * 58 + temp[i+1] 
return binascii.unhexlify(hex(tmp)[2:].encode("utf-8")).decode("UTF-8") 
cmp = "56fkoP8KhwCf3v7CEz" 
print('flag{' + b58decode(cmp) + '}') 
# 得到 flag 为：flag{12t4tww3r5e77} 
2. app-debug 
得到 apk，直接拖入 jadx，得到关键逻辑 
其实很简单，就是 MainActivity 里面调用的 check 函数检测我们输入的 flag，而 check 函数
是 System.loadLibrary("native-lib"); 
使用工具 apk-tools 获取一下 apk 的资源，然后将 lib 文件夹里面的 so 拖入 IDA 进行分析 
shift+f12 查找字符串，发现会检测是否被调试
交叉引用一下发现检测调试的函数是 sub_738378DF3C 
然后关键的 check 函数是 Java_com_example_myapplication_MainActivity_check
里面是将我们输入的字符串进行 TEA 加密, 里面有比较数据
使用 IDA 和 adb 调试一下，可以发现 key，即那四个数字被改变 
然后写个 C 脚本解一下即可 
#include  
#include  
void encrypt (uint32_t* v, uint32_t* k) { 
    uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */ 
    uint32_t delta=0x458BCD42;                     /* a key schedule constant */ 
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */ 
    for (i=0; i >5) + k1); 
        v1 += ((v0>5) + k3); 
    }                                              /* end cycle */ 
    v[0]=v0; v[1]=v1; 
} 
void decrypt (uint32_t* v, uint32_t* k) { 
    uint32_t delta=0x458BCD42;                     /* a key schedule constant */ 
    uint32_t v0=v[0], v1=v[1], sum=(delta*32)&0xffffffff, i;  /* set up */ 
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */ 
    for (i=0; i>5) + k3); 
        v0 -= ((v1>5) + k1); 
        sum -= delta; 
    }                                              /* end cycle */ 
    v[0]=v0; v[1]=v1; 
} 
int main() 
{ 
    uint32_t array[] = {0xF5A98FF3,0xA21873A3};//{0xF5A98FF3,0xA21873A3}; 
    uint32_t key[4] = {9,7,8,6}; 
    //encrypt(array, key); 
    decrypt(array, key); 
    //printf("%x\n%x",array[0],array[1]); 
printf("%c,%c,%c,%c,%c,%c,%c,%c",*((char*)&array[0]+0),*((char*)&array[0]+1),*((char*)&array[0]+2),*((
char*)&array[0]+3),*((char*)&array[1]+0),*((char*)&array[1]+1),*((char*)&array[1]+2),*((char*)&array[1]
+3)); 
    return 0; 
    //GKcTFg0 
} 
最后将这得到的 flag{md5(input)}一下即可,flag{77bca47fe645ca1bd1ac93733171c9c4} 
3. Crash 
拖入 IDA 分析，main 函数在先检测了 input 的格式，然后传入 man_check 函数检测，可以
从 maincheck 函数中发现，GKCTF{之后的 24 个字节被传入了 main_encrypto 函数进行加
密，再后面四字节是 sha_256，再后面四字节是 sha_512，再后面四字节是 md5，
main_encrypto 函数内部是三重 Des，最后 base64 加密一下，后面那些 hash 函数直接查一
下就可以得到，这个 DES 是关键， 
from Crypto.Cipher import DES3 
ans = [163, 246, 150, 62, 51, 77, 196, 195, 217, 14, 114, 101, 54, 157, 51, 43, 159, 141, 44, 240, 184, 78, 254, 
164, 169, 210, 106, 142, 66, 244, 94, 64] # 比较数据 base64 解码之后 
c = bytes(ans) 
key = b'WelcomeToTheGKCTF2021XXX' 
iv1 = b'1Ssecret' 
iv2 = b'wumansgy' 
# key = b'00000000' 
# iv = b'00000000' 
des = DES3.new(key,DES3.MODE_CBC,iv1) 
m = des.decrypt(c) 
print(m) 
最后将后面的 hash 拼接一下，得到 flag 为：GKCTF{87f645e9-b628-412f-9d7a-
e402f20af940} 
4. SoMuchCode 
在 scanf 输入函数下断点之后，交叉引用输入的变量，发现下方有个函数引用了输入，
进去之后根据 XXTEA 的加密逻辑对拍一下，交叉引用一下，这里是生成 delta 的逻辑，调试
到这里得到 delta 为 0x33445566, 同时对拍也会得到 key 
然后下方跟着调试下去，可以在内存里得到比较数据 
#include  
#include  
#define DELTA 0x33445566 
int main() 
{ 
    unsigned int v[8] = {0x993CAB5C, 0x3F40E129, 0x777791DE, 0x737DFEA6, 0x0ECCF59E6, 0x0C9604CE3, 
0x9682C0A5, 0x556F2A1E}; 
    unsigned int key[4] = {0x000036B0, 0x00013816, 0x00000010, 0x0001E0F3}; 
    unsigned int sum = 0; 
    unsigned int y,z,p,rounds,e; 
    int n = 8; 
    int i = 0; 
    rounds = 12; 
    y = v[0]; 
    sum = (rounds*DELTA)&0xffffffff; 
     do                 //0x9E3779B9*(52/35)-0x4AB325AA，测试来要循环 7 次 
     { 
        e = sum >> 2 & 3; 
        for(p=n-1;p>0;p--)    //34 次循环 
        { 
            z = v[p-1]; 
            v[p] = (v[p] - ((((z>>5)^(y>3)^(z>5))+((z>3))))) & 0xffffffff; 
        y = v[0]; 
        sum = (sum-DELTA)&0xffffffff; 
     }while(--rounds); 
    for(i=0;i= 0; k1 -= 1) { 
        memcpy(key_use, key, 16); 
        getRoundIvAndKey(k1, iv, key_use, pIv);  // f8 82 
        extendKey(key_use);//扩展密钥 
        convertToIntArray(&p[16], pArray1); 
        convertToIntArray(&p[0], pArray0); 
        addRoundKey(pArray1, 10); 
        for(int i = 9; i >= 1; i--) { 
            mydeshift(pArray1); 
            deSubBytes(pArray1); 
            addRoundKey(pArray1, i); 
            myTranspose(pArray1); 
            deMixColumns(pArray1);//列混合 
            myTranspose(pArray1); 
        } 
        mydeshift(pArray1);//行移位 
        deSubBytes(pArray1);//字节代换 
        addRoundKey(pArray1, 0);//一开始的轮密钥加 
        for (int i = 0; i = 1; i--) { 
            mydeshift(pArray0); 
            deSubBytes(pArray0); 
            addRoundKey(pArray0, i); 
            myTranspose(pArray0); 
            deMixColumns(pArray0);//列混合 
            myTranspose(pArray0); 
        } 
        mydeshift(pArray0);//行移位 
        deSubBytes(pArray0);//字节代换 
        addRoundKey(pArray0, 0);//一开始的轮密钥加 
        for (int i = 0; i < 4; ++i) { 
            for (int j = 0; j < 4; ++j) { 
                pArray0[i][j] ^= pIv[i][j]; 
            } 
        } 
        convertArrayToStr(pArray0, &p[0]); 
        convertArrayToStr(pArray1, &p[16]); 
    } 
} 
解密目标数据得到: Meaningless_!$!%*@^%#%_Code 字符串 
C#层还有一个 code 计算 
from z3 import * 
flag2 = bytearray(b'Meaningless_!$!%*@^%#%_Code') 
id = [BitVec('a%d' % i, 8) for i in range(9)] 
fuckId = [i for i in id] 
tt = bytearray(target) 
for j in range(len(flag2)): 
    id[j % len(target)] ^= flag2[j % len(flag2)] 
s = Solver() 
for i in range(9): 
    s.add(id[i] == target[i]) 
s.check() 
res = s.model() 