Removing service todobackend_app
Removing service todobackend_collectstatic
Removing service todobackend_db
Removing network todobackend_net
> docker volume ls
DRIVER          VOLUME NAME
local           sshkey
cloudstor:aws   todobackend_data
cloudstor:aws   todobackend_public
> docker volume rm todobackend_public
todobackend_public
> docker volume rm todobackend_data
todobackend_data
```
请记住，无论何时拆除栈，都必须手动删除该栈中可能使用过的任何卷。
# 使用 Docker 机密进行机密管理
在前面的例子中，当我们创建`db`服务时，我们实际上并没有将应用配置为与`db`服务集成，因为虽然我们关注的是如何创建持久存储，但是我没有将`app`服务与`db`服务集成的另一个原因是因为我们当前正在以明文形式配置`db`服务的密码，这并不理想。
Docker Swarm 包括一个名为 Docker secrets 的功能，它提供了一个安全的机密管理解决方案，用于向在 Docker Swarm 集群上运行的应用提供机密。机密存储在一个名为 *raft 日志*的内部加密存储机制中，该机制被复制到集群中的所有节点，确保任何被授权访问机密的服务和相关容器都可以安全地访问机密。
要创建 Docker 机密，您可以使用`docker secret create`命令:
```
> openssl rand -base64 32 | docker secret create todobackend_mysql_password -
wk5fpokcz8wbwmuw587izl1in
> openssl rand -base64 32 | docker secret create todobackend_mysql_root_password -
584ojwg31c0oidjydxkglv4qz
> openssl rand -base64 50 | docker secret create todobackend_secret_key -
t5rb04xcqyrqiglmfwrfs122y
> docker secret ls
ID                          NAME                              CREATED          UPDATED
wk5fpokcz8wbwmuw587izl1in   todobackend_mysql_password        57 seconds ago   57 seconds ago
584ojwg31c0oidjydxkglv4qz   todobackend_mysql_root_password   50 seconds ago   50 seconds ago
t5rb04xcqyrqiglmfwrfs122y   todobackend_secret_key            33 seconds ago   33 seconds ago
```
在前面的例子中，我们使用`openssl rand`命令生成 Base64 格式的随机机密，然后作为标准输入传递给`docker secret create`命令。我们为 todo back and 用户的 MySQL 密码和 MySQL 根密码创建了 32 个字符的机密，最后为 Django `SECRET_KEY`设置创建了一个 50 个字符的机密，这是 todo back and 应用执行加密操作所需的。
现在我们已经创建了几个机密，我们可以配置栈来使用这些机密:
```
version: '3.6'
networks:
  ...
volumes:
  ...
secrets:
 todobackend_mysql_password:
 external: true
 todobackend_mysql_root_password:
 external: true
 todobackend_secret_key:
 external: true
services:
  app:
    ...
    ...
    environment:
      DJANGO_SETTINGS_MODULE: todobackend.settings_release
 MYSQL_HOST: db
 MYSQL_USER: todo
    secrets:
 - source: todobackend_mysql_password
 target: MYSQL_PASSWORD
 - source: todobackend_secret_key
 target: SECRET_KEY
    command:
    ...
    ...
  db:
    image: mysql:5.7
    environment:
      MYSQL_DATABASE: todobackend
      MYSQL_USER: todo
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
    secrets:
 - source: todobackend_mysql_password
 target: mysql_password
 - source: todobackend_mysql_root_password
 target: mysql_root_password
  ...
  ...
```
我们首先声明顶层`secrets`参数，指定我们之前创建的每个机密的名称，并将每个机密配置为`external`，假设我们在栈之外创建了机密。如果不使用外部机密，则必须在文件中定义您的机密，这无法解决在栈定义和配置之外安全存储密码的问题，因此将您的机密创建为独立于栈的独立实体要安全得多。
然后我们重新配置`app`服务，通过`secrets`属性消费每个机密。请注意，我们指定了`MYSQL_PASSWORD`和`SECRET_KEY`的目标。每当您将机密附加到服务时，将在`/run/secrets`创建内存中 tmpfs 支持的挂载，每个机密存储在位置`/run/secrets/`，因此对于`app`服务，将挂载以下机密:
*   `/run/secrets/MYSQL_PASSWORD`
*   `/run/secrets/SECRET_KEY`
我们将在后面学习如何配置我们的应用来使用这些机密，但是还要注意，我们配置了`MYSQL_HOST`和`MYSQL_USER`环境变量，以便我们的应用知道如何连接到`db`服务以及作为哪个用户进行认证。
接下来，我们配置`db`服务来使用 MySQL 密码和根密码机密，这里我们为每个机密配置目标，以便将以下机密装入`db`服务容器:
*   `/run/secrets/mysql_password`
*   `/run/secrets/mysql_root_password`
最后，我们从`db`服务中移除`MYSQL_PASSWORD`和`MYSQL_ROOT_PASSWORD`环境变量，并用它们基于文件的等价物替换它们，引用每个已配置机密的路径。
此时，如果您部署了新更新的栈(如果您之前没有删除栈，则需要在此之前执行此操作，以确保您可以使用新凭据重新创建数据库)，一旦 todobackend 服务成功启动，您就可以通过运行`docker ps`命令来确定在 Swarm 管理器上运行的`app`服务实例的容器标识，之后您可以检查`/run/secrets`目录的内容:
```
> docker stack deploy --with-registry-auth -c stack.yml todobackend
Creating network todobackend_net
Creating service todobackend_db
Creating service todobackend_app
Creating service todobackend_collectstatic
> docker ps -f name=todobackend -q
7804a7496fa2
> docker exec -it 7804a7496fa2 ls -l /run/secrets
total 8
-r--r--r-- 1 root root 45 Jul 20 23:49 MYSQL_PASSWORD
-r--r--r-- 1 root root 70 Jul 20 23:49 SECRET_KEY
> docker exec -it 7804a7496fa2 cat /run/secrets/MYSQL_PASSWORD
qvImrAEBDz9OWJS779uvs/EWuf/YlepTlwPkx4cLSHE=
```
如您所见，您之前创建的机密在`/run/secrets`文件夹中可用，如果您现在浏览到发布应用的外部负载平衡器 URL 上的`/todos`路径，不幸的是，您将收到一个`access denied`错误:
![](img/bade4a1e-0aa5-4a04-870a-04c2dbed709d.png)
Database authentication error
这里的问题是，虽然我们已经在`app`服务中装载了数据库机密，但是我们的 todo back and 应用不知道如何使用这些机密，所以我们需要对 todo back and 应用进行一些修改，以便能够使用这些机密。
# 配置应用以使用机密
在前面的章节中，我们使用了一个入口点脚本来增加对一些特性的支持，比如在容器启动时注入机密，然而一个同样有效(并且实际上更好和更安全)的方法是配置您的应用来本地支持您的机密管理策略。
在 Docker 机密的情况下，这非常简单，因为机密被安装在容器的本地文件系统中的一个众所周知的位置(`/run/secrets`)。下面演示了如何修改`todobackend`存储库中的`src/todobackend/settings_release.py`文件以支持 Docker secrets，您应该还记得，这是我们传递给`app`服务的设置，由环境变量配置`DJANGO_SETTINGS_MODULE=todobackend.settings_release.`指定:
```
from .settings import *
import os
# Disable debug
DEBUG = True
# Looks up secret in following order:
# 1\. /run/secret/
# 2\. Environment variable named 
# 3\. Value of default or None if no default supplied
def secret(key, default=None):
 root = os.environ.get('SECRETS_ROOT','/run/secrets')
 path = os.path.join(root,key)
 if os.path.isfile(path):
 with open(path) as f:
 return f.read().rstrip()
 else:
 return os.environ.get(key,default)
# Set secret key
SECRET_KEY = secret('SECRET_KEY', SECRET_KEY)
# Must be explicitly specified when Debug is disabled
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')
# Database settings
DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',
        'NAME': os.environ.get('MYSQL_DATABASE','todobackend'),
        'USER': os.environ.get('MYSQL_USER','todo'),
 'PASSWORD': secret('MYSQL_PASSWORD','password'),
        'HOST': os.environ.get('MYSQL_HOST','localhost'),
        'PORT': os.environ.get('MYSQL_PORT','3306'),
    },
    'OPTIONS': {
      'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
    }
}
STATIC_ROOT = os.environ.get('STATIC_ROOT', '/public/static')
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', '/public/media')
MIDDLEWARE.insert(0,'aws_xray_sdk.ext.django.middleware.XRayMiddleware')
```
我们首先创建一个名为`secret()`的简单函数，它将设置的名称或`key`作为输入，如果找不到机密，则为可选默认值。然后，该函数尝试查找路径`/run/secrets`(这可以通过设置环境变量`SECRETS_ROOT`来覆盖)，并查找与请求的密钥同名的文件。如果找到该文件，则使用`f.read().rstrip()`调用读取该文件的内容，使用`rstrip()`函数剥离由`read()`函数返回的换行符。否则，该函数会查找一个与 key 同名的环境变量，如果所有这些查找都失败，它会返回传递给`secret()`函数的`default`值(该函数本身的默认值为`None`)。
有了这个函数，我们就可以简单地调用机密函数，如`SECRET_KEY`和`DATABASES['PASSWORD']`设置所示，并以`SECRET_KEY`设置为例，函数将按照以下优先顺序返回:
1.  `/run/secrets/SECRET_KEY`内容的价值
2.  环境变量`SECRET_KEY`的值
3.  传递给`secrets()`功能的默认值(在这种情况下，是从基础设置文件导入的`SECRET_KEY`设置)
现在我们已经更新了 todobackend 应用以支持 Docker 机密，您需要提交您的更改，然后测试、构建和发布您的更改。请注意，您需要在连接到本地 Docker 引擎(而不是 Docker Swarm 集群)的单独外壳中完成此操作:
```
> git commit -a -m "Add support for Docker secrets"
[master 3db46c4] Add support for Docker secrets
> make login
...
...
> make test
...
...
> make release
...
...
> make publish
...