  background-color: white;
  overflow-y: scroll;
  position: fixed;
  top: 0;
  left: 0;
}
.pagination-panel {
  display: flex;
  justify-content: space-between;
}
.title-row {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
}
@media (max-width: 600px) {
  .title-row{ 
    flex-direction: column; 
    text-align: center;
    align-items: center
  }
}
.locations-label {
  text-align: center;
  margin: 8px;
}
.modal-footer {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  display: flex;
  justify-content: space-around;
  background: white;
}
```
#### 7.3 - 尝试输出
在你的浏览器中打开 `localhost:8080`，你将看到一个简单的带结果分页功能的搜索界面。在顶部的搜索框中尝试输入不同的关键字来查看它们的搜索情况。
![preview webapp](/data/attachment/album/201804/29/230001e19b9192911jljdu.png)
> 
> 你没有必要重新运行 `docker-compose up` 命令以使更改生效。本地的 `public` 目录是装载在我们的 Nginx 文件服务器容器中，因此，在本地系统中前端的变化将在容器化应用程序中自动反映出来。
> 
> 
> 
如果你尝试点击任何搜索结果，什么反应也没有 —— 因为我们还没有为这个应用程序添加进一步的相关功能。
### 8 - 分页预览
如果能点击每个搜索结果，然后查看到来自书中的内容，那将是非常棒的体验。
### 8.0 - 添加 Elasticsearch 查询
首先，我们需要定义一个简单的查询去从给定的书中获取段落范围。
在 `server/search.js` 文件中添加如下的函数到 `module.exports` 块中。
```
/** Get the specified range of paragraphs from a book */
getParagraphs (bookTitle, startLocation, endLocation) {
  const filter = [
    { term: { title: bookTitle } },
    { range: { location: { gte: startLocation, lte: endLocation } } }
  ]
  const body = {
    size: endLocation - startLocation,
    sort: { location: 'asc' },
    query: { bool: { filter } }
  }
  return client.search({ index, type, body })
}
```
这个新函数将返回给定的书的开始位置和结束位置之间的一个排序后的段落数组。
#### 8.1 - 添加 API 端点
现在，我们将这个函数链接到 API 端点。
添加下列内容到 `server/app.js` 文件中最初的 `/search` 端点下面。
```
/**
 * GET /paragraphs
 * Get a range of paragraphs from the specified book
 * Query Params -
 * bookTitle: string under 256 characters
 * start: positive integer
 * end: positive integer greater than start
 */
router.get('/paragraphs',
  validate({
    query: {
      bookTitle: joi.string().max(256).required(),
      start: joi.number().integer().min(0).default(0),
      end: joi.number().integer().greater(joi.ref('start')).default(10)
    }
  }),
  async (ctx, next) => {
    const { bookTitle, start, end } = ctx.request.query
    ctx.body = await search.getParagraphs(bookTitle, start, end)
  }
)
```
#### 8.2 - 添加 UI 功能
现在，我们的新端点已经就绪，我们为应用程序添加一些从书中查询和显示全部页面的前端功能。
在 `/public/app.js` 文件的 `methods` 块中添加如下的函数。
```
    /** Call the API to get current page of paragraphs */
    async getParagraphs (bookTitle, offset) {
      try {
        this.bookOffset = offset
        const start = this.bookOffset
        const end = this.bookOffset + 10
        const response = await axios.get(`${this.baseUrl}/paragraphs`, { params: { bookTitle, start, end } })
        return response.data.hits.hits
      } catch (err) {
        console.error(err)
      }
    },
    /** Get next page (next 10 paragraphs) of selected book */
    async nextBookPage () {
      this.$refs.bookModal.scrollTop = 0
      this.paragraphs = await this.getParagraphs(this.selectedParagraph._source.title, this.bookOffset + 10)
    },
    /** Get previous page (previous 10 paragraphs) of selected book */
    async prevBookPage () {
      this.$refs.bookModal.scrollTop = 0
      this.paragraphs = await this.getParagraphs(this.selectedParagraph._source.title, this.bookOffset - 10)
    },
    /** Display paragraphs from selected book in modal window */
    async showBookModal (searchHit) {
      try {
        document.body.style.overflow = 'hidden'
        this.selectedParagraph = searchHit
        this.paragraphs = await this.getParagraphs(searchHit._source.title, searchHit._source.location - 5)
      } catch (err) {
        console.error(err)
      }
    },
    /** Close the book detail modal */
    closeBookModal () {
      document.body.style.overflow = 'auto'
      this.selectedParagraph = null
    }
```
这五个函数提供了通过页码从书中下载和分页（每次十个段落）的逻辑。
现在，我们需要添加一个 UI 去显示书的页面。在 `/public/index.html` 的 `` 注释下面添加如下的内容。
```
          {{ selectedParagraph._source.title }}
          {{ selectedParagraph._source.author }}
        Locations {{ bookOffset - 5 }} to {{ bookOffset + 5 }}
            {{ paragraph._source.text }}
            {{ paragraph._source.text }}
        Prev Page
        Close
        Next Page
```
再次重启应用程序服务器（`docker-compose up -d --build`），然后打开 `localhost:8080`。当你再次点击搜索结果时，你将能看到关键字附近的段落。如果你感兴趣，你现在甚至可以看这本书的剩余部分。
![preview webapp book page](/data/attachment/album/201804/29/230018xfogb6jahadhk77d.png)
祝贺你！你现在已经完成了本教程的应用程序。
你可以去比较你的本地结果与托管在这里的完整示例 —— 。
### 9 - Elasticsearch 的缺点
#### 9.0 - 耗费资源
Elasticsearch 是计算密集型的。[官方建议](https://www.elastic.co/guide/en/elasticsearch/guide/current/hardware.html) 运行 ES 的机器最好有 64 GB 的内存，强烈反对在低于 8 GB 内存的机器上运行它。Elasticsearch 是一个 *内存中* 数据库，这样使它的查询速度非常快，但这也非常占用系统内存。在生产系统中使用时，[他们强烈建议在一个集群中运行多个 Elasticsearch 节点](https://www.elastic.co/guide/en/elasticsearch/guide/2.x/distributed-cluster.html)，以实现高可用、自动分区和一个节点失败时的数据冗余。
我们的这个教程中的应用程序运行在一个 $15/月 的 GCP 计算实例中（ [search.patricktriest.com](https://search.patricktriest.com/)），它只有 1.7 GB 的内存，它勉强能运行这个 Elasticsearch 节点；有时候在进行初始的数据加载过程中，整个机器就 ”假死机“ 了。在我的经验中，Elasticsearch 比传统的那些数据库，比如，PostgreSQL 和 MongoDB 耗费的资源要多很多，这样会使托管主机的成本增加很多。
### 9.1 - 与数据库的同步
对于大多数应用程序，将数据全部保存在 Elasticsearch 并不是个好的选择。可以使用 ES 作为应用程序的主要事务数据库，但是一般不推荐这样做，因为在 Elasticsearch 中缺少 ACID，如果大量读取数据的时候，它能导致写操作丢失。在许多案例中，ES 服务器更多是一个特定的角色，比如做应用程序中的一个文本搜索功能。这种特定的用途，要求它从主数据库中复制数据到 Elasticsearch 实例中。
比如，假设我们将用户信息保存在一个 PostgreSQL 表中，但是用 Elasticsearch 去提供我们的用户搜索功能。如果一个用户，比如，“Albert”，决定将他的名字改成 “Al”，我们将需要把这个变化同时反映到我们主要的 PostgreSQL 数据库和辅助的 Elasticsearch 集群中。
正确地集成它们可能比较棘手，最好的答案将取决于你现有的应用程序栈。这有多种开源方案可选，从 [用一个进程去关注 MongoDB 操作日志](https://github.com/mongodb-labs/mongo-connector) 并自动同步检测到的变化到 ES，到使用一个 [PostgresSQL 插件](https://github.com/zombodb/zombodb) 去创建一个定制的、基于 PSQL 的索引来与 Elasticsearch 进行自动沟通。
如果没有有效的预构建选项可用，你可能需要在你的服务器代码中增加一些钩子，这样可以基于数据库的变化来手动更新 Elasticsearch 索引。最后一招，我认为是一个最后的选择，因为，使用定制的业务逻辑去保持 ES 的同步可能很复杂，这将会给应用程序引入很多的 bug。
让 Elasticsearch 与一个主数据库同步，将使它的架构更加复杂，其复杂性已经超越了 ES 的相关缺点，但是当在你的应用程序中考虑添加一个专用的搜索引擎的利弊得失时，这个问题是值的好好考虑的。
### 总结
在很多现在流行的应用程序中，全文搜索是一个非常重要的功能 —— 而且是很难实现的一个功能。对于在你的应用程序中添加一个快速而又可定制的文本搜索，Elasticsearch 是一个非常好的选择，但是，在这里也有一个替代者。[Apache Solr](https://lucene.apache.org/solr/) 是一个类似的开源搜索平台，它是基于 Apache Lucene 构建的，与 Elasticsearch 的核心库是相同的。[Algolia](https://www.algolia.com/) 是一个搜索即服务的 Web 平台，它已经很快流行了起来，并且它对新手非常友好，很易于上手（但是作为折衷，它的可定制性较小，并且使用成本较高）。
“搜索” 特性并不是 Elasticsearch 唯一功能。ES 也是日志存储和分析的常用工具，在一个 ELK（Elasticsearch、Logstash、Kibana）架构配置中通常会使用它。灵活的全文搜索功能使得 Elasticsearch 在数据量非常大的科学任务中用处很大 —— 比如，在一个数据集中正确的/标准化的条目拼写，或者为了类似的词组搜索一个文本数据集。
对于你自己的项目，这里有一些创意。
* 添加更多你喜欢的书到教程的应用程序中，然后创建你自己的私人图书馆搜索引擎。
* 利用来自 [Google Scholar](https://scholar.google.com/) 的论文索引，创建一个学术抄袭检测引擎。
* 通过将字典中的每个词索引到 Elasticsearch，创建一个拼写检查应用程序。
* 通过将 [Common Crawl Corpus](https://aws.amazon.com/public-datasets/common-crawl/) 加载到 Elasticsearch 中，构建你自己的与谷歌竞争的因特网搜索引擎（注意，它可能会超过 50 亿个页面，这是一个成本极高的数据集）。
* 在 journalism 上使用 Elasticsearch：在最近的大规模泄露的文档中搜索特定的名字和关键词，比如， [Panama Papers](https://en.wikipedia.org/wiki/Panama_Papers) 和 [Paradise Papers](https://en.wikipedia.org/wiki/Paradise_Papers)。
本教程中应用程序的源代码是 100% 公开的，你可以在 GitHub 仓库上找到它们 —— 
我希望你喜欢这个教程！你可以在下面的评论区，发表任何你的想法、问题、或者评论。
---
作者简介：
全栈工程师，数据爱好者，学霸，“构建强迫症患者”，探险爱好者。
---
via: 
作者：[Patrick Triest](https://blog.patricktriest.com/author/patrick/) 译者：[qhwdw](https://github.com/qhwdw) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出