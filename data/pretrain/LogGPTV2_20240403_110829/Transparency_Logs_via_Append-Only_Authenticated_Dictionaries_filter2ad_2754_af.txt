Certainly! Here is the optimized version of the text, aiming for clarity, coherence, and professionalism:

---

### Elimination of Large Public Parameters and Trusted Setup

Eliminating large public parameters and the trusted setup would result in larger append-only proofs. This trade-off may be acceptable if the proof size and prover time remain manageable. Other argument systems, such as Hyrax [101], Ligero [5], and Aurora [11], can achieve similar results. However, Aurora and Ligero would increase the append-only proof verification time to linear, which could be prohibitive. Bulletproofs [24] would further increase this verification time to quasilinear. In contrast, Hyrax can reduce the verification time to sublinear if the circuit is sufficiently parallel or has a wiring pattern that satisfies a technical regularity condition [101].

### Recursively-Composable Arguments

Another promising approach involves using recursively-composable SNARKs [12, 14] to obtain AADs. Such SNARKs can structure the verification of the append-only property recursively, thereby reducing the overhead by avoiding the need to operate on the entire dictionary. We are aware of concurrent work exploring this approach, but it has not yet been peer-reviewed or published in an online archive. Currently implemented systems operate at the 80-bit security level due to the high cost of increasing the security of the elliptic curves used in recursive SNARK constructions, which have low embedding degrees [12]. In comparison, our implementation achieves 100-bit security after accounting for recent advances in computing discrete logs [66] and our q-SDH assumption with \( q = 2^{20} \) [16]. We can further enhance this to 118 bits without performance loss by adopting 128-bit-secure BLS12-381 curves [19].

### Conclusion

In this work, we introduced the first append-only authenticated dictionary (AAD) that achieves polylogarithmic proof sizes and append times. Unlike previous approaches, our construction assumes only a single fully-malicious server and does not rely on users to collectively verify the dictionary. Our analysis demonstrates that AADs can significantly reduce bandwidth in current CT logs and CONIKS logs, which publish digests more frequently than users check their PK in the log. However, as our evaluation shows, AADs are not yet practical for deployment, particularly due to high append times and memory usage. Future work should focus on optimizing the construction, the implementation, or both. Additionally, we introduced the first efficient append-only authenticated set (AAS), which can be used to implement Google's Revocation Transparency (RT) [58].

### Open Problems

We identify two key directions for future research. First, can we build efficient AADs with polylogarithmic proof sizes from standard assumptions, such as the existence of collision-resistant hash functions (CRHFs)? If not, what are the lower bounds? Second, can we develop "zero-knowledge" AADs that leak no information during queries?

### Acknowledgments

We thank Marten van Dijk for suggesting the "sparse" prefix tree approach and Madars Virza for productive discussions that guided this work. We also appreciate the anonymous reviewers' valuable feedback. This research was supported in part by the USA NSF under CNS grants 1413920, 1718782, 1514261, and 1652259, by DARPA & SPAWAR under grant N66001-15-C-4066, by HK RGC under grant ECS-26208318, and by a NIST grant.

### References

[References listed here]

---

This version maintains the technical content while improving readability and flow.