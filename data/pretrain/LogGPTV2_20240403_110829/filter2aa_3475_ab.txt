8 
make all three types of environments, and we need to update these environments over 
time. In order to minimize the reproduction time, we have made multiple environments 
of Windows 7, Windows 10, Windows 11, and covered both x86 and x64. 
The third question depends on our experience on debugging different samples. For 
example, for those who have analyzed the Windows kernel heap overflow vulnerability, 
Windows kernel debugging and Driver Verifier are two basic skills. Besides, for those 
who have analyzed dwmcore vulnerability, it is necessary to use Windows remote 
debugging (because directly attaching the dwm process will cause system UI to become 
unresponsive). The more experience we have, the better we'll answer this question. 
Test and improve the system 
No method is perfect, to make our system more accurate, we have made the following 
tests and improvements: 
1. 
Use the collected historical Windows LPE 0day samples to test the rules, eliminate 
false positives and false negatives, and improve the accuracy of the rules 
2. 
Test the rules with the collected public pocs/exploits in the same way as above 
3. 
For some cases where the public pocs/exploits cannot be collected, try to write the 
poc/exploit and test it 
4. 
Apply the rules to a large number of samples for stress testing to eliminate the 
observed false positives and false negatives 
5. 
Continue to convert latest exploit techniques into rules, write and test the rules and 
eliminate false positives and false negatives 
One year after the system was deployed, we had caguht lots of Windows LPE 
vulnerabilities. 
In next part, we will share three cases which hunt by our system: 
1. 
CVE-2021-1732: an itw LPE 0day in Windows win32k subsystem  
2. 
CVE-2021-33739: an itw LPE 0day in Windows Desktop Window Manager 
3. 
Unknown CVE: an itw LPE 1day in Windows Common Log File System  
Results 
The Story of CVE-2021-1732  
In December 10, 2020, we caught the first itw Windows kernel LPE 0day. Microsoft 
assigned CVE-2021-1732 to this vulnerability.  
The itw sample was from our private dataset, we noticed it because it used 
HMValidateHandle to leak kernel information, which is a strong signature of Windows 
kernel LPE exploit. Further analysis showed the sample exploited a type confusion 0day 
in win32k module. 
It is worth mentioning that the itw sample was used as an independent component. 
9 
When using the sample, you need to provide a Pid as a parameter, the Pid indicates the 
process which needs to be elevated. The targeted process will be terminated first, then 
restarted with system privilege. If you run the sample directly, it will also escalate itself 
to the system privilege, but will exit without any visible behavior. 
Here are some highlights of this itw sample: 
1. 
It targeted the latest version of Windows 10 1909 64-bits operating system at that 
time (The sample was compiled in May 2020) 
2. 
It uses GetMenuBarInfo to built arbitrary address read primitive, which is novel 
3. 
Before exploit, the itw sample detected specific antivirus and performed system 
version check 
The rest of the details about this 0day can refer to our blog.  
The Story of CVE-2021-33739 
In May 22, 2021, we caught the second itw Windows LPE 0day. Microsoft assigned CVE-
2021-33739 to this vulnerability.  
As I mentioned in the "Build the right rule" part, we will regularly predict the most likely 
vulnerability and write rules. Around May 2020, we wrote some rules for dwm 
vulnerability, after catching some dwm ndays, we caught an unfamiliar dwm sample on 
May 22, 2021. Further analysis showed there were an 1day exploit and another 0day in 
this sample. 
When we first met the sample, we didn't know it was compiled based a publish exploit 
code. As usual, we reproduced the sample in a full-patched environment. The 
reproduced result clearly showed that there is a 0day in the sample, which is an UAF in 
dwmcore. 
Then we tracked the relative source code on GitHub, which is an exploit of CVE-2021-
26868. The itw sample just replaced the shellcode part. At that time, we are a little 
confused: How can an 1day sample contains a 0day? 
After careful confirmation, we concluded that the author accidentally introduced a new 
bug when writing the exploit for CVE-2021-26868. If so, this 0day can not be classified 
to “itw 0day”. 
This is what we sent to MSRC before the bug was fixed: 
10 
This is the exploit status finally published by MSRC: 
So It's really an interesting case. 
Let me talk more about CVE-2021-33739. 
This 
vulnerability 
is 
caused 
by 
unbalanced 
reference 
count 
on 
CinteractionTrackerBindingManager Object in dwmcore. 
In 
order 
to 
trigger 
the 
vulnerability, 
we 
only 
need 
to 
create 
a 
CInteractionTrackerBindingManagerMarshaler 
resource 
and 
a 
CinteractionTrackerMarshaler 
resource, 
and 
bind 
the 
same 
CinteractionTrackerMarshaler 
resource 
twice 
to 
CinteractionTrackerBindingManagerMarshaler resource, and do not release these 
resource manully. 
DWORD dwDataSize = 12; 
DWORD* szBuff = (DWORD*)malloc(4 * 3); 
szBuff[0] = 0x02;   // resource1_id is DirectComposition::CInteractionTrackerMarshaler 
szBuff[1] = 0x02;   // resource2_id is DirectComposition::CInteractionTrackerMarshaler 
szBuff[2] = 0xffff; // new_entry_id 
Under normal condition (when resource1_id is different from resource2_id), the 
CinteractionTrackerBindingManager object will call ProcessSetTrackerBindingMode 
twice to add reference count by 2. Then the code will call RemoveTrackerBindings twice 
to sub reference count, and release the CinteractionTrackerBindingManager object 
normally when reference count is reduced to 0. 
// reference count starts from 0 
CResourceFactory::Create +1 .............................................. ref_count = 1 
CResourceTable::CreateEmptyResource +1 ................................... ref_count = 2 
CComposition::Channel_CreateResource -1 .................................. ref_count = 1 
CInteractionTrackerBindingManager::ProcessSetTrackerBindingMode +1 ....... ref_count = 2 
CInteractionTrackerBindingManager::ProcessSetTrackerBindingMode +1 ....... ref_count = 3 
CResourceTable::DeleteHandle -1 .......................................... ref_count = 2 
CInteractionTrackerBindingManager::RemoveTrackerBindings -1 .............. ref_count = 1 
CInteractionTrackerBindingManager::RemoveTrackerBindings -1 .............. ref_count = 0 
// release object when reference count is reduced to 0  
In a vulnerability scenario, the reference count of CinteractionTrackerBindingManager 
object 
will 
change 
different 
from 
normal 
condition, 
it 
will 
call 
ProcessSetTrackerBindingMode only once to add reference count by 1. But the code 
will still call RemoveTrackerBindings twice to sub reference count, in the first 
RemoveTrackerBindings call, the reference count of CinteractionTrackerBindingManager 
object will be reduced to 0, and the CinteractionTrackerBindingManager object will be 
11 
freed in InternalRelease. In the second RemoveTrackerBindings call, when the code tries 
to get some data from the freed CinteractionTrackerBindingManager object, it will 
cause UAF. 
// reference count starts from 0 
CResourceFactory::Create +1 .............................................. ref_count = 1 
CResourceTable::CreateEmptyResource +1 ................................... ref_count = 2 
CComposition::Channel_CreateResource -1 .................................. ref_count = 1 
CInteractionTrackerBindingManager::ProcessSetTrackerBindingMode +1 ....... ref_count = 2 
CInteractionTrackerBindingManager::ProcessSetTrackerBindingMode +1 
CResourceTable::DeleteHandle -1 .......................................... ref_count = 1 
CInteractionTrackerBindingManager::RemoveTrackerBindings -1 .............. ref_count = 0 
// release object when reference count is reduced to 0  
CInteractionTrackerBindingManager::RemoveTrackerBindings // UAF in this call ! 
The Story of a “Patched” 1day 
In October 16, 2021, we caught a new itw Windows clfs 1day. The sample was from 
VirusTotal. 
As I mentioned in the "Build the right rule" part, we will regularly write rules for latest 
exploit techniques. On October 16, 2021, the rule we wrote for Pipe Attribute hit a 
sample. Further testing revealed that the sample exploited a vulnerability which affected 
all supported Windows versions before September 2021.  
Due to lack of information, we are unable to determine the CVE number of this 
vulnerability, it may be one of them or none of them: 
CVE-2021-36963 
CVE-2021-36955 
CVE-2021-38633 
The root cause of this 1day is the clfs module lacks some checks on the Client Context 
Offset. An attacker can take advantage of this to provide an invalid Client Context Offset.  
The itw sample leveraged this to make the first Client Context Offset(0x2B5) point to the 
second Container Context Offset.  
The picture is from “DeathNote of Microsoft Windows Kernel”, KeenLab, 2016 
It then use an 1-bit flip in FlushMetadata to change the second Container Context 
Offset from 0x13A0 to 0x1BA0, and makes the Container Context Offset point to a fake 
ClfsContainer object.  
12 
1: kd> .formats 13A0 
Evaluate expression: 
  Hex:     00000000`000013a0 
  Binary:  00000000 00000000 00000000 00000000 00000000 00000000 00010011 10100000 
1: kd> ? 13 | 8 
Evaluate expression: 27 = 00000000`0000001b 
1: kd> .formats 1BA0 
Evaluate expression: 
  Hex:     00000000`00001ba0 
  Binary:  00000000 00000000 00000000 00000000 00000000 00000000 00011011 10100000 
With the help of the fake ClfsContainer, the exploit hijacked two virtual methods: 
CClfsContainer::Release and CClfsContainer::Remove, and built an arbitrary address 
write primitive based on that. 
The normal virtual table of a ClfsContainer object: 
1: kd> dps fffff804`2e9354b8 
fffff804`2e9354b8  fffff804`2e960c10 CLFS!CClfsContainer::AddRef 
fffff804`2e9354c0  fffff804`2e94c060 CLFS!CClfsContainer::Release 
fffff804`2e9354c8  fffff804`2e92b570 CLFS!CClfsContainer::GetSListEntry 
fffff804`2e9354d0  fffff804`2e9489e0 CLFS!CClfsContainer::Remove 
The fake virtual table of the fake ClfsContainer object: 
0: kd> dps 0000003a`b777f1e8 
0000003a`b777f1e8  00000000`00000000 
0000003a`b777f1f0  fffff804`2f0cc390 nt!HalpDmaPowerCriticalTransitionCallback 
0000003a`b777f1f8  00000000`00000000 
0000003a`b777f200  fffff804`2ef95f70 nt!XmXchgOp 
Apart from this, the itw sample built an arbitrary address read primitive using the “Pipe 
Attribute” method described in the “Scoop the Windows 10 pool!”. In order to get the 
address of a Pipe Attribute, the exploit using another public method, it queried 
SystemBigPoolInformation to leaking the address of a Pipe Attribute object. With the 
kernel arbitrary address read and write primitives, the exploit successfully swapped the 
token of current process with system token, and spawned a shell with system privilege. 
Let's take a look at how Microsoft fixed this vulnerability. They only checked the value of 
Client Context Offset to make sure it couldn't be less than 0x1368! 
13 
What if we construct a Client Context Offset that is greater than 0x1368, and make the 
Client Context Offset point directly to a CclfsContainer object?  
We reported this variant to MSRC at December 2021, Microsoft fixed this case in April 
2022 and assigned CVE-2022-24481 to it. 
Suggestions and insights 
Some detection suggestions on Windows LPE vulnerabilities: 
Choose the most suitable method within your capability 
Carefully study historical cases is always a good thing 
Keep an eye out for new variants of a new itw vulnerabillity 
Some insights into the future trends of itw Windows LPE 0day: 
More vulnerabilities in clfs may appear in the future 
“Pipe Attribute” method will be using again in the future 
ITW exploits which use the following techniques may appear in the future: 
➢ 
Arbitrary address read/write with the help of WNF, POC2021 
➢ 
Arbitrary address read/write with the help of ALPC, Blackhat Asia 2022 
➢ 
Arbitrary address read/write with the help of I/O Ring, TyphoonCon 2022 
Reference 
1. https://github.com/synacktiv/Windows-kernel-SegmentHeap-Aligned-Chunk-Confusion 
2. https://securelist.com/puzzlemaker-chrome-zero-day-exploit-chain/102771/ 
3. https://research.nccgroup.com/2021/07/15/cve-2021-31956-exploiting-the-windows-
kernel-ntfs-with-wnf-part-1/ 
4. https://research.nccgroup.com/2021/08/17/cve-2021-31956-exploiting-the-windows-
14 
kernel-ntfs-with-wnf-part-2/ 
5. https://vul.360.net/archives/83 
6. https://securelist.com/zero-day-vulnerability-in-desktop-window-manager-cve-2021-
28310-used-in-the-wild/101898/ 
7. https://www.zerodayinitiative.com/blog/2021/5/3/cve-2021-26900-privilege-escalation-
via-a-use-after-free-vulnerability-in-win32k 
8. https://ti.dbappsecurity.com.cn/blog/index.php/2021/02/10/windows-kernel-zero-day-
exploit-is-used-by-bitter-apt-in-targeted-attack/ 
9. https://github.com/KangD1W2/CVE-2021-26868 
10. https://i.blackhat.com/Asia-22/Friday-Materials/AS-22-Xu-The-Next-Generation-of-
Windows-Exploitation-Attacking-the-Common-Log-File-System.pdf 
11. https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-
primitive-on-windows-11/ 
12. https://github.com/oct0xor/presentations/blob/master/2019-02-
Overview%20of%20the%20latest%20Windows%20OS%20kernel%20exploits%20found
%20in%20the%20wild.pdf 
13. https://research.checkpoint.com/2020/graphology-of-an-exploit-volodya/ 
14. https://research.checkpoint.com/2020/graphology-of-an-exploit-playbit/