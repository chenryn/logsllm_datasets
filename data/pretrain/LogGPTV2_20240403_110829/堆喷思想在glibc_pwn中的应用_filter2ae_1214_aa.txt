# 堆喷思想在glibc pwn中的应用
## 前言
据笔者观察，在CTF比赛中许多glibc
pwn题难以结合实际漏洞对选手进行考察，web类的题目和CVE结合的更紧密一点。个人认为CTF作为信息安全爱好者入门的一个途径应该更加偏向实战中的技巧对选手的技能进行考察。近些年的Real
World模式，有`qemu逃逸`、`docker逃逸`、`VMware逃逸`、`浏览器沙箱逃逸`、`IOT设备破解`等新型题目，和实际漏洞更加贴近。`kernel
pwn`题目也让二进制选手把目光放在更底层的操作系统部分。
## 堆喷介绍
### 基本概念
堆喷并没有一个官方的定义，我们根据这种攻击技术的特点总结一下。堆喷是在`shellcode`之前加上大量的`slide
code(滑板指令)`，组成一个注入代码段。之后多次申请内存(一般是`堆等动态内存`)，用注入代码段反复填充，之后结合其他攻击技术来控制程序执行流，使其跳转到堆上执行，最终得以执行`shellcode`。
堆喷不同于`UAF`，UAF一般都有明确的可以重用的内存区域，不需要"喷射"多个对象内存，通常只需要将目标对象放到之前已经释放/易受攻击的内存空间中即可。
### 攻击原理
注入代码段的组成为`滑板指令+shellcode`，其中后者只需编写对应系统/架构/软件的恶意代码。以`32位windows`为例，前者一般使用`0x0c0c0c0c`。根据微软官网对于虚拟内存分配的介绍可以得知每个用户模式进程都有其各自的专用虚拟地址空间，但在内核模式下运行的所有代码都共享称为`系统空间`的单个虚拟地址空间。用户模式进程的虚拟地址空间称为`用户空间`
。
> 在 32 位 Windows 中，可用的虚拟地址空间共计为 2^32 字节（4 GB）。 通常，较低的 2 GB 用于用户空间，较高的 2 GB
> 用于系统空间。
也就是说这里的`0~0x7fffffff`的虚拟地址属于用户空间。
> 其中在`XP
> sp3`系统上的内存探测发现各种内存数据在内存地址的分布大概为`栈->堆->全局静态变量(从低地址道高地址)`，由此可知堆的起始分配地址是很低的。
>
>
> 当申请大量内存，堆很有可能覆盖到的地址是0x0A0A0A0A（160M），0x0C0C0C0C（192M），0x0D0D0D0D（208M）等等几个地址，这也是为什么一般的网马里面进行堆喷时，申请的内存大小一般都是200M的原因，主要是为了保证能覆盖到`0x0C0C0C0C`地址
那么为什么要采取`slide
code+shellcode`的组成形式呢，直接都用`shellcode`不好吗？这个问题我们可以举个小例子来看：假如可控内存大小为1kb，一个shellcode长度为16字节，假如我们填满shellcode，即64个shellcode，因每次需要定位到shellcode的头部才能完成执行shellcode的完整过程，我们假设其中有一个函数指针，其位置是随机的，成功执行sc的概率为`64/1024=6.25%`；如果我们采用`1008
bytes slide code+ 16 bytes shellcode`的方式，当执行`slide
code`的时候依然可以通过`滑栈`等指令往下执行到shellocde，此时成功执行sc的概率为`(1008+1)/1024=98.5%`，且差距会随着内存空间增大而越发明显，当到了我们实际虚拟内存中，触发成功的概率甚至高达99.9%。
第二个问题是我们为什么要选择`0x0c0c0c0c`这个值而不是`\x90`这种`nop`作为我们的滑板指令呢？这个问题跟我们控制执行流的方式有关，目前我们使用较多的攻击方式是攻击函数的虚表指针(以`c++`编写的软件为多)，虚表就是一个对象，里面存储了许多函数指针，假如我们拿`\x90`作为滑板指令，则这些函数指针都被覆盖成了`0x90909090`，在执行这些函数的时候会跳转到`0x90909090`的内核空间去执行代码，软件crash。而我们采用堆喷的方式让`0x0c0c0c0c`的内容也会0x0c0c0c0c，这种情况下无论是一级函数指针还是二级甚至三级指针，都能最终从`0x0c0c0c0c`这块地址开始执行，最终经过一系列的滑板指令到达shellcode，获取权限。
## TSCTF2019 薛定谔的堆块
这道题目是TSCTF(天枢CTF)2019的一道题目，当时是零解。出题人为`w1tcher`师傅，据`p4nda`师傅说他和`w1tcher`师傅聊天的时候谈到要出一道非传统的glibc
pwn，考验大家对于`堆喷思维`的了解和应用。遗憾的是当时对此知之甚少，现分析`w1tcher`师傅赛后给的wp，帮助大家了解这道涉及到堆喷的glibc
pwn。
题目下载链接如下：[文件](https://github.com/xmzyshypnc/xz_files/tree/master/tsctf2019/%E8%96%9B%E5%AE%9A%E8%B0%94/p1ayer.tar)
### 题目分析
这道题是一道linux glibc pwn，拿checksec查看一下保护机制发现这是一个32位的程序，开启了所有常见保护。
    *] '/home/wz/Desktop/CTF/tsctf2019/brother/brother'
        Arch:     i386-32-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
主要功能函数为`play`函数，共实现了5个功能，分别为`Create`、`Display`、`Delete`、`Modify`和`CallFuc`
    void play()
    {
      while ( 1 )
      {
        menu();
        switch ( read_choice() )
        {
          case 1:
            Create();
            break;
          case 2:
            Display();
            break;
          case 3:
            Delete();
            break;
          case 4:
            Modify();
            break;
          case 5:
            CallFuc();
            break;
          case 6:
            puts("Thank you for using");
            exit(0);
            return;
          default:
            puts("Choice error!");
            break;
        }
      }
    }
Create函数主要是创建新的chunk，每一次Create会调用`0x10`次`malloc(size+4)`，分配一组相同大小的chunk，并且随机地将这些chunk地址及size存放在一个`bss`上一个大区块的16个小区域内。chunk的数量不超过`0x10*0x100`。并且将这`0x10`个节点开始的位置记录在`dword_4008`。
每次在读取完用户输入之后，会根据用户输入的`type`在`chunk[size]`后追加一个四字节的函数指针。
这里的`read_str`函数在读取输入的时候调用参数为`chunk_addr`及`size+1`，函数内部会在输入最后填'\x00'，这样就保证了输出会有`零字符截断`。
    unsigned int Create()
    {
      unsigned int result; // eax
      int choice; // eax
      unsigned int i; // [esp+8h] [ebp-20h]
      signed int j; // [esp+Ch] [ebp-1Ch]
      signed int l; // [esp+Ch] [ebp-1Ch]
      int k; // [esp+10h] [ebp-18h]
      int size; // [esp+14h] [ebp-14h]
      _DWORD *v7; // [esp+1Ch] [ebp-Ch]
      for ( i = 0; i  0x20000 )
        return puts("Size error!");
      for ( j = 0; j  2 )
        {
          if ( choice == 3 )
          {
            *v7 = &unk_401C;
          }
          else if ( choice == 4 )
          {
            *v7 = &unk_4024;
          }
        }
        else if ( choice == 1 )
        {
          *v7 = &unk_400C;
        }
      }
      printf("Note creation success! Index is : %d - %d\n", 16 * i, 16 * (i + 1) - 1);
      result = i;
      dword_4008 = i;
      return result;
    }
    /*
    .data:00004010                 dd offset common
    .data:00004014 unk_4014        db  10h                 ; DATA XREF: Create+266↑o
    .data:00004015                 db  27h ; '
    .data:00004016                 db    0
    .data:00004017                 db    0
    .data:00004018                 dd offset transparent
    .data:0000401C unk_401C        db  64h ; d             ; DATA XREF: Create+273↑o
    .data:0000401D                 db    0
    .data:0000401E                 db    0
    .data:0000401F                 db    0
    .data:00004020                 dd offset Emmm
    .data:00004024 unk_4024        db 0C8h                 ; DATA XREF: Create+280↑o
    .data:00004025                 db    0
    .data:00004026                 db    0
    .data:00004027                 db    0
    .data:00004028                 dd offset anoymous
    */
    int common()
    {
      return puts("I am a common man!");
    }
    int transparent()
    {
      return puts("I am a transparent person!");
    }
    int Emmm()
    {
      return puts("flag is flag{1t_i5_a_5ecr2t}!");
    }
    int anoymous()
    {
      return puts("I am an anonymous person!");
    }
    unsigned int __cdecl read_str(int str, unsigned int len)
    {
      int v2; // eax
      int v3; // eax
      unsigned int result; // eax
      char buf; // [esp+13h] [ebp-15h]
      unsigned int v6; // [esp+14h] [ebp-14h]
      ssize_t v7; // [esp+18h] [ebp-10h]
      unsigned int v8; // [esp+1Ch] [ebp-Ch]
      v8 = __readgsdword(0x14u);