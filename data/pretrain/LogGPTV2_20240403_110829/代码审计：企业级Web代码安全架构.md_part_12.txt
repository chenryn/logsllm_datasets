$smarty -> assign(*QISHI', $_CFG);
$smarty -> assign(*page_select', Spage_select) ;
首先看到包含了include/template_lite/classtemplate.php文件，这是一个映射程序
模板的类，由PaulLockaby paul和MarkDickenson编写，由于该文件较大，我们这里
不再仔细分析，继续往下跟进，可以看到这段代码实例化了这个类对象赋值给$smarty
变量，继续跟进则回转到index.php文件代码：
If (1$smarty->is_cached (Smypage [*tp1'], $cached_id) )
require_once (QISHI_ROOT_PATH. *include/mysql .class php*) 
Sdb = ne? mysq1 ($dbhost, $dbuser, $dbpass, $dbname) ;
unset ($dbhost, $dbuser, $dbpass, $dbname) ;
$smarty=>display ($mypage [*tpl*], $cached_id) :
e1.s0
$smarty=>display ($mypage [ *tp1*], $cached_id) ;
判断是否已经缓存，然后调用displayO函数输出页面，审计到这里是否对整个程
---
## Page 79
64第二部分漏洞发现与防范
序的框架比较熟悉了？接下来像审计index.php文件一样跟进其他功能人口文件即可完
成代码通读。
3.3根据功能点定向审计
在有了一定的代码审计经验之后，一定会知道哪些功能点通常会有哪些漏洞，在
我们想要快速挖掘漏洞的时候就可以这样来做，首先安装好并且运行程序，到处点点，
浏览一下，看下程序有哪些功能，这些功能的程序文件分别是怎么样的，是独立的模
块还是以插件形式存在，或者是写在一个通用类里面，然后多处调用。在了解这些功
能的存在形式后，可以先寻找经常会出问题的功能点，简单黑盒测试一下，如果没有
发现很普通、很常见的漏润，再去读这个功能的代码，这样我们读起来就可以略过一
些刚才黑盒测试过的点，提高审计速度。
根据经验，我们来简单介绍几个功能点经常会出现的漏洞，如下所示：
1）文件上传功能。这里说的文件上传在很多功能点都会出现，比如像文章编
辑、资料编辑、头像上传、附件上传，这个功能最常见的漏润就是任意文件上传了，
后端程序没有严格地限制上传文件的格式，导致可以直接上传或者存在绕过的情况，
而除了文件上传功能外，还经常发生SQL注入漏洞。因为一般程序员都不会注意到
对文件名进行过滤，但是又需要把文件名保存到数据库中，所以就会存在SQL注人
漏洞。
2）文件管理功能。在文件管理功能中，如果程序将文件名或者文件路径直接在参
数中传递，则很有可能会存在任意文件操作的漏洞，比如任意文件读取等，利用的方
式是在路径中使用./或者跳转目录，如图3-12所示。
除了任意文件操作漏洞以外，还可能会存在XSS漏洞，程序会在页面中输出文件
名，而通常会疏忽对文件名进行过滤，导致可以在数据库中存入带有尖括号等特殊符
号的文件名，最后显示在页面上的时候就会被执行。
3）登录认证功能。登录认证功能不是指一个登录过程，面是整个操作过程中的认
证，目前的认证方式大多是基于Cookie和Session，不少程序会把当前登录的用户账号
等认证信息放到Cookie中，或许是加密方式，是为了保持用户可以长时间登录，不会
一退出浏览器或者Session超时就退出账户，进行操作的时候直接从Cookie中读取出
当前用户信息，这里就存在一个算法可信的问题，如果这段Cookie信息没有加salt一
类的东西，就可以导致任意用户登录漏洞，只要知道用户的部分信息，即可生成认证
---
## Page 80
第3章通用代码审计思路65
1238024
信中文：
文件管器
显生通空(hpoal//这件次及文决下的所有文学
文名存
文名
文持大小
B plad
bt
aplioad/
0.76 8
012
td
aplad
新本开级润明b
3.97 3
 fle
G feb
tt
oploed/./
0.1138
tt
spload/-J
3.71.18
C ioegts
 .tnls
bt
upload/-/
robetubt
0.34 18
图3-12
令牌，甚至有的程序会直接把用户名明文放到Cookie中，操作的时候直接取这个用户
名的数据，这也是常说的越权漏洞。
ESPCMS就多次被曝光存在这个漏洞，具体的漏洞分析在乌云上面可以直接看到，
其中一个漏洞信息如下，感兴趣的读者可以研究一下：
缺陷编号：
Woo Yun-2015-90324
漏润标题：
ESPCMS所有版本任意用户登录
相关厂商：
易思ESPCMS企业网站管理系统
漏润作者：
路人甲
4）找回密码功能。找回密码虽然看起来不像任意文件上传这种可以危害到服务
器安全的漏洞，但是如果可以重置管理员的密码，也是可以间接控制业务权限甚至
拿到服务器权限的。而找回密码功能的漏洞有很多利用场景，最常见的是验证码爆
破，目前特别是APP应用，请求后端验证码的时候大多是4位，并且没有限制验证
码错误次数和有效时间，于是就出现了爆破的漏洞。除此之外，还有验证凭证的算
法，这需要在代码中才能看到，所以我们做代码审计的时候可以看看这个算法是否
可信。
这些功能点上的漏洞需要我们多读代码才能积累经验。
---
## Page 81
66第二部分漏洞发现与防范
BugFree重装漏洞案例
针对功能点的审计是相对简单的，不过在使用这种方式审计之前建议先了解整个
程序的架构设计和运行流程，程序重装漏洞在早期是比较常见的，我们来看看BugFree
的程序安装功能，该程序之前被papaver爆出存在多个漏洞，其中就有一个重装漏洞。
BugFree安装文件在installindex.php，代码如下：
SL/0.9.0y PhP/5.2.17
bco.
Mys9.DOO
5.1.9e
5.1=
D+ 5.8.51a
24 5.2.1
OO0
D+ O0O
+ CCC
图3-13
可以看到程序又可以再次安装。
---
## Page 83
Cly第4章
漏洞挖掘与防范（基础篇）
每类漏洞都有针对性的审计技巧，在我们掌握了这些技巧之后，就可以有针对性
地挖掘我们想要的漏洞。漏洞大致分为SQL注人、XSS、文件操作、代码/命令执行、
变量覆盖以及逻辑处理，等等，这些都是常见的Web漏洞。
本章作为基础篇，只介绍最常见的SQL注人、XSS、CSRF漏洞，分析其原理、利
用方式，并介绍防范策略。
4.1SQL注入漏洞
SQL注入漏润可能是被人知道最多的漏润，哪怕再没有接触到安全的程序员，多
多少少会对这个词有所耳闻，它也是目前被利用得最多的漏洞。根据笔者维护公司waf
时统计的数据，它的攻击次数占总攻击拦截的一半以上。SQL注人漏洞的原理非常简
单，由于开发者在编写操作数据库代玛时，直接将外部可控的参数拼接到SQL语句中，
没有经过任何过滤就直接放人数据库引肇执行。
由于SQL注人是直接面对数据库进行攻击的，所以它的危害不言面喻，通常利用
SQL注入的攻击方式有下面几种：一是在权限较大的情况下，通过SQL注入可以直接
写人webshell，或者直接执行系统命令等。二是在权限较小的情况下，也可以通过注人
来获得管理员的密码等信息，或者修改数据库内容进行一些钓鱼或者其他间接利用。
针对SQL注人漏洞的利用工具也是越来越智能，sqlmap是目前被使用最多的注人
---
## Page 84
工具，这是一款国外开源的跨平台SQL注人工具，用Python开发，支持多种方式以及
几乎所有类型的数据库注人，对SQL注人漏洞的兼容性也非常强。
既然SQL注人是被利用最多的漏洞，因此它也是被研究最深的漏洞，针对不同的
漏洞代码情况和运行环境，有多种的利用方式，如普通注入、盲注、报错注入、宽字
节注人、二次注入等，但是它们的原理都是大同小异的，下面笔者会介绍怎么挖掘到
这些注人漏润。
4.1.1挖掘经验
SQL注入经常出现在登录页面、获取 HTTP头（user-agent/client-ip等）、订单处理
等地方，因为这几个地方是业务相对复杂的，登录页面的注入现在来说大多是发生在
HTTP头里面的 client-ip和x-forward-for，一般用来记录登录的IP地址，另外在订单
系统里面，由于订单涉及购物车等多个交互，所以经常会发生二次注入。我们在通读
代码挖掘漏洞的时候可以着重关注这几个地方。
4.1.1.1普通注入
这里说的普通注入是指最容易利用的 SQL注人漏洞，比如直接通过注入union查
询就可以查询数据库，一般的SQL注人工具也能够非常好地利用。普通注人有int型
和string型，在string型注入中需要使用单或双引号闭合，下面简单演示普通注入漏
洞、后面所有测试SQL注人漏润的数据表中数据都如图4-1所示。
对象userinfo@test(ocalhost）-
三
开始事务备注·筛选排序
id
username
password
 1 admin
123456
PI:EMAIL
 2 admin1
654321
PI:EMAIL
[图4-1
测试代码如下：
结采：*)：
print_z (mysq1l_fetch_rov(Sresult) ) ;
测试代码中GETid参数存在SQL注入漏润，测试方法如图4-2所示。
ll Logd URL http;//ocalhost/phpsafe/5.1.2.1/1.ph7id=1 union select 1,user[L.3,4
Split URL
fgecute
 Enable Post data Enable Reflemer
果:Array ([0] => 1 [1] =) rootelocalhost [2] =) 3 [3] =) 4 )
当前SQLi语句， SELBCT • FROM userinfo where id=-1 union select 1, user O,3, 4
图 4-2
从截图可以看到原本的SQL语句已被注入更改，使用了union查询到当前用户。
从上面的测试代码中可以发现，数据库操作存在一些关键字，比如 select from
mysql_connect、mysql_query、mysql_fetch_row等，数据库的查询方式还有update
insert、delete，我们在做白盒审计时，只需要查找这些关键字，即可定向挖据SQL注
入漏洞。
4.1.1.2编码注入
程序在进行一些操作之前经常会进行一些编码处理，而做编码处理的函数也是存
在问题的，通过输人转码函数不兼容的特殊字符，可以导致输出的字符变成有害数据，
在SQL注入里，最常见的编码注入是MySQL宽字节以及urldecode/rawurldecode函数
导致的。
1.宽字节注入
致一个编码转换的注入间题，也就是我们所熟悉的宽字节注人，当存在宽字节注
人漏润时，注入参数里带入%df%27，即可把程序中过滤的\（%5c）吃掉。举个例
子，假设/1.php?id=1里面的id参数存在宽字节注入漏洞，当提交/1.php?id=-1
and 1=1%23时,MySQL 运行的 SQL 语句为 select * from user where id=*1\′ and
1=1#”很明显这是没有注人成功的，我们提交的单引号被转义导致没有闭合前面的
单引号，但是我们提交/1.php?id=-1%dfand 1=1%23时，这时候MySQL运行的
SQL语句为：
---
## Page 86
第4章漏洞挖掘与防范（基础篇）71
select * from user where id='1i' and 1=1#*
这是由于单引号被自动转义成\，前面的%df和转义字符\反斜杠（%5c）组合成
了%df%5c，也就是“运”字，这时候单引号依然还在，于是成功闭合了前面的单
°1
出现这个漏润的原因是在PHP连接MySQL的时候执行了如下设置：
set character_set_client=gbk
告诉MySQL服务器客户端来源数据编码是GBK，然后MySQL服务器对查询
语句进行GBK转码导致反斜杠\被%df吃掉，而一般都不是直接设置character_set_
比character_set_client=gbk多干了两件事面已，SETNAMES‘gbk等同于如下代码：
LaS
character_set_connection=*gbk',
character_set_results='gbk',
character_set_client=gbk
这同样也是存在漏润的，另外官方建议使用mysql_set_charset方式来设置编码，
不幸的是它也只是调用了SETNAMES，所以效果也是一样的。不过mysql_set_charset
调用 SET NAMES 之后还记录了当前的编码，留着给后面mysql_real_escape_string 处
理字符申的时候使用，所以在后面只要合理地使用mysql_real_escape_string还是可以