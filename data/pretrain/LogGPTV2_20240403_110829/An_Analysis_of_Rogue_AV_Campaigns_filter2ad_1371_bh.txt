### Context-Aware Network Vulnerability Scanning (CANVuS)

#### Abstract
In this paper, we introduce a context-aware architecture designed to provide real-time information about network states and their changes for enterprise security applications. This architecture transforms data from infrastructure devices, network services, and passive probes into a uniform representation, which is then stored in a network state database. We also present CANVuS, a context-aware vulnerability scanning system built on this architecture. CANVuS triggers scanning operations based on changes detected in the network, ensuring that scans are performed only when necessary. Our experimental evaluation, conducted in a college-level academic network, demonstrates that CANVuS outperforms existing systems in terms of low detection latency while consuming fewer network resources.

#### Acknowledgments
We would like to express our gratitude to the following colleagues at the University of Michigan for their invaluable assistance: Paul Howell, Kirk Soluk, Dawn Isabel, Dan Maletta, Kevin Cheek, and Donald Winsor. This work was supported in part by the Department of Homeland Security (DHS) under contract numbers NBCHC080037, NBCHC060090, and FA8750-08-2-0147, the National Science Foundation (NSF) under contract numbers CNS 091639, CNS 08311174, CNS 0627445, and CNS 0751116, and the Department of the Navy under contract N00014-09-1-1042.

#### References
1. Abedin, M., Nessa, S., Al-Shaer, E., Khan, L.: Vulnerability analysis for evaluating quality of protection of security policies. In: Proceedings of the 2nd ACM Workshop on Quality of Protection (QoP 2006), Alexandria, VA (October 2006).
2. Ahmed, M.S., Al-Shaer, E., Khan, L.: Towards autonomic risk-aware security configuration. In: Proceedings of the 11th IEEE/IFIP Network Operations and Management Symposium (NOMS 2008), Salvador, Bahia, Brazil (April 2008).
3. Allman, M., Kreibich, C., Paxson, V., Sommer, R., Weaver, N.: Principles for developing comprehensive network visibility. In: Provos, N. (ed.) Proceedings of the 3rd USENIX Workshop on Hot Topics in Security, San Jose, CA, USA, July 29, USENIX Association (2008).
4. Allman, M., Paxson, V.: A reactive measurement framework. In: Claypool, M., Uhlig, S. (eds.) PAM 2008. LNCS, vol. 4979, pp. 92–101. Springer, Heidelberg (2008).
5. Ammann, P., Wijesekera, D., Kaushik, S.: Scalable, graph-based network vulnerability analysis. In: Proceedings of the 9th ACM Conference on Computer and Communications Security (CCS 2002), Washington DC (November 2002).
6. Bau, J., Bursztein, E., Gupta, D., Mitchell, J.: State of the art: Automated black-box web application vulnerability testing. In: Proceedings of the 31st IEEE Symposium on Security & Privacy (S&P 2010), Oakland, CA (May 2010).
7. Beattie, S., Arnold, S., Cowan, C., Wagle, P., Wright, C., Shostack, A.: Timing the application of security patches for optimal uptime. In: Proceedings of the 16th Annual LISA System Administration Conference, Philadelphia, PA, USA (November 2002).
8. Bjarte, E.: Prads - Passive Real-Time Asset Detection System. [Online]. Available: http://gamelinux.github.com/prads
9. Cheswick, W.R., Bellovin, S.M.: Firewalls and Internet Security; Repelling the Wily Hacker. Addison Wesley, Reading (1994).
10. Cooke, E., Bailey, M., Jahanian, F., Mortier, R.: The dark oracle: Perspective-aware unused and unreachable address discovery. In: Proceedings of the 3rd USENIX Symposium on Networked Systems Design and Implementation (NSDI 2006) (May 2006).
11. eEye Digital Security: Retina - Network Security Scanner. [Online]. Available: http://www.eeye.com/Products/Retina.aspx
12. Etingof, I.: Pysnmp. [Online]. Available: http://pysnmp.sourceforge.net/
13. Ingols, K., Lippmann, R., Piwowarski, K.: Practical attack graph generation for network defense. In: Proceedings of the 22nd Annual Computer Security Applications Conference, ACSAC 2006 (December 2006).
14. Kreibich, C., Sommer, R.: Policy-controlled event management for distributed intrusion detection. In: ICDCS Workshops, pp. 385–391. IEEE Computer Society, Los Alamitos (2005).
15. McAllister, S., Kirda, E., Kruegel, C.: Leveraging user interactions for in-depth testing of web applications. In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230, pp. 191–210. Springer, Heidelberg (2008).
16. Mehta, V., Bartzis, C., Zhu, H., Clarke, E., Wing, J.: Ranking attack graphs. In: Zamboni, D., Krügel, C. (eds.) RAID 2006. LNCS, vol. 4219, pp. 127–144. Springer, Heidelberg (2006).
17. Microsoft: Watcher - Web Security Testing Tool and Passive. [Online]. Available: http://websecuritytool.codeplex.com
18. Oberheide, J., Cooke, E., Jahanian, F.: CloudAV: N-version antivirus in the network cloud. In: Proceedings of the 17th USENIX Security Symposium (Security 2008), San Jose, CA (July 2008).
19. Oberheide, J., Cooke, E., Jahanian, F.: If It Ain’t Broke, Don’t Fix It: Challenges and New Directions for Inferring the Impact of Software Patches. In: 12th Workshop on Hot Topics in Operating Systems (HotOS XII), Monte Verità, Switzerland (May 2009).
20. Ou, X., Boyer, W.F., McQueen, M.A.: A scalable approach to attack graph generation. In: Proceedings of the 13th ACM Conference on Computer and Communications Security (CCS 2006), Alexandria, VA (October 2006).
21. Ou, X., Govindavajhala, S., Appel, A.W.: MulVAL: A logic-based network security analyzer. In: Proceedings of the 14th USENIX Security Symposium (USENIX Security 2005), Baltimore, MD (August 2005).
22. Paxson, V.: Bro: A System for Detecting Network Intruders in Real-Time. Computer Networks 31(23-24), 2435–2463 (1999).
23. Roesch, M.: Snort: Lightweight Intrusion Detection for Networks. In: Proceedings of the 13th Systems Administration Conference (LISA), pp. 229–238 (1999).
24. Sawilla, R.E., Ou, X.: Identifying critical attack assets in dependency attack graphs. In: Jajodia, S., López, J. (eds.) ESORICS 2008. LNCS, vol. 5283, pp. 18–34. Springer, Heidelberg (2008).
25. Tenable Network Security: Nessus - Vulnerability Scanner. [Online]. Available: http://www.nessus.org
26. Tenable Network Security: Nessus Passive Vulnerability Scanner. [Online]. Available: http://www.nessus.org/products/pvs/
27. Sheyner, O., Haines, J., Jha, S., Lippmann, R., Wing, J.M.: Automated generation and analysis of attack graphs. In: Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P 2002), Oakland, CA (May 2002).
28. Sinha, S., Bailey, M., Jahanian, F.: Shedding light on the configuration of dark addresses. In: Proceedings of the Network and Distributed System Security Symposium (NDSS 2007) (February 2007).
29. Sinha, S., Bailey, M.D., Jahanian, F.: One Size Does Not Fit All: 10 Years of Applying Context-Aware Security. In: Proceedings of the 2009 IEEE International Conference on Technologies for Homeland Security (HST 2009), Waltham, Massachusetts, USA (May 2009).
30. Sinha, S., Jahanian, F., Patel, J.M.: Wind: Workload-aware intrusion detection. In: Zamboni, D., Krügel, C. (eds.) RAID 2006. LNCS, vol. 4219, pp. 290–310. Springer, Heidelberg (2006).
31. Sourcefire: Sourcefire RNA - Real-Time Network Awareness. [Online]. Available: http://www.sourcefire.com/products/3D/rna
32. Sourcefire, Inc.: ClamAV Antivirus (2008). [Online]. Available: http://www.clamav.net/
33. University of Michigan: University of Michigan — ITS — Safe Computing — IT Security Services Office (April 2010). [Online]. Available: http://safecomputing.umich.edu/about/
34. Vallentin, M.: VAST: Network Visibility Across Space and Time. Master’s thesis, Technische Universität München (January 2009).

### HyperCheck: A Hardware-Assisted Integrity Monitor

#### Abstract
Over the past few years, virtualization has been widely adopted, ranging from densely populated cloud computing clusters to home desktop computers. Security researchers have embraced virtual machine monitors (VMMs) as a new mechanism to ensure deep isolation of untrusted software components. Unfortunately, their widespread adoption has made VMMs a prime target for attackers. In this paper, we present HyperCheck, a hardware-assisted tampering detection framework designed to protect the integrity of VMMs and, for some classes of attacks, the underlying operating system (OS). HyperCheck leverages the CPU System Management Mode (SMM), present in x86 systems, to securely generate and transmit the full state of the protected machine to an external server. Using HyperCheck, we were able to detect rootkits targeting the integrity of both the Xen hypervisor and traditional OSes. Moreover, HyperCheck is robust against attacks that aim to disable or block its operation. Our experimental results show that HyperCheck can produce and communicate a scan of the state of the protected software in less than 40ms.

#### Keywords
Hypervisor, Protection Framework, System Management Mode

#### 1 Introduction
Hypervisors have become the de facto standard in server consolidation due to their ability to decrease the energy footprint and cost of managing modern computing clusters. Additionally, hypervisors are increasingly used to enforce system security and resilience. This widespread adoption has attracted the attention of attackers towards VMM vulnerabilities. Recently, there has been a surge in reported vulnerabilities for both commercial and open-source hypervisors. To address these limitations and complement existing protection mechanisms, we designed HyperCheck, a hardware-assisted tampering detection framework. HyperCheck harnesses the CPU System Management Mode (SMM) to create a snapshot view of the current state of the CPU and memory registers of the protected machine. This information is securely transmitted to a remote analysis server, where it is compared with the initial state. If discrepancies are found, a human operator is notified. Our assumptions are that the attacker does not have physical access to the machine and that the SMM BIOS is locked and cannot be altered during runtime. We do not require trusted boot to initialize HyperCheck, but having a machine equipped with trusted boot can prevent attacks that simulate a hardware reset.

#### 2 Related Work
Protecting software from integrity attacks using hardware-assisted techniques is not new. Researchers have used special-purpose PCI devices to acquire physical memory for rootkit detection or forensic purposes. The closest system to our work is Copilot, which employed a special PCI device to poll the physical memory and send it to an admin station periodically. Unlike Copilot, HyperCheck does not require specialized hardware and offers a complete view of the CPU state, including its registers. Another related work is HyperGuard, which suggested using SMM to monitor the integrity of hypervisors. However, HyperCheck uses a network card to outsource the analysis, reducing the system busy time from seconds to milliseconds. DeepWatch offers detection of hypervisor rootkits using embedded micro-controllers in the chipset, but it is signature-based. HyperCheck performs anomaly detection and can identify a larger class of software rootkits. Flicker and TrustVisor use TPM-based methods and DRTM, respectively, to provide a minimal Trusted Code Base (TCB), but they require advanced hardware features. HyperCheck uses static Platform Configuration Registers (PCRs) to secure the boot process and has a lower overhead on the target machine.

#### 3 Threat Model
##### 3.1 Background of System Management Mode
System Management Mode (SMM) was introduced in the Intel386 SL and Intel486 SL processors and became a standard IA-32 feature in the Pentium processor. SMM is a separate CPU mode besides the protected and real modes. The original purpose of SMM was to provide a transparent mechanism for implementing platform-specific functions such as power management and system security. The processor enters SMM when the external SMM interrupt pin (SMI#) is activated or a SMI is received from the APIC. In SMM, the processor switches to a separate address space called system management RAM (SMRAM), where all hardware context is saved. The SMRAM can be made inaccessible from other CPU operating modes, acting as trusted storage. In HyperCheck, we modify the SMM code to execute our monitoring functions, which can be integrated into the BIOS or uploaded via a trusted boot mechanism.

##### 3.2 Attacker’s Capabilities
We assume the adversary can exploit vulnerabilities in any software running after bootup, including the VMM and all of its privileged components. For example, the attacker can compromise a guest domain and escape to the privileged domain, or modify the hypervisor code or data using known or zero-day attacks.

##### 3.3 General Assumptions
The attacker cannot tamper with or replace the installed PCI NIC with a malicious NIC using the same driver interface. If the SMM code is integrated with BIOS, we assume the SMRAM is properly set up by BIOS upon boot. If the SMM code is not included in the BIOS, it must be reliably uploaded to the SMRAM during boot, either using trusted boot or a management interface. Once the SMRAM is locked, we assume it cannot be subverted by the attacker.

##### 3.4 In-Scope Attacks
HyperCheck aims to detect in-memory, Ring-0 level (hypervisor or general OS) rootkits and rootkits in privileged domains of hypervisors. Rootkits that modify memory and/or registers and run in the kernel level, such as IDT-hook rootkits, are within the scope. HyperCheck bridges the gap by providing a method to detect such rootkits.

##### 3.5 Limitations
Currently, our analysis cannot protect against attacks that modify dynamic data, such as return-oriented attacks. Techniques like non-executable bits in new CPUs and Address Space Layout Randomization can be integrated to provide full protection, but this was not part of our implementation. However, HyperCheck can still detect the presence of malware if it interferes with the VMM code or statically defined function pointers.

#### 4 System Architecture
HyperCheck consists of three key components: the physical memory acquiring module, the analysis module, and the CPU register checking module. The memory acquiring module reads the contents of the physical memory and sends them to the analysis module, which checks the memory contents for alterations. The CPU register checking module reads the registers and validates their integrity. The overall architecture of HyperCheck is shown in Figure 1.

![Figure 1: The architecture of HyperCheck](https://example.com/hypercheck_architecture.png)

**Figure 1: The architecture of HyperCheck**

This architecture ensures that HyperCheck can provide a complete and secure view of the system's state, enabling robust detection of tampering and rootkits.