# Heathrow - Secret Warehouse
Category: Pwn
## Description
> Wow, it’s a crowded day at Heathrow, lots of suits that bump into each other and try to catch their plane. You have to find the gate to the secret warehouse, it cannot be far away. You see a suspicious suit go into a fast food court and you spot him disappear behind the checkout. Hmmm, odd?! You follow, and when no one sees you follow him. You go through a desolated kitchen, it stinks, you cover your nose with the back of your hand. You pass through a small entrance, and enter the secret warehouse, wow, it’s vast!
> 
> Challenge: pwn-notebook (pwn)
> 
> Please help me restore my deleted note.
An executable was attached.
## Solution
The executable (and remote service) offer an online notebook:
```console
┌──(user@kali)-[/media/sf_CTFs/google/11_Heathrow_-_Secret_Warehouse]
└─$ nc pwn-notebook.2021.ctfcompetition.com 1337
== proof-of-work: disabled ==
This is your confidential notebook.
This should get you through the next mission!
Good luck!
Please choose what you want to do:
1. List built-in note metadata.
2. Print out a built-in note.
3. Make a draft your note.
4. Add note to notebook.
5. Delete note.
9. Quit.
>
```
We can list the existing notes:
```
> 1
Here's a list of our notes:
 - 00. length: 037, state: LIVE
 - 01. length: 038, state: LIVE
 - 02. length: 055, state: LIVE
 - 03. length: 040, state: DELETED
 - 04. length: 044, state: LIVE
 - 05. length: 000, state: DELETED
 - 06. length: 000, state: DELETED
 - 07. length: 000, state: DELETED
 - 08. length: 000, state: DELETED
 - 09. length: 000, state: DELETED
```
Print a note:
```
> 2
Which note would you like to print out? 0
 _______________________________________
 ---------------------------------------
   \    /\_/\
    \  ( o.o )
        > ^  3
Quote: Test
 ______
 ------
   \    /\_/\
    \  ( o.o )
        > ^  4
Note: New Note
```
Or delete a note:
```
> 5
Which note would you like to delete? 2
Deleted.
```
Notice how the list of notes contained a deleted note with a length of `40`:
```
 - 03. length: 040, state: DELETED
```
When we try to print it, we get:
```
Please choose what you want to do:
1. List built-in note metadata.
2. Print out a built-in note.
3. Make a draft your note.
4. Add note to notebook.
5. Delete note.
9. Quit.
> 2
Which note would you like to print out? 3
 _________
 ---------
   \    /\_/\
    \  ( o.o )
        > ^ <
```
We must find a different way to print it.
Time to reverse the program with Ghidra:
```c
DAT_001030e9 = "%d";
struct note_t {
    char note[512];
    int is_free;
};
void read_notes(note_t *p_notes)
{
  int iVar1;
  FILE *__stream;
  int i;
  i = 0;
  __stream = fopen("notes.txt","r");
  for (; i < 10; i = i + 1) {
    iVar1 = __isoc99_fscanf(__stream,"%511[^\n]%*c",p_notes + i);
    if (iVar1 == -1) break;
    p_notes[i].is_free = 0;
  }
  fclose(__stream);
  return;
}
void list(note_t *p_notes)
{
  size_t note_len;
  char *state;
  uint i;
  puts("Here\'s a list of our notes:");
  for (i = 0; (int)i < 10; i = i + 1) {
    if (p_notes[(int)i].is_free == 1) {
      state = "DELETED";
    }
    else {
      state = "LIVE";
    }
    note_len = strlen((char *)(p_notes + (int)i));
    printf(" - %02d. length: %03d, state: %s\n",(ulong)i,note_len,state);
  }
  return;
}
void catsay(char *param_1)
{
    // ... print note with figure of cat ...
}
void print_note(note_t *p_notes)
{
  char *p_note_content;
  long in_FS_OFFSET;
  int note_index;
  long local_10;
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  printf("Which note would you like to print out? ");
  __isoc99_scanf(&DAT_001030e9,&note_index);
                    // Bad boundry check: negative
  if (note_index < 10) {
    if (p_notes[note_index].is_free == 1) {
      p_note_content = "DELETED";
    }
    else {
      p_note_content = (char *)(p_notes + note_index);
    }
    catsay(p_note_content);
  }
  else {
    puts("This note doesn\'t exist. Try again. ");
  }
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}
void draft_note(void)
{
  long i;
  undefined8 *p_note_chunk;
  long in_FS_OFFSET;
  char format [32];
  char note [520];
  long local_10;
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  note._0_8_ = 0;
  note._8_8_ = 0;
  p_note_chunk = (undefined8 *)(note + 0x10);
  for (i = 62; i != 0; i = i + -1) {
    *p_note_chunk = 0;
    p_note_chunk = p_note_chunk + 1;
  }
  format._0_8_ = 0;
  format._8_8_ = 0;
  format._16_8_ = 0;
  format._24_8_ = 0;
  printf("Quote: ");
  snprintf(format,31,"%%%ds",511);
  __isoc99_scanf(format,note);
  catsay(note);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}
void add_note(note_t *p_notes)
{
  long lVar1;
  long in_FS_OFFSET;
  int i;
  char format [32];
  lVar1 = *(long *)(in_FS_OFFSET + 0x28);
  format._0_8_ = 0;
  format._8_8_ = 0;
  format._16_8_ = 0;
  format._24_8_ = 0;
  i = 0;
  while ((i < 10 && (p_notes[i].is_free != 1))) {
    i = i + 1;
  }
  if (i < 10) {
    printf("Note: ");
    snprintf(format,31,"%%%ds",511);
    __isoc99_scanf(format,p_notes + i);
    p_notes[i].is_free = 0;
  }
  else {
    puts("Sorry, there are no available slots. Please delete something");
  }
  if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}
void delete_note(note_t *p_notes)
{
  long in_FS_OFFSET;
  int note_index;
  long local_10;
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  printf("Which note would you like to delete? ");
  __isoc99_scanf(&DAT_001030e9,&note_index);
                    // Bad boundry check: 10, negative.
                    // -1 will override i from main?
  if (note_index < 11) {
    p_notes[note_index].is_free = 1;
    puts("Deleted.");
  }
  else {
    puts("Out of bounds. Try again.");
  }
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}
void menu(void)
{
  puts("Please choose what you want to do:");
  puts("1. List built-in note metadata.");
  puts("2. Print out a built-in note.");
  puts("3. Make a draft your note.");
  puts("4. Add note to notebook.");
  puts("5. Delete note.");
  puts("9. Quit.");