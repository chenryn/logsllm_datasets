  when 'UPDATE' then  
    delete from check_t_unique_arr where arr = any (OLD.arr);  
    insert into check_t_unique_arr select unnest(NEW.arr);  
    return NEW;  
  when 'DELETE' then  
    delete from check_t_unique_arr where arr = any (OLD.arr);  
    return OLD;  
  when 'TRUNCATE' then  
    truncate check_t_unique_arr;  
  end case;  
  return null;  
end;  
$$ language plpgsql strict;  
```  
删除规则  
```  
postgres=# drop rule r1 on t_unique_arr ;  
DROP RULE  
postgres=# drop rule r2 on t_unique_arr ;  
DROP RULE  
postgres=# drop rule r3 on t_unique_arr ;  
DROP RULE  
postgres=# drop rule r4 on t_unique_arr ;  
DROP RULE  
```  
创建DML触发器  
```  
postgres=# create trigger tg1 before insert or update or delete on t_unique_arr for each row execute procedure tg_t_unique_arr();  
CREATE TRIGGER  
```  
创建TRUNCATE触发器  
```  
postgres=# create trigger tg2 after truncate on t_unique_arr for each statement execute procedure tg_t_unique_arr();  
CREATE TRIGGER  
```  
压测  
```  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 64  
number of threads: 64  
duration: 120 s  
number of transactions actually processed: 16580381  
latency average = 0.463 ms  
latency stddev = 0.408 ms  
tps = 137735.702798 (including connections establishing)  
tps = 137754.497564 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.001  \set id1 random(100001,200000)  
         0.000  \set id2 random(200001,300000)  
         0.000  \set id3 random(300001,400000)  
         0.000  \set id4 random(400001,500000)  
         0.000  \set id5 random(500001,600000)  
         0.000  \set id random(1,200000000)  
         0.460  select ins_t_unique_arr(:id,:id1,:id2,:id3,:id4,:id5);  
```  
检查约束是否生效  
```  
postgres=# select count(*) from t_unique_arr ;  
 count   
-------  
 80307  
(1 row)  
postgres=# select count(*) from (select unnest(arr) from t_unique_arr) t;  
 count    
--------  
 401535  
(1 row)  
postgres=# select count(*) from check_t_unique_arr ;  
 count    
--------  
 401535  
(1 row)  
```  
TRUNCATE测试  
```  
postgres=# truncate t_unique_arr ;  
TRUNCATE TABLE  
postgres=# select count(*) from t_unique_arr ;  
 count   
-------  
     0  
(1 row)  
postgres=# select count(*) from check_t_unique_arr ;  
 count   
-------  
     0  
(1 row)  
```  
使用trigger满足了最终的要求，性能也不错。  
## 小结  
1、目前使用exclude排他约束来对多值类型实现元素的全局唯一约束，使用intarry的gist ```&&``` 操作符，性能并不理想。期待PostgreSQL后续版本开通gin接口的exclude支持。  
2、使用rule可以实现数组元素全局唯一约束，但缺陷是： rule 不支持copy, 不支持 truncate。  
3、使用trigger可以实现数组元素全局唯一约束，并且性能很不错，支持copy, truncate。  
空间、。。。  
4、排他约束，不仅仅能支持多值类型，同时还支持空间、范围等异构类型。广泛应用于面积不相交、范围不相交等约束场景。  
[《会议室预定系统实践(解放开发) - PostgreSQL tsrange(时间范围类型) + 排他约束》](../201712/20171223_02.md)    
5、PostgreSQL对多值类型的支持细节做得越来越不错，除了业务上常用的“查询相交、包含可以使用索引，更新、替换、APPEND的操作”也都有对应的UDF和OP来支撑。  
[《PostgreSQL 11 preview - 支持 数组外键约束》](../201802/20180226_04.md)    
## 参考  
[《会议室预定系统实践(解放开发) - PostgreSQL tsrange(时间范围类型) + 排他约束》](../201712/20171223_02.md)    
[《PostgreSQL 11 preview - 支持 数组外键约束》](../201802/20180226_04.md)    
https://www.postgresql.org/docs/10/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")