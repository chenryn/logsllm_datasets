










Figure 2. Overview of a dynamic binary translator.
code) weaves additional guards (e.g., unexecutable stack,
shadow stack, and write-protected executable code) into the
translated code that ensure that the targets of control ﬂow
instructions cannot be changed by code based exploits.
System calls are requested using speciﬁc instructions and
the sandbox is in the unique position to replace these
instructions with special sandbox code. The sandbox checks
individual system calls and veriﬁes system call numbers,
parameters, and locations according to a given system call
policy. This concept is known as policy-based system call
authorization.
IV. PROBLEMS OF THE STANDARD LOADER
The standard loader has several problems if it is used
in a security-relevant context. Bugs in the standard loader
lead to direct privilege escalation. If the application and the
sandbox share the same loader then the sandbox can be
attacked through the loader. All dynamically loadable appli-
cations rely on features of the loader to dynamically resolve
references or to load additional modules. If the loader is
translated alongside the application then the application must
have the privileges to map code as executable which pose a
security risk.
A. Exploiting the standard loader
The standard execution model uses the same loader for all
applications, no matter if they are regular user applications,
privileged applications, or remotely accessible applications.
The standard loader supports a wide range of dynamic
functionality (e.g., debugging, dynamic library replacement,
and tracing of method calls) and a huge feature-set (e.g.,
many different relocation types). Large parts of the function-
ality are not needed or even harmful for privileged programs.
Extra checks ensure that it is not possible to (i) preload
alternate libraries or to (ii) replace the standard search path
for libraries if an application uses the SUID ﬂag.
Missing or faulty checks for privileged applications or
other bugs in the standard loader [17], [34], [33], [40]
can therefore be exploited to escalate privileges for SUID
applications.
These problems can be mitigated or reduced if the func-
tionality and feature-set of the loader is restricted to the
bare minimum of necessary features to execute current
applications.
B. The late interception problem
Many dynamic interception tools ([43], [45], [29], [11]
use LD_PRELOAD3 to gain control of the application. The
application, the standard loader, and the binary translator
(BT) share the same memory space. The data structures
BT enables the checking of machine code instructions
before they are executed. SFI extends BT, the translation
process (often using a code cache for already translated
3LD_PRELOAD is an option for the dynamic loader that injects an addi-
tional library into the process space of the application; this option executes
the initialization code of the injected library prior to the initialization of
the application.
21
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
of the loader contain pointers to the BT as well as to the
application. The loader is in the application domain and the
loader functionality can be used to gather information about
the BT (i.e., resulting in an information leak) or to break
the integrity of the BT. A potential exploit uses the data
from the loader (e.g., modiﬁes the GOT section of the BT)
to compromise the BT itself and to redirect BT functions to
malicious code.
The standard loader treats a BT that uses LD_PRELOAD
just like any other shared object and enables the application
to read information about the shared object (e.g., address
space, PLT, and GOT sections). The standard loader does
not guarantee that the BT initialization function is the ﬁrst
sequence of instructions that is executed after the loader
ﬁnished its initialization. For example, the INITFIRST ﬂag
that can be set by multiple libraries. Preloaded libraries are
loaded ﬁrst but the standard loader executes the initialization
code of the last loaded library with this ﬂag ﬁrst.
Another example is a symbol of the GNU_IFUNC reloca-
tion type. The standard libc uses GNU_IFUNC to select the
best possible version of a function for the current hardware at
runtime. Such a scenario may trigger the executing of setup
code before the LD_PRELOAD-based BT is initialized. The
BT is deprived of control of its environment if application
code is executed before the BT is initialized.
C. The loader black box
In related work [43], [45], [29], [37], [11] the sandbox
is either (i) unaware of the standard loader and translates
the code of the standard loader as part of the application,
or (ii) does not support dynamic loading [47], [31], [1],
[20]. Solutions that are unaware of the loading process treat
library loading as a black box.
The loader plays a privileged part during the runtime
of all application that use shared libraries. The dynamic
loader manages information about all loaded shared objects
(libraries) and about all exported symbols that can be used
in other objects.
The sandbox uses functionality of the loader to discover
the loaded shared objects and the exported functions. The
sandbox also relies on information about executable regions
and data regions that is exported by the standard loader.
The loader is a crucial component of the application as
it can load and map new code into the running process. If
the loader is translated as a black box then the application
must have the privileges to load and map any code (e.g.,
using the mmap system call, or the mprotect system call
to map memory regions as executable). On the other hand
if the sandbox provides a transparent and secure loader API
then the privilege to map executable memory regions can
be abstracted into the trusted sandbox domain. The sandbox
can control the application and limit the loading process to
predeﬁned libraries.
An extension of the secure loader can be used to imple-
ment a clear separation between the different shared objects.
Privileges and permissions (e.g., speciﬁc system calls and
parameters to the system calls) can be tuned and speciﬁed
on a per-object basis and are no longer enabled for all parts
of an application.
V. SAFE LOADING IN A TRUSTED RUNTIME
ENVIRONMENT
The Trusted Runtime Environment presents an alternate
model for process creation (turning an executable and all
associated libraries into a running program) and is the ﬁrst
technique that takes complete control over an application
in user-space. The standard dynamic loader is replaced
by a secure loader that is part of the sandbox domain.
As a result the application domain no longer needs the
permissions to map executable code. A secure loader must
be safe (the implementation is reviewed and bug-free) and
secure (the design does not provide attack vectors in the
offered functionality). This approach bridges programming
languages and operating systems, a language independent
loader is used to secure and conﬁne binary-only applications
in their execution pattern running on an operating system.
Figure 3 provides a comparison between the standard run-
time environment and TRuE.



















Figure 3. Comparison between a regular sandboxing approach and safe
loading as provided by TRuE with a secure loader. The left-hand side shows
two problems: 1) the late interception problem and 2) the loader black box
problem.
The secure loader runs as part of the privileged sandbox
domain. The secure loader is the only entity that is allowed
to load new code and the application is only allowed to
access loader functions through a well deﬁned API. The
sandbox and the loader are tightly coupled and share infor-
mation about the program. The loader analyzes segment and
section information of the application and all dynamically
22
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
loaded objects and enables per object privileges. The loader
resolves objects, symbols, and relocations for the sandbox
that then embeds resolved addresses in the translated code.
The tight coupling of the loader and the sandbox enables
module separation. Control transfers between modules are
inlined directly into the translated code. The translated
source object contains a direct reference (that is unreadable
from the application) to the target object and no call through
the PLT and GOT is needed. The PLT data structure is only
kept for reference reasons.
The secure loader solves problems of the standard loader
that are discussed in Section IV. The secure loader ensures
that the SFI library is initialized ﬁrst and treated specially
so that symbols are neither added to the global scope nor
accessible through any API functions.
A. The sandbox
The sandbox implements two privilege domains in user-
space: the sandbox domain (a trusted domain that contains
the loader and the sandbox proper) and the application
domain, an untrusted domain that contains the application
code and all needed libraries.
The sandbox domain ensures that no unchecked code
is executed in the application domain. Application code is
examined by the sandbox before execution and additional
security guards are added to ensure that the executed code
cannot escape out of the sandbox.
Binary Translation (BT) is a key component for user-space
software-based fault isolation (SFI). A dynamic translation
system translates and checks every machine code instruction
before it is executed. Translated code is placed in a code
cache. Indirect control ﬂow transfers trap into the privileged
sandbox domain and are checked upon every execution,
ensuring that only translated branch targets are reached.
The translator can change, adapt, or remove any invalid
instruction and is able to intercept system calls before they
are executed.
An important requirement for the integrity of the sandbox
is that return addresses of the translated application remain
unchanged on the stack. Translated return addresses on the
application stack would leak pointers into the code cache.
Unchanged return addresses add additional complexity when
handling return instructions as they are translated to a lookup
in the mapping table (the mapping table is a sandbox-
internal data structure that relates between translated and
untranslated code) and an indirect control transfer. On the
other hand an unchanged stack ensures that the original
program can use the return instruction pointer on the stack
for (i) exception management, (ii) debugging, and (iii) return
trampolines. Additionally, the user program has no easy way
to discover that it runs in a sandboxed environment, and
the address of the code cache is only known by the binary
translator.
B. Solving the loader’s security problems
Combining a secure loader and a safe sandbox to form a
trusted execution environment solves the problems deﬁned in
Section IV. The loader must be separated from the applica-
tion and the application may not access the loader’s internal
data structures directly. The privileged sandbox domain is
a perfect location for the secure loader. The secure loader
and the sandbox share information about all loaded shared
objects and symbols. The shared information enables the
sandbox to restrict control ﬂow transfers in the application
domain. The loader needs privileges to resolve dependencies
and to map executable code, these privileges are best placed
in the sandbox domain.
1) Restricting privilege escalation attacks: The secure
loader implements a subset of the features of the standard
loader. The subset is complete enough to run in practice any
programs compiled with a recent version of the compiler
toolchain. The supported programs are independent of the
source language (C, C++, Fortran, and handwritten assembly
programs were tested).
The feature set of the secure loader is limited to relocation
types needed on the current platform (the standard loader
supports relocation of other platforms as well), no run-
time conﬁguration, no debugging features that execute user-
speciﬁed code, no backwards compatibility to old formats,
and no direct access to loader internal data structures from
the application are available.
TRuE targets programs running with a higher privilege
level than the user interacting with the program. The secure
loader does not read any environment variables and has
no conﬁguration ﬁles that are parsed at runtime. A user
is not allowed to change settings for privileged programs.
All settings are hardcoded during the compilation. Library
paths, debugging features, and loader settings can only be
changed before the compilation of the secure loader. The
secure loader does not allow changes to any settings at
runtime.
The removal of these user-settable features protects from
attacks mentioned in Section IV-A. Privileged applications
do not need these features, therefore removing the features
altogether is more secure than executing additional checks
before accessing the features (as done by the standard
loader).
2) Protecting all executed application code: The initial-
ization code of the secure loader is the ﬁrst code that runs
when an application is started. This initialization code starts
and initializes the sandbox as well.
The secure loader can execute all application code under
the control of the sandbox because the loader is part of the
privileged sandbox domain. The secure loader tells the sand-
box to translate an entry point to application code whenever
the standard loader would pass control to application code.
The application traps into the sandbox domain when it uses
any loader functionality (e.g., resolving symbols, loading
23
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
additional modules, or loading PLT entries). The secure
loader veriﬁes the correctness of the request, and returns the
result to the application domain. The secure loader cleans all
references to internal data from any returned structures as an
additional level of protection (next to setting internal data
structures read-only when executing translated application
code). The application uses the loader features through a
well-deﬁned API and can no longer read or write internal
loader data. Trapping into the sandbox domain switches the
stack of the current thread, stores information about the
current state of the application thread (i.e., registers and PC),
and adds write permission for the internal data structures of
the secure loader; these changes are reversed when returning
to translated application code.
This procedure ensures the safety of the secure loader,
the sandbox, and the internal data structures at all times.
Consequently the problems mentioned in Section IV-B do
not exist for the secure loader.
3) Opening the loader black box: Placing the loader in
the sandbox domain solves the loader black box problem
from Section IV-C. The sandbox and the loader are in the
same trust domain and together provide the base for trusted
execution. Loader and sandbox can share data structures and
exchange information about executable code regions, data
regions, and symbol locations.
The loader is no longer translated by the sandbox as
a part of the application but
is an integral part of the
sandbox. The application no longer needs privileges to map
executable code into the application memory space but uses
the loader API provided by the sandbox. All applications
remain unchanged but calls to the loader are redirected to
the secure loader API in the sandbox domain.
C. PLT inlining
The tight integration of the secure loader into the sandbox
enables PLT inlining. The PLT is originally used to enable
position independent code. The binary translator in the
sandbox can remove the PLT code and inline the resolved
target addresses directly into the generated code.
This optimization reduces the amount of indirect control
ﬂow transfers (these control ﬂow transfers account for the
main overhead in dynamic binary translation) and hides the
location of other objects from the application.
The addresses are encoded directly in the code cache and
the application has no access to the instructions in the code
cache. This feature enables module separation and raises the
bar for security exploits because a potential exploit is unable
to determine the locations of speciﬁc functions in other
objects. The total number of indirect control ﬂow transfers
is reduced, limiting jump-oriented attacks.
Format string attacks [36] and other data-oriented attacks
can be used to circumvent guards in the application do-
main like ASLR, DEP, and stack canaries. These attacks
overwrite pointers in GOT sections of shared objects and
use the indirect jump instructions in the corresponding PLT
regions to set up arbitrary code execution. Each PLT call
in the application code can be used as a gadget for jump-
oriented programming. PLT inlining closes this attack vector.
Remaining indirect jump instructions in the application code
(e.g., C switch statements are compiled to indirect jumps
through jump tables) may still be used for jump-oriented
programming attacks. The frequency of these remaining
indirect jump instructions is low, thereby severely limiting
the opportunities for jump-oriented programming.
D. Additional security features
A custom tailored exploit could target the binary translator
itself. If the program is able to locate the internal data
structures of the binary translator (e.g., the code cache), it
could modify the executed code by directly changing instruc-
tions in the code cache and break out of the isolation layer.
Therefore any pointers to internal data are only allowed in
the sandbox domain, and a protection guard in the sandbox
must ensure that all data of the sandbox domain is write-
protected whenever application code is executed.
The basic binary translator is extended by the following
security guards that secure the user-space isolation sandbox
and to ensure that application code cannot escape the sand-
box: Non-executable data and code ensures that neither data
nor code of the original application can be executed directly
(by setting the non-executable bit on all memory pages of
the application). This guard prevents code injection attacks.
Only translated code in the code cache and code of the sand-
box domain are executable. A shadow stack in the sandbox
domain protects all return addresses on the application stack.
This guard prevents return-oriented programming [44]. The
sandbox uses Address Space Layout Randomization (ASLR)
to allocate internal data structures at random addresses.
ASLR is an additional probabilistic protection against bugs
in the implementation of the sandbox. The sandbox uses
a dedicated stack for all privileged code to prevent data
leaks to the unprivileged domain. A trampoline switches the
context (and stack) whenever privileged code is executed.
A protection guard ensures that no data from the sandbox
domain is writable when code from the application domain
is executed. The protection guard uses information from the
sandbox internal memory allocator and mprotect system
calls to write-protect all sandbox internal data structures
whenever translated application code is executed.
VI. IMPLEMENTATION
The Trusted Runtime Environment (TRuE) is imple-