skeleton, seen in Figure 6—the minimum pruned tree of a
version-6 tree consisting only of frozen nodes. The proof
skeleton for a version-n tree consists of frozen hashes for
the left siblings for the path from Xn to the root. From the
included hashes and using equations (1)-(4), this proof
skeleton sufﬁces to compute C6 = A6
From Figure 6 the logger incrementally builds Figure 4
by splitting frozen interior nodes. A node is split by
including its children’s hashes in the pruned tree instead
of itself. By recursively splitting nodes on the path to
a leaf, the logger can include that leaf in the pruned
tree.
In this example, we split nodes I0,2 and I2,1. For
each commitment Ci that is to be reconstructable in an
incremental proof the pruned tree P must include a path
to the event Xi. The same algorithm is used to generate
the membership proof for an event Xi.
0,3.
Given these constraints, we can now deﬁne the ﬁve
history operations in terms of the equations in Figure 5.
H.ADD(X) → Cn. Event is assigned the next free slot, n.
Cn is computed by equations (1)-(4).
H.INCR.GEN(Ci,Cj) → P. The pruned tree P is a
version- j proof skeleton including a path to Xi.
H.MEMBERSHIP.GEN(i,Cj) → (P,Xi). The pruned tree
P is a version- j proof skeleton including a path to Xi.
P.INCR.VF(C′′
i ,C′
j) → {⊤, ⊥}. From P apply equations
(1)-(4) to compute Ai
0,d. This can only be
done if P includes a path to the leaf Xi. Return ⊤ if
i = Ai
C′′
0,d and A j
0,d and C′
j = A j
0,d.
b
b
b
P.MEMBERSHIP.VF(i,C′
i ) → {⊤, ⊥}. From P apply
equations (1)-(4) to compute A j
0,d. Also extract Xi from
the pruned tree P, which can only be done if P includes
a path to event Xi. Return ⊤ if C′
0,d and Xi = X ′
i .
j,X ′
j = A j
Although incremental and membership proofs have dif-
ferent semantics, they both follow an identical tree struc-
ture and can be built and audited by a common implemen-
tation. In addition, a single pruned tree P can embed paths
to several leaves to satisfy multiple auditing requests.
What is the size of a pruned tree used as a proof? The
pruned tree necessary for satisfying a self-contained in-
cremental proof between Ci and Cj or a membership proof
for i in Cj requires that the pruned tree include a path to
nodes Xi and X j. This resulting pruned tree contains at
most 2d frozen nodes, logarithmic in the size of the log.
In a real implementation, the log may have moved on to
a later version, k. If the auditor requested an incremental
proof between Ci and Cj, the logger would return the
latest commitment Ck, and a pruned tree of at most 3d
nodes, based around a version-k tree including paths to Xi
and X j. More typically, we expect auditors will request
an incremental proof between a commitment Ci and the
latest commitment. The logger can reply with the latest
commitment Ck and pruned tree of at most 2d nodes that
included a path to Xi.
The frozen hash cache
In our description of the
history tree, we described the full representation when we
stated that the logger stores frozen hashes for all frozen
interior nodes in the history tree. This cache is redundant
whenever a node’s hash can be recomputed from its
children. We expect that logger implementations, which
build pruned trees for audits and queries, will maintain
and use the cache to improve efﬁciency.
When generating membership proofs,
incremental
proofs, and query lookup results, there is no need for
the resulting pruned tree to include redundant hashes on
interior nodes when they can be recomputed from their
children. We assume that pruned trees used as proofs
will use this minimum representation, containing frozen
hashes only for stubs, to reduce communication costs.
Can overheads be reduced by exploiting redundancy
between proofs?
If an auditor is in regular commu-
nication with the logger, demanding incremental proofs
between the previously seen commitment and the latest
commitment, there is redundancy between the pruned
subtrees on successive queries.
If an auditor previously requested an incremental proof
between Ci and Cj and later requests an incremental proof
P between Cj and Cn, the two proofs will share hashes on
the path to leaf X j. The logger may send a partial proof
that omits these common hashes, and only contains the
expected O(log2(n − j)) frozen hashes that are not shared
between the paths to X j and Xn. This devolves to O(1)
if a proof is requested after every insertion. The auditor
need only cache d frozen hashes to make this work.
Tree history time-stamping service
Our history
tree can be adapted to implement a round-based time-
stamping service. After every round, the logger publishes
the last commitment in public medium such as a news-
paper. Let Ci be the commitment from the prior round
and Ck be the commitment of the round a client requests
that its document X j be timestamped. A client can
request a pruned tree including a path to leaves Xi,X j,Xk.
The pruned tree can be veriﬁed against the published
commitments to prove that X j was submitted in the round
and its order within that round, without the cooperation
of the logger.
If a separate history tree is built for each round, our his-
tory tree is equivalent to the threaded authentication tree
proposed by Buldas et al. [10] for time-stamping systems.
3.3 Storing the log on secondary storage
Our history tree offers a curious property:
it can be
easily mapped onto write-once append-only storage.
Once nodes become frozen, they become immutable, and
are thus safe to output. This ordering is predetermined,
starting with (X0), (X1,I0,1), (X2), (X3,I2,1,I0,2), (X4) . . ..
Parentheses denote the nodes written by each ADD trans-
action. If nodes within each group are further ordered by
their layer in the tree, this order is simply a post-order
traversal of the binary tree. Data written in this linear
fashion will minimize disk seek overhead,
improving
the disk’s write performance. Given this layout, and
assuming all events are the same size on disk, converting
from an (index,layer) to the byte index used to store
that node takes O(log n) arithmetic operations, permitting
efﬁcient direct access.
In order to handle variable-length events, event data
can be stored in a separate write-once append-only value
store, while the leaves of the history tree contain offsets
into the value store where the event contents may be
found. Decoupling the history tree from the value store
also allows many choices for how events are stored, such
as databases, compressed ﬁles, or standard ﬂat formats.
3.4 Comparing to other systems
In this section, we evaluate the time and space tradeoffs
between our history tree and earlier hash chain and skip
list structures.
In all three designs, membership proofs
have the same structure and size as incremental proofs,
and proofs are generated in time proportional to their size.
Maniatis and Baker [43] present a tamper-evident log
using a deterministic variant of a skip list [53]. The skip
list history is like a hash-chain incorporating extra skip
links that hop over many nodes, allowing for logarithmic
lookups.
ADD Time
INCR.GEN proof size to Ck
MEMBERSHIP.GEN proof size for Xk
Cache size
INCR.GEN partial proof size
MEMBERSHIP.GEN partial proof size
Hash chain
O(1)
O(n − k)
O(n − k)
-
-
-
Skip list
History tree
O(1)
O(log2 n)
O(log2 n)
O(n)
O(log2 n)
O(n)
O(log2 n)
O(log2 n)
O(log2(n − j))
O(n − j)
O(log2 (n − i)) O(log2(n − i))
Table 1: We characterize the time to add an event to the log and the size of full and partial proofs generated in terms of n, the number of
events in the log. For partial proofs audits, j denotes the number of events in the log at the time of the last audit and i denotes the index
of the event being membership-audited.
In Table 1 we compare the three designs. All three
designs have O(1) storage per event and O(1) com-
mitment size. For skip list histories and tree histories,
which support partial proofs (described in Section 3.2),
we present the cache size and the expected proof sizes
in terms of the number of events in the log, n, and the
index, j, of the prior contact with the logger or the index
i of the event being looked up. Our tree-based history
strictly dominates both hash chains and skip lists in
proof generation time and proof sizes, particularly when
individual clients and auditors only audit a subset of the
commitments or when partial proofs are used.
Canonical representation A hash chain history and
our history tree have a canonical representation of both
the history and of proofs within the history. In particular,
from a given commitment Cn, there exists one unique path
to each event Xi. When there are multiple paths auditing
is more complex because the alternative paths must be
checked for consistency with one another, both within
a single history, and between the stream of histories
Ci,Ci+1, . . . committed by the logger. Extra paths may
improve the efﬁciency of looking up past events, such as
in a skip list, or offer more functionality [17], but cannot
be trusted by auditors and must be checked.
Maniatis and Baker [43] claim to support logarithmic-
sized proofs, however they suffer from this multi-path
problem. To verify internal consistency, an auditor with
no prior contact with the logger must receive every event
in the log in every incremental or membership proof.
Efﬁciency improves for auditors in regular contact with
the logger that use partial proofs and cache O(log2 n) state
between incremental audits. If an auditor has previously
veriﬁed the logger’s internal consistency up to Cj, the
auditor will be able to verify the logger’s internal consis-
tency up to a future commitment Cn with the receipt of
events X j+1 . . . Xn Once an auditor knows that the skip list
is internally consistent the links that allow for logarithmic
lookups can be trusted and subsequent membership
proofs on old events will run in O(log2 n) time. Skip list
histories were designed to function in this mode, with
each auditor eventually receiving every event in the log.
Auditing is required Hash chains and skip lists only
offer a complexity advantage over the history tree when
adding new events, but this advantage is ﬂeeting.
If
the logger knows that a given commitment will never
be audited, it is free to tamper with the events ﬁxed
by that commitment, and the log is no longer provably
tamper evident. Every commitment returned by the
logger must have a non-zero chance of being audited and
any evaluation of tamper-evident logging must include
the costs of this unavoidable auditing. With multiple
auditors, auditing overhead is further multiplied. After
inserting an event, hash chains and skip lists suffer an
O(n − j) disadvantage the moment they do incremental
audits between the returned commitment and prior
commitments. They cannot reduce this overhead by, for
example, only auditing a random subset of commitments.
Even if the threat model is weakened from our always-
untrusted logger to the forward-integrity threat model
(See Section 2.4), hash chains and skip lists are less
efﬁcient than the history tree. Clients can forgo auditing
just-added events, but are still required to do incremental
audits to prior commitments, which are expensive with
hash chains or skip lists.
4 Merkle aggregation
Our history tree permits O(log2 n) access to arbitrary
events, given their index. In this section, we extend our
history tree to support efﬁcient, tamper-evident content
searches through a feature we call Merkle aggregation,
which encodes auxiliary information into the history
tree. Merkle aggregation permits the logger to perform
authorized purges of the log while detecting unauthorized
deletions, a feature we call safe deletion.
As an example, imagine that a client ﬂags certain events
in the log as “important” when it stores them.
In the
history tree, the logger propagates these ﬂags to interior
nodes, setting the ﬂag whenever either child is ﬂagged.
To ensure that the tagged history is tamper-evident, this
ﬂag can be incorporated into the hash label of a node
and checked during auditing. As clients are assumed
to be trusted when inserting into the log, we assume
clients will properly annotate their events. Membership
auditing will detect if the logger incorrectly stored a leaf
with the wrong ﬂag or improperly propagated the ﬂag.
Incremental audits would detect tampering if any frozen
node had its ﬂag altered. Now, when an auditor requests
a list of only ﬂagged events, the logger can generate that
list along with a proof that the list is complete. If there
are relatively few “important” events, the query results
can skip over large chunks of the history.
To generate a proof that the list of ﬂagged events is
complete, the logger traverses the full history tree H,
pruning any subtrees without the ﬂag set, and returns
a pruned tree P containing only the visited nodes. The
auditor can ensure that no ﬂagged nodes were omitted
in P by performing its own recursive traversal on P and
verifying that every stub is unﬂagged.
Figure 7 shows the pruned tree for a query against a
version-5 history with events X2 and X5 ﬂagged. Interior
nodes in the path from X2 and X5 to the root will also be
ﬂagged. For subtrees containing no matching events, such
as the parent of X0 and X1, we only need to retain the root
of the subtree to vouch that its children are unﬂagged.
4.1 General attributes
Boolean ﬂags are only one way we may ﬂag log
events for later queries. Rather than enumerate every
possible variation, we abstract an aggregation strategy
over attributes into a 3-tuple, (t , ⊕,G ).
represents the
type of attribute or attributes that an event has. ⊕ is a
deterministic function used to compute the attributes on
an interior node in the history tree by aggregating the
is a deterministic
attributes of the node’s children.
function that maps an event to its attributes.
In our
example of client-ﬂagged events, the aggregation strategy
is (t
:= BOOL, ⊕ := ∨,G (x) := x.isFlagged).
For example, in a banking application, an attribute
could be the dollar value of a transaction, aggregated
with the MAX function, permitting queries to ﬁnd all
transactions over a particular dollar value and detect if the
logger tampers with the results. This corresponds to (t
:=
INT, ⊕ := MAX,G (x) := x.value). Or, consider events hav-
ing internal timestamps, generated by the client, arriving
at the logger out of order. If we attribute each node in the
tree with the earliest and latest timestamp found among its
children, we can now query the logger for all nodes within
a given time range, regardless of the order of event arrival.
There are at least three different ways to implement
keyword searching across logs using Merkle aggregation.
If the number of keywords is ﬁxed in advance, then the
attribute t
for events can be a bit-vector or sparse bit-
vector combined with ⊕ := ∨. If the number of keywords
is unknown, but likely to be small, t can be a sorted list
of keywords, with ⊕ := ∪ (set union). If the number of
keywords is unknown and potentially unbounded, then
a Bloom ﬁlter [8] may be used to represent them, with t
being a bit-vector and ⊕ := ∨. Of course, the Bloom ﬁlter
would then have the potential of returning false positives
to a query, but there would be no false negatives.
X0
X1
X2
X3
X4
X5
Figure 7: Demonstration of Merkle aggregation with some
events ﬂagged as important (highlighted). Frozen nodes that
would be included in a query are represented as solid discs.
Merkle aggregation is extremely ﬂexible because G
can be any deterministic computable function. However,
once a log has been created, (t , ⊕,G ) are ﬁxed for that
log, and the set of queries that can be made is restricted
based on the aggregation strategy chosen. In Section 5
we describe how we were able to apply these concepts to
the metadata used in Syslog logs.
4.2 Formal description
To make attributes tamper-evident in history trees, we
modify the computation of hashes over the tree to include
them. Each node now has a hash label denoted by Av
i,r.H
and an annotation denoted by Av
i,r.A for storing attributes.