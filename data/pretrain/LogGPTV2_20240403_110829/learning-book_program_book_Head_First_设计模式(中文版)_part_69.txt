协作
后，就会相当地稳固，足以让其他开发人员能够阅读并理解它。
不要忘了三次规则。
请记住，除非你的模式已经在真实世界的三个方案中被成功地采用
了，否则就不够资格被当成模式。所以，当别人能够使用你的模
式，并将意见反馈给你时，你就有机会能够将它变成一个实用的模
式。
你现在的位置
587
---
## Page 624
连连看
请将下列模式和描述配对：
模式
描述
装饰者
封装对象，并提供不同的接口。
状态
由子类决定如何实现一个算法中的步骤。
选代器
由子类决定要创建的具体类是哪一个。
外观
确保有且只有一个对象被创建。
策略
封装可以互换的行为，并使用委托来决定要
使用哪一个。
代理
客户用一致的方式处理对象集含和单个对象。
工厂方法
封装了基于状态的行为，并使围委托在行为
之间切换。
适配器
在对象的集合之中游走，而不暴露集合的实
现。
观察者
简化一群类的接口。
模板方法
包装一个对象，以提供新的行为。
组合
允许客户创建对象的家族，而无需指定他们的
具体类。
单件
让对象能够在状态改变时被通知。
抽象工厂
包装对象，以控制对此对象的访问。
命令
封装清求成为对象。
588
第13章
---
## Page 625
与设计模式相处
组织设计模式
随着发掘的设计模式数目逐渐增加，有必要将它们分级分类，好将它们组织起来，以简化我们寻找模
式的过程，并让同一群组内的模式互相比较。
在大多数的类目中，模式通常根据某种做法被归为几类。最广为人知的分类方式，就是第一个模式类
目中所采用的方式，根据模式的目标分成三个不同类目：创建型、行为型和结构型。
Sharpen your pencil
AbstractFactory
Observer
阅读每个类目的描述，试着将这些模式
Composite
Decorator
Strategy
正确地归类。这并不容易！但是请尽力
State
Adapter
Singleton
而为。正确答案在下一页。
Factory Method
Command
Proxy
Template Method
Iterator
Facade
这里的每个模式都属于以
下类目之一。
创建型模式涉及到将对象实例化，
只要是行为型模式，都涉及到类
这类模式都提供一个方法，将客
和对象如何交互及分配职责。
户从所需要实例化的对象中解耦。
创建型
行为型
结构型
结构型模式可以让你把类或
对象组合到更大的结构中。
你现在的位置
589
---
## Page 626
模式分类
解答：模式分类
这是把模式分组到类目的结果，你可能觉得这个练习很困难，因为许多模式似乎不只符
合一个类目。别担心，其实每个人都有这样的困扰。
创建型模式涉及到将对象实例化，
只要是行为型模式，都涉及到类
这类模式都提供一个方法，将客
和对象如何交互及分配职责。
户从所需要实例化的对象中解耦。
创建型
行为型
Mediator
Singleton
Builder
TemplateMethodVisitor
Prototype
Iterator
Command
Interpreter
Memento
Abstract Factory
Observer
Factory Method
Chain of Responsibility
State
结构型
Strategy
Proxy
Decorator
Composite
Facade
Flyweight
Bridge
有一些楼式（在图中用灰色
Adapter
显示）尚未在本书中介绍
你会在附录中看到这些模式
的概述。
结构型模式可以让你把类或
对象组合到更大的结构中。
PDG
590
第13章
---
## Page 627
与设计模式相处
除了刚才的分类方式之外，模式还有另一种分类方式：模式
所处理的是类或对象。
类模式描述类之间的关系如何通过继承定义。类模
对象模式描述对象之间的关
式的关系是在编译时建立的。
系，而且主要是利用组合定
义。对象模式的关系通常在
运行时建立，而且更加动态、
更有弹性。
类
对象
Template Method
Composite
VisitorIterator
Factory MethodAdapter
Decorator
Proxy
Memento
Interpreter
Strategy
Observer
Chain of Responsibility
Bridge
Mediator
Flyweight
Prototype
State
Abstract Factory
Builder
请注意，对象模式
Singleton
比类模式的数目多
出许多！
只有这些分类方式吗？
Dume
Duestions
是的，有许多开发人员
都这么说！四人组之所以这么分类，
答：
不，还有人提出其他的
通过比较可让你对模式
他们的想法是这样的：结构型模式用
分类方式。有些分类方式先分成三大
有清晰的概念，这是母庸置疑的。但
来描述类和对象如何被组合以建立新
类，然后再分成几个小类（例如“解
是许多人被创建型、结构型和行为型
的结构或新的功能。装饰者模式允许
耦模式”）。你想熟悉的是最常用的
类目搞得一头雾水，常常发现某个模
你通过“将某对象包装进另一个对象
分类方式。如果建立自己的分类方式
式似乎不只适合一个类目。请记住，
的方式”，未组合对象以提供新的功
可以帮你更加了解这些模式的话，那
怎么分类并不重要，重要的是了解这
能。所以焦点是在于如何动态地组合
么你也可以这么做。
些模式和它们之间的关系。只要类目
对象以获取功能，而不是行为型模式
有帮助，我们就用它，反之就不用。
的目的
一对象之间的沟通与互连。
将模式分成不同的类
请牢记，这几个模式的意图并不相
目，这么做真的能够帮助我们记忆这
为何装饰者模式被归类
同，而这通常是了解某个模式属于哪
些模式吗？
到结构类目中？我认为它应该是行为
、个类目时的关键。
类目，毕竞它增加行为！
你现在的位置》
591
---
## Page 628
模式类目
大师与门徒
大师：蚱啊！你看起来很苦恼。
门徒：是的，我正在学习模式的分类。我感到很困惑。
大师：继续说
门徒：在学习了这么多模式之后，我被告知每个模式都属于结构、
行为、创建三种类目之一。为什么我们需要为模式分类呢？
大师：我说蚱，不管是在什么时候，只要我们有一大堆东西，
很自然地就会想要为它们分类，这可以帮助我们在更抽象的层次
上思考这些东西。
门徒：大师，你能举一个例子吗？
大师：当然可以。就拿汽车来说，有许多种不同的汽车款式，我
们很自然地把汽车分成几类，例如：经济车、跑车、旅行车、卡
车及豪华轿车。
大师：蚱，你看起来好像大吃了一惊，难道你无法体会我说的
话？
门徒：大师，我很能体会你说的话，我只是对于你如此地了解汽
车而感到震惊！
大师：蚱，毕竞不是所有的例子都适合使用莲花或饭钵来举例。
现在，我能继续说吗？
门徒：是的，是的，很抱歉打断你，请继续。
大师：一旦你有了分类或类目，你就可以很方便地这么说：“如
果你想从硅谷开车到圣克鲁斯，那么跑车将会是最好的选
择。”或者“因为石油的市场状况日益恶化，所以应该购买经济
车，比较省油。”
592
第13章
---
## Page 629
与设计模式相处
门徒：所以通过分类，我们可以将一组模式视为一个群体。当我
们需要一个创建型模式，但又不知道确切是哪一个的时候，就可
以用创建型模式这个词来统称它。
大师：是的，而且分类也有助于我们比较相同类目内的其他成
员，比方说，“迷你车是最有风格的小型车。”或者帮助我们缩
小搜寻范围，“我需要一部省油的车子。”
门徒：我明白了，所以我就可以说“对于改变对象接口来说，适
配器模式是最好的结构型模式”。
大师：是的，类目还可以开发新领域；比方说，“我们真的想要
开发一部跑车，具有法拉利的性能和Miata的价格”。
门徒：这种车听起来就像是死亡陷阱。
大师：对不起，我没听清楚你说什么。
门徒：唔！我是说“我懂了”。
门徒：所以类目可以让我们思考模式群组之间的关系，以及同一
组模式内模式之间的关系，还可以让我们找出新的模式。但是，
为什么使用三个类目，而不是四个或五个？
大师：就像是夜晚天空中的星星一样，你可以看见许多类
目。“三”是一个适当的数目，并且是由许多人所决定出来
的数目，它有助于更好地进行模式分类。但是的确有人建议
用四个、五个或更多个。
你现在的位置》5
593
---
## Page 630
用模式思考
围模式思考
情境、约束、力、类目、分类我的天，听起来非常的学术呢！好
吧，这一切都很重要，而知识就是力量。
但是，让我们来面对它，如果你了解理论性的东西，而没有使用模
式的经验和实践，那么这将不会在你的生活中造成多大的差别。
下面是一份快速指南，可以帮助你开始“用模式思考”。所谓“用
模式思考”，意思是说，能够看着设计，体会在什么地方模式能自
你思考模式的大脑
然适用，在什么地方模式则不能。
保持简单（KeepItSimple/KISS）
首先，当你设计时，尽可能地用最简单的方式解决问题。你的目标应该是简单，而不是“如何在这个问
题中应用模式”。千万不要认为：如果没有使用模式解决某个问题，就不是经验丰富的开发人员。如果
你能够保持简单的设计，那么你将会得到其他开发人员的欣赏和尊敬。正确的说法是，为了要让你的设
计简单且有弹性，有时候使用模式是最好的方法。
设计模式非万灵丹；事实上，连什么丹都算不上！
如你所知道的，模式是解决一再发生的问题的通用方案。模式已经被许多开发人员实际测试过。所以，
当你需要某个模式的时候，可以放心地使用它，毕竞你知道这个模式已经身经百战。
然而，模式并非万灵丹，你不能把模式插入、编译，然后就早早地去吃午餐。要使用模式，你需要考虑
到模式对你的设计中其他部分所造成的后果。
你知道何时需要模式··.··
啊……这是最重要的问题：何时使用模式？当你在设计的时候，如果确定在你的设计中可以利用某个模
式解决某个问题，那么就使用这个模式！如果有更简单的解决方案，那么在决定使用模式之前应该先考
虑这个方案。
如何知道何时适用一个模式，这就需要经验和知识。一且你确定一个简单的解决方案无法满足你的需要，
应该考虑这个问题以及相关的约束一这可以帮你将问题对应到一个模式中。如果你对于模式有很深的
认知，就可能知道有什么模式适合这样的情况。否则，就花些时间调查一下可能会解决这个问题的模式，
模式类目中的意图和应用部分会特别有用。一旦找到了一个看起来适合的模式，要先确定你是否能接受
594第13章
---
## Page 631
与设计模式相处
这个模式所带来的后果，以及对设计其他部分的影响。如果一切看起来都
很好，就用它吧！
有一种情况，即使有更简单的解决方案，你仍然想要使用模式，这种情况
就是：你预期系统在未来会发生改变。正如我们所见过的，找出你的设计
中会改变的区域，通常这是需要模式的迹象。但是务必要确定一件事：加
人模式是要应对可能发生的实际改变，而不是假想的改变。
并非只有在设计时才考虑引进模式，在重构（refactoring）时也要这样做！
重构的时间就是模式的时间！
重构就是通过改变你的代码来改进它的组织方式的过程。目标是要改善其
结构，而不是其行为。这是一个很好的时机，可以重新检查你的设计来看
看是否能够利用模式让它拥有更好的结构。比方说，代码内如果充满了条
件语句，这可能意味着需要使用状态模式，或者意味着，应该利用工厂模
式将这些具体的依赖消除掉。许多书都介绍在如何利用模式进行重构，而
随着技艺的增长，你需要更多地涉猎这个领域。
拿掉你所不需要的，不要害怕将一个
将你的思绪集中在设计
设计模式从你的设计中删除。
本身，而不是在模式上。只有
在真正需要时才使用模式。有些时
还没有人谈到何时应该将某个模式删除，你可能认为这很难启齿！不，我
候，筒单的方式就行得题，那
们都是成人了，应该面对这个问题。
么就别用模式。
那么何时应该删除个模式呢？当你的系统变得非常复杂，而且并不需要预
留任何弹性的时候，就不要使用模式。换句话说，也就是当一个较简单的
解决方案比使用模式更恰当的时候。
如果你现在不需要，就别做。
设计模式威力很强大，你很容易就可以在当前设计中看到模式的各种应用
方式。开发人员天生就热爱创建漂亮的架构以应对任何方向的改变。
要抗拒这样的诱惑呀！如果你今天在设计中有实际的需要去支持改变，就
放手采用模式处理这个改变吧！然而，如果说理由只是假想的，就不要添
加这个模式，因为这只会将你的系统越搞越复杂，而且很可能你永远都不
会需要它！
你现在的位置》595
---
## Page 632
模式自然地出现
大师与门徒·
大师：蚱，你的基础训练几乎完成了，接下来的计划是什
么？
门徒：我要去迪士尼乐园大玩特玩！然后开始利用模式建立许多
代码！
大师：等等！你可别忘了“杀鸡焉用宰牛刀”的道理呀！
门徒：这是什么意思呢，大师？我已经学了这么多的设计模式，难道不应该将
它们用在我全部的设计中，以达到最强的威力、弹性以及可控性吗？
大师：不，模式只是一种工具，只有在需要时才使用这种工具。你也花了很多时
间学习设计原则。一开始总是先遵循这些原则，建立最简单的代码以完成工作。
在这个过程中，你看到有需要模式的地方，就使用模式。
门徒：也就是说，我的设计并不是从模式开始？
大师：“应用模式”绝对不是你开始设计时所该有的目标，应该让模式在你的设
计过程中自然而然地出现。
门徒：既然模式这么好，为什么在使用它们的时候还得如此小心？
大师：模式可能带来复杂性，如果没有必要，我们绝不需要这样的复杂性。就
像你已经知道的，模式是一种被证实过的设计经验，可以避免某些常见的错误。
模式也是一种共享的词汇，能够让我们和其他开发人员沟通我们的设计。
门徒：那么，我们又如何知道何时应该引进设计模式呢？