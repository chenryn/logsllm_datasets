### References

1. **Cryptography, 3(1), May 2009.**

2. **A. Boldyreva.** Threshold Signatures, Multisignatures, and Blind Signatures Based on the Gap-Diffie-Hellman-Group Signature Scheme. In *IACR PKC*, pages 31–46, 2003.

3. **D. Boneh.** The Decision Diffie-Hellman Problem. In *ANTS*, pages 48–63, 1998.

4. **D. Boneh, B. Lynn, and H. Shacham.** Short Signatures from the Weil Pairing. In *Advances in Cryptology—ASIACRYPT'01*, pages 514–532, 2001.

5. **M. Castro and B. Liskov.** Practical Byzantine Fault Tolerance and Proactive Recovery. *ACM Trans. Computer Systems*, 20(4):398–461, 2002.

6. **B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan.** Private Information Retrieval. *J. ACM*, 45(6):965–981, 1998.

7. **Y. G. Desmedt.** Threshold Cryptography. *European Transactions on Telecommunications*, 5(4), 1994.

8. **G. Di Crescenzo, R. Ostrovsky, and S. Rajagopalan.** Conditional Oblivious Transfer and Timed-Release Encryption. In *EUROCRYPT*, pages 74–89, 1999.

9. **R. Dingledine, N. Mathewson, and P. F. Syverson.** Tor: The Second-Generation Onion Router. In *USENIX Security Symposium*, pages 303–320, 2004.

10. **S. Even, O. Goldreich, and A. Lempel.** A Randomized Protocol for Signing Contracts. *Commun. ACM*, 28:637–647, June 1985.

11. **J. Falkner, M. Piatek, J. P. John, A. Krishnamurthy, and T. Anderson.** Profiling a Million User DHT. In *IMC*, pages 129–134, 2007.

12. **A. Fiat, J. Saia, and M. Young.** Making Chord Robust to Byzantine Attacks. In *European Symposium on Algorithms*, pages 803–814, 2005.

13. **R. Geambasu, T. Kohno, A. A. Levy, and H. M. Levy.** Vanish: Increasing Data Privacy with Self-Destructing Data. In *USENIX Security Symposium*, pages 299–315, 2009.

14. **R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin.** Robust Threshold DSS Signatures. In *Advances in Cryptology - EUROCRYPT*, pages 354–371, 1996.

15. **K. Hildrum and J. Kubiatowicz.** Asymptotically Efficient Approaches to Fault-Tolerance in Peer-to-Peer Networks. In *DISC*, pages 321–336, 2004.

16. **H. Johansen, A. Allavena, and R. van Renesse.** Fireflies: Scalable Support for Intrusion-Tolerant Network Overlays. In *EuroSys Conference*, pages 3–13, 2006.

17. **A. Kate and I. Goldberg.** Distributed Key Generation for the Internet. In *IEEE ICDCS*, pages 119–128, 2009.

18. **J. Liang and R. Kumar.** Pollution in P2P File Sharing Systems. In *IEEE Intl. Conf. on Computer Communications (INFOCOM)*, 2005.

19. **J. Liang, N. Naoumov, and K. W. Ross.** The Index Poisoning Attack in P2P File Sharing Systems. In *IEEE Intl. Conf. on Computer Communications (INFOCOM)*, pages 1–12, 2006.

20. **H. Lipmaa.** An Oblivious Transfer Protocol with Log-Squared Communication. In *ISC*, pages 314–328, 2005.

21. **B. Lynn.** The Pairing-Based Cryptography (PBC) Library. *http://crypto.stanford.edu/pbc/*, 2006. Accessed March 2012.

22. **J. McLachlan, A. Tran, N. Hopper, and Y. Kim.** Scalable Onion Routing with Torsk. In *ACM CCS*, pages 590–599, 2009.

23. **P. Mittal and N. Borisov.** ShadowWalker: Peer-to-Peer Anonymous Communication using Redundant Structured Topologies. In *ACM CCS*, pages 161–172, 2009.

24. **A. Nambiar and M. Wright.** Salsa: A Structured Approach to Large-Scale Anonymity. In *ACM CCS*, pages 17–26, 2006.

25. **M. Naor and B. Pinkas.** Efficient Oblivious Transfer Protocols. In *SODA*, pages 448–457, 2001.

26. **M. Naor and U. Wieder.** A Simple Fault Tolerant Distributed Hash Table. In *Intl. Workshop on Peer-to-Peer Sys.*, pages 88–97, 2003.

27. **R. Narendula, T. G. Papaioannou, Z. Miklos, and K. Aberer.** Tunable Privacy for Access Controlled Data in Peer-to-Peer Systems. In *International Teletraffic Congress (ITC 22)*, 2010.

28. **A. Panchenko, S. Richter, and A. Rache.** NISAN: Network Information Service for Anonymization Networks. In *ACM CCS*, pages 141–150, 2009.

29. **C. Peikert, V. Vaikuntanathan, and B. Waters.** A Framework for Efficient and Composable Oblivious Transfer. In *CRYPTO*, pages 554–571, 2008.

30. **M. Rabin.** How to Exchange Secrets with Oblivious Transfer. Technical Report TR-81, Aiken Computation Lab, Harvard University, Cambridge, MA, 1981.

31. **S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Schenker.** A Scalable Content-Addressable Network. In *SIGCOMM*, pages 161–172, 2001.

32. **R. Rodrigues and B. Liskov.** Rosebud: A Scalable Byzantine-Fault-Tolerant Storage Architecture. Technical Report TR/932, MIT LCS, December 2003.

33. **R. Rodrigues, B. Liskov, K. Chen, M. Liskov, and D. M. Schultz.** Automatic Reconfiguration for Large-Scale Reliable Storage Systems. *IEEE TDSC*, 99:1, 2010.

34. **A. I. T. Rowstron and P. Druschel.** Pastry: Scalable, Decentralized Object Location, and Routing for Large-Scale Peer-to-Peer Systems. In *Middleware*, pages 329–350, 2001.

35. **J. Saia and M. Young.** Reducing Communication Costs in Robust Peer-to-Peer Networks. *Inform. Process. Lett.*, 106(4):152–158, 2008.

36. **D. A. Schultz, B. Liskov, and M. Liskov.** MPSS: Mobile Proactive Secret Sharing. *ACM Trans. Inf. Syst. Secur.*, 13(4):34, 2010.

37. **V. Shoup.** Practical Threshold Signatures. In *Advances in Cryptology - EUROCRYPT*, pages 207–220, 2000.

38. **E. Sit and R. Morris.** Security Considerations for Peer-to-Peer Distributed Hash Tables. In *Intl. Workshop on Peer-to-Peer Systems*, pages 261–269, 2002.

39. **M. Steiner, T. En-Najjary, and E. W. Biersack.** A Global View of KAD. In *IMC*, pages 117–122, 2007.

40. **I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan.** Chord: A Scalable Peer-to-Peer Lookup Service for Internet Applications. In *ACM SIGCOMM Conference*, pages 149–160, 2001.

41. **V. Pappas, D. Massey, A. Terzis, and L. Zhang.** A Comparative Study of the DNS Design with DHT-Based Alternatives. In *IEEE Intl. Conference on Computer Communications*, pages 1–13, 2006.

42. **D. S. Wallach.** A Survey of Peer-to-Peer Security Issues. In *Intl. Conf. on Software Security: Theories and System*, pages 253–258, 2002.

43. **Q. Wang, P. Mittal, and N. Borisov.** In Search of an Anonymous and Secure Lookup: Attacks on Structured Peer-to-Peer Anonymous Communication Systems. In *ACM CCS*, pages 308–318, 2010.

44. **S. Wolchok, O. S. Hofmann, N. Heninger, E. W. Felten, J. A. Halderman, C. J. Rossbach, B. Waters, and E. Witchel.** Defeating Vanish with Low-Cost Sybil Attacks Against Large DHTs. In *NDSS*, 2010.

45. **M. Young, A. Kate, I. Goldberg, and M. Karsten.** Practical Robust Communication in DHTs Tolerating a Byzantine Adversary. In *IEEE ICDCS*, pages 263–272, 2010.

46. **M. Young, A. Kate, I. Goldberg, and M. Karsten.** Towards Practical Communication in Byzantine-Resistant DHTs. To appear in *IEEE/ACM Transactions on Networking (ToN)*, 2012.

47. **B. Y. Zhao, L. Huang, J. Stribling, S. C. Rhea, A. D. Joseph, and J. Kubiatowicz.** Tapestry: A Resilient Global-Scale Overlay for Service Deployment. *IEEE Journal on Selected Areas in Communications*, 22(1):41–53, 2004.

### Appendix A: The Oblivious Transfer Protocol

In this appendix, we provide an overview of the 1-out-of-ν Oblivious Transfer (OT) protocol by Naor and Pinkas [32]. The security of this construction is based on the Decisional Diffie-Hellman (DDH) assumption in a group \( G \) of prime order \( |G| \). The proof of security uses the random oracle model, where the protocol employs a cryptographic hash function \( H \), which is replaced by a random oracle in the security proof.

The goal is for the server \( q \) to offer \( \nu \) strings \( S_1, \ldots, S_\nu \), and for the chooser \( p \) to obtain the desired string \( S_\rho \) and nothing else. The basic idea of the [32] OT protocol is to let \( p \) provide encryption keys \( PK_i \) for \( 1 \leq i \leq \nu \); these are constructed such that \( p \) can know at most one of the decryption keys. The server then supplies \( p \) with encryptions of each \( S_i \) under \( PK_i \).

#### Protocol Flow

1. **OT-setup:**
   - \( q \) picks a random discrete logarithm instance \( \alpha = g^r \) and sends this to \( p \).
   - The parties agree on \( \nu - 1 \) random group elements \( C_2, \ldots, C_\nu \). It is crucial that \( p \) does not know their discrete logarithms, so they are picked by \( q \) (who may but is not required to know the discrete logarithms).

2. **OT-request:**
   - \( p \) provides \( PK_1 \) to \( q \); for \( 1 < i \leq \nu \), \( PK_i \) is implicitly set to \( C_i / PK_1 \).
   - \( p \) constructs \( PK_1 \) such that \( PK_\rho \) has a known discrete logarithm; however, if \( p \) could find the discrete logarithm of any other key \( PK_i \), \( p \) could solve a DDH problem in \( G \).

3. **OT-response:**
   - \( q \) computes \( PK_1^r \) for all \( i \). Since the \( C_i^r \) may be precomputed, this requires only a single exponentiation and \( \nu - 1 \) multiplications.
   - \( q \) picks a uniformly random \( \ell \)-bit string \( R \), where \( \ell \) is chosen large enough (e.g., 200 bits) to ensure that \( R \) will be distinct.
   - For each \( 1 \leq i \leq \nu \), \( q \) computes an encryption of \( S_i \) as \( E_i = H(PK_i^r, R, i) \oplus S_i \). \( R \) and the \( E_i \) are sent to \( p \).
   - \( p \) computes first \( PK_\rho^r = \alpha^k \) and then decrypts to obtain \( S_\rho = E_\rho \oplus H(PK_\rho^r, R, \rho) \).

For more details and the proof in the random oracle model, see [32]. Note that \( \alpha \) and the \( C_i^r \) may be preprocessed during periods of low computational load. Moreover, these values can be used in multiple instances of the OT protocol. Refreshing \( r \) (i.e., \( \alpha \) and the \( C_i^r \)) every \( \nu \) executions provides an amortized complexity of two exponentiations per party per OT invocation. The setup message consists of \( \nu \) group elements, while the OT-request contains only a single one. Finally, the reply consists of \( \nu \) \( E_i \)s plus \( R \); though strictly speaking, these are not group elements, they may be viewed as such for the complexity analysis. Hence, overall communication is \( 2\nu + 2 \) group elements.

We remark that since we are transferring AES keys using OT, we could also directly use (some digest of) \( PK_i^r, R, i \) as the AES key. However, such ad hoc optimizations may easily introduce subtle flaws. The security proof of Naor and Pinkas may be invalidated by even a minor optimization, hence, as the gains are marginal, we prefer the original OT protocol to any ad hoc optimization.

#### Protocol Diagram

```
peer p
Setup (for ν invocations)
⇐=
peer q
Pick r ∈ Z|G| uniformly at random and compute α = g^r;
for 1 < i ≤ ν pick Ci uniformly at random in G and compute C_i^r.
Send α and C2, ..., Cν to p.

Online (single invocation)
peer p requesting Sρ
Pick k ∈ Z|G| uniformly at random and compute PKρ = g^k.
If ρ ≠ 1 compute PK1 = Cρ / PKρ.
Send PK1 to q.
=⇒
⇐=
Compute first PKρ^r = α^k and then
H(PKρ^r, R, ρ); use this to decrypt the ρth encryption and output the plaintext, Sρ.

peer q holding S1, ..., Sν
Compute PK1^r.
For 1 < i ≤ ν compute PK_i^r = C_i^r / PK1^r.
Pick a random string R and for 1 ≤ i ≤ ν compute an encryption of Si,
Ei = H(PK_i^r, R, i) ⊕ Si; send all ν encryptions to p along with R.
```

This diagram and the detailed steps provide a clear and structured overview of the 1-out-of-ν OT protocol by Naor and Pinkas.