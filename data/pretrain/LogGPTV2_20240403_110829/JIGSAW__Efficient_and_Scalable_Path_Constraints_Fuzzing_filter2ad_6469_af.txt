throughput, i.e., the number of inputs that can be tried in a
given period. The most straightforward way to improve fuzzing
throughput is to improve parallelism. ClusterFuzz [36] uses
a cluster of machines to improve fuzzing throughput. The
problem, as pointed out by Xu et al. [74] is that running
several fuzzing instances in parallel does not scale very well
to multiple cores on commodity OS. To solve the bottlenecks,
they proposed new OS primitives. Besides running multiple
instances, another way to improve parallelism is to use SIMD
instructions to do data parallelization [25]. The challenge for
data parallelization, however, is conditional branches. Most
solutions will end up limiting the data parallelism [24], i.e.,
disabling deviated data lanes. JIGSAW can use both multi-core
and SIMD to improve parallelism. Compared with existing
solutions, JIGSAW’s approach is more scalable to multiple cores
as it has fewer synchronization bottlenecks; it is also more
efficient at using data parallelism because the JIT-compiled
functions do not have conditional branches.
IX. CONCLUSION
In this paper, we present a novel design to improve the
search throughput in automated test generation, based on a
powerful insight: searching for a satisfiable input is much
more efficient and scalable with path constraints than with the
whole original program. Our evaluation results showed that
our approach indeed can achieve a search throughput orders
of magnitude higher than state-of-the-art fuzzers, which can
lead to significant improvement in branch flipping rate and
end-to-end coverage-guided testing.
ACKNOWLEDGMENTS
This work is supported, in part, by the National Science
Foundation under Grant No. 2046026, No. 2133487, and the
Office of Naval Research under Award No. N00014-17-1-
2893. Any opinions, findings, conclusions, or recommendations
expressed in this paper are those of the authors and do not
necessarily reflect the views of the funding agencies.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:56 UTC from IEEE Xplore.  Restrictions apply. 
1330
REFERENCES
[1] Dave Aitel. An introduction to spike, the fuzzer creation
kit. presentation slides, 1, 2002.
[2] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko,
Robert Gawlik, and Thorsten Holz. REDQUEEN: Fuzzing
with input-to-state correspondence. In Annual Network
and Distributed System Security Symposium (NDSS),
2019.
[3] Domagoj Babi´c, Stefan Bucur, Yaohui Chen, Franjo
Ivanˇci´c, Tim King, Markus Kusano, Caroline Lemieux,
László Szekeres, and Wei Wang. Fudge: fuzz driver
generation at scale. In ACM Joint European Software En-
gineering Conference and Symposium on the Foundations
of Software Engineering (ESEC/FSE), 2019.
[4] Clark Barrett, Christopher L Conway, Morgan Deters,
Liana Hadarean, Dejan Jovanovi´c, Tim King, Andrew
In International
Reynolds, and Cesare Tinelli. Cvc4.
Conference on Computer Aided Verification (CAV), pages
171–177. Springer, 2011.
[5] Marcel Böhme and Brandon Falk. Fuzzing: On the
In ACM
exponential cost of vulnerability discovery.
Joint European Software Engineering Conference and
Symposium on the Foundations of Software Engineering
(ESEC/FSE), 2020.
[6] Marcel Böhme, Valentin Manes, and Sang Kil Cha.
Boosting fuzzer efficiency: An information theoretic
perspective. In ACM Joint European Software Engineer-
ing Conference and Symposium on the Foundations of
Software Engineering (ESEC/FSE), 2020.
[7] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen,
and Abhik Roychoudhury. Directed greybox fuzzing.
In ACM Conference on Computer and Communications
Security (CCS), 2017.
[8] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoud-
hury. Coverage-based greybox fuzzing as markov chain.
In ACM Conference on Computer and Communications
Security (CCS), 2016.
[9] Luca Borzacchiello, Emilio Coppa, and Camil Deme-
trescu. Fuzzing symbolic expressions. In International
Conference on Software Engineering (ICSE), 2021.
[10] Luca Borzacchiello, Emilio Coppa, and Camil Deme-
trescu. Fuzzolic: mixing fuzzing and concolic execution.
Computers & Security, page 102368, 2021.
[11] Ella Bounimova, Patrice Godefroid, and David Molnar.
Billions and billions of constraints: Whitebox fuzz testing
in production. In International Conference on Software
Engineering (ICSE), 2013.
[12] Cristian Cadar, Daniel Dunbar, and Dawson R Engler.
KLEE: Unassisted and automatic generation of high-
coverage tests for complex systems programs. In USENIX
Symposium on Operating Systems Design and Implemen-
tation (OSDI), 2008.
[13] Cristian Cadar, Vijay Ganesh, Peter M Pawlowski,
David L Dill, and Dawson R Engler. Exe: automatically
In ACM Conference on
generating inputs of death.
Computer and Communications Security (CCS), 2006.
[14] Cristian Cadar and Koushik Sen. Symbolic execution for
software testing: three decades later. Communications of
the ACM, 56(2):82–90, 2013.
[15] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert,
and David Brumley. Unleashing mayhem on binary code.
In IEEE Symposium on Security and Privacy (Oakland),
2012.
[16] Sang Kil Cha, Maverick Woo, and David Brumley.
Program-adaptive mutational fuzzing. In IEEE Symposium
on Security and Privacy (Oakland), 2015.
[17] Peng Chen and Hao Chen. Angora: Efficient Fuzzing by
Principled Search. In IEEE Symposium on Security and
Privacy (Oakland), 2018.
[18] Peng Chen, Jianzhong Liu, and Hao Chen. Matryoshka:
Fuzzing deeply nested branches. In ACM Conference on
Computer and Communications Security (CCS), 2019.
[19] Vitaly Chipounov, Volodymyr Kuznetsov, and George
Candea. S2E: A platform for in-vivo multi-path analysis
of software systems. In ACM International Conference
on Architectural Support for Programming Languages
and Operating Systems (ASPLOS), 2011.
[20] Jaeseung Choi, Joonun Jang, Choongwoo Han, and
Sang Kil Cha. Grey-box concolic testing on binary code.
In International Conference on Software Engineering
(ICSE), 2019.
[21] Leonardo De Moura and Nikolaj Bjørner. Z3: An efficient
In International conference on Tools and
smt solver.
Algorithms for the Construction and Analysis of Systems,
2008.
[22] Bruno Dutertre. Yices 2.2. In International Conference
on Computer Aided Verification (CAV). Springer, 2014.
[23] Michael Eddington. Peach fuzzer platform. http://www.
peachfuzzer.com/products/peach-platform/, 2011.
[24] Brandon Falk. How conditional branches work in vec-
torized emulation. https://gamozolabs.github.io/fuzzing/
2019/10/07/vectorized_emulation_condbranch.html, 2018.
[25] Brandon Falk. Vectorized emulation: Hardware ac-
celerated taint
tracking at 2 trillion instructions per
second. https://gamozolabs.github.io/fuzzing/2018/10/14/
vectorized_emulation.html, 2018.
[26] Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and
Marc Heuse. Afl++: Combining incremental steps of
In USENIX Workshop on Offensive
fuzzing research.
Technologies (WOOT), 2020.
[27] Shuitao Gan, Chao Zhang, Peng Chen, Bodong Zhao, Xi-
aojun Qin, Dong Wu, and Zuoning Chen. Greyone: Data
flow sensitive fuzzing. In USENIX Security Symposium
(Security), 2019.
[28] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu,
Kang Li, Zhongyu Pei, and Zuoning Chen. Collafl: Path
sensitive fuzzing. In IEEE Symposium on Security and
Privacy (Oakland), 2018.
[29] Vijay Ganesh and David L Dill. A decision procedure
for bit-vectors and arrays. In International Conference
on Computer Aided Verification (CAV), 2007.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:56 UTC from IEEE Xplore.  Restrictions apply. 
1431
[30] Patrice Godefroid, Adam Kiezun, and Michael Y Levin.
Grammar-based whitebox fuzzing. In ACM SIGPLAN
Conference on Programming Language Design and Im-
plementation (PLDI), 2008.
[31] Patrice Godefroid, Nils Klarlund, and Koushik Sen. Dart:
directed automated random testing. In ACM SIGPLAN
Conference on Programming Language Design and Im-
plementation (PLDI), 2005.
[32] Patrice Godefroid, Michael Y Levin, and David A Molnar.
Automated whitebox fuzz testing. In Annual Network and
Distributed System Security Symposium (NDSS), 2008.
[33] Patrice Godefroid, Hila Peleg, and Rishabh Singh.
Learn&fuzz: Machine learning for input fuzzing.
In
IEEE/ACM International Conference on Automated Soft-
ware Engineering (ASE), 2017.
[34] Google. TCMalloc. https://github.com/google/tcmalloc.
[35] Google. honggfuzz. https://github.com/google/honggfuzz,
2010.
[36] Google. Fuzzing for security. https://blog.chromium.org/
2012/04/fuzzing-for-security.html, 2012.
[37] Google. Fuzzbench: Fuzzer benchmarking as a service.
https://google.github.io/fuzzbench/, 2020.
[38] Heike Hofmann, Karen Kafadar, and Hadley Wickham.
Letter-value plots: Boxplots for large data. Technical
report, had.co.nz, 2011.
[39] Kyriakos Ispoglou, Daniel Austin, Vishwath Mohan, and
Mathias Payer. FuzzGen: Automatic fuzzer generation.
In USENIX Security Symposium (Security), 2020.
[40] M Ammar Ben Khadra, Dominik Stoffel, and Wolfgang
Kunz. gosat: floating-point satisfiability as global opti-
mization. In Formal Methods in Computer Aided Design
(FMCAD), 2017.
[41] lafintel. Circumventing fuzzing roadblocks with compiler
transformations. https://lafintel.wordpress.com/, 2016.
[42] Caroline Lemieux, Rohan Padhye, Koushik Sen, and
Dawn Song. Perffuzz: automatically generating patho-
logical inputs. In International Symposium on Software
Testing and Analysis (ISSTA), 2018.
[43] Caroline Lemieux and Koushik Sen. Fairfuzz: A targeted
mutation strategy for increasing greybox fuzz testing
In IEEE/ACM International Conference on
coverage.
Automated Software Engineering (ASE), 2018.
[44] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan,
Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix:
program-state based binary fuzzing. In ACM Joint Euro-
pean Software Engineering Conference and Symposium
on the Foundations of Software Engineering (ESEC/FSE),
2017.
[45] Daniel Liew, Cristian Cadar, Alastair F Donaldson, and
Just fuzz it: solving floating-point
J Ryan Stinnett.
In ACM
constraints using coverage-guided fuzzing.
Joint European Software Engineering Conference and
Symposium on the Foundations of Software Engineering
(ESEC/FSE), 2019.
[46] Valentin JM Manès, Soomin Kim, and Sang Kil Cha.
Ankou: Guiding grey-box fuzzing towards combinatorial
difference.
Engineering (ICSE), 2020.
In International Conference on Software
[47] Barton P Miller, Louis Fredriksen, and Bryan So. An
empirical study of the reliability of unix utilities. Com-
munications of the ACM, 33(12):32–44, 1990.
[48] Aina Niemetz and Mathias Preiner. Bitwuzla at the SMT-
COMP 2020. CoRR, abs/2006.01621, 2020.
[49] Aina Niemetz and Mathias Preiner. Bitwuzla at the
smt-comp 2021. https://smt-comp.github.io/2021/system-
descriptions/Bitwuzla.pdf, 2021.
[50] Aina Niemetz, Mathias Preiner, and Armin Biere. Boolec-
tor 2.0. J. Satisf. Boolean Model. Comput., 9(1):53–58,
2014.
[51] Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike
Papadakis, and Yves Le Traon. Semantic fuzzing with
zest. In International Symposium on Software Testing and
Analysis (ISSTA), 2019.
[52] Rohan Padhye, Caroline Lemieux, Koushik Sen, Lau-
rent Simon, and Hayawardh Vijayakumar. Fuzzfactory:
domain-specific fuzzing with waypoints. In Annual ACM
Conference on Object-Oriented Programming, Systems,
Languages, and Applications (OOPSLA), 2019.
[53] Awanish Pandey, Phani Raj Goutham Kotcharlakota,
and Subhajit Roy. Deferred concretization in symbolic
execution via fuzzing. In International Symposium on
Software Testing and Analysis (ISSTA), 2019.
[54] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-fuzz:
fuzzing by program transformation. In IEEE Symposium
on Security and Privacy (Oakland), 2018.
[55] Theofilos Petsios, Jason Zhao, Angelos D Keromytis, and
Suman Jana. Slowfuzz: Automated domain-independent
detection of algorithmic complexity vulnerabilities. In
ACM Conference on Computer and Communications
Security (CCS), 2017.
[56] Sebastian Poeplau and Aurélien Francillon. Symbolic
In
execution with symcc: Don‘t interpret, compile!
USENIX Security Symposium (Security), 2020.
[57] Sebastian
Poeplau
and AurÃ©lien
Francillon.
SymQEMU: Compilation-based symbolic execution for
In Annual Network and Distributed System
binaries.
Security Symposium (NDSS), 2021.
[58] LLVM Project. LLVM language reference manual. https:
//llvm.org/docs/LangRef.html.
[59] Mohit Rajpal, William Blum, and Rishabh Singh. Not
all bytes are equal: Neural byte sieve for fuzzing. arXiv
preprint arXiv:1711.04596, 2017.
[60] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar,
Cristiano Giuffrida, and Herbert Bos. Vuzzer: Application-
In Annual Network and
aware evolutionary fuzzing.
Distributed System Security Symposium (NDSS), 2017.
[61] Jesse Ruderman.
Introducing jsfunfuzz. http://www.
squarefree.com/2007/08/02/introducing-jsfunfuzz/, 2007.
[62] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi,
Simon Wörner, and Thorsten Holz. Nyx: Greybox
hypervisor fuzzing using fast snapshots and affine types.
In 30th {USENIX} Security Symposium ({USENIX}
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:56 UTC from IEEE Xplore.  Restrictions apply. 
1532
[77] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and
Taesoo Kim. Qsym: A practical concolic execution
engine tailored for hybrid fuzzing. In USENIX Security
Symposium (Security), 2018.
[78] Michal Zalewski. American fuzzy lop.(2014). http://
lcamtuf.coredump.cx/afl, 2014.
[79] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song,
Hongsong Zhu, and Limin Sun. Firm-afl: high-throughput
greybox fuzzing of iot firmware via augmented process
emulation. In USENIX Security Symposium (Security),
2019.
X. APPENDIX
This section includes more results from the FuzzBench exper-
iment. The full report can be retrieved at https://anonysp2022.
github.io/.
Security 21), 2021.
[63] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik,
Sebastian Schinzel, and Thorsten Holz. kAFL: Hardware-
In USENIX
assisted feedback fuzzing for os kernels.
Security Symposium (Security), 2017.
[64] Koushik Sen, Darko Marinov, and Gul Agha. Cute: a
concolic unit testing engine for c. In ACM Joint European
Software Engineering Conference and Symposium on the
Foundations of Software Engineering (ESEC/FSE), 2005.
[65] Kosta Serebryany. Continuous fuzzing with libfuzzer and
In IEEE Cybersecurity Development
addresssanitizer.
(SecDev). IEEE, 2016.
[66] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang,
Baishakhi Ray, and Suman Jana. Neuzz: Efficient fuzzing
with neural program learning. In IEEE Symposium on
Security and Privacy (Oakland), 2019.
[67] Shiqi Shen, Shweta Shinde, Soundarya Ramesh, Abhik
Roychoudhury, and Prateek Saxena. Neuro-symbolic
execution: Augmenting symbolic execution with neural
constraints. In Annual Network and Distributed System
Security Symposium (NDSS), 2019.
[68] László Szekeres. Memory corruption mitigation via
software hardening and bug-finding. PhD thesis, Stony
Brook University, 2017.
[69] Dmitry Vyukov. Syzkaller: an unsupervised, coverage-
guided kernel fuzzer, 2019.
[70] Daimeng Wang, Zheng Zhang, Hang Zhang, Zhiyun
Qian, Srikanth V Krishnamurthy, and Nael Abu-Ghazaleh.
SyzVegas: Beating kernel fuzzing odds with reinforcement
In USENIX Security Symposium (Security),
learning.
2021.
[71] Jinghan Wang, Chengyu Song, and Heng Yin. Rein-
forcement learning-based hierarchical seed scheduling for
In Annual Network and Distributed
greybox fuzzing.
System Security Symposium (NDSS), 2021.
[72] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu.
Skyfire: Data-driven seed generation for fuzzing. In IEEE
Symposium on Security and Privacy (Oakland), 2017.
[73] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou.
TaintScope: A checksum-aware directed fuzzing tool
for automatic software vulnerability detection. In IEEE
Symposium on Security and Privacy (Oakland), 2010.
[74] Wen Xu, Sanidhya Kashyap, Changwoo Min, and Taesoo
Kim. Designing new operating primitives to improve
fuzzing performance. In ACM Conference on Computer
and Communications Security (CCS), 2017.
[75] Wei You, Xueqiang Wang, Shiqing Ma, Jianjun Huang,
Xiangyu Zhang, XiaoFeng Wang, and Bin Liang. Pro-
fuzzer: On-the-fly input type probing for better zero-day
vulnerability discovery. In IEEE Symposium on Security
and Privacy (Oakland), 2019.
[76] Tai Yue, Pengfei Wang, Yong Tang, Enze Wang, Bo Yu,
Kai Lu, and Xu Zhou. Ecofuzz: Adaptive energy-saving
greybox fuzzing as a variant of the adversarial multi-
armed bandit. In USENIX Security Symposium (Security),
2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:56 UTC from IEEE Xplore.  Restrictions apply. 
1633
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:56 UTC from IEEE Xplore.  Restrictions apply. 
1734
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:56 UTC from IEEE Xplore.  Restrictions apply. 
1835