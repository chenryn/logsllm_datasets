# Table 2: Results for Generalized and Scenario-Specific Models

The table below presents the average (Avg) and standard deviation (S.D.) for F-Measure, Recall, and Precision for a tapping duration of one second. Precision measures the security of the system, while Recall measures its usability. The F-Measure is a harmonic mean of both precision and recall.

| Model | F-Measure (Avg, S.D.) | Recall (Avg, S.D.) | Precision (Avg, S.D.) |
|--------|-----------------------|--------------------|-----------------------|
| Generalized Chest-Angular | 0.93 (0.05) | 0.97 (0.03) | 0.91 (0.08) |
| Generalized Waist-Flat | 0.89 (0.06) | 0.92 (0.05) | 0.87 (0.07) |
| Generalized Chest-Vertical | 0.91 (0.06) | 0.94 (0.05) | 0.88 (0.07) |
| Generalized Waist-Angular | 0.92 (0.07) | 0.95 (0.04) | 0.89 (0.09) |

Both models perform equally well in detecting tap biometrics, with the generalized model being more flexible for different reader positions.

## 6.3 Summary of Results

The classification models demonstrate that the tap gesture can be robustly detected, making it an effective method for authenticating NFC device users. This is reflected in high precision, recall, and F-measure values for both models. The general model is suitable for applications where the user can train the model with tapping gestures in various scenarios (reader positions). The scenario-specific model is practical when the phone can acquire knowledge about the reader position, either by asking the user or through terminal-provided information.

## 6.4 Power Analysis

To evaluate the power consumption of our app, we used PowerTutor, an app available on Google PlayStore. PowerTutor estimates the energy consumed by different apps based on parameters such as screen brightness, CPU usage, and Wi-Fi polling. We compared the energy consumption of our app with NFCtools, a popular NFC app on Google PlayStore, focusing on CPU usage.

We performed 20 taps with our app and 20 taps with NFCtools, observing that our app consumes 0.2 J of energy per tap, compared to 0.13 J per tap by NFCtools. This indicates that our system is lightweight, using only an additional 0.07 J of energy for sensor recordings.

## 7. Active Adversarial Attacks

Our approach is robust and can authenticate users with high accuracy, effectively differentiating between users. However, an attacker might attempt to mimic the victim's tapping gesture. To assess our system's resistance to such attacks, we designed an experiment where an expert attacker, with a similar body structure to the victim, practiced mimicking the victim's tapping gesture after watching a video of the victim. The attacker then performed 20 taps, which were tested against the victim's classifier.

The results, shown in Table 3, indicate that even with practice and feedback, the attacker could not successfully mimic the victim's gesture. This suggests that our system is resilient to strong active adversarial attacks.

## 8. Discussion

### 8.1 Defeating Unauthorized NFC Reading

Our approach ensures that NFC transactions are not processed until the user is authenticated, providing a defense against unauthorized reading and relay attacks.

### 8.2 Dealing with Authentication Errors

Our system has low error rates, but if the user trains the classifier with one hand and later uses the other, authentication may fail. This can be mitigated by training with both hands or ensuring the correct hand is used. In case of false negatives, the user can be asked to tap again, and if necessary, use a fallback method like PINs or fingerprints.

### 8.3 Power Efficiency

Our system is designed to be lightweight, with the authentication process lasting only a few seconds. The sensors are activated when the NFC transaction app is turned on and deactivated once the NFC message is received. Only relevant sensor data within a 3-second window is used for authentication.

### 8.4 User Transparency

The authentication process is transparent to the user, triggered as soon as the NFC transaction app is turned on. This satisfies our design goal of being transparent and consistent with existing NFC usage.

## 9. Related Work

Several prior works aim to improve security using sensor data. For example, Shrestha et al. [41] proposed authorizing apps based on hand movements, while Conti et al. [10] used hand movements for biometric authentication during phone calls. Our work focuses on tap gesture biometrics for NFC transactions, providing a unique and robust authentication method.

## 10. Conclusion and Future Work

In this paper, we presented a transparent approach to authenticate users before NFC transactions. Our results show that the approach is effective in preventing misuse of NFC services without additional user burden. Future work will explore new features from available sensors, evaluate the approach with different smartphone models, and consider using smartwatches for enhanced accuracy.

**Acknowledgments**

We thank the ACSAC 2016 anonymous reviewers for their feedback and all participants at UAB and Aalto University for their contributions. This work was funded by NSF CNS-1526524 grant.

**References**

[1] A. Adams and M. A. Sasse. Users are not the enemy. Commun. ACM, 42(12), 1999.
[2] Android. Android Pay. Available online at https://www.android.com/pay/.
[3] Apple. Apple Pay. Available online at http://www.apple.com/apple-pay/.
[4] ARM. ARM Security Technology Building a Secure System using TrustZone Technology. Technical report, April 2009.
[5] S. Azenkot, K. Rector, R. Ladner, and J. Wobbrock. Passchords: secure multi-touch authentication for blind people. In Proceedings of the 14th international ACM SIGACCESS conference on Computers and accessibility, pages 159â€“166. ACM, 2012.