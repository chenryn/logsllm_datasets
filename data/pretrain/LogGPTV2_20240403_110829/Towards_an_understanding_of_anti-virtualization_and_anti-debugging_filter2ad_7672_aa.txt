title:Towards an understanding of anti-virtualization and anti-debugging
behavior in modern malware
author:Xu Chen and
Jonathon Andersen and
Zhuoqing Morley Mao and
Michael Bailey and
Jose Nazario
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
Towards an Understanding of Anti-virtualization and Anti-debugging Behavior
in Modern Malware
Xu Chen*
Jon Andersen*
Z. Morley Mao* Michael Bailey*
* University ofMichigan - Ann Arbor
Jose Nazario+
+Arbor Networks
Abstract
Many threats that plague today's networks (e.g., phish(cid:173)
ing, botnets, denial of service attacks) are enabled by a
complex ecosystem of attack programs commonly called
malware. To combat these threats, defenders of these net(cid:173)
works have turned to the collection, analysis, and reverse
engineering ofmalware as mechanisms to understand these
programs, generate signatures, and facilitate cleanup of
infected hosts. Recently however, new malware instances
have emerged with the capability to check and often thwart
these defensive activities -
essentially leaving defenders
blind to their activities. To combat this emerging threat,
we have undertaken a robust analysis of current malware
and developed a detailed taxonomy of malware defender
fingerprinting methods. We demonstrate the utility of this
taxonomy by using it to characterize the prevalence of
these avoidance methods, to generate a novelfingerprinting
method that can assist malware propagation, and to create
an effective new technique to protect production systems.
1 Introduction
Protecting end hosts from infections and break-ins re(cid:173)
mains a challenging problem today given the inherent soft(cid:173)
ware vulnerabilities in existing applications and commod(cid:173)
ity operating systems. Exploits and vulnerabilities are the
primary means by which attackers gain unauthorized con(cid:173)
trol over computer resources. Vulnerabilities are generally
specific to particular software versions and configurations.
Before attempting to compromise a system, attackers often
perform reconnaissance by fingerprinting the attack target
to discover specific artifacts or behavior of the target, pos(cid:173)
sibly revealing certain properties that are useful for subse(cid:173)
quent targeted infection attempts. The advantage ofcollect(cid:173)
ing such information about the target before further mali(cid:173)
cious behavior is to improve attack efficiency as well as to
avoid detection.
A related essential goal of reconnaissance is to identify
and avoid potential monitoring systems that attempt to an(cid:173)
alyze malware behavior. Such undesirable targets include
honeypot-based monitoring systems [3] that collect infor(cid:173)
mation about attackers' behavior, including the very meth(cid:173)
ods by which they attempt to identify these systems. In this
perpetual arms race, this information is then used to better
identify attackers in the future and to hide the evidence they
use to identify monitors. Therefore, to avoid disclosing mal(cid:173)
ware behavior to defenders, stealthy attackers intentionally
avoid monitoring systems. From a defender's perspective,
it would be best to hide or eliminate identifying information
for both production and monitoring systems to increase at(cid:173)
tack difficulty. Unfortunately, such fingerprints are difficult
to eliminate completely.
Based on the above discussion, we can generalize de(cid:173)
ployed computer systems into two broad categories: pro(cid:173)
duction systems actively used for real computing purposes
and monitoring systems mainly used to attract and analyze
attacker activities for detection purpose. The focus of our
work is analyzing and exploiting the difference of malware
execution under these two different environments. The con(cid:173)
tributions of our work are:
1. We introduce a detailed taxonomy that captures essen(cid:173)
tial techniques for distinguishing between production
systems and monitoring systems, which typically op(cid:173)
erate in virtualized and debugger environments.
2. We characterize the prevalence of malware evasion
methods by executing 6,900 recently-captured mal(cid:173)
ware samples under different environment - more
than 40% of the total malware samples reduce their
malicious behavior under virtual machines or with a
debugger attached, and they account for potentially
90% of the Internet attacks during certain periods.
3. We provide a remote network-based reconnaissance to
differentiate between virtual machines and plain ma(cid:173)
chines, and even possibly between variants of virtual
machines. To the best of our knowledge, this is the
first remote network-based fingerprinting method for
detecting VMs.
4. Given the prevalence ofevasive malware, we introduce
a new paradigm ofprotecting production systems by
1-4244-2398-9/08/$20.00 ©2008 IEEE
177
DSN 2008: Chen et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
making them appear to be monitoring systems. We im(cid:173)
plemented several fingerprint imitation techniques and
evaluated our method using real malware samples.
The paper is organized as follows: after briefly survey(cid:173)
ing related work in §2, we provide a taxonomy of mal(cid:173)
ware evasion techniques, focusing on anti-virtualization and
anti-debugging behavior in §3. We then describe three ap(cid:173)
plications based on this taxonomy in §4, namely evasion(cid:173)
informed malware characterization, remote network finger(cid:173)
printing, and deterring malware by imitating fingerprints.
We discuss the implications and limitations of our work in
§5 and conclude in §6.
2 Related Work
Understanding the execution behavior of malicious pro(cid:173)
grams is ofcritical importance. Compared to static malware
analysis [22], dynamic analysis of malware programs gives
rich information about runtime behaviors. Recent work
performs malware identification based on behavioral pat(cid:173)
terns [11, 12]. For example, behavior-based clustering of
malware programs was proposed [8]. Another interesting
approach [24] is to take advantage of virtualization - ma(cid:173)
nipulating memory objects during run-time to exploit mul(cid:173)
tiple execution paths of malware and building a full view
of the malware behavior. Though it is known that evasive
malware does exist, to the best of our knowledge, no exist(cid:173)
ing work has extensively studied the difference in malware
behavior across various execution environments.
Virtual machines can be an effective environment in
which to study activities and techniques of attackers [4,
17, 20]. For example, VMs have been used to infiltrate a
botnet to discover its internal structure [26]. Security re(cid:173)
searchers also use debuggers, such as WinDbg, SoftICE,
etc., to extensively characterize malware behavior. The two
approaches are similar in the sense that they both execute
the real code, as opposed to static analysis. In reaction to
this trend, attackers have sought to fingerprint VMs and de(cid:173)
buggers during runtime [9, 14, 10] by checking either OS
objects or benchmarking CPU instruction execution time to
actively avoid monitoring systems. Some malwares, such
as the IRC bot Agobot [7], actively seeks to detect the pres(cid:173)
ence of VMs and then changes its behavior accordingly.
In response to these fingerprinting techniques, defend(cid:173)
ers may attempt to hide VM fingerprints [23] or develop
more stealthy debuggers [29]. Despite these efforts, several
works have shown limitations on how well the presence of
a VM can be hidden. For example, legacy CPU instruction
sets may contain instructions that simply cannot be virtu(cid:173)
alized [28], and the discrepancies revealed by physical re(cid:173)
sources are inherently difficult to eliminate [13, 27, 28, 19]
due to the side effect of virtualization. To successfully fake
such a genuinity test, a VM would need orders ofmagnitude
more computing power than the hardware that it is emulat(cid:173)
ing. Instead of focusing on eliminating fingerprints associ(cid:173)
ated with monitoring systems, our work simplifies the prob(cid:173)
lem by deterring attackers through production systems that
appear as monitoring systems, thereby contributing to de(cid:173)
fenders' ability to compete in the arms race by misleading
attackers.
3 Taxonomy of Anti-Virtualization and Anti(cid:173)
debugging Techniques
In an effort to avoid potential monitoring by adversaries,
attackers often attempt to distinguish systems running on
virtual machines and in debuggers from those running on
plain machines. While a great deal of attention has been
given to specific techniques used to detect these systems,
(e.g., Redpill [5]) with few exceptions (e.g., Honeypot De(cid:173)
tection [14]) the questions of how these techniques relate
to each other, to the systems they are monitoring, and to
the goals of the adversaries have remained largely unex(cid:173)
plored. To better understand how to answer these questions,
we have developed a taxonomy of anti-virtualization and
anti-debugging techniques.
As is the case with the general class ofadversarial finger(cid:173)
printing, anti-virtualization and anti-debugging techniques
are based on the assumption that systems of interest carry
characteristics that differentiate them from "normal" sys(cid:173)
tems. In our taxonomy, we group these techniques by the
system abstraction at which they operate as well as the class
of virtualization or debugging characteristics they exploit.
In addition, for each method we develop a set of metrics
to evaluate and differentiate the various classes. These in(cid:173)
clude: 1) What is the least level of access required to un(cid:173)
cover the characteristic? 2) How accurate is the method,
assuming no evasion is done by the target? 3) What is the
complexity involved in building a practical tool to detect
this characteristic? 4) How difficult is it to try and mask
this characteristic? 5) How can we imitate the characteristic
on OSes running on plain machines to fool existing finger(cid:173)
printing software? This analysis can be found in Table 1,
with detailed explanations of the various categories occur(cid:173)
ring in subsequent sections.
3.1 Hardware
Both virtual machines and debuggers can make
hardware-detectable changes to the system when they are
present. For example, debuggers can set hardware break(cid:173)
points and a virtual machine, by definition, emulates hard(cid:173)
ware. Such hardware differences between debuggers or
VMs and a native, non-instrumented environment are de(cid:173)
tectable.
1-4244-2398-9/08/$20.00 ©2008 IEEE
178
DSN 2008: Chen et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
I Abstraction I Artifact I Accuracy I Access level
local network
Hardware
I Complexity I Evasion I Imitation I
device
driver
memory
system
Environment
Application
Behavioral
installation
execution
timing
high
high
high
high
high
high
local user
local root
local root
local user
local user
medium
low
medium
high
low
low
easy
medium
hard
hard
easy
medium
medium
easy
easy
Examples
Reptile
Roxio
medium
Reptile, Agobot, Peacomm.C
hard
easy
easy
medium
Reptile
Reptile, Rbot, Phatbot
Rbot, Phatbot
Reptile, Nugache
medium
remote network
medium
Table 1. A taxonomy of common malware anti-virtualization and anti-debugging techniques.
3.1.1 Device
Virtual machines often create specific hardware devices
with identifiable attributes, either overt or subtle. An
overtly virtual device would include an Ethernet device
from VMWare with a specific, well-known manufacturer
prefix. A more subtle attribute would be a failure of the
CPU emulator or translator to handle illegal opcodes. The
VMWare VGA adapter, for example, has a well-known
device string that is specific to that environment. Other
VMWare devices have identifiable strings such as "Bus(cid:173)
Logic BT-958" and "pcnet32" on Linux, and in Windows
on VMWare, registry keys associated with the SCSI disk
drivers also have specific strings associated with them. Fi(cid:173)
nally, the Bochs emulator has a debug port visible from the
system specific to that emulated platform. In these cases,
malware can use these features to determine that it is in a
non-native environment. The doo tool [6] on Linux and
Windows uses shell scripts that look for such fingerprints in
the form ofvendor strings and special hardware types in the
Linux system messages and Windows registry table.
3.1.2 Driver