title:BLADE: an attack-agnostic approach for preventing drive-by malware
infections
author:Long Lu and
Vinod Yegneswaran and
Phillip A. Porras and
Wenke Lee
BLADE: An Attack-Agnostic Approach for Preventing
Drive-By Malware Infections
Long Lu† Vinod Yegneswaran‡ Phillip Porras‡ Wenke Lee†
†College of Computing, Georgia Institute of Technology
‡SRI International
{long, wenke}@cc.gatech.edu {vinod, porras}@csl.sri.com
plethora of their complex applets have now become the Achilles
heel of enterprise network security. This problem is compounded
by the increasing diversity of browser plug-in applications where
a wide variety of published and zero-day browser-based exploits
provide malware developers with a continual stream of infection
vectors from which to disseminate malware throughout the Inter-
net. In fact, client-side exploits now dominate the traditional push-
based malware propagation strategies that were well established by
Internet scanning worms and viruses [20, 26].
ABSTRACT
Web-based surreptitious malware infections (i.e., drive-by downloads) have
become the primary method used to deliver malicious software onto com-
puters across the Internet. To address this threat, we present a browser-
independent operating system kernel extension designed to eliminate drive-
by malware installations. The BLADE (Block All Drive-by download Exploits)
system asserts that all executable ﬁles delivered through browser down-
loads must result from explicit user consent and transparently redirects ev-
ery unconsented browser download into a nonexecutable secure zone on
disk. BLADE thwarts the ability of browser-based exploits to surrepti-
tiously download and execute malicious content by remapping to the ﬁlesys-
tem only those browser downloads to which a programmatically inferred
user-consent is correlated, BLADE provides its protection without explicit
knowledge of any exploits and is thus resilient against code obfuscation
and zero-day threats that directly contribute to the pervasiveness of today’s
drive-by malware. We present the design of our BLADE prototype imple-
mentation for the Microsoft Windows platform, and report results from an
extensive empirical evaluation of its effectiveness on popular browsers. Our
evaluation includes multiple versions of IE and Firefox, against 1,934 active
malicious URLs, representing a broad spectrum of web-based exploits now
plaguing the Internet. BLADE successfully blocked all drive-by malware
install attempts with zero false positives and a 3% worst-case performance
cost.
Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protection
General Terms
Security
Keywords
Malware Protection, Drive-by Download,
Unconsented-Content Execution Prevention
1.
INTRODUCTION
As highlighted by the recent Aurora exploit used in the Google
espionage attack [2], vulnerable web browsers and the growing
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
Surreptitious delivery exploits, which are the focus of this pa-
per, represent a particularly insidious form of exploit, whereby the
mere connection to a web server can result in the installation of
malware on the client machine. Here, no user consent is required,
and no symptoms of the infection may ever manifest on the victim’s
host. Rather, the malicious web server silently passes malicious
shellcode to the victim browser, which then forces the browser to
download, store, and silently execute a malicious application. The
installed malware could then be used for identity theft, to exﬁltrate
information [18], launch denial-of-service attacks [11], or partici-
pate in botnet activity [8, 28].
Our Approach: As a signiﬁcant and tangible countermeasure
against such attacks, we propose BLADE, a system that effectively
immunizes a host against all forms of drive-by download malware
installs. A distinguishing aspect of the BLADE design is that it
is both attack and browser agnostic, i.e., it neither requires exploit
signatures nor changes to the browsers. Rather, BLADE relies on
limited semantic knowledge about a handful of user interface (UI)
elements common across web browser applications. While our im-
plementation is focused on browser protection, the approach could
be generalized to other network-capable applications (e.g., email
clients, instant messengers, media players) that are subject to drive-
by exploits.
BLADE’s design principle, unconsented-content execution pre-
vention, is motivated by a fundamental practice in the way browsers
handle web stream content. That is, when receiving data content
from a web server, browsers handle the content they receive in
either of two basic ways: supported ﬁle types (e.g., html, jpeg,
pdf) and unsupported ﬁle types (e.g., exe, zip). While browsers
silently fetch and render all supported ﬁle types, they must prompt
the user when an unsupported type is encountered. However, the
objective of the drive-by download is to deliver malicious bina-
ries through the browser using methods that essentially bypass the
standard unsupported-type user prompt interactions. BLADE’s ap-
proach is to intercept and impose execution prevention of all down-
loaded content that has not been directly consented to by any user-
to-browser interaction. This is in contrast to sandboxing techniques
[9] that do not track user interaction and permit limited execution
of untrusted code in tightly controlled environments.
To prevent unconsented-content execution, BLADE introduces
440three key operating system (OS)-level capabilities by coordinating
its components in the kernel space, as shown in Figure 1. First,
BLADE introduces user-interaction tracking as a means to collect
user download authorizations expressed during interactions with
browsers. BLADE captures on-screen consent-to-download dialog
windows via a Screen Parser module and tracks the user’s physical
interactions (e.g., mouse clicks) with these dialog windows via a
Hardware Event Tracer. Second, BLADE introduces consent cor-
relation as a means to discern “transparent” downloads from those
that involve direct user authorization. Third, BLADE uses disk
I/O redirection to efﬁciently contain disk footprints of unconsented
data delivered through supervised processes.1 File content created
and manipulated by supervised processes is stored in a nonexe-
cutable location created and managed by BLADE. This secure zone
represents virtual offshore storage accessible only from supervised
processes as a result of the transparent disk I/O redirection. The
redirection logic provides supervised processes with a modiﬁed ﬁle
system view to maintain functional consistency, which renders the
impression that all disk operations are carried out in their respective
locations. Files in the secure zone are prevented from being loaded
into the memory as executables (in the case of Windows, load oper-
ations of .exe, .dll, .sys, and etc. are disallowed). BLADE’s ability
to identify unconsented ﬁle content and enforce execution preven-
tion distinguishes it from techniques such as ﬁlesystem sandbox-
ing, where all ﬁle operations are blindly jailed while allowing the
malware to execute inside the sandbox.
We have implemented a prototype version of BLADE for Win-
dows platforms and evaluated it with browsers commonly targeted
by drive-by download attacks, including multiple versions of In-
ternet Explorer (IE) and Firefox. Our evaluation results show that
BLADE accurately intercepts drive-by download infections from
all the 1,934 sites we have tested, including those that are heavily
obfuscated to circumvent other defense techniques. Our perfor-
mance testing shows that BLADE introduces only minimal over-
head on variable workloads.
Contributions: In summary, the contributions of our work include
the following:
• A novel and effective model for describing and thwarting
drive-by download attacks.
• Unconsented-content execution prevention as a new method-
ology for web-based malware prevention.
• Design and implementation of the BLADE prototype on Win-
dows platforms.
• Comprehensive empirical evaluation of BLADE on real-world
threats and benign workloads.
The remainder of the paper is organized as follows. In § 2, we
discuss the BLADE approach, design objectives and challenges. In
§ 3, we describe the architecture and implementation of BLADE
components. In § 4, we measure BLADE’s performance impact
and evaluate the efﬁcacy of the system against real and obfuscated
exploits. In § 5, we analyze the security of BLADE system and its
limitations. In § 6, we discuss related work. Finally, § 7 concludes
with a summary and discussion of potential future work.
2. THE BLADE APPROACH TO DRIVE-BY
EXPLOIT DEFENSE
The web is an increasingly treacherous place. The mere act of
connecting one’s web browser to the wrong website may result in
1We use the term “supervised processes” to broadly refer to pro-
cesses actively monitored by BLADE, including all browsers and
their child processes such as plug-ins, to which remote executions
may be injected by drive-by exploits.
the installation of an application without the user’s authorization or
knowledge. Furthermore, attempting to limit one’s browsing be-
havior to reputable and well-known websites is becoming a less
effective strategy, as malware developers are actively inﬁltrating
these sites to spread their malicious links [20].
To understand how BLADE defends client browsers from the
current generation of drive-by exploits, we ﬁrst provide a more re-
ﬁned explanation of how drive-by exploits operate. We can then
identify the underlying common transaction performed by drive-by
exploits that BLADE ultimately aims to stop.
2.1 Drive-By Exploits
A drive-by download can be described as a series of steps that
the adversary performs to achieve the surreptitious download and
installation of malware via the victim’s browser. The goal of the
drive-by exploit is to take effective, temporary control of the client
web browser for the purpose of forcing it to fetch, store, and then
execute a binary application (e.g., .exe, .dll, .msi, .sys) without re-
vealing to the human user that these actions have taken place. We
present the drive-by exploit strategy as a series of phases.
Shellcode injection phase: The ﬁrst challenge in delivering the
drive-by exploit is that of gaining temporary control of the browser.
Uniformly, all drive-by exploits begin with a remote code injection,
such as buffer overﬂow exploit against some component within the
browser process, e.g., the ActiveX interpreter, a multimedia plug-
in, the PDF helper object, the Flash player etc.
Shellcode execution phase: Regardless of which exploit tech-
nique is selected by the malware author, the objective of this exploit
is to inject a small shellcode segment within the browser process to
conduct covert binary installation (this essentially deﬁnes the attack
as a drive-by exploit).
Covert binary install phase: The ﬁnal phase of the drive-by
exploit is the sequence of steps leading to the ﬁnal, permanent in-
fection of the client host. Here, the shellcode effectively coerces
the now tainted browser into fetching a remote malware applica-
tion from some remote source on the Internet, storing it within the
ﬁlesystem and executing it on the victim’s host.
2.2 The BLADE Threat Model, Design
Objectives, and Challenges
In our threat model, an adversary conducting drive-by download
attacks is allowed to hijack control of a vulnerable browser and in-
ject remote code. BLADE assumes that this attacker should have
no persistent malware deployed on the target host in advance, as
otherwise the goal of the attack would have been already achieved.
Speciﬁcally, there is no rootkit from the adversary installed on the
system, i.e., the OS kernel is trusted. Although scenarios where
the assumed attacker can remotely exploit a kernel vulnerability
via a browser exist, which are out of the scope of this model, we
argue that they are extremely rare and could be addressed by in-
tegrating orthogonal OS integrity protection technologies, such as
hypervisor-based protections, with BLADE.
BLADE does not attempt to halt the drive-by exploit at the shell-
code injection phase or the shellcode execution phase. Given the
overwhelming diversity of browser extensions, modules, and code
changes that are continually churned out by the high-paced browser
development community, the task of stopping all shellcode injec-
tions is a truly daunting challenge. Even with the introduction
of OS-level protections such as DEP and ASLR and browser-level
sand-boxing, drive-by exploits are still succeeding [16].
Rather, BLADE incorporates a different tactic in ﬁghting drive-
by attacks. From BLADE’s perspective, the drive-by download at-
tack conducts a series of steps designed to bypass the normal user-
content-handling procedure that should be performed whenever a
browser attempts to store this data to disk. The fetched binary itself
441Figure 1: Overview of the BLADE system architecture
represents an unsupported browser type that cannot be handled and
rendered directly by the browser, but must be delivered through the
standard user-initiated consent-to-download dialog. BLADE aims
to disrupt the covert binary install phase, completely agnostic of
which browser component was exploited or which shellcode injec-
tion strategy was employed to achieve the initial browser hijack.
BLADE’s core mission is to foil the execution by any program