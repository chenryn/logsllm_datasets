# BLADE: An Attack-Agnostic Approach for Preventing Drive-By Malware Infections

**Authors:**  
Long Lu†, Vinod Yegneswaran‡, Phillip A. Porras‡, Wenke Lee†  
†College of Computing, Georgia Institute of Technology  
‡SRI International  
{long, wenke}@cc.gatech.edu, {vinod, porras}@csl.sri.com

## Abstract
Web-based surreptitious malware infections, commonly known as drive-by downloads, have become the primary method for delivering malicious software to computers across the Internet. To address this threat, we introduce BLADE (Block All Drive-by Download Exploits), a browser-independent operating system kernel extension designed to prevent drive-by malware installations. BLADE ensures that all executable files delivered through browser downloads must result from explicit user consent and redirects any unconsented downloads to a non-executable secure zone on disk. By remapping only those browser downloads with programmatically inferred user consent, BLADE effectively thwarts the ability of browser-based exploits to download and execute malicious content. BLADE's approach is attack-agnostic, making it resilient against code obfuscation and zero-day threats. We present the design and implementation of our BLADE prototype for the Microsoft Windows platform and report results from an extensive empirical evaluation using popular browsers. Our evaluation, which includes multiple versions of Internet Explorer and Firefox, tested against 1,934 active malicious URLs, demonstrates that BLADE successfully blocked all drive-by malware installation attempts with zero false positives and a worst-case performance cost of 3%.

## Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protection

## General Terms
Security

## Keywords
Malware Protection, Drive-by Download, Unconsented-Content Execution Prevention

## 1. Introduction
The recent Aurora exploit, used in the Google espionage attack, highlights the vulnerability of web browsers and the growing threat of drive-by malware. These attacks can silently install malware on a client machine simply by connecting to a malicious web server, without requiring user consent or showing any symptoms of infection. The malicious server passes shellcode to the victim's browser, which then forces the browser to download, store, and execute a malicious application. This installed malware can be used for identity theft, data exfiltration, denial-of-service attacks, or botnet activity.

### Our Approach
To counter these attacks, we propose BLADE, a system that immunizes hosts against all forms of drive-by download malware installs. BLADE is both attack and browser agnostic, meaning it does not require exploit signatures or changes to the browsers. Instead, it relies on limited semantic knowledge about common user interface (UI) elements across web browsers. While our implementation focuses on browser protection, the approach can be generalized to other network-capable applications such as email clients, instant messengers, and media players.

BLADE's core principle is unconsented-content execution prevention. Browsers handle supported file types (e.g., HTML, JPEG, PDF) silently, but prompt the user for unsupported types (e.g., EXE, ZIP). Drive-by downloads aim to bypass these prompts to deliver malicious binaries. BLADE intercepts and prevents the execution of all downloaded content that has not been explicitly consented to by the user, contrasting with sandboxing techniques that do not track user interaction and permit limited execution of untrusted code.

### Key Capabilities
BLADE introduces three key operating system (OS)-level capabilities:
1. **User-Interaction Tracking**: Collects user download authorizations via a Screen Parser module and tracks physical interactions (e.g., mouse clicks) with consent-to-download dialog windows.
2. **Consent Correlation**: Discerns "transparent" downloads from those with direct user authorization.
3. **Disk I/O Redirection**: Contains the disk footprints of unconsented data by redirecting them to a non-executable secure zone. Files in this zone are prevented from being loaded into memory as executables.

We have implemented a prototype of BLADE for Windows platforms and evaluated it with commonly targeted browsers, including multiple versions of Internet Explorer and Firefox. Our results show that BLADE accurately intercepts drive-by download infections from all 1,934 tested sites, including heavily obfuscated ones, with minimal performance overhead.

### Contributions
- A novel and effective model for thwarting drive-by download attacks.
- Unconsented-content execution prevention as a new methodology for web-based malware prevention.
- Design and implementation of the BLADE prototype on Windows platforms.
- Comprehensive empirical evaluation of BLADE on real-world threats and benign workloads.

## 2. The BLADE Approach to Drive-By Exploit Defense
The web is becoming increasingly treacherous, with even reputable websites being infiltrated by malware developers. To understand how BLADE defends against drive-by exploits, we first explain how these exploits operate and identify the common transaction they perform.

### 2.1 Drive-By Exploits
A drive-by download involves several steps:
1. **Shellcode Injection Phase**: The attacker gains temporary control of the browser, often through a buffer overflow exploit.
2. **Shellcode Execution Phase**: The injected shellcode conducts covert binary installation.
3. **Covert Binary Install Phase**: The shellcode forces the browser to fetch, store, and execute a remote malware application.

### 2.2 The BLADE Threat Model, Design Objectives, and Challenges
In our threat model, the adversary can hijack a vulnerable browser and inject remote code. BLADE assumes no persistent malware is already deployed on the host and that the OS kernel is trusted. BLADE does not aim to stop shellcode injection or execution but instead disrupts the covert binary install phase. BLADE's core mission is to prevent the execution of any program that has not been explicitly consented to by the user.

## 3. Architecture and Implementation
[Detailed description of the BLADE architecture and implementation, including components and their interactions, will be provided here.]

## 4. Performance Impact and Efficacy Evaluation
[Results of performance testing and efficacy evaluation, including tests against real and obfuscated exploits, will be provided here.]

## 5. Security Analysis and Limitations
[Analysis of the security of the BLADE system and its limitations will be provided here.]

## 6. Related Work
[Discussion of related work and how BLADE compares to existing solutions will be provided here.]

## 7. Conclusion and Future Work
[Summary of the contributions and discussion of potential future work will be provided here.]

---

This revised version aims to make the text more coherent, clear, and professional, while maintaining the technical details and structure of the original document.