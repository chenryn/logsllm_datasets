bines the data from multiple iterations of baseline mea-
surements and χ2 calculations from attack runs. The
attacker determines for each χ2 value the correspond-
ing conﬁdence interval. These values are frequently
large (99.9999% or higher are not uncommon) since Tor
routers do frequently experience signiﬁcant changes in
congestion. Given these individual conﬁdence values for
each individual iteration, a cumulative score is computed
as the product2 of these values. Fig. 9 shows the Tor
2It is conceivable that multiplying χ2 values may cause false-
12
1-1x10-10.99999.99.90 0 2 4 6 8 10 12 14Product of Confidence ValuesNumber of RunsPrivacyhostingc64177124055DieYouRebelScum1ArikaYumemiyaaukmrkoolltorTorSchleimmyrnaloyjudasDoodles123tin0baphometkalliodioraaquatoriusEinlaufdontmesswithmeaskatasunacentury1-1x10-201-1x10-10.99999.99.90 0 5 10 15 20 25 30Product of Confidence ValuesNumber of RunsRattensalatSECwie6ud6BhamakoryavsaukdontmesswithmecThorRaccooneponymousragaBlueStar88awranglerrutgerseduconf555nickmf62525miskatonicWeAreAHedgeanon1984n2c64177124055bondserver3Router
Rattensalat
c64177124055
Raccoon
wie6ud6B
SEC
cThor
BlueStar88a
bond
eponymousraga
conf555nick
Πp
0.999991
0.903
0.891
0.890
0.870
0.789
0.734
0.697
0.458
0.450
r
44
3
8
11
13
8
7
3
7
5
Peak BW Conﬁgured BW
210 kB/s
231 kB/s
512 kB/s
569 kB/s
4100 kB/s
3337 kB/s
120 kB/s
100 kB/s
5120 kB/s
4707 kB/s
500 kB/s
553 kB/s
100 kB/s
111 kB/s
407 kB/s
384 kB/s
100 kB/s
118 kB/s
275 kB/s
200 kB/s
Table 1: This table lists the top ten (out of 251 total) products of conﬁdence intervals (p-values). r is the number of
iterations (and hence the number of factors in Πp) that was performed for the respective router. As expected, the entry
node Rattensalat achieves the highest score.
routers with the highest cumulative scores using this met-
ric from trials on two different entry nodes. Note that
fewer iterations were performed for routers with low cu-
mulative scores; the router with the highest score (after
roughly ﬁve iterations) and the most overall iterations is
the correctly identiﬁed entry node of the circuit.
Table 1 contrasts the product of χ2 values (as intro-
duced in Section 3.3) obtained while attacking the ac-
tual ﬁrst hop with the product while attacking other Tor
routers. The data shows that our attack can be used to
distinguish the ﬁrst hop from other routers when control-
ling the exit router (therefore knowing a priori the middle
router).
Finally, by comparing the highest latency observed
during the baseline measurement with the highest latency
observed under attack, Table 2 provides a simple illus-
tration showing that the congestion attack actually has a
signiﬁcant effect.
5 Proposed Solutions
An immediate workaround that would address the pre-
sented attack would be disabling of JavaScript by the
end user. However, JavaScript is not the only means by
which an attacker could obtain timing information. For
example, redirects embedded in the HTML header could
also be used (they would, however, be more visible to
the end user). Links to images, frames and other fea-
tures of HTML could also conceivably be used to gener-
ate repeated requests. Disabling all of these features has
the disadvantage that the end user’s browsing experience
would suffer.
negatives should a single near-zero χ2 value for the correct entry node
be observed. While we have not encountered this problem in practice,
using the mean of χ2 values would provide a way to avoid this theoret-
ical problem.
A better solution would be to thwart the denial-of-
service attack inherent in the Tor protocol. Attackers
with limited bandwidth would then no longer be able to
signiﬁcantly impact Tor’s performance. Without the abil-
ity to selectively increase the latency of a particular Tor
router, the resulting timing measurements would most
likely give too many false positives. We have extended
the Tor protocol to limit the length of a path. The details
are described in [9]; we will detail the key points here.
In the modiﬁed design, Tor routers now must keep
track of how often each circuit has been extended and
refuse to route messages that would extend the circuit
beyond a given threshold t. This can be done by tagging
messages that may extend the circuit with a special ﬂag
that is not part of the encrypted stream. The easiest way
to do this is to introduce a new Tor cell type that is used
to ﬂag cells that may extend the circuit. Routers then
count the number of messages with the special ﬂag and
refuse to route more than a given small number (at the
moment, eight) of those messages. Routers that receive a
circuit-extension request check that the circuit-extension
message is contained in a cell of the appropriate type.
Note that these additional checks do not change the per-
formance characteristics of the Tor network. An attacker
could still create a long circuit by looping back to an
adversary-controlled node every t hops; however, the ad-
versary would then have to provide bandwidth to route
every t-th packet; as a result, the bandwidth consump-
tion by the attacker is still bounded by the small constant
t instead of the theoretically unbounded path length m.
While this change prevents an attacker from construct-
ing a circuit of arbitrary length, it does not fully prevent
the attacker from constructing a path of arbitrary length.
The remaining problem is that the attacker could estab-
lish a circuit and then from the exit node reconnect to the
Tor network again as a client. We could imagine conﬁg-
13
Router Attacked
Rattensalat
Wiia
downtownzion
dontmesswithme
wie6ud6B
TorSchleim
hamakor
Vault24
Einlauf
grsrlfz
Max Latency Difference Avg. Latency Difference Runs
41
5
9
8
9
15
8
7
8
2
70352 ms
46215 ms
39522 ms
37648 ms
35058 ms
28630 ms
25975 ms
24330 ms
22626 ms
22545 ms
25822 ms
470 ms
2625 ms
166 ms
9628 ms
5765 ms
6532 ms
4647 ms
2017 ms
10112 ms
Table 2: This table shows the top 10 highest latency differences between the maximum observed measurement in attack
runs versus the baseline runs for each router. Unsurprisingly, the difference between the maximum latency observed
during the congestion attack and the baseline measurement is signiﬁcantly higher when attacking the correct ﬁrst hop
compared to attacking other routers. Also included for comparision is the average max latency over all iterations (also
higher for the correct ﬁrst hop), and the number of runs.
uring all Tor relays to refuse incoming connections from
known exit relays, but even this approach does not en-
tirely solve the problem:
the attacker can use any ex-
ternal proxies he likes (e.g. open proxies, unlisted Tor
relays, other anonymity networks) to “glue” his circuits
together. Assuming external proxies with sufﬁcient ag-
gregate bandwidth are available for gluing, he can build
a chain of circuits with arbitrary length. Note that the
solution proposed in [30] — limiting circuit construction
to trees — does not address this issue; furthermore, it
increases overheads and implementation complexity far
beyond the change proposed here and (contrary to the
claims in [30]) may also have an impact on anonymity,
since it requires Tor to fundamentally change the way
circuits are constructed. We leave a full solution to this
problem as an open research question.
Finally, given that strong adversaries may be able to
mount latency altering attacks without Tor’s “help”, Tor
users might consider using a longer path length than
the minimalistic default of three. This would involve
changes to Tor, as currently the only way for a user to
change the default path length would be to edit and re-
compile the code (probably out of scope for a “normal”
user). While the presented attack can be made to work
for longer paths, the number of false positives and the
time required for a successful path discovery increase
signiﬁcantly with each extra hop. Using a random path
length between four and six would furthermore require
the adversary to conﬁrm that the ﬁrst hop was actually
found (by determining that none of the other Tor routers
could be a predecessor). Naturally, increasing the path
length from three to six would signiﬁcantly increase the
latency and bandwidth requirements of the Tor network
and might also hurt with respect to other attacks [2].
6 Low-cost Trafﬁc Analysis
Against Modern Tor
Failure
We attempted to reproduce Murdoch and Danezis’s
work [27] on the Tor network of 2008. Murdoch pro-
vided us with their code and statistical analysis frame-
work which performs their congestion attack while mea-
suring the latency of the circuit. Their analysis also deter-
mines the average latency and uses normalized latencies
as the strength of the signal.
The main difference in terms of how data is obtained
between Murdoch and Danezis and the attack presented
in Section 3 is that Murdoch and Danezis use a circuit
constructed by the attacker to measure the latency in-
troduced by the victim circuit whereas our attack uses
a circuit constructed by the victim to measure the latency
introduced by the attacker.
As in this paper, the adversary implemented by Mur-
doch and Danezis repeatedly switches the congestion at-
tack on and off; a high correlation between the presence
of high latency values and the congestion attack being
active is used to determine that a particular router is on
the circuit. If such a correlation is absent for the correct
router, the attack produces false negatives and fails. If a
strong correlation is present between high latency values
and random time periods (without an active attack) then
the attack produces false positives and also fails.
Fig. 10 shows examples of our attempts at the method
used in [27], two with the congestion attack being ac-
tive and two without. Our experiments reproduced Mur-
doch and Danezis’s attack setup where the attacker tries
to measure the congestion caused by the victim’s circuit.
Note that in the graphs on the right, the congestion at-
tack was run against a Tor router unrelated to the circuit
14
Figure 10: These graphs show four runs of the method used in [27], two with the congestion attack being active (on
the left) and two without (on the right). The ﬁgure plots the observed latency of a router over time. Blue bars are used
to indicate when the congestion attack was active; in the case of the graphs on the right the attack was active on an
unrelated circuit. Red lines are drawn to latency values above average to mark latencies that correlate with the attack,
according to the Murdoch and Danezis style analysis.
and thus inactive for the circuit that was measured. Any
correlation observed in this case implies that Murdoch
and Danezis’s attack produces false positives. The “vi-
sual” look of the graphs is the same whether the attack is
targeted at that relay or not. Speciﬁcally, the graphs on
the right suggest a similar correlation pattern even when
the attack was “off” (or targeting unrelated Tor routers).
This is due to the high volume of trafﬁc on today’s Tor
network causing baseline congestion which makes their
analysis too indiscriminate.
Table 3 shows some representative correlation val-
ues that were computed using the statistical analysis
from [27] when performed on the modern Tor net-
work. Note that the correlation values are high regard-
less of whether or not the congestion attack was actu-
ally performed on the respective router. For Murdoch
and Danezis’s analysis to work, high correlation values
should only appear for the attacked router.
The problem with Murdoch and Danezis’s attack and
analysis is not primarily with the statistical method; the
single-circuit attack itself is simply not generating a suf-