            for l in f.readlines():
              s = l.strip().split(",")
              cg_distance[s[0]] = float(s[1])
          if not cg_distance:
            print ("Call graph distance file is empty.")
            exit(0)
          # 初始化基本块距离为函数维度距离，取最小的值
          with open(args.cg_callsites, 'r') as f:
            for l in f.readlines():
              s = l.strip().split(",")
              if find_nodes(s[0]):
                if s[1] in cg_distance:
                  if s[0] in bb_distance:
                    if bb_distance[s[0]] > cg_distance[s[1]]:
                      bb_distance[s[0]] = cg_distance[s[1]]
                  else:
                    bb_distance[s[0]] = cg_distance[s[1]]
          print ("Adding target BBs (if any)..")
          with open(args.targets, "r") as f:
            for l in f.readlines ():
              s = l.strip().split("/");
              line = s[len(s) - 1]
              if find_nodes(line):
                bb_distance[line] = 0
                print ("Added target BB %s!" % line)
然后计算还是`distance`函数
        else:
          for t_name, bb_d in bb_distance.items():
            di = 0.0
            ii = 0
            for t in find_nodes(t_name):
              try:
                shortest = nx.dijkstra_path_length(G, n, t) # 依然是取最短路径的距离
                di += 1.0 / (1.0 + 10 * bb_d + shortest) # 这里的计算实际为(10*func-distance + bb-distance)，然后取调和平均数。
                ii += 1
              except nx.NetworkXNoPath:
                pass
            if ii != 0:
              d += di / ii
              i += 1
        if d != 0 and (distance == -1 or distance > i / d) :
          distance = i / d
到这里，每个可以到达目标块的基本块的距离就计算完成。最后的距离存储在`distance.callgraph.txt`文件中(如果是采用新版本的`gen_distance_fast.py`脚本计算，最后的文件名为`distance.cfg.txt`)。
###  2.3 插桩距离
得到距离值以后，将每个基本块的距离值插桩到程序中，让fuzzer在fuzzing过程中可以得到距离的反馈。
    export CFLAGS="$COPY_CFLAGS -distance=$TMP_DIR/distance.cfg.txt"
    export CXXFLAGS="$COPY_CXXFLAGS -distance=$TMP_DIR/distance.cfg.txt"
    # Clean and build subject with distance instrumentation ☕️
    pushd $SUBJECT
      make clean
      ./configure --disable-shared
      make xmllint
    popd
这里用编译选项`-distance=$TMP_DIR/distance.cfg.txt"`将文件路径传递给 AFLGo。
      if (!TargetsFile.empty()) {
        ...
      } else if (!DistanceFile.empty()) { // 判断distance文件路径是否为空
        std::ifstream cf(DistanceFile);
        if (cf.is_open()) {
          std::string line;
          while (getline(cf, line)) {
            std::size_t pos = line.find(",");
            std::string bb_name = line.substr(0, pos);
            // 这里读取distance文件中的基本块名字和距离，计算得到的距离是浮点数，但是插桩为了方便都转为整数
            // 所以直接将浮点数值 * 100 取整数部分，存在bb_to_dis的map中
            int bb_dis = (int) (100.0 * atof(line.substr(pos + 1, line.length()).c_str()));
            bb_to_dis.emplace(bb_name, bb_dis);
            basic_blocks.push_back(bb_name);
          }
          cf.close();
          is_aflgo = true;
        } else {
          FATAL("Unable to find %s.", DistanceFile.c_str());
          return false;
        }
最后是插桩的逻辑部分，在保留原本 AFL 的插桩逻辑的基础上添加 AFLGo 对距离的插桩
      if (is_aflgo_preprocessing) {
       ...
      } else {
        /* Distance instrumentation */
        /* 这里定义的是LLVM中的整数类型，插桩时需要声明插入数值的类型
        */
        LLVMContext &C = M.getContext();
        IntegerType *Int8Ty  = IntegerType::getInt8Ty(C);
        IntegerType *Int32Ty = IntegerType::getInt32Ty(C);
        IntegerType *Int64Ty = IntegerType::getInt64Ty(C);
        /* 用宏定义__x86_64__区分64位机器和32位机器的插桩数值位数，如果是64位用Int64Ty，32位用Int32Ty
           并且MapCntLoc的位置根据机器位数判断是在Map后的8位(MAP_SIZE + 8)还是4位(MAP_SIZE + 4)
        */
    #ifdef __x86_64__
        IntegerType *LargestType = Int64Ty;
        ConstantInt *MapCntLoc = ConstantInt::get(LargestType, MAP_SIZE + 8);
    #else
        IntegerType *LargestType = Int32Ty;
        ConstantInt *MapCntLoc = ConstantInt::get(LargestType, MAP_SIZE + 4);
    #endif
        ConstantInt *MapDistLoc = ConstantInt::get(LargestType, MAP_SIZE);
        ConstantInt *One = ConstantInt::get(LargestType, 1);
        /* Get globals for the SHM region and the previous location. Note that
           __afl_prev_loc is thread-local. */
        GlobalVariable *AFLMapPtr =
            new GlobalVariable(M, PointerType::get(Int8Ty, 0), false,
                               GlobalValue::ExternalLinkage, 0, "__afl_area_ptr");
        GlobalVariable *AFLPrevLoc = new GlobalVariable(
            M, Int32Ty, false, GlobalValue::ExternalLinkage, 0, "__afl_prev_loc",
            0, GlobalVariable::GeneralDynamicTLSModel, 0, false);
        // 迭代得到每个BB的名字，粒度从Module > Function > BB > I
        for (auto &F : M) {
          int distance = -1;
          for (auto &BB : F) {
            distance = -1;
            if (is_aflgo) {
              /* 这里获取每个基本块名字的方法和预处理阶段一样，取第一个有效指令的位置信息作为基本块名字
              */
              std::string bb_name;
              for (auto &I : BB) {
                std::string filename;
                unsigned line;
                getDebugLoc(&I, filename, line);
                if (filename.empty() || line == 0)
                  continue;
                std::size_t found = filename.find_last_of("/\\");
                if (found != std::string::npos)
                  filename = filename.substr(found + 1);
                bb_name = filename + ":" + std::to_string(line);
                break;
              }
              if (!bb_name.empty()) {
                /* 比较名字是否相同判断是否是需要插桩的基本块
                */
                if (find(basic_blocks.begin(), basic_blocks.end(), bb_name) == basic_blocks.end()) {
                  /* 如果开启AFLGO_SELECTIVE选项，则不进入后面插桩的逻辑部分，即AFL的逻辑也只对AFLGo选择的基本块插桩
                  */
                  if (is_selective)
                    continue;
                } else {
                  /* Find distance for BB */
                  /* 找到对应基本块的距离
                  */
                  if (AFL_R(100) ::iterator it;
                    for (it = bb_to_dis.begin(); it != bb_to_dis.end(); ++it)
                      if (it->first.compare(bb_name) == 0)
                        distance = it->second;
                  }
                }
              }
            }
            /* 进入插桩的逻辑部分，前面的部分是AFL的basicblock edge插桩逻辑
            */
            BasicBlock::iterator IP = BB.getFirstInsertionPt();
            IRBuilder<> IRB(&(*IP));
            if (AFL_R(100) >= inst_ratio) continue;
            /* Make up cur_loc */
            unsigned int cur_loc = AFL_R(MAP_SIZE);
            ConstantInt *CurLoc = ConstantInt::get(Int32Ty, cur_loc);
            /* Load prev_loc */
            LoadInst *PrevLoc = IRB.CreateLoad(AFLPrevLoc);
            PrevLoc->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
            Value *PrevLocCasted = IRB.CreateZExt(PrevLoc, IRB.getInt32Ty());
            /* Load SHM pointer */
            LoadInst *MapPtr = IRB.CreateLoad(AFLMapPtr);
            MapPtr->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
            Value *MapPtrIdx =
                IRB.CreateGEP(MapPtr, IRB.CreateXor(PrevLocCasted, CurLoc));
            /* Update bitmap */
            LoadInst *Counter = IRB.CreateLoad(MapPtrIdx);
            Counter->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
            Value *Incr = IRB.CreateAdd(Counter, ConstantInt::get(Int8Ty, 1));
            IRB.CreateStore(Incr, MapPtrIdx)
               ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
            /* Set prev_loc to cur_loc >> 1 */
            StoreInst *Store =
                IRB.CreateStore(ConstantInt::get(Int32Ty, cur_loc >> 1), AFLPrevLoc);
            Store->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
            /* 下面是AFLGo的距离插桩部分，将该基本块的距离累加到MapDistLoc的位置上，再递增MapCntLoc位置的值，
               即：MapDistLoc上的值表示seed经过所有的基本块的距离累加和，MapCntLoc上的值表示seed经过的基本块的数量。
            */
            if (distance >= 0) {
              ConstantInt *Distance =
                  ConstantInt::get(LargestType, (unsigned) distance);
              /* Add distance to shm[MAPSIZE] */
              Value *MapDistPtr = IRB.CreateBitCast(
                  IRB.CreateGEP(MapPtr, MapDistLoc), LargestType->getPointerTo());
              LoadInst *MapDist = IRB.CreateLoad(MapDistPtr);
              MapDist->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
              Value *IncrDist = IRB.CreateAdd(MapDist, Distance);
              IRB.CreateStore(IncrDist, MapDistPtr)
                  ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
              /* Increase count at shm[MAPSIZE + (4 or 8)] */
              Value *MapCntPtr = IRB.CreateBitCast(
                  IRB.CreateGEP(MapPtr, MapCntLoc), LargestType->getPointerTo());
              LoadInst *MapCnt = IRB.CreateLoad(MapCntPtr);
              MapCnt->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
              Value *IncrCnt = IRB.CreateAdd(MapCnt, One);
              IRB.CreateStore(IncrCnt, MapCntPtr)
                  ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
            }
            inst_blocks++;
          }
        }
      }
这里突然出现了两个新的共享内存位置，所以分配的时候需要增加分配空间，修改分配空间在`llvm_mode/afl-llvm-rt.o.c`文件中