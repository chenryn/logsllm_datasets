cious, static adversary. We say that a protocol Π UC-realizes an
ideal functionality F if for any adversary A, there exists a PPT
simulator S such that for any environment Z with an arbitrary
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2999.
sVOLE
auxiliary input z, the output distribution of Z in the real-world
execution where the parties interact with A and execute proto-
col Π is indistinguishable from the output distribution of Z in the
ideal-world execution where the parties interact with S and F.
We prove the security of our protocols in the G-hybrid model,
where the parties execute a protocol with real messages and also
have access to an ideal functionality G. We say that protocol Π UC-
realizes functionality F in the G-hybrid model with statistical error
1/2ρ and information-theoretic security (resp., computational secu-
rity), if the distinguishing probability of environment Z between
the real-world execution and ideal-world execution is bounded by
1/2ρ (resp., 1/2ρ + negl(κ)). Here we denote by negl(·) a negligible
function such that negl(κ) = o(κ−c) for every positive constant c.
Global-key query for sVOLE. In the malicious setting, if the
sVOLE protocol [48] over any field is used to securely realize F p,r
sVOLE
shown in Figure 6, then we can guarantee the UC security when
the following single global-key query is added into F p,r
• If P is corrupted, receive (guess, ∆′) from the adversary. If ∆′ =
∆, then send success to P and ignore any subsequent global-key
query. Otherwise, send abort to both parties and abort.
This global-key query allows the adversary to guess ∆ only once,
which only increases the successful probability of the adversary to
guess ∆ by at most 1/pr . If the more efficient sVOLE protocol [49]
for only the case of p = 2 and r = κ is used, then we need to increase
global-key queries from a single query to any polynomial number
of queries, where this functionality will not abort for an incorrect
guess. This type of global-key queries has been used in MPC proto-
cols such as [30, 40]. In this case, the successful probability of the
adversary to guess ∆ is increased to at most q/2κ, where q is the
number of global-key queries.
For the sake of simplicity, we omit the global-key query, even if
we use the protocols [48, 49] to UC-realize F p,r
B PROOF OF THEOREM 4.1
,
ext-sVOLE
and running the adversary A as a subroutine while emulating
for A. In particular, there is no communication between
F p,r
sVOLE
P and V. Thus, S can emulate F p,r
and record all the values
sent by A to F p,r
, and then compute the output value for the
sVOLE
corrupted party following the protocol specification, and send it
to functionality F p,r
. It is trivial to see that the simulation is
perfect.
Proof. We construct a simulator S given access to F p,r
ext-sVOLE
Below, we show that the output of the honest party is statistically
indistinguishable between the real-world execution and ideal-world
execution. We first prove if both parties compute their output locally
following the protocol specification, then their outputs satisfy the
correct VOPE correlation. Specifically, from kh = mh + uh · ∆ for
h ∈ [r], we easily obtain that for each i ∈ [d],
sVOLE
sVOLE
.
Ki = 
= 
h∈[r]
kh · X h−1 = 
(cid:16) 
mh · X h−1 +
h∈[r]
h∈[r]
h∈[r]
= Mi + Ui · ∆.
(mh + uh · ∆) · X h−1
uh · X h−1(cid:17) · ∆
It is easy to see that B1 = K1 = M1 + U1 · ∆ = д1(∆). Below, we
prove by induction. In the i-th iteration with i ∈ [d − 1], assuming
that Bi = дi(∆), we have the following holds:
Bi +1 = Bi · Ki +1 + Kd +i
i∈[0,d] Ai · ∆i.
= дi(∆) · (Mi +1 + Ui +1 · ∆) + (Md +i + Ud +i · ∆)
= дi +1(∆).
Therefore, we obtain that B = Bd = дd(∆) =
of malicious party P and ∆ (i.e., B = 
random such that B =
we have that Ui :=
If V is honest, then its output is always defined by the output
i∈[0,d] Ai · ∆i) in both
worlds. In the following, we consider the case that P is honest but
V is malicious. The output values A0, . . . , Ad for P are uniformly
i∈[0,d] Ai · ∆i in the ideal-world execution,
where B is the output of malicious party V. In the real protocol
execution, Ai for each i ∈ [0, d] is computed as the coefficient
of item xi for polynomial дd(x). According to the definition of
F p,r
, uh for h ∈ [r] is uniform in Fp. Therefore, for i ∈ [2d − 1],
sVOLE
h∈[r] uh · X h−1 is uniformly random in Fpr .
For i ∈ [d], we prove by induction that each coefficient of дi(x)
except for constant term is uniformly distributed in Fpr , except
with probability at most 1/pr . This holds for д1(x) = M1 +U1·x with
probability 1. In the i-th iteration with i ∈ [d − 1], we have that the
coefficients Ai ,1, . . . , Ai ,i of degree-i polynomial дi(x) are uniform
by the induction assumption. From the definition of дi +1(x), we
obtain the following holds:
дi +1(x) = дi(x) · (Mi +1 + Ui +1 · x) + (Md +i + Ud +i · x)
(cid:33)
(cid:32) i
i
h=0
=
Ai ,h · xh
· (Mi +1 + Ui +1 · x) + (Md +i + Ud +i · x)
= (Ai ,0 · Mi +1 + Md +i) + (Ai ,1 · Mi +1 + Ai ,0 · Ui +1 + Ud +i) · x
.
h=2
(Ai ,h · Mi +1 + Ai ,h−1 · Ui +1) · xh + Ai ,i · Ui +1 · xi +1
From the uniformity of Ud +i, we directly obtain that the 1-degree
term of дi +1(x) is uniform. If Ui +1 (cid:44) 0 except with probability 1/pr ,
then the h-degree term of дi +1(x) for h ∈ [2, i + 1] is uniform from
the uniformity of Ai ,h−1. Overall, except with probability 1/pr ,
each coefficient of дi +1(x) except for constant term is uniformly
random. Therefore, the coefficients A1, . . . , Ad of polynomial дd(x)
are uniform over Fpr , except with probability at most (d − 1)/pr .
i∈[d] Ai · ∆i,
which completes the proof.
□
Together with B = дd(∆), we have that A0 = B −
C PROOF OF THEOREM 5.1
Proof. We first consider the case of a malicious prover (i.e.,
soundness and knowledge extraction) and then consider the case of
a malicious verifier (i.e., zero knowledge). In each case, we construct
a simulator S, which is given access to FZK, runs the adversary A
as a subroutine while emulating F p,r
for A. We always im-
plicitly assume that S passes all communication between adversary
A and environment Z.
Malicious prover. S emulates functionality F p,r
acts with adversary A as follows:
and inter-
ext-sVOLE
ext-sVOLE
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3000ext-sVOLE
ext-sVOLE
ext-sVOLE
p,r
polyZK
h · ∆h.
(1) S emulates F p,r
, S also receives {A∗
h∈[0,d−1] A∗
and defines B∗ =
for A by choosing uniform ∆ ∈ Fpr , and
recording all the values {si}i∈[n] and their corresponding MAC
tags that are received by F p,r
from adversary A. These
values define the corresponding keys in the natural way. When
h}h∈[0,d−1] from A
emulating F p,r
(2) When A sends {δi}i∈[n] in step 4, S extracts the witness as
wi := δi + si for i ∈ [n].
(3) S executes the remaining part of protocol Π
as an honest
verifier, using ∆ and the keys defined in the first step. If the
honest verifier outputs false, then S sends w =⊥ and C to FZK
and aborts. If the honest verifier outputs true, S sends w and C
to FZK where w = (w1, . . . , wn) is extracted by S as above.
It is easy to see that the view of the adversary simulated by S has
the identical distribution as its view in the real-world execution.
Whenever the honest verifier in the real-world execution outputs
false, the honest verifier in the ideal-world execution outputs false
as well (since S sends ⊥ to FZK in this case). Therefore, we only
need to bound the probability that the verifier in the real-world
execution outputs true but the witness w sent by S to FZK satisfies
that fi(w) (cid:44) 0 for some i ∈ [t]. Below, we show that this happens
with probability at most (d + t)/pr .
Let fi(w) = fi(w1, . . . , wn) = yi with some yi ∈ Fp for each i ∈
[t], where w = (w1, . . . , wn) is a vector extracted by S. According
to the definition of Bi for i ∈ [t], we have the following:
In step 6, S receives U ′
= Uh + Eh for h ∈ [0, d − 1] from adversary
A, where Uh is computed with w and the corresponding MACs fol-
h
lowing the protocol specification, and Eh ∈ Fpr is an adversarially
h · ∆h, we obtain
chosen error. Together with B∗ =
h∈[0,d−1] A∗
Bi = 
= 
= 
h∈[0,d]
h∈[0,d]
h∈[0,d−1]
fi ,h(k1, . . . , kn) · ∆d−h
fi ,h(m1 + w1 · ∆, . . . , mn + wn · ∆) · ∆d−h
Ai ,h · ∆h + yi · ∆d .
∗
=
=
i∈[t]
i∈[t]
i∈[t]
i∈[t]
i∈[t]
′
U
h∈[0,d−1]
h∈[0,d−1]
h∈[0,d−1]
h∈[0,d−1]
∗
h · ∆h
A
Bi · χi + B
(cid:17) · ∆h
that the following equation holds:
h∈[0,d−1]
∗
Ai ,h · χi + A
h
∆h. Therefore, we have the following:
Eh · ∆h .
h∈[0,d−1] U ′
h·
W = 
Ai ,h · ∆h + yi · ∆d(cid:17) · χi + 
(cid:16) 
= 
(cid:16)
yi · χi(cid:17) · ∆d + 
(cid:16)
(cid:16)
yi · χi(cid:17) · ∆d + 
h · ∆h − 
If the honest verifier outputs true, then we haveW =
(cid:16)
yi · χi(cid:17) · ∆d − Ed−1 · ∆d−1 − · · · − E1 · ∆ − E0 = 0.
If
the adversary’s view. In the following, we assume that
probability that
i∈[t]
i∈[t] yi · χi (cid:44) 0, the probability that the above equation holds is
at most d/pr , as ∆ ∈ Fpr is uniformly random and kept secret from
i∈[t] yi ·
χi = 0. If there exists some i ∈ [t] such that yi (cid:44) 0, then that
i∈[t] yi · χi = 0 is at most t/pr , since χ ∈ Fpr
is sampled uniformly at random after yi for all i ∈ [t] have been
defined. Overall, the probability that the honest verifier outputs
true but fi(w) (cid:44) 0 for some i ∈ [t] is bounded by (d + t)/pr .
In conclusion, any unbounded environment Z cannot distinguish
between the real-world execution and ideal-world execution, except
with probability (d + t)/pr .
Malicious verifier. If S receives false from FZK, then it simply
aborts. Otherwise, S interacts with adversary A as follows:
(1) In the preprocessing phase, S emulates F p,r
by recording
the global key ∆ and the keys for all the authenticated values,
which are received from adversary A. Additionally, S also
receives B∗ ∈ Fpr from A by emulating F p,r
(2) S executes the step 4 of protocol Π
δi ∈ Fp for i ∈ [n] to adversary A.
(3) For steps 5–6 of the ZK protocol, S computes W by using ∆, the
keys and B∗ received from A following the protocol description,
and then samples U1, . . . , Ud−1 ← Fpr and computing U0 :=
Note that {si}i∈[n] and {A∗
h}h∈[d−1] are uniform and kept secret
from the view of adversary A. Therefore, we easily obtain that the
view of A simulated by S is distributed identically to its view in
the real-world execution, which completes the proof.
□
h∈[d−1] Uh · ∆h. Then, S sends U0, . . . , Ud−1 to A.
ext-sVOLE
by sending uniform
W −
p,r
polyZK
ext-sVOLE
.
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3001