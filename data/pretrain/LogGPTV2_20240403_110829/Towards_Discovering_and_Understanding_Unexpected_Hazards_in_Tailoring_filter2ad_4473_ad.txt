ther differentiate the high-protection window of full and quick scans
1utime is the user mode jifﬁes and stime is the kernel mode jifﬁes,
which are the 14th and 15th ﬁeld of the /proc/AVD_pid/stat ﬁle,
respectively.
Jifﬁes is a time measure based on a clock main-
tained by the kernel. CPU time, which is limited by the res-
olution of the software clock and measured by clock ticks (di-
vided by sysconf(_SC_CLK_TCK). _SC_CLK_TCK is set to 100
in bionic/libc/unistd/sysconf.c for all Android OS versions.
2For an AVD process, the VmSize is the virtual memory size and
VmRSS is the portion of a process’ memory that is held in RAM,
which are the 1st and 2nd ﬁelds of the s/proc/[AVD_pid]/statm,
respectively.
of one particular AVD, so that the adversary can start malicious ac-
tions (e.g., dropping/executing malicious payloads) right after the
more comprehensive full scan, which is safer to evade detection.
Figure 3 contains the stime signal of representative full and quick
scans of two AVDs, from which we can tell that the quick scan
is generally shorter (quicker) than full scan, and the stime signals’
(utime is the same) peak and average values are pretty close to full
scan. Based on this general heuristic, we can differentiate full and
quick scan by collecting two malScans with very different signal
lengths as benchmarks. Therefore, when the next malScan is iden-
tiﬁed, its signal length can be compared with the previously stored
benchmarks. We also keep updating the corresponding benchmarks
with the newly classiﬁed scan traces for different categories.
Signal Steganography based Scan Location Inference.
Our study also shows that some AVDs provide multiple ways
of conﬁguring the heavy sweeping malScans that target on vari-
ous scanning locations. On rooted devices, some AVDs [12, 14]
even enables the ability to scan most the important folders (e.g.,
/sdcard, /data/app, /data/data, /system/app and etc.). There-
fore, we seek to identify the precise location that the scanning has
just happened. Because it is less likely for the AVD to re-scan the
same location within a short period of time, one can design an eva-
sion attack based on this assumption.
The scanning location inference idea is very intuitive. The goal
is to infer if the scan is just sweeping through a particular folder of
interest. To achieve this, we leave a special ﬁle, namely a marker,
in that folder. The marker ﬁle is intentionally designed to exhibit
special patterns in terms of CPU or other resource usages during
AVD heavy sweeping malScan. Since only the marker ﬁle de-
signer knows the embedded signal and later extracts it. We call
this method, signal steganography.
Delay-of-Scan Hazard. The design of a unique marker ﬁle is
based on our observations of the normal AVD scanning process.
First, most of the AVDs have aggressive CPU usage, mainly caused
by checking the ﬁles in the target folder. The pattern of CPU utiliza-
tion during scanning varies depending on the type, size and struc-
ture of the (archive) ﬁles. Second, once encountering an archive
ﬁle, most AVDs would have to ﬁrst unzip the ﬁle before ﬁnger-
prints it. The unzipping operations lead to less CPU utilization but
more memory use, which exhibits certain patterns (the shape and
frequency of CPU or memory utilization proﬁles).
If one could
make this special pattern continue for a signiﬁcant long time (e.g.,
several seconds, which is actually unnoticeable compared to the
minute-level scanning time), we can identify and extract it directly
from the whole trace and ﬁnish the discovery of the embedded sig-
050100150200050100150(a) Lookout# of Jiffies050100150200250300350050100150(b) AviraTime (second)# of Jiffies0102030405060050100150(a) DrWeb# of Jiffies0102030405060050100150(b) SophosTime (second)# of Jiffiesin the zipTree ﬁle ensures the periodicity of the low signal pattern
regardless of hardware speciﬁcations. Note that for all the malScan
inference measurements, we reach the desired results by using only
the stime signals from the CPU patterns.
Algorithm 1 Pseudo-code for the algorithm to extract zipTree scan-
ning pattern
1: zipf ilescaning ← False
2: window[window_size] ← empty
3: spectrogram[window_size][ ] ← empty
4: k ← 0, mag_thresh ← α
5: dist_thresh ← β, len_thresh ← γ
6: while obtain new value V do
7:
8:
9:
10:
update_Window(window, V )
if mean(window)  len_thresh then
else
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
end if
22:
23: end while
zipf ilescaning ← True
zipf ilescaning ← False
erase(spectrogram)
k ← 0
else
end if
zipf ilescaning ← False
erase(spectrogram)
k ← 0
3.4 Targeted Evasions
Based on the discovered hazards, various targeted attacks can
be designed. One potential attack scenario is based on repackag-
ing [49, 32, 26, 48, 34] a benign carrier (RBC app) app, which
does not contain any malicious payload for root exploiting, or pri-
vacy stealing. Therefore, the RBC app itself will not be judged
as malicious during the install-time scan. After the RBC app is
deployed on the system, it can leverage the information leakage
channel #1 in Table 2 to check the name of the installed AVD and
use the discovered hazard to infer its scanning status. Once it iden-
tiﬁes a moment to its advantage (e.g., end of a malScan), malicious
actions can be performed under the radar of the AVD’s scans. For
example, based on the similar analysis result from Table 4, one can
drop malicious payloads to the folder that is not covered by the
light monitoring malScan, load and execute them and then remove
the evidence. Other remote evasions can also be designed. For in-
stance, one can leverage remote vulnerability exploiting (e.g., code
injection vulnerability in HTML5-based apps [37]) to hijack a run-
ning process’s control ﬂow, and then conduct the similar evasions
to prevent the injected payloads from being identiﬁed.
4. HAZARDS IN ENGINE UPDATE
For an AVD equipped with complete VDF and perfect hooking
mechanism, we consider the best moments to evade it is when its
process(es) has not been activated yet. Our study result in Table 3
shows that all the tested AVD are listening on the BOOT_COMPLETE
intent to automatically launch itself when the system boots up. This
close a potential opportunity for evasions and indicates that AVD
developers are aware of some similar hazards. However, after fur-
ther analysis on the interaction between the AVD and the Android
Figure 4: Stime signal (red line indicates zipTree scanning segment)
of Panda Security
nal. To leverage these observations, we create a special archive ﬁle
as the marker, which is a three-layer zip ﬁle called zipTree. Each
parent node in this zipTree entry contains 10 zip ﬁles, and each one
of the 10 zip ﬁles contains another 10 child-zip ﬁles. The inmost
leaf zip ﬁle is an empty .txt ﬁle. The crafted zipTree is about 0.7KB
in size, which can hold the malScan process for 9 seconds. We
name this Delay-of-Scan hazard, which can potentially cause de-
nial of service attack given a big enough zipTree. However, in our
signal steganography based pattern recognition approach, we only
need to delay the scan for a couple of seconds. In this way, we can
precisely identify the scanning locations based on the marker that
was dropped on the particular folder.
Figure 4(a) displays the stime signal of the scanning by Panda
Security. It is noteworthy that the stime signal during zipTree scan-
ning (as shown in a red line in the ﬁgure) exhibits patterns with
three special properties compared to other parts of the signal: (1)
the signal has a much lower mean value than other parts of the
stime signal; (2) the signal shows stable patterns; that is, the sig-
nal is periodic and has relatively deterministic frequencies; (3) the
stable pattern of the signal of zipTree ﬁle scanning lasts for con-
siderably longer time compared with the other part in the signal.
Based on these observations, we devise an efﬁcient online algo-
rithm, Algorithm 1, to recognize/extract the stime signal segments
of zipTree. The algorithm is based on Fast Fourier Transformation
(FFT) for the classic spectrum analysis that is widely used in sig-
nal processing. FFT transforms the sample signal from the time
domain to the frequency domain, so our analysis is stable against
potential time variations in the signal. More importantly, the fre-
quency domain can still capture most part of the three properties
of the signal. The idea is to determine zipTree scanning period by
identifying a period of time that exhibits similar CPU utilization
patterns (e.g., similar means and magnitude in different frequen-
cies), or in one word, similar frequency spectrum characteristics
that appeared repetitively. Once we identify a period with lower
mean value signals (based on property (1)), we ﬁrst perform FFT
(line 9 in the Algorithm 1) to multiple sliding windows of the CPU
utilization signal and generate a time series of frequency spectrum,
a presentation of a time-series signal in the frequency domain. As
is well known in signal processing, similar two frequency spec-
trum imply that the corresponding two time series sharing similar
signal components at all frequencies. We then compute the Eu-
clidean Distance of the neighboring spectrum (line 10). We deter-
mine two neighbor frequency spectrum as ”similar” by checking
if the euclidean distance between these spectrum is smaller than
a self-adapted threshold (line 11). Since the archive ﬁles produce
property (2) (3), the distance can be kept very small for an amount
of time (several seconds, controlled by causing the Delay-of-Scan
hazard), which is demonstrated in the red part of Figure 4(b). Al-
though the stime signal length caused by the Delay-of-Scan hazard
varies on different hardware devices, the repeated stable structure
020406080051015202530(a) stime SignalTime (second)# of Jiffies  Normal file scanningZip−tree file scanning02040608000.20.40.60.81(b)Time (second)NormalizedEuclidean Distance  Detected zip−tree file scanningThresholdsystem, we identify a hazard in AVD’s engine update (engineUp-
date) procedure, that unexpectedly nulliﬁes any strong protections
an AVD provides for the system. Here we elaborate the AVD’s
engineUpdate operation in Android and analyze the hazard.
4.1 Engine Update Behavior and Hazard
The AVD engineUpdate operation provides essential updates for
AVD malScan operation improvement, bug and vulnerability patch-
ing [7, 8, 20, 21, 19], and update-to-date protection [23]. Since the
technical details of AVD’s engineUpdate mechanism on Android
have not been scrutinized before, to come up with a detailed full
picture, we leverage our analysis framework and manual analysis
based on runtime logs and related decompile Dalvik bytecode (the
smali format). The engineUpdate operation is performed whenever
an AVD developer posts an updated version of APK on Google
Play.
It can be either triggered by the user, or by the old AVD
process automatically. The whole procedure is executed by the
Android system, namely the Package Manager Service (PMS), the
Activity Manager Service (AMS), installd daemon and etc. Lots of
evidence [23, 10] show that AVDs update fairly frequently. Indeed,
during a two-week period in March of 2014, we initially tested the
process of engineUpdate operations using our analysis framework
and noticed a high update ratio, 25 out of 30 tested AVD products
have version updates from Google Play.
On the traditional PC platform, during the engine update pro-
cedure, an AVD will not shut down the whole AVD program, but
only replace part of the necessary modules (e.g., DLL ﬁles or ker-
nel drivers). However, we identify that on the Android platform,
the updating procedure is different. One potential problem of this
speciﬁc procedure is that the Android system will kill the AVD
process(es) before the engineUpdate. This design is considered as
valid and effective for most third party apps and help prevent unin-
tended app update [15], but this speciﬁc design lacks detail analy-
sis on potential security implications. Especially when considering
from the perspective of AVD realtime protection and detection, this
APK update mechanism introduces a serious ﬂaw, as its compli-
cated procedure renders the system lacking of AVD’s protection
for a period of high risk, which is called null-protection window.
In order to conﬁrm the hazard, we further verify the existence of
the null-protection window by checking the implementation logic
in the Android AOSP code base. The relevant high-level program
logic ﬂow is generalized and presented in Figure 5 as a Finite State
Automaton (FSA). In the device, the PMS from the Android frame-
work layer listens on update requests and performs the actual work
along with several other services. For instance, the installd dae-
mon and the AMS have to collaborate with the PMS component
to ﬁnish different tasks in the engineUpdate procedure. Based on
the complicated design of app updates on Android, the system han-
dles AVD version updates in several steps. After the new APK
is downloaded and update is conﬁrmed, the current AVD process
is killed, and the old code directory (/data/app) and some rele-
vant data ﬁles in the /data/data/[AV D_package]/∗ subdirecto-
ries are removed. Before relaunching the new process, the newly
downloaded Android Package ﬁle (APK) of AVD is veriﬁed for the
developer’s signature, and followed by Dalvik bytecode optimiza-
tion (e.g., dex to odex), conﬁguration ﬁle parsing (e.g., permission
registration based on the AndroidManifest.xml ﬁle) and etc. Note
that the system never helps relaunch the previously killed process,
which will expand the null-protection window. Due to this unavoid-
able null-protection window caused by the speciﬁc design for pack-
age updates of Android, the AVDs become vulnerable even under
the strong protection assumptions I and II.
Figure 5: The constructed FSA of PMS for Android v4.4.4_r1
To leverage the exposed null-protection window, the adversary
must infer if the AVD is performing the engineUpdate operation.
During our runtime testing and code analysis, we ﬁnd that PMS
will broadcast a series of intents with different action ﬁelds, in-
cluding PACKAGE_REMOVED, PACKAGE_ADDED and PACK-
AGE_REPLACED (red in Figure 5), so as to notify the other com-
ponents to perform the corresponding tasks and keep them updated
with the current app updating status. However, these broadcasted
intents unexpectedly reveal the updating status of AVD to any un-
privileged apps. So the malicious app can simply register these
broadcast intents to get notiﬁed, and then start malicious operations
during the exposed null-protection window. Our analysis frame-
work also helps us identify several other leakage channels (e.g.,
channel #1, #4 and #14 in Table 2) that can infer this vulnerable
status of AVD. This indicates simply restricting the receivers of the
broadcasted intents cannot fully eliminate the hazard.
4.2 Null-protection Window Length
Next, we quantitatively measure the length of this null-protection
window for various AVDs and devices. We conduct four groups of
experiments based on four types of real devices, whose conﬁgura-
tions are provided in Table 6 in Section 3. For each group, we try
to test all the 30 AVDs’ engine update operations and record their
null-protection window lengths. For every AVD on each device,
we test 10 times to obtain the mean value and relevant conﬁdence
interval. Our result indicates that the window lengths are quite sta-
ble; for example, the representative Symantec AVD has an average
window length of 11.2 seconds, with a conﬁdence interval [-0.13,
0.13] at the conﬁdence level 95%. This is because of the routinely
PMS updating logic and the atomic nature for most of the PMS
method invocations during the execution. Due to space limits, we
only show the mean values in Figure 4.2. Here, the x-axis is the
average length of null-protection window in seconds, and the y-
axis represents each AVD. For each AVD, to clearly compare the
window lengths for four devices, we draw four horizontal bars in
different colors. Longer bars are partly covered by shorter bars.