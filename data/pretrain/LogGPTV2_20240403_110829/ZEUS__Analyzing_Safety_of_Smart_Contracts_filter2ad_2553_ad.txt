to build the policy. The operation is extracted from the function
call node in the AST, while the predicates are extracted from
the conditionals in the node representing binary operations.
Algorithm 1 brieﬂy lists the steps to build the policy
speciﬁcation. Speciﬁcally, ZEUS runs a taint analysis pass
over the contract code with sources (S) as contract- and
runtime-deﬁned global variables in Solidity [48]. The sinks
(F) are invocations to external APIs calls, such as send or
publicly invocable functions. ZEUS also captures control ﬂow
conditionals, or path predicates, for all ﬂows originating at
POLICY BUILDER(C)
Input: C: Smart contract source code.
Output: P: Policy speciﬁcation
SS := TAINT ANALYSIS(C); sub := Get Subjects From User(SS)
α := SS[sub]; obj := Get Objects From User(α)
β := α[obj]; ops := Get Operations From User(β, obj)
γ := β[ops]; con := Get Predicates From User(γ, ops)
trigger := Get Trigger From User(); result := Get Result From User()
P := Create Policy(sub, obj, ops, con, trigger, result)
return P
TAINT ANALYSIS(C)
Input: C: Smart contract source code.
Output: Ψ: Set of state space tuples.
Initialize: S: {Global variables}, F: {Publicly visible functions}, Ψ := {}
foreach ((ρ ∈ S) ∧ (φ ∈ F)) do
O:= {}; P:= {};
τ := GET ALL TAINTED STATEMENTS(ρ, φ)
foreach (pc ∈ τ) do
obj := Get Objects(pc)
O := O ∪ obj
if (Is Conditional(pc)) then p := Get Predicate(pc); P := P∪ p ;
end
Ψ := Ψ ∪ (ρ, O, φ, P)
end
return Ψ
Algorithm 1: Steps to build the policy speciﬁcation.
the sources and terminating at the sinks. The output of the
taint analysis pass is a set of tuples consisting of the source,
the objects, the sink and its corresponding path predicates.
ZEUS then lists the set of all available taint sources, i.e.,
the globals and the environment variables, from which a user
selects the subject to be tracked. It then ﬁlters the results
from the taint pass that reduces the search space to tuples
containing at least one of the subjects selected by the user.
ZEUS then prompts the user to select the object(s), following
which it further prunes the tuple list. It then displays the list
of potential invocations that involve at least one or more of
the subjects or objects. Upon further selection, ZEUS lists
the available predicates encountered along the source to the
sink. The user can compose these predicates (or specify his
own) using boolean operators to form the condition in the
policy, and indicate whether they are checked as a pre- or post-
condition. Finally, the user indicates in the result tag whether
the speciﬁcation determines a violation or accepted behavior.
Fig. 13 lists the fairness criteria for the example shown
in Fig. 10. Correctness polices use a similar template with the
operation specifying the bug class to be detected.
B. Solidity to LLVM Bitcode Translator
ZEUS takes in a smart contract and passes it
through
to generate its LLVM bitcode along with
the translator
the debug symbol
information. Subsequently, for ease of
implementation, it reads the policy speciﬁcation and rewrites
the bitcode (instead of the Solidity source code) to inject assert
conditions for the predicates as per the trigger attribute in the
speciﬁcation. Most Solidity statements and expressions have
the same semantics as their C/C++ counterparts. We use the
rich LLVM APIs to generate semantically correct bitcode while
traversing the AST during code compilation (per Table 2). We
handle expression translation using the standard LLVM APIs.
ENSURING SOUNDNESS. In Solidity, execution of a public
function constitutes a transaction, which can be reordered at
the miner. To be sound, ZEUS must correctly reason about all
possible execution orders and control paths in the program.
9
(1) Execution order: Since there can be arbitrarily many
parallel invocations of a contract’s public functions with no
global
invocation order enforced, modeling these inﬁnitely
many execution orders is not possible. We observe that for six
of the seven classes (except transaction-order dependence), bug
detection is intra-transaction. In other words, the veriﬁer needs
to reason about bugs within one call chain. The ordering of
transactions does not impact bug detection within a transaction.
Detection of transaction-order dependence involves detecting
writes and subsequent reads to sensitive global variables
across a pair of
transactions. Reasoning about pairs of
functions sufﬁces, because a minimal instance of transaction-
order dependence must manifest across at least two function
invocations. Ordering of remaining functions is immaterial for
detecting the bug. Thus, for a contract with n publicly available
functions, ZEUS must reason about O(n2) possible orderings.
ZEUS generates a set of main functions, which act as the entry
point for veriﬁcation. Speciﬁcally, a main function is a harness
that havocs all the global state before invoking a publicly
deﬁned function. For transaction-order dependence, ZEUS
havocs the global state and invokes pair-wise permutations
of all public functions from within a main function. Further,
ZEUS havocs the entire global state upon invocation of any
member of the call family.
(2) Path traversal: In Solidity, global variables hold state
across executions. Modeling and reasoning all such states
in one static analysis execution is impractical. Thus, ZEUS
abstracts the values of all globals in the contract, including
the block and transaction state variables, to the entire data
domain corresponding to the data type. For example, a global
of type uint256 is modeled as having an integer domain, and
can take values anywhere between 0 and INT MAX. For any
concretely deﬁned starting values, ZEUS automatically havocs
them to explore the entire data domain. Keeping the initial
value constant does not reason about all possible executions
since the value may be incremented in subsequent contract
executions and may lead to potential exploitability in the
future. Thus, a single static execution sufﬁces to analyze all
possible control paths.
MODELING SOLIDITY SYNTAX. ZEUS supports complex
Solidity syntax,
functions,
tuple expressions, modiﬁers, operations over nested struct
deﬁnitions,
iteration over maps and arrays, and memory
allocation/de-allocation. We discuss a few of them below:
(1) Inheritance: Solidity allows multiple inheritance amongst
the contracts. ZEUS follows the same logic used by Solidity to
implement inheritance, i.e., the base contract on the extreme
right
in the declaration overrides all functions previously
declared by other base contracts. Speciﬁcally, ZEUS generates
the LLVM bitcode per contract, and then follows the said order
to patch the overriding functions visible in the derived class.
(2) External functions: Solidity allows one contract to call
into another contract. Furthermore, Solidity mandates that
all external functions only take in primitives as input and
the returns are also of primitive types [36]. While ZEUS
cannot
it over
approximates their behavior for soundness and assumes that
these external functions return a non-deterministic value. This
non-determinism soundly models the execution semantics of
these external functions, i.e., the return can take any value.
(3) Arrays: ZEUS does not
resolve such functions at compile time,
including inheritance, external
implement dynamic arrays in
AST Node
ContractDefinition
EventDefinition
FunctionDefinition
Block
VariableDeclarationStatement
VariableDeclaration
Literal
Return
Assignment
Abstract
contract@Id{...}
function@Id(l:T){S}
function@Id(l:T){S}
{S}
(l:T)∗
(l:T)
(cid:96)
return e
l := e
LLVM API
Module
FunctionType,
Function
FunctionType,
Function
BasicBlock
CreateStore,
CreateExtOrTrunc
GlobalVariable,
CreateAlloca
ConstantInt
ReturnInst,
CreateExtOrTrunc,
CreateGEP
CreateExtractValue,
CreateExtOrTrunc,
CreateLoad,
CreateStore,
CreateBinOp
ExpressionStatement
Identifier
IfStatement
e
Id
ValueSymbolTable,
GlobalVariable,
getFunction
if e then S else S BasicBlock,
FunctionCall
goto or post
WhileStatement / ForStatement if e then goto l
StructDefintion
Throw
else S
T
throw
Break / Continue
if e then goto l
CreateBr,
CreateCondBr
CreateExtOrTrunc,
CreateCall,
Function
BasicBlock,
CreateCondBr
StructType
Function,
CreateCall
CreateBr
Comments
Creates a new module, sets the data layout, generates the deﬁnition of global
variables and functions, and writes a main function which serves as the driver.
Creates a new function with the return type void, the arguments type as speciﬁed
in the event, and inserts it in the given module.
Creates a new function with the given return type, arguments and the body.
Creates a BasicBlock inside the LLVM IR, sets the insertion point to this block,
and iterates over the statements to generate the IR for each one.
Iterates over all the variables declared in this statement, allocates the variable
using the VariableDeclaration node, and stores the initial value (or a default
value) to the allocated space. (after sign / zero extension / truncation if needed).
For a global variable, uses the GlobalVariable API to deﬁne a global variable,
otherwise, allocates space using the alloca instruction.
Allocates a constant value for the various types of integers of varying widths.
Uses other AST nodes to generate the expression to return, dereferences it,
extends / truncates the value, and returns the value using the return instruction.
Generates the right hand side of the expression. A tuple is unpacked. For
compound assignments, the corresponding binop instruction is created, and the
result is sign/zeroextended/truncated and stored in the left hand side.
Calls the ASTNode for the Expression to generate the LLVM IR.
Checks for the identiﬁer inside the local variables, global variables or the
functions written in the contract, and returns the appropriate LLVM object.
Generates the condition variable inside the current block, creates a conditional
branch, and branches to either the true or the false branch. In the absence of the
false branch, uses the branch instruction to fall through.
Generates the arguments for the function call, ﬁxes their type according to the
solidity semantics, and creates a call to the required function.
Generates the conditional variable, the body of the loop, and a branch instruction.
Generates a structure of the same type as in the solidity contract.
Calls the system’s exit function.
Keeps a stack of the break/continue tags and branches to the appropriate label.
Table 2: Expression to expression translation from Solidity code to LLVM bitcode.
LLVM bitcode but uses a static array with large length. This
minor tweak preserves the semantic meaning of the contracts
and makes them amenable for veriﬁcation. All strings and byte
accesses are also modeled as arrays with integer domain.
(4) Rational Ether: Solidity does not
implement ﬂoating
point arithmetic. It instead uses rational numbers to implement
fractional payouts. ZEUS converts such rational payments into
lower monetary units to allow integer arithmetic in LLVM
bitcode. For example, ZEUS converts 1/4 ether to 250 ﬁnney.
HANDLING LLVM OPTIMIZATIONS. LLVM’s optimizer
can run aggressive passes eliminating any non-side affecting
variables and function calls. However,
this can adversely
impact the veriﬁcation result. For example, if return values
from invocations such as send are not used, both the
send call and the return value are optimized out. This
optimization causes problems in detecting scenarios described
earlier in § III-A and § III-C. Further, the veriﬁers may invoke
their own optimization passes that may mess with the LLVM
bitcode translation from Solidity code. In an effort to remain
faithful to the semantics envisioned by the contract writer,
ZEUS creates a global variable for each external function return
value and enforces no optimization on all functions.
LIMITATIONS. Our prototype of ZEUS has a few limitations
across policy speciﬁcation, translation and veriﬁcation.
(1) Fairness properties involving mathematical formulae are
harder to check. For example, 25% can be represented in
several different forms. ZEUS depends on the user to accurately
10
deﬁne policies that involve such mathematical representations.
(2) ZEUS is faithful
to most Solidity syntax. However,
constructs
like throw and selfdestruct which have
no exact LLVM bitcode transformation are modeled as a
program exit. Further, runtime EVM parameters such as gas
consumption cannot be precisely computed at the source level.
Thus, ZEUS is overly conservative in its runtime behavior
modeling and does not explicitly account for these parameters.
(3) ZEUS does not support virtual
functions in contract
hierarchy, i.e., use of super keyword, which resolves the
function call at runtime, dependent on the ﬁnal inheritance
graph. We manually analyzed the 23 such contracts in our
dataset and resolved the super linkages.
(4) Solidity’s assembly block allows use of EVM bytecode
alongside regular Solidity statements. Even though real-world
contracts rarely use assembly (only 45 out of 22, 493
contracts in our data set use it), ZEUS is conservative and
does not analyze contracts with an assembly block.
(5) ZEUS supports veriﬁcation of safety properties, i.e., state
reachability expressible via quantiﬁer-free logic with integer
linear arithmetic. Veriﬁcation of liveness (i.e., something good
must eventually happen) requires support for linear temporal
logic, and is currently not supported by ZEUS. Extending ZEUS
to support other kinds of properties such as trace- or hyper-
properties does not require changes to the core design and we
leave it for future work.
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12)
(13)
(14)
(15)
(16)
(17)
mapping(address => uint) private userBalances;
function withdrawBalance’() {
uint amountToWithdraw = userBalances[msg.sender];
if (amountToWithdraw > 0) {
assert(false);
msg.sender.call(userBalances[msg.sender]);)
userBalances[msg.sender] = 0;
}
}
function withdrawBalance() {
uint amountToWithdraw = userBalances[msg.sender];
if (amountToWithdraw > 0) {
withdrawBalance’();
msg.sender.call(userBalances[msg.sender]);
userBalances[msg.sender] = 0;
}
}
Fig. 14: Same-function reentrancy detection for example in Fig. 2.
C. Handling Correctness Bugs
ZEUS provides veriﬁcation for
the correctness issues
described in § III-A and § III-C. We discuss the veriﬁcation
logic for them as implemented in several LLVM passes below.
(1) Reentrancy: Reentrancy in Solidity can happen via the
call method. send only invokes the default function with
limited gas for logging purposes. ZEUS handles same-function
reentrancy by ﬁrst cloning the function under consideration,
and inserting a call to the clone before the invocation to call.
Fig. 14 shows the patched function for the example in Fig. 2.