事件完成之后，可以知道这件事已经发生过了。
回忆一下我们关闭了一个channel并且被消费掉了所有已发送的值，操作channel之后的代码
可以立即被执行，并且会产生零值。我们可以将这个机制扩展一下，来作为我们的广播机
制：不要向channel发送值，而是用关闭一个channel来进行广播。
只要一些小修改，我们就可以把退出逻辑加入到前一节的du程序。首先，我们创建一个退出
的channel，这个channel不会向其中发送任何值，但其所在的闭包内要写明程序需要退出。
我们同时还定义了一个工具函数，cancelled，这个函数在被调用的时候会轮询退出状态。
gopl.io/ch8/du4
var done = make(chan struct{})
func cancelled() bool {
select {
case <-done:
return true
default:
return false
}
}
并发的退出 331
gopl
下面我们创建一个从标准输入流中读取内容的goroutine，这是一个比较典型的连接到终端的
程序。每当有输入被读到(比如用户按了回车键)，这个goroutine就会把取消消息通过关闭
done的channel广播出去。
// Cancel traversal when input is detected.
go func() {
os.Stdin.Read(make([]byte, 1)) // read a single byte
close(done)
}()
现在我们需要使我们的goroutine来对取消进行响应。在main goroutine中，我们添加了select
的第三个case语句，尝试从done channel中接收内容。如果这个case被满足的话，在select到
的时候即会返回，但在结束之前我们需要把fileSizes channel中的内容“排”空，在channel被关
闭之前，舍弃掉所有值。这样可以保证对walkDir的调用不要被向fileSizes发送信息阻塞住，
可以正确地完成。
for {
select {
case <-done:
// Drain fileSizes to allow existing goroutines to finish.
for range fileSizes {
// Do nothing.
}
return
case size, ok := <-fileSizes:
// ...
}
}
walkDir这个goroutine一启动就会轮询取消状态，如果取消状态被设置的话会直接返回，并且
不做额外的事情。这样我们将所有在取消事件之后创建的goroutine改变为无操作。
func walkDir(dir string, n *sync.WaitGroup, fileSizes chan<- int64) {
defer n.Done()
if cancelled() {
return
}
for _, entry := range dirents(dir) {
// ...
}
}
在walkDir函数的循环中我们对取消状态进行轮询可以带来明显的益处，可以避免在取消事件
发生时还去创建goroutine。取消本身是有一些代价的；想要快速的响应需要对程序逻辑进行
侵入式的修改。确保在取消发生之后不要有代价太大的操作可能会需要修改你代码里的很多
并发的退出 332
gopl
地方，但是在一些重要的地方去检查取消事件也确实能带来很大的好处。
对这个程序的一个简单的性能分析可以揭示瓶颈在dirents函数中获取一个信号量。下面的
select可以让这种操作可以被取消，并且可以将取消时的延迟从几百毫秒降低到几十毫秒。
func dirents(dir string) []os.FileInfo {
select {
case sema <- struct{}{}: // acquire token
case <-done:
return nil // cancelled
}
defer func() { <-sema }() // release token
// ...read directory...
}
现在当取消发生时，所有后台的goroutine都会迅速停止并且主函数会返回。当然，当主函数
返回时，一个程序会退出，而我们又无法在主函数退出的时候确认其已经释放了所有的资源
(译注：因为程序都退出了，你的代码都没法执行了)。这里有一个方便的窍门我们可以一用：
取代掉直接从主函数返回，我们调用一个panic，然后runtime会把每一个goroutine的栈dump
下来。如果main goroutine是唯一一个剩下的goroutine的话，他会清理掉自己的一切资源。但
是如果还有其它的goroutine没有退出，他们可能没办法被正确地取消掉，也有可能被取消但
是取消操作会很花时间；所以这里的一个调研还是很有必要的。我们用panic来获取到足够的
信息来验证我们上面的判断，看看最终到底是什么样的情况。
练习 8.10： HTTP请求可能会因http.Request结构体中Cancel channel的关闭而取消。修改
8.6节中的web crawler来支持取消http请求。（提示：http.Get并没有提供方便地定制一个请
求的方法。你可以用http.NewRequest来取而代之，设置它的Cancel字段，然后用
http.DefaultClient.Do(req)来进行这个http请求。）
练习 8.11： 紧接着8.4.4中的mirroredQuery流程，实现一个并发请求url的fetch的变种。当第
一个请求返回时，直接取消其它的请求。
并发的退出 333
gopl
8.10. 示例: 聊天服务
我们用一个聊天服务器来终结本章节的内容，这个程序可以让一些用户通过服务器向其它所
有用户广播文本消息。这个程序中有四种goroutine。main和broadcaster各自是一个goroutine
实例，每一个客户端的连接都会有一个handleConn和clientWriter的goroutine。broadcaster是
select用法的不错的样例，因为它需要处理三种不同类型的消息。
下面演示的main goroutine的工作，是listen和accept(译注：网络编程里的概念)从客户端过来
的连接。对每一个连接，程序都会建立一个新的handleConn的goroutine，就像我们在本章开
头的并发的echo服务器里所做的那样。
gopl.io/ch8/chat
func main() {
listener, err := net.Listen("tcp", "localhost:8000")
if err != nil {
log.Fatal(err)
}
go broadcaster()
for {
conn, err := listener.Accept()
if err != nil {
log.Print(err)
continue
}
go handleConn(conn)
}
}
然后是broadcaster的goroutine。他的内部变量clients会记录当前建立连接的客户端集合。其
记录的内容是每一个客户端的消息发出channel的"资格"信息。
示例: 聊天服务 334
gopl
type client chan<- string // an outgoing message channel
var (
entering = make(chan client)
leaving = make(chan client)
messages = make(chan string) // all incoming client messages
)
func broadcaster() {
clients := make(map[client]bool) // all connected clients
for {
select {
case msg := <-messages:
// Broadcast incoming message to all
// clients' outgoing message channels.
for cli := range clients {
cli <- msg
}
case cli := <-entering:
clients[cli] = true
case cli := <-leaving:
delete(clients, cli)
close(cli)
}
}
}
broadcaster监听来自全局的entering和leaving的channel来获知客户端的到来和离开事件。当
其接收到其中的一个事件时，会更新clients集合，当该事件是离开行为时，它会关闭客户端的
消息发出channel。broadcaster也会监听全局的消息channel，所有的客户端都会向这个
channel中发送消息。当broadcaster接收到什么消息时，就会将其广播至所有连接到服务端的
客户端。
现在让我们看看每一个客户端的goroutine。handleConn函数会为它的客户端创建一个消息发
出channel并通过entering channel来通知客户端的到来。然后它会读取客户端发来的每一行文
本，并通过全局的消息channel来将这些文本发送出去，并为每条消息带上发送者的前缀来标
明消息身份。当客户端发送完毕后，handleConn会通过leaving这个channel来通知客户端的
离开并关闭连接。
示例: 聊天服务 335
gopl
func handleConn(conn net.Conn) {
ch := make(chan string) // outgoing client messages
go clientWriter(conn, ch)
who := conn.RemoteAddr().String()
ch <- "You are " + who
messages <- who + " has arrived"
entering <- ch
input := bufio.NewScanner(conn)
for input.Scan() {
messages <- who + ": " + input.Text()
}
// NOTE: ignoring potential errors from input.Err()
leaving <- ch
messages <- who + " has left"
conn.Close()
}
func clientWriter(conn net.Conn, ch <-chan string) {
for msg := range ch {
fmt.Fprintln(conn, msg) // NOTE: ignoring network errors
}
}
另外，handleConn为每一个客户端创建了一个clientWriter的goroutine来接收向客户端发出消
息channel中发送的广播消息，并将它们写入到客户端的网络连接。客户端的读取方循环会在
broadcaster接收到leaving通知并关闭了channel后终止。
下面演示的是当服务器有两个活动的客户端连接，并且在两个窗口中运行的情况，使用netcat
来聊天：
示例: 聊天服务 336
gopl
$ go build gopl.io/ch8/chat
$ go build gopl.io/ch8/netcat3
$ ./chat &
$ ./netcat3
You are 127.0.0.1:64208 $ ./netcat3
127.0.0.1:64211 has arrived You are 127.0.0.1:64211
Hi!
127.0.0.1:64208: Hi!
127.0.0.1:64208: Hi!
Hi yourself.
127.0.0.1:64211: Hi yourself. 127.0.0.1:64211: Hi yourself.
^C
127.0.0.1:64208 has left
$ ./netcat3
You are 127.0.0.1:64216 127.0.0.1:64216 has arrived
Welcome.
127.0.0.1:64211: Welcome. 127.0.0.1:64211: Welcome.
^C
127.0.0.1:64211 has left”
当与n个客户端保持聊天session时，这个程序会有2n+2个并发的goroutine，然而这个程序却
并不需要显式的锁(§9.2)。clients这个map被限制在了一个独立的goroutine中，broadcaster，
所以它不能被并发地访问。多个goroutine共享的变量只有这些channel和net.Conn的实例，两
个东西都是并发安全的。我们会在下一章中更多地解决约束，并发安全以及goroutine中共享
变量的含义。
练习 8.12： 使broadcaster能够将arrival事件通知当前所有的客户端。为了达成这个目的，你
需要有一个客户端的集合，并且在entering和leaving的channel中记录客户端的名字。
练习 8.13： 使聊天服务器能够断开空闲的客户端连接，比如最近五分钟之后没有发送任何消
息的那些客户端。提示：可以在其它goroutine中调用conn.Close()来解除Read调用，就像
input.Scanner()所做的那样。
练习 8.14： 修改聊天服务器的网络协议这样每一个客户端就可以在entering时可以提供它们
的名字。将消息前缀由之前的网络地址改为这个名字。
练习 8.15： 如果一个客户端没有及时地读取数据可能会导致所有的客户端被阻塞。修改
broadcaster来跳过一条消息，而不是等待这个客户端一直到其准备好写。或者为每一个客户
端的消息发出channel建立缓冲区，这样大部分的消息便不会被丢掉；broadcaster应该用一个
非阻塞的send向这个channel中发消息。
示例: 聊天服务 337
gopl
第九章 基于共享变量的并发
前一章我们介绍了一些使用goroutine和channel这样直接而自然的方式来实现并发的方法。然
而这样做我们实际上回避了在写并发代码时必须处理的一些重要而且细微的问题。
在本章中，我们会细致地了解并发机制。尤其是在多goroutine之间的共享变量，并发问题的
分析手段，以及解决这些问题的基本模式。最后我们会解释goroutine和操作系统线程之间的
技术上的一些区别。
基于共享变量的并发 338
gopl
9.1. 竞争条件
在一个线性(就是说只有一个goroutine的)的程序中，程序的执行顺序只由程序的逻辑来决定。
例如，我们有一段语句序列，第一个在第二个之前(废话)，以此类推。在有两个或更多
goroutine的程序中，每一个goroutine内的语句也是按照既定的顺序去执行的，但是一般情况
下我们没法去知道分别位于两个goroutine的事件x和y的执行顺序，x是在y之前还是之后还是
同时发生是没法判断的。当我们能够没有办法自信地确认一个事件是在另一个事件的前面或
者后面发生的话，就说明x和y这两个事件是并发的。
考虑一下，一个函数在线性程序中可以正确地工作。如果在并发的情况下，这个函数依然可
以正确地工作的话，那么我们就说这个函数是并发安全的，并发安全的函数不需要额外的同
步工作。我们可以把这个概念概括为一个特定类型的一些方法和操作函数，如果这个类型是
并发安全的话，那么所有它的访问方法和操作就都是并发安全的。