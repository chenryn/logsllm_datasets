1
bof⼩测
⼀个正常C程序，如何转换成bof⽂件，这⾥记录下过程 
bof的原理实现就不多讲了，简单来说就是编译成⼀个object⽂件（COFF格式，exe是PE格式），然后
传输给beacon后在终端上完成链接过程，这也就导致bof⽂件⾮常⼩，⼀般只有⼏K。 
参考 
https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao/untitled-3 
在github有⼏个不错的开源项⽬，可以以此为模板进⼀步开发，⽽不需要完全重头开始。 
https://github.com/trustedsec/CS-Situational-Awareness-BOF 
https://github.com/securifybv/Visual-Studio-BOF-template 
我是基于第⼀个项⽬开发，这个项⽬有很多已实现的案例，可作为参考。 
SA⽬录就是编译成object的⽂件，⽤于直接提供cs使⽤ 
src是源码⽬录，除了已实现功能的源码，还提供了⼀个base_template作为模板。 
编写bof代码 
2
将base_template拷⻉⼀份到src/SA下，改成如useradd，BOFNAME也修改⼀下，⽅便发布。 
3
然后看下核⼼代码部分，这⾥其实考虑到了两种使⽤场景了，bof提供cs使⽤，exe供独⽴使⽤，也⽅便
调试功能是否正常，编译的时候只需要带上-DBOF即可编译成bof。 
bof和exe⼊⼝区别如下，exe固定是main函数⼊⼝，bof会由加载器扫描go函数的地址作为⼊⼝，当然
也可以是其他名字，默认是go。 
4
bof编写，⼀般会导⼊⼀个beacon.h，有⼀些内置的函数提供，⽐如我要打印内容给teamsever显示，
就可以调⽤BeaconPrintf，其他函数和使⽤可参考这个官⽅链接 
https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/b
eacon-object-files_main.htm 
接着就是编写功能了，⽐如添加⽤户，这⾥有个C项⽬，有现成代码。 
https://github.com/newsoft/adduser 
代码⽐较简单，调⽤NetUserAdd添加⽤户，然后调⽤  NetLocalGroupAddMembers 加
administrators组 
5
但这些都是直接调⽤的win32api，如果看了上⾯提供的bof官⽅⽂档，就会知道这些api需要动态加载调
⽤，不像是PE⽂件有导⼊表，那官⽅提供了两种⽅法，⼀是调⽤loadlibrary等函数动态加载，⼆是动态
函数解析(DFR)，我这⾥选择后者，这个⽅便些。 
6
在src\common\bofdefs.h添加宏定义，⽤于动态函数解析 
并添加函数声明，⽤于外部调⽤ 
如上操作即可完成动态函数解析。然后在我们要编写的代码⾥替换成带有lib名称的函数即可。 
C
复制代码
#define NETAPI32$NetUserAdd NetUserAdd
1
C
复制代码
WINBASEAPI DWORD WINAPI NETAPI32$NetUserAdd(LPCWSTR,DWORD,PBYTE,PDWORD);
1
7
繁琐的地⽅主要在于要查微软官⽅⽂档，然后才知道函数签名。 
这个项⽬⾃动完成这个过程了，通过⼀个本地函数库获取函数签名，再通过微软在线查询该函数对应的
lib⽂件名是什么，拼接实现上⾯声明代码。 
https://github.com/dtmsecurity/bof_helper 
效果如下，然后最后⼀⾏复制到bofdefs.h⾥即可 
把需要打印回显的位置替换成BeaconPrintf，bof的项⽬还做了⼀个封装，更⽅便使⽤，  internal_p
rintf  
8
使⽤make bof尝试编译是否正常 
然后⽤cs调⽤，可以正常加载，但有个问题，这样是⽆法传参的。 
C
复制代码
inline-execute [dirpath]\useradd.x64.o
1
9
⽐如这样是⽆法传参的 
看下go的⼊⼝解析参数代码，这个是参考其他功能的代码，cs内置⼀个datap数据类型，⽤于数据解
析，先调⽤BeaconDataParse将缓存放⼊parser，再通过BeaconDataExtract提取。 
参看官⽅⼿册，提供了五种函数⽤于数据提取，也就是说数据类型也5种，int/char*/wchar_t*/short
等，那如果是命令⾏传递是不可能知道数据类型的。仔细看⽂档第⼀⾏，提示了，需要结合cna脚本的
参数解析问题 
C
复制代码
inline-execute [dirpath]\useradd.x64.o user pass
1
10
bof_pack函数来pack格式化参数传递，所以需要编写cna脚本了。 
这个bof项⽬也提供了现成的cna脚本，所以只需要参考改⼀下即可 
代码如下，很简单,添加⼀个函数useradd，然后通过  beacon_command_register 注册 
cna脚本编写 
11
PS: readbof是这个项⽬⾃定义的函数，⽤于读取bof完整⽂件名。 
bof_pack参考 
https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics_a
ggressor-scripts/as-resources_functions.htm#bof_pack 
这⾥也和bof⾥的函数关联起来了，你怎么格式化，bof⾥就怎么解析。 
C
复制代码
beacon_command_register (
    "useradd",
    "useradd [username] [passord]"
    "example: useradd audit Test123456789!"
);
alias useradd {
    local('$user $pass $args')
    $user = $2;
    $pass = $3;
    if ($user eq "" or $pass eq "") {
        berror($1, "help useradd");
        return;
    }
    $args = bof_pack($1, "ZZ", $user, $pass);
    beacon_inline_execute($1, readbof($1, "useradd"), "go", $args); 
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
12
bof_pack 
$1: beacon id 
$2: format string for the packed data 
...: args 
格式化参考 
bof解析参数时注意事项 
1. 如果是BeaconDataExtract赋值给某个char*变量 ，⼀定要是const char*，否则会crash。 
2. 如果调⽤了bofstart，解析⼀定要在这后⾯，否则也会crash 
Type 
Description 
Unpack With (C) 
b 
binary data 
BeaconDataExtract 
i 
4-byte integer 
BeaconDataInt 
s 
2-byte short integer 
BeaconDataShort 
z 
zero-terminated+encoded 
string 
BeaconDataExtract 
Z 
zero-terminated wide-char 
string 
(wchar_t 
*)BeaconDataExtract 
13
beacon_inline_execute 
$1 - the id for the Beacon 
$2 - a string containing the BOF file 
$3 - the entry point to call 
$4 - packed arguments to pass to the BOF file 
重新加载cna脚本 
bof⽂件⼤⼩写和PE⽂件相⽐，这个demo中差了近百倍。 
https://www.cobaltstrike.com/help-beacon-object-files 
https://gitee.com/sh3llsas/CobaltStrike-BOF 
https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao/untitled-3 
https://github.com/ajpc500/BOFs/ 
https://github.com/boku7/spawn 
cna参考链接 
参考 
14
https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics_a
ggressor-scripts/as-resources_functions.htm