# SpyShield: Preserving Privacy from Spy Add-Ons

## Authors
- Zhuowei Li
- XiaoFeng Wang
- Jong Youl Choi

### Affiliation
School of Informatics, Indiana University at Bloomington, USA

### Contact
{zholi, xw7, jychoi}@indiana.edu

## Abstract
Spyware infections are becoming increasingly pervasive, posing a significant threat to the privacy of Internet users. Existing defense mechanisms, which often rely solely on detection, are struggling to control this epidemic. In this paper, we introduce SpyShield, a new containment technique that adds an additional layer of defense against spyware. Our method can automatically block untrusted programs from accessing sensitive information, thereby preserving user privacy even if spyware evades detection. It also allows users to use free software without the risk of bundled surveillance code. As a first step, our design of SpyShield provides general protection against spy add-ons, a critical type of spyware. This is achieved by enforcing security policies on the communication channels that add-ons use to monitor their host applications, such as COM interfaces and shared memory, thus preventing unauthorized data leakage. We have implemented a prototype of SpyShield for Windows XP to protect Internet Explorer and evaluated it using real plug-ins. Our experimental results show that SpyShield effectively disrupts spyware surveillance in accordance with security policies while introducing only a small overhead.

## 1. Introduction
Spyware is rapidly becoming one of the most dangerous threats to the nation's critical information infrastructure. Webroot estimates that approximately 89% of consumer computers in the country are infected with spyware, with an average of 30 pieces per machine [4]. A recent study [19] further indicates that a significant portion of these infections are in the form of add-ons to common software like Internet Explorer (IE). These add-ons pose a serious threat to personal identity information, as they can stealthily collect sensitive data such as passwords, credit card numbers, and social security numbers.

Add-ons are optional software modules that complement or enhance a host application. Examples include Microsoft's plug-ins [1] and Mozilla's extensions [3]. Software manufacturers typically provide standard interfaces for third parties to develop their own add-ons, known as add-on interfaces. Through these interfaces, a spy add-on can acquire sensitive information from the host application or even control it.

The threat posed by spy add-ons is a recognized security concern and has received considerable research attention [19, 15]. Current defenses against such spyware heavily rely on detection techniques. Specifically, spyware scanners search binary executables for binary-pattern signatures in a spyware database. However, signature-based detection can be evaded by metamorphic and polymorphic spyware, which transform their code with each new infection. An alternative approach is behavior-based detection [19], which uses dynamic or static analysis to capture spyware's surveillance activities. Although more resilient to metamorphism, this technique can still be bypassed by spyware that exhibits unconventional behaviors, such as direct reading of sensitive data from process memory.

Since no detection technique is absolutely reliable, an in-depth defense strategy is necessary. If a piece of spyware penetrates other layers of defense, there must still be protection to prevent important information from being stolen. Additionally, since surveillance code can be bundled with useful and often free software, it is desirable to enable users to use such software while avoiding the associated risks. The technique of spyware containment aims to preserve clients' privacy in the presence of malicious surveillance. Existing research on this topic is limited to methods that provide a trusted input path for passwords [21, 17]. These techniques are insufficient to contain spy add-ons, which can snoop on other important data, such as account balances displayed in a browser.

In this paper, we present the first spyware-containment technique that offers general protection against the surveillance from spy add-ons. Our approach, called SpyShield, can automatically block the view of an untrusted add-on whenever sensitive data are being accessed by its host application. This is achieved through a proxy that enforces security policies on add-on interfaces. For example, our approach ensures that whenever an IE browser visits citi.com, no data can flow through a COM interface into an untrusted plug-in. While it is impossible to get the privacy via COM interfaces, spy add-ons could bypass the proxy through direct memory access. SpyShield addresses this concern by separating untrusted add-ons from their host’s process.

We have prototyped SpyShield on Windows XP and evaluated it using known spyware. Our implementation effectively blocked their surveillance attempts in accordance with a set of security policies. We also demonstrate that our technique introduces only a small performance overhead. We believe that SpyShield advances the state-of-the-art in spyware defense in the following ways:

- **General Protection Against Spy Add-Ons:** SpyShield offers the first general avenue to protect sensitive information from untrusted add-ons. Our design works for different add-on interfaces, such as COM and XPCOM [7], and can be used in applications adopting these interfaces, such as Internet Explorer, Microsoft Outlook, and Mozilla Firefox.
- **Fine-Grained Access Control:** We propose a new policy model called "sensitive zone." An application enters a sensitive zone when it starts processing sensitive data. Inside this zone, fine-grained access policies can be defined and enforced. For example, untrusted plug-ins can be granted free access to unimportant data on a web page, such as advertisements, but forbidden from reading and writing sensitive data like passwords.
- **Resilience to Attacks:** SpyShield can protect itself from being attacked. It uses a lightweight kernel driver to prevent unauthorized modification of the proxy’s code and data, and any attempts to load untrusted code into the kernel of an operating system (OS).
- **Small Overheads:** Our research shows that the overhead of SpyShield, mainly caused by cross-process communications, is not significant enough to be noticeable, as it can be overshadowed by the delay for accomplishing an add-on’s normal mission.
- **Ease of Use:** SpyShield does not require modifying host applications or OS settings. Users do not need to change their behaviors when using it, though they can choose to modify default security policies through a secure and user-friendly interface. SpyShield can also be easily turned off and on.

The rest of the paper is organized as follows. Section 2 presents the design of SpyShield. Section 3 describes our implementation of a prototype system. Section 4 reports the evaluations of our technique. Section 5 discusses its limitations. Section 6 reviews related approaches and compares them with SpyShield. Section 7 concludes the paper and envisions future research.

## 2. Design
SpyShield inserts an access-control proxy between untrusted add-ons and their host application to control their communications according to a set of security policies. Based on the method of interposing communications, SpyShield can be implemented in two ways: a one-process solution or a two-process solution. In the one-process solution, add-ons and the host application coexist within the same process. In the two-process solution, SpyShield separates them into different processes, creating a process barrier to inhibit untrusted add-ons from accessing the host application's memory space to obtain sensitive information. Figure 1 illustrates an example using Internet Explorer (IE) as the host application.

The proxy consists of two components: a reference controller in the form of an IE plug-in and an add-on manager serving as an independent process that handles a set of untrusted plug-ins. To these plug-ins, the add-on manager acts as an IE browser, automatically loading them into memory and offering standard COM interfaces to enable them to subscribe to events and request information of interest. Actual invocation of COM interfaces is delegated to the reference controller by transporting add-ons’ requests through a cross-process communication channel. Upon receiving each request from plug-ins, the reference controller makes a decision based on predefined security policies. IE’s events and responses go through the security policy enforced by the reference controller. This approach prevents a spy plug-in from stealing information through either COM interfaces or direct access to the browser’s memory. An end user can have more control over her information by adjusting security policies.

To defeat any attempts to thwart the access-control proxy, the proxy can be overseen by a kernel driver, called the proxy guardian, which prevents unauthorized attempts to tamper with the proxy’s data and code. Although we use IE as an example, the architecture is general enough to work on other add-on interfaces such as XPCOM [7] and other applications such as Mozilla Firefox.

### 2.1 Access-Control Proxy
The objective of the access-control proxy is to permit or deny add-ons’ access to their host application’s data based on security policies. This is achieved through collaboration between the reference controller, in the form of an application’s add-on, and the add-on manager, which hosts untrusted add-ons. After an untrusted add-on is loaded, its request to subscribe to an event is intercepted and recorded by the add-on manager, which informs the reference controller to register that event using an event-handling function (called a callback function). The occurrence of the event first triggers that function, which then decides whether to invoke the add-on and pass to it the parameters received from the application.

While most spyware add-ons are event-driven, there are exceptions. For example, the UCMore [9] toolbar can poll the COM interfaces of an IE browser for URLs and recently visited web pages. To contain such spyware, an access-control proxy needs to interpose on all add-on interfaces. In this example, the add-on manager can implement IWebBrowser2, a COM interface that offers add-ons methods such as `get_LocationURL` and `get_Document` for accessing URLs and web pages. This allows the reference controller to block all undesired invocations of these methods.

An add-on may attempt to directly interact with its host application without going through an add-on interface. For example, a Windows toolbar might request a handle to a browser’s window from a COM interface to directly retrieve its content. In this case, the add-on manager needs to create a substitute window for the toolbar and selectively copy data to it according to security policies.

An important design issue is the choice between a one-process solution, which keeps the host application, the proxy, and add-ons inside the same process, and a two-process solution, which separates the add-on manager and untrusted add-ons from the host and the reference controller. The one-process solution offers good performance by avoiding expensive cross-process communications. However, it leaves the door open for attacks using direct memory access. The two-process solution separates untrusted add-ons from their host application’s process, eliminating the threat from direct memory access. This approach also protects the host application from add-ons containing security flaws that may crash the application or be exploited by attackers. Its weakness is performance, which suffers from cross-process communications (CPC). SpyShield allows trusted add-ons to communicate with the host application directly, limiting performance degradation to untrusted add-ons. Selecting the right CPC techniques can also reduce such overheads. For example, communication through shared memory is much faster than through pipes.

An important question is how to identify untrusted add-ons. SpyShield offers an automatic mechanism that classifies add-ons according to their hash values. The mechanism includes a database of hash values for trusted add-ons, computed using a secure hash function such as SHA-256. An add-on is deemed untrusted if its hash cannot be found in the database. The content of the database can be maintained automatically using heuristic rules. For example, add-ons directly installed from a CD or signed by a trusted vendor such as Adobe Acrobat are considered trusted, while those downloaded from untrusted websites are untrusted. To prevent spyware from adding itself to the database, the database is protected by a kernel driver called the proxy guardian. An authorized user can add other trusted add-ons after being authenticated by their password and passing a CAPTCHA test, which distinguishes humans from programs.

### 2.2 Security Policies
We developed a simple access control model for SpyShield, called the "sensitive zone." An application is said to enter a sensitive zone if it starts to process sensitive data. Within that zone, security policies specify the resources to which an untrusted add-on’s access is allowed or denied. If denied, the privacy information within the resources is preserved in the sensitive zone.

Sensitive data can be automatically identified using metadata generated from users' inputs. For example, URLs or IP addresses of sensitive websites such as banks can indicate the presence of confidential data like passwords and account balances. Other examples include names and directory paths of sensitive documents, email addresses and subjects of sensitive messages, and keywords such as "password" within a data record. SpyShield can offer default settings of such metadata, including all banks' URLs. Authorized users are allowed to modify these settings.

Data imported by a host application are first checked by the reference controller against the metadata to determine whether a sensitive zone has been entered. If so, a set of policies is enforced to restrict untrusted add-ons’ access to such data. A security policy can be defined over add-on interfaces, their methods, and input parameters to these methods. Table 1 provides example rules that have successfully controlled malicious IE plug-ins in our experiments.

The security policies of a sensitive zone are applied to all members in that zone. For example, if all banks' URLs are included in the same zone, the access control proxy will enforce the same set of rules whenever a browser visits any of them. Flexibility and fine-grained controls can be achieved through multiple zones, which users are allowed to define. SpyShield offers a friendly and application-specific interface for authorized users to define sensitive zones and describe security policies. Figure 2 presents an example of the SpyShield toolbar.

| **Table 1.** | **Examples of Security Policies** |
|-------------|----------------------------------|
| **Policy**  | **Description**                  |
| Block all   | Prevents untrusted add-ons from  |
| `get_LocationURL` calls | accessing the current URL.       |
| Block all   | Prevents untrusted add-ons from  |
| `get_Document` calls | accessing the current document.  |

---

**References:**
- [1] Microsoft Plug-ins
- [3] Mozilla Extensions
- [4] Webroot Report
- [7] XPCOM
- [9] UCMore Toolbar
- [15] Research on Spy Add-Ons
- [17] Trusted Input Path for Passwords
- [19] Behavior-Based Detection
- [21] Trusted Input Path for Passwords
- [27] CAPTCHA Test
- [31] COM Interface Invocation

---

**Acknowledgments:**
This work was supported by [Funding Agency]. We thank [Contributors] for their valuable feedback and support.