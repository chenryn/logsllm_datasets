title:SpyShield: Preserving Privacy from Spy Add-Ons
author:Zhuowei Li and
XiaoFeng Wang and
Jong Youl Choi
SpyShield: Preserving Privacy from Spy Add-Ons
Zhuowei Li, XiaoFeng Wang, and Jong Youl Choi
School of Informatics, Indiana University at Bloomington, USA
{zholi,xw7,jychoi}@indiana.edu
Abstract. Spyware infections are becoming extremely pervasive, posing a grave
threat to Internet users’ privacy. Control of such an epidemic is increasingly difﬁ-
cult for the existing defense mechanisms, which in many cases rely on detection
alone. In this paper, we propose SpyShield, a new containment technique, to add
another layer of defense against spyware. Our technique can automatically block
the visions of untrusted programs in the presence of sensitive information, which
preserves users’ privacy even after spyware has managed to evade detection. It
also enables users to avoid the risks of using free software which could be bun-
dled with surveillance code. As a ﬁrst step, our design of SpyShield offers general
protection against spy add-ons, an important type of spyware. This is achieved
through enforcing a set of security policies to the channels an add-on can use to
monitor its host application, such as COM interfaces and shared memory, so as
to block unauthorized leakage of sensitive information. We prototyped SpyShield
under Windows XP to protect Internet Explorer and also evaluated it using real
plug-ins. Our experimental study shows that the technique can effectively disrupt
spyware surveillance in accordance with security policies and introduce only a
small overhead.
1 Introduction
Spyware is rapidly becoming one of the most dangerous threats to the nation’s criti-
cal information infrastructure. Webroot estimated that about 89 percent of consumer
computers are riddled with spyware in this country with an average of 30 pieces per
machine [4]. A recent study [19] further shows that a large portion of spyware infec-
tions are in the form of add-ons to common software such as Internet Explorer (IE).
These add-ons seriously threaten the safety of personal identity information, as they
can be used to stealthily collect from users sensitive data such as passwords, credit card
numbers and social security numbers.
Add-ons are optional software modules which complement or enhance a software
application they are attached to (called a host application or simply a host). Examples of
these modules include Microsoft’s plug-ins [1] and Mozilla’s extensions [3]. Software
manufacturers usually offer standard interfaces for third parties to develop their own
add-ons, which we call add-on interfaces. Through such interfaces, a spy add-on may
acquire sensitive information from the host application or even control it.
The threat posed by spy add-ons is recognized as an important security concern and
has recently received great research attentions [19,15]. Existing defense against such
spyware heavily relies on detection techniques. Speciﬁcally, spyware scanners are used
to search binary executables for the presence of binary-pattern signatures which appear
C. Kruegel, R. Lippmann, and A. Clark (Eds.): RAID 2007, LNCS 4637, pp. 296–316, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007
SpyShield: Preserving Privacy from Spy Add-Ons
297
in a spyware database. Signature-based detection can be evaded by metamorphic and
polymorphic spyware which transforms its code for every new infection. An alternative
is behavior-based detection [19] which employs dynamic analysis or static analysis to
capture spyware’s surveillance activities. Although this technique is more resilient to
metamorphism, it could still be got around by the spyware which exhibits unconven-
tional behaviors, for example, direct reading of sensitive data from process memory.
Since no detection techniques are absolutely reliable, we have to consider an in-depth
defense strategy: in case a piece of spyware penetrates other layers of defense, protec-
tion must still be there to save important information from being stolen. In addition,
since surveillance code could be bundled with useful and often free software, it becomes
highly desired to enable users to use such software while avoiding the potential risk it
brings about. Serving these purposes is the technique of spyware containment, which
strives to preserve clients’ privacy in the presence of malicious surveillance. Existing
research on this subject is limited to the techniques which provide a trusted input path
for passwords [21,17]. These techniques are inadequate to contain spy add-ons which
can also snoop on other important data, for example, the account balance displayed in
a browser.
In this paper, we present the ﬁrst spyware-containment technique which offers gen-
eral protection against the surveillance from spy add-ons. Our approach, called
SpyShield, can automatically block the view of an untrusted add-on whenever sensi-
tive data are being accessed by its host application. This is achieved through a proxy
which enforces security policies to add-on interfaces. For example, our approach en-
sures that whenever an IE browser is visiting citi.com, no data can ﬂow through a
COM interface into an untrusted plug-in. While it is impossible to get the privacy via
COM interfaces, spy add-ons could bypass the proxy through direct memory access.
SpyShield addresses the concerns by separating untrusted add-ons from their host’s
process.
We prototyped SpyShield on Windows XP and evaluated it using known spyware.
Our implementation effectively blocked their surveillance attempts in accordance with a
set of security policies. We also demonstrate that our technique introduces small perfor-
mance overheads. We believe that SpyShield advances the state-of-the-art of spyware
defense in following perspectives:
– General protection against spy add-ons. SpyShield offers the ﬁrst general avenue
to protect sensitive information from untrusted add-ons. Our design works for dif-
ferent add-on interfaces, such as COM and XPCOM [7], and therefore can be used
in the applications adopting these interfaces, such as Internet Explorer, Microsoft
Outlook, Mozilla Firefox.
– Fine-grained access control. We propose a new policy model, called sensitive
zone. An application enters a sensitive zone whenever it starts processing sensi-
tive data. Inside that zone, our approach allows deﬁning and enforcing ﬁne-grained
access policies. For example, we may grant untrusted plug-ins free access to unim-
portant data on a web page such as advertisements, but forbid them to read and
write sensitive data such as passwords.
– Resilience to attacks. SpyShield can protect itself from being attacked. It utilizes a
lightweight kernel driver to prevent unauthorized modiﬁcation of the proxy’s code
298
Z. Li, X. Wang, and J.Y. Choi
and data, and any attempts to load untrusted code into the kernel of an operating
system (OS).
– Small overheads. Our research further shows that the overhead of SpyShield,
which is mainly caused by cross-process communications, may not be signiﬁcant
enough to be perceived by the user, as it could be overshadowed by the delay for
accomplishing an add-on’s normal mission.
– Ease of use. SpyShield does not require modifying host applications and OS set-
tings. Users do not need to change their behaviors when using it, though they can
choose to modify default security polices through a secure and user-friendly inter-
face. SpyShield can also be easily turned off and on.
The rest of the paper is organized as follows. Section 2 presents the design of SpyShield.
Section 3 describes our implementation of a prototype system. Section 4 reports the
evaluations of our technique. Section 5 discusses its limitations. Section 6 reviews the
related approaches and compares them with SpyShield. Section 7 concludes the paper
and envisions the future research.
2 Design
SpyShield inserts an access-control proxy between untrusted add-ons and their host ap-
plication to control their communications according to a set of security policies. Based
on the method how to interpose communications, SpyShield can be implemented in
two ways: either one-process or two-process solution. While in one-process solution
add-ons and the host application coexist inside a same process, SpyShield can separate
them into two different processes so that we can put a process barrier to inhibit untrusted
add-ons from accessing the memory space of the host application to obtain any sensi-
tive information. Figure 1 illustrates an example using Internet Explorer (IE) as the host
application. The proxy in the Figure consists of two components, a reference controller
in the form of an IE plug-in, and an add-on manager serving as an independent process
which handles a set of untrusted plug-ins. To these plug-ins, the add-on manager plays
the role of an IE browser, which automatically loads them into memory and offers stan-
dard COM interfaces to enable them to subscribe to events and ask for information of
their interest. Actual invocation of COM interface [31], however, is delegated to the
Process 1
Process 2
i
s
n
o
i
t
a
c
n
u
m
m
o
c
M
O
C
s
s
e
c
o
r
p
-
n
i
trusted
plug-in
Reference
 Controller
cross-process COM 
communications
Add-on
 Manager
i
s
n
o
i
t
a
c
n
u
m
m
o
c
M
O
C
s
s
e
c
o
r
p
-
n
i
untrusted
plug-in
untrusted
plug-in
untrusted
plug-in
r
e
r
o
p
x
E
l
t
e
n
r
e
t
n
I
:
E
I
Fig. 1. A containment mechanism for untrusted plug-ins (e.g., BHO, toolbar) in Internet Explorer
SpyShield: Preserving Privacy from Spy Add-Ons
299
reference controller by transporting add-ons’ requests through a cross-process commu-
nication channel. Upon receiving each request from plug-ins, the reference controller
will make a decision regarding whether to forward the request to the browser. The de-
cisions will be based on a set of security policies pre-deﬁned by a user. IE’s event or
responses should go through the security policy enforced by the reference controller.
With this approach, we can prevent a spy plug-in from stealing information through ei-
ther the COM interfaces or direct access to the browser’s memory. An end user, on the
other hand, will have more controls of her information by adjusting security policies.
To defeat any attempts from thwarting the access-control proxy, the proxy can be
overseen by a kernel driver, called proxy guardian, which prevents unauthorized at-
tempts to temper with the proxy’s data and code. Although we use IE as an example
here, the architecture is general enough to work on other add-on interfaces such as XP-
COM [7] and other applications such as Mozilla Firefox.
2.1 Access-Control Proxy
The objective of the access-control proxy is to permit or deny add-ons’ access to their
host application’s data based on security policies. This is achieved through collabora-
tions between the reference controller in the form of an application’s add-on, and the
add-on manager which hosts untrusted add-ons. After an untrusted add-on is loaded,
its request to subscribe to an event is intercepted and recorded by the add-on manager
which informs the reference controller to register that event using an event-handling
function (called a callback function). The occurrence of the event ﬁrst triggers that
function which then decides whether to invoke the add-on and pass to it the parameters
received from the application.
Though most spyware add-ons are event-driven, there are exceptions: for example,
UCMore [9] toolbar can poll the COM interfaces of an IE browser for the URLs and
the web pages visited recently. To contain such spyware, an access-control proxy needs
to interpose on all add-on interfaces. In the above example, the add-on manager can
implement IWebBrowser2, a COM interface which offers add-ons methods such as
get LocationURL and get Document for accessing URLs and web pages. This
allows the reference controller to block all undesired invocations of these methods.
An add-on may attempt to directly interact with its host application, without going
through an add-on interface. For example, a Windows toolbar may requests from a
COM interface a handle of a browser’s window for directly retrieving its content. In
this case, the add-on manager needs to create that window’s substitute for the toolbar
and selectively copy data to it according to security policies.
An important design issue is the choice between the solution which keeps a host
application, the proxy and add-ons inside the same process, and the alternative which
separates the add-on manager and untrusted add-ons from the host and the reference
controller. The one-process solution gives good performance, which avoids expensive
cross-process communications. However, it leaves the door open for the attacks using
direct memory access. The two-process solution separates the untrusted add-ons from
their host application’s process, and therefore eliminates the threat originated from di-
rect memory access. This approach also protects a host application from the add-ons
containing security ﬂaws which may crash the application or be exploited by attackers.
300
Z. Li, X. Wang, and J.Y. Choi
Its weakness is performance, which suffers from cross-process communications (CPC).
SpyShield allows trusted add-ons to communicate with a host application directly, which
serves to limit performance degradation to untrusted add-ons. Selection of right CPC
techniques can also reduce such overheads. For example, communication through shared
memory is much faster than through pipes.
An important question is how to identify untrusted add-ons. SpyShield offers an au-
tomatic mechanism which classiﬁes add-ons according to their hash values. The mech-
anism includes a database of hash values for trusted add-ons which are computed using
a secure hash function such as SHA-256. An add-on is deemed untrusted if its hash
cannot be found from the database. The content of the database can be maintained
automatically using some heuristic rules: for example, the add-ons directly installed
from a CD or signed by a trusted vendor such as Adobe Acrobat are considered to
be trusted, while those downloaded from untrusted websites are untrusted. In order to
prevent spyware from adding itself into the database, the database is also protected by
a kernel driver called proxy guardian (Section 2.3). An authorized user is allowed to
add in other trusted add-ons after being authenticated by her password and passing a
CAPTCHA test [27] which tells humans and programs apart.
2.2 Security Policies
We developed a simple access control model for SpyShield, called sensitive zone. An
application is said to enter a sensitive zone if it starts to process sensitive data. Within
that zone, security policies are used to specify the resources to which an untrusted add-
on’s access is allowed or denied. If denied, the privacy information within the resources
is preserved in the sensitive zone.
Sensitive data can be automatically identiﬁed with the metadata generated from
users’ inputs. For example, the URLs or IP addresses of sensitive websites such as
banks are used to indicate the presence of conﬁdential data like passwords and ac-
count balances. Other examples include names and directory paths of sensitive doc-
uments, email addresses and subjects of sensitive messages and keywords such as
“password” within a data record. SpyShield can offer default settings of such meta-
data, which includes, for example, all banks’ URLs. Authorized users are allowed to
modify them.
Data imported by a host application are ﬁrst checked by the reference controller
against the metadata to determine whether a sensitive zone has been entered. An afﬁr-
mative answer triggers the enforcement of a set of policies to restrict untrusted add-ons’
access to such data. A security policy can be deﬁned over add-on interfaces, their meth-
ods and input parameters to these methods. Table 1 gives example rules, which have
controlled malicious IE plug-ins successfully in our expriements.
The security policies of a sensitive zone are applied to all the members in that zone.
For example, if we include all banks’ URLs in the same zone, the access control proxy
will enforce the same set of rules whenever a browser visits any one of them. Flexi-
bility and ﬁne-grained controls can be achieved through multiple zones, which users
are allowed to deﬁne. SpyShield offers a friendly and application-speciﬁc interface for
authorized users to deﬁne sensitive zones and describe security policies. We present an
example in Figure 2.
SpyShield: Preserving Privacy from Spy Add-Ons
301
Fig. 2. The SpyShield toolbar
Table 1. Examples of Security Policies