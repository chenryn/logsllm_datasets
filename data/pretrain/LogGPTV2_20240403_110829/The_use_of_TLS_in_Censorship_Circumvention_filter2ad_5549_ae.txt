### Extension Support and Prevalence

- **PSK Key Exchange Modes**: 99.3%
- **GREASE**: 97.8%
- **Supported Versions**: 96.9%
- **Key Share**: 86.8%
- **NPN (Next Protocol Negotiation)**: 85.7%
- **Compressed Certificate**: 81.9%
- **ChannelID**: 71.9%
- **Heartbeat**: 66.9%
- **Token Binding**: 56.0%
- **Pre-Shared Key (PSK)**: 32.3%

**Table III: Top Extensions**
- **Bold** denotes extensions whose data we additionally parse and include in our fingerprint.
- **\*** marks extensions new in TLS 1.3.

### Implementation of uTLS with TLS 1.3 Support

uTLS, built on Golang’s `crypto/tls` library, now supports TLS 1.3, allowing it to mimic Firefox 63 and Chrome 70, both of which send TLS 1.3 handshakes. With additional implementation work for new extensions, we expect to fully support over 8% of all TLS connections automatically (up from 5% currently), and optionally support over 37% if we enable weak ciphers.

### Other Findings from the TLS Dataset

#### A. Server Hello Analysis

As of August 2018, we collected approximately 5,400 unique Server Hello fingerprints, significantly fewer than the number of unique Client Hello fingerprints. This is partly due to the fact that Server Hello messages contain less content, specifying only a single cipher suite and compression method rather than a full list. However, servers can generate distinct fingerprints in response to different Client Hello messages. For example, the most popular external IP address (corresponding to Google) sent 199 unique server fingerprints in response to 1,494 Client Hello fingerprints. When considering only the most popular Client Hello message, there were 750 different Server Hello fingerprints, suggesting that the actual number of distinct TLS server implementations and configurations is close to this value.

#### B. Selected Ciphers

Using our collected information on Server Hello messages, we can compare the set of offered cipher suites by clients and discover which cipher suites are actually selected and used in practice by servers. This is useful for circumvention tools as it provides evidence of many unselected cipher suites that clients can offer without having to support them.

Excluding the long tail of fingerprints seen only once, there were over 7,900 unique sets of cipher suites in our Client Hello fingerprints, enumerating 522 cipher suite values, which is greater than the number of standardized cipher suites. Analyzing the unique cipher suites selected by servers, we found just 70 cipher suites ever selected, with the top 10 accounting for over 93% of all connections. Interestingly, the most popular cipher suite across all Client Hellos (TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA) is selected in only about 1% of connections. This shows that many cipher suites are rarely or never chosen, and circumvention tools can present them in their Client Hello messages without supporting them.

#### C. Non-standard Parameters

Our collection tool ignores malformed Client Hellos that cannot be parsed, but even well-formed Client Hello messages may still contain invalid parameters. For example, of the 65,536 possible values for 2-byte cipher suites, only 338 values are recognized and standardized by the Internet Assigned Numbers Authority (IANA). Similarly, only 28 values are defined for the 2-byte extension field. We note that TLS 1.3 proposes values for an additional 5 cipher suites and 10 extensions, which we include in our analysis.

**Table IV: Non-standard Parameters**
- **TLS 1.3 Draft Ciphers**: 100,200
- **Legacy Ciphers**: 82,992
- **GOST Ciphers**: 95,548
- **Outdated SSL Ciphers**: 106,439
- **Unknown Ciphers**: 137,999
- **Total Non-standard Ciphers**: 143,060
- **TLS 1.3 Draft Extensions**: 715
- **Legacy Extensions**: 441
- **Extended Random**: 340
- **Unknown Extensions**: 367
- **Total Non-standard Extensions**: 1,404

**Percentage of Connections**
- **TLS 1.3 Draft Ciphers**: 10.626%
- **Legacy Ciphers**: 1.392%
- **GOST Ciphers**: 0.051%
- **Outdated SSL Ciphers**: 0.097%
- **Unknown Ciphers**: 0.039%
- **Total Non-standard Ciphers**: 12.106%
- **TLS 1.3 Draft Extensions**: 10.626%
- **Legacy Extensions**: 0.154%
- **Extended Random**: 1.445%
- **Unknown Extensions**: 0.899%
- **Total Non-standard Extensions**: 11.677%

#### D. Weak Ciphers

We observe a small fraction of clients continue to offer weak or known-broken ciphers, including DES, Triple-DES (3DES), and RC4. More concerning, we still see clients supporting export-grade encryption, which negotiates intentionally weakened keys and has been recently found to enable modern vulnerabilities.

TLS can also employ hash functions with known collisions, such as MD5 and SHA1. While collisions may not enable attacks when used in the HMAC construction employed by TLS cipher suites, they can introduce problems when used in signature algorithms, as collisions there can allow an attacker to forge CA permissions. This means that MD5 and SHA1 may not be problematic as cipher suites but are when offered as a signature algorithm.

Clients can also signal that they have fallen back to a lower version of TLS by sending the TLS_FALLBACK_SCSV cipher suite. While its presence does not indicate a weakness in a client, it does indicate a suboptimal mismatch between client and server versions.

**Table V: Weak Ciphers**
- **DES**: 191,459
- **3DES**: 236,859
- **EXPORT**: 194,418
- **RC4**: 223,900
- **MD5 (Cipher)**: 200,608
- **MD5 (Sigalg)**: 4,385
- **SHA1 (Sigalg)**: 114,615
- **TLS Fallback SCSV**: 787

**Percentage of Connections**
- **DES**: 0.90%
- **3DES**: 67.0%
- **EXPORT**: 0.66%
- **RC4**: 8.19%
- **MD5 (Cipher)**: 7.15%
- **MD5 (Sigalg)**: 0.74%
- **SHA1 (Sigalg)**: 97.6%
- **TLS Fallback SCSV**: 0.03%

### Related Work

#### A. Passive TLS Measurements

Several studies have measured TLS (and SSL) by passively observing traffic. Most of these studies focus on certificates and the Certificate Authority ecosystem. For example, Holz et al. analyzed 250 million TLS/SSL connections in 2011, uncovering the "sorry state" of the X.509 certificate PKI. They briefly analyzed selected cipher suites, finding that RC4-128, AES-128, and AES-256 were the most popular at the time. Today, the same cipher is selected in only 0.001% of connections and offered by clients in only 8.4% of connections.

#### B. Client Hello Fingerprinting

Several studies have used Client Hello messages to fingerprint TLS implementations. Notably, Ristić described how to fingerprint SSL/TLS clients by analyzing parameters in the handshake, including cipher suites and extensions. These fingerprints have been used to identify third-party library use in Android applications and detect malware. Durumeric et al. used TLS fingerprints to detect HTTPS interception by antiviruses and middleboxes.

While these works used Client Hello messages to identify clients, we analyze the distribution of clients, ciphers, and TLS versions used, and the fingerprintability of censorship circumvention tools, which, to our knowledge, has not been studied in this context.

#### C. Traffic Obfuscation Analysis

Censorship circumvention tools employ two general techniques to avoid identification: mimicking allowed types of content or randomizing traffic shape to prevent blacklisting. Mimicking application layer protocols is very difficult, as demonstrated by Houmansadr et al. Randomized protocols, such as obfs4, may counter blacklisting, which is more commonly used. Liang Wang et al. examined attacks based on semantics, entropy, timing, and packet headers, demonstrating the efficiency of entropy-based classifiers in detecting obfs3 and obfs4. In 2013, tunneling loss-intolerant protocols over loss-tolerant cover channels was shown to allow censors to interfere with the channel safely, without disrupting intended use.

lib•erate is a library that uses bugs in DPI to evade identification. Even though all proposed evasion techniques are susceptible to countermeasures, it might be cheaper for the anti-censorship community to integrate and update lib•erate than for censors to fix all the bugs in DPI boxes.

### Discussion

#### A. Ethical Considerations

Studying real-world Internet traffic requires care to ensure user privacy. We designed our collection infrastructure to anonymize or discard potentially sensitive data. For example, we collected only the /16 subnet of the source IP address and SNI value for each connection. This allows us to tell if a connection originated on our campus but not what individual user generated it. For connections originating externally, we often cannot determine the AS the source was located in.

We applied for and received IRB exemption for our collection methodology and worked closely with our institution's ethics board to ensure compliance.