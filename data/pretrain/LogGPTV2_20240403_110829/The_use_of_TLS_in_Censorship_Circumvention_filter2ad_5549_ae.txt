99.3%
97.8%
96.9%
86.8%
85.7%
81.9%
71.9%
66.9%
56.0%
32.3%
Extension
GREASE
psk key exchange modes*
supported versions*
key share*
NPN
compressed certiﬁcate*
ChannelID
heartbeat
token binding
pre shared key*
record size limit
Conns
30.2%
28.7%
28.7%
28.6%
27.3%
24.8%
20.5%
5.0%
3.9%
3.1%
2.5%
TOP EXTENSIONS — WHILE WE INCLUDE THE PRESENCE
TABLE III.
AND ORDER OF ALL EXTENSIONS IN OUR FINGERPRINT, BOLD DENOTES
EXTENSIONS WHOSE DATA WE ADDITIONALLY PARSE AND INCLUDE IN
OUR FINGERPRINT; * MARKS EXTENSIONS NEW IN TLS 1.3.
As uTLS is built on Golang’s crypto/tls library, we were
able to merge its TLS 1.3 support into uTLS, allowing us to
mimic Firefox 63 and Chrome 70, which both send TLS 1.3
handshakes. With some additional implementation work to
support new extensions, we expect to be able to fully support
over 8% of all TLS connections automatically (up from 5%
currently), and optionally support over 37% if we enable weak
ciphers.
VIII. OTHER RESULTS
In this section, we present on other ﬁndings from our TLS
dataset that are relevant to censorship circumvention tools.
Our motivation to support TLS 1.3 in uTLS is twofold: ﬁrst,
several features such as encrypted certiﬁcates and encrypted
10Not yet standardized
11
A. Server Hello Analysis
As of August 2018, we collected approximately 5,400
unique Server Hello ﬁngerprints, substantially fewer than the
number of unique Client Hello ﬁngerprints. This is in part due
to Server Hello messages having less content, as it speciﬁes
only a single cipher suite and compression method, rather
than the full list that the server supports. On the other hand,
while a client implementation might generate a single or small
collection of Client Hello ﬁngerprint, servers can potentially
generate distinct ﬁngerprints in response to different Client
Hello messages. For example, the single most popular external
IP address (corresponding to Google) sent 199 unique server
ﬁngerprints from 1494 Client Hello ﬁngerprints sent to it.
Looking at the responses to only the most popular Client Hello
message, there are 750 different Server Hello ﬁngerprints,
suggesting that
the actual number of distinct TLS server
implementations and conﬁgurations that these clients talk to
may be close to this value.
Selected Ciphers
Using our collected information on Server Hello messages,
we can compare the set of offered cipher suites by clients, and
discover what cipher suites are actually selected and used in
practice by servers. This is useful for circumvention tools as it
provides evidence of many unselected cipher suites that clients
can offer without having to actually support.
Excluding the long tail of ﬁngerprints seen only once, in
our Client Hello ﬁngerprints, there were over 7900 unique sets
of unique cipher suites. These sets enumerate 522 cipher suite
values, which is greater than the number of standardized cipher
suites, for reasons described in Section VIII-B.
Analyzing the unique cipher suites that are selected by
servers, however, we ﬁnd just 70 cipher suites ever selected,
with the top 10 accounting for over 93% of all connections.
Interestingly, the most popular cipher suite across all Client
Hellos (TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA) is
only selected in approximately 1% of connections. This shows
there are many cipher suites that servers will rarely or never
choose, and circumvention tools are free to present them in
their Client Hello messages without having to support those
cipher suites.
B. Non-standard parameters
Our collection tool ignores malformed Client Hellos that
cannot be parsed, but even well-formed Client Hello messages
may still contain invalid parameters. For example, of the 65536
possible values for 2-byte cipher suites, only 338 values are
recognized and standardized by the Internet Assigned Numbers
Authority (IANA) [46], with the remainder either unassigned
or reserved for private use. Similarly, only 28 values are
deﬁned for the 2-byte extension ﬁeld. We note that TLS 1.3
proposes values for an additional 5 cipher suites and 10
extensions, which we include in our analysis.
TLS 1.3 draft ciphers
Legacy ciphers
GOST ciphers
Outdated SSL ciphers
Unknown ciphers
Total non-standard ciphers
TLS 1.3 draft extensions
Legacy Extensions
Extended Random
Unknown extensions
Total non-standard extensions
Fingerprints
1002
82992
95548
106439
137999
143060
715
441
340
367
1404
% Connections
10.626%
1.392%
0.051%
0.097%
0.039%
12.106%
10.626%
0.154%
1.445%
0.899%
11.677%
NON-STANDARD PARAMETERS — BREAKDOWN OF THE
TABLE IV.
NUMBER OF UNIQUE CLIENT HELLOS (FINGERPRINTS) AND THE SHARE
OF CONNECTIONS THEY APPEAR IN THAT SEND NON-STANDARD CIPHER
SUITES OR EXTENSIONS. WHILE TLS 1.3 DRAFT CIPHERS AND
EXTENSIONS ARE THE MAJORITY, WE STILL FIND UNKNOWN CIPHERS AND
EXTENSIONS IN USE.
DES
3DES
EXPORT
RC4
MD5 (Cipher)
MD5 (Sigalg)
SHA1 (Sigalg)
TLS FALLBACK
Fingerprints
191459
236859
194418
223900
200608
4385
114615
787
% Connections
0.90%
67.0%
0.66%
8.19%
7.15%
0.74%
97.6%
0.03%
WEAK CIPHERS — WE ANALYZED THE PERCENT OF
TABLE V.
CONNECTIONS OFFERING KNOWN WEAK CIPHER SUITES. WE ALSO
INCLUDE TLS_FALLBACK_SCSV, WHICH INDICATES A CLIENT THAT IS
FALLING BACK TO AN EARLIER VERSION THAN IT SUPPORTS DUE TO THE
SERVER NOT SUPPORTING THE SAME VERSION.
understand or whitelist all commonly-used ﬁngerprints, as
many do not strictly conform to the standard. Table IV shows
the breakdown of non-standard parameters.
C. Weak Ciphers
We observe a small fraction of clients continue to offer
weak or known-broken ciphers,
including DES [27], [58],
Triple-DES (3DES) [10], and RC4 [2], [61]. More concerning,
we still see clients supporting export-grade encryption, which
negotiates intentionally weakened keys and has been recently
found to enable modern vulnerabilities [9], [6].
TLS can also employ hash functions with known collisions,
such as MD5 [55], [52] and SHA1 [63], [56]. While collisions
may not enable attacks when used in the HMAC construction
employed by TLS cipher suites, they can introduce problems
when used in signature algorithms, as collisions there can allow
an attacker to forge CA permissions [52]. This means that
MD5 and SHA1 may not be problematic as cipher suites, but
are when offered as a signature algorithm. We present both
uses for completeness.
Clients can also signal that they have fallen back to a lower
version of TLS by sending the TLS_FALLBACK_SCSV cipher
suite [40]. While its presence does not indicate a weakness in
a client, it does indicate a suboptimal mismatch between client
and server versions.
This allows us to locate TLS Client Hello ﬁngerprints that
specify non-standard extensions or cipher suites. In total, over
138,000 ﬁngerprints accounting for 13.14% of connections
contained at least one non-standardized cipher suite or ex-
tension value. The commonality of support for non-standard
features suggests it may be difﬁcult for a censor to fully
Table V summarizes the ﬁngerprints and percent of con-
nections we observed clients offering these weak cipher suites
and signature algorithms. While circumvention tools would
likely avoid using such weak cipher suites (lest
it enable
a censor to successfully break their TLS connections), this
further demonstrates the wide range of TLS implementations
12
present on the modern Internet, once again showing how long
legacy code can remain in use.
IX. RELATED WORK
A. Passive TLS Measurements
Several studies have measured TLS (and SSL) by passively
observing trafﬁc as we have in our study. However, the vast
majority of these studies focus mainly on certiﬁcates and
the Certiﬁcate Authority ecosystem. For example, in 2011
Holz et al. analyzed 250 million TLS/SSL connections and
extracted certiﬁcates in order to study the existing landscape
of certiﬁcate validation [29]. In addition to uncovering the
“sorry state” of the X.509 certiﬁcate PKI, they brieﬂy analyzed
selected cipher suites, ﬁnding that RC4-128, AES-128, and
AES-256 were the most popular cipher suites used at the time,
with TLS RSA WITH RC4 128 MD5 selected in between
20 and 30% of connections. Today, 7 years later, we ﬁnd that
same cipher is selected in only 0.001% of connections, and
offered by clients in only 8.4% of connections. Later, Holz
et al. studied the use of TLS in email clients [28]. Lee et al.
performed active scans of a sample of TLS/SSL servers in
order to study ciphers supported and certiﬁcates in 2007 [36].
In 2012 the SSL Notary studied TLS/SSL certiﬁcates collected
from live trafﬁc [3]. The SSL Notary continues to run today11,
though still mainly focused on certiﬁcates and servers rather
than clients. In 2014, Huang et al. described a way to detect
forged SSL certiﬁcates via a ﬂash plugin that could observe
the raw certiﬁcate sent to the user [31].
B. Client Hello Fingerprinting
Several studies have used Client Hello messages to ﬁn-
gerprint TLS implementations. Most notably, in 2009, Risti´c
described how to ﬁngerprint SSL/TLS clients by analyzing
parameters in the handshake, including the cipher suites and
extensions list [47], [34], [48]. Several works have since
observed that these ﬁngerprints can be used to identify and
ﬁngerprint third-party library use in Android applications [44],
and detect malware [11], [4]. Durumeric et al. used TLS ﬁnger-
prints and compared them to browser-provided user agents on
a popular website to detect HTTPS interception by antiviruses
and middleboxes [19].
While these works used Client Hello message to identify
clients, we analyze the distribution of clients, ciphers and tls
versions used, and ﬁngerprintability of censorship circumven-
tion tools, which to our knowledge has not been studied in this
context.
C. Trafﬁc Obfuscation Analysis
There are 2 general techniques [59] that censorship circum-
vention tools employ to avoid identiﬁcation: mimic allowed
type of content, or randomize the trafﬁc shape to prevent
blacklisting. In the former case, developers would have to elim-
inate all disparities between circumvention circumvention tool
and imitated protocol, and will protect against whitelisting, as
long as mimicked application is popular or important enough
to avoid blocking. Houmansadr et al. demonstrated [30] that
it
to successfully mimic application layer
is very difﬁcult
11https://notary.icsi.berkeley.edu/
application. Randomized protocols, such as obfs4, while not
being able to defend against whitelist approach, may counter
blacklisting, which is used more commonly. Study by Liang
Wang et al. examined attacks based on semantics, entropy,
timing and packet headers [62], and demonstrated efﬁciency
of entropy-based classiﬁer in detecting obfs3 and obfs4. In
2013,
tunneling loss-intolerant protocols over loss-tolerant
cover channels, was shown[26] to allow censors to interfere
with the channel safely, without disrupting intended use of
cover-protocol. For details on observability and trafﬁc analysis
resistance of existing anti-censorship tools, reader can refer to
Systematizations of Knowledge[33], [59].
lib•erate [37] is a library, that takes alternative approach,
and instead of hiding the trafﬁc, it features numerous tech-
niques that use bugs in DPI to evade identiﬁcation. Even
though all proposed evasion techniques are susceptible to
countermeasures, it might be cheaper for anti-censorship com-
munity to integrate and update lib•erate, than for censors to
ﬁx all the bugs in DPI boxes.
X. DISCUSSION
A. Ethical Considerations
Studying real-world Internet trafﬁc requires care to ensure
user privacy. We designed our collection infrastructure to
anonymize or discard potentially sensitive data. For example,
we collected only the /16 subnet of the source IP address and
SNI value for each connection. This allows us to tell if a
connection originated on our campus, but not what individual
user generated it. For connections originated externally, we
often cannot even determine what AS the source was located
in.
We applied for and received IRB exemption for our collec-
tion methodology, and we worked closely with our institution’s