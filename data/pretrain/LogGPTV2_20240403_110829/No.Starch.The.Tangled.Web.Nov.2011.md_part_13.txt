Four special target names can be used, too (as shown on the left of Fig-
ure 4-1): _blank always opens a brand-new window, _parent navigates a higher-
level view that embeds the link-bearing document (if any), and _top always nav-
igates the top-level browser window, no matter how many document embed-
ding levels are in between. Oh, right, the fourth special target, _self, is identical
to not specifying a value at all and exists for no reason whatsoever.
Bunny Browser 2000 Bunny Browser 2000
http://fuzzybunnies.com
_top _blank
_parent
_self (default)
Figure 4-1: Predefined targets for hyperlinks
Forms and Form-Triggered Requests
An HTML form can be thought of as an information-gathering hyperlink:
When the “submit” button is clicked, a dynamic request is constructed on the
fly from the data collected via any number of input fields. Forms allow user
input and files to be uploaded to the server, but in almost every other way,
the result of submitting a form is similar to following a normal link.
A simple form markup may look like this:
Given name: 
Family name: 
...
The action parameter works like the href value used for normal links, with
one minor difference: If the value is absent, the form will be submitted to the
location of the current document, whereas any destination-free  links will
simply not work at all. An optional target parameter may also be specified and
will behave as outlined in the previous section.
NOTE Unusually, unlike  tags, forms cannot be nested inside each other, and only the top-
level  tag will remain operational in such a case.
When the method value is set to GET or is simply not present at all, all the
nested field names and their current values will be escaped using the familiar
percent-encoding scheme outlined in Chapter 2, but with two rather arbitrary
differences. First, the space character (0x20) will be substituted with the plus
80 Chapter 4
sign, rather than encoded as “%20”. Second, following from this, any existing
plus signs need to be encoded as “%2B”, or else they will be misinterpreted
as spaces.
Encoded name=value pairs are then delimited with ampersands and com-
bined into a single string, such as this:
given=Erwin+Rudolf+Josef+Alexander&family=Schr%C3%B6dinger
The resulting value is inserted into the query part of the destination URL
(replacing any existing contents of that section) and submitted to the server.
The received response is then shown to the user in the targeted viewport.
The situation is a bit more complicated if the method parameter is set to
POST. For that type of HTTP request, three data submission formats are avail-
able. In the default mode (referred to as application/x-www-form-urlencoded),
the message is constructed the same way as for GET but is transmitted in the
request payload instead, leaving the query string and all other parts of the
destination URL intact.*
The existence of the second POST submission mode, triggered by speci-
fying enctype="text/plain" on the  tag, is difficult to justify. In this mode,
field names and values will not be percent encoded at all (but, depending on
the browser, plus signs may be used to substitute for spaces), and a newline
delimiter will be used in place of an ampersand. The resulting format is essen-
tially useless, as it can’t be parsed unambiguously: Form-originating newlines
and equal signs are indistinguishable from browser inserted ones.
The last mode is triggered with enctype="multipart/form-data" and must be
used whenever submitting user-selected files through a form (which is possi-
ble with a special  tag). The resulting request body consists
of a series of short MIME messages corresponding to every submitted field.†
These messages are delimited with a client-selected random, unique bound-
ary token that should otherwise not appear in the encapsulated data:
POST /process_form.cgi HTTP/1.1
…
Content-Type: multipart/form-data; boundary=random1234
--random1234
Content-Disposition: form-data; name="given"
Erwin Rudolf Josef Alexander
--random1234
Content-Disposition: form-data; name="family"
* This has the potential for confusion, as the same parameter may appear both in the query string
and in the POST payload. There is no consistency in how various server-side web applications
frameworks resolve this conflict.
† MIME (Multipurpose Internet Mail Extensions) is a data format intended for encapsulating
and safely transmitting various types of documents in email messages. The format makes several
unexpected appearances in the browser world. For example, Content-Type file format identifiers
also have unambiguous MIME roots.
Hypertext Markup Language 81
Schrödinger
--random1234
Content-Disposition: form-data; name="file"; filename="cat_names.txt"
Content-Type: text/plain
(File contents follow)
--random1234--
Despite the seemingly open-ended syntax of the tag, other request
methods and submission formats are not supported by any browser, and
thisis unlikely to change. For a short while, the HTML5 standard tried to
introduce PUT and DELETE methods in forms, but this proposal was quickly
shot down.
Frames
Frames are a form of markup that allows the contents of one HTML docu-
ment to be displayed in a rectangular region of another, embedding page.
Several framing tags are supported by modern browsers, but the most com-
mon way of achieving this goal is with a hassle-free and flexible inline frame:
In traditional HTML documents, this tag puts the parser in one of the
special parsing modes, and all text between the opening and the closing tag
will simply be ignored in frame-aware browsers. In legacy browsers that do
not understand , the markup between the opening and closing tags
is processed normally, however, offering a decidedly low-budget, conditional
rendering directive. This conditional behavior is commonly used to provide
insightful advice such as “This page must be viewed in a browser that sup-
ports frames.”
The frame is a completely separate document view that in many aspects
is identical to a new browser window. (It even enjoys its own JavaScript execu-
tion context.) Like browser windows, frames can be equipped with a name
parameter and then targeted from  and  tags.
The constraints on the src URL for framed content are roughly similar to
the rules enforced on regular links. This includes the ability to point frames
to javascript: or to load externally handled protocols that leave the frame
empty and open the target application in a new process.
Frames are of special interest to web security, as they allow almost uncon-
strained types of content originating from unrelated websites to be com-
bined onto a single page. We will have a second look at the problems
associated with this behavior in Chapter 11.
Type-Specific Content Inclusion
In addition to content-agnostic link navigation and document framing, HTML
also provides multiple ways for a more lightweight inclusion of several pre-
defined types of external content.
82 Chapter 4
Images
Image files can be retrieved and displayed on a page using  tags, via
stylesheets, and through a legacy background= parameter on markup such
as  or .
The most popular image type on the Internet is a lossy but very effi-
cient JPEG file, followed by lossless and more featured (but slower) PNG.
An increasingly obsolete lossless GIF format is also supported by every
browser, and so is the rarely encountered and usually uncompressed Win-
dows bitmap file (BMP). An increasing number of rendering engines
support SVG, an XML-based vector graphics and animation format, too,
but the inclusion of such images through the  tag is subject to addi-
tional restrictions.
The list of recognized image types can be wrapped up with odds and
ends such as Windows metafiles (WMF and EMF), Windows Media Photo
(WDP and HDP), Windows icons (ICO), animated PNG (APNG), TIFF
images, and—more recently—WebP. Browser support for these is far
from universal, however.
Cascading stylesheets
These text-based files can be loaded with a 
tag—even though  would be a more intuitive choice—and
may redefine the visual aspects of almost any other HTML tag within their
parent document (and in some cases, even include embedded JavaScript).
The syntax and function of CSS are the subject of Chapter 5.
In the absence of the appropriate charset value in the Content-Type
header for the downloaded stylesheet, the encoding according to which
this subresource will be interpreted can be specified by the including
party through the charset parameter of the  tag.
Scripts
Scripts are text-based programs included with  tags andare exe-
cuted in a manner that gives them full control over the host document.
The primary scripting language for the Web is JavaScript, although an
embedded version of Visual Basic is also supported in Internet Explorer
and can be used at will. Chapter 6 takes an in-depth look at client-side
scripts and their capabilities.
As with CSS, in the absence of valid Content-Type data, the charset
according to which the script is interpreted may be controlled by the
including party.
Plug-in content
This category spans miscellaneous binary files included with  or
 tags or via an obsolete, Java-specific  tag. Browser plug-in
content follows its own security rules, which are explored to some extent in
Chapters 8 and 9. In many cases, it is safe to consider plug-in-supported
content as equivalent to or more powerful than JavaScript.
Hypertext Markup Language 83
NOTE The standard permits certain types of browser-supported documents, such as text/html
or text/plain, to be loaded through  tags, in which case they form a close
equivalent of . This functionality is not used in practice, and the rationale
behind it is difficult to grasp.
Other supplementary content
This category includes various rendering cues that may or may not be
honored by the browser; they are most commonly provided through
 directives. Examples include website icons (known as “favicons”),
alternative versions of a page, and chapter navigation links.
Several other once-supported content inclusion methods, such as the
 tag for background music, were commonplace in the past but have
fallen out of grace. On the other hand, as a part of HTML5, new tags such as
 and  are expected to gain popularity soon.
There is relatively little consistency in what URL schemes are accepted
for type-specific content retrieval. It should be expected that protocols routed
to external applications will be rejected, as they do not have a sensible mean-
ing in this context, but beyond this, not many assumptions should be made.
As a security precaution, most browsers will also reject scripting-related schemes
when loading images and stylesheets, although Internet Explorer 6 and Opera
do not follow this practice. As of this writing, javascript: URLs are also permit-
ted on  and  tags in Firefox but not, for example, on .
For almost all of the type-specific content inclusion methods, Content-Type
and Content-Disposition headers provided by the server will typically be ignored
(perhaps except for the charset= value), as may be the HTTP response code
itself. It is best to assume that whenever the body of any server-provided
resource is even vaguely recognizable as one of the data formats enumerated
in this section, it may be interpreted as such.
A Note on Cross-Site Request Forgery
On all types of cross-domain navigation, the browser will transparently include
any ambient credentials; consequently, to the server, a request legitimately
originating from its own client-side code will appear roughly the same as a
request originating from a rogue third-party site, and it may be granted the
same privileges.
Applications that fail to account for this possibility when processing any
sensitive, state-changing requests are said to be vulnerable to cross-site request
forgery (XSRF or CSRF). This vulnerability can be mitigated in a number of
ways, the most common of which is to include a secret user- and session-
specific value on such requests (as an additional query parameter or a hid-
den form field). The attacker will not be able to obtain this value, as read
access to cross-domain documents is restricted by the same-origin policy
(seeChapter 9).
84 Chapter 4
Security Engineering Cheat Sheet
Good Engineering Hygiene for All HTML Documents
 Always output consistent, valid, and browser-supported Content-Type and charset informa-
tion to prevent the document from being interpreted contrary to your original intent.
When Generating HTML Documents with Attacker-Controlled Bits
This task is difficult to perform consistently across the entire web application, and it is one of
the most significant sources of web application security flaws. Consider using context-sensitive
auto-escaping frameworks, such as JSilver or CTemplate, to automate it. If that is not possible,
read on.
 User-supplied content in text body: Always entity-encode “”, and “&”. Note that cer-
tain other patterns may be dangerous in certain non-ASCII-compatible output encodings.
If applicable, consult Chapter 13.
Keep in mind that some Unicode metacharacters (e.g., U+202E) alter the direction
orflow of the subsequent text. It may be desirable to remove them in particularly sensi-
tive uses.
 Tag-specific style and on* parameters: Multiple levels of escaping are required. This prac-
tice is extremely error prone, meaning not really something to attempt. If it is absolutely
unavoidable, review the cheat sheets in Chapters 5 and 6.
 All other HTML parameter values: Always use quotes around attacker-controlled input.
Entity-encode “”, “&”, and any stray quotes. Remember that some parameters
require additional validation. For URLs, see the cheat sheet in Chapter 2.
Never attempt to blacklist known bad values in URLs or any other parameters; doing
so will backfire and may lead to script execution flaws.
 Special parsing modes (e.g.,  and  blocks): For values appearing inside
quoted strings, replace quote characters, backslash, “”, and all nonprintable charac-
ters with language-appropriate escape codes. For values appearing outside strings, exer-
cise extreme caution and allow only carefully validated, known, alphanumeric values.
In XHTML mode, remember to wrap the entire script section in a CDATA block.
Avoid cases that require multiple levels of encoding, such as building parameters to the
JavaScript eval(...) function using attacker-supplied strings. Never place user-controlled
data inside HTML comments, !-type or ?-type tags, and other nonessential or unusually
parsed blocks.
When Converting HTML to Plaintext
 A common mistake is to strip only well-formed tags. Remember that all left-angle brackets
must be removed, even if no matching right-angle bracket is found. To minimize the risk
of errors, always entity-escape angle brackets and ampersands in the generated output, too.
Hypertext Markup Language 85
When Writing a Markup Filter for User Content
 Read this chapter carefully. Use a reasonably robust HTML parser to build an in-memory
document tree. Walk the tree, removing any unrecognized or unnecessary tags and
parameters and scrubbing any undesirable tags/parameters/value combinations.
When done, reserialize the document, making sure to apply proper escaping rules to
parameter values and text content. (See the first tip on this cheat sheet.) Be aware of the
impact of special parsing modes.
 Because of the somewhat counterintuitive namespace interactions with JavaScript, do
notallow name and id parameters on user-supplied markup—at least not without reading
Chapter 6 first.
 Do not attempt to sanitize an existing, serialized document in place. Doing so inevitably
leads to security problems.
86 Chapter 4
C A S C A D I N G S T Y L E S H E E T S
As the Web matured through the 1990s, website devel-
opers increasingly needed a consistent and flexible way
to control the appearance of HTML documents; the
collection of random, vendor-specific tag parameters
available at the time simply would not do. After review-
ing several competing proposals, W3C eventually set-
tled on Cascading Style Sheets (CSS), a fairly simple text-
based page appearance description language proposed
by Håkon Wium Lie.
The initial CSS level 1 specification saw the light of day by the end of
1996,1 but further revisions of this document continued until 2008. The ini-
tial draft of CSS level 2 followed in December 1998 and has yet to be finalized
as of 2011. The work on the most recent iteration, level 3, started in 2005 and
also continues to this day. Although most of the individual features envisioned
for CSS2 and CSS3 have been adopted by all modern browsers after years of
trial and error, many subtle details vary significantly from one implementation
to another, and the absence of a finalized standard likely contributes to this.
Despite the differences from one browser to another, CSS is a very pow-
erful tool. With only a couple of constraints, stylesheets permit almost every
HTML tag to be scaled, positioned, and decorated nearly arbitrarily, thereby
overcoming the constraints originally placed on it by the underlying markup
language; in some implementations, JavaScript programs can be embedded
in the CSS presentation directives as well. The job of placing user-controlled
values inside stylesheets, or recoding any externally provided CSS, is there-
fore of great interest to web application security.
Basic CSS Syntax
Stylesheets can be placed in an HTML document in three ways: inlined glo-
bally for the entire document with a  block, retrieved from an external
URL via the  directive, or attached to a specific tag using
the style parameter. In addition, XML-based documents (including XHTML)
may also leverage a little-known  directive to achieve
the same goal.
The first two methods of inclusion require a fully qualified stylesheet
consisting of any number of selectors (directives describing which HTML
tags the following ruleset will apply to) followed by semicolon-delimited
name: value rules between curly brackets. Here is a simple example of such