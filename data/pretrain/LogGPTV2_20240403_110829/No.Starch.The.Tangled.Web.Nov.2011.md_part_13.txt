### Special Target Names for Hyperlinks

Four special target names can be used in hyperlinks, as illustrated in Figure 4-1:
- `_blank`: Opens the link in a new browser window.
- `_parent`: Navigates to a higher-level view that embeds the current document (if applicable).
- `_top`: Navigates to the top-level browser window, regardless of the number of embedding levels.
- `_self` (default): Loads the linked document into the same frame or window as the current one. This is the default behavior if no target is specified.

**Figure 4-1: Predefined Targets for Hyperlinks**

| Target | Description |
|--------|-------------|
| `_blank` | Opens in a new window. |
| `_parent` | Navigates to the parent frame. |
| `_top` | Navigates to the top-level window. |
| `_self` | Default; loads in the same frame. |

### Forms and Form-Triggered Requests

An HTML form can be thought of as an information-gathering hyperlink. When the "submit" button is clicked, a dynamic request is constructed from the data collected via input fields. Forms allow user input and file uploads, but in most other ways, submitting a form is similar to following a normal link.

A simple form markup might look like this:

```html
<form action="http://example.com/submit" method="GET">
  Given name: <input type="text" name="given"><br>
  Family name: <input type="text" name="family"><br>
  <input type="submit" value="Submit">
</form>
```

The `action` attribute works similarly to the `href` value in a link. If the `action` attribute is absent, the form will be submitted to the current document's URL. The `target` attribute can also be specified, behaving as described in the previous section.

**Note**: Unlike `<a>` tags, forms cannot be nested inside each other. Only the top-level `<form>` tag will remain operational.

#### GET Method

When the `method` attribute is set to `GET` (or not specified), all field names and values are percent-encoded. Spaces are replaced with plus signs (`+`), and existing plus signs are encoded as `%2B`. The encoded name-value pairs are then combined into a single string, separated by ampersands, and appended to the query part of the destination URL.

Example:
```
given=Erwin+Rudolf+Josef+Alexander&family=Schr%C3%B6dinger
```

#### POST Method

For `POST` requests, three data submission formats are available:
1. **Default Mode (application/x-www-form-urlencoded)**: The message is constructed the same way as for `GET`, but it is transmitted in the request payload, leaving the query string and other parts of the URL intact.
2. **Text/Plain Mode (enctype="text/plain")**: Field names and values are not percent-encoded, and a newline delimiter is used instead of an ampersand. This format is generally not useful due to parsing ambiguities.
3. **Multipart/Form-Data Mode (enctype="multipart/form-data")**: Used for file uploads. The request body consists of a series of MIME messages, each corresponding to a submitted field. These messages are delimited by a unique boundary token.

Example of a `multipart/form-data` request:
```http
POST /process_form.cgi HTTP/1.1
Content-Type: multipart/form-data; boundary=random1234

--random1234
Content-Disposition: form-data; name="given"
Erwin Rudolf Josef Alexander
--random1234
Content-Disposition: form-data; name="family"
Schr√∂dinger
--random1234
Content-Disposition: form-data; name="file"; filename="cat_names.txt"
Content-Type: text/plain
(File contents follow)
--random1234--
```

### Frames

Frames allow the contents of one HTML document to be displayed in a rectangular region of another. Modern browsers support several framing tags, but the most common and flexible method is the inline frame (`<iframe>`).

In legacy browsers that do not understand frames, the content between the opening and closing tags is processed normally, often providing a fallback message such as "This page must be viewed in a browser that supports frames."

Frames are of particular interest to web security because they can combine content from unrelated websites on a single page, potentially leading to security vulnerabilities. We will revisit these issues in Chapter 11.

### Type-Specific Content Inclusion

HTML provides multiple ways to include external content, such as images, stylesheets, scripts, and plug-ins.

#### Images

Images can be included using the `<img>` tag, via stylesheets, or through the `background` parameter in certain elements. Common image formats include JPEG, PNG, GIF, BMP, and SVG. Other supported formats include WMF, EMF, WDP, HDP, ICO, APNG, TIFF, and WebP, though support varies across browsers.

#### Cascading Stylesheets (CSS)

CSS files can be loaded with the `<link>` tag and redefine the visual aspects of HTML elements. The syntax and function of CSS are covered in Chapter 5. The `charset` parameter can specify the encoding if the `Content-Type` header is missing.

#### Scripts

Scripts are included with the `<script>` tag and executed to control the host document. JavaScript is the primary scripting language, though Internet Explorer also supports Visual Basic. Chapter 6 delves into client-side scripts and their capabilities.

#### Plug-in Content

Plug-in content includes binary files included with `<object>`, `<embed>`, or the obsolete `<applet>` tag. Plug-in content follows its own security rules, explored in Chapters 8 and 9.

#### Other Supplementary Content

This category includes various rendering cues, such as favicons, alternative page versions, and navigation links. Some older methods, like the `<bgsound>` tag for background music, are no longer commonly used. New HTML5 tags like `<audio>` and `<video>` are expected to gain popularity.

### Cross-Site Request Forgery (CSRF)

On cross-domain navigation, the browser includes any ambient credentials, making it difficult for the server to distinguish between legitimate and rogue requests. Applications vulnerable to CSRF can mitigate this by including a secret, session-specific value in sensitive requests. This value is inaccessible to attackers due to the same-origin policy.

### Security Engineering Cheat Sheet

**Good Engineering Hygiene for All HTML Documents**
- Always output consistent, valid, and browser-supported `Content-Type` and `charset` information.

**When Generating HTML Documents with Attacker-Controlled Bits**
- Use context-sensitive auto-escaping frameworks like JSilver or CTemplate.
- Entity-encode `"<", ">", "&"` in text bodies.
- Be cautious with Unicode metacharacters.
- Avoid blacklisting known bad values in URLs or parameters.

**Special Parsing Modes**
- Replace quote characters, backslashes, and nonprintable characters with appropriate escape codes.
- Exercise extreme caution with values outside strings.

**Converting HTML to Plaintext**
- Remove all left-angle brackets, even if no matching right-angle bracket is found.
- Entity-escape angle brackets and ampersands in the generated output.

**Writing a Markup Filter for User Content**
- Use a robust HTML parser to build an in-memory document tree.
- Remove unrecognized or unnecessary tags and parameters.
- Reserialize the document, applying proper escaping rules.
- Do not sanitize serialized documents in place.

By following these guidelines, you can ensure that your HTML documents are secure and well-structured.