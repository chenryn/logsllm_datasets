 我们强烈建议生成 COPY 数据的应用八换行符和回车分别转换成 \\n 和 \\r 序列。 目前我们可以用一个反斜杠和一个回车表示一个数据回车，以及用一个反斜扛和一个换行符表示一个数据换行符。 不过，这样的表示在将来的版本中缺省时可能不会被接受。
.PP
They are also highly vulnerable to corruption if the COPY file is
transferred across different machines (for example, from Unix to Windows
or vice versa).
.PP
\fBCOPY TO\fR 将再每行的结尾是用一个 Unix 风格的换行符("\\n")， 或者是在 MS Windows 上运行的服务器上用（"\\r\\n"）标记一行终止，但只是用于COPY到服务器文件里； 为了在不同平台之间一致，COPY TO STDOUT 总是发送 "\\n"，不管服务器平台是什么。 COPY FROM 可以处理那些以回车符，或者换行符，或者回车换行符作为行结束的数据。 为了减少在数据中出现的未逃逸的新行或者回车导致的错误，如果输入的行结尾不像上面这些符号， COPY FROM 会发出警告。
.SS "BINARY FORMAT 二进制格式"
.PP
 在PostgreSQL 7.4 中的 COPY BINARY  的文件格式做了变化。新格式由一个文件头，零或多条元组， 以及文件尾组成。文件头和数据现在是网络字节序。
.SS "FILE HEADER 文件头"
.PP
 文件头由 15 个字节的固定域组成，后面跟着一个变长的头扩展区。 固定域是：
.TP
\fBSignature 签名\fR
11-字节的序列 PGCOPY\\n\\377\\r\\n\\0 --- 请注意字节零是签名是要求的一部分。 （使用这个签名是为了让我们能够很容易看出文件是否已经被一个非 8 位安全的转换器给糟蹋了。 这个签名会被行结尾转换过滤器，删除字节零，删除高位，或者奇偶的改变而改变。）
.TP
\fBFlags field 标志域\fR
 32 位整数掩码表示该文件格式的重要方面。 位是从 0（LSB）到 31 （MSB）编码的 --- 请注意这个域是以网络字节序存储的（高位在前）， 后继的整数都是如此。位 16 - 31 是保留用做关键文件格式信息的； 如果读者发现一个不认识的位出现在这个范围内，那么它应该退出。 位 0-15 都保留为标志向后兼容的格式使用；读者可以忽略这个范围内的不认识的位。目前只定义了一个标志位，而其它的必须是零：
.RS
.TP
\fBBit 16\fR
 如果为 1，那么在数据中包括了 OID；如果为 0，则没有
.RE
.PP
.TP
\fB头扩展范围长度\fR
 32 位整数，以字节计的头剩余长度，不包括自身。目前，它是零， 后面紧跟第一条元组。对该格式的更多的修改都将允许额外的数据出现在头中。 读者应该忽略任何它不知道该如何处理的头扩展数据。
.PP
.PP
 头扩展数据是一个用来保留一个自定义的数据序列块用的。这个标志域无意告诉读者扩展区的内容是什么。头扩展的具体设计内容留给以后的版本用。
.PP
 这样设计就允许向下兼容头附加（增加头扩展块，或者设置低位序标志位）以及非向下兼容修改（设置高位标志位以标识这样的修改， 并且根据需要向扩展区域增加支持数据）。
.SS "TUPLES 元组"
.PP
每条元组都以一个 16 位整数计数开头，该计数是元组中字段的数目。（目前，在一个表里的每条元组都有相同的计数，但可能不会永远这样。）然后后面不断出现元组中的各个字段，字段先是一个 32 位的长度字，后面跟着那么长的字段数据。（长度字并不包括自己，并且可以为零。）一个特例是：-1 表示一个 NULL 字段值。在 NULL 情况下，后面不会跟着数值字节。
.PP
在数据域之间没有对奇填充或者任何其它额外的数据。
.PP
目前，一个 COPY BINARY 文件里的所有数据值都假设是二进制格式的（格式代码为一）。预计将来的扩展可能增加一个头域，允许为每个字段声明格式代码。
.PP
为了判断实际元组数据的正确的二进制格式，你应该阅读 PostgreSQL 源代码，特别是该字段数据类型的 *send 和 *recv 函数（典型的函数可以在源代码的 src/backend/utils/adt/ 目录找到）。
.PP
如果在文件中包括了 OID，那么该 OID 域立即跟在字段计数字后面。它是一个普通的字段，只不过它没有包括在字段计数。但它包括长度字 --- 这样就允许我们不用花太多的劲就可以处理 4 字节和 8 字节的 OID，并且如果某个家伙允许 OID 是可选的话，那么还可以把 OID 显示成空。
.SS "FILE TRAILER 文件尾"
.PP
 文件尾包括保存着 -1 的一个 16 位整数字。这样就很容易与一条元组的域计数字相区分。
.PP
 如果一个域计数字既不是 -1 也不是预期的字段的数目，那么读者应该报错。 这样就提供了对丢失与数据的同步的额外的检查。
.SH "EXAMPLES 例子"
.PP
 下面的例子把一个表拷贝到客户端， 使用竖直条（|）作为域分隔符：
.sp
.nf
COPY country TO STDOUT WITH DELIMITER '|';
.sp
.fi
.PP
 从一个 Unix 文件中拷贝数据到一个country表中：
.sp
.nf
COPY country FROM '/usr1/proj/bray/sql/country_data';
.sp
.fi
.PP
 下面是一个可以从 STDIN 中拷贝数据到表中的例子：
.sp
.nf
AF      AFGHANISTAN
AL      ALBANIA
DZ      ALGERIA
ZM      ZAMBIA
ZW      ZIMBABWE
.sp
.fi
 请注意在这里每行里的空白实际上是一个水平制表符 tab。
.PP
 下面的是同样的数据，在一台 Linux/i586 机器上以二进制形式输出。 这些数据是用 Unix 工具 \fIod -c\fR 过滤之后输出的。 该表有三个字段；第一个是 char(2)， 第二个是 text， 第三个是integer。所有的行在第三个域都是一个 null 值。
.sp
.nf
0000000   P   G   C   O   P   Y  \\n 377  \\r  \\n  \\0  \\0  \\0  \\0  \\0  \\0
0000020  \\0  \\0  \\0  \\0 003  \\0  \\0  \\0 002   A   F  \\0  \\0  \\0 013   A
0000040   F   G   H   A   N   I   S   T   A   N 377 377 377 377  \\0 003
0000060  \\0  \\0  \\0 002   A   L  \\0  \\0  \\0 007   A   L   B   A   N   I
0000100   A 377 377 377 377  \\0 003  \\0  \\0  \\0 002   D   Z  \\0  \\0  \\0
0000120 007   A   L   G   E   R   I   A 377 377 377 377  \\0 003  \\0  \\0
0000140  \\0 002   Z   M  \\0  \\0  \\0 006   Z   A   M   B   I   A 377 377
0000160 377 377  \\0 003  \\0  \\0  \\0 002   Z   W  \\0  \\0  \\0  \\b   Z   I
0000200   M   B   A   B   W   E 377 377 377 377 377 377
.sp
.fi
.SH "COMPATIBILITY 兼容性"
.PP
 在 SQL 标准里没有 COPY 语句。
.PP
 7.3 以前的应用使用下面的语法，现在仍然支持：
.sp
.nf
COPY [ BINARY ] \fItablename\fR [ WITH OIDS ]
    FROM { '\fIfilename\fR' | STDIN }
    [ [USING] DELIMITERS '\fIdelimiter\fR' ]
    [ WITH NULL AS '\fInull string\fR' ]
COPY [ BINARY ] \fItablename\fR [ WITH OIDS ]
    TO { '\fIfilename\fR' | STDOUT }
    [ [USING] DELIMITERS '\fIdelimiter\fR' ]
    [ WITH NULL AS '\fInull string\fR' ]
.sp
.fi
.SH "译者"
.B Postgresql 中文网站
.B 何伟平 