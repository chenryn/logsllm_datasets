“approved” version of a component was used, and is necessary to identify whether the 
component has been altered in unauthorized fashion. A hash is a key foundation for using SBOM 
to have trust in the software supply chain. 
There are some situations when a hash may not be possible, or convey relatively little value. If 
component information was obtained from a tool that did not have direct access to the underlying 
component (e.g. a binary analysis tool), then the component author may not be able to credibly 
determine the exact bits used, and so be unable to generate a hash. 
There are benefits of added assurance that come with a hash, but the diversity of the potential 
targets makes implementation somewhat complex. A file is straightforward, but an executable 
will have some differences compared to source packages and different hash algorithms will, of 
course, produce different values. A number of resolutions to this challenge exist, including 
providing enough detail for the consumer to replicate the hash from the original, or multiple 
hashes for the small number of potential implementations.  
Organizations can request hashes for SBOMs today, especially those focused on high assurance 
use cases. It is recommended that they specify further details about how the hash should be 
generated. Further defining and refining best practices and specifications for hash generation and 
consumption should be a priority for the SBOM community. 
Lifecycle Phase. The data about software components can be collected at different stages in the 
software lifecycle, including from the software source, at build time, or after build through a 
binary analysis tool. Due to unique features of each of these stages, the SBOM may have some 
differences depending on when and where the data was created. For example, a compiler may 
pull in a slightly different version of a component than what was expected from the source. For 
this reason, it would be helpful to have some means of easily conveying where, when, and how 
the SBOM data was recorded. As noted in the Future of SBOM section below, this may 
ultimately allow for the documentation of more supply chain data. In the short run, simply noting 
Department of Commerce 
The Minimum Elements for an SBOM 
15 
how this data was captured, (e.g. “source,” “build,” or “post-build”) will be helpful for 
consumption and data management. 
Other Component Relationships. The minimum elements of SBOM are connected through a 
single type of relationship: dependency. That is, X is included in Y. This relationship is implied 
in the SBOM graph structure. Other types of dependency relationships can be captured, and have 
been implemented in some SBOM standards. One approach that can be captured today beyond 
direct dependencies is “derivation” or “descendancy”. This can indicate that a component is 
similar to some other known component, but that some changes have been made. It can be useful 
to track for its shared origins and content. Further suggestions on other types of dependencies are 
explored below. 
License Information. License management was an early use case for SBOM, helping 
organizations with large and complex software portfolios track the licenses and terms of their 
diverse software components, especially for open source software. SBOMs can convey data 
about the licenses for each component. This data can also allow the user or purchaser to know if 
the software can be used as a component of another application without creating legal risk.16  
Cloud-based Software and Software-as-a-Service 
Many modern software applications are provided as a service.17 This affords both distinctions 
and unique challenges with respect to SBOM data. Since the software is not running on the 
customer’s infrastructure or under their control, the risk management roles are different. The user 
is not responsible for maintenance, nor can they control any environmental factors. The 
responsibilities for understanding and acting on vulnerability or risk information lies with the 
service provider. Moreover, modern web applications often have much faster release and update 
cycles, making direct provisioning of SBOM data less practical. 
At the same time, there are challenges to capturing the software supply chain risks in the cloud 
context. The service provider must not only track metadata from the software supply chain of the 
software they are responsible for producing, but in the infrastructure stack that supports the 
application, whether under the direct control of the provider or from some external service 
provider. Many applications also take advantage of third-party services, sending data and 
requests to other organizations through application programming interfaces. Capturing 
meaningful metadata about the full application stack and third-party services is ongoing work, 
but not yet standardized or sufficiently mature for cross-organization implementation. 
16 Both CycloneDX and SPDX support the expression of licenses in several ways, including a license ID on the 
SPDX license list, or using SPDX license expressions. See SPDX License List, SPDX https://spdx.org/licenses/ 
(May 20, 2021). SWID tags were designed, in part, to convey information around commercial licenses. See 
Guidelines for the Creation of Interoperable Software Identification (SWID) Tags, supra note 14, at page 1. 
17 Peter Mell & Timothy Grace, Nat’l Inst. of Standards and Tech., Special Pub. 800-145, The NIST Definition of 
Cloud Computing 2 (2011). 
Department of Commerce 
The Minimum Elements for an SBOM 
16 
The NIST definition of “EO-critical software” applies to cloud-based software, but NIST 
recommends that the initial implementation phase focus on “on-premise software.”18 A similar 
approach is valuable for SBOM. 
In the short run, it is recommended that cloud service providers assert that they have an internal 
SBOM. That SBOM must be maintained with the rough functional equivalents of the minimum 
elements above, although the exact format and architecture may vary based on a provider’s 
internal system. The organization must also have the capability to act on this information and 
have a process to do so in a timely fashion. Over time, best practices will emerge to integrate 
SBOM data into third party risk management and supply chain risk management tools and 
processes. One use case that might be relevant for government agencies is forensic SBOM 
analysis: whether the cloud provider can determine whether or not a particular component was 
part of the deployed system at some time in the past.  
SBOM Integrity and Authenticity 
An SBOM consumer may be concerned about verifying the source of the SBOM data and 
confirming that it was not altered. In the software world, integrity and authenticity are most often 
supported through signatures and public key infrastructure. As SBOM practices are 
implemented, some existing measures for integrity and authenticity of both software and 
metadata can be leveraged. Some of the SBOM data formats described above can explicitly 
support these security measures today, while ongoing open source work is tackling the priority of 
signing metadata from development environments. Similarly, existing software signing 
infrastructure can be leveraged for tools and management of cryptographic materials, including 
public key infrastructure.  
Those supplying and requesting SBOMs are encouraged to explore options to both sign SBOMs 
and verify tamper-detection. Such a mechanism should allow the signing of each component of a 
given piece of software and allow the user to determine whether the signature is legitimate. 
Integrity and authenticity are a priority for many government agencies, especially in the national 
security domain. Some users of SBOM data may insist on requiring digital signatures for 
SBOMs today.  
Vulnerabilities and SBOM 
The primary security use case for SBOM today is to identify known vulnerabilities and risks in 
the software supply chain. Some developers may choose to store vulnerability data inside the 
SBOM, and multiple SBOM data formats support this. There is clear value for the developer in 
this approach. However, SBOM data is primarily static. That is, it reflects the properties of the 
18 Critical Software – Definition & Explanatory Material, NIST – Info. Tech. Lab’y (Jun. 25, 2021), 
https://www.nist.gov/itl/executive-order-improving-nations-cybersecurity/critical-software-definition-explanatory. 
Department of Commerce 
The Minimum Elements for an SBOM 
17 
specific built software at a point in time. Vulnerability data, meanwhile, is dynamic and evolves 
over time. Software that was not previously deemed vulnerable may “become” vulnerable as new 
bugs are discovered.  
Vulnerability data in the SBOM cannot be assumed to be complete and up-to-date, unless very 
specific conditions and processes are in place. This is unlikely across organizational boundaries. 
SBOM data will most likely have to ultimately be linked to vulnerability data sources. (This does 
not, however, limit the value of providing vulnerability, software weaknesses, and risk 
information to the consumer of the software). 
It is recommended that vulnerability data be tracked in separate data structures from the SBOM. 
Operations should focus on mapping and linking between the two types of data as each evolve 
and the technologies mature. If vulnerability data is shared across organizations, both the 
vulnerability data and the SBOMs can use similar models for distribution, access control, and 
ingestion. 
Vulnerability and Exploitability in Dependencies 
While software vulnerabilities are a key component of understanding risk, not all vulnerabilities 
put users and organizations at risk. This is especially true when dealing with transitive 
dependencies. Not all vulnerabilities in components create risks in the software that depends on 
them. Some vendor data suggests that a relatively small percentage of vulnerable components 
have a security impact in the environment where that software is deployed. In the SBOM 
context, focusing on upstream vulnerable components that have been deemed not to have an 
impact on the downstream software will waste time and resources, without offering immediate 
security benefits 
Addressing this challenge requires two steps. First, the supplier must make some reliable 
determination that a vulnerability does not affect a specific piece of software. This could be for a 
range of reasons: the compiler might remove the affected code from the component, the 
vulnerability may not be reachable in the execution path, in-line protections exist, or a host of 
other reasons. These determinations are ideally already made today by product security incident 
response teams (PSIRTs) who track internal dependencies and risks. 
The second step requires communication downstream to the next user of this SBOM data, 
asserting that the vulnerability does not put the organization at risk. This is straightforward, 
linking of a piece of software (the vulnerability in question) and the status of that vulnerability. 
The community refers to this as a “Vulnerability Exploitability eXchange,” or VEX. The core of 
VEX is the communication of whether or not a given piece software is “affected” by a given 
vulnerability. In this case, if no action is deemed necessary, then the status is “not affected.” 
VEX is being implemented today as a profile in the Common Security Advisory Framework,19 
19 OASIS Common Security Advisory Framework, http://oasis-open.github.io/csaf-documentation/ (last visited July 
6, 2021). 
Department of Commerce 
The Minimum Elements for an SBOM 
18 
which enables machine-readable information about whether software is affected or not affected 
by a vulnerability and can link to specific SBOM data. Other implementations are possible. It is 
recommended that tools that analyze SBOM data for the customer build in the capability to 
automatically incorporate VEX data.  
Legacy Software and Binary Analysis  
From an efficiency and utility perspective, SBOM data should be provided by the supplier. 
However, that is not always possible, nor the best option. In some cases, the source may not even 
be obtainable, with only the object code available for SBOM generation. Software that is not 
maintained is at greatest risk of being exploitable. Older software is at a greater risk of not being 
maintained. Legacy software’s older code base, and its frequent use in important parts of critical 
infrastructure, often makes transparency more important, especially for assessing risk from 
known vulnerabilities. In these cases, binary analysis tools can be used to better understand the 
components and dependencies in the systems in question. Binary analysis can also be used to 
validate SBOM contents, or help understand gaps in the SBOM data. 
Nonetheless, there is a key difference in how SBOMs are generated from a source repository, at 
the point of the building of the software, and for already-built software. While there are many 
unique circumstances, those requesting SBOM data should try to obtain it from the instance of 
the build since the instance of the build captures the details of the software as built, including 
reflecting any changes made by the compiler or other tools.  
Flexibility vs Uniformity in Implementation 
In many areas of security that cover a diverse range of software and contexts, a fundamental 
tension exists between the needs for flexibility and uniformity. This is not unique to SBOM. The 
sheer scope and scale of the software ecosystem leads to a host of unique considerations. This 
not only includes key distinctions between the uses of software (e.g., traditional enterprise 
software vs. embedded systems vs. containerized software), but also the unique features of 
different languages and tools. At the same time, there is a clear need for some convergence and 
uniformity. Any organization would incur non-trivial costs to handle a wide range of SBOM 
implementations that are not easily compatible. The Federal Government and its agencies are no 
exception, and moving toward the benefits of the SBOM use cases described above requires 
some predictability and harmonization.  
Successful implementation of SBOMs across the ecosystem will require both broad rules and 
policies, as well as specific areas of flexibility that are explicitly acknowledged. For the U.S. 
Government, the selection of these areas should reflect feedback from the community and 
agency stakeholders. Specific areas include legacy technology and higher assurance software, 
where active and ongoing threats may require more detailed supply chain information and 
stricter requirements.  
Ultimately, all requirements built on the minimum elements should draw from two key concepts. 
First, all security, especially SBOM, is a process and not a single goal. Second, the fundamental 
Department of Commerce 
The Minimum Elements for an SBOM 
19 
principle behind SBOM is the power of transparency, and any rules or guidance should focus on 
enabling the use cases described in this document and elsewhere. 
VI. Future SBOM Work  
As this document has tried to emphasize, SBOM is an emerging technology and practice. 
Organizations are implementing SBOM today, but there is much more to do. The suggestions 
below are not intended to constrain future work or fully enumerate the potential for SBOM. 
Instead, they are highlights from a large and dedicated community from industry and government 
experts.  
Most notably, it is important to stress that SBOM will not solve all security or supply chain 
attacks. Several recent high profile attacks in the supply chain did not target software 
components, but the tools and systems used to manage the software development and build 
process. Defenses against this type of threat are beginning to be discussed and even deployed in 
certain corners of the ecosystem.  
The foundation for a more complete approach to securing the software supply chain is to 
securely capture details from across the software lifecycle, with cryptographic assurance. The 
minimum elements of SBOM starts this process, but there is more to do. Simply capturing more 
metadata is helpful, but effectively using this data requires automation, and automation requires 
the potential for both automated consumption and policy enforcement. This will require not just 
machine readability, but also semantic interpretation, which in turn, will require further work on 
data specifications and standardization.  
Some of this data will naturally fit into the SBOM approach. This includes data about the 
pedigree and provenance of individual components, tracking the respective source of 
components, and their chain of custody across the software lifecycle. Other types of data, 
including some of the other secure development and supply chain security steps called for in EO 
14028, may relate to software development, but might be better tracked separately and correlated 
with SBOMs.  
The unique nature of modern application development and cloud-native architectures deserves 
further consideration for software transparency as well. Some modern software execution 
involves dynamic dependencies, calls to third-party services, and other dependencies not directly 
included in the software build. Inclusion of these dependencies ensures software is operated as 
intended and that vulnerabilities are not introduced through misuse. Further work is needed to 
fully characterize this data and assist in automated interpretation and use.  
Department of Commerce 
The Minimum Elements for an SBOM 
20 
It is worth noting that several efforts to this end are under development today, and several more 
have been tried in the past, to varying degrees of success and longevity. As noted in the Scope 
section above, modular architecture can best support diverse innovation and adaptability.  
Many of the issues discussed above will need further refinement, including software identity and 
SBOM distribution. Software identity will remain a hard problem, especially across different 
ecosystems. While a single, widely-used namespace might appear ideal, obstacles such as 
scaling, diversity, and the evolving landscape of suppliers make this unlikely. A diversity of 
versioning methods and systems also inhibits scalable automation for SBOMs and presents a 
number of related security data issues. Further coordination work can help each supplier identify 