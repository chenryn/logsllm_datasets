When using Bazel 0.26.1, GCC 7.4, CUDA 10.1 Update 2, and the latest version of TensorFlow from Git, I encountered the following error during the Bazel build process:

```plaintext
ERROR: /home/mh.naderan/.cache/bazel/_bazel_mh.naderan/dacf7a124fc721f30ac789c201b3b139/external/llvm/BUILD.bazel:201:1: C++ compilation of rule '@llvm//:llvm-tblgen' failed (Exit 1)
In file included from external/llvm/include/llvm/TableGen/Record.h:27:0,
                 from external/llvm/utils/TableGen/SubtargetFeatureInfo.h:13,
                 from external/llvm/utils/TableGen/SubtargetFeatureInfo.cpp:9:
external/llvm/include/llvm/Support/TrailingObjects.h: In static member function 'static void llvm::TrailingObjects::verifyTrailingObjectsAssertions()':
external/llvm/include/llvm/Support/TrailingObjects.h:252:24: error: 'is_final' is not a member of 'std'
     static_assert(std::is_final(), "BaseTy must be final.");
                        ^~~~~~~~
external/llvm/include/llvm/Support/TrailingObjects.h:252:24: note: suggested alternative: 'is_heap'
     static_assert(std::is_final(), "BaseTy must be final.");
                        ^~~~~~~~
                        is_heap
external/llvm/include/llvm/Support/TrailingObjects.h:252:39: error: expected primary-expression before '>' token
     static_assert(std::is_final(), "BaseTy must be final.");
                                       ^
external/llvm/include/llvm/Support/TrailingObjects.h:252:41: error: expected primary-expression before ')' token
     static_assert(std::is_final(), "BaseTy must be final.");
                                             ^
Target //tensorflow/tools/pip_package:build_pip_package failed to build
Use --verbose_failures to see the command lines of failed build steps.
INFO: Elapsed time: 442.171s, Critical Path: 25.05s
INFO: 1254 processes: 1254 local.
FAILED: Build did NOT complete successfully
```

### Summary
- **Bazel Version:** 0.26.1
- **GCC Version:** 7.4
- **CUDA Version:** 10.1 Update 2
- **TensorFlow Source:** Latest Git clone

### Error Details
The build process fails due to a C++ compilation error in the `@llvm//:llvm-tblgen` rule. Specifically, the error occurs in the `TrailingObjects.h` header file, where the `std::is_final` function is not recognized. The compiler suggests `is_heap` as an alternative, but this is incorrect. The actual issue is that `std::is_final` is being used incorrectly or is not available in the current environment.

### Suggested Actions
1. **Check Compiler Compatibility:** Ensure that your GCC version (7.4) supports `std::is_final`. This feature is available in C++11 and later. Verify that your compiler is configured to use at least C++11.
2. **Update Dependencies:** Consider updating Bazel, LLVM, and other dependencies to their latest versions, as they may have fixed this issue.
3. **Patch the Code:** If updating is not an option, you can manually patch the `TrailingObjects.h` file to use a different method to ensure that the base type is final.

### Additional Information
- **Elapsed Time:** 442.171 seconds
- **Critical Path:** 25.05 seconds
- **Processes:** 1254 (all local)

If you need more detailed information about the failed build steps, use the `--verbose_failures` flag with the Bazel command.