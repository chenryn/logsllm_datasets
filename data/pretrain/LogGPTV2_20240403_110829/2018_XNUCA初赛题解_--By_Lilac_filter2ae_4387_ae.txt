    0x5a: movs [3], [2]
    0x5d: rshift [1], 8
    0x60: mov [0], [1]
    0x63: add [0], [2]
    0x66: push 0x5fbcbdbd
    0x6b: movs [1], [3]
    0x6e: sub [0], [1]
    0x71: pop
    0x72: or [4], [0]
    0x75: exit
没有循环，逻辑很清晰，注意movs的源操作数是栈的偏移。栈上的前三值为输入的三个值。  
根据分析结果用claripy直接解一阶逻辑如下
    import claripy
    solver = claripy.Solver()
    num1, num2, num3 = claripy.BVS("num1", 32), claripy.BVS("num2", 32), claripy.BVS("num3", 32)
    d4 = (((num1 >> 4) * 21) - num3 - 0x1d7ecc6b) & 0xffffffff
    solver.add(d4 == 0)
    d4 = ((num3 >> 8) * 3 + num2 - 0x6079797c) & 0xffffffff
    solver.add(d4 == 0)
    d4 = ((num1 >> 8) + num2 - 0x5fbcbdbd) & 0xffffffff
    solver.add(d4 == 0)
    solver.add((num1 & 0xff) == 94)
    solver.add((num2 & 0xFF0000) == 0x5E0000)
    solver.add((num3 & 0xff) == 94)
    res = solver.batch_eval([num1, num2, num3], 2)[0]
    print res
    print " X-NUCA{%x%x%x}" % (res[0], res[1], res[2])%
得到flag`X-NUCA{5e5f5e5e5f5e5e5f5e5e5f5e}`
### Strange Interpreter
很容易看出是用ollvm混淆后的代码，用腾讯的deflat.py进行反混淆可以看出大致的逻辑，程序中有一个很大的代码块，不想分析，直接上angr：
    import angr
    import logging
    logging.getLogger('angr').setLevel('INFO')
    proj = angr.Project("./StrangeInterpreter.recovered")
    state = proj.factory.entry_state()
    state.posix.fd[0].size = 32
    simgr = proj.factory.simgr(state)
    simgr.explore(find=0x412400, avoid=[0x412427, 0x4123B3])
    print(simgr.found[0].posix.dumps(0))
得到结果`X-NUCA{5e775e5e775e5e775e5e775e}`
## crypto
### Warm Up
we found that `n0 == n3`, with different e,and coprime, so `共模攻击`:
    In [95]: gcd, s, t = gmpy2.gcdext(e0, e3)
        ...: if s  The 26 letters a, b, c, ..., y, z correspond to the integers 0, 1, 2, ...,
> 25  
>  len(key_a) = m  
>  len(key_k) = n  
>  c[i] = (p[i] * key_a[i % m] + key_k[i % n]) % 26  
>  p is plain text, only lowercase letters are refered to.  
>  c is encrypted text  
>  I have appended the flag at the end of plain text, the format of which is