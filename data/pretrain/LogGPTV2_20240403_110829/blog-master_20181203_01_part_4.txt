#------------------------------------------------------------------------------      
# Add settings for extensions here      
```      
### 小结    
1、固定参数    
```    
listen_addresses='*'  
superuser_reserved_connections=100  
tcp_keepalives_idle=45  
tcp_keepalives_interval=10  
tcp_keepalives_count=10  
vacuum_cost_delay=0  
vacuum_cost_limit=10000  
bgwriter_delay=10ms  
bgwriter_lru_maxpages=1000  
bgwriter_lru_multiplier=10.0  
effective_io_concurrency=0  
max_worker_processes=256  
old_snapshot_threshold = -1  
wal_level = replica  
wal_compression = on  
wal_buffers=16MB  
wal_writer_delay=10ms  
checkpoint_timeout = 25min  
checkpoint_completion_target = 0.4  
max_wal_senders = 64  
max_replication_slots = 56  
max_logical_replication_workers = 56  
hot_standby = on  
max_standby_archive_delay = 300s  
max_standby_streaming_delay = 300s  
wal_receiver_status_interval = 1s  
hot_standby_feedback = off  
wal_receiver_timeout = 30s  
random_page_cost=1.1  
logging_collector=on  
log_truncate_on_rotation=on  
log_min_duration_statement=5s  
log_checkpoints=on  
log_lock_waits=on  
log_statement='ddl'  
log_temp_files=128MB  
track_io_timing=on  
track_functions=pl  
autovacuum = on  
log_autovacuum_min_duration=0  
autovacuum_analyze_scale_factor = 0.05  
autovacuum_freeze_max_age = 1200000000  
autovacuum_multixact_freeze_max_age = 1400000000  
autovacuum_vacuum_cost_delay=0  
statement_timeout = 0  
lock_timeout = 0  
idle_in_transaction_session_timeout = '1h'  
vacuum_freeze_table_age = 200000000  
vacuum_multixact_freeze_table_age = 200000000  
deadlock_timeout = 1s  
auth_delay.milliseconds=3s  
enable_partitionwise_join = on      
enable_partitionwise_aggregate = on  
pg_stat_statements.max=5000  
pg_stat_statements.save=off  
pg_stat_statements.track=top  
pg_stat_statements.track_utility=off  
track_activity_query_size = 1024  
unix_socket_directories = '.'  
unix_socket_permissions = 0700  
jit = off                                  # allow JIT compilation      
jit_provider = 'llvmjit'                   # JIT implementation to use     
log_timezone='UTC'  
huge_pages=try
log_error_verbosity=verbose     
log_rotation_age=1h     
log_rotation_size = 100MB     
log_filename = 'postgresql-%H.log'  
autovacuum_vacuum_scale_factor = 0.02     # 0.005~ 0.15  
log_destination = 'csvlog'       
data_sync_retry = off  
full_page_writes = on  
```    
2、环境参数    
```    
log_timezone = 'PRC'        
datestyle = 'iso, mdy'      
timezone = 'PRC'      
lc_messages = 'C'                           
lc_monetary = 'C'                           
lc_numeric = 'C'                            
lc_time = 'C'       
```    
3、动态参数    
```    
port = 1921                            # 监听端口                   
max_connections=            # 规格内存(GB)*1000*(1/4)/10   +   superuser_reserved_connections  
shared_buffers=             # IF use hugepage: 规格内存*(1/4)   ELSE: min(32GB, 规格内存*(1/4))    
max_prepared_transactions      # max_prepared_transactions=max_connections   
work_mem        # max(min(规格内存/4096, 64MB), 4MB)   
maintenance_work_mem          # min( 8G, (主机内存*1/8)/max_parallel_maintenance_workers )    
autovacuum_work_mem            # min( 8G, (规格内存*1/8)/autovacuum_max_workers )     
max_parallel_maintenance_workers     # min( max(2, CPU核数/2) , 16 )   
max_parallel_workers_per_gather      # min( max(2, CPU核数-4) , 24 )     
max_parallel_workers       # min(max(2, CPU核数-4) ,32)   
max_wal_size            # min(shared_buffers*2,   用户存储空间/10)    
min_wal_size             # min(shared_buffers/2  , 用户存储空间/10)  
max_sync_workers_per_subscription   # min ( 32 , max(2, CPU核数-4) )    
effective_cache_size          # 规格内存*0.75  
autovacuum_max_workers        # max(min( 8 , CPU核数/2 ) , 5)   
synchronous_commit = off      # 当高并发写事务遇到了WAL瓶颈时，优先考虑提高磁盘IOPS能力，如果需要立即提升性能可以使用异步提交，或开启分组提交
```    
根据实际情况开启归档   
```
archive_mode = on  
archive_timeout = '5min'       
archive_command='test ! -f /disk1/digoal/arch/%f && cp %p /disk1/digoal/arch/%f'
#  也可以先设置为如下，规划好归档目录后再设置。
# archive_command = '/bin/date'  # 开启归档，但是不COPY归档文件，    
```
根据实际情况设置预加载的SO库  
```
shared_preload_libraries='pg_stat_statements,auth_delay,auto_explain'  
```
根据实际情况，设置SSL链路  
```
ssl=on  
ssl_cert_file = 'server.crt'  
ssl_key_file = 'server.key'  
```
4、建议只允许用户修改如下配置，默认值以及允许用户修改的范围：     
```  
enable_partitionwise_join = on      # on, off  
enable_partitionwise_aggregate = on  # on, off  
jit = off     # on, off  
temp_file_limit= 规格内存大小                # -1,  16MB ~ 1024000MB      
wal_level=replica                 # replica , logical  
wal_keep_segments=0         #  0 ~ 1024000  
track_commit_timestamp=off        # off, on     
vacuum_defer_cleanup_age=0        #  0 ~ 5000000  
log_min_duration_statement=5s      #  -1 , 1s ~ 600s     
log_connections=off       # on, off  
log_disconnections=off   # on, off  
log_duration=off           # on, off  
log_statement='ddl'         # ddl, mod, all  
log_temp_files=128MB                     # 0, -1, 16MB ~ 1024MB  
default_transaction_deferrable=off          #  on, off     
statement_timeout = 0                           #  0,    3s ~ 3600s     
lock_timeout = 0                                    #  0,    3s ~ 600s     
idle_in_transaction_session_timeout = '1h'          #  0,    3s ~ 36000s     
extra_float_digits = 0              # -15~3, int     
old_snapshot_threshold=-1         # -1, 1min ~ 2880min  
autovacuum_vacuum_cost_delay = 0   # 0~50     
autovacuum_vacuum_cost_limit = 10000  # 5000 ~ 10000    
shared_buffers=min(32GB, 规格内存*(1/4))             # min(32GB, 规格内存*(1/4)) ,规格内存*(1/4)  
autovacuum_vacuum_scale_factor = 0.02    # 0.005~ 0.15  
如果加了LOG审计的采样插件，再加上对应参数，允许用户修改，以及允许用户可以修改的范围。  
https://www.pgxn.org/dist/pg_sampletolog/  
```  
### 配置例子       
64G内存，16核，HUGE PAGE=on，SSD机器     
```      
port = 1921                            # 监听端口                   
max_connections=1700            # 规格内存(GB)*1000*(1/4)/10   +   superuser_reserved_connections  
shared_buffers=16GB             # IF use hugepage: 规格内存*(1/4)   ELSE: min(32GB, 规格内存*(1/4))    
max_prepared_transactions=1700      # max_prepared_transactions=max_connections   
work_mem =16MB       # max(min(规格内存/4096, 64MB), 4MB)   
maintenance_work_mem = 1GB        # min( 8G, (主机内存*1/8)/max_parallel_maintenance_workers )     
autovacuum_work_mem  = 1GB          # min( 8G, (规格内存*1/8)/autovacuum_max_workers )     
max_parallel_maintenance_workers = 8   # min( max(2, CPU核数/2) , 16 )   
max_parallel_workers_per_gather = 12     # min( max(2, CPU核数-4) , 24 )     
max_parallel_workers =12      # min(max(2, CPU核数-4) ,32)   
max_wal_size = 32GB           # min(shared_buffers*2 ,   用户存储空间/10)    
min_wal_size  =8GB           # min(shared_buffers/2  , 用户存储空间/10)  
max_sync_workers_per_subscription = 12  # min ( 32 , max(2, CPU核数-4) )    
effective_cache_size  = 48GB        # 规格内存*0.75  
autovacuum_max_workers = 8       # max(min( 8 , CPU核数/2 ) , 5)   
```    
其他参数值请拷贝以上固定参数与环境参数内容。     
## pg_hba.conf 数据库防火墙配置模板      
```      
# TYPE  DATABASE        USER            ADDRESS                 METHOD      
# "local" is for Unix domain socket connections only      
local   all             all                                     trust      
# IPv4 local connections:      
host    all             all             127.0.0.1/32            trust      
# IPv6 local connections:      
host    all             all             ::1/128                 trust      
# Allow replication connections from localhost, by a user with the      
# replication privilege.      
local   replication     all                                     trust      
host    replication     all             127.0.0.1/32            trust      
host    replication     all             ::1/128                 trust      
# 禁止超级用户从远程连接      
host all postgres 0.0.0.0/0 reject      
# 应用连接配置：哪个用户，从哪里来，连接什么数据库。规则为使用何种认证方法，或拒绝？      
# TYPE  DATABASE        USER            ADDRESS                 METHOD      
# 如果不想挨个配置，可以使用如下配置，允许所有来源，通过任意用户访问任意数据库      
host all all 0.0.0.0/0 md5      
```      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")