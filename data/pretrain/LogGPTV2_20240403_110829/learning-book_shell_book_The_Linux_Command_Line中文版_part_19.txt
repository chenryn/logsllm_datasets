式目录列表。
表12-4:
正如我们所看到的，我们添加的许多代码的意思直觉上并不是明显的，所以添加注释到我们
的文件.bashrc中是一个好主意，可以帮助人们理解。使用编辑器，更改我们添加的代码，让它
们看起来像这样：
# Change umask to make directory sharing easier
unask 0002
# Ignore duplicates in command history and increase
# history size to 1000 lines
export HISTCONTROL=ignoredups
export HISTSIZE=1000
# Add some helpful aliases
alias l.='ls -d .* --color=auto'
alias 11=′1s -1 --color=auto*
啊，看起来好多了！当我们完成修改后，输入Ctrl-o来保存我们修改的.bashrc文件，输入
Ctrl-x 退出 nano °
为什么注释很重要？
不管什么时候你修改配置文件时，给你所做的更改加上注释都是一个好主意。的
确，明天你会记得你修改了的内容，但是六个月之后会怎样呢？帮自己一个忙，加
上一些注释吧。当你意识到这一点后，对你所做的修改做个日志是个不错的主意。
用其它的符号。大多数配置文件都有注释。把它们作为指南。
144
---
## Page 146
你会经常看到配置文件中的一些行被注释掉，以此防止它们被受影响的程序使
用。这样做是为了给读者在可能的配置选项方面一些建议，或者给出正确的配置语
法实例。例如，Ubuntu 8.04中的.bashrc文件包含这些行：
#some more ls aliases
#alias 11='1s -1
#alias la='ls -A'
#alias 1='1s -CF"
此技术程称为uncommenting（取消注释），这样你就会激活这些别名·相反地，如
果你在一行的开头加上“#”符号，你可以注销掉这一行，但会保留它所包含的信
息。
12.10激活我们的修改
我们对于文件.bashrc的修改不会生效，直到我们关闭终端会话，再重新启动一个新的会话，因
为.bashrc文件只是在刚开始启动终端会话时读取。然而，我们可以强迫bash重新读取修改过
的.bashrc文件，使用下面的命令：
[ne@linuxbox -]$ source .bashrc
运行上面命令之后，我们就应该能够看到所做修改的效果了。试试其中一个新的别名：
[ne@linuxbox -]s 11
12.11总结
在这一章中，我们学到了用文本编辑器来编辑配置文件的基本技巧。随着学习的继续，当我们
浏览命令的手册页时，可以记录下该命令所支持的环境变量。这样或许我们能够收获一到两个
145
---
## Page 147
特别好用的宝贝命令。在随后的章节里面，我们将会学习shell函数，一个很强大的特性，你可
以把它包含在bash启动文件里面，以此来添加你自定制的命令宝库。
12.12拓展阅读
bash手册页的INVOCATION部分非常详细地讨论了bash启动文件。
146
---
## Page 148
13
”vi简介
有一个古老的笑话，说是一个在纽约的游客向行人打听这座城市中著名古典音乐场馆的方向：
游客：请问一下，我怎样去卡内基音乐大厅？
行人：练习，练习，练习！
学习Linux命令行，就像要成为一名造诣很深的钢琴家一样，它不是我们一下午就能学会
的技能。这需要经历几年的勤苦练习。在这一章中，我们将介绍vi（发音“veeeye”）文本编辑
器，它是Unix传统中核心程序之一。vi因它难用的用户界面而有点声名狼籍，但是当我们看
到一位大师坐在钢琴前开始演奏时，我们的确成了伟大艺术的见证人。虽然我们在这里不能成
为vi大师，但是当我们学完这一章后，我们会知道怎样在vi中弹奏像“Chopsticks”那样的钢
琴小品°
13.1为什么我们应该学习vi
在现在这个图形化编辑器和易于使用的基于文本编辑器的时代，比如说nano，为什么我们还应
该学习vi呢？下面有三个充分的理由：
·vi很多系统都预装。如果我们的系统没有图形界面，比方说一台远端服务器或者是一个
X配置损坏了的本地系统，那么vi就成了我们的救星。虽然nano逐渐流行起来，但是
它还没有普及。POSIX，这套Unix系统中程序兼容的标准，就要求系统要预装vi。
·vi轻量级且执行快。对于许多任务来说，启动vi比起在菜单中找到一个图形化文本编辑
器，再等待其数倍兆字节的数据加载而言，要容易的多。另外，vi是为了加快输入速度
而设计的。我们将会看到，当一名熟练的vi用户在编辑文件时，他或她的手从不需要移
开键盘。
·我们不希望其他Linux和Unix用户把我们看作胆小鬼。
好吧，可能只有两个充分的理由。
147
---
## Page 149
13.2一点儿背景介绍
第一版vi是在1976由BillJoy写成的，当时他是加州大学伯克利分校的学生，后来他共同创
建了Sun微系统公司。vi这个名字来源于单词“visual”，因为它打算在带有可移动光标的视频
终端上编辑文本。在发明可视化编辑器之前，有一次只能操作一行文本的行编辑器。为了编辑
我们需要告诉行编辑器到一个特殊行并且说明做什么修改，比方说添加或删除文本。视赖终端
（而不是基于打印机的终端，像电传打印机）的出现，使可视化编辑成为可能。vi实际上整合了
一个强大的行编辑器一ex，所以我们在使用vi时能运行行编辑命令。
大多数Linux发行版不包含真正的vi：而是自带一款高级替代版本，叫做vim（它是“vi
improved”的简写）由BramMoolenaar开发的·vim相对于传统的Unixvi来说，取得了实
质性进步。通常，vim在Linux系统中是“vi”的符号链接（或别名）。在随后的讨论中，我们
将会假定我们有一个叫做“vi”的程序，但它其实是vim°
13.3启动和退出vi
要想启动vi，只要简单地输入以下命令：
[ne@linuxbox -]$ vi
一个像这样的屏幕应该出现：
ponoxduI FA - HIA
正如我们之前操作nano时，首先要学的是怎样退出vi。要退出vi，输入下面的命令（注意
冒号是命令的一部分）：
b:
shell提示符应该重新出现。如果由于某种原因，vi不能退出（通常因为我们对文件做了修
改，却没有保存文件）。通过给命令加上叹号，我们可以告诉vi我们真要退出vi。（注意感叹号
是命令的一部分）
148
---
## Page 150
b:
小贴示：如果你在vi中“迷失”了，试着按下Esc键两次来回到普通模式。
兼容模式
在上面的截屏中（来自于Ubuntu8.04）。我们看到一行文字“运行于Vi兼容模
式。”这意味着vim将以近似于vi的普通的模式运行，而不是以vim的高级的模式
运行。出于本章的教学目的，我们将使用vim和它的的高级模式。要这样使用vim，
可以通过如下方法：
用vim来代替vi。
如果命令生效.考虑在你的.bashre文件中添加aliasvi=vim”。
或者。使用以下命令在你的vim配置文件中添加一行：
echo “set nocp" >> ~ /.vimrc
不同Linux发行版自带的vim软件包各不相同。一些发行版预装了vim的最简
版，其只支持很有限的vim特性。在随后练习里，你可能发现你的vim缺失一些特
性。若是如此，请安装vim的完整版。
13.4编辑模式
再次启动vi，这次传递给vi一个不存在的文件名。这也是用vi创建新文件的方法
xoogJu1 s[xoqxnugou]
[ne@linuxbox -]$ vi foo.txt
如果一切正常，我们应该获得一个像这样的屏幕：
"foo.txt*[New File]
每行开头的波浪号（~"）表示那一行没有文本。这里我们有一个空文件。先别进行输入！
149
---
## Page 151
关于vi，第二重要的事是知晓vi是一个模式编辑器。（第一件事是如何退出vi）vi启动后
会直接进入命令模式。这种模式下，几乎每个按键都是一个命令，所以如果我们直接输入文本，
vi会发疯，弄得一团糟。
13.4.1插入模式
为了在文件中添加文本，我们需要先进入插入模式。按下“i”键进入插入模式。之后，我们应
当在屏幕底部看到如下的信息.如果vi运行在高级模式下（vi在兼容模式下不会显示这行信
息）：
-INSERT -
现在我们能输入一些文本了。试着输入这些文本：
The quickt brow fox junped over the lazy dog
若要退出插入模式返回命令模式，按下Esc按键。
13.4.2保存我们的工作
为了保存我们刚才对文件所做的修改，我们必须在命令模式下输入一个ex命令。通过按下“：
键，这很容易完成。按下管号键之后，一个冒号字符应该出现在屏幕的底部：
为了写入我们修改的文件，我们在冒号之后输入“w”字符，然后按下回车键：
文件将会写入到硬盘，而且我们会在屏幕底部看到一行确认信息，就像这样：
150
---
## Page 152
"foo.txt* [Nev] 1L, 46C written
小贴示：如果你阅读vim的文档，你会发现命令模式被（令人困惑地）叫做普通模式，ex
命令叫做命令模式。当心。
13.5
移动光标
当在vi命令模式下时，vi提供了大量的移动命令，其中一些与less阅读器的相同。这里列举
了一些：
按键
移动光标
lor 右箭头
向右移动一个字符
hor左箭头
向左移动一个字符
jor下箭头
向下移动一行
kor上箭头
向上移动一行
0（零按键）
移动到当前行的行首。
移动到当前行的第一个非空字符。
8
移动到当前行的末尾。
W
移动到下一个单词或标点符号的开头。
W
移动到下一个单词的开头，忽略标点符号。
b
移动到上一个单词或标点符号的开头。
8
移动到上一个单词的开头，忽略标点符号。
Ctrl-f or Page Down
向下翻一页
Ctrl-b or Page Up
向上翻一页
numberG
移动到第number行。例如，1G移动到文件的
第一行。
G
移动到文件末尾。
表13-1：光标移动按键
为什么h，j.k，和1按键被用来移动光标呢？因为在开发vi之初，并不是所有的视频终端
都有箭头按键，熟练的打字员可以使用组合键来移动光标，他们的手指从不需要移开键盘。
vi中的许多命令都可以在前面加上一个数字，比方说上面提到的“G”命令。在命令之前加
151
---
## Page 153
上一个数字。我们就可以指定命令执行的次数。例如，命令“5j”将光标下移5行。
13.6基本编辑
大多数编辑工作由一些基本的操作组成，比如说插入文本，删除文本和通过剪切和粘贴来移动
文本。vi，当然，有它独特方式来实现所有的操作。vi也提供了撤销功能，但有些限制。如果
我们按下“u”按键，当在命令模式下，vi将会撤销你所做的最后一次修改。当我们试着执行一
些基本的编辑命令时，这会很方便。
13.6.1追加文本
vi有几种不同进入插入模式的方法。我们已经使用了i命令来插入文本。
让我们再次进入到我们的foo.txt文件：
Bop zt oa zo pm xog unorq onb 
如果我们想要在这个句子的末尾添加一些文本，我们会发现1命令不能完成任务，因为我们
不能把光标移到行尾。vi提供了追加文本的命令，明智地命名为“a”。如果我们把光标移动到
行尾，输入"a"，光标就会越过行尾，同时vi会进入插入模式。这让我们能添加文本到行末：
The quick brown fox junped over the lazy dog. It was coo1.
记得按Esc键来退出插入模式。
因为我们几乎总是想要在行尾添加文本，所以vi提供了一个快捷键。光标将移动到行尾
同时vi进入输入模式。它是“A”命令。试着用一下它，向文件添加更多行。
首先，使用“0"（零）命令，将光标移动到行首。现在我们输入"A”，然后输入下面这些文本：
The quick brown fox junped over the lazy dog. It vas cool.
Line 2
Line 3
Line 4
Line 5
152
---
## Page 154
再一次，按下Esc键退出插入模式。
正如我们所看到的，“A”命令非常有用，因为它在进入到插入模式前，先将光标移到了行
尾。
13.6.2打开一行
我们插入文本的另一种方式是“打开（open）”一行。这会在两行之间插入一个空白行，并且进
入到插入模式。这种方式有两个变体：
命令
打开行
0
当前行的下方打开一行。
0
当前行的上方打开一行。
表13-2:文本行打开按键
我们可以演示一下：把光标移到“Line3”上，再按下小o按键。
The quick browm fox junped over the lazy dog. It vas cool.
Line 2
Line 3
line 4
1ine 5
在第三行之下打开了新的一行，并且进入插入模式。按下Esc，退出插入模式。按下u按
键，撤销我们的修改。
按下大O按键在光标之上打开新的一行：
The quick brown fox junped over the lazy dog. It vas cool.
Line 2
Line 3
Line 4
Line 5
按下Esc按键，退出插入模式，并且按下u按键，撤销我们的更改。
153
---
## Page 155
13.6.3删除文本
正如我们所愿，vi提供了各种删除文本到的方法，而且只需一或两个按键。首先，x按键会删
除光标位置的一个字符。可以在x命令之前带上一个数字，来指明要删除的字符个数。d按键
更通用一些。跟x命令一样，d命令之前可以带上一个数字，来指定要执行的删除次数。另外，
d命令之后总是带上一个移动命令。用来控制删除的范围。这里有些实例：
命令
删除的文本
X
当前字符
3x