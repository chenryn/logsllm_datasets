Charlie reﬂects RS to Alice, and completes the secure (mutual)
authentication procedure without knowing KL.
Charlie can also reﬂect RS back to Bob (master) while
impersonating Alice (slave) as described in Figure 7. This re-
Switch
Fig. 8: The CYW920819EVB-02 development board from
Cypress. The board includes a CYW20819 SoC (inside the
dashed white square region). The SoC implements Bluetooth
5.0, supports Secure Connections, and is managed over USB.
Switch
ﬂection attack uses the same logic of the master impersonation
reﬂection attack that we just described. What changes is the
ﬁrst step of the attack, where Charlie has to pretend to be
Alice (the slave) and he has to perform an extra role switch to
become the master before accepting the connection with Bob.
The Bluetooth standard mentions that “the usage of
BTADDM and BTADDS in the secure authentication procedure
(HS) prevents a simple reﬂection attack” [6, p. 1672]. Using
unique identiﬁers as part of a challenge response protocol is a
common reﬂection attack countermeasure. However, it is not
enough in this case because roles can be switched before and
after the responses are computed and sent.
The standard has a footnote in the speciﬁcation of the legacy
authentication procedure saying “The reﬂection attack actually
forms no threat because all service requests are dealt with
on a FIFO basis. When preemption is introduced, this attack
is potentially dangerous.” [6, p. 1671]. This is a reasonable
warning, but it should be extended to the secure authentication
procedure, and it does not prevent to use a priority queue
instead of a FIFO to manage services. Overall, we argue that
the standard should include our reﬂection attacks in the threat
model and explicitly disallow role switching during the secure
authentication procedure.
VI. IMPLEMENTATION
We implement the BIAS attacks presented in Sections IV-A
and Section IV-B using a CYW920819EVB-02 evaluation
board and a Linux laptop. In this section we describe the board,
and the relevant information about its Bluetooth ﬁrmware that
we reverse engineered. Then, we present our BIAS toolkit, that
is the ﬁrst toolkit that automates the impersonation of arbitrary
Bluetooth devices and the setup needed to conduct the BIAS
attacks. Finally, we explain how we use the BIAS toolkit to
implement master and slave impersonation attacks on Legacy
Secure Connections and Secure Connections.
A. CYW920819EVB-02 Bluetooth Development Board
To implement the BIAS attacks we use the CYW920819EVB-
02 development board [9] (in Figure 8) and a Linux laptop. The
board includes a CYW20819 SoC, that implements Bluetooth
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
555
5.0 and supports Secure Connections [8]. The CYW20819 main
core is an ARM Cortex M4 clocked at 96 MHz and using the
ARMv7E-M architecture. The board provides access via USB
to the HCI UART bus, used to interface a Bluetooth host (e.g.,
our laptop) with the board Bluetooth controller, and the HCI
peripheral bus used for logging and debugging. The board has
a JTAG interface that we use for hardware level debugging
with a J-Link EDU debug probe [28]. We program the board
cross-compiling the code from our laptop using the libraries,
drivers and tools provided by the ModusToolbox SKD [10].
The board stores the Bluetooth ﬁrmware in 1 MB of read-
only ROM, and the Bluetooth application in a 256 KB on-
chip ﬂash that is readable, writable and executable. The board
has a 176 KB on-chip RAM, and executing the application
from ﬂash allows to save RAM space with minimal memory
latency overhead. We write application code on our laptop,
cross compile it for the board, and load it via USB on the
board’s ﬂash memory. Loading the application code is referred
in the board’s documentation as “re-ﬂashing the ﬁrmware”,
but what is re-ﬂashed is the application code, as the Bluetooth
ﬁrmware cannot be re-ﬂashed.
B. Reverse Engineering the Board Bluetooth Firmware
The implementation of our BIAS attacks requires to modify
the board’s Bluetooth ﬁrmware as the ﬁrmware implements
authentication and secure session establishment procedures.
Unfortunately, the board SDK does not include the ﬁrmware
source code, and the capability to re-ﬂash a modiﬁed ﬁrmware.
However, we ﬁnd that the SDK contains the ﬁrmware debug-
ging symbols, and supports proprietary HCI commands to read
and write the board’s RAM [7]. We use the proprietary read
RAM command to dump the RAM content into a binary blob
at runtime. Then we ﬁnd a Makeﬁle containing the memory
layout information, and using such information we extract
several regions from the binary blob including ROM, RAM,
and patch RAM.
The ROM region contains the ﬁrmware code, the RAM
region contains the runtime memory, including the stack and
the heap, and the patch RAM contains a table of patches that
are applied after boot using a proprietary patching mechanism
from Cypress, known as “PatchRom”. PatchRom allows patch
the ﬁrmware without having to change the ROM by redirecting
code from ROM at runtime to patches in RAM. Patching slots
have to be used wisely as the board only has 16 slots.
To reverse engineer the board’s Bluetooth ﬁrmware, we load
the dumped ROM, the symbols, the RAM, and the patch RAM
regions into a Ghidra project [32]. Ghidra is an open source
disassembler and decompiler developed by the US National
Security Agency (NSA), compatible with ARM binaries. We
conﬁgure the Ghidra project to use the ARM Cortex M4
architecture in thumb mode and we perform a ﬁrst pass of
Ghidra automatic analysis. We spent a considerable amount
of time reverse engineering the ﬁrmware to uncover its main
components, data structures, and control ﬂow blocks. Those
information are essential to develop correct ﬁrmware patches
Fig. 9: Our BIAS Toolkit. The toolkit takes as inputs an
Impersonation File (IF) containing information about the
device to be impersonated and an Attack File (AF) that
contains information about the laptop and the board. The
toolkit, among others, produces bias.py that can be used
with InternalBlue [23] to setup our CYW920819EVB-02 to
conduct the BIAS attacks.
to implement the BIAS attacks. In the remaining we describe
the most relevant ﬁndings about the board Bluetooth ﬁrmware.
The ﬁrmware has a standard ARM Cortex M4 memory
layout and interrupt vector table, and the entry point is the
reset interrupt handler. The ﬁrmware boots using slimboot,
initialize the RAM and the peripherals, and then loads the OS
kernel. The OS is ThreadX, a proprietary real time operating
systems (RTOS) [21]. The ﬁrmware execution environment is
multi-threaded, and it is managed by a real-time and priority-
based scheduler.
The ﬁrmware implements the LMP protocol using an API
based on tasks. Whenever an LMP packet is received or has to
be sent, a speciﬁc task is created according to the type of LMP
packet. Each type of packet has a callback, and the callbacks
are stored in a table in RAM. A LMP dispatcher calls the
appropriate callback according to the type of LMP packet. HCI
packets are handled using the same logic.
Interrupts are used to communicate between the SoC main
ARM core and the peripheral devices. The ﬁrmware interfaces
with a security module peripheral to accelerate in hardware
the computations of standard security primitives, such as AES
and SHA-1. The ﬁrmware does not use address space layout
randomization, data execution prevention and stack canaries,
indeed we can perform arbitrary control ﬂow manipulations
on the ﬁrmware.
C. Our BIAS Toolkit
is the ﬁrst
After collecting enough information by reverse engineering
the board ﬁrmware, we developed the BIAS toolkit to automate
our BIAS attacks. To the best of our knowledge, the BIAS
toolkit
implementing Bluetooth impersonation
attacks. We plan to release the toolkit as open source at
https://github.com/francozappa/bias. In our experiments, pre-
sented in Section VII, we use our toolkit to successfully attack
31 Bluetooth device (28 unique Bluetooth chips).
Figure 9 presents an high level description of the BIAS
toolkit. The toolkit takes as inputs the Impersonation File (IF)
and the Attack File (AF). The Impersonation File contains
information about the device that we impersonate, such as
Bluetooth address, Bluetooth name, and Secure Connections
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
556
Feature
Description
Nexus 5
Pixel 2
Impersonation
Role Switch 1
Role Switch 2
Secure Connections
No Authentication
Link Key Mgmt
Logging
KNOB Attack
Impersonate Bluetooth address, name, version,
chipset, device class, and features.
Role switch before accepting a connection request
from a master.
Role switch at any point in time that is legal in the
speciﬁcation.
Enable either Legacy Secure Connections or Secure
Connections.
Ignore authentication requests and missing link
keys.
Read, write and delete link keys from the ﬁrmware.
Enable Link Manager (LM) logging on the board,
including LMP packets.
Downgrade the entropy of the Bluetooth session
keys as in [4].
TABLE I: BIAS toolkit main features. The BIAS toolkit allows
the attack device to impersonate a victim, perform arbitrary role
switches, disable Secure Connections, ignore authentication
requests, manage link keys, log LMP packets, and chain BIAS
and KNOB attacks.
support. The Attack File contains information about the attack
device such as the name of the HCI interface used by our
laptop, and the addresses of the functions that we want to
patch in the board Bluetooth ﬁrmware.
The toolkit, given IF and AF, produces a bias.py Python
script that can be used with InternalBlue [23]. InternalBlue is an
open source toolkit that provides a Python API to interact with
Cypress Bluetooth chips, including the CYW20819 used by
our board. Using a shell script and bias.py we transform our
attack device into the impersonated device, and we conﬁgure the
attack device to perform the BIAS attacks. The implementation
details of our attacks are presented in Section VI-D (Legacy
Secure Connections) and Section VI-E (Secure Connections).
The main features of the BIAS toolkit are summarized in
Table I. The Impersonation feature allows to modify the attack
device such that it impersonates the victim speciﬁed in IF.
The Role Switch features allow the attack device to perform
master and slave role switches in different scenarios, e.g.,
when starting secure connection establishment. The Secure
Connections feature enables or disables Secure Connections
for the attack device and is used in the Secure Connections
downgrade attack. The No Authentication feature allows the
attack device to ignore remote authentication requests and
missing link keys, and is used to exploit unilateral Legacy
Secure Connections authentication. The Link Key Mgmt feature
enables to read, write, and delete link keys from the attack
device. The Logging feature enables Link Manager logging
by sending a vendor speciﬁc HCI command to the board. The
KNOB attack feature allows to downgrade the entropy of the
session key as in [4], after completing a BIAS attack.
Our BIAS toolkit takes advantage of InternalBlue Python
API. We use sendHciCommand(opcode, args) to send
HCI commands from the laptop to the board, including the Cy-
press proprietary ones. With this capability we are able, among
Bluetooth Address
Bluetooth Name
Core speciﬁcation
Chip vendor
Chip subversion
Device class
Feature page 0
Feature page 1
Feature page 2
IO mask
OOB mask
AuthReq mask
Secure Connections
CC:FA:00:70:DC:B6
nex
4.1
Broadcom
24841
0c025a
bffecffedbff7b8f
0700000000000000
3008000000000000
01
00
03
False
40:4E:36:A8:BF:5F
pixel2
5.0
Qualcomm
702
0c025a
fffe8ffed83f5b87
0f00000000000000
4503000000000000
01
00
03
True
TABLE II: We use our BIAS toolkit to impersonate, among
others, a Nexus 5 and a Pixel 2. The Nexus 5 supports
Legacy Secure Connections, and the Pixel 2 supports Secure
Connections.
others, to change the Bluetooth address of the board. We write
and read the ﬁrmware RAM using writeMem(address,
value) and readMem(address, bytes). Those capa-
bilities allow to change, among others,
the board Blue-
tooth name and Secure Connections support and to write
our patches in RAM. InternalBlue internally uses pwntools,
and we use pwntools’s asm(code, vma) to create our
patches before writing them to the ﬁrmware RAM. We use
patchRom(address, asmbranch) to patch the board
ﬁrmware such that once the ﬁrmware execution reaches
address it executes asmbranch which in turn jumps to the
address of one of our patches in RAM. The ﬁrmware patching
capability allows, among others, to perform adversarial role
switches and unilateral legacy authentication.
D. BIAS Implementation for Legacy Secure Connections
The master and slave BIAS attacks on Legacy Secure
Connections take advantage of unilateral legacy authentication
and the adversarial role switch as described in Section IV-A.
To implement such attacks, our attack device needs the
following capabilities. The attack device has to impersonate a
Bluetooth device that supports Legacy Secure Connections,
has to switch role before accepting a connection from a
master, and has to ignore authentication requests from the
remote victim, if any, and perform the standard compliant
unilateral authentication procedure. We now describe how we
implement such capabilities on our attack device consisting of
a CYW920819EVB-02 board connected to a Linux laptop (as
in Figure 9).
In this section we use as a reference example the imperson-
ation of a Nexus 5 smartphone. The Nexus 5 runs Android
6.0.1, and includes a CYW4339 Bluetooth 4.1 SoC. Using
our BIAS toolkit, we select the Nexus 5 Impersonation File
(IF) from our database and we conﬁgure our attack device
to impersonate all the capabilities listed in the left column of
of Table II. As a result, a user discovering Bluetooth devices
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
557
cannot tell our attack device apart from our Nexus 5 as they
advertise the same capabilities with the same identiﬁers.
Then we use our toolkit to conﬁgure the adversarial role
switch and the unilateral authentication for the board, taking
advantage of the Attack File (AF) that we provide. The role
switch is conﬁgured by patching the board ﬁrmware. We hook
the function that handles remote connection requests and we
patch it such that our board always role switch from slave
to master before accepting a connection request. Unilateral
legacy authentication is enforced by two more patches to the
board ﬁrmware. The ﬁrst patch immediately starts the legacy
authentication procedure after a connection is established. The
second patch immediately starts the session key negotiation
procedure after the board authenticates the remote victim. As a
result, our attack device, while impersonating the Nexus 5, does
not have to authenticate during secure session establishment
regardless of its Bluetooth role.
RP = E1(KL, BTADDP , CV )
(1)
To validate the responses produced by the legacy authentication
procedure we implement the HL hash function introduced in
Section IV-A. Such hash function uses E1 to compute the
response (RP ) from the link key (KL), the Bluetooth address
of the prover (BTADDP ), and the challenge sent by the veriﬁer
(CV ) as in Equation 1. E1 internally uses the SAFER+ block
cipher and we implement it as well. To check the correctness
of our implementation we successfully test it against the test
vectors in the standard [6, p. 1620].