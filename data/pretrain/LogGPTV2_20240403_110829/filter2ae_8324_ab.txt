            }
            function __destruct(){
                $fp = fopen("D:\Program Files\PHPTutorial\WWW\zx\hello.php","w");
                fputs($fp,$this->target);
                fclose($fp);
            }
        }
        $a = $_GET['test'];
        $b = unserialize($a);
        echo "hello.php"."";
        include("./hello.php");
    ?>
魔法函数`__wakeup()`要比`__destruct()`先执行，所以我们之间传入  
`O:1:"A":1:{s:6:"target";s:18:"";}`  
时会被先执行的`__wakeup()`函数`$target`赋值覆盖为`wakeup!`，然后生成的`hello.php`里面的内容就是`wakeup!`
现在我们根据绕过方法：对象属性个数的值大于真实的属性个数时就会跳过`__wakeup()`的执行，对象个数原来是1我们将其改为2，也就是  
`O:2:"A":1:{s:6:"target";s:18:"";}`  
就能实现绕过
# 注入对象构造方法
## 当目标对象被private、protected修饰时反序列化漏洞的利用
上面说了`private`和`protected`返回长度和`public`不一样的原因，这里再写一下
    private属性序列化的时候格式是%00类名%00成员名
    protect属性序列化的时候格式是%00*%00成员名
`protected`情况下，代码如下
    test;
            }
        }
        $a = $_GET['test'];
        $b = unserialize($a);
    ?>
利用方式：  
先用如下代码输出利用的序列化串
得到`O:1:"A":1:{s:7:"*test";s:17:"hacked by ghtwf01";}`  
因为`protected`是`*`号两边都有`%00`，所以必须在`url`上面也加上，否则不会利用成功
`private`情况下，代码如下
利用代码这里省略吧，同上面，得到序列化后的字符串为`O:1:"A":1:{s:7:"Atest";s:17:"hacked by ghtwf01";`  
因为`private`是类名`A`两边都有`%00`所以同样在`url`上面体现
## 同名方法的利用
代码如下
    target = new B;
            }
            function __destruct(){
                $this->target->action();
            }
        }
        class B{
            function action(){
                echo "action B";
            }
        }
        class C{
            public $test;
            function action(){
                echo "action A";
                eval($this->test);
            }
        }
        unserialize($_GET['test']);
    ?>
这个例子中，`class B`和`class C`有一个同名方法`action`，我们可以构造目标对象，使得析构函数调用`class
C`的`action`方法，实现任意代码执行  
利用代码
    target = new C;
                $this->target->test = "phpinfo();";
            }
            function __destruct(){
                $this->target->action();
            }
        }
        class C{
            public $test;
            function action(){
                echo "action C";
                eval($this->test);
            }
        }
        echo serialize(new A);
    ?>
# session反序列化漏洞
## 什么是session
`session`英文翻译为"会话"，两个人聊天从开始到结束就构成了一个会话。`PHP`里的`session`主要是指客户端浏览器与服务端数据交换的对话，从浏览器打开到关闭，一个最简单的会话周期
## PHP session工作流程
会话的工作流程很简单，当开始一个会话时，`PHP`会尝试从请求中查找会话 `ID` （通常通过会话
`cookie`），如果发现请求的`Cookie`、`Get`、`Post`中不存在`session id`，`PHP`
就会自动调用`php_session_create_id`函数创建一个新的会话，并且在`http response`中通过`set-cookie`头部发送给客户端保存，例如登录如下网页`Cokkie、Get、Post`都不存在`session id`，于是就使用了`set-cookie`头
有时候浏览器用户设置会禁止 `cookie`，当在客户端`cookie`被禁用的情况下，`php`也可以自动将`session
id`添加到`url`参数中以及`form`的`hidden`字段中，但这需要将`php.ini`中的`session.use_trans_sid`设为开启，也可以在运行时调用`ini_set`来设置这个配置项
会话开始之后，`PHP` 就会将会话中的数据设置到 `$_SESSION` 变量中，如下述代码就是一个在 `$_SESSION` 变量中注册变量的例子：
代码的意思就是如果不存在`session`那么就创建一个`session`  
也可以用如下流程图表示
## php.ini配置
`php.ini`里面有如下六个相对重要的配置
    session.save_path=""      --设置session的存储位置
    session.save_handler=""   --设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数
    session.auto_start        --指定会话模块是否在请求开始时启动一个会话，默认值为 0，不启动
    session.serialize_handler --定义用来序列化/反序列化的处理器名字，默认使用php  
    session.upload_progress.enabled --启用上传进度跟踪，并填充$ _SESSION变量，默认启用
    session.upload_progress.cleanup --读取所有POST数据（即完成上传）后，立即清理进度信息，默认启用
如`phpstudy`下上述配置如下：
    session.save_path = "/tmp"      --所有session文件存储在/tmp目录下
    session.save_handler = files    --表明session是以文件的方式来进行存储的
    session.auto_start = 0          --表明默认不启动session
    session.serialize_handler = php --表明session的默认(反)序列化引擎使用的是php(反)序列化引擎
    session.upload_progress.enabled on --表明允许上传进度跟踪，并填充$ _SESSION变量
    session.upload_progress.cleanup on --表明所有POST数据（即完成上传）后，立即清理进度信息($ _SESSION变量)
## PHP session 的存储机制
上文中提到了 `PHP
session`的存储机制是由`session.serialize_handler`来定义引擎的，默认是以文件的方式存储，且存储的文件是由`sess_sessionid`来决定文件名的，当然这个文件名也不是不变的，都是`sess_sessionid`形式
打开看一下全是序列化后的内容
现在我们来看看`session.serialize_handler`，它定义的引擎有三种
| 处理器名称 | 存储格式 |  
| php | 键名 + 竖线 + 经过serialize()函数序列化处理的值 |  
| php_binary | 键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值|  
| php_serialize(php>5.5.4) | 经过serialize()函数序列化处理的数组 |
### php处理器
首先来看看`session.serialize_handler`等于`php`时候的序列化结果，代码如下
`session`的`sessionid`其实可以看到的，为`i38age8ok4bofpiuiku3h20fh0`
于是我们到`session`存储目录查看一下`session`文件内容
`session`为`$_SESSION['session']`的键名，`|`后为传入`GET`参数经过序列化后的值
### php_binary处理器
再来看看`session.serialize_handler`等于`php_binary`时候的序列化结果
为了更能直观的体现出格式的差别，因此这里设置了键值长度为 `35`，`35` 对应的 `ASCII` 码为`#`，所以最终的结果如下
`#`为键名长度对应的 `ASCII`
的值，`sessionsessionsessionsessionsessions`为键名，`s:7:"xianzhi";`为传入 `GET`
参数经过序列化后的值
### php_serialize 处理器
最后就是`session.serialize_handler`等于`php_serialize`时候的序列化结果，代码如下
结果如下
`a:1`表示`$_SESSION`数组中有 `1` 个元素，花括号里面的内容即为传入`GET`参数经过序列化后的值
## session的反序列化漏洞利用
`php`处理器和`php_serialize`处理器这两个处理器生成的序列化格式本身是没有问题的，但是如果这两个处理器混合起来用，就会造成危害。形成的原理就是在用`session.serialize_handler
= php_serialize`存储的字符可以引入 `|` , 再用`session.serialize_handler =
php`格式取出`$_SESSION`的值时， |会被当成键值对的分隔符，在特定的地方会造成反序列化漏洞。  
我们创建一个`session.php`，用于传输`session`值，里面代码如下
再创建一个`hello.php`，里面代码如下
    '.$this->name;
        }
      }
      $str = new XianZhi();
     ?>
这两个文件的作用很清晰，`session.php`文件的处理器是`php_serialize`，`hello.php`文件的处理器是`php`，`session.php`文件的作用是传入可控的
`session`值，`hello.php`文件的作用是在反序列化开始前输出`Who are you?`，反序列化结束的时候输出`name`值  
运行一下`hello.php`看一下效果
我们用如下代码来复现一下`session`的反序列化漏洞
    '.$this->name;
        }
      }