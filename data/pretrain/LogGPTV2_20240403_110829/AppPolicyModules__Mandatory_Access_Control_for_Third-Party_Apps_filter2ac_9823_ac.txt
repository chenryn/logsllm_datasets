AV’AVM2.dolphin_appM2system_filesystemfile.writeOK(Req3)ERR(Req2)file.writeM1ERR(Req1)Legend:type (source / target)class.permissionauthorizationnetdomainuntrusted_app domainOK(Req4)file.writeM3M3.dolphin_appM3.incognitofile.read,writefile.readM3.history_fileM4M4.dolphin_appfile.read,writefile.read,writeM4.dwnld_fileM4.pass_filefile.readin Figure 1. The module deﬁnes an authorization that mod-
iﬁes the behavior of the system policy because netdomain
should not have write access to ﬁles labeled as system ﬁle.
Thus M1 will not be installed due to the violation of Req1.
Req2 (A→S), No escalation: the app cannot specify a
policy that provides to its types more privileges than those
available to untrusted app.
New domains declared in an appPolicyModule must al-
ways operate within the boundaries deﬁned by the system
policy as acceptable for the execution of apps. When a new
application is installed, its domain has to be created “under”
the untrusted app domain, so the system policy can ﬂexibly
deﬁne the maximum allowed privileges for third-party apps.
More formally, all the avAuthorizations introduced by the
appPolicyModule M that have an avType t belonging to
the avTypes deﬁned by M as a source will be contained
in the set of avAuthorizations that have the system-deﬁned
untrusted app avType as source.
I.e., ∀ a(cid:48) ∈ (AV (cid:48) \ AV ) |
a(cid:48).source∈ M.newAvTypes ∧ a(cid:48).target(cid:54)∈ M.newAvTypes →
∃a ∈ AV |
(a.source = untrusted app ∧ a(cid:48).target = a.target∧
a(cid:48).class = a.class ∧ a(cid:48).action = a.action)
The constraint forces the avAuthzPolicy to assign to all
the types introduced by the appPolicyModule a set of au-
thorizations that corresponds to privileges available to the
untrusted app avType. Then, each privilege must have the
same class and action of a privilege already assigned to un-
trusted app.
Example 5
(Figure 1, M2). As highlighted by appPol-
icyModule M2 in Figure 1, appPolicyModules can only re-
quest a subset of the privileges granted to the untrusted app
domain. The APM M2 tries to give M2.dolphin app the
privilege of writing ﬁles labeled as system ﬁle, that is not
granted to the untrusted app domain. Thus M2 will not be
installed due to the violation of Req2.
Req3 (A→A), Flexible internal structure: apps may
provide many functionalities and use diﬀerent services (e.g.,
geolocalization, social networks). The appPolicyModule has
to provide the ﬂexibility of deﬁning multiple domains with
diﬀerent privileges so that the app, according to the func-
tionality in use, may switch to the one that represents the
“least privilege” domain needed to accomplish the job, in or-
der to limit potential vulnerabilities deriving from internal
ﬂaws.
Greater ﬂexibility derives from the possibility to freely
manage privileges for internal types over internal resources,
building a MAC model that remains completely under the
control of the app.
More formally, there can exist a pair of new avTypes t
and t(cid:48) introduced by M such that in AV (cid:48) \ AV t receives a
privilege that t(cid:48) does not have.
I.e., if ∃t∈ M.newAvTypes∧t(cid:48) ∈ M.newAvTypes∧
a ∈ AV (cid:48) ∧ a.source= t (cid:54)→
∃a(cid:48) ∈ AV (cid:48) | a(cid:48).source= t(cid:48) ∧ a.target= a(cid:48).target∧
a.class= a(cid:48).class∧a.action= a(cid:48).action
Example 6
(Figure 1, M3). Dolphin Browser provides
the anonymous surﬁng (incognito) mode, which allows the
user to surf the web without storing permanently the history
and the cookies, and in general aiming at leaving no trace in
persistent memory of the navigation session. In order to en-
hance its security and protect the user even from possible app
ﬂaws, the appPolicyModule could specify a switch of context
(i.e., it may change the SELinux domain associated with its
process) when the user enters the incognito mode. In Figure
1 the APM M3 speciﬁes that the domain M3.dolphin app
can read and write ﬁles labeled as M3.history ﬁle, while the
domain M3.incognito, used during anonymous surﬁng, drops
the privilege of writing the ﬁles, preventing the leakage of re-
sources that may leave a trace of the navigation session.
Req4 (S→A), Protection from external threats:
users of mobile devices may unconsciously install malware
apps from untrusted sources that, exploiting some security
vulnerabilities, could compromise the entire system or other
apps (e.g., steal user information). To mitigate the risk, an
appPolicyModule should provide a common way to isolate
the app’s critical resources. The use of MAC support of-
fers protection even against threats coming from the system
itself, like a malicious app that abuses root privileges.
The app can protect its resources from other apps, specify-
ing its own types and deﬁning in a ﬂexible way which system
components may or may not access the domains introduced
by the APM. This requirement depends on the ability of the
MAC model to let app types be protected against system-
level elements, an aspect that SELinux supports and not
available in classical multi-level systems, which assume a
rigid hierarchical structure. Indeed, in the SELinux policy
model every privilege has to be explicitly authorized and
new avTypes are not accessible by system avTypes unless a
dedicated rule is introduced in the appPolicyModule.
More formally, the appPolicyModule M can introduce an
avAuthorization that gives to an avType introduced by M
a privilege that is not necessarily available to a type in the
system policy.
I.e., if ∃ t ∈ M.newAvTypes∧a ∈ AV (cid:48)∧ a.source= t (cid:54)→
∃a(cid:48) ∈ AV |a(cid:48).source(cid:54)∈ M.newAvTypes∧a.target = a(cid:48).target∧
a.class= a(cid:48).class∧a.action= a(cid:48).action.
Example 7
(Figure 1, M4). The Dolphin browser can
grant to the system type the privilege to read the dwnld ﬁle
ﬁles, used to label the downloaded ﬁles, while it prevents the
access to the pass ﬁle ﬁles used to label the password ﬁle.
There are other environments where SELinux is used,
like the Redhat Fedora distribution of Linux, that already
supports SELinux modules, but the requirements presented
above do not apply to them. The reason is that the trust as-
sumptions are diﬀerent. The modules used in Redhat Fedora
permit to structure the security policy, they are trusted and
free to revise in arbitrary ways the system policy. Modules
in Android are not trusted and it is mandatory that they
cannot be used to introduce vulnerabilities in the system.
Additional requirements, not associated with a formal treat-
ment, have also to be considered.
• Not all the developers have the knowledge or are inter-
ested to secure their apps with SELinux, so in order
not to impede the development they have to experi-
ence the same development and installation process,
with no impact on their activities. This requirement
will be considered in Section 7.
• In order to facilitate the deployment, the solution has
to be compatible with the implementation of SELinux
oﬀered by SEAndroid. This is considered in Section 8.
6. POLICY MODULE LANGUAGE
We now present the concrete structure of appPolicyMod-
ules. We introduce the subset of the SELinux statements
used in their deﬁnition and describe the additional state-
ments that will be automatically added to the appPolicy-
Module by a pre-processor. A critical design requirement is
the compatibility with the SELinux implementation avail-
able today, which facilitates the adoption of the proposed
approach.
Each module presents a head and a body (see right side
Figure 2). The head describes all the identiﬁers that the
appPolicyModule reuses from the system policy. This is rep-
resented by the require statement. In case a name appears
that is not known to the system, the compilation fails.
The body of the appPolicyModule can make use of the
following SELinux statements: typebounds, type, attribute,
typeattribute, allow, neverallow, and typetransition. These
statements are the only ones that can be used in the deﬁ-
nition of the appPolicyModule. The syntax for these state-
ments is succinctly presented in Table 1.
The typebounds statement permits to specify that the col-
lection of privileges of the bounded avType has to fall within
the boundaries of another avType. The typebounds state-
ment will raise an exception when an allow rule introduces
a privilege for a bounded type in the source that does not
match an existing rule for the bounding type.
type d o l p h i n _ a p p ;
type d o l p h i n _ a p p _ i n c o g n i t o ;
t y p e b o u n d s u n t r u s t e d _ a p p dolphin_app ,
d o l p h i n _ a p p _ i n c o g n i t o ;
allow d o l p h i n _ a p p a p p _ d a t a _ f i l e : file
{ read write };
allow d o l p h i n _ a p p _ i n c o g n i t o
a p p _ d a t a _ f i l e : file { read };
Listing 1: Example of use of typebounds.
In the
system policy there is a rule allow untrusted_app
app_data_file:file {read write};
The evaluation of compatibility takes into account the
presence of other typebounds statements in the target, con-
sidering as correct the use in the target of an avType that is
bounded by the type appearing in the higher-level rule. In
the example in Listing 1, the veriﬁcation by typebounds is
satisﬁed, because both the allow rules use in the target an
avType that is considered compatible with the untrusted app
type. It is useful to emphasize that the typebounds statement
does not assign the authorizations to the bounded domain,
it only sets its upper bound. This is a core principle in
our scenario, where policy writers are outside of the trust
domain of the core system resources.
The type statement permits to introduce new avTypes.
To avoid name conﬂicts between types deﬁned in diﬀerent
modules, the pre-processing adds a preﬁx that derives from
the app name to every identiﬁer (we omit in the examples
the representation of this step). If it does not already ap-
pear in the module, the pre-processing step will add a type-
bounds statement for every introduced type that will con-
strain the authorizations referring to types in the system
policy to lie within the untrusted app type. The attribute
Table 1: Simpliﬁed SELinux syntax used in APMs.
Statement
attribute
type
typeattribute
typebounds
typetransition
allow
neverallow
Syntax
attribute attribute id ’;’
type type id (’,’ attribute id )* ’;’
typeattribute type id attribute id
(’,’ attribute id )* ’;’
typebounds bounding bounded
(’,’ bounded )* ’;’
type transition type id type id ’:’
’{’class id +’}’ type id ’;’
allow ’{’pattern+ (’-’pattern)* ’}’
’{’pattern+ (’-’pattern)* ’}’
’{’class id +’}’ ’{’perm id +’}’ ’;’
’{’pattern+ (’-’pattern)* ’}’
’{’class id +’}’ ’{’perm id +’}’ ’;’
neverallow ’{’pattern+ (’-’pattern)* ’}’
The element pattern=(type id|attribute id ) is not in-
cluded in the SELinux statements; we use it here to pro-
vide a more readable description of the syntax.
statement declares an identiﬁer that can be used to deﬁne
rules. SELinux policies make extensive use of avAttributes
to provide a structure to policies. No constraint needs to be
introduced on the deﬁnition of new attributes. Attributes
produce an eﬀect on the policy when they are used in the ty-
peattribute statement, which has been presented above. The
pre-processing checks that every type id used in a typeat-
tribute statement must be deﬁned inside the appPolicyMod-
ule. Without this constraint, a module could violate Req1
and Req2, compromising the system policy and possibly per-
forming an escalation of privileges, by assigning attributes
to the untrusted app type. The allow and neverallow state-
ments permit to create avRules. The pre-processing checks
that all the avRules present as a source or target one of the
avTypes and avAttributes introduced by the module.
Finally, the typetransition statement permits to describe
the admissible transitions between avTypes at runtime. We
introduce the constraint, checked by the pre-processor, that
the avType deﬁned as ﬁrst parameter has to be an avType
deﬁned in the module. The type transition statement is used
to perform object and domain transitions.
• An object transition occurs when an object needs to be
relabeled (i.e., a ﬁle label is changed).
• A domain transition occurs when a process with one
avType (we call it transition-startpoint) switches to an-
other avType (we call it transition-endpoint), enacting
diﬀerent avAuthorizations from the original ones. An
app could deﬁne diﬀerent domains with limited avAu-
thorizations and use them when performing speciﬁc
actions. We note that for a domain transition to suc-
ceed, we must grant three diﬀerent avAuthorizations
to the transition-startpoint type.
With respect to object transitions, there is no need to fur-
ther constrain them, because the process domain must have
the corresponding avAuthorizations to be able to create ob-
jects with the new label. With respect to domain transitions,
when a type transition is authorized and the transition-
startpoint type is given the three additional authorizations,
the transition-startpoint type is actually able to beneﬁt from
all the authorizations that have the transition-endpoint as
the source. This is a potential risk in the deﬁnition of the
policy, because the typebounds statement does not extend its
evaluation to the consideration of the types that are reach-
able through type transitions. The current AOSP system
policy does not give to untrusted app any type transition
privilege, and at the moment there is no danger, but to avoid
any risk we enforce the constraint to accept in the appPolicy-
Module only type transitions that have a transition-endpoint
bounded within untrusted app.
6.1 Correctness
the four requirements described in Section 5.
We want to show that the appPolicyModules will satisfy
With respect to Req1 (S→S), No impact on the system
policy, we note that the appPolicyModule statements do not
have an impact on the system policy, because all the allow
and neverallow statements have to specify as source or target
a new avType, guaranteed to be outside of the system policy.
The correctness with respect to Req2 (A→S), No escala-
tion is guaranteed through the use of the typebounds state-
ments associated with all the avTypes that appear as source
in the allow statements. It is to note that the neverallow
rules do not have to be considered here, because they may
only cause the rejection of the appPolicyModule by the com-
piler, but they cannot lead to the escalation of privileges for
the new avTypes. The consideration by the compiler of the
typebounds statements indeed veriﬁes that each allow rule r(cid:48)
in the appPolicyModule that refers to system types has a
corresponding allow rule r associated with untrusted app.
The respect of Req3 and Req4 can be demonstrated with
a simple example of an appPolicyModule that shows the de-
sired behavior. Requirement Req3 (A→A), Flexible inter-
nal structure is satisﬁed by the example in Listing 1, which