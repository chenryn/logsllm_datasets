dirobj.report（）
dirobj.report_partial_closure（）
dirobj.report_full_closure（）
print "left_list："+ str（dirobj.left_list）
print "right_list："+ str（dirobj.right_list）
print "common："+ str（dirobj.common）
print "left_only："+ str（dirobj.left_only）
print "right_only："+ str（dirobj.right_only）
print "common_dirs："+ str（dirobj.common_dirs）
print "common_files："+ str（dirobj.common_files）
print "common_funny："+ str（dirobj.common_funny）
print "same_file："+ str（dirobj.same_files）
print "diff_files："+ str（dirobj.diff_files）
print "funny_files："+ str（dirobj.funny_files）
为方便理解，通过tree命令输出两个目录的树结构，如图2-4所示。
图2-4 通过tree命令输出的两个目录
运行前面的代码并输出，结果如下：
# python simple1.py
-------------------report---------------------
diff /home/test/filecmp/dir1 /home/test/filecmp/dir2
Only in /home/test/filecmp/dir1 ： ['f4']
Only in /home/test/filecmp/dir2 ： ['aa'， 'f5']
Identical files ： ['f1'， 'f2']
Differing files ： ['f3']
Common subdirectories ： ['a']
-------------report_partial_closure-----------
diff /home/test/filecmp/dir1 /home/test/filecmp/dir2
Only in /home/test/filecmp/dir1 ： ['f4']
Only in /home/test/filecmp/dir2 ： ['aa'， 'f5']
Identical files ： ['f1'， 'f2']
Differing files ： ['f3']
Common subdirectories ： ['a']
diff /home/test/filecmp/dir1/a /home/test/filecmp/dir2/a
Identical files ： ['a1']
Common subdirectories ： ['b']
-------------report_full_closure--------------
diff /home/test/filecmp/dir1 /home/test/filecmp/dir2
Only in /home/test/filecmp/dir1 ： ['f4']
Only in /home/test/filecmp/dir2 ： ['aa'， 'f5']
Identical files ： ['f1'， 'f2']
Differing files ： ['f3']
Common subdirectories ： ['a']
diff /home/test/filecmp/dir1/a /home/test/filecmp/dir2/a
Identical files ： ['a1']
Common subdirectories ： ['b']
diff /home/test/filecmp/dir1/a/b /home/test/filecmp/dir2/a/b
Identical files ： ['b1'， 'b2'， 'b3']
left_list：['a'， 'f1'， 'f2'， 'f3'， 'f4']
right_list：['a'， 'aa'， 'f1'， 'f2'， 'f3'， 'f5']
common：['a'， 'f1'， 'f2'， 'f3']
left_only：['f4']
right_only：['aa'， 'f5']
common_dirs：['a']
common_files：['f1'， 'f2'， 'f3']
common_funny：[]
same_file：['f1'， 'f2']
diff_files：['f3']
funny_files：[]
2.2.2 实践：校验源与备份目录差异
有时候我们无法确认备份目录与源目录文件是否保持一致，包括源目录中的
新文件或目录、更新文件或目录有无成功同步，定期进行校验，没有成功则希
望有针对性地进行补备份。本示例使用了filecmp模块的left_only、diff_files方法
递归获取源目录的更新项，再通过shutil.copyfile、os.makedirs方法对更新项进行
复制，最终保持一致状态。详细源码如下：
【/home/test/filecmp/simple2.py】
#！/usr/bin/env python
import os， sys
import filecmp
import re
import shutil
holderlist=[]
def compareme（dir1， dir2）： #递归获取更新项函数
dircomp=filecmp.dircmp（dir1，dir2）
only_in_one=dircomp.left_only #源目录新文件或目录
diff_in_one=dircomp.diff_files #不匹配文件，源目录文件已发生变化
dirpath=os.path.abspath（dir1） #定义源目录绝对路径
#将更新文件名或目录追加到holderlist
[holderlist.append（os.path.abspath（os.path.join（dir1，x））） for x in only_in_one]
[holderlist.append（os.path.abspath（os.path.join（dir1，x））） for x in diff_in_one]
if len（dircomp.common_dirs） > 0： #判断是否存在相同子目录，以便递归
for item in dircomp.common_dirs： #递归子目录
compareme（os.path.abspath（os.path.join（dir1，item））， \
os.path.abspath（os.path.join（dir2，item）））
return holderlist
def main（）：
if len（sys.argv） > 2： #要求输入源目录与备份目录
dir1=sys.argv[1]
dir2=sys.argv[2]
else：
print "Usage： "， sys.argv[0]， "datadir backupdir"
sys.exit（）
source_files=compareme（dir1，dir2） #对比源目录与备份目录
dir1=os.path.abspath（dir1）
if not dir2.endswith（'/'）： dir2=dir2+'/' #备份目录路径加“/”符
dir2=os.path.abspath（dir2）
destination_files=[]
createdir_bool=False
for item in source_files： #遍历返回的差异文件或目录清单
destination_dir=re.sub（dir1， dir2， item） #将源目录差异路径清单对应替
换成
#备份目录
destination_files.append（destination_dir）
if os.path.isdir（item）： #如果差异路径为目录且不存在，则在备份目录中创建
if not os.path.exists（destination_dir）：
os.makedirs（destination_dir）
createdir_bool=True #再次调用compareme函数标记
if createdir_bool： #重新调用compareme函数，重新遍历新创建目录的内容
destination_files=[]
source_files=[]
source_files=compareme（dir1，dir2） #调用compareme函数
for item in source_files： #获取源目录差异路径清单，对应替换成备份目录
destination_dir=re.sub（dir1， dir2， item）
destination_files.append（destination_dir）
print "update item："
print source_files #输出更新项列表清单
copy_pair=zip（source_files，destination_files） #将源目录与备份目录文件清
单拆分成元组
for item in copy_pair：
if os.path.isfile（item[0]）： #判断是否为文件，是则进行复制操作
shutil.copyfile（item[0]， item[1]）
if __name__ == '__main__'：
main（）
更新源目录dir1中的f4、code/f3文件后，运行程序结果如下：
# python simple2.py /home/test/filecmp/dir1 /home/test/filecmp/dir2
update item：
['/home/test/filecmp/dir1/f4'， '/home/test/filecmp/dir1/code/f3']
# python simple2.py /home/test/filecmp/dir1 /home/test/filecmp/dir2
update item：
[] #再次运行时已经没有更新项了
参考提示
·2.2.1节模块方法说明参考http://docs.python.org/2/library/filecmp.html。
·2.2.2节示例参考http://linuxfreelancer.com/how-do-you-compare-two-folders-
and-copy-the-difference-to-a-third-folder。
2.3 发送电子邮件模块smtplib
电子邮件是最流行的互联网应用之一。在系统管理领域，我们常常使用邮件
来发送告警信息、业务质量报表等，方便运维人员第一时间了解业务的服务状
态。本节通过Python的smtplib模块来实现邮件的发送功能，模拟一个smtp客户
端，通过与smtp服务器交互来实现邮件发送的功能，这可以理解成Foxmail的发
邮件功能，在第一次使用之前我们需要配置smtp主机地址、邮箱账号及密码等
信息，Python 2.3或更高版本默认自带smtplib模块，无需额外安装。下面详细进
行介绍。
2.3.1 smtplib模块的常用类与方法
SMTP类定义：
smtplib.SMTP（[host[，port[，local_hostname[，timeout]]]]），作为SMTP的构造
函数，功能是与smtp服务器建立连接，在连接成功后，就可以向服务器发送相
关请求，比如登录、校验、发送、退出等。host参数为远程smtp主机地址，比如
smtp.163.com；port为连接端口，默认为25；local_hostname的作用是在本地主机
的FQDN（完整的域名）发送HELO/EHLO（标识用户身份）指令，timeout为连
接或尝试在多少秒超时。SMTP类具有如下方法：
·SMTP.connect（[host[，port]]）方法，连接远程smtp主机方法，host为远程
主机地址，port为远程主机smtp端口，默认25，也可以直接使用host：port形式来
表示，例如：SMTP.connect（“smtp.163.com”，“25”）。
·SMTP.login（user，password）方法，远程smtp主机的校验方法，参数为用
户名与密码，如SMTP.login（“PI:EMAIL”，“sdjkg358”）。
·SMTP.sendmail（from_addr，to_addrs，msg[，mail_options，rcpt_options]）
方法，实现邮件的发送功能，参数依次为是发件人、收件人、邮件内容，例
如：SMTP.sendmail（“PI:EMAIL”，“PI:EMAIL”，body），
其中body内容定义如下：
"""From： PI:EMAIL
To： PI:EMAIL
Subject： test mail
test mail body"""
·SMTP.starttls（[keyfile[，certfile]]）方法，启用TLS（安全传输）模式，所
有SMTP指令都将加密传输，例如使用gmail的smtp服务时需要启动此项才能正常
发送邮件，如SMTP.starttls（）。
·SMTP.quit（）方法，断开smtp服务器的连接。
下面通过一个简单示例帮助大家理解，目的是使用gmail向QQ邮箱发送测试
邮件，代码如下：
#！/usr/bin/python
import smtplib
import string
HOST = "smtp.gmail.com" #定义smtp主机
SUBJECT = "Test email from Python" #定义邮件主题
TO = "PI:EMAIL" #定义邮件收件人
FROM = "PI:EMAIL" #定义邮件发件人
text = "Python rules them all！" #邮件内容
BODY = string.join（（ #组装sendmail方法的邮件主体内容，各段以"\r\n"进行分隔
"From： %s" % FROM，
"To： %s" % TO，
"Subject： %s" % SUBJECT ，
""，
text
）， "\r\n"）
server = smtplib.SMTP（） #创建一个SMTP（）对象
server.connect（HOST，"25"） #通过connect方法连接smtp主机
server.starttls（） #启动安全传输模式
server.login（"PI:EMAIL"，"mypassword"） #邮箱账号登录校验
server.sendmail（FROM， [TO]， BODY） #邮件发送
server.quit（） #断开smtp连接
我们将收到一封这样的邮件，如图2-5所示。
图2-5 收到的邮件
2.3.2 定制个性化的邮件格式方法
通过邮件传输简单的文本已经无法满足我们的需求，比如我们时常会定制业
务质量报表，在邮件主体中会包含HTML、图像、声音以及附件格式
等，MIME（Multipurpose Internet Mail Extensions，多用途互联网邮件扩展）作
为一种新的扩展邮件格式很好地补充了这一点，更多MIME知识见
http://zh.wikipedia.org/wiki/MIME。下面介绍几个Python中常用的MIME实现类：
·email.mime.multipart.MIMEMultipart（[_subtype[，boundary[，_subparts[，_params]]]]），
作用是生成包含多个部分的邮件体的MIME对象，参数_subtype指定要添加
到"Content-type：multipart/subtype"报头的可选的三种子类型，分别为mixed、
related、alternative，默认值为mixed。定义mixed实现构建一个带附件的邮件体；
定义related实现构建内嵌资源的邮件体；定义alternative则实现构建纯文本与超文
本共存的邮件体。
·email.mime.audio.MIMEAudio（_audiodata[，_subtype[，_encoder[，**_params]]]），
创建包含音频数据的邮件体，_audiodata包含原始二进制音频数据的字节字符
串。
·email.mime.image.MIMEImage（_imagedata[，_subtype[，_encoder[，**_params]]]），
创建包含图片数据的邮件体，_imagedata是包含原始图片数据的字节字符串。
·email.mime.text.MIMEText（_text[，_subtype[，_charset]]），创建包含文本
数据的邮件体，_text是包含消息负载的字符串，_subtype指定文本类型，支持
plain（默认值）或html类型的字符串。
2.3.3 定制常用邮件格式示例详解
前面两小节介绍了Python的smtplib及email模块的常用方法，那么两者在邮件
定制到发送过程中是如何分工的？我们可以将email.mime理解成smtplib模块邮件
内容主体的扩展，从原先默认只支持纯文本格式扩展到HTML，同时支持附件、
音频、图像等格式，smtplib只负责邮件的投递即可。下面介绍在日常运营工作
中邮件应用的几个示例。
示例1：实现HTML格式的数据报表邮件。
纯文本的邮件内容已经不能满足我们多样化的需求，本示例通过引入
email.mime的MIMEText类来实现支持HTML格式的邮件，支持所有HTML元素，
包含表格、图片、动画、CSS样式、表单等。本示例使用HTML的表格定制美观
的业务流量报表，实现代码如下：
【/home/test/smtplib/simple2.py】
#coding： utf-8
import smtplib
from email.mime.text import MIMEText #导入MIMEText类
HOST = "smtp.gmail.com" #定义smtp主机
SUBJECT = u"官网流量数据报表" #定义邮件主题
TO = "PI:EMAIL" #定义邮件收件人
FROM = "PI:EMAIL" #定义邮件发件人
msg = MIMEText（""" #创建一个MIMEText对象，分别指定HTML内容、类型（文本或html）、
字
#符编码
：14px">*官网数
据 更多>>
：13px">
1）日访问量：152433 访问次数：23651 页面浏览量：
45123 点击数：545122 数据流量：504Mb
2）状态码信息
&nbsp；&nbsp；500：105 404：3264 503：214
3）访客浏览器信息
&nbsp；&nbsp；IE：50% firefox：10% chrome：30% other：10%
4）页面信息
&nbsp；&nbsp；/index.php 42153
&nbsp；&nbsp；/view.php 21451
&nbsp；&nbsp；/login.php 5112