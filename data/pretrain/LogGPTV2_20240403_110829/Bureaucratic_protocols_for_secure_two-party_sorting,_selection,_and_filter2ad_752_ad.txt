Output: The kth smallest element in A
Oﬀset = {k, k
foreach oﬀset h ∈ Oﬀset do
4 ,. . . , 1};
2 , k
group ←k/h;
for i ← n − h; i ≥ group∗h; i ← i − h do
compareRegions(a, i − h, i, h, rand);
end
for i ← 0; i ≤ group∗h; i ← i + h do
compareRegions(a, i, i + h, h, rand);
end
for i ← n; i ≥ k+h; i ← i − h do
compareRegions(a, i − h, k, h, rand);
end
compareRegions(a, k-h, k, h, rand);
end
for i ← 1; i ≤ k; i ← i + 1 do
CompareSwap(a, i, i + 1);
end
for i ← n; i > k; i ← i − 1 do
CompareSwap(a, i, i − 1);
end
Output ak
The compareRegions and CompareSwap functions are the same as the Random-
ized Shellsort.
Figure 10: The Fast Selection Algorithm
This algorithm can ﬁnd the k-th smallest element with
high probability. Our empirical studies show that the error
rate is very low. More details will be given in Section 6. The
time complexity of this selection algorithm is given in the
following:
Theorem 3. To ﬁnd the k-th smallest element in an ar-
ray of size n, the number of compare-swap operations Tn,k
is bounded by the following inequality:
(2n−k) log k +n−4k +4 ≤ Tn,k ≤ (2n−k) log k +3n+k −2.
4We assume that k ≤ n
2 , the region comparisons
will be conducted on the left side. The goal is to conduct
the comparisons on the longer side.
2 . If k > n
8
The proof is given in Appendix B. The theorem indicates
that the time complexity of the algorithm is Θ(n log k).
5. S2P RANDOM PERMUTING
5.1 The S2P Random Permuting Problem
A random permutation is a random ordering of a set of
elements. It often serves as a building block to many ran-
domized algorithms, such as those in coding theory, cryptog-
raphy, and simulation. A good random permuting algorithm
should be able to generate all of the n! permutations with
an equal probability.
We would like to build a S2P random permuting circuit.
The layout of the circuit is exactly the same as the layout
depicted in Figure 1. Namely, the inputs of the circuit are
shared by Alice and Bob (nobody knows the actual inputs).
The output of the circuit is a random permutation of the
inputs. Neither Alice nor Bob knows how the inputs are
permuted.
5.2 Random Permuting Algorithms
Like sorting networks, there are permuting networks. Gold-
stein and Leibholz proposed a method in [15].
Its cost is
(p − 1) · 2p + 1, for 2p items. Although this algorithm is
data-oblivious, the distribution of the results is not uniform.
Namely, the information of the inputs is disclosed to certain
degree.
Another well-known random permuting algorithm is re-
ferred to as Knuth shuﬄe [20].
It has been proven that
Knuth shuﬄe generates all n! permutations with uniform
distribution, as long as the random number is uniformly
generated. To shuﬄe an array with size n, the algorithm
takes n − 1 round. In each round (say round i), the algo-
rithm generates a random number r ∈ {1, . . . , n − i}, and
exchange the i-th element of the array with the r-th element.
Knuth shuﬄe runs in O(n) time, but unfortunately, it is
not a data-oblivious algorithm, because the sequence of com-
parisons depends on the value of r. To use Knuth shuﬄe to
build a S2P permuting circuit, the value of r cannot be dis-
closed to anybody; otherwise how the inputs are permuted
is partially disclosed. Introducing decoys to hide r increases
the time complexity to O(n2).
5.3 A Sorting-Based Permuting Algorithm
Permuting can be achieved using sorting. The idea is quite
simple: in order to randomly permute an array, we expand
each element (say ai) of the array into a tuple (ri, ai), where
ri is a randomly generated number. We then sort this array
of tuples using the random numbers as the key. After sort-
ing, the elements (ai’s) of the original array are randomly
permuted.
The random numbers ri’s are generated jointly by Alice
and Bob, i.e., each of them generate their own shares, the
actual random numbers used for sorting is the xor of their
shares. Nobody knows the actual random numbers. Our
S2P sorting circuit allows the sorting without each party
knowing the actual inputs.
It has been proven that if there are no duplicates in the
generated random numbers, the permutations is uniformly
random [20].
6. EVALUATION
This section gives a comprehensive empirical study of our
S2P sorting and selection algorithms. Because our permut-
ing algorithm is based on sorting, we will not describe its
evaluation results. All the experiments are run on Intel(R)
Pentium(R)-D machines with 3.00 GHz CPU and 4GB of
physical memory. Our implementation is in Java. We use
Fairplay [25] to build our compare-swap primitive.
6.1 S2P Sorting Circuit
In this section, we evaluate the performance of S2P cir-
cuits based on sorting networks and Randomized Shellsort.
Figure 11(a) and 11(b) show the performance of S2P sort-
ing circuits on a local machine and a local area network, re-
spectively. All the evaluated circuits can ﬁnish S2P sorting
within reasonable amount time, except Shellsort, because
Shellsort’s inner loop is not data-oblivious and its circuit
runs out of memory when n > 64.
From these two ﬁgures, we can ﬁnd out that when the ar-
ray size is not too large, the Odd-Even Mergesort performs
the best. Although this algorithm has O(n log2 n) time com-
plexity, it has a small constant (0.25). That is why it is even
better than the randomized Shellsort algorithm (with time
complexity (n log n)). However, Randomized Shellsort be-
comes better when n is large (see Figure 11(c)).
In this
ﬁgure, we uses the number of compare-swap as the Y-axis,
because the running time for the evaluation of one compare-
swap primitive is constant (0.766 second for a local machine
and 0.901 second over a LAN).
Randomized Shellsort is a probabilistic algorithm, which
achieves sorting with very high probability. To evaluate this,
we have conducted experiments using randomly generated
array of various size. We ran the algorithm 5 over one million
times for each input size, ranging from 2 to 220. We have
found no sorting error in the results.
6.2 Fast Randomized Shellsort
We evaluate the improvement achieved by our Fast Ran-
domized Shellsort. Figure 11(c), the asymptotic plot, demon-
strates the savings compared to Randomized Shellsort. This
saving is quite signiﬁcant; it is achieved by allowing a small
amount of sorting errors. To see how much the sacriﬁce is,
we conducted our evaluation on randomly generated arrays
of diﬀerent sizes. We run our experiment 10, 000 times for
each size, and plot the average results in Figure 12.
From Figure 12, we can see that the error rates (i.e., the
portion of elements that are not placed in correct positions
after sorting) are very low, i.e., although the whole array
is not completely sorted, only a small percent of elements
are in wrong positions. Moreover, among all mis-located
elements, most of them are only oﬀ by one position (i.e.,
error distance = 1), and very small number of elements are
oﬀ by two positions. No element in our experiments is oﬀ
by more than two positions.
6.3 S2P Selection Circuit
Figure 13 compares our selection algorithm with the sorting-
based selection. The improvement over the running time is
quite signiﬁcant. This improvement is achieved at the cost
of a accuracy.
To evaluate how accurately our algorithm can ﬁnd the k-
th smallest item. We conducted experiments on randomly
5To save time, we conduct this experiment only in the non-
S2P setting, as the results of this experiment does not change
even if it is conducted in S2P settings.
9
Shellsort
Randomized Shellsort
Odd−Even Mergesort
Bitonic sort
7000
6000
5000
4000
3000
2000
1000
)
s
d
n
o
c
e
s
(
e
m
i
t
i
g
n
n
n
u
R
0
0
50
100
150
The input size
200
250
300
(a) Running time on local machine
)
s
d
n
o
c
e
s
(
e
m
i
t
i
g
n
n
n
u
R
8000
7000
6000
5000
4000
3000
2000
1000
0
Shellsort
Randomized Shellsort
Odd−Even Mergesort
Bitonic sort
s
p
a
w
S
−
e
r
a
p
m
o
C
f
o
r
e
b
m
u
N
50
100
150
The input size
200
250
300
(b) Running time on LAN
8
6
4
2
0
0
2
4
6
The input size
8
10
(c) Running time for large n
12
x 105
12x 107
10
Randomized Shellsort
Odd−Even Mergesort
Fast Randomized Shellsort
Figure 11: Performance of S2P sorting algorithms
8x 10−3
e
t
a
r
r
o
r
r
E
6
4
2
0
Error distance = 1
Error distance = 2
256
512
1024
2048
The input size
4096
8192 16384 32768 65536
Figure 12: Error rate of Fast Randomized Shellsort
6x 104
s
p
a
w
S
−
e
r
a
p
m
o
C
f
o
r
e
b
m
u
N
5
4
3
2
1
0
0
Fast selection
Odd−Even Mergesort
500
1000
1500
The input size
2000
2500
Figure 13: Performance of S2P selection algorithms
generated arrays of various sizes and with various k values.