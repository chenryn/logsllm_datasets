经过对比调试，发现在正常的处理SMB Tree
Connect包和触发BSOD的不正常情况下有一处关键的跳转逻辑，这里是一处if语句判断，成立则break跳出while循环，不成立，会继续执行。
那么不正常的情况呢？之前的处理和之前的分析一样，我们加大Data的值到1200，但是在返回后。
    kd> p
    tcpip!TcpDeliverDataToClient+0x2b9:
    fffff80a`72c21a59 48297b20        sub     qword ptr [rbx+20h],rdi
    kd> r rdi
    rdi=0000000000000404
    kd> dd rbx+20
    ffffc10c`a0643e78  00000504
显而易见，在我们加大Data长度的时候，到相减位置结构体对应位置的值是504，也就是1284，正好是Data的长度1200字节 ＋
刚才分析到的84字节，而此时rdi的值只有0x404，也就是944长度，这是一个Max值，如果Data长度超过0x404，这里会认为还有数据，因此相减后v6[4]的值不为0。
    kd> p
    tcpip!TcpDeliverDataToClient+0x2bd:
    fffff80a`72c21a5d 4533ed          xor     r13d,r13d
    kd> dd rbx+20
    ffffc10c`a0643e78  00000100
这造成了一个问题，就是刚才到的break位置由于v6[4]不为0，所以不执行break，而是进入后续的处理。
    kd> p
    tcpip!TcpDeliverDataToClient+0x2e2:
    fffff80a`72c21a82 488b4320        mov     rax,qword ptr [rbx+20h]
    kd> p
    tcpip!TcpDeliverDataToClient+0x2e6:
    fffff80a`72c21a86 48034318        add     rax,qword ptr [rbx+18h]
    kd> p
    tcpip!TcpDeliverDataToClient+0x2ea:
    fffff80a`72c21a8a 0f858dfeffff    jne     tcpip!TcpDeliverDataToClient+0x17d (fffff80a`72c2191d)
    kd> p
    tcpip!TcpDeliverDataToClient+0x17d:
    fffff80a`72c2191d 49833f00        cmp     qword ptr [r15],0
    kd> p
    tcpip!TcpDeliverDataToClient+0x181:
    fffff80a`72c21921 0f85e9010000    jne     tcpip!TcpDeliverDataToClient+0x370 (fffff80a`72c21b10)
接下来，程序会回到while入口位置，接下来会进入之前提到没有进入的if语句处理，这是由于刚才没有break结束循环的原因，此时会进入if语句的处理，函数中所调用的函数都是Complete，猜测都是和结束数据包相关处理有关。
    kd> p
    tcpip!TcpDeliverDataToClient+0x1c1:
    fffff80a`72c21961 e99bfeffff      jmp     tcpip!TcpDeliverDataToClient+0x61 (fffff80a`72c21801)
    kd> p
    tcpip!TcpDeliverDataToClient+0x61:
    fffff80a`72c21801 48837b0800      cmp     qword ptr [rbx+8],0
    kd> dd rbx+8
    ffffc10c`a0643e60  9d8c2fa0 ffffc10c 9d8c2fa0 ffffc10c
来看一下这个if语句。
      while ( 1 )
      {
        if ( v6[1] )
        {
          if ( !*v5 )
            break;
          v9 = v6[1];
          v10 = v6[2];
          *((_BYTE *)v6 + 98) &= 0xFEu;
          v69 = v9;
          v6[1] = 0i64;
          v6[2] = 0i64;
          v11 = vars30;
          v71 = v10;
          LODWORD(v12) = TcpSatisfyReceiveRequests(v7, 0, (__int64)v6, vars30, v5, &v69, &v66);
         }
       }
在这个if语句中，会调用TcpSatisfyReceiveRequests函数，这个函数中第六个参数，也就是v69是很关键的，这个值决定了后面的空指针引用，接下来进入这个函数。
    int __fastcall TcpSatisfyReceiveRequests(PKSPIN_LOCK SpinLock, char a2, __int64 a3, signed int a4, __int64 *a5, __int64 *a6, _DWORD *a7)
    {
          v8 = *a5;
      v95 = SpinLock;
      v9 = *a6;                                     // RBP+148
          v38 = *(_QWORD *)(v9 + 48);
          v39 = *(_QWORD *)(v9 + 56);
          v40 = *(_QWORD *)(v9 + 8);
          v41 = *(_QWORD *)(v9 + 72);
          v93 += v38;
          v99 += *(_QWORD *)(v9 + 40);
          v42 = *(_QWORD *)v9;
          _guard_dispatch_icall_fptr(v40, 0i64, v38, v39);// call WskProTLReceiveComplete
这个函数中的_guard_dispatch_icall_fptr调用了WskProTLreceiveComplete函数，而v40参数和v9结构体有关，v9是由传入第六个参数，也就是刚才提到的v69有关，v69又来自于v6[1]，而这个结构体是和Complete有关，但是在TreeConnect数据包中却没有对这个结构体进行赋值。
随后在WskProTLReceiveComplete中，会将rcx，也就是第一个参数v40，进行传递（64位Windows系统中，参数传递通过寄存器，第一个参数是rcx，第二个是rdx，第三个是r8，第四个是r9）。在后面的分析中，省略了无关的汇编过程，只留关键的给大家分享。
    kd> p
    afd!WskProTLReceiveComplete+0x34:
    fffff80a`7365aa84 488bd9          mov     rbx,rcx
    …………
    kd> p
    afd!WskProTLReceiveComplete+0x8e:
    fffff80a`7365aade 488bcb          mov     rcx,rbx
    kd> r rbx
    rbx=ffffc10ca01ba010
    kd> p
    afd!WskProTLReceiveComplete+0x91:
    fffff80a`7365aae1 ff15512d0200    call    qword ptr [afd!_imp_IofCompleteRequest (fffff80a`7367d838)]
经过一系列传递后，这个第一个参数会直接传给IofCompleteRequest函数，这个函数是irp完成函数，其实是一个中间过程，同步irp完成，后面就是善后工作。
在函数中，参数继续传递。
    kd> p
    nt!IopfCompleteRequest+0xb:
    fffff800`9464b81b 4881ec00010000  sub     rsp,100h
    kd> p
    nt!IopfCompleteRequest+0x12:
    fffff800`9464b822 488bd9          mov     rbx,rcx
    …………
    kd> p
    nt!IopfCompleteRequest+0x109:
    fffff800`9464b919 488bd3          mov     rdx,rbx
    kd> p
    nt!IopfCompleteRequest+0x10c:
    fffff800`9464b91c 488bce          mov     rcx,rsi
    kd> p
    nt!IopfCompleteRequest+0x10f:
    fffff800`9464b91f ff5735          call    qword ptr [rdi+35h]
    kd> t
    Breakpoint 0 hit
    mrxsmb!SmbWskReceiveComplete:
    fffff80a`731d6950 48895c2408      mov     qword ptr [rsp+8],rbx
在IofCompleteRequest函数中，会有一处调用回到SmWskReceivComplete函数，而结构体会交给rdx，也就是第二个参数进入这个函数。随后这个参数会连续传递。先来看一下之前的堆栈回溯。
    kd> kb
    RetAddr           : Args to Child                                                           : Call Site
    fffff800`9464b922 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : mrxsmb!SmbWskReceiveComplete
    fffff80a`7365aae7 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!IopfCompleteRequest+0x112
    fffff80a`72c60d9d : fffff800`963d54a8 ffffc10c`9ed02780 fffff800`963d54b0 fffff800`963d547c : afd!WskProTLReceiveComplete+0x97
    fffff80a`72c21860 : 00000000`00000002 ffffc10c`a0643d00 00000000`00000007 00000000`00000000 : tcpip!TcpSatisfyReceiveRequests+0x3cd
    00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : tcpip!TcpDeliverDataToClient+0xc0
之后参数会连续进行传递，首先会把当前rdx＋b8存放的值交给r14，之后把r14+40位置的值交给r8，最后引用的就是r8+98位置的值。
    kd> p
    mrxsmb!SmbWskReceiveComplete+0x1d:
    fffff80a`731d696d 488bda          mov     rbx,rdx
    kd> p
    mrxsmb!SmbWskReceiveComplete+0x20:
    fffff80a`731d6970 4c8bb2b8000000  mov     r14,qword ptr [rdx+0B8h]
    …………
    kd> p
    mrxsmb!SmbWskReceiveComplete+0x7f:
    fffff80a`731d69cf 4d8b4640        mov     r8,qword ptr [r14+40h]//1
    kd> dd r14+40
    ffffc10c`a01ba168  9fdf3c58 ffffc10c
可以看到，这个过程并没有对这个值进行检查，由于结构体不透明，不能确定到底对应存放的是什么，但其实这个结构体的连续调用我们可以理解为_KPCR ->_
KTHREAD -> _EPROCESS -> Token这种关系，在Windows内核有很多这样的域以及相关的结构体，而相互又是嵌套的。
这个结构体的值为0x0的原因可能就是由于这个complete部分的数据包是由于SMB Tree
Connect过长引起的，而mrxsmb20.sys中却没有对相关结构体进行检查。
    kd> p
    mrxsmb!VctIndDataReady+0x36:
    fffff80a`731d6a56 498bf8          mov     rdi,r8
    …………
    kd> p
    mrxsmb!VctIndDataReady+0x146:
    fffff80a`731d6b66 488bd7          mov     rdx,rdi
    kd> p
    mrxsmb!VctIndDataReady+0x149:
    fffff80a`731d6b69 488bcb          mov     rcx,rbx
    kd> p
    mrxsmb!VctIndDataReady+0x14c:
    fffff80a`731d6b6c ff15eeed0200    call    qword ptr [mrxsmb!_guard_dispatch_icall_fptr (fffff80a`73205960)]
    kd> r rdx
    rdx=ffffc10c9fdf3c58
    kd> t
    mrxsmb!guard_dispatch_icall_nop:
    fffff80a`731d8a30 ffe0            jmp     rax
    kd> p
    mrxsmb20!Smb2TreeConnect_CopyData:
    fffff80a`7546b6c0 48895c2410      mov     qword ptr [rsp+10h],rbx
最后进入CopyData后，会引用这个结构体＋98偏移位置的值，进入漏洞触发的函数，而没有对这个值进行检查。
    kd> p
    mrxsmb20!Smb2TreeConnect_CopyData+0x32:
    fffff80a`7546b6f2 488b8b98000000  mov     rcx,qword ptr [rbx+98h]
    kd> p
    mrxsmb20!Smb2TreeConnect_CopyData+0x39:
    fffff80a`7546b6f9 e8c210ffff      call    mrxsmb20!Smb2ValidateNegotiateInfo (fffff80a`7545c7c0)
    kd> dd rbx+98
    ffffc10c`9fdf3cf0  00000000 00000000
最后在函数中引用空指针，引发了BSOD。
关于这个结构体的问题我还是比较在意的，希望未来能够更深入的分析SMB的各种机制，元宵快乐！新的一年，大家一起加油！谢谢大家！
* * *