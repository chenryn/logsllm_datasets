unsigned hexadecimal number
%
print a %; no argument is consu
TABLE 2-10. EXAMPLES OF PRINTF SPECIFICATIONS
fmt
$ 1
printf（fmt,$1)
%c
97
97.5
a
%d
6
%5d
97.5
97
%e
97.5
9.750000e+01
%f
97.5
97.500000
%7.2f
97.5
97.50
%g
97.5
97.5
%.6g
97.5
97.5
%o
97
141
%06o
97
000141
%x
97
61
1%s1
January
IJanuary!
1%10s1
January
January!
1%-10s1
January
1January
1%.3s1
January
iJan1
1%10.3s1
January
Jan1
1%10.3s1
January
1Jan
%%
January
%
and smal1pop otherwise:
$3>100
{print $1，$3 >bigpop”}
$3snal1pop”}
Notice that the filenames have to be quoted; without quotes, bigpop and
---
## Page 68
58
THE AWK LANGUAGE
CHAPTER 2
smal1pop are merely uninitialized variables. Filenames can be variables or
expressions as well:
（print（$1，$3）>（$3>100 ?*bigpop”:“gma11pop)}
does the same job, and the program
(print >$1 }
puts every input line into a file named by the first field.
tainsarelationaloperator,theneither that xpressionor theargument listeeds
 e   ue s u d  om
the redirection operator >. In
(print $1, $2 > $3 }
> is the redirection operator, and hence not part of the second expression, so the
values of the first two fields are written to the file named in the third field. If
you want the second expression to include the > operator, use parentheses:
{print $1,（$2 >$3）}
It is also important to note that a redirection operator opens a file only once;
each successive print or printf statement adds more data to the open file.
When the redirection operator > is used, the file is initially cleared before any
output is written to it. If >> is used instead of >, the file is not initially cleared;
output is appended after the original contents.
Output into Pipes
It is also possible to direct output into a pipe instead of a file on systems that
support pipes. The statement
print 1 command
Suppose we want to create a list of continent-population pairs, sorted in
reverse numeric order by population. The program below accumulates in an
tinent names in the fourth field. The END action prints each continent name
and its population, and pipes this output into a suitable sort command.
#print continents and populations, sorted by population
BEGIN(FS ="\t”}
(for（c in pop）
pop[$4]+= $3}
END
printf（“x15s\tx6d\n°，c，pop[c]）:“sort-t'\t′+1rn
This yields
---
## Page 69
SECTION 2.5
INPUT
59
Asia
2173
North America
340
Europe
172
South Anerica
134
Another use for a pipe is writing onto the standard error file on Unix sys-
tems; output written there appears on the user’s terminal instead of the standard
output. There are several idioms for writing on the standard error file:
print message 1"cat 1>&2*
redirect cat to stderr
system("echo *" message "′ 1>&2")redirect echo to stderr
a/ap/0)
next
print x
(print }
It is also possible to pipe the output of another command directly into
getline.For example, the statement
while ("who" 1 getline)
n++
executes the Unix program who (once only) and pipes its output into getline.
The output of who is a list of the users logged in. Each iteration of the while
loop reads one more line from this list and increments the variable n, so after
the while loop terminates, n contains a count of the number of users. Simi-
larly, the expression
"date”:getline d
pipes the output of the date command into the variable d, thus setting d to the
In all cases involving getline, you should be aware of the possibility of an
error return if the file can’t be accessed. Although it's appealing to write
while(getline0)...Safe
Here the loop will be executed only when getline returns 1.
---
## Page 73
SECTION 2.5
INPUT63
Command-Line Variable Asslgnments
As we have seen, an awk command line can have several forms:
awk‘program′f1 f2...
awk -f progfilef1f2
awk-Fsep‘program'f1f2
awk -Fsep -f progfile f1 f2 ...
In these command lines, f1, f2, etc., are command-line arguments that nor-
mally represent filenames. If a filename has the form var-text, however, it is
treated as an assignment of rext to var, performed at the time when that argu-
ment would otherwise be accessed as a file. This type of assignment allows vari-
ables to be changed before and after a file is read.
Command-Lino Arguments
The command-line arguments are available to the awk program in a built-in
array called ARGV. The value of the built-in variable ARGC is one more than
the number of arguments. With the command line
awk -f progfile a v=1 b
ARGC has the value 4, ARGv[0] contains awk, ARGv[ 1] contains a, ARGV[2]
contains v=1, and ARGv[3] contains b. ARGC is one more than the number of
arguments because awk, the name of the command, is counted as argument
zero, as it is in C programs. If the awk program appears on the command line,
F option. For example, with the command line
awk-P'\t′'s3>100′countries
ARGC is 2 and ARGv[ 1] is countries.
The following program echoes its command-line arguments:
 echo - print command-line argunents
BEGIN(
for（1=1;1p;r>0
output: integers 1 to q,p to q，or p to q in steps of r
if (ARGC == 2)
for （1 = 1;1 = ARGC)
no file names so force stdin
ARGV[ARGC++]="_"
for（i=1;i<=nf;i++)
printf("xaxe",sfld[i],i<nf ?·*:"\n)
$e
This version can deal with either standard input or a list of filename arguments,
and with any number of fields in any order.
2.7 Summary
As we said earlier, this is a long chapter, packed with details, and you are
dedicated indeed if you have read every word to get here. You will find that it
pays to go back and re-read sections from time to time, either to see precisely
how something works, or because one of the examples in later chapters suggests
a construction that you might not have tried before.
Awk, like any language, is best learned by experience and practice, so we
big or complicated - you can usually learn how some feature works or test
data to see how the program behaves.
Bibliographic Notes
The programming language C is described in The C Programming
Language, by Brian Kernighan and Dennis Ritchie (Prentice-Hall,1978).
There are numerous books on how to use the Unix system; The Unix Program-
ming Emvironmenr, by Brian Kernighan and Rob Pike (Prentice-Hall, 1984)
has an extensive discussion of how to create shell programs that include awk.
---
## Page 77
3
DATAPROCESSING
Awk was originally intended for everyday data-processing tasks, such as
information retrieval, data validation, and data transformation and reduction.
We have already seen simple examples of these in Chapters 1 and 2. In this
chapter, we will consider more complex tasks of a similar nature. Most of the
examples deal with the usual line-at-a-time processing, but the final section
describes how to handle data where an input record may occupy several lines.
Awk programs are often developed incrementally: a few lines are written and
tested, then a few more added, and so on. Many of the longer programs in this
book were developed in this way.
ngoos pue en enu o unsuood  jouno
It's also possible to write awk programs in the traditional way, sketching the
The programs in this bok thus serve another purpose, providing useful models
modifying an existing program to get the desired effect is frequently easier.
for programming by example.
3.1Data Transformation and Reduction
One of the most common uses of awk is to transform data from one form to
another, usually from the form produced by one program to a different form
required by some other program. Another use is selection of relevant data from