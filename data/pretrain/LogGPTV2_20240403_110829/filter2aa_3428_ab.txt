# Memory Management and Protection in Virtual Memory Systems

## Page Faults
A page fault occurs when a requested page is marked as not present and its translation is not cached in the Translation Lookaside Buffer (TLB). Common causes of page faults include:
- **Memory protection violations:**
  - User mode code attempting to write to kernel mode memory.
  - An attempt to write to memory marked as read-only.

### Page Fault Path
The following diagram illustrates the typical path taken during a page fault:

```
Memory Access
27 (Invalid)
Page Table
Physical Memory
Page Directory
VPN=12, Frame =132 (PRESENT)
VPN =12, Frame = 13 (PRESENT)
Frame 0
Frame 122
Frame 27
Frame 13
Frame 3
Page Fault Handler
Frame 132
VPN=12, Frame=27 (FAULT)
VPN =12, Frame=27 (NOT PRESENT)
Disk (Page File)
```

## The Paging Performance Problem
Virtual memory incurs a significant performance hit. In a two-level page table scheme like x86, the performance overhead can be substantial:
- **Best Case:** 3 memory accesses per reference (page directory, page table, and offset).
- **Worst Case:** 3 memory accesses + 2 disk I/O requests per memory reference (page directory, I/O, page table, I/O, and offset).

### Solution: Translation Lookaside Buffer (TLB)
The TLB is a high-speed hardware cache that stores frequently used virtual-to-physical mappings (Page Table Entries, PTEs). It significantly reduces the number of memory accesses required for address translation.

#### TLB Operation
- **On memory access:** The TLB is searched first for the virtual-to-physical translation.
- **High speed associative memory:**
  - **Hit:** The translation was found in the TLB.
  - **Miss:** The translation was not found in the TLB.
- **X86 Uses Split TLB Architecture:**
  - **ITLB:** Holds virtual-to-physical translations for code.
  - **DTLB:** Holds virtual-to-physical translations for data.

Modern TLBs have extremely high hit rates, thereby reducing the performance impact of page table walks.

## Memory Access with TLB
### TLB Hit
For a memory access with a TLB hit, the path is as follows:

```
Memory Access (Code, VPN=12)
ITLB
DTLB
Physical Memory
Frame 132
Page Table / Page Dir
27 (Invalid)
FAULT
27 (Invalid)
Is it a code access?
Is it a data access?
VPN = 12, Frame = 132
Frame 0
Frame 122
Frame 27
Frame 13
Frame 3
Disk (Page File)
```

### TLB Miss with Page Fault
For a memory access with a TLB miss and a page fault, the path is as follows:

```
Memory Access (Code, VPN=25)
ITLB
DTLB
Physical Memory
Frame 132
Page Table / Page Dir
VPN = 25, Frame = 13 (PRESENT)
Frame 0
Frame 122
Frame 27
Frame 13
Frame 3
Is it a code access?
Is it a data access?
MISS
VPN = 25, Frame = 13 (NOT PRESENT)
FAULT
Page Fault Handler
Disk (Page File)
```

## Memory Access Types
Basic memory access types include:
- **Read**
- **Write**
- **Execute**

Under IA-32, execute access is implied:
- **Read / Execute**
- **Read / Write / Execute**

### No-Execute (NX) Support
Some applications benefit from differentiating between read/write and execute accesses, such as buffer overflow protection. IA-32 does not natively support execute-only memory, but this can be achieved through software implementations like PaX. Some modern processors, including AMD64 and Intel Pentium 4, now provide hardware support for NX (Execute-Only) memory.

## Hiding Executable Code
We can use an offensive spin on defensive technologies like PaX to hide executable code. This involves differentiating between read/write and execute accesses to the hidden code. For example, read accesses to the code section of a rootkit driver may indicate the presence of a scanner.

### Implementation Issues
- **Filtering execute and read/write accesses.**
- **Faking read/write memory accesses.**
- **Ensuring performance is not adversely affected.**

### Differentiating Between Execute and Read/Write
- **Trap memory accesses by marking their PTEs "non-present" and hooking the page fault handler.**
- **In the page fault handler, check if the instruction pointer equals the faulting address (execute access) or not (read/write).**
- **Differentiate between page faults due to the memory hook and normal page faults.**

### Faking Read/Writes Using Split TLB
- **Normal Synchronized ITLB and DTLB translate code and data memory accesses to the same physical frame.**
- **Desynchronized ITLB and DTLB translate code and data memory accesses to different physical frames.**

### Software TLB Control
- **Reloading CR3 flushes all TLB entries except global entries.**
- **Invoking `invlpg` flushes a specific TLB entry.**
- **Data access instructions load the DTLB with the mapping for the accessed data page.**
- **Executing a call loads the ITLB with the mapping for the code executed in response to the call.**

## Shadow Walker Components
- **Memory Hook Engine:**
  - **Hook Installation Module**
  - **Custom Page Fault Handler**
- **Modified FU Rootkit**

### Memory Hook Installation
- **Install a new page fault handler (Int 0E).**
- **Insert the page into a global hash table of hooked pages for quick lookup.**
- **Mark the page as not present.**
- **Flush the TLB to ensure subsequent memory accesses are trapped.**

### Custom Page Fault Handler
- **Primary task is to filter read/write and execute accesses for hooked pages.**
- **Pass down faults on unhooked pages to the OS page fault handler.**
- **Manually load the ITLB on execute access to a hooked page.**
- **Manually load the DTLB on data access to a hooked page.**

### Pseudocode for Page Fault Handler
```plaintext
Page Fault Handler:
if( ProcessorMode == USER_MODE )
    jmp PassDownToOs
if( FaultingAddress == USER_PAGE )
    jmp PassDownToOs
if( FaultingAddress == HIDDEN_PAGE) 
{
    if(FaultingAddress == EIP)
        jmp LoadItlb // execute access
    else
        jmp LoadDtlb
}
else
    jmp PassDownToOs

Load Itlb:
ReplaceFrame(PTE.FaultingAddress)
PTE.FaultingAddress == PRESENT
CallIntoHiddenPage // load ITLB
PTE.FaultingAddress == NOT PRESENT
ReplaceFrame(old_PTE.FaultingAddress)
jmp ReturnWithoutPassdownToOs

Load Dtlb:
PTE.FaultingAddress == PRESENT
ReadFaultingAddress // load DTLB
PTE.FaultingAddress == NOT PRESENT
jmp ReturnWithoutPassdownToOs
```

## Data Hiding
- **Less optimal due to the need to keep the DTLB empty of hidden page mappings.**
- **One page fault per data access to a hidden page.**
- **Data accesses must be filtered in the page fault handler, and the DTLB must be loaded with the correct mapping.**
- **Memory hook must maintain control (i.e., DTLB must be flushed after access).**
- **Protocol-based approach between driver and page fault handler.**
- **Debugging approach (i.e., single step).**

## Modified FU Rootkit
- **Proof of concept rootkit hidden by the memory hook engine.**
- **Runs as a system thread and scans the active process list for processes named _fu_ and unlinks them.**
- **No dependence on userland initialization.**
- **In-memory rootkit that can be installed from a kernel exploit to avoid disk detection.**

## Impact on System Performance
- **Modern TLBs have extremely high hit rates.**
- **Most translations on hidden pages will go through the TLB path rather than the slower page fault path.**
- **Using the memory hook engine to hide a rootkit driver’s code has no subjectively noticeable impact on overall system performance.**

## Known Limitations
- **No PAE Support**
- **No Hyperthreading / Multiprocessor Support**
- **Currently hides only 4K sized kernel pages (i.e., system space / upper 2 GB of the virtual address space).**

## Detection
- **Non-present pages in non-paged memory range are abnormal.**
- **The page fault handler code itself cannot be concealed using this technique.**
- **Difficult to conceal IDT hooks (i.e., page fault handler).**
- **Cannot protect against remapping.**
- **Virtual memory scans are inadequate.**
- **More advanced scanners should be based on remapping of the physical address space.**
- **Hardware memory scanners.**

## Defensive Applications
- **IDS, AV, Firewall Drivers**
- **Rootkits and other malicious software often compromise security software via in-memory patching.**
- **Execute/Diverted Read-Write semantics can provide lightweight code integrity.**
- **Malicious read/write accesses to a security driver’s code section can be deflected to a separate “shadow” page frame where they would have no effect.**

## References and Acknowledgements
- **The PaX Project**
- **Halvar Flake**
- **Joanna Rutkowska**
- **A generic attack on checksumming-based software tamper resistance by Glenn Wurster, P.C. van Oorschot, and Anil Somayaji**
- **Concurrent, related work on memory subversion.**