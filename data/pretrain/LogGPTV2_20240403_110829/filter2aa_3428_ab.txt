is marked not present and whose translation is not 
cached in the TLB.
– Memory protection violations. 
• User mode code attempting to write to a kernel mode 
memory.
• An attempt to write to memory marked as read-only.
Page Fault Path
Page Fault Path
Memory 
Access
27 (Invalid)
Page Table
Physical Memory
Page Directory
VPN=12, Frame =132 
PRESENT
VPN =12, Frame = 13 
PRESENT
Frame 0
Frame 122
Frame 27
Frame 13
Frame 3
Page Fault Handler
Frame 132
VPN=12, Frame=27
FAULT
VPN =12, Frame=27
NOT PRESENT
Disk (Page File)
The Paging Performance 
The Paging Performance 
Problem
Problem
• Virtual memory incurs a steep performance hit!
• 2 level page table scheme like x86:
– Best Case: 3 memory accesses per reference!        
(page dir + page table + offset)
– Worst Case: 3 memory accesses + 2 disk I/O 
requests per memory reference!
(page dir + I/O + page table + I/O + offset)
• Solution: Translation Lookaside Buffer (TLB)
– The TLB is a high speed hardware cache of 
frequently used virtual to physical mappings (PTE’s).
Translation Lookaside Buffer
Translation Lookaside Buffer
• On memory access, TLB is searched first for the 
virtual to physical translation!
• High speed associative memory
– “Hit”  translation was found in the TLB
– “Miss”  translation was not found in the TLB
• X86 Uses Split TLB architecture
– ITLB: holds virtual to physical translations for code
– DTLB: holds virtual to physical translations for data
• Modern TLB’s have extremely high “hit” rates 
and seldom incur the performance hit of a page 
table walk.
Translation Lookaside Buffer
Translation Lookaside Buffer
(TLB)
(TLB)
Virtual Page Number = 17
.
.
.
.
Virtual Page 5
Virtual Page 64
Virtual Page 17
Virtual Page 6
Virtual Page 7
Virtual Page 65
Page Frame 100
Invalid
Page Frame 84
Page Frame 100
Page Frame 844
Invalid
Virtual Address
TLB
Associative Memory
(Simultaneous read 
and compare)
tag
data
Memory Access Path 
Memory Access Path 
w/ TLB (Hit) 
w/ TLB (Hit) 
Memory Access 
(Code, VPN=12)
ITLB
DTLB
Physical Memory
Frame 132
Page Table /
Page Dir
27 (Invalid)
FAULT
27 (Invalid)
Is it a 
code access?
Is it a 
data access?
VPN = 12, Frame = 132
VPN = 12, Frame = 132
Frame 0
Frame 122
Frame 27
Frame 13
Frame 3
Disk (Page File)
Memory Access Path 
Memory Access Path 
(TLB Miss w/ Page Fault) 
(TLB Miss w/ Page Fault) 
Memory Access 
(Code, VPN=25)
ITLB
DTLB
Physical Memory
Frame 132
Page Table /
Page Dir
VPN = 25, Frame = 13
(PRESENT)
Frame 0
Frame 122
Frame 27
Frame 13
Frame 3
Is it a 
code access?
Is it a 
data access?
MISS
VPN = 25, Frame = 13
(NOT PRESENT)
VPN = 25, Frame = 13
FAULT
Page Fault Handler
Disk (Page File)
Memory Access Types
Memory Access Types
• Basic memory access types:
– Read
– Write
– Execute
• Under IA-32, execute access is implied: 
– Read / Execute
– Read / Write / Execute
NX?
NX?
(Execute Only Memory)
(Execute Only Memory)
• For some applications it is advantageous to be able to 
differentiate between read / write and execute accesses.
– Buffer Overflow Protection
• IA-32 does not provide hardware support for execute-
only memory
– PaX  Read / Write / No Execute memory semantics on the IA-
32 with software support
– Side Note: Hardware support for NX (Execute-Only) memory has 
been added to some processors including AMD 64 processors, 
some AMD sempron processors, IA-64, and Intel Pentium 4.
– Windows XP SP2 and Windows Server 2003 SP1 added OS 
software support for NX.
Hiding Executable Code
Hiding Executable Code
• We take an offensive spin on the 
defensive PaX technology.
• We want to hide code, therefore we also 
want to differentiate between read / write 
and execute accesses to the hidden code.
– Read accesses of the code section of a rootkit 
driver may indicate presence of a scanner.
– Nearly the inverse of PaX: Software 
implementation of Execute / Diverted Read-
Write semantics.
Implementation Issues
Implementation Issues
• We need a way to filter execute and read / 
write accesses.
• We need a way to “fake” the read / write 
memory accesses when we detect them.
• We need to ensure that performance is not 
adversely affected.
Differentiating Between 
Differentiating Between 
Execute and Read / Write
Execute and Read / Write
• We can trap memory accesses by marking their 
PTE’s “non present” and hooking the page fault 
handler.
• In the page fault handler, we have access to the 
saved instruction pointer and the faulting 
address.
– If instruction pointer == faulting address, then it is an 
execute access! Otherwise, it is a read/write.
• We also need to differentiate between page 
faults due to the memory hook and normal page 
faults.
– Pages must be nonpaged memory.
– Pages must be locked down in memory.
Faking Read / Writes By 
Faking Read / Writes By 
Exploiting The Split TLB (1)
Exploiting The Split TLB (1)
• Normal Synchronized ITLB and DTLB translate code and 
data memory accesses to the same physical frame.
Memory Access 
(VPN=12)
ITLB
DTLB
Frame 2
Page Table /
Page Dir
27 (Invalid)
FAULT
27 (Invalid)
Is it a 
code access?
Is it a 
data access?
VPN = 12, Frame = 2
VPN = 12, Frame = 2
Frame 8
Frame 52
Faking Read / Writes By 
Faking Read / Writes By 
Exploiting The Split TLB (2)
Exploiting The Split TLB (2)
• Desynchronized ITLB and DTLB translate code and data 
memory accesses to different physical frames.
Memory Access 
(VPN=12)
ITLB
DTLB
Frame 2
Page Table /
Page Dir
27 (Invalid)
FAULT
27 (Invalid)
Is it a 
code access?
Is it a 
data access?
VPN = 12, Frame = 52
VPN = 12, Frame = 2
Frame 8
Frame 52
rootkit code
random garbage
Software TLB Control
Software TLB Control
• Reloading cr3 causes all TLB entries except 
global entries to be flushed. This typically occurs 
on a context switch.
• The invlpg causes a specific TLB entry to be 
flushed.
• Executing a data access instruction causes the 
DTLB to be loaded with the mapping for the data 
page that was accessed.
• Executing a call causes the ITLB to be loaded 
with the mapping for the page containing the 
code executed in response to the call.
Shadow Walker Components
Shadow Walker Components
• Memory Hook Engine
– Hook Installation Module
– Custom Page Fault Handler
• Modified FU Rootkit
Memory Hook Installation
Memory Hook Installation
• Install new PF handler (Int 0E).
• Insert page into global hash table of 
hooked pages for quick lookup in PF 
handler.
• Mark page not present.
• Flush the TLB to ensure that we trap all 
subsequent memory accesses in the PF 
handler.
Custom Page Fault Handler
Custom Page Fault Handler
• Primary task is to filter read / write and execute accesses 
for hooked pages.
– Passes down faults on unhooked pages to the OS page fault 
handler.
– Manually loads ITLB on execute access to hooked page.
– Manually loads DTLB on data access to hooked page.
• Most memory references will be resolved via the TLB 
path and will not generate page faults.
• Page faults on hooked pages will occur:
– On the first execute and data accesses to the page.
– On TLB cache line evictions of a hooked mapping.
– On explicit TLB flush (i.e. context switch).
PF Handler Pseudocode
PF Handler Pseudocode
• Pseudocode for enforcing execute diverted read / write 
semantics on kernel pages.
Page Fault Handler:
if( ProcessorMode == USER_MODE )
jmp PassDownToOs
if( FaultingAddress == USER_PAGE )
jmp PassDownToOs
//faulting address is from a hidden page
if( FaultingAddress == HIDDEN_PAGE) 
{     if(FaultingAddress == EIP)
jmp LoadItlb //execute access
else
jmp LoadDtlb
}
else jmp PassDownToOs
Load Itlb:
ReplaceFrame(PTE.FaultingAddress)
PTE.FaultingAddress == PRESENT
CallIntoHiddenPage //load ITLB
PTE.FaultingAddress == NOT PRESENT
ReplaceFrame(old_PTE.FaultingAddress)
jmp ReturnWithoutPassdownToOs
Load Dtlb
PTE.FaultingAddress == PRESENT
ReadFaultingAddress //load DTLB
PTE.FaultingAddress == NOT PRESENT
jmp ReturnWithoutPassdownToOs
What About Data Hiding
What About Data Hiding
• Less optimal 
– DTLB must be kept empty of hidden page mapping.
– One page fault per data access to hidden page.
• For memory access to go through, data 
accesses must be filtered in PF handler and the 
DTLB must be loaded w/ the correct mapping.
• Memory hook must maintain control (i.e. DTLB 
must be flushed after access).
– Protocol based approach between driver and PF 
handler.
– Debugging approach (i.e. single step).
Modified FU Rootkit
Modified FU Rootkit
• Proof of concept rootkit hidden by our memory 
hook engine.
• Runs as a system thread and regularly scans 
the active process list looking for processes 
named _fu_ and unlinks them.
• No dependence on userland initialization.
– No symbolic link
– No functional device
• In memory rootkit
– Could be installed from a kernel exploit to avoid disk 
detection.
Impact On System 
Impact On System 
Performance
Performance
• Modern TLB’s have extremely high “hit” rates.
• Therefore, most translations on our “hidden 
pages” will go through the TLB path rather than 
the slower page fault path.
• Using the memory hook engine to hide a rootkit 
driver’s code has no subjectively noticeable 
impact on overall system performance!
Known Limitations
Known Limitations
• No PAE Support
• No Hyperthreading / Multiprocessor 
Support
• Currently hides only 4K sized kernel pages 
(i.e. system space / upper 2 GB of the 
virtual address space).
Detection
Detection
• Non present pages in non paged memory range 
are abnormal!
• The PF handler code itself cannot be concealed 
using this technique since we cannot mark the 
page containing the PF handler non present 
(must use polymorphic solution).
• Difficult to conceal IDT hooks (i.e. PF handler).
• Cannot protect against remapping.
– Virtual memory scans are inadequate!
– More advanced scanners should be based upon 
remapping of the physical address space.
– Hardware memory scanners.
Yin and Yang
Yin and Yang
• Beyond the offensive rootkit, there are defensive 
applications
– IDS, AV, Firewall Drivers
• Rootkits and other malicious software often 
compromise security software via in memory 
patching.
• Execute / Diverted Read-Write semantics can be 
used to provide light weight code integrity.
– Malicious read / write accesses to a security driver’s 
code section can be deflected to a separate “shadow”
page frame where they would have no effect!
DEMO
DEMO
References / 
References / 
Acknowledgements
Acknowledgements
• The PaX Project
• Halvar Flake
• Joanna Rutkowska
• A generic attack on checksumming-based 
software tamper resistance by Glenn Wurster 
P.C. van Oorschot, and Anil Somayaji
– Concurrent, related work on memory subversion.