Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3516last 𝑑𝑡ℎ time it was a leader to buffer 𝑑 shares. Next, we observe
that HydRand cannot tolerate more than 𝑡 > 𝑛/3 because it fails to
deliver the PVSS encryptions to all correct nodes, if the leaders fails
to send it to them. We solve this concern using extension techniques
from recent works [36]. However, these works assume threshold
signatures which we avoid in our protocol. Thus, in RandPiper, we
achieve an optimal fault tolerance of 𝑡  ℎ) that extends 𝐵ℎ.
Fact B.1. If an honest node delivers an object 𝑏 at time 𝜏 in epoch
𝑒 and no honest node has detected an epoch 𝑒 equivocation by time
𝜏 + Δ, then all honest nodes will receive object 𝑏 by time 𝜏 + 2Δ in
epoch 𝑒.
Proof. Suppose an honest node 𝑝𝑖 delivers an object 𝑏 at time
𝜏 in epoch 𝑒. Node 𝑝𝑖 must have sent valid code words and witness
⟨codeword, mtype, 𝑠 𝑗 , 𝑤 𝑗 , 𝑧𝑒, 𝑒⟩𝑖 computed from object 𝑏 to every
𝑝 𝑗 ∈ P at time 𝜏. The code words arrive at all honest nodes by time
𝜏 + Δ.
Since no honest node has detected an epoch 𝑒 equivocation by
time 𝜏 + Δ, it must be that either honest nodes will forward their
code word ⟨codeword, mtype, 𝑠 𝑗 , 𝑤 𝑗 , 𝑧𝑒, 𝑒⟩ when they receive the
code words sent by node 𝑝𝑖 or they already sent the corresponding
code word when they either delivered object 𝑏 or received the code
word from some other node 𝑝 𝑗. In any case, all honest nodes will
forward their epoch 𝑒 code word corresponding to object 𝑏 by time
𝜏 + Δ. Thus, all honest nodes will have received 𝑡 + 1 valid code
words for a common accumulation value 𝑧𝑒 by time 𝜏 +2Δ sufficient
to decode object 𝑏 by time 𝜏 + 2Δ.
□
Fact B.2.
then all honest nodes receive 𝐵ℎ by time 𝜏.
If an honest node votes for a block 𝐵ℎ at time 𝜏 in epoch 𝑒,
Proof. Suppose an honest node 𝑝𝑖 votes for a block 𝐵ℎ at time
𝜏 in epoch 𝑒. Node 𝑝𝑖 must have received proposal 𝑝𝑒 for 𝐵ℎ by
time 𝜏 − 2Δ and detected no epoch 𝑒 equivocation by time 𝜏. This
implies no honest node detected an epoch 𝑒 equivocation by time
𝜏 − Δ. Node 𝑝𝑖 must have invoked Deliver(propose, 𝑝𝑒, 𝑧𝑝𝑒, 𝑒) at
time 𝜏 −2Δ. By Fact B.1, all honest nodes receive 𝑝𝑒 by time 𝜏. Thus,
all honest nodes must have received 𝐵ℎ by time 𝜏.
□
Lemma B.3. If an honest node directly commits a block 𝐵ℎ in epoch
𝑒, then (i) no equivocating block certificate exists in epoch 𝑒, and (ii)
all honest nodes receive C𝑒(𝐵ℎ) before quitting epoch 𝑒.
Proof. Suppose an honest node 𝑝𝑖 commits a block 𝐵ℎ in epoch
𝑒 at time 𝜏. Node 𝑝𝑖 must have received a vote-cert for 𝐵ℎ at time
𝜏 − 2Δ such that its epoch-timer𝑒 ≥ 3Δ and did not detect an
equivocation by time 𝜏. This implies no honest node detected an
epoch 𝑒 equivocation by time 𝜏 − Δ. In addition, some honest node
𝑝 𝑗 must have voted for 𝐵ℎ by time 𝜏 − 2Δ. By Fact B.2, all honest
nodes would receive 𝐵ℎ by time 𝜏 − 2Δ.
For part (i), observe that no honest node received an equivocating
proposal by time 𝜏 − 2Δ; otherwise, all honest nodes would have
received a code word for equivocating proposal by time 𝜏 − Δ and
node 𝑝𝑖 would not commit. And, no honest node would vote for an
equivocating block after time 𝜏 − 2Δ (since they have received 𝐵ℎ
by time 𝜏 − 2Δ). Thus, an equivocating block certificate does not
exist in epoch 𝑒.
For part (ii), observe that node 𝑝𝑖 must have invoked the primitve
Deliver(vote-cert, 𝑣𝑒, 𝑧𝑣𝑒, 𝑒) for 𝑣𝑒 = C𝑒(𝐵ℎ) at time 𝜏 − 2Δ and
did not detect epoch 𝑒 equivocation by time 𝜏. By Fact B.1, all
honest nodes receive 𝑣𝑒 by time 𝜏. Note that node 𝑝𝑖 must have
its epoch-timer𝑒 ≥ 3Δ at time 𝜏 − 2Δ. Since, all honest nodes are
synchronized within Δ time, all other honest nodes must have
epoch-timer𝑒 ≥ 2Δ at time 𝜏 − 2Δ. Thus, all nodes are still in epoch
𝑒 at time 𝜏 and receive C𝑒(𝐵ℎ) before quitting epoch 𝑒.
□
Lemma B.4 (Unique Extensibility).
If an honest node directly com-
mits a block 𝐵ℎ in epoch 𝑒, then any certified blocks that ranks higher
than C𝑒(𝐵ℎ) must extend 𝐵ℎ.
Proof. The proof is by induction on epochs 𝑒′ > 𝑒. For an epoch
𝑒′, we prove that if a C𝑒′(𝐵ℎ′) exists then it must extend 𝐵ℎ.
For the base case, where 𝑒′ = 𝑒 + 1, the proof that C𝑒′(𝐵ℎ′)
extends 𝐵ℎ follows from Lemma B.3. The only way C𝑒′(𝐵ℎ′) for 𝐵ℎ′
forms is if some honest node votes for 𝐵ℎ′. However, by Lemma B.3,
there does not exist any equivocating block certificate in epoch 𝑒
and all honest nodes receive and lock on C𝑒(𝐵ℎ) before quitting
epoch 𝑒. Thus, a block certificate cannot form for a block that does
not extend 𝐵ℎ.
Given that the statement is true for all epochs below 𝑒′, the proof
that C𝑒′(𝐵ℎ′) extends 𝐵ℎ follows from the induction hypothesis
because the only way such a block certificate forms is if some
honest node votes for it. An honest node votes in epoch 𝑒′ only if
𝐵ℎ′ extends a valid certificate C𝑒′′(𝐵ℎ′′). Due to Lemma B.3 and the
induction hypothesis on all block certificates of epoch 𝑒  𝑡 shares reconstruct a unique 𝑠.
Verify if the sharing is correct. A successful verification guarantees that all the encrypted shares are correct
and that any 𝑡 + 1 nodes will reconstruct a unique 𝑠. 0 indicates a failure and 1 indicates a success.
Reconstruct the shared secret 𝑠 from the collection of shares PVSS.(cid:174)𝑆 ⊆ {PVSS.s1, . . . , PVSS.s𝑛}𝑡+1
Some honest nodes might have received a higher ranked certificate
than leader 𝐿𝑒 before entering epoch 𝑒; thus, they send their highest
ranked certificate to leader 𝐿𝑒.
Leader 𝐿𝑒 might have entered epoch 𝑒 at time 𝜏 while some
honest nodes enter epoch 𝑒 only at time 𝜏 + Δ. The 2Δ wait in the
Propose step ensures that the leader can receive highest ranked
certificates from all honest nodes. However, leader 𝐿𝑒 may enter
epoch 𝑒 Δ time after the earliest honest nodes. Due to 2Δ wait
after entering epoch 𝑒, leader 𝐿𝑒 collects the highest ranked cer-
tificate C𝑒′(𝐵𝑙) by time 𝜏 + 3Δ and sends a valid proposal 𝑝𝑒 =
⟨propose, 𝐵ℎ, 𝑒, C𝑒′(𝐵𝑙), 𝑧𝑝𝑒⟩𝐿𝑒 for a block 𝐵ℎ that extends C𝑒′(𝐵𝑙)
which arrives all honest nodes by time 𝜏 + 4Δ.
Thus, all honest nodes satisfy the constraint epoch-timer𝑒 ≥ 7Δ.
In addition, 𝐵ℎ extends the highest ranked certificate. So, all honest
nodes will invoke Deliver(propose, 𝑝𝑒, 𝑧𝑝𝑒, 𝑒) and set vote-timer𝑒
to 2Δ which expires by time 𝜏 + 6Δ. All honest nodes send vote
for 𝐵ℎ to 𝐿𝑒 which arrives 𝐿𝑒 by time 𝜏 + 7Δ. Leader 𝐿𝑒 forwards
C𝑒(𝐵ℎ) which arrives all honest nodes by time 𝜏 + 8Δ. Note that
all honest nodes satisfy the constraint epoch-timer𝑒 ≥ 3Δ and
honest nodes set their commit-timer𝑒 to 2Δ which expires by time
𝜏 + 10Δ. Moreover, no equivocation exists in epoch 𝑒. Thus, all
honest nodes will commit 𝐵ℎ and its ancestors in epoch 𝑒 before
their epoch-timer𝑒 expires.
□
Theorem B.7 (Liveness). All honest nodes keep committing new
blocks.
Proof. For any epoch 𝑒, if the leader 𝐿𝑒 is Byzantine, it may not
propose any blocks or propose equivocating blocks. Whenever an
honest leader is elected in epoch 𝑒, by Fact B.6, all honest nodes
commit in epoch 𝑒. Since we assume a round-robin leader rotation
policy, there will be an honest leader every 𝑡 + 1 epochs, and thus
the protocol has a commit latency of 𝑡 + 1 epochs.
□
Lemma B.8 (Communication complexity). Let ℓ be the size of block
𝐵ℎ, 𝜅 be the size of accumulator and 𝑤 be the size of witness. The
communication complexity of the protocol is 𝑂(𝑛ℓ + (𝜅 + 𝑤)𝑛2) bits
per epoch.
Proof. At the start of an epoch 𝑒, each node sends a highest
ranked certificate to leader 𝐿𝑒. Since, size of each certificate is 𝑂(𝜅𝑛),
this step incurs 𝑂(𝜅𝑛2) bits communication. A proposal consists
of a block of size ℓ and block certificate of size 𝑂(𝜅𝑛). Proposing
𝑂(𝑛 + ℓ)-sized object to 𝑛 nodes incurs 𝑂(𝜅𝑛2 + 𝑛ℓ). Delivering
𝑂(𝜅𝑛+ ℓ)-sized object has a cost 𝑂(𝑛ℓ +(𝜅 +𝑤)𝑛2), since each node
broadcasts a code word of size 𝑂((𝑛 + ℓ)/𝑛), a witness of size 𝑤
and an accumulator of size 𝜅.
In Vote cert step, the leader broadcasts a certificate for block
𝐵ℎ which incurs 𝑂(𝜅𝑛2) communication. Delivering 𝑂(𝜅𝑛)-sized
C𝑒(𝐵ℎ) incurs 𝑂((𝜅 + 𝑤)𝑛2) bits. Hence, the total cost is 𝑂(𝑛ℓ +
(𝜅 + 𝑤)𝑛2) bits.
□
B.2 GRandPiper Security Analysis
Theorem B.9 (Consistent beacon). Let 𝐿 = 𝐿𝑒 denote the leader
of epoch 𝑒. Then the following properties hold:
Block consistency: if an honest node commits a block 𝐵
proposed in epoch 𝑒′ ≤ 𝑒 − 𝑡, then all the honest nodes