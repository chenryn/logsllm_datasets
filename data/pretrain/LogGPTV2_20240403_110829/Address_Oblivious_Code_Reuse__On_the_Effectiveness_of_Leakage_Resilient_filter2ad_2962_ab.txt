in the unprotected version of the program (i.e., attacker’s local
copy) to infer the locations of indirect code pointers in the
protected version. We illustrate this idea in Fig 1. By observing
what function pointers are placed in observable memory (i.e.,
stack or heap) in the unprotected version, an attacker can infer
that the pointers observed in the protected version must be the
corresponding indirect code pointers of the same functions.
At a high-level, to perform the proﬁling, the attacker collects
a list of function pointers from an unprotected version of
the application ofﬂine, then she collects some indirect code
pointers from the protected application in an online manner
by sending the victim a few queries and observing parts
of its data memory (e.g., stack). This allows the attacker
to create a mapping between the discovered indirect code
pointers and their underlying functions. The attacker can
then chain these indirect code pointers to achieve the desired
malicious behavior. Since the code snippets pointed to by these
indirect code pointers behave like traditional ROP gadgets
we call them AOCR gadgets. Note that this attack can be
completed successfully without knowing the actual location
(addresses) of the underlying functions. Although these steps
look straightforward, in practice the attacker faces a number
of technical challenges. Here, we describe the techniques we
devised to overcome these challenges.
Repeatedly disclosing memory with precise timing to read
indirect code pointers is a na¨ıve ﬁrst approach to create an
accurate mapping of pointers to underlying functions. However,
since the state of the system changes rapidly, this can result in
inaccuracies in the mappings that may eventually cause a crash
at exploitation time. To enhance the precision of the mapping,
we devised a technique that we call Malicious Thread Blocking
(MTB).
3
No HidingF:ptrRW stackObservableRX codeHidingt_F: …F:icptrRW stackHiddenObservableObservableAdversaryXO codeXO trampolinesattacker infers that icptr →  F( )call(int arg1, int arg2) {
fptr(arg1, arg2); }
call_with_defaults() {
fptr(default_arg1, default_arg2);}
If
the
region
attacker modiﬁes
the next
of memory
the
containing fptr,
invocation of call or
call_with_defaults will be redirected to an indirect
code pointer chosen by the attacker. Unlike ROP and similar
attacks,
this redirection is consistent with the high-level
semantics of C, and is thus unaffected by any underlying
randomization (at
the instruction-level, basic block-level,
function-level, or library-level). In a valid C program fptr
can potentially point to any function in the program.
Hijacking control ﬂow in this manner does have limitations.
If the attacker ends up hijacking a call like the one in call, the
attacker will have very limited ability to control the arguments.
The x86 64 ABI mandates a calling convention in which the
ﬁrst few arguments must be passed via registers. It is much
more difﬁcult to control a register value than it is to control a
memory value. Some diversity techniques further complicate
this by randomizing how registers are allocated to variables and
how registers are saved to and restored from the stack [15, 45].
An attacker can overcome these defenses by concentrating
on hijacking calls like the call in call_with_defaults.
call_with_defaults invokes fptr on global variables.
As global variables are stored in memory, they are trivial
to modify. If an attacker is able to locate a function like
call_with_defaults, she will be able to redirect control
to a function of her choosing, with up to two arguments of her
choosing. We found many such cases in our experiments with
Nginx and Apache, as discussed in Section IV.
C. Chaining via Malicious Loop Redirection
An attacker wishing to chain multiple AOCR gadgets
together faces another challenge: after calling an indirect code
pointer, the execution returns to the original call site. This
makes it difﬁcult for the attacker to take the execution control
back after a single function call. For example, in Readactor,
trampolines consist of a call immediately followed by a jump
to the original call site; any redirected call will end with a
return to normal program execution. Theoretically, there is a
window, potentially very narrow, between the invocation of a
redirected call and the return of the redirected call in which
an attacker may modify the return address to maintain control.
This approach requires a very precise level of timing which
may be difﬁcult to achieve in practice.
Another option can be to use COOP-style attacks [47] to
chain AOCR gadgets together using virtual functions. How-
ever, COOP attacks have various limitations that make them
undesirable in an address oblivious attack. First, COOP relies
on the dynamic dispatch implementation based on vtables; as
such, it requires the leakage of vtable addresses. Second, COOP
is hindered by vtable-randomization or register-randomization
defenses [16, 59]. Third, COOP only applies to object-oriented
languages, and is thus unavailable in applications developed in
C (e.g., Nginx).
Fig. 2. Normal vs. Malicious Thread Blocking
In the case of programs that utilize threading, we can employ
MTB to enable us to proﬁle a broader range of indirect code
pointers and avoid dependence upon strict timing requirements
for triggering the disclosure vulnerability.
The approach of MTB is to use one thread, TA, to cause
another thread, TB, to hang at an opportunistic moment by
manipulating variables that cause TB’s execution to block, e.g.,
by maliciously locking a mutex. By opportunistically blocking
a thread, we can more easily locate and map desired indirect
code pointers without worrying about rapid changes in memory.
A memory disclosure vulnerability may be triggered in TA that
enables memory inspection at a known point in execution in
TB. Note that this technique avoids any timing unpredictability
that the attacker may face when trying to trigger a disclosure
in thread TA at the appropriate time in execution for thread
TB. The idea of this approach is illustrated in Figure 2.
As one example of this technique in practice, we show in
Section IV how an attacker can lock a mutex in Nginx to cause
a thread to block upon returning from a system call. Triggering
a memory disclosure vulnerability in another thread at any point
after the system call enables the attacker to inspect a memory
state that she knows contains indirect code pointers relevant
to the system call. To more easily distinguish one system call
from another, the attacker can supply a unique input and scan
disclosed memory for that input. For instance, if the attacker
wishes to proﬁle the open() call, she may supply a unique
ﬁle name as normal input to the program. Upon inspecting the
stack of a blocked thread, the attacker would expect to ﬁnd this
unique value as an argument to the open() call. An attacker
can continually block and unblock a thread by manipulating
the mutex until this value is discovered in disclosed memory,
which indicates that the attacker has located the relevant frame
for open(). We illustrate this technique in more depth in our
real-world exploits.
B. Passing Proper Arguments
After the attacker has mapped relevant indirect code pointers
to their underlying functions, it is straightforward to redirect
control ﬂow to one of the functions. For the purpose of control-
ﬂow hijacking, knowing an indirect code pointer address is just
as good as knowing the address of a function.
Consider the following code fragment:
4
lock(mutex)…        unlock(mutex)…lock(mutex)…        unlock(mutex)…lock(mutex)…        unlock(mutex)…time1time2time3mutex = 1mutex = 0mutex = 1Thread TAMaliciousThread BlockingThread TBwhile (task) {
task->fptr(task->arg);
task = task->next;
}
Fig. 3. A loop with a corruptible call site appropriate for MLR
Fig. 4. Malicious Loop Redirection (MLR)
To overcome this, we introduce a new technique we call
Malicious Loop Redirection (MLR), which only depends on
language-level semantics widely found in C applications (loops
over function pointers). In an MLR attack, an attacker chains a
set of indirect code pointers (i.e., AOCR gadgets) using loops
that contain indirect call sites in their body.
An appropriate redirectable loop gadget in MLR is a loop
that:
1)
2)
has a loop condition that can be subverted by an
attacker (e.g., the loop condition is in RW memory),
and
it must call functions through code pointers
A simple example is presented in Fig 3. If task points
to attacker-controllable memory, the attacker can cause the
program to perform calls to multiple functions of her choosing
by creating several fake task structures and setting up their
task->next pointers to point to the next AOCR gadget.
When the loop runs, AOCR gadgets are executed one by one
without loss of control on attacker’s side. We depict this attack
graphically in Fig 4.
While some defenses implement register randomization to
prevent chaining computations together, it does not prove to be
an effective deterrent in this situation. The high-level semantics
of the call dictate that the ﬁrst argument will be taken from
task->arg and moved to rdi, so our method of chaining
AOCR gadgets using MLR succeeds against any randomization
technique that preserves the x86 64 ABI.
IV. REAL-WORLD EXPLOITS
In this section we present three real-world exploits combin-
ing various techniques described earlier. The ﬁrst two exploits
5
target Nginx and the third targets the Apache HTTP Server.
The attacks are tested on Readactor as a proof-of-concept, but
they are generally applicable to other leakage-resilient defenses
as we discuss in Section VII. Nginx Attack 1 uses proﬁling to
locate and call indirect code pointers (trampolines) for open
and _IO_new_file_overflow and uses these to hijack
control. Nginx Attack 2 and the Apache Attack use proﬁling
to locate call trampolines for functions that eventually reach
exec. Our exploits only assume the existence of memory
corruption vulnerabilities akin to CVE 2013-2028 (Nginx) and
CVE-2014-0226 (Apache).
A. Nginx Attack 1
We ran our experiments on stock Nginx 1.9.4 conﬁgured
with support for asynchronous I/O. While this conﬁguration is
not default, it is very commonly used. The default conﬁguration
is generally not used in practice, and Nginx strives to be as
portable as possible in its default conﬁguration. By default,
Nginx does not support HTTP SSL (https), ipv6, asynchronous
I/O, or threading and runs a single worker process. Nginx
speciﬁcally recommends the use of thread pools for performance
beneﬁts [6].
The aim of our attack is to cause Nginx to perform a
malicious write to a ﬁle from a buffer located in execute-only
memory. This requires locating addresses of functions that open
and write ﬁles. We must also locate an indirect call site with
enough corruptible arguments to call our target functions.
We began by inspecting the Nginx source code for suit-
able, corruptible call sites. We were able to ﬁnd an indirect
call site that retrieved both of its arguments from memory
in Nginx’s main loop for worker threads. On line 335 of
core/ngx_thread_pool.c, the following call is made:
task->handler(task->ctx, tp->log);
This call site is ideal for our purposes: both the function
pointer itself and the arguments are obtained by referencing
ﬁelds of structs retrieved from memory, which are thus
corruptible.
While this call site is suitable for calling open, which only
requires two arguments, it does not allow us to call write,
which requires three. As it seemed unlikely that a better callsite
could be found, we began searching for ways to perform a write
via a function that only takes two arguments. We eventually
found _IO_new_file_overflow, an internal function in
the GNU C Library (glibc) used when a write to a ﬁle is about
to overﬂow its internal buffer. The signature for this function
is included below:
_IO_new_file_overflow(_IO_FILE *f,int
ch)
f is a pointer to an _IO_FILE, glibc’s internal version
of the C standard library type FILE. ch is the character that
was being written when the overﬂow occurred. If a pointer to
an attacker controlled _IO_FILE were to be passed to this
function, they would be able to reliably perform a write from an
arbitrary buffer of arbitrary size to an arbitrary ﬁle descriptor.
To locate the indirect code pointers of these functions during
an attack, we perform proﬁling as described in Section III.
nextfptrRW non-codeargnextfptrarg...write_trampopen_trampfunc_tramp_01func_tramp_03XO trampolinesnextfptrRW non-codeargnextfptrarg...write_trampopen_trampfunc_tramp_01func_tramp_03XO trampolinesBefore AttackDuring Attack_IO_new_file_overflow can be located using only anal-
ysis of in-memory values. Locating open, however, requires
the use of the MTB technique. At a high level this attack
proceeds in four phases:
1)
2)
3)
4)
an
Locate a mutex for MTB.
Proﬁle an indirect code pointer for open (our ﬁrst
AOCR gadget).
Proﬁle
for
_IO_new_file_overflow (our second AOCR
gadget).
Corrupt Nginx’s task queue so that a worker thread
makes calls to our proﬁled trampolines using the MLR
technique.
indirect
pointer
code
1) Locating a mutex: During execution, Nginx makes
several open system calls. During these calls, the address of the
trampoline (i.e., indirect code pointer) for open is vulnerable
to being read by an attacker. However, in practice, determining
the exact address of this trampoline is difﬁcult. Furthermore,
the attacker would have to perform a read within the very
narrow window of opportunity in which the address is on the
stack. We overcome this difﬁculty by employing MTB. glibc’s
threading implementation supports a feature known as thread
cancellation. There are two forms of cancellation: asynchronous,
which means a thread’s execution can be cancelled at any point
in its execution, and deferred, which means any cancellation
requests are deferred until a special predetermined point known
as a cancellation point.
Every thread in a program contains a Thread Control Block
(TCB). This structure contains thread-speciﬁc information and
is used by glibc for maintaining metadata such as thread local
storage, the current extent of the thread’s stack, and thread can-
cellation. Inside the TCB is a ﬁeld named cancelhandling.
This ﬁeld contains ﬂags representing various aspects of a
thread’s cancellation state. We are concerned with the following
ﬂags:
•
TCB CANCELTYPE: indicates that the thread can be
cancelled asynchronously via a signal.
TCB CANCELING: indicates that the thread’s cancel-
lation state is being mutated.
TCB CANCELED:
successfully canceled.
the thread was
indicates that
•
•
Before entering a cancellation point, glibc executes
__pthread_enable_asynccancel, a function that en-
ables asynchronous cancellation by setting TCB_CANCELTYPE
to true. After exiting a cancellation point, glibc executes
__pthread_disable_asynccancel, a function that dis-
ables asynchronous cancellation by setting TCB_CANCELTYPE
to false. A thread’s cancellation can be requested by calling
pthread_cancel, which will set TCB_CANCELED to true