如果设置的话，
.B bash
试着将一个多行命令的所有行放到同一个历史条目中。这样使得
多行命令可以容易地重新修改。
.TP 8
.B dotglob
如果设置的话，
.B bash
会把以 `.' 开始的文件名包含在路径名扩展的结果中。
.TP 8
.B execfail
如果设置的话，非交互的 shell 如果不能执行作为参数提供给内建命令
.B exec
的文件时将不会退出。交互的 shell 在
.B exec
失败时不会退出。
.TP 8
.B expand_aliases
如果设置的话，别名被扩展，就像上面
.SM
.BR ALIASES
中讲到的一样。这个选项在交互 shell 中是默认启用的。
.TP 8
.B extglob
如果设置的话，将允许上面 \fBPathname Expansion\fP 中提到的扩展模式匹配特性。
.TP 8
.B histappend
如果设置的话，在 shell 退出时，历史列表将追加到以
.B HISTFILE
的值为名的文件之后，而不是覆盖文件。
.TP 8
.B histreedit
如果设置的话，并且正在使用
.B readline，
用户可以重新修改失败的历史替换。
.TP 8
.B histverify
如果设置的话，并且正在使用
.B readline，
历史替换的结果不会立即传给 shell 解释器。结果行被加载到 
\fBreadline\fP 编辑缓冲区，允许进行进一步的修改。
.TP 8
.B hostcomplete
如果设置的话，并且正在使用
.B readline，
\fBbash\fP 将试着对正在进行补全的包含 \f@\fP 的词进行主机名补全
(参见上面的
.SM
.B READLINE
中的
.B Completing
段落)。这是默认允许的。
.TP 8
.B huponexit
如果设置的话，在交互的登录 shell 退出时 \fBbash\fP 将向所有作业发出
.SM
.B SIGHUP
信号。
.TP 8
.B interactive_comments
如果设置的话，将允许在交互 shell 中遇到以
.B #
开头的词时忽略这个词和一行中所有剩余的字符 (参见上面的
.SM
.B COMMENTS 注释)。
这个选项是默认允许的。
.TP 8
.B lithist
如果设置的话，并且允许了
.B cmdhist
选项，多行的命令在保存到历史中时将包含新行符，而不是在可能的地方使用分号。
.TP 8
.B login_shell
如果 shell 作为登录 shell 启动，将设置这个选项 (参见上面的
.SM
.B "启动(INVOCATION)")。
这个值不可修改。
.TP 8
.B mailwarn
如果设置的话，并且 \fBbash\fP 正在检测上次检测以来被存取过的邮件，
将显示 ``The mail in \fImailfile\fP has been read''(\fImailfile\fP 中的邮件已被读取)。
.TP 8
.B no_empty_cmd_completion
如果设置的话，并且正在使用
.B readline，
试图在空行上执行补全时，
.B bash
不会搜索 \fBPATH\fP 来查找可能的补全。
.TP 8
.B nocaseglob
如果设置的话，
.B bash
进行路径扩展时使用大小写不敏感方式匹配文件名(参见上面的
.B Pathname Expansion 路径扩展)。
.TP 8
.B nullglob
如果设置的话，
.B bash
将允许不匹配任何文件的模式扩展为空字符串而不是它们自身(参见上面的
.B Pathname Expansion 路径扩展)。
.TP 8
.B progcomp
如果设置的话，将启用可编程补全功能 (参见上面的 \fBProgrammable Completion\fP)。
这个选项是默认启用的。
.TP 8
.B promptvars
如果设置的话，提示字符串要经过上面
.SM
.B PROMPTING
中描述的扩展，然后还要经过变量和参数扩展。这个选项是默认启用的。
.TP 8
.B restricted_shell
shell 设置这个选项，如果它是以受限模式启用的 (参见下面的
.SM
.B "受限的shell(RESTRICTED SHELL)"
章节)。这个值不能修改。在执行启动文件时，它不会被重置，使得启动文件可以
得知 shell 是否是受限的。
.TP 8
.B shift_verbose
如果设置的话，内建命令
.B shift
在偏移量超过位置参数的个数时打印一条错误消息。
.TP 8
.B sourcepath
如果设置的话，内建命令 \fBsource\fP (\fB.\fP) 使用
.SM
.B PATH
中的值来查找包含作为参数给出的文件。这个选项默认是启用的。
.TP 8
.B xpg_echo
如果设置的话，内建命令 \fBecho\fP 默认扩展反斜杠转义序列。
.RE
.TP
\fBsuspend\fP [\fB\-f\fP]
挂起 shell 的执行，直到收到一个
.SM
.B SIGCONT
信号。选项
.B \-f
表示如果这是一个登录 shell，那么不要提示，直接挂起。返回值是 0，除非
shell 是登录 shell 并且没有指定
.B \-f，
或者没有启用作业控制。
.TP
\fBtest\fP \fIexpr\fP
.PD 0
.TP
\fB[\fP \fIexpr\fP \fB]\fP
返回状态值 0 或 1，根据条件表达式
.IR expr
的求值而定。每个操作符和操作数都必须是一个单独的参数。表达式使用上面
.SM
.BR "条件表达式 (CONDITIONAL EXPRESSIONS)"
中的操作构造。
.if t .sp 0.5
.if n .sp 1
表达式可以用下列操作符结合，以优先级的降序列出。
.RS
.PD 0
.TP
.B ! \fIexpr\fP
值为真，如果
.I expr
为假。
.TP
.B ( \fIexpr\fP )
返回 \fIexpr\fP 的值。括号可以用来超越操作符的一般优先级。
.TP
\fIexpr1\fP \-\fBa\fP \fIexpr2\fP
值为真，如果
.I expr1
和
.I expr2
都为真。
.TP
\fIexpr1\fP \-\fBo\fP \fIexpr2\fP
值为真，如果
.I expr1
或
.I expr2
为真。
.PD
.PP
\fBtest\fP 和 \fB[\fP 
使用基于参数个数的一系列规则，对条件表达式进行求值。
.if t .sp 0.5
.if n .sp 1
.PD 0
.TP
0 arguments
表达式为假。
.TP
1 argument
表达式为真，当且仅当参数非空。
.TP
2 arguments
如果第一个参数是 \fB!\fP，表达式为真，当且仅当第二个参数为空。
如果第一个参数是上面
.SM
.BR "条件表达式 (CONDITIONAL EXPRESSIONS)"
中列出的单目条件运算符之一，表达式为真，当且仅当单目测试为真。
如果第一个参数不是合法的单目条件运算符，表达式为假。
.TP
3 arguments
如果第二个参数是上面
.SM
.BR "条件表达式 (CONDITIONAL EXPRESSIONS)"
中列出的二进制条件操作符之一，表达式的结果是使用第一和第三个参数作为操作数的二进制测试的结果。
如果第一个参数是 \fB!\fP，表达式值是使用第二和第三个参数进行双参数测试的结果取反。
如果第一个参数是 \fB(\fP，第三个参数是 \fB)\fP，结果是对第二个参数进行单参数测试的结果。
否则，表达式为假。这种情况下 \fB\-a\fP 和 \fB\-o\fP 操作符被认为二进制操作符。
.TP
4 arguments
如果第一个参数是 \fB!\fP，结果是由剩余参数组成的三参数表达式结果取反。
否则，表达式被根据上面列出的优先级规则解释并执行。
.TP
5 或更多 arguments
表达式被根据上面列出的优先级规则解释并执行。
.RE
.PD
.TP
.B times
对 shell 以及 shell 运行的进程，打印累计的用户和系统时间。
返回状态是 0。
.TP
\fBtrap\fP [\fB\-lp\fP] [\fIarg\fP] [\fIsigspec\fP ...]
当 shell 收到信号
.IR sigspec
时，命令
.I arg
将被读取并执行。如果没有给出
.I arg
或者给出的是
.BR \- ,
所有指定的信号被设置为它们的初始值 (进入 shell 时它们的值)。如果
.I arg
是空字符串，
.I sigspec
指定的信号被 shell 和它启动的命令忽略。如果
.I arg
不存在，并且给出了
.B \-p
那么与每个
.I sigspec
相关联的陷阱命令将被显示出来。如果没有给出任何参数，或只给出了
.B \-p，
.B trap
将打印出与每个信号编号相关的命令列表。每个
.I sigspec
可以是  定义的信号名，或是一个信号编号。
如果
.I sigspec
是
.SM
.B EXIT
(0)，命令 
.I arg
将在 shell 退出时执行。如果
.I sigspec
是
.SM
.BR DEBUG ,
命令
.I arg
将在每个简单命令 (\fIsimple command\fP，参见上面的
.SM
.B SHELL GRAMMAR)
之后执行。如果
.I sigspec
是
.SM
.BR ERR ,
命令
.I arg
将在任何命令以非零值退出时执行。如果失败的命令是
.I until
或
.I while
循环的一部分，
.I if
语句的一部分，
.B &&
或
.B \(bv\(bv
序列的一部分，或者命令的返回值是通过
.BR !
转化而来，
.SM
.BR ERR
陷阱将不会执行。选项
.B \-l
使得 shell 打印信号名和对应编号的列表。
shell 忽略的信号不能被捕捉或重置。在子进程中，被捕捉的信号在进程创建时被重置为初始值。
返回值为假，如果
.I sigspec
非法；否则
.B trap
返回真。
.TP
\fBtype\fP [\fB\-aftpP\fP] \fIname\fP [\fIname\fP ...]
没有选项时，指示每个
.I name
将如何被解释，如果用作一个命令名。如果使用了
.B \-t
选项，
.B type
打印一个字符串，内容是如下之一：
.IR alias ,
.IR keyword ,
.IR function ,
.IR builtin ,
或
.I file ，
如果
.I name
分别是一个别名，shell 保留字，函数，内建命令或磁盘文件。如果没有找到
.I name，
那么不会打印任何东西，返回退出状态假。如果使用了
.B \-p
选项，
.B type
返回如果
.I name
作为命令名，将被执行的磁盘文件名；或者返回空，如果
.if t \f(CWtype -t name\fP
.if n ``type -t name''
不会返回
.IR file .
选项
.B \-P
选项强制对每个 \fIname\fP 搜索
.SM
.B PATH，
即使
.if t \f(CWtype -t name\fP
.if n ``type -t name''
不会返回
.IR file .
如果命令在散列中，
.B \-p
和
.B \-P
将打印散列的值，而不是
.SM
.BR PATH
中首先出现的那一个文件。如果使用了
.B \-a
选项，