s3_aCCess_key:AKIAHSHB43HS3J92MXZ
storage_path:/registry
s3_bucket:acme-docker
s3 region:us-west-1
storage:s3
---
## Page 211
接在一起，如下所示：
15.1使用自定义网桥连接跨主机容器
Ambassador容器解决跨主机的容器互联等。最后，对现有方案的问题进行探讨。
求。这里最核心的问题就是让不同主机中的Docker容器可以互相访问。
举例来说容器的虚拟网卡在主机上看一般叫做veth*而docker0网桥把所有这些网卡桥
在实际应用中，读者可根据自身情况灵活选择或组合几种方案来满足需求。
本章将介绍几种解决方案，包括利用端口映射实现容器之间的快速互联，使用
1:1o:  mtu 1500 qdisc noqueue state UNKNOWN group default
在容器中看到的地址一般是像下面这样的地址：
docker0
bridge name
[root@opnvz~]#brctl show
Docker默认的网桥是docker0。它只会在本机连接所有的容器。
对Docker不熟悉的读者在生产环境中使用Docker的过程中，往往会碰到构建集群的需
inet 127.0.0.1/8scopehost 1o
1ink/1oopback00:00:00:00:00:00brd00:00:00:00:00:00
valid_lft forever preferred_lft forever
8000.56847afe9799
bridge id
构建Docker容器集群
no
STPenabled
veth4061
veth3c7b
口
veth0889
interfaces
第15章
十
---
## Page 212
network/interface文件：
主机主机的容器联网。
中的其他物理机器互联，如图15-1所示。
们之间可以相互通信，而且可以跟同一vlan
桥三就相当于在同一个物理网络中了，
端口映射，即-p参数。
198
首先，创建自己的网桥bro，编辑／etc/
下面以ubuntu系统为例，创建跨多个
例如，主机A 和主机B的网卡一都连着物理交换机的同一个vlan 101，这样网桥一和网
DOCKER_OPTS="-b=brO"
#export TMPDIR="/mnt/bigdrive/docker-tmp"
#This is also a handy place to tweak where Docker's temporary files go.
#DOCKER_OPTS="--dns 8.8.8.8--dns 8.8.4.4"
在本地修改/etc/default/docker文件，添加最后一行内容：
重启后，
dns-nameservers 8.8.8.8 192.168.6.1
bridge_ports em1
gateway 192.168.7.254
netmask 255.255.240.0
iface bro inet static
这样就可以把这个网络看成是一个私有的网络，如果要让外网连接到容器中，就需要做
default qlen 1000
11: etho:  mtu 1500 qdisc pfifo_fast state UP group
#Use DocKER OPTS to modify the daemon startup options
#DocKER="/usr/local/bin/docker"
bridge_stpoff
address 192.168.7.31
autobro
inet6 fe80::487d:68ff:feda:9cf/64 scope 1ink
inet 172.17.0.3/16 scope g1obal eth0
link/ether 4a:7d:68:da:09:cf brd ff:ff:ff:ff:ff:ff
inet6::1/128 scope host
第二部分实战案例
valid_lft forever preferred_lft forever
valid_lft forever preferred_lft forever
，默认将本地物理网卡em1连接到了br0上。
valid_lft forever preferred_lft forever
，而容器一
容器三、
容器一
物理主机A
图15-1路
物理网卡
、容器四也在同一物理网络中了，它
跨主机的Docker容器互联
VLAN
101
物理交换机
VLAN102
容器三
物理主机B
物理网卡
网桥三
---
## Page 213
使用Ambassador容器
器监听在对应端口上，收到请求后再转发请求给服务端容器。
容器；这个请求会被客户端Ambassador转发出去，到达服务端主机。服务端Ambassador容
基本场景
Ambassador容器机制，可以让互联的容器无需知道所在物理主机的IP地址即可互联。
相访问。如果要跨主机实现容器互联，则往往需要容器知道其他物理主机的IP地址。利用
15.2
外部映射端口即可相互联网了。这样实现的主要问题是需要知道容器所在物理主机的IP地址。
以redis镜像为例。
如图15-2所示。当客户端容器要访问服务端容器的时候，直接访问客户端Ambassador
Ambassador容器也是一种Docker容器，它在内部提供了转发服务。
当两个Docker容器在同一主机（或虚拟机）时，可以通过--link命令让两者直接互
这样的情况下，容器端口通过映射直接暴露到物理网络上，多台物理主机的容器通过访问
bro
bridge name
root@ubuntudocker:~#brctl show
2seconds
58b043aa05eb
CONTAINER ID
root@ubuntudocker:~# docker
重启Docker服务后，
在启动Docker的时候使用-b参数可以将容器绑定到指定网桥brO上。
使用Ambassador容器
景
客户端Ambassador容器
客户端主机
8000.7e6e617c8d53
bridgeid
客户端容器
5900/tcp,
desk hz:vl
IMAGE
图15-2通过Ambassador
，再进人容器可以看到它已经连接到物理网络上了
6080/tcp,
COMMAND
ps
物理网络
22/tcp
"/startup.sh"
CREATED
容器实现容器互联
vethe6e5
no
STP enabled
第15章
yanlx
服务端Ambassador容器
服务端主机
服务端容器
STATUS
构建Docker容器集群
eml
interfaces
5days ago
PORTS
NAMES
199
dn
---
## Page 214
的问题。
物理网络的构建，以及通过Ambassador容器来解决容器跨主机情况下通过内网地址访问
15.3
主机的地址。
量转发到指定的地址上：
TCP=tcp:VV():(.*）从中提取IP和端口号，最后利用socat（一个socket转发程序）将流
式，从环境变量中找到包含"TCP"字符串的变量，然后使用正则表达式*_PORT([0-9])
Ambassador镜像的Dockerfile
器内的redis应用：
tcp://x.x.x.x:6379，将本地收集到6379端口的流量转发到服务端物理主机：
监听本地的6379端口：
200
本章介绍了实现Docker容器集群的两种基本方式，通过端口映射方法实现利用外部
这种情况下，需要额外的Ambassador容器，并且也仍然需要知道目标容器所在的物理
MAINTAINER
Ambassador镜像的Dockerfile如下所示。
redis 172.17.0.160:6379> ping
$sudo docker run -i -t -rm -link redis_ambassador:redis relateiq/redis-cli
最后，创建一个客户端容器，
$sudodocker run-d -name redis ambassador
在客户端主机上创建客户端Ambassador容器，告诉它服务端物理主机的监听地址是
$ sudo docker run -d -link redis-server:redis -name redis_ambassador -p
创建一个服务端Ambassador容器redis_ambassador，
首先在服务端主机上创建一个服务端容器redis-server：
第二部分实战案例
CMD
FROM
PONG
6379:6379svendowideit/ambassador
本章小结
envlgrep
docker-ut
PI:EMAIL
_TCP=1seds/.*_PORT_\（[0-9]*\）_TCP=tcp:\/\/\(.*\)：\（.*\)/
，进行测试，默认访问6379端口实际上是访问的服务端容
，其实现十分简单，主要是一行正则表达
-expose 6379 -e REDIS_PORT_6379
连接到服务端容器redis-server，并
sh&&top
---
## Page 215
将在第三部分中进行介绍。
管理。
等项目提供了相对成熟的基于SDN的网络管理方案，已经可以很好地支持容器之间的网络
络虚拟化协议实现跨主机甚至跨物理网络的大二层连通。事实上，管理虚拟机的OpenStack
地址的访问，或者说实现容器的DNS系统。
论的几个补丁以及SkyDNS+SkyDock、etcd、consul等工具，本质上就是实现一套容器名到
定物理地址的访问，无法实现灵活的租户隔离等需求。
到的IP发生变化，原先的连接就无法使用了。同时，底层直接暴露在物理网络上，依赖于指
络提供灵活的跨主机的支持租户隔离的连接。
理，即容器利用固定的名称可以互相访问，即使有容器发生重启；另外一方面是需要底层网
而解决底层网络的灵活连接，则需要使用Overlay技术。这方面可以基于VXLAN等网
要解决容器名称的动态管理，有不同的思路，包括添加反向代理的方式、社区内正在讨
现有的方案，在这两方面的解决并没有做到十分完美。
现在，已经有包括 Shipyard、Kubernetes等项目实现一整套的容器集群管理方案，笔者
实际上，要实现容器集群的管理，关键要实现两方面的需求，
第15章构建Docker容器集群201
191000.禁皮元食公
，一旦容器发生重启，容器内分配
一是容器名称的动态管
---
## Page 216
Chiapetcr16
16.1.1
过程。
16.1
绍了在阿里云上使用Docker的一些特色服务。
项。其中第一节介绍了在阿里云的ECS服务器上安装Docker的详细步骤和用法，第二节介
持。本章将以国内的阿里云为例，介绍在公有云平台上安装、使用Docker的过程和注意事
Rackspace、Softlayer、腾讯云等。
以阿里云提供的CentOS6.5系统和Ubuntu14.04系统为例，介绍安装和使用Docker的
在国内的公有云厂商中，阿里云率先对其ECS服务器上安装Docker提供了更友好的支
通过ssh登录阿里云的服务器，查看系统版本号以及内核版本：
首先，在阿里云网站上申请机器，选择CentOS6.5系统。
Docker目前已经得到了众多的公有云平台的良好支持，包括Aliyun、Amazon、
Release:
Description:
Distributor ID:
LSB Version:
Welcome to aliyun Elastic Compute Service!
$ ssh user@your_aliyun_vm
公有云上安装Docker
CentOS6.5系统
在公有云上使用Docker
第16章
6.5
Centos release 6.5 (Final)
Centos
:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch
福
---
## Page 217
（3.10.28）这2个内核版本，考虑到long-term会长期保持支持和更新，所以选择这个版本：
Install
Transaction Summary
Installing:
Dependencies Resolved
--> Finished Dependency Resolution
Resolving Dependencies
updates/primary_db
updates
extras/primary_db
extras
epel/primary_db
elrepo-kernel/primary_db
elrepo-kernel
elrepo/primary_db
elrepo
base/primary_db
basel
Loaded plugins: security
#rpm--import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
Docker推荐使用3.8以上内核，所以推荐首先升级内核。
1.升级内核
可以看到，内核默认为比较旧的2.6系列版本。
x86_64x86_64x86_64GNU/Linux
-->Package
epel
Linux xxxxxxx 2.6.32-431.23.3.e16.x86_64 #1 SMP Thu Jul 31 17:20:51 UTC 2014
kernel-lt
Package
->Running transactioncheck
#uname -a
Codename:
kernel-1t.x86_640:3.10.59-1.el6.elrepo wi11 be instal1ed
1Package(s)
Arch
x86_64
Final
Version
181
13.7kB
3.10.59-1.el6.elrepo
3.4
3.4
6.3
4.4
2.9
20
709
29
2.9
4.6
备
Repository
00:00
00:00
00:00
00:00
00:01
00:00
00:01
00:00
00:46
00:00
00:00
00:00
第16章在公有云上使用Docker203
elrepo-kernel
Size
33M
---
## Page 218
这里把default=1改为default=0就好了：
204
安装后，检查/etc/grub.conf文件，查看默认的启动内核。新安装的内核一般在第一个，
第二部分实战案例
添加软件源，并安装Docker软件：
2.安装Docker
x86_64 x86_64x86_64 GNU/Linux
Linux xxxxxxx 3.10.59-1.e16.elrepo.x86_64 #1 SMP Thu 0ct 30 23:46:31 EDT 2014
#uname-a
重启云主机，查看内核是否升级成功：
DM rhgb quiet
SYSFoNT=latarcyrheb-sun16 crashkernel=auto
Oace-437f-bc96-057dd64f42ee rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD
title Centos
DM rhgb quiet
SYSFoNT=latarcyrheb-sun16 crashkernel=auto
0ace-437f-bc96-057dd64f42ee rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD
title Cent0s (3.10.59-1.el6.elrepo.x86_64)
hiddenmenu
splashimage=(hd0,0)/boot/grub/splash.xpm.gz
timeout=5
default=1
Complete!
Installed:
Warning:RPMDB alteredoutsideof yum.