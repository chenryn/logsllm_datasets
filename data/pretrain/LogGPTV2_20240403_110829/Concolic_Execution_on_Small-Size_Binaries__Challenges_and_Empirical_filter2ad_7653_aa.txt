title:Concolic Execution on Small-Size Binaries: Challenges and Empirical
Study
author:Hui Xu and
Yangfan Zhou and
Yu Kang and
Michael R. Lyu
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Concolic Execution on Small-Size Binaries:
Challenges and Empirical Study
∗
†
Hui Xu
∗†
, Yangfan Zhou
‡§
, Yu Kang
‡
, Michael R. Lyu
∗†
Shenzhen Research Institute, The Chinese University of Hong Kong
Dept. of Computer Science, The Chinese University of Hong Kong
‡
School of Computer Science, Fudan University
Engineering Research Center of Cyber Security Auditing and Monitoring, Ministry of Education, China
§
Abstract—Concolic execution has achieved great success in
many binary analysis tasks. However, it is still not a primary
option for industrial usage. A well-known reason is that concolic
execution cannot scale up to large-size programs. Many research
efforts have focused on improving its scalability. Nonetheless, we
ﬁnd that, even when processing small-size programs, concolic
execution suffers a great deal from the accuracy and scalability
issues.
This paper systematically investigates the challenges that can
be introduced even by small-size programs, such as symbolic
array and symbolic jump. We further verify that the proposed
challenges are non-trivial via real-world experiments with three
most popular concolic execution tools: BAP, Triton, and Angr.
Among a set of 22 logic bombs we designed, Angr can solve
only four cases correctly, while BAP and Triton perform much
worse. The results imply that current tools are still primitive for
practical industrial usage. We summarize the reasons and release
the bombs as open source to facilitate further study.
I. INTRODUCTION
Recently, concolic (concrete and symbolic) execution has
become an upsurge of interest for code analysis. As an
advanced software testing approach with formal methods, it
shows high impact in the research areas of bug detection [1, 2],
deobfuscation [3, 4], etc, and outperforms other traditional
testing approaches (e.g., random testing) when handling small-
size programs. There are several popular concolic execution
tools available for public usages, such as Angr [5] and
Triton [6]. Along with these tools, many showcases have
been demonstrated. The famous cases are crackme puzzles
in Capture the Flag (CTF) contests [7], and Cyber Grand
Challenge by Defense Advanced Research Projects Agency
(DARPA) [8]. However, concolic execution has not yet gained
wide usage in the industrial area.
One well-known reason is that concolic execution does
not scale to large-size programs. Many approaches have
been proposed to improve the scalability, such as parallel
processing [9], state merging [2], and efﬁcient search strat-
egy [10]. However, we observe that even for many small-size
programs, real-world concolic execution tools cannot achieve
the ideal performance in code coverage. Investigating the
limitations of concolic execution tools and the corresponding
challenges are essential for attracting the attention of research
communities. Also, without a clear understanding of the
usability issues, concolic execution users would not know
whether the technique meets their needs, or how to engage
the technique in a proper way.
In this paper, we systematically investigate the underlying
challenges of concolic execution tools on small-size binary
programs. To this end, we ﬁrst discuss the theoretical
background of concolic execution, and summarize four error
types which may occur during different stages of symbolic
reasoning: Es0, which occurs if symbolic variables are not
correctly declared; Es1, which occurs during instruction
tracing; Es2, which relates to data propagation; and Es3,
which relates to constraint modeling. Then we propose seven
technical challenges that may raise such errors: symbolic
variable declaration, covert symbolic propagation, parallel
program, symbolic array, contextual symbolic value, symbolic
jump, and ﬂoating-point numbers. Incapable of handling the
technical challenges would cause reachable code unexplored,
or vice versa. Further, we propose two scalability challenges
and emphasize that small-size programs may also incur
scalability issues for concolic execution tools. The essential
idea is that small-size programs can have high complexity.
The challenges that can increase program complexity while
incurring a small overhead in program size include: extensively
using external function calls, or using crypto functions (e.g.,
SHA1) which involve complex problems beyond the capability
of computers.
To demonstrate that such challenges are non-trivial for real-
world concolic execution tools, we design a set of programs
which illustrate the challenges, and then evaluate them against
three popular concolic execution tools: BAP [11], Triton [6],
and Angr [5]. Our preliminary results show that each of our
proposed challenges contain samples that cannot be addressed
by all these tools, which implies none of the challenges are
trivial. Speciﬁcally, Angr can only solve four out of 22 cases,
while BAP and Triton perform worse. We further investigate
the causes and ﬁnd that the failures for BAP and Triton are not
only due to the challenges but also by their own deﬁciency and
bugs, such as unsupported instructions. In comparison, Angr
has better support for instruction lifting, as well as employing
some advanced features, such as symbolic memory addressing.
Our work is the ﬁrst systematic study on the challenges
of performing concolic execution on small-size binaries. It
would serve as an essential reference for concolic execution
researchers to improve their tools, and for the users to properly
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.11
181
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:37 UTC from IEEE Xplore.  Restrictions apply. 
use the technique. To better serve the community in this area,
we release our program set as open source.
The rest of this paper is organized as follows. We ﬁrst
introduce the related work in Section II. Then we discuss
the technique of concolic execution in Section III and
propose the challenges accordingly in Section IV. We discuss
our evaluation approach and results in Section V. Finally,
Section VI concludes the paper.
II. RELATED WORK
Concolic execution and symbolic execution have received
extensive attention in the last decade. Existing work in this
area mainly focuses on using the technique to carry out speciﬁc
software analysis tasks (e.g., [1, 3, 4]), or proposing new
approaches to improve performance issues, such as [9, 12].
In such papers, the limitations and challenges of symbolic
executions are occasionally discussed, such as path explosions
in [12], system and library calls in [13]; however, they are not
systematically studied as we do in this paper.
The papers most close to our work are [14, 15], which focus
on investigating the limitations and challenges of software
testing tools with symbolic analysis features. Qu and Robinson
conduct a case study on the limitations of concolic testing tools
for source code(e.g., KLEE) and examined their prevalence in
real-world programs. Concolic testing tools for source code
are different from those for binaries, and they suffer different
challenges. For example, data structures, and pointers are
challenging problems for source code analysis, but binary
programs neither exhibit data structures nor employ pointers.
Another similar work by Cseppento and Micskei also focuses
on symbolic execution techniques for source code [15], which
are different from ours. Because we study the challenges
of an entirely different area, as a result, our evaluation
experiment shares no common tools with any of the two
papers. Another work by Kannavara et al. [16] also points out
several challenges that have hindered the adoption of concolic
execution; however, it does not examine the prevalence of the
challenges in real-world tools.
In a nutshell, this work is a pilot study on the challenges
of concolic execution on small-size binaries. Although some
challenges we discussed in this paper are not newly proposed,
to our best knowledge, we are the ﬁrst to systematically study
them for small-size binary programs.
III. BACKGROUND
A. Theoretical Background
Concolic execution has two phases, a concrete execution
phase and a symbolic reasoning phase. The concrete execution
phase executes the program and generates a trace of executed
instructions, while the symbolic reasoning phase analyzes the
trace and calculates new test cases that can trigger unexplored
control ﬂows. The two phases work alternatively so that all
the possible control ﬂows can be explored eventually.
Formally, we can use Hoare Logic [17] to model
the
symbolic reasoning problem. Hoare Logic is composed of
basic triples {S1}P {S2}, where {S1} and {S2} are the
assertions of symbolic variable states and P is a program
spinet or command. The Hoare triple says if a precondition
{S1} is met, when executing P , it will terminate with the
postcondition {S2}. Using Hoare Logic, a concrete execution
can be modeled as:
{S0}P0{S1, Δ1}P1...{Sn, Δn}Pn
{S0} is the initial symbolic state of the program; {S1} is
the symbolic state before the ﬁrst conditional branch with
symbolic variables; Δi
is the corresponding constraint for
executing the following instructions, and {Si} satisﬁes Δi;
Pi represents a sub-trace of instructions. A symbolic executor
can compute an initial state {S (cid:2)
0} (i.e., the concrete values for
symbolic variables) which can trigger the same sequence of
instructions. This can be achieved by computing the weakest
precondition (aka wp) backward using Hoare Logic:
{Sn−1} = wp(Pn−1{Sn}),
s.t. {Sn} sat Δn
{Sn−2} = wp(Pn−2{Sn−1}),
s.t. {Sn−1} sat Δn−1
...
{S1} = wp(P1{S2}),
s.t. {S2} sat Δ2
{S0} = wp(P0{S1}),
s.t. {S1} sat Δ1
Recursively, we can get a constraint model in conjunction
normal form: δ1 ∧ δ2 ∧ ... ∧ δk. Computing symbolic values
that can satisfy the model is a satisﬁability problem and the
solution is a test case {S (cid:2)
0} that can trigger the same control
ﬂow.
Concolic execution searches test cases that can trigger un-
explored control ﬂows via generating new constraint models.
We may negate δi and cut off the tail instructions to generate
a new constraint model: δ1 ∧ δ2 ∧ ... ∧ δi. Note that, if we do
not remove constraints δi+1 ∧ ... ∧ δk, the constraint models
may have no solutions.
Finally, when sampling {Pi}, not all instructions are useful.
We only keep the instructions whose parameter values depend
on the symbolic variables. We can demonstrate the correctness
by expending any irrelevant instruction Ii to X := E, which
manipulates the value of a variable X with an expression
E. Suppose E does not depend on any symbolic value, then
X would be a constant, and should not be included in the