# Advanced Network Fingerprinting

**Authors:**
- Humberto J. Abdelnur
- Radu State
- Olivier Festor

**Affiliation:**
Centre de Recherche INRIA Nancy - Grand Est  
615, rue du jardin botanique  
Villers-les-Nancy, France  
Emails: {Humberto.Abdelnur, Radu.State, Olivier.Festor}@loria.fr  
Website: [http://madynes.loria.fr](http://madynes.loria.fr)

## Abstract
Security assessments and intrusion detection systems often rely on the automated fingerprinting of devices and services. Most current fingerprinting methods use a signature-matching approach, where traffic from an unknown entity is compared against a set of predefined signatures. The entity is identified by finding the closest match with the stored signatures. However, these signatures are typically manually created, requiring significant effort and specialized expertise. This paper introduces a novel approach to automate this process, enabling the construction of flexible and efficient fingerprinting systems that can identify the source of network messages. Our method employs a passive approach, capturing application-level traffic without interacting with the target device, and uses inherent structural features for classification. We describe and evaluate a new technique for the automated extraction of protocol fingerprints based on arborescent features derived from the underlying grammar. We successfully applied our technique to the Session Initiation Protocol (SIP) used in Voice over IP (VoIP) signaling.

**Keywords:** Passive Fingerprinting, Feature Extraction, Structural Syntax Inference

## 1. Introduction
Many security operations depend on the accurate identification of remote devices or their components, such as network protocol stacks and services. In security assessments, fingerprinting is crucial for evaluating the security of unknown systems. Intrusion detection systems also use this information to detect rogue systems and stealthy intruders. Additionally, blackbox testing for potential copyright infringements relies on network-level traces to determine if protected software is being used unlawfully.

Our work was motivated by the challenge of building a VoIP-specific intrusion detection system. We needed to fingerprint VoIP devices and stacks to detect and block unauthorized or potentially malicious systems. An automated, self-tuning, and self-deploying system was deemed necessary for long-term viability. Our approach involves processing captured and labeled network traffic to identify structural features that serve as differentiators. Common candidates include field types, lengths, and order. While existing systems use such features, they require manual signature creation, which is labor-intensive and time-consuming.

We propose an automated solution that assumes a known syntax specification of the protocol data units. Focusing on SIP, our key contribution is to differentiate stack implementations by analyzing specific patterns in message processing code. This is achieved in two main steps: feature extraction and decision-making. The algorithms and methods supporting this approach are detailed in this paper.

## 2. Structural Protocol Fingerprinting
Most application-level and network protocols use formal grammars for syntax specification. Each message can be represented as a tree-like structure, and stack implementers can be identified by specific subtrees or collections of subtrees in the parse trees. Structural differences between devices can be detected by comparing the underlying parse trees generated from multiple messages. A structural signature is defined by features extracted from these tree structures, which we call fingerprints.

### Types of Signatures
- **Different Field Contents:** Sequences of characters that can determine a signature (e.g., prompts or initialization messages).
- **Different Field Lengths:** The length of a field, especially when the grammar allows repetition (e.g., spaces after a symbol, supported capabilities).
- **Different Field Orders:** When no explicit order is specified, the order of items can be a signature (e.g., how capabilities are advertised).

### Learning and Classification Process
We propose a learning method to automatically identify distinctive structural signatures by analyzing and comparing captured message traces from different devices. The process is illustrated in Figure 1.

**Figure 1. Fingerprinting Training and Classification**

The training phase consists of two phases:
1. **Device Invariant Features:** Classify each field in the grammar to identify fields that may change between messages from the same device.
2. **Inter-Device Features Significance:** Identify invariant fields with different values across at least two groups of devices, which will form part of the signature set.

During classification, the values of each invariant field are extracted and compared to the learned signature values.

## 3. Structural Inference
### 3.1 Formal Grammars and Protocol Fingerprinting
Our approach assumes that an Augmented Backus-Naur Form (ABNF) grammar specification is known for the protocol. The basic elements of a grammar include terminals, non-terminals, choices, sequences, and repetitions. A message is parsed according to the grammar, and each element is placed in an n-ary tree. The rules for constructing the tree are as follows:

- **Terminals:** Leaf nodes with names associated with the terminal value.
- **Non-Terminals:** Internal nodes with a unique child.
- **Sequences:** Internal nodes with a fixed number of children.
- **Repetitions:** Internal nodes with a variable number of children.
- **Choices:** Mark the elected node from a choice item.

Fields can be classified into three categories:
- **Cosmetics Fields:** Mandatory but not useful for fingerprinting.
- **Static Fields:** Values do not change within the same implementation but differ between implementations.
- **Dynamic Fields:** Values change based on semantic aspects of the message.

### 3.2 Node Signatures and Resemblance
Node signatures are defined as a Multi-Set of all partial paths belonging to the sub-branch of the node, excluding cosmetic fields. The resemblance function measures the similarity between two nodes based on the shared shingles of their partial paths.

### 3.3 Structural Difference Identification
Algorithm 1 identifies differences between two nodes sharing the same ancestor path in two trees. The `Report Difference` function creates a structure to store the type of difference, the partial path from the root, and the corresponding values. The `Identify Children Matches` function matches children of different repetition nodes using a similarity matrix.

**Table 1. Partial Paths Obtained from Fig. 3 (d)**

| Partial Paths | Occurrences |
|---------------|-------------|
| Header.0.'Reply' | 1 |
| Header.0.'Reply'.'Reply' | 1 |
| Header.1.? | 2 |
| Header.1.?.SP | 2 |
| Header.1.?.SP.%x20 | 2 |
| Header.1.?.SP.%x20.' ' | 2 |
| Header.2.Method.? | 4 |
| Header.2.Method.?.ALPHA. | 4 |
| Header.2.Method.?.ALPHA.%x41-5A | 4 |
| Header.2.Method.?.ALPHA.%x41-5A.'U' | 1 |
| Header.2.Method.?.ALPHA.%x41-5A.'S' | 1 |
| Header.2.Method.?.ALPHA.%x41-5A.'E' | 1 |
| Header.2.Method.?.ALPHA.%x41-5A.'R' | 1 |

**Note:** Strikethrough paths are considered cosmetics. Quotes define that the current path may be any of the repetition items.

**Algorithm 1. Node Differences Location**

```plaintext
procedure NODEDIFF(nodea, nodeb)
    if Tag(nodea) = Tag(nodeb) then
        if Type(nodea) = TERMINAL then
            if Value(nodea) â‰  Value(nodeb) then
                ReportDifference(Value, nodea, nodeb)
            end if
        else if Type(nodea) = NON-TERMINAL then
            NODEDIFF(nodea.child0, nodeb.child0)
        else if Type(nodea) = SEQUENCE then
            for i = 1 to #nodea do
                NODEDIFF(nodea.childi, nodeb.childi)
            end for
```

This paper is organized as follows: Section 2 describes the overall architecture and operational framework of our fingerprinting system. Section 3 details the structural inference, comparison, and identification of differences based on the underlying grammar. Section 4 introduces the training, calibration, and classification process. Section 5 provides experimental results using SIP as a case study. Section 6 discusses related work, and Section 7 concludes with future directions.