shows that records from a 4-day stale cache are 99.8% accurate.
3.3 Memory Footprint
We now evaluate the memory requirements of the stale cache.
Figure 8 plots both the number of DNS records and the actual mem-
ory used by a stale cache of size 1 to 30 days. As one would expect,
the memory requirements of the stale cache increase as the number
of days increase. Note that the simulated stale cache stores DNS
records without any encoding and hence, there is scope for further
reducing the memory required for the stale cache. More impor-
tantly, the figure shows that even for a network with 1300 hosts and
a query-response rate of ≈25 DNS packets per second, the stale
cache memory footprint is very small. For instance, maintaining
stale records for a period of 30 days given the query pattern in our
trace requires <313MB of storage space.
Of course, the stale cache memory requirements depend on the
number of clients being served by the resolver and their query pat-
terns. Also, the evaluation in the previous section shows that the
gains to be obtained from stale records older than two weeks are
minimal. These factors suggest that, in practice, resolvers will keep
stale records only for a configurable number of days, for example
stale records for the past couple of weeks. Further, the resolver
will be limited to at most a certain amount of memory for the stale
cache.
In case the stale cache fills up, the resolver would evict
records based on some criterion. For instance, the resolver could
use the query pattern of clients to evict the least recently used DNS
records (LRU eviction). However, given the amount of memory on
modern machines, we believe that resolvers should easily be able to
maintain a stale cache containing records for a couple of weeks and
there shouldn’t be a need for more complex eviction algorithms. In
section 4.2 we discuss how placing a limit on the duration for which
stale records are kept addresses some of the practical concerns aris-
ing out of the use of stale information.
4. DISCUSSION
There have been a number of “clean-slate” proposals to make
the availability of specific nameservers less critical for the oper-
ation of Internet’s naming system. These proposals [7-9,12,22,24]
decouple the ownership of names from the task of distributing them
and try to architect a robust mechanism for distributing the names.
However, such an approach could increase the total DNS overhead
many times over, especially in the face of the use of DNS for load
balancing purposes. On a more general note, while most of us agree
that DNS is afﬂicted by a few problems, we think that a majority
of them can be attributed to misconfigurations, improper imple-
mentations, violations of best current practices, or even a lack of
motivation to address them and not to major architectural ﬂaws.
For example, problems regarding high lookup latency can mostly
be attributed to misconfigurations (i.e. broken and inconsistent del-
egations) [22] and the long timeouts used by resolvers in case of
errors [19]. Consequently, despite a number of proposals arguing
to the contrary, we do not see a pressing need for an architectural
change. Guided by this observation, our proposal represents an
exercise in showing how minor operational modifications can ad-
dress DNS problems; specifically, modifying the caching behav-
ior of DNS resolvers can reduce the impact of ﬂooding attacks on
DNS.
In the rest of this section we discuss the advantages of the pro-
posed modification and a few possible objections to it.
4.1 Pros
DNS Robustness. The proposed modification ensures that re-
solvers can respond to queries for a zone even if the zone’s author-
itative nameservers are unavailable, assuming that the resolver has
queried the zone at some point in past and the previous response is
present in the resolver’s stale cache. The evaluation in the previ-
ous section showed that a stale cache can indeed make DNS more
robust to DoS ﬂooding attacks. Further, while past attempts such
as the anycasting of DNS nameservers provide nameserver opera-
tors with a mechanism, albeit a very expensive one, to protect the
name resolution for their zones, our modification represents an in-
surance policy that can be adopted by the resolver operators and
hence, provides some control to the client.
Simplicity. The biggest argument in favor of the stale cache as a
means of increasing DNS robustness is its simplicity. The proposed
scheme:
• Does not change the basic protocol operation and infrastruc-
ture; only the caching behavior of resolvers is modified.
• Does not impose any load on DNS, since it does not involve any
extra queries being generated.
• Does not impact the latency of query resolution, since the stale
cache is utilized only when the query resolution fails.
Incremental Deployment. Any single resolver can adopt the mod-
ifications proposed in this paper and achieve significant protec-
tion from attacks against the DNS servers it and its clients access.
Hence, the proposal can be incrementally deployed.
Motivation for Deployment. Modifying a resolver is beneficial
for the clients being served by the it since the resolver can resolve
queries for zones that have been accessed by it in the past even
if the nameservers for the zones are not available. Hence, there
is motivation for the resolver operators to switch to the modified
resolver.
4.2 Objections
DNS caching semantics and the possibility of inaccurate infor-
mation being used. The biggest objection against the proposed
modification is that it changes the semantics of DNS caching. With
the current DNS specifications, a zone operator can expect the reco-
-rds served by the zone’s authoritative nameservers to be completely
expunged by resolvers within TTL seconds. With our proposal,
such records would be evicted to the stale cache. The problem with
such an approach is best explained through an example. Let’s con-
sider a zone whose records have been updated. Also, consider a
resolver that has accessed the zone but not since the update and so
the zone’s records in the resolver’s stale cache are obsolete or in-
accurate. Given this, if the resolver needs to resolve a query for
the zone at a time when all the zone’s authoritative nameservers are
unreachable, it would resort to using the inaccurate records present
in its stale cache.
The problematic scenario described above arises only when two
conditions are met:
1. The DNS records for the zone in question have been updated
since the last access by the resolver.
2. The nameservers for the zone are currently inaccessible.
Condition (1) can arise due to several reasons: for instance, the
nameservers for a zone have been moved, the service itself has mi-
grated or there have been address space changes, DNS based load-
balancing across the nameservers or the application servers, etc.
We consider these below.
First, if the nameservers have been moved, the name resolution
may fail while if the service migrates, the name may be resolved
to the wrong address. Both these are undesirable scenarios. How-
ever, restricting the duration for which resolvers can keep records
in their stale cache helps us avoid these. Specifically, to account
for this, a nameserver/service needs to be run on both its old and
new address for a couple of weeks after migration. This allows for
the old records to be ﬂushed from the stale cache of resolvers. Note
that zone operators anyway need to do this today since a large num-
ber of misbehaving resolvers disregard TTL values and use expired
records even when the nameservers for a zone are available [32,34].
Second, if the DNS records have been changed to balance client
load, the name would probably resolve properly but this might in-
terfere with the load across the servers. In a recent study, Poole et.
al. [21] found that name-to-IP mappings tend to be very stable with
less than 2% of DNS names changing IP addresses more than once
a week. Further, most of these names can be attributed CDNs like
Akamai trying to balance client load across their servers.6 This im-
plies that not only is condition (1) rare, in a vast majority of cases
where it does occur, using the stale records would not lead to wrong
resolution. While this is far from perfect, the small possibility of
load imbalance across the servers when they are under attack (in
which case the load balancing isn’t working anyway) seems like a
small price to pay for the robustness offered by a stale cache. Also,
the possibility of a resolver using inaccurate records for a zone is
much less for zones that the resolver frequently accesses.
Further, resolvers may choose to apply the modified caching sch-
-eme to infrastructure records only. Infrastructure records, as de-
fined by [17], refer to records used to navigate across delegations
between zones and include the NS records (and the corresponding
A records) for zones. Past studies show that such records change
even more infrequently [9,17] than other DNS records and hence,
this would further reduce the possibility of resolvers using inaccu-
rate records while still providing a large robustness gain.
Finally, it is also possible to make changes on the client-side
DNS software to make applications aware of the use of stale records.
A resolver could use the RCODE field in the DNS header (a 4-
bit field; values 5-16 for this field have been reserved for future
6The fact that the actual DNS names in our trace have been
anonymized implies that we cannot determine if the changed map-
pings observed by us can also be attributed to CDNs.
use [14]) to inform the querying client that the response is based
on the stale cache. Similarly, the client gethostbyname and the
relevant libresolv functions could be modified to interpret the
new RCODE value and inform applications of the same. With these
changes in place, applications would have the ﬂexibility of being
able to account for the possibility of inaccurate records and decide
whether to use stale records or not based on application seman-
tics and/or user choice. However, most applications that need to
make sure that they are accessing the right resource use application-
specific authentication anyway; for instance, financial web-sites
commonly use personalized site-keys for this purpose [33]. This,
combined with the fact that the possibility of stale records being
inaccurate (especially ones that lead to wrong resolution of names)
is miniscule, implies that we don’t feel that the overhead of modi-
fying the DNS-software at all clients is justified.
Autonomy for zone operators. Another important concern is that
the proposed modification would seem to move autonomy away
from zone operators to resolver operators. Allowing resolvers to
store records after their TTL value has expired suggests that zone
operators do not control the access to their sub-zones; for instance,
they could not kill off their sub-zones when they wish to.
However, this is not the case. The fact that we don’t modify
DNS’s hierarchical resolution process implies that resolvers still
need to go through the nameservers for a zone in order to access
its sub-zones and hence, the autonomy of zone operators is not af-
fected. For instance, let’s assume that the operator for the zone
.com needs to kill off the sub-zone .rogue.com. Typically, this
would involve .com’s zone operator configuring the zone’s author-
itative nameservers to respond to any queries regarding .rogue.edu
with a NXDOMAIN, implying that no such domain exists. Con-
sequently, a resolver trying to resolve a query like the A record
for www.rogue.- -com by traversing down the DNS zone hierar-
chy would receive a NXDOMAIN response from one of the .com
nameservers and would forward this to the client that originated
the query. Further, this response would be cached and eventually
be evicted to the stale cache. Thus, if there are any such future
queries at a time when all the .com nameservers are unavailable,
the resolver would still return a NXDOMAIN response.
Attackers attempting to force the use of inaccurate information.
Apart from the possibility of inaccurate data being used, there is
also the possibility of attackers taking advantage of the stale cache
maintained by resolvers to force the use of inaccurate records. At-
tackers may keep track of updates to the records of a zone and start
ﬂooding the authoritative nameservers for the zone as soon as some
of the records are updated.
If the attack overwhelms the zone’s
nameservers, resolvers trying to resolve the zone’s records would
rely on the obsolete data stored in their stale cache. In effect, at-
tackers can now ﬂood the nameservers for a zone in order to delay
the propagation of updates to the zone’s records for the duration of
the attack. While we cannot imagine many cases where such an
attack could be used, one scenario where it does appear to be harm-
ful is to undermine the autonomy of zone-operators. In the exam-
ple above, the owners of the .rouge.com zone may ﬂood the .com
nameservers to force the use of stale NS records for their zone and
hence, prevent their zone from being killed. The bigger problem
here is that there is incentive to ﬂood the nameservers of a zone
to prevent sub-zones from getting killed. This problem captures
an inherent trade-off that the use of stale records exposes: when a
zone’s nameservers are being ﬂooded, all sub-zones, including sub-
zones that were deleted in the recent past, are accessible. While this
is certainly a serious concern, it is important to note that the sub-
zones will stay alive only as long as the zone’s nameservers are
inaccessible. Given that measures to counter ﬂooding attacks on
nameservers, such as filtering by ISPs, are usually applied within a
day or two of the attack, the sub-zones would be able to stay alive
for not too long a duration.
Privacy Concerns. With our proposal, DNS resolvers store DNS
records long beyond their TTL-values. This leads to privacy con-
cerns in case the resolver is broken into. Specifically, if a resolver
were to be compromised, the attacker would gain access to all the
stale cache records and hence, would have a heap of information
about what the resolver’s clients have been querying and in turn,
their web-access patterns. However, the stale cache would not pro-
vide the attacker with information about queries from individual
clients. Also, this is certainly no worse than other DoS mitigation
proposals that require DNS resolvers to query entities other than a
zone’s authoritative nameservers to resolve the zone’s records and
hence, leak out private information as an integral part of their oper-
ation.
Resolution latency in the face of an attack. In our proposal, if a
resolver is unable to reach the authoritative nameservers of a zone,
it resorts to using the zone’s records in the stale cache. Conse-
quently, the resolver must query each of the nameservers for the
zone, wait for the query to timeout (and possibly retry) before it
can use the stale cache. With the current timeout values used by
resolvers, this would entail a high lookup latency in the face of at-
tacks (i.e. when the nameservers for a zone are unavailable). For
example, the default configuration for the BIND8 resolver [31] in-
volves sending queries to each nameserver for 30 seconds with an
exponentially increasing period between consecutive retries. So,
clients accessing a zone with two authoritative nameservers at a
time when both of them are unavailable would need to wait for 60
seconds before receiving a reply. However, most resolvers allow
the retry and timeout values to be configured and hence, the lookup
latency problem can be solved by using aggressive values for these
timers. As a matter of fact, past work has already suggested that
these timer values are major contributors to the high lookup latency
when errors are encountered [19].
DoS’ing the application servers. The proposed modification does
not reduce the vulnerability of nameservers to DoS attacks. Con-
sequently, attackers can still ﬂood them so that they are unable to
serve (and update) the records of the corresponding zones. Rather,
the modification makes the availability of DNS nameservers less
critical and hence, significantly reduces the impact of DoS attacks
on DNS.
Further, the proposal does not address the general DoS problem
and attackers can deny service to clients by attacking the applica-
tion servers instead of the corresponding DNS nameservers. As a
matter of fact, a ﬂooding attack that chokes the network bottleneck
for a zone’s nameservers is also likely to hamper the availability of
the zone’s application servers. In such a scenario, there isn’t much
value to being able to resolve the names for the application servers
since clients would not be able to reach them anyway.7 In effect,
this concern boils down to how common is it for application servers
and their nameservers to share a network bottleneck. We intend to
measure this for nameservers on the Internet as part of our future
work.
Interaction with DNSSec. The proposal does not have any harm-
ful interactions with or implications for DNSSec. In case the re-
solver cannot reach the nameservers of a zone and relies on the cor-
responding records in the stale cache, the records ought to be classi-
7Note that there is still a lot of value to being able to access the sub-
zones when a zone’s nameservers are being ﬂooded. For example,
being able to access the rest of the name system when the root-
servers are being ﬂooded.
fied as “Undetermined” by the resolver.8 Hence, any DNSSec poli-
cies expressed by the resolver operator for undetermined records
naturally apply to the stale records.
5. RELATED WORK
A number of recent efforts [7-9,22,24] have proposed new ar-
chitectures for the next generation Internet naming system that ad-
dress DNS’s performance and robustness problems. Other propos-
als to change the DNS architecture include multicasting the global
DNS database to specialized servers to reduce the response time
for clients [12] and augmenting the DNS structure with additional
pointers that can be used to access sub-zones and hence, increase
DNS robustness against ﬂooding attacks [25]. [20] argues for tak-
ing advantage of site multihoming by spreading the identity of end
hosts and rate-limiting name resolution requests to mitigate DoS
attacks. Balakrishnan et al. [1] propose to replace the hierarchical
DNS (and URL) namespace with ﬂat identifiers. We show that a
minor operational change to resolvers in the existing DNS frame-
work can significantly mitigate the impact of DoS attacks on DNS.
The use of caches and more generally, of stale data to improve
system availability shows up in many aspects of computer science.
Examples include using stale data to improve availability of ser-
vices [13] and even shared memory multiprocessors [23]. [15] pro-
poses and evaluates the use of stale data to reduce the measurement
overhead for placement of services on the Internet. This paper eval-
uates the efficacy of stale data in increasing DNS availability.
Pappas et al. [17] argue for the use of long TTL values for in-
frastructure DNS records as a means of alleviating the impact of
DoS attacks on DNS. We share with their proposal the basic notion
of using records already present in the resolver cache for a longer
period. While our proposal involves changing the caching behavior
of resolvers, using longer TTL values for a zone’s records involves
a minor configuration change at the zone’s nameservers and hence,
does not necessitate any software update. However, using long TTL
values represents a technique that can be used by nameserver op-
erators. Also, long TTL-values make it harder for operators to up-
date their records. In subsequent work [18], the authors augment
their proposal and argue for resolvers proactively renewing the in-
frastructure records present in their cache as a means of mitigating
attack impact. This scheme has an important advantage over the
use of stale records: it does not modify DNS caching semantics.
However, as shown in [18], proactive renewal of DNS records by
resolvers, when used in isolation, increases DNS traffic many times
over. Further, the overhead of such an approach implies that it can-
not be used for non-infrastructure DNS records, a large fraction of
which don’t change very rapidly.
In past work [2], we discuss the use of stale DNS records as a
DoS mitigation mechanism. This paper follows up on that proposal
and quantifies the advantage of a stale cache and the possibility of
using obsolete information through trace-based simulations. Non-
amed [35] is a quasi DNS resolver that provides users the option
of using stale DNS information which maybe be useful for opera-
tion when disconnected from the Internet. We argue for the use of
a zone’s stale records only when all nameservers for the zone are
unavailable. Cohen and Kaplan [6] propose the use of stale DNS
records for improving DNS performance. This involves fetching
data based on the stale records and issuing a DNS query to refresh
the stale record concurrently. CoDNS [19] is a cooperative DNS
lookup service designed to alleviate client-side DNS problems. We
share with their proposal the notion of client-side (i.e.
resolver-
8Undetermined records correspond to records resulting from a non-
DNSSec lookup [30].
side) changes to address DNS problems. While CoDNS involves
resolvers co-operating amongst each other to mask resolver-side
issues, we propose that resolvers use local storage to insure them-
selves (and their clients) against DoS attacks on DNS.
There have also been studies to determine the characteristics of
the existing DNS architecture. Jung et. al. [11] use DNS traces to
study client-perceived DNS performance and the effectiveness of
client caching. They found name accesses to be heavy-tailed which
also shows up in our measurements as the diminishing returns of
increasing the stale cache size. [16] studied both the deployment
patterns and the availability of DNS name servers while [4] mea-
sured the performance of the E root-server and observed instances
of DoS attacks wherein the root-server was used as reﬂector.
6. FUTURE WORK
This paper presents a very simple modification to the caching be-
havior of DNS resolvers. A preliminary evaluation based on DNS-
traces collected at Cornell University shows that stale records can
be quite effective in mitigating the impact of DoS attacks on DNS.
While the proposed modification certainly has some drawbacks, the
cost-benefit ratio, especially given the frequency and the impact of
DoS attacks, appears to favor the use of the stale cache. However,
a few aspects of our proposal require more work. For instance,
privacy concerns implied that we had to anonymize the collected
DNS traces and hence, were not able to study the DNS records that
would have been inaccurate had they been used as stale records
in the face of an attack. Specifically, we would have liked to de-
termine if this was due to load-balancing across nameservers and
if the clients would still have been able to access the desired re-
source. We are in the process of obtaining the relevant part of the
unanonymized trace to answer this and similar questions.
We are currently implementing the proposed modification into
dbjdns [3], a popular DNS resolver. We also intend to explore the
possibility of implementing this as an add-on to the CoDNS reso-
lution service [19] running on PlanetLab [5]. Apart from clearing
up the implementation issues, such an exercise would help us ana-
lyze the advantages of maintaining a stale cache in the face of ac-
tual attacks (which occur frequently enough to make this exercise
worthwhile!).
Acknowledgements
We would like to thank Larry Parmelee at CFS for his help and
patience with the DNS collection process. We are also grateful
to Paul Vixie at ISC for helpful discussions on why this proposal
should “not” be incorporated in DNS resolvers.
7. REFERENCES
[1] H. Balakrishnan, K. Lakshminarayanan, S. Ratnasamy,
S. Shenker, I. Stoica, and M. Walfish, “A Layered
Naming Architecture for the Internet,” in Proc. of ACM
SIGCOMM, 2004.
[2] H. Ballani and P. Francis, “A Simple Approach to DNS
DoS Mitigation,” in Proc. of workshop on Hot Topics in
Networks, Nov 2006.
[3] D. J. Bernstein, “djbdns: Domain Name System Tools,”
Apr 2008, http://cr.yp.to/djbdns.html.
[4] N. Brownlee, k claffy, and E. Nemeth, “DNS
Measurements at a Root Server,” in Proc. of Globecom,
2001.
[5] B. Chun, D. Culler, T. Roscoe, A. Bavier, L. Peterson,
M. Wawrzoniak, and M. Bowman, “PlanetLab: An
Overlay Testbed for Broad-Coverage Services,” ACM
SIGCOMM Computer Communication Review, vol. 33,
no. 3, July 2003.
[6] E. Cohen and H. Kaplan, “Proactive Caching of DNS
Records: Addressing a Performance Bottleneck,” in Proc.
of Symposium on Applications and the Internet, 2001.
[7] R. Cox, A. Muthitacharoen, and R. T. Morris, “Serving
DNS using a Peer-to-Peer Lookup Service,” in Proc. of
IPTPS, 2002.
[8] T. Deegan, J. Crowcroft, and A. Warfield, “The Main
Name System: An Exercise in Centralized Computing,”
SIGCOMM Comput. Commun. Rev., vol. 35, no. 5, 2005.
[9] M. Handley and A. Greenhalgh, “The Case for Pushing
DNS,” in Proc. of Hotnets-IV, 2005.
[10] T. Hardy, “RFC 3258 - Distributing Authoritative Name
Servers via Shared Unicast Addresses,” April 2002.
[11] J. Jung, E. Sit, H. Balakrishnan, and R. Morris, “DNS
performance and the effectiveness of caching,”
IEEE/ACM Trans. Netw., vol. 10, no. 5, 2002.
[12] J. Kangasharju and K. W. Ross, “A Replicated
Architecture for the Domain Name System,” in Proc. of
INFOCOM, 2000.
[13] R. Ladin, B. Liskov, L. Shrira, and S. Ghemawat,
“Providing high availability using lazy replication,” ACM
Trans. Comput. Syst., vol. 10, no. 4, 1992.
[14] P. Mockapetris, “RFC 1035, DOMAIN NAMES -
IMPLEMENTATION AND SPECIFICATION,” Nov
1987.
[15] D. Oppenheimer, B. Chun, D. Patterson, A. C. Snoeren,
and A. Vahdat, “Service placement in a shared wide-area
platform,” in Proc. of the USENIX ’06 Annual Technical
Conference, 2006.
[16] J. Pang, J. Hendricks, A. Akella, R. D. Prisco, B. Maggs,
and S. Seshan, “Availability, usage, and deployment
characteristics of the domain name system,” in Proc. of
Internet Measurement Conference, 2004.
[17] V. Pappas, B. Zhang, E. Osterweil, D. Massey, and
L. Zhang, “Improving DNS Service Availability by Using
Long TTLs,” draft-pappas-dnsop-long-ttl-02, June 2006.
[18] V. Pappas, D. Massey, and L. Zhang, “Enhancing DNS
Resilience against Denial of Service Attacks,” in Proc. of
Conference on Dependable Systems and Networks (DSN),
2007.
[19] K. Park, V. Pai, L. Peterson, and Z. Wang, “CoDNS:
Improving DNS Performance and Reliability via
Cooperative Lookups,” in Proc. of USENIX OSDI, 2004.
[20] D. S. Phatak, “Spread-Identity mechanisms for DOS
resilience and Security,” in Proc. of SecureComm, 2005.
[21] L. Poole and V. S. Pai, “ConfiDNS: leveraging scale and
history to improve DNS security,” in Proc. of the 3rd
USENIX Workshop on Real, Large Distributed Systems
(WORLDS), 2006.
[22] V. Ramasubramanian and E. G. Sirer, “The Design and
Implementation of a Next Generation Name Service for
the Internet,” in Proc of ACM SIGCOMM, 2004.
[23] D. Soring, “Using lightweight checkpoint/recovery to
improve the availability and designability of shared
memory multiprocessors,” Ph.D. dissertation, University
of Wisconsin-Madison, 2002.
[24] M. Theimer and M. B. Jones, “Overlook: Scalable Name
Service on an Overlay Network,” in Proc. of ICDCS,
2002.
[25] H. Yang, H. Luo, Y. Yang, S. Lu, and L. Zhang,
“HOURS: Achieving DoS Resilience in an Open Service
Hierarchy,” in Proc. of Conference on Dependable
Systems and Networks (DSN), 2004.
[26] “Microsoft DDoS Attack, NetworkWorld,” Jan 2001,
http://www.networkworld.com/news/2001/
0125mshacked.html.
[27] “Root Server DDoS Attack, RIPE Mail Archive,” Nov
2002, https://www.ripe.net/ripe/maillists/archives/eof-list/
2002/msg00009.html.
[28] “Akamai DDoS Attack, Internet Security News,” Jun
2004, http://www.landfield.com/isn/mail-archive/2004/
Jun/0088.html.
[29] “UltrDNS DDoS Attack, Washington Post,” May 2005,
http://blog.washingtonpost.com/securityfix/2006/05/
blue security surrenders but s.html.
[30] “CISCO DNSSEC page,” Aug 2006,
http://www.cisco.com/web/about/ac123/ac147/
archived issues/ipj 7-2/dnssec.html.
[31] “Internet Systems Consortium,” Aug 2006,
http://www.isc.org/.
[32] “SLASHDOT: Providers Ignoring DNS TTL?” Aug
2006, http://ask.slashdot.org/article.pl?sid=05/04/18/
198259&tid=95&tid=128&tid=4.
[33] “SiteKey at Bank of America,” Jul 2007,
http://www.bankofamerica.com/privacy/sitekey/.
[34] “DNS - What do big sites do?” Aug 2008, http:
//forum.powweb.com/archive/index.php/t-54961.html.
[35] “nonamed - Man page,” Aug 2008,
http://www.minix3.org/previous-versions/Intel-2.0.3/
wwwman/man8/nonamed.8.html.