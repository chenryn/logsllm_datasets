```
LIBCLANG_PATH=/path/to/libclang make -j LLVM=1 bzImage
```
这里我们使用 `clang` 作为默认的内核编译器，使用 `gcc` 理论上是可以的，但还处于 [早期实验](https://github.com/Rust-for-Linux/linux/blob/rust/Documentation/rust/quick-start.rst#building) 阶段。
### Rust 是如何集成进内核的
#### 目录结构
为了将 Rust 集成进内核中，开发者首先对 Kbuild 系统进行修改，加入了相关配置项来开启/关闭 Rust 的支持。
此外，为了编译 `rs` 文件，添加了一些 `Makefile` 的规则。这些修改分散在内核目录中的不同文件里。
Rust 生成的目标代码中的符号会因为 `Mangling` 导致其长度超过同样的 C 程序所生成符号的长度，因此，需要对内核的符号长度相关的逻辑进行补丁。开发者引入了 “大内核符号”的概念，用来在保证向前兼容的情况下，支持 Rust 生成的目标文件符号长度。
其他 Rust 相关的代码都被放置在了 `rust` 目录下。
#### 在 Rust 中使用 C 函数
Rust 提供 FFI（ 外部函数接口   Foreign Function Interface ）用来支持对 C 代码的调用。[Bindgen](https://github.com/rust-lang/rust-bindgen) 是一个 Rust 官方的工具，用来自动化地从 C 函数中生成 Rust 的 FFI 绑定。内核中的 Rust 也使用该工具从原生的内核 C 接口中生成 Rust 的 FFI 绑定。
```
quiet_cmd_bindgen = BINDGEN $@
      cmd_bindgen = \
	$(BINDGEN) $` 和 `Result<>` 就是 `core` 库所提供。
这个库被交叉编译后被直接链接进内核镜像文件，这也是导致启用 Rust 的内核镜像文件尺寸较大的原因。在未来的工作中，这两个库会被进一步被优化，去除掉某些无用的部分，例如浮点操作，Unicode 相关的内容，Futures 相关的功能等。
之前的 Rust for Linux 项目还依赖于 Rust 的 `alloc` 库。Rust for Linux 定义了自己的 `GlobalAlloc` 用来管理基本的堆内存分配。主要被用来进行堆内存分配，并且使用 `GFP_KERNEL` 标识作为默认的内存分配模式。
不过在在最新的 [拉取请求](https://github.com/Rust-for-Linux/linux/pull/402) 中，社区已经将移植并修改了 Rust的 `alloc` 库，使其能够在尽量保证与 Rust 上游统一的情况下，允许开发者定制自己的内存分配器。不过目前使用自定义的 `GFP_` 标识来分配内存依然是不支持的，但好消息是这个功能正在开发中。
### “Hello World” 内核模块
用一个简单的 Hello World 来展示如何使用 Rust 语言编写驱动代码，`hello_world.rs`:
```
#![no_std]
#![feature(allocator_api, global_asm)]
use kernel::prelude::*;
module! {
    type: HelloWorld,
    name: b"hello_world",
    author: b"d0u9",
    description: b"A simple hello world example",
    license: b"GPL v2",
}
struct HelloWorld;
impl KernelModule for HelloWorld {
    fn init() -> Result {
        pr_info!("Hello world from rust!\n");
        Ok(HelloWorld)
    }
}
impl Drop for HelloWorld {
    fn drop(&mut self) {
        pr_info!("Bye world from rust!\n");
    }
}
```
与之对应的 `Makefile`：
```
obj-m := hello_world.o
```
构建：
```
make -C /path/to/linux_src M=$(pwd) LLVM=1 modules
```
之后就和使用普通的内核模块一样，使用 `insmod` 工具或者 `modprobe` 工具加载就可以了。在使用体验上是没有区别的。
#### `module! { }` 宏
这个宏可以被认为是 Rust 内核模块的入口，因为在其中定义了一个内核模块所需的所有信息，包括：`Author`、`License`、`Description` 等。其中最重要的是 `type` 字段，在其中需要指定内核模块结构的名字。在这个例子中：
```
module! {
    ...
    type: HelloWorld,
    ...
}
struct HelloWorld;
```
#### `module_init()` 与 `module_exit()`
在使用 C 编写的内核模块中，这两个宏定义了模块的入口函数与退出函数。在 Rust 编写的内核模块中，对应的功能由 `trait KernelModule` 和 `trait Drop` 来实现。`trait KernelModule` 中定义 `init()` 函数，会在模块驱动初始化时被调用；`trait Drop` 是 Rust 的内置 trait，其中定义的 `drop()` 函数会在变量生命周期结束时被调用。
#### 编译与链接
所有的内核模块文件会首先被编译成 `.o` 目标文件，之后由内核链接器将这些 `.o` 文件和自动生成的模块目标文件 `.mod.o` 一起链接成为 `.ko` 文件。这个 `.ko` 文件符合动态库 ELF 文件格式，能够被内核识别并加载。
### 其他
完整的介绍 Rust 是如何被集成进内核的文章可以在 [我的 Github](https://github.com/d0u9/Linux-Device-Driver-Rust/tree/master/00_Introduction_to_Rust_Module_in_Linux) 上找到，由于写的仓促，可能存在一些不足，还请见谅。
---
作者：苏子彬，阿里云 PAI 平台开发工程师，主要从事 Linux 系统及驱动的相关开发，曾为 PAI 平台编写 FPGA 加速卡驱动。