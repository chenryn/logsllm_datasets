# 【CTF攻略】FlappyPig HCTF2016 Writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
**作者：**[ **FlappyPig**
****](http://bobao.360.cn/member/contribute?uid=1184812799)
**预估稿费：600RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆 **[
**网页版**](http://bobao.360.cn/contribute/index)** 在线投稿**
**Flip**
**一．本题是一个linux下的qt程序。**
主要分成三个部分
1.一个多阶Flip game
2.一个三阶错乱的Flip game
3.一个内存中执行的三阶Flip game,执行操作由第二个游戏的步子有关。
**二．第一关游戏很简单，从主对角线开始一直走对角线即可。**
或者爆破406035这个位置
**三．第二关是一个错位的Flip game**
所谓的错乱就是错乱了逻辑，例如一个正常的3*3 Flip逻辑为
1 2 3 1 3 2
4 5 6 错乱之后为 7 9 8
7 8 9 4 6 5
第二关最多只能有7步，超过7步就算失败
所以需要遍历出第二关所有的走法
所有可能如下
    [1, 3, 2, 9, 4, 5, 3]
    [1, 3, 2, 9, 5, 3, 4]
    [1, 3, 2, 9, 5, 4, 3]
    [1, 7, 4, 9, 2, 5, 7]
    [1, 7, 4, 9, 5, 2, 7]
    [1, 7, 4, 9, 5, 7, 2]
    [2, 1, 7, 4, 9, 5, 7]
    [2, 7, 9, 4, 5, 7, 1]
    [2, 7, 9, 5, 4, 7, 1]
    [2, 9, 7, 4, 5, 7, 1]
    [2, 9, 7, 5, 4, 7, 1]
    [3, 4, 9, 2, 5, 3, 1]
    [3, 4, 9, 5, 2, 3, 1]
    [3, 9, 2, 5, 3, 1, 4]
    [3, 9, 5, 2, 3, 1, 4]
    [4, 1, 3, 2, 9, 5, 3]
    [4, 3, 9, 2, 5, 3, 1]
    [4, 3, 9, 5, 2, 3, 1]
    [4, 9, 3, 2, 5, 3, 1]
    [4, 9, 3, 5, 2, 3, 1]
    [7, 2, 9, 4, 5, 7, 1]
    [7, 2, 9, 5, 4, 7, 1]
    [7, 9, 4, 5, 7, 1, 2]
    [7, 9, 5, 4, 7, 1, 2]
    [9, 3, 2, 5, 3, 1, 4]
    [9, 3, 5, 2, 3, 1, 4]
    [9, 7, 4, 5, 7, 1, 2]
    [9, 7, 5, 4, 7, 1, 2]
**四 **．** 过了第二关之后出现一个flag提交窗口，submit的按钮事件位于sub_407170**
判断输入的长度是不是为32之后调用函数sub_406a80
在sub_406a80中会根据第二关的步骤，去解码第三关的执行步骤。
第二关的走法会影响后续的走法解码（因为之前是直接爆破的所及在在这里卡了很久）。
第二关走的位置和对应的内存数据对应关系如下:
    1=>0，2=>2，3=>1，4=>6，5=>8，7=>3，9=>4
得到被分解之后的key，所谓分解就是
将输入的ascii分解，成两个字节的的表示，低位放低位高位放高位。
例如
    输入 1234
    Ascii  31 32 33 34
    分解  01 03 02 03 03 03 04 03
之后会判断key的后六位
最后六位为74343}
然后定位到分解后的key第一位和分解后key的倒数第七位，获取以后传入sub_406780,也就是game3_flip,最后从头部和尾部往中间逼近。
本题最主要的逻辑在函数sub_406780处
分析后函数如下
主要逻辑已经注释，就是传入a2,a3两个参数用来控制flip
game的起始状态，a4是解码后的game3_steps,在game3_steps中遇到0即进行判断是否灯全灭。
由于可以知道forword_char的第一位是8（h分解为08和06），那么可以推测第一步flip的初始状态为
FF FF 00 00 FF 00
00 00 00 或者 00 00 00
00 00 00 00 00 00
用之前获得的走法去解码，game3_steps打印出第一个0之前有效操作。
可以看到一个符合条件的走法
8310，对应的Game2_step
    [4, 9, 3, 5, 2, 3, 1]
解码后的Game3_step
    8,3,1,0,
    9,7,5,3,1,0,
    9,7,2,0,
    9,7,2,0,
    8,3,1,0,
    4,9,0,
    6,1,0,
    4,2,5,1,0,
    7,6,0,
    4,9,0,
    9,7,2,0,
    9,7,5,3,1,0,
    9,7,5,3,1,0,
    4,9,0,
    5,3,6,2,0,
    9,7,5,3,1,0,
    8,3,1,0,
    7,5,8,4,0,
    5,3,6,2,0,
    9,7,5,3,1,0,
    8,6,9,5,0,
    8,3,1,0,
    5,3,6,2,0,
    9,7,5,3,1,0,
    9,7,5,3,1,0,
    4,9,0,
    6,1,0,
    9,7,5,3,1,0,
    9,7,5,3,1,0,
    4,9,0,
    6,1,0,
    9,7,5,3,1,0,
    7,6,0,
    8,3,1,0,
    9,7,2,0,
    9,7,2,0,
    7,6,0,
    4,9,0,
    6,1,0,
    4,2,5,1,0,
    8,3,1,0,
    7,5,8,4,0,
    5,3,6,2,0,
    9,7,2,0,
    8,3,1,0,
    7,5,8,4,0,
    5,3,6,2,0,
    9,7,5,3,1,0,
    8,6,9,5,0,
    7,5,8,4,0,
    9,7,2,0,
    9,7,5,3,1,0,
    7,6,0,
    8,3,1,0,
    9,7,2,0,
    4,2,5,1,0,
    9,7,5,3,1,0,
    7,5,8,4,0,
    6,1,0,
    9,7,5,3,1,0,
    7,6,0,
    8,3,1,0,
    5,3,6,2,0,
    9,7,5,3,1,0,
    9,7,5,3,1,0,
    9,7,5,3,1,0,
    6,1,0,
    9,7,5,3,1,0,
    7,6,0,
    4,9,0,
    6,1,0,
    9,7,5,3,1,0,
    8,3,1,0,
    9,7,5,3,1,0,
    6,1,0,
    9,7,2,0,
    8,3,1,0,
    4,9,0,
    6,1,0,
    4,2,5,1,0,
    7,6,0,
    4,9,0,
    9,7,2,0,
    9,7,5,3,1,0,
    8,6,9,5,0,
    8,3,1,0,
    9,7,5,3,1,0,
    9,7,5,3,1,0,
    8,6,9,5,0,
    4,9,0,
    6,1,0,
    9,7,2,0,
    7,6,0,
    9,7,5,3,1,0,
    5,3,6,2,0,
    4,2,5,1,0,
    8,3,1,0,
    4,9,0,
    5,3,6,2,0,
    9,7,5,3,1,0,
    8,3,1,0,
    8,3,1,0,
    5,3,6,2,0,
    9,7,5,3,1,0
根据走法获得初始化矩阵：
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]