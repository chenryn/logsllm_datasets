After the dynamic analysis of the malware sample, we
need to verify whether our generated MCB can actually be
used for probing. That is, we have to ensure that the probing
packet can actually trigger the malware to reply uniquely.
We run the malware sample again in another clean envi-
ronment without any instrumentation and check whether it
responds to the probing packet with the expected reply or
not. If so, we go to the second round veriﬁcation.
Second round veriﬁcation is to verify whether the reply
is unique or not. We need to ensure that the response is
not the same as a response from some normal well-known
(P2P) software. For that purpose, we need to manually
build a whitelist database of multiple, well-known benign
services/applications/protocols, including most well-known
P2P software, for their normal request-response patterns.
Such patterns include identifying the protocol speciﬁcation
and marking all the ﬁxed/variable ﬁelds inside the response.
In this way, we can search the whitelist and ﬁnd whether
our extracted MCB is a unique evidence or not.
Limitations. In reality, it is very challenging and almost
impossible to construct a complete and precise database as
whitelist.
In our preliminary implementation, we simply
collect around 50 benign P2P/FTP/HTTP software includ-
ing Apache, FileZilla, eDonkey, eMule, Morpheus, Limewire,
Kazaa, which we intend to expand over time. We test each
MCB probing on these benign software and make sure they
will not generate the same response as the malware does.
For each benign software, we carefully read the related pro-
tocol documents (e.g., eDonkey P2P, FTP) and extract the
Figure 3: Stitch sub-paths along MCBs
bolic execution. One important assumption is that we con-
sider the probing packet ρ as the only causal factor to drive
P2 to generate the response packet η along MCB paths.
Thus, we consider a (sub-)path of MCB as valid when the
relevant branches have control ﬂow dependences on symbol
variables in ρ. Speciﬁcally, for each MCB main path, we
mark the size and each byte of the received buﬀer as symbol
values. Then, we monitor the propagation of these symbols
along the path. If we encounter an enforced path with no
control dependence on the symbol variables, we discard this
MCB candidate because its execution may not be dependent
on probing packets.
When we encounter any function call in unexplored sub-
paths, we provide the call with the current symbol context
and create a snapshot at the entrance point. Thus, after
we enter the function, we repeat the procedure mentioned
before to keep track of the control ﬂow with symbolic vari-
ables. When we encounter a branch possibly aﬀected by
some symbol variable, we record this address into a queue.
It tells us that this branch has two possible choices and we
need go back to the snapshot and explore another branch
later. This step recursively occurs (in some cases, we need
to go even deeper into sub-functions) until we ﬁnd out all
possible sub-paths along the main MCB path.
Handling Encoding Function. One special case needs
to be further mentioned:
the encoding function such as
encryption, hash and checksum. Thanks to previous re-
search [18,51,53], we can prevent inﬁnite symbolic execution
for such functions that possibly exist along the MCB path.
We build an automatic tool to identify and bypass encoding
functions using similar heuristics mentioned in [18,28,39,56].
To actually reverse such functions, we leverage partially au-
tomatic techniques similar to previous work [18]. We skip
details here as they are not our major contributions, and we
will discuss some limitations of current design in Section 7.
Solving the MCB path. When we obtain a complete
MCB path (including sub-paths), the ﬁnal step is to solve
the constraints along this entire MCB path. The complete
MCB path includes the information about symbol propaga-
tion. We construct the symbolic equations and input the
resulting equation into a solver. If the equations are solv-
able, we can construct a MCB probing packet ρ that follows
the MCB from the receive function to the send function and
generates a response η.
586patterns mentioned before. Clearly, this manual work is te-
dious and may not work for benign software using unknown
or undocumented protocol. In this case, existing automatic
protocol reverse engineering techniques [17, 20, 23, 24] could
help us to build models for legitimate protocols, and we can
then use these models to improve our whitelist. This is es-
pecially important to ﬁnd minor diﬀerences between MCBs
and benign protocols. We also note that false positive cases
are possible due to the incompleteness of the whitelist. How-
ever, the incompleteness will mainly cause possible false pos-
sibles but not false negatives. Nevertheless, we did not see
false positives in our experiments. We discuss more impli-
cations in Section 7 and leave it as future work to construct
a better whitelist database.
4.
IMPLEMENTATION
Our PeerPress implementation combines both (online) dy-
namic analysis and oﬄine processing. For online analysis
and recording, we implement two versions based on toolset
DynamoRIO [3] (which is lightweight but may fail on some
malware) and TEMU [9] (which is more robust to run mal-
ware but is also more heavyweight). Online modules take
charge of generating instruction traces and performing in-
formed, forced execution. As an illustration, for our TEMU-
based implementation, we have developed three new inde-
pendent plug-ins. The ﬁrst is to record ﬁne-grained (for
port generation logic and probing packet parsing analysis)
and coarse-grained (for FC extraction/update) traces. The
second is to enforce certain branch decisions based on the
input of the oﬄine analysis components.
It executes the
foreseeing operations by disassembling code blocks follow-
ing undecided branches and searching for the calls of FCs.
The last plug-in is for general execution control. It helps us
to start execution at speciﬁc addresses, dump/modify mem-
ory/registry values, create execution snapshots and perform
system/library hooking. Furthermore, we enhance TEMU’s
taint analysis to support tainting the input/output of spe-
ciﬁc calls.
Our main implementation eﬀort concentrates on oﬄine
modules. Our oﬄine modules are mainly built using Python,
and they include program dataﬂow analysis, program slice
generation, and ICE input generation. For example, in port-
print extraction, we perform backward taint analysis and
program slicing on ﬁne-grained traces. At the same time,
our oﬄine module collects semantic information to derive
the portprint type and to extract the program slice for on-
line replaying. In ICE, to support multi-round exploration,
our oﬄine module ﬁrst fully analyzes the trace we generated
in the previous round. Then, it provides our online module
with a concrete speciﬁcation of the path exploration.
It
includes where to start execution, whether to create snap-
shot or not, what branch decision chain for our online en-
forced execution to follow ﬁrst, and how to modify the mem-
ory/register value. Furthermore, for symbolic execution, we
developed a module to translate the instruction traces into
the VEX intermediate language using libVex [4]. We devel-
oped our own symbolic execution engine and an interface to
Z3 [11] constraint solver.
5. EVALUATION
In this section, we evaluate PeerPress on several real-
world malware families, which are listed in Table 1. This
includes representative and complex modern P2P bots such
as the infamous Nugache malware [50], Phatbot, Storm/Pea-
comm [48], Conﬁcker C [2], and more recent Sality [12](still
active in the wild as the writing of this paper). We also in-
clude several Trojan horse/backoor malware, because they
also contain MCBs (many of them could also be considered
as bots). This is to further demonstrate that PeerPress can
detect more than just P2P malware, as long as PeerPress
can extract MCBs from the malware. These malware sam-
ples were collected from multiple online malware repositories
such as [1, 5] and diverse security researchers. We veriﬁed
the ground truth labels of these malware with multiple on-
line malware analysis services such as [1, 10] and manual
examination on binaries and network traﬃc.
5.1 Effectiveness of Portprint Extraction
We extracted portprints for each malware family and we
summarize them in Table 2. To verify their correctness, we
run these malware multiple times in a clean environment and
each time compare our extracted portprint with the actual
port the malware bound to. The detailed result is shown in
Table 2.
Among all the malware we have examined, Conﬁcker C
has a complex and unique port generation logic, which was
previously manually analyzed in [45]. Now with PeerPress,
we can automatically extract this logic within a few minutes.
Furthermore, PeerPress provides a clear function interface
with parameters and their semantic meanings because it cap-
tures system calls such as getpeername that parse the buﬀer
related to the slice arguments. It is worth noting that algo-
rithmically deterministic portprints are a strong evidence of
the malware existence. That is, with only portprints (even
without further MCB probing packets/response), we can al-
ready detect this kind of malware with very high conﬁdence.
We ﬁnd that many portprints are static in our tested
malware. Most of such malware embeds the port number
in the binary, such as NuclearRAT and NuCrypt, or reads
from some conﬁguration ﬁle, such as the case of Peacom-
m/Storm. Only a few malware samples (Phabot and Nu-
gache) listen on totally random ports.
In our tests, the
ports were used for FTP services in both cases (to pro-
vide egg downloading service for newly infected malware).
This inspired us to probe suspicious random ports just us-
ing an FTP packet and monitor their reply. In Section 5.3,
we further demonstrate even though the malware may use
the standard FTP protocol, the slight implementation dif-
ferences may still expose themselves. One very interesting
case is the algorithmically deterministic portprint of Sal-
ity (UDP port), because previous reports have claimed that
the port is selected pseudo-randomly [12]. We carefully ex-
amine our generated portprint and ﬁnd that there are two
source bytes that are the result of system call GetComput-
erName(). These two bytes are multiplied, and the result
is added to a constant number 0x438. Meanwhile, through
tracking the control dependences, PeerPress also successfully
extracts another path which forces the malware to bind to
a static port, 9674. We deduce that the reason why secu-
rity reports such as [25] claim the port is psedo-randomly
generated may be because: (1) The computer name can be
considered as a random value.
(2) It is possible for mal-
ware authors to reconﬁgure the constant number 0x438 to
other constant value. PeerPress declares that the portprint
of Sality is algorithmically deterministic, and it extracts the
587Name
Type
Name
Type
Conﬁcker C [2]
Phabot [6]
Storm/Peacomm [48]
NuclearRAT
Penumbra
NuCrypt
P2P Bot
P2P Bot
P2P bot
Trojan horse/Spyware
Backdoor
Trojan horse/worm
Nugache [50]
Sality [12]
BackOrﬁce
P2P bot & Trojan Horse
P2P Bot
Trojan horse/backdoor
WinEggDrop Keylogger/Spyware
WinCrash
Wopla
Backdoor
Trojan horse
Table 1: 12 malware families in our evaluation
Malware
Type detmined by MProbe
Observed Port Number
Description
Correctness
Conﬁcker C
Nugache
Sality
Phabot
Peacomm
BackOrﬁce
NuclearRAT
WinEggDrop
Penumbra
NuCrypt
Wopla
WinCrash
algorithmically determined
static/randomly generated
algorithmically determined
randomly generated
static
static
static
static
static
static
static
static
46523/TCP and 18849/UDP
Program Slice with IP and time
8/TCP, 3722/TCP
6162/UDP
1999/TCP
Open Multiple (ﬁxed/random) Ports
Generated based on Computer Name
7871,11217/UDP
Read from spooldr.ini
31337/TCP
190/TCP
12345/TCP
2046/TCP
3133/TCP
8080/TCP, 25099/TCP
1596/TCP
In binary
In binary
In binary
In binary
In binary
In binary/ﬁle
In binary
X
X
X
X
X
X
X
X
X
X
X
X
Table 2: Portprint details of diﬀerent malware families
program slice with the target computer name as the param-
eter. Once provided with computer names (which should be
available to most network administrators), PeerPress can
probe target machines to detect Sality infected victims.
5.2 Effectiveness of ICE