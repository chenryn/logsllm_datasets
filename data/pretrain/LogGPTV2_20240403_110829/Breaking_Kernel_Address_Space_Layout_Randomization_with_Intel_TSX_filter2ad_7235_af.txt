### Hund et al.’s Attack and DrK: A Comparative Analysis

Hund et al.’s attack and DrK both exploit timing differences caused by how a processor handles page faults for mapped versus unmapped kernel memory pages. However, there are key differences in their approaches.

#### Hund et al.’s Attack
- **Mechanism**: This attack calls the OS page fault handler whenever it probes each kernel memory page.
- **Drawbacks**:
  - **High Noise**: The long execution path inside the OS introduces significant noise, making the attack less precise.
  - **Detectability**: The frequent access to kernel memory pages by the user process can be easily detected by the OS, as it is aware of these accesses.

#### DrK
- **Mechanism**: DrK uses a Transactional Synchronization Extensions (TSX) abort handler to probe a kernel memory page.
- **Advantages**:
  - **Shorter Execution Path**: The TSX abort handler has a shorter execution path compared to the OS page fault handler, reducing the likelihood of errors.
  - **Precision**: It can distinguish between accessing executable and non-executable pages with high precision.
  - **Stealth**: The OS cannot directly observe the behavior of DrK, making it difficult to detect.

### Other Related Attacks

#### Forgh and Gruss [19, 20]
- **Mechanism**: Exploit the prefetch instruction on the processor to load a specific address into a certain cache level, probing mapping information without causing exceptions.
- **Limitation**: The prefetch instruction targets data, so it cannot determine whether an address is executable or non-executable, unlike DrK.

### Crash-Resistant Memory Probing

One of the advantages of DrK is its ability to probe the kernel’s address space without causing a crash. Recently, Gawlik et al. [21] demonstrated a similar web attack for crash-resistant memory probing. They found that some JavaScript methods do not crash modern web browsers with fault-tolerant functionality, allowing for memory probing without a browser crash. However, this attack is detectable by the OS because it cannot suppress the exception, unlike DrK. Additionally, the authors suggest several mitigation techniques, such as limiting the number of faults, checking exception information, using guard pages, and employing memory safety solutions. However, none of these approaches can mitigate DrK.

### TSX Timing Channel

During our research, we found two blog articles [1, 64] that described kernel timing attacks using TSX. While these articles conjecture the possibility of such attacks, our work makes the following important contributions:

1. **Comprehensive Evaluations**:
   - We conducted extensive evaluations, demonstrating and analyzing DrK across three different Intel CPU generations (§4.1) in all major operating systems (§4.2 and §4.2.3).
   - We provided instructions on controlling the noise of the timing channel to achieve the best precision (§4.4).

2. **Root Cause Analysis**:
   - We experimentally determined the cause of the timing channel by studying the architecture of modern Intel CPUs in depth (§5).
   - We monitored the behavior of the Intel CPU using High-Performance Counters (HPC) and analyzed its architectural details to identify the root cause.

3. **Executable vs. Non-Executable Pages**:
   - We discovered that the TSX timing channel can be used to determine whether a memory page is executable or non-executable (§3 and §4). This capability was not identified in the two blog articles or in Hund et al. [28].

### Conclusion

To protect kernel memory from attacks, commodity operating systems have adopted Kernel Address Space Layout Randomization (KASLR), which is a proven defense mechanism against many memory corruption attacks. In this paper, we introduced DrK, a timing side-channel attack that almost perfectly de-randomizes KASLR using the Intel CPU’s new instruction set, TSX. Our evaluation showed that DrK outperforms prior side-channel attacks in terms of precision, platform independence, covertness, and speed. We further analyzed the architectural characteristics that expose such timing differences and proposed hardware modifications to eliminate them.

### Responsible Vulnerability Disclosure

Following the principles of responsible vulnerability disclosure, we have not made public any findings or proof-of-concept code discussed in this paper. We confidentially reported the vulnerability through US-CERT (VU#954695) and Microsoft Security Response Center (MSRC) (Case 32737, TRK:0001003139). We are ready to share this manuscript and work closely with affected vendors to resolve the newly discovered security threat. After public disclosure, we will release the source of the DrK attack to the public.

### References

[1] Anababa. What Does Transactional Synchronization Extensions (TSX) Processor Technology Mean to Vulnerability Exploits (e.g. Brute Forcing)?, http://hypervsir.blogspot.com/2014/11/what-does-transactional-synchronization.html.

[2] AWS Blog. Amazon EC2 X1 Instances, https://aws.amazon.com/ec2/instance-types/x1/.

... (References continue as in the original text)

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.