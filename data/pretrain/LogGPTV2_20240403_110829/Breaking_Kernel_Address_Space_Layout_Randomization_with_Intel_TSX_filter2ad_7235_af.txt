Hund et al.’s attack and DrK focus on similar timing
differences caused by how a processor handles a page
fault for mapped compared to unmapped kernel memory
pages. However, unlike DrK, Hund et al.’s attack should
call the OS page fault handler whenever probing each
kernel memory page, which suffers from high noise due
to a long execution path inside the OS. Furthermore, this
lets the OS know which user process frequently accesses
kernel memory pages, so that the OS can easily detect the
attack.
In contrast, DrK uses a TSX abort handler to probe a
kernel memory page, whose execution path is shorter than
that of OS page fault handler, making it less error-prone
and even able to recognize the small difference between
accessing executable and non-executable pages. Also, it
is difficult for the OS to detect DrK because it cannot
directly observe the behavior of DrK (§4).
In addition, Forgh and Gruss [19, 20] exploit the
prefetch instruction on the processor, which loads a spe-
cific address into a certain cache level, to probe map-
ping information without causing exceptions. However,
since the prefetch instruction targets data, this attack
cannot identify whether an address is executable or non-
executable, unlike DrK.
Crash-resistant memory probing.
One of the ad-
vantages of DrK is that it does not generate a crash
when probing the kernel’s address space. Recently, Gaw-
lik et al. [21] have shown a similar web attack for crash-
resistant memory probing. They found that memory ac-
cess violations by some JavaScript methods do not crash
modern web browsers having fault-tolerant functional-
ity, which allows for memory probing without a browser
crash. However, OSes can identify whether such an attack
is performed because it cannot suppress the exception,
unlike DrK. Also, as the authors mention, this attack can
be mitigated by limiting the number of faults that can be
caused, checking the exception information, using guard
pages, and using memory safety solutions. However, none
of these approaches can mitigate DrK.
TSX timing channel. We found two blog articles [1, 64]
that depicted kernel timing attacks using TSX while we
conducted this research. Note that although this paper and
the two blog articles are based on similar observations,
this work makes the following important contributions,
unlike the blog articles which only conjecture that such
an attack is possible. First, we did comprehensive eval-
uations. We demonstrated and analyzed DrK with three
different Intel CPU generations (§4.1) in all major OSes
(§4.2 and §4.2.3). Moreover, we give instructions on
controlling the noise of timing channel to get the best pre-
cision (§4.4). Second, we showed what causes this timing
channel through experiments. We studied the architecture
of the modern Intel CPU in depth and discovered which
execution paths lead to such a timing channel (§5). We
monitored the behavior of the Intel CPU in detail using
the HPC and checked its architectural details to figure out
the root cause. Lastly, we discovered that the TSX timing
channel can be used to determine whether a memory page
is executable or non-executable (§3 and §4). Note that
neither the two blog articles nor Hund et al. [28]’s work
14
discovered this timing channel.
9 Conclusion
To protect the kernel memory from the attacks in the
wild, commodity OSes have adopted KASLR, which is
proven to be a practical defense mechanism against many
memory corruption attacks. In this paper, we introduced
DrK, a timing side channel attack that almost perfectly
de-randomized KASLR using the Intel CPU’s new instruc-
tion set, TSX. Our evaluation showed DrK was much bet-
ter than the prior side channel attack in terms of precision,
platform independence, covertness, and speed. We fur-
ther analyzed which architectural characteristics exposed
such timing differences and proposed a few hardware
modifications to eliminate it.
Responsible vulnerability disclosure. Following the
guidance of responsible vulnerability disclosure, we have
not made public any findings or proof-of-concept code
discussed in this paper. We confidentially reported the
vulnerability to through US-CERT (VU#954695) and Mi-
crosoft Security Response Center (MSRC) (Case 32737,
TRK:0001003139), and ready to share this manuscript
and work with affected vendors closely to resolve the
newly discovered security threat. After the public disclo-
sure, we will release the source of the DrK attack to the
public.
References
[1] Anababa. What Does Transactional Synchronization Extensions
(TSX) Processor Technology Mean to Vulnerability Exploits (e.g.
Brute Forcing)?,. http://hypervsir.blogspot.com/2014/
11/what-does-transactional-synchronization.html.
[2] AWS Blog. Amazon EC2 X1 Instances. https://aws.amazon.
com/ec2/instance-types/x1/.
[3] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberger, and
J. Pewny. You Can Run but You Can’t Read: Preventing Disclosure
Exploits in Executable Code. In Proceedings of the 21st ACM
Conference on Computer and Communications Security (CCS),
Scottsdale, Arizona, Nov. 2014.
[4] M. Backes and S. Nürnberger. Oxymoron: Making Fine-Grained
Memory Randomization Practical by Allowing Code Sharing. In
Proceedings of the 23rd USENIX Security Symposium (Security),
San Diego, CA, Aug. 2014.
[5] A. Barresi, K. Razavi, M. Payer, and T. R. Gross. CAIN: Silently
breaking ASLR in the cloud. In 9th USENIX Workshop on Offen-
sive Technologies (WOOT), Washington, D.C., Aug. 2015.
[6] K. Bhandari, D. R. Chakrabarti, and H.-J. Boehm. Implications of
CPU caching on byte-addressable non-volatile memory program-
ming, 2012.
[7] S. Bhatkar, R. Sekar, and D. C. DuVarney. Efficient Techniques
for Comprehensive Protection from Memory Error Exploits. In
Proceedings of the 14th USENIX Security Symposium (Security),
Baltimore, MD, Aug. 2005.
[8] D. Bigelow, T. Hobson, R. Rudd, W. Streilein, and H. Okhravi.
Timely Rerandomization for Mitigating Memory Disclosures. In
Proceedings of the 22nd ACM Conference on Computer and Com-
munications Security (CCS), Denver, Colorado, Oct. 2015.
[9] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazières, and D. Boneh.
Hacking Blind. In Proceedings of the 35th IEEE Symposium on
Security and Privacy (Oakland), San Jose, CA, May 2014.
[10] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida. Dedup Est
Machina: Memory Deduplication as an Advanced Exploitation
Vector. In Proceedings of the 37th IEEE Symposium on Security
and Privacy (Oakland), San Jose, CA, May 2016.
[11] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen,
and A.-R. Sadeghi. Leakage-Resilient Layout Randomization for
Mobile Devices. In Proceedings of the 2016 Annual Network and
Distributed System Security Symposium (NDSS), San Diego, CA,
Feb. 2016.
[12] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi,
H. Shacham, and M. Winandy. Return-Oriented Programming
without Returns. In Proceedings of the 17th ACM Conference on
Computer and Communications Security (CCS), Chicago, IL, Oct.
2010.
[13] R. Chen.
Some remarks on VirtualAlloc and MEM_-
https://blogs.msdn.microsoft.com/
LARGE_PAGES.
oldnewthing/20110128-00/?p=11643.
[14] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. PointGuardTM:
Protecting Pointers From Buffer Overflow Vulnerabilities.
In
Proceedings of the 12th USENIX Security Symposium (Security),
Washington, DC, Aug. 2003.
[15] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R.
Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical Code
Randomization Resilient to Memory Disclosure. In Proceedings
of the 36th IEEE Symposium on Security and Privacy (Oakland),
San Jose, CA, May 2015.
[16] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Mon-
rose. Isomeron: Code Randomization Resilient to (Just-In-Time)
Return-Oriented Programming. In Proceedings of the 2015 Annual
Network and Distributed System Security Symposium (NDSS), San
Diego, CA, Feb. 2015.
[17] S. Esser. mach_port_kobject() and the Kernel Address Obfusca-
tion. https://sektioneins.de/en/blog/14-12-23-mach_
port_kobject.html.
[18] I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang,
H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi.
Missing the Point(er): On the Effectiveness of Code Pointer In-
tegrity. In Proceedings of the 36th IEEE Symposium on Security
and Privacy (Oakland), San Jose, CA, May 2015.
[19] A. Fogh.
Breaking KASLR with micro architecture
http://dreamsofastone.blogspot.de/2016/02/
Part 1.
breaking-kasrl-with-micro-architecture.html.
[20] A. Fogh and D. Gruss. Using Undocumented CPU Behavior to See
Into Kernel Mode and Break KASLR in the Process. In Blackhat
USA, 2016.
[21] R. Gawlik, B. Kollenda, P. Koppe, B. Garmany, and T. Holz. En-
abling Client-Side Crash-Resistance to Overcome Diversification
and Information Hiding. In Proceedings of the 2016 Annual Net-
work and Distributed System Security Symposium (NDSS), San
Diego, CA, Feb. 2016.
[22] J. Gionta, W. Enck, and P. Ning. HideM: Protecting the Contents
of Userspace Memory in the Face of Disclosure Vulnerabilities. In
Proceedings of the 5th ACM Conference on Data and Application
Security and Privacy (CODASPY), 2015.
[23] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced Operat-
ing System Security Through Efficient and Fine-grained Address
Space Randomization. In Proceedings of the 21st USENIX Secu-
rity Symposium (Security), Bellevue, WA, Aug. 2012.
[24] L. Guan, J. Lin, B. Luo, J. Jing, and J. Wang. Protecting Private
Keys against Memory Disclosure Attacks using Hardware Trans-
actional Memory. In Proceedings of the 36th IEEE Symposium on
Security and Privacy (Oakland), San Jose, CA, May 2015.
[25] Henry. TLB and Pagewalk Coherence in x86 Processors. http://
15
blog.stuffedcow.net/2015/08/pagewalk-coherence/.
[26] Heroku. Heroku: Cloud Application Platform. https://www.
heroku.com/.
[27] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson.
ILR: Where’d My Gadgets Go? In Proceedings of the 33rd IEEE
Symposium on Security and Privacy (Oakland), San Francisco,
CA, May 2012.
[28] R. Hund, C. Willems, and T. Holz. Practical Timing Side Chan-
nel Attacks Against Kernel Space ASLR. In Proceedings of the
34th IEEE Symposium on Security and Privacy (Oakland), San
Francisco, CA, May 2013.
[29] Intel. ARK | Your Source for Intel Protect Specifications. http:
//ark.intel.com.
[30] Intel Corporation. Desktop 4th Generation Intel CoreTM Proces-
sor Family, Desktop Intel Pentium Processor Family, and Desktop
Intel Celeron Processor Family, 2015.
[31] Intel Corporation. Intel 64 and IA-32 Architectures Developer’s
Manual, 2015.
[32] K. Johnson and M. Miller. Exploit Mitigation Improvements in
Windows 8. In Black Hat USA, 2012.
[33] D. Keuper. XNU: a security evaluation. 2012.
[34] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space
layout permutation (ASLP): Towards fine-grained randomization
of commodity software. In Proceedings of the Annual Computer
Security Applications Conference (ACSAC), Chicago, IL, Dec.
2006.
[35] A. Kleen. Lock elision in the GNU C library, 2013. https:
//lwn.net/Articles/534758/.
[36] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and
In Proceedings of the 11th
D. Song. Code-Pointer Integrity.
Symposium on Operating Systems Design and Implementation
(OSDI), Broomfield, Colorado, Oct. 2014.
[37] V. Leis, A. Kemper, and T. Neumann. Exploiting Hardware Trans-
actional Memory in Main-Memory Databases. In Proceedings
of the 30th IEEE International Conference on Data Engineering
Workshop, Chicago, IL, Mar.–Apr. 2014.
[38] Y. Liu, Y. Xia, H. Guan, B. Zang, and H. Chen. Concurrent and
Consistent Virtual Machine Introspection with Hardware Transac-
tional Memory. In Proceedings of the 20th IEEE Symposium on
High Performance Computer Architecture (HPCA), Orlando, FL,
USA, Feb. 2014.
[39] K. Lu, S. Nurnberger, M. Backes, and W. Lee. How to Make
ASLR Win the Clone Wars: Runtime Re-Randomization.
In
Proceedings of the 2016 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, Feb. 2016.
[40] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee. ASLR-
Guard: Stopping Address Space Leakage for Code Reuse Attacks.
In Proceedings of the 22nd ACM Conference on Computer and
Communications Security (CCS), Denver, Colorado, Oct. 2015.
[41] MITRE Corporation. CVE-2015-1097. https://cve.mitre.
org/cgi-bin/cvename.cgi?name=CVE-2015-1097.
[42] MITRE Corporation. CVE-2015-1674.
http://www.cve.
mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1674.
[43] MITRE Corporation. CVE-2015-8569. https://cve.mitre.
org/cgi-bin/cvename.cgi?name=CVE-2015-8569.
[44] MITRE Corporation. CVE-2016-0175.
http://www.cve.
[45] NES CONSEIL.
mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0175.
Bypassing Windows 7 Kernel ASLR.
https://dl.packetstormsecurity.net/papers/bypass/
NES-BypassWin7KernelAslr.pdf.
[46] Oracle.
Java Platform, Standard Edition Tools Reference.
https://docs.oracle.com/javase/8/docs/technotes/
tools/unix/java.html.
[47] Oracle.
Oracle VM Performance and Tuning - Part
https://blogs.oracle.com/jsavit/entry/oracle_
5.
vm_performance_and_tuning4.
[48] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing
the Gadgets: Hindering Return-Oriented Programming Using In-
Place Code Randomization. In Proceedings of the 33rd IEEE
Symposium on Security and Privacy (Oakland), San Francisco,
CA, May 2012.
[49] PaX Team. PaX address space layout randomization (ASLR),
2003. https://pax.grsecurity.net/docs/aslr.txt.
[50] F. J. Serna. The info leak era on software exploitation. In Blackhat
USA, 2012.
[51] H. Shacham. The Geometry of Innocent Flesh on the Bone:
In Pro-
Return-into-libc without Function Calls (on the x86).
ceedings of the 14th ACM Conference on Computer and Commu-
nications Security (CCS), Alexandria, VA, Oct.–Nov. 2007.
[52] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and
D. Boneh. On the Effectiveness of Address-Space Randomization.
In Proceedings of the 11th ACM Conference on Computer and
Communications Security (CCS), Washington, DC, Oct. 2004.
[53] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen,
and A.-R. Sadeghi. Just-In-Time Code Reuse: On the Effective-
ness of Fine-Grained Address Space Layout Randomization. In
Proceedings of the 34th IEEE Symposium on Security and Privacy
(Oakland), San Francisco, CA, May 2013.
[54] C. Song, B. Lee, K. Lu, W. R. Harris, T. Kim, and W. Lee. En-
forcing Kernel Security Invariants with Data Flow Integrity. In
Proceedings of the 2016 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, Feb. 2016.
[55] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund,
and T. Walter. Breaking the Memory Secrecy Assumption. In
Proceedings of the Second European Workshop on System Security
(EUROSEC), 2009.
[56] A. Tang, S. Sethumadhavan, and S. Stolfo. Heisenbyte: Thwart-
ing Memory Disclosure Attacks using Destructive Code Reads.
In Proceedings of the 22nd ACM Conference on Computer and
Communications Security (CCS), Denver, Colorado, Oct. 2015.
[57] The Linux Kernel Archives. Huge Pages. https://www.kernel.
org/doc/Documentation/vm/hugetlbpage.txt.
[58] Z. Wang, H. Qian, J. Li, and H. Chen. Using Restricted Trans-
actional Memory to Build a Scalable In-Memory Database. In
Proceedings of the ACM EuroSys Conference, Amsterdam, The
Netherlands, Apr. 2014.
[59] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary Stirring:
Self-randomizing Instruction Addresses of Legacy x86 Binary
Code. In Proceedings of the 19th ACM Conference on Computer
and Communications Security (CCS), Raleigh, NC, Oct. 2012.
[60] V. Weaver.
Linux perf event Features and Overhead,
2013. http://researcher.watson.ibm.com/researcher/
files/us-ajvega/FastPath_Weaver_Talk.pdf.
[61] X. Wei, J. Shi, Y. Chen, R. Chen, and H. Chen. Fast In-memory
Transaction Processing using RDMA and HTM. In Proceedings
of the 25th ACM Symposium on Operating Systems Principles
(SOSP), Monterey, CA, Oct. 2015.
[62] Wikiwand.
Address
space
layout
randomization.
http://www.wikiwand.com/en/Address_space_layout_
randomization.
[63] Windows Dev Center. Creating a File Mapping Using Large
https://msdn.microsoft.com/en-us/library/
Pages.
windows/desktop/aa366543(v=vs.85).aspx.
[64] R. Wojtczuk.
TSX Improves Timing Attacks Against
https://labs.bromium.com/2014/10/27/
KASLR.
tsx-improves-timing-attacks-against-kaslr/.
16