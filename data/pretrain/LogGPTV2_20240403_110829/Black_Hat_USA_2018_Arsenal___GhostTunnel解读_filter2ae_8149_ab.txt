### 3.2 原理
在正常的Wi-Fi通信中，一个站点必须经历Beacon，Probe，Authentication，Association等过程后才能建立与接入点的连接，其整个流程如下图。
而Ghost Tunnel并没有使用正常的Wi-Fi连接，而只用到了Beacon、Probe 帧，如下图。
为什么用这三个帧呢？在802.11的状态机中，取决于认证和关联的状态，一共有三个阶段。
在State
1时，客户端处于Unauthenticated、Unassociated状态。而该阶段可以使用的802.11帧有以下具体几种，其中就包含了Probe
Request，Probe Response，Beacon帧。
原本它们被使用在无线网络扫描阶段。当802.11客户端在扫描可用无线网络时，有两种扫描方式：
– 主动扫描，客户端主动发送Probe Request，接收由接入点返回的Probe Response。
– 被动扫描，客户端在每个频道监听AP周期性发送的Beacon。
总而言之，Ghost Tunnel通过Probe，Beacon帧来进行通信，并不建立完整的WiFi连接。
首先攻击者创建一个具有特殊SSID的AP，攻击者和受害设备都使用它作为通信的标识符（而不是常规WiFi通信中的MAC）。此时，攻击者通过解析受害者设备发出的Probe帧得到数据；受害者设备上的恶意程序将解析攻击者发出的Beacon帧来执行命令并返回数据。这便是Ghost
Tunnel WiFi隐蔽传输通道的秘密。
### 3.3 更新及开源
配合着本次在Black Hat上的分享，我们对Ghost Tunnel进行了以下更新：
– 除了远程shell外，还添加了文件下载功能
– 优化了传输效率
– 可自行添加其他需要的功能
同时，我们将Ghost Tunnel的服务端与Windows受控端部分进行了开源：
，读者可自行下载编译安装，搭建实验环境。
### 3.4 实现
前面提到，控制端与被控端采用Beacon和Probe Request帧进行通信，通信数据嵌入到Information Elements
的SSID和Vendor Specific元素中，使用一个字节的标识符进行数据识别。
在控制端，使用到了aircrack-ng项目中的osdep模块，并利用一块具有“监听模式”和“包注入”功能的无线网卡进行数据收发。相关底层原理可参考下图进行了解：
在Windows被控端中，通过Windows Native WiFi
API来操作Windows设备的无线网卡进行数据收发。关于windows的802.11软件架构可参考此图：
**代码架构设计**
控制端和被控端总体依照数据流向采用模块化设计。
控制端：
“`
gt_common.h：数据格式等相关定义
gt_server类：负责初始化及总体功能控制
gt_console类：负责控制台的输入输出
edit目录：hostapd项目关于console的操作功能
packet目录：mdk4项目（自家项目）关于802.11数据帧组装部分的功能
libwifi目录：aircrack-ng中osdep数据收发功能，kismet wifi网卡控制功能
“`
Windows被控端：  
“`
wtunnel类：数据收发功能  
data_handler类：数据处理及功能  
“`
通信数据格式如下：
    ```
    typedef struct _tunnel_data_header
    {
               unsigned char flag;                  // tunnel 数据标志
               unsigned char data_type;     // 数据类型
               unsigned char seq;                 // 发送数据包编号
               unsigned char client_id;         // 被控端ID
               unsigned char server_id;       // 控制端ID
               unsigned char length;            // 数据长度
    }tunnel_data_header;
    ```
基于传输效率的考虑，代码中并没有对数据进行确认及校验，只是对重复的数据进行了过滤。
数据类型定义：
    ```
    #define TUNNEL_CON              0x10   // 建立连接
    #define TUNNEL_SHELL            0x20   // Shell功能
    #define TUNNEL_FILE                0x30   // 文件下载功能
    #define DATA_IN_VENDOR   0x80// 发送数据不超过32字节，只填充SSID，超过32字节会填充Vendor  Specific
    typedef enum _TUNNEL_DATA_TYPE
    {
               TUNNEL_CON_CLIENT_REQ = 0x11,
               TUNNEL_CON_SERVER_RES,
               TUNNEL_CON_HEARTBEAT,
               TUNNEL_SHELL_INIT = 0x21,
               TUNNEL_SHELL_ACP,
               TUNNEL_SHELL_DATA,
               TUNNEL_SHELL_QUIT,
               TUNNEL_FILE_GET = 0x31,
               TUNNEL_FILE_INFO,
               TUNNEL_FILE_DATA,
               TUNNEL_FILE_END,
               TUNNEL_FILE_ERROR,
    }TUNNEL_DATA_TYPE;
    ```
## 4\. 后记
在Ghost Tunnel的实现中，我们使用到了以下项目的部分代码，在此对它们表示感谢。
– Aircrack-ng 
– hostapd 
– Kismet 
– MDK4 
> PS：MDK4是MDK3项目的新版本，增加了对5GHz WiFi及其他功能的支持，目前由PegasusTeam维护。
最后分享一些现场照片，让大家感受一下BlackHat的气氛。
Arsenal区入口：
认真准备中：
演示进行中：
现场有一位一直站在最后认真做笔记的小哥哥，我就用他来结束本文吧