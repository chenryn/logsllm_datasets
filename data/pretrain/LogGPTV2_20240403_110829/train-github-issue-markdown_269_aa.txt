I'm developing these features for a flutter app: loading an image from gallery
or from camera and allow rotate it.
Those operations are expensive so I'm computing them in another thread.
The code is working fine in debug mode, but when I try with release or
profiler mode the app crashes and stop working only when I try to rotate the
image.  
I have more operations working in another thread and there is no problem with
those, the problem is only with this operation.
Run `flutter doctor -v`
    [✓] Flutter (Channel beta, v0.9.4, on Linux, locale es_ES.UTF-8)
        • Flutter version 0.9.4 at /home/nadia/flutter
        • Framework revision f37c235c32 (hace 3 semanas), 2018-09-25 17:45:40 -0400
        • Engine revision 74625aed32
        • Dart version 2.1.0-dev.5.0.flutter-a2eb050044
    [✓] Android toolchain - develop for Android devices (Android SDK 27.0.3)
        • Android SDK at /home/nadia/Android/Sdk
        • Android NDK location not configured (optional; useful for native profiling support)
        • Platform android-27, build-tools 27.0.3
        • Java binary at: /home/nadia/android-studio/jre/bin/java
        • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1136-b06)
        • All Android licenses accepted.
    [✓] Android Studio (version 3.2)
        • Android Studio at /home/nadia/android-studio
        • Flutter plugin version 29.1.1
        • Dart plugin version 181.5656
        • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1136-b06)
    [✓] Connected devices (1 available)
        • NX591J • d2ab515a • android-arm64 • Android 7.1.2 (API 25)
This is my `pubspec.yaml`
    dependencies:
      flutter:
        sdk: flutter
      cupertino_icons: ^0.1.2
      image_picker: ^0.4.10
      path_provider: ^0.4.1
      path: any
      image_picker_saver: ^0.1.0
      uuid: ^1.0.3
      simple_permissions: ^0.1.8
      image: ^2.0.4
And here is my code. I have the code divided into three files. First my
`main.dart`
    import 'dart:io';
    import 'package:flutter/foundation.dart';
    import 'package:flutter/material.dart';
    import 'package:image_picker/image_picker.dart' as imPick;
    import 'package:flutter/services.dart';
    import 'package:image/image.dart' as im;
    import 'package:path_provider/path_provider.dart';
    import 'package:simple_permissions/simple_permissions.dart';
    import 'imageUtils.dart';
    import 'toCompute.dart';
    void main() => runApp(new MyApp());
    class MyApp extends StatelessWidget {
      // This widget is the root of your application.
      @override
      Widget build(BuildContext context) {
        return new MaterialApp(
          /*theme: new ThemeData(
            primarySwatch: Colors.white,
          ),
    */
          showPerformanceOverlay: true,
          debugShowCheckedModeBanner: false,
          home: CameraUpload(),
        );
      }
    }
    class _AkkaMark extends State {
      File _imageFile;
      String _path;
      List _buttons;
      im.Image _finalImage;
      Widget _widgetForBody;
      Widget _imageForBody;
      Widget _loading;
      double _widthS;
      double _heightS;
      String _temporalDir = "/Pictures/AKKAmarkTemporal";
      final _key = new GlobalKey();
      List _savedImages = new List();
      void _setWidgets(){
        _imageForBody =
        new Stack(
          fit: StackFit.expand,
          children: [
            _setImage(),
            new Container(
              alignment: Alignment.bottomCenter,
              child: new Stack(
                alignment: Alignment.bottomCenter,
                overflow: Overflow.visible,
                children: _buttons,
              ),
            )
          ] ,
        );
        _loading =
        new Container(
          child: new Stack(
            fit: StackFit.expand,
            children: [
              _imageFile == null?
              new Center(child: new Text('Pick image or upload from files', textAlign: TextAlign.center, )):
              new Image.file(_imageFile, fit: BoxFit.contain,),
              new Container(
                alignment: Alignment.bottomCenter,
                child: new Stack(
                  alignment: Alignment.bottomCenter,
                  overflow: Overflow.visible,
                  children: _buttons,
                ),
              ),
              new Container(
                alignment: AlignmentDirectional.center,
                decoration: new BoxDecoration(
                  color: Colors.white70,
                ),
                child: new Container(
                  decoration: new BoxDecoration(
                      color: Colors.blue[200],
                      borderRadius: new BorderRadius.circular(10.0)
                  ),
                  width: 300.0,
                  height: 200.0,
                  alignment: AlignmentDirectional.center,
                  child: new Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      new Center(
                        child: new SizedBox(
                          height: 50.0,
                          width: 50.0,
                          child: new CircularProgressIndicator(
                            value: null,
                            strokeWidth: 7.0,
                          ),
                        ),
                      ),
                      new Container(
                        margin: const EdgeInsets.only(top: 25.0),
                        child: new Center(
                          child: new Text(
                            "Loading.. wait...",
                            style: new TextStyle(
                                color: Colors.white
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        );
      }
      @override
      void initState() {
        super.initState();
        initData();
        _widgetForBody = _imageForBody;
      }
      void initData() async {
        await SimplePermissions.requestPermission(Permission.WriteExternalStorage);
        getExternalStorageDirectory().then((Directory dir){
          compute(deleteTemporal, dir.path + _temporalDir);
        });
        _setWidgets();
        getImageCamera();
      }
      void _setStateImage(){
        setState(() {
          _setWidgets();
          _widgetForBody = _imageForBody;
        });
      }
      void _setStateLoading(){
        setState(() {
          _widgetForBody = _loading;
        });
      }
      /* Update the main screen:
       * - If there is no image selected, show text
       * - If there is an image: preview this and show new buttons*/
      Widget _setImage() {
        if (_imageFile == null) {
          _setInitialButtons();
          return new Center(child: new Text('Pick image or upload from files', textAlign: TextAlign.center, ));
        }
        else {
          _showExtraButtons();
          return new Image.file(_imageFile, fit: BoxFit.contain,);
        }
      }
      //Open the camera and save the image in variable
      getImageCamera() async {
        File image = await imPick.ImagePicker.pickImage(source: imPick.ImageSource.camera, maxWidth: 2048.0);
        _loadNewImage(image);
      }
      //Open the gallery and save the image choose in variable
      getImageFile() async {
        File image = await imPick.ImagePicker.pickImage(source: imPick.ImageSource.gallery, maxWidth: 2048.0);
        _loadNewImage(image);
      }
      //NEW
      _loadNewImage(File image){
        _setStateLoading();
        compute(deleteImages, _savedImages);
        _savedImages.clear();
        _imageFile = image == null && _imageFile != null? _imageFile: image;
        if(_imageFile != null ){
          _savedImages.add(_imageFile.path);