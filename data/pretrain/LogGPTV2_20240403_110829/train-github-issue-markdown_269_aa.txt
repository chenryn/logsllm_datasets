Certainly! Here is a more polished and professional version of your text, with improved clarity and structure:

---

### Issue Description

I am developing the following features for a Flutter app:
- Loading an image from the gallery or camera.
- Allowing the user to rotate the image.

These operations are computationally expensive, so I am performing them in a separate thread. The code works fine in debug mode, but when I run it in release or profiler mode, the app crashes specifically when I try to rotate the image. Other operations that are also running in a separate thread do not cause any issues.

### Environment Details

```sh
$ flutter doctor -v
[✓] Flutter (Channel beta, v0.9.4, on Linux, locale es_ES.UTF-8)
    • Flutter version 0.9.4 at /home/nadia/flutter
    • Framework revision f37c235c32 (3 weeks ago), 2018-09-25 17:45:40 -0400
    • Engine revision 74625aed32
    • Dart version 2.1.0-dev.5.0.flutter-a2eb050044
[✓] Android toolchain - develop for Android devices (Android SDK 27.0.3)
    • Android SDK at /home/nadia/Android/Sdk
    • Android NDK location not configured (optional; useful for native profiling support)
    • Platform android-27, build-tools 27.0.3
    • Java binary at: /home/nadia/android-studio/jre/bin/java
    • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1136-b06)
    • All Android licenses accepted.
[✓] Android Studio (version 3.2)
    • Android Studio at /home/nadia/android-studio
    • Flutter plugin version 29.1.1
    • Dart plugin version 181.5656
    • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1136-b06)
[✓] Connected devices (1 available)
    • NX591J • d2ab515a • android-arm64 • Android 7.1.2 (API 25)
```

### `pubspec.yaml` Dependencies

```yaml
dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^0.1.2
  image_picker: ^0.4.10
  path_provider: ^0.4.1
  path: any
  image_picker_saver: ^0.1.0
  uuid: ^1.0.3
  simple_permissions: ^0.1.8
  image: ^2.0.4
```

### Code Structure

The code is divided into three files. Below is the content of `main.dart`:

```dart
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart' as imPick;
import 'package:flutter/services.dart';
import 'package:image/image.dart' as im;
import 'package:path_provider/path_provider.dart';
import 'package:simple_permissions/simple_permissions.dart';
import 'imageUtils.dart';
import 'toCompute.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      showPerformanceOverlay: true,
      debugShowCheckedModeBanner: false,
      home: CameraUpload(),
    );
  }
}

class _AkkaMark extends State<CameraUpload> {
  File _imageFile;
  String _path;
  List _buttons;
  im.Image _finalImage;
  Widget _widgetForBody;
  Widget _imageForBody;
  Widget _loading;
  double _widthS;
  double _heightS;
  String _temporalDir = "/Pictures/AKKAmarkTemporal";
  final _key = GlobalKey();
  List _savedImages = [];

  void _setWidgets() {
    _imageForBody = Stack(
      fit: StackFit.expand,
      children: [
        _setImage(),
        Container(
          alignment: Alignment.bottomCenter,
          child: Stack(
            alignment: Alignment.bottomCenter,
            overflow: Overflow.visible,
            children: _buttons,
          ),
        )
      ],
    );

    _loading = Container(
      child: Stack(
        fit: StackFit.expand,
        children: [
          _imageFile == null
              ? Center(child: Text('Pick image or upload from files', textAlign: TextAlign.center))
              : Image.file(_imageFile, fit: BoxFit.contain),
          Container(
            alignment: Alignment.bottomCenter,
            child: Stack(
              alignment: Alignment.bottomCenter,
              overflow: Overflow.visible,
              children: _buttons,
            ),
          ),
          Container(
            alignment: AlignmentDirectional.center,
            decoration: BoxDecoration(color: Colors.white70),
            child: Container(
              decoration: BoxDecoration(color: Colors.blue[200], borderRadius: BorderRadius.circular(10.0)),
              width: 300.0,
              height: 200.0,
              alignment: AlignmentDirectional.center,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    height: 50.0,
                    width: 50.0,
                    child: CircularProgressIndicator(value: null, strokeWidth: 7.0),
                  ),
                  Container(
                    margin: const EdgeInsets.only(top: 25.0),
                    child: Center(
                      child: Text("Loading.. wait...", style: TextStyle(color: Colors.white)),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    initData();
    _widgetForBody = _imageForBody;
  }

  void initData() async {
    await SimplePermissions.requestPermission(Permission.WriteExternalStorage);
    getExternalStorageDirectory().then((Directory dir) {
      compute(deleteTemporal, dir.path + _temporalDir);
    });
    _setWidgets();
    getImageCamera();
  }

  void _setStateImage() {
    setState(() {
      _setWidgets();
      _widgetForBody = _imageForBody;
    });
  }

  void _setStateLoading() {
    setState(() {
      _widgetForBody = _loading;
    });
  }

  Widget _setImage() {
    if (_imageFile == null) {
      _setInitialButtons();
      return Center(child: Text('Pick image or upload from files', textAlign: TextAlign.center));
    } else {
      _showExtraButtons();
      return Image.file(_imageFile, fit: BoxFit.contain);
    }
  }

  Future<void> getImageCamera() async {
    File image = await imPick.ImagePicker.pickImage(source: imPick.ImageSource.camera, maxWidth: 2048.0);
    _loadNewImage(image);
  }

  Future<void> getImageFile() async {
    File image = await imPick.ImagePicker.pickImage(source: imPick.ImageSource.gallery, maxWidth: 2048.0);
    _loadNewImage(image);
  }

  void _loadNewImage(File image) {
    _setStateLoading();
    compute(deleteImages, _savedImages);
    _savedImages.clear();
    _imageFile = image == null && _imageFile != null ? _imageFile : image;
    if (_imageFile != null) {
      _savedImages.add(_imageFile.path);
    }
  }
}
```

### Additional Notes

- The issue only occurs when rotating the image.
- Other operations in separate threads work without any problems.
- The crash happens in release or profiler mode, but not in debug mode.

---

This version of the text is more organized and easier to read, with clear sectioning and formatting.