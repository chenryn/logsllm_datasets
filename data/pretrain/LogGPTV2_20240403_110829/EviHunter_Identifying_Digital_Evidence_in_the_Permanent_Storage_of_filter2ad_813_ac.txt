t(v0).Path ← "/sdcard/" + v2 + "/", otherwise.
t(v0).Path ← "/sdcard/Android/obb//"
t(v0).Path ← "/sdcard/Android/data//cache/"
t(v0).Path ← "/sdcard/Android/data//files/", if v2 is empty.
t(v0).Path ← "/sdcard/Android/data//files/" + v2 + "/", otherwise.
propagate the tags of the base instance v1 (if available) and argu-
ments v2, v3, · · · into the callee and analyze the data flow in the
callee. In the second case, we will analyze data flow in the callee
and assign the tag of the return value to that of the variable v0. We
note that when analyzing method calls, we may get into a loop of
method calls. For example, if there is a loop in the call graph of an
app. We avoid the loop by using a stack to keep track of method
calls and skipping a method call if the method is already on the
stack. Essentially, we analyze the methods in a loop in the call graph
once.
3.2.4 Multi-threading and Reflection. Multi-threading and reflec-
tion are well known challenges for static program analysis. We
leverage the techniques from the state-of-the-art static analysis
tools [13, 15, 21] to partially handle multi-threading and reflection.
Specifically, for multi-threading, we assume the threads execute
in a sequential order, following prior studies [13, 15]. Therefore,
whenever a certain thread is spawned and starts running, we find its
corresponding entry method and redirect analysis to it. For exam-
ple, an instance invoke of method start() in java.lang.Thread
will be redirected to its actual running method run(). We handle
the dedicated Android threading library android.os.AsyncTask
and android.os.Handler by method redirecting as well. For re-
flection, we analyze the reflective call only if the method can be
parsed statically, following prior static analysis tools [15, 21]. In
particular, EviHunter uses the parsed declaring class name and Path
information to determine the actual method call and redirect the
reflective call to it.
Table 4: Data-flow summary of example Java APIs for file
path construction.
Method
FileWriter (File v2)
File (File v2, String v3)
Data-Flow Summary
t(v1).Path ← t(v2).Path
t(v1).Path ← t(v2).Path + v3
3.2.5 Data-Flow Summary for System APIs. For complexity consid-
eration, we manually summarize the data flows for the commonly
used system APIs and skip the remaining ones, instead of incor-
porating the framework code into EviHunter. We note that Droid-
Safe [21] proposed a technique to model framework, which was
able to find more sensitive data flows in benchmark apps. However,
Reaves et al. [36] found that DroidSafe requires a large amount
of main memory and fails to analyze real-world apps. In addition,
DroidSafe does not track the file paths where data are written to.
Therefore, we do not adopt the technique in DroidSafe to model
framework.
When we discuss the data-flow summary for system APIs, we
will refer to Equation 1 and 2 for the definition of variables.
System APIs to construct file paths: Java provides APIs for apps
to construct file paths and access files in a hard-coded approach. We
summarize data flows for these APIs. Table 3 shows the data-flow
summary for some example Android APIs that are used to get file
paths. Table 4 shows data-flow summary for example APIs. As we
described in Section 2.1, Android provides APIs for apps to locate
files in a soft-coded approach. A majority of these Android APIs
can be summarized using their arguments and the app’s package
EviHunter
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Table 5: Data-flow summary of example APIs for string op-
eration and commonly used data structures.
API
toString()
valueOf(double v2)
read(byte[] v2)
(String v2)
concat(String v2)
add(Object v2)
Data-Flow Summary
t(v0) ← t(v1)
t(v0) ← t(v2)
t(v1) ← t(v2)
t(v0).Path ← v2
t(v0).EvSet ← t(v2).EvSet
t(v0).Path ← t(v1).Path + v2
t(v0).EvSet ← t(v2).EvSet ∪ t(v1).EvSet
t(v1).EvSet ← t(v1).EvSet ∪ t(v2).EvSet
1
2
3
4
5
6
7
8
9
10
11
12
13
14
void foo ( ) {
WebView wv =
( WebView ) findViewById ( R . i d . webView ) ;
S t r i n g t e s t U r l = " h t t p : / /www. foo . com " ;
wv . l o a d U r l ( t e s t U r l ) ;
sink ( t e s t U r l ) ;
wv . setWebViewClient ( new WebViewClient ( ) {
@Override
p u b l i c void onPageFinished
( WebView view , S t r i n g u r l ) {
sink ( u r l ) ;
}
} ) ;
}
Listing 2: Method arguments as sources for URL.
name. For instance, the API getExternalFilesDir(String) returns a file
object whose file path is /sdcard/Android/data//files/
if the input parameter is an empty string, otherwise the file path
is /sdcard/Android/data//files/v2/, where v2 is the
input parameter.
However, there are two cases that require extra information to
summarize the file paths for Android APIs. The first one is get-
Preferences(int) that returns a SharedPreferences file whose file
path depends on the Context class. Context refers to the runtime
environment, for example, a launching Activity named "MainAc-
tivity". If "MainActivity" creates a SharedPreferences file by get-
Preferences(int), the file name is "MainActivity.xml". To handle this
case, we trace back the method calls until finding the Context and
we use the class name of the Context to resolve the corresponding
SharedPreferences file path.
The second case is the SQLite database creation and access
through SQLiteOpenHelper. An app can access a SQLite database
via creating a class inheriting this helper class and handling the
inherited callback methods. When the inherited class is initialized,
a SQLite database is created through the helper class initializa-
tion method SQLiteOpenHelper(Context, String, · · · ), where
the 2nd argument is the database name and the database is lo-
cated in the directory /data/data//databases/. When
getWritableDatabase() is called to retrieve database object, we search
the declaring class name and assign the database file path to the
corresponding variable’s tag.
We note that these Android APIs have changed over Android
versions. Therefore, in practice, our tool requires summarizing data
flows for these Android APIs for different versions.
System APIs for string operations and commonly used data
structures: W summarize the data flows of APIs for string opera-
tions. Example APIs include toString(), valueOf(), (String) (for
string initialization), and concat(String). Moreover, we summarize
the data flows for collection class, string buffers, and similar com-
monly used data structures such as HashSet and ArrayList. Table 5
shows our data-flow summary for some example APIs.
System native methods: We obtain a list of system native meth-
ods from DroidSafe [21]. For each system native method call, we
make an over-approximation of evidence types for each input/out-
put variable involved in the method call. Specifically, we take the
union of the evidence set EvSet of the input variables, and we assign
the union to each input variable and output variable. We update
input variables because they may be modified within the native
method.
Sources and Sinks. In EviHunter, a sink is a system API that
3.2.6
writes data to file system, while a source is where evidentiary
data are created or file path is created. We first combined the pub-
licly available sources and sinks in existing tools including Flow-
Droid [12], SuSi [35], and DroidSafe [21]. These sources and sinks
were also used by more recent tools, e.g., HornDroid [15].
We use the sink methods combined from existing tools. However,
we found that the combined source methods for evidentiary data
are not complete. In particular, existing tools missed the methods
whose arguments indicate sources. Moreover, they did not consider
sources for file paths. Therefore, we extend the source methods for
evidentiary data and uncover the sources for file paths. We make
the sources and sinks used by EviHunter publicly available [5].
Sources for evidentiary data (EvSet): In this work, we focus on
the types of evidentiary data including location, text input, time, and
visited URL as they were shown to be useful in real-world crime
investigations [14, 27, 32, 42]. However, our EviHunter can be ex-
tended to other types of evidentiary data if needed. Specifically, we
can add the sources for those types of evidentiary data in EviHunter
and extend the EvSet in tags. Next, we discuss the sources for each
of the four types of evidentiary data.
1) Location: Location includes GPS location and course-grained
location determined by WiFi and/or cellular data. We treat an An-
droid API that returns location data as a source. We obtained 39
source methods for location from existing tools [12, 21, 35]. More-
over, we found that GPS location can also be created in the argument
of a method. Specifically, the argument of the method onLocation-
Changed(android.location.Location) stores a GPS location. Therefore,
when we analyze a statement that involves onLocationChanged, we
will add the data type location to the argument’s tag.
2) Text input: Text input is the string data typed in by users.
For example, an instant message in a social networking app is a text
input; a search query is a text input. We obtained 2 source methods
for text input from existing tools [12, 21, 35].
3) Time: We obtained 16 source methods for time from existing
tools [12, 21, 35]. Moreover, we found one more source method for
time, i.e., currentTimeMillis(), which returns the system timestamp.
4) Visited URL: A user could visit URLs via a browser or a
non-browser app using WebView. We obtained 3 source methods
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Chris Chao-Chun Cheng, Chen Shi, Neil Zhenqiang Gong, and Yong Guan
Table 6: The AED that EviHunter constructed for the 4 benchmark apps in DroidBench.  refers to “/data/-
data/”.
App Package Name
de.ecspride
edu.mit.event_context_shared_pref_listener
edu.mit.icc_event_ordering
org.cert.writeFile
Evidence File Path
Evidence Type
/files/out.txt
Device ID
/shared_prefs/settings.xml Device ID
Device ID
/shared_prefs/prefs.xml
/files/sinkFile.txt
Location
Table 7: The AED that EviHunter constructed for the three benchmark apps we designed.  refers to “/data/-
data/”, while  represents “/sdcard/Android/data/”.
App Package Name
com.evihunter.GPS
com.evihunter.GPS
com.evihunter.GPS
com.evihunter.Browser /app_goo2/goo3
com.evihunter.Browser /files/foo_.bin
com.evihunter.Browser /files/foo3
com.evihunter.Browser /sdcard/browser_.txt
com.evihunter.IM /databases/mfChat.db
Evidence File Path
Evidence Type
/shared_prefs/com.evihunter.GPS_preferences.xml Time
/databases/mfGps.db
/files/.txt
Location, Time
Location
Visited URL
Time
Visited URL
Time
Text Input, Time
that return URLs from existing tools [12, 21, 35], and we found
one more source method whose return value is URL. Moreover,
we found that the arguments of certain Android APIs and callback
methods correspond to visited URLs. Listing 2 shows an example.
testUrl is initialized as a string constant, passed to the Android API
loadUrl(testUrl) as an input argument, and finally written to the file
system. We can identify that the testUrl is a visited URL because it is
used as an argument of the Android API loadUrl(String). Therefore,
once a variable is used as an argument of loadUrl(String), we add
the data type visited URL to the EvSet of the variable’s tag.
Arguments of certain callback methods also indicate URLs. For
instance, the second argument of the callback method onPageFin-
ished(...) (e.g., line 9 in Listing 2) corresponds to a URL. In total,
we find 6 callback methods whose arguments correspond to URLs.
Once a variable is passed as the corresponding argument of these
methods, we extend the variable’s tag to include visited URL.
Sources for file paths (Path): An app could use a static file path
or a dynamic file path. When a constant string is assigned to a
variable, we initialize the variable’s Path as the constant. In order to
understand dynamic file paths, we sampled 100 dynamic file paths
in our preliminary analysis results and did a manual measurement
study about them. Via manually analyzing the code, we found the
top-3 ways that apps use to generate dynamic file paths include
intent, timestamp, and universally unique identifier (UUID), which
represent 33%, 20%, and 12% of the dynamic file paths, respectively.
Intent refers to the case where a part of the file path is constructed
from an intent that is used for inter-component communications.
When a variable is assigned as the return value of a method that
corresponds to intent, we assign the variable’s Path as . We
found 38 such methods. UUID is a 128-bit random string generated
by the API randomUUID() in the class java.util.UUID. When a
variable is assigned as the return value of the API randomUUID(),
we initialize the variable’s Path as . Timestamp refers to the
case where a part of the file path is constructed using the system
time. When a variable is assigned as the return value of a system
method that returns system time, we initialize the variable’s Path as
. We use the source methods for time that we discussed
in the above as sources for .
4 EVALUATION
We aim to evaluate the AED generated by EviHunter. First, we
evaluate EviHunter using benchmark apps from DroidBench and
benchmark apps that we design. Second, we evaluate EviHunter on
a large number of real-world apps. Third, we show a case study on
how a forensic investigator can use EviHunter to find evidentiary
data on an Android smartphone.
Our implementation leverages Soot [43] to transform an app to
Jimple code, IC3 [16] to build inter-component communications
models, and FlowDroid [12] to build call graphs and entry points.
We perform our experiments on an Intel® Xeon® CPU E5-1603 v3
@ 2.8GHz running Ubuntu 14.04 with 64GB of heap memory for
the JVM.
4.1 Results on Benchmark Apps
Previous studies on mobile security and privacy have designed and
published some benchmark apps, e.g., DroidBench [1] provides a
collection of benchmark apps. Among the 120 benchmark apps
in DroidBench, we found only 4 apps have sinks to a file system
and they all use the soft-coded approach to construct file paths.
One possible reason is that these benchmark apps were designed