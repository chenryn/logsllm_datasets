Information Classification: General
Scaling the Security Researcher
to
Eliminate OSS Vulnerabilities
Once and for All
- Jonathan Leitschuh -
- Patrick Way -
Information Classification: General
- Jonathan Leitschuh -
Software Engineer & Security Researcher
Dan Kaminsky Fellowship @ HUMAN Security
GitHub Star & GitHub Security Ambassador
Twitter: @JLLeitschuh
GitHub: JLLeitschuh
üê≥
Hello!
Information Classification: General
- Patrick Way -
Senior Software Engineer 
OpenRewrite Team  @ Moderne
Twitter: @WayPatrick
GitHub: pway99
Hello!
Information Classification: General
Disclaimer
Information Classification: General
Supported by
The
Dan Kaminsky Fellowship
at
HUMAN Security
Information Classification: General
Chester Higgins/The New York Times
Information Classification: General
It Started
With a Simple Vulnerability
Information Classification: General
HTTP Download of Dependencies in the Java Ecosystem
// build.gradle
maven {
setUrl("http://dl.bintray.com/kotlin/ktor")
}
Information Classification: General
Why is HTTPS important?
9
Information Classification: General
HTTP Download of Dependencies in the Java Ecosystem
example-id
Example insecure repository
http://[SOME URL HERE]
Information Classification: General
HTTP Download of Dependencies in the Java Ecosystem
example-id
Example insecure repository
http://[SOME URL HERE]
Information Classification: General
This Vulnerability was Everywhere!
Information Classification: General
13
Information Classification: General
Who else was vulnerable?
Information Classification: General
‚Äú25% of Sonatype Maven 
Central downloads are still 
using HTTP‚Äù
- Sonatype June 2019 -
Information Classification: General
How do we fix this?
Information Classification: General
Decommissioning HTTP Support
On or around January 15th, 2020
‚óè Maven Central (Sonatype)
‚óè JCenter (JFrog)
‚óè Spring (Pivotal)
‚óè Gradle Plugin Portal (Gradle)
Information Classification: General
‚Äú20% of Sonatype Maven 
Central Traffic is STILL using 
HTTP‚Äù
- Sonatype January 2020 -
Information Classification: General
You can imagine what happened...
January 15th, 2020
Information Classification: General
Information Classification: General
We stopped the bleeding
Information Classification: General
What about the other repositories?
Information Classification: General
Only the most commonly used repositories
‚óè Maven Central (Sonatype)
‚óè JCenter (JFrog)
‚óè Spring (Pivotal)
‚óè Gradle Plugin Portal (Gradle)
Information Classification: General
How do we fix the rest?
Information Classification: General
Bulk Pull Request Generation!
Information Classification: General
How?
Information Classification: General
import java
import semmle.code.xml.MavenPom
private class DeclaredRepository extends PomElement {
DeclaredRepository() {
this.getName() = "repository" or
this.getName() = "snapshotRepository" or
this.getName() = "pluginRepository"
}
string getUrl() { result = getAChild("url").(PomElement).getValue() }
predicate isInsecureRepositoryUsage() {
getUrl().matches("http://%") or
getUrl().matches("ftp://%")
}
}
from DeclaredRepository repository
where repository.isInsecureRepositoryUsage()
select repository,
"Downloading or uploading artifacts over insecure protocol (eg. http or ftp) to/from repository " +
CodeQL repository.getUrl()
Information Classification: General
CodeQL scans 100Ks of OSS Projects
Information Classification: General
import java
import semmle.code.xml.MavenPom
private class DeclaredRepository extends PomElement {
DeclaredRepository() {
this.getName() = "repository" or
this.getName() = "snapshotRepository" or
this.getName() = "pluginRepository"
}
string getUrl() { result = getAChild("url").(PomElement).getValue() }
predicate isInsecureRepositoryUsage() {
getUrl().matches("http://%") or
getUrl().matches("ftp://%")
}
}
from DeclaredRepository repository
where repository.isInsecureRepositoryUsage()
select repository,
"Downloading or uploading artifacts over insecure protocol (eg. http or ftp) to/from repository " +
repository.getUrl()
CodeQL
$2,300 Bounty
Information Classification: General
Pull Request
Generator
Version 1
‚óè Python Based
‚óè Wrapper over ‚Äòhub‚Äô CLI
‚óè One Nasty Regular 
Expression
‚óè Bouncing off GitHub‚Äôs 
rate limiter
Information Classification: General
Information Classification: General
Information Classification: General
Information Classification: General
It worked!
Information Classification: General
Information Classification: General
Information Classification: General
HTTP Download of Dependencies
1,596 
Pull Requests
~40% 
Merged or Accepted
Information Classification: General
$4,000
Thanks to the GitHub Security Lab!
Information Classification: General
I got hooked on
Bulk Pull Request Generation
Information Classification: General
Information Classification: General
I have a Problem
Information Classification: General
Information Classification: General
I was finding too many security vulnerabilities!
Information Classification: General
Information Classification: General
I was finding too many security vulnerabilities!
Information Classification: General
I was finding too many security vulnerabilities!
I needed automation!
Information Classification: General
Automated Accurate Transformations 
at a 
Massive Scale
Information Classification: General
OpenRewrite
Information Classification: General
Abstract Syntax Tree (AST)
Information Classification: General
Abstract Syntax Tree (AST)
Information Classification: General
Format Preserving AST
Whitespace and comments are preserved
Information Classification: General
Tabs
Spaces
Braces on new line
Generated code matches the Surrounding Formatting
Information Classification: General
log.info("...");
Is that log4j, slf4j, LogBack?
Accurate Transformations Require 
Fully Type-attributed ASTs
Information Classification: General
The OpenRewrite AST is both
Syntactically and Semantically aware.
With type attribution and formatting
Syntax alone
Information Classification: General
Even simple code produces complex AST
Information Classification: General
Information Classification: General
Information Classification: General
Information Classification: General
Information Classification: General
What is possible now?
Information Classification: General
What other vulnerabilities can we fix?
Information Classification: General
Three Vulnerabilities
1. Temporary Directory Hijacking
2. Partial Path Traversal
3. Zip Slip
Information Classification: General
Vulnerability #1
Temporary Directory Hijacking
Information Classification: General
Temporary Directory on
Unix-Like Systems is
Shared between All Users
Information Classification: General
Temporary Directory Hijacking - Vulnerable
File f = File.createTempFile(
"prefix",
"suffix"
);
f.delete();
f.mkdir();
Information Classification: General
Information Classification: General
Temporary Directory Hijacking - Vulnerable
File f = File.createTempFile(
"prefix",
"suffix"
);
f.delete();
f.mkdir();
Information Classification: General
Temporary Directory Hijacking - Vulnerable
File f = File.createTempFile(
"prefix",
"suffix"
);
f.delete();
// üèÅ Race condition
f.mkdir(); // Returns `false`
Information Classification: General
Temporary Directory Hijacking - Imperfect Fix
File f = File.createTempFile(
"prefix",
"suffix"
);
f.delete();
if(!f.mkdir())
throw new IOException("Error");
Information Classification: General
Temporary Directory Hijacking - Fix
// Since Java 1.7
File f = 
Files
.createTempDirectory("prefix")
.toFile();
Information Classification: General
Temporary Directory Hijacking - CVEs
‚óè CVE-2022-27772 - Spring Boot
‚óè CVE-2021-20202 - Keycloak
‚óè CVE-2021-21331 - DataDog API
‚óè CVE-2020-27216 - Eclipse Jetty
‚óè CVE-2020-17521 - Apache Groovy
‚óè CVE-2020-17534 - Apache netbeans-html4j
Information Classification: General
Temporary Directory Hijacking
Pull Request Statistics
Information Classification: General
Temporary Directory Hijacking
64 Pull Requests!
Information Classification: General
Temporary Directory Hijacking - Pull Requests
Information Classification: General
Temporary Directory Hijacking - Putting it all together
Information Classification: General
Temporary Directory Hijacking - Putting it all together
Information Classification: General
Vulnerability #2
Partial Path Traversal
Information Classification: General
"/user/sam"
Partial Path Traversal
Information Classification: General
"/user/sam"
"/user/samantha"
Partial Path Traversal
Information Classification: General
Allows an attacker access to a sibling 
directory with the same prefix
Partial Path Traversal
Information Classification: General
Allows an attacker access to a sibling 
directory with the same prefix
"/user/sam"
Partial Path Traversal
Information Classification: General
Allows an attacker access to a sibling 
directory with the same prefix
"/user/sam"
"/user/samantha"
Partial Path Traversal
Information Classification: General
Allows an attacker access to a sibling 
directory with the same prefix
"/user/sam"
"/user/samantha"
Partial Path Traversal
Information Classification: General
Partial Path Traversal - Vulnerability
File parent = parent();
File dir = new File(parent, userControlled());
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
throw new IOException(
"Detected path traversal attack!"
);
}
Information Classification: General
new File("/user/sam/")
Information Classification: General
new File("/user/sam/")
File.getCanonicalPath()
Information Classification: General
new File("/user/sam/")
File.getCanonicalPath()
"/user/sam"
Information Classification: General
new File("/user/sam/")
File.getCanonicalPath()
"/user/sam"
Information Classification: General
Partial Path Traversal - Vulnerability
File parent = parent();
File dir = new File(parent, userControlled());
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
throw new IOException(
"Detected path traversal attack!"
);
}
Information Classification: General
Partial Path Traversal - Vulnerability
File dir = new File(parent, userControlled());
if (!dir.getCanonicalPath()
.startsWith("/user/sam")) {
...
}
Information Classification: General
Partial Path Traversal - Vulnerability
File parent = parent();
File dir = new File(parent, userControlled());
if (!dir.getCanonicalPath()
.startsWith("/user/sam")) {
...
}
Information Classification: General
Partial Path Traversal - Vulnerability
File dir = new File(parent, "../samantha/baz");
if (!dir.getCanonicalPath()
.startsWith("/user/sam")) {
...
}
Information Classification: General
Partial Path Traversal - Vulnerability
File dir = new File(parent, "../samantha/baz");
if (!"/user/samantha/baz"
.startsWith("/user/sam")) {
...
}
Information Classification: General
Partial Path Traversal - Vulnerability
File dir = new File(parent, "../samantha/baz");
if (!"/user/samantha/baz"
.startsWith("/user/sam")) {
throw new IOException(
"Detected path traversal attack!"
);
}
‚ùå
Information Classification: General
Partial Path Traversal - Vulnerability
File parent = parent();
File dir = new File(parent, userControlled());
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
throw new IOException(
"Detected path traversal attack!"
);
}
Information Classification: General
Partial Path Traversal
Fix!
Information Classification: General
Partial Path Traversal - Vulnerability
File parent = parent();
File dir = new File(parent, userControlled());
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
throw new IOException(
"Detected path traversal attack!"
);
}
Information Classification: General
Partial Path Traversal - Vulnerability
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
...
}
Information Classification: General
Partial Path Traversal - Fix #1
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath() +
File.separatorChar)) {
...
}
Information Classification: General
Partial Path Traversal - Fix #2
if (!dir.getCanonicalFile()
.toPath().startsWith(
parent.getCanonicalFile().toPath())) {
...
}
Information Classification: General
Partial Path Traversal - Fix #2 - Better
if (!dir.getCanonicalFile()
.toPath().startsWith(
parent.getCanonicalFile().toPath())) {
...
}
‚úÖ
Information Classification: General
How do we find this vulnerability?
Information Classification: General
Partial Path Traversal - Vulnerability
File parent = parent();
File dir = new File(parent, userControlled());
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
throw new IOException(
"Detected path traversal attack!"
);
}
Information Classification: General
Partial Path Traversal - Vulnerability
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
...
}
Information Classification: General
Partial Path Traversal - Vulnerability
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
...
}
Information Classification: General
Partial Path Traversal - Safe
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath() +
File.separatorChar)) {
...
}
Information Classification: General
It can‚Äôt be that easy, can it?
Information Classification: General
Partial Path Traversal - Vulnerability
if (!dir.getCanonicalPath()
.startsWith(parent.getCanonicalPath())) {
...
}
Information Classification: General
Partial Path Traversal - Vulnerability
String dirCanonical = dir.getCanonicalPath();
if (!dirCanonical
.startsWith(parent.getCanonicalPath())) {
...
}
Information Classification: General
Partial Path Traversal - Vulnerability
String dirCanonical = dir.getCanonicalPath();
String pCanonical = parent.getCanonicalPath() +
File.separatorChar;
if (!dirCanonical
.startsWith(pCanonical)) {