# Scaling the Security Researcher to Eliminate OSS Vulnerabilities Once and for All

## Presenters
- **Jonathan Leitschuh**
  - Software Engineer & Security Researcher
  - Dan Kaminsky Fellowship @ HUMAN Security
  - GitHub Star & GitHub Security Ambassador
  - Twitter: [@JLLeitschuh](https://twitter.com/JLLeitschuh)
  - GitHub: [JLLeitschuh](https://github.com/JLLeitschuh)

- **Patrick Way**
  - Senior Software Engineer, OpenRewrite Team @ Moderne
  - Twitter: [@WayPatrick](https://twitter.com/WayPatrick)
  - GitHub: [pway99](https://github.com/pway99)

## Disclaimer
This presentation is supported by the Dan Kaminsky Fellowship at HUMAN Security.

## Introduction
Hello!

## The Problem
### It Started with a Simple Vulnerability
In the Java ecosystem, dependencies are often downloaded via HTTP. For example:
```groovy
// build.gradle
maven {
    setUrl("http://dl.bintray.com/kotlin/ktor")
}
```

### Why is HTTPS Important?
Using HTTP for downloading dependencies poses significant security risks. Insecure connections can be intercepted, leading to potential man-in-the-middle attacks.

### The Extent of the Issue
- "25% of Sonatype Maven Central downloads are still using HTTP" - Sonatype (June 2019)
- "20% of Sonatype Maven Central traffic is still using HTTP" - Sonatype (January 2020)

### Decommissioning HTTP Support
On or around January 15th, 2020, major repositories like Maven Central, JCenter, Spring, and Gradle Plugin Portal decommissioned HTTP support. This led to widespread issues as many projects were still using HTTP.

## The Solution
### Bulk Pull Request Generation
To address this, we developed a bulk pull request generator to automatically update insecure URLs in project configurations.

#### How It Works
We used CodeQL to scan hundreds of thousands of open-source projects for insecure repository usage. Here's an example query:
```java
import java
import semmle.code.xml.MavenPom

private class DeclaredRepository extends PomElement {
    DeclaredRepository() {
        this.getName() = "repository" or
        this.getName() = "snapshotRepository" or
        this.getName() = "pluginRepository"
    }

    string getUrl() { result = getAChild("url").(PomElement).getValue() }

    predicate isInsecureRepositoryUsage() {
        getUrl().matches("http://%") or
        getUrl().matches("ftp://%")
    }
}

from DeclaredRepository repository
where repository.isInsecureRepositoryUsage()
select repository,
"Downloading or uploading artifacts over insecure protocol (eg. http or ftp) to/from repository " +
repository.getUrl()
```

#### Pull Request Generator
- **Version 1**: Python-based, wrapper over the `hub` CLI, using regular expressions.
- **Results**: 1,596 pull requests generated, with ~40% merged or accepted.

### Automating Accurate Transformations at a Massive Scale
We then turned to OpenRewrite, which uses an Abstract Syntax Tree (AST) to preserve formatting and ensure accurate transformations.

#### OpenRewrite Features
- **Format Preserving AST**: Whitespace and comments are preserved.
- **Fully Type-attributed ASTs**: Ensures syntactic and semantic awareness.

### What Else Can We Fix?
#### Three Vulnerabilities
1. **Temporary Directory Hijacking**
2. **Partial Path Traversal**
3. **Zip Slip**

### Temporary Directory Hijacking
- **Vulnerable Code**:
  ```java
  File f = File.createTempFile("prefix", "suffix");
  f.delete();
  f.mkdir();
  ```
- **Race Condition**: An attacker can create the directory between the `delete()` and `mkdir()` calls.
- **Fix**:
  ```java
  File f = Files.createTempDirectory("prefix").toFile();
  ```

- **CVEs**:
  - CVE-2022-27772 - Spring Boot
  - CVE-2021-20202 - Keycloak
  - CVE-2021-21331 - DataDog API
  - CVE-2020-27216 - Eclipse Jetty
  - CVE-2020-17521 - Apache Groovy
  - CVE-2020-17534 - Apache netbeans-html4j

- **Pull Request Statistics**: 64 pull requests generated.

### Partial Path Traversal
- **Vulnerable Code**:
  ```java
  File parent = parent();
  File dir = new File(parent, userControlled());
  if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath())) {
      throw new IOException("Detected path traversal attack!");
  }
  ```

- **Issue**: An attacker can access a sibling directory with the same prefix.
- **Fix #1**:
  ```java
  if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath() + File.separatorChar)) {
      ...
  }
  ```
- **Fix #2** (Better):
  ```java
  if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
      ...
  }
  ```

### Conclusion
By leveraging tools like CodeQL and OpenRewrite, we can automate the process of identifying and fixing vulnerabilities in open-source projects, making the software ecosystem more secure.

Thank you for your attention!