# A First Analysis of Multipath TCP on Smartphones

**Authors:**
- Quentin De Coninck<sup>1</sup>
- Matthieu Baerts<sup>2</sup>
- Benjamin Hesmans<sup>1</sup>
- Olivier Bonaventure<sup>1</sup>

**Affiliations:**
1. Université catholique de Louvain, Louvain-la-Neuve, Belgium
   - {quentin.deconinck, benjamin.hesmans, olivier.bonaventure}@uclouvain.be
2. Tessares SA, Louvain-la-Neuve, Belgium

**Project Website:**
- [http://smartphone.multipath-tcp.org](http://smartphone.multipath-tcp.org)

## Abstract
Multipath TCP (MPTCP) is a recent extension to the TCP protocol that allows multihomed hosts, such as smartphones, to send and receive data over multiple interfaces. Despite growing interest in this extension, little is known about its behavior with real applications in wireless networks. This paper presents an analysis of a trace from a SOCKS proxy serving smartphones using MPTCP. This first detailed study of real MPTCP traffic on smartphones reveals several interesting insights into its behavior in real-world conditions. The analysis confirms the heterogeneity of wireless and cellular networks, which influences MPTCP's scheduling. It also shows that most additional subflows are not used for data transmission, and quantifies the amount of reinjections, indicating that they are not a significant issue for MPTCP deployment. Using our methodology to detect handovers, we find that approximately one-quarter of the connections using multiple subflows experience data handovers.

## 1. Introduction
TCP is the dominant transport protocol on both wired and wireless networks. Over the years, TCP has evolved to include various optimizations. Multipath TCP (MPTCP) is the latest major extension to TCP, enabling a multihomed host to exchange data for a single connection over different interfaces. MPTCP was standardized in early 2013, and although it is still relatively new, it is already being used to support several commercial services. For example, in September 2013, Apple deployed MPTCP on hundreds of millions of smartphones and tablets to improve the user experience for the Siri voice recognition application. In July 2015, Korean Telecom announced that they had enabled MPTCP on Android smartphones to bond WiFi and LTE, achieving download speeds of up to 800 Mbps. In September 2015, OVH, a French ISP, introduced their OverTheBox service, which uses MPTCP to enable small and medium enterprises to bond multiple DSL and cable links. As more use cases are explored, it is expected that MPTCP traffic will grow in the coming years.

Despite the potential impact of MPTCP on smartphones, there is limited understanding of its behavior with real applications. Most studies on MPTCP performance have relied on lab measurements or test applications. This paper provides the first detailed analysis of MPTCP operation on smartphones used by real users. Since MPTCP is not yet widely deployed on Internet and cloud servers, generating MPTCP traffic requires a SOCKS proxy installed on a server supporting MPTCP, with smartphones configured to use this proxy. By sharing the collected trace, measurement tools, and analysis, this paper enhances our understanding of the dynamics of this new protocol.

## 2. Multipath TCP and Related Work
Multipath TCP (MPTCP) is a recent TCP extension that enables the transmission of data belonging to one connection over different paths or interfaces. An MPTCP connection is a logical association providing a bytestream service. To illustrate, consider a smartphone using MPTCP. The smartphone initiates an MPTCP connection by adding the MP CAPABLE option in the SYN segment sent over its cellular interface. If the server supports MPTCP, it includes its key in the MP CAPABLE option sent in the SYN+ACK. This initial TCP connection is called the initial subflow. The smartphone can then establish additional subflows over other interfaces, such as WiFi, by sending a new SYN segment with the MP JOIN option. This option contains a token derived from the key announced by the server, identifying the MPTCP connection. MPTCP uses two levels of sequence numbers: the regular TCP sequence number and the Data Sequence Number (DSN). When data is sent over a subflow, its DSN is mapped to the regular sequence numbers using the DSS option, which also contains DSN acknowledgments. In case of losses, MPTCP can retransmit data over a different subflow, a process known as reinjection.

The operation of an MPTCP implementation depends on several algorithms, including:
- **Path Manager:** Defines the strategy for creating and deleting subflows. Smartphones typically use the full-mesh path manager, which creates one subflow over each pair of interfaces.
- **Packet Scheduler:** Selects the active subflow with an open congestion window to send data. The default Linux kernel scheduler prefers the subflow with the smallest RTT.
- **Congestion Controller:** Manages congestion control, with the standard LIA controller being used in this study.

Several researchers have analyzed MPTCP performance through measurements. Raiciu et al. [19] discuss how MPTCP can support mobile devices and provide early measurement results. Paasch et al. [15] propose three modes for MPTCP operation in wireless networks and analyze handover measurements. Chen et al. [1] analyze MPTCP performance in WiFi/cellular networks using bulk transfer applications on laptops. Ferlin et al. [8] study MPTCP's reaction to bufferbloat and propose a mitigation technique, while Deng et al. [4] compare the performance of single-path TCP over WiFi and LTE with MPTCP on multi-homed devices. Hesmans et al. [11] analyze a one-week server trace supporting MPTCP.

## 3. Dataset
Although MPTCP is used by hundreds of millions of Apple smartphones for the Siri voice recognition application, collecting both WiFi and cellular traces without ISP cooperation is challenging. Therefore, a MPTCP-capable SOCKS proxy was set up, and this analysis focuses on the MPTCP implementation in the Linux kernel, distributed from [http://multipath-tcp.org](http://multipath-tcp.org) and integrated into Android. The dataset covers traffic from a dozen users using Nexus 5 smartphones running Android 4.4 with a modified Linux kernel that includes MPTCP v0.89.5. These users were professors, PhD, or Master students at Université catholique de Louvain. Some used their devices only for internet access, while others used them as their primary phones.

To force applications to use MPTCP, ShadowSocks was installed on each smartphone and configured to use a SOCKS server supporting MPTCP for all TCP connections. Note that ShadowSocks does not support IPv6, so the trace only contains IPv4 packets. The smartphones use MPTCP over their WiFi and cellular interfaces to reach the SOCKS server, which then uses regular TCP to interact with the final destinations. From the server side, all connections from the smartphones appear as coming from the SOCKS server, making the external IP address of the smartphone invisible to the contacted servers. This might affect the operation of some servers that adapt their behavior based on the client IP address. Additionally, the ShadowSocks client sends DNS requests over TCP.

A special Android application managing the use of cellular and WiFi interfaces was also installed on each smartphone. This application enables simultaneous use of both interfaces, controls routing tables, and updates policy routes required for MPTCP. The SOCKS proxy ran tcpdump to collect all packets exchanged with the smartphones. Measurements were performed in Belgium from March 8th to April 28th, 2015. Over this period, more than 71 million MPTCP packets were collected, totaling 25.4 GBytes over 390,782 MPTCP connections. The analysis scripts are open-sourced [2,3].

## 4. Characterization of the Trace
The main characteristics of the MPTCP connections in the dataset are analyzed. The destination ports of the captured packets are insufficient to identify the application-level protocol, as all packets are sent to the SOCKS proxy port (443) to prevent middlebox interferences. The real destination port is extracted from the SOCKS command sent by the ShadowSocks client at the beginning of each connection. Table 1 shows that most connections and data bytes are related to web traffic. Since ShadowSocks sends DNS requests over TCP, a large fraction of the connections use port 53. Other popular port numbers include port 4070 (used by Spotify), Google Services (5228), and Google Chromecast (8009).

| Port | # Connections | % Connections | Bytes | % Bytes |
|------|---------------|---------------|-------|---------|
| 53   | 107,012       | 27.4%         | 17.4 MB | 0.1%    |
| 80   | 103,597       | 26.5%         | 14,943 MB | 58.8%  |
| 443  | 104,223       | 26.7%         | 9,253 MB | 36.4%  |
| 4070 | 571           | 0.1%          | 91.7 MB | 0.4%    |
| 5228 | 10,602        | 2.7%          | 27.3 MB | 0.1%    |
| 8009 | 10,765        | 2.8%          | 0.97 MB | < 0.1%  |
| Others | 54,012       | 13.8%         | 1,090 MB | 4.3%    |

65% of the observed connections last less than 10 seconds, with 4.3% being failed connections. 20.8% of the connections last more than 100 seconds, and six of them last for more than one entire day (up to nearly two days). Most (86.9%) of the connections carry less than 10 KBytes. Specifically, 3.1% of the connections carry between 9 and 11 bytes, which are effectively empty connections due to the 7-byte SOCKS command and the 2-byte overhead of the SYNs and connection closure (RST or FIN).

This detailed analysis provides valuable insights into the real-world behavior of MPTCP on smartphones, highlighting the importance of further research and optimization for this promising technology.