is reached.
If the resulting delta graph does not lead to a solution, this
step “shuffles” out-of-order payload statements, see Section 5.2,
and builds a new delta graph. Note that the number of different
permutations may be exponential. Therefore, our algorithm sets an
upper bound P on the number of tried permutations.
Each permutation results in a different yet semantically equiv-
alent SPL payload, so the CFG of the payload (called Adjacency
Matrix, MAd j) needs to be recalculated.
5.6 Discovering dispatcher blocks
The simulation phase takes the individual functional blocks (con-
tained in the minimum induced subgraph Hki
) and tries to find
the appropriate dispatcher blocks to compose the BOP gadgets. It
returns a set of memory assignments for the corresponding dis-
patcher blocks, or an error indicating un-satisfiable constraints for
the dispatchers.
BOPC is called to find a dispatcher path for every edge in the
minimum induced subgraph. That is, we need to simulate every
control flow transfer in the adjacency matrix, MAd j of the SPL
payload. However, dispatchers are built on the prior set of BOP
gadgets and their impact on the binary’s execution state so far, so
BOP gadgets must be stitched with the respect to the program’s
current flow originating from the entry point.
Finding dispatcher blocks relies on concolic execution. Our algo-
rithm utilizes functional block proximity as a metric for dispatcher
path quality. However, it cannot predict which constraints will take
exponential time to solve (in practice we set a timeout). Therefore
concolic execution selects the K shortest dispatcher paths relative
to the current BOP chain, and tries them in order until one produces
a set of satisfiable constraints. It turns that this metric works well
in practice even for small values of K (e.g., 8). This is similar to the
k-shortest path [67] algorithm used for the delta graph.
When simulation starts it also initializes any SPL variables at the
locations that are reserved during the variable mapping (Section 5.4).
These addresses are marked as immutable, so any unintended mod-
ification raises an exception which stops this iteration.
In Table 3, we introduce the set of Dereferenced Addresses, DM ,
which is the set of memory addresses whose contents are loaded
into registers. Simulation cannot obtain the exact location of a
symbolic address (e.g., [rax + 4]) until the block is executed
and the register has a concrete value. Before simulation reaches a
functional block, it concretizes any symbolic addresses from DM
and initializes the memory cell accordingly. If that memory cell
has already been set, any initialization prior to the entry point
cannot persist. That is, BOPC cannot leverage an AWP to initialize
this memory cell and the iteration fails. If a memory cell has been
used in the constraints, its concretization can make constraints
unsatisfiable and the iteration may fail.
Simulation traverses the minimum induced subgraph, and incre-
mentally extends the SPL state from one BOP gadget to the next,
ensuring that newly added constraints remain satisfiable. When
encountering a conditional statement (i.e., a functional block has
two outgoing edges), BOPC clones the current state and continues
building the trace for both paths independently, in the same way
that a symbolic execution engine handles conditional statements.
When a path reaches a functional block that was already visited,
it gracefully terminates. At the end, we collect all those states and
check whether the constraints of all these paths are satisfied or not.
If so, we have a solution.
5.7 Synthesizing exploits
If the simulation module returns a solution, the final step is to en-
code the execution trace as a set of memory writes in the target
binary. The constraint set Cw collected during simulation reveals a
memory layout that leads to a flow across functional blocks accord-
ing to the minimum induced subgraph. Concretizing the constraints
for all participating conditional variables at the end of the simula-
tion can result in incorrect solutions. Consider the following case:
Vulnerable Application
Vulnerability
CFG
Time
(m:s)
10:08
12:36
01:14
00:27
03:22
00:27
01:53
29:41
10:22
82:25
Total number of functional blocks
Call
Prim. Nodes
27,087
AW
24,169
AW
3,399
FMS
FMS
1,354
8,899
FMS
1,488
AW
6,688
AW
74,186
AW
AW
18,790
166,081
FMS
Program
CVE-2006-5815 [18]
ProFTPd
CVE-2013-2028 [14]
nginx
CVE-2012-0809 [20]
sudo
BugtraqID 41956 [17]
orzhttpd
CVE-2000-0573 [22]
wuftdp
CVE-2002-1496 [15]
nullhttpd
opensshd
CVE-2001-0144 [16]
wireshark CVE-2014-2299 [21]
apache
CVE-2006-3747 [13]
smbclient
CVE-2009-1886 [19]
Table 4: Vulnerable applications. The Prim. column indicates the primitive type (AW = Arbitrary Write, FMS = ForMat String).
Time is the amount of time needed to generate the abstractions for every basic block. Functional blocks show the total number
for each of the statements (RegSet = Register Assignments, RegMod = Register Modifications, MemRd = Memory Load, MemWr =
Memory Store, Call = system/library calls, Cond = Conditional Jumps). Note that the number of call statements is small because
we are targeting a predefined set of calls. Also note that MemRd statements are a subset of RegSet statements.
RegMod MemRd MemWr
199
279
18
8
11
7
19
193
66
951
RegSet
40,143
31,497
5,162
2,317
14,101
2,327
8,800
12,4053
33,615
265,980
Cond
3,029
3375
307
89
921
125
558
4555
1,768
28,705
Total
45,427
37,876
5715
2473
15,463
2,609
9,752
131276
36,278
304,027
Edges
49,862
44,645
6,267
2,163
17,092
2,701
12,487
162,111
34,205
351,309
387
1,168
26
9
62
77
98
639
212
1,481
1,592
1,522
157
39
274
54
214
1,736
490
6,791
77
35
45
11
94
19
63
100
127
119
Description
|S| flat?
4
✓
8
✓
5
✓
10
✓
3
✓
4
✓
5
✓
6
✓
6
✓
2
✗
2
✗
7
✗
4
✗
Initialize 4 registers with arbitrary values
Initialize 4 registers with pointers to arbitrary memory
Initialize 5 registers with arbitrary values
Initialize 5 registers with pointers to arbitrary memory
Initialize a register with an arbitrary value and modify it
Read from arbitrary memory
Payload
regset4
regref4
regset5
regref5
regmod
memrd
memwr Write to arbitrary memory
print
execve
abloop
infloop
ifelse
loop
Table 5: SPL payloads. Each payload consists of |S| state-
ments. Payloads that produce flat delta graphs (i.e., have no
jump statements), are marked with ✓. memwr payload mod-
ifies program memory on the fly, thus preserving the Turing
completeness of SPL (recall from Section 3 that AWP/ARP-
based state modification is no longer allowed).
Display a message to stdout using write
Spawn a shell through execve
Perform an arbitrarily long bounded loop utilizing regmod
Perform an infinite loop that sets a register in its body
An if-else condition based on a register comparison
Conditional loop with register modification
a = input();
if (a > 10 && a < 20) {
a = 0;
/* target block */
}
The symbolic execution engine concretizes the symbolic variable
assigned to a upon assignment. When execution reaches “target
block”, a is 0, which is contradicts the precondition to reach the
target block. Hence, BOPC needs to resolve the constraints during
(i.e., on the fly), rather than at the end of the simulation.
Therefore, constraints are solved inline in the simulation. BOPC
carefully monitors all variables and concretizes them at the “right”
moment, just before they get overwritten. More specifically, mem-
ory locations that are accessed for first time, are assigned a symbolic
variable. Whenever a memory write occurs, BOPC checks whether
the initial symbolic variable still exists in the new symbolic expres-
sion. If not, BOPC concretizes it, adding the concretized value to
the set of memory writes.
There are also some symbolic variables that do not participate
in the constraints, but are used as pointers. These variables are
concretized to point to a writable location to avoid segmentation
faults outside of the simulation environment.