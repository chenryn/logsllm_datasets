veriﬁcation card id (i.e. for each voter).
6) kid is the corresponding private key, held by the voting
client.
The vote is Πψ
among the CCR’s.
7) ˆk, which is different for each voter,2 is secret-shared
8) k = kid · ˆk is used to retrieve the choice code.
1) Ballot preparation and validity proof: The client prepares
and proves validity of a vote as follows. Suppose the voter
selected ψ options v1,v2, . . . ,vψ, each corresponding to an
answer to a question in the election. The voting client has a
codes card ID id and a card-speciﬁc private key kid.
i=1vi. For each choice vi, the client sends a
partial choice code pCCi = vkid
i which is used later to compute
the choice code that is returned to the voter. Obviously, the
partial choice codes must match the vote, or the client can
cheat by sending the vote that it wants with the partial choice
codes that will please the voter. Since all these values are sent
encrypted, the proof that they are consistent is quite involved.
Below, E1 is the encrypted vote and E2 is the encrypted partial
choice codes. The ciphertext F1 is created only to prove that
E2 contains the matching partial choice codes for the vote in
E1. In Step 6, πe proves that F1 matches the vote, E1; in Step 8,
πp proves that F1 matches the choice codes, E2. Hence E1 and
E2 are meant to match each other. The voting client
2This is what the spec says, but the notation for these values is very strange:
the sum of four shared values indexed by id is not itself indexed by id—
we assume that all three of these values (ˆk,kid ,k) are meant to vary among
voters/cards.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
646
1) computes the vote ciphertext
E1 = (gr,Πψ
i=1vi · ELr).
2) For each choice vi (i = 1, . . . ,ψ), it computes a partial
3) It encrypts each pCCi with a separate element of the
choice code pCCi = vkid
i
.
multi-element key pk, as
E2 = (gr
(cid:4)
,pCC1 · (pk(1))r
(cid:4)
, . . . ,pCCψ · (pk(ψ))r
(cid:4)
).
4) It uses the Schnorr protocol [8] to produce a proof of
5) It computes F1 as Ekid
knowledge πs of r used in E1.
1 , that is,
F1 = (grkid , (Πψ
i=1vi · ELr)kid ).
6) It generates a proof of exponentiation πe to prove that
(Kid,F1) is indeed equal to (gkid ,Ekid
1
) for a secret kid.
7) It multiplies all but the ﬁrst element of E2 together to
form a standard El Gamal encryption.
˜E2 = (gr
(cid:4)
,Πψ
i=1pk(i)r
(cid:4)
pCCi).
8) It generates a plaintext equality proof πp to show that F1
), w.r.t.
i=1pk(i) in the second
9) The vote, deﬁned as E1,E2,F1,πs,πe,πp, is submitted to
and ˜E2 encrypt the same value (that is, Πψ
EL in the ﬁrst case and w.r.t. Πψ
case.
i=1 pkid
i
the server.
2) Ballot Processing and code return: Now, for each vote id,
the server-side needs to verify the proofs, compute the choice
codes and send them back to the voter, who can then check
them on her codes card.
Section 5.4.3 of the sVote2.1 spec [7] describes an original
veriﬁable multiparty protocol in which the Control Components
(CCR1,CCR2,CCR3,CCR4) and the Vote Veriﬁcation Context
(VVC) decrypt the partial choice codes, retrieve the appropriate
choice code from a code table and prove that they have
computed it correctly. This is summarised below. The intended
property is that an incorrect generation/retrieval can be detected
by the auditors if not all the CCRs collude. The VVC is not
meant to be trusted.
1) Each Control Component (CCR) veriﬁes the vote ZKPs
and, if they pass, uses its share of sk(i)
CCR and ˆk to compute
a partial decryption of E2 exponentiated by ˆk. (Details are
omitted.)
2) This allows the VVC to generate the pre-Choice return
code for each i (i = 1, . . . ,ψ) as
pCid
−r
i = g
= vk
i
(cid:4)·sk(i)
CCR
·ˆk · (pk(i)
CCR
(cid:4)·ˆk · vkid·ˆk
i
)r
3) The VVC then computes each long Choice Code
lCCid
i = SHA256(vk
i ||id||public data)
4) For i = 1, . . . ,ψ, the VVC uses SHA256(lCCi) as an index
into a precomputed table of encrypted choice codes. It
derives the decryption key for the i-th choice code from
lCCi and a secret known only to the VVC. The decrypted
choice codes are returned to the voter.
5) Finally, the encrypted vote E1 is passed to the mix servers.
Note that the VVC is not meant to be able to decrypt any
choice codes for which it has not received a corresponding
vote: because it does not know k, there is no obvious way for
it to generate vk
i and hence lCCi.
There is a second code-based phase in which the voter can
conﬁrm that she received the choice code she expected, and
thus ﬁnalise the casting of her vote. The details are similar to
the choice-code process.
A later process for mixing and decrypting the votes is
described in Section VI. Each vote is factorized at the end
to recover the individual primes.
III. PITFALLS OF THE FIAT-SHAMIR TRANSFORM: WHY
INDIVIDUAL VERIFIABILITY FAILS (1)
In this section we show that the vote validity NIZKPs are
not sound, which can be used by a malicious client to submit
a nonsense vote, prove it is valid, and retrieve the right choice
codes. The voter would then consider that her vote intent was
correctly captured. However, when this vote was decrypted
after being mixed, it would be invalid.
The Fiat-Shamir transform [9] is a standard method of turn-
ing an interactive proof into a non-interactive one. Informally,
the idea is simple: rather than waiting for the veriﬁer to generate
a random challenge, the prover generates a challenge by hashing
the prover’s initial commitments. This can be proven to be
secure assuming that the hash function behaves as a random
oracle.
sVote uses Maurer’s uniﬁed proofs framework [1], which
is proven secure in the non-adaptive setting, in which the
statement is given to the prover. However, sVote applies it in an
adaptive setting, in which the prover can choose the statement
about which it wants to make a proof. It thus becomes crucial
to also include that statement, in full, into the inputs of the
hash function—soundness collapses otherwise [2].
The requirement of adaptive security is quite common in
voting systems and, as we demonstrate here, it is needed for
the sVote protocol. We want to stress that this issue is not
present in Maurer’s framework [1]—the problem lies in the
misalignment of assumptions in Maurer’s security proof with
the setting of sVote.
Interestingly, the decryption proof described in the Veriﬁa-
bility Security Proof report [10] is different from the one that
appears in the sVote protocol speciﬁcation [7], which is the
one implemented in the system. The ZKP described in that
Security Proof report appears to be correct.
A. Producing a false ballot validity proof
Suppose for simplicity that the voter wants to submit a
single vote v encoded as a prime quadratic residue mod p.
(The extension to multiple (prime) vote choices is immediate.)
Write F1 as (F10,F11) and similarly, E1 = (E10,E11).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
647
).
1) The proof of exponentiation: sVote’s exponentiation proof
is used in step 6 of ballot generation (Section II) to prove
that F1 is properly computed as Ekid
1 . The method is a slight
generalisation of a well-known proof method due to Chaum
and Pedersen [11]. It proceeds as follows:
1) Pick a random a and compute (B1,B2,B3) = (ga,Ea
10
2) Compute c = H(K,F1,B1,B2,B3).
3) Compute z = a + ckid.
(cid:4)
The proof consists of (c,z). It is veriﬁed by computing B
(cid:4)
1
gz/Kc, B
2
H(K,F1,B
=
11, and checking that c equals
(cid:4)
= Ez
/Fc
10, B
(cid:4)
(cid:4)
(cid:4)
3
10
).
,B
,B
1
2
3
2) Lack of adaptive soundness of the proof of exponentiation:
As discussed above, this proof lacks adaptive soundness. The
computation of the challenge c (in bold) shows that g and E1
are not hashed, so there is no guarantee that they are chosen
before the proof is computed. This can be used to generate a
proof of a statement that is not true.
= Ez
11
,Ea
11
/Fc
In what follows, we assume that g was generated honestly,
in a veriﬁable way (but this is not required by the sVote
speciﬁcation) and focus on E1. A malicious adaptive prover
could then proceed as follows.
Start by picking F1 as a random encryption of pCC1 for the
vote the voter intended, that is, as (gr, pCC1 · ELr). Then:
1) Pick random (a1,a2,a3) and compute (B1,B2,B3) =
(ga1,ga2,ga3).
2) Compute c = H(K,F1,B1,B2,B3).
3) Compute z = a1 + ckid.
The proof is (c,z). Then, set E1 = ((B2 · Fc
)1/z),
which guarantees that the veriﬁcation equation passes. But
with overwhelming probability, F1 (cid:5)= Ekid
1 , so E1 will not be an
encryption of the voter’s choice.
)1/z, (B3 · Fc
10
11
3) Why individual veriﬁability fails: We now show how
this can be used to construct a complete ballot that passes
veriﬁcation and returns the right choice codes, though it does
not convey the voter’s chosen vote.
Running the previous steps provides (E1,F1,πe) that pass
veriﬁcation. F1 is a valid encryption of the right partial return
code, but E1 is not an encryption of the right vote.
In order to complete the ballot, we can compute E2 in a
perfectly honest way, using whatever vote the voter asked for
(which will not be cast) and the true pCC1 = vkid . We then
compute πs in a completely honest way by observing that
E10 = (B2 · Fc
)1/z = g(a2+rc)/z, so (a2 + rc)/z is the random
value used to produce E10. Finally, we compute πp in a perfectly
honest way as well, since it corresponds to a true statement
for which we have a witness: F1 and E2 do encrypt the same
value, which is the correct function of the intended vote.
10
All the proofs are valid, so E2 will be used to derive the return
codes corresponding to the vote intent v, which will then be
accepted by an honest voter, who will have her vote conﬁrmed.
However, when E1 is decrypted (after being processed through
the mixnet), it will be declared invalid.
Summary of the problem: In the sVote system, neither the
protocol speciﬁcation, nor the code, always includes the full
statement to be proven in the inputs to the hash function that
is used to generate the challenges in zero knowledge proofs.
Fixing the problem: All uses of the Fiat-Shamir transform
should include all data, including the statement to be proven,
as input to the hash. This includes all the base elements in the
proof of exponentiation.
Current status of the problem: An effort is being made
to remediate the problem in future versions.
IV. THE CLIENT-SIDE PROOFS ARE NOT SUFFICIENT: WHY
INDIVIDUAL VERIFIABILITY FAILS (2)
Even if the ZKPs were sound, individual veriﬁability would
still fail because the ZKPs used to prove consistency between
the vote codes and the vote are not sufﬁcient.
In this section we show how this allows a cheating client
to submit a ballot that substitutes a voter’s choice but states a
corresponding pCC that matches the voter’s request. This passes
veriﬁcation even if the NIZKPs are sound. Some other options
will have invalid pCCs, so it is not clear whether this would
result in a practical attack—the spec is ambiguous on whether
the valid codes would be retrieved in this case. Our report to
the Swiss Federal Chancellery on sVote 1.0 [4] includes a very
similar issue.
The main problem is that the exponentiation proof πe in the
vote generation proves that the product of the partial choice
codes has been correctly exponentiated—it does not prove that
each individual element has been properly exponentiated.
A. Generating a proof of ballot validity when the choice codes
do not match the vote
Suppose that there are two questions on the ballot, each with
two options, but one question is much more important than
the other. A cheating client will fabricate correct vote choice
codes for the important question, despite sending the incorrect
vote. The voter (if she checks carefully) will see that there are
invalid vote choice codes for the unimportant question, but will
receive the correct codes for the one she cares about.
Suppose pyes and pno are primes representing ‘yes’ and ‘no’
answers respectively to the important question (Question 1).
The ballot also contains a second question of less importance
(Question 2), with answers represented by p3 and p4.3
The cheating client can substitute its preferred vote for
Question 1 while building the correct partial choice code