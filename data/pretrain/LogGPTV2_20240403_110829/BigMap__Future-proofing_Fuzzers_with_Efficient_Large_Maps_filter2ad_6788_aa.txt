# BigMap: Future-proofing Fuzzers with Efficient Large Maps

**Authors:** Alif Ahmed, Jason D. Hiser, Anh Nguyen-Tuong, Jack W. Davidson, Kevin Skadron  
**Affiliation:** Department of Computer Science, University of Virginia  
**Emails:** {alifahmed, hiser, an7s, jwd, skadron}@virginia.edu

**Abstract:**
Coverage-guided fuzzing is a powerful technique for identifying security vulnerabilities and latent bugs in software. These fuzzers typically store coverage information in a small bitmap, but hash collisions within this bitmap can reduce their effectiveness. Prior work has shown that naively enlarging the bitmap to mitigate collisions results in unacceptable runtime overhead. This paper introduces BigMap, a two-level hashing scheme that allows the use of arbitrarily large coverage bitmaps with minimal overhead. The key insight is that most operations are performed on the full bitmap, even though only a fraction is actively used. BigMap condenses active regions into a secondary bitmap, limiting operations to this condensed area. We implemented BigMap on top of AFL and evaluated it on 19 benchmarks from FuzzBench and OSS-Fuzz. Results show that BigMap does not suffer from increased runtime overhead, even with large bitmaps. Compared to AFL, BigMap achieved up to 4.5x higher test case generation throughput for a 2MB map and 33.1x for an 8MB map. Parallel fuzzing sessions further increased the throughput gain to 9.2x for a 2MB map, demonstrating superior scalability. Importantly, BigMap's compatibility with various coverage metrics, combined with its efficiency, enabled the exploration of aggressive compositions of expensive coverage metrics and fuzzing algorithms, uncovering 33% more unique crashes. BigMap makes the use of large bitmaps practical and expands the design space for coverage metrics.

## I. Introduction
Real-world applications often have large codebases, making it challenging to detect security vulnerabilities and providing a vast attack surface for adversaries. Fuzzing techniques automatically generate test vectors to expose these vulnerabilities or improve code coverage. Black-box fuzzers, which generate random test vectors without program analysis, scale well and are easily parallelizable but are less likely to find rare bugs. White-box fuzzers, using symbolic execution for exhaustive coverage, are too slow for large applications. Coverage-guided grey-box fuzzers, such as libFuzzer, Honggfuzz, and American Fuzzy Lop (AFL), have been the most successful in finding software bugs. For example, Googleâ€™s OSS-Fuzz platform has uncovered over 20,000 vulnerabilities across 300 projects using these fuzzers.

Coverage-guided fuzzers use coverage metrics to track and guide their test generation process. AFL, for instance, tracks edge hit counts using a coverage bitmap. Each edge encountered during test case execution is assigned a location in the bitmap to store and update hit counts. Due to frequent access, the bitmap should occupy faster cache levels, leading to a historically small size (64kB for AFL). However, this size limitation and the randomness of location assignment can cause hash collisions, reducing the fuzzer's effectiveness. Our work aims to understand and efficiently mitigate this issue.

The straightforward solution to reduce hash collisions is to expand the bitmap size, but prior work has shown that this can severely diminish test case generation throughput. We investigated the reasons behind this and found that most time is spent performing specific operations (e.g., reset, classify, compare, and hash) on the full bitmap, even though only a small portion is actively used. This inefficient access pattern heavily pollutes the processor's data cache, lowering throughput. 

In this paper, we introduce BigMap, a two-level bitmap scheme that optimizes these operations. BigMap adds an extra level of indirection to condense scattered coverage metrics into a sequential bitmap, improving cache locality. Operations are now performed only on the used portion, enabling the use of large maps without sacrificing throughput.

We integrated BigMap into AFL and conducted experiments with benchmarks from FuzzBench and OSS-Fuzz. With AFL's default 64kB map, BigMap demonstrated identical throughput despite the added indirection. The throughput gain increased with map size, reaching up to 13.6x (average 4.5x) for a 2MB map and up to 114x (average 33.1x) for an 8MB map. BigMap also showed better scalability with concurrent fuzzing instances, achieving an average of 9.2x higher throughput than AFL for a 2MB map with up to 12 parallel instances. The higher throughput resulted in uncovering 37% more unique crashes on average.

BigMap is compatible with any coverage metric that uses a bitmap, enabling the exploration of aggressive compositions of coverage metrics and algorithms previously thought infeasible. We demonstrated this by combining laf-intel transformations and N-gram coverage, resulting in a 33% increase in unique crashes.

**Contributions:**
- We investigate the shortcomings of enlarging bitmaps to mitigate hash collisions and identify frequent operations on the full map and excessive cache pollution as key issues.
- We design BigMap, a two-level mapping scheme that limits operations to the used region, allowing arbitrarily large bitmaps without sacrificing speed.
- We extend AFL with BigMap, achieving up to 4.5x higher test case generation throughput for a 2MB map and 33.1x for an 8MB map.
- We evaluate BigMap's scalability with concurrent fuzzing instances, showing an average throughput gain of 9.2x for a 2MB map and uncovering 37% more unique crashes.
- BigMap enables the aggressive composition of coverage metrics, demonstrated by a 33% improvement in unique crash coverage with laf-intel and N-gram.

**Source Code:**
The BigMap fuzzing framework is open-source and available at: [https://github.com/alifahmed/BigMap](https://github.com/alifahmed/BigMap).

## II. Background

### A. American Fuzzy Lop (AFL)
AFL is one of the most popular fuzzers, widely used and extended in many prior works. It uses an evolutionary algorithm for fuzzing, as illustrated in Figure 1. The workflow is generally applicable to other coverage-guided fuzzers. Initially, AFL instruments the target application and populates the seed pool with user-provided inputs. The fuzzing cycle then begins:
1. **Seed Scheduling and Mutation:** AFL prioritizes seeds based on execution speed and input file length, preferring shorter files for more effective mutations. Mutations include deterministic steps (bit-flips, block substitution, splicing) followed by random mutations. For shorter runs, the deterministic stage is often skipped.
2. **Execution and Coverage Feedback:** AFL collects coverage feedback during test case execution. If a test case crashes or hangs, it is reported. If it covers an interesting path, it is added to the seed pool; otherwise, it is discarded. The cycle continues until interrupted or a predefined criterion is met.

**Figure 1: The generic workflow of a coverage-guided fuzzer.**

---

This optimized version of the text is more concise, clear, and professionally formatted, making it easier to read and understand.