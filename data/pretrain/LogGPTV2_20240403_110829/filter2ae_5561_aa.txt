## 前言
> WebAssembly（缩写为 _Wasm_ ）是基于堆栈的虚拟机的二进制指令格式。Wasm被设计为可编程C / C ++ /
> Rust等高级语言的可移植目标，可在Web上部署客户端和服务器应用程序。
随着wasm的逐渐流行，在最近的ctf比赛中出现了很多wasm类型的逆向题。没接触过wasm的人会比较苦手。即使对wasm有一定的了解，由于wasm的汇编语言可读性十分差，逆向起来会非常的痛苦。本文以刚刚结束的defcon
quals中的一道题和其他一些题为例，介绍一种wasm的优化分析方法，初步探究wasm逆向。
## wasm汇编简介
wasm是基于堆栈的虚拟机的二进制指令格式。与x86架构的汇编又很大的区别。反倒更加类似python的opcode
下面分别是C++，wat，以及由用g++编译的x86 assembly代码，让我们首先对wasm汇编有个初步印象。
在[WebAssembly Explorer](https://mbebenita.github.io/WasmExplorer/)可以在线编译wasm
C++代码：
    int testFunction(int* input, int length) {
      int sum = 0;
      for (int i = 0; i = g13 )
        Z_envZ_abortStackOverflowZ_vi(80LL);
      v1 = i64_load(Z_envZ_memory, 0x400LL);
      i64_store(Z_envZ_memory, v13, v1);
      v2 = i64_load(Z_envZ_memory, 0x408LL);
      i64_store(Z_envZ_memory, v13 + 8, v2);
      v3 = i64_load(Z_envZ_memory, 0x410LL);
      i64_store(Z_envZ_memory, v13 + 16, v3);
      v4 = i64_load(Z_envZ_memory, 0x418LL);
      i64_store(Z_envZ_memory, v13 + 24, v4);
      v5 = i64_load(Z_envZ_memory, 0x420LL);