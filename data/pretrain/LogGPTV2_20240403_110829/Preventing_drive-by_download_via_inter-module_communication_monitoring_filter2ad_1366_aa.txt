# Preventing Drive-by Download via Inter-Module Communication Monitoring

**Authors:**
Chengyu Song, Jianwei Zhuge, Xinhui Han, Zhiyuan Ye  
Key Laboratory of Network and Software Security Assurance (Peking University)  
Institute of Computer Science and Technology, Peking University, China  
{songchengyu, zhugejianwei, hanxinhui, yezhiyuan}@icst.pku.edu.cn  
Ministry of Education, China

## Abstract
Drive-by download attacks are one of the most severe threats to Internet users. Simply visiting a malicious webpage can result in the compromise of the client and the infection of malware. By the end of 2008, drive-by downloads had become the primary vector for malware infection [5]. The downloaded malware can steal personal identification and passwords, join botnets to send spam, host phishing sites, or launch distributed denial-of-service (DDoS) attacks.

These attacks typically exploit vulnerabilities in web browsers or their plugins. To address this, we propose an inter-module communication monitoring technique to detect and prevent the exploitation of vulnerable components. We have implemented a prototype system integrated into Microsoft Internet Explorer. Experimental results show that our system accurately detects all attacks targeting defined vulnerabilities with no false positives, while maintaining low performance overhead.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Invasive software

## General Terms
Security

## Keywords
Drive-by download, malicious script, inter-module communication, intrusion detection, ActiveX

*Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
ASIACCS’10, April 13–16, 2010, Beijing, China.
Copyright 2010 ACM 978-1-60558-936-7/10/04 ...$10.00.

## 1. Introduction
A drive-by download, also known as web-based malware, is a download that occurs without the user's explicit consent or understanding of the consequences. As more computers connect to the Internet, drive-by downloads have become a prevalent method for delivering malicious code [5, 2, 31]. These malicious codes can include Trojans that steal identification, passwords, and other valuable information, or bots used to build botnets for sending spam, hosting phishing sites, or launching DDoS attacks [7, 19, 22].

A typical drive-by download attack involves the following steps:
1. Attackers prepare exploit payloads and malware, which may include malicious JavaScript, VBScript, browser plugins, or Adobe Flash. These payloads are hosted on exploit servers, and the malware is stored on separate servers.
2. Attackers embed links to these payloads into legitimate web pages by compromising the sites or purchasing traffic from unscrupulous webmasters.
3. When victims visit these compromised pages, they are redirected to the exploit servers.
4. The browser downloads and processes the exploit payloads, which then launch the attacks.
5. If successful, the prepared malware is downloaded and executed on the victim's machine.

This web-based attack has several advantages over traditional methods, including the ability to launch heap-spray attacks [27, 8, 38] and bypass many existing detection mechanisms. Detection mechanisms can be content-based or behavior-based, and protection systems can be network-based (e.g., firewalls, NIDS) or host-based (e.g., antivirus software, HIDS).

To effectively detect malicious content, it must have distinguishing characteristics. However, in drive-by download attacks, attackers can encode shellcode in various ways, making it difficult for content-based detection mechanisms to identify. For example, JavaScript obfuscation [14, 32] and embedding malicious scripts in encrypted Adobe Flash files [47] are common techniques.

Antivirus software has developed countermeasures against encoding and morphing, but they often rely on static scanning, which is limited by the complexity of modern browsers. Content-based detection mechanisms are also hampered by the ability of browsers to split exploit scripts across multiple files, making reassembly challenging.

Behavior-based detection mechanisms avoid the unpacking and reassembly issues but face other challenges. Firewalls cannot distinguish between legitimate and malicious web traffic, and blacklists like Google Safe Browsing API [18] are often incomplete and outdated. Host-based intrusion detection systems (HIDSs) use system behaviors to detect malicious programs, but the activities involved in drive-by download attacks (e.g., installing plugins, downloading and executing programs) are indistinguishable from legitimate activities, leading to high false negatives or positives.

To overcome these limitations, we propose monitoring inter-module communication (IMC) to detect and prevent drive-by download attacks. Modern web browsers are modularized, and most exploits involve malicious invocations of functions provided by vulnerable modules. By monitoring these communications, we can more easily detect attacks.

Our proposed detection mechanism works by:
1. Monitoring communications to vulnerable modules during a browsing session.
2. Checking the communication content using vulnerability-based signatures [46, 4] to identify known attacks.

We implemented a proof-of-concept system integrated into Microsoft Internet Explorer (MSIE) and tested it on over 100 cached drive-by download attack samples.

The contributions of this paper are:
- Proposing an IMC monitoring-based detection mechanism for drive-by download attacks.
- Describing a proof-of-concept implementation integrated into MSIE.
- Analyzing 19 popular vulnerability reports and generating 37 signatures.
- Evaluating our prototype using 119 cached drive-by download attack samples and Alexa top-ranked sites, demonstrating high detection effectiveness and low false positive rates with minimal performance overhead.

The rest of the paper is structured as follows: In Section 2, we introduce related work and compare our approach. In Section 3, we present the design of our approach, and in Section 4, we describe the implementation of our prototype system. In Section 5, we evaluate the prototype, discuss its limitations and future work in Section 6, and conclude in Section 7.

## 2. Related Work
As drive-by download attacks become more prevalent, various approaches have been proposed to detect, analyze, and mitigate this threat.

### General Studies
Provos et al. [32] studied web-based malware, examining how adversaries place exploits and the different exploit techniques. Zhuge et al. [49] provided an empirical study of the black market behind drive-by download attacks, reporting that about 1.49% of search engine results are malicious. Other studies [31, 9] have also examined the prevalence of malicious websites.

### Server-Side Detection
To detect injection attacks against benign web pages, Halfond and Orso [16] proposed a static technique to detect SQL injection. Bandhakavi et al. [1] described a similar mechanism, later extended to detect cross-site scripting (XSS) attacks [3]. Dynamic taint analysis has been used to detect script injection [26, 25, 40] and SQL injection [17, 36] attacks. While these approaches aim to stop drive-by download attacks at the source, they are limited by the fact that some malicious websites are intentionally set up [49].

### Client-Side Detection
Microsoft's HoneyMonkey system [45] uses the honeypot idea to detect drive-by download attacks. Unlike server-side honeypots, client honeypots actively visit the Internet to trigger web-based attacks. Since legitimate activities are minimized in honeypots, HIDS can be used without false positives. However, high-interaction client honeypots [45, 32, 39] rely on system API-level events, which may miss attacks if the malware does not perform suspicious activities during the detection window. Our approach, which detects essential exploit behavior, can more precisely detect attacks than traditional high-interaction client honeypots.

Jose introduced PHoneyC [24], a low-interaction client honeypot that uses ActiveX emulation and AV scanners to detect malicious web pages. Wepawet [20] provides an online service for analyzing suspicious URLs, using similar ideas but implemented in Java. These systems, like antivirus software, are limited by the complexity of modern browsers, which can be exploited to bypass emulators. Our approach, integrated into real browsers, avoids these issues.

### Detecting Malicious JavaScript
Since many exploits are implemented in JavaScript [23], detecting and analyzing malicious JavaScript has gained attention. Egele et al. [13] and Ratanaworabhan et al. [33] proposed techniques to identify drive-by download attacks by detecting shellcode in JavaScript variables or heap memory. Our approach can detect both shellcode-based and non-shellcode-based attacks.

### Improving Reliability of Plugins and Browsers
Many drive-by download attacks exploit client-side vulnerabilities, particularly in browser plugins. Dormann and Plakosh [10] introduced an automated ActiveX control fuzzing system to detect security flaws. Yee et al. [48] and Douceur et al. [11] proposed new plugin frameworks (Native Client and Xax) that restrict plugins within sandboxes. Grier et al. [15] presented the OP browser, which isolates different principles and scripts in separate sandboxed processes, emphasizing the importance of centralized, explicit IMC for auditing and security checking. Microsoft's Gazelle browser [43] follows a similar architecture. Although these solutions provide better security, they are still prototypes, and many users prefer familiar, older browsers like IE6 and IE7. Our work offers a more secure browsing experience without requiring a complete browser overhaul.

### Vulnerability-Based Signatures
Vulnerability-based signatures have been used in the Shield system [44] and extended to prevent web-based exploits [34]. Our work differs from BrowserShield, which instruments HTML and JavaScript content, by intercepting communications between browser modules.

This optimized text is now more structured, clear, and professional, with improved coherence and flow.