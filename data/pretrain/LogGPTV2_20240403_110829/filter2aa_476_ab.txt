击里。但网上是把这个单独分类出来的，可能别人有一些我不知道的方式和技巧吧，所以在
这里我也暂时保留这个单独分类)
在 PHP manual 中提到了下面一段话
move_uploaded_file section, there is a warning which states
‘If the destination file already exists, it will be overwritten.’
如果 PHP 安全没配置好
就可以通过 move_uploaded_file 函数把自己写的.htaccess 文件覆盖掉服务器上的
这样就能任意定义解析名单了
来做个小实验，先描述下效果：
通过一个.htaccess 文件调用 php 的解析器去解析一个文件名中只要包含"haha"这个字符串的
任意文件，所以无论文件名是什么样子，只要包含"haha"这个字符串，都可以被以 php 的方
式来解析，是不是相当邪恶，一个自定义的.htaccess 文件就可以以各种各样的方式去绕过很
多上传验证机制
建一个.htaccess 文件，里面的内容如下
SetHandler application/x-httpd-php
同目录有个我们上传一个只有文件名并包含字符串"haha"，但是却无任何扩展名的文件
里面的内容是 php 一句话木马
然后我们用中国菜刀去连接测试
看看结果是否如我们预期一样 :)
在中国菜刀里进行配置
然后连接过去
从图片上可以看出，结果如我们预期的一样 :)
所以一个可以由 hacker 掌控的.htaccess 文件是非常邪恶的~
基本上可以秒杀各种市面上的上传验证检测 :) (内容检测除外)
从实际环境来说，我个人接触过的，一般是配合黑名单攻击
比如黑名单里有漏网之鱼，不够完整，漏掉了 htaccess 扩展名
那么就有机会，其他情况暂时还没碰到过，希望有经验的朋友可以提出分享一下~
0x05 服务端检测绕过(文件内容检测)
如果文件内容检测设置得比较严格，那么上传攻击将变得非常困难
也可以说它是在代码层检测的最后一道关卡
如果它被突破了，就算没有代码层的漏洞
也给后面利用应用层的解析漏洞带来了机会
我们这里主要以最常见的图像类型内容检测来举例
---- 文件幻数检测
主要是检测文件内容开始处的文件幻数，比如图片类型的文件幻数如下
要绕过 jpg 文件幻数检测就要在文件开头写上下图的值
Value = FF D8 FF E0 00 10 4A 46 49 46
要绕过 gif 文件幻数检测就要在文件开头写上下图的值
Value = 47 49 46 38 39 61
要绕过 png 文件幻数检测就要在文件开头写上下面的值
Value = 89 50 4E 47
然后在文件幻数后面加上自己的一句话木马代码就行了
---- 文件相关信息检测
图像文件相关信息检测常用的就是 getimagesize()函数
只需要把文件头部分伪造好就 ok 了，就是在幻数的基础上还加了一些文件信息
有点像下面的结构
GIF89a
(...some binary data for image...)
(... skipping the rest of binary data ...)
---- 文件加载检测
这个是最变态的检测了，一般是调用 API 或函数去进行文件加载测试
常见的是图像渲染测试，再变态点的甚至是进行二次渲染(后面会提到)
对渲染/加载测试的攻击方式是代码注入绕过
对二次渲染的攻击方式是攻击文件加载器自身
先说下对渲染/加载测试攻击 - 代码注入绕过
可以用图像处理软件对一张图片进行代码注入
用 winhex 看数据可以分析出这类工具的原理是
在不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般会是图片的注释区
对于渲染测试基本上都能绕过，毕竟本身的文件结构是完整的
但如果碰到变态的二次渲染
基本上就没法绕过了，估计就只能对文件加载器进行攻击了
下面将来介绍二次渲染
比如上传文件前，文件的数据如下
然后上传这个 jpg 但把它重新下载回本地发现了奇怪的地方
我们的 php 一句话木马不见了
可以看出上传后，图片被二次渲染过
新的 JPG 图片内容里含有这个
CREATOR: gd-jpeg v1.0 (using IJG JPEG v62)
可以看出是调用的 GD php 的 gd 库
测试了 gif 文件也一样
原文件内容是（虽然文件名是 2.jpg，实际文件格式是 gif 哈)
上传后下载回来对比
可以发现文件被重新渲染过
一句话代码也不见了
然后是进行 fuzzing 触发报错 看下是被用什么 API 或函数进行的二次渲染
上传文件数据不完整的 gif 文件
触发报错后，知道后台用的是 imagecreatefromgif()这个函数
上传文件数据不完整的 png 文件
触发报错后，知道后台用的是 imagecreatefrompng()这个函数
某后台调用 GD 库对图像进行二次渲染的代码
function image_gd_open($file, $extension)
{
$extension = str_replace('jpg', 'jpeg', $extension);
$open_func = 'imageCreateFrom'. $extension;
//函数名变成 imageCreateFrompng 之类
if (!function_exists($open_func))
{
return FALSE;
}
return $open_func($file); //变成 imagecreatefrompng('/tmp/php0lbTOn')
}
一般进行遇到二次渲染，想绕过，就目前个人经验还没想出方法
它相当于是把原本属于图像数据的部分抓了出来，再用自己的 API 或函数进行重新渲染
在这个过程中非图像数据的部分直接就被隔离开了
能想到的一个思路就是基于数据二义性，即让数据既是图像数据也包含一句话木马代码
就像 shellcode 通过数据二义性绕过 IDS 检测特殊字符一样的道理
但现在我还不知道怎么构造出这样的图像文件
如果要对文件加载器进行攻击，常见的就是溢出攻击
上传自己的恶意文件后，服务器上的文件加载器会主动进行加载测试
加载测试时被溢出攻击执行 shellcode
比如 access/mdb 溢出，大家可以参考下 http://lcx.cc/?FoxNews=1542.html
总之对文件完整性检测的绕过，通常就直接用个结构完整的文件进行代码注入即可
没必要再去测到底是检查的幻数还是文件头结构之类的了
0x06 解析攻击
我们以一个故事的方式来描述，方便大家能更深层次地理解一些渗透的本质
古时候，A 国对 B 国进行攻城战，B 国背后有一条水道，这时候会有以下情况
[*] 完全没防御
[*] 有一点简单的防御 (用木头制成做成的门栏)
[*] 有一定程度的防御 (用金属制成做成的门栏)
[*] 非常强的防御 (几乎完全封闭死了)
从攻击角度来分是这样的
1. 直接解析 (完全没防御或有一点简单的防御)
比如我们直接就可以上传一个扩展名是.php 的文件
只需要简单地绕过客户端 javascript 检测或者服务端 MIME 类型检测就行了
这样来描述一下
A 国直接派了一队精英小分队从水道里直接破坏掉一些普通的木头门栏之类
攻入了 B 国内部
2. 配合解析 (有一定程度的防御)
我们可以理解为先代码注入到服务器上，上传一个带有一句话木马的图片或文件之类
让它待在某个位置，等待这一个解析的配合
比如 php 的文件包含解析，web 服务器的解析漏洞，.htaccess 解析等
这样来描述下
A 国先派了一队精英小分队潜入了 B 国的水道，但是有铁门锁着，没法直接打开
比如要等待一个 B 国的间谍来接应他们，把铁门打开，他们才能进行下一步动作
随着安全意识的增强，现在基本上的主流攻击都在配合解析这一块
所以了解各类解析漏洞/机制是相当重要的
下面会更细致地为解析攻击进行分类
---- 网络渗透的本质
这部分大家纯当 YY 看来玩就是了，也不用对此争论什么，我也并不是在对网络渗透做一个
以偏概全的总结，只是抽象了其中某一部分来看。
其实绝大部分网络渗透的本质(技术部分)就如上面总结的情况
主体就是代码注入+代码解析/执行
这种模式贯穿了几乎主流的技术性渗透攻击
像缓冲区溢出攻击，sql 注入攻击，文件上传攻击，文件包含攻击，脚本代码注入等等
主要是两类情况
1. 直接解析/执行攻击
像缓冲区溢出和 sql 注入攻击，脚本代码注入就是很明显的属于这里攻击
直接将代码注入到一个解析/执行环境里，直接就能让代码得到执行
所以危害性也来得最大，效果最明显
shellcode 注入程序后，直接劫持 EIP，进行该系统环境权限做任何操作
sql 命令注入数据库后，直接就能执行该数据库账号权限下的任何操作
2. 配合解析/执行攻击
算是一种组合攻击，在这类情况下
往往不像第一种情况能拥有直接的解析/执行环境
比较明显的就是我们的上传攻击
我们需要先上传数据(注入代码)到服务端上去
然后想办法去调用解析/执行环境(比如 Web 应用程序解析漏洞)
来解析/执行已经注入到了服务端的代码
如果对渗透的技术部分(社工更多属于非技术因素)看得更本质的话
就是上面描述的代码注入+解析/执行代码
把很多看上去很宽泛、很繁琐的事物
提取出它们的共性，就能更有针对性地对付一类问题
YY 完了网络渗透，接下来开始正式的部分
我们从解析攻击的具体方式来分类如下
---- 直接解析
能以 asp,php 之类的扩展名存储在服务器上
---- 本地文件包含解析
主要是 php 的本地文件包含 (远程文件包含不属于上传攻击绕过范畴)
---- .htaccess
.htaccess
.htaccess
.htaccess 解析
就不用多说了，看看之前.htaccess 文件攻击的那个案例
用户自己定义如何去调用解析器解析文件就可以了
---- web
web
web
web 应用程序解析漏洞以及其原理
Apache/IIS/Nginx 解析漏洞
下面将重点来总结各类 web 应用程序解析漏洞
Apache/IIS/Nginx 的各版本基本上都收集到了(包括老版本)
但出于时间原因，Apache 的没时间测单独的版本
都是测的集成环境，如常见的 WampServer，AppServ
然后 IIS 的版本测试完毕
Nginx 的也因为没有时间测单独的版本，但一般漏洞网站都给出版本范围
会先以环境作分类，这样更适合于从渗透人员的角度
然后会再以漏洞原理作分类，这样更能清楚一些本质的东西
[*] Apache 解析漏洞
解析 - test.php.任意不属于黑名单且也不属于 Apache 解析白名单的名称
描述 - 一个文件名为 x1.x2.x3 的文件，Apache 会从 x3 的位置往 x1 的位置开始尝试解析
如果 x3 不属于 Apache 能解析的扩展名，那么 Apache 会尝试去解析 x2 的位置，
这样一直往前尝试，直到遇到一个能解析的扩展名为止
测试 - 测试了下面这些集成环境，都以它们的最新版本来测试，应该能覆盖所有低版本
WampServer2.0 All Version (WampServer2.0i / Apache 2.2.11)
[Success]
WampServer2.1 All Version (WampServer2.1e-x32 / Apache 2.2.17)
[Success]
Wamp5 All Version (Wamp5_1.7.4 / Apache 2.2.6)
[Success]
AppServ 2.4 All Version (AppServ - 2.4.9 / Apache 2.0.59)
[Success]
AppServ 2.5 All Version (AppServ - 2.5.10 / Apache 2.2.8)
[Success]
AppServ 2.6 All Version (AppServ - 2.6.0 / Apache 2.2.8)
[Success]
上面测试过的集成环境都有这个扩展名解析顺序漏洞，然后所有测试过的集成环境都有
对 php3 扩展名按 php 解析这个小洞 (本质上来说这个不算漏洞，只是在针对一些名单不全
的黑名单时，能有绕过的机会)。
个人是觉得像这些解析漏洞市面上的都只是说有这么一个漏洞，都没怎么给出过详细的
版本范围之类，而渗透不是猜测，最好要做到心知肚明，有矢放的。具体这个解析漏洞到底
波及 Apache 哪些版本和范围，目前我也没时间挨个测试，只有等我有时间了，测出来了再
附带上来。
其实这个解析漏洞大家可以根据上面一些集成环境的 Apache 的版本大概预测下，至少
还是有一定几率的，比如 Apache 2.0.x <= 2.0.59，Apache 2.2.x <= 2.2.17，Apache 2.2.2 <= 2.2.8
之类，当然这些只是一个从高版本对低版本的预测，实际效果还是要测试后才知道，我只是
在这里提一下而已，也不失为一种思路。
WampServer2.0 All Version (Apache 2.2.11)
以 WampServer2.0 最新版 WampServer2.0i 版来测试的