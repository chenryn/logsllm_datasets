debugging technologies in the context of malware analysis
could provide very high ﬁdelity data while maintaining the
transparency that we require. We plan to explore these tech-
niques further and incorporate any useful developments into
our framework.
In this work, we limited our scope to the system-level
analysis that was provided by Volatility (e.g., process list,
services, sockets). While these modules are more than suf-
ﬁcient for the experiments proposed in this paper, we feel
that expanding this scope and introspecting into an individual
process’s memory space to monitor process-level data (e.g.,
stack, heap, call trace) could prove invaluable when analyzing
advanced malware.
Since LO-PHI currently employs the lowest-level of in-
strumentation that we are aware of, we feel that continuing to
push this boundary is going to be critical for the analysis of
more sophisticated future malware. To this end, we feel that
our disk, memory, and CPU introspection capabilities positions
us well to begin investigating malware that attempts to infect
the BIOS or peripherals on a SUT for persistence and plan on
continuing to develop these capabilities.
X. CONCLUSION
We presented LO-PHI, a novel framework capable of
instrumenting physical and virtual machines without any soft-
ware on the system, using a set of sensors and actuators.
13
Furthermore, we developed a supporting framework capable
of automating dynamic analysis of arbitrary binaries by intro-
specting into the memory, disk, and network activity, recon-
structing the semantic operations that occurred, and outputting
them as concise events (e.g., process appeared, ﬁle written).
We show that the sensors used to collect the necessary data
produce minimal artifacts to any software running on the
machine (Section IV) and that our lack of artifacts enables
LO-PHI to analyze particularly sophisticated malware samples
with relative ease. As malware continues to advance and evade
detection, we expect hardware-based analysis frameworks to
become increasingly important. We believe this work exhibits
the usefulness of physical-machine introspection and instru-
mentation, as well as the value of forensic-based malware
analysis. We demonstrated that LO-PHI provides valuable
analytical capabilities that are unavailable using existing tools.
To this end, we hope to engage the community by open-
sourcing the project to help advance the state of the art in
malware analysis.
ACKNOWLEDGMENT
We would like to thank Brendon Chetwynd for his hard-
ware development efforts and general guidance; Charles V.
Wright for his invaluable mentorship, insights, and leadership
in the early phases of this work; Joshua Hodosh and Ryan
Whelan for their contributions to our memory introspection ca-
pabilities and early proofs-of-concept; and ﬁnally Lee Rossey,
Doug Stetson, and John Wilkinson for their oversight and
support throughout.
This work was sponsored by the Assistance Secretary
of Defense for Research and Engineering under Air Force
Contract #FA8721-05-C-0002. Opinions, interpretations, con-
clusions and recommendations are those of the authors and are
not necessarily endorsed by the United States Government.
REFERENCES
[1]
[2]
[3]
[4]
[5]
“Iozone ﬁlesystem benchmark,” http://www.iozone.org/.
“libvirt: The Virtualization API,” http://libvirt.org/.
“OllyDbg,” www.ollydbg.de.
“Windbg,” www.windbg.org.
“An overview of exploit packs,” http://contagiodump.blogspot.com/2010/
06/overview-of-exploit-packs-update.html, May 2015.
[6] Altera Corporation, “PCI Express High Performance Reference De-
sign,” http://www.altera.com/literature/an/an456.pdf, October 2015.
[7] Anubis, “Analyzing Unknown Binaries,” http://anubis.iseclab.org.
[8] D. Aumaitre and C. Devine, “Subverting windows 7 x64 kernel with
dma attacks,” HITBSecConf 2010 Amsterdam, vol. 29, 2010.
[9] M. Auty, A. Case, M. Cohen, B. Dolan-Gavitt, M. H. Ligh, J. Levy, and
A. Walters, “Volatility Framework - Volatile memory extraction utility
framework,” http://www.volatilityfoundation.org/.
[10] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky,
“Hypersentry: enabling stealthy in-context measurement of hypervisor
integrity,” in Proceedings of the 17th ACM conference on Computer
and communications security (CCS). ACM, 2010, pp. 38–49.
[11] S. Bahram, X. Jiang, Z. Wang, M. Grace, J. Li, D. Srinivasan, J. Rhee,
and D. Xu, “Dksm: Subverting virtual machine introspection for fun and
proﬁt,” in Proceedings of the 29th Symposium on Reliable Distributed
Systems (SRDS).
IEEE, 2010, pp. 82–91.
[12] A. Baliga, V. Ganapathy, and L. Iftode, “Automatic inference and
enforcement of kernel data structure invariants,” in Proceedings of
the 24th Annual Computer Security Applications Conference (ACSAC).
IEEE, 2008, pp. 77–86.
[13] D. Balzarotti, M. Cova, C. Karlberger, E. Kirda, C. Kruegel, and
G. Vigna, “Efﬁcient detection of split personalities in malware.” in In
Proceedings of the 17th Annual Network & Distributed System Security
Conference (NDSS). The Internet Society, 2010.
[14] F. Bellard, “Qemu, a fast and portable dynamic translator.” in USENIX
Annual Technical Conference, FREENIX Track, 2005, pp. 41–46.
[15] B. Blunden, The Rootkit Arsenal, 2nd ed.
Jones and Barlett Learning,
2013.
J. Bowling, “Clonezilla: build, clone, repeat,” Linux journal, vol. 2011,
no. 201, p. 6, 2011.
[16]
[17] D. Bruening, Q. Zhao, and S. Amarasinghe, “Transparent Dynamic
the 8th Conference on Virtual
Instrumentation,” in Proceedings of
Execution Environments (VEE). ACM SIGPLAN/SIGOPS, 2012.
[18] B. Carrier, “The Sleuth Kit,” http://www.sleuthkit.org/.
[19] B. D. Carrier and J. Grand, “A hardware-based memory acquisition
procedure for digital investigations,” Digital Investigation, vol. 1, no. 1,
pp. 50–60, 2004.
[20] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario, “Towards
an understanding of anti-virtualization and anti-debugging behavior in
modern malware,” in Proceedings of the 38th annual International
Conference on Dependable Systems and Networks (DSN).
IEEE, 2008,
pp. 177–186.
[21] M. Cohen, D. Bilby, and G. Caronni, “Distributed forensics and incident
response in the enterprise,” Digital Investigation, vol. 8, pp. S101–S110,
2011.
[22] M. Cohen and J. Metz, “PyTSK,” https://github.com/py4n6/pytsk.
[23] B. Dees, “Native command queuing-advanced performance in desktop
storage,” Potentials, IEEE, vol. 24, no. 4, pp. 4–7, 2005.
[24] Z. Deng, X. Zhang, and D. Xu, “SPIDER: Stealthy Binary Program
Instrumentation and Debugging Via Hardware Virtualization,” in Pro-
ceedings of the 29th Annual Computer Security Applications Conference
(ACSAC). ACM, 2013, pp. 289–298.
[25] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, “Ether: Malware Analysis
via Hardware Virtualization Extensions,” in Proceedings of the 15th
Annual Conference on Computer and Communications Security (CCS).
ACM, 2008.
[26] B. Dolan-Gavitt, T. Leek, J. Hodosh, and W. Lee, “Tappan zee (north)
bridge: mining memory accesses for introspection,” in Proceedings of
the 20th conference on Computer and communications security (CCS).
ACM, 2013, pp. 839–850.
[27] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee, “Virtuoso:
Narrowing the semantic gap in virtual machine introspection,” in
Proceedings of the 32nd Symposium on Security and Privacy (Oakland).
IEEE, 2011, pp. 297–312.
[28] M. Dornseif, “0wned by an ipod,” Presentation, PacSec, 2004.
[29] L. Duﬂot, Y.-A. Perez, G. Valadon, and O. Levillain, “Can you still
trust your network card,” CanSecWest/core10, pp. 24–26, 2010.
[30] A. Fattori, R. Paleari, L. Martignoni, and M. Monga, “Dynamic and
Transparent Analysis of Commodity Production Systems,” in Pro-
ceedings of the 25th International Conference on Automated Software
Engineering (ASE’10).
IEEE/ACM, 2010.
[31] P. Ferrie, “Attacks on more virtual machine emulators,” Symantec
Technology Exchange, 2007.
J. FitzPatrick and M. Crabill, “NSA Playset: PCIe,” in DEF CON 22,
2014.
[32]
[33] Y. Fu and Z. Lin, “Space traveling across vm: Automatically bridging
the semantic gap in virtual machine introspection via online kernel
data redirection,” in In Proceedings of the 33rd Annual Symposium on
Security and Privacy (Oakland).
IEEE, 2012, pp. 586–600.
[34] T. Garﬁnkel, “Traps and pitfalls: Practical problems in system call
interposition based security tools.” in In Proceedings of the 10th Annual
Network and Distributed System Security Symposium (NDSS), vol. 3.
The Internet Society, 2003, pp. 163–176.
[35] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh, “Terra: A
virtual machine-based platform for trusted computing,” ACM SIGOPS
Operating Systems Review, vol. 37, no. 5, pp. 193–206, 2003.
[36] C. Guarnieri, A. Tanasi, J. Bremer, and M. Schloesser, “The cuckoo
sandbox: Automated malware analysis,” www.cuckoosandbox.org/.
14
[37]
I. Habib, “Virtualization with kvm,” Linux Journal, vol. 2008, no. 166,
p. 8, 2008.
[58] N. A. Quynh and K. Suzaki, “Virt-ICE: Next-generation Debugger for
Malware Analysis,” in Black Hat USA, 2010.
[39]
[38] B. Hay and K. Nance, “Forensics examination of volatile system data
using virtual introspection,” ACM SIGOPS Operating Systems Review,
vol. 42, no. 3, pp. 74–82, 2008.
J. Heasman, “Implementing and detecting a pci rootkit,” Retrieved
February, vol. 20, no. 2007, p. 3, 2006.
IDA Pro, www.hex-rays.com/products/ida/.
[40]
[41] B. Jain, M. B. Baig, D. Zhang, D. E. Porter, and R. Sion, “Sok:
Introspections on trust and the semantic gap,” in Proceedings of the
35th Symposium on Security and Privacy (Oakland).
IEEE, 2014, pp.
605–620.
[42] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection through
vmm-based out-of-the-box semantic view reconstruction,” in Proceed-
ings of the 14th ACM conference on Computer and communications
security (CCS). ACM, 2007, pp. 128–138.
[43] D. Kirat, G. Vigna, and C. Kruegel, “BareBox: Efﬁcient Malware
Analysis on Bare-metal,” in Proceedings of the 27th Annual Computer
Security Applications Conference (ACSAC). ACM, 2011.
[44] D. Kirat, G. Vigna, and C. Kruegel, “Barecloud: bare-metal analysis-
based evasive malware detection,” in Proceedings of the 23rd USENIX
conference on Security Symposium (SEC’14). USENIX Association,
Berkeley, CA, USA, 2014, pp. 287–301.
[45] S. Krishnan, K. Z. Snow, and F. Monrose, “Trail of bytes: efﬁcient sup-
port for forensic analysis,” in Proceedings of the 17th ACM conference
on Computer and communications security (CCS). ACM, 2010, pp.
50–60.
[46] E. Ladakis, L. Koromilas, G. Vasiliadis, M. Polychronakis, and S. Ioan-
nidis, “You can type, but you can’t hide: A stealthy gpu-based keylog-
ger,” in Proceedings of the 6th European Workshop on System Security
(EuroSec), 2013.
[47] T. K. Lengyel, J. Neumann, S. Maresca, B. D. Payne, and A. Kiayias,
“Virtual machine introspection in a hybrid honeypot architecture.” in In
Proceedings of the 5th Workshop on Cyber Security Experimentation
and Test (CSET). USENIX, 2012.
[48] Z. Lin, J. Rhee, C. Wu, X. Zhang, and D. Xu, “Dimsum: Discovering
semantic data of interest from un-mappable memory with conﬁdence,”
in Proceedings of the 19th Annual Network and Distributed System
Security Symposium (NDSS). The Internet Society, 2012.
[49] M. Lindorfer, C. Kolbitsch, and P. M. Comparetti, “Detecting
environment-sensitive malware,” in Proceedings of
the 14 Interna-
tional Symposium on Recent Advances in Intrusion Detection (RAID).
Springer, 2011, pp. 338–357.
J. Mankin and D. Kaeli, “Dione: a ﬂexible disk monitoring and analysis
framework,” in Proceedings of the 15th International Symposium on
Research in Attacks, Intrusions, and Defenses (RAID). Springer, 2012,
pp. 127–146.
[50]
[51] A. Martin, “Firewire memory dump of a windows xp computer: a
forensic approach,” Black Hat DC, 2007.
J. Molina and W. Arbaugh, “Using independent auditors as intrusion
detection systems,” in In Proceedings of the 4th International Confer-
ence on Information and Communications Security (ICICS). Springer,
2002, pp. 291–302.
[52]
[53] H. Moon, H. Lee, J. Lee, K. Kim, Y. Paek, and B. B. Kang, “Vigilare:
toward snoop-based kernel integrity monitor,” in Proceedings of the
2012 ACM conference on Computer and communications security.
ACM, 2012, pp. 28–37.
[54] A. Ortega, “Paranoid ﬁsh,” http://github.com/a0rtega/paﬁsh.
[55] B. D. Payne, “Libvmi: Simpliﬁed virtual machine introspection,” https:
//github.com/bdpayne/libvmi.
[56] N. L. Petroni Jr, T. Fraser, J. Molina, and W. A. Arbaugh, “Copilot-a
coprocessor-based kernel runtime integrity monitor.” in In Proceedings
of the 13 Security Symposium (SEC). USENIX, 2004, pp. 179–194.
[57] D. Quist and V. Smith, “Detecting the presence of virtual machines
using the local data table,” Offensive Computing, 2006.
15
[59] T. Raffetseder, C. Kruegel, and E. Kirda, “Detecting System Emulators,”
[60]
[61]
in Information Security. Springer, 2007.
J. Rutkowska, “Red Pill,” http://www.ouah.org/Red Pill.html.
J. Rutkowska, “Beyond the cpu: Defeating hardware based ram acqui-
sition,” Proceedings of BlackHat DC 2007, 2007.
[62] B. Schatz, “Bodysnatcher: Towards reliable volatile memory acquisition
by software,” Digital Investigation, vol. 4, pp. 126–134, 2007.
[63] K. Z. Snow, S. Krishnan, F. Monrose, and N. Provos, “SHELLOS:
Enabling Fast Detection and Forensic Analysis of Code Injection
Attacks,” in In Proceedings of the 20th Security Symposium (SEC).
USENIX, 2011.
[64] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang,
Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, “BitBlaze: A New
Approach to Computer Security via Binary Analysis,” in Proceedings
of the 4th International Conference on Information Systems Security
(ICISS). Springer, 2008.
[65] D. Srinivasan, Z. Wang, X. Jiang, and D. Xu, “Process out-grafting:
an efﬁcient out-of-vm approach for ﬁne-grained process execution
monitoring,” in Proceedings of the 18th ACM conference on Computer
and communications security (CCS). ACM, 2011, pp. 363–374.
[66] P. Stewin, “A primitive for revealing stealthy peripheral-based attacks
on the computing platform’s main memory,” in Proceedings of the
13th International Symposium on Research in Attacks, Intrusions, and
Defenses (RAID). Springer, 2013, pp. 1–20.
[67] P. Stewin and I. Bystrov, “Understanding dma malware,” in In Proceed-
ings of the 10th Conference on Detection of Intrusions and Malware,
and Vulnerability Assessment (DIMVA). Springer, 2013, pp. 21–41.
J. St¨uttgen and M. Cohen, “Anti-forensic resilient memory acquisition,”
Digital Investigation, vol. 10, pp. S105–S115, 2013.
[68]
[69] A. Vasudevan and R. Yerraballi, “Stealth Breakpoints,” in Proceedings
of the 21st Annual Computer Security Applications Conference (AC-
SAC’05), 2005.
J. Wang, A. Stavrou, and A. Ghosh, “Hypercheck: A hardware-assisted
integrity monitor,” in In Proceedings of the 13th International Sympo-
sium on Recent Advances in Intrusion Detection (RAID).
Springer,
2010, pp. 158–177.
J. Wang, K. Sun, and A. Stavrou, “A dependability analysis of hardware-
assisted polling integrity checking systems,” in In Proceedings of the
42nd Annual International Conference on Dependable Systems and
Networks (DSN).
J. Wang, F. Zhang, K. Sun, and A. Stavrou, “Firmware-assisted memory
acquisition and analysis tools for digital forensics,” in In Proceedings
of the 6th International Workshop on Systematic Approaches to Digital
Forensic Engineering (SADFE).
IEEE, 2012, pp. 1–12.
IEEE, 2011, pp. 1–5.
[70]
[71]
[72]
[73] C. Willems, R. Hund, A. Fobian, D. Felsch, T. Holz, and A. Vasudevan,
“Down to the bare metal: Using processor features for binary analysis,”
in Proceedings of the 28th Annual Computer Security Applications
Conference (ACSAC). ACM, 2012, pp. 189–198.
[74] L.-K. Yan, M. Jayachandra, M. Zhang, and H. Yin, “V2E: Combining
Hardware Virtualization and Software Emulation for Transparent
and Extensible Malware Analysis,” in Proceedings of
the 8th
SIGPLAN/SIGOPS Conference on Virtual Execution Environments
(VEE). ACM, 2012. [Online]. Available: http://doi.acm.org/10.1145/
2151024.2151053
[75] F. Zhang, K. Leach, K. Sun, and A. Stavrou, “Spectre: A dependable
introspection framework via system management mode,” in Dependable
Systems and Networks (DSN), 2013 43rd Annual IEEE/IFIP Interna-
tional Conference on.
IEEE, 2013, pp. 1–12.
[76] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer, “Secure
coprocessor-based intrusion detection,” in Proceedings of
the 10th
workshop on ACM SIGOPS European workshop. ACM, 2002, pp.
239–242.