The version 1.0.1 exectuable and the `deno types` command is missing types for
`Deno.kill`, `Deno.Signal` and other units.
Windows version: 10.0.18363  
PowerShell version: 7.0.1  
Deno version: 1.0.1
Ubuntu version: 18.04 LTS  
Bash version: 4.4.20(1)-release  
Deno version: 1.0.1
Missing types:
  * `Deno.dir`
  * `Deno.hostname`
  * `Deno.kill`
  * `Deno.link`
  * `Deno.linkSync`
  * `Deno.loadavg`
  * `Deno.osRelease`
  * `Deno.permissions`
  * `Deno.PermissionDescriptor`
  * `Deno.Signal`
  * `Deno.symlink`
  * `Deno.symlinkSync`
  * `Deno.utime`
  * `Deno.utimeSync`
Output of the `deno types` command
    // Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.
    /// 
    /// 
    declare namespace Deno {
      /** A set of error constructors that are raised by Deno APIs. */
      export const errors: {
        NotFound: ErrorConstructor;
        PermissionDenied: ErrorConstructor;
        ConnectionRefused: ErrorConstructor;
        ConnectionReset: ErrorConstructor;
        ConnectionAborted: ErrorConstructor;
        NotConnected: ErrorConstructor;
        AddrInUse: ErrorConstructor;
        AddrNotAvailable: ErrorConstructor;
        BrokenPipe: ErrorConstructor;
        AlreadyExists: ErrorConstructor;
        InvalidData: ErrorConstructor;
        TimedOut: ErrorConstructor;
        Interrupted: ErrorConstructor;
        WriteZero: ErrorConstructor;
        UnexpectedEof: ErrorConstructor;
        BadResource: ErrorConstructor;
        Http: ErrorConstructor;
        Busy: ErrorConstructor;
      };
      /** The current process id of the runtime. */
      export const pid: number;
      /** Reflects the `NO_COLOR` environment variable.
       *
       * See: https://no-color.org/ */
      export const noColor: boolean;
      export interface TestDefinition {
        fn: () => void | Promise;
        name: string;
        ignore?: boolean;
        /** Check that the number of async completed ops after the test is the same
         * as number of dispatched ops. Defaults to true.*/
        sanitizeOps?: boolean;
        /** Ensure the test case does not "leak" resources - ie. the resource table
         * after the test has exactly the same contents as before the test. Defaults
         * to true. */
        sanitizeResources?: boolean;
      }
      /** Register a test which will be run when `deno test` is used on the command
       * line and the containing module looks like a test module.
       * `fn` can be async if required.
       * ```ts
       * import {assert, fail, assertEquals} from "https://deno.land/std/testing/asserts.ts";
       *
       * Deno.test({
       *   name: "example test",
       *   fn(): void {
       *     assertEquals("world", "world");
       *   },
       * });
       *
       * Deno.test({
       *   name: "example ignored test",
       *   ignore: Deno.build.os === "windows"
       *   fn(): void {
       *     // This test is ignored only on Windows machines
       *   },
       * });
       *
       * Deno.test({
       *   name: "example async test",
       *   async fn() {
       *     const decoder = new TextDecoder("utf-8");
       *     const data = await Deno.readFile("hello_world.txt");
       *     assertEquals(decoder.decode(data), "Hello world")
       *   }
       * });
       * ```
       */
      export function test(t: TestDefinition): void;
      /** Register a test which will be run when `deno test` is used on the command
       * line and the containing module looks like a test module.
       * `fn` can be async if required.
       *
       * ```ts
       * import {assert, fail, assertEquals} from "https://deno.land/std/testing/asserts.ts";
       *
       * Deno.test("My test description", ():void => {
       *   assertEquals("hello", "hello");
       * });
       *
       * Deno.test("My async test description", async ():Promise => {
       *   const decoder = new TextDecoder("utf-8");
       *   const data = await Deno.readFile("hello_world.txt");
       *   assertEquals(decoder.decode(data), "Hello world")
       * });
       * ```
       * */
      export function test(name: string, fn: () => void | Promise): void;
      /** Exit the Deno process with optional exit code. If no exit code is supplied
       * then Deno will exit with return code of 0.
       *
       * ```ts
       * Deno.exit(5);
       * ```
       */
      export function exit(code?: number): never;
      export const env: {
        /** Retrieve the value of an environment variable. Returns undefined if that
         * key doesn't exist.
         *
         * ```ts
         * console.log(Deno.env.get("HOME"));  // e.g. outputs "/home/alice"
         * console.log(Deno.env.get("MADE_UP_VAR"));  // outputs "Undefined"
         * ```
         * Requires `allow-env` permission. */
        get(key: string): string | undefined;
        /** Set the value of an environment variable.
         *
         * ```ts
         * Deno.env.set("SOME_VAR", "Value"));
         * Deno.env.get("SOME_VAR");  // outputs "Value"
         * ```
         *
         * Requires `allow-env` permission. */
        set(key: string, value: string): void;
        /** Returns a snapshot of the environment variables at invocation.
         *
         * ```ts
         * Deno.env.set("TEST_VAR", "A");
         * const myEnv = Deno.env.toObject();
         * console.log(myEnv.SHELL);
         * Deno.env.set("TEST_VAR", "B");
         * console.log(myEnv.TEST_VAR);  // outputs "A"
         * ```
         *
         * Requires `allow-env` permission. */
        toObject(): { [index: string]: string };
      };
      /**
       * Returns the path to the current deno executable.
       *
       * ```ts
       * console.log(Deno.execPath());  // e.g. "/home/alice/.local/bin/deno"
       * ```
       *
       * Requires `allow-read` permission.
       */
      export function execPath(): string;
      /**
       * Change the current working directory to the specified path.
       *
       * ```ts
       * Deno.chdir("/home/userA");
       * Deno.chdir("../userB");
       * Deno.chdir("C:\\Program Files (x86)\\Java");
       * ```
       *
       * Throws `Deno.errors.NotFound` if directory not found.
       * Throws `Deno.errors.PermissionDenied` if the user does not have access
       * rights
       *
       * Requires --allow-read.
       */
      export function chdir(directory: string): void;
      /**
       * Return a string representing the current working directory.
       *
       * If the current directory can be reached via multiple paths (due to symbolic
       * links), `cwd()` may return any one of them.
       *
       * ```ts
       * const currentWorkingDirectory = Deno.cwd();
       * ```
       *
       * Throws `Deno.errors.NotFound` if directory not available.
       *
       * Requires --allow-read
       */
      export function cwd(): string;
      export enum SeekMode {
        Start = 0,
        Current = 1,
        End = 2,
      }
      export interface Reader {
        /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number of
         * bytes read (`0`  `0` bytes returned before
         * considering the EOF (`null`). Doing so correctly handles I/O errors that
         * happen after reading some bytes and also both of the allowed EOF
         * behaviors.
         *
         * Implementations should not retain a reference to `p`.
         *
         * Use Deno.iter() to turn a Reader into an AsyncIterator.
         */
        read(p: Uint8Array): Promise;
      }
      export interface ReaderSync {
        /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number
         * of bytes read (`0`  `0` bytes returned before
         * considering the EOF (`null`). Doing so correctly handles I/O errors that happen
         * after reading some bytes and also both of the allowed EOF behaviors.
         *
         * Implementations should not retain a reference to `p`.
         *
         * Use Deno.iterSync() to turn a ReaderSync into an Iterator.
         */
        readSync(p: Uint8Array): number | null;
      }
      export interface Writer {
        /** Writes `p.byteLength` bytes from `p` to the underlying data stream. It
         * resolves to the number of bytes written from `p` (`0` ;
      }
      export interface WriterSync {
        /** Writes `p.byteLength` bytes from `p` to the underlying data
         * stream. It returns the number of bytes written from `p` (`0` ;
      }
      export interface SeekerSync {
        /** Seek sets the offset for the next `readSync()` or `writeSync()` to
         * offset, interpreted according to `whence`: `Start` means relative
         * to the start of the file, `Current` means relative to the current
         * offset, and `End` means relative to the end.
         *
         * Seeking to an offset before the start of the file is an error. Seeking to
         * any positive offset is legal, but the behavior of subsequent I/O
         * operations on the underlying object is implementation-dependent.
         */
        seekSync(offset: number, whence: SeekMode): number;
      }
      /** Copies from `src` to `dst` until either EOF (`null`) is read from `src` or
       * an error occurs. It resolves to the number of bytes copied or rejects with
       * the first error encountered while copying.
       *
       * ```ts
       * const source = await Deno.open("my_file.txt");
       * const buffer = new Deno.Buffer()
       * const bytesCopied1 = await Deno.copy(source, Deno.stdout);
       * const bytesCopied2 = await Deno.copy(source, buffer);
       * ```
       *
       * @param src The source to copy from
       * @param dst The destination to copy to
       * @param options Can be used to tune size of the buffer. Default size is 32kB
       */
      export function copy(
        src: Reader,
        dst: Writer,
        options?: {
          bufSize?: number;
        }
      ): Promise;
      /** Turns a Reader, `r`, into an async iterator.
       *
       * ```ts
       * let f = await Deno.open("/etc/passwd");
       * for await (const chunk of Deno.iter(f)) {
       *   console.log(chunk);
       * }
       * f.close();
       * ```
       *
       * Second argument can be used to tune size of a buffer.
       * Default size of the buffer is 32kB.
       *
       * ```ts
       * let f = await Deno.open("/etc/passwd");
       * const iter = Deno.iter(f, {
       *   bufSize: 1024 * 1024
       * });
       * for await (const chunk of iter) {
       *   console.log(chunk);
       * }
       * f.close();
       * ```
       *
       * Iterator uses an internal buffer of fixed size for efficiency; it returns
       * a view on that buffer on each iteration. It is therefore caller's
       * responsibility to copy contents of the buffer if needed; otherwise the
       * next iteration will overwrite contents of previously returned chunk.
       */
      export function iter(
        r: Reader,
        options?: {
          bufSize?: number;
        }
      ): AsyncIterableIterator;
      /** Turns a ReaderSync, `r`, into an iterator.
       *
       * ```ts
       * let f = Deno.openSync("/etc/passwd");
       * for (const chunk of Deno.iterSync(reader)) {
       *   console.log(chunk);
       * }
       * f.close();
       * ```
       *
       * Second argument can be used to tune size of a buffer.
       * Default size of the buffer is 32kB.
       *
       * ```ts
       * let f = await Deno.open("/etc/passwd");
       * const iter = Deno.iterSync(f, {
       *   bufSize: 1024 * 1024
       * });
       * for (const chunk of iter) {
       *   console.log(chunk);
       * }
       * f.close();
       * ```
       *
       * Iterator uses an internal buffer of fixed size for efficiency; it returns
       * a view on that buffer on each iteration. It is therefore caller's
       * responsibility to copy contents of the buffer if needed; otherwise the
       * next iteration will overwrite contents of previously returned chunk.
       */
      export function iterSync(
        r: ReaderSync,
        options?: {
          bufSize?: number;
        }
      ): IterableIterator;