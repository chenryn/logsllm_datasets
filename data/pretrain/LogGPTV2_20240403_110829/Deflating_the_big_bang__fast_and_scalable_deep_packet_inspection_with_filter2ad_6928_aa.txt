title:Deflating the big bang: fast and scalable deep packet inspection with
extended finite automata
author:Randy Smith and
Cristian Estan and
Somesh Jha and
Shijin Kong
Deﬂating the Big Bang: Fast and Scalable Deep Packet
Inspection with Extended Finite Automata
Randy Smith Cristian Estan Somesh Jha Shijin Kong
Computer Sciences Department, University of Wisconsin-Madison
{smithr,estan,jha,krobin}@cs.wisc.edu
ABSTRACT
Deep packet inspection is playing an increasingly important
role in the design of novel network services. Regular ex-
pressions are the language of choice for writing signatures,
but standard DFA or NFA representations are unsuitable for
high-speed environments, requiring too much memory, too
much time, or too much per-ﬂow state. DFAs are fast and
can be readily combined, but doing so often leads to state-
space explosion. NFAs, while small, require large per-ﬂow
state and are slow.
We propose a solution that simultaneously addresses all
these problems. We start with a ﬁrst-principles characteriza-
tion of state-space explosion and give conditions that elimi-
nate it when satisﬁed. We show how auxiliary variables can
be used to transform automata so that they satisfy these
conditions, which we codify in a formal model that aug-
ments DFAs with auxiliary variables and simple instructions
for manipulating them. Building on this model, we present
techniques, inspired by principles used in compiler optimiza-
tion, that systematically reduce runtime and per-ﬂow state.
In our experiments, signature sets from Snort and Cisco Sys-
tems achieve state-space reductions of over four orders of
magnitude, per-ﬂow state reductions of up to a factor of six,
and runtimes that approach DFAs.
Categories and Subject Descriptors: C.2.0 [Computer
Communication Networks]: General - Security and protec-
tion (e.g., ﬁrewalls)
General Terms: Algorithms, Performance, Security
Keywords: regular expressions, signature matching, deep
packet inspection, XFA
1.
INTRODUCTION
Network devices are increasingly using packet content for
processing incoming or outgoing packets. Deep packet in-
spection, as the process is called, arises as networks incorpo-
rate increasingly sophisticated services into their infrastruc-
ture. Such services use application-speciﬁc data found in
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’08, August 17–22, 2008, Seattle, Washington, USA.
Copyright 2008 ACM 978-1-60558-175-0/08/08 ...$5.00.
packet payloads, for example, to make routing decisions [17],
to block or rate-limit unwanted traﬃc [11,18], to perform in-
trusion detection, and to provide quality of service [25].
To keep up with line speeds, signatures must be combined
and matched simultaneously in a single pass over the input.
String-based signatures, initially popular, have a fast multi-
pattern matching algorithm [1, 35] but limited expressivity.
Currently, vulnerability [6, 36], session [32], and intrusion
detection [26, 28] signatures commonly use the full capabili-
ties of regular expressions, which are highly expressive and
compact. Regular expressions are typically implemented as
either deterministic ﬁnite automata (DFAs) or nondetermin-
istic ﬁnite automata (NFAs). Like strings, DFAs are fast and
can be readily combined. However, for many common sig-
natures their combination exhibits an explosion in the state
space. On the other hand, NFAs are very succinct but have
a slow matching procedure. Thus, DFAs and NFAs induce
a trade-oﬀ requiring either large matching times or large
memory usage, both of which are unsuitable for high-speed
network environments.
Auxiliary variables can be used to reduce the memory re-
quirements of an automaton. This approach, common to
software veriﬁcation [2] and model checking [8], associates
one or more variables with an automaton and uses them to
track matching state more compactly than explicit states
alone can. But, prior techniques for including these vari-
ables are ad-hoc, and typical models that incorporate them
are not designed for high speed packet inspection. For ex-
ample, using variables to inﬂuence transitions via guards
can be expensive at runtime, and their automata diﬃcult
to combine. Also, large signature sets need many variables
(one of our test sets uses almost 200) in order to reduce
the state space to a manageable size. Maintaining and ma-
nipulating all these variables can aﬀect performance signif-
icantly. Incorporating auxiliary state variables is a step in
the right direction, but to the best of our knowledge there is
no general model that allows for the systematic construction,
combination, and analysis that is suitable and necessary for
high-speed packet inspection.
The high-level goal of our work is to make deep packet
inspection practical at high speeds. We begin with a pre-
liminary ﬁrst-principles characterization of state-space ex-
plosion. We describe, formally, why it occurs and give ideal
conditions that eliminate it when satisﬁed. We then illus-
trate how auxiliary state variables can be used to “factor
out” the components of automata that violate these con-
ditions. When these conditions are met, automata can be
freely combined without any state explosion. We employ
a formal model, termed Extended Finite Automata (XFAs),
that extends the standard DFA model with (ﬁrst) a ﬁnite
set of auxiliary variables and (second) explicit instructions
attached to states for updating these variables. Variables
cannot aﬀect state transitions, but they can inﬂuence ac-
ceptance. The model is fully deterministic and yields com-
bination and matching algorithms that are straightforward
extensions to those for DFAs. This characterization of state
space explosion and the resulting model constitute the ﬁrst
main contribution of this work.
A primary advantage of this model is that it allows for sys-
tematic analysis and optimization. When many individual
XFAs are combined, the resulting automaton accumulates
all the individual variables and may replicate instructions
across many states. Even when no state-explosion occurs,
this leads to large per-ﬂow state and processing times. Tak-
ing inspiration from common principles used in optimizing
compilers, we devise optimization techniques for systemati-
cally reducing both the number of instructions and the num-
ber of variables. These techniques include exploiting run-
time information and support, coalescing independent vari-
ables, and performing code motion and instruction merging.
Altogether, these optimizations increase performance by up
to an order of magnitude and decrease per-ﬂow state by up
to a factor of six. These systematic optimizations are the
second main contribution of this work.
Our evaluation uses regular expression signature sets ob-
tained from the Snort [28] and Cisco intrusion prevention
systems. We also compare against two other recently pro-
posed techniques, Multiple DFAs (mDFAs) [37] and D2FAs
[20]. Compared to standard DFAs, XFAs yield state space
reductions in excess of four orders of magnitude in some
cases. When optimizations are employed, performance ap-
proaches that of DFA matching. In all cases, XFAs are both
smaller and faster than other evaluated techniques.
Finally, increasing line speeds put ever-increasing pressure
on designers to move data-plane functionality into hardware.
XFAs require no hardware support or assistance to operate,
but there are no restrictions precluding them from hardware
deployment either. As a third contribution, then, we present
a hardware architecture for eﬃcient execution of XFAs.
This paper is organized as follows: after the related work,
we discuss state-space explosion in Section 3 followed by a
description of our model in Section 4. Section 5 discusses
optimization and Section 6 gives experimental results.
In
Section 7 we present a possible hardware implementation
and Section 8 concludes.
2. RELATED WORK
String-based signatures were initially popular for packet
inspection and still ﬁnd some use today. Classic multi-
pattern algorithms such as Aho-Corasick [1] perform match-
ing in O(1) time yet grow linearly in the number of signa-
tures, thereby avoiding state explosion. Many alternatives
and enhancements have since been proposed [10, 22, 33–35]
for use in both software and hardware. In adversarial set-
tings, string-based signatures are not suﬃcient to withstand
attack techniques such as evasion [12, 27, 29] and mutation
[16], and modern systems have migrated towards signatures
that use the full power of regular expressions [6, 28, 32, 36].
Unfortunately, regular expressions often do not scale when
combined. DFAs often exhibit polynomial or exponential
growth in the state space, and NFAs are unacceptably slow.
Using DFAs (for their speed) as a starting point, many tech-
niques have recently been proposed to reduce their memory
footprint. Yu et al. [37] propose combining signatures into
a group of DFAs using greedy heuristics to determine which
signatures should be combined together so that a supplied
upper memory bound is not exceeded. The technique does
reduce the total memory footprint, but for complex signa-
ture sets the number of resulting DFAs can be large.
D2FAs [20, 21] reduce memory by compressing transitions
at the cost of longer matching times. This approach identi-
ﬁes states with similar transition tables, replacing them with
small tables containing only the transitions that are distinct
at each state. During matching, default transitions are fol-
lowed from state to state until a compressed table entry is
found that corresponds to the current input symbol. In [4],
Becchi and Crowley propose improvements that bound the
number of default transitions followed. These techniques are
orthogonal to ours; we can incorporate them into our own
work to achieve further memory reduction.
Becchi and Cadambi [3] propose state merging, which
moves partial state information from states themselves into
labeled transitions allowing states to be combined. The au-
thors report memory savings of up to one order of magni-
tude. Kumar et al. [19] present a set of heuristics that use
ﬂags and counters for remembering whether portions of sig-
natures have been seen. Like us, they use auxiliary variables
for reducing the state space, although there are some fun-
damental diﬀerences. First, their technique is heuristic and
seeks only to reduce blowup, whereas we begin with a for-
mal characterization of blowup and then show how auxiliary
variables can eliminate it. In addition, the interaction be-
tween states, variables, and transitions is not formalized; we
provide an extensible formal model.
The Bro NIDS [26] uses regular expressions for signatures
speciﬁed in the context of parsed protocol ﬁelds. One advan-
tage of this approach is that signatures are simpler, which in
principle leads to smaller automata. Nevertheless, Bro still
experiences state explosion and uses on-the-ﬂy determiniza-
tion [32] of regular expressions at some runtime cost.
In
contrast, the Snort NIDS [28] uses NFA matching guarded
by a string-based multi-pattern preﬁlter [1]. Matching is
fast in the common case since most payloads never pass the
preﬁlter. However, malicious traﬃc can be used to invoke
NFA matching and induce severe slowdowns [9, 30].
Clark and Schimmel [7] and Brodie et al. [5] have proposed
hardware-based techniques that use multibyte symbols for
transitions along with other optimizations. Our techniques
are more general and can be applied equally to hardware,
software, or FPGA environments.
Finally, we ﬁrst introduced the XFA paradigm in previ-
ous work [31]. That work gave an informal characteriza-
tion of state-space explosion and focused on algorithms for
constructing XFAs from regular expressions. Experimental
results were promising but preliminary. In contrast, as de-
scribed above, this work formalizes state-space explosion,
reﬁnes the XFA model, and focuses on optimizations neces-
sary for high-speed inspection.
3. UNDERSTANDING STATE EXPLOSION
In this section we formally characterize state space explo-
sion and give suﬃcient conditions for guaranteeing that such
explosion will not occur. We show how incorporating aux-
iliary state variables can be used to transform automata so
[^a]
P
a
Q
t
[^a]
R
+
V
a
W
[mv]
X
[^a]
a
t
QW
RV
PV
o
i
o
S
Y
m
d
T
Z
m
SV
TV
[mv]
PX
i
PY
d
PZ
[^a]
[^c]
P
a
Q
[^a]
[^a]
R
+
V
c
W
d
X
e
S
Y
b
f
T
Z
[^a]
P
a
Q
b
[^e]
[^c]
S
d
[^g]
c
R
+
V
e
W
f
X
g
Y
h
T
Z
[^ac]
b
SV
TV
[^ac]
RV
c
b
SW
c
b
QV
c
RW
d
SX
[^ac]
a
PV
c
a
PW
d
PX
e
f
PY
PZ
e
[^ae]
bQV
e
[^ag]
PV
a
a
e
PW
f
g
h
PX
a
QX
b
PY
PZ
[^ce]
dSV
TV
[^cg]
dSX
TX
RV
c
RW
e
f
g
h
RX
c
RY
RZ
(a) /atom/ and /a[mv]id/
(b) /a[^a][^a]b/ and /cdef/
(c) /ab.*cd/ and /ef.*gh/
Figure 1: Depending on the structure of the underlying automata, the combined automaton sizes may be
linear (left), polynomial (middle) or exponential (right) in the limit (some edges removed for clarity).
that they satisfy these conditions and eliminate such explo-
sion directly. This characterization provides the underlying
foundation that motivates our work.
3.1 State and Path Ambiguity
State-space explosion centers around the notion of ambi-
guity, which we deﬁne as follows. Let D = (Q, Σ, δ, q0, F ) be
a DFA with states Q, input symbols Σ, transition function δ,
start state q0, and accepting states F ⊆ Q. For state q ∈ Q
we deﬁne paths(q) to be the set of paths from q0 to q. In the
presence of cycles, paths(q) may be inﬁnite. Since D is deter-
ministic, we can uniquely represent each path π ∈ paths(q)
by the corresponding sequence of input symbols σ(π).
We say that state q is unambiguous if and only if the
following conditions hold:
• there exists a ﬁnite sequence xq ∈ Σ(cid:2) such that for each
path π ∈ paths(q), σ(π) = y · xq for y ∈ Σ(cid:2);
• for some π ∈ paths(q), σ(π) = xq (i.e., y = ).
In other words, q is unambiguous if and only if all paths to q
have the same suﬃx xq and at least one path to q is speciﬁed
solely by xq.
A DFA D is unambiguous if and only if all states in D are
unambiguous and the following conditions also hold:
• for each y ∈ Σ(cid:2), ∃f ∈ F such that y · xf ∈ paths(f );
• let m(q) be the path corresponding to xq for state q.
Then, for each q ∈ Q, q ∈ m(f ) for some f ∈ F .
For an unambiguous automaton D, the ﬁrst three condi-
tions ensure that all strings in the language accepted by D
are of the form . ∗ xf where f ∈ F . The fourth condition
ensures that there are no superﬂuous states that do not ad-
vance matching progress toward acceptance. Note that am-
biguity is diﬀerent from nondeterminism; i.e., an ambiguous
state may be reached by many distinct sequences, but the
succession of states is still deterministic in the input. Fi-
nally, we say that a path π ∈ paths(q) is ambiguous if there
is an ambiguous state in π.
3.2 Combination and State Explosion
State-space explosion results from the interaction between
states in ambiguous and unambiguous paths when automata
are combined. During combination, unambiguous states in
the preﬁx of a path from one automaton get replicated when
combined with ambiguous states in a path in another au-
tomaton. This phenomenon occurs because the combined
automaton must now track progress in matching both the
unambiguous path and, independently, the ambiguous path.
Of course, the amount of replication observed depends on
how extreme and pervasive the ambiguity is in the two source
automata and how much interaction occurs between them.
Automata with limited levels of ambiguity introduce com-
paratively small amounts of replication, whereas a path of
inﬁnite length can cause an entire automaton to be copied
and leads directly to exponential replication.
To illustrate, consider the examples in Figure 1. In this
ﬁgure and in most others, we show all states but for clarity
eliminate many transitions. In Figure 1a, automata for the
expressions /atom/ and /a[mv]id/ are combined. Only the
ﬁrst automaton is unambiguous, but the ambiguity in the
second automaton is limited to allowing only an m or a v in
the transition between the two states. When combined, the
unambiguous and ambiguous paths do not interact, and no
state replication occurs in this case. In general, though, the
replication is limited to a few states.
Figure 1b describes the case in which the regular expres-
sion /a[^a][^a]b/ (read as: “an a followed by two non-a
characters, followed by b”) is combined with the expression
/cdef/. In the ﬁrst automaton, paths to States R, S, and T
are all ambiguous (the path to T is ambiguous because no
path p = yx where x = b and y =  exists). In the com-
bined automaton shown in the ﬁgure, a full copy of both
original automata is required so that both expressions can
be matched. However, states in the preﬁx of the single
unambiguous path in /cdef/ must also be partially repli-
cated so that the combined automaton can properly track
[^r]
r
A
[^pr]
e
B
t
C
r
D
p
a
F
s
G
E
s
H
w
J