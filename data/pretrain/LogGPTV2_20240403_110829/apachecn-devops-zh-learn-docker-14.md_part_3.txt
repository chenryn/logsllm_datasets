$ docker container run -it microsoft/azure-cli:latest
```
容器运行后，我们需要登录我们的帐户:
```
bash-4.3# az login
```
您将收到以下消息:
```
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code  to authenticate.
```
按照说明通过浏览器登录。一旦您成功通过 Azure 帐户的认证，您就可以回到您的终端，并应该登录。
首先，我们创建一个名为`pets-rg`的新资源组:
Select the location that is closest to you. In my case, it is US East.
![](img/b259d2c3-08d1-46ee-82a5-dae5ee807315.png)
Creating a resource group in Azure
然后，我们使用 Docker Swarm 作为编排引擎，创建了一个新的 **Azure 容器服务**。这可能需要几分钟时间。结果如下:
![](img/0f7adfcc-fa2f-4c9d-8786-b4eef7b188f6.png)
Creating an Azure Container Service using Docker Swarm (shortened)
一旦我们的 Docker Swarm 在 Azure 中创建完成，我们就可以发出以下命令来检索我们需要连接到 Swarm 的公共 IP 列表:
![](img/f0e35547-52c6-483d-8657-a25ef09b7cf0.png)
第一个条目是 Docker 代理池的 IP 地址，第二个条目来自 Docker Swarm 主服务器。有了这些信息，我们可以使用主机的 IP 地址创建一个到主机的 SSH 隧道。我们需要直接从我们的笔记本电脑中完成，而不是在 Azure 命令行界面容器中，因为后者没有安装 Docker 命令行界面。为了做到这一点，我们还需要将证书中的私钥从 Azure CLI 容器复制到我们的主机上。打开一个新的终端窗口，列出所有正在运行的容器，找到 Azure CLI 容器的``，然后运行以下命令复制密钥:
```
$ docker cp :/root/.ssh/id_rsa ~/.ssh/fob
```
现在，在与上一个命令相同的终端中，使用以下命令创建隧道:
```
$ ssh -i ~/.ssh/fob -p 2200 -fNL 2375:localhost:2375 \
    azureuser@
```
用你的群主的 IP 地址替换``。
我们将使用这个隧道来远程管理 Azure 上的 Docker Swarm。但是要做到这一点，我们还需要定义`DOCKER_HOST`环境变量:
```
$ export DOCKER_HOST=:2375
```
是的，这不是一个错误。我们只定义了端口，没有主机名(由于 SSH 隧道)。一旦我们完成了所有这些，我们就可以远程管理我们的 Docker Swarm 了。让我们首先运行`docker info`命令:
![](img/22514631-a729-4093-8709-9cdf7e123556.png)
Docker info executed remotely on Docker Swarm in Azure (shortened)
我们看到我们有一个群，其中有三个工作节点准备接受工作负载。输出还告诉我们，Azure 正在使用传统的 Docker Swarm，而不是 SwarmKit。
让我们尝试在这个群体上部署我们的 pets 应用。在您的终端中，导航到`labs/ch14/azure`文件夹，按照文件`docker-compose.yml`中的描述部署应用:
![](img/49e23b66-9cfa-417a-a0bf-b21842730c30.png)
Running the pets application on Docker Swarm on Azure (shortened)
好了，现在让我们测试应用。为此，我们需要我们在本节前面检索的群代理池的公共 IP。在`/pet `打开你的浏览器，你会看到 pets 应用:
![](img/012284cc-e4ad-4754-b2dc-e34bd443a77c.png)
Pets application running on Docker Swarm in Azure
一旦我们在 Azure 上玩完 Docker Swarm，我们应该删除它，以免产生任何不必要的成本:
```
$ az group delete --name pets-rg --yes --no-wait
```
在本节中，我们已经展示了如何使用 Azure CLI 在 Azure 中配置 Docker Swarm。然后，我们成功地将我们的 pets 应用部署到该群中。
Azure 在容器工作负载方面有一些引人注目的产品，由于 Azure 主要提供开源编排引擎，如 Kubernetes、Docker Swarm、DC/OS 或 Rancher，因此锁定并不像在 AWS 上那样明显。从技术上讲，如果我们最初在 Azure 中运行我们的容器化应用，然后决定转移到另一个云提供商，我们仍然是移动的。成本应该是有限的。
# 对谷歌容器产品的简短浏览
谷歌是 Kubernetes 的发明者，迄今为止，也是其背后的驱动力。因此，人们会认为谷歌在托管 Kubernetes 方面有令人信服的产品。让我们来看一看。要继续，您需要在谷歌云上有一个现有的帐户，或者您可以在[https://console.cloud.google.com/freetrial](https://console.cloud.google.com/freetrial)这里创建一个测试帐户。继续执行以下步骤:
1.  在主菜单中，选择 Kubernetes 引擎。第一次这样做时，需要一些时间来初始化 Kubernetes 引擎。
2.  一旦准备好了，我们可以通过点击 CREATE CLUSTER 来创建一个集群。
3.  将集群命名为`pets-cluster`，并将“创建 Kubernetes 集群”表单中的所有其他设置保留为默认值，然后单击“创建”。
为我们调配群集也需要一些时间。一旦集群创建完成，我们就可以打开**云壳**。这应该类似于下面的截图:
![](img/77c063bd-f2c8-4399-958d-6b7f89d6dda1.png)
First Kubernetes cluster ready and Cloud Shell open in GCE
我们现在可以使用以下命令将我们的`labs` GitHub 存储库克隆到这个环境中:
```
$ git clone https://github.com/fundamentalsofdocker/labs
$ cd labs/ch14/gce
```
我们现在应该在当前文件夹中找到一个`pets.yaml`文件，我们可以用它来将 pets 应用部署到我们的 Kubernetes 集群中。看一下文件:
```
$ less pets.yaml
```
它的内容与我们在上一章中使用的文件几乎相同。这两个区别是:
*   我们使用类型为`LoadBalancer`(而不是`NodePort`)的服务来公开暴露组件`web`。
*   我们不为 PostgreSQL 数据库使用卷，因为在 GCE 上正确配置 StatefulSet 比在 Minikube 中要复杂一些。这样做的后果是，如果`db`吊舱崩溃，我们的宠物应用将不会保持该状态。如何在 GCE 上使用持久卷不在本书的讨论范围之内。
在继续之前，我们需要首先设置`gcloud`和`kubectl`凭证:
```
$ gcloud container clusters get-credentials pets-cluster \
 --zone us-central1-a
```
完成后，就该部署应用了:
```
$ kubectl create -f pets.yaml
```
一旦创建了对象，我们就可以观察`LoadBalancer`服务`web`，直到它被分配一个公共 IP 地址:
```
$ kubectl get svc/web --watch
```
这应该类似于下面的截图:
![](img/a4eedd82-437d-46dd-8473-27b86a2ab553.png)
Retrieving the public IP address of the service web
然后我们可以使用这个 IP 地址，导航到`http://:3000/pet`，我们应该会看到熟悉的猫形象。
要清理和删除所有资源，请运行以下脚本:
```
kubectl delete deploy/web
kubectl delete deploy/db
kubectl delete svc/web
kubectl delete svc/db
```
我们在 GCE 中创建了一个托管的 Kubernetes 集群。然后，我们使用通过 GCE 门户提供的 Cloud Shell 首先克隆我们的`labs` GitHub 存储库，然后使用`kubectl`工具将 pets 应用部署到 Kubernetes 集群中。
当研究托管的 Kubernetes 解决方案时，GCE 是一个引人注目的解决方案。这使得它非常容易启动，并且由于谷歌是 Kubernetes 背后的主要驱动力，我们可以放心，我们将始终能够利用 Kubernetes 的全部未绑定功能。
# 摘要
在本书的最后一章中，您学习了如何将容器化的应用部署到 AWS ECS 中，并快速了解了如何安装和使用 Docker 的 UCP，它是 AWS 上企业产品的一部分。然后，您可以一窥微软 Azure 和谷歌云引擎当前与容器相关的云产品是什么。在每一个上面，我们都成功地安装了我们的 pets 应用。
# 问题
要评估您的知识，请回答以下问题:
1.  给出在 AWS 上配置和运行 Docker UPC 所需任务的高级描述。
2.  列举几个理由，说明何时使用托管解决方案(如 Azure ACS 或 AWS ECS)以及何时使用(托管的)Docker Swarm 或基于 Kubernetes 的产品。
# 进一步阅读
以下文章为您提供了与我们在本章中讨论的主题相关的更多信息:
*   *在 https://dockr.ly/2vH5dpN 的 Linux 服务器*上部署 Docker 企业版
*   在[https://amzn.to/2Hh7pcM](https://amzn.to/2Hh7pcM)使用 Fargate 开始使用亚马逊 ECS
*   https://bit.ly/2JglX9d 蔚蓝容器服务公司
*   https://bit.ly/2I8MjJx 谷歌 Kubernetes 引擎**