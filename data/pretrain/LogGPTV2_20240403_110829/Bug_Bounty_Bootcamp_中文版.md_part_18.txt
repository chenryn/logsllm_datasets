[ ]{#c05.xhtml#Page_66 .pagebreak title="66"} This information is not
always available, as some organizations and individuals use a service
called *domain privacy* , in which a third-party service provider
replaces the user's information with that of a forwarding service.
有些组织和个人使用域名隐私服务，第三方服务提供商会替换用户信息以达到转发服务的目的，这些信息并未总是可用。
You could then conduct a *reverse WHOIS* search, searching a database by
using an organization name, a phone number, or an email address to find
domains registered with it. This way, you can find all the domains that
belong to the same owner. Reverse WHOIS is extremely useful for finding
obscure or internal domains not otherwise disclosed to the public. Use a
public reverse WHOIS tool like ViewDNS.info (
[https://viewdns.info/reversewhois/](https://viewdns.info/reversewhois/){.LinkURL}
) to conduct this search. WHOIS and reverse WHOIS will give you a good
set of top-level domains to work with.
您可以进行反向WHOIS搜索，通过使用组织名称、电话号码或电子邮件地址搜索数据库，找到注册在其名下的域名。这样，您可以找到属于同一所有者的所有域名。反向WHOIS非常有用，可用于查找未公开的模糊或内部域名。使用公共反向WHOIS工具，如ViewDNS.info（https://viewdns.info/reversewhois/）进行此搜索。WHOIS和反向WHOIS将为您提供一组好的顶级域名。
### IP Addresses {#c05.xhtml#h2-501546c05-0002}
Another way of discovering your target's top-level domains is to locate
IP addresses. Find the IP address of a domain you know by running the
`      nslookup     ` command. You can see here that *facebook.com* is
located at 157.240.2.35:
发现目标顶级域名的另一种方法是查找IP地址。运行nslookup命令来查找您已知的域名的IP地址。您可以在这里看到，Facebook.com位于157.240.2.35：
    $ nslookup facebook.com
    Server: 192.168.0.1
    Address: 192.168.0.1#53
    Non-authoritative answer:
    Name: facebook.com
    Address: 157.240.2.35
Once you've found the IP address of the known domain, perform a reverse
IP lookup. *Reverse IP* searches look for domains hosted on the same
server, given an IP or domain. You can also use ViewDNS.info for this.
一旦您找到已知域名的IP地址，就执行反向IP查找。反向IP搜索寻找在同一服务器上托管的域名，给定一个IP或者域名。您也可以使用ViewDNS.info来进行此操作。
Also run the `      whois     ` command on an IP address, and then see
if the target has a dedicated IP range by checking the
`      NetRange     ` field. An *IP range* is a block of IP addresses
that all belong to the same organization. If the organization has a
dedicated IP range, any IP you find in that range belongs to that
organization:
也要在IP地址上运行whois命令，查看NetRange字段以确定目标是否拥有专用IP范围。IP范围是属于同一组织的一组IP地址。如果该组织拥有专用IP范围，任何在该范围内的IP都属于该组织。
    $ whois 157.240.2.35
    NetRange:       157.240.0.0 - 157.240.255.255
    CIDR:           157.240.0.0/16
    NetName:        THEFA-3
    NetHandle:      NET-157-240-0-0-1
    Parent:         NET157 (NET-157-0-0-0-0)
    NetType:        Direct Assignment
    OriginAS:
    Organization:   Facebook, Inc. (THEFA-3)
    RegDate:        2015-05-14
    Updated:        2015-05-14
    Ref:            https://rdap.arin.net/registry/ip/157.240.0.0
    OrgName:        Facebook, Inc.
    OrgId:          THEFA-3
    Address:        1601 Willow Rd.
    City:           Menlo Park
    StateProv:      CA
    PostalCode:     94025
    Country:        US
    RegDate:        2004-08-11
    Updated:        2012-04-17
    Ref:            https://rdap.arin.net/registry/entity/THEFA-3
    OrgAbuseHandle: OPERA82-ARIN
    OrgAbuseName:   Operations
    OrgAbusePhone:  +1-650-543-4800
    OrgAbuseEmail:  PI:EMAIL
    OrgAbuseRef:    https://rdap.arin.net/registry/entity/OPERA82-ARIN
    OrgTechHandle: OPERA82-ARIN
    OrgTechName:   Operations
    OrgTechPhone:  +1-650-543-4800
    OrgTechEmail:  PI:EMAIL
    OrgTechRef:    https://rdap.arin.net/registry/entity/OPERA82-ARIN
Another way of finding IP addresses in scope is by looking at autonomous
systems, which are routable networks within the public internet.
*Autonomous system numbers (* *ASNs* *)* identify the owners of these
networks. By checking if two IP addresses share an ASN, you can
determine whether the IPs belong to the same owner.
另一种找到范围内 IP
地址的方法是查看自治系统，这些是公共互联网中可路由的网络。自治系统号码（ASN）标识这些网络的所有者。通过检查两个
IP 地址是否共享 ASN，您可以确定这些 IP 是否属于同一所有者。
To figure out if a company owns a dedicated IP range, run several
IP-to-ASN translations to see if the IP addresses map to a single ASN.
If many addresses within a range belong to the same ASN, the
organization might have a dedicated IP range. From the following output,
we can deduce that any IP within the 157.240.2.21 to 157.240.2.34 range
probably belongs to Facebook:
通过运行多个IP-to-ASN翻译，确定一家公司是否拥有专用IP范围。如果一个范围内的许多地址属于相同的ASN，则该组织可能拥有专用IP范围。从以下输出中，我们可以推断出在157.240.2.21到157.240.2.34范围内的任何IP可能属于Facebook：
    $ whois -h whois.cymru.com 157.240.2.20
    AS      | IP               | AS Name
    32934   | 157.240.2.20     | FACEBOOK, US
    $ whois -h whois.cymru.com 157.240.2.27
    AS      | IP               | AS Name
    32934   | 157.240.2.27     | FACEBOOK, US
    $ whois -h whois.cymru.com 157.240.2.35
    AS      | IP               | AS Name
    32934   | 157.240.2.35     | FACEBOOK, US
The `      -h     ` flag in the `      whois     ` command sets the
WHOIS server to retrieve information from, and *whois.cymru.com* is a
database that translates IPs to ASNs. If the company has a dedicated IP
range and doesn't mark those addresses as out of scope, you could plan
to attack every IP in that range.
whois命令中的-h标志设置要检索信息的WHOIS服务器，而whois.cymru.com是将IP地址翻译为ASN的数据库。如果公司拥有专用IP地址范围，并且没有将这些地址标记为超出范围，您可以计划攻击该范围内的每个IP地址。
### Certificate Parsing {#c05.xhtml#h2-501546c05-0003}
Another way of finding hosts is to take advantage of the Secure Sockets
Layer (SSL) certificates used to encrypt web traffic. An SSL
certificate's *Subject Alternative Name* field lets certificate owners
specify additional hostnames that use the same certificate, so you can
find those hostnames by parsing this field. Use online databases like
crt.sh, Censys, and Cert Spotter to find certificates for a domain.
通过利用用于加密 Web 流量的安全套接字层 (SSL)
证书来查找主机的另一种方法。 SSL
证书的主题备用名称字段允许证书所有者指定使用相同证书的其他主机名，因此您可以通过解析此字段找到这些主机名。
使用在线数据库，如 crt.sh、Censys 和 Cert Spotter，以查找域的证书。
[ ]{#c05.xhtml#Page_68 .pagebreak title="68"} For example, by running a
certificate search using crt.sh for *facebook.com* , we can find
Facebook's SSL certificate. You'll see that that many other domain names
belonging to Facebook are listed:
例如，通过使用 crt.sh 对 facebook.com 进行证书搜索，我们可以找到
Facebook 的SSL证书。你会发现许多其他属于 Facebook 的域名也被列出：
    X509v3 Subject Alternative Name:
     DNS:*.facebook.com
     DNS:*.facebook.net
     DNS:*.fbcdn.net
     DNS:*.fbsbx.com
     DNS:*.messenger.com
     DNS:facebook.com
     DNS:messenger.com
     DNS:*.m.facebook.com
     DNS:*.xx.fbcdn.net
     DNS:*.xy.fbcdn.net
     DNS:*.xz.fbcdn.net
The crt.sh website also has a useful utility that lets you retrieve the
information in JSON format, rather than HTML, for easier parsing. Just
add the URL parameter `      output=json     ` to the request URL:
*https://crt.sh/?q=facebook.com&output=json.*
crt.sh 网站还提供了一个有用的工具，让您以 JSON 格式检索信息，而不是
HTML，以便更容易地解析。只需在请求 URL 中添加 URL 参数
output=json：https://crt.sh/?q=facebook.com&output=json。
### Subdomain Enumeration {#c05.xhtml#h2-501546c05-0004}
After finding as many domains on the target as possible, locate as many
subdomains on those domains as you can. Each subdomain represents a new
angle for attacking the network. The best way to enumerate subdomains is
to use automation.
在尽可能发现目标的许多域名后，尽可能定位这些域名上的许多子域。每个子域代表攻击网络的新角度。枚举子域的最佳方法是使用自动化。
Tools like Sublist3r, SubBrute, Amass, and Gobuster can enumerate
subdomains automatically with a variety of wordlists and strategies. For
example, Sublist3r works by querying search engines and online subdomain
databases, while SubBrute is a brute-forcing tool that guesses possible
subdomains until it finds real ones. Amass uses a combination of DNS
zone transfers, certificate parsing, search engines, and subdomain
databases to find subdomains. You can build a tool that combines the
results of multiple tools to achieve the best results. We'll discuss how
to do this in [ "Writing Your Own Recon Scripts" on page 80 ]{.xref
itemid="xref_target_“Writing Your Own Recon Scripts” on page 80"} .
像 Sublist3r、SubBrute、Amass 和 Gobuster
这样的工具可以使用各种字典和策略自动枚举子域名。例如，Sublist3r
通过查询搜索引擎和在线子域名数据库工作，而 SubBrute
是一种暴力破解工具，可以猜测可能的子域名直到找到真实的域名。Amass 使用
DNS
区域转移、证书解析、搜索引擎和子域名数据库的组合来寻找子域名。您可以构建一个组合多个工具结果的工具，以获得最佳结果。我们将在第
80 页的"编写自己的侦查脚本"中讨论如何实现这一点。
To use many subdomain enumeration tools, you need to feed the program a
wordlist of terms likely to appear in subdomains. You can find some good
wordlists made by other hackers online. Daniel Miessler's SecLists at
[https://github.com/danielmiessler/SecLists/](https://github.com/danielmiessler/SecLists/){.LinkURL}
is a pretty extensive one. You can also use a wordlist generation tool
like Commonspeak2 (
[https://github.com/assetnote/commonspeak2](https://github.com/assetnote/commonspeak2){.LinkURL}
/) to generate wordlists based on the most current internet data.
Finally, you can combine several wordlists found online or that you
generated yourself for the most comprehensive results. Here's a simple
command to remove duplicate items from a set of two wordlists:
使用许多子域名枚举工具，需要为程序提供一个可能出现在子域名中的单词清单。你可以在网上找到其他黑客制作的一些很好的单词清单。Daniel
Miessler的SecLists (https://github.com/danielmiessler/SecLists/)
是一个非常全面的清单。你还可以使用一个词汇表生成工具，比如Commonspeak2
(https://github.com/assetnote/commonspeak2/)，基于最新的互联网数据生成词汇表。最后，你可以结合在线找到或自己生成的几个词汇表，以获得最全面的结果。这是一个简单的命令，用于从两个词汇表的集合中删除重复项：
    sort -u wordlist1.txt wordlist2.txt
[ ]{#c05.xhtml#Page_69 .pagebreak title="69"} The `      sort     `
command line tool sorts the lines of text files. When given multiple
files, it will sort all files and write the output to the terminal. The
`      -u     ` option tells `      sort     ` to return only unique
items in the sorted list.
sort命令行工具用于排序文本文件的行。当给出多个文件时，它会对所有文件进行排序并将输出写入终端。-u选项告诉sort仅返回排序列表中的唯一项。
Gobuster is a tool for brute-forcing to discover subdomains,
directories, and files on target web servers. Its DNS mode is used for
subdomain brute-forcing. In this mode, you can use the flag
`      -d     ` to specify the domain you want to brute-force and
`      -w     ` to specify the wordlist you want to use:
Gobuster是一种工具，用于暴力破解目标Web服务器上的子域，目录和文件。它的DNS模式用于子域暴力破解。在此模式下，您可以使用标志-d指定要暴力破解的域名，使用-w指定要使用的单词列表：
    gobuster dns -d target_domain -w wordlist 
Once you've found a good number of subdomains, you can discover more by
identifying patterns. For example, if you find two subdomains of
*example.com* named *1.example.com* and *3.example.com* , you can guess
that *2.example.com* is probably also a valid subdomain. A good tool for
automating this process is Altdns (
[https://github.com/infosec-au/altdns/](https://github.com/infosec-au/altdns/){.LinkURL}
), which discovers subdomains with names that are permutations of other
subdomain names.
一旦你找到了足够多的子域名，你可以通过识别模式来发现更多。例如，如果你发现example.com的两个子域名分别是1.example.com和3.example.com，那么你可以猜测2.example.com也可能是一个有效的子域名。一个自动化这个过程的好工具是Altdns（https://github.com/infosec-au/altdns/），它可以发现具有其他子域名名称排列组合的名称的子域名。
In addition, you can find more subdomains based on your knowledge about
the company's technology stack. For example, if you've already learned
that *example.com* uses Jenkins, you can check if *jenkins.example.com*
is a valid subdomain.
此外，你可以根据你对公司技术栈的了解找到更多的子域名。例如，如果你已经了解到example.com使用Jenkins，你可以检查jenkins.example.com是否是一个有效的子域名。
Also look for subdomains of subdomains. After you've found, say,
*dev.example.com* , you might find subdomains like *1.dev.example.com* .
You can find subdomains of subdomains by running enumeration tools
recursively: add the results of your first run to your Known Domains
list and run the tool again.
查找子域名的子域名。
当你找到一个比如dev.example.com后，你可能会发现子域名例如1.dev.example.com。
通过递归运行枚举工具，您可以找到子域名的子域名：将第一次运行的结果添加到已知域名列表中，再次运行该工具。
### Service Enumeration {#c05.xhtml#h2-501546c05-0005}
Next, enumerate the services hosted on the machines you've found. Since
services often run on default ports, a good way to find them is by
port-scanning the machine with either active or passive scanning.
接下来，列出您发现的机器上托管的服务。由于服务通常在默认端口上运行，因此使用主动或被动扫描扫描机器是找到它们的好方法。