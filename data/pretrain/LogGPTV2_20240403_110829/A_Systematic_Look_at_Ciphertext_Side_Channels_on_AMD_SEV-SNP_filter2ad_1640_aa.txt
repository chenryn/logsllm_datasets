title:A Systematic Look at Ciphertext Side Channels on AMD SEV-SNP
author:Mengyuan Li and
Luca Wilke and
Jan Wichelmann and
Thomas Eisenbarth and
Radu Teodorescu and
Yinqian Zhang
8
6
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
A Systematic Look at Ciphertext Side Channels
on AMD SEV-SNP
Mengyuan Li∗
The Ohio State University
PI:EMAIL
Luca Wilke∗
University of L¨ubeck
PI:EMAIL
Jan Wichelmann
University of L¨ubeck
PI:EMAIL
Thomas Eisenbarth
University of L¨ubeck
PI:EMAIL
Radu Teodorescu
The Ohio State University
PI:EMAIL
Yinqian Zhang
Southern University of Science and
Technology
PI:EMAIL
Abstract—Hardware-assisted memory encryption offers
strong conﬁdentiality guarantees for trusted execution environ-
ments like Intel SGX and AMD SEV. However, a recent study by
Li et al. presented at USENIX Security 2021 has demonstrated
the CipherLeaks attack, which monitors ciphertext changes in
the special VMSA page. By leaking register values saved by the
VM during context switches, they broke state-of-the-art constant-
time cryptographic implementations, including RSA and ECDSA
in the OpenSSL.
In this paper, we perform a comprehensive study on the cipher-
text side channels. Our work suggests that while the CipherLeaks
attack targets only the VMSA page, a generic ciphertext side-
channel attack may exploit the ciphertext leakage from any
memory pages, including those for kernel data structures, stacks
and heaps. As such, AMD’s existing countermeasures to the Ci-
pherLeaks attack, a ﬁrmware patch that introduces randomness
into the ciphertext of the VMSA page, is clearly insufﬁcient. The
root cause of the leakage in AMD SEV’s memory encryption—
the use of a stateless yet unauthenticated encryption mode and
the unrestricted read accesses to the ciphertext of the encrypted
memory—remains unﬁxed. Given the challenges faced by AMD
to eradicate the vulnerability from the hardware design, we
propose a set of software countermeasures to the ciphertext side
channels, including patches to the OS kernel and cryptographic
libraries. We are working closely with AMD to merge these
changes into affected open-source projects.
I. INTRODUCTION
For years, the main obstacle to cloud adoption has been a
lack of trust in Cloud Service Providers (CSP). The concept
of conﬁdential Virtual Machine (VM) has been enabled by an
emerging security feature in modern CPUs, dubbed Trusted
Execution Environment (TEE), which removes the need to
trust the CSP [15]. Aiming at providing data-in-use protection,
conﬁdential VM uses hardware-based memory encryption to
protect the integrity and the conﬁdentiality of VMs against
both physical access attacks and privileged software-level
attacks. Another key beneﬁt of conﬁdential VM is that any
VM can be deployed as conﬁdential VM on systems that
support them, without costly adaption and rewriting that is
necessary to turn applications into secure enclaves [12]. Due
to the enormous market potential, all main processor vendors
∗The two authors contributed equally to this paper.
have released or are working on releasing conﬁdential VM
features in their server CPU lines, including AMD Secure
Encrypted Virtualization (SEV) [22], Intel Trust Domain Ex-
tension (TDX) [19], and ARM Conﬁdential Compute Archi-
tecture (CCA) [8].
available
Currently, only AMD’s conﬁdential VM solution—AMD
SEV—is
and has been deployed in public
clouds [15], [28]. Since its ﬁrst deployment, SEV has been
exhaustively analyzed by the security community. Due to the
powerful adversarial scenario of a malicious hypervisor, sev-
eral weaknesses have been found, including unauthenticated
encryption [10], [14], [35], Nested Page Table (NPT) remap-
ping [17], [29], [30], unprotected I/O [25], and unauthorized
Address Space Identiﬁers (ASID) [24]. With the newest ver-
sion of SEV—the recently released SEV-SNP (Secure Nested
Paging [4])—most of the attacks are now mitigated.
The only software-based attack that still applied to SEV-
SNP is CIPHERLEAKS [26], a novel side-channel attack where
a malicious hypervisor can steal
the secret keys of RSA
and ECDSA algorithms in the OpenSSL implementation by
monitoring the guest VM Save Area (VMSA). Speciﬁcally,
SEV’s memory encryption engine adopts a deterministic XOR-
Encrypt-XOR (XEX) mode of operation. For each physical
address, the same 128-bit plaintext block is always encrypted
to the same ciphertext block during the life cycle of the
VM. Meanwhile, whenever there is a guest-host world switch,
register values are encrypted and then stored in the VMSA.
With the power of read access to the guest VM’s VMSA area,
the malicious hypervisor can continuously monitor and record
the ciphertext of encrypted registers. The authors show that
the ciphertext of certain registers (e.g., RAX) can be used to
inspect inner execution states of cryptographic algorithms and
eventually reveal the private key or secrets.
Due to its severity, AMD recently released a microcode
patch (MilanPI-SP3 1.0.0.5) [6] to mitigate the CIPHER-
LEAKS attacks. The microcode patch enables the 3rd gen-
eration AMD EPYC processors (Milan series) to include a
nonce into the encryption of the VMSA area, such that the link
between the plaintext and the ciphertext is broken. As such,
CIPHERLEAKS attacks against register values in the VMSA
© 2022, Mengyuan Li. Under license to IEEE.
DOI 10.1109/SP46214.2022.00112
337
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:55:46 UTC from IEEE Xplore.  Restrictions apply. 
are no longer feasible. Note that the patch only changes the
encryption of the VMSA, while the remaining memory space
of the VM is still protected with the same deterministic XEX
encryption as before.
In this paper, we perform a comprehensive study on the
exploitability of leakage caused by ciphertext in encrypted VM
memory and try to answer the question:
Are current cryptography implementations still safe
when an attacker has access to the ciphertext of the
encrypted memory?
We broadly group ciphertext side channel attacks into two
categories: the dictionary attack and the collision attack. We
show that
these two classes of attacks can be applied to
general memory regions during cryptographic activities, in-
cluding kernel data structures, stacks, and heaps, which all lead
to key leakage. Most main cryptography libraries (including
OpenSSL, WolfSSL, GnuTLS, OpenSSH, and libgcrypt) are
shown to be vulnerable against the ciphertext side channel.
Contribution. The contributions of this paper can be summa-
rized as follows:
• Systematically studies the ciphertext side channel in the
entire memory of SEV-protected VMs. It shows that the
ciphertext side channel can be exploited in all memory
regions, including kernel structures, stacks, and heaps.
• Presents end-to-end ciphertext side-channel attacks against
the ECDSA implementation of the OpenSSL library. Other
main cryptography libraries (including OpenSSL, WolfSSL,
GnuTLS, OpenSSH, and libgcrypt) are also shown to be
vulnerable to the ciphertext side channel.
• Discusses both hardware and software countermeasures.
Presents a kernel patch to mitigate ciphertext side channels
caused by kernel structures. The ciphertext side channel can
be mitigated when adopting the kernel patch together with
software ﬁxes for cryptographic libraries.
Responsible disclosure. We disclosed the generic ciphertext
side-channel attacks on kernel data structures, heaps, and
stacks to the AMD SEV team in August 2021. Henceforth,
we provided more supplementary materials via email commu-
nications. AMD has acknowledged the vulnerability and had
several discussions with us about potential countermeasures
and stated interest
level ﬁx. While hardware
countermeasures might not be feasible in the near future for
both performance and design concerns, AMD assisted us with
the development of the software countermeasures, including
both kernel patches (Section VI) and helping us get connected
to other projects like OpenSSL.
in a kernel
We also disclosed the vulnerability on the code level to the
communities of cryptography libraries (including OpenSSL,
WolfSSl, GnuTLS, OpenSSH and libgcrypt). At
the time
of writing, we had received feedback from both OpenSSL
and WolfSSL. They both acknowledged the concerns and
recognized the necessity of addressing this vulnerability from
software. WolfSSL has already provided a draft version of
software ﬁxes.
Paper outline. The rest of the paper is organized as fol-
lows: Section II introduces necessary background of this pa-
per; Section III illustrates the root causes of ciphertext side
channels in general; Section IV shows how an attacker can
break current cryptography implementations by monitoring
ciphertext changes in the operating system’s process control
block; Section V shows that the secret leakage can also be
caused by stack variables and heap buffers in user space;
Section VI discusses the potential countermeasures, including
a kernel patch and application ﬁxes; Section VII discusses the
threat of ciphertext side channels to other conﬁdential VM
implementations; Section VIII presents state-of-the-art related
work and Section IX concludes the paper.
II. BACKGROUND
A. Secure Encrypted Virtualization
AMD Secure Encrypted Virtualization (SEV) is a trusted
execution environment (TEE) supported by AMD server-
level EPYC processors with “Zen” Architecture. SEV aims at
providing conﬁdential virtual machines for cloud customers.
In SEV’s threat model, other virtual machines, as well as
the cloud host itself, are considered untrusted. The attacker
may execute arbitrary code at the privileged hypervisor level
and may also have physical access to the machine (e.g.,
DRAM chips) [22]. To achieve this ambitious goal, a dedicated
security subsystem consisting of the AMD Secure Processor
(AMD-SP) and an AES memory encryption engine is intro-
duced by SEV to protect data in use.
Hardware Memory Encryption. When SEV is enabled,
the cryptographic isolation provided by Hardware Memory
Encryption protects the conﬁdentiality of the VM. Speciﬁcally,