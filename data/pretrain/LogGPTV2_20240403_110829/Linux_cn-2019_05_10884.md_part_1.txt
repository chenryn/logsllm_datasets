---
author: Alison Chariken
category: 技术
comments_data:
- date: '2019-05-25 21:55:52'
  message: 奶吃 菇的脚脖
  postip: 171.8.221.2
  username: 来自河南郑州的 Firefox 67.0|GNU/Linux 用户
count:
  commentnum: 1
  favtimes: 4
  likes: 0
  sharetimes: 0
  viewnum: 20122
date: '2019-05-22 00:01:12'
editorchoice: true
excerpt: 虚拟文件系统是一种神奇的抽象，它使得 “一切皆文件” 哲学在 Linux 中成为了可能。
fromurl: https://opensource.com/article/19/3/virtual-filesystems-linux
id: 10884
islctt: true
largepic: /data/attachment/album/201905/22/000042mnqey57e7fpqam25.jpg
permalink: /article-10884-1.html
pic: /data/attachment/album/201905/22/000042mnqey57e7fpqam25.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 虚拟文件系统是一种神奇的抽象，它使得 “一切皆文件” 哲学在 Linux 中成为了可能。
tags:
- VFS
- 文件系统
thumb: false
title: 详解 Linux 中的虚拟文件系统
titlepic: true
translator: wxy
updated: '2019-05-22 00:01:12'
---
> 
> 虚拟文件系统是一种神奇的抽象，它使得 “一切皆文件” 哲学在 Linux 中成为了可能。
> 
> 
> 
![](/data/attachment/album/201905/22/000042mnqey57e7fpqam25.jpg)
什么是文件系统？根据早期的 Linux 贡献者和作家 [Robert Love](https://www.pearson.com/us/higher-education/program/Love-Linux-Kernel-Development-3rd-Edition/PGM202532.html) 所说，“文件系统是一个遵循特定结构的数据的分层存储。” 不过，这种描述也同样适用于 VFAT（ 虚拟文件分配表   Virtual File Allocation Table ）、Git 和[Cassandra](http://cassandra.apache.org/)（一种 [NoSQL 数据库](https://en.wikipedia.org/wiki/NoSQL)）。那么如何区别文件系统呢？
### 文件系统基础概念
Linux 内核要求文件系统必须是实体，它还必须在持久对象上实现 `open()`、`read()` 和 `write()` 方法，并且这些实体需要有与之关联的名字。从 [面向对象编程](http://lwn.net/Articles/444910/) 的角度来看，内核将通用文件系统视为一个抽象接口，这三大函数是“虚拟”的，没有默认定义。因此，内核的默认文件系统实现被称为虚拟文件系统（VFS）。
![](/data/attachment/album/201905/22/000121yromuxmaoj0ulocr.png "Console")
*如果我们能够 `open()`、`read()` 和 `write()`，它就是一个文件，如这个主控台会话所示。*
VFS 是著名的类 Unix 系统中 “一切皆文件” 概念的基础。让我们看一下它有多奇怪，上面的小小演示体现了字符设备 `/dev/console` 实际的工作。该图显示了一个在虚拟电传打字控制台（tty）上的交互式 Bash 会话。将一个字符串发送到虚拟控制台设备会使其显示在虚拟屏幕上。而 VFS 甚至还有其它更奇怪的属性。例如，它[可以在其中寻址](https://lwn.net/Articles/22355/)。
我们熟悉的文件系统如 ext4、NFS 和 /proc 都在名为 [file\_operations](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/linux/fs.h) 的 C 语言数据结构中提供了三大函数的定义。此外，个别的文件系统会以熟悉的面向对象的方式扩展和覆盖了 VFS 功能。正如 Robert Love 指出的那样，VFS 的抽象使 Linux 用户可以轻松地将文件复制到（或复制自）外部操作系统或抽象实体（如管道），而无需担心其内部数据格式。在用户空间这一侧，通过系统调用，进程可以使用文件系统方法之一 `read()` 从文件复制到内核的数据结构中，然后使用另一种文件系统的方法 `write()` 输出数据。
属于 VFS 基本类型的函数定义本身可以在内核源代码的 [fs/\*.c 文件](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs) 中找到，而 `fs/` 的子目录中包含了特定的文件系统。内核还包含了类似文件系统的实体，例如 cgroup、`/dev` 和 tmpfs，在引导过程的早期需要它们，因此定义在内核的 `init/` 子目录中。请注意，cgroup、`/dev` 和 tmpfs 不会调用 `file_operations` 的三大函数，而是直接读取和写入内存。
下图大致说明了用户空间如何访问通常挂载在 Linux 系统上的各种类型文件系统。像管道、dmesg 和 POSIX 时钟这样的结构在此图中未显示，它们也实现了 `struct file_operations`，而且其访问也要通过 VFS 层。
![How userspace accesses various types of filesystems](/data/attachment/album/201905/22/000131kd3ao1dpmds9vfzz.png "How userspace accesses various types of filesystems")
VFS 是个“垫片层”，位于系统调用和特定 `file_operations` 的实现（如 ext4 和 procfs）之间。然后，`file_operations` 函数可以与特定于设备的驱动程序或内存访问器进行通信。tmpfs、devtmpfs 和 cgroup 不使用 `file_operations` 而是直接访问内存。
VFS 的存在促进了代码重用，因为与文件系统相关的基本方法不需要由每种文件系统类型重新实现。代码重用是一种被广泛接受的软件工程最佳实践！唉，但是如果重用的代码[引入了严重的错误](https://lwn.net/Articles/774114/)，那么继承常用方法的所有实现都会受到影响。
### /tmp：一个小提示
找出系统中存在的 VFS 的简单方法是键入 `mount | grep -v sd | grep -v :/`，在大多数计算机上，它将列出所有未驻留在磁盘上，同时也不是 NFS 的已挂载文件系统。其中一个列出的 VFS 挂载肯定是 `/tmp`，对吧？
![Man with shocked expression](/data/attachment/album/201905/22/000133l29nckqi73q7e7c3.jpg "Man with shocked expression")
*谁都知道把 /tmp 放在物理存储设备上简直是疯了！图片：*
为什么把 `/tmp` 留在存储设备上是不可取的？因为 `/tmp` 中的文件是临时的（！），并且存储设备比内存慢，所以创建了 tmpfs 这种文件系统。此外，比起内存，物理设备频繁写入更容易磨损。最后，`/tmp` 中的文件可能包含敏感信息，因此在每次重新启动时让它们消失是一项功能。
不幸的是，默认情况下，某些 Linux 发行版的安装脚本仍会在存储设备上创建 /tmp。如果你的系统出现这种情况，请不要绝望。按照一直优秀的 [Arch Wiki](https://wiki.archlinux.org/index.php/Tmpfs) 上的简单说明来解决问题就行，记住分配给 tmpfs 的内存就不能用于其他目的了。换句话说，包含了大文件的庞大的 tmpfs 可能会让系统耗尽内存并崩溃。
另一个提示：编辑 `/etc/fstab` 文件时，请务必以换行符结束，否则系统将无法启动。（猜猜我怎么知道。）
### /proc 和 /sys
除了 `/tmp` 之外，大多数 Linux 用户最熟悉的 VFS 是 `/proc` 和 `/sys`。（`/dev` 依赖于共享内存，而没有 `file_operations` 结构）。为什么有两种呢？让我们来看看更多细节。
procfs 为用户空间提供了内核及其控制的进程的瞬时状态的快照。在 `/proc` 中，内核发布有关其提供的设施的信息，如中断、虚拟内存和调度程序。此外，`/proc/sys` 是存放可以通过 [sysctl 命令](http://man7.org/linux/man-pages/man8/sysctl.8.html)配置的设置的地方，可供用户空间访问。单个进程的状态和统计信息在 `/proc/` 目录中报告。
![Console](/data/attachment/album/201905/22/000137wrbqohssrsssczy7.png "Console")
*/proc/meminfo 是一个空文件，但仍包含有价值的信息。*
`/proc` 文件的行为说明了 VFS 可以与磁盘上的文件系统不同。一方面，`/proc/meminfo` 包含了可由命令 `free` 展现出来的信息。另一方面，它还是空的！怎么会这样？这种情况让人联想起康奈尔大学物理学家 N. David Mermin 在 1985 年写的一篇名为《[没有人看见月亮的情况吗？](http://www-f1.ijs.si/%7Eramsak/km1/mermin.moon.pdf)现实和量子理论》。事实是当进程从 `/proc` 请求数据时内核再收集有关内存的统计信息，而且当没有人查看它时，`/proc` 中的文件实际上没有任何内容。正如 [Mermin 所说](https://en.wikiquote.org/wiki/David_Mermin)，“这是一个基本的量子学说，一般来说，测量不会揭示被测属性的预先存在的价值。”（关于月球的问题的答案留作练习。）
![Full moon](/data/attachment/album/201905/22/000142apaxqz5tblyloxlb.jpg "Full moon")
*当没有进程访问它们时，/proc 中的文件为空。（[来源](https://commons.wikimedia.org/wiki/Moon#/media/File:Full_Moon_Luc_Viatour.jpg)）*