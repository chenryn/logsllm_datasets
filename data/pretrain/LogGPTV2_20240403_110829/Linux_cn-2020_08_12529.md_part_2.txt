Jonah Horowitz 是 Stripe 可靠性工程团队的一员。他提到，尽管开发人员和运维人员有意愿合作，但实际操作中却难以实现，因为他们往往被置于相互对立的团队中。

**00:04:30 - Jonah Horowitz**: 运维团队通常以系统正常运行时间和可靠性作为衡量标准。而提高这些指标的一种有效方法是减少系统的变更次数。然而，发布新功能本质上就是对系统的改动。因此，负责产品开发的软件工程师希望尽快推出尽可能多的新功能，这与运维团队的目标产生了冲突。

**00:05:00 - Saron Yitbarek**: 开发者专注于创造新的功能，而运维则致力于保持现有系统的稳定运行，两者目标看似矛盾。随着对快速迭代和频繁发布的更高需求，开发与运维之间的分歧达到了必须解决的地步。

**00:05:30 - Saron Yitbarek**: 大约在2009年左右，将开发和运维分开的做法开始显得不合时宜。我们需要一种新的方法论来促进两者的融合，让双方能够更高效地协作。Small Town Heroes 视频平台的首席技术官 Patrick Debois 发起了一个名为 DevOps Days 的会议，旨在打破这种隔阂。为了方便起见，这个概念后来被简称为 DevOps，从而正式命名了这场变革。

**00:06:00 - Saron Yitbarek**: 然而，仅仅给它命名并不意味着问题迎刃而解。我们知道为什么需要 DevOps，但具体该如何实施呢？如何使开发与运维更好地协同工作而不引发冲突？幸运的是，我找到了微软 .NET 和 ASP.NET 首席项目经理 Scott Hanselman 来为我们解答这些问题。
- Scott，我们相识已久，但我仍觉得相见恨晚。
- **Scott Hanselman**: 我也有同感。
- **Saron Yitbarek**: 想聊聊你是如何成为一名开发者以及这些年 DevOps 的演变过程吗？
- **Scott Hanselman**: 听起来挺有趣的。

**00:07:00 - Saron Yitbarek**: 那么首先，请问您是如何定义 DevOps 的呢？
- **Scott Hanselman**: 2008年维基百科上有一个关于 DevOps 很好的定义：这是一种实践集合，旨在确保质量的同时缩短从代码提交到生产部署的时间周期。想象一下，如果我在周二提交了一段代码，但它要等到六月份才能上线，那么这就不是持续集成，而是每年几次的集成。
- 如果你拥有健康的 DevOps 流程，就可以持续不断地将代码集成进生产环境中。关键在于建立最佳实践，这将决定你的成功与否。例如，在周二提交的代码可以在周四就完成上线。为了保证高质量，最重要的是谨慎且高效地进行部署。

**00:08:00 - Saron Yitbarek**: 这个定义很有趣，强调了“实践”的重要性。不过当人们谈论 DevOps 时，他们往往会将其视为一种职位或头衔。你觉得这种观点是否与将 DevOps 视为一套实践的原则相违背？
- **Scott Hanselman**: 当一个新的概念流行起来时，人们倾向于将其添加到自己的名片上。Brian Guthrie 在 SoundCloud 工作的一位聪明人最近在 Twitter 上发表了一篇帖子，明确指出 DevOps 不是一个职位、工具或者团队名称，而是一系列的最佳实践。没有良好的习惯，就没有真正的 DevOps。这更多是一种思维方式而非简单的职业称谓。

**00:11:00 - Saron Yitbarek**: 在 DevOps 出现之前，也就是大约十年前，开发者与运维人员之间的关系是怎样的？
- **Scott Hanselman**: 当时二者之间存在着很大的隔阂。运维掌控着生产环境，而开发者几乎无法接触到这一部分。我们仿佛站在一堵无形的墙两侧。开发环境与生产环境差异巨大，导致了许多问题。此外，从开发到上线的时间间隔过长，使得开发者很难记住几个月前编写的代码细节。运维人员似乎总是试图减缓开发速度，担心任何改变都可能破坏生产稳定性。

**00:11:30 - Saron Yitbarek**: 为什么会存在这样的冲突呢？是因为缺乏了解还是信任问题？
- **Scott Hanselman**: 你说得很对，信任确实是一个核心因素。开发者可能觉得自己比IT人员更加特殊，而后者则认为前者不尊重生产环境的重要性。高层领导也强化了这种区分，将两个部门视为不同的实体。随着软件行业的成熟，我们都逐渐意识到无论从事何种业务，最终目的都是通过软件推动其发展。因此，建立彼此间的信任变得至关重要。

**00:13:00 - Saron Yitbarek**: 你好，我是 Saron Yitbarek，欢迎收听由红帽公司出品的《代码英雄》播客节目。Richard Henshall 认为共情是 DevOps 成功的关键之一。
- **Richard Henshall**: 一些优秀的 DevOps 实践者曾经同时担任过这两种角色。我认为这才是真正强大的地方——当一个人亲身体验过两种职责后，便能更好地理解对方的需求。不应孤立看待任何一个角色，而应该鼓励跨领域的工作经历以培养相互理解和同情心。

**00:14:00 - Saron Yitbarek**: 此外，还有关于持续集成的观点。这意味着不仅编写和发布软件的速度加快了，测试也同样如此。开发人员需要即时获得反馈，了解他们的代码在真实世界中的表现情况。随着上市时间从数月缩短至几天甚至几小时，寻找自动化解决方案成为必然趋势。
- **Gordon Haff**（红帽公司高级工程师）: 新兴的 DevOps 生态系统提供了许多开源工具来支持这一转变。例如 Prometheus 用于监控，Kubernetes 用于容器编排等。GitHub 帮助跟踪更改，Jenkins 自动化构建和测试流程。所有这些工具共同作用下，使得直接推送更新到生产环境变得更加容易且可控。

**00:16:00 - Sandra Henry-Stocker**: 如今，仅需坐在一台计算机前就能管理整个网络中的变化。无需再手动访问每一台机器，只需一条命令即可完成部署。这种效率提升极大地简化了我们的日常工作流程。