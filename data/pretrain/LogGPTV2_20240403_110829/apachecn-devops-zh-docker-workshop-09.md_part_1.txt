# 九、Docker Swarm
概观
在本章中，您将从命令行使用 Docker Swarm 来管理正在运行的节点，部署服务，并在需要时对服务执行滚动更新。您将学习如何对您的 Swarm 节点进行故障排除，并使用您现有的 Docker Compose 文件部署整个栈，以及学习如何使用 Swarm 来管理您的服务配置和机密。本章的最后一部分将为您提供开始使用 Swarmpit 所需的知识，Swarm pit 是一个基于网络的界面，用于运行和管理 Docker Swarm 服务和集群。
# 简介
到目前为止，在本书中，我们已经运行了我们的 Docker 容器，并使用直接命令(如`docker run`来启动容器)来控制它们从命令行运行的方式。我们的下一步是使用 Docker Compose 实现自动化，它允许整个容器环境协同工作。Docker Swarm 是管理我们的 Docker 环境的下一步。 **Docker Swarm** 允许您编排您的容器如何扩展和协同工作，以向您的最终用户提供更可靠的服务。
Docker Swarm 允许您设置多个运行 Docker 引擎的服务器，并将它们组织为一个集群。Docker Swarm 然后可以运行命令来协调集群中的容器，而不仅仅是一个服务器。Swarm 将配置您的集群，以确保您的服务在集群中是平衡的，从而确保您的服务具有更高的可靠性。它还会根据集群中的负载为您决定将哪个服务分配给哪个服务器。Docker Swarm 在管理容器运行方式方面是一个进步，默认情况下由 Docker 提供。
Docker Swarm 允许您为服务配置冗余和故障转移，同时根据负载上下扩展容器的数量。您可以跨服务执行滚动更新，以减少中断的机会，这意味着您的容器应用的新版本可以应用到集群，而这些更改不会导致您的客户中断。它将允许您通过集群编排您的容器工作负载，而不是逐个手动管理容器。
Swarm 还引入了一些新的术语和概念来管理您的环境，定义如下:
*   **集群**:多个 Docker 主机以集群模式运行，充当管理人员和工作人员。作为 Docker Swarm 的一部分，拥有多个节点和工作人员并不是强制性的。您可以将服务作为单个节点群来运行，这就是我们在本章中的工作方式，即使生产集群可能有多个可用节点来确保您的服务尽可能容错。
*   **任务**:管理器分配任务在节点内部运行。任务由一个 Docker 容器和将在容器内运行的命令组成。
*   **服务**:这定义了要在经理或员工身上执行的任务。服务和独立容器的区别在于，您可以在不重新启动服务的情况下修改服务的配置。
*   **Node**: An individual system running Docker Engine and participating in the swarm is a node. More than one node can run on a single physical computer at one time through the use of virtualization.
    注意
    我们将只使用系统中的一个节点。
*   **管理器**:管理器将任务分派给工作节点。管理器执行编排和集群管理。它还承载集群上的服务。
*   **领导者节点**:群中的管理器节点选择单个主领导者节点来执行集群中的编排任务。
*   **工作节点**:工作节点执行管理节点分配的任务。
现在您已经熟悉了关键术语，让我们在下一节探讨 Docker Swarm 是如何工作的。
# Docker Swarm 是如何工作的？
群管理器节点处理集群管理，主要目标是保持群和其上运行的服务的一致状态。这包括确保集群始终运行，并在需要时运行和调度服务。
由于有多个管理器同时运行，这意味着有容错能力，尤其是在生产环境中。也就是说，如果一个管理器关闭，集群将仍然有另一个管理器来协调集群上的服务。工作节点的唯一目的是运行 Docker 容器。它们需要至少一个管理器才能运行，但是如果需要，工作节点可以升级为管理器。
服务允许您将应用映像部署到 Docker 群中。这些是要运行的容器和要在运行的容器中执行的命令。创建服务时会提供服务选项，您可以在其中指定应用可以发布的端口、CPU 和内存限制、滚动更新策略以及可以运行的映像副本数量。
为服务设置了所需的状态，经理的职责是监控服务。如果服务没有处于所需的状态，它将纠正任何问题。如果任务失败，编排者只需移除与失败任务相关的容器并替换它。
现在您已经知道了 Docker Swarm 是如何工作的，下一部分将让您开始使用基本命令，并指导您完成一个实践练习，以进一步演示它的操作。
# 与 DockerSwarm 体一起工作
本章的前一节已经向您展示了 Swarm 使用了与您在本书中已经学习到的相似的概念。您将看到 Swarm 的使用采用了您非常熟悉的 Docker 命令，并对它们进行了扩展，以允许您创建集群、管理服务和配置节点。Docker Swarm 为运行您的服务做了大量艰苦的工作，因为 Swarm 将确定您的服务最好放在哪里，负责调度您的容器，并决定最好放在哪个节点上。例如，如果一个节点上已经有三个服务在运行，而您的第二个节点上只有一个服务，Swarm 将知道它应该在您的系统中平均分配服务。
默认情况下，Docker swarm 处于禁用状态，因此要在 Swarm 模式下运行 Docker，您需要加入现有集群或创建新的 Swarm。要创建一个新的群并在您的系统中激活它，您可以使用这里显示的`swarm init`命令:
```
docker swarm init
```
这将在您当前工作的节点上创建一个新的单节点群集。您的系统将成为您刚刚创建的群的管理器节点。当您运行`init`命令时，您还将获得允许其他节点加入您的群所需的命令的详细信息。
对于加入群的节点，它需要一个机密令牌，并且工作节点的令牌不同于管理节点的令牌。管理器令牌需要受到强有力的保护，这样您就不会让集群变得脆弱。一旦获得了您的节点需要加入的群的令牌、IP 地址和端口，您就可以使用`--token`选项运行类似于这里所示的命令:
```
docker swarm join --token  :
```
如果出于某种原因您需要更改令牌(可能是出于安全原因)，您可以运行`join-token --rotate`选项来生成新令牌，如下所示:
```
docker swarm join-token --rotate
```
从群管理器节点，以下`node ls`命令将允许您查看群中可用的节点，并提供节点状态的详细信息，无论是管理器还是工作器，以及节点是否有任何问题:
```
docker node ls
```
一旦集群可用并准备好开始托管服务，您就可以使用`service create`命令创建一个服务，提供服务的名称、容器映像以及服务正确运行所需的命令，例如，如果您需要公开端口或装载卷:
```
docker service create --name   
```
然后可以对服务配置进行更改，或者您可以使用`update`命令更改服务的运行方式，如下所示:
```
docker service update  
```
最后，如果需要删除或停止服务运行，只需使用`service remove`命令:
```
docker service remove 
```
我们在这里提供了很多关于 Docker Swarm 的理论，我们希望它能让您清楚地了解它是如何工作的，以及您可以如何使用 Swarm 来启动您的服务，并在有高需求时进行扩展以提供稳定的服务。下面的练习将利用我们到目前为止所学的知识，并向您展示如何在您的项目中实现它。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 9.01:用 Docker Swarm 运行服务
本练习旨在帮助您熟悉如何使用 Docker Swarm 命令来管理您的服务和容器。在本练习中，您将激活一个集群，设置一个新服务，测试服务的扩展，然后使用 Docker Swarm 从集群中删除该服务:
1.  Although Swarm is included by default with your Docker installation, you still need to activate it on your system. Use the `docker swarm init` command to put your local system into Docker Swarm mode:
    ```
    docker swarm init
    ```
    您的输出可能与您在这里看到的略有不同，但是正如您所看到的，一旦创建了群，输出将提供如何使用`docker swarm join`命令向集群添加额外节点的详细信息:
    ```
    Swarm initialized: current node (j2qxrpf0a1yhvcax6n2ajux69) is 
    now a manager.
    To add a worker to this swarm, run the following command:
        docker swarm join --token SWMTKN-1-2w0fk5g2e18118zygvmvdxartd43n0ky6cmywy0ucxj8j7net1-5v1xvrt7
    1ag6ss7trl480e1k7 192.168.65.3:2377
    To add a manager to this swarm, run 'docker swarm join-token 
    manager' and follow the instructions.
    ```
2.  Now list the nodes you have in your cluster, using the `node ls` command:
    ```
    docker node ls
    ```
    您应该有一个当前正在处理的节点，它的状态应该是`Ready`:
    ```
    ID         HOSTNAME          STATUS    AVAILABILITY
      MANAGER STATUS
    j2qx.. *   docker-desktop    Ready     Active
      Leader 
    ```
    为了清楚起见，我们从输出中删除了`Engine Version`列。
3.  From your node, check the status of your swarm using the `docker info` command, providing further details of your Swarm cluster and how the node is interacting with it. It will also give you extra information if you need to troubleshoot issues later:
    ```
    docker info
    ```
    从输出中可以看到，您获得了 Docker Swarm 集群的所有具体细节，包括`NodeID`和`ClusterID`。如果您的系统没有正确设置 Swarm，您将看到的只是`Swarm: inactive`的输出:
    ```
    …
    Swarm: active
      NodeID: j2qxrpf0a1yhvcax6n2ajux69
      Is Manager: true
      ClusterID: pyejfsj9avjn595voauu9pqjv
      Managers: 1
      Nodes: 1
      Default Address Pool: 10.0.0.0/8  
      SubnetSize: 24
      Data Path Port: 4789
      Orchestration:
       Task History Retention Limit: 5
      Raft:
       Snapshot Interval: 10000
       Number of Old Snapshots to Retain: 0
       Heartbeat Tick: 1
       Election Tick: 10
      Dispatcher:
       Heartbeat Period: 5 seconds
      CA Configuration:
       Expiry Duration: 3 months
       Force Rotate: 0
    ```
4.  Start your first service on your newly created swarm. Create a service named `web` using the `docker service create` command and the `--replicas` option to set two instances of the container running:
    ```
    docker service create --replicas 2 -p 80:80 --name web nginx
    ```
    您将看到成功创建了两个实例:
    ```
    uws28u6yny7ltvutq38166alf
    overall progress: 2 out of 2 tasks 
    1/2: running   [==========================================>] 
    2/2: running   [==========================================>] 
    verify: Service converged
    ```
5.  Similar to the `docker ps` command, you can see a listing of the services running on your cluster with the `docker service ls` command. Execute the `docker service ls` command to view the details of the `web` service created in the *step 4*:
    ```
    docker service ls
    ```
    该命令将返回`web`服务的详细信息:
    ```
    ID              NAME  MODE          REPLICAS   IMAGE
      PORTS
    uws28u6yny7l    web   replicated    2/2        nginx:latest
      *:80->80/tcp
    ```
6.  To view the containers currently running on your swarm, use the `docker service ps` command with the name of your service, `web`:
    ```
    docker service ps web
    ```
    如您所见，您现在有了运行我们服务的容器列表:
    ```
    ID     NAME    IMAGE    NODE               DESIRED
      CURRENT STATE
    viyz   web.1   nginx    docker-desktop     Running
      Running about a minute ago
    mr4u   web.2   nginx    docker-desktop     Running
      Running about a minute ago
    ```
7.  The service will only run the default `Welcome to nginx!` page. Use the node IP address to view the page. In this instance, it will be your localhost IP, `0.0.0.0`:
    ![Figure 9.1: The nginx service from Docker Swarm ](img/B15021_09_01.jpg)
    图 9.1:Docker Swarm 的 nginx 服务
8.  Scaling the number of containers running your service is easy with Docker Swarm. Simply provide the `scale` option with the number of total containers you want to have running, and the swarm will do the work for you. Perform the command shown here to scale your running web containers to `3`:
    ```
    docker service scale web=3
    ```
    以下输出显示了`web`服务现在扩展到了`3`容器:
    ```
    web scaled to 3
    overall progress: 3 out of 3 tasks 
    1/3: running   [==========================================>]
    2/3: running   [==========================================>]
    3/3: running   [==========================================>]
    verify: Service converged
    ```
9.  As in *step 5* of this exercise, run the `service ls` command:
    ```
    docker service ls
    ```
    现在，您应该看到三个`web`服务在您的集群上运行:
    ```
    ID              NAME    MODE          REPLICAS   IMAGE
        PORTS
    uws28u6yny7l    web     replicated    3/3        nginx:latest
        *:80->80/tcp
    ```
10.  下面的更改更适合具有多个节点的集群，但是您仍然可以运行它来看看会发生什么。运行以下`node update`命令，将可用性设置为`drain`，并使用您的节点标识号或名称。这将删除此节点上运行的所有容器，因为它在您的群集上不再可用。您将获得节点标识作为输出:
    ```
    docker node update --availability drain j2qxrpf0a1yhvcax6n2ajux69
    ```
11.  If you were to run the `docker service ps web` command, you would see each of your `web` services shut down while trying to start up new `web` services. As you only have one node running, the services would be sitting in a pending state with `no suitable node` error. Run the `docker service ps web` command:
    ```
    docker service ps web
    ```
    输出已经减少到只显示第二、第三、第五和第六列，但是您可以看到服务无法启动。`CURRENT STATE`列同时具有`Pending`和`Shutdown`状态:
    ```
    NAME         IMAGE            CURRENT STATE
      ERROR
    web.1        nginx:latest     Pending 2 minutes ago
      "no suitable node (1 node…"
    \_ web.1     nginx:latest     Shutdown 2 minutes ago
    web.2        nginx:latest     Pending 2 minutes ago
      "no suitable node (1 node…"
    \_ web.2     nginx:latest     Shutdown 2 minutes ago