𝑗 ¯𝑒𝑗𝑑𝑗 where
𝑗 𝑒𝑗𝑑𝑗 where each 𝑒𝑗 ∈
Q ∩ [− 𝑞
2, 𝑞
2) is the distinguished representative of ¯𝑒𝑗.
218
4. check that ‖𝑒‖ ≤ 𝐵 (where recall that ‖𝑒‖ := ‖𝜎(𝑒)‖, the length of the canonical
embedding of 𝑒).
For a discrete instance one does the same, but with 𝐾 replaced by 𝑅∨ and Q replaced
by Z. In either case, properly generated Ring-LWE samples for our instantiations will
correctly verify (with high probability) because the original errors 𝑒 ∈ 𝐾 have coefﬁcients
of magnitude smaller than 𝑞/2 with respect to the decoding basis, hence they are correctly
recovered from 𝑏 − 𝑠 · 𝑎 = 𝑒 mod 𝑞𝑅∨. Moreover, we show below that they have Euclidean
norms below the error bound 𝐵 with high probability.
Implementation. Λ∘𝜆 (and hence the challenges themselves) actually uses the “tweaked”
form of Ring-LWE as described in subsection 2.2.7, in which 𝑅∨ is replaced by 𝑅 by
implicitly multiplying each 𝑏 component, and thereby the secret 𝑠 and each error term 𝑒,
by the “tweak” factor 𝑡 (where 𝑡𝑅∨ = 𝑅). Correspondingly, the basis 𝑡 · ⃗𝑑 is referred to as
the decoding basis of 𝑅. Therefore, we use an equivalent veriﬁcation procedure to the one
above, which simply replaces 𝑅∨, ⃗𝑑 with 𝑅, 𝑡 · ⃗𝑑, and the test ‖𝑒‖ ≤ 𝐵 with ‖𝑔 · 𝑒‖ ≤ ˆ𝑚𝐵,
where 𝑔 ∈ 𝑅 is the special element such that 𝑔 · 𝑡 = ˆ𝑚. (Recall that ˆ𝑚 = 𝑚/2 when 𝑚 is
even, and ˆ𝑚 = 𝑚 otherwise.)
The Λ∘ 𝜆 framework provides operations for efﬁciently “lifting” elements of 𝐾/𝑞𝑅
or 𝑅/𝑞𝑅 to 𝐾 or 𝑅 (respectively) using the decoding basis of 𝑅, and for computing
ˆ𝑚−1 · ‖𝑔 · 𝑒‖2 (see subsection 3.5.1). Thus our veriﬁer actually checks the equivalent
condition ˆ𝑚−1 · ‖𝑔 · 𝑒‖2 ≤ ˆ𝑚𝐵2. For convenience, we also include the bound ˆ𝑚𝐵2 with
the challenges, see [CP16a] for details.
Continuous error bound. For continuous Ring-LWE instantiations with spherical Gaus-
sian error 𝐷𝑟 over 𝐾, we use Lemma 2.1.1 and Corollary 2.1.2 to get rather sharp tail
bounds on the Euclidean norm of the error. In our actual challenge instances, the error
bound we use was typically within a factor of ≈ 1.10 of the largest error in each instance,
so it gives little room for misbehavior relative to the correct error distribution.
219
The bound is obtained as follows. For an appropriate small 𝜀 > 0 we compute the
√
minimal 𝑐 > 1/
2𝜋 (up to ≈ 10−4 precision) such that
𝜋𝑐2 − ln 𝑐 ≥ 1
𝑛
ln(1/𝜀) +
1
2
ln(2𝜋𝑒).
Then by Corollary 2.1.2, we have Pr𝑥∼𝐷𝑟[‖𝑥‖ > 𝐵]  1. (Note that the proof never
222
uses the fact that ℐ divides 𝑞𝑅.) For simplicity, in our Grande instantiations we always use
𝑡 = 2 and hence 𝑟 =√︀8/(𝜋𝑒) ≈ 0.968. For dimensions (say) 𝑛 > 256 one could take
Lemma 7.3.1. For any 𝑛 ≥ 17, 𝑡 > 1, and 𝑟 ≥ 𝑡√︀2/(𝜋𝑒) ≈ 0.484𝑡, the time/advantage
𝑡 = 2256/𝑛 to obtain an even smaller 𝑟.
ratio of the homomorphism attack (for any choice of the ideal ℐ) is at least 𝑡𝑛.
Proof. Let 𝑠 = N(ℐ)1/𝑛, and note that the running time of the attack is at least N(ℐ) = 𝑠𝑛,
so we may assume without loss of generality that 𝑠 ≤ 𝑡.
The dual ideal of ℐ𝑅∨ is (ℐ𝑅∨)−1 · 𝑅∨ = ℐ−1, which has norm N(ℐ)−1, so by
√
2𝜋𝑒·𝑥·exp(𝜋𝑥2)
Lemma 2.2.1 its minimum distance is 𝜆1(ℐ−1) ≥ √
𝑛/𝑠. Letting 𝑓 (𝑥) =
be as in Equation (2.1.1), deﬁne
𝑟𝜆1(ℐ−1)√
𝑛
≥ 𝑟
𝑠
≥ 𝑟
𝑡
𝑐 :=
≥√︀2/(𝜋𝑒) > 1/
√
2𝜋,
𝐶 := 𝑓 (𝑐) ≤ 2 exp(−2/𝑒)  1/
2𝜋,
𝑠/𝐶 = 𝑠/𝑓 (𝑐) ≥ 𝑠/𝑓 (𝑟/𝑠) =
√
2𝜋𝑒 · (𝑟/𝑠)2 · exp(−𝜋(𝑟/𝑠)2)
𝑟
.
A straightforward calculation shows that the denominator (as a function of 𝑠) has a global
√
maximum when 𝑟/𝑠 = 1/
𝜋, so as desired, 𝑠/𝐶 ≥ 𝑟√︀𝜋𝑒/2 ≥ 𝑡.
223
7.3.2 Modulus
For a given Gaussian error parameter 𝑟, we choose moduli 𝑞 to reﬂect a typical Ring-
LWE public-key encryption or key-exchange application following the basic template
from [LPR13b; Pei14]. Essentially, this means that 𝑞 must be large enough to accomodate the
ultimate error term, which is a combination of the original errors, without any “wraparound.”
A bit more precisely, we need that with sufﬁciently high probability, the ultimate error has
coefﬁcients (with respect to an appropriate choice of basis) in the interval (− 𝑞
4). The
precise meaning of “high probability” depends on the low-level details of the application.
4, 𝑞
For example, wraparound of a few coefﬁcients might be acceptable if error-correcting codes
are used, or a ﬁnal key-conﬁrmation step may handle the rare case when wraparound does
occur.
The Ring-LWE “toolkit” [LPR13a] provides general techniques and reasonably sharp
concentration bounds for analyzing the coefﬁcients of sums and products of (discretized)
error terms in arbitrary cyclotomics (see, e.g., [LPR13a, Lemma 6.6]). However, their
generality makes them a bit pessimistic, so they do not capture the strongest possible
concentration properties for concrete cases of interest.
In this work we take a combined empirical and theoretical approach to more tightly
bound the ultimate error in encryption/key-exchange applications, and thereby obtain smaller
values of the modulus and larger error rates. Our empirical approach is as follows:
1. We simulate thousands of ultimate error terms 𝐸 := ˆ𝑚(𝑒 · 𝑒′ + 𝑓 · 𝑓′) ∈ 𝑅∨, where
𝑒, 𝑒′, 𝑓, 𝑓′ ∈ 𝑅∨ are independent samples from 𝐷𝑟, discretized to 𝑅∨ using the
decoding basis.11
2. We compute the largest magnitude 𝐵 among all the coefﬁcients of all the 𝐸s (again
with respect to the decoding basis), and use 4𝐵 as a heuristic “very high probability”
bound on the coefﬁcients.
11Depending on the primes dividing the cyclotomic index 𝑚, replacing the ^𝑚 factor by 𝑡 in the expression
for 𝐸 can sometimes yield smaller coefﬁcients. We use the best of the two choices in our simulation.
224
3. Using 4𝐵 as a lower bound on 𝑞/4, we choose moduli 𝑞 of different arithmetic forms
(e.g., completely split, power of two, ramiﬁed) that all conform to this bound.
The theoretical (though heuristic) basis for this approach is as follows: in the canonical
embedding, the coordinates of 𝐷𝑟 are i.i.d. Gaussians over C (up to conjugate symmetry),
and the same nearly holds for the discretization to 𝑅∨ when 𝐷𝑟 is “well-spread” relative
to 𝑅∨ (as it is in our instantiations). Because multiplication is coordinate-wise in the
canonical embedding, the products 𝑒 · 𝑒′, 𝑓 · 𝑓′ have nearly i.i.d. subexponential coordinates.
(The multiplication by ˆ𝑚 simply scales them all by the same factor.) Finally, each coefﬁcient
of 𝐸 with respect to the decoding basis is by deﬁnition the inner product of 𝜎(𝐸) with
a vector consisting of various roots of unity. Bernstein’s inequality says that such inner
products have subgaussian exp(−Θ(𝑘2)) tail probabilities in the “near zone,” which in our
√
setting goes all the way out to 𝑘 = 𝑂(
𝑛) standard deviations. In the “far zone” beyond
that, the tails are still subexponential exp(−Θ(𝑘)).
Because the near zone is so wide, the largest coefﬁcient among the tens or hundreds of
thousands in our simulation should be not much smaller than a true high-probability bound.