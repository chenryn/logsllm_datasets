Proof. Consider a coalition S comprising t servers. Fix i ∈
[1. .r] and Π ∈ {Π1, . . . , Πn} with Π ∈ Fp×r , and let I, J, and
QS respectively denote the random variables describing the index
(within D) of the block the user requests, the index of the standard
basis vector the user actually encodes in its query, and the joint
distribution of share vectors it sends to servers in S (including the
“hint” that the query should go through the index Π).
As per Definition 3.6, we need to show that Pr[I = i | QS =
(Π; ⃗Qj1 , . . . , ⃗Qjt
)] = Pr[I = i | EΠ
denotes the event
that the user’s request is through Π. The key observation underlying
the proof is that Pr[I = i | EΠ
] and Pr[I = i |
)] = Pr[⃗eJ · Π = ⃗ei | QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
)].
QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
(cid:3)
(cid:2)
(cid:14)
Hence, we have
)(cid:3)
(cid:2)
(cid:14)
⃗eJ · Π = ⃗ei | EΠ
= Pr
(cid:2)
(cid:14)
⃗eJ · Π = ⃗ei
= Pr
QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
= Pr
I = i
(cid:3)
)(cid:3)
QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
] = Pr[⃗eJ · Π = ⃗ei | EΠ
], where EΠ
as desired. Note that the second line of the above derivation follows
immediately from the t-privacy of (x1, ⃗Q1), . . . ,(xℓ, ⃗Qℓ).
□
4 BATCH INDEXES OF QUERIES
In the preceding section, we discussed how requests through a
simple index of queries can leak meta-information about which
blocks the user seeks. We now turn our attention to our first non-
trivial indexes of queries, called batch indexes of queries, which
improve on simple indexes of queries by leveraging ideas from
coding theory to decrease this information leakage.
I = i
Suppose we wish to leverage simple indexes of queries for an
application in which the servers will hold multiple indexes of que-
ries intended to facilitate different kinds of requests, yet in which
all requests always will go through one of these indexes of queries.
In this case, knowing only that a given request passed through
some index of queries yields no information for an attacker: for
information about a request to leak, the attacker would have to
learn through which index of queries that request passed. Thus, con-
cealing through which index of queries each request passes would
effectively eliminate this source of information leakage while main-
taining the utility that indexes of queries provide.
(cid:2)
EΠ
Pr
,
For example, suppose that a server believes a priori that a given
request will pass through the index Π1 with probability p and that it
will pass through the index Π2 with probability 1−p, so that
· (1 − p).
· p + Pr
= Pr
I = i
I = i
I = i
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:2)
(cid:14)
(cid:3)
EΠ1
Pr
(cid:14)
EΠ2
(cid:2)
(cid:14)
(cid:3)
(cid:2)
(cid:3)
I = i
I = i
= Pr
In this case, if the server receives the hint “1”, then it can immedi-
ately update its priors to conclude that Pr
;
EΠ1
thus, the hint “1” in this example is leaking information about which
block the client is fetching. On the other hand, if the client were
somehow able to route its request through Π1 without revealing
through which of Π1 or Π2 its request is passing, then the server
would be unable to update its priors and the request would leak no
new information.
Even in cases where, say, some queries through an index and
others are positional, and hence bypass the indexes of queries al-
together, hiding through which index a given non-positional re-
quest passes would still serve to reduce the quantity of information
that leaks. Batch indexes of queries provide one such way to hide
through which out of several simple indexes of queries a given
request passes.
The batch-indexes-of-queries construction we present here is
specific to Goldberg’s IT-PIR, leveraging the so-called “u-ary family
of codes” [16, §3]. One could of course consider analogous instan-
tiations for other PIR protocols or based on other codes; however,
we leave exploration of this idea to future work. Before proceeding,
we briefly review u-ary codes and how they are used to construct
efficient IT-PIR protocols.
4.1 IT-PIR from u-ary codes
Recall that, in the vector-matrix model for PIR (as expounded in
Section 2), each server typically holds a complete, plaintext replica
of the database D. Several recent IT-PIR constructions [2, 6, 12, 16]
have instead considered a generalization of the vector-matrix model
wherein each server holds an encoded bucket that is merely de-
rived from—and typically much smaller than—the actual database
D. The benefits of this bucketized vector-matrix approach echo
the benefits of explicit leakage described in the previous section:
smaller buckets directly translate into lower upstream communi-
cation, lower per-server computation costs, and lower per-server
storage costs.
One recently proposed construction in the bucketized vector-
matrix model modifies Goldberg’s IT-PIR protocol to utilize what is
called the u -ary family of codes [16, §3 and §5]. In this scheme, each
bucket is a matrix of (0-private) “shares” obtained using a “rampi-
fied” variant of Shamir’s (1, ℓ)-threshold scheme: given u ∈ N,
the u-ary code encodes D ∈ Fr ×s by (i) partitioning the r blocks
comprising D into r /u many u-tuples,5 (ii) interpolating compo-
nent-wise through each u-tuple at some predefined x-coordinates
to obtain r /u many length-s vectors of degree-(u − 1) polynomials
from F[x], and then (iii) placing a single component-wise evalua-
tion of each vector of polynomials into each of the ℓ > u buckets.
Thus, the bucket held by each of the ℓ servers resides in F(r /u)×s
and, in particular, is a factor u smaller than D.
Despite no server actually holding D, users can still fetch blocks
of D using slightly modified t-private positional queries over the
buckets. Specifically, a user desiring the i th block from D sim-
ply needs to determine (i) which of the r /u bucket rows holds
evaluations of the polynomial vector passing through the desired
5For ease of exposition, here and throughout we make the simplifying assumption that
u | r . Eliminating this assumption is trivial, but doing so would only serve to introduce
unnecessary clutter and exceptional cases to our notation and the descriptions of our
constructions.
6
block, and (ii) at which x-coordinate that polynomial vector passes
through the desired block. It then constructs a length-(r /u) vector
of (t + 1, ℓ)-threshold shares encoding a positional query for the
above bucket row at the above x-coordinate (in contrast to always
encoding the positional query at x = 0, as it would typically do
in Goldberg’s protocol). The rest of the protocol is exactly as in
the standard vector-matrix model, except that, in the secret recon-
struction step, the user interpolates the servers’ responses to the
same x-coordinate it used to encode its request. The result is a
t-private v-Byzantine-robust (m, ℓ)-server IT-PIR protocol for any
m ≥ t + u [16, Theorem 1] and v ≤ m − t − u − 1 [16, Theorem 2].
In particular, note that the number of servers, the privacy threshold,
and the downstream communication cost are each identical to in
Goldberg’s protocol, whereas the upstream communication cost,
the storage cost, and the server-side computation cost are all a fac-
tor u lower. (The tradeoff for the latter improvements is a reduction
by u in the protocol’s robustness to non-responding and Byzantine
servers.) For additional details and proofs, we refer the reader to
the original paper [16].
There are at least two ways to improve on our simple indexes
of queries using u-ary codes. The most obvious way is to encode
a simple index of queries into u-ary buckets, thereby reducing
the upstream communication, and possibly the computation cost,
associated with queries through that index. This slightly improves
efficiency (though, as we will see in Section 7, indexes of queries
are already plenty fast), but it does nothing to address information
leakage. The remainder of this section deals with a more interesting
approach that combines multiple disparate indexes of queries into a
single batch index, thereby reducing information leakage by letting
each user query D through the index of its choice without revealing
which particular index of queries it uses. The idea is to merge all
the indexes of queries into a single matrix of polynomials using
component-wise polynomial interpolation (á la the above u-ary
codes), so that each server holds only a single bucket obtained
via component-wise evaluation of the resulting polynomial matrix.
Users can then formulate requests through any of the constituent
indexes of queries using appropriately crafted queries over the
buckets, all the while concealing through which of the underlying
simple indexes of queries their requests pass. Before formalizing
this idea in Section 4.3, we walk through the process of merging the
simple indexes of queries Πsender and Πsize from Section 3.1.
4.2 Batching two indexes of queries
Recall that Πsender and Πsize are the permutation matrices that respec-
tively map a request encoding the ith standard basis vector of F5 to
a positional query for the ith email in a lexicographic ordering of
the email inbox D depicted in Figure 1 by sender or a numerical
(decreasing) ordering of D by size. They are defined as
0 0 1 0 0
0 1 0 0 0
1 0 0 0 0
0 0 0 0 1
0 0 0 1 0
 and Πsize (cid:66)
0 0 1 0 0
1 0 0 0 0
0 0 0 1 0
0 1 0 0 0
0 0 0 0 1
 .
Πsender (cid:66)
The merging process is simple. We first fix some x-coordinates,
say x = 0 and x = 1, which serve as identifiers for Πsender and Πsize.
Then, for each entry in Πsender, we interpolate through that entry (at
7
x = 0) and the corresponding entry of Πsize (at x = 1) to obtain a
linear polynomial in F[x]. As both Πsender and Πsize are (0,1)-matrices,
only four polynomials can arise in this step (corresponding to the
pairs (0,0), (0,1), (1,0) and (1,1)); i.e., every interpolation yields one
of f00(x) = 0, f01(x) = x, f10(x) = 1− x, or f11(x) = 1.
Carrying out this process for Πsender and Πsize yields
0
1−x
x
0
0
0
x
0
1−x
0
1
0
0
0
0
Πsender,size(x) (cid:66)
 ∈
0
0
1−x
0
x
0
0
0
x
1−x
(cid:0)
F[x](cid:1)5×5
.
(cid:10)
(0)
j
(0)
ℓ
(0)
1 ), . . . ,(xℓ, ⃗Q
One can verify that evaluating Πsender,size(x) component-wise at
x = 0 and x = 1 recovers Πsender and Πsize, respectively; indeed, com-
(cid:11)
puting the vector-matrix product of Πsender,size(x) with ⃗ei ∈ F5 and then
evaluating the result at x = 0 and x = 1 yields the i th rows from Πsize
and Πsender, respectively. For example, ⃗e3 · Πsender,size(x) =
x 0 0 1−x 0
,
which evaluates to ⃗e3 ∈ F5 and ⃗e1 ∈ F5 at x = 0 and x = 1.
Let x1, . . . , xℓ ∈ F \ {0,1} be arbitrary, pairwise distinct scalars.
The bucket held by each server j will be obtained via component-
wise evaluation of Πsender,size(x) at x = xj. Thus, to fetch the ith email
in a lexicographic ordering of D by sender, the user will “en-
code at x = 0” the standard basis vector ⃗ei ∈ F5 into ℓ vectors,
(x1, ⃗Q
), of (t + 1, ℓ)-threshold shares; specifically,
it will select a length-5 vector of degree-t polynomials from F[x]
uniformly at random, subject only to the requirement that this vec-
tor passes component-wise through ⃗ei at x = 0, and then it will send
to each server j the component-wise evaluation ⃗Q
of this vector
at x = xj. Likewise, to fetch the i th email in a numerical (decreas-
ing) ordering of D by size, the user will “encode at x = 1” the same
(1)
(1)
1 ), . . . ,(xℓ, ⃗Q
standard basis vector ⃗ei ∈ F5 into ℓ vectors (x1, ⃗Q
)
of (t + 1, ℓ)-threshold shares.
ℓ
Notice that the only difference between how the user constructs
the above two requests is the x-coordinate at which it encodes
the standard basis vector ⃗ei; thus, the x-coordinate here serves the
same purpose that the hint, “sender” or “size”, served back in
Section 3.1, allowing the user to specify through which of the
two indexes of queries its request is intended to pass. However, in
contrast to with the hints that the user explicitly revealed in Sec-
tion 3.1, from the perspective of any coalition of up to t servers,
requests encoded at x = 0 are perfectly indistinguishable from
those encoded at x = 1; that is, it is impossible for such a coalition
to infer (based on the shares its members receive) through which
of the two indexes of queries a given request passes [17].
Before we move on, a few brief remarks about this simple exam-
ple are in order. First, we note that the resulting buckets are still