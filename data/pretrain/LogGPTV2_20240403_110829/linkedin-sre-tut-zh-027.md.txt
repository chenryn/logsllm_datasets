# 总结
> 原文：
## 扩展应用
设计和开发只是旅程的一部分。我们迟早需要建立持续集成和持续交付管道。我们必须在某个地方部署这个应用。
最初，我们可以在任何云提供商的一台虚拟机上部署这款应用。但这是一个`Single point of failure`我们作为一个 SRE 人(甚至作为一个工程师)绝不允许的事情。因此，这方面的改进可以是在负载平衡器后面部署多个应用实例。这当然可以防止一台机器停机的问题。
这里的扩展意味着在负载均衡器后面添加更多的实例。但是这只能扩展到某一点。之后，系统中的其他瓶颈将开始出现。ie: DB 会成为瓶颈，或者可能是负载均衡器本身。你怎么知道瓶颈是什么？您需要能够观察到应用架构的每个方面。
只有在你有了度量标准之后，你才能知道哪里出了问题。**可以测量的，就可以固定！**
从 SRE 学院的[可扩展性模块](../../systems_design/scalability/)中获得关于可扩展性的更深入的见解，并在浏览该模块后，将您的学习和收获应用到该应用中。想想我们将如何使这个应用在地理上分布，高度可用和可扩展。
## 监控策略
一旦我们部署了应用。它会正常工作的。但不会永远。可靠性是我们工作的主题，我们通过以某种方式进行设计来使系统可靠。但是事情还是会有转机。机器会失灵。磁盘的行为会很奇怪。有问题的代码将被推向生产。所有这些可能的情况都会降低系统的可靠性。那我们该怎么办？**我们班长！**
我们密切关注系统的健康状况，如果有任何事情不按预期进行，我们希望自己得到提醒。
现在让我们考虑一下给定的 url 缩短应用。我们需要监控它。我们希望在出现问题时得到通知。但是我们首先需要决定什么是我们想要关注的东西。
1.  因为它是一个服务于 HTTP 请求的 web 应用，所以我们希望关注 HTTP 状态代码和延迟
2.  请求量也是一个很好的候选，如果应用接收到不寻常的流量，可能是出了什么问题。
3.  我们还希望密切关注数据库，这取决于所选择的数据库解决方案。查询时间、容量、磁盘使用情况等。
4.  最后，还需要一些外部监控，从数据中心之外的设备运行定期测试。这模拟了客户，并确保从客户的角度来看，系统按预期工作。
## SRE 角色中的应用
在 SRE 的世界里，python 是一种广泛使用的语言。用于为各种目的开发的小脚本和工具。由于 SRE 开发的工具可以处理基础设施的关键部分，并且具有强大的功能(使事情变得简单)，所以在使用编程语言及其特性时，知道自己在做什么是很重要的。在调试问题时，了解语言及其特征也同样重要。作为一名对 python 语言有着更深理解的 SRE，它对我调试非常隐蔽的 bug 有很大帮助，并且在做出某些设计决策时通常更加了解和见多识广。
虽然开发工具可能是也可能不是 SRE 工作的一部分，但支持工具或服务更可能是日常职责。构建应用或工具只是生产化的一小部分。虽然应用本身的设计肯定会使其更加健壮，但作为一名 SRE，一旦部署并运行，您就要对其可靠性和稳定性负责。为了确保这一点，您需要首先了解应用，然后想出一个策略来适当地监控它，并为各种故障场景做好准备。
## 可选练习
1.  制作一个装饰器，根据输入参数缓存函数返回值。
2.  在任何云提供商上托管 URL 缩短应用。
3.  使用许多可用的工具，如 catchpoint、datadog 等，设置监控。
4.  在 TCP 套接字上创建一个最小的类似烧瓶的框架。
## 总结
在第一部分，本模块旨在让您更加了解当您选择 python 作为编程语言时会发生什么，以及当您运行 python 程序时会发生什么。有了 python 如何在内部处理对象的知识，python 中许多看似神奇的东西将开始变得更有意义。
第二部分将首先解释像 flask 这样的框架如何使用 TCP 和 HTTP 这样的协议的现有知识来工作。然后，它触及应用开发生命周期的整个生命周期，包括它的 SRE 部分。虽然考虑的设计和建筑领域不会详尽无遗，但它将很好地概述作为 SRE 也很重要的事情以及它们为什么重要。