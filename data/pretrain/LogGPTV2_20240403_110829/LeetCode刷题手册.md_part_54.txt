## Page 544
代码
解题思路
注意：
出存在于数组中的字符串的最大数量。每个0 和1至多被使用一次。
在计算机界中，我们总是追求用有限的资源获取最大的收益。现在，假设你分别支配着 m 个0和 n 个
题目大意
 Example 2:
1。另外，还有一个仅包含 0和 1字符串的数组。你的任务是使用给定的 m 个 0 和n 个 1，找到能拼
1．给定0 和1 的数量都不会超过100。
func findMaxForm(strs []string, m int, n int) int {
package leetcode
form "o" and "1".
Explanation: You could form "10", but then you'd have nothing left. Better
Output: 2
I =u‘ = w‘{.‘.O.‘"OT.} = Keu :anduI
3 1s, which are “10,"0001","1","0"
pe so s to uin aa a pay aq us shuas t iao a sui :uoaudx3
Output: 4 
Input: Array = {"10", "0001", "111001", "1", "0"}, m = 5, n = 3 
import "strings"
[n] 中存储的就是最终的答案。时间复杂度O（ n＊ M＊ N ）。
小，保存两者的最大值。每添加一个物品就刷新这个二维背包，直到所有物品都扫完一遍。dp[m]
max(dp[i] [j]， 1+dp[i-zero] [j-one]]。其中 zero 代表的当前装入物品在 m 维上的体积,
这一题是典型的 01 背包的题型。只不过是一个二维的背包问题。在n 个物品中选出一定物品，尽
字符串，使得这些取出的字符串中所有的0的个数≤m，1的个数≤n。
给定一个字符串数组和 m，
给定字符串数组的长度不会超过600。
比较当前(ij)的背包装下的物品总数和(i-zero,j-one)的背包装下的物品总数+1，比较这两者的大
也即O的个数。one 代表的是当前装入物品在 n 维上的体积，也即1的个数。每添加一个物品,
dp[i][j] 代表尽量填满容量为（i,j）的背包装下的物品总数，状态转移方程为 dp[i][j］ =
量完全填满 m 维和 n 维的背包。
 n，其中所有的字符都是由〇和1 组成的。问能否从数组中取出最多的
，为什么是尽量填满？因为不一定能完全填满背包。
---
## Page 545
Example 2: 
Note:
will be the minimum radius standard of heaters.
So, your input will be the positions of houses and heaters seperately, and your expected output
of heaters so that all houses could be covered by those heaters. 
Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius
radius to warm all the houses.
Winter is coming! Your first job during the contest is to design a standard heater with fixed warm
Example 1: 
题目
475. Heaters
 4. All the heaters follow your radius standard and the warm radius will the same.
3. As long as a house is in the heaters' warm radius range, it can be warmed.
2. Positions of houses and heaters you are given are non-negative and will not exceed 10^9.
1. Numbers of houses and heaters you are given are non-negative and will not exceed 25000.
radius l standard, then all the houses can be warmed.
Explanation: The only heater was placed in the position 2, and if we use the
Output:1
Input: [1,2,3],[2]
return dp[m][n]
for i := 0; i = zero; i-- {
one := len(s) - zero 
for j := n; j >= one; j-- {
 continue 
 dp[i][j] = max(dp[i][j], l+dp[i-zero][j-one]]
---
## Page 546
代码
解题思路
说明：
供暖器的位置。你将输出供暖器的最小加热半径。
平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。所以，你的输入将会是房屋和
冬季已经来临。
题目大意
func findRadius(houses []int, heaters []int) int {
package 
+
radius 1 standard, then all the houses can be warmed.
Explanation: The two heater was placed in the position 1 and 4. we need to use
Output: 1 
Input: [1,2,3,4],[1,4]
mport 
sort.Ints(heaters)
minRad := 0 
"sort"
"math"
索的方法查找。其他的做法和暴力解法一致。时间复杂度 O(n log n)。
这一题最优解是二分搜索。在查找距离房子最近的供暖器的时候，先将供暖器排序，然后用二分搜
最近的供暖器坐标。在所有这些距离的长度里面找到最大值，这个距离的最大值就是供暖器半径的
这一题可以用暴力的解法，暴力解法依次遍历每个房子的坐标，再遍历每个供暖器，找到距离房子
找到供暖器最小的半径能使得所有的房子都能享受到暖气。
给出一个房子坐标的数组，和一些供暖器坐标的数组，分别表示房子的坐标和供暖器的坐标。要求
最小值。时间复杂度 O(n^2)。
所有供暖器都遵循你的半径标准，加热的半径也一样。
只要房屋位于供暖器的半径内(包括在边缘上)，它就可以得到供暖。
给出的房屋和供暖器的位置均是非负数且不会超过10^9。
给出的房屋和供暖器的数目是非负数且不会超过25000。
//遍历房子的坐标，维护 heaters 的最小半径 
rad := heater - house
heater := findclosestHeater(house, heaters)
e leetcode
你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。现在，给出位于一条水
---
## Page 547
func findRadius1(houses
//解法二 暴力搜索
func findclosestHeater(pos int, heaters []int) int 
//二分搜索
return res
for i := O; i heaters[high] {
if pos >1
 return heaters[low]
if rad > minRad { 
if rad 0 { 
temp> uint(i)） & 1
---
## Page 551
解题思路
给出一个数组 nums，有一个大小为k的窗口从最左端滑动到最右端。窗口中有k个数，每次窗口移动
[2,3]， 中位数是(2 + 3) / 2 = 2.5 
1 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。
[2,3,4]，中位数是 3 
例如：
的两个数的平均数。
中位数是有序序列最中间的那个数。如果序列的大小是偶数，则没有最中间的数；此时中位数是最中间
You may assume k is always valid, ie: k is always smaller than input array's size for non-empty
题
array.
Note:
Therefore, return the median sliding window as [1,-1, -1,3,5,6]-
Given nums = [1,3,-1,-3,5,3,6,7], and k= 3.
For example,
the original array.
window moves right by one position. Your job is to output the median array for each window in 
array to the very right. You can only see the k numbers in the window. Each time the sliding
Given an array nums, there is a sliding window of size k which is moving from the very left of the 
[2,3], the median is (2 + 3) / 2 = 2.5
[2,3,4] , the median is 3 
Examples:
middle value. So the median is the mean of the two middle value.
Median is the middle value in an ordered integer list. If the size of the list is even, there is no
·给定一个数组和一个窗口为K的窗口，当窗口从数组的左边滑动到数组右边的时候，输出每次移
目大意
window position
[1
w
w
-1] -3
-1
-1
L
[-1 
-3
[-3
-3
-3
-3]
5[3
5
5
5
3
3
3
3
3
9
9
9
9
9
L
Z
Z
7
Z
Median 
5
---
## Page 552
代码
func removeFromwindow(w *list.List, n int) *list.List {
func getwindowList(nums []int, k int) *list.List {
func medianslidingwindow(nums []int, k int) []float64 {
// 解法－ 用链表按照题意实现时间复杂度o(n＊k）空间复杂度o(k)
import（
package leetcode
for e := w.Front(); e != nil; e = e.Next() { 
S := make([]int, k)
return 1
sort.Ints(s)
copy(s, nums)
return res
for pl := k; pl  maxH.Len()+1 
maxH := MaxHeapR{}
minH := MinHeapR{}
ans := []float64{}
用两个堆记录窗口内的值
return (float64(e.value.(int)) + float64(p.value.(int))) / 2
p := e.Prev() 
if k%2 == 1 { 
for i := O; i= minH.Top） {
minH. Push(maxH. Pop())
maxH.Push(minH. Pop())
return float64(e.Value.(int))
if e.value.(int) >= n {
minH.Push(nums[i]] 
maxH.Push(nums[i])
return w
w.InsertBefore(n,
return w 
w.Remove(e)
那么小顶堆比大顶堆多一个元素，中间值就是小顶堆的堆顶元素
 那么两个堆都有k/2个元素，中间值就是两个堆顶的元素
e)
---
## Page 554
func (h IntHeap) Top() int {
// Top defines
func （h *IntHeap) Pop（） interface{} {
// Pop define
func (h *IntHeap) Push(x interface{}) { h.data = append(h.data, x.(int)) }
// Push define
func (h IntHeap) Swap(i, j int) { h.data[i], h.data[j] = h.data[j], h.data[i]
// swap define 