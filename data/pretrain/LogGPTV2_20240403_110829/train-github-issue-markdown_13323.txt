### Issue Description

When running the provided Gist (linked below) with Deno, the process crashes with a `BorrowMutError`. I believe this issue is caused by the mutable borrow calls within the async blocks in `cli/ops/net.rs:144` and `cli/ops/net.rs:212`.

**Gist Link:**
- [Gist](https://gist.github.com/stevejmason/2fab8149460a5565ef388f92cd2e478e)

### Proposed Solution

To address this, I propose using `tokio::net::UdpSocket::split()` to separate the send and receive halves of the `UdpSocket`. We can then update the `UdpSocketResource` to contain these halves within an `Arc<Mutex<...>>` or `Arc<RwLock<...>>`. This way, the main thread can borrow the state immutably, while the async blocks can clone the `Arc` and use it as needed.

I have a working version that I can push, but I would appreciate feedback on this approach, as I am relatively new to Rust.

**Note:** The Gist may not run on the current master branch due to recent changes in the `NetAddr` and `UnixAddr` interfaces. I have been experimenting with adding generics to `DatagramImpl`, which I will follow up on separately.

### Actual Output

```plaintext
thread 'main' panicked at 'already borrowed: BorrowMutError', /rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447/src/libcore/cell.rs:878:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```

### Expected Output (Duplicate Lines Removed)

Using fork - [Deno Fork](https://github.com/stevejmason/deno/tree/async-udp)

```plaintext
TEST SOCKET RECV (1): hello world ! from [127.0.0.1:44444]
TEST SOCKET RECV (...10): hello world ! from [127.0.0.1:44444]
Received: [This is a response for message (1)] from (127.0.0.1:25262)
Received: [This is a response for message (...10)] from (127.0.0.1:25262)
```

### Deno Version

- **Deno**: 0.36.0
- **V8**: 8.1.310
- **TypeScript**: 3.8.3
- **Commit**: master#2874664

---

This revised version provides a clearer and more structured description of the issue, the proposed solution, and the expected and actual outputs. It also includes the necessary context and details for others to understand and provide feedback.