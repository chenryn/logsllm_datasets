https://gist.github.com/stevejmason/2fab8149460a5565ef388f92cd2e478e
When running the above gist with Deno, the process crashes with
`BorrowMutError`, see Actual text below. I believe this is caused by the
mutable borrow calls within the async blocks on `cli/ops/net.rs:144` and
`cli/ops/net.rs:212`.
Perhaps we can use `tokio::net::udpsocket split()` and update
`UdpSocketResource` to have a send/recv half contained in `Arc>`,
borrow state immutably on the main thread, clone the Arc container and use
this from the async block? I have a working version to push, but would like
some feedback on this approach as I'm fairly new to Rust.
( **sidenote** , the gist is unlikely to run on master due to the new
NetAddr/UnixAddr interfaces, I've been playing with types to add generics to
`DatagramImpl` which i'll follow up with).
### Actual output
    thread 'main' panicked at 'already borrowed: BorrowMutError', /rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447/src/libcore/cell.rs:878:9
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
### Expected output (duplicate lines removed)
Using fork - https://github.com/stevejmason/deno/tree/async-udp
    TEST SOCKET RECV (1): hello world ! from [127.0.0.1:44444]
    TEST SOCKET RECV (...10): hello world ! from [127.0.0.1:44444]
    Received: [This is a response for message (1)] from (127.0.0.1:25262)
    Received: [This is a response for message (...10)] from (127.0.0.1:25262)
### Deno version (also `master#2874664`)
    deno 0.36.0
    v8 8.1.310
    typescript 3.8.3