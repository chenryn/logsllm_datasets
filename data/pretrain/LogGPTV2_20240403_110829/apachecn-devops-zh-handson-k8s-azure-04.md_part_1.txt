# 四、构建可扩展的应用
高效运行应用时，扩展和升级应用的能力至关重要。扩展允许您的应用处理额外的负载。升级时，需要扩展以保持应用的最新状态并引入新功能。
按需扩展是使用云原生应用的主要优势之一。它还有助于优化应用的资源。如果前端组件遇到重负载，您可以单独扩展前端，同时保持相同数量的后端实例。根据您的工作负载和高峰需求时间，您可以增加或减少所需的**虚拟机** ( **虚拟机**)数量。本章将详细介绍应用及其基础架构的规模。
在本章中，您将学习如何在 AKS 上扩展*第 3 章* *中介绍的示例留言簿应用。您将首先使用手动命令来缩放该应用，然后您将学习如何使用**水平 Pod 自动缩放器(HPA)** 来自动缩放它。目标是让您对 **kubectl** 感到舒适，这是管理运行在**Azure Kubernetes****Service**(**AKS**)之上的应用的重要工具。扩展应用后，您还将扩展集群。首先手动缩放集群，然后使用**集群自动缩放器**自动缩放集群。此外，您将获得关于如何升级 AKS 上运行的应用的简要介绍。*
在本章中，我们将涵盖以下主题:
*   扩展应用
*   扩展集群
*   升级您的应用
让我们从讨论 AKS 之上的扩展应用的不同维度开始这一章。
## 扩展您的应用
在 AKS 上运行的应用有两种规模。第一个规模维度是部署拥有的 pods 数量，而 AKS 中的第二个规模维度是集群中的节点数量。
通过向部署中添加新的 pods(也称为横向扩展)，您可以为部署的应用增加额外的计算能力。您可以手动扩展您的应用，或者让 Kubernetes 通过 HPA 自动处理这个问题。HPA 可以监控 CPU 等指标，以确定是否需要将 pods 添加到您的部署中。
AKS 中的第二个尺度维度是集群中的节点数。集群中的节点数定义了该集群上运行的所有应用有多少 CPU 和内存可用。您可以通过更改节点数量来手动扩展集群，也可以使用集群自动缩放器来自动扩展集群。集群自动缩放器监视集群中由于资源限制而无法调度的 Pod 。如果无法调度 pods，它将向集群添加节点，以确保您的应用可以运行。
本章将涵盖两个比例维度。在本节中，您将了解如何扩展应用。首先，您将手动缩放应用，然后，您将自动缩放应用。
### 手动扩展应用
为了演示手动缩放，让我们使用上一章中使用的留言簿示例。按照以下步骤学习如何实施手动缩放:
#### 注意
在前一章中，我们在 Cloud Shell 中克隆了示例文件。如果您当时没有这样做，我们建议您现在就这样做:
**git 克隆 https://github . com/PacktPublishing/动手-Kubernetes-On-Azure-第三版**
本章导航至**第 04 章**目录:
**cd 第 04 章**
1.  Set up the guestbook by running the **kubectl create** command in the Azure command line:
    kubectl create -f 留言簿一体机. yaml
2.  After you have entered the preceding command, you should see something similar to what is shown in *Figure 4.1* in your command-line output:
    ![Setting up the guestbook application by running the kubectl create command](img/B17338_04_01.jpg)
    图 4.1:启动留言簿应用
3.  Right now, none of the services are publicly accessible. We can verify this by running the following command:
    忽必烈得到服务
4.  As seen in *Figure 4.2*, none of the services have an external IP:
    ![Verifying to ensure none of the services are publicly accessible](img/B17338_04_02.jpg)
    图 4.2:确认所有服务都没有公共 IP 的输出
5.  To test the application, you will need to expose it publicly. For this, let's introduce a new command that will allow you to edit the service in Kubernetes without having to change the file on your file system. To start the edit, execute the following command:
    忽必烈编辑服务前端
6.  This will open a **vi** environment. Use the down arrow key to navigate to the line that says **type:** **ClusterIP** and change that to **type: LoadBalancer**, as shown in *Figure 4.3*. To make that change, hit the *I* button, change **type** to **LoadBalancer**, hit the *Esc* button, type **:wq!**, and then hit *Enter* to save the changes:
    ![Changing the type from ClusterIP to LoadBalancer](img/B17338_04_03.jpg)
    图 4.3:将此行更改为类型:负载平衡器
7.  Once the changes are saved, you can watch the service object until the public IP becomes available. To do this, type the following:
    忽必烈得到服务-w
8.  It will take a couple of minutes to show you the updated IP. Once you see the correct public IP, you can exit the **watch** command by hitting *Ctrl* + *C*:
    ![Output showing the front-end service getting a public IP](img/B17338_04_04.jpg)
    图 4.4:显示前端服务获得公共 IP 的输出
9.  将上述输出中的 IP 地址键入浏览器导航栏，如下所示: **http://  /** 。其结果见*图 4.5* :
![Entering the IP address in the browser to view the guestbook sample](img/B17338_04_05.jpg)
图 4.5:浏览至留言簿应用
熟悉的留言簿样本应该是可见的。这表明您已经成功地公开访问了留言簿。
现在已经部署了留言簿应用，可以开始扩展应用的不同组件了。
### 缩放留言簿前端组件
Kubernetes 为我们提供了动态扩展应用每个组件的能力。在本节中，我们将向您展示如何扩展留言簿应用的前端。现在，前端部署部署了三个副本。您可以使用以下命令进行确认:
忽必烈得到 pods
这将返回如图 4.6 所示的输出:
![Output confirming that we have three replicas in the front-end deployment](img/B17338_04_06.jpg)
图 4.6:确认前端部署中的三个副本
要扩展前端部署，您可以执行以下命令:
kubectl 规模部署/前端-副本=6
这将导致 Kubernetes 向部署中添加额外的 Pod 。您可以设置想要的副本数量，剩下的由 Kubernetes 负责。您甚至可以将其缩小到零(当应用不支持配置的动态重新加载时，用于重新加载配置的技巧之一)。要验证整体缩放是否正常工作，可以使用以下命令:
忽必烈得到 pods
这应该会给你显示在*图 4.7* 中的输出:
![Output showing 6 pods running in the frontend deployment after scaling out ](img/B17338_04_07.jpg)
图 4.7:横向扩展后留言簿应用中运行的不同面板
如您所见，前端服务扩展到了六个 Pod 。Kubernetes 还将这些 PODS 分布在集群中的多个节点上。您可以使用以下命令查看正在运行的节点:
kubectl 的 PODS 很宽
这将生成以下输出:
![Output showing the nodes on which the pods are running](img/B17338_04_08.jpg)
图 4.8:显示 PODS 在哪些节点上运行
在本节中，您已经看到了用 Kubernetes 扩展 PODS 是多么容易。此功能为您提供了一个非常强大的工具，不仅可以动态调整应用组件，还可以通过同时运行多个组件实例来为弹性应用提供故障转移功能。但是，您不会总是想要手动扩展您的应用。在下一节中，您将了解如何通过在部署中自动添加和删除 pods 来自动扩展应用。
### 使用 HPA
在集群上工作时，手动缩放非常有用。例如，如果您知道您的负载将会增加，您可以手动扩展您的应用。然而，在大多数情况下，您会希望在您的应用上发生某种自动缩放。在 Kubernetes 中，您可以使用名为**水平 Pod 自动缩放器** ( **HPA** )的对象来配置部署的自动缩放。
HPA 定期监控 Kubernetes 指标，并根据您定义的规则自动扩展您的部署。例如，您可以配置 HPA，以便在应用的 CPU 利用率超过 50%时向部署中添加额外的 pod。
在本节中，您将配置 HPA 以自动扩展应用的前端:
1.  To start the configuration, let's first manually scale down our deployment to one instance:
    kubectl 规模部署/前端副本=1
2.  Next up, we'll create an HPA. Open up the code editor in Cloud Shell by typing **code hpa.yaml** and enter the following code:
    1 apiVersion:自动缩放/v1
    2 个孩子:水平 podgorical
    3 元数据:
    4 名称:前端定标器
    5 规格:
    6 scaleTargetRef:
    7 apiVersion: apps/v1
    8 种:部署
    9 名称:前端
    10 个最小副本:1
    11 个最大副本:10 个
    12 目标利用率百分比:50
    让我们研究一下这个文件中配置了什么:
    *   **第 2 行**:这里我们定义需要**水平脚自动缩放**。
    *   **第 6-9 行**:这些行定义了我们想要自动缩放的部署。
    *   **第 10-11 行**:这里，我们在部署中配置最小和最大 Pod 。
    *   **第 12 行**:这里我们定义了我们部署的目标 CPU 利用率百分比。
3.  Save this file, and create the HPA using the following command:
    忽必烈 create -f hpa.yaml
    这将创建我们的自动缩放器。您可以使用以下命令查看您的自动缩放器:
    忽必烈得到 hpa
    这将最初输出如图 4.9 所示的内容:
    ![Output displaying target as unknown, which indicates that the HPA isn't ready yet](img/B17338_04_09.jpg)
    图 4.9:目标未知表明 HPA 还没有准备好
    HPA 读取指标需要几秒钟的时间。等待 HPA 返回类似于*图 4.10* 所示的输出:
    ![Output showing the target with a percentage indicating that the HPA is ready](img/B17338_04_10.jpg)
    图 4.10:一旦目标显示一个百分比，HPA 就准备好了
4.  You will now go ahead and do two things: first, you will watch the pods to see whether new pods are created. Then, you will create a new shell, and create some load for the system. Let's start with the first task—watching our pods:
    忽必烈得到 pods -w
    这将持续监控被创建或终止的 Pod 。
    现在让我们在一个新的 shell 中创建一些负载。在云壳中，点击**打开新会话**图标打开新壳:
    ![Clicking the open new session icon to open a new Cloud Shell](img/B17338_04_11.jpg)
    图 4.11:使用此按钮打开一个新的云外壳
    这将在您的浏览器中打开一个新的选项卡，并在 Cloud Shell 中打开一个新的会话。您将从此选项卡为应用生成负载。
5.  Next, you will use a program called **hey** to generate this load. **hey** is a tiny program that sends loads to a web application. You can install and run **hey** using the following commands:
    导出 GOPATH=~/go
    导出路径=$GOPATH/bin:$PATH
    去找 github.com/rakyll/hey
    hey -z 20m http://
    **嘿**程序现在将尝试创建多达 2000 万个到前端的连接。这将在系统上产生 CPU 负载，这将触发 HPA 开始扩展部署。这将需要几分钟的时间来触发缩放动作，但是在某一点上，您应该会看到创建了多个 Pod 来处理额外的负载，如图 4.12*所示:*
    ![Output showing new pods being created by the HPA to handle the additional load](img/B17338_04_12.jpg)
    图 4.12:新的 Pod 由 HPA 启动
    此时，你可以点击 *Ctrl* + *C* 继续杀死**嘿**程序。
6.  Let's have a closer look at what the HPA did by running the following command:
    kubectl 描述 hpa
    我们可以在**描述**操作中看到几个有趣的点，如图*图 4.13* :
    ![Running the kubectl describe hpa command to get a detailed view of the HPA](img/B17338_04_13.jpg)
    图 4.13:住房公积金的详细视图
    *图 4.13* 中的注释说明如下:
    *   这向您显示了当前的 CPU 利用率( **384%** )与期望的( **50%** )的对比。当前的 CPU 利用率在您的情况下可能会有所不同。
    *   这表明当前所需的副本数量高于您配置的实际最大数量。这确保了单个部署不会消耗集群中的所有资源。
    *   这向您展示了 HPA 采取的缩放操作。在部署中，它首先扩展到 4 个，然后扩展到 8 个，然后扩展到 10 个 Pod 。
7.  If you wait for a couple of minutes, the HPA should start to scale down. You can track this scale-down operation using the following command: