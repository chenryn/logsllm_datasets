cat  /home/hacker/NHOME/etc/gs.auto
#NOGS
-lcd /current/down -nohist
-lsh -nohist env | grep NOPEN ; echo;set | grep NOPEN
-exit -nohist
将端口转发出来。
这时已经将本地的端口与远端的端口映射起来。
 mysql -u root -h 172.19.2.14
ERROR 1130 (HY000): Host '172.19.2.15' is not allowed to connect to this MySQL 
server
-stun
[04-01-22 08:40:51 GMT][localhost:33681 -> centos6x86.local.172.19.2.14:32754]
[-stun]
Usage: -stun toip toport [localport [srcport]]
NO! centos6x86.local:/home/hacker/test>-stun localhost 3306
[04-01-22 08:41:32 GMT][localhost:33681 -> centos6x86.local.172.19.2.14:32754]
[-stun localhost 3306]
Listening on localhost:3306 (127.0.0.1:3306)
Connecting to localhost:3306 (127.0.0.1:3306)
Received local connection, contacting server
local client closed
remote client closed
Should be synced up
OK
mysql -u root -h 172.19.2.15
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MySQL connection id is 6
Server version: 5.1.73 Source distribution
Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
MySQL [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| test               |
+--------------------+
3 rows in set (0.00 sec)
MySQL [(none)]> use test;
Database changed
MySQL [test]> show tables;
Empty set (0.00 sec)
MySQL [test]> CREATE TABLE tb_employee (id INT(11), name VARCHAR(25), deptId 
INT(11), salary FLOAT );
Query OK, 0 rows affected (0.04 sec)
MySQL [test]> show tables;
+----------------+
| Tables_in_test |
+----------------+
| tb_employee    |
+----------------+
这时就可以访问远端的数据库了。
elevate
提权是内网渗透的第一要素，但是作为隧道工具，入口点一般都不是root权限，所以整合提权模块，就
是非常必要。
并且里面的工具，许多是需要root权限，才能操作的。
但是这个命令，只是查看一下是否具有root权限，木有对应的提权操作。
这个C2如何进行提权，需要进一步研究。
对比分析
代码编写的比较利落，主要的亮点有木有使用公开的加密库，加密代码都是自己编写。
noserver的执行逻辑与Cobalt Strike的beacon基本一样，都是通过RSA生成会话密钥，然后加密会话通
信。
从整体上看，与CS的技术水平基本一样，但是领先了好多年。形成了一系列的工具集，并且在实践中，
拿下了一大批系统。
其实写一个noserver的替代程序，倒是不错的学习NSA技术的机会。
会话密钥生成
客户端主动连接服务端，其会话密钥的生成过程如下。
在反向连接的会话过程中，密钥生成过程如下。
1 row in set (0.00 sec)
Initiating RSA key exchange
  Generating random number... ok
  Initializing RC6... ok
  Sending random number... ok
  Receiving random number... ok
  Generating session key... 0x98FC9781D28C0B6F330B7BF32285CE66
  Sending first verify string... ok
  Receiving second verify string... ok
  Checking second verify string... ok
RSA key exchange complete
Entering server mode
Listening on *:9999... ok
Accepted connection from 172.19.2.15:59914
Initiating RSA key exchange
  Generating random number... ok
  Initializing RC6... ok
  Sending random number... ok
  Receiving random number... ok
  Generating session key... 0x485C6C7B65F7FE9B183EF2D427776B8F
  Sending first verify string... ok
对比一下，密钥生成的过程完全一样。
因为nopen的程序，都已删除程序符号信息，所以需要逆向才能确定具体的实现。
但是我找到了一个ish.v3程序，带符号信息，可以对比分析。
scaner
作为最常用的隧道配合工具之一，scaner的重要性不言而喻，nopen也带了一个自研的扫描器。在
Linux\bin\目录下，有scanner几个版本。
查看一下帮助。
  Receiving second verify string... ok
  Checking second verify string... ok
RSA key exchange complete
NOPEN server version... 3.1.0.1
sha1sum scanner
4a9067f05e67335bc5d27a539b15f7dda0191941  scanner
[hacker@centos7x86 test]$ file scanner
scanner: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically 
linked (uses shared libs), for GNU/Linux 2.2.5, stripped
./scanner -h
./scanner Version 3.6
Usage: ./scanner typeofscan IP_address
  Scan options:
        winl   Scan for windows boxes
        winn   Scan for windows names
        xwin   Scan for Xwin folks
        time   Scan for NTP  folks
         rpc   Scan for RPC  folks
       snmp1   Scan for SNMP version
       snmp2   Scan for Sol  version
        echo   Scan for echo hosts
       time2   Scan for daytime hosts
        tftp   Scan for tftp hosts
        tday   Scan for daytime hosts
       ident   Scan ident
        mail   Scan mail
         ftp   Scan ftp
     t_basic   Scan TCP port
        http   Scan web
     netbios   Does not work
         dns   Scan for DNS
       ripv1   Scan for RIP v1
       ripv2   Scan for RIP v2
         lpr   Scan for lpr
    miniserv   Scan for Redflag Web
    win_scan   Get windows version
      telnet   Banner Telnet
      finger   Banner finger
         ssl   Scan for SSL stuff
         ssh   Scan for SSH version
       snmp3   Finnish Test Case SNMP
     dtuname   DT uname test
提供了场景应用的扫描功能。
简单操作一下。
功能简单，使用简单，与nmap相比，差距很大。
但是该有的功能都有了。
ourtn
      answer   Answerbook test
        brpc   Larger RPC dump
         x11   X11 test
       xfont   X font server test
     printer   Printer Test
    speedlan   Speed Lan Test
        imap   Imap test
     t_mysql   Mysql TCP
     mibiisa   Mibissa test
           #   port other than above
         all   (you are really cool)
        sane   (you are really smart, all - snmp1 and snmp2)
You are the weakest link, goodbye
 ./scanner sane 172.19.2.14
# scanning ip  172.19.2.14
# Scan for windows boxes
# Scan for windows names
# Scan for Xwin folks
# Scan for NTP  folks
# Scan for RPC  folks
--
Packet from 172.19.2.14  to   172.19.2.15
   program vers proto   port  service
    100000    4   tcp    111
    100000    3   tcp    111
    100000    2   tcp    111
    100000    4   udp    111
    100000    3   udp    111
    100000    2   udp    111
    100024    1   udp  54850
    100024    1   tcp  52634
--
# Scan for echo hosts
# Scan for daytime hosts
# Scan for tftp hosts
# Does not work
# Scan for DNS
# Scan for RIP v2
adios
certutil -hashfile ourtn sha1
SHA1 的 ourtn 哈希:
5b5fa41817db1c757643f4eeb43d110f1857daf8
CertUtil: -hashfile 命令成功完成。
ourtn是一个perl 4脚本，文件比较大，用来构建隧道。
因为程序木有跑起来，所以都是基于文件的分析。
这个程序的主要用途是建立隧道链，然后上传负载，比如启动tipoff/dewdrop，进行进一步的操作。
程序里面支持windows系统，但是木有看到对应的windows程序，需要进一步收集相关资料。
这个隧道支持的协议有tcp, udp, icmp。在网络协议利用方面，明显高出其他团队一大截。
从perl的版本可以看出，这是个老程序。说明这个C2有很长的积累时间。
通过利用不同的程序组合，实现了操作的序列化。降低了操作员的难度，节省了大量时间。
scripme
scripme也是一个perl 4脚本，庆幸的是，可以运行起来。
certutil -hashfile scripme sha1
SHA1 的 scripme 哈希:
b1b7ee5c0e5ee2a477acf39159980832aa6cde3f
CertUtil: -hashfile 命令成功完成。
./scripme -H
Usage: scripme [options] [-X"other-xterm-args"] [# | -t wintype]
   -H  print this LONGER usage statement (-h is a shorter one)
   -F  This option should only be used by scrubhands or by other
       automation scripts. With -F, the number and type of xterms
       started are determined by scripme.* files in /current/etc.
   -V  show xterm commands executed to stdout
   -k  close xterm when its process is done
   -d  show but do not execute the xterm commands
   -c  call $EXPLOIT_SCRIPME via "sh -c ''" (this
       is ignored unless -t wintype is used)
   -X  other-xterm-args can be any string of valid arguments to xterm
       (see xterm(1) for valid arguments), including the hyphen(s)
   -s  use the size from some other window for this new one. User is
       prompted to click the window whose size we want.
   -t  bring up only one window of type wintype, which can be either
       TCPDUMP or SOMETHINGELSE. If SOMETHINGELSE, the environment
       variable EXPLOIT_SCRIPME must contain the desired command line,
       and the script name with script.somethingelse.$$. (Choice of
       string "SOMETHINGELSE" up to user.)
scripme -F brings up 0 windows scripted in /current/down/. One
running "tcpdump -n -n", on the environment variable $INTERFACE, scripted
to tcpdump.raw, and the others running bash, scripted to script.$$.  Or,
启动一个终端，启动tcpdum，抓取网络数据，然后执行操作脚本。
总结
nopen是NSA的方程式工具集的一个重要操作平台，提供了unix类型下的C2服务器和控制端功能，是整
个工具的核心。通过C2框架，来加载其他攻击载荷，建立内网渗透通道。
从其庞杂的辅助程序可以看出，这个C2已经运行了很长时间，有相当多的实战使用经验。
这个C2的技术水平与msf基本接近，功能各有所长。
msf强在框架的模块化设计。
nopen强在加密设计，网络协议利用，环境检测。
值得注意的是这个C2把隧道技术作为内建的功能，而不是采用外挂隧道软件，这样的好处就是自带统一
的加密功能和操作界面，快速进行内网渗透。
这个C2虽然不支持脚本语言，但是支持批量命令处理，方便管理多个服务端。
nopen对文件的日期属性的设置，很不错，可以有效的隐藏自己。
中国菜刀也有这个功能:-)
nopen是一个严谨的C2平台。
参考
1. 信息安全摘要 (cverc.org.cn)
2. 从国家计算机病毒应急处理中心披露的NSA网络间谍武器，看美国网络作战布局 - 安全客，安全资
讯平台 (anquanke.com)
3. x0rz/EQGRP: Decrypted content of eqgrp-auction-file.tar.xz (github.com)
4. ShadowMove套接字劫持技术，巧妙隐藏与C2的连接 - FreeBuf网络安全行业门户
5. 【恶意文件通告】NOPEN 恶意文件分析 (qq.com)
6. 从“NOPEN”远控木马浮出水面看美方网络攻击装备体系 (antiy.cn)
7. 
if the optional "#" argument is used, # scripted bash windows. (# is
ignored if it is greater than 20.)
If your op is built with the file /current/etc/scripme.override, it can
contain a table of your preferences for window location, size, color,
etc. See /current/etc/scripme.example to design your own .override file.
scripme version 2.0.2.4