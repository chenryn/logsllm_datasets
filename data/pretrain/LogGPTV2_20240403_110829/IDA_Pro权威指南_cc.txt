 ，使 OUTDIR
 变量指向$(IDA)/bin/loaders
 ，即可用修改后的生成文件构建“傻瓜式”加载器。
18.4.3 IDA pcap加载器
可以说，绝大多数网络数据包并不包含可被反汇编的代码。但是，如果一个数据包碰巧包含一个破解程序的证据，那么该数据包可能包含需要进行反汇编（以对数据包进行准确的分析）的二进制代码。为了证明IDA 加载器可以用于多种用途，现在我们描述如何创建一个能够将pcap1
 格式的数据包捕获文件加载到IDA 数据库中的加载器。虽然这样做可能有点小题大做，但是，我们将逐渐证实IDA SDK 的其他一些功能。在这里，我们不会匹配Wireshark2
 之类的工具的功能。
1. 参见http://www.tcpdump.org/
 。
2. 参见http://www.wireshark.org/
开发这种加载器需要我们对 pcap 文件格式有一定的研究。研究表明，pcap 文件由以下简单的语法构成：
pcap_file: pcap_file_header (pcap_packet)*  
pcap_packet: pcap_packet_header pcap_content  
pcap_content: (byte)+
pcap_file_header
 包含一个32位幻数字段和描述文件内容的其他字段，包括文件所包含的数据包的类型。为了简化，这里假设仅处理DLT_EN10MB
 （10Mb 以太网数据包）。在开发 pcap加载器的过程中，我们的一个目标是识别尽可能多的头部数据，以帮助读者集中精力处理数据包内容，特别是应用层的内容。要完成这个目标，首先需要为每一个文件头部创建一个单独的段，将它们与数据包分离开来；然后再从每个段中识别出尽可能多的头部结构体，以便用户不需要手动解析文件内容。下面的讨论将主要集中于pcap 加载器的load_file
 组件，因为这里的accept_file
 函数只是对accept_simpleton_file
 进行了简单的修改，使它能够识别pcap 幻数即可。
为了识别头部结构体，在加载过程中，我们需要在 IDA 的“结构体”窗口中定义一些常用的结构体。这样，如果已知一些字节的数据类型，加载器将自动把它们格式化成结构体。IDA 的GNU C++ Unix 类型库定义了 pcap 头部结构体和各种描述以太网、IP 、TCP 和UDP 头部的、与网络有关的结构体。但是，在 IDA 5.3 之前的版本中，对 IP 头部结构体（iphdr
 ）的定义并不正确。load_pcap_file
 采取的第一个步骤是调用我们编写的一个名为 add_types
 的帮助函数，将结构体导入到新数据库中。共有两个版本的 add_types
 ，其中一个版本使用了在 IDA 的GNU C++ Unix类型库中声明的类型，另一个版本则自己声明全部所需的结构体。
第一个版本的 add_types
 首先加载 GNU C++ Unix类型库，然后从这个新加载的类型库中提取出类型标识符。这个版本的 add_types
 如下所示：
void add_types() {  
#ifdef ADDTIL_DEFAULT  
   add_til2("gnuunx.til", ADDTIL_SILENT);  
#else  
   add_til("gnuunx.til");  
#endif  
   pcap_hdr_struct = til2idb(-1, "pcap_file_header");  
   pkthdr_struct = til2idb(-1, "pcap_pkthdr");  
   ether_struct = til2idb(-1, "ether_header");  
   ip_struct = til2idb(-1, "iphdr");  
   tcp_struct = til2idb(-1, "tcphdr");  
   udp_struct = til2idb(-1, "udphdr");  
}
在typinf.hpp 中定义的add_til
 函数用于将一个现有的类型库文件加载到数据库中。为了支持随IDA 5.1 版本引入的add_til2
 函数，使用add_til
 函数的做法遭到反对。这些 SDK 函数的功能等同于第 8 章中讨论的使用“类型”窗口加载一个.til 文件。加载一个类型库后，就可以利用til2idb
 函数将各个类型导入到当前数据库中。这种编程操作等同于第 8 章中讨论的将一个标准结构体添加到“结构体”窗口中。til2idb
 函数返回一个类型标识符，在我们希望将一系列字节转换成特定的结构体数据类型时，会用到这个标识符。我们已经将这些类型标识符保存在全局变量（tid_t
 类型）中，以便在后面的加载过程中更快地访问各种类型。
第一个版本的 add_types
 存在两个缺点。第一，仅仅为了访问 6 种数据类型，我们需要导入整整一个类型库。第二，如前所述，IDA 对于IP 头部结构体的内建定义并不正确，因此，在后面的加载过程中，如果尝试应用这些结构体，可能会导致问题。
第二个版本的 add_types 说明如何通过解析 C 风格的结构体声明，动态创建一个类型库。这个版本如下所示：
void add_types() {  
   til_t *t = new_til("pcap.til", "pcap header types"); //empty type library  
   parse_decls(t, pcap_types, NULL, HTI_PAK1); //parse C declarations into library  
   sort_til(t);                                //required after til is modified  
   pcap_hdr_struct = import_type(t, -1, "pcap_file_header");  
   pkthdr_struct = import_type(t, -1, "pcap_pkthdr");  
   ether_struct = import_type(t, -1, "ether_header");  
   ip_struct = import_type(t, -1, "iphdr");  
   tcp_struct = import_type(t, -1, "tcphdr");  
   udp_struct = import_type(t, -1, "udphdr");  
   free_til(t);                                  //free the temporary library  
}
这个版本的 add_types
 使用new_til
 函数创建了一个临时的空类型库。它通过解析一个包含有效C 结构体定义的字符串（pcap_types
 ），获得加载器所需的类型，从而填充新的类型库。pcap_types
 字符串的前几行代码如下所示：
char *pcap_types =  
   "struct pcap_file_header {\n"  
        "int magic;\n"  
        "short version_major;\n"  
        "short version_minor;\n"  
        "int thiszone;\n"  
        "int sigfigs;\n"  
        "int snaplen;\n"  
        "int linktype;\n"  
   "};\n"  
   ...
pcap_types
 还声明了其他内容，包括 pcap 加载器所需的全部结构体的定义。为了简化解析过程，我们选择更改结构体定义中的所有数据声明，以利用标准的 C 数据类型。
HTI_PAK1
 常量在typeinf.hpp 中定义，是用于控制内部 C 解析器行为的许多 HTI_XXX
 值中的一个。在这个例子中，代码请求的是1 字节对齐的结构体。经过修改后，这个类型库将使用sort_til
 排序，这时它即可供我们使用。import_type
 函数以类似于 til2idb
 的方式，从指定的类型库中提取被请求的结构体类型，将它们加载到数据库中。在这个版本中，我们同样将返回的类型标识符保存到全局变量中，以方便在后面的加载过程中使用。最后，add_types
 使用free_til
 函数删除临时的类型库，释放被该类型库占用的内存。使用这个版本的 add_types
 与使用第一个版本不同，这时我们可以完全控制被选择导入到数据库中的数据类型，不需要导入整个结构体库，从而避免导入那些不需要用到的结构体。
顺便提一下，我们还可以使用 store_til
 函数（在此之前，应调用 compact_til
 ）将临时的类型库文件保存到磁盘中。在当前的例子中，由于需要创建的类型很少，这样做几乎没有什么益处。因为在每次加载器执行时构建结构体，与构建并分发一个必须正确安装的专用类型库同样容易，因而也不会为我们节省大量时间。
将注意力转到 load_pcap_file
 函数上，它调用 add_types
 初始化数据类型（如前所述），创建一个文件注释，将 pcap 文件头加载到数据库中，创建一个头部字节大小的节，并将头部字节转换成一个 pcap_file_header
 结构体：
void idaapi load_pcap_file(linput_t *li, ushort, const char *) {  
   ssize_t len;  
   pcap_pkthdr pkt;  
   add_types();              //add structure templates to database  
   create_filename_cmt();    //create the main file header comment  
   //load the pcap file header from the database into the file  
   file2base(li, 0, 0, sizeof(pcap_file_header), FILEREG_PATCHABLE);  
   //try to add a new data segment to contain the file header bytes  
   if (!add_segm(0, 0, sizeof(pcap_file_header), ".file_header", CLASS_DATA)) {  
      loader_failure();  
   }  
   //convert the file header bytes into a pcap_file_header  
   doStruct(0, sizeof(pcap_file_header), pcap_hdr_struct);  
   //... continues
再一次，load_pcap_file
 使用file2base
 将新打开的磁盘文件的内容加载到数据库中。pcap文件头的内容被加载后，它将在数据库中获得自己的节，并且pcap_file_header
 结构体将通过在bytes.hpp 中声明的doStruct
 函数应用于所有头部字节。doStruct
 函数的作用等同于使用Edit ▶Struct Var 将一组相邻的字节转换成一个结构体。这个函数需要一个地址、一个大小和一个类型标识符，并将给定地址的指定大小的字节转换成给定的类型。
然后，load_pcap_file
 继续读取所有数据包内容，并为数据包内容创建一个.packets
 节，如下所示：
   //...continuation of load_pcap_file  
   uint32 pos = sizeof(pcap_file_header);    //file position tracker  
   while ((len = qlread(li, &pkt, sizeof(pkt))) == sizeof(pkt)) {  
      mem2base(&pkt, pos, pos + sizeof(pkt), pos);  //transfer header to database  
      pos += sizeof(pkt);       //update position pointer point to packet content  
      //now read packet content based on number of bytes of packet that are  
      //present  
      file2base(li, pos, pos, pos + pkt.caplen, FILEREG_PATCHABLE);  
      pos += pkt.caplen;        //update position pointer to point to next header  
   }  
   //create a new section around the packet content.  This section begins where  
   //the pcap file header ended.  
   if (!add_segm(0, sizeof(pcap_file_header), pos, ".packets", CLASS_DATA)) {  
      loader_failure();  
   }  
   //retrieve a handle to the new segment  
   segment_t *s = getseg(sizeof(pcap_file_header));  
   //so that we can set 32 bit addressing mode on  
   set_segm_addressing(s, 1);  //set 32 bit addressing  