Defenses. In ACM Conference on Computer and Communications Security (CCS).
[13] Xiang Cai, Xin Cheng Zhang, Brijesh Joshi, and Rob Johnson. 2012. Touching from
a Distance: Website Fingerprinting Attacks and Defenses. In ACM Conference on
Computer and Communications Security (CCS).
[14] Jan Camenisch, Susan Hohenberger, Markulf Kohlweiss, Anna Lysyanskaya, and
Mira Meyerovich. 2006. How to win the clonewars: efficient periodic n-times
anonymous authentication. In ACM Conference on Computer and Communications
Security (CCS).
[15] Frank Cangialosi, Dave Levin, and Neil Spring. 2015. Ting: Measuring and Exploit-
ing Latencies between All Tor Nodes. In ACM Internet Measurement Conference
(IMC).
[16] B. Carpenter. 2002. Middleboxes: Taxonomy and Issues. RFC 3234.
[17] Sambuddho Chakravarty, Angelos Stavrou, and Angelos D Keromytis. 2010. Traf-
fic analysis against low-latency anonymity networks using available bandwidth
estimation. In Computer Security–ESORICS 2010. Springer, 249–267.
[18] David Chaum. 1985. Security without identification: transaction systems to make
big brother obsolete. Commun. ACM (1985).
[19] David Chaum. 1988. The Dining Cryptographers Problem: Unconditional Sender
and Recipient Untraceability. Journal of Cryptography 1, 1 (1988), 65–75.
[20] Michael Coughlin, Eric Keller, and Eric Wustrow. 2017. Trusted Click: Over-
coming Security issues of NFV in the Cloud. In ACM International Workshop on
(2015).
Security in Software Defined Networks & Network Function Virtualization (SDN-
NFVSec).
[21] Ivan Damgård, Kasper Dupont, and Michael Østergaard Pedersen. 2006. Unclon-
able group identification. In International Conference on Theory and Applications
of Cryptographic Techniques (EUROCRYPT).
[22] Debajyoti Das, Sebastian Meiser, Esfandiar Mohammadi, and Aniket Kate. 2018.
Anonymity Trilemma: Strong Anonymity, Low Bandwidth Overhead, Low
Latency—Choose Two. In IEEE Symposium on Security and Privacy.
[23] Alex Davidson, Ian Goldberg, Nick Sullivan, George Tankersley, and Filippo
Valsorda. [n. d.]. Privacy Pass. ([n. d.]). https://privacypass.github.io/.
[24] Roger Dingledine, Nick Mathewson, and Paul Syverson. 2004. Tor: The Second-
Generation Onion Router. In USENIX Security Symposium.
[25] Cynthia Dwork and Moni Naor. 1992. Pricing via processing or combatting junk
mail. In International Cryptology Conference (CRYPTO).
[26] Jake Edge. 2015. A seccomp overview. https://lwn.net/Articles/656307/.
[27] Matthew Edman and Paul Syverson. 2009. AS-awareness in Tor Path Selection.
In ACM Conference on Computer and Communications Security (CCS).
[28] Enter the Andromeda zone - Google Cloud Platform latest networking stack [n.
d.]. Enter the Andromeda zone - Google Cloud Platform latest networking stack.
http://goo.gl/u59Iw1. ([n. d.]).
[29] ETSI Network Function Virtualization [n. d.]. ETSI Network Function Virtualiza-
tion. http://www.etsi.org/technologies-clusters/technologies/
nfv. ([n. d.]).
[30] Nathan S Evans, Roger Dingledine, and Christian Grothoff. 2009. A Practical
Congestion Attack on Tor Using Long Paths. In USENIX Security Symposium.
[31] Christina Garman, Matthew Green, and Ian Miers. 2014. Decentralized anony-
mous credentials. In Network and Distributed System Security Symposium (NDSS).
[32] Aaron Gember, Prathmesh Prabhu, Zainab Ghadiyali, and Aditya Akella. 2012.
Toward software-defined middlebox networking. In Workshop on Hot Topics in
Networks (HotNets).
[33] Yossi Gilad and Amir Herzberg. 2012. Spying in the dark: TCP and Tor traffic
analysis. In Privacy Enhancing Technologies Symposium (PETS).
[34] Stephen Herwig, Christina Garman, and Dave Levin. 2020. Achieving Keyless
CDNs with Conclaves. In USENIX Security Symposium.
[35] Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade, and Juan
Del Cuvillo. 2013. Using innovative instructions to create trustworthy software
solutions. In International Workshop on Hardware and Architectural Support for
Security and Privacy (HASP).
[36] Nicholas Hopper, Eugene Y Vasserman, and Eric Chan-Tin. 2010. How much
anonymity does network latency leak? ACM Transactions on Information and
System Security (TISSEC) 13, 2 (2010), 13.
[37] Intel. [n. d.].
Code Sample: Intel® Software Guard Extensions Remote
Attestation End-to-End Example. https://software.intel.com/content/
www/us/en/develop/articles/code-sample-intel-software-guard-
extensions-remote-attestation-end-to-end-example.html.
([n.
d.]).
[38] Ankur Jain, Joseph M. Hellerstein, Sylvia Ratnasamy, and David Wetherall. 2004.
A Wakeup Call for Internet Monitoring Systems: The Case for Distributed Trig-
gers. In Workshop on Hot Topics in Networks (HotNets).
[39] Xin Jin, Erran Li Li, Laurent Vanbever, and Jennifer Rexford. 2013. SoftCell:
Scalable and flexible cellular core network architecture. In ACM Conference on
emerging Networking EXperiments and Technologies (CoNEXT).
[40] Aaron Johnson, Rob Jansen, Nicholas Hopper, Aaron Segal, and Paul Syverson.
2017. PeerFlow: Secure load balancing in Tor. In Privacy Enhancing Technologies
Symposium (PETS).
[41] Aaron Johnson, Chris Wacek, Rob Jansen, Micah Sherr, and Paul Syverson. 2013.
Users get routed: Traffic correlation on Tor by realistic adversaries. In ACM
Conference on Computer and Communications Security (CCS).
[42] Simon Johnson, Vinnie Scarlata, Carlos Rozas, Ernie Brickell, and Frank Mckeen.
[n. d.]. ([n. d.]).
(2008), 20–25.
[43] Dilip Joseph and Ion Stoica. 2008. Modeling Middleboxes. IEEE Network 22, 5
[44] Dilip A. Joseph, Arsalan Tavakoli, and Ion Stoica. 2008. A Policy-aware Switching
Layer for Data Centers. In ACM SIGCOMM.
[45] Marc Juarez, Mohsen Imani, Mike Perry, and Claudia Diaz. 2016. Toward an
Efficient Website Fingerprinting Defense. In European Symposium on Research in
Computer Security (ESORICS).
[46] Sheharbano Khattak, Mobin Javed, Philip D. Anderson, and Vern Paxson. 2013.
Towards Illuminating a Censorship Monitor’s Model to Facilitate Evasion. In
USENIX Workshop on Free and Open Communications on the Internet (FOCI).
[47] Hyojoon Kim, Joshua Reich, Arpit Gupta, Muhammad Shahbaz, Nick Feamster,
and Russ Clark. 2015. Kinetic: Verifiable Dynamic Network Control. In Symposium
on Networked Systems Design and Implementation (NSDI).
[48] Seong Min Kim, Juhyeng Han, Jaehyeong Ha, Taesoo Kim, and Dongsu Han. 2017.
Enhancing Security and Privacy of Tor’s Ecosystem by Using Trusted Execution
Environments. In Symposium on Networked Systems Design and Implementation
(NSDI).
833
[49] Katharina Kohls, Kai Jansen, David Rupprecht, Thorsten Holz, and Christina
Pöpper. 2019. On the Challenges of Geographical Avoidance for Tor. In Network
and Distributed System Security Symposium (NDSS).
[50] Albert Kwon, Mashael AlSabah, David Lazar, Marc Dacier, and Srinivas Devadas.
2015. Circuit Fingerprinting Attacks: Passive Deanonymization of Tor Hidden
Services. In USENIX Annual Technical Conference.
[51] Dave Levin, Youndo Lee, Luke Valenta, Zhihao Li, Victoria Lai, Cristian Lumezanu,
Neil Spring, and Bobby Bhattacharjee. 2015. Alibi Routing. In ACM SIGCOMM.
[52] Zhihao Li, Stephen Herwig, and Dave Levin. 2017. DeTor: Provably Avoiding
Geographic Regions in Tor. In USENIX Security Symposium.
[53] D.J.C. MacKay. 2005. Fountain codes. IEEE Proceedings-Communications 152, 6
(Dec. 2005).
[54] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V. Rozas, Hisham Shafi,
Vedvyas Shanbhogue, and Uday R. Savagaonkar. 2013. Innovative instructions
and software model for isolated execution. In International Workshop on Hardware
and Architectural Support for Security and Privacy (HASP).
[55] Stephen J. Murdoch and George Danezis. 2005. Low-cost traffic analysis of Tor.
In USENIX Security Symposium.
[56] Steven J. Murdoch and Piotr Zieklński. 2007. Sampled Traffic Analysis by Internet-
Exchange-Level Adversaries. In International Workshop on Privacy Enhancing
Technologies.
[57] David Naylor, Kyle Schomp, Matteo Varvello, Ilias Leontiadis, Jeremy Blackburn,
Diego Lopez, Konstantina Papagiannaki, Pablo Rodriguez Rodriguez, and Peter
Steenkiste. 2015. Multi-Context TLS (mcTLS): Enabling Secure In-Network
Functionality in TLS. In ACM SIGCOMM.
[58] ninequestions [n. d.]. Nine Questions about Hidden Services. https://blog.
torproject.org/nine-questions-about-hidden-services. ([n. d.]).
[59] onionbalance [n. d.]. OnionBalance. https://onionbalance.readthedocs.io/en/latest/.
([n. d.]).
[60] Lasse Øverlier and Paul Syverson. 2006. Valet Services: Improving Hidden Servers
with a Personal Touch. In PETS.
[61] Andriy Panchenko and Johannes Renner. 2009. Path Selection Metrics for
Performance-Improved Onion Routing. In Symposium on Applications and the
Internet (SAINT).
[62] Rishabh Poddar, Chang Lan, Raluca Ada Popa, and Sylvia Ratnasamy. 2018.
SafeBricks: Shielding Network Functions in the Cloud. In Symposium on Net-
worked Systems Design and Implementation (NSDI).
[63] Matthew Prince. [n. d.]. The Trouble with Tor.
cloudflare.com/the-trouble-with-tor/.
([n. d.]). https://blog.
[64] prop305 [n. d.]. Tor spec: ESTABLISH_INTRO Cell DoS Defense Extension.
https://gitweb.torproject.org/torspec.git/tree/proposals/
305-establish-intro-dos-defense-extention.txt. ([n. d.]).
[65] Reporters Without Borders. 2013.
Enemies of the Internet 2013, Re-
port. http://surveillance.rsf.org/en/wp-content/uploads/sites/
2/2013/03/enemies-of-the-internet_2013.pdf. (March 2013).
[66] Florentin Rochet, Olivier Bonaventure, and Olivier Pereira. 2019. Flexible Anony-
mous Network. In Workshop on Hot Topics in Privacy Enhancing Technologies
(HotPETs).
[67] Max Schuchard, John Geddes, Christopher Thompson, and Nicholas Hopper. 2012.
Routing Around Decoys. In ACM Conference on Computer and Communications
Security (CCS).
[68] sgx-patch [n. d.].
L1 Terminal Fault.
https://software.intel.com/
security-software-guidance/software-guidance/l1-terminal-
fault. ([n. d.]).
[69] Micah Sherr, Matt Blaze, and Boon Thau Loo. 2009. Scalable Link-based Relay
Selection for Anonymous Routing. In Privacy Enhancing Technologies Symposium
(PETS).
[70] Justine Sherry, Shaddi Hasan, Colin Scott, Arvind Krishnamurthy, Sylvia Rat-
nasamy, and Vyas Sekar. 2012. Making Middleboxes Someone Else’s Problem:
Network Processing as a Cloud Service. In ACM SIGCOMM.
[71] Justine Sherry, Chang Lan, Raluca Ada Popa, and Sylvia Ratnasamy. 2015. Blind-
Box: Deep Packet Inspection over Encrypted Traffic. In ACM SIGCOMM.
[72] Seungwon Shin, Phillip A. Porras, Vinod Yegneswaran, Martin W. Fong, Guofei
Gu, and Mabry Tyson. 2013. FRESCO: Modular Composable Security Services
for Software-Defined Networks.. In Network and Distributed System Security
Symposium (NDSS).
[73] Payap Sirinam, Mohsen Imani, Marc Juarez, and Matthew Wright. 2018. Deep Fin-
gerprinting: Undermining Website Fingerprinting Defenses with Deep Learning.
In ACM Conference on Computer and Communications Security (CCS).
[74] R. Soule, S. Basu, P. J. Marandi, F. Pedone, R. Kleinberg, E. G.Sirer, and N. Foster.
2014. Merlin:A Language for Provisioning Network Resources. In ACM Conference
on emerging Networking EXperiments and Technologies (CoNEXT).
[75] Stem Controller Library. [n. d.]. https://stem.torproject.org. ([n. d.]).
[76] Ceysun Sucu. 2015. Tor: Hidden Service Scaling. University College London MSc
[77] Yixin Sun, Anne Edmundson, Laurent Vanbever, Oscar Li, Jennifer Rexford, Mung
Chiang, and Prateek Mittal. 2015. RAPTOR: Routing Attacks on Privacy in Tor.
In USENIX Security Symposium.
Thesis. (2015).
[78] Tor: Hidden Service Protocol [n. d.]. Tor: Hidden Service Protocol. https:
//www.torproject.org/docs/hidden-services.html.en. ([n. d.]).
[79] Bohdan Trach, Alfred Krohmer, Franz Gregor, Sergei Arnautov, Pramod Bhato-
tia, and Christof Fetzer. 2018. ShieldBox: Secure Middleboxes using Shielded
Execution. In Symposium on SDR Research (SOSR).
[80] Chia-Che Tsai, Donald E. Porter, and Mona Vij. 2017. Graphene-SGX: A Practical
Library OS for Unmodified Applications on SGX. In USENIX Annual Technical
Conference.
[81] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Thomas F Wenisch, Yuval Yarom, and Raoul Strackx.
2018. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient
Out-of-Order Execution. In USENIX Security Symposium.
[82] Tao Wang, Xiang Cai, Rishab Nithyanand, Rob Johnson, and Ian Goldberg. 2014.
Effective Attacks and Provable Defenses for Website Fingerprinting. In USENIX
Security Symposium.
[83] Tao Wang and Ian Goldberg. 2013. Improved Website Fingerprinting in Tor. In
Workshop on Privacy in the Electronic Society (WPES).
[84] Tao Wang and Ian Goldberg. 2017. Walkie-Talkie: An Efficient Defense Against
Passive Website Fingerprinting Attacks. In USENIX Security Symposium.
[85] Zhaoguang Wang, Zhiyun Qian, Qiang Xu, Zhuoqing Mao, and Ming Zhang.
2011. An untold story of middleboxes in cellular networks. In ACM SIGCOMM.
[86] Philipp Winter and Stefan Lindskog. 2012. How the Great Firewall of China
is Blocking Tor. In USENIX Workshop on Free and Open Communications on the
Internet (FOCI).
[87] Lei Yang and Fengjun Li. 2015. mTor: A multipath Tor routing beyond bandwidth
throttling. In IEEE Conference on Communications and Network Security (CNS).
[88] Xiaowei Yang, David Wetherall, and Thomas Anderson. 2008. TVA: A DoS-
limiting network architecture. Networking, IEEE/ACM Transactions on 16, 6
(2008), 1267–1280.
Appendices are supporting material that has not been peer-
reviewed.
A EXAMPLE CODE
This appendix contains sample code of the Browser function. This
and other example functions are provided in our public code repos-
itory, available at https://bento.cs.umd.edu.
# Fetch c o n t e n t s of site
body = r e q u e s t s . get ( url , timeout =1) . content
# C o m p r e s s c o n t e n t s
c o m p r e s s e d = zlib . c o m p r e s s ( body )
# Pad to nearest m u l t i p l e of ' padding '
final = c o m p r e s s e d
if padding - len ( final ) > 0:
1 def browser ( url , padding ) :
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
final = final +
final = final +
else :
( os . urandom ( padding - len ( final ) ) )
( os . urandom (( len ( final ) + padding ) % padding ) )
api . send ( final )
Listing 1: Python implementation of browser function.
B ARTIFACT APPENDIX
Abstract
Our certified artifact consists of prototype implementations for
the Bento server, as well as clients and functions that showcase
various use cases. The server may run client functions either in
normal userland or within an SGX enclave, based on command-line
arguments.
Scope
The provided artifact allows one to setup and run their own Bento
server and clients. As such, one can validate all experiments from
Sections 7 and 8. The software specific to each evaluation is located
in the experiments directory. Each evaluation has a corresponding
README:
• Browser – upload and execute a function that fetches a web-
• Cover – upload and execute a function that fetches a web-
• LoadBalancer – run a function that acts as a load balancer
• WebsiteFingerprinting – The deep fingerprinting attack [73];
used to evaluate the effectiveness of Browser’s padding scheme.
page, generating coverage traffic in the process.
page, padding the response with dummy bytes.
for a hidden service.
Additionally, once they have setup a client and server, a user can
also develop and write their own Bento functions!
Contents
Our artifact contains four primary pieces: 1) the source for the
client and server packages, 2) a set of self-contained projects and
experiments using Bento (these correspond to the experiments in
the paper), 3) a set of simple tests and sample functions, designed to
get the user started and introduce them to both running functions
834
and writing their own, 4) thorough documentation, including the
source for the Bento website, which contains detailed documenta-
tion for setting up and running a client and server, as well as the
various functions described in the paper.
Hosting
Our verified code can be found at
https://github.com/breakerspace/bento, commit 1de0d46.
Requirements
We developed and successfully tested our Bento client and server
code on Ubuntu 18.04 with Python 3.6. Our development machine
was an Intel NUC (NUC10i7FNH).
Our Bento server optionally requires access to SGX-capable hard-
ware. For running functions within an SGX enclave, we use the
Graphene-SGX LibOS available at https://github.com/oscarlab/
graphene, version 1.1, commit 73b774f. Additionally, we use the
SGX Linux kernel module from https://github.com/intel/
linux-sgx-driver, version 2.11.0, commit 2d2b795, and the SGX
platform software (that is, the SDK and PSW) from https://
github.com/intel/linux-sgx, version 2.9.1, commit fdc9b33.
835