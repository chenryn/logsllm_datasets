some local access on the host. A remote exploit does
not have this requirement. Two most common exploit
consequences are privilege escalation and denial of ser-
vice. Currently all OVAL deﬁnitions have corresponding
ICAT entries (the two can be cross-referenced by CVE
Id). It would be nice if OVAL and ICAT be merged into
a single database that provides both information.
116
14th USENIX Security Symposium
USENIX Association
We converted the above classiﬁcation in the ICAT data-
base into Datalog clauses such as
vulProperty(’CVE-2004-00495’,
localExploit, privEscalation).
4 The MulVAL Reasoning System
The reasoning rules in MulVAL are declared as Datalog
clauses. A literal, p(t1, . . . , tk) is a predicate applied to
its arguments, each of which is either a constant or a vari-
able. In the formalism of Datalog, a variable is an iden-
tiﬁer that starts with an upper-case letter. A constant is
one that starts with a lower-case letter. Let L0, . . . , Ln be
literals, a sentence in MulVAL is represented as a Horn
clause:
L0 :- L1, . . . , Ln
Semantically, it means if L1, . . . , Ln are true then L0
is also true. The left-hand side is called the head and
the right-hand side is called the body. A clause with an
empty body is called a fact. A clause with a nonempty
body is called a rule.
4.1 Reasoning rules
MulVAL reasoning rules specify semantics of different
kinds of exploits, compromise propagation, and multi-
hop network access. The MulVAL rules are carefully de-
signed so that information about speciﬁc vulnerabilities
are factored out into the data generated from OVAL and
ICAT. The interaction rules characterize general attack
methodologies (such as “Trojan Horse client program”),
not speciﬁc vulnerabilities. Thus the rules do not need
to be changed frequently, even if new vulnerabilities are
reported frequently.
4.1.1 Exploit rules
We introduce several predicates that are used in the ex-
ploit rules. execCode(P,H,UserPriv) indicates that prin-
cipal P can execute arbitrary code with privilege UserPriv
on machine H. netAccess(P, H, Protocol, Port) in-
dicates principal P can send packets to Port on machine
H through Protocol.
The effect classiﬁcation of a vulnerability indicates how
it can be exploited and what is the consequence. We have
already seen a rule for remote exploit of a service pro-
gram in section 2. Following is the exploit rule for re-
mote exploit of a client program.
execCode(Attacker, Host, Priv) :-
vulExists(Host, VulID, Program),
vulProperty(VulID, remoteExploit,
privEscalation),
clientProgram(Host, Program, Priv),
malicious(Attacker).
The body of the rule speciﬁes that 1) the Program is vul-
nerable to a remote exploit; 2) the Program is client soft-
ware with privilege Priv3; 3) the Attacker is some prin-
cipal that originates from a part of the network where
malicious users may exist. The consequence of the ex-
ploit is that the attacker can execute arbitrary code with
privilege Priv.
The rule for the exploit of a local privilege escalation
vulnerability is as follows:
execCode(Attacker, Host, Owner) :-
vulExists(Host, VulID, Prog),
vulProperty(VulID, localExploit,
privEscalation),
setuidProgram(Host, Prog, Owner),
execCode(Attacker, Host, SomePriv),
malicious(Attacker).
For this exploit, the precondition execCode requires that
an attacker ﬁrst have some access to the machine Host.
The consequence of the exploit is that the attacker can
gain privilege of the owner of a setuid program.
In our model, the Linux kernel is both a network ser-
vice running as root, and a setuid program owned by
root. That is, the consequence of exploiting a privilege-
escalation bug in kernel (either local or remote) will re-
sult in a root compromise.
Currently we do not have exploit rules for vulnerabilities
whose exploit consequence is conﬁdentiality loss or in-
tegrity loss. The ICAT database does not provide precise
information as to what conﬁdential information may be
leaked to an attacker and what information on the system
may be modiﬁed by an attacker. ICAT statistics shows
that 84% of vulnerabilities are labeled with privilege-
escalation or only labeled with denial-of-service, the two
kinds of exploits modeled in MulVAL. It seems in reality
privilege-escalation bugs are the most common target for
exploit in a multistage attack.
USENIX Association
14th USENIX Security Symposium
117
4.1.2 Compromise propagation
One of the important features of MulVAL is the ability
to reason about multistage attacks. After an exploit is
successfully applied, the reasoning engine must discover
how the attacker can further compromise a system.
For example, the following rule says if an attacker P can
access machine H with Owner’s privilege, then he can
have arbitrary access to ﬁles owned by Owner.
accessFile(P, H, Access, Path) :-
execCode(P, H, Owner),
filePath(H, Owner, Path).
On the other hand, if an attacker can modify ﬁles under
Owner’s directory, he can gain privilege of Owner. That
is because a Trojan horse can be injected by modiﬁed
execution binaries, which Owner might then execute:
execCode(Attacker, H, Owner) :-
accessFile(Attacker, H, write, Path),
filePath(H, Owner, Path),
malicious(Attacker).
Network ﬁle systems Some multistage attacks also ex-
ploit normal software behaviors. For example, through
talking to system administrators we found that the NFS
ﬁle-sharing system is widely used in many organizations
and has contributed to many intrusions. One scenario is
that an attacker gets root access on a machine that can
talk to an NFS server. Depending on the ﬁle server’s con-
ﬁguration, the attacker may be able to access any ﬁle on
the server.
accessFile(P, Server, Access, Path) :-
malicious(P),
execCode(P, Client, root),
nfsExportInfo(Server, Path, Access, Client),
hacl(Client, Server, rpc, 100003)),
hacl(Client, Server, rpc, 100003) is an entry in host
access control list (section 4.2), which speciﬁes machine
Client can talk to Server through NFS, an RPC (remote
procedure call) protocol with number 100003.
4.1.3 Multihop network access
netAccess(P, H2, Protocol, Port) :-
execCode(P, H1, Priv),
hacl(H1, H2, Protocol, Port).
If a principal P has access to machine H1 under some
privilege and the network allows H1 to access H2 through
Protocol and Port, then the principal can access host H2
through the protocol and port. This allows for reasoning
about multihost attacks, where an attacker ﬁrst gains ac-
cess on one machine inside a network and launches an
attack from there. Predicate hacl stands for an entry in
the host access control list (HACL).
4.2 Host Access Control List
A host access control list speciﬁes all accesses between
hosts that are allowed by the network. It consists of a
collection of entries of the following form:
hacl(Source, Destination, Protocol, DestPort).
Packet ﬂow is controlled by ﬁrewalls, routers, switches,
and other aspects of network topology. HACL is an ab-
straction of the effects of the conﬁguration of these el-
ements. In dynamic environments involving the use of
Dynamic Host Conﬁguration Protocol (especially in wire-
less networks), ﬁrewall rules can be very complex and
can be affected by the status of the network, the ability
of users to authenticate to a central authentication server,
etc. In such environments, it is infeasible to ask the sys-
tem administrator to manually provide all HACL rules.
We envision that an automatic tool such as the Smart
Firewall [4] can provide the HACL list automatically for
our analysis.
4.3 Policy speciﬁcation
The security policy speciﬁes which principal can access
what data. Each principal and data is given a symbolic
name, which is mapped to a concrete entity by the bind-
ing information discussed in section 4.4. Each policy
statement is of the form
allow(Principal, Access, Data).
The arguments can be either constants or variables (vari-
ables start with a capital letter and can match any con-
stant). Following is an example policy:
allow(Everyone, read, webPages).
allow(user, Access, projectPlan).
allow(sysAdmin, Access, Data).
118
14th USENIX Security Symposium
USENIX Association
The policy says anybody can read webPages, user can
have arbitrary access to projectPlan. And sysAdmin can
have arbitrary access to arbitrary data. Anything not ex-
plicitly allowed is prohibited.
The policy language presented in this section is quite
simple and easy to make right. However, the MulVAL
reasoning system can handle more complex policies as
well (see section 4.6).
4.4 Binding information
Principal binding maps a principal symbol to its user ac-
counts on network hosts. For example:
hasAccount(user, projectPC, userAccount).
hasAccount(sysAdmin, webServer, root).
Data binding maps a data symbol to a path on a machine.
For example:
dataBind(projectPlan,workstation,’/home’).
dataBind(webPages, webServer, ’/www’).
The binding information is provided manually.
4.5 Algorithm
In the policy checking phase, the data access tuples out-
put from the attack simulation phase are compared with
the given security policy. If an access is not allowed by
the policy, a violation is detected. The following Prolog
program performs policy checking.
policyViolation(P, Access, Data) :-
access(P, Access, Data),
not allow(P, Access, Data).
This is not a pure Datalog program because it uses nega-
tion. But the use of negation in this program has a well-
founded semantics [10]. The complexity of a Datalog
program with well-founded negation is polynomial in the
size of input [6]. In practice the policy checking algo-
rithm runs very efﬁciently in XSB (see section 7).
4.6 More complex policies
The two-phase separation in the MulVAL algorithm al-
lows us to use richer policy languages than Datalog with-
out affecting the complexity of the attack simulation phase.
The MulVAL reasoning system supports general Prolog
as the policy language. Should one need even richer pol-
icy speciﬁcation, the attack simulation can still be per-
formed efﬁciently and the resulting data access tuples
can be sent to a policy resolver, which can handle the
richer policy speciﬁcation efﬁciently.
The analysis algorithm is divided into two phases: attack
simulation and policy checking. In the attack simulation
phase, all possible data accesses that can result from mul-
tistage, multihost attacks are derived. This is achieved by
the following Datalog program.
No policy? Because the attack simulation is not guided
by or dependent on the security policy, it is possible to
use MulVAL without a security policy; the system ad-
ministrator may ﬁnd useful the raw report of who can
access what. However, the policy is useful in ﬁltering
undesirable accesses from harmless accesses.
access(P, Access, Data) :-
dataBind(Data, H, Path),
accessFile(P, H, Access, Path).
5 Examples
That is, if Data is stored on machine H under path Path,
and principal P can access ﬁles under the path, then P can
access Data. The attack simulation happens in the deriva-
tion of accessFile, which involves the Datalog interac-
tion rules and data tuple inputs from various components
of MulVAL. For a Datalog program, there are at most
polynomial number of facts that can be derived. Since
XSB’s tabling mechanism guarantees each fact is com-
puted only once, the attack simulation phase is polyno-
mial.
5.1 A small real-world example
We ran our tool on a small network used by seven hun-
dred users. We analyzed a subset of the network that
contains only machines managed by the system adminis-
trators.4 Our tool found a violation of policy because of
a vulnerability. The system administrators subsequently
patched the bug.
USENIX Association
14th USENIX Security Symposium
119
internet
fw1
dmz
webServer
fw2
webPages
binaries
fileServer
internal
projectPlan
workStation
nfsMount(workStation, ’/usr/local/share’,
fileServer, ’/export/share’).
The fileServer serves ﬁles for the webServer and the
workStation through the NFS protocol. There are actu-
ally many machines represented by workStation. They
are managed by the administrators and run the same soft-
ware conﬁguration. To avoid the hassle of installing each
application on each of the machines separately, the ad-
ministrators maintain a collection of application binaries
under /export/share on fileServer so that any change
like recompilation of an application program needs to
be done only once. These binaries are exported through
NFS to the workStation. The directory /export/www is
exported to webServer.
Figure 2: Example
Data binding.
Network topology. The topology of the network is very
similar to the one in Figure 2. There are three zones
(internet, dmz and internal) separated by two ﬁrewalls
(fw1 and fw2). The administrators manage the webserver,
the workStation and the fileserver. The users have ac-
cess to the public server workStation which they use for
their computing needs. The host access control list for
this network is:
hacl(internet, webServer, tcp, 80).
hacl(webServer, fileServer, rpc, 100003).
hacl(webServer, fileServer, rpc, 100005).
hacl(fileServer, AnyHost,
AnyProtocol, AnyPort).
hacl(workStation, AnyHost,
AnyProtocol, AnyPort).
hacl(H, H, AnyProtocol, AnyPort).
Machine conﬁguration The following Datalog tuples
describe the conﬁguration information of the three ma-
chines.
networkService(webServer , httpd,
tcp , 80 , apache).
nfsMount(webServer, ’/www’,
fileServer, ’/export/www’).
networkService(fileServer, nfsd,
rpc, 100003, root).
networkService(fileServer, mountd,
nfsExport(fileServer, ’/export/share’,
rpc, 100005, root).
read, workStation).
nfsExport(fileServer, ’/export/www’,
read, webServer).
dataBind(projectplan, workStation, ’/home’).
dataBind(webPages, webServer, ’/www’).
Principals. The principal sysAdmin manages the ma-
chines with user name root. Since all the users are treated
equally, we model one of them as principal user. user
uses the workStation with user name userAccount. For
this organization, the primary worry is a remote attacker
launching an attack from outside the network. The at-
tackers are modeled by a single principal attacker who
uses the machine internet and has complete control of
it. The Datalog tuples for principal bindings are:
hasAccount(user, workStation, userAccount).
hasAccount(sysAdmin, workStation, root).
hasAccount(sysAdmin, webServer, root).
hasAccount(sysAdmin, fileServer, root).
hasAccount(attacker, internet, root).
malicious(attacker).
Security policy The administrators need to ensure that
the conﬁdentiality and the integrity of users’ ﬁles will not
be compromised by an attacker. Thus the policy is
allow(Anyone, read, webPages).
allow(user, AnyAccess, projectPlan).
allow(sysAdmin, AnyAccess, Data).
120
14th USENIX Security Symposium
USENIX Association
Results We ran the MulVAL scanner on each of the
machines. The interesting part of the output was that
workStation had the following vulnerabilities:
vulExists(workStation, ’CAN-2004-0427’, kernel).
vulExists(workStation, ’CAN-2004-0554’, kernel).
vulExists(workStation, ’CAN-2004-0495’, kernel).
vulExists(workStation, ’CVE-2002-1363’, libpng).
The MulVAL reasoning engine then analyzed this output
in combination with the other inputs described above.
The tool did indeed ﬁnd a policy violation because of
the bug CVE-2002-1363 — a remotely exploitable bug in
the libpng library. A reasoning rule for remote exploit
derives that the workStation machine can be compro-
mised. Thus the projectPlan data stored on it can be
accessed by the attacker, violating the policy. Our sys-