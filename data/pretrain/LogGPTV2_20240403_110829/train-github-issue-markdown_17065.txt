I found what looks like a bug/oversight.
    jjulia> d = Dict(i=>rand() for i in 1:3)
    Dict{Int64, Float64} with 3 entries:
      2 => 0.192129
      3 => 0.340718
      1 => 0.154868
    julia> v = [d,d]
    2-element Vector{Dict{Int64, Float64}}:
     Dict(2 => 0.19212863767897548, 3 => 0.34071840174647483, 1 => 0.15486801172387077)
     Dict(2 => 0.19212863767897548, 3 => 0.34071840174647483, 1 => 0.15486801172387077)
    julia> union(keys.(v)...)
    Set{Int64} with 3 elements:
      2
      3
      1
    julia> union(keys.(v[1:1])...)
    ERROR: MethodError: no method matching copy(::Base.KeySet{Int64, Dict{Int64, Float64}})
    Closest candidates are:
      copy(::Union{SubArray{T, N, var"#s5", I, L} where {var"#s5"<:(PooledArrays.PooledArray{T, R, N, RA} where {N, RA}), I, L}, PooledArrays.PooledArray{T, R, N, RA} where RA} where {T, N, R}) at /home/joe/.julia/packages/PooledArrays/CV8kA/src/PooledArrays.jl:212
      copy(::SubArray{var"#s832", var"#s831", var"#s830", I, L} where {var"#s832", var"#s831", var"#s830"<:Union{SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}, I, L}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:720
      copy(::SubArray) at subarray.jl:70
      ...
    Stacktrace:
     [1] union(s::Base.KeySet{Int64, Dict{Int64, Float64}})
       @ Base ./abstractset.jl:49
     [2] top-level scope
       @ REPL[30]:1
When I use `union(Set.(keys.(v[1:1))...)` it works as expected.