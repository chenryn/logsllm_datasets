Definition 2. The key-evolving signature scheme F BSS
is (t, qs, qu, ε) forward-secure if no probabilistic polynomial
time adversary has ε-advantage to forge a valid signature at
past time period j
 j) within running in time t after
qs signing queries and qu update queries.
(j
∗
∗
A key evolving signature scheme is called bilateral-secure
if it is both forward-secure and backward-secure. Formally,
Definition 4. Let AdvFBA denote the advantage of an
algorithm A. We say that a key evolving signature scheme
F BSS is (t, qs, qu, ε) bilateral-secure if no probabilistic
polynomial time adversary has advantage ε to forge a valid
signature at any time period j
except the time period of
breaking in within running in time t after qs signing queries
and qu update queries.
∗
4. CONSTRUCTION
4.1 Basic Idea
It is instructive to ﬁrst understand the intuition behind
our construction of forward secure and backward secure sig-
nature scheme (FBSS). To achieve forward security, we e-
volve the secret keys in a probabilistic manner. When the
current key is exposed, the attacker cannot obtain any useful
information of the past secret keys and forge a fake signature
of the past time. To achieve backward security, we split the
secret parameter into two secret keys and keep them in dif-
ferent ways. As long as the attacker cannot comprise these
two secret keys at the same time, then he cannot update the
two secret keys to that of the next time period and forge a
fake signature of the future time, which ensure the backward
security.
Furthermore, to achieve unbounded time periods, we use
a novel key-evolving structure to support unbounded key
updating. Existing forward-secure signature schemes usu-
ally use linear structure [5] or binary tree structure [9] to
evolve the key, and the number of time periods is thus con-
trolled by the predeﬁned parameter T (the number of time
periods) or l (the hight of the tree). In our construction, we
employ a hub-and-spoke structure to evolve the key. Specif-
ically, the signer generates a root key at the beginning of
the key generation. And then chooses two secrets that sat-
isfy a speciﬁed relation between the root key and stores the
two secrets separately. After updating the key at each time
period, the speciﬁed relation always holds and in the veri-
fy phase, the veriﬁer not only check the correctness of the
signature but also validate the speciﬁed relation is or is not
holds. In this manner, the number of time periods in our
construction is not limited by a predeﬁned parameters and
it can be unbounded large.
4.2 Detailed Scheme
We identify three roles in our construction: Alice for sign-
ing message, Bob for verifying the validity of signatures, and
the k + 1 players Pi, i = 1, 2,··· , k + 1, for maintaining one
part of the secret key in a distributed manner and updat-
ing the signing key at each time period. The notations used
in the following construction are given in Table 1 and the
ﬂow chart of our design is illustrated in Figure 1. Rough-
ly speaking, the proposed signature scheme splits the secret
parameters into two parts: one xj
1 for signing message at
time period j stored on the signer’s side and the other one
xj
2 is distributed to k+1 players using a secret sharing mech-
anism for updating the key xj
1 periodically after each time
period. We assume that all shares of k + 1 players will not
be comprised at the same time. Anytime for signing a mes-
sage, the signer ﬁrst runs CheckKey to verify the validity of
the key and then signs the message using a bilinear map. In
the veriﬁcation stage, the veriﬁer validates the signature is
signed by the eﬀective signing key xj
1 at time period j by
the public key.
Table 1: Notations used in our scheme.
Notations De(cid:12)nitions
G1, G2, q
g
H1(·)
H2(·)
xj
1
xj
2
gj
Yj
SKj
P Kj
fj(i)
two groups for bilinear map of prime order q.
the generator of group G1.
a map-to-point hash function, which maps a
message from message space to a element in
group G1.
a map-to-point hash function, which maps a
integer to a element in G1.
the ﬁrst part secret information serving as
the signing key.
the second part secret information serving as
the updating key and stored in a distributed
manner.
deﬁned as gj = H2(j) at each time period j,
for j = 0, 1,··· .
deﬁned as Yj = g
for j = 0, 1,··· , and it will not reveal
information about xj
2.
the secret key at time period j and stored
at local.
the public key at time period j and stored
at veriﬁer’s side.
the share of the i-th player pi at time
period j.
xj
j at each time period j
2
We now describe the detailed construction of our bilateral-
secure signature scheme FBSS. Speciﬁcally, it works as fol-
lows:
• FBSS.KeyGen(1κ):
1. Generate groups G1, G2 of some prime order q
and an admissible pairing e : G1 × G1 → G2 by
running IG(1κ). Let g be the generator of G1.
{0, 1}∗ → G1 and H2 : Zq → G1.
x · (x0
−1, g0 = H2(0).
1)
q \ {1} randomly and set x0
2. Chooses two cryptographic hash functions H1 :
3. Select x, x0
1 ← Z∗
2 =
526k+1∏
i=1
(
)
4. Construct a degree-k polynomial
f0(t) = aktk + ··· + a1t + x0
2
and then send f0(i) to i-th player Pi, for i =
1, 2,··· , k + 1.
5. Compute Y0 =
Y0,i
1, where
Y0,i = (gf0(i)
0
)(−1)i(cid:0)1
k+1
i
for i = 1, 2,··· , k + 1.
6. Set public key as P K0 = ⟨gx, gx
1, Y0⟩. Finally, delete x and x0
⟨x0
0⟩ and SK0 =
2 immediately.
• FBSS.CheckKey(j, SKj, P Kj):
1. Parse SKj as (xj
1, Yj) and compute the hash value
gj = H2(j).
2. Check whether e(gxj
j ) holds. Re-
turn true if the equation holds, otherwise return
false.
1 , Yj) = e(g, gx
• FBSS.Update(j, SKj):
1. Parse SKj as (xj
1, Yj).
2. Share a secret s ∈ Z∗
3. Compute xj+1
1 = xj
1
the share with fj+1(i) = fj(i) · s
)(−1)i(cid:0)1
s the new Yj+1,i = (gfj+1(i)
gj+1 = H2(j + 1).
j+1
(
q \ {1} with all k + 1 players.
· s. Each player Pi updates
−1 and send-
k+1∏
, where
)
k+1
i
4. Calculate Yj+1 =
i=1
, Yj+1⟩, P Kj+1 = ⟨gx, Y
⟨xj+1
s immediately.
1
Yj+1,i and sets SKj+1 =
⟩. Finally, delete
xj+1
j+1
1
In fact, by the correctness analysis in Theorem 1 we
have that P Kj+1 = g
= gx
j+1, where
2
1
·xj+1
xj+1
j+1
k+1∑
(−1)i−1
(
)
xj+1
2 =
k+1
i
fj+1(i).
Figure 1: The (cid:13)ow chart of our scheme FBSS.
i=1
• FBSS.Sign(j, SKj, M ):
1. Check whether the secret key SKj is the valid key
for time period j. If this test fails, output ⊥ and
halt. Otherwise continue.
2. Calculate the hash m ← H1(M ), m ∈ G1.
3. The signature of M at time period j is ⟨j, σ⟩,
where σ = ⟨mxj
1 , Yj⟩.
• FBSS.Verify(P Kj, M,⟨j, σ⟩):.
1From Lagrange interpolating formula, we have that
k+1∑
(−1)i−1
(
)
k+1
i
f0(i)
x0
2 = f0(0) =
i=1
and thus we obtain that Y0 = gx0
0 .
2
Time period 0Time period jAlicePlayersBobKeyGenShares of x20Public parametersPK0SK0UpdateShare a secretsUpdate sharesAuxiliary information of x2jComputeSK0andPK0PKjSKjCompute SKjandPKjCheckKeyCheck key locallySignMCalculate the signatureMand signatureVerifyMand signatureCheck the validity of the signatureTime period j+15271. Parse σ as ⟨mxj
1 , Yj⟩, calculate the hash m ←
H1(M ), and ensure that the following two equa-
tions holds, where gx
j is calculated from public key
P Kj.
and
e(mxj
1 , Yj) ?= e(m, gx
j )
e(g, gx
j ) ?= e(gx, gj)
(2)
(3)
2. Return 1 if Equation (2) and Equation (3) both
hold, otherwise return 0.
5. CORRECTNESS AND SECURITY ANAL-
YSIS
5.1 Correctness
The correctness of the above scheme is justiﬁed by the
following theorem.
Theorem 1. The proposed FBSS signature scheme is cor-
rect.
Proof. Our proof proceeds in two steps: the ﬁrst step
shows that at each time period j, equation
(4)
always holds, where xj
2 is deﬁned as following
· xj
xj
1
2 = x
k+1∑
(−1)i−1
(
)
xj
2 =
k+1
i
fj(i)
i=1
and fj(i) denotes the share of the i-th player at time pe-
riod j; the second argues that the veriﬁcation procedure is
correct.
period j for j = 0, 1,··· by mathematical induction.
Step-1: We show the Equation (4) holds at each time
When j = 0, the following two equation hold clearly from
the key generation algorithm.
and
x0
2 =
Suppose the Equation (4) holds at time period j, then after
running the key update algorithm, we have that
xj+1
1
· xj+1
2
= xj+1
1
1 · x0
x0
2 = x
(
)
(−1)i−1
k+1
i
f0(i)
k+1∑
i=1
)
k+1
(
k+1∑
(−1)i−1
· (
k+1∑
(
(−1)i−1
(
)
i=1
i=1
i
(−1)i−1
k+1
i
· s) · (
k+1∑
· (
· xj
i=1
2
= (xj
1
= xj
1
= xj
1
= x
fj+1(i))
)
fj(i)) · s
k+1
i
−1
fj(i))
where the second ’=’ holds since that fj+1(i) = fj(i) · s
−1
·
from the update procedure. Consequently, the equation xj
1
xj
2 = x always holds at any time period.
Step-2: We now show the correctness of the veriﬁcation