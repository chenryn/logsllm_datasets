它是一个全面的、企业应用开发一站式的解决方案，贯穿表现层、业务层、持久层。但是 Spring
仍然可以和其他的框架无缝整合。
6.1.1. Spring 特点
6.1.1.1. 轻量级
6.1.1.2. 控制反转
6.1.1.3. 面向切面
6.1.1.4. 容器
6.1.1.5. 框架集合
13/04/2018 Page 116 of 283
6.1.2. Spring 核心组件
6.1.3. Spring 常用模块
13/04/2018 Page 117 of 283
6.1.4. Spring 主要包
6.1.5. Spring 常用注解
bean注入与装配的的方式有很多种，可以通过xml，get set方式，构造函数或者注解等。简单易
用的方式就是使用Spring的注解了，Spring提供了大量的注解方式。
13/04/2018 Page 118 of 283
6.1.6. Spring 第三方结合
13/04/2018 Page 119 of 283
6.1.7. Spring IOC原理
6.1.7.1. 概念
Spring 通过一个配置文件描述 Bean 及 Bean 之间的依赖关系，利用 Java 语言的反射功能实例化
Bean 并建立 Bean 之间的依赖关系。 Spring 的 IoC 容器在完成这些底层工作的基础上，还提供
了 Bean 实例缓存、生命周期管理、 Bean 实例代理、事件发布、资源装载等高级服务。
6.1.7.2. Spring容器高层视图
Spring 启动时读取应用程序提供的Bean配置信息，并在Spring容器中生成一份相应的Bean配
置注册表，然后根据这张注册表实例化 Bean，装配好 Bean 之间的依赖关系，为上层应用提供准
备就绪的运行环境。其中Bean缓存池为HashMap实现
6.1.7.3. IOC容器实现
BeanFactory-框架基础设施
BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身；ApplicationContext 面向使用
Spring 框架的开发者，几乎所有的应用场合我们都直接使用 ApplicationContext 而非底层
的 BeanFactory。
13/04/2018 Page 120 of 283
1.1..1.1.1 BeanDefinitionRegistry注册表
1. Spring 配置文件中每一个节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示，
它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册
BeanDefinition 对象的方法。
1.1..1.1.2 BeanFactory 顶层接口
2. 位于类结构树的顶端 ，它最主要的方法就是 getBean(String beanName)，该方法从容器中
返回特定名称的 Bean，BeanFactory 的功能通过其他的接口得到不断扩展：
1.1..1.1.3 ListableBeanFactory
3. 该接口定义了访问容器中 Bean 基本信息的若干方法，如查看 Bean 的个数、获取某一类型
Bean 的配置名、查看容器中是否包括某一 Bean 等方法；
1.1..1.1.4 HierarchicalBeanFactory父子级联
4. 父子级联 IoC 容器的接口，子容器可以通过接口方法访问父容器； 通过
HierarchicalBeanFactory 接口， Spring 的 IoC 容器可以建立父子层级关联的容器体系，子
容器可以访问父容器中的 Bean，但父容器不能访问子容器的 Bean。Spring 使用父子容器实
现了很多功能，比如在 Spring MVC 中，展现层 Bean 位于一个子容器中，而业务层和持久
层的 Bean 位于父容器中。这样，展现层 Bean 就可以引用业务层和持久层的 Bean，而业务
层和持久层的 Bean 则看不到展现层的 Bean。
1.1..1.1.5 ConfigurableBeanFactory
5. 是一个重要的接口，增强了 IoC 容器的可定制性，它定义了设置类装载器、属性编辑器、容
器初始化后置处理器等方法；
13/04/2018 Page 121 of 283
1.1..1.1.6 AutowireCapableBeanFactory自动装配
6. 定义了将容器中的 Bean 按某种规则（如按名字匹配、按类型匹配等）进行自动装配的方法；
1.1..1.1.7 SingletonBeanRegistry运行期间注册单例Bean
7. 定义了允许在运行期间向容器注册单实例 Bean 的方法；对于单实例（ singleton）的 Bean
来说，BeanFactory会缓存 Bean 实例，所以第二次使用 getBean() 获取 Bean 时将直接从
IoC 容器的缓存中获取 Bean 实例。Spring 在 DefaultSingletonBeanRegistry 类中提供了一
个用于缓存单实例 Bean 的缓存器，它是一个用HashMap 实现的缓存器，单实例的 Bean 以
beanName 为键保存在这个HashMap 中。
1.1..1.1.8 依赖日志框框
8. 在初始化 BeanFactory 时，必须为其提供一种日志框架，比如使用Log4J， 即在类路径下提
供 Log4J 配置文件，这样启动 Spring 容器才不会报错。
ApplicationContext面向开发应用
ApplicationContext 由 BeanFactory 派生而来，提供了更多面向实际应用的功能。
ApplicationContext 继承了 HierarchicalBeanFactory 和 ListableBeanFactory 接口，在此基础
上，还通过多个其他的接口扩展了 BeanFactory 的功能：
1. ClassPathXmlApplicationContext：默认从类路径加载配置文件
13/04/2018 Page 122 of 283
2. FileSystemXmlApplicationContext：默认从文件系统中装载配置文件
3. ApplicationEventPublisher：让容器拥有发布应用上下文事件的功能，包括容器启动事
件、关闭事件等。
4. MessageSource：为应用提供 i18n 国际化消息访问的功能；
5. ResourcePatternResolver ： 所 有 ApplicationContext 实现类都实现了类似于
PathMatchingResourcePatternResolver 的功能，可以通过带前缀的 Ant 风格的资源文
件路径装载 Spring 的配置文件。
6. LifeCycle：该接口是 Spring 2.0 加入的，该接口提供了 start()和 stop()两个方法，主要
用于控制异步处理过程。在具体使用时，该接口同时被 ApplicationContext 实现及具体
Bean 实现， ApplicationContext 会将 start/stop 的信息传递给容器中所有实现了该接
口的 Bean，以达到管理和控制 JMX、任务调度等目的。
7. ConfigurableApplicationContext 扩展于 ApplicationContext，它新增加了两个主要
的方法： refresh()和 close()，让 ApplicationContext 具有启动、刷新和关闭应用上下
文的能力。在应用上下文关闭的情况下调用 refresh()即可启动应用上下文，在已经启动
的状态下，调用 refresh()则清除缓存并重新装载配置信息，而调用 close()则可关闭应用
上下文。
WebApplication体系架构
WebApplicationContext 是专门为 Web 应用准备的，它允许从相对于 Web 根目录的
路径中装载配置文件完成初始化工作。从 WebApplicationContext 中可以获得
ServletContext 的引用，整个 Web 应用上下文对象将作为属性放置到 ServletContext
中，以便 Web 应用环境可以访问 Spring 应用上下文。
6.1.7.4. Spring Bean 作用域
Spring 3 中为 Bean 定义了 5 中作用域，分别为 singleton（单例）、prototype（原型）、
request、session和global session，5种作用域说明如下：
singleton：单例模式（多线程下不安全）
1. singleton：单例模式，Spring IoC 容器中只会存在一个共享的 Bean 实例，无论有多少个
Bean 引用它，始终指向同一对象。该模式在多线程下是不安全的。Singleton 作用域是
Spring中的缺省作用域，也可以显示的将Bean定义为singleton模式，配置为：
13/04/2018 Page 123 of 283
prototype:原型模式每次使用时创建
2. prototype:原型模式，每次通过 Spring容器获取prototype定义的bean时，容器都将创建
一个新的 Bean 实例，每个 Bean 实例都有自己的属性和状态，而singleton 全局只有一个对
象。根据经验，对有状态的bean使用prototype作用域，而对无状态的bean使用singleton
作用域。
Request：一次request一个实例
3. request：在一次 Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会
产生新的Bean，而且该bean仅在当前Http Request内有效,当前Http请求结束，该bean
实例也将会被销毁。
session
4. session：在一次Http Session中，容器会返回该Bean的同一实例。而对不同的Session请
求则会创建新的实例，该 bean 实例仅在当前 Session 内有效。同 Http 请求相同，每一次
session 请求创建新的实例，而不同的实例之间不共享属性，且实例仅在自己的 session 请求
内有效，请求结束，则实例将被销毁。
global Session
5. global Session：在一个全局的 Http Session 中，容器会返回该 Bean 的同一个实例，仅在
使用portlet context时有效。
6.1.7.5. Spring Bean 生命周期
实例化
1. 实例化一个Bean，也就是我们常说的new。
IOC依赖注入
2. 按照Spring上下文对实例化的Bean进行配置，也就是IOC注入。
setBeanName实现
3. 如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)
方法，此处传递的就是Spring配置文件中Bean的id值
BeanFactoryAware实现
4. 如果这个 Bean 已经实现了 BeanFactoryAware 接口，会调用它实现的 setBeanFactory，
setBeanFactory(BeanFactory)传递的是Spring工厂自身（可以用这个方式来获取其它Bean，
只需在Spring配置文件中配置一个普通的Bean就可以）。
13/04/2018 Page 124 of 283
ApplicationContextAware实现
5. 如果这个Bean已经实现了ApplicationContextAware接口，会调用
setApplicationContext(ApplicationContext)方法，传入Spring上下文（同样这个方式也
可以实现步骤4的内容，但比4更好，因为ApplicationContext是BeanFactory的子接
口，有更多的实现方法）
postProcessBeforeInitialization接口实现-初始化预处理
6. 如果这个Bean关联了BeanPostProcessor接口，将会调用
postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用
作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用那个的方法，也可以被应
用于内存或缓存技术。
init-method
7. 如果Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。
postProcessAfterInitialization
8. 如果这个Bean关联了BeanPostProcessor接口，将会调用
postProcessAfterInitialization(Object obj, String s)方法。
注：以上工作完成以后就可以应用这个 Bean了，那这个 Bean是一个Singleton的，所以一
般情况下我们调用同一个id的Bean会是在内容地址相同的实例，当然在Spring配置文件中
也可以配置非Singleton。
Destroy过期自动清理阶段
9. 当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调
用那个其实现的destroy()方法；
destroy-method自配置清理
10. 最后，如果这个Bean 的Spring配置中配置了destroy-method属性，会自动调用其配置的
销毁方法。
13/04/2018 Page 125 of 283
11. bean 标签有两个重要的属性（init-method 和 destroy-method）。用它们你可以自己定制
初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。
6.1.7.6. Spring 依赖注入四种方式
构造器注入
/*带参数，方便利用构造器进行注入*/
public CatDaoImpl(String message){
this. message = message;
}
13/04/2018 Page 126 of 283
setter方法注入
public class Id {
private int id;
public int getId() { return id; }
public void setId(int id) { this.id = id; }