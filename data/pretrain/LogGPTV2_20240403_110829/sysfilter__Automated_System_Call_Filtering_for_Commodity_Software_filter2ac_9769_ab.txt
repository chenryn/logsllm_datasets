the PT_INTERP header, which conventionally contains the
path of the respective dynamic linker/loader (e.g., /lib64/-
ld-linux-x86-64.so), followed by iterating the .dynamic
ELF section for DT_NEEDED entries that correspond to the
names of the required shared libraries. Each of these libraries
is added to the analysis scope and their .dynamic section
is also scanned, recursively, to recover additional (library)
dependencies. The process stops when all explicit dynamic
library dependencies are resolved and the related ELF ﬁles
have been added to the analysis scope.
In addition to the above, it is also possible to provide as
input a set of implicit dynamic shared object dependencies to
sysfilter: i.e., a list of additional .so ELF ﬁles that need
to be added to the analysis scope, irrespectively of whether
they exist in any of the loaded objects’ .dynamic section (see
Figure 1B). This functionality is important in order to support
the analysis of binaries that have run-time dependencies to
shared objects (e.g., via dlopen) or use LD_PRELOAD.
3.1.2 Function-Call Graph Construction
Once every ELF object is added to the analysis scope,
sysfilter proceeds with the construction of the function-
call graph (FCG) of the whole program. The FCG contains
parts of the code (functions) that are reachable, under any
possible input to the corresponding process. Note that for
every included .so ELF object in the analysis scope, not all
of their code is used: e.g., applications that link with libc,
libpthread, libdl, etc., do not make full use of the latter;
usually, only part of library functionality is utilized [1, 71].
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    461
Analysis Scope
Call Graph Construction
Syscall Set Construction
C
Entry points
Functions
binary
code (PIC)
.dynamic
.eh_frame
libc
code (PIC)
.dynamic
.eh_frame
lib...
code (PIC)
.dynamic
.eh_frame
lib...
code (PIC)
.dynamic
.eh_frame
A
Implicit dependencies
B
libplugin
code (PIC)
.dynamic
.eh_frame
...
mov $0x1,%eax
syscall
...
mov $0x3,%eax
syscall
...
...
mov $0x2,%eax
syscall
...
mov $0x0,%eax
syscall
...
D
{0,1,2,3}
JSON output
BPF ﬁlter gen.
E
...
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K,
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K,
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K,
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K,
0, 3, 0);
1, 2, 0);
2, 1, 0);
3, 0, 1);
ALLOW);
DENY);
BPF_STMT(BPF_RET|BPF_K,
BPF_STMT(BPF_RET|BPF_K,
Injection
F
libsysfilter.so
code (PIC)
.dynamic
.eh_frame
binary
code (PIC)
.dynamic
.eh_frame
System Call Set Extraction System Call Set Enforcement
Figure 1: The sysfilter Architecture. The tool consists of two parts: the system call set extraction part (left) and the system
call set enforcement part (right). The former receives as input the target application in binary form, automatically resolves all
dependencies to dynamic shared libraries, constructs a safe over-approximation of the program’s FCG—across all objects in
scope—, and, ﬁnally, performs a set of program analyses atop the FCG, in order to extract the set of developer-intended syscalls.
The latter enforces the extracted set of syscalls, effectively sandboxing the input binary, using seccomp-BPF.
Precise Disassembly Obtaining the complete and precise
disassembly of arbitrary binary programs is an undecidable
task [91]. The problem stems from two main reasons: (a) not
being able to decisively differentiate code from data [91];
and (b) not being able to precisely identify function bound-
aries [5, 6]. Fortunately, modern toolchains, like GCC and
LLVM, (1) do not mix code and data [3, 4] and (2) embed
stack unwinding information to (x86-64) C/C++ binaries [95].
sysfilter takes advantage of (1) and (2) in order to pre-
cisely disassemble the executable code from all ELF ﬁles in
the analysis scope, without requiring symbols or debugging
information (If such information is available, sysfilter will
use it, but our techniques are designed for stripped binaries.)
More speciﬁcally, for each .so object in the analysis
scope, sysfilter uses the stack unwinding information
(.eh_frame section) to get the exact boundaries of all
functions in executable sections (e.g., .text, .plt). More-
over, special care is taken to correctly identify functions of
crtstuff.c (libgcc), which are compiled into the sections
.init and .fini, as well as into crtbegin.o. Armed with
precise information about function boundaries, and given the
strict separation of code and data, sysfilter performs a lin-
ear sweep, in all code regions that correspond to identiﬁed
functions, to disassemble their executable code. The resulting
disassembly does not contain any invalid instruction, due to
data treated as code or incorrect function boundary detec-
tion, nor it misses instructions due to unidentiﬁed code—the
resulting disassembly is complete, precise, and accurate.
Direct Call Graph Building upon the precise disassembly
obtained during the previous step, sysfilter proceeds to
construct the FCG of the input program. First, it puts together
the direct call graph (DCG): i.e., the part of the FCG that cor-
responds to directly-invoked functions/code. This is achieved
by ﬁrst adding to the DCG the entry point of the main binary,
followed by all the functions whose addresses are stored at the
subsequent (ELF) sections: .preinit_array, .init_array,
and .fini_array; the code/function in .init and .fini is
also added to the DCG. Subsequently, the same process is
repeated for every other .so ELF object in the analysis scope.
At the end of this step, a set of initial functions are added to
the DCG, which correspond to the entry points of the code
that is executed during the initialization/ﬁnalization of the
respective process by the dynamic linker/loader (ld.so). It
is also possible to provide as input a set of implicit function
dependencies (see Figure 1B). Again, this is required to aid
the analysis of binaries that have run-time dependencies to
certain functions (e.g., via dlsym) or use LD_PRELOAD.
Next, the code of each such function in the DCG is scanned,
linearly, to identify direct call instructions that target other
functions in the respective ELF objects. Branch instructions,
like (un)conditional jmp, which cross function boundaries
are also taken into consideration as they are typically used
for implementing tail-call elimination [84]. Each identiﬁed
target function (callee) is also added to the DCG, and the
process is repeated until no additional functions can be added.
Cross-shared library calls, via the Procedure Linkage Table
(PLT), are handled by inspecting the .dynsym, and .dynstr,
sections of the ELF ﬁles in scope and “emulating” the binding
(symbol resolution) rules of ld.so.2 (Direct cross-.so object
calls via PLT are treated as direct intra-.so function calls.)
The net result of the above is the construction of the part
of the FCG that contains the entry point(s) and the initial-
ization/ﬁnalization functions of the ELF objects in scope
(plus the implicitly-added functions, if provided), followed
by every other function that is directly-reachable from them
(i.e., reachable by following the targets of direct call/jmp
instructions and resolving PLT entries).
2This is analogous to executing ld.so with ‘LD_BIND_NOW=1’.
462    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Address-taken Call Graph The aforementioned process
does not take into consideration functions targeted-by indirect
call/jmp instructions. Such instructions have as operand a
(general-purpose) register, or a memory location, which stores
the target address (i.e., address of the callee), and are typically
used for dereferencing function pointers (C/C++) and imple-
menting dynamic dispatch (C++) [77]. Resolving the target
addresses of indirect call/jmp instructions, statically, is a
hard problem [72], mostly due to the imprecision of points-to
analysis [44]. (Note that resolving target addresses using dy-
namic testing is even more problematic, as the results of this
approach usually lack soundness [62].) Starting with DCG,
sysfilter proceeds to over-approximate the FCG by con-
structing, what we refer to as, the address-taken call graph
(ACG). The process of constructing the ACG is complete:
i.e., it never excludes functions that can be executed by the
program (under any possible input).
The ﬁrst step in the construction of the ACG is the identi-
ﬁcation of all address-taken functions: i.e., functions whose
address appears in rvalue expressions, function arguments,
struct/union initializers, and C++ object initializers, or
functions that correspond to virtual methods (C++). The set of
all address-taken (AT) functions is a superset of the possible
targets of every indirect call site in scope. This is because indi-
rect call/jmp instructions take as operands (general-purpose)
registers, or memory locations, which can only hold absolute
addresses; therefore, in order for a function to end-up being
invoked via an indirect call/jmp instruction, its address much
ﬁrst be “taken”, and then loaded in the respective operand (be
it a register or memory location).
sysfilter leverages the fact that every ELF object in the
analysis scope is compiled as PIC, in order to identify all AT
functions. More speciﬁcally, locations in code, or data, ELF
regions that correspond to absolute function addresses must al-
ways have accompanying relocation entries (relocs), if PIC
is enabled [14]. sysfilter begins with identifying all the re-
location sections (i.e., sections of type SHT_REL or SHT_RELA)
in the ELF objects in scope. Next, it processes all the relocs,
searching for cases where the computation of the relocation
involves the starting address of a function (recall that we have
already identiﬁed the boundaries of every function in scope,
during the construction of the DCG). Every such function,
whose starting address is used in relocs computation, is
effectively an AT function. The same function can have its ad-
dress taken multiple times in different locations (e.g., function
arguments, rvalue expressions in function bodies, or as part
of global struct/union/C++ object initializers). Relocations
that are applied to special sections (e.g., .plt, .dynamic) are
ignored, as they are only related to dynamic binding.
Armed with the set of all AT functions, sysfilter pro-
ceeds with computing the reachable functions from (each one
of) them using the same approach we employed for construct-
ing the DCG. ACG effectively contains as “entry points” the
discovered AT functions, followed by every other function that
is directly-reachable from them. The combined set of func-
tions in DCG and ACG is a superset of the set of functions in
the program’s FCG: i.e., V [FCG] ⊆ (V [DCG] ∪ V [ACG]).
Vacuumed Call Graph Although DCG ∪ ACG is a safe
over-approximation of FCG, it is not a tight one, as every AT
function included in the considered call graph is (potentially)
“polluting” it in a considerable manner by bringing in scope
every other function that is reachable from itself. In order to
keep the over-approximation as tight as possible, sysfilter
prunes the ACG using a technique for software debloating [1,
71]. In particular, we begin with the observation that each
time the address of a function is taken, a code pointer is
created. By taking into account the location (ELF section) that
such code pointers are created, sysfilter further separates
those found in code (e.g., .text) and data (e.g., .(ro)data)
regions. For the former, it iterates every function that has been
deemed as unreachable, and checks if the address of an AT
function is only taken within functions that are (strictly) not
part of the call graph. If this condition is true, it removes
the respective AT function from ACG, which may result in
additional removals (e.g., everything directly-reachable from
the removed AT function); sysfilter iteratively performs
the above until no additional functions can be pruned.
For the latter case, sysfilter cannot prune AT functions
using the same approach, as the resulting code pointers can
be part of encapsulating data structures whose usage cannot
be tracked without access to access to symbol (or debug-
ging) information. However, if such information is indeed
available—note that modern toolchains (GCC, LLVM) in-
clude symbols in the resulting ELF objects (.symtab section)
by default, while popular Linux distributions provide sym-
bols for their packaged binaries—, sysfilter can (more
aggressively) eliminate AT functions from data sections as
follows. First, it leverages symbol information to identify the
bounds ([OBJ_BEGIN - OBJ_END]) of global data objects
(i.e., symbols of type OBJECT/GLOBAL). Next, it checks for
relocs that: (a) correspond to AT functions; and (b) fall
within the bounds of any global object. The net result of
this approach is the identiﬁcation of statically-initialized ar-
rays of code pointers or data structures that contain code
pointers. Lastly, sysfilter iterates every function that has
been classiﬁed as unreachable, and checks if OBJ_BEGIN is