Vulnerabilities 101:
How to Launch or Improve Your 
Vulnerability Research Game
Joshua “jduck” Drake, Zimperium
Steve Christey Coley, MITRE
DEF CON 24
Aug 7th, 2016
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• About Josh
– 20-years of VR, Ran iDefense VCP
• About Steve
– CVE, “Responsible Disclosure” (sorry), CVSS, CWE, ...
• Why we are doing this
– Currently, there is *way* more insecure code out there than 
researchers. This isn't guaranteed in 10 years, though.
– We need more people looking at code that’s deployed in the 
real world
– We hope to encourage more people to get involved
2
Introductions
Josh & Steve - Intros / Steve to finish
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• This is our opinion only
– Based on our own career experiences
– Others have their own opinions
• YOU… proving the cliche… are a unique 
snowflake
• You’ll find your own way, but hopefully we can 
help you find it faster
• No new ‘sploits here
3
Disclaimers
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•Vulnerabilities != Exploits
•A Vulnerability resides in the 
software itself, doing nothing on its 
own
•An Exploit is a set of steps 
(possibly manual, or in the form of 
a program) that interacts with the 
software in a way that has a 
non-zero chance of successfully 
taking advantage of a vulnerability
https://twitter.com/mholt6/status/529797274658807810
4
What is a Vulnerability?
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Too many definitions...
– Roughly: “a mistake in a system’s design or implementation that allows 
an ‘attacker’ to conduct activities that (1) affect other users and (2) are 
not explicitly allowed or intended by the developer or sysadmin.”
• “What do you have?” vs. “What do you get?”
– there must be a difference
5
What is a Vulnerability?
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• “How much help must the victim give you?”  (user interaction)
– None - Automatic
– Low - “Normal” usage (e.g., clicking on a link is *normal*)
– High - e.g. “copy this javascript: url into browser”
• “How much luck do you need?”
–ASLR, unusual configs, narrow race windows
• Vulnerabilities have MANY other properties… Some will 
become apparent in the rest of this talk.
6
Vulnerability Properties
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• This process may take minutes, days, months, even years
• Vulnerability Discovery may be used to emphasize finding 
individual bugs in specific software
• Solving puzzles within puzzles, where you don’t know what 
the puzzle is when you begin
The process of analyzing a product, protocol, or 
algorithm - or a set of related products - to find, 
understand, or exploit one or more vulnerabilities.
7
What is Vulnerability Research?
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Realistically, motivations vary 
per individual
– Not every researcher will share 
your motivations
– Vendors might have experience or 
only assume certain motivations
8
(word clouds generated on http://www.wordclouds.com/)
Why DO Vulnerability Research?
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
Vulnerability Related Careers
9
The need to deal with vulnerabilities spawns a wide variety of career 
opportunities
-
This includes many roles that aren’t considered “pure VR” too
-
Which job is right for you depends on skills, interest level, and more.
-
Here’s a few of the myriad potential tasks:
● Discover ‘em
● Analyze ‘em
● Improve ‘em
● Exploit ‘em
● Investigate ‘em
● Catalog ‘em
● Fix ‘em
● Communicate ‘em
● Coordinate ‘em
● Minimize ‘em
● Prioritize ‘em
● Document ‘em
...we’ll elaborate more as we continue...
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• No one says you have to get a job doing this stuff. You could do it 
just for fun (aka a “hobbyist”).
• If you choose to get a job, you could work for (no particular order):
– Yourself! - bug bounties, black/gray market sales, etc.
– Consulting firms that value research
– Security product companies (for marketing value)
– Software vendors (product security or response team)
– Regular businesses (internal application security teams)
– Government contractors (or government directly)
– Academia (focus is “pure” research)
– CERTs (analyze and understand real-world attacks)
• Note: not all work gets public recognition
10
Potential Employers
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Patience - especially when 
dealing with people
• Persistence & patience - there 
will be challenges
• Diligence - details and 
accuracy are important
• Curiosity - fuel for motivation 
to learn
11
“Should Have” Personality Traits
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
12
“Nice to Have” Personality Traits
• We feel these traits increase the chances of long-term, 
repeated success.
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
13
Certain skills, usually acquired over time, seem to lead to long-term success.
• Common attack patterns and logical flows (e.g. logic vulns, CSRF, authZ/authN)
• How to run analysis tools and evaluate their findings
•
Clear communication; one (preferably many) of
– Understanding and respecting your audience(s)
– Well-structured advisory
– Describing the issues (for the vendor and/or public)
• Using common vocabulary
• Why it’s important
• Steps to reproduce, functional PoC with well-labeled functions, comments, etc.
– NOTE: perfect English is NOT on this list; the above items are much more important
• Knowledge of “how things work” under the hood: code, protocols, file formats, ...
Clear communication is probably one of the biggest contributors to career success, no 
matter your specialty (also, less drama due to misunderstandings).
Skills for Long-Term Success
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
Attack Surface: the set of all inputs and code paths with which an attacker can interact
•
Attack Vector: the route by which an attack is carried out (i.e. email, malicious link, etc.)
•
Impact
–
RCE (remote code execution), EoP (escalation of privilege), DoS (denial of service)
•
PoC (Proof of Concept)
–
What concept are you proving?! A vulnerability exists? A crash happens? Exploitable?
–
Clearly communicate what you’ve proven. It will ease your efforts.
•
Vulnerability classes
–
Memory corruption, injection (SQLi, XSS, etc.), protocol/specification design, …
–
When the low-hanging fruit fails: “Business logic”
•
Vulnerability chains
–
Chains Example: Integer Overflows leading Heap Overflows
•
Root cause analysis
–
Ex. XSS in error msg indicating system() or path trav
–
Ex. In C/C++, this is often the first encountered instance of undefined behavior.
–
Deeper analysis - ask yourself ‘why?’
NOTE! Many terms have multiple definitions or context-specific usage too..
14
Key Terms (Vocabulary)
Steve + Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
●
OWASP Top Ten
●
SANS/CWE Top 25
●
White papers
●
Periodic electronic 
collections
●
Videos
●
Mailing lists
●
Github repos
●
Vendor’s bug databases
●
Vuln scanners
●
Intentionally-vulnerable 
packages
●
CTFs / wargames
●
Individual researchers
●
Vulnerability databases
●
Conference talks
●
Classes
●
Books
●
Yearly White Hat Security 
Top 10 attacks
●
Pwnie Awards Nominees
●
Bug bounties
See bonus slides for specific 
references!
15
The Firehose: Where to Learn?
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
You can go deep or broad
– Language, vuln class, exploit technique, detection technique, ...
•
Anything you do that contributes to the body of knowledge is valuable
– Even negative results are useful! (though difficult to admit to)
•
Lots of “low-hanging fruit” out there
– Older code is more likely buggy
– Complex or overly complex systems are often ripe
– Large attack surface creates many opportunities
•
Software popularity matters
– Little-used software has lower quality but also lower impact to general public
– Popular software with extensive vulnerability history is often difficult
•
Too buggy means lower rewards or less recognition
– Sadly, they won’t get better without liberal application of effort
16
Selecting Your Target (1)
Josh + Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
Brand-new or emerging technologies (think Mobile, IoT, etc)
– Vendor rush-to-market usually means security is at best an afterthought
•
Newly-discovered or emerging vulnerability/attack classes
– Each new class should force a review of ALL products across the board
– Or, refine a new attack/vuln with new variations, stronger impacts, etc.
•
Previously-unanalyzed code
– Highly likely to contain lots of low-hanging fruit
– Some targets grow popular without getting proper review / fixes
– Some targets have been around forever but only recently connected to networks 
(hello medical devices and automobiles!)
•
If you have access to expensive or difficult-to-obtain products: do eeeeeet
•
Follow what others are doing (“Pigpile” or “Bandwagon” Effect)
– Sometimes offends the original researcher(s)
– Benefit from a base level of published research
17
Selecting Your Target (2)
Josh + Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Design review
• Threat modeling (e.g., STRIDE)
•
Dynamic vs. Static analysis - to run or not to run?
– Dynamic is analyzing a program by running it - e.g. fuzzing, debugging
– Static is purely inspection of program code - e.g. auditing, SCA tools
– Code coverage and accuracy (false/true positives) are important!
– Real power is achieved by combining: hybrid analysis FTW!
•
Code auditing (binary/source)
– Grep!  Pedantic compiler settings!  Automated taint checking!
•
Automated tools (fuzzers, static code analysis)
– Risk of false positives
– Lack of root cause analysis
18
Techniques and Tools
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
Using standards can make it easier to communicate critical vulnerability 
information across broad groups of people, including consumers, vendors, 
and others
– but haters do exist, and haters gonna hate...
•
CVE - Common Vulnerabilities and Exposures
– Numeric identifiers for tracking vulnerabilities
•
CWE - Common Weakness Enumeration
– Hierarchy of developer “mistakes” that lead to vulns
•
CAPEC - Common Attack Pattern Enumeration and Classification
– Common traits of attack methodologies
•
CVSS - numeric rating
– Pros: widely adopted, focused on key characteristics, provides consistency
– Cons: not as consistent as hoped, difficult to use in non-traditional contexts
19
Relevant Standards
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Models
– Full, Partial, Coordinated (formerly “Responsible”), Non-disclosure
•
Reasons for (public) disclosure
– To inform the parties responsible for fixing
– To put pressure on unresponsive vendors / get them to care
– To inform the masses that there’s a problem that needs attention
•
Standards Documents
– ISO standard 29147 (@k8em0, etc.) - focuses on what VENDORS should do
• Now freely available!
– IETF Draft circa 2002
– RFPolicy 2.0 circa 2000
20
Disclosure Models
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
Every disclosure is a unique snowflake. Your disclosure policy 
clarifies expectations between you and vendors!
• What if:
– You can’t even find the right contact point?
– 0-day exploitation is actively occurring?
– Somebody else publicizes your vuln(s) first?
– The vendor doesn’t respond?
• What is the correct grace period?
– Design flaws often take a LONG time to fix
21
Disclosure Policy Considerations (1)
Image: http://feelgrafix.com/group/snowflake.html
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Impact to consumers who…
– want to fix immediately
– can’t fix immediately
• Is the vendor acting in good faith?
• Will your actions...
–
make it harder for others to want to work with you in the future?
–
make it more difficult for people to hire you?
• “Is it worth it to disclose at all?”
Again, no one-size-fits-all; follow your moral compass
22
Disclosure Policy Considerations (2)
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
Your advisory will be read by various people with different goals. Make 
it count. Better coordination means a better final advisory.
•
Easily identifiable advisory structure
–
Well-labeled sections, different bugs in different segments, etc.
• Background / explanation of software
• Synopsis / abstract (brief)
• Affected software / hardware
– Vendor name, product name
– Vulnerable versions
• Newest fixed and non-fixed vulnerable versions
• Oldest vulnerable version
– Best effort as it can quickly become a complex situation
•
Vulnerability type(s)
23
Advisory Structure and Contents (1)
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
Privileges & access required to launch an attack
•
Impact of a successful attack
–
Privileges gained; unauthorized operations that can now be conducted; etc.
–
CVSS score, along with full vector
•
Detailed Description
–
Level of detail is one of those individual opinion things, but there 
is a real risk to disseminating attacks
–
Include PoC (details on next slide)
–
Use your moral compass so you can sleep well at night
•
Patch availability, mitigations, workarounds
•
Key identifiers (CVE, vendor IDs, CERT IDs, etc.)
•
Disclosure timeline (discovery, notification, vendor reply, patch, 
disclosure, etc.)
•
Credit to contributors
•
References to related work
24
Advisory Structure and Contents (2)
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
25
This key detail often tips the scales, so to speak. Consider including 1 or more:
•
Sequence of steps to reproduce, e.g. through the user interface
•
Detailed code analysis
–
Affected parameter or field
–
Name of affected function
–
Names of all files/executables involved (eg. login.php & authlib.php)
–
Source/assembly code extracts (or Pseudocode)
•
How does attacker input get to the vulnerable code?
•
Code version
•
Source line numbers / addresses
•
Trim unnecessary code for readability
•
Code that demonstrates impact
–
Harmless sample attack, e.g. calc.exe or alert(‘XSS’)
–
Functioning exploit code (snippet, full, or in between)
Proof-of-Concept Makes Your Case
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24