# Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game

**Presenters:**
- Joshua “jduck” Drake, Zimperium
- Steve Christey Coley, MITRE

**Event:**
- DEF CON 24
- August 7th, 2016

---

## About the Presenters

### Joshua “jduck” Drake
- Over 20 years of experience in vulnerability research.
- Formerly ran iDefense VCP (Vulnerability Contribution Program).

### Steve Christey Coley
- Involved in CVE (Common Vulnerabilities and Exposures).
- Contributed to "Responsible Disclosure" (now known as Coordinated Vulnerability Disclosure), CVSS (Common Vulnerability Scoring System), and CWE (Common Weakness Enumeration).

---

## Why This Talk?

- **Current State:** There is significantly more insecure code than researchers. This imbalance may not persist in the future.
- **Need for More Researchers:** We need more individuals examining real-world deployed code.
- **Encouragement:** Our goal is to inspire and guide more people into the field of vulnerability research.

---

## Disclaimers

- **Opinion-Based:** Our insights are based on our personal career experiences. Others may have different perspectives.
- **Unique Paths:** Each individual will find their own unique path, but we hope to help you find it faster.
- **No New Exploits:** This talk does not include any new exploits.

---

## What is a Vulnerability?

### Definition
- A vulnerability is a mistake in a system’s design or implementation that allows an attacker to conduct activities that:
  1. Affect other users.
  2. Are not explicitly allowed or intended by the developer or system administrator.

### Key Points
- **Vulnerabilities vs. Exploits:** A vulnerability exists within the software itself, while an exploit is a set of steps (manual or automated) that takes advantage of the vulnerability.
- **User Interaction:** The level of user interaction required can vary from none (automatic) to low (normal usage) to high (specific actions).
- **Luck Factor:** Factors like ASLR (Address Space Layout Randomization), unusual configurations, and narrow race windows can influence the success of an exploit.

---

## Vulnerability Properties

- **Discovery Time:** The process of finding vulnerabilities can take anywhere from minutes to years.
- **Research Focus:** Vulnerability discovery often involves solving complex puzzles, where the nature of the puzzle is initially unknown.
- **Definition:** Vulnerability research is the process of analyzing products, protocols, or algorithms to find, understand, or exploit vulnerabilities.

---

## Motivations for Vulnerability Research

- **Individual Motivations:** These can vary widely among researchers.
- **Vendor Assumptions:** Vendors may have certain assumptions about researcher motivations, which may not always align with reality.

---

## Career Opportunities in Vulnerability Research

- **Diverse Roles:** The need to address vulnerabilities creates a wide range of career opportunities, including roles that are not strictly focused on pure vulnerability research.
- **Potential Tasks:**
  - Discovering vulnerabilities
  - Analyzing vulnerabilities
  - Improving security
  - Exploiting vulnerabilities
  - Investigating incidents
  - Cataloging vulnerabilities
  - Fixing vulnerabilities
  - Communicating findings
  - Coordinating responses
  - Minimizing risks
  - Prioritizing issues
  - Documenting processes

- **Employment Options:**
  - Self-employment (e.g., bug bounties, black/gray market sales)
  - Consulting firms
  - Security product companies
  - Software vendors
  - Regular businesses (internal security teams)
  - Government contractors
  - Academia
  - CERTs (Computer Emergency Response Teams)

---

## Personality Traits for Success

### Essential Traits
- **Patience:** Especially important when dealing with people.
- **Persistence and Patience:** Challenges are inevitable.
- **Diligence:** Attention to detail and accuracy are crucial.
- **Curiosity:** A strong desire to learn and understand.

### Beneficial Traits
- **Long-Term Success:** Certain traits, such as curiosity and persistence, increase the likelihood of sustained success in the field.

---

## Skills for Long-Term Success

- **Understanding Common Attack Patterns:** Knowledge of logical flows, such as logic vulnerabilities, CSRF (Cross-Site Request Forgery), and authentication issues.
- **Tool Proficiency:** Ability to use and evaluate analysis tools.
- **Clear Communication:**
  - Understanding and respecting your audience.
  - Structuring advisories well.
  - Describing issues clearly for both vendors and the public.
  - Using common vocabulary.
  - Providing steps to reproduce, functional PoCs (Proof of Concepts) with well-labeled functions and comments.
- **Technical Knowledge:** Understanding how things work under the hood, including code, protocols, and file formats.

---

## Key Terms and Vocabulary

- **Attack Surface:** The set of all inputs and code paths an attacker can interact with.
- **Attack Vector:** The route by which an attack is carried out (e.g., email, malicious link).
- **Impact:** Types of impact include RCE (Remote Code Execution), EoP (Escalation of Privilege), and DoS (Denial of Service).
- **PoC (Proof of Concept):** Clearly communicates what has been proven, such as the existence of a vulnerability or a crash.
- **Vulnerability Classes:** Categories like memory corruption, injection (SQLi, XSS), protocol/specification design, and business logic.
- **Vulnerability Chains:** Sequences of vulnerabilities, such as integer overflows leading to heap overflows.
- **Root Cause Analysis:** Identifying the underlying reasons for vulnerabilities, such as undefined behavior in C/C++.

---

## Learning Resources

- **OWASP Top Ten**
- **SANS/CWE Top 25**
- **White Papers**
- **Periodic Electronic Collections**
- **Videos**
- **Mailing Lists**
- **GitHub Repositories**
- **Vendor Bug Databases**
- **Vulnerability Scanners**
- **Intentionally-Vulnerable Packages**
- **CTFs (Capture the Flag) and Wargames**
- **Individual Researchers**
- **Vulnerability Databases**
- **Conference Talks**
- **Classes**
- **Books**
- **Yearly White Hat Security Top 10 Attacks**
- **Pwnie Awards Nominees**
- **Bug Bounties**

---

## Selecting Your Target

### Considerations
- **Depth vs. Breadth:** You can choose to go deep into a specific area or broad across multiple areas.
- **Contributions:** Any contribution to the body of knowledge is valuable, even negative results.
- **Low-Hanging Fruit:** Older and more complex systems often have more vulnerabilities.
- **Software Popularity:** Popular software with a history of vulnerabilities can be challenging, while less-used software may have lower impact.

### Target Selection
- **Emerging Technologies:** New technologies often lack robust security.
- **New Vulnerability Classes:** Review all products for new types of vulnerabilities.
- **Unanalyzed Code:** Likely to contain many vulnerabilities.
- **Expensive or Difficult-to-Obtain Products:** Unique opportunities for research.
- **Following Trends:** Leveraging existing research and piggybacking on others' work.

---

## Techniques and Tools

- **Design Review:** Evaluating the design of a system.
- **Threat Modeling:** Using frameworks like STRIDE.
- **Dynamic vs. Static Analysis:**
  - **Dynamic Analysis:** Running the program (e.g., fuzzing, debugging).
  - **Static Analysis:** Inspecting the code without running it (e.g., auditing, SCA tools).
  - **Hybrid Analysis:** Combining both methods for better results.
- **Code Auditing:** Techniques like grep, pedantic compiler settings, and automated taint checking.
- **Automated Tools:** Fuzzers and static code analysis tools, with a focus on managing false positives and root cause analysis.

---

## Relevant Standards

- **CVE (Common Vulnerabilities and Exposures):** Numeric identifiers for tracking vulnerabilities.
- **CWE (Common Weakness Enumeration):** Hierarchy of developer mistakes leading to vulnerabilities.
- **CAPEC (Common Attack Pattern Enumeration and Classification):** Common traits of attack methodologies.
- **CVSS (Common Vulnerability Scoring System):** Numeric rating system for vulnerabilities.

---

## Disclosure Models

- **Models:**
  - Full, Partial, Coordinated (formerly "Responsible"), Non-disclosure.
- **Reasons for Disclosure:**
  - Informing responsible parties.
  - Putting pressure on unresponsive vendors.
  - Alerting the public to significant issues.
- **Standards Documents:**
  - ISO standard 29147: Focuses on vendor responsibilities.
  - IETF Draft circa 2002.
  - RFPolicy 2.0 circa 2000.

---

## Disclosure Policy Considerations

- **Contact Points:** Ensuring you can reach the right contacts.
- **Active Exploitation:** Handling situations where exploitation is already occurring.
- **Public Disclosure:** Dealing with scenarios where someone else discloses the vulnerability first.
- **Vendor Response:** Addressing non-responsive vendors.
- **Grace Periods:** Determining appropriate timeframes for disclosure, especially for design flaws.

---

## Advisory Structure and Contents

### Key Elements
- **Advisory Structure:**
  - Well-labeled sections.
  - Background and explanation of the software.
  - Synopsis and abstract.
  - Affected software/hardware.
  - Vulnerable versions.
  - Newest fixed and non-fixed versions.
  - Oldest vulnerable version.
  - Vulnerability type(s).

- **Detailed Description:**
  - Required privileges and access.
  - Impact of a successful attack.
  - Detailed steps to reproduce.
  - Code analysis.
  - Patch availability, mitigations, and workarounds.
  - Key identifiers (CVE, vendor IDs, CERT IDs).
  - Disclosure timeline.
  - Credits to contributors.
  - References to related work.

- **Proof-of-Concept (PoC):**
  - Sequence of steps to reproduce.
  - Detailed code analysis.
  - Names of affected parameters, functions, and files.
  - Source/assembly code extracts.
  - Code version and line numbers.
  - Trimmed code for readability.
  - Demonstration of impact (e.g., harmless sample attacks, functioning exploit code).

---

This comprehensive guide aims to provide a clear, professional, and structured approach to launching or improving your vulnerability research efforts.