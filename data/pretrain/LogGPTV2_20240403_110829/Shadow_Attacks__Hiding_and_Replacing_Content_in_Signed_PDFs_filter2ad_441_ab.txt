these use cases, attackers can inject invisible parts (“shadow
content”) into a PDF before it is signed. After the signing,
the attackers again manipulate the signed PDF. Thereby, they
enforce a visible change in its content without invalidating the
signature.
Attackers
Signers Victims
(1) PDF1 = createPDF()
(2) PDF2 = sign(PDF1)
(3) PDF3 = manipulate(PDF2)
Attacker Model: The attackers prepare the Shadow Document
Figure 3.
(PDF1) which the Signers sign (PDF2). Afterward, the Attackers modify the
content of the signed PDF (PDF3) and send it to the Victims.
a) Attacker Capabilities: As shown in Figure 3, the
attacker capabilities can be divided into three phases. The
output of each phase is a PDF ﬁle.
1) The attackers create the PDF document PDF1 =
createPDF() that contains the invisible shadow content
(e.g., a text or an image).
2) The signers receive PDF1 (e.g., by email) and create a new
document PDF2 by signing PDF1, i.e. PDF2 = sign(PDF1).
3) The attackers receive PDF2. They can modify PDF2
again,
the attackers create PDF3 =
manipulate(PDF2). The attackers send PDF3 to the vic-
tims.
instance,
for
The main difference to the previous work [6] is that the
attackers are allowed to embed malicious content before the
PDF is signed instead of solely modifying the PDF after the
signature has been applied.
b) Winning Conditions: The attackers are successful
((cid:32)) if the following conditions are fulﬁlled:
1) The signers only sign PDF1 if they do not notice of the
shadow content. In other words, all changes injected by
the attackers must be invisible to the signers.
2) The victims see the shadow content once they open PDF3.
3) The signature veriﬁcation of PDF3 is successful. The
victims trust the signers’ public key. The victims do not
trust any other key. In particular, they do not trust the
attackers’ key.
4) Opening PDF3 does not show any errors or warnings, for
example, due to a malformed ﬁle format.
Some PDF viewer show a warning even if it validates
the unmanipulated PDF2. If the signature validation of the
unmanipulated PDF2 and the manipulated PDF3 show exactly
the same warnings, we call the attackers’ success limited ((cid:71)(cid:35)).
4
IV. SHADOW ATTACKS: OVERVIEW AND PRELIMINARIES
The central concept of shadow attacks is that the attackers
prepare a PDF document by injecting invisible content –
this prepared PDF a “shadow
“shadow content”. We call
document”. Afterward,
the signing entity, for example, a
person or an online signing service, receives the shadow
document, signs it, and sends it back to the attackers. Despite
the integrity protection provided by the digital signature, the
attackers can modify the signed shadow document and change
the shadow content’s visibility. Nevertheless, the manipulation
is not detected, and the digital signature remains valid. Finally,
the attackers send the modiﬁed signed shadow document to
the victim. Although the attackers altered it, the signature
validation is successful. However, the victims see different
content than the signing entity. That is, the victims see the
shadow content.
A. Shadow Documents in the Real World
Considering the applicability of shadow documents, we fo-
cus on the following two questions: (1) How can the attackers
force the signing of a shadow document? (2) Why are the
attackers capable of modifying a signed shadow document?
a) Signing a Shadow Document:
In companies and
authorities, relevant documents like contracts or agreements are
often prepared by the employees, which take care of most of
the details and technicalities. An authorized person then signs
the document after a careful review. Another scenario is the
signing process of a document within a consortium. Usually,
one participant creates the ﬁnal version of the document, which
is then signed by all consortium members. Considering the
given examples, a maliciously acting employee or consortium
member can inject invisible shadow content during the editing.
Consequentially, this content will be signed.
Additionally, multiple cloud signing services like Adobe
Cloud, DocuSign, or Digital Signature Service exist. Among
other functionalities, such services receive a document and sign
it. Such services can also be used to sign shadow documents.
b) Manipulating a Shadow Document: One can assume
that a signed Portable Document Format (PDF) document
cannot be changed and that it is ﬁnal. This assumption is
not the case due to the desired features like multiple sig-
natures or annotations. For example, a PDF document can
be signed multiple times. This process is essential in many
use cases since it allows stakeholders within a consortium to
have a single document containing the signatures from all
partners. From a technical perspective, each new signature
appends new information to the already signed document (see
paragraph II-0b). Nevertheless, the document should still be
successfully veriﬁed for each signature. Additionally, the PDF
speciﬁcation deﬁnes interactive features like annotations (e.g.,
sticky notes and text highlighting). Since annotations do not
change the content but only put remarks on it, these changes
are considered harmless. Thus, the PDF speciﬁcation allows
the injection of seemingly harmless objects in a signed ﬁle
without invalidating the signature.
B. Analysis of Document Modiﬁcations
Currently, PDF applications analyze the changes made after
signing and try to estimate if these changes are legitimate. For
Figure 4. We show three variants of manipulating a shadow PDF document without being detected: Hide, Replace, and Hide-and-Replace.
instance, overwriting content on a page of the document is not
allowed, leading to invalid signature veriﬁcation. Such attacks
were evaluated in 2019 by Mladenov et al. [6].
In this paper, we ﬁrst analyzed which changes are consid-
ered harmless by the PDF applications and abused these to
exchange the entire content within a PDF document. None
of the previous work provides such an in-depth analysis.
Thus, a gap concerning the possible manipulations existed.
The allowed changes can be summarized as follows.
a) Appending new Xref table and Trailer: Appending
a new Xref
table and Trailer occurs on each change on
PDF documents. For instance, for each signing process using
the signature information, a new Xref table and Trailer are
generated. Thus, appending these at the end of the ﬁle is
considered harmless.
b) Overwriting Harmless Objects:
In their paper,
Mladenov et al. [6] were able to append new objects beyond
the signed document by overwriting existing objects and thus
replacing the content. The attack was called an Incremental
Saving Attack (ISA). Nevertheless,
the authors considered
only object types: Catalog, Pages, Page, and Contents. This is
reasonable since these objects directly inﬂuence the content
shown by opening the document. The applications’ vendors
ﬁxed the vulnerabilities by detecting the deﬁnition of such
objects after the signature was applied. Inspired by Markwood
et al. [7], we considered the deﬁnition of further objects like
fonts or metadata, which also inﬂuence the presented content.
c) Overlapping Objects: During our analysis, we raised
the question regarding the visible presentation of overlapping
content. More precisely: “If two objects share the same po-
sition on a page, which object shows the application in the
foreground and which one in the background?”. We determined
that
is
decisive. In the case of overlapping, the ﬁrst object is displayed
on top of the second one. Thus, we can append the same
objects to a PDF ﬁle but in a different order. Since the content
of the objects is not changed, this Incremental Update is also
the declaration of the object within the document
considered harmless. Nevertheless, the visible content changes
when opening the PDF ﬁle.
d) Changing Interactive Forms: We observed an un-
expected feature applied to interactive forms, which overlays
the content of a text ﬁeld. By clicking on the text ﬁeld, its
content is shown, and the overlay disappears. While we avoid a
discussion regarding the usefulness of this feature, we observed
that changes on the overlay are considered harmless and do not
invalidate the signature.
C. Summary
The PDF speciﬁcation deﬁnes a compromise between
usability and security by softening the rules regarding the
integrity protection of digitally signed documents. This means
that signed PDF documents can be extended by applying
Incremental Updates. Attackers can inject content within the
Incremental Update that is appended to the end of the signed
document. Since PDF signatures are computed on a ﬁxed range
of bytes of the PDF ﬁle, the Incremental Update is outside of
that range, and it does not violate that cryptographic protection.
By deﬁning exceptions of allowed and forbidden changes,
the developer teams are responsible for the detection and
classiﬁcation of dangerous elements within each Incremental
Update. Wrong decisions lead to vulnerabilities. In the next
section, we show how changes that are classiﬁed as harmless
can enable the exchanging of content without invalidating the
signature.
V. SHADOW ATTACKS: HIDE, REPLACE, AND
HIDE-AND-REPLACE
In this section, we present three different classes of shadow
attacks: Hide, Replace, and Hide-and-Replace. Each attack
class introduces a different technique to stealthily manipulate a
signed PDF without causing any warnings or exceptions during
its signature validation.
Each attack is based on two manipulation steps made by
the attackers as depicted in Figure 3. In Step 1, the attackers
5
root/Catalog/Pages/Page1/Contents/Font.../ImgOverlayroot/Catalog/Pages/Page1/Contents/Font...Signed Shadow DocumentHide OverlaySigned Shadow DocumentReplace /Fontroot/Catalog/Pages/Page1/Contents/Font.../ContentsSigned Shadow DocumentHide and Replace /Catalog/Catalog/Pages/Page1/Page1/Contents/Font.../ImgOverlay/Page1/Contents/Font...root/Catalog/CatalogSignersAttackersSignersAttackersSignersAttackersHideReplaceHide-and-Replace...(a) A shadow PDF document digitally signed by the victims containing a
donation amount.
(b) Manipulated PDF document after signing which contains attackers’
account data (top row).
Figure 5.
Form-based Attack. On the left side, the victims sign a donation to a non-proﬁt organization. On the right side, the attackers manipulate the signed
document to display different bank account information. The validity status of the digital signature remains untouched. Apart from the account information, both
documents are indistinguishable.
prepare the document by injecting the shadow content. This
shadow document is sent to the signers. In Step 2, the attackers
receive the signed document and make the shadow content
visible. This document is sent to the victims.
All in all, we created eight different exploits covering all
attack variances. In the following sections, we explain the idea
of each attack and its execution.
A. Shadow Attack: Hide
This class of shadow attacks aims to hide the content
relevant to the victims behind a visible layer. For example,
the attackers can hide the text “You are ﬁred!” behind a full-
page picture showing “Sign me to get the reward!”. Once the
attackers receive the signed document, they manipulate the
document so that the viewer application no longer renders the
picture.
Hide attacks have two advantages from the attackers’
perspective:
1) Many viewers show warnings if new visible content is
added using Incremental Update. However, they do not
warn in most cases if content is removed.
2) The objects are still accessible within the PDF. In the
example above, the text “You are ﬁred!” can still be
detected by a search function. This detection might be
necessary if an online signing service is used, and it
reviews the document by searching for speciﬁc keywords.
We identiﬁed two variants of this attack class, which are
explained further.
1) Variant 1: Hide Content via Referenced Object: In this
attack variant, the attackers create overlay objects such as
images or form ﬁelds and hide them after the document is
signed to reveal the content below these objects. We created
three different exploits that hide content via malicious image,
hide form ﬁelds via malicious form ﬁelds, and hide content
via malicious form ﬁelds.
a) Step 1 – Injecting the shadow content: As shown in
Figure 4, the attackers inject one or multiple images and place
them over the original content. The images could overlay an
entire page or only parts of the content, for example, a digit
or passage of text. The attackers entirely control the position
and visibility of the placed image.
b) Step 2 – Making shadow content visible: The sim-
plest method for this is to create an Incremental Update, which
only updates the Xref table by setting the overlay object to free.
However, many viewers (e.g., Adobe) classify this change as
dangerous and throw an error or a warning. For this reason,
we use another approach: we use the same object ID within
the Incremental Update, but we deﬁne it as a different object
type. For example, we change the overlay type Image to XML/
Metadata. Additionally, we added an Xref table update pointing
to the metadata object but keeping the object ID of the overlay.
When opening this manipulated document the overlay is
hidden because Metadata cannot be shown. Since adding Meta-
data to a signed PDF using Incremental Update is considered
harmless, the signature remains valid.
Moreover, we observed that attackers could hide form
ﬁelds if they changed their references to empty objects. To
execute the attack, the attackers place the malicious form ﬁelds
above the original ones in which the attackers place predeﬁned
values. The manipulated document is sent to signers. They
only see the malicious form ﬁelds. After receiving the signed
document, the attackers let the malicious ﬁelds disappear by
referencing them to empty objects. In this way, the original
form ﬁelds, including the attackers’ predeﬁned values, are
shown to the victims.
2) Variant 2: Hide Content via Object’s Order: During our
analysis, we observed that for two different form ﬁelds with the
same size and at the same x-y position within the document,
only the last one is shown. Furthermore, the same form ﬁelds
can be re-declared within an Incremental Update as long as
none of the content changes. Based on both observations, the
attackers can build the following exploit.
a) Step 1 – Injecting the shadow content: The attackers
inject into the original unsigned document their shadow form
6
ﬁelds at the same x-y position as that of the content they want
to hide, but they declare their form objects before the original
ones. The signers see only the original form ﬁelds since they
are deﬁned after the shadow ones.
b) Step 2 – Making shadow content visible: After
receiving the document, the attackers append an Incremental
Update which copies and pastes the original and the shadow
form ﬁelds. In this case, however, they ﬁrst place the original
and then the shadow form ﬁelds. As a result, the shadow
form ﬁelds and their values are shown instead of the original
ones. Since the objects themselves have not modiﬁed, but only
their declaration order, the Incremental Update is considered
harmless.
B. Shadow Attack: Replace
The main idea of this shadow attack class is to use an
Incremental Update that directly changes previously declared
objects. Since the modiﬁcation is not allowed for all types of
objects, the attacker only changes objects that are considered
harmless but can nevertheless change the document’s visible
content. For instance,
the (re)deﬁnition of fonts does not
change the content directly. However, it inﬂuences the view of
the displayed content and makes number or character swapping
possible. We identiﬁed two variants of this attack class.
input masks, such as text ﬁelds,
1) Variant 1: Replace via Overlay: PDF Forms support
different
text areas, and
radio/selection buttons. Forms can have default values, for
example, a predeﬁned text. Users can dynamically change
these values and store them in the PDF document.
The attack abuses a dedicated property of PDF text ﬁelds.
A text ﬁeld can show two different values: the real ﬁeld value
and an overlay value, which disappears as soon as the text
ﬁeld is selected. A form ﬁeld’s real value is contained in an
object key named /V. The content of the overlay element is
deﬁned within a /BBox object. The /BBox object is comparable
to the hint labels known from HTML forms. For example, the
hint username indicates that the username should be entered
into a speciﬁc login ﬁeld. In contrast to HTML, in PDF there
is no visual difference between the hint and the actual value.
We depict an example attack in Figure 5.
a) Step 1 – Injecting the shadow content: First, the
attackers create a transfer slip (PDF1) containing an interactive
form which the signers complete before signing the document.
The attackers initialize some of the form elements with default
values. In the example provided in Figure 5, the attackers set
the values /V of the ﬁrst three form ﬁelds to Attacker and the
attackers’ IBAN and BIC. Second, the attackers set the overlay
values (/BBox) to unicef and the corresponding IBAN and BIC.
As long as the signers do not focus on the prepared values,
they believe that the correct values are already pre-ﬁlled.
b) Step 2 – Making shadow content visible: The signers
sign the PDF without changing the pre-ﬁlled forms. Once
the attacker receives PDF2,
they update the text ﬁelds by
replacing the overlay stored in /BBox with different values. The
values stored in /V remain unchanged. Viewers consider this
replacement harmless since the original text ﬁeld value is not
changed but rather only the overlay.
Once the victims open PDF3, the viewer ﬁrst veriﬁes if the
values stored in /V within each text ﬁeld have been changed and
differ from the signed values. If the values have been changed
and differ from the signed values, the signature validation fails.
Since the attackers do not change any values stored in /V, the
signature remains valid. The viewer then processes each text
ﬁeld object and shows the /BBox value if it maps to the signed
one. Otherwise, the value stored in /V is presented. Since the
attackers change the /BBox value, the value /V (being Attacker
) is shown, and the corresponding malicious transaction slips
through.
As a result, the signers and the victims have different views
on the same document, which should be prevented by the
digital signature. For each attack variant, we create one exploit.
2) Variant 2: Replace via Overwrite: The idea of the
attack is based on the ISA described by Mladenov et al.
[6]. Consequently, the vendors implemented a list of objects
considered dangerous and disallowed their occurrence in In-
cremental Updates. However, in many applications, fonts are
considered harmless, and thus, they can be deﬁned within an
Incremental Update. This attack variant proves the opposite.
a) Step 1 – Injecting the shadow content: The attackers
analyze the fonts used in the original document and distillate
which are relevant for the content. Second, default fonts like
Verdana or Times New Roman are usually not included in
the PDF. In this case, the attackers need to inject the font
description as shown in Figure 4.
b) Step 2 – Making shadow content visible: After the
document is signed, the attackers append a new font descrip-
tion and overwrite the previous one. The new font description
completely changes the presentation of the original text. For
example, we created an exploit changing the presentation of the