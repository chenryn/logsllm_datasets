Page2
Page3
Page3
Page4
Page Out
Page4
Page5
需要运行的部分PageIn，不需要
运行的部分PageOut
把1个程序划分成
多个页
图5-3分页式虚拟内存的机制
0务6)
当前页文件的大小
图5-4
查看虚拟内存的设定
更多资料请关注裁的新浪就客tt
---
## Page 102
第5章内存和碰盘的亲密关系
5.4
节约内存的编程方法
以图形用户界面（GUI，Graphical User Interface）为基础的
Windows，可以说是一个巨大的操作系统。Windows 的前身是MS-DOS
操作系统，最初版本可以在128KB左右的内存上运行，而想要
Windows流畅运行的话，至少需要512MB的内存。而且，由于
Windows具有多任务功能，在巨大的Windows操作系统中可以同时运
行多个应用，因此，即使是512MB的内存，有时也无法保证流畅运
行。Windows操作系统经常为内存不足所困。
许多人可能会认为，通过借助磁盘虚拟内存就可以解决内存不足
的问题。而虚拟内存也确实能避免因内存不足导致的应用无法启动。
不过，由于使用虚拟内存时发生的PageIn和PageOut往往伴随着低速
的磁盘访问，因此在这个过程中应用的运行会变得迟纯起来。想必大
家也都有过在操作应用的过程中硬盘访问灯一直亮着（这时正在进行
PageIn和PageOut），导致应用一时无法操作的不愉快经历吧。也就是
说，虚拟内存无法彻底解决内存不足的问题。
为了从根本上解决内存不足的问题，需要增加内存的容量，或者
尽量把运行的应用文件变小。接下来会向大家介绍两个把应用文件变
小的编程方法。虽然增加内存容量更为便捷，但是花费也高，所以大
家还是需要先看一下口袋里面的银子再来做决定。
①像Windows这样，窗口的累单及图表等都可以进行可视化操作的方式称为
图形用户界面。Windows的前身MS-DOS操作系统，是由健盘输入命令来
进行操作的CLI（命令行界面）。
88
---
## Page 103
5.4节纳内存的编程方法
（1）通过DLL文件实现函数共有
DLL（DynamicLinkLibrary）文件，顾名思义，是在程序运行时可
以动态加载Library（函数和数据的集合）的文件。此外，还有一个需要
大家注意的地方，那就是多个应用可以共有同一个DLL文件。面通过
共有同一个DLL文件则可以达到节约内存的效果。
例如，假设我们编写了一个具有某些处理功能的函数MyFuncO。
应用A和应用B都会使用这个函数。在各个应用的运行文件中内置函
数MyFuncO（这个称为StaticLink，静态链接）后同时运行这两个应
用，内存中就存在了具有同一函数的两个程序。但这会导致内存的利
用效率降低。所以，有两个同样的函数，还是有点浪费（图5-5）。
内存
应用程序A
应用程序B
函数MyFunco
函数MyFunc
内存中有两个相同的函数
图5-5静态链接导致内存利用效率下降
那么，如果函数MyFuncO是独立的DLL文件而不是应用的执行
文件（EXE文件），那结果会怎样呢？由于同一个DLL文件的内容在
运行时可以被多个应用共有，因此内存中存在的函数MyFuncO的程序
①美于DLL文件，会在第8章进行详细说明。
②Windows中，可以执行的应用文件的扩是名是.exe，这样的文件就称为
EXE文件。cxe是executable（可执行）的略写。另一方面，DLL文件的扩
展名为.dll
更多资料请关注裁的新浪薄客http：//blo
---
## Page 104
第5章内存和磁量的亲密关系
就只有1个。这样一来，内存的利用效率也就提高了。
内存
应用程序A
应用程序A
函数MyFuncll
将函数MyFuncO设置为DLL文件
就可以由两个应用程序共享
图5-6进行动态链接的话即可节的内存
Windows的操作系统本身也是多个DLL文件的集合体。有时在安
装新应用时，DLL文件也会被追加。应用则会通过利用这些DLL文件
的功能来运行。像这样，之所以要利用多个DLL文件，其中一个原因
就是可以节约内存。而且DLL文件还有一个优点就是，在不变更EXE
文件的情况下，只通过升级DLL文件就可以更新。
（2）通过调用_stdcall来减小程序文件的大小
通过调用_sidcall来减小程序文件的方法，是用C语言编写应用
时可以利用的高级技巧。不过，这一思路应该也可以应用在其他编程
语言中，因此大家一定要记住。
①_stdcall是 standard call（林准调用）的略称。Windwos 提供的 DLL文件内
的品数，基本上都是_stdcall调用方式。这主要是为了节约内存。另一方
面，用C语言编写的程序内的函数，跌认设置都不是_sldcall。C语言特有
的调用方式称为C调用。C语言之所v以致认不使用_stdcall，是因为C语言
所对应的品数的传入参数是可变的（可以设定任意参数）只有品数调用方
才能知道到底有多少个参数，而这种情况下，栈的清理作业使无法进行。
不过，在C语言中，如果品数的参数数量固定的话，指定_sitdcall是没有
任何问题的。
---
## Page 105
5.4节约内存的编程方法
C语言中，在调用函数后，需要执行栈清理处理指令。栈清理
处理是指，把不需要的数据从接收和传递函数的参数时使用的内存
上的栈区域中清理出去。该命令不是程序记述的，面是在程序编译
时由编译器自动附加到程序中的。编译器默认将该处理附加在函数
调用方。
例如，在代码清单5-1中，从函数mainO中调用了函数MyFuncO。
按照默认设定，栈的清理处理会附加在函数main0这一方。在同一个
程序中，同样的函数可能会被多次反复调用。而如果是同样的函数，
栈清理处理的内容也是一样的。由于该处理是在调用函数一方，因此
就会导致同一处理被反复进行。这就造成了内存的浪费。
代码清单5-1C语言的函数调用程序示例
//函数调用方
void main ()
a = MyFunc(123,456) :
int a;
Int MyFune (Int a, int b)
//被调用方
虽然通过调查编译器生成的机器语言执行文件就可以得知栈清理
的处理内容，不过鉴于原始的机器语言不太容易理解，所以这里我们
用汇编语言的代码清单将其显示了出来。将代码清单5-1中调用函数
MyFunc0的部分用汇编语言来表示，就如代码清单5-2所示。最后1
行的处理就是清理处理。
---
## Page 106
第5章内存和碰盘的亲密关系
代码清单5-2调用MyFunc的部分程序（汇编语言）
push 1c8h
得数456（=1c6h）存入线中
push7Bh
cal1aTD+15(My/7une）（00401014）-调syPunc（1函政
将参收123（-7Bh）有入我中
addesp.8
武行栈清理
C语言通过栈来传递函数的参数。push”是往栈中存人数据的指令。
32位CPU中，1次push指令可以存储4个字节的数据。代码清单5-2
中，由于使用了两次push指令把两个参数（456和123）存人到了栈
中，因此总的来说就是存储了8字节的数据。通过call指令调用函数
MyFuncO后，栈中存储的数据就不再需要了。于是这时就通过add
csp,8这个指令，使存储着栈数据的esp寄存器前进8位（设定为指向
高8位字节地址）来进行数据清理。由于栈是在各种情况下都可以再
利用的内存领域，因此使用完毕后有必要将其恢复到原状态。上述这
些操作就是栈的清理处理。另外，在C语言中，函数的返回值，是通
过寄存器而非栈来返回的。
栈清理处理，比起在函数调用方进行，在反复被调用的函数一方进
行时，程序整体要小一些。这时所使用的就是_stdcall。在函数前加上
_stdcall，就可以把栈清理处理变为在被调用函数一方进行。把代码清单
5-1 中的 int MyFunc(int a, int b) 部分转成 int _stdcall MyFunc(int a, int b)
进行再编译后，和代码清单5-2中addesp,8同样的处理就会在函数
MyFunc0一方执行。虽然该处理只能节约3个字节（addesp，8是机器语
①CPU会提前准备好栈机制。往栈中存储数据的汇编语言指今是push。从栈
中取出数据的汇编语言指令是pop。栈一般是用未实现品数调用机制的。
如果想任意利用栈，程序员就需要自己用程序来实现所需要的机机制。
②CPU中，栈中堆积的最高位的数据地址是保存在csp（esp是Pentium系列
CPU的栈指针名）中的。连续运行两次pop指令，可以消除两个存储在栈
中的4字节数据，而网样的功能也可以通过把esp的数值加8来实现，
---
## Page 107
5.5磁盘的物理结构
的3个字节）的程序大小，不过在整个程序中还是有效果的（图5-7）。
在调用方处理时
在被调用方处理时
内存
内存
调用函数MyFunc
调用函数MyFunc0
清理处理
多次进行相
7同的处理造
成浪费
调用函数MyFuncl
调用函数MyFuncll
清理处理
函数_stdcallMyFuncll
MyFunel
只有一个相同
的处理
清理处理
围5-7在被调用方进行清理处理可节约内存
5.5
5磁盘的物理结构
第4章中我们介绍了内存的物理结构，本章就让我们来看一下磁
盘的物理结构。磁盘的物理结构是指磁盘存储数据的形式。
磁盘是通过把其物理表面划分成多个空间来使用的。划分的方式
有扇区方式和可变长方式两种，前者是指将磁盘划分为固定长度的空
间，后者则是指把磁盘划分为长度可变的空间。一般的Windows计算
机所使用的硬盘和软盘，采用的都是扇区方式。扇区方式中，把磁盘
表面分成若干个同心圆的空间就是磁道，把磁道按照固定大小（能存储
的数据长度相同）划分而成的空间就是扇区（图5-8）。
更多资料请关注裁的新浪薄客http：//blor
---
## Page 108
第5章内存和碰盘的亲密关系
个前区
图5-8扇区方式的磁盘物理构造
扇区是对磁盘进行物理读写的最小单位。Windows中使用的磁盘，
一般1个扇区是512字节。不过，Windows在逻辑方面（软件方面）对
磁盘进行读写的单位是扇区整数倍簇。根据磁盘容量的不同，1簇可以
是512字节（1簇=1扇区）、1KB（1簇=2扇区）、2KB、4KB、8KB、
16KB、32KB（1簇=64扇区）。磁盘的容量越大、簇的容量也越大。
不过，在软盘中，1簇=512字节=1扇区，簇和扇区的大小是相等的。
不管是硬盘还是软盘，不同的文件是不能存储在同一个簇中的，
否则就会导致只有一方的文件不能被删除。因此，不管是多么小的文
件，都会占用1的空间。这样一来，所有的文件都会占用1簇的整
数倍的磁盘空间。我们可以通过试验来确认这一点。
由于在硬盘上做试验比较麻烦，所以我们选择在软盘上进行。首
先，把软盘按照“1.44MB，512字节/扇区”进行格式化。软盘中，
1扇区=1簇。格式化完成后，我们可以看一下磁盘的属性，这时的已
用空间应该是0字节，因为没有存储任何文件（图5-9）。
---
## Page 109
5.5盘的物理结构
城工具共向京义
已用空问是0字节
文件系统
可用空间：
1.30 I0
谷量
1, 6T, 64 享节 1.30 
图5-9格式化后磁盘的已用空间是0字节
接下来，让我们用记事本等文本编辑工具做成一个只有1个半角
文字的文件，并将其保存到软盘中，然后再来看一下磁盘的属性。这
时我们就会发现，虽然文件的大小只有1字节，但使用空间却变成了
512字节。
再次打开上述文件，并增加一些文字，然后覆盖保存。这时再查
看一下磁盘的属性就会发现，当文件大小未达到512个半角文字
（=512字节）时，已用空间一直是512字节。一且达到513个文字，已
用空间就会一下子变成1024字节（=2）。通过这个实验，想必大家
都应该明白磁盘的数据保存是以簇为单位来进行了吧（图5-10）。
①文本编辑工具指的是像简易的文字处理机那样可以输入文字的应用。标准
的Windows中都带有记事本（notepad.exe）这一文宇编辑工具。
更多资料请关注裁的新浪薄客http：//bl
---
## Page 110
第5章内存和磁盘的亲密关系
工具件共享自定文
文件系统
欣盘器
已用空间512字节
用空间
fu
=1簇