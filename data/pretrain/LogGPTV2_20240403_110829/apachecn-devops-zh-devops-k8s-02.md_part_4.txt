```
  entry_cmd entry_parms CMD_exec CMD_parms
  entry_cmd entry_parms CMD_parms
  entry_cmd entry_parms /bin/sh -c CMD_cmd 
  CMD_parms   
```
*   `ENV`:
```
ENV key value
ENV key1=value1 key2=value2 ... 
```
`ENV`指令为后续指令和构建映像设置环境变量。第一种形式在第一个空格后设置字符串的键，包括特殊字符。第二种形式允许我们在一行中设置多个变量，用空格隔开。如果值中有空格，请用双引号引起来或转义空格字符。此外，用`ENV`定义的键也对同一文档中的变量生效。参见以下例子观察`ENV`的行为:
```
    FROM alpine
    ENV key wD # aw
    ENV k2=v2 k3=v\ 3 \
        k4="v 4"
    ENV k_${k2}=$k3 k5=\"K\=da\"
    RUN echo key=$key ;\
       echo k2=$k2 k3=$k3 k4=$k4 ;\
       echo k_\${k2}=k_${k2}=$k3 k5=$k5
```
Docker 构建期间的输出将是:
```
    ...
    ---> Running in 738709ef01ad
    key=wD # aw
    k2=v2 k3=v 3 k4=v 4
    k_${k2}=k_v2=v 3 k5="K=da"
    ...
```
*   `LABEL key1=value1 key2=value2 ...`:`LABEL`的用法类似于`ENV`，但标签只存储在映像的元数据部分，由其他主机程序而不是容器中的程序使用。它反对以下形式的`maintainer`指令:
```
LABEL maintainer=PI:EMAIL
```
如果一个命令有`-f(--filter)`标志，我们可以用标签过滤对象。例如，`docker images --filter label=maintainer=PI:EMAIL`查询出前面维护者标注的映像。
*   `EXPOSE  [ ...]`:该指令与`docker run/create`处的`--expose`标志相同，显示由结果映像创建的容器的端口。
*   `USER [:]`:指令`USER`切换用户运行后续指令。但是，如果用户不在映像中，它将无法正常工作。否则，在使用`USER`指令之前，您必须运行`adduser`。
*   `WORKDIR `:该指令将工作目录设置为某个路径。如果路径不存在，将自动创建该路径。它的工作原理类似于`Dockerfile`中的`cd`，因为它采用相对路径和绝对路径，并且可以多次使用。如果绝对路径后跟相对路径，结果将是相对于前一路径的:
```
    WORKDIR /usr
    WORKDIR src
    WORKDIR app
    RUN pwd
    ---> Running in 73aff3ae46ac
    /usr/src/app
    ---> 4a415e366388
```
另外，用`ENV`设置的环境变量在路径上生效。
*   `COPY:`
```
COPY  ...  COPY ["",... ""]
```
该指令将源复制到构建容器中的文件或目录。源可以是文件或目录，也可以是目标。源必须在上下文路径内，因为只有上下文路径下的文件才会被发送到 Docker 守护程序。此外，`COPY`利用`.dockerignore`过滤将要复制到构建容器中的文件。第二种形式用于路径包含空格的用例。
*   `ADD`:
```
ADD  ... 
ADD ["",... ""]
```
`ADD`在功能上与`COPY`非常相似:将文件移动到映像中。除了复制文件，``还可以是网址或压缩文件。如果``是网址，`ADD`会下载并复制到图片中。如果``被推断为压缩文件，将被提取到``路径中。
*   `VOLUME`:
```
VOLUME mount_point_1 mount_point_2 VOLUME ["mount point 1", "mount point 2"]
```
`VOLUME`指令在给定的挂载点创建数据卷。一旦在构建期间声明了它，后续指令中数据量的任何变化都不会持续。此外，由于可移植性问题，在`Dockerfile`或`docker build`中装载主机目录是不可行的:不能保证指定的路径会存在于主机中。两种语法形式的效果是一样的；它们只是在语法分析上有所不同；第二种形式是 JSON 数组，所以像`"\"`这样的字符应该转义。
*   `ONBUILD [Other directives]` : `ONBUILD`允许您将一些指令推迟到衍生映像的后期构建。例如，我们可能有以下两个 Dockerfiles:
```
    --- baseimg ---
    FROM alpine
    RUN apk add --no-update git make
    WORKDIR /usr/src/app
    ONBUILD COPY . /usr/src/app/
    ONBUILD RUN git submodule init && \
              git submodule update && \
              make
    --- appimg ---
    FROM baseimg
    EXPOSE 80
    CMD ["/usr/src/app/entry"]
```
该指令将在`docker build`上按照以下顺序进行评估:
```
    $ docker build -t baseimg -f baseimg .
    ---
    FROM alpine
    RUN apk add --no-update git make
    WORKDIR /usr/src/app
    ---
    $ docker build -t appimg -f appimg .
    ---
    COPY . /usr/src/app/
    RUN git submodule init   && \
        git submodule update && \
        make
    EXPOSE 80
    CMD ["/usr/src/app/entry"] 
```
# 组织文档
虽然写一个`Dockerfile`和写一个建筑脚本是一样的，但是我们应该考虑更多的因素来构建高效、安全和稳定的映像。此外，`Dockerfile`本身也是一个文档，保持其可读性可以简化管理工作。
假设我们有一个由应用代码、数据库和缓存组成的应用栈，我们可能会从一个`Dockerfile`开始，如下所示:
```
---
FROM ubuntu
ADD . /app
RUN apt-get update 
RUN apt-get upgrade -y
RUN apt-get install -y redis-server python python-pip mysql-server
ADD db/my.cnf /etc/mysql/my.cnf
ADD db/redis.conf /etc/redis/redis.conf
RUN pip install -r /app/requirements.txt
RUN cd /app ; python setup.py
CMD /app/start-all-service.sh
```
第一个建议是制作一个专用于一件事的容器。所以，我们将在开始的这个`Dockerfile`中删除`mysql`和`redis`的安装和配置。接下来，代码用`ADD`移动到容器中，这意味着我们很可能将整个代码库移动到容器中。通常有许多文件与应用没有直接关系，包括 VCS 文件、配置项服务器配置，甚至构建缓存，我们可能不愿意将它们打包到映像中。因此，也建议使用`.dockerignore`来过滤掉那些文件。顺便说一下，由于`ADD`指令，我们可以做的不仅仅是将文件添加到构建容器中。一般情况下首选使用`COPY`，除非确实有必要不这样做。现在我们的`Dockerfile`更简单了，如下代码所示:
```
FROM ubuntu
COPY . /app
RUN apt-get update 
RUN apt-get upgrade -y
RUN apt-get install -y python python-pip
RUN pip install -r /app/requirements.txt
RUN cd /app ; python setup.py
CMD python app.py
```
在构建映像时，Docker 引擎将尽可能地重用缓存层，这显著减少了构建时间。在我们的`Dockerfile`中，只要我们的存储库中有任何更新，我们就必须经历整个更新和依赖项安装过程。为了从构建缓存中获益，我们将根据经验法则对指令进行重新排序:首先运行频率较低的指令。
此外，正如我们之前所描述的，对容器文件系统的任何更改都会产生一个新的映像层。即使我们删除了结果层中的某些文件，这些文件仍然占用映像大小，因为它们仍然保留在中间层。因此，我们的下一步是通过简单地压缩多个`RUN`指令来最小化映像层。此外，为了保持`Dockerfile`的可读性，我们倾向于使用行延续字符“`\`”来格式化压缩的`RUN`。
除了使用 Docker 的构建机制之外，我们还想编写一个可维护的`Dockerfile`，使其更加清晰、可预测和稳定。以下是一些建议:
*   用`WORKDIR`代替内联`cd`，用绝对路径代替`WORKDIR`
*   显式公开所需的端口
*   为基础映像指定标签
*   使用 exec 表单启动应用
前三个建议非常简单，旨在消除歧义。最后一个是关于应用是如何终止的。当来自 Docker 守护程序的停止请求被发送到正在运行的容器时，主进程(PID 1)将接收到停止信号(`SIGTERM`)。如果进程在一定时间后没有停止，Docker 守护程序将发送另一个信号(`SIGKILL`)来杀死容器。这里的 exec 形式和 shell 形式不同。在 shell 形式中，PID 1 进程是“`/bin/sh -c`”，而不是应用。此外，不同的外壳不会以相同的方式处理信号。有些将停止信号转发给子进程，有些则不转发。Alpine Linux 的外壳不转发它们。因此，为了正确地停止和清理我们的应用，鼓励使用`exec`表单。结合这些原则，我们有以下`Dockerfile`:
```
FROM ubuntu:16.04
RUN apt-get update && apt-get upgrade -y  \
&& apt-get install -y python python-pip
ENTRYPOINT ["python"]
CMD ["entry.py"]
EXPOSE 5000
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . /app 
```
还有其他一些方法可以让`Dockerfile`变得更好，包括从一个专用的更小的基础映像开始，比如基于 Alpine 的映像，而不是通用的发行版，使用`root`以外的用户进行安全保护，并删除他们加入的`RUN`中不必要的文件。
# 多容器编排