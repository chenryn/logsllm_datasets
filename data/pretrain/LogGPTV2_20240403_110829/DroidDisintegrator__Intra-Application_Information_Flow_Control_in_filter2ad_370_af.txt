appops
removal.
26
[XSA12]
Rubin Xu, Hassen Sa¨ıdi, and Ross Anderson. Aurasium: Practical policy enforcement
for Android applications. In USENIX Security Symposium 2012, 2012.
[YLL+15] Wei You, Bin Liang, Jingzhe Li, Wenchang Shi, and Xiangyu Zhang. Android im-
plicit information ﬂow demystiﬁed. In Proceedings of the 10th ACM Symposium on
Information, Computer and Communications Security. ACM, 2015.
[ZBWKM06] Nickolai Zeldovich, Silas Boyd-Wickizer, Eddie Kohler, and David Mazi`eres. Making
information ﬂow explicit in HiStar. In Symposium on Operating Systems Design and
Implementation (OSDI) 2006. USENIX Association, 2006.
[Zda04]
[ZWZJ12]
[ZZJF11]
[ZZNM01]
Steve Zdancewic. Challenges for information-ﬂow security. In International Workshop
on the Programming Language Interference and Dependence (PLID) 2004, 2004.
Yajin Zhou, Zhi Wang, Wu Zhou, and Xuxian Jiang. Hey, you, get oﬀ of my market:
Detecting malicious apps in oﬃcial and alternative Android markets. In Network and
Distributed System Security Symposium (NDSS) 2012, 2012.
Yajin Zhou, Xinwen Zhang, Xuxian Jiang, and Vincent W Freeh. Taming information-
stealing smartphone applications (on Android). In Trust and Trustworthy Computing
(TRUST) 2011. Springer, 2011.
Steve Zdancewic, Lantian Zheng, Nathaniel Nystrom, and Andrew C Myers. Un-
trusted hosts and conﬁdentiality: Secure program partitioning.
In ACM SIGOPS
Operating Systems Review, volume 35. ACM, 2001.
A Further details
A.1 A Motivating Example: SMSPopup
We describe our manual information-ﬂow analysis of the open-source app SMSPopup. The app
features customizable pop-up dialogs for displaying incoming SMS and MMS messages, and requests
several permissions. We model these permissions as information sources and sinks as done in
previous Android works [ARB13, AZHL12, FCH+11]. The app thus requests the privilege (and
will be able at runtime) to leak information from every such source to every such sink. However,
our manual inspection indicates that SMSPopup does not actually use all of its information ﬂow
capabilities: there is no need, in the frame of the app’s operation, to transfer information from
every source to every sink. Figure 6 shows the information ﬂows allowed by the app’s requested
permissions, vs. the actual information ﬂows exhibited by the app.
In particular, note that the device permissions allow the app to send contact list information
via outgoing SMS messages, which would be a privacy issue — but the app never invokes this
information ﬂow. The device permissions allow the device’s logs to interfere with SMS sending APIs
through the app, which would be an integrity issue — but the app never invokes this information
ﬂow.
A.2 MemTrack Data Access Handling Logic
As explained in Section A.2, data accesses by the DVM, in opcodes or by JNI calls, are classiﬁed
into three categories: Read a labeled element, Write a labeled element, and Move an n-ary operand
27
Figure 6: SMSPopup — Requested vs. Used Information Flow Capabilities
result (for which the arguments are labeled data elements) into some labeled element. The handling
logic for these events is detailed in Listing 2.
A.3 Android Binder
Understanding our analysis framework and its implementation requires understanding how processes
and components actually communicate in Android, using a fairly complicated architecture called
“Binder”. We therefore provide a brief overview of the Binder architecture.
The Android Binder architecture consists of a driver, along with native and Java middleware,
which implement Binder objects. Binder objects support passing their reference between processes
in a mechanism transparent to the programmer. They can be thought of as system-global objects.
Instance methods of Binder objects are executed in the process which instantiated the Binder object.
A Binder object reference is not necessarily globally available. Interestingly, two app processes
can share a new reference to a global object (instantiated within one of them) only through RPCs, as
described below. This implies that the two processes must have previously shared a reference to some
common Binder object. For this reason, there are a few well-known Binder objects, which we’ll refer
to as system services (not to be confused with a Service component, described in Appendix A.5).
These are typically created within the System Server process during system startup. After initiation
they are explicitly registered with the “Service Manager ” under a speciﬁc name — this is done using
a designated system call into the Binder driver. Any process can attain a proxy reference to such
a well-known named service, by initiating another designated system call to the Binder driver.
To deﬁne a global object, a programmer has to deﬁne an interface for the remote object, the
remote interface, and separately, an implementation. The interface has to extend the IInterface
interface.
The interface methods can only receive and return objects of speciﬁc types. Some of the basic
types — primitive types, String, CharSequence, List, Map — may be passed to and from a remote
method. Moreover, any user-deﬁned Parcelable object (see below) can also be speciﬁed in method
prototypes as an argument/return value. Additionally, other remote interfaces may be speciﬁed —
which means Binder objects (implementing these interfaces) can also be passed to and from RPC
methods.
28
/* This is the "code flag" (explained in Section 5.1.2).
False when in framework code, true in application code. */
boolean code_flag
/* DVM register containing the identity of the current component
(or NULL if there is none) */
component_identity current_component_identity
// TAINT LOGIC:
read(Taint taint)
{
if (code_flag) {
for identity in componentIdentitiesInBitmask(taint)
logFlowBetweenComponents(identity, current_component_identity)
}
}
write(Taint taint)
{
if (code_flag) {
taint.setBits(
taintBitForComponentIdentity(current_component_identity))
}
else {
taint.setBits(0) // Values written by framework are not tainted
}
}
move(Taint taint_from_1, Taint taint_from_2, ...,
Taint taint_from_n, Taint taint_to)
{
if (code_flag) {
read(taint_from_1)
read(taint_from_2)
...
read(taint_from_n)
taint_to.setBits(
taint_from_1.getBits() |
taint_from_2.getBits() |
... |
taint_from_n.getBits() |
taintBitForComponentIdentity(current_component_identity)
)
}
else { // Standard taint propogation
taint_to.setBits(
taint_from_1.getBits() |
taint_from_2.getBits() |
... |
taint_from_n.getBits()
)
}
}
Listing 2: Propogation primitives pseudocode.
29
Figure 7: Binder object class hierarchy (simpliﬁed)
For the basic types (primitive types, String, etc.) — the Binder framework contains methods
that ﬂatten objects of these types into buﬀers, and methods that unﬂatten the buﬀers back into
Java values. This enables passing such an object as a buﬀer between two processes through the
kernel (through the Binder driver).
Parcelable is an interface similar to Java’s Serializable. It contains a toParcel() method
and a (static) createFromParcel(byte array buffer) method. This facilitates ﬂattening Parcelable
objects into buﬀers to be passed between processes similarly to more basic types.
The case of passing Binder objects between processes is more complicated. It is, however, a
crucial part of the architecture, because it is the main facility that is used to actually share Binder
objects between diﬀerent processes. We therefore explain it in Section A.4.
A.4 Binder Object Propagation
A key to understanding how Binder objects work is understanding how a reference to such global
objects is created and shared between processes.
Binder objects implement some (app-speciﬁc) remote interface, which itself extends the IInterface
interface. As mentioned in Section A.3, the remote interface method prototype can specify argu-
ments or return values that implement the IInterface interface. Thus, Binder objects (which
always implement it) can be passed around between processes as arguments to methods of remote
objects.
Figure 7 is a (simpliﬁed) example of a class hierarchy, for the two example remote interfaces
IMyCallbackReceiver and IMyCallback. Recall that the user of the Binder framework deﬁnes
only the interface and its implementation.
Figure 8 depicts the process of instantiating a Binder object (implementing IMyCallback) in
process A, and passing a reference to Process B. Process B can then invoke an RPC of IMyCallback,
to be executed in Process A.
Within Process A, the Binder object reference for the IMyCallback-implementing object is
simply a reference to the instance of the implementing class. We call this reference a local reference.
30
Figure 8: Binder object propagation. (*) parceledCallback is a list of RPC arguments. Here, they
only contain one argument: a pointer to callback. (**) parceledCallbackToken is a buﬀer of
ﬂattened Parcelable objects which are the method arguments. Here, it’s just a token to callback.
So, to create a Binder object and attain a local reference — Process A simply has to instantiate an
object implementing this class (i.e., MyCallbackLocal).
Assuming that Process A has a reference to a Binder object residing in Process B, called a proxy
reference, it can pass any local reference as an argument to this remote object’s methods if doing
so adheres to the object’s remote interface.
IMyCallbackReceiver does deﬁne a method that receives an IMyCallback object as an input
argument. We assume Process B holds a local reference to an IMyCallbackReceiver object, and
Process A has a Remote Reference to this object. Therefore, Process A can initiate an RPC into
its IMyCallbackReceiver reference, which will send Process B a reference to the Binder object
implementing IMyCallback.
In Process B, like in all processes that use the Binder infrastructure, there is at least one Binder
thread. This thread reads messages from the Binder driver and calls into message-handling code.
In our scenario of an RPC from Process A to Process B, the Binder thread in Process B receives
from the kernel a message containing a pointer to the IMyCallbackReceiver object, a method
identiﬁer and the parceled arguments — including the proxy reference to the Binder object. The
Binder middleware casts the pointer into an IMyCallbackReceiver, extracts the arguments from
the parcel, and calls the method indicated by the method identiﬁer.
Under the hood, a proxy reference is actually a handle to a unique token identifying a Binder
object. This handle is received from the kernel, and is wrapped in a class implementing the remote
interface. The implementation of each interface method actually invokes a system call that passes
the handle, method identiﬁer and parceled arguments to the in-kernel Binder driver (see step 3 of
Figure 8). The method identiﬁer and parceled arguments are sent to the process which instantiated
the Binder object.
All of this is transparent; the user of the object does not need to be aware of RPCs underlying
proxy’s interface methods.
31
A.5 Android Inter-Component Communication (ICC)
Components communicate with each other using the system API for “Inter-Component Commu-
nication”. We use the term ICC to denote ICC via Android system services, not to be confused
with Binder IPC or RPC. Component code always runs within a process designated for the app.
However, components exist globally and ICC crosses app boundaries. In fact, every startup of the
app process is a result of cross-app-boundaries ICC with some other app (except for some apps
launched by the system on boot). The other app (sender) in such scenarios will typically (but not
necessarily) be one of the built-in Android OS apps. For example, the “Launcher” app sends a
“Launch” event to the activity corresponding with the icon pressed by the user. The other app can
also be just another app installed on the device, e.g., a social network app can broadcast a global
event once a notiﬁcation is received — Broadcast Receivers are subscribed to such events. This
provides ﬂexibility for developers.
ICC is mediated by the ActivityManagerService (AM ), which exposes an interface for com-
ponent interaction. When an app wishes to use a component (i.e., to use some service, access some
information, send some message, pop a UI window), it will invoke one of the AM Binder object’s
methods to request this. Ideally, the request should only specify an indication of what to do, which
of the four component types is expected to implement this behavior, and the arguments necessary
to do it (in other words, calls into system services specify policy rather than mechanism).
This speciﬁcation is usually called an Intent, and class Intent is designed such that its instances
represent such a request. It is up to the system service to resolve which component is most suitable
to perform the request, instantiate (if necessary) a process for the app containing this component,
and ﬁnally send the designated Binder object within this process an indication of exactly which
component entry-point to run. For example:
Intent intent = new Intent();
intent.setAction(Intent.ACTION VIEW, Uri.parse("tel:123456"));
startActivity(intent);
In this case, the call into startActivity indicates to the AM that the calling code intends for an
activity to “display the phone number 123456”. Typically, an Activity from the phone’s Dialer app
will pop up. It is possible for other apps to register for such intents as well. Intent resolution in these
cases generally has intricate rules, some of which have been discussed in previous work [CFGW11].
Content Providers (which expose databases on the device) are not accessed via an Intent
Instead of an Intent, a URI of the accessed content is passed (via the API) to the
object.
ActivityManagerService, which resolves content provider targets.
32