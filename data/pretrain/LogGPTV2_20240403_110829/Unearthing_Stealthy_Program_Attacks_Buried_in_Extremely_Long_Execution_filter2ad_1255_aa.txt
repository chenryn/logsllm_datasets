title:Unearthing Stealthy Program Attacks Buried in Extremely Long Execution
Paths
author:Xiaokui Shu and
Danfeng Yao and
Naren Ramakrishnan
Unearthing Stealthy Program Attacks
Buried in Extremely Long Execution Paths
Xiaokui Shu
Department of Computer
Science, Virginia Tech
Blacksburg, VA 24060
PI:EMAIL
Danfeng (Daphne) Yao
Department of Computer
Science, Virginia Tech
Blacksburg, VA 24060
PI:EMAIL
Naren Ramakrishnan
Department of Computer
Science, Virginia Tech
Blacksburg, VA 24060
PI:EMAIL
ABSTRACT
Modern stealthy exploits can achieve attack goals without
introducing illegal control ﬂows, e.g., tampering with non-
control data and waiting for the modiﬁed data to propa-
gate and alter the control ﬂow legally. Existing program
anomaly detection systems focusing on legal control ﬂow at-
testation and short call sequence veriﬁcation are inadequate
to detect such stealthy attacks. In this paper, we point out
the need to analyze program execution paths and discover
event correlations in large-scale execution windows among
millions of instructions. We propose an anomaly detection
approach with two-stage machine learning algorithms to rec-
ognize diverse normal call-correlation patterns and detect
program attacks at both inter- and intra-cluster levels. We
implement a prototype of our approach and demonstrate its
eﬀectiveness against three real-world attacks and four syn-
thetic anomalies with less than 0.01% false positive rates
and 0.1~1.3 ms analysis overhead per behavior instance (1k
to 50k function or system calls).
Categories and Subject Descriptors
K.6 [Management Of Computing And Information
Systems]: Security and Protection; D.4 [Operating Sys-
tems]: Security and Protection
General Terms
Security
Keywords
Intrusion Detection; Program Attack; Long Execution Path;
Function Call; Event Correlation; Machine Learning
1.
INTRODUCTION
Injecting library/system calls and tampering with return
addresses on the stack are popular early-age exploit tech-
niques. Modern exploits, however, are developed with more
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
© 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813654.
subtle control ﬂow manipulation tactics to hide them from
existing detection tools. One example is the sshd ﬂag vari-
able overwritten attack (an example of non-control data at-
tacks [5]). An attacker overwrites a ﬂag variable, which
indicates the authentication result, before the authentica-
tion procedure. As a result, the attacker bypasses critical
security control and logs in after a failed authentication.
Besides the aforementioned attack, stealthy attacks can
also be constructed based on existing exploits. Wagner and
Soto ﬁrst diluted a compact exploit (several system calls)
into a long sequence (hundreds of system calls) [46]. Kruegel
et al. further advanced this approach by building an attack
into an extremely long execution path [27].
In their pro-
posed exploit, the attacker accomplishes one element of an
attack vector, relinquishes the control of the target program,
and waits for another opportunity (exploited vulnerability)
to construct the next attack element. Therefore, the ele-
ments of the attack vector are buried in an extreme long
execution path (millions of instructions). We refer stealthy
attacks whose construction and/or consequence are buried
into long execution paths and cannot be revealed by any
small fragment of the entire path as aberrant path attacks.
Call-based program anomaly detection systems have been
proposed as a general solution to detect program attacks
without specifying attack signatures. Most existing pro-
gram anomaly detection systems can be categorized into
two detection paradigms: short call sequence validation and
ﬁrst-order automaton transition veriﬁcation. The former is
primarily based on deterministic [10, 11, 21] or probabilis-
tic [14, 29] n-grams (short fragments of a long trace) veri-
ﬁcation. The latter veriﬁes individual state transitions in
legal control ﬂows (a state refers to a system call plus the
program counter [39], a system call plus the call stack [9,23],
a user-space routine [16], or a code block [1]). Advanced ap-
proaches in these two paradigms adopt argument/data-ﬂow
analysis [3, 15, 16, 31], probabilistic measurement [18], and
event frequency analysis [13, 14, 47].
Existing anomaly detection solutions are eﬀective as long
as an attack can be discovered in a small detection window
on attack traces, e.g., an invalid n-gram or an illegal control
ﬂow transition (the latter can be accompanied by data-ﬂow
analysis). The aforementioned diluting attack [46] may be
detected if it involves illegal control ﬂows. However, there
does not exist eﬀective solutions for detecting general aber-
rant path attacks, because these attacks cannot be revealed
in a small detection window on traces.
Mining correlations among arbitrary events in a large-
scale execution window is the key to the detection of aber-
401rant path attacks that are buried in long execution paths.
The scale of the window may vary from thousands to millions
of instructions. However, straightforward generalization of
existing approaches is inadequate for large-scale execution
window analysis because of two challenges described below.
Training scalability challenge: existing automaton-based
methods are ﬁrst-order and only verify state transition indi-
vidually. One needs a linear bounded automaton or a Tur-
ing machine to enforce the relation among arbitrary events.
The generalization results in exponential time complexity
for training. n-gram based methods (e.g., lookahead pair,
practical hidden Markov model) have a similar exponential
convergence complexities in terms of n; large n (e.g., 40)
usually leads to false positives due to insuﬃcient training.
Behavior diversity challenge: real-world programs usually
realize various functionalities, which result in diverse pro-
gram behaviors within large-scale execution windows. The
distance between a normal program behavior and an anoma-
lous one can be less than the distance between two normal
ones. The diversity of normal behaviors makes traditional
single-threshold probabilistic methods (e.g., hidden Markov
model, one-class SVM) diﬃcult to ﬁne-tune for achieving
both a low false positive rate and a high detection rate.
To defend against aberrant path attacks, we propose a de-
tection approach that analyzes program behaviors in large-
scale execution windows. Our approach maps program be-
havior instances extracted from large-scale execution win-
dows into data points in a high-dimensional detection space.
It then leverages speciﬁcally designed machine learning tech-
niques to i) recognize diverse program behaviors, ii) discover
event correlations, and iii) detect anomalous program be-
haviors in various subspaces of the detection space.
In addition to the binary representation of event rela-
tions in an execution window, our approach further mod-
els quantitative frequency relations among occurred events.
Some aberrant path attacks deliberately or unintentionally
result in anomalous event frequency relations, e.g., Denial of
Service (DoS), directory harvest attack. The advantage of
modeling frequency relations over individual event frequen-
cies (used in existing anomaly detection [13]) is the low false
positive rates in case of program/service workload variation.
The contributions of our work are summarized as follows.
• We study the characteristics of aberrant path attacks
and identify the need to analyze program behaviors in
large-scale execution windows. We present a security
model for eﬃcient program behavior analysis through
event correlations in large-scale execution windows. The
security model covers the detection of two types of anoma-
lous program behaviors abstracted from four known cat-
egories of aberrant path attacks. The ﬁrst type contains
events (and their corresponding control-ﬂow segments)
that are incompatible in a single large-scale execution
window, e.g., non-control data attacks. The second type
contains aberrant relations among event occurrence fre-
quencies, e.g., service abuse attacks.
• We design a two-stage detection approach to discover
anomalous event correlations in large-scale execution win-
dows and detect aberrant path attacks. Our approach
contains a constrained agglomerative clustering algorithm
for addressing the behavior diversity challenge and di-
viding the detection problem into subproblems. Our
approach addresses the scalability challenge by utiliz-
1: void do_authentication(char *user, ...) {
2:
int authenticated = 0;
...
while (!authenticated) {
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
type = packet_read();
switch (type) {
...
case SSH_CMSG_AUTH_PASSWORD:
...
if (auth_password(user, password)) {
memset(password, 0, strlen(password));
xfree(password);
log_msg("...", user);
authenticated = 1;
break;
}
memset(password, 0, strlen(password));
debug("...", user);
xfree(password);
break;
...
}
if (authenticated) break;
...
Figure 1: sshd ﬂag variable overwritten attack [5].
ing ﬁxed-size proﬁling matrices and by estimating nor-
mal behavior patterns from an incomplete training set
through probabilistic methods in each cluster. The unique
two-stage design of our approach enables eﬀective detec-
tions of i) legal-but-incompatible control-ﬂow segments
and ii) aberrant event occurrence frequency relations at
inter- and intra-cluster levels.
• We implement a prototype of our approach on Linux
and evaluate its detection capability, accuracy, and per-
formance with sshd, libpcre and sendmail. The evalu-
ation contains over 22,000 normal proﬁles and over 800
attack traces. Our approach successfully detects all at-
tack attempts with less than 0.01% false positive rates.
We demonstrate the high detection accuracy of our clus-
tering design through the detection of four types of syn-
thetic anomalies. Our prototype takes 0.3~1.3 ms to an-
alyze a single program behavior instance, which contains
1k to 50k function/system call events.
2. SECURITY MODEL
We describe the attack model, explain our security goals,
and discuss three basic solutions toward the goals.
2.1 Aberrant Path Attack
We aim to detect aberrant path attacks, which contain
infeasible/inconsistent/aberrant execution paths but obey
legitimate control-ﬂow graphs. Aberrant path attacks can
evade existing detection mechanisms because of the follow-
ing properties of the attacks:
• not conﬂicting with any control-ﬂow graph
• not incurring anomalous call arguments
• not introducing unknown short call sequences
Aberrant path attacks are realistic threats and gain pop-
ularity since early-age attacks have been eﬃciently detected
and blocked. Concrete aberrant path attack examples are:
402a) Non-control data attacks hijack programs without ma-
nipulating their control data (data loaded into program
counter in an execution, e.g., return addresses). One
such attack, ﬁrst described by Chen et al. [5], takes
advantage of an integer overﬂow vulnerability found in
several implementations of the SSH1 protocol [28]. Il-
lustrated in Fig. 1, an attacker can overwrite the ﬂag
integer authenticated when the vulnerable procedure
packet_read() is called.
If authenticated is over-
written to a nonzero value, line 17 is always True and
auth_password() on line 7 is no longer eﬀective.
b) Workﬂow violation attacks can be used to bypass access
control [6], leak critical information, disable a service
(e.g., trigger a deadlock), etc. One example is presen-
tation layer access control bypass in web applications. If
the authentication is only enforced by the presentation
layer, an attacker can directly access the business logic
layer (below presentation layer) and read/write data.
c) Exploit preparation is a common step preceding the
launch of an exploit payload.
It usually utilizes legal
control ﬂows to load essential libraries, arranges mem-
ory space (e.g., heap feng shui [41]), seeks addresses
of useful code and data fragments (e.g., ASLR prob-
ing [40]), and/or triggers particular race conditions.
d) Service abuse attacks do not take control of a program.
Instead, the attacks utilize legal control ﬂows to com-
promise the availability (e.g., Denial of Service attack),
conﬁdentiality (e.g., Heartbleed data leak [19]), and ﬁ-
nancial interest (e.g., click fraud) of target services.
2.2 Anomalous Program Behaviors within
Large-scale Execution Windows
Aberrant path attacks cannot be detected by analyzing
events in small windows on program traces. We deﬁne se-
mantically meaningful execution windows and unearth aber-
rant path attacks in large-scale execution windows.
Definition 2.1. An execution window W is the entire
or an autonomous portion of a transactional or continuous
program execution.
Execution windows can be partitioned based on bound-
aries of program functionalities, e.g., login, session handling,
etc. Since aberrant path attacks can lead to delayed attack
consequences, e.g., non-control data attacks, the analysis
should be performed on large-scale execution windows. One
such window could contain tens of thousands of system calls
and hundreds of times more function calls.
We give some examples of practical large-scale execution
window partitioning for security analysis purposes:
i) partitioning by routines/procedures/functions,
ii) partitioning by threads or forked processes,
iii) partitioning by activity intervals, e.g., sleep(),
iv) an entire execution of a small program.
In large-scale execution windows, we abstract two com-
mon anomalous behavior patterns of aberrant path attacks.
1. Montage anomaly is an anomalous program behavior
composed of multiple legitimate control ﬂow fragments
that are incompatible in a single execution.
yes
x<0
no
call s1
other calls
call s2
other calls
y = -1
y = 1
yes
y<0
no
call s3
call s4
no
no
no
0<x<n
call s1
0<x<n
call s2
0<x<n
call s3
(a) The executions of s1
and s3 occur in the same
run, similarly for s2 and s4.
(b) s1, s2 and s3 occur
at the same frequency in a
run.
Figure 2: Examples of control ﬂows that illustrate event
co-occurrence patterns and occurrence frequency relations.
One example of a montage anomaly is the sshd ﬂag vari-
able overwritten attack presented in Fig. 1. The attack
incurs an execution path that contains two incompatible
execution segments:
i) fail-auth handling (line 13-16)
and ii) pass-auth execution (line 18-).
2. Frequency anomaly is an anomalous program behavior
with aberrant ratios/relations between/among event oc-
currence frequencies. Normal relations among frequen-
cies are established by: i) mathematical relations among
induction variables that are speciﬁed in the binary (e.g.,
Fig. 2b), and ii) normal usage patterns of the program.
One example of a frequency anomaly is a directory har-
vest attack against a mail server. The attack probes le-
gitimate usernames on the server with a batch of emails
targeting possible users. The attack results in an aber-
rant ratio between event frequencies in the server’s han-
dling procedures of existent/nonexistent receivers.
Sometimes an event occurrence frequency alone can in-
dicate an attack, e.g., DoS. However, the workload of a
real-world service may vary rapidly, and the individual
frequencies are imprecise to model program behaviors.
2.3 Security Goals
The key to the detection of montage anomalies and fre-
quency anomalies is to model and analyze the relations among