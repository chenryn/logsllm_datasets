title:Balboa: Bobbing and Weaving around Network Censorship
author:Marc B. Rosen and
James Parker and
Alex J. Malozemoff
Balboa: Bobbing and Weaving around 
Network Censorship
Marc B. Rosen, James Parker, and Alex J. Malozemoff, Galois, Inc.
https://www.usenix.org/conference/usenixsecurity21/presentation/rosen
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Balboa: Bobbing and Weaving around Network Censorship
Marc B. Rosen
Galois, Inc.
James Parker
Galois, Inc.
Alex J. Malozemoff
Galois, Inc.
Abstract
We introduce Balboa, a link obfuscation framework for cen-
sorship circumvention. Balboa provides a general framework
for tunneling data through existing applications. Balboa sits
between an application and the operating system, intercepting
outgoing network trafﬁc and rewriting it to embed data. To
avoid introducing any distinguishable divergence from the
expected application behavior, Balboa only rewrites trafﬁc
that matches an externally speciﬁed trafﬁc model pre-shared
between the communicating parties. The trafﬁc model cap-
tures some subset of the network trafﬁc (e.g., some subset of
music an audio streaming server streams). The sender uses
this model to replace outgoing data with a pointer to the as-
sociated location in the model and embed data in the freed
up space. The receiver then extracts the data, replacing the
pointer with the original data from the model before passing
the data on to the application. When using TLS, this approach
means that application behavior with Balboa is equivalent,
modulo small (protocol-dependent) timing differences, to if
the application was running without Balboa.
Balboa differs from prior approaches in that it (1) pro-
vides a framework for tunneling data through arbitrary (TLS-
protected) protocols/applications, and (2) runs the unaltered
application binaries on standard inputs, as opposed to most
prior tunneling approaches which run the application on non-
standard—and thus potentially distinguishable—inputs.
We present two instantiations of Balboa—one for audio
streaming and one for web browsing—and demonstrate the
difﬁculty of identifying Balboa by a machine learning classi-
ﬁer.
1 Introduction
The continued increase in Internet censorship across the
world [1] has spurred the research community to develop cen-
sorship resistant systems (CRSs). These systems seek to allow
a party within a monitored region to access censored content.
In this work we focus speciﬁcally on CRSs based on link
obfuscation. Link obfuscation aims to allow communication
between two or more parties such that a censor monitoring
(or manipulating) the network should not be able to detect
such communication. There are a wide array of such tools
(see Khattak et al.’s systemization [18] for a detailed summary
of CRSs—including those that focus on link obfuscation—
as of 2016) but they tend to fall into two main categories:
look-like-nothing approaches, which avoid detection by being
hard to classify as any particular type of trafﬁc, and look-like-
something approaches, which generate trafﬁc designed to look
like a protocol the censor does not wish to block. Look-like-
something approaches, themselves, generally fall within two
camps: mimicry and tunneling.
In the mimicry approach, a CRS produces network trafﬁc
designed to closely match the network trafﬁc of an exist-
ing implementation of the target protocol. Any differences
between this implementation and the CRS constitute distin-
guishing features that a sufﬁciently powerful censor could
target. In practice, CRSs that take the mimicry approach tend
to produce network trafﬁc with such distinguishing features.
This led Houmansadr et al. [17] to conclude that mimicry
approaches are “fundamentally ﬂawed.”
An alternative approach called tunneling directly runs a
concrete implementation of the target protocol, addressing
the key concern of the mimicry approach. To send data in
this approach, the standard implementation is run with a non-
standard input, which embeds the data to be sent. For exam-
ple, DeltaShaper [3] is a CRS that tunnels user data through
Skype by encoding data as simulated camera and microphone
inputs. The receiving party extracts the data by processing the
call’s output. Even though Skype data is encrypted, Wright
et al. [26] found that the sizes and timings of packets alone
can still leak information about the plaintext. As a result, a
censor who can observe the encrypted packets can determine
that the inputs to the Skype call are not standard inputs (e.g.,
the audio sounds like a dial-up modem instead of somebody
talking). While Barradas et al. [3] implemented techniques in
DeltaShaper to try to mitigate this information leak, the same
authors later showed [4] that the mitigation was insufﬁcient,
USENIX Association
30th USENIX Security Symposium    3399
and that (given labeled training data) a censor could discover
when DeltaShaper was in use.
In summary, mimicry approaches can be detected because
a CRS is unlikely to perfectly match a concrete implementa-
tion of the target protocol, and tunneling approaches can be
detected because the concrete implementation of the target
protocol is not run on standard inputs.
1.1 Our Approach
In this work, we introduce Balboa, a link obfuscation frame-
work that aims to address the above concerns by running
a concrete application implementing the target protocol on
standard inputs. The key insight is that if the communicating
parties know a priori some subset of the expected network
trafﬁc then that network trafﬁc does not actually need to be
sent, and could instead be replaced by arbitrary data. Bal-
boa handles this by sitting between the concrete application
and operating system, intercepting outgoing and incoming
network data. In addition, the communicating parties have a
pre-shared trafﬁc model which contains some subset of the
expected network trafﬁc. Whenever Balboa on the sender side
intercepts outgoing data contained in the model, it replaces
said data with a pointer to the appropriate location in the
model; Balboa on the receiver side then “inverts” this proce-
dure by using its own model to replace the pointer with the
actual data.
This approach has two key features: (1) the applications
themselves act exactly the same as if Balboa were not running,
and (2) the sender can insert arbitrary data into the “freed up”
bytes, since the pointer is much smaller than the data that
would have been sent. Importantly, Balboa does not assume
that the trafﬁc model is complete (or even accurate). Instead,
Balboa ﬁrst checks to see whether outgoing trafﬁc matches
the trafﬁc model before performing rewrite operations. If part
of the outgoing trafﬁc does not match the model, Balboa does
not modify it.
Balboa relies on TLS to hide the fact that the application
data itself changed—all other (non-timing) characteristics
of the trafﬁc (e.g., TLS record length) remain identical. In
particular, Balboa uses debugging features found in most TLS
libraries to extract the session key and uses this to decrypt
and re-encrypt the intercepted TLS trafﬁc.
Because Balboa only makes changes to the plaintext con-
tent of TLS-protected network trafﬁc, the fact that Balboa is
running is indistinguishable to a censor lacking the session
key for the connection, modulo a small protocol-dependent
timing delay. Importantly, unlike many censorship circumven-
tion approaches, Balboa does not modify the TLS handshake
at all. This makes it much more difﬁcult for the many censors
which have historically relied on TLS handshake ﬁngerprint-
ing [13] to identify Balboa.
As a concrete example, consider the setting where a client
C streams music from an audio streaming server S. The two
parties would like to use this channel to send covert data from
S to C. Balboa assumes a trusted setup phase where both C
and S agree on a symmetric key and playlist of songs; that is,
C knows a priori some subset of the songs S will stream. On
launch, S starts the audio streaming application (e.g., Icecast)
with Balboa, which intercepts outgoing trafﬁc produced by the
application and replaces the audio data with a pointer to where
in the playlist the given audio data corresponds. On C’s end,
Balboa intercepts incoming trafﬁc to C’s listening application
(e.g., VLC) and replaces the data with the actual audio data
(which C knows, as this info was pre-shared), before passing
on the data to the listening application.
Because network reads/writes originate within the (unmodi-
ﬁed) application, their lengths and behavioral characteristics—
modulo slight timing differences introduced by the processing
required by Balboa—exactly match that of the application run-
ning without Balboa. The Balboa framework also provides
a generic signaling technique to allow clients and servers to
covertly mutually authenticate each other. Because the server
runs an unmodiﬁed application binary, it could even be pro-
viding a legitimate service (such as a public audio streaming
channel in the above example). Normal clients can success-
fully connect to the Balboa-enabled server as usual, without
detecting anything about its circumvention capability.
Table 1 provides a comparison of Balboa to several mimicry
and tunneling approaches (see also our discussion of related
work in §7). While Balboa is not the ﬁrst CRS to use standard
input to drive the channel, it is the ﬁrst to provide a ﬂexible
framework while achieving signiﬁcantly higher goodput than
prior work.
Balboa, however, is not a panacea. It speciﬁcally relies on
TLS and the fact that TLS is not being man-in-the-middled
by a censor. In environments where TLS is expressly for-
bidden or actively man-in-the-middled (which occurs from
time to time [8]), Balboa may be detectable. Also, like most
CRSs, Balboa does not address the channel setup phase, the
phase most often attacked by censors [23]. However, despite
these drawbacks, Balboa offers a ﬂexible framework for build-
ing circumvention channels, one which generalizes prior ap-
proaches and which can be adjusted, by varying the model or
application, to the characteristics of the network environment
in which it is being deployed.
1.2 Our Contributions
To summarize, we make the following contributions:
• We introduce Balboa, an open-source framework for
censorship circumvention which embeds data in TLS-
protected trafﬁc generated by an unmodiﬁed application
binary. Balboa is designed to make it easy to spin-up
new instantiations for different applications and proto-
cols. While the high level idea of Balboa is relatively
straightforward, realizing an implementation is quite
3400    30th USENIX Security Symposium
USENIX Association
Scheme
FTE [9]
DeltaShaper [3]
Freewave [17]
Castle [15]
Rook [24]
Protozoa [5]
Unmodiﬁed
Binary
N/A
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Approach
Mimicry
Tunneling
Tunneling
Tunneling
Tunneling
Tunneling
Standard Does Not Require
Input
Encryption
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Flexible
(cid:88)
Goodput
1.9–42 Mbps∗
2.56 kbps
19 kbps
190 bps
26-34 bps
(cid:88)
160–1400 kbps
145 kbps∗∗
8 Mbps†
Balboa (audio streaming)
Balboa (web browsing)
∗ This range corresponds to an HTTP format on the low-end, and an SSH format on the high-end.
∗∗ When streaming an audio ﬁle encoded at 148 kbps.
† When downloading a video with bandwidth capped at 8 Mbps. In general, the goodput depends heavily on the assets being accessed by the client, and may
Tunneling
(cid:88)
(cid:88)
be much lower, or higher, than the number reported here.
Table 1: Comparison of several look-like-something link obfuscation schemes versus Balboa. “Unmodiﬁed Binary” denotes
those schemes that run an unmodiﬁed implementation of the target protocol under-the-hood, “Standard Input” denotes those
schemes that run on input that matches the expected input of the implementation, “Does Not Require Encryption” denotes those
schemes that do not rely on encryption for undetectability, “Flexible” denotes those schemes which provide frameworks for
supporting various applications/protocols, and “Goodput” denotes the covert throughput of the scheme.
complicated due to the need to minimize the effect Bal-
boa has on packet timings alongside avoiding subtle
attack vectors; see §2 for the architecture description
and §4 for implementation details.
• We describe two instantiations of Balboa (§3): one for
audio streaming and one for web browsing. In the au-
dio streaming case, Balboa is able to replace all of an
audio stream with arbitrary data—when streaming an
Ogg-Vorbis ﬁle with a bitrate of 148 kilobit/second this
corresponds to a 148 kilobit/second channel. In the web
browsing case, Balboa is able to replace all content trans-
mitted via HTTP including HTML, CSS, image, audio,
and video ﬁles.
• We provide a security analysis (§5) and evaluation (§6)
of Balboa against both passive and active adversaries.
Because the Balboa framework is extensible to new protocols
and new applications, we believe that its deployment could
help enable censorship circumvention providers to evolve
more quickly in response to developments of a censor’s capa-
bilities.
2 Architecture
Balboa provides a bidirectional1 channel-based censorship
circumvention framework for TLS-protected channels. The
framework needs to be instantiated for speciﬁc applica-
tions/protocols. In this work we demonstrate two such in-
stantiations: (1) audio streaming and (2) web browsing. We
1The bidirectionality is dependent on the application and network pro-
tocol used; for example, our audio streaming instantiation only achieves a
unidirectional channel.
Figure 1: The Balboa architecture. Yellow denotes Bal-
boa components, red denotes TLS-encrypted data, and green
denotes plaintext data. Boxes with dashed lines denote
instantiation-speciﬁc components of Balboa.
assume the censor monitors the network trafﬁc between the
two communicating parties and can use both passive and ac-
tive attacks to identify the channel. We also assume a trusted
setup phase where the communicating parties agree on some
shared information: a symmetric key and a trafﬁc model which
encodes the particular plaintext data to replace (cf. §2.1).
Figure 1 shows the overall Balboa architecture. Balboa sits
between an application and the network, intercepting outgo-
ing/incoming TLS streams (Steps 1 and 6). The intercepted
stream is then fed to a TLS rewriter (Step 2), which extracts
the underlying plaintext of the TLS stream. For outbound traf-
ﬁc, the plaintext is fed to a protocol-speciﬁc plaintext rewriter
that replaces the plaintext with a pointer to the appropriate
location in the trafﬁc model and ﬁlls in the leftover bytes
with any covert data to send (Step 3). For inbound trafﬁc, the
plaintext is again fed to a protocol-speciﬁc plaintext rewriter
that extracts the covert data and replaces the model pointer
USENIX Association
30th USENIX Security Symposium    3401
with the pointed-to data (Step 8). The TLS rewriter then re-
encrypts the (transformed) plaintext data before feeding it
back to the calling application (Steps 4 and 9).
In what follows we walk through this architecture in more
detail, discussing the relevant implementation considerations
along the way.
2.1 Trafﬁc Models
Balboa makes use of trafﬁc models that capture some subset
of the expected plaintext network trafﬁc between the commu-
nicating parties, and Balboa assumes that the communicating
parties have access to compatible models. While the trafﬁc
model structure is speciﬁc to a particular Balboa instantia-
tion, within a given Balboa instantiation the particular trafﬁc
model may differ between each pair of communicating parties.
For example, client C1 talking to audio streaming server S
may use a different trafﬁc model than client C2 talking to the
same server S. We discuss the trafﬁc model structures for our
instantiations in §3.
Importantly, the trafﬁc model need not be a model of the
entire interaction between the parties. This allows parties to
communicate N bytes of data without needing the model to
be of size O(N). In addition, for bidirectional instantiations of
Balboa, the trafﬁc model could even be learned by the client,
who could then update the server on the trafﬁc model to use.