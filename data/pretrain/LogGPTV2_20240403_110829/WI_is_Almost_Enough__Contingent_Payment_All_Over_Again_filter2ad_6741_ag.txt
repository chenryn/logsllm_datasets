signature to the problem of proving knowledge of a discrete loga-
rithm of an element with respect to a public basis. This will make
the algebraic link with the CP functionality very simple.
• In the case of ECDSA signatures, the secret to which the prover
will commit in com is 𝑠-1 so that the prover can then leverage7
the sigma-protocol from Figure 5 to prove relation (4), which
implies that the prover knows an opening to com which leads a
valid ECDSA signature for 𝑚.
sample 𝑎𝑠, 𝑎𝑡 , 𝑎𝑡′ ←$ Z𝑝
𝐴1 (cid:66) 𝑎𝑠 𝐴 + 𝑎𝑡 𝐵
𝐴2 (cid:66) 𝑎𝑠 𝐴′ + 𝑎𝑡′ 𝐵′ −−−−−−−−−−−→
←−−−−−−−−−−−
𝑧𝑠, 𝑧𝑡 , 𝑧𝑡′
−−−−−−−−−−−→ 𝑧𝑠 𝐴 + 𝑧𝑡 𝐵 = 𝑒 𝐶 + 𝐴1
∧ 𝑧𝑠 𝐴′+ 𝑧𝑡′ 𝐵′ = 𝑒 𝐶′+ 𝐴2
𝑧𝑠 (cid:66) 𝑠 · 𝑒 + 𝑎𝑠
𝑧𝑡 (cid:66) 𝑡 · 𝑒 + 𝑎𝑡
𝑧𝑡′ (cid:66) 𝑡′· 𝑒 + 𝑎𝑡′
sample 𝑒 ←$ Z𝑝
check
𝐴1, 𝐴2
𝑒
Figure 5: Sigma-protocol for the following relation, where
𝐶, 𝐶′, 𝐴, 𝐴′, 𝐵, 𝐵′ are elements of a group 𝐺 of order 𝑝:
PoK {(𝑠, 𝑡, 𝑡′) : 𝐶 = 𝑠 𝐴 + 𝑡 𝐵 ∧ 𝐶′ = 𝑠 𝐴′ + 𝑡′𝐵′}.
• In the case of RSA signatures, the secret to which the prover will
commit is in com is 𝑟, the value used for masking the signature
as 𝜎𝐻(𝑚)𝑟 (mod 𝑁 ). It will then leverage8 the sigma-protocol
from Figure 5 to prove relation (5), which implies that the prover
knows an opening to com that leads to a valid RSA signature
for 𝑚.
Remark 7. The protocol from Figure 5 is described using additive
notation (for the group law). In the case of RSA (computed over
the integers), additions should be interpreted as multiplications,
whereas multiplications should be interpreted as exponentiations.
Furthermore, in the case of RSA, the exponent of the group is
unknown to the verifier (it may also be unknown to the prover) for
that, the protocol should be modified, to sample values 𝑎𝑠, 𝑎𝑡 , 𝑎𝑡′
uniformly from Z𝑁 2 and leave values 𝑧𝑠, 𝑧𝑡 , 𝑧𝑡′ as integers (without
modular reduction, since the group exponent may be unknown).
The challenge 𝑒 can be sampled from Z𝑁 .
5.4 Results
All experiments were executed on two different machines connected
over a LAN of 1Gbps. The verifier ran on a 20-core machine, 3.50GHz
Intel-Core i9-9900X CPU and 32 GB of RAM. The prover ran on
a 8-core machine, 2.6GHz Intel-Core i7-6700HQ CPU and 16 GB
of RAM. Both machines were running Ubuntu 18.04 LTS. Every
experiment consists of the following steps:
(a) Both parties parse the circuit implementing 𝑓 from file and
parse a fixed predefined message. Such circuit has been pre-
designed before the protocol.
(b) The prover computes the corresponding (ECDSA or RSA) sig-
nature on the agreed message (the prover has previously gen-
erated a key pair and shared the public-key with the verifier).
(c) They perform the preparation phase. In the case of an ECDSA
signature (𝑟, 𝑠), the prover computes 𝑠-1 (the secret to be en-
crypted) and shares 𝑟 with the verifier (see Section 5.1). In the
case of an RSA signature 𝜎, the prover samples 𝑟 ←$ Z𝑁 (the
secret to be encrypted), masks the signature 𝑡 (cid:66) 𝜎ℎ𝑟 (mod 𝑁 )
and shares 𝑡 with the verifier (see Section 5.2). The prover also
encrypts the corresponding secret under a freshly generated
7With 𝐶 = com, 𝐴 = 𝐴, 𝐵 = 𝑃, 𝐶′ = 𝐾, 𝐴′ = SHA(𝑚)𝑃 + 𝐾𝑥 𝑄 and 𝐵′ = 0𝐺 .
8With 𝐶 = com, 𝐴 = 𝐴, 𝐵 = 𝑃, 𝐶′ = 𝑡𝑒/ℎ, 𝐴′ = ℎ𝑒 and 𝐵′ = 0𝐺 .
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA651Prover
Time (milliseconds)
Verifier
Scheme
ECDSA
RSA (2048) ×
RSA (4096) ×
3.6± 0.2
 Algebraic Arithmetic Algebraic Arithmetic
58± 2.1
×
131± 2.3
154± 3.3
476± 5.5
190± 3.1
720± 5.9
53± 2.3
74± 2.1
159± 3.0
213± 4.1
230± 3.5
334± 2.0
329± 3.2
161± 0.2
11 ± 4.0
85 ± 4.2
27± 0.2
Size
Circuit size (#gates)
AND XOR INV
Data transmitted
𝑃 → 𝑉
𝑉 → 𝑃
1.14 KB 3.63 MB
2K
0.81 MB
3.63 KB 20.3 MB 134K 496K 30K
6.63 KB 37.0 MB 244K 900K 57K
4.51 MB
92K
23K
8.25 MB
Total
144 ± 3.2
188 ± 3.5
2110± 3.3
1010± 6.9
3955± 4.4
1907± 6.4
Table 1: Experimental results of protocol applied to CP for selling an ECDSA/RSA signature on an agreed message. We consider
the algebraic and arithmetic computation time of both parties as well as the total time for the protocol execution (which
includes the data transmission time over the LAN). We present two rows per scheme, representing whether we have used (
)
compression () of data during the transmission or not (×).
key 𝑘, sending both the ciphertext and SHA(𝑘) to the verifier.
Finally, the prover computes a Pedersen-commitment com of
the secret and sends it to the verifier.
(d) They engage in the protocol described in Figure 4. Then, the
prover leverages the sigma-protocol from Figure 5 to build a
proof of knowledge of a secret that is both the value committed
in com and a satisfying solution to equation (4) in the case of
ECDSA or to equation (5) in the case of RSA.
(e) The verifier will accept the proof iff both proofs from the pre-
vious step are successful.
We have implemented ECDSA signatures over the NIST P256
Curve and the same curve is used for the Pedersen commitments.
Furthermore, for RSA, we have run experiments with both 2048 and
4096 bits modulus. In the case of ECDSA signatures, whose size can
be encoded in 256-bits (given our choice of parameters), we have
used OTP as the encryption scheme (since the key can be hashed
with SHA in one block). In the case of RSA, in order to maintain
short key size, we have chosen AES (128-bits key) in CBC mode
to encrypt the corresponding secret. Observe how the encryption
choice affects boolean circuit size (see Table 1).
In order to lift the honest-verifier ZK property of sigma-protocols
to full ZK, in our implementation the verifier commits to the chal-
lenge before receiving the first message, using a Pedersen-commit-
ment, which is perfectly-hiding. If the prover chooses the discrete
logarithm of this Pedersen-commitment’s base and reveals this
value at the end of the protocol, we have a proof of knowledge.
The experimental results shown in Table 1 correspond to the
execution of step (d) from the above list, which constitutes purely
the zero-knowledge proof of knowledge for the CP functionality.
Therefore, we do not present the times required for generating the
signature and preparing (𝑐, 𝑦). In all cases, we provide the average
time of 20 executions of the protocol (with a 95% confidence in-
terval). We separately present the execution time of both parties
with respect to the algebraic and arithmetic operations performed
by each of them. We also present details about the amount of data
transferred from prover to verifier (𝑃 → 𝑉 ) and from verifier to
prover (𝑉 → 𝑃) and the circuit size corresponding to the arithmetic
part of the proof. Every experiment is run with and without com-
pression of the transmitted data. Observe that compressing (and
decompressing) the data requires time. However, in the case of RSA,
compression can be a better choice, given the size of the data being
transmitted.
6 CONCLUSION
Given recent arguments on the security of subversion witness-
indistinguishable contingent payment protocols, we proved that
a presence of a trapdoor in the WI property suffices to formally
prove their security. We also presented an efficient interactive zero-
knowledge proof system for contingent payment protocol as an
alternative to SNARKs. We developed novel techniques to integrate
arithmetic (or non-algebraic) and algebraic statements on an inter-
active zero-knowledge proof system based on garbled circuits. Its
performance is demonstrated with a prototype for a quite practical
and general scenario of selling ECDSA or RSA signatures. In the
case of ECDSA signatures, given less than 150 ms of total execution
time, i.e., both seller’s and buyer’s, time including transmission
of less than 5MB of data over the LAN, we conclude that efficient
interactive zero-knowledge proofs can be a reasonable alternative
to the general approach with SNARKs for scenarios prepared in
advance.
ACKNOWLEDGMENTS
We would like to thank Matteo Campanelli and Antonio Faonio for
fruitful discussions and their helpful comments about this work;
and Antonio Nappa, for his expert advice and help with running
our experiments over LAN. We would also like to thank Foteini
Baldimtsi and the anonymous reviewers of ACM CCS 2020 for their
valuable time and feedback.
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA652REFERENCES
[1] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz
Mazurek. 2014. Fair Two-Party Computations via Bitcoin Deposits. In FC 2014
Workshops (LNCS, Vol. 8438), Rainer Böhme, Michael Brenner, Tyler Moore, and
Matthew Smith (Eds.). Springer, Heidelberg, 105–121. https://doi.org/10.1007/978-
3-662-44774-1_8
[2] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz
Mazurek. 2015. On the Malleability of Bitcoin Transactions. In FC 2015 Workshops
(LNCS, Vol. 8976), Michael Brenner, Nicolas Christin, Benjamin Johnson, and Kurt
Rohloff (Eds.). Springer, Heidelberg, 1–18. https://doi.org/10.1007/978-3-662-
48051-9_1
[3] D. F. Aranha et al. [n.d.]. RELIC is an Efficient LIbrary for Cryptography. https:
//github.com/relic-toolkit/relic.
sudoku.
[4] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2013.
More efficient oblivious transfer and extensions for faster secure computation.
In ACM CCS 2013, Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung (Eds.).
ACM Press, 535–548. https://doi.org/10.1145/2508859.2516738
[5] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2017.
More Efficient Oblivious Transfer Extensions. Journal of Cryptology 30, 3 (July
2017), 805–858. https://doi.org/10.1007/s00145-016-9236-6
[6] Waclaw Banasik, Stefan Dziembowski, and Daniel Malinowski. 2016. Efficient
Zero-Knowledge Contingent Payments in Cryptocurrencies Without Scripts. In
ESORICS 2016, Part II (LNCS, Vol. 9879), Ioannis G. Askoxylakis, Sotiris Ioannidis,
Sokratis K. Katsikas, and Catherine A. Meadows (Eds.). Springer, Heidelberg,
261–280. https://doi.org/10.1007/978-3-319-45741-3_14
[7] Mihir Bellare, Georg Fuchsbauer, and Alessandra Scafuro. 2016. NIZKs with an
Untrusted CRS: Security in the Face of Parameter Subversion. In ASIACRYPT 2016,
Part II (LNCS, Vol. 10032), Jung Hee Cheon and Tsuyoshi Takagi (Eds.). Springer,
Heidelberg, 777–804. https://doi.org/10.1007/978-3-662-53890-6_26
[8] Mihir Bellare, Viet Tung Hoang, and Phillip Rogaway. 2012. Foundations of
garbled circuits. In ACM CCS 2012, Ting Yu, George Danezis, and Virgil D. Gligor