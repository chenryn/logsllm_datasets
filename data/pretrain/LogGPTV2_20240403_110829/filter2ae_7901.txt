### 优化后的文本

在与朋友的一次闲聊中，他提到了想尝试渗透测试一个日本网站。由于已经有一段时间没有进行过此类操作，他感到有些生疏。于是，他向我分享了该站点的信息，并邀请我一同参与这次挑战。

#### 初步信息收集
我们首先进行了常规的信息搜集工作，包括IP地址和开放端口的扫描。解析得到的IP为 _._.19*.102。通过端口扫描，我们发现了以下开放的服务：

- **21/tcp** - FTP服务
- **80/tcp** - HTTP服务（Microsoft IIS httpd 10.0）
- **6379/tcp** - Redis服务
- **8085/tcp** - HTTP服务（nginx 1.16.1 tianhe）
- **8089/tcp** - HTTP服务（404错误页面）
- **8098/tcp** - HTTP服务（404错误页面）

#### 探索Redis服务
注意到Redis服务可能未授权访问，我们决定从这里入手。经过一番尝试，发现确实存在弱密码保护。利用这一漏洞，我们成功登录到一个管理系统。借助强大的字典攻击工具和针对朋友名字的社会工程学方法，配合Burp Suite的Intruder功能，仅用两分钟便获得了超级管理员权限。

#### 系统文件上传尝试
进一步探索时，在开发环境中找到了几个允许PUT方法的文件上传点。然而，直接上传修改过的文件却遭遇失败，系统返回了一个Java异常：“Failed to parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location”。这表明目标服务器上缺少必要的临时目录。因此，我们改为使用JSP后门技术，如冰蝎加密马。

#### MySQL日志写入尝试
浏览过程中还发现了一个SQL数据库管理界面，看起来是直接拼接SQL语句执行查询。试图通过设置慢查询日志来植入WebShell，但因URL编码问题及解释器处理方式而未能成功。

#### Shiro反序列化漏洞
分析数据包时注意到有rememberMe=deleteMe标识，提示可能存在Apache Shiro框架下的反序列化漏洞。然而，深入研究后发现请求只携带Token而不使用Cookie，故此路径被放弃。

#### Redis未授权访问
最终回到Redis服务上，考虑到其常见的未授权访问风险，决定再次尝试。尽管Windows环境下限制较多，只能写入WebShell且需获知真实路径，但我们还是设法找到了一个目录浏览功能，并从中推测出多个Tomcat实例的位置。经过多次试验，终于在某个特定目录下成功部署了WebShell。

#### 总结与建议
此次经历提醒我们在安全防护方面应注意以下几点：
1. 避免设置弱密码，采用强复杂度密码以增强安全性。
2. 不要将非必要的服务暴露于公网之中。
3. 对敏感数据如登录凭证进行加密处理，不要单纯依赖Token验证用户身份。
4. 日常运营中尽可能使用低权限账户运行关键业务组件。

通过这次合作，不仅加深了彼此间的友谊，也让我们共同学习到了许多宝贵的安全知识。