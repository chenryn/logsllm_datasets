这些加固机制由DanRosenberg开发，首次进入的Linux内核版本是2.6.38。因此，使用这
个版本或后续版本内核的Android设备中都有对这一特性的支持，但是不一定被启用。20l1年11月，
2e7c833和f9557fb两个commit被提交到AOSP，它们在默认initrc文件中分别将kptr_restrict
和dmesg_restrict的值设置为2和1。Andriod4.1.1是第一个包含了这些变化的版本。
注意Linux内核源代码树的Documentation/sysct/kermel.txt文件中有关于这些设置的更多介绍。
12.13.2保护零地址页
空指针解引用是影响内核代码的一个问题。在Linux系统中的最低内存地址（0x00000000）
处通常不会映射任何内容。但是，在2007年EricParis实现mmap_min_addr保护措施之前，攻
击者可以在用户空间映射这个零地址页，然后将任意内容填进这片内存区域。通过触发内核空间
的空指针相关问题，在许多情况下就可以导致内核空间任意代码执行。
保护方法mmap_min_addr的原理很简单，就是阻止用户空间进程映射低于指定阔值的内存
页。为其设定的默认值是4096，用于防止映射最低的页。不过目前绝大部分操作系统都会进一
---
## Page 334
318
第12章漏润利用缓解技术
步提高这个值
这个保护机制从Linux2.6.23开始进入内核。Android的官方文档称2.3版首次采用了这个保
护机制，然而对一系列设备进行测试的结果显示，它在运行Android2.1的设备中就已经存在了。
2011年，编号为 27cca21的commit将默认init.rc文件中的这个值改为32768。Android4.1.1是第
一个包含这一变化的版本。
12.13.3只读的内存区域
利用Linux内核漏洞时，经常要修改函数指针、数据结果或者内核的代码。为了限制这类攻
击，有些Android设备将内核的某些内存区域设置为只读来进行保护。可惜的是，只有基于高通
MSM芯片的设备（如Nexus4）启用了这类内存保护。
2011年2月，Larry Bassel为MSM内核源码增加了一个名为CONFIG_STRICT_MEMORY_RWX
的内核配置选项。下面是SMS内核源代码树中arch/arm/mm/mmu.c文件的片段：
1Edef CONFIG_STRICT_MEHORY_RNX
 + 
map -pfn = phys_to_pfn (__pa (start_rodata) ) :
map.length = init_begin - _start_rodata;
map.virtua1 = (unsigned long)_start_rodata,)
map - tyPe = Mr_MEMORY_R:
create_mapping (&map, false) :;
Belse
nap.length = end - start)
fendif
nap -type = MT_MEMORY:
可以看到，在启用CONFIG_STRICT_MEMORY_RWX的情况下，内核在为只读数据创建内存
区域时会使用类型为MT_MEMORY_R的内存。使用这种设置时，硬件会阻止对该内存区域的写入。
不过这一保护措施也存在一些缺陷。首先，将内存切分成许多节会导致少量的内存浪费。如
果这些节小于1MB，剩下的空间就会被浪费。其次，缓存系统的性能会受到轻微影响。最后，
会让内核代码无法写入，使调试变得复杂。在内核调试时，通常会在代码中插入断点指令，用于
调试内核的工具在此时无法操作只读的内核代码段。
12.14其他加固措施
除了前面提到的利用缓解机制，Android生态系统中的许多利益相关者还实现了一些其他的
加固措施。Android官方和OEM经常直接针对已公开的一些漏润利用手段或代码对操作系统作
出相应的改进。其中一些可以从根本上阻止漏洞利用，但也有很多只是在已知攻击手段面前简单
地设置了一个障码。也就是说，这些障碍只能阻止攻击全过程中的某些步骤。通常，这些步骤对
于漏洞利用来说都不是必需的，攻击者使用起来也很容易。不过即便效果不大，这些改进措施也
还是提高了Android系统的整体安全性。
---
## Page 335
12.14其他加固措施319
三星对其设备上运行的定制版Android作了大量的修改。前面已经提到，三星在Galaxy S4
上实现了 SELinux。在Galaxy S2和 S3等一些设备中，三星修改了adbd文件，让其始终降权
运行。这样可以让一些利用build.prop和localprop中标志位来获得root权限的方法失效。三
星在编译时禁用了ALLOW_ADBD_ROOT 标志（定义在AOSP源代码树的 system/core/adb/adb.c
文件中），轻松地实现了这一点。Galaxy S4发布时，三星还修改了其Linux内核，增加了一个
编译时的内核选项cONFIG_SEC_RESTRICT_SETUID，用于防止代码从非root情况提权到root。
在某些特定的情况下，只要将root用户的ID（也就是o）传给setuid和setgid系列函数，
就会导致内核返回错误，从面阻止提权操作。GalaxyS4还引人了一个名为CONFIG_SEC
RESTRICT_FORK的内核选项，用于防止以root用户身份执行/data/目录下的程序。此外，还能
防止非root进程以root权限创建新的进程。
其他OEM也实现了一些自己的加固方案。HTC的一个著名方案是NAND存储的加锁机制，
也就是所谓的S-ON。启用这个机制后，即使闪存中某块区域的分区已经被moumt成了可读可写
的模式，也能阻止对这块区域的写入。这样，除非禁用该NAND保护，否则漏洞利用代码无法
修改/system分区。东芝也在某个型号的设备中引人了名为sealime.ko的内核模块，前面已经介绍
过，该模块实现了许多类似于SELinux的安全限制。
在NickKralevich的带领下，Android官方团队对核心操作系统进行了进式的改进和加固。
特别是在4.0.4、4.1和4.2.2发布时，许多改动使一些特定的漏洞利用变得更困难或失效。
在4.0.4发布后，Android中的init程序在处理init.re配置中的chmod、chowm和mkdir操
作时，不再跟随符号链接进行操作。这个变动对应system/core/init仓库的两个commit：42a9349
和9edlfe7，可以有效阻止基于init脚本中符号链接文件系统的漏洞利用。第3章包含一个这样
的案例。
Android4.1对log日志功能和umask属性进行了改动。对于前者，从这个版本开始，第三方
软件不能再使用READ_LOGS权限。这可以防止间谋软件读取其他应用程序log日志中可能存在
的敏感信息。例如，网银软件可能租心地将用户密码记录到了log日志中，间课软件就可能会读
取到这个密码并回传给攻击者。4.1之后，所有第三方软件都只能读取自已的日志数据。对于后
者，主要修改了默认的umask值。创建文件和文件夹时，如果没有明确地设置权限，这个值将
用于生成权限。此前，umask的默认值是0000，这意味着文件和目录可以被系统中其他任何用
户（任何应用程序）写入。Android4.1将其修改为0077，从而默认文件只能被其创建者访问。
这两个改进都提高了Android设备的整体安全性。
警告在修改umask的跌认设置时，专门为ADB创建了一个例外，使得ADB创建的文件依然
有完全自由的访问权限。因此，用ADB创建文件时需要特别小心。
12
Android4.2中有几个改动进一步提高了安全性。首先，对于targetAPI大于等于17的应用，
谷歌修改了其中Content Provider的exported属性默认值。在这个版本之前，即使没有对应用
程序显式地设置exported，所有的ContentProvider也都默认可以被其他应用程序访问。而在此
---
## Page 336
320第12章漏洞利用缓解技术
之后，默认的exported值变为false，也就是说，如果应用程序开发者想将其ContentProvider
暴露给其他软件访问，就需要手动显式地将这个属性设置为true。其次，这个版本还更新了
SecureRandom类的实现。这样，在使用同一个初始种子值时，伪随机数序列输出会变得更加不
可预测。SecureRandom类的一个构造函数以参数形式接受一个随机数种子值。在这次变动之前，
如果使用这个构造函数，产生的将是确定的随机值序列。也就是说，创建这个类的两个对象并让
其使用相同的种子值，就会产生完全一样的随机数序列。而这次变动之后，这种情况将不再发生。
最近，Android4.2.2对使用ADB的开发者访问方式进行了加固。2012年，Robert Rowley和
KyleOsbom的研究工作让大家开始关注通过ADB进行的数据窃取。虽然此类攻击需要对设备进
行物理接触，但依然有两种方法可以快速便捷地实现。第一种是Juice Jacking，指攻击者使用一
个定制的手机充电器引诱没有疑心的用户插人设备。在第二种方法中，攻击者则直接使用自己的
手机和一条特制的microUSB线从其他用户的手机中窃取数据，不需要其他计算机或特殊设备。
为了阻止此类攻击，谷歌开启了一个名为ro.adb.secure的开关设置。启用该设置后，任何尝试通
过ADB访问设备的机器都需要用户首先进行手动许可。图12-1就是此时弹出的提示框。
图12-1ADB白名单机制
当Android设备连接到主机时，主机会将RSA密钥提交给设备，然后将该密钥的指纹呈现给
用户以获得许可，如图12-1所示。用户可以选择记住这台主机的密钥，使对话框以后不再弹出。
这个功能既缓解了KyleOsbom所述的攻击，也可以防止设备丢失或被盗后里面的数据被访间。
需要指出的是，本节介绍的加固方案并不完整，可能还有许多其他改进等待发现，包括本书
写作期间被陆续实现和采用的其他机制。
12.15漏洞利用缓解技术总结
Android第一个发布版本中的漏洞利用缓解技术比大部分其他Linux系统少。这很让人异，
因为作为许多缓解技术的实验验证平台，Linux一直扮演着领路人的角色。Linux被移植到ARM
平台后，却很少有人关注如何在这个平台上支持这些缓解技术。随着Android变得越来越流行，
---
## Page 337
12.15漏洞利用缓解技术总结
321
其安全团队逐渐加大了对利用缓解的覆盖率，来保护整个生态体系。到果冻豆时，Android已经
实现了大部分现代利用缓解技术，并且承诺将更多缓解技术加人进来。表12-1给出了Android
采用各类缓解技术的时间线。
表12-1Android核心系统对缓解技术的支持历史
18
本
采用的缓解技术
1.5
在 Biomic中禁用en格式捕述符
二进制文件编译时启用栈cookie（-Estack-protector）
使用 safe_iop床
使用加固的 dmalloc
实现cal1oc整数溢出检查
在内核中支持XN
2.3
二进制文件编译时启用不可执行的栈和堆机制
官方文档称加人了 mmap_min_addr
二进制文件编译时使用-wformat-security-Werr
4.0
随机化栈地址
随机化mmap（库文件、置名映射）的地址
4.0.2
随机化堆地址
4.0.4
ehown、chmod 和 mkdir 改为使用 NOFOLLO 标志
4.1
将umask默认值改为0077
限制 xEAD_LOGS
随机化 linker的段地址
二进制文件编译时使用 RELBO 和 BIND_NOW
二进制文件编译时使用PIE
启用 dnesg_restrict 和 kptr_restriet
引人隔离的 Service
4.1.1
将mmap_min_addr 的值增至32768
4.2
Content Provider默认不再暴露
为SecureRandom引人更多的种子使其无法预测
开始使用FORTIFY_SOURCB=1
4.2.2
默认启用ro.ad.secure
4.3
加人 SELinux并启用 permissive 模式
移除所有使用了 setuid和setgid的程序
阻止应用执行 set-uid 程序
12
实现在 zygote 和adbd 中减少 Linux 能力
4.4
SELimux 启用emforcing 模式
开始使用FORTIFY_SOURCE=2
---
## Page 338
322
第12章漏洞利用缓解技术
除了在操作系统自身中实现各类缓解技术，还需要在AndroidNDK中加人相应支持。表12-2
给出了在AndroidNDK中默认启用各类（编译器支持的）缓解技术的时间线。
表12-2AndroidNDK对缓解技术的支持历史
版
本
引入的缓解技术
二进制文件编译时使用栈cookie（-fstack-protector）
4b
二进制文件编泽时启用不可执行的栈和堆机制
8b
二进制文件编译时使用RELRO 和 SIND_NOW
二进制文件编泽时使用PIE
9
进制文件编译时使用-wformat=security Werror=fomat-security
12.16禁用缓解机制
有时候需要临时禁用一些缓解机制，比如开发漏润利用代码或者进行简单的实验时。有些缓
解机制很容易禁用，但是有些很难做到。本节介绍如何有意地禁用这些保护措施。如果在日常使
用的设备上禁用系统级的缓解机制，则需要特别小心，因为这会让系统更容易被攻破。