title:Automated Identification of Cryptographic Primitives in Binary Code
with Data Flow Graph Isomorphism
author:Pierre Lestringant and
Fr&apos;ed&apos;eric Guih&apos;ery and
Pierre-Alain Fouque
Automated Identiﬁcation of Cryptographic Primitives in
Binary Code with Data Flow Graph Isomorphism
Pierre Lestringant*
Frédéric Guihéry*
Pierre-Alain Fouque†
*AMOSSYS
R&D Security Lab
Rennes, France
ﬁPI:EMAIL
†Université de Rennes 1 and
Institut Universitaire de France
Rennes, France
ﬁPI:EMAIL
ABSTRACT
Softwares use cryptographic algorithms to secure their com-
munications and to protect their internal data. However the
algorithm choice, its implementation design and the gener-
ation methods of its input parameters may have dramatic
consequences on the security of the data it was initially sup-
posed to protect. Therefore to assess the security of a binary
program involving cryptography, analysts need to check that
none of these points will cause a system vulnerability. It im-
plies, as a ﬁrst step, to precisely identify and locate the cryp-
tographic code in the binary program. Since binary analysis
is a diﬃcult and cumbersome task, it is interesting to devise
a method to automatically retrieve cryptographic primitives
and their parameters.
In this paper, we present a novel approach to automati-
cally identify symmetric cryptographic algorithms and their
parameters inside binary code. Our approach is static and
based on Data Flow Graph (DFG) isomorphism. To cope
with binary codes produced from diﬀerent source codes and
by diﬀerent compilers and options, the DFGs is normalized
using code rewrite mechanisms. Our approach diﬀers from
previous works, that either use statistical criteria leading to
imprecise results, or rely on heavy dynamic instrumentation.
To validate our approach, we present experimental results on
a set of synthetic samples including several cryptographic al-
gorithms, binary code of well-known cryptographic libraries
and reference source implementation compiled using diﬀer-
ent compilers and options.
Categories and Subject Descriptors
D.2.7 [Distribution, Maintenance, and Enhancement]:
Restructuring—reverse engineering, and reengineering; D.4.6
[Information Systems Applications]: Cryptographic con-
trols; I.2.8 [Problem Solving, Control Methods, and
Search]: Graph and tree search strategies
Keywords
Static Binary Analysis, Reverse Engineering, Cryptography
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714639.
1.
INTRODUCTION
When assessing software security, analysts pay special at-
tention to cryptographic algorithms for several reasons. First
the algorithm choice may be problematic. Algorithms that
have not been thoroughly analyzed or for which practical
attacks have been published are insecure and should not be
used. For instance, practical collision can be found for the
MD5 hash function [33], however it is still not uncommon
to ﬁnd it in applications. Second, the algorithm’s imple-
mentation may not be compliant with the speciﬁcations. It
was the case for GnuPG that used a faster implementation
of the signature scheme DSA by relying on smaller nonces
[23]. This was instrumental in an attack that enabled to re-
cover the signer’s private key in less than a second. Because
such liberties taken from the speciﬁcations may reduce the
algorithm security, they should be detected so that they can
be carefully analyzed. Third, the algorithm’s implementa-
tion may leak information about secret data. Today, it is
well-known that the most eﬃcient attacks use side-channel
information. Thus it is essential to check if these attacks ex-
ist on the implementation being evaluated. The cache tim-
ing attack against the table implementation of AES [26] and
the recent attack based on acoustic leakage against RSA [12]
are good examples of practical side-channel attacks. Finally,
despite a secure implementation, poorly generated input pa-
rameters can still aﬀect the system security. Therefore the
analyst will be particularly interested in how the key, the IV
or the padding are generated. For instance, attacks known
as padding oracle [21, 28] target insecure padding scheme.
The ability to conduct these analyses at the binary level
is important because source code is not always available.
And even when it is, the compiler may introduce security
breaches [5, 30] that can only be revealed by looking at the
binary code. It is clear that a ﬁrst prerequisite will be to ﬁnd
and identify cryptographic primitives in binary code. There-
fore, designing automated mechanisms to address this spe-
ciﬁc problem should be highly proﬁtable for security experts
who have a limited amount of time to assess the security of
software.
The solution we proposed, based on static analysis and
more particularly on data ﬂow graph isomorphism is able to
identify and accurately locate cryptographic algorithms and
their parameters inside binary executables. Our solution
targets symmetric cryptographic algorithms. We choose not
to address the problem of code obfuscation because the ob-
jective of our method is to deal with the kind of general soft-
ware that is typically reviewed during product certiﬁcation
203and not to speciﬁcally target applications such as malwares
that would have involved heavy obfuscation. In summary,
this paper makes the following contributions:
• We present a sound and eﬃcient approach to auto-
matically identify and locate symmetric cryptographic
algorithms and their parameters in binary code.
• We propose a normalization process and a signature
matching scheme that is resistant against compiler op-
timizations and source code variations.
• We present the results of an experimental study that
demonstrates the eﬃciency of our approach on well-
known cryptographic libraries.
The remainder of the paper is structured as follows. In
Section 2 we present more formally the previous works on
the ﬁeld of cryptographic identiﬁcation. Then, we present at
a high-level our solution in Section 3: the DFG is described
in Section 4, the normalization process in Section 5, the
signature design in Section 6 and the subgraph isomorphism
algorithm due to Ullman is recalled in Section 7. Finally, in
Section 8 we give experimental results.
2. RELATED WORK
The topic of cryptographic primitives identiﬁcation in bi-
nary programs has been previously addressed. In this Sec-
tion we will ﬁrst present and discuss the limitations of two
characteristics used to identify cryptographic code: data
constant and input/output relationship. Finally we will
brieﬂy list other lines of work that are closely related.
2.1 Data Constant
Symmetric cryptographic algorithms often contain speciﬁc
constants. These constants range from a single value of a
few bits to large lookup tables of several kilobytes. Because
it is unlikely to ﬁnd them in diﬀerent algorithms, they can
be used to identify cryptographic code. This is a widely
used technique and it has been implemented in several pub-
licly available tools, such as Findcrypt2 (IDA plugin) [14],
KANAL (PEiD plugin), or H&C Detector, to name but a
few. As far as we know all tools based on constant iden-
tiﬁcation solely rely on static analysis. However we should
bear in mind that constant identiﬁcation can also be per-
formed using dynamic analysis. This is particularly useful
in the case of packed programs, or for constants that are
dynamically computed.
Despite its simplicity and its eﬃciency the constant identi-
ﬁcation technique does not meet our precision and reliability
requirements. We exhibit some of the limitations of con-
stant identiﬁcation with the following example, that uses an
AES table implementation as a target. A reminder on pos-
sible AES implementations is given in Appendix A. Given
a binary program, let us assume the AES S-Box has been
detected by one of the previously listed tools. The precise lo-
cation of the AES encryption/decryption routines still needs
to be investigated.
In fact multiple parts of the program
can access the S-Box, such as: the AES key schedule (either
for encryption or decryption) or a 4 kilobytes lookup tables
generation routine. Moreover the parameters (including the
key size) have not been identiﬁed. Finally, the detected al-
gorithm could be another cryptographic primitive that uses
the AES S-Box, such as the Fugue hash function [15] or the
LEX stream cipher [6].
To conclude, constant identiﬁcation may be a very eﬀec-
tive ﬁrst step, but it should not be used as a standalone
technique to precisely and completely uncover cryptographic
primitives.
2.2 Input/Output Relationship
The I/O relationship identiﬁcation technique relies on the
following hypothesis: given a cryptographic primitive f :
I → O, the relationship between an input value and the
corresponding output value identiﬁes f with an overwhelm-
ing probability.
In other words, if during an execution a
program fragment reads a value i ∈ I and writes a value
o ∈ O such that f (i) = o, we can conclude that this frag-
ment implements the primitive f .
From a practical perspective, the targeted program is ﬁrst
executed in a Dynamic Binary Instrumentation (DBI) envi-
ronment. The exact values manipulated by the program
are recorded in an execution trace. The execution trace is
then split into fragments using the loop abstraction accord-
ing to the hypothesis that cryptographic code manipulates
their arguments within loops. This observation is used to
narrow the search space by only considering what happens
inside loops’ body. For each fragment F a set of input and
output arguments (called respectively IF and OF ) are re-
constructed from its instructions’ operands. Finally, given a
database of cryptographic reference implementations P , we
search f ∈ P such that: i ∈ IF and f (i) ∈ OF .
Gr¨obert et al.
[13] were the ﬁrst to use the I/O rela-
tionship to recognize cryptographic primitives. Zhao et al.
[34] also used the I/O relationship, but instead of using the
loop abstraction to extract candidates, they split the trace
in terms of functions. More recently, Calvet et al. [7] pro-
posed a complete and detailed tool named Aligot based on
the I/O relationship. Aligot includes a new loop deﬁnition
and the analysis of the data ﬂow between loops to produce
the best candidate for I/O testing.
However in our opinion two problems remain unaddressed
by this approach. The ﬁrst problem is fragment extraction
in the case of unrolled loops. Loop unrolling is a common
technique used by software engineers or compilers to reduce
branch penalties and increase instruction level parallelism.
It is not uncommon to encounter unrolled loops in crypto-
graphic code as performance is a major concern. However
according to our observations even Calvet loop’s deﬁnition
is unable to cope with unrolled loop: since loop unrolling is
not the ultimate step of an optimization process, unrolled
loops are not the exact repetition of a sequence of dynamic
instructions.
The second problem concerns the parameters reconstruc-
tion. Instruction’s operands have to be aggregated to form
input and output parameters for reference implementations.
Previous works [13, 34, 7] have provided rules to concate-
nate memory operands (based on spatial proximity either in
code or in memory). However nothing has been proposed
to concatenate register operands. Without external infor-
mation, we must resort to a brute force approach. Given
n operands, the number of parameters resulting from ev-
(n−k)! .
ery combination and permutation of k operands, is:
This is not tractable in practice if we consider that the same
parameter may be distributed in the memory and in regis-
ters, as it is for instance often the case for the states of the
n!
204AES or MD5. In that case n is the sum of the number of
registers operands an the number of memory operands.
To conclude, the I/O relationship identiﬁcation method
has several qualities: parameters identiﬁcation, no false pos-
itive and resilient against implementation variations. How-
ever we have identiﬁed two blind spots: unrolled loops and
parameters reconstruction.
2.3 Miscellaneous
In this section we list works that do not directly address
the problem of cryptographic identiﬁcation, but are closely
related. A ﬁrst line of work is automatic decryption of
encrypted communication received by a binary executable.
Given a known or an unknown decryption algorithm, the ob-
jective is to automatically retrieve decrypted data from the
process memory. This problem deserves to be mentioned
here, since it requires to detect where and when the crypto-
graphic code is and implies at least to identify the output pa-
rameter (or conversely the input parameter for encryption).
Lutz [20] was the ﬁrst to address this problem in the context
of malware analysis. He devised a dynamic technique based
on data tainting and several heuristics including loops, inte-
ger arithmetic operations and entropy (an entropy drop may
indicate a decryption). ReFormat [31] is a tool designed to
automate the protocol reverse engineering of encrypted mes-
sages. It also uses data tainting to track the encrypted data
in memory, but solely relies on arithmetic and bitwise in-
structions to discern the decryption phase. Finally Wang
et al. [29] proposed a novel approach for automated Digital
Rights Management (DRM) removal from streaming media.
Their approach is driven by real-time constraints. The de-
cryption algorithm is revealed by a randomness decrease in
memory buﬀers manipulated by loops. According to this
study randomness should be preferred over entropy to dis-
sociate encrypted data from compressed data.
A second closely related area is binary clone detection. It
is a more general problem but some of the techniques used
might be of some interest for cryptographic primitive iden-
tiﬁcation. Sæbjørnsen et al.
[25] based their binary clone
detection on the comparison of features vectors, which char-
acterize a code fragment in terms of instruction mnemon-
ics and operands. Finally, Rendezvous [19] identiﬁes binary
code fragment using statistical model relying on instruction
mnemonics, Control Flow Graph (CFG) subgraph and data
constants. Experiments carried out by the authors show
resilience to the use of diﬀerent compilers and compiler’s
options.
3. SOLUTION OVERVIEW
DFGs are a natural way to represent the dependencies
between operations. They are also convenient to rewrite
program code, i.e. to modify the code without breaking its
semantics, as illustrated by their many uses in the compiler
ﬁeld for code optimizations [4]. For those two reasons the
DFG representation appears well suited to address the prob-
lem of cryptographic algorithm identiﬁcation. First it will
be easy to extract speciﬁc subsets of related operations to
form accurate signatures. Second, it will be possible to re-
move some of the variations that exist between diﬀerent in-
stances of the same algorithm, by rewriting the DFG. These
variations have either been introduced in the source code or
during the compilation. Ideally there should be a unique sig-
nature that matches every instance. Thus these variations
should be removed leading to a canonical form that contains
the signature.