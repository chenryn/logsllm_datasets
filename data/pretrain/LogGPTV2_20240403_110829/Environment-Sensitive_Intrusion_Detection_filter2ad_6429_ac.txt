1. The convergence of a context-sensitive value with an unrecovered value is
non-destructive. The analyzer can continue to propagate the known value with
execution context (Fig. 7). Figure 8 shows the model for the example code with
context-sensitive arguments. The statically known ﬁlename passed to the ﬁrst call
to unlink (call site 1 in Fig. 7) constrains that call. Intuitively, we need not discard
the recovered context-sensitive value because the monitor, at runtime, can compare
the value’s context information with the executing process’ call stack to determine
if the argument restriction should be enforced.
2. When multiple context-sensitive values converge, no information is lost. Distinct
calling contexts remain distinct. By preserving context, we can enforce the asso-
ciation between multiple arguments passed to a system call at the same call site.
Recall the previous example of opening both a temporary ﬁle and a critical ﬁle
with different access privileges. Since our analysis will annotate both the ﬁlename
and the access mode at each call site with that site’s calling context, an attacker
cannot open the critical ﬁle with anything other than read-only access.
The monitor enforces an argument restriction only when the execution path followed
to the system call contains the call-site address annotating the argument value. The
monitor walks the call stack of the process at every system call to identify the calling
196
J.T. Gifﬁn et al.
context of the system call. If the call-site address that annotates a value exists in the
calling context, the monitor enforces the corresponding argument restriction. If no ar-
gument was recovered for a particular context, the monitor will not constrain allowed
values at runtime.
5 Environment-Sensitive Models
Environment-sensitive intrusion detection further restricts allowed process execution
based upon the known, ﬁxed data in the execution environment. Environment-sensitive
program models do not include the data directly, but rather encode dependencies to en-
vironment data that will be evaluated immediately before the process begins execution.
We ﬁrst formalize the notions of environment properties and dependencies between
the environment and a program.
Deﬁnition 2. The environment is program input known at process load time and ﬁxed
for the entire execution of the process.
This includes environment variables, command-line parameters, and conﬁguration ﬁle
contents. The deﬁnition excludes environment variables altered or overwritten during
execution. In our measurements, only about 3% of the programs installed with Solaris
8 modify at least one environment variable.
Deﬁnition 3. A property of the environment is a single variable, parameter, or conﬁg-
uration setting in a ﬁle.
A property may be present or omitted in the environment, and, if present, may have an
associated value. An environment dependency captures the relation between environ-
ment properties and the program’s execution behavior.
Deﬁnition 4. Let E be the set of all environments containing property x. Let I be the
set of all non-environment program inputs. Let V alue(p, d, e, i) denote the possibly-
inﬁnite set of values program point p may read from data location d given environment
e and program input i. An environment dependency exists between x and p if
∃f, d
(cid:2)∀e ∈ E ∀i ∈ I [V alue(p, d, e, i) = f(p, x)]
(cid:3)
.
In words: over all possible executions, a program data value at p depends only upon
the value of x. The function f characterizes how the data value depends upon the envi-
ronment property.
The deﬁnition is intuitively similar to the deﬁnition of a def-use relation in programming
language analysis [15]. The environment deﬁnes a data value that is later used by the
executing process. Where existing program analyses examine only relations between
instructions in the program, we extend the notion of value deﬁnition to the environment.
Dependencies are of interest only if they affect program behavior visible to the exe-
cution monitor. We focus on two classes of dependencies, both of which are present in
the example code of Fig. 3. Control-ﬂow dependencies exist at program branches where
the branch direction followed depends upon an environment property. Data-ﬂow depen-
dencies occur when a visible data value, such as a system-call argument, is dependent
upon the environment. The value of the environment property ﬂows to the system-call
argument.
Environment-Sensitive Intrusion Detection
197
5.1 Control-Flow Dependencies
Control-ﬂow dependencies restrict allowed execution paths based upon the values of
the environment. The variable tested at a program branch may be dependent upon
an environment property. For example, the if statement of line 16 guards the exec
call so that it executes only when “–L” is omitted from the command line. The
program’s data variable used in the branch test is dependent upon “–L”, as in De-
ﬁnition 4. As an immediate consequence, the branch direction followed depends
upon “–L”. Similarly, the switch statement at line 8 has an environment control-
ﬂow dependency upon “–L” and will execute the case at line 9 only when “–L”
is present.
The static analyzer can encode control-ﬂow dependencies into the Dyck model
with predicate transitions. Figure 9 shows the model of Fig. 8 with predicate transi-
tions characterizing the environment dependency. The predicate L- is satisﬁed only
when the command line does not contain “–L”. Likewise, L+ is satisﬁed when “–L”
is present.
The execution monitor evaluates predicate transitions when loading the model for a
program about to execute. Predicates satisﬁed by the environment become -transitions.
An -transition is transparent and allows all events following the transition. Conversely,
the monitor deletes edges with predicates that are not satisﬁed by the environment, as
legitimate process execution cannot follow that path. If the command line passed to the
example code of Fig. 3 does not contain “–L”, then the L- transition in Fig. 9 will allow
the subsequent exec and the L+ transition will be removed to prevent the model from
accepting the following unlink and link calls.
5.2 Data-Flow Dependencies
System-call argument values may also depend upon environment properties. In partic-
ular, programs frequently use environment values when computing strings passed to
system calls as ﬁlenames. These values can signiﬁcantly restrict the allowed access of
the process, and hence an attacker that has subverted the process. In the example code
unlink
("/home/user/tmpfile")
L−
L+
exec
("/sbin/mail")
unlink
(?)
link
(?,?)
Fig. 9. Dyck model with environment branch dependencies. The symbols L- and L+ are branch
predicates that allow subsequent system calls when the command-line parameter “–L” is omitted
or present, respectively.
198
J.T. Gifﬁn et al.
(Fig. 3), the environment variable TMP gives the system temporary directory used as
the preﬁx to the ﬁlename argument of lines 11 and 12. The property constrains the
unlink at line 11 so that the only ﬁles it could remove are temporary ﬁles. The para-
meter to the command-line property “–L” fully deﬁnes the ﬁlename passed as the ﬁrst
argument to link. Many real-world programs exhibit similar behavior. The Apache web
server, for example, uses the command-line property “–d” to specify the server’s root
directory [11].
Environment data-ﬂow dependencies augment existing system-call arguments re-
covered using techniques from Sect. 4. Figure 5 adds argument dependencies to the
previous model of Fig. 9. A bracketed environment property indicates that the argu-
ment is simply a template value and must be instantiated with the actual value of the
property at program load time.
Figure 5 is the completed environment-sensitive Dyck model with context-sensitive
argument encoding. When the program of Fig. 3 is loaded for execution, the monitor
reads the current environment and instantiates the model in that environment. Template
argument values are replaced with the actual values of the environment properties upon
with the argument depends. The ﬁnal, instantiated models appear in Fig. 6, as described
in Sect. 3.
5.3 Dependency Identiﬁcation
This paper aims to demonstrate the value of environment-sensitive intrusion detection
and does not yet consider the problem of automated dependency identiﬁcation. We
assume that environment dependencies have been precomputed or manually speciﬁed.
In our later experiments, we manually identiﬁed environment dependencies via iter-
ative model reﬁnement. At a high-level, this process parallels counterexample-guided
abstraction reﬁnement used in software model checking: the Dyck model is an abstrac-
tion deﬁning correct execution, and we iteratively reﬁne the model with environment
dependencies to improve the abstraction [2]. We monitored a process’ execution and
collected a trace of reachable and potentially malicious system calls as described in
Sect. 6. The trace included the calling context in which each potentially malicious call
occurred. We inspected the program’s code to determine if either:
– The argument passed to a call-site in the calling context depended upon environ-
ment information and reached the system call; or
– A branch guarded one of the call-sites and the branch predicate depended upon the
environment.
Function-call arguments and branch predicates depend upon the environment if a back-
ward slice of the value reaches a function known to read the environment, such as
getenv or getopt. We added the dependency to the Dyck model and repeated the
iteration. In practice, the number of dependencies added via iterative reﬁnement was
small: each program in our experiments contained between 10 and 24 dependencies.
Manual speciﬁcation clearly has drawbacks. It requires the user to understand
low-level process execution behavior and Dyck model characteristics. Manual work
is error-prose and can miss dependencies obscured by control-ﬂows that are difﬁcult
to comprehend. However, we believe that dependency identiﬁcation is not limited to
manual speciﬁcation.
Environment-Sensitive Intrusion Detection
199
We postulate that automated techniques to identify environment dependencies with
little or no direction by an analyst are certainly feasible. Summary functions for C li-
brary calls that read the environment would enable our existing static data-ﬂow analysis
to automatically construct environment-dependent execution constraints. Complex de-
pendencies could be learned via dynamic analysis. A dynamic trace analyzer could cor-
relate environment properties with features of an execution trace to produce
dependencies.
This paper makes clear the beneﬁts of model specialization based upon environment
dependencies. The improvements noted in Sect. 7 motivate the need for implementation
of the techniques to automatically identify dependencies. We expect future work will
address these implementation issues.
6 Average Reachability Measure
Measurements of a model’s precision and its ability to prevent attacks indicate the ben-
eﬁts of various analyses and model construction techniques. Previous papers have mea-
sured model precision using the average branching factor metric [20, 22, 9, 10, 5]. This
metric computes the average opportunity for an attacker who has subverted a process’
execution to undetectably execute a malicious system call. After processing a system
call, the monitor inspects the program model to determine the set of calls that it would
accept next. All potentially malicious system calls in the set, such as unlink with an
unconstrained argument, contribute to the branching factor of the current monitor con-
ﬁguration. The average of these counts over the entire execution of the monitor is the
average branching factor of the model. Lower numbers indicate better precision, as there
is less opportunity to undetectably insert a malicious call. The set of potentially mali-
cious system calls was originally deﬁned by Wagner [22] and has remained constant for
all subsequent work using average branching factor.
Average branching factor poorly evaluates context-sensitive program models with
stack update events, such as the Dyck model used in this paper. Typical programs have
two characteristics that limit the suitability of average branching factor:
– Programs often have many more function calls and returns than system calls. The
number of stack update events processed by the monitor will be greater than the
number of actual system-call events.
– Programs rarely execute a system-call trap directly. Rather, programs indirectly
invoke system calls by calling C library functions.
These characteristics have important implications for both the stream of events observed
by the monitor and the structure of the Dyck model. The ﬁrst characteristic implies that
stack updates dominate the event stream. The second characteristic implies that at any
given conﬁguration of the monitor, the set of events accepted next are predominantly
safe stack update events that do not contribute to the conﬁguration’s branching factor. In
fact, a potentially malicious system call is not visible as the next possible event until the
process’ execution path has entered the C library function and the monitor has processed
the corresponding stack event for that function call. The number of potentially malicious
system calls visible to the monitor decreases, artiﬁcially skewing the computed average
200
J.T. Gifﬁn et al.
branching factor downward. The call-stack-based model is not as precise as its average
branching factor makes it appear.
We have extended average branching factor so that it correctly evaluates context-
sensitive models with stack update events and does not skew results. Our average reach-
ability measure uses context-free language reachability [23] to identify the set of actual
system calls reachable from the current conﬁguration of the monitor. Rather than simply
inspecting the next events that the monitor may accept, the average reachability measure
walks forward through all stack events until reaching actual system calls. The forward
inspection respects call-and-return semantics of stack events to limit the reachable set
of system calls to only those that monitor operation could eventually reach. After each
actual system-call event, we recalculate the set of reachable system calls and count the
number that are potentially malicious. The sum of these counts divided by the number
of system calls generated by the process is the average reachability measure.
The average reachability measure subsumes average branching factor. Both met-
rics have the identical meaning for context-insensitive models and for context-sensitive
models without stack events, such as Wagner and Dean’s abstract stack model [20], and
will compute the same value for these model types. Average reachability measures for
call-stack-based models may be directly compared against measures for other models,
allowing better understanding of the differences among the various model types.
We implemented the average reachability measure using the post* algorithm from
push-down systems (PDS) research [4]. We converted the Dyck model into a PDS rule-
set and generated post* queries following each system call. The post* algorithm is
the same as that used by Wagner and Dean to operate their abstract stack model. Note
that we use the expensive post* algorithm for evaluation purposes only; the monitor
still veriﬁes event streams via the efﬁcient Dyck model.
7 Experimental Results
We evaluated the precision of environment-sensitive program models using average
reachability. A precise model closely represents the program for which it was con-
structed and offers an adversary little ability to execute attacks undetected. To be use-
ful, models utilizing environment sensitivity and our argument analysis should show
improvement over our previous best techniques [5, 10]. On test programs, our static
argument recovery improved precision by 61%–100%. Adding environment sensitivity
to the models increased the gains to 76%–100%. We end by arguing that model-based
intrusion detection systems that ignore environment information leave themselves sus-
ceptible to evasion attacks.
7.1 Test Programs
We measured model precision for four example UNIX programs. Table 1 shows work-
loads and instruction counts for the programs tested. Note that instruction counts in-
clude instructions from all shared objects on which the program depends. Procmail
additionally uses code in shared objects loaded explicitly by the program via dlopen.
As our static analyzer does not currently identify libraries loaded with dlopen, we
manually added the dependencies to this program.
Environment-Sensitive Intrusion Detection
201
Table 1. Test programs, workloads, and instruction counts. Instruction counts include instructions
from any shared objects used by the program.
Program
procmail Filter a 1 MB message to a local mailbox.
mailx
Workload
Send mode: send one ASCII message.
Receive mode: check local mailbox for new email.
Compress 13 MB of ASCII text.
Write 13 MB of ASCII text to a ﬁle.
gzip
cat
Instruction Count
374,103
207,977
196,242
185,844
These programs, our static analyzer, and our runtime monitor run on Solaris 8 on
SPARC. The monitor executes as a separate process that traces a process’ execution via
the Solaris /proc ﬁle system. To generate stack events for the Dyck model, the monitor
walks the call stack of the process before every system call, as done by Feng et al. [6].
By design, the full execution environment of the traced process is visible to the moni-
tor. The environment is actually passed to the monitor, and the monitor then forks and
executes the traced process in that environment with an environment-sensitive model.
7.2 Effects of Static Argument Analysis
We used average reachability to evaluate models constructed for these four test pro-
grams. We compared three different versions of the Dyck model using varying de-
grees of static data-ﬂow analysis (Fig. 10). We report two sets of results for mailx
because it has two major modes of execution, sending and receiving mail, that produce
signiﬁcantly different execution behavior. Other programs with modes, such as com-
pressing or decompressing data in gzip, did not exhibit notable changes in precision
measurements.
First, we used a Dyck model without any data-ﬂow analysis for system-call argu-
ment recovery. Although there is some overlap between our current test programs and
test programs previously used with a Dyck model [10], we reiterate that the results com-
n
o
i
s
i
c
e
r
P
l
e
d
o
M
2
1
0
procmail
mailx (send)