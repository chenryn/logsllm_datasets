---
title: Pydantic types
date: 20201002
author: Lyz
---
Where possible *pydantic* uses [standard library types](#standard-library-types)
to define fields, thus smoothing the learning curve. For many useful
applications, however, no standard library type exists, so *pydantic* implements
[many commonly used types](#pydantic-types).
If no existing type suits your purpose you can also implement your
[own pydantic-compatible types](#custom-data-types) with custom properties and
validation.
# [Standard Library Types](https://pydantic-docs.helpmanual.io/usage/types/#standard-library-types)
*pydantic* supports many common types from the python standard library. If you
need stricter processing see [Strict Types](#strict-types); if you need to
constrain the values allowed (e.g. to require a positive int) see
[Constrained Types](#constrained-types).
`bool` : see
[Booleans](https://pydantic-docs.helpmanual.io/usage/types/#booleans) for
details on how bools are validated and what values are permitted.
`int` : *pydantic* uses `int(v)` to coerce types to an `int`; see
[this](pydantic.md#data-conversion) warning on loss of information during data
conversion.
`float` : similarly, `float(v)` is used to coerce values to floats.
`str` : strings are accepted as-is, `int` `float` and `Decimal` are coerced
using `str(v)`, `bytes` and `bytearray` are converted using `v.decode()`, enums
inheriting from `str` are converted using `v.value`, and all other types cause
an error.
`list` : allows `list`, `tuple`, `set`, `frozenset`, or generators and casts to
a list.
`tuple` : allows `list`, `tuple`, `set`, `frozenset`, or generators and casts to
a tuple.
`dict` : `dict(v)` is used to attempt to convert a dictionary.
`set` : allows `list`, `tuple`, `set`, `frozenset`, or generators and casts to a
set.
`frozenset` : allows `list`, `tuple`, `set`, `frozenset`, or generators and
casts to a frozen set.
`datetime.date` : see [Datetime Types](#datetime-types) below for more detail on
parsing and validation.
`datetime.time` : see [Datetime Types](#datetime-types) below for more detail on
parsing and validation.
`datetime.datetime` : see [Datetime Types](#datetime-types) below for more
detail on parsing and validation.
`datetime.timedelta` : see [Datetime Types](#datetime-types) below for more
detail on parsing and validation.
`typing.Any` : allows any value include `None`, thus an `Any` field is optional.
`typing.TypeVar` : constrains the values allowed based on `constraints` or
`bound`, see [TypeVar](#typevar).
`typing.Union` : see [Unions](#unions) below for more detail on parsing and
validation.
`typing.Optional` : `Optional[x]` is simply short hand for `Union[x, None]`; see
[Unions](#unions) below for more detail on parsing and validation.
`typing.List` :
`typing.Tuple` :
`typing.Dict` :
`typing.Set` :
`typing.FrozenSet` :
`typing.Sequence` :
`typing.Iterable` : this is reserved for iterables that shouldn't be consumed.
See
[Infinite Generators](https://pydantic-docs.helpmanual.io/usage/types/#infinite-generators)
below for more detail on parsing and validation.
`typing.Type` : see [Type](#type) below for more detail on parsing and
validation.
`typing.Callable` : see
[Callable](https://pydantic-docs.helpmanual.io/usage/types/#callable) for more
detail on parsing and validation.
`typing.Pattern` : will cause the input value to be passed to `re.compile(v)` to
create a regex pattern.
`ipaddress.IPv4Address` : simply uses the type itself for validation by passing
the value to `IPv4Address(v)`.
`ipaddress.IPv4Interface` : simply uses the type itself for validation by
passing the value to `IPv4Address(v)`.
`ipaddress.IPv4Network` : simply uses the type itself for validation by passing
the value to `IPv4Network(v)`.
`enum.Enum` : checks that the value is a valid member of the enum; see
[Enums and Choices](#enums-and-choices) for more details.
`enum.IntEnum` : checks that the value is a valid member of the integer enum;
see [Enums and Choices](#enums-and-choices) for more details.
`decimal.Decimal` : *pydantic* attempts to convert the value to a string, then
passes the string to `Decimal(v)`.
`pathlib.Path` : simply uses the type itself for validation by passing the value
to `Path(v)`.
## Iterables
### [Define default value for an iterable](https://stackoverflow.com/questions/63793662/how-to-give-a-pydantic-list-field-a-default-value)
If you want to define an empty list, dictionary, set or other iterable as a
model attribute, you can use the `default_factory`.
```python
from typing import Sequence
from pydantic import BaseModel, Field
class Foo(BaseModel):
    defaulted_list_field: Sequence[str] = Field(default_factory=list)
```
It might be tempting to do
```python
class Foo(BaseModel):
    defaulted_list_field: Sequence[str] = []  # Bad!
```
But you'll follow the
[mutable default argument](python_anti_patterns.md#mutable-default-arguments)
anti-pattern.
## [Unions](https://pydantic-docs.helpmanual.io/usage/types/#unions)
The `Union` type allows a model attribute to accept different types, e.g.:
```python
from uuid import UUID
from typing import Union
from pydantic import BaseModel
class User(BaseModel):
    id: Union[int, str, UUID]
    name: str
user_01 = User(id=123, name="John Doe")
print(user_01)
# > id=123 name='John Doe'
print(user_01.id)
# > 123
user_02 = User(id="1234", name="John Doe")
print(user_02)
# > id=1234 name='John Doe'
print(user_02.id)
# > 1234
user_03_uuid = UUID("cf57432e-809e-4353-adbd-9d5c0d733868")
user_03 = User(id=user_03_uuid, name="John Doe")
print(user_03)
# > id=275603287559914445491632874575877060712 name='John Doe'
print(user_03.id)
# > 275603287559914445491632874575877060712
print(user_03_uuid.int)
# > 275603287559914445491632874575877060712
```
However, as can be seen above, *pydantic* will attempt to 'match' any of the
types defined under `Union` and will use the first one that matches. In the
above example the `id` of `user_03` was defined as a `uuid.UUID` class (which is
defined under the attribute's `Union` annotation) but as the `uuid.UUID` can be
marshalled into an `int` it chose to match against the `int` type and
disregarded the other types.
As such, it is recommended that, when defining `Union` annotations, the most
specific type is included first and followed by less specific types. In the
above example, the `UUID` class should precede the `int` and `str` classes to
preclude the unexpected representation as such:
```python
from uuid import UUID
from typing import Union
from pydantic import BaseModel
class User(BaseModel):
    id: Union[UUID, int, str]
    name: str
user_03_uuid = UUID("cf57432e-809e-4353-adbd-9d5c0d733868")
user_03 = User(id=user_03_uuid, name="John Doe")
print(user_03)
# > id=UUID('cf57432e-809e-4353-adbd-9d5c0d733868') name='John Doe'
print(user_03.id)
# > cf57432e-809e-4353-adbd-9d5c0d733868
print(user_03_uuid.int)
# > 275603287559914445491632874575877060712
```
## [Enums and Choices](https://pydantic-docs.helpmanual.io/usage/types/#enums-and-choices)
*pydantic* uses python's standard `enum` classes to define choices.
```python
from enum import Enum, IntEnum
from pydantic import BaseModel, ValidationError
class FruitEnum(str, Enum):
    pear = "pear"
    banana = "banana"
class ToolEnum(IntEnum):
    spanner = 1
    wrench = 2
class CookingModel(BaseModel):
    fruit: FruitEnum = FruitEnum.pear
    tool: ToolEnum = ToolEnum.spanner
print(CookingModel())
# > fruit= tool=
print(CookingModel(tool=2, fruit="banana"))
# > fruit= tool=
try:
    CookingModel(fruit="other")
except ValidationError as e:
    print(e)
    """
    1 validation error for CookingModel
    fruit
      value is not a valid enumeration member; permitted: 'pear', 'banana'
    (type=type_error.enum; enum_values=[,
    ])
    """
```
## [Datetime Types](https://pydantic-docs.helpmanual.io/usage/types/#datetime-types)
*Pydantic* supports the following
[datetime](https://docs.python.org/library/datetime.html#available-types) types:
- `datetime` fields can be:
  - `datetime`, existing `datetime` object
  - `int` or `float`, assumed as Unix time, i.e. seconds (if >= `-2e10` or \ `2e10`) since 1 January 1970
  - `str`, following formats work:
    - `YYYY-MM-DD[T]HH:MM[:SS[.ffffff]][Z[±]HH[:]MM]]]`
    - `int` or `float` as a string (assumed as Unix time)
- `date` fields can be:
  - `date`, existing `date` object
  - `int` or `float`, see `datetime`
  - `str`, following formats work:
    - `YYYY-MM-DD`
    - `int` or `float`, see `datetime`
- `time` fields can be:
  - `time`, existing `time` object
  - `str`, following formats work:
    - `HH:MM[:SS[.ffffff]]`
- `timedelta` fields can be:
  - `timedelta`, existing `timedelta` object
  - `int` or `float`, assumed as seconds
  - `str`, following formats work:
    - `[-][DD ][HH:MM]SS[.ffffff]`
    - `[±]P[DD]DT[HH]H[MM]M[SS]S` (ISO 8601 format for timedelta)
## [Type](https://pydantic-docs.helpmanual.io/usage/types/#type)
*pydantic* supports the use of `Type[T]` to specify that a field may only accept
classes (not instances) that are subclasses of `T`.
```python
from typing import Type
from pydantic import BaseModel
from pydantic import ValidationError
class Foo:
    pass
class Bar(Foo):
    pass
class Other:
    pass
class SimpleModel(BaseModel):
    just_subclasses: Type[Foo]
SimpleModel(just_subclasses=Foo)
SimpleModel(just_subclasses=Bar)
try:
    SimpleModel(just_subclasses=Other)
except ValidationError as e:
    print(e)
    """
    1 validation error for SimpleModel
    just_subclasses
      subclass of Foo expected (type=type_error.subclass; expected_class=Foo)
    """
```
## [TypeVar](https://pydantic-docs.helpmanual.io/usage/types/#typevar)
`TypeVar` is supported either unconstrained, constrained or with a bound.
```python
from typing import TypeVar
from pydantic import BaseModel
Foobar = TypeVar("Foobar")
BoundFloat = TypeVar("BoundFloat", bound=float)
IntStr = TypeVar("IntStr", int, str)
class Model(BaseModel):
    a: Foobar  # equivalent of ": Any"
    b: BoundFloat  # equivalent of ": float"
    c: IntStr  # equivalent of ": Union[int, str]"
print(Model(a=[1], b=4.2, c="x"))
# > a=[1] b=4.2 c='x'
# a may be None and is therefore optional
print(Model(b=1, c=1))
# > a=None b=1.0 c=1
```
# [Pydantic Types](https://pydantic-docs.helpmanual.io/usage/types/#pydantic-types)
*pydantic* also provides a variety of other useful types:
`EmailStr` :
`FilePath` : like `Path`, but the path must exist and be a file.
`DirectoryPath` : like `Path`, but the path must exist and be a directory.
`Color` : for parsing HTML and CSS colors; see