Structures lower in the hierarchy (Figure 8) mostly contain
only primitive types. Hence, we deﬁne validity directly through
type reﬁnement. For example, to represent a frame of data in
a stream, we use a frame datatype, which stores a byte array,
a length, and an offset into the stream. A type reﬁnement on
the datatype ensures the array is not null, that the length is
accurate, and that the length plus the offset will not cause an
integer overﬂow.
Structures higher in the hierarchy contain nested sub-
structures, which complicates our validity deﬁnitions. These
now need to ensure: (i) validity of all substructures, (ii) the
disjointness of substructures. For example, a stream manages
the receive/send buffers through multiple doubly-linked lists,
all of which must be valid. Further, these lists should not
be aliased, which also means the nodes of the lists must be
completely disjoint.
A standard technique used to handle such complex data
structure reasoning is to maintain, in parallel to the actual
data, a “ghost” representation (i.e., one used only for proof
purposes and that will not appear in the compiled code). The
ghost representation is typically a set of all substructures. This
facilitates a succinct invariant about the disjointness of each
member of the set, and it allows the parent data structure
1174
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
QUIC.Spec.*
QUIC.Impl.*
QUIC.Model.*
LowParse.Bitﬁelds.*
LowParse.Bitsum.*
Total
Connection mgmt
Data Structures
Frame mgmt
LR & CC
Stream mgmt
Misc
FFI
Server & Client
Total
5,463
5,509
1,751
2,011
2,502
9,836
4,653
651
1,990
758
1,495
118
558
-
5m12s
6m32s
3m12s
1m29s
2m05s
16m30s
14m12s
9s
1m50s
11s
3m25s
2s
9s
-
4,640
-
-
-
-
-
-
-
-
-
-
-
1461
648
2,109
Modules
LoC
Verif.
C/C++ LoC
Veriﬁed Record Layer (§IV)
QUIC Reference Implementation (§V)
10,223
19m46s
Fig. 9: Summary of our veriﬁed codebase
to deﬁne its ghost representation simply as the union of
its children’s ghost representations. Unfortunately, we found
that data structures containing four or more nested structures
(e.g., the connection object) quickly overwhelmed the Dafny
veriﬁer. The underlying challenge appears to be the complex
set reasoning which arises from needing to repeatedly ﬂatten
sets-of-sets-of-objects into sets-of-objects.
Ultimately, we take advantage of Dafny’s ability to do
type-based separation, i.e., to deﬁne types that are known
to be incomparable. Rather than homogenizing the distinct
sub-structures into a single object-based representation, we
maintain ghost representations of each distinct
type. This
requires additional proof annotations, but it makes the veriﬁer’s
reasoning about validity much simpler, since non-aliasing of
instances of different class is "free".
Even with the aforementioned discipline, any mutation of
subcomponents (however deep) requires reproving the validity
of all layers above it. Hence we carefully structure our code
in multiple layers: the innermost performs the actual mutation,
and the outer layers simply expose these changes at higher and
higher levels.
A ﬁnal technique we employ is the careful use of im-
mutability. Immutable data structures simplify proof reasoning,
since any immutable value is independent of the state of the
heap, and thus will remain valid regardless of how the heap
changes. On the other hand, used indiscriminately, immutabil-
ity imposes a performance cost due to excessive data copies.
To balance these concerns, we typically use immutable
structures at lower levels and mutable types elsewhere. This
simpliﬁes reasoning at the upper levels (which are already
quite complex) without unduly hurting performance, since the
upper levels can manipulate, say, linked lists of immutable
lower-level structures, avoiding unnecessary copies. Even at
the lower levels, we sometimes ﬁnd it convenient to keep a
structure in a mutable form while constructing it (e.g., while
reading from a stream), and then “freeze” it in an immutable
form to simplify reasoning. Since these data structures are not
subsequently mutated, we lose little performance.
1175
)
s
/
B
M
(
t
u
p
h
g
u
o
r
h
T
2,000
1,500
1,000
500
0
24
25
26
27
28
29
210
Application Data Fragment Size (bytes)
Fig. 10: Record-layer performance:
tion/decryption of packets with various fragment sizes.
throughput of encryp-
VI. EVALUATION
We ﬁrst evaluate the effort required to build and verify
our QUIC reference implementation. Next, we measure the
performance of our record layer, the main focus of our work.
Finally, while the main goal of our veriﬁed-safe protocol
logic is to demonstrate that our record layer sufﬁces to im-
plement QUIC, we also, as a point of comparison, evaluate
the overall performance of our QUIC prototype. To ensure a
fair comparison with other implementations, we evaluate with
QUIC draft version 30, rather than our proposed improvement
(Figure 6), which would simplify the implementation and
proof. We perform all of these measurements on a Linux
desktop with an Intel i9-9900k processor with 128GB memory.
When measuring on the network, we connect
to a Linux
desktop with the same conﬁguration over a 1 Gigabit Ethernet
LAN.
A. Veriﬁcation Effort
Table 9 summarizes the size and veriﬁcation time for our
veriﬁed components. Overall, our record layer consists of about
10K lines of F(cid:2) code, which extract to ∼6K lines of C. A
signiﬁcant portion of this total consists of extensions to the
EverParse libraries to support the bit-level combinators that
describe header formats. Our veriﬁably-safe implementation
of the QUIC protocol logic consists of 10K lines of Dafny
code, which compiles to ∼13K lines of C++. Additionally,
we have ∼800 lines of trusted C++ code to connect the record
layer and the protocol logic, and another ∼700 lines of trusted
C++ code to connect the protocol logic to the underlying OS
platform (shown collectively as FFI in the table).
Overall, we estimate that about 20 person-months went into
this effort, which includes the overhead of training multiple
new team members on our tools, methods, and QUIC.
B. QUIC Record Layer
Our core contribution, the QUIC record layer, performs
full stateful encryption/decryption of packets, including header
processing and protection. To evaluate its performance, we
measure the application data throughput for varying packet-
content sizes.
Figure 10 shows our results. At the typical MTU (1300
bytes), our implementation supports 1.98 GB/s of QUIC appli-
cation data, which is ∼2.4 times slower than raw AEAD.
C. File Transfer Performance
To evaluate the overall performance of our QUIC reference
implementation, we use it to transfer ﬁles over the network,
ranging in size from 512KB to 2GB, and measure throughput,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
)
S
/
B
M
(
t
u
p
h
g
u
o
r
h
T
100
unveriﬁed ngtcp2
veriﬁed prototype
50
0
220
222
224
File Size (bytes)
226
228
230
232
Fig. 11: QUIC prototype performance: comparison of ﬁle
transfer throughput with ngtcp2 on a 1 Gbps LAN.
comparing against an unveriﬁed baseline There are many
unveriﬁed implementations of QUIC in various languages; we
picked ngtcp2[54] as our baseline because it is a popular
and fast implementation written in C++. Using a C++ baseline
avoids performance differences due to differing runtimes. Fig-
ure 11 shows our results. Unsurprisingly, our implementation
is slower than the carefully optimized ngtcp2. We conﬁrm
that interoperability between our implementation and ngtcp2,
which validates the faithfulness of our formal speciﬁcation. On
smaller ﬁle sizes, our prototype is about twice as slow, but
on large ones, it only lags by ∼21%. Proﬁling shows this is
largely due to our naïve coarse-grained locking strategy, which
we plan to reﬁne.
VII. RELATED WORK
to model
Some papers attempt
the security of Google
QUIC [30], but the results available for IETF QUIC are more
limited [22]. QPE is one of many extensions of nonce-based
authenticated encryption with additional data [48]. The use of
AEAD to build stateful encryption [19], [49], stream-based
channels [32], and concrete applications to protocols such
as the TLS record layer [14], [20] or SSH [10] have been
extensively studied. However, an important goal of the current
QUIC packet encryption construction is nonce conﬁdentiality,
which is achieved by keeping some of the nonce implicit
(an idea that appeared in the CAESAR competition, and
received a proposed security deﬁnition [41]) and encrypting
the explicit part, for which several related constructions have
been proposed with security proofs [11]. Our work combines
these results with the modular type-based veriﬁcation method
for cryptographic proofs of Fournet et al. [33] to create
an efﬁcient veriﬁed implementation, building on the veriﬁed
EverCrypt [44] crypto library. An important limitation of the
methodology is that only perfect indistinguishability steps can
be mechanically veriﬁed. Other tools, notably EasyCrypt [6],
have relational semantics that can reason about advantages in
game hops, and have been used to fully prove the security of
complex constructions such as RSA-OAEP [1]. However, writ-
ing fast implementations is more difﬁcult in EasyCrypt. The
preferred approach for implementation security has been to use
general-purpose C veriﬁcation tools and prove the security of
an extracted model [28], in contrast to our implementation
switching strategy based on a shared speciﬁcation.
We stress that the scope of our security analysis is limited
to the QUIC record layer, which is insufﬁcient to conclude
that QUIC is a safe authenticated secure channel protocol. In
contrast, considerable work has gone towards proving that TLS
1176
1.3 provides a secure channel. For example, Dowling et al. [27]
present a detailed cryptographic model of the handshake;
Bhargavan et al. [13] present a computational model veriﬁed
in CryptoVerif; and Cremers et al. [25] present a symbolic
model veriﬁed in Tamarin. These are recent instances of the
broader ﬁeld of tool-assisted security proofs for cryptographic
protocols and their implementations [29], [23], [5], [8], [34],
[35], [7]. Readers can refer to the surveys of Barbosa et al. [4],
Blanchet [18] and Cortier et al. [24].
VIII. CONCLUSIONS
This paper is the ﬁrst step towards a provably secure and
safe implementation of the IETF standard QUIC protocol.
Despite some weaknesses, we have proved the security of
QUIC packet encryption construction and built the ﬁrst high-
performance, low-level implementation with proofs of correct-
ness, runtime safety, and security. We have also built a safe
implementation of the QUIC transport on top of our veriﬁed
packet encryption component and the veriﬁed miTLS hand-
shake. Our next steps are to write a functional speciﬁcation of
the transport and verify the correctness of our implementation,
integrate the TLS handshake security model with the record
layer, and expose an idealized interface to the QUIC transport
that captures application data stream security [32].
ACKNOWLEDGEMENTS
Work at CMU was supported in part by grants from a