title:Efficient Public Trace and Revoke from Standard Assumptions: Extended
Abstract
author:Shweta Agrawal and
Sanjay Bhattacherjee and
Duong Hieu Phan and
Damien Stehl&apos;e and
Shota Yamada
Efficient Public Trace and Revoke from Standard Assumptions
Shweta Agrawal
IIT Madras
India
Sanjay Bhattacherjee
Duong Hieu Phan
Turing Lab (ASU), ISI Kolkata
XLIM (U. Limoges, CNRS)
India
France
PI:EMAIL
PI:EMAIL
PI:EMAIL
Damien Stehl´e
Shota Yamada
ENS de Lyon, LIP (U. Lyon,
CNRS, ENSL, INRIA, UCBL)
National Institute of Advanced
Industrial Science and Technology
France
PI:EMAIL
(AIST)
Japan
PI:EMAIL
ABSTRACT
We provide efficient constructions for trace-and-revoke sys-
tems with public traceability in the black-box confirmation
model. Our constructions achieve adaptive security, are based
on standard assumptions and achieve significant efficiency
gains compared to previous constructions.
Our constructions rely on a generic transformation from
inner product functional encryption (IPFE) schemes to trace-
and-revoke systems. Our transformation requires the underly-
ing IPFE scheme to only satisfy a very weak notion of security
– the attacker may only request a bounded number of random
keys – in contrast to the standard notion of security where
she may request an unbounded number of arbitrarily chosen
keys. We exploit the much weaker security model to pro-
vide a new construction for bounded collusion and random
key IPFE from the learning with errors assumption (LWE),
which enjoys improved efficiency compared to the scheme of
Agrawal et al. [CRYPTO’16].
Together with IPFE schemes from Agrawal et al., we obtain
trace and revoke from LWE, Decision Diffie Hellman and
Decision Composite Residuosity.
KEYWORDS
Inner-product functional encryption; Trace-and-revoke; Pub-
lic traceability
INTRODUCTION
1
A traitor tracing system [13] is a multi-receiver encryption
system, which aids content distributors in identifying ma-
licious receivers that construct pirate decryption boxes. In
more detail, data is encrypted under some public key pk and
each legitimate user of the system is provided a secret key
Permission to make digital or hard copies of part or all of this work
for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage
and that copies bear this notice and the full citation on the first page.
Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4946-8/17/10.
https://doi.org/10.1145/3133956.3134041
sk𝑖 that allows her to decrypt the content. Since nothing
prevents a user from making copies of her key and selling
them for profit, traitor tracing systems provide the following
security guarantee to deter such behavior: if a coalition of
users pool together their keys and construct a pirate decoder
box capable of decrypting the ciphertext, then there is an
efficient “trace” algorithm which, given access to any such
decoder, outputs the identity of at least one guilty user.
An orthogonal functionality is that of broadcast encryption
[15], where the content provider encrypts data to some subset
𝑆 of users. Functionality requires that any user in 𝑆 be able
decrypt the content and security posits that no collusion of
users outside 𝑆 can do so. Trace-and-revoke systems combine
these two functionalities – when the system is deployed, the
content is encrypted to all users on the channel. However,
if copyright infringement occurs, then tracing is used to
detect the malicious users, or “traitors”, and future content
is encrypted using broadcast encryption to all users except
the traitors.
Trace-and-revoke systems have been studied extensively [14,
25, 29, 30, 35] and are notoriously hard to construct (please
see [11] for a detailed discussion). A desirable attribute for
trace-and-revoke systems is public traceability, meaning that
the tracing algorithm does not require any additional secrets.
Due to this property, the overall system remains secure even
if the tracing party is compromised. Moreover, the tracing
capability can be outsourced to an untrusted party in this
setting.
To the best of our knowledge, trace-and-revoke systems
with public traceability have only been achieved by Boneh
and Waters [11], and quite recently by Nishimaki, Wichs
and Zhandry (NWZ) [32]. The Boneh-Waters construction
is quite powerful in that it supports malicious collusions of
unbounded size but its ciphertexts are very large (their size
grows proportionally to
𝑁 , where 𝑁 is the total number of
users) and the scheme relies on pairing groups of composite
order. To achieve a ciphertext size that does not depend
on the total number of users in the system, we consider
the bounded collusion model, where the number of possible
traitors is a priori bounded by some 𝑡 that is polynomial in
the security parameter 𝜆. The bounded collusion model is
√
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2277quite standard in traitor tracing schemes and has received
significant attention; however, until the work of Nishimaki et
al. (NWZ) [32], all known schemes in this model [9, 20, 27]
support either revocation or public traceability but not both.
Recently, Nishimaki et al. (NWZ) [32] provided a generic
construction for traitor tracing systems from functional en-
cryption schemes. Functional encryption [10, 37] is a general-
ization of public key encryption allowing fine grained access
to encrypted data. We note that the strongest constructions
in [32] are based on the existence of indistinguishability obfus-
cation [7], for which we do not at present have any candidate
construction based on well established hardness assumptions.
Since our focus is on efficient constructions based on well
established hardness assumptions, we do not consider these
in this work. One may also instantiate the NWZ compiler
with a bounded collusion functional encryption scheme which
can be based on standard assumptions such as the existence
of public key encryption [18] or subexponential time hardness
of learning with errors (LWE) [5, 17]. For trace and revoke,
this results in a construction that supports public black box
traceability and adaptive security in addition to anonymity
of honest users and an exponential size universe of identities.
However, the generic nature of their construction results
in loss of concrete efficiency. For instance, when based on
the bounded collusion FE of [18], the resulting scheme has a
ciphertext size growing at least as 𝑂(𝑟 + 𝑡)5𝒫𝑜𝑙𝑦(𝜆)) where
𝑟 is the maximum size of the list of revoked users and 𝑡
the maximum coalition size (please see Appendix 6 for an
explanation of the bound). By relying on learning with errors,
this blowup can be improved to 𝑂((𝑟 + 𝑡)4𝒫𝑜𝑙𝑦(𝜆)) but at
the cost of relying on heavy machinery such as attribute
based encryption [19] and fully homomorphic encryption [17].
Additionally, this construction must also rely on complexity
leveraging for adaptive security and learning with errors with
subexponential error rates. The bounded collusion FE of [5]
leads to better asymptotic bounds 𝑂(𝑟 + 𝑡)3𝒫𝑜𝑙𝑦(𝜆)) but
suffers from large polynomial factors which hurt concrete
efficiency.
Our Approach. In this work, we revisit the connection be-
tween functional encryption and trace-and-revoke systems
and observe that the notion of FE required for bounded
collusion trace-and-revoke schemes is significantly weaker
than that considered by [32]. To begin, we show that the
functionality required from the underlying functional encryp-
tion scheme may be significantly weakened; rather than FE
for polynomial sized circuits,1 we show that inner product
functional encryption (IPFE) [1, 4] suffices. Efficient construc-
tions for IPFE satisfying adaptive security are available [4],
leading to trace-and-revoke systems which are significantly
simpler and more efficient than those implied by [32]. We
further improve our constructions by observing that for the
application of trace and revoke, the underlying IPFE schemes
must be secure in a much weaker security model than full
1More accurately, the circuits required by the NWZ compiler are
relatively simple, but ones for which we do not know any better FE
constructions than the general case.
fledged IPFE: the adversary may be restricted to only make
a bounded number of key queries, and only key queries for
randomly chosen vectors. We exploit the much weaker security
model to provide new constructions for bounded collusion
and random key IPFE from LWE and Decision Composite
Residuosity (DCR), which enjoy substantial benefits over us-
ing those of [4] in terms of parameter sizes. The improvement
is greatest for the LWE construction, as the LWE modulus
can be slightly super-polynomial rather than subexponential,
itself allowing to choose a smaller LWE dimension.
Our Results. We construct efficient trace-and-revoke sys-
tems with bounded collusion resistance, from standard as-
sumptions. Our schemes support public, black-box traceabil-
ity and achieve the strongest notion of adaptive security as
defined by [11]. Our construction is generic and leverages
recent constructions of modular inner product functional
encryption (IPFE) [1, 4]. Moreover, by targeting the weak
security game required by our application, we obtain more ef-
ficient versions of IPFE schemes that suffice for our purposes.
While [32] achieves trace-and-revoke in the strong security
model under the existence of public-key encryption, our ap-
proach leads to significantly more efficient schemes under the
DCR, LWE and DDH assumptions. In particular, we achieve
ciphertext and key sizes that are linear in the sum of revoked
list size 𝑟 and maximum coalition size 𝑡. Our DDH-based
construction achieves ciphertext and key sizes 𝑂((𝑟+𝑡)𝜆), our
DCR-based construction achieves ciphertext and key sizes
̃︀𝑂((𝑟 + 𝑡)𝜆3), while our LWE-based construction has cipher-
text size ̃︀𝑂(𝑟 + 𝑡 + 𝜆) and key size ̃︀𝑂((𝑟 + 𝑡 + 𝜆)𝜆). We note
that our security definition considers the strongest notion of
“usefulness” [11] of the pirate decoder, which is not satisfied
by most other constructions. Indeed some schemes [14, 30]
are actually insecure in this strong game (see Appendix 6
for a detailed discussion). Finally, we give a DDH-based
traitor tracing construction (without revocation) that sup-
ports encryption of 𝑘 messages with ciphertext and key sizes
𝑂((𝑘 + 𝑡)𝜆). This improves ciphertext expansion over the
trace-and-revoke construction, as the plaintext messages are
binary.
Our Techniques. Let ℱℰ = (ℱℰ.Setup,ℱℰ.KeyGen,ℱℰ.Enc,
ℱℰ.Dec) be a functional encryption scheme for the inner-
product functionality over Zℓ
𝑝. Recall the inner product func-
tionality: the ciphertext encodes a vector v ∈ Zℓ
𝑝, the secret
key encodes a vector x ∈ Zℓ
𝑝 and decryption recovers the
inner product ⟨x, v⟩ mod 𝑝.
To construct a trace-and-revoke scheme, we proceed as
follows. At the time of key generation, a user id is first
assigned a uniformly sampled vector xid ∈ Zℓ
𝑝 and the entry
𝑝id = (id, xid) is stored in the public directory pd for full
public traceability. We may consider revocation and tracing
as two distinct functionalities that need to be combined so
that neither interferes with the security properties of the
other. We employ two different techniques to implement
these functionalities.
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2278To revoke a set ℛ of users with |ℛ| ≤ 𝑟, we first determin-
istically compute a vector vℛ ∈ Zℓ
𝑝 such that for all id ∈ ℛ,
we have ⟨xid, vℛ⟩ = 0 (modulo 𝑝). Note that this can be
implemented only if 𝑟 < ℓ. At the same time, for a user
id /∈ ℛ, the probability that ⟨xid, vℛ⟩ = 0 must be negligible,
as otherwise it would de facto be handled as a revoked user.
To guarantee this, we require that 𝑝 is 𝜆𝜔(1). Since we choose
xid uniformly random, we have ⟨xid, vℛ⟩ ̸= 0 for id ̸∈ ℛ with
overwhelming probability.
Using the underlying ℱℰ scheme, we would like to encrypt
the message 𝑚 ∈ Z⋆
𝑝 such that the users in the set ℛ are not
able to decrypt the message, but users not in ℛ are able to
decrypt. We achieve it as follows:
𝐶 = (ℱℰ.Enc(pk, 𝑚 · vℛ),ℛ) = (𝐶1, 𝐶2).
Here the operation · denotes the scalar multiplication of each
component of vℛ with 𝑚. To decrypt, the user id with the
vector xid and the ℱℰ secret key 𝑠𝑘xid proceeds as follows:
(a) Compute vℛ from ℛ and abort if ⟨xid, vℛ⟩ = 0.
(b) If ⟨xid, vℛ⟩ ̸= 0, compute
ℱℰ.Dec(skxid , 𝐶1)