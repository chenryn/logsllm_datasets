# A Nitpicker's Guide to a Minimal-Complexity Secure GUI

**Authors: Norman Feske and Christian Helmuth**

**Institution: Technische Universität Dresden**

**Emails: {feske, helmuth}@os.inf.tu-dresden.de**

## Abstract
Malware, such as Trojan Horses and spyware, remains a persistent security threat, often exploiting the overly complex graphical user interfaces (GUIs) of today’s commodity operating systems. In this paper, we present the design and implementation of Nitpicker, an extremely minimized secure GUI that addresses these issues while maintaining compatibility with legacy operating systems. We describe our approach of kernelizing the window server and detail the deployed security mechanisms and protocols. Our implementation consists of only 1,500 lines of code and supports both X11 applications and protected graphical security applications. Key techniques include client-side window handling, a new floating-labels mechanism, drag-and-drop, and denial-of-service-preventing resource management. We also present an application scenario to evaluate the feasibility, performance, and usability of our approach.

## 1. Introduction
Spyware and Trojan Horses are significant security threats, yet they are not widely addressed by developers of operating systems (OS) and graphical user interfaces (GUIs), who are often concerned about breaking compatibility with existing commodity applications. Historically, applications were designed to be cooperative and user-friendly, with GUIs facilitating communication among applications without burdening programmers with security protocols. However, modern computing environments, where applications and applets are frequently downloaded from untrusted sources, have invalidated these assumptions. Malicious code can exploit networking facilities to spread and communicate once installed on a system.

In 2004, J. Shapiro et al. reignited the discussion on GUI security with the EROS Trusted Window System (EWS). However, EWS only supports a limited set of applications, excluding a broad range of mass-market software. In contrast, current OS and virtualization techniques, such as Xen, Intel’s Virtualization Technology, AMD’s Pacifica, and Microsoft’s NGSCB, provide powerful ways to secure applications while supporting legacy software. These platforms enable the safe execution of security applications alongside a sandboxed legacy OS.

Our work complements these techniques by introducing an extremely minimized secure GUI to combat security threats like spyware and Trojan Horses. We focus on low-level mechanisms applicable to a wide variety of target platforms, addressing the following classes of malware:
- Applications spying on other applications.
- Applications observing the user.
- Applications obtaining data from the user through deception.
- Denial-of-service attacks on the user interface.

## 2. Design for Nitpickers

### 2.1 Client-side Window Handling
The high complexity of modern GUI-based applications is largely due to the need to manage widgets, the basic building blocks of a GUI. Widget toolkits like Gtk and Qt offer a wide variety of widgets and layout mechanisms, but at the cost of extreme complexity. For example, the Qt toolkit comprises over 300,000 lines of C++ code.

Some window systems, such as Fresco and DOpE, implement widget handling on the server side, which has advantages in responsiveness and consistency. However, from a security perspective, complex widget management should be implemented on the client side. EWS, for instance, provides only windows without buttons, menus, or other widgets. In DOpE, a window is treated as a widget, raising the question of why not implement the window widget on the client side as well.

J. Shapiro et al. argue that clients should not decide their own screen placement, as this could lead to malicious behavior. However, users may expect certain behaviors from applications, making it impractical to lock out all clients. The window system lacks information about user expectations, so only the user can classify misbehaving applications. To protect accessibility, the user needs a mechanism to freeze and lock out a client at any time. Client-side window handling is key to achieving minimal GUI server complexity.

### 2.2 Buffers and Views
Nitpicker uses two types of objects: buffers and views. A buffer is a memory region holding two-dimensional pixel data, provided by the client and imported via shared memory. Each buffer must match the pixel format of the current screen mode. Nitpicker does not perform color-space conversion, as this is not security-relevant.

A view is a rectangular area on the screen presenting a region of a buffer. Each view has a defined size and position, and if the view is smaller than its assigned buffer, the client can specify a viewport. Multiple views can exist on the same buffer, each with individual sizes and positions. When a client updates a buffer, it informs Nitpicker, which then updates all relevant views. Views can overlap, and the stacking order is managed by the client locally, with Nitpicker maintaining the global stacking order. This ensures that one client cannot obtain information about or manipulate another client.

### 2.3 Input Handling
To ensure secure communication from the user to the client, Nitpicker routes mouse and keyboard events to the appropriate client while hiding user input from others. Each client receives input events only if they refer to one of its views. The focused view, selected by the user via mouse click, represents the keyboard input focus. Nitpicker routes key strokes only to the focused client. Mouse motion and scroll events are reported to the view under the cursor, but only if it belongs to the focused client, preventing other clients from observing user gestures.

If the user moves the mouse while a button is pressed, Nitpicker reports all motion events and the final release event to the initial view, enabling client-side window handling. Two special keys, the Kill key and the X-ray key, are reserved for Nitpicker use. The Kill key freezes the current view layout and allows the user to lock out a misbehaving client.

### 2.4 Trusted Path
Buffers and views alone are insufficient to identify Trojan Horses. Users need a way to clearly identify the client they are interacting with. Commodity window systems like X11 allow clients to choose window labels, which can be exploited by malicious applications. In multi-level secure systems, unforgeable labeling is required. Nitpicker supports both expressive textual information (untrusted label) and unforgeable labeling (trusted label). The complete label is a concatenation of the trusted and untrusted labels, with the trusted label always visible.

Traditionally, labeling information is displayed in window titles, but this can be covered or missing. Epstein introduced techniques to maximize label visibility, such as adding a border around the window. While effective for targeted systems, this consumes screen space and limits applications. Nitpicker aims to balance visibility and flexibility.

## 3. Application Space
We outline the potential target platforms for Nitpicker, including various operating systems and virtualization environments. Our implementation for a specific platform is described in Section 4 and evaluated in Section 5. Additional related work is discussed in Section 6, and we conclude the paper in Section 7.

This revised text aims to be more coherent, professional, and clear, with improved structure and flow.