本文为翻译文章，原文链接：
## 前言
父老乡亲们大家晚上好，我是 Shawar Khan，距离上次writeup已有些时日，近日偶有小成，post出来跟大家分享一下。
想跟大家分享很多新东西，但是本篇文章只是披露其中一个Web应用程序，该程序基于python开发。由于这是SYNACK上（一个漏洞赏金平台）的目标，所以我会把目标替换为`redacted.com`或`Redacted
Org`。
由于该平台评价规则是质量为上，这意味着最好的质量报告才能获胜，所以我的重点是编写具有最大影响力的最佳报告。
## 设置渗透范围
只允许访问特定的站点，例如`staging.sub.redacted.com/endpoint/`：
设置高级范围  
勾选“在目标范围内”，仅收集相关流量。
选项`is in target scope`(是否在目标范围)已打勾，因此将仅拦截目标范围内的域名流量。
## 了解应用程序工作流程：
`staging.sub.redacted.com`站点的功能非常有限，分析Burp
Suite历史记录中的流量后，发现一个页面负责对网页进行更改和更新，该页面位于`staging.sub.redacted.com/endpoint/_dash-update-component`下，接收大量POST请求，并且每个请求都有唯一的JSON响应。这点证实了该页面包含了不同的函数，可以处理不同的数据。
该应用程序用户分两种：Admin和User。admin用户能够添加新用户并进行一些其他的更改，后来我发现提权之后user账户也可以创建新用户（这里译者觉得是说发现了越权之类的漏洞的意思吧）。
用户创建功能由_`dash-update-component`模块完成，具体请求如下：
    POST /endpoint/_dash-update-component HTTP/1.1
    Host: staging.sub.redacted.com
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:82.0) Gecko/20100101 Firefox/82.0
    Accept: application/json
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Content-Type: application/json
    X-CSRFToken: undefined
    Origin: https://staging.sub.redacted.com
    Content-Length: 710
    Connection: close
    Cookie: REDACTED
    {"output":"createUserSuccess.children","outputs":{"id":"createUserSuccess","property":"children"},"inputs":[{"id":"createUserButton","property":"n_clicks","value":1},{"id":"newUsername","property":"n_submit","value":0},{"id":"newPwd1","property":"n_submit","value":0},{"id":"newPwd2","property":"n_submit","value":0},{"id":"newEmail","property":"n_submit","value":0}],"changedPropIds":["createUserButton.n_clicks"],"state":[{"id":"newUsername","property":"value","value":"test1"},{"id":"newPwd1","property":"value","value":"test123123123"},{"id":"newPwd2","property":"value","value":"test123123123"},{"id":"newEmail","property":"value","value":"PI:EMAIL"},{"id":"role","property":"value","value":"dp"}]}
上面请求发出后，响应如下：（确认已创建新用户）
    HTTP/1.1 200 OK
    Date: Fri, 20 Nov 2020 20:53:18 GMT
    Content-Type: application/json
    Content-Length: 192
    Connection: close
    {"response": {"createUserSuccess": {"children": {"props": {"children": ["New User created"], "className": "text-success"}, "type": "Div", "namespace": "dash_html_components"}}}, "multi": true}
为了进一步测试，尝试再次发送相同的请求并收到以下响应：
    HTTP/1.1 200 OK
    Date: Fri, 20 Nov 2020 20:53:12 GMT
    Content-Type: application/json
    Content-Length: 350
    Connection: close
    {"response": {"createUserSuccess": {"children": {"props": {"children": ["New User not created: (psycopg2.errors.DuplicateSchema) schema \"test1\" already exists\n\n[SQL: CREATE SCHEMA test1]\n(Background on this error at: http://sqlalche.me/e/f405)"], "className": "text-danger"}, "type": "Div", "namespace": "dash_html_components"}}}, "multi": true}
尝试再次创建test1用户后，会收到一条错误消息，指出未创建新用户：`New User not created:
(psycopg2.errors.DuplicateSchema) schema \"test1\" already exists\n\n[SQL:
CREATE SCHEMA test1]`。该错误似乎是由于缺少`try/except`导致的Python异常。如果把`try /
except`写成`except（Exception）`，则程序不会返回任何异常（此处不是这种用法）。
这里使用的python模块是`psycopg2`，我不是很熟悉，查询相关资料后发现，这是PostgreSQL数据库的数据库适配器模块，确认该应用程序运行的是PostgreSQL数据库。此外，该异常泄漏了查询信息`CREATE
SCHEMA test1`，而这个`test1`是我创建的用户名。这表明：我的输入从`newUsername`对象的值中检索后直接传递给了SQL查询。
因此，我立马掏出sqlmap，将`risk & level`设置为3，不幸的是并没有跑出来，只能无奈手工注入。
## 手工注入
目前已知的是，如果将用户名创建为`testuser1;
TEST`，应用程序将创建一个名称为`testuser1`的用户，但会抛出语法错误，从而确认`TEST`作为查询单独执行，因此我确信存在SQL注入。
    New User not created: (psycopg2.errors.SyntaxError) syntax error at or near \"TEST\"\nLINE 1: CREATE SCHEMA testuser1;TEST...\n
请求中加入单引号或双引号后，程序以未封闭的引号错误进行响应，由此可以确认我们的输入没有被包裹在引号中。为了执行新查询，必须首先使用`;`来关闭第一个查询。因此，我尝试将用户名创建为`test1
AND SELECT
version()`，但是发现程序将空格转换为`_`，因此我的用户名变为`test1_and_select_version()`，再次失败。
一个简单的绕过策略是使用注释而不是空格。我将所有空格都转换为`/**/`，但同样被拦截。经过进一步的测试，我发现了一种绕过思路。在python中，`\n`，`\r`或`\t`等字符可用于换行和制表符，同时也能够将它们用作查询的分隔符。
但是，我收到了两种情况的响应：应用程序要么创建了新用户，要么返回了错误消息，但是都没有返回version()的结果。并且，如果成功执行了第一个查询，第二个查询才有效，因此必须确保创建的用户名不存在，否则查询将失败。
为了提高效率，我尝试查看是否使用脏字符来枚举表，例如
    test111111;SELECT/**/tessssooooooooooooootessssoooooooooooooooooooooooooooooooooooooooo;
程序返回的错误信息如下:
    INSERT INTO userdata (username, email, password, roles) VALUES 
    (%(username)s, %(email)s, %(password)s, %(roles)s) RETURNING 
    userdata.id]\n[parameters: {'username': 
    'test111111;SELECT/**/tessssooooooooooooootessssoooooooooooooooooooooooooooooooooooooooo;',
     'email': 'PI:EMAIL', 'password': 
    'sha256$QY0iWLnG$17f.......',
     'roles': 'dp'
返回的错误消息是未创建“新用户”，因为字符串过长（总长限制为80字符）：`New User not created:
(psycopg2.errors.StringDataRightTruncation) value too long for type character
varying(80)`，再一步受挫。
由于我熟悉级联绕过（concatenation