title:Counterfeit Object-oriented Programming: On the Difficulty of Preventing
Code Reuse Attacks in C++ Applications
author:Felix Schuster and
Thomas Tendyck and
Christopher Liebchen and
Lucas Davi and
Ahmad-Reza Sadeghi and
Thorsten Holz
2015 IEEE Symposium on Security and Privacy
Counterfeit Object-oriented Programming
On the Difﬁculty of Preventing Code Reuse Attacks in C++ Applications
Felix Schuster∗, Thomas Tendyck∗, Christopher Liebchen†, Lucas Davi†, Ahmad-Reza Sadeghi†, Thorsten Holz∗
Ruhr-Universit¨at Bochum, Germany Technische Universit¨at Darmstadt, Germany
∗Horst G¨ortz Institut (HGI)
†CASED
Abstract—Code reuse attacks such as return-oriented program-
ming (ROP) have become prevalent techniques to exploit memory
corruption vulnerabilities in software programs. A variety of
corresponding defenses has been proposed, of which some have
already been successfully bypassed—and the arms race continues.
In this paper, we perform a systematic assessment of recently
proposed CFI solutions and other defenses against code reuse
attacks in the context of C++. We demonstrate that many of these
defenses that do not consider object-oriented C++ semantics pre-
cisely can be generically bypassed in practice. Our novel attack
technique, denoted as counterfeit object-oriented programming
(COOP), induces malicious program behavior by only invoking
chains of existing C++ virtual functions in a program through
corresponding existing call sites. COOP is Turing complete in
realistic attack scenarios and we show its viability by developing
sophisticated, real-world exploits for Internet Explorer 10 on
Windows and Firefox 36 on Linux. Moreover, we show that
even recently proposed defenses (CPS, T-VIP, vfGuard, and VTint)
that speciﬁcally target C++ are vulnerable to COOP. We observe
that constructing defenses resilient to COOP that do not require
access to source code seems to be challenging. We believe that
our investigation and results are helpful contributions to the
design and implementation of future defenses against control-
ﬂow hijacking attacks.
I. INTRODUCTION
For more than two decades, attackers have been exploit-
ing memory-related vulnerabilities such as buffer overﬂow
errors to hijack the control ﬂow of software applications
developed in unsafe programming languages like C or C++.
In the past, attackers typically immediately redirected the
hijacked control ﬂow to their own injected malicious code.
This changed through the broad deployment of the well-known
data execution prevention (DEP) countermeasure [33] that
renders immediate code injection attacks infeasible. However,
attackers adapted quickly and are typically resorting to code
reuse attacks today.
Code reuse attack techniques, such as return-oriented pro-
gramming (ROP) [46] or return-to-libc [37], avoid injecting
code. Instead, they induce malicious program behavior by
misusing existing code chunks (called gadgets) residing in
the attacked application’s address space. In general, one can
distinguish between two phases of a runtime exploit: (1) the
exploitation of a memory corruption vulnerability initially
allowing the adversary to hijack the control ﬂow of an
application, and (2) the actual adversary-chosen malicious
computations and program actions that follow. A generic
mitigation of code reuse attacks is to prevent
the initial
exploitation step. In other words, code reuse attacks cannot
be instantiated,
if spatial memory corruptions like buffer
overﬂows and temporal memory corruptions like use-after-free
conditions are prevented in the ﬁrst place [51]. Indeed, a large
number of techniques have been proposed that provide means
of spatial memory safety [5], [6], temporal memory safety [4],
or both [13], [31], [36], [45]. On the downside, for precise
guarantees, these techniques typically require access or even
changes to an application’s source code and may incur consid-
erable overhead. This hampers their broader deployment [51].
Orthogonally, several defenses have been proposed that do
not tackle the initial control-ﬂow hijacking, but rather aim
at containing or detecting the subsequent malicious control-
ﬂow transitions of code reuse attacks. A popular line of work
impedes code reuse attacks by hiding [7], shufﬂing [55], or
rewriting [39] an application’s code or data in memory; often
in a pseudo-random manner. For example, the widely de-
ployed address space layout randomization (ASLR) technique
ensures that the stack, the heap, and executable modules of
a program are mapped at secret, pseudo-randomly chosen
memory locations. This way, among others, the whereabouts of
useful code chunks are concealed from an attacker. Bypassing
these defenses often requires the exploitation of an additional
memory disclosure—or information leak—vulnerability [51].
A complementary line of work concerns a generic security
principle called control-ﬂow integrity (CFI). It enforces the
control ﬂow of the program to adhere to a pre-determined
or at runtime generated control-ﬂow graph (CFG) [3]. Pre-
cise CFI—also known as ﬁne-grained CFI—is conceptually
sound [1]. However, similar to memory safety techniques,
there are practical obstacles like overhead or required access to
source code that hinder its broad deployment. Consequently,
different instantiations of imprecise CFI—or coarse-grained
CFI—and related runtime detection heuristics have been pro-
posed, oftentimes working on binary code only. However,
several researchers have recently shown that many of these
solutions [3], [14], [23], [40], [56], [58], [59] can be bypassed
in realistic adversary settings [11], [16], [25], [26], [43].
Contributions: In this paper, we present counterfeit object-
oriented programming (COOP), a novel code reuse attack
technique against applications developed in C++. With COOP
we demonstrate the limitations of a range of proposed defenses
against code reuse attacks in the context of C++. We show
that it is essential for code reuse defenses to consider C++
semantics like the class hierarchy carefully and precisely.
As recovering these semantics without access to source code
© 2015, Felix Schuster. Under license to IEEE.
DOI 10.1109/SP.2015.51
745
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
can be challenging or sometimes even impossible, our results
demand for a rethinking in the assessment of binary-only
defenses and make a point for the deployment of precise
source code-based defenses where possible.
Our observation is that COOP circumvents virtually all CFI
solutions that are not aware of C++ semantics. Further, we also
ﬁnd a range of other types of defenses that do not consider
these semantics precisely to be prone to attacks. In fact, we
show that even several recently and concurrently proposed
defenses against control-ﬂow hijacking/code reuse attacks that
speciﬁcally target C++ applications (CPS [31], T-VIP [24],
vfGuard [41], and VTint [57]) offer at most partial protection
against COOP, and we can successfully bypass all of them
in realistic attack scenarios. We also discuss how COOP can
reliably be prevented by precise C++-aware CFI, defenses that
provide (spatial and temporal) integrity for C++ objects, or
defenses that prevent certain common memory disclosures.
We demonstrate the viability of our attack approach by
implementing working low-overhead exploits for real-world
vulnerabilities in Microsoft Internet Explorer 10 (32-bit and
64-bit) on Windows and a proof-of-concept vulnerability in
Firefox 36 on Linux x64. To launch our attacks against
modern applications, we inspected and identiﬁed easy-to-use
gadgets in a set of well-known Windows system libraries—
among them the standard Microsoft Visual C/C++ runtime
that is dynamically linked to many applications—using basic
symbolic execution techniques. We also show that COOP is
Turing complete under realistic conditions.
Attack Technique Overview: Existing code reuse attacks
typically exhibit unique characteristics in the control ﬂow (and
the data ﬂow) that allow for generic protections regardless of
the language an application was programmed in. For example,
if one can afford to monitor all return instructions in an
application while maintaining a full shadow call stack, even
advanced ROP-based attacks [11], [16], [25], [26], [43] cannot
be mounted [2], [17], [22]. This is different for COOP: it
exploits the fact that each C++ virtual function is address-
taken, which means that a constant pointer exists to it. Ac-
cordingly, C++ applications usually contain a high ratio of
address-taken functions; typically a signiﬁcantly higher one
compared to C applications. If, for example, an imprecise CFI
solution does not consider C++ semantics, these functions are
all likely valid indirect call targets [3] and can thus be abused.
COOP exclusively relies on C++ virtual functions that are
invoked through corresponding calling sites as gadgets. Hence,
without deeper knowledge of the semantics of an application
developed in C++, COOP’s control ﬂow cannot reasonably be
distinguished from a benign one. Another important difference
to existing code reuse attacks is that in COOP conceptually no
code pointers (e. g., return addresses or function pointers) are
injected or manipulated. As such, COOP is immune against
defenses that protect the integrity and authenticity of code
pointers. Moreover, in COOP, gadgets do not work relative
to the stack pointer. Instead, gadgets are invoked relative to
the this pointer on a set of adversary-deﬁned counterfeit
objects. Note that in C++, the this pointer allows an object
to access its own address. Addressing relative to the this
pointer implies that COOP cannot be mitigated by defenses that
prevent the stack pointer to point to the program’s heap [23],
which is typically the case for ROP-based attacks launched
through a heap-based memory corruption vulnerability.
The counterfeit objects used in a COOP attack typically
overlap such that data can be passed from one gadget to
another. Even in a simple COOP program, positioning coun-
terfeit objects manually can become complicated. Hence, we
implemented a programming framework that leverages the Z3
SMT solver [18] to derive the object layout of a COOP program
automatically.
II. TECHNICAL BACKGROUND
Before presenting the ideas and concepts behind COOP in
detail, we review the background necessary for understanding
our approach and its relation to existing work.
A. Code Reuse Attack Techniques
it
Return-oriented programming (ROP) [46] is a widely used
code reuse attack technique. The basic idea is to hijack the
control ﬂow of an application and redirect
to existing
short
instruction sequences ending in a return instruction
(called gadgets) residing in the executable modules of a
target application. Gadgets are oftentimes not aligned with
the original instruction stream of an executable module. Each
gadget fulﬁlls a speciﬁc task such as performing an addition,
or storing a value to memory. In order to execute a malicious
ROP program, the adversary injects a chunk of code pointers
into the address space of an application, where each pointer
references one gadget. Finally, the attacker, abusing a memory
corruption vulnerability, pivots a thread’s stack pointer to that
area. In the following, the injected code pointers on the (fake)
stack are interpreted as return addresses making the control
ﬂow “return” from one attacker-chosen gadget
to another.
ROP can be considered a generalization of the older return-to-
libc [37] code reuse attack technique where the attacker makes
the hijacked control ﬂow immediately “return” to the entry of
a sensitive library functions residing for example in libc.
Jump-oriented programming (JOP) is a variant of ROP that
uses indirect jumps and calls rather than return instructions [9],
[12]. In basic JOP, return instructions are emulated by using
a combination of a pop-jmp pair. In addition, JOP attacks
do not necessarily require the stack pointer as base register
to reference code pointers. In particular, an “update-load-
branch” sequence with general purpose registers can be used
instead [12]. The term call-oriented programming (COP) is
also sometimes used to refer to ROP-derived techniques that
employ indirect calls [11], [25].
Although these code reuse attack techniques are very pow-
erful and return-to-libc, ROP, and JOP have even been shown
to enable Turing complete (i. e., arbitrary) malicious computa-
tions [12], [46], [53] in realistic scenarios, they differ in several
subtle aspects from ordinary program execution, which can be
exploited to detect their execution. This is discussed in more
detail in §III-A.
746
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
B. Control-Flow Integrity
Abadi et al. introduced the principle of Control-Flow In-
tegrity (CFI) [3] as a generic defense technique against code
reuse attacks. Since then, it has been generally used to refer to
the concept of instrumenting indirect branches in native pro-
grams to thwart code reuse attacks. Usually, the enforcement
of CFI is a two-step process:
1) determination of a program’s approximate control-ﬂow
graph (CFG) X(cid:3).
2) instrumentation of (a subset of) the program’s indirect
branches with runtime checks that enforce the control
ﬂow to be compliant with X(cid:3).
The approximate CFG X(cid:3) can be determined statically or
dynamically; on source code or on binary code. X(cid:3) should be
a supergraph of the intrinsic CFG X encoded in the original
source code of a program. If X(cid:3) is equal to X, it is in general
difﬁcult for an attacker to divert control ﬂow in a way that is
not conform to the semantics of a program’s source code. CFI
checks are often implemented by assigning IDs to all possible
indirect branch locations in a program. At runtime, a check
before each indirect branch validates if the target ID is in
compliance with X(cid:3). When the same ID is assigned to most
of a program’s address-taken functions and returns are not
restricted to comply with the call stack at runtime, one often
speaks of coarse-grained CFI. It has recently been shown that
certain coarse-grained CFI solutions for binary code [3], [58],
[59] cannot prevent advanced ROP-based attacks [16], [25].
C. C++ Code on Binary Level
As our attack approach targets C++ applications, we provide
a brief introduction to the basic concepts of C++ and describe
how they are implemented by compilers in the following.
In C++ and other object-oriented programming languages,
programmers deﬁne custom types called classes. Abstractly, a
class is composed of a set of member data ﬁelds and member
functions [50]. A concrete instantiation of a class at runtime
is called object. Inheritance and polymorphism are integral
concepts of the object-oriented programming paradigm: new
classes can be derived from one or multiple existing ones,
inheriting at least all visible data ﬁelds and functions from
their base classes. Hence, in the general case, an object can
be accessed as instance of its actual class or as instance of
any of its (immediate and not immediate) base classes. In
C++, it is possible to deﬁne a member function as virtual.
The implementation of an inherited virtual function may be
overridden in a derived class. Invoking a virtual function on
an object always invokes the speciﬁc implementation of the
object’s class even if the object was accessed as instance of
one of its base classes. This is referred to as polymorphism.
C++ compilers implement calls to virtual functions (vcalls)
with the help of vtables. A vtable is an array of pointers to
all, possibly inherited, virtual functions of a class; hence, each
virtual function is address-taken in an application. (For brevity,
we do not consider the case of multiple inheritance here.)
Every object of a class with at least one virtual function
contains a pointer to the corresponding vtable at its very
beginning (offset +0). This pointer is called vptr. Typically,
a vcall on Windows x64 is translated by a compiler to an
instruction sequence similar to the following:
mov
call
rdx, qword ptr [rcx]
qword ptr [rdx+8]
Here, rcx is the object’s this pointer—also referred to as
this-ptr in the following. First, the object’s vptr is temporarily
loaded from offset +0 from the this-ptr to rdx. Next, in the
given example, the second entry in the object’s vtable is called
by dereferencing rdx+8. Compilers generally hardcode the
index into a vtable at a vcall site. Accordingly, this particular
vcall site always invokes the second entry of a given vtable.
III. COUNTERFEIT OBJECT-ORIENTED PROGRAMMING
COOP is a code reuse attack approach targeting applications
developed in C++ or possibly other object-oriented languages.
We note that many of today’s notoriously attacked applications
are written in C++ (or contain major parts written in C++);
examples include, among others, Microsoft Internet Explorer,
Google Chrome, Mozilla Firefox, Adobe Reader, Microsoft
Ofﬁce, LibreOfﬁce, and OpenJDK.
In the following, we ﬁrst state our design goals and our
attacker model for COOP before we describe the actual build-
ing blocks of a COOP attack. For brevity reasons, the rest
of this section focuses on Microsoft Windows and the x86-
64 architecture as runtime environment. The COOP concept
is generally applicable to C++ applications running on any
operating system; it also extends to other architectures.
A. Goals
With COOP we aim to demonstrate the feasibility of creating
powerful code reuse attacks that do not exhibit the revealing
characteristics of existing attack approaches. Even advanced
existing variants of return-to-libc, ROP, JOP, or COP [8], [10],
[11], [16], [25], [26], [43], [53] rely on control ﬂow and data-
ﬂow patterns that are rarely or never encountered for regular
code; among these are typically one or more of the following:
C-1 indirect calls/jumps to non address-taken locations
C-2 returns not in compliance with the call stack
C-3 excessive use of indirect branches
C-4 pivoting of the stack pointer (possibly temporarily)
C-5 injection of new code pointers or manipulation of existing
ones
With COOP we demonstrate that
These characteristics still allow for the implementation of