关键字：break、continue、goto
一般注解：
这3种语句都能使程序流从程序的一处跳转至另一处。
break语句：
所有的循环和switch语句都可以使用break语句。它使程序控制跳出当前
循环或switch语句的剩余部分，并继续执行跟在循环或switch后面的语句。
示例：
switch (number)
{
case 4: printf("That's a good choice.\n");
482
break;
case 5: printf("That's a fair choice.\n");
break;
default: printf("That's a poor choice.\n");
}
continue语句：
所有的循环都可以使用continue语句，但是switch语句不行。continue语
句使程序控制跳出循环的剩余部分。对于while或for循环，程序执行到
continue语句后会开始进入下一轮迭代。对于do while循环，对出口条件求值
后，如有必要会进入下一轮迭代。
示例：
while ((ch = getchar()) != '\n')
{
if (ch == ' ')
continue;
putchar(ch);
chcount++;
}
以上程序段把用户输入的字符再次显示在屏幕上，并统计非空格字符。
goto语句：
483
goto语句使程序控制跳转至相应标签语句。冒号用于分隔标签和标签语
句。标签名遵循变量命名规则。标签语句可以出现在goto的前面或后面。
形式：
goto label ;
label : statement
示例：
top : ch = getchar();
if (ch != 'y')
goto top;
484
7.9 关键概念
智能的一个方面是，根据情况做出相应的响应。所以，选择语句是开发
具有智能行为程序的基础。C语言通过if、if else和switch语句，以及条件运
算符（?:）可以实现智能选择。
if 和 if else 语句使用测试条件来判断执行哪些语句。所有非零值都被视
为 true，零被视为false。测试通常涉及关系表达式（比较两个值）、逻辑表
达式（用逻辑运算符组合或更改其他表达式）。
要记住一个通用原则，如果要测试两个条件，应该使用逻辑运算符把两
个完整的测试表达式组合起来。例如，下面这些是错误的：
if (a  3 && 'a'>'c'
b
100 > 3 || 'a'>'c'
c
!(100>3)
2.根据下列描述的条件，分别构造一个表达式：
a
 umber等于或大于90，但是小于100
b
 h不是字符q或k
c
 umber在1～9之间（包括1和9），但不是5
d
 umber不在1～9之间
3.下面的程序关系表达式过于复杂，而且还有些错误，请简化并改正。
#include 
int main(void)                  /* 1 */
{                        /* 2 */
int weight, height; /* weight以磅为单位，height以英寸为单位 *//* 4 */
scanf("%d , weight, height);          /* 5 */
if (weight  64)        /* 6 */
487
if (height >= 72)             /* 7 */
printf("You are very tall for your weight.\n");
else if (height  64)        /* 9 */
printf("You are tall for your weight.\n");/* 10 */
else if (weight > 300 && !(weight = 48))            /* 13 */
printf(" You are quite short for your weight.\n");
else                     /* 15 */
printf("Your weight is ideal.\n");      /* 16 */
/* 17 */
return 0;
}
4.下列个表达式的值是多少？
a.5 > 2
b.3 + 4 > 2 && 3 = y || y > x
d.d = 5 + ( 6 > 2 )
e.'X' > 'T' ? 10 : 5
488
f.x > y ? y > x : x > y
5.下面的程序将打印什么？
#include 
int main(void)
{
int num;
for (num = 1; num 
int main(void)
{
int i = 0;
while (i 
int main(void)
{
490
char ch;
int lc = 0; /* 统计小写字母
int uc = 0; /* 统计大写字母
int oc = 0; /* 统计其他字母
while ((ch = getchar()) != '#')
{
if ('a' = 'z')
lc++;
else if (!(ch  'Z')
uc++;
oc++;
}
printf(%d lowercase, %d uppercase, %d other, lc, uc, oc);
return 0;
}
8.下面的程序将打印什么？
/* retire.c */
#include 
int main(void)
491
{
int age = 20;
while (age++ 
int main(void)
{
492
char ch;
while ((ch = getchar()) != '#')
{
if (ch == '\n')
continue;
printf("Step 1\n");
if (ch == 'c')
continue;
else if (ch == 'b')
break;
else if (ch == 'h')
goto laststep;
printf("Step 2\n");
laststep: printf("Step 3\n");
}
printf("Done\n");
return 0;
}
10.重写复习题9，但这次不能使用continue和goto语句。
493
7.12 编程练习
1.编写一个程序读取输入，读到#字符停止，然后报告读取的空格数、
换行符数和所有其他字符的数量。
2.编写一个程序读取输入，读到#字符停止。程序要打印每个输入的字
符以及对应的ASCII码（十进制）。一行打印8个字符。建议:使用字符计数
和求模运算符（%）在每8个循环周期时打印一个换行符。
3.编写一个程序，读取整数直到用户输入 0。输入结束后，程序应报告
用户输入的偶数（不包括 0）个数、这些偶数的平均值、输入的奇数个数及
其奇数的平均值。
4.使用if else语句编写一个程序读取输入，读到#停止。用感叹号替换句
号，用两个感叹号替换原来的感叹号，最后报告进行了多少次替换。
5.使用switch重写练习4。
6.编写程序读取输入，读到#停止，报告ei出现的次数。
注意
该程序要记录前一个字符和当前字符。用“Receive your eieio award”这
样的输入来测试。
7.编写一个程序，提示用户输入一周工作的小时数，然后打印工资总
额、税金和净收入。做如下假设：
a.基本工资 = 1000美元/小时
b.加班（超过40小时） = 1.5倍的时间
c.税率： 前300美元为15%
续150美元为20%
494