### Data Integrity Management Framework

#### 1. Data Handling Rules
- **Trusted Data Location:**
  - Log the write operation.
  - Save the old data.
  - Mark the new data in this location as untrusted.

- **Untrusted Data Location:**
  - Do nothing.

- **Empty Data Location:**
  - Log the write operation.
  - Mark the new data in this location as untrusted.

#### 2. Recovery Process
During recovery, the framework examines each logged write operation in reverse chronological order. The framework only logs write operations by untrusted processes. For each logged write operation, the recovery agents restore the old data from the log if the location currently contains untrusted data.

#### 3. Proof of Correctness
We prove that the refined approach achieves the same result as the basic approach. Given a data location with a sequence of write operations \(O_1, \ldots, O_n\) before system recovery, we consider two cases:

- **Case 1: Last Write Operation \(O_n\) is from a Trusted Process:**
  - **Basic Approach:**
    - Undo \(O_n, \ldots, O_1\).
    - Redo only the operations from trusted processes in the order \(O_1, \ldots, O_n\).
    - The location will contain the data written by \(O_n\) after recovery.
  - **Refined Approach:**
    - Notice that the location already contains trusted data.
    - Do nothing on this location.
    - Since the location already contains data written by \(O_n\) before recovery, it will contain the same data after recovery using the refined approach.

- **Case 2: Last Write Operation \(O_n\) is from an Untrusted Process:**
  - Let \(O_t\) be the last write operation by a trusted process.
  - Sequence: \(O_1, \ldots, O_t, O_{t+1}, \ldots, O_n\), where all \(O_{t+1}, \ldots, O_n\) are from untrusted processes.
  - **Basic Approach:**
    - Undo \(O_n, \ldots, O_1\).
    - Redo only the operations from trusted processes in the order \(O_1, \ldots, O_t\).
    - The location will contain the data written by \(O_t\) after recovery.
  - **Refined Approach:**
    - During monitoring, log \(O_{t+1}\) but not any operation after \(O_{t+1}\) because \(O_{t+1}\) writes untrusted data.
    - During recovery, undo \(O_{t+1}\) by replacing the data with the data before \(O_{t+1}\), which was written by \(O_t\).
    - After this, the location contains trusted data and no further changes are made.
    - Both approaches restore the same data into this location.

### 4. Implementation
To evaluate our framework, we developed a prototype for the Windows XP operating system, consisting of three essential components: a monitor, logger, and recovery agent.

#### 4.1. Monitoring
- **System Service Hooking:**
  - In Windows NT 4, 2000, and XP, user applications use the Win32 API and Native API to access operating system services.
  - Kernel drivers can modify the service dispatch table to hook system services, allowing interception of all system service calls.
  - Our framework hooks file system, registry, and process creation services.

- **Tracking Untrusted Data:**
  - The monitor tracks untrusted data at appropriate granularities (e.g., one value for the registry, ranges for files).
  - A table maintains information about files and registry entries containing untrusted data.
  - The monitor uses this table to prevent trusted processes from reading untrusted data.

#### 4.2. Logging
- **Logging Mechanism:**
  - Logs write operations from untrusted processes.
  - Backups and forwards information to the logger.

#### 4.3. Recovery
- **Recovery Process:**
  - Uses logged information to remove malware and restore infected data.
  - Rolls back the effects of each entry until the desired system state is reached.
  - Uses trustworthiness information from the monitor to determine what portions of data to restore.

### 5. Experiments
We evaluated the tool's effectiveness in detecting, removing, and restoring infected data, and its performance during monitoring and recovery.

#### 5.1. Malware Testing
- **Malware Programs:**
  - Adware and spyware: eZula, Gator, BonziBuddy.
  - Trojan horse: NetBus.
  - Email worms: Netsky, Beagle.
  - Hybrid malware: Happy99.

- **Recovery Effectiveness:**
  - Compared with commercial tools: Spybot and Symantec Norton AntiVirus.
  - First experiment: Our tool removed malware completely, as verified by commercial tools.
  - Second experiment: Commercial tools failed to remove all files and registry entries created by malware.

- **Usability:**
  - Monitors read and write operations of both trusted and untrusted processes.
  - Alerts the user if a trusted process reads untrusted data.
  - No alerts were seen during testing, but some malware should have triggered alerts.

- **Performance:**
  - Monitors all processes and intercepts system service calls.
  - Overhead is reasonable compared to commercial anti-spyware and antivirus programs.

### 6. Discussion
- **Security Goals:**
  - Focuses on maintaining integrity.
  - Does not directly ensure availability or confidentiality.
  - Future work can enhance confidentiality by disallowing untrusted applications from reading confidential information.

- **Security of the Logging Mechanism:**
  - Logs only write operations that replace trusted data.
  - Categorizes write operations to manage log size and prevent DOS attacks.

This optimized version provides a clear, coherent, and professional presentation of the data integrity management framework, including detailed explanations and structured sections.