XML），所以就没有办法互操作。
修改女招待中的许多代码。
benci
在看下一页之前，请很快写下为了能让这份代码符合我们的框架，我们要对它做的三件事情：
1.实现Mem接口
2.毛弃getJtems()
3.加上ceateteator().返图一个Jterator，以便逸历Hashtable的值。
你现在的位置
381
---
## Page 418
习题解答
代码帖解答
组合出“另一种”DinerMenu的选代器
import java.util.Iterator;
import java.util.Calendar;
public class AlternatingDinerMenuIterator
implements Iterator
MenuItem[] items;
int position;
public AlternatingDinerMenuIterator (MenuItem[l items)
this.items = items;
Calendar rightNow= Calendar.getInstance();
position = rightNow.get(calendar.DAY_OF_wEEK)
public boolean hasNext()
if (position >= items.length I1 items[position]==null)
return false;
else{
return true;
public Object next(）(
MenuItem menuItem = items[position];
position = position + 2;
return menuItem;
请注意，此选代
器实现不支持
public void remove(){
temove()
throw new UnsupportedOperationException(
"Alternating Diner Menu Iterator does not support remove()");
382
第9章
---
## Page 419
选代器与组合模式
请将下列模式和描述配对：
模式
描述
客户可以将对象的集合以
策略
及个别的对象一视同仁
适配器
提供一个方式来遍历集合，
而无须暴露集合的实现
选代器
简化一群类的接
外观
改变一个或多个类的接口
银合
当某个状态改变时，允许
一群对象能被通知到
观察者
封装可互换的行为，并使
用委托决定使用哪一个
PDG
你现在的位置，
383
---
## Page 420
填字游戏解答
习题解答
R
ECRSO
N
E
LEJ
S
H
ANGE
F
A
02
O2
O
工
N
PDG
384
第9章
---
## Page 421
10状态模式
事物的状态
我原本以为在对象村的一切事物
都很容易，但是每次我一回头就有
更多变更的请求纷至当来。我快脂
清了！或许我当初应该一直去参加
Betty图三晚上的模式读书会。我
现在的状态藉透了！
基本常识：策略模式和状态模式是双胞胎，在出生时才分
开。你已经知道了，策略模式是围绕可以互换的算法来创建成功业务的。然
而，状态走的是更崇高的路，它通过改变对象内部的状态来帮助对象控制自己
的行为。它常常告诉它的对象客户“跟着我念：我很棒，我很聪明，我最优秀
了 .....
这是新的一章385
---
## Page 422
认识万能糖果公司
ya
Jaw粉碎机
Java烤面包机已经落伍了，现在人们已经把Java创建
至少这是他们单方面的说
在像糖果机这样真正的装置中。没错，糖果机已经进
法一我们认为他们其实只
入了高科技时代。糖果机的主要制造厂商发现，只要把
是厌倦了公元1800年左右的
CPU放进机器中，就可以增加销售量、通过网络监测库
科技，想要找些事情让他们
存，并且能精准地得知客户的满意度。
的工作变得更有趣。
但是这些制造商都是糖果机的专家，并非软件专家，他
们需要你的帮助：
我们认为糖果机的控制器需要如下图般的工作。希望你能
用ava语言帮我们实现它，而且需爱让设计能够尽量有弹
性而且好维护，因为将来我们可能要为它增加更多的行为。
万能糖果公司
—万能糖果工程师
有糖果机的地方，
永远充满活力
糖果售馨
有25分
钱
投入25分钱
返25分
没有
25分钱
糖果数日
售出糖果
糖果数0=0
发放糖果
386
第10章
---
## Page 423
状态模式
办公室隔间对话
看看这张图，了解万能
糖累公司的这群人悲要
些什么…
Anne：这张图像是一张状态图。
Joe：没错，每个圆圈都是一个状态。
Anne：.而每个箭头都是状态的转换。
Frank：慢点，你们两个。我已经好久没有接触状态图，忘得一干二净
了！你们能提醒我状态图是干什么的吗？
Anne：当然可以了，Frank。你看到的圆圈，就是状态。“没有25分
钱”大概就是糖果机的开始状态，等着你把钱放进来。每一个状态都代
表机器不同的配置以某种方式行动，需要某些动作将目前的状态转换到
另一个状态。
Anne
1oe
Frank
Joe：没错。看，要进入另一个状态，必须做某些事情，例如将25分钱
钱”。
Frank：是的.......
Joe：这就表示如果糖果机在“没有25分钱”的状态下，放进25分钱的硬币，就会进入“有25分钱”的状态。
这就是状态的转换。
Frank：噢！我懂了！如果我是在“有25分钱”的状态，就可以转动曲柄改变到“售出糖果”状态，或者退还
硬币回到“没有25分钱”状态。
Anne：就是这样！
Frank：这个状态图看起来并不太难。很明显我们有四个状态，而我认为我们也有四个动作，分别为：“投
入25分钱”、“退回25分钱”、“转动曲柄”和“发放糖果”。但是当我们发放的时候，要在“售出糖
果”的状态中测试，是否糖果数目已经为零，来决定是否要进入到“糖果售馨”状态，或是进入“没有25分
钱”状态。所以实际上，我们有五个状态转换。
Anne：测试糖果数目是否为零，也意味着我们必须持续地追踪糖果的数目。任何时候只要机器给出一颗糖果，
都有可能是最后一颗糖果，如果是的话，我们就需要转换到“糖果售馨”状态。
Joe：也请不要忘了可以做没有意义的事，例如，当糖果机在“没有25分钱”状态的时候，试着去退回25分钱，
或者是在糖果机内同时放进两个25分钱。
Frank：噢！这我倒没想到；我们也要注意到这部分。
Joe：对于任何一个可能的动作，我们都要检查，看看我们所处的状态和动作是否合适。这没问题！让我们开
始将状态图映射成代码
你现在的位置》387
---
## Page 424
回顾状态机
状态机101
我们如何从状态图得到真正的代码呢？下面是一个实现状态机
（state machine）的简单介绍。
①首先，找出所有的状态：
这就是状态一一总共有四个。
2
接下来，创建一个实例变量来持有目前的状态，然后定义每个状态的值：
将“糖集售警”简称为“售
馨”（Soldout)。
final static int SOLD_OUT = 0;
每一个状态都用一个不同
final static int NO_QUARTER = 1;
的整数代表。
final static int HAS_QUARTER = 2;
final static int SOLD = 3;
int state = SOLD_OUT;
而这是一个实例变量.持有当前
的状态。我们将它设置为“糖果售
馨”状态，因为糖累机一开始拆箱并
安装的时候，是没有装糖果的。
3
现在、我们将所有系统中可以发生的动作整合起来：
转动曲柄
这些动作是糖果机的
投入25分钱
接口~这是你能对
电25分钱
糖果机做的事情。
发放糖果
发放糖果更多是糖果机的内部动
看看这个图，调用任何一个动
作，机器自己课用自己。
作都会造成状态的转换。
388
第10章
---
## Page 425
状态模式
4
现在，我们创建了一个类，它的作用就像是一个状态机。对每
一个动作，我们都创建了一个对应的方法，这些方法利用条件语
句来决定在每个状态内什么行为是恰当的。比如对“投入25分
钱”这个动作来说，我们可以把对应方法写成下面的样子：
public void insertQuarter()(
if (state == HAS_QUARTER) {
每一个可能的状态都
System.out.println("You can't insert another quarter") ;
需要用条件语句检
}else if (state == SOLD_OUT){
System.out.println("You can't insert a quarter, the machine is/sold out");
}else if (state == SOLD){
System.out.println("Please wait, we're already giving you a gumball") ;
}else if (state == NO_QUARTER){
个
state = HAS_QUARTER;
System.out.println(*You inserted a quarter") ;
.然后对每一个可能的状态展现
送当的行为……
…但是也可以转换到另一个
状态像状态图中所描绘的那样。
我们在这里所谈论的是一个通用
的技巧：如何对对象内的状态建
模—通过创建一个实例变量来持
有状态值，并在方法内书写条件
代码来处理不同状态。
在这一段简洁的说明之后，让我们开始实现糖果机吧！
你现在的位置
389
---
## Page 426
实现糖果机
写下代码
现在我们来实现糖果机。我们知道要利用实例变量持有当前的状态，然后需要处理所
有可能发生的动作、行为和状态的转换。我们需要实现的动作包括：投入25分钱、退
回25分钱、转动曲柄和发放糖果：也要检查糖果是否售馨。
这就是那四个状态。它们符合万能糖果公
司的状态图。
public class GumballMachine {
这个实例变量跟踪当前状态，一开始被设
final static int SOLD_OUT =0;
置为“糖果售馨”。
final static int NO_QUARTER = 1;
final static int HAS_QUARTER = 2;
我们还有第二个实例变量，用来造踪机器
final static int SOLD = 3;
内的糖果数目。
int state = SOLD_OUT;
int count =0;
构造器需要初始糖果库存量当做参数。
public GumballMachine(int count) (
如累库存量不为零的话，机器就金进
this.count = count;
入“没有25分钱”的状态，也就是说
if (count >0){
它等考别人投入25分钱。如果糖果数
state =NO_QUARTER;
0为0的话，机器就金保持在“糖果售
馨”的状态。
现在我们开始将这些动作实
现成方法.
当有25分钱投进来，韩金执行这里.
如果已投入过25分钱，我
们就告诉顾客：
public void insertQuarter()(
if (state == HAS_QUARTER)(
如果是在“没有25分
System.out.println("You can't insert another
quarter");
钱”的状态下，我们就接
}else if (state == NO_QUARTER){
受25分钱，并将状态转换
state = HAS_QUARTER;
System.out.println("You inserted a quarter");
到“有25分钱”的状态。
}else if (state == SOLD_OUT){
System.out.println("You can't insert a quarter, the machine is sold out");
}else if (state == SOLD){
System.out.println("Please wait, we're already giving you a gumbal1");
K
如果糖果已经售馨
如果顾客创刚才买了糖累，就需要
我们统拒绝收钱。
稍等一下，好让状态转换究毕，使
复到“没有25分钱”的状态。
390
第10章
---
## Page 427
状态模式
如果顾客试着退回25分钱
public void ejectQuarter()(
如果有25分钱，就把钱退出
if (state == HAS_QUARTER)
来，回到“没有25分钱”的
System.out.println("Quarter returned");
state = NO_QUARTER;
状态。
}else if (state == NO_QUARTER){
如果没有25分钱的话，当然
System.out.println("You haven't inserted a quarter");
}else if （state ==SOLD){
不能退出25分钱。
System.out.println("Sorry, you already turned the crank");
}else if (state == SOLD OUT){
System.out.println("You can't eject, you haven't inserted a quarter yet");
如果糖果售馨，就不可能接受25分钱，
如果顾客已经转动曲辆，
当然也不可能退钱。
就不能再退钱了，他己经
顾客试着转动曲柄.
拿到糖果了！
public void turnCrank() {
别想骗过机器拿两次糖果。
if (state == SOLD){
System.out.println("Turning twice doesn't get you another gumball!");
}else if (state == NO_QUARTER){
我们需要先投入
System.out.println("You turned but there's no quarter");
→
25分钱。
}else if (state == SOLD_OUT){
System.out.println("You turned,
but there are no gumballs");
我们不能给糖果一已
}else if (state == HAS_QUARTER)
经没有任何糖果了。
System.out.println("You turned...");
state = SOLD;
dispense();