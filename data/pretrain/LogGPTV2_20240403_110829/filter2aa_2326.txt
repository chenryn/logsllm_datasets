# Hacking WebAssembly Games with Binary Instrumentation

## WebAssembly 101

### Introduction to WebAssembly (WASM)
- Developers have made and continue to make significant strides in optimizing JavaScript performance.
- However, the dynamic nature of JavaScript remains a performance bottleneck.
- WebAssembly provides a static, pre-compiled binary format, ideal for performance-critical applications.

### What is WebAssembly?
- WebAssembly defines an instruction set and binary format for an assembly-like architecture.
- It is designed to be targetable by existing compilers and languages, allowing developers to write web applications in languages like C.

## Uses of WebAssembly
- **WebAssembly in Gaming:**
  - WebAssembly video games are becoming increasingly common on platforms like Newgrounds and Kongregate.
  - Game engines such as Unity3D and Unreal Engine 4 now support WebAssembly, expanding the number of potential targets.
  - Despite the growing number of WebAssembly games, there is a relative lack of specialized tools for analyzing and modifying them.

- **Other Applications:**
  - WebAssembly is not limited to gaming; it is also used for:
    - Retargeted desktop applications
    - 3D applications
    - Cryptocurrency miners
    - And more
  - The techniques discussed here are not specific to games but can be applied to any WebAssembly application. Games, however, are often the most engaging and fun targets.

## Reversing WebAssembly
- With WebAssembly, web reverse engineering (RE) has started to resemble traditional binary RE.
- Tools that support WebAssembly include:
  - radare2
  - JEB decompiler
  - wabt (WebAssembly Binary Toolkit)

- **Challenges in Browser Debugging:**
  - Current browser debugging capabilities for WebAssembly are limited.
  - Features like watchpoints and conditional breakpoints are missing.
  - There are also numerous bugs in the current implementations.

## Video Game Reversing
- Video games present unique challenges in RE:
  - Game binaries are typically larger and more complex than other applications.
  - Games are highly performance-sensitive, and any performance impact is immediately noticeable.
  - Players expect smooth gameplay, making it crucial to maintain high frame rates.

- **Cheat Engine:**
  - Cheat Engine, developed by Dark Byte, is a specialized debugger for hacking video games.
  - Key features include:
    - Memory searching
    - Memory modification and "freezing"
    - Watchpoints
    - Code injection and patching

### Example: Making a Character Invincible
- Suppose we want to make our character invincible. We know the character currently has 5 health points.
- We start by searching the gameâ€™s memory for the value 5.
- We then cause the value to change and search for the new value, repeating this process until we find the health value in memory.
- Once identified, we can manipulate the health value to heal ourselves, give ourselves more health, or "freeze" our health so we cannot be hurt.
- This process can be time-consuming and needs to be repeated each time we play. Ideally, we want to permanently patch the game.
- By setting a watchpoint on the health address and triggering it, we can identify where the health is decremented when we get hurt and patch it out.

- **Benefits of Cheat Engine:**
  - Cheat Engine not only helps in hacking games but is also a significant tool for RE.
  - Using watchpoints, we can associate a value in memory with the code that affects it, saving time when reverse engineering large applications like video games.

## Emulating Watchpoints in WebAssembly
- Since WebAssembly does not natively support watchpoints, we need to emulate this behavior.
- **First Attempt: Using the Browser Debugger**
  - Place a breakpoint at each load/store instruction and check if the access affects our "watched" address.
  - This approach is too slow and makes the browser unusable.

- **Injecting Code into the Binary:**
  - To emulate watchpoints, we inject code into the binary at each memory load/store instruction.
  - The injected code checks if the access affects the memory area we are "watching."
  - If it does, it triggers our breakpoint code.
  - This requires binary instrumentation.

## Binary Instrumentation
- Binary instrumentation involves manipulating an application binary to aid in analysis.
- Existing tools for other types of binaries include Frida and DynamoRIO.
- Some tools for WebAssembly already exist, such as Wasabi and WABT.

### WebAssembly Instrumentation Library (WAIL)
- **Overview:**
  - WAIL is a JavaScript library designed for targeted modifications to WebAssembly binaries.
  - It can add, edit, and remove sections and entries within the binary.
  - WAIL uses several tricks to modify binaries faster and with less memory usage compared to other libraries.

- **Parsing Techniques:**
  - **Stream Parsing:**
    - WAIL parses binaries as a stream, handling and modifying each element as soon as it is read.
    - This is more efficient because it does not require saving each element of the entire binary.
    - Instead, it acts on one element at a time and then moves to the next.

- **Challenges and Solutions:**
  - **Parser Limitations:**
    - The parser cannot go "backwards" once an element is parsed.
    - All modifications must be defined before parsing begins.
    - WAIL uses a special grammar to handle complex modifications, returning handles to values that will be resolved during parsing.
  - **Function and Global Variable Tables:**
    - Adding new imported functions or globals can throw off references to internal functions/globals.
    - WAIL automatically adjusts affected entries in the EXPORT, ELEMENT, CODE, and START sections to fix this.

### Emulating Watchpoints with WAIL
- **Steps:**
  - Create two new global variables: one for the watched address and another for flags (e.g., watchpoint enabled, size of value).
  - Add an IMPORT entry for a JavaScript function that will be called when the watchpoint is triggered.
  - Create a new internal function to perform the watchpoint logic, checking if an access overlaps with the watched address and calling the trigger function if it does.
  - Place calls to the watchpoint function before each memory load or store instruction, ensuring minimal performance impact.

## Cetus: A Browser Extension for WebAssembly
- **Overview:**
  - Cetus is a browser extension that implements features of Cheat Engine for WebAssembly.
  - It intercepts and instruments WebAssembly binaries on the fly.
  - Features include:
    - Read/write watchpoints
    - "Freezing" functionality
    - User-defined patches
    - Differential searching
    - Built-in speed hack

### Other Examples
- **Function Call Tracing:**
  - WAIL can trace function calls by placing code at the beginning of each function, though this is slow but still useful.
- **Function Replacement:**
  - WAIL can replace a function entirely by swapping out all references to it, allowing us to patch WebAssembly binaries using JavaScript.
- **Exporting Internal Functions:**
  - WAIL can export internal functions, allowing us to call them with arbitrary arguments.

### Adding Symbols
- Using WAIL, we can add our own symbols to a binary:
  - Add a "name" section to the binary with our symbols.
  - Add an export entry for each function we want to name.

## Conclusion
- WAIL and Cetus provide powerful tools for analyzing and modifying WebAssembly binaries, particularly in the context of video games.
- These tools enable features similar to those found in Cheat Engine, making it easier to reverse engineer and modify WebAssembly applications.

**GitHub Repositories:**
- [WAIL](https://github.com/qwokka/wail)
- [Cetus](https://github.com/qwokka/cetus)

**Game Hacking Montage**
- [Insert Video Link]