# 04 \| 启动：识别项目中的四类干系人你好，我是雷蓓蓓。今天是硬技能篇的第一讲，主题是识别项目中的四类干系人。 所谓万事开头难，一个项目刚刚启动的时候，往往是各种混乱夹杂在一起。如果没有经过专业培训，只是凭着一腔热情，一头扎进文山会海之中，那么很可能你做得越久，就会遇到越多的困难，也会越发困惑。 其实，要想在混乱中快速建立秩序，是有章法可循的。今天，我就从最初的一环开始分解。在一个新项目刚刚启动时，干系人分析，可以说是最容易被漏掉的一个重要环节。 干系人分析，是指对项目干系人进行分析和归类，有针对性地规划管理其核心诉求和期望，让干系人可以更好地参与项目，对项目产生积极影响，从而更好地保障项目目标的成功达成。 干系人分析的目的是什么呢？毛主席说过这样一句话："要把拥护我们的人搞得多多的，把反对我们的人搞得少少的。"干革命如此，做项目也是同样！作为项目管理人员，你需要通过积极的干系人管理，尽可能把反对的力量变成支持的力量，同时发掘和调动中间力量。这样一来，项目才会越做越省力。 ![](Images/fc850510b3af6bc5ac40ce3578c07912.png)savepage-src="https://static001.geekbang.org/resource/image/6e/97/6ebb1c2aacc4b0d832a391fa61297f97.jpg"}为了做到这一点，你需要深入了解项目的现状以及各方干系人对项目的期望和诉求，因地制宜地采取相应的策略，才能够做到有的放矢。 如果按照在项目上的权力和利益相关度对干系人进行划分，可以把项目干系人分成四类：高利益 -高权力，高利益 - 低权力，低利益 - 高权力，低利益 -低权力。为了方便你更直观地理解干系人的类别，我给你分享一张干系人的四象限分类图。接下来，我会结合这四类干系人，为你讲解各个象限的应对之道。 ![](Images/f89ce9edd8efb6904c9dd55910a7e034.png)savepage-src="https://static001.geekbang.org/resource/image/95/61/952fa4513faa5f1ec123d4921f86ed61.jpg"}"高利益 - 高权力"代表：项目发起人《项目管理知识体系指南》把项目发起人称为Sponsor，即项目资助人。项目发起人会定义组织对项目的需求，为项目提供资金支持，并进行人员配备。一般来说，项目发起人天然会成为你强有力的支持者，你需要重点管理。 实际上，了解发起人对项目的真正诉求，对项目的成功至关重要。有很多项目经理只知道保质保量地完成项目是最重要的，却从来没问过发起人，这个项目真正要的是什么。我曾见过很多看上去执行得还挺顺利的项目，中途却突然被撤消，大多是因为没有搞清楚这个项目会为组织带来什么，以及组织对项目成功的定义是什么。 你要知道，发起人所掌握的项目背景信息量肯定比你要大，所以，对发起人做一轮全面而深入的了解，是非常有必要的。我为你精心准备了一个问题列表，你可以找发起人好好聊一聊这些问题。 ![](Images/edfbcdf25f69fbf9f1344d8117b2d1c6.png)savepage-src="https://static001.geekbang.org/resource/image/df/ce/dffb7a0311faefa4814079d6219c2ece.jpg"}在这个列表里，有一些问题你需要重点跟项目发起人进行沟通。比如，他发起这个项目的背景和初衷是什么？如何才能知道我们做到了？哪些资源是项目获得成功的关键？他最看重项目的哪些要素？是进度、质量、成本还是范围？在极端情况下，我们该如何对这些要素进行排序呢？ 即便你的项目已经开始了，你也可以参照这个列表，问问自己是否知道这些问题的答案。需要注意的是，对于你不太确定的地方，特别是我用红色标注的这些问题，不要自认为发起人的想法和你的想法是一致的，你不妨找他当面确认下。 **同时，为了管理好之后的沟通，你还需要约定好你们之间的沟通频率和方式，以便在项目进行的过程中做好实时同步**。比如，可以是每周用邮件同步项目的进展及风险问题、建立核心微信群实时交流、每个月至少进行一次深入面谈等。或者，你们只是简单地达成约定：在你需要支持的时候，随时发起，当日问题当日解决，这也是可以的。 "低利益 - 高权力"代表：职能经理在矩阵式组织结构中，职能经理是资源池的所有者，他们所管辖的团队通常覆盖多个项目或项目群，这也使得他们与单个项目的利益相关度通常比较低，介入程度往往也很有限。但是，因为他们对资源的把控力很强，如果管理不好这类干系人，你的项目资源就很容易受到影响。 我曾经就碰到过这样的情况。有段时间，团队一再跟我抱怨，这个项目中的设计资源成了最大的瓶颈，于是我决定去拜访一下那位传说中性格乖张、超难合作的设计经理。 见面后的前半个小时，他一直在跟我抱怨："项目进度压得太紧，我的很多设计师都累病了；产品和开发对设计师们太不友好了，产品没有经验，连需求都说不清楚；开发实现得还原度太低，问题一箩筐......" 我没有反驳他，而是把他的话一条条地记录了下来。半个小时之后，我给他看我记的内容，耐心地跟他一一确认，他想要表达的是不是我所记录的意思。看到我认真的笔记，他的态度明显缓和了。 经过一番梳理，我发现，他之所以排斥这个项目，是因为他觉得在这个项目中，设计师没有太多发挥的空间。于是，我问他："咱们设计团队今年最想做的事是什么？这个项目怎样才能更好地支持你和你的团队呢？"这个问题瞬间打开了他的话匣子，他兴致高昂地跟我描绘了他的期望。这次交流，让我们找到了更多深度契合的合作点。 随着合作的深入，这位经理从一个抵制者慢慢变成了项目的坚定支持者。他调动了资深的设计师来支持这个项目，并且主动发起了Logo和界面主风格改版的创意评选活动，把项目的设计品质提升了一大截，这给项目组带来了非常正向的影响。 所有你看，要想让干系人的态度发生转变，最重要的就是弄清楚他抵制的原因。强烈的态度背后，一定反映了干系人对现状的某种认知，比如，这位设计经理抱怨的"这个项目没有太多设计师可以发挥的空间"，这种认知未必是事实，但你一定不要急于反驳，而是不带评判地去了解他的内心想法，通过积极聆听去建立信任。只有真正地理解了对方的逻辑，才有可能进一步对其施加影响。 总体来看，根据对项目的认知态度，我们还可以把"低利益 -高权力"的干系人再细分成以下 3类，进行差异化管理。 ![](Images/6fc49982c050fa42c2a10b41b1564578.png)savepage-src="https://static001.geekbang.org/resource/image/19/3d/19fcdf9443a976cd0c693412d716b83d.jpg"}1.       反对者（红色部分）：反对者是最难处理的一类，就像刚刚案例中展示的那样，管理这类人的重点在于        [建立信任，化解敌意            。如果你实在无法争取他们的支持，至少要让他们保持中立，以免对其他成员造成负面影响。        2.       支持者（绿色部分）：支持者是项目获得成功非常需要依赖的力量。管理这类人的重点是，首先你要明确地知道，他们各自对项目不同的期望和诉求，然后有意识地创造更多的空间和机会，让他们能够深度参与到这个项目的决策或创意环节。这样可以增强他们的主人翁意识，也会给整个项目组带来最大的收益。        3.       中立者（灰色部分）：对待这类人，总体原则就是，在条件合适时，进一步将其转化为支持力量。但如果你精力有限，可以先不管。        如果你想对这类干系人有进一步的了解，我再给你分享一个问题列表，你要重点关注一下我标为红色的部分。 ![](Images/9c10fbc0eb683f98859c9b6be16d4b42.png)savepage-src="https://static001.geekbang.org/resource/image/65/6e/65d87f32dc4efe9676c7a8854324566e.jpg"}"高利益 - 低权力"代表：项目组成员这是与项目结果结果直接相关，但是对决策影响不大的一类人，广大的项目组成员就属于这个象限的典型代表。你可以借助三类问题，了解流程的基本情况和成员的信息诉求。 ![](Images/c60e1975931d6f8ad285ab11f0922763.png)savepage-src="https://static001.geekbang.org/resource/image/bb/b6/bbd61a148eb7622403187e3911eb0bb6.jpg"}这些问题可以帮你了解项目的规划和实施过程，找出那些没有做到位的地方，弄清楚项目组成员当前最希望通过项目管理看到的变化。这些痛点和渴望，会成为你在团队中促发改变的有力抓手，帮助你找准突破点，集中发力。 有位创业团队的同学给我留言说，他认为，现在团队扩大之后，最大的痛点就是开发流程不规范，但是却得不到老板的重视。那么在这种情况下，对项目组成员的访谈或集体复盘，就是很有效的方法。你可以让更多完善改进的声音和力量汇聚起来，这样一来，就能争取到更多的关注和资源支持。 **管理这类干系人的核心，就是要做到项目事项的随时告知，及时通报项目的进展和困难**。在专栏的第 7讲中，我会分享给你进展同步的方法，教你学会用数据说话。 "低利益 - 低权力"代表：外围支持人员我们通常会把一些复杂度低而且非核心的工作，转交给外围支持人员，比如，设计外包、技术外包人员等。在不影响项目的前提下，你可以花最小的力气对他们进行监督。比如，你可以跟他们提前约定好，每天或者每周进展汇报的格式和内容，确保他们的工作职责和任务明确，进展符合预期就可以了。 总结今天，我主要介绍了启动过程中的一项重要活动，叫作识别项目干系人。四象限的干系人分析法，就相当于一个指导原则，可以帮助你明确地管理每一类人的预期。不管你的项目是否已经在进行中，我都建议你对典型的干系人进行分类和访谈，深入地了解干系人的核心诉求（重点关注哪些，对项目有哪些预期），从而制定出合理的干系人沟通管理计划（包括频率、方式、内容）。 畅所欲言请你结合自己的项目情况，制作一份干系人分析表。另外，请你谈一谈，针对每一类干系人，你的管理策略是什么？ ![](Images/9c9564295196a55934a91fe514fc8d3e.png)savepage-src="https://static001.geekbang.org/resource/image/17/c5/17758e36defc2dadd499d2e265fad6c5.jpg"}欢迎你畅所欲言，我在留言区等你，也欢迎你把文章分享给你的朋友。 ![](Images/5a8595ceb941a30ac4b65104d2761f81.png)savepage-src="https://static001.geekbang.org/resource/image/2b/f2/2b83b5b04de8641dbbc3da87b52c44f2.jpg"}
# 05 \| 规划：排除计划中的"延期地雷"你好，我是雷蓓蓓。今天，我们来聊一聊如何排除计划中的"延期地雷"。 我发现，有很多程序员是根本不做估算的。原因有很多，但总体来说，可以归结为一个：**嫌麻烦**。我的一个程序员朋友曾经跟我说过这样一段话："我们是创业团队，领导一拍脑袋给个deadline，时间差不多了我们就开干。如果到时候上不了线，我们就再加班呗！反正计划都是倒排的，估不估工作量，问题不大。" 这种现象很普遍，那么，为啥一定要做计划呢？ 在项目管理中，**计划是贯穿始终的重要课题，是各个角色协同工作的基准**。程序员在做项目管理的时候，会有个特别明显的优势，就是对项目中涉及到的架构设计、技术难点等问题，有着非常深刻的理解，因此，你对技术类风险会有更高的把控力。 但是，你还需要学习的是，从全局的视角出发，去推进项目整体目标的落地，优化各个角色的协同过程。作为项目经理，你要**利用一切可以利用的资源、尽自己最大的努力达成项目目标**，而计划是你可以借助的重要工具。 那么，计划到底是什么？计划是用来做什么的呢？ 实际上，计划是"市场需求或发起人的期望"和"团队生产力"之间平衡的结果。**从本质上来讲，计划是用来对焦的！做计划，是个集体对焦的过程**。如果我们省去对焦的步骤，就会给后续的执行工作埋下很多"地雷"。在执行过程中，这些"地雷"一旦被引爆，就会把我们的项目拖向失控的深渊。 扫雷游戏我们都知道，好的计划是成功的开始。但是，在做计划时，我们很容易遭遇一些雷区，下面我们就一起来玩一个"扫雷游戏"。 我有个程序员朋友小勤，她升任项目负责人之后，在工作中突然多了很多困惑，尤其是在做计划时，她遇到了很多问题。现在，我就带你来看看她在做计划时遇到的典型问题。 这些问题涉及五大常见雷区，希望通过这些讨论，你能对导致计划失败的这五大雷区有更深刻的理解，提早规避。 雷区 1：不够具体小勤的第一版计划是这样的： >  > 网课 2.0 升级项目计划于 9 月 18 日提测，10 月 1> 日正式上线。> > >你可能会说，这也太简单了吧？实际上，在程序员自己管理的项目中，这种"一句话式"的计划是很常见的。这份计划规定了提测和上线时间，也算是有了基本的约定。 但是，你还记得我们刚刚对计划的定义吗？计划是一种集体对焦的方式。**好的计划，不仅要给出时间节点，还要给出依据和来源，这样才能更有效地对焦。** 这里需要引入一个概念，叫作 **WBS 工作分解（Work BreakdownStructure），这是我们做计划的第一个标准动作**。 作为一个描述思路的规划和设计工具，WBS可以清晰地表示各项目工作之间的相互联系，帮助团队更高效地管理项目。 WBS是项目管理领域非常重要的方法。**创建 WBS的过程，也就是把项目工作按阶段可交付成果分解成较小的、更易于管理的组成部分的过程**。 简单来说，WBS就是"把大象放进冰箱"的过程，在做计划的时候，我们要把"大象"，也就是我们要做的这件事情真正拆解开，明确要分成多少块工作内容，涉及哪些角色和哪些环节的工作项，你需要将工作项拆解到3个工作日以内，每项任务都对应到个人。 在跟小勤沟通好 WBS之后，她很认真地做了改进，以下是她修改后的第二版计划： ![](Images/aa2c9acc0cf4b0370901074911eec62f.png)savepage-src="https://static001.geekbang.org/resource/image/fc/e4/fc48769b83279ac847eee1640bfaa7e4.png"}从这份计划中，我们可以看到，小勤对开发任务进行了详细地拆解，每个人的工作都很明确。你觉得这样很好了，对不对？ No！这恰恰是做计划时最容易忽视的一种"延期地雷"。这份计划，看似很详细，实际上仍然是个任务的集合，没有办法指引我们有效地达到目标。 **做计划的方式的转变，背后其实是思维方式的根本转变**。小勤在做程序员的时候，她的目标就是完成开发任务。但当她的职责扩大之后，她本能地将设定目标默认为完成一堆开发任务，她还没有意识到，作为项目负责人，自己还需要做些什么。 雷区 2：不够全面我刚刚说过，项目管理是运用当前一切可用的资源，去完成整个项目目标。这份计划的最大问题就是，**只有任务列表，没有识别关键资源和关键依赖，也没有考虑研发之外其他环节**。这样的计划，无法让我们明确实现目标的关键路径，也无法明确是否可以完成目标以及如何完成。 **识别依赖并画出关键路径，就是我要讲的做计划的第二个标准动作，这一步意味着我们开始从目标的角度对资源进行统筹思考**。 关键路径是决定项目工期的进度活动序列。它是项目中最长的路径，关键路径的工期决定了整个项目的工期。所以，任何关键路径上的延迟都将直接影响项目的预期完成时间。 明确了这一点之后，小勤又进一步调整了计划，我们来看看小勤做的第三版计划。 ![](Images/e1adbef0045a7cabc3ca238b62f7d668.png)savepage-src="https://static001.geekbang.org/resource/image/7c/f2/7c14929c016a6c3a7da15d8df0e1e2f2.png"}从图中可以看出，小勤已经把工作流中的先后依赖关系识别出来了，这样一来，关键路径也明确了，这份计划总算有个模样了。清晰了关键路径之后，我们要对其进行持续关注，把关键路径上的风险作为最高优先级应对。 除此之外，在核心部分计划出炉以后，我们还要对项目涉及到的其他合作环节，进行全面地规划和安排，为各个阶段设定合理的里程碑节点，确保考虑周全。 听完我的建议之后，小勤再一次改进了她的计划，把其他合作环节也明确地标注出来了，如图所示： ![](Images/2b2159254e6b13a10e957c9178f85466.png)savepage-src="https://static001.geekbang.org/resource/image/96/55/969a02fcc5ad8b23659978f8efb00c55.jpg"}明确了和其他合作环节的时间节点之后，我建议你使用**Visio**工具，把整个过程可视化出来，让计划更加直观。 ![](Images/ce7e509fcf1795e313f81fce1d058b1c.png)savepage-src="https://static001.geekbang.org/resource/image/ec/39/ec79d263252f1c47c4e7f8d305515839.png"}雷区 3：不够准确修改过几轮计划之后，小勤对于日常排期越发驾轻就熟。她再一次来找我时，情况已经好了很多。不过，她又碰到了一些新问题。 排在首位的是，当计划在执行中出问题的时候，总是会产生很多纠纷，大多是因为大家对一些节点的定义理解不一致，比如什么叫提测，什么叫里程碑完成。 有一次还发生了"乌龙事件"。在临近上线时，开发同学跟她说："拜托！我从来没说过XX 号完成交付，我说的是 XX号开发完，你去看看聊天记录！"这让她很是难堪。 对小勤来讲，这时迫切要做的，就是让节点的定义形成共同的标准。这就要引出**做计划的第三个标准动作了，就是定义完成标准**。 简单来讲，完成标准就是某时间点需要完成的事项列表，或者是应该达到的某项指标（特定水平的Bug 数量 /性能指标等）。进度计划中的任何重要时间节点，都应该有一组完成标准。**越早定义完成标准，计划按照期望完成的概率就越大**。 以最关键的几个常见时间节点为例，完成标准如下： 1.  **需求 / 设计确认**        ：执行所需的需求稿或设计稿已经完成，而且公开评审通过，团队已经准备好要编写产品代码了。值得一提的是，有些团队还会对需求稿或设计稿做一定的要求，比如把未处理的反馈意见数小于多少作为标准。        2.  **功能完成 / 提测**        ：所有定义的功能都已经完成（比如冒烟测试通过率高于    90%），团队已经准备好将焦点转移到质量保证上，并将所有剩余问题都当作    Bug 来跟踪。一些质量基础比较好的团队，也可以把 CI    自动回归用例集通过率、静态代码检查分数、单元测试覆盖率等，作为更加细节具体的完成标准。        3.  **里程碑完成**        ：质量已经达到适当水平（如不存在 P0 及 P1 优先级的    Bug），可以上线发布，或者可以开始下一个里程碑。        雷区 4：没有共识事先定义完成标准，就好比提前约法三章，会让计划有更准确的指向作用。当我继续深挖小勤的烦恼之后，我发现，她做计划还有个毛病，就是进度计划的文档只在她自己的电脑里，在执行计划的过程中，她只和几个开发口头说过，从来没有以任何公开的方式发布过，甚至都没有发邮件、公告等与全员同步信息，更别说开专门的规划会了。 她只是"做"了一份计划，而不是在"做计划"。这真是个惊人的发现。 其实，做计划本身并不是最难的，真正难的是什么？对焦！**没有达成共识的计划，是不具备任何效力的**。 事实上，PM在召开规划会之前，排期的内容已经准备得差不多了。在全员规划会上，除了对齐信息之外，更重要的是当面达成共识，这其实也是仪式感和承诺的象征，对计划后续的有效执行，是至关重要的。因此，**达成共识并公开透明，就是做计划的第四个标准动作**。 对于一些小项目，即便没有全员规划会，我也强烈建议你至少要在确认计划之后，向所有项目组成员，包括项目的所有干系人，发送计划邮件，正式周知，这可以尽早地发现共识的偏差。 雷区 5：不够即时计划就像冰箱里的酸奶，即时的，才是有效的。虽然定计划是个谨慎的过程，但我们也需要看到，计划绝不是固定不变的。 在整个项目周期中，由于随时会可能出现变更，加上对估算的不断细化，做计划永远是个反复修正、渐进明晰的过程，我们要对计划进行持续地跟进与调整**。重要的是，每一次进行调整，都要确保项目中的每个人知道当前的计划是什么，调整计划需要怎样的决策过程，都需要谁参与决策**。而**及时调整变更，就是做计划的第五个标准动作**。 你需要注意的是，与进度计划有关的任何变更，都需要提交给项目管理人员，最好由团队中对应功能小组的成员（该功能模块涉及的策划、设计、开发、测试）及其他相关干系方共同讨论，明确计划变动可能对各方造成的影响，最终做出决策，并公开告知所有项目组成员。 总结好了，做计划的五大雷区我都介绍完了，针对这些雷区，我给出了做计划的 5个标准动作，分别是 **WBS 工作分解**，**识别依赖及各环节关键路径**，**定义完成标准**，**达成共识并公开透明**，**即时调整变更**。最后，针对雷区的特征，我用一张图片来总结一下好计划应该具有的特点。希望你在做计划时，能够对照着下表进行梳理，以免埋下"延期地雷"。 ![](Images/107fe19d225404b1f92c9a015522aed1.png)savepage-src="https://static001.geekbang.org/resource/image/c3/9f/c3666af0b298fcad7fc7e819aca33f9f.jpg"}畅所欲言如果你是我在这一讲开头提到的那位创业团队的程序员，你被老板要求倒排时间，你会怎么办？请尝试运用今天所学的知识，梳理一下自己的行动方案。 欢迎你畅所欲言，我在留言区等你，也欢迎你把文章分享给你的朋友。 ![](Images/5a8595ceb941a30ac4b65104d2761f81.png)savepage-src="https://static001.geekbang.org/resource/image/2b/f2/2b83b5b04de8641dbbc3da87b52c44f2.jpg"}