location of the client, would also result in different certiﬁcates. This
can yield information on the state and practice of certiﬁcate deploy-
ment in CDNs. Furthermore, we had the hope that, as a side effect,
we might be able to determine whether certain locations actively
interfere with TLS/SSL trafﬁc by swapping end-host certiﬁcates
during connection establishment (Man-in-the-middle).
The third group of data sets was obtained by passively monitor-
ing live TLS/SSL trafﬁc. The important distinction between certiﬁ-
cates obtained from passive monitoring and those obtained by scans
is that these certiﬁcates reﬂect that part of the PKI infrastructure
that is not only deployed but also actually used due to user access to
sites. We extracted all observed certiﬁcates in TLS/SSL trafﬁc over
each two-week period. In September 2010, we were able to observe
in total more than 108 million TLS/SSL associations, resulting in
over 180,000 certiﬁcates, of which about 160,000 were distinct.
Our second run observed, during a similar time span of two weeks,
more than 140 million TLS/SSL connections, which were respon-
sible for about 990,000 certiﬁcates, of which about 100,000 were
distinct.
As the MWN is a research network that hosts several high-per-
formance computing clusters, we observed much Grid-related traf-
ﬁc secured by TLS/SSL. Although most TLS/SSL connections are
due to HTTPs, IMAPs and POPs (see Table 2 for details), we en-
countered a rather large number of Grid certiﬁcates, as Grid cer-
tiﬁcates were often replaced (their median validity period was just
11 hours). As Grid-related certiﬁcates are not comparable to those
used on the WWW, we ﬁltered them out in our analysis of certiﬁ-
cate properties. We explain this in Section 4.4.
Finally, we included a data set from related work into our analy-
sis. This data set was obtained using a different scanning strategy.
The EFF data set is based on scanning the entire assigned IPv4
address space, which took a few months. This results in a higher
number of observed certiﬁcates, but does not provide a mapping
onto DNS names. Hence, the data set cannot be veriﬁed in terms of
a matching subject for a host name, since information about which
domain was supposed to be served with a given certiﬁcate is not
contained. In contrast, our own data sets provide this information.
4.4 Data Pre-Processing
The International Grid Trust Federation [24] operates an X.509
PKI that is separate from the one for HTTPs and other TLS/SSL-
related protocols. Their Root Certiﬁcates are not included in the
Firefox Root Store, but are distributed in Grid setups.
Our setup stored certiﬁcates without a reference to the (poten-
tially many) TLS/SSL connections during which it was observed.
Although we cannot ﬁlter out Grid trafﬁc in our analysis of TLS/
SSL connections to hosts (Section 5.1), we were still able to iden-
tify some properties of Grid trafﬁc by correlating the encountered
IP addresses with those of known scientiﬁc centers.
For our analysis of certiﬁcate properties (Section 5.2), however,
it is possible to identify Grid-related certiﬁcates and ﬁlter them out.
Our ﬁlter mechanism is rather coarse: we simply check whether or
not a certiﬁcate contains the word ‘Grid’ in the issuer ﬁeld. We
acknowledge this is imperfect, but it is much less expensive to con-
duct than verifying if a certiﬁcate chains up to one of the Grid Root
CAs. We tested our certiﬁcate ﬁlter by checking the certiﬁcation
chains in the sub-data set of Grid certiﬁcates. Indeed, 99.95% of
them could not be found to chain to a CA in the Firefox Root Store,
and not one of them had a valid certiﬁcation chain (as is to be ex-
pected due to the use of a different PKI setup). At the same time,
the values for validity of certiﬁcation chains of non-Grid certiﬁcates
was in the same range as with our active scans.
Figure 4: TLS/SSL connection errors for Tue-Nov2009 and TUM-
Apr2011 scans, in relation to Alexa rank.
We thus conclude that our ﬁlter has removed most of the Grid
certiﬁcates and the remaining bias is tolerable.
5. RESULTS OF OUR INVESTIGATIONS
We now describe results from our analyses, going item-wise
through each question that we address. For each item, we explain
its relevance for the security of the TLS/SSL infrastructure.
An important distinction that we sometimes make is whether we
analyzed certiﬁcates of the full set or just the distinct certiﬁcates
in the data set. The difference is that the former refers to the de-
ployment as we have seen it and includes duplicate certiﬁcates, i.e.,
certiﬁcates that are used on more than one host. The latter is a pure
view at certiﬁcates as they have been issued.
5.1 Host Analyses
Before investigating actual certiﬁcates, we ﬁrst present some
properties of the TLS/SSL hosts that we either contacted through
active scanning, or whose connections we monitored passively.
Host Replies with TLS/SSL. A very central question is how
many hosts actually support TLS/SSL and allow TLS/SSL connec-
tions on ports that are assigned to these protocols. To determine
how many hosts offer TLS/SSL on the HTTPs port, we evaluated
replies to our OpenSSL scanner described in Section 4.1. Figure 4
shows results for the scans in November 2009 and April 2011.
It gives an overview on all queried hosts, the top 1,000, the top
10,000, and the top 100,000. As can be seen, the numbers do not
change signiﬁcantly over time, neither for the overall picture nor
for the top 1,000. Two thirds of all queried hosts offer TLS/SSL on
port 443, and more than 90% of the top 1,000 do so, too.
The number of cases where an unknown protocol was used on
the HTTPs port is surprising, however. We therefore re-scanned
all hosts that had previously shown this result and analyzed sam-
ples of the re-scan trafﬁc manually.
In all samples, the servers
in question offered plain HTTP on the TLS/SSL port. As can be
seen, this unconventional conﬁguration is less popular with highly
ranked servers.
Handshake failures during TLS/SSL setup can also result in fail-
ure of the association setup. However, the overall number of hand-
shake failures and the number of other (i.e., not grouped otherwise)
failures is rather low.
All in all, only about 800,000 hosts from the expanded Alexa
list allowed successful TLS/SSL handshakes on the HTTPs port.
Since a number of important sites (Google, Facebook, Twitter, ...)
431Property
Connection attempts
TLS/SSL server IPs
TLS/SSL client IPs
Different server ports
Server ports ≤ 1,024
HTTPs (port 443)
IMAPs and POPs (ports 993 and 995)
MON1
108,890,868
196,813
950,142
28,662
91.26%
84.92%
6.17%
MON2
140,615,428
351,562
1,397,930
30,866
95.43%
89.80%
5.50%
Table 2: TLS/SSL connections in recorded traces.
have switched to offer TLS/SSL by default, we ﬁnd it surprising
that there does not seem to be a marked change in the overall de-
ployment in the past 1.5 years either.
Our passive monitoring data shows quite a large number of
TLS/SSL-enabled servers. This is related to Grid trafﬁc, which we
did not ﬁlter out for this analysis. The numbers changed markedly
between the monitoring intervals in September 2010 and April
2011, although both runs were conducted over a period of two
weeks and both time intervals were during university semester
breaks. We found differences in the number of observed TLS/SSL
connections, and in the number of clients and servers that were
involved in this communication. These differences are summa-
rized in Table 2. The number of connections between the ﬁrst and
second monitoring runs increased from 108 million to 140 million
connections. Both the number of TLS/SSL servers and the number
of the observed TLS/SSL clients have increased. The increase in
observed TLS/SSL servers is also the main factor responsible for
the increase in the observed certiﬁcate numbers in Table 1. The
vast majority of observed TLS/SSL trafﬁc used well-known ports
(< 1, 024), especially HTTPs, IMAPs and POPs. We can show that
the remaining trafﬁc was Grid-related on several occasions as the
involved IP addresses are assigned to scientiﬁc computing centers.
Negotiated Ciphers and Key Lengths. The strength of the
cryptographic algorithms and the length of the involved symmet-
ric keys determine the cryptographic protection of the TLS/SSL
connection. From our monitoring data, we obtained statistics on
the ciphers and key lengths used to encrypt TLS/SSL connections.
Data from active scans was not involved: it has only limited valid-
ity here, as the negotiated ciphers highly depend on what a client
supports; hence, all results from active scans would be biased.
Figure 5 presents the most frequently negotiated ciphers, key
lengths and digests encountered in the monitoring runs. Generally,
strong ciphers (AES, Camellia, RC4) were selected with appro-
priate key lengths, sometimes offering a very good safety margin
(256 bit). 3DES is still used, but not in the majority of cases.
The use of MD5 for Message Authentication Codes, although not
problematic at this time, is not encouraged [2]. However, it is
still extensively used: the most popular cipher/digest combination
(RSA_WITH_RC4_128_MD5) in September 2010 employed MD5
hashes for digest calculation. Fortunately, we can see that the
popularity of this combination is decreasing: while it is still the
most popular combination in April 2011, we can see an increasing
share of SHA-based digest algorithms.
When comparing our results to those from 2007 in [13], we ﬁnd
that while the two most popular algorithms remain AES and RC4,
their order has shifted.
In 2007, AES-256, RC4-128 and 3DES
were the default algorithms chosen by servers, in that order. In our
data, we ﬁnd the order is RC4-128, AES-128 and AES-256. It is
difﬁcult to give a compelling reason here. It could be that more
clients support TLS/SSL now and their cipher support is different;
but it could also be that more servers support TLS/SSL now and
Figure 5: Top 10 chosen ciphers in passive monitoring data.
their default choice is the very fast RC4 at lower key length. If so,
this is a debatable choice: although RC4 is secure, great care must
be taken to avoid certain attack vectors [25].
Furthermore, we can see that some of the connections, albeit
a minority, chose no encryption for their user trafﬁc during the
handshake. Such NULL ciphers were observed for 3.5% of all con-
nections in MON1, and in about 1% of all connections in MON2.
Again, we can show that the corresponding IP addresses are as-
signed to computing centers, and the connections are likely Grid
trafﬁc. Our hypothesis is that TLS/SSL is only used for authenti-
cation purposes, whereas encryption is omitted due to performance
reasons.
5.2 Certiﬁcate Properties
We investigated several security properties of the X.509 PKI that
are related to properties of certiﬁcates and certiﬁcation chains. In
this analysis, we ﬁltered out Grid-related certiﬁcates in the data we
had obtained from passive monitoring.
Certiﬁcate Occurrences. Ideally, every host should have its
own certiﬁcate to allow TLS/SSL connections. Since the SNI ex-
tension does not enjoy real deployment, however, it is quite com-
mon that a certiﬁcate is issued for several domain names. This is
not the only reason: it may be less costly to buy a certiﬁcate from
a CA that includes several host names than to buy certiﬁcates for
each host name. It may also be less time-consuming for the oper-
ator. However, as the private key for every certiﬁcate must also be
stored with the public key, this can potentially increase the attack
surface if a certiﬁcate is used on more than one physical machine.
We thus checked how often the same certiﬁcate is reused on sev-
eral hosts. Figure 6 shows the complementary cumulative distri-
bution function (CCDF) of how often the same certiﬁcate was re-
turned for multiple different host names during the active scan of
September 2010, in the middle of our observation period. We can
see that the same certiﬁcate can be used by a large number of hosts
(10,000 or more), although the probability for this is signiﬁcantly
less than 1:10,000. However, the probability that a certiﬁcate is
reused rises quickly for a smaller number of reuses. It is not un-
common (about 1% of the cases) that 10 hosts share the same cer-
tiﬁcate.
We thus investigated which hosts are particularly prone to reuse
a certiﬁcate. Hosts are identiﬁed by the domain names in the certiﬁ-
cate’s subject ﬁeld. Figure 7 shows these for the certiﬁcates that we
found most often. Most of these are identiﬁable as Web hosters –
but only the certiﬁcates for *.wordpress.com were actually valid
432Figure 6: Certiﬁcate occurrences: CCDF for number of hosts per
distinct certiﬁcate.
Figure 8: Error codes in chain veriﬁcation for various data sets.
Multiple errors can cause the sums to add up to more than 100%.
We used OpenSSL’s verify command to check certiﬁcation
chains. Our check veriﬁed the full certiﬁcation chain. This step
does not check whether the subject in the certiﬁcate has a certain
value (e.g., the correct host name) – this has to be checked sepa-
rately. We examined which errors occurred how often in the vali-
dation of a certiﬁcation chain (N.B.: a single chain can report multi-
ple errors). Figure 8 presents our results for a selection of our data
sets. The error codes are derived from OpenSSL error codes. In
each case, a browser would display a warning to the user (usually
with the option to override the alert). Depending on the vendor,
additional user clicks are necessary to determine the exact cause.
Error code 10 indicates the end-host certiﬁcate was expired at the
time we obtained it. For the monitoring runs, we allowed a grace
period here until the end of the run, as we had not logged time-
stamps due to disk space limitations. Expired certiﬁcates can be
considered in two ways: either as completely untrustworthy, or just
as less trustworthy than certiﬁcates within their validity period. The
latter would account for human error, i.e., failure to obtain a new
certiﬁcate. Error code 18 identiﬁes an end-host certiﬁcate as self-
signed. This means no certiﬁcation chain at all is given, a user has
to trust the presented certiﬁcate and can only determine its valid-
ity out-of-band (e.g., by manually checking hash values) 1. Error
codes 19–21 indicate a broken certiﬁcation chain. Error code 19
means a correct full chain was received, but the Root Certiﬁcate is
not in the Root Store and thus untrusted. This error can occur, for
example, if a Web site chooses to use a Root Certiﬁcate that has
not been included in a major browser. As explained, certain orga-
nizations (like some universities) sometimes use Root CAs of their
own and expect their users to manually add these Root Certiﬁcates
to their browsers. If this is not done securely out-of-band, its value
is very debatable – we have anecdotal experience of university Web
sites asking their users to ‘ignore the following security warning’,
which would then lead them to the ‘secured’ page. Error code 20
is similar: there was a certiﬁcate in the sent chain for which no is-
suing certiﬁcate can be found, neither in the sent chain nor in the