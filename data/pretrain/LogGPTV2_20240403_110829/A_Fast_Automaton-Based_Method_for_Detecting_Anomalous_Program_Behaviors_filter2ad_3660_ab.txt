work either:  the relative  locations of functions across two 
different libraries can vary from one run to another. 
The second difficulty is that most programs make heavy 
use of library functions, which in turn make several system 
calls. For instance, consider a simple program: 
main() { 
int ch; 
while ((ch =  fgetc(stdin)) >=  0) 
fputc(ch, stdout); 
1 
It would be better to capture the behavior of this program 
as consisting of read and write system calls made from the 
main  program.  However,  if  we  used  the program counter 
value at the time of actual system call, no information about 
the structure of the main program will be captured. Instead, 
we would be capturing the structure of the library functions 
- in fact, since every  “system call” invocation is actually 
made from within  a library function  within  libc, the au- 
tomaton will capture no useful information about the struc- 
ture of the main program.  As a result, the automaton learnt 
will  remain  very  similar  across  different  programs,  since 
library  code  used  by  most  programs  are  identical.  In  or- 
der to capture the behavior  of the program,  it is necessary 
to record  the location  from where the library function was 
called, rather than recording  the location within the library 
code from where a system call was made.  We describe our 
approach for doing this below, after a brief discussion of the 
system call interception mechanisms we use. 
2. Learning Finite-State Automata 
2.1. System Call Tracing 
Our learning  algorithm  is  based  on  tracing  the  system 
calls made  by  a process  under  normal execution.  As each 
system call is made, we obtain the system call name as well 
as the program point from which the system call was made 
(given by the value of the program counter (PC) at the point 
of system call).  Each distinct value of the program counter 
corresponds to a different state of the FSA. The system calls 
correspond to transitions in the FSA. To construct the transi- 
tions, we use both the current pair of sqi2?“, and the previ- 
ous pair,  P r e v S   sCall . The invocation of the current system 
call SysCall  results in the addition of a transition from the 
state Pre.uPC to PC that is labelled  with  PrevSysCu11. 
The construction process continues through many different 
runs  of  the program,  with  each  run  possibly  adding more 
states and/or transitions. Figure  3 illustrates this process. 
Pre:pC 
The simple algorithm outlined above can deal with stati- 
cally linked programs, but does not always work for dynam- 
ically linked programs.  The key difficulty is that the value 
of program counter cannot be relied upon, as the same func- 
tions may get loaded at different locations in a dynamically 
linked program.  One may  try to use relative values of pro- 
gram counters instead of absolute values, but this does not 
Several  approaches have been  proposed  for system call 
tracing  over  the  past  several  years.  Some  of  these  tech- 
niques involve modifications to the operating system kernel, 
as in  [7, 6, 191.  The primary benefit of  a kernel-based ap- 
proach  is speed, while its disadvantage is the need  to mod- 
ify the kernel.  Other approaches such as [ 131 make use of 
the process tracing capability provided by most versions of 
UNIX in  order to perform  system  call  interception  at  the 
user level. We used the second approach in this work. 
Most versions of UNIX provide a mechanism  by  which 
one process can trace the system calls made by another pro- 
cess.  Programs such as  strace, truss and par utilize 
the low level OS mechanisms and provide a command line 
interface for recording system calls. Previous research, such 
as [ 5 ] ,  utilized such programs to record system calls in a log 
file, and then used an offline learning algorithm. In our ap- 
proach, we directly make use  of the OS mechanisms.  The 
key  benefits  are  that  we  are  able  to  use  additional  infor- 
mation  (e.g., the contents of the registers  and the  stack of 
the traced process)  that is available at the level of the OS- 
provided mechanisms, but not made available by the above- 
mentioned applications. 
147 
s c l  sc3 sc3 
p c l  pc2 p c 3  
sc4 sc3 sc4 s c 3  
pC1 FC3FC1 pC3 
Figure 3. Two traces produced by a program and the generated automaton 
2.2. Keeping Track of Different Sections of Code 
The general problem is to trace back each system call to 
the innermost function call that was made from certain  re- 
gions of  memory.  Note that most libraries are linked and 
loaded dynamically, and  that  the  non-library  components 
are  statically  linked.  We  therefore  trace  back  all  system 
calls to statically linked code sections. 
The first step in tracing back is to identify code sections 
that are statically linked. Our approach for doing this relies 
on (a) the structure of the ELF (Executable and Linking For- 
mat) format  used  in Linux and most other UNIX systems, 
and  (b) tracing  system calls used  to load the dynamically 
linked libraries.  The range  of  addresses  of  the  statically 
linked  code segment  is obtained from the header  informa- 
tion  in  the  executable  file.  For  the  addresses of  dynami- 
cally linked regions, we note that in Linux, the dynamically 
linked code is loaded using the mniup  system calls.  From 
the return  value  of this system call, and the size argument 
provided  to this system call,  we  can  obtain the  addresses 
corresponding to the dynamically linked libraries. 
2.3. Stack Traversal 
Procedure calls are implemented using a process  stack. 
The stack  is partitioned into many  activationfrumes, each 
of which  correspond to an invocation  of  a procedure.  The 
innermost active  procedure  invocation  corresponds  to the 
top-most frame on the stack. An activation record stores in- 
formation such as the return address, procedure parameters 
and  local  variables  of  the procedure.  Both  the caller  and 
the called procedures need  to access  the return  address and 
parameters.  Hence  the  structure of  the  activation  records 
as well  as the location  of these fields  within the activation 
record’are standardized, even across different programming 
languages. 
Based  on  the above  structure of  the  stack, tracing  back 
of the system call can proceed  as follows. We examine the 
value of the program counter (which is saved by the proces- 
sor when  the trap  instruction to switch to the kernel  mode 
was executed)  and see if it is from the statically  linked por- 
tion of  the executable.  If  so, we  are done.  Otherwise, we 
examine the topmost frame on the stack, and extract the re- 
turn  address information.  If  this address corresponds to a 
statically  linked region  of the program, we are done.  Oth- 
erwise, we move to the next stack frame (corresponding to 
the  next  outer  procedure  invocation)  and  repeat  the  same 
process. 
We observe that this approach will not work satisfacto- 
rily if the statically  linked portion of the code itself contains 
library  functions, or  wrapper functions that have  been  in- 
troduced  for portability.  In those cases,  the FSA will learn 
the location within the library  from where a system call  is 
made. 
2.4. Dealing with f ork/exec 
The f o r k  and exec system calls require special atten- 
tion, since they create copies of a running process or change 
it altogether.  A corresponding change has to be made to the 
FSA being learnt for the program. 
The fork system call causes the process to create a copy 
of itself.  We use the same FSA to capture the behavior of 
the child as well  as the parent.  Unless the fork system call 
is followed by e x e c v e ,  the child process usually performs 
the same tasks as that of the parent (e.g., servicing more re- 
quests in  a  http server) and  so  this can  be justified.  After 
the  fork, subsequent system calls made by  either the par- 
ent or the child is added as a transitions to the same FSA. 
This requires us to keep track  of  all the current states cor- 
responding to the parent  and  all  of  the children processes. 
When one of these processes  makes a system call, an edge 
is added from the current state of this process.  At intrusion 
detection time, we follow a similar procedure. 
When an  execve system call is made, we need  to de- 
cide  whether  the  system calls  of  the  new  program  (to be 
executed) are to be learnt using the same FSA, or to use  a 
different FSA. In the former case, an FSA that is customized 
for this particular execution of the new program is created. 
This would enable us to capture, for instance, that when  a 
program A  executes another program B, it uses  B’s func- 
tionality  in a restricted  way.  For  instance, a program may 
spawn  a shell, which  may  in turn be used  to execute a spe- 
cific script; but the full functionality of shell is not accessed. 
In the latter case,  we retrieve  the FSA that  has been  learnt 
so far for the program e x e c v e ’ d ,  and start augmenting this 
FSA to incorporate the sequence of system calls observed in 
the current execution. Currently, we use this second option 
as the default. 
148 
1000 
0 
'
'
.
1000 
'
System calls 
I
.
10000 
'
~ 
. . . . . . . . . , 
. . .  . . . . . . . method.. 
le+06 
'
'
'
: . . .  . . N-gram 
IO0000 
System calls 
r
.
'
FSAmethod  - 
. -----"---- 
. . . . . . .. . . . . . . 
' 
' 
Figure 4. Convergence on NFS Server. 
Figure 5. Convergence on FTP Server 
3. Runtime Monitoring for Intrusion Detection 
Matching runtime behavior to the automaton proceeds as 
follows. At any point during runtime, the state of the match 
would be captured by  a current stute of the FSA. For each 
system call intercepted, we proceed as follows: 
Obtain  the  corresponding  location  (within  the  stati- 
cally  linked  section  of  the  program) from  where  the 
call was made.  If  an error occurs while doing this, it 
would be because the stack has been corrupted, possi- 
bly due to a buffer-overflow attack. 
Check if there exists a transition from the current state 
to the new  state that  is labelled  with  the  system call 
name  that  was  intercepted.  If  not,  there  is  again  an 
anomaly.  Anomalies of this kind may  arise either due 
to attacks, or because of  unusual behavior of the pro- 
gram that had not been observed during learning. 
Update the state of the automaton to correspond to the 
new  state.  If  the  new  state is not  in  the  automaton, 
transition to a "sink" state in the FSA' . 
To ensure that  isolated mismatches do not  immediately 
result  in  an  intrusion being  flagged,  a  leaky  bucket  algo- 
rithm is typically used (as in [5, 91) to aggregate anomalies 
over time.  Each  time an anomaly  is detected, an anomaly 
count is incremented.  When  the anomaly  count exceeds  a 
threshold,  an  intrusion  is  flagged.  The  anomaly  count  is 
decremented periodically, which has the effect  of ignoring 
isolated anomalies. 
' Note that the FSA is not "stuck'  in the sink state: as soon as the pro- 
gram execution returns  to a location  that had been observed during Ieam- 
ing. the automaton would transition  to that state from the sink state. Thus, 
the use of program counter information  enables the automaton to "resyn- 
chronize"  with  the program even if  synchrony is lost momentarily  due to 
execution of new code. 
Several different  kinds of  anomalies  are recognized  by 
the  method  described  above.  Our method  associates  dif- 
ferent  weights  with  different  kinds  of  anomalies.  Instead 
of  incrementing the  anomaly count  by  one, we  increment 
it by the weight associated with the anomaly observed. The 
weight associated with stack corruption anomaly is set to be 
high  enough that even  a single occurrence of  the anomaly 
will be flagged as an intrusion. The weight associated with 
a missing program state is smaller, such that several succes- 
sive occurrences of these anomalies must  occur before  the 
threshold  for flagging an  intrusion  is reached.  The weight 
associated  with a missing  transition is higher if the system 
call  corresponding to the transition appears nowhere in the 
FSA. Otherwise,  the anomaly weight  is set to be the same 
as that of a missing state. 
4. Experimental Evaluation 
To  evaluate  the  FSA-based  algorithm,  we  considered 
security-critical server  programs such  as f f p d ,  htrpd,  ilfsd 
and  telnetd. Telnetd was later eliminated since its be- 
havior  was  extremely  simple  and predictable.  Among the 
other three, ftpd appeared to have the most complex behav- 
ior, supporting 70 different operations. nfsd was moderately 
complex,  supporting  17 operations.  httpd  supports only  a 
small number of commands, but is comparable in complex- 
ity to NFS  server.  Our evaluation  addresses the  following 
metrics and compares them with those of the N-gram algo- 
rithm: convergence  of  learning, false positive rate, runtime 
and space overhead, and attack detection efficacy. 
All  the results  presented  in  this  section  were  obtained 
for Linux running on a 266MHz Pentium 11 processor with 
32MB  RAM  and  3GB  EIDE  disk.  For  comparison pur- 
poses,  we  implemented  the  N-gram  algorithm  from  [5]. 
This implementation uses a trie data structure, which is the 
most  compact data structure for representing  large collec- 
149 
tions of fixed-length strings. 
We  used  the  following procedure for conducting  these 
experiments. Most of our experiments were conducted us- 
ing  training  scripts  that  attempt  to  simulate  the  requests 
likely to be handled  by each of these servers.  Some exper- 
iments involving the  http server  were  conducted on  a  live 
web  server  handling  requests.  While  it  would  have  been 
better to run all of the tests on live servers, such an approach 
was  impractical  for us  because  we  did  not  have  access  to 
systems that experienced large enough volumes of traffic to 
enable us to conduct such experiments. We present  our re- 
sults on live servers in Section 4.4, while the following three 
sections discuss results obtained using training scripts. 
4.1. Convergence 
We measured convergence in terms of the space required 
for storing the  automaton  (for  the  FSA-algorithm)  or  the 
N-grams (for the N-gram algorithm).  These figures  were 
plotted against the number of system calls made by the pro- 
gram being learnt. The graphs use a linear scale on the Y- 