### Example 3.1: Data Sharing Agreement (DSA) between the Police and Local Government

Consider a DSA between the Police and a Local Government that specifies restricted access to personal data of victims in an incident. Access is limited to responders assigned to the same incident, and only while they are located in a designated danger area classified as level 1. Figure 2 illustrates this DSA translated into an enforceable policy for the Police administrative domain.

The first two statements in the example policy define persistent and volatile attributes along with their data types. Authority P is declared by specifying the identifier of the service issuing credentials on its behalf. The credential types used in the policy are declared by their names and the attributes they can contain. Credentials are then defined as instances of these types issued by a trusted authority. User roles are declared based on the credentials users possess. Finally, a usage control policy specifies that a "responder" role can read data categorized as "personal." The monitored condition \( c_m \) is expressed in the `while` clause, and other access conditions are specified in the `when` clause.

---

### 4. Architecture

One of the primary threats to disseminated data is the possibility of an attacker bypassing a genuine Policy Enforcement Point (PEP) to directly access the data. To mitigate this, sensitive data must always be encrypted when stored or transmitted. Only a genuine PEP should be able to obtain the correct decryption keys from a trusted Policy Decision Point (PDP). We categorize Digital Rights Management (DRM)/Enterprise Rights Management (ERM) architectures based on whether users need to interact with other entities to receive decryption keys before or after receiving protected data. We will discuss and compare these two approaches, identifying their advantages and limitations, and present a unified architecture combining the benefits of both.

#### 4.1 Interactive Data Sharing Architecture (IDSA)

In the IDSA, recipients interact with their organization's server to obtain access after receiving the protected data. If the data provider needs to evaluate access requests from recipients in other organizations, additional infrastructure is required to map the recipients' credentials to those understood by the provider. A DSA between the data provider and consumer establishes trust, allowing the consumer organization to evaluate access requests without needing credential mapping. This approach translates the DSA into policies enforceable by the DSA partners.

IDSA extends traditional DRM/ERM models to support cross-domain operations but does not cater to intermittent connectivity. To evaluate usage policies, a policy engine must identify the data for which access is requested. Since the PEP cannot yet decrypt the protected content, metadata must be packaged with the document and protected against unauthorized modifications. For example, metadata for personal data sharing during a crisis might be represented as \([(\text{incidentId}, "123"), (\text{dataCategory}, "personal")]\).

Let \( k \) denote a symmetric encryption key, and \(\{D\}_k\) the data \( D \) encrypted with \( k \). Let \( \text{PK}_e \) and \( \text{PK}^{-1}_e \) denote the public and private keys of entity \( e \), and \( \text{Cert}_e \) the public key certificate of \( e \). Suppose user Bob, working for organization B, requests dissemination of a data item under a DSA \( \text{DSA}_{AB} \) between organizations A and B. The data is described by metadata \( M \). A secure protocol for sharing \( D \) with Charles, also in organization B, is as follows:

1. **Bob requests to protect data for recipients in organization B:**
   - Bob → ServerA: \(\{\text{k, DSA}_{AB}, M\}_{\text{PK}_A}\), CredentialsBob
   - ServerA → Bob: \(\{\text{k, DSA}_{AB}, M\}_{\text{PK}_B}\)
   - Bob → Charles: \(\{D\}_k\), \(\{\text{k, DSA}_{AB}, M\}_{\text{PK}_B}\)

2. **Charles requests access to the protected data:**
   - Charles → ServerB: \(\{\text{k, DSA}_{AB}, M\}_{\text{PK}_B}\), CredentialsCharles, CertCharlesPEP
   - ServerB → Charles: \(\{\text{k, p, M}\}_{\text{PK}_{\text{CharlesPEP}}}\)

All messages are signed by their senders. The content key is encrypted for CharlesPEP, ensuring it is not directly accessible to the end-user. The PEP uses the content key to allow access according to the usage control policy \( p \).

IDSA extends ERM systems like Microsoft Rights Management Services for cross-domain operation, allowing more expressive policies. Key differences include the use of metadata for policy evaluation, the presence of a DSA, and distributed policy evaluation authorities based on inter-organizational trust.

#### 4.2 Non-Interactive Data Sharing Architecture (NIDSA)

In NIDSA, users obtain decryption keys before receiving protected data, eliminating the need for interaction with any entity after receiving the data. The same key allows access to any document for which they have permissions.

To encrypt data for users in another organization, a public key \( k_g \) must be used such that members of group \( g \) already have the corresponding private key \( k^{-1}_g \). Users should obtain the group's private keys before receiving data. Each user \( u \) has a public-private key pair \( \text{PK}_u, \text{PK}^{-1}_u \). All users must know the public keys of all groups to encrypt data for others.

Let \( K^{-1}_g(\text{Bob}) \) and \( K^{-1}_g(\text{Charles}) \) be the sets of private group keys that Bob and Charles possess. A secure protocol for sharing data \( D \) using NIDSA is as follows:

1. Bob → ServerA: CredentialsBob
2. ServerA → Bob: \(\{K^{-1}_g(\text{Bob}), p\}_{\text{PK}_{\text{BobPEP}}}\)
3. Charles → ServerB: CredentialCharles
4. ServerB → Charles: \(\{K^{-1}_g(\text{Charles}), p\}_{\text{PK}_{\text{CharlesPEP}}}\)
5. Bob → Charles: \(\{D\}_k\), \(\{k, p\}_{k_g}\), \(\{\text{iddsa, M}\}_{\text{Signed}}\)

Charles is authorized to access data if \( k_g \in K^{-1}_g(\text{Charles}) \). Charles does not need to contact a server to access data, but the usage control policy \( p \) still needs local enforcement. For example, responders may view data only for incidents they are assigned to.

NIDSA can be built using Ciphertext-Policy Attribute-Based Encryption (CP-ABE) [6], where possession of an attribute is comparable to having a group private key. However, existing CP-ABE schemes are computationally intensive for mobile devices. NIDSA can also use symmetric key encryption schemes like Adaptive Hierarchical Encryption (AHE) [4] by considering \( k_g = k^{-1}_g \) and each access level in AHE as a group in NIDSA.

NIDSA does not support access revocation, unlike IDSA, which can perform revocation checks at the organization's servers. In NIDSA, revocation can be realized by forcing key renewal at regular intervals and not providing new decryption keys to revoked users. However, during the validity period of a set of keys, a user can still decrypt new documents. This trade-off is necessary for offline access.

#### 4.3 Unified Cross-Domain Data Sharing Architecture (UDSA)

To benefit from the diverse characteristics of IDSA and NIDSA, we build UDSA by decentralizing IDSA and incorporating features of NIDSA. In UDSA, users are assigned to different groups, each with a public and private key. We assume each responder has a wireless device capable of short-range communication (e.g., a PDA or smartphone) and that persistent user credentials and public keys of all DSA organizations are stored on the user’s device.

Unlike NIDSA, key pairs for groups are generated per-incident in UDSA. An incident response vehicle acts as the initial source for creating and distributing keys. The key distribution source generates a public-private key pair for each group used in the organization’s DSAs. Responders exchange data, keys, and certificates when within communication range, allowing them to cope with intermittent network connectivity.

The ad hoc distribution of rights in the form of private keys is controlled by policies inspired by the Policy-based Authority Evaluation Scheme (PAES) [22]. Private keys are securely stored by the PEP and not directly accessible to end-users. The PEP uses a group’s private key on behalf of a responder if:
1. The responder is a member of that group.
2. The responder is trusted to evaluate membership of other users to that group, according to a PAES policy hierarchy.

PAES allows the definition of a hierarchy of authorities, each trusted to evaluate and distribute rights. For crisis management, responders can act as authorities. The implementation of PAES for crisis management [23] can be adapted for normal operation by including the organizational control center as an authority. A deployment of UDSA in a crisis area is illustrated in Figure 4.

---

### 5. UDSA Components

The goal of a unified architecture is to provide secure access to data in diverse scenarios. In UDSA, the PEP comprises the application and a Data Protection Object API (DPOAPI). The DPOAPI provides common functionalities, including cryptographic functions and interactions with the PDP. The application intercepts access requests and shares the responsibility of enforcing access decisions with the DPOAPI.

Usage control over disseminated data requires distributed policy evaluation and enforcement components. First, a user must contact a control center to obtain a use-license. In UDSA, a control center can be the user’s organization server or a trusted peer according to the PAES policy hierarchy. If the user obtains the use-license using ad hoc mode, the license contains a group key. If the user obtains the use-license for a specific protected data item, the license contains the content key. Additionally, a use-license contains policies to be evaluated locally and an expiration date. After obtaining a use-license, the usage control policies must be evaluated to check the user’s authorization for each access session and monitor the access if required. Use-licenses are protected for the PEP on the user machine.

#### 5.1 Obtaining a Use-License

The difference between evaluating a use-license request in IDSA and NIDSA is that for the latter, the process depends only on user attributes, while for the former, it also depends on the metadata of the protected data. Recognizing this difference, policy and enforcement components can be designed to switch seamlessly to ad hoc mode when network connectivity is not available. Existing policy engines can be modified to operate in ad hoc mode by distinguishing between conditions that depend on metadata and those that do not.

Figure 5 shows the interactions for obtaining a use-license. Before requesting a use-license, the PEP collects the necessary user credentials. Collecting all possible credentials can be time-consuming, so the PDP in UDSA can be queried for the required credentials. The PDP returns a list of credential requirements, i.e., pairs (credential type, issuer). For example, for the policy in Figure 2, the credential requirements are \([(\text{Authentication, "police"}), (\text{Location, "police"}), (\text{MissionAssignment, "police"})]\). The PEP then asks the Policy Information Point (PIP) to obtain the required credentials. The PIP is configured with transport-level knowledge (e.g., URLs of credential services).