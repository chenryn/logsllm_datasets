Example 3.1 Let us consider a DSA between the Police and a Local Government
that speciﬁes that access to personal data of victims in an incident should be re-
stricted to responders assigned to that same incident. Moreover, access must be
allowed only while the responder is located in a danger area designated as level1.
Figure 2 gives an example of the DSA translated into an enforceable policy for the
Police administrative domain.
The ﬁrst two statements of the example policy declare the persistent and volatile
attributes and specify their data types. Authority P is declared by specifying the
identiﬁer of the service that issues credentials on its behalf. The credential types
used in the policy are declared by specifying their names and the lists of attributes
they can contain. Credentials are then deﬁned as instances of credential types is-
sued by a trusted authority. User roles are declared by specifying a condition over
the credentials users may possess. Finally, a usage control policy speciﬁes that a
subject with role ”responder” can read a data item of category ”personal”. The
monitored condition cm is expressed in the while clause of the policy, and other
access conditions are speciﬁed in the when clause.
2
6
Figure 2: Example of an Enforceable Policy
4 Architecture
One of the main threats for disseminated data is the possibility for an attacker
to bypass a genuine policy enforcement point (PEP) and access the data directly.
To mitigate such threat, the sensitive data must always be kept encrypted when
stored or transmitted. Only a genuine PEP should be able to obtain correct decryp-
tion keys when permitted by a trusted policy decision point (PDP). We categorize
DRM/ERM architectures based on whether users must interact with other entities
to receive decryption keys after or before receiving protected data. We ﬁrst discuss
and compare these two approaches, and identify their advantages and limitations.
We then present a uniﬁed architecture combining the beneﬁts of both approaches.
Interactive Data Sharing Architecture (IDSA)
4.1
In the IDSA architecture recipients interacts with their organization’s server to ob-
tain access after receiving the protected data. If the data provider wants to evalu-
ate access requests of recipients in other organizations, then additional infrastruc-
ture is needed to map the recipients’ credentials to the credentials it understands.
We observe that a DSA between the data provider and data consumer establishes
trust which allows the data consumer organization to evaluate access requests of
its users. Thus, mapping of credentials is not needed and architectures presented
in this paper take the approach of translating the DSA into policies enforceable by
the DSA partners.
IDSA is an extension of traditional DRM/ERM model and is described ﬁrst to
illustrate how cross-domain operation can be achieved. It does not however cater
for the need to access protected data when connectivity is intermittent.
To evaluate the usage policies, a policy engine needs to identify the data for
7
which access has been requested. Content-based rules cannot be applied because
the PEP is not yet able to decrypt the protected content. To overcome this problem,
it is necessary to package metadata with the protected document. Also, the meta-
data must be protected against unauthorized modiﬁcations. We here assume the
metadata is speciﬁed as a list of attribute and value pairs. For example, metadata
for personal data sharing during a crisis incident may be represented as [(inciden-
tId,”123”),(dataCategory,”personal”)].
Let k denote a symmetric encryption key and {D}k the data D encrypted with
k. We also refer to k as the content key. PKe and PK−1
denote the public and
private keys of an entity e. Certe denotes the public key certiﬁcate of e. Let the
user Bob working for organization B request dissemination of a data item under a
DSA DSAAB between organizations A and B. The data is described by the metadata
M. A protocol (see Figure 3(a)) for securely sharing D with a user Charles who
works for organization B can then be described as follows:
e
Bob requests to protect data for recipients in organization B:
1. Bob → ServerA : {k,DSAAB,M}PKA,CredentialsBob
2. ServerA → Bob : {k,DSAAB,M}PKB
3. Bob → Charles : {D}k,{k,DSAAB,M}PKB
Charles requests access to the protected data:
1. Charles → ServerB : {k,DSAAB,M}PKB,CredentialsCharles,CertCharlesPEP
2. ServerB → Charles : {k, p,M}PKCharlesPEP
We assume that all messages are signed by their senders. The content key is
encrypted for CharlesPEP (PEP of the device used by Charles). Thus, the content
key is not directly accessible to the end-user. The PEP uses the content key to allow
access to the user when authorized according to the usage control policy p.
IDSA is an extension of ERM systems such as the Microsoft Rights Manage-
ment Services [15] for cross-domain operation. Moreover, IDSA allows speciﬁca-
tion of more expressive policies. The key differences in the extension include the
use of metadata for policy-evaluation, the presence of a DSA, and the distribution
of policy evaluation authorities based on trust between the organizations.
4.2 Non-Interactive Data Sharing Architecture (NIDSA)
In the NIDSA architecture users obtain decryption keys before receiving protected
data. Thus, users are not required to interact with any entity after receiving data.
Also, the same key allows the users to access any document for which they have
permissions.
8
(a)
(b)
Figure 3: Deployment of (a) Interactive and (b) Non-Interactive Secure Cross-
Domain Data Sharing Architectures.
To encrypt data for users in another organization, it must be possible to use a
public key kg such that members of a group g will already have the corresponding
private key k−1
g . It is desirable that users obtain the group’s private keys they are
authorized to possess before data is received. In addition, each user u has its own
public-private key pair PKu,PK−1
u . In this architecture, all users must know the
public keys of all groups in order to encrypt data for other users.
g(Charles) be the set of private group keys that Bob and Charles
possess. A protocol for securely sharing data D using NIDSA is shown in Fig-
ure 3(b). It may be noted that in NIDSA the recipient obtains access keys in step
2 before dissemination step while in IDSA the recipient obtains the access keys in
step 5 after dissemination. The protocol can be described as follows:
Let K−1
g(Bob) and K−1
1. Bob → ServerA : CredentialsBob
2. ServerA → Bob : {K−1
Charles → ServerB : CredentialCharles
g(Bob), p}PKBobPEP
ServerB → Charles : {K−1
g(Charles), p}PKCharlesPEP
3. Bob → Charles : {D}k,{k, p}kg,{iddsa,M}Signed
Charles is authorized to access data if kg ∈ K−1
g(Charles). Moreover, Charles does
not need to contact a server to access data. The usage control policy p still needs
to be enforced locally. For example, it is often desirable to restrict access using
additional context, e.g., responders may view the data of only those incidents they
are assigned to.
9
It is possible to build a NIDSA scheme based on Cipher-text Attribute Based
Encryption (CPABE) [6]. Possession of an attribute in ABE is comparable to hav-
ing a group private key in NIDSA. However, existing ABE schemes are not an ideal
solution for crisis management because they are computationally very intensive for
mobile devices that responders need to use.
such as AHE [4] by considering kg = k−1
g , and each access-level in AHE as a group
in NIDSA. To protect data using AHE, the data provider must encrypt data using a
key that the authorized recipients can derive. An implementation of NIDSA archi-
tecture using AHE will require generation of an access hierarchy which includes
members of multiple administrative domains.
The NIDSA architecture can also be used with symmetric key encryption schemes
Note that the NIDSA architecture does not cater for access revocation, while in
an IDSA revocation checks can be done at the organization’s servers as the recipi-
ents must request permissions for each protected item. In the NIDSA architecture,
revocation can be realized only by forcing a key renewal at regular intervals and
by not providing the fresh set of decryption keys to the revoked users. However,
during the interval of validity of a set of keys the user may still decrypt any new
document she receives. This is a trade-off that needs to be made to gain the abil-
ity of accessing data in ofﬂine mode. While NIDSA caters for crisis management
requirements, it is still desirable to use IDSA during normal operation. Therefore,
an architecture providing a comprehensive secure data sharing solution must unify
NIDSA and IDSA.
4.3 Uniﬁed cross-domain Data Sharing Architecture (UDSA)
To beneﬁt from the diverse characteristics of IDSA and NIDSA, we build UDSA by
decentralizing IDSA and using some features of NIDSA. Similar to NIDSA, users
in UDSA are assigned to different groups and each group has a public-key and
a private-key. We here assume that each responder has a wireless device capable
of short-range wireless communication (e.g., a PDA or a smart phone). We also
assume that the persistent user credentials and the public keys of all organizations
that are part of DSAs are already stored on the user’s device.
Unlike NIDSA, the key pairs for groups are generated on a per-incident basis
in UDSA. We assume one of the incident response vehicles acts as an initial source
for creating and distributing keys to be used for that speciﬁc incident. The key
distribution source generates a public-private key pair for each group used in the
organization’s DSAs. The responders exchange data, keys, and certiﬁcates when
they come into communication range of each other. This communication together
with their mobility in the incident area, allows the responders to cope with inter-
mittent network connectivity.
10
The ad hoc distribution of rights in form of private-keys of groups is con-
trolled by policies, inspired by the Policy-based Authority Evaluation Scheme
(PAES) [22]. The private keys are always stored by the PEP securely and are
not directly accessible to end-users (discussed further in Section 7). The PEP uses
a group’s private key on behalf of a responder only if 1) she is a member of that
group, or 2) she is trusted to evaluate membership of other users to that group,
according to a PAES policy-hierarchy.
PAES allows deﬁnition of a hierarchy of authorities, where each authority is
trusted to evaluate and distribute rights. PAES can be implemented for crisis man-
agement by allowing responders to act as authorities. The implementation of PAES
for crisis management [23] can be adapted to work during normal operation by in-
cluding the organizational control center as an authority. A deployment of UDSA
in a crisis area is illustrated in Figure 4.
Figure 4: A Deployment of Uniﬁed Cross-Domain Data Sharing Architecture
5 UDSA Components
The goal of having a uniﬁed architecture is to provide secure access to data in di-
verse scenarios. In our architecture, the PEP comprises the application and a Data
Protection Object API (DPOAPI). The DPOAPI provides a common set of func-
tionalities including cryptographic functions and interactions with the PDP. The
application is responsible for intercepting access requests and shares the responsi-
bility to enforce access decisions with the DPOAPI.
Usage control over disseminated data requires distributed policy evaluation and
enforcement components. First, a user must contact a control center to obtain a use-
11
license. In UDSA, a control center can be the user’s organization server or a trusted
peer according to the PAES policy hierarchy. If the user obtains the use-license
using adhoc mode, the license contains a group key. However, if the user obtains
the use-license for a speciﬁc protected data item then the use-license contains the
content key. In addition, a use-license contains policies to be evaluated locally and
an expiration date after which a new use-license must be obtained. After a user
obtains a use-license, the usage control policies in it must be evaluated to check
the user’s authorization for each access session and monitor the access if required.
Note that the use-licenses are protected for the PEP on the user machine. We now
discuss these two steps in further detail.
5.1 Obtaining A Use-License
The difference between evaluating a use-license request in the IDSA and NIDSA
is that for the latter the process depends only on the user-attributes while in the for-
mer it also depends on the metadata of the protected data. Having recognized this
difference it is possible to design policy and enforcement components such that
they can seamlessly and automatically switch to ad hoc mode when network con-
nectivity is not available. Existing policy engines can be easily modiﬁed to operate
in ad hoc mode by distinguishing between conditions that depend on metadata and
conditions that do not.
Figure 5 shows the interactions for obtaining a use-license. The optional pa-
rameters are marked with (*) in the ﬁgure. Before requesting a use-license, the
PEP needs to collect the user credentials necessary for the evaluation. Collection
of all possible credentials can be time consuming. Thus, the PDP in USDA can be
queried for the credentials needed to evaluate a user’s request. The PDP returns a
list of credential requirements, i.e. of pairs (credential type, issuer). A credential
issuer is the authority trusted to specify values for a speciﬁc credential type. For
example, for the policy shown in Figure 2 the credential requirements are [(Au-
thentication, ”police”), (Location, ”police”), (MissionAssignment, ”police”)]. The
PEP then asks the Policy Information Point (PIP) to obtain the required credentials.
The PIP is conﬁgured with transport-level knowledge (e.g. URLs of credential ser-