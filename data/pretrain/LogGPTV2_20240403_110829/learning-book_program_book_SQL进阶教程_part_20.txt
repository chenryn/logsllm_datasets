此时做法有两种。我们先看一个简单的，只用uNION就能实现的方法。
这里先假设已经事先确认了表tbl_A和表tbl_B的行数是一样的（如果行
数不一样，那就不需要比较其他的了）。
这两张表的行数都是3.如果下面这条SQL语句的执行结果是3，则
说明两张表是相等的。相反，如果结果大于3，则说明两张表不相等。
■如果这个查询的结果与tbLA及tbLB的行数一致，则两张表是相等的
SEL&CT couNr(*) AS row_cnt
FROM tbl_A
UNIO0
SELBCT *
FROM tb1_B 1 IMP
图灵社区会员非洲铜（PI:EMAIL）专享尊重版权
---
## Page 128
1-7用SOL进行集合运算
—115 
■执行结果
zox_cnt
如果集合运算符里不加上可选项ALL，那么重复行就会被排除掉。因此，
如果表tbl_A和表tbl_B是相等的，排除掉重复行后，两个集合是完金重
合的。
则它们的并集也是相同
如果两个集合是相同，
则它们的并集将与原来的集合不同
如果两个集合不相同，
A UNION B = A = B
A UNION B ≠ A ≠ B
如果像下面这样，两张表有一行数据不一样，结果就会变成4.这是
因为，如果某一行数据不同，那么排除掉重复行后这一行也还会存在，两
张表没办法完全重合。
■key列为B的一行数据不同：结果会变为4
tbl_A
tbl_B
2
col2
3
L
前面的SQL语句可以用于包含NULL数据的表，而且不需要指定列数、
列名和数据类型等就能使用，还是很方便的。此外，因为这条SQL语句
只使用了UNION，所以在MySQL数据库里也可以使用。当然，我们也可
以只比较表里的一部分列或者一部分行。只需要指定一下想要比较的列的
名称，或者在WHERE子句里加入过滤条件就可以比较了。
从上面的例题看出，对于任意的表S，都有下面的公式成立。
---
## Page 129
116—第1章奇的SOL
S=S NOIN S
这是UNION的一个非常重要的性质，在数学上我们称之为幂等性
（indempotency）.幂等性原本是抽象代数里群论等理论中的概念，有多种意
思，与本节内容在意思上相近的一种是“二目运算符*对任意S，都有S*S=S
成立”。如果按这个意思理解，UNION运算是幂等的。
在编程领域，一般把这个意思扩展成“同一个程序无论执行多少次结
注0
果都是一样的”来使用·。举一个常见的例子，C语言头文件的设计就是
从这个盘文上来讲,如果把较件
的安装和即载看成一个整体的运
满足幂等性的。同一个文件无论被引用多少次，都与只引用一次的效果相
算，那么它也是幕等的。这显因
为，却载后，系统环地会团到安
同。同理，HTTP的GET方法也是幂等的。同样的请求无论进行多少次，
记作 1U,，将系统环堆记作E，那
装之前的状态。如果将这个运算
都是安全的。幂等性在用户界面设计方面有非常重要的作用。例如，保证
执行多少次结果都是不变的，所
公积当于 IUE) = E。 当然。 无论
按钮无论被点击多次，都与被点击一次时的效果完全相同一—这是我们在
 IU(IU(3U(E) = E
设计交互界面时对于安全方面的基本要求。
对十集合运算里的UNION，如果将SUNIONS者作一个执行单元，
那么因为无论执行多少次结果都是相同的，所以SUNIONS也是幂等的。
由此，我们可以把它用在比较三张以上的表是否相等。
■同一个集合无论加多少次结果都相同
S UNION S UNION S UNION S - UNION S = S
有一点需要注意的是，如果改成对S执行多次UNION ALL操作，那
么每次结果都会有变化，所以说UNICNALL不具有幂等性。类似地，如
果对拥有重复行的表进行UNION操作，也会失去幂等性。换句话说，
UNICN的这个优雅而强大的幕等性只适用于数学意文上的集合，对SQL
中有重复数据的多重集合是不适用的。由此，我们应该明白主键对表来说
是多么地重要。
在开始继续学习之前，这里先提一个间题：除了UNION以外，还有哪
个集合运算符具有幕等性？下面我们将会使用它。
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 130
17用SOL进行集合运算—17
比较表和表：检查集合相等性之进阶篇
在前面的解法中，在比较两张表之前，我们需要先要查一下两张表里
数据的行数。虽然这点准备工作也不算麻烦，但我们还是改进一下这条
SQL语句，让它能直接比较两张表吧。这里还使用表tbl_A和表tbl_B来
演示。
在集合论里，判定两个集合是否相等时，一般使用下面两种方法。
1. (A C B ) 且 (A D B)  (A = B)
2.(A U B )= (A ∩ B)  (A = B)
第一种方法利用两个集合的包含关系来判定其相等性，意思是“如果
集合A包含集合B，且集合B包含集合A，则集合A和集合B相等”
这个办法可行，只是有点麻烦（这种方法在稍后的例题中有涉及）。
第二种方法利用两个集合的并集和差集来判定其相等性。如果用SQL
语言描述，那就是“如果AUNION B-AINTERSECT B，则集合A和集
合B相等”。这种方法写起来更简单。
如果集合A和集合B 相等，那么A LNION B-A-B以及AINTERSECT
B-A-B都是成立的。没错，除了UNION之外，另一个具有幂等性的
运算符就是INTERSECT。
相反，如果A≠B，UNION和INTERSECT的结果就不相同了.UNION
的运算结果行数肯定会变多。下面的图描述了两个不相同的集合A和B
之间的差异逐渐变小、相互接近的动画，请大家想象一下这个过程，这样
应该更好理解UNION 和 INTERSBCT 的区别。
如果A=B，刚好完全重合
A UNION B
A INTERSECT B
剩下的间题是，对A和B分别进行UNION运算和INTERSBCT运算后，
如何比较这两个结果。目前我们已经明白了下面这一点。
---
## Page 131
118—第1章神奇的SOL
{A INTERSECT B ) C ( A UNION B )
因此，只需要判定（A UNION B）EXCEPT （A INTERSECT B}的结果
集是不是空集就可以了，如果A=B，则这个结果集是空集，否则，这个
结果集里肯定有数据。
SSLSCT CASE MHEN COUNT(+) = 0
THEN相等
UNIO
EXCEPT
INIERSECT
这条SQL语句与上一部分中的SQL语句具有同样的优点，也不需要
知道列名和列数，还可以用于包含NULL的表，而且，这个改进版连事先
查询两张表的行数这种准备工作也不需要了。但是，虽然功能改进了，却
也带来了一些缺陷。由于这里需要进行4次排序（3次集合运算加上1次
DISTINCT），所以性能会有所下降（不过这条SQL语句也不需要频繁执行，
所以这点缺陷也不是不能容忍）。此外，因为这里使用了INTERSECT和
EXCBPT，所以目前这条SQL语句不能在MySQL里执行。请综合考虑
下两者的优势和缺陷，选择使用这条或者前一部分里的SQL语句。
那么，既然我们知道了两张表的数据有差异，接下来就把不同的行输
出来看一看吧。diff命令是用来比较文件的，而这里的SQL语句就相当
于diff，只不过是用来比较表的。我们只需要求出两个集合的异或集就
可以了，代码如下所示。
--用于比较表与表的dirr
(SELECT · FRCH tb1_A
SELECT · FROM tb1_B)
UNIC8 ALL
(SELECT + FROMtb1_B
EXCEPT
---
## Page 132
1-7用SOL进行集合运算—119
■执行结果
key
co1_1
co1_2
co1_3
因为A-B和B一A之间不可能有交集，所以合并这两个结果时使用
UNIONALL也没有关系。在A和B一方包含另一方时，这条SQL语句也
是成立的（这时A一B或者B一A有一个会是空集）。需要注意的是，在
SQL中，括号决定了运算的先后顺序，非常重要，如果去掉括号，结果就
会不正确。
用差集实现关系除法运算
在本节开头的“导入篇”里我们说过，SQL里还没有能直接进行关
系除法运算的运算符。因此，为了进行除法运算，必须自已实现。方法比
较多，其中具有代表性的是下面这三个。
1.嵌套使用NOTEXISTS
2.使用HAVING子句转换成一对一关系。
3.把除法变成减法。
本节将介绍一下第三种方法。
集合论里的减法指的是差集运算。1-5节在介绍用外连接求差集
的方法时候留了一个间题，解法就是上面的方法3，现在我们来解答
一下。
关于示例数据，我们选用的是下面这两张员工技术信息管理表。
---
## Page 133
●120-
一第1章神奇的SOL
Skills
EmpSkills
i [技术]
emp (员工
Ski技术）
Oracle
相田
Oracle
UNIX
相田
UNIX
相田
Java
相田
C#
神崎
Oracle
神崎
XINN
神崎
Java
平井
UNIX
平井
Oracle
平井
 PHP
平并
Perl
平井
C++
若田部
Perl
渡来
Oracle
这里的问题是，从表EmpSkils中找出精通表Skils中所有技术的员工。
也就是说，答案是相田和神崎。平井很可惜，会的技术很多，但是不会
Java，所以落选了。
我们即将学习的方法的思路跟面向过程语言非常像，所以可能比使用
HAVING子句的方法更好理解一些。那么我们先看一下答案吧。
SSLBCT DISTINCT enp
-用求差集的方法进行关系除法运算|有余数]
FBOM EnpSki11s ES1
HHERE NOT EXISTS
(SELBCT ski11
FROM Ski11a
EXCEPT
SELECT ski11
NHERE ES1 enp = ES2 .emp) ;
FROM EnpSk111s ES2
■执行结果
enp
相田
* = a
神崎
---
## Page 134
1-7用SOL进行集合运算
121
理解这段代码的要点在于EXCEPT运算符和关联子查询。关联子查询
建立在表EmpSkills上，这是因为，我们要针对每个员工进行集合运算。
即从需求的技术的集合中减去每个员工自已的技术的集合，如果结果是空
集，则说明该员工具备所有的需求的技术，否则说明该员工不具备某些需
求的技术，
例如，我们先看一下相田。可以看到，集合运算的结果是空集，所以
符号条件。
需求的技术
相田具备的技术
Oracle
UNIX
下面再看一下平井的情况。
需求的技术
平井具备的技术
UNIX
Oracle
PHP
结果里剩下了Java这一行，所以平井不符合条件。也就是说，这里
的解题思路是先把处理的单位分割成了以员工为单位，然后将除法运算还
注0
来向答卡儿前感瓦，当你遇因难
时。将它尽可能的分解成许多都
想一致，还是很巧妙的。
dtfio/lty rto es mny perts a
分。 M后述个解决≥ ( Divde esh
下面再看一下解题过程吧。有没有想到些什么呢？没错，其实这条
Is feestble and mecessary to
一编者注
SQL语句的处理方法与面向过程语言里的循环、中断控制处理很像。请试
resolve ft )L, 
着想象一下把这两张表当成是两个文件，然后一行一行循环处理的过程。
针对某一个员工循环判断各种技术的掌握情况，如果存在企业需求的技术，
就进行减法运算：如果不存在就终止该员工的循环，继续对下一个员工执
行同样的处理。
---
## Page 135
●122-
第1章种奇的 SQL
众所周知，关联子查询是为了使SQL能够实现类似面向过程语言中
注0
循环的功能而引入的。前面之所以说可能这种解法相对更好理解，也是
其实在设计之初，SOL就有盘据
脱循环、继值等面向位程的方
这个原因
出。关于这一点，大家可以参考
2-6 节。
“原来如此。本来是除法（division），但这里将问题分割（divide）了