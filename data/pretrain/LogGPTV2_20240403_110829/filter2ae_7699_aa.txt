### 一、问题简介
熟悉以太坊的读者都清楚，在以太坊机制中，为了防止恶意节点滥用区块资源、防止Dos攻击，所以引入了Gas机制。然而防御也是存在某些漏洞隐患的，今天的文章中，我们就根据某些实例中的代码编写问题来展开叙述一下Dos循环的安全漏洞。
也就是说，在合约编写者设计合约代码的时候，不宜使用太大次的循环。由于每一笔交易都是会消耗一定的gas，而实际消耗gas值的多少取决于当前交易内部的复杂度。倘若一个交易中存在大量的循环，那么交易的复杂度会变的更高，此时当超过允许的最大gas消耗量时，会导致交易失败。
### 二、代码分析
#### Simoleon合约
下面我们详细的分析一下相关问题的代码情况。
简单来说`Simoleon`是一个私有的token代币名称，而根据其具体的合约分析，其实现机制中存在很严重的漏洞，从而导致用户进行薅羊毛的过程来恶意获得代币。下面我们来看一下具体的代码：
被攻击的合约地址为`0x86c8bf8532aa2601151c9dbbf4e4c4804e042571`，其合约代码在链接：
下面我们详细的分析一下代码的具体过程。
代码起始部分定义了一个父合约`ERC20Interface`。在父合约中我们看到了7个函数，而这些函数就是我们上一篇文章中分析过的ERC20代币的interface。也更好的反正了我们当时所说几乎所有的代币目前都是基于ERC20而创建的。而函数的具体用法大家可以参照我上一篇文章。
    pragma solidity ^0.4.8;
    contract ERC20Interface {
        function totalSupply() public constant returns (uint256 supply);
        function balance() public constant returns (uint256);
        function balanceOf(address _owner) public constant returns (uint256);
        function transfer(address _to, uint256 _value) public returns (bool success);
        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
        function approve(address _spender, uint256 _value) public returns (bool success);
        function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
        event Transfer(address indexed _from, address indexed _to, uint256 _value);
        event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    }
之后进入了主合约阶段：
    contract Simoleon is ERC20Interface {
        string public constant symbol = "SIM";
        string public constant name = "Simoleon";
        uint8 public constant decimals = 2;
        uint256 _totalSupply = 0;
        uint256 _airdropAmount = 1000000;
        uint256 _cutoff = _airdropAmount * 10000;
        mapping(address => uint256) balances;
        mapping(address => bool) initialized;
        // Owner of account approves the transfer of an amount to another account
        mapping(address => mapping (address => uint256)) allowed;
在变量的初始化中，合约定义了六个成员变量。分别表示：`合约类型、合约名字、小数位数、合约总金额、合约空投金额、账户余额以及账户布尔定义`
合约名为：`Simoleon`，并且继承了`ERC20Interface`。也就意味着合约实现了多态性并且根据自己的目标重定义了函数。下面，我们来看一下具体函数的实现方法。
    function Simoleon() {
            initialized[msg.sender] = true;
            balances[msg.sender] = _airdropAmount * 1000;
            _totalSupply = balances[msg.sender];
        }
        function totalSupply() constant returns (uint256 supply) {
            return _totalSupply;
        }
        // What's my balance?
        function balance() constant returns (uint256) {
            return getBalance(msg.sender);
        }
        // What is the balance of a particular account?
        function balanceOf(address _address) constant returns (uint256) {
            return getBalance(_address);
        }
首先是构造函数`Simoleon
()`。在构造函数中，合约会将初始地址sender标记为true(此标记用于记录账户是否是首次出现)，之后会初始化余额为`_airdropAmount *
1000`，然后更新合约总金额。
而下面的三个函数为`constant`类型的查看函数，用于对`_totalSupply 、getBalance(msg.sender)
、getBalance(_address)`的值进行查看。
之后我们就进入了此合约比较关键的函数--初始化函数。
    // internal private functions
        function initialize(address _address) internal returns (bool success) {
            if (_totalSupply = _amount
                && _amount > 0) {
                initialize(_to);
                if (balances[_to] + _amount > balances[_to]) {
                    balances[msg.sender] -= _amount;
                    balances[_to] += _amount;
                    Transfer(msg.sender, _to, _amount);
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
在转账函数调用的过程中，我们传入收款方以及转账金额。首先是需要对此地址是否进行过初始化进行判断。在完成金额判断后（`balances[msg.sender]
>= _amount && _amount > 0`
）我们调用初始化函数（用于防止传入的to地址是首次调用的情况）。此时我的to也就无非两种情况：①不是第一次使用初始化，此时初始化无效。②是第一次初始化，合约赠送代币。
之后跳入`if (balances[_to] + _amount >
balances[_to])`。用于防止溢出，之后进行转账记录并emit相应的事件（方便管理员进行后续的查看工作以及追踪交易记录）。
    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {
            initialize(_from);
            if (balances[_from] >= _amount
                && allowed[_from][msg.sender] >= _amount
                && _amount > 0) {
                initialize(_to);
                if (balances[_to] + _amount > balances[_to]) {
                    balances[_from] -= _amount;
                    allowed[_from][msg.sender] -= _amount;
                    balances[_to] += _amount;
                    Transfer(_from, _to, _amount);
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
上面的`transferFrom`也是如此，只不过使用了ERC20中的`allowed`变量来允许代转账操作。（详细的解释看我上一篇文章）
再之后就是一些基础的函数：
    function approve(address _spender, uint256 _amount) returns (bool success) {
            allowed[msg.sender][_spender] = _amount;
            Approval(msg.sender, _spender, _amount);
            return true;
        }
        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
            return allowed[_owner][_spender];
        }
        function getBalance(address _address) internal returns (uint256) {
            if (_totalSupply 
### 三、攻击复现
在网上的一些材料中也有对此攻击的具体实现手段，但是唯独缺少了一些攻击手段实现的脚本，所以下面我们针对此问题着手进行脚本的撰写，并模拟部署攻击环节。
下面我们部署一下相应的合约。
合约采用0.4.8版本。
首先我们放上部署的被攻击合约：
    pragma solidity ^0.4.8;
    contract ERC20Interface {
        function totalSupply() public constant returns (uint256 supply);
        function balance() public constant returns (uint256);
        function balanceOf(address _owner) public constant returns (uint256);
        function transfer(address _to, uint256 _value) public returns (bool success);
        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
        function approve(address _spender, uint256 _value) public returns (bool success);
        function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
        event Transfer(address indexed _from, address indexed _to, uint256 _value);