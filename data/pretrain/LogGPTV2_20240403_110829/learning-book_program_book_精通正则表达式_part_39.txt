当然，不是每点改动都会带来像本例一样的灾难性后果，不过除非知道正则表达式的幕后
原理，否则在实际运行之前永远不能判断后果。为此，本章考察了各种例子的效率和后果。
不过，对许多事来说，牢固理解基本概念对深入学习是非常重要的，所以，在讲解指数级
匹配之前，我们不妨仔细复习复习回溯。
全面考察回溯
A Global View of Backtracking
从局部来看，回溯就是倒退至未尝试的分支。这很容易理解，但是回溯对整个匹配影响并
不容易理解。在本节，我们会详细考察回溯在匹配成功和不成功时的各种细节，尝试从中
发掘出一些东西。
先来仔细看看前一章的几个例子，在165页，我们把”.*"应用到下面的文本：
匹配过程如图6-3所示。
正则表达式会从字符串的起始位置开始依次尝试每个字符，但是因为开头的引号无法匹配，
此后的字符也不能匹配，直到尝试进行到标记位置A。接着尝试表达式的其他部分，但是
传动装置（148）知道如果这种尝试不成功，整个表达式可以从下一个位置开始尝试。
然后.*匹配直到字符串末尾，此时点号无法匹配，所以星号停止选代。因为.*匹配成功
可以不需要任何字符，所以在此过程中引擎记录了46个状态供回溯。现在.*停止了，引
擎从最后保存的状态开始回溯，在“"anise”处开始尝试*"1。
也就是说，我们在字符事的末尾尝试匹配表示结束的双引号。不过，在这里双引号同样无
法匹配，所以尝试仍然失败。然后引擎继续回溯、尝试，结果同样是无法匹配。
---
## Page 255
全面考察回溯
229
图例
尝试并匹配失败
回溯并尝试匹配失败
→正则表达式元素成功匹配的文本
The name McDonald's is said makudonarudo in Japanese
FA
仅针对POSIXNFA
图6-3：*的成功匹配过程
引擎倒过来尝试（最后保存的状态排在最先）从A到B保存的状态，首先是从B到C。在
进行了多次尝试之后到达这个状态：正则表达式中的·.*对应字符串中的…arudo"
·in'Japa，也就是C所标注的位置。此时匹配成功，于是我们在D位置得到全局匹配。
The nameMcDonald's*is said“Makudonarudoin Japanese
这就是传统型NFA的匹配过程，剩下的未使用状态将被抛弃，报告匹配成功。
POSIXNFA需要更多处理
More Work for a POSIX NFA
我们已经介绍过，POSIXNFA的匹配是“到目前为止最长的匹配”，但是仍然需要尝试所有
保存的状态，确认是否存在更长的匹配。我们知道，对本例来说，第一次找到的匹配就是
最长的，但正则引擎需要确认这一点。
所以，在保存的所有状态中，除了两个能够匹配双引号的可能之外，其他都会在尝试后立
即被放弃。所以，尝试过程D-E-F和F-G-H类似B-C-D，只是F和H会被放弃，因为它
们匹配的文本比D的要短。
在I位置能进行的回溯是“启动驱动过程，进行下一轮尝试（bump-alongandretry）”。不过，
因为从A位置开始的尝试能够找到匹配（实际上是三个），POSIXNFA引擎最终停下来，
报告在D位置的匹配。
---
## Page 256
230
第6章：打造高效正则表达式
无法匹配时必须进行的工作
Work Required During a Non-Match
我们还需要分析无法匹配时的情况。我们知道.*”！无法匹配范例文本，但是它在匹配过
程中仍然会进行许多工作。我们将会看到，工作量增大了许多。
图6-4说明了这些。A-I序列类似图6-3。区别在于，在位置D无法匹配（因为结尾的问号）。
另一点区别在于，图6-4中的整个尝试序列是传统型NFA和POSIXNFA都必须经历的：如
果无法匹配，传统型NFA必须进行的尝试与POSIXNFA一样多。
图例
正则表达式："！]
尝试并匹配失败
回溯并尝试匹配失败
→正则表达式元素成功匹配的文本
The name
"McDonald'sissaidmakudonarudoin Japanese
B
C
一轮尝试
G
H
一轮尝试
0
一轮尝试
一轮尝试
W-
图6-4：*！匹配失败的经过
因为从开始的A到结束的I的所有尝试都不存在匹配，传动装置必须启动驱动过程开始新
一轮尝试。从J、Q、V开始的尝试看来有可能匹配成功，但结果都与从A开始的尝试一样。
最终到Y，不存在继续尝试的途径，所以整个尝试宣告失败。如图6-4所示，得到这个结果
花费了许多工夫。
---
## Page 257
全面考察回溯
231
看清楚一点
Being More Specific
我们把点号换成（"]来做个比较。前一章已经讨论过，这样的结果更容易理解，因为它
能匹配的字符更少，而且这样一来，正则表达式的效率也提高了。如果使用“"【^"]*"！]，
[]*匹配的内容就不能包括双引号，减少了匹配和回溯。
图6-5说明了尝试失败的过程（请对比图6-4）。从图中可以看到，回溯的次数大大减少了。
如果这个结果满足我们的需要，减少的回溯就是有益的伴随效应（sideeffect）。
图例
正则表达式："【"]"！]
尝试并匹配失败
回溯并尝试匹配失败
一→正则表达式元素成功匹配的文本
The name
"McDonald'g"
is said"makudonarudo" in Japanese
CG
一轮尝试
一轮尝试
一轮尝试
一轮尝试
PY
图6-5：[^]*！无法匹配
多选结构的代价很高
Alternation CanBeExpensive
多选结构或许是回溯的主要原因。举个简单的例子，用makudonarudo来比较ulvlw|xly|zl
和[uvwxyz]的匹配。字符组一般只是进行简单测试（注3），所以[uvwxyz]只需要进行
34次尝试就能匹配。
The name“McDonald's"is said“makgdonarudo*in Japanese
注3：不同实现方式的效率可能存在差异，但总的来说字符组的效率要比相应的多选结构高。
---
## Page 258
232
第6章：打造高效正则表达式
如果使用ulv1w|xly|2，则需要在每个位置进行6次回溯，在得到同样结果之前总共有204
次回溯。当然，并不是每个多选结构都可以替换为字符组，即使可以，也不见得会这么简
单。不过，在某些情况下，我们将要学习的技巧能够大大减少与匹配所须的多选结构相关
的回溯。
理解回溯可能是学习NFA效率中最重要的问题，但所有的问题不只于此。正则引擎的优化
措施能够大大提升效率。在本章后面，我们将详细考察正则引擎要做的工作和优化手段。
性能测试
Benchmarking
本章主要讲解速度和效率，而且会时常使用性能测试，所以我希望介绍一些测试的原则。
我会用几种语言来介绍简单的测试方法。
基本的性能测试就是记录程序运行的时间：先取系统时间，运行程序，再取系统时间，计
算两者的差，就是程序运行的时间。举个例子，比较^（aIblcldlelflg）+$和'~[a-g]+$]。
先来看Perl的表现，然后再来看其他语言。下面是简单的Perl程序（不过，我们将会看到，
这个例子有欠缺）：
use Time::HiRes 'time';
#这样time（）的返回值更加精确
SStartTime =time();
"abababdedfg* =~ m/~(a/b]c|dle|f1g)+$/;
$EndTime = time();
printf(*Alternation takes &.3f seconds.\n",$EndTime - $StartTime);
$StartTime = time();
"abababdedfg”=-m/~[a-g]+$/;
$EndTime =time();
printf("Character class takes $.3f seconds.\n",$EndTime - $StartTime);
它看来（而且也确实是）很简单，但是在进行性能测试时，我们需要记住几点：
可能避免“非处理时间”的影响。如果在开始前必须进行初始化或其他准备工作，请
在它们完成之后开始计时：如果需要收尾工作，请在计时停正之后进行这些工作。
进行“足够多”的处理。通常，测试需要的时间是相当短暂的，而计算机时钟的单位
精度不够，无法给出有意义的数值。
---
## Page 259
性能测试
233
在我的机器上运行这个Perl程序，结果是：
Alternation takes 0.ooo seconds.
Character class takes 0.oo0 seconds.
我们只能知道，这段程序所需的时间比计算机能够测量的最短时间还要短。所以，如
果程序运行的时间太短，就运行两次、十次，甚至一千万次，来保证“足够多”的工
作。这里的“足够多”取决于系统时钟的精度，大多数系统能够精确到1/100s，这样，
即使程序只需要0.5s，也能取得有意义的结果。
·
进行“准确的”处理。进行1000万次快速操作需要在负责计时的代码块中升级1000
万次计数器。如果可能，最好的办法是增加真正的处理部分的比例，而不增加额外的
开销。在Perl的例子中，正则表达式应用的文本相当短：如果应用到长得多的字符串，
在每次循环中所作的“真正的”处理也会多一些。
考虑到这些因素，我们可以得出下面的程序：
use Time::HiRes 'time';
#这样time（）的返回值更加精确
STimesToDo=1000;
#设定重复次数
$Count =$TimesToDo;
SStartTime = time() ;
while（$Count-->0）{
$TestString =~ m/^(a|blcldle|flg)+$/;
SEndTime = time();
printf(*Alternation takes $.3f seconds.\n"，$EndTime - $StartTime);
SCount = $TimesToDo;
sStartTime = time();
while（$Count-->0）{
$TestString =- m/^[a-g]+S/;
SEndTime = time();
printf("Character class takes $.3f seconds.\n*，$EndTime -$StartTime);
请注意，$TestString和sCount的初始化在计时开始之前（$TestString使用了Perl提供
的x操作符进行初始化，它表示将左边的字符串重复右边的次数）。在我的机器上，使用
Perl5.8运行的结果是：
Alternation takes 7.276 seconds.
Character class takes 0.333 seconds.
所以，对这个例子来说，多选结构要比字符组快22倍左右。此测试应该执行多次，选取最
短的时间，以减少后台系统活动的影响。
---
## Page 260
234
第6章：打造高效正则表达式
理解测量对象
Knoe Vhat You're Measuring
我们把初始化程序更改为下面这样，会得到更有意思的结果：
STimesToDo=1000000;
$TestString = "abababdedfg";
现在，测试字符串只是上面的长度的1/1000，而测试需要进行1000次。每个正则表达式测
试和匹配的字符总数并没有变化，因此从理论上讲，“工作量”应该没有变化。不过，结果
却大不相同：
Alternation takes 18.167 seconds.
Character class takes 5.231 seconds.
两个时间都比之前的要长。原因是新增的“非处理”开销-对sCount的检测和更新，以
及建立正则引擎的时间，现在的次数是以前的1000倍。
对于字符组测试来说，新增的开销花费了大约5s的时间，而多选结构则增加了将近10秒。
后，它们都需要额外处理，这样的操作要多1000倍）。
无论如何，进行这点修改的要点在于说明，真正处理部分和非真正处理部分在计时中所占
的比重会强烈地影响到测试结果。
PHP测试
Benclmarking oitl PHP
下面是PHP的测试，使用preg引擎：
STimesToDo = 1000;
/*准备测试字符串*/
$TestString = "";
for （$i=0;$i< 1000;$i++)
sTestString.="abababdedfg";
/*开始第一轮测试*/
$start = gettimeofday();
for （$i =O;$i< $TimesToDo;$i++)
preg_match('/^(a1blcle|flg)+$/`,STestString);
sfinal = gettimeofday();
$sec=（$final['sec']+$final['usec']/10oooo0)
($start['sec']+$start['usec']/1000000);
printf("Alternation takes .3f seconds\n",Ssec);
/*开始第二轮测试*/
$start = gettimeofday();
for （Si =O;$i<STimesToDo;$i++)
preg_match('/^[a-g]+$/',$TestString);
$final = gettimeofday();
Ssec=(Sfinal{'sec']+ $final['usec']/10oooo0)
printf("Character class takes $.3f seconds\n*,$sec);
---
## Page 261
性能测试
235