这种攻击技术与[之前一篇论文](https://www.contextis.com/documents/2/Browser_Timing_Attacks.pdf)的思想类似，具体步骤如下：
1、嵌入被攻击域的一张图像。通常情况下，通过身份认证的不同用户会使用不同的图像（比如已登录用户的头像或者安全码）。
2、使用SVG过滤器创建图像对应的单色版本（SVG过滤器可以应用于跨源资源）。
3、缩放图像，扩展其中的每个像素，使其填满整个屏幕。
4、迭代图像中的所有像素，在用户屏幕上显示每个像素，记录下光传感器对该像素的读数。
5、根据单个像素的读数生成结果图像。
利用这种方法，如果某个文档支持跨域iframe方式，那么攻击者就可以提取这个文档中的所有图像资源以及数据（比如头部中没包含X-Frame-Options字段或者父节点没使用内容安全策略（Content Security Policy））。
**五、攻击细节及其他方面考虑**
前面我们已经演示了攻击过程，接下来我们讨论一下在实际环境中利用这种技术的一些细节上的考虑。
**5.1 检测速度**
由于我们每次只能提取一个像素信息，因此这种利用方法的主要限制因素是检测速度。从原理上讲，浏览器传感器可以支持60Hz频率的读取率。然而，这并不意味着实际环境中我们的速度可以达到每秒提取60个比特，因为我们能达到的检测上限与传感器能够检测到的屏幕亮度变化速率有关。在实验中，我们测量发现屏幕亮度数值读取有大约200-300ms的延迟，为了实现可靠的利用过程，我们可以假设读取1比特需要500ms，这样更加现实一些。
在这个速率下，读取各类资源所需要的时间如下所示：
包含8个字符的纯文本字符串：24秒（假设以已知字体显示时，字母及数字字符串中每个字符包含6比特）。
包含16个字符的纯文本字符串：48秒。
20×20大小的二维码：3分20秒。
检测历史纪录中1000个常用URL地址：8分20秒。
64×64像素的图像：34分8秒。
如果某个网站将屏幕颜色在黑白之间随意切换足够长的时间，以便检测长度非常短的文本字符串，通常情况下用户不大可能能忍受这种场景。然而，在某些情况下，如果用户长时间离开目标设备（比如，晚上将设备放在某个支架上），攻击者就可以获取到更多的数据。为了完成这个任务，恶意网站需要使用screen.keepAwake这个API保持屏幕常亮。
在未来，光传感器可能会具备测量光强度或特定颜色饱和度（红色、绿色、蓝色）的功能，这样一来，攻击速度就会大大提高。
**5.2 传感器数据精度**
虽然传感器本身提供的数据非常准确，实际演示过程中我们会碰到一些困难，比如整个测试期间环境照明条件会发生变化，用户可能会携带设备（尤其是移动电话）四处移动。
我们发现攻击结果的准确性受到一些因素的影响，比如屏幕亮度（亮度较高的屏幕有利于实施攻击）、传感器上方反射面的距离以及角度（手机固定在支架上，接收平面反射的光线时效果较好，缺乏反射面会导致攻击过程更加困难）以及光源数量等（较暗的环境噪音较少，检测过程也更加容易）。
**5.3 浏览器支持情况**
这种攻击方法适用于两种浏览器：Firefox以及Chrome目前正在使用老式API（ambient light
events），这也是我们演示场景中所使用的API。Firefox不需要用户许可就能使用这种方法，对于Chrome浏览器，我们需要通过
**chrome://flags#enable-experimental-web-platform-features**
标志启用实验性功能。老式API很快就会被新的API替代（Ambient Light Sensors），Chrome通过
**chrome://flags#enable-generic-sensor** 标志实现了新的API，对我们而言，这个API也能达到相同的功能。
我们已经提交了Firefox以及Chrome的安全性/隐私性报告。
**六、应对措施**
目前有人认为，只需要采取以下保护错误就足以应付这类攻击：
1、限制传感器的读取速率（远小于60Hz）。
2、限制传感器输出数据的精度（以量化输出结果）。
据我们所知，有研究成果表明攻击者可以通过[陀螺仪](https://crypto.stanford.edu/gyrophone/)来恢复音频信号，人们根据类似原理提出了这种应对措施。我们认为，Chrome尝试将修复[陀螺仪漏洞](https://iss.oy.ne.ro/PhoneHome.pdf)的方法应用于其他传感器上，然而这种方法可能并不适用于所有情况。基于特定风险构造的威胁模型可能是错误的，并不能面面俱到。
对于光传感器而言，限制采集速率并不能阻止我们的攻击，即使频率低到1Hz也会受到同类攻击影响，只不过速率会有所下降。
只要屏幕的颜色不能影响传感器的输出结果，那么限制输出的精度可能是更好的一种办法。此时可能有些因素能够满足攻击条件（比如屏幕亮度、反射面与屏幕非常接近等），但实际中想成功实施攻击会变得更加困难。
可能最直观的一种解决方案是，浏览器在访问传感器之前需要经过用户的许可，这种限制已经应用于许多功能上（如定位功能）。在Ambient Light Sensor
API规范中也需要拓展有关安全性以及隐私性方面的注意事项，以提醒存在这类攻击的安全风险。
**6.1 给用户的建议**
在Firefox中，关闭传感器，具体方法是转到“about:config”，然后将device.sensors.enabled设为“false”。目前在Chrome中，除非用户手动启用了前面提到的实验功能标志，否则大多数用户应该都是安全的。
**6.2 给开发者的建议**
为了避免不可信站点将文档资源以iframe方式嵌入，开发者需要在HTTP头部中设置“X-Frame-Options:
Deny”字段，这样也能顺便阻止其他类型的攻击（如点击劫持攻击）。
目前我们无法阻止攻击者对图像资源的攻击，因为图像不受X-Frame-Options限制。
**七、总结**
在本文的攻击场景中，我们演示了恶意网站如何利用表面上人畜无害的光传感器破坏同源策略，窃取跨域数据，提取用户浏览历史记录等敏感信息。
我们还需要认识到一点，从[隐私设计](https://blog.lukaszolejnik.com/battery-status-not-included-assessing-privacy-in-w3c-web-standards/)角度出来，想要设计正确的规范以及系统是一个非常复杂的过程：未经任何保护的情况下，将敏感API接口提供给Web使用需要谨慎考虑。存在的一个安全风险在于，规范撰写者以及浏览器厂商会根据通用的原则以及研究结果做出决策，而这些决策往往不适用于新的功能特性（比如，基于陀螺仪读数的保护机制对光传感器数据而言可能并不足够）。
最扣人心弦的结论是，技术标准、隐私设计以及隐私影响评估这三方面非常有趣，我们可以从这三方面出发，发现现实世界中存在的一些微妙的问题。如果你在这方面需要帮助，欢迎随时跟我联系。