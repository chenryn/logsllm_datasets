实现此案例需要按照如下步骤进行。
步骤一：练习模块
ansible-doc //模块的手册，相当于man
ansible-doc -l //列出所有模块
ansible-doc 模块名 //查看指定模块的帮助信息
1）ping模块
\[root@ansible .ssh\]# ansible web1 -m ping
web1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
2）command模块
\[root@ansible .ssh\]# ansible web1 -m command -a \'chdir=/tmp touch
f1\' //创建成功
\[root@web1 \~\]# cd /tmp/
\[root@web1 tmp\]# ls //在web1上面查看
f1
3）shell模块
\[root@ansible .ssh\]# ansible web1 -m shell -a \'chdir=/tmp touch f2\'
//创建成功
\[root@web1 \~\]# cd /tmp/
\[root@web1 tmp\]# ls //在web1上面查看
f2
4）raw模块
\[root@ansible .ssh\]# ansible web1 -m raw -a \'chdir=/tmp touch f3\'
//文件可以创建，但无法切换目录，文件在用户家目录下生成
web1 \| SUCCESS \| rc=0 \>\>
Shared connection to web1 closed.
\[root@web1 tmp\]# cd /root/
\[root@web1 \~\]# ls //在web1上面查看
f3
5）script模块
对于太复杂的命令，可以写个脚本，然后用script模块执行
在web1主机上创建zhangsan3用户，修改zhangsan3的密码为123456，设置zhangsan3第一次登陆必须修改密码
用命令写：
\[root@ansible .ssh\]# ansible web1 -m shell -a \'useradd zhangsan3\'
\[root@ansible .ssh\]# ansible web1 -m shell -a \'echo 123456 \| passwd
\--stdin zhangsan3\'
\[root@ansible .ssh\]# ssh -l zhangsan3 web1
zhangsan3@web1\'s password: //输入zhangsan3的密码
\[root@ansible .ssh\]# ansible web1 -m shell -a \'chage -d 0 zhangsan3\'
\[root@ansible .ssh\]# ssh -l zhangsan3 web1
用脚本写，script模块执行：
\[root@ansible .ssh\]# vim user.sh
#!/bin/bash
useradd zhangsan3
echo 123456 \| passwd \--stdin zhangsan3
chage -d 0 zhangsan3
echo
\[root@ansible .ssh\]# ansible web1 -m script -a \'./user.sh\'
web1 \| SUCCESS =\> {
\"changed\": true,
\"rc\": 0,
\"stderr\": \"Shared connection to web1 closed.\\r\\n\",
\"stdout\": \"Changing password for user zhangsan3.\\r\\npasswd: all
authentication tokens updated successfully.\\r\\n\\r\\n\",
\"stdout_lines\": \[
\"Changing password for user zhangsan3.\",
\"passwd: all authentication tokens updated successfully.\",
\"\"
\]
}
\[root@ansible .ssh\]# ssh -l lisi web1
lisi@web1\'s password:
You are required to change your password immediately (root enforced)
Last login: Thu Sep 6 14:51:33 2018 from 192.168.1.51
WARNING: Your password has expired.
You must change your password now and login again!
Changing password for user lisi.
Changing password for lisi.
(current) UNIX password:
6 案例6：模块练习
6.1 问题
本案例要求：
使用copy模块同步数据
使用lineinfile模块编辑文件
使用replace模块修改文件
6.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：模块练习
1）使用copy模块同步数据
src：要复制到进程主机的文件在本地的地址,可以是绝对路径,也可以是相对路径。如果路径是一个目录,它将递归复制。在这种情况下,如果路径使用\"/\"来结尾,则只复制目录里的内容,如果没有使用\"/\"来结尾,则包含目录在内的整个内容全部复制,类似于rsync
dest：必选项。进程主机的绝对路径,如果源文件是一个目录,那么该路径也必须是个目录
backup：在覆盖之前将原文件备份,备份文件包含时间信息。有两个选项:yes\|no
force：如果目标主机包含该文件,但内容不同,如果设置为yes,则强制覆盖,如果为no,则只有当目标主机的目标位置不存在该文件时,才复制。默认为yes
\[root@ansible .ssh\]# ansible all -m shell -a \'cat /etc/resolv.conf\'
//查看/etc/resolv.conf
cache \| SUCCESS \| rc=0 \>\>
; generated by /usr/sbin/dhclient-script
nameserver 192.168.1.254
search localhost
db2 \| SUCCESS \| rc=0 \>\>
; generated by /usr/sbin/dhclient-script
nameserver 192.168.1.254
search localhost
web1 \| SUCCESS \| rc=0 \>\>
; generated by /usr/sbin/dhclient-script
nameserver 192.168.1.254
search localhost
web2 \| SUCCESS \| rc=0 \>\>
; generated by /usr/sbin/dhclient-script
nameserver 192.168.1.254
search localhost
db1 \| SUCCESS \| rc=0 \>\>
; generated by /usr/sbin/dhclient-script
nameserver 192.168.1.254
search localhost
\[root@ansible .ssh\]# vi /etc/resolv.conf
nameserver 172.40.1.10
\[root@ansible .ssh\]# ansible all -m copy -a \'src=/etc/resolv.conf
dest=/etc/resolv.conf\' //复制本机的resolv.conf到其他主机
\[root@ansible .ssh\]# ansible all -m shell -a \'cat /etc/resolv.conf\'
//查看有nameserver 172.40.1.10
\[root@ansible \~\]# mkdir aa
\[root@ansible \~\]# ansible all -m copy -a \'src=/root/aa
dest=/root/a.log\'
//复制本机的目录/root/aa到其他机器的/root/a.log，复制目录只能少数批量执行同步
\[root@ansible \~\]# ansible all -m shell -a \'ls -ld /root\'
db2 \| SUCCESS \| rc=0 \>\>
dr-xr-x\-\--. 4 root root 167 Sep 6 11:48 /root
web2 \| SUCCESS \| rc=0 \>\>
dr-xr-x\-\--. 4 root root 167 Sep 6 11:48 /root
cache \| SUCCESS \| rc=0 \>\>
dr-xr-x\-\--. 4 root root 177 Sep 6 14:35 /root
db1 \| SUCCESS \| rc=0 \>\>
dr-xr-x\-\--. 4 root root 167 Sep 6 11:48 /root
web1 \| SUCCESS \| rc=0 \>\>
dr-xr-x\-\--. 4 root root 177 Sep 6 14:35 /root
2）使用lineinfile模块编辑文件
以行为基础，整行修改(整行被替换掉)
\[root@ansible \~\]# ansible cache -m lineinfile \\
-a \'path=/etc/sysconfig/network-scripts/ifcfg-eth0 \\
regexp=\"\^ONBOOT=\" line=\"ONBOOT=\\\"no\\\"\"\'
cache \| SUCCESS =\> {
\"backup\": \"\",
\"changed\": true,
\"msg\": \"line replaced\"
}
3）使用replace模块修改文件
修改文件的某一部分(替换一行中匹配的内容)，以正则表达式匹配为基础修改
\[root@ansible \~\]# ansible cache -m replace -a \\
\'path=/etc/sysconfig/network-scripts/ifcfg-eth0 \\
regexp=\"\^(ONBOOT=).\*\" replace=\"\\1\\\"yes\\\"\"\'
cache \| SUCCESS =\> {
\"changed\": true,
\"msg\": \"1 replacements made\"
}
7 案例7：综合练习
7.1 问题
本案例要求：
安装Apache并修改监听端口为8080
修改ServerName配置，执行apachectl -t命令不报错
设置默认主页hello world
启动服务并设开机自启
7.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：熟悉模块
1）yum模块
\[root@ansible \~\]# ansible other -m yum -a \'name=\"lrzsz\"
state=removed\'
//lrzsz软件包名，removed=absent删除
\[root@ansible \~\]# ansible other -m yum -a \'name=\"lrzsz,lftp\"
state=installed\'
//安装多个软件包，不写state默认为安装
2)service模块
\[root@ansible \~\]# ansible other -m service -a \'name=\"sshd\"
enabled=\"yes\" state=\"started\"\'
//sshd服务名，开机启动同时启动这个服务
3）setup模块
filter 过滤指定的关键字（可以过滤到我们需要的信息）
\[root@ansible \~\]# ansible cache -m setup -a \'filter=os\'
cache \| SUCCESS =\> {
\"ansible_facts\": {},
\"changed\": false
}
\[root@ansible \~\]# ansible cache -m setup -a
\'filter=ansible_distribution\'
cache \| SUCCESS =\> {
\"ansible_facts\": {
\"ansible_distribution\": \"CentOS\"
},
\"changed\": false
}
步骤二：安装Apache
1）安装Apache服务设置开机自启
\[root@ansible \~\]# ansible cache -m yum -a \'name=httpd
state=installed\'
\[root@ansible \~\]# ansible cache -m service -a \'name=httpd
enabled=yes state=started\'
2）修改端口号为8080
\[root@ansible \~\]# ssh cache
Last login: Thu Sep 6 15:30:33 2018 from 192.168.1.51
\[root@cache \~\]# cat /etc/httpd/conf/httpd.conf \| grep Listen
Listen 80
\[root@ansible \~\]# ansible cache -m lineinfile -a
\'path=\"/etc/httpd/conf/httpd.conf\" regexp=\"\^Listen \" line=\"Listen
8080\"\'cache \| SUCCESS =\> {
\"backup\": \"\",
\"changed\": true,
\"msg\": \"line replaced\"
}
\[root@ansible \~\]# ssh cache
Listen 8080
步骤三：修改ServerName配置，执行apachectl -t命令不报错
1）没有修改之前
\[root@cache \~\]# apachectl -t //有报错
AH00558: httpd: Could not reliably determine the server\'s fully
qualified domain name, using 192.168.1.56. Set the \'ServerName\'
directive globally to suppress this message
Syntax OK
2）修改之后
\[root@ansible \~\]# ansible cache -m lineinfile -a
\'path=\"/etc/httpd/conf/httpd.conf\" regexp=\"\^ServerName \"
line=\"ServerName 0.0.0.0\"\'
cache \| SUCCESS =\> {
\"backup\": \"\",
\"changed\": true,
\"msg\": \"line added\"
}
\[root@ansible \~\]# ssh cache
Last login: Thu Sep 6 15:36:08 2018 from 192.168.1.51
\[root@cache \~\]# apachectl -t
Syntax OK
步骤四：设置默认主页为hello world
\[root@ansible \~\]# ansible cache -m copy -a \'src=/root/index.html
dest=/var/www/html/index.html\' ///root/index.html这个页面可以自己写
cache \| SUCCESS =\> {
\"changed\": true,
\"checksum\": \"22596363b3de40b06f981fb85d82312e8c0ed511\",
\"dest\": \"/var/www/html/index.html\",
\"gid\": 0,
\"group\": \"root\",
\"md5sum\": \"6f5902ac237024bdd0c176cb93063dc4\",
\"mode\": \"0644\",
\"owner\": \"root\",
\"size\": 12,
\"src\":
\"/root/.ansible/tmp/ansible-tmp-1536219767.29-30682157793478/source\",
\"state\": \"file\",
\"uid\": 0
}
# \-\-\-\-\-\-\-\--NSD ARCHITECTURE DAY02\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# playbook基础
## ansible七种武器
第一种武器
ansible命令,用于执行临时性的工作,必须掌握
第二种武器
ansible-doc
ansible模块文档说明,针对每个模块都有详细的说明以及应用,功能和man命令类似,必须掌握
第三种武器
ansible-console
为ansible用户提供交互式工具,,虚拟出来的终端上像shell一样使用ansible内置的命令
> 为习惯使用shell交互方式的用户提供了良好的使用体验
第四种
ansible-galaxy 从github上下载管理Roles的一款工具,与python的pip类似
第五种武器
ansible-playbook
是日常应用中使用频率最高的命令,工作机制:通过读取先编写好的playbook文件实现批量
> 管理,可以理解为按一定条件组成的ansible任务集,必须掌握
第六种武器
ansible-vault
主要用于配置文件加密.如编写的playbook文件中包含敏感信息.不想其他人随意查看,可用它加
密解密这个文件
第七种武器
ansible-pull ansible有两种工作模式pull/push 默认使用push模式工作,
pull和push工作模式机制相反
> 适用场景:有大批量机器需要配置,即便使用高并发线程依旧要花费很多时间
>
> 灵活性稍有欠缺,但效率几乎可以无限提升,对运维人员的技术水平和前瞻性规划有较高要求
## JSON简介
是JavaScript对象表示法,他是一种基于文本独立于语言的轻量级数据交换格式
json中的分隔符限于单引号' 小括号() 中括号\[\] 大括号{} 冒号: 逗号,
JSON特性:纯文本 具有自我描述性(人类可读) 具有层级结构(值中存在值)
可通过JavaScript进行解析
语法规则:数据在名称/值对中 数据由逗号分隔 大括号保存对象 中括号保存数组
**名称/值书写格式:**
"成员":"李白"
**json数组**
{ "诗人":
\["李白", "杜甫", "白居易"\]
}
**复合复杂类型**
{ "诗人":
\[{"李白": "诗仙", "年代": "唐"},
{"杜甫": "诗圣", "年代":"唐"}
\]
}
## YAML简介
是一个可读性高,用来表达数据序列的格式,参考了多种语言,如:C语言,python,perl等,2001首发,已有多种语言支持.