# 【系列分享】Linux 内核漏洞利用教程（一）：环境配置
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[o0xmuhe](http://bobao.360.cn/member/contribute?uid=32403999)
预估稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
[**【系列分享】Linux
内核漏洞利用教程（二）：两个Demo**](http://bobao.360.cn/learning/detail/3702.html)
**  
**
**0x00: 前言**
一直想入门linux kernel
exploit，但是网络上比较成熟的资料很少，只能找到一些slide和零碎的文档，对于入门选手来说真的很困难。还好在自己瞎摸索的过程中上了joker师傅的装甲车，师傅说：要有开源精神，要给大家学习的机会。
所以就有了这个系列的文章，第一篇记录是环境配置篇，包含了linux内核编译、添加系统调用并测试的过程。在这个过程中我还是遇到很多坑点的，踩了一段时间才把这些坑填好，成功搞定，希望我的经历能给大家一点帮助。
**0x01: 环境说明**
    ubuntu 14.04 x86
    qemu
使用的内核版本[2.6.32.1](https://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.32.1.tar.gz%20-O%20linux-2.6.32.1.tar.gz)
busybox版本[1.19.4](https://busybox.net/downloads/)
使用busybox是因为文件添加方便.
**0x02: 内核编译并测试**
**1\. 下载内核源码**
    $ wget https://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.32.1.tar.gz -O linux-2.6.32.1.tar.gz
    $ tar -xjvf linux-2.6.32.1.tar.gz
**2\. 编译过程**
首先要安装一些依赖库以及qemu。
    $ cd linux-2.6.32.1/
    $ sudo apt-get install libncurses5-dev
    $ sudo apt-get install qemu qemu-system
    $ make menuconfig
    $ make
    $ make all
    $ make modules
**3\. 编译的时候遇到的问题以及解决方案**
**3.1 问题1**
问题
    Can't use 'defined(@array)' (Maybe you should just omit the defined()?) at kernel/timeconst.pl line 373.
    /home/muhe/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/kernel/Makefile:129: recipe for target 'kernel/timeconst.h' failed
    make[1]: *** [kernel/timeconst.h] Error 255
    Makefile:878: recipe for target 'kernel' failed
    make: *** [kernel] Error 2
解决方案: 尝试[修改这个文件](http://www.playpenguin.net/an-zhuo-nei-he-bian-yi-cuo-wu-kerneltimeconsth-definedval.html)
        @val = @{$canned_values{$hz}};
    -   if (!defined(@val)) {
    +   if (!@val) {
                @val = compute_values($hz);
        }
        output($hz, @val);
    --
**3.2 问题2**
问题描述
    .... 
    arch/x86/kernel/ptrace.c:1472:17: error: conflicting types for ‘syscall_trace_enter’
     asmregparm long syscall_trace_enter(struct pt_regs *regs)
                     ^
    In file included from /home/muhe/linux_kernel/linux-2.6.32.1/arch/x86/include/asm/vm86.h:130:0,
                     from /home/muhe/linux_kernel/linux-2.6.32.1/arch/x86/include/asm/processor.h:10,
                     from /home/muhe/linux_kernel/linux-2.6.32.1/arch/x86/include/asm/thread_info.h:22,
                     from include/linux/thread_info.h:56,
                     from include/linux/preempt.h:9,
                     from include/linux/spinlock.h:50,
                     from include/linux/seqlock.h:29,
                     from include/linux/time.h:8,
                     from include/linux/timex.h:56,
                     from include/linux/sched.h:56,
                     from arch/x86/kernel/ptrace.c:11:
    /home/muhe/linux_kernel/linux-2.6.32.1/arch/x86/include/asm/ptrace.h:145:13: note: previous declaration of ‘syscall_trace_enter’ was here
     extern long syscall_trace_enter(struct pt_regs *);
                 ^
    arch/x86/kernel/ptrace.c:1517:17: error: conflicting types for ‘syscall_trace_leave’
     asmregparm void syscall_trace_leave(struct pt_regs *regs)
                     ^
    In file included from /home/muhe/linux_kernel/linux-2.6.32.1/arch/x86/include/asm/vm86.h:130:0,
                     from /home/muhe/linux_kernel/linux-2.6.32.1/arch/x86/include/asm/processor.h:10,
                     from /home/muhe/linux_kernel/linux-2.6.32.1/arch/x86/include/asm/thread_info.h:22,
                     from include/linux/thread_info.h:56,
                     from include/linux/preempt.h:9,
                     from include/linux/spinlock.h:50,
                     from include/linux/seqlock.h:29,
                     from include/linux/time.h:8,
                     from include/linux/timex.h:56,
                     from include/linux/sched.h:56,
                     from arch/x86/kernel/ptrace.c:11:
    /home/muhe/linux_kernel/linux-2.6.32.1/arch/x86/include/asm/ptrace.h:146:13: note: previous declaration of ‘syscall_trace_leave’ was here
     extern void syscall_trace_leave(struct pt_regs *);
                 ^
    make[2]: *** [arch/x86/kernel/ptrace.o] 错误 1
    make[1]: *** [arch/x86/kernel] 错误 2
    make: *** [arch/x86] 错误 2
解决方案
    patch patch -p1 < /tmp/1.patch
    --- linux-2.6.32.59/arch/x86/include/asm/ptrace.h
    +++ fix_ptrace.o_compile_error/arch/x86/include/asm/ptrace.h
    @@ -130,6 +130,7 @@
    ifdef KERNEL
    include
    +#include
    struct cpuinfo_x86;
    struct task_struct;
    @@ -142,8 +143,8 @@
    int error_code, int si_code);
    void signal_fault(struct pt_regs regs, void __user frame, char *where);
    -extern long syscall_trace_enter(struct pt_regs );
    -extern void syscall_trace_leave(struct pt_regs );
    +extern asmregparm long syscall_trace_enter(struct pt_regs );
    +extern asmregparm void syscall_trace_leave(struct pt_regs );
    static inline unsigned long regs_return_value(struct pt_regs *regs)
    {
**3.3 问题3**
问题描述
    gcc: error: elf_i386: 没有那个文件或目录
    gcc: error: unrecognized command line option ‘-m’
解决方案
        arch/x86/vdso/Makefile
        VDSO_LDFLAGS_vdso.lds = -m elf_x86_64 -Wl,-soname=linux-vdso.so.1    -Wl,-z,max-page-size=4096 -Wl,-z,common-page-size=4096 把"-m elf_x86_64" 替换为 "-m64"
        VDSO_LDFLAGS_vdso32.lds = -m elf_i386 -Wl,-soname=linux-gate.so.1中的 "-m elf_i386" 替换为 "-m32"
**3.4 问题4**
问题描述
    drivers/net/igbvf/igbvf.h15: error: duplicate member ‘page’
    struct page page;
    ^
    make[3]: ** [drivers/net/igbvf/ethtool.o] 错误 1
    make[2]: [drivers/net/igbvf] 错误 2
    make[1]: [drivers/net] 错误 2
    make: * [drivers] 错误 2
解决方案
        //修改名字重复
        struct {
                            struct page *_page;
                            u64 page_dma;
                            unsigned int page_offset;
                    };
            };
            struct page *page;
**0x03:增加syscall**
增加syscall的方式和之前[文章](http://o0xmuhe.me/2017/02/08/Adding-your-own-syscall-in-linux-kernel/)写的差不多，只是这次内核版本更低，所以更简单一点。我这里添加了两个系统调用进去。
**1\. 在syscall table中添加信息**
文件 arch/x86/kernel/syscall_table_32.S中添加自己的调用