# 【系列分享】Linux 内核漏洞利用教程（一）：环境配置

## 译文声明
本文是翻译文章，原文来源为安全客。译文仅供参考，具体内容表达及含义以原文为准。

## 作者信息
- 作者：[o0xmuhe](http://bobao.360.cn/member/contribute?uid=32403999)
- 预估稿费：300 RMB
- 投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 传送门
- [【系列分享】Linux 内核漏洞利用教程（二）：两个Demo](http://bobao.360.cn/learning/detail/3702.html)

## 前言
我一直想学习 Linux 内核漏洞利用技术，但在网络上找到的成熟资料较少，仅有一些幻灯片和零碎文档，对于初学者来说确实比较困难。幸运的是，在自己摸索的过程中得到了 joker 师傅的帮助。师傅强调了开源精神，并希望给大家提供学习的机会。因此，我决定撰写这一系列的文章。第一篇将记录如何进行环境配置，包括 Linux 内核编译、添加系统调用并测试的过程。在这个过程中，我遇到了很多问题，经过一段时间的努力终于解决了这些问题，希望能对大家有所帮助。

## 环境说明
- 操作系统：Ubuntu 14.04 x86
- 虚拟机：QEMU
- 内核版本：[2.6.32.1](https://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.32.1.tar.gz)
- BusyBox 版本：[1.19.4](https://busybox.net/downloads/)
- 使用 BusyBox 的原因是文件添加方便。

## 内核编译与测试

### 1. 下载内核源码
```bash
$ wget https://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.32.1.tar.gz -O linux-2.6.32.1.tar.gz
$ tar -xjvf linux-2.6.32.1.tar.gz
```

### 2. 编译过程
首先安装一些依赖库以及 QEMU。
```bash
$ cd linux-2.6.32.1/
$ sudo apt-get install libncurses5-dev
$ sudo apt-get install qemu qemu-system
$ make menuconfig
$ make
$ make all
$ make modules
```

### 3. 编译时遇到的问题及解决方案

#### 问题1
**描述：**
```plaintext
Can't use 'defined(@array)' (Maybe you should just omit the defined()?) at kernel/timeconst.pl line 373.
/home/muhe/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/kernel/Makefile:129: recipe for target 'kernel/timeconst.h' failed
make[1]: *** [kernel/timeconst.h] Error 255
Makefile:878: recipe for target 'kernel' failed
make: *** [kernel] Error 2
```
**解决方案：**
修改 `timeconst.pl` 文件：
```perl
@val = @{$canned_values{$hz}};
-   if (!defined(@val)) {
+   if (!@val) {
        @val = compute_values($hz);
    }
    output($hz, @val);
```

#### 问题2
**描述：**
```plaintext
arch/x86/kernel/ptrace.c:1472:17: error: conflicting types for ‘syscall_trace_enter’
asmregparm long syscall_trace_enter(struct pt_regs *regs)
^
...
```
**解决方案：**
应用补丁：
```bash
patch -p1 < /tmp/1.patch
--- linux-2.6.32.59/arch/x86/include/asm/ptrace.h
+++ fix_ptrace.o_compile_error/arch/x86/include/asm/ptrace.h
@@ -130,6 +130,7 @@
ifdef KERNEL
include
+#include
struct cpuinfo_x86;
struct task_struct;
@@ -142,8 +143,8 @@
int error_code, int si_code);
void signal_fault(struct pt_regs regs, void __user frame, char *where);
-extern long syscall_trace_enter(struct pt_regs );
-extern void syscall_trace_leave(struct pt_regs );
+extern asmregparm long syscall_trace_enter(struct pt_regs );
+extern asmregparm void syscall_trace_leave(struct pt_regs );
static inline unsigned long regs_return_value(struct pt_regs *regs)
{
```

#### 问题3
**描述：**
```plaintext
gcc: error: elf_i386: 没有那个文件或目录
gcc: error: unrecognized command line option ‘-m’
```
**解决方案：**
修改 `arch/x86/vdso/Makefile` 文件：
```makefile
VDSO_LDFLAGS_vdso.lds = -m64 -Wl,-soname=linux-vdso.so.1 -Wl,-z,max-page-size=4096 -Wl,-z,common-page-size=4096
VDSO_LDFLAGS_vdso32.lds = -m32 -Wl,-soname=linux-gate.so.1
```

#### 问题4
**描述：**
```plaintext
drivers/net/igbvf/igbvf.h:15: error: duplicate member ‘page’
struct page page;
^
make[3]: ** [drivers/net/igbvf/ethtool.o] 错误 1
make[2]: [drivers/net/igbvf] 错误 2
make[1]: [drivers/net] 错误 2
make: * [drivers] 错误 2
```
**解决方案：**
修改重复的成员名：
```c
struct {
    struct page *_page;
    u64 page_dma;
    unsigned int page_offset;
};
struct page *page;
```

## 增加系统调用
增加系统调用的方法与之前的文章类似，但由于这次使用的内核版本较低，操作更为简单。我在这里添加了两个系统调用。

### 1. 在系统调用表中添加信息
在 `arch/x86/kernel/syscall_table_32.S` 文件中添加自己的系统调用。

希望这些内容对你有所帮助！