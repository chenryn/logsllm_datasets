具唯一性的临时性文件名
OFFICE=/tmp/pd.key,office.$$
TEL区PHONE=/tmp/pd.key .telephone.$$
USBR=/tmp/pd.key -user , $$
当工作终止时，无论是正常或异常终止，我们都要让临财性文件消失，因此使用t工aD
命令：
trap “exft 1*
HUP INT PIPE QUTT TERX
在开发步骤，我们仅将第二个trap命令加上注释，以保留临时性文件供稍后检查（trap
命令在13.3.2节里会详细介绍，在此，了解当脚本离开时，trap命令会使用给定的参
数以自动执行rm就够了）。
我们需要重复执行取出字段1与5的操作，一且得到这些信息，就无须再从标准输人取
得输入流了，所以我们可以先将它们取出后放进临时性文件：
amx -F: '( print $1 *;* $5 }' > SUSick :*
该取标准输人
我们先作key:person这组文件，配合两步骤的sed程序，再接上一行简单的sort：sort
命令，在4.1节里已介绍过。
sed -e 's=/.*==* \
-e *8=^\([^:]*\):\{,*\) \([ J*\]=\1:\3, \2=* $P&RSON
这段脚本使用=作为sed命令的分隔字符，因为斜杠和冒号在数据内容里都有了。第一
个编辑操作是将第一个斜杠直至行结尾的所有数据提取出来，例如，如下的一行：
jones:Adr1an V. Jones/0sD211/555-0123
输人行
www.TopSage.com
---
## Page 117
管道的神奇魔力
105
处理后，成为：
Jones:Adrian W. Jones
首次编辑后的结录
第二个编辑就稍复杂些：匹配记录里的三个子模式。第一段：*\（[*：]*\）匹配用户名
称字段（例：jones）：第二段：\（.*\）匹配文字到空白处（例：Adrianw.口，
表示一个空格字符），最后一段\（[^口]*\）匹配记录里剩下的非空白文字（例如：
Jones），将置换后的文字重新整理出匹配的数据，产生像Jones，口AdrianW.这样
的结果，这行Bed命令所产生的结果就是我们预期的新顺序：
jones:Jones, Adrian W.
显示第二个编辑的结果
下一步要作的是key:office文件：
0$,==$*/[/11/+[/1:([1=,pe8
结果是列出用户与办公室信息：
Jones:0sD211
再来的key：telephone操作也差不多：只要将匹配模式稍微调整即.可：
sed =e*=~([^:]*\) : [~/]*/[~/] */\([~/]*\)=\1:\2=′ $TBL&PHC8g
在这个步骤，已有了三个单个文件，都已完成排序，也都含有键值（也就是用户名称）、
管号，以及特定数据（姓名、办公室编号与电话号码）。SPERSON文件的内容看起来会
像这祥：
ben:Franklin, Ben
Detsy :Ross, Bet.sy
.**
SOFFICE文件里包含用户名称与办公室数据：
ben:OsD212
bet ey : BMD17
STELEPHONE文件记录了用户名称与电话号码：
betsy:555-0033
join的默认行为是输出共同键值，然后是第一个文件里这行剩余的字段，紧接着来自
第二个文件里剩余的字段。这个共同键值默认为第一个字段，不过这可以通过命令行选
项来修改：我们这里不需要此功能。通常join是以空格（space）来分隔字段，不过我
们可以使用-t选项更改分隔符：在这里我们使用-t：。
www.TopSage.com
---
## Page 118
106
.2
join使用一个五步骤的管道完成，过程如下：
c.com
1.结合个人信息与办公室位置：
join =t: SPERSON SOFFICE 1 -.*
这个运算的结果将成为下一步骤的输人，如下所示：
ben:Prank1in, Ben:OSD212
betsy :Ross, Betsy:BMD17
. * *
2.加入电话号码：
.. 1 Join -t: - STELEPHONE 1 *
这里的操作结果一样也会成为下一步骤的输人，如下所示：
ben:Prank1in, Ben:OSD212:5550022
betsy:Ross, Betsy:BMD17:555-0033
3.
删除键值（也就是第一个字段），因为我们不再需要它。最简单的方式就是使用
cut，而这里的范围是指“使用字段2直到最后”，如下所示：
... 1 cut -d: ~f 2- 1 ...
这个运算的结果，同样成为下个步骤的输入：
Ross, Bet8y:BMD17:555-0033
Frank1in, Ben:0SD212:555-0022
数据重新排序。数据之前已按照登录名称排序完成，但现在我们要的是以个人的姓
来排序，这里使用sort命令：
...1sort -t: -k1,1 -k2,2 -k3,3 1..*
这条命令是以冒号分隔字段，依次对字段1、2与3进行排序。运算的结果是下一
步骤的输入：
Frank1in, Ben:OsD212:555-0022
Gale, Dorothy:KNs321:555-0044
5.
最后，重新格式化输出，使用awk的printf语句，配合制表字符（Tab）分隔每
个字段，命令如下：
".1 awk -F: *[ printf(*#-39s\t$s\tts\n*, S1, $2, $3) }*
为了灵活性以及将来能易于维护，格式化应该留到最后。一直到这里，所有内容都
还只是任意长度的文本字符串。
这里是完整的管道：
join -t: SPERSON SOFPICE 1
join -t: - STELEPHONE 1
www.TopSage.com
---
## Page 119
管道的神奇魔力
107
cut -d: -f 2- 1
sort -t1 k1.1 -k2,2 k3,3 1
awk -F:*{ printf(*39s\t#s\t#s\n*, $1, $2, $3) }
awk的printf语句在这里的用法有点类似Shell的printf命令：用冒号作为分隔字符，
显示第一个字段，并让字段1显示来的结果固定为向左对齐的39个字符长度，紧接着一
个制表字符（Tab），再接着第二个字段，加上另一个制表字符，再接上第三个字段，完
整结果如下：
Gale, Dorothy
Pranklin, Ben
ONS321 + 555-0044
Gale, Toto
Hancock, John
•SIG435+555-0099
Jefferson, Thomas
Jones, Adrian W.
+0SD211+555-0123
Washington, George
Ross, Betsy
•BMD17+555-0033
所有的操作都已完成：整个脚本总共用了20多行（不含注释），即已包括了五个主要处
理步骤。这些过程整理后如例5-1所示。
例5-1：建立办公室名录
过滤/etc/passwd这类格式的输入流，
#1/bin/sh
并以此数据衍生出办公室名录，
语法：
ypcat passwd 1 passwd-to-directory > office-directory-file
niscat passwd,org_dir 1 passwd-to-directory > office-dlrectory-fi1e
umask 077
PERSON=/tmp/pd.key -person. $$
OFFICE=/tmp/pd.key-otfice,$$
TELEPHONE=/tmp/pd.key , telephone .SS
USER=/tmp/pd.key ,user ,$$
trap *exit 1*
awk F: *{ print $1 °:* $5 1° > SUS&R
8ed -e 's=/,*s' 
=*s=^\([^]*\):\(.*\) \{[^ ]*\)=\1+\3, \2=*  $PgRSON
s1aa0s,=2\=\=$*/([/ STBLEPHONE
join -t: SPERSON $OFFICE 1
Join -t: - $TELEPHONE 1
www.TopSage.com
---
## Page 120
108
第5章
cut -d: -f 2- 1
sort -t: -k1,1 -k2,2 -k3,3 1
awk -P:*f printf (*&39s\ts\ts\n*, $1, $2, $3)}*
Shel1脚本真正好用的地方是：当我们想修改脚本让它做点不一样的事，例如插人由
key:jobritle文件而来的工作职称时，只需要修改最后的管道，如下所示：
join -t: $PERsoN /etc/passwd.job-title 1
用来取出工作职称的join
join -t: - SOFFICE 1
Joln -t1 - $TELEPHONE 1
1- - 1p-n
8ort -t: -kl,1 -k3,3 -k4,4 1
修改sort喻令
S1，$2，$3，S4})格式化命令
多加一个额外的名录字段的总成本是多一个join、更改sort字段以及调整最后的awk
格式化命令。
由于我们小心地在输出结果上保留特殊的字段定界符，因此可以不留痕迹地准备好替代
的名录，如下所示：
suoqdete-Aq'app  Arotsaatp-os-passed
如前所述：·表示ASCII的制表字符，
在此程序里，重要的假设是在每条数据记录的一个唯一键值（uniquekey）。有了这个唯
一键值，数据的各种不同视图可以用成对的key：vale方式维护在文件中。这里的键值为
UNIX的用户名称，但在较大型的例子中，键值很有可能是书目编号（ISBN）、信用卡
号码、员工编号、国家退休体系编号、产品序号、学号等。现在你终于知道我们身上有
多少编号了吧！有时在处理这些数据时需要的不一定是号码：只是需要具唯一值的文本
字符串。
5.2针对Web的结构型数据
由于World WideWeb（WwW）广为流行，所以在前一节中开发办公室名录的形式，可
以稍作修改，让数据以较漂亮的形式呈现。
Web文件多半都是由Hyper Texr Markup Language（HTML）语言写成：它是Standard
Generalized Markup Language（SGML）家族语言之一，而SGML自1986年起，陆续
被定义在数个ISO标准中。本书的原稿是用DocBook/XML写成，它也是SGML的一个
www.TopSage.com
---
## Page 121
管道的神奇魔力
特定实例。如果你有兴趣，可参考《HTML in HTML&XHTML:TheDefinitiveGuidelOIm
（O'Reilly），该书对HTML有完整介绍（注2）。
数据库小记
现今评多商用数据库都以“关系数据库”构建：数据可以以一对key:value形式访
问，并结合（join）操作用于构成多栏表格，提供选定的数据子集的视图。关系数
据库是由E.F.Codd°在1970年首度提出，尽管数据库业界初始反对，认为关系数据
库无法有效率地实现出来，不过Codd仍积极地推动着。幸好，聪明的程序设计师
们马上就我到了解决效率问题的方法。Codd功不可没，在1981年他拿到了ACM
图灵奖，这个奖项被誉为计算机科学领城量的诺员尔奖。
时至今日，陆续出现计多SrructuredQueryLanguage（结构化查询语言）的ISO
标准，让独立于厂商的数据库可以被访问，而这其中最重要的一个SQL操作、就
是join。讨论SQL的书已经很多了，若你怒再进一步了解，可以统一本通用的书
参考，例如《SQLinaNutShell)。我们的简易办公室名录操作也包含了现代关
系数据库核心概念的重要课题以及UNIX软件工具，在准备向数据库中输入数据并
处理它们的输出时，这些工具也是很有用的。
E.F.Codd, 《A Relational Model of Data for Large Shared Data Banks), Communications of
the ACM, 13(6) 377-387, June (1970), 及 Relational Database: (A Practical Foundation for
Productivity), Communications of the ACM, 25(2) 109-117, February(1982)(Turing Award
讲应）。
b:
Kevin Kline 与 Daniel Kline 合著,O'Reilly & Associates 出版，ISBN 1-56592-744-3.其
他SQL相美书基列表也可参考hrtp://www.math.aroh.edu/pub/rez/bib/sqlbooks.hrml,
我们在这个小节，只需要小型的HTML子集，这部分我们将用一小段文字来介绍。如果
你对HTML已熟悉，可以跳过这两页。
下面是我们写的一个遵循标准的小型HTML文件，是由我们其中一人所编写的一个好用
工具所产生的（注3）：
S echo Sello,world.1 html-pretty
注 2:
除试书外（已列于书后的参考书目），还有计多SGML与其街生产物的书列于htrp://
www.marh.utah.edu/pub/tex/bib/sgml.html  hrtp://www.math.wtah.edu/pub/tex/bib/
sgml2000.html，可供读考参考。
注 3;
见 http://www.math.atah.edu/pub/sgml/,
www.TopSage.com
---
## Page 122
110
第5章
=1>
on Wed Jan 8 12:12:422003 -->
He1lo, wor1d.
在这个HTML输出中，值得注意的事项如下：
HTML以括住注释。
特殊处理器命令包含在之中：这里DOCTYPE命令是告诉SGML子旬解析器
文件类型是什么，以及去哪里寻找其语法文件。
填写在尖括号里的标记字组，叫微标签（tag）。在HTML里，标签名称里的字母大
小写不重要：html-pretty将标签里的字母全都设置为大写，是为了便于阅读。
，且对许多标签而言，可嵌套设置，只要遵循HTML语法里定义的规则
即可。