### 具唯一性的临时性文件名

为了确保文件的唯一性，我们使用以下命名规则创建临时文件：
- `OFFICE=/tmp/pd.key-office.$$`
- `TELEPHONE=/tmp/pd.key-telephone.$$`
- `USER=/tmp/pd.key-user.$$`

当脚本执行完毕（无论是正常结束还是异常终止），这些临时文件都应被删除。为此，我们使用`trap`命令来实现：
```bash
trap "exit 1" HUP INT PIPE QUIT TERM
```
在开发阶段，我们可以注释掉第二个`trap`命令以保留临时文件用于后续检查。关于`trap`命令的详细说明将在第13.3.2节中介绍。在这里，只需知道当脚本退出时，`trap`命令会自动执行`rm`命令删除指定的文件。

我们需要多次从输入流中提取字段1和5的信息。一旦获取了这些信息，就无需再从标准输入读取数据。因此，可以先将这些信息保存到临时文件中：
```bash
awk -F: '{ print $1 ":" $5 }' > SUSICK
```

接下来，我们将创建`key:person`文件，这需要通过两个步骤的`sed`命令以及一个`sort`命令完成。`sort`命令已在第4.1节中介绍过。
```bash
sed -e 's=/.*==* \ -e *8=^\([^:]*\):\{,*\) \([ J*\]=\1:\3, \2=* $P&RSON
```
此脚本使用`=`作为`sed`命令的分隔符，因为斜杠和冒号已经在数据内容中出现。第一个编辑操作是从第一个斜杠到行尾的所有数据中提取出所需部分。例如：
```plaintext
jones:Adrian V. Jones/0sD211/555-0123
```
处理后变为：
```plaintext
Jones:Adrian W. Jones
```
第二个编辑操作稍显复杂：它匹配记录中的三个子模式。第一段`\（[^:]*\）`匹配用户名字段（如：`jones`）；第二段`\（.*\）`匹配文本直到空格处（如：`Adrian W.`）；最后一段`\（[^ ]*\）`匹配剩余的非空白字符（如：`Jones`）。最终结果为：
```plaintext
jones:Jones, Adrian W.
```

对于`key:office`文件，我们同样使用`sed`命令，但调整了匹配模式：
```bash
sed =e*=~([^:]*\) : [~/]*/[~/] */\([~/]*\)=\1:\2=′ $TBL&PHC8g
```
这样就可以列出用户及其办公室信息：
```plaintext
Jones:0sD211
```

对于`key:telephone`的操作也类似，仅需微调匹配模式即可。

此时，我们已经生成了三个已排序的文件，每个文件都包含键值（即用户名）、办公地点及电话号码。例如，`SPERSON`文件的内容如下：
```plaintext
ben:Franklin, Ben
betsy:Ross, Betsy
```

`join`命令默认输出共同键值，并附上来自各文件的其余字段。共同键值默认为第一个字段，但可以通过命令行选项进行修改。通常，`join`使用空格分隔字段，但我们可以通过`-t`选项更改分隔符。在这个例子中，我们使用`-t:`。

以下是整个管道过程：
1. 结合个人信息与办公室位置：
   ```bash
   join -t: SPERSON SOFFICE
   ```
   输出：
   ```plaintext
   ben:Franklin, Ben:OSD212
   betsy:Ross, Betsy:BMD17
   ```

2. 加入电话号码：
   ```bash
   join -t: - STELEPHONE
   ```
   输出：
   ```plaintext
   ben:Franklin, Ben:OSD212:5550022
   betsy:Ross, Betsy:BMD17:555-0033
   ```

3. 删除键值（即第一个字段），因为我们不再需要它：
   ```bash
   cut -d: -f 2-
   ```
   输出：
   ```plaintext
   Ross, Betsy:BMD17:555-0033
   Franklin, Ben:OSD212:555-0022
   ```

4. 重新排序数据，按个人姓氏排序：
   ```bash
   sort -t: -k1,1 -k2,2 -k3,3
   ```
   输出：
   ```plaintext
   Franklin, Ben:OSD212:555-0022
   Gale, Dorothy:KNs321:555-0044
   ```

5. 最后，使用`awk`命令重新格式化输出：
   ```bash
   awk -F: '{ printf("%-39s\t%s\t%s\n", $1, $2, $3) }'
   ```
   完整结果如下：
   ```plaintext
   Gale, Dorothy
   Franklin, Ben
   KNS321 + 555-0044
   Gale, Toto
   Hancock, John
   SIG435+555-0099
   Jefferson, Thomas
   Jones, Adrian W.
   OSD211+555-0123
   Washington, George
   Ross, Betsy
   BMD17+555-0033
   ```

完整的脚本如下：
```bash
#!/bin/sh
umask 077
PERSON=/tmp/pd.key-person.$$
OFFICE=/tmp/pd.key-office.$$
TELEPHONE=/tmp/pd.key-telephone.$$
USER=/tmp/pd.key-user.$$

trap "exit 1" HUP INT PIPE QUIT TERM

awk -F: '{ print $1 ":" $5 }' > SUSICK
sed -e 's=/.*==* \ -e *8=^\([^:]*\):\{,*\) \([ J*\]=\1:\3, \2=* $P&RSON
sed =e*=~([^:]*\) : [~/]*/[~/] */\([~/]*\)=\1:\2=′ $TBL&PHC8g
join -t: SPERSON SOFFICE | join -t: - STELEPHONE | cut -d: -f 2- | sort -t: -k1,1 -k2,2 -k3,3 | awk -F: '{ printf("%-39s\t%s\t%s\n", $1, $2, $3) }'
```

Shell脚本的优势在于其灵活性和易于维护。如果需要添加新的字段（如职位），只需在最后的管道中进行相应的调整即可。