if( !fnmatch( "file*", $file ) && $file != "include.php" ) {
	// This isn't the page we want!
	echo "ERROR: File not found!";
	exit;
}
?>
```
可以看到,High 级别的代码使用了 fnmatch 函数检查 page 参数,要求 page 参数的开头必须是 file,服务器才会去包含相应的文件.
**相关函数**
- **fnmatch(pattern,string,flags)**
	函数根据指定的模式来匹配文件名或字符串.
	此函数对于文件名尤其有用,但也可以用于普通的字符串.普通用户可能习惯于 shell 模式或者至少其中最简单的形式 '?' 和 '*' 通配符,因此使用 fnmatch() 来代替 ereg() 或者 preg_match() 来进行前端搜索表达式输入对于非程序员用户更加方便.
注:fnmatch 函数适用于 PHP >= 4.3.0,因此 php 版本高于这个才能利用,否则会出现打不开 high 等级页面.
**漏洞利用**
High 级别的代码规定只能包含 file 开头的文件,看似安全,不幸的是我们依然可以利用 file 协议绕过防护策略.file 协议其实我们并不陌生,当我们用浏览器打开一个本地文件时,用的就是 file 协议.
构造 url `http:///dvwa/vulnerabilities/fi/?page=file://C:/phpStudy/PHPTutorial/WWW/DVWA/php.ini`
至于执行任意命令,需要配合文件上传漏洞利用.首先需要上传一个内容为 php 的文件,然后再利用 file 协议去包含上传文件(需要知道上传文件的绝对路径),从而实现任意命令执行.
### Impossible
**服务器端核心代码**
```php
```
可以看到,Impossible 级别的代码使用了白名单机制进行防护,简单粗暴,page 参数必须为"include.php"、"file1.php"、"file2.php"、"file3.php"之一,彻底杜绝了文件包含漏洞.
---
## File_Upload
File Upload,即文件上传漏洞,通常是由于对上传文件的类型、内容没有进行严格的过滤、检查,使得攻击者可以通过上传木马获取服务器的 webshell 权限,因此文件上传漏洞带来的危害常常是毁灭性的,Apache、Tomcat、Nginx 等都曝出过文件上传漏洞.
先看常规的文件上传操作
**客户端上传**
在HTML `` 标签中 enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码.它的值有三种:
```
application/x-www-form-urlencoded: 在发送前编码所有字符(默认)
multipart/form-data: 不对字符编码.在使用包含文件上传控件的表单时,必须使用该值.
text/plain: 空格转换为 "+" 加号,但不对特殊字符编码.
```
**服务端接收**
使用 `$_FILES` 数组接收参数.
打印 $_FILES `print_r($_FILES);` 发现上传一个文件时的属性有
```
[name] => feng.jpeg     文件的名称
[type] => image/jpeg 	文件的MIME类型
[tmp_name] => C:\Users\Administrator\AppData\Local\Temp\php2007.tmp  文件的临时位置
[error] => 0       文件的错误信息  0 ok      1234 error
[size] => 2859    文件的大小
```
文件上传漏洞的利用的条件
```
1. 能够成功上传木马文件
2. 上传文件必须能够被执行
3. 上传文件的路径必须可知
```
### Low
**服务器端核心代码**
```php
Your image was not uploaded.';
	}
	else {
		// Yes!
		$html .= "{$target_path} succesfully uploaded!";
	}
}
?>
```
- **basename(path,suffix)**
    函数返回路径中的文件名部分,如果可选参数 suffix 为空,则返回的文件名包含后缀名,反之不包含后缀名.
	参数介绍:
	$path: 必需.规定要检查的路径.在 Windows中,斜线(/)和反斜线(\)都可以用作目录分隔符.在其它环境下是斜线(/).
	$suffix: 可选.规定文件扩展名.如果文件有 suffix,则不会输出这个扩展名.
可以看到,服务器对上传文件的类型、内容没有做任何的检查、过滤,存在明显的文件上传漏洞,生成上传路径后,服务器会检查是否上传成功并返回相应提示信息.
**漏洞利用**
文件上传漏洞的利用是有限制条件的,首先当然是要能够成功上传木马文件,其次上传文件必须能够被执行,最后就是上传文件的路径必须可知.不幸的是,这里三个条件全都满足.
上传文件 shell.php(一句话木马)
```php
```
上传成功,并且返回了上传路径
注:这里推荐用开源的 [antSword](https://github.com/AntSwordProject/antSword) 连接webshell,安装步骤这里略
`http:///dvwa/hackable/uploads/shell.php`
然后 antSword 就会通过向服务器发送包含 ant 参数的 post 请求,在服务器上执行任意命令,获取 webshell 权限.可以下载、修改服务器的所有文件.
### Medium
**服务器端核心代码**
```php
Your image was not uploaded.';
		}
		else {
			// Yes!
			$html .= "{$target_path} succesfully uploaded!";
		}
	}
	else {
		// Invalid file
		$html .= 'Your image was not uploaded. We can only accept JPEG or PNG images.';
	}
}
?>
```
可以看到,Medium 级别的代码对上传文件的类型、大小做了限制,要求文件类型必须是 jpeg 或者 png,大小不能超过 100000B(约为 97.6KB).
**组合拳(文件包含+文件上传)**
因为采用的是一句话木马,所以文件大小不会有问题,至于文件类型的检查,尝试修改文件名为 shell.png , 上传成功
尝试使用 antSword 连接,不幸的是,虽然成功上传了文件,但是并不能成功获取 webshell 权限,在 antSword 上会报错
这是因为 antSword 的原理是向上传文件发送包含 ant 参数的 post 请求,通过控制 ant 参数来执行不同的命令,而这里服务器将木马文件解析成了图片文件,因此向其发送 post 请求时,服务器只会返回这个"图片"文件,并不会执行相应命令.
这里可以借助 Medium 级别的文件包含漏洞来获取 webshell 权限
`http:///dvwa/vulnerabilities/fi/?page=hthttp://tp:///dvwa/hackable/uploads/shell.png`
`http:///dvwa/vulnerabilities/fi/?page=..././..././..././..././..././..././..././..././..././phpStudy/PHPTutorial/WWW/dvwa/hackable/uploads/shell.php`
注: 这里的 post 需要一个带 Medium 级别的 cookie 请求,antSword 现在貌似不支持带 cookie 访问,我是自己配置 burp 代理,用 burp 抓包加上 cookie 进行访问的
**抓包修改文件类型**
上传 shell.png 文件,抓包.
可以看到文件类型为 image/png,尝试修改 filename 为 shell.php.
上传成功.上 antSword 连接
**截断绕过规则**
在 php 版本小于 5.3.4 的服务器中,当 Magic_quote_gpc 选项为 off 时,可以在文件名中使用 %00 截断,所以可以把上传文件命名为 shell.php%00.png.
可以看到,包中的文件类型为 image/png,可以通过文件类型检查.上传成功.
而服务器会认为其文件名为 shell.php,顺势解析为 php 文件.
### High
**服务器端核心代码**
```php
Your image was not uploaded.';
		}
		else {
			// Yes!
			$html .= "{$target_path} succesfully uploaded!";
		}
	}
	else {
		// Invalid file
		$html .= 'Your image was not uploaded. We can only accept JPEG or PNG images.';
	}
}
?>
```
- **strrpos(string,find,start)**
    函数返回字符串 find 在另一字符串 string 中最后一次出现的位置,如果没有找到字符串则返回 false,可选参数 start 规定在何处开始搜索.
- **strtolower(string)**
	把字符串转换为小写.
- **getimagesize(string filename)**
    函数会通过读取文件头,返回图片的长、宽等信息,如果没有相关的图片文件头,函数会报错.
可以看到,High 级别的代码读取文件名中最后一个 `.` 后的字符串,期望通过文件名来限制文件类型,因此要求上传文件名形式必须是 `*.jpg`、`*.jpeg` 、`*.png` 之一.同时,getimagesize 函数更是限制了上传文件的文件头必须为图像类型.
漏洞利用
采用 %00 截断的方法可以轻松绕过文件名的检查,但是需要将上传文件的文件头伪装成图片,这里只演示如何借助 High 级别的文件包含漏洞来完成攻击.
科普下文件头相关的知识,常见的图片格式的文件头标识如下:
```
JPEG/JPG - 文件头标识 (2 bytes): FF D8 (SOI) (JPEG 文件标识) - 文件结束标识 (2 bytes): FF D9 (EOI)
PNG - 文件头标识 (8 bytes)   89 50 4E 47 0D 0A 1A 0A
GIF - 文件头标识 (6 bytes)   47 49 46 38 39(37) 61 |GIF89(7)a
```
更多格式的文件头标识参见文章: [通过文件头标识判断图片格式](https://www.cnblogs.com/Wendy_Yu/archive/2011/12/27/2303118.html)
文件头欺骗:伪造文件头,使文件头标识一样,其它部分我们修改为一句话木马,也就成了我们常说的图片一句话.
首先利用 copy 将一句话木马文件 php.php 与图片文件 1.jpg 合并
`copy 1.jpg/b+php.php/a shell.jpg`
打开可以看到,一句话木马藏到了最后.顺利通过文件头检查,可以成功上传.
注:我在 win10 裸机上进行的 phpstury 环境搭建,在这一步上传过程中,一直失败,后来发现是 windows defender 把上传上来的图片马杀掉了,所以出现同类问题可以检查下杀软情况
antSword 连接:
`http:///dvwa/vulnerabilities/fi/?page=file:///C:/phpStudy/PHPTutorial/WWW/dvwa/hackable/uploads/shell.jpg`
这里和上面一样,自己抓包加上 cookie
### Impossible
**服务器端核心代码**