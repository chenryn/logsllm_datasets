document.getElementById("demo").innerHTML = x;
```
你可以使用中括号 `[]` 来删除 JSON 对象的属性：
```js
delete myObj.sites["site1"]
```
## JSON.parse()
JSON 通常用于与服务端交换数据。
在接收服务器数据时一般是字符串。
我们可以使用 `JSON.parse()` 方法将数据转换为 JavaScript 对象。
```js
JSON.parse(text[, reviver])
```
- text:必需， 一个有效的 JSON 字符串。
- reviver: 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。
**JSON 解析实例**
例如我们从服务器接收了以下数据：
```json
{
    "name":"test",
    "alexa":10000,
    "site":"www.test.com"
}
```
我们使用 `JSON.parse()` 方法处理以上数据，将其转换为 JavaScript 对象：
```js
var obj = JSON.parse('{ "name":"test", "alexa":10000, "site":"www.test.com" }');
```
解析完成后，我们就可以在网页上使用 JSON 数据了：
```js
```
**从服务端接收 JSON 数据**
我们可以使用 AJAX 从服务器请求 JSON 数据，并解析为 JavaScript 对象。
```html
查看 JSON 文件数据 json_demo.txt
```
json_demo.txt
```json
{
    "name":"网站",
    "num":3,
    "sites": [
        { "name":"Google", "info":[ "Android", "Google 搜索", "Google 翻译" ] },
        { "name":"Taobao", "info":[ "淘宝", "网购" ] }
    ]
}
```
**从服务端接收数组的 JSON 数据**
如果从服务端接收的是数组的 JSON 数据，则 `JSON.parse` 会将其转换为 JavaScript 数组：
```html
查看服务端数据 json_demo_array.txt
```
json_demo_array.txt
```json
[ "Google", "test", "Taobao" ]
```
**异常**
JSON 不能存储 Date 对象。
如果你需要存储 Date 对象，需要将其转换为字符串。
之后再将字符串转换为 Date 对象。
```html
```
我们可以启用 `JSON.parse` 的第二个参数 reviver，一个转换结果的函数，对象的每个成员调用此函数。
```html
```
**解析函数**
JSON 不允许包含函数，但你可以将函数作为字符串存储，之后再将字符串转换为函数。
```html
```
不建议在 JSON 中使用函数。
---
## JSON.stringify()
JSON 通常用于与服务端交换数据。
在向服务器发送数据时一般是字符串。
我们可以使用 `JSON.stringify()` 方法将 JavaScript 对象转换为字符串。
```js
JSON.stringify(value[, replacer[, space]])
```
参数说明：
- value : 必需， 要转换的 JavaScript 值（通常为对象或数组）。
- replacer : 可选。用于转换结果的函数或数组。
    如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：""。
    如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。
- space : 可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\t。
**对象转换**
例如我们向服务器发送以下数据：
```js
var obj = { "name":"test", "alexa":10000, "site":"www.test.com"};
```
我们使用 `JSON.stringify()` 方法处理以上数据，将其转换为字符串：
```js
var myJSON = JSON.stringify(obj);
```
myJSON 为字符串。
我们可以将 myJSON 发送到服务器：
```html
```
**数组转换**
我们也可以将 JavaScript 数组转换为 JSON 字符串：
```js
var arr = [ "Google", "test", "Taobao", "Facebook" ];
var myJSON = JSON.stringify(arr);
```
myJSON 为字符串。
我们可以将 myJSON 发送到服务器：
```html
```
**异常**
JSON 不能存储 Date 对象。
`JSON.stringify()` 会将所有日期转换为字符串。
```html
```
之后你可以再将字符串转换为 Date 对象。
**解析函数**
JSON 不允许包含函数，`JSON.stringify()` 会删除 JavaScript 对象的函数，包括 key 和 value。
```html
```
我们可以在执行 `JSON.stringify()` 函数前将函数转换为字符串来避免以上问题的发生：
```html
```
不建议在 JSON 中使用函数。
---
## JSON 使用
JSON 最常见的用法之一，是从 web 服务器上读取 JSON 数据（作为文件或作为 HttpRequest），将 JSON 数据转换为 JavaScript 对象，然后在网页中使用该数据。
**JSON 实例 - 来自字符串的对象**
创建包含 JSON 语法的 JavaScript 字符串：
```js
var txt = '{ "sites" : [' +
'{ "name":"test" , "url":"www.test.com" },' +
'{ "name":"google" , "url":"www.google.com" },' +
'{ "name":"微博" , "url":"www.weibo.com" } ]}';
```
由于 JSON 语法是 JavaScript 语法的子集，JavaScript 函数 `eval()` 可用于将 JSON 文本转换为 JavaScript 对象。
`eval()` 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：
```js
var obj = eval ("(" + txt + ")");
```
在网页中使用 JavaScript 对象：
```html
网站名: 
网站地址: 
```
**JSON 解析器**
`eval()` 函数可编译并执行任何 JavaScript 代码。这隐藏了一个潜在的安全问题。
使用 JSON 解析器将 JSON 转换为 JavaScript 对象是更安全的做法。JSON 解析器只能识别 JSON 文本，而不会编译脚本。
在浏览器中，这提供了原生的 JSON 支持，而且 JSON 解析器的速度更快。
较新的浏览器和最新的 ECMAScript (JavaScript) 标准中均包含了原生的对 JSON 的支持。
---
## jsonl
`jsonlines`
- https://jsonlines.org/examples/
---
## Source & Reference
- [JSON 教程](https://www.runoob.com/json/json-tutorial.html)
- [.jsonl，jsonlines比json格式更好用的文件格式](https://blog.csdn.net/ykf173/article/details/107351057)