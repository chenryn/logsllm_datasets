73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
LongTimeAgo
#include 
#include 
/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */
unsigned int  fuck_func(int i)
{
    return ((1> 5)) + v1) ^ (sum + key[sum & 3]);
        sum += delta;
        v1 += (((v0 > 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
    }
    // printf("%x %x\n",v0,v1);
    v[0]=v0 ^ fuck_func(5); v[1]=v1 ^ fuck_func(6);
}
void decipher1(unsigned int num_rounds, uint32_t v[2], uint32_t const 
key[4]) {
    unsigned int i;
    uint32_t v0=v[0]^ fuck_func(5), v1=v[1] ^ fuck_func(6), 
delta=0x8F3779E9, sum=0xE6EF3D20;
    while (sum != 0) {
        v1 -= (((v0 > 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
        sum -= delta;
        v0 -= (((v1 > 5)) + v1) ^ (sum + key[sum & 3]);
    }
    v[0]=v0; v[1]=v1;
}
void encipher2(unsigned int num_rounds, uint32_t v[2], uint32_t const 
key[4]) {
    unsigned int i;
    uint32_t v0=v[0], v1=v[1], sum=0, delta=0x3d3529bc;
    while (num_rounds--) {
        sum += delta;
        v0 += ((v1 > 5) + key[1]) ^ (v1 + sum);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
        v1 += ((v0 > 5) + key[3]) ^ (v0 + sum);
        // v0 += (((v1 > 5)) + v1) ^ (sum + key[sum & 3]);
        // v1 += (((v0 > 5)) + v0) ^ (sum + key[(sum>>11) & 
3]);
    }
    // printf("%x %x\n",v0,v1);
    v[0]=v0 ^ fuck_func(7); v[1]=v1 ^ fuck_func(8);
}
void decipher2(unsigned int num_rounds, uint32_t v[2], uint32_t const 
key[4]) {
    unsigned int i;
    uint32_t v0=v[0]^ fuck_func(7), v1=v[1] ^ fuck_func(8), 
delta=0x3d3529bc, sum=delta * num_rounds;
    while (num_rounds -- ) {
        v1 -= ((v0 > 5) + key[3]) ^ (v0 + sum);
        v0 -= ((v1 > 5) + key[1]) ^ (v1 + sum);
        sum -= delta;
    }
    v[0]=v0; v[1]=v1;
}
int main()
{
    printf("%x\n",fuck_func(5));
    // unsigned char test[] = {0x72, 0x67, 0x30, 0x1F, 0x29, 0x0C, 0x5B, 
0xB7};
    // uint32_t *v = test;
    uint32_t v1[2]={0x1F306772,0xB75B0C29};
    uint32_t const k[4]=
{fuck_func(13),fuck_func(14),fuck_func(15),fuck_func(16)};
    unsigned int r=32;
    // printf("%x %x\n",v[0],v[1]);
    // encipher1(r, v, k);
    // printf("%x %x\n",v[0],v[1]);
    // uint32_t v[2]={0xaaaaaaaa,0xaaaaaaaa};
    // encipher2(r, v, k);
    // printf("%x %x ",v[0],v[1]);
    // decipher2(r, v, k);
    // printf("%x %x ",v[0],v[1]);
    decipher1(r, v1, k);
    printf("%08X%08X",v1[0],v1[1]);
    uint32_t v2[2]={0x4A7CDBE3,0x2877BDDF};
    decipher1(r, v2, k);
    printf("%08X%08X",v2[0],v2[1]);
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
Crypto
BabyAEG
先通过 PUSH 4;EQ 识别 bytecode 中的函数，分析 function ⼊⼝以及接下来的两个 next_block。
通过 CALLVALUE 区分 payable 函数；通过 CALLDATALOAD 区分输⼊参数与类型。
通过已知合约中的特征字符与⼊栈顺序定位 pika key。对合约 function 数量分情况讨论，发送并构造相应 
transacion。
opcodes.py
    uint32_t v3[2]={0x1354C485,0x357C3C3A};
    decipher2(r, v3, k);
    printf("%08X%08X",v3[0],v3[1]);
    uint32_t v4[2]={0x738AF06C,0x89B7F537};
    decipher2(r, v4, k);
    printf("%08X%08X",v4[0],v4[1]);
    return 0;
}
82
83
84
85
86
87
88
89
90
opcodes = {
    0x00: ('STOP', 0, 0, 0),
    0x01: ('ADD', 2, 1, 3),
    0x02: ('MUL', 2, 1, 5),
    0x03: ('SUB', 2, 1, 3),
    0x04: ('DIV', 2, 1, 5),
    0x05: ('SDIV', 2, 1, 5),
    0x06: ('MOD', 2, 1, 5),
    0x07: ('SMOD', 2, 1, 5),
    0x08: ('ADDMOD', 3, 1, 8),
    0x09: ('MULMOD', 3, 1, 8),
    0x0A: ('EXP', 2, 1, 10),
    0x0B: ('SIGNEXTEND', 2, 1, 5),
    0x10: ('LT', 2, 1, 3),
    0x11: ('GT', 2, 1, 3),
    0x12: ('SLT', 2, 1, 3),
    0x13: ('SGT', 2, 1, 3),
    0x14: ('EQ', 2, 1, 3),
    0x15: ('ISZERO', 1, 1, 3),
    0x16: ('AND', 2, 1, 3),
    0x17: ('OR', 2, 1, 3),
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
    0x18: ('XOR', 2, 1, 3),
    0x19: ('NOT', 1, 1, 3),
    0x1A: ('BYTE', 2, 1, 3),
    0x1B: ('SHL', 2, 1, 3),
    0x1C: ('SHR', 2, 1, 3),
    0x1D: ('SAR', 2, 1, 3),
    0x20: ('SHA3', 2, 1, 30),
    0x30: ('ADDRESS', 0, 1, 2),
    0x31: ('BALANCE', 1, 1, 20),
    0x32: ('ORIGIN', 0, 1, 2),
    0x33: ('CALLER', 0, 1, 2),
    0x34: ('CALLVALUE', 0, 1, 2),
    0x35: ('CALLDATALOAD', 1, 1, 3),
    0x36: ('CALLDATASIZE', 0, 1, 2),
    0x37: ('CALLDATACOPY', 3, 0, 3),
    0x38: ('CODESIZE', 0, 1, 2),
    0x39: ('CODECOPY', 3, 0, 3),
    0x3A: ('GASPRICE', 0, 1, 2),
    0x3B: ('EXTCODESIZE', 1, 1, 20),
    0x3C: ('EXTCODECOPY', 4, 0, 20),
    0x3D: ('RETURNDATASIZE', 0, 1, 2),
    0x3E: ('RETURNDATACOPY', 3, 0, 3),
    0x3F: ('EXTCODEHASH', 3, 0, 3),
    0x40: ('BLOCKHASH', 1, 1, 20),
    0x41: ('COINBASE', 0, 1, 2),
    0x42: ('TIMESTAMP', 0, 1, 2),
    0x43: ('NUMBER', 0, 1, 2),
    0x44: ('DIFFICULTY', 0, 1, 2),
    0x45: ('GASLIMIT', 0, 1, 2),
    0x46: ('CHAINID', 0, 1, 2),
    0x47: ('SELFBALANCE', 0, 1, 5),
    0x50: ("POP", 1, 0, 2),
    0x51: ("MLOAD", 1, 1, 3),
    0x52: ("MSTORE", 2, 0, 3),
    0x53: ("MSTORE8", 2, 0, 3),
    0x54: ("SLOAD", 1, 1, 50),  # 200 now
    0x55: ("SSTORE", 2, 0, 0),
    0x56: ("JUMP", 1, 0, 8),
    0x57: ("JUMPI", 2, 0, 10),
    0x58: ("PC", 0, 1, 2),
    0x59: ("MSIZE", 0, 1, 2),
    0x5A: ("GAS", 0, 1, 2),
    0x5B: ("JUMPDEST", 0, 0, 1),
    0x5C: ("BEGINSUB", 0, 0, 2),
    0x5D: ("RETURNSUB", 0, 0, 5),
    0x5E: ("JUMPSUB", 1, 0, 10),
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
    0xA0: ("LOG0", 2, 0, 375),
    0xA1: ("LOG1", 3, 0, 750),
    0xA2: ("LOG2", 4, 0, 1125),
    0xA3: ("LOG3", 5, 0, 1500),
    0xA4: ("LOG4", 6, 0, 1875),
    0xF0: ("CREATE", 3, 1, 32000),
    0xF1: ("CALL", 7, 1, 40),  # 700 now
    0xF2: ("CALLCODE", 7, 1, 40),  # 700 now
    0xF3: ("RETURN", 2, 0, 0),
    0xF4: ("DELEGATECALL", 6, 1, 40),  # 700 now
    0xF5: ("CREATE2", 3, 1, 32000),
    0xFA: ("STATICCALL", 6, 1, 40),
    0xFD: ("REVERT", 2, 0, 0),
    0xFF: ("SUICIDE", 1, 0, 0),
    0x60: ('PUSH1', 0, 1, 3),
    0x61: ('PUSH2', 0, 1, 3),
    0x62: ('PUSH3', 0, 1, 3),
    0x63: ('PUSH4', 0, 1, 3),
    0x64: ('PUSH5', 0, 1, 3),
    0x65: ('PUSH6', 0, 1, 3),
    102: ('PUSH7', 0, 1, 3),
    103: ('PUSH8', 0, 1, 3),
    104: ('PUSH9', 0, 1, 3),
    105: ('PUSH10', 0, 1, 3),
    106: ('PUSH11', 0, 1, 3),
    107: ('PUSH12', 0, 1, 3),
    108: ('PUSH13', 0, 1, 3),
    109: ('PUSH14', 0, 1, 3),
    110: ('PUSH15', 0, 1, 3),
    111: ('PUSH16', 0, 1, 3),
    112: ('PUSH17', 0, 1, 3),
    113: ('PUSH18', 0, 1, 3),
    114: ('PUSH19', 0, 1, 3),
    115: ('PUSH20', 0, 1, 3),
    116: ('PUSH21', 0, 1, 3),
    117: ('PUSH22', 0, 1, 3),
    118: ('PUSH23', 0, 1, 3),
    119: ('PUSH24', 0, 1, 3),
    120: ('PUSH25', 0, 1, 3),
    121: ('PUSH26', 0, 1, 3),
    122: ('PUSH27', 0, 1, 3),
    123: ('PUSH28', 0, 1, 3),
    124: ('PUSH29', 0, 1, 3),
    125: ('PUSH30', 0, 1, 3),
    126: ('PUSH31', 0, 1, 3),
    127: ('PUSH32', 0, 1, 3),
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
get_functions.py
    128: ('DUP1', 1, 2, 3),
    144: ('SWAP1', 2, 2, 3),
    129: ('DUP2', 2, 3, 3),
    145: ('SWAP2', 3, 3, 3), 130: ('DUP3', 3, 4, 3), 146: ('SWAP3', 4, 4, 
3), 131: ('DUP4', 4, 5, 3), 147: ('SWAP4', 5, 5, 3), 132: ('DUP5', 5, 6, 
3), 148: ('SWAP5', 6, 6, 3), 133: ('DUP6', 6, 7, 3), 149: ('SWAP6', 7, 7, 
3), 134: ('DUP7', 7, 8, 3), 150: ('SWAP7', 8, 8, 3), 135: ('DUP8', 8, 9, 
3), 151: ('SWAP8', 9, 9, 3), 136: ('DUP9', 9, 10, 3), 152: ('SWAP9', 10, 
10, 3), 137: ('DUP10', 10, 11, 3), 153: ('SWAP10', 11, 11, 3), 138: 
('DUP11', 11, 12, 3), 154: ('SWAP11', 12, 12, 3), 139: ('DUP12', 12, 13, 
3), 155: ('SWAP12', 13, 13, 3), 140: ('DUP13', 13, 14, 3), 156: ('SWAP13', 
14, 14, 3), 141: ('DUP14', 14, 15, 3), 157: ('SWAP14', 15, 15, 3), 142: 
('DUP15', 15, 16, 3), 158: ('SWAP15', 16, 16, 3), 143: ('DUP16', 16, 17, 
3), 159: ('SWAP16', 17, 17, 3)}
115
116
117
118
import re
from opcodes import opcodes
regex_PUSH = re.compile(r"^PUSH(\d*)$")
class EvmInstruction:
    """Model to hold the information of the disassembly."""
    def __init__(self, address, op_code, argument=None):
        self.address = address
        self.op_code = op_code
        self.argument = argument
    def to_dict(self) -> dict:
        """
        :return:
        """
        result = {"address": self.address, "opcode": self.op_code}
        if self.argument:
            result["argument"] = self.argument