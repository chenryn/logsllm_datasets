304
1,623
11,491
132,347
4
10
3
10
2
10
1
10
0
1
10
0
n   2
3
0
0
0
,
0
1
p
o
t
n
i
s
n
a
m
o
d
f
o
#
i
J a
3
1
0
3
1
0
y   2
M a
r   2
M a
J u l  2
3
1
0
3
1
0
3
1
0
n   2
J a
4
1
0
r   2
M a
4
1
0
v   2
o
N
p   2
e
S
date
P3P
XSS Protection
Content Type Options
Frame Options
HSTS
CORS
CSP
Fig. 1. Popularity of security headers in the Alexa Top 10K
Enforcement vs. Report-Only. During our crawl at the end of March, we
found 815 sites in enforcement mode, 35 sites in report-only mode, and no sites
that sent both types of headers. Out of the websites in enforcement mode, only
23 collected violation reports.
In the Top 10K, we observed only one site in report-only mode that later
switched to enforcement. The Norwegian ﬁnancial services site dnb.no started
collecting reports in June 2013, and enabled enforcement in February 2014. Their
enforced default-src directive consists of 74 sources, including the schemes
chrome-extension, chromeinvoke, and chromeinvokeimmediate. Furthermore,
unsafe-inline and unsafe-eval are both enabled. Therefore, this policy ap-
pears to provide little beneﬁt over not using CSP at all.
We noticed that several websites use CSP to test for mixed content. Mixed
content is the inclusion of unencrypted content into HTTPS sessions, which re-
duces the beneﬁt of encryption. Google’s sampling uses the following report-only
policy: default-src https: data:; options eval-script inline-script;
report-uri /gen 204?atyp=csp. Etsy also samples for mixed content; we found
Why Is CSP Failing? Trends and Challenges in CSP Adoption
219
CSP headers in nine out of 2,000 (0.45%) responses. Similarly, hootsuite.com
tested for mixed content from April 2013 to March 2014 for all responses, but
we observed no CSP headers after that.
Types of Sites Using CSP. To further understand the types of websites that
use CSP, we looked for similarities in website titles. The largest portion of sites
supporting CSP, 417, is due to phpMyAdmin, a PHP-based web application used
to manage MySQL databases. phpMyAdmin ships with CSP enabled by default,
which allows inline scripts, eval, and restricts sources to ‘self’. While this
policy does not prevent XSS, data exﬁltration is more diﬃcult. These rules can
be deployed as the software is fairly static. However, when conducting a search
for phpMyAdmin and CSP, we found users having trouble including images when
modifying their installations. The general solution oﬀered was to disable CSP in
the conﬁguration rather than updating the default policy.
Ironically, on the vendors’ demo site http://demo.phpmyadmin.net/master/,
the operators tried to include Google analytics. While the Google analytics do-
main is whitelisted using default-src, it is not in the script-src source list.
As speciﬁc directives override the default-src directive, the script is uninten-
tionally blocked.
We also found 170 OwnCloud instances, which uses CSP by default from
version 5.
Prevalence of Unsafe Policies. We identiﬁed several patterns in CSP policies
that violate deployment best practices as described in Section 2.2. In Table 3,
we summarize the observed rules in enforcement over the Alexa Top 1M from
March 24th. We split at the 10K rank to discriminate between more popular
websites and lower ranking ones. ‘*’ represents either the literal asterisk, or the
entire HTTP(S) scheme is whitelisted in one or more of the source lists.
On the majority of sites, eval and inline is enabled: eight out of 13 and 11 out
of 13 in the Top 10K bracket, 700 out of 802 and 728 out of 802 in the remaining
990,000 sites. This conﬁguration strongly reduces the beneﬁts of CSP for XSS
mitigation. Conﬁguring asterisk or a whole scheme as a source in a directive
enables data leakage to any host. Six out of 13 and 230 out of 802 websites
respectively served such directives. 10 out of 13 sites in the Top 10K bracket had
no report-uri to collect violation reports. This is surprising as CSP could be
used as a warning system.
While CSP in theory can eﬀectively mitigate XSS and data exﬁltration, in
practice CSP is not deployed in a way that provides these beneﬁts.
3.4 Conclusions
While some sites use CSP as an additional layer of protection against content
injection, CSP is not yet widely adopted. Furthermore, the rules observed in the
wild do not leverage the full beneﬁts of CSP. The majority of CSP-enabled web-
sites were installations of phpMyAdmin, which ships with a weak default policy.
Other recent security headers have gained far more traction than CSP, presum-
ably due to their relative ease of deployment. That only one site in the Alexa
220
M. Weissbacher, T. Lauinger, and W. Robertson
Table 3. Overview of enforced policies
Feature / Alexa Rank [1 − 104] (104 − 106]
unsafe-eval
unsafe-inline
script-src ‘self ’
no report-uri
#script-src > 10
* as source
Median #directives
Median #script sources
# CSP Policies
700
728
789
782
33
230
4
1
802
8
11
12
10
2
6
6
4
13
Top 10K switched from report-only mode to enforcement during our measure-
ment suggests that CSP rules cannot be easily derived from collected reports. It
could potentially help adoption if policies could be generated in an automated,
or semi-automated, fashion.
4 CSP Violation Reports
Web browsers compatible with CSP can be conﬁgured to report back to the
website whenever an activity, whether carried out or blocked, violates the site’s
policy. This is meant as a debugging mechanism for web operators, both to
develop policies from scratch, and to be informed when an existing policy needs
to be updated. Starting with a “deny all” policy in report-only mode, operators
can collect information about all resources that need to be whitelisted in order
for the site to function, compile a corresponding policy, and eventually switch to
enforcement mode. We applied this approach to four websites and analyzed the
reports that we received, gaining unexpected insights into the web ecosystem.
4.1 Background
CSP includes an optional report-uri directive that allows website operators to
specify a sink for violation reports. It is supported in both report-only and en-
forcement mode of CSP. As an illustration, consider the following policy: img-src
‘none’; report-uri /sink.cgi. When a user visits the URL http://seclab.nu/
test.html and that page includes the image resource http://seclab.nu/pic.gif,
the browser would send a report similar to the following one: {"blocked-uri":
"http://seclab.nu/pic.gif", "violated-directive": "img-src ‘none’",
"document-uri": "http://seclab.nu/test.html", ...}. From this report, the
developer can infer that the policy entry img-src http://seclab.nu should be
added to the policy.
Why Is CSP Failing? Trends and Challenges in CSP Adoption
221
4.2 Methodology
We deployed CSP on four of our own websites: two personal pages, an institutional
page, and a popular analysis service. The policies we used speciﬁed empty resource
lists for all supported directive types—that is, any browser activity covered by
CSP was explicitly forbidden and should generate a report. We deployed the poli-
cies in report-only mode to not interfere with the normal operation of the site.
Besides the additional CSP headers, the sites were not modiﬁed in any way.
During our analysis, we observed that the formats of reports sent by diﬀer-
ent browser versions varied slightly. Older Firefox versions, for instance, explic-
itly stated when a violation was due to the special cases ‘unsafe-inline’ or
‘unsafe-eval’ for script and style directives, as opposed to violations based on
a resource URI. All recent versions of browsers, however, reported only an empty
blocked-uri instead. Unfortunately, this format did not allow us to distinguish
between ‘unsafe-inline’ and ‘unsafe-eval’ script violations.
In order to work around this issue, we leveraged the fact that recent browser
versions supported multiple CSP headers in parallel. That is, in addition to the
regular policy discussed above that captured any CSP event, we added two more
policies that caused reports only for eval and inline violations, respectively:
default-src *; script-src * ’unsafe-inline’;
style-src * ’unsafe-inline’; report-uri /sink.cgi?type=eval
default-src *; script-src * ’unsafe-eval’;
style-src *; report-uri /sink.cgi?type=inline
We deployed all three policies and distinguished the reports we received using
the type parameter in the report URI. We removed duplicate eval and inline
violations that were reported for the regular policy (30 % on site D). Furthermore
we removed some violations reported for the eval and inline policies that were in
fact no eval or inline violations (1.8 % on site D). Those were triggered by a bug in
older Firefox versions that did not properly execute multiple policies in parallel.
Since newer Firefox versions were not aﬀected, the user agent distributions of
the original and the ﬁltered data set were very similar. Table 4 shows the number
of reports retained in the ﬁltered data set, which is the basis for the following
discussion.
From each report, we derive a policy entry that whitelists the respective vi-
olation. We extract the type, such as img-src, from the violated-directive.
For regular violations, we append the scheme, host name and port from the
blocked-uri, such as http://seclab.nu. For inline or eval violations, we ap-
pend ‘unsafe-inline’ or ‘unsafe-eval’. We generate a single policy per site
by combining all entries and set default-src ‘none’ to block everything else.
Our approach is to generate one single policy that is general enough to cover
the entire protected site. Such a site-wide policy is easier to generate than in-
dividual policies, since any similarity between pages on the same site reduces
the number of violation reports necessary to generate a policy. Furthermore,
site-wide policies are easier to conﬁgure; a site-wide reverse proxy could insert a
static policy into HTTP responses without the need to change application code.
222
M. Weissbacher, T. Lauinger, and W. Robertson
Table 4. Overview of the CSP violation report data sets received from our websites
in early 2014, after removing inconsistent reports
Site
Type
A
B
C
D
personal
personal
institutional
service
# Reports
Median Reports/Day
# IP Addresses
Median Reports/Addr.
1.1 K
9
78
7
21.8 K
671
1.6 K
7
48.0 K
2.1 K
1.2 K
28
7.1 M
348.5 K
14.4 K
85
% Reports/Browser
Chrome (mobile, derivatives) 46.6 (+5.4) 59.3 (+8.3)
Firefox (mobile, derivatives)
23.8 (+0.5) 22.2 (+0.6)
Safari (mobile)
2.3 (+3.5)
5.7 (+2.3)
Opera
Googlebot
0.5
15.1
0.3
3.1
54.3 (+3.7)
30.1 (+0.5)
4.1 (+3.7)
61.0 (+2.3)
30.3 (+0.2)
1.5 (+0.5)
0.6
2.0
1.9
2.1
4.3 Results
http://f.ssfiles.com
Table 5 summarizes the policies we generated for each of our sites. We veriﬁed man-
ually each entry in the policies and found that many of the whitelisted resources
were not actually intended to be included in the websites. The policy generated
for site A, for instance, is default-src ‘none’; frame-src https://srv.mzcdn.
com; img-src ‘self’ data: http://1.2.3.11; object-src http://www.
ajaxcdn.org; script-src ‘unsafe-eval’ ‘unsafe-inline’ http://ajax.
googleapis.com
http://i.bestoffersjs.info
http://srv.mzcdn.com http://www.superfish.com https://www.superfish.
com; style-src ‘unsafe-inline’. Yet, site A was entirely static and did not con-
tain any script at all. The correct policy for site A would have been default-src
‘none’; img-src ‘self’ data:; style-src ‘unsafe-inline’. In other words,
only 21 % of the policy entries generated from the received reports were legitimate.
On site D, only 2 % of the policy entries were legitimate. Furthermore, many
of the legitimate entries simply enumerated all the alternative domain names
of the same site (e.g., with or without the www subdomain), or they were due
to the same resource being loaded over HTTP or HTTPS. When disregarding
these details to allow for a fairer comparison, as noted in brackets in the table,
the percentage of legitimate policy entries drops to only 0.8 % on site D.
Reasons for Invalid Policy Entries. We identiﬁed a number of reasons why
web browsers sent CSP violation reports for resources that did not exist in the
original websites. Many of these reports appeared to be caused by browser exten-
sions that modiﬁed the DOM of the page by injecting additional resources such