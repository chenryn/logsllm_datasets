′
i =L
−1
i(cid:44)1 ∧
i(cid:44)1 ∧
1,1 , cpki−1)(cid:3)
(cid:2)e(y
2 )cski(cid:3)
1, j+1, cpki−1)(cid:3)
i)(cid:2)e(y
1, j+1, cpki−1)(cid:3)
2 )(cid:2)e(y
(cid:2)e(д
1 , cpki)(cid:3)
2,1 )(cid:2)e(д
1 , д2)cski(cid:3)
(cid:33)(cid:111)(sp, r
′
i, j+1)e(cpki−1, y
′
i)e(ai, j , д
−1
2, j +1)e(д
−1
1 , ai, j)
′
i, j+1, r
i =L ∧
′
i , t
(cid:33)
i(cid:44)1
i(cid:44)L
−1
−1
−1
−1
∧
′
1, . . . , r
′
L, m).
Figure 3: Efficient instantiation of the NIZK used to generate attribute tokens (witness underlined for clarity).
$← Zq and setting com ← e(д1, b)ρ and res ← д
proof that remove the need to compute any pairings. As a small
example, suppose we prove SPK{x : z = e(x, b)}. The standard way
$← G1, computing com ← e(rx , b),
to compute this is taking rx
c ← H(com, . . .), and resx ← rx · xc. We can compute the same
values without computing the pairing by precomputing e(д, b),
taking ρ
To prove knowledge of a Groth signature, we must prove z =
e(x, r′), where r′ is the randomized r-value of the Groth signature.
$← Zq, comx ←
If we try to apply the previous trick, we set ρx
e(д1, r′)ρx . However, now we cannot precompute e(д1, r′) since r′
is randomized before every proof. We can solve this by remember-
ing the randomness used to randomize the Groth signature. Let
r′ = r ρσ , we can compute comx ← e(д1, r)ρσ ·ρx by precomputing
e(д1, r). The full pseudocode for computing the proofs using these
optimizations is given in Fig. 4.
1 xc.
ρ
Verifying attribute tokens. In verification, computing pairings is
unavoidable, but there are still tricks to keep verification efficient.
The pairing function is typically instantiated with the tate pairing,
which consists of two parts: Miller’s algorithm ˆt(·) and the final
exponentiation fexp(·) [23]. Both parts account for roughly half the
time required to compute a pairing2. When computing the product
of multiple pairings, we can compute the Miller loop for every
pairing and then compute the final exponentiation only once for
the whole product. This means that computing the product of three
pairings is roughly equally expensive as computing two individual
pairings.
Fig. 5 shows how to verify attribute tokens efficiently using this
observation. When we write e(a, b) in the pseudocode, it means we
can precompute the value.
2We verified this by running bench_pair.c of the AMCL library (github.com/miracl/
amcl) using the BN254 curve.
5.3 Efficiency Analysis of Our Instantiation
We now analyze the efficiency of our construction. Namely, we
calculate the number of pairing operations and (multi-) exponen-
tiations in different groups that is required to compute and verify
attribute tokens. We also compute the size of credentials and at-
tribute tokens with respect to a delegation level and number of
attributes. We provide concrete timings for our prototype imple-
mentation in C that generates and verifies Level-2 attribute tokens
in Section 6.3.
Let di and ui denote the amount of disclosed and undisclosed
attributes at delegation level i, respectively, and we define ni =
di + ui.
Computational efficiency. Let us count the operations required
to compute and verify attribute tokens. For operations we use the
following notation. We use X{Gj
t} to denote
X j-multi-exponentiations in the respective group; j = 1 means
a simple exponentiation. We denote as Ek a k-pairing product
that we can compute with k-Miller loops and a single shared final
exponentiation.
Setup. During the setup, the issuer chooses its root issuer key isk
and computes ipk ← дisk2 , costing 1{G2}.
Delegation. Delegation of a credential includes generating a key
and a signature on the public key and a set of attributes:
2}, and X{Gj
1}, X{Gj
• for even i the cost is 1{G1} + (ni + 2){G2} + (ni + 1){G2
2},
• for odd i the cost is 1{G2} + (ni + 2){G1} + (ni + 1){G2
1}.
Signature verification for Level-i costs ni · E
3,
2 or E
depending on if the pairing with the public key was pre-computed
or not.
Computing attribute tokens (Presentation). Randomizing σi
costs (ni + 2)·{G1} + 1{G2} for odd i and 1{G1} +(ni + 2){G2} for
even i. Computing the com-values for Level-1 costs (1 + di){Gt} +
3 plus E
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA6921: input: ⟨ri , si , ⟨ti, j⟩n1+1
j=1 ⟩L
2: for i = 1, . . . , L do
$← Zq, r′
3:
4:
i =1, cskL, ⟨cpki⟩L
, s′
i ← s
ρσi
ρσi
i
for j = 1, . . . ni + 1 do
1 ← r
1
ρσi
i
i =1, ⟨ai, j⟩i =1, ...,L, j=1, ...,ni , D, sp, m
j=1⟩L
$← Zq
i =1, ⟨ρcpki
⟩L−1
i =1 , ρcskL
j=1 , ⟨ρai, j⟩ni
comi,1 ← e(д1, ri)ρσi ·ρsi(cid:2) · e(д−1
1 , д2)ρcpki−1(cid:3)
2 )ρcpki(cid:2) · e(y1,1, д2)ρcpki−1(cid:3)
comi, j+2 ← e(д1, ri)ρσi ·ρti, j +1(cid:2) · e(y1, j+1, д2)ρcpki−1(cid:3)
comi,2 ← e(д1, ri)ρσi ·ρti,1 · e(д1, д−1
for j = 1, . . . , ni do
if (i, j) ∈ D then
i(cid:44)1
i(cid:44)1
comi, j+2 ← e(д1, ri)ρσi ·ρti, j +1 · e(д1, д−1
2 )ρai, j(cid:2) · e(y1, j+1, д2)ρcpki−1(cid:3)
i(cid:44)1
comi,1 ← e(ri , д2)ρσi ·ρsi e(д1, д−1
comi,2 ← e(ri , д2)ρσi ·ρti,1 e(д1, y−1
for j = 1, . . . , ni do
if (i, j) ∈ D then
2 )ρcpki−1
2,1)ρcpki−1 e(д−1
1 , д2)ρcpki
comi, j +2 ← e(д1, y−1
comi, j+2 ← e(д1, y−1
2, j+1)ρcpki−1 · e(ri , д2)ρσi ·ρti, j +1
2, j+1)ρcpki−1 · e(ri , д2)ρσi ·ρti, j +1 · e(д−1
1 , д2)ρai, j
i , ⟨comi, j⟩ni +2
j=1 ⟩L
i =1, ⟨ai, j⟩(i, j)∈D , m)
ρcpki
,
sc
= д
1
i
(cid:2)rescpki
,(cid:2)rescski
cpkc
i
i(cid:44)L
(cid:3)
= ρcpki
+ c · cski
1
ρσi
i, j
t′
i, j ← t
else
else
end if
end for
end for
5:
6:
7: end for
8: ⟨ρsi , ⟨ρti, j⟩ni +1
9: for i = 1, 3, . . . , L do
10:
11:
12:
13:
14:
15:
16:
17:
18:
19: end for
20: for i = 2, 4, . . . , L do
21:
22:
23:
24:
25:
26:
27:
28:
29:
30: end for
31: c ← H(sp, ipk, ⟨r′
32: for i = 1, 3, . . . , L do
33:
34:
35:
36:
37:
38:
39:
40: end for
41: for i = 2, 4, . . . , L do
42:
43:
44:
45:
46:
47:
resai, j
end for
48:
49: end for
50: output: c, ⟨r′
resai, j
end for
end for
end if
ρti, j
= д
2
ρti, j
= д
1
ρsi2
ρsi1
sc
i
,
= д
ressi
for j = 1, . . . , ni + 1 do
tc
i, j
resti, j
end for
for j = 1, . . . , ni with (i, j) (cid:60) D do
ρai, j
= д
1
ac
i, j