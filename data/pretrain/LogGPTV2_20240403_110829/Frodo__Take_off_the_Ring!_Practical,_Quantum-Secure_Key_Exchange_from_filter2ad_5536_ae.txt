2:
3: C ← (cid:104)V(cid:105)2B
4: K ← (cid:98)V(cid:101)2B
5: K(cid:48) $← U ({0, 1}n·m·B)
6: b∗ $← U ({0, 1})
7: if b∗ = 0 return (A, B, B(cid:48), C, K)
8: else return (A, B, B(cid:48), C, K(cid:48))
Figure IV: Reductions for proof of Theorem 5.1.
Diﬀerence between Game 0 and Game 1. An adversary that can distinguish these two games
immediately leads to a distinguisher B0 for Gen:
|Pr(S0) − Pr(S1)| ≤ Advprf
Gen(B0) .
(2)
) × U(Zn×n
Game 2. In this game, Alice’s ephemeral public key B is generated uniformly at random, rather
than being generated from a sampler for the (n, n)-matrix decision LWE problem. Note that in
Game 2, the (remaining) LWE pairs are: (A, B(cid:48)) and (B, V) both with secret S(cid:48).
Diﬀerence between Game 1 and Game 2. In Game 1, (A, B) is a sample from Oχ,S. In Game
2, (A, B) is a sample from U(Zn×n
). Under the decision LWE assumption for (n, q, χ),
these two distributions are indistinguishable with a factor of n.
More explicitly, let B1 be the algorithm shown in Figure IV which takes as input a pair (A, B).
), then the output of B1 is distributed
When (A, B) is a sample from Oχ,S where S $← χ(Zn×n
exactly as in Game 1. When (A, B) is a sample from U(Zn×n
), then the output of B1
is distributed exactly as in Game 2. Thus, if A can distinguish Game 1 from Game 2, then A ◦ B1
can distinguish samples from Oχ,S from samples from U(Zn×n
|Pr(S1) − Pr(S2)| ≤ n · Advdlwe-ss
) × U(Zn×n
) × U(Zn×n
n,q,χ (A ◦ B1) .
). Thus,
(3)
q
q
q
q
q
q
q
Game 3. Game 3 is a simple rewrite of Game 2. Bob’s ephemeral public key B(cid:48) and shared secret
(cid:18)(cid:20)A(cid:62)
V are simultaneously generated from S(cid:48) rather than sequentially. In Game 3, the single LWE pair
with secret S(cid:48)(cid:62) is an instance of the (n + n, m)-matrix decision LWE problem.
(cid:20)B(cid:48)(cid:62)
(cid:21)(cid:19)
(cid:21)
,
B(cid:62)
V(cid:62)
Diﬀerence between Game 2 and Game 3. Since Game 3 is just a conceptual rewrite of Game
2, we have that
Pr(S2) = Pr(S3) .
(4)
Game 4. In Game 4, there are no LWE pairs. Bob’s ephemeral public key B(cid:48) and shared secret V
are generated uniformly at random, rather than simultaneously from S(cid:48).
Diﬀerence between Game 3 and Game 4. In Game 3, (cid:0)(cid:2)A(cid:107)B(cid:3) ,(cid:2)B(cid:48)(cid:107)V(cid:3)(cid:1) is (the transpose
(cid:0)(cid:2)A(cid:107)B(cid:3) ,(cid:2)B(cid:48)(cid:107)V(cid:3)(cid:1) is (the transpose of) a sample from U(Z(n+n)×n
In Game 4,
). Under the
decision LWE assumption for (n, q, χ), these two distributions are indistinguishable with a factor of
m.
of) a sample from oracle Oχ,S(cid:48) in the ((n + n), m)-matrix decision LWE problem.
) × U(Z(n+n)×m
q
q
16
q
q
More explicitly, let B2 be the algorithm shown in Figure IV that takes as input (Y, Z) ∈
Z(n+n)×n
× Zn×m
. When (Y, Z) is a sample from Oχ,S(cid:48)(cid:62) in the (n + n, m)-matrix decision LWE
), then the output of B2 is distributed exactly as in Game 3. When
$← χ(Zn×m
problem, where S(cid:48)
(Y, Z) is a sample from U(Z(n+n)×n
), the output of B2 is distributed exactly as in Game
4. If A can distinguish Game 3 from Game 4, then A ◦ B2 can distinguish samples from Oχ,S(cid:48) from
samples from U(Z(n+n)×n
)×U(Zn×m
q
q
q
q
). Thus,
) × U(Zn×m
|Pr(S3) − Pr(S4)| ≤ m · Advddh-like
q
n,q,χ (A ◦ B2) .
(5)
In Game 4, the adversary is asked to guess b∗ and thereby distinguish
Analysis of Game 4.
between K and K(cid:48). In Game 4, K(cid:48) is clearly generated uniformly at random from {0, 1}n·m·B. K is
generated from rounding V, and V is uniform, so K is too. The adversary is also given C, but by
Claim 3.1 we have that, for uniform V, K = (cid:98)V(cid:101)2B remains uniform even given C = (cid:104)V(cid:105)2B. Thus,
the adversary has no information about b∗, and hence
Pr(S4) = 1/2 .
(6)
Conclusion. Combining equations (1)–(6) yields the result.
5.3 Security when used in TLS
The accepted model for security of secure channel protocols such as TLS is Jager et al.’s authenti-
cated and conﬁdential channel establishment (ACCE) model [38]. Bos et al. [14] show that a TLS
ciphersuite that uses signatures for authentication and a key exchange mechanism that satisﬁes the
ddh-like security property (§5.2) achieves the ACCE security notion. Since our Theorem 5.1 shows
that the LWE-based protocol has ddh-like-security, we immediately (modulo a small change of no-
tation) inherit ACCE security of the resulting signed-DH-like ciphersuite using LWE key exchange.
Bos et al. note that their result requires that a change be made in the TLS protocol: the server’s
signature must be moved later in the handshake and must include the full transcript. This is to be
able to rely on a plain decisional assumption, rather than an “oracle” assumption (PRF-ODH) that
was required in Jager et al.’s proof; we inherit this requirement as well.
Alternatively, one could leave the signature in place and use an IND-CCCA-secure key encap-
sulation mechanism following Krawczyk et al. [42], constructed via standard constructions such as
[31], albeit at the expense of increasing the number of bits transmitted.
6
Implementation
In this section we discuss two aspects of our implementation: representing matrix elements and
generating the public matrix A. Matrix operations in our implementation use the straightforward
approach, i.e., the product of an n × m matrix and an m × p matrix incurs nmp multiplications
and O(nmp) additions. We make this choice because our matrix dimensions are not large enough
for the asymptotically faster methods [62, 23] to oﬀer a worthwhile trade-oﬀ (see [25]).
Representing matrix elements. All parameter sets in Table 2 have q = 2x < 216. To facilitate
an eﬃcient implementation, we use a redundant representation: matrix entries are represented as
elements from Z216 = Z/(216−xq)Z instead of Zq. This has the advantage that, when elements are
stored in 16-bit datatypes, all arithmetic is performed modulo 216 for free (implicitly). Converting
17
from this redundant representation to elements in Zq is as simple as ignoring the 16 − x most
signiﬁcant bits, which amounts to a single bitwise AND instruction.
The exchanged matrices B, B(cid:48), and C are packed down to their optimal representation. The
computational overhead due to packing and unpacking is outweighed by savings in communication
complexity.
Generating the matrix A. The matrix A ∈ Zn×n
is a public parameter used by both parties
in the key exchange. It could be taken as a ﬁxed system parameter, saving this communication
eﬀort between parties. This approach was taken in [14] in the ring setting, where the polynomial
a was ﬁxed system wide. However, as discussed in Section 3 of [6], such a choice raises questions
about possible backdoors and all-for-the-price-of-one attacks. Therefore, the scheme in [6] generates
a fresh polynomial a from a uniformly random seed for every instantiation of the key exchange.
q
Here we adopt a similar approach and propose that the server choose a fresh seed for every new
key exchange instance, and that A be generated pseudorandomly from this seed. The seed is sent to
the client in the ServerKeyExchange message (see Figure I) and allows the client to pseudorandomly
generate the same A. The matrix A is generated from a 16-byte seed using AES128 in the ECB
mode. Substituting a randomly sampled matrix with the one derived in this manner can be justiﬁed
by appealing to the random oracle heuristic; exploring its applicability in our context against a
quantum adversary is an interesting open question.
Depending on the architecture, particularly for memory-constrained embedded devices, storing
the matrix A in its entirety and loading it into memory for matrix multiplication might be too
costly. In such scenarios, we propose to generate, use and discard parts of the matrix A on-the-ﬂy.
To facilitate on-the-ﬂy matrix generation by both the client and the server, we pursue the
following approach. The matrix A is derived by applying AES128-ECB to pre-ﬁlled matrix rows
with guaranteed uniqueness.2 The matrix thus deﬁned can be computed either by rows, one row
at a time, or by columns, 8 columns at a time, depending on whether A is multiplied by S on the
right (client-side) or on the left (server-side). The cost of this pseudorandom generation can be a
signiﬁcant burden and can be amortized by relaxing the requirement for a fresh A in every new key
exchange (e.g., by allowing A to be cached on the server for a limited time).
7 Evaluation
We evaluate the performance of LWE-based key exchange on the following characteristics: 1) speed
of standalone cryptographic operations; 2) speed of HTTPS connections; 3) communication costs.
Our LWE implementation is written in C and the implementation is as described in §6. In this
section, we report the results of our implementation of LWE-based key exchange and compare our
results with several other post-quantum primitives.
We selected the following post-quantum algorithms with publicly available implementations:
• BCNS R-LWE key exchange, C implementation [14];
• NewHope R-LWE key exchange, C implementation [6];
• NTRU public key encryption key transport using parameter set EES743EP1, C implementation
• SIDH (supersingular isogeny Diﬃe–Hellman) key exchange, C implementation [24].
[64]; and
The implementation of Bernstein et al.’s “McBits” high-speed code-based cryptosystem [13] was not
publicly available at the time of writing. We also included OpenSSL’s implementation of ECDH (on
the nistp256 curve) and RSA with a 3072-bit modulus for comparisons against widely deployed
2Our implementation uses the AES-NI instruction set where supported.
18
Scheme
Claimed security
classical quantum
Alice0
(ms)
—
Bob
(ms)
Alice1
(ms)
Communication (bytes)
A→B
387 / 0∗
B→A
384
32
32
0.366 ± 0.006
1.01 ± 0.006
0.112 ± 0.003
2.00 ± 0.055
135 ± 1.91
1.13 ± 0.09
1.25 ± 0.02
0.09 ± 0.004
0.698 ± 0.014
1.59 ± 0.007
0.164 ± 0.001
0.281 ± 0.047
464 ± 6.74
1.34 ± 0.02
1.64 ± 0.03
4.49 ± 0.005
0.331 ± 0.01
0.174 ± 0.001
0.034 ± 0.001
0.148 ± 0.005
301 ± 0.97
0.13 ± 0.01
0.15 ± 0.01
RSA 3072-bit
ECDH nistp256
BCNS
NewHope
NTRU EES743EP1
SIDH
Frodo Recomm.
Frodo Paranoid
Table 4: Performance of standalone cryptographic operations, showing mean runtime (± standard
deviation) in milliseconds of standalone cryptographic operations, communication sizes (public key
/ messages) in bytes, and claimed security level in bits. ∗In TLS, the RSA public key is already
included in the server’s certiﬁcate message, so RSA key transport imposes no additional communi-
cation from server to client.
—
—
76
206
128
128
130
161
128
128
163
229
256
192
144
177
4,224