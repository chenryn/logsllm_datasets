with probability 1 (cid:0) 2
(cid:0)O(s) if the two checks pass. As the checks are independent of the real input of
the receiver, indistinguishability of the hybrids follow.
Claim 5.6
View(cid:5)H
2;8(cid:20)2 ;S
2;8(cid:20)2 ;Z ((cid:20))
(cid:20)2N
View(cid:5)H3 ;S3;Z ((cid:20))
(cid:20)2N.
}
s(cid:25){
}
Hybrid H4: In this hybrid, S4 proceeds identically to S3 with the exception that the simulator sets the
receiver’s input in the main execution as 0 instead of the real input b. Finally, it reconstructs sb and
sets that as the honest receiver’s output. It follows from Lemma 5.1 that the output of H3 and H4 are
statistically-close. Therefore, we have the following claim,
Claim 5.7
View(cid:5)H3 ;S3;Z ((cid:20))
(cid:20)2N
View(cid:5)H4 ;S4;Z ((cid:20))
(cid:20)2N.
Hybrid H5: In this hybrid, we consider the simulation. Observe that our simulator proceeds identi-
cally to the simulation with S4 with the exception that it communicates with FgWRAP instead of
creating/sending the tokens by itself and further it feeds the extracted values s0 and s1 to the ideal
functionality while S4 instead just outputs sb. Furthermore, the ideal simulator sends (s0; s1) to the
FOT functionality. It follows from our simulation that the view of the adversary in H5 and the ideal
execution are identically distributed. Furthermore, for both b = 0 and b = 1 we know that the value sb
extracted by the simulator and the value output by the honest receiver in the ideal execution are equal.
Therefore, we can conclude that the output of H4 and the ideal execution are identically distributed.
Claim 5.8
View(cid:5)H4 ;S4;Z ((cid:20))
View
FOT
(cid:25)IDEAL;S;Z ((cid:20))
(cid:20)2N:
}
s(cid:25){
}
(cid:20)2N (cid:25){
{
{
{
}
}
Simulating the corrupted R. We begin by describing our simulation:
1. S communicates with FgWRAP on behalf of the honest parties by sending create messages f(Create; sid; S; R;
midl; M1)gl2[3(cid:20)], where the code M1 implements truly random functions (that is, M1 is encoded with
a lookup table that includes some polynomial number of queries bounded by the running time of the
adversary). Then FgWRAP forwards these tokens by sending receipt messages f(Receipt; sid; S; R;
midl; M1)gl2[3(cid:20)] to A. For each query u 2 f0; 1g5(cid:20) made by A to the tokens TKPRF;l
, functionality
FgWRAP runs M1 on that query and returns a random v from f0; 1g(cid:20).
S
2. A communicates with FgWRAP on behalf of the corrupted parties by sending create messages to the
functionality f(Create; sid; R; S; midl′; M2)gl′2[8(cid:20)2]. Then, the functionality FgWRAP forwards these
tokens to the honest parties by sending receipt messages f(Receipt; sid; R; S; midl′; M2)gl′2[8(cid:20)2].
42
3. Upon receiving acknowledgement messages f(Receipt; sid; R; S; midl′; M2)gl′2[8(cid:20)2] that all [8(cid:20)2] to-
kens have been created by A, and upon receiving the ﬁrst message from A, i.e.
the commitments
combj and comci where i 2 [(cid:20)] and j 2 [2(cid:20)], S tries to extract b by sending a retrieve message
(retreive; sid) to FgWRAP which returns the list Qsid of illegitimate queries. For this, just as in pre-
vious simulations, it ﬁrst extracts all the bj values and then sets the receiver’s input as that bit that
occurs at least (cid:20) + 1 times among the bj’s. If no such bit exists, it sets b to be random. Next it sends b
to the FOT functionality to obtain sb, and completes the protocol following the honest sender’s code
with inputs (s0; s1) where s1(cid:0)b is set to random. In particular, it computes Cb = xb (cid:8) sb and sets
C1(cid:0)b to a random string.
Next, we sketch the correctness of our simulation in the following lemma.
Lemma 5.9
View
FgWRAP
OT ;A;Z ((cid:20))
(cid:5)GUC
(cid:20)2N
View
FOT
(cid:25)IDEAL;S;Z ((cid:20))
(cid:20)2N:
}
c(cid:25){
{
}
}
Proof: Our proof follows by a sequence of hybrid executions deﬁned below.
Hybrid H0: In this hybrid game there is no trusted party that computes functionality FOT. Instead, we
deﬁne a simulator S0 that receives the real input of the sender and internally emulates the protocol
OT with the adversary A by simply following the honest sender’s strategy. Finally, the output of
(cid:5)GUC
the sender in the internal emulation is just sent to the external honest sender (as part of the protocol
(cid:5)H0) that outputs it as its output. Now, since the execution in this hybrid proceeds identically to the
real execution, we have the following claim,
{
}
(cid:20)2N (cid:25){
Claim 5.10
View
FgWRAP
OT ;A;Z ((cid:20))
(cid:5)GUC
View(cid:5)H0 ;S0;Z ((cid:20))
(cid:20)2N.
Hybrids H1;0 : : : ; H1;3(cid:20): We deﬁne a collection of hybrid executions such that for every l 2 [3(cid:20)] hybrid
H1;l is deﬁned as follows. We modify the code of token TKPRF;l
by replacing the function PRF(cid:13)l with
a truly random function fl. In particular, given a query u the token responds with a randomly chosen
(cid:20) bit string v, rather than running the original code of M1. We maintain a list of A’s queries and
responses so that repeated queries will be consistently answered. In addition, the code of token TKl
(for l (cid:20) 2(cid:20)) or cTKl(cid:0)2(cid:20) (for 2(cid:20) + 1 (cid:20) l (cid:20) 3(cid:20)) is modiﬁed, as now this token does not run a check with
S
S
respect to the PRF that is embedded within token TKPRF;l
but with respect to the random function
fl.
It is simple to verify that the adversary’s view in every two consecutive hybrid executions is
computationally indistinguishable due to the security of the pseudorandom function PRF(cid:13)l. Moreover,
since the PRF key is hidden from the receiver, it follows from the pseudorandomness property that
the views in every two consecutive hybrid are computationally indistinguishable. As in the previous
hybrid, the simulator hands the output of the sender in the internal emulation to the external receiver
as part of the protocol (cid:5)H1;l. More formally, we have the following claim,
Claim 5.11 For every l 2 [3(cid:20)],
c(cid:25){
{
}
}
View(cid:5)H1;l(cid:0)1
;S1;l(cid:0)1;Z ((cid:20))
(cid:20)2N
View(cid:5)H1;l
;S1;l;Z ((cid:20))
(cid:20)2N.
Hybrids H2;0 : : : ; H2;3(cid:20): This sequence of hybrids executions is identical to hybrid H1;3(cid:20) except that here
results in the same response. Using a proof
S2 aborts if two queries made by A to the token TKPRF;l
analogous to Lemma 4.10, we obtain the following claim.
S
43
Claim 5.12 For every l 2 [3(cid:20)],
{
View(cid:5)H2;l(cid:0)1
}
;S2;l(cid:0)1;Z ((cid:20))
(cid:20)2N
s(cid:25){
View(cid:5)H2;l
}
(cid:20)2N.
;S2;l;Z ((cid:20))
Hybrid H3: In this hybrid execution, simulator S3 plays the role of the sender as in hybrid H2;3(cid:20) except
that it extracts the adversary’s input bit b as carried out in the simulation by S and the challenge string
c. Clearly, this does not make any difference to the receiver’s view which implies that,
}
s(cid:25){
}
Claim 5.13
View(cid:5)H2;3(cid:20) ;S2;3(cid:20);Z ((cid:20))
(cid:20)2N
View(cid:5)H3 ;S3;Z ((cid:20))
(cid:20)2N.
Hybrid H4: In this hybrid execution, the simulator instead of creating the original tokens fTKjgj2[2(cid:20)],
queried on (bj; decombj ) and decombj is veriﬁed correctly, S4 outputs the column
simulator S4 emulates functionalities ffTKjgj2[2(cid:20)] in the following way. For all j 2 [2(cid:20)], if fTKj is
where bj is the bit extracted by S4 as in the prior hybrid. Otherwise, if fTKj is queried on (1 (cid:0)
(Abj [(cid:1); j]; decomAbj [(cid:1);j]; Bbj [(cid:1); j]; decomBbj [(cid:1);j])
bj; decom1(cid:0)bj ) then S4 outputs ?. Following the same argument as in Claim 4.11 it follows that
the commitments made by the receiver are binding and thus a receiver will not be able to produce
decommitments to obtain the value corresponding to 1 (cid:0) bj. Therefore, we have the following claim.
(cid:20)2N
Claim 5.14
View(cid:5)H3 ;S3;Z ((cid:20))
Hybrid H5: In this hybrid execution, instead of creating the original tokens fcTKigi2[(cid:20)], simulator S5 emu-
lates functionalities fTKigi2[(cid:20)] in the following way. For all i 2 [(cid:20)], if TKi is queried on (ci; decomci)
and decomci is veriﬁed correctly, S5 outputs the row
View(cid:5)H4 ;S4;Z ((cid:20))
(cid:20)2N.
(A0[i;(cid:1)]; decomA0[i;(cid:1)]; A1[i;(cid:1)]; decomAi[i;(cid:1)]);
(B0[i;(cid:1)]; decomB0[i;(cid:1)]; B1[i;(cid:1)]; decomBi[i;(cid:1)]);
if ci = 0
if ci = 1
where ci is the bit extracted by S5 as in the prior hybrid. Otherwise, if TKi is queried on (1 (cid:0)
ci; decom1(cid:0)ci) then S5 outputs ?. Indistinguishability follows using the same argument as in the
previous hybrid. Therefore, we have the following claim.
Claim 5.15
View(cid:5)H4 ;S4;Z ((cid:20))
(cid:20)2N
View(cid:5)H5 ;S5;Z ((cid:20))
(cid:20)2N.
Hybrid H6: In this hybrid, the simulator S6 chooses an independent random string x
(cid:3)   Zp instead
of generating the matrices A1(cid:0)b and B1(cid:0)b according to the shares of x1(cid:0)b. We remark that C1(cid:0)b =
s1(cid:0)b (cid:8) x1(cid:0)b is still computed as in H5 with x1(cid:0)b.
Claim 5.16
View(cid:5)H5 ;S5;Z ((cid:20))
(cid:20)2N
View(cid:5)H6 ;S6;Z ((cid:20))
(cid:20)2N:
entries whose decommitments have been removed both in TK and fTK as described in hybrids H4 and
Proof: Let ~A1(cid:0)b; ~B1(cid:0)b contain the same entries as A1(cid:0)b; B1(cid:0)b in H5 with the exception that the
{
{
{
{
}
}
}
}
}
}
s(cid:25){
s(cid:25){
s(cid:25){
44
H5 are set to ?. More precisely, given the extracted values for bj’s and ci’s, for every j 2 [2(cid:20)] such
that bj = b, ~A1(cid:0)b(i; j) = ? if ci = 1 and ~B1(cid:0)b(i; j) = ? if ci = 0 for all i 2 [(cid:20)].
Observe that, for every i; j, either ~A1(cid:0)b[i; j] = A1(cid:0)b[i; j] or ~A1(cid:0)b[i; j] = ?. The same holds for the
~B1(cid:0)b. We claim that the information of at most (cid:20) shares of x1(cid:0)b is present in matrices ~A1(cid:0)b; ~B1(cid:0)b.
To this end, for every column j such that bj ̸= 1 (cid:0) b and for every row i, depending on ci, either
~A1(cid:0)b[i; j] = ?, or ~B1(cid:0)b[i; j] = ?. For every pair i; j, since A1(cid:0)b[i; j] and B1(cid:0)b[i; j] are both
uniformly distributed, obtaining the value for at most one of them keeps A1(cid:0)b[i; j] + B1(cid:0)b[i; j] sta-
tistically hidden. Now, since bj ̸= 1 (cid:0) b for at least (cid:20) + 1 shares, it follows that at least (cid:20) + 1 shares
of x1(cid:0)b are hidden. In other words, at most (cid:20) shares of x1(cid:0)b can be obtained by the receiver in H5.
(cid:3) are obtained in H6. From our secret-sharing scheme, it follows
Analogously at most (cid:20) shares of x
that (cid:20) shares information theoretically hides the value. Therefore, the decommitments obtained by
the receiver in H5 and H6 and identically distributed. The claim now follows from the fact that the
(cid:3)
commitments to the matrices (comA0; comB0; comA1; comB1) are statistically-hiding.
Hybrid H7: In this hybrid execution simulator S7 does not know the sender’s inputs (s0; s1), but rather
communicates with a trusted party that computes FOT. S7 behaves exactly as S6, except that when
extracting the bit b, it sends it to the trusted party which sends back sb. Moreover, S7 uses random
values for s1(cid:0)b and C1(cid:0)b. Note that since the value committed to in the matrices corresponding to
1(cid:0) b is independent of x1(cid:0)b, this hybrid is identically distributed to the previous hybrid. We conclude
with the following claim.
Claim 5.17
View(cid:5)H6 ;S6;Z ((cid:20))
Hybrid H8: In this hybrid execution, tokens fTKjgj2[2(cid:20)] are created instead of tokens ffTKjgj2[2(cid:20)]. In
addition, tokens fcTKigi2[(cid:20)] are created instead of tokens ffTKigi2[(cid:20)]. Due to similar claims as above,
View(cid:5)H7 ;S7;Z ((cid:20))
(cid:20)2N:
{
}