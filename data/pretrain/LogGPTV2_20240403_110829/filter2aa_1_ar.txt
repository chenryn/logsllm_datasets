    You’ve probably realized by now that good recon is an extensive process. But it doesn’t have to be time-consuming or hard to manage. We’ve already discussed several tools that use the power of automation to make the process easier.
    你可能已经意识到了，良好的侦察是一个复杂的过程。但是它并不一定需要耗费大量的时间或难以管理。我们已经讨论了几种利用自动化技术来简化这一过程的工具。
    Sometimes you may find it handy to write your own scripts. A
     script
    is a list of commands designed to be executed by a program. They’re used to automate tasks such as data analysis, web-page generation, and system administration. For us bug bounty hunters, scripting is a way of quickly and efficiently performing recon, testing, and exploitation. For example, you could write a script to scan a target for new subdomains, or enumerate potentially sensitive files and directories on a server. Once you’ve learned how to script, the possibilities are endless.
    有时候你可能会发现编写自己的脚本很方便。脚本是一组命令的列表，旨在通过程序执行。它们用于自动化数据分析、网页生成和系统管理等任务。对于我们这些漏洞赏金猎人来说，脚本是一种快速高效地执行侦察、测试和利用的方式。例如，你可以编写一个脚本来扫描目标找出新的子域名，或者在服务器上枚举潜在的敏感文件和目录。一旦你学会了如何编写脚本，可能性就是无限的。
    This section covers bash scripts in particular—what they are and why you should use them. You’ll learn how to use bash to simplify your recon process and even write your own tools. I’ll assume that you have basic knowledge of how programming languages work, including variables, conditionals, loops, and functions, so if you’re not familiar with these concepts, please take an introduction to coding class at Codecademy (
     https://www.codecademy.com/
    ) or read a programming book.
    本节特别介绍bash脚本，包括其定义和使用的原因。您将学习如何使用bash简化您的侦察过程，甚至编写自己的工具。我假定您对编程语言的基本知识有所了解，包括变量、条件、循环和函数，如果您对这些概念不熟悉，请参加Codecademy（https://www.codecademy.com/）的编程入门课程或阅读编程书籍。
    Bash scripts, or any type of shell script, are useful for managing complexities and automating recurrent tasks. If your commands involve multiple input parameters, or if the input of one command depends on the output of another, entering it all manually could get complicated quickly and increase the chance of a programming mistake. On the other hand, you might have a list of commands that you want to execute many, many times. Scripts are useful here, as they save you the trouble of typing the same commands over and over again. Just run the script each time and be done with it.
    Bash脚本或任何类型的shell脚本，都有助于管理复杂性并自动化重复任务。如果您的命令涉及多个输入参数，或者一个命令的输入取决于另一个命令的输出，手动输入这些内容可能会很复杂，增加编程错误的机会。另一方面，您可能有一系列命令需要执行很多次。在这种情况下，脚本非常有用，因为它们可以让您省去反复输入相同命令的麻烦。只需每次运行脚本即可完成任务。
    Understanding Bash Scripting Basics
    Let’s write our first script. Open any text editor to follow along. The first line of every shell script you write should be the
     shebang
     line
    . It starts with a hash mark (
     #
    ) and an exclamation mark (
     !
    ), and it declares the interpreter to use for the script. This allows the plaintext file to be executed like a binary. We’ll use it to indicate that we’re using bash.
    让我们写我们的第一个脚本。打开任何文本编辑器进行跟随。你写的每个 shell 脚本的第一行应该是 shebang 行。它以井号 (#) 和感叹号 (!) 开头，并声明要用于脚本的解释器。这允许纯文本文件像二进制文件一样被执行。我们将使用它来表示我们正在使用 bash。
    Let’s say we want to write a script that executes two commands; it should run Nmap and then Dirsearch on a target. We can put the commands in the script like this:
    假设我们想编写一个脚本，执行两个命令；它应该在目标上运行Nmap，然后在其中运行Dirsearch。我们可以像这样将命令放入脚本中：
#!/bin/bash
nmap scanme.nmap.org
/PATH/TO/dirsearch.py -u scanme.nmap.org -e php
    This script isn’t very useful; it can scan only one site,
     scanme.nmap.org
    . Instead, we should let users provide input arguments to the bash script so they can choose the site to scan. In bash syntax,
     $1
    represents the first argument passed in,
     $2
    is the second argument, and so on. Also,
     $@
    represents all arguments passed in, while
     $#
    represents the total number of arguments. Let’s allow users to specify their targets with the first input argument, assigned to the variable
     $1
    :
    这个脚本并不是非常有用，它只能扫描一个网站，scanme.nmap.org。相反，我们应该让用户提供输入参数来控制 bash 脚本，这样他们就可以选择要扫描的网站。在 bash 语法中，$1 表示传递的第一个参数，$2 为第二个参数，以此类推。同时，$@ 表示所有传入的参数，而 $# 表示参数的总数。让我们允许用户使用第一个输入参数来指定他们的目标，并将其分配给变量 $1：
#!/bin/bash
nmap $1
/PATH/TO/dirsearch.py -u $1 -e php
    Now the commands will execute for whatever domain the user passes in as the first argument.
    现在，命令将针对用户作为第一个参数传递的任何域执行。
    Notice that the third line of the script includes
     /PATH/TO/dirsearch.py
    . You should replace
     /PATH/TO/
    with the absolute path of the directory where you stored the Dirsearch script. If you don’t specify its location, your computer will try to look for it in the current directory, and unless you stored the Dirsearch file in the same directory as your shell script, bash won’t find it.
    请注意脚本的第三行包括 /PATH/TO/dirsearch.py。你应该用 Dirsearch 脚本所在的目录的绝对路径替换 /PATH/TO/。如果你不指定其位置，你的计算机将尝试在当前目录中寻找它，除非你将 Dirsearch 文件存储在与你的 shell 脚本相同的目录中，否则 bash 将找不到它。
    Another way of making sure that your script can find the commands to use is through the
     PATH
    variable, an environmental variable in Unix systems that specifies where executable binaries are found. If you run this command to add Dirsearch’s directory to your
     PATH
    , you can run the tool from anywhere without needing to specify its absolute path:
    你可以通过PATH变量来确保你的脚本可以找到要使用的命令。在Unix系统中，它是一个环境变量，指定了可执行二进制文件的位置。如果你运行这个命令将Dirsearch的目录添加到PATH中，你就可以在任何地方运行该工具，而无需指定其绝对路径。
export PATH="PATH_TO_DIRSEARCH:$PATH"
    After executing this command, you should be able to use Dirsearch directly:
    执行此命令后，您应该能够直接使用Dirsearch:
#!/bin/bash
nmap $1
dirsearch.py -u $1 -e php
    Note that you will have to run the
     export
    command again after you restart your terminal for your
     PATH
    to contain the path to Dirsearch. If you don’t want to export
     PATH
    over and over again, you can add the
     export
    command to your
     ~/
     .bash_profile
    file, a file that stores your bash preferences and configuration. You can do this by opening
     ~/.bash_profile
    with your favorite text editor and adding the
     export
    command to the bottom of the file.
    请注意，重启终端后，您必须再次运行导出命令，以便您的PATH包含Dirsearch路径。如果您不想一遍又一遍地导出PATH，您可以将导出命令添加到~/.bash_profile文件中，这是一个存储bash偏好和配置的文件。您可以通过用您喜欢的文本编辑器打开~/.bash_profile，并将导出命令添加到文件底部来实现这一点。
    The script is complete! Save it in your current directory with the filename
     recon.sh
    . The
     .sh
    extension is the conventional extension for shell scripts. Make sure your terminal’s working directory is the same as the one where you’ve stored your script by running the command
     cd /
     location
     /
     of
     /
     your
     /
     script
    . Execute the script in the terminal with this command:
    脚本完成了！请将其保存在当前目录中，文件名为recon.sh。 .sh 扩展名是 shell 脚本的传统扩展名。确保您终端的工作目录与存储脚本的目录相同，方法是运行命令 cd /location/of/your/script。执行此命令在终端中运行脚本：
$ ./recon.sh
    You might see a message like this:
    “您可能会看到这样的消息：” 
(Note: This is the translated content in Simplified Chinese)
permission denied: ./recon.sh
    This is because the current user doesn’t have permission to execute the script. For security purposes, most files aren’t executable by default. You can correct this behavior by adding executing rights for everyone by running this command in the terminal:
    这是因为当前用户没有执行脚本的权限。出于安全考虑，大多数文件默认情况下都不可执行。您可以通过在终端中运行此命令为所有人添加执行权限来更正此行为：
$ chmod +x recon.sh
    The
     chmod
    command edits the permissions for a file, and
     +x
    indicates that we want to add the permission to execute for all users. If you’d like to grant executing rights for the owner of the script only, use this command instead:
    "chmod命令用于编辑文件的权限，+x表示我们希望为所有用户添加执行权限。如果您只想授予脚本所有者执行权限，请改用此命令："
“chmod命令编辑文件权限，+x表示我们想要为所有用户添加执行权限。如果您只想授予脚本所有者执行权限，请使用此命令：”
$ chmod 700 recon.sh
    Now run the script as we did before. Try passing in
     scanme.nmap.org
    as the first argument. You should see the output of the Nmap and Dirsearch printed out:
    现在像之前一样运行脚本。尝试将scanme.nmap.org作为第一个参数传递。你应该会看到Nmap和Dirsearch的输出被打印出来：
$ ./recon.sh scanme.nmap.org
Starting Nmap 7.60 ( https://nmap.org )
Nmap scan report for scanme.nmap.org (45.33.32.156)
Host is up (0.062s latency).
Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2f
Not shown: 992 closed ports
PORT      STATE    SERVICE
22/tcp    open     ssh
25/tcp    filtered smtp
80/tcp    open     http
135/tcp   filtered msrpc
139/tcp   filtered netbios-ssn
445/tcp   filtered microsoft-ds
9929/tcp  open     nping-echo
31337/tcp open     Elite
Nmap done: 1 IP address (1 host up) scanned in 2.16 seconds
Extensions: php | HTTP method: get | Threads: 10 | Wordlist size: 6023
Error Log: /Users/vickieli/tools/dirsearch/logs/errors.log
Target: scanme.nmap.org
[11:14:30] Starting:
[11:14:32] 403 -  295B  - /.htaccessOLD2
[11:14:32] 403 -  294B  - /.htaccessOLD
[11:14:33] 301 -  316B  - /.svn  ->  http://scanme.nmap.org/.svn/
[11:14:33] 403 -  298B  - /.svn/all-wcprops
[11:14:33] 403 -  294B  - /.svn/entries
[11:14:33] 403 -  297B  - /.svn/prop-base/
[11:14:33] 403 -  296B  - /.svn/pristine/
[11:14:33] 403 -  315B  - /.svn/text-base/index.php.svn-base
[11:14:33] 403 -  297B  - /.svn/text-base/
[11:14:33] 403 -  293B  - /.svn/props/
[11:14:33] 403 -  291B  - /.svn/tmp/
[11:14:55] 301 -  318B  - /images  ->  http://scanme.nmap.org/images/ 
[11:14:56] 200 -    7KB - /index
[11:14:56] 200 -    7KB - /index.html
[11:15:08] 403 -  296B  - /server-status/
[11:15:08] 403 -  295B  - /server-status
[11:15:08] 301 -  318B  - /shared  ->  http://scanme.nmap.org/shared/
Task Completed
    Saving Tool Output to a File
    To analyze the recon results later, you may want to save your scripts’ output in a separate file. This is where input and output redirection come into play.
     Input redirection
    is using the content of a file, or the output of another program, as the input to your script.
     Output redirection
    is redirecting the output of a program to another location, such as to a file or another program. Here are some of the most useful redirection operators:
    为了以后分析重新构建的结果，您可能希望将脚本输出保存在单独的文件中。这就是输入和输出重定向发挥作用的地方。输入重定向是使用文件的内容或另一个程序的输出作为脚本的输入。输出重定向是将程序的输出重定向到另一个位置，如文件或另一个程序。以下是一些最有用的重定向运算符：
       PROGRAM
        >
       FILENAME
     Writes the program’s output into the file with that name. (It will clear any content from the file first. It will also create the file if the file does not already exist.)
       PROGRAM
        >>
       FILENAME
     Appends the output of the program to the end of the file, without clearing the file’s original content.
       PROGRAM
         $1_recon/nmap 3
echo "The results of nmap scan are stored in $1_recon/nmap."
/PATH/TO/dirsearch.py -u $1 -e php 4 --simple-report=$1_recon/dirsearch
echo "The results of dirsearch scan are stored in $1_recon/dirsearch."
    The
     echo
    command