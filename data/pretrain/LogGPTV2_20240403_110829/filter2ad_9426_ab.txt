 应用和设备局域网交互
设备和设备局域网交互
**厂商B** 的设备局域网身份劫持
在同一局域网下，厂商B设备通过专有的加密UDP网络协议——miio协议，进行通信控制。
  1. 通过广播发送一个握手协议包，如果设备支持miio协议，那么设备就会回复自身信息：token、ip和ID。
  2. 向指定设备发送一串hello bytes获得设备信息结构体”header”
  3. 凭借token、ID等信息构造信息结构体”header”，跟随控制消息发送给设备，实现设备控制。
厂商B的设备局域网身份劫持交互如图所示：
厂商B的设备局域网身份劫持交互
第一步：安装python-miio库，然后执行：mirobo discover --handshake 1，获取设备IP、ID和Token信息。
第二步：发送hello bytes消息给设备54321端口，获取设备消息结构体Header：
第三步：伪造控制消息结构体Header、消息指令cmd和checksum(Token)，给设备发送；
    typedef  struct{
    Header,
    cmd,
    checksum
    }Msg
控制消息结构体如图所示：
厂商B的设备控制消息结构体
以打开智能插座为例：cmd={'id':1,'method':'set_power','params':['on']}
**厂商C** 的局域网交互控制
厂商C为了实现智能家居生态，主推一套实现产品智能化互联互通的协议——`“***Link”`，目前所有的产品都可以与APP，以及音箱进行交互控制，是一套“带认证的密钥协商+对称密钥加密”的设备操作和交互控制协议。
再介绍和认识“带认证的密钥协商”之前，我们先介绍一下ECDH密钥协商及其存在的安全问题。
有两个用户Bob和Alice，使用ECDH密钥协商，交互过程如图所示：
 ECDH密钥协商
但是ECDH密钥协商是无法防御中间人攻击的，假设在Bob和Alice存在一个攻击者——Attack，对Bob和Alice进行中间人攻击，ECDH协商流程如图所示：
ECDH密钥协商之中间人攻击
为了防御中间人攻击，需要在ECDH密钥协商过程中加入“一套身份认证机制”——EccSignKey和EccVerifyKey，EccVerifyKey提前存储在需要协商密钥的用户设备上，整个“待认证的ECDH密钥协商”交互过程如图所示：
 待认证的ECDH密钥协商
设备和厂商C的应用(或音箱)基于`***Link`协议来进行交互，第三方设备制造商首先在云端通过ECC算法一对生成公私钥：Ecc-sPrivateKey/Ecc-sPubkey，其中公钥Ecc-sPubkey内置在设备端，用于发送随机数到云端，进行设备的身份认证，设备认证合法后，云端下发设备后续通信加密的key：accessKey，然后应用使用ECDH密钥协商算法协商出的密钥，通过AES-CBC模式加密传输accessKey；此外设备和应用进行局域网通信时，都是通过localkey进行加解密来进行的，其中localkey就是accessKey。设备和厂商C的应用局域网交互流程如图所示：
设备和厂商C的应用局域网通信交互
厂商C的设备局域网身份劫持
厂商C的`***Link`协议的交互控制的消息结构体如下所示：
以打开智能插座为例：
Packet_t=协议包头，opt=null，Payload=LocalKey 密钥加密
    Time[时间戳]  //4字节int类型时间戳，小端在前
    {
    “cmd”:5,
    "data":{
    "streams":[{"current_value":"0","stream_id":"power"}],
    "snapshot":[{"current_value":"1","stream_id":"power"}]
    }
设备交互方式总结和比较
#### 通过应用实现身份劫持
**通过应用实现身份劫持，常用的方法有如下两种：**
1）通过webview JS交互接口远程命令执行或泄露身份账号
应用APP通过为webview
@JavascriptInterface关键字，自定义添加身份获取的函数，并且没对加载url做好限制，导致身份信息远程泄露或者远程命令执行
2）Webview file域远程信息泄露
应用开启WebSettings.setAllowUniversalAccessFromFileURLs(true)，并且webview对加载的url没有任何限制，则应用APP下所有私有目录信息都会被窃取
**通过webview JS交互接口远程命令执行或泄露身份账号**
应用扫一扫时(CaptureActivity),当CaptureActivity扫描到是“合法”url时，会调用`com.***.WebViewActivity`进行url加载，但是url判断逻辑存在漏洞，导致攻击者可以调用WebViewActivity定义的交互接口，远程获取用户账号等敏感身份信息，漏洞执行效果如下图所示。
通过webview-JS交互接口获取厂商C控制应用的身份
漏洞案列简化：
    if(loadurl.contains(“***”)){
    //合法
    } else{
    //不合法
    }
**Webview file域远程信息泄露**
厂商A的音箱控制APP中WVWebViewActivity对外导出，并接收如下远程`uri
scheme：assistant://hsend***Poc5_web_view?direct_address=url`。
![
](https://images.seebug.org/content/images/2018/08/ea3363c5-1481-44da-8127-61f526d7fa0d.jpg-w331s)
WVWebViewActivity接受外部的url会传入Fragment中的webview中进行加载，并且WVWebViewActivity中对webview进行了设置，开启了JS和file文件访问能力，并设置了WebSettings.setAllowUniversalAccessFromFileURLs(true)。
攻击者可以将assistant伪协议中的url先通过url加载任意html，然后下载恶意html文件到本地，然后webview跳转加载本地的恶意html文件，窃取用户私有目录内的身份信息。
    assistant://hsend***Poc5_web_view?direct_address=http://www.test.com
    assistant://hsend***Poc5_web_view?direct_address=file:///*/***.html
#### 智能家居身份劫持漏洞总结
**1\. 配网泄露**
**2\. 设备交互控制时，劫持**
1）app/设备->server：厂商A为代表，userid为身份凭证，可劫持；
2）局域网控制：
  * 厂商B的局域网控制基于miio协议：token泄露，可劫持
  * 厂商C的微联局域网控制：带认证的密钥协商+对称密钥加密(localkey),协议安全；
**3\. app应用存在身份穿越漏洞**
Webview JS交互接口远程命令执行或远程信息泄露  
Webview File域远程信息克隆
#### 参考文献
  1. 
  2. 
  3. 
* * *