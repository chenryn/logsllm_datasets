### 9.8.11 查找所有硬链接
要确认文件是否具有硬链接，可以使用 `ls -li` 命令。例如：

```bash
$ ls -li
total 0
2738405 -rw-r--r-- 1 root root 0 2008-09-15 20:21 bar
2738404 -rw-r--r-- 2 root root 0 2008-09-15 20:21 baz
2738404 -rw-r--r-- 2 root root 0 2008-09-15 20:21 foo
```

在上述输出中，“baz” 和 “foo” 的链接数为 2（大于 1），表明它们有硬链接。这两个文件的 inode 号都是 2738404，这意味着它们是同一个文件的硬链接。

如果想查找特定 inode 号的硬链接文件，可以使用以下命令：

```bash
# find /path/to/mount/point -xdev -inum 2738404
```

### 9.8.12 不可见磁盘空间消耗
即使文件被删除，只要它们仍然被打开，就会继续占用磁盘空间。这些被删除但仍占用空间的文件及其大小可以通过以下命令列出：

```bash
# lsof -s -X / | grep deleted
```

### 9.9 数据加密提示
物理访问您的计算机的人可以轻易获取 root 权限，并访问您所有的文件（参见第 4.6.4 节）。因此，仅依靠登录密码无法保证敏感数据的安全。在这种情况下，必须采用数据加密技术来保护数据。

尽管 GNU 隐私守护（GPG）可以对文件进行加密，但需要一些用户操作（参见第 10.3 节）。Dm-crypt 通过内核模块和 device-mapper 提供了一种更便捷的方式来实现自动数据加密。

#### 数据加密工具列表
| 软件包 | 流行度 (V:I) | 大小 (KB) | 说明 |
|--------|--------------|-----------|------|
| cryptsetup | V:27, I:79 | 409 | 用于加密块设备的实用程序 (dm-crypt/LUKS) |
| cryptmount | V:2, I:3 | 231 | 用于挂载/卸载加密块设备的实用程序 (dm-crypt/LUKS) |
| fscrypt | V:0, I:1 | 4596 | Linux 文件系统加密工具 (fscrypt) |
| libpam-fscrypt | V:0, I:0 | 4181 | Linux 文件系统加密 PAM 模块 (fscrypt) |

**注意：**
数据加密会消耗 CPU 时间等资源。如果丢失了密码，加密的数据将变得不可访问。请权衡其利弊。

**提示：**
从 Debian Installer (lenny 或更新版) 开始，整个 Debian 系统可以安装到一个加密的磁盘上，使用 dm-crypt/LUKS 和 initramfs。参见第 10.3 节了解更多关于用户空间加密实用程序的信息，如 GNUPrivacyGuard。

### 9.9.1 使用 dm-crypt/LUKS 加密移动磁盘
您可以使用 dm-crypt/LUKS 对大容量可移动设备（如 USB 记忆棒）上的数据进行加密。以下是格式化并加密 USB 记忆棒的步骤：

```bash
# fdisk /dev/sdx
... "n" "p" "1" "return" "return" "w"
# cryptsetup luksFormat /dev/sdx1
...
# cryptsetup open /dev/sdx1 secret
...
# mkfs.vfat /dev/mapper/secret
...
# cryptsetup close secret
```

完成后，该设备可以在现代桌面环境中使用 udisks2 软件包挂载到 `/media/username/disk_label`，并要求输入密码（参见第 10.1.7 节）。写入的数据将会被加密。密码条目可以自动使用钥匙环（参见第 10.3.6 节）。

您也可以将其格式化为其他文件系统，例如 ext4：

```bash
# mkfs.ext4 /dev/mapper/secret
```

对于 btrfs 文件系统，需要安装 udisks2-btrfs 软件包，并可能需要配置文件的所有者和权限。

### 9.9.2 使用 dm-crypt/LUKS 挂载加密的磁盘
以下是在 `/dev/sdc5` 上创建的加密磁盘挂载到 `/mnt` 的步骤：

```bash
$ sudo cryptsetup open /dev/sdc5 ninja --type luks
Enter passphrase for /dev/sdc5: ****
$ sudo lvm
lvm> lvscan
inactive '/dev/ninja-vg/root' [13.52 GiB] inherit
inactive '/dev/ninja-vg/swap_1' [640.00 MiB] inherit
ACTIVE '/dev/goofy/root' [180.00 GiB] inherit
ACTIVE '/dev/goofy/swap' [9.70 GiB] inherit
lvm> lvchange -a y /dev/ninja-vg/root
lvm> exit
Exiting.
$ sudo mount /dev/ninja-vg/root /mnt
```

### 9.10 内核
Debian 为支持的架构提供了模块化的 Linux 内核软件包。如果您正在阅读本文档，可能不需要亲自编译内核。

#### 9.10.1 内核参数
许多 Linux 特性可以通过内核参数来配置：
- 通过 bootloader 初始化内核参数（参见第 3.1.2 节）
- 通过 `sysctl(8)` 修改运行时的内核参数（参见第 1.2.12 节）
- 通过 `modprobe(8)` 参数设置模块激活时的参数（参见第 9.7.3 节）

更多细节参见 "The Linux Kernel User's and Administrator's Guide: The Kernel's Command-Line Parameters"。

#### 9.10.2 内核头文件
大多数普通程序编译时不需要内核头文件，直接使用它们可能导致编译失败。在 Debian 系统上，普通程序编译依赖于 `libc6-dev` 软件包提供的头文件（位于 `/usr/include/linux` 和 `/usr/include/asm`）。

**注意：**
对于编译某些内核相关的程序（如外部源代码编译的内核模块和 automounter 守护进程 (amd)），您需要包含相应的内核头文件路径，例如 `-I/usr/src/linux-particular-version/include/` 到命令行中。

#### 9.10.3 编译内核和相关模块
Debian 有自己的方法来编译内核和相关模块。

| 软件包 | 流行度 (V:I) | 大小 (KB) | 说明 |
|--------|--------------|-----------|------|
| build-essential | I:481 | 17 | 创建 Debian 软件包所必需的软件包: make, gcc, ... |
| bzip2 | V:169, I:970 | 121 | bz2 文件压缩和解压缩工具 |
| libncurses5-dev | I:73 | 6 | ncurses 开发者库和文档 |
| git | V:345, I:542 | 46734 | Git: Linux 内核使用的分布式版本控制系统 |
| fakeroot | V:30, I:489 | 224 | 为非 root 用户提供伪造的 root 环境以创建软件包 |
| initramfs-tools | V:382, I:988 | 113 | 创建 initramfs 的工具 (Debian 规范) |
| dkms | V:56, I:163 | 190 | 动态内核模块支持 (DKMS) (通用) |
| module-assistant | V:1, I:20 | 406 | 制作模块软件包的帮助工具 (Debian 规范) |
| devscripts | V:6, I:41 | 2658 | Debian 软件包维护者的帮助脚本 (Debian 规范) |

如果您在第 3.1.2 节中使用 `initrd`，请务必阅读 `initramfs-tools(8)`, `update-initramfs(8)`, `mkinitramfs(8)` 和 `initramfs.conf(5)` 中的相关信息。

**警告：**
在编译 Linux 内核源代码时，请不要从 `/usr/include/linux` 和 `/usr/include/asm` 到源代码树（例如 `/usr/src/linux*`）中创建符号链接。（一些过期的文档建议这样做。）

**注意：**
当在 Debian stable 版中编译最新的 Linux 内核时，可能需要使用从 Debian unstable 版向后移植的一些最新工具。

`module-assistant(8)`（或其简写形式 `m-a`）帮助用户从一个或多个定制的内核轻松构建和安装模块软件包。

动态内核模块支持 (DKMS) 是一个新的分布式独立框架，设计用于允许单个内核模块在不改变整个内核的情况下升级。这适用于维护内核代码树外部的模块，并且在升级内核时重新编译模块非常简单。

#### 9.10.4 编译内核源代码：Debian 内核团队推荐
从上游内核源代码编译个性化的内核二进制包时，应使用提供的 `deb-pkg` 目标：

```bash
$ sudo apt-get build-dep linux
$ cd /usr/src
$ wget https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/linux-version.tar.xz
$ tar --xz -xvf linux-version.tar.xz
$ cd linux-version
$ cp /boot/config-version .config
$ make menuconfig
...
$ make deb-pkg
```

**提示：**
`linux-source-version` 软件包使用 `/usr/src/linux-version.tar.bz2` 提供带有 Debian 补丁的 Linux 内核源代码。

从 Debian 内核源代码软件包编译特定的二进制包时，应使用 `debian/rules.gen` 中的 `binary-arch_architecture_featureset_flavour` 目标：

```bash
$ sudo apt-get build-dep linux
$ apt-get source linux
$ cd linux-3.*
$ fakeroot make -f debian/rules.gen binary-arch_i386_none_686
```

更多信息参见：
- Debian Wiki: Kernel FAQ
- Debian Wiki: Debian Kernel
- Debian Linux 内核手册: https://kernel-handbook.debian.net

#### 9.10.5 硬件驱动和固件
硬件驱动是在目标系统主 CPU 上运行的代码。大多数硬件驱动现在是自由软件，并已包含在普通的 Debian 内核软件包中，位于 main 区域。

- **GPU 驱动**
  - Intel GPU 驱动 (main)
  - AMD/ATI GPU 驱动 (main) 和
  - NVIDIA GPU 驱动 (nouveau 驱动在 main 中，厂商支持的二进制驱动在 non-free 中)

固件是加载到连接在目标系统设备上的代码或数据（例如，CPU microcode、GPU 渲染代码或 FPGA/CPLD 数据）。部分固件包作为自由软件存在，但许多固件包由于包含没有源代码的数据而不能作为自由软件存在。安装这些固件数据是必需的，以便设备能够按预期运行。

- **固件数据软件包**
  - `firmware-linux-free` (main)
  - `firmware-linux-nonfree` (non-free-firmware)
  - `firmware-linux-*` (non-free-firmware)
  - `*-firmware` (non-free-firmware)
  - `intel-microcode` (non-free-firmware)
  - `amd64-microcode` (non-free-firmware)

- **固件更新程序软件包**
  - `fwupd` (main): 从 Linux Vendor Firmware Service 下载固件数据的后台守护进程。
  - `gnome-firmware` (main): fwupd 的 GTK 前端
  - `plasma-discover-backend-fwupd` (main): fwupd 的 Qt 前端

请注意，从 Debian 12 Bookworm 开始，用户可以使用官方安装介质提供的 `non-free-firmware` 软件包来提供完整的固件支持。