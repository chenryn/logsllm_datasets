`podman start`{.literal} 命令来重新运行容器。您可以根据其容器 ID
或名称来指定容器。
::: itemizedlist
**先决条件**
-   Podman 工具已安装。
    ``` literallayout
    #  dnf module install -y container-tools
    ```
-   至少一个容器已经停止。
:::
::: orderedlist
**流程**
1.  启动 `myubi`{.literal} 容器：
    ::: itemizedlist
    -   在非互动模式中：
        ``` literallayout
        $ podman start myubi
        ```
        另外，您可以使用 `podman start 1984555a2c27`{.literal}。
    -   在互动模式中，使用 `-a`{.literal}(`--attach`{.literal})和
        `-t`{.literal} (`--interactive`{.literal})选项来使用容器 bash
        shell：
        ``` literallayout
        $ podman start -a -i myubi
        ```
        或者，您可以使用 `podman start -a -i 1984555a2c27`{.literal}。
    :::
2.  输入 `exit`{.literal} 退出容器并返回到主机：
    ``` literallayout
    [root@6ccffd0f6421 /]# exit
    ```
:::
::: itemizedlist
**其他资源**
-   `man podman-start`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_inspecting-containers-from-the-host_assembly_working-with-containers}检查主机的容器 {.title}
:::
使用 `podman inspect`{.literal} 命令，来检查 JSON
格式的现有容器的元数据。您可以根据其容器 ID 或名称来指定容器。
::: itemizedlist
**先决条件**
-   Podman 工具已安装。
    ``` literallayout
    #  dnf module install -y container-tools
    ```
:::
::: itemizedlist
**流程**
-   检查 ID 64ad95327c74 定义的容器：
    ::: itemizedlist
    -   要获取所有元数据：
        ``` literallayout
        $ podman inspect 64ad95327c74
        [
            {
                "Id": "64ad95327c740ad9de468d551c50b6d906344027a0e645927256cd061049f681",
                "Created": "2021-03-02T11:23:54.591685515+01:00",
                "Path": "/bin/rsyslog.sh",
                "Args": [
                    "/bin/rsyslog.sh"
                ],
                "State": {
                    "OciVersion": "1.0.2-dev",
                    "Status": "running",
                    ...
        ```
    -   要从 JSON 文件中获取特定的内容，如 `StartedAt`{.literal}
        时间戳：
        ``` literallayout
        $ podman inspect --format='{{.State.StartedAt}}' 64ad95327c74
        2021-03-02 11:23:54.945071961 +0100 CET
        ```
        这些信息保存在层次结构中。要查看容器 `StartedAt`{.literal}
        时间戳（`StartedAt`{.literal} 在 `State`{.literal}下），请使用
        `--format`{.literal} 选项以及容器 ID 或名称。
    :::
:::
您想要检查的其他内容示例包括：
::: itemizedlist
-   `.Path`{.literal} 来查看容器运行的命令
-   `.Args`{.literal} 命令的参数
-   `.Config.ExposedPorts`{.literal} 容器公开的 TCP 或 UDP 端口
-   `.State.Pid`{.literal} 来查看容器的进程 ID
-   `.HostConfig.PortBindings`{.literal} 从容器到主机的端口映射
:::
::: itemizedlist
**其他资源**
-   `man podman-inspect`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_mounting-directory-on-localhost-to-the-container_assembly_working-with-containers}将 localhost 上的目录挂载到容器 {.title}
:::
此流程演示了如何通过在容器中挂载主机 `/dev/log`{.literal}
设备，使容器内的日志消息对主机系统可用。
::: itemizedlist
**先决条件**
-   Podman 工具已安装。
    ``` literallayout
    #  dnf module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  运行名为 `log_test`{.literal} 的容器，并在容器内挂载主机
    `/dev/log`{.literal} 设备：
    ``` literallayout
    # podman run --name="log_test" -v /dev/log:/dev/log --rm \
      registry.redhat.io/ubi8/ubi logger "Testing logging to the host"
    ```
2.  使用 `journalctl`{.literal} 工具来显示日志：
    ``` literallayout
    # journalctl -b | grep Testing
    Dec 09 16:55:00 localhost.localdomain root[14634]: Testing logging to the host
    ```
    `--rm`{.literal} 选项会在容器退出时删除容器。
:::
::: itemizedlist
**其他资源**
-   `man podman-run`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_mounting-a-container-filesystem_assembly_working-with-containers}挂载容器文件系统 {.title}
:::
使用 `podman mount`{.literal}
命令将正常工作的容器根文件系统挂载到主机可访问的位置。
::: itemizedlist
**先决条件**
-   Podman 工具已安装。
    ``` literallayout
    #  dnf module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  运行名为 `mysyslog`{.literal} 的容器：
    ``` literallayout
    # podman run -d --name=mysyslog registry.redhat.io/rhel8/rsyslog
    ```
2.  可选：列出所有容器：
    ``` literallayout
    # podman ps -a
    CONTAINER ID  IMAGE                                    COMMAND          CREATED         STATUS                     PORTS   NAMES
    c56ef6a256f8  registry.redhat.io/rhel8/rsyslog:latest  /bin/rsyslog.sh  20 minutes ago  Up 20 minutes ago                  mysyslog
    ```
3.  挂载 `mysyslog`{.literal} 容器：
    ``` literallayout
    # podman mount mysyslog
    /var/lib/containers/storage/overlay/990b5c6ddcdeed4bde7b245885ce4544c553d108310e2b797d7be46750894719/merged
    ```
4.  使用 `ls`{.literal} 命令显示挂载点的内容：
    ``` literallayout
    # ls /var/lib/containers/storage/overlay/990b5c6ddcdeed4bde7b245885ce4544c553d108310e2b797d7be46750894719/merged
    bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
    ```
5.  显示 OS 版本：
    ``` literallayout
    # cat /var/lib/containers/storage/overlay/990b5c6ddcdeed4bde7b245885ce4544c553d108310e2b797d7be46750894719/merged/etc/os-release
    NAME="Red Hat Enterprise Linux"
    VERSION="8.3 (Ootpa)"
    ID="rhel"
    ID_LIKE="fedora"
    VERSION_ID="8.3"
    ```
:::
::: itemizedlist
**其他资源**
-   `man podman-mount`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_running-a-service-as-a-daemon-with-a-static-ip_assembly_working-with-containers}将服务作为使用静态 IP 的守护进程运行 {.title}
:::
以下示例将 `rsyslog`{.literal}
服务作为守护进程在后台运行。`--ip`{.literal}
选项将容器网络接口设为特定的 IP 地址（如 10.88.0.44）。之后，您可以运行
`podman inspect`{.literal} 命令来检查是否正确设置了 IP 地址。
::: itemizedlist
**先决条件**
-   Podman 工具已安装。
    ``` literallayout
    #  dnf module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  将容器网络接口设为 IP 地址 10.88.0.44：
    ``` literallayout
    # podman run -d --ip=10.88.0.44 registry.access.redhat.com/rhel7/rsyslog
    efde5f0a8c723f70dd5cb5dc3d5039df3b962fae65575b08662e0d5b5f9fbe85
    ```
2.  检查是否正确设置了 IP 地址：
    ``` literallayout
    # podman inspect efde5f0a8c723 | grep 10.88.0.44
    "IPAddress": "10.88.0.44",
    ```
:::
::: itemizedlist
**其他资源**
-   `man podman-run`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_executing-commands-inside-a-running-container_assembly_working-with-containers}在运行中的容器中执行命令 {.title}
:::
使用 `podman exec`{.literal}
命令，来在正在运行的容器中执行命令并调查该容器。使用
`podman exec`{.literal} 命令而不是 `podman run`{.literal}
命令的原因是，您可以在不中断容器活动的情况下调查正在运行的容器。
::: itemizedlist
**先决条件**
-   Podman 工具已安装。
    ``` literallayout
    #  dnf module install -y container-tools
    ```
-   容器正在运行。
:::
::: orderedlist
**流程**
1.  在 `myrsyslog`{.literal} 容器中执行 `rpm -qa`{.literal}
    命令来列出所有已安装的软件包：
    ``` literallayout
    $ podman exec -it myrsyslog rpm -qa
    tzdata-2020d-1.el8.noarch
    python3-pip-wheel-9.0.3-18.el8.noarch
    redhat-release-8.3-1.0.el8.x86_64
    filesystem-3.8-3.el8.x86_64
    ...
    ```
2.  在 `myrsyslog`{.literal} 容器中执行 `/bin/bash`{.literal} 命令：
    ``` literallayout
    $ podman exec -it myrsyslog /bin/bash
    ```
3.  安装 `procps-ng`{.literal} 软件包，其包含一组系统工具（如
    `ps`{.literal}、`top`{.literal} 和 `uptime`{.literal} ，等等）：
    ``` literallayout
    # dnf install procps-ng
    ```
4.  检查容器：
    ::: itemizedlist
    -   要列出系统上的每个进程：
        ``` literallayout
        # ps -ef
        UID          PID    PPID  C STIME TTY          TIME CMD
        root           1       0  0 10:23 ?        00:00:01 /usr/sbin/rsyslogd -n
        root           8       0  0 11:07 pts/0    00:00:00 /bin/bash
        root          47       8  0 11:13 pts/0    00:00:00 ps -ef
        ```
    -   要显示文件系统磁盘空间使用情况：
        ``` literallayout
        # df -h
        Filesystem      Size  Used Avail Use% Mounted on
        fuse-overlayfs   27G  7.1G   20G  27% /
        tmpfs            64M     0   64M   0% /dev
        tmpfs           269M  936K  268M   1% /etc/hosts
        shm              63M     0   63M   0% /dev/shm
        ...
        ```
    -   要显示系统信息：
        ``` literallayout
        # uname -r
        4.18.0-240.10.1.el8_3.x86_64
        ```
    -   要以 MB 为单位显示空闲和使用的内存量：
        ``` literallayout
        # free --mega
        total        used        free      shared  buff/cache   available
        Mem:       2818         615        1183          12         1020        1957
        Swap:      3124           0        3124
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   `man podman-exec`{.literal}
:::
:::
::: section
::: titlepage