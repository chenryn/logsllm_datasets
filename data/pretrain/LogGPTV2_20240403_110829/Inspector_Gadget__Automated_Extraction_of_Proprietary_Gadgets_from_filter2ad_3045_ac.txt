1) Memory Management: From the gadget’s data ﬁle, the
player’s memory management unit can identify all ﬁxed,
preinitialized memory areas that the gadget will rely on.
Typically, such memory areas contain static strings and
other global variables. These areas must be allocated and
ﬁlled with the same values as were present in the analyzed
process before the logged behavior started execution in
ANUBIS. Additionally, the memory manager can also be
called through the environment
interface (see below) to
handle dynamic memory allocation requests (e.g., through
RtlAllocateHeap). Thus, while essential for proper
execution of the gadgets,
this unit additionally provides
the player with a complete view of the memory buffers
accessible to the gadget, and allows monitoring for changes
made to them.
After initializing memory areas for the gadget, the player
can load the behavior code, and start executing the gadget.
As introduced in the previous section, a representation of
the observed behavior is extracted into dynamically loadable
libraries (DLLs). Thus, loading the behavior code can be
easily achieved through the LoadLibrary function, which
takes care of loading the code, and setting the appropriate
permissions for it.
2) Execution Containment: When starting the actual code
execution, special care must be taken to isolate the gadget
from the player’s memory, and handle possible crashes of the
extracted code. Since the gadget is extracted automatically,
we must make sure that we handle the execution robustly
as there might be possible shortcomings of our extraction
process. Also, because we deal with malicious code, special
care must be taken in order to avoid undesired side effects.
One possibility to guarantee isolation is by implementing
gadget emulation. That
the extracted code would be
emulated. Because of performance considerations, we opted
against this choice. In fact, emulation is not well-suited for
tasks such as ﬂoating point operations that are known to be
notoriously difﬁcult to handle.
is,
Our solution follows a different approach: As described
in the previous section, most memory accesses have been
statically rewritten to use the memory regions set up by
the memory manager. Thus, the execution containment unit
can natively run the gadget code, securing its execution
inside a separate thread. For this thread, handlers for invalid
memory accesses as well as execution of illegal instructions
are registered to catch the most common source of errors.
Further, during gadget extraction, we verify that the code is
free of any direct references to API or system calls. Thus,
any kind of system interaction is forced to go through the
environment interface (see below), allowing us to hinder the
gadget from executing unintended malicious behavior. Last,
the gadget’s execution duration is limited to a conﬁgurable
threshold in order to avoid deadlocks inside the extracted
code.
A different approach [10] to contain the execution envi-
ronment would be to implement software-based fault isola-
tion (SFI) [19], [20]. Alternatively, one-way isolation [21]
or similar techniques could be combined with concepts from
NATIVE CLIENT [22] to contain execution. In the current
prototype of INSPECTOR, the static rewriting of memory
accesses is used. Our experience shows that it is a reliable
and efﬁcient way to contain the execution run within the
player.
3) Environment Interface: The third component provided
by the player is the environment interface. This component
serves as the mediator between the gadget and the environ-
ment hosting the gadget player. During gadget start-up, the
environment interface registers a callback function inside the
gadget. This callback, implemented as a simple multiplexor
function, is then invoked by the gadget each time a system
or Windows API call would have been invoked during the
malware execution.
Therefore,
interface must
the environment
implement
every kind of function that a gadget might request. This
can be easily realized given the following key insight: By
default, it is sufﬁcient to redirect execution to the origi-
nal library implementing the requested function instead of
implementing functionality by hand. We can, thus, simply
relay their implementation to an actual library. However, if
an analyst wishes to manually interfere with the function
call (e.g.,
to trigger a different behavior by returning a
speciﬁc value), the environment interface also supports this.
The analyst can manually implement a callback, which then
performs the desired functionality. This can be especially
useful in situations where the analyst decides to sanitize (or
manipulate) data provided to or requested by the gadget.
During gadget extraction, INSPECTOR can verify that
all required functions have been implemented in the en-
vironment interface, and inform the analyst about missing
functionality. If the gadget player encounters a request for
an unknown function (e.g., because the gadget was extracted
by a newer version of INSPECTOR), it can decide to ignore
the call, and continue execution. Obviously, this approach
only works for functions that do not pop their arguments
(i.e., use the cdecl x86 calling convention), since the stack
layout might otherwise become corrupted.
4) Callback Handling:
In the following, we describe
two characteristic examples where we chose to imple-
ment functions inside the environment
interface. In Mi-
crosoft Windows, the two functions RegGetValue and
RegQueryValueEx provide means to retrieve the type
and data for a speciﬁed registry value. Returning values
provided by the hosting environment would be an acceptable
solution here. However, intercepting the calls, and allowing
the gadget player to return false information can uncover
interesting information. Consider our running example of the
update mechanism via HTTP: In this example, the download
request could contain bits to indicate information about
the host operating system version, allowing the attacker
to provide different downloads, speciﬁcally targeted at the
available host environment. By allowing the player to fake
this information, INSPECTOR can easily trick the gadget
into retrieving updates for a broad range of possible host
environments. Therefore, a simple conﬁguration option in
the gadget player can save the analyst from having to re-run
the gadget (or even the whole malware) in many different
operating systems.
As a second example, consider Microsoft Windows’s net-
working interface: In this example, the environment interface
provides a wrapper for the actual networking implementa-
tion. Whenever calls to connect, InternetConnect,
and related functions are encountered, the wrapper has the
possibility to alter parameters before actually establishing a
connection. Such parameters include the destination host and
port. In our running example, this is particularly convenient
for a security analyst in the case where the update binary
is hosted on a fast-ﬂux service network [23]. When running
the download gadget repeatedly, it is very likely that the
analyst will see different IP address in subsequent DNS
lookups. Thus, each time, the request is served by different
machines. Through a conﬁguration option, the gadget player
can be instrumented to always contact the same IP address,
and allow to pinpoint the dates when a speciﬁc host starts
serving a different, or updated binary.
Alternatively, instead of serving live network trafﬁc, the
network wrapper can also be instrumented to replay previ-
ously recorded network dumps (from pcap ﬁles, a format
supported by many network analysis and recording tools).
This technique enables interesting use cases from a forensic
point of view: When provided with corresponding trafﬁc
dumps, the download gadget can extract binaries that were
served at a different point
in time. In cases where the
network trafﬁc contains dynamic data (such as keys used
during the obfuscation process), we need to pay special
attention. In the next section, we detail how this case can
be handled by inverting gadgets.
V. GADGET INVERSION
Until now, the gadget discussion focused on cases in
which malware samples interact with the environment or
remote hosts (e.g., command and control servers). That is,
the focus of the analysis was on what output information a
gadget must produce so that the analyst can interact with a
remote server. In practice, though, the inverse use case is
also interesting.
Consider, for example, the case of information leakage
due to a keylogger. Suppose that an analyst is given a net-
work dump that contains information stolen by a keylogger
where the data is encoded using a proprietary algorithm
embedded into the malware. Furthermore, suppose that the
analyst has a copy of the malware sample that is responsible
for stealing the data. The task is now to ﬁnd out what
information was stolen (i.e., to determine what data was
encoded by the malware and sent out over the network).
To achieve this goal, the main idea is to ﬁrst extract the
gadget that is responsible for stealing and encoding the
data. Second, we use the gadget and compute the input that
leads to the output observed in the network dump. Thus, we
would be able to determine what information was stolen in
a reactive, forensic analysis setting.
In the following, we discuss how we realize this in
practice. First, we need to change our perspective: In the
previous sections, we treated the gadget as an object that
invokes various library and system calls to interact with the
operating environment and that translates (possibly altered)
data in order to produce arbitrary output. In this section, we
apply the same concepts as before. However, we simplify the
gadget to a mere transformation oracle between input and
output. This oracle can then be used to answer the question:
“Using a given gadget, what output is generated if a certain
input is provided?”
As we explained in Section II-B, INSPECTOR has com-
plete knowledge over which sources provide data to which
sinks based on the different types of log ﬁles we generate.
This knowledge has byte granularity (i.e., for each byte in
a sink, we can identify all input bytes that have an impact
on the byte’s value). We denote the relationship between
different input bytes (sources) and an output byte (sink) a
source-sink dependency. These dependencies can be used
together with the gadget as an oracle. That
is, we can
brute-force, for each output byte, which input bytes need
to be supplied to generate exactly this output. For a given
output, we can, thus, determine what input leads to such an
output. Hence, we can effectively invert the computation of
the gadget transformation function. Although the brute-force
approach we use to achieve this goal has some limitations in
practice (see Section V-C), it is able to automatically deliver
the expected results for certain kinds of gadgets.
To inverse a gadget, we use the following algorithm: Let
o ∈ O be the set of output bytes we are interested in and ov
the concrete value of the output byte o for which we seek to
determine the input(s). Similar, i ∈ I denotes the set of all
input bytes transformed by the gadget. In a ﬁrst step, using
the source-sink dependencies, we ﬁnd the set of dependent
input bytes Do ⊆ I that have an inﬂuence on o, i.e., ∀o ∈
O : Do = {i|i ∈ I ∧ o depends on i}. Then, for each
element in O, the set of candidate inputs Co is determined
by selecting all possible combinations of input values in
Do: ∀o ∈ O : Co = {(vi1 × . . . × vin)|(i1, . . . , in) = Do ∧
vi = value(i), vi ∈ [0..255]}. Finally, for each candidate
input c ∈ Co, the gadget oracle is used to compute the
candidate output oc which can be compared to the desired
value ov. When an acceptable candidate c is found (i.e., both
outputs ov and oc match), the process is repeated with the
next element in O.
Special attention is required in the case where two or
more output bytes o, p ∈ O share dependent inputs, i.e.,
Do ∩ Dp = D(o,p) 6= ∅. Here, each input candidate cp ∈ Cp
can be discarded immediately if at least one input value
vi ∈ cp is assigned a different value than the same input byte
in a previously accepted candidate co ∈ Co. We call such
inputs between o and p conﬂicting, or dispute candidates.
Thus, the sequence in which output bytes are chosen must
be done in such a way that those outputs containing less
dispute candidates are selected ﬁrst. If, at some point, no
acceptable candidate for an output byte q can be found, the
inversion algorithm must discard the previously accepted
candidate co ∈ Co, where D(o,q) 6= ∅, and search for the
next acceptable candidate c0
o (i.e, perform backtracking).
If no other acceptable candidate can be found (and no
dispute between o and another, previous element exists), the
algorithm aborts with an error. Such a situation can occur, if
there exists no input for the output O chosen by the analyst
or INSPECTOR fails to ﬁnd all source-sink dependencies for
the selected behavior.
S
Otherwise, all output bytes are eventually assigned
with an acceptable candidate input. By combining these
input values Iaccept =
candidates to a single set of
o∈O {co|co ∈ Co ∧ ov = oracle(co)}, we can thus answer
the inverse question for a selected set of output values.
A crucial factor of this inversion strategy is that INSPEC-
TOR assumes that the correspondence between input byte
positions and output byte positions will remain constant
as input changes. This implies that the algorithm does not
handle optional or variable-length tokens in the input.
A. Inversion Example
To explain our approach in more detail, we revisit the
example introduced at
the beginning of this section. A
keylogger steals sensitive data from a compromised host,
encodes it using a proprietary algorithm, and then sends it
out over the network to the command and control server.
As an analyst, we only have access to the encoded network
trafﬁc and a copy of the keylogger. The goal is now to ﬁnd
out what data has been stolen by the malware.
Based on the network trafﬁc, we know all the expected
values of the output O. Next, we need to identify the
corresponding sources Do inﬂuencing the output. When
recording the behavior of the keylogger in the analysis
environment, INSPECTOR will identify a number of source-
sink dependencies between the input bytes (e.g., stolen infor-
mation read from the browser process) and the output bytes
(encoded data sent over the network) since they are related to
each other due to taint analysis. Based on this information,
we can compute how each output byte depends on the input
bytes. Once we have identiﬁed the dependent inputs, we
can compute the candidate inputs and use them together
with the gadget: For each candidate input c ∈ Co, we test
with the help of the gadget what output is generated for this
particular input. If the output matches the expected value, we