# 07 \| const/volatile/mutable：常量/变量究竟是怎么回事？你好，我是 Chrono。上节课我讲了自动类型推导，提到 auto 推导出的类型可以附加const、volatile 修饰（通常合称为"cv修饰符"）。别看就这么两个关键字，里面的"门道"其实挺多的，用好了可以让你的代码更安全、运行得更快。今天我就来说说它们俩，以及比较少见的另一个关键字mutable。 const 与 volatile先来看 **const**吧，你一定对它很熟悉了。正如它的字面含义，表示"常量"。最简单的用法就是，**定义程序用到的数字、字符串常量，代替宏定义**。    const int MAX_LEN       = 1024;    const std::string NAME  = "metroid";但如果我们从 C++程序的生命周期角度来看的话，就会发现，它和宏定义还是有本质区别的：**const定义的常量在预处理阶段并不存在，而是直到运行阶段才会出现**。所以，准确地说，它实际上是运行时的"变量"，只不过不允许修改，是"只读"的（readonly），叫"只读变量"更合适。既然它是"变量"，那么，使用指针获取地址，再"强制"写入也是可以的。但这种做法破坏了"常量性"，绝对不提倡。这里，我只是给你做一个示范性质的实验，还要用到另外一个关键字volatile。     // 需要加上volatile修饰，运行时才能看到效果    const volatile int MAX_LEN  = 1024;    auto ptr = (int*)(&MAX_LEN);    *ptr = 2048;    cout 操作符，用起来和原始指针一模一样。不仅如此，它还综合考虑了很多现实的应用场景，能够自动适应各种复杂的情况，防止误用指针导致的隐患，非常"聪明"，所以被称为"智能指针"。常用的有两种智能指针，分别是**unique_ptr** 和 **shared_ptr**，下面我就来分别介绍一下。认识 unique_ptrunique_ptr是最简单、最容易使用的一个智能指针，在声明的时候必须用模板参数指定类型：    unique_ptr ptr1(new int(10));      // int智能指针    assert(*ptr1 = 10);                     // 可以使用*取内容    assert(ptr1 != nullptr);                // 可以判断是否为空指针    unique_ptr ptr2(new string("hello"));  // string智能指针    assert(*ptr2 == "hello");                // 可以使用*取内容    assert(ptr2->size() == 5);               // 可以使用->调用成员函数你需要注意的是，unique_ptr虽然名字叫指针，用起来也很像，但**它实际上并不是指针，而是一个对象。所以，不要企图对它调用delete，它会自动管理初始化时的指针，在离开作用域时析构释放内存。**另外，它也没有定义加减运算，不能随意移动指针地址，这就完全避免了指针越界等危险操作，可以让代码更安全：    ptr1++;                        // 导致编译错误    ptr2 += 2;                     // 导致编译错误除了调用delete、加减运算，初学智能指针还有一个容易犯的错误是把它当成普通对象来用，不初始化，而是声明后直接使用：    unique_ptr ptr3;                // 未初始化智能指针    *ptr3 = 42 ;                         // 错误！操作了空指针未初始化的 unique_ptr表示空指针，这样就相当于直接操作了空指针，运行时就会产生致命的错误（比如core dump）。为了避免这种低级错误，你可以调用工厂函数**make_unique()**，强制创建智能指针的时候必须初始化。同时还可以利用自动类型推导（第 6 讲）的auto，少写一些代码：    auto ptr3 = make_unique(42);               // 工厂函数创建智能指针    assert(ptr3 && *ptr3 == 42);    auto ptr4 = make_unique("god of war");  // 工厂函数创建智能指针    assert(!ptr4->empty());不过，make_unique() 要求 C++14，好在它的原理比较简单。如果你使用的是C++11，也可以自己实现一个简化版的make_unique()，可以参考下面的代码：    template              // 可变参数模板    std::unique_ptr                            // 返回智能指针    my_make_unique(Args&&... args)                // 可变参数模板的入口参数    {        return std::unique_ptr(                // 构造智能指针                new T(std::forward(args)...));    // 完美转发    }unique_ptr 的所有权使用 unique_ptr 的时候还要特别注意指针的“所有权”问题。正如它的名字，表示指针的所有权是"唯一"的，不允许共享，任何时候只能有一个"人"持有它。为了实现这个目的，unique_ptr 应用了 C++的"转移"（move）语义，同时禁止了拷贝赋值，所以，在向另一个 unique_ptr赋值的时候，要特别留意，必须用 **std::move()**函数显式地声明所有权转移。赋值操作之后，指针的所有权就被转走了，原来的 unique_ptr变成了空指针，新的 unique_ptr接替了管理权，保证所有权的唯一性：    auto ptr1 = make_unique(42);    // 工厂函数创建智能指针    assert(ptr1 && *ptr1 == 42);         // 此时智能指针有效    auto ptr2 = std::move(ptr1);         // 使用move()转移所有权    assert(!ptr1 && ptr2);               // ptr1变成了空指针如果你对右值、转移这些概念不是太理解，也没关系，它们用起来也的确比较"微妙"，这里你只要记住，**尽量不要对 unique_ptr执行赋值操作**就好了，让它"自生自灭"，完全自动化管理。认识 shared_ptr接下来要说的是 shared_ptr，它是一个比 unique_ptr更"智能"的智能指针。初看上去 shared_ptr 和 unique_ptr差不多，也可以使用工厂函数来创建，也重载了 \* 和 -\>操作符，用法几乎一样------只是名字不同，看看下面的代码吧：    shared_ptr ptr1(new int(10));     // int智能指针    assert(*ptr1 = 10);                    // 可以使用*取内容    shared_ptr ptr2(new string("hello"));  // string智能指针    assert(*ptr2 == "hello");                      // 可以使用*取内容    auto ptr3 = make_shared(42);  // 工厂函数创建智能指针    assert(ptr3 && *ptr3 == 42);       // 可以判断是否为空指针    auto ptr4 = make_shared("zelda");  // 工厂函数创建智能指针    assert(!ptr4->empty());                   // 可以使用->调用成员函数但 shared_ptr 的名字明显表示了它与 unique_ptr的最大不同点：**它的所有权是可以被安全共享的**，也就是说支持拷贝赋值，允许被多个"人"同时持有，就像原始指针一样。    auto ptr1 = make_shared(42);    // 工厂函数创建智能指针    assert(ptr1 && ptr1.unique() );     // 此时智能指针有效且唯一    auto ptr2 = ptr1;                  // 直接拷贝赋值，不需要使用move()    assert(ptr1 && ptr2);              // 此时两个智能指针均有效    assert(ptr1 == ptr2);             // shared_ptr可以直接比较    // 两个智能指针均不唯一，且引用计数为2    assert(!ptr1.unique() && ptr1.use_count() == 2);     assert(!ptr2.unique() && ptr2.use_count() == 2); shared_ptr支持安全共享的秘密在于**内部使用了"引用计数"**。引用计数最开始的时候是1，表示只有一个持有者。如果发生拷贝赋值------也就是共享的时候，引用计数就增加，而发生析构销毁的时候，引用计数就减少。只有当引用计数减少到0，也就是说，没有任何人使用这个指针的时候，它才会真正调用 delete释放内存。 因为 shared_ptr具有完整的"值语义"（即可以拷贝赋值），所以，**它可以在任何场合替代原始指针，而不用再担心资源回收的问题**，比如用于容器存储指针、用于函数安全返回动态创建的对象，等等。shared_ptr 的注意事项那么，既然 shared_ptr 这么好，是不是就可以只用它而不再考虑 unique_ptr了呢？ 答案当然是否定的，不然也就没有必要设计出来多种不同的智能指针了。虽然 shared_ptr非常"智能"，但天下没有免费的午餐，它也是有代价的，**引用计数的存储和管理都是成本**，这方面是 shared_ptr 不如 unique_ptr的地方。 如果不考虑应用场合，过度使用 shared_ptr就会降低运行效率。不过，你也不需要太担心，shared_ptr内部有很好的优化，在非极端情况下，它的开销都很小。另外一个要注意的地方是 **shared_ptr的销毁动作**。因为我们把指针交给了 shared_ptr去自动管理，但在运行阶段，引用计数的变动是很复杂的，很难知道它真正释放资源的时机，无法像Java、Go那样明确掌控、调整垃圾回收机制。你要特别小心对象的析构函数，不要有非常复杂、严重阻塞的操作。一旦shared_ptr在某个不确定时间点析构释放资源，就会阻塞整个进程或者线程，"整个世界都会静止不动"（也许用过Go的同学会深有体会）。这也是我以前遇到的实际案例，排查起来费了很多功夫，真的是"血泪教训"。    class DemoShared final      //  危险的类，不定时的地雷       {    public:        DemoShared() = default;       ~DemoShared()            // 复杂的操作会导致shared_ptr析构时世界静止       {           // Stop The World ...       }    };shared_ptr的引用计数也导致了一个新的问题，就是"**循环引用**"，这在把 shared_ptr作为类成员的时候最容易出现，典型的例子就是**链表节点**。下面的代码演示了一个简化的场景：    class Node final    {    public:        using this_type     = Node;        using shared_type   = std::shared_ptr;    public:        shared_type     next;      // 使用智能指针来指向下一个节点    };    auto n1 = make_shared();   // 工厂函数创建智能指针    auto n2 = make_shared();   // 工厂函数创建智能指针    assert(n1.use_count() == 1);    // 引用计数为1    assert(n2.use_count() == 1);    n1->next = n2;                 // 两个节点互指，形成了循环引用    n2->next = n1;    assert(n1.use_count() == 2);    // 引用计数为2    assert(n2.use_count() == 2);    // 无法减到0，无法销毁，导致内存泄漏在这里，两个节点指针刚创建时，引用计数是1，但指针互指（即拷贝赋值）之后，引用计数都变成了2。 这个时候，shared_ptr就"犯傻"了，意识不到这是一个循环引用，多算了一次计数，后果就是引用计数无法减到0，无法调用析构函数执行delete，最终导致内存泄漏。这个例子很简单，你一下子就能看出存在循环引用。但在实际开发中，指针的关系可不像例子那么清晰，很有可能会不知不觉形成一个链条很长的循环引用，复杂到你根本无法识别，想要找出来基本上是不可能的。想要从根本上杜绝循环引用，光靠 shared_ptr是不行了，必须要用到它的"小帮手"：**weak_ptr**。weak_ptr顾名思义，功能很"弱"。它专门为打破循环引用而设计，只观察指针，不会增加引用计数（弱引用），但在需要的时候，可以调用成员函数lock()，获取shared_ptr（强引用）。刚才的例子里，只要你改用weak_ptr，循环引用的烦恼就会烟消云散：    class Node final    {    public:        using this_type     = Node;        // 注意这里，别名改用weak_ptr        using shared_type   = std::weak_ptr;    public:        shared_type     next;    // 因为用了别名，所以代码不需要改动    };    auto n1 = make_shared();  // 工厂函数创建智能指针    auto n2 = make_shared();  // 工厂函数创建智能指针    n1->next = n2;             // 两个节点互指，形成了循环引用    n2->next = n1;    assert(n1.use_count() == 1);    // 因为使用了weak_ptr，引用计数为1    assert(n2.use_count() == 1);   // 打破循环引用，不会导致内存泄漏    if (!n1->next.expired()) {     // 检查指针是否有效        auto ptr = n1->next.lock();  // lock()获取shared_ptr        assert(ptr == n2);    }小结好了，今天就先到这里。智能指针的话题很大，但是学习的时候我们不可能一下子把所有知识点都穷尽，而是要有优先级。所以我会捡最要紧的先介绍给你，剩下的接口函数等细节，还是需要你根据自己的情况，再去参考一些其他资料深入学习的。我们来回顾一下这节课的重点。1.       智能指针是代理模式的具体应用，它使用 RAII    技术代理了裸指针，能够自动释放内存，无需程序员干预，所以被称为"智能指针"。        2.       如果指针是"独占"使用，就应该选择    unique_ptr，它为裸指针添加了很多限制，更加安全。        3.       如果指针是"共享"使用，就应该选择    shared_ptr，它的功能非常完善，用法几乎与原始指针一样。        4.       应当使用工厂函数 make_unique()、make_shared()    来创建智能指针，强制初始化，而且还能使用 auto    来简化声明。        5.       shared_ptr    有少量的管理成本，也会引发一些难以排查的错误，所以不要过度使用。        我还有一个很重要的建议：**既然你已经理解了智能指针，就尽量不要再使用裸指针、new 和 delete来操作内存了**。如果严格遵守这条建议，用好unique_ptr、shared_ptr，那么，你的程序就不可能出现内存泄漏，你也就不需要去费心研究、使用valgrind等内存调试工具了，生活也会更"美好"一点。课下作业最后是课下作业时间，给你留两个思考题：1.       你觉得 unique_ptr 和 shared_ptr    的区别有哪些？列举一下。        2.       你觉得应该如何在程序里"消灭"new 和    delete？        欢迎你在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友，我们下节课见。![](Images/dd61d7838290dc7555cdc0476488b475.png)savepage-src="https://static001.geekbang.org/resource/image/e5/51/e5298af2501d0156fcc50d50cdb82351.jpg"}