(we suggest at least 4 GB) into the DAX volume using this tool. In the following example, two 
DAX disks are mounted as the P: and Q: volumes. The Big_Image.iso file is copied into the Q: DAX 
volume by using a standard copy operation, started by the FsTool application:
D:\>fstool.exe /copy p:\Big_DVD_Image.iso q:\test.iso 
NTFS / ReFS Tool v0.1 
Copyright (C) 2018 Andrea Allievi (AaLl86) 
Copying "Big_DVD_Image.iso" to "test.iso" file... Success. 
   Total File-Copy execution time: 10 Sec - Transfer Rate: 495.52 MB/s. 
Press any key to exit...
You can check the new test.iso file’s alignment by using the /queryalign command-line argu-
ment of the FsTool.exe application, or by using the queryFileAlignment argument with the built-in 
fsutil.exe tool available in Windows:
D:\>fsutil dax queryFileAlignment q:\test.iso 
  File Region Alignment: 
    Region
Alignment
StartOffset
LengthInBytes 
    0
Other
0
0x1fd000 
    1
Large
0x1fd000
0x3b800000 
    2
Huge
0x3b9fd000
0xc0000000 
    3
Large
0xfb9fd000
0x13e00000 
    4
Other
0x10f7fd000
0x17e000
As you can read from the tool’s output, the first chunk of the file has been stored in 4-KB aligned 
clusters. The offsets shown by the tool are not volume-relative offsets, or LCN, but file-relative 
offsets, or VCN. This is an important distinction because the alignment needed for large and huge 
pages mapping is relative to the volume’s page offset. As the file keeps growing, some of its clus-
ters will be allocated from a volume offset that is 2-MB or 1-GB aligned. In this way, those portions 
of the file can be mapped by the memory manager using large and huge pages. Now, as in the 
previous experiment, let’s try to perform a DAX copy by specifying a target alignment hint:
P:\>fstool.exe /daxcopy p:\Big_DVD_Image.iso q:\test.iso /align:1GB 
NTFS / ReFS Tool v0.1 
Copyright (C) 2018 Andrea Allievi (AaLl86) 
Starting DAX copy... 
   Source file path: p:\Big_DVD_Image.iso. 
   Target file path: q:\test.iso. 
   Source Volume: p:\ - File system: NTFS - Is DAX Volume: True. 
EXPERIMENT: Playing with DAX file alignment
You can witness the different kinds of DAX file alignment using the FsTool application available 
in this book’s downloadable resources. For this experiment, you need to have a DAX volume 
present on your machine. Open a command prompt window and perform the copy of a big file 
(we suggest at least 4 GB) into the DAX volume using this tool. In the following example, two 
DAX disks are mounted as the P: and Q: volumes. The Big_Image.iso file is copied into the Q: DAX 
volume by using a standard copy operation, started by the FsTool application:
D:\>fstool.exe /copy p:\Big_DVD_Image.iso q:\test.iso
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Copying "Big_DVD_Image.iso" to "test.iso" file... Success.
   Total File-Copy execution time: 10 Sec - Transfer Rate: 495.52 MB/s.
Press any key to exit...
You can check the new test.iso file’s alignment by using the /queryalign command-line argu-
ment of the FsTool.exe application, or by using the queryFileAlignment argument with the built-in 
queryFileAlignment argument with the built-in 
queryFileAlignment
fsutil.exe tool available in Windows:
D:\>fsutil dax queryFileAlignment q:\test.iso
  File Region Alignment:
    Region
Alignment
StartOffset
LengthInBytes
    0
Other
0
0x1fd000
    1
Large
0x1fd000
0x3b800000
    2
Huge
0x3b9fd000
0xc0000000
    3
Large
0xfb9fd000
0x13e00000
    4
Other
0x10f7fd000
0x17e000
As you can read from the tool’s output, the first chunk of the file has been stored in 4-KB aligned 
clusters. The offsets shown by the tool are not volume-relative offsets, or LCN, but file-relative
offsets, or VCN. This is an important distinction because the alignment needed for large and huge
pages mapping is relative to the volume’s page offset. As the file keeps growing, some of its clus-
ters will be allocated from a volume offset that is 2-MB or 1-GB aligned. In this way, those portions
of the file can be mapped by the memory manager using large and huge pages. Now, as in the
previous experiment, let’s try to perform a DAX copy by specifying a target alignment hint:
P:\>fstool.exe /daxcopy p:\Big_DVD_Image.iso q:\test.iso /align:1GB
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Starting DAX copy...
   Source file path: p:\Big_DVD_Image.iso.
   Target file path: q:\test.iso.
   Source Volume: p:\ - File system: NTFS - Is DAX Volume: True.
734
CHAPTER 11
Caching and file systems
   Target Volume: q:\ - File system: NTFS - Is DAX Volume: False. 
   Source file size: 4.34 GB 
   Target file alignment (1GB) correctly set. 
Performing file copy... Success! 
   Total execution time: 6 Sec. 
   Copy Speed: 618.81 MB/Sec 
Press any key to exit... 
P:\>fsutil dax queryFileAlignment q:\test.iso 
  File Region Alignment: 
    Region
Alignment
StartOffset
LengthInBytes 
    0
Huge
0
0x100000000 
    1
Large
0x100000000
0xf800000 
    2
Other
0x10f800000
0x17b000
In the latter case, the file was immediately allocated on the next 1-GB aligned cluster. The first 
4-GB (0x100000000 bytes) of the file content are stored in contiguous space. When the memory
manager maps that part of the file, it only needs to use four page director pointer table entries
(PDPTs), instead of using 2048 page tables. This will save physical memory space and drastically
improve the performance while the processor accesses the data located in the DAX section.
To confirm that the copy has been really executed using large pages, you can attach a kernel
debugger to the machine (even a local kernel debugger is enough) and use the /debug switch of
the FsTool application:
P:\>fstool.exe /daxcopy p:\Big_DVD_Image.iso q:\test.iso /align:1GB /debug 
NTFS / ReFS Tool v0.1 
Copyright (C) 2018 Andrea Allievi (AaLl86) 
Starting DAX copy... 
   Source file path: p:\Big_DVD_Image.iso. 
   Target file path: q:\test.iso. 
   Source Volume: p:\ - File system: NTFS - Is DAX Volume: False. 
   Target Volume: q:\ - File system: NTFS - Is DAX Volume: True. 
   Source file size: 4.34 GB 
   Target file alignment (1GB) correctly set. 
Performing file copy... 
 [Debug] (PID: 10412) Source and Target file correctly mapped. 
Source file mapping address: 0x000001F1C0000000 (DAX mode: 1). 
Target file mapping address: 0x000001F2C0000000 (DAX mode: 1). 
File offset : 0x0 - Alignment: 1GB. 
Press enter to start the copy... 
 [Debug] (PID: 10412) File chunk’s copy successfully executed. 
Press enter go to the next chunk / flush the file...
   Target Volume: q:\ - File system: NTFS - Is DAX Volume: False.
   Source file size: 4.34 GB
   Target file alignment (1GB) correctly set.
Performing file copy... Success!
   Total execution time: 6 Sec.
   Copy Speed: 618.81 MB/Sec
Press any key to exit...
P:\>fsutil dax queryFileAlignment q:\test.iso
  File Region Alignment:
    Region
Alignment
StartOffset
LengthInBytes
    0
Huge
0
0x100000000
    1
Large
0x100000000
0xf800000
    2
Other
0x10f800000
0x17b000
In the latter case, the file was immediately allocated on the next 1-GB aligned cluster. The first 
4-GB (0x100000000 bytes) of the file content are stored in contiguous space. When the memory 
manager maps that part of the file, it only needs to use four page director pointer table entries 
(PDPTs), instead of using 2048 page tables. This will save physical memory space and drastically 
improve the performance while the processor accesses the data located in the DAX section. 
To confirm that the copy has been really executed using large pages, you can attach a kernel 
debugger to the machine (even a local kernel debugger is enough) and use the /debug switch of 
the FsTool application:
P:\>fstool.exe /daxcopy p:\Big_DVD_Image.iso q:\test.iso /align:1GB /debug
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Starting DAX copy...
   Source file path: p:\Big_DVD_Image.iso.
   Target file path: q:\test.iso.
   Source Volume: p:\ - File system: NTFS - Is DAX Volume: False.
   Target Volume: q:\ - File system: NTFS - Is DAX Volume: True.
   Source file size: 4.34 GB
   Target file alignment (1GB) correctly set.
Performing file copy...
 [Debug] (PID: 10412) Source and Target file correctly mapped.
Source file mapping address: 0x000001F1C0000000 (DAX mode: 1).
Target file mapping address: 0x000001F2C0000000 (DAX mode: 1).
File offset : 0x0 - Alignment: 1GB.
Press enter to start the copy...
 [Debug] (PID: 10412) File chunk’s copy successfully executed.
Press enter go to the next chunk / flush the file...
CHAPTER 11
Caching and file systems
735
You can see the effective memory mapping using the debugger’s !pte extension. First, you 
need to move to the proper process context by using the .process command, and then you can 
analyze the mapped virtual address shown by FsTool:
8: kd> !process 0n10412 0 
Searching for Process with Cid == 28ac 
PROCESS ffffd28124121080
    SessionId: 2  Cid: 28ac    Peb: a29717c000  ParentCid: 31bc 
    DirBase: 4cc491000  ObjectTable: ffff950f94060000  HandleCount:  49. 
    Image: FsTool.exe 
8: kd> .process /i ffffd28124121080 
You need to continue execution (press 'g' ) for the context 
to be switched. When the debugger breaks in again, you will be in 
the new process context. 
8: kd> g 
Break instruction exception - code 80000003 (first chance) 
nt!DbgBreakPointWithStatus:
fffff804`3d7e8e50 cc              int     3 
8: kd> !pte 0x000001F2C0000000
VA 000001f2c0000000 
PXE at FFFFB8DC6E371018    PPE at FFFFB8DC6E203E58    PDE at FFFFB8DC407CB000 
contains 0A0000D57CEA8867  contains 8A000152400008E7  contains 0000000000000000 
pfn d57cea8   ---DA--UWEV  pfn 15240000  --LDA--UW-V
LARGE PAGE pfn 15240000
PTE at FFFFB880F9600000 
contains 0000000000000000 
LARGE PAGE pfn 15240000
The pte debugger command confirmed that the first 1 GB of space of the DAX file is mapped 
using huge pages. Indeed, neither the page directory nor the page table are present. The FsTool 
application can also be used to set the alignment of already existing files. The FSCTL_SET_DAX_
ALLOC_ALIGNMENT_HINT control code does not actually move any data though; it just provides 
a hint for the new allocated file extents, as the file continues to grow in the future:
D:\>fstool e:\test.iso /align:2MB /offset:0 
NTFS / ReFS Tool v0.1 
Copyright (C) 2018 Andrea Allievi (AaLl86) 
Applying file alignment to "test.iso" (Offset 0x0)... Success. 
Press any key to exit... 
D:\>fsutil dax queryfileAlignment e:\test.iso 
  File Region Alignment: 
    Region
Alignment
StartOffset
LengthInBytes 
    0
Huge
0
0x100000000 
    1
Large
0x100000000
0xf800000 
    2
Other
0x10f800000
0x17b000 
You can see the effective memory mapping using the debugger’s !pte extension. First, you 
need to move to the proper process context by using the .process command, and then you can 
analyze the mapped virtual address shown by FsTool:
8: kd> !process 0n10412 0
Searching for Process with Cid == 28ac
PROCESS ffffd28124121080
    SessionId: 2  Cid: 28ac    Peb: a29717c000  ParentCid: 31bc
    DirBase: 4cc491000  ObjectTable: ffff950f94060000  HandleCount:  49.
    Image: FsTool.exe
8: kd> .process /i ffffd28124121080
You need to continue execution (press 'g' ) for the context
to be switched. When the debugger breaks in again, you will be in
the new process context.
8: kd> g
Break instruction exception - code 80000003 (first chance)
nt!DbgBreakPointWithStatus:
fffff804`3d7e8e50 cc              int     3
8: kd> !pte 0x000001F2C0000000 
VA 000001f2c0000000
PXE at FFFFB8DC6E371018    PPE at FFFFB8DC6E203E58    PDE at FFFFB8DC407CB000
contains 0A0000D57CEA8867  contains 8A000152400008E7  contains 0000000000000000
pfn d57cea8   ---DA--UWEV  pfn 15240000  --LDA--UW-V
LARGE PAGE pfn 15240000
PTE at FFFFB880F9600000
contains 0000000000000000