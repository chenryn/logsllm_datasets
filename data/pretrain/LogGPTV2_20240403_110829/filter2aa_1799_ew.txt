### Experiment: Playing with DAX File Alignment

To experiment with DAX file alignment, you need to have a DAX volume on your machine. You can use the `FsTool` application, available in the downloadable resources, to perform these operations. For this example, we will use two DAX disks mounted as the P: and Q: volumes.

#### Step 1: Copying a Large File
First, copy a large file (at least 4 GB) into the DAX volume using the `FsTool` application. The following command copies `Big_DVD_Image.iso` from the P: volume to `test.iso` on the Q: volume:

```cmd
D:\>fstool.exe /copy p:\Big_DVD_Image.iso q:\test.iso
```

Output:
```
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Copying "Big_DVD_Image.iso" to "test.iso" file... Success.
   Total File-Copy execution time: 10 Sec - Transfer Rate: 495.52 MB/s.
Press any key to exit...
```

#### Step 2: Checking File Alignment
Next, check the alignment of the new `test.iso` file using the `/queryalign` command-line argument of the `FsTool.exe` application or the `fsutil dax queryFileAlignment` command in Windows:

```cmd
D:\>fsutil dax queryFileAlignment q:\test.iso
```

Output:
```
  File Region Alignment:
    Region  Alignment  StartOffset  LengthInBytes
    0       Other      0            0x1fd000
    1       Large      0x1fd000     0x3b800000
    2       Huge       0x3b9fd000   0xc0000000
    3       Large      0xfb9fd000   0x13e00000
    4       Other      0x10f7fd000  0x17e000
```

The output shows that the first chunk of the file is stored in 4-KB aligned clusters. The offsets are file-relative offsets (VCN), not volume-relative offsets (LCN). This distinction is important because the alignment needed for large and huge pages mapping is relative to the volume’s page offset.

As the file grows, some of its clusters will be allocated from a volume offset that is 2-MB or 1-GB aligned, allowing those portions to be mapped by the memory manager using large and huge pages.

#### Step 3: Performing a DAX Copy with Alignment Hint
Now, perform a DAX copy by specifying a target alignment hint. The following command copies `Big_DVD_Image.iso` to `test.iso` on the Q: volume with a 1-GB alignment hint:

```cmd
P:\>fstool.exe /daxcopy p:\Big_DVD_Image.iso q:\test.iso /align:1GB
```

Output:
```
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Starting DAX copy...
   Source file path: p:\Big_DVD_Image.iso.
   Target file path: q:\test.iso.
   Source Volume: p:\ - File system: NTFS - Is DAX Volume: True.
   Target Volume: q:\ - File system: NTFS - Is DAX Volume: False.
   Source file size: 4.34 GB
   Target file alignment (1GB) correctly set.
Performing file copy... Success!
   Total execution time: 6 Sec.
   Copy Speed: 618.81 MB/Sec
Press any key to exit...
```

Check the alignment of the new `test.iso` file again:

```cmd
P:\>fsutil dax queryFileAlignment q:\test.iso
```

Output:
```
  File Region Alignment:
    Region  Alignment  StartOffset  LengthInBytes
    0       Huge       0            0x100000000
    1       Large      0x100000000  0xf800000
    2       Other      0x10f800000  0x17b000
```

In this case, the file was immediately allocated on the next 1-GB aligned cluster. The first 4-GB (0x100000000 bytes) of the file content are stored in contiguous space. When the memory manager maps that part of the file, it only needs to use four page directory pointer table entries (PDPTs) instead of 2048 page tables, saving physical memory and improving performance.

#### Step 4: Confirming the Use of Large Pages
To confirm that the copy has been executed using large pages, attach a kernel debugger to the machine and use the `/debug` switch of the `FsTool` application:

```cmd
P:\>fstool.exe /daxcopy p:\Big_DVD_Image.iso q:\test.iso /align:1GB /debug
```

Output:
```
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Starting DAX copy...
   Source file path: p:\Big_DVD_Image.iso.
   Target file path: q:\test.iso.
   Source Volume: p:\ - File system: NTFS - Is DAX Volume: False.
   Target Volume: q:\ - File system: NTFS - Is DAX Volume: True.
   Source file size: 4.34 GB
   Target file alignment (1GB) correctly set.
Performing file copy...
 [Debug] (PID: 10412) Source and Target file correctly mapped.
Source file mapping address: 0x000001F1C0000000 (DAX mode: 1).
Target file mapping address: 0x000001F2C0000000 (DAX mode: 1).
File offset : 0x0 - Alignment: 1GB.
Press enter to start the copy...
 [Debug] (PID: 10412) File chunk’s copy successfully executed.
Press enter go to the next chunk / flush the file...
```

Use the debugger’s `!pte` extension to see the effective memory mapping. First, move to the proper process context using the `.process` command, and then analyze the mapped virtual address shown by `FsTool`:

```cmd
8: kd> !process 0n10412 0
Searching for Process with Cid == 28ac
PROCESS ffffd28124121080
    SessionId: 2  Cid: 28ac    Peb: a29717c000  ParentCid: 31bc
    DirBase: 4cc491000  ObjectTable: ffff950f94060000  HandleCount:  49.
    Image: FsTool.exe
8: kd> .process /i ffffd28124121080
You need to continue execution (press 'g' ) for the context
to be switched. When the debugger breaks in again, you will be in
the new process context.
8: kd> g
Break instruction exception - code 80000003 (first chance)
nt!DbgBreakPointWithStatus:
fffff804`3d7e8e50 cc              int     3
8: kd> !pte 0x000001F2C0000000
VA 000001f2c0000000
PXE at FFFFB8DC6E371018    PPE at FFFFB8DC6E203E58    PDE at FFFFB8DC407CB000
contains 0A0000D57CEA8867  contains 8A000152400008E7  contains 0000000000000000
pfn d57cea8   ---DA--UWEV  pfn 15240000  --LDA--UW-V
LARGE PAGE pfn 15240000
PTE at FFFFB880F9600000
contains 0000000000000000
```

The `!pte` command confirms that the first 1 GB of space of the DAX file is mapped using huge pages. Neither the page directory nor the page table are present, indicating the use of large pages.

#### Step 5: Setting Alignment for Existing Files
The `FsTool` application can also be used to set the alignment of already existing files. The `FSCTL_SET_DAX_ALLOC_ALIGNMENT_HINT` control code provides a hint for the new allocated file extents without moving any data:

```cmd
D:\>fstool e:\test.iso /align:2MB /offset:0
```

Output:
```
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Applying file alignment to "test.iso" (Offset 0x0)... Success.
Press any key to exit...
```

Check the alignment of the modified `test.iso` file:

```cmd
D:\>fsutil dax queryfileAlignment e:\test.iso
```

Output:
```
  File Region Alignment:
    Region  Alignment  StartOffset  LengthInBytes
    0       Huge       0            0x100000000
    1       Large      0x100000000  0xf800000
    2       Other      0x10f800000  0x17b000
```

This completes the experiment, demonstrating how to work with DAX file alignment and verify the use of large and huge pages.