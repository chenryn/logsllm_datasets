The creation of a range using `range(start, step=..., length=...)` may result
in a stack overflow if either of the start or step values is an
`AbstractFloat` that is not one of the IEEE ones.
Example:
    julia> range(1.0, step=1, length=10)
    1.0:1.0:10.0
    julia> range(big(1.0), step=1, length=10)
    ERROR: StackOverflowError:
    Stacktrace:
     [1] _range(::BigFloat, ::BigFloat, ::Nothing, ::Int64) at ./range.jl:105 (repeats 80000 times)
    julia> range(1.0, step=big(1.0), length=10)
    ERROR: StackOverflowError:
    Stacktrace:
     [1] _range(::BigFloat, ::BigFloat, ::Nothing, ::Int64) at ./range.jl:105 (repeats 80000 times)
This seems to be the case since v0.7, I currently tested on v1.1.
The culprit is `_range` in `range.jl`, more specifically this line. In case
`start` and `step` are any combination of an `AbstractFloat` and a `Real`, the
logic in `_range` promotes them to the same floating point type.
However, the subsequent call to `_range` with equal types is intercepted only
for IEEE types elsewhere in `twiceprecision.jl`, specifically here. There is
no alternative fallback, hence the stack overflow.
The solution might simply be to add a fallback in `range.jl`, such as
    _range(a::T, step::T, ::Nothing, len::Integer) where {T <: AbstractFloat} =
        _rangestyle(OrderStyle(T), ArithmeticStyle(T), a, step, len)
This is similar to the line further below.
Note that I did NOT test the above solution, sorry, as I've never changed
anything in base and I have no working julia build to do so :-)