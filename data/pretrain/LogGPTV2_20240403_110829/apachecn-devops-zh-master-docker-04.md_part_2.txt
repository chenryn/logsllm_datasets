```
$ docker container logs --since 2018-08-25T18:00 -t nginx-test
```
`-t`标志是`--timestamp`的简称；此选项预先设置 Docker 捕获输出的时间:
![](img/5adad768-d3f4-48cf-861f-2c2928badd3b.png)
# 顶端
`top`命令相当简单；它列出了在您指定的容器中运行的进程，使用如下:
```
$ docker container top nginx-test
```
该命令的输出如下所示:
![](img/4a4ecf85-0897-4c4f-ae0a-0d837d554327.png)
从下面的终端输出可以看出，我们有两个进程正在运行，这两个进程都是 nginx，这是意料之中的。
# 统计数据
`stats`命令提供指定容器的实时信息，或者，如果您没有通过`NAME`或`ID`容器，则提供所有运行容器的实时信息:
```
$ docker container stats nginx-test
```
从下面的终端输出可以看出，我们得到了指定容器的`CPU`、`RAM`、`NETWORK`、`DISK IO`和`PIDS`的信息:
![](img/b65c9bb2-62b3-4d50-bfd7-6fc5586a4ad9.png)
我们也可以通过`-a`旗；这是`--all`的缩写，显示所有容器，运行与否。例如，尝试运行以下命令:
```
$ docker container stats -a
```
您应该会收到如下输出:
![](img/290518ab-d015-4073-99f4-96ba471a7fd3.png)
但是，从前面的输出中可以看到，如果容器没有运行，就没有任何资源被利用，所以除了为您提供有多少容器在运行以及资源在哪里被使用的可视化表示之外，它并没有真正增加任何价值。
还值得指出的是，`stats`命令显示的信息仅为实时；Docker 不会像`logs`命令那样记录资源利用率并使其可用。在后面的章节中，我们将着眼于更长期的存储资源利用率。
# 资源限制
我们运行的最后一个命令向我们展示了容器的资源利用率；默认情况下，启动时，如果需要，容器将被允许消耗主机上的所有可用资源。我们可以限制容器所能消耗的资源；让我们从更新`nginx-test`容器的资源配额开始。
通常，我们会在使用`run`命令启动容器时设置限制；例如，为了将 CPU 优先级减半并设置`128M`的内存限制，我们会使用以下命令:
```
$ docker container run -d --name nginx-test --cpu-shares 512 --memory 128M -p 8080:80 nginx
```
然而，我们并没有以任何资源限制来启动我们的`nginx-test`容器，这意味着我们需要更新我们已经运行的容器；为此，我们可以使用`update`命令。现在，您可能认为这应该只需要运行以下命令:
```
$ docker container update --cpu-shares 512 --memory 128M nginx-test
```
但实际上，运行前面的命令会产生一个错误:
```
Error response from daemon: Cannot update container 3f2ce315a006373c075ba7feb35c1368362356cb5fe6837acf80b77da9ed053b: Memory limit should be smaller than already set memoryswap limit, update the memoryswap at the same time
```
那么`memoryswap`目前设定的上限是多少呢？为了找出这个问题，我们可以使用`inspect`命令来显示我们运行的容器的所有配置数据；只需运行以下命令:
```
$ docker container inspect nginx-test
```
通过运行前面的命令可以看到，有很多配置数据。当我运行该命令时，返回了一个 199 行的 JSON 数组。让我们使用`grep`命令过滤掉包含单词`memory`的行:
```
$ docker container inspect nginx-test | grep -i memory
```
这将返回以下配置数据:
```
 "Memory": 0,
 "KernelMemory": 0, "MemoryReservation": 0,
 "MemorySwap": 0,
 "MemorySwappiness": null,
```
一切都设置为`0`，那么`128M`怎么可能比`0`小呢？
在资源配置的上下文中，`0`实际上是默认值，意味着没有限制——请注意每个数值后缺少`M`。这意味着我们的更新命令实际上应该如下所示:
```
$ docker container update --cpu-shares 512 --memory 128M --memory-swap 256M nginx-test
```
Paging is a memory management scheme in which the kernel stores and retrieves, or swaps, data from secondary storage for use in the main memory. This allows processes to exceed the size of physical memory available.
默认情况下，当您将`--memory`设置为运行命令的一部分时，Docker 会将`-- memory-swap`的大小设置为`--memory`的两倍。如果您现在运行`docker container stats nginx-test`，您应该会看到我们的限制已经到位:
![](img/77a31bee-f5aa-47fa-bc45-c87ce4e5d593.png)
此外，重新运行`docker container inspect nginx-test | grep -i memory`将显示如下变化:
```
 "Memory": 134217728,
 "KernelMemory": 0,
 "MemoryReservation": 0,
 "MemorySwap": 268435456,
 "MemorySwappiness": null,
```
The values when running `docker container inspect` are all shown in bytes rather megabytes (MB).
# 容器状态和杂项命令
在本节的最后一部分，我们将查看容器可能处于的各种状态，以及作为`docker container`命令的一部分，我们尚未覆盖的少数剩余命令。
运行`docker container ls -a`应显示类似于以下终端输出的内容:
![](img/5772ae4a-e0c4-4b08-9eaa-6736196039a3.png)
如你所见，我们有两个容器；一个状态为`Up`，另一个状态为`Exited`。在我们继续之前，让我们再推出五个容器。要快速执行此操作，请运行以下命令:
```
$ for i in {1..5}; do docker container run -d --name nginx$(printf "$i") nginx; done
```
当运行`docker container ls -a`时，你应该看到你的五个新容器，命名为`nginx1`到`nginx5`:
![](img/93f06e05-03cc-4a87-afa7-405edc4fc671.png)
# 暂停和取消暂停
我们来看看暂停`nginx1`。为此，只需运行以下命令:
```
$ docker container pause nginx1
```
运行`docker container ls`会显示容器状态为`Up`，但同时显示`Paused`:
![](img/1d9542b7-02c5-4c7d-9c9d-2231f3be2885.png)
请注意，我们不必使用`-a`标志来查看关于容器的信息，因为该过程尚未终止；取而代之的是，它已经被暂停使用`cgroups`冷冻机。有了`cgroups`冰柜，这个过程并不知道它已经暂停，这意味着它可以恢复。
您可能已经猜到，您可以使用`unpause`命令恢复暂停的容器，如下所示:
```
$ docker container unpause nginx1
```
如果需要冻结容器的状态，此命令非常有用；例如，可能您的一个容器出了故障，您需要稍后进行一些调查，但不希望它对其他正在运行的容器产生负面影响。
# 停止、启动、重启和终止
接下来，我们有`stop`、`start`、`restart`和`kill`命令。我们已经使用了`start`命令来恢复状态为`Exited`的容器。`stop`命令的工作方式与我们使用 *Ctrl* + *C* 从前台运行的容器中分离时完全相同。运行以下命令:
```
$ docker container stop nginx2
```
有了这个，一个请求被发送到进程，让它终止，称为`SIGTERM`。如果进程在宽限期内没有自行终止，则发送一个终止信号，称为`SIGKILL`。这将立即终止进程，不给它任何时间来完成任何导致延迟的事情；例如，将数据库查询的结果提交到磁盘。
因为这可能是不好的，Docker 通过使用`-t`标志为您提供了覆盖默认宽限期的选项，即`10`秒；这是`--time`的简称。例如，运行以下命令将在发送`SIGKILL`之前等待`60`秒，以防需要发送该命令来终止进程:
```
$ docker container stop -t 60 nginx3
```
`start`命令，正如我们已经看到的，将启动进程备份；然而，与`pause`和`unpause`命令不同，在这种情况下，该过程使用最初启动它的标志从头开始，而不是从它停止的地方开始:
```
$ docker container start nginx2 nginx3
```
`restart`命令是以下两个命令的组合；它停下来，然后启动你经过的`ID`或`NAME`容器。还有，和`stop`一样，你可以通过`-t`旗:
```
$ docker container restart -t 60 nginx4
```
最后，您还可以选择通过运行`kill`命令立即向容器发送`SIGKILL`命令:
```
$ docker container kill nginx5 
```
# 移除容器
让我们使用`docker container ls -a`命令检查正在运行的容器。当我运行该命令时，我可以看到我有两个状态为`Exited`的容器，其他所有容器都在运行:
![](img/4bcbe8c0-ef73-4ee3-892f-736df9b751ed.png)
要移除两个退出的容器，我可以简单地运行`prune`命令:
```
$ docker container prune
```
这样做时，会弹出一个警告，要求您确认是否真的确定，如下图所示:
![](img/6bf28535-d586-446d-90c9-652a5be114b0.png)
您可以使用`rm`命令选择要移除的容器，这里显示了一个示例:
```
$ docker container rm nginx4
```
另一种选择是将`stop`和`rm`命令串在一起:
```
$ docker container stop nginx3 && docker container rm nginx3
```
然而，考虑到您现在可以使用`prune`命令，这可能太费力了，尤其是当您试图移除容器时，并且可能不太关心进程终止的优雅程度。
请随意使用您喜欢的任何方法移除容器的剩余部分。
# 杂项命令
在本节的最后一部分，我们将看几个在日常使用 Docker 时可能不会用到太多的命令。第一个是`create`。
`create`命令与`run`命令非常相似，只是它不启动容器，而是准备和配置一个:
```
$ docker container create --name nginx-test -p 8080:80 nginx
```
您可以通过运行`docker container ls -a`，然后用`docker container start nginx-test`启动容器来检查您创建的容器的状态，然后再次检查状态:
![](img/0ce749fe-7c8c-4322-8f83-59b00098ab61.png)
接下来我们要快速看的命令是`port`命令；这将显示端口以及容器的任何端口映射:
```
$ docker container port nginx-test
```
它应该返回以下内容:
```
80/tcp -> 0.0.0.0:8080
```
我们已经知道这一点，因为它是我们配置的。此外，端口列在`docker container ls`输出中。
我们要快速看的最后一个命令是`diff`命令。此命令打印一个列表，列出自容器启动以来添加的(`A`)或更改的(`C`)所有文件，因此基本上，列出了我们用来启动容器的原始映像和现在存在的文件之间在文件系统上的差异。
在运行该命令之前，让我们使用`exec`命令在`nginx-test`容器内创建一个空白文件: