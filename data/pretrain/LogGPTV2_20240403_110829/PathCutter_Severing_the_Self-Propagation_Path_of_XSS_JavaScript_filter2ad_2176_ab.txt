  side.	
– Pseudodomain	
  encapsula6on.	
isolate.x.com	
content.x.com	
a’acker	
It	
  cannot	
  break	
isolate.x.com	
(diﬀerent	
  origin).	
isolate.x.com	
content.x.com	
Secret	
  token	
  is	
required.	
content.x.com	
13	
  Request	
  Authen6ca6on	
for	
  Server	
  Modiﬁca6on	
•  Iden6fying	
  requests	
  from	
  client-­‐side	
– Secret	
  token	
•  Inser6on	
  posi6on:	
  Each	
  request	
  that	
  will	
  modify	
  server-­‐
side	
  contents.	
•  Checking	
  requests’	
  permission	
– Checking	
  posi6on:	
  Database	
  opera6on.	
  (A	
  narrow	
interface	
  that	
  each	
  modifying	
  request	
  will	
  go	
through.)	
14	
  Implementa6on	
  Two	
  (Proxy)	
•  Dividing	
  views:	
  by	
  diﬀerent	
  client-­‐side	
  URLs.	
•  Permissions	
  for	
  diﬀerent	
  views:	
– Possible	
  outgoing	
  post	
  URL	
  from	
  those	
  URLs	
15	
  View	
  Isola6on	
  for	
  Proxy	
•  Isola6ng	
  views	
  at	
  client	
  side	
– The	
  same	
  as	
  implementa6on	
  one.	
Proxy	
isolate.x.com	
Redirect	
  to	
isolate.x.com	
Request	
content.x.com/y.php	
<iframe	
  src	
  =	
“content.x.com/y.php?
token	
  =	
  ***	
Web	
Server	
isolate.x.com	
content.x.com	
16	
  Request	
  Authen6ca6on	
  for	
  Proxy	
•  Iden6fying	
  requests	
  from	
  client-­‐side	
– Referer	
  header	
•  Speciﬁed	
  by	
  the	
  browser.	
  A’ackers	
  cannot	
  change	
  it.	
•  Checking	
  requests’	
  permissions	
– Checking	
  posi6on:	
  Proxy.	
– Method:	
  See	
  if	
  the	
  view	
  has	
  the	
  permission	
  to	
send	
  the	
  request.	
17	
  Case	
  Study	
  for	
  Real	
  World	
Worms	
•  XSS	
  Worm	
  in	
  Renren	
  (Facebook	
  in	
  China)	
Flash	
insert	
  malicious	
scripts	
  inside	
  the	
  web	
page	
18	
Share	
  on	
  the	
behalf	
  of	
current	
  user	
View	
  One	
share	
click	
Request	
to	
  share	
View	
  Two	
19	
•  Yamanner	
  Worm	
Click	
Send	
  emails	
  to	
all	
  your	
  contacts	
20	
Compose	
  email	
Diﬀerent	
views	
Email	
  body	
Send	
  email	
21	
Evalua6on	
•  Memory	
  Overhead	
– Normally,	
  #	
  of	
  frames	
  is	
  not	
  high	
  since	
  comments	
can	
  be	
  hidden.	
•  Rendering	
  Time	
  Overhead.	
– Less	
  than	
  3.5%	
  for	
  Elgg	
22	
Conclusions	
•  We	
  cut	
  oﬀ	
  the	
  propaga6on	
  path	
  of	
  XSS	
  worms	
through	
  view	
  separa6on	
  by	
  psuedodomain	
encapsula6on	
  and	
  request	
  authen6ca6on.	
•  We	
  implement	
  PathCu’er	
  by	
  proxy	
  assistance	
and	
  server	
  modiﬁca6on.	
•  We	
  evaluate	
  PathCu’er	
  on	
  5	
  real-­‐world	
worms	
  and	
  2	
  proof-­‐of-­‐concept	
  worms.	
23	
  Thanks!	
  Ques6ons?	
24	
  Backup	
25	
  Comparison	
  with	
  Exis6ng	
  Works	
Group	
  Two:	
  Worm	
  preven6on	
Group	
  One:	
  Mi6ga6ng	
  XSS	
Spectator	
  Sun	
  et	
  al.	
  Xu	
  et	
  al.	
  BluePrint	
  Plug-­‐in	
Patches	
  Barth	
  et	
  al.	
  Saxena	
  et	
  al.	
  PathCu’er	
Blocking	
  Step	
Polymorphic	
Worm	
4	
Yes	
3	
  No	
4	
  Yes	
1	
  Yes	
1	
  Yes	
1	
  Yes	
2	
  Yes	
1	
  Yes	
  Yes	
Plug-­‐in	
  XSS	
Worms	
Early-­‐Stage	
Preven6on	
Types	
  of	
  XSS	
that	
  Can	
  Be	
Defended	
Deployment	
Passive/Ac6ve	
Monitoring	
All	
Server	
  or	
Proxy	
No	
Yes	
No	
Passively	
Observable	
Worms	
  Yes	
Tradi6onal	
Server-­‐side	
XSS	
  Worms	
  All	
  Yes	
  Yes	
  Yes	
Content	
Sniﬃng	
  XSS	
Worms	
DOM-­‐Based	
XSS	
  Worms	
All	
Server	
  or	
Proxy	
Client	
Server	
Server	
Client	
Client	
Client	
Ac6ve	
Passive	
Passive	
Ac6ve	
Ac6ve	
Ac6ve	
Ac6ve	
Ac6ve	
26	
Limita6on	
•  Need	
  to	
  know	
  the	
  seman6cs	
  of	
  web	
applica6on	
•  Only	
  prevent	
  worm	
  behavior	
  but	
  not	
  all	
  the	
damages	
27	
Exis6ng	
  solu6ons	
•  Spectator	
But	
  it	
  can	
  only	
  detect	
  the	
worm	
  when	
  it	
  spreads	
  for	
  a	
while!	
proxy	
the	
  same	
injected	
  tag	
the	
  same	
injected	
  tag	
…	
  if	
  it	
  reaches	
  a	
  threshold,	
report	
  it.	
28	
Exis6ng	
  solu6ons	
•  Esorics	
  09	
The	
  same	
  payload	
Deny!	
Payload:	
abcdefg	
Payload:	
abcdefg	
But	
(1)	
  Payload	
  may	
  change.	
(2)	
  Pure	
  client-­‐side	
  solu6on.	
Firefox	
  Plugin	
malicious	
benign	
29	
URL	
  graph	
  provided	
  by	
  the	
  server	
  or	
  a	
third-­‐party	
blogX/index.php	
blogX/post-­‐comment.php	
blogX/op6ons.php	
…	
blogX/x.php	
blogX/update-­‐
op6ons.php	
blogY/index.php	
30