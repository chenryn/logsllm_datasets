            print("        >>> INVALID Write: addr=0x{0:016x} size={1} data=0x{2:016x}".format(address, size, value))
        else:
            print("        >>> INVALID Read: addr=0x{0:016x} size={1}".format(address, size))   
    def force_crash(uc_error):
        # This function should be called to indicate to AFL that a crash occurred during emulation.
        # Pass in the exception received from Uc.emu_start()
        mem_errors = [
            UC_ERR_READ_UNMAPPED, UC_ERR_READ_PROT, UC_ERR_READ_UNALIGNED,
            UC_ERR_WRITE_UNMAPPED, UC_ERR_WRITE_PROT, UC_ERR_WRITE_UNALIGNED,
            UC_ERR_FETCH_UNMAPPED, UC_ERR_FETCH_PROT, UC_ERR_FETCH_UNALIGNED,
        ]
        if uc_error.errno in mem_errors:
            # Memory error - throw SIGSEGV
            os.kill(os.getpid(), signal.SIGSEGV)
        elif uc_error.errno == UC_ERR_INSN_INVALID:
            # Invalid instruction - throw SIGILL
            os.kill(os.getpid(), signal.SIGILL)
        else:
            # Not sure what happened - throw SIGABRT
            os.kill(os.getpid(), signal.SIGABRT)
    def main():
        parser = argparse.ArgumentParser(description="Test harness for simple_target.bin")
        parser.add_argument('input_file', type=str, help="Path to the file containing the mutated input to load")
        parser.add_argument('-d', '--debug', default=False, action="store_true", help="Enables debug tracing")
        args = parser.parse_args()
        # Instantiate a MIPS32 big endian Unicorn Engine instance
        uc = Uc(UC_ARCH_MIPS, UC_MODE_MIPS32 + UC_MODE_BIG_ENDIAN)
        if args.debug:
            uc.hook_add(UC_HOOK_BLOCK, unicorn_debug_block)
            uc.hook_add(UC_HOOK_CODE, unicorn_debug_instruction)
            uc.hook_add(UC_HOOK_MEM_WRITE | UC_HOOK_MEM_READ, unicorn_debug_mem_access)
            uc.hook_add(UC_HOOK_MEM_WRITE_UNMAPPED | UC_HOOK_MEM_READ_INVALID, unicorn_debug_mem_invalid_access)
        #---------------------------------------------------        # Load the binary to emulate and map it into memory
        print("Loading data input from {}".format(args.input_file))
        binary_file = open(BINARY_FILE, 'rb')
        binary_code = binary_file.read()
        binary_file.close()
        # Apply constraints to the mutated input
        if len(binary_code) > CODE_SIZE_MAX:
            print("Binary code is too large (> {} bytes)".format(CODE_SIZE_MAX))
            return
        # Write the mutated command into the data buffer
        uc.mem_map(CODE_ADDRESS, CODE_SIZE_MAX)
        uc.mem_write(CODE_ADDRESS, binary_code)
        # Set the program counter to the start of the code
        start_address = CODE_ADDRESS          # Address of entry point of main()
        end_address   = CODE_ADDRESS + 0xf4   # Address of last instruction in main()
        uc.reg_write(UC_MIPS_REG_PC, start_address)
        #-----------------        # Setup the stack
        uc.mem_map(STACK_ADDRESS, STACK_SIZE)
        uc.reg_write(UC_MIPS_REG_SP, STACK_ADDRESS + STACK_SIZE)
        #-----------------------------------------------------        # Emulate 1 instruction to kick off AFL's fork server
        #   THIS MUST BE DONE BEFORE LOADING USER DATA! 
        #   If this isn't done every single run, the AFL fork server 
        #   will not be started appropriately and you'll get erratic results!
        #   It doesn't matter what this returns with, it just has to execute at
        #   least one instruction in order to get the fork server started.
        # Execute 1 instruction just to startup the forkserver
        print("Starting the AFL forkserver by executing 1 instruction")
        try:
            uc.emu_start(uc.reg_read(UC_MIPS_REG_PC), 0, 0, count=1)
        except UcError as e:
            print("ERROR: Failed to execute a single instruction (error: {})!".format(e))
            return
        #-----------------------------------------------        # Load the mutated input and map it into memory
        # Load the mutated input from disk
        print("Loading data input from {}".format(args.input_file))
        input_file = open(args.input_file, 'rb')
        input = input_file.read()
        input_file.close()
        # Apply constraints to the mutated input
        if len(input) > DATA_SIZE_MAX:
            print("Test input is too long (> {} bytes)".format(DATA_SIZE_MAX))
            return
        # Write the mutated command into the data buffer
        uc.mem_map(DATA_ADDRESS, DATA_SIZE_MAX)
        uc.mem_write(DATA_ADDRESS, input)
        #------------------------------------------------------------        # Emulate the code, allowing it to process the mutated input
        print("Executing until a crash or execution reaches 0x{0:016x}".format(end_address))
        try:
            result = uc.emu_start(uc.reg_read(UC_MIPS_REG_PC), end_address, timeout=0, count=0)
        except UcError as e:
            print("Execution failed with error: {}".format(e))
            force_crash(e)
        print("Done.")
    if __name__ == "__main__":
        main()
创建一些测试输入并自行运行测试工具，以验证它是否按预期模拟代码（和崩溃）。现在测试工具已启动并运行，创建一些示例输入并在 afl-fuzz
下运行，如下所示。
确保添加 '-U' 参数以指定 Unicorn Mode，我建议将内存限制参数（'-m'）设置为 'none'，因为运行 Unicorn
脚本可能需要相当多的 RAM。遵循正常的 AFL 惯例，将包含文件路径的参数替换为使用 '@@' 进行模糊处理（有关详细信息，请参阅AFL的自述文件）
    afl-fuzz -U -m none -i /path/to/sample/inputs -o /path/to/results 
        -- python simple_test_harness.py @@
如果一切按计划进行，AFL 将启动并很快找到一些崩溃点。
然后，您可以手动通过测试工具运行崩溃输入（在results / crashes /目录中找到），以了解有关崩溃原因的更多信息。我建议保留 Unicorn
测试工具的第二个副本，并根据需要进行修改以调试仿真中的崩溃。例如，您可以打开指令跟踪，使用 Capstone 进行反汇编，在关键点转储寄存器等。
一旦您认为自己有一个有效的崩溃，就需要找到一种方法将其传递给仿真之外的实际程序，并验证崩溃是否适用于实际物理系统。
**值得注意的是，整体模糊测速度和性能在很大程度上取决于测试线束的速度** 。基于 Python 的大型复杂测试工具的运行速度比紧密优化的基于 C
的工具要慢得多。如果您计划运行大量长时间运行的模糊器，请务必考虑这一点。作为一个粗略的参考点，我发现基于 C 的线束每秒可以比类似的 Python
线束多执行 5-10 倍的执行。
## 更深层次的用法
虽然我最初创建它是为了发现嵌入式系统中的漏洞（如 Project Zero 和 Comsecuris 在 Broadcom WiFi
芯片组中发现的那些漏洞），但在我的后续博客文章中，我将发布工具并描述使用 afl-unicorn 进行模糊测试的方法在 Windows，Linux 和
Android 进程中模拟功能。
  * Afl-unicorn 不仅可用于查找崩溃，还可用于进行基本路径查找。在测试工具中，如果执行特定指令（或您选择的任何其他条件），您可以强制崩溃。 
AFL 将捕获这些“崩溃”并存储导致满足该条件的输入。这可以替代符号分析，以发现深入分析逻辑树的输入。  
Unicorn 和 Capstone 的制造商最近发布的图片暗示 AFL 支持可能即将推出......
看看他们创造了哪些功能，以及是否有任何合作机会来优化我们的工具。
## 结尾
我在美国俄亥俄州哥伦布的 Battelle 担任网络安全研究员时，开发了 afl-unicorn 作为内部研究项目。 Battelle
是一个很棒的工作场所，afl-unicorn 只是在那里进行的新型网络安全研究的众多例子之一。
有关 Battelle 赞助的更多项目，请查看 Chris Domas和John Toterhi 之前的工作。有关 Battelle
职业生涯的信息，请查看他们的职业页面。
当然，如果没有 AFL 和 Unicorn Engine，这一切都不可能实现。 Alex Hude 为 IDA 提供了很棒的 uEmu
插件，其他许多灵感来源于 NCC 集团的 AFLTriforce 项目。
**原文链接** ：