title:Inspecting TLS Anytime Anywhere: A New Approach to TLS Interception
author:Joonsang Baek and
Jongkil Kim and
Willy Susilo
Inspecting TLS Anytime Anywhere:
A New Approach to TLS Interception
Joonsang Baek
University of Wollongong
Wollongong, NSW, Australia
PI:EMAIL
Jongkil Kim
University of Wollongong
Wollongong, NSW, Australia
PI:EMAIL
Willy Susilo
University of Wollongong
Wollongong, NSW, Australia
PI:EMAIL
ABSTRACT
Transport Layer Security (TLS) is one of the most widely-used se-
curity protocols for the modern internet. However, TLS does not
differentiate regular users from threat actors who want to evade
detection through the privacy provided by TLS. For this reason,
organizations have been increasingly interested in middlebox tech-
nology whereby encrypted TLS traffic can be filtered and inspected.
So far, the majority of middleboxes utilizes the ‚ÄúTLS interception
proxy‚Äù technique in which a middlebox acts as a proxy to intercept
the TLS traffic between the user and the server. However, this
approach has the problem of forcing the user to accept the proxy‚Äôs
certificate. It also has a performance issue as the proxy needs to
decrypt and re-encrypt the traffic.
In this paper, we make a new approach to TLS inspection. Our
solution, which we call ‚ÄúIA2-TLS (Inspecting TLS Anytime Any-
where)‚Äù, is based on the idea of securely binding the middlebox‚Äôs
‚Äúinspection key‚Äù with the random nonces used in the TLS proto-
col. Since IA2-TLS does not employ the TLS interception proxy
technique, it does not have the problem of the proxy certificate
management and performance degradation. Inspection through
IA2-TLS is not confined to a specific location and can be provided
at any areas along the path of the network. Moreover, the inspec-
tion can be performed in real time or non-real time, depending on
the user‚Äôs preference or network circumstances.
We provide formal security analysis that the master-secret of the
IA2-TLS protocol remains secure if the inspection key is kept secret.
We also present our implementation of IA2-TLS, which shows the
feasibility of our approach.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Security protocols.
KEYWORDS
TLS; TLS/SSL inspection
ACM Reference Format:
Joonsang Baek, Jongkil Kim, and Willy Susilo. 2020. Inspecting TLS Any-
time Anywhere: A New Approach to TLS Interception. In Proceedings of
the 15th ACM Asia Conference on Computer and Communications Security
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ‚Äô20, October 5‚Äì9, 2020, Taipei, Taiwan
¬© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-6750-9/20/10...$15.00
https://doi.org/10.1145/3320269.3372199
(ASIA CCS‚Äô20), October 5‚Äì9, 2020, Taipei, Taiwan. ACM, New York, NY, USA,
11 pages. https://doi.org/10.1145/3320269.3372199
1 INTRODUCTION
Data encryption over the network is an upward trend. According
to the Google transparency report [23], the percentage of HTTPS
page loadings (in the Chrome browser) increases from 67 percent
in May 2017 to 90 percent in May 2019 in the United States. Now,
among the top 100 non-Google sites on the Internet, which account
for about 25 percent of all website traffic worldwide, 96 websites
support HTTPS and 90 websites set HTTPS as default.
Transport Layer Security (TLS) is the standard protocol for
HTTPS to provide confidentiality and authentication services. Al-
though TLS brings benefits to the general public in terms of privacy
protection, threat actors can also be benefited from it by hiding
their activities through TLS. To deal with such evasion, more and
more organizations are interested in setting up security controls
over TLS traffic to conduct activities such as intrusion detection, fil-
tering and enforcing compliance with corporate policies. However,
because TLS provides an end-to-end encrypted channel by nature,
it is impossible to implement such controls along the path of the
network. The solution for mitigating this limitation is to enable a
middlebox to inspect packet payloads.
TLS middleboxes can be realized in several ways. One of them is
to run a server, often referred to as a ‚ÄúTLS/SSL proxy‚Äù, to mount
a typical man-in-the-middle (MITM) attack to intercept the traffic
between a client and a server [12]. However, this approach, termed
‚ÄúTLS interception proxy‚Äù, causes several complications including
the management of ‚Äúsubstitute certificate‚Äù, which is to make the
user to establish an encrypted connection to the proxy rather than
the intended web site [12][10][18]. Also, due to the fact that the
proxy needs to decrypt and re-encrypt the traffic in real time to
conduct the MITM attack, performance degradation in terms of
computation and communication is always expected. If a non-real
time inspection such as post-incident review (PIR) is required, a
completely different method should be employed.
There are other middlebox approaches which are not based on
the TLS interception proxy method. For example, the techniques
presented in [21] and [4] conduct deep packet inspection (DPI) over
encrypted traffic without decrypting it for user privacy. However,
the problem of those techniques is that heavy computations are
required in the setup stage or it has a long detection time.
Alternative methods without depending on middleboxes also
exist. In an extreme case, there was an attempt to obtain TLS private
keys [19]. Downgrading cryptographic components in TLS such as
forcing the peers to agree on weak TLS cryptographic primitives
[7] seems more prevalent. A notorious example is the incident of
Session 3: Network Security ASIA CCS '20, October 5‚Äì9, 2020, Taipei, Taiwan116Dual_EC_DRBG [8], which was to weaken random number genera-
tion in TLS. The biggest problem of this type of approach is that the
weakened cryptographic primitives in the TLS product will affect
not only the user originally being targeted but also others using
the same product. If TLS inspection were a reason for downgrading
cryptographic primitives, a better approach would be desired.
Our Contributions. In this paper, we present a new approach to
TLS inspection. The proposed protocol, IA2-TLS (a denotation for
‚ÄúInspecting TLS Anytime Anywhere‚Äù), has the following features:
(i) IA2-TLS is not based on the TLS interception proxy tech-
nique and hence does not have to decrypt and re-encrypt the
traffic in real time. Importantly, there is no need to handle
TLS proxy‚Äôs certificate and to force the user to accept this.
Therefore, our protocol is efficient and effective.
(ii) Inspection through IA2-TLS is not confined to a specific
location such as a proxy server and can be provided at any
locations along the path of the network. That is, IA2-TLS
provides a location-independent inspection.
(iii) Inspection service can be provided in real time or non real
time, depending on the user‚Äôs preference or network circum-
stances.
(iv) IA2-TLS does not downgrade the underlying cryptographic
primitives as the way other approaches did. In regards to
this, we formally prove that master-secret of the IA2-TLS
protocol remains secure if the key used in inspection is kept
secret.
The organization of this paper is as follows. In the next section,
we briefly describe TLS and summarize the notation and convention
that will be used throughout this paper. In Section 3, we present our
IA2-TLS protocol. The security analysis of it follows in Section 4.
The implementation result is presented in Section 5. Related work is
presented in Section 6. We discuss miscellaneous issues in Section
7 and conclude in Section 8.
2 BACKGROUND
2.1 TLS: A Brief Description
The primary goals of TLS are to provide a secure channel between
two communicating peers, usually called a client and a server. The
properties of the TLS secure channel are authentication, data confi-
dentiality and integrity. The authentication property in TLS man-
dates that the server side of the channel is always authenticated
while the client side is optionally authenticated. The data confiden-
tiality means that data sent over the channel after establishment is
only visible to the endpoints. The data integrity means that attack-
ers cannot modify data sent over the channel after establishment
without detection.
The TLS protocol has two main components: Handshake and
Record protocols. The Handshake protocol establishes the appli-
cations keys that will be used by Record protocol to provide data
confidentiality and integrity.
The Handshake protocol employs cryptographic primitives such
as the Diffie-Hellman key exchange and the RSA encryption to gen-
erate a key material, referred to as ‚Äúpre-master secret (PMS)‚Äù. As
Figure 1: Inspection Service Provided by IA2-TLS
soon as the client and the server produce the PMS and derive sym-
metric application keys, the traffic between them will be encrypted
and authenticated by the Record protocol.
2.2 Notation and Convention for TLS Crypto
Components
Throughout this paper, ‚Äúùëúùë¢ùë° ‚Üê A(ùëñùëõ)‚Äù denotes the assignment of
the returned value of algorithm A taking the value ùëñùëõ as input to the
value ùëúùë¢ùë°. ‚Äúùëé ‚Üê$ ùê¥‚Äù means that ùëé is chosen uniformly at random
from space ùê¥.
The key encapsulation mechanism (KEM) is an essential cryp-
tographic component in TLS, which is used to generate the PMS.
According to the cipher suites offered in TLS, the KEM scheme is
based on either the Diffie-Hellman key exchange or RSA encryption
and should be randomized (at least by the client) [5].
The randomized KEM scheme, which we denote by KEM, can
be described in algorithmic notation as follows. The KEM scheme
consists of three algorithms, GKEM, EKEM and DKEM. GKEM is a
key generation algorithm that outputs the server‚Äôs private key ùë†ùëòùëÜ
and public key ùëùùëòùëÜ taking 1ùëõ as input. EKEM is a key encapsulation
algorithm that takes the server public key ùëùùëòùëÜ and a random coin
ùëü ‚àà R as input and outputs PMS, a pre-master secret, and CT, a
ciphertext. DKEM is a decapsulation algorithm that takes ùë†ùëòùëÜ and a
ciphertext CT as input and outputs PMS or a reject symbol ‚ä•.
KDF and PRF denote a key derivation function and pseudoran-
dom function, respectively. We assume that the range of those
functions are appropriate to support adequate security level.
In TLS, ‚ÄúAuthenticated Encryption with Associated Data (AEAD)‚Äù
is used as a symmetric encryption scheme in (some parts of) the
Handshake protocol and Record protocol. It is a stateful scheme,
which needs to maintain state for encryption and decryption. Its en-
cryption algorithm is formally denoted by EncStE and takes length-
parameter ùêø, header data ùêª and the current state for encryption
as well as data as input. Its decryption algorithm is denoted by
DecStEand takes header data ùêª, the current state for decryption
and ciphertext as input.
We assume that the cryptographic components mentioned above
are fixed. In other words, negotiation of the cipher suites (through
ClientHello and ServerHello) is not modelled in our description.
3 OUR PROTOCOL: IA2-TLS
3.1 Design Principles
As we depicted in Figure 1, IA2-TLS makes the encrypted traffic
transparent (i.e., decrypted) to the network node acting as an IA2-
TLS Inspector. The possession of inspection key guarantees the
Session 3: Network Security ASIA CCS '20, October 5‚Äì9, 2020, Taipei, Taiwan117Table 1: Notation used in the description of IA2-TLS in Fig-
ure 2.
Notation
ùëùùëòùëÜ, ùë†ùëòùëÜ
‚Ñì, ùúÜ, ùúÜ‚Ä≤
ùúáùê∂, ùúáùëÜ
CertùëÜ
H
KEM
EKEM, DKEM
PMS
CT
KDF
MS
PRF
ùêæùê∂, ùêæùëÜ
EncstE, DecstE
ùë†ùë°ùëí, ùë†ùë°ùëë