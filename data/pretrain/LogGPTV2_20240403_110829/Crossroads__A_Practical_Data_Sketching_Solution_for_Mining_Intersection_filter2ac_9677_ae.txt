We ﬁrst investigated what parameters work well for our
sketch on the real data. In Figure 9 we show the result when
the number of buckets and the bucket size are simultaneously
10010110210300.050.10.150.2sketch sizerelative error  estimating M0estimating M1estimating M1/M010210300.10.20.30.40.5buckets numberrelative error  estimating M0estimating M1estimating M1/M0231(a) 0.01 i.r.
(b) 0.02 i.r.
(c) 0.05 i.r.
(d) 0.10 i.r.
Figure 10: Results of mean intersection relative errors when varying memory (buckets) for real data. Bucket
size set to 16
number × bucket size) is suﬃcient to retain high ﬁdelity
in the sketched data—under 5-10% relative error. We also
found that using 256×16 = 4096 counters is suﬃcient to keep
the error small enough for anomaly detection. Note that
these results will only get better as the data sets available to
us grow in size since the size of the data will not greatly aﬀect
the accuracy of the sketch. In particular, we foresee being
able to maintain sketches of similar size even for packet-level
data traces of several terabytes.
The results in Fig. 11, while satisfying, did not quite match
up to those in our synthetic data. On closer examination,
it turned out that there were several pairs for which the in-
tersection ratio was considerably smaller than the 0.01-0.1
regime that we have been studying and are interested in
studying. Recall that if the intersection ratio is very small
(e.g., 0.001 or less), then it is not of signiﬁcant interest in our
application since it indicates a negligible-sized pairing. To
focus our attention on the more interesting pairs, we re-ran
the experiments sampling pairs from ones that had inter-
section ratio in the desired range. The corresponding plots
for intersection ratios of at least 0.01, 0.02, 0.05 and 0.10
are shown in Fig. 10. For these data, we see that there is a
considerable drop in the average relative error. In fact, for
intersection ratio of 0.10 we see that even with 16 * 16 = 256
counters we are able to reduce the relative error to well un-
der 10%. As expected, the performance of the algorithm is
considerably improved when the intersection ratio is higher.
Finally, to visualize the eﬀect of intersection ratio on the
accuracy of the sketch, we ﬁxed the bucket size to 16 and
measured the average relative error when sampling pairs that
have at least some minimum intersection ratio. This is shown
in Fig. 12. Once again, we see a substantial drop in the rel-
ative error within the 0.01 to 0.05 intersection ratio range
Figure 12: Results of mean intersection relative er-
rors when varying intersection ratio for real data.
Bucket size set to 16 and buckets to 32
varied, keeping the total number of counters ﬁxed to 4096.
As before, while keeping total memory usage ﬁxed there is no
signiﬁcant change when varying the number of buckets and
the bucket size, though we found that the results are slightly
better if we make the bucket size smaller and number of
buckets bigger. Hence, just as in the synthetic simulations,
we chose to make the number of buckets as large as possible.
For the remaining experiments we set the bucket size to 16.
In Fig. 11 we plotted the eﬀect of varying the number of
buckets on the relative error of the estimate when ﬁxing the
bucket size to 16. In this case there was a clear trend in the
relative error of the measurement. From the plot, we can
see that using memory of just 1024 × 16 = 16384 (buckets
10310400.20.40.60.8memoryrelative error  estimating M0estimating M1estimating M1/M010300.10.20.30.40.50.6memoryrelative error  estimating M0estimating M1estimating M1/M010110200.20.40.60.81memoryrelative error  estimating M0estimating M1estimating M1/M010110210300.10.20.30.40.5memoryrelative error  estimating M0estimating M1estimating M1/M00.010.020.030.040.0500.20.40.60.8intersection ratiorelative error  estimating M0estimating M1estimating M1/M0232that we are aiming for. This indicates that we can use con-
siderably smaller sketch sizes (e.g., in the 10-100 KB range)
if we are interested only in the pairs that have signiﬁcant
intersection ratio.
In summary, we were able to run our algorithm on data
collected by a major cellular carrier over a one-month period
and shrink the memory footprint by more than two orders
of magnitude while introducing under ten percent error on
the estimate of the average RTT value. We found that if the
intersection ratio is high, as is expected in most of the target
applications, we can use even smaller sketches or achieve
smaller error, or both.
7. RELATED WORK
Our work falls at the intersection of data streaming algo-
rithms, cellular network performance, and association rule
mining.
Data streaming algorithms. The seminal work of Alon
et al. [2] for estimating the frequency moments of a stream
opened up the research ﬁeld of data streaming algorithms.
In particular, the Tug-of-War sketch, which originated in [2]
and was given that name in [1], is a simple but elegant tool
for estimating M2 of a stream that we take advantage of in
this paper. Other work on mining data streams used a va-
riety of techniques. For instance, Lakhina et al. [14, 12, 13]
studied the diagnosis and characterization of feature distri-
butions of network-wide anomalies in streams. Liu et al. [15]
proposed PCA- and sketch-based streaming algorithms for
network traﬃc anomaly detection. Yang et al. [25] studied
the computational partitioning method between mobile de-
vices and the cloud to achieve optimal speeds for processing
streaming data.
Cellular network performance. Various techniques
have been studied in recent years for measuring and analyz-
ing cellular network metrics and performance. Shaﬁq et al.
proposed characterizing M2M traﬃc patterns in cellular net-
works and studied that RTT measurements for TCP ﬂows in
[19]. They also analyzed Internet traﬃc dynamics of cellular
network devices in [20]. Wang et al. implemented a tool that
can unveil carriers’ NAT and ﬁrewall policies by conducting
intelligent measurement and thus help inform developers op-
timizing mobile applications and network conﬁgurations [23].
They also characterized the geospatial dynamics of applica-
tion usage in 3G cellular networks in [18] and studied cellular
network issues in [17] by quantifying aggregate network load
and characterizing user-level traﬃc sessions. Falaki et al. [7]
studied the detailed components of smartphone traﬃc and
packet loss. Trestian et al. [22] showed how the relation-
ship of mobile network users to their locations can beneﬁt
cellular network providers and location-based services. Bal-
asubramanian et al. [3] provided a measurement study of
the three types of mobile network technologies: 3G, GSM,
and WiFi. Xu et al. [24] focused on identifying diverse us-
age patterns of smartphone apps in spatial, temporal, user,
and device dimensions in cellular networks. Erman et al. [6]
studied caching techniques for video stream traﬃc generated
by smartphones in cellular network. Gember et al. [8] stud-
ied in-context network performance when users interact with
their mobile devices.
Association Rule Mining. There is much literature
on the topic of association rule mining; for example, see [5,
9] and references therein. Jin and Agrawal [11] in partic-
ular study ARM in the context of streaming data. ARM
techniques have also been used for network troubleshooting.
For example, Qiu et al. [16] used standard ARM techniques
to mine router syslogs for network performance anomalies.
Brauckhoﬀ et al. [4] used ARM for detecting anomalies in
backbone networks. As noted earlier, rather than proposing
new ARM algorithms, this work reduces the amount of stor-
age needed by an existing ARM algorithm for processing a
massive data stream.
8. CONCLUSIONS
Change and anomaly detection are tasks essential for all
cellular network providers these days.
In this paper, we
tackle this problem by proposing a novel scheme, which we
call Crossroads, to ﬁnd the anomalous events such as longer-
than-usual RTT in cellular network data. To do this, we in-
troduced the technique of intersecting pairs of network data
stream digests of overlapping streams. In particular, we pro-
vide intersection algorithms for estimating the M2, M1, and
M0 of values in a data stream, which allow us to reduce the
storage cost of this diagnostic data drastically, from O(n) to
n). Our evaluations on synthetic and real-world data
O(
from a major cellular service carrier in the US generate very
accurate and rapid estimates for detecting anomalies or other
changes, demonstrating that our algorithms are quite reli-
able in practice.
√
9. REFERENCES
[1] Alon, N., Gibbons, P. B., Matias, Y., and
Szegedy, M. Tracking join and self-join sizes in
limited storage. In Proceedings of the eighteenth ACM
SIGMOD-SIGACT-SIGART symposium on Principles
of database systems (1999), ACM, pp. 10–20.
[2] Alon, N., Matias, Y., and Szegedy, M. The space
complexity of approximating the frequency moments.
In Proceedings of the twenty-eighth annual ACM
symposium on Theory of computing (1996), ACM,
pp. 20–29.
[3] Balasubramanian, N., Balasubramanian, A., and
Venkataramani, A. Energy consumption in mobile
phones: a measurement study and implications for
network applications. In Proceedings of the 9th ACM
SIGCOMM conference on Internet measurement
conference (2009), ACM, pp. 280–293.
[4] Brauckhoff, D., Dimitropoulos, X., Wagner, A.,
and Salamatian, K. Anomaly extraction in
backbone networks using association rules. In
Proceedings of the 9th ACM SIGCOMM Conference
on Internet Measurement Conference (New York, NY,
USA, 2009), IMC ’09, ACM, pp. 28–34.
[5] Cheng, J., Ke, Y., and Ng, W. A survey on
algorithms for mining frequent itemsets over data
streams. Knowledge and Information Systems 16, 1
(2008), 1–27.
[6] Erman, J., Gerber, A., Ramadrishnan, K., Sen,
S., and Spatscheck, O. Over the top video: the
gorilla in cellular networks. In Proceedings of the 2011
ACM SIGCOMM conference on Internet measurement
conference (2011), ACM, pp. 127–136.
[7] Falaki, H., Lymberopoulos, D., Mahajan, R.,
Kandula, S., and Estrin, D. A ﬁrst look at traﬃc
on smartphones. In Proceedings of the 10th ACM
233SIGCOMM conference on Internet measurement
(2010), ACM, pp. 281–287.
[8] Gember, A., Akella, A., Pang, J., Varshavsky,
A., and Caceres, R. Obtaining in-context
measurements of cellular network performance. In
Proceedings of the 2012 ACM conference on Internet
measurement conference (2012), ACM, pp. 287–300.
[9] Han, J., Cheng, H., Xin, D., and Yan, X. Frequent
pattern mining: Current status and future directions.
Data Min. Knowl. Discov. 15, 1 (Aug. 2007), 55–86.
[10] Indyk, P. Stable distributions, pseudorandom
generators, embeddings and data stream computation.
In Foundations of Computer Science, 2000.
Proceedings. 41st Annual Symposium on (2000), IEEE,
pp. 189–197.
[11] Jin, R., and Agrawal, G. An algorithm for in-core
frequent itemset mining on streaming data. In
Proceedings of the Fifth IEEE International
Conference on Data Mining (Washington, DC, USA,
2005), ICDM ’05, IEEE Computer Society,
pp. 210–217.
[12] Lakhina, A., Crovella, M., and Diot, C.
Characterization of network-wide anomalies in traﬃc
ﬂows. In Proceedings of the 4th ACM SIGCOMM
conference on Internet measurement (2004), ACM,
pp. 201–206.
[13] Lakhina, A., Crovella, M., and Diot, C.
Diagnosing network-wide traﬃc anomalies. In ACM
SIGCOMM Computer Communication Review (2004),
vol. 34, ACM, pp. 219–230.
[14] Lakhina, A., Crovella, M., and Diot, C. Mining
anomalies using traﬃc feature distributions. In ACM
SIGCOMM Computer Communication Review (2005),
vol. 35, ACM, pp. 217–228.
[15] Liu, Y., Zhang, L., and Guan, Y. Sketch-based
streaming pca algorithm for network-wide traﬃc
anomaly detection. In Distributed Computing Systems
(ICDCS), 2010 IEEE 30th International Conference
on (2010), IEEE, pp. 807–816.
[16] Qiu, T., Ge, Z., Pei, D., Wang, J., and Xu, J.
What happened in my network: Mining network
events from router syslogs. In Proceedings of the 10th
ACM SIGCOMM Conference on Internet
Measurement (New York, NY, USA, 2010), IMC ’10,
ACM, pp. 472–484.
[17] Shafiq, M. Z., Ji, L., Liu, A. X., Pang, J.,
Venkataraman, S., and Wang, J. A ﬁrst look at
cellular network performance during crowded events.
In Proceedings of the ACM
SIGMETRICS/international conference on
Measurement and modeling of computer systems
(2013), ACM, pp. 17–28.
[18] Shafiq, M. Z., Ji, L., Liu, A. X., Pang, J., and
Wang, J. Characterizing geospatial dynamics of
application usage in a 3g cellular data network. In
INFOCOM, 2012 Proceedings IEEE (2012), IEEE,
pp. 1341–1349.
[19] Shafiq, M. Z., Ji, L., Liu, A. X., Pang, J., and
Wang, J. A ﬁrst look at cellular machine-to-machine
traﬃc: large scale measurement and characterization.
In ACM SIGMETRICS Performance Evaluation
Review (2012), vol. 40, ACM, pp. 65–76.
[20] Shafiq, M. Z., Ji, L., Liu, A. X., and Wang, J.
Characterizing and modeling internet traﬃc dynamics
of cellular devices. In Proceedings of the ACM
SIGMETRICS joint international conference on
Measurement and modeling of computer systems
(2011), ACM, pp. 305–316.
[21] Snoeren, A. C., Partridge, C., Sanchez, L. A.,
Jones, C. E., Tchakountio, F., Kent, S. T., and
Strayer, W. T. Hash-based ip traceback. In ACM
SIGCOMM Computer Communication Review (2001),
vol. 31, ACM, pp. 3–14.
[22] Trestian, I., Ranjan, S., Kuzmanovic, A., and
Nucci, A. Measuring serendipity: connecting people,
locations and interests in a mobile 3g network. In
Proceedings of the 9th ACM SIGCOMM conference on
Internet measurement conference (2009), ACM,
pp. 267–279.
[23] Wang, Z., Qian, Z., Xu, Q., Mao, Z., and Zhang,
M. An untold story of middleboxes in cellular
networks. ACM SIGCOMM Computer Communication
Review 41, 4 (2011), 374–385.
[24] Xu, Q., Erman, J., Gerber, A., Mao, Z., Pang,
J., and Venkataraman, S. Identifying diverse usage
behaviors of smartphone apps. In Proceedings of the
2011 ACM SIGCOMM conference on Internet
measurement conference (2011), ACM, pp. 329–344.
[25] Yang, L., Cao, J., Yuan, Y., Li, T., Han, A., and
Chan, A. A framework for partitioning and execution
of data stream applications in mobile cloud
computing. ACM SIGMETRICS Performance
Evaluation Review 40, 4 (2013), 23–32.
[26] Zhao, H. C., Lall, A., Ogihara, M., Spatscheck,
O., Wang, J., and Xu, J. A data streaming
algorithm for estimating entropies of od ﬂows. In
Proceedings of the 7th ACM SIGCOMM conference on
Internet measurement (2007), ACM, pp. 279–290.
234