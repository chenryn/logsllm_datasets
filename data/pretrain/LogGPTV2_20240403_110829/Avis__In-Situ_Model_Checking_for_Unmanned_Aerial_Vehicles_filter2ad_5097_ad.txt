(cid:88)

Rnd


(cid:88)
TABLE I: Distinguishing features of Avis versus competing
fault-injection approaches.
libhinj API call in the read() procedure of each sensor
driver. The API call queries the scheduler to determine if the
read should fail. The API call returns the scheduler’s decision.
If the sensor should be failed, the API overwrites the sensor
reading and the instrumented code executes the ﬁrmware’s
error-handling code. libhinj supports fault
injection for
various types of sensors including gyroscopes, accelerometers,
GPSs, compasses, and barometers.
To facilitate testing UAVs, we integrate libhinj into two
dominant open-source UAV ﬁrmware, ArduPilot and PX4
(available at [1] and [2]). libhinj also provides a C interface
so that developers can instrument other UAV ﬁrmware.
2) Scheduler: The scheduler is responsible for determining
if a sensor instance should be failed and for recording mode
transitions. The scheduler uses RPCs to communicate with
libhinj. Here, we discuss how the scheduler implements
Algorithm 1.
The scheduler records the fault injection scenarios it has
already explored to prevent redundant exploration. The fault
scheduler represents a fault injection scenario as a set of tuples
(Timestamp, Fault), where the fault component describes the
injected fault (e.g. sensor and instance) and the timestamp is
the simulation time when the fault was injected. We store each
scenario in a hash-set. The scheduler simulates a scenario if
it does not already appear in the hash-set.
The scheduler uses algorithm 1 to determine the next fault
scenario. When it is time to insert a failure, the scheduler
responds to the RPC from libhinj indicating to fail the
sensor read operation.
C. Invariant Monitor
At the end of each step, Avis’s invariant monitor checks
that the vehicle is operating correctly. Besides the UAV’s
mode reported by libhinj’s APIs, the invariant monitor also
requires the vehicle’s physical state, i.e., the position and the
acceleration, for detecting invariant violation. The physical
state of the vehicle is reported from the vehicle’s Gazebo
plugin over a Unix socket. We apply equation 1 to detect when
liveliness is violated. Safety violations are reported using a
simple crash detector.
VI. EVALUATION
We evaluated Avis using two popular UAV platforms:
ArduPilot’s ArduCopter-3.6.9 [5] and PX4-1.9.0 [28]. We
selected these systems because they are popular, sophisticated,
and open-source [27], [7]. We used the 3DR Iris quadcopter
[4] as the UAV in all experiments. We selected the Iris because
quadcopters are the most common body type used for UAVs
and both ArduPilot and PX4 have robust support for the
9
Iris. We conducted all experiments on a server equipped with
CentOS 7.3, 8 GB of memory, and a quad-core Intel Xeon
running at 2.66 GHz.
As shown in Table I, we compared Avis to three com-
peting approaches. Random fault injection (Rnd) chose fault
injection sites from all sensor readings with equal probability.
It also chose failure scenarios for simulation randomly. We
implemented Bayesian Fault Injection (BFI), a state-of-the-art
approach for injecting sensor faults in autonomous cars [15].
This approach used machine learning to predict which injec-
tion sites were most likely to trigger unsafe conditions. We
implemented BFI using depth-ﬁrst search to explore injection
scenarios. However, BFI does not require depth-ﬁrst search.
We also implemented an improved version of BFI called
Stratiﬁed BFI that uses SABRE to explore injection candidates
using BFI’s algorithm. While Stratiﬁed BFI improved upon the
state of the art, it missed a key feature of Avis. Speciﬁcally,
it did not exhaustively target the critical periods where UAV
transitioned between operating modes.
We ran each approach for 2 hours per workload (see V).
First, we studied unsafe conditions uncovered by Avis, looking
for previously unknown sensor bugs. We also studied the
unsafe conditions found by competing approaches to see if
they revealed the same sensor bugs. This analysis shows
the efﬁcacy of Avis. We compared the number of unsafe
conditions found by each approach, a measure that reveals
the efﬁciency (i.e., unsafe conditions per unit time). We also
re-inserted known bugs into the code base, ran each approach
and looked for unsafe conditions caused by the known bugs.
Our evaluation also considered slowdown caused by Avis.
A. Detecting Unknown Bugs
Table II lists the bugs detected by Avis. For each bug,
the table also shows the affected ﬁrmware (Firmware), the
symptom of the bug (Symptom), the injected sensor failure
(Sensor Failure), and the starting time of the fault (Failure
Starting Moment).
In total, Avis discovered 10 previously unknown bugs: 6
affected ArduPilot and 4 affected PX4. These bugs were
serious – 2 that affected ArduPilot resulted in a vehicle crash
and 3 made the UAV ignore user commands and ﬂy away. A
PX4 bug caused a crash and another caused a ﬂy-away. The
system logs showing unsafe behavior are available at [22] in
the logs directory.
The unsafe conditions that Avis found revealed sensor bugs
triggered by GPS, accelerometer, barometer, compass and
gyroscope failures. Manifestations of the newly found sensor
bugs were also sensitive to timing conditions, a factor that
explained why competing approaches were unable to ﬁnd
them. Avis reported no false positives. However, each bug can
manifest multiple unsafe conditions.
Case Study APM-16682: UAVs use fail-safe mechanisms
to survive sensor failures, but sometimes simply triggering
a fail-safe can yield unsafe conditions. Instead, the ﬁrmware
should check ﬂight conditions to ensure fail-safe tasks can
TABLE II: Unknown bugs found by Avis.
Report #
APM-16020
APM-16021
APM-16027
APM-16967
APM-16682
APM-16953
PX4-17046
PX4-17057
PX4-17192
PX4-17181
Firmware
ArduPilot
ArduPilot
ArduPilot
ArduPilot
ArduPilot
ArduPilot
PX4
PX4
PX4
PX4
Symptom
Fly Away
Crash
Fly Away
Crash
Crash
Crash
Fly Away
Crash
Takeoff Failure
Takeoff Failure
Sensor Failure
GPS
Accelerometer
Barometer
Compass
Accelerometer
Gyroscope
Gyroscope
Gyroscope
Compass
Barometer
Failure Starting Moment
Takeoff → Autopilot
Takeoff → Waypoint 1
Pre-Flight → Takeoff
Waypoint 1 → Waypoint 2
Return To Launch → Land
Return to Launch → Land
Waypoint 3 → Return To Launch
Pre-Flight → Takeoff
Pre-Flight → Takeoff
Pre-Flight → Takeoff
Avis
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Stratiﬁed BFI

(cid:88)

(cid:88)


(cid:88)
(cid:88)


be supported. Recall Figure 1, an IMU fault during the
landing mode triggered a fail-safe that eventually caused a
crash. None of the competing approaches captured unsafe
conditions caused by this sensor bug within a 2-hour run. The
landing sequence represented less than 4 seconds of the 80
second scene (i.e. ≤ 5%). Random fault injection must run
for nearly 10 hours to achieve a 98% certainty of capturing
a manifestation of the bug. BFI also failed to uncover this
scenario, because the model learned by BFI did not include
training data where unsafe conditions arose during landing. In
contrast, AVIS uncovered this scenario in an hour.
Case Study APM-16021 Figure 9 shows APM-16021, a new
bug Avis found. The workload commanded the UAV to ascend
to a target altitude of 20m. Before the UAV reached 20m, Avis
injected an accelerometer fault (1). This caused the UAV to
overshoot the target altitude (2). The ﬁrmware responded by
landing (3). The ﬁrmware’s state model incorrectly predicted
a high altitude, causing it to allow the UAV to crash (4). The
ﬁrmware made a ﬁnal attempt to prevent the crash that had
already occurred and unsafely actuated on the ground (5).
Without any fault injection, the UAV’s mode changed from
takeoff to guided after it ascends to 20m. Avis detected this
mode transition and injected faults around this time. Because
our workload held the altitude constant
inside the guided
mode, an IMU fault at this time did not cause a crash. After
several unsuccessful fault injections, Avis injected a fault at
18m and triggered the bug.
Fig. 9: Sequence of events in APM-16021. The black line
shows the altitude of the UAV under fault injection. The blue
line shows the altitude of the UAV during the golden run.
Fig. 10: Sequence of events in APM-16967. The black line
shows the altitude of the UAV under fault injection. The blue
line shows the altitude of the UAV during the golden run.
Approach
Avis
Strat. BFI
BFI
Random
ArduPilot Unsafe #
104
61
1
2
PX4 Unsafe #
61
9
1
3
Total #
165
70
2
5
TABLE III: Unsafe scenarios identiﬁed by each approach.
Case Study APM-16967: Figure 10 shows an unsafe con-
dition found by both Avis and Stratiﬁed BFI. This bug is
triggered if a compass fails anytime between waypoints. Avis
triggered this bug by injecting a compass failure after the
UAV reached waypoint 1 (1). Then, the vehicle turned to
ﬂy towards its second waypoint. As the UAV turned, the
ﬁrmware continued to use old compass readings (2). This
caused the ﬁrmware to lose its heading estimate. The land fail-
safe activated (3). The ﬁrmware reset its state estimate near
the end of the landing procedure (4) which caused a crash (5).
Stratiﬁed BFI is able to trigger this bug because its training
data contains examples of compass failures in the body of the
auto mode, but vanilla BFI does not reach this state.
B. Comparison with Alternative Approaches
Table III reports the number of unsafe conditions identiﬁed
by each approach. Recall, each approach was run for two
hours. Avis found more than 2.4X more unsafe conditions
than stratiﬁed BFI, an improved implementation of the current
state-of-the-art. Avis found 82X more conditions than BFI
using standard depth-ﬁrst search.
BFI did not uncover many unsafe conditions for two
reasons. First, depth-ﬁrst search inefﬁciently checked fault
10
TakeoffLand0m20mAltitude1. Acc. fault at 18m2. UAV overshoots target altitude3. Firmware overcorrects4. Crash5. Late attempt at crash preventionTakeoffLand0m20mAltitude2. Old compass state read3. Emergency land4. State estimate reset5. Crash1. Compass fault injectedAutoTakeoff # Manual # Waypoint #
44
35
0
3
Land #
24
1
0
0
Approach
Avis
Stratiﬁed BFI
BFI
Random
Bug ID
APM-4455
APM-4679
APM-5428
APM-9349
PX4-13291
60
4
1
0
(cid:88)