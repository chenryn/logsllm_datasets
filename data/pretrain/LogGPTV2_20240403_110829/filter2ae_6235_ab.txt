    [ ][unblock] closing 404 fd
    [ ][unblock] unblocking now
    [ 55.395645] Freeing alive netlink socket ffff88001aca5800
    [+] mq_notify succeed
    [+] guard socket closed
    [ 60.399964] general protection fault: 0000 [#1] SMP
    ... cut (other crash dump info) ...
    >>
漏洞利用失败(并没有出现root shell)，因为它不是针对此内核版本的。 因此，它需要修改(参见第3部分和第4部分)。但是，它验证了我们可以触发漏洞。
**WARNING** ：由于我们的内核版本与建议的内核版本之间存在其他差异， **因此你不会遇到内核崩溃**
(例如第2部分)。原因是，内核在某些错误上不会崩溃(就像上面那样)，而只是挂起或杀死该进程。但是，它处于不稳定状态，可能随时崩溃。建议阅读代码并理解这些差异。
### 下载内核源码
一旦系统安装完毕并准备就绪，下一步就是获取内核源码。同样，由于我们使用的是 _过时_ 的内核，我们可以使用下列命令下载它：
    # wget https://snapshot.debian.org/archive/debian-security/20160904T172241Z/pool/updates/main/l/linux/linux-source-3.16_3.16.36-1%2Bdeb8u1_all.deb
并安装
    # dpkg -i linux-source-3.16_3.16.36-1+deb8u1_all.deb
内核源码应位于： **/usr/src/linux-source-3.16.tar.xz.**
由于目标内核会 **崩溃很多次**
，因此必须在主机上分析内核代码并开发漏洞利用代码。也就是说，将这些源码下载到你的主机系统。目标机子只用于编译/运行exp和SystemTap。
可以使用任何代码分析工具。需要有效地交叉引用符号。Linux拥有数百万行代码，没有这个会迷失在代码的海洋中。
许多内核开发人员似乎都在使用 **cscope**
。可以通过[这样](http://cscope.sourceforge.net/large_projects.html)或仅仅下列命令来生成交叉引用：
    cscope -kqRubv
cscope数据库生成需要几分钟，然后使用一个带有插件的编辑器(例如vim，emacs)。
希望你现在已准备好开发你的第一个内核漏洞。
GL＆HF！:-)
## 核心概念
为了不在CVE分析的一开始就迷失，有必要介绍Linux内核的一些核心概念。请注意，为了保持简洁，本文中大多数结构体都是不完整的。
### 进程描述符(task_struct)和current宏
每个任务都有一个 _task_struct_ 对象存在于内存中。一个用户空间 _进程_ 至少由一个任务组成。在多线程应用程序中，每个线程都有一个
_task_struct_ 。内核线程也有自己的 _task_struct_ (例如kworker，migration)。
task_struct包含以下重要信息：
    // [include/linux/sched.h]
    struct task_struct {
        volatile long state;            // process state (running, stopped, ...)
        void *stack;                    // task's stack pointer
        int prio;                       // process priority
        struct mm_struct *mm;           // memory address space
        struct files_struct *files;     // open file information
        const struct cred *cred;        // credentials
      // ...
    };
访问当前运行的任务是一种常见的操作，存在宏以获取指向当前任务的指针： **current** 。
### 文件描述符，文件对象和文件描述符表
每个人都知道 _“一切都是文件”_
，但它究竟是什么[意思](https://yarchive.net/comp/linux/everything_is_file.html)？
在Linux内核中，有七种基本文件：常规，目录，链接，字符设备，块设备，fifo和socket。它们中的每一个都可以由 **文件描述符**
表示。文件描述符基本上是一个仅对给定进程有意义的整数。对于每个文件描述符，都有一个关联的结构体： **struct file** 。
_file_ 结构体(或文件对象)表示已打开的文件。它不一定匹配磁盘上的任何内容。例如，考虑访问像 **/proc**
这样的伪文件系统中的文件。在读取文件时，系统可能需要跟踪当前文件读取的位置。这是存储在file结构体中的一种信息。指向file结构体的指针通常被命名为filp(file
pointer)。
file结构体中最重要的字段是：
    // [include/linux/fs.h]
    struct file {
        loff_t                            f_pos;            // "cursor" while reading file
        atomic_long_t                     f_count;          // object's reference counter
        const struct file_operations      *f_op;            // virtual function table (VFT) pointer
      void                              *private_data;      // used by file "specialization"
      // ...
    };
将文件描述符转换为file结构体指针的映射关系被称为 **文件描述符表(fdt)** 。
请注意，这不是1对1映射，可能有多个文件描述符指向同一个文件对象。在这种情况下，指向的文件对象的引用计数增加1(参见[Reference
Counters](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part1.html#reference-counters))。FDT存储在一个名为 **struct fdtable**
的结构体中。这实际上只是一个file结构体指针数组，可以使用文件描述符进行索引。
    // [include/linux/fdtable.h]
    struct fdtable {
        unsigned int max_fds;
        struct file ** fd;      /* current fd array */
      // ...
    };
将文件描述符表与进程关联起来的是 **struct files_struct** 。 fdtable没有直接嵌入到 _task_struct_
中的原因是它有其他信息。一个 _files_struct_ 结构体也可以在多个线程(即 _task_struct_ )之间共享，并且还有一些优化技巧。
    // [include/linux/fdtable.h]
    struct files_struct {
        atomic_t count;           // reference counter
        struct fdtable *fdt;      // pointer to the file descriptor table
      // ...
    };
指向 _files_struct_ 的指针存储在 _task_struct_ (filed _files_ )中。
### 虚表(VFT)
虽然Linux主要由C实现，但Linux仍然是 _面向对象_ 的内核。
实现某种 _通用性_ 的一种方法是使用 **虚函数表(vft)** 。 虚函数表是一种主要由函数指针组成的结构。
最知名的VFT是 **struct file_operations** ：
    // [include/linux/fs.h]
    struct file_operations {
        ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
        ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
        int (*open) (struct inode *, struct file *);
        int (*release) (struct inode *, struct file *);
      // ...
    };
虽然 _一切都是文件_ 但不是同一类型，因此它们都有各自不同的 **文件操作** ，通常称为 **f_ops** 。
这样做允许内核代码独立于其类型和代码分解(code factorization，不知道具体应该如何翻译)来处理文件。它导致了这样的代码：
    if (file->f_op->read)
                ret = file->f_op->read(file, buf, count, pos);
### Socket, Sock 和 SKB
**struct socket**
位于网络堆栈的顶层。从文件的角度来看，这是第一级特殊化。在套接字创建期间(socket()syscall)，将创建一个新的file结构体，并将其文件操作(filed
f_op)设置为 **socket_file_ops** 。
由于每个文件都用文件描述符表示，因此你可以用套接字文件描述符作为参数来调用任何以文件描述符作为参数的系统调用(例如read()，write()，close())。
这实际上是“一切都是文件”座右铭的主要好处。独立于套接字的类型，内核将调用通用套接字文件操作：
    // [net/socket.c]
    static const struct file_operations socket_file_ops = {
        .read = sock_aio_read,      // ops->recvmsg()
        .write =    sock_aio_write, // ops->sendmsg()
        .llseek =   no_llseek,      //  ops-> bind())
由于某些协议操作(例如发送/接收数据)可能实际上需要进入网络堆栈的较低层，因此 _struct socket_ 具有指向 _struct sock_
对象的指针。该指针通常由套接字协议操作( _proto_ops_ )使用。最后， _struct socket_ 是 _struct file_ 和
_struct sock_ 之间的一种粘合剂。
    // [include/linux/net.h]
    struct socket {
        struct file     *file;
        struct sock     *sk;
        const struct proto_ops  *ops;
      // ...
    };
_struct sock_ 是一个复杂的数据结构。人们可能会将其视为下层(网卡驱动程序)和更高级别(套接字)之间的中间事物。其主要目的是能够以 _通用_
方式保持接收/发送缓冲区。
当通过网卡接收到数据包时，驱动程序将网络数据包“加入”到sock接收缓冲区中。它会一直存在，直到程序决定接收它(recvmsg()系统调用)。反过来，当程序想要发送数据(sendmsg()系统调用)时，网络数据包被“加入”到sock发送缓冲区。一有机会，网卡将“取出”该数据包并发送。
那些“网络数据包”就是所谓的 **struct sk_buff** (或skb)。接收/发送缓冲区基本上是一个skb双向链表：
    // [include/linux/sock.h]
    struct sock {
        int         sk_rcvbuf;    // theorical "max" size of the receive buffer
        int         sk_sndbuf;    // theorical "max" size of the send buffer
        atomic_t        sk_rmem_alloc;  // "current" size of the receive buffer
        atomic_t        sk_wmem_alloc;  // "current" size of the send buffer
        struct sk_buff_head sk_receive_queue;   // head of doubly-linked list
        struct sk_buff_head sk_write_queue;     // head of doubly-linked list
        struct socket       *sk_socket;
      // ...
    }