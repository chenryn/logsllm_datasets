### 漏洞利用失败分析

在尝试漏洞利用时，出现了以下日志信息：

```
[ ][unblock] closing 404 fd
[ ][unblock] unblocking now
[ 55.395645] Freeing alive netlink socket ffff88001aca5800
[+] mq_notify succeed
[+] guard socket closed
[ 60.399964] general protection fault: 0000 [#1] SMP
... cut (other crash dump info) ...
>>
```

尽管触发了漏洞，但并未成功获取root shell。这表明当前内核版本与漏洞利用代码不兼容，因此需要进行相应的修改（参见第3部分和第4部分）。

**警告**：由于我们的内核版本与建议的内核版本存在差异，您可能不会遇到内核崩溃（例如第2部分）。这是因为某些错误可能导致内核挂起或杀死进程，而不是直接崩溃。然而，这种情况下内核处于不稳定状态，随时可能崩溃。建议详细阅读并理解相关代码中的差异。

### 下载内核源码

系统安装完成后，下一步是获取内核源码。由于我们使用的是一个较旧的内核版本，可以使用以下命令下载并安装：

```bash
# 下载内核源码包
wget https://snapshot.debian.org/archive/debian-security/20160904T172241Z/pool/updates/main/l/linux/linux-source-3.16_3.16.36-1%2Bdeb8u1_all.deb

# 安装内核源码包
dpkg -i linux-source-3.16_3.16.36-1+deb8u1_all.deb
```

内核源码将位于 `/usr/src/linux-source-3.16.tar.xz`。由于目标内核会频繁崩溃，建议在主机上分析内核代码并开发漏洞利用代码。目标机器仅用于编译和运行exploit及SystemTap脚本。

为了有效地交叉引用符号，推荐使用 `cscope` 工具。可以通过以下命令生成交叉引用数据库：

```bash
cscope -kqRubv
```

生成过程可能需要几分钟时间。之后，可以使用带有插件的编辑器（如vim或emacs）进行代码分析。

希望现在您已经准备好开始开发您的第一个内核漏洞。祝您好运！:-)

## 核心概念

为了更好地理解和分析CVE，有必要介绍一些Linux内核的核心概念。请注意，为简洁起见，本文中列出的结构体并不完整。

### 进程描述符 (`task_struct`) 和 `current` 宏

每个任务在内存中都有一个 `task_struct` 对象。用户空间进程至少由一个任务组成。多线程应用中，每个线程都有自己的 `task_struct`。内核线程也有自己的 `task_struct`（例如 kworker, migration）。

`task_struct` 包含以下重要信息：

```c
// [include/linux/sched.h]
struct task_struct {
    volatile long state;            // 进程状态（运行、停止等）
    void *stack;                    // 任务堆栈指针
    int prio;                       // 进程优先级
    struct mm_struct *mm;           // 内存地址空间
    struct files_struct *files;     // 打开文件信息
    const struct cred *cred;        // 凭证
    // ...
};
```

访问当前运行的任务是一个常见的操作，为此提供了 `current` 宏来获取指向当前任务的指针。

### 文件描述符、文件对象和文件描述符表

在Linux中，“一切都是文件”这一原则意味着许多不同的对象都可以通过文件接口进行操作。Linux内核中有七种基本文件类型：普通文件、目录、链接、字符设备、块设备、FIFO和套接字。每种文件类型都可以通过文件描述符表示。

文件描述符是一个对特定进程有意义的整数。对于每个文件描述符，都有一个关联的 `struct file` 结构体。

`file` 结构体（或文件对象）表示已打开的文件。它不一定对应于磁盘上的实际内容。例如，访问 `/proc` 伪文件系统中的文件时，`file` 结构体用于跟踪文件读取位置等信息。

`file` 结构体中最重要的字段包括：

```c
// [include/linux/fs.h]
struct file {
    loff_t f_pos;            // 文件读取位置
    atomic_long_t f_count;   // 引用计数
    const struct file_operations *f_op; // 虚函数表指针
    void *private_data;       // 用于文件特化
    // ...
};
```

文件描述符到 `file` 结构体指针的映射称为文件描述符表 (fdt)。这不是一对一映射，多个文件描述符可能指向同一个文件对象，在这种情况下，文件对象的引用计数会增加。

文件描述符表存储在一个名为 `struct fdtable` 的结构体中：

```c
// [include/linux/fdtable.h]
struct fdtable {
    unsigned int max_fds;
    struct file **fd;      // 当前文件描述符数组
    // ...
};
```

`files_struct` 结构体将文件描述符表与进程关联起来：

```c
// [include/linux/fdtable.h]
struct files_struct {
    atomic_t count;          // 引用计数
    struct fdtable *fdt;     // 文件描述符表指针
    // ...
};
```

`files_struct` 的指针存储在 `task_struct` 中的 `files` 字段中。

### 虚函数表 (VFT)

虽然Linux主要用C语言编写，但它仍然是面向对象的内核。实现通用性的一种方法是使用虚函数表 (VFT)。最知名的VFT是 `struct file_operations`：

```c
// [include/linux/fs.h]
struct file_operations {
    ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
    ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
    int (*open) (struct inode *, struct file *);
    int (*release) (struct inode *, struct file *);
    // ...
};
```

尽管“一切都是文件”，但不同类型的文件有不同的文件操作。使用虚函数表允许内核代码独立于文件类型进行处理。例如：

```c
if (file->f_op->read)
    ret = file->f_op->read(file, buf, count, pos);
```

### 套接字 (`socket`)、Sock 和 SKB

`struct socket` 位于网络堆栈的顶层。从文件的角度来看，这是第一级特殊化。在创建套接字时（`socket()` 系统调用），会创建一个新的 `file` 结构体，并将其文件操作设置为 `socket_file_ops`。

由于每个文件都用文件描述符表示，您可以使用套接字文件描述符作为参数调用任何以文件描述符为参数的系统调用（如 `read()`、`write()`、`close()`）。这是“一切都是文件”原则的主要优势之一。

```c
// [net/socket.c]
static const struct file_operations socket_file_ops = {
    .read = sock_aio_read,      // ops->recvmsg()
    .write = sock_aio_write,    // ops->sendmsg()
    .llseek = no_llseek,        // ops->bind()
    // ...
};
```

`struct socket` 具有一个指向 `struct sock` 对象的指针。该指针通常由套接字协议操作 (`proto_ops`) 使用。`struct socket` 是 `struct file` 和 `struct sock` 之间的粘合剂。

```c
// [include/linux/net.h]
struct socket {
    struct file *file;
    struct sock *sk;
    const struct proto_ops *ops;
    // ...
};
```

`struct sock` 是一个复杂的数据结构，可以视为底层（网卡驱动程序）和高层（套接字）之间的中间层。其主要目的是以通用方式管理接收和发送缓冲区。

当通过网卡接收到数据包时，驱动程序将数据包加入到 `sock` 接收缓冲区中，直到程序决定接收它（`recvmsg()` 系统调用）。相反，当程序想要发送数据（`sendmsg()` 系统调用）时，数据包被加入到 `sock` 发送缓冲区。一旦有机会，网卡将取出数据包并发送。

这些“网络数据包”被称为 `struct sk_buff` (skb)。接收和发送缓冲区基本上是 skb 双向链表：

```c
// [include/linux/sock.h]
struct sock {
    int sk_rcvbuf;               // 接收缓冲区的最大理论大小
    int sk_sndbuf;               // 发送缓冲区的最大理论大小
    atomic_t sk_rmem_alloc;      // 接收缓冲区的当前大小
    atomic_t sk_wmem_alloc;      // 发送缓冲区的当前大小
    struct sk_buff_head sk_receive_queue;   // 接收队列头
    struct sk_buff_head sk_write_queue;     // 发送队列头
    struct socket *sk_socket;
    // ...
};
```

通过以上介绍，希望您对Linux内核的一些核心概念有了更清晰的理解。