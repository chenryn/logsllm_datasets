9
Q：
 is no dynamic 
080490d8
.strtab
:symtab
，Type改成了ExEC，
080490d8
080490d8
08048097
08048082
080490a0
080490a0
00000000
.data
.text
Value
，所以也删掉了。
A
'.symtab'
0x0000a0
0x000000
Offset 
.text和.data段的加载地址分别改成
 Size
-bss段没有用到，所以被删掉了。.rel.text段就是用于链接过程
 section
）NOTYPE
0
0
C
0
0
0
0
NOTYE
SECTION
SECTION
NOTYPE
NOTYPE
NOTYPE
NOTYPE
contains
，由目标文件变成可执行文件了，
STRTAB
SYMTAB
0x080490a0
0x08048000
VirtAddr
n in this file.
G
一列a1ign的值0x1000（4K）是x86平台的内存页面大
GLOBAL
LOCAL
LOCAL
LOCA
(group),
GLOBAL
GLOBAL
GLOBAL
Bind
 10 entries:
） 0x08048000 0x0009e 0x0009e R E
，文件中的一页对应内存中的一页，对应关系如
DEFAULT
 PhysAddr
0x080490a0
DEFAULT
DEFAULT
DEFAULT
DEFAULT
DEFAULT
DEFAULT
DEFAULT
DEFAULT
DEFAULT
vis
 00000000 000290 000040 00
00000000 0001f0 0000a0 10
 specific)，p (processor
(unknown)
·text段和前面的ELF
ABS
ABS
ABS
 88000x0 8000x0
 FileSiz MemSiz
2
，Entry point address改成
data_items
 Name
_end 
edata
bss_start
 Flg
.data
28
段
第
---
## Page 290
再看一下反汇编的结果：
脚本在第1节“多目标文件的链按”介绍。
原来目标文件符号表中的value都是相对地址,
表中可以验证这-
定是为了简化链接器和加载器的实现。从上图也可以看出.text段的加载地址应该
的偏移是0xa0，
这个可执行文件很小，
_bss_start、
因为MMU的权限保护机制是以页为单位的,
图18.2.文件和加载地址的对应关系
08048097 :
0x80490a0(,%edi,4),%eax
08048082 :
08048074 :
Disassembly of section .text:
xew p- dunplqo $
86↓
8048097:
8048095:
8048091:
8048080:
8048079:
8048074:
max:
804808f:
8
8048085:
8
3048082:
8
3048093:
3048087:
8
0
、_start符号位于.text段的开头，所以_start符号的地址也是0x08048074，从符号
，在内存页面0x08049000中的偏移仍然是0xa0，所以从0x080490a0开始，这样规
8:
file format elf32-i386
一点。
data
headers
.text
总共也不超过一页大小，
b８01000000
eb
8b
83
8b
bf 
39
.
 04 bd a0 90 04 08
8
c3
8
,%eax
04
00 0000 00
/
1
 这些符号在链接脚本中定义，
1
V
00
bd
√
1
a0 90
/
1
/
segment 2
00408
segment 1
现在都改成绝对地址了。此外还多了三个符
，但是两个Segment必须加载到内存中两个不同的页
一个页面只能设置-
080490d8
080490a0
08049000
0804809e
08048000
mov
nov
，被链接器添加到可执行文件中，链接
8048082 
%edi
8048097 
$0x1,%eax
ebx,%eax
$0x0,%eax
%eax,%ebx
$0x0,%edi
一种权限。
此外还规定每
290
---
## Page 291
么知道要改这两处呢？是根据目标文件中的.rel.text段提供的重定位信息来改的：
指令中的地址原本是0x00000000，
现在改成了这样:
再看内存访问指令，原来目标文件的指令是这样：
在第4.2节“动态链接的过程"我们会看到这样的例子。
跳得太远,
这称为相对跳转。这种相对跳转指令只有16位,
的内存地址，
改了吗？其实只是反汇编的结果不同了，
现在改成了这样：
标文件的指令是这样：
指令中的相对地址都改成绝对地址了。我们仔细检查一下改了哪些地方。首先看跳转指令，原来目
00000017
80000000
Relocation section '.rel.text' at offset 0x2b0 contains 2 entries:
0x80490a0(,%edi,4),%eax
'8048091:
804809c:
，也有的跳转指令指定一个完整的内存地址，
5:
内存地址有32位，
8b 04 bd 00000000
8b 04 bd 00 00 00 00
eb
74
00000201
eb
10
8b 04 bd a0 90 04 08
 8b 04 bd a0 90 04 08 
eb eb
7e
74
cd 80
ef
10
Type
 这些跳转指令只有16位，
，现在改成了0x080409a0（注意是小端字节序）
，指令的机器码根本没变。
mov
mov
jmp
只能在当前指令前后的一个小范围内跳转，不可能
 Sym.
00000000
e 
e 
0x0(,%edi,4),%eax
23 
0x0(,%edi,4),%eax
 可以跳到任何地方，这称绝对跳转，
jmp
int
mov
mov
jle
显然也不可能指定-
 Sym.
 8048082 
8048082 
8048097 
$0x80
.data
 为什么不用改指令就能跳转到新
一个完整的内存地址,
 而不是指定一
·
）。那么链接器怎
一个完整
---
## Page 292
英文。
[28] Segment也可以翻译成“段”，为了避免混淆，在本书中只把Section称为段，
令中00000000的位置。
第一列offset的值就是.text段需要改的地方，在.text段中的相对地址是8和0x17，正是这两条指
4.寻址方式
全国嵌入式人才培训基地
起始页
上一级
第19章汇编与C之间的关系
，而Segment直接用
292
下一页
---
## Page 293
法可以在C程序中内嵌汇编指令，这在内核代码中很常见，本章也会简要介绍这种用法。
6. volatile限定符
5.C内联汇编
4.结构体和联合亿
3.变量的存储布局
5.ELF文件
第19 章汇编与C之间的关系请点评
1.函数调用
目
，C语言的各种语法分别对应什么样的指令，
一章我们学习了汇编的一些基础知识，
贝
体
第19章汇编与C之间的关系
全国嵌入式人才培训基地
全国嵌入式人才培训基地
，本章我们进一步研究C程序编译之后的汇编是什么样 
部分Ⅱ. C语言本质
起始页
上一级
1.函数调用
一种扩展语
2
---
## Page 294
只列出我们关心的部分。
汇编代码穿插起来显示，这样C代码和汇编代码的对应关系看得更清楚。反汇编的结果很长，以下
如果在编译时加上-g选项（在第10章gdb讲过-g选项）
我们用下面的代码来研究函数调用的过程。
1.函数调用请点评
L二
例19.1.研究函数的调用过程
080483aa :
80483a9:
80483a8:
80483a5:
80483a2:
80483a0:
804839a:
8048395:
8048394:
int bar(int C, int d)
8048397:
S
804839d:
 objdump -ds a.out
gcc main.c
int main(void)
int foo(int a, int b)
int bar(int C, int d)
return e;
int e =
10 42
-g
return bar(a, b);
return e;
int e = c + d;
88
8b 45
89
01
8
q8
83
8
55
45
do
5.5
+
e5
fc
10
fc
第19章汇编与C之间的关系
全国嵌入式人才培训基地
1.函数调用
mov
push
t
ave
那么用objdump反汇编时可以把C代码和
-0x4(%ebp),%eax
%edx,%eax
0x8(
Oxc(%ebp),%edx
%ebp
ebp),%eax
---
## Page 295
整
不生成
要查看编译后的汇编仆
二进制的目
0x080483a0
int main(void)
8183681
0x0
080483c4 :
int foo(int a, int 
0x0804839d
C
0x08048397
C
0x08048395
(gdb) disassemble
6
4
80483f1:
80483ee:
80483e9:
80483e4:
80483d5:
80483d2:
80483d1:
80483c4:
80483c3:
80483c2:
6
8
8
80483b3:
80483b0:
30483dc:
30483cf:
30483b7:
of
 assembler
return 0;
foo(2，
e
8:
return bai
目标文件。
：
 b=3) at main.c:9
:
:
:
: