title:Cypider: building community-based cyber-defense infrastructure for
android malware detection
author:ElMouatez Billah Karbab and
Mourad Debbabi and
Abdelouahid Derhab and
Djedjiga Mouheb
Cypider: Building Community-Based Cyber-Defense
Infrastructure for Android Malware Detection
ElMouatez Billah Karbab
Concordia University,
PI:EMAIL
Abdelouahid Derhab
King Saud University
PI:EMAIL
Mourad Debbabi
Concordia University,
PI:EMAIL
Djedjiga Mouheb
Concordia University
PI:EMAIL
ABSTRACT
The popularity of Android OS has dramatically increased
malware apps targeting this mobile OS. The daily amount
of malware has overwhelmed the detection process. This
fact has motivated the need for developing malware detec-
tion and family attribution solutions with the least manual
In response, we propose Cypider framework,
intervention.
a set of techniques and tools aiming to perform a system-
atic detection of mobile malware by building an eﬃcient and
scalable similarity network infrastructure of malicious apps.
Our detection method is based on a novel concept, namely
malicious community, in which we consider, for a given fam-
ily, the instances that share common features. Under this
concept, we assume that multiple similar Android apps with
diﬀerent authors are most likely to be malicious. Cypider
leverages this assumption for the detection of variants of
known malware families and zero-day malware.
It is im-
portant to mention that Cypider does not rely on signature-
based or learning-based patterns. Alternatively, it applies
community detection algorithms on the similarity network,
which extracts sub-graphs considered as suspicious and most
likely malicious communities. Furthermore, we propose a
novel ﬁngerprinting technique, namely community ﬁnger-
print, based on a learning model for each malicious com-
munity. Cypider shows excellent results by detecting about
50% of the malware dataset in one detection iteration. Be-
sides, the preliminary results of the community ﬁngerprint
are promising as we achieved 87% of the detection.
Keywords
Android; Malware; Community Detection; Fingerprinting
1.
INTRODUCTION
The ubiquitousness of mobile devices and their applica-
tions have considerably contributed to the evolvement of
this technology and its expansion in both the economy and
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
c⃝ 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991124
society. Indeed, mobile applications (apps) have become an
essential part of our daily tasks. However, being able to
access both sensitive and personal data on the network has
given rise to threats targeting apps security. Android [4]
is the most popular mobile OS that controls 82% of the
market share [14] in the mobile world, including smart de-
vices such as phones and tablets. Also, Android system
expanded to various daily tools, such as TVs [7], watches
[8], and cars [5], to connect them to the internet. Moreover,
Android OS is increasingly involved in the so-called Internet
of Things (IoT), especially with the emergence of Google’s
Brillo [11], an Android-based embedded OS that provides
the core services for IoT developers. Brillo leverages An-
droid’s advanced functionalities to extend horizons for IoT
devices. However, this comes at the expense of security since
many malware instances are targeting Android devices, and
thus could infect IoT applications based on Brillo.
Modern Android OS provides mechanisms and techniques,
such as sandboxing, to empower the security of smart de-
vices. However, due to the increasing number of attacks
targeting mobile devices, this defense mechanism alone is
not suﬃcient to mitigate such attacks. Besides, the popular-
ity of Android OS made it a tempting target for malware. In
fact, an enormous amount of malware launch attacks against
users’ devices on a daily basis. For example, according to G
DATA [12], 1, 548, 129 and 2, 333, 777 new Android malware
were discovered in 2014 and 2015, which represents approxi-
mately an average of 4, 250 and 6, 400 new malware per day
respectively. Furthermore, about 53% of malware were SMS
Trojans designed to steal money and personal information
from Android-based mobile devices [25]. The malware could
be classiﬁed into two broad categories: i) malware variant,
which is a known malware with a new skin created by ap-
plying repackaging techniques, and ii) unseen malware or
zero-day malware, which is a malicious app not discovered
by security researchers and vendors. The vast number of ex-
isting Android apps along with the daily-created malicious
ones make the manual investigation of new apps (benign
and malicious) a diﬃcult, if not an impossible task for secu-
rity analysts. Traditional approaches depend on identifying
speciﬁc signature-based patterns that belong to previously
known malware families. However, a practical, yet an eﬀec-
tive approach should not rely on signatures such as crypto-
graphic hashes since this could easily be defeated using the
simplest modiﬁcation in the original malware app. Further-
more, the use of signatures limits the ability to detect new
malware families, which raises concerns about the possibility
348
of systematically identifying new malware apps (new fami-
lies) without or with minimum human intervention. Other
approaches apply heuristic-based or machine-learning meth-
ods on benign and malicious samples to generate learning-
based patterns, which are used to identify known and new
malware. Although learning-based approaches are more eﬃ-
cient than signature-based ones for detecting zero-day mal-
ware, their precisions mainly depend on the training set and
the used features to generate the pattern.
In this research, we combat large-scale Android malware
by decreasing the analysis window size of newly detected
malware. The window starts from the ﬁrst detection until
the signatures generation by security vendors. The larger
the window is, the more time the malicious apps are given
to spread over the users’ devices. Current state-of-the-art
techniques have a large window due to the huge number of
Android malware appearing on a daily basis. Besides, these
techniques use manual analysis in some cases to investigate
malware. Therefore, decreasing the need for manual de-
tection could signiﬁcantly reduce the analysis window. To
address the previous issue, we elaborate systematic tools,
methods, and approaches for the detection of both known
and new malware apps (i.e., variants of existing families or
unseen malware). To do so, we rely on the assumption that
a couple of Android apps, with distinct authors and cer-
tiﬁcates, are most likely to be malicious if they are highly
similar. This is due to the fact that the adversary usually
repackages multiple app packages with the same malicious
payload to hide it from the anti-malware and vetting sys-
tems. Consequently, it is diﬃcult to detect such malicious
payloads from the benign functionalities of a given Android
package. Accordingly, a pair of Android apps should not be
very similar in their components excluding popular libraries.
This observation, as mentioned earlier, could be used to de-
sign and develop a security framework to detect Android
malware apps.
In this paper, we leverage the previously-mentioned as-
sumption to propose a cyber security framework, namely
Cypider (Cyber-Spider For Android Malware Detection), to
detect and cluster Android malware without the least prior
knowledge of Android malware apps such as signature-based
or learning-based patterns. Cypider consists of a novel com-
bination of a set of techniques and methods to address the
problem of Android malware clustering and ﬁngerprinting.
First, Cypider can detect repackaged malware (malware fam-
ilies), which constitute the vast majority of Android malware
apps [57]. Second, it can detect new malware apps, and more
importantly, Cypider performs the detection automatically
and in an unsupervised way. The fundamental idea of Cypi-
der relies on building a similarity network between the en-
tered apps. Eventually, Cypider extracts, from this similarity
network, sub-graphs with high connectivity, called commu-
nities, which are most likely to be malicious communities.
The next step in Cypider process is the generation of a ﬁn-
gerprint for each detected community. For this purpose, we
propose a novel technique called community ﬁngerprinting.
Instead of using a static signature based on cryptographic
or fuzzy hashing of one app, we use One-Class Support Vec-
tor Machine learning model (OC-SVM) [43] to compute the
community ﬁngerprint of the whole Android malware family
or sub-family. The OC SVM model is a machine learning
technique used to learn the features of only one class (fea-
tures of one community in our case). The resulting model,
i.e., the community ﬁngerprint, is used to detect whether
a given new Android app is part of the community or not.
After identifying the malware apps of the detected commu-
nities, Cypider framework continues as a periodic process,
where it carries out on the remaining apps along with new
ones, which form what we call the active dataset. We ad-
dress the scalability issue in Cypider using three principal
techniques:
i) The extracted statistical features from the
APK have a high dimensionality causing a steep decrease
in the performance of the proposed solution. To address
this issue, we use the feature hashing [45] technique to re-
duce this dimensionality to a ﬁxed length while keeping the
same detection rate.
ii) We leverage the state-of-the-art of
machine learning techniques using Locality Sensitive Hash-
ing (LSH) [21] to compute the similarity between vectors of
app features. The latter drastically speeds up the compari-
son operation compared to the brute force approaches.
iii)
We use a scalable community detection algorithm, proposed
in [23], to extract the malicious communities. To sum up,
Cypider framework is a set of algorithms, techniques, and
mechanisms, which have been fashioned into one approach.
The latter aims to detect Android malicious apps without
pre-knowledge of the actual malware families. Furthermore,
Cypider could produce unsupervised ﬁngerprints of possible
threats by leveraging the proposed community ﬁngerprint.
Therefore, our contribution is mainly the whole framework,
and not only a set of components
The main contributions of this paper are:
1. We design and implement Cypider, a simple yet ef-
fective framework for malware detection based on the
community concept and graph analysis techniques.
2. We propose a community ﬁngerprint, a novel ﬁnger-
print based on a classiﬁcation model to represent the
features of a given community, which could be a mal-
ware family or a subfamily.
3. We evaluate Cypider framework on:
i) Genome mal-
ware dataset [2, 57], ii) Drebin malware dataset [1]
[20, 46], and iii) the previous datasets with benign
apps downloaded from Google Play[13]. The evalu-
ation shows a promising results.
The remainder of this paper is organized as follows: Sec-
tion 2 presents our threat model with the usage scenarios
of Cypider. Section 3 details our methodology. Afterward,
we present the used statistical features and their process-
ing in Section 4. The diﬀerent components of Cypider are
described in Sections 5, 6, and 7. The evaluation of the
proposed approach is covered in Section 8. General notes
about Cypider are presented in Section 9. Section 10 dis-
cusses Cypider’s limitations and future work. In Section 11,
we discuss related work. Finally, Section 12 concludes the
paper.
2. THREAT MODEL AND ASSUMPTIONS
In the context of Cypider, the focus is on the detection of
malware targeting Android mobile apps without the need of
having any prior knowledge about these malware. In par-
ticular, instead of focusing on the detection of an individual
instance of the malware, Cypider targets bulk detection of
malware families and variants as malicious communities in
349
the similarity network of the apps dataset. Moreover, Cypi-
der aims for a scalable yet accurate solution that can han-
dle the overwhelming volume of the daily detected malware,
which could aggressively exploit users’ smart devices. More
speciﬁcally, Cypider targets the detection of unobfuscated
APK contents. However, Cypider could handle some types
of obfuscations because it considers diﬀerent static contents
of the Android package in the analysis. The latter make
Cypider more resilient to obfuscation as it could ﬁngerprint
malware apps with other static contents that are not ob-
fuscated such as app permissions. Notice that some static
contents could be obfuscated in one app and not in another,
which depend on the authors of the apps. The evaluation
of Cypider uses real malware dataset along with random An-
droid apps from Google Play - where the apps are supposedly
obfuscated through ProGuard - to prove the eﬃciency and
the eﬀectiveness of Cypider in real word scenario, in which
the obfuscation is a part. Similarly, Cypider could not de-
tect transform attacks malware, whose malicious payload is
not in the actual APK static content and the payload is
downloaded at runtime. Furthermore, Cypider aims to de-
tect homogenous and pure malicious communities with only
one malware family in each community, and hence facilitat-
ing malware analysis. In addition, Cypider aims for a high