# 64-bit Process Detection and Integrity

## Table of Contents
1. **Introduction**
2. **Process Detection Techniques**
3. **Process Detection Integrity**
4. **Physical and Virtual Memory**
5. **Self-Map Trick in Windows and Linux**
6. **PFN FTW Trick**
7. **Hardware PTE Structure**
8. **Self-Map Detection Attacks**
9. **Implementation and Example Execution**
10. **Detected Memory Runs**
11. **Detecting Guest Processes from Host Dump**
12. **Future Directions and Weird Machine Overload**
13. **Public Symbols for Verification**
14. **Summary and Recommendations**
15. **Issues, Considerations, and Caveats**
16. **Acknowledgements and References**

---

### 1. Introduction
This document discusses advanced techniques for detecting and verifying 64-bit processes, particularly in the context of rootkit detection and system integrity. The content is based on research and presentations by various security professionals.

### 2. Process Detection Techniques
- **PspCidTable**: Used for process detection.
- **Csrss.exe Handle Table**: Another method for process detection.
- **Csrss.exe Internal Linked List (Unavailable in Vista+)**: This method is not available in newer versions of Windows.

#### Kernel Code Presentation
- **CSW14 Diff CPU Page Table & Logical Kernel Objects**: This technique is used to detect hidden kernel modules or "rootkit revealers."
- **Page Tables**: A paper by Karla Saur and Julian B. Grizzard, "Locating x86 Paging Structures in Memory Images," provides further insights into using page tables for process detection.
- **New Process Detection Technique**: This method is faster and involves a single pass, similar to "pmodump" but enhanced for 64-bit systems with additional checks.

### 3. Process Detection Integrity
- **Robustness**: The new detection technique is not easily attacked. Many modifications result in a Blue Screen of Death (BSOD).
- **Memory Integrity Checking**: The method allows for the extraction of candidate memory for integrity checking of memory pages.
- **Performance vs. Security**: A slower check can be made non-abortable if higher assurance is needed.
- **Current Check**: The current check is highly effective, with room for improvement in countermeasures and performance.

### 4. Physical and Virtual Memory
- **Page Frames**: 4k physical blocks with a Page Frame Number (PFN) as the physical memory address.
- **Virtual Address/Pages**: Page protection is applied to virtual pages/address ranges.

### 5. Self-Map Trick in Windows and Linux
- **Linux**: Stephane Eranian and David Mosberger's work on "Virtually-mapped Linear Page Tables" in the IA-64 Linux Kernel.
- **Windows**: Self-mapping exists for each process, not just the kernel. Examining a page table using `!process 0 0 dirbase/cr3` and `!dq` commands can reveal the current PFN.

### 6. PFN FTW Trick
- **Valid PFN**: A valid PFN will be bounded by system physical memory constraints, making it a powerful check.
- **64-bit Systems**: The check is more robust in 64-bit systems due to the larger address space.

### 7. Hardware PTE Structure
- **HARDWARE_PTE Structure**: Defines the structure of a hardware page table entry, including fields like Valid, Write, Owner, etc.

### 8. Self-Map Detection Attacks
- **Performance Attacks**: De-tuning performance can help validate spoof entries and malformed cases.
- **Memory Zeroing**: Windows quickly zeroes memory, which can be assessed using `!ed [physical]`.
- **BSOD**: Destroying self-map results in a BSOD.

### 9. Implementation and Example Execution
- **Example Execution**: Demonstrates how to use the detection method with .vmem and .DMP files.

### 10. Detected Memory Runs
- **Gap Detection**: Round values by offset to find gap sizes, adjusting to automate memory run detection.
- **Takahiro Haruyama's Blog Post**: Discusses related issues and memory run detection from logical sources.

### 11. Detecting Guest Processes from Host Dump
- **Host Memory Dump**: Includes page tables for every guest VM process and host process entries.
- **Hypervisor Integration**: Potential for deep integration with hypervisor page mapping data.
- **Ghost Processes**: Hypervisors may not wipe memory when moving instances or after suspension, leading to ghost processes.

### 12. Future Directions and Weird Machine Overload
- **Microsoft Research**: Work on tracking rootkit footprints with a practical memory analysis system.
- **Verification Challenges**: Verifying the state of a system at this level is a complex problem.

### 13. Public Symbols for Verification
- **Public Symbols and RTTI**: Can be used to find and verify all pointers, enhancing anti-Return-Oriented Programming (ROP) attacks.
- **Kernel Pool Verification**: Advanced methods for verifying function pointers in kernel pools via virtual machine introspection.

### 14. Summary and Recommendations
- **Attacks and Defenses**: Discusses the worst-case scenarios and the potential for detection through tracing, logging, and monitoring tools.
- **Future Defenses**: Emphasizes the importance of using virtual machines and tools like ProcDetect for process detection.
- **Deep Verifiability**: Future developments aim to provide deeper verifiability for more devices.

### 15. Issues, Considerations, and Caveats
- **Hypervisor Use**: Secure the guest/host and consider the risks of hypervisor escape.
- **Self-Map Detection**: Relies on the page table and may need to account for "no paging process" and other considerations.
- **Remote DMA**: A potential risk that should be avoided.

### 16. Acknowledgements and References
- **References**: Follow embedded links and their references for further reading.
- **Acknowledgements**: Thanks to the many security professionals who have contributed to this field through their research and discussions.

---

**IOActive, Inc. Copyright Â©2014. All Rights Reserved.**