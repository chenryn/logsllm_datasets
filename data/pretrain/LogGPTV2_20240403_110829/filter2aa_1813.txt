Using Guided Missiles in Drive­bys
   Automatic browser 
fingerprinting and 
exploitation with the 
Metasploit Framework: 
   Browser Autopwn
James Lee
2
Browser Autopwn
● Auxiliary module for the Metasploit Framework
● Fingerprints a client
● Determines what exploits might work
● Used to suck
● Now it doesn't
3
Outline
● Intro
● Cluster bombs
● Guided missiles
● Fingerprinting and targeting
● Stealth
● Demos
● Commercial comparison
4
# whoami
● James Lee
● egypt 
● Co­Founder, Teardrop Security
● Developer, Metasploit Project
5
My Involvement in MSF
● Started submitting patches and bug reports in 
2007
● HD gave me commit access in April 2008
● Broke the repo April 2008
6
The Metasploit Framework
● Created by HD Moore in 2003
● ncurses based game
● Later became a real exploit framework in perl
● Rewritten in ruby in 2005
● Which is way better than python
● Extensible framework for writing exploits
7
I 
“
send_response(client, content)
11
Or Arbitrarily Complex
● ani_loadimage_chunksize is 581 lines of code
● As of June 28, MSF has 85 browser exploit 
modules
Problem
Solution
14
Cluster Bomb Approach
● Is it IE?  Send all the IE sploits
● Is it FF?  Send all the FF sploits
● Originally exploits were ad­hoc
● Pain in the ass when new sploits come out
Problem
Solution
17
Guided Missile Approach
● Better client and OS fingerprinting
● less likely to crash or hang the browser
● Only send exploits likely to succeed
● Browser is IE7? Don't send IE6 sploits, etc.
18
Fingerprinting the Client
● User Agent
● Easy to spoof
● Easy to change in a 
proxy
● A tiny bit harder to 
change in JS
19
Fingerprinting the Client
● Various JS objects only exist in one browser
● window.opera, Array.every
● Some only exist in certain versions
● window.createPopup, Array.every, window.Iterator
● Rendering differences and parser bugs
● IE's conditional comments
20
Internet Explorer
● Parser bugs, conditional comments
● Reliable, but not precise
● ScriptEngine*Version()
● Almost unique across all combinations of client and 
OS
● Brought to my attention by Jerome Athias
21
Opera
● window.opera.version()
● Includes minor version, e.g. “9.61”
22
Hybrid Approach for FF
● Existence of 
document.getElementsByClassName
means Firefox 3.0
● If User Agent says IE6, go with FF 3.0
● If UA says FF 3.0.8, it's probably not lying, so 
use the more specific value
23
Safari
● Still in progress
● Existence of window.console
● If Firebug is installed on FF, shows up there, too
● Availability of window.onmousewheel
● Defaults to null, so have to check typeof
24
Fingerprinting the OS
● User Agent
● Could use something like p0f
● From the server side, that's about it
25
Internet Explorer
● Again, ScriptEngine*Version()
● Almost unique across all combinations of client 
and OS, including service pack
26
Opera
● Each build has a unique opera.buildNumber()
● Gives platform, but nothing else
27
Firefox
● navigator.platform and friends are affected by 
the User Agent string
● navigator.oscpu isn't
● “Linux i686”
● “Windows NT 6.0”
28
Others
● Really all we're left with is the User Agent
● That's okay, most don't lie
● And those that do are likely to be patched anyway
● Generic, works everywhere when UA is not 
spoofed
29
Future Fingerprinting
● QuickTime
● Adobe
● Less well­known third party stuff
30
ActiveX
● “new ActiveXObject()” works if you have 
the class name
● Otherwise, IE doesn't seem to have a generic 
way to tell if an ActiveX object got created 
● document.write(“”)
● document.createElement(“object”)
31
Solution
● typeof(obj.method)
● 'undefined' if the object failed to initialize
● 'unknown' or possibly a real type if it worked
Target Acquired
33
What is it Vulnerable to?
● Coarse determination server­side
● JavaScript builds fingerprint, sends it back to the 
server
● Server sends sploits that match the browser and 
OS, possibly version
● Fine determination client­side
● navigator.javaEnabled exists, try 
mozilla_navigatorjava
Select a Missile
● Sort by reliability
● Exploits contain 
their own JS tests
Problem
36
Solution
37
Obfuscation
● Randomize identifiers
● Build strings from other things
● JSON / AJAX
● Obfuscation is not crypto
38
Encryption
● Put a key in the URL
● Not available in the stand­alone script
● Simple XOR is enough to beat AV and NIDS
● If they figure it out, it's easy to make the crypto 
stronger
39
Demonstrations
40
And we're back...
● I hope that worked
● Now how do YOU make exploits work within 
this framework?
41
Writing Exploits
● Add autopwn_info() to top of exploit class
● :ua_name is an array of browsers this exploit 
will work against
● :vuln_test is some javascript to test for the 
vulnerability (unless it's ActiveX)
● Usually comes directly from the exploit anyway
42
Example: mozilla_navigatorjava
    include Msf::Exploit::Remote::BrowserAutopwn
    autopwn_info({
        :ua_name    => HttpClients::FF,
        :javascript => true,
        :rank       => NormalRanking,#reliable memory corruption
        :vuln_test  => %Q|
            if ( 
window.navigator.javaEnabled && 
window.navigator.javaEnabled()
){
                is_vuln = true;
            }
            |,
    })
43
Example: ms06_067_keyframe
    include Msf::Exploit::Remote::BrowserAutopwn
    autopwn_info({
        :ua_name    => HttpClients::IE,
        :javascript => true,
        :os_name    => OperatingSystems::WINDOWS,
        :vuln_test  => 'KeyFrame',
        :classid    => 'DirectAnimation.PathControl',
        :rank       => NormalRanking #reliable memory corruption
    })
44
Example: winzip_fileview
    include Msf::Exploit::Remote::BrowserAutopwn
    autopwn_info({
        :ua_name    => HttpClients::IE,
        :javascript => true,
        :os_name    => OperatingSystems::WINDOWS,
        :vuln_test  => 'CreateFolderFromName',
        :classid    => '{A09AE68F­B14D­43ED­B713­BA413F034904}',
        :rank       => NormalRanking #reliable memory corruption
    })
45
Browser Autopwn Summary
● Reliable Target Acquisition
● Smart Missile Selection
● Stealthy from an AV perspective
● Easy to extend
● Detection results stored in a database
46
Commercial Comparison
● Mpack
● Firepack
● Neosploit
● Luckysploit
47
Mpack, Firepack
● Hard to acquire
● Old exploits
● Detection is only server­side
● Hard to change or update exploits
● Obfuscation + XOR
48
Neosploit
● Compiled ELFs run as CGI
● Unless you get the source or do some RE, you 
won't really know what it does
49
Luckysploit
● Real crypto (RSA, RC4)
● Even harder to acquire
50
Browser Autopwn
● Easy to write new exploits or take out old ones
● Free (three­clause BSD license)
● Easy to get (http://metasploit.com)
● Not written in PHP 
● OS and client detection is client­side, more 
reliable in presence of spoofed or borked UA
51
Future
● More flexible payload selection
● Stop when you get a shell
● Maybe impossible in presence of NAT/proxies
● Easier­to­use JS obfuscation
● UAProf for mobile devices
● Integration with MetaPhish
52
Download it
● svn co http://metasploit.com/svn/framework3/trunk 
● Submit patches to PI:EMAIL
Thanks
● hdm, valsmith, 
tebo, mc, cg, Dean 
de Beer, pragmatk
● Everybody who 
helped with testing
● Whoever created 
ActiveX