# Using Guided Missiles in Drive-bys: Automatic Browser Fingerprinting and Exploitation with the Metasploit Framework

## Introduction
### Browser Autopwn
- **Auxiliary Module for the Metasploit Framework**
- **Functionality**:
  - Fingerprints a client.
  - Determines which exploits are likely to succeed.
  - Originally designed to "suck," but now it doesn't.

## Outline
1. Introduction
2. Cluster Bombs
3. Guided Missiles
4. Fingerprinting and Targeting
5. Stealth
6. Demonstrations
7. Commercial Comparison

## About the Author
- **Name**: James Lee
- **Affiliation**: Co-Founder, Teardrop Security
- **Role**: Developer, Metasploit Project
- **Location**: Egypt

## My Involvement in MSF
- **Started Submitting Patches and Bug Reports**: 2007
- **Commit Access Granted by HD Moore**: April 2008
- **Broke the Repository**: April 2008

## The Metasploit Framework
- **Created by HD Moore**: 2003
- **Initial Version**: ncurses-based game
- **Evolution**:
  - Later became a real exploit framework in Perl.
  - Rewritten in Ruby in 2005.
  - Extensible framework for writing exploits.
  - **Note**: Ruby is considered superior to Python for this purpose.

## Example Code Snippet
```ruby
send_response(client, content)
```

## Problem and Solution
- **Problem**: Ad-hoc exploitation methods.
- **Solution**: More precise and reliable fingerprinting and targeting.

## Cluster Bomb Approach
- **Description**:
  - Send all IE exploits if the browser is IE.
  - Send all FF exploits if the browser is FF.
  - Painful to manage when new exploits are released.

## Guided Missile Approach
- **Advantages**:
  - Better client and OS fingerprinting.
  - Less likely to crash or hang the browser.
  - Only sends exploits likely to succeed.
  - Example: If the browser is IE7, don't send IE6 exploits.

## Fingerprinting the Client
- **User Agent**:
  - Easy to spoof.
  - Can be changed in a proxy or JavaScript.
- **JavaScript Objects**:
  - `window.opera`, `Array.every` (IE-specific).
  - `window.createPopup`, `Array.every`, `window.Iterator` (version-specific).
  - Rendering differences and parser bugs (e.g., IE's conditional comments).

## Browser-Specific Fingerprinting
- **Internet Explorer**:
  - Parser bugs, conditional comments.
  - `ScriptEngine*Version()` (almost unique across client and OS combinations).
- **Opera**:
  - `window.opera.version()` (includes minor version, e.g., "9.61").
- **Firefox**:
  - Hybrid approach using `document.getElementsByClassName` and User Agent.
- **Safari**:
  - In progress; uses `window.console` and `window.onmousewheel`.

## Fingerprinting the Operating System
- **User Agent**:
  - Affected by the User Agent string.
- **Other Methods**:
  - `navigator.platform` and `navigator.oscpu` (not affected by User Agent).

## Future Fingerprinting
- **Third-Party Software**:
  - QuickTime, Adobe, and other less well-known third-party software.

## ActiveX
- **Detection**:
  - `new ActiveXObject()` works if you have the class name.
  - `typeof(obj.method)` can determine if the object was created successfully.

## Selecting Exploits
- **Coarse Determination**:
  - JavaScript builds a fingerprint and sends it back to the server.
  - Server sends exploits that match the browser and OS.
- **Fine Determination**:
  - Client-side checks, e.g., `navigator.javaEnabled`.

## Obfuscation and Encryption
- **Obfuscation**:
  - Randomize identifiers.
  - Build strings from other things.
  - Use JSON/AJAX.
- **Encryption**:
  - Key in the URL.
  - Simple XOR encryption to beat AV and NIDS.
  - Easily upgradable to stronger crypto.

## Demonstrations
- **Live Demo**:
  - I hope that worked.
  - Now, how do you make exploits work within this framework?

## Writing Exploits
- **Steps**:
  - Add `autopwn_info()` to the top of the exploit class.
  - Define `:ua_name`, `:vuln_test`, and other parameters.

## Examples
### Example: mozilla_navigatorjava
```ruby
include Msf::Exploit::Remote::BrowserAutopwn
autopwn_info({
    :ua_name    => HttpClients::FF,
    :javascript => true,
    :rank       => NormalRanking, # Reliable memory corruption
    :vuln_test  => %Q|
        if (window.navigator.javaEnabled && window.navigator.javaEnabled()){
            is_vuln = true;
        }
    |,
})
```

### Example: ms06_067_keyframe
```ruby
include Msf::Exploit::Remote::BrowserAutopwn
autopwn_info({
    :ua_name    => HttpClients::IE,
    :javascript => true,
    :os_name    => OperatingSystems::WINDOWS,
    :vuln_test  => 'KeyFrame',
    :classid    => 'DirectAnimation.PathControl',
    :rank       => NormalRanking # Reliable memory corruption
})
```

### Example: winzip_fileview
```ruby
include Msf::Exploit::Remote::BrowserAutopwn
autopwn_info({
    :ua_name    => HttpClients::IE,
    :javascript => true,
    :os_name    => OperatingSystems::WINDOWS,
    :vuln_test  => 'CreateFolderFromName',
    :classid    => '{A09AE68F-B14D-43ED-B713-BA413F034904}',
    :rank       => NormalRanking # Reliable memory corruption
})
```

## Summary
- **Reliable Target Acquisition**
- **Smart Missile Selection**
- **Stealthy from an AV Perspective**
- **Easy to Extend**
- **Detection Results Stored in a Database**

## Commercial Comparison
- **Mpack, Firepack**:
  - Hard to acquire.
  - Old exploits.
  - Detection only server-side.
  - Hard to update.
  - Obfuscation + XOR.
- **Neosploit**:
  - Compiled ELFs run as CGI.
  - Requires source or RE to understand.
- **Luckysploit**:
  - Real crypto (RSA, RC4).
  - Even harder to acquire.

## Browser Autopwn
- **Advantages**:
  - Easy to write new exploits or remove old ones.
  - Free (three-clause BSD license).
  - Easy to get (http://metasploit.com).
  - Not written in PHP.
  - Client-side detection, more reliable in presence of spoofed or borked UA.

## Future
- **Flexible Payload Selection**
- **Stop When You Get a Shell**
- **Easier-to-Use JS Obfuscation**
- **UAProf for Mobile Devices**
- **Integration with MetaPhish**

## Download
- **SVN Checkout**:
  ```bash
  svn co http://metasploit.com/svn/framework3/trunk
  ```
- **Submit Patches to**: PI:EMAIL

## Thanks
- **Contributors**: hdm, valsmith, tebo, mc, cg, Dean de Beer, pragmatk
- **Testers**: Everyone who helped with testing
- **Special Mention**: Whoever created ActiveX