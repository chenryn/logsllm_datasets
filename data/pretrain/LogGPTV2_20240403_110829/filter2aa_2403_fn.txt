.text:0000D6F5   
mov     esp, ebp 
.text:0000D6F7   
pop     ebp 
.text:0000D6F8   
retn 
.text:0000D6F8 sys_info  
endp 
“3C”和“3E”听起来很熟：它是私有的、单功能加密－哈希函数，用于 Rainbow 公司生产的一款没
有内存的 Sentinel Pro 加密狗。 
本书的第 34 章详细介绍过哈希函数。 
就这个程序而言，我们可以据此判断它仅检测加密狗的“有/无”信息。这款加密狗上不具备内存芯片，
也就无法存储信息；换句话说这个程序不会向加密狗写数据。后面连续出现的双字符代码是指令代码，由
SSQC()函数接收和处理。其他字符串的哈希值都以 16 位数字的形式存储在加密狗里。因为开发厂商的加
密算法是私有算法，所以编写驱动程序替身、或者仿制硬件加密狗的做法都行不通。但是，“截获所有访问
加密狗的操作、继而找到程序核对的哈希值”确实行得通。不怕麻烦的话，我们还可以摸索程序逻辑、基
于私有的加密哈希函数再建一个软件，从而使用自制软件替代原有软件对数据文件进行加解密。 
代码 51/52/53 用于选择 LPT 打印机接口。3x/4x 用于选择相应的加密狗“系列”。不同类型的 Sentinel Pro
加密狗可以接在同一个 LPT 接口上，而区分加密狗的工作则由应用程序完成。 
除了字符串“0123456789”以外，传递给哈希函数的值都是双字符的字符串。然后，函数返回的哈希
值与一系列有效值进行比较。如果该值有效，全局变量 ctl_model 将被赋值为 0xC 或 0xB。 
此外，程序还定义了字符串“PRESS ANY KEY TO CONTINUE:”，这应当是通过加密狗认证之后的提
示信息。不过整个程序没有调用过这个字符串，恐怕这属于源程序的 bug 吧。 
接下来，我们要关注全局变量 ctl_mode 的读取指令。 
其中一处是： 
.text:0000D708 prep_sys proc near ; CODE XREF: init_sys+46Ap 
.text:0000D708 
.text:0000D708 var_14    = dword ptr -14h 
.text:0000D708 var_10    = byte ptr -10h 
.text:0000D708 var_8     = dword ptr -8 
.text:0000D708 var_2     = word ptr -2 
.text:0000D708 
.text:0000D708   
   push  
ebp 
.text:0000D709   
   mov  
eax, ds:net_env 
.text:0000D70E   
   mov  
ebp, esp 
.text:0000D710   
   sub  
esp, 1Ch 
.text:0000D713   
   test  
eax, eax 
.text:0000D715   
   jnz  
short loc_D734 
.text:0000D717   
   mov  
al, ds:ctl_model 
.text:0000D71C   
   test  
al, al 
.text:0000D71E   
   jnz  
short loc_D77E 
.text:0000D720   
   mov  
[ebp+var_8], offset aIeCvulnvvOkgT_ ; "Ie-cvulnvV\\\bOKG]T_" 
.text:0000D727   
   mov  
edx, 7 
.text:0000D72C   
   jmp  
loc_D7E7 
... 
.text:0000D7E7 loc_D7E7: ; CODE XREF: prep_sys+24j 
.text:0000D7E7   
    ; prep_sys+33j 
.text:0000D7E7   
   push  
edx 
.text:0000D7E8   
   mov  
edx, [ebp+var_8] 
.text:0000D7EB   
   push  
20h 
.text:0000D7ED   
   push  
edx 
.text:0000D7EE   
   push  
16h 
.text:0000D7F0   
   call  
err_warn 
.text:0000D7F5   
   push  
offset station_sem 
.text:0000D7FA   
   call  
ClosSem 
.text:0000D7FF   
   call  
startup_err 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
743 
如果 ctl_mode 为 0，那么一条经过加密处理的错误信息将被传递到解密程序，从而出现在屏幕上。 
这个错误信息的解密方法就是简单的 XOR 算法： 
.text:0000A43C err_warn  
proc near   
    ; CODE XREF: prep_sys+E8p 
.text:0000A43C   
    ; prep_sys2+2Fp ... 
.text:0000A43C 
.text:0000A43C var_55  
= byte ptr -55h 
.text:0000A43C var_54  
= byte ptr -54h 
.text:0000A43C arg_0   
= dword ptr  8 
.text:0000A43C arg_4   
= dword ptr  0Ch 
.text:0000A43C arg_8   
= dword ptr  10h 
.text:0000A43C arg_C   
= dword ptr  14h 
.text:0000A43C 
.text:0000A43C   
push     ebp 
.text:0000A43D   
mov     ebp, esp 
.text:0000A43F   
sub     esp, 54h 
.text:0000A442   
push     edi 
.text:0000A443   
mov     ecx, [ebp+arg_8] 
.text:0000A446   
xor     edi, edi 
.text:0000A448   
test     ecx, ecx 
.text:0000A44A   
push     esi 
.text:0000A44B   
jle     short loc_A466 
.text:0000A44D   
mov     esi, [ebp+arg_C] ; key 
.text:0000A450   
mov     edx, [ebp+arg_4] ; string 
.text:0000A453 
.text:0000A453 loc_A453:   
    ; CODE XREF: err_warn+28j 
.text:0000A453   
xor     eax, eax 
.text:0000A455   
mov     al, [edx+edi] 
.text:0000A458   
xor     eax, esi 
.text:0000A45A   
add     esi, 3 
.text:0000A45D   
inc     edi 
.text:0000A45E   
cmp     edi, ecx 
.text:0000A460   
mov     [ebp+edi+var_55], al 
.text:0000A464   
jl     short loc_A453 
.text:0000A466 
.text:0000A466 loc_A466:   
    ; CODE XREF: err_warn+Fj 
.text:0000A466   
mov     [ebp+edi+var_54], 0 
.text:0000A46B   
mov     eax, [ebp+arg_0] 
.text:0000A46E   
cmp     eax, 18h 
.text:0000A473   
jnz     short loc_A49C 
.text:0000A475   
lea     eax, [ebp+var_54] 
.text:0000A478   
push     eax 
.text:0000A479   
call     status_line 
.text:0000A47E   
add     esp, 4 
.text:0000A481 
.text:0000A481 loc_A481:   
    ; CODE XREF: err_warn+72j 
.text:0000A481   
push     50h 
.text:0000A483   
push     0 
.text:0000A485   
lea     eax, [ebp+var_54] 
.text:0000A488   
push     eax 
.text:0000A489   
call     memset 
.text:0000A48E   
call     pcv_refresh 
.text:0000A493   
add     esp, 0Ch 
.text:0000A496   
pop     esi 
.text:0000A497   
pop     edi 
.text:0000A498   
mov     esp, ebp 
.text:0000A49A   
pop     ebp 
.text:0000A49B   
retn 
.text:0000A49C 
.text:0000A49C loc_A49C:   
    ; CODE XREF: err_warn+37j 
.text:0000A49C   
push    0 
.text:0000A49E   
lea     eax, [ebp+var_54] 
.text:0000A4A1   
mov     edx, [ebp+arg_0] 
.text:0000A4A4   
push     edx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
744 
逆向工程权威指南（下册） 
.text:0000A4A5   
push     eax 
.text:0000A4A6   
call     pcv_lputs 
.text:0000A4AB   
add     esp, 0Ch 
.text:0000A4AE   
jmp     short loc_A481 
.text:0000A4AE err_warn  
endp 
因为程序对提示信息进行了加密处理（这是常见手段），所以我无法在可执行程序里直接找到错误的提
示信息。 
此外，程序里还有一个调用哈希函数 SSQ()的地方。在调用过程中，该处指令向哈希函数传递了字符
串“offln”。后续指令将返回值与 0xFE81 和 0x12A9 进行比对。如果两个值不匹配，程序将启用 timer()函
数（貌似是等待用户重新插入加密狗），然后在屏幕上显示另一个错误提示信息： 
.text:0000DA55 loc_DA55:             
   ; CODE XREF: sync_sys+24Cj 
.text:0000DA55           
push     offset aOffln    ; "offln" 
.text:0000DA5A           
call     SSQ 
.text:0000DA5F           
add      esp, 4 
.text:0000DA62           
mov      dl, [ebx] 
.text:0000DA64           
mov      esi, eax 
.text:0000DA66           
cmp      dl, 0Bh 
.text:0000DA69           
jnz      short loc_DA83 
.text:0000DA6B           
cmp      esi, 0FE81h 
.text:0000DA71           
jz       OK 
.text:0000DA77           
cmp     esi, 0FFFFF8EFh 
.text:0000DA7D           
jz       OK 
.text:0000DA83 
.text:0000DA83 loc_DA83:           
   ; CODE XREF: sync_sys+201j 
.text:0000DA83           
mov      cl, [ebx] 
.text:0000DA85           
cmp      cl, 0Ch 
.text:0000DA88           
jnz      short loc_DA9F 
.text:0000DA8A           
cmp      esi, 12A9h 
.text:0000DA90           
jz       OK 
.text:0000DA96           
cmp      esi, 0FFFFFFF5h 
.text:0000DA99           
jz       OK 
.text:0000DA9F 
.text:0000DA9F loc_DA9F:      
   ; CODE XREF: sync_sys+220j 
.text:0000DA9F           
mov      eax, [ebp+var_18] 
.text:0000DAA2           
test     eax, eax 
.text:0000DAA4           
jz       short loc_DAB0 
.text:0000DAA6           
push     24h 
.text:0000DAA8           
call     timer 
.text:0000DAAD           
add      esp, 4 
.text:0000DAB0 
.text:0000DAB0 loc_DAB0:          
   ; CODE XREF: sync_sys+23Cj 
.text:0000DAB0           
inc      edi 
.text:0000DAB1           
cmp     edi, 3 
.text:0000DAB4           
jle      short loc_DA55 
.text:0000DAB6           
mov      eax, ds:net_env 
.text:0000DABB           
test     eax, eax 
.text:0000DABD           
jz       short error 
... 
.text:0000DAF7 error:         
   ; CODE XREF: sync_sys+255j 
.text:0000DAF7                   
   ; sync_sys+274j ... 
.text:0000DAF7           
mov      [ebp+var_8], offset encrypted_error_message2 
.text:0000DAFE           
mov      [ebp+var_C], 17h ; decrypting key  