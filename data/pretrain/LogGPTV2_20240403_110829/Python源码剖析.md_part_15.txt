随后向1ist末尾追加元素2，
首先创建一个包含一个元素的1ist，
观察结果如图4-10所示。
located=l,
Python中的List对象
深度探索动态语言核心技术
它始终如一地维护着当前iist所拥有的全部内存数量。
ob_size=1
ael 1ist3
print listl
11st1=[1]
print listl
print listl
del 1ist2
print listl
1ist3
print
list2
图4-11观察PyListObject对象缓冲池的使用
图4-10
list1
ob_size=sd\n",op->a1located,op->ob_size):
观察PyListObject中的内存管理
这里明确地显示出了PyListobject所采用的与C++
，可以看到，调整内存空间的动作发生了。allocated
ob_size=2
，这时ob_size和a1located都是1。这时
num_free_lists=3
num_free_lists=2
mum_free_lists=l
E
mum_free_lists=2
[1]
num_free_lists=3
[1]
L1.
1st.append（3）
3]
obsize#3
---
## Page 107
因为理论上，在最优情况下，散列表能提供0（1）复杂度的搜索效率。
因此，PyDictobject没有如map一样采用平衡二元树，而是采用了散列表（hash table）
字节码的运行环境，其中会存放变量名和变量值的元素对，通过查找变量名获得变量值。
Python本身的实现中被大量地采用。比如Python会通过PyDictObject来建立执行Python
的是，PyDictobject对搜索的效率要求极其苛刻，这也是因为PyDictObject对象在
理论上，其搜索的时间复杂度为0（logN）。
map的实现基于RB-uree（红黑树）。RB-tree是一种平衡二元树，能够提供良好的搜索效率
容器的实现都会基于设计良好的数据结构。比如C++的STL中的map就是一种关联容器，
望根据我们手中已有的某个元素来快速获得与之有某种联系的另一元素。一般而言，关联
当寻找到3之后，我们就能很轻松地获得与3有着“2倍”联系的另一元素。
倍”关系的关联容器中，（3，6），（2，4）就是容器中的两个元素对。其中3就是一个“键”，
器中的元素对通常是以（键（key）或值（value））这样的形式存在。比如在一个表示“2
的容器。关联式的容器中存储着一对对符合该容器所代表的关联规则的元素对。关联式容
这样的两个元素，而4和2同样也是被这种联系关联起来的一对元素。
被捆绑在一起，而别的元素则被排斥在外。比如对于“2倍”这样一种联系，6和3就是
Python中同样提供关联式容器，即pyDictObject对象（也称dict）。与map不同
关联容器的设计总会极大地关注键的搜索效率，因为通常我们使用关联容器，都是希
为了刻画某种对应关系，现代的编程语言通常都在语言级或标准库中提供某种关联式
元素和元素之间通常可能存在某种联系，这种神秘的联系使本来毫不相关的两个元素
Python中的Dict对象
Python源码剖析
一深度探索动态语言核心技术
第
CHAPTER
S
---
## Page 108
Python源码剖析
5.1
78
造成严重的后果。想象一下，在下一次搜索位置c的元素时，会从位置a开始，通过探测
除中间的某个位置b上的元素。如果直接将位置b上的元素删除，则会导致探测链的断裂，
元素时，问题就产生了。假如这条链的首元素位置为a，尾元素的位置为c，现在需要删
这些位置形成了一个“冲突探测链”（或简称探测序列）。当需要删除某条探测链上的某个
会再次使用探测函数，获得下一个候选位置，如此不断探测，总会找到一个可用的位置。
如果位置addr可用，则可将待插入元素放到位置addr：如果位置adar不可用，则Python
table所采用的方法，而Python中所采用的是另一种方法，即开放定址法。
率大于2/3时，散列冲突发生的概率就会大大增加。
个元素，而当前已经装入了6个元素，那么装载率就是6/10。研究表明，当散列表的装载
装载率是散列表中已使用空间和总空间的比值。举例来说，如果散列表一共可以容纳10
列技术与生俱来的问题。这里需要提到一个散列表中与散列冲突相关的概念一—装载率。
值。而且随着需要存储的数据的增多，这样的冲突就会发生得越来越频繁。散列冲突是散
所选择的散列函数的优劣将直接决定所实现的散列表的搜索效率的高低。
数（hashfunction），而映射后的值称为元素的散列值（hashvalue）。在散列表的实现中，
射为整数的过程对于Pyhon中dict的实现就显得尤为关键。用于映射的函数称为散列函
然后访问这片连续内存的第2个位置，就能得到与2对应的字母b。
就是一个整数，我们可以使用这样的映射函数（）=n，那么2的映射值就是2本身。
数1，2，,10，其依次对应a，b，，j。申请一块连续内存，并依次存储a，b，，j
视为索引值去访问某片连续的内存区域。看一个简单的例子，如图5-1所示，有10个整
散列表概述
这样，通过多次使用探测函数，从一个位置出发就可依次到达多个位置，我们认为
当产生散列冲突时，Py山on会通过一个二次探测函数，计算下一个候选位置addr，
有很多方法可以用来解决产生的散列冲突问题，比如开链法，这是SGISTL中的hash
在使用散列表的过程中，不同的对象经过散列函数的作用，可能被映射为相同的散列
对散列表这种数据结构的采用是以加速键的搜索过程为终极目标的，于是，将元素映
散列表的基本思想，是通过一定的函数将需搜索的键值映射为一个整数，将这个整数
当需要寻找与2对应的字母时，只需通过一定的函数将其映射为整数，显然，2本身
第5章
深度探索动态语言核心技术
Python中的Dict对象
#1
P
#2
图5-1散列表的例子
#10
---
## Page 109
5.2.1
5.2
同的状态间转换。PyDictObject中entry可以在3种状态间转换：Unused态、Active态
散列值可以避免每次查询的时候都要重新计算一遍散列值。
什么都能装得下的原因，因为在Python中，无论什么东西归根结底都是一个pyobject对象。
或slot。在Python中，
会详细讨论。
当承前启后的重任。对于这种伪删除技术，我们在分析Pyhon中的PyDictObject对象时
3PyDictEntry:
进行真正的删除，而是进行一种“伪删除”操作，必须要让该元素还存在于探测链上，担
存在于散列表中。
然也就不能搜索到位置。上的元素，所以结果是搜索失败。而实际上，待搜索的元素确实
素不属于这个探测链，因此探测函数会以为探测链在这里结束，导致不能到达位置c，自
函数，沿着探测链，
[dictobject.h]
PyDictObject
关联容器的entry
所以，在采用开放定址的冲突解决策略的散列表中，删除某条探测链上的元素时不能
在Pyhon中，在一个PyDictobject对象生存变化的过程中，其中的enitry会在不
可以看到，在PyDictobject中其实存放的都是pyobject*，这也是Python中的aict
在本章此后的描述中，我们将把关联容器中的一个（键，值）元素对称为一个entry
态下，me_key和me_value都不能为NULL。更进一步地说，me_key不能是dummy
在pyDictEntry中，me_hash域存储的是me_key的散列值，利用一个域来记录这个
对象。
当entry中存储了一个（key，value）对时，entry便转换到了Active态。在Acive
entry的me_key域才会为NULL。
它们。每一个entry在初始化的时候都会处于这种状态，而且只有在Unused态下，
态表明目前该entry中并没有存储（key，value）对，而且在此之前，也没有存储过
Fyobject
Py ssize_t me hash;
*me_key;
一步一步向位置c靠近，但是在到达位置b时，发现这个位置上的元
一个entry的定义如下：
/*cached hash code of me key */
Python源码剖析
5.2PyDictObject
一深度探索动态语言核心技术
79
---
## Page 110
Python源码剖析
5.2.2
80
的entry的数量。
现在，曾经及正处于Active态的entry个数，而ma_used则维护着当前正处于Active态
对象实际上是一大堆entry的集合，总控这些集合的结构如下：
typedef
#define
[dictobject.h]
从注释中可以清楚地看到，ma_Ei11域中维护着从pyDictobject对象创建开始直到
在Python中，关联容器是通过pyDictObject对象来实现的。而一个PyDictObject
关联容器的实现
PyDictEntry
PyDictEntry
Py_ssize_t
图5-2展示了entry的3种可能状态，以及它们之间的转换关系：
第5章Python中的Dict对象
冲突探测链的连续性。
然是无效的，但是其后的entry 可能是有效的，
察），entry进入Dummy态，这就是我们前面提到的“伪删除”技术。当Pyhon沿
的me_key将指向dummy对象（这个dummy对象究竞为何方神圣，后面我们会详细考
为Unused态，否则会如我们前面提到的，导致冲突探测链的中断。相反，entry中
当entry中存储的（key，value）对被删除后，entry的状态不能直接从Acive态转
PyDict_MINSIZE 8
一深度探索动态语言核心技术
me value I=NULL
mekevl=
me_ky=NULL
ma_smalltable(PyDiot_MINsIZEl;
ma_used;
"ma_table;
Ldictobject PyDictobjeet;
dummy
mask;
图5-2
Active
1/元素个数：
/元素个数：
PyDictObject中entry的状态转换图
itisert
insert
delete
Unused
Aotive
ActiveDummy
是应该被搜索的。这样，就保证了
Pyobject *key,long hash）
Dunmy
me_value-NULI
---
## Page 111
有ma_lookup
取一个ma_mask这样莫名其妙的名字，此乃后话，这里先按下不表。同样被按下不表的还
的entry的数量。至于这家伙为什么不叫ma_size这么好听的名字，偏偏要特立独行，
时一次又一次地检查ma_table的有效性，因为ma_table总是有效的。
块空间。这样，无论何时，ma_table域都不会为NULL，这带来了一个好处，不用在运行
Pyhon认为这家伙是一个大aict了，将会申请额外的内存空间，并将ma_table指向这
这与生俱来的8个entry的起始地址。而当PyDictobject中的entry数量超过8个时，
的变量将指向一片作为PyDictEntry集合的内存的开始位置。当一个PyDictObject对象
自己改变这个值来调节Python的运行效率。
的环境的需求，不需要在使用的过程中再次调用mal1oc申请内存空间。当然，我们可以
最佳值。它既不会太浪费内存空间，又能很好地满足Pyhon内部大量使用PyDictObject
同时创建。在dictobjecth中，这个值被设定为8，这个值被认为是通过大量的实验得出的
这个数组意味着当创建一个PyDictObjec对象时，至少有PyD主ct_MINSTZB个entry被
PyDictObject中的matable域是关联对象的关键所在，这个类型为PyDietEntry*
最后，PyDictobject中的ma_mask实际上记录了一个pyDictobject对象中所拥有
图5-3分别显示了Python中的“大”，“小”两种aict：
在pyDictobject定义的最后，有一个名为ma_smalltable的pyDictEntry数组。
dict中元素个数小于8
PyObject HEAD
ma_smalltable
ma lookup
matable
ma_mask
"小"dict
ma_used
ma fill
图5-3
PyDictObject中ma_table的两种可能状态
dict中元素个数大于8
PyObject HEAD
ma smaltable
ma_lookup
ma_table
ma_mask
ma_used
mafill
Python源码剖析
“大”dict
5.2PyDictObject
一深度探索动态语言核心技术
额外内存区域
81
---
## Page 112
Python源码剖析
5.3.1
5.3
82
的那个dunmy对象。原来dummy竟然是一个PyStringobject 对象，实际上，它仅仅是
可能是有效的，从而防止探测序列中断。
用来作为一种指示标志，表明该entry曾被使用过，且探测序列下一
PyObjeet* PyDict_New(void)
代码清单5-1
#define
typedef
[dictobject.c]
PyDictObject的创建和维护
从num_free_dicts可以看出，Pyhon中dict的实现同样使用了缓冲池。我们把代
值得注意的是，第一次调用PyDict_New时，在代码清单5-1的[1]处会创建前面提到
PyDictObject对象创建
第5章Python中的Dict对象
register dictobject *mp;
Python内部通过eyDict_New来创建一个新的dict对象（见代码清单5-1）。
else.
if
LEumy
INIT
(mp)-
(mp)
while(0)
while（0)
EMPTY_TO_MINSIZE（mP）;
//[3]：创建PyDictObject对象
(num_free_dfcts)
->ma_mask=PyDiot_MTNSTzE-1:
->ma_table
INIT_NONZERO_DICT_SLOTS(mP)dO[
PyDictobject dictobject;
7/[21：使用缓冲池
>ma
深度探索动态语言核心技术
=NULL）
used
(mp)->ma_Ei11
GC_New(dictobjecE,&PyDict_Type）;
(mp)
Sma
smalltable;
三0
sizeof((mp)->ma_smalltable));
key>m);
个位置的entry有
---
## Page 113
5.3.2PyDictObject中的元素搜索
代码清单5-2