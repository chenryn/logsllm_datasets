with a different technology that interprets a request differently.
Unfortunately, the reality is even more complicated, where RFCs
are ambiguous, bugs are inevitable, and powerful mechanisms to
rewrite HTTP requests are desirable and necessary features. In this
complex ecosystem, predicting, detecting, mitigating, or fixing HRS
is a non-trivial, open research problem.
While the results we present in this paper may appear to show
that some technologies and vendors are better than others, that
is an incorrect interpretation of our results. Our findings do not
represent a meaningful security comparison between the tested
servers, and they should not be taken out of context to pit one tech-
nology against another. Once again, this work presents a scientific,
systematic methodology to identify HRS, and uncover previously
unexplored venues for attacks, so that the developers and users of
these technologies are better equipped to understand the implica-
tions of the issue, and vet their own systems.
8 CONCLUSION
This paper is the first systematic exploration of HRS attacks. Re-
visiting our research questions from Section 3, we proposed an
experiment infrastructure and methodology for efficient discovery
of attacks (Q1), developed a novel grammar-based differential fuzzer
to test all components of an HTTP request for viable exploits (Q2),
provided insights into previously unknown success (and failure)
modes enabled by our exploits (Q3), and finally documented haz-
ardous combinations of popular servers (Q4). Our findings collec-
tively show that HRS may yet evolve into an even more complex
attack, and it is paramount that the security community tackle the
open research questions in the areas of detection and defense.
ACKNOWLEDGMENTS
This work was supported by the National Science Foundation under
grant CNS-1703454 and by Secure Business Austria.
REFERENCES
[1] Cornelius Aschermann, Tommaso Frassetto, Thorsten Holz, Patrick Jauernig,
Ahmad-Reza Sadeghi, and Daniel Teuchert. 2019. NAUTILUS: Fishing for Deep
Bugs with Grammars. In The Network and Distributed System Security Symposium.
[2] BuiltWith. [n.d.]. BuiltWith Technology Lookup. https://trends.builtwith.com/
CDN/Content-Delivery-Network.
[3] Cloudflare Help Center. 2021. Using Page Rules to Re-Write Host Head-
ers. https://support.cloudflare.com/hc/en-us/articles/206652947-Using-Page-
Rules-to-Re-Write-Host-Headers.
[4] Jianjun Chen, Jian Jiang, Haixin Duan, Nicholas Weaver, Tao Wan, and Vern Pax-
son. 2016. Host of Troubles: Multiple Host Ambiguities in HTTP Implementations.
In ACM Conference on Computer and Communications Security.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1817[5] Evan Custodio. 2019. Mass account takeovers using HTTP Request Smuggling
on https://slackb.com/ to steal session cookies. https://hackerone.com/reports/
737140.
[6] Evan Custodio. 2020. Practical Attacks Using HTTP Request Smuggling by
@defparam. NahamCon. https://www.youtube.com/watch?v=3tpnuzFLU8g.
[7] Evan Custodio. 2020. Smuggler. https://github.com/defparam/smuggler.
[8] Jeremy Druin. 2021. OWASP Mutillidae II. https://github.com/webpwnized/
mutillidae.
[9] Roy Fielding, James Gettys, Jeff Mogul, Henrik Frystyk, and Tim Berners-Lee.
https://tools.ietf.org/html/
1997. Hypertext Transfer Protocol – HTTP/1.1.
rfc2068.
[10] Roy Fielding and Julian Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1):
Message Syntax and Routing. https://tools.ietf.org/html/rfc7230.
[11] Roy Fielding and Julian Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1):
Semantics and Content. https://tools.ietf.org/html/rfc7231.
[12] Omer Gil. 2017. Web Cache Deception Attack. Black Hat USA.
//www.blackhat.com/us-17/briefings.html#web-cache-deception-attack.
[13] Omer Gil. 2017. Web Cache Deception Attack. https://omergil.blogspot.com/
https:
2017/02/web-cache-deception-attack.html.
[14] Patrice Godefroid. 2020. Fuzzing: Hack, Art, and Science. Commun. ACM 63, 2
(2020).
[15] James Kettle. 2019. HTTP Desync Attacks: Request Smuggling Reborn. PortSwig-
https://portswigger.net/blog/http-desync-attacks-
ger Web Security Blog.
request-smuggling-reborn.
[16] James Kettle. 2019. Password theft login.newrelic.com via Request Smuggling.
HackerOne. https://hackerone.com/reports/498052.
[17] James Kettle. 2019. Stored XSS on https://paypal.com/signin via cache poisoning.
HackerOne. https://hackerone.com/reports/488147.
[18] James Kettle. 2021. HTTP/2: The Sequel is Always Worse.
Black Hat
USA. https://www.blackhat.com/us-21/briefings/schedule/#http2-the-sequel-is-
always-worse-22668.
[19] Amit Klein. 2020. HTTP Request Smuggling in 2020 – New Variants, New
Defenses and New Challenge. Black Hat USA. https://www.blackhat.com/us-
20/briefings/schedule/#http-request-smuggling-in---new-variants-new-
defenses-and-new-challenges-20019.
[20] Graham Klyne. 2021. Message Headers. https://www.iana.org/assignments/
message-headers/message-headers.xhtml.
[21] Dima Kumets. 2019. 8 best practices for multi-CDN implementations. https:
//www.fastly.com/blog/best-practices-multi-cdn-implementations.
[22] Emil Lerner. 2021. http2smugl. https://github.com/neex/http2smugl.
[23] Regis Leroy. 2016. Hiding Wookiees in HTTP: HTTP smuggling. DEF CON.
https://www.youtube.com/watch?v=dVU9i5PsMPY.
[24] Chaim Linhart, Amit Klein, Ronen Heled, and Steve Orrin. 2005. HTTP Re-
quest Smuggling. Watchfire. https://www.cgisecurity.com/lib/HTTP-Request-
Smuggling.pdf.
[25] Anna MacLachlan. 2015. The benefits of using Varnish. https://www.fastly.com/
blog/benefits-using-varnish.
[26] Lori MacVittie. 2017. Security Rule Zero: A Warning about X-Forwarded-
For. https://www.f5.com/company/blog/security-rule-zero-a-warning-about-
x-forwarded-for.
[27] William M. McKeeman. 1998. Differential Testing for Software. Digital Technical
Journal 10, 1 (1998).
[28] Seyed Ali Mirheidari, Sajjad Arshad, Kaan Onarlioglu, Bruno Crispo, Engin Kirda,
and William Robertson. 2020. Cached and Confused: Web Cache Deception in
the Wild. In USENIX Security Symposium.
[29] Seyed Ali Mirheidari, Matteo Golinelli, Kaan Onarlioglu, Engin Kirda, and Bruno
Crispo. 2022. Web Cache Deception Escalates!. In USENIX Security Symposium.
[30] NGINX. [n.d.]. Cloudflare boosts performance and stability for its millions of
https://www.nginx.com/success-stories/cloudflare-
websites with NGINX.
boosts-performance-stability-millions-websites-with-nginx/.
[31] Hoai Viet Nguyen, Luigi Lo Iacono, and Hannes Federrath. 2019. Your Cache
Has Fallen: Cache-Poisoned Denial-of-Service Attack. In ACM Conference on
Computer and Communications Security.
[32] Shirin Nilizadeh, Yannic Noller, and Corina S. Pasareanu. 2019. DifFuzz: Differ-
ential Fuzzing for Side-channel Analysis. In IEEE/ACM International Conference
on Software Engineering.
[33] Theofilos Petsios, Adrian Tang, Salvatore Stolfo, Angelos D. Keromytis, and
Suman Jana. 2017. Nezha: Efficient Domain-Independent Differential Testing. In
IEEE Security & Privacy.
[34] Victor Le Pochat, Tom Van Goethem, Samaneh Tajalizadehkhoob, Maciej Ko-
rczyński, and Wouter Joosen. 2021. Tranco – A Research-Oriented Top Sites
Ranking Hardened Against Manipulation. https://tranco-list.eu/.
[35] PortSwigger. [n.d.]. Exploiting HTTP request smuggling vulnerabilities. https:
//portswigger.net/web-security/request-smuggling/exploiting.
[36] PortSwigger. 2019. HTTP Request Smuggler. https://github.com/PortSwigger/
http-request-smuggler.
Table 9: Tested HTTP servers and versions.
HTTP Server
Apache
NGINX
Tomcat
Apache Traffic Server (ATS)
HAProxy
Squid
Varnish
Akamai
Cloudflare
CloudFront
Tested Version
2.4.46
1.18.0
9.0.40
8.1.1
2.3.1
4.13
6.0.7
N/A
N/A
N/A
[37] Suphannee Sivakorn, George Argyros, Kexin Pei, Angelos D. Keromytis, and
Suman Jana. 2017. HVLearn: Automated Black-Box Analysis of Hostname Verifi-
cation in SSL/TLS Implementations. In IEEE Security & Privacy.
[38] Andreas Zeller, Rahul Gopinath, Marcel Böhme, Gordon Fraser, and Christian
In The Fuzzing Book. Saarland University.
Holler. 2019. The Fuzzing Book.
https://www.fuzzingbook.org/.
A TESTED HTTP PROCESSORS
We experiment with 10 popular HTTP processors in this work, us-
ing the latest stable versions available at the time of writing. Table 9
shows specific versions of each technology, with the exception of
CDNs which do not have public release labels.
B FORMAL MUTATION DEFINITIONS
T-Reqs uses string and tree mutations to generate HTTP requests.
Here, we provide formal definitions for mutation operations.
String mutation operations.
Given:
• 𝑁 is a set of all non-terminal symbols in a CFG.
• 𝑇 is a set of all terminal symbols in a CFG.
• 𝐵 is a predefined character pool.
Let 𝑠 be a string mutable symbol represented by a CFG as
𝑠 ::= 𝑡1|𝑡2|...|𝑡𝑘
where 𝑠 ∈ 𝑁 , and 𝑡𝑖 ∈ 𝑇 .
Given the expansion of 𝑠 → 𝑡1, where 𝑡1 is a sequence of 𝑛
characters 𝑐1𝑐2...𝑐𝑛, a string mutator is represented as a function
𝑓 (𝑡1, 𝑜𝑝, 𝑗, 𝑏) where 𝑜𝑝 ∈ {delete-char, replace-char, insert-char},
1 ≤ 𝑗 ≤ 𝑛, and 𝑏 ∈ 𝐵:
𝑓 (𝑐1...𝑐𝑛, 𝑜𝑝, 𝑗, 𝑏) =
𝑐1...𝑐 𝑗−1𝑐 𝑗+1...𝑐𝑛,
𝑐1...𝑐 𝑗−1𝑏𝑐 𝑗+1...𝑐𝑛,
𝑐1...𝑐 𝑗𝑏𝑐 𝑗+1...𝑐𝑛,
if 𝑜𝑝 = 𝑑𝑒𝑙𝑒𝑡𝑒-𝑐ℎ𝑎𝑟
if 𝑜𝑝 = 𝑟𝑒𝑝𝑙𝑎𝑐𝑒-𝑐ℎ𝑎𝑟
if 𝑜𝑝 = 𝑖𝑛𝑠𝑒𝑟𝑡-𝑐ℎ𝑎𝑟
Tree mutation operations.
Given:
• 𝑁 is a set of all non-terminal symbols in a CFG.
• 𝑇 is a set of all terminal symbols in a CFG.
• 𝐻 is a predefined symbol pool.
Let 𝑠 be a tree mutable symbol which is represented by a CFG as
𝑠 ::= ... | ... | ...
where 𝑠 ∈ 𝑁 , 𝑛𝑖 ∈ 𝑁 for any 1 ≤ 𝑖 ≤ 𝑘 and 𝑙 ≤ 𝑖 ≤ 𝑚. Given the
expansion of 𝑠 → ..., a tree mutator is represented as a
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1818function of the symbol 𝑠, an operation 𝑜𝑝, a sequence position 𝑗,
and a symbol :
"iso-8859-1" | "utf-7" | "utf-8"
𝑔(..., 𝑜𝑝, 𝑗, ) =
......,
if 𝑜𝑝 = 𝑑𝑒𝑙𝑒𝑡𝑒-𝑒𝑙𝑒𝑚
......,
if 𝑜𝑝 = 𝑟𝑒𝑝𝑙𝑎𝑐𝑒-𝑒𝑙𝑒𝑚
......,
if 𝑜𝑝 = 𝑖𝑛𝑠𝑒𝑟𝑡-𝑒𝑙𝑒𝑚
"chunked"
"SCRAM-SHA-1","SCRAM-SHA-256","vapid"
"no-store" | "no-transform" | "only-if-cached"
 ::= "utf-16" | "utf-16BE" | "utf-32" | "utf-32BE" | "us-ascii" |
↩→
 ::= 
 ::= "Accept-Encoding"
 ::=  | 
 ::= 
 ::= "gzip" | "compress" | "deflate" | "br" | "identity" |
↩→
 ::= 
 ::= "Accept-Language"
 ::=  | 
 ::= 
 ::= "fr" | "en" | "de"
 ::= 
 ::= "Accept-Ranges"
 ::= "bytes" | "none"
 ::= 
 ::= "Allow"
 ::=  | 
 ::= 
 ::= "ALPN"
 ::=  | 
 ::= "http%2F1.1" | "h2"
 ::= 
 ::= "Alt-Used"
 : "alternate.example.net"
 ::=
↩→
 ::= "Authorization"
 : "Basic" | "Bearer","Digest","HOBA","Mutual","Negotiate","OAuth",
↩→
 ::= "123456" | "YWxhZGRpbjpvcGVuc2VzYW1l"
 ::=
↩→
 ::= "Cache-Control"
 ::=  |
↩→
 : "max-age=5" | "max-stale=5" | "min-fresh=5" | "no-cache" |
↩→
 ::= 
 ::= "CalDav-Timezones"
 ::= 
 ::= "CDN-Loop"
 ::=  | 
 : "foo123.foocdn.example" | "barcdn.example; trace='abcdef'" |
↩→
 ::=
↩→
 ::= "Content-Encoding"
 ::= 
 ::= "Content-Language"
 ::=
↩→
 ::= "Content-Length"
 ::= "40" | "60" | "80"
 ::=
↩→
 ::= "Content-Location"
 ::=  | 
 : "http://example.com/example"
 ::= "/example"
 ::= 
 ::= "Cookie"
 : "SID=31d4d96e407aad42" | "PHPSESSID=298zf09hf012fh2;
↩→
 ::= 
 ::= "Date"
 : "Sun, 06 Nov 1994 08:49:37 GMT" | "Sun, 06 Nov 2094 08:49:37 GMT"
 ::= 
 ::= "Depth"
 : "0" | "1" | "infinity"
 ::= 
 ::= "Destination"
 ::= 
 ::= "Early-Data"
 : "1"
 ::= 