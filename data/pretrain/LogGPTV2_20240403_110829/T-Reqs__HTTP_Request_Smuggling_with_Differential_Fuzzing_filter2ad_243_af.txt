### Optimized Text

In a complex technological landscape, different systems may interpret the same request in varying ways. The reality is even more intricate, as Request for Comments (RFCs) can be ambiguous, bugs are inevitable, and powerful mechanisms to rewrite HTTP requests are both desirable and necessary. In this multifaceted ecosystem, predicting, detecting, mitigating, or fixing HTTP Request Smuggling (HRS) is a non-trivial, open research problem.

While our results may suggest that some technologies and vendors perform better than others, such an interpretation would be incorrect. Our findings do not provide a meaningful security comparison between the tested servers and should not be used to pit one technology against another. Instead, this work presents a scientific, systematic methodology to identify HRS and uncover previously unexplored attack vectors, equipping developers and users with a deeper understanding of the issue and enabling them to better vet their own systems.

### 8. CONCLUSION

This paper is the first systematic exploration of HRS attacks. Revisiting our research questions from Section 3, we proposed an experimental infrastructure and methodology for efficient discovery of attacks (Q1), developed a novel grammar-based differential fuzzer to test all components of an HTTP request for viable exploits (Q2), provided insights into previously unknown success and failure modes enabled by our exploits (Q3), and documented hazardous combinations of popular servers (Q4). Our collective findings indicate that HRS may evolve into an even more complex attack, underscoring the need for the security community to address the open research questions in the areas of detection and defense.

### ACKNOWLEDGMENTS

This work was supported by the National Science Foundation under grant CNS-1703454 and by Secure Business Austria.

### REFERENCES

[1] Cornelius Aschermann, Tommaso Frassetto, Thorsten Holz, Patrick Jauernig, Ahmad-Reza Sadeghi, and Daniel Teuchert. 2019. NAUTILUS: Fishing for Deep Bugs with Grammars. In The Network and Distributed System Security Symposium.
[2] BuiltWith. [n.d.]. BuiltWith Technology Lookup. https://trends.builtwith.com/CDN/Content-Delivery-Network.
[3] Cloudflare Help Center. 2021. Using Page Rules to Re-Write Host Headers. https://support.cloudflare.com/hc/en-us/articles/206652947-Using-Page-Rules-to-Re-Write-Host-Headers.
[4] Jianjun Chen, Jian Jiang, Haixin Duan, Nicholas Weaver, Tao Wan, and Vern Paxson. 2016. Host of Troubles: Multiple Host Ambiguities in HTTP Implementations. In ACM Conference on Computer and Communications Security.
[5] Evan Custodio. 2019. Mass account takeovers using HTTP Request Smuggling on https://slackb.com/ to steal session cookies. https://hackerone.com/reports/737140.
[6] Evan Custodio. 2020. Practical Attacks Using HTTP Request Smuggling by @defparam. NahamCon. https://www.youtube.com/watch?v=3tpnuzFLU8g.
[7] Evan Custodio. 2020. Smuggler. https://github.com/defparam/smuggler.
[8] Jeremy Druin. 2021. OWASP Mutillidae II. https://github.com/webpwnized/mutillidae.
[9] Roy Fielding, James Gettys, Jeff Mogul, Henrik Frystyk, and Tim Berners-Lee. 1997. Hypertext Transfer Protocol – HTTP/1.1. https://tools.ietf.org/html/rfc2068.
[10] Roy Fielding and Julian Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing. https://tools.ietf.org/html/rfc7230.
[11] Roy Fielding and Julian Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. https://tools.ietf.org/html/rfc7231.
[12] Omer Gil. 2017. Web Cache Deception Attack. Black Hat USA. https://www.blackhat.com/us-17/briefings.html#web-cache-deception-attack.
[13] Omer Gil. 2017. Web Cache Deception Attack. https://omergil.blogspot.com/2017/02/web-cache-deception-attack.html.
[14] Patrice Godefroid. 2020. Fuzzing: Hack, Art, and Science. Commun. ACM 63, 2 (2020).
[15] James Kettle. 2019. HTTP Desync Attacks: Request Smuggling Reborn. PortSwigger Web Security Blog. https://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn.
[16] James Kettle. 2019. Password theft login.newrelic.com via Request Smuggling. HackerOne. https://hackerone.com/reports/498052.
[17] James Kettle. 2019. Stored XSS on https://paypal.com/signin via cache poisoning. HackerOne. https://hackerone.com/reports/488147.
[18] James Kettle. 2021. HTTP/2: The Sequel is Always Worse. Black Hat USA. https://www.blackhat.com/us-21/briefings/schedule/#http2-the-sequel-is-always-worse-22668.
[19] Amit Klein. 2020. HTTP Request Smuggling in 2020 – New Variants, New Defenses and New Challenges. Black Hat USA. https://www.blackhat.com/us-20/briefings/schedule/#http-request-smuggling-in---new-variants-new-defenses-and-new-challenges-20019.
[20] Graham Klyne. 2021. Message Headers. https://www.iana.org/assignments/message-headers/message-headers.xhtml.
[21] Dima Kumets. 2019. 8 Best Practices for Multi-CDN Implementations. https://www.fastly.com/blog/best-practices-multi-cdn-implementations.
[22] Emil Lerner. 2021. http2smugl. https://github.com/neex/http2smugl.
[23] Regis Leroy. 2016. Hiding Wookiees in HTTP: HTTP smuggling. DEF CON. https://www.youtube.com/watch?v=dVU9i5PsMPY.
[24] Chaim Linhart, Amit Klein, Ronen Heled, and Steve Orrin. 2005. HTTP Request Smuggling. Watchfire. https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf.
[25] Anna MacLachlan. 2015. The Benefits of Using Varnish. https://www.fastly.com/blog/benefits-using-varnish.
[26] Lori MacVittie. 2017. Security Rule Zero: A Warning about X-Forwarded-For. https://www.f5.com/company/blog/security-rule-zero-a-warning-about-x-forwarded-for.
[27] William M. McKeeman. 1998. Differential Testing for Software. Digital Technical Journal 10, 1 (1998).
[28] Seyed Ali Mirheidari, Sajjad Arshad, Kaan Onarlioglu, Bruno Crispo, Engin Kirda, and William Robertson. 2020. Cached and Confused: Web Cache Deception in the Wild. In USENIX Security Symposium.
[29] Seyed Ali Mirheidari, Matteo Golinelli, Kaan Onarlioglu, Engin Kirda, and Bruno Crispo. 2022. Web Cache Deception Escalates!. In USENIX Security Symposium.
[30] NGINX. [n.d.]. Cloudflare Boosts Performance and Stability for Its Millions of Websites with NGINX. https://www.nginx.com/success-stories/cloudflare-boosts-performance-stability-millions-websites-with-nginx/.
[31] Hoai Viet Nguyen, Luigi Lo Iacono, and Hannes Federrath. 2019. Your Cache Has Fallen: Cache-Poisoned Denial-of-Service Attack. In ACM Conference on Computer and Communications Security.
[32] Shirin Nilizadeh, Yannic Noller, and Corina S. Pasareanu. 2019. DifFuzz: Differential Fuzzing for Side-channel Analysis. In IEEE/ACM International Conference on Software Engineering.
[33] Theofilos Petsios, Adrian Tang, Salvatore Stolfo, Angelos D. Keromytis, and Suman Jana. 2017. Nezha: Efficient Domain-Independent Differential Testing. In IEEE Security & Privacy.
[34] Victor Le Pochat, Tom Van Goethem, Samaneh Tajalizadehkhoob, Maciej Korczyński, and Wouter Joosen. 2021. Tranco – A Research-Oriented Top Sites Ranking Hardened Against Manipulation. https://tranco-list.eu/.
[35] PortSwigger. [n.d.]. Exploiting HTTP Request Smuggling Vulnerabilities. https://portswigger.net/web-security/request-smuggling/exploiting.
[36] PortSwigger. 2019. HTTP Request Smuggler. https://github.com/PortSwigger/http-request-smuggler.
[37] Suphannee Sivakorn, George Argyros, Kexin Pei, Angelos D. Keromytis, and Suman Jana. 2017. HVLearn: Automated Black-Box Analysis of Hostname Verification in SSL/TLS Implementations. In IEEE Security & Privacy.
[38] Andreas Zeller, Rahul Gopinath, Marcel Böhme, Gordon Fraser, and Christian Holler. 2019. The Fuzzing Book. Saarland University. https://www.fuzzingbook.org/.

### Table 9: Tested HTTP Servers and Versions

| HTTP Server          | Tested Version |
|----------------------|----------------|
| Apache               | 2.4.46         |
| NGINX                | 1.18.0         |
| Tomcat               | 9.0.40         |
| Apache Traffic Server (ATS) | 8.1.1   |
| HAProxy              | 2.3.1          |
| Squid                | 4.13           |
| Varnish              | 6.0.7          |
| Akamai               | N/A            |
| Cloudflare           | N/A            |
| CloudFront           | N/A            |

### A. TESTED HTTP PROCESSORS

We experiment with 10 popular HTTP processors in this work, using the latest stable versions available at the time of writing. Table 9 shows specific versions of each technology, with the exception of CDNs which do not have public release labels.

### B. FORMAL MUTATION DEFINITIONS

T-Reqs uses string and tree mutations to generate HTTP requests. Here, we provide formal definitions for mutation operations.

#### String Mutation Operations

Given:
- \( N \) is a set of all non-terminal symbols in a Context-Free Grammar (CFG).
- \( T \) is a set of all terminal symbols in a CFG.
- \( B \) is a predefined character pool.

Let \( s \) be a string mutable symbol represented by a CFG as:
\[ s ::= t_1 | t_2 | \ldots | t_k \]
where \( s \in N \), and \( t_i \in T \).

Given the expansion of \( s \rightarrow t_1 \), where \( t_1 \) is a sequence of \( n \) characters \( c_1 c_2 \ldots c_n \), a string mutator is represented as a function \( f(t_1, op, j, b) \) where \( op \in \{delete-char, replace-char, insert-char\} \), \( 1 \leq j \leq n \), and \( b \in B \):

\[ f(c_1 \ldots c_n, op, j, b) = 
\begin{cases} 
c_1 \ldots c_{j-1} c_{j+1} \ldots c_n & \text{if } op = delete-char \\
c_1 \ldots c_{j-1} b c_{j+1} \ldots c_n & \text{if } op = replace-char \\
c_1 \ldots c_j b c_{j+1} \ldots c_n & \text{if } op = insert-char 
\end{cases}
\]

#### Tree Mutation Operations

Given:
- \( N \) is a set of all non-terminal symbols in a CFG.
- \( T \) is a set of all terminal symbols in a CFG.
- \( H \) is a predefined symbol pool.

Let \( s \) be a tree mutable symbol which is represented by a CFG as:
\[ s ::= \ldots | \ldots | \ldots \]
where \( s \in N \), \( n_i \in N \) for any \( 1 \leq i \leq k \) and \( l \leq i \leq m \). Given the expansion of \( s \rightarrow \ldots \), a tree mutator is represented as a function of the symbol \( s \), an operation \( op \), a sequence position \( j \), and a symbol \( h \):

\[ g(\ldots, op, j, h) = 
\begin{cases} 
\ldots & \text{if } op = delete-elem \\
\ldots & \text{if } op = replace-elem \\
\ldots & \text{if } op = insert-elem 
\end{cases}
\]

### Appendix: Formal Definitions of HTTP Header Fields

- **Accept-Encoding**: "gzip" | "compress" | "deflate" | "br" | "identity"
- **Accept-Language**: "fr" | "en" | "de"
- **Authorization**: "Basic" | "Bearer" | "Digest" | "HOBA" | "Mutual" | "Negotiate" | "OAuth"
- **Cache-Control**: "max-age=5" | "max-stale=5" | "min-fresh=5" | "no-cache" | "no-store" | "no-transform" | "only-if-cached"
- **Content-Length**: "40" | "60" | "80"
- **Content-Location**: "http://example.com/example" | "/example"
- **Cookie**: "SID=31d4d96e407aad42" | "PHPSESSID=298zf09hf012fh2;"
- **Date**: "Sun, 06 Nov 1994 08:49:37 GMT" | "Sun, 06 Nov 2094 08:49:37 GMT"
- **Depth**: "0" | "1" | "infinity"
- **Destination**: [Defined by the application]
- **Early-Data**: "1"

This optimized text aims to enhance clarity, coherence, and professionalism while maintaining the original content's integrity.