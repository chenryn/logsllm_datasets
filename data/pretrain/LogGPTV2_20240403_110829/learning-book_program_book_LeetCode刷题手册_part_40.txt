where Li and Ri are the x coordinates of the left and right edge of the ith building, respectively,
and Hi is its height. It is guaranteed that 0 ≤ Li, Ri ≤ INT_MAX, 0  0 . You may assume all buildings are perfect rectangles grounded on an absolutely flat
Surface at height 0.
For instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7
15], [5 12 12], [15 20 10], [19 24 8] ]
The output is a list of "key points" (red dots in Figure B) in the format of [ [xl,yl] , [x2, y2] ,
[x3, y3], ... ] that uniquely defines a skyline. A key point is the left endpoint of a
horizontal line segment. Note that the last key point, where the rightmost building ends, is
merely used to mark the termination of the skyline, and always has zero height. Also, the ground
 in between any two adjacent buildings should be considered part of the skyline contour.
For instance, the skyline in Figure B should be represented as: [ [2 10], [3 15], [7 12], [12
0],[1510],[20 8],[24,0]].
Notes:
● The number of buildings in any input list is guaranteed to be in the range [0, 1oooo].
● The input list is already sorted in ascending order by the left x position Li .
● The output list must be sorted by the x position.
● There must be no consecutive horizontal lines of equal height in the output skyline. For
---
## Page 356
instance, [...[2 3], [4 5], [7 5], [11 5], [12 7] ...] is not acceptable; the three
lines of height 5 should be merged into one in the final output as such: [.. . [2 3] , [4 5] ,
[12 7],...]
题目大意
城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廊。现在，假设您获得了城市风光
照片（图A）上显示的所有建筑物的位置和高度，请编写一个程序以输出由这些建筑物形成的天际线
（图B）。
每个建筑物的几何信息用三元组[Li，Ri，Hi]表示，其中Li和Ri分别是第I座建筑物左右边缘的x坐
标，Hi 是其高度。可以保证 O ≤ Li, Ri ≤ INT_MAX,O  0。您可以假设所有建
筑物都是在绝对平坦且高度为0的表面上的完美矩形。
输出是以[[x1,y1],[x2,y2],[x3,y3]，.….]格式的“关键点”（图B中的红点）的列表，它们唯一地定义了
天际线。关键点是水平线段的左端点。请注意，最右侧建筑物的最后一个关键点仅用于标记天际线的终
点，并始终为零高度。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廊的一部分。
]]]]
说明：
●任何输入列表中的建筑物数量保证在[0,10000]范围内。
·输入列表已经按左×坐标Li进行升序排列。
·输出列表必须按×位排序。
·输出天际线中不得有连续的相同高度的水平线。例如[.[23],[45][75],[115],[127].]是不正
确的答案；三条高度为5的线应该在最终输出中合并为一个：[[23],[45],[127],.]
解题思路
·给出一个二维数组，每个子数组里面代表一个高楼的信息，一个高楼的信息包含3个信息，高楼
起始坐标，高楼终止坐标，高楼高度。要求找到这些高楼的边际点，并输出这些边际点的高度信
息。
·这一题可以用线段树来解。用线段树来解答，可以不用关心“楼挡住楼“的情况。由于楼的坐标是离
散的，所以先把楼在×轴上两个坐标离散化。同第699题一样，楼的宽度是一个区间，但是离散
的过程中，楼的宽度右边界需要减一，不然查询一个区间会包含两个点，导致错误的结果，例如，
第一个楼是[1,3），楼高10，第二个楼是[3.6），楼高20。第一个楼如果算上右边界3，查询[1,3]
的结果是20，因为[3,3]这个点会查询到第二个楼上面去。所以每个楼的右边界应该减一。但是每
个楼的右边界也要加入到query中，因为最终query的结果需要包含这些边界。将离散的数据排
序以后，按照楼的信息，每个区间依次update。最后统计的时候依次统计每个区间，如果当前区
际线的边缘，就要添加到最后输出数组中。
·类似的线段树的题目有：第715题，第732题，第699题。第715题是区间更新定值（不是增
减），第218题可以用扫描线，第732题和第699题类似，也是俄罗斯方块的题目，但是第732
题的俄罗斯方块的方块会"断裂”。
---
## Page 357
·这一题用线段树做时间复杂度有点高，可以用扫描线解题。扫描线的思路很简单，用一根根垂直于
X轴的竖线，从最左边依次扫到最右边，扫描每一条大楼的边界，当进入大楼的左边界的时候，如
果没有比这个左边界最高点更高的点，就记录下这个最高点keyPoint，状态是进入状态。如果扫
到一个大楼的左边界，有比它更高的高度，就不记录，因为它不是天际线，它被楼挡楼，挡在其他
楼后面了。当扫到一个大楼的右边界的时候，如果是最高点，那么记录下它的状态是离开状态，此
时还需要记录下第二高的点。在扫描线扫描的过程中，动态的维护大楼的高度，同时维护最高的高
度和第二高的高度。其实只需要维护最高的高度这一个高度，因为当离开状态到来的时候，移除掉
当前最高的，剩下的高度里面最高的就是第二高的高度。描述的伪代码如下：
//扫描线伪代码
events = {{x: L , height: H , type: entering},
{x: R ,height: H ,type: 1eaving}}
event .SortByx()
ds = new DS ()
for e in events:
if entering(e):
if e.height > ds.max(): ans += [e.height]
ds .add(e.height)
if 1eaving(e):
ds.remove(e.height)
if e.height > ds.max(): ans += [ds.max()]
·动态插入，查找最大值可以选用的数据结构有，最大堆和二叉搜索树。最大堆找最大值O（1)，插
入O(logn)，但是remove_by_key需要O(n)的时间复杂度，并且需要自己实现。二叉搜索树，
查找max，添加和删除元素都是O（logn）的时间复杂度。
·排序的时候也需要注意几个问题：如果大楼的边界相等，并且是进入状态，那么再按照高度从大到
小进行排序：如果大楼的边界相等，并且是离开状态，那么高度按照从小到大进行排序。
代码
package leetcode
import（
"sort"
"github.com/halfrost/LeetCode-Go/template"
//解法一线段树SegmentTree，时间复杂度o(n1ogn)
func getSkyline(buildings [][]int) [][]int {
St, ans, lastHeight, check := template.SegmentTree[], [][]int{3, 0, false
posMap, pos := discretization218(buildings)
tmp := make([]int, 1en(posMap))
st.Init(tmp, func(i,j int) int {
return max(i, j)
---
## Page 358
3)
for
-, b := range buildings {
St.UpdateLazy(posMap[b[0]], posMap[b[1]-1] , b[2])
for i:= 0; i  0 && h != lastHeight {
ans = append(ans, []int{pos[i], h})
}
1astHeight = h
return ans
func discretization218(positions [][]int) (map[int]int, []int) {
tmpMap, posArray, posMap := map[int]int{}, []int{}, map[int]int{}
for
-, pos := range positions {
tmpMap[pos [0]]++
tmpMap[pos [1]-1]++
tmpMap[pos[1]]++
for k := range tmpMap {
posArray = append(posArray, k)
sort.Ints (posArray)
for i, pos := range posArray {
posMap[pos]= 
return posMap, posArray
//解法二扫描线SweepLine，时间复杂度o（n1ogn)
func getSkylinel(buildings [][]int) [][]int{
size := len(buildings)
es := make([]E, 0)
for i, b := range buildings {
1 := b[0]
r := b[1]
h := b[2]
//1--enter
el:= NewE(i, 1,h, 0)
es = append(es, el)
// 0 -- leave
er := NewE(i, r, h, 1)
es = append(es, er)
---
## Page 359
skyline := make([][]int, 0)
sort.slice(es,func(i,j int) bool {
if es[i].x == es[j].x {
if es[1].T == es[j].T {
if es[i].T == 0 {
return es[i] .H > es[j] -H
return es[i].H  curH {
skyline = 
append(skyline, []int{e.x, e.H})
pq.Enque(e.N, e.H)
}else{
pq.Remove(e.N)
h := pq.Front()
if curH > h {
skyline = append(skyline, []int{e.x, h})
return skyline
//扫面线伪代码
// events = {{x: L ，height: H ， type: entering},
//
{x: R,height: H, type: leaving}}
// event.SortByx()
// ds = new Ds()
//for e in events:
if entering(e):
//
if e.height > ds.maxO: ans += [e.height]
//
ds.add(e.height)
//
if leaving(e):
//
ds.remove(e.height)
//
if e.height > ds.maxO: ans += [ds.max()]
// E define
type Estruct{//定义一个event事件
N int//number 编号
---
## Page 360
xint//x坐标
H int//height 高度
Tint//type0-进入1-离开
// NewE define
func NewE(n, x, h, t int) E {
return E{
N: n,
X:x,
H: h,
T: t,
//IndexMaxPQ define
type IndexMaxPQ struct {
items []int
pq
[]int
qp
[]int
total int
// NewIndexMaxPQ define
func NewIndexMaxPQ(n int) IndexMaxPQ {
qp := make([]int, n)
for i := 0; i  1 {
k := n / 2
if q.less(n, k) {
break
}
q.exch(n，k)
n=k
func （q *IndexMaxPQ) exch(i，j int){
q-pq[i], q·pq[j] = q-pq[j], q-pq[i]
q.qp[q.pq[i]] = 
q-qp[q-pq[j]] = j
func (q *IndexMaxPQ) less(i, j int) bool {
return q.items[q-pq[i]] t了，说明该把左边界往右移动了（能这样移动
的原因就是因为我们将数组元素大小排序了，右移是增大元素的方向）。移动左边界的时候需要注
意左边界不能超过右边界。这样滑动窗口一次滑过整个排序后的数组，就可以判断是否存在满足题
意的i和j。这个做法的时间主要花在排序上了，时间复杂度是O（nlogn）。
代码
package leetcode
import "sort"
//解法一排序+滑动窗口
func containsNearbyAlmostDuplicate(nums []int, k int, t int) bool {
if 1en(nums)<2{
return false
elemList := make([]*elem, 1en(nums))
for i, num := range nums {
elemList[i] = &elem{num, i}
sort.SliceStable(elemList, func(i, j int) bool {
if elemList[i].val != elemList[j].val {
return elemList[i].val < elemList[j].va]
return elemList[i].idx < elemList[j].idx
3)
i, j := 0, 1
for j <len(elemList) {
if elemList[j].val-elemList[i].val <= t {
if abs (elemList[j].idx-elemList[i] .idx) <= k {
return true
F
j++
}else{
i++
---
## Page 365
ifj<=i{
j++
return false
type elem struct {