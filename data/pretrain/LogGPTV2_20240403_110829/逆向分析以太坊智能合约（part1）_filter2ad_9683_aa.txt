# 逆向分析以太坊智能合约（part1）
##### 译文声明
本文是翻译文章，文章原作者 Brandon Arvanaghi，文章来源：arvanaghi.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**逆向分析以太坊智能合约（part2） 传送门：[
https://www.anquanke.com/post/id/106984](https://www.anquanke.com/post/id/106984)**
## 一、前言
在本文中，我会向大家介绍以太坊虚拟机（Ethereum Virtual Machine，EVM）的工作原理，以及如何对智能合约（smart
contract）进行逆向分析。
为了反汇编智能合约，我使用了Trail of Bits开发的适用于[Binary
Ninja](https://binary.ninja/)的[Ethersplay](https://github.com/trailofbits/ethersplay)插件。
## 二、以太坊虚拟机
以太坊虚拟机（EVM）是一种 **基于栈** 的、 **准图灵完备** （quasi-Turing complete）的虚拟机。
1） **基于栈** ：EVM并不依赖寄存器，任何操作都会在栈中完成。操作数、运算符以及函数调用都置于栈中，并且EVM知道如何处理数据、执行智能合约。
以太坊使用Postfix Notation（后缀表示法）来实现基于栈的运行机制。简而言之，操作符最后压入栈，可以作用于先前压入栈的数据。
举个例子：来看一下`2 +
2`操作，在脑海中，我们知道中间的运算符（`+`）表示我们想执行2加2这个操作。将`+`放在两个操作数之间是一种办法，我们也可以将它放在两个操作数后面，即`2
2 +`，这就是后缀表示法。
2） **准图灵完备** ：如果一切可计算的问题都能计算，那么这样的编程语言或者代码执行引擎就可以称为“图灵完备（Turing
complete）”。这个概念并不在意解决问题的时间长短，只要理论上该问题能被解决即可。比特币脚本语言不能称为图灵完备语言，因为该语言的应用场景非常有限。
在EVM中，我们可以解决所有问题。但我们还是将其成为“准图灵完备”，这主要是因为成本限制问题。`gas`是EVM中的一个可计算单位，可以用来衡量操作所需的成本。当某人在区块链上发起交易时，交易代码以及待执行的任何后续代码都需要在矿工的主机上执行。由于代码需要在矿工的内存中执行，这个过程会消耗矿工主机的成本，如电力成本、内存以及CPU计算成本等。
为了激励矿工来保证交易顺利进行，发起交易的那个人需要声明`gas
price`，或者他们愿意为每个计算单元支付的价格。将这个因素考虑在内后，对于非常复杂的问题，所需的gas量将变得非常庞大，此时由于我们需要为gas定价，因此在以太坊中，从经济角度来考虑的话复杂的交易并不划算。
## 三、Bytecode以及Runtime Bytecode
在编译合约时，我们可以得到 _contract bytecode_ （合约字节码）或者 _runtime bytecode_ （运行时字节码）。
**contract bytecode** 是最终存储在区块链中的字节码，也是将字节码存放在区块链、初始化智能合约（运行构造函数）时所需的字节码。
**runtime bytecode** 只对应于存储在区块链中的字节码，与合约初始化和存放过程无关。
让我们以`Greeter.sol`合约为例来分析两者的不同点。
    contract mortal {
        /* Define variable owner of the type address */
        address owner;
        /* This function is executed at initialization and sets the owner of the contract */
        function mortal() { owner = msg.sender; }
        /* Function to recover the funds on the contract */
        function kill() { if (msg.sender == owner) selfdestruct(owner); }
    }
    contract greeter is mortal {
        /* Define variable greeting of the type string */
        string greeting;
        /* This runs when the contract is executed */
        function greeter(string _greeting) public {
            greeting = _greeting;
        }
        /* Main function */
        function greet() constant returns (string) {
            return greeting;
        }
    }
使用`solc --bin Greeter.sol`命令来编译合约、获取合约字节码时，我们可以得到如下结果：
    6060604052341561000f57600080fd5b6040516103a93803806103a983398101604052808051820191905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610081929190610088565b505061012d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c957805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f65782518255916020019190600101906100db565b5b5090506101049190610108565b5090565b61012a91905b8082111561012657600081600090555060010161010e565b5090565b90565b61026d8061013c6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058204138c228602c9c0426658c0d46685e1d9c157ff1f92cb6e28acb9124230493210029
如果使用`solc --bin-runtime Greeter.sol`命令来编译时，我们可以得到如下结果：
    60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058204138c228602c9c0426658c0d46685e1d9c157ff1f92cb6e28acb9124230493210029
如上所示，我们可知runtime bytecode是contract bytecode的一个子集。
## 四、逆向分析
在本文中，我们使用Trail of Bits为[Binary
Ninja](https://binary.ninja/)开发的[Ethersplay](https://github.com/trailofbits/ethersplay)插件来反汇编以太坊字节码。
我们的操作对象是[Ethereum.org](https://ethereum.org/)提供的`Greeter.sol`合约。
首先，我们可以参考[教程](https://github.com/trailofbits/ethersplay)，将Ethersplay插件加入Binary
Ninja中。这里提醒一下，我们只逆向runtime bytecode，因为这个过程足以告诉我们合约具体做了哪些工作。
###  工具概览
Ethersplay插件可以识别runtime
bytecode中的所有函数，从逻辑上进行划分。对于这个合约，Ethersplay发现了两个函数：`kill()`
以及`greet()`。后面我们会介绍如何提取这些函数。
###  第一条指令
当我们向智能合约发起交易时，首先碰到的是合约的dispatcher（调度器）。Dispatcher会处理交易数据，确定我们需要交互的具体函数。
我们在dispatcher中看到的第一条指令为：
    PUSH1 0x60 // argument 2 of mstore: the value to store in memory
    PUSH1 0x40 // argument 1 of mstore: where to store that value in memory
    MSTORE // mstore(0x40, 0x60)
    PUSH1 0x4
    CALLDATASIZE
    LT
    PUSH2 0x4c
    JUMPI
`PUSH`指令有16个不同的版本（`PUSH1`… `PUSH16`）。EVM通过不同编号来了解我们往栈上压入了多少字节。
前两条指令（`PUSH1 0x60`以及`PUSH1 0x40`）分别代表将`0x60`以及 `0x40` 压入栈。这些指令执行完毕后，运行时栈的布局如下：
    1: 0x40
    0: 0x60
根据[Solidity官方文档](https://solidity.readthedocs.io/en/v0.4.21/assembly.html)，`MSTORE`的定义如下：
指令 | 结果  
---|---  
mstore(p, v) | mem[p..(p+32)) := v  
EVM会从栈顶到栈底来读取函数参数，也就是说会执行`mstore(0x40, 0x60)`，这条指令与`mem[0x40...0x40+32] :=
0x60`作用相同。
`mstore`会从栈中取出两个元素，因此栈现在处于清空状态。接下来的指令为：
    PUSH1 0x4
    CALLDATASIZE
    LT
    PUSH 0x4c
    JUMPI
`PUSH1 0x4`执行后，栈中只有一个元素：
    0: 0x4
`CALLDATASIZE`函数会将 _calldata_
（相当于`msg.data`）的大小压入栈中。我们可以往任何智能合约发送任意数据，`CALLDATASIZE`会检查数据的大小。
调用`CALLDATASIZE`后，栈的布局如下：
    1: (however long the msg.data or calldata is)
    0: 0x4