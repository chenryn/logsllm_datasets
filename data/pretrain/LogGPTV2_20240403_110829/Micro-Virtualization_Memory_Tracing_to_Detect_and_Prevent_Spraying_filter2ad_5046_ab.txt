pervisor is executed only when particular events in the
guest trigger an exit transition. The set of events caus-
ing these transitions is extremely fine grained and can be
configured by the hypervisor itself. Such events include
exceptions, interrupts, I/O operations, and the execution
of privileged instructions (e.g., accesses to control reg-
isters). Exits can also be explicitly requested by in-guest
software, using the vmcall instruction. Because of its
similarity to system calls, this approach is commonly
called hypercall. Whenever an exit occurs, the hard-
ware saves the state of the CPU in a data structure called
Virtual Machine Control Structure (VMCS). The same
structure also holds the set of exit-triggering events that
are currently enabled, as well as other control informa-
tion of the hypervisor.
Another technology we need to introduce is the Ex-
tended Page Tables (EPT). This technology has been
introduced to support memory virtualization, which is
the main source of overhead when running a virtualized
system. If enabled, the standard virtual-to-physical ad-
dress translation is modified as follows. When a soft-
ware in the guest references a virtual address, the ad-
dress is translated into a physical address by the Mem-
ory Management Unit (MMU). However, the result of
this operation is not a real physical address, but a guest
physical address (gpa). The hardware then walks the
EPT paging structures to translate the gpa into a host
physical address, that corresponds to the actual physi-
cal address in the system memory. The EPT technology
also defines two new exit transitions: EPT Misconﬁgu-
ration and EPT Violation, respectively caused by wrong
settings in EPT paging entries and by a guest attempting
to access memory areas it is not allowed to. By alter-
ing the EPT entries, the hypervisor has full control of
how the guest accesses physical memory. For example,
it can remove write permissions from an entry, so that
any write-access by the guest triggers a violation.
Threat Model
Our threat model considers an attacker that is able to
exploit (either locally or remotely) an application run-
ning on the machine and to perform a spraying payload
delivery. The use of a hypervisor-based technology is
motivated by the goal of providing an OS-independent
detection system and a more secure reference monitor.
Since we leverage late-launching to deploy our solu-
tion on operating systems running on physical machines,
without requiring a reboot, we assume that the machine
to be protected is clean when Graﬃti is loaded. Thus, we
consider the protection of already infected systems to be
out of the scope of this paper.
4 Architecture Overview
In order to considerably improve over the state of the
art, we set five main requirements for our detection sys-
tem. First, it should be completely independent from
the memory allocator used by the protected applications
(R1). Second, it has to operate system-wide, i.e., it
should be able to detect any memory allocation and de-
allocation that occurs in the system (R2) and it must be
able to recognize any memory page that gets executed
in the operating system (R3). Fourth, in order to op-
erate correctly, our system should not require any OS-
434  25th USENIX Security Symposium 
USENIX Association
4
USENIX Association  
25th USENIX Security Symposium  435
dependentinformation(R4).Finally,theoverheadintro-ducedbythesystemshouldbereasonable,inlinewithothersystem-wideprotectionmechanisms.Inparticular,weconsidera“reasonable”overhead,anythingcompa-rabletotheoneintroducedbyothervirtualizationsys-temssuchasXENorVMware(R5).Tosatisfythesefiverequirements,oursystemwasde-signedtobeeasilyextensibleandconfigurable,andtotuneitsbehavior(andthereforeitsoverhead)tomatchthecurrentlevelofriskofthemonitoredsystem.Thisisachievedbyusingtwoseparatemodesofoperation.Ourmonitoringplatformisbasedonacustomhyper-visorthatnormallyrunsinwhatwecallmonitormode.Inthismode,thehypervisorinterceptseverynewmem-orypagethatisallocatedinthesystem,alongwiththeCR3registerassociatedtotheprocessthatisrequestingthememory.Wheneverthetotalamountofmemoryre-questedbyasingleprocessexceedsacertainthreshold(computedexperimentallyasdescribedinSection2.1)thesystemswitchestosecuritymodeandstartsperform-ingadditionalcheckstodetectthepresenceofapossibleattackforthatparticularapplication(whileremaininginmonitormodefortheotherapplications).InSection2.1weprovedthatafixedthresholdisnotabletoproperlycaptureallthepossiblevariationsofsprayingattacks.Forthisreason,inoursystemweuseathresholdnotfordetection,butonlytoimprovetheperformanceofthesystembydisablingexpensivecheckswhenthetotalmemoryusedbytheprocessistoolowforanattacktobesuccessful.Itisimportanttostressthatinoursolu-tion,loweringthethresholdforagivenapplicationdoesnotintroduceanyfalsepositivesfromthedetectionpointofview,butonlyincreasestheoverheadforthatparticu-larapplicationalone(andnotfortherestoftherunningsystemorforanyotherapplication).Whenaprocessexceedsthisminimumallocationthreshold,thehypervisorperformstwomaintasks.First,usingtheEPT,itremovestheexecutionpermis-sionfromalltheallocatedpages,sothatanyattempttoexecutecodewillbeinterceptedbythesystem.Second,itinvokesthestaticanalyzercomponenttocheckforthepresenceofapotentialsprayingattack.Theactualde-tectionisdelegatedtoaconfigurablenumberofanalysisplugins.Figure3providesanoverviewofthesystemarchi-tectureandshowstheinteractionsamongthedifferentcomponents.Thefigureisdividedinthreeparts,withuserspaceontop,kernelspaceinthemiddle,andourcustomhypervisoratthebottom.Whenanapplication(inthiscaseawebbrowser)requestsnewmemory,thekernelsearchesforafreepageanditallocatesit.Atthispoint,whentheOStriestoupdatethepagetable,theop-erationisinterceptedbyourhypervisor.IfoursystemisKernel#1023......#0VulnBrowserintinterpreter(){...malloc(...);...}GET/HTTP/1.1explo.jshttp://evil.commallocUsermodeKernelmodeNon-rootmodeRootmodeTrap!HypervisorMemoryTracerAttackDetectorHardwareFigure3:ArchitectureoftheMemoryAllocationTracer.runninginmonitormode,thehypervisoronlytracksthenewmemoryallocationandgivesbackcontroltotheoperatingsystem.Ifinsteadtheapplicationhasalreadyrequestedenoughmemorytotriggerthesecuritymode,ourattackdetectionroutinesareexecutedtoinspectthememoryandflaganyheapsprayingattempt.SystemDeploymentThemaincomponentthatenablestheprotectionsen-forcedbyGraﬃtineedstokeepanaccuratetrackofalltheallocationanddeallocationoperationsthatoccurinthesystem.Themainmotivationofusingahypervisoristhat,fromalowlevelperspective,memoryallocationisstrictlydependentonlyonthehardwarearchitecture,andnotontheoperatingsystemitself.Thus,byworkingbelowtheoperatingsystem,Graﬃtiavoidsalltheintri-caciesintroducedbythevariousallocationengines,andthereforeitdoesnotrequiretomodifyorinstrumenttheprotectedsystem(e.g.,toplacehooksinsideOScompo-nents).Graﬃtileverageslate-launchingtoloaditspro-tectionmechanismwhilethetargetisrunning.Thishot-plugcapabilityisachievedwithoutrebootingthesys-tem,soitistransparenttothenativeOS.Finally,itisimportanttonotethatGraﬃtiisaveryflexiblesystemandcanbeconfiguredaccordingtothetargetneeds.Forinstance,itcanbedeployedtomonitoronlyasinglesen-sitiveprocess(e.g.,abrowser,oraPDFviewer),asetofthereof,oreventheentirerunningsystem.OurcurrentprototypeisimplementedasanextensionofHyperDbg,anopen-sourcehardware-assistedhyper-visorframework[17].InSections5and6wepresent5the design and implementation of the two main compo-
nents of the system: the Memory Tracer and the Attack
Detection Routines.
5 Memory Tracer
To implement our heap spraying protection technique,
we must first keep track of all the allocation and deallo-
cation operations that occur inside the system. Ideally,
the most obvious solution to track memory allocations
would be to modify the allocator itself, by extending the
operating system with a new tracking feature. By doing
so, however, our system would need to be customized
for a particular operating system, and we would need to
constantly update our tracker according to any OS up-
grade.
To avoid this problem, we decided to implement our
tracking approach at the hypervisor level (requirements
R1 and R4), i.e., below the operating system. Since our
approach is based on virtualization, from now on we will
refer to the protected system alternatively with the term
guest or target.
5.1 Tracer Design
Our system is designed to intercept every modification
that is made by the guest OS to paging structures, and
to recognize when the change corresponds to the cre-
ation or to the elimination of a page. To better illustrate
our tracing technique, we will often refer to the paging
structures that are used in the Intel architectures [23].
Whenever a process requires a new page, the kernel
walks the paging structures of the requesting process
looking for a usable Page Table Entry (PTE) in one of
the Page Tables of the process (i.e., the second level
structures). If none is found, it either allocates a new
Page Table, by altering an entry on the first level paging
structure (also known as the Page Directory), or it swaps
some of the pages of the process to disk to create some
empty slots. Once it has found or created a usable PTE,
the kernel modifies it to map the allocated physical page
to a virtual address, sets the lower 12 bits of the PTE
to match the attributes of the page (e.g., read/write,
user/supervisor), and returns the virtual address to
the requesting process.
Our defense mechanism needs to keep a fine-grained
view of every allocation to protect the system against
spraying attacks. In particular, according to the address
translation and new page allocation we need to intercept
six different events: (1) Creation (2) Modification and
(3) removal of a page. (4) Creation (5) Modification (6)
Removal of a page table.
Whenever one of these six events is triggered by the
kernel, our hypervisor intercepts the operation and acts
accordingly. The first triple of events is traced to keep
track of which pages a process allocates. The second
group, on the other hand, must be traced to ensure that
our system maintains a complete view of the allocated
pages and does not miss any event in the first category.
5.2 Page Table Monitoring
Since Graﬃti operates at the hypervisor level, it lever-
ages the EPTs to write-protect all the page structures of
a process. By doing so, it can intercept all modifica-
tion attempts, as part of any of the six cases enumerated
above. At first, the hypervisor detects when a new pro-
cess is created by intercepting write operations to the
CR3 register. As soon as a it is spawned by the kernel, a
process will have just a limited number of paging struc-
tures, possibly inherited by its parent process (e.g., on
Linux this depends on the flags of the clone() syscall
that is used to spawn the process). To protect all its pag-
ing structures, Graﬃti needs to traverse the page direc-
tory (pointed by the value of the CR3 register) and write-
protect all the page tables pointed by each PDE. Page
tables are scanned as well, to keep track of the physical
pages allocated to the process by the kernel. After this
setup phase is completed, each attempt to modify one of
the pages would cause a trap in our hypervisor system.
Implementing the approach we just described while
maintaining an acceptable overhead is a challenging
task. At first, we use the EPTs to write-protect every
paging structure of a target process. By doing so, when-
ever the OS kernel attempts to modify such structures
because the process requires it (1), an EPT violation
transfers the execution to the memory tracer component
of our hypervisor framework (2). The violation is han-
dled by removing the write protection and keeping a
copy of the value of the entry (PTE or PDE) being modi-
fied (3), and re-executing the faulting instruction by per-
forming an entry with the monitor trap flag (MTF [23])
raised (4). After the instruction has been executed, the
hypervisor obtains again the control thanks to the exit
caused by MTF (5), compares the new value stored in
the entry with the old one and uses this information to
infer which of the six kernel operations described pre-
viously has occurred (6). Eventually, the protection is
restored (7) and the control is given back to the guest
kernel (8).
To make the tracing mechanism clearer, consider the
following scenario: the hypervisor intercepts a write at-
tempt to the 2nd PTE of the 1st page table. This PTE
originally contains the value 0. After single-stepping
through the write instruction, we collect the new value
of the PTE: old:0x00000000 new:0xcaffe007.
436  25th USENIX Security Symposium 
USENIX Association
6
This means that the guest kernel is mapping a physi-
cal page (at address 0xcaffe000) with a rw permission
and making it accessible to both user and kernel space.
In fact, the three lowest bits are set, making the entry
present, writable, and accessible to user mode processes.
For our framework, this operation corresponds to a cre-
ate page event. To intercept when a process is created,
we catch CR3 write operations in the guest. When the
CR3 value that is going to be written corresponds to the
one of a process we want to protect, we apply the pro-
tection to its paging structure, as explained above. It is
important to stress that our approach is completely OS
independent, as the only knowledge we rely on is the
meaning of the bits stored in the paging structures, and
those solely depend on the CPU architecture.
5.3 Graffiti Micro-Virtualization
The system described so far does not satisfy the require-
ment R2. In fact our solution should be able to monitor
the entire system, and not only a few processes at a time.
Unfortunately, by extending the previous approach to
the whole guest operating system (all user-space pro-
cesses and kernel threads), we observed a thrashing [4]
phenomenon that introduced a large overhead in the
memory allocation. This phenomenon creates a large
number of context switches between OS and hypervisor,
thus increasing the system overhead.
This phenomenon happens when a modification of a
memory page of the running process creates as a side
effect a modification of a memory page of another non-
running process. This is a consequence of the fact that
some memory pages are shared among processes, and
some kernel tasks perform operations on memory pages
of different processes. We refer to this problem as the
interference problem.
The impact of this interference can be measured by
running two simple tests. In the first, we computed the
overhead introduced by our system while protecting a
single process (Internet Explorer 10) and in the second
we protected other two processes (Acrobat and Firefox)
on top of Internet Explorer. The overhead on Internet
Explorer alone went from 22% in the first test to 63%
in the second, just as a side effect of monitoring two
additional applications. Unfortunately, the interference
of protecting more processes and the kernel itself would
quickly slow down the entire system to a point in which
it would not be usable anymore.
Ideally, we would like to design our system to
avoid the interference problem, so that the overhead
would not depend on the number of monitored pro-
cesses. To achieve this goal, we propose a novel micro-
virtualization technique, where each process runs inside
its own virtual memory sandbox and our tracking sys-
tem enables the memory protection of just the process
which is currently running. More in details, our micro-
virtualization technique bases its approach on the fact
that the VMCS contains a pointer to the EPT (EPTP)
currently used by the hypervisor (see Section 3). Since
we use the EPT to protect the processes (as explained
in Section 5), our idea is to create a different EPT for
each of the processes we protect, and change the EPTP
in the VMCS at every context switch. From a low level
perspective, this corresponds to intercepting every CR3
write operation (also easily trappable through VT [17])
and modifying the VMCS so that the EPTP points to
the EPT of the process that has been scheduled for ex-
ecution. Protected processes will have their own EPTs,
while un-protected ones will just use a common EPT.
To this end, every time a new process is created, the
system creates a new EPT and associates it to the new
process. It is important to note that the creation of this
new EPT is not very costly, since the page table at the
process creation is tiny and we only need to identify and
protect some of them. By using such a mechanism, the
hypervisor automatically disables the memory tracking
of the other unprotected processes and enables the trap-
ping only for the pages that are related to the currently
protected processes, thus avoiding the thrashing side ef-
fect. Since this solution requires only to change the
EPT pointer when a context switch occurs, it does not
increase the overhead of the system.
In order to validate our micro-virtualization mech-
anism we performed two main experiments by using
three applications: IE10, Acrobat Reader and Firefox.
During our first experiment we only protect one appli-
cation (IE10) and we compute the execution time and
the overhead obtained by surfing several web pages in
three main cases: (1) without hypervisor (2) with out
hypervisor but without micro-virtualization and (3) with
hypervisor and micro-virtualization enabled. From this
first experiment the micro-virtualization does not intro-
duce any additional overhead to the system when is used
to protect a single process (23% in both cases with and
without micro-virtualization). The only overhead intro-
duced by the micro-virtualization occurs during the first
loading of the new process. In this case the hypervisor
needs to build up the EPT table for the new process by
walking the process page tables. The overhead intro-
duced during the loading time is 8%.
In the second experiment we test the scalability of
our system with the new micro-virtualization mecha-
nism enabled. This time we protect all three applications
and we compute, like in the previous experiment, the ex-
ecution time and the overhead obtained by surfing sev-
eral web pages in the same three main cases: (1) with-
USENIX Association  
25th USENIX Security Symposium  437
7
out monitoring the application (no hypervisor enabled)
(2) with hypervisor but without micro-virtualization and
(3) with hypervisor and micro-virtualization enabled.
The overhead was 63% without micro-virtualization
and 23% with micro-virtualization, confirming that the
micro-virtualization is able to remove the overhead in-
troduced by the interference problem.
As a result of our novel micro-virtualization architec-
ture, our system is able to monitor an arbitrary num-
ber of different applications, without any increase in the
system overhead. More specifically the overhead only
applies to a particular protected application and it does
not propagate to the rest of the system. For instance, if
the user wants to protect only the browser and the PDF
viewer against heap spraying attacks, any other applica-
tion would not suffer any side effect or slowdown from
our tracking system.
6 Detection Components
Whenever the total memory dynamically allocated by a
process raises over a certain configurable threshold, the
tracer switches to security mode and triggers a config-
urable number of static analysis routines to verify if a
spraying attack is ongoing in the system.
Our current prototype includes three different com-
ponents, presented in details in the next sections. These
serve only as possible examples of the heuristics that
can be easily plugged into our platform, and they could
therefore be improved or extended with other tech-
niques.
Malicious Code Detector
The aim of this component is to detect the simplest form
of heap spraying. In this case, we assume the heap is
randomized but executable, and therefore the attacker
can spray the memory of the vulnerable target with mul-
tiple copies of a shellcode. Thus, the goal of this de-
tector is to identify the presence of shellcodes inside the
memory allocated by a process.
Our technique works as follows. First, the detector
scans a fraction n of the most recently allocated memory