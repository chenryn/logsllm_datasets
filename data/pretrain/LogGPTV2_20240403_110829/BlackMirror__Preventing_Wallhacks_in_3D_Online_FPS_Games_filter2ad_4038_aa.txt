title:BlackMirror: Preventing Wallhacks in 3D Online FPS Games
author:Seonghyun Park and
Adil Ahmad and
Byoungyoung Lee
BlackMirror: Preventing Wallhacks in 3D Online FPS Games
Seonghyun Park
Seoul National University
PI:EMAIL
Adil Ahmad
Purdue University
PI:EMAIL
Byoungyoung Lee∗
Seoul National University
PI:EMAIL
ABSTRACT
Online gaming, with a reported 152 billion US dollar market, is
immensely popular today. One of the critical issues in multiplayer
online games is cheating, in which a player uses an illegal methodol-
ogy to create an advantage beyond honest game play. For example,
wallhacks, the main focus of this work, animate enemy objects on a
cheating player’s screen, despite being actually hidden behind walls
(or other occluding objects). Since such cheats discourage honest
players and cause game companies to lose revenue, gaming compa-
nies deploy mitigation solutions alongside game applications on
the player’s machine. However, their solutions are fundamentally
flawed since they are deployed on a machine where the attacker
has absolute control.
This paper presents BlackMirror, a new game design with a
trusted execution environment, Intel SGX. Leveraging strong data
isolation guarantees provided by SGX, BlackMirror addresses
the root cause of wallhacks by storing sensitive game data within
an SGX-protected region. BlackMirror overcomes various chal-
lenges in achieving its goal including partitioning game client to
avoid SGX’s memory limitations, as well as cross-checking in-
puts provided by untrusted keyboard and mouse. Furthermore,
BlackMirror supports GPU-based 3D rendering by performing
highly-accurate visibility testing and disclosing sensitive data only
when it is required in a given game scene. We protect Quake II
using BlackMirror, and our evaluation results demonstrate that
BlackMirror-protected Quake II is fully functional and secure.
More specifically, BlackMirror incurs 0.57 ms per-frame delays on
average, which meets modern game’s performance requirements.
On the other hand, the secure baseline design using software-only
rendering incurs 25 ms per-frame delays on average, signifying the
efficient yet secure design of BlackMirror.
CCS CONCEPTS
• Security and privacy → Domain-specific security and
privacy architectures; Trusted computing.
KEYWORDS
multi-player games; wallhacks; Intel SGX
∗Corresponding author
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417890
ACM Reference Format:
Seonghyun Park, Adil Ahmad, and Byoungyoung Lee. 2020. BlackMirror:
Preventing Wallhacks in 3D Online FPS Games. In Proceedings of the 2020
ACM SIGSAC Conference on Computer and Communications Security (CCS
’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA,
14 pages. https://doi.org/10.1145/3372297.3417890
1 INTRODUCTION
Online gaming is one of the most popular entertainment platforms
in the world. With the soaring popularity of electronic sports, com-
peting in video games has also become a mainstream profession
for many people—it is reported that online game markets gener-
ated 152 billion US dollars [1]. Among online games, first-person
shooter (FPS) games are an incredibly popular genre. In the FPS
game, a player is centered with his weapon, shown a first-person
perspective onto a virtual game scene. The common goal of the FPS
game is to find and eliminate the other players (or teams). Common
FPS games include Doom, Quake, Overwatch, Fortnite, and PUBG.
However, due to the competitive nature of online games, many
players are intrigued to use illegal methods (or cheats) to create
an advantage beyond honest players. Such cheating behaviors are
not inconsequential in today’s online games—according to a Forbes
report [2], a total of 37% gamers have cheated before. With such
behaviors, game play is not fair, severely ruining fun for participat-
ing players and integrity of competitive games. The same report
mentions that cheating severely impacts the gaming experience
of players—88% of gamers stated that they experienced an unfair
game due to the cheating.
Cheating in online games is very serious for game companies
whose revenue stream heavily depends on player satisfaction. There-
fore, many gaming companies are deploying games with anti-cheat
solutions [3–5]. These solutions, operating either at the user-level
or privileged levels, are designed to detect cheating attempts. How-
ever, these solutions are ad-hoc (i.e., result in arms races between
cheaters and game developers), and/or require installing propri-
etary (closed-source) kernel modules or drivers on the player’s
machine. Importantly, these solutions do not solve the fundamental
issue surrounding cheating—the attacker has complete control on
their machine and can compromise game clients, extract sensitive
information, and bypass anti-cheat solutions.
Particularly focusing on FPS games, wallhack [6] are one of the
most commonly-used cheats. In particular, the common exploit
pattern of wallhacks is to animate enemy players hiding behind
walls (or other occluded entities) in front of the player. Therefore,
the dishonest player can easily spot an unsuspecting enemy player
without being visible on the other player’s screen. The root cause
behind wallhacks is that the dishonest player has access to states
belonging to sensitive entities (e.g., opponent’s position). In partic-
ular, the dishonest player locate relevant states in game clients [7],
eavesdrop on or tamper with these states as they are transmitted
through the CPU-GPU communication channel [8], or tamper with
the GPU computation itself [9].
In this paper, we present BlackMirror, a system that prevents
wallhacks in multiplayer online FPS games using Trusted Execution
Environments (TEEs). In particular, BlackMirror protects security-
sensitive data (e.g., opponent entities) and only permits access if
such data is required to be rendered in the game scene. In this regard,
the key idea behind BlackMirror is to strictly safeguard such
sensitive data with a TEE, particularly Intel SGX. Intel SGX is a good
fit since it provides hardware-assisted isolation with confidentiality
and integrity guarantees, as well as remote attestation capabilities
to attest the correctness on untrusted player machines. Furthermore,
SGX is already deployed on popular gaming processors, i.e., all Intel
desktop processors.
However, realizing BlackMirror is not straightforward. First,
it is unclear what sensitive data should be stored within the SGX-
protected region, an enclave. From a security stand-point, it is
best to store everything inside the enclave, but due to memory
limitations of SGX enclaves §5, this will incur prohibitive overhead.
Second, BlackMirror should maintain compatibility with existing
game client functionality while ensuring correctness and security.
In particular, existing game clients update internal gaming contexts
(e.g., movement of and events from all players in the game) using
server messages and keyboard/mouse inputs. Third, a game client
should leverage GPU to accelerate 3D rendering performance, but
the protection realm of SGX does not include the GPU. While
software-only rendering is possible, it is remarkably slow (as we
demonstrated in §9.2).
To solve the aforementioned challenges, BlackMirror features
the following design characteristics. First, BlackMirror carefully
partitions the game client into trusted (i.e., enclave) and untrusted
components, ensuring security while reducing enclave memory
consumption. In particular, BlackMirror maintains a thin enclave-
layer that stores only data relevant to sensitive game entities (i.e.,
entities directly involved in determining the view of the player).
In particular, such data includes: a game state related to enemy
players, occluding entities such as walls and other supporting data
such as geometry information related to these sensitive entities.
Second, BlackMirror provides in-enclave functionality for se-
cure updates to the protected sensitive entities. In particular, these
updates are received from the untrusted world through (a) server’s
update messages received through attacker-controlled network
interfaces, and (b) potentially malicious inputs received from un-
trusted I/O devices such as keyboard and mouse. To solve these
issues, BlackMirror creates a secure channel with the game server
terminating within the enclave, and synchronizes all provided up-
dates with the information sent by the attacker to the game server.
As a result, BlackMirror is able to detect discrepancy in provided
inputs or forces the attacker to reveal itself to other players if they
attempt a wallhack.
Lastly, to support vital hardware-acceleration using GPUs with-
out compromising on security, BlackMirror implements a trusted
visibility test within the enclave. For each frame, BlackMirror
performs visibility-testing to determine which of the requested en-
tities by the untrusted game client should be visible on the player’s
screen. Using trusted information stored regarding sensitive enti-
ties, BlackMirror is able to determine with high accuracy whether
this entity should be visible in this frame. Furthermore, thanks to
recent advances in floating-point computation on CPUs (e.g., AVX
and SIMD instructions), BlackMirror can perform this rapidly
and in a scalable manner.
We implemented BlackMirror-protected Quake II, an open
source 3D FPS game. According to our evaluation, BlackMirror-
protected Quake II demonstrated that it is not only fully functional
but also secure. To be more specific, BlackMirror incurs 0.57 ms
per-frame delays on average, which meets modern game’s perfor-
mance requirements (i.e., considering 60 fps game, the time gap
between frames is 16 ms). On the other hand, the secure base-
line design using software-only rendering incurs 25 ms per-frame
delays on average, signifying the efficient yet secure design of
BlackMirror. From the security perspective of BlackMirror, the
accuracy of visibility testing (i.e., declassification accuracy) is at
least 97%, suggesting that most of sensitive entities are accordingly
secured against cheaters.
To summarize, this paper makes the following contributions:
• Design. Understanding the root cause of wallhacks, we de-
signed BlackMirror, an SGX-based game client to fundamen-
tally prevent wallhacks. In order to leverage GPU-based render-
ing while preserving SGX’s security assurance, BlackMirror
designs an in-enclave visibility testing and declassify safety-
confirmed data to GPU.
• Implementation. We implemented BlackMirror-protected
Quake II, an open source 3D FPS game. Our evaluation con-
firms that BlackMirror-protected Quake II is fully functional
while meeting gaming user’s experiences.
• Security Analysis. We thoroughly analyze the security as-
pect of BlackMirror. We exhaustively consider all possible
attacks that can be launched by a wall-hack motivated attack-
ers, and analyze why BlackMirror is secure against those
attacks.
2 BACKGROUND
This section provides background information relevant to the de-
sign of our system, BlackMirror. We first describe online game
architecture (§2.1). Next we explain how the rendering pipelines
in the game operate (§2.2), and then describe Intel Software Guard
eXtensions (SGX) (§2.3).
2.1 Multiplayer FPS Game Architecture
Modern multiplayer first-person shooter (FPS) games [10] operate
on the client-server architecture (shown in Figure 1). In particular,
multiple clients connect to a dedicated server, which is usually
remote and operated by the game operating companies.
The game state is a set of entity states, where an entity refer to
each object in the game. Such an entity can be player’s characters,
supplies and environmental objects. Each entity has state such as
the 3D origin (i.e., its coordinates in 3D space), angles (e.g., the
direction that an entity is facing), etc. Figure 2 shows an example
entity state from Quake 2 [11].
The server and clients maintain their own copy of a game state,
which we refer to a global game state in the server and a local game
state in clients, and each has a different mechanism in updating the
game state.
Server
Global
State
Game
Engine
2 Update
Encoder
1 Client inputs
3 Update Messages
Client
5
P
r
e
d
i
c
t
Prediction
Engine
Geometry,
Textures
& Shaders
Decoder
4 Update
Local
State
Inputs
GPU
Client local updates
Server-to-client updates
Client-to-server updates
Figure 1: Client-server architecture of 3D online games
A Global Game State in Server. The server plays the role of a
central authority that stores the global game state. In particular, the
server is acting like an event-driven system, updating its state ( 2 )
in response to client inputs (e.g., mouse clicks and keyboard inputs
as shown in 1 ) that are captured within a certain interval, called a
frame. For example, if the client moves the mouse, the command
is sent to the server, which updates the view angle of this player’s
character in its corresponding entity.
A Local Game State in Client. A game client holds a local game
states to render the game scenes. In modern games, there are two
major sources of local state changes: 1) Server update message and
2) Local state prediction.
The server periodically sends update messages to all clients ( 3 ),
which indicates how local states should be updated in order to syn-
chronize with the global state. Then the client updates its local state
with the messages ( 4 ). Leveraging this synchronization method
alone has an issue to support both smooth gameplay experience and
low network bandwidth. To support smooth gameplay experience,
the update message should be sent very frequently because the
scene rendering should be performed based on a very up-to-date
game state. However, such frequent updates impose severe network
bandwidth. In order to address this issue, modern games employ
the local prediction method that we describe next.
The local state prediction is to predict the local game state based
on the player’s input and elapsed time from the last frame. ( 5 ). For
instance, the client records the fraction time, when the key was
down, multiply a speed value, and add it to the previous position
of the player. Predicting is crucial for providing smoother scene
update, since the update messages from the server arrives less
frequently than the frame refresh rate (e.g., 60 fps) [10]. Therefore,
by combining client-side prediction with periodic state updates,
modern games are able to provide smoother gameplay experiences,
while keeping network bandwidth low.
2.2 Game Rendering Pipeline
In this subsection, we describe how a client render the game on
there machine so as to display the game scene to the display.
yaw
roll
pitch
(𝑥, 𝑦, 𝑧)
Entity
angles
origin
geometry
textures
· · ·
Geometry
Textures
Figure 2: An example entity in Quake II [11]
Coordinate Systems in 3D Rendering Pipeline. In general, ren-
dering is the process of synthesizing multiple 3D models, thereby
generating a 2D scene shown to the user’s display. During the ren-
dering process, a sequence of space transformation are performed,
where each transformation transforms from one space to the next:
1) Local space; 2) World space; 3) Clip space; and 4) Screen space.
Local space is the 3D space that each entity is represented with
its own local coordinates (i.e., each entity has an independent 3D
coordinate system). Then the local space is transformed into the
world space. The world space is the 3D space that all the entities
are projected into the game world space (i.e., the game map). So in
this world space, all the entities are positioned in a single shared 3D
coordinate system, which represents the 3D game world. Next, the
world space is transformed into the clip space, which is the 3D space
that is captured by the camera (i.e., the self-player). Finally, the clip
space is transformed into the screen space, which corresponds to
the final 2D scene that will be shown to the user’s display. In the
followings, we describe the rendering process, especially focusing
on the different computational roles of CPU and GPU.
Stage 1: Rendering Preparation on CPU. A general idea of
graphics rendering pipelines is that CPU performs light-weight
tasks and GPU performs the rest heavy-weight computation. In
particular, the game client, on CPU, prepares the transformation ma-
trix (e.g., worldToClip and localToWorld) from the entity states.
Then such matrices and auxiliary data (e.g., model and shaders) are
sent to the GPU, which performs expensive computations including
matrix computation and rasterization.
In the rendering preparation step, the client prepares i) two trans-
formation matrix, worldToClip and localToWorld; and ii) auxil-
iary rendering data (e.g., models and shaders). The worldToClip
is a matrix that transforms an entity in the world space into an
entity in the clip space. This matrix is derived using the origin and
angles of the self-player entity, and the field-of-view, which is an
angle that represents the visible range. ( 1 ) The localToWorld is
a matrix transforming an entity in the local space into an entity
in the world space. This matrix is calculated using the origin and
angles of each entity that are being transformed. ( 2 )
The client also prepares the auxiliary rendering data (such as
models and shaders) associated with each entity. In particular, the
geometry stores the the shape of an entity in local space, and the
texture represents the color of the surface (see Figure 2). Addition-
ally, the shaders, namely the vertex shader and the fragment shader,
defines the computation that is run on the GPU.
Finally, two transformation matrices and the auxiliary rendering
data is sent to the GPU ( 3 ), which starts the next rendering pipeline
stage, geometry pipeline.
CPU
Client (Rendering Preparation)