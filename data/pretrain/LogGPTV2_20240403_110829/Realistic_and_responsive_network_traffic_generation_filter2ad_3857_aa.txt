title:Realistic and responsive network traffic generation
author:Kashi Venkatesh Vishwanath and
Amin Vahdat
Realistic and Responsive Network Trafﬁc Generation
Kashi Venkatesh Vishwanath and Amin Vahdat
University of California, San Diego
9500 Gilman Drive,
La Jolla, CA 92093
{kvishwanath, vahdat}@cs.ucsd.edu
ABSTRACT
This paper presents Swing, a closed-loop, network-responsive
trafﬁc generator that accurately captures the packet interactions of
a range of applications using a simple structural model. Starting
from observed trafﬁc at a single point in the network, Swing au-
tomatically extracts distributions for user, application, and net-
work behavior. It then generates live trafﬁc corresponding to the
underlying models in a network emulation environment running
commodity network protocol stacks. We ﬁnd that the generated
traces are statistically similar to the original traces. Further, to the
best of our knowledge, we are the ﬁrst to reproduce burstiness in
trafﬁc across a range of timescales using a model applicable to a
variety of network settings. An initial sensitivity analysis reveals
the importance of capturing and recreating user, application, and
network characteristics to accurately reproduce such burstiness.
Finally, we explore Swing’s ability to vary user characteristics,
application properties, and wide-area network conditions to project
trafﬁc characteristics into alternate scenarios.
Categories and Subject Descriptors
C.4. [Computer Communication Networks]: Modeling tech-
niques
General Terms
Measurement, Design, Experimentation.
Keywords
Modeling, Trafﬁc, Generator, Internet, Burstiness, Wavelets, En-
ergy plot, Structural Model
1.
INTRODUCTION
The goal of this work is to design a framework capable of
generating live network trafﬁc representative of a wide range of
both current and future scenarios. Such a framework would be valu-
able in a variety of settings that includes: capacity planning [27],
high-speed router design, queue management studies [23], worm
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’06, September 11–15, 2006, Pisa, Italy.
Copyright 2006 ACM 1-59593-308-5/06/0009 ...$5.00.
propagation models [37], bandwidth measurement tools [15, 18],
network emulation [39, 40] and simulation [30]. We deﬁne trafﬁc
generation to result in a time-stamped series of packets arriving at
and departing from a particular network interface with realistic val-
ues for at least the layer 3 (IP) and layer 4 (TCP/UDP) headers. This
trafﬁc should accurately reﬂect arrival rates and variances across a
range of time scales, e.g., capturing both average bandwidth and
burstiness. Packets should further appropriately map to ﬂow and
packet-size distributions, e.g., capturing ﬂow arrival rate, length
distributions, etc.
We consider two principal challenges to achieving this goal.
First, we require an underlying model with simple, semantically
meaningful parameters that fully specify the characteristics of a
given trace. By semantically meaningful, we mean that it should
be straightforward to map high-level application and network con-
ditions to the model. For example, changing network conditions,
application mix, or individual application behavior should result in
appropriate and realistic effects on the generated trafﬁc. Second,
we require techniques to populate the model from existing packet
traces to validate its efﬁcacy in capturing trace conditions. That
is, trafﬁc based on a model populated from a given packet trace
should reproduce the essential characteristics of the original trace.
Of course, the model can be populated from a designer’s “ﬁrst
principles” as well, enabling trafﬁc generation corresponding to a
variety of scenarios, both real and projected.
In this paper, we present the design, implementation, and
evaluation of Swing, a trafﬁc generation tool that addresses these
challenges. The principal contribution of our work is an under-
standing of the requirements for matching the burstiness of the
packet arrival process of an original trace at a variety of timescales,
ranging from ﬁne grained (1 ms) to coarse grained (multiple
minutes). Swing matches burstiness for: i) both bytes and packets,
ii) both directions (arriving and departing) of a network interface),
iii) a variety of individual applications within a trace (e.g., HTTP,
P2P, SNMP, NNTP, etc.), and iv) original traces at a range of speeds
and taken from a variety of locations.
Critical to the success of this effort is our ability to both
measure and reproduce in our trafﬁc generation infrastructure the
prevailing wide-area network characteristics at the time of the
trace. Earlier work shows that it is possible to recreate aggregate
trace characteristics (e.g., average bandwidth over a period of
minutes) without reproducing wide-area network conditions [36].
We show that reproducing burstiness at a range of timescales
(especially sub-RTT) requires recreating network conditions for
the transmitting/receiving hosts in the original trace. Of course,
extracting wide-area network conditions from a single packet trace
is a difﬁcult problem [20, 44]. Thus, a contribution of this work
is an understanding of the extent to which existing techniques for
passively measuring wide-area network conditions are sufﬁcient to
accurately reproduce the burstiness of a given trace and whether
changing assumptions about prevalent network conditions result in
correspondingly meaningful changes in resulting traces (e.g., based
on halving or doubling the prevalent round trip time).
In the Sections that follow we ﬁrst describe our methodology
(§ 2.3) to parameterize (§ 3.1) a given trace and use it to generate
(§ 3.3) live trafﬁc and the corresponding packet trace. We ﬁrst
validate (§ 5) Swing’s ability to faithfully reproduce trace character-
istics, critically examine (§ 5.3) the sensitivity of generated traces
to individual model parameters and ﬁnally explore Swing’s ability
to project (§ 5.4) trafﬁc characteristics into the future.
2. THE SWING APPROACH
2.1 Requirements
This section describes our goals, assumptions, and approach
to packet trace generation. We extract bi-directional characteristics
of packets traversing a single network link, our target. Before we
describe our approach to trace generation, we present our metrics
for success: realism, responsiveness, and maximally random.
Packet trace generation is not an end in itself, rather a tool
to aid higher-level studies. Thus, the deﬁnition of realism for a
trace generation mechanism must be considered in the context of
its usage. For instance, generating traces for capacity planning
likely only requires matching aggregate trace characteristics such
as bandwidth over relatively coarse timescales. Trace generation for
high-speed router design, queue management policies, bandwidth
estimation tools, or ﬂow classiﬁcation algorithms has much more
stringent requirements.
We aim to generate realistic traces for a range of usage
scenarios and hence our goal is to generate traces that accurately
reﬂect the following characteristics from an original trace: i) packet
inter-arrival rate and burstiness across a range of time scales, ii)
packet size distributions, iii) ﬂow characteristics including arrival
rate and length distributions, and iv) destination IP address and port
distributions. In this paper, we present our techniques and results
for the ﬁrst three of these goals.
To be responsive, a trace generation tool must ﬂexibly and
accurately adjust trace characteristics by allowing the user to
change assumptions about the ambient conditions of the original
trace, for example the: i) bandwidth capacity of the target link, ii)
round trip time distributions of the ﬂows traversing the link, iii)
mix of applications sharing a link, e.g., if P2P trafﬁc were to grow
to 40% of the trafﬁc on a link or UDP-based voice trafﬁc were
to double, and iv) changes in application characteristics, e.g., if
average P2P ﬁle transfer size grew to 100MB.
By maximally random, we mean that a trace generation tool
should be able to generate a family of traces constrained only
by the target characteristics of the original trace and not the
particular pattern of communication in the trace. Thus, multiple
traces generated to follow a given set of characteristics should vary
(perhaps signiﬁcantly) across individual connections while still
following the appropriate underlying distributions. This require-
ment eliminates the trivial solution of simply replaying the exact
same connections in the exact same order seen in some original
trace. While quantifying the extent to which we are successful in
generating maximally random graphs is beyond the scope of this
paper, this requirement signiﬁcantly inﬂuences our approach to,
and architecture for, trace generation.
2.2 Overview
Our hypothesis is that our goals for realistic and responsive
packet generation must be informed by accurate models of: i) the
users and programs initiating communication across the target link,
ii) the hardware, software, and protocols hosting the programs, and
iii) the large space of other network links responsible for carrying
packets to and from the target link. Without modeling users, it is
impossible to study the effects of architectural changes on end users
or to capture the effects of changing user behavior (e.g., if user
patience for retrieving web content is reduced). Similarly, without
an understanding of a wide mix of applications and protocols,
it is difﬁcult to understand the effects of evolving application
popularity on trafﬁc patterns at a variety of timescales. Finally,
the bandwidth, latency, and loss rate of the links upstream and
downstream of the target affect packet inter-arrival characteristics
and TCP transmission behavior of the end hosts communicating
across the target link (see § 5.3).
We ﬁrst describe our methodology for trace generation as-
suming perfect knowledge of these three system components. In
the following sections we describe how to relax this assumption,
extracting approximate values for all of these characteristics based
solely on a packet trace from some target link. § 5 qualitatively and
quantitatively evaluates the extent to which we are able to generate
packet traces matching a target link’s observed behavior given our
approximations for user, end host, and network characteristics.
To generate a packet trace we initiate (non-deterministically)
a series of ﬂows in a scalable network emulation environment
running commodity operating systems and hardware. Sources and
sinks establish TCP and UDP connections across an emulated
large-scale network topology with a single link designated as the
target. Simply recording the packets and timestamps arriving and
exiting this link during a live emulation constitutes our generated
trace. The characteristics of individual ﬂows across the target link,
e.g., when the ﬂow starts, the pattern of communication back and
forth between the source and the sink, is drawn from our models
of individual application and user behavior in the original trace.
Similarly, we set the characteristics of the wide-area topology,
including all the links leading to and from the target link, to
match the network characteristics observed in the original trace.
We employ ModelNet [39] for our network emulation environment,
though our approach is general to a variety of simulation and
environment environments.
Assuming that we are able to accurately capture and play back
user, application, and network characteristics, the resulting packet
trace at the target would realistically match the characteristics
of the original trace, including average bandwidth and burstiness
across a variety of timescales. This same emulation environment
allows us to extrapolate to other scenarios not present when the
original packet trace was taken. For instance, we could modify
the emulated distribution of round trip times or link bandwidths
to determine the overall effect on the generated trace. We could
similarly modify application characteristics or the application mix
to determine effects on the generated trace.
A family of randomly generated traces that match essential
characteristics of an original trace or empirical distributions for
user, application, and network characteristics (that may not have
been originally drawn from any existing packet
trace) serves
a variety of useful purposes. These traces can serve as input
to higher level studies, e.g., appropriate queueing policies, ﬂow
categorization algorithms, or anomaly detection. Just as interesting
however would be employment of the trace generation facility in
conjunction with other application studies. For instance, bandwidth
or capacity measurement tools may be studied while subject to
a variety of randomly-generated but realistic levels of compet-
ing/background trafﬁc at a given link in a simulated or emulated
environment. The utility of systems such as application-layer mul-
ticast or other overlay protocols could similarly be evaluated while
subjecting the applications to realistic cross trafﬁc in emulation
testbeds. Most current studies typically: i) assume no competing
trafﬁc in an emulated/simulated testbed, ii) subject the application
to ad hoc variability in network performance, or iii) deploy their
application on network testbeds such as PlanetLab that, while
valuable, do not easily enable subjecting an application to a variety
of (reproducible) network conditions.
2.3 Structural model
Earlier work [41] shows that realistic trafﬁc generators must
use structural models that account for interactions across multiple
layers of the protocol stack. We follow the same philosophy and
divide our task of ﬁnding suitable parameters for Swing’s structural
model into four categories:
Users: End users determine the communication characteris-
tics of a variety of applications. Important questions include how
often users become active, the distribution of remote sites visited,
think time between individual requests, etc. Note that certain
applications (such as SNMP) may not have a human in the loop,
in which case we use this category as a proxy for any regular, even
computer-initiated behavior.
Sessions: We consider individual session characteristics. For
instance, does an activity correspond to downloading multiple
images in parallel from the same server, different chunks of the
same mp3 ﬁle from different servers, etc. An important question
concerns the number and target of individual connections within a
session.
Connections: We also consider the characteristics of connec-
tions within a session, such as their destination, the number of
request/response pairs within a connection, the size of the request
and corresponding response, wait time before generating a response
(e.g., corresponding to CPU and I/O overhead at the endpoint),
spacing between requests, and transport (e.g., TCP vs. UDP). We
characterize individual responses with the packet size distribution,
whether it involves constant bit rate communication, etc.
Network characteristics: Finally, we characterize the wide-
area characteristics seen by ﬂows. Speciﬁcally, we extract link loss-
rates, capacities, and latencies for paths connecting each host in the
original trace to the target-link.
Using these observations, we developed a parameterization
of individual application sessions, summarized in Table 1. A
set of values for these parameters constitutes an application’s
signature. For instance HTTP, P2P, and SMTP will all have dif-
ferent signatures. To successfully reproduce packet traces, we
must extract appropriate distributions from the original trace to
populate each of the parameters in Table 1. If desired, it is also
possible to individually set distribution values for these parameters
to extrapolate to a target environment.
While we do not claim that our set of parameters is either
necessary or sufﬁcient to capture the characteristics of all applica-
tions and protocols, in the experiments that we conducted we found
each of the parameters to be important for the applications we
considered. § 5 quantiﬁes the contribution of a subset of our model
parameters to accurately reproduce trace characteristics through an
initial sensitivity analysis.
3. ARCHITECTURE
In this section, we present our approach to populating the
model outlined above for individual applications, extracting wide-
area characteristics of hosts communicating across the target link,
and then generating traces representative of these models.
3.1 Parameterization methodology
We begin with a trace to describe how we extract application
characteristics from the target link. While our approach is general
to a variety of tracing infrastructures, we focus on tcpdump traces
from a given link.
The ﬁrst step in building per-application communication mod-
els is assigning packets and ﬂows in a trace to appropriate ap-
plication classes. Since performing such automatic classiﬁcation
is part of ongoing research [22, 28, 42] and because we do not
have access to packet bodies (typically required by existing tools)
for most publicly available traces, we take the simple approach
of assigning ﬂows to application classes based on destination port
numbers. Packets and ﬂows that cannot be unambiguously assigned
to an appropriate class are assigned to an “other” application
class; we assign aggregate characteristics to this class. While
this assumption limits the accuracy of the models extracted for
individual applications, it will not impact our ability to faithfully
capture aggregate trace characteristics (see § 5). Further, our
per-application models will improve as more sophisticated ﬂow-
classiﬁcation techniques become available.
After assigning packets to per-application classes, our ﬁrst
task is to group these packets into ﬂows. We use TCP ﬂags (when
present) to determine connection start and end times. Next, we use
the sequence number and acknowledgment number advancements
to calculate the size of data objects ﬂowing in each direction of
the connection. Of course, there are many vagaries in determining
the start and end of connections in a noisy trace. We use the
timestamp of the ﬁrst SYN packet sent by a host as the connection
start time. Unless sufﬁcient information is available in the trace
to account for unseen packets for connections established before
the trace began, we consider the ﬁrst packet seen for a connection
as the beginning of that connection when we do not see the
initial SYN. Similarly, we account for connections terminated
by a connection reset (RST) rather than a FIN. Due to space
constraints, we omit additional required details such as: out-of-
order packets, retransmitted packets, lost packets, and packets with
bogus SYN/ACK values. Rather, we adopt strategies employed by
earlier efforts faced with similar challenges [32, 35, 20].
Given per-ﬂow, per-application information, we apply a series
of rules to extract values for our target parameters. The ﬁrst step is
to generate session information from connection information. We
sort the list of all connections corresponding to an application in
increasing order of connection establishment times. The ﬁrst time
a connection appears with a given source IP address we designate a
session initiation and record the start time. A session consists of one
or more RREs (Request-Response-Exchanges). An RRE consists
of one or more connections. For instance, 10 parallel connections to
download images in a web page constitutes a single RRE. Likewise,
the request for the base HTML page and its response will be another
RRE. We also initialize the start time of the ﬁrst connection as the
beginning of the ﬁrst RRE and set the number of connections in this
session to 1. Finally, we record the FIN time for the connection.
Upon seeing additional connections for an already discerned
IP address, we perform one of the following actions.
i) If the SYN time of this new connection is within an RREtimeout
limit (a conﬁgurable parameter), we conclude that the connection
belongs to the same RRE (i.e., it is a parallel or simultaneous
connection), and update our number of connections parameter. We
also update the RREEnd (termination time of all connections) of
the RRE as the max of all connection termination times. Finally,
Layer
Users
RRE
Connection
Packet
Network
Variable in our Parameterization model : Description
ClientIP ; numRRE: Number of RREs ; interRRE think time
numconn: Number of Connections ; interConn: Time between start of connections
numpairs: number of Request/Response exchanges per connection ; Transport: TCP/UDP based on the application ;
ServerIP ; RESPonse sizes ; REQuest sizes ; reqthink: User think time between exchanges on a connection
packet size: (MTU); bitrate: packet arrival distribution (only for UDP right now)
Link Latency ; Delay; Loss rates
Table 1: Structural Model of Trafﬁc. For each new HTTP session, for instance, we pick a randomly generated value (from the
corresponding distribution) for each of the variables. First we pick a client and then decide how many RREs to generate along with
their interRRE times. For each RRE we decide how many parallel connections (separated by interConn times) to open and to whom
(server). Within a connection we decide the total number of request response exchanges along with the request, response sizes and
the request think time (reqthink) separating them.
we record the difference in start times of this new connection from
the previous connection (interConn) in the same RRE.
ii) If the SYN time of this new connection is not within the
RREtimeout limit, we declare the termination of the current RRE
and mark the beginning of a new RRE. We also calculate the time
difference in the max FIN of the previous RRE and the start of
this RRE. If that time difference is within the SESStimeout limit
(another conﬁgurable parameter), we associate the new RRE with
an existing session. Otherwise, we conclude that a new session
has started. For each connection we also record the request think
time as the time difference between a response from the server
and the subsequent request from the client. We have analyzed a
variety of values for our conﬁgurable thresholds such as RREEnd
and SESStimeout. While we omit the details for brevity, using
RREtimeout = 30sec and SESStimeout = 5min works well
for a range of scenarios.
In summary, each session consists of a number of RREs,
which in turn consist of a number of protocol connections. Given
information on individual sessions and their corresponding RREs,