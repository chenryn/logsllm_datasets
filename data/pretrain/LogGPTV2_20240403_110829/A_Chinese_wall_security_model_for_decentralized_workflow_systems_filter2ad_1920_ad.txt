to the next agent like usual.
bf∨price>$400
−→
Example 6. This example illustrates the senario of case
2. In the workﬂow shown on ﬁgure 9(A) we suppose that
the tasks t2 and the task t4 are in the same COI; We also
−→ t3 is sensitive
price<=$400
suppose that the dependency t2
for A(t2) (and of course for A(t4)).
price<=$400
−→
When t1 has to split the workﬂow to send to A(t2) it has to
take care of the fact that A(t2) cannot read the dependency
t3.
t2
In this case, diﬀerent from the one in
example 5, A(t3) can read the dependency and can evaluate
that.
To do that, A(t1) has to split the workﬂow into two parts.
P 2, which includes t2 and a signal dependency from t2 to t3.
P 3 includes the task t3 and all the tasks following that. To
evaluate the sensitive dependency, we have to split it into
two. P relocal
including the non-sensitive objects that can be
evaluated in A(t2) P reremote
including the sensitive objects
that have to be evaluate in the task t3 using the Outstate(t2)
that are also sent to A(t3) for permitting the evaluation.
t2
t2
In this case, there are only sensitive objects that have to
be evaluated in A(t3). This does not reveal sensitive objects
to A(t4) because the conditions have already been evaluated
before the workﬂow is sent to it.
Theorem 1. The restrictive partition algorithm (algo-
rithm 2) enforces the read and write rules of the DW Chinese
wall policy.
6.2 Secure WFMS stub
In order to make the WFMS stub at the central system
same as that in the agents, we introduce the following. We
assume there exist two dummy tasks t0 and tF that comprise
of empty set of operations such that PreSet(t0) = PreSet(tF )
= φ, Input(t0) = Output(t0) and Input(tF ) = Output(tF ).
The central WFMS is the task execution agent responsible
for executing both t0 and tF .
Definition 11. Given a task ti in a self-describing work-
ﬂow SELF(P ), we say ti is tail(SELF(P )) if there exists no
tj such that ti → tj.
For example, in ﬁgure 6(B), t7 = tail(SELF(P 4)) and t7
= tail(SELF(P 6)).
When a workﬂow W is sent to the central WFMS, it in-
bs−→ t1
cludes a t0 to the initial task and a dependency t0
such that t1 is one of the tasks in W that do not have any de-
pendency ti → t1 in W . Then the central WFMS sends the
workﬂow to the WFMS stub in its own location. The func-
tions of the WFMS stub (at the central as well as at the
execution agents) are outlined in the following algorithm.
This algorithm employs the DW Chinese Wall policy using
the restrictive partitioning.
Algorithm 3. [Secure WFMS stub at A(ti)]
Given a SELF(ti)
extract the task ti to be executed in A(ti)
Pj = Restrictive Partition(Pi)
construct SELF(Pj)
if (P reb
/*The task tj has to be executed in parallel with ti*/
tj = ∅)
then forward SELF(Pj) to A(tj)
execute(ti) until state(ti) = done
if (P reb
/* ti is executed in parallel with the preceding task and
ti = ∅)
it has to wait to complete*/
then wait
until (sync − signal (cid:16)= yes ∨ ¬timeout)
ti = true) where pr ∈ {commit, abort}
raise an error if (timeout)
if (P repr
if (OutState(ti) satisﬁes dependency expression de in
then terminate execution
else raise an error
PreSet(tj) ∧ P retj = true )
then
if (P reb
tj = ∅)
then send sync-signal to A(tj)
about the completion of its execution
else forward SELF(Pj) to A(tj)
The above WFMS stub algorithm uses restrictive parti-
tion algorithm to split the workﬂow for task agents that are
55in conﬂict-of-interest. It also shows how a task (ti) is ex-
ecuted sequentially or in parallel with the subsequent task
In case of parallel execution, the sync-signal needs
(tj).
to be sent between task agents in order to coordinate the
task executions. For instance, the dependency speciﬁcation
c−→ tj allows to begin parallel execution of ti and tj .
in ti
However, once tj is in done state, it needs to wait for a
synchronization signal from ti in order to commit.
Once the self-describing workﬂows are generated, it should
be proven that the composition of partitioned self-describing
workﬂows do not lose the dependencies originally in the self-
describing workﬂows. The following deﬁnes the equivalence
of a SELF(P) and the composition of its partitioned work-
ﬂows. Theorem 1 proves that when the partitioned self-
describing workﬂows are assembled together, they are equiv-
alent to the original SELF(P).
Definition 12. [Equivalence] Given two self-describing
), we say that SELF(P ) is
workﬂows SELF(P ) and SELF(P
), denoted as SELF(P ) ≡ SELF(P
(cid:2)
equivalent to SELF(P
)
if, (1) the set of all operations in SELF(P ) is same as that
of SELF(P
), and (2) for each ti, the PreSet(ti) in SELF(P )
= PreSet(ti) in SELF(P
).
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Theorem 2. Let SELF(Pi) be a self-describing workﬂow.
Assume SELF(Pi) is decomposed into SELF(Pi1 ),
SELF(Pi2 ), . . . SELF(Pin ) using algorithm 2.
Then SELF(Pi) ≡∪n
j=1SELF(Pij ).
7. RELATED WORK
In recent years, several approaches and architectures for
decentralized workﬂow execution have been proposed [2, 18,
10, 6]. Our approach to decentralized control diﬀers from
these in the following aspects. In these approaches, a work-
ﬂow is pre-partitioned in a central server, and the partitions
are made statically in the central server and distributed to
each execution agent, whereas our approach partitions as
the workﬂow progresses with its execution. Therefore, our
approach can accommodate dynamism easily. None of these
approaches address the conﬂict-of-interest issues while parti-
tioning. Some workﬂow security issues have been addressed
in [4, 1], but are geared towards access control.
Work in the area of mobile code security where code is
executed by untrusted hosts is also relevant to our work [7,
17, 8, 16]. The security concern here is to ensure that sen-
sitive information in the “ﬂoating” software is not exploited
by malicious hosts for its advantage, and vice versa where
the mobile software does not leak the sensitive information
of the host to somebody else. Proposed solutions use cryp-
tography where only the relevant code that needs to be exe-
cuted is visible to the host. The code is typically encrypted
using an “Onion Ring” approach, which is explained brieﬂy
below.
Suppose the code comprises of three parts, P1, P2, and P3
to be executed by three hosts H1, H2, and H3, respectively.
P3 is ﬁrst encrypted with H3’s public key, this encrypted
P3 and P2 together are encrypted by H2’s public key, and
so on. With this, H1 can access only P1, but cannot access
neither P2 nor P3. Such solutions cannot resolve the COI
issues resulting due to decentralized control since each host
should know the control/dependency information in order
d−→ tj
to enforce it. If the dependency information d in ti
is encrypted with tj’s public key, ti would not be able to
know on which condition it should forward the remaining
workﬂow to A(tj). If dependency d information is encrypted
with A(ti)’s public key, then the COI problem we addressed
in this paper still remains since ti has already read d.
[11, 12] propose a decentralized label model for more ﬁne-
grained information sharing, while reducing the potential in-
formation leakage through uncontrolled propagation, among
distrusted applications as in mobile codes. Information at a
host is labeled with a pair (cid:7)owner, readerlist(cid:8) where owner
can specify the allowed ﬂow of information, i.e. allowed read-
ers in a program. However, it does not address the policies
on the conﬂicts of interest among hosts. Its primary concern
is to deal with privacy and conﬁdentiality of information by
controlling information propagation.
8. CONCLUSIONS AND FUTURE WORK
In this paper, we have ﬁrst proposed a model for decen-
tralized control of workﬂows, using the notions of self- de-
scribing workﬂows and workﬂow stubs. We have shown that
fair execution of workﬂows in a decentralized workﬂow man-
agement system needs to take into consideration the Chinese
wall policy and the conﬂicts of interest (COI) groups of task
agents. We have proposed a Chinese Wall Security policy
for decentralized control, in which we modify the original
Chinese wall policy. We have then proposed algorithms to
enforce these read and write rules using restrictive partitions.
While, the partition algorithm generates a non-restrictive
self-describing partition if it does not contain sensitive ob-
jects, it generates restrictive self-describing partitions if it
contains sensitive objects involving the same COI group.
This approach allows to hide the sensitive information con-
tained in dependencies so that the task agents cannot ma-
nipulate their output for their own advantage.
In our future work we intend to extend our framework
to handle the AND join and split while partitioning. Note
that although we have portrayed our approach as a solution
to resolve the issue of conﬂicts of interest, one can adopt
it under other considerations to restrict the partitions. For
example, factors that aﬀect the partitioning of workﬂows for
distributed execution may include reliable network connec-
tions and geographic proximity among task agencies, het-
erogeneity of information systems used among task agencies,
degree of autonomy for changing workﬂows by task agencies,
and so on. We intend to explore these factors for restrict-
ing partitions in the future. We will also investigate how
dynamic changes and exceptions of workﬂows can be mod-
eled in decentralized WFMS for secure and fair execution of
workﬂows.
9. REFERENCES
[1] Nabil R. Adam, Vijayalakshmi Atluri, and Wei-Kuang
Huang. Modeling and Analysis of Workﬂows using
Petri nets. Journal of Intelligent Information Systems,
Special Issue on Workﬂow and Process Management,,
10(2), March 1998.
[2] G. Alonso, D. Agrawal, A. El Abbadi, C. Mohan,
R. Gunthor, and M. Kamath. EXotica/FMQM: A
Persistent Message-Based Architecture for Distributed
Workﬂow Management. In Proceedings of the IFIP
WG8.1 Working Conference on Information Systems
for Decentralized Organizations, Trondheim, August
1995.
56[3] Vijay Atluri, Soon Ae Chun, and Pietro Mazzoleni. A
chinese wall security model for decentralized workﬂow
systems. Cimic-technical report, MSIS Department,
CIMIC-Rutgers University, November 2000.
[4] Elisa Bertino, Elena Ferrari, and Vijayalakshmi
Atluri. A Flexible Model Supporting the Speciﬁcation
and Enforcement of Role-based Authorizations in
Workﬂow Management Systems. In Proc. of the 2nd
ACM Workshop on Role-based Access Control,
November 1997.
[5] D.F.C. Brewer and M. J. Nash. The chinese wall
security policy. In Proceedings of IEEE Symposium on
Security and Privacy, pages 206 –214, 1989.
[6] S. Das, K. Kochut, J. Miller, A. Sheth, and D. Worah.
ORBWork: A Reliable Distributed CORBA-based
Workﬂow Enactment System for METEOR2.
Technical Report UGA-CS-TR-97-001, University of
Georgia, February 1997.
[7] Richard Dean. Formal Aspects of Mobile Code
Security . PhD thesis, Computer Science Department,
Princeton University, 1999.
Charts. In Proc. International Conference on Database
Theory, Delphi, Greece, January 1997.
APPENDIX
A. THE CHINESE WALL SECURITY POL-
ICY
The Chinese wall policy was identiﬁed by Brewer and
Nash [5, 15] for information ﬂow in a commercial sector.
It is deﬁned as follows. All company information is cate-
gorized into mutually disjoint conﬂict of interest classes, as
shown in ﬁgure 10. For example, Banks, Oil Companies, Air
Lines are the diﬀerent conﬂict-of-interest (COI) classes. The
Chinese wall policy states that information ﬂows from one
company to another that cause conﬂict of interest for indi-
vidual consultants should be prevented. Thus, if a subject
accesses Bank A information, it is not allowed to access any
information within the same COI class, for example, that of
Bank B. However, it can access information of another COI
class, for example, oil company A.
The Brewer-Nash model [5] proposes the following manda-
[8] William M. Farmer, Joshua D. Guttman, and Vipin
tory read and write rules:
Swarup. Security for Mobile Agents: Issues and
Requirements. In Proceedings of the 19th National
Information Systems Security Conference, pages
591–597, 1995.
[9] Dimitrios Georgakopoulos, Mark Hornick, and Amit
Sheth. An Overview of Workﬂow Management: From
Process Modeling to Workﬂow Automation
Infrastructure. Distributed and Parallel Databases,
pages 119–153, 1995.
[10] P. Muth, D. Wodtke, and J. Weissenfels. From
centralized workﬂow speciﬁcation to distributed
workﬂow execution. Journal of Intelligent Information
Systems, 10(2), 1998.
[11] Andrew C. Myers. JFlow: Practical mostly-static
information ﬂow control. In Proceedings of the 26th
ACM Symposium on Principles of Programming
Languages (POPL), San Anonio, TX, January 1999.
[12] Andrew C. Myers. Mostly-Static Decentralized
Inforamtion Flow Control. PhD thesis, Laboratory for
Computer and Information Science, MIT, 1999.
[13] Marek Rusinkiewicz and Amit Sheth. Speciﬁcation
and Execution of Transactional Workﬂows. In
W. Kim, editor, Modern Database Systems: The
Object Model, Interoperability, and Beyond.
Addison-Wesley, 1994.
[14] Marek Rusinkiewicz, Amit Sheth, and George
Karabatis. Specifying Interdatabase Dependencies in a
Multidatabase Environment. IEEE Computer,
24(12):46–53, December 1991.
[15] Ravi S. Sandhu. A Lattice Interpretation of the
Chinese Wall Policy. In Proc. 15th NIST-NCSC
Computer Security Conf., pages 329–339, Washington,
D.C., October 1992.
[16] E. Vigna. Mobile Agents and Security. Springer, Berlin
Heidelberg, 1998.
[17] Dan Seth Wallach. A New Approach to Mobile
Security. PhD thesis, Computer Science Department,
Princeton University, 1999.
[18] D. Wodtke and G. Weikum. A Formal Foundation For
Distributed Workﬂow Execution Based on State
1. BN Read Rule: Subject S can read object O only if
O is from the same company information as some object
read by S,
or O belongs to a COI class within which S has not
read any object.
2. BN Write Rule: Subject S can write object O only if
S can read O by the BN Read rule, and no object can
be read which is in diﬀerent company dataset to the
one for which write access is requested.
The BN write rule prevents information leakage by Trojan
Horses. For example, suppose John has read access to Bank
A objects and Travel agency T objects, and Jane has read
access to Bank B objects and Travel agency T objects. If
John is allowed write access to T’s objects, a Trojan Horse
can transfer information from Bank A’s objects to T’s ob-
jects which is read by Jane, who then can read information
about both Bank A and Bank B.
Company Information
conflict of
interest class 1
Bank
conflict of
interest class 2
Oil Company
conflict of
interest class 3 
Airline Company
. . . . . . .
conflict of
interest class n 
B1, B2, .....         Bi
O1  O2  .....         Oj
A1, A2,   . . .        Ak
. . . .
...
1
2
. . .
...
 ...
Figure 10: Company Information for the Chinese
Wall Policy
57