# Leetcode 题解 - 位运算
* [Leetcode 题解 - 位运算](#leetcode-题解---位运算)
    * [0. 原理](#0-原理)
    * [1. 统计两个数的二进制表示有多少位不同](#1-统计两个数的二进制表示有多少位不同)
    * [2. 数组中唯一一个不重复的元素](#2-数组中唯一一个不重复的元素)
    * [3. 找出数组中缺失的那个数](#3-找出数组中缺失的那个数)
    * [4. 数组中不重复的两个元素](#4-数组中不重复的两个元素)
    * [5. 翻转一个数的比特位](#5-翻转一个数的比特位)
    * [6. 不用额外变量交换两个整数](#6-不用额外变量交换两个整数)
    * [7. 判断一个数是不是 2 的 n 次方](#7-判断一个数是不是-2-的-n-次方)
    * [8.  判断一个数是不是 4 的 n 次方](#8--判断一个数是不是-4-的-n-次方)
    * [9. 判断一个数的位级表示是否不会出现连续的 0 和 1](#9-判断一个数的位级表示是否不会出现连续的-0-和-1)
    * [10. 求一个数的补码](#10-求一个数的补码)
    * [11. 实现整数的加法](#11-实现整数的加法)
    * [12. 字符串数组最大乘积](#12-字符串数组最大乘积)
    * [13. 统计从 0 \~ n 每个数的二进制表示中 1 的个数](#13-统计从-0-\~-n-每个数的二进制表示中-1-的个数)
## 0. 原理
**基本原理** 
0s 表示一串 0，1s 表示一串 1。
```
x ^ 0s = x      x & 0s = 0      x | 0s = x
x ^ 1s = ~x     x & 1s = x      x | 1s = 1s
x ^ x = 0       x & x = x       x | x = x
```
利用 x ^ 1s = \~x 的特点，可以将一个数的位级表示翻转；利用 x ^ x = 0 的特点，可以将三个数中重复的两个数去除，只留下另一个数。
```
1^1^2 = 2
```
利用 x & 0s = 0 和 x & 1s = x 的特点，可以实现掩码操作。一个数 num 与 mask：00111100 进行位与操作，只保留 num 中与 mask 的 1 部分相对应的位。
```
01011011 &
00111100
--------
00011000
```
利用 x | 0s = x 和 x | 1s = 1s 的特点，可以实现设值操作。一个数 num 与 mask：00111100 进行位或操作，将 num 中与 mask 的 1 部分相对应的位都设置为 1。
```
01011011 |
00111100
--------
01111111
```
**位与运算技巧** 
n&(n-1) 去除 n 的位级表示中最低的那一位 1。例如对于二进制表示 01011011，减去 1 得到 01011010，这两个数相与得到 01011010。
```
01011011 &
01011010
--------
01011010
```
n&(-n) 得到 n 的位级表示中最低的那一位 1。-n 得到 n 的反码加 1，也就是 -n=\~n+1。例如对于二进制表示 10110100，-n 得到 01001100，相与得到 00000100。
```
10110100 &
01001100
--------
00000100
```
n-(n&(-n)) 则可以去除 n 的位级表示中最低的那一位 1，和 n&(n-1) 效果一样。
**移位运算** 
\\>\\> n 为算术右移，相当于除以 2n，例如 -7 \\>\\> 2 = -2。
```
11111111111111111111111111111001  >> 2
--------
11111111111111111111111111111110
```
\\>\\>\\> n 为无符号右移，左边会补上 0。例如 -7 \\>\\>\\> 2 = 1073741822。
```
11111111111111111111111111111001  >>> 2
--------
00111111111111111111111111111111
```
\> 1;
    }
    return cnt;
}
```
使用 z&(z-1) 去除 z 位级表示最低的那一位。
```java
public int hammingDistance(int x, int y) {
    int z = x ^ y;
    int cnt = 0;
    while (z != 0) {
        z &= (z - 1);
        cnt++;
    }
    return cnt;
}
```
可以使用 Integer.bitcount() 来统计 1 个的个数。
```java
public int hammingDistance(int x, int y) {
    return Integer.bitCount(x ^ y);
}
```
## 2. 数组中唯一一个不重复的元素
136\. Single Number (Easy)
[Leetcode](https://leetcode.com/problems/single-number/description/) / [力扣](https://leetcode-cn.com/problems/single-number/description/)
```html
Input: [4,1,2,1,2]
Output: 4
```
两个相同的数异或的结果为 0，对所有数进行异或操作，最后的结果就是单独出现的那个数。
```java
public int singleNumber(int[] nums) {
    int ret = 0;
    for (int n : nums) ret = ret ^ n;
    return ret;
}
```
## 3. 找出数组中缺失的那个数
268\. Missing Number (Easy)
[Leetcode](https://leetcode.com/problems/missing-number/description/) / [力扣](https://leetcode-cn.com/problems/missing-number/description/)
```html
Input: [3,0,1]
Output: 2
```
题目描述：数组元素在 0-n 之间，但是有一个数是缺失的，要求找到这个缺失的数。
```java
public int missingNumber(int[] nums) {
    int ret = 0;
    for (int i = 0; i < nums.length; i++) {
        ret = ret ^ i ^ nums[i];
    }
    return ret ^ nums.length;
}
```
## 4. 数组中不重复的两个元素
260\. Single Number III (Medium)
[Leetcode](https://leetcode.com/problems/single-number-iii/description/) / [力扣](https://leetcode-cn.com/problems/single-number-iii/description/)
两个不相等的元素在位级表示上必定会有一位存在不同。
将数组的所有元素异或得到的结果为不存在重复的两个元素异或的结果。
diff &= -diff 得到出 diff 最右侧不为 0 的位，也就是不存在重复的两个元素在位级表示上最右侧不同的那一位，利用这一位就可以将两个元素区分开来。
```java
public int[] singleNumber(int[] nums) {
    int diff = 0;
    for (int num : nums) diff ^= num;
    diff &= -diff;  // 得到最右一位
    int[] ret = new int[2];
    for (int num : nums) {
        if ((num & diff) == 0) ret[0] ^= num;
        else ret[1] ^= num;
    }
    return ret;
}
```
## 5. 翻转一个数的比特位
190\. Reverse Bits (Easy)
[Leetcode](https://leetcode.com/problems/reverse-bits/description/) / [力扣](https://leetcode-cn.com/problems/reverse-bits/description/)
```java
public int reverseBits(int n) {
    int ret = 0;