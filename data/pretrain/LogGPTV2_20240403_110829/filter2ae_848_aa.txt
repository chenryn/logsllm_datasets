# OpenWrt之入门
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者： L.A.M@Duncan SecTeam
## 0x00：引言
对于OpenWrt的认知，可能很多人都还停留在路由器或者路由器“刷机”上。在网上搜了一下，这种印象在小米等一众“智能”路由器大卖之后貌似更加深刻了[1]。当然，从OpenWrt官方的描述以及从操作系统的角度来看的话，官方的大白话的确蛮中肯。
“OpenWrt 项目是一个针对嵌入式设备的Linux操作系统。OpenWrt
不是一个单一且不可更改的固件，而是提供了具有软件包管理功能的完全可写的文件系统。这使您可以不使用供应商提供的应用程序选择和配置，而是通过使用软件包来定制设备以适应任何应用程序。对于开发人员来说，OpenWrt
是一个无需围绕它构建完整固件就能开发应用程序的框架; 对于普通用户来说，这意味着拥有了完全定制的能力，能以意想不到的方式使用该设备。”
作为一个技术小白为什么会想到倒腾OpenWrt呢？嗯，当然并不是主要为了搞机器人，而是因为一些光猫上跑了Luci。总觉得这些IoT设备会有为题，其实网上一搜一大堆破解光猫密码啥的，挺有意思，就想自己先搭个环境倒腾一下。前前后后，折腾了有一段时间了，发现挺好玩的，顺带还把计算机体系结构中逃的课都给补上了，毕竟谁还没翘过课呢。。。
还是按照team的老规矩，先把文章的mindmap贴上。
## 0x01：OpenWrt是什么？
其实，一开始没想着写这篇文章的，因为网上OpenWrt的资料还是蛮多的，当然杂且多坑，复制转发的居多。小白很懒，不想去看纯英文的官(方)文(章)，所以动了买本书看看的念头。在叮叮当当上搜了一下，数量不多，就那么两三本，而且基本是站在玩路由的角度写的，对OpenWrt的介绍，尤其是偏向于系统架构和系统安全的介绍基本上可以忽略不计，甚至压根儿没有，但这正是我最想看的，于是打消了偷懒的念头，硬着头皮啃呗。其实，偶尔读一读官文挺好，尤其是晚上睡觉之前，入睡蛮快的。。。因此，这篇文章算是干货满满吧，我把所有填过的坑，踩过的雷都一一罗列出来了，就当为有兴趣一起玩的朋友们铺路了^_^
在我看来，OpenWrt就是一个Linux操作系统，当然是针对低功耗Arm、MIPS等架构的嵌入式计算环境做过详细优化的系统，最重要的是它让针对嵌入式的开发变得愈发简单，用网上的大白话说：OpenWrt之余嵌入式设备，就如Android之余智能手机，不需要为了更新微信而重新安装Android。我觉得这个比喻特别好，对于那些不想深入了解，完了还想到处吹牛逼的人而言，简直就是天上掉下来的福利啊，而且这比喻几乎搁谁都能看懂，当然我爸妈不在此列。所以，下面这段话只能跟技术宅分享了：
“OpenWrt 项目是一个针对嵌入式设备的Linux操作系统。OpenWrt
不是一个单一且不可更改的固件，而是提供了具有软件包管理功能的完全可写的文件系统。这使您可以不使用供应商提供的应用程序选择和配置，而是通过使用软件包来定制设备以适应任何应用程序。对于开发人员来说，OpenWrt
是一个无需围绕它构建完整固件就能开发应用程序的框架; 对于普通用户来说，这意味着拥有了完全定制的能力，能以意想不到的方式使用该设备。”
那么OpenWrt与其他的Linux发行版之间有什么不同呢？停留于应用层面的比较在这里就不说了，说多了都是废话。在技术层面上，二者最大的不同包括但不限于以下几点：
###  1）软件包管理工具。
对于熟悉Linux的朋友而言，rpm，apt，apt-get，dnf，yum，pacman等等都应该比较熟悉，要么都或多或少用过、听过。可是你听过ipkg吗？你又有听说过opkg吗？ipkg是一个轻量化的包管理系统，它被设计用于在掌上电脑等存储能力有限的设备上进行linux的程序安装。现在许多嵌入式linux的手机、pda上常用它作为包管理系统。Opkg则是ipkg的一个变种，专门用于OpenWrt上的软件包管理，目前可以下载的工具大概有3000多个，较之于主流Linux发行版而言，这个数字简直是少得可怜了，但是对于这样一个小圈子而言已经非常腻害了。
###  2）自创的进程间通信机制uBus。
关于uBus的定义，官网是这样说的：
“uBus是OpenWrt的微总线体系架构，用于提供后台进程和应用程序之间的进程间通信，该机制主要包括了后台进程，库文件以及额外的辅助程序(helper)。”
从个人学习体会来看，uBus核心就是进程间通信，弥补Posix机制中传统IPC(信号量，内存共享，套接字等)的不足，同时尽量简化Deamon与App之间通信的成本与时间开销，当然还能够尽可能的统一不同Deamon与App之间的IPC规范，让开发者不用操那么多的心，可以集中精力办大事。其实，很多兼容POSIX接口的系统都实现了自己独有的IPC机制，比如MacOS。
uBus的核心部件包括了：
—— ubusd后台进程。这是整个uBus
IPC架构的核心，为其它Deamon进程提供注册接口，进而从uBus总线上获取消息。在实现上，uBus采用的是Posix套接字和“类型-长度-值”消息类型。如果有感兴趣的童鞋，可以参考官网uBus[2]。
—— Libubus库。为了便于开发者使用uBus IPC机制，OpenWrt提供Libubus库。
—— Command-line uBus
tool。OpenWrt开发了uBus的命令行工具，开发者和用户可以通过命令行与ubusd交互，可以更加直接的与系统底层组件打交道。
###  3）UCI系统。
UCI是“Unified Configuration
Interface”的缩写，顾名思义，OpenWrt通过UCI为开发者和用户提供了一个统一Deamon进程参数配置接口。其实，UCI可以理解为OpenWrt采用类似面向对象的方法，为配置文件提供了一些列“getter/setter”方法，当然不限于此。个人觉得UCI系统是一个非常“OpenWrt”的东西，简直就是无条件的贯彻了让一切变得简单，让一切变得方便的宗旨。不过，按照UCI规范开发的OpenWrt软件或者插件并不多，目前只有一些核心服务实现了对UCI的兼容，毕竟在能用性之外再附件一层易用性的东西，还是需要码农下田出力的。
## 0x02：基于虚拟化环境安装OpenWrt
我个人安装OpenWrt的动因不是为了刷路由，也不只是倒腾机器人，就是想倒腾OpenWrt，并且尝试着从操作系统和网络安全的角度去了解这个小众的Linux发行版。那么，我在选择安装OpenWrt时，首要考虑的自然就是花最少的时间把它跑起来，至于Arm，Arm64，x86，x86_64还是MIPS这些都不是我关心的。当然，在尝试安装OpenWrt的过程中，还是体验了一下在qemu上跑基于Arm架构的OpenWrt，感受很拧巴，主要还是自己不熟悉qemu。在安装过程中，我实验了Parallels，qemu和VMWare
Workstations/Fusion四种种虚拟化环境，具体安装的情况如下（仅仅是个人安装的总结，所以仅供参考）。
###  1）虚拟机配置：
硬件配置：  
——CPU：1*2  
——内存：1024MB  
——硬盘：8GB  
——网卡：桥接模式(eth0)，仅主机模式(eth1)
OpenWrt版本  
——OpenWrt 19.07.8, r11364-ef56c85848
**a）Windows主机**
**b）MacOS主机（M1，Intel）**
###  2）通过虚拟磁盘转化在VMWare Workstations及VMWare Fusion(x86)运行OpenWrt
通过这种方法运行OpenWrt对于绝大多数人来说可能要容易接受一些，而且有虚拟化软件提供的GUI的加持，运行OpenWrt的感受要比qemu好。这种方法是利用qemu提供的qemu-img程序将OpenWrt提供的raw格式的磁盘文件转换为vmdk格式，这样在配置好OpenWrt的虚拟机后指定硬盘为转换后得到的vmdk文件即可。这种方法适用于Windows
PC上的VMWare Workstations以及MacOS（Intel）上的VMWare
Fusion，不得不服VMWare强大的软件开发能力和强悍的兼容性。
接下来，我们将以OpenWrt v19.07.8版本为例（经过实测，也适用于最新的v21版本），首先是进行镜像文件的格式转换：
`qemu-img convert -f raw openwrt.img -O vmdk openwrt.vmdk`
然后，用生成的vmdk磁盘文件作为OpenWrt虚拟机的磁盘文件，直接启动虚拟机就OK了，这应该是Windows上基于VMWare
Workstations运行OpenWrt最简单的方法了吧。
当然，也适用于MacOS（Intel）上的VMWare Fusion。