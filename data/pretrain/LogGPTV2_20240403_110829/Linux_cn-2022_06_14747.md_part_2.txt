我（稍微）研究了一下这个 DNS 服务是怎么搭建起来的。
以下所有命令都是在容器外执行的，因为我没有在容器里安装很多网络工具。
**第一步：**：使用 `ps aux | grep puma`，获取 Rails 服务的进程 ID。
找到了，它是 `1837916`！简单～
**第二步：**：找到和 `1837916` 运行在同一个网络命名空间的 UDP 服务。
我使用了 `nsenter` 来在 `puma` 进程的网络命令空间内运行 `netstat`（理论上，我猜想你也可以使用 `netstat -tupn` 来只显示 UDP 服务，但此时，我的手指头只习惯于打出 `netstat -tulpn`）。
```
$ sudo nsenter -n -t 1837916 netstat -tulpn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.11:32847        0.0.0.0:*               LISTEN      1333/dockerd
tcp        0      0 0.0.0.0:3000            0.0.0.0:*               LISTEN      1837916/puma 4.3.7
udp        0      0 127.0.0.11:59426        0.0.0.0:*                           1333/dockerd
```
我们可以看到，此时有一个运行在 `59426` 端口的 UDP 服务，它是由 `dockerd` 运行的！或许它就是我们要找的 DNS 服务？
**第三步**：确定它是不是我们要找的 DNS 服务
我们可以使用 `dig` 工具来向它发送一个 DNS 查询：
```
$ sudo nsenter -n -t 1837916 dig +short @127.0.0.11 59426 rails_server
172.18.0.2
```
奇怪，我们之前运行 `dig` 的时候，DNS 查询怎么没有发送到 `59426` 端口，而是发送到了 `53` 端口呢？这到底是怎么回事呀？
**第四步**：iptables
对于类似“这个服务似乎正运行在 X 端口上，但我却在 Y 端口上访问到了它，这是什么回事呢？”的问题，我的第一念头都是“一定是 iptables 在作怪”。
于是，我在运行了容器的网络命令空间内执行 `iptables-save`，果不其然，真相大白：
```
$ sudo nsenter -n -t 1837916 iptables-save
.... redacted a bunch of output ....
-A DOCKER_POSTROUTING -s 127.0.0.11/32 -p udp -m udp --sport 59426 -j SNAT --to-source :53
COMMIT
```
在输出中有一条 iptables 规则，它将 `53` 端口的流量发送到了 `59426` 上。哈哈，真有意思！
### 数据库文件储存在一个临时目录中
这样做有一个好处：我可以直接挂载 Postgres 容器的数据目录 `./tmp/db`，而无需在我的笔记本电脑上管理 Postgres 环境。
我很喜欢这种方式，因为我真的不想在笔记本电脑上独自管理一个 Postgres 环境（我也真的不知道该如何配置 Postgres）。另外，出于习惯，我更喜欢让开发环境的数据库和代码放在同一个目录下。
### 仅需一行命令，我就可以访问 Rails 控制台
管理 Ruby 的版本总是有点棘手，并且，即使我暂时搞定了它，我也总是有点担心自己会把 Ruby 环境搞坏，然后就要修它个十年（夸张）。
（使用 Docker Compose）搭建好这个开发环境后，如果我需要访问 Rails  控制台   console （一个交互式环境，加载了所有我的 Rails 代码），我只需要运行一行代码即可：
```
$ docker-compose exec rails_server rails console
Running via Spring preloader in process 597
Loading development environment (Rails 6.0.3.4)
irb(main):001:0>
```
好耶！
### 小问题：Rails 控制台的历史记录丢失了
我碰到了一个问题：Rails 控制台的历史记录丢失了，因为我一直在不断地重启它。
不过，我也找到了一个相当简单的解决方案（嘿嘿）：我往容器中添加了一个 `/root/.irbrc` 文件，它能够把 IRB 历史记录文件的保存位置指向一个不受容器重启影响的地方。只需要一行代码就够啦：
```
IRB.conf[:HISTORY_FILE] = "/app/tmp/irb_history"
```
### 我还是不知道它在生产环境的表现如何
到目前为止，这个项目的生产环境搭建进度，还停留在“我制作了一个 DigitalOcean droplet（LCCT 译注：一种 Linux 虚拟机服务），并手工编辑了很多文件”的阶段。
嗯……我相信以后会在生产环境中使用 docker-compose 来运行一下它的。我猜它能够正常工作，因为这个服务很可能最多只有两个用户在使用，并且，如果我愿意，我可以容忍它在部署过程中有 60 秒的不可用时间。不过话又说回来，出错的往往是我想不到的地方。
推特网友提供了一些在生产中使用 docker-compose 的注意事项：
* `docker-compose up` 只会重启那些需要重启的容器，这会让重启速度更快。
* 有一个 Bash 小脚本 [wait-for-it](https://github.com/vishnubob/wait-for-it)，你可以用它来保持等待一个容器，直到另一个容器的服务可用。
* 你可以准备两份 `docker-compose.yaml` 文件：用于开发环境的 `docker-compose.yaml` 和用于生产环境的 `docker-compose-prod.yaml`。我想我会在分别为 Nginx 指定不同的端口：开发时使用 `8999`，生产中使用 `80`。
* 人们似乎一致认为，如果你的项目是一台计算机上运行的小网站，那么 docker-compose 在生产中不会有问题。
* 有个人建议说，如果愿意在生产环境搭建复杂那么一丢丢，Docker Swarm 就或许会是更好的选择，不过我还没试过（当然，如果要这么说的话，干嘛不用 Kubernetes 呢？Docker Compose 的意义就是它超级简单，而 Kubernetes 肯定不简单 : )）。
Docker 似乎还有一个特性，它能够 [把你用 docker-compose 搭建的环境，自动推送到弹性容器服务（ESC）上](https://docs.docker.com/cloud/ecs-integration/)，听上去好酷的样子，但是我还没有试过。
### docker-compose 会有不适用的场景吗
我听说 docker-compose 在以下场景的表现较差：
* 当你有很多微服务的时候（还是自己搭建比较好）
* 当你尝试从一个很大的数据库中导入数据时（就像把几百 G 的数据存到每个人的笔记本电脑里一样）
* 当你在 Mac 电脑上运行 Docker 时。我听说 Docker 在 macOS 上比在 Linux 上要慢很多（我猜想是因为它需要做额外的虚拟化）。我没有 Mac 电脑，所以我还没有碰到这个问题。
### 以上就是全部内容啦！
在此之前，我曾花了一整天时间，尝试使用 Puppet 来配置 Vagrant 虚拟机，然后在这个虚拟机里配置开发环境。结果，我发现虚拟机启动起来实在是有点慢啊，还有就是，我也不喜欢编写 Puppet 配置（哈哈，没想到吧）。
幸好，我尝试了 Docker Compose，它真好简单，马上就可以开始工作啦！
---
via: 
作者：[Julia Evans](https://jvns.ca/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[lkxed](https://github.com/lkxed) 校对：[turbokernel](https://github.com/turbokernel)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出