3.1.12 Windows 内核漏洞利用
参考资料
参考资料
HackSys Extreme Vulnerable Driver
windows-kernel-exploits
563
3.1.13 竞争条件
3.1.13 竞争条件
564
3.1.14 虚拟机逃逸
3.1.14 虚拟机逃逸
565
3.2.1 patch 二进制文件
3.2.1 patch 二进制文件
什么是 patch
手工 patch
使用工具 patch
什么是 patch
许多时候，我们不能获得程序源码，只能直接对二进制文件进行修改，这就是所谓
的 patch，你可以使用十六进制编辑器直接修改文件的字节，也可以利用一些半自
动化的工具。
patch 有很多种形式：
patch 二进制文件（程序或库）
在内存里 patch（利用调试器）
预加载库替换原库文件中的函数
triggers（hook 然后在运行时 patch）
手工 patch
手工 patch 自然会比较麻烦，但能让我们更好地理解一个二进制文件的构成，以及
程序的链接和加载。有许多工具可以做到这一点，比如 xxd、dd、gdb、radare2 等
等。
xxd
566
3.2.1 patch 二进制文件
$ echo 01: 01 02 03 04 05 06 07 08 | xxd -r - output
$ xxd -g1 output
00000000: 00 01 02 03 04 05 06 07 08 .....
....
$ echo 04: 41 42 43 44 | xxd -r - output
$ xxd -g1 output
00000000: 00 01 02 03 41 42 43 44 08 ....A
BCD.
参数 -r 用于将 hexdump 转换成 binary。这里我们先创建一个 binary，然后将将
其中几个字节改掉。
radare2
一个简单的例子：
#include
void main() {
printf("hello");
puts("world");
}
$ gcc -no-pie patch.c
$ ./a.out
helloworld
下面通过计算函数偏移，我们将 printf 换成 puts ：
567
3.2.1 patch 二进制文件
[0x004004e0]> pdf @ main
;-- main:
/ (fcn) sym.main 36
| sym.main ();
| ; DATA XREF from 0x004004fd (entry0)
| 0x004005ca 55 push rbp
| 0x004005cb 4889e5 mov rbp, rsp
| 0x004005ce 488d3d9f0000. lea rdi, str.hello
; 0x400674 ; "hello"
| 0x004005d5 b800000000 mov eax, 0
| 0x004005da e8f1feffff call sym.imp.printf
; int printf(const char *format)
| 0x004005df 488d3d940000. lea rdi, str.world
; 0x40067a ; "world"
| 0x004005e6 e8d5feffff call sym.imp.puts
; sym.imp.printf-0x10 ; int printf(const char *format)
| 0x004005eb 90 nop
| 0x004005ec 5d pop rbp
\ 0x004005ed c3 ret
地址 0x004005da 处的语句是 call sym.imp.printf ，其中机器码 e8 代表
call ，所以 sym.imp.printf 的偏移是 0xfffffef1 。地址 0x004005e6
处的语句是 call sym.imp.puts ， sym.imp.puts 的偏移是 0xfffffed5 。
接下来找到两个函数的 plt 地址：
[0x004004e0]> is~printf
vaddr=0x004004d0 paddr=0x000004d0 ord=003 fwd=NONE sz=16 bind=GL
OBAL type=FUNC name=imp.printf
[0x004004e0]> is~puts
vaddr=0x004004c0 paddr=0x000004c0 ord=002 fwd=NONE sz=16 bind=GL
OBAL type=FUNC name=imp.puts
计算相对位置：
[0x004004e0]> ?v 0x004004d0-0x004004c0
0x10
568
3.2.1 patch 二进制文件
所以要想将 printf 替换为 puts ，只要替换成 0xfffffef1 -0x10 =
0xfffffee1 就可以了。
[0x004004e0]> s 0x004005da
[0x004005da]> wx e8e1feffff
[0x004005da]> pd 1
| 0x004005da e8e1feffff call sym.imp.puts
; sym.imp.printf-0x10 ; int printf(const char *format)
搞定。
$ ./a.out
hello
world
当然还可以将这一过程更加简化，直接输入汇编，其他的事情 r2 会帮你搞定：
[0x004005da]> wa call 0x004004c0
Written 5 bytes (call 0x004004c0) = wx e8e1feffff
[0x004005da]> wa call sym.imp.puts
Written 5 bytes (call sym.imp.puts) = wx e8e1feffff
使用工具 patch
patchkit
patchkit 可以让我们通过 Python 脚本来 patch ELF 二进制文件。
569
3.2.2 脱壳技术（PE）
3.2.2 脱壳技术（PE）
570
3.2.3 脱壳技术(ELF)
3.2.3 脱壳技术(ELF)
571
3.2.4 反调试技术（PE）
3.2.4 反调试技术
什么是反调试
反调试技术
参考资料
什么是反调试
反调试是一种重要的软件保护技术，特别是在各种游戏保护中被尤其重视。另外，
恶意代码往往也会利用反调试来对抗安全分析。当程序意识到自己可能处于调试中
的时候，可能会改变正常的执行路径或者修改自身程序让自己崩溃，从而增加调试
时间和复杂度。
反调试技术
下面先介绍几种 Windows 下的反调试方法。
函数检测
函数检测就是通过 Windows 自带的公开或未公开的函数直接检测程序是否处于调
试状态。最简单的调试器检测函数是 IsDebuggerPresent() ：
BOOL WINAPI IsDebuggerPresent(void);
该函数查询进程环境块（PEB）中的 BeingDebugged 标志，如果进程处在调试
上下文中，则返回一个非零值，否则返回零。
示例：
BOOL CheckDebug()
{
return IsDebuggerPresent();
}
572
3.2.4 反调试技术（PE）
CheckRemoteDebuggerPresent() 用于检测一个远程进程是否处于调试状态：
BOOL WINAPI CheckRemoteDebuggerPresent(
_In_ HANDLE hProcess,
_Inout_ PBOOL pbDebuggerPresent
);
如果 hProcess 句柄表示的进程处于调试上下文，则设置 pbDebuggerPresent
变量被设置为 TRUE ，否则被设置为 FALSE 。
BOOL CheckDebug()
{
BOOL ret;
CheckRemoteDebuggerPresent(GetCurrentProcess(), &ret);
return ret;
}
NtQueryInformationProcess 用于获取给定进程的信息：
NTSTATUS WINAPI NtQueryInformationProcess(
_In_ HANDLE ProcessHandle,
_In_ PROCESSINFOCLASS ProcessInformationClass,
_Out_ PVOID ProcessInformation,
_In_ ULONG ProcessInformationLength,
_Out_opt_ PULONG ReturnLength
);
第二个参数 ProcessInformationClass 给定了需要查询的进程信息类型。当给
定值为 0 （ ProcessBasicInformation ）或 7 （ ProcessDebugPort ）
时，就能得到相关调试信息，返回信息会写到第三个参数 ProcessInformation
指向的缓冲区中。
示例：
573
3.2.4 反调试技术（PE）
BOOL CheckDebug()
{
DWORD dbgport = 0;
HMODULE hModule = LoadLibrary("Ntdll.dll");
NtQueryInformationProcessPtr NtQueryInformationProcess = (Nt
QueryInformationProcessPtr)GetProcAddress(hModule, "NtQueryInfor
mationProcess");
NtQueryInformationProcess(GetCurrentProcess(), 7, &dbgPort,
sizeof(dbgPort), NULL);
return dbgPort != 0;
}
数据检测
数据检测是指程序通过测试一些与调试相关的关键位置的数据来判断是否处于调试
状态。比如上面所说的 PEB 中的 BeingDebugged 参数。数据检测就是直接定位
到这些数据地址并测试其中的数据，从而避免调用函数，使程序的行为更加隐蔽。
示例：
BOOL CheckDebug()
{
int BeingDebug = 0;
__asm
{
mov eax, dword ptr fs:[30h] ; 指向PEB基地址
mov eax, dword ptr [eax+030h]
movzx eax, byte ptr [eax+2]
mov BeingDebug, eax
}
return BeingDebug != 0;
}
由于调试器中启动的进程与正常启动的进程创建堆的方式有些不同，系统使用 PEB
结构偏移量 0x68 处的一个未公开的位置，来决定如果创建堆结构。如果这个位置
上的值为 0x70 ，则进程处于调试器中。
示例：
574
3.2.4 反调试技术（PE）
BOOL CheckDebug()
{
int BeingDbg = 0;
__asm
{
mov eax, dword ptr fs:[30h]
mov eax, dword ptr [eax + 68h]
and eax, 0x70
mov BeingDbg, eax
}
return BeingDbg != 0;
}
符号检测
符号检测主要针对一些使用了驱动的调试器或监视器，这类调试器在启动后会创建
相应的驱动链接符号，以用于应用层与其驱动的通信。但由于这些符号一般都比较
固定，所以就可以通过这些符号来确定是否存在相应的调试软件。
示例：
BOOL CheckDebug()
{
HANDLE hDevice = CreateFileA("\\\\.\\PROCEXP153", GENERIC_RE
AD, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
if (hDevice)
{
return 0;
}
}
窗口检测
窗口检测通过检测当前桌面中是否存在特定的调试窗口来判断是否存在调试器，但
不能判断该调试器是否正在调试该程序。
示例：
575
3.2.4 反调试技术（PE）
BOOL CheckDebug()
{
if (FindWindowA("OllyDbg", 0))
{
return 0;
}
return 1;
}
特征码检测
特征码检测枚举当前正在运行的进程，并在进程的内存空间中搜索特定调试器的代
码片段。
例如 OllyDbg 有这样一段特征码：
0x41, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74, 0x00,
0x20, 0x00, 0x4f, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x79, 0x00,
0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x00, 0x00, 0x4f, 0x00,
0x4b, 0x00, 0x00, 0x00
示例：
576
3.2.4 反调试技术（PE）
BOOL CheckDebug()
{
BYTE sign[] = {0x41, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00
, 0x74, 0x00,
0x20, 0x00, 0x4f, 0x00, 0x6c, 0x00, 0x6c, 0x00,
0x79, 0x00,
0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x00, 0x00,
0x4f, 0x00,
0x4b, 0x00, 0x00, 0x00;}
PROCESSENTRY32 sentry32 = {0};
sentry32.dwSize = sizeof(sentry32);
HANDLE phsnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,
0);
Process32First(phsnap, &sentry32);
do{
HANDLE hps = OpenProcess(MAXIMUM_ALLOWED, FALSE, sentry3
2.th32ProcessID);
if (hps != 0)
{
DWORD szReaded = 0;
BYTE signRemote[sizeof(sign)];
ReadProcessMemory(hps, (LPCVOID)0x4f632a, signRemote
, sizeof(signRemote), &szReaded);
if (szReaded > 0)
{
if (memcmp(sign, signRemote, sizeof(sign)) == 0)
{
CloseHandle(phsnap);
return 0;
}
}
}
}