以使用哪些方法来访问执行计划。
如何访问执行计划
Microsof SQLServer和Oracle都提供了不同的系统函数和过程，允许与执行计划进行交
互访问。MySQL和PostgreSQL则没有提供直接访间存储的执行计划的方法。表10-4列出了可
以用于收集缓存的执行计划的数据库视图。
表10-4RDBMS数据库提供的视图，用于访问存储的执行计划
数据库
缓存的语句类型
默认是否启用
访问方法
Microsoff SQL Server
即席查询（adhoc）和预处
启用
sys.dm_exee_query_stats
理语句(prparod sta
sys.dm_exee_sql_text
即席查询（ad boc）和预处
Oracle
理语句
启用
gvSsql
MySQL
预处理语句
不启用
没有直接访问方法，使用普通的日
志查询
PostgreSQL
预处理语句
不启用
没有直接访问方法，使用普通的日
志查询
下面是一些实例，说明了如何使用表10-4中列出的视图来访问缓存的执行计划。
Microsoft SQL Server
在 Microsof SQL Server 中可以使用两个视图来访间执行计划缓存：sys.dm_exec_query_
stats 和 sys.dm_excc_sql_text。前者提供了执行的信息，后者提供了实际执行的语法。下面的查
询使用视图返回了执行计划缓存条目创建的日期和时间、最后一次执行的时间（在重复执行的
情况下）、执行的语法和执行计划被重用的次数（如图10-1所示）：
select creation_time, last_execution_time, text, execution_count from
sys ,dm_exec_query_stats qs CROSS APPLY sys.dm_exec_sql_text (qs,sql_handle)
365
---
## Page 380
SQL注入攻击与防御（第2版）
oeation_ino
ladt_oeoution_ine
2012-01-16 22:1537.9272012-01-16 22:16:37.303
ted
201201-16 22:16:46.293
201201-16 22:17:23.337
select *fom ay.aycokmns
2012-01-16 22:16:12.163
2012-01-16 22:16:12.227
sgp g,pt
/
2012-01-16 22:15:38.397
2012-01-16 22.16.37.333
SELECT dbname AS Namel db daabeme_id AS βO], CASTicase when
1
2012-01-16 22:15:55.947
2012-01-16 22:16:50.823
2012-01-16 22:16:18.600
2012-01-16 22:16:18.677
seled “from tys.aylogint
2012-01-16 22:17:11.730
2012-01-16 22:17:11.807
seiecdt *from ays ayscoumns where name lke %cedt'%card
201201-16 22:16:16.5832012-01-16 22:16:16.630eed *fom tp.al_objirds
图10-1Microsoft SQLServer 执行计划中的查询结果示例
Oracle
在Oracle中可以使用GVSSQL视图来返回执行计划。请注意，GVSSQL是全局视图（global
view)，当在Oracle集群上运行该视图时，它可以从集群服务器上收集缓存的执行计划：当在
独立安装的Oracle上执行该视图时，它可以获取完整的执行计划缓存。对于V$SQL视图，当
在Oracle集群上运行该视图时，只能提供有限的结果，因此比起V$SQL视图，使用全局视图
GVSSQL是更好的选择。下面是一个如何使用GVSSQL视图的例子：
select sql_text from gv$sql;
该例的结果如下所示：
+**
select inst_id, kmmsinam, kmmsiprp, kmmsista, kmmsinmg, kmm. . -
UPDATE MGXT_TARGETS SET LAST_LOAD_TIME=:B2 WHERE TARGET. .
UPDATE MGMT_TARGETS SET LAST_LOAD_TIME=:B2 WHERE TARGET..
UPDATE MGMT_TARGETS SET LAST_LOAD_TIME=:B2 WHERE TARGET.. 
UPDATE MGMT_TARGETS SET LAST_LOAD_TIME=:B2 WHERE TARGET.. .
UPDATE MGMT_TARGETS SET LAST_LOAD_TIME=:B2 WHERE_ TARGET...
UPDATE MGMT_TARGETS SET LAST_LOAD_TIME=:B2 WHERE TARGET. . *
SELECT ROWID FROM EMDW_TRACE_DATA WHERE LOG_TIMESTAMP <..*
select /*+ no_parallel_index (t, "WRMs_SCH_VOTES_PK")
select /*+ no_paralle1_index (t, *WRM$_SCH_VoTES_PK") -*.
MySQL
MySQL会生成和存储执行计划，但MySQL的厂商没有提供专门开发用于访问执行计划
中存储的实际查询的功能。MySQL维护着一个查询日志，它以人类可读的格式记录了所执行
的查询。默认情况下，MySQL并未启用通用查询日志（general querylog)，在调查期间，可以在
数据库客户端使用showvariables命令来查看查询日志的状态，比如下面的例子：
show variables like *ageneral_logg*
下面是执行showvariables命令的结果示例，它说明通用日志已经启用，并写入到服务器
上的 C:IGQLogrz-mysql.log 目录：
C:\GQLog\rz-mysql.1og′ directory on the server:
Variable_name
1Value
general_log
1ON
366
---
## Page 381
第10章确认井从SQL注入攻击中恢复
general_log_file
1 C:\GQLog\rz-mysql . 1og
下面列出了日志中的一个片段，其中记录了一条SQL注入攻击语句：
120116 22:33:16 4 Query
CREATE DATABASE RingO_db
1  Query
4 Query
SHOW KARNINGS
120116 22:33:20 1 Query
120116 22:33:24 1 Query
show global status
4 Query
120116 22:33:27 1 Query
snsene teqotb moue
120116 22:33:30 4 Query
select * from mysql.user
120116 22:33:31 1 Query
LIMIT 0, 1000
show global status
120116 22:33:33 4 Query
select * from information_schema.routines
LIMIT 0, 1000
12011.6 22:33:34 1 Query
snsene teqotb nou
120116 22:33:36 4 Query
select * from information_schema.PROCESSLIST
LIMIT 0, 1000
120116 22:33:38 1 Query
120116 22:33:39 4 Query
select * from information_schema.tables
***
PostgreSQL
与 MySQL类似，对于之前在PostgreSQL上执行的查询，PostgreSQL 也没有查看存储的
执行计划的原生方法。但是当启用了log_statement时，它将存储已执行SQL查询的记录。可
以使用下面的查询来判断服务器上的log_statement 值是否已经启用，如果已经启用，可以看到
日志的位置：
select name, setting from pg_settings where name IN (*log_statement',
‘log_directory', 'log_filename′)
从下面的结果示例中，可以看到日志存储在默认的pg_log目录中，它位于PostgreSQL目
录结构内，并且使用了默认的命名规范：
Name
ISetting
Log_directory I pg_log
Log_fi1ename 1postgresq1-$Y-im-$dtn%xts.1og
Log_statement I mod
log_statement存在4种可能的值—one、ddl、mod和all。要想记录足够的查询信息，这
一般有利于调查取证，要求将log_statement 的值设置为 mod或all。可以在文本编辑器或 MS
Excel中查看日志，可以看到之前执行的查询的一个列表，比如下面的示例结果：
2012-01-16 23:14:40 EST STATEMENT: select * from P9_trigger
select * from pg_tables
select * from pg_user
select * from pg_database
367
---
## Page 382
SQL注入攻击与防御（第2版）
select pg_read_file ('pg_1og^postgresq1-2012-01-14_103156.1og′, 0, 200000) ;
虽然在执行调查取证期间，执行计划是有利的工具，但它也存在一定的局限，理解执行计
划的局限性也是非常重要的。
执行计划的局限
虽然在调查取证时，分析执行计划是必不可少的，但数据库的执行计划也有一些局限性，
这影响到它们在调查取证过程中的作用。在PostgreSQL和MySQL中，执行计划默认是被禁用
的。除此之外，具有足够权限的攻击者还可以禁用执行计划。Microsof SQL Server和Oracle
不允许禁用执行计划，但是执行计划受到本地RDBMS回收策略的支配，使用特殊的RDBMS
函数可以将执行计划清洗掉。
缓存回收策略：可以控制执行计划缓存的存储容量。RDBMS会根据多个因素来清除缓存
的条目，其中最值得注意的一些因素是：
·数据库服务器的CPU和内存负载
·执行计划重用的频率
·缓存执行计划中引用的对象发生了改变
·重启数据库服务
尽管定义了回收策略，但某些RDBMS实际上将延长保留SQL注入攻击的执行计划一段
时间。Microsof SQL Server 就是其中一个例子，它将把使用了诸如WAITFOR、IN、UNION
语句和比较操作符（比如1-1）的查询分类为复合语句。复合语句要求Microsoft SQLServer进行
额外的处理，以创建与之关联的执行计划并保留这些执行计划更长的时间，进而避免重新创建
这些复合执行计划。Oracle、MySQL和PostgreSQL则不支持缓存复合执行计划。
要查阅影响缓存执行计划因素的列表，请参考数据库厂商的说明文档，当你准备执行一次
调查时，请确保熟悉这些影响缓存执行计划的因素。
手工清洗缓存：具有管理员权限的用户可以使用手工方式清洗数据库的执行计划缓存。在
MicrosofSQLServer中，可以清洗掉特定的执行计划缓存和特定的缓存条目，但在Oracle中
却缺乏这些精细的控制粒度，只允许将缓存的执行计划作为整体清除。对于可以清除执行计划
缓存的函数，请参考具体数据库的厂商文档。
执行计划的另外一个局限性是参数化。在第8章中曾经介绍过，使用参数化的查询有助于
避免SQL注入攻击漏洞。在RDBMS 中，参数化采用另外一个上下文(context)，它是在执行计
划中使用变量来替换字面值的处理过程。采用参数化处理可以提高RDBMS重用缓存计划的机
会，以便将来遇到同样的查询时可以更快地执行。下面是一个参数化查询的例子：
select EmployeeID, FName, LName, YOB from SSFA.Employee where
[fname]= 'mike*
数据库服务器可以按照我们看到的原始格式缓存上面的查询语句，或者将其参数化，从而
缓存下面的参数化查询，它将取代原来执行的查询：
(1  varchaz (800O) ) SELECT [EmployeeID] , [FName] , [LName] , [YOB] FROM
[SSFA] . [Employee]  WHERE [fname] =81
368
---
## Page 383
第10章确认并从SQL注入攻击中恢复
在执行计划中，由于RDBMS可以使用变量来替换SQL注入攻击的有效载荷，因此参数
化增加了调查取证的复杂程度。并没有公开发布的方法可以将变量转换回原始的字面值，这降
低了调查取证期间参数化的执行计划的使用价值。在这些情况下，如果知道攻击活动在某个数
据库对象内发生的日期、时间，就可以采用基于事件的时间线方法进行调查。
缓存的执行计划可以勾画出在服务器上执行的语句，但却无法用于执行该计划的用户上下
文(context)。将分析执行计划缓存与分析事务日志结合起来，可以指引正确的方向。
3.事务日志
SQL语言由一些子元素组成，比如子句、查询和语句。语句则包含了一个或多个数据库操
作。数据库操作又分为两个主要的类别：一是数据操作语言(DataManipulationLanguage，DML)，
二是数据定义语言(Data Definition Language，DDL)。DML 作用于表内的数据：而 DDL则作用
于数据库的结构，比如创建新表。
事务日志（transactionlog）用于记录这样的事实：事务开始发生及恢复所需的信息。万一数
据库服务器将信息写入硬盘失败，数据库服务器就可以使用这些恢复信息将数据回退到某个一
致的状态。
将数据写入实际的数据页（data page)并不是实时发生的。在预定义的时间间隔之后，事务
日志中的信息才会应用于硬盘，这等同于数据的写入操作，但却提高了总体的性能。这听起来
很复杂，但与RDBMS在巨大的数据库文件中寻道并在恰当区域中写入信息相比，写入事务日