practices in such systems. In particular, we were curious
whether the system uses authentication, input validation,
or (cid:2)ltering mechanisms to reject suspicious packets.
The packet spoo(cid:2)ng system. Our live eavesdrop-
per can detect TPMS transmission and decode both ASK
modulated TPS-A messages and FSK modulated TPS-
B messages in real time. Our packet spoo(cid:2)ng system is
built on top of our live eavesdropper, as shown in Fig-
ure 12. The Packet Generator takes two sets of parame-
ters (cid:151)sensor type and sensor ID from the eavesdropper;
temperature, pressure, and status (cid:3)ags from users(cid:151)and
generates a properly formulated message. It then modu-
lates the message at baseband (using ASK or FSK) while
inserting the proper preamble. Finally, the rogue sensor
packets are upconverted and transmitted (either contin-
uously or just once) at the desired frequency (315/433
MHz) using a customized GNU radio python script. We
note that once the sensor ID and sensor type are captured
we can create and repeatedly transmit the forged message
at a pre-de(cid:2)ned period.
At the time of our experimentation, there were no
USRP daughterboards available that were capable of
transmitting at 315/433 MHz. So, we used a frequency
mixing approach where we leveraged two XCVR2450
daughterboards and a frequency mixer (mini-circuits
ZLW11H) as depicted in Fig.10. By transmitting a tone
out of one XCVR2450 into the LO port of the mixer,
we were able to mix down the spoofed packet from the
other XCVR2450 to the appropriate frequency. For 315
MHz, we used a tone at 5.0 GHz and the spoofed packet
at 5.315 GHz.1
To validate our system, we decoded spoofed packets
with the TPMS trigger tool. Figure 13 shows a screen
snapshot of the ATEQ VT55 after receiving a spoofed
packet with a sensor ID of (cid:147)DEADBEEF(cid:148) and a tire pres-
sure of 0 PSI. This testing also allowed us to understand
the meaning of remaining status (cid:3)ags in the protocol.
5.1 Exploring Vehicle Security
We next used this setup to send various forged packets
to a car using TPS-A sensors (belonging to one of the
1For 433 MHz, the spoofed packet was transmitted at 5.433 GHz.
We have also successfully conducted the experiment using two RFX-
1800 daughterboards, whose operational frequencies are from 1.5 GHz
to 2.1 GHz.
10
Eavesdropper
Sensor
ID
Sensor
Type
Packet
Generator
GnuRadio
USRP Tx
Figure 12: Block chart of the packet spoo(cid:2)ng system.
authors) at a rate of 40 packets per second. We made the
following observations.
No authentication. The vehicle ECU ignores packets
with a sensor ID that does not match one of the known
IDs of its tires, but appears to accept all other packets.
For example, we transmitted forged packets with the ID
of the left front tire and a pressure of 0 PSI and found 0
PSI immediately re(cid:3)ected on the dashboard tire pressure
display. By transmitting messages with the alert bit set
we were able to immediately illuminate the low-pressure
warning light2, and with about 2 seconds delay the ve-
hicle’s general-information warning light, as shown in
Figure 14.
No input validation and weak (cid:2)ltering. We forged
packets at a rate of 40 packets per second. Neither this
increased rate, nor the occasional different reports by
the real tire pressure sensor seemed to raise any suspi-
cion in the ECU or any alert that something was wrong.
The dashboard simply displayed the spoofed tire pres-
sure. We next transmitted two packets with very differ-
ent pressure values alternately at a rate of 40 packets per
second. The dashboard display appeared to randomly
alternate between these values. Similarly, when alter-
nating between packets with and without the alert (cid:3)ag,
we observed the warning lights switched on and off at
non-deterministic time intervals. Occasionally, the dis-
play seemed to freeze on one value. These observations
suggest that TPMS ECU employs trivial (cid:2)ltering mecha-
nisms which can be easily confused by spoofed packets.
the illumination of the low-pressure
warning light depends only on the alert bit(cid:151)the light
turns on even if the rest of the message reports a nor-
mal tire pressure of 32 PSI! This further illustrates that
the ECU does not appear to use any input validation.
Interestingly,
Large range of attacks. We (cid:2)rst investigated the
effectiveness of packet spoo(cid:2)ng when vehicles are sta-
tionary. We measured the attack range when the packet
spoo(cid:2)ng system was angled towards the head of the car,
and we observed a packet spoo(cid:2)ng range of 38 meters.
For the purpose of proving the concept, we only used
low-cost antennas and radio devices in our experiments.
We believe that the range of packet spoo(cid:2)ng can be
greatly expanded by applying ampli(cid:2)ers, high-gain an-
tennas, or antenna arrays.
2To discover this bit we had to de(cid:3)ate one tire and observe the tire
pressure sensors response. Simply setting a low pressure bit or report-
ing low pressure values did not trigger any alert in the vehicle.
Feasibility of Inter-Vehicle Spoo(cid:2)ng. We deployed
the attacks against willing participants on highway I-26
to determine if they are viable at high speeds. Two cars
owned by the authors were involved in the experiment.
The victim car had TPS-A sensors installed and the at-
tacker’s car was equipped with our packet spoo(cid:2)ng sys-
tem. Throughout our experiment, we transmitted alert
packets using the front-left-tire ID of the target car, while
the victim car was traveling to the right of the attacker’s
car. We observed that the attacker was able to trigger
both the low-pressure warning light and the car’s central-
warning light on the victim’s car when traveling at 55
km/h and 110 km/h, respectively. Additionally, the low-
pressure-warning light illuminated immediately after the
attacker entered the packet spoo(cid:2)ng range.
5.2 Exploring the Logic of ECU Filtering
Forging a TPMS packet and transmitting it at a high rate
of 40 packets per second was useful to validate packet
spoo(cid:2)ng attacks and to gauge the spoo(cid:2)ng range. Be-
yond this, though, it was unclear whether there were fur-
ther vulnerabilities in the ECU logic. To characterize the
logic of the ECU (cid:2)ltering mechanisms, we designed a
variety of spoo(cid:2)ng attacks. The key questions to be an-
swered include: (1) what is the minimum requirement to
trigger the TPMS warning light once, (2) what is the min-
imum requirement to keep the TPMS warning light on
for an extended amount of time, and (3) can we perma-
nently illuminate any warning light even after stopping
the spoo(cid:2)ng attack?
So far, we have observed two levels of warning lights:
TPMS Low-Pressure Warning light (TPMS-LPW) and
the vehicle’s general-information warning light illustrat-
ing ‘Check Tire Pressure’. In this section, we explored
the logic of (cid:2)ltering strategies related to the TPMS-
LPW light in detail. The logic controlling the vehicle’s
general-information warning light can be explored in a
similar manner.
5.2.1 Triggering the TPMS-LPW Light
To understand the minimum requirement of triggering
the TPMS-LPW light, we started with transmitting one
spoofed packet with the rear-left-tire ID and eavesdrop-
ping the entire transmission. We observed that (1) one
spoofed packet was not suf(cid:2)cient to trigger the TPMS-
LPW light; and (2) as a response to this packet, the
TPMS ECU immediately sent two activation signals
through the antenna mounted close to the rear left tire,
causing the rear left sensor to transmit eight packets.
Hence, although a single spoofed packet does not cause
the ECU to display any warning, it does open a vulnera-
bility to battery drain attacks.
11
Figure 13: The TPMS trigger tool dis-
plays the spoofed packet with the sen-
sor ID (cid:147)DEADBEEF(cid:148). We crossed out
the brand of TP sensors to avoid legal
issues.
Figure 14: Dash panel snapshots: (a) the tire pressure of left front tire displayed
as 0 PSI and the low tire pressure warning light was illuminated immediately after
sending spoofed alert packets with 0 PSI; (b) the car computer turned on the general
warning light around 2 seconds after keeping sending spoofed packets.
(a)
(b)
Next, we gradually increased the number of spoofed
packets, and we found that transmitting four spoofed
packets in one second suf(cid:2)ces to illuminate the TPMS-
LPW light. Additionally, we found that those four
spoofed packets have to be at least 225 ms apart, oth-
erwise multiple spoofed packets will be counted as one.
When the interval between two consecutive spoofed
packets is larger than 4 seconds or so, the TPMS-LPW
no longer illuminates. This indicates that TPMS adopts
two detection windows with sizes of 240 ms (a packet
lasts for 15 ms) and 4 seconds. A 240-ms window is
considered positive for low tire pressure if at least one
low-pressure packet has been received in that window
regardless of the presence of numerous normal packets.
Four 240-ms windows need to be positive to illuminate
the TPMS-LPW light. However, the counter for positive
240-ms windows will be reset if no low-pressure packet
is received within a 4-s window.
Although the TPMS ECU does use a counting thresh-
old and window-based detection strategies, they are de-
signed to cope with occasionally corrupted packets in a
benign situation and are unable to deal with malicious
spoo(cid:2)ng. Surprisingly, although the TPMS ECU does
receive eight normal packets transmitted by sensors as
a response to its queries, it still concludes the low-tire-
pressure status based on one forged packet, ignoring the
majority of normal packets!
5.2.2 Repeatedly Triggering the TPMS-LPW Light
The TPMS-LPW light turns off a few seconds if only
four forged packets are received. To understand how
to sustain the warning light, we repeatedly transmitted
spoofed packets and increased the spoo(cid:2)ng period grad-
ually. The TPMS-LPW light remained illuminated when
we transmitted the low-pressure packet at a rate higher
than one packet per 240 ms, e.g., one packet per detection
window. Spoo(cid:2)ng at a rate between one packet per 240
ms to 4 seconds caused the TPMS-LPW light to toggle
between on and off. However, spoo(cid:2)ng at a rate slower
than 4 seconds could not activate the TPMS-LPW light,
which con(cid:2)rmed our prior experiment results. Figure 15
depicts the measured TPMS-LPW light on-durations and
off-durations when the spoo(cid:2)ng periods increased from
44 ms to 4 seconds.
As we increased the spoo(cid:2)ng period, the TPMS-LPW
light remained on for about 6 seconds on average, but
the TPMS-LPW light stayed off for an incrementing
amount of time which was proportional to the spoo(cid:2)ng
period. Therefore, it is very likely that the TPMS-ECU
adopts a timer to control the minimum on-duration and
the off-duration of TPMS-LPW light can be modeled as
tof f = 3:5x + 4, where x is the spoo(cid:2)ng period. The
off-duration includes the amount of time to observe four
low-pressure forged messages plus the minimum waiting
duration for the TPMS-ECU to remain off, e.g., 4 sec-
onds. In fact, this con(cid:2)rms our observation that there is
a waiting period of approximately 4 seconds before the
TPMS warning light was (cid:2)rst illuminated.
5.2.3 Beyond Triggering the TPMS-LPW Light
Our previous spoo(cid:2)ng attacks demonstrated that we can
produce false TPMS-LPW warnings. In fact, transmit-
ting forged packets at a rate higher than one packet per
second also triggered the vehicle’s general-information
warning light illustrating ‘Check Tire Pressure’. De-
pending on the spoo(cid:2)ng period, the gap between the
illumination of the TPMS-LPW light and the vehicle’s
general-information warning light varied between a few
seconds to 130 seconds (cid:151) and the TPMS-LPW light re-
mained illuminated afterwards.
Throughout our experiments, we typically exposed the
car to spoofed packets for a duration of several minutes at
a time. While the TPMS-LPW light usually disappeared
about 6 seconds after stopping spoofed message trans-
missions, we were once unable to reset the light even by
turning off and restarting the ignition. It did, however,
reset after about 10 minutes of driving.
To our surprise, at the end of only two days of spo-
radic experiments involving triggering the TPMS warn-
ing on and off, we managed to crash the TPMS ECU and
12
l
i
)
s
(
y
a
p
s
d
d
r
a
o
b
h
s
a
d
f
o
n
o
i
t
a
r
u
D
25
20
15
10
5
0
0
Warning On
Warning Off
1
Spoofing period (s)
2
3
4
Figure 15: TPMS low-pressure warning light on and off dura-
tion vs. spoo(cid:2)ng periods.
completely disabled the service. The vehicle’s general-
information warning light illustrating ‘Check TPMS Sys-
tem’ was activated and no tire pressure information was
displayed on the dashboard, as shown in Figure 16. We
attempted to reset the system by sending good packets,
restarting the car, driving on the highway for hours, and
unplugging the car battery. None of these endeavors
were successful. Eventually, a visit to a dealership recov-
ered the system at the cost of replacing the TPMS ECU.
This incident suggests that it may be feasible to crash the
entire TPMS and the degree of such an attack can be so
severe that the owner has no option but to seek the ser-
vices of a dealership. We note that one can easily explore
the logic of a vehicle’s general-information warning light
using similar methods for TPMS-LPW light. We did not
pursue further analysis due to the prohibitive cost of re-
pairing the TPMS ECU.
5.3 Lessons Learned
The successful implementation of a series of spoo(cid:2)ng at-
tacks revealed that the ECU relies on sensor IDs to (cid:2)lter
packets, and the implemented (cid:2)lter mechanisms are not
effective in rejecting packets with con(cid:3)icting informa-
tion or abnormal packets transmitted at extremely high
rates. In fact, the current (cid:2)ler mechanisms introduce se-
curity risks. For instance, the TPMS ECU will trigger
the sensors to transmit several packets after receiving one
spoofed message. Those packets, however, are not lever-
aged to detect con(cid:3)icts and instead can be exploited to
launch battery drain attacks. In summary, the absence of
authentication mechanisms and weak (cid:2)lter mechanisms
open many loopholes for adversaries to explore for more
‘creative’ attacks. Furthermore, despite the unavailabil-
ity of a radio frontend that can transmit at 315/433 MHz,
we managed to launch the spoo(cid:2)ng attack using a fre-
quency mixer. This result is both encouraging and alarm-
ing since it shows that an adversary can spoof packets
even without easy access to transceivers that operate at
the target frequency band.
13
(a)
(b)
Figure 16: Dash panel snapshots indicating the TPMS system
error (this error cannot be reset without the help of a dealer-
ship): (a) the vehicle’s general-information warning light; (b)
tire pressure readings are no longer displayed as a result of sys-
tem function errors.
6 Protecting TPMS Systems from Attacks
There are several steps that can improve the TPMS de-
pendability and security. Some of the problems arise
from poor system design, while other issues are tied to
the lack of cryptographic mechanisms.
6.1 Reliable Software Design
The (cid:2)rst recommendation that we make is that software
running on TPMS should follow basic reliable software
design practices. In particular, we have observed that it
was possible to convince the TPMS control unit to dis-
play readings that were clearly impossible. For example,
the TPMS packet format includes a (cid:2)eld for tire pressure
as well as a separate (cid:2)eld for warning (cid:3)ags related to tire
pressure. Unfortunately, the relationship between these
(cid:2)elds were not checked by the TPMS ECU when pro-
cessing communications from the sensors. As noted ear-
lier, we were able to send a packet containing a legitimate
tire pressure value while also containing a low tire pres-
sure warning (cid:3)ag. The result was that the driver’s dis-
play indicated that the tire had low pressure even though
its pressure was normal. A straight forward (cid:2)x for this
problem (and other similar problems) would be to update
the software on the TPMS control unit to perform con-
sistency checks between the values in the data (cid:2)elds and
the warning (cid:3)ags. Similarly, when launching message
spoo(cid:2)ng attacks, although the control unit does query
sensors to con(cid:2)rm the low pressure, it neglects the le-
gitimate packet responses completely. The control unit
could have employed some detection mechanism to, at
least, raise an alarm when detecting frequent con(cid:3)icting
information, or have enforced some majority logic oper-