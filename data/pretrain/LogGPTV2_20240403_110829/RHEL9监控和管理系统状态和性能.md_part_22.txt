-   `journalctl(1)`{.literal} 和 `taskset(1)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#setting-the-smp_affinity-mask_configuring-an-operating-system-to-optimize-cpu-utilization}设置 smp_affinity 掩码 {.title}
:::
`smp_affinity`{.literal}
值存储为代表系统中所有处理器的十六进制位掩码。每个位配置不同的
CPU。最重要的位是 CPU 0。
掩码的默认值为
`f`{.literal}，这意味着可在系统中的任何处理器上处理中断请求。将此值设置为
1 表示只有处理器 0 可以处理中断。
::: orderedlist
**步骤**
1.  二进制代码中，将值 1 用于处理中断的 CPU。例如，要设置 CPU 0 和 CPU 7
    以处理中断，请使用 `0000000010000001`{.literal} 作为二进制代码：
    ::: table
    []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#idm140048728022192}
    **表 13.1. CPU 的二进制位**
    ::: table-contents
      -------- ---- ---- ---- ---- ---- ---- --- --- --- --- --- --- --- --- --- ---
      CPU      15   14   13   12   11   10   9   8   7   6   5   4   3   2   1   0
      二进制   0    0    0    0    0    0    0   0   1   0   0   0   0   0   0   1
      -------- ---- ---- ---- ---- ---- ---- --- --- --- --- --- --- --- --- --- ---
    :::
    :::
2.  将二进制代码转换为十六进制代码：
    例如，使用 Python 转换二进制代码：
    ``` screen
    >>> hex(int('0000000010000001', 2))
    '0x81'
    ```
    在有 32 个处理器的系统上，您必须限制离散的 32 位组的
    `smp_affinity`{.literal} 值。例如，如果您只想 64
    位处理器系统的第一个 32 个处理器来服务中断请求，请使用
    `0xffffffff,00000000`{.literal}。
3.  特定中断请求的中断关联性值存储在关联的
    `/proc/irq/irq_number/smp_affinity`{.literal} 文件中。在此文件中设置
    `smp_affinity`{.literal} mask：
    ``` screen
    # echo mask > /proc/irq/irq_number/smp_affinity
    ```
:::
::: itemizedlist
**其他资源**
-   `journalctl(1)`{.literal}, `irqbalance(1)`{.literal}, 和
    `taskset(1)`{.literal} man pages
:::
:::
:::
:::
[]{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance}第 14 章 调优调度策略 {.title}
:::
在 Red Hat Enterprise Linux
中，进程执行的最小单元称为线程。系统调度程序决定哪个处理器运行线程，以及线程的运行时间。但是，因为调度程序的主要关注是保持系统忙碌，因此可能无法为应用程序性能最佳调度线程。
例如，当 Node B 上的处理器可用时，NUMA 系统上的应用程序在 Node A
上运行。为了将处理器保持在节点
B忙碌上，调度程序会将其中一个应用的线程移至节点
B。但是，应用程序线程仍然需要访问 Node A
上的内存。但是，这个内存会更长时间访问，因为线程现在在 Node B 和 Node A
内存上运行，而 Node A 内存不再是线程本地的。因此，线程完成在 Node B
上运行的时间可能要长于在 Node B 上运行，等待 Node A
上的处理器变得可用，然后在具有本地内存访问的原始节点上执行线程。
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#con_categories-of-scheduling-policies_tuning-scheduling-policy}调度策略的类别 {.title}
:::
性能敏感的应用程序通常受益于设计人员或管理员确定运行线程的位置。Linux
调度程序实施多个调度策略，用于决定线程的运行时间和时长。
以下是调度策略的两个主要类别：
::: variablelist
[`普通策略`{.literal}]{.term}
:   常规线程用于普通优先级的任务。
[`实时策略`{.literal}]{.term}
:   实时策略用于不需要中断时必须完成的时间敏感任务。实时线程不会受到时间分片。这意味着线程会运行直到它们
    block、exit、voluntarily yield 或被较高优先级线程抢占。
    任何具有一般策略线程的线程前，会调度最低优先级实时线程。如需更多信息，请参阅使用
    [SCHED_FIFO
    的静态优先级调度](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#static-priority-scheduling-with-SCHED_FIFO_tuning-scheduling-policy){.link}和使用
    [SCHED_RR
    进行循环优先级调度](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#round-robin-priority-scheduling-with-sched_rr_tuning-scheduling-policy){.link}。
:::
::: itemizedlist
**其他资源**
-   `sched(7)`{.literal}, `sched_setaffinity(2)`{.literal},
    `sched_getaffinity(2)`{.literal}, `sched_setscheduler(2)`{.literal},
    和 `sched_getscheduler(2)`{.literal} man pages
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#static-priority-scheduling-with-SCHED_FIFO_tuning-scheduling-policy}使用 SCHED_FIFO 的静态优先级调度 {.title}
:::
`SCHED_FIFO`{.literal}
也称为静态优先级调度，是一种实时策略，为每个线程定义固定优先级。此策略允许管理员提高事件响应时间并缩短延迟。建议您不要在时间敏感时执行此策略。
当使用 `SCHED_FIFO`{.literal} 时，调度程序会按照优先级顺序扫描所有
`SCHED_FIFO`{.literal}
线程的列表，并调度可随时运行的最高优先级线程。`SCHED_FIFO`{.literal}
线程的优先级级别可以是从 `1`{.literal} 到 `99`{.literal}
的任何整数，其中 `99`{.literal}
被视为最高优先级。红帽建议仅在识别延迟问题时以较低数量开始并增加优先级。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
因为实时线程不会受到时间分片，因此红帽不推荐将优先级设置为
99。这与迁移和 watchdog
线程相同的优先级级别保持您的进程；如果您的线程进入计算循环，并且这些线程被阻止，则它们将无法运行。具有单一处理器的系统最终会在这种情况下挂起。
:::
管理员可以限制 `SCHED_FIFO`{.literal}
带宽，以防止实时应用程序程序员启动对处理器进行单调执行的实时任务。
以下是此策略中使用的一些参数：
::: variablelist
[`/proc/sys/kernel/sched_rt_period_us`{.literal}]{.term}
:   此参数以微秒为单位定义时间，它被视为处理器带宽的 10%。默认值为
    `1000000 InventoryServices`{.literal}，或 `1 秒`{.literal}。
[`/proc/sys/kernel/sched_rt_runtime_us`{.literal}]{.term}
:   此参数以微秒为单位定义运行实时线程的时间周期。默认值为
    `950000 μs`{.literal}，即 `0.95 秒`{.literal}。
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#round-robin-priority-scheduling-with-sched_rr_tuning-scheduling-policy}使用 SCHED_RR 循环优先级调度 {.title}
:::
`SCHED_RR`{.literal} 是 `SCHED_FIFO`{.literal}
的循环变体。当多个线程需要在同一优先级级别上运行时，此策略很有用。
与 `SCHED_FIFO`{.literal} 一样，`SCHED_RR`{.literal}
是一个实时策略，用于为每个线程定义固定优先级。调度程序会按照优先级顺序扫描所有
SCHED_RR 线程的列表，并调度可随时运行的最高优先级线程。但是，与
`SCHED_FIFO`{.literal} 不同，在特定时间片段中以 round-robin
样式调度具有相同优先级的线程。
您可以使用 `/proc/sys/kernel/sched_rr_timeslice_ms`{.literal} 文件中的
`sched_rr_timeslice_ms`{.literal}
内核参数以毫秒为单位设置这个时间片段的值。最低值为 `1 毫秒`{.literal}。
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#normal-scheduling-with-sched_other_tuning-scheduling-policy}使用 SCHED_OTHER 常规调度 {.title}
:::
`SCHED_OTHER`{.literal} 是 Red Hat Enterprise Linux 9
中的默认调度策略。此策略使用完全公平调度程序(CFS)，允许对使用该策略调度的所有线程进行公平处理器访问。当有大量线程或数据吞吐量是优先级时，此策略最有用，因为它可以更有效地调度线程。
当使用此策略时，调度程序会根据每个进程线程的 niceness
值创建动态优先级列表。管理员可以更改进程的 niceness
值，但不能直接更改调度程序的动态优先级列表。
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#setting-scheduler-policies_tuning-scheduling-policy}设置调度程序策略 {.title}
:::
使用 `chrt`{.literal}
命令行工具检查并调整调度程序策略和优先级。它可以启动具有所需属性的新进程，或更改正在运行的进程的属性。它还可用于在运行时设置策略。
::: orderedlist
**步骤**
1.  查看活跃进程的进程 ID(PID)：
    ``` screen
    # ps
    ```
    在 `ps`{.literal} 命令中使用 `--pid`{.literal} 或 `-p`{.literal}
    选项来查看特定 PID 的详细信息。
2.  检查特定进程的调度策略、PID 和优先级：
    ``` screen
    # chrt -p 468
    pid 468's current scheduling policy: SCHED_FIFO
    pid 468's current scheduling priority: 85
    # chrt -p 476
    pid 476's current scheduling policy: SCHED_OTHER
    pid 476's current scheduling priority: 0
    ```
    在这里，[*468*]{.emphasis} 和 [*476*]{.emphasis} 是进程的 PID。
3.  设置进程的调度策略：
    ::: orderedlist
    1.  例如，要将 PID 为 [*1000*]{.emphasis} 的进程设置为
        [*SCHED_FIFO*]{.emphasis}，其优先级为 [*50*]{.emphasis} ：
        ``` screen
        # chrt -f -p 50 1000
        ```
    2.  例如，要将 PID 为 [*1000*]{.emphasis} 的进程设置为
        [*SCHED_OTHER*]{.emphasis}，其优先级为 [*0*]{.emphasis} ：
        ``` screen
        # chrt -o -p 0 1000
        ```
    3.  例如，要将 PID 为 [*1000*]{.emphasis} 的进程设置为
        [*SCHED_RR*]{.emphasis}，其优先级为 [*10*]{.emphasis} ：
        ``` screen
        # chrt -r -p 10 1000
        ```
    4.  要启动具有特定策略和优先级的新应用，请指定应用程序的名称：
        ``` screen
        # chrt -f 36 /bin/my-app
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   `chrt(1)`{.literal} man page
-   [chrt
    命令的策略选项](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#policy-options-for-the-chrt-command_tuning-scheduling-policy){.link}
-   [在引导过程中更改服务优先级](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#changing-the-priority-of-service-during-the-boot-process_tuning-scheduling-policy){.link}
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#policy-options-for-the-chrt-command_tuning-scheduling-policy}chrt 命令的策略选项 {.title}
:::
使用 `chrt`{.literal} 命令，您可以查看和设置进程的调度策略。
下表描述了适当的策略选项，可用于设置进程的调度策略。
::: table
[]{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#idm140048820056992}
**表 14.1. chrt 命令的策略选项**
::: table-contents
  短选项           长选项                描述
  ---------------- --------------------- --------------------------------------
  `-f`{.literal}   `--fifo`{.literal}    将调度设置为 `SCHED_FIFO`{.literal}
  `-o`{.literal}   `--other`{.literal}   将调度设置为 `SCHED_OTHER`{.literal}
  `-r`{.literal}   `--rr`{.literal}      将调度设置为 `SCHED_RR`{.literal}
:::
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#changing-the-priority-of-service-during-the-boot-process_tuning-scheduling-policy}在引导过程中更改服务优先级 {.title}
:::
使用 `systemd`{.literal}
服务时，可以在引导过程中为启动的服务设置实时优先级。[*单元配置指令*]{.emphasis}
用于在引导过程中更改服务的优先级。
引导过程优先级更改通过使用 service 部分中的以下指令进行：
::: variablelist
[`CPUSchedulingPolicy=`{.literal}]{.term}
:   设置已执行进程的 CPU 调度策略。它被用于设置 `other`{.literal},
    `fifo`{.literal}, 和 `rr`{.literal} 策略。
[`CPUSchedulingPriority=`{.literal}]{.term}
:   设置已执行进程的 CPU 调度优先级。可用的优先级范围取决于所选的 CPU
    调度策略。对于实时调度策略，可以使用 `1`{.literal}（最低优先级）和
    `99`{.literal} （最高优先级）之间的整数。
:::