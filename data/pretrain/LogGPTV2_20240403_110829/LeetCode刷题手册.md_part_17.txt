Example 1: 
You may assume no duplicates in the array.
index where it would be if it were inserted in order. 
Given a sorted array and a target value, return the index if the target is found. If not, return the 
题目
35. Search Insert Position
Output: 1 
Input: [1,3,5,6],2
Output:2
Input: [1,3,5,6],5 
target 的元素
//二分查找最后一个小于等于target 的元素，时间复杂度o(logn)
return -1
for low > 1)
} else { 
if（mid ==len(nums)-1）ll（nums[mid+1]>target）{// 找到最后-个小于等于
high = mid - 1 
else { 
low = mid + 1
high = mid - 1 
low = mid + 1
 return mid
---
## Page 120
题目
36. Valid Sudoku
代码
解题思路
你可以假设数组中无重复元素。
返回它将会被按顺序插入的位置。
给定一个排序数组和一个目标值，
题目大意
Example 4: 
·给出一个已经从小到大排序后的数组，要求在数组中找到插入 target 元素的位置。
Output:0
Input: [1,3,5,6]， 0 
Output: 4 
Input: [1,3,5,6], 7
func searchInsert(nums []int, target int) int {
package leetcode
return 0
for low = target { 
mid := low + (high-low)>>1
 high = mid - 1 
if (mid == len(nums)-1) Il (nums[mid+1] >= target) {
low = mid + 1 
 return mid + 1 
在数组中找到目标值，并返回其索引。如果目标值不存在于数组中,
---
## Page 121
 Example 2: 
Example 1:
The Sudoku board could be partillyfilled, where empty cells are filled with the character '.'.
A partially filled sudoku which is valid.
the following rules:
 Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to
Output: true
3. Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.
 2. Each column must contain the digits 1-9 without repetition.
 1. Each row must contain the digits 1-9 without repetition.
一
Input:
Input:
["8",
[".",
["6",".",".
["8","3",".",".",'
"4"
[".","9","8",
["5","3","
"7""
'6",
".".".".
"9","8",
=
.".".
"1".
"4"
=
"6"
"9",
"7".
"8"
'1"
"'6"
6.
"7""
=
=
"3",
"5"
.6..
"5"
7
4
8
9
5
=
9
98
=
=
=
=
=
"6",
=
[..6..*..*
"8",
".
=
"
,"6"]
4
m
"1"]
8
=
L
3
L
L
L
L
8
L
2
9
9
6
3
5
2
8
9
6
5
9
3
---
## Page 122
代码
解题思路
判断一个 9x9的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
题目大意
Note:
·给出一个数独的棋盘，要求判断这个棋盘当前是否满足数独的要求：即行列是否都只包含1-9，每
3．数字1-9 在每一个以粗实线分隔的 3x3宫内只能出现一次。
package leetcode
N
1．数字 1-9 在每一行只能出现一次。
//解法一暴力遍历，时间复杂度 O(n^3）
● The given board size is always 9x9.
func isvalidsudoku(board [][]byte) boo］ 
import "strconv"
invalid.
Explanation: Same as Example 1, except with the 5 in the top left corner being
Output: false 
求求解数独。本题中的棋盘有些是无解的，但是棋盘状态是满足题意的。
注意这题和第 37题是不同的，这一题是判断当前棋盘状态是否满足数独的要求，而第 37题是要
、数字 1-9 在每一列只能出现一次。
// 判断行 row 
个九宫格里面是否也只包含1-9。
 The given board contain only digits 1-9 and the character U'.'.
 Only the filled cells need to be validated according to the mentioned rules.
 A Sudoku board (partially filled) could be valid but is not necessarily solvable.
for i := 0; i  9 ll index  9Il index
if checksudoku(board, pos[index]，i） && !*succ {
return
*succ = true
 return
int
for j := O; j < len(board[o]); j++ {
(*board) [pos[index].x] [pos[index].y] = '.'
putsudoku(board, pos, index+l, succ)
(*board) [pos[index] .x][pos[index] .y] = byte(i) + '0'
if board[i][j] == 
if *succ == true {
 pos = append(pos, position{x: i, y: j})
 return
，每九宫格内，1-9的数字不能重复，每
---
## Page 127
 Example 2: 