## Page 229
13.3.3.导入脚本
采用shell脚本进行演示，源码参考脚本工程import-cresp.sh
#!/bin/sh
#进入文件目录
cddirname $0
cat allvalues1.txt|redis-cli
sum='cat allvaluesl.txt|wc -1
echo"导入完毕，条数：${sum}
春风阁讲堂出品
2.29
---
## Page 230
13.4.pipline方式
13.4.1.核心原理
管道协议与原生协议最大的区别在于命令带有--pipe，下面是管道导入过程：
1.准备test.txt文件，内容格式如下
set al a1
set a2 a2
2.核心导入命令（命令带有--pipe)：
cat test1.txt redis-cli -h 127.0.0.1 -p 6379 --pipe
13.4.2.导出脚本
与resp 协议方式一致
13.4.3.导入脚本
采用--pipe参数，效率将大副度提升
春风阁讲堂出品
230
---
## Page 231
13.5.导出key方式
13.5.1.方式说明
导出所有的key有两种方式
1.采用keys*取得Redis所有key
redis-cli keys \* > allkeys.txt 或者
redis-cli keys "* > allkeys.txt
2.采用scan*取得redis所有key
这种方法是不会对redis服务器造太大的影响
推荐使用
春风阁讲堂出品
2.31
---
## Page 232
13.5.2.scan改写脚本
采用shell脚本进行演示，源码参考脚本工程export-scan.sh
#!/bin/sh
cursor=1 ; keys=** : pat tern=*; count=100 ; sum=0
#从游标0开始循环
while [Scursor -ne 0 ]; do
if [ Scursor -eq -1 ]: then
cursor=0
fi
reply=S(redis-cli --csv SCAN Scursor MATCH *Spattern* COUNT Scount)
reply=S (echo Sreply
sed "s/\"//g')
#第一列为下次游标数
cursor=S (echo Sreply
|awk -F*,**(print S1}')
#其它的列为key列表
cols=S (echo Sreply
awk -F**{s1=*":print s0}′)
#分割字符串，循环处理
array= (S {cols})
for col in $ {array[e]]: do
sum=S((sum + 1))
if [ s((sum % 1000)) -eq 0 ］; then
echo“处理数据s（（sum/1000））千”
fi
#下面则是业务处理
echo *$col* >>allkeys. txt
done
lone
cho
“导出key数量为：S（sum1}
春风阁讲堂出品
232
---
## Page 233
春风阁讲堂出品
---
## Page 234
13.6.migrate在线迁移
13.6.1.migrate原理
1.将key原子性地从当前实例传送到目标实例的指定数据库上，一旦传送成功，key保证会出现在目标实例上，而当前实例上的key会被删除
2.这个命令是一个原子操作，它在执行的时候会阻塞进行迁移的两个实例，直到以下任意结果发生：迁移成功，迁移失败，等到超时
3.命令的内部实现原理：
它在当前实例对给定key执行DUMP命令，将它序列化，然后传送到目标实例，目标实例再使用RESTORE对数据进行反序列化，并将反
序列化所得的数据添加到数据库中：当前实例就像目标实例的客户端那样，只要看到RESTORE命令返回OK，它就会调用DEL删除自已数据
库上的key
注意事项：
1.迁移中的源端和目标端网络必须互通，不通的情况下可以采用上几节课讲的方式
2.如果目标端为集群时，slot分发不正确的，会自动忽略，迁移的总次数为子集群个数
3.如果源端为集群时，每次只能迁移一个子集群，迁移的总次数为子集群个数
春风阁讲堂出品
234
---
## Page 235
13.6.2.集群->单点演示
采用shell脚本进行演示，源码参考脚本工程migratel.sh
由6381迁移至6379，6382与6383同理操作
#!/bin/sh
#进入文件目录
cddirname $0
#将redis中所有key暂存至文件
redis-cli -h 192.168.128.167 -p 6381 -c keys "*" > al1keys3.txt
sum=0
for key in cat allkeys3.txt'; do
#循环处理每一个key
redis-c1i -h 192.168.128.167 -p 6381 -C MIGRATE 192.168.128.167 6379 $key 0 10000 C0PY REPLACE
sum=$((sum+1))
if[$（（sum%1eoo））-eq0];then
echo"处理数据$（（sum/1000））千"
fi
done
春风阁讲堂出品
235
---
## Page 236
13.6.3.单点->集群演示
采用shell脚本进行演示，源码参考脚本工程migrate2.sh
由6379迁移至6381，6382与6383同理操作
#!/bin/sh
#进入文件目录
cddirname $0
#将redis中所有key暂存至文件
redis-cli keys "*" > allkeys4.txt
sum=0
for key in *cat allkeys4.txt'; do
#循环处理每一个key
redis-c1i -C MIGRATE 192.168.128.167 6381 $key 0 10000 C0PY REPLACE
sum=$((sum+1))
if[$（（sum%1eoo））-eq0];then
echo"处理数据$（（sum/1000））千"
fi
done
春风阁讲堂出品
236
---
## Page 237
13.7.集群在线迁移
13.7.1.import命令
将数据从127.0.0.1:6379集群（单点）导入到192.168.128.167:6381集群（集群中任意一台机器）
redis-cli -cluster import 192.168.128.167:6381 -cluster-from 127.0.0.1:6379 -cluster-replace
13.7.2.backup命令
对集群中的多个节点进行备份，其实就是多个节点的rdb备份
redis-cli --cluster backup 192.168.128.167:6381 /
春风阁讲堂出品
237
---
## Page 238
14.Redis性能通用因素
14.1.CPU对Redis影响
影响因素
影响程度
原理剖析
CPU核心数
小
CPU主频率
大
Redis的主工程线程为单线程
原理剖析：
1.Redis的主工作线程为单线程，因此主机的CPU主频率对Redis性能影响非常大，所以有时候我们能看到下面奇怪的现象：CPU核数多的主
机跑出的性能2ms
性能建议：
1.在普通的网络中，每增加一层交换机/路由器，网络延迟时间约在2ms左右，所以Redis和应用程序之间不要跨多个交换机/路由器
2.Redis和应用程序在网局域网时性能较高，最好是同交换机下部署，性能最佳
3.网络上的防火墙以及转发机器，也会对网络造成较大影响，建议采用直通网络模式
4.Redis和应用程序之间的延迟时间如果超过了2ms，建议从网络优化方面考虑
春风阁讲堂出品
---
## Page 241
14.4.Swap对Redis影响
操作系统为了缓解内存不足对应用程序的影响，允许把一部分内存中的数据换到磁盘上，以达到应用程序对内存使用的缓冲，这些内存数据被
换到磁盘上的区域，就是Swap
Redis的主要操作对象为内存，强烈不建议大家使用Swap：当内存中的数据被换到磁盘上后，Redis再访问这些数据时，就需要从磁盘上读取，
访问磁盘的速度要比访问内存50倍以上，尤其在非ssd盘上，甚至在几百倍以上
查看Redis是否使用了Swap，其中pid为Redis进程号
性能建议：
1.增加物理内存、关闭Swap内存，这是最简单也是最直接的方式
2.减小使用Swap内存阅值，比如如：
vm.swappiness = 5
vm.min_free_kbytes=204800
春风阁讲堂出品
241
---
## Page 242
15.Redis性能常见原因
15.1.Redis性能分析定位
首先我们要通过一些手段，分析定位是否是Redis问题
1.应用程序作时间跟踪，比如服务链路、针对性时间日志等等，首先明确是Redis环节问题
2.排除应用程序到Redis主机之间的网络延迟和丢包的现象
比如从应用程序到Redis主机作ping测试
3.排出主机上的其它程序，操作系统配置对Redis的影响
比如在Numa架构下，Redis进程和网卡被分配到不同的物理CPU上
4.通过基准测试，进行一步分析Redis性能问题
5.如果是集群的情况下，一般需要单个排除
我们可以使用以下命令，查看一段时间内Redis的最小、最大、平均访问延迟
redis-cli-h127.0.0.1-p 6379 --latency-history-i1min--采用实时查看
LATENCY HISTOGRAM
--查看历史统计数据
春风阁讲堂出品
242
---
## Page 243
15.2.复杂度过高的命令
通过Redis的慢日志（slowlog）进行分析定位
1.查看Redis慢日志之前，我们需要设置慢日志的阅值。例如，设置慢日志的阅值为10000微秒，并且保留最近128条慢日志记录
slowlog-log-slower-than 10000
slowlog-max-len 128
2.
这里我们可以通过执行命令：SLOWLOGget50进行查看以慢日志，进而分析原因
5）1)
(integer）126528
1
2)
(integer)1656000742
2
3)（integer）20
3
4）1)"set"
2)"a"
3)"3"
5)"127.0.0.1:25376
6）"#
1）唯一标志
2）时间戳
3）耗时（微秒)
4）具体的命令
3.Redis复杂度过高，一般是操作的内存数据过于复杂，或者是返回客户端的数据量比较大
比如像SORT、SUNION、KEYS*、MGET、MSET等命令，极有可能导致Redis变慢
春风阁讲堂出品
243
---
## Page 244
15.3.BigKey性能问题
如果一个key写入的value 非常大，那么Redis 在分配内存时就会比较耗时。同样的，当删除这个key时，释放内存也会比较耗时，这种类
型的key我们一般称之为bigkey
Redis中的Key，原则上越小越好，一般超过10K时，Redis性能会急剧下降，我们要特别小心
1.Redis提供了扫描bigkey的命令，执行以下命令就可以扫描出，一个实例中bigkey的topl分布情况
redis-cli -h 127.0.0.1 -p 6379 --bigkeys -i 0.1
2.针对topN的统计，我们可以采用memoryusagea来进行统计，具体shell脚本参考scripts工程
127.0.0.1:6379> memory usage a
(integer) 496
性能建议：
1.强烈建议不写bigkey
2.开启情性释放机制
lazyfree-lazy-user-del yes
lazyfree-lazy-server-del yes
replica-lazy-flush  yes
春风阁讲堂出品
244
---
## Page 245
15.4.Key集中过期问题
Redis的过期数据采用被动过期+主动过期两种策略：
1.被动过期：只有当访问某个key时，才判断这个key是否已过期，如果已过期，则从实例中删除
2.主动过期：Redis内部维护了一个定时任务，默认每隔100毫秒（1秒10次）就会从全局的过期哈希表中随机取出20个key，然后删除其中
过期的key，如果过期key的比例超过了25%，则继续重复此过程，直到过期key的比例下降到25%以下，或者这次任务的执行耗时超过
了25毫秒，才会退出循环
3.如果对于Key过期出现过度集中问题，那么Redis的CPU会出现较大的波大
性能建议：
1.集中过期key增加一个随机过期时间，把集中过期的时间打散，降低Redis清理过期key的压力
2.如果是Redis是4.0以上版本，可以开启lazy-free机制，当删除过期key时，把释放内存的操作放到后台线程中执行，避免阻塞主线程
lazyfree-lazy-expire yes
春风阁讲堂出品
245
---
## Page 246
15.5.淘汰策略性能问题
内存上限maxmemory，那么也有可能导致Redis变慢
原因在于，当Redis内存达到maxmemory后，每次写入新的数据之前，Redis必须先从实例中踢出一部分数据，让整个实例的内存维持在
maxmemory之下，然后才能把新数据写进来。
这个踢出旧数据的逻辑也是需要消耗时间的，而具体耗时的长短，要取决于我们配置的淘汰策略
性能建议：
1.避免存储bigkey
2.降低释放内存的耗时淘汰策略改为随机淘汰，随机淘汰比LRU要快很多
3.开启椭性淘汰，lazyfree-lazy-eviction=yes
春风阁讲堂出品
246
---
## Page 247
15.6.RDB和AOF重写
当Redis开启了后台RDB和AOFrewrite后，在执行时，它们都需要主进程创建出一个子进程进行数据的持久化
主进程创建子进程，会调用操作系统提供的fork函数：而fork在执行过程中，主进程需要拷贝自已的内存页表给子进程，如果这个实例很大，
那么这个拷贝的过程也会比较耗时
通过命令，我们可以查看上一次fork消耗的时间
redis-cli infolgrep latest_fork_usec
性能建议：
1.控制Redis实例的内存：尽量在20G以下，理论上越小越好，执行fork的耗时与实例大小有关，实例越大，耗时越久
2.合理配置数据持久化策略：在slave节点执行RDB备份，推荐在低峰期执行，而对于丢失数据不敏感的业务（例如把Redis当做纯缓存使用），
可以关闭AOF和AOFrewrite
3.Redis实例不要部署在虚拟机上：fork的耗时也与系统也有关，虚拟机比物理机耗时更久
4.降低主从库全量同步的概率：适当调大repl-backlog-size参数，避免主从全量同步
春风阁讲堂出品
247
---
## Page 248
15.7.大内存页性能影响
我们都知道，应用程序向操作系统申请内存时，是按内存页进行申请的，而常规的内存页大小是4KB。
Linux内核从2.6.38开始，支持了内存大页机制，该机制允许应用程序以2MB大小为单位，向操作系统申请内存
应用程序每次向操作系统申请的内存单位变大了，但这也意味着申请内存的耗时变长
但是对于Redis这种对性能和延迟极其墩感的数据库来说，我们希望Redis在每次申请内存时，耗时尽量短，所以我不建议你在Redis机器上
开启这个机制。
性能建议：
1、查看Redis机器是否开启了内存大页：
#如果输出选项是always，就表示目前开启了内存大页机制
2、关闭大内存页
echo never >/sys/kernel/mm/transparent_hugepage/enabled
春风阁讲堂出品
248
---
## Page 249
15.8.AOF模式刷盘机制
AOF刷盘不同模式对性能影响是不一样
影响因素
影响程度
原理解析
开启RDB
小
异步写，影响小
开启 AOF appendfsync=always
非常大