title:A Privacy Analysis of Google and Yandex Safe Browsing
author:Thomas Gerbet and
Amrit Kumar and
C&apos;edric Lauradoux
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
A Privacy Analysis of Google and Yandex Safe
Browsing
Thomas Gerbet
Universit´e Joseph Fourier, France
e-mail: PI:EMAIL
Amrit Kumar, C´edric Lauradoux
e-mail: {amrit.kumar, cedric.lauradoux}@inria.fr
INRIA, France
Abstract—GOOGLE and YANDEX Safe Browsing are popular
services included in many web browsers to prevent users from
visiting phishing or malware websites. If these services protect
their users from losing private information, they also require
that their servers receive browsing information on the very same
users. In this paper, we analyze GOOGLE and YANDEX Safe
Browsing services from a privacy perspective. We quantify the
privacy provided by these services by analyzing the possibility
of re-identifying URLs visited by a client. We thereby challenge
GOOGLE’s privacy policy which claims that GOOGLE cannot
recover URLs visited by its users. Our analysis and experimental
results show that GOOGLE and YANDEX Safe Browsing can
potentially be used as a tool to track speciﬁc classes of individuals.
Additionally, our investigations on the data currently included in
GOOGLE and YANDEX Safe Browsing provides a concrete set of
URLs/domains that can be re-identiﬁed without much effort.
Keywords—Safe Browsing, Privacy, Tracking
I.
INTRODUCTION
In 2008, GOOGLE started a service called GOOGLE Safe
Browsing (GSB) [1] to warn and dissuade an end user
from visiting phishing and malware web pages. With similar
goals, YANDEX followed up with an identical service named
YANDEX Safe Browsing (YSB). As of today, all major web
browsers including Firefox, Internet Explorer, Safari, Opera
and Yandex.Browser feature one of these Safe Browsing (SB)
services. The integration of SB services into the browsers has
naturally generated an extremely large user base. GSB alone
accounts to a billion users until date [2].
The ﬁrst version of GSB aka the Lookup API, raised
serious privacy concerns: URLs were sent in clear to GOOGLE
servers. GOOGLE could potentially capture the complete
browsing history of GSB users. GOOGLE later came up with a
new version that was conceived as a privacy-friendly service.
The same architecture has been adopted by YANDEX for
YSB. Essentially, in this new version, a GSB client computes
a cryptographic digest of a given URL and checks if its
32-bit preﬁx matches a local database of malicious preﬁxes
provided by GOOGLE. A database-miss ensures that the URL
is safe. While, a hit requires the client to query the server
by sending the preﬁx to eliminate false positives. From the
server’s reply, the client can eventually determine whether the
URL is malicious or not. GOOGLE Chrome Privacy Notice [3]
includes a section on GSB. It states that:
“Google cannot determine the real URL from this
information (read preﬁx).”
GOOGLE reiterates this statement in a document concerning
the GSB usage in Mozilla Firefox [4]. These guarantees have
allowed GSB to be massively used by the end users and even
by other web service providers.
Apart from these statements,
there is no other privacy
analysis of GSB. Our goal is to provide an independent privacy
analysis of GSB and its sibling YSB. To this end, we ﬁrst mo-
tivate our work in Section II and then provide a comprehensive
description of GSB and YSB in Section III and in Section IV
respectively. In Section V, we present a threat model for
re-identiﬁcation and tracking. The SB services employ an
anonymization technique that is a combination of hashing and
truncation. Hashing is used to create pseudonyms for URLs.
Generating pseudonyms (digests) of the URLs however does
not sufﬁce to anonymize the data, and hence truncation is
applied to create collisions. Truncation of these pseudonyms
ensures that several URLs share the same reduced pseudonym
(preﬁx). We quantify the privacy provided by this solution
using a balls-into-bins argument and k-anonymity [5] when
a single preﬁx is sent to the servers for a URL (Section VI).
It appears that multiple preﬁxes can be sent to the servers
for a given URL. Indeed, a client does not simply compute the
digest of a target URL, rather decomposes the URL into several
sub-URLs and computes the digests of all the decompositions
(more details in Section III). In theory, distinct URLs can
share common preﬁxes in their decompositions and hence may
provide anonymity. We characterize the different cases for such
multiple collisions in Section VII and collect their statistics on
URLs using the Common Crawl dataset [6]. Our experimental
analysis estimates the rate of such collisions and shows that
hashing and truncation fails to prevent the re-identiﬁcation of
small-sized domains or certain URLs of larger domains. We
further materialize this in the form of an algorithm that SB
providers could potentially employ for tracking.
In Section VIII, we analyze the databases of malicious
preﬁxes provided by GOOGLE and YANDEX. By crawling
their databases, we detect a number of “suspicious” preﬁxes
that we call orphans. Orphans trigger communication with
the servers, but no full digest corresponds to them. We also
observe several URLs which have multiples preﬁxes included
in the blacklists. These provide concrete examples of URLs
and domains that can be easily tracked by GOOGLE and
YANDEX. We conclude this work with the related work and
countermeasures (Section IX). We discuss and evaluate a
privacy enhancing technique to reduce information leakage
while maintaining the current architecture. Our proposal is
efﬁcient and can be directly integrated into SB clients.
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.39
347
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:43:08 UTC from IEEE Xplore.  Restrictions apply. 
Firefox
Chrome
Chromium
Twitter Bitly
Facebook Mail.ru
Orbitum
GSB
WOT
YSB
Maxthon
Opera
Safari
DuckDuckGo TRUSTe
Yandex.Browser
Fig. 1: The Safe Browsing ecosystem.
II. MOTIVATIONS
Our choice to work on the privacy analysis of GSB and
YSB is motivated by two factors. First, being that these are
the only two SB services designed to be privacy friendly. The
second is their high impact on users and other web services.
Indeed, many software vendors have proposed solutions for
SB. MICROSOFT promotes SmartScreen URL Filter [7] and
ships it with its products including Internet Explorer, Outlook,
Exchange, Windows Live Mail and Entourage. Web of Trust
(WOT) [8], and Norton Safe Web (NSW) [9], developed by
Symantec are tools operating as a web browser plugin. Finally,
McAfee SiteAdvisor [10] is a product very similar to NSW. In
general, all SB services ﬁlter malicious links by relying on a
dynamic blacklist of malicious URLs. However, all the afore-
listed SB providers except GOOGLE and YANDEX provide an
SB service that is privacy-unfriendly by design: the URL or a
part of it is sent in clear to the servers during the lookup in the
blacklists. Furthermore, most of these SB providers agree in
their privacy policies that they receive the URLs, but that they
are not used to identify, contact, or target ads to users. This
is the only guarantee that the users have. To our knowledge,
GOOGLE and therefore YANDEX Safe Browsing are the only
SB services with built-in privacy features.
Our second motivation to work particularly on GSB stems
from its popularity: it has been included in all major browsers
namely Chrome, Chromium, Firefox, Safari and Opera. Ac-
cording to STATCOUNTER (statcounter.com), these represent
65% of all the browsers in use. Several other independent
web services such as TWITTER and BITLY also employ
GSB to prevent users from disseminating malicious URLs.
FACEBOOK has developed a phishing and malware ﬁlter called
Link Shim [11] that extensively relies on GSB and WOT. Fig. 1
schematically presents the major clients of GSB and YSB.
III. GOOGLE SAFE BROWSING
GSB aims to provide a comprehensive and timely detection
of new threats on the Internet. According to a 2012 report [12],
GOOGLE detects over 9500 new malicious websites everyday
and provides warnings for about 300 thousand downloads per
day. In the following, we present a comprehensive description
of the GSB architecture.
A. Overview
The essential goal of GSB is to warn and dissuade an end
user from visiting malicious URLs. The service is implemented
at the application layer (HTTP level) of the standard Internet
stack. Consequently, whenever a client (typically a browser)
attempts to visit a malicious URL,
the client can display
an interstitial warning page before the suspicious web page
is actually requested. In Fig. 2, we present a simpliﬁed
architecture of the GSB service. GOOGLE crawlers harvest
malicious URLs from the web and then transmit them to the
GSB servers. Clients may then consult the server to check if
a link is malicious.
Google’s crawlers
Web
ﬁnd malicious URLs
transmit
malicious
URLs
check URL request
response
Client
GSB
Fig. 2: High level overview of GOOGLE Safe Browsing.
GSB classiﬁes malicious URLs into two main categories:
malware and phishing. The blacklists and their number of
entries are given in Table I. They contain SHA-256 digests of
malicious URLs. The lists can either be downloaded partially
to only update a local copy or can be obtained in its entirety.
TABLE I: Lists provided by GOOGLE Safe Browsing API.
Information could not be obtained for cells marked with *.
List name
goog-malware-shavar
goog-regtest-shavar
goog-unwanted-shavar
goog-whitedomain-shavar
googpub-phish-shavar
Description
malware
test ﬁle
unwanted softw.
unused
phishing
#preﬁxes
317,807
29,667
*
1
312,621
GSB was ﬁrst conceived in the form of a Lookup API.
Using this API, a client could send the URL to check using an
HTTP GET or POST request and the server performed a look
up in the malicious lists. However, the API was soon declared
deprecated for privacy and efﬁciency considerations. This was
mainly because URLs were sent in clear to the servers and
each request implied latency due to the network round-trip. To
address these issues, GOOGLE currently offers another API:
GOOGLE Safe Browsing API, described in the sequel.
348
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:43:08 UTC from IEEE Xplore.  Restrictions apply. 
Start
client
Found
preﬁxes?
no
Non-malicious
URL
no
Update
needed?
no
URL
Canonicalize
and compute
digests
yes
Get full
digests
yes
Update local
database
Fig. 3: GOOGLE Safe Browsing: Client’s behavior ﬂow chart.
Found
digest?
yes
Malicious
URL
B. Safe Browsing API v3
GOOGLE Safe Browsing API v3 is now the reference API.
It has been positively received by the community as a major
improvement for privacy. In contrast to the Lookup API, the
client now does not handle a URL directly. Instead, the URL is
canonicalized following the URI speciﬁcations [13] and then
all the decompositions of the URL are generated. A decom-
position is a URL composed of subdomains and subpaths of
the target URL. For the sake of illustration, let us consider the
most generic HTTP URL of the form http://usr:pwd@a.
b.c:port/1/2.ext?param=1#frags (see [14]), where
usr is a username and pwd is the corresponding password,
a.b.c is a fully-qualiﬁed domain name, port is a TCP or
UDP port number, 1/2.ext is the URL path, ?param=1
is the query and #frags identiﬁes a speciﬁc place within a
remote resource. All the possible decompositions of the URL
in the order they are generated are given below:
1
2
3
4
a.b.c/1/2.ext?param=1
a.b.c/1/2.ext
a.b.c/1/
a.b.c/
5
6
7
8
b.c/1/2.ext?param=1
b.c/1/2.ext
b.c/1/
b.c/
the
client
For
each
computes
decomposition,
a
SHA-256 [15] digest. The digest
is then checked against
a locally stored database which contains 32-bit preﬁxes of
malicious URL digests. If the preﬁx is not found to be
present in the local database, then the URL can be considered
safe. However, if there is a match, the queried URL may
not necessarily be malicious:
it can be a false positive.
Consequently,
the client must query the GSB server by
sending the preﬁx. The server in response sends all the full
digests corresponding to the received preﬁx. Finally, if the
full digest of the client’s preﬁx is not present
in the list
returned by the server, the URL can be considered safe. Fig 3
summarizes a request through the GSB API.
We note that client performs a lookup for decompositions
in the given order. The lookup for all the decompositions is
required since the complete URL might not have been included
in the blacklists. If any of the decompositions creates a hit
in the local database, then the initial link is considered as
349
suspicious and the preﬁx can be forwarded to the GOOGLE
server for a conﬁrmation. If there are more than 1 hits, then
all the corresponding preﬁxes are sent. After receiving the
list of full digests corresponding to the suspected preﬁxes
fragments, they are locally stored until an update discards them
or when the client restarts, whichever is the earliest. Storing
the full digests prevents the network from slowing down due to
frequent requests. To maintain the quality of service and limit
the amount of resources needed to run the API, GOOGLE has
deﬁned for each type of request (malware or phishing) the
frequency of queries that clients must restrain to.
1) Local Data Structures: The choice of the data structure
to store the preﬁxes on the client’s side is constrained by two
factors: fast query time and low memory footprint. GOOGLE
has deployed two different data structures until now: Bloom
ﬁlters [16] and Delta-coded tables [17]. In an earlier version
of Chromium (discontinued since September 2012), a Bloom
ﬁlter was used. This solution was abandoned to be replaced
by delta-coded tables. Unlike classical Bloom ﬁlters,
this
data structure is dynamic, does not have any “intrinsic” false
positive probability and yet incurs a lower memory footprint.
However, its query time is slower than that of Bloom ﬁlters.
Even though delta-coded tables do not entail any intrinsic
false positive probability, their use to store 32-bit preﬁxes still
generates false positives. False positives arise since several
URLs may share the same 32-bit preﬁx.
2) Safe Browsing Cookie: GSB has often been criticized
ever since web browsers have started to use them (see [18]).
This is essentially because when implemented inside web
browsers, each request to the API also sends a cookie which
identiﬁes a client. The cookie sent by browsers is the same as
the one used by other services provided by GOOGLE especially
the social features such as the +1 button. To these criticisms,
GOOGLE responded that the cookies were not used to track
users but only to monitor the performance of the service on
the server-side and to catch bugs (see [19]). Since they are
needed by GOOGLE to operate the service, browsers cannot
disable it. However, Chromium and Firefox have isolated the
SB cookie from the others with the purpose of achieving
maximum privacy (see [20]).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:43:08 UTC from IEEE Xplore.  Restrictions apply. 
IV. YANDEX SAFE BROWSING
YSB comes in the form of an API [21], and also as a
security feature in its browser called Yandex.Browser. The
YANDEX Safe Browsing API is compatible with C#, Python
and PHP and is a verbatim copy of the GSB API with the only
difference that in addition to the phishing and the malware lists
provided by GOOGLE, the YSB API also includes 17 other
blacklists. Each of these lists contains malicious or unsafe links
of a given category.
TABLE II: Yandex blacklists. Information could not be ob-
tained for cells marked with *.
List name
goog-malware-shavar
goog-mobile-only-malware-shavar
goog-phish-shavar
ydx-adult-shavar
ydx-adult-testing-shavar
ydx-imgs-shavar
ydx-malware-shavar
ydx-mitb-masks-shavar
ydx-mobile-only-malware-shavar
ydx-phish-shavar
ydx-porno-hosts-top-shavar
ydx-sms-fraud-shavar
ydx-test-shavar
ydx-yellow-shavar
ydx-yellow-testing-shavar