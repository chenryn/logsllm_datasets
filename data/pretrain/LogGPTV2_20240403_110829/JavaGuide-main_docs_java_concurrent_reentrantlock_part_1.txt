---
title: 从ReentrantLock的实现看AQS的原理及应用
category: Java
tag:
  - Java并发
---

> 本文转载自：
>
> 作者：美团技术团队

在Java中，许多同步类（如Semaphore、ReentrantLock等）都是基于AbstractQueuedSynchronizer（简称AQS）实现的。AQS提供了一种简单框架，用于原子式地管理同步状态、阻塞和唤醒线程，并支持队列模型。

本文将从应用层逐步深入到原理层，通过分析ReentrantLock的基本特性和其与AQS的关系，来详细解读AQS的相关知识点。我们将采用问答的形式帮助读者理解AQS的核心概念。由于篇幅限制，本文主要讨论AQS中的独占锁逻辑和Sync Queue，不涉及共享锁和Condition Queue的部分（本篇文章重点在于剖析AQS原理，仅简要介绍ReentrantLock，有兴趣的读者可以自行阅读ReentrantLock的源码）。

## 1. ReentrantLock

### 1.1 ReentrantLock特性概览

ReentrantLock是一种可重入锁，允许一个线程对同一个临界资源多次加锁。为了更好地理解ReentrantLock的特性，我们将其与常用的synchronized关键字进行对比。以下是ReentrantLock的主要特性（蓝色部分为本文重点分析的内容）：

![](https://p0.meituan.net/travelcube/412d294ff5535bbcddc0d979b2a339e6102264.png)

下面通过伪代码进行更直观的比较：

```java
// Synchronized的使用方式
// 1. 用于代码块
synchronized (this) {}
// 2. 用于对象
synchronized (object) {}
// 3. 用于方法
public synchronized void test() {}
// 4. 可重入
for (int i = 0; i < 10; i++) {
    synchronized (this) {
        // ...
    }
}
```

### 1.2 ReentrantLock与AQS的关系

ReentrantLock通过内部类`Sync`实现了AQS的功能。`Sync`是一个抽象类，有两个子类：`NonfairSync`和`FairSync`，分别代表非公平锁和公平锁。这两个子类都实现了`tryAcquire`方法，用于尝试获取锁。

#### 1.2.1 非公平锁的实现

非公平锁的实现如下：

```java
final boolean nonfairTryAcquire(int acquires) {
    final Thread current = Thread.currentThread();
    int c = getState();
    if (c == 0) {
        if (compareAndSetState(0, acquires)) {
            setExclusiveOwnerThread(current);
            return true;
        }
    } else if (current == getExclusiveOwnerThread()) {
        int nextc = c + acquires;
        if (nextc < 0) {
            throw new Error("Maximum lock count exceeded");
        }
        setState(nextc);
        return true;
    }
    return false;
}
```

为了帮助大家理解ReentrantLock和AQS之间的交互过程，以下是非公平锁加锁和解锁的流程图：

![](https://p1.meituan.net/travelcube/7aadb272069d871bdee8bf3a218eed8136919.png)

**加锁流程：**

1. 通过调用ReentrantLock的`lock`方法进行加锁。
2. `lock`方法会调用内部类`Sync`的`lock`方法。由于`Sync#lock`是抽象方法，根据初始化时选择的公平锁或非公平锁，执行相应的`lock`方法。
3. 最终都会调用AQS的`acquire`方法。
4. AQS的`acquire`方法会调用`tryAcquire`方法。由于`tryAcquire`需要自定义同步器实现，因此会调用ReentrantLock中的`tryAcquire`方法。
5. 根据锁类型不同，`tryAcquire`方法会执行不同的逻辑。如果获取锁失败，AQS会处理后续的逻辑。

通过以上流程，我们可以看到ReentrantLock是如何利用AQS来实现复杂的同步功能的。希望这些内容能帮助读者更好地理解AQS的工作原理及其在ReentrantLock中的应用。