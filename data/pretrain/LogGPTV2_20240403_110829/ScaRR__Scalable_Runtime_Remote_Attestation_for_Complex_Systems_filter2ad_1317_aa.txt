title:ScaRR: Scalable Runtime Remote Attestation for Complex Systems
author:Flavio Toffalini and
Eleonora Losiouk and
Andrea Biondo and
Jianying Zhou and
Mauro Conti
Scalable Runtime Remote Attestation for Complex Systems
ScaRR:
Flavio Toffalini
SUTD
Eleonora Losiouk
University of Padua
Andrea Biondo
University of Padua
Jianying Zhou
SUTD
Mauro Conti
University of Padua
ﬂPI:EMAIL, PI:EMAIL
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract
The introduction of remote attestation (RA) schemes has al-
lowed academia and industry to enhance the security of their
systems. The commercial products currently available enable
only the validation of static properties, such as applications ﬁn-
gerprint, and do not handle runtime properties, such as control-
ﬂow correctness. This limitation pushed researchers towards
the identiﬁcation of new approaches, called runtime RA. How-
ever, those mainly work on embedded devices, which share
very few common features with complex systems, such as
virtual machines in a cloud. A naive deployment of runtime
RA schemes for embedded devices on complex systems faces
scalability problems, such as the representation of complex
control-ﬂows or slow veriﬁcation phase.
In this work, we present ScaRR: the ﬁrst Scalable Runtime
Remote attestation schema for complex systems. Thanks to
its novel control-ﬂow model, ScaRR enables the deployment
of runtime RA on any application regardless of its complexity,
by also achieving good performance. We implemented ScaRR
and tested it on the benchmark suite SPEC CPU 2017. We
show that ScaRR can validate on average 2M control-ﬂow
events per second, deﬁnitely outperforming existing solutions
that support runtime RA on complex systems.
1
Introduction
RA is a procedure that allows an entity (i.e., the Veriﬁer) to
verify the status of a device (i.e., the Prover) from a remote
location. This is achieved by having ﬁrst the Veriﬁer sending
a challenge to the Prover, which replies with a report. Then,
the Veriﬁer analyzes the report to identify whether the Prover
has been compromised [10]. In standard RA, usually deﬁned
as static, the Prover veriﬁcation involves the integrity of spe-
ciﬁc hardware and software properties (e.g., the Prover has
loaded the correct software). On the market, there are already
several available products implementing static RA, such as
Software Guard Extensions (SGX) [18] or Trusted Platform
Module (TPM) [42]. However, these do not provide a defence
against runtime attacks (e.g., the control-ﬂow ones) that aim to
modify the program runtime behaviour. Therefore, to identify
Prover runtime modiﬁcations, researchers proposed runtime
RA. Among the different solutions belonging to this category,
there are also the control-ﬂow attestation approaches, which
encode the information about the executed control-ﬂow of a
process [8, 9].
In comparison to static RA, the runtime one is relatively
new, and today there are no reliable products available on the
market since researchers have mainly investigated runtime RA
for embedded devices [8, 9, 21, 22, 50]: most of them encode
the complete execution path of a Prover in a single hash [8,22,
50]; some [9] compress it in a simpler representation and rely
on a policy-based veriﬁcation schema; other ones [21] adopt
symbolic execution to verify the control-ﬂow information
continuously sent by the Prover. Even if they have different
performances, none of the previous solutions can be applied
to a complex system (e.g., virtual machines in a cloud) due to
the following reasons: (i) representing all the valid execution
paths through hash values is unfeasible (e.g., the number of
execution paths tends to grow exponentially with the size
of the program), (ii) the policy-based approaches might not
cover all the possible attacks, (iii) symbolic execution slows
down the veriﬁcation phase.
The purpose of our work is to ﬁll this gap by providing
ScaRR, the ﬁrst runtime RA schema for complex systems.
In particular, we focus on environments such as Amazon
Web Services [2] or Microsoft Azure [3]. Since we target
such systems, we require support for features such as multi-
threading. Thus, ScaRR provides the following achievements
with respect to the current solutions supporting runtime RA:
(i) it makes the runtime RA feasible for any software, (ii) it
enables the Veriﬁer to verify intermediate states of the Prover
without interrupting its execution, (iii) it supports a more
ﬁne-grained analysis of the execution path where the attack
has been performed. We achieve these goals thanks to a novel
model for representing the execution paths of a program,
which is based on the fragmentation of the whole path into
meaningful sub-paths. As a consequence, the Prover can send
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 121a series of intermediate partial reports, which are immediately
validated by the Veriﬁer thanks to the lightweight veriﬁcation
procedures performed.
ScaRR is designed to defend a Prover, equipped with a
trusted anchor and with a set of the standard solutions (e.g.,
W⊕X/DEP [34], Address Space Layout Randomization -
ASLR [29], and Stack Canaries [14]), from attacks performed
in the user-space and aimed at modifying the Prover runtime
behaviour. The current implementation of ScaRR requires the
program source code to be properly instrumented through a
compiler based on LLVM [31]. However, it is possible to use
lifting techniques [5], as well. Once deployed, ScaRR allows
to verify on average 2M control-ﬂow events per second, which
is signiﬁcantly more than the few hundred per second [21] or
the thousands per second [9] veriﬁable through the existing
solutions.
Contribution. The contributions of this work are the fol-
lowing ones:
• We designed a new model for representing the execution
path for applications of any complexity.
• We designed and developed ScaRR, the ﬁrst schema that
supports runtime RA for complex systems.
• We evaluated the ScaRR performances in terms of: (i) at-
testation speed (i.e., the time required by the Prover
to generate a partial report), (ii) veriﬁcation speed (i.e.,
the time required by the Veriﬁer to evaluate a partial
report), (iii) overall generated network trafﬁc (i.e., the
network trafﬁc generated during the communication be-
tween Prover and Veriﬁer).
Organization. The paper is organized as follow. First, we
provide a background on standard RA and control-ﬂow ex-
ploitation (Section 2), and deﬁne the threat model (Section 3).
Then, we describe the ScaRR control-ﬂow model (Section 4)
and its design (Section 5). We discuss ScaRR implementation
details (Section 6) and evaluate its performance and security
guarantees (Section 7). Finally, we discuss ScaRR limitations
(Section 8), related works (Section 9), and conclude with ﬁnal
remarks (Section 10).
2 Background
The purpose of this section is to provide background knowl-
edge about standard RA procedures and control-ﬂow attacks.
Remote Attestation. RA always involves a Prover and a
Veriﬁer, with the latter responsible for verifying the current
status of the former. Usually, the Veriﬁer sends a challenge to
the Prover asking to measure speciﬁc properties. The Prover,
then, calculates the required measurement (e.g., a hash of
the application loaded) and sends back a report R, which
contains the measurement M along with a digital ﬁngerprint
F, for instance, R = (M,F). Finally, the Veriﬁer evaluates the
report, considering its freshness (i.e., the report has not been
generated through a replay attack) and correctness (i.e., the
Prover measurement is valid). It is a standard assumption that
the Veriﬁer is trusted, while the Prover might be compromised.
However, the Prover is able to generate a correct and fresh
report due to its trusted anchor (e.g., a dedicated hardware
module).
Control-Flow Attacks. To introduce control-ﬂow attacks,
we ﬁrst discuss the concepts of control-ﬂow graph (CFG),
execution-path, and basic-block (BBL) by using the simple
program shown in Figure 1a as a reference example. The
program starts with the acquisition of an input from the user
(line 1). This is evaluated (line 2) in order to redirect the
execution towards the retrieval of a privileged information
(line 3) or an unprivileged one (line 4). Then, the retrieved
information is stored in a variable (y), which is returned as
an output (line 5), before the program properly concludes its
execution (line 6).
A CFG represents all the paths that a program may traverse
during its execution and it is statically computed. On the con-
trary, an execution path is a single path of the CFG traversed
by the program at runtime. The CFG associated to the pro-
gram in Figure 1a is depicted in Figure 1b and it encompasses
two components: nodes and edges. The former are the BBLs
of the program, while the latter represent the standard ﬂow
traversed by the program to move from a BBL towards the
next one. A BBL is a linear sequence of instructions with a
single entry point (i.e., no incoming branches to the set of
instructions other than the ﬁrst), and a single exit point (i.e.,
no outgoing branches from the set of instructions other than
the last). Therefore, a BBL can be considered an atomic unit
with respect to the control-ﬂow, as it will either be fully exe-
cuted, or not executed at all on a given execution path. A BBL
might end with a control-ﬂow event, which could be one of
(a) Pseudo-code of a program under
a control-ﬂow attack.
(b) Control-ﬂow graph of
a program under a control-
ﬂow attack.
Figure 1: Illustrative example of a control-ﬂow attack.
N1N2N3N4N5N6x = input()if x == ‘auth’:y = get_privileged_info()else:y = get_unprivileged_info()output(y)terminate= return address corruptionN1N2N3N5N4N6a122          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationthe following in a X86_64 architecture: procedure calls (e.g.,
call), jumps (e.g., jmp), procedure returns (e.g., ret), and
system calls (e.g., syscall). During its execution, a process
traverses several BBLs, which completely deﬁne the process
execution path.
Runtime attacks, and more speciﬁcally the control-ﬂow
ones, aim at modifying the CFG of a program by tampering
with its execution path. Considering Figure 1, we assume that
an attacker is able to run the program (from the node N1), but
that he is not authorized to retrieve the privileged information.
However, the attacker can, anyway, violate those controls
through a memory corruption error performed on the node N4.
As soon as the attacker provides an input to the program and
starts its execution, he will be redirected to the node N4. At
this point, the attacker can exploit a memory corruption error
(e.g., a stack overﬂow) to introduce a new edge from N4 to
N3 (edge labeled as a) and retrieve the privileged information.
As a result, the program traverses an unexpected execution
path not belonging to its original CFG. Even though several
solutions have been proposed to mitigate such attacks (e.g.,
ASLR [29]), attackers still manage to perform them [43].
This illustrative example about how to manipulate the exe-
cution path of a program is usually the basic step to perform
more sophisticated attacks like exploiting a vulnerability to
take control of a process [49] or installing a persistent data-
only malware without injecting new code, once the control
over a process is taken by the attacker [44].
Runtime RA provides a reliable mechanism which allows
the Veriﬁer to trace and validate the execution path undertaken
by the Prover.
3 Threat Model and Requirements
In this section, we describe the features of the Attacker and
the Prover involved in our threat model. Our assumptions are
in line with other RA schemes [8, 9, 18, 21, 47].
Attacker. We assume to have an attacker that aims to con-
trol a remote service, such as a Web Server or a Database
Management System (DBMS), and that has already bypassed
the default protections, such as Control Flow Integrity (CFI).
To achieve his aim, the attacker can adopt different tech-
niques, among which: Return-Oriented Programming (ROP)/
Jump-Oriented Programming (JOP) attacks [16, 17], function
hooks [35], injection of a malware into the victim process,
installation of a data-only malware in user-space [44], or
manipulation of other user-space processes, such as security
monitors. In our threat model, we do not consider physical
attacks (our complex systems are supposed to be virtual ma-
chines), pure data-oriented attacks (e.g., attacks that do not
alter the original program CFG), self-modifying code, and
dynamic loading of code at runtime (e.g., just-in-time compil-
ers [41]). We refer to Section 7.4 for a comprehensive attacker
analysis.
Prover. The Prover is assumed to be equipped with: (i) a
trusted anchor that guarantees a static RA, (ii) standard de-
fence mitigation techniques, such as W⊕X/DEP, ASLR. In
our implementation, we use the kernel as a trusted anchor,
which is a reasonable assumption if the machines have trusted
modules such as a TPM [42]. However, we can also use a
dedicated hardware, as discussed in Section 8. The Prover
maintains sensitive information (i.e., shared keys and crypto-
graphic functions) in the trusted anchor and uses it to generate
fresh reports, that cannot be tampered by the attacker.
4 ScaRR Control-Flow Model
ScaRR is the ﬁrst schema that allows to apply runtime RA
on complex systems. To achieve this goal, it relies on a new
model for representing the CFG/execution path of a program.
In this section, we illustrate ﬁrst the main components of our
control-ﬂow model (Section 4.1) and, then, the challenges we
faced during its design (Section 4.2).
4.1 Basic Concepts
The ScaRR control-ﬂow model handles BBLs at assembly
level and involves two components: checkpoints and List of
Actions (LoA).
A checkpoint is a special BBL used as a delimiter for iden-
tifying the start or the end of a sub-path within the CGF/ex-
ecution path of a program. A checkpoint can be: thread be-
ginning/end, if it identiﬁes the beginning/end of a thread;
exit-point, if it represents an exit-point from an application
module (e.g., a system call or a library function invocation);
virtual-checkpoint, if it is used for managing special cases
such as loops and recursions.
A LoA is the series of signiﬁcant edges that a process tra-
verses to move from a checkpoint to the next one. Each edge
is represented through its source and destination BBL and,
comprehensively, a LoA is deﬁned through the following no-
tation:
[(BBLs1,BBLd1), . . . , (BBLsn,BBLdn)].
Among all the edges involved in the complete representation
of a CFG, we consider only a subset of them. In particular, we
look only at those edges that identify a unique execution path:
procedure call, procedure return and branch (i.e., conditional
and indirect jumps).
To better illustrate the ScaRR control-ﬂow model, we now
recall the example introduced in Section 2. Among the six
nodes belonging to the CFG of the example, only the fol-
lowing four ones are checkpoints: N1, since it is a thread
beginning; N3 and N4, because they are exit-points, and N6,
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 123since it is a thread end. In addition, the LoAs associated to the
example are the following ones:
N1 − N3 ⇒ [(N2,N3)]
N1 − N4 ⇒ [(N2,N4)]
N3 − N6 ⇒ []
N4 − N6 ⇒ [].
On the left we indicate a pair of checkpoints (e.g., N1 − N3),
while on the right the associated LoA (empty LoAs are con-
sidered valid).
4.2 Challenges