题目
---
## Page 176
Given an absolute path for a file (Unix-style), simplify it. Or in other words, convert it to the
canonical path.
In a UNIX-style file system, a period . refers to the current directory. Furthermore, a double
period .. moves the directory up a level. For more information, see: Absolute path vs relative path
in Linux/Unix
Note that the returned canonical path must always begin with a slash /, and there must be only a
single slash / between two directory names. The last directory name (if it exists) must not end
with a trailing /. Also, the canonical path must be the shortest string representing the absolute
path.
Example 1:
Input: "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory
name.
Example 2:
Input: "/../"
output: "/"
Explanation: Going one level up from the root directory is a no-op, as the
root level is the highest level you can go.
Example 3:
Input: "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced
by a single one.
Example 4:
/>/../../q/-/e/.:nduI
output: "/c"
Example 5:
---
## Page 177
Input: "/a/.-/../b/../c//.//"
output: "/c"
Example 6:
Input: "/a//b////c/d// -/ -//..
Output: "/a/b/c"
题目大意
给出一个Unix的文件路径，要求简化这个路径。这道题也是考察栈的题目。
解题思路
这道题笔者提交了好多次才通过，并不是题目难，而是边界条件很多，没考虑全一种情况就会出错。有
哪些边界情况就看笔者的test文件吧。
代码
package leetcode
import(
"path/filepath"
"strings"
//解法-
func simplifyPath(path string) string {
arr := strings.Split(path, "/")
stack := make([]string, 0)
var res string
for i := 0; i 0 {
stack = stack[:1en(stack)-1]
} else if cur != "." && len(cur) > 0 {
stack = append(stack, arr[i])
if len(stack) == 0 {
---
## Page 178
return "/"
res = strings.Join(stack, "/")
return "/" + res
//解法二golang的官方库API
func simplifyPathl(path string) string {
return filepath.Clean(path)
74.Searcha2DMatrix
题目
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the
following properties:
● Integers in each row are sorted from left to right.
● The first integer of each row is greater than the last integer of the previous row.
Example 1:
Input:
matrix = [
[1,
3,
[10, 11, 16, 20],
[23, 30, 34, 50]
target = 3
Output: true
Example 2:
Input:
matrix =[
[1,
3.
5，
7]，
[10, 11, 16, 20],
[23, 30, 34, 50]
target = 13
output: false
题目大意
编写一个高效的算法来判断m×n矩阵中，是否存在一个目标值。该矩阵具有如下特性：
---
## Page 179
·每行中的整数从左到右按升序排列。
·每行的第一个整数大于前一行的最后一个整数。
解题思路
·给出一个二维矩阵，矩阵的特点是随着矩阵的下标增大而增大。要求设计一个算法能在这个矩阵中
高效的找到一个数，如果找到就输出true，找不到就输出false。
·虽然是一个二维矩阵，但是由于它特殊的有序性，所以完全可以按照下标把它看成一个一维矩阵，
只不过需要行列坐标转换。最后利用二分搜索直接搜索即可。
代码
package leetcode
func searchMatrix(matrix [][]int, target int) bool {
if len(matrix) ==0 {
return false
m,1ow, high = 1en(matrix[0]), 0, len(matrix[0])*1en(matrix)-1
for low >1
if matrix[mid/m][mid%m]== target {
return true
} else if matrix[mid/m][mid%m]> target {
high = mid - 1
}else{
1ow = mid + 1
return false
75.SortColors
题目
Given an array with n objects colored red, white or blue, sort them in-place so that objects of the
same color are adjacent, with the colors in the order red, white and blue.
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
Note: You are not suppose to use the library's sort function for this problem.
Example 1:
---
## Page 180
Input: [2,0,2,1,1, 0]
Output: [0,0,1,1,2,2]
Follow up:
● A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total
number of 0's, then 1's and followed by 2's.
● Could you come up with a one-pass algorithm using only constant space?
题目大意
抽象题意其实就是排序。这题可以用快排一次通过。
解题思路
题目末尾的Followup提出了一个更高的要求，能否用一次循环解决问题？这题由于数字只会出现0
1，2这三个数字，所以用游标移动来控制顺序也是可以的。具体做法：0是排在最前面的，所以只要添
加一个0，就需要放置1和2。1排在2前面，所以添加1的时候也需要放置2。至于最后的2，只用
移动游标即可。
这道题可以用计数排序，适合待排序数字很少的题目。用一个3个容量的数组分别计数，记录0，1，2
出现的个数。然后再根据个数排列0，1，2即可。时间复杂度O（n），空间复杂度O（K)。这一题K=3。
这道题也可以用一次三路快排。数组分为3部分，第一个部分都是0，中间部分都是1，最后部分都是
2 。
代码
package leetcode
func sortColors(nums []int) {
if 1en(nums) == 0 {
return
r := 0
w := 0
b := 0 // label the end of different colors;
for _, num := range nums {
if num == 0 {
nums[b] = 2
b++
nums [w] = 1
W++
nums[] = 0
---
## Page 181
r++
} else if num == 1 {
nums[b]  = 2
b++
nums[w] = 1
W++
} else if num == 2 {
b++
76.MinimumWindowSubstring
题目
Given a string S and a string T, find the minimum windlow in S which will contain all the characters
in T in complexity O(n).
Example:
Output: “BANC"
Note:
●If there is no such windlow in S that covers all characters in T, return the empty string -
● If there is such windlow, you are guaranteed that there will always be only one unique
minimum window in S.
题目大意
给定一个源字符串s，再给一个字符串T，要求在源字符串中找到一个窗口，这个窗口包含由字符串各
种排列组合组成的，窗口中可以包含T中没有的字符，如果存在多个，在结果中输出最小的窗口，如果
找不到这样的窗口，输出空字符串。
解题思路
这一题是滑动窗口的题目，在窗口滑动的过程中不断的包含字符串T，直到完全包含字符串T的字符以
后，记下左右窗口的位置和窗口大小。每次都不断更新这个符合条件的窗口和窗口大小的最小值。最后
输出结果即可。
代码
---
## Page 182
package leetcode
func minwindow(s string,t string) string{
if s == ""  t == 
return ""
var tFreq, sFreq [256]int
result, 1eft， right, finalLeft, finalRight, minw, count = "", 0, -l, -l,
-1, 1en(s)+1, 0
for i:= 0;i n {
return [][]int{}
C, res = []int{}, [][]int{}
generateCombinations(n, k, l, c, &res)
return res
}
func generateCombinations(n, k, start int, c []int, res *[][]int) {
if len(c) == k {
b := make([]int, len(c))
copy(b，c)
*res = append(*res, b)
return
// i will at most be n - (k - c.size()) + 1
for i := start; i =0；j--{//追历i的每一位
---
## Page 186
if tmp & 1 == 1 {
stack = append([]int{nums [j]}, stack.. -)
上
tmp >>= 1
res = append(res, stack)
return res
79.WordSearch
题目
Given a 2D board and a word, find if the word exists in the gridl.
The word can be constructed from letters of sequentially adjacent cell, where “adjacent" cells are
those horizontally or vertically neighboring. The same letter cell may not be used more than
once.
Example:
board =
['A',′B′,'C','E′],
['s','F','c','s'],
['A','D′,*E′,′′]
Given word = “ABCCED", return true.
Given word = “SEE", return true.
Given word = "ABCB", return false.
题目大意
给定一个二维网格和一个单词，找出该单词是否存在于网格中。单词必须按照字母顺序，通过相邻的单
元格内的字母构成，其中“相邻“单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不
允许被重复使用。
解题思路
·在地图上的任意一个起点开始，向4个方向分别DFS搜索，直到所有的单词字母都找到了就输出