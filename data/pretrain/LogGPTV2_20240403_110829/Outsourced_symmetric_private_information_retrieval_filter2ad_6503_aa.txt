title:Outsourced symmetric private information retrieval
author:Stanislaw Jarecki and
Charanjit S. Jutla and
Hugo Krawczyk and
Marcel-Catalin Rosu and
Michael Steiner
Outsourced Symmetric Private Information Retrieval
Stanislaw Jarecki
U. California Irvine
PI:EMAIL
Charanjit Jutla
IBM Research
PI:EMAIL
Hugo Krawczyk
IBM Research
PI:EMAIL
Marcel Rosu
U. California Irvine
PI:EMAIL
ABSTRACT
In the setting of searchable symmetric encryption (SSE), a
data owner D outsources a database (or document/ﬁle col-
lection) to a remote server E in encrypted form such that
D can later search the collection at E while hiding informa-
tion about the database and queries from E . Leakage to E
is to be conﬁned to well-deﬁned forms of data-access and
query patterns while preventing disclosure of explicit data
and query plaintext values. Recently, Cash et al. presented
a protocol, OXT, which can run arbitrary boolean queries
in the SSE setting and which is remarkably eﬃcient even for
very large databases.
In this paper we investigate a richer setting in which the
data owner D outsources its data to a server E but D is
now interested to allow clients (third parties) to search the
database such that clients learn the information D autho-
rizes them to learn but nothing else while E still does not
learn about the data or queried values as in the basic SSE
setting. Furthermore, motivated by a wide range of appli-
cations, we extend this model and requirements to a setting
where, similarly to private information retrieval, the client’s
queried values need to be hidden also from the data owner
D even though the latter still needs to authorize the query.
Finally, we consider the scenario in which authorization can
be enforced by the data owner D without D learning the
policy, a setting that arises in court-issued search warrants.
We extend the OXT protocol of Cash et al. to support
arbitrary boolean queries in all of the above models while
withstanding adversarial non-colluding servers (D and E )
and arbitrarily malicious clients, and while preserving the
remarkable performance of the protocol.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prof t or commercial advantage and that copies bear this notice and the full cita-
tion on the f rst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior specif c permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516730.
Michael Steiner
IBM Research
PI:EMAIL
1.
INTRODUCTION
Consider a database DB composed of collection of docu-
ments or records and an application that needs to search DB
based on the keywords contained in these records. For exam-
ple, DB can be a medical relational database with records
indexed by a set of attributes (e.g., name, zipcode, medi-
cal condition, etc.), an email repository indexed by English
words and/or envelope information (date, sender, receivers,
etc.), a collection of webpages indexed by text and metadata,
etc. A search query consists of a boolean expression on key-
words that returns all documents whose associated keywords
satisfy that expression. In this paper we are concerned with
applications where the database is outsourced to an exter-
nal server E and search is performed at E privately. That is,
E stores an encrypted version of the original database DB
(plus some metadata) and answers encrypted queries from
clients such that the client obtains the documents matching
his query without E learning plaintext information about
the data and queries.
The most basic setting of private data outsourcing as de-
scribed above is where the owner of the data itself, D, is the
party performing the search at E . In this setting, D initially
processes DB into an encrypted database EDB and sends it
to E . D only keeps a set of cryptographic keys that allows
her to later run encrypted searches on E and decrypt the
matching documents returned by E . This setting is known as
searchable symmetric encryption (SSE) and has been stud-
ied extensively [29, 15, 16, 10, 13, 11, 24]. While most of the
research has focused on single-keyword searches (i.e., return
all documents containing a given keyword), recently Cash
et al. [9] provided the ﬁrst SSE solution, the OXT protocol,
that can support in a practical and private way arbitrary
boolean queries on sets of keywords and in very large DBs.
The leakage to E , which is formally speciﬁed and proven in
[9], is in the form of data-access and query patterns, never
as direct exposure of plaintext data or searched values.
In this work we are concerned with richer outsourcing sce-
narios where multiple third parties (clients) access the data
at E but only through queries authorized by the data owner
D. For example, consider a hospital outsourcing an (en-
crypted) database to an external service E such that clients
(doctors, administrators,
can
search the database but only via queries authorized accord-
ing to the hospital’s policy and without these clients learn-
ing information on non-matching documents. As before, E
should learn as little as possible about data and queries.
insurance companies, etc.)
In this multi-client scenario (to which we refer as MC-
SSE), D provides search tokens to clients based on their
875queries and according to a given authorization policy. Se-
curity considers multiple clients acting maliciously and pos-
sibly colluding with each other (trying to gain information
beyond what they are authorized for) and a semi-trusted
server E which acts as “honest-but-curious” but does not
collude with clients. Extending SSE solutions to the multi-
client scenario is straightforward when (a) search tokens are
fully determined by the query and (b) the SSE protocol does
not return false positives (returning false positives, i.e. doc-
uments that do not match a query, is allowed in SSE since
the recipient in that case is the owner of the data but not
in the multi-client setting where clients are not allowed to
learn data they were not authorized for). In such cases, D
would receive the client’s query, generate the corresponding
SSE search tokens as if D herself was searching the database,
and provide the tokens to the client together with a signa-
ture that E can check before processing the search. However,
for enabling general boolean queries, the SSE OXT protocol
of [9] requires a number of tokens that is not known a-priori
(it depends on the searched data, not only on the query) and
therefore the above immediate adaptation does not work.
Our ﬁrst contribution is in extending the OXT protocol
from [9] to the MC-SSE setting while preserving its full
boolean-query capabilities and performance. In this exten-
sion, D provides the client C with a set of query-speciﬁc trap-
doors which the client can then transform into search tokens
as required by OXT. The set of trapdoors given to C is fully
determined by the query and independent of the searched
data. An additional subtle technical challenge posed by
OXT is how to allow E to verify that the search tokens pre-
sented by C are authorized by D. The simple solution is for
D to sign the trapdoors, however in OXT these trapdoors
need to be hidden from E (otherwise E can learn information
about unauthorized searches) so a simple signature on them
cannot be veriﬁed by E . Our solution uses a homomorphic
signature by D on the trapdoors that C can then transform
homomorphically into signatures on the search tokens. We
show that forging the tokens or their signatures is infeasible
even by fully malicious clients.
The resulting MC-OXT protocol preserves the full func-
tional properties of OXT, namely support for arbitrary boolean
queries, the same level of privacy (i.e., same leakage pro-
ﬁle) with respect to E , and the same remarkable perfor-
mance. Privacy with respect to clients is near-optimal (see
Section 3.1 for why such leakage may be inevitable) with
leakage conﬁned only to information on the number of doc-
uments matching one of the query terms (typically, the least-
frequent term).
Next, we extend the MC-OXT protocol to an even more
challenging setting we call Outsourced Symmetric Private
Information Retrieval (OSPIR), where on top of the MC-
SSE requirements, one asks that client queries be hidden
from D - similarly to the Private Information Retrieval (PIR)
primitive. This requirement arises in important outsourc-
ing scenarios. In the medical database example mentioned
above, the hospital authorizes doctors or other parties to
search the medical database according to certain policy;
however, in some cases the actual query values are to be
kept secret from the hospital itself (due to privacy, liability
and regulatory requirements). Only the minimal informa-
tion for determining the compliance of a query to the policy
should be disclosed to the hospital. For example, the policy
may indicate that only conjunctions with a minimal number
of terms are allowed or that the query needs to include at
least three of a set of attributes, etc. In such a case, there is
no need for the hospital to learn the particular values being
searched (such as a speciﬁc last name or medical condition).
In other cases, as in outsourced patent or ﬁnancial informa-
tion search, the provider D may want to enforce that a client
C pays for the type of query it is interested in but C wants
to keep his query hidden from both D and E . Applications
to intelligence scenarios are discussed in [18] (see also [32]).
Thus, we relax the query privacy requirement with respect
to D to allow for minimal information needed for D to deter-
mine policy compliance. Speciﬁcally, we consider the case
where keywords are formed by pairs of attribute-values. For
example, in a relational database, attributes are deﬁned by
the database columns (e.g., SSN, name, citizenship, etc.),
while in an email repository attributes can refer to envelope
information such as sender and receivers or to the message
body (in which case the values are, say, English words). In
this case, a policy deﬁnes the class of boolean expressions
allowed for a given client and the attributes that may be
used as inputs into these expressions.
In order to enforce
the policy, D learns the boolean expression and attributes
but nothing about the searched values. For policies deﬁned
via classes of attributes (e.g. allowing any attribute from
the set of attributes {name, city, zipcode}) leakage to D can
be further reduced by revealing the class and not the speciﬁc
attributes in the query.
Our most advanced result is extending the OXT proto-
col to the above OSPIR setting. The resultant protocol,
OSPIR-OXT, adds some crucial new ingredients to OXT:
It uses oblivious PRFs (OPRF) for hiding the query val-
ues from D, uses attribute-speciﬁc keys for enforcing policy
compliance, and uses homomorphic signatures (or the more
general abstraction of shared OPRFs) for query veriﬁcation
by E . A further extension of the protocol accommodates an
external policy manager, e.g., a judge in a warrant-based
search, who checks policy compliance and allows server D
to enforce the policy without learning the attributes being
searched.
Performance-wise our extensions to OXT preserve the pro-
tocol’s performance in both pre-processing (creating EDB)
and search phases. OSPIR-OXT adds to the computational
cost by adding a few exponentiations but these are gener-
ally inexpensive relative to the I/O cost (especially thanks
to common-base exponentiation optimizations). The pro-
tocols we provide for MC-SSE and OSPIR models support
encrypted search over database containing tens of billions
record-keyword pairs, for example a full snapshot of English
Wikipedia or a 10-TByte, 100M-record US-census database
(see Sections 4.3 and 4.4).
We achieve provable security against adaptive adversar-
ial honest-but-curious server E , against arbitrarily malicious
(but non-colluding1 with E ) server D, and against arbitrar-
ily malicious clients. Our security models extend the SSE
model [13, 11, 9] to the more complex settings of MC-SSE
and OSPIR. In all cases security is deﬁned in the real-vs-
ideal model and is parametrized by a speciﬁed leakage func-
tion L(DB, q). A protocol is said to be secure with leakage
proﬁle L(DB, q) against adversary A if the actions of A on
adversarially-chosen input DB and queries set q can be sim-
ulated with access to the leakage information L(DB, q) only
1See Section 5.1.
876(and not to DB or q). This allows modeling and bounding
partial leakage allowed by SSE protocols. It means that even
an adversary that has full information about a database, or
even chooses it, does not learn anything from the protocol
execution other than what can be derived solely from the
deﬁned leakage proﬁle.
Related work: Searchable symmetric encryption (SSE)
has been extensively studied [29, 15, 16, 10, 13, 11, 24] (see
[13, 11] for more on related work). Most SSE research fo-