### Vulnerability Analysis and Comparison with Existing Approaches

The percentage of vulnerable applications per vendor ranges from 1.3% (Sony) to 4.6% (Oppo). This is an improvement compared to previous reports on component hijacking vulnerabilities, which reported a higher rate of 6.77% [37].

To compare our approach with methods that rely on Axplorer, we conducted a detection analysis using Axplorer’s permission mapping. As shown in Column 3, the other approach reports a higher percentage of vulnerable apps. Specifically, while our approach reports 2.9% vulnerabilities, the other approach reports 3.4%.

To verify whether the vulnerabilities reported by the other approach are false positives, we conducted an additional analysis. We automatically filtered out app components uniquely flagged as vulnerable by the other approach and investigated the APIs that triggered the hijack-enabling flow from the component’s entry point. Unsurprisingly, these APIs had conditional protections in Arcade’s generated mappings, meaning the component satisfied the required conditions.

### Limitations of Static Analysis

It should be noted that, due to specific static analysis limitations, our implementation of the component hijacking detection (using both Arcade’s and Axplorer’s maps) might intrinsically lead to false alarms. Due to the lack of ground truth, we manually verified 70 randomly sampled components and identified that 9 cases (i.e., 13%) were false positives. Importantly, these false positives were common to both approaches (Arcade and Axplorer), while the last column of Table 5 shows the additional false positives produced if relying on Axplorer’s mapping. The false positives were due to infeasible code paths that the analysis did not understand. For example, while the analysis discovered a feasible hijacking flow from an entry point to a target sink API, the path contained invocations to native functions that rendered the path infeasible at runtime. Despite this, we believe our false positive rate is acceptable in a vulnerability filtering scenario.

### Additional Hijacking Cases Detected

Although not significant, our approach has also detected some hijacking cases that cannot be detected by approaches relying on other mappings. This is because they do not consider other security features. The following two case studies demonstrate this:

#### Case Study 1: Denying Bluetooth Discovery for Other Users

Our analysis reveals a component hijacking vulnerability in several tablet models running versions prior to 7.0, allowing a background user to deny Bluetooth discovery and usage for the logged-in users. Specifically, the custom setting app in these devices includes a broadcast receiver `BluetoothDiscoverableTimeoutReceiver` that invokes the API `btservice.AdapterService.setScanMode(...)`, allowing the turning off/on of Bluetooth discovery. Given this functionality, the receiver is protected with the `BLUETOOTH_ADMIN` permission. However, Arcade generates the following protection map for the API: `(UID = SYSTEM ∨ UserId = current) ∧ Perm = {BLUETOOTH_ADMIN}`. Our tool correctly detects the hijacking vulnerability, as the map implies that, in addition to the permission, the caller needs to be either `SYSTEM` or belong to an active user. In other words, the app should also enforce a UID check, a User check, or something equivalent. Otherwise, it could be exploited. We confirmed the vulnerability by successfully disabling the active user’s Bluetooth using a background user app.

This vulnerability cannot be discovered by approaches relying on other permission maps, as they do not consider UID/User ID checks and only see `BLUETOOTH_ADMIN` as the necessary protection.

#### Case Study 2: Manipulating Display Colors

In the second case, our analysis discovered a component hijacking problem that cannot be identified by other tools relying on existing mappings. In a few Samsung devices, we found that manipulating screen colors (setting it to negative, changing color theme, etc.) is possible through exploiting a privileged exposed component. The corresponding API `setmDNIeAccessibilityMode` in `AccessibilityService` is protected with a `SYSTEM` UID check. However, we found a broadcast receiver component `AccessibilityReceiver` in `SettingsReceiver.apk` that exposes this privileged API without any protection. Our solver consequently returned `UNSAT`. We identified other vulnerable components caused by this pattern, such as cases allowing setting firewall rules without any privileges in a few Samsung devices. Due to the lack of devices, we could not confirm those.

### Limitations of Our Approach

Leveraging Arcade’s generated protection map to detect permission overprivilege and component hijacking has inherent limitations. As our protection map requires understanding certain contextual factors an app holds at a specific API invocation, failing to infer these conditions will lead to inaccurate detection results. Specifically, due to the nature of static analysis, our detection might not be able to resolve runtime parameters necessary to deduce the exact protection path an app needs to match. For instance, inferring an API’s argument corresponding to the current user identifier or a system-wide setting is not statically possible. Our detection process conservatively assumes such parameters could be anything, leading to false positives. Arcade makes use of existing static analysis primitives such as alias analysis and inter-component communication analysis and thus inherits their limitations.

### Related Work

**Permission Specifications:**
- **Stowaway [11]**: Paved the way for Android permission specification analysis by extracting mappings using feedback-directed API fuzzing and dynamically logging all permission checks for an API execution. Their mappings are accurate but incomplete due to limited code coverage.
- **PScout [6]**: Addresses the code coverage problem of dynamic analysis by statically analyzing the framework and reporting reachable permission checks from an API. However, their results are conservative, as an API may not require the reported permissions in every context.
- **Axplorer [7]**: Produces improved mappings based on a more accurate static analysis of the framework that addresses prominent challenges uniquely characterizing Android. The generated protection mapping of our tool, Arcade, is similar to Axplorer’s permission mapping for 60% of the APIs (where an API has one single protection path). The rest exhibit different mappings as ours are broken down into disjoint protection enforcement paths.

**Analysis of Additional Android Protection Mechanisms:**
- **Kratos [32]**: Compares the set of security checks in multiple APIs leading to the same resource and reports inconsistent security enforcements. Kratos also considers non-traditional security checks, such as UID checks and thread status checks.
- **AceDroid [2]**: Normalizes permissions and security checks along different paths to a canonical form, enabling comparison of multiple protection schemes. Arcade leverages AceDroid’s normalization idea in app analysis but focuses on generating protection maps that denote various security enforcements under different contexts.

**Vulnerability Detection:**
- **Re-delegation Problem [12, 25]**: Identified issues where permissions are re-delegated, leading to potential vulnerabilities.
- **Content Provider Leaks [15]**: Systematic detection of capability leaks in stock Android smartphones.
- **Push-Cloud Messaging [23]**: Understanding and mitigating security hazards in mobile push-messaging services.
- **Whyper [28] and AutoCog [29]**: Check the inconsistency between required permissions and the description of apps.
- **AAPL [24]**: Examines inconsistent behaviors within similar functionalities of similar apps to detect privacy leaks.

**Static Analysis on Android:**
- **FlowDroid [5], DroidSafe [14], AndroidLeaks [13], Amandroid [36], BidText [17]**: Employ static taint analysis on Android apps for tracing information flow and detecting privacy leaks.
- **Epicc [27], Didfail [21], IccTA [22]**: Handle particular challenges of Android’s Inter-Component Communication (ICC).

### Conclusion

We propose a novel approach to precisely generate Android API protection specifications. Our solution statically analyzes the framework to derive a precise protection specification using path-sensitive analysis and a novel graph abstraction technique. We further propose a logical reasoning-based solution that leverages our maps to detect security issues. Our results demonstrate the strengths of our approach, as a significant percentage of our generated specifications cannot be correctly modeled without our proposed analysis.

### Acknowledgements

We thank the anonymous reviewers for their constructive comments. This research was supported, in part, by DARPA, NSF, ONR, Sandia National Lab, and ARO. Any opinions, findings, and conclusions in this paper are those of the authors only and do not necessarily reflect the views of our sponsors.

### References

[References listed as provided in the original text]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.