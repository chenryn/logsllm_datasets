% of vulnerable apps per vendor ranges from 1.3 % (Sony) to 4.6 %
(Oppo). Fortunately, compared to previous reports on component
hijacking vulnerabilities [37], the situation seems to be getting
better for most vendors (reported 6.77%).
To compare with approaches relying on Axplorer, we further
conduct the detection analysis using Axplorer’s permission map-
ping. As depicted in Column 3, the other approach reports a higher
% of vulnerable apps. Specifically, while we report 2.9% vulnerabili-
ties, the other approach reports 3.4 %.
To verify whether the reported vulnerabilities by the other ap-
proach are false positives, we conducted an additional analysis. We
automatically filtered out the app components uniquely flagged as
vulnerable by the other approach and investigated the APIs that
triggered the hijack-enabling flow from the component’s entry
point. Unsurprisingly, these APIs had conditional protections in Ar-
cade’s generated mappings (such that the component satisfied the
It should be noted that, due to specific static analysis limitations,
our implementation of the component hijacking detection (using
Arcade’s generated map as well as using Axplorer’s map) might
intrinsically lead to false alarms (common to both of the two ap-
proaches). Due to the lack of ground truth, we manually verified
70 randomly sampled components. We identified that 9 cases (i.e.,
13%) are false positives. An important thing to note is that they
are FPs for both approaches (i.e., using Arcade and Axplorer)
while the last column of Table 5 shows the additional FPs produced
if relying on Axplorer’s mapping. The false positives were due
to infeasible code paths that the analysis did not understand. For
example, while the analysis discovered a feasible hijacking flow
from an entry point to a target sink API, the path contains invoca-
tions to native functions that render the path infeasible at runtime.
We believe though that our false positive rate is acceptable in a
vulnerability filtering scenario.
Although not significant, our approach has also detected some
hijacking cases that cannot be detected at all by approaches relying
on other mappings. The cause behind this is they did not consider
other security features. The following two case studies demonstrate
this:
Case Study 1: Denying Bluetooth Discovery for other users.
Our analysis reveals a component hijacking vulnerability in several
tablet models running versions prior to 7.0, allowing a background
user to deny bluetooth discovery and usage for the logged-in users.
Specifically, the custom setting app in these devices includes a broad-
cast receiver BluetoothDiscoverableTimeoutReceiver that in-
vokes the API btservice.AdapterService.setScanMode(..), al-
lowing to turn off/on bluetooth discovery. Given this bluetooth
related functionality, the receiver is protected with the permission
BLUETOOT_ADMIN. However, Arcade generates the following pro-
tection map for the API: (UID = SYSTEM ∨ UserId = current)
∧ Perm = {BLUETOOTH_ADMIN}. Our tool correctly detects the hi-
jacking vulnerability. Specifically, the above map implies that in
addition to the permission, the caller needs to be either SYSTEM or
belong to an active user, implying that the component is actually
weakly protected. In other words, the app should also enforce a UID
check, a User check or something equivalent. Otherwise, it could
be exploited. We have confirmed the vulnerability by successfully
disabling active user’s bluetooth using a background user app.
strongest protection), which justifies why our analysis did not flag
them as vulnerable. We present the average number of components
that are additionally flagged as vulnerable by the other approach,
per analyzed image. Note that they are all FPs. As shown in the last
column, on average 11.8 components are additionally flagged and
hence false alarms per image (out of 64 average reported compo-
nents), reaching up to 23 components (out of 71) in Mobicel and 19
in ZTE (out of 89).
This vulnerability cannot be discovered by approaches relying
on other permission maps: Since UID / User Id checks are not
considered, the maps consider BLUETOOTH_ADMIN as the only pro-
tection needed, which is equal to the enforced protection by the
component.
Case Study 2: Manipulating Display Colors. In the second case,
our analysis discovered a component hijacking problem that cannot
be identified by other tools relying on the existing mappings. In a
few Samsung devices, we found out that manipulating screen colors
(setting it to negative, change color theme, etc) is possible through
exploiting a privileged exposed component. Given the privileges of
this functionality, the corresponding API setmDNIeAccessibility
Mode in the AccessibilityService is protected with a SYSTEM
UID check. However, we found a broadcast receiver component
AccessibilityReceiver in SettingsReceiver.apk that exposes
this privileged API without any protection. Our solver consequently
returned UNSAT. We have identified other vulnerable components
that are caused by this pattern. Prominently, cases allowing to set
firewall rules without any privileges in a few Samsung devices. Due
to the lack of devices, we could not confirm those.
7 LIMITATIONS
Leveraging Arcade’s generated protection map to detect permis-
sion overprivilege and component hijacking has an inherent lim-
itation. As our protection map requires understanding of certain
contextual factors an app holds at a specific API invocation, failing
to infer these conditions will lead to inaccurate detection results.
Specifically, due to the nature of static analysis, our conducted de-
tection might not be able to resolve runtime parameters necessary
to deduct the exact protection path an app needs to match. For
instance, inferring an API’s argument corresponding to the current
user identifier or to a system-wide setting is not statically possible.
Our detection process conservatively assumes such parameter could
be anything and thus can lead to false positives. Arcade makes
use of existing static analysis primitives such as alias analysis and
inter-component communication analysis and hence inherits their
limitations.
8 RELATED WORK
Permission Specifications. Stowaway [11] has paved the path
for Android permission specification analysis. It extracts the map-
pings using feedback directed API fuzzing and dynamically logs
all permission checks for an API execution. Their mappings are
thus accurate but incomplete due to limited code coverage. Com-
pared to our work, each reported permission set by Stowaway for
a particular API execution should correspond to one distinct path
in Arcade’s produced protection mapping.
PScout [6] addresses the code coverage problem of dynamic
analysis by statically analyzing the framework and reporting the
reachable permission checks from an API. However, their results
are conservative: an API may not require the reported permissions
in every context. Axplorer [7] produces improved mappings based
on a more accurate static analysis of the framework that addresses
prominent challenges uniquely characterizing Android. The gen-
erated protection mapping of our tool Arcade is similar to that
of Axplorer’s permission mapping for 60% of the APIs (basically,
where an API has one single protection path). However, the rest
APIs exhibit different mappings as ours are broken down into dis-
joint protection enforcement paths.
Analysis of Additional Android Protection Mechanisms. A
prominent Android research direction questions the consistency of
Android’s protection model. Kratos [32] compares the set of security
checks in multiple APIs leading to the same resource and reports
inconsistent security enforcements. Similar to our work, Kratos
also considers other non-traditional security checks; particularly,
the UID checks and thread status checks. Some of their reported
inconsistencies are due to enforcements containing these checks,
which highlights the importance of these features. AceDroid [2]
normalizes permissions and security checks (along different paths)
to a canonical form that is a tuple of security perspectives, such as
app and user, each perspective having a small set of canonical values
with partial order. This enables comparison of multiple protection
schemes that have implementation differences. Arcade leverages
AceDroid’s normalization idea in app analysis. However, our work
is different as we focus on generating protection maps that de-
note the various security enforcements under different contexts.
The maps are used to address security problems in the app space
whereas AceDroid focuses on detecting inconsistencies within the
framework. Our maps can also be used in guiding developers. Fur-
thermore, our technique is based on graph abstraction and logic
reasoning.
Vulnerability Detection. Android permission mappings have in-
spired researchers to identify vulnerabilities at both the framework
and application layer. Prominent examples include the re-delegation
problem [12, 25], content provider leaks [15], issues in push-cloud
messaging [23], in the app uninstallation process [38], crypto mis-
use in apps [9, 20] and others [3, 10]. In addition, Whyper [28]
and AutoCog [29] check the inconsistency between the required
permissions and the description of apps. AAPL [24] examines incon-
sistent behaviors within similar functionalities of similar apps to
detect privacy leaks. Our app analysis module aligns well with the
works aiming to detect permission re-delegation and permission
overprivilege. However, our contribution with this regards lies in
our logical reasoning solution aiming to apply our protection map
for the detection purpose.
Static analysis on Android. Static analysis techniques have been
proposed to address the special characteristics of Android platform.
Particularly, FlowDroid [5], DroidSafe [14], AndroidLeaks [13],
Amandroid [36] and BidText [17] have employed static taint anal-
ysis on Android apps for tracing information flow and detecting
privacy leaks. Other tools such as Epicc [27], Didfail [21] and Ic-
cTA [22] handle other particular challenges of Android’s ICC. Our
analysis focuses on the access control aspect and abstracts API
implementations to AFGs.
9 CONCLUSION
We propose a novel approach to precisely generate Android API pro-
tection specification. Our solution statically analyzes the framework
to derive a precise protection specification, using path-sensitive
analysis and a novel graph abstraction technique. We further pro-
pose a logical reasoning based solution that leverages our maps to
detect security issues. Our results demonstrate the strengths of our
approach as a significant percentage of our generated specifications
cannot be correctly modeled without our proposed analysis.
ACKNOWLEDGEMENTS
We thank the anonymous reviewers for their constructive com-
ments. This research was supported, in part, by DARPA under con-
tract FA8650-15-C-7562, NSF under awards 1748764 and 1409668,
ONR under contracts N000141410468 and N000141712947, Sandia
National Lab under award 1701331, and ARO under grant W911NF-
16-1-0127. Any opinions, findings, and conclusions in this paper are
those of the authors only and do not necessarily reflect the views
of our sponsors.
REFERENCES
[1] Baksmali: a disassembler for Android’s dex format. 2017. (2017). Retrieved May
2, 2018 from https://github.com/JesusFreke/smali
[2] Yousra Aafer, Jianjun Huang, Yi Sun, Xiangyu Zhang, Ninghui Li, and Chen
Tian. 2018. AceDroid: Normalizing Diverse Android Access Control Checks for
Inconsistency Detection. In 25th Annual Network and Distributed System Security
Symposium, NDSS 2018, San Diego, California, USA, February 18-21, 2018. The
Internet Society.
[3] Yousra Aafer, Nan Zhang, Zhongwen Zhang, Xiao Zhang, Kai Chen, XiaoFeng
Wang, Xiaoyong Zhou, Wenliang Du, and Michael Grace. 2015. Hare Hunt-
ing in the Wild Android: A Study on the Threat of Hanging Attribute Refer-
ences. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and
Communications Security (CCS ’15). ACM, New York, NY, USA, 1248–1259. DOI:
http://dx.doi.org/10.1145/2810103.2813648
[4] Smali: an assembler for Android’s dex format. 2017. (2017). https://github.com/
JesusFreke/smali
[5] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. Flow-
Droid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint
Analysis for Android Apps. In Proceedings of the 35th ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI ’14). New York, NY,
USA, 11. DOI:http://dx.doi.org/10.1145/2594291.2594299
[6] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. 2012. PScout:
Analyzing the Android Permission Specification. In Proceedings of the 2012 ACM
Conference on Computer and Communications Security (CCS ’12). ACM, New York,
NY, USA, 217–228. DOI:http://dx.doi.org/10.1145/2382196.2382222
[7] Michael Backes, Sven Bugiel, Erik Derr, Patrick McDaniel, Damien Octeau, and Se-
bastian Weisgerber. 2016. On Demystifying the Android Application Framework:
Re-Visiting Android Permission Specification Analysis. In 25th USENIX Security
Symposium (USENIX Security 16). USENIX Association, Austin, TX, 1101–1118.
[8] ART compiler. 2017. (2017). https://source.android.com/devices/tech/dalvik/
[9] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel.
2013. An Empirical Study of Cryptographic Misuse in Android Applications.
In Proceedings of the 2013 ACM SIGSAC Conference on Computer &#38; Com-
munications Security (CCS ’13). ACM, New York, NY, USA, 73–84. DOI:http:
//dx.doi.org/10.1145/2508859.2516693
[10] Sascha Fahl, Marian Harbach, Marten Oltrogge, Thomas Muders, and Matthew
Smith. 2013. Hey, You, Get Off of My Clipboard. Springer Berlin Heidelberg, Berlin,
Heidelberg, 144–161. DOI:http://dx.doi.org/10.1007/978-3-642-39884-1_12
[11] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner.
2011. Android permissions demystified. In Proceedings of the 18th ACM conference
on Computer and communications security (CCS ’11). ACM, New York, NY, USA,
12. DOI:http://dx.doi.org/10.1145/2046707.2046779
[12] Adrienne Porter Felt, Helen J. Wang, Alexander Moshchuk, Steven Hanna, and
Erika Chin. 2011. Permission Re-delegation: Attacks and Defenses. In Proceedings
of the 20th USENIX Conference on Security (SEC’11). USENIX Association, Berkeley,
CA, USA, 22–22. http://dl.acm.org/citation.cfm?id=2028067.2028089
[13] Clint Gibler, Jonathan Crussell, Jeremy Erickson, and Hao Chen. 2012. Androi-
dLeaks: Automatically Detecting Potential Privacy Leaks in Android Applications
on a Large Scale. In Proceedings of the 5th International Conference on Trust and
Trustworthy Computing (TRUST’12). Springer-Verlag, Berlin, Heidelberg, 291–307.
DOI:http://dx.doi.org/10.1007/978-3-642-30921-2_17
[14] Michael I. Gordon, Deokhwan Kim, Jeff Perkins, Limei Gilham, Nguyen Nguyen,
and Martin Rinard. 2015. Information-Flow Analysis of Android Applications
in DroidSafe. In Proceedings of the 22nd Annual Network and Distributed System
Security Symposium (NDSS).
[15] Michael Grace, Yajin Zhou, Zhi Wang, and Xuxian Jiang. 2012. Systematic
Detection of Capability Leaks in Stock Android Smartphones. In Proceedings
of the 19th Network and Distributed System Security Symposium (NDSS). http:
//www.csc.ncsu.edu/faculty/jiang/pubs/NDSS12_WOODPECKER.pdf
[16] Jianjun Huang, Zhichun Li, Xusheng Xiao, Zhenyu Wu, Kangjie Lu, Xiangyu
Zhang, and Guofei Jiang. 2015. SUPOR: Precise and Scalable Sensitive User Input
Detection for Android Apps. In Proceedings of the 24th USENIX Conference on
Security Symposium (SEC’15). USENIX Association, Berkeley, CA, USA, 977–992.
http://dl.acm.org/citation.cfm?id=2831143.2831205
[17] Jianjun Huang, Xiangyu Zhang, and Lin Tan. 2016. Detecting Sensitive Data
Disclosure via Bi-directional Text Correlation Analysis. In Proceedings of the
2016 24th ACM SIGSOFT International Symposium on Foundations of Software
Engineering (FSE 2016). ACM, New York, NY, USA, 169–180. DOI:http://dx.doi.
org/10.1145/2950290.2950348
(2017).
[18] Jianjun Huang, Xiangyu Zhang, Lin Tan, Peng Wang, and Bin Liang. 2014. As-
Droid: Detecting Stealthy Behaviors in Android Applications by User Interface
and Program Behavior Contradiction. In Proceedings of the 36th International Con-
ference on Software Engineering (ICSE 2014). ACM, New York, NY, USA, 1036–1046.
DOI:http://dx.doi.org/10.1145/2568225.2568301
[19] IBM. 2017. WALA: T.J. Watson Libraries for Analysis. http://wala.sourceforge.net.
[20] Soo Hyeon Kim, Daewan Han, and Dong Hoon Lee. 2013. Predictability of
Android OpenSSL’s Pseudo Random Number Generator. In Proceedings of the
2013 ACM SIGSAC Conference on Computer and Communications Security (CCS
’13). ACM, New York, NY, USA, 659–668. DOI:http://dx.doi.org/10.1145/2508859.
2516706
[21] William Klieber, Lori Flynn, Amar Bhosale, Limin Jia, and Lujo Bauer. 2014.
Android Taint Flow Analysis for App Sets. In Proceedings of the 3rd ACM SIGPLAN
International Workshop on the State of the Art in Java Program Analysis (SOAP ’14).
ACM, New York, NY, USA, 1–6. DOI:http://dx.doi.org/10.1145/2614628.2614633
[22] Li Li, Alexandre Bartel, Jacques Klein, Yves Le Traon, Steven Arzt, Siegfried
Rasthofer, Eric Bodden, Damien Octeau, and Patrick McDaniel. 2014. I know
what leaked in your pocket: uncovering privacy leaks on Android Apps with
Static Taint Analysis. arXiv preprint arXiv:1404.7431 (2014).
[23] Tongxin Li, Xiaoyong Zhou, Luyi Xing, Yeonjoon Lee, Muhammad Naveed,
XiaoFeng Wang, and Xinhui Han. 2014. Mayhem in the Push Clouds: Under-
standing and Mitigating Security Hazards in Mobile Push-Messaging Services. In
Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’14). ACM, New York, NY, USA.
[24] Kangjie Lu, Zhichun Li, Vasileios P Kemerlis, Zhenyu Wu, Long Lu, Cong Zheng,
Zhiyun Qian, Wenke Lee, and Guofei Jiang. 2015. Checking More and Alerting
Less: Detecting Privacy Leakages via Enhanced Data-flow Analysis and Peer
Voting.. In the 2015 Network and Distributed System Security Symposium (NDSS
’15).
[25] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. CHEX:
statically vetting Android apps for component hijacking vulnerabilities. In Pro-
ceedings of the 2012 ACM conference on Computer and communications security
(CCS ’12). ACM, New York, NY, USA, 229–240. DOI:http://dx.doi.org/10.1145/
2382196.2382223
[26] Microsoft Research. 2017. Z3 Prover. https://github.com/Z3Prover/z3. (2017).
[27] Damien Octeau, Patrick McDaniel, Somesh Jha, Alexandre Bartel, Eric Bodden,
Jacques Klein, and Yves Le Traon. 2013. Effective Inter-component Communica-
tion Mapping in Android with Epicc: An Essential Step Towards Holistic Security
Analysis. In Proceedings of the 22Nd USENIX Conference on Security (SEC’13).
USENIX Association, Berkeley, CA, USA, 543–558. http://dl.acm.org/citation.
cfm?id=2534766.2534813
[28] Rahul Pandita, Xusheng Xiao, Wei Yang, William Enck, and Tao Xie. 2013. WHY-
PER: Towards Automating Risk Assessment of Mobile Applications. In Proceed-
ings of the 22Nd USENIX Conference on Security (SEC’13). USENIX Association,
Berkeley, CA, USA, 527–542. http://dl.acm.org/citation.cfm?id=2534766.2534812
[29] Zhengyang Qu, Vaibhav Rastogi, Xinyi Zhang, Yan Chen, Tiantian Zhu, and
Zhong Chen. 2014. AutoCog: Measuring the Description-to-permission Fidelity
in Android Applications. In Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’14). ACM, New York, NY, USA,
1354–1365. DOI:http://dx.doi.org/10.1145/2660267.2660287
[30] Quine, J. 2017. Quine?McCluskey algorithm. https://en.wikipedia.org/wiki/
Quine?McCluskey_algorithm. (2017).
[31] sdat2img: Convert sparse Android data image (.dat) into filesystem ext4 image
(.img). 2016. (2016). https://github.com/xpirt/sdat2img
[32] Yuru Shao, Jason Ott, Qi Alfred Chen, Zhiyun Qian, and Z Morley Mao. 2016.
Kratos: Discovering inconsistent security policy enforcement in the android
framework. In 23rd Annual Network and Distributed System Security Symposium,
NDSS 2016, San Diego, California, USA, February 21-24, 2016. The Internet Society.
Re-
trieved May 2, 2018 from http://android-revolution-hd.blogspot.com/p/
android-revolution-hd-mirror-site-var.html
[33] Android Revolution Mobile Device Technologies. 2017.
[34] Samsung Updates. 2017. Samsung Updates: Latest News and Firmware for your
(2017).
Samsung Devices! (2017). http://samsung-updates.com/
[35] Official Android Developer Website. 2018. (2018). https://developer.android.com/
index.html
[36] Fengguo Wei, Sankardas Roy, Xinming Ou, and Robby. 2014. Amandroid: A
Precise and General Inter-component Data Flow Analysis Framework for Security
Vetting of Android Apps. In Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’14). ACM, New York, NY, USA, 13.
DOI:http://dx.doi.org/10.1145/2660267.2660357
[37] Lei Wu, Michael Grace, Yajin Zhou, Chiachih Wu, and Xuxian Jiang. 2013. The
impact of vendor customizations on android security. In Proceedings of the 2013
ACM SIGSAC conference on Computer communications security (CCS ’13). ACM,
New York, NY, USA, 623–634. DOI:http://dx.doi.org/10.1145/2508859.2516728
[38] Xiao Zhang, Kailiang Ying, Yousra Aafer, Zhenshen Qiu, and Wenliang Du. 2016.
Life after App Uninstallation: Are the Data Still Alive? Data Residue Attacks on
Android. In 23rd Annual Network and Distributed System Security Symposium,
NDSS 2016, San Diego, California, USA, February 21-24, 2016. The Internet Society.
[39] Yajin Zhou and Xuxian Jiang. 2013. Detecting Passive Content Leaks and Pollution
in Android Applications. In In Proceedings of the 20th Annual Symposium on
Network and Distributed System Security, NDSS ’13. The Internet Society.