Kyle Benac
Alexander Antukh
Wen Bin Kong
Abdessamad Temmar
Bolot Kerimbaev
Cláudio André
Slawomir Kosowski
11
Frontispiece
Contributors
Contributors have contributed quality content and have at least 50 additions logged in the GitHub repository.
Abderrahmane Aftahi, Jin Kung Ong, Koki Takeyama, Sjoerd Langkemper, Gerhard Wagner, Michael Helwig, Pece
Milosev, Ryan Teoh, Denis Pilipchuk, Dharshin De Silva, Paulino Calderon, Anatoly Rosencrantz, Abhinav Sejpal,
José Carlos Andreu, Dominique Righetto, Raul Siles, Daniel Ramirez Martin, Yogesh Sharma, Enrico Verzegnassi,
Nick Epson, Emil Tostrup, Prathan Phongthiproek, Tom Welch, Luander Ribeiro, Heaven L. Hodges, Shiv Sahni,
Dario Incalza, Akanksha Bana, Oguzhan Topgul, Vikas Gupta, Sijo Abraham, David Fern, Pishu Mahtani, Anuruddha
E, Jay Mbolda, Elie Saad.
Reviewers
Reviewers have consistently provided useful feedback through GitHub issues and pull request comments.
Jeroen Beckers
Sjoerd Langkemper
Anant Shrivastava
Editors
Heaven Hodges
Caitlin Andrews
Nick Epson
Anita Diamond
Anna Szkudlarek
Others
Many other contributors have committed small amounts of content, such as a single word or sentence (less than 50
additions). The full list of contributors is available on GitHub.
Sponsors
While both the MASVS and the MSTG are created and maintained by the community on a voluntary basis, sometimes
a little bit of outside help is required. We therefore thank our sponsors for providing the funds to be able to hire
technical editors. Note that their sponsorship does not influence the content of the MASVS or MSTG in any way. The
sponsorship packages are described on the OWASP Project Wiki.
Honorable Benefactor
Older Versions
The Mobile Security Testing Guide was initiated by Milan Singh Thakur in 2015. The original document was hosted on
Google Drive. Guide development was moved to GitHub in October 2016.
12
Frontispiece
OWASP MSTG "Beta 2" (Google Doc)
Top
Authors Reviewers
Contributors
Andrew
Jim Manico,
Milan Singh Thakur, Abhinav Sejpal, Blessen Thomas, Dennis Titze, Davide Muller,
Paco Hope,
Cioccia, Pragati Singh, Mohammad Hamed Dadpour, David Fern, Ali Jonathan
Pragati
Yazdani, Mirza Ali, Rahil Parikh, Anant Shrivastava, Stephen Corbiaux, Ryan Carter,
Singh, Yair
Dewhurst, Anto Joseph, Bao Lee, Shiv Patel, Nutan Kumar Panda, Julian Stephanie
Amit, Amin
Schütte, Stephanie Vanroelen, Bernard Wagner, Gerhard Wagner, Javier Vanroelen,
Lalji, OWASP
Dominguez Milan Singh
Mobile Team
Thakur
OWASP MSTG "Beta 1" (Google Doc)
Authors Reviewers Top Contributors
Andrew
Milan Singh Thakur, Abhinav Sejpal, Pragati Singh, Jim Manico, Paco Hope, Yair
Muller,
Mohammad Hamed Dadpour, David Fern, Mirza Ali, Amit, Amin Lalji, OWASP
Jonathan
Rahil Parikh Mobile Team
Carter
13
Introduction to the Mobile Security Testing Guide
Overview
Introduction to the OWASP Mobile Security Testing Guide
New technology always introduces new security risks, and mobile computing is no exception. Security concerns for
mobile apps differ from traditional desktop software in some important ways. Modern mobile operating systems are
arguably more secure than traditional desktop operating systems, but problems can still appear when we don't
carefully consider security during mobile app development. Data storage, inter-app communication, proper usage of
cryptographic APIs, and secure network communication are only some of these considerations.
Key Areas in Mobile Application Security
Many mobile app penetration testers have a background in network and web app penetration testing, a quality that is
valuable for mobile app testing. Almost every mobile app talks to a back-end service, and those services are prone to
the same types of attacks we are familiar with in web apps on desktop machines. Mobile apps differ in that there is a
smaller attack surface and therefore more security against injection and similar attacks. Instead, we must prioritize
data protection on the device and the network to increase mobile security.
Let's discuss the key areas in mobile app security.
Local Data Storage
The protection of sensitive data, such as user credentials and private information, is crucial to mobile security. If an
app uses operating system APIs such as local storage or inter-process communication (IPC) improperly, the app
might expose sensitive data to other apps running on the same device. It may also unintentionally leak data to cloud
storage, backups, or the keyboard cache. Additionally, mobile devices can be lost or stolen more easily compared to
other types of devices, so it's more likely an individual can gain physical access to the device, making it easier to
retrieve the data.
When developing mobile apps, we must take extra care when storing user data. For example, we can use appropriate
key storage APIs and take advantage of hardware-backed security features when available.
Fragmentation is a problem we deal with especially on Android devices. Not every Android device offers hardware-
backed secure storage, and many devices are running outdated versions of Android. For an app to be supported on
these out-of-date devices, it would have to be created using an older version of Android's API which may lack
important security features. For maximum security, the best choice is to create apps with the current API version even
though that excludes some users.
Communication with Trusted Endpoints
Mobile devices regularly connect to a variety of networks, including public WiFi networks shared with other (potentially
malicious) clients. This creates opportunities for a wide variety of network-based attacks ranging from simple to
complicated and old to new. It's crucial to maintain the confidentiality and integrity of information exchanged between
the mobile app and remote service endpoints. As a basic requirement, mobile apps must set up a secure, encrypted
channel for network communication using the TLS protocol with appropriate settings.
14
Introduction to the Mobile Security Testing Guide
15
Introduction to the Mobile Security Testing Guide
Authentication and Authorization
In most cases, sending users to log in to a remote service is an integral part of the overall mobile app architecture.
Even though most of the authentication and authorization logic happens at the endpoint, there are also some
implementation challenges on the mobile app side. Unlike web apps, mobile apps often store long-time session
tokens that are unlocked with user-to-device authentication features such as fingerprint scanning. While this allows for
a quicker login and better user experience (nobody likes to enter complex passwords), it also introduces additional
complexity and room for error.
Mobile app architectures also increasingly incorporate authorization frameworks (such as OAuth2) that delegate
authentication to a separate service or outsource the authentication process to an authentication provider. Using
OAuth2 allows the client-side authentication logic to be outsourced to other apps on the same device (e.g. the system
browser). Security testers must know the advantages and disadvantages of different possible authorization
frameworks and architectures.
Interaction with the Mobile Platform
Mobile operating system architectures differ from classical desktop architectures in important ways. For example, all
mobile operating systems implement app permission systems that regulate access to specific APIs. They also offer
more (Android) or less rich (iOS) inter-process communication (IPC) facilities that enable apps to exchange signals
and data. These platform-specific features come with their own set of pitfalls. For example, if IPC APIs are misused,
sensitive data or functionality might be unintentionally exposed to other apps running on the device.
Code Quality and Exploit Mitigation
Traditional injection and memory management issues aren't often seen in mobile apps due to the smaller attack
surface. Mobile apps mostly interact with the trusted backend service and the UI, so even if many buffer overflow
vulnerabilities exist in the app, those vulnerabilities usually don't open up any useful attack vectors. The same applies
to browser exploits such as cross-site scripting (XSS allows attackers to inject scripts into web pages) that are very
prevalent in web apps. However, there are always exceptions. XSS is theoretically possible on mobile in some cases,
but it's very rare to see XSS issues that an individual can exploit. For more information about XSS, see Testing for
Cross-Site Scripting Flaws in the chapter Testing Code Quality.
This protection from injection and memory management issues doesn't mean that app developers can get away with
writing sloppy code. Following security best practices results in hardened (secure) release builds that are resilient
against tampering. Free security features offered by compilers and mobile SDKs help increase security and mitigate
attacks.
Anti-Tampering and Anti-Reversing
There are three things you should never bring up in polite conversations: religion, politics, and code obfuscation. Many
security experts dismiss client-side protections outright. However, software protection controls are widely used in the
mobile app world, so security testers need ways to deal with these protections. We believe there's a benefit to client-
side protections if they are employed with a clear purpose and realistic expectations in mind and aren't used to
replace security controls.
The OWASP Mobile AppSec Verification Standard
This guide is closely related to the OWASP Mobile Application Security Verification Standard (MASVS). The MASVS
defines a mobile app security model and lists generic security requirements for mobile apps. It can be used by
architects, developers, testers, security professionals, and consumers to define and understand the qualities of a
16
Introduction to the Mobile Security Testing Guide
secure mobile app. The MSTG maps to the same basic set of security requirements offered by the MASVS and
depending on the context they can be used individually or combined to achieve different objectives.
For example, the MASVS requirements can be used in an app's planning and architecture design stages while the
checklist and testing guide may serve as a baseline for manual security testing or as a template for automated
security tests during or after development. In the Mobile App Security Testing chapter we'll describe how you can
apply the checklist and MSTG to a mobile app penetration test.
Navigating the Mobile Security Testing Guide
The MSTG contains descriptions of all requirements specified in the MASVS. The MSTG contains the following main
sections:
1. The General Testing Guide contains a mobile app security testing methodology and general vulnerability analysis
techniques as they apply to mobile app security. It also contains additional technical test cases that are OS-
independent, such as authentication and session management, network communications, and cryptography.
2. The Android Testing Guide covers mobile security testing for the Android platform, including security basics,
security test cases, reverse engineering techniques and prevention, and tampering techniques and prevention.
3. The iOS Testing Guide covers mobile security testing for the iOS platform, including an overview of the iOS OS,
security testing, reverse engineering techniques and prevention, and tampering techniques and prevention.
17
Mobile App Taxonomy
General Testing Guide
Mobile App Taxonomy
The term "mobile app" refers to a self-contained computer program designed to execute on a mobile device. Today,
the Android and iOS operating systems cumulatively comprise more than 99% of the mobile OS market share.
Additionally, mobile Internet usage has surpassed desktop usage for the first time in history, making mobile browsing
and apps the most widespread kind of Internet-capable applications.
In this guide, we'll use the term "app" as a general term for referring to any kind of application running on
popular mobile OSes.
In a basic sense, apps are designed to run either directly on the platform for which they’re designed, on top of a smart
device’s mobile browser, or using a mix of the two. Throughout the following chapter, we will define characteristics
that qualify an app for its respective place in mobile app taxonomy as well as discuss differences for each variation.
Native App
Mobile operating systems, including Android and iOS, come with a Software Development Kit (SDK) for developing
applications specific to the OS. Such applications are referred to as native to the system for which they have been
developed. When discussing an app, the general assumption is that it is a native app implemented in a standard
programming language for the respective operating system - Objective-C or Swift for iOS, and Java or Kotlin for
Android.
Native apps inherently have the capability to provide the fastest performance with the highest degree of reliability.
They usually adhere to platform-specific design principles (e.g. the Android Design Principles), which tends to result in
a more consistent user interface (UI) compared to hybrid or web apps. Due to their close integration with the operating
system, native apps can directly access almost every component of the device (camera, sensors, hardware-backed
key stores, etc.).
Some ambiguity exists when discussing native apps for Android as the platform provides two development kits - the
Android SDK and the Android NDK. The SDK, which is based on the Java and Kotlin programming language, is the
default for developing apps. The NDK (or Native Development Kit) is a C/C++ development kit used for developing
binary libraries that can directly access lower level APIs (such as OpenGL). These libraries can be included in regular
apps built with the SDK. Therefore, we say that Android native apps (i.e. built with the SDK) may have native code
built with the NDK.
The most obvious downside of native apps is that they target only one specific platform. To build the same app for
both Android and iOS, one needs to maintain two independent code bases, or introduce often complex development
tools to port a single code base to two platforms (e.g. Xamarin).
Web App
Mobile web apps (or simply, web apps) are websites designed to look and feel like a native app. These apps run on
top of a device’s browser and are usually developed in HTML5, much like a modern web page. Launcher icons may
be created to parallel the same feel of accessing a native app; however, these icons are essentially the same as a
browser bookmark, simply opening the default web browser to load the referenced web page.
Web apps have limited integration with the general components of the device as they run within the confines of a
browser (i.e. they are “sandboxed”) and usually lack in performance compared to native apps. Since a web app
typically targets multiple platforms, their UIs do not follow some of the design principles of a specific platform. The
18
Mobile App Taxonomy
biggest advantage is reduced development and maintenance costs associated with a single code base as well as
enabling developers to distribute updates without engaging the platform-specific app stores. For example, a change to
the HTML file for a web app can serve as viable, cross-platform update whereas an update to a store-based app
requires considerably more effort.
Hybrid App
Hybrid apps attempt to fill the gap between native and web apps. A hybrid app executes like a native app, but a
majority of the processes rely on web technologies, meaning a portion of the app runs in an embedded web browser
(commonly called “webview”). As such, hybrid apps inherit both pros and cons of native and web apps.
A web-to-native abstraction layer enables access to device capabilities for hybrid apps not accessible to a pure web
app. Depending on the framework used for development, one code base can result in multiple applications that target
different platforms, with a UI closely resembling that of the original platform for which the app was developed.
Following is a non-exhaustive list of more popular frameworks for developing hybrid apps:
Apache Cordova
Framework 7
Ionic
jQuery Mobile
Google Flutter
Native Script
Onsen UI
React Native
Sencha Touch
Progressive Web App
Progressive Web Apps (PWA) load like regular web pages, but differ from usual web apps in several ways. For
example it's possible to work offline and access to mobile device hardware is possible, that traditionally is only
available to native mobile apps.
PWAs combine different open standards of the web offered by modern browsers to provide benefits of a rich mobile
experience. A Web App Manifest, which is a simple JSON file, can be used to configure the behavior of the app after
"installation".
PWAs are supported by Android and iOS, but not all hardware features are yet available. For example Push
Notifications, Face ID on iPhone X or ARKit for augmented reality is not available yet on iOS. An overview of PWA
and supported features on each platform can be found in a Medium article from Maximiliano Firtman.
What's Covered in the Mobile Testing Guide
Throughout this guide, we will focus on apps for the two platforms dominating the market: Android and iOS. Mobile
devices are currently the most common device class running these platforms – increasingly however, the same
platforms (in particular, Android) run on other devices, such as smartwatches, TVs, car navigation/audio systems, and
other embedded systems.
Given the vast amount of mobile app frameworks available it would be impossible to cover all of them exhaustively.
Therefore, we focus on native apps on each operating system. However, the same techniques are also useful when
dealing with web or hybrid apps (ultimately, no matter the framework, every app is based on native components).
19
Mobile App Taxonomy
20
Mobile App Security Testing
Mobile App Security Testing
In the following sections we'll provide a brief overview of general security testing principles and key terminology. The
concepts introduced are largely identical to those found in other types of penetration testing, so if you are an
experienced tester you may be familiar with some of the content.
Throughout the guide, we use "mobile app security testing" as a catchall phrase to refer to the evaluation of mobile
app security via static and dynamic analysis. Terms such as "mobile app penetration testing" and "mobile app security
review" are used somewhat inconsistently in the security industry, but these terms refer to roughly the same thing. A
mobile app security test is usually part of a larger security assessment or penetration test that encompasses the
client-server architecture and server-side APIs used by the mobile app.
In this guide, we cover mobile app security testing in two contexts. The first is the "classical" security test completed
near the end of the development life cycle. In this context, the tester accesses a nearly finished or production-ready
version of the app, identifies security issues, and writes a (usually devastating) report. The other context is
characterized by the implementation of requirements and the automation of security tests from the beginning of the
software development life cycle onwards. The same basic requirements and test cases apply to both contexts, but the
high-level method and the level of client interaction differ.
Principles of Testing
White-box Testing versus Black-box Testing
Let's start by defining the concepts:
Black-box testing is conducted without the tester's having any information about the app being tested. This
process is sometimes called "zero-knowledge testing". The main purpose of this test is allowing the tester to
behave like a real attacker in the sense of exploring possible uses for publicly available and discoverable
information.
White-box testing (sometimes called "full knowledge testing") is the total opposite of black-box testing in the
sense that the tester has full knowledge of the app. The knowledge may encompass source code,
documentation, and diagrams. This approach allows much faster testing than black-box testing due to it's
transparency and with the additional knowledge gained a tester can build much more sophisticated and granular
test cases.
Gray-box testing is all testing that falls in between the two aforementioned testing types: some information is
provided to the tester (usually credentials only), and other information is intended to be discovered. This type of
testing is an interesting compromise in the number of test cases, the cost, the speed, and the scope of testing.