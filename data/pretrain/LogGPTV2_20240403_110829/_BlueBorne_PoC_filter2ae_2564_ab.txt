            l2cap_sig_channel(conn, skb);
            break;
        case L2CAP_CID_CONN_LESS:
            psm = get_unaligned((__le16 *) skb->data);
            skb_pull(skb, L2CAP_PSMLEN_SIZE);
            l2cap_conless_channel(conn, psm, skb);
            break;
        case L2CAP_CID_LE_SIGNALING:
            l2cap_le_sig_channel(conn, skb);
            break;
        default:
            l2cap_data_channel(conn, cid, skb);
            break;
        }
3，底层L2CAP的连接，cid固定是L2CAP_CID_SIGNALING，于是会走l2cap_sig_channel，l2cap_sig_channel得到的是剥离了头部的L2CAP的数据，这一部将把数据里的cmd头部解析并剥离，再传给l2cap_bredr_sig_cmd进行处理：
    static inline void l2cap_sig_channel(struct l2cap_conn *conn,
                         struct sk_buff *skb)
    {
        ...
        while (len >= L2CAP_CMD_HDR_SIZE) {
            u16 cmd_len;
            memcpy(&cmd, data, L2CAP_CMD_HDR_SIZE);  //取得cmd头部数据
            data += L2CAP_CMD_HDR_SIZE;
            len  -= L2CAP_CMD_HDR_SIZE;
            cmd_len = le16_to_cpu(cmd.len);  //取得cmd的大小
        ...
            err = l2cap_bredr_sig_cmd(conn, &cmd, cmd_len, data); //传给l2cap_bredr_sig_cmd处理
        ...
            data += cmd_len;
            len  -= cmd_len;
        }
    drop:
        kfree_skb(skb);
    }
到这里，我们应该能得出L2CAP协议的数据结构：
4， 随后数据进入到了l2cap_bredr_sig_cmd函数进行处理。这里也就是处理L2CAP各种请求的核心函数了：
    static inline int l2cap_bredr_sig_cmd(struct l2cap_conn *conn,
                          struct l2cap_cmd_hdr *cmd, u16 cmd_len,
                          u8 *data)
    {
        int err = 0;
        switch (cmd->code) {
        case L2CAP_CONN_REQ:
            err = l2cap_connect_req(conn, cmd, cmd_len, data);
            break;
        case L2CAP_CONN_RSP:
        case L2CAP_CREATE_CHAN_RSP:
            l2cap_connect_create_rsp(conn, cmd, cmd_len, data);
            break;
        case L2CAP_CONF_REQ:
            err = l2cap_config_req(conn, cmd, cmd_len, data);
            break;
        case L2CAP_CONF_RSP: 
            l2cap_config_rsp(conn, cmd, cmd_len, data);  //漏洞函数
            break;
        ...
        case L2CAP_INFO_REQ:
            err = l2cap_information_req(conn, cmd, cmd_len, data);
            break;
        case L2CAP_INFO_RSP:
            l2cap_information_rsp(conn, cmd, cmd_len, data);
            break;
        ...
        }
        return err;
    }
好了，接下来终于可以分析漏洞了。我们的漏洞发生在对 **L2CAP_CONFIG_RSP（config response）**
这个cmd的处理上。其实漏洞分析armis的paper已经写的很详尽了，我这里也就权当翻译了吧，然后再加点自己的理解。那么来看l2cap_config_rsp:
    static inline int l2cap_config_rsp(struct l2cap_conn *conn,
                       struct l2cap_cmd_hdr *cmd, u16 cmd_len,
                       u8 *data)
    {
        struct l2cap_conf_rsp *rsp = (struct l2cap_conf_rsp *)data;
        ...
        scid   = __le16_to_cpu(rsp->scid);   //从包中剥离出scid
        flags  = __le16_to_cpu(rsp->flags);  //从包中剥离出flag
        result = __le16_to_cpu(rsp->result); //从包中剥离出result
        switch (result) {
        case L2CAP_CONF_SUCCESS:
            l2cap_conf_rfc_get(chan, rsp->data, len);
            clear_bit(CONF_REM_CONF_PEND, &chan->conf_state);
            break;
        case L2CAP_CONF_PENDING:
            set_bit(CONF_REM_CONF_PEND, &chan->conf_state);
            if (test_bit(CONF_LOC_CONF_PEND, &chan->conf_state)) {  //判断conf_state是否是CONF_LOC_CONF_PEND
                char buf[64]; //buf数组大小64字节
                len = l2cap_parse_conf_rsp(chan, rsp->data, len,
                               buf, &result);   //data仍然是包中数据，len也是包中数据。
                ...
            }
            goto done;
        ...
当收到的数据包里，满足 **result == L2CAP_CONF_PENDING** ，且自身的连接状态 **conf_state ==
CONF_LOC_CONF_PEND** 的时候，会走到 **l2cap_parse_conf_rsp**
函数里，而且传过去的buf是个长度为64的数据，参数len ，参数rsp->data都是由包中的内容来任意确定。那么在
**l2cap_parse_conf_rsp** 函数里：
    static int l2cap_parse_conf_rsp(struct l2cap_chan *chan, void *rsp, int len,
                    void *data, u16 *result)
    {
        struct l2cap_conf_req *req = data;
        void *ptr = req->data;
        int type, olen;
        unsigned long val;
        while (len >= L2CAP_CONF_OPT_SIZE) { //len没有被检查，由接收到的包内容控制
            len -= l2cap_get_conf_opt(&rsp, &type, &olen, &val);
            switch (type) {
            case L2CAP_CONF_MTU:
                if (val imtu = L2CAP_DEFAULT_MIN_MTU;
                } else
                    chan->imtu = val;
                l2cap_add_conf_opt(&ptr, L2CAP_CONF_MTU, 2, chan->imtu);
                break;
            case ...
            }
        }
    }
    static void l2cap_add_conf_opt(void **ptr, u8 type, u8 len, unsigned long val)
    {
        struct l2cap_conf_opt *opt = *ptr;
        opt->type = type;
        opt->len  = len;
        switch (len) {
        case 1:
            *((u8 *) opt->val)  = val;
            break;
        case 2:
            put_unaligned_le16(val, opt->val);
            break;
        case 4:
            put_unaligned_le32(val, opt->val);
            break;
        default:
            memcpy(opt->val, (void *) val, len);
            break;
        }
        *ptr += L2CAP_CONF_OPT_SIZE + len;
    }
仔细阅读这个函数的代码可以知道，这个函数的功能就是 **根据传进来的包，来构造将要发出去的包**
。而数据的出口就是传进去的64字节大小的buf。但是对传入的包的数据的长度并没有做检验，那么当len很大时，就会一直往出口buf里写数据，比如有64个
**L2CAP_CONF_MTU** 类型的opt，那么就会往buf里写上 **64*(L2CAP_CONF_OPT_SIZE + 2)**
个字节，那么显然这里就发生了溢出。由于buf是栈上定义的数据结构，那么这里就是一个栈溢出。 不过值得注意的是，代码要走进去，需要 **conf_state
== CONF_LOC_CONF_PEND** ，这个状态是在处理 **L2CAP_CONF_REQ** 数据包的时候设置的：
    static int l2cap_parse_conf_req(struct l2cap_chan *chan, void *data)
    {
        ...
        u8 remote_efs = 0;
        u16 result = L2CAP_CONF_SUCCESS;
        ...
        while (len >= L2CAP_CONF_OPT_SIZE) {