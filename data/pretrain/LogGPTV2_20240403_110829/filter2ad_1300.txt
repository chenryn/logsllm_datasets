# Guide Me to Exploit: Assisted ROP Exploit Generation for ActionScript Virtual Machine

**Authors:** Fadi Yilmaz, Meera Sridhar, and Wontae Choi

**Conference:** 36th Annual Computer Security Applications Conference (ACSAC’20), December 7-11, 2020, Online

**Presenter:** Fadi Yilmaz

**Funding:** This work was supported in part by the National Science Foundation Grant No. 1566321.

## Motivation for Automated Exploit Generation (AEG)

- Monitoring the execution of exploit scripts is essential.
- Identifying underlying weaknesses in target applications.
- Utilizing unconventional methods to exploit vulnerabilities.

## AEG Overview

### Determining Exploitability
- **Younis et al. (SQJ’16):** Assessing vulnerability exploitability risk using software properties.
- **Avgerinos et al. (NDSS’11):** AEG: Automatic Exploit Generation, which explores all possible execution paths.

### Vulnerability State to Exploit State
- The process involves transitioning from a vulnerability state to an exploit state through multiple levels of execution paths.

## AEG Components

### Fuzzer
- **Miller et al. (ACM’90), Jayaraman et al. (NFM’09), Rawat et al. (NDSS’17):** 
  - **Pros:** Fast and easy to build.
  - **Cons:** Only explores one execution path per run, limited by complex grammar rules for executables, and has an infinitesimal chance of success.

### Symbolic Execution
- **King et al. (ACM’76):**
  - **Pros:** Explores all execution paths symbolically in one run.
  - **Cons:** Suffers from the path-explosion problem.

## GUIDEXP: A Prototype Semi-Automatic AEG Tool

- **First guided (semi-automatic) exploit generation tool for AVM implementations.**
- **Does not rely on a fuzzer or a symbolic execution tool.**

## Intuition Behind Target Exploit Generation

- **Structure of the target exploit:**
  - **Exploit pattern:**
    - **Search space:**
    - **Set of instructions:**
    - **Invariant:**
    - **Test:**

## Preparation: Defining Exploit Subgoals

### Phase 1: Exploit Subgoal Processing
- **Reads exploit subgoals and invariants.**

### Phase 2: Generates Candidate Slices and Validates Invariant
- **Parses the trigger slice.**
- **Generates candidate slices.**
- **Executes and tests candidate slices.**

### Phase 3: Evaluating Candidate Slices
- **Evaluates the execution of candidate slices.**

## Optimization Techniques

- **Exploit Deconstruction:**
  - Synthesizes smaller exploit subgoals in sequence.
  - Reduces complexity by ~10%.

- **Operand Stack Verification:**
  - Disqualifies candidate slices that perform illegal stack operations.
  - Achieves 98.78% accuracy.

- **Instruction Tiling:**
  - Glues instructions together to form more meaningful instruction chains.
  - Reduces complexity by ~10%.

- **Feedback from the AVM:**
  - Detects error-raising instruction prefixes.
  - Improves accuracy by 58%.

## Experimental Results

### Experiment I
- **CVE-2015-5119:**
  - **Open-source core implementation.**
  - **Closed-source standalone Flash Player Debugger.**
  - **Time difference due to starting/closing the Flash Player: 85ms on average, equivalent to 89% of the time.**

### Experiment II
- **Generating exploit scripts for different vulnerabilities with the closed-source debugger.**

## Limitations and Challenges

- **Compatibility:**
  - Different memory offsets.
  - Calling external libraries.
  - Debuggers.
- **PoCs:**
  - Perform malicious activities implicitly.
- **Accuracy:**
  - Unnecessary instructions increase time significantly (combinatorial rate).

## Key References

- **Younis et al. (SQJ’16):** Assessing vulnerability exploitability risk using software properties.
- **Avgerinos et al. (NDSS’11):** AEG: Automatic Exploit Generation.
- **Miller et al. (ACM’90):** An empirical study of the reliability of UNIX utilities.
- **Jayaraman et al. (NFM’09):** jFuzz: A concolic whitebox fuzzer for Java.
- **Rawat et al. (NDSS’17):** VUzzer: Application-aware Evolutionary Fuzzing.

## Acknowledgments

- **Fadi Yilmaz, UNC Charlotte, PI:EMAIL**
- **Meera Sridhar, UNC Charlotte, PI:EMAIL**
- **Wontae Choi, PI:EMAIL**

Thank you!