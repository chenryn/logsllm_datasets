title:Guide Me to Exploit: Assisted ROP Exploit Generation for ActionScript
Virtual Machine
author:Fadi Yilmaz and
Meera Sridhar and
Wontae Choi
1
Guide Me to Exploit: Assisted ROP Exploit Generation 
for ActionScript Virtual Machine 
Fadi Yilmaz, Meera Sridhar, and Wontae Choi 
36th Annual Computer Security Applications Conference (ACSAC’20)
December 7-11, 2020, Online
presented by 
Fadi Yilmaz
Work supported in part by National Science Foundation Grant No. 1566321 
Motivation of Automated Exploit Generation (AEG)
2
• Monitoring the execution of exploit scripts is crucial
• Underlying weaknesses of target applications
• Unorthodox methods to exploit vulnerabilities
AEG
3
• Determining the exploitability [Younis et al. SQJ’16]
• Explores all possible execution paths [Avgerinos et al. 
NDSS’11]
Vulnerability 
State
𝑛!
.
.
.
𝑛",!𝑛","
𝑛",$!
...
...
.
.
.
...
Level 1
Level 2
.
.
.
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
AEG Components
4
• Fuzzer [Miller et al. ACM’90, Jayaraman et al. NFM’09, Rawat et 
al. NDSS’17]
• Explores only one execution path in one run
Vulnerability 
State
𝑛!
.
.
.
𝑛",!𝑛","
𝑛",$!
...
...
.
.
.
...
Level 1
Level 2
.
.
.
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
AEG Components
5
• Fuzzer 
• Explores only one execution path in one run
𝑛",!𝑛","
𝑛",$!
Vulnerability 
State
𝑛!
.
.
.
...
...
.
.
.
...
Level 1
Level 2
.
.
.
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
AEG Components
• Symbolic Execution [King et al. ACM’76]
• Explores all execution paths symbolically in one run
6
Vulnerability 
State
𝑛!
.
.
.
𝑛",!𝑛","
𝑛",$!
...
...
.
.
.
...
Level 1
Level 2
.
.
.
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
AEG Components
7
• Symbolic Execution
• Explores all execution paths symbolically in one run
Vulnerability 
State
𝑛!
.
.
.
𝑛",!𝑛","
𝑛",$!
...
...
.
.
.
...
Level 1
Level 2
.
.
.
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
AEG Components
8
• Symbolic Execution 
• Explores all execution paths symbolically in one run
Vulnerability 
State
𝑛!
.
.
.
𝑛",!𝑛","
𝑛",$!
...
...
.
.
.
...
Level 1
Level 2
.
.
.
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
AEG Components
9
• Symbolic Execution 
• Explores all execution paths symbolically in one run
Vulnerability 
State
𝑛!
.
.
.
𝑛",!𝑛","
𝑛",$!
...
...
.
.
.
...
Level 1
Level 2
.
.
.
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
AEG Components
10
• Symbolic Execution 
• Explores all execution paths symbolically in one run
Vulnerability 
State
𝑛!
.
.
.
𝑛",!𝑛","
𝑛",$!
...
...
.
.
.
...
Level 1
Level 2
.
.
.
...
...
.
.
.
...
Level 𝑘
...
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
AEG Components
11
+pros
Fast, easy to build
Fuzzer
Complex grammar rules 
for executables 
Infinitesimal chance
-cons
+pros
Explores all execution 
paths in one run
Symbolic 
Execution
The path-explosion 
problem
-cons
GUIDEXP : A Prototype Semi-Automatic AEG Tool
12
• The first guided (semi-automatic) exploit generation tool for 
the AVM implementations
• Does not rely on a fuzzer or a symbolic execution tool
Intuition Behind Target Exploit Generation
13
• Structure of our target exploit
• Exploit pattern
Exploit Subgoals
14
• A search space
• Set of instructions
• An invariant
• The test
Preparation: Defining Exploit Subgoals, 
15
Phase 1
Target Exploit Subgoals
Inputs & Outputs
𝜏2
𝜏1
𝜏𝑛
𝜏𝑖 (Exploit Subgoal)
Search Space(𝜏𝑖 )
Phase 2
Phase 3
Trigger 
Slice
Parser
AST
Code 
Generator
Candidate
Slice
Invariant 
Validator
Next Exploit Subgoal
Checkpoint(𝜏𝑖 )
Exploit Subgoal
Manager
Slice, 𝜏𝑖 )
Decision(Candidate 
The Exploit
Exploit Subgoal
Parser
Invariant(𝜏𝑖 )
OUR AEG 
TOOL
Preparation: Defining Exploit Subgoals, 
16
Phase 1
Target Exploit Subgoals
Inputs & Outputs
𝜏2
𝜏1
𝜏𝑛
𝜏𝑖 (Exploit Subgoal)
Search Space(𝜏𝑖 )
Phase 2
Phase 3
Trigger 
Slice
Parser
AST
Code 
Generator
Candidate
Slice
Invariant 
Validator
Next Exploit Subgoal
Checkpoint(𝜏𝑖 )
Exploit Subgoal
Manager
Slice, 𝜏𝑖 )
Decision(Candidate 
The Exploit
Exploit Subgoal
Parser
Invariant(𝜏𝑖 )
OUR AEG 
TOOL
Reads exploit 
subgoals and 
invariant  
Phase 1: Exploit Subgoal Processing
17
Target Exploit Subgoals
Phase 1
𝜏2
𝜏1
𝜏𝑛
𝜏𝑖 (Exploit Subgoal)
Search Space(𝜏𝑖 )
Exploit Subgoal
Parser
Invariant(𝜏𝑖 )
OUR AEG 
TOOL
Phase 2
Phase 3
Trigger 
Slice
Parser
AST
Code 
Generator
Candidate
Slice
Invariant 
Validator
Next Exploit Subgoal
Checkpoint(𝜏𝑖 )
Exploit Subgoal
Manager
Slice, 𝜏𝑖 )
Decision(Candidate 
The Exploit
Phase 2: Generates Candidate Slices and Validating 
Invariant 
18
Target Exploit Subgoals
Phase 1
𝜏2
𝜏1
𝜏𝑛
𝜏𝑖 (Exploit Subgoal)
Search Space(𝜏𝑖 )
Exploit Subgoal
Parser
Invariant(𝜏𝑖 )
OUR AEG 
TOOL
Phase 2
Phase 3
Trigger 
Slice
Parser
AST
Code 
Generator
Candidate
Slice
Invariant 
Validator
Next Exploit Subgoal
Checkpoint(𝜏𝑖 )
Exploit Subgoal
Manager
Slice, 𝜏𝑖 )
Decision(Candidate 
The Exploit
Phase 2: Generates Candidate Slices and Validating 
Invariant
19
Parses the 
trigger slice
Target Exploit Subgoals
Phase 1
𝜏2
𝜏1
𝜏𝑛
𝜏𝑖 (Exploit Subgoal)
Search Space(𝜏𝑖 )
Exploit Subgoal
Parser
Invariant(𝜏𝑖 )
OUR AEG 
TOOL
Phase 2
Phase 3
Trigger 
Slice
Parser
AST
Code 
Generator
Candidate
Slice
Invariant 
Validator
Next Exploit Subgoal
Checkpoint(𝜏𝑖 )
Exploit Subgoal
Manager
Slice, 𝜏𝑖 )
Decision(Candidate 
The Exploit
Phase 2: Generates Candidate Slices and Validating 
Invariant 
20
Generates 
candidate slices
Target Exploit Subgoals
Phase 1
𝜏2
𝜏1
𝜏𝑛
𝜏𝑖 (Exploit Subgoal)
Search Space(𝜏𝑖 )
Exploit Subgoal
Parser
Invariant(𝜏𝑖 )
OUR AEG 
TOOL
Phase 2
Phase 3
Trigger 
Slice
Parser
AST
Code 
Generator
Candidate
Slice
Invariant 
Validator
Next Exploit Subgoal
Checkpoint(𝜏𝑖 )
Exploit Subgoal
Manager
Slice, 𝜏𝑖 )
Decision(Candidate 
The Exploit
Phase 2: Generates Candidate Slices and Validating 
Invariant 
21
Executes and 
tests candidate 
slices
Target Exploit Subgoals
Phase 1
𝜏2
𝜏1
𝜏𝑛
𝜏𝑖 (Exploit Subgoal)
Search Space(𝜏𝑖 )
Exploit Subgoal
Parser
Invariant(𝜏𝑖 )
OUR AEG 
TOOL
Phase 2
Phase 3
Trigger 
Slice
Parser
AST
Code 
Generator
Candidate
Slice
Invariant 
Validator
Next Exploit Subgoal
Checkpoint(𝜏𝑖 )
Exploit Subgoal
Manager
Slice, 𝜏𝑖 )
Decision(Candidate 
The Exploit
Phase 3: Evaluating Candidate Slices
22
Evaluates the 
execution of 
candidate slices
Target Exploit Subgoals
Phase 1
𝜏2
𝜏1
𝜏𝑛
𝜏𝑖 (Exploit Subgoal)
Search Space(𝜏𝑖 )
Exploit Subgoal
Parser
Invariant(𝜏𝑖 )
OUR AEG 
TOOL
Phase 2
Phase 3
Trigger 
Slice
Parser
AST
Code 
Generator
Candidate
Slice
Invariant 
Validator
Next Exploit Subgoal
Checkpoint(𝜏𝑖 )
Exploit Subgoal
Manager
Slice, 𝜏𝑖 )
Decision(Candidate 
The Exploit
Optimization Techniques
• Exploit Deconstruction ~10!"
•
Synthesizing smaller exploit subgoals in sequence
23
Vulnerability 
State
𝑛!
.
.
.
...
...
.
.
.
...
Level 1
Level 2
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
Optimization Techniques
• Exploit Deconstruction ~10!"
•
Synthesizing smaller exploit subgoals in sequence
24
Vulnerability 
State
𝑛!
.
.
.
...
...
.
.
.
...
Level 1
Level 2
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
Optimization Techniques
• Exploit Deconstruction ~10!"
•
Synthesizing smaller exploit subgoals in sequence
25
Vulnerability 
State
𝑛!
.
.
.
...
...
.
.
.
...
Level 1
Level 2
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
Optimization Techniques
• Exploit Deconstruction ~10!"
•
Synthesizing smaller exploit subgoals in sequence
26
Vulnerability 
State
𝑛!
.
.
.
...
...
.
.
.
...
Level 1
Level 2
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
Optimization Techniques
• Exploit Deconstruction ~10!"
•
Synthesizing smaller exploit subgoals in sequence
27
Vulnerability 
State
𝑛!
.
.
.
...
...
.
.
.
...
Level 1
Level 2
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
Optimization Techniques
• Exploit Deconstruction ~10!"
•
Synthesizing smaller exploit subgoals in sequence
28
Vulnerability 
State
𝑛!
.
.
.
...
...
.
.
.
...
Level 1
Level 2
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
Optimization Techniques
• Exploit Deconstruction ~10!"
•
Synthesizing smaller exploit subgoals in sequence
29
Vulnerability 
State
𝑛!
.
.
.
...
...
.
.
.
...
Level 1
Level 2
...
...
.
.
.
...
Level 𝑘
.
..
.
Exploit State
.
.
...
Level 𝑘+1
Exploit State
.
.
.
...
...
.
.
.
...
Level 𝑟
• Exploit Deconstruction ~10!"
• Operand Stack Verification 98.78%
•
Synthesizing smaller exploit subgoals in sequence
Optimization Techniques
30
• Disqualifies candidate slices that perform illegal stack operations
Optimization Techniques
31
•
Synthesizing smaller exploit subgoals in sequence
• Exploit Deconstruction ~10!"
• Operand Stack Verification 98.78%
Instruction Tiling ~10#$."
•
• Disqualifies candidate slices that perform illegal stack operations
• Glues instructions together to obtain more coarse-grained, 
meaningful instruction chains
Optimization Techniques
32
•
• Exploit Deconstruction ~10!"
• Operand Stack Verification 98.78%
Instruction Tiling ~10#$."
Feedback from the AVM 58%
meaningful instruction chains
•
•
• Detects error-raising instruction prefixes
Synthesizing smaller exploit subgoals in sequence
• Disqualifies candidate slices that perform illegal stack operations
• Glues instructions together to obtain more coarse-grained, 
Experimental Results -I
33
• Two sets of experiments
• CVE-2015-5119
• Open-source core implementation 
• Closed-source standalone Flash Player Debugger
Experimental Results -I
34
• The difference is due to starting/closing of the Flash Player
It takes 85ms on average, equivalent to 89% of the time
•
Experimental Results -II
35
• Generating exploit scripts for different vulnerabilities 
with the closed-source debugger
Limitations and Challenges
36
• Compatibility
• Different memory offset
• Calling external libraries
• Debuggers 
• PoCs perform their malicious activities implicitly
• Accuracy of the exploit subgoals
• Having unnecessary instructions significantly increases the 
time (combinatorial rate)
37
Thank You
Fadi Yilmaz
UNC Charlotte
PI:EMAIL
Meera Sridhar
UNC Charlotte
PI:EMAIL
Wontae Choi
PI:EMAIL
Key References
38
[Younis et al. SQJ’16] Awad Younis, Yashwant K Malaiya, and Indrajit Ray. 2016. 
Assessing vulnerability exploitability risk using software properties. Software 
Quality Journal 24, 1 (2016), 159–202.
[Avgerinos et al. NDSS’11] Thanassis Avgerinos, Sang Kil Cha, Brent Lim Tze Hao, 
and David Brumley. 2011. AEG: Automatic Exploit Generation. In Proceedings of 
The Network and Distributed System Security Symposium (NDSS).
[Miller et al. ACM’90] Barton P Miller, Louis Fredriksen, and Bryan So. 1990. An 
empirical study of the reliability of UNIX utilities. Commun. ACM 33, 12 (1990), 
32–44.
[Jayaraman et al. NFM’09] Karthick Jayaraman, David Harvison, and Adam Kiezun
Vijay Ganesh. 2009. jFuzz: A concolic whitebox fuzzer for Java. In Proceedings of 
the First NASA Formal Methods Symposium (NFM).
[Rawat et al. NDSS’17] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, 
Cristiano Giuffrida, and Herbert Bos. 2017. VUzzer: Application-aware 
Evolutionary Fuzzing. In Proceedings of the Network and Distributed System 
Security Symposium (NDSS), Vol. 17. 1–14.