Now = os.listdir(nowDir) 
def extract(output_dir,password): 
global Now 
for zip_file in Now: 
try: 
f_zip = zipfile.ZipFile(zip_file, 'r') 
f_zip.extractall(output_dir,pwd=password) 
print zip_file 
f_zip.close() 
f = open('1.txt','r') 
p = f.readlines()[0][-16:] 
f.close() 
return p 
except: 
continue 
Pass = 'start' 
for i in xrange(len(Now)): 
Pass = extract('.',Pass) 
print i,Pass 
写了个脚本得到路径： 
rt subprocess 
def fun(): 
  txtid='376'+'831' 
  res=txtid+'<-' 
  #for i in range(100):   
  while True: 
        ret=subprocess.check_output(['grep','-R',txtid]) 
        if 'Game' in ret: 
            res+='come back done' 
            break 
        txtid=ret[0:ret.find('.txt')] 
        res+=txtid+'<-' 
  print res 
fun() 
然后就是跟着路径收集 comments 了 
这里卡了很久，后来研究了 zip 的格式 
comments 就在每个 zip 的最后 
仔细看下 pwd.zip 后面，每个.txt 和 PK 之间存放有个 tab 或空格的注释 
提取出来： 
f1=open('pwdc','rb') 
f1c=f1.read() 
f2=open('lujing','rb') 
f2c=f2.read() 
def gc(txtid): 
  t=f1c[f1c.find(txtid+'.txt')+10:] 
  ret=t[:t.find('PK')] 
  return ret 
res='' 
for i in range(len(f2c)/8): 
  txtid=f2c[i*8:i*8+6] 
  res=gc(txtid)+res 
f1.close() 
f2.close() 
f3=open('comments','wb') 
f3.write(res) 
f3.close() 
由于只有两种符号，把它转换为 0/1 试试，得到 
When I am dead, my dearest, 
Sing no sad songs for me; 
Plant thou no roses at my head, 
Nor shady cypress tree: 
Be the green grass above me 
With showers and dewdrops wet: 
And if thou wilt, remember, 
And if thou wilt, forget. 
password part1:Thispasswordistoolong 
I shall not see the shadows, 
I shall not see the rain; 
I shall not hear the nightingle 
Sing on as if in pain: 
And dreaming through the twilight 
That doth not rise nor set, 
Haply I may remember, 
And haply I may forget. 
password part2:andyoudon'twanttocrackitbybruteforce 
flag.zip 的密码出来了 Thispasswordistoolongandyoudon'twanttocrackitbybruteforce 
得到 Flag is SSCTF{Somewhere_Over_The_Rainbow} 
Crypto&Exploit300(Nonogram) 
这题是个 logic pic 游戏，每次能解出一张二维码，而这张二维码里面存着每一位 flag 的
加盐 hash 加密值和通往下一关的 command，总共有 25*25 和 29*29 两种类型的二维码，git
上找开源项目改改后能解出大部分二维码，但是有的题目有多个解，用普通算法没法求出所
有解（所有解中只有一种能扫出来），尝试过修改源码对同一组数据采用不同方向求解（从
上到下，从下到上等）仍然效果不好，最后发现一个在线解 nonogram 的网站能秒破：
http://www.lancs.ac.uk/~simpsons/nonogram/auto，结合之前的脚本就能的到 flag。 
部分脚本如下： 
from pwn import * 
import time 
from PIL import Image, ImageDraw 
SYMBOL_EMPTY = 0 
SYMBOL_X = 1 
SYMBOL_FILLED = 2 
#  
def fixed_sum_digits(digits, Tot): 
    """ 
    adapted from http://stackoverflow.com/a/8617750 
    Given digits and Tot, it generates an array of all ways to arrange "digits" x digits so that 
    the sum of them is "Tot". Zero can be a digit on either end, otherwise it must be one or greater 
    """ 
    ways = [] 
    def iter_fun(sum, deepness, sequence, Total): 
        if deepness == 0: 
            if sum == Total: 
                ways.append(sequence) 
        else: 
            on_end = deepness == 1 or deepness == digits 
            for i in range(0 if on_end else 1, Total - sum + 1): 
                iter_fun(sum + i, deepness - 1, sequence + [i], Total)  
    iter_fun(0, digits, [], Tot)  
    return ways 
def generate_possible_rows(nums, size): 
    digits = len(nums) + 1 
    space_left = size - sum(nums) 
    combos = fixed_sum_digits(digits, space_left) 
    rows = [] 
    for combo in combos: 
        row = [None] * (len(combo) + len(nums)) 
        row[::2] = combo 
        row[1::2] = nums 
        out = [] 
        curr = SYMBOL_X; 
        for r in row: 
            out.extend([curr] * r) 
            curr = SYMBOL_X if (curr == SYMBOL_FILLED) else SYMBOL_FILLED 
        rows.append(out) 
    return rows 
def filter_rows(rows, existing): 
    def is_row_okay(row, existing): 
        for i in range(0, len(existing)): 
            if existing[i] != 0 and row[i] != existing[i]: 
                return False 
        return True  
    return [row for row in rows if is_row_okay(row, existing)] 
def find_common_rows(rows, size): 
    row_x = [SYMBOL_X] * size 
    row_filled = [SYMBOL_FILLED] * size 
    for row in rows: 
        for i in range(0, size): 
            if row[i] == SYMBOL_FILLED: 
                row_x[i] = SYMBOL_EMPTY 
            if row[i] == SYMBOL_X: 
                row_filled[i] = SYMBOL_EMPTY 
    return [x + y for x, y in zip(row_x, row_filled)] 
def do_row(nums, size, existing=None): 
    possible = generate_possible_rows(nums, size) 
    if existing is not None: 
        possible = filter_rows(possible, existing) 
    common = find_common_rows(possible, size) 
    if existing is not None: 
        for i in range(0, size): 
            if common[i] == SYMBOL_EMPTY: 
                common[i] = existing[i] 
    return common 
def is_row_filled(row): 
    for x in row: 
        if x == SYMBOL_EMPTY: 
            return False 
    return True 
# Grid abstraction handlers 
def grid_make(w, h): 
    return [[SYMBOL_EMPTY for i in range(0, w)] for j in range(0, h)] 
def grid_get_row(grid, row): 
    return grid[row] 
def grid_get_col(grid, col): 
    return [row[col] for row in grid] 
def grid_set_row(grid, row, val): 
    grid[row] = val 
def grid_set_col(grid, col, val): 
    for row in range(0, len(grid)): 
        grid[row][col] = val[row] 
def grid_print(grid): 
    symbol_print = [' ', '·', '█'] 
    for row in grid: 
        s = "" 
        for x in row: 
            s += symbol_print[x] 
        print(s) 
def grid_filled(grid): 
    for row in grid: 
        if not is_row_filled(row): 
            return False 
    return True 
def grid_image(grid, size=10): 
    w, h = len(grid[0]), len(grid) 
    im = Image.new("RGB", (w * size, h * size), (255, 255, 255)) 
    draw = ImageDraw.Draw(im) 
    for y in range(0, h): 
        row = grid[y] 
        for x in range(0, w): 
            val = row[x] 
            coord = [(x * size, y * size), ((x + 1) * size, (y + 1) * size)] 
            if val == SYMBOL_FILLED: 
                draw.rectangle(coord, fill=(0, 0, 0)) 
            if val == SYMBOL_X: 
                draw.rectangle(coord, fill=(255, 128, 128)) 
    return im 
# end grid abstraction handlers 
def go(cols, rows ,num): 
    w = len(cols) 
    h = len(rows) 
    g = grid_make(w, h) 
    #num = 0 
    def snapshot(name="nonogram"): 
        #num = 0 
        im = grid_image(g) 
        im.save("%s_%04d.png" % (name, num)) 
        #num += 1 
    snapshot() 
    while not grid_filled(g): 
        for i in range(0, h): 
            row = grid_get_row(g, i) 
            if is_row_filled(row): 
                continue 
            d = do_row(test_rows[i], h, row) 
            grid_set_row(g, i, d) 
            snapshot() 
        for i in range(0, w): 
            col = grid_get_col(g, i) 
            if is_row_filled(col): 
                continue 
            d = do_row(test_cols[i], w, col) 
            grid_set_col(g, i, d) 
            snapshot() 
    snapshot() 
    return g 
conn = remote('socket.lab.seclover.com',52700) 
print conn.recvuntil('Email Addr :') 
conn.sendline('PI:EMAIL') 
print conn.recvuntil('Password   :') 
conn.sendline('uhOadRGbnHri') 
print conn.recvuntil(':~$') 
conn.sendline('sudo su') 
ss = conn.recvuntil('}') 
conn.recvuntil('#') 
conn.sendline('id') 
print conn.recvuntil('#') 
conn.sendline('w') 
print conn.recvuntil('#') 
conn.sendline('eval') 
print conn.recvuntil('#') 
conn.sendline('bash') 
print conn.recvuntil('#') 
conn.sendline('ls') 
print conn.recvuntil('#') 
conn.sendline('dir') 
print conn.recvuntil('#') 
conn.sendline('cd') 
print conn.recvuntil('#') 
conn.sendline('mv') 
print conn.recvuntil('#') 
conn.sendline('cp') 