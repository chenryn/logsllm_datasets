Overflow errors：运算结果太⼤，导致溢出。
Underflow errors：运算结果太⼩，导致溢出。
变量 提示了当前系统如何处理数学运算错误。
math_errhandling
math_errhandling 的值 描述
MATH_ERRNO 系统使⽤ errno 表示数学错误
MATH_ERREXCEPT 系统使⽤异常表示数学错误
MATH_ERRNO MATH_ERREXCEPT
数值类型 #
数学函数的参数可以分成以下⼏类：正常值，⽆限值，有限值和⾮数字。
下⾯的函数⽤来判断⼀个值的类型。
fpclassify()：返回给定浮点数的分类。
isfinite()：如果参数不是⽆限或 NaN，则为真。
isinf()：如果参数是⽆限的，则为真。
isnan()：如果参数不是数字，则为真。
isnormal()：如果参数是正常数字，则为真。
下⾯是⼀个例⼦。
isfinite(1.23)
isinf(1/tan(0))
isnan(sqrt(-1))
isnormal(1e-310))
signbit() #
判断参数是否带有符号。如果参数为负值，则返回 1，否则返回 0。
signbit()
signbit(3490.0)
signbit(-37.0)
三⻆函数 #
以下是三⻆函数，参数为弧度值。
acos()：反余弦。
asin()：反正弦。
atan()：反正切
atan2()：反正切。
cos()：余弦。
sin()：正弦。
tan()：正切。
不要忘了，上⾯所有函数都有 float 版本（函数名加上 f 后缀）和 long double 版本（函数名加上 l 后
缀）。
下⾯是⼀个例⼦。
cos(PI/4)
双曲函数 #
以下是双曲函数，参数都为浮点数。
acosh()：反双曲余弦。
asinh()：反双曲正弦。
atanh()：反双曲正切。
cosh()：双曲余弦。
tanh()：双曲正切。
sinh()：双曲正弦。
指数函数和对数函数 #
以下是指数函数和对数函数，它们的返回值都是 double 类型。
x
exp()：计算欧拉数 e 的乘⽅，即 e 。
x
exp2()：计算 2 的乘⽅，即 2 。
x
expm1()：计算 e - 1。
log()：计算⾃然对数， 的逆运算。
exp()
log2()：计算以 2 为底的对数。
log10()：计算以 10 为底的对数。
logp1()：计算⼀个数加 1 的⾃然对数，即 。
ln(x + 1)
logb()：计算以宏 （⼀般为 2）为底的对数，但只返回整数部分。
FLT_RADIX
下⾯是⼀些例⼦。
exp(3.0)
log(20.0855)
log10(10000)
如果结果值超出了 C 语⾔可以表示的最⼤值，函数将返回 ，它是⼀个在 中定义的
HUGE_VAL math.h
double 类型的值。
如果结果值太⼩，⽆法⽤ double 值表示，函数将返回 0。以上这两种情况都属于出错。
frexp() #
11
将参数分解成浮点数和指数部分（2 为底数），⽐如 1234.56 可以写成 0.6028125 * 2 ，这个
frexp()
函数就能分解出 0.6028125 和 11。
double frexp(double value, int* exp);
它接受两个参数，第⼀个参数是⽤来分解的浮点数，第⼆个参数是⼀个整数变量指针。
它返回⼩数部分，并将指数部分放⼊变量 。如果参数为 ，则返回的⼩数部分和指数部分都为 。
exp 0 0
下⾯是⼀个例⼦。
double frac;
int expt;
frac = frexp(1234.56, &expt);
printf("1234.56 = %.7f x 2^%d\n", frac, expt);
ilogb() #
返回⼀个浮点数的指数部分，指数的基数是宏 （⼀般是 ）。
ilogb() FLT_RADIX 2
int ilogb(double x);
它的参数为 ，返回值是 log |x|，其中 为宏 。
x r r FLT_RADIX
下⾯是⽤法示例。
ilogb(257)
ilogb(256)
ilogb(255)
ldexp() #
将⼀个数乘以 2 的乘⽅。它可以看成是 的逆运算，将⼩数部分和指数部分合成⼀个
ldexp() frexp() f *
形式的浮点数。
2^n
double ldexp(double x, int exp);
exp
它接受两个参数，第⼀个参数是乘数 ，第⼆个参数是 2 的指数部分 ，返回 “x * 2 ”。
x exp
ldexp(1, 10)
ldexp(3, 2)
ldexp(0.75, 4)
ldexp(0.5, -1)
modf() #
函数提取⼀个数的整数部分和⼩数部分。
modf()
double modf(double value, double* iptr);
它接受两个参数，第⼀个参数 表示待分解的数值，第⼆个参数是浮点数变量 。返回值是
value iptr
的⼩数部分，整数部分放⼊变量 。
value double
下⾯是⼀个例⼦。
modf(3.14159, &int_part);
scalbn() #
n
⽤来计算 “x * r ”，其中 是宏 。
scalbn() r FLT_RADIX
double scalbn(double x, int n);
n
它接受两个参数，第⼀个参数 是乘数部分，第⼆个参数 是指数部分，返回值是 “x * r ”。
x n
下⾯是⼀些例⼦。
scalbn(2, 8)
这个函数有多个版本。
scalbn()：指数 n 是 int 类型。
scalbnf()：float 版本的 scalbn()。
scalbnl()：long double 版本的 scalbn()。
scalbln()：指数 n 是 long int 类型。
scalblnf()：float 版本的 scalbln()。
scalblnl()：long double 版本的 scalbln()。
round() #
函数以传统⽅式进⾏四舍五⼊，⽐如 舍⼊到 ， 舍⼊到 。
round() 1.5 2 -1.5 -2
double round(double x);
它返回⼀个浮点数。
下⾯是⼀些例⼦。
round(3.14)
round(3.5)
round(-1.5)
round(-1.14)
它还有⼀些其他版本。
lround()：返回值是 long int 类型。
llround()：返回值是 long long int 类型。
trunc() #
⽤来截去⼀个浮点数的⼩数部分，将剩下的整数部分以浮点数的形式返回。
trunc()
double trunc(double x);
下⾯是⼀些例⼦。
trunc(3.14)
trunc(3.8)
trunc(-1.5)
trunc(-1.14)
ceil() #
返回不⼩于其参数的最⼩整数（double 类型），属于 “向上舍⼊”。
ceil()
double ceil(double x);
下⾯是⼀些例⼦。
ceil(7.1)
ceil(7.9)
ceil(-7.1)
ceil(-7.9)
floor() #
返回不⼤于其参数的最⼤整数，属于 “向下舍⼊”。
floor()
double floor(double x);
下⾯是⼀些例⼦。
floor(7.1)
floor(7.9)
floor(-7.1)
floor(-7.9)
下⾯的函数可以实现 “四舍五⼊”。
double round_nearest(double x) {
return x  y
isgreaterequal()：返回 的结果。
x >= y
isless()：返回 的结果。
x  y)
下⾯是⼀些例⼦。
isgreater(10.0, 3.0)
isgreaterequal(10.0, 10.0)
isless(10.0, 3.0)
islessequal(10.0, 3.0)
islessgreater(10.0, 3.0)
islessgreater(10.0, 30.0)
islessgreater(10.0, 10.0)
isunordered() #
返回两个参数之中，是否存在 NAN。
isunordered()
int isunordered(any_floating_type x, any_floating_type y);
下⾯是⼀些例⼦。
isunordered(1.0, 2.0)
isunordered(1.0, sqrt(-1))
isunordered(NAN, 30.0)
isunordered(NAN, NAN)
其他函数 #
下⾯是 math.h 包含的其它函数。
pow()：计算参数 的 次⽅。
x y
sqrt()：计算⼀个数的平⽅根。
cbrt()：计算⽴⽅根。
fabs()：计算绝对值。
hypot()：根据直⻆三⻆形的两条直⻆边，计算斜边。
fmax()：返回两个参数之中的最⼤值。
fmin()：返回两个参数之中的最⼩值。
remainder()：返回 IEC 60559 标准的余数，类似于 ，但是余数范围是从 到 ，
fmod() -y/2 y/2
⽽不是从 到 。
0 y
remquo()：同时返回余数和商，余数的计算⽅法与 相同。
remainder()
copysign()：返回⼀个⼤⼩等于第⼀个参数、符号等于第⼆个参数的值。
nan()：返回 NAN。
nextafter()：获取下⼀个（或者上⼀个，具体⽅向取决于第⼆个参数 ）当前系统可以表示的浮点
y
值。
nextoward()：与 相同，除了第⼆个参数是 long double 类型。
nextafter()
fdim()：如果第⼀个参数减去第⼆个参数⼤于 ，则返回差值，否则返回 。
0 0
fma()：以快速计算的⽅式，返回 的结果。
x * y + z
nearbyint()：在当前舍⼊⽅向上，舍⼊到最接近的整数。当前舍⼊⽅向可以使⽤ 函数
fesetround()
设定。
rint()：在当前舍⼊⽅向上，舍⼊到最接近的整数，与 相同。不同之处是，它会触发浮
nearbyint()
点数的 异常。
INEXACT
lrint()：在当前舍⼊⽅向上，舍⼊到最接近的整数，与 相同。不同之处是，返回值是⼀个整
rint()
数，⽽不是浮点数。