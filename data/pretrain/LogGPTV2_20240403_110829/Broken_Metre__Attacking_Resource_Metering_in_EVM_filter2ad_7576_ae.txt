cent years [6] with sometimes multiple millions of dollars
worth of Ether at stake [51], [41]. One of the most famous
12
exploit on the Ethereum blockchain was The DAO exploit [42],
where an attacker used a re-entrancy vulnerability [38], [37]
to drain funds out of The DAO smart contract. The attacker
managed to drain more than 3.5 million of Ether, which would
now be worth more than 507.5 million USD. Given the severity
of the attack, the Ethereum community decided to hard-fork
the blockchain, preventing the attacker to beneﬁt from the
Ether he had drained.
In order to prevent such exploits, many different tools have
been developed over the years to detect vulnerabilities in smart
contracts [34]. One of the ﬁrst tools which have been developed
is Oyente [38]. It uses symbolic execution to explore smart
contracts execution pass and then uses an SMT solver [21] to
check for several classes of vulnerabilities. Many other tools
covering the same or other classes of vulnerabilities have also
been developed [37], [10], [55], [36] and are usually based
either on symbolic execution or static analysis methods such
as data ﬂow or control ﬂow analysis. Some smart contract anal-
ysis tools have also focused more on analysing vulnerabilities
related to gas [32], [17], [5]. We present some of these tools
in the next subsection.
B. Gas Usage and Metering
Recent work by Yang et al. [58] have recently empirically
analysed the resource usage and gas usage of the EVM in-
structions. They provide an in-depth analysis of the time taken
for each instructions both on commodity and professional
hardware. Although our work was performed independently,
the results we present in Section III seem to concur mostly
with their ﬁndings.
Other related themes have also been covered in the liter-
ature. One of the large theme is optimisation of gas usage
for smart contracts. Another one is estimating, preferably
statically, the gas consumption of smart contracts.
Gas Usage Optimisation: Gasper [17] is one of the ﬁrst
paper which has focused on ﬁnding gas related anti-patterns for
smart contracts. It identiﬁes 7 gas-costly patterns, such as dead
code or expensive operations in loops, which could potentially
be costly to the contract developer in terms of gas. Gasper
builds a control ﬂow graph from the EVM bytecode and uses
symbolic execution backed by an SMT solver to explore the
different paths that might be taken.
MadMax [32] is a static analysis tool to ﬁnd gas-focused
vulnerabilities. Its main difference with Gasper from a func-
tionality point of view is that MadMax tries to ﬁnd patterns
which could cause out-of-gas exceptions and potentially lock
the contract funds, rather than gas-intensive patterns. For
example, it is able to detect loops iterating on an unbounded
number of elements, such as the numbers of users, and which
would therefore always run out of gas after a certain number
of users. MadMax decompiles EVM contracts and encodes
properties about
them into Datalog to check for different
patterns. It is performant enough to analyse all the contracts
of the Ethereum blockchain in only 10 hours.
Gas Estimation: Marescotti et al. [39] propose two al-
gorithms to compute upper-bound gas consumption of smart
contracts. It introduces a “gas consumption path” to encode
the gas consumption of a program in its program path. It uses
an SMT solver to ﬁnd an environment resulting in a given
path and computes its gas consumption. However, this work is
not implemented with actual EVM code and is therefore not
evaluated on real-world contracts.
Gastap [5] is a static analysis tool which allows to compute
sound upper bounds for smart contracts. This ensures that if
the gas limit given to the contract is higher than the computed
upper-bound, the contract is assured to terminate without out-
of-gas exception. It transforms the EVM bytecode and models
it in terms of equations representing the gas consumption
of each instructions. It then solves these equations using the
equation solver PUBS [4]. Gastap is able to compute gas upper
bound on almost all real world contracts it is evaluated on.
C. Virtual Machines and Metering
Zheng et al. [59] propose a performance analysis of several
blockchain systems which leverage smart contracts. Although
the analysis goes beyond smart contracts metering, with
metrics such as network related performance, it includes an
analysis about smart contracts metering at the virtual machine
level. Notably, it shows that some instructions, such as DIV
and SDIV, consume the same amount of gas while their
consumption of CPU resource is vastly different.
Chen et al. [18] propose an alternative gas cost mecha-
nism for Ethereum. The gas cost mechanism is not meant
to replace completely the current one, but rather to extend
it in order to prevent DoS attacks caused by under-priced
EVM instructions. The authors analyse the average number of
execution of a single instruction in a contract, and model a gas
cost mechanism to punish contracts which excessively execute
a particular instruction. This gas mechanism allows normal
contracts to almost not be affected by the price changes while
mitigating spam attacks which have been seen on the Ethereum
blockchain [13].
VII. CONCLUSION
In this work, we presented a new DoS attack on Ethereum
by exploiting the metering mechanism. We ﬁrst re-executed the
Ethereum blockchain for 2.5 months and showed some signiﬁ-
cant inconsistencies in the pricing of the EVM instructions. We
further explored various other design weaknesses, such as gas
costs for arithmetic EVM instructions and cache dependencies
on the execution time. Additionally, we demonstrated that there
is very little correlation between gas and resources such as
CPU and memory. We found that the main reason for this is
that the gas price is dominated by the amount of storage used.
Based on our observations, we presented a new attack
called Resource Exhaustion Attack which systematically ex-
ploits these imperfections to generate low-throughput con-
tracts. Our genetic algorithm is able to generate programs
which exhibit a throughput of around 1.25M gas per second
after a single generation. A minimum in our experiments is at-
tained at generation 243 with the block using around 9.9M gas
and taking around 93 seconds. We showed that we are able to
generate contracts with a throughput as low as 107,000 gas per
second, or on average more than 100 times slower than typical
contracts, and that all major Ethereum clients are vulnerable.
We argued that several attackers such as speculators, Ethereum
competitors or even miners could have ﬁnancial incentives to
13
perform such an attack. Finally, we discussed about short-term
and potential long-term ﬁxes for gas mispricing. Our attack
went through the a responsible disclosure process and has been
awarded a bug bounty reward of 5,000 USD by the Ethereum
foundation.
ACKNOWLEDGMENT
The authors would like to thank Matthias Egli and Hubert
Ritzdorf from PwC Switzerland for their insightful feedback
and their help with responsible disclosure and experiments.
The authors would also like to thank the Tezos Foundation
for their ﬁnancial support.
[24]
[19] Concourse Open Community. Eth gas station. https://ethgasstation.info/
calculatorTxV.php, 2019. [Online; accessed 09-September-2019].
[20] Chris Dannen.
Introducing Ethereum and Solidity: Foundations of
Cryptocurrency and Blockchain Programming for Beginners. Apress,
Berkely, CA, USA, 1st edition, 2017.
[21] Leonardo De Moura and Nikolaj Bjørner. Z3: An efﬁcient smt solver. In
International conference on Tools and Algorithms for the Construction
and Analysis of Systems, pages 337–340. Springer, 2008.
[22] Ethereum community. cpp-ethereum. http://www.ethdocs.org/en/latest/
ethereum-clients/cpp-ethereum/. [Online; accessed 1-May-2019].
[23] Ethereum Foundation.
Ethereum bounty program.
https://bounty.
ethereum.org/, 2020. [Online; accessed 05-January-2020].
ethernodes.org. Ethereum mainnet statistics. https://www.ethernodes.
org/, 2020. [Online; accessed 10-January-2020].
REFERENCES
[1] Ethereum - github. https://github.com/ethereum, 2019.
cessed 08-September-2019].
[Online; ac-
[2] Hervé Abdi and Lynne J Williams. Principal component analysis. Wiley
interdisciplinary reviews: computational statistics, 2(4):433–459, 2010.
[3] Mustafa Al-Bassam, Alberto Sonnino, Shehar Bano, Dave Hrycyszyn,
and George Danezis. Chainspace: A sharded smart contracts platform.
arXiv preprint arXiv:1708.03778, 2017.
[4] Elvira Albert, Puri Arenas, Samir Genaim, and Germán Puebla. Au-
tomatic Inference of Upper Bounds for Recurrence Relations in Cost
Analysis. In María Alpuente and Germán Vidal, editors, Static Analysis,
pages 221–237, Berlin, Heidelberg, 2008. Springer Berlin Heidelberg.
[5] Elvira Albert, Pablo Gordillo, Albert Rubio, and Ilya Sergey. GASTAP:
A Gas Analyzer for Smart Contracts. CoRR, abs/1811.1, nov 2018.
[6] Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. A survey of
attacks on Ethereum smart contracts (SoK). In POST, 2017.
[7] Block.one. About EOSIO. https://eos.io/about-us/, 2019.
[Online;
accessed 04-June-2019].
[8] Sarah Boslaugh. Statistics in a nutshell: A desktop quick reference. "
O’Reilly Media, Inc.", 2012.
[9] Lorenz Breidenbach, Phil Daian, Ari Juels, and Emin Gün Sirer. An
In-Depth Look at the Parity Multisig Bug.
[10] Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, François Gauthier,
Vincent Gramoli, Ralph Holz, and Bernhard Scholz. Vandal: A scalable
security analysis framework for smart contracts. CoRR, abs/1809.03981,
2018.
[11] Vitalik Buterin. EIP 150: Gas cost changes for IO-heavy operations
[Online; accessed 05-June-
. https://eips.ethereum.org/EIPS/eip-150.
2019].
[12] Vitalik Buterin.
Geth nodes under
attack again.
https:
//www.reddit.com/r/ethereum/comments/55s085/geth_nodes_under_
attack_again_we_are_actively/?st=itxh568s&sh=ee3628ea.
accessed 4-April-2019].
[Online;
[13] Vitalik Buterin. Transaction spam attack: Next Steps. https://blog.
ethereum.org/2016/09/22/transaction-spam-attack-next-steps/. [Online;
accessed 4-April-2019].
[14] Vitalik Buterin. A next-generation smart contract and decentralized
application platform. Ethereum, (January):1–36, 2014.
[15] Vitalik Buterin.
Geth nodes under attack again (geth issue).
https://www.reddit.com/r/ethereum/comments/55s085/geth_nodes_
under_attack_again_we_are_actively/d8ebsad/, 2016. [Online; accessed
05-September-2019].
[16] Vitalik Buterin. EIP 210. https://github.com/ethereum/EIPs/blob/master/
EIPS/eip-210.md, 2019. [Online; accessed 20-July-2019].
[17] Ting Chen, Xiaoqi Li, Xiapu Luo, and Xiaosong Zhang. Under-
optimized smart contracts devour your money. SANER 2017 - 24th
IEEE International Conference on Software Analysis, Evolution, and
Reengineering, pages 442–446, 2017.
[18] Ting Chen, Xiaoqi Li, Ying Wang, Jiachi Chen, Zihao Li, Xiapu Luo,
Man Ho Au, and Xiaosong Zhang. An adaptive gas cost mechanism
for ethereum to defend against under-priced dos attacks. In Joseph K.
Liu and Pierangela Samarati, editors, Information Security Practice and
Experience, pages 3–24, Cham, 2017. Springer International Publishing.
14
[25] Etherscan. Ethereum average block timechart. https://etherscan.io/chart/
blocktime, 2019. [Online; accessed 09-September-2019].
[26] Etherscan. Ethereum average block time chart. https://etherscan.io/
[27]
chart/blocktime, 2020. [Online; accessed 10-January-2020].
Ittay Eyal and Emin Gün Sirer. Majority is not enough: Bitcoin mining
In International conference on ﬁnancial cryptography
is vulnerable.
and data security, pages 436–454. Springer, 2014.
[28] Sanjay Ghemawat and Jeff Dean. Leveldb. https://github.com/google/
leveldb, 2011. [Online; accessed 05-August-2019].
[29] Sanjay Ghemawat
and Jeff Dean.
Leveldb documentation.
https://github.com/google/leveldb/blob/master/doc/index.md#cache,
2011. [Online; accessed 05-August-2019].
[30] The go-ethereum Authors. Ofﬁcial go implementation of the ethereum
[Online;
https://github.com/ethereum/go-ethereum/, 2019.
protocol.
accessed 25-August-2019].
[31] Google. Google compute engine documentation. https://cloud.google.
com/compute/docs/, 2019. [Online; accessed 08-September-2019].
[32] Neville Grech, Michael Kong, Anton Jurisevic, Lexi Brent, Bernhard
Scholz, and Yannis Smaragdakis. MadMax: Surviving Out-of-Gas
SPLASH 2018 Oopsla,
Conditions in Ethereum Smart Contracts.
2(October), 2018.
[33] Sumit Gulwani, Oleksandr Polozov, Rishabh Singh, et al. Program
synthesis. Foundations and Trends R(cid:13) in Programming Languages, 4(1-
2):1–119, 2017.
[34] Dominik Harz and William Knottenbelt. Towards Safer Smart Con-
tracts: A Survey of Languages and Veriﬁcation Methods. arXiv preprint
arXiv:1809.09805, 2018.
[35] Hudson Jameson.
Ethereum Constantinople Upgrade Announce-
https://blog.ethereum.org/2019/01/11/ethereum-constantinople-
ment.
upgrade-announcement/, 2019. [Online; accessed 05-July-2019].
[36] Bo Jiang, Ye Liu, and W. K. Chan. Contractfuzzer: Fuzzing smart con-
tracts for vulnerability detection. In Proceedings of the 33rd ACM/IEEE
International Conference on Automated Software Engineering, ASE
2018, pages 259–269, New York, NY, USA, 2018. ACM.
[37] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. ZEUS:
In 25th Annual Network and
analyzing safety of smart contracts.
Distributed System Security Symposium, NDSS 2018, San Diego, Cali-
fornia, USA, February 18-21, 2018, 2018.
[38] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas
Hobor. Making Smart Contracts Smarter. In CCS, 2016.
[39] Matteo Marescotti, Martin Blicha, Antti E J Hyvärinen, Sepideh Asadi,
and Natasha Sharygina. Computing Exact Worst-Case Gas Consump-
tion for Smart Contracts.
In Tiziana Margaria and Bernhard Steffen,
editors, Leveraging Applications of Formal Methods, Veriﬁcation and
Validation. Industrial Practice, pages 450–465, Cham, 2018. Springer
International Publishing.
[40] Martin Holst Swende. EIP 1184. https://eips.ethereum.org/EIPS/eip-
1884, 2019. [Online; accessed 15-Jan-2020].
[41] Max Galka. Multisig wallets affected by the Parity wallet bug. https:
[Online; accessed 21-
//github.com/elementus-io/parity-wallet-freeze.
January-2019].
[42] Muhammad Izhar Mehar, Charles Louis Shier, Alana Giambattista,
Elgar Gong, Gabrielle Fletcher, Ryan Sanayhie, Henry M Kim, and
Marek Laskowski. Understanding a revolutionary and ﬂawed grand
experiment
Information Technology (JCIT), 21(1):19–32, 2019.
in blockchain: The dao attack.
Journal of Cases on
[43] Michael Mitzenmacher. Compressed bloom ﬁlters. IEEE/ACM Trans-
actions on Networking (TON), 10(5):604–612, 2002.
[44] Kevin Owocki. A brief history of gas prices on ethereum. https://
gitcoin.co/blog/a-brief-history-of-gas-prices-on-ethereum/, 2018. [On-
line; accessed 05-August-2019].
[45] Palau, Albert. Analyzing the hardware requirements to be an ethereum
https://medium.com/coinmonks/analyzing-
full validated node.
the-hardware-requirements-to-be-an-ethereum-full-validated-node-
dc064f167902, 2019. [Online; accessed 08-September-2019].
[46] Parity Technologies. Parity ethereum. https://www.parity.io/ethereum/,
2020. [Online; accessed 05-January-2020].
[47] PegaSys.
Pantheon
system requirements.
http://docs.pantheon.pegasys.tech/en/latest/HowTo/Get-Started/System-
Requirements/, 2019. [Online; accessed 08-September-2019].
ethereum client
[48] Petrov, Andrev.
An economic incentive for
running ethereum
https://medium.com/vipnode/an-economic-incentive-for-
full nodes.
running-ethereum-full-nodes-ecc0c9ebe22, 2018. [Online; accessed 08-
September-2019].
[49] Dani Putney. The aztec protocol: A zero-knowledge privacy sys-
tem on ethereum. https://www.ethnews.com/the-aztec-protocol-a-zero-
knowledge-privacy-system-on-ethereum, 2018.
[Online; accessed 23-
August-2019].
[50] Schmideg, Adam. go-ethereum faq. https://github.com/ethereum/go-
ethereum/wiki/FAQ, 2018. [Online; accessed 08-September-2019].
[51] Us Securities and Exchange Commission. Report of Investigation
Pursuant to Section 21(a) of the Securities Exchange Act of 1934: The
DAO. Technical report, U.S. Securities and Exchange Commission,
2017.
[52] Szilágyi, Péter. Dynamic state snapshot. https://github.com/ethereum/
go-ethereum/pull/20152, 2019. [Online; accessed 05-January-2020].
[53] Wei Tang. EIP 2200: Structured Deﬁnitions for Net Gas. https://eips.
ethereum.org/EIPS/eip-2200. [Online; accessed 10-January-2019].
[54] Tezos. About Tezos. https://tezos.com/learn-about-tezos, 2019. [Online;
accessed 04-June-2019].
[55] Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur Gervais,
Florian Bünzli, and Martin Vechev. Securify: Practical security analysis
In Proceedings of the 2018 ACM SIGSAC Con-
of smart contracts.
ference on Computer and Communications Security, CCS ’18, pages
67–82, New York, NY, USA, 2018. ACM.
[56] Darrell Whitley. A genetic algorithm tutorial. Statistics and computing,
4(2):65–85, 1994.
[57] Gavin Wood. Ethereum yellow paper, 2014.
[58] Renlord Yang, Toby Murray, Paul Rimba, and Udaya Parampalli.
Empirically Analyzing Ethereum’s Gas Mechanism. CoRR, abs/1905.0,
2019.
[59] P Zheng, Z Zheng, X Luo, X Chen, and X Liu. A Detailed and Real-
Time Performance Monitoring Framework for Blockchain Systems. In
2018 IEEE/ACM 40th International Conference on Software Engineer-
ing: Software Engineering in Practice Track (ICSE-SEIP), pages 134–
143, may 2017.
15