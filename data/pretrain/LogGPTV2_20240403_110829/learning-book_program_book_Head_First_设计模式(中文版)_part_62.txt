模型对象正是你的应用系统存在的理由
你可能正在纳闷
你设计的对象，包舍了数据、逻辑和其他
你可能正在纳问
在你的应用问题域，你创建定制的类
模型和视图之间的数据流动
你可以选择复用所有视图
是由控制器居中协调进行
但模型对象无常改变
两者之间状态的改变，数据的同步
都是由控制器控制的
你可以建模一部机器，随便什么机器。
①Cocoa是MacOSX的面向对象API
译者
建模一个两岁小孩
②这是Cocoa中的一个类。—译者
建模一瓶白葡萄酒
③这是MacOSX的用户界面Aqua预定的颜色。—译者
526
第12章
---
## Page 563
复合模式
控制器负责将每个改变的状态送进送出
我真希望能得到一个铜板的奖赏
每次将字符事
模型视图，对于Smalltalk的人来说
送给TextField时
这是最大的支柱
模型视图控制器
模型视图
我们要如何丢弃黏结
模型视图，读做“喂哦”，不是“呜吗”
模型视图控制器
模型视图控制器
控制器相当熟悉模型和视图
旅程尚未结束
所以常常硬继码来妨碍复用
前方还有道路
你可以将模型的键连结到任何视图的属性
编写控制器的人
似乎没有得到掌声
一旦开始绑定
你金爱现源码变少了
模型的使命很重要
视图的外观很美妙
是的，这一切自动又免费，让我感到洋洋得意
我或许很懒，但有时却是疯了
我写了多少代码，只是为了黏着两者
我知道一旦你使用摇说计面真
使用Swins
其实并不是修痛
许多代码都可以自动产生
说宽了代码并没有神奇之处
省下许多功夫
只是用来撤动值署了
模型视图，好处多多
我无象出言恐吓
模型视图控制器
但这是有声誉的
对于控制器你照做就是了
模型视图，但是我的应用已经交付
来不及采用MVC了
模型视图控制器
EAR
OWER
别光是读歌词，这可是HeadFirst系列书呀...准备好你的iPod，到下面的网址下载本
曲：http://www.wickedlysmart.com/headfirstdesignpatterns/media.html。
靠着椅背，闭上眼睛，开始听歌吧！
你现在的位置
527
---
## Page 564
MVC是数个模式的结合
很有趣的歌，但是我真的能从中学到
MVC吗？我以前就尝试过学习MVC.
结果学得很头痛。
D
设计模式是MVC的钥匙
这首歌只是一个开胃菜。你读完本章之后，
再回头去听这首歌，会觉得更有趣。
似乎你以前在MVC上面遭遇过挫折？其实
大多数开发人员都是这样。你可能听其他
开发人员说过，这改变了他们的生活，甚
至可能带来世界和平。这是一个威力强大
的复合模式，没错，它虽然不能带来世界
和平，但是的确可以帮助你节省编程的时
间。
想要享受它的好处，就得先学会它，是吧？
这次的学习经验将大大不同于以往，毕竞
你现在已经懂得模式了！
没错，设计模式是MVC的钥匙。想要由上
而下地学习MVC是困难的，不是每个人都
做得到。学习MVC的诀窍就在于：MVC是
由数个设计模式结合起来的模式。如果你
能够看着MVC内部的各个模式，MVC的一
切也就会跟着明朗起来。
PDG
我们开始吧！这次，绝对不会让MVC溜掉
的！
528
第12章
---
## Page 565
复合模式
认识模型-视图-控制器
想象你正在使用你最喜欢的MP3播放器，比方说iTune。你可以用它的界面加人新的歌
曲、管理播放清单、将歌曲改名。播放器有一个小型数据库，记录所有的歌曲和相关的
名字和数据。播放器也可以播歌，而播歌时用户界面会显示当时的歌曲标题、运行时间
等信息。
其实，底下用的就是模型一视图一控制器
视图显示为
你更新
你使用这个界面，
你的操作会转到控
你会看到歌曲显示更
制器。
新，并听到新的歌曲。
“播放新歌曲”
视图
控制器
模型告诉视
图，状态已
控制器请
经变了。
ass Player
求Player
play(()
模型通知视图状态的
rip0()
模型放歌。
改变。
burn()()
控制器操纵模
型。
模型
PDG
模型包含了所有的状态、数据和应
用区辑并播放mp3。
你现在的位置
529
---
## Page 566
现在让我们把镜头推进
靠近MVC
靠近一点.·.··.
MP3播放器的描述给了我们一个MVC的高层视图，但是仍然无法让我们知道复合模式内的运
作细节、无法创建自己的复合模式、无法认识复合模式好在哪里。让我们从模型、视图、控
制器三者的关系开始入手，然后再从设计模式的角度来看一看。
控制器
取得用户的输入并解读其对模型
的意思。
模型
模型持有所有的数据、状
视图
态和程序逻辑。模型没有
这就是奶油控制器
注意到视图和控制器，虽
用来呈现模型。视图通常
位置在中间。
然它提供了操纵和检索状
直接从模型中取得它需要
态的接口，并发送状态改
显示的状态与数据。
变通知给观察者。
②
控制器
改变状态。
用户做某件
年
③
改变显示。
④
rip0il
我已经改变了！
模型
视图
个
我需要你的状态
这就是模型
这就是用户界
信息。
它处理所有应
用数据和逻辑。
面。
PD
530
第12章
---
## Page 567
复合模式
你是用户一—你和视图交互。
视图是模型的窗口。当你对视图做一些事时（比方说，按下“播放”按钮），视图就告诉
控制器你做了什么。控制器会负责处理。
控制器要求模型改变状态。
控制器解读你的动作。如果你按下某个按钮，控制器会理解这个动作的意义，并告知模型
如何做出对应的动作。
控制器也可能要求视图做改变。
当控制器从视图接收到某一动作，结果可能是它也需要告诉视图改变其结果。比方说，控
制器可以将界面上的某些按钮或菜单项变成有效或无效。
当模型状态改变时，模型会通知视图。
不管是你做了某些动作（比方说按下按钮）还是内部有了某些改变（比方说播放清单
的下一首歌开始），只要当模型内的东西改变时，模型都会通知视图它的状态改变了。
视图向模型询问状态。
视图直接从模型取得它显示的状态。比方说，当模型通知视图新歌开始播放，视图向模型
询问歌名并显示出来。当控制器请求视图改变时，视图也可能向模型询问某些状态。
放在视图中？”你当然可以这么做，
是但是你不想这么做、有两个原因：首
观察者吗？
器没有必要存在呀！为何不把这样的
为但要管理用户界面，还要处理如何控
控制器会向模型注册，模型一有改变
代码放在视图中？大多数情况下，控
空制模型的逻辑。第二个原因，这么做
就通知控制器。当模型直接影响到用制器不是只调用模型的方法吗？
将造成模型和视围之间紧耦合，如果
户界面时，就会这么做。比方说，模
你想复用此视图来处理其他模型，根
型内的某些状态可以支配界面的某些
合：控制器做的事情不只
本不可能。控制器把控制逻辑从视图
项目变成有效或无效，如果这样，要
中分离，让模型和视图之间解耦。通
有“发送给模型”，还会解读输入，
求视图更新相应显示其实就是控制器
过保持控制器和视图之间松耦合，设
并根据输入操纵模型。你真正想问的
的事。
计就更有弹性而且容易扩展，足以容
问题可能是“为何不能把这样的代码
纳以后的改变。
你现在的位置，531
---
## Page 568
MVC内的模式
戴着模式的有色眼镜看MVC
我们已经说过，学会MVC最好的方法就是看看它是由哪些模式共同组成
的。
让我们先从模型开始。你可能也猜到了，模型利用“观察者”让控制器
和视图可以随最新的状态改变而更新。另一方面，视图和控制器则实现
了“策略模式”。控制器是视图的行为，如果你希望有不同的行为，可以直接换一个控制
器。视图内部使用组合模式来管理窗口、按钮以及其他显示组件。
让我们看得更详细一点：
策略
视图和控制器实现了经典的策略模式：视图是一个对象，可以被
调整使用不同的策略，而控制器提供了策略。视图只关心系统中
可视的部分，对于任何界面行为，都委托给控制器处理。使用策
略模式也可以让视图和模型之间的关系解耦，因为控制器负责和
模型交互来传递用户的请求。对于工作是怎么完成的，视图毫不
知情。
用户做了某件事
控制器
改变状态
观察者
组合
股变显示
pleyo)
rip0(l
10q
我已经改变了！
模型
视图
我需要你的状态信息
模型实现了观察者模式，当状态改变时，
显示包括了窗口、面板、按钮、文本标签
相关对象将持续更新。使用观察者模式，
等。每个显示组件如果不是组合节点（例
可以让模型完全独立于视图和控制器。同
如窗口），就是叶节点（例如按钮）。当
一个模型可以使用不同的视图，甚至可以同
控制器告诉视图更新时，只需告诉视图最
时使用多个视图。
顶层的组件即可，组合会处理其余的事。
532
第12章
---
## Page 569
复合模式
观察者
只要模型的状态改变
观察者
所有这些观察老都金被
可观察者
通知。
我的状态已经
OOESSWTE
改变了！
视图
模型
视图
控制器
对模型状态改变有
我希望注册成为观
兴趣的对象，金向
察者
视图
模型注册成为观察
模型对视图和控制器没有依赖！
者。
策略
对于视图来说，控制器
用户做了某件事
是策略，也就是知道如
视图毒托控制器
何处理用户动作的对象。
来处理用户动作。
控制器
想换另一种行为：换掉控
制器就可以了！
视图
视图只关注表现，控制器关注把用户输入转为楼型上的行
控制器
为。
组合
paint()
视图是GU组伴（标签、宝
00Wndow
口、文本输入等）的组合
SeBPM:
项展的组件包含其他组件
直到叶节点。
视图
你现在的位置
533
---
## Page 570
MVC和DJView
利用MVC控制节拍
现在让你来当DJ。当DJ，节拍是头等大事，你一开始可能会用95BPM（每
分钟95拍）的downtempogroove，然后转换到140BPM的trance techno，最后
是80BPM的ambientmix。
这要怎么做呢？你必须控制节拍并建造工具来帮你的忙。
认识JavaDJView
让我们从这个工具的视图开始。这个视图可以让你产生鼓声节拍，并调整其BPM
脉动柱显示实时节拍。
View
Current BPM:120
这里显示当前BPM。当BPM改变时，这里会自
动设置。
视图有两部分：重卷模
型状态的部分和控制事
物的部分。
Control
DJControl
你可以输入持定的BPM.然后点击“Set”按
Enter BPM:
120
银，就可改变每分钟的节拍。你也可以
用“>”按钮微调BPM的值。
>>
>>
A
每分钟减少BPM
每分钟增加BPM
拍。
拍。
534
第12章