multiple possible types, e.g., an img tag, a polyglot between
two of the types can evade detection. The speciﬁc cases
where this situation occurs in an exploitable way are rare,
and further work can help in determining and mitigating
such vulnerabilities.
5.2 Speciﬁc approaches
Apart from the general approach described above, there
are mitigation approaches that are speciﬁc to each of the
components involved. These are recommended to be used
until general approaches for mitigating polyglot attacks are
widely adopted.
Server-side mitigation
5.2.1
As a content provider on the Internet today there are pre-
cautions that one can take to mitigate this class of vulner-
abilities. Which precautions to take depend on the kind
of services provided. The mitigation recommendations for
syntax injection apply to all services that generate content
based on user input, and the content smuggling recommen-
dations apply to services that serve user-supplied ﬁles.
Syntax injection.
Preventing syntax injection on the server-side poses severe
challenges. Even server-side ﬁltering of HTML syntax to
prevent cross-side scripting attacks has proved diﬃcult due
to the many contexts in which JavaScript can be introduced.
Filtering all potentially harmful tokens from all formats in
which a document may be interpreted is hardly possible.
To prevent attacks based on a speciﬁc format, e.g., a
PDF-based syntax injection attack, the task is simpler. As
discussed in Section 3.3.1, the token-set identiﬁed in Sec-
tion 3.3.1, are essential to create valid PDF syntax. Filter-
ing user input to remove or encode these characters eﬀec-
tively mitigates the vulnerability. Luckily, because of the
signiﬁcant overlap with the token-set of HTML, many of
762the contexts where user input can occur are already being
protected. Special attention is required in contexts are not
traditionally ﬁltered for HTML tokens, e.g. JSON.
Content smuggling.
The current best-practice recommendation on hosting user-
supplied content is to serve the content from a sandboxed
origin that is completely separate, as per SOP, and isolated
from the sensitive services. These best-practices, provided
by Google [18], successfully prevents content smuggling at-
tacks as the restrictions of the SOP prevents the content
from accessing any sensitive resources in the origin of the
web service.
These recommendations come with a caveat to be taken
into consideration. Some user supplied content is only meant
to be accessible to certain authenticated users, e.g. photos
that are only shared with friends. In that case, the service
needs to transfer the credentials required to authenticate the
user from the sensitive origin to the sandboxed origin, with-
out actually revealing the credentials used in the sensitive
origin. Revealing the credentials, e.g. using the same cook-
ies on both origins, defeats the purpose of the sandbox ori-
gin entirely. Currently there is no uniform solution to this
problem. Some common solutions are encountered: using
the hashed credentials of the sensitive origin; or generating
public, but obscured, links that are later shared manually.
5.2.2 Browser
Traditionally, browser vendors have allowed the browser
to override the MIME-type provided by the server for com-
patibility reasons. This is a compromise to deal with the
situation that the server is confused as to what kind of con-
tent it is serving. This compromise has repeatedly shown
to lead to security issues. The aﬀected browser vendors can
help mitigate this problem by limiting the ways content can
be coerced to be interpreted as a particular format.
In the case of PDF-based polyglots, and other polyglots
that require a plugin, the browser can intervene when there
is a mismatch between the content-type provided by the
server and the type attribute of the object tag. The vulner-
ability can be mitigated by acknowledging that there is a
potential security issue in interpreting the supplied content
in the requested format and alerting the user to this threat.
An intuitive approach would be to for the browsers to
employ similar content-sniﬃng for content rendered in plug-
ins, as is already done with content native to the browser.
However, this intuition fails to take into account that the
very reason for using plug-ins is that the format is unknown
to the browser. One may argue that the browser is as con-
fused as the originating server as to the actual format of the
content, and that the issue would be best resolved by the
corresponding plug-in.
5.2.3 Interpreter / Plugin
As a general rule of thumb, the interpreter must at the
very least alert the user if the served content-type diﬀers
from the expected. A preferred alternative is to not attempt
to interpret the content at all. This holds true especially
when the served content-type is well known and radically
diﬀerent from that which the interpreter is designed for.
As for the PDF ﬁle format, the underlying design deci-
sions have led to the current parsing being very relaxed. As
discussed in Section 3.2 the PDF format is a container for-
mat; designed to embed syntax from other ﬁles. Even when
parsing strictly according to the speciﬁcation, it is a simple
task to create a PDF-based polyglot. Making the parsing
more strict and enforcing many of the speciﬁed requirements
will make it harder to create polyglots, reducing the attack
surface.
In accordance with this recommendation, Adobe
has taken the ﬁrst steps to prevent PDF-based polyglots.
Recent versions of the reader compares the ﬁrst bytes of the
document against a set of known ﬁle signatures. While this
is a step in the right direction, this kind of black listing has
its drawbacks. The diﬃculty is that a number of ﬁle formats
that lack a reliable signatures, e.g., HTML.
A diﬀerent approach is restricting capabilities of the for-
mat, sticking to the essential features. The more capable the
format is, the more likely it is to introduce security ﬂaws. In
the latest version of their reader Adobe has made progress
also in this respect by restricting the possibilities for bidi-
rectional communication.
6. RELATED WORK
Recall that the added value of our paper is a generalized
account of polyglot attacks and focus on new instances of
polyglots that involve the PDF format. We brieﬂy report
on related instances of polyglot attacks.
Backes et al. [2] explore the power of the PostScript lan-
guage. PostScript allows executable content and access to
sensitive information from the environment such as the user
id. This work demonstrates how to compromise reviewer
anonymity in a peer-reviewing process by maliciously craft-
ing a PostScript document.
As discussed in Section 2, GIFAR [4] is based on polyglots
that combine the GIF and JAR (Java archive) formats. The
former is used as benign and the latter as malicious to by-
pass SOP. The Java virtual machine vendors have since then
mitigated these attacks by patching the virtual machine to
be more conservative on the format of the executed ﬁles.
PDFAR [5] polyglots combine the PDF and JAR formats,
where PDF serves as benign and JAR serves as malicious.
Such a polyglot is possible due to the liberty of the require-
ments on the headers of PDF ﬁles. Mitigation against GI-
FAR attacks in the Java virtual machine eﬀectively applies
to PDFAR attacks.
Nagra [9] demonstrates GIF/JavaScript polyglots by the
same ﬁle being interpreted as a script and as an image and
informally discuses possible security implications.
Barth et al. [3] investigate the security implications of
content sniﬃng by browsers. They present content-sniﬃng
XSS attacks by crossbreeding HTML with other formats like
PostScript. They show attacks on real systems like HotCRP,
where an uploaded document in the PostScript format is
interpreted as malicious HTML by the browser. They also
propose a content-sniﬃng algorithm that helps defending
against this class of attacks while maintaining compatibility.
Sundareswaran and Squicciarini [14, 13] discuss image re-
purposing for GIFAR attacks. They present the AntiGifar
tool for client-side protection. AntiGifar models the benign
behavior of a user by a control-ﬂow graph and detects possi-
ble anomalies when the interactions of the user and browser
with the web site deviate from the control-ﬂow model.
As mentioned in Section 2, Huang et al. [7] study an
HTML/CSS attack. This attack injects fragments of CSS
syntax in a HTML document, thereby making it a HTM-
L/CSS polyglot. The error-tolerant parsing of style sheets
763allow the polyglot to parsed as valid CSS. The capabilities
of CSS provide trivial cross-origin leakage. As discussed ear-
lier, the paper’s defense technique has been adopted by all
major browsers, which implies that the attacks outlined in
their paper are now ineﬀective.
Wolf’s OMG WTF PDF presentation [15] is one of the
inspirations for our work. The presentation explores the
liberty of the PDF format. In addition, it highlights that
PDF interpreters often disregard the speciﬁcation demands.
This is particularly relevant as it allows crossbreeding PDF
with such formats as ZIP and EXE.
Heiderich et al. [6] explore the Scalable Vector Graphics
(SVG) format. They discover attacks that allow SVG ﬁles,
embedded via the img tag, to run arbitrary JavaScript. One
of the attack vectors involves an SVG/HTML polyglot that
behaves diﬀerently depending on the context in which it is
accessed. When included in the img tag, the ﬁle is inter-
preted as SVG, whereas when it is accessed directly it is
interpreted as malicious HTML.
7. CONCLUSIONS
We have put a spotlight on a new breed of attacks that
smuggle malicious payload formatted as benign content. We
have identiﬁed polyglots as the root cause for this class of
attacks. In a systematic study, we have characterized the
necessary ingredients for polyglot-based attacks on the web
and arrive at the PDF format to be particularly dangerous.
Our empirical studies in the web setting conﬁrm vulnera-
bilities in the current content ﬁlters both in the server side
and in browsers, as well as in the PDF interpreters. These
vulnerabilities open up for insecure communication across
Internet origins and allow attacking web sites from the top
100 Alexa list.
To mitigate the attacks, we suggest general measures against
polyglot-based attacks. These measures are a combination
of protection on the server side, in browsers, and in content
interpreters such as PDF readers.
The aﬀected vendors have been made aware of the vulner-
abilities. These vendors include Adobe (notiﬁed instantly af-
ter discovering the security implications of polyglot PDFs)
and the major browser vendors. We have also contacted the
vulnerable web sites from the top 100 Alexa list. Following
responsible disclosure, we refrain from providing the names
of the vulnerable web sites.
Future work includes identiﬁcation of further formats vul-
nerable to polyglot-based attacks. Versatile media content
formats such as the Windows Media Video format are of
particular concern because of their potential for executing
scripts.
Further investigation of the PDF format might lead to
enhanced possibilities to bypass content ﬁlters by alternative
character sets.
Acknowledgments
This work was funded by the European Community under
the ProSecuToR and WebSand projects and the Swedish
research agencies SSF and VR.
8. REFERENCES
[1] Demo page for crossing origins by crossing formats.
http://internot.noads.biz, August 2013.
[2] M. Backes, M. Durmuth, and D. Unruh. Information
ﬂow in the peer-reviewing process. In Proc. IEEE
Symp. on Security and Privacy, pages 187–191, May
2007.
[3] A. Barth, J. Caballero, and D. Song. Secure content
sniﬃng for web browsers, or how to stop papers from
reviewing themselves. In Proc. IEEE Symp. on
Security and Privacy, pages 360–371, May 2009.
[4] R. Brandis. Exploring Below the Surface of the
GIFAR Iceberg. An EWA Australia Information
Security Whitepaper. Electronic Warfare
Associates-Australia, February 2009.
[5] N. Dhanjani, B. Hardin, and B. Rios. Hacking: The
Next Generation. O’Reilly Media, August 2009.
[6] M. Heiderich, T. Frosch, M. Jensen, and T. Holz.
Crouching tiger - hidden payload: security risks of
scalable vectors graphics. In ACM Conference on
Computer and Communications Security, pages
239–250, October 2011.
[7] L.-S. Huang, Z. Weinberg, C. Evans, and C. Jackson.
Protecting browsers from cross-origin css attacks. In
ACM Conference on Computer and Communications
Security, pages 619–629, October 2010.
[8] Adobe Systems Incorporated. ISO 32000-1:2008
Document management - Portable document format,
2008.
[9] J. Nagra. GIF/Javascript Polyglots. http:
//www.thinkfu.com/blog/gifjavascript-polyglots,
February 2009.
[10] Open Web Application Security Project (OWASP).
OWASP Top 10 2013.
https://www.owasp.org/index.php/Top_10_2013,
2013.
[11] SANS (SysAdmin, Audit, Network, Security)
Institute. The top cyber security risks.
http://www.sans.org, September 2009.
[12] B. Sterne and A. Barth. Content Security Policy 1.0
(W3C Candidate Recommendation).
http://www.w3.org/TR/CSP, November 2012.
[13] S. Sundareswaran and A. Squicciarini. DeCore:
Detecting Content Repurposing Attacks on Clients’
Systems. In Proc. International Conference on
Security and Privacy in Communication Networks
(SecureComm), pages 199–216. Springer-Verlag,
September 2010.
[14] S. Sundareswaran and A. Squicciarini. Image
repurposing for gifar-based attacks. In Collaboration,
Electronic messaging, Anti-Abuse and Spam
Conference, July 2010.
[15] J. Wolf. OMG WTF PDF. Presentation at the Chaos
Computer Congress, December 2010.
[16] World Wide Web Consortium. Cross-Origin Resource
Sharing.
http://www.w3.org/TR/2012/WD-cors-20120403/,
April 2012.
[17] XSSed Team. XSS Attacks Information.
http://www.xssed.com, 2012.
[18] M. Zalewski. Content hosting for the modern web.
http://googleonlinesecurity.blogspot.se/2012/
08/content-hosting-for-modern-web.html, August
2012.
764