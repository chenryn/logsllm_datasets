### 5.2 Specific Mitigation Approaches

In addition to the general mitigation strategies, there are specific approaches tailored to each component involved in polyglot attacks. These methods are recommended until more comprehensive solutions for mitigating polyglot attacks become widely adopted.

#### 5.2.1 Server-Side Mitigation

As a content provider, several precautions can be taken to mitigate this class of vulnerabilities. The appropriate measures depend on the type of services provided. For instance, syntax injection mitigation is relevant for all services that generate content based on user input, while content smuggling recommendations apply to services that serve user-supplied files.

**Syntax Injection:**
Preventing syntax injection on the server-side is challenging. Even filtering HTML syntax to prevent cross-site scripting (XSS) attacks has proven difficult due to the many contexts in which JavaScript can be introduced. Filtering all potentially harmful tokens from all formats in which a document may be interpreted is nearly impossible.

However, for specific formats, such as PDF-based syntax injection, the task is simpler. As discussed in Section 3.3.1, certain tokens are essential for creating valid PDF syntax. By filtering or encoding these characters in user input, the vulnerability can be effectively mitigated. Due to the significant overlap with HTML tokens, many contexts where user input can occur are already protected. Special attention is required in contexts not traditionally filtered for HTML tokens, such as JSON.

**Content Smuggling:**
The current best practice for hosting user-supplied content is to serve it from a sandboxed origin that is completely separate and isolated from sensitive services, as per the Same-Origin Policy (SOP). This approach, recommended by Google [18], prevents content smuggling attacks by restricting the content's access to sensitive resources in the web service's origin.

However, some user-supplied content, like photos shared only with friends, requires special handling. In such cases, the service must transfer the necessary credentials from the sensitive origin to the sandboxed origin without revealing the actual credentials used in the sensitive origin. Revealing the credentials, such as using the same cookies on both origins, defeats the purpose of the sandbox. Currently, there is no uniform solution to this problem. Common solutions include using hashed credentials from the sensitive origin or generating public but obscured links that are manually shared.

#### 5.2.2 Browser Mitigation

Traditionally, browser vendors have allowed the browser to override the MIME-type provided by the server for compatibility reasons. This compromise, intended to handle servers that are confused about the content type, has repeatedly led to security issues. Affected browser vendors can help mitigate this problem by limiting the ways content can be coerced into being interpreted as a particular format.

For PDF-based polyglots and other polyglots requiring a plugin, the browser can intervene when there is a mismatch between the content-type provided by the server and the type attribute of the object tag. Acknowledging the potential security issue and alerting the user to the threat can mitigate the vulnerability.

An intuitive approach would be for browsers to employ similar content-sniffing for content rendered in plugins, as is already done with native browser content. However, this fails to account for the fact that the very reason for using plugins is that the format is unknown to the browser. It could be argued that the browser is as confused as the originating server about the actual format of the content, and the issue would be best resolved by the corresponding plugin.

#### 5.2.3 Interpreter/Plugin Mitigation

As a general rule, the interpreter should at least alert the user if the served content-type differs from the expected. A preferred alternative is to not attempt to interpret the content at all, especially when the served content-type is well-known and radically different from what the interpreter is designed for.

For the PDF file format, the underlying design decisions have led to very relaxed parsing. As discussed in Section 3.2, the PDF format is a container format designed to embed syntax from other files. Even when parsing strictly according to the specification, it is easy to create a PDF-based polyglot. Making the parsing more strict and enforcing many of the specified requirements will make it harder to create polyglots, thereby reducing the attack surface.

Adobe has taken initial steps to prevent PDF-based polyglots. Recent versions of the reader compare the first bytes of the document against a set of known file signatures. While this is a step in the right direction, blacklisting has its drawbacks, particularly for file formats lacking reliable signatures, such as HTML.

A different approach is to restrict the capabilities of the format, sticking to essential features. The more capable the format, the more likely it is to introduce security flaws. Adobe has made progress in this respect by restricting the possibilities for bidirectional communication in the latest version of their reader.

### 6. Related Work

Our paper provides a generalized account of polyglot attacks, focusing on new instances involving the PDF format. We briefly report on related instances of polyglot attacks.

- **Backes et al. [2]** explore the power of the PostScript language, demonstrating how to compromise reviewer anonymity in a peer-reviewing process by maliciously crafting a PostScript document.
- **GIFAR [4]** combines the GIF and JAR (Java archive) formats, with the former used as benign and the latter as malicious to bypass SOP. Java virtual machine vendors have since mitigated these attacks by patching the virtual machine to be more conservative about the format of executed files.
- **PDFAR [5]** combines the PDF and JAR formats, with PDF serving as benign and JAR as malicious. Mitigation against GIFAR attacks in the Java virtual machine also applies to PDFAR attacks.
- **Nagra [9]** demonstrates GIF/JavaScript polyglots, where the same file is interpreted as a script and an image, and informally discusses possible security implications.
- **Barth et al. [3]** investigate the security implications of content sniffing by browsers, presenting content-sniffing XSS attacks by crossbreeding HTML with other formats like PostScript. They propose a content-sniffing algorithm to defend against such attacks while maintaining compatibility.
- **Sundareswaran and Squicciarini [14, 13]** discuss image repurposing for GIFAR attacks, presenting the AntiGifar tool for client-side protection. AntiGifar models the benign behavior of a user by a control-flow graph and detects possible anomalies.
- **Huang et al. [7]** study an HTML/CSS attack, injecting CSS syntax fragments into an HTML document to create an HTML/CSS polyglot. The error-tolerant parsing of style sheets allows the polyglot to be parsed as valid CSS. The defense technique has been adopted by major browsers, making the attacks outlined in their paper ineffective.
- **Wolf’s OMG WTF PDF presentation [15]** explores the liberty of the PDF format, highlighting that PDF interpreters often disregard the specification demands, allowing crossbreeding with formats like ZIP and EXE.
- **Heiderich et al. [6]** explore the Scalable Vector Graphics (SVG) format, discovering attacks that allow SVG files embedded via the `img` tag to run arbitrary JavaScript. One attack vector involves an SVG/HTML polyglot that behaves differently depending on the context in which it is accessed.

### 7. Conclusions

We have highlighted a new breed of attacks that smuggle malicious payloads formatted as benign content. Polyglots are identified as the root cause of this class of attacks. Our systematic study characterizes the necessary ingredients for polyglot-based attacks on the web and identifies the PDF format as particularly dangerous. Empirical studies confirm vulnerabilities in current content filters on the server side, in browsers, and in PDF interpreters, opening up insecure communication across Internet origins and allowing attacks on top 100 Alexa-listed websites.

To mitigate these attacks, we suggest general measures against polyglot-based attacks, combining protection on the server side, in browsers, and in content interpreters like PDF readers. The affected vendors, including Adobe and major browser vendors, have been notified of the vulnerabilities. Future work includes identifying further formats vulnerable to polyglot-based attacks and investigating versatile media content formats like the Windows Media Video format.

### Acknowledgments

This work was funded by the European Community under the ProSecuToR and WebSand projects and the Swedish research agencies SSF and VR.

### References

[1] Demo page for crossing origins by crossing formats. http://internot.noads.biz, August 2013.

[2] M. Backes, M. Durmuth, and D. Unruh. Information flow in the peer-reviewing process. In Proc. IEEE Symp. on Security and Privacy, pages 187–191, May 2007.

[3] A. Barth, J. Caballero, and D. Song. Secure content sniffing for web browsers, or how to stop papers from reviewing themselves. In Proc. IEEE Symp. on Security and Privacy, pages 360–371, May 2009.

[4] R. Brandis. Exploring Below the Surface of the GIFAR Iceberg. An EWA Australia Information Security Whitepaper. Electronic Warfare Associates-Australia, February 2009.

[5] N. Dhanjani, B. Hardin, and B. Rios. Hacking: The Next Generation. O’Reilly Media, August 2009.

[6] M. Heiderich, T. Frosch, M. Jensen, and T. Holz. Crouching tiger - hidden payload: security risks of scalable vectors graphics. In ACM Conference on Computer and Communications Security, pages 239–250, October 2011.

[7] L.-S. Huang, Z. Weinberg, C. Evans, and C. Jackson. Protecting browsers from cross-origin CSS attacks. In ACM Conference on Computer and Communications Security, pages 619–629, October 2010.

[8] Adobe Systems Incorporated. ISO 32000-1:2008 Document management - Portable document format, 2008.

[9] J. Nagra. GIF/Javascript Polyglots. http://www.thinkfu.com/blog/gifjavascript-polyglots, February 2009.

[10] Open Web Application Security Project (OWASP). OWASP Top 10 2013. https://www.owasp.org/index.php/Top_10_2013, 2013.

[11] SANS (SysAdmin, Audit, Network, Security) Institute. The top cyber security risks. http://www.sans.org, September 2009.

[12] B. Sterne and A. Barth. Content Security Policy 1.0 (W3C Candidate Recommendation). http://www.w3.org/TR/CSP, November 2012.

[13] S. Sundareswaran and A. Squicciarini. DeCore: Detecting Content Repurposing Attacks on Clients’ Systems. In Proc. International Conference on Security and Privacy in Communication Networks (SecureComm), pages 199–216. Springer-Verlag, September 2010.

[14] S. Sundareswaran and A. Squicciarini. Image repurposing for GIFAR-based attacks. In Collaboration, Electronic messaging, Anti-Abuse and Spam Conference, July 2010.

[15] J. Wolf. OMG WTF PDF. Presentation at the Chaos Computer Congress, December 2010.

[16] World Wide Web Consortium. Cross-Origin Resource Sharing. http://www.w3.org/TR/2012/WD-cors-20120403/, April 2012.

[17] XSSed Team. XSS Attacks Information. http://www.xssed.com, 2012.

[18] M. Zalewski. Content hosting for the modern web. http://googleonlinesecurity.blogspot.se/2012/08/content-hosting-for-modern-web.html, August 2012.