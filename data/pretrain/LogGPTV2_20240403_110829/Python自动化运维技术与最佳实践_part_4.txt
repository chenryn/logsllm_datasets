---
## Page 26
第1章系统基础信息模块详解5
sdisku８ａge (tota1=154８1577472, u８ed=400８0８7552, free=106８7057920,
percent=25, 899999999999999)
>>>psuti1 disk_io_counters ()
>>>
使用pauti1,disk_io_counters获取硬盘总的1o个数、
sdiskio (read_count=9424, vrite_count=35824, read_bytes=128006144,Write,
读写信息
bytes=204312576, read_time=72266, write_time=182485)
>>>
读写信息
(*sda2*: sdiskio (read_count=322, vrite_count=0, read_bytes=1445888, vrite_
bytes=0, read_time=445, write_tine=0), *sda3*: sdiskio (read_count=618, write_
count=3, read_bytes=2855936, write_bytes=12288, read_tine=871, write_time=155),
'sda1*: sdiskio(zead_count=8484, vrite_count=35821, read_bytes=123704320,
write_bytes=204300288, read_t1ne=70950, vrite_t.me=182330)1
（4）网络信息
系统的网络信息与磁盘IO类似，涉及几个关键点，包括bytes_sent（发送字节数）、
bytes_recv=28220119（接收字节数）、packets_sent=200978（发送数据包数）、packets_
recv=212672（接收数据包数）等。这些网络信息使用psutil.net_io_countersO方法获取，其体
见下面的操作例子：
>>>psuti1.net_io_counters()
使用psuti1.net_io_counters 获取网络总的I0信息，默
snetio (bytes_sent=27098178, bytes_recv=28220119, packets_sent=200978, packets_
+  pernic=False
recv=212672, errin=0, errout=0, dropin=0, dropout=0)
>>>psuti1,net_io_counters(pernie=True)+pernic=True 输出每个网路接口 的 Io 靠息
(*1o′: snetio (bytes_sent=26406824, bytes_recv=26406824, packets_sent=198526,
packets_recv=198526, errin=0, errout=0, dropin=0, dropout=0), *eth0':
snetio(bytes_sent=694750, bytes_recv=1816743, packets_sent=2478, packets_
recv=14175, errin=0, errout=0, dropin=0, dropout=0)}
>>>
（5）其他系统信息
除了前面介绍的几个获取系统基本信息的方法，psutil模块还支持获取用户登录、开机
时间等信息，具体见下面的操作例子：
>>>psuti1,users()使用 psuti1.users 方法返图盗前登录系统的用户售息
[suｓeｒ (nａmｅ=.roｏｔ., teｒｎiｎａl='pts/0., hｏｓt=.19２.16８.1.103*,
started=139４63８7２0.0), suser (ｎａme='root', teｌmiｎal- *pt８/1* ,
host=*192.168 .1.103′, started=1394723840.0)1
>>> import psutil, datetime
>>>psuti1.boot_time ()
使用 psuti1.boot_time 方法获取开机时间，以 Linux 时闽数格式通团
1389563460 .0
>>>datetine.datetime. fromtimestanp (psuti1 .boot_time ()) stzftime (*sY=3n=§d
IE: M:$S*)
---
## Page 27
6第一部分基础篇
 2014-01-12 22:51:00*
转换成自然时问移式
1.1.2系统进程管理方法
获得当前系统的进程信息，可以让运维人员得知应用程序的运行状态，包括进程的启动
时间、查看或设置CPU亲和度、内存使用率、IO信息、socket连接、线程数等，这些信息
可以呈现出指定进程是否存活、资源利用情况，为开发人员的代码优化、问题定位提供很好
的数据参考。
（1）进程信息
psutil模块在获取进程信息方面也提供了很好的支持，包括使用psutilpidsO方法获取所
有进程PID，使用psutilLProcessO方法获取单个进程的名称、路径、状态、系统资源利用率
等信息，具体见下面的操作例子：
TTansd roduT >>p-psuti1.Proces8（2424)实例化一个 Process对象，参数为一进程 PID
>>> p.name ()进程名
‘}ava'
>>>p.exe(）进程 bin 路径
• /usr/java/jdk1.6.0_45/bin/3ava*
>>>p-cwd(1进程工节目录绝对昂径
• /usr/1oca1/hadoop-1.2.1*
() snse?s*d>>p-create_time ()
进程创建时间，时间数格式
1394852592, 6900001
()sptn*d>>p,cpu_times ()
进程 CPU 时润售息，包括user、system 两个 CPU 时间
pcputines (user=9,0500000000000007, system=20.25)
[0, 1]
>>>p, cpu_affinity ()
get进程CPU亲和度，如要设置进程CPU素和度，将CPU号作为参数即可
() sueo.adAzouou*d>>p.nenory_info ()
14.147714861289776
进程内存rss、vms等息
pmem(rss=71626752,
vms=1575665664)
>>>p-1o_counter8 ()
进程10信惠，包括读写10数及字节数
pio(read_count=41133, vrite_count=16811, read_bytes=37023744, vrite_
>>p- connections ()
bytes=4722688)
返图打开进程 socket 的 namedutples 列表，包括[s、fam11y、LaGdr
[pconn (fd=65, fan11y=10, type=1, 1addr=(′::ffff:192.168.1,20*, 9000),
等信息
---
## Page 28
第1章系统基础信息模块详解7
() speervaunu d>>from subprocess inport PIPE
TTansd xodaT >> p = psuti1.Popen([*/usr/bin/python", *=c*, *print (*hello*)"], stdout=PIPE)
>>>p,name ()
,uoqAd,
() eueuxasn'dc>>p,communicate ()
(*hello^n′, None)
>>>p.cpu_tines ()
得到进程运行的 CPU 时间。更多方法见上一小节
pcputimes (user=0.01, system=0 ,040000000000000001)
se/8osopopearnsd/:d的 111 
1.2实用的IP地址处理模块IPy
IP地址规划是网络设计中非常重要的一个环节，规划的好坏会直接影响路由协议算法的
效率，包括网络性能、可扩展性等方面，在这个过程当中，免不了要计算大量的IP地址，包
括网段、网络掩码、广播地址、子网数、IP类型等。Python提供了一个强大的第三方模块
IPy（https://github.com/haypo/python-ipy/)，最新版本为V0.81。IPy模块可以很好地辅助我们
高效完成IP的规划工作，下面进行详细介绍。
以下是IPy模块的安装，这里采用源码的安装方式：
ou-- z5*z#*ta*0a1/AaI/I/ao2noe/ea6exoed/6zo*uova.d·rd>>IP(′10,0,0.0/8′) ,ver8ion ()
7
>>>IP ('::1′) .version ()
4 代表 IPv4 类型
6
#6 代表 IPv6 类型
通过指定的网段输出该网段的IP个数及所有IP地址清单，代码如下：
p - IP(*192.168,0.0/16*)
from IPy import IP
()ua*dy auyad
输出192.168.0.0/16网段的IP个数
for x in ip1
输出192.168.0.0/16网段时所有IP清单
print (x)
执行结果如下：
65536
192.168.0.0
192.168.0.1
192.168.0.2
192.168,0.3
192.168.0.4
192.168.0.5
192.168.0.6
192.168.0.7
192.168.0.8
下面介绍IP类几个常见的方法，包括反向解析名称、IP类型、IP转换等。
>>>from IPy 1nport IP
>>>ip,reverseNames ()
>>>p = IP(′192.168.1.20′)
[*20.1.168,192.1n=addr arpa.*]
反向解析地址格式
()add*>> IP(*8.8,8.8*) .int ()
'PUBLIC'
+转换成整型格式
134744072
>>> IP (*8.8, 8.8′) strHex()
转换成十六进制格式
*0x8080808*
>>> IP (*8.8, 8.8*) .strBin()
*00001000000010000000100000001000*
转换成二进制格式
>>> print (IP(0x8080808))
十六进制特成IP格式
8*9*8'6
---
## Page 30
第1章系统基础信息模块详解9
IP方法也支持网络地址的转换，例如根据IP与掩码生产网段格式，如下：
dI zodu AaI wngccc
>>>print (IP(*192.168 .1 . 0′) -make_net (*255.255.255, 0*))
>>>priot (IP>>print (IP>>IP(*192 .168 .1.0/24*) ,stzNorma1 (0)
>>>IP(*192.168 .1.0/24*) . strMornal (1)
192.168.1.0*
*192.168. 1.0/24*
>>>IP (*192 .168 .1 0/24*) ,8tzNormal (2)
>>>IP (*192.168 .1.0/24*) strNormal (3)
192.168.1.0/255.255.255.0*
*192.168.,1.0-192.168.1.255*
wantprefixlen的取值及含义：
 wantprefixlen = 0，无返回，如n 192.168.1.0;
 wantprefixlen = 1, prefix 格式, 如I 192.168.1.0/24;
 wantprefixlen = 2,decimalnetmask 格式, 如 192.168.1.0/255.255.255.0;
 wantprefixlen = 3, lastIP 格式, 如 192.168.1.0-192.168.1.255。
1.2.2多网络计算方法详解
有时候我们想比较两个网段是否存在包含、重叠等关系，比如同网络但不同prefixlen会
认为是不相等的网段，如10.0.0.0/16不等于10.0.0.0/24，另外即使具有相同的prefixlen但处
于不同的网络地址，同样也视为不相等，如10.0.0.0/16不等于192.0.0.0/16。IPy支持类似于
数值型数据的比较，以帮助IP对象进行比较，如：
>>>IP(*10 ,0.0,0/24*) >> *192.168.1.100*1n IP(*192.168.1.0/24*)
>>>IP(*192.168.1.0/24*) in IP (*192.168.0.0/16*)
---
## Page 31
10第一部分基础篇
判断两个网段是否存在重叠，采用IPy提供的overlaps方法，如：
>>>IP (*192.168,0 , 0/23′) .0ver1ap8 (*192.168.1.0/24′)
返罚1代表存在重叠
>>>IP(*192.168.1 0/24') -over1aps (*192.168.2.0′)
巡罚0代表不存在重叠
示例根据输入的IP或子网返回网络、掩码、广播、反向解析、子网数、IP类型等信息。
#1/usr/bin/env python
fron IPy import IP
ip_s = rau_input ('Please input an IP or net-range: ')
接收用户输入，参数为IP
地址或网段地址
(sdT)dI = sdT
if len (ips) > 1:
为一个网络地址
print('net: &s* $ ips.net ())
粮出网婚地址
print (*netmask: s' $ ips.netmask())
输出网络掩码地过
print（*broadcast：s′ips,broadcast （1)+输出河络广播地址
print (′reverse address: ?s*  ips.reverseNames () [0])
输出地址反向解析
print(*subnet: ts′  len(ips))
+输出河络子河数
else:
为单个IP地址
print(*reverse address: ts* $ ips.reverseNames ()[0]}
输出IP 反向解析
print (*hexadecinal: §s* $ ips.strBex())
输出十六进制地址
print (*iptype: $s* $ ips.iptype ())*
输出地址类型，如 PRIVATE、PUBLIC、LOOPBACK 等
分别输入网段、IP地址的运行返回结果如下：
 python simple1-py
net: 192.168.1.0
Please input an IP or net-range1 192.168.1.0/24
netnask: 255.255.255.0
broadcast: 192.168.1.255
reverse address: 1.168.192.in-addr.arpa.
992 :3euqns
hexadecinal: 0xc0a80100
binaryip: 11000000101010000000000100000000
iptype1 PRIVATE
 python simple1 -py
Please input an IP or net-range: 192.168.1.20
reverse address: 20.1.168,192.in=addr,arpa.
hexadecinal: 0xc0a80114
binaryip: 11000000101010000000000100010100
iptype: PRIVATE
---
## Page 32
第1章系统基础信息模块详解11
口1.2.1节官网文格与示例参考htps:/github.com/haypo/python-ipy/。
 1.2.2 节示例 1 参考 http:/blog.philippklaus.de/2012/12/ip-address-analysis-using
python/ f和u http://www.sourcecodebrowser.com/ipy/0.62/class_i_py_1_1_i_pint.html
等文章的IPy类说明。
口书中涉及的所有示例及源码的Github地址为https:/github.com/yorkoliu/pyauto。
1.3DNS处理模块dnspython
dnspython（http:/www.dnspython.org/）是Python 实现的个 DNS 工具包，它支持几乎
所有的记录类型，可以用于查询、传输并动态更新ZONE信息，同时支持TSIG（事务签名）
验证消息和EDNSO（扩展DNS）。在系统管理方面，我们可以利用其查询功能来实现DNS
服务监控以及解析结果的校验，可以代替nslookup及dig等工具，轻松做到与现有平台的整
合，下面进行详细介绍。
首先介绍dnspython模块的安装，这里采用源码的安装方式，最新版本为1.9.4，如下：