运行在 always 模式的 AOF 持久化之下，事务也不具有耐久性。在默认配置下，no-
因此，如果服务器打开了 no-appendfsync-on-rewrite 选项，那么即使服务器
立，因为在服务器停止对AOF 文件进行同步期间，事务结果可能会因为停机而丢失。
一来，关于“always 模式的AOF持久化可以保证事务的耐久性”这一结论将不再成
不论 Redis 在什么模式下运作，在一个事务的最后加上 SAVE命令总可以保证事务的耐
间，服务器会暂时停止对AOF 文件进行同步，从而尽可能地减少I/O 阻塞。但是这样
rewrite选项处于打开状态时，在执行BGSAVE命令或者BGREWRITEAOF命令期
口带有 WATCH命令的事务会将客户端和被监视的键在数据库的 watched_keys 字
口事务在执行过程中不会被中断，当事务队列中的所有命令都被执行完毕之后，事务
口多个命令会被人队到事务队列中，然后按先进先出（FIFO）的顺序执行。
口事务提供了一种将多个命令打包，然后一次性、有序地执行的机制。
不过因为这种做法的效率太低，所以并不具有实用性。
redis> EXEC
QUEUED
redis> SAVE
QUEUED
redis> SET msg "hello"
redis> MULTI
当服务器运行在 AOF 持久化模式下，并且 appendfsync 选项的值为 no时，程序
才会结束。
配置选项 no-appendfsync-on-rewrite 可以 配合 appendfsync 选项
DIRTY_CAS 标志打开。
典中进行关联，当键被修改时，程序会将所有监视被修改键的客户端的 REDIS
的过程中丢失，所以这种配置下的事务不具有耐久性。
会交由操作系统来决定何时将命令数据同步到硬盘。因为事务数据可能在等待同步
 no-appendfsync-on-rewrite 配置选项对耐久性的影响
第19章
事
务·319
---
## Page 324
320·第四部分独立功能的实现
19.5
Redis 官方网站上的《事务》文档记录了 Redis 处理事务错误的方式，以及 Redis 不
《数据库系统实现》一书的第6章《系统故障对策》，对事务、事务错误、日志等主
口维基百科的 ACID 词条给出了 ACID 性质的定义：http://en.wikipedia.org/wiki/ACID。
口 Redis 的事务总是具有 ACID 中的原子性、一致性和隔离性，
口只有在客户端的 REDIS_DIRTY_CAS 标志未被打开时，服务器才会执行客户端提交
题进行了讨论。
的事务，否则的话，服务器将拒绝执行客户端提交的事务。
支持事务回滚的原因：http://redis.io/topics/transactions。
持久化模式下，并且 appendfsync 选项的值为 always 时，事务也具有耐久性。
参考资料
当服务器运行在AOF
---
## Page 325
服务器中是如何被执行的，并对管理脚本的四个命令一
典则有助于理解SCRIPTEXISTS命令和脚本复制功能的实现原理。
户端可以知道脚本中的 Redis 命令在执行时，服务器与Lua 环境的交互过程，而了解脚本字
包含的 Redis 命令的伪客户端，以及负责保存传人服务器的Lua 脚本的脚本字典。了解伪客
行了哪些修改，而这些修改又对用户执行Lua 脚本产生了什么影响和限制。
要求校验和对应的脚本必须至少被 EVAL 命令执行过一次：
户端可以使用Lua 脚本，直接在服务器端原子地执行多个 Redis 命令。
在这之后，本章将介绍 EVAL 命令和 EVALSHA 命令的实现原理，说明 Lua 脚本在 Redis
接着，本章将介绍与 Lua 环境进行协作的两个组件，它们分别是负责执行Lua 脚本中
首先，本章将介绍 Redis 服务器初始化 Lua 环境的整个过程，说明 Redis 对 Lua 环境进
本章将对 Redis 服务器中与 Lua 脚本有关的各个部分进行介绍。
或者这个校验和对应的脚本曾经被SCRIPTLOAD命令载人过：
redis> EVAL "return l+1" 0
而使用EVALSHA命令则可以根据脚本的 SHA1校验和来对脚本进行求值，但这个命令
其中，使用 EVAL 命令可以直接对输入的脚本进行求值：
Redis 从 2.6 版本开始引人对 Lua 脚本的支持，通过在服务器中嵌人 Lua 环境，Redis 客
(integer)4
integer)2
redis> EVALSHA “a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9" 0 // 上-个脾本的校验和
"hello world"
—SCRIPT FLUSH 命令、SCRIPT
Lua脚本
第20章
---
## Page 326
322·第四部分独立功能的实现
20.1.2载入函数库
Redis 的操作要求，接下来服务器将对这个Lua环境进行一系列修改。
20.1.1 创建 Lua 环境
排序，从而消除这些命令的不确定性。
脚本中引人副作用。
脚本中执行 Redis 命令的redis.call 函数。
ment），并对这个Lua环境进行了一系列修改，从而确保这个Lua 环境可以满足Redis服务器
20.1创建并修改 Lua 环境
EXISTS 命令、SCRIPTLOAD 命令、SCRIPTKILL 命令的实现原理进行介绍。
环境。
Lua脚本。接下来的各个小节将分别介绍这些步骤。
全局变量添加到Lua环境中。
的需要。
因为 lua_open 函数创建的只是一个基本的 Lua 环境，为了让这个 Lua 环境可以满足
在最开始的这一步，服务器首先调用 Lua 的 C API 函数 lua_open，创建一个新的 Lua
8）将完成修改的 Lua 环境保存到服务器状态的 lua 属性中，等待执行服务器传来的
5）创建排序辅助函数，Lua 环境使用这个辅佐函数来对一部分 Redis 命令的结果进行
6）创建redis.pcall函数的错误报告辅助函数，这个函数可以提供更详细的出错信息。
4）使用 Redis 自制的随机函数来替换Lua 原有的带有副作用的随机函数，从而避免在
口表格库（table library）：这个库包含用于处理表格的通用函数，比如 table，
Redis 修改 Lua 环境的第一步，就是将以下函数库载人到 Lua 环境里面：
7）对Lua环境中的全局环境进行保护，防止用户在执行Lua脚本的过程中，将额外的
为了在Redis 服务器中执行 Lua 脚本，Redis 在服务器内嵌了一个Lua 环境（environ-
最后，本章将以介绍 Redis 在主从服务器之间复制Lua 脚本的方法作为本章的结束。
口基础库（base library）：这个库包含Lua 的核心（core）函数，比如 assert
3）创建全局表格redis，这个表格包含了对 Redis 进行操作的函数，比如用于在Lua
2）载人多个函数库到Lua环境里面，让Lua 脚本可以使用这些函数库来进行数据操作。
1）创建一个基础的Lua 环境，之后的所有修改都是针对这个环境进行的。
Redis 服务器创建并修改Lua环境的整个过程由以下步骤组成：
 concat、table.insert、 table.remove、table.sort 等。
不安全的代码，库中的loadfile 函数会被删除。
error、pairs、tostring、pcall等。另外，为了防止用户从外部文件中引人
---
## Page 327
通过这两个函数，用户可以直接在Lua脚本中执行 Redis 命令：
量。
20.1.3创建redis 全局表格
复杂的操作。
在这些函数里面，最常用也最重要的要数redis.call 函数和 redis.pcall 函数,
在这一步，服务器将在Lua 环境中创建一个 redis 表格（table），并将它设为全局变
用于返回错误信息的 redis.error_reply函数和 redis.status_reply函数。
口月
用于记录 Redis 日志（log）的redis.log 函数，以及相应的日志级别（level）常
口用于执行 Redis 命令的 redis.cal1 和 redis.pcall 函数。
这个redis表格包含以下函数：
通过使用这些功能强大的函数库，Lua 脚本可以直接对执行 Redis 命令获得的数据进行
 Lua cmsgpack 库（https://github.com/antirez/lua-cmsgpack）：这个库用于处理
口 Struct 库（http://www.inf.puc-rio.br/~roberto/struct/）：这个库用于在 Lua 值和C结
 Lua CJSON 库（http://www.kyne.com.au/~mark/software/lua-cjson.php ） : 这个库用于
口调试库（debug library）：这个库提供了对程序进行调试所需的函数，比如对程
口 数学库（math library）：这个库是标准C语言数学库的接口，它包括计算绝对值的
口字符串库（string library）：这个库包含用于处理字符串的通用函数，比如用于对字
数据，而 cmsgpack.unpack 函数则将 MessagePack 数据转换为 Lua 值。
MessagePack 格式的数据，其中 cmsgpack.pack 函数将 Lua 值转换为 MessagePack
用于计算 SHA1 校验和的 redis.shalhex函数。
redis.LOG_WARNING.
个Lua值。
（struct-like）字符串，而函数 struct.unpack则从一个类结构字符串中解包出多
构（struct）之间进行转换，函数 struct·pack将多个Lua 值打包成一个类结构
式的字符串。
符串转换为一个 Lua值，而 cj son.encode 函数将一个 Lua 值序列化为 JSON 格
处理 UTF-8 编码的 JSON 格式，其中 cjson.decode 函数将一个 JSON 格式的字
setmetatable函数，获取对象元数据的 debug·getmetatable函数等。
回给定函数相关信息的 debug·getinfo函数，为对象设置元数据的 debug,
序设置钩子和取得钩子的 debug.sethook 函数和 debug.gethook 函数，返
函数，计算二次方根的 math.sqrt 函数，计算对数的 math.log 函数等。
math.abs 函数，返回多个数中的最大值和最小值的 math.max 函数和 math.min
reverse 函数等。
函数，查看字符串长度的 string.len 函数，对字符串进行翻转的 string.
符串进行查找的 string.find 函数，对字符串进行格式化的 string.format
第20章Lua脚本◆323
---
## Page 328
324·第四部分独立功能的实现
1所产生的随机序列：
math.randomseed函数，替换之后的两个函数有以下特征：
用要求。
数和 math.randomseed 函数都是带有副作用的，它们不符合 Redis 对 Lua 环境的无副作
function )。
的 Lua 脚本，以及 Lua 环境中的所有函数，都必须是无副作用（side effect）的纯函数（pure
20.1.4使用 Redis 自制的随机函数来替换 Lua 原有的随机函数
因为这个原因，Redis 使用自制的函数替换了 math 库中原有的 math.random 函数和
为了保证相同的脚本可以在不同的机器上产生相同的结果，Redis要求所有传人服务器
例如，使用以下脚本，我们可以打印 seed 值为0时，math.random 对于输人10至
口对于相同的 seed 来说，math.random 总产生相同的随机数序列，这个函数是一个
但是，在之前载人 Lua 环境的 math 函数库中，用于生成随机数的 math.random函
但是，如果我们在另一个脚本里面，调用 math.randomseed 将 seed 修改为 10086:
10）（integer）2
无论执行这个脚本多少次，产生的值都是相同的：
while (i>0)do
local seq = {}
local i = 10 
--random-with-default-seed.lua
口除非在脚本中使用 math.randomseed 显式地修改 seed，否则每次运行脚本时，
returnseg
end
PONG
redis> EVAL, "return redis.call('PING')" 0
$
redis-cli
Lua 环境都使用固定的 math.randomseed（O）语句来初始化 seed。
纯函数。
(integer)
integer
(integer)
(integer)
(integer)
(integer)
integer
seq[i]
integer
integer
 --eval random-with-default-seed.lua
math.random(i)
---
## Page 329
同，它们的输出结果也可能并不相同。
比如对于一个集合键来说，因为集合元素的排列是无序的，所以即使两个集合的元素完全相
math 库的 math.random 函数和 math.randomseed 函数进行了替换。
20.1.5
对于Lua 脚本来说，另一个可能产生不一致数据的地方是那些带有不确定性质的命令。
3）
N
redis> SMEMBERS another-fruit
redis> SADD another-fruit cherry banana apple
redis> SMEMBERS fruit
redis> SADD fruit apple banana cherry
考虑下面这个集合例子：
上一个小节说到，为了防止带有副作用的函数令脚本产生不一致的数据，Redis 对
那么这个脚本生成的随机数序列将和使用默认seed值0 时生成的随机序列不同：
(integer) 3
(integer) 3
return seq
end
while (i > 0) do
local seq = {}
local i = 10 
math.randomseed(10086) --change seed
--random-with-new-seed.lua
"eueueq..
redis-cli
"cherry"
"apple"
"banana'
"cherry"
(integer)
(integer)
(integer)
(integer)
创建排序辅助函数
(integer)
(integer)
integer
(integer)
(integer)
integer
i=i-1
--eval random-with-new-seed.lua
2
1
第20章Lua脚本325
---
## Page 330
326·第四部分独立功能的实现
供方便。
理函数，当脚本调用redis.pcall 函数执行 Redis 命令，并且被执行的命令出现错误时,
20.1.6创建 redis.pcall函数的错误报告辅助函数
出进行过排序了：
SMEMBERS命令，那么两个脚本将得出相同的结果，因为脚本已经对SMEMBERS命令的输
回值做一次排序，以此来保证相同的数据集总是产生相同的输出。
用_redis_compare_helper 作为对比函数，自动调用table.sort 函数对命令的返
redis_compare_helper，当 Lua 脚本执行完一个带有不确定性的命令之后，程序会使
_redis_érr_handler 就会打印出错代码的来源和发生错误的行数，为程序的调试提
定性的命令”，这些命令包括：
为集合添加元素的顺序不同，SMEMBERS 命令的输出就产生了不同的结果。
举个例子，如果我们在Lua脚本中对 fruit集合和 another-fruit集合执行
Redis 将 SMEMBERS 这种在相同数据集上可能会产生不同输出的命令称为“带有不确
举个例子，如果客户端要求服务器执行以下Lua 脚本：
在这一步，服务器将为Lua 环境创建一个名为_
那么服务器将向客户端返回一个错误：
-—第1行
为了消除这些命令带来的不确定性，服务器会为Lua 环境创建一个排序辅助函数
这个例子中的 fruit 集合和 another-fruit 集合包含的元素是完全相同的，只是因
return redis.pcall('wrong command')
--第3行
——第2行
redis> EVAL "return redis.call('SMEMBERS', KEYS[ll)" l another-fruit
redis> EVAL "return redis.call('SMEMBERS', KEYS[1])" 1 fruit
 KEYS
 HVALS
口
口
 SUNION
 SINTER
C
"cherry"
 HKEYS
 SMEMBERS
SDIFF
"apple
anana
_redis_
 err
_handler 的错误处
---
## Page 331
组件，它们分别是负责执行 Lua 脚本中的 Redis 命令的伪客户端，以及用于保存 Lua 脚本的
20.2Lua 环境协作组件
需要创建一个 Lua 环境即可。
被放进 Lua 环境里面运行，因此，整个 Redis 服务器只
所以在任何特定时间里，最多都只会有一个脚本能够
图 20-1 所示。
会将 Lua 环境和服务器状态的 lua 属性关联起来，如
的修改工作到此就结束了，在最后的这一步，服务器
常小心，以免错误地修改了已存在的全局变量：
为忘记使用1ocal 关键字而将额外的全局变量添加到 Lua 环境里面。
20.1.7
于 Lua 脚本的第四行。
除了创建并修改 Lua 环境之外，Redis 服务器还创建了两个用于与 Lua 环境进行协作的
因为 Redis 使用串行化的方式来执行 Redis 命令：
经过以上的一系列修改，Redis 服务器对Lua 环境
不过 Redis 并未禁止用户修改已存在的全局变量，所以在执行 Lua 脚本的时候，必须非
在这一步，服务器将对Lua 环境中的全局环境进行保护，确保传人服务器的脚本不会因
除此之外，试图获取一个不存在的全局变量也会引发一个错误：
因为全局变量保护的原因，当一个脚本试图创建一个全局变量时，服务器将报告一个错误：
其中 éuser_script 说明这是一个用户定义的函数，而之后的.4 则说明出错的代码位
(integer) 10086
Script attempted to access unexisting global variable 'x'
(ca11 to f_03c387736bb5cc009ff35151572cee04677aa374) :
(error) ERR Error
redis> EvAL "return x" 0