# chrome issue 1051017 v8 逃逸
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
chrome issue
1051017是2020年2月公布的一个v8漏洞，该漏洞是在JIT优化时对循环变量的类型估算考虑不周导致的compiler阶段的类型混淆，通过compiler阶段的类型混淆进一步构造OOB溢出。
## 0x01 前置知识
[induction
variable](https://baike.baidu.com/item/%E5%BD%92%E7%BA%B3%E5%8F%98%E9%87%8F/53353317?fr=aladdin)指循环中的一个变量，其值在每一次循环迭代过程中增加（或减少）固定的值，也就是循环中的i变量等。有关编译器确定程序中循环变量的算法，可以阅读论文`INTERPROCEDURAL
INDUCTION VARIABLE ANALYSIS`。
## 0x02 issue 1051017 分析
###  patch分析
    diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc
    index 14ec856..4e86b96 100644
    --- a/src/compiler/typer.cc
    +++ b/src/compiler/typer.cc
    @@ -847,30 +847,24 @@
       DCHECK_EQ(IrOpcode::kLoop, NodeProperties::GetControlInput(node)->opcode());
       DCHECK_EQ(2, NodeProperties::GetControlInput(node)->InputCount());
    -  auto res = induction_vars_->induction_variables().find(node->id());
    -  DCHECK(res != induction_vars_->induction_variables().end());
    -  InductionVariable* induction_var = res->second;
    -  InductionVariable::ArithmeticType arithmetic_type = induction_var->Type();
       Type initial_type = Operand(node, 0);
       Type increment_type = Operand(node, 2);
    -  const bool both_types_integer = initial_type.Is(typer_->cache_->kInteger) &&
    -                                  increment_type.Is(typer_->cache_->kInteger);
    -  bool maybe_nan = false;
    -  // The addition or subtraction could still produce a NaN, if the integer
    -  // ranges touch infinity.
    -  if (both_types_integer) {
    -    Type resultant_type =
    -        (arithmetic_type == InductionVariable::ArithmeticType::kAddition)
    -            ? typer_->operation_typer()->NumberAdd(initial_type, increment_type)
    -            : typer_->operation_typer()->NumberSubtract(initial_type,
    -                                                        increment_type);
    -    maybe_nan = resultant_type.Maybe(Type::NaN());
    +  // If we do not have enough type information for the initial value or
    +  // the increment, just return the initial value's type.
    +  if (initial_type.IsNone() ||
    +      increment_type.Is(typer_->cache_->kSingletonZero)) {
    +    return initial_type;
       }
    -  // We only handle integer induction variables (otherwise ranges
    -  // do not apply and we cannot do anything).
    -  if (!both_types_integer || maybe_nan) {
    +  // We only handle integer induction variables (otherwise ranges do not apply
    +  // and we cannot do anything). Moreover, we don't support infinities in
    +  // {increment_type} because the induction variable can become NaN through
    +  // addition/subtraction of opposing infinities.
    +  if (!initial_type.Is(typer_->cache_->kInteger) ||
    +      !increment_type.Is(typer_->cache_->kInteger) ||
    +      increment_type.Min() == -V8_INFINITY ||
    +      increment_type.Max() == +V8_INFINITY) {
         // Fallback to normal phi typing, but ensure monotonicity.
         // (Unfortunately, without baking in the previous type, monotonicity might
         // be violated because we might not yet have retyped the incrementing
    @@ -883,14 +877,13 @@
         }
         return type;
       }
    -  // If we do not have enough type information for the initial value or
    -  // the increment, just return the initial value's type.
    -  if (initial_type.IsNone() ||
    -      increment_type.Is(typer_->cache_->kSingletonZero)) {
    -    return initial_type;
    -  }
       // Now process the bounds.
    +  auto res = induction_vars_->induction_variables().find(node->id());
    +  DCHECK(res != induction_vars_->induction_variables().end());
    +  InductionVariable* induction_var = res->second;
    +  InductionVariable::ArithmeticType arithmetic_type = induction_var->Type();
    +
       double min = -V8_INFINITY;
       double max = V8_INFINITY;
    @@ -946,8 +939,8 @@
         // The lower bound must be at most the initial value's lower bound.
         min = std::min(min, initial_type.Min());
       } else {
    -    // Shortcut: If the increment can be both positive and negative,
    -    // the variable can go arbitrarily far, so just return integer.
    +    // If the increment can be both positive and negative, the variable can go
    +    // arbitrarily far.
         return typer_->cache_->kInteger;
       }
       if (FLAG_trace_turbo_loop) {
    diff --git a/test/mjsunit/compiler/regress-1051017.js b/test/mjsunit/compiler/regress-1051017.js
    new file mode 100644
    index 0000000..16ed22e
    --- /dev/null
    +++ b/test/mjsunit/compiler/regress-1051017.js
    @@ -0,0 +1,34 @@
    +// Copyright 2020 the V8 project authors. All rights reserved.
    +// Use of this source code is governed by a BSD-style license that can be
    +// found in the LICENSE file.
    +
    +// Flags: --allow-natives-syntax
    +
    +
    +function foo1() {
    +  var x = -Infinity;
    +  var i = 0;
    +  for (; i cache_->kInteger) &&
       858                                   increment_type.Is(typer_->cache_->kInteger);
     ► 859   bool maybe_nan = false;
       860   // The addition or subtraction could still produce a NaN, if the integer
       861   // ranges touch infinity.
       862   if (both_types_integer) {
       863     Type resultant_type =
       864         (arithmetic_type == InductionVariable::ArithmeticType::kAddition)
    ───────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────
    00:0000│ rsp  0x7ffda7688b70 —▸ 0x7ffda7688ba0 —▸ 0x561e3b26eb40 —▸ 0x7f7274ace980 —▸ 0x7f72749fc8f8 ◂— ...
    01:0008│      0x7ffda7688b78 —▸ 0x7f727414f6f3 ◂— and    al, 1
    02:0010│      0x7ffda7688b80 ◂— 0x0
    03:0018│      0x7ffda7688b88 ◂— 0x100561e3b28c9d0
    04:0020│      0x7ffda7688b90 —▸ 0x561e3b26eb40 —▸ 0x7f7274ace980 —▸ 0x7f72749fc8f8 —▸ 0x7f72744a74a0 ◂— ...
    05:0028│      0x7ffda7688b98 —▸ 0x561e3b28c9d0 ◂— 0x45e00000004
    06:0030│      0x7ffda7688ba0 —▸ 0x561e3b26eb40 —▸ 0x7f7274ace980 —▸ 0x7f72749fc8f8 —▸ 0x7f72744a74a0 ◂— ...
    07:0038│      0x7ffda7688ba8 —▸ 0x7ffda7688bc8 —▸ 0x561e3b26eb40 —▸ 0x7f7274ace980 —▸ 0x7f72749fc8f8 ◂— ...
    ─────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────
     ► f 0     7f7274829ec9 v8::internal::compiler::Typer::Visitor::TypeInductionVariablePhi(v8::internal::compiler::Node*)+825
       f 1     7f7274822627 v8::internal::compiler::Typer::Visitor::Reduce(v8::internal::compiler::Node*)+2887
       f 2     7f7274531c97 v8::internal::compiler::GraphReducer::Reduce(v8::internal::compiler::Node*)+231
       f 3     7f72745318b7 v8::internal::compiler::GraphReducer::ReduceTop()+775
       f 4     7f72745312b1 v8::internal::compiler::GraphReducer::ReduceNode(v8::internal::compiler::Node*)+209
       f 5     7f7274531ba0 v8::internal::compiler::GraphReducer::ReduceGraph()+48
       f 6     7f727481b510
       f 7     7f727473faad
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    pwndbg> p both_types_integer
    $8 = true
因为poc里，`induction
variables`i初始值为0，属于`typer_->cache_->kInteger`类型，然后`increment`x初始值为`-Infinity`，也属于`typer_->cache_->kInteger`类型，因此，接下来会进入if分支
       862   if (both_types_integer) {
       863     Type resultant_type =
     ► 864         (arithmetic_type == InductionVariable::ArithmeticType::kAddition)
       865             ? typer_->operation_typer()->NumberAdd(initial_type, increment_type)
       866             : typer_->operation_typer()->NumberSubtract(initial_type,
       867                                                         increment_type);
       868     maybe_nan = resultant_type.Maybe(Type::NaN());
       869   }
    ──────────────────────────────────
执行后，`maybe_nan`为false，这样程序顺利绕过了下面的if
      // We only handle integer induction variables (otherwise ranges
      // do not apply and we cannot do anything).
      if (!both_types_integer || maybe_nan) {
        // Fallback to normal phi typing, but ensure monotonicity.
        // (Unfortunately, without baking in the previous type, monotonicity might
        // be violated because we might not yet have retyped the incrementing
        // operation even though the increment's type might been already reflected
        // in the induction variable phi.)
        Type type = NodeProperties::IsTyped(node) ? NodeProperties::GetType(node)
                                                  : Type::None();
        for (int i = 0; i cache_->kInteger;`类型
    if (increment_min >= 0) {
    ...
    } else if (increment_max cache_->kInteger;
      }
回到上层调用，最终发现，该函数在`v8::internal::compiler::Typer::Run`时调用。
    pwndbg> return
    #0  0x00007f72745318b7 in v8::internal::compiler::GraphReducer::ReduceTop (this=0x7ffda768a7a8) at ../../src/compiler/graph-reducer.cc:156
    156      Reduction reduction = Reduce(node);
    pwndbg> return