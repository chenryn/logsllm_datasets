(cid:123)(cid:122)
ck
info(cid:48)
i
The collision (C1, C2) can be found easily as a chosen-
preﬁx collision attack. Since the collision occurs be-
fore any unpredictable value has been included in the
message, it can be computed ofﬂine; that is, it does
not have to be computed while a connection is live.
The collision can then be used to break any number
of connections between I and R. Such collisions are
easy to compute for MD5, but we found that even
12
Fig. 7.
parts colored in red can have arbitrary length.
IKEv2: A mutually-authenticated key exchange. Message
Truncated HMAC is not
collision-resistant A
more general lesson to be taken from our attack on
tls-unique is that there are many uses of HMAC
in cryptographic protocols that are not protected from
collisions in the underlying hash function. For example,
although HMAC-MD5 may be a good MAC, it is not
collision-resistant when the key is known to the attacker.
Similarly, when HMAC-SHA256 is truncated to 96 bits,
it may still be a good MAC, but it is certainly not a good
hash function (since collisions can still be found in 248
steps). Consequently, when inspecting the use of hash
functions in Internet protocols, it would be a mistake to
assume that all uses of HMAC are safe; it is important
to look both at the mechanism and its intended security
goal. In some cases, we may need HMAC to be both a
MAC and a collision-resistant hash function.
VI. TRANSCRIPT COLLISIONS IN IKE AND SSH
Although the bulk of this paper has focused on colli-
sions in TLS, similar attacks apply to other mainstream
protocols like IKEv1, IKEv2, and SSH. We describe
two exemplary attacks here.
A. Breaking IKEv2 Initiator Authentication using a
Precomputed Common-Preﬁx Transcript Collision
Figure 7 depicts the IKEv2 authenticated key ex-
change protocol, which is similar to the SIGMA’ pro-
tocol discussed in Section II. The initiator ﬁrst sends
an SA INIT request containing its Difﬁe-Hellman value
gx, nonce ni, and proposed cryptographic parameters
SAi, infoi. The responder replies with its own public
value gy, nonce nr and parameters SAr, infor. Alter-
natively, the responder may send a cookie ck, thereby
asking the initiator to restart the protocol by sending the
same SA INIT request but with ck included in it.
After the SA INIT exchange, the initiator and re-
sponder authenticate each other by signing a portion of
the message transcript. Notably the initiator signs:
(cid:125)
hash(SA INIT(ck|SAi|gx|ni|infoi)
|nr|mac(ki, IDi))
(cid:123)(cid:122)
(cid:124)
m1
though MD5 signatures are allowed by the standard,
they are not commonly supported by IKEv2 imple-
mentations. However, SHA-1 signatures are mandatory
for all IKEv2 implementations, so an ofﬂine chosen-
preﬁx collision on SHA-1 is enough to mount
the
attack. The best known complexity of such collisions
is currently 277, which may be feasible for a powerful
adversary (especially if better shortcut attacks on SHA-
1 are discovered).
We also observe that the two preﬁxes are very simi-
lar: we only need the length of the cookie to be different.
Following the format of IKE message, the length ﬁeld
is on bytes 22 and 23 of the hashed transcript, and
all previous bytes must have a ﬁxed value. Hence, we
can almost use a common-preﬁx collision attack, if the
collision algorithm introduces a difference in bytes 22-
23, and no difference in preceding bytes. For MD5, the
most efﬁcient collision attacks do not have a compatible
message difference, but it seems possible to build a
dedicated attack with complexity below 239. However,
for SHA-1, all known collision attacks use differences
in every message words, and are thus unsuitable.
The ﬁnal step to implement the attack is to ensure
that gxy(cid:48)
= gx(cid:48)y. To achieve this, we rely on a small
subgroup conﬁnement attack. To see a simple example,
suppose the attacker chose x(cid:48) = y(cid:48) = 0; then the two
shared secrets would have the value 1. This speciﬁc so-
lution would not work in practice because most IKEv2
implementations validate the received Difﬁe-Hellman
public value to ensure that it is larger than 1 and smaller
than p − 1. However, many IKEv2 implementations
support the Difﬁe-Hellman groups 22-24 that are known
to have many small subgroups. These implementations
do not validate the incoming public value, and hence
are susceptible to similar small subgroup conﬁnement
attacks, as discussed in [5]. To complete our transcript
collision attack,
the MitM can use one such small
subgroup to ensure that the shared values on the two
connections are the same with high probability.
B. Breaking IKEv1 Initiator Authentication
with a Generic Transcript Collision
IKEv1, the predecessor of IKEv2, and is also vul-
nerable to transcript collision attacks. We brieﬂy outline
one attack, without giving more details for lack of space.
The initiator’s signature in IKEv1 is computed as:
sign(sk I , prf(prf(ni|nr, gxy), gx|gy|ci|cr|SAi|IDi))
A commonly-used PRF function in IKEv1 is HMAC-
MD5, and we ﬁnd a generic transcript collision attack
on the outer PRF value that allows initiator imperson-
ation. A man-in-the-middle attacker intercepts a con-
nection between I and R; it tries out many random
gy(cid:48)
values on the client-side, and many random values
Fig. 8. SSH-2: Key exchange and user authentication.
(embedded in) ID(cid:48)
i on the server side, until the PRF
values on the two sides collide. It can then forward
I’s signature to R, even though it knows the Difﬁe-
Hellman shared secret. When the PRF is HMAC-MD5,
this generic collision attack costs about 2 ∗ 264 HMAC
computations per connection.
C. Downgrading SSH-2 to Weak Ciphersuites
with a Chosen-Preﬁx Transcript Collision
Figure 8 depicts the SSH-2 [39] protocol, which
implements yet another variation of an authenticated
Difﬁe-Hellman protocol. The client and server exchange
identiﬁcation strings Vc, Vs, negotiate protocol param-
eters Ic, Is, and perform a Difﬁe-Hellman exchange
gx, gy. To authenticate the exchange, clients and servers
sign a session hash, deﬁned as:
H = hash(Vc|Vs|Ic|Is|pk S|gx|gy|gxy)
We show that a target collision on this hash value can
allow downgrade attaks.
Figure 12 in Appendix depicts a downgrade attack
on SSH-2. The network attacker tampers with the key
exchange message Ic in one direction and with Is in
the other. It chooses their values in a way such that the
following hashes coincide
hash(Vc|Vs|Ic| C1|−(cid:124)(cid:123)(cid:122)(cid:125)
I(cid:48)
s
) = hash(Vc|Vs| C2(cid:124)(cid:123)(cid:122)(cid:125)
)
I(cid:48)
c
Using this collision, we leave enough space empty in
I(cid:48)
s to stuff the real Is inside. Consequently the session
hashes on the two sides coincide and the connection
is completed. In this attack, the MitM does not tamper
with the Difﬁe-Hellman values and hence it does not
it manages to
know the connection keys. However,
13
tamper with both Ic and Is, and can therefore down-
grade the negotiate ciphersuite to a weak cryptographic
algorithm that the attacker knows how to break.
Implementing the target collision for SSH-2 requires
a chosen-preﬁx attack on SHA-1 which is still consid-
ered impractical (at least 277 work). Moreover, since the
two tampered ﬁelds Ic and Is are meant to be strings
(not bitstrings), we cannot use arbitrary collisions. Still,
we ﬁnd this attack to be an interesting illustration of
the use of transcipt collisions for downgrade attacks.
SSH-2 has a peculiar session hash construction, with
the shared secret gxy placed at the end. This makes
certain kinds of collision attacks more difﬁcult, but we
note that this construction is not particularly secure;
since it includes the shared secret, the session hash
needs to be non-leaking in addition to being collision-
resistant [4]. Moreover, if the SSH server reuses its
Difﬁe-Hellman public value, this secret sufﬁx becomes
vulnerable to key recovery attacks like on APOP [25].
Other variations of SSH allow for more tampering,
which may enable new attacks. The SSH Difﬁe-Hellman
Group Exchange protocol [10] allows SSH servers to
choose any Difﬁe-Hellman group for use in the key
exchange. So, like in our TLS attacks, a man-in-the-
middle attacker can send a bogus or weak group to the
client, and use it to control more ﬁelds in the session
hash and mount new transcript collision attacks.
VII. SLOTH: RESPONSIBLE DISCLOSURE AND
IMPACT
Table I summarizes the attacks discussed in this
paper. Three of our attacks on TLS are already practical;
others are within the reach of powerful adversaries.
Our attacks on TLS were publicly disclosed under
the acronym SLOTH (security losses from obsolete
and truncated transcript hashes) and were assigned a
protocol-level CVE-2015-7575. We informed the au-
thors of affected protocol speciﬁcations and developers
for various TLS libraries. We recommended that pro-
tocols and implementations should stop using MD5-
based signatures and other weak hash constructions.
Our disclosure and recommendations resulted in the
following security updates:
1)
2)
3)
4)
TLS 1.3 draft 7 stopped truncating the Fin-
ished MACs and started using the full HMAC
output.
TLS 1.3 draft 8 deprecated MD5 signatures.
The Token Binding Protocol draft 2 removed
tls-unique and moved to a stronger channel
binding.
Akamai servers disabled support or RSA-MD5
client and server signatures.
6)
7)
8)
9)
5)
Red Hat issued backported patches RHEL 6
and 7 to disable MD5 signatures in their ver-
sion of OpenSSL version 1.0.1e.
NSS 3.21 (FireFox 43) disabled support for
MD5 server signatures; MD5-based client sig-
natures were already disabled.
GnuTLS 3.3.15 disabled MD5 signatures in
the default conﬁguration.
BouncyCastle Java 1.54 (C# 1.8.1) disabled
MD5 signatures in the default conﬁguration.
Oracle and IBM are updating the TLS im-
plementation in their Java runtimes to disable
MD5 signatures in the default conﬁguration.
10) mbedTLS is being updated to disable MD5
server signatures; MD5 client signatures were
already disabled.
impact
These changes
the Firefox and Android
browsers, about 31% of web servers, most
Java
application servers
and many
other custom applications that use less well-known
TLS libraries. We are maintaining a website with
the currently known attacks, affected software, and
disclosure status at our website:
and their
clients,
http://sloth-attack.org
.
VIII. CONCLUSIONS
We have demonstrated that the use of MD5 and
truncated HMACs for authenticating transcripts in vari-
ous Internet protocols leads to exploitable chosen-preﬁx
and generic collision attacks. We also showed several
unsafe uses of SHA-1 that will become dangerous when
more efﬁcient collision-ﬁnding algorithms for SHA-
1 are discovered. In all cases, the complexity of our
transcript collision attacks are signiﬁcantly lower than
the estimated work for a second preimage attack on
the underlying hash function. This deﬁnitively settles
the debate on whether the security of mainstream
cryptographic protocols depend on collision resistance.
The answer is yes, cryptographers were right. Except
in rare cases, mainstream protocols do require colli-
sion resistance for protection against man-in-the-middle
transcript collision attacks. Consequently, we strongly
recommend that weak hash functions like MD5 and
SHA-1 should not just be deprecated; they should be
forcefully disabled in existing protocols.
An open research question is whether it is possible
to design key exchange protocols that will be resilient
to new collision attacks. One strategy is to use a
commitment scheme (like ZRTP [40]) that would make
it more difﬁcult for a man-in-the-middle to tamper
with the transcript. However, such schemes may still
be vulnerable to certain shortcut collisions [19]. For
signatures, randomized hashing [13] provides a different
way forward but its integration into a complex protocol
like TLS would need to be carefully analyzed.
14
Protocol
Property
Mechanism
Attack
Collision Type
Precomp.
Work/conn.
Preimage Wall-clock time
TLS 1.2
TLS 1.3
TLS 1.0-1.2
TLS 1.2
TLS 1.0-1.1
IKE v1
IKE v2
SSH-2
Client Auth
RSA-MD5
Server Auth
RSA-MD5
Channel Binding
HMAC (96 bits)
Server Auth
RSA-MD5
Handshake Integrity MD5 | SHA-1
HMAC-MD5
Initiator Auth
RSA-SHA-1
Initiator Auth
Exchange Integrity
SHA-1
Impersonation
Impersonation
Impersonation
Impersonation
Downgrade
Impersonation
Impersonation
Downgrade
Chosen Preﬁx
Chosen Preﬁx
Generic
Generic
Chosen Preﬁx