if head.Next.Next != nil {
next = head.Next.Next
if head.Next.Next != nil{
head.Next = next
}else{
head.Next = nil
headNext.Next = head
behind = head
if head.Next != nil {
head = next
return s
---
## Page 102
25.ReverseNodesink-Group
题目
Given a linked list, reverse the nodes of a linked list k at a time and return its modlified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of
nodes is not a multiple of k then left-out nodes in the end should remain as it is.
Example:
Given this 1inked 1ist: 1->2->3->4=>5
For k = 2, you shou1d return: 2->1->4->3->5
For k = 3, you shou1d return: 3->2->1->4=>5
Note:
● Only constant extra memory is allowed.
●You may not alter the values in the list's nodes, only nodes itself may be changed.
题目大意
按照每K个元素翻转的方式翻转链表。如果不满足K个元素的就不翻转。
解题思路
这一题是problem24的加强版，problem24是两两相邻的元素，翻转链表。而problem25要求的
是k个相邻的元素，翻转链表，problem相当于是k=2的特殊情况。
代码
package leetcode
/**
*Definition for singly-linked list
type ListNode struct {
valint
Next *ListNode
*/
func reverseKGroup(head *ListNode, k int) *ListNode {
node := head
for i := 0; i 被除数并且商*除
数被除数或者（商+1）*除数≥被除数并且商*除数>1 (防止溢出)
3.low= mid +1;high=mid-1 (注意更新 low和high 的值，如果更新不对就会死循环)
代码
package leetcode
import（
---
## Page 111
"math"
//解法一递归版的二分搜索
func divide(dividend int, divisor int) int {
sign, res := -1, 0
// 1ow, high := 0, abs(dividend)
if dividend == 0 {
return 0
if divisor
== 1 {
return dividend
if dividend == math.MinInt32 && divisor == -1 {
return math.MaxInt32
if dividend > 0 && divisor > 0 11 dividend  math.MaxInt32 {
dividend = math.MaxInt32
3
//如果把递归改成非递归，可以改成下面这段代码
//for 1ow >1
//
if ((quotient+l)*abs(divisor) > abs(dividend) && quotient*abs(divisor)
= abs(dividend) &&
quotient*abs(divisor) abs(dividend) && quotient*abs(divisor) >
abs(dividend){
//
high = quotient -1
//
//
if （quotient+1)*abs(divisor) math.MaxInt32 {
return sign * math.MaxInt32
if res >1
if ((quotient+l)*val > dividend && quotient*val = dividend && quotient*val  dividend && quotient*val > dividend {
return binarySearchQuotient(low, quotient-1, val, dividend)
if (quotient+l)*val  0 && divisor > 0 11 divided < 0 && divisor < 0 {