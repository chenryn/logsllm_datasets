# 移动到这个cgroup内    sh -c "echo $$ >> tasks"    
# 再启动一个机型    stress --vm-bytes 200m --vm-keep -m 1    top好，说到这儿相信你已经对 **Namespace** 和 **Cgroups** 这两大技术建立了初步认知，它们是 Linux操作系统下开发容器的最基本的技术。总结与思考好，这节课的内容告一段落了，我来给你做个总结。首先我们了解了到底什么是容器，以 Docker为蓝本分析了容器的基础功能架构，包括客户端（**Client**）、管理进程（**Host**）、镜像仓库（**Registry**）三大部分。引擎进程（Host）是 Docker的核心，包括引擎进程（**Daemon**）、驱动（**Driver**）、容器管理包（**Libcontainer**）、镜像（**Images**）。用户通过 Client 与 Daemon 建立通信，并发送请求给后者；而 Daemon 作为Docker 架构中的核心部分，其中的 Server 负责接收 Client 发送的请求，而后Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job的形式的存在；在执行 Job 的过程中，我们会使用下层的Driver（驱动）来完成工作，driver 通过 libcontainer来访问内核中与容器相关的API，从而实现具体对容器进行的操作。之后我们分析了一个容器如何通过各种内核提供的技术（**NameSpace，Cgroup，UnionFS**等技术）的组合运行起来，提供对外访问隔离功能。其实容器的技术本身没有太大的技术难度，容器就本质上就是一种**特殊的进程**，利用了操作系统本身的资源限制和隔离能力，通过约束和修改进程的动态表现，从而为其创造出一个"边界"------也就是独立的\"运行环境\"，有兴趣的同学可以深入了解Docker的源码，并可以自己尝试重新实现一个简单的的容器。思考题在我们启动容器后，一旦容器退出，容器可写层的所有内容都会被删除。那么，如果用户需要持久化容器里的部分数据该怎么办呢？欢迎你在留言区跟我交流，也欢迎你把这节课分享给朋友。我是 LMOS，我们下节课见！