## Page 378
例里的catch语句块为空，因此它等效于捕获并忽略各种错误。这个示例脚本不会输出任何消
出一个异常，而 setAttribute（）调用会使随后的PDO调用在失败时抛出异常。不过，这个示
异常都会被与之相应的那个catch 语句块捕获，并得到处理。如果连接操作失败，它会自动抛
这一步是可选的。如果没有关闭与服务器的连接，那么 PHP 将在脚本执行结束后自动终止它。
本通过调用ssth 对象的fetchcolumn（）方法，可以获得该行，并提取出其中第一列（即O列)
处理结果集的语句句柄。
需要使用另一个方法 exec（）。）query（）方法会返回一个 PDOStatement 对象，这是一个用于
的做法不一样。query（)方法适用于执行返回行的语句。（如果要执行对行进行修改的语句，则
不需要使用分号“;”，或字符序列“\g”和“\G”。这与我们在 mysql客户端程序里调用语句
的运行。
理例程，并不需要进行显式的测试。如果没有使用try/catch，那么发生的异常将终止脚本
的值。
器，然
式地检查各个错误。为了简化出错处理环节，可以用下面的脚本来启用PDO的异常捕获机制：
SQL语句。在连接成功之后，PDO调用的默认出错处理模式为“静默失败”，
普通文本来发送，从而导致连接参数暴露。我们将在9.1.2节里处理这个问题。
下，
则表明不打开任何默认数据库。（DSN还有其他几种形式，并且允许使用其他参数。更多详情
选的。参数host的默认值为localhost,因此实际上可以省略这个参数。如果省略参数dbname，
MySQL服务器的主机为localhost，默认数据库为sampab。紧跟在冒号后面的两个参数是可
名字为mysql，连接参数为运行服务器的主机和默认打开的那个数据库。这里所示的DSN表明，
使用哪一个驱动程序，后面紧跟着的是该驱动程序特有的连接参数。对于MySQL，驱动程序的
数分别是用于连接服务器的用户名和密码：sampadm和 secret。那个DSN字符串会告诉PDO
务器。如果尝试失败，则抛出一个异常；否则，返回一个充当数据库句柄的PDO 对象。
在输出计数值之后，脚本通过把数据库句柄设置为NULL的方式，关闭与服务器的连接。
具体到上面所示这个查询，其结果集包含的内容仅有一行一列，表示了成员总人数。此脚
一Web服务器配置不当，未能识别出这个脚本需要调用PHP来处理，那么它会把此脚本当作
参考附录I。）
new PDO（)的第一个参数是一个被称为“数据源名称”（DSN）的字符串。第二和第三个参
在这个示例里，与 MySQL交互的代码都出现在一个try 语句块里，因错误而抛出的任何
其中，query（)方法负责把查询命令发送到服务器执行。请注意，在查询语句字符串的末尾
在启用异常捕获机制之后，可以用一个try/catch语句块把错误“引导”至某个异常处
由newPDO（)返回的数据库句柄，是与MySQL服务器进行交互的手段，如调用要执行的
，它们不会出现在发送给客户的结果Web页面里，因为脚本内容会被输出内容替代。可是，
下面这个示例脚本将调用数据库句柄的query（)方法，把查询成员人数的命令发送到服务
$dbh->SetAttribute（PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);
你也许会担心把用户名和密码嵌在脚本里会让别人看到。这种担心很有道理。在正常情况
print
$count=$sth->fetchColumn （0）;
$sth = $dbh->query ("SELECT COUNT(*) FROM member");
然后取回并显示查询结果：
这里使用了neWPDO（）语法来调用PDO类的构造函数。这个构造函数将尝试连接数据库服
$dbh = new PDo("mysql:host=localhost;dbname=sampdb", "sampadm", "secret");
下面把这个脚本分解一下，看看它是如何工作的。第一步是连接MySQL服务器：
http://localhost/ushl/index.php
第9章用PHP语言编写MySQL程序
("The League currently has $count members.");
，这要求你必须显
司
---
## Page 379
但可以被主脚本引用。这种办法有以下几个好处。
回数据库句柄，并把这个函数保存到一个包含文件里一
到脚本以外的某个地方。我们将编写一个名为sampdb_connect（)的函数，用于建立连接和返
和密码都是明文。我们现在要利用PHP的两个功能，即函数和包含文件，把这些连接参数转移
脚本里用于连接MySQL服务器的用户名和密码，向外泄露的风险更大。
导致Web文档树里的页面以普通文本的形式发送到客户端。这意味着，与DBI脚本相比，PHP
脚本通常位于Web文档树外的cgi-bin目录里。这会带来一个安全问题：服务器的配置错误会
9.1.2利用PHP库文件实现代码封装
进行讨论。
种情形下显示出错信息，很可能会让访问网站的人感到困惑。9.1.8节将对其他的出错处理办法
息，因为对于在主页显示欢迎消息这一功能需求而言，输出成员人数只是一个辅助操作。在这
用的属性名包含空格或其他非法字符，也可以用花括号将其括起来。
用花括号将其括起来， 因此在 PHP 里，Sx->(1)是合法的，而Sx->1 则不合法。如果需要引
$x->yellow和$x->large 都可以是$x 的属性。请注意，数字不能用作对象的属性名，除=
表示的是一个对象，则需要通过sx->property_name 这样的形式来访问它的属性。 例如,
关联元素混合在一起使用。 例如， Sx[1]和sx["large"] 都可以是同一数组的元素。 如果s
$x["yellow"]或Sx["large"]这样的形式来访问其中的元素。PHP 数组甚至允许把数字
的是一个以"yellow"或"large"之类的字符串为下标的关联数组，则需要通过诸
为下标的数组，那么需要通过诸如Sx[0]、Sx[1]这样的形式来访问它的元素。如果sx表
标量值，如整数或者字符串，那么可以直接通过Sx来访问它。如果Sx表示的是一个以数
能访问到其中的各个元素，但是变量的确可用于表示各种类型值。如果变量Sx表示的是一
形下，你可能需要声明变量，如在某个异常处理器里，或者当你需要在某个函数里引用全
页脚本使用了 3 个这样的变量，即sdbh、Ssth 和Scount，它们都没有进行声明。（在有些
我们最早编写的那个美史联盟主页脚本也存在这样的问题，因为它里面的MySQL 用户名
所有变量名的前面都带有一个美元字符（$）。尽管在访问数组或对象时需要费些周折）
PHP 脚本与 DBI脚本的不同之处在于，PHP 脚本存放在Web 服务器的文档树里，而 DBI
口
口
口1
 在 PHP里，变量不需要事先进行声明，在你使用它的时候它便会立即存在。上面那个三
果不想让某些敏感信息被Web服务器发送到网站以外的地方，则可以利用包含文件将其
浏览器请求包含文件，因此即使Web服务器配置不当，它们的内容也不会泄露出去。如
包含文件可以存放在Apache 文档树以外的某个地方。这意味着用户将无法直接从他们的
需在当初定义 sampdb_connect（）函数的那个包含文件里，把主机名参数更改一下即可。
改动可以很容易地应用到访问该文件的所有脚本里。
包含文件可以供多个脚本使用。这将提高代码的重用性，
独特方面，而不用去考虑通用连接建立代码的问题。
以外的库文件里，还有助于提高脚本的可读性，因为你可以把注意力集中在每个脚本的
参数，用不着在每一个需要连接服务器的脚本里都去编写它。把类似的细节转移到脚本
更易于编写连接建立代码。我们只需要在辅助函数 sampdb_connect（）里编写一次连接
PHP 里的变量
一这是一个库文件，它不属于主脚本，
，例如，在把 sampdb数据库月
，让代码变得更易维护。全局性的
9.1PHP概述
359
非
S
和
如
局
情
H
M
---
## Page 380
生 PDO错误时抛出异常，并返回一个数据库句柄，用于实现与服务器的更多交互。此函数的用
MySQL账户的用户名和密码一起传递给了newPDO（）。接着，它把出错处理模式设置为了在发
sampdb_connect()函数：
使用的是 sampdb_pdo.php。这个文件最终将包含多个函数，但在此时，它只有一个
包含文件，与C语言预处理器在多个目录里搜寻C语言头文件的方式很像。
对于Windows系统，则需要使用分号来分隔。
则可以把它设置为新创建的那个包含目录的完整路径名：
/usr/local/lib下)，并在该文件里找到含有include_path的这一行。如果它没有任何值，
include_path 配置项来控制。请在你的系统里找到这个文件（通常位于/etc/php 和
htdocs下。
用的目录是/usr/local/apache/lib/php，它不在我的文档树/usr/local/apache/
一个位置，
如果系统里已有一个这样的位置，那么你可以继续使用它。如果没有，则需要按下列步骤建立
360
文件。PHP 在寻找包含文件时使用的搜索路径，可以通过PHP初始化文件php.ini里
，则用它们的基本名（即路径名里的最后一项)。后一种更方便，因为PHP会替我们查找
（1）在Web 服务器文档树以外的某个地方，创建一个用于存储 PHP包含文件的目录。我使
为了连接数据库服务器，
（3）创建要使用的包含文件，并将其放在包含目录里。该文件的名字应该与众不同，我们
PHP包含文件的使用方法和C语言里的头文件很相似。例如，PHP可以在多个目录里搜寻
在修改完 php.ini 之后，需要重新启动 Apache，更改才能生效。
如果include_path已经有值，则可以把那个新目录添加到那个值里：
（2）脚本访问包含文件的途径有两种：包含文件的完整路径名；如果设置了PHP的搜索路
function sampdb_connect()
"dudi>
对于Unix系统，需要像上面这样使用冒号字符来分隔列在include_path里的各个目录。
include_path ="/usr/local/apache/lib/php:current_value"
include_path = "/usr/local/apache/lib/php"
如果想使用包含文件，则必须先确定一个存放它们的地方，并且把将那个位置告知PHP。
return（$dbh);
$dbh->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);
$dbh = new PDo("mysql:host=localhost;dbname=sampdb",
启
这个函数使用了我们高度机密的用户名和密码来连接MySQL服务器，
些预防措施也同样适用于PHP的包含文件。
节列出了几个在安装DBI配置文件时需要注意的地方，好让这些文件免遭他人窥视。这
机（并因此能够访问其文件系统）的其他用户，将仍可以直接读取到你的包含文件。8.4.3
百分之百安全了。
隐藏起来。不过，虽然这种做法可以改善系统的安全性，但并不意味着用户名和密码就
回值为newPDO（）所产生的数据库句柄。
用了在出现错误时抛出异常的功能。
第9章用PHP语言编写MySQL程序
，用于存放包含文件。
"sampadm
。如果不采取其他一些必要的预防措施，那么可以登录到Web服务器
，sampdb_connect（）函数构造了一个数据源名称，并把它连同
它还为后续的PDO调用
"secret");
同
器
---
## Page 381
sampdb_connect（）函数来连接MySQL服务器：
取（而其他用户不可读取）它。
使用的那个包含文件目录里，并设置此文件的访问权限和所有者，以便你的Web服务器可以读
文件里的连接参数，以便正确连接到你自己的MySQL服务器。然后，把这个文件复制到你所
本标记把PHP代码括起来。
想要生成的HTML输出内容，那么可以这样做。但是如果你想要执行其中的内容，则必须用脚
文件的内容当作普通文本发送出去，而不会把它们解释为PHP代码。如果包含文件的内容是你
这是因为PHP是以文本复制模式来读取包含文件的。如果省略了这些标记，那么PHP会把包合
在每一个用到库文件的脚本里启用它，更方便。
法如下：
现在，我们来修改美史联盟的主页，让它引用包含文件 sampdb_pdo.php，并通过调用
在 sampdb 发行版的 phpapi 目录里可以找到 sampdb_pdo.php 文件。请根据需要修改这个
通过观察可以发现，sampdb_pdo.php文件里的PHP代码都处于脚本标记之间
require_once "sampdb_pdo.php";
Welcome to the U.S. Historical League Web Site.
U.s. Historical League
并读入其中的内容。接下来的脚本代码可以访问该文件里的任何内容。
本章的脚本都统一使用require_once 语句。当 PHP遇到文件包含语句时，它会寻找该文
口 include_once和require_once 语句分别类似于include 和require 语句，区别在
口include 和 require 语句都会包含指定文件的内容，并对其进行计算。两者的区别在
PHP会像下面这样处理这4条语句。
（4）当在脚本里引用包含文件时，
之所以要在 sampab_connect（）函数里启用异常捕获机制，是因为在库文件里启用它，比
$dbh =.sampdb_connect（);
cry
美史联盟主页—第2版
八
require
include"sampdb_pdo.php";
sdbh=NULL;
$count= $sth->fetchColumn (0）;
$sth = $dbh->query （"SELECT COUNT(*） FROM member"）;
orint
数重复定义”错误。
件时，这种做法会很有用，因为它能避免因多次包含同一个包含文件，而可能引发的“函
require语句将生成一条出错消息，并终止执行。
于：如果它们已经读取了指定文件，则不会再次读取它。当这些包含文件还包含其他文
于，如果包
("The League currently has $count members.");
包含文件未找到，那么include 语句会生成一条警告消息，并继续执行，而
#关闭连接
，可以使用下面语句当中的任何一条：
9.1PHP概述
361
含
---
## Page 382
的主页，让其使用这些函数。
页面的窗口标题和文档标题。这两个函数的代码如下所示：
html_begin（）和html_end（），来替我们生成。html_begin（）函数有两个参数，分别用于设定
们希望可以在多个脚本里执行的例程。事实上，我们现在便可以创建两个新函数，然后放到这
sampdb_pdo.php文件里还可以设置其他函数，从而使它成为一个便捷仓库，其中存放的是手
新文件没有包含明文形式的MySQL用户名和密码。
index.php，以替换原有的那个同名文件。这样一来，便可用上一个更安全的版本，因为这
是刚才展示的这个脚本。请把它复制到 Web服务器文档树的ushl目录下，并将其重新命名
模式化的HTML标记。与其在每个脚本里重复编写相同的HTML标记，还不如编写两个函数，
文件里面。在本章后
你可能会想，虽然使用了包含文件，但主页里的代码并没有明显减少。别急！在
catch（PDOException Se）（）#清空处理器（进行错误捕捉，但将其忽略掉）
Welcome to the U.s. Historical League Web Site.
$title = "U.s. Historical League";
html_begin ($title,$title);
require_once "sampdb_pdo.php";
#美史联盟主页－第3版
function html_end ()
function html_begin ($title,$header)
在sampdb发行版的phpapi/ushl目录里，可以找到一个名为index2.php的文件，它
catch（PDOException Se）（）#清空处理器（进行错误捕捉，但将其忽略掉）
Sdbh=NULL；#关闭连接
$sth = $dbh->query ("SELECT COUNT(*） FROM member");
$dbh=
print
print("\n");
print
scount
print("\n"）;
print