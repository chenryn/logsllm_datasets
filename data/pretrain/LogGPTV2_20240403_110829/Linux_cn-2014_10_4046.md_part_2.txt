Git自带了一个功能强大的命令 `git rebase -i`，它允许我们修改提交历史。尽管改变历史可能会导致问题，并且通常建议避免与他人共享修改过的历史，但在本例中，我们将仅对本地功能分支进行更改，不会影响其他人。

让我们详细查看 `f3` 提交所修改的内容。在这个例子中，我们共修改了两个文件：`userService.js` 和 `wishlistService.js`。假设我们可以直接将 `userService.js` 的更改合入主分支，但 `wishlistService.js` 不能，因为它在主分支中并不存在，是在 `f1` 提交中引入的。
> 
> 专家提示：即使是对单个文件的更改，git也能处理得很好。但为了简化起见，在这篇博客中我们只讨论这种情况。
> 

我们已经建立了一个[公共演示仓库](https://github.com/thoughtram/interactive-rebase-demo)用于练习。为便于跟踪，每个提交信息前缀都是图表中使用的假SHA值。以下是分离 `f3` 提交时的分支图：
![](/data/attachment/album/201410/20/120821pe9ozqp9xbiqnohd.png)

首先，我们需要使用 `git checkout` 切换到我们的功能分支，然后运行 `git rebase -i master` 开始交互式rebase。此时，git会打开一个临时文件（默认编辑器为Vim）供你选择rebase选项。
![](/data/attachment/album/201410/20/120834wb2iizwkkkukaazz.png)

该文件提供了几种操作选项，包括pick、rework、edit、squash、fixup和exec。每种操作也有对应的缩写形式p、r、e、s、f和x。由于篇幅限制，这里不再赘述各个选项的具体含义，而是专注于当前任务。

针对 `f3` 提交，我们选择 `edit` 选项，以使内容变为如下所示：
![](/data/attachment/album/201410/20/120848p8h8khxnupur0tt0.png)

保存文件后（在Vim中是输入`:wq`并按回车键），rebase过程会在所选提交处暂停。
![](/data/attachment/album/201410/20/120859uhvo4634w33ww68e.jpg)

这意味着Git会像执行普通rebase一样应用 `f1` 和 `f2` 提交，但在 `f3` 应用后停止。可以通过检查日志来验证这一点。
![](/data/attachment/album/201410/20/120912rbjdbljxtjadtesz.png)

要将 `f3` 分成两个提交，需要重置Git指针到之前的提交 `f2`，同时保持工作目录不变。这正是 `git reset --mixed HEAD~1` 命令的作用。执行此命令后，通过 `git status` 可以看到发生了什么变化。
![](/data/attachment/album/201410/20/120926sk0cqui0iutzucic.png)

根据 `git status` 输出，我们知道 `userService.js` 和 `wishlistService.js` 已被修改。如果运行 `git diff`，可以看到 `f3` 中具体做了哪些更改。
![](/data/attachment/album/201410/20/120940o0ibunmo3nm49n3u.png)

从日志中可以看出，原来的 `f3` 提交已消失。
![](/data/attachment/album/201410/20/120955eib8s88ic6bm8qzz.png)

现在我们准备创建新的提交。先为 `userService.js` 创建一个新提交，可以合并到主分支中。运行 `git add userService.js` 并执行 `git commit -m "f3a: add updateUser method"`。
接下来，为 `wishlistService.js` 的变更创建另一个提交。运行 `git add wishlistService.js` 然后执行 `git commit -m "f3b: add addItems method"`。

再次查看日志，确认结果符合预期。
![](/data/attachment/album/201410/20/121007qqd5ippt4a4zihth.png)

虽然我们得到了想要的结果，但由于仍处于交互式rebase过程中，因此还需要告诉Git继续完成剩余步骤。使用 `git rebase --continue` 继续。
![](/data/attachment/album/201410/20/121019t1421s43bbv7yks4.png)

最后一步是将 `f3a` 提交cherry-pick到主分支上。为此，先切换到主分支 `git checkout master`，再使用 `git cherry-pick bd47ee1` 将指定提交添加到当前分支顶端。
![](/data/attachment/album/201410/20/121042xwprfo2ileil8qzl.png)
![](/data/attachment/album/201410/20/121052f2c0o2lo7oqh2z9a.png)

尽管上述步骤看起来很复杂，但对于有经验的Git用户来说其实非常简单。
> 
> 注：Christoph目前正在与Pascal Precht合作撰写一本关于[Git Rebase](https://leanpub.com/rebase-the-complete-guide-on-rebasing-in-git)的书，您可以在Leanpub订阅并在书籍发布时收到通知。
> 

本文作者Christoph Burgdorf自十岁开始编程，他是HannoverJS Meetup网站的创始人之一，并积极参与AngularJS社区活动。他对Git有着深入的理解，并通过[Thoughttram](http://thoughtram.io/)工作室帮助初学者掌握这项技术。
原文发表于他的[博客](http://blog.thoughtram.io/posts/going-back-in-time-to-split-older-commits/)。
---
via: [cburgdorf](https://www.codementor.io/cburgdorf)  
译者: [geekpi](https://github.com/geekpi) 校对: [wxy](https://github.com/wxy)  
由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出