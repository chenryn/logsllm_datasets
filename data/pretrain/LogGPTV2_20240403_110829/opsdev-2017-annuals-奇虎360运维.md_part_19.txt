---
## Page 150
Rigger项目
解决思路
遇到的问题
发的工具，主要用于团队多人合作开发时使用。
缘起
■团队开发项目环境搭建工具RIGGER
3.
2．使用多个统一的模板文件来生成个人最终的配置文件，当多人协作使用的配置有更新
针对上面提出的问题，我的解决思路如下：
4．新同学加入项目后，通常要看之前同学写过的项目部署文档去尝试部署项目，其中会
2．多人合用一台开发机，所以如nginx配置中的server_name、资源配置中如go服务启
我们在多人合作开发一个项目时，通常会遇到如下几个方面的问题：
开发多年，我自己积累了一些个人认为还不错的工具、框架，今天我先介绍一个我自己开
I Mar. 15th 2018 BY 李钢 
Rigger 项目地址: https://github.com/ligang1109/rigger
1．每个人使用变量来定义自己和别人环境上的不同之处。
3.
里面有相关使用文档，大家有兴趣的不妨看下。
基于上面的思路，我开发了Rigger这个工具。
1．项目中有一些配置文件，如开发web项目时会用到nginx配置，项目中依赖db时要有
项目环境搭建步骤记录到统一的配置文件中，简单快速执行整个项目搭建过程。
时更新相应的模板文件即可。
当配置文件变化后，需要项目中所有人都更新自己相应的配置文件。
动的tcp端口等不能相同。
db配置。
学，
遇到没有文档或是文档更新不及时的问题，这样就只能靠问，就算是能力强一些的同
，自己解决起来也要花很长时间，更重要的是，这些都是重复性工作。
运维开发－团队开发项目环境搭建工具Rigger145
---
## Page 151
量做替换就可以了。
中的 var.json 完成。
项目开发环境部署方法
项目开发环境部署方法
实际效果
146 团队开发项目环境搭建工具Rigger－运维开发
资源配置文件示例:
因为配置都是可以模板化的，那么其中每个用户和别人不同的地方，使用之前定义好的变
var.json示例:
首先，我们将每个人和自己不同的地方使用变量进行定义，这个通过编辑 Rigger配置文件
我们看下如何使用Rigger完成上面这些事情：
2．创建自己的nginx配置文件ligang_api_http.conf.ngx，并在相应目录下创建link:
这里使用我们开发的一个golang开源项目：gobox-demo为例。
https://github.com/goinbox/gobox-demo/blob/master/conf/rigger/tpl/tpl_server_conf rewrite.jison
定义好变量后，
编辑模板文件
https://github.com/goinbox/gobox-demo/blob/master/conf/rigger/var.json
定义用户变量
做完上面这些事情，这个项目就完成了我们在开发环境的部署。
1． 创建自己的项目资源配置文件：ligang_server_conf_rewrite.json，并在相应目录下
参与这个项目开发的同学，如果想要把自己的环境跑起来，需要做如下的事情：
. Nginx reload/restart
1.
 获取项目所依赖的包
初始化目录：logs、tmp
gang_api_http.conf.ngx
ligang.gdemo.com.conf -> /home/ligang/devspace/gobox-demo/conf/http/li-
conf/server/ligang_server_conf_rewrite.json
创建link: server_conf_rewrite.json -> /home/igang/devspace/gobox-demo/-
，我们就可以编辑项目中用到的相关的配置模板文件了。
---
## Page 152
外一个项目中仅需要做很少的改动即可，且这是项目新创建时的一次性工作。
方包，重启nginx等。这个通过编辑Rigger配置文件中的action.json完成。
Rigger配置文件中的tpl.json完成。
这样做的好处
1．配置更新时仅需要更新对应的模板文件，其他同学更新模板文件后只要执行rigger命
在实际项目中使用Rigger后，我们从中获得的好处如下：
因为大家平时开发的项目都很类似，只要你在一个项目中写好了对应的配置及模板，在另
运行示例：
完成上面这些工作，我们就可以运行rigger，它就可以帮我将这个项目部署好了。
运行rigger 
https://github.com/goinbox/gobox-demo/blob/master/conf/rigger/action.ison
 action.json示例:
3.
上面这些步骤，看起来很多，但其实不然。
https://github.com/goinbox/gobox-demo/blob/master/init.sh
最后要定义的就是我们还需要执行哪些外部命令了，比如创建哪些目录，拉取项目依赖的第三
定义需要执行的外部命令
https://github.com/goinbox/gobox-demo/blob/master/conf/rigger/tpl.json
tpl.json示例:
定义好模版后，我们就可以定义使用哪个模板文件生成哪些对应的配置文件了，这个通过编辑
2.
定义模板文件的解析规则
大家可以看到，每个人不同的地方，都使用变量这种方式做了替换。
https://github.com/goinbox/gobox-demo/blob/master/conf/rigger/tpl/tpl_api_http.conf.ngx
Nginx配置文件示例:
大大降低新同学加入项目的成本。
大大减少了项目环境部署的文档工作。
令即可更新自己的环境。
运维开发－团队开发项目环境搭建工具Rigger147
---
## Page 153
本文链接：https://opsdev.cn/post/rigger.html
格检查线上使用的配置文件。
Q：模板文件是否有什么限制？
A：因为使用的golang开发，所以安装使用十分方便，仅需要编译安装的机器有go1.8版本以上环境和官方
Q：使用rigger是否有其他依赖？
面对面：
谢！
A：是可以的，但我们团队在实际使用中并没有这样做。这是因为我们团队偏保守一些，会要求上线人员严
Q：除了开发环境，是否也可用于生成线上使用的配置文件？
A：没有任何限制，
的dep工具即可。
结束语
148团队开发项目环境搭建工具Rigger－运维开发
如果使用中有遇到问题，或是有想帮助改进
看了这么多，你有没有兴趣试试看？
，可以使用任何文本文件
Rigger，都可以联系我，欢迎大家指正，谢
一扫查看文章详情
色
---
## Page 154
效率。谈到效率，那么决定效率的一定是分母时间 t吗？不然，这个哲学问题有太多其他的答案
对比分析
实测下载速度从381KB/s 提高到了 4.26MB/s.
例外。我在一台代理服务器节点上部署了TCP BBR 拥塞控制算法。从电信出口到日本Vultr 的
机对TCPBBR进行了测试。
析研究。最近看Kubernetes 相关的文档突然想起了这个神器，于是我大晚上的搭了一台测试
背景介绍
主线。
Google 的 TCP BBR(Bottleneck Bandwidth and RTT)拥塞控制算法也在这个版本并入了
IGOOGLEBBR拥塞控制算法模型初探
I Sep. 3rd 2017 BY 康凯 
翻译
人类的公式都太依赖时间t了，人们总是希望在我们生存的三维空间里尽量压缩时间来提高
的感觉。
丢包率的情况下，TCPBBR更加激进，抢占了更多的公网带宽。因此也是有些不道德
是因为大多数人用的是TCP Cubic(Linux)/ Compound TCP(Windows)，在有一定
他人share），代理服务器实测是限速1Mbps。RTT是 96 ms。实测结果这么好，也
间不是dedicated专线，走的是公网，电信出口这边是10Mbps无限速（但是要跟其
送方。这个服务器是访问墙外资源的 HTTP 代理。我本地的电信出口到代理服务器之
补充测试环境说明：是在日本的Vultr服务器上配置了BBR，日本的服务器是数据的发
根据以往的传统，G家总是先在自家的生产环境上线运用后，才会将代码开源，此次也不
几个月前就在 Github上fork了 Google 开源的神器 BBR 算法，但是一直都没有深入去分
而之前的 Reno／CUBIC 之所以蒙蔽了人类这么久，正是因为程序员和 CS 科学家都是一
Kernel 4.9 正式版本的发布带来了一些令人激动的特性以及一些驱动的更新。其中来自
翻译－GoogleBBR拥塞控制算法模型初探149
---
## Page 155
加 ELRepo GPG key;
出到 4.10了，不过 gregkh 已经宣布 4.9 将是LTS 版本），为了不影响线上机器运行，我在
Quck Start
现，一个是反馈驱动的主动实现。
"To avoid congestion"， "To probe more bandwidth" 的逻辑，只是一个是事件驱动的被动实
它，如果没有，就退回到之前的状态。
数据发送量，之后重新向那个错误的收敛点前进，如此反复。这就是锯齿的根源。而 BBR 则在
及网络上的所有缓存，以为这样就会达到比较高的带宽利用率，直到发现丢包，然后迅速降低
算法的目标都是收敛于一个逻辑滞后的收敛点，不断地增加数据的传输，试图填满整个网络以
从 1973 年 TCP/IP 被 Prof. Vinton G. Cerf 提出之后，诸如 Reno/CUBIC 等经典 TCP 拥塞
RTT-series analysis 来查到一个连接最快能跑多少数据。
Vultr 上买了一台新的 CentOS 来测试=.=
群事件驱动的群体。他们在为TCP建立性能模型的时候，总是希望通过用Time-series/
一个不随时间滑动的大概10秒的时间窗口中采集最小RTT，如果有更多的带宽，那么就利用
150Google BBR 拥塞控制算法模型初探－翻译
如果你也想感受神器的强大，首先需要一台Linux4.9内核版本以上的机器（现在居然已经
之后添加 CentOS 7的源；
要在 CentOS 上安装最新的内核版本，我们需要增加一个 ELRepo 源。首先，让我们添
2．降低网络链路上的 buffer占用率，从而降低延迟。
1．在有一定丢包率的网络链路上充分利用带宽。
TCP BBR 致力于解决两个问题：
关于TCP BBR 算法分析，MSRA 的李博杰博士在知乎上给出了这样的解释:
以上就是Reno/CUBIC 和 BBR 的区别，它们同样完成了"To find current bandwidth"
但是这些都是错的，我们奉为神明的时间 t的产物时间轴，具有滞后性这一致命的缺点。自
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-
2.el7.elrepo.noarch.rpm
ud
--import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
---
## Page 156
line 了。
果就归于平均了，但总体资源利用率会有所提升，好在 Google 把 BBR 算法并入内核 main-
client 部署。
对哪边发出的数据有效。也就是说，如果是下载，就应在 server 部署；如果是上传，就应在
More Info
查看 tcp_bbr 模块是否加载。
sudo sysctl net.ipv4.tcp_congestion_control 
sudo sysctl net.ipv4.tcp_available_congestion_control 
重启后，首先看下内核是否切换，然后执行下面的命令查看内核是否开启TCP BBR;
 Juos'tasss/a/ >
---
## Page 157
本文链接：https://opsdev.cn/post/tcp-bbr.html
A：安装脚本来自秋大，可以找台机器快速体验下：
Q：BBR 感觉非常好，有更方便的体验姿势吗？
A：存在一定丢包率的高带宽，高延迟网络或者 buffer 较小的慢接入网络。
Q：生产环境下 BBR 适合哪些场景呢？
面对面：
152GoogleBBR拥塞控制算法模型初探－翻译
&& chmod +x bbr.sh && ./bbr.sh 
wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\
 2. http:/www.elfsong.cn/tcp-bbr%E8%AF%95%E7%94%A8%E4%BD%93%E9%AA%8C/
to-GCP-your-Internet-just-got-faster.html 
1. https://cloudplatform.googleblog.com/2017/07/TCP-BBR-congestion-control-comes-
参考文献
口
■
扫查看文章详情
F
---
## Page 158
而不是以实例为纬度，很难深入挖掘问题。
加Key/value标签，使得在查询时更容易进行过滤，分组和匹配。
模型更加丰富。Graphite 以""作为分割符命名监控项，而Prometheus 在命名监控项时通过添
图和报警系统。有丰富的官方和第三方贡献的监控收集工具(详见exporters)。
其他特性需要通过外部组件来实现。
Prometheus vs. Graphite
IPROMETHEUS及替代方案对比
而且当 Graphite 和 StatsD 结合使用时，一般只会存储聚合后的所有监控实例的监控数据
1 Mar. 8th 2017 BY 赵鹏 
在 Prometheus 中相同的数据如下存储(以收集三台接口服务器为例)。
在Graphite 或 StatsD 中如下:
在这里有一个例子，我们要存储/tracks 接口 POST请求的 500 返回值的数量。
Graphite 和 Prometheus 一样存储命名后的时间序列数据，当然 Prometheus 的元数据
数据模型
Prometheus是一套完整的监控和趋势系统，在时序数据基础上内建主动抓取，搜索，绘
Graphite关注点是作为一个被动机制的时间序列数据库，有自己的查询语言和绘图方式。
stats.api-server.tracks.post.500 -> 93
适用范围