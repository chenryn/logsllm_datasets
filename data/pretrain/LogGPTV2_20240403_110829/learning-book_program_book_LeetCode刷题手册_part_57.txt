●rand7 已定义。
·传入参数：n表示rand10的调用次数。
进阶：
●rand7(调用次数的期望值是多少？
●你能否尽量少调用rand70？
解题思路
·给出rand7O要求实现rand10（）。
·rand7（）等概率地产生1，2，3，4，5，6，7。要想得到rand10（）即等概率的生成1-10。解
题思路是先构造一个randN（），这个N必须是10的整数倍，然后randN%10就可以得到
rand10（）了。所以可以从rand7（先构造出rand49，再把rand49（中大于等于40的
都过滤掉，这样就得到了rand40（），在对10取余即可。
1.rand7（）等概率地产生1,2,3,4,5,6,7.
2.rand7（）-1等概率地产生[0,6]
3.（rand7()-1）*7等概率地产生0,7,14,21,28,35,42
6[8]（-（pu）+（-（）pu）
5.如果步骤4的结果大于等于40，那么就重复步骤4，直到产生的数小于40
6.把步骤5的结果mod10再加1，就会等概率的随机生成[1，10]
·这道题可以推广到生成任意数的随机数问题。用randN（）实现randM（)，M>N。步骤如下：
1.用randN（)先实现randx（)，其中×≥M，X是M的整数倍。如这题中的49>10；
2.再用randx（生成randM（)，如这题中的 49—>40>10
●举个例子，用rand3（）生成rand11O，可以先生成rand27（，然后变成以22为界限，因为
（）+（）
+（rand3（）-1），最后生成了randl1（）：用rand7（）生成rand9（，可以先生成
rand49（），然后变成以45为界限，因为45是9的倍数。生成rand49（）的方式：（rand7（)
-1）*7+（rand7（）-1），最后生成了rand9（：用rand6（）生成rand13（），可以先
生成rand36（），然后变成以26为界限，因为26是13的倍数。生成rand36（）的方
式：（rand6（-1）*6+（rand6（）-1)，最后生成了rand13O；
---
## Page 543
代码
package leetcode
import "math/rand"
func rand10() int {
rand10 := 10
for rand10 >= 10 {
rand10 = (rand7() - 1) + rand7()
return rand10%10 + 1
func rand7() int {
return rand.Intn(7)
func rand101O int{
rand40 := 40
for rand40 >= 40 {
rand40 =(rand7()-1) *7 + rand7() - 1
return rand40%10 +1
474.OnesandZeroes
题目
In the computer world, use restricted resource you have to generate maximum benefit is what
we always want to pursue.
au pueu jao au uo fjaaadsan st u pue so w jo joeuop e aue no asoddns mou so
is an array with strings consisting of only Os and 1s 
Now your task is to find the maximum number of strings that you can form with given m 0s and
n ls . Each 0 and 1 can be used at most once.
Note:
1. The given numbers of 0s and 1s will both not exceed 100
2. The size of given string array won't exceed 600.
Example 1:
---
## Page 544
Input: Array = {"10", "0001", "111001", "1", "0"}, m = 5, n = 3
Output: 4
Explanation: This are totally 4 strings can be formed by the using of 5 0s and
3 1s, which are “10,"0001","1","0"
Example 2:
Input: Array = {"1o", "o", "1"}, m = 1, n = 1
Output:2
Explanation: You could form "10", but then you'd have nothing 1eft. Better
form "o" and "1".
题目大意
在计算机界中，我们总是追求用有限的资源获取最大的收益。现在，假设你分别支配着m个0和n个
1。另外，还有一个仅包含0和1字符串的数组。你的任务是使用给定的m个0和n个1，找到能拼
出存在于数组中的字符串的最大数量。每个0和1至多被使用一次。
注意：
1.给定0和1的数量都不会超过100。
2.给定字符串数组的长度不会超过600。
解题思路
·给定一个字符串数组和m，n，其中所有的字符都是由0和1组成的。问能否从数组中取出最多的
字符串，使得这些取出的字符串中所有的0的个数≤m，1的个数≤n。
·这一题是典型的01背包的题型。只不过是一个二维的背包问题。在n个物品中选出一定物品，尽
量完全填满m维和n维的背包。为什么是尽量填满？因为不一定能完全填满背包。
·dp[i][j]代表尽量填满容量为（i，j）的背包装下的物品总数，状态转移方程为dp[i]tj]=
max（dp[i][j]，l+dp[i-zero][j-one]）。其中zero代表的当前装入物品在m维上的体积，
也即0的个数。one代表的是当前装入物品在n维上的体积，也即1的个数。每添加一个物品，
比较当前（ij)的背包装下的物品总数和（i-zero,j-one）的背包装下的物品总数+1，比较这两者的大
小，保存两者的最大值。每添加一个物品就刷新这个二维背包，直到所有物品都扫完一遍。dp[m]
[n]中存储的就是最终的答案。时间复杂度o（n²M*N）。
代码
package leetcode
import "strings"
func findMaxForm(strs []string, m int, n int) int {
---
## Page 545
dp := make([][]int, m+1)
for i := 0; i  m ll one > n {
continue
for i = m; i >= zero; i--{
for j = n; j >= one; j-- {
dp[i][j] = max(dp[i][j], l+dp[i-zero][j-one])
return dp[m] [n]
475.Heaters
题目
Winter is coming! Your first job during the contest is to design a standard heater with fixed warm
radius to warm all the houses.
Now, you are given positions of houses and heaters on a horizontal line, find out minimum radlius
of heaters so that all houses could be covered by those heaters.
So, your input will be the positions of houses and heaters seperately, and your expected output
will be the minimum radius standard of heaters.
Note:
1. Numbers of houses and heaters you are given are non-negative and will not exceed 25000.
2. Positions of houses and heaters you are given are non-negative and will not exceed 10^9.
3. As long as a house is in the heaters' warm radius range, it can be warmed.
4. All the heaters follow your radius standard and the warm radius will the same.
Example 1:
Input: [1,2,3],[2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the
radius 1 standard, then all the houses can be warmed.
Example 2:
---
## Page 546
Input: [1,2, 3,4] , [1, 4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. we need to use
radius 1 standard, then all the houses can be warmed.
题目大意
冬季已经来临。你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。现在，给出位于一条水
平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。所以，你的输入将会是房屋和
供暖器的位置。你将输出供暖器的最小加热半径。
说明：
●给出的房屋和供暖器的数目是非负数且不会超过25000。
·给出的房屋和供暖器的位置均是非负数且不会超过10^9。
·只要房屋位于供暖器的半径内（包括在边缘上），它就可以得到供暖。
·所有供暖器都遵循你的半径标准，加热的半径也一样。
解题思路
·给出一个房子坐标的数组，和一些供暖器坐标的数组，分别表示房子的坐标和供暖器的坐标。要求
找到供暖器最小的半径能使得所有的房子都能享受到暖气。
·这一题可以用暴力的解法，暴力解法依次遍历每个房子的坐标，再遍历每个供暖器，找到距离房子
最近的供暖器坐标。在所有这些距离的长度里面找到最大值，这个距离的最大值就是供暖器半径的
最小值。时间复杂度O(n^2)。
·这一题最优解是二分搜索。在查找距离房子最近的供暖器的时候，先将供暖器排序，然后用二分搜
索的方法查找。其他的做法和暴力解法一致。时间复杂度O（nlogn）。
代码
package leetcode
import（
"math"
"sort"
1
func findRadius(houses []int, heaters []int) int {
minRad := 0
sort.Ints(heaters)
for _, house := range houses {
//追历房子的坐标，维护heaters的最小半径
heater := findclosestHeater(house, heaters)
rad := heater - house
---
## Page 547
if rad  minRad {
minRad = rad
}
return minRad
//二分搜索
func findclosestHeater(pos int, heaters []int) int {
1ow, high := 0, len(heaters)-1
if pos  heaters[high]{
return heaters [high]
F
for low >1
if pos == heaters[mid] {
return heaters[mid]
} else if pos  0 {
xx> uint(i)) & 1
total += bitCount *(n -bitCount)
return total
}
//暴力解法超时！
func totalHammingDistancel(nums []int) int{
res := 0
for i:=0;i<1en（nums）;i++{
for j := i + 1; j < len(nums); j++ {
res += hammingDistance(nums[i], nums[j])
return res
480.SlidingWindowMedian
题目
---
## Page 551
Median is the middlle value in an ordered integer list. If the size of the list is even, there is no
middlle value. So the median is the mean of the two middle value.
Examples:
[2, 3, 4] , the median is 3
[2, 3] , the median is (2 + 3) / 2 = 2. 5
au jo jyal Auan aua wong Sunow s ypjqm x azis jo mopu gupiis e sl auau swnu Aeue ue uani
array to the very right. You can only see the k numbers in the window. Each time the sliding
windlow moves right by one position. Your job is to output the median array for each window in
the original array.
For example,
Given nums = [1, 3, -1, -3, 5, 3, 6,7] , and k = 3.
window position
ue Ipaw
[13-1]-35367
1 [3-1-3] 536 7
-1
13 [-1-35] 36 7
-1
13-1 [-3 5 3] 6 7
3
1  3-1 -3 [53 6] 7
5
13-1-3 5 [3 6 7]
6
Therefore, return the median sliding window as [1, -1, -1, 3, 5, 6]
Note:
You may assume k is always valid, ie: k is always smaller than input array's size for non-empty
题目大意
中位数是有序序列最中间的那个数。如果序列的大小是偶数，则没有最中间的数；此时中位数是最中间
的两个数的平均数。
例如：
[2,3,4]，中位数是3
[2,3],中位数是 (2 + 3) / 2 = 2.5
给出一个数组nums，有一个大小为k的窗口从最左端滑动到最右端。窗口中有k个数，每次窗口移动
1位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。
解题思路
·给定一个数组和一个窗口为K的窗口，当窗口从数组的左边滑动到数组右边的时候，输出每次移
---
## Page 552
动窗口以后，在窗口内的排序之后中间大小的值。
·这一题是第239题的升级版。
·这道题最暴力的方法就是将窗口内的元素都排序，时间复杂度O（n*K)。
·另一种思路是用两个优先队列，大顶堆里面的元素都比小顶堆里面的元素小。小顶堆里面存储排序
以后中间靠后的值大的元素，大顶堆里面存储排序以后中间靠前的值小的元素。如果k是偶数，那
么两个堆都有k/2个元素，中间值就是两个堆顶的元素；如果k是奇数，那么小顶堆比大顶堆多一
个元素，中间值就是小顶堆的堆顶元素。删除一个元素，元素都标记到删除的堆中，取top的时
候注意需要取出没有删除的元素。时间复杂度O（n*logk)空间复杂度O（k)
代码
package leetcode
import(
"container/heap"
"container/list"
"sort"
//解法一用链表按照题意实现时间复杂度o（nk）空间复杂度o（k）
func medianslidingwindow(nums []int, k int) []float64 {
var res []float64
w := getwindowList(nums[:k], k)
res = append(res, getMedian(w, k))
for pl := k; pl < len(nums); pl++ {
w = removeFromwindow(w, nums[p1-k])
w = insertInwindow(w, nums [p1])
res = append(res, getMedian(w, k))
return res
}
func getwindowList(nums []int, k int) *list.List {
S := make([]int, k)
copy (s, nums)
sort.Ints(s)
1 := 1ist.New()
for _, n := range s {
1. PushBack(n)
return 1
}
func removeFromwindow(w *1ist.List, n int) *1ist.List {
for e := w.Front(）; e I= nil; e = e.Next(） {
if e.value.(int) == n {