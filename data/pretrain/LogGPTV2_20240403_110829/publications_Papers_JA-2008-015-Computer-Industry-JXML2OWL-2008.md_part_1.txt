Moving from Syntactic to Semantic
Organizations using JXML2OWL
Toni Rodrigues ¹, Pedro Rosa ², Jorge Cardoso ³ (Contact Author)
¹ SQLI
Immeuble le Pressensé
268 Avenue du Président Wilson
93210 La Plaine Saint-Denis
France
PI:EMAIL
² Department of Mathematics and Engineering
University of Madeira
9050-390 Funchal
Portugal
PI:EMAIL
³ SAP Research CEC Dresden – SAP AG
Chemnitzer Strasse 48
01187 Dresden, Germany
T +49 351 4811-6145
F +49 6227 78 50340
PI:EMAIL
Abstract. Today’s enterprises face critical needs in integrating disparate information
spread over several data sources inside and even outside the organization. Most
organizations already rely on XML standard to define their data models. Unfortunately,
even when using XML to represent data, problems arise when it is necessary to integrate
different data sources. Emerging Semantic Web technologies, such as ontologies, RDF,
RDFS, and OWL, can play an important role in the semantic definition and integration of
data. The purpose of our study is to present a framework to assist organizations to move
from a syntactic data infrastructure defined in XML to a semantic data infrastructure using
OWL. The framework supports mappings and fully automated instance transformation
from syntactic data sources in XML format to a common shared global model defined by
an ontology using Semantic Web technologies. The presented framework, JXML2OWL,
allows organizations to automatically convert their XML data sources to a semantic model
defined in OWL.
Keywords: semantic web, ontologies, information systems integration, mapping,
transformation
1 Introduction
The Semantic Web is a project and a vision of the World Wide Web Consortium
(W3C). It is an extension of the current Web in which “information is given a well-
defined meaning, better enabling computers and people to work in cooperation” [1].
While the current Web is only human-understandable, the Semantic Web vision intends
to represent Web content in such a form that it becomes machine-processable [2].
Toward this objective, several standards have emerged under the initiative of the W3C,
such as RDF, RDFS and OWL. Ontologies play an important role to realize this vision
allowing data to be defined and linked in a way that it enables its use for more effective
discovery, integration, re-use across various applications and machine processing [1].
According to TopQuadrant, a consulting firm that specializes in Semantic Web
technologies, the market for semantic technologies will grow at an annual growth rate
of between 60% and 70% until 2010. It will grow from its current size of US$2 billion
to US$63 billion [3]. Semantic Web technologies find one of their first commercial
users in organizations facing data integration needs [4] and always seeking for better
data integration solutions. Company mergers, integration of new software together with
legacy systems which need to share data, the necessity of a unique global view of all the
internal enterprise and external partner data sources, the need to be compliant with
emerging standards to enable and maintain B2B cooperation, are all forces driving the
need for data integration [5]. According to the InfoWorld’s 2002 Application
Integration Survey of IT leaders, integration costs consumed at that time an average of
24 percent of the yearly IT budget [6]. For midsize to large companies this represents
millions of dollars. The year 2005 also was a busy year for data integration and
nowadays companies are increasing their budget to better address data integration needs
and related difficulties [7].
Integrating data from various data sources is not an easy task. In fact, several
obstacles, mainly related with semantic heterogeneity, have been identified by
researchers, such as [8]:
• Syntactic obstacles: Different terminology can be used to refer to semantically
identical concepts. For example, a data source may use a table named client
while another data source uses a table named customer with the same meaning.
• Semantic obstacles: The semantics may differ for similar terms. For example,
the term customer can have different meanings. In one data source, it can
include only end-customers while in another data source it can combine end-
customers with dealers.
• Structural obstacles: The information may not only be structured differently but
may also use distinct data formats. For instance, one data source may be
available as a database using the relational model while another data source is
provided using the XML format.
Current data integration approaches heavily rely on knowing what data is where and
on the meaning of the data. Data description, or metadata, is essential to ease data
integration and discovery [9]. Enterprise metadata repositories based on standards can
be used as platforms for storing, accessing and managing metadata, as well as to locate
information across an organization [10]. Meta-data also allows efficient re-use of
integration efforts [10] and, in combination with semantic, it is possible to describe
2
contextually relevant or domain-specific information about content based on a domain
metadata model [11]. This is what semantic metadata is.
With semantic metadata, a rich semantic domain model with concepts, attributes and
relationships can be built. Ontologies constitute a good candidate to represent this kind
of domain model. An Ontology is a formal, explicit specification of a shared
conceptualization [12]. Thus, ontologies are particularly suitable to play the role of a
central model. In fact, the conceptualization would be an abstract model of all the
enterprise domain concepts. These domain concepts are explicitly defined and related to
other concepts independently of the underlying applications. An ontology is not only
human understandable. Indeed, because an ontology is a formal specification, it makes
it also machine-processable. This formal specification also enables inference, that is,
logical reasoning about concepts. Consequently, it is possible to derive (potentially
new) knowledge from previously known facts. Ontologies, and therefore information,
can be shared between applications or business partners because they are essentially
domain specific. Products, such as Oracle 10g and Cerebra Server, which use ontologies
for metadata description, global domain model specification, or more generally for data
integration, are already available on the market.
The S2S (Syntactic-to-Semantic) middleware follows such a paradigm [13]. S2S
uses ontologies to provide a semantic layer and transparently integrates disparate data
assets of an organization hiding several details of the integrated data sources [14] . Such
hidden details include the distributed nature of enterprise data sources and their
structure, and semantic as well as syntactical heterogeneity. Figure 1 represents at a
very high level the architecture of the S2S middleware. One can notice the use of an
ontology, which provides a shared common understanding of a domain and enables
semantic data integration, and other important modules such as the Extractor, Mapper
and Instance Generator.
A typical scenario with this middleware essentially takes place as follows. When
applications perform queries, the extractor module is responsible to transparently extract
from the disparate assets the data needed to answer the query. This extracted data is
then automatically transformed at run-time into instances of the ontology (usually called
individuals) by the Instances Generator component according to the mapping previously
performed by the Mapper module between the heterogeneous data sources schema and
the ontology. Finally, inference can then be carried out over the knowledge base
(ontology and its populated individuals). According to the business rules and query
performed, appropriate results are returned to the applications. As enacted in this
scenario, besides the extractors, the Mapper and the Instance Generator are key
elements of such middleware, and more generally, of any system supporting semantic
data integration. This approach allows organizations to view their heterogeneous data
sources as one global ontology and brings all the discussed advantages such as: the
ability to discover new knowledge from known facts; the capacity to share the global
model between partners; and the capability to annotate data with metadata which can be
used to ease data integration and discovery.
Within the scope of this paper, we are particularly interested in the Mapper and
Instance Generator modules. We propose a semantic approach to cope with the data
integration problems defining the JXML2OWL framework which can be used to map
syntactic data in XML format to an ontology defined in OWL (Web Ontology
Language). This paper is organized as follows. Section 2 presents the JXML2OWL
project and then compares it to other related works. In Section 3, we propose a notation
to specify mappings between XML schema and OWL ontology and discuss important
3
aspects regarding the instances generation. We call instances generation to the
transformation process of XML data (validating against the mapped XML schema) into
instances of the mapped ontology. Section 4 introduces the prototype we successfully
implemented. Finally, Section 5 presents our conclusions.
2 A Brief Overview of JXML2OWL
Java XML to OWL project is divided into two sub projects: JXML2OWL API and
JXML2OWL Mapper. The API is a generic and reusable open source library for
mapping XML schemas to OWL ontologies for the Java platform while the Mapper is
an application with a graphical user interface (GUI) developed in Java Swing that uses
the API and eases the mapping process.
The final objective of JXML2OWL project is to develop a user-friendly, interactive
and manual mapping tool that allows a user to map syntactic data in XML format to any
existing ontology defined in OWL language with the purpose of easing and automating
the semantic data integration process. More precisely, the developed mapping tool
supports mappings between any XML schema (XSD and DTD) to concepts (classes and
properties) of any OWL ontology. According to the mapping performed, the tool
generates mapping rules as an XSL document that allows the automatic transformation
of any XML data, that is, any XML document validating against the mapped schema,
into instances of the mapped ontology. XML documents were chosen as input because
today’s most commercial and scientific applications (such MS Excel, Apple iTunes or
Matlab) as well as databases (such as MS SQL Server) provide services for
automatically exporting their data or results into XML format. Additionally, XML has
become the de facto standard for B2B data exchange and cooperation [15]. Thus we
argue that XML can be considered as a standard representation of a wide variety of data
sources. As such, the third obstacle, the structure problem, mentioned in Section 1 of
this paper is partially addressed. Mapping to an ontology, which represents a shared
common understanding of a specific domain, solves the terminology incompatibility
problem. OWL was chosen as the ontology language because it is the W3C
recommendation for building ontologies. Generated mapping rules are wrapped in an
XSL document to easily support instances transformation. XSLT is the used standard to
transform XML documents. The XSL document generated by JXML2OWL can be used
by any XSLT processor to automatically transform instances of the mapped schema into
instances of the ontology. The XSLT choice gets even more obvious considering that
OWL is specified with XML syntax. This option towards XSLT standard allows us to
simultaneously address the Mapper and Instance Generator modules specified in the
S2S middleware architecture. As illustrated in Figure 2, the JXML2OWL API
represents the Mapper component while the XSLT processor represents the Instance
Generator module.
In the data integration context, the JXML2OWL API can be used ahead of query
time to manually map each XML data source schema to the ontology and to generate
the mapping rules wrapped in an XSL document. At run-time, that is, at query-time,
data is fetched from the XML data sources and is automatically transformed into
individuals using an XSLT processor and the generated rules over the fetched data.
4
2.1 Related work
Since Semantic Web technologies, and more precisely the OWL recommendation,
are emerging concepts, not many applications using these technologies have been
developed in the industry. Besides OWL, researchers are also developing specification
to represent rules semantically [16, 17]. While specifications already exist for a few
years, there is a lack of prototypes that can demonstrate without a doubt that the
semantic Web is a solution for many of the problems that the industry faces. Moreover,
many vendors seem to be taking a “wait-and-see” approach while the emerging
standards converge. This position has already been discussed in [18] with respect to the
Semantic Web and Web services.
Nevertheless, due to the development pace of Semantic Web technologies, a fair
amount of applications that use OWL are available and result from academic research,
projects and theses. These OWL applications can be grouped into three main categories:
• Editors/Browsers – Applications that allow to create, edit, and browse OWL
ontologies
• Annotation tools – Applications that enable end users to annotate existent data
with semantic context
• Mapping tools – Tools that enable the creation of correspondences/ mappings
between two schemas. According to this mapping, instances of source schema
can be transformed into instances of target schema.
A large part of the applications related to the OWL W3C recommendation are
included in either Editor/Browser or Annotation categories. Mapping tools that involve
XML and OWL data models are scarce. In fact, during our research, we did not find any
tool supporting mappings from XML schemas to existing OWL ontologies. This fact
makes our project JXML2OWL a unique contribution to the pool of semantic Web
applications.
A considerable amount of mapping tools has the purpose of creating mappings
between two distinct ontologies such as FOAM (Framework for Ontology Alignment
and Mapping) [19]. Other works, which in some way are related with JXML2OWL,
include COMA++, XML2OWL and Lifting XML Schema to OWL. These projects are
discussed and compared to JXML2OWL in the next paragraphs.
COMA++ is a schema and ontology matching tool [20] developed at the University
of Leipzig. This tool mainly supports XML schema and OWL ontology documents as
data sources and enables a user to identify semantic correspondences between XML
schemas, OWL ontologies or even between an XML schema and an OWL ontology.
When mapping between XML schema elements and OWL concepts, it creates corres-
pondences between them. These correspondences attach meaning to syntactic data and
are expressed with simple pairs (XML schema element, OWL concept). The main
objective of COMA++ is to provide several automatic matching algorithms. For
example, it is possible to compare source elements and target schema taxonomies
running an algorithm which suggests mappings that the user can validate, edit or discard.
This ability of COMA++ is really interesting since it attenuates the problems related
with manual mapping processes, which have the advantage of being accurate (because
the mapping is performed by a human) but also have the inconvenience of being time-
consuming, tedious and error-prone (for the same reason). Although COMA++ is part
of the mapping group, it does not really intend to map XML schemas to ontologies with
5
the purpose of facilitating the transformation of schema’s instances into individuals as
we do. Also, the resulting mapping is quite primitive, with lot of semantic loss (such as
relations between mapped concepts).
The major part of the other work done in this field intends to transform an XML
Schema to a new ontology capturing the implicit semantics available in the structure of
XML documents. Such an approach is used in [21]. The authors propose an approach to
narrow the gap between XML, RDF and OWL. Their work is split into two independent
parts: they describe automatic mappings from XML to RDF as well as from XML
schema to OWL. However, since the mappings are independent, the generated instances
may not respect the OWL model created from the XML schema. In [22] the authors
cope with this independency between the mappings. Their framework automatically
creates a partial mapping from an XML schema to an ontology using an XSLT
transformation. It basically converts an XML Schema into a newly created ontology that
captures the implicit semantics existent in the XML schema structure. It also transforms
XML instances documents into instances of the newly created ontology. These two
approaches are distinct from ours since both create a new ontology while JXML2OWL
maps XML schemas to an already existent ontology.
Another interesting, very similar and complete approach is the XML2OWL
framework. It is developed in XSLT and also transforms XML schema (XSD) into a
newly created ontology in OWL [23]. Additionally, an XSLT that transforms instances
of the XML schema into instances of the created ontology is also generated. This
framework is similar with, but more complete than the works discussed in the previous
paragraph since the generated instances respect the created OWL model and also
support the creation of the OWL model directly from XML instances even if no XML
schema is available. This project resembles the one we have developed but there are
several differences. In fact, this tool creates a new ontology from an XML schema
during which the user has no control over the process. That is, the user has no control
over the newly created ontology which captures the implicit semantics existent in the
XML schema structure. Our main objective is different. Our project, JXML2OWL,
allows a user to map XML schema to an existing ontology, which is usually richer than
the one created by XML2OWL framework, and appropriately generate an XSLT that
automatically transforms instances of the schema to instances of the mapped ontology.
In JXML2OWL, during the mapping, the user has an active role and controls the
process. As such, we argue that XML2OWL is not a mapping tool. Instead, it is more
appropriate to call it a converter or a transformer. In addition, the instances generation is
quite primitive because duplicate instances are created with distinct IDs while
JXML2OWL detects and filters duplicate instances, merging all the associated
properties as explained in Section 3.
In this Section, all the projects that we have described are in some way related to our
JXML2OWL project. However, none of them supports mappings and instances
transformation to an existing OWL ontology. This means that, in the context of data
integration, they do not support the incremental addition and mapping of new data
sources. This was the main reason that led us to the specification and development of
the JXML2OWL application.
6
3 XML to OWL Mapping: Specification and Instances
Transformation
This section defines a notation to specify mappings between an XML schema to an
OWL schema ontology. Important aspects of instances transformation are also