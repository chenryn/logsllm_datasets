# OpenRASP 学习笔记

##### 译文声明
本文为翻译文章，具体内容及含义请以原文为准。

## 1. 引言
最近我研究了OpenRASP（Java版），虽然网络上已有不少关于OpenRASP的文章，但通过自己阅读并撰写总结，有助于更深入地理解。如有错误，请指正，非常感谢。

## 2. 阅读前的准备工作
首先需要将OpenRASP安装到Tomcat中，具体步骤可参考官方文档。

### 2.1 编译
#### 编译V8引擎
我在编译V8引擎时花费了不少时间，因为对C++编译不熟悉。以下是我的编译环境：
- 操作系统: Debian 4.9.18 (Kali)
- Java版本: OpenJDK 1.8
- GCC版本: 8.3.0

编译V8引擎jar包的步骤如下：
```bash
curl -L https://github.com/Kitware/CMake/releases/download/v3.15.3/cmake-3.15.3-Linux-x86_64.tar.gz | tar zx -C /tmp
export PATH=/tmp/cmake-3.15.3-Linux-x86_64/bin:$PATH
git clone https://github.com/baidu-security/openrasp-v8.git
cd openrasp-v8
mkdir -p build64 && cd build64
cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_LANGUAGES=java ..
make
mkdir -p ../java/src/main/resources/natives/linux_64 && cp java/libopenrasp_v8_java.so $_
cd java
mvn install
```

#### 编译项目
本文使用的是`1.3.4`版本。使用IntelliJ IDEA打开`\openrasp-master\agent\java`目录，并按以下步骤操作：
1. 打开 `Help > Find Action`，输入并打开 `Maven Project`。
2. 由于V8是在虚拟机上编译的，不在本地物理机的maven仓库中，需要先将其加入仓库：
   ```bash
   mvn install:install-file -Dfile=D:\share\v8-1.0-SNAPSHOT.jar -DgroupId=com.baidu.openrasp -DartifactId=v8 -Dpackaging=jar -Dversion=1.0-SNAPSHOT
   ```
3. 编译`rasp-boot`：
   ```bash
   mvn install:install-file -Dfile=D:\turn1tup\program_java\RASP\openrasp\agent\java\boot\target\rasp-boot-1.3.4-shaded.jar -DgroupId=com.baidu.openrasp -DartifactId=rasp-boot -Dpackaging=jar -Dversion=1.3.4
   ```
4. 同样操作编译`rasp-engine`。

#### 调试
在Windows下，在Tomcat的`catalina.bat`文件中的OpenRASP配置后添加JDWP配置：
```bash
if "%ACTION%" == "start" set JAVA_OPTS="-javaagent:%CATALINA_HOME%\rasp\rasp.jar" %JAVA_OPTS%
if "%ACTION%" == "start" set JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,address=1043,server=y,suspend=y %JAVA_OPTS%
```
在IDEA中将编译后的JAR包加入到项目库中，然后配置远程调试。断点设置在程序最开始执行的地方，例如：
```java
openrasp\agent\java\boot\src\main\java\com\baidu\openrasp\Agent.java
```

## 3. 工作原理
之前未曾接触过这项技术，通过查阅前辈们的文章和官方文档，大致了解了一些内容，这里简单介绍一下。

### JVM TI接口
Java虚拟机提供了一个名为JVM Tool Interface (JVM TI)的接口，通过该接口可以查看和控制运行在JVM上的程序。实现了JVM TI接口的程序称为agent，它与JVM在同一进程中直接通信。agent可以通过以下三种方式被执行：
1. **Agent Start-Up (OnLoad phase)**：在Java程序的`main`函数执行之前执行agent，通过`-javaagent`参数指定，实现方式为`premain`。
2. **Agent Start-Up (Live phase)**：对于正在运行的Java程序，通过JVM进程间通信动态加载agent，实现方式为`attach`机制。
3. **Agent Shutdown**：在虚拟机的library将要被卸载时执行，此方式忽略。

OpenRASP实现了前两种加载方式。根据[浅谈RASP](https://www.anquanke.com/post/id/187415)一文所述，`attach`机制由于JVM本身的进程保护机制，会导致重复字节码插入问题，造成重复告警，增加业务压力，而解决该问题的方法也会带来额外的业务压力。

### 字节码操作
#### ASM
备注：OpenRASP使用的是Javaassist。
通过agent，我们可以访问和修改JVM中的Java类，这时获取的数据是Java字节码，通常通过ASM字节码操作框架进行操作。引用[浅谈RASP](https://www.anquanke.com/post/id/187415)中对ASM的说明：
> 通过该图可以清晰地看出调用顺序，对于新手来说可以简单理解为以下调用顺序：
>
> - 需要访问类，所以要声明`ClassReader`来“获取”类。
> - 如果需要对类中的内容进行修改，就需要声明`ClassWriter`，它是继承于`ClassReader`的。
> - 然后实例化“访问者”`ClassVisitor`来进行类访问，至此就以“访问者”的身份进入了类，你可以进行以下工作：
>   - 如果需要访问注解，则实例化`AnnotationVisitor`。
>   - 如果需要访问参数，则实例化`FieldVisitor`。
>   - 如果需要访问方法，则实例化`MethodVisitor`。

#### Javassist
引用[字节码增强技术探索](https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html)：
>
> ASM是在指令层次上操作字节码的，阅读上文后，我们的直观感受是在指令层次上操作字节码的框架实现起来比较晦涩。故除此之外，我们再简单介绍另外一类框架：强调源代码层次操作字节码的框架Javassist。
>
> 利用Javassist实现字节码增强时，可以无须关注字节码刻板的结构，其优点就在于编程简单。直接使用Java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构或者动态生成类。其中最重要的是`ClassPool`、`CtClass`、`CtMethod`、`CtField`这四个类：
>
> - `CtClass`（compile-time class）：编译时类信息，它是一个class文件在代码中的抽象表现形式，可以通过一个类的全限定名来获取一个`CtClass`对象，用来表示这个类文件。
> - `ClassPool`：从开发视角来看，`ClassPool`是一张保存`CtClass`信息的HashTable，key为类名，value为类名对应的`CtClass`对象。当我们需要对某个类进行修改时，就是通过`pool.getCtClass("className")`方法从`pool`中获取到相应的`CtClass`。
> - `CtMethod`、`CtField`：这两个比较好理解，对应的是类中的方法和属性。
>
> 了解这四个类后，我们可以写一个小Demo来展示Javassist简单、快速的特点。我们依然是对`Base`中的`process()`方法做增强，在方法调用前后分别输出`"start"`和`"end"`，实现代码如下。我们需要做的就是从`pool`中获取到相应的`CtClass`对象和其中的方法，然后执行`method.insertBefore`和`insertAfter`方法，参数为要插入的Java代码，再以字符串的形式传入即可，实现起来也极为简单。
>
> ```java
> import com.meituan.mtrace.agent.javassist.*;

> public class JavassistTest {
>     public static void main(String[] args) throws NotFoundException,
>         CannotCompileException, IllegalAccessException, InstantiationException,
>         IOException {
>         ClassPool cp = ClassPool.getDefault();
>         CtClass cc = cp.get("meituan.bytecode.javassist.Base");
>         CtMethod m = cc.getDeclaredMethod("process");
>         m.insertBefore("{ System.out.println(\"start\"); }");
>         m.insertAfter("{ System.out.println(\"end\"); }");
>         Class c = cc.toClass();
>         cc.writeFile("/Users/zen/projects");
>         Base h = (Base)c.newInstance();
>         h.process();
>     }
> }
> ```

## 4. 实现
### 4.1 框架逻辑
这里就不赘述了，直接参考官方链接。

### 4.2 代码逻辑
#### manifest
- `rasp.jar`的`MANIFEST.MF`文件。
- `rasp-engine.jar`的`MANIFEST.MF`文件。

#### premain
从`premain`启动的`OnLoad phase`方式，调用了`init`进行了以下操作：`addJarToBootstrap`（打破双亲委派机制）、`readVersion`、启动`engine`。
堆栈信息：
```plaintext
init:92, Agent (com.baidu.openrasp)
premain:71, Agent (com.baidu.openrasp)
invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
invoke:62, NativeMethodAccessorImpl (sun.reflect)
invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
invoke:498, Method (java.lang.reflect)
loadClassAndStartAgent:386, InstrumentationImpl (sun.instrument)
loadClassAndCallPremain:401, InstrumentationImpl (sun.instrument)
```

#### 打破双亲委派机制
将`rasp.jar`添加到`BootstrapClassLoader`中，这样做是因为双亲委派机制的存在，类加载器在加载类时无法向下委派加载。用户自定义的类使用的类加载器是`SystemClassLoader`。当被hook的类需要调用检测方法时，如果该hook类是由`BootstrapClassLoader`加载的，则无法成功调用该检测方法。官方文档也有说明：
> 当去 hook 像 `java.io.File` 这样由 `BootstrapClassLoader` 加载的类的时候，无法从该类调用非 `BootstrapClassLoader` 加载的类中的接口，所以 `agent.jar` 会先将自己添加到 `BootstrapClassLoader` 的ClassPath下，这样 hook 由 `BootstrapClassLoader` 加载的类的时候就能够成功调用到 `agent.jar` 中的检测入口。

堆栈信息：
```plaintext
addJarToBootstrap:40, JarFileHelper (com.baidu.openrasp)
init:92, Agent (com.baidu.openrasp)
premain:71, Agent (com.baidu.openrasp)
```

#### 装载engine
使用`moduleClassLoader`（`ExtClassLoader`）装载`rasp-engine.jar`，并将`EngineBoot`实例化，赋值给`module`变量，为后续启动rasp模块做准备。
```plaintext
:54, ModuleContainer (com.baidu.openrasp)
```