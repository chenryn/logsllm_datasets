For the next part of our evaluation, we tested a se-
lection of more complicated queries from sections 4.1,
4.2.1, and 4.4. We ran the queries as they were compiled
to Bro code, and after they were optimized by hand by
eliminating unnecessary copying and event handlers. Be-
cause a Bro implementation of side-jacking was already
available for query 4.1 [26], we used that as a basis for
Table 4: Execution times for different queries, with and
without hand-optimization
Query
4.1
4.2.1
4.4.
15.64 (σ = 0.081) 15.48 (σ = 0.067)
8.81 (σ = 0.085) 8.72 (σ = 0.021)
2.77 (σ = 0.027) 2.75 (σ = 0.019)
1.1%
0.96%
0.79%
Base Time (s)
Optimized (s)
Speed-up (%)
comparison. We optimized the other two queries our-
selves. Table 4 shows the results averaged across 30 runs
for each measurement. Much like the ﬁrst experiment,
the overhead added by extra copying and event handlers
only has a minor impact on overall performance, increas-
ing running time by about 1%. Though the Bro code gen-
erator could beneﬁt from some optimizations, in its cur-
rent form it generates code that is almost exactly equiva-
lent to hand-written code for these real-world scenarios.
6.2 Other Optimizations
The previous section discussed optimizations in the code
generator related to event and data handling. There are
also opportunities for optimization at the relational alge-
bra level before any code is generated, and in the analy-
sis logic. Prior work on query optimization for databases
[11, 15, 25] is directly applicable here because it oper-
ates on relational algebra that is almost exactly the same
as the Chimera Core language. One common trick is to
break up selection operators into sub-expressions and put
the cheapest one with the greatest data reduction ﬁrst.
Similarly, selection operators that occur after joins can
have sub-expressions that do not depend on both join
sides pushed before the join, thus reducing the number
of items in the join table. Finally, any nodes that dupli-
cate one another, including parsers, can be merged to-
gether. We plan to incorporate all of these optimizations
in future versions of the Chimera compiler.
Another area of optimization that we plan to explore
is improving the actual analysis logic. For example, an
ordered EXCLUSIVE RIGHT JOIN is effectively an ex-
istence check; there is no need to actually store left tu-
ples in the join table because they will never be emitted
as output. Going further down this route, an existence
check can be approximated efﬁciently using a Bloom ﬁl-
ter. For analytics where complete precision is not neces-
sary, an exclusive right join could be implemented with
a windowed bloom ﬁlter.
Finally, queries in the Chimera language lend them-
selves well to parallel processing using a map-reduce
model. Tuples can be mapped to a processing node us-
ing their join or group key right before each join or group
operator in the data-ﬂow graph. Each node will then exe-
cute the operator to perform the reduction. Global aggre-
gates can be computed by extending aggregate functions
to have a merge routine that combines partial answers as
discussed in section 3.4.3 (though not all aggregates can
be merged efﬁciently). We plan to extend the Chimera
compiler in the future to automatically produce code that
can run in a parallel environment.
7 Related Work
There has been a lot of prior research on streaming
database systems. STREAM [3, 19] and Aurora [1]
were pioneers in this area. Following initial work, oth-
ers have developed improved techniques for windowed
query evaluation [17] and load shedding [24]. An effort
has also been make to create a standard for streaming
SQL [14] that accounts for semantic differences between
various systems. Others have focused on window speci-
ﬁcation semantics for streaming queries [6, 20].
Streaming database research is useful and serves as a
basis for ideas in this paper, but Chimera goes beyond
what has been done in prior work.
It is the ﬁrst lan-
guage designed to translate into external intrusion de-
tection frameworks like Bro. Chimera also adds two
new capabilities that are very important for handling net-
work trafﬁc. The ﬁrst is support for structured data types,
which includes the new SPLIT operator and apply func-
tions. The second major contribution is the addition of
dynamic window conditions using the UNTIL trigger for
aggregates, and the WINDOW condition for joins. This
gives the query writer full control over window bound-
aries, allowing for immediate response after a detection
threshold has been reached, rather than having to wait
until the window expires as with traditional ﬁxed win-
dow speciﬁcations.
One project that is related to Chimera is Gigascope
[7]. Gigascope is a platform for performing network traf-
ﬁc analysis that uses an SQL query language. However,
Gigascope is different from Chimera in a few key ways.
First, it is a vertically integrated query language and plat-
form for performing analysis. Its language is therefore
tied to the implementation and has not been adapted to
target other platforms. Chimera, on the other hand, is
designed to be implementation-agnostic and serve as a
general-purpose language for network processing. Fur-
thermore, Gigascope’s SQL query language has the same
limitations as traditional streaming database systems. As
far as we are aware, it only supports ﬂat schemata, which
prevents it from properly handling structured data. It also
uses standard window speciﬁcations instead of dynamic
window boundaries, which limits ﬂexibility for join and
aggregate queries.
IBM’s Stream Processing Language (SPL) [13] is also
related to Chimera. Unlike Chimera, SPL is not entirely
declarative.
Its logic clause uses procedural code and
one must specify data ﬂow paths to deﬁne analysis logic.
SPL does support dynamic window boundaries using a
punct type of tumbling window in which boundaries are
set by messages from upstream operators. These opera-
tors can use arbitrarily complex logic to generate punct
messages, which in theory provides the same power as
dynamic window conditions in Chimera, but in a less
concise manner. We view SPL as largely analogous to
the Bro event language, except that it is data-ﬂow-based
rather than event-based. It is a powerful lower-level lan-
guage that provides greater control, but suffers from the
same problems of being less concise and more compli-
cated than Chimera. We imagine that it would be possi-
ble to adapt the Chimera compiler to generate code for
SPL in the future.
There are a number of procedural
language ex-
tensions for traditional relational databases, including
PL/SQL[10], Transact-SQL [9], and PL/pgSQL [18].
These procedural languages offer powerful constructs
like conditional statements and looping. PL/SQL also
offers array data types, and arrays can be simulated with
delimiter-separated strings. These languages do not di-
rectly offer apply functions or SPLIT operations, but the
same result can be achieved (albeit not as elegantly) with
nested queries. While it is possible to express Chimera
queries and data types in these procedural programming
languages (they are Turing complete), we believe that the
Chimera language is more intuitive for processing struc-
tured network protocol trafﬁc. Chimera also goes further
by running in a streaming environment and translating to
the Bro event language.
The idea of having a high-level language that trans-
lates into low-level policy has been applied previously
to other areas. One particularly relevant example is for
router and ﬁrewall conﬁgurations [4, 12]. Low-level ﬁre-
wall policies precisely describe the mechanism for ﬁlter-
ing trafﬁc in a level of detail that goes beyond the high-
level goals behind them. This makes ﬁrewall conﬁgura-
tion policies difﬁcult to read and error-prone. Previous
work by Guttman et al. and Bartal et al. distills out the
underlying security goals into a high-level language, and
then translates that into low-level policies, thus eliminat-
ing the need for administrators to write those low-level
policies. Chimera is applying the same idea of separat-
ing policy from mechanism, but for a much different dif-
ferent domain.
8 Conclusion
In this paper, we introduced Chimera, a new query
language for processing network trafﬁc. Chimera ef-
fectively separates policy from mechanism, leading to
concise queries that are independent of implementation.
Chimera is based on a streaming SQL syntax, which it
extends by adding structured data, ﬁrst-class functions,
and dynamic window boundaries. These additional fea-
tures allow Chimera to better handle complex network
trafﬁc analysis tasks.
This paper looks at example scenarios to motivate
Chimera’s design and demonstrate its utility. Two of the
examples – side-jacking and DNS feature extraction –
are taken from prior work. Writing Chimera queries for
these examples showed how they are more compact than
lower-level Bro event code and more precise than human
language descriptions. The other two scenarios – detect-
ing DNS tunnels and identifying spam/phishing e-mail –
demonstrated some of Chimera’s more advanced capa-
bilities and showed how it can be used to express com-
plex analysis logic with concise delcarative queries.
Finally, we presented the design and implementation
of a compiler that translates Chimera queries into the
Bro event language. This compiler works in two phases
by ﬁrst transforming an abstract syntax tree into a data
ﬂow representation, and then translating that representa-
tion into Bro event code. We tested the compiler’s out-
put against hand-optimized code for several queries and
showed that it is only 3% slower in the worst case. This
experiment highlighted opportunities for optimization by
eliminating unnecessary copying and event handlers, but
also showed that the Compiler generates code that is al-
most as efﬁcient as hand-written code in its current form.
In the future, we hope to implement these optimizations
and also incorporate optimizations at the relational al-
gebra level so that Chimera obviates the need to write
low-level code for network analysis logic.
References
[1] ABADI, D. J., CARNEY, D., Ã ˘GETINTEMEL, U.,
CHERNIACK, M., CONVEY, C., LEE, S., STONE-
BRAKER, M., TATBUL, N., AND ZDONIK, S. Au-
rora: A new model and architecture for data stream
management. The VLDB Journal 12, 2 (2003).
[2] AHO, A. V., SETHI, R., AND ULLMAN, J. D.
Compilers: Principles, Techniques, and Tools.
1986.
[3] ARASU, A., BABU, S., AND WIDOM, J. CQL: A
language for continuous queries over streams and
relations. Lecture Notes in Computer Science 2921,
123–124 (2004).
[4] BARTAL, Y., MAYER, A., NISSIM, K., AND
WOOL, A. Firmato: A novel ﬁrewall management
toolkit. In IEEE Symposium on Security and Pri-
vacy (1999).
[5] BILGE, L., KIRDA, E., KRUEGEL, C., AND BAL-
DUZZI, M. Exposure: Finding malicious domains
using passive dns analysis.
tributed System Security Symposium (2011).
In Network and Dis-
[18] MONJIAN, B. PostgreSQL: Introduction and Con-
cepts. Addison-Wesley, Boston, MA, 2000.
[6] BOTAN,
I., DERAKHSHAN, R., DINDAR, N.,
HAAS, L., MILLER, R. J., AND TATBUL, N. SE-
CRET: A model for analysis of the execution se-
mantics of stream processing systems. Proceedings
of the VLDB Endowment 3, 1–2 (2010).
[7] CRANOR, C., JOHNSON, T., SPATASCHEK, O.,
AND SHKAPENYUK, V. Gigascope: A stream
database for network applications.
In 2003 ACM
SIGMOD International Conference on Manage-
ment of Data (2003).
[19] MOTWANI, R., WIDOM, J., ARASU, A., BAB-
COCK, B., BABU, S., DATAR, M., MANKU, G.,
OLSTON, C., ROSENSTEIN, J., AND VARMA, R.
Query processing, resource management, and ap-
proximation in a data stream management system.
Technical Report 2002-41, Stanford InfoLab, 2002.
[20] PATROUMPAS, K., AND SELLIS, T. Maintaining
consistent results of continuous queries under di-
verse window speciﬁcations. Information Systsems
36, 1 (2011), 42–61.
[8] CROCKFORD, D. The application/json media type
for javascript object notation (json). RFC 4627, In-
ternet Engineering Task Force, July 2006.
[21] PAXSON, V. Bro: a system for detecting network
intruders in real-time. Computer Networks 31, 23–
24 (1999), 2435–2463.
[22] RILEY, R. D., ALI, N. M., AL-SENAIDI, K. S.,
Empowering users
In ACM SIGCOMM
AND AL-KUWARI, A. L.
against sidejacking attacks.
2010 conference (2010).
[23] ROESCH, M. Snort – lightweight intrusion detec-
tion for networks. In USENIX LISA â ˘A ´Z99 Confer-
ence (1999).
[24] TATBUL, N., AND ZDONIK, S. Window-aware
load shedding for aggregation queries over data
streams. In 32nd International Conference on Very
Large Data Bases (2009).
[25] V. MARKL, G. M. LOHMAN, V. R. Leo: An auto-
nomic query optimizer for db2. IBM Systems Jour-
nal 42, 1 (2003).
[26] VALLENTIN, M.
Taming
the
sheep:
Detecting
bro.
http://matthias.vallentin.net/blog/2010/10/taming-
the-sheep-detecting-sidejacking-with-bro/, 2010.
sidejacking
with
[9] DARNOVSKY, M., AND BOWMAN, G. Transact-
sql user’s guide. Tech. Rep. 3231-21, Sybase, Inc.,
1987.
[10] FEUERSTEIN, S. Oracle PL/SQL Programming,
third ed. O’Reilly & Associates, Sebastapol, CA,
2002.
[11] GRAEFE, G. The volcano optimizer generator: Ex-
In ICDE (1993),
tensibility and efﬁcient search.
pp. 209–218.
[12] GUTTMAN, J. Filtering postures: Local enforce-
In IEEE Symposium on
ment for global policies.
Security and Privacy (1997).
[13] HIRZEL, M., ANDRADE, H., GEDIK, B., KU-
MAR, V., LOSA, G., MENDELL, M., NASGAARD,
H., SOULÃL’, R., AND WU, K.-L. Streams pro-
cessing language (spl). Tech. Rep. RC24897, IBM,
2009.
[14] JAIN, N., MISHRA, S., SRINIVASAN, A.,
GEHRKE, J., WIDOM, J., BALAKRISHNAN, H.,
Ã ˘GETINTEMEL, U., CHERNIACK, M., TIB-
BETTS, R., AND ZDONIK, S. Towards a streaming
SQL standard. Proceedings of the VLDB Endow-
ment 1, 2 (2008).
[15] JARKE, M., AND KOCH, J. Query optimization
in database systems. ACM Computing Surveys, 2
(1984), 111–152.
[16] JOHNSON, S. C. Yacc: Yet another compiler-
compiler. Tech. Rep. 32, Bell Laboratories, 1975.
[17] LI, J., MAIER, D., TUFTE, K., PAPADIMOS, V.,
AND TUCKER, P. A. No pane, no gain: Efﬁcient
evaluation of sliding-window aggregates over data
streams. Information Systsems 34, 1 (2005).