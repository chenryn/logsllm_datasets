### If You Give A Mouse a Microchip

**Overview:**
- **Payload Execution:** The microchipped mouse can execute a payload, potentially allowing for cheating in high-stakes video game tournaments.
- **Presenters:** Mark Williams (skud) and Rob Stanley (Sky)

**Historical Context:**
- **1958:** The creation of the first video game.
- **1972:** The first recorded, sponsored video game tournament.
  - **Spacewar!** (built in the 1960s)
  - **Rolling Stone** sponsored a Spacewar! Olympics in 1972.

**Esports:**
- **The International 2016:**
  - Teams from around the world
  - $20 million prize pool ($19 million crowd-funded)
  - 17,000 people at the venue
  - Over 20 million online viewers

**Technical Requirements for Esports Events:**
- Massive temporary networks
- Hot-seat computers
- Internet connectivity
- Support for player-owned peripherals

**Security Challenges at Esports Events:**
- Typical security measures:
  - Restricted internet access
  - Player accounts without administrative privileges
  - Pre-installed drivers and configurations
  - Disabled USB mass storage
  - Extra USB ports disabled
- However, players can still plug in their own mice and keyboards.

**Potential Attack Vector:**
- **Device Used:** A gaming mouse with an overpowered microcontroller (e.g., STMicro STM32F103CB)
  - ARM Cortex M3 microprocessor
  - 128KB Flash Memory
  - Multiple buttons
  - RGB LEDs
  - LCD screen with user-customizable bitmaps

**Attack Steps:**
1. Connect to the microcontroller in the mouse.
2. Insert code to make the mouse act as a USB keyboard.
3. Send keystrokes to execute a payload on the target computer.
4. "Unplug" the keyboard app and run the original mouse code.
5. Profit through responsible disclosure.

**Implementation:**
- **Hardware Tools:**
  - Soldering iron
  - Wires
  - STMicro STM32 Discovery Development board
- **Software Tools:**
  - STM32 ST-Link Utility
  - System Workbench for STM32
  - STM32CubeMX
  - objdump (for ARM)

**Detailed Steps:**
1. **Open the Mouse:**
   - Find documentation
   - Connect to the chip to program it
   - Use the ST-Link interface with specific pins (PA13, PA14, GND)
2. **Flash the Processor:**
   - Use the STM32 Discovery ST-Link interface
   - Disconnect CN2 jumpers to enable external programming
   - Apply 3 volts to the boot0 pin during power-on to enter programmable mode
3. **Extract and Modify the Binary:**
   - Extract the original mouse binary
   - Build an application that registers as a keyboard
   - Find empty space in the mouseâ€™s binary and insert the application
4. **Build the Payload:**
   - Use objdump to analyze the binary
   - Identify available memory space
   - Place the application at a custom location (e.g., 0x08010a00)
   - Update the vector table to point to the new entry point
5. **Inject the Code:**
   - Patch the vector table
   - Insert the new code into the mouse's binary
   - Ensure the mouse returns to its original functionality after executing the payload

**Sneaky Assembly Usage:**
- Write assembly code to manage the program flow
- Store data in assembly to handle the transition between the injected code and the original mouse code

**Defending Against Such Attacks:**
- Only allow 'normal' behavior from HID peripherals
- Sign and verify drivers and flash of every peripheral
- Whitelist EXEs
- Force the use of USB to PS2 adapters
- Provide trusted hardware

**References and Helpful Links:**
- Source Code & Examples: [Bitbucket](https://bitbucket.org/mdhomebrew/)
- ARM Application Notes: [ARM Info Center](http://infocenter.arm.com/help/index.jsp)
- ST-Link: [STMicroelectronics](http://www.st.com/en/embedded-software/stsw-link004.html)
- OpenSTM IDE: [OpenSTM32](http://www.openstm32.org/)
- STM32CubeMX: [STMicroelectronics](http://www.st.com/en/development-tools/stm32cubemx.html)

**Questions?**

This revised version aims to provide a clear, professional, and well-structured overview of the topic, making it easier to understand the technical details and the potential security implications.