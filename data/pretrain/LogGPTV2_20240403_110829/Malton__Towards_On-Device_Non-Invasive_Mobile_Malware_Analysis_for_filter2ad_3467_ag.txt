work is supported in part by the Hong Kong GRF (No.
PolyU 5389/13E, 152279/16E), Hong Kong RGC Project
(No. CityU C1008-16G), HKPolyU Research Grants (No.
G-UA3X, G-YBJX), Shenzhen City Science and Technol-
ogy R&D Fund (No. JCYJ20150630115257892), Nation-
al Natural Science Foundation of China (No. 61402080,
61602371), and the US National Science Foundation (NS-
F) under Grant no. 0954096 and 1314823. Any opinions,
ﬁndings, and conclusions or recommendations expressed
in this material are those of the authors and do not nec-
essarily reﬂect the views of NSF.
References
[1] Cloc: Count lines of code. https://goo.gl/Buhrk9.
[2] Dalvik bytecode. https://goo.gl/pSf6as.
[3] The history of xxshenqi and the future of sms
phishing. https://goo.gl/6Ds8NF.
[4] logcat command-line tool. https://goo.gl/Y9aRYM.
[5] ltrace. https://goo.gl/rtSTXM.
[6] Strace. https://goo.gl/twBJ1e.
[7] Sysfs. https://goo.gl/mQx8J2.
[8] Cf-bench. https://goo.gl/9jWW1U, 2016.
[9] Zjdroid. https://goo.gl/Xjg3WL, 2016.
[10] A. Abraham, R. Andriatsimandeﬁtra, A. Brunelat,
J. Lalande, and V. Tong. Grodddroid: a gorilla
for triggering malicious behaviors. In Proc. MAL-
WARE, 2015.
[11] V. Afonso, A. dBianchi, Y. Fratantonio, A. Doup´e,
M. Polino, P. de Geus, C. Kruegel, and G. Vigna.
Going native: Using a large-scale analysis of an-
droid apps to create a practical native-code sand-
boxing policy. In NDSS, 2016.
[12] V. Afonso, M. de Amorim, A. Gr´egio, G. Junquera,
and P. de Geus. Identifying android malware using
dynamically obtained features. Journal of Comput-
er Virology and Hacking Techniques, 11(1), 2015.
[13] S. Alam, Z. Qu, R. Riley, Y. Chen, and V. Rastogi.
Droidnative: Semantic-based detection of android
native code malware. Computers & Security, 65,
2017.
[14] M. Alzaylaee, S. Yerima, and S. Sezer. Emulator vs
real phone: Android malware detection using ma-
chine learning. In Proc. ACM IWSPA, 2017.
[15] S. Anand, M. Naik, M. Harrold, and H. Yang. Au-
In
tomated concolic testing of smartphone apps.
Proc. FSE, 2012.
[16] S. Anand, C. P˘as˘areanu, and W. Visser. Jpfcse: A
symbolic execution extension to java pathﬁnder. In
Proc. TACAS, 2007.
USENIX Association
26th USENIX Security Symposium    303
[17] R. Andriatsimandeﬁtra and V. Tong. Capturing an-
droid malware behaviour using system ﬂow graph.
In Proc. NSS, 2014.
[29] M. Conti, V. Nguyen, and B. Crispo. Crepe:
Context-related policy enforcement for android. In
Proc. ICIS, 2010.
[18] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon,
K. Rieck, and C. Siemens. Drebin: Effective and
explainable detection of android malware in your
pocket. In Proc. NDSS, 2014.
[19] E. Athanasopoulos, V. Kemerlis, G. Portokalidis,
and A. Keromytis. Nacldroid: Native code isolation
for android applications. In Proc. ESORICS, 2016.
[20] M. Backes, S. Bugiel, C. Hammer, O. Schranz, and
P. von Styp-Rekowsky. Boxify: Full-ﬂedged app
sandboxing for stock android.
In Proc. USENIX
Security, 2015.
[21] M. Backes, S. Bugiel, O. Schranz, P. von Styp-
Rekowsky, and S. Weisgerber. Artist: The android
runtime instrumentation and security toolkit. arXiv
preprint arXiv:1607.06619, 2016.
[22] M. Backes, S. Gerling, C. Hammer, M. Maffei, and
P. von Styp-Rekowsky. Appguardcenforcing user
requirements on android apps.
In Proc. TACAS,
2013.
[23] P. Berthome, T. Fecherolle, N. Guilloteau, and
J. Lalande. Repackaging android applications for
auditing access to private data.
In Proc. ARES,
2012.
[24] A. Bianchi, Y. Fratantonio, C. Kruegel, and G. Vi-
gna. Njas: Sandboxing unmodiﬁed applications in
non-rooted devices running stock android. In Proc.
SPSM, 2015.
[25] C. Cadar, D. Dunbar, and D. Engler. Klee: Unas-
sisted and automatic generation of high-coverage
tests for complex systems programs. In Proc. OS-
DI, 2008.
[26] S. Cha, T. Avgerinos, A. Rebert, and D. Brumley.
Unleashing mayhem on binary code. In Proc. IEEE
SP, 2012.
[30] V. Costamagna and C. Zheng. Artdroid: A virtual-
method hooking framework on android art runtime.
In Proc. ESSoS Workshop IMPS, 2016.
[31] S. Dai, T. Wei, and W. Zou. Droidlogger: Reveal
suspicious behavior of android applications via in-
strumentation. In Proc. ICCCT, 2012.
[32] B. Davis, B. Sanders, A. Khodaverdian, and
H. Chen. I-arm-droid: A rewriting framework for
in-app reference monitors for android applications.
Mobile Security Technologies, 2012.
[33] L. De Moura and N. Bjørner. Z3: An efﬁcient smt
solver. In Proc. TACAS, 2008.
[34] A. Desnos and P. Lantz. Droidbox: An android
application sandbox for dynamic analysis. http-
s://goo.gl/iWYL9B, 2014.
[35] G. Dini, F. Martinelli, A. Saracino, and D. Sgan-
durra. Madam: a multi-level anomaly detector for
android malware. In Proc. MMM-ACNS, 2012.
[36] T. Dong and M. Zhang. Five ways android malware
is becoming more resilient. https://goo.gl/7ZPWnJ,
2016.
[37] D. Earl and B. VonHoldt. Structure harvester: a
website and program for visualizing structure out-
put and implementing the evanno method. Conser-
vation genetics resources, 4(2), 2012.
[38] W. Enck, P. Gilbert, B. Chun, L. Cox, J. Jung, P. M-
cDaniel, and A. Sheth. Taintdroid: An information-
ﬂow tracking system for realtime privacy monitor-
ing on smartphones. In Proc. USENIX OSDI, 2010.
[39] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B. Chun,
L. Cox, J. Jung, P. McDaniel, and A. Sheth. Taint-
droid: an information-ﬂow tracking system for re-
altime privacy monitoring on smartphones. ACM
Transactions on Computer Systems, 32(2), 2014.
[27] T. Chen, X. Zhang, S. Guo, H. Li, and Y. Wu. State
of the art: Dynamic symbolic execution for auto-
mated test generation. Future Generation Comput-
er Systems, 29(7), 2013.
[40] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda,
C. Kruegel, and G. Vigna. Triggerscope: Towards
detecting logic bombs in android applications. In
Proc. IEEE SP, 2016.
[28] T. Chen, X. Zhang, X. Ji, C. Zhu, Y. Bai, and Y. Wu.
Test generation for embedded executables via con-
colic execution in a real environment. IEEE Trans-
actions on Reliability, 64(1), 2015.
[41] S. Hao, B. Liu, S. Nath, W. Halfond, and R. Govin-
dan. Puma: Programmable ui-automation for large-
scale dynamic analysis of mobile apps.
In Proc.
MobiSys, 2014.
304    26th USENIX Security Symposium
USENIX Association
[42] E. Hughes.
Java-basic datatypes.
s://goo.gl/3R3BM9.
http-
security-enhanced framework for android. In Proc.
TrustCom, 2014.
[43] C. Jeon, W. Kim, B. Kim, and Y. Cho. Enhanc-
ing security enforcement on unmodiﬁed android. In
Proc. SAC, 2013.
[44] Y. Jing, Z. Zhao, G. Ahn, and H. Hu. Morpheus:
automatically generating heuristics to detect an-
droid emulators. In Proc. ACSAC, 2014.
[45] M. Kang, S. McCamant, P. Poosankam, and
D. Song. Dta++: Dynamic taint analysis with tar-
geted control-ﬂow propagation.
In Proc. NDSS,
2011.
[46] M. Karami, M. Elsabagh, P. Najaﬁborazjani, and
A. Stavrou. Behavioral analysis of android appli-
cations using automated instrumentation. In Proc.
SERE-C, 2013.
[47] D. Kirat and G. Vigna. Malgene: Automatic ex-
traction of malware analysis evasion signature. In
Proc. ACM CCS, 2015.
[48] Y. Lin, Y. Lai, C. Chen, and H. Tsai. Identifying an-
droid malicious repackaged applications by thread-
grained system call sequences. Computers & Secu-
rity, 39, 2013.
[49] M. Lindorfer, M. Neugschwandtner, and C. Platzer.
Marvin: Efﬁcient and comprehensive mobile app
classiﬁcation through static and dynamic analysis.
In Proc. COMPSAC, 2015.
[50] M. Lindorfer, M. Neugschwandtner, L. Weich-
selbaum, Y. Fratantonio, V. Van Der Veen, and
C. Platzer. Andrubis–1,000,000 apps later: A view
on current android malware behaviors.
In Proc.
Workshop BADGERS, 2014.
[51] K. Lu, Z. Li, V. P. Kemerlis, Z. Wu, L. Lu,
C. Zheng, Z. Qian, W. Lee, and G. Jiang. Checking
more and alerting less: Detecting privacy leakages
via enhanced data-ﬂow analysis and peer voting. In
Proc. NDSS.
[52] S. Malek, N. Esfahani, T. Kacem, R. Mahmood,
N. Mirzaei, and A. Stavrou. A framework for au-
tomated security testing of android applications on
the cloud. In Proc. SERE-C, 2012.
[53] N. Nethercote and J. Seward. Valgrind: a frame-
work for heavyweight dynamic binary instrumen-
tation. In Proc. ACM PLDI, 2007.
[54] X. Pan, Y. Zhongyang, Z. Xin, B. Mao, and
H. Huang. Defensor: Lightweight and efﬁcient
[55] F. Peng, Z. Deng, X. Zhang, D. Xu, Z. Lin, and
Z. Su. X-force: Force-executing binary programs
for security applications. In Proc. USENIX Securi-
ty, 2014.
[56] T. Petsas, G. Voyatzis, E. Athanasopoulos, M. Poly-
chronakis, and S. Ioannidis. Rage against the virtu-
al machine: hindering dynamic analysis of android
malware. In Proc. ACM EuroSys, 2014.
[57] QEMU. https://goo.gl/EUgpkB.
[58] C. Qian, X. Luo, Y. Le, and G. Gu. Vulhunter: To-
ward discovering vulnerabilities in android applica-
tions. IEEE Micro, 35(1), 2015.
[59] C. Qian, X. Luo, Y. Shao, and A. Chan. On tracking
information ﬂows through JNI in android applica-
tions. In Proc. IEEE/IFIP DSN, 2014.
[60] S. Rasthofer, S. Arzt, E. Lovat, and E. Bod-
den. Droidforce: enforcing complex, data-centric,
system-wide policies in android.
In Proc. ARES,
2014.
[61] S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bod-
den. Harvesting runtime values in android applica-
tions that feature anti-analysis techniques. In Proc.
NDSS, 2016.
[62] V. Rastogi, Y. Chen, and W. Enck. Appsplay-
ground: automatic security analysis of smartphone
applications. In Proc. CODASPY, 2013.
[63] A. Sadeghi, H. Bagheri, J. Garcia, and s. Malek. A
taxonomy and qualitative comparison of program
analysis techniques for security assessment of an-
droid software. IEEE Transactions on Software En-
gineering, 43(6), 2016.
[64] S. Sakamoto, K. Okuda, R. Nakatsuka, and T. Ya-
mauchi. Droidtrack: tracking and visualizing infor-
mation diffusion for preventing information leak-
age on android. Journal of Internet Services and
Information Security, 4(2), 2014.
[65] D. Schreckling,
J. K¨ostler,
and M. Schaff.
Kynoid:
real-time enforcement of ﬁne-grained,
user-deﬁned, and data-centric security policies for
android.
Information Security Technical Report,
17(3), 2013.
[66] J. Sch¨utte, R. Fedler, and D. Titze. Condroid: Tar-
geted dynamic analysis of android applications. In
Proc. AINA, 2015.
USENIX Association
26th USENIX Security Symposium    305
[67] J. Sch¨utte, D. Titze, and J. De Fuentes. App-
caulk: Data leak prevention by injecting targeted
taint tracking into android apps. In Proc. TrustCom,
2014.
[68] M. Spreitzenbarth,
F. Freiling,
F. Echtler,
T. Schreck, and J. Hoffmann. Mobile-sandbox:
having a deeper look into android applications. In
Proc. SAC, 2013.
[69] M. Sun, J. Lui, and Y. Zhou. Blender: Self-
randomizing address space layout for android apps.
In Proc. RAID, 2016.
[70] M. Sun and G. Tan. Nativeguard: Protecting an-
droid applications from third-party native libraries.
In Proc. ACM WiSec, 2014.
[71] M. Sun, T. Wei, and J. Lui. Taintart: A prac-
tical multi-level information-ﬂow tracking system
for android runtime. In Proc. ACM CCS, 2016.
[72] K. Tam, A. Feizollah, N. Anuar, R. Salleh, and
L. Cavallaro. The evolution of android malware
and android analysis techniques. ACM Computing
Surveys, 49(4), 2017.
[73] K. Tam, S. Khan, A. Fattori, and L. Cavallaro. Cop-
perdroid: Automatic reconstruction of android mal-
ware behaviors. In Proc. NDSS, 2015.
[74] T. Vidas and N. Christin. Evading android runtime
analysis via sandbox detection. In Proc. ACM ASI-
ACCS, 2014.
[75] X. Wang, K. Sun, Y. Wang, and J. Jing. Deep-
droid: Dynamically enforcing enterprise policy on
android devices. In Proc. NDSS, 2015.
[76] X. Wei, L. Gomez, I. Neamtiu, and M. Faloutsos.
Proﬁledroid: multi-layer proﬁling of android appli-
cations. In Proc. MobiCom, 2012.
[77] Z. Wei and D. Lie. Lazytainter: Memory-efﬁcient
taint tracking in managed runtimes. In Proc. SPSM,
2014.
[78] W. Wu and S. Hung. Droiddolphin: a dynamic an-
droid malware detection framework using big data
and machine learning. In Proc. RACS, 2014.
[79] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu. Effec-
tive real-time android application auditing. In Proc.
IEEE SP, 2015.
[80] M. Xu, C. Song, Y. Ji, M. Shih, K. Lu, C. Zheng,
R. Duan, Y. Jang, B. Lee, C. Qian, S. Lee, and
T. Kim. Toward engineering a secure android e-
cosystem: A survey of existing techniques. ACM
Computing Surveys, 49(2), 2016.
[81] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium: Prac-
tical policy enforcement for android applications.
In Proc. USENIX Security, 2012.
[82] L. Xue, X. Luo, L. Yu, S. Wang, and D. Wu. Adap-
In Proc. ICSE,
tive unpacking of android apps.
2017.
[83] L. Yan and H. Yin. Droidscope: Seamlessly re-
constructing OS and Dalvik semantic views for dy-
namic Android malware analysis. In Proc. USENIX
Security, 2012.
[84] C. Yang, G. Yang, A. Gehani, V. Yegneswaran,
D. Tariq, and G. Gu. Using provenance patterns
to vet sensitive behaviors in android apps. In Proc.
SecureComm, 2015.
[85] W. Yang, Y. Zhang, J. Li, J. Shu, B. Li, W. Hu, and
D. Gu. Appspear: Bytecode decrypting and dex
reassembling for packed android malware. In Proc.
RAID. 2015.
[86] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and
X. S. Wang. Appintent: Analyzing sensitive data
transmission in android for privacy leakage detec-
tion. In Proc. ACM CCS, 2013.
[87] M. Zhang and H. Yin. Efﬁcient, context-aware pri-
vacy leakage conﬁnement for android application-
s without ﬁrmware modding.
In Proc. ASIACCS,
2014.
[88] Y. Zhang, X. Luo, and H. Yin. Dexhunter: toward
extracting hidden code from packed android appli-
cations. In Proc. ESORICS. 2015.
[89] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. N-
ing, X. S. Wang, and B. Zang. Vetting undesirable
behaviors in android apps with permission use anal-
ysis. In Proc. ACM CCS, 2013.
[90] S. Zhao, X. Li, G. Xu, L. Zhang, and Z. Feng. At-
tack tree based android malware detection with hy-
brid analysis. In Proc. TrustCom, 2014.
[91] M. Zheng, M. Sun, and J. Lui. Droidtrace: a ptrace
based android dynamic analysis system with for-
ward execution capability. In Proc. IEEE IWCMC,
2014.
[92] Y. Zhou and X. Jiang. Dissecting android malware:
Characterization and evolution. In Proc. IEEE SP,
2012.
306    26th USENIX Security Symposium
USENIX Association