E.g. if I want to de-duplicate tweets your friends are retweeting:
    MATCH (friend) -[:retweeted]-> (tweet)
    RETURN DISTINCT tweet
But still return who the first friend was to retweet that tweet (just like
Twitter does).
This won't work:
    MATCH (friend) -[retweet:retweeted]-> (tweet)
    RETURN DISTINCT tweet, friend, retweet.time AS time
    ORDER BY time
Because `DISTINCT` looks at the entire row, and every row will have a
different `tweet` \+ `friend` combination. The result: you get duplicated
tweets.
I can achieve today with this workaround involving aggregating and slicing:
    MATCH (friend) -[retweet:retweeted]-> (tweet)
    WITH tweet, friend, retweet.time AS time
    ORDER BY time
    RETURN tweet, HEAD(COLLECT(friend)) AS friend
That's pretty tedious and non-obvious. It'd be nice if I could simply specify
which variables (columns) should be looked at for the `DISTINCT` instead of
going through those hoops.
Strawman proposal: simply specify `DISTINCT` _after_ variable names, to mean
that only those variables should be de-duplicated.
    MATCH (friend) -[retweet:retweeted]-> (tweet)
    RETURN tweet DISTINCT, friend
    ORDER BY retweet.time
Related: issue #1322. This is a great example: the suggested answer in that SO
post actually won't work. Adding the `time` to the `RETURN DISTINCT` (so that
you can `ORDER BY` it) will mean de-duplication no longer happens. Hopefully a
fix here will fix that case too.