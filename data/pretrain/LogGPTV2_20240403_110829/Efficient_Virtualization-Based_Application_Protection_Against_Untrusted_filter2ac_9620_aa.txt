title:Efficient Virtualization-Based Application Protection Against Untrusted
Operating System
author:Yueqiang Cheng and
Xuhua Ding and
Robert H. Deng
Efﬁcient Virtualization-Based Application Protection
Against Untrusted Operating System
Xuhua Ding
Singapore Management
University
80 Stamford Rd
Singapore, 178902
Robert H. Deng
Singapore Management
University
80 Stamford Rd
Singapore, 178902
∗
Yueqiang Cheng
CyLab, Carnegie Mellon
University
4720 Forbes Ave
Pittsburgh, PA, USA
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
Commodity monolithic operating systems are abundant with vul-
nerabilities that lead to rootkit attacks. Once an operating sys-
tem is subverted, the data and execution of user applications are
fully exposed to the adversary, regardless whether they are de-
signed and implemented with security considerations. Existing ap-
plication protection schemes have various drawbacks, such as high
performance overhead, large Trusted Computing Base (TCB), or
hardware modiﬁcation. In this paper, we present the design and
implementation of AppShield, a hypervisor-based approach that
reliably safeguards code, data and execution integrity of a critical
application, in a more efﬁcient way than existing systems. The
protection overhead is localized to the protected application only,
so that unprotected applications and the operating system run with-
out any performance loss. In addition to the performance advan-
tage, AppShield tackles several newly identiﬁed threats in this pa-
per which are not systematically addressed previously. We build a
prototype of AppShield with a tiny hypervisor, and experiment with
AppShield by running several off-the-shelf applications on a Linux
platform. The results testify to AppShield’s low performance costs
in terms of CPU computation, disk I/O and network I/O.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Isolated Execution Environment
General Terms
Security
Keywords
Address Space Isolation, Untrusted OS, Application Protection, Iso-
lated Execution Environment
∗The work was done at Singapore Management University.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore, Singapore.
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714618 .
1
1.
INTRODUCTION
With a superior privilege than user applications, the commod-
ity monolithic operating systems are often regarded as the security
basis of systems. A conundrum facing the end users is that the com-
modity OSes are not always trustworthy as expected. Their enor-
mous code size and broad attack surfaces make them vulnerable to
attacks. Once an OS is subverted, all applications and sensitive data
are at the mercy of the attacker. Moreover, some high-proﬁle end
users and organizations are even concerned about whether the com-
modity operating systems in their use are purposely implemented
with trapdoors to invade their privacy or data secrecy.
To cope with OS level attacks, various mechanisms [23, 22, 28,
3, 6, 34, 31, 5, 29] have been proposed to protect critical applica-
tions without trusting the operating system. self-contained code
Among them, the approaches like Flicker [23], TrustVisor [22]
and Fides [28] are only applicable to self-contained code with pre-
deﬁned inputs and outputs (e.g., inputs are the initial parameters
and outputs are the ﬁnal returns). Those code cannot even make
the basic system calls for dynamic memory allocation or deallo-
cation. Although MiniBox [20] extends the functionality by sup-
porting system calls of the self-contained code, it still has several
limitations, such as lack of multi-thread support and limiting to
sandbox-capable modules.
To protect a full-ﬂedged application, several systems [29, 21, 2,
9, 6, 34, 31, 5, 14, 17] are proposed. Among them, AEGIS [29],
XOM OS [21], Bastion [2] and SecureME [9] require hardware
modiﬁcations, which is apparently impractical for current com-
modity platforms.
Intel’s upcoming Software Guard Extensions
(SGX) [10] technology provides a suite of hardware extension for
software protection which requires signiﬁcant changes on the soft-
ware level, and therefore is not compatible with legacy applica-
tions. Proxos [31] and Terra [14] introduce a dedicated trusted
virtual machine for the protected applications, an approach with
a dramatically expanded TCB size and therefore a weaker security
assurance.
The systems like OverShadow [6], CHAOS [5], SP3 [34], Ink-
Tag [17] aim to protect the whole process without requiring hard-
ware modiﬁcations or a trusted VM. However, they all rely on
the costly encryption/decryption operations and are subject to the
newly identiﬁed attacks (as described in Section 3.2.1) whereby
the kernel manipulates the address mapping, e.g., the malicious OS
could swap two address translation mappings to break the data/code
integrity without directly modifying the data/code of the protected
application. Virtual Ghost [12] prevents the kernel from illicitly ac-
cessing application memory by instrumenting memory access in-
structions and enforcing a complete control ﬂow integrity in the
345kernel, which are usually not applicable for commodity OSes (e.g.,
Windows) in practice.
In this paper, we propose AppShield, a novel system which re-
liably, efﬁciently and transparently protects data secrecy and in-
tegrity of a critical application, as well as its execution integrity,
against OS-level malware attacks (Figure 1). AppShield leverages
the virtualization techniques [19] to isolate the application’s ad-
dress space such that all accesses from the kernel are blocked ex-
cept those explicitly authorized by the application through system
calls. The protected application utilizes the main memory in the
same fashion as in a normal setting, since it can request the ker-
nel to (de)allocate memory buffers. Its memory accesses are in the
native speed without computation-heavy encryption/decryption or
being intercepted. Furthermore, AppShield also achieves perfor-
mance isolation which isolates the performance loss only to the
protected application, keeping those unprotected applications not
affected. Our scheme is complementary to secure I/O (e.g., Driver-
Guard [8] and Trusted Path [35]) and encrypted I/O (e.g., SSL for
network data) schemes such that they can jointly provide a holistic
protection on the application and its I/O data.
We have implemented a prototype of AppShield which consists
of a bare-metal hypervisor with roughly 29K SLOC and a tiny
kernel module of around 2K SLOC. We have experimented the
prototype with several applications (e.g., Apache) and run a suite
of benchmark tests. The experiment results demonstrate that App-
Shield incurs insigniﬁcant performance costs in CPU computation,
disk I/O and network I/O.
Figure 1: Protections for application and its data. Our scheme
is complementary to secure I/O and encrypted I/O schemes.
To summarize, our contributions of this paper are listed below.
• We discover several address mapping attacks which are not
addressed by existing application protection schemes. Through
these attacks, the malicious kernel can tamper with the pro-
tected application’s data secrecy and execution integrity.
• We design AppShield to protect execution integrity, data se-
crecy and integrity of an off-the-shelf application which is
allowed to issue system calls.
• Compared with existing work in the literature, our AppShield
design achieves better performance by avoiding computation-
heavy cryptographic operations and enforcing performance
isolation in the sense that the performance loss is incurred to
the protected application only.
2
• We build a prototype of AppShield and evaluate it with sev-
eral commonly used applications and benchmark tools. The
experiments show that AppShield does not introduce high
overhead to the system.
ORGANIZATION.
In the next section, we deﬁne the problem
by specifying the threat model, our objectives and an overview of
AppShield. In Section 3, we describe the dynamic address space
isolation together with newly identiﬁed threats. The secure ad-
dress space switch and the support of data exchanges are presented
in Section 4 and Section 5, respectively. The implementation and
evaluation of AppShield are reported in Section 6. We discuss the
related work in Section 7 and conclude this paper in Section 8.
2. SYNOPSIS
2.1 The Model
In this work, we defend against kernel-level malware attacks on
a critical application by tampering with the latter’s data and/or ex-
ecution. The adversary can run arbitrary code and launch DMA
operations in the victim platform. Nonetheless the adversary does
not have physical control over the platform. All hardware and pe-
ripheral devices, together with their ﬁrmware, are considered as
trusted. In other words, the platform’s chipset and all peripheral
devices operate as expected, namely, following their speciﬁcations
and not containing Trojan-Horse circuits or microcode that respond
to commands of the adversary. In our model, we trust the a bare-
metal hypervisor in use, which has a tiny code size and limited
number of interfaces. Moreover, we assume our hypervisor inter-
cepts and emulates the System Management Mode (SMM) oper-
ations in order to tackle SMM-based attacks by leveraging SMM
containerization. In fact, Intel has supported such mechanism [19].
Neither side channel attacks nor application availability is in the
scope of our study. We also suppose that no ill-formed inputs can
subvert the control ﬂow of the critical application which can be
achieved by input sanitation and proper code development. It is
orthogonal to our work to enhance code security (e.g., ﬁxing bugs)
of the protected applications.
Our goal is to protect a critical application execution integrity
and data security within the application memory space. The critical
application may use cryptographic techniques to protect its derived
data for disk and network I/O, and may leverage existing secure I/O
path schemes like [8, 35] to protect the raw I/O data for peripheral
devices such as a keyboard and a ﬁngerprint reader.
2.2 Design Principles
In the design of AppShield, we follow the four principles de-
scribed below. Firstly, it should support and protect the applica-
tion’s system calls. The critical application can safely issue system
calls to request the services (e.g., memory allocation) from the op-
erating systems even though the latter is not trusted.
Secondly, no signiﬁcant performance impact should be inﬂicted
by AppShield on the protected application and on the platform
as a whole.
Ideally, the protected application accesses the main
memory in the native speed without being interposed on or going
through an encryption/decryption procedure. Moreover, the mech-
anism should take a limited performance toll on the protection ap-
plication, whereas other unprotected applications and the OS are
not affected. We term this property as performance localization in
this paper.
Thirdly, out of the practicality consideration, we intend to de-
sign AppShield to be compatible and even transparent to legacy
off-the-shelf applications. The requirement of signiﬁcant source
!"#$%&$%'()**+,&-.#/ !"#$%"&'()&&0%1213(4",5%"67-"'(8#"(9%:;#-"'(>?(8#"(@%$A#"B(4-$-= 0--12#345+&6%5."#45+&0%1213()**>C,%+'3(D5%"EC-'#A= F#GG#',$:(D> H-"'A-"%((0%1213(9%:;#-"'3(H-"'(4",5%(3(@%$A#"B= 346code or binary code modiﬁcations hinders the adoption of App-
Shield in practice. Note that the compiling and installation of the
kernel module do not rely on the source code of the operating sys-
tem.
Lastly, as a widely accepted design principle, the TCB of the se-
curity mechanism should be kept small and simple, which ensures
that the risk of subverting the TCB is minimal. Therefore, it ex-
cludes the approach of using a trusted virtual machine where an
operating system is part of the TCB.
2.3 AppShield Overview
The high level idea of AppShield is to dynamically isolate the
target application’s context (registers) and address space from the
rest of the platform (including the kernel) in an exclusive fashion,
while its system calls are securely mediated by the hypervisor to
fend off attacks. For the easiness of presentation, we use CAP in
the rest of the paper to denote the critical application under App-
Shield’s protection.
Figure 2: The architecture of AppShield. The data ﬂows (dot-
ted lines) between the protected Critical APplication (CAP) al-
ways go through the shared buffer and mediated by the shim
code. The control ﬂows (solid lines) between CAP and the OS
are mediated by the Transit Module. The executions of transit
module and the trust shim are protected by the hypervisor.
Figure 2 depicts the architecture of AppShield. It consists of a
bare-metal hypervisor, a transit module in the guest kernel1 space
mediating control ﬂow transitions between CAP and the kernel,
and a shim code in the user space assisting inbound and outbound
data ﬂows. Both the transit module and the shim code are self-
contained and safeguarded by the hypervisor to defend against at-
tacks from the kernel and malicious DMA requests as in [8, 22].
The AppShield hypervisor as the root of trust in our system could
boot up using SRTM [32] (Static Root of Trust for Measurements)
and DRTM [18] (Dynamic Root of Trust for Measurements) tech-