i for i (cid:54)= j and
implicitly sets: r(cid:48) = br(cid:48)(cid:48), ri = br(cid:48)
rj = ab + br(cid:48)
j.
– According to the Phase 1 in Section 4.2, it calls
PolySat(T , γ, r(cid:48)(cid:48)) and obtains D1 related with γ.
Now, it could use D1 decrypts E1 and obtains
e(g, g)sr(cid:48)
.
– For i ∈ L and i (cid:54)= j, if vk∗
i = 0,
r(cid:48)
i
ηi and Di,1 = g
r(cid:48)
θl+i ;
i
Di,0 = B
if vk∗
i = 1,
r(cid:48)
i
ηi and Di,1 = B
r(cid:48)
θl+i .
i
Di,0 = g
rj
t(cid:48)
l+i =
j
j
1
θl+j · g
– For i = j, it only can generate Dj,1 = g
ab+br(cid:48)
bθl+j = A
r(cid:48)
θl+j . This is enough for ﬁn-
l+j is in-
l+j) =
g
ishing our decryption since vkj = 1 and T (cid:48)s
volved in ciphertext E. Note that e(Dj,1, T (cid:48)s
e(g, g)srj .
– S then computes ˆD = gy−r = gab−br(cid:48)(cid:48)−ab−(cid:80)
i∈L br(cid:48)
i =
.
(cid:80)
i∈L r(cid:48)
1
i
.
Br(cid:48)(cid:48)+
– Finally, S outputs m =
e( ˆE, ˆD)·e(g,g)sr(cid:48)·(cid:81)
E(cid:48)
i∈L e(g,g)sri
Challenge The adversary A will submit two challenge mes-
sages m0 and m1 to S. Then, S chooses µ ∈ {0, 1} at ran-
dom, and returns an encryption of mµ under the challenge
access tree T ∗ as follows:
• It ﬁrst generates an encryption E∗
1 according to Chal-
lenge in Section 4.2.
• It generates a signature σ∗ = ots.Sig(sk∗,(cid:104)E∗
1 ,
{C ηi}i∈L,vk∗
i =0,{C θl+i}i∈L,vk∗
i =1, C(cid:105)).
• It outputs the challenge ciphertext as E∗ = (cid:104)E∗
1 ,
{C ηi}i∈L,vk∗
i =0,{C θl+i}i∈L,vk∗
i =1, C, σ∗, vk∗(cid:105)
i and E(cid:48)
i = C ηi = (gs)ηi = T (cid:48)s
If (g, A, B, C, Z) ∈ Dbdh and we let s = c, then we have
Y s = e(g, g)abc, E(cid:48)
i = C θl+i =
(gs)θl+i = T (cid:48)s
l+i. Therefore, the ciphertext is a valid random
encryption of message mµ.
Otherwise, if (g, A, B, C, Z) ∈ Drand, we have E(cid:48) = mµ·Z.
Since Z is randomly chosen from GT , E(cid:48) will be a random
element of GT from the adversary’s view and the ciphertext
contains no information about mµ.
Phase 2 The simulator S acts exactly as it did in Phase
1.
Guess S outputs ν(cid:48) = 1 to indicate that it was given a
tuple from Dbdh if A gives a correct guess µ(cid:48) = µ; otherwise
output ν(cid:48) = 0 to indicate that it was given a tuple from
Drand.
Let us compute the success probability of S:
In the case of ν = 0 the adversary gains no information
about µ. Therefore, we have Pr[µ (cid:54)= µ(cid:48)|ν = 0] = 1
2 . Since
the simulator guesses ν(cid:48) = 0 when (µ (cid:54)= µ(cid:48), no forge) or
(forge), we have Pr[ν(cid:48) = ν|ν = 0] = Pr[ν(cid:48) = 0|ν = 0] =
Pr[µ (cid:54)= µ(cid:48),¬forge|ν = 0] + Pr[forge|ν = 0] = Pr[µ (cid:54)=
µ(cid:48)|ν = 0] − Pr[µ (cid:54)= µ(cid:48), forge|ν = 0] + Pr[forge|ν = 0] ≥
2 − Pr[forge|ν = 0] = 1
2 − εots.
In the case of ν = 1, the adversary gets a valid ciphertext
of mµ. By deﬁnition, the adversary has ε to guess the correct
1
350µ(cid:48), and thus Pr[µ = µ(cid:48)|ν = 1] = 1
2 + ε. Since the simulator
guesses ν(cid:48) = 1 when (µ = µ(cid:48), no forge), we have Pr[ν(cid:48) =
ν|ν = 1] = Pr[ν(cid:48) = 1|ν = 1] = Pr[µ = µ(cid:48),¬forge|ν = 1] =
2 + ε −
Pr[µ = µ(cid:48)|ν = 1] − Pr[µ = µ(cid:48), forge|ν = 1] ≥ 1
Pr[forge|ν = 1] = 1
ν(cid:48) = ν is Pr[ν = ν(cid:48)] − 1
1] − 1
The overall advantage of the simulator to output a correct
2 = Pr[ν = ν(cid:48), ν = 0] + Pr[ν = ν(cid:48), ν =
2 + ε − εots.
2 + ε − εots) − 1
2 − εots
2 = ε
2 · ( 1
2 ≥ 1
2 · ( 1
2 − εots) + 1
6. COMPARISONS
6.1 Access Policy
In this section, we compare the expressive capability of
access tree of BCP1 with that of GJPS scheme bounded by
the same parameter (d, c). Actually, according to BCP1’s
deﬁnition on the (d, c)-bounded access tree, each non-leaf
node has a threshold value at most c and no more than c
non-leaf nodes share one unique parent. Thus, one diﬀerence
of the restriction on access trees between GJPS and BCP1 is
if a non-leaf node x has a non-leaf child node, in GJPS the
total number of x’s child node must be no more than c while
in BCP1 the total number of x’s non-leaf child node must be
no more than c. Therefore, our scheme accommodate more
possible access policies chosen by the sender under the same
pre-set bounds. (An example is shown in Figure 7)
Figure 7: An example access tree accepted by BCP1
but not accepted by GJPS
6.2 Efﬁciency and Parameter Size
Now, we present the comparisons on the computational cost
of each algorithm and the sizes of parameters between GJPS
and BCP1 in Table 1, both of which are proved secure in the
selective-tree CPA model. We assume that both schemes
are initialized with same system parameters (d, c) and con-
sider an encryption under a (d, c)-bounded access tree T (this
access tree must be chosen suitable for both schemes since
there’s a diﬀerence between the acceptable access trees of
two schemes). Tn is T ’s normal form. The secret key is
associated with an attribute set γ such that T (γ) = 1 and
|γ| = x. ˆT , ˆTn are the γ-satisﬁed non-redundant trees of
T ,Tn with minimum non-leaf nodes, respectively.
|U| =
n,|U∗| = c − 1,|ΣTu| = cd−1
c−1 . Here, TExp represents the
cost of one modular exponentiation, TPair represents the
cost of one bilinear pairing computing. TS1, TK1, TE1, TD1
represents the computational cost of Setup, KGen, Enc
and Dec algorithms in GJPS. LP 1, LS1, LC1 represents the
size of public parameter, secret key and ciphertext in GJPS.
The mark with ”2” indicates the counterpart of BCP1.
Mark
TS1
TS2
TK1
TK2
TE1
TE2
TD1
TD2
LP 1
LP 2
LS1
LS2
LC1
LC2
times
1
1
1/user
1/user
many
many
many
many
number
1
1
1/user
1/user
many
many
Computational cost
TPair + (ncd−1 + cd) · TExp
TPair + (n × cd−1
c−1 + cd) · TExp
(xcd−1 + cd − 1) · TExp
(cid:80)
(x × cd−1
c−1 + cd − 1) · TExp
(cid:80)
(1 + |ΘTn
(c − kx)) · TExp
| +
x∈ΣTn
x∈ΣT (c − kx)) · TExp
(1 + |ΘT | +
| × c − |Σ ˆTn
| + 1) · TPair + |Σ ˆTn
(|Σ ˆTn
| × c · TExp
(|Σ ˆT | × c − |Σ ˆT | + 1) · TPair + |Σ ˆT | × c · TExp
Size
|GT | + (ncd−1 + cd − 1) · |G|
|GT | + (n × cd−1
c−1 + cd − 1) · |G|
(xcd−1 + cd − 1) · |G|
(cid:80)
(x × cd−1
c−1 + cd − 1) · |G|
(cid:80)
|GT | + (|ΘTn
| +
|GT | + (|ΘT | +
(c − kx)) · |G|
x∈ΣTn
x∈ΣT (c − kx)) · |G|
√
√
√
√
√
√
√
Table 1: Comparisons between the scheme in GJPS
and BCP1
Generally, c is set to be no less than 2, then x× cd−1
c−1 +cd−
1 < 2 × (xcd−1 + cd − 1). This is because of the following
deduction: 2 ≤ c =⇒ 2cd−1 − 1 < cd =⇒ cd−1
c−1 < 2cd−1.
Therefore, we obtain that TS2 < 2TS1, TK2 < 2TK1, LP 2 <
2LP 1, LS2 < 2LS1.
7. CONCLUSION
Ciphertext policy attribute based encryption scheme diﬀers
from the traditional public key encryption scheme [2, 3, 4,
7, 8, 9] and key policy attribute based encryption scheme
[11, 12], because it allows a sender to exert more control
on the access policy of ciphertext. This is very eﬃcient for
users to distribute messages and also very applicable to the
role-based access control system.
In this work, we have designed a provably secure bounded
ciphertext policy attribute based encryption scheme BCP1
with shorter ciphertext and higher eﬃciency compared with
previously proposed scheme [10]. The scheme BCP1 is proved
selective-tree CPA secure in the standard model assuming
that DBDH problem is hard.
In addition, we apply the
one-time signature techniques to obtain a chosen ciphertext
secure extension BCP2. The security proof is reduced to the
DBDH assumption and the strong existential unforgeability
of one-time signature scheme.
Many problems remain open in this area. For example,
it is imperative for continuingly improving the eﬃciency of
BCPABE scheme. Another one, also referred as our future
work is to design a new kind of BCPABE excluding the
assistance of dummy nodes.
8. ACKNOWLEDGMENTS
The authors would like to thank anonymous reviewers and
Rongxing Lu for their suggestions to improve this paper.
Besides, this research is supported by National Nature Sci-
ence Foundation of China (No.60673079 and No.60773086),
National 973 Program (No.2007CB311201).
9. REFERENCES
[1] John Bethencourt, Amit Sahai, and Brent Waters.
Ciphertext-policy attribute-based encryption. In IEEE
Symposium on Security and Privacy, pages 321–334,
2007.
ABCDREbounds: d=2,c=3real attributes:A,B,C,D,E351[2] Dan Boneh and Xavier Boyen. Eﬃcient selective-id
secure identity-based encryption without random
oracles. In EUROCRYPT, pages 223–238, 2004.
[3] Dan Boneh and Xavier Boyen. Secure identity based
encryption without random oracles. In CRYPTO,
pages 443–459, 2004.
[4] Dan Boneh and Matthew K. Franklin. Identity-based
encryption from the weil pairing. In CRYPTO, pages
213–229, 2001.
[5] Ran Canetti, Shai Halevi, and Jonathan Katz.
Chosen-ciphertext security from identity-based
encryption. In EUROCRYPT, pages 207–222, 2004.
[6] Ling Cheung and Calvin Newport. Provably secure
ciphertext policy abe. In ACM Conference on
Computer and Communications Security, pages
456–465, 2007.
[7] Cliﬀord Cocks. An identity based encryption scheme
based on quadratic residues. In IMA Int. Conf., pages
360–363, 2001.
[8] Ronald Cramer and Victor Shoup. A practical public
key cryptosystem provably secure against adaptive
chosen ciphertext attack. In CRYPTO, pages 13–25,
1998.
[9] Ronald Cramer and Victor Shoup. Universal hash
proofs and a paradigm for adaptive chosen ciphertext
secure public-key encryption. In EUROCRYPT, pages
45–64, 2002.
[10] Vipul Goyal, Abhishek Jain, Omkant Pandey, and
Amit Sahai. Bounded ciphertext policy attribute
based encryption. In ICALP (2), pages 579–591, 2008.
[11] Vipul Goyal, Omkant Pandey, Amit Sahai, and Brent
Waters. Attribute-based encryption for ﬁne-grained
access control of encrypted data. In ACM Conference
on Computer and Communications Security, pages
89–98, 2006.
[12] Rafail Ostrovsky, Amit Sahai, and Brent Waters.
Attribute-based encryption with non-monotonic access
structures. In ACM Conference on Computer and
Communications Security, pages 195–203, 2007.
[13] Amit Sahai and Brent Waters. Fuzzy identity-based
encryption. In EUROCRYPT, pages 457–473, 2005.
[14] Brent Waters. Ciphertext-policy attribute-based
encryption: An expressive, eﬃcient, and provably
secure realization. In Cryptology ePrint Archive:
2008/290, 2008.
352