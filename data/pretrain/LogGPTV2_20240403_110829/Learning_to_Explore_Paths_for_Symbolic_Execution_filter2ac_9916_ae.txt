The reason is that, during some runs, the strategies were unable to
generate a few important test cases, resulting in thousand of lines
less coverage than other runs. This happened the least often for
Learch so Learch’s mean coverage was the highest.
Percentage of covered lines. Apart from absolute line cover-
age, we calculated the percentage of covered lines to investigate
how thoroughly the test programs are covered by KLEE and the
strategies. We measured the percentage of covered MainLOCs and
ELOCs (mean value from 20 runs). The total number of MainLOCs
and ELOCs for each test program can be found in Table 2.
MainLOC was used for measuring coverage in [16, 48] and refers
to the main program lines, i.e., the lines of the source file containing
the main function. It does not include internal and external library
code that can be invoked by multiple programs to avoid counting
them multiple times (see [16] for details on the advantages of using
MainLOC). The results for MainLOC percentages are presented
in Table 3. Learch achieved the highest coverage for most cases.
We can observe that the percentages for all strategies decrease
with increasing program size: for small programs such as coreutils,
cjson and find, all strategies achieved relatively high coverage (e.g.,
>60%); while for large programs such as readelf and sqlite, KLEE
only covered ∼10% MainLOCs.
ELOC, short for executable lines of code, represents the total
executable lines in the final executable after KLEE’s optimizations.
In [16, 48], it was used for measuring program size and included
external library code that KLEE automatically links. In our work,
we use ELOC for measuring coverage and thus excluded external
library code that does not belong to the program package. The
internal library code from the package was included. The results on
the percentage of covered ELOCs are presented in Table 4. Learch
still covered most portions of code for most cases. However, even
with the best strategy, KLEE covered only a very small portion of
code (e.g., 12%. For the 10 real-world programs (Figure 7(b)), Learch
outperformed all manual heuristics except for sgs which found
the same number of violations as Learch, even though Learch
achieved higher coverage than sgs. This is likely because the parts
of the programs explored by sgs contained more UBSan labels. We
provide a manual analysis of the UBSan violations detected with
Learch in Section 6.5.
6.4 Seeding for Fuzzing
Fuzzing has gained substantial interest recently [1, 27, 30, 31, 45, 72].
It is shown that fuzzing performance heavily depends on the choices
of initial seeds [39, 45]. While the initial seeds used in prior works
are usually empty, randomly generated, or manually constructed
[12, 26, 45, 71], symbolic execution can be used to automatically
generate fuzzing seeds (see [29] for how initial seeds generated
by KLEE compare to simple and expert seeds). In this work, we
investigate if Learch can generate better fuzzing seeds than the
manual heuristics.
We selected AFL (version 2.52b) [1] due to its popularity and ran
it on the four largest programs in our real-world benchmarks whose
input format supports AFL-style fuzzing: objcopy, readelf, make, and
sqlite. For each program and each strategy, we constructed the
initial seed set by selecting the top three tests from our previous
experiment (i.e., Figure 6) based on the best coverage and ran AFL
starting from the initial seeds for 8h. We selected only three initial
seeds because using a small set of initial seeds is recommended by
AFL and adopted by many fuzzing works [3, 7, 27, 45, 51]. Aware
of the randomness in AFL, we repeated each run for 20 times and
report the mean and standard deviation.
Discovering paths. AFL generates a test when a new path is
triggered. Therefore, one of the most direct indicator of AFL’s
progress is path coverage, i.e., the number of discovered paths
Session 10A: Crypto, Symbols and Obfuscation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea25361
2
3
4
5
6
1
2
3
4
5
6
7
static bool consider_arm_swap ( struct predicate *p) {
...
pr = &p -> pred_right ;
// findutils -4.7.0/ find / tree .c: line 538
pl = &p -> pred_left -> pred_right ;
...
Figure 9: A null pointer dereference.
static char * find_map_unquote (...) {
...
// make -4.3/ src / read .c: line 2354
memmove (& p[i], &p[i /2] ,
( string_len - (p - string )) - (i /2) + 1);
...
}
Figure 11: An overflow leading to wrong array accesses.
1
2
3
4
5
6
1
2
3
4
5
6
7
const char * _bfd_coff_read_string_table ( bfd * abfd ) {
...
// binutils -2.36/ bfd / coffgen .c: line 1676
pos += obj_raw_syment_count ( abfd )
* bfd_coff_symesz ( abfd );
...
Figure 10: Overflows leading to an incorrect file position.
# define ISDIGIT (c) (( unsigned int ) (c) - '0' pred_left is null pointer but the
code tries to deference it. This bug was detected by running KLEE
with Learch on find. In Figure 10, the addition at Line 4 and the
multiplication at Line 5 can overflow, affecting the value of pos and
leading to a wrong file position when reading a binary executable