      using (var inputStream = File.OpenRead(inputFile))
      using (var outputStream = File.OpenWrite(outputFile))
      {
        byte[] buffer = new byte[BUFFERSIZE];
        bool completed = false;
        do
        {
        int nRead = inputStream.Read(buffer, 0, BUFFERSIZE);
        if (nRead == 0) completed = true;
        outputStream.Write(buffer, 0, nRead);
        } while (! completed);
      }
    }
为了复制流，无须编写读写流的代码。而可以使用Stream类的CopyTo方法，如下所
示（代码文件StreamSamples / Program. cs）：
    public static void CopyUsingStreams2(string inputFile, string outputFile)
    {
      using (var inputStream = File.OpenRead(inputFile))
      using (var outputStream = File.OpenWrite(outputFile))
      {
        inputStream.CopyTo(outputStream);
      }
    }
23.4.5 随机访问流
随机访问流（甚至可以访问大文件）的一个优势是，可以快速访问文件中的特定位
置。
为了了解随机存取动作，下面的代码片段创建了一个大文件。这个代码片段创建的文
件sampledata.data包含了长度相同的记录，包括一个数字、一个文本和一个随机的日期。
传递给方法的记录数通过Enumerable.Range方法创建。Select方法创建了一个匿名类型，
其中包含Number、Text和Date属性。除了这些记录外，还创建一个带#前缀和后缀的字符
串，每个值的长度都固定，每个值之间用；作为分隔符。WriteAsync方法将记录写入流
（代码文件StreamSamples /Program.cs）：
    const string SampleFilePath = "./samplefile.data";
    public static async Task CreateSampleFile(int nRecords)
    {
      FileStream stream = File.Create(SampleFilePath);
      using (var writer = new StreamWriter(stream))
      {
        var r = new Random();
        var records = Enumerable.Range(0, nRecords).Select(x => new
        {
        Number = x,
        Text = $"Sample text {r.Next(200)}",
        Date = new DateTime(Math.Abs((long)((r.NextDouble() ＊ 2 - 1) ＊
          DateTime.MaxValue.Ticks)))
        });
        foreach (var rec in records)
        {
        string date = rec.Date.ToString("d", CultureInfo.InvariantCulture);
        string s =
          $"#{rec.Number,8}; {rec.Text, -20}; {date}#{Environment.NewLine}";
        await writer.WriteAsync(s);
        }
      }
    }
  注意： 第5章提到，每个实现IDisposable的对象都应该销毁。在前面的代码
片段中，FileStream似乎并没有销毁。然而事实并非如此。StreamWriter销毁时，
StreamWriter会控制所使用的资源，并销毁流。为了使流打开的时间比StreamWriter更
长，可以用StreamWriter的构造函数配置它。在这种情况下，需要显式地销毁流。
现在把游标定位到流中的一个随机位置，读取不同的记录。用户需要输入应该访问的
记录号。流中应该访问的字节基于记录号和记录的大小。现在Stream类的Seek方法允许定
位流中的光标。第二个参数指定位置是流的开头、流的末尾或是当前位置（代码文件
StreamSamples /Program.cs）：
    public static void RandomAccessSample()
    {
      try
      {
        using (FileStream stream = File.OpenRead(SampleFilePath)
)
        {
        byte[] buffer = new byte[RECORDSIZE];
        do
        {
          try
          {
            Write("record number (or 'bye' to end): ");
            string line = ReadLine();
            if (line.ToUpper().CompareTo("BYE") == 0) break;
            int record;
            if (int.TryParse(line, out record))
            {
              stream.Seek((record - 1) ＊ RECORDSIZE, SeekOrigin.Begin);
              stream.Read(buffer, 0, RECORDSIZE);
              string s = Encoding.UTF8.GetString(buffer);
              WriteLine($"record: {s}");
            }
          }
          catch (Exception ex)
          {
            WriteLine(ex.Message);
          }
        } while (true);
        WriteLine("finished");
        }
      }
      catch (FileNotFoundException)
      {
        WriteLine("Create the sample file using the option -sample first");
      }
    }
利用这些代码，可以尝试创建一个包含150万条记录或更多的文件。使用记事本打开
这个大小的文件会比较慢，但是使用随机存取会非常快。根据系统、CPU和磁盘类型，可
以使用更高或更低的值来测试。
  注意： 如果应该访问的记录的大小不固定，仍可以为大文件使用随机存取。
解决这一问题的方法之一是把写入记录的位置放在文件的开头。另一个选择是读取记
录所在的一个更大的块，在其中可以找到记录标识符和内存块中的记录限值条件。
23.4.6 使用缓存的流
从性能原因上看，在读写文件时，输出结果会被缓存。如果程序要求读取文件流中下
面的两个字节，该流会把请求传递给Windows，则Windows不会连接文件系统，再定位文
件，并从磁盘中读取文件，仅读取2个字节。而是在一次读取过程中，检索文件中的一个
大块，把该块保存在一个内存区域，即缓冲区上。以后对流中数据的请求就会从该缓冲区
中读取，直到读取完该缓冲区为止。此时，Windows会从文件中再获取另一个数据块。
写入文件的方式与此相同。对于文件，操作系统会自动完成读写操作，但需要编写一
个流类，从其他没有缓存的设备中读取数据。如果是这样，就应从BufferedStream创建一
个类，它实现一个缓冲区（但BufferedStream并不用于应用程序频繁切换读数据和写数据
的情形）。
23.5 使用读取器和写入器
使用FileStream类读写文本文件，需要使用字节数组，处理前一节描述的编码。有更
简单的方法：使用读取器和写入器。可以使用StreamReader和StreamWriter类读写
FileStream，无须处理字节数组和编码，比较轻松。
这是因为这些类工作的级别比较高，特别适合于读写文本。它们实现的方法可以根据
流的内容，自动检测出停止读取文本较方便的位置。特别是：
● 这些类实现的方法（StreamReader.ReadLine和StreamWriter.WriteLine）可以一次读
写一行文本。在读取文件时，流会自动确定下一个回车符的位置，并在该处停止
读取。在写入文件时，流会自动把回车符和换行符追加到文本的末尾。
● 使用StreamReader和StreamWriter类，就不需要担心文件中使用的编码方式。
ReaderWriterSamples的示例代码使用下面的依赖项和名称空间：
依赖项
    NETStandard.Library
    System.IO.FileSystem
名称空间
    System
    System.Collections.Generic
    System.Globalization
    System.IO
    System.Linq
    System.Text
    System.Threading.Tasks
    static System.Console
23.5.1 StreamReader类
先看看StreamReader，将前面的示例转换为读取文件以使用StreamReader。它现在看
起来容易得多。StreamReader的构造函数接收FileStream。使用EndOfStream属性可以检查
文件的末尾，使用ReadLine方法读取文本行（代码文件ReaderWriterSamples
/Program.cs）：
    public static void ReadFileUsingReader(string fileName)
    {
      var stream = new FileStream(fileName, FileMode.Open, FileAccess.Read,
                            FileShare.Read);
      using (var reader = new StreamReader(stream)
)
      {
        while (! reader.EndOfStream
)
        {
          string line = reader.ReadLine()
;
          WriteLine(line);
        }
      }
    }
不再需要处理字节数组和编码。然而注意，StreamReader默认使用UTF - 8编码。指定
另一个构造函数，可以让StreamReader使用文件中序言定义的编码：
    var reader = new StreamReader(stream, detectEncodingFromByteOrderMarks: true)
;
也可以显式地指定编码：
    var reader = new StreamReader(stream, Encoding.Unicode);
其他构造函数允许设置要使用的缓冲区；默认为1024个字节。此外，还可以指定关闭
读取器时，不应该关闭底层流。默认情况下，关闭读取器时（使用Dispose方法），会关
闭底层流。
不显式实例化新的StreamReader，而可以使用File类的OpenText方法创建
StreamReader：
    var reader = File.OpenText(fileName);
对于读取文件的代码片段，该文件使用ReadLine方法逐行读取。StreamReader还允许
在流中使用ReadToEnd从光标的位置读取完整的文件：
    string content = reader.ReadToEnd();
StreamReader还允许把内容读入一个字符数组。这类似于Stream类的Read方法；它不
读入字节数组，而是读入char数组。记住，char类型使用两个字节。这适合于16位
Unicode，但不适合于UTF-8，其中，一个字符的长度可以是1至6个字节：
    int nChars = 100;
    char[] charArray = new char[nChars];
    int nCharsRead = reader.Read(charArray, 0, nChars);
23.5.2 StreamWriter类
StreamWriter的工作方式与StreamReader相同，只是StreamWriter仅用于写入文件（或
写入另一个流）。下面的代码片段传递FileStream，创建了一个StreamWriter。然后把传入
的字符串数组写入流（代码文件ReaderWriterSamples /Program.cs）：
    public static void WriteFileUsingWriter(string fileName, string[] lines)
    {
      var outputStream = File.OpenWrite(fileName);
      using (var writer = new StreamWriter(outputStream)
)
      {
        byte[] preamble = Encoding.UTF8.GetPreamble();
        outputStream.Write(preamble, 0, preamble.Length);
        writer.Write(lines);
      }
    }
记住，StreamWriter默认使用UTF-8格式写入文本内容。通过在构造函数中设置
Encoding对象，可以定义替代的内容。另外，类似于StreamReader的构造函数，
StreamWriter允许指定缓冲区的大小，以及关闭写入器时是否不应该关闭底层流。
StreamWriter的Write（）方法定义了17个重载版本，允许传递字符串和一些.NET数据
类型。请记住，使用传递.NET数据类型的方法，这些都会使用指定的编码变成字符串。
要以二进制格式写入数据类型，可以使用下面介绍的BinaryWriter。
23.5.3 读写二进制文件
读写二进制文件的一种选择是直接使用流类型；在这种情况下，最好使用字节数组执
行读写操作。另一个选择是使用为这个场景定义的读取器和写入器：BinaryReader和
BinaryWriter。使用它们的方式类似于使用StreamReader和StreamWriter，但BinaryReader和
BinaryWriter不使用任何编码。文件使用二进制格式而不是文本格式写入。
与Stream类型不同，BinaryWriter为Write（）方法定义了18个重载版本。重载版本接
受不同的类型，如下面的代码片段所示，它写入double、int、long和string（代码文件
ReaderWriterSamples/Program.cs）：
    public static void WriteFileUsingBinaryWriter(string binFile)
    {
      var outputStream = File.Create(binFile);
      using (var writer = new BinaryWriter(outputStream)
)
      {
        double d = 47.47;
        int i = 42;
        long l = 987654321;
        string s = "sample";
        writer.Write(d);
        writer.Write(i);
        writer.Write(l);
        writer.Write(s);
      }
    }
写入文件之后，就可以从Visual Studio使用二进制编辑器打开它，如图23-4所示。
图23-4
为了再次读取文件，可以使用BinaryReader。这个类定义的方法会读取所有不同的类
型，如ReadDouble、ReadInt32、ReadInt64和ReadString，如下所示：
    public static void ReadFileUsingBinaryReader(string binFile)
    {
      var inputStream = File.Open(binFile, FileMode.Open);
      using (var reader = new BinaryReader(inputStream))
      {
        double d = reader.ReadDouble();
        int i = reader.ReadInt32();
        long l = reader.ReadInt64();
        string s = reader.ReadString();
        WriteLine($"d: {d}, i: {i}, l: {l}, s: {s}");
      }
    }
读取文件的顺序必须完全匹配写入的顺序。创建自己的二进制格式时，需要知道存储
的内容和方式，并用相应的方式读取。旧的微软Word文档使用二进制文件格式，而新的
docx文件扩展是ZIP文件。如何读写压缩文件详见下一节。
23.6 压缩文件
.NET包括使用不同的算法压缩和解压缩流的类型。可以使用DeflateStream和
GZipStream来压缩和解压缩流；ZipArchive类可以创建和读取ZIP文件。
DeflateStream和GZipStream使用相同的压缩算法（事实上，GZipStream在后台使用
DeflateStream），但GZipStream增加了循环冗余校验，来检测数据的损坏情况。在
Windows资源管理器中，可以直接打开ZipArchive，但不能打开用GZipStream压缩的文
件。第三方GZip工具可以打开用gzipStream压缩的文件。
  注意： DeflateStream和GZipStream使用的算法是抑制算法。该算法由RFC
1951定义（https://tools.ietf.org/html/rfc1951）。这个算法被广泛认为不受专利的限制，
因此得到广泛使用。
CompressFileSample的示例代码使用了以下依赖项和名称空间：
依赖项
    NETStandard.Library
    System.IO.Compression
    System.IO.Compression.ZipFile
名称空间
    System.Collections.Generic
    System.IO
    System.IO.Compression
    static System.Console
23.6.1 使用压缩流
如前所述，流的一个特性是，可以将它们链接起来。为了压缩流，只需要创建
DeflateStream，并给构造函数传递另一个流（在这个例子中，是写入文件的
outputStream），使用CompressionMode. Compress表示压缩。使用Write方法或其他功能写
入这个流，如以下代码片段所示的CopyTo（）方法，就是文件压缩所需的所有操作（代
码文件CompressFileSample /Program.cs）：
    public static void CompressFile(string fileName, string compressedFileName)
    {
      using (FileStream inputStream = File.OpenRead(fileName))
      {
        FileStream outputStream = File.OpenWrite(compressedFileName);
        using (var compressStream =
        new DeflateStream(outputStream, CompressionMode.Compress))
        {
        inputStream.CopyTo(compressStream);
        }
      }
    }
为了再次把通过DeflateStream压缩的文件解压缩，下面的代码片段使用FileStream打
开文件，并创建DeflateStream对象，把CompressionMode.Decompress传入文件流，表示解
压缩。Stream.CopyTo方法把解压缩的流复制到MemoryStream中。然后，这个代码片段利
用StreamReader读取MemoryStream中的数据，把输出写到控制台。StreamReader配置为打