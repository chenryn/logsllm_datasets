### View Reconstruction and Merkle Tree Construction

To reconstruct the view of server 0, only \( (dpf1, M_{0 \to 1}, M_{2 \to 1}) \) is sufficient. For server 1, \( (M_{2 \to 0}, M_{2 \to 1}) \) constitutes the entire view. The prover constructs a 4-ary Merkle tree (with height 1) with the root \( H \) defined as:
\[ H = \text{Hash}(cw(0) \parallel \cdots \parallel cw(h) \parallel H_{0 \to 1} \parallel H_{1 \to 0} \parallel H_{2 \to 0} \parallel H_{2 \to 1}) \]

The prover then sends:
1. \( \Pi(0) = (M_{1 \to 0}, M_{2 \to 0}, H_{2 \to 1}) \) to server 0,
2. \( \Pi(1) = (M_{0 \to 1}, M_{2 \to 1}, H_{2 \to 0}) \) to server 1, and
3. \( \Pi(2) = (H_{0 \to 1}, H_{1 \to 0}, M_{2 \to 0}, M_{2 \to 1}) \) to server 2.

### Verification Process

Server 0 verifies its portion using \( (dpf0, M_{1 \to 0}, M_{2 \to 0}) \). If \( (M_{0 \to 1}, M_{1 \to 0}, M_{2 \to 0}, H_{2 \to 1}) \) is not consistent with the Merkle root \( H \), it rejects. Servers 1 and 2 follow a similar verification process.

The 3-verifier SNIP is accepted if:
1. Each server receives the same Merkle root \( H \).
2. None of the servers reject their portions.

Since the three verifiers collectively scrutinize all views from the simulation, any inconsistencies in the simulation will be detected by at least one verifier (discounting the negligible probability of hash collisions when constructing the Merkle tree).

### Theorem 3

**Theorem 3.** The 3-verifier SNIP auditing protocol with hash function \( \text{Hash}: \{0, 1\}^* \to \{0, 1\}^\mu \) is perfectly simulatable and has perfect completeness and soundness overwhelming in \( \mu \).

A more detailed proof sketch for Theorem 3 is included in Appendix E.

### 2-Verifier SNIP Auditing

The 2-verifier SNIP audit protocol uses cut-and-choose to eliminate the need for a third verifier while maintaining soundness error negligible in \( \mu \). Specifically, upon sampling its DPF keys, the prover runs \( \mu \) parallel simulations of the (2 + 1)-party audit protocol, committing to each unidirectional communication link among the three parties in each simulation.

For each \( i = 1, \ldots, \mu \), let \( M_{a \to b}^i \) denote the ordered sequence of messages sent from party \( a \) to party \( b \) in the \( i \)-th parallel simulation, and let \( H_{a \to b}^i = \text{Hash}(M_{a \to b}^i) \).

The prover constructs a Merkle tree committing to all unidirectional channel commitments. For each \( i = 1, \ldots, \mu \), it computes the digest:
\[ H_i = \text{Hash}(cw(0) \parallel \cdots \parallel cw(h) \parallel H_{0 \to 1}^i \parallel H_{1 \to 0}^i \parallel H_{2 \to 0}^i \parallel H_{2 \to 1}^i) \]
and then constructs the Merkle root as:
\[ \text{Hash}(H_1 \parallel \cdots \parallel H_\mu) \]

Regarding Hash as a random oracle, each bit of the Merkle root constitutes a distinct challenge: if the bit is 0, each verifier inspects its own view; if the bit is 1, both verifiers inspect server 2‚Äôs view.

### Verification Process for 2-Verifier SNIP

Let \( c_i \) denote the \( i \)-th bit of the Merkle root. For each \( i = 1, \ldots, \mu \), the prover discloses the tuple:
\[ \Pi(0)_i = 
\begin{cases} 
(M_{1 \to 0}^i, M_{2 \to 0}^i, H_{2 \to 1}^i) & \text{if } c_i = 0, \\
(M_{2 \to 0}^i, M_{2 \to 1}^i, H_{2 \to 1}^i) & \text{if } c_i = 1,
\end{cases}
\]
to server 0, and symmetrically for server 1.

To verify its portion of the SNIP, server \( b \) uses \( dpf_b \) and \( \Pi(b)_i \) to reconstruct the missing leaf hashes and checks their consistency with the Merkle root. The 2-verifier SNIP is accepted if:
1. Both servers received the same Merkle root \( H \).
2. The tuple disclosed in each \( \Pi(b)_i \) is consistent with the challenge bit \( c_i \) from this root.
3. Neither server rejects its portion of the SNIP.

### Theorem 4

**Theorem 4.** The 2-verifier SNIP auditing protocol with hash function \( \text{Hash}: \{0, 1\}^* \to \{0, 1\}^\mu \) is perfectly simulatable and has perfect completeness and soundness overwhelming in \( \mu \).

A more detailed proof sketch for Theorem 4 is included in Appendix F.

### Security Guarantees

In the ideal world, Sabre users hand their read and write requests directly to an ideal functionality, which faithfully executes the requested actions without leaking superfluous information to external observers. In the real world, one of the 2- or 3-server Sabre-BB or Sabre-M instantiations replaces the ideal functionality. We consider an attacker \( A \) who controls an arbitrary number of readers and writers in addition to (at most) one server.

We wish to show that \( A \) cannot exploit its position as a Sabre server to compromise sender anonymity. This is done by exhibiting an efficient simulator that interacts with the ideal functionality to sample simulated views from a distribution close to the one describing \( A \)'s view in the real world. We then check if \( A \) can distinguish between real and simulated views; if not, we conclude that the real Sabre protocols leak essentially nothing beyond what is leaked by their ideal-world counterparts.

Due to space constraints, a detailed security definition and analysis are deferred to Appendix G.

### Implementation and Evaluation

To assess the practicality of Sabre, we implemented a proof-of-concept reference in C++. Our implementation uses Boost.Asio v1.18.1 for asynchronous communication, OpenSSL 1.1.1i for hashing and TLS support, and dpf++ [18] for (2, 2)-DPFs. All other non-STL functionality was written by hand. The source code is available under the GNU General Public License (version 3) via https://pr.iva.cy/sabre.

**Experimental Setup:**
- **Platform:** Amazon EC2, with servers running in geographically distant locations to mimic realistic Internet latency.
- **Instances:** m5.4xlarge instances with 64 GiB RAM and 16 vCPUs, running Ubuntu 18.04 AMI.
- **LowMC Parameters:** 128-bit blocks and keys, 19 rounds, 32 S-boxes per round.
- **Experiments:** 100 trials, reporting the sample mean over those 100 runs.

Sabre uses a custom bitsliced implementation of LowMC that operates on either 128 or 256 ciphertexts in parallel using SIMD operations.

### Communication Cost

Table I summarizes the communication costs for all three variants of Sabre auditing. The derivations of these numbers are included in Appendix H.

| Audit Type          | Client‚ÜíServer ùíÉ (bytes)         | Server ùíÉ‚ÜîServer (1 ‚àí ùíÉ) (bytes) | Server ùíÉ‚ÜíServer 2 (bytes) | Server 2‚ÜíServer ùíÉ (bytes) |
|---------------------|---------------------------------|---------------------------------|---------------------------|---------------------------|
| (2+1)-party         | 112 + ‚åà(64.25 + 3sr)(h‚àí1)‚åâ      | 16 + (16.1 sr)(h‚àí1)             | 16 + (16.1 sr)(h‚àí1)       | 8 + 3/2                   |
| 3-verifier SNIP     | 64                              | ‚Äî                               | ‚Äî                         | ‚Äî                         |
| 2-verifier SNIP     | 37 888 + (4 112 + 192sr)(h‚àí1)   | 16 + (16.1 sr)(h‚àí1)             | 16 + (32.1 sr)(h‚àí1)       | 8 + 3/2                   |

### Auditing Performance

Figure 4 shows the relative cost of (2 + 1)-party, 3-verifier SNIP, and 2-verifier SNIP auditing in Sabre.

![Time to audit a batch of 128 requests in Sabre](https://example.com/figure4.png)

Owing to its reliance on cut-and-choose with \( \lambda = 128 \) instances, the 2-verifier SNIP auditing is the slowest, taking two orders of magnitude longer than the other methods.