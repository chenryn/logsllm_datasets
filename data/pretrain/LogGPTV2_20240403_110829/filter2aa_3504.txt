# The Terminator to Android: Hardening Services

## Authors
- Yueqian Zhang
- Xiapu Luo
- Haoyang Yin  
- Department of Computing, The Hong Kong Polytechnic University

## Source: Trend Micro
- 100% of the apps in categories such as Widgets and Media & Video have repacked versions.
- 90% of the apps in categories like Business and Music & Audio have repacked versions.

## Outline
1. Background
2. DexHunter
3. Analysis of Major Products
4. Related Work

## Dex File
- **Java Source Code to DEX**: Java source code is compiled into Java class files, which are then converted into a single DEX file.
- **Structure**:
  - **Header**: Contains the length and offset for each section.
  - **Class Definitions Section (class_defs)**: Contains `class_def_items`, each describing a class.
  - **Constant Pools**: Reorganized into shared and type-specific pools.

### Class Definition Item
- A `class_def_item` points to a `class_data_item`.
- A `class_data_item` contains the data of a class.
- Each method is described by an `encoded_method`.
- An `encoded_method` points to a `code_item`, which contains the instructions of a method.

## OAT File
- **Generation**: Created during app installation or when a JAR file is loaded.
- **File Structure**:
  - **ELF File**: Contains three symbols in the dynamic section: `oatdata`, `oatexec`, and `oatlastword`.
  - **Sections**:
    - `oatdata`: Contains the original DEX file.
    - `oatexec`: Contains the compiled native instructions.

## DexHunter
### Where to Unpack the App?
- **Four Occasions**:
  - Opening a DEX file.
  - Loading a class.
  - Initializing a class.
  - Invoking a method.

### Procedure for Opening a DEX File
- **Operations**:
  1. Open an APK file.
  2. Check if it has been cached.
  3. If not, extract the DEX file from the APK and generate a cached DEX file.
  4. Open the cached DEX file.

### Loading a Class
- **Operations**:
  1. Form a class object from the data.
  2. Verify the legitimacy of access flags and the data.
  3. Populate all fields in the class object.
  4. Deal with its superclasses and/or interfaces.
  5. Conduct other necessary checks.

### Two Ways of Loading Classes
- **Explicit Approach**:
  - `Class.forName()`
  - `ClassLoader.loadClass()`
- **Implicit Approach**:
  - New operations, accessing static members, etc.

### Implementation in ART and DVM
- **ART**:
  - Explicit: `ClassLoader.loadClass() -> DexFile_defineClassNative`, `Class.forName() -> Class_classForName`
  - Implicit: New operations, `artAllocObjectFromCode`
- **DVM**:
  - Explicit: `ClassLoader.loadClass() -> Dalvik_dalvik_system_DexFile_defineClassNative`, `Class.forName() -> Dalvik_java_lang_Class_classForName`
  - Implicit: New operations, `dvmResolveClass`

### Class Loaders at Java Level
- **Three Class Loaders**:
  - **BootClassLoader**: Loads system classes.
  - **DexClassLoader**: Loads external files.
  - **PathClassLoader**: Used by the framework.

### Parent Delegation Model
- **Class Loader Hierarchy**:
  - Each subclass of `ClassLoader` implements its own `findClass()` method.
  - Each subclass inherits `loadClass()` except `BootClassLoader`.

### Differences between Java and Android
- `defineClass()` in `ClassLoader` (Android) is not implemented.
- `URLClassLoader` in Android cannot load a class due to the lack of `URLClassLoader.findClass()`.

### When Does Class Initialization Happen?
- Before the class object is used.
- Before the first static data member is accessed.
- Before the first static method is invoked.
- Before the first instance is generated.

### Invoking a Method
- **DVM or ART Interpreting Mode**: Execute the instructions in the `code_item`.
- **ART Native Mode**: Execute the native instructions in the `oatexec` section.

### When to Unpack the App?
- **Timing**: When the first class of the app is being loaded.
- **Reasons**:
  - The content of the class should be available in memory before loading.
  - Some content in memory may be modified dynamically during initialization.
  - The `code_item` or instructions should be available just before a method is invoked.
- **How**:
  - Proactively load and initialize all classes.

### How to Unpack the APK?
- **Steps**:
  1. Integrate the tool into the Android runtime (DVM and ART).
  2. Wait for the appropriate occasion.
  3. Locate the target memory region.
  4. Dump the selected memory.
  5. Correct and reconstruct the DEX file.

### Locating the Target Memory Region
- **Target Region**: Contains the DEX file.
- **Identification**:
  - **ART**: Use the string "location_" in `DexFile` objects.
  - **DVM**: Use the string "fileName" in `DexOrJar` objects.

### Extracting the DEX File in Memory
- **Division**:
  - **Part 1**: Content before the `class_defs` section.
  - **Part 2**: `class_defs` section.
  - **Part 3**: Content after the `class_defs` section.
- **Dumping**:
  - Dump Part 1 into a file named `part1` and Part 3 into a file named `data`.

### Parsing the Content
- **Steps**:
  1. Parse the `class_defs` section.
  2. Get each `class_data_item` from `class_def_item`.
  3. Read the corresponding content into a `DexClassData` object.
  4. Note: Some fields in `class_data_item` are encoded using LEB128.

### Correcting and Collecting
- **Reasons**:
  - Packing services may modify the memory dynamically.
  - The memory consists of the region containing the DEX file and method objects managed by the runtime.
- **Checks**:
  - `class_data_off` in `class_def_item`.
  - `accessflag` and `codeoff` in `DexMethod` of parsed `class_data_item`.

### Scenarios for Correction
- **Scenario I**:
  - Compare `accessFlags` in `DexMethod` with the access flag in the managed method object.
  - Compare `codeoff` in `DexMethod` with `code_item_off` in the managed method object.
  - If at least one is not equal, modify the value in the `DexMethod` object and write the relevant `DexClassData` into the `extra` file.
- **Scenario II**:
  - Check if `code_item_off` exists in the scope of the DEX file.
  - If not, collect the correct `code_item` and write it into the `extra` file.

### Reconstructing the DEX File
- **Combination**:
  - Combine `part1`, `classdef`, `data`, and `extra` in the sequence: (1) `part1`, (2) `classdef`, (3) `data`, (4) `extra`.
- **Result**: A complete DEX file.

## Analysis of Major Products
- **Products Investigated**:
  - 360 (http://jiagu.360.cn/)
  - Ali (http://jaq.alibaba.com/)
  - Baidu (http://apkprotect.baidu.com/)
  - Bangcle (http://www.bangcle.com/)
  - Tencent (http://jiagu.qcloud.com/)
  - ijiami (http://www.ijiami.cn/)

### Experiment Setup
- **String List**:
  - 360: `/data/data/XXX/.jiagu/classes.dex`
  - Ali: `/data/data/XXX/files/libmobisecy1.zip`
  - Baidu: `/data/data/XXX/.1/classes.jar`
  - Bangcle: `/data/data/XXX/.cache/classes.jar`
  - Tencent: `/data/app/XXX-1.apk` (`/data/app/XXX-2.apk`)
  - ijiami: `/data/data/XXX/cache/`
  - **Note**: `XXX` stands for the package name.

### Anti-Debugging
- **Features**:
  - All products detect debuggers.
  - Anti-ptrace and Anti-JWDP.
  - They cannot detect DexHunter.

### Product-Specific Details
- **360**:
  - **Version**: 06-21-2015
  - Encrypts the DEX file and saves it in `libjiagu.so`/`libjiagu_art.so`.
  - Decrypts the data into memory while running.
- **Ali**:
  - **Version**: 21-06-2015
  - Splits the original DEX file into two parts: one in `libmobisecy.so` and the other containing `class_data_items` and `code_items`.
  - Releases both parts into memory as plain text and corrects some offset values.
  - Some `annotation_offs` are set to incorrect values.
- **Baidu**:
  - **Version**: 21-06-2015
  - Moves some `class_data_items` to other places outside the DEX file.
  - Wipes magic numbers, checksum, and signature in the header after the DEX file is opened.
  - Fills in an empty method just before it is invoked and erases the content after the method finishes.
  - Instruments method invocation to dump methods available just before invoking.
- **Bangcle**:
  - **Version**: 21-06-2015
  - Prepares the ODEX or OAT file in advance.
  - Encrypts the file and stores it in an external JAR file.
  - Decrypts the data while running.
  - Hooks several functions in `libc.so`, such as `fwrite`, `mmap`, etc.
- **ijiami**:
  - **Version**: 21-06-2015
  - Similar to Bangcle.
  - The string changes every time the app runs.
  - Releases the decrypted file, encrypted as a JAR file, with different file names each time.
- **Tencent**:
  - **Version**: 25-05-2015
  - Protects methods selected by users.
  - If a method is selected, it cannot be found in the relevant `class_data_item`.
  - Releases the real `class_data_item` and adjusts the offset.
  - Some `annotation_offs` and `debug_info_offs` are set to `0xFFFFFFFF`.
  - Only runs in DVM.

## Related Work
- **References**:
  - A. Apvrille and R. Nigam, “Obfuscation in android malware, and how to fight back,” Virus Bulletin, July 2014.
  - M. Grassi, “Reverse engineering, pentesting, and hardening of android apps.” DroidCon, 2014.
  - T. Strazzere and J. Sawyer, “Android hacker protection level 0,” DefCon, 2014. (android-unpacker, https://github.com/strazzere/android-unpacker)
  - ZjDroid, http://blog.csdn.net/androidsecurity/article/details/38121585
  - Y. Park, “We can still crack you! general unpacking method for android packer (no root),” Blackhat Asia, 2015.
  - Y. Shao et al., DexDumper in paper “Towards a Scalable Resource-driven Approach for Detecting Repackaged Android Applications”, Proc. ACSAC, 2014.