keepNum :=""
for{
//这里我们需要增加一个逻辑，
//处理多位数的问题
ch :=exp[index:index+1] // 字符串.
//ch==>"+" ===>43
temp:= int([]byte(ch)[0])// 就是字符对应的ASCiI码
ifoperStack.IsOper(temp){ // 说明是符号
//如果operStack 是一个空栈， 直接入栈
ifoperStack.Top ==-1 { //空栈
operStack.Push(temp)
}else{
//如果发现opertStack 栈顶的运算符的优先级大于等于当前准备入栈的运算符的优先级
//，就从符号栈pop出，并从数栈也pop 两个数，进行运算，运算后的结果再重新入栈
//到数栈， 当前符号再入符号栈
ifoperStack.Priority(operStack.arr[operStack.Top])>=
operStack.Priority(temp){
num1,_= numStack.Pop()
num2,_= numStack.Pop()
oper,_= operStack.Pop()
result =operStack.Cal(num1,num2, oper)
//将计算结果重新入数栈
numStack.Push(result)
//当前的符号压入符号栈
operStack.Push(temp)
}else{
operStack.Push(temp)
}
}
} else{ //说明是数
//处理多位数的思路
//1.定义一个变量 keepNum string, 做拼接
keepNum +=ch
//2.每次要向index的后面字符测试一下，看看是不是运算符，然后处理
//如果已经到表达最后，直接将 keepNum
ifindex == len(exp)-1{
val,_:=strconv.ParseInt(keepNum, 10,64)
numStack.Push(int(val))
} else{
//向index 后面测试看看是不是运算符 [index]
ifoperStack.IsOper(int([]byte(exp[index+1:index+2])[0])){
val,_:=strconv.ParseInt(keepNum, 10,64)
numStack.Push(int(val))
keepNum =""
}
}
}
//继续扫描
//先判断 index是否已经扫描到计算表达式的最后
ifindex +1== len(exp){
break
}
index++
}
//如果扫描表达式 完毕，依次从符号栈取出符号，然后从数栈取出两个数，
//运算后的结果，入数栈，直到符号栈为空
for{
ifoperStack.Top ==-1 {
break //退出条件
}
num1,_= numStack.Pop()
num2,_= numStack.Pop()
oper,_= operStack.Pop()
result =operStack.Cal(num1,num2, oper)
//将计算结果重新入数栈
numStack.Push(result)
}
//如果我们的算法没有问题，表达式也是正确的，则结果就是numStack 最后数
res, _:=numStack.Pop()
fmt.Printf("表达式%s =%v", exp,res)
}
20.9 递归
20.9.1 递归的一个应用场景[迷宫问题]
20.9.2 递归的概念
简单的说: 第归就是函数/方法自己调用自己,每次调用时传入不同的变量.第归有助于编程者解决
复杂的问题,同时可以让代码变得简洁。
20.9.3 递归快速入门
我列举两个小案例,来帮助大家理解递归，递归在讲函数时已经讲过(当时讲的相对比较简单)，这
里在给大家回顾一下递归调用机制
1) 打印问题
2) 阶乘问题
3) 快速入门的示意图
20.9.4 递归用于解决什么样的问题
1） 各种数学问题如: 8 皇后问题 , 汉诺塔, 阶乘问题, 迷宫问题, 球和篮子的问题(google 编程大
赛)
2） 将用栈解决的问题-->第归代码比较简洁
20.9.5 递归需要遵守的重要原则
1) 执行一个函数时，就创建一个新的受保护的独立空间(新函数栈)
2) 函数的局部变量是独立的，不会相互影响, 如果希望各个函数栈使用同一个数据，使用引用传递
3) 递归必须向退出递归的条件逼近【程序员自己必须分析】，否则就是无限递归，死龟了:)
4) 当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当函
数执行完毕或者返回时，该函数本身也会被系统销毁
20.9.6 举一个比较综合的案例,迷宫问题
 走代码：
package main
import(
"fmt"
)
//编写一个函数，完成老鼠找路
//myMap *[8][7]int:地图，保证是同一个地图，使用引用
//i,j 表示对地图的哪个点进行测试
funcSetWay(myMap *[8][7]int, i int,j int)bool {
//分析出什么情况下，就找到出路
//myMap[6][5]== 2
ifmyMap[6][5]== 2{
return true
} else{
//说明要继续找
ifmyMap[i][j]==0{ //如果这个点是可以探测
//假设这个点是可以通, 但是需要探测 上下左右
//换一个策略 下右上左
myMap[i][j]= 2
ifSetWay(myMap, i+ 1,j){ //下
return true
} elseifSetWay(myMap, i ,j +1){ //右
return true
} elseifSetWay(myMap, i -1,j){ //上
return true
} elseifSetWay(myMap, i ,j -1){ //左
return true
} else{ // 死路
myMap[i][j]= 3
return false
}
} else{ // 说明这个点不能探测，为1，是强
return false
}
}
}
funcmain() {
//先创建一个二维数组，模拟迷宫
//规则
//1. 如果元素的值为 1 ，就是墙
//2. 如果元素的值为 0, 是没有走过的点
//3. 如果元素的值为 2, 是一个通路
//4. 如果元素的值为 3， 是走过的点，但是走不通
varmyMap [8][7]int
//先把地图的最上和最下设置为1
fori :=0; i 哈希表(散列)
20.10.2 哈希表的基本介绍
散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也
就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做
散列函数，存放记录的数组叫做散列表。
20.10.3 使用 hashtable 来实现一个雇员的管理系统[增删改查]
 应用实例google 公司的一个上机题:
有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址..),当输入该员工
的id时,要求查找到该员工的 所有信息.
 要求:
1) 不使用数据库,尽量节省内存,速度越快越好=>哈希表(散列)
2) 添加时，保证按照雇员的id从低到高插入
 思路分析
1) 使用链表来实现哈希表, 该链表不带表头
[即: 链表的第一个结点就存放雇员信息]
2) 思路分析并画出示意图
3) 代码实现[增删改查(显示所有员工，按 id查询)]
package main
import(
"fmt"
)
//定义 emp
type Emp struct {
Id int
Name string
Next*Emp
}
//方法待定..
//定义 EmpLink
//我们这里的 EmpLink 不带表头,即第一个结点就存放雇员
type EmpLink struct {
Head *Emp
}
//方法待定..
//1. 添加员工的方法, 保证添加时，编号从小到大
func(this *EmpLink) Insert(emp *Emp){
cur:=this.Head // 这是辅助指针
varpre *Emp =nil // 这是一个辅助指针 pre 在cur 前面
//如果当前的 EmpLink 就是一个空链表
ifcur ==nil {
this.Head =emp //完成
return
}
//如果不是一个空链表,给emp找到对应的位置并插入
//思路是 让 cur 和 emp 比较，然后让pre 保持在 cur 前面
for{
ifcur !=nil {
//比较
ifcur.Id > emp.Id {
//找到位置
break
}
pre= cur//保证同步
cur= cur.Next
}else{
break
}
}
//退出时，我们看下是否将 emp添加到链表最后
pre.Next= emp
emp.Next= cur
}
//显示链表的信息
func(this *EmpLink) ShowLink(no int){
ifthis.Head == nil{
fmt.Printf("链表%d 为空\n",no)
return
}
//变量当前的链表，并显示数据
cur:=this.Head // 辅助的指针
for{
ifcur !=nil {
fmt.Printf("链表%d 雇员id=%d 名字=%s ->", no,cur.Id, cur.Name)
cur= cur.Next
} else{
break
}
}
fmt.Println()//换行处理
}
//定义 hashtable ,含有一个链表数组
type HashTablestruct {
LinkArr[7]EmpLink
}
//给HashTable 编写Insert 雇员的方法.
func(this *HashTable)Insert(emp *Emp){
//使用散列函数，确定将该雇员添加到哪个链表
linkNo:=this.HashFun(emp.Id)
//使用对应的链表添加
this.LinkArr[linkNo].Insert(emp) //
}
//编写方法，显示 hashtable 的所有雇员
func(this *HashTable)ShowAll() {
fori :=0; i <len(this.LinkArr); i++{
this.LinkArr[i].ShowLink(i)
}
}
//编写一个散列方法
func(this *HashTable)HashFun(id int)int{
return id%7//得到一个值，就是对于的链表的下标
}
funcmain() {
key :=""
id:=0
name:=""
varhashtable HashTable
for{
fmt.Println("===============雇员系统菜单============")
fmt.Println("input 表示添加雇员")
fmt.Println("show 表示显示雇员")
fmt.Println("find 表示查找雇员")
fmt.Println("exit 表示退出系统")
fmt.Println("请输入你的选择")
fmt.Scanln(&key)
switch key {
case"input":
fmt.Println("输入雇员id")
fmt.Scanln(&id)
fmt.Println("输入雇员name")
fmt.Scanln(&name)
emp:=&Emp{
Id : id,
Name :name,
}
hashtable.Insert(emp)
case"show":
hashtable.ShowAll()
case"exit":
default :
fmt.Println("输入错误")
}
}
}