or how our JavaScript is included in the page. Thus, a potentially malicious
party has the opportunity to apply changes to the DOM’s global object and the
corresponding DOM APIs, for instance via wrapping the APIs or creating new
DOM properties, that shadow the native implementations (see Sec 6.2). Hence,
under the assumption, that the integrating party (from now on “the attacker”)
is actively malicious, the resulting technical challenges are as follows:
(C1) No reliance on the elements in the global JavaScript scope: We
cannot control when our script is included. Hence, we do not know which
changes to the global scope have been conducted by the attacker.
(C1) No assumptions about the integrity of global DOM objects and
methods: Due to JavaScript’s highly dynamic characteristics, the at-
tacker can overwrite all global properties, functions, and objects within
the scope of the Web document, with only few notable exceptions, such as
the location DOM object. For this reason, our mechanism cannot make
any assumptions regarding the state or behavior of these objects. Instead,
it has to ensure their integrity before utilization.
(C1) Careful handling of conﬁdential data: All JavaScript in a Web doc-
ument is executed in a shared global space. This means that all unscoped
objects, functions, and values can be accessed by any JavaScript running
in the context of the document. In case data values exist that have to
be kept secret from the attacker, precautions have to be taken to avoid
information leakage.
In Section 6, we discuss how our solution ensures the integrity of the required
DOM APIs as well as how sensitive information are kept out of the attacker’s
reach.
3.4 A Defensive UI Interaction Strategy to Prevent LikeJacking
Based on the reasoning above, we now deﬁne our proposed UI interaction strat-
egy for Web widgets:
Tamper-Resistant LikeJacking Protection
271
The widget allows seamless user interaction only when the following conditions
are satisﬁed:
1. The predeﬁned visibility conditions have been successfully checked.
2. The integrity of the required DOM APIs, which are needed to execute the
visibility check, has been veriﬁed.
3. Both condition above have to be fulﬁlled for at least a pre-deﬁned timespan
before the actual user interaction happens (e.g., 500 ms), to avoid quick prop-
erty changes through the adversary immediately before the user interaction.
If one of these conditions has not been met, the widget either prevents user
interaction or executes a secondary veriﬁcation step through safe UI, such as
conﬁrmation pop-ups, Captchas, or similar measures.
In certain situations, the hosting page has legitimate reasons to temporarily
violate the visibility conditions. For instance the widget could be contained in an
initially hidden portion of the site, which is only visible after explicit user inter-
action, e.g., via hovering the mouse over a menu. For such cases, the protection
mechanism provides an API to signal the widget, that its visibility condition has
changed. This allows the protection script to re-execute the checking algorithm
and, in case of a positive result, re-enabling direct user interaction.
4 Verifying of Visibility Conditions
In general there are four diﬀerent conditions, that could lead to a DOM element
not being visible to the user: Either CSS properties have been set, that cause
the element to be invisible, obstruction DOM elements are rendered in front of
the element, the element’s rendering dimensions are reduced to a nearly invisible
size, or the element’s position is outside the current viewport’s boundaries.
In the following sections, we discuss how these conditions can be reliably
detected.
4.1 CSS-Based Visibility Prevention
Several CSS properties exist, that inﬂuence the visibility of DOM elements.
See Table 1 for a comprehensive overview. For each of the properties, unam-
biguous visibility conditions can be deﬁned, for instance, the condition that an
element’s opacity value has to be above a certain threshold. Checking these
properties via JavaScript is possible via the window.getComputedStyle() API,
which computes an element’s ﬁnal CSS property values that result after apply-
ing all matching CSS rules. While some properties are inherited directly (in our
case mainly the visibility property), most properties have to be checked both
for the element itself as well as for its direct DOM ancestor chain. With the
exception of opacity, all checked CSS values are absolute, i.e., the element’s
visibility is determined through a set of enumerable options. For instance in the
case of the visibility property, the possible values are visible, hidden, or
collapse. As an exception, the opacity property value is a composite property,
272
M. Johns and S. Lekies
Table 1. Relevant DOM and CSS properties (excluding vendor preﬁxed variants)
CSS Property Check condition Appl. elements Method
visibility
display
mask
opacity
positiona
dimensiona
element only
DOM chain
DOM chain
DOM chain
oﬀset chain
DOM chain
value
value
value
threshold
value
minimum
getComputedStyle()
getComputedStyle()
getComputedStyle()
getComputedStyle()
DOM properties
DOM properties
a
: Values influenced by CSS and DOM position, calculated via DOM properties
that has to be calculated via multiplying the individual opacity values present
in the element’s DOM ancestor chain. If a diversion of the predeﬁned condition
for one of these CSS properties could be identiﬁed, a potential attack is ﬂagged
and communicated to the widget.
4.2 Obstructing Overlays
CSS allows the positioning of DOM elements both in a relative and an abso-
lute fashion. This permits Web developers to create overlays in which one DOM
element is rendered on top other elements. This allows the adversary to (par-
tially) obstructed the widget with opaque overlays. Furthermore, through setting
the overlay’s pointer-events CSS property to none, the overlay will pass all
received user interaction to the underlying element, i.e., to the widget. This ef-
fectively enables a ClickJacking condition which leaves the widget’s own CSS
properties untouched.
To detect such situations, all intersecting DOM elements have to be identiﬁed.
To do so, the checking algorithm iterates over the embedding DOM tree’s nodes
and calculates the nodes’ position and dimensions. For all (partially) overlapping
elements, the pointer-event CSS property is obtained. If overlapping elements
with disabled pointer-events could be found, a potential attack is ﬂagged.
Likewise, in the case where signiﬁcant portions of the widget are obstructed
by standard elements. At the ﬁrst glance, this process exposes potential for
a performance issue. However, due to the eﬃcient DOM implementations of
today’s browsers, this process scales very well even for non-trivial DOM trees
with more than several thousand nodes (see Sec. 7.2 for details).
4.3 Element Size and Position
Side eﬀects of the DOM rendering process can also inﬂuence an element’s vis-
ibility: For one, the rendered dimensions of an element are of relevance. E.g.,
through setting both the rendering height and width to zero the element can
eﬀectively be hidden. To avoid such conditions, the widget can deﬁne minimum
value for width and height. To ensure, that the desired minimum dimensions
are met, the eﬀective size of an element has to be computed. An elements size
depends on two factors: The element’s own dimensions, determined through
Tamper-Resistant LikeJacking Protection
273
the DOM properties offsetWidth and offsetHeight, and the dimensions of
its DOM ancestors, under the condition, that on of these ancestors has set its
overflow CSS property to hidden. Thus, via walking through the widgets DOM
ancestor chain, its eﬀective size can be obtained.
Furthermore, the position of an element can be outside of the currently dis-
played viewport, hence, eﬀectively hiding it from the user. In general, such a
situation is not necessarily an indication that the page actively attempts to con-
ceal the element. As most pages are bigger than the available screen estate,
parts of the Web page are rendered legitimately outside of the current viewport.
This especially holds true for page height, i.e., page regions below the currently
viewed content. Hence, we have to take further measures to tell apart benign
from malicious situations.
4.4 Position Guarding
As outlined in Sec. 2.2, one of the ClickJacking variants moves the click target
quickly under the victims mouse pointer, just before a click is about to happen.
With visibility checks at isolated, discrete points in time, this attack variant
is hard to detect reliably. Hence, for position-changing based attack scenarios,
we utilize an additional indicator: After the other visibility veriﬁcation steps
have concluded correctly, the script injects an absolutely positioned, transparent
DOM overlay of it own, completely covering the widget as well as a small area
surrounding it (see Fig. 1).
The overlay has the purpose to register intended interaction with the wid-
get beforehand. This is achieved with a mouse-over event handler. Whenever
the user targets the widget with his mouse pointer, he automatically enters
the protection overlay. This causes the execution of the overlay’s eventhandler.
The eventhandler now conducts three steps: First, based on the received mouse
event, it veriﬁes that its own position within the DOM layout has not changed.
Then it checks that the widget’s visibility and position have not been tampered
with. If these two tests terminated positively, the overlay temporarily disable its
pointer-events, to allow interaction with the widget. Furthermore, the exact
time of this event is recorded for the ﬁnal veriﬁcation step (see Sec. 5.3).
4.5 Unknown Attack Variants
The presented visibility checking algorithms have been designed based on docu-
mented attack methods as well as on a systematical analysis of relevant DOM-
mechanisms. However, it is possible, that attack variants exist which are not
yet covered by the outlined checks. Especially, the versatility and power of CSS
has the potential of further, non-obvious methods to inﬂuence the visibility of
DOM elements. However, due to the nature of such attack variants, they will in
any case leave traces in the involved elements’ DOM or CSS properties. Thus, it
can be expected that adding checks for these indicators will be straight forward.
Furthermore, as the overlay-checking step (see Sec. 4.2) already requires probing
274
M. Johns and S. Lekies
properties of all DOM elements, newly discovered characteristics that need to
be validated, should at worst add a linear factor to the performance overhead.
5 Trusted Communication between the Protection Script
and the Widget
As motivated in Section 3.4, initially the widget disables all direct user inter-
action, until the visibility veriﬁcation script in the hosting page sends the sig-
nal, that all required conditions have been met. In this section, we outline this
communication channel’s implementation. As the protection script runs in an
untrusted context, speciﬁc measures have to be taken to ensure message in-
tegrity and authenticity. For this purpose, we rely on two language features of
JavaScript: The PostMessage-API and local variable scoping.
5.1 PostMessage
The PostMessage API is a mechanism through which two browser documents
are capable of communicating across domain boundaries in a secure manner [27].
A PostMessage can be sent by calling the method postMessage(message,
targetOrigin) of the document object that is supposed to receive the mes-
sage. While the message attribute takes a string message, the targetOrigin
represents the origin of the receiving document.
In order to receive such a message, the receiving page has to register an
event handler function for the “message” event which is triggered whenever a
PostMessage arrives. Particularly interesting for our protection mechanism are
the security guarantees oﬀered by this API:
1. Conﬁdentiality: The browser guarantees that a PostMessage is only delivered
to the intended recipient, if the targetOrigin speciﬁed during the method
call matches the recipient window’s origin. If conﬁdentiality is not required,
the sender may specify a wildcard (*) as targetOrigin.
2. Authenticity: When receiving a message via the event handler function, the
browser additionally passes some metadata to the receiving page. This data
includes the origin of the sender. Hence, the PostMessage API can be used
to verify the authenticity of the sending page.
Eﬀectively, this implies that whenever a widget receives a PostMessage from
it’s embedding page, it is able to obtain reliable information about its embedding
context.
5.2 Information Hiding via Closure Scoping
In general, the protection scripts runs in the origin of the adversary’s page.
Hence, according to the JavaScript’s Same-origin Policy, his scripts have un-
mitigated access to the shared global object space. Thus, all potentially secret
Tamper-Resistant LikeJacking Protection
275
Listing 1 Anonymous function creating a closure scoped shared secret
// Anonymous function without reference in the global object
( function (){
// Constructor for the checker object
var VisiCon = function ( s ){
var secret = s ;
[...]
// not visible outside of the object
}
// Store the secret upon initializati on in the closure
window . VisiChecker = new VisiCon ([[... shared secret ...]]);
...
})();
information, such as shared secrets between the protection script and the widget
have to kept out of reach for the adversary’s code. As Crockford has docu-
mented [5], this can be done with JavaScripts closure scoping. All information
stored in closures, such as the VisiCon object in Lst. 1, are not accessible from
the outside. Furthermore, as the encapsulating anonymous function leaves no
reference in the global scope, its source code cannot be accessed via toString()
and, hence, the secret value is eﬀectively kept out of reach for the adversary.
5.3 Resulting Communication Protocol
The protection script is implemented in the form of an anonymous function as
depicted above (see Lst. 1). Encapsulated in this function is a secret value, which
was provided by the script’s host and is shared with the widget. This value will