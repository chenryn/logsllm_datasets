![](img/d54f8b63-c5f7-4ab2-b062-15989c528811.png)
正如我们在前面的截图中看到的，GitHub 帐户成功链接到 Docker Hub 帐户。现在，我们可以继续配置自动化构建。
6.  从创建下拉菜单中选择创建自动构建选项，如下图所示:
![](img/1c81ffa2-9207-491e-a9b5-9dbb462eed90.png)
7.  您将看到两个选项:为 Github 创建自动构建和链接帐户以将您的帐户链接到 Bitbucket，如下图所示:
![](img/4d258a90-2e17-4c39-b288-64778d0c1f45.png)
我们将把我们的账户与比特币链接，因为我们还没有链接任何比特币账户。
8.  单击创建自动构建选项:
![](img/fdee48cb-0186-4276-84fc-a6b03b2e0ea1.png)
9.  点击[https://github.com/docker-cookbook/apache2](https://github.com/docker-cookbook/apache2)的岔口 apache2 选项:
![](img/5b7fa94e-0d48-4127-b31f-c0d3b32cdd84.png)
10.  提供简短描述，然后单击创建:
![](img/e051a8a4-e053-4321-885c-003ea9b059b0.png)
万岁！您已经成功地自动化了构建过程，当您在分叉的存储库中进行任何更改时，映像构建过程将被触发。
11.  现在，您可以导航到“构建详细信息”选项卡来查看构建状态。
# 它是如何工作的...
当我们为自动化构建选择一个 GitHub 存储库时，GitHub 会为该存储库启用 Docker 服务。您可以通过查看 GitHub 存储库中“设置”选项卡的“集成和服务”部分来确认这一点:
![](img/53af3d32-9809-4187-8465-a02685b7e1b3.png)
每当我们对任何源代码进行任何更改并提交到 GitHub 存储库中时，自动构建就会被触发，并使用 GitHub 存储库中的 Docker 文件构建 Docker 映像。
# 还有更多...
您可以通过导航到存储库中的 Dockerfile 选项卡来查看 Dockerfile。
您还可以通过在存储库的“构建设置”选项卡中链接另一个存储库，在更新另一个 Docker Hub 存储库时触发您的构建。
使用 Bitbucket 设置自动化构建的步骤几乎是相同的。自动构建的钩子在 Bitbucket 存储库的设置部分的钩子部分进行配置。
# 请参见
*   Docker 网站上的文档:
    *   [https://docs . docker . com/docker-hub/build/](https://docs.docker.com/docker-hub/builds/)
# 创建自定义基础映像
Docker 拥有丰富的基础映像库，我们强烈建议您选择一个适合您的应用的精简映像。但是，您可以选择从一开始就定制您的基础映像。在这里，在这个食谱中，我们将使用`debootstrap`来创建我们的 Ubuntu 18.04 LTS (Xenial Xerus)基础映像。`debootstrap`实用程序可以通过从适当的存储库中下载来创建任何基于 Debian 的系统。
# 准备好
使用以下命令在任何基于 Debian 的系统上安装`debootstrap`:
```
    $ apt-get install debootstrap     
```
# 怎么做...
请执行以下步骤:
1.  创建要在其上填充所有分发文件的目录:
```
        $ mkdir xenial 
```
2.  现在，使用`debootstrap`，在我们之前创建的目录中安装 Xenial Xerus:
```
        $ sudo debootstrap xenial ./xenial 
```
您将在安装 Xenial Xerus 的目录中看到类似于任何 Linux 根文件系统的目录树:
```
        $ ls ./xenial
        bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  
     root  run  sbin  srv  sys  tmp  usr  var 
```
3.  现在，我们可以使用以下命令将目录导出为 Docker 映像:
```
        $ sudo tar -C xenial/ -c . | docker image import - xenial  
```
4.  看`docker image ls`输出。你应该有一个以`xenial`为名字的新形象。
# 它是如何工作的...
`debootstrap`命令将所有 Ubuntu 18.04 (Xenial Xerus)包从包存储库中拉入目录。然后，它们被捆绑为一个 TAR 文件，并被推送到 Docker 映像导入命令来创建 Docker 映像。
# 请参见
*   `debootstrap`维基页面:
    *   [https://wiki.debian.org/Debootstrap](https://wiki.debian.org/Debootstrap)。
*   创建基础映像的替代方法:
    *   [https://docs.docker.com/articles/baseimg/](https://docs.docker.com/articles/baseimg/)。
# 使用基础映像创建最小映像
在前面的配方中，我们自定义创建了一个没有任何父映像的基础映像。然而，该映像被 Ubuntu 18.04 发行版附带的所有二进制文件和库所膨胀。通常，要运行一个应用，我们不需要映像中捆绑的大多数二进制文件和库。此外，它会留下很大的映像足迹，从而成为可移植性问题。为了克服这个问题，您可以勤奋地手工挑选将构成您的映像的二进制文件和库，然后捆绑 Docker 映像。或者，您可以使用 Docker 的保留映像(称为暂存映像)来构建。这个临时映像是一个明确的空映像，它不会给你的映像添加任何额外的层。此外，与前面的方法不同，您可以使用 Dockerfile 自动创建映像。在这个食谱中，我们将使用一个简单的构建器模式来创建一个静态链接的二进制文件，并使用一个暂存库映像来创建一个 Docker 映像。
# 准备好
首先，确保 Docker 守护程序正在运行，并且可以访问`gcc`和暂存映像。您还应该确保您有一个克隆的[https://github.com/docker-cookbook/scratch.git](https://github.com/docker-cookbook/scratch.git)，并且存储库包含`demo.c`和一个 Dockerfile。
`demo.c`的内容应如下:
```
#include                                                       void main()                                                            {                                                                                                                                        printf("Statically built for demo\n");                                
}
```
文件的内容应该如下:
```
FROM scratch
ADD demo /
CMD ["/demo"]
```
# 怎么做...
执行以下步骤，使用基本暂存映像创建较小的映像:
1.  更改存储库目录:
```
$ cd scratch
```
2.  现在，使用`gcc:7.2`运行时容器从`demo.c`文件构建一个静态可执行演示，如以下代码所示:
```
 $ docker container run --rm \ 
 -v ${PWD}:/src \
 -w /src \
 gcc:7.2 \
 gcc -static -o demo demo.c
```
3.  构建静态链接的可执行文件后，可以快速验证二进制文件:
![](img/31faeeb9-0aaa-43ff-a28a-a02c26aa8fdc.png)
4.  继续使用上一步创建的可执行演示从基本映像构建映像，如以下代码所示:
![](img/e3b287e0-8998-4201-b004-d140aee694f6.png)
5.  最后，让我们通过旋转前面映像中的容器并检查映像大小来验证映像:
![](img/d9438db0-6c51-4993-bc11-a94fa86cbd05.png)
显然，这个映像要小得多，Docker 映像只比可执行演示大 20 个字节。
# 它是如何工作的...
Docker 构建系统直观地理解`FROM`指令中的保留映像名称`scratch`，并开始捆绑映像，而不为基础映像添加任何附加层。因此，在这个配方中，Docker 构建系统只是捆绑了静态链接的可执行演示和映像的元数据。
# 还有更多...
如前所述，`scratch`映像不会给映像添加任何附加层。这里`docker image history`命令可以列出映像中的图层，如下代码所示:
![](img/1fd5375e-6668-42e1-8f3f-c5a6e13247dc.png)
我们可以看到，基础映像`scratch`没有额外的图层。
# 请参见
*   Docker 中心的文件:
    *   [https://hub . docker . com/_/scratch/](https://hub.docker.com/_/scratch/)
*   创建基础映像的替代方法:
    *   [https://docs.docker.com/articles/baseimg/](https://docs.docker.com/articles/baseimg/)
# 分多个阶段构建映像
在前面的配方中，我们使用`gcc`构建器容器创建了一个静态链接的可执行文件，然后使用`scratch`映像捆绑该可执行文件。使用构建器模式构建管道非常常见，因为在构建期间，您将需要重量级的构建和支持工具。然而，产生的工件在执行时通常不需要这些工具。因此，工件通常是使用具有附加功能的适当运行时构建的，然后生成的工件与运行时打包在一起，刚好足以运行工件。虽然这个解决方案运行得很好，但是这个构建管道的复杂性是通过脚本在 Docker 生态系统之外进行管理的。为了解决这个复杂问题，Docker 在版本`17.05`中引入了一个叫做多阶段构建的很酷的特性。
Docker 的多阶段构建使我们能够在单个 docker 文件中编排复杂的构建阶段。在 Dockerfile 中，我们可以用适当的父映像和构建生态系统来定义一个或多个中间阶段，以构建工件。Dockerfile 在使用 Dockerfile 构建映像时提供了前面提到的基本原语，以将工件复制到后续阶段，并最终构建一个具有足够运行时间和工件的 Docker 映像。
# 准备好
*   在我们开始之前，请确保 Docker 守护程序正在运行，并且可以访问`gcc`和`scratch`映像。此外，确保有一个克隆的[https://github.com/docker-cookbook/multistage.git](https://github.com/docker-cookbook/multistage.git)，并且存储库同时包含`src/app.c`和`Dockerfile.`
*   `src/app.c`的内容应如下:
```
#include 
void main()
{
    printf("This is a Docker multistage build demo\n");
}
```
*   `Dockerfile`的内容应如下:
```
FROM gcc:7.2 AS builder
COPY src /src
RUN gcc -static -o /src/app /src/app.c && strip -R .comment -s /src/app
FROM scratch
COPY --from=builder /src/app .
CMD ["./app"]
```
# 怎么做...
执行以下步骤，使用基本暂存映像创建较小的映像:
1.  更改存储库目录:
```
 $ cd multistage
```
2.  使用 Docker 映像`build`命令构建映像，如下图所示:
![](img/4c988846-f982-47b9-95c5-eac4fc21451f.png)
3.  现在映像已经成功构建，让我们从上一步创建的映像开始旋转容器，如下图所示:
![](img/8b111565-3e43-40f7-a400-c453ca7d661b.png)
# 它是如何工作的...
Docker 构建系统直观地理解`FROM`指令中的保留映像名称`scratch`，并开始捆绑映像，而不为基础映像添加任何附加层。所以在这个配方中，Docker 构建系统只是捆绑了静态链接的可执行演示和映像的元数据。
# 还有更多...
如前所述，`scratch`映像不会给映像添加任何附加层。`docker image history`命令在这里可以列出映像中的图层，如下图所示:
![](img/3bdf5888-95c7-47b1-acf7-f3689f136211.png)
我们可以看到，基础映像`scratch`没有额外的图层。
# 请参见
*   Docker 中心的文档:
[https://hub . docker . com/_/scratch/](https://hub.docker.com/_/scratch/)
# 可视化映像层次结构
Docker 提供了多个命令来了解文本格式的映像。然而，一张图片抵得上千言万语，因此我们必须能够通过图形来可视化映像层次。虽然 Docker 不支持任何映像可视化工具，但是有许多解决方案可以可视化映像层次结构。在本食谱中，我们将使用`nate/dockviz`容器和`Graphviz`可视化映像层次结构。
# 准备好
在开始之前，我们需要主机上的一个或多个 Docker 映像来运行 Docker 守护程序。我们还需要确保`Graphviz`已安装。
# 怎么做...
通过提供`images --dot`作为命令行参数来运行`nate/dockviz`容器，并将输出传送到`dot` ( `Graphviz`)命令，如下代码所示，以生成映像层次结构:
```
    $ docker run --rm \
                 -v /var/run/docker.sock:/var/run/docker.sock \
                 nate/dockviz \
                 images --dot  | dot -Tpng -o images-graph.png
```
以下是 Docker 主机中映像的图形视图:
![](img/f1e872f7-514d-4ac1-a3d9-09cbefedc914.png)
这里，在图形视图中，带有``的节点是映像中的层。
# 它是如何工作的...
`nate/dockviz`工具写在`go`中，迭代 Docker 映像的元数据并生成`Graphviz`点输出，使用`Graphviz`将其转换为`png`映像。
# 还有更多...
您也可以使用`nate/dockviz`来可视化链接容器之间的依赖关系。以下是可视化容器依赖关系的命令:
```
    $ docker run --rm \
                 -v /var/run/docker.sock:/var/run/docker.sock \
                 nate/dockviz \
                 containers --dot  | dot -Tpng -o containers-graph.png
```
# 请参见
*   `nate/dockerviz`上的文件:
[https://github . com/justonen/dock viz](https://github.com/justone/dockviz)