Room for Escape: 
Scribbling Outside the 
Lines of Template Security
1
Alvaro Muñoz  @pwntester
Staff Security Researcher 
Oleksandr Mirosh  @olekmirosh
Security Researcher 
2
Content Management Systems (CMS)
●
A CMS is an application that is used to manage 
web content
●
Allows multiple contributors to create, edit and 
publish. 
●
Content is typically stored in a database and 
displayed in a presentation layer based on a 
set of templates.
●
Templates normally support a subset of 
programming language capabilities so they are 
normally sandboxed
3
Our Research
●
What: 
○
.NET and Java based CMSs
●
Assumption: 
○
We can control Templates
●
Goal: 
○
Escape Template sandboxes
4
Agenda
1.
Introduction
2.
.NET (SharePoint)
○
Introduction to SharePoint ASPX pages
○
Safe Mode
○
Breaking out of Safe Mode
○
Demo
3.
Java
○
Engines and CMSs
○
Generic (object-based) Bypasses
○
Specific Engine Bypasses
4.
Conclusions
5
SharePoint
6
Site Pages
○
A.K.A. user-defined pages
○
play role of “templates” for 
rendering dynamic content 
○
stored in content database 
○
can be customized by regular users
○
processed in safe mode 
Application Pages
○
A.K.A. system pages
○
implement server-side logic 
○
stored on file system
○
cannot be changed by regular users
○
processed as regular unrestricted 
ASPX files
VS
SharePoint ASPX Pages
7
SPVirtualPathProvider
SystemPage.aspx
UserPage.aspx
safe mode
SPPageParserFilter
Content DB
normal mode
File System
8
SharePoint ASPX Pages
   " />  
directive
attribute in directive 
server-side code block
embedded server-side code
server-side control
data-binding expression
server-side comment
server-side include directive 
9
SharePoint ASPX Pages
Safe Mode for Site Pages
●
Compilation: NO (CompilationMode = “Never”)
●
Server-Side Code: NO 
●
Server-Side Includes from File System: NO
●
Web Controls: ONLY from AllowList (SafeControls elements in web.config) 
●
ASPX Directives: ONLY from AllowList 
●
Attributes for most of ASPX Directives: ONLY from AllowList 
●
Many other potentially dangerous elements are blocked  
10
SharePoint ASPX Pages
Is there any place where SPPageParserFilter is not used?
●
YES!
○
TemplateControl.ParseControl(content);
○
TemplateControl.ParseControl(content, true);
○
Filter is used at rendering time but not at design time.
11
SharePoint ASPX Pages
Is there any place where SPPageParserFilter is not used?
●
YES!
○
TemplateControl.ParseControl(content);
○
TemplateControl.ParseControl(content, true);
○
Filter is used at rendering time but not at design time.
●
BUT!
○
EditingPageParser.VerifyControlOnSafeList() method is used for content 
verification for all such places in SharePoint server   
○
ParseControl() method never causes compilation
■
No server-side code or other attacks that require compilation 
■
Only attacks with dangerous controls or directives are relevant
12
SharePoint ASPX Pages
●
Unsafe Web Controls Vector 1: 
○
invocation of public method from arbitrary Type 
ObjectDataSource: 
13
Post-escape vectors 
●
Unsafe Web Controls Vector 2: 
○
reading arbitrary XML file 
■
XmlDataSource with DataFile attribute
■
Xml with DocumentSource attribute
●
ASPX Server-Side Include (SSI) directive
○
reading arbitrary text file
or 
14
Post-escape vectors 
Arbitrary File Access to Remote Code Execution 
●
Unsafe Deserialization by ViewState
○
value of ValidationKey is required 
■
can be found in MachineKey section from web.config file  
■
can be present in internal SharePoint properties 
●
YSoSerial.Net tool can be used for payload generation 
https://github.com/pwntester/ysoserial.net 
15
Post-escape vectors 
Breaking out 
of Safe Mode
16
●
Target: 
○
Leak sensitive information
●
Where to search:
○
Files
○
Logs
○
DB tables
○
Process Memory
17
1/5  Access to sensitive server resources
CVE-2020-0974: Unsafe SSI in SharePoint   
Details 
●
EditingPageParser.VerifyControlOnSafeList() with blockServerSideIncludes = 
false during validation of ASPX markup:
●
webPartXml parameter in RenderWebPartForEdit method of the Web Part Pages 
service is processed in Design mode
// Microsoft.SharePoint.ServerWebApplication
bool IServerWebApplication.CheckMarkupForSafeControls(string Markup, 
RegisterDirectiveManager regDirManager) {
...
   EditingPageParser.VerifyControlOnSafeList(Markup, regDirManager, this._spWeb, false);
...
18
1/5  Access to sensitive server resources
CVE-2020-0974: Unsafe SSI in SharePoint   
Exploitation 
●
Payload:
●
Vulnerable WebAPI endpoint:
○
http:///_vti_bin/WebPartPages.asmx
●
Result:
○
Content of web.config file with ValidationKey 
○
Arbitrary code execution by Unsafe Deserialization (ViewState) 
19
1/5  Access to sensitive server resources
●
Target: 
○
Find allowed elements with 
potentially dangerous behavior
●
Where to search:
○
List of allowed elements 
20
2/5 Abusing not-so-safe items from Allowlist
CVE-2020-1147: Unsafe deserialization in control from SafeControl list   
Details 
●
Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView
●
XmlSerializer with controlled Type in DataSet.ReadXml()
○
https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf 
// Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView
protected void PopulateDataSetFromCache(DataSet ds) {
   string value = SPRequestParameterUtility.GetValue(this.Page.Request, 
"__SUGGESTIONSCACHE__", SPRequestParameterSource.Form);
   using (XmlTextReader xmlTextReader = new XmlTextReader(new 
System.IO.StringReader(value)))
     ds.ReadXml(xmlTextReader);
21
2/5 Abusing not-so-safe items from Allowlist
CVE-2020-1147: Unsafe deserialization in control from SafeControl list    
Exploitation 
●
ASPX page:
●
Result:
○
Arbitrary code execution by unsafe deserialization  
22
2/5 Abusing not-so-safe items from Allowlist
●
Target: 
○
Write/Read sensitive 
configuration parameters
○
Write/Read sensitive information 
in server/application internals  
●
Where to search:
○
Anywhere user can specify 
names of properties or attributes 
for read or write access
23
3/5 Abusing nested properties/attributes
●
One level of properties/attributes is supported 
Examples:
○
AllowList
■
can be relatively easy to verify 
■
can be considered as safe after proper verification of AllowList elements 
○
BlockList
■
difficult to verify 
■
potential ways for bypassing 
●
Nested properties/attributes are supported 
Examples: 
○
Often only “starting point” is verified 
○
often only “starting point” is verified 
○
should not be considered as safe in this case
user.name, Menu.SelectedValue
request.authuser.name, Menu.SelectedItem.Text
24
3/5 Abusing nested properties/attributes
●
One level of properties/attributes is supported 
Examples:
○
AllowList
■
can be relatively easy to verify 
■
can be considered as safe after proper verification of AllowList elements 
○
BlockList
■
difficult to verify 
■
potential ways for bypassing 
●
Nested properties/attributes are supported 
Examples: 
○
Often only “starting point” is verified 
○
Should not be considered as safe in this case
○
It is not a tree! It is a network!
ft
l “ t
ti
i t” i
ifi d
Menu.Page.ModelBindingExecutionContext.HttpContext.ApplicationInstance
user.name, Menu.SelectedValue
request.authuser.name, Menu.SelectedItem.Text
25
3/5 Abusing nested properties/attributes
CVE-2020-1069: Abusing write access to nested properties in SharePoint   
Details 
●
allowed control WikiContentWebpart passes user input into ParseControl()
●
VirtualPath is defined from Page.AppRelativeVirtualPath
●
SPPageParserFilter applies Safe Mode based on this VirtualPath
○
If we change Page.AppRelativeVirtualPath to the path of one of the Application Pages, Safe Mode 
will be disabled!   
// System.Web.UI.TemplateControl
public Control ParseControl(string content, bool ignoreParserFilter) {
return TemplateParser.ParseControl(content, 
VirtualPath.Create(this.AppRelativeVirtualPath), ignoreParserFilter); }
// Microsoft.SharePoint.WebPartPages.WikiContentWebpart
protected override void CreateChildControls() {...
Control obj = this.Page.ParseControl(this.Directive + this.Content, false);
26
3/5 Abusing nested properties/attributes
CVE-2020-1069: Abusing write access to nested properties in SharePoint      
Exploitation 
●
New value for Page.AppRelativeVirtualPath :
●
BUT Page property is not assigned yet 
●
Solution: we can delay assignment by Data Binding:
       Unsafe ASPX markup
'>
       Unsafe ASPX markup
27
3/5 Abusing nested properties/attributes
CVE-2020-1069: Abusing write access to nested properties in SharePoint       
Exploitation 
●
Payload:
●
Result:
○
Arbitrary code execution 
   '> 
28
3/5 Abusing nested properties/attributes
SharePoint 
DEMO
(CVE-2020-1069) 
CVE-2020-1103: Abusing read access to nested properties in SharePoint    
Details  
●
ControlParameter 
○
binds value of public property from a different Control to SelectParameter 
○
supports nested properties 
●
XmlUrlDataSource 
○
sends values of SelectParameters to attacker controlled server
30
3/5 Abusing nested properties/attributes
CVE-2020-1103: Abusing read access to nested properties in SharePoint    
Details  
●
SharePoint Online servers use unattended configuration and configuration 
parameters include value of ValidationKey 
●
Configuration parameters will be stored in SPFarm.InitializationSettings
●
Access ValidationKey value from allowed TemplateContainer control 
this.Web.Site.WebApplication.Farm.InitializationSettings[MachineValidationKey]
31
3/5 Abusing nested properties/attributes
CVE-2020-1103: Abusing read access to nested properties in SharePoint       
Exploitation 
●
Payload:
●
Result:
○
value of ValidationKey 
○
Arbitrary code execution by Unsafe Deserialization (ViewState) 
32
3/5 Abusing nested properties/attributes
●
Target: 
○
Unsafe object instantiation 
●
What to search for: 
○
Deserializers 
○
JSON unmarshallers