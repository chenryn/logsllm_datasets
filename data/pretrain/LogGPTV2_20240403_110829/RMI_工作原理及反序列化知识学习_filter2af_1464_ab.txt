                DataOutputStream var10 = new DataOutputStream(var9);
                int var11 = this.socket.getPort();
                if (TCPTransport.tcpLog.isLoggable(Log.BRIEF)) {
                    TCPTransport.tcpLog.log(Log.BRIEF, "accepted socket from [" + this.remoteHost + ":" + var11 + "]");
                }
                byte var15 = var5.readByte(); // 获取一个 Byte 值，由服务端 socket 通信知道，值为 75
                TCPEndpoint var12;
                TCPChannel var13;
                TCPConnection var14;
                switch(var15) {
                case 75:
                    var10.writeByte(78); // socket 输出流中写入一个 Byte 值 78。（服务端获取值为 78，所以不会抛出异常）
                    if (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) {
                        TCPTransport.tcpLog.log(Log.VERBOSE, "(port " + var2 + ") " + "suggesting " + this.remoteHost + ":" + var11);
                    }
                    var10.writeUTF(this.remoteHost); // socket 输出流中写入远程 host 值
                    var10.writeInt(var11); // socket 输出流中写入远程 post 值
                    var10.flush();
                    String var16 = var5.readUTF(); // 获取一个 UTF 值
                    int var17 = var5.readInt(); // 获取一个 Int 值
                    if (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) {
                        TCPTransport.tcpLog.log(Log.VERBOSE, "(port " + var2 + ") client using " + var16 + ":" + var17);
                    }
                    var12 = new TCPEndpoint(this.remoteHost, this.socket.getLocalPort(), var1.getClientSocketFactory(), var1.getServerSocketFactory());
                    var13 = new TCPChannel(TCPTransport.this, var12);
                    var14 = new TCPConnection(var13, this.socket, (InputStream)var4, var9);
                    TCPTransport.this.handleMessages(var14, true); // 调用 TCPTransport 类的 handleMessages 方法继续做处理
                    return;
                ...
                }
            }
            TCPTransport.closeSocket(this.socket);
        } catch (IOException var32) {
            TCPTransport.tcpLog.log(Log.BRIEF, "terminated with exception:", var32);
            return;
        } finally {
            TCPTransport.closeSocket(this.socket);
        }
    }
    void handleMessages(Connection var1, boolean var2) {
        int var3 = this.getEndpoint().getPort();
        try {
            DataInputStream var4 = new DataInputStream(var1.getInputStream());
            do {
                int var5 = var4.read(); // 获取一个值，由服务端知道值为 80 
                if (var5 == -1) {
                    if (tcpLog.isLoggable(Log.BRIEF)) {
                        tcpLog.log(Log.BRIEF, "(port " + var3 + ") connection closed");
                    }
                    return;
                }
                if (tcpLog.isLoggable(Log.BRIEF)) {
                    tcpLog.log(Log.BRIEF, "(port " + var3 + ") op = " + var5);
                }
                switch(var5) {
                case 80:
                    StreamRemoteCall var6 = new StreamRemoteCall(var1); // 创建 StreamRemoteCall 对象
                    if (!this.serviceCall(var6)) { // 调用本类 serviceCall 方法，大致为读取数据创建 ObjID 对象，然后获取 dispatcher，调用对应类的 dispatch 方法（dispatcher 类为 sun.rmi.registry.RegistryImpl_Skel）
                        return;
                    }
                    break;
                ...
                }
            } while(var2);
        } catch (IOException var17) {
            if (tcpLog.isLoggable(Log.BRIEF)) {
                tcpLog.log(Log.BRIEF, "(port " + var3 + ") exception: ", var17);
            }
        } finally {
            try {
                var1.close();
            } catch (IOException var16) {
                ;
            }
        }
    public boolean serviceCall(final RemoteCall var1) {
        try {
            ObjID var40;
            try {
                var40 = ObjID.read(var1.getInputStream()); // 获取输入，创建 ObjID 对象
            } catch (IOException var34) {
                throw new MarshalException("unable to read objID", var34);
            }
            Transport var41 = var40.equals(dgcID) ? null : this;
            Target var5 = ObjectTable.getTarget(new ObjectEndpoint(var40, var41));
            final Remote var38;
            if (var5 != null && (var38 = var5.getImpl()) != null) {
                final Dispatcher var6 = var5.getDispatcher();
                var5.incrementCallCount();
                boolean var8;
                try {
                    transportLog.log(Log.VERBOSE, "call dispatcher");
                    final AccessControlContext var7 = var5.getAccessControlContext();
                    ClassLoader var42 = var5.getContextClassLoader();
                    Thread var9 = Thread.currentThread();
                    ClassLoader var10 = var9.getContextClassLoader();
                    try {
                        var9.setContextClassLoader(var42);
                        currentTransport.set(this);
                        try {
                            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                                public Void run() throws IOException {
                                    Transport.this.checkAcceptPermission(var7);
                                    var6.dispatch(var38, var1); // 调用 \sun\rmi\server\UnicastServerRef.class 类的 dispatch 方法,最终调用 sun.rmi.registry.RegistryImpl_Skel 类的 dispatch 方法
                                    return null;
                                }
                            }, var7);
                            return true;
                        } catch (PrivilegedActionException var32) {
                            throw (IOException)var32.getException();
                        }
                    } 
            ...
        }
        return true;
    }
    sun.rmi.registry.RegistryImpl_Skel.class
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
            if (var4 != 4905912898345647071L) {
                throw new SkeletonMismatchException("interface hash mismatch");
            } else {
                RegistryImpl var6 = (RegistryImpl)var1;
                String var7;
                Remote var8;
                ObjectInput var10;
                ObjectInput var11;
                switch(var3) {
                case 0: // 服务端、客户端调用 bind 方法
                    try {
                        var11 = var2.getInputStream();
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                    } catch (IOException var94) {
                        throw new UnmarshalException("error unmarshalling arguments", var94);
                    } catch (ClassNotFoundException var95) {
                        throw new UnmarshalException("error unmarshalling arguments", var95);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.bind(var7, var8); // 调用 RegistryImpl 类的 bind 方法为 bindings 字段赋值，会被写入到 WeakRef 中
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var93) {
                        throw new MarshalException("error marshalling return", var93);
                    }
                case 1: // 服务端、客户端调用 list 方法
                    var2.releaseInputStream();
                    String[] var97 = var6.list();
                    try {
                        ObjectOutput var98 = var2.getResultStream(true);
                        var98.writeObject(var97);
                        break;
                    } catch (IOException var92) {
                        throw new MarshalException("error marshalling return", var92);
                    }
                case 2: // 服务端、客户端调用 lookup 方法
                    try {
                        var10 = var2.getInputStream();
                        var7 = (String)var10.readObject();
                    } catch (IOException var89) {
                        throw new UnmarshalException("error unmarshalling arguments", var89);
                    } catch (ClassNotFoundException var90) {
                        throw new UnmarshalException("error unmarshalling arguments", var90);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var8 = var6.lookup(var7);
                    try {
                        ObjectOutput var9 = var2.getResultStream(true);
                        var9.writeObject(var8);
                        break;
                    } catch (IOException var88) {
                        throw new MarshalException("error marshalling return", var88);
                    }
                case 3: // 服务端、客户端调用 rebind 方法
                    try {
                        var11 = var2.getInputStream();
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                    } catch (IOException var85) {
                        throw new UnmarshalException("error unmarshalling arguments", var85);
                    } catch (ClassNotFoundException var86) {
                        throw new UnmarshalException("error unmarshalling arguments", var86);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.rebind(var7, var8);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var84) {
                        throw new MarshalException("error marshalling return", var84);
                    }
                case 4: // 服务端、客户端调用 unbind 方法
                    try {
                        var10 = var2.getInputStream();
                        var7 = (String)var10.readObject();
                    } catch (IOException var81) {
                        throw new UnmarshalException("error unmarshalling arguments", var81);
                    } catch (ClassNotFoundException var82) {
                        throw new UnmarshalException("error unmarshalling arguments", var82);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.unbind(var7);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var80) {
                        throw new MarshalException("error marshalling return", var80);
                    }
                default:
                    throw new UnmarshalException("invalid method number");
                }
            }
        }
通过注册中心和服务端的通信可以看到：1、服务端往 `socket` 中写入序列化数据时，注册中心对用 `case` 一定会做反序列化处理；2、注册中心往
`socket` 中写入序列化数据时，服务端也一定会做反序列化处理；得出两个结论：1、我们可以通过不同的方法构造自己的 `socket`
通信；2、如果注册中心为靶机服务，服务端为攻击端，使用原生的 `RMI` 通信会有反被打的可能。
3、客户端
由 2 分析知道，客户端调用 `lookup` 方法时，注册中心会调用 `RegistryImpl_Skel` 类 `dispatch` 方法的
`case` 2 做处理。
    // RegistryImpl_Skel 类的 dispatch 方法
    case 2:
        try {
            var10 = var2.getInputStream();
            var7 = (String)var10.readObject(); // 得到客户端调用 lookup 方法传入的参数值 "vince"
        } catch (IOException var89) {
            throw new UnmarshalException("error unmarshalling arguments", var89);
        } catch (ClassNotFoundException var90) {
            throw new UnmarshalException("error unmarshalling arguments", var90);
        } finally {
            var2.releaseInputStream();
        }
        var8 = var6.lookup(var7); // 返回一个代理对象（调用 RegistryImpl 类的 lookup 方法从 bindings 字段获取 key 为 var7 的 value 值）
        try {
            ObjectOutput var9 = var2.getResultStream(true);
            var9.writeObject(var8); // 数据流中写入代理对象
            break;
        } catch (IOException var88) {
            throw new MarshalException("error marshalling return", var88);
        }
客户端通过 `lookup` 方法返回的代理对象调用远程方法
    IService service = (IService) registry.lookup("vince"); // 代理对象
    String result = service.queryName("jack"); // 实际调用 RemoteObjectInvocationHandler 类的 invoke 方法
然后客户端新建一个 `socket` 连接和服务端，客户端写入 Int 值 -1 和 Long 值(method 的 hash 值)，服务端在
`\sun\rmi\server\UnicastServerRef.class` 类的 `dispatch` 获取 Int 值和 Long 值做处理。
    public void dispatch(Remote var1, RemoteCall var2) throws IOException {
        try {
            long var4;
            ObjectInput var40;
            try {
                var40 = var2.getInputStream();
                int var3 = var40.readInt();
                if (var3 >= 0) { // 1、Int 值大于等于 0 时，注册中心处理 bind、lookup 等方法的请求；2、Int值小于 0 时，注册中心处理远程方法调用请求；
                    if (this.skel != null) {
                        this.oldDispatch(var1, var2, var3);
                        return;
                    }
                    throw new UnmarshalException("skeleton class not found but required for client version");
                }
                var4 = var40.readLong();
            } catch (Exception var36) {
                throw new UnmarshalException("error unmarshalling call header", var36);
            }
            MarshalInputStream var39 = (MarshalInputStream)var40;
            var39.skipDefaultResolveClass();
            Method var8 = (Method)this.hashToMethod_Map.get(var4);
            if (var8 == null) {
                throw new UnmarshalException("unrecognized method hash: method not supported by remote object");
            }
            this.logCall(var1, var8);
            Class[] var9 = var8.getParameterTypes();
            Object[] var10 = new Object[var9.length];
            try {
                this.unmarshalCustomCallData(var40);
                for(int var11 = 0; var11 < var9.length; ++var11) {
                    var10[var11] = unmarshalValue(var9[var11], var40);
                }
            } catch (IOException var33) {
                throw new UnmarshalException("error unmarshalling arguments", var33);