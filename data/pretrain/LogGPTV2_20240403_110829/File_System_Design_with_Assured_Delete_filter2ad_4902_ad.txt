when  the  F-table  must  be  modified.  Outside  of  the
encrypted  F-table,  the  file  system  will  need  to  keep
track of which F’s are available for new files.
When  the  encrypted  F-table  (together  with  the
encrypted  K)  is  migrated  to  replicated  non-volatile
storage,  then  the  ephemerizers  can  be  informed  that
they can delete the previous public key, and they will
generate a new public key and give it to the file system.
The reason it is important to have key rollover and
key deletion under the control of the file system, rather
than having it done on a predetermined schedule, with
keys shared by many organizations, is that one organi-
zation’s  file  system  might  be  down  for  an  extended
period of time, perhaps due to a natural disaster. If the
ephemerizers delete keys on a schedule, in particular,
quickly  enough  to  ensure  that  a  deleted  file  will
become  unreadable  after  a  relatively  short  window,
then  if  a  file  system  were  down  for  longer  than  that
window, all of its data would become forever unrecov-
erable.
On  the  other  hand,  if  the  ephemerizers  rolled  over
keys on their own schedule (say once per week), then
the ephemerizer would not need to use custom keys for
Ephemerizer P, per file system; public keys Pcurrent, Pprevious
Ephemerizer Q, per file system; public keys Qcurrent, Qprevious
File system’s volatile storage
F1, F2, F3, F4, ...F100000
K: key with which the current backup of the F-table will be encrypted
The F-table: a key for each file
that is subject to on-demand delete
File system’s local nonvolatile storage
Encrypted File
index into F-table
encrypted with
F3
Backup of F-Table
enc. with G
{K}Pcurrent, {K}Qcurrent
enc. with K
F1, F2, F3, F4, ...F100000
Figure 3. The on-demand scheme
each file system; instead, as with time-based keys, all
file systems could use the same “current” and “previ-
ous”  keys,  and  again,  could  communicate  with  the
ephemerizer  anonymously.  If  the  scalability  of  key-
sharing across customers were considered an important
enough advantage of the on-demand scheme, then the
disadvantage above (the danger of losing all data if a
file system were down for longer than the ephemeriz-
ers’ key rollover window) could be lessened by allow-
ing  some  sort  of  emergency  procedure  in  very  rare
cases,  for  retaining  keys  longer  than  the  normal  roll-
over  period.  Customers  wanting  on-demand  with
shared keys would need to understand that key rollover
might  be  extended  sometimes  due  to  emergencies  of
other customers.
Note that although it is not strictly necessary, it is a
performance advantage to store K (the secret key with
which the F-table on nonvolatile storage is encrypted)
in  volatile  storage.  That  way  it  is  not  necessary  to
decrypt the entire F-table and store it in volatile mem-
ory.  Instead,  when  needed,  individual  F’s  can  be
decrypted using K. A new F can be created by encrypt-
ing the newly created F with K, and storing it on non-
volatile storage.
However, if an F is deleted from the F-table, a new
secret  K’  must  be  generated,  and  the  entire  F-table
must be stored, encrypted with K’, on local nonvolatile
storage, and then the previous K must be forgotten.
3.3.1 A Downside of the On-Demand scheme
On the surface, the on-demand scheme is attractive.
It is very scalable. The ephemerizer only needs to store
2 keys to support a file system that might have thou-
sands of users and millions of files. It can support both
pre-determined expiration times  (with  the  file system
needing  to  find  and  delete  expired  F’s  from  the  F-
table), and on-demand delete of individual files.
However,  compared with the time-based  expiration
scheme we present in section 3.2, there is a potential
serious reliability issue. With the on-demand scheme,
there  is  a  window  from  the  time  a  file  is  securely
deleted,  until  the  key  with  which  the  most  recent  F-
table  containing  that  file’s  key  is  discarded  by  the
ephemerizer. Let’s say that window is 3 days. So the
file is not really securely deleted until that window has
passed. Which means we might want that window to be
small.
However, suppose the file system were silently com-
promised, and it took weeks to notice it. Somehow the
corrupted file system was  corrupting the F-table, and
keys  for  important  files  that  were  not  recently
accessed,  were  corrupted.  Once  the  ephemeral  key
with  which  the  last  good  copy  of  the  F-table  is  dis-
carded, there is no way to recover those files.
In contrast, the time-based scheme is much safer. As
long as the file system is working properly when a file
is  created,  and  the  file  (and  its  encrypted  key)  are
safely  backed  up,  a  subsequent  corruption  of  the  file
system will not harm that file. It is always possible to
restore the state of the world as of some time past, and
all files that existed then, and have not yet expired, will
be recoverable. (If the files have expired, regardless of
what time the file system thinks it is, they cannot be
recovered  because  the  ephemerizers  would  have
deleted their expired keys).
Some products that do key management for storage,
which employ a key manager station (KMS) that keeps
a  database  of  keys,  are  similar  to  our  on-demand
scheme, and have the same disadvantage. In such prod-
ucts,  there  are  often  multiple  KMS’s  which  synchro-
nize with each other. If the database of keys is backed
up  outside  the  KMS’s  on  backup  media  so  that  the
KMS database can be recovered if all KMS’s fail, then
there is no assured delete. If the only copies of the key
database are in the KMS’s, then a single KMS that tells
the  others  to  delete  keys  can  cause  unintended  key
deletion, which can result in data becoming unrecover-
able, with the problem possibly not being detected for a
long time.
3.4  Custom class of file
It might be desirable to have some individual secrets
maintained  at  the  ephemerizer.  This  might  be  useful,
for instance, to protect a set of data that might be cap-
tured by an enemy. Rather than destroying the data, by
having  the  ephemerizer  destroy  the  key,  if  the
ephemerizer keeps a custom public key for that set of
data,  the  volatile  storage  at  the  file  system  can  be
destroyed, and the ephemerizer can be informed that it
should  lock  the  key,  so  that  only  some  extraordinary
mechanism  could  be  used  to  unlock  the  key;  for
instance,  by  having  a  high-ranking  person  personally
visit the ephemerizer site.
Such  a  key  must  not  be  shared  across  clients,
because it must be lockable, or deletable, on demand.
As with the time-based scheme, the file system invents
a  secret  S  when  the  class  is  first  created.  Then  it
requests each ephemerizer it wishes to use to create a
corresponding public key for that class.
Why does this scheme not suffer from the problem
described  in  section  3.3.1?  The  reason  is  that  in  this
scheme, if the file system is not compromised when the
class key for a class of files is created, and that class
key is copied, encrypted with the ephemerizers’ keys,
onto stable replicated storage, then as long as a quorum
of  ephemerizers  still  retain  their  key  associated  with
that  file  class,  the  secret  file  class  key,  and  all  data
encrypted with that key, can be recovered from back-
ups, regardless of any subsequent compromise of the
file system. Deletion of a class key at each ephemerizer
requires a very conscious and auditable action. As long
as  reasonable  human  mechanisms  are  in  place  to
ensure  that  class  keys  are  only  deleted  when,  for
instance,  a  quorum  of  system  administrators  agree,
classes will not accidentally become unreadable.
With  the  on-demand  scheme,  the  file  system  is
trusted  to  maintain  and  modify  the  F-table,  and  if  it
writes out a corrupted F-table, this may be undetectable
until it is too late (once the ephemerizers delete the key
with  which  old  backups  of  the  F-table  have  been
encrypted, there is no going back).
3.5  Combined File Types
It is straightforward for the file system to maintain
files with the different forms of assured delete, together
with files that cannot be assuredly deleted. 
(cid:127) Files  of  assured  delete  classes  (time-based  or  cus-
tom) each are encrypted with a class master key, and
the class master key is encrypted on backup media
with a corresponding ephemerizer public key, and
then with G.
(cid:127) Files without assured delete are also encrypted with
a class master key S, but this S is only stored
encrypted on backup with G (not with an extra wrap-
ping with an ephemerizer public key).
(cid:127) Files  that  are  capable  of  being  on-demand  deleted
are encrypted with keys F, stored in an F-table, and
the F-table is backed up by encrypting it with a ran-
domly chosen key K, then encrypting K with the
“current” public key of the ephemerizer(s), and
encrypting the encrypted K with G.
It is also possible to have a file fit into more than one
category  by  encrypting  the  file  key  multiple  times,
once for each of the categories. For instance, if a file
has an expiration time, but also should be on-demand
deletable, the file should be encrypted with K, and then
K should be encrypted with both an F from the F-table
and the appropriate class key S. The metadata would
indicate which F and which S would need to be used to
decrypt  K.  If  any  of  the  keys  upon  which  the  file
depends become unavailable (i.e., if it expires, or if it is
assuredly  deleted  before  the  expiration  date),  the  file
becomes unrecoverable.
Similarly straightforward to implement is the OR of
one of more categories. For instance, if a file should be
recoverable if either of two classes is still recoverable,
then the  file’s key K is stored twice in the metadata;
once  encrypted  with  the  first  class’s  S  key,  and  once
encrypted with the second class’s S key.
4. Layering with an end-to-end encryption 
scheme
Our  scheme  is  transparent  to  storage  (which  is
unaware of the encryption). Our scheme does protect
data  on  backup  media,  since  all  the  file  system  data
will be encrypted. It is also transparent to clients, other
than the ability for clients to specify, when creating a
file,  that  the  file  should  be  assuredly  deletable.  One
reasonable  interface  is  to  allow  a  directory  (and
descendents) to be associated with an ephemeral cus-
tom key, and/or to allow a particular file to be created
with an expiration date, and/or to specify that a particu-
lar file should be on-demand deletable.
Our  scheme  alone  does  not  provide  end-to-end
encryption. In other words, if Alice creates a file that
she wants only Bob and Carol to read, unless there is a
layer  of  encryption  above  what  our  system  provides,
the file system will be able to read the file, and Alice
will have to trust the file system to enforce the ACL
(that  specifies  only  Bob  and  Carol  should  be  able  to
read the file).
If instead Alice would like to do end-to-end encryp-
tion, she would do it exactly as she would in a normal
file system, by encrypting the file with her own chosen
key  J,  and  storing  J  encrypted  with  each  authorized
recipient’s public key along with the encrypted file, in
a way transparent to our layer of the file system. Our
layer would see everything Alice stores (including the
encrypted J) as data. If Alice wants to store a file for
Bob and Carol that will expire, Alice stores the file as
she would ordinarily, for Bob and Carol, and specifies
to  our  level  the  file  system,  the  expiration  date.  Our
level  of  the  file  system  chooses  its  own  file  key  K,
encrypts  everything  Alice  would  store  with  K,  and
stores K encrypted with the corresponding class key, as
what our level of the file system interprets as metadata
for the file.
When Bob  asks to  retrieve the file, the file system
enforces the ACL, notes Bob is authorized, decrypts K
with the class key, decrypts the “data”, and sends it all
to Bob. Bob interprets what he receives as metadata (J
encrypted  with  his  public  key),  followed  by  the  file
encrypted with J.
The  data  will  be  doubly  encrypted,  but  secret  key
encryption  can  be  done  without  loss  of  performance
today, especially with hardware accelerators.
5. Building an Ephemerizer
Ideally an ephemerizer would contain a tamper-resis-
tant component that generates the ephemeral keys and
does decryptions, and never divulges the private keys.
The  remainder  of  the  ephemerizer  functions,  e.g.,
responding to decryption commands, or commands for
creating custom keys, can be implemented on a general
purpose machine. For time-based keys, once a day the
ephemerizer can overwrite (in the tamper-resistant por-
tion) yesterday’s key with a new key.
6. Protecting the master class keys
If the file system is built on a general purpose com-