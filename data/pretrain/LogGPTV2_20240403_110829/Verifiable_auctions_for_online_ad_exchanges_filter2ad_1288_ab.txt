Although the protocol appears to provide only greater-than proofs,
we will show below how to obtain less-than proofs.
The main idea of the protocol is to encode an integer in the length
of a hash chain, publish the tail of the chain as the commitment, and
later publish an intermediate value in the chain as the proof.
Others have used hash chains [36] for various purposes, includ-
ing to encode integers [41, 50]. There is also a rich literature on
privacy-preserving comparisons [20, 59] (we compare our tech-
nique to others [18, 21, 22, 28] in Section 7.7). However, to the
best of our knowledge, the protocol detailed below is the ﬁrst to
build privacy-preserving integer comparisons from hash chains.
Details. The protocol relies on a function H, which for technical
reasons we model as a random oracle, and which we instantiate
with a cryptographic hash function, such as SHA-256.3 As notation,
we write Hi(s) to mean composing H i times: H(··· H(s)··· ).
Figure 2 depicts the protocol. The commitment is Hx(s), where
s is equal to H(s(cid:48)), for some randomly generated secret s(cid:48) that is
distinguishable from elements in the range of H. In response to a
query q, the prover returns Hx−q(s) as the proof, or ⊥.
This protocol provides the four guarantees above, as follows. For
completeness, if x ≥ q, then Hx−q(s) convinces the querier: the
querier applies H q times to the proof and obtains Hx(s). For sound-
3A random oracle [16] maps each input to a randomly chosen output. It
has been shown that random oracles cannot exist, but it is a common
and accepted practice to use cryptographic hash functions as heuristic
substitutes when implementing protocols.
UserPublisher'sContentAd SpaceWeb PagePublisherSeller17Ad Exchange9Lg. Advertiser826AdNetworkCDNAd Storage ServersLg. AdvertiserLg. AdvertiserLg. AdvertiserAdNetworkSm. AdvertiserMd. AdvertiserLg. AdvertiserBidders345...197PROVER
QUERIER
function SETUP(n)
s(cid:48) R←− Σn,k
return {s(cid:48), s = H(s(cid:48))}
function GENCOMMIT(x, s)
return c = Hx(s)
if q ≤ x then
function GENPROOF(q, x, s)
return p = Hx−q(s)
return ⊥
else
function GENQUERY( )
// decide on a value to query, q
return q
if p(cid:54)=⊥ then
function VERIFYPROOF(q, c, p)
// p should be Hx−q(s).
if Hq(p) == c then
return accept
return reject
Figure 2—A protocol for fast greater-than proofs. The random ora-
cle H has signature H : {0, 1}∗ → {0, 1}n. Σn,k is a set of seeds of
length n + k, for some k, whose elements are easily distinguishable
from the range of H. For example, Σn,k could be {0}k||{0, 1}n. The
prover calls Setup and GenCommit. After receiving the commitment,
the querier issues a query q to the prover, who calls GenProof. The
querier veriﬁes the proof with VerifyProof.
ness, observe that if x < q, then the querier’s algorithm could accept
the proof only if it were a preimage of s under H (speciﬁcally, the
(q−x)th preimage), yet by the properties of H, it is computationally
infeasible for the prover to identify such a preimage. For secrecy,
notice that the querier cannot determine x from the commitment or
the proof. (In fact, even if q = x, the querier learns only that x ≥ q;
in that case, the proof is s.) For binding, if the property did not hold,
then the prover could identify values x1 (cid:54)= x2 and seeds s(cid:48)
2 such
that Hx1 (s(cid:48)
2), which is computationally infeasible, by the
properties of H.
1) = Hx2 (s(cid:48)
1, s(cid:48)
Less-than proofs. Our less-than proofs require a separate com-
mitment and proof (a single commitment does not prove less-than
and greater-than). The key step is to impose a maximum integer
m, known to both parties, to which the prover can commit. Then,
the parties follow the protocol in Figure 2 for x(cid:48) = m − x, and
q(cid:48) = m − q. That is, the prover commits to x(cid:48), the querier issues q(cid:48),
etc., and the statement to be proved is x(cid:48) ≥ q(cid:48), which is equivalent
to m − x ≥ m − q, which is equivalent to x ≤ q.
Discussion. We discuss three points here. First, the cost of the con-
struction above depends on the committed value. However, we de-
scribe how to amortize and avoid some of the costs in the auction
context (§6). Moreover, as noted earlier in the section, the proto-
col is practical for our purposes, despite its unappealing asymptotic
costs, relative to prior work (see §7.7).
Second, the protocol admits actions by the prover (and querier)
that might intuitively seem like misbehavior. For instance, the
prover can do the following without violating the guarantees: return
⊥ even if x ≥ q; commit to a very large number, thereby ensuring
that it always “passes”; or in cases when both greater-than and less-
than proofs are needed (which requires two separate commitments),
the prover could issue commitments to different numbers. However,
whether such actions are actually problematic depends on the layers
above the protocol. For instance, in the ad context, we have found,
to our surprise, that (a) the prover does not have much ability to
cheat; and (b) we need only less-than proofs (§5.1).
Finally, the protocol presented here is not meant to be the last
word: if more suitable realizations of the primitive emerge, VEX
can use those too.
4 DESIGN OF VEX
At a high level, the purpose of VEX is to create veriﬁable records of
low-latency, high-frequency auctions. The records are constructed
so that any party to the auction, including the seller, can verify that
it was conducted correctly, without learning the bids (only the sale
price). This section describes our model and VEX’s design, Sec-
tion 5 analyzes VEX and considers limitations, and Section 6 de-
scribes optimizations.
4.1 Requirements and model
We adopt the following requirements for VEX:
• Preserve existing relationships and protocols. To the extent pos-
sible, we want our solution to “ﬁt” in today’s ad exchange
ecosystem and protocols (Figure 1).
• Preserve current privacy regime. As stated in Section 1, our goal
is to protect the integrity of auctions, but we should not make
privacy worse. Today, bidders’ privacy is discretionary (the auc-
tioneer can leak bids; the bidder can in turn plausibly deny that it
issued a given bid). Thus, for us, an audit should not require that
the ad exchange disclose bidders’ bids or their identities.
• Do not undermine availability. As with privacy, VEX should not
make availability worse than in the status quo. Thus, availabil-
ity can depend on the auctioneer and seller, but not on bidders;
bidders should be expected to fail.
• Avoid introducing trusted third parties. A new trusted third party
would hinder adoptability and create an additional vulnerability.
We are willing to trust services that the Web depends on, such as
DNS.
• Permit bilateral veriﬁcation. An auditor should not have to deal
with any party to the auction besides the auctioneer.
• Do not burden the auction phase. The auction phase must have
low overhead (in resources and latency). However, the audit
phase can be more expensive, as long as it is practical.
• Make auditing, and its costs, optional. To facilitate auditing, we
are willing to tolerate a small cost to all participants, but no party
should bear a heavy cost unless it wishes to perform an audit.
Threat model. We model bidders, the seller, and the ad exchange
as covert adversaries [14], which are assumed malicious and can
deviate arbitrarily from protocols, or collude with each other. How-
ever, they can cheat only covertly (for example, their reputation is
valuable, or the legal ramiﬁcations of being detected are intolera-
ble, etc.). Under this model, we consider a defense sufﬁcient if it
makes misbehavior detectable under an audit. This is obviously not
the strongest possible threat model, but we believe that it matches
today’s ad exchange ecosystem.
Assumptions. We make standard cryptographic hardness assump-
tions. We also assume that each publisher has a well-known public
key. This does not require a PKI, only that the publisher’s public
key is available in a canonical Web location, say D/key.pub, where
D is the publisher’s domain name. Note that relying on DNS to
associate public keys and publishers does not introduce vulnerabil-
ities in this context, as the parties already rely on DNS to associate
D to the publisher itself: in deciding to respond to a bid request for
D, a bidder assumes that the ad will appear in a Web page from D.
198Figure 4—VEX’s auction phase. In the ﬁrst round, bidders commit to their bids; in the second round, the ad exchange computes the auction. The
most relevant computations are shown; minor checks and actions are omitted. The arrows are labeled by the contents of protocol messages.
with a VEX object, which contains a hash of the bidder’s ad tag
prepended with the auction’s id and a commitment to the bid, in-
tended for less-than proofs (§3) and equal-to proofs (§4.5) during
the audit phase (step ). The auctioneer bundles these VEX objects,
for signing by the seller (step ).
This operation freezes the VEX objects, creating a unique auction
whose input is the bundle itself. The commitment round ﬁnishes
when the auctioneer receives the signed bundle (step ).
In the decommitment round, each bidder receives the signed bun-
dle of VEX objects. After ensuring that its own VEX object is in-
cluded in the bundle, a bidder decommits: it provides to the auc-
tioneer the information needed to decode and verify its VEX object
(see “vd” in GenVO, step ).
Before continuing, the auctioneer checks that each VEX object
has been constructed properly; the procedure is depicted in Fig-
ure 5. If a VEX object fails this check, then the auctioneer will be
unable to pass the audit (§4.4). In this event, the auction proceeds—
it is too late for the parties to revoke their VEX objects—but the
auctioneer labels the auction non-auditable (step ). We discuss
non-auditability in Section 5.2.
The rest of the round proceeds similarly to the status quo.
The auctioneer uses the decommitted bids to compute the auction,
choosing a winner and the appropriate sale price (step ). The auc-
tioneer then informs the parties of the outcome. The outcome in-
cludes the sale price, the index of the winning bidder’s VEX object
in the VEX object bundle (indexing within the bundle is arbitrary),
if vd.s(cid:48) (cid:54)∈ Σn,k then
return inconsistent
c = GenCommit(m − vd.bid, vd.s(cid:48))
htag = H(id || vd.adtag)
if c (cid:54)= vo.c or htag (cid:54)= vo.htag then
1: function CONSISTENCYCHECK(id, vo, vd)
2:
3:
4:
5:
6:
7:
8:
Figure 5—Pseudocode for the consistency check. id is the auction’s
identiﬁer, vo is a bidder’s VEX object, vd is the corresponding decom-
mitment, and m is the maximum bid (§7.1). This check ensures that
the VEX object and the decommitment match.
return inconsistent
return consistent
Figure 3—VEX is divided into two phases: an auction phase, in which
the auction takes place, and an audit phase, in which an auditor veri-
ﬁes the correctness of the auction.
4.2 Overview
Besides the ad exchange, the system participants include sellers (or
their representatives; see Section 2.2) and bidders (or their repre-
sentatives). Also any party to the auction (the seller, a bidder, or a
delegate of them) can decide to be an auditor of the auction.
Figure 3 depicts VEX. It is divided into two phases: the auction
phase (§4.3) and the audit phase (§4.4). The auction phase has two
rounds, and at a high level this structure ensures that (1) the auc-
tioneer and seller acknowledge a bid before the bidder reveals it to
the auctioneer; (2) the bidder is bound to its bid; and (3) there is
an auditable record of the auction. The purpose of the audit phase
is to validate an auction’s correctness. We say that an auction is
conducted correctly if the following condition is met:
• Auction correctness. The seller receives the highest bidder’s ad
tag, and a sale price equal to the second-highest bid (§2.2).
4.3 Auction phase
Figure 4 depicts the auction phase. As stated above, it proceeds
in two rounds. In the commitment round, the seller initiates an auc-
tion by marshaling the relevant information (ad space, user, etc.; see
Section 2.2) and generating a unique identiﬁer (Figure 4, step ).
The seller transmits these contents, signed, to the auctioneer, who
forwards them to the chosen bidders. Interested bidders respond
Ad ExchangeBidderSellerFunction GenVO(id, bid, adtag)     s, s' = Setup()    // see §3, §4.5.     c  = GenCommit(m - bid, s)     htag = H(id || adtag)     vo = {c, htag}      // VEX object     vd = {s', bid, adtag}    // Decommitmentσ        = Sign(impression)idsellerFunction GenID(impression)    // see §2.2 for defn of impression    id = H(impression)Function CheckVO(id, vo_list, vd_list)    for vo (cid:2)(cid:1)vo_list and vd (cid:2)(cid:1)vd_list       res =  ConsistencyCheck(id, vo, vd)       if res ≠ consistent           status = non_auditable Function Auction(vd_list)     w = max_bid(vd_list)    // returns an index     price = second_max(vd_list)   // returns a valueFunction Outcome(w, price, vo_list, vd_list, status)     adtag = vd_list[w].adtag     htag = vo_list[w].htag     sp = price     outcome = {sp, htag, status}id, vo_listRσ        = Sign(id || outcome)sellerid, vdid, impression, σ idsellerid, void,σ vosellerid, vo_list, σ vosellerid, outcome, adtagid, outcomeid,σ Rsellerid, impression, σ idsellerBundle voσvoseller= Sign(id || vo_list) Decommitment RoundCommitment Round1234567Ad ExchangeAuditorProof ValidationAuction PhaseAudit RequestProofsAudit PhaseCommitment RoundDecommitment RoundProof Generation199else if Bi == sp and constructed eq == false then
Pi.label = equal-to
Pi.proof = S(cid:48)
constructed eq = true
let P ← ∅
constructed eq ← false
for i = 1 to |B| do
if Bi ≥ sp and i == w then
Pi.label = greater-than
Pi.proof = ⊥
1: function GENERATEAUDITPROOFS(sp, B, w, S(cid:48))
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
Figure 6—Pseudocode for proof generation. sp is the auction’s sale
price, B is the set of bids, w is the index of the winning bidder’s bid
in B, S(cid:48) is the set of secret seeds, and m is the maximum allowed
bid. This procedure uses the integer comparison protocol described
in Section 3 and an extension (Section 4.5).
Pi.label = less-than
Pi.proof = GenProof(m − sp, m − Bi, H(S(cid:48)
i ))
else // Bi ≤ sp
return P
i
a hash of the winning bidder’s ad tag, and a bit indicating whether
the auction can be audited.
The auction phase of the protocol completes when the seller ac-
knowledges the outcome (step ). To do so, the seller computes the
hash of the winning bidder’s ad tag and checks that the value in-
cluded in the auction’s outcome is consistent. If so, the seller sends
a signature of the auction’s outcome to the auctioneer, who stores it
as proof of completion.
The next section describes how the auctioneer uses the received
decommitments to generate proofs of correctness, and how auditors
use VEX objects to validate these proofs.
4.4 Audit phase