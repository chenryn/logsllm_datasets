shows that the impact of our additional code is unnoticeable.
VII. DISCUSSION
in practice and most
functionalities. In this
Development of Security-critical
work, we systematically analyzed the entire AIT, presenting
the diversity of the AIT designs (due to customization) and
the problems that exist in each step in detail. The presence
of these vulnerabilities points to the challenges in making
AIT right
importantly, questions the
fundamental design mentality of leaving such a security-
critical functionality open to customizations. We suggest that
at least the security-critical functionalities should be taken care
of by the OS and the current way of leaving them in the hands
of individual app developers can be risky.
Suggestions for developers. In real world, various designs of
AIT exist and problems can occur in any stage of it. Thus,
problems we discussed cannot be solved with one simple
solution. Most importantly, despite the criticalness of AIT, the
openness of Android is allowing any developer to develop their
own installer app without further guidance. To improve such
situation, below we provide the key points which will help
developers to build a secure installer app.
• Suggestion 1. Only use the SD-Card if internal storage space
is insufﬁcient. Developers should always use the internal stor-
age space to install a target apk when there is enough space.
If not, we recommend developers to use the SD-Card with the
defense techniques (using FileObserver events) we elaborate in
Section V. As discussed in Section II, in certain circumstances
SD-Card may be preferred; small internal memory, big apps.
• Suggestion 2. Verify hash of the target apk in a secure
storage. Developers should verify the hash of the target apk in
a secure storage (internal storage or SD-Card with our defense
in place) right before installation to make sure the ﬁle has not
been tampered with. This is the last line of protection that can
prevent replaced apps from being installed.
• Suggestion 3. Sensitive components in AIT should be well
protected. Sensitive private APIs that implement app instal-
lation should be guarded with proper access control (eg.,
permission for broadcast receiver). As shown in Section III,
once those APIs are exposed, attackers will be able to silently
install apps onto users device. Furthermore, components (eg.,
database ﬁles, content providers) that store installation related
data should be protected. Also, database ﬁles should be kept
under the installer app’s private directory (internal storage).
• Suggestion 4. User interfaces should provide more informa-
tion. Current Android design does not provide the Intent origin
information, which makes the redirect intent attack possible.
Providing more information of the app intended to be shown
(eg., image of the icon, developers name/email, package name,
etc.) in the appstore app before redirection, will help the users
notice suspicious behaviors.
VIII. RELATED WORK
Android vulnerabilities. PaloAltoNetworks [14] reported that
an attacker can wait (using logcat: works before Android 4.1)
for the permission consent dialogue and replace the target apk
once it is displayed to the user. Although they show that an
attack opportunity exists for the SD-Card based installation
(whose risk is already known to the app stores, given the
various protection put in place to use the SD-Card), we are
the ﬁrst to reveal the TOCTOU window that covers the entire
Step 3 and 4. Moreover, we show that even current protection
of enterprises (e.g., Amazon, Qihoo, etc.) in SD-Card based
installation can be defeated. Thus the security threat is sig-
niﬁcant and far-reaching (Section IV-B), not to mention the
consequences that the exploits could cause, such as gaining
system privileges. As evidence for the lack of understand-
ing, even the installPackageWithVerification API
from Google, checked only the app’s AndroidManifest.xml.
This can easily be circumvented by the malware using the
same manifest. Our study sheds light on the TOCTOU risks
of the whole AIT, its impact, fundamental cause and proposes
the ﬁrst solution that indeed mitigates the threat.
For other related ﬂaws, Grace et. al. [34] discusses pri-
vacy issues on Android due to Javascript-Java bindings. They
consider malicious ad libraries that exploit such bindings to
perform remote runtime attacks on Java APIs without the
knowledge of their host apps. However, our work reports a
new technique that can exploit such bindings. We show how
malware can send Intents with Javascript code to installer
apps that expose a WebView with such bindings to silently
install and uninstall apps. Also,
[24, 30, 35] touch speciﬁc
issues of installation: for example, how PMS checks developer
signatures and assigns the UID to newly installed apps [24].
However, no effort has been made to systematically investigate
installation as a transaction as did in our research.
UI Phishing attacks. Prior studies reveal various Phishing
attacks through UIs [28], e.g., using a Phishing activity to
cover the view of a foreground app to hijack its task ﬂow [37].
However, none of them can directly cause a malware to be
installed through an app store, because the attack app often
does not have the installation permission. In addition, while
prior attacks require a fake activity, ours do not. Our attack
instead, changes the UI of a legitimate installer without being
perceived by the user, which can lead to the installation of
a malware, apparently as the result of the redirection from
a legitimate app. This has never been done before. Due to
such difference, previous prior [22], cannot detect nor prevent
our attack. Most importantly, such a stealthy transfer of a
legitimate app’s own UI opens the possibility for other exploits,
when the victim app can be manipulated to confuse the user.
Android side-channels. Prior studies
[42, 27] infer packet
data, UI states (e.g., shared_pm) from /proc. The redirect
Intent attack utilizes oom_adj, also in /proc, for the ﬁrst
in an attack. Moreover, our purpose is just
to detect UI
redirections from apps to appstore apps, which is lightweight
through oom_adj, avoiding the learning step in the prior
work [27].
[41] proposed a user-level app that detects back-
ground monitoring services. However, it only protects selected
413
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:31 UTC from IEEE Xplore.  Restrictions apply. 
apps due to high overhead. The trouble here is that many apps
redirect users to appstores and all of them need to be protected.
Mitigation strategies. Many studies aim to identify mali-
cious or suspicious apps utilizing permissions as a detection
feature [31, 32, 43]. Such approach is not applicable in
our case, since the adversary we consider uses a popular
permission (WRITE_EXTERNAL_STORAGE). Even with the
new runtime permission check introduced on Android 6.0,
the adversary can silently gain the permission (Section III-B)
by requesting once either the READ_EXTERNAL_STORAGE
or the WRITE_EXTERNAL_STORAGE for a legitimate use
which is likely to be granted by the user [13]. Others employ
static or dynamic analysis to detect malware [23, 36, 40, 39],
given known malicious behaviors. GIA is a new attack, based
on a common permission and detecting it can be nontrivial.
More importantly, our protection mechanisms are meant to be
the last line of defense against this type of malware, even
after it manages to bypass the appstore’s vetting process.
Although Mandatory Access Control
[38, 26, 29] can help,
our approach is exceedingly lightweight and effective making
minimal change to the framework (Section VI-B)
IX. CONCLUSION
We report a study on Android app installation transaction,
which led to the discovery of signiﬁcant risks in this security-
critical procedure. Our ﬁndings show that most installers today
are not securely designed and can be exploited at every step
of AIT. Particularly, the TOCTOU problem in installing apps
from external storage, utilized by most appstores and system
apps, essentially enables an unprivileged adversary to become
a Ghost Installer, with the power to silently install any apps
and escalate its privilege. Our research reveals the signiﬁcant
impacts of the GIA threats, affecting hundreds of millions of
users. New techniques are developed to protect AIT against
the threats. Most importantly, the study highlights the lessons
learnt from our ﬁndings: security-critical functionalities should
be handled by the OS and leaving them in the hands of app
developers is by no means a wise solution.
X. ACKNOWLEDGEMENT
We thank our reviewers for their valuable comments. This
work was supported in part by National Science Foundation
under grants 1223477, 1223495, 1527141, 1618493. Kai Chen
was supported in part by NSFC U1536106, 61100226, Youth
Innovation Promotion Association CAS, and strategic priority
research program of CAS (XDA06010701). Yeonjoon Lee
thanks Samsung Research America for supporting this project
during his internship.
REFERENCES
[1] Alexa-Ranking-APKPure. http://www.alexa.com/siteinfo/apkpure.com.
[2] Amazon Appstore: Gabriel-Knight-Sins-Fathers-Anniversary. https:
//www.amazon.com/Gabriel-Knight-Sins-Fathers-Anniversary/dp/B013T3AY64.
[3] Android developer website. http://developer.android.com/about/dashboards/.
[4] Android marketshare. http://www.idc.com/promo/smartphone-market-share/os.
[5] Android Storage Options.
http://developer.android.com/intl/es/guide/topics/data/data-
storage.html#AccessingExtFiles.
[6] Apktool. http://ibotpeaches.github.io/Apktool/.
[7] Gartner-What’s next for smartphones.
http://www.gartner.com/smarterwithgartner/whats-next-for-smartphones/.
[8] Ghost Installer Attacks. https://sites.google.com/site/giaprojectdemo/.
[9] Github: OSMonitor. https://github.com/eolwral/OSMonitor.
[10] GSam Battery Monitor App.
https://play.google.com/store/apps/details?id=com.gsamlabs.bbm.
[11] Huawei. http://www.huawei.com/cn/.
[12]
[13] Ofﬁcial Android Developers Documentation.
Impact of DTIgnite. http://www.digitalturbine.com/products/ignite/.
http://developer.android.com/guide/topics/security/permissions.html.
[14] Palo Alto Networks. http://researchcenter.paloaltonetworks.com/.
[15] Quora-post. https://www.quora.com/I-still-have-a-lot-of-space-left-in-my-phone-
memory-and-on-my-external-card-but-I-cant-download-apps-from-the-Play-
Store-It-just-shows-an-error-about-a-lack-of-space-Why-is-this-
happening/answer/Riccardo-Vincenzo-Vincelli?srid=kExW.
[16] samsung-updates.com. http://samsung-updates.com/.
[17] Soot. https://sable.github.io/soot/.
[18] statista.com. https://www.statista.com/statistics/276623/number-of-apps-available-
in-leading-app-stores/.
[19] Strategy Analytics Press Releases.
https://www.strategyanalytics.com/strategy-analytics/news/strategy-analytics-press-
releases/strategy-analytics-press-release/2016/08/01/strategy-analytics-samsung-
galaxy-s7-edge-was-world’s-top-selling-android-smartphone-in-h1-2016.
[20] Xiaomi. http://www.mi.com/.
[21] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou, W. Du,
and M. Grace. Hare hunting in the wild android: A study on the threat of
hanging attribute references. In 22nd ACM SIGSAC Conference on Computer &
Communications Security, 2015.
[22] B. Antonio, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and G. Vigna.
What the app is that? deception and countermeasures in the android user
interface. In 2015 IEEE Symposium on Security & Privacy, 2015.
[23] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon,
D. Octeau, and P. McDaniel. Flowdroid: Precise context, ﬂow, ﬁeld, object-sensiti
ve and lifecycle-aware taint analysis for android apps. In 35th ACM SIGPLAN
Conference on Programming Language Design & Implementation, 2014.
[24] D. Barrera, J. Clark, D. McCarney, and P. C. van Oorschot. Understanding and
improving app installation security mechanisms through empirical analysis of
android. In 2nd ACM Workshop on Security & Privacy in Smartphones & Mobile
Devices, 2012.
[25] A. Bashan and O. Bobrov. Certiﬁgate: Front door access to pwning millions of
androids. BlackHat, Las Vegas, NV, 2015.
[26] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and ﬁne-grained mandatory
access control on android for diverse security and privacy policies. In 22nd
USENIX Security Symposium, 2013.
[27] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into your app without actually
seeing it: Ui state inference and novel android attacks. In 23rd USENIX Security
Symposium, 2014.
[28] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application
communication in android. In 9th International Conference on Mobile Systems,
Applications, and Services, 2011.
[29] S. Demetriou, X. Zhou, M. Naveed, Y. Lee, K. Yuan, X. Wang, and C. A. Gunter.
What’s in your dongle and bank account? mandatory and discretionary protection
of android external resources. In 22nd NDSS, 2015.
[30] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone
application certiﬁcation. In 16th ACM Conference on Computer &
Communications Security, 2009.
[31] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android permissions dem
ystiﬁed. In ACM Conference on Computer & Communications Security, 2011.
[32] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission
re-delegation: Attacks and defenses. In 20th USENIX Security Symposium, 2011.
[33] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The
most dangerous code in the world: Validating ssl certiﬁcates in non-browser soft
ware. In 2012 ACM Conference on Computer & Communications Security, 2012.
[34] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe exposure analysis of
mobile in-app advertisements. In 5th ACM Conference on Security & Privacy in
Wireless & Mobile Networks, 2012.
[35] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These aren’t the dr
oids you’re looking for: Retroﬁtting android to protect data from imperious applic
ations. In 18th ACM Conference on Computer & Communications Security, 2011.
[36] C. Mann and A. Starostin. A framework for static detection of privacy leaks in an
droid applications. In 27th Annual ACM Symposium on Applied Computing, 2012.
[37] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu. Towards discovering and under
standing task hijacking in android. In 24th USENIX Security Symposium, 2015.
[38] S. Smalley and R. Craig. Security enhanced (SE) android: Bringing ﬂexible MAC
to android. In 20th NDSS, 2013.
[39] L. Vigneri, J. Chandrashekar, I. Pefkianakis, and O. Heen. Taming the android
appstore: Lightweight characterization of android applications. CoRR, 2015.
[40] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang. Appintent:
analyzing sensitive data transmission in android for privacy leakage detection. In
2013 ACM SIGSAC conference on Computer & communications security, 2013.
[41] N. Zhang, K. Yuan, M. Naveed, X. Zhou, and X. Wang. Leave me alone:
App-level protection against runtime information gathering on android. In 2015
IEEE Symposium on Security & Privacy, 2015.
[42] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A. Gunter, and
K. Nahrstedt. Identity, location, disease and more: Inferring your secrets from
android public resources. In 2013 ACM SIGSAC Conference on Computer &
Communications Security, 2013.
[43] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, you, get off of my market:
Detecting malicious apps in ofﬁcial and alternative Android markets. In 19th
NDSS, 2012.
414
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:31 UTC from IEEE Xplore.  Restrictions apply.