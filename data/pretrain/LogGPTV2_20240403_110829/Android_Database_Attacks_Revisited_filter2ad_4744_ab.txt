### 优化后的文本

#### 代码示例
```java
class PublicDBHelper extends SQLiteOpenHelper {
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL("CREATE TABLE ScheduledMessage (message TEXT, ...)");
        db.execSQL("CREATE TABLE Contacts (_id INTEGER, ...)");
    }

    String getTableName(String id) {
        switch (id) {
            case "1":
                return "ScheduledMessage";
            default:
                return "";
        }
    }
}
```

**清单 1：应用程序 A 中的公共数据库示例代码。**

在这个例子中，URI 模式受到 `writePermission` 的保护。然而，由于第一个 URI 模式没有任何权限保护，恶意软件可以通过调用内容提供者中的 `insert()` API 来污染数据库。

现在，我们解释由恶意应用 M 发起的公共数据库攻击（见清单 4）。当应用 M 在清单 4 的第 7 行调用 `ContentResolver.insert()` 时，会触发应用 A 中内容提供者的 `insert()` 方法（见清单 1 的第 9 行）。应用 M 还传递适当的数据作为该方法的参数，以向设备上的联系人列表发送敏感消息。目标 URI（见清单 4 的第 3 行）由攻击者精心构造，以便通过清单 1 第 11 行的检查，从而到达第 15 行的 `SQLiteDatabase.insert()` 语句。

在这个例子中，导致公共数据库攻击的漏洞可以通过在清单文件中强制执行适当的权限或更改内容提供者的实现来修复。开发者可以选择在清单文件中保护特定的路径子集，或者通过 `writePermission` 保护整个提供者，但后者不够灵活。另一种选择是移除清单 1 的第 6 行，只允许已经在清单文件中受保护的路径模式执行代码以达到 `insert()` 方法。

#### 应用程序 A（受害者应用）的清单文件
```xml
<manifest>
    <application>
        <provider
            android:name=".PublicDatabase"
            android:authorities="com.example.app.PublicDatabase"
            android:exported="true" />
        <receiver
            android:name=".ExampleBroadcastReceiver"
            android:exported="true">
            <intent-filter>
                <action android:name="com.example.app.event.Trigger" />
            </intent-filter>
        </receiver>
    </application>
</manifest>
```

**清单 3：应用程序 A（受害者应用）在清单文件中指定的内容提供者和广播接收器。**

#### 恶意应用 M
```java
public class DatabaseMalware extends Activity {
    public void insertPublic() {
        Uri targetUri = Uri.parse("content://com.example.app.PublicDatabase/1");
        ContentValues values = new ContentValues();
        values.put("message", "Sensitive Data");
        ContentResolver contentResolver = getContentResolver();
        Uri confirmationUri = contentResolver.insert(targetUri, values);
        if (confirmationUri != null) {
            // 攻击成功发起
        }
    }

    public void insertPrivate(int phoneNo, String message) {
        Intent intent = new Intent("com.example.app.event.Trigger");
        intent.putExtra("task", "message");
        intent.putExtra("data", message);
        intent.putExtra("contact", phoneNo);
        sendBroadcast(intent);
    }
}
```

**清单 4：恶意应用 M 访问受害者应用 A 的公共和私有数据库。**

### 检测和利用
我们的目标是检测并利用良性应用中的公共和私有数据库漏洞。从高层次来看，发现 Android 应用的数据库漏洞可以视为源到汇点的可达性分析问题。公共和私有数据库攻击分别通过调用内容提供者和 Intent 接收器 API（如 `getIntent()`）触发，并通过执行路径到达汇点方法（如 `SQLiteDatabase` API）。

静态分析技术通常只能给出潜在的可达性，现有的 Android 应用分析技术 [1, 21, 11] 也不例外。此外，这些技术的结果可能会产生许多潜在的源-汇点流，其中可能包含许多误报 [12]。我们旨在生成能够利用这些漏洞的输入。ContentScope [31] 使用可达性分析和约束求解来分析公共数据库漏洞，但不处理私有数据库漏洞。我们的经验表明，私有数据库漏洞在 Android 应用的代码库中更为分散。因此，虽然浅层分析可能足以找到一些公共漏洞，但私有漏洞需要更深层次的分析，同时还需要处理框架库的精确性。

我们提出了 DBDroidScanner，它基于 W2AIScanner [12] 提出的分析。本文中，多个组件被扩展以处理数据库漏洞的分析和利用。W2AIScanner 专注于检测和利用 Web 到应用注入漏洞。符号执行 [5] 作为核心分析技术用于生成概念验证利用。为了平衡精度和效率，静态信息流分析与符号执行和动态测试相结合。DBDroidScanner 和 W2AIScanner 之间的一个重要区别在于支持的输入类型。[12] 中生成的利用是原始类型（字符串、整数等），而 DBDroidScanner 还需要支持非原始类型的输入参数，这些参数被恶意软件用来调用 API 以利用漏洞。另一个区别在于 URI 基础库的符号模型。DBDroidScanner 使用的模型支持更复杂的语义，这对于自动利用本文提出的数据库漏洞是必要的。

在本节中，我们将描述对 [12] 中分析的扩展。

[12] 中的分析框架首先进行快速但不精确的静态数据流分析，然后是更精确但较慢的静态符号执行阶段。最后，对 Android 应用的动态测试在实践中是最耗时的阶段。因此，通过提高静态分析的准确性，减少静态生成的流的数量，从而减少需要在动态测试阶段测试和确认的流的数量。

类似于 [12]，DBDroidScanner 按以下阶段工作：
1. 识别源-汇点对并创建初始控制流图（CFG）；
2. 对前一步生成的源-汇点对进行汇点可达性分析，作为下一阶段搜索启发式的预计算；
3. 执行有界的静态符号执行，生成将用于生成具体输入的输入约束；
4. 运行时执行器构建最终的利用并在应用上运行，记录执行跟踪以验证利用。此外，从第 4 阶段到第 3 阶段的反馈将运行时执行获得的具体值与路径约束结合，再次由求解器解决以生成可能更精确的利用。

静态分析是在 Soot [18] 中使用的中间表示 Jimple 上进行的。接下来，我们讨论分析器不同组件所需的扩展，以查找和利用公共和私有数据库漏洞。

#### 源-汇点对识别
我们的分析框架的第一个组件是识别源-汇点对。为了找到通向数据库汇点方法的入口点，我们首先研究了在 Android 应用中访问公共和私有数据库的可能方式。我们将汇点方法分为泄漏、污染和文件访问类别。我们的分析中用于特权提升攻击的汇点方法是 `ContentResolver` API（如 `ContentResolver.insert()`）。这些汇点用于检测公共和私有数据库漏洞。

**直接调用内容提供者 API（公共数据库源）**：内容提供者组件专门设计用于在应用之间共享内容。它们封装本地应用数据并通过标准化 API（如 `query()`、`insert()`、`openFile()` 等）导出这些数据。其他应用可以调用这些接口来操作应用的内部 SQLite 数据库和内部文件。恶意应用可以通过调用这些标准化 API 来发起污染、泄漏或文件访问攻击。一旦确定了可能的入口方法，我们将这些方法的参数标记为源变量。

如果内容提供者没有在清单文件中通过适当的属性和权限完全保护，则它是分析的候选对象。一个内容提供者完全受保护的情况包括：
1. 默认情况下（相当于 `exported="false"`）在 Android SDK 17 及更高版本中；
2. 显式指定了 `exported="false"`；
3. 在清单文件的 `<provider>` 标签中指定了 `android:permission` 属性。