∗
2
2 ⇒ AX vB
∗
l
Because the correct mapping for cf lict differs from the correct
∗, and
mapping for sbutton, we have that l
vB conﬂicts with vA. If the adversary can remove this conﬂict, then
the false positive mapping µF P will also be removed, and the am-
biguity is resolved. The conﬂict can be removed by the addition of
∗
2 conﬂicts with start
443the following speciﬁcation (Read, “Valve A can be on with the start
button released”).
∗
sbindep : input start
∗ ∧ vA)
EF(¬start
output vA
To see that the pair sbutton, sbindep removes the conﬂict, we
can substitute the conﬂict into sbindp, giving: EF(¬l
2 ∧ vB),
∗
which does not hold under the control logic. Thus, if the con-
ﬂicting mapping is initially made when checking sbutton, this
mapping will fail when checking sbindep, which will cause the
SABOT checker to go back to sbutton, and search for another
mapping, in this case, the correct one. Of course, this approach
is not guaranteed to make a completely unambiguous speciﬁcation
(as will be seen in Section 4), but it does remove all ambiguities
with respect to devices the adversary is aware of.
In larger examples, we keep track of conﬂicts and resolutions us-
ing conﬂict tables. An example set of conﬂict tables for a speciﬁca-
tion of a chemical process is shown in Figure 3. Each speciﬁcation
has a (potentially empty) conﬂict table listing all unmapped names
in Vφ that satisfy the speciﬁcation. Given a nonempty conﬂict table
for a speciﬁcation spec, one can make spec unambiguous by writ-
ing at most one additional speciﬁcation over the names in spec for
each entry in its conﬂict table. This guarantees a ﬁnite speciﬁca-
tion size bounded in O(|Vφ|2) speciﬁcations. Signiﬁcantly fewer
are usually necessary in practice.
The speciﬁcation keyword UNIQUE is used to declare that no
name appearing in the speciﬁcation will appear in a conﬂicting
mapping. This is useful because there are some cases where the
same name appears in many conﬂict table entries. (See speciﬁca-
tion sbutton in Figure 3). It is never required to use UNIQUE to
remove conﬂicts, but it can be useful in reducing the search space.
3.4 Payload Construction
In the payload construction step, SABOT instantiates a generic
malicious payload for the target PLC. Given a VTDM µ for a vic-
tim PLC and speciﬁcation, SABOT uses µ to map the names in the
adversary’s generic payload into those in the control logic. There-
after, the instantiated payload is recompiled into bytecode and up-
loaded to the PLC.
SABOT payloads are control logic programs deﬁned over names
in Vφ. Once the VTDM µ is found, the payload is instantiated
under µ, producing a payload over names in VM. Using this ap-
proach, an adversary can assume the same semantics for names in
the payload that are assumed for names in the speciﬁcation. As an
example, the following payload manipulates the chemical mixing
process into omitting ingredient A from the mixture.
Generic Payload
vA ← ⊥
vB ← (start∗ ∨ vB) ∧ ¬l∗
2 ∨ mixer) ∧ l∗
3 ∨ vd) ∧ l∗
mixer ← (l∗
vd ← (l∗
3
1
1
Instantiated Payload
y1 ← ⊥
y2 ← (x4 ∨ y2) ∧ ¬x3
y3 ← (x2 ∨ y3) ∧ x1
y4 ← (x3 ∨ y4) ∧ x1
Annunciator
Emergency
Sequential
Baseline
Parallel
System
Container Filling
Motor Control
Trafﬁc Signaling
pH Neutralization
Railway Switching
Table 3: Control system variants (omitted shaded).
such side effects can be concealed by malicious code execution on
the PLC programming machine [16].
4. EVALUATION
We evaluate SABOT using four metrics:
• Accuracy is the ability of SABOT to correctly map a speciﬁ-
cation onto a control system, even when unexpected features
are present. We evaluate the number of devices that are cor-
rectly mapped in each test case in Section 4.1.
• Adaptability is the ability to recognize different variants of
a control system. A canonical speciﬁcation is tested against
two unique implementations of a trafﬁc light control logic,
and results evaluated in Section 4.2.
• Performance is the ability to efﬁciently recover the VTDM
for a given speciﬁcation. We evaluate not only the total run-
ning time, but the number of false positives encountered by
the incremental mapping process in Section 4.3.
• Scalability is the ability to perform accurately and efﬁciently
as additional control system functionality is added to the PLC.
We augment SABOT with a basic dependency graph analysis,
and evaluate both accuracy and performance for PLCs run-
ning multiple independent subsystems Section 4.4.
Note that this is the ﬁrst set of experiments on SABOT, and addi-
tional future studies providing further validation and enlightenment
are appropriate. However, the results of this initial study indicate
that SABOT works well on a variety of control logics, and that there
remain numerous avenues for engineering and ﬁne tuning results.
We evaluate the use of two such improvements to reﬁne our initial
results in section 4.5.
All experiments are conducted using the ﬁve variants of ﬁve rep-
resentative process control systems taken from real-world applica-
tions described in Table 3. Each process description is used to im-
plement a speciﬁcation and a control logic. All speciﬁcations were
created independently of the implementations. Note that control
variables are denoted using emphasis and input variable are anno-
tated with ‘∗’ (e.g., invar
∗, outvar) below.
While seemingly simple, most of the following systems have a
larger variety of devices and more complex state machines than the
target of the Stuxnet attack, many uniform variable speed drives [16].
The ﬁve applications are:
Assuming that the correct mapping, i.e. µT P is found by SABOT,
then this payload will execute as expected when uploaded to the
mixer PLC. Our results in Section 4.1 show that the correct map-
ping can be recovered the majority of the time, even when the plant
has unexpected devices and functionality. If the adversary is un-
aware of a device in the plant, then even a correct VTDM may
cause side effects when used to instantiate an attack. The cause of
Container Filling. Consider the ﬁlling of product containers on an
assembly line, e.g., cereal boxes [13]. In the basic process, a belt
belt carries an empty container (belt = (cid:62)) until it is under the ﬁll-
∗, e.g., a light barrier detects
bin as indicated by a condition cond
when container is in position. Thereafter, a ﬁll valve f ill is opened
for a period of time to ﬁll, and the belt is activated to move the
next container into place. It may also occur that the ﬁll bin itself
444Figure 3: An unambiguous speciﬁcation with conﬂict tables for the pH neutralization system.
∗) and reverse (rev
∗ and a secondary
is depleted, as indicated by a level sensor low
source bin with valve source will be used to replenished the ﬁll
bin.
Motor Control. Stepper motors divide a full rotation into a set
of discrete angular positions. This has many applications in pre-
cision equipment like lathes, conveyors, and applications requiring
bidirectional operation. A stepper motor controller allows for start-
ing the motor in the forward direction f on and reversing the motor
ron, such that ¬f on∨¬ron always holds. Buttons are used for se-
∗) operation, and stopping
lecting forward (f or
∗. The controller will also enforce a minimum spin
the motor stop
down time before the motor is allowed to change direction.
Trafﬁc Signaling.3 Consider further a typical 4-way trafﬁc light
with red1, yellow1, and green1 in the North/South direction, and
red2, yellow2, and green2 in the East/West direction. Ignoring
inputs from pedestrians or road sensors, the trafﬁc light follows the
cycle: (red1, red2), (red1, green2), (red1, yellow2), (red1, red2),
(green1, red2), (yellow1, red2).
pH Neutralization. A pH neutralization system mixes a substance
of unknown acidity with a neutralizer until the desired pH level
is achieved, e.g., in wastewater treatment. An example process
adapted from [15] operates as follows:
3Trafﬁc signal attacks can cause signiﬁcant congestion [18].
∗
∗
∗
= (cid:62). If ts
∗
2, valve v1 is opened to ﬁll the tank
When the tank level is below ls
∗
with the acidic substance up to level ls
2. At this point valve v2 is
opened to dispense the neutralizer until the correct acidity level is
= (cid:62) and the correct temper-
indicated by the acidity sensor as
ature of the product has been reached as indicated by temperature
= ⊥, the heater is activated. If the desired
sensor ts
∗
3, v2 is closed and
pH level is not achieved before the tank ﬁlls to ls
∗
2. Once the correct pH
v4 is opened to drain the tank back to level ls
∗
level and temperature are achieved, and there is at least ls
2 liquid in
the tank, it is drained to the next stage by v3. The temperature and
acidity lights tl and al are activated when the desired temperature
and acidity have been reached respectively, and the tank is at least
∗
at level ls
2.
Railway Switching. Lastly, consider a process that safely coordi-
nates track switches and signal lights on a real railway segment [17]:
The segment consists of the two tracks (tr1 and tr2), two switches
(s1 and s2) and four signal lights a–d. A switch is said to be in the
normal state if it does not allow a train to switch tracks and in the
reverse state if it does allow a train to switch tracks. If a signal is
ON, it indicates that the train may proceed and if it is OFF, the train
must stop. The direction of each signal is indicated by an arrow.
∗–d
∗
2 and a
∗, where s
The signalman can control the state of the lights and switches
1 = (cid:62) puts switch s1
∗
∗
1, s
using the inputs s
∗ turns signal a ON. To ensure safe operation,
into reverse, and a
the control logic maintains several invariants over the signal and
switching commands from the signalman. (1) Two signals on the
same track, e.g., a and b, can never be ON simultaneously. (2) If a
switch is in reverse, then at most one signal is allowed to be ON.
(3.a) If switch s1 is in reverse, then signals a and c must be OFF.
(3.b) If switch s2 is in reverse, then signals b and d must be OFF.
(4) If both switches are set to reverse, then all signals must be OFF.
sbutton:INITstart∗UNIQUEstart∗⇒AXv11.ls∗2v22.ls∗2mixer3.ls∗2heater4.ls∗3v45.ls∗3heater6.ts∗tl7.as∗allatchedreﬁnessbutton:EF(start∗∧AX(¬start∗∧v1∗))Emptyheateron:UNIQUEAG(ts∗⇒AX¬heater)1.ls∗2v12.ls∗3v22.as∗v2mixeron:AG(¬ls∗1⇒AX¬mixer)1.ls∗1v32.ls∗2v43.ls∗2tl4.ls∗2asmixerindepreﬁnesmixeron:EF(¬ts∗∧¬mixer∧AX(¬ts∗∧mixer))Emptylevelindepreﬁnesmixeron:EF(ls∗1∧v1∧AX(ls∗1∧v1))Emptylevel2:AG(¬mixer∧ls∗1∧ls∗2⇒AXmixer)Emptyvalve2:INITls∗1,ls∗2ls∗1∧ls∗2⇒AXv2Emptyvalve4:AG(ls∗1∧ls∗2∧ls∗3⇒AXv4)Emptyvalve3:AG(¬as∗∨¬ts∗∧¬v3⇒AX¬v3)Emptytlight:AG(¬ts∗⇒AX¬tl)EmptypHlight:AG(¬as∗⇒AX¬al)EmptyNeutralizer:1.sbutton2.latched3.heateron4.mixeron5.mixerindep6.levelindep7.level28.valve29.valve410.valve311.tlight12.pHlightNeutralizerFrom SourceTo SourceTo Next Stepmixerls∗1ls∗2ls∗3v1v2v3v4heaterts∗as∗tlalstart∗tr1tr2abcds1s2←←→→a∗b∗c∗d∗s∗1s∗2...445Filling
Button
Control Logic Container
Start
Belt
Baseline
Emergency
Annunciator
Sequential
Parallel
Button
Forward
Button
Reverse
Control
Synchronized
Synchronized
Synchronized
Signal
Light
Light
Light
Light
Button
Light
Light
Forward
Reverse
Trafﬁc
Yellow
Yellow
Motor
Motor
Motor
Green
Green
Stop
Red
Red
1
2
1
2
1
2
Valve
Fill
n n n n n n
1
2
Synchronized
Switch
C
D
Signal
Signal
Switch