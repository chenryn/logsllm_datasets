(cid:5)
r, α1, α2 ←$ Zq
ti,1 ← gα1
(cid:5)
1 hα2
j∈Ci
1
ti,2 ← gα1
2 hα2
2 gr
(cid:5)
1
j∈Ci
PK i ← yi
PK j
j∈Ci
c ← H0(¯t1, ¯t2, PK , m)
(cid:6)
j∈Ci
γj,1
{sj, γj,1, γj,2}j∈Ci- si ← r + c · sk i +
(cid:6)
(cid:6)
j∈Ci
j∈Ci
γi,1 ← αi,1 +
γi,2 ← αi,2 +
(¯t1, ¯t2, PK )

tj,2
(ti,1, ti,2, PK i)-
(¯t1, ¯t2, PK )

sj
γj,2
γi,1, γi,2, si-
Fig. 3: The mBCJ signing protocol for signer Si with se-
cret key sk i and public key pk = (yi, πi). If Si
is the
leader then, instead of sending (ti,1, ti,2, PK i) to its parent,
it sends (¯t1, ¯t2, PK ) = (ti,1, ti,2, PK i) to its children, and
instead of sending (si, γi,1, γi,2) to its parent,
it outputs
(¯t1, ¯t2, s, γ1, γ2) = (¯t1, ¯t2, si, γi,1, γi,2) as the signature.
schemes can exist at all. In this section we answer that question
in the positive by presenting a modiﬁcation of the BCJ scheme
that avoids the pitfalls exploited by the metareduction. Namely,
the metareduction exploits the fact that, when the reduction
rewinds the forger, the forger can extract the signing key
from the reduction, or some other information that can be
used to forge signatures. In the following scheme, we ensure
that the extracted information can only be used to create new
signatures on the same message as the one being signed, but
cannot be used to sign different messages.
5.1 The Modiﬁed Scheme
the scheme uses three hash functions H0, H1
The mBCJ scheme uses the same homomorphic commit-
ment scheme to let signers commit to their ﬁrst rounds as
the BCJ scheme, but lets the parameters of the commitment
scheme be given by the message through a random oracle.
Namely,
:
{0, 1}∗ → Zq and H2 : {0, 1}∗ → G3
Parameters generation. Pg sets up a group G of order q
with generator g1, where q is a κ-bit prime. Output par ←
(G, g1, q).
Key generation. Kg(par ) chooses sk ←$ Zq and sets y ← gsk
1 .
The proof-of-possession π = (c, s) is computed by choosing
r ←$ Zq and computing c ← H1(y, gr
1) and s ← r + c· sk mod
q. Let pk ← (y, π) and output (pk , sk ).
Signing. The
two-round signing protocol
in Figure
signer Si
Sign(par , (sk i, yi, πi), m,T ) behaves as follows.
is the leader, then it sends a unique
Announcement. If Si
session identiﬁer ssid to its children. Otherwise, it waits for
this message and forwards it to its set of children Ci in T .
Commitment. Si waits to receive all values (tj,1, tj,2, PK j)
for j ∈ Ci. It then generates the commitment parameters
(g2, h1, h2) ← H2(m), chooses (ri, αi,1, αi,2) ←$ Z3
q, and
is depicted
running
3. More
precisely,
a
(cid:18)(cid:17)(cid:26)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
·(cid:5)
1
2
j∈Ci
1 hαi,2
j∈Ci tj,1 and ti,2 ← gαi,1
j∈Ci tj,2, and PK i ← yi · (cid:5)
· (cid:5)
·
computes ti,1 ← gαi,1
2 hαi,2
gri
PK j. If Si is not
1
the leader, it sends (ti,1, ti,2, PK i) to its parent, otherwise it
proceeds to the next phase.
Challenge. If Si is the leader, it sets ¯t1 ← ti,1, ¯t2 ← ti,2,
and PK ← PK i. It computes c ← H0(¯t1, ¯t2, PK , m), and
sends (¯t1, ¯t2, PK ) to its children. If Si
is not the leader,
it waits to receive a message (¯t1, ¯t2, PK ), computes c ←
H0(¯t1, ¯t2, PK , m), and sends (¯t1, ¯t2, PK ) to its children.
Response. Si waits to receive all values (sj, γj,1, γj,2) for j ∈
Ci (note that if Si is a leaf it will proceed immediately), and
(cid:6)
then computes si ← ri + c · sk i +
j∈Ci sj, γi,b ← αi,b +
j∈Ci γj,b for b ∈ {1, 2}. It sends (si, γi,1, γi,2) to its parent,
unless Si is the root, then Si sets s ← si, γ1 ← γi,1, γ2 ←
γi,2, and outputs σ ← (¯t1, ¯t2, s, γ1, γ2).
Key Aggregation. KAg on input a set of public keys PK
∈ PK as (yi, (ci, si)), and if this public key
parses every pk
Output aggregate public key PK ← (cid:5)
−ci
has not been validated before, check that ci = H1(yi, gsi
).
1 y
i
(cid:6)
yi.
i
Veriﬁcation. Vf on input aggregate public key PK , a sig-
nature σ = (¯t1, ¯t2, s, γ1, γ2), and a message m, compute
(g2, h1, h2) ← H2(m), c ← H0(¯t1, ¯t2, PK , m) and check that
¯t1
PK −c.
?= gγ1
?= gγ1
1 and ¯t2
1 hγ2
2 hγ2
2 gs
1
5.2 Security
To prove security of the mBCJ scheme, we construct an
algorithm A around the forger F that simulates the random
oracle H3(m) either with commitment parameters with known
trapdoors, or with binding commitment parameters that are a
re-randomization of the challenge public key. It then hopes
that all signing queries are on messages with commitment
parameters of the ﬁrst type, so that it can use the trapdoor to
equivocate commitments and simulate signatures. If moreover
the forgery is on a message of the second type, then we show
that A can be used in a forking lemma to compute discrete
logarithms.
Theorem 3. mBCJ is a secure multi-signature scheme in the
key-veriﬁcation setting under the discrete-logarithm assump-
tion in the random-oracle model. More precisely, mBCJ is
(τ, qS, qC, qH, )-unforgeable in the random-oracle model if
q > 64e(N + 1)(qH + qS + 1)(qS + 1)/ and if the discrete-
logarithm problem is (τ · 64e(N + 1)2(qH + qS + 1)(qS + 1)/·
ln(8e(N + 1)(qS + 1)/), /(8e(qS + 1)))-hard, where N is
the maximum number of signers involved in a single multi-
signature, e is the base of the natural logarithm, and τexp is
the time of a multi-exponentiation in G.
Proof. Given a (τ, qS, qC, qH, ) forger F against the mBCJ
multi-signature scheme, consider an input generator IG that
∗ ←$ G and an algorithm A that on input y
and
outputs y
randomness f = (ρ, h1, . . . , hqH ) proceeds as follows.
Algorithm A simulates the self-signed certiﬁcate π
∗
=
∗ ←$ Zq and computing v
∗ ←
∗
∗
, w
(d
∗−d
∗
∗
∗
gd
)
, π
1 y
with random tape ρ. It responds to F’s k-th random-oracle
query to H0 or H1 with hk, except when F makes a query
. Moreover, when F makes a
H1(y
) by picking d
. It then runs the forger F on input pk∗
∗
) it responds with d
= (y
, w
, v
∗
∗
∗
∗
∗
1 , g2 ← gω2
1 , and h2 ← y
∗ω, stores (m, 1, ω), and returns (h1, g2, h2).
query H0(¯t1, ¯t2, PK , m), then A internally simulates a query
H3(m). We assume that A never makes the same random-
oracle query twice.
For each query H3(m), tosses a biased coin that comes
out heads with probability δ and tails with probability 1 − δ.
If the coin comes out heads, then it chooses ω1, ω2, ω3 ←$
Zq, computes h1 ← gω1
∗ω3, stores
(m, 0, (ω1, ω2, ω3)), and returns (h1, g2, h2). If it comes out
tails, then A chooses ω ←$ Zq and g2, h2 ←$ G, computes
h1 ← y
To answer signing queries for a message m as signer Si
in a tree T , A proceeds as follows. If F did not yet query
H3(m), then A internally simulates such a query. If A does not
have a record (m, 0, ω1, ω2, ω3), then it aborts by outputting
(∅,∅). Otherwise, it receives all values (tj,1, tj,2, PK j) from
its children j ∈ Ci in T , chooses ˆri, ˆsi, ˆc ←$ Zq and computes
ti,1 ← g ˆri
When the forger sends (¯t1, ¯t2, PK ), A simulates a query
c ← H0(¯t1, ¯t2, PK , m), then A waits for its children j ∈ Ci to
← (c + ˆc)/ω3 mod q,
(cid:3)
send (sj, γj,1, γj,2) and computes γ
← ˆsi − ω2γ
← ˆri − ω1γ
(cid:3)
(cid:3)
(cid:3)
(cid:3)
i,2
i,1 mod q. It
i,2 mod q, and s
γ
(cid:6)
(cid:6)
then sends γi,1 ← γ
(cid:3)
i
i,1
i,2 +
j∈Ci γj,2 mod q, and si ← s
(cid:3)
j∈Ci sj mod q to its
i +
parent. One can see that, if the co-signers behave honestly,
these values yield a valid signature because
(cid:2)
γ
γ
i,1
1 h
1
ˆri−ω1γ
= g
1
(cid:12)
= g ˆri
1
j∈Ci
j∈Ci γj,1 mod q, γi,2 ← γ
j∈Ci tj,1 and ti,2 ← gˆsi
1 y
∗ ˆc ·(cid:5)
γi,1−(cid:2)
1
γi,2−(cid:2)
1
j∈Ci tj,2.
·(cid:5)
(cid:3)
i,1 +
= ti,1/
(cid:6)
ω1γ
1
= g
j∈Ci
j∈Ci
tj,1
(cid:2)
i,2
(cid:2)
i,2
(cid:2)
i,2
γj,2
γj,1
h
g
g
1
and
γi,1−(cid:2)
2
g
j∈Ci
γj,1
h
j∈Ci
∗−c
sj
y
(cid:2)
i,1
y
∗−c
si−(cid:2)
1
∗−c
ˆsi−ω2γ
1
γ
2
γj,2
= g
γi,2−(cid:2)
2
(cid:2)
γ
i,1
2 h
(cid:2)
ω2γ
i,1
= g
1
= gˆsi
1 y
= ti,2/
j∈Ci
(cid:2)
i,2
g
(cid:2)
gs
i
1 y
∗c+ˆcg
(cid:12)
∗ ˆc
j∈Ci
tj,2
y
∗
for a set of public keys PK∗
as in the real signing protocol. Moreover, the responses are
correctly distributed due to the random choices of ˆri, ˆsi, and
ˆc.
When F fails to output a successful forgery, then A outputs
fail. Otherwise, let F’s forgery is σ = (¯t1, ¯t2, s, γ1, γ2) on
. Without loss of
message m
generality, we assume that F makes all hash queries involved
in verifying the forgery and the proofs of possession in PK∗
.
, 1, ω), then A aborts by
If there doesn’t exist a record (m
outputting (∅,∅). Otherwise, let jf be the index of A’s random-
(cid:5)
∗
oracle query H0(¯t1, ¯t2, PK , m
(y,π)∈PK∗ y, and let out jf = (¯t1, ¯t2, c, s, γ1, γ2,PK, ω). For
each pk = (y, (d, w)) ∈ PK∗ \ {pk∗}, let jy be the index of
A’s random-oracle query H1(y, v) = d where v = gw
−d, and
1 y
let out jy = (y, v, d, w). Algorithm A outputs (J,{out j}j∈J,
where J = {jy}(y,π)∈PK∗ ∪ {jf}.
) = hjf = c where PK ∗
=
∗
(cid:18)(cid:17)(cid:26)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
(cid:18)qS ·
Algorithm A runs in time at most τ + (3qH + 5qS + N +
6) · τexp + O(N qS + N ) and succeeds whenever F succeeds
and A doesn’t abort prematurely, meaning that all F’s signing
queries were on messages m where the biased coin in H3(m)
∗
) came out tails. The
came out heads, and the one in H3(m
success probability of A is therefore A ≥ δqS (1−δ)·. Using