strategic perspective uses the mind map notation of information on different layers of abstraction
to elicit the information. The conceptual perspec- in the corresponding dimensions. Changes in one
tive employs mostly the UML diagrams, a semi- model have to be propagated into the affected
formal graphical notation. Whereas, the logical models holding the overlapping information. This
perspective makes use of formal notations, the is a time-consuming and challenging task since
technical perspective applies formal languages, each of the models has to be aware of changes and
such as BPEL and WSDL. needs to be adjusted. For a structured approach
Next to existing notations, new languages were we separate the dependencies between models
developed, where necessary. The service prop- into two classes: vertical and horizontal.
erty notation is a domain-specific language and Vertical dependencies cover the synchroniza-
describes services from a provider’s perspective tion of dependencies between models on different
in a non-technical fashion and includes informa- layers of abstraction in one dimension. It represents
tion about capabilities, price & payment, delivery the bridging of layers of abstraction by transform-
channels, rating, legal aspects, and provider de- ing between multiple representations of artifacts.
tails in order to facilitate service discovery. The Horizontal dependencies define the synchro-
Universal Service Description Language (USDL) nization of models on the same layer of abstraction.
(Cardoso, Winkler, & Voigt, A Service Descrip- This describes dependencies between models of
tion Language for the Internet of Services, 2009) different dimensions which refer to artifacts of
is a XML specification that holds facts about other dimensions. This also includes multiple
business information, operational information, representations of an artifact on the same layer
and technical information related to the service. of abstraction.
The Canonical Abstract Prototypes (CAP) editor These dependencies form the integration of
provides an abstract description of a user interface the models and have to be implemented manually
structure. Finally, the service archive (SAR) is an or by automatic support. Being more precise, a
XML schema and denotes how to bundle technical dependency is defined by a mapping. Formally
models for deployment. a mapping assigns to a set of artifacts a set of
artifacts; where one sets corresponds to the other.
Model Transformations That means the different representations of infor-
mation are assigned to each other. To illustrate
The ISE Workbench offers model transformation the dependencies, Figure 5 Example for vertical
for flexibility, speed, and accuracy in design. and horizontal model transformation. Figure 5
Since the union of all models defines a service shows an example which depicts the dependen-
they need to be integrated and synchronized. cies between two layers of abstraction as well as
This integration task is facing major challenges between models on the same layer but of differ-
because of the various people involved within the ent dimensions. The process dimension shown
development process and the rising complexity is specified regarding the conceptual and logical
of the models. To cope with these challenges we layers. The conceptual layer is represented by
propose to integrate the models automatically by an UML activity diagram. The Business Process
model transformations. Modeling Notation (BPMN) is used to represent
The ISE models contain artifacts represent- the logical layer. The arrows depict artifacts that
ing a service’s five dimensions: service, process,
135
Modeling Services Using ISE Framework
Figure 5. Example for vertical and horizontal model transformation
need to be synchronized and are mapped onto transformation can be used to define rules and
each other. apply them to the models. During the last years
The Actions modeled in the activity diagram many model transformation languages have been
are again represented in BPMN as tasks. Therefore, proposed, both by academia and industry. For
Action A needs to be synchronized with Task A. an overview, we refer to Czarnecki and Helsens
That means that UML actions need to be mapped classification of today’s approaches (Czarnecki &
to BPMN tasks. The XOR between Task B and Helsen, 2006). The two most prominent propos-
Task C of the BPMN model is mapped from Ac- als in the context of Model Driven Architecture
tion B or C of the UML model. Furthermore, the (MDA) are Query, View and Transformation
Information I artifact used in the workflow is (QVT) and the ATLAS Transformation Language
defined in the OWL-model (i.e., it depends on it). (ATL).
When one model changes (e.g. renaming or dele- We have chosen to rely on MDA to support
tion), the depending models have to be updated. model transformations because of matured con-
These updates can be done manually or by provid- cepts, well established infrastructure for model
ing an automatic support. One solution to enable management and transformation, and available
an automatic approach is by using model trans- OMG standards. A model transformation is the
formations for implementing mappings. process of converting one model to another model
The first step to enable the implementation of of the same system. Thus a model transforma-
model transformations is to define one common tion is an implementation of a mapping (model
formal representation of models. This can be done dependency specification). We follow Kleppe and
using ontology formalism or more mature concepts Warmer (Kleppe & Warmer, 2003) refining this
like the Meta Object Facility (MOF). Based on this definition to an automatic generation of a target
formalism, a domain specific language for model model from a source model, following a transfor-
136
Modeling Services Using ISE Framework
Figure 6. Architecture of ISE workbench
mation definition. A transformation definition is a perform further operations for a seamless service
set of rules describing formally how a source model provisioning. The ISE workbench component
can be transformed into a target model. Using a is built on an Eclipse1 platform and has several
rule-based language like QVT to define model internal building blocks: Model editors, model
transformations executed by an engine allows repository and model transformation engine en-
for incremental and traceable transformations. ables to develop services in a model-driven way
For automatic model integration we argue for as introduced in the ISE matrix above. Specifi-
model transformations as the implementation of cally, we have 20 separate models each of which
mappings. Using and applying these concepts is associated with the corresponding editors and
enables automatic model synchronization. This transformation among them.
supports both the implementation of vertical and In addition, SAR wizard interacts with the
horizontal dependencies, thus reducing the com- Tradable Service Runtime (TSR) which is a com-
plexity, effort and errors in modeling a service ponent to handle deployment and execution of a
using ISE. service in the Service Execution phase of the
The ISE Workbench also offers deployment service lifecycle. It mainly includes Adaptation,
capabilities for seamless service execution. The Monitoring and Process/Service Engines required
service archive (SAR) is an XML schema and for runtime functionality. Besides, there are
denotes how to bundle technical models. After other blocks included in the ISE Workbench to
service design with the ISE Workbench, the tool enable the service engineer to interact with Service
generates a SAR file and deploys it on a service Management Platform (SMP) for further service
runtime environment. related tasks. Discovery Wizard enables the service
engineer to interact with Service Discovery that,
ISE Architecture in turn, searches the repository to discover avail-
able services to be composed into the service.
The ISE workbench is a part of larger TEXO ser- Process Pattern Matching, Context Backend and
vice ecosystem architecture as depicted in Figure 6 Dependency Analysis are all special extensions
in detail. The overall architecture mainly includes to the ISE workbench which will be explained in
four components including the ISE workbench to detail in the subsequent sections.
137
Modeling Services Using ISE Framework
Figure 7. Overall process of hardware maintenance service
Finally, the TEXO Portal is an end-user inter- hardware is to be replaced within two hours, (2)
face which does not have a direct connection to the new hardware is installed within two working
ISE workbench, but its functionality to negotiate days after ordering, (3) every 24 hours a backup
service agreements, to search for available services is performed, and (4) backups can be played
and to test and execute them is very crucial in the back within 30 minutes. The price that business
architecture. It allows the end-users to use the units need to pay for the MDH service depends
services engineered in the ISE workbench with the on contextual information, including business
help of the TSR and SMP components. Currently, units’ location, usage data, and whether business
the ISE workbench employs some well-known units are standard or premium customers. The IT
editors for service engineering, which are widely department itself utilizes two services in order to
adopted by Eclipse community. These include the offer desktop hardware management. Company
WSDL editor or the BPEL editor. Some other edi- B, a storage provider, performs a backup service
tors are also developed from scratch such as the and company C, a computer repair shop, conducts
SLA model editor or the context modeler. installations as well as repair services at business
units’ location.
In order to develop the MDH service, service
MODELING EXTENSIONS provider (i.e. IT department) needs to deal with
some challenges in terms of realizing a service
Running Example composition, describing the realized service and
ensuring its proper functioning. First, the service
This section introduces an example that is utilized provider should be supported to identify suitable
throughout the rest of the chapter to motivate the services that can be reused for realizing the MDH
three advanced modeling ISE extensions. Figure 1 service. This is especially important to assign
shows three companies. Company A’s IT depart- concrete services to high-level business tasks for
ment offers the Manage Desktop Hardware (MDH) an executable process realization. Furthermore,
service, that allows outsourcing the purchase there is a need for a mechanism to describe the
and the maintenance of computer hardware. The service in such a way that service context is
service’s target customers are company A’s own taken into account. Specifically, some service
business units who pays for computer hardware properties (e.g. service price) cannot be determined
leasing. The benefits for business units include in advance due to the dynamicity and depen-
lower transaction costs, lower labor costs, lower dency on the context. Another challenge for
IT costs, and latest hardware. The MDH service is service provider is to manage the interplay of
provided with four service levels: (1) out of order services for a proper functioning. Here, SLA
138
Modeling Services Using ISE Framework
Figure 8. Transformation from BPMN to BPEL
compatibility comes into play since different allow to model processes in a subject oriented
problems may occur due to SLA incompatibility way, which is also well-suited for SOA. Subject-
such as violations (e.g. negotiated composite QoS orientation introduces an approach that gives a
(new hardware in 24 hours) cannot be met due to balanced consideration to the actors in business
negotiated atomic QoS (backup data, replace processes (persons and systems as subjects), their
hardware, and restore data). actions (predicates), and their goals or the subject
matter of their actions (objects). It is based on the
Service Composition by fact that humans, machines and services can be
Process Pattern Matching modeled in the same manner. All receive and
deliver information by exchanging messages.
To manage the transition from the business per- Humans, e.g., exchanges emails, office documents,
spective to the technical perspective (Cardoso, or voice messages. Furthermore, the subject-
Voigt, & Winkler, 2009) (Kett, Voigt, Scheithauer, oriented modeling approach enables the modeling
& Cardoso, 2009), ISE supports the transformation of business processes in any arbitrary size because
of BPMN models to executable BPEL models. As of the feature of composing services which is
shown in Figure 8(a), two different methods are provided by the underlying model.
supported to assign services to BPMN tasks. The Reusability is one of the main motivations for
first method is a direct transformation, where the the SOA paradigm and in the context of TEXO, the
designer statically assigns a set of existing atomic reusable modules are web services. In the case of
or composite services to a task. Alternatively, if a a large number of services, automatic composition
suitable service does not already exist, the designer methods gain importance and one requirement for
can add a goal specification to the task which is automatic composition approaches is the use of
represented by a fragmented process model con- formal service descriptions.
structed by process patterns. This specification can The formalism of PASS is founded on top of
then be used by the automatic service composition the process algebra CCS (Milner, 1995) (Calculus
component to automatically compose services that of Communicating Systems) and the language
satisfy the given specification. constructs of PASS can be transformed down to
The automatic service composition component pure CCS. Process algebras provide a suitable
applies process pattern matching to identify suit- means for modeling distributed systems. They
able services. An important foundation for this offer well-studied algorithms for verification
action is the use of a formal description language and formalisms, e.g., for defining behavioral
for processes with well-defined semantics. For equivalences. In addition, the CCS hiding operator
that reason, we have chosen the Parallel Activities facilitates a hierarchization and modularization of
Specification Scheme (PASS) (Fleischmann, the model, allowing to handle business processes
1994) as a description language. PASS graphs of arbitrary size.
139
Modeling Services Using ISE Framework
Figure 9. Parallel activities specification scheme (PASS) models
Figure 8(b) shows the most important steps of 1. Send message.
our service composition method. In the following, 2. Receive message.
we briefly describe each of these steps. 3. Function (= F Figure 9 (b), (c))
Defining a Goal for Business Tasks The first two types enable services to exchange
messages, and the function activity allows to call
In order to add a goal specification to a BPMN internal functions. The ⊠ symbol marks the end
task, we extended the BPMN editor by an addi- of the process description. To make the matching
tional property sheet to create a goal for each task, of activities work, it is vitally important that the
but this is only necessary if no suitable service activities in the search pattern and in the process
could be found. description of a service are modeled using the same
To specify goals, we have integrated the jPASS vocabulary. To ensure this, an activity catalogue
editor from jCOM12 into the ISE workbench. Fig- is also introduced.
ure 9 shows the basic concepts of the specification To describe process patterns, the PASS lan-
scheme. The two model levels, subject interactions guage was extended. Figure 9(c) shows a process
and internal behavior of service, are available to pattern. In contrast to regular PASS graphs, process
specify a valid goal. Figure 9(a) depicts the sub- patterns do not have to be fully connected graphs
ject interaction level and Figure 9(b) and Figure and may contain the _ wildcard operator. This op-
9(c) depict examples for the internal behavior of erator is a place holder for arbitrary subgraphs and
services. The relationships between subjects and is part of the fragment depicted in Figure 9(c). The
the types of exchanged messages are defined on process patterns are used for service matching and
the subject interaction level. The description of their modeling differs from that of fully-specified
service behavior is explained in more detail below. processes in the following two aspects:
In accordance to our motivating scenario, the
Service Consumer represents the Business Units, 1. In the model of the composite service, only
Service 1 the IT department, and Services 2 and activities which are essential for the process
3 the Backup Service and the Installation & Repair are specified. This simplifies modeling since
Service. We assume that the IT department con- the service engineer does not have to specify
ducts the most maintenance and backup work by all functionalities and does not have to take
itself, but in certain cases it is dependent on both care about each detail activity. E.g., he could
external services. How to model the internal be- omit modeling the payment branch in the
havior of each service is shown in the Figure 9(b) process. If services have such branches, they
and 4(c). It is modeled using three different basic would still be included, unless the engineer
types of activities:
140
Modeling Services Using ISE Framework
explicitly models the exclusion of certain Verification
behavior.
2. The order of activities can be defined in a The graph-based representation is suitable for
more general way as in traditional process finding candidate services, but it is not directly
models. The ~ operator can be used in con- suitable for verification, because it lacks a theoreti-
junction with multiple isolated subgraphs to cal foundation. For this purpose, we transform a
express an order between activities, instead graph into a CCS description and use this formal
of a single sequential order. This is useful, representation for advanced validation.
e.g., to enforce a certain behavior or com- We currently use the CWB-NC Workbench3
munication pattern, while only concentrating which supports various behavioral equivalences
on the essential parts of a process. as well as features such as model checking. The
model checking rules are described with the
Service Composition µ-calculus, which is temporal logic. Firstly, this
allows to identify services that expose equivalent
The first step in a composition is to find matching behavior. At runtime, such services might be used
service candidates. To match goal specifications as replacements in case the original service fails.
with service descriptions, we use the programmed Secondly, a choreography conformance check
graph rewriting system GRL. GRL stands for can be performed. In a valid composition, it must
Graph Rewrite Library and is a Java library that be ensured that the involved services are able to
provides the core functions of a graph rewriting communicate with each other. For this purpose,
system by supporting queries and rewrite opera- we have developed a method for checking the
tions. Rewrite rules are described in the declarative communication of each pair of services. Two