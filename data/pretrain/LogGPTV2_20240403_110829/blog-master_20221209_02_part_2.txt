-------------------------------------------------------------  
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)  
   Output: (count(DISTINCT gid))  
   SQLite query: SELECT count(DISTINCT "gid") FROM main."t3"  
(3 rows)  
postgres=# \timing  
Timing is on.  
select count(distinct gid) from t3;  
 count  
-------  
   100  
(1 row)  
Time: 13.556 ms  
select count(distinct gid),count(*) from t3;  
 count |  count  
-------+---------  
   100 | 1000000  
(1 row)  
Time: 21.836 ms  
explain verbose select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.id;  
                                                            QUERY PLAN  
-----------------------------------------------------------------------------------------------------------------------------------  
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)  
   Output: (count(DISTINCT t3.gid)), (count(*))  
   SQLite query: SELECT count(DISTINCT r1."gid"), count(*) FROM (main."t3" r1 INNER JOIN main."t1" r2 ON (((r1."gid" = r2."id"))))  
(3 rows)  
select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.id;  
 count |  count  
-------+---------  
   100 | 1000000  
(1 row)  
Time: 15.536 ms  
select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.id join t2 on t3.cid=t2.cid;  
 count |  count  
-------+---------  
   100 | 1000000  
(1 row)  
Time: 18.570 ms  
explain verbose select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.id join t2 on t3.cid=t2.cid;  
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)  
   Output: (count(DISTINCT t3.gid)), (count(*))  
   SQLite query: SELECT count(DISTINCT r1."gid"), count(*) FROM ((main."t3" r1 INNER JOIN main."t1" r2 ON (((r1."gid" = r2."id")))) INNER JOIN main."t2" r4 ON (((r1."cid" = r4."cid"))))  
(3 rows)  
```  
5、将数据导入PolarDB本地, 做同样的查询看一下时间.  
postgresql 本地计算  
```  
postgres=# create unlogged table lt1 as select * from t1;  
SELECT 100  
postgres=# create unlogged table lt2 as select * from t2;  
SELECT 100  
postgres=# create unlogged table lt3 as select * from t3;  
SELECT 10000000  
postgres=# \timing  
Timing is on.  
postgres=# select count(distinct gid) from lt3;  
 count  
-------  
   100  
(1 row)  
Time: 1142.800 ms (00:01.143)  
```  
duckdb_fdw+Parquet 比本地行存储表快了近100倍.  
## 参考  
https://github.com/alitrack/duckdb_fdw  
##### 202211/20221128_01.md   [《DuckDB 轻量级压缩解读》](../202211/20221128_01.md)  
##### 202211/20221124_08.md   [《DuckDB 0.6.0 CLI 支持新的结果集显示模式 duckbox, 展示头部和尾部的少量记录, 避免结果集占满屏幕》](../202211/20221124_08.md)  
##### 202211/20221124_07.md   [《DuckDB 0.6.0 CLI 支持 tab键自动补齐》](../202211/20221124_07.md)  
##### 202211/20221124_06.md   [《DuckDB 0.6.0 的SQL执行进度是个败笔? 速度太快了, 执行进度反而成了干扰.》](../202211/20221124_06.md)  
##### 202211/20221124_04.md   [《DuckDB 0.6.0 支持并行 COUNT(DISTINCT)》](../202211/20221124_04.md)  
##### 202211/20221124_03.md   [《DuckDB 0.6.0 支持并行创建索引, 提升create index性能》](../202211/20221124_03.md)  
##### 202211/20221124_02.md   [《DuckDB 0.6.0 支持 csv 并行读取功能, 提升查询性能》](../202211/20221124_02.md)  
##### 202211/20221124_01.md   [《DuckDB 0.6.0 压缩算法增加: FSST, Chimp, Patas 提升字符串和浮点数压缩能力》](../202211/20221124_01.md)  
##### 202211/20221123_03.md   [《DuckDB 0.6.0 数据批量写入性能优化》](../202211/20221123_03.md)  
##### 202211/20221123_02.md   [《为什么看好 DuckDB 的发展前景?》](../202211/20221123_02.md)  
##### 202211/20221122_04.md   [《DuckDB 0.6.0 内存管理增强, 提升超出内存大小的大数据集hashjoin,sort,window function性能》](../202211/20221122_04.md)  
##### 202211/20221122_03.md   [《DuckDB 0.6.0 语法糖: Add Python-style list-comprehension syntax support to SQL》](../202211/20221122_03.md)  
##### 202211/20221122_02.md   [《DuckDB 0.6.0 语法糖: 支持columns 语法 - 兼容clickhouse columns 语法》](../202211/20221122_02.md)  
##### 202211/20221122_01.md   [《DuckDB 0.6.0 新增UNION数据类型支持 - 单列支持多类型》](../202211/20221122_01.md)  
##### 202211/20221116_02.md   [《DuckDB 0.6.0 发布》](../202211/20221116_02.md)  
##### 202211/20221111_01.md   [《DuckDB extension(插件) - 扩展DuckDB功能》](../202211/20221111_01.md)  
##### 202211/20221101_01.md   [《DuckDB 数值类型性能 : hugeint (16字节整型), decimal(内部整型存储)》](../202211/20221101_01.md)  
##### 202210/20221027_04.md   [《DuckDB select 语法糖: sample 采样查询》](../202210/20221027_04.md)  
##### 202210/20221027_03.md   [《DuckDB select 语法糖: exclude, replace columns》](../202210/20221027_03.md)  
##### 202210/20221027_02.md   [《DuckDB 备份与恢复数据库》](../202210/20221027_02.md)  
##### 202210/20221026_05.md   [《DuckDB 对比 PostgreSQL 48张表JOIN 的优化器》](../202210/20221026_05.md)  
##### 202210/20221026_04.md   [《DuckDB 对比 PostgreSQL join 优化器推理优化又一例》](../202210/20221026_04.md)  
##### 202210/20221026_03.md   [《DuckDB COPY 数据导入导出 - 支持csv, parquet格式, 支持CODEC设置压缩》](../202210/20221026_03.md)  
##### 202210/20221026_02.md   [《DuckDB 虚拟列 - `GENERATED ALWAYS AS () VIRTUAL`》](../202210/20221026_02.md)  
##### 202210/20221026_01.md   [《DuckDB DataLake 场景使用举例 - aliyun OSS对象存储parquet》](../202210/20221026_01.md)  
##### 202210/20221025_05.md   [《DuckDB lambda 函数使用 - list/array数据处理 - 元素的转换与过滤 (list_filter, list_transform)》](../202210/20221025_05.md)  
##### 202210/20221025_04.md   [《DuckDB 列位置别名 `#n` 的使用》](../202210/20221025_04.md)  
##### 202210/20221025_03.md   [《DuckDB 宏(MACRO) 的使用》](../202210/20221025_03.md)  
##### 202210/20221025_02.md   [《DuckDB update from,delete using - 采用JOIN 批量更新和批量删除》](../202210/20221025_02.md)  
##### 202210/20221025_01.md   [《DuckDB rowid 的使用》](../202210/20221025_01.md)  
##### 202210/20221024_07.md   [《DuckDB 对比 PostgreSQL left outer join 优化器推理优化一例》](../202210/20221024_07.md)  
##### 202210/20221024_06.md   [《DuckDB insert query 数据导入场景 优化和使用注意》](../202210/20221024_06.md)  
##### 202210/20221024_04.md   [《DuckDB 鸟瞰数据的方法: SUMMARIZE. 数据柱状图、统计信息》](../202210/20221024_04.md)  
##### 202210/20221024_03.md   [《DuckDB explain analye 的结果解释 - Profile Queries》](../202210/20221024_03.md)  
##### 202210/20221024_02.md   [《查看 DuckDB 优化器 物理和逻辑执行计划 - explain_output》](../202210/20221024_02.md)  
##### 202210/20221001_02.md   [《duckdb postgres_scan 插件 - 不落地数据, 加速PostgreSQL数据分析》](../202210/20221001_02.md)  
##### 202209/20220924_01.md   [《用duckdb_fdw加速PostgreSQL分析计算, 提速40倍, 真香.》](../202209/20220924_01.md)  
##### 202209/20220913_02.md   [《德说-第140期, duckdb+容器+parquet+对象存储, 实现SaaS场景, 低代码拖拉拽多维度实时分析 降本提效》](../202209/20220913_02.md)  
##### 202209/20220909_02.md   [《德说-第135期, duckdb的产品形态如何盈利? 未来数据库产品的商业形态》](../202209/20220909_02.md)  
##### 202209/20220905_01.md   [《DuckDB parquet 分区表 / Delta Lake(数据湖) 应用》](../202209/20220905_01.md)  
##### 202209/20220902_01.md   [《DuckDB 线性回归预测股价的例子》](../202209/20220902_01.md)  
##### 202209/20220901_06.md   [《DuckDB 数据文件水位问题观察》](../202209/20220901_06.md)  
##### 202209/20220901_05.md   [《DuckDB 采用外部 parquet 格式存储 - tpch 测试 - in_memory VS in_parquet》](../202209/20220901_05.md)  
##### 202209/20220901_04.md   [《DuckDB 完整的PRAGMA, setting, 系统表, 系统视图, 内置函数, 内置类型 在哪里?》](../202209/20220901_04.md)  
##### 202209/20220901_03.md   [《DuckDB 数据库的数据能不能超出内存限制? 以及推荐的使用方法 - parquet》](../202209/20220901_03.md)  
##### 202209/20220901_02.md   [《编译安装 DuckDB 最新版本 in MacOS》](../202209/20220901_02.md)  
##### 202209/20220901_01.md   [《DuckDB 读写 Parquet 文件 - 同时支持远程s3, oss, http等parquet文件读写》](../202209/20220901_01.md)  
##### 202208/20220831_02.md   [《DuckDB 聚合函数用法举例》](../202208/20220831_02.md)  
##### 202208/20220831_01.md   [《DuckDB的字符串 collate用法 - 大小写、口音(西方各国字符集)、地域属性、排序 - (icu, noCASE, noACCENT, noNFC)》](../202208/20220831_01.md)  
##### 202208/20220829_04.md   [《DuckDB 快速生成海量数据的方法》](../202208/20220829_04.md)  
##### 202208/20220829_03.md   [《DuckDB:list,struct,map 类型很强大(支持lambda计算) - PostgreSQL:数组、row|record、json字典》](../202208/20220829_03.md)  
##### 202208/20220829_02.md   [《DuckDB 字符串相似性计算函数》](../202208/20220829_02.md)  
##### 202208/20220829_01.md   [《DuckDB vs PostgreSQL TPC-H 测试》](../202208/20220829_01.md)  
##### 202208/20220828_01.md   [《DuckDB TPC-H, TPC-DS 测试》](../202208/20220828_01.md)  
##### 202208/20220827_01.md   [《DuckDB Window 窗口函数语法糖 - QUALIFY - window filter》](../202208/20220827_01.md)  
##### 202208/20220826_02.md   [《DuckDB 定位OLAP方向的SQLite, 适合嵌入式数据分析 - tpch测试与简单试用》](../202208/20220826_02.md)  
##### 202010/20201022_01.md   [《PostgreSQL 牛逼的分析型功能 - 列存储、向量计算 FDW - DuckDB_fdw - 无数据库服务式本地lib库+本地存储》](../202010/20201022_01.md)  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")  
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")  
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")  
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")  
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")  
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")  
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")