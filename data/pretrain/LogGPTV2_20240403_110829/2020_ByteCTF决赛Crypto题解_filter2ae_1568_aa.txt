# 2020 ByteCTF决赛Crypto题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
bytectf决赛线下crypto赛题质量依然很高，在线下赛中实属难得，在此记录一下比赛时8个小时的做题过程。
## impersonation
Alice：
    from KeyExchange import KeyExchange
    from gmssl import func
    from flag import FLAG
    import socket
    import time
    import signal
    import sys
    sys.stderr = open('/dev/null', 'w')
    signal.alarm(5)
    n = 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123'
    public_key_B = 'e52f035c340267a2ee2c57de87db9acf443d1fb98f0b7abbc55d9f332f4f823e' \
                   '0f81e7dde971b1e4d02981fc5741eb30f71bf6bcd0c02b06e5c857eedc58cae5'
    G = '32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7' \
        'bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0'
    print("Hi, Can you tell me bob's address?")
    print("I have a message to tell him.")
    try:
        addr = input('>>>').strip()
        ip, port = [x.strip() for x in addr.split(':')]
        port = int(port)
    except:
        ip, port = 'bob', 1337
    print(f"OK! {ip}:{port}, I got it!")
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, port))
        data = s.recv(1024).strip()
        assert data == b'Hi, Alice?'
    except:
        print("Oh noooooo! Where did Bob go?")
        exit()
    KE = KeyExchange()
    r_str = func.random_hex(len(n))
    P_a, T_a = KE.send(r_str)
    s.sendall(f'{P_a.zfill(128)}{T_a}\n'.encode())
    time.sleep(0.1)
    data = s.recv(1024).strip().decode()
    P_b, T_b = data[:128],  data[128:]
    if P_b != public_key_B:
        print("Oh noooooo! Fake Bob!")
        exit()
    msg = KE.transport(P_b, T_b, FLAG)
    s.sendall(f'{msg}\n'.encode())
    time.sleep(0.1)
    data = s.recv(1024).strip().decode()
    msg = KE.decrypt(data)
    if FLAG == msg:
        print("My feelings are transmitted, Bye~")
    else:
        print("Oh noooooo! Fake Bob!")
    exit()
中间人攻击
场景大概是Alice想与Bob通信，可以通过本地起一个socket当服务器，给他自己的ip,
port后再连接Bob即可拦截与修改信息，进行中间人攻击。这个场景还是有一定现实意义的，由于网站都有证书，所以Alice作为一个用户往往能够判断对方的公钥正确性，而服务器却不行，而若密钥协商协议实现有问题，则很有可能仍然有安全隐患。
Bob的代码：
    from KeyExchange import KeyExchange
    from gmssl import func
    import signal
    import sys
    sys.stderr = open('/dev/null', 'w')
    signal.alarm(5)
    n = 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123'
    private_key = '????????????????????????????????????????????????????????????????'
    public_key = 'e52f035c340267a2ee2c57de87db9acf443d1fb98f0b7abbc55d9f332f4f823e' \
                 '0f81e7dde971b1e4d02981fc5741eb30f71bf6bcd0c02b06e5c857eedc58cae5'
    KE = KeyExchange(public_key, private_key)
    print('Hi, Alice?')
    data = input().strip()
    P_a, T_a = data[:128],  data[128:]
    r_str = func.random_hex(len(n))
    P_b, T_b = KE.respond(r_str, P_a, T_a)
    print(f'{P_b.zfill(128)}{T_b}')
    data = input().strip()
    msg = KE.reencrypt(data)
    print(msg)
keyexchange
    from gmssl import func, sm3
    sm2p256v1_ecc_table = {
        'n': 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123',
        'p': 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF',
        'g': '32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7' +
             'bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0',
        'a': 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC',
        'b': '28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93',
    }
    class KeyExchange(object):
        def __init__(self, public_key=None, private_key=None, ecc_table=None):
            if ecc_table is None:
                ecc_table = sm2p256v1_ecc_table
            self.para_len = len(ecc_table['n'])
            self.ecc_a3 = (int(ecc_table['a'], base=16) +
                           3) % int(ecc_table['p'], base=16)
            self.ecc_table = ecc_table
            self.z = None
            self.sk = None
            self.peer_pk = None
            if public_key and private_key:
                self.public_key = public_key
                self.private_key = private_key
            else:
                self.private_key = func.random_hex(len(ecc_table['n']))
                self.public_key = self._kg(
                    int(self.private_key, 16), ecc_table['g'])
        def send(self, r_str):
            r = int(r_str, 16) % int(self.ecc_table['n'], base=16)
            T = self._kg(r, self.ecc_table['g'])
            h = int(self.sm3_hash_str(T), 16) % int(self.ecc_table['n'], base=16)
            self.z = (r + h * int(self.private_key, 16)
                      ) % int(self.ecc_table['n'], base=16)        # z = r + hash(rG) *pri
            return self.public_key, T
        def respond(self, r_str, peer_public_key, peer_T):
            self.peer_pk = peer_public_key
            r = int(r_str, 16) % int(self.ecc_table['n'], base=16)
            T = self._kg(r, self.ecc_table['g'])       # T = rG
            h = int(self.sm3_hash_str(T), 16) % int(self.ecc_table['n'], base=16) # hash(rG)
            #self.z = (r + h * int(self.private_key, 16)
            #          ) % int(self.ecc_table['n'], base=16)
            peer_h = int(self.sm3_hash_str(peer_T), 16) % int(
                self.ecc_table['n'], base=16)
            peer_hP = self._kg(peer_h, self.peer_pk)
            peer_ThP = self._add_point(peer_T, peer_hP)
            peer_ThP = self._convert_jacb_to_nor(peer_ThP)      #(hash * pub + rG)*z 
            #K = self._kg(self.z, peer_ThP)
            self.sk = self.sm3_hash_str(K)
            return self.public_key, T
        def transport(self, peer_public_key, peer_T, flag_bytes):
            self.generate(peer_public_key, peer_T)
            sk_bytes = bytes.fromhex(self.sk)
            return bytes(a ^ b for (a, b) in zip(flag_bytes, sk_bytes)).hex()
        def reencrypt(self, xor_cipher):
            msg = bytes(a ^ b for (a, b) in zip(
                bytes.fromhex(xor_cipher), bytes.fromhex(self.sk)))
            return self.encrypt(msg)
        def generate(self, peer_public_key, peer_T):
            peer_h = int(self.sm3_hash_str(peer_T), 16) % int(
                self.ecc_table['n'], base=16)
            peer_hP = self._kg(peer_h, peer_public_key)
            peer_ThP = self._add_point(peer_T, peer_hP)
            peer_ThP = self._convert_jacb_to_nor(peer_ThP)
            K = self._kg(self.z, peer_ThP)
            self.sk = self.sm3_hash_str(K)
            return None
        def encrypt(self, data):
            msg = data.hex()
            k = func.random_hex(self.para_len)
            C1 = self._kg(int(k, 16), self.ecc_table['g'])   
            xy = self._kg(int(k, 16), self.peer_pk)
            x2 = xy[0:self.para_len]
            y2 = xy[self.para_len:2 * self.para_len]
            ml = len(msg)
            t = sm3.sm3_kdf(xy.encode('utf8'), ml / 2)
            if int(t, 16) == 0:
                return None
            else:
                form = '%%0%dx' % ml
                C2 = form % (int(msg, 16) ^ int(t, 16))
                C3 = sm3.sm3_hash([
                    i for i in bytes.fromhex('%s%s%s' % (x2, msg, y2))
                ])
                return '%s%s%s' % (C1, C3, C2)
                # kG , hash , msg ^ hash(xy)
        def decrypt(self, data):
            len_2 = 2 * self.para_len
            len_3 = len_2 + 64
            C1 = data[0:len_2]
            C3 = data[len_2:len_3]
            C2 = data[len_3:]
            xy = self._kg(int(self.private_key, 16), C1)
            x2 = xy[0:self.para_len]
            y2 = xy[self.para_len:len_2]
            cl = len(C2)
            t = sm3.sm3_kdf(xy.encode('utf8'), cl / 2)
            if int(t, 16) == 0:
                return None
            else:
                form = '%%0%dx' % cl
                M = form % (int(C2, 16) ^ int(t, 16))
                u = sm3.sm3_hash([
                    i for i in bytes.fromhex('%s%s%s' % (x2, M, y2))
                ])
                if u == C3:
                    return bytes.fromhex(M)
                else:
                    return None
        def sm3_hash_str(self, msg):
            return sm3.sm3_hash(func.bytes_to_list(msg.encode()))
        def _kg(self, k, Point):
            if (k % int(self.ecc_table['n'], base=16)) == 0:
                return '0' * 128
            Point = '%s%s' % (Point, '1')
            mask_str = '8'
            for i in range(self.para_len - 1):
                mask_str += '0'
            mask = int(mask_str, 16)
            Temp = Point
            flag = False
            for n in range(self.para_len * 4):
                if flag:
                    Temp = self._double_point(Temp)
                if (k & mask) != 0:
                    if flag:
                        Temp = self._add_point(Temp, Point)
                    else:
                        flag = True
                        Temp = Point
                k = k > 1) - T3) % int(
                        self.ecc_table['p'], base=16)
                else:
                    T4 = (T5 + (T5 >> 1) - T3) % int(self.ecc_table['p'], base=16)
                T1 = (T1 * T4) % int(self.ecc_table['p'], base=16)
                y3 = (T1 - T2) % int(self.ecc_table['p'], base=16)
                form = '%%0%dx' % self.para_len
                form = form * 3
                return form % (x3, y3, z3)
        def _add_point(self, P1, P2):