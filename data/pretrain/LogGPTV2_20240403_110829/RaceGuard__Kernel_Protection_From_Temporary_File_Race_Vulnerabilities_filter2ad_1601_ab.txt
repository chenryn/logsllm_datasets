### Cache Eviction Policy

**Retention:** We adopted a fast approximation to the First-In-First-Out (FIFO) policy for our cache eviction strategy. The key aspects of this policy are as follows:

1. **Circular Buffer Structure:**
   - The cache is implemented as a circular buffer, which allows for efficient and straightforward management of entries.

2. **Empty Slot Scanning:**
   - When a new entry needs to be added, the cache is scanned for empty slots. Empty slots naturally occur due to the frequent cache invalidation that happens upon the successful creation of temporary files (see Section 3.1).
   - The scan starts from the most recently created entry. If no empty slots are found, the entry just before the most recently created entry in the circular buffer is evicted.

This eviction policy is designed to be fast and avoids the common issue of prematurely evicting the most recently created entry.

### Race Conditions and Cache Inheritance

Race conditions can occur between processes, particularly in shell scripts. RaceGuard mitigates this by inheriting the cache from parent to child processes. This inheritance is facilitated by mediating the `fork()` system call. For example, if a parent process checks for the existence of a file using a built-in shell function like `[ -f tempfile ]`, this information is shared with its child processes.

To maintain cache consistency, child processes that clear entries from their cache also notify their parent to do the same. However, children do not attempt to populate their parents' cache, adhering to a conservative cache population policy. This prevents potential pollution of the parent's cache and reduces the risk of false positives.

### System Calls and Cache Management

Certain system calls, such as `mkdir()` and `link()`, are not subject to race conditions because they fail if the target already exists. Nevertheless, we clear matching cache entries on any successful file system entry creation, even for those calls that do not require monitoring for races. Similarly, many system calls return `ENOENT` to indicate that a file system entry does not exist. We have carefully selected a subset of these calls to mediate based on real-world usage patterns.

For instance, applications commonly use `stat()` or `access()` to check for a file's existence, while it is uncommon to use `chmod()` for this purpose. This selective approach to cache population helps ensure that the cache remains unpolluted.

### Pathological Case: Shell Scripts and File Probing

One pathological case involves shell scripts that execute external programs. The shell typically uses `stat()` to check for the program file in every directory in the `$PATH`. If the script probes many directories before finding the desired file, it can flood the RaceGuard cache with useless entries. As a result, a shell script that probes for a file, executes an external program, and then creates the file may not be protected by RaceGuard. However, in practice, most shell scripts find executables in `/bin` or `/usr/bin`, so this problem rarely occurs.

### Security Testing

Testing for temporary file race vulnerabilities is challenging due to their non-deterministic nature. To conduct repeatable tests, we created a modified version of the `mktemp` library call that:

1. **Pauses the Program:**
   - The modified `mktemp` function pauses the caller for 30 seconds, giving the attacker ample time to deploy the race attack.

2. **Prints the Created File Name:**
   - The function prints the name of the temporary file to `syslog`, allowing the attacker to precisely deploy the race attack.

Using this modified `mktemp` function, we successfully attacked four programs: RCS version 5.7, rdist Version 6.1.5, sdiff (GNU diffutils version 2.7), and shadow-utils-19990827. Without RaceGuard protection, we were able to dupe each victim program into overwriting an unintended file. With RaceGuard, the attacks were detected, and the victim programs were aborted, leaving the intended files unharmed.

### Compatibility Testing

RaceGuard is designed to be a highly transparent security solution, minimizing disruption to legitimate software. To test compatibility, RaceGuard has been running on various developer workstations since January 1, 2001. The following issues were identified and addressed:

1. **Mozilla Web/Mail Client:**
   - Heavy use of temporary files for caching web content led to false positive reports. Adding a cache clearing feature resolved this issue.

2. **Red Hat Linux Script:**
   - A script used to preserve `/dev/random`'s entropy pool across reboots caused problems. Modifying the cache clearing mechanism to include parent processes fixed this.

3. **CVS Checkout:**
   - Frequent probing for the same file name in different directories caused false positives. Changing cache entries to use fully resolved absolute paths addressed this.

4. **VMWare Virtual Machine:**
   - Periodic calls to `stat("")` with a null argument caused debugging errors. Disabling the related debugging feature resolved the issue.

### Performance Testing

Run-time security defenses, including RaceGuard, impose performance costs due to additional checks. However, RaceGuard is designed to minimize these overheads. The following microbenchmarks show the precise overhead imposed on mediated system calls:

| System Call | Without RaceGuard | With RaceGuard | % Overhead |
|-------------|--------------------|----------------|------------|
| Stat non-existent file | 4.3 μs | 1.5 ms | 104% |
| Open non-existent file | 8.8 μs | 1.44 ms | -4% |
| Fork | 161 μs | 183 μs | 13% |

These results indicate that while there is some overhead, it is generally minimal and acceptable for the level of security provided.

### Conclusion

RaceGuard provides a robust and efficient solution for mitigating temporary file race vulnerabilities. Through careful design and extensive testing, it ensures both security and compatibility, making it a valuable tool for enhancing system security.