# Python 和 Web
> 原文：
## 先决条件
*   对 python 语言的基本理解。
*   基本熟悉 flask 框架。
## 从本课程中可以期待什么
本课程分为两个高级部分。在第一部分中，假设熟悉 python 语言的基本操作和语法用法，我们将更深入地理解 python 作为一种语言。我们将 python 与其他编程语言进行比较，比如 Java 和 c。我们还将探索 python 对象的概念，并在此基础上探索 Python 的特性，比如 decorators。
在围绕 web 的第二部分中，假设您熟悉 Flask 框架，我们将从 socket 模块开始，处理 HTTP 请求。这将揭开 flask 这样的框架如何在内部工作的神秘面纱。
为了向课程介绍 SRE 风味，我们将设计、开发和部署(理论上)一个 URL 缩短应用。我们将强调整个过程中作为上述应用/服务的 SRE 更重要的部分。
## 本课程不包括哪些内容
对 python 内部和高级 python 有广泛的了解。
## 实验室环境设置
安装最新版本的 python
## 课程内容
1.  [Python 语言](https://linkedin.github.io/school-of-sre/level101/python_web/intro/#the-python-language)
    1.  [一些 Python 概念](https://linkedin.github.io/school-of-sre/level101/python_web/python-concepts/)
    2.  [Python 陷阱](https://linkedin.github.io/school-of-sre/level101/python_web/python-concepts/#some-gotchas)
2.  [Python 和 Web](https://linkedin.github.io/school-of-sre/level101/python_web/python-web-flask/)
    1.  [插座](https://linkedin.github.io/school-of-sre/level101/python_web/python-web-flask/#sockets)
    2.  [烧瓶](https://linkedin.github.io/school-of-sre/level101/python_web/python-web-flask/#flask)
3.  [短网址应用](https://linkedin.github.io/school-of-sre/level101/python_web/url-shorten-app/)
    1.  [设计](https://linkedin.github.io/school-of-sre/level101/python_web/url-shorten-app/#design)
    2.  [缩放应用](https://linkedin.github.io/school-of-sre/level101/python_web/sre-conclusion/#scaling-the-app)
    3.  [监控 App](https://linkedin.github.io/school-of-sre/level101/python_web/sre-conclusion/#monitoring-strategy)
## Python 语言
假设你懂一点 C/C++和 Java，让我们试着在这两种语言和 python 的背景下讨论下面的问题。你可能听说过 C/C++是一种编译语言，而 python 是一种解释语言。一般来说，对于编译语言，我们首先编译程序，然后运行可执行文件，而对于 python，我们像`python hello_world.py`一样直接运行源代码。而 Java 作为一种解释型语言，仍然有一个单独的编译步骤和运行步骤。那么真正的区别是什么呢？
### 编译与解释
这对你来说可能听起来有点奇怪:python 在某种程度上是一种编译语言！Python 内置了编译器！这在 java 的例子中很明显，因为我们使用一个单独的命令 ie: `javac helloWorld.java`来编译它，它将产生一个`.class`文件，我们称之为*字节码*。python 与此非常相似。这里的一个区别是，运行 python 程序不需要单独的编译命令/二进制文件。
那么，java 和 python 之间有什么区别呢？嗯，Java 的编译器更加严格和复杂。您可能知道 Java 是一种静态类型语言。因此，编译器的编写方式可以在编译时验证与类型相关的错误。虽然 python 是一种*动态*语言，但在程序运行之前，类型是未知的。所以在某种程度上，python 编译器是哑的(或者说，不那么严格)。但是当 python 程序运行时，确实有一个编译步骤。您可能见过扩展名为`.pyc`的 python 字节码文件。下面是如何看到给定 python 程序的字节码。
```sh
# Create a Hello World
$ echo "print('hello world')" > hello_world.py
# Making sure it runs
$ python3 hello_world.py
hello world
# The bytecode of the given program
$ python -m dis hello_world.py
 1           0 LOAD_NAME                0 (print)
             2 LOAD_CONST               0 ('hello world')
             4 CALL_FUNCTION            1
             6 POP_TOP
             8 LOAD_CONST               1 (None)
            10 RETURN_VALUE 
```
点击阅读更多关于 dis 模块[的信息](https://docs.python.org/3/library/dis.html)
现在来看 C/C++，当然有一个编译器。但是输出与 java/python 编译器产生的不同。编译一个 C 程序会产生我们所知的机器码。与字节码相反。
### 运行程序
我们知道编译涉及到我们正在讨论的所有 3 种语言。只是编译器本质上不同，它们输出不同类型的内容。在 C/C++的情况下，输出是可以被你的操作系统直接读取的机器代码。当你执行这个程序时，你的操作系统会知道如何运行它。但是字节码却不是这样。
那些字节码是特定于语言的。Python 有自己定义的字节码集(更多内容在`dis`模块中), java 也是如此。所以很自然地，你的操作系统将不知道如何运行它。为了运行这个字节码，我们有一个叫做虚拟机的东西。即:JVM 或 Python VM (CPython，Jython)。这些所谓的虚拟机是能够读取字节码并在给定的操作系统上运行的程序。Python 有多个虚拟机可用。Cpython 是用 C 语言实现的 python VM，类似地，Jython 是 python VM 的 Java 实现。最终，他们应该能够理解 python 语言的语法，能够将其编译成字节码，并能够运行该字节码。你可以用任何语言实现 python 虚拟机！(而人们这么做，只是因为可以做到)
```sh
 The Operating System
                                                              +------------------------------------+
                                                              |                                    |
                                                              |                                    |
                                                              |                                    |
hello_world.py                    Python bytecode             |         Python VM Process          |
                                                              |                                    |
+----------------+                +----------------+          |         +----------------+         |
|print(...       |   COMPILE      |LOAD_CONST...   |          |         |Reads bytecode  |         |
|                +--------------->+                +------------------->+line by line    |         |
|                |                |                |          |         |and executes.   |         |
|                |                |                |          |         |                |         |
+----------------+                +----------------+          |         +----------------+         |
                                                              |                                    |
                                                              |                                    |
                                                              |                                    |
hello_world.c                     OS Specific machinecode     |         A New Process              |
                                                              |                                    |
+----------------+                +----------------+          |         +----------------+         |
|void main() {   |   COMPILE      | binary contents|          |         | binary contents|         |
|                +--------------->+                +------------------->+                |         |
|                |                |                |          |         |                |         |
|                |                |                |          |         |                |         |
+----------------+                +----------------+          |         +----------------+         |
                                                              |         (binary contents           |
                                                              |         runs as is)                |
                                                              |                                    |
                                                              |                                    |
                                                              +------------------------------------+ 
```
上图需要注意两点:
1.  通常，当我们运行一个 python 程序时，会启动一个 python VM 进程，该进程读取 python 源代码，将其编译成字节码，然后在一个步骤中运行它。编译不是一个单独的步骤。仅出于说明目的示出。
2.  为类 C 语言生成的二进制文件并不完全按照原样运行。由于有多种类型的二进制文件(例如:ELF)，运行二进制文件需要更复杂的步骤，但我们不会深入讨论，因为所有这些都是在操作系统级别完成的。