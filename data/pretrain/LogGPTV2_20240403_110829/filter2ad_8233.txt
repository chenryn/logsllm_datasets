# 【技术分享】CVE-2016-4271: Flash本地文件系统沙箱绕过

## 译文声明
本文为翻译文章，原文来源：安全客
原文地址：[链接]
译文仅供参考，具体内容及含义以原文为准。

## 背景介绍
2016年9月13日，Adobe宣布关闭Flash中的本地文件系统沙箱功能。这项存在了二十年的功能被关闭后，几乎所有使用该功能的Flash文件都需要进行更新。本文将详细解释这一变化的重要性及其对Adobe的意义，并在开始之前简要说明什么是本地文件系统沙箱以及现代浏览器如何处理本地文件。

## 本地文件系统沙箱简介及其重要性
如果你熟悉ActionScript编程但不是开发人员，那么你可能听说过Adobe Flash的安全沙箱机制。简单来说，安全沙箱控制着SWF文件可以加载哪些外部资源。其中最著名的“远程安全沙箱”用于判断远程主机上的Flash文件可以加载哪些文件。而当通过`file:// URI`加载一个Flash文件时，SWF文件会被放入以下几种沙箱之一：本地文件系统沙箱、本地网络沙箱、本地信任沙箱或AIR应用程序沙箱。

### 本地网络沙箱
这是最常见的默认设置，它禁止Flash文件加载本地文件系统上的资源。这种做法确保了本地文件不会受到来自远程主机的安全威胁，防止恶意攻击者窃取用户的私人文件、密码或信用卡信息等。

### 本地文件系统沙箱
本地文件系统沙箱（编译ActionScript代码时可选）允许SWF访问本地文件系统上的每一个文件，但不能以任何方式连接到网络。值得注意的是，JavaScript在这种类似的沙箱环境中会“卡住”，因此无法启用此功能。出于安全考虑，Flash播放器默认将所有本地SWF文件置于本地文件系统沙箱中。这使得SWF可以通过此沙箱读取本地文件，但不能以任何方式连接到网络，从而确保用户信息不会被不当泄露。

## 安全模型的问题
理论上，这种安全模型是有效的。然而，在实际操作中却很难正确实现预期效果，这也是Adobe决定关闭沙箱的原因。正如前面所述，本地文件系统沙箱中的SWF无论在何种情况下都不能连接到网络。但在HTML文档中，SWF被各种不遵守这一原则的技术所包围，如JavaScript。这些漏洞的根本原因是无法确保与远程网络通信的技术无法读取Flash文件。总结如下：

- **Flash可以连接到本地文件系统**
- **JavaScript可以将数据发送到远程主机**

显然，攻击者和用户本地文件之间的唯一障碍是JavaScript无法读取Flash。尽管Flash试图阻止每个可能泄露信息给JavaScript的功能，但最终失败了。

## 漏洞实例分析
我们将讨论三个相互关联的不同事件，都是关于从本地文件系统中提取数据的。前两个利用网页浏览器RFC 3986向`navigateToURL()`传递恶意指令，并从本地文件中提取数据。最后一个设计初衷是在谷歌浏览器中运行，但被Clickjacking等老旧手段利用来泄露数据。

### A) `navigateToURL()` —— 通过URI编码绕过本地沙箱
即使SWF位于本地文件系统沙箱中，也可以使用`navigateToURL()`。如果尝试从远程网络获取文件，会弹出安全异常，但仍可以访问本地文件。考虑到JavaScript可以读取URL中的信息，`navigateToURL()`成为Flash与JavaScript交互的最佳选择。Adobe发现这一情况后采取了许多措施进行修复，但忽视了%编码问题。例如：

```actionscript
navigateToURL(new URLRequest("file:///tmp/attack-this-sandbox.html"));
```

还可以写成：

```actionscript
navigateToURL(new URLRequest("file:///tmp/%61ttack%2Dthis-sandbox.html"));
```

虽然这两个URI都是有效的，但它们不同。Mozilla Firefox和Safari中的JavaScript只需简单读取文档即可发现差异，从而绕过本地文件系统沙箱到达外部网络。下面是一个概念证明示例，展示如何利用此方法窃取信用卡号码。

### B) `navigateToURL()` —— 利用空格绕过本地沙箱
类似地，Windows系统的本地URI有一个鲜为人知的功能被`navigateToURL()`忽视。例如：

```actionscript
navigateToURL(new URLRequest("file:///C:/attack-this-sandbox.html"));
```

也可以写成：

```actionscript
navigateToURL(new URLRequest("file:///C:/attack-this-sandbox.html%20%20%20"));
```

在这种情况下，Flash可以与JavaScript交换数据，违反本地文件系统沙箱原则。尽管缓解警告对话框大大限制了这一问题的影响范围，但多次调用`navigateToURL()`仍可传输大量数据。

### C) Adobe Flash —— 针对`navigateToURL()`警告对话框的Clickjacking
自该问题出现以来，Adobe Flash一直是Clickjacking的主要目标。讽刺的是，同样的攻击手段还可以用来攻击Adobe在谷歌浏览器上的`navigateToURL()`。下面是利用B部分漏洞的一个PoC，展示了如何在谷歌浏览器中通过Clickjacking提取信用卡数据。

## Adobe Flash现在安全吗？
这个问题难以回答。虽然Flash永远无法完全修复这些问题，但可以通过编辑配置文件选择性地启用本地文件系统沙箱。这意味着，虽然这些漏洞代码仍然存在，但只有在启用特定设置时才会起作用，其他时候这些漏洞都处于“冻结”状态。未来的新版本可能会带来新的变化，但在实践中再次利用这些漏洞的可能性较小，至少目前如此。

## 披露时间线
- 2015年4月4日：将漏洞报告给Adobe PSIRT。
- 2015年4月6日：Adobe确认漏洞并分配标识号（PSIRT-3562）。
- 2015年4月17日：联系Adobe有关更新事宜，未得到回复。
- 2015年4月23日：再次尝试联系，仍未得到回复。
- 2015年4月29日：再次联系；Adobe表示仍在研究漏洞报告。
- 2015年6月20日：发送CVE的ID请求。
- 2015年6月23日：Adobe回复称由于警告对话框缓解，不会修复A、B两个漏洞，正在试图修复C漏洞。
- 2016年9月9日：Adobe PSIRT预警称将在下一次更新中更改安全沙箱政策。
- 2016年9月26日：公布漏洞。

### 注释
1. 在本篇文章中，我们将重点关注本地文件系统沙箱和本地网络沙箱。更多详情请参见adobe.com。
2. 前段时间，这里描述的漏洞由于警告对话框的出现得到了一定的缓解，最近一次Flash更新之后这个漏洞几乎无关痛痒。该警告对话框要求用户提供“连接到互联网”的授权，并由`navigateToURL()`调用触发。（这句话具有一定的误导性，因为在本地文件系统沙箱中用户并不能连接到远程主机）
3. Mozilla Firefox 和 Safari都证实了漏洞的存在。
4. 谷歌浏览器、Mozilla Firefox 和在Windows OS上运行的Opera都证实存在该漏洞。