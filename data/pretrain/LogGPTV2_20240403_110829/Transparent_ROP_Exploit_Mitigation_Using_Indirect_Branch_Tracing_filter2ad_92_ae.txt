### ROPGuard and Function-Specific Attributes

ROPGuard examines the presence of a proper return address at the top of the stack, the consistency of stack frames, and other function-specific attributes. Although ROPGuard is limited to non-JOP (Jump-Oriented Programming) code and some of its checks can result in false positives or be easily bypassed [58, 57], it is effective against current in-the-wild exploits. Some of these checks have been integrated into EMET (Enhanced Mitigation Experience Toolkit) [47].

### Instruction Tracing Facilities in Modern CPUs

Last Branch Recording (LBR) is one of several instruction tracing facilities available in modern CPUs. Another such facility is Branch Trace Storage (BTS), a debugging mechanism that records all branch instructions in a user-defined memory area. However, BTS incurs significant overhead due to the large number of memory accesses and the processor's slower operation in a special debug mode, leading to slowdowns typically in the range of 20-40× [67]. Consequently, systems using BTS and similar mechanisms for control flow integrity [72, 73] or execution recording [68] suffer from substantial runtime overhead.

In contrast, LBR uses on-chip registers to store traced branches with no additional overhead. A recent technique against kernel-level ROP leverages the processor’s performance counters to trigger an interrupt after a certain number of mispredicted instructions, which may indicate ROP code execution [71]. To rule out mispredictions caused by legitimate code, the LBR stack is checked upon an interrupt to see if the targets of previously executed instructions are preceded by a `call` instruction. However, JOP or call-preceded gadgets can circumvent this protection.

### Branch Regulation

Branch regulation [41] is a proposed extension to current processor architectures to protect against ROP attacks. This approach maintains a secondary call stack and restricts the allowed targets of indirect `jmp` and `call` instructions. Indirect `jmp` instructions are restricted to locations within the same function or to the entry point of any other function, while `call` instructions are restricted to the latter. This method is restrictive for many legitimate programs and requires protected binaries to undergo static binary instrumentation to annotate function boundaries, a process that demands precise code disassembly.

### Conclusion

Exploit mitigation add-ons that can be readily enabled to protect already installed applications are among the most practical ways to deploy additional layers of defense on existing systems. For practical usability, such solutions must be completely transparent and not impact the normal operation of protected applications.

Starting from this premise, we have presented the design and implementation of kBouncer, a transparent ROP exploit mitigation system. kBouncer identifies distinctive attributes of return-oriented or jump-oriented code that are inherently exhibited during execution. By leveraging the Last Branch Recording (LBR) feature of recent processors, kBouncer tracks the execution of indirect branches at critical points during the lifetime of a process, introducing negligible runtime overhead and requiring no modifications to the protected applications. The key advantage of this approach is its practical applicability. Our prototype implementation for Windows 7 effectively protects complex, widely used applications, including Internet Explorer, Adobe Flash Player, and Adobe Reader, against in-the-wild ROP exploits without any false positives.

### Future Work

As part of our future work, we plan to perform a more extensive evaluation with real applications to ensure the compatibility of the detection checks with existing code. We will also assess the feasibility of constructing ROP payloads that could evade the currently implemented checks and port our prototype implementation to Linux.

### Acknowledgements

This work was supported by DARPA, the US Air Force, and ONR through Contracts DARPA-FA8750-10-2-0253, AFRL-FA8650-10-C-7024, and N00014-12-1-0166, respectively, with additional support from Intel. Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect those of the US Government, DARPA, the Air Force, ONR, or Intel.

### References

[References listed as provided, with appropriate citations and URLs.]

### Appendix

In our current prototype implementation, kBouncer protects the following 52 Windows API functions:

[Function list as provided.]