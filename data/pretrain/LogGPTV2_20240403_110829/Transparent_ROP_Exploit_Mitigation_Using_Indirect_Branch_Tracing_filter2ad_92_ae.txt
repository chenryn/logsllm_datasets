whether a proper return address is present at the top
of the stack, the consistency of stack frames, and other
function-speciﬁc attributes. Although ROPGuard fo-
cuses only on non-JOP code, and some of its checks can
result in false positives or can be easily evaded [58, 57],
they are effective against current in-the-wild exploits,
and some have been integrated in EMET [47].
Last branch recording is only one of the available
instruction tracing facilities available in modern CPUs.
Branch Trace Storage (BTS) is a debugging mechanism
that enables the recording of all branch instructions in a
user-deﬁned memory area. However, the overhead due
to the signiﬁcant number of memory accesses, combined
with the overall slower operation of the processor due
to the special debug mode in which it enters when BTS
is enabled, result to slowdowns typically in the range of
20–40× [67]. Consequently, systems that use BTS and
similar mechanisms for control ﬂow integrity [72, 73] or
execution recording [68] suffer from signiﬁcant runtime
overheads.
In contrast, LBR uses on-chip registers to
store the traced branches with no additional overhead.
A recent technique against kernel-level ROP uses the
processor’s performance counters to raise an interrupt af-
ter a number of mispredicted
instructions, an indica-
tion of possible ROP code execution [71]. To rule out
mispredicitons caused by legitimate code, upon an inter-
rupt, the LBR stack is used to check whether the targets
of the previously executed
instructions are preceded
by a
instruction. The use of JOP or call-preceded
gadgets, however, can circumvent this protection.
Branch regulation [41] is a proposal for extending cur-
rent processor architectures with a protection mechanism
against ROP attacks. Besides maintaining a secondary
call stack, the technique restricts the allowed targets of
indirect
instructions to locations within the same
function, or to the entry point of any other function, and
only the latter for
instructions. Besides being quite
USENIX Association  
22nd USENIX Security Symposium  459
restrictive for many legitimate programs, this approach
requires protected binaries to go through a static binary
instrumentation phase for annotating function bound-
aries, a process that requires precise code disassembly.
8 Conclusion
Exploit mitigation add-ons that can be readily enabled
for the protection of already installed applications are
among the most practical ways for deploying additional
layers of defenses on existing systems. To be usable in
practice, any such solution should be completely trans-
parent and should not impact in any way the normal op-
eration of the protected applications.
Starting on this basis, we have presented the design
and implementation of kBouncer, a transparent ROP ex-
ploit mitigation based on the identiﬁcation of distinctive
attributes of return-oriented or jump-oriented code that
are inherently exhibited during execution. Built on top of
the Last Branch Recording (LBR) feature of recent pro-
cessors for tracking the execution of indirect branches at
critical points during the lifetime of a process, kBouncer
introduces negligible runtime overhead, and does not re-
quire any modiﬁcations to the protected applications. We
believe that the most important advantage of the pro-
posed approach is its practical applicability. We demon-
strate that our prototype implementation for Windows 7
can effectively protect complex, widely used applica-
tions, including Internet Explorer, Adobe Flash Player,
and Adobe Reader, against in-the-wild ROP exploits,
without any false positives.
As part of our future work, we plan to perform a more
extensive evaluation with real applications to ensure the
compatibility of the detection checks with existing code,
assess the feasibility of constructing ROP payloads that
could evade the currently implemented checks, and port
our prototype implementation to Linux.
Acknowledgements
This work was supported by DARPA, the US Air Force, and
ONR through Contracts DARPA-FA8750-10-2-0253, AFRL-
FA8650-10-C-7024 and N00014-12-1-0166, respectively, with
additional support from Intel. Any opinions, ﬁndings, conclu-
sions, or recommendations expressed herein are those of the
authors, and do not necessarily reﬂect those of the US Govern-
ment, DARPA, the Air Force, ONR, or Intel.
References
[1] Adobe CoolType SING Table “uniqueName” Stack Buffer Over-
ﬂow.
.
[2] Adobe Flash Player 11.3 Kern Table Parsing Integer Over-
ﬂow.
.
[3] Common Shellcode Naming Initiative.
.
[4] Intercepting System Calls on x86_64 Windows.
.
[5] Metasploit framework.
[6] Mplayer (r33064 lite) buffer overﬂow + rop exploit.
.
.
[7] MS12-063 Microsoft
Internet Explorer execCommand Use-
After-Free Vulnerability.
.
[8] MS13-008 Microsoft Internet Explorer CButton Use-After-Free
Vulnerability.
[9] /ORDER (put functions in order).
.
[10] Proﬁle-guided optimizations.
.
.
[11] Syzygy - proﬁle guided,
post-link
executable
reorder-
ing.
.
[12] White
Phosphorus
Exploit
Pack.
.
[13] Windows api
list.
[14] Windows X86 System Call Table.
.
.
[15] Wine.
[16] MWR Labs Pwn2Own 2013 Write-up - Webkit Exploit,
.
2013.
.
[17] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti.
Control-ﬂow integrity. In Proceedings of the 12th ACM confer-
ence on Computer and Communications Security (CCS), 2005.
[18] Piotr Bania. Windows Syscall Shellcode, 2005.
.
[19] James Bennett, Yichong Lin, and Thouﬁque Haq. The Number
of the Beast, 2013.
.
[20] Eep Bhatkar, Daniel C. Duvarney, and R. Sekar. Address obfus-
cation: an efﬁcient approach to combat a broad range of memory
error exploits.
In In Proceedings of the 12th USENIX Security
Symposium, 2003.
[21] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney. Efﬁcient
techniques for comprehensive protection from memory error ex-
ploits. In Proceedings of the 14th USENIX Security Symposium,
August 2005.
[22] Tyler Bletsch, Xuxian Jiang, and Vince Freeh. Mitigating code-
reuse attacks with control-ﬂow locking.
In Proceedings of the
27th Annual Computer Security Applications Conference (AC-
SAC), 2011.
[23] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko,
Ahmad-Reza Sadeghi, Hovav Shacham, and Marcel Winandy.
Return-oriented programming without returns.
In Proceedings
of the 17th ACM conference on Computer and Communications
Security (CCS), 2010.
[24] Ping Chen, Hai Xiao, Xiaobin Shen, Xinchun Yin, Bing Mao,
and Li Xie. DROP: Detecting return-oriented programming ma-
licious code. In Proceedings of the 5th International Conference
on Information Systems Security (ICISS), 2009.
460  22nd USENIX Security Symposium 
USENIX Association
[25] Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Rav-
ishankar K. Iyer. Non-control-data attacks are realistic threats.
In Proceedings of the 14th USENIX Security Symposium, August
2005.
[26] Frederick B. Cohen. Operating system protection through pro-
gram evolution. Computers and Security, 12:565–584, October
1993.
[27] Corelan Team. Mona.
.
[28] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. Dy-
towards defense
namic integrity measurement and attestation:
against return-oriented programming attacks. In Proceedings of
the 2009 ACM workshop on Scalable Trusted Computing (STC),
2009.
[29] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy.
ROPdefender: A practical protection tool to protect against
return-oriented programming.
In Proceedings of the 6th Sym-
posium on Information, Computer and Communications Security
(ASIACCS), 2011.
[30] Solar Designer. Getting around non-executable stack (and ﬁx).
.
[31] Úlfar Erlingsson. Low-level software security: Attack and de-
fenses. Technical Report MSR-TR-07-153, Microsoft Research,
2007.
.
[32] Scott Field.
An introduction to kernel patch protec-
tion.
.
[33] S. Forrest, A. Somayaji, and D. Ackley. Building diverse com-
puter systems. In Proceedings of the 6th Workshop on Hot Topics
in Operating Systems (HotOS-VI), 1997.
[34] Ivan Fratric. Runtime prevention of return-oriented programming
attacks, 2012.
.
[35] Giampaolo Fresi Roglia, Lorenzo Martignoni, Roberto Paleari,
and Danilo Bruschi. Surgically returning to randomized lib(c). In
Proceedings of the 25th Annual Computer Security Applications
Conference (ACSAC), 2009.
[36] Jason Hiser, Anh Nguyen-Tuong, Michele Co, Matthew Hall, and
Jack W. Davidson. ILR: Where’d my gadgets go? In Proceedings
of the 33rd IEEE Symposium on Security & Privacy (S&P), 2012.
[37] Ralf Hund, Carsten Willems, and Thorsten Holz. Practical timing
side channel attacks against kernel space ASLR. In Proceedings
of the 34th IEEE Symposium on Security & Privacy (S&P), 2013.
[38] Galen Hunt and Doug Brubacher. Detours: Binary Interception
of Win32 Functions. In Proceedings of the 3rd USENIX Windows
NT Symposium, 1999.
[39] Intel. Intel 64 and IA-32 architectures software developer’s man-
ual, volume 3B: System programming guide, part 2.
.
[43] Sebastian Krahmer. x86-64 buffer overﬂow exploits and the bor-
rowed code chunks exploitation technique.
.
[44] Haifei Li. Understanding and exploiting Flash ActionScript vul-
nerabilities. CanSecWest, 2011.
[45] Jinku Li, Zhi Wang, Xuxian Jiang, Michael Grace, and Sina
Bahram. Defeating return-oriented rootkits with “return-less”
kernels. In Proceedings of the 5th European conference on Com-
puter Systems (EuroSys), 2010.
[46] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Ar-
tur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi,
and Kim Hazelwood. Pin: building customized program anal-
ysis tools with dynamic instrumentation.
In Proceedings of the
2005 ACM SIGPLAN conference on Programming language de-
sign and implementation, 2005.
[47] Microsoft.
The Enhanced Mitigation Experience Toolkit.
[48] Microsoft. Windows ﬁltering platform.
.
.
[49] Matt Miller, Tim Burrell, and Michael Howard. Mitigating soft-
ware vulnerabilities, July 2011.
.
[50] Nergal. The advanced return-into-lib(c) exploits: PaX case study.
Phrack, 11(58), December 2001.
[51] Tim Newsham. Non-exec stack, 2000.
.
[52] Kaan Onarlioglu, Leyla Bilge, Andrea Lanzi, Davide Balzarotti,
and Engin Kirda. G-Free: defeating return-oriented programming
through gadget-less binaries. In Proceedings of the 26th Annual
Computer Security Applications Conference (ACSAC), 2010.
[53] Vasilis Pappas, Michalis Polychronakis,
and Angelos D.
Keromytis. Smashing the gadgets: Hindering return-oriented pro-
gramming using in-place code randomization. In Proceedings of
the 33rd IEEE Symposium on Security & Privacy (S&P), 2012.
[54] Parvez. Bypassing Microsoft Windows ASLR with a little help by
MS-Help, August 2012.
.
[55] PaX Team. Address space layout randomization.
.
[56] Michalis Polychronakis, Kostas G. Anagnostakis, and Evange-
los P. Markatos. An empirical study of real-world polymor-
phic code injection attacks. In Proceedings of the 2nd USENIX
Workshop on Large-scale Exploits and Emergent Threats (LEET),
April 2009.
[57] Aaron Portnoy. Bypassing all of the things. SummerCon, 2013.
[58] Dan Rosenberg.
Defeating Windows 8 ROP Mitiga-
tion, 2011.
.
[59] Mark Russinovich. Inside native applications, November 2006.
[40] Richard Johnson. A castle made of sand: Adobe Reader X sand-
.
box. CanSecWest, 2011.
[41] M. Kayaalp, M. Ozsoy, N. Abu-Ghazaleh, and D. Ponomarev.
Branch regulation: Low-overhead protection from code reuse at-
tacks. In Proceedings of the 39th Annual International Sympo-
sium on Computer Architecture (ISCA), pages 94 –105, 2012.
[42] Chongkyung Kil, Jinsuk Jun, Christopher Bookholt, Jun Xu, and
Peng Ning. Address space layout permutation (ASLP): Towards
ﬁne-grained randomization of commodity software. In Proceed-
ings of the 22nd Annual Computer Security Applications Confer-
ence (ACSAC), 2006.
[60] Edward J. Schwartz, Thanassis Avgerinos, and David Brumley.
In Proceedings of the 20th
Q: Exploit hardening made easy.
USENIX Security Symposium, 2011.
[61] Fermin J. Serna. CVE-2012-0769, the case of the perfect info
leak, February 2012.
.
[62] Hovav Shacham. The geometry of innocent ﬂesh on the bone:
return-into-libc without function calls (on the x86). In Proceed-
ings of the 14th ACM conference on Computer and Communica-
tions Security (CCS), 2007.
USENIX Association  
22nd USENIX Security Symposium  461
[63] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin Goh, Nagen-
dra Modadugu, and Dan Boneh. On the effectiveness of address-
space randomization. In Proceedings of the 11th ACM conference
on Computer and Communications Security (CCS), 2004.
[64] Alex Skaletsky, Tevi Devor, Nadav Chachmon, Robert Cohn,
Kim Hazelwood, Vladimir Vladimirov, and Moshe Bach. Dy-
namic program analysis of microsoft windows applications.
In
International Symposium on Performance Analysis of Software
and Systems, 2010.
[65] Skape. Understanding windows shellcode, 2003.
.
[66] Kevin Z. Snow, Lucas Davi, Alexandra Dmitrienko, Christopher
Liebchen, Fabian Monrose, and Ahmad-Reza Sadeghi. Just-in-
time code reuse: On the effectiveness of ﬁne-grained address
space layout randomization.
In Proceedings of the 34th IEEE
Symposium on Security & Privacy (S&P), 2013.
[67] Mary Lou Soffa, Kristen R. Walcott, and Jason Mars. Exploit-
ing hardware advances for software testing and debugging (nier
track). In Proceedings of the 33rd International Conference on
Software Engineering (ICSE), 2011.
[68] A. Vasudevan, Ning Qu, and A. Perrig. Xtrec: Secure real-time
execution trace recording on commodity platforms. In Proceed-
ings of the 44th Hawaii International Conference on System Sci-
ences (HICSS), 2011.
[69] Peter Vreugdenhil. Pwn2Own 2010 Windows 7 Internet Explorer
8 exploit.
.
[70] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and
Zhiqiang Lin. Binary stirring: Self-randomizing instruction ad-
dresses of legacy x86 binary code.
In Proceedings of the 19th
ACM Conference on Computer and Communications Security
(CCS), pages 157–168, October 2012.
[71] Georg Wicherski. Taming ROP on Sandy Bridge. SyScan, 2013.
[72] Yubin Xia, Yutao Liu, Haibo Chen, and Binyu Zang. CFIMon:
Detecting violation of control ﬂow integrity using performance
counters. In Proceedings of the 42nd Annual IEEE/IFIP Interna-
tional Conference on Dependable Systems and Networks (DSN),
2012.
[73] Liwei Yuan, Weichao Xing, Haibo Chen, and Binyu Zang. Se-
curity breaches as PMU deviation: detecting and identifying se-
curity attacks using performance counters. In Proceedings of the
Second Asia-Paciﬁc Workshop on Systems (APSys), 2011.
[74] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, László Szek-
eres, Stephen McCamant, Dawn Song, and Wei Zou. Practical
control ﬂow integrity & randomization for binary executables. In
Proceedings of the 34th IEEE Symposium on Security & Privacy
(S&P), 2013.
[75] Dino A. Dai Zovi.
Practical return-oriented programming.
SOURCE Boston, 2010.
Appendix
In our current prototype implementation, kBouncer protects the
following 52 Windows API functions:
462  22nd USENIX Security Symposium 
USENIX Association