### Compliance of Ad Components in Kids' Apps

#### 1. Introduction
Our primary objective is to evaluate whether in-app advertisements or the landing pages they direct to include forms that collect personal information. While merely displaying such forms is not a violation, children may be enticed to enter their personal details, particularly if the ads or landing pages offer free prizes or sweepstakes. If these forms collect personal information without explicit parental consent, it could constitute a violation under the Children's Online Privacy Protection Act (COPPA). Given the complexity of translating legal requirements into technical specifications, we will report potential concerns in this section.

Our secondary goal is to assess the appropriateness of the content displayed in in-app ads and landing pages for children. Since this evaluation is inherently subjective, we will provide a breakdown of content categories as labeled by human testers.

#### 2. Testing Procedure

The testing process involves two main steps:

1. **Data Collection:**
   - For each app, we first collect the ads displayed within the app and the landing pages linked from these ads.
   - We use Brahmastra to automatically drive apps to display ads, focusing on two popular ad libraries: AdMob and Millennial Media, which are used in over 40% of free Android apps with ads [11].

2. **Analysis:**
   - For each ad and landing page, we determine:
     - Whether they present forms to collect personal information (e.g., first and last name, home address, online contact) as defined by COPPA.
     - Whether the content is inappropriate for children and, if so, the reasons for this determination.

**Driving Apps to Display Ads:**
- We use Brahmastra to automatically drive apps to display ads. The target methods for AdMob and Millennial Media are:
  - `Lcom/google/ads/AdView;`
  - `Lcom/millennialmedia/android/MMAdView;`

**Collecting Ads and Landing Pages:**
- We redirect all network traffic from the test apps through a Fiddler proxy [8] and install the Fiddler SSL certificate on the phone emulator to examine SSL traffic.
- We identify and collect requests made by the ad libraries to their server components using domain names.
- We replay these traces multiple times over several days to fetch ad data from the ad servers, which typically includes JSON or XML objects containing details about the ad type, content, and redirect URLs.

**Analyzing Ads and Landing Pages:**
- We use two methods to characterize ads and landing pages:
  - **Web of Trust (WoT) Database:** We probe the WoT database [9] to get the "child safety" score for each landing page URL.
  - **Crowdsourcing:** We use Amazon Mechanical Turk [3] to label each ad and landing page, collecting detailed information such as the type of personal information collected. To ensure consistency, we use majority voting to filter out noise.

#### 3. Results

**Dataset:**
- We collected our dataset in January 2014, using a list of apps categorized as "Kids" in Amazon’s Android app store. We crawled the Google Play store for apps with the same package names.
- Starting with over 4,000 apps in the Kids category, we found 699 free apps with matching package names in the Play store. Among these, 242 apps contained AdMob or Millennial Media ad libraries.
- Using Brahmastra, we successfully retrieved at least one ad request for 220 of these apps.

**Findings:**
- We collected 566 unique ads and 3,633 unique landing pages over 5 days.
- Using WoT, we determined that 183 out of the 3,633 unique landing pages had child-safety scores below 60, falling into the "Unsatisfactory," "Poor," or "Very Poor" categories. 189 out of the 220 apps (86%) pointed to at least one of these pages during the monitoring period.
- We used Amazon Mechanical Turk to characterize all 566 ads and 2,111 randomly selected landing pages. We asked turkers to check for personal information collection and inappropriate content. We offered 7 cents (US) per task and collected three responses per data point, counting only those consistent across at least two out of three respondents.

**Table 2: Personal Information Collected by Landing Pages**

| Info Type          | Home Address | First and Last Name | Online Contact | Phone Number | Total |
|--------------------|--------------|---------------------|----------------|--------------|-------|
| Landing Pages      | 47           | 231                 | 100            | 17           | 235   |
| Apps               | 58           | 174                 | 94             | 15           | 175   |

**Table 3: Breakdown of Child-Inappropriate Content in Ads**

| Content Type                               | Image Ads | Apps |
|--------------------------------------------|-----------|------|
| Child exploitation                         | 2         | 8    |
| Gambling, contests, lotteries, or sweepstakes | 3         | 7    |
| Misleading users about product advertised  | 4         | 3    |
| Violence, weapons, or gore                 | 3         | 0    |
| Alcohol, tobacco, or drugs                 | 12        | 62   |
| Profanity and vulgarity                    | 16        | 5    |
| Free prize                                 | 58        | 29   |
| Sexual or sexually suggestive content      | 80        | 80   |
| Total                                      | 164       | 184  |

#### 4. Analysis of Social Media Add-ons

**Testing Goal:**
- We tested apps against a recently discovered vulnerability associated with the Facebook SDK [30]. Our testing with Brahmastra showed that 13 out of 200 Android apps are vulnerable to this attack. Fixing it requires app developers to update the authentication logic in their servers as recommended by [30].

**Vulnerability Exploitation:**
- The Facebook access token vulnerability can be exploited by attackers to steal sensitive information stored in vulnerable apps. For example, a malicious news app can trick the user into posting a story on their Facebook wall, then use the obtained access token to access sensitive information from any vulnerable apps associated with the user’s Facebook account.

**Testing Procedure:**
1. **Drive Apps to Display Facebook Login:**
   - We use Brahmastra to automatically drive apps to invoke the Facebook SDK’s authentication methods.
2. **Supply Valid Facebook Credentials:**
   - Once the login screen appears, we supply valid Facebook credentials.
3. **Determine Misuse of Access Token:**
   - We monitor network traffic and application behavior after providing a fraudulent access token to determine if the app misuses the access token for client authentication.

**Manipulating Traffic with MITM Proxy:**
- We direct all network traffic through a Fiddler proxy and install a Fiddler SSL certificate on the phone emulator to decrypt SSL traffic.
- We record an access token from a successful login session and use a script to overwrite incoming access tokens with the recorded one.

**Experiments:**
- We randomly selected 200 apps from the dataset used in §6.
- 18 out of 200 apps use a Facebook access token for authentication, and 13 of these apps (72%) are vulnerable to a fraudulent access token.
- The remaining 182 apps use the Facebook SDK only to post content to the user’s wall, not for authentication.

**Impact:**
- Each of the 13 vulnerable apps has been downloaded more than 10,000 times, with the median number of downloads over 500,000 and the most popular ones exceeding 10 million downloads.
- These 13 apps were built by 12 distinct publishers, indicating that the problem is not limited to a few inexperienced developers.
- We shared the list of vulnerable apps with the Facebook security team, who contacted the affected developers with instructions to fix the issue.
- The privacy implications are significant, as users of these apps may share friends lists, pictures, messages, exercise logs, homework info, and preferences, all of which could be exfiltrated by a malicious app.

#### 5. Related Work

**Automated Android App Testing:**
- Several recent efforts have proposed improvements over Android Monkey. For example, AndroidRipper [13] uses GUI ripping to create a model of the application and explores its state space, but still shows less than 40% code coverage after 4.5 hours of testing. AppsPlayground [26] employs heuristics to guess input forms and track widgets, but also faces limitations in achieving comprehensive coverage.