9955336633cc0011..iinndddd 1199 11//2255//0099 44::3399::2288 PPMM
20 Part I ■ Mac OS X Basics
The systemwide launchd configuration files are stored in the /System/
Library/LaunchAgents and /System/Library/LaunchDaemons directories.
User-specifi c fi les are in ~/Library/LaunchAgents. The difference between
daemons and agents is that daemons run as root and are intended to run in
the background. Agents are run with the privileges of a user and may run in
the foreground; they can even include a graphical user interface. Launchctl is
a command-line application used to load and unload the daemons.
The confi guration fi les for launchd are, not surprisingly, plists. We’ll show
you how one works. Consider the fi le com.apple.PreferenceSyncAgent.plist.
Label
com.apple.PreferenceSyncAgent
ProgramArguments
/System/Library/CoreServices/
PreferenceSyncClient.app/Contents/MacOS/PreferenceSyncClient
--sync
--periodic
StartInterval
3599
This plist uses three keys. The Label key identifies the job to launchd.
ProgramArguments is an array consisting of the application to run as well as
any necessary command-line arguments. Finally, StartInterval indicates that
this process should be run every 3,599 seconds, or just more than once an hour.
Other keys that might be of interest include
■ UserName: Indicates the user to run the job as
■ O nDemand: Indicates whether to run the job when asked or keep it
running all the time
■ S tartCalendarInterval: Provides cron-like launching of applications at
various times
Why should you care about this? Well, there are a few times it might be handy.
One is when breaking out of a sandbox, which we’ll discuss later in this chapter.
Another is in when providing automated processing needed in fuzzing, which
we’ll discuss more in Chapter 4’s section “In-Memory Fuzzing.” For example,
consider the following plist fi le.
9955336633cc0011..iinndddd 2200 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 21
Label
com.apple.KeepSafariAlive
ProgramArguments
/Applications/Safari.app/Contents/MacOS/Safari 
OnDemand
Save this to a fi le called ~/Library/LaunchAgents/com.apple.KeepSafariAlive.
plist. Then start it up with
$ launchctl load Library/LaunchAgents/com.apple.KeepSafariAlive.plist
This should start up Safari. Imagine a situation in which fuzzing is occur-
ring while you’re using a Meta refresh tag from Safari’s default home page.
The problem is that when Safari inevitably crashes, the fuzzing will stop. The
solution is the preceeding launchd fi le, which restarts it automatically. Give it
a try, and pretend the fuzzing killed Safari.
$ killall -9 Safari
The launchd agent should respawn Safari automatically. To turn off this
launchd job, issue the following command:
$ launchctl unload Library/LaunchAgents/com.apple.KeepSafariAlive.plist
Leopard Security
Since we’re talking about Mac OS X in general, we should talk about security
features added to Leopard. This section covers some topics of interest from this
fi eld. Some of these address new features of Leopard while others are merely
updates to topics relevant to the security of the system.
9955336633cc0011..iinndddd 2211 11//2255//0099 44::3399::2288 PPMM
22 Part I ■ Mac OS X Basics
Library Randomization
There are two steps to attacking an application. The fi rst is to fi nd a vulner-
ability. The second is to exploit it in a reliable manner. There seems to be no end
to vulnerabilities in code. It is very diffi cult to eliminate all the bugs from an
old code base, considering that a vulnerability may present itself as a missing
character in one line out of millions of lines of source code. Therefore, many
vendors have concluded that vulnerabilities are inevitable, but they can at least
make exploitation diffi cult if not impossible to accomplish.
Beginning with Leopard, one anti-exploitation method Mac OS X employs
is library randomization. Leopard randomizes the addresses of most librar-
ies within a process address space. This makes it harder for an attacker to get
control, as they can not rely on these addresses being the same. Nevertheless,
Leopard still does not randomize many elements of the address space. Therefore
we prefer not to use the term address space layout randomization (ASLR) when
referring to Leopard. In true ASLR, the locations of the executable, libraries,
heap, and stack are all randomized. As you’ll see shortly, in Leopard only the
location of (most of) the libraries is randomized. Unfortunately for Apple, just
as one bug is enough to open a system to attacks, leaving anything not random-
ized is often enough to allow a successful attack, and this will be demonstrated
in Chapters 7, 8, and 10. By way of comparison, Windows is often criticized for
not forcing third-party applications (such as Java) to build their libraries to be
compatible with ASLR. In Leopard, library randomization is not possible even
in the Apple binaries!
Leopard’s library randomization is not well documented, but critical informa-
tion on the topic can be found in the /var/db/dyld directory. For example, the
map of where different libraries should be loaded is in the dyld_shared_cache_
i386.map fi le in this directory. An example of this fi le’s contents is provided
in the code that follows. Obviously, the contents of this fi le will be different
on different systems; however, the contents do not change upon reboot. This
fi le may change when the system is updated. The fi le is updated when the
update_dyld_shared_cache program is run. Since the location in which the
libraries are loaded is fi xed for extended periods of time for a given system
across all processes, the library randomization implemented by Leopard does
not help prevent local-privilege escalation attacks.
/usr/lib/system/libmathCommon.A.dylib
__TEXT 0x945B3000 -> 0x945B8000
__DATA 0xA0679000 -> 0xA067A000
__LINKEDIT 0x9735F000 -> 0x9773D000
/System/Library/Frameworks/Quartz.framework/Versions/
A/Frameworks/ImageKit.framework/Versions/A/ImageKit
__TEXT 0x945B8000 -> 0x946F0000
__DATA 0xA067A000 -> 0xA0682000
9955336633cc0011..iinndddd 2222 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 23
__OBJC 0xA0682000 -> 0xA06A6000
__IMPORT 0xA0A59000 -> 0xA0A5A000
__LINKEDIT 0x9735F000 -> 0x9773D000
This excerpt from the dyld_shared_cache_i386.map fi le shows where two
libraries, libmathCommon and ImageKit, will be loaded in memory on this
system.
To get a better idea of how Leopard’s randomization works (or doesn’t), con-
sider the following simple C program.
#include 
#include 
void foo(){
;
}
int main(int argc, char *argv[]){
int y;
char *x = (char *) malloc(128);
printf(“Lib function: %08x, Heap: %08x, Stack: %08x, Binary:
%08x\n”, &malloc, x, &y, &foo);
}
This program prints out the address of the malloc() routine located within
libSystem. It then prints out the address of a malloced heap buffer, of a stack
buffer, and, fi nally, of a function from the application image. Running this pro-
gram on one computer (even after reboots) always reveals the same numbers;
however, running this program on different machines shows some differences
in the output. The following is the output from this program run on fi ve dif-
ferent Leopard computers.
Lib function: 920d7795, Heap: 00100120, Stack: bffff768, Binary:
00001f66
Lib function: 9120b795, Heap: 00100120, Stack: bffffab8, Binary:
00001f66
Lib function: 93809795, Heap: 00100120, Stack: bffff9a8, Binary:
00001f66
Lib function: 93d9e795, Heap: 00100120, Stack: bffff8d8, Binary:
00001f66
Lib function: 96841795, Heap: 00100120, Stack: bffffa38, Binary:
00001f66
This demonstrates that the addresses to which libraries are loaded are indeed
randomized from machine to machine. However, the heap and the applica-
tion image clearly are not, in this case at least. The small amount of variation
in the location of the stack buffer can be attributed to the stack containing
9955336633cc0011..iinndddd 2233 11//2255//0099 44::3399::2288 PPMM
24 Part I ■ Mac OS X Basics
the environment for the program, which will differ depending on the user’s
confi guration. The stack location is not randomized. So while some basic ran-
domization occurs, there are still signifi cant portions of the memory that are
not random, and, in fact, are completely predictable. We’ll show in Chapters 7
and 8 how to defeat this limited randomization.
Executable Heap
Another approach to making exploitation more diffi cult is to make it hard to
execute injected code within a process—i.e., hard to execute shellcode. To do
this, it is important to make as much of the process space nonexecutable as
possible. Obviously, some of the space must be executable to run programs, but
making the stack and heap nonexecutable can go a long way toward making
exploitation diffi cult. This is the idea behind Data Execution Prevention (DEP)
in Windows and W^X in OpenBSD.
Before we dive into an explanation of memory protection in Leopard, we need
fi rst to discuss hardware protections. For x86 processors, Apple uses chips from
Intel. Intel uses the XD bit, or Execute Disable bit, stored in the page tables to
mark areas of memory as nonexecutable. (In AMD processors, this is called the
NX bit for No Execute.) Any section of memory with the XD bit set can be used
only for reading or writing data; any attempt to execute code from this memory
will cause a program crash. In Mac OS X, the XD bit is set on all stack memory,
thus preventing execution from the stack. Consider the following program that
attempts to execute where the XD bit is set.
#include 
#include 
#include 
char shellcode[] = “\xeb\xfe”;
int main(int argc, char *argv[]){
void (*f)();
char x[4];
memcpy(x, shellcode, sizeof(shellcode));
f = (void (*)()) x;
f();
}
Running this program shows that it crashes when it attemps to exeucte on
the stack
$ ./stack_executable
Segmentation fault
9955336633cc0011..iinndddd 2244 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 25
This same program will execute on a Mac running on a PPC chip (although
the shellcode will be wrong, of course), since the stack is executable in that
architecture.
The stack is in good shape, but what about the heap? A quick look with the
vmmap utility shows that the heap is read/write only.
==== Writable regions for process 12137
__DATA 00002000-00003000 [ 4K] rw-/rwx SM=COW foo
__IMPORT 00003000-00004000 [ 4K] rwx/rwx SM=COW foo
MALLOC (freed?) 00006000-00007000 [ 4K] rw-/rwx SM=PRV
MALLOC_TINY 00100000-00200000 [ 1024K] rw-/rwx SM=PRV
DefaultMallocZone_0x100000
__DATA 8fe2e000-8fe30000 [ 8K] rw-/rwx SM=COW
/usr/lib/dyld
__DATA 8fe30000-8fe67000 [ 220K] rw-/rwx SM=PRV
/usr/lib/dyld
__DATA a052e000-a052f000 [ 4K] rw-/rw- SM=COW
/usr/lib/system/libmathCommon.A.dylib
__DATA a0550000-a0551000 [ 4K] rw-/rw- SM=COW
/usr/lib/libgcc_s.1.dylib
shared pmap a0600000-a07e5000 [ 1940K] rw-/rwx SM=COW
__DATA a07e5000-a083f000 [ 360K] rw-/rwx SM=COW
/usr/lib/libSystem.B.dylib
shared pmap a083f000-a09ac000 [ 1460K] rw-/rwx SM=COW
Stack bf800000-bffff000 [ 8188K] rw-/rwx SM=ZER
Stack bffff000-c0000000 [ 4K] rw-/rwx SM=COW thread
0
Leopard does not set the XD bit on any parts of memory besides the stack. It
is unclear if this is a bug, an oversight, or intentional, but even if the software’s
memory permissions are set to be nonexecutable, you can still execute anywhere
except the stack. The following simple program illustrates that point.
#include 
#include 
#include 
char shellcode[] = “\xeb\xfe”;
int main(int argc, char *argv[]){
void (*f)();
char *x = malloc(2);
memcpy(x, shellcode, sizeof(shellcode));
f = (void (*)()) x;
f();
}
9955336633cc0011..iinndddd 2255 11//2255//0099 44::3399::2288 PPMM
26 Part I ■ Mac OS X Basics
This program copies some shellcode (in this case a simple infi nite loop) onto
the heap and then executes it. It runs fi ne, and with a debugger you can verify
that it is indeed executing within the heap buffer. Taking this one step further, we
can explicitly set the heap buffer to be nonexecutable and still execute there.
#include 
#include 
#include 
#include 
char shellcode[] = “\xeb\xfe”;
int main(int argc, char *argv[]){
void (*f)();
char *x = malloc(2);
unsigned int page_start = ((unsigned int) x) & 0xfffff000;
int ret = mprotect((void *) page_start, 4096, PROT_READ | PROT_
WRITE);
if(ret
#include 
#include 
#include 
char shellcode[] = “\xeb\xfe”;
int main(int argc, char *argv[]){
void (*f)();
char x[4];
memcpy(x, shellcode, sizeof(shellcode));
f = (void (*)()) x;
mprotect((void *) 0xbffff000, 4092, PROT_READ | PROT_WRITE |
PROT_EXEC);
f();
}
This might be a possible avenue of attack in a return-to-libc attack. So, to
summarize, within Leopard it is possible to execute code anywhere in a process
besides the stack. Furthermore, it is possible to execute code on the stack after
a call to mprotect.
9955336633cc0011..iinndddd 2266 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 27
Stack Protection (propolice)
Although you would think stack overfl ows are a relic of the past, they do still
arise, as you’ll see in Chapter 7, “Exploring Stack Overfl ows.” An operating sys-
tem’s designers need to worry about making stack overfl ows diffi cult to exploit;
otherwise, the exploitation of overfl ows is entirely trivial and reliable. With
this in mind, the GCC compiler that comes with Leopard has an option called
-fstack-protector that sets a value on the stack, called a canary. This value is
randomly set and placed between the stack variables and the stack metadata.
Then, before a function returns, the canary value is checked to ensure it hasn’t
changed. In this way, if a stack buffer overfl ow were to occur, the important
metadata stored on the stack, such as the return address and saved stack pointer,
could not be corrupted without fi rst corrupting the canary. This helps protect
against simple stack-based overfl ows. Consider the following program.
int main(int argc, char *argv[]){
char buf[16];
strcpy(buf, argv[1]);