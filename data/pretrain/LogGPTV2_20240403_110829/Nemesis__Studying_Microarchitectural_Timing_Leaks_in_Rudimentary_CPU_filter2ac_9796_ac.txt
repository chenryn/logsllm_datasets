4.1 Implementation on Sancus Platforms
Our Sancus case study attacks exploit timing differences as subtle
as a single CPU cycle. In order to do so, the timer interrupt has
to arrive at exactly the right time, within the first clock cycle of
the enclaved instruction of interest. There is no room for deviation
here, as a shift of a single cycle may miss the instruction we are
aiming for and corrupt the latency timing difference.
Conveniently, the standard TI MSP430 architecture [69] comes
with a Timer_A peripheral capable of generating cycle-accurate
interrupts. The timer features an internal Timer_A Register (TAR)
that is incremented every clock cycle, and can be configured to
generate an IRQ upon reaching a certain value. After generation
of the interrupt request, Timer_A immediately restarts counting
from zero. Hence, interrupt latency on MSP430 microcontrollers
Figure 4: Zigzagger branch obfuscation example (from [42]).
3.2.1 Zigzagger Branch Obfuscation. Recent research on branch
shadowing attacks [42] showed that enclaved control flow can be in-
ferred by probing the CPU-internal Branch Target Buffer (BTB) after
interrupting a victim enclave. Given the prevalence of conditional
control flow in existing non-cryptographic applications, this work
also includes a practical compile-time hardening scheme called
Zigzagger. Figure 4 shows how secret-dependent program branches
are translated into an oblivious cmov instruction, followed by a
tight trampoline sequence of unconditional jumps that ends with a
single indirect branch instruction. The key idea behind Zigzagger
is to prohibit probing the BTB for the current branch instruction by
rapidly jumping back and forth between the instrumented code and
the trampoline such that recognizing the current instruction pointer
becomes difficult. It has since been shown, however, that Zigzagger-
instrumented code can be reliably interrupted one instruction at a
time [74], and concurrent research defeated Zigzagger in restricted
circumstances through a segmentation-based side-channel [30].
We will show that even the contained conditional control flow
in Zigzagger-hardened code exhibits definite instruction timing
differences that can be recognized to extract application secrets
from IRQ latency traces. Particularly, to emphasize Nemesis’s in-
creased precision over state-of-the-art SGX attacks, we aligned the
assembly code of Fig. 4 to fit entirely within one cache line, such
that execution paths cannot be distinguished by their correspond-
ing code cache or page access profiles [64]. Our Zigzagger attack
scenario thus illustrates that Nemesis-type interrupt latency attacks
leak microarchitectural timing information at the granularity of
individual instructions, whereas previous controlled-channels only
expose enclaved memory accesses at a relatively coarse-grained
4 KiB page [75, 79] or 64-byte cache line [31, 62] granularity.
3.2.2 Binary Search. Intel SGX technology has been explicitly put
forward for securely offloading privacy-sensitive data analytics to
an untrusted cloud environment [61]. Our second SGX application
scenario considers enclaves that look up secret values in a known
dataset, as it occurs for instance in privacy-friendly contact dis-
covery [57] or DNA sequence processing [8, 76]. In case of the
former, the enclave is provided with a known large list of users,
plus an encrypted smaller list of secret contacts, and is requested to
return only those contacts that occur in the known user list. In case
of the latter, the enclave may lookup values in a public reference
human genome dataset, based on an encrypted secret input tied
to an individual. In both scenarios, adversaries may track control
can be measured trivially by reading TAR as the first instruction
in the ISR. The key to a successful exploit thus comes down to
determining the amount of clock cycles between configuring the
timer, and execution of the instruction of interest in the protected
module. Again, this is relatively straightforward on an MSP430
microcontroller where – in the absence of pipelining and caching
– execution timing is completely deterministic. More specifically,
instruction execution takes between one and six clock cycles, de-
pending on the addressing modes of the source and destination
operands. An MSP430 CPU [69] features seven different addressing
modes, yielding a large variation in possible execution cycles. We
refer to Appendix A for a full instruction timing table.
Careful analysis of the compiled source code thus suffices to es-
tablish appropriate timer configurations for the Sancus application
scenarios. To make our exploits more robust against changes in
the application’s source code, however, we opted for a different
approach where the attacker first deploys a near-exact copy of
the victim module, adjusted to copy the value of TAR in a global
variable directly after execution of the conditional jump of inter-
est. Our practical attack combines the execution timings retrieved
from this “spy” module with predetermined constant parameters
to dynamically configure the timer at runtime.
4.2 IRQ Latency Traces on SGX Platforms
SGX enclave programs are explicitly left interrupt-unaware by de-
sign. While an x86 processor [36] in enclave mode ignores obvious
hardware debug assistance features such as the single-step trap flag
(rflags.tf) or hardware breakpoints, recent research on interrupt-
driven SGX attacks [31, 42, 51, 74] has shown that untrusted OSs
can accurately emulate this behavior by leveraging first-rate control
over timer devices. So far, these attacks have focussed on collecting
side-channel information from frequent enclave preemptions via
the page tables, CPU caches, or the branch prediction unit. We are
the first to recognize, however, that the act of interrupting a victim
enclave in itself leaks microarchitectural instruction timings.
We explain below how we extended and improved a state-of-
the-art enclave single-stepping framework to collect precise in-
terrupt latency measurements from SGX enclaves. The resulting
IRQ latency traces describe the execution time for each subsequent
instruction in the enclaved computation, and can thus be thought
of as an “x-ray” of the microarchitectural processor state and the
code executing in the enclave.
Single-Stepping Enclaved Execution. We based our implementa-
tion on the recently published open-source SGX-Step [74] frame-
work that allows a privileged adversary to precisely “single-step”
enclaves at most one instruction at a time. SGX-Step comes with
a Linux kernel driver to establish convenient user space virtual
memory mappings for enclave Page Table Entries (PTEs) and the
local Advanced Programmable Interrupt Controller (APIC) device.
A very precise single-stepping technique is achieved by writing
to the APIC timer register directly from user space, eliminating
any jitter from kernel context switches in the timer configuration
path [31, 42, 51]. Carefully selecting a platform-specific timer inter-
val ensures that interrupts reliably arrive with a very high probabil-
ity (> 97%) within the first enclaved instruction after eresume [74].
Figure 5: Enhanced SGX-Step framework for precise IRQ la-
tency measurements (blue path) on Intel x86 platforms.
While SGX-Step allows APIC interrupts to be sent from a ring 3
user space process, the original framework still vectors to a conven-
tional ring 0 kernel space interrupt handler. Execution will eventu-
ally return to the user space AEP stub where the single-stepping
adversary collects side-channel information, and configures the
local APIC timer for the next interrupt before resuming the enclave.
This approach suffices to amplify conventional side-channels, but
subtle microarchitectural timing differences can be affected by noise
from kernel space interrupt handling code, privilege level switches,
and cache pollution [31, 51]. As such, precisely measuring inter-
rupt latency on Intel x86 platforms presents a substantial challenge
over state-of-the-art enclave execution control approaches. As an
important contribution, we therefore extended SGX-Step to handle
interrupts completely within user space, without ever having to
vector to the kernel.
Figure 5 summarizes our improved approach to interrupt and
resume enclaves. In an initial preparatory phase, the privileged
adversary queries the /dev/sgx-step Linux kernel driver to estab-
lish user space virtual memory mappings for the local APIC MMIO
range plus the IA-64 Interrupt Descriptor Table (IDT) [36, 74]. Cus-
tom user space ISRs can now be registered directly by writing to
the relevant IDT entry, taking care to specify the handler address
relative to the user code segment and with descriptor privilege
level 3 [36].6 When the local APIC timer interrupt 1 arrives within
an enclaved instruction, SGX’s secure AEX microcode procedure
stores and clears CPU registers inside the enclave. Next, the con-
ventional interrupt logic takes over and 2 vectors to the user space
interrupt handler. At this point, 3 we immediately grab a timestamp
as the very first ISR instruction before 4 returning to the afore-
mentioned AEP stub. 5 Here, we log the extracted latency timing
measurements, optionally annotating them for benchmark debug
enclaves with the stored in-enclave program counter that can be re-
trieved via the privileged edbgrd instruction in the /dev/sgx-step
driver. Thereafter, we configure the local APIC timer for the next
interrupt by writing into the initial-count MMIO register, and grab
another timestamp to mark the start of the interrupt latency mea-
surement. We take care to 6 execute the eresume instruction imme-
diately after storing the timestamp to memory. This ensures that the
interrupt latency measurement path between the two timestamps
6 We register our user space handlers as an x86 trap gate, since otherwise the interrupt-
enable flag (rflags.if) does not get restored upon interrupt return.
(visualized in blue in Fig. 5) only includes (i) three unprotected in-
structions to store the first timestamp and resume the enclave, plus
(ii) the enclaved instruction of interest, plus (iii) the AEX microcode
procedure to vector to the untrusted interrupt handler.
Handling Noise. In contrast to an embedded Sancus-enabled
MSP430 CPU, microarchitectural optimizations found in modern
x86 processors are known to cause non-constant instruction execu-
tion times [11, 12]. Conformant to our attacker model, and closely
following previous SGX attacks [8, 25, 31, 42, 51, 75] our experimen-
tal setup attempts to reduce measurement noise to a minimum by
leveraging some of the unique untrusted operating system adver-
sary capabilities to increase execution time predictability: disable
HyperThreading and dynamic frequency scaling (C-states, Speed-
Step, TurboBoost), and affinitize the enclave process to a dedicated
CPU with Linux’s isolcpus kernel parameter.
To compensate for the remaining measurement noise, we corre-
late IRQ latency observations from repeated enclaved executions
over the same input, as is not uncommon practice in (SGX) side-
channel research [8, 25, 42, 51, 62]. Specifically, we will show in
Section 5 that the IRQ latency measurements extracted by our frame-
work exhibit a normally distributed variance. As such, adversaries
can rely on basic statistical analysis techniques (e.g., mean, median,
standard deviation) to combine multiple IRQ latency observations
into a representative overall trace of enclaved instruction timings.
Our practical implementation uses a Python post-processing script
to parse the raw measurements extracted by our framework for
repeated enclaved executions. The resulting traces plot the median
execution time (plus optionally a box plot describing the distribu-
tion) for each subsequent instruction in the enclaved execution.
Accurately aggregating IRQ latency measurements from repeated
enclaved executions also presents another substantial challenge,
however. That is, while SGX-Step guarantees that a victim enclave
executes at most one instruction at a time, a relatively low fraction
of the timer IRQs (< 3%) still arrives within eresume – before an
enclaved instruction is ever executed [74]. Such “zero-step” events
are harmless in themselves, but should be filtered out in order to
correctly associate repeated measurements for the same step (i.e., in-
struction) in different enclave invocations. We therefore contribute
a novel technique to deterministically recognize false zero-step
interrupts by probing the “accessed” bit [36] in the unprotected
page table entry mapping the enclaved code page. Specifically, we
experimentally verified that the CPU only sets the code PTE ac-
cessed bit when the enclave did indeed execute an instruction (i.e.,
timer interrupt arrived after eresume). Merely clearing the PTE
accessed bit for the relevant enclaved code page before sending the
interrupt, and querying it afterwards thus suffices to filter out false
zero-step observations and achieve noiseless single-stepping.
5 EVALUATION
Our embedded scenarios were evaluated on a development version
of Sancus, extended with the hardware-level secure interrupt mech-
anism described in Section 3.1. We interfaced the Sancus core with
a Diligent PmodKYPD peripheral for the secure I/O application. All
SGX experiments were conducted on an off-the-shelf Dell Inspiron
13 7359 laptop with a generic Linux v4.13.0 kernel on a Skylake
dual-core Intel i7-6500U CPU running at 2.5 GHz. Custom BIOS
and kernel parameters were described in the previous section.
5.1 Effectiveness on Sancus
To evaluate our attack against the MSP430 bootstrap loader soft-
ware, we encapsulated the relevant password comparison routine
BSL430_unlock_BSL in a protected Sancus enclave. Texas Instru-
ments eliminated secret-dependent control flow entirely from BSL
v3 onwards (with a bitwise or of the xor of each pair of bytes). To
the best of our knowledge, vulnerable BSL versions are no longer
distributed. We therefore based our implementation on the latest
BSL v9, where we replaced the invulnerable, xor-based password
comparison with the hardened assembly code from Listing 1. The
untrusted application context succeeds in recovering the full BSL
password by iterating over all possible values for each input byte
sequentially. A single interrupt per guess suffices to determine the
correctness of the password byte under consideration. As such,
our interrupt timing attack reduces an exhaustive search for the
password from an exponential to a linear effort.
We provide the full source code of the poll_keypad function in
Appendix B. The program was compiled with the Sancus C compiler
based on LLVM/Clang v3.7.0. Our exploit recognizes all key presses
without noise, in a single run of the victim enclave. This is an
important property for I/O scenarios where, unlike cryptographic
algorithms, a victim cannot be forced to execute the same code over
the same secret data multiple times. Instead, key strokes should
be recognized in real-time, while they are being entered by the
human actor. Moreover, our secure keypad attack only requires a
single IRQ per loop iteration, totaling no more than 16 interrupts
to recover the full key mask from a single enclaved execution.
5.2 SGX Microbenchmarks
We first present microbenchmark experiments in order to quantify
the effect of microarchitectural execution state and instruction type
on the latency of individual x86 instructions. The microbenchmarks
were obtained by single-stepping a benchmark SGX enclave that
executes a slide of 10,000 identical assembly instructions. We refer
to the original SGX-Step paper [74] for a thorough evaluation of
its APIC timer-based single-stepping mechanism which guarantees
that at most one enclaved instruction is executed per interrupt.
Additionally, we used the code PTE “accessed” bit technique de-
scribed in Section 4.2 to deterministically filter out false zero-step
observations, resulting in perfect single-stepping capabilities.
Differentiating Instruction Types. Figure 6a provides the IRQ la-
tency distributions for selected processor instructions. The horizon-
tal axis lists the observed latency timings in CPU cycles, whereas
the number of corresponding interrupts in this latency class is de-
picted on the vertical axis. Note that the horizontal axis does not
start from zero, as our interrupt latency measurement path (Fig. 5)
includes the execution times of the eresume and AEX microcode.
As a first important result, we can decisively distinguish certain
low-latency enclaved operations such as nop or add from higher-
latency ones such as secure random number generation (rdrand)
or certain floating point operations (fscale), solely by observing
the latency they induce on interrupt. This confirms our hypothesis
that IRQ latency on x86 platforms depends on the execution time
(a) IRQ latency distributions for selected x86 instructions.
(b) Data-dependent IRQ latencies for the x86 div instruction.
(c) Increased IRQ latencies from enclaved data cache misses.
(d) Increased IRQ latencies from unprotected PTE data cache misses.
Figure 6: SGX microbenchmarks: IRQ latency distribution timing variability based on (a) enclaved instruction type, (b) secret
input operands, (c) enclave private memory caching conditions, and (d) untrusted address translation data cache misses.
of the interrupted instruction. Hence, these benchmarks can be
considered clear evidence for the existence of a timing-based side-
channel in SGX’s secure AEX procedure.
We can furthermore conclude that differentiating a nop instruc-
tion from an add with immediate and register operands is much
less obvious, however. These instructions are indeed very similar
at the microarchitectural level, both requiring only a single micro-
op [22]. As an interesting special case, we investigated the IRQ
latency behavior of the lfence instruction, which serializes all
prior load-from-memory operations. This instruction has recently
become particularly relevant, for Intel officially recommends [37]
to insert lfence instructions after sensitive conditional branches to
protect SGX enclaves against Spectre v1 speculative bounds check
bypasses [40]. While the microarchitectural timing differences are
more subtle, Fig. 6a still shows that one can on average plainly
separate lfence from ordinary nop or add instructions.
Measuring Data Timing Channels. Variable latency arithmetic
instructions are known to be an exploitable side-channel, even in
code without secret-dependent control flow [4, 11, 12]. Previous
research on microarchitectural data timing channels has established
that the execution time of some commonly used x86 arithmetic
instructions such as (floating point) multiplication or division de-
pends on the operands they are being applied upon. Our second
set of microbenchmark experiments therefore explore leakage of
enclaved operand values through interrupt latency for the widely
studied [4, 11, 12] unsigned integer division x86 div instruction.
Figure 6b shows the IRQ latency distributions for 10,000 enclaved
executions of the div instruction applied on different 128-bit div-
idend operands and a fixed 64-bit divisor (0xffffffffffffffff).
The average interrupt latency clearly increases as the dividend
becomes larger, which confirms that “the throughput of div/idiv
varies with the number of significant digits in the input rdx:rax” [35]
As such, we conclude that IRQ latency leaks operand values for
variable latency instructions. Importantly, in contrast to classical
start-to-end timing measurements, Nemesis-style interrupt tim-
ing attacks leak this information at an instruction-level granularity,
which allows to precisely isolate (successive) data-dependent in-
struction timing measurements in a larger enclaved computation.
Influence of Data Caching. Figure 6c investigates the IRQ latency
distributions for selected mov instructions to/from enclave memory.
The store distribution is characterized by two prominent normally
distributed peaks. Our hypothesis is that the right peak, represent-
ing measurements with a larger IRQ latency, is caused by a write
miss in the data cache.7 A write miss indeed forces the CPU to