# Community Structure of Web Trackers: A Comprehensive Analysis

## V. Kalavri et al.

### 1. Introduction
In this study, we explore the community structure of web trackers using a large-scale dataset from an explicit web proxy. We transform user requests into a two-mode referer-hosts graph, where vertices in the first mode represent pages visited by users, and vertices in the second mode represent requests for objects embedded in those pages. We find that 94% of trackers are in the largest connected component (LCC) of this graph. To study how trackers relate to each other, we collapse the referer-hosts graph into a one-mode hosts-projection graph. From the hosts-projection graph, we observe an extremely high degree of clustering, indicating the formation of tight communities. Based on this observation, we demonstrate the effectiveness of two tracker detection mechanisms: (1) a simple threshold-based classifier that examines the number of tracker neighbors of unknown vertices, and (2) a label propagation algorithm that implicitly uses the communities formed by trackers. Both techniques achieve high accuracy (over 97%) and low false positive rates (under 2%).

### 2. Dataset and Graph Construction
#### 2.1. Dataset
Our dataset is collected from an explicit web proxy and includes user requests over a six-month period. The dataset is transformed into a two-mode referer-hosts graph, where:
- Vertices in the first mode represent pages visited by users.
- Vertices in the second mode represent requests for objects embedded in those pages.

#### 2.2. Hosts-Projection Graph
To study the relationships between trackers, we collapse the referer-hosts graph into a one-mode hosts-projection graph. This graph allows us to analyze the community structure of trackers and their interactions with other hosts.

### 3. Neighborhood Compositions and Tracker Visualization
#### 3.1. Neighborhood Compositions
We analyze the neighborhood compositions for trackers and non-trackers. Figures 4(a) and 4(b) show the cumulative distribution functions (CDFs) of the ratio of tracker neighbors over all neighbors and the ratio of tracker neighbors over the total number of trackers in the dataset, respectively.

#### 3.2. Tracker Visualization
Figure 5 visualizes the hosts-projection graph focused around trackers' positions. The visualization includes only edges where at least one endpoint is a tracker, resulting in 60,000 vertices and 340,000 edges. The darker a vertex's color, the higher its degree. The community on the right contains trackers and ad servers, while the left cluster consists of normal webpages and a few popular trackers, distinguished by their larger size and darker color.

### 4. Classifying Trackers
Our findings suggest that trackers form a well-connected cluster in the hosts-projection graph and are mostly connected to other trackers. In this section, we leverage these findings to automatically classify trackers using two methods: (1) a rule-based classifier that analyzes the first-hop neighborhoods of each unlabeled vertex, and (2) an iterative label propagation method.

#### 4.1. Classification via Neighborhood Analysis
This method analyzes the first-hop neighborhoods of each unlabeled node in the hosts-projection graph. For each unlabeled node, we count the number of trackers among its immediate neighbors and make a classification decision based on a configurable threshold. If the percentage of tracker neighbors is above the threshold, the node is labeled as a tracker.

We evaluate our classifier using three subsets of our dataset. For each subset, we use all the hosts that appear in the last month as the test set and all the previous months as the training set. Hosts in the training set are labeled as "tracker" or "other" using the EasyPrivacy list as ground truth. We measure precision, accuracy, false positive rate (FPR), and recall for each method.

The number of test records and previously unseen trackers per month are shown in Table 1. We observe around 800 new trackers per month, independent of the total number of requests to new pages. This indicates a diverse tracker ecosystem, strengthening the need for an automated detection system.

#### 4.2. Classification via Label Propagation
Label Propagation is a scalable iterative algorithm for community detection. It exploits the graph structure to propagate labels and identify densely connected groups of vertices. Initially, vertices are assigned unique labels. In an iterative fashion, vertices exchange labels with their neighbors, adopting the most frequent label. The algorithm converges when no label changes occur.

We use this algorithm on the hosts-projection graph. First, vertices propagate labels until convergence. Next, vertices with the same label are grouped in the same community. We then use the EasyPrivacy list to identify and tag known trackers inside the clusters and tag white-listed vertices as non-trackers. Finally, we assign a super tag to each cluster by choosing the most popular tag among its members. Unlabeled nodes are classified by assigning them the super tag of the cluster they belong to.

The results for the label propagation method are shown in Table 2. We evaluate the classification using random sets of test records of varying sizes. This method achieves high precision, accuracy, and recall, with low FPR, and does not require a manually set threshold.

### 5. Related Work
Several studies have analyzed the ecosystem of trackers and third-parties on the web, focusing on behavioral and network aspects. These include:
- **TrackAdvisor**: A tool that analyzes cookie exchange statistics to detect trackers.
- **Roesner et al.**: A study of web tracking, classifying tracking behaviors and evaluating defense mechanisms.
- **Bau et al.**: A machine learning mechanism for detecting trackers.
- **Gomer et al.**: An investigation of the graph structure of third-party tracking domains in search engine results.

Most of these works find that a small number of trackers capture the majority of user behavior. Our work, however, is the first to show that using the community structure as an explicit feature can accurately predict whether an unknown URL is a tracker or not.

### 6. Conclusion
In this paper, we explored the community structure of trackers using a large-scale dataset from an explicit web proxy. We found that 94% of trackers were in the LCC of the referer-hosts graph. By collapsing this graph into a hosts-projection graph, we observed a high degree of clustering, indicating the formation of tight communities. We demonstrated the effectiveness of two tracker detection mechanisms: a simple threshold-based classifier and a label propagation algorithm. Both techniques achieved high accuracy and low FPR.

We implemented the analysis and classification algorithms using Apache Flink. Future work includes porting them to a streaming version for deployment within our explicit web proxy. Even our initial implementations are quite fast, indicating there are few scalability concerns for production deployment.

### References
1. AdBlock. https://getadblock.com/
2. Apache Flink. http://www.flink.apache.org
3. EasyPrivacy list. https://hg.adblockplus.org/easylist/
4. Bau, J., Mayer, J., Paskov, H., Mitchell, J.C.: A promising direction for web tracking countermeasures. In: Web 2.0 Security and Privacy (2013)
5. Englehardt, S., Reisman, D., Eubank, C., Zimmerman, P., Mayer, J., Narayanan, A., Felten, E.W.: Cookies that give you away: the surveillance implications of web tracking. In: Proceedings of the 24th international conference on World Wide Web, WWW 2015 (2015)
6. Gomer, R., Rodrigues, E.M., Milic-Frayling, N., Schraefel, M.C.: Network analysis of third party tracking: user exposure to tracking cookies through search. In: Proceedings of the IEEE/WIC/ACM International Joint Conferences on Web Intelligence and Intelligent Agent Technologies, pp. 549–556 (2013)
7. Krishnamurthy, B., Wills, C.: Privacy diffusion on the web: a longitudinal perspective. In: Proceedings of the 18th International Conference on World Wide Web, WWW 2009, pp. 541–550 (2009)
8. Li, T.-C., Hang, H., Faloutsos, M., Efstathopoulos, P.: TrackAdvisor: taking back browsing privacy from third-party trackers. In: Mirkovic, J., Liu, Y. (eds.) PAM 2015. LNCS, vol. 8995, pp. 277–289. Springer, Heidelberg (2015)
9. Melamed, D.: Community structures in bipartite networks: a dual-projection approach. PLoS ONE 9(5), e97823 (2014)
10. Papaodyssefs, F., Iordanou, C., Blackburn, J., Laoutaris, N., Papagiannaki, K.: Web identity translator: behavioral advertising and identity privacy with WIT. In: Proceedings of the 14th ACM Workshop on Hot Topics in Networks (to appear), HotNets 2015 (2011)
11. Raghavan, U.N., Albert, R., Kumara, S.: Near linear time algorithm to detect community structures in large-scale networks. Phys. Rev. E 76(3), 036106 (2007)
12. Rockefeller, J.D.: Do-Not-Track online act of 2013. US Senate (2013)
13. Roesner, F., Kohno, T., Wetherall, D.: Detecting and defending against third-party tracking on the web. In: Proceedings of the 9th USENIX Conference on Networked Systems Design and Implementation, NSDI 2012 (2012)
14. Williams, O.: Adblock extension with 40 million users sells to mystery buyer, refuses to name new owner (2015). http://thenextweb.com/apps/2015/10/02/trust-us-we-block-ads/

This revised text is more structured, coherent, and professional, providing a clear and detailed overview of the study and its findings.