  注意： 共享项目和可移植的类库参见第31章。WPF应用程序项目模板参见第
34章。Windows服务项目模板参见第39章。
2．使用Universal项目模板
表17-2列出了用于Universal Windows Platform的模板。这些模板可用于Windows 10和
Windows 8.1，但需要Windows 10系统来测试应用程序。这些模板是用于创建应用程序，
使用任何设备系列运行在Windows 10上，例如电脑、手机、X-Box、IoT设备等。
表17-2
项目模板名称
项目模板描述
空白应用程序
（Universal Windows）
一个使用XAML的空白Universal Windows应用程序，没有样
式和其他基类
类库（Universal
Windows）
一个.NET类库，其他用.NET编写的Windows Store应用程序
可以调用它。在这个库中可以使用Windows运行库的API
Windows运行库组件
（Universal Windows）
一个Windows运行库类库，其他用不同编程语言（C#、
C++、JavaScript）开发的Windows Store应用程序可以调用
它
单元测试库（Universal
Windows）
一个包含Universal Windows Platform应用程序的单元测试的
库
编码的UI测试项目
（Windows Phone）
这个项目定义了编码的UI测试，用于Windows Phone
编码的UI测试项目
（Universal Windows）
这个项目定义了编码的UI测试，用于Windows应用程序
  注意： 对于Windows 10，通用应用程序的默认模板数已削减。为了创建
Windows 8的Windows Store应用程序，Visual Studio提供了更多的项目模板，来预定义
基于网格、基于分隔板或者基于Hub的应用程序。对于Windows 10，只有空模板可用。
可以从空的模板开始，或考虑使用Template10作为开始。一旦安装了微软的Template10
Visual 
Studio扩展，Template10项目模板就可用，其命令是Tools 
| 
Extensions 
and
Updates。
  注意： 如果通过Visual Studio安装Windows 8项目模板，也可以使用几个
Windows、Windows Phone和Universal项目模板，这些都是运行在Windows 8和8.1上的
应用程序的通用模板，本书未涉及它们。
3．使用Web项目模板
Visual Studio 2015中的有趣改进是Web项目模板。最初，只有表17-3中的3个选项。
表17-3
项目模板名称
项目模板描述
ASP.NET Web
Application
这是在创建任何Web应用程序时选择的模板，它可以是把
HTML代码返回到客户端的网站，也可以是运行JSON或
XML的服务。在选择这个项目模板后，可用的选择在表17-
4中描述
Class Library
（Package）
这个模板使用project.json基本项目创建了一个类库。可以在
所有新项目类型中使用这个库。这是一个用.NET Core建立
的库
Console
Application（Package）
与前面讨论的控制台应用程序和Windows经典桌面项目模板
不同，这个控制台应用程序使用project.json，从而允许使
用.NET Core 1.0
在选择ASP.NET Web应用程序模板后，就可以选择一些预先配置的模板，如图17-8所
示。顶部是ASP.NET 4.6模板的一个主要组，和ASP.NET Core 1.0的一个组。这两组的模
板在表17-4和表17-5中描述。
图17-8
表17-4
项目
项目模板描述
空白应用程序
这个模板没有任何内容，适合于用HTML和CSS页面创建站
点
Web Forms
这个模板默认为Web Forms添加文件夹。可以添加MVC和
Web API配置，以混合它们
MVC
这个模板使用“模型-视图-控制器”模式和Web应用程序
（ASP.NET MVC 5）。它可以用于创建Web应用程序
Web API
Web API模板很容易创建RESTful服务。这个模板也添加
MVC文件夹和核心引用，因为服务的文档用ASP.NET MVC
5创建
单页应用程序
这个模板使用MVC创建结构，仅使用一个页面，它利用
JavaScript代码检索服务器中的数据
Azure API应用程序
该模板创建一个ASP.NET Web API结构，来创建Microsoft
Azure支持的服务。为了更容易检测所提供的服务，把
Swagger添加到这个模板
Azure Mobile应用程序
这是一个Azure Mobile应用程序的强大模板，可用于多个移
动客户端。这个模板基于ASP.NET Web API服务定义的表
自动创建一个SQL Server的后端。也很容易集成基于OAuth
的身份验证，来集成Facebook、谷歌和Microsoft账户
表17-5
项目模板名称
项目模板描述
空模板
这个模板是用ASP.NET Core 1.0托管的初始内容。这个模板
主要用于第40章
Web API
这个模板用ASP.NET Core 1.0添加ASP.NET Web API控制
器。这个模板主要用于第42章
Web Application
这个模板为ASP.NET MVC 6应用程序创建控制器和视图。
这个模板主要用于第41章
这些为Web应用程序与ASP.NET 4.6提供的模板如表17-4所示。选择这些模板，就可
以看到Web Forms、MVC和Web API的默认选择，其中定义了创建的文件夹和核心引用。
可以选择Web Forms、MVC和Web API复选框，在一个项目中使用多种技术，例如使用旧
的Web Forms技术和更新的ASP.NET MVC。
表17-4中的模板都使用ASP.NET 
4.6或更早版本的框架，而以下模板利用ASP.NET
Core 1.0。因为切换到ASP.NET Core 1.0并不是自动进行的，需要更改一些代码，所以并
不是ASP.NET 4.6提供的所有特性都可用于ASP.NET Core 1.0，最好清楚地分开这些组。
例如，ASP.NET Core 1.0没有提供ASP.NET Web Forms。Web Forms是一个自.NET 1.0开
始就存在的技术，但它并不容易使用新的HTML和JavaScript特性。ASP.NET 4.6仍有一些
新特性可用于Web Forms，可以想在未来的许多年里使用此技术，但它将不可用于新框架
ASP.NET Core 1.0。
为Web应用程序与ASP.NET Core 1.0提供的模板在表17-5中描述。在这些选项中，不
能为Web 
Forms、MVC和Web 
API选择文件夹和核心引用，因为Web 
Forms不可用，
ASP.NET MVC和Web API移入使用相同类的一种技术中。
4．使用WCF项目模板
要创建一个Windows Communication Foundation（WCF）应用程序来实现客户端和服
务器之间的通信，可以选择如表17-6所示的WCF项目模板。
表17-6
项目模板名称
项目模板描述
WCF服务库
一个包含示例服务合同和实现以及配置的库。该项目模板被
配置为启动一个WCF服务宿主，用来托管服务和测试客户
端应用程序
WCF服务应用程序
一个Web项目，它包含一个WCF合同和服务实现
WCF工作流服务应用程
序
一个Web项目，它托管一个使用工作流运行库的WCF服务
联合服务库
一个WCF服务库，它包含一个WCF服务合同和实现，以托
管RSS或ATOM订阅源
这不是一个完整的Visual Studio 2015项目模板列表，但它列出了一些最常用的模板。
Visual Studio主要添加了Universal Windows项目模板和ASP.NET Core 1.0项目模板。这些
新功能将会在本书其他章节中介绍。特别是，一定要参阅第29章到第34章，其中介绍了
Universal Windows Platform。第40到42章介绍了ASP.NET Core 1.0。
17.3 浏览并编写项目
本节着眼于Visual Studio提供用于帮助在项目中添加和浏览代码的功能。学习如何使
用Solution Explorer浏览文件和代码，使用编辑器的IntelliSense和代码片段等功能浏览其他
窗口，如Properties（属性）窗口和Document Outline（文档大纲）。
17.3.1 构建环境：CLI和MSBuild
Visual Studio 2015的复杂性和问题源自于构建环境的重大变化。有两个构建环境可
用：MSBuild（其配置主要基于XML文件）和.NET Command Line Interface （CLI，其配
置主要基于JSON文件）。对于MSBuild，用于编译项目的所有文件都在XML中定义。对
于CLI，文件夹中的所有文件都用于构建项目，所有文件都不需要配置。
在这两个构建环境中，有三个变体。一个变体是使用MSBuild系统。这个构建系统用
于长期存在的项目类型，如WPF应用程序或使用ASP.NET 4.5.2模板的ASP.NET Web应用
程序。项目文件是一个XML文件，列出了属于项目的所有文件，引用所有工具来编译文
件，列出了构建步骤。
CLI构建系统与ASP.NET Core 1.0项目模板一起使用。它用一个基于XML、扩展名为
xproj的项目文件进行初始配置。文件ConsoleApp1.xproj包含Visual Studio工具的构建路径
信息以及全球定义信息。DNX构建系统使用JSON文件project.json，此文件定义可用的命
令，引用NuGet包和程序集，包括项目的描述。不需要属于项目的文件列表，因为文件夹
和子文件夹中的所有文件都用来编译项目。
  注意： DNX的命令行工具称为.NET Core命令行（CLI），参见第1章。
CLI和MSBuild的第三种选择是用于通用Windows应用程序。在这里，使用XML项目
文件和project.json。project.json文件不再列出项目描述和命令，只列出对NuGet包的依
赖，使用的运行库（用于Universal Windows Platform应用程序、ARM、x86和x64）。项目
描述和构建命令在使用MSBuild的项目XML文件中。
  注意： 有两个选项可供选择，结果就有了三个变体。当然，随着时间的推
移，这会更容易，只是不清楚会有多容易，因为在撰写本文时，刚刚建立了一个支持
跨平台开发的MSBuild版本。未来的更新也许会有更多的选择。
17.3.2 Solution Explorer
在创建项目（例如，前面章节最常用的控制台应用程序（包））之后，要用到的最重
要的工具除了代码编辑器，就是Solution 
Explorer。使用这个工具可以浏览项目的所有文
件和项，查看所有的类和类成员。
  注意： 在Visual Studio中运行控制台应用程序时，有一个常见的误解，即需
要在Main方法的最后一行添加一个Console.ReadLine方法来保持控制台窗口打开。事实
并非如此，通过命令Debug | Start without Debugging（或按Ctrl+F5组合键）可以启动应
用程序，而不必通过命令Debug | Start Debugging（或按F5键）来开启。这样可以保持
窗口打开直到按下某个键。使用F5键来开启应用程序也是有意义的，如果设置了断
点，Visual Studio就会在断点处挂起。
1．使用项目和解决方案
Solution Explorer会显示项目和解决方案。理解它们之间的区别是很重要的：
● 项目是一个包含所有源代码文件和资源文件的集合，它们将编译成一个程序集，在
某些情况下也可能编译为一个模块。例如，项目可能是一个类库或一个Windows
GUI应用程序。
● 
解决方案是一个包含所有项目的集合，它们组合成一个特定的软件包（应用程
序）。
要理解这个区别，可以考虑当发布一个包括多个程序集的项目时会发生什么。例如，
可能有用户界面、自定义控件和作为应用程序一部分的库的其他组件。甚至可能为管理员
图17-9
提供不同的用户界面和通过网络调用的服务。应用程序的每一部分可能包含在单独的程序
集中，因此Visual Studio会认为它们是单独的项目。而且很有可能并行编码这些项目，并
将它们彼此结合。因此，在Visual 
Studio中把这些项目当作一个单位来编辑是非常有用
的。Visual Studio允许把所有相关的项目构成一个解决方案，并且当作一个单位来处理，
Visual Studio会读取该单位并允许在该单位上进行工作。
到目前为止，本章已经零散地讨论创建一个控制台项
目。在这个例子中，Visual 
Studio实际上已经创建一个解
决方案，只不过它仅包含一个项目而已。可以在Solution
Explorer中看到这样的场景（如图17-9所示），它包含一
个树型结构，用于定义该解决方案。
在这个例子中，项目包含了源文件Program.cs，以及
项目配置文件project.json（允许定义项目描述、版本和依
赖项）。Solution Explorer也显示了项目引用的NuGet包和
程序集。在Solution Explorer中展开References文件夹就可
以看到这些信息。
如果在Visual 
Studio中没有改变任何默认设置，在屏幕右上方就可以找到Solution
Explorer。如果找不到它，则可以进入View菜单并选择Solution Explorer。
解决方案是用一个扩展名为.sln的文件来描述的，在这个示例中，它是
ConsoleApp1.sln。解决方案文件是一个文本文件，它包含解决方案中包含的所有项目的信
息，以及可用于所有包含项目的全局项。
根据构建环境，C#项目是用一个扩展名为.csproj的文件或.xproj文件和project.json来描
述的，project.json文件可以在Solution 
Explorer中直接打开。为了在Visual 
Studio中编
辑.csproj文件，需要先卸载这个项目，可以单击项目名称并在上下文菜单中选择Unload
Project命令来进行卸载。项目卸载之后，在上下文菜单中选择Edit ConsoleApp1.csproj，就
可以直接访问XML代码了。
显示隐藏文件
默认情况下，Solution Explorer隐藏了一些文件。单击Solution Explorer工具栏中的
Show All Files按钮，可以显示所有隐藏的文件。例如，bin和obj子文件夹存放了编译的
文件和中间文件。obj子文件夹存放各种临时的或中间文件；bin子文件夹存放已编译的
程序集。
2．将项目添加到一个解决方案中
下面各节将介绍Visual Studio如何处理Windows桌面应用程序和控制台应用程序。最
终会创建一个名为BasicForm的Windows项目，将它添加到当前的解决方案ConsoleApp1
中。
  注意： 创建BasicForm项目，得到的解决方案将包含一个WPF应用程序和一
个控制台应用程序。这种情况并不多见，更有可能的是解决方案包含一个应用程序和
许多类库。这么做只是为了展示更多的代码。不过，有时需要创建这样的解决方案，
例如，编写一个既可以运行为WPF应用程序、又可以运行为命令行实用工具的实用程
序。
创建新项目的方式有几种。一种方式是在File菜单中选择New | Project（前面就是这么
做的），或者在File菜单中选择Add | New Project。选择New Project命令将打开熟悉的Add
New Project对话框，如图17-10所示。不过，此时Visual Studio会在已有ConsoleApp1项目
所在的解决方案中创建新项目。
图17-10
如果选择该选项，就会添加一个新项目，因此ConsoleApp1解决方案现在包含一个控
制台应用程序和一个WPF应用程序。
  注意： Visual Studio支持语言独立性，所以新项目并不一定是C#项目。将C#
项目、Visual Basic项目和C++项目放在同一个解决方案中是完全可行的。但是，本书的
主题是C#，所以创建C#项目。
当然，这意味着ConsoleApp1不再适合作为解决方案的名称。要改变名称，可以右击
解决方案的名称，并选择上下文菜单中的Rename命令。将新的解决方案命名为
DemoSolution。Solution Explorer窗口现在如图17-11所示。
可以看出，Visual Studio自动为新添加的WPF项目引用一些额外的基类，这些基类对
于WPF功能非常重要。
注意，在Windows 
Explorer中，解决方案文件的名称已经改为DemoSolution.sln。通
图17-11
常，如果想重命名任何文件，Solution
Explorer窗口是最合适的选择，因为Visual
Studio会自动更新它在其他项目文件中的引
用。如果只使用Windows 
Explorer来重命名
文件，可能会破坏解决方案，因为Visual
Studio不能定位需要读入IDE的所有文件。因
此需要手动编辑项目和解决方案文件，来更
新文件引用。
3．设置启动项目
请记住，如果一个解决方案有多个项
目，就需要配置哪个项目作为启动项目来运
行。也可以配置多个同时启动的项目。这有多种方式。在Solution 
Explorer中选择一个项
目之后，上下文菜单会提供Set as Startup Project选项，它允许一次设置一个启动项目。也
可以使用上下文菜单中的Debug | Start new instance命令，在一个项目后启动另一个项目。
要同时启动多个项目，右击Solution 
Explorer中的解决方案，并选择上下文菜单中的Set
Startup Projects，打开如图17-12所示的对话框。当选择Multiple startup projects之后，可以
定义启动哪些项目。
图17-12
4．浏览类型和成员
图17-13
当Visual Studio初次创建WPF应用程序时，该应用程序比控制台应用程序要多包含一
些初始代码。这是因为创建窗口是一个较复杂的过程。第34章详细讨论WPF应用程序的
代码。现在，查看MainWindow.xaml中的XAML代码，和MainWindow.xaml.cs中的C#代
码。这里也有一些隐藏的C#代码。遍历Solution 