### 注意事项
- 共享项目和可移植类库请参见第31章。
- WPF应用程序项目模板请参见第34章。
- Windows服务项目模板请参见第39章。

### 使用Universal项目模板

表17-2列出了用于Universal Windows Platform (UWP) 的模板。这些模板适用于Windows 10和Windows 8.1，但需要在Windows 10系统上进行测试。它们可用于创建可在多种设备（如PC、手机、Xbox、IoT设备等）上运行的应用程序。

| 项目模板名称 | 项目模板描述 |
| --- | --- |
| 空白应用程序 (Universal Windows) | 一个使用XAML的空白UWP应用程序，无样式和其他基类。 |
| 类库 (Universal Windows) | 一个.NET类库，其他用.NET编写的Windows Store应用程序可以调用它。支持使用Windows运行时API。 |
| Windows运行时组件 (Universal Windows) | 一个Windows运行时类库，其他用不同编程语言（如C#、C++、JavaScript）开发的Windows Store应用程序可以调用它。 |
| 单元测试库 (Universal Windows) | 包含UWP应用程序单元测试的库。 |
| 编码的UI测试项目 (Windows Phone) | 定义了用于Windows Phone的编码UI测试。 |
| 编码的UI测试项目 (Universal Windows) | 定义了用于Windows应用程序的编码UI测试。 |

**注意：**
- 对于Windows 10，通用应用程序的默认模板数量有所减少。要创建Windows 8的Windows Store应用程序，Visual Studio提供了更多预定义的项目模板（如基于网格、分隔板或Hub的应用程序）。对于Windows 10，只有空模板可用。可以从空模板开始，或者考虑使用Template10作为起点。安装微软的Template10 Visual Studio扩展后，可以通过Tools | Extensions and Updates访问Template10项目模板。
- 如果通过Visual Studio安装Windows 8项目模板，还可以使用一些Windows、Windows Phone和Universal项目模板，这些模板适用于运行在Windows 8和8.1上的应用程序，本书未涉及这些内容。

### 使用Web项目模板

Visual Studio 2015中的一个重要改进是Web项目模板。最初，只有表17-3中列出的三个选项。

| 项目模板名称 | 项目模板描述 |
| --- | --- |
| ASP.NET Web Application | 用于创建任何Web应用程序的模板，可以返回HTML代码到客户端，也可以运行JSON或XML服务。选择此模板后，可选的配置如表17-4所示。 |
| Class Library (Package) | 使用project.json创建一个类库，可以在所有新项目类型中使用。这是一个基于.NET Core的库。 |
| Console Application (Package) | 与传统的控制台应用程序和Windows经典桌面项目模板不同，这个控制台应用程序使用project.json，允许使用.NET Core 1.0。 |

在选择ASP.NET Web应用程序模板后，可以选择一些预先配置的模板，如图17-8所示。顶部是ASP.NET 4.6模板的主要组，另一组是ASP.NET Core 1.0模板。这两组模板的详细信息分别见表17-4和表17-5。

| 项目模板名称 | 项目模板描述 |
| --- | --- |
| 空白应用程序 | 此模板没有任何内容，适合用HTML和CSS页面创建站点。 |
| Web Forms | 默认添加Web Forms文件夹。可以添加MVC和Web API配置以混合使用。 |
| MVC | 使用“模型-视图-控制器”模式和Web应用程序（ASP.NET MVC 5），可用于创建Web应用程序。 |
| Web API | 创建RESTful服务的模板。也添加MVC文件夹和核心引用，因为服务文档用ASP.NET MVC 5创建。 |
| 单页应用程序 | 使用MVC创建结构，仅使用一个页面，并利用JavaScript代码从服务器检索数据。 |
| Azure API应用程序 | 创建一个ASP.NET Web API结构，支持Microsoft Azure服务。为了更容易检测所提供的服务，将Swagger添加到此模板中。 |
| Azure Mobile应用程序 | 强大的模板，用于多个移动客户端。基于ASP.NET Web API服务定义表自动创建SQL Server后端，并且很容易集成基于OAuth的身份验证（如Facebook、Google和Microsoft账户）。 |

| 项目模板名称 | 项目模板描述 |
| --- | --- |
| 空模板 | 初始内容由ASP.NET Core 1.0托管。主要用于第40章。 |
| Web API | 添加ASP.NET Core 1.0的ASP.NET Web API控制器。主要用于第42章。 |
| Web Application | 为ASP.NET MVC 6应用程序创建控制器和视图。主要用于第41章。 |

**注意：**
- 表17-4中的模板使用ASP.NET 4.6或更早版本的框架，而表17-5中的模板使用ASP.NET Core 1.0。由于切换到ASP.NET Core 1.0并非自动完成，因此需要更改一些代码。并不是所有的ASP.NET 4.6特性都适用于ASP.NET Core 1.0，最好分开这些组。例如，ASP.NET Core 1.0不支持ASP.NET Web Forms。

### 使用WCF项目模板

要创建一个Windows Communication Foundation (WCF) 应用来实现客户端和服务器之间的通信，可以选择表17-6中列出的WCF项目模板。

| 项目模板名称 | 项目模板描述 |
| --- | --- |
| WCF服务库 | 包含示例服务合同和实现以及配置的库。该项目模板被配置为启动一个WCF服务宿主，用于托管服务和测试客户端应用程序。 |
| WCF服务应用程序 | 一个包含WCF合同和服务实现的Web项目。 |
| WCF工作流服务应用程序 | 一个Web项目，托管一个使用工作流运行时的WCF服务。 |
| 联合服务库 | 一个包含WCF服务合同和实现的WCF服务库，用于托管RSS或ATOM订阅源。 |

这不是完整的Visual Studio 2015项目模板列表，但它列出了一些最常用的模板。Visual Studio主要添加了Universal Windows项目模板和ASP.NET Core 1.0项目模板。这些新功能将在本书的其他章节中详细介绍。特别是，请参阅第29章至第34章，其中介绍了Universal Windows Platform。第40章至第42章介绍了ASP.NET Core 1.0。

### 浏览并编写项目

本节介绍Visual Studio提供的帮助在项目中添加和浏览代码的功能。学习如何使用Solution Explorer浏览文件和代码，以及如何使用编辑器的IntelliSense和代码片段等功能浏览其他窗口（如属性窗口和文档大纲）。

#### 构建环境：CLI和MSBuild

Visual Studio 2015的复杂性和问题源于构建环境的重大变化。有两个构建环境可用：MSBuild（其配置主要基于XML文件）和.NET Command Line Interface (CLI)（其配置主要基于JSON文件）。

- **MSBuild**：用于长期存在的项目类型，如WPF应用程序或使用ASP.NET 4.5.2模板的ASP.NET Web应用程序。项目文件是一个XML文件，列出了属于项目的所有文件、工具引用和构建步骤。
- **CLI**：与ASP.NET Core 1.0项目模板一起使用。初始配置基于一个扩展名为xproj的XML项目文件。文件ConsoleApp1.xproj包含Visual Studio工具的构建路径信息和全局定义信息。DNX构建系统使用JSON文件project.json，定义可用命令、NuGet包引用和项目描述。不需要列出项目中的所有文件，因为文件夹和子文件夹中的所有文件都用于编译项目。

**注意：** DNX的命令行工具称为.NET Core命令行 (CLI)，参见第1章。

- **Universal Windows应用程序**：使用XML项目文件和project.json。project.json文件不再列出项目描述和命令，只列出对NuGet包的依赖和使用的运行时（如ARM、x86和x64）。项目描述和构建命令在使用MSBuild的项目XML文件中。

**注意：** 有两个选项可供选择，结果有了三种变体。随着时间的推移，这会变得更简单，但在撰写本文时，刚刚建立了一个支持跨平台开发的MSBuild版本。未来的更新可能会提供更多选择。

#### Solution Explorer

在创建项目（例如前面章节中最常用的控制台应用程序（包））之后，除了代码编辑器之外，最重要的工具就是Solution Explorer。使用这个工具可以浏览项目的所有文件和项，查看所有的类和类成员。

**注意：** 在Visual Studio中运行控制台应用程序时，有一个常见的误解，即需要在Main方法的最后一行添加一个`Console.ReadLine`方法来保持控制台窗口打开。事实并非如此，可以通过命令Debug | Start without Debugging（或按Ctrl+F5组合键）启动应用程序，而不必通过命令Debug | Start Debugging（或按F5键）来开启。这样可以保持窗口打开直到按下某个键。使用F5键来开启应用程序也是有意义的，如果设置了断点，Visual Studio会在断点处挂起。

##### 使用项目和解决方案

Solution Explorer会显示项目和解决方案。理解它们之间的区别是很重要的：

- **项目**：是一个包含所有源代码文件和资源文件的集合，它们将编译成一个程序集，在某些情况下也可能编译为一个模块。例如，项目可能是一个类库或一个Windows GUI应用程序。
- **解决方案**：是一个包含所有项目的集合，它们组合成一个特定的软件包（应用程序）。

要理解这个区别，可以考虑当发布一个包括多个程序集的项目时会发生什么。例如，可能有用户界面、自定义控件和作为应用程序一部分的库的其他组件。甚至可能为管理员提供不同的用户界面和通过网络调用的服务。应用程序的每一部分可能包含在单独的程序集中，因此Visual Studio会认为它们是单独的项目。而且很有可能并行编码这些项目，并将它们彼此结合。因此，在Visual Studio中把这些项目当作一个单位来编辑是非常有用的。Visual Studio允许把所有相关的项目构成一个解决方案，并且当作一个单位来处理，Visual Studio会读取该单位并允许在该单位上进行工作。

到目前为止，本章已经零散地讨论创建一个控制台项目。在这个例子中，Visual Studio实际上已经创建一个解决方案，只不过它仅包含一个项目而已。可以在Solution Explorer中看到这样的场景（如图17-9所示），它包含一个树型结构，用于定义该解决方案。

在这个例子中，项目包含了源文件Program.cs，以及项目配置文件project.json（允许定义项目描述、版本和依赖项）。Solution Explorer也显示了项目引用的NuGet包和程序集。在Solution Explorer中展开References文件夹就可以看到这些信息。

如果在Visual Studio中没有改变任何默认设置，在屏幕右上方就可以找到Solution Explorer。如果找不到它，则可以进入View菜单并选择Solution Explorer。

解决方案是用一个扩展名为.sln的文件来描述的，在这个示例中，它是ConsoleApp1.sln。解决方案文件是一个文本文件，它包含解决方案中包含的所有项目的信息，以及可用于所有包含项目的全局项。

根据构建环境，C#项目是用一个扩展名为.csproj的文件或.xproj文件和project.json来描述的，project.json文件可以在Solution Explorer中直接打开。为了在Visual Studio中编辑.csproj文件，需要先卸载这个项目，可以单击项目名称并在上下文菜单中选择Unload Project命令来进行卸载。项目卸载之后，在上下文菜单中选择Edit ConsoleApp1.csproj，就可以直接访问XML代码了。

**显示隐藏文件**

默认情况下，Solution Explorer隐藏了一些文件。单击Solution Explorer工具栏中的Show All Files按钮，可以显示所有隐藏的文件。例如，bin和obj子文件夹存放了编译的文件和中间文件。obj子文件夹存放各种临时的或中间文件；bin子文件夹存放已编译的程序集。

##### 将项目添加到一个解决方案中

下面各节将介绍Visual Studio如何处理Windows桌面应用程序和控制台应用程序。最终会创建一个名为BasicForm的Windows项目，将它添加到当前的解决方案ConsoleApp1中。

**注意：** 创建BasicForm项目，得到的解决方案将包含一个WPF应用程序和一个控制台应用程序。这种情况并不多见，更有可能的是解决方案包含一个应用程序和许多类库。这么做只是为了展示更多的代码。不过，有时需要创建这样的解决方案，例如，编写一个既可以运行为WPF应用程序、又可以运行为命令行实用工具的实用程序。

创建新项目的方式有几种。一种方式是在File菜单中选择New | Project（前面就是这么做的），或者在File菜单中选择Add | New Project。选择New Project命令将打开熟悉的Add New Project对话框，如图17-10所示。不过，此时Visual Studio会在已有ConsoleApp1项目所在的解决方案中创建新项目。

如果选择该选项，就会添加一个新项目，因此ConsoleApp1解决方案现在包含一个控制台应用程序和一个WPF应用程序。

**注意：** Visual Studio支持语言独立性，所以新项目并不一定是C#项目。将C#项目、Visual Basic项目和C++项目放在同一个解决方案中是完全可行的。但是，本书的主题是C#，所以创建C#项目。

当然，这意味着ConsoleApp1不再适合作为解决方案的名称。要改变名称，可以右击解决方案的名称，并选择上下文菜单中的Rename命令。将新的解决方案命名为DemoSolution。Solution Explorer窗口现在如图17-11所示。

可以看出，Visual Studio自动为新添加的WPF项目引用一些额外的基类，这些基类对于WPF功能非常重要。

注意，在Windows Explorer中，解决方案文件的名称已经改为DemoSolution.sln。通常，如果想重命名任何文件，Solution Explorer窗口是最合适的选择，因为Visual Studio会自动更新它在其他项目文件中的引用。如果只使用Windows Explorer来重命名文件，可能会破坏解决方案，因为Visual Studio不能定位需要读入IDE的所有文件。因此需要手动编辑项目和解决方案文件，来更新文件引用。

##### 设置启动项目

请记住，如果一个解决方案有多个项目，就需要配置哪个项目作为启动项目来运行。也可以配置多个同时启动的项目。这有多种方式。在Solution Explorer中选择一个项目之后，上下文菜单会提供Set as Startup Project选项，它允许一次设置一个启动项目。也可以使用上下文菜单中的Debug | Start new instance命令，在一个项目后启动另一个项目。

要同时启动多个项目，右击Solution Explorer中的解决方案，并选择上下文菜单中的Set Startup Projects，打开如图17-12所示的对话框。当选择Multiple startup projects之后，可以定义启动哪些项目。

##### 浏览类型和成员

当Visual Studio初次创建WPF应用程序时，该应用程序比控制台应用程序要多包含一些初始代码。这是因为创建窗口是一个较复杂的过程。第34章详细讨论WPF应用程序的代码。现在，查看MainWindow.xaml中的XAML代码，和MainWindow.xaml.cs中的C#代码。这里也有一些隐藏的C#代码。遍历Solution Explorer，可以看到更多细节。