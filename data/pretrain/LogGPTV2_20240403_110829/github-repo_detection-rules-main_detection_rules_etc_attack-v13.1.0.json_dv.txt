{"created": "2020-02-11T18:45:34.293Z", "created_by_ref": "", "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) for use in [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098).(Citation: InsiderThreat ChangeNTLM July 2017)\n\nDCSync functionality has been included in the \"lsadump\" module in [Mimikatz](https://attack.mitre.org/software/S0002).(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)", "external_references": [{"external_id": "T1003.006", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1003/006"}, {"description": "Microsoft. (2017, December 1). MS-DRSR Directory Replication Service (DRS) Remote Protocol. Retrieved December 4, 2017.", "source_name": "Microsoft DRSR Dec 2017", "url": "https://msdn.microsoft.com/library/cc228086.aspx"}, {"description": "Microsoft. (n.d.). IDL_DRSGetNCChanges (Opnum 3). Retrieved December 4, 2017.", "source_name": "Microsoft GetNCCChanges", "url": "https://msdn.microsoft.com/library/dd207691.aspx"}, {"description": "SambaWiki. (n.d.). DRSUAPI. Retrieved December 4, 2017.", "source_name": "Samba DRSUAPI", "url": "https://wiki.samba.org/index.php/DRSUAPI"}, {"description": "Wine API. (n.d.). samlib.dll. Retrieved December 4, 2017.", "source_name": "Wine API samlib.dll", "url": "https://source.winehq.org/WineAPI/samlib.html"}, {"description": "Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved August 7, 2017.", "source_name": "ADSecurity Mimikatz DCSync", "url": "https://adsecurity.org/?p=1729"}, {"description": "Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved August 7, 2017.", "source_name": "Harmj0y Mimikatz and DCSync", "url": "http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/"}, {"description": "Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.", "source_name": "InsiderThreat ChangeNTLM July 2017", "url": "https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM"}, {"description": "Deply, B., Le Toux, V. (2016, June 5). module ~ lsadump. Retrieved August 7, 2017.", "source_name": "GitHub Mimikatz lsadump Module", "url": "https://github.com/gentilkiwi/mimikatz/wiki/module-~-lsadump"}, {"description": "Microsoft. (2017, December 1). MS-NRPC - Netlogon Remote Protocol. Retrieved December 6, 2017.", "source_name": "Microsoft NRPC Dec 2017", "url": "https://msdn.microsoft.com/library/cc237008.aspx"}, {"description": "Microsoft. (n.d.). MS-SAMR Security Account Manager (SAM) Remote Protocol (Client-to-Server) - Transport. Retrieved December 4, 2017.", "source_name": "Microsoft SAMR", "url": "https://msdn.microsoft.com/library/cc245496.aspx"}, {"description": "Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved December 4, 2017.", "source_name": "AdSecurity DCSync Sept 2015", "url": "https://adsecurity.org/?p=1729"}, {"description": "Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved December 4, 2017.", "source_name": "Harmj0y DCSync Sept 2015", "url": "http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}], "modified": "2021-04-22T20:20:14.595Z", "name": "DCSync", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["ExtraHop", "Vincent Le Toux"], "x_mitre_data_sources": ["Network Traffic: Network Traffic Flow", "Network Traffic: Network Traffic Content", "Active Directory: Active Directory Object Access"], "x_mitre_detection": "Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) Also monitor for network protocols(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft NRPC Dec 2017) and other replication requests(Citation: Microsoft SAMR) from IPs not associated with known domain controllers.(Citation: AdSecurity DCSync Sept 2015)\n\nNote: Domain controllers may not log replication requests originating from the default domain controller account.(Citation: Harmj0y DCSync Sept 2015)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.0"}
{"created": "2017-05-31T21:31:37.450Z", "created_by_ref": "", "description": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. (Citation: MSDN System Time)(Citation: Technet Windows Time Service)\n\nSystem time information may be gathered in a number of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz.(Citation: Technet Windows Time Service)\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show clock detail` can be used to see the current time configuration.(Citation: show_clock_detail_cisco_cmd)\n\nThis information could be useful for performing other techniques, such as executing a file with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)(Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting (i.e. [System Location Discovery](https://attack.mitre.org/techniques/T1614)). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.(Citation: AnyRun TimeBomb)", "external_references": [{"external_id": "T1124", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1124"}, {"description": "Cisco. (2023, March 6). show clock detail - Cisco IOS Security Command Reference: Commands S to Z . Retrieved July 13, 2022.", "source_name": "show_clock_detail_cisco_cmd", "url": "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/security/s1/sec-s1-cr-book/sec-cr-s2.html#wp1896741674"}, {"description": "Malicious History. (2020, September 17). Time Bombs: Malware With Delayed Execution. Retrieved April 22, 2021.", "source_name": "AnyRun TimeBomb", "url": "https://any.run/cybersecurity-blog/time-bombs-malware-with-delayed-execution/"}, {"description": "Mathers, B. (2016, September 30). Windows Time Service Tools and Settings. Retrieved November 25, 2016.", "source_name": "Technet Windows Time Service", "url": "https://technet.microsoft.com/windows-server-docs/identity/ad-ds/get-started/windows-time-service/windows-time-service-tools-and-settings"}, {"description": "Microsoft. (n.d.). System Time. Retrieved November 25, 2016.", "source_name": "MSDN System Time", "url": "https://msdn.microsoft.com/ms724961.aspx"}, {"description": "Rivner, U., Schwartz, E. (2012). They\u2019re Inside\u2026 Now What?. Retrieved November 25, 2016.", "source_name": "RSA EU12 They're Inside", "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-209_rivner_schwartz.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "discovery"}], "modified": "2023-04-12T23:37:22.508Z", "name": "System Time Discovery", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_contributors": ["FIRST.ORG's Cyber Threat Intelligence SIG", "Austin Clark, @c2defense"], "x_mitre_data_sources": ["Process: Process Creation", "Command: Command Execution", "Process: OS API Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.\n\nFor network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "Network"], "x_mitre_version": "1.3"}, {"created": "2019-11-27T13:52:45.853Z", "created_by_ref": "", "description": "Adversaries may abuse the [at](https://attack.mitre.org/software/S0110) utility to perform task scheduling for initial or recurring execution of malicious code. The [at](https://attack.mitre.org/software/S0110) utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)'s [schtasks](https://attack.mitre.org/software/S0111) in Windows environments, using [at](https://attack.mitre.org/software/S0110) requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.\n\nOn Linux and macOS, [at](https://attack.mitre.org/software/S0110) may be invoked by the superuser as well as any users added to the at.allow file. If the at.allow file does not exist, the at.deny file is checked. Every username not listed in at.deny is allowed to invoke [at](https://attack.mitre.org/software/S0110). If the at.deny exists and is empty, global use of [at](https://attack.mitre.org/software/S0110) is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use [at](https://attack.mitre.org/software/S0110).(Citation: Linux at)\n\nAdversaries may use [at](https://attack.mitre.org/software/S0110) to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). [at](https://attack.mitre.org/software/S0110) can also be abused to conduct remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under the context of a specified account (such as SYSTEM).\n\nIn Linux environments, adversaries may also abuse [at](https://attack.mitre.org/software/S0110) to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110) may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via sudo.(Citation: GTFObins at)", "external_references": [{"external_id": "T1053.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1053/002"}, {"description": "Craig Rowland. (2019, July 25). Getting an Attacker IP Address from a Malicious Linux At Job. Retrieved October 15, 2021.", "source_name": "rowland linux at 2019", "url": "https://www.linkedin.com/pulse/getting-attacker-ip-address-from-malicious-linux-job-craig-rowland/"}, {"description": "Emilio Pinna, Andrea Cardaci. (n.d.). gtfobins at. Retrieved September 28, 2021.", "source_name": "GTFObins at", "url": "https://gtfobins.github.io/gtfobins/at/"}, {"description": "IEEE/The Open Group. (2017). at(1p) \u2014 Linux manual page. Retrieved February 25, 2022.", "source_name": "Linux at", "url": "https://man7.org/linux/man-pages/man1/at.1p.html"}, {"description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.", "source_name": "Twitter Leoloobeek Scheduled Task", "url": "https://twitter.com/leoloobeek/status/939248813465853953"}, {"description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.", "source_name": "Microsoft Scheduled Task Events Win10", "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events"}, {"description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.", "source_name": "TechNet Scheduled Task Events", "url": "https://technet.microsoft.com/library/dd315590.aspx"}, {"description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.", "source_name": "TechNet Autoruns", "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902"}, {"description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.", "source_name": "TechNet Forum Scheduled Task Operational Setting", "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}, {"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}], "modified": "2022-04-18T20:12:04.110Z", "name": "At", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Scheduled Job: Scheduled Job Creation", "Process: Process Creation", "File: File Modification", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows. (Citation: Twitter Leoloobeek Scheduled Task) If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.\n\nConfigure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service. (Citation: TechNet Forum Scheduled Task Operational Setting) Several events will then be logged on scheduled task activity, including: (Citation: TechNet Scheduled Task Events)(Citation: Microsoft Scheduled Task Events Win10)\n\n* Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered\n* Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated\n* Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted\n* Event ID 4698 on Windows 10, Server 2016 - Scheduled task created\n* Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled\n* Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. (Citation: TechNet Autoruns)\n\nRemote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001), so additional logging may need to be configured to gather the appropriate data.\n\nIn Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. \n\nReview all jobs using the atq command and ensure IP addresses stored in the SSH_CONNECTION and SSH_CLIENT variables, machines that created the jobs, are trusted hosts. All [at](https://attack.mitre.org/software/S0110) jobs are stored in /var/spool/cron/atjobs/.(Citation: rowland linux at 2019)\n\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for [Command and Control](https://attack.mitre.org/tactics/TA0011), learning details about the environment through [Discovery](https://attack.mitre.org/tactics/TA0007), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "User"], "x_mitre_platforms": ["Windows", "Linux", "macOS"], "x_mitre_remote_support": true, "x_mitre_version": "2.0"}, {"created": "2017-05-31T21:30:36.550Z", "created_by_ref": "", "description": "Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with [New Service](https://attack.mitre.org/techniques/T1050) and [Modify Existing Service](https://attack.mitre.org/techniques/T1031) during service persistence or privilege escalation.", "external_references": [{"external_id": "T1035", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1035"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "modified": "2020-03-10T18:34:39.665Z", "name": "Service Execution", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_detection": "Changes to service Registry entries and command-line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool [PsExec](https://attack.mitre.org/software/S0029).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "SYSTEM"], "x_mitre_platforms": ["Windows"], "x_mitre_remote_support": true, "x_mitre_version": "1.0"}
{"created": "2020-01-14T01:26:08.145Z", "created_by_ref": "", "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's AddressOfEntryPoint before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ", "external_references": [{"external_id": "T1055.001", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1055/001"}, {"description": "Aliz Hammond. (2019, August 15). Hiding Malicious Code with \"Module Stomping\": Part 1. Retrieved July 14, 2022.", "source_name": "Hiding Malicious Code with Module Stomping", "url": "https://blog.f-secure.com/hiding-malicious-code-with-module-stomping/"}, {"description": "Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.", "source_name": "Elastic HuntingNMemory June 2017", "url": "https://www.endgame.com/blog/technical-blog/hunting-memory"}, {"description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.", "source_name": "Elastic Process Injection July 2017", "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"}, {"description": "Red Teaming Experiments. (n.d.). Module Stomping for Shellcode Injection. Retrieved July 14, 2022.", "source_name": "Module Stomping for Shellcode Injection", "url": "https://www.ired.team/offensive-security/code-injection-process-injection/modulestomping-dll-hollowing-shellcode-injection"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}, {"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}], "modified": "2022-10-18T21:07:23.748Z", "name": "Dynamic-link Library Injection", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Boominathan Sundaram"], "x_mitre_data_sources": ["Process: Process Modification", "Process: Process Access", "Process: OS API Execution", "Process: Process Metadata", "Module: Module Load"], "x_mitre_defense_bypassed": ["Application control", "Anti-virus"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.(Citation: Elastic Process Injection July 2017)\n\nMonitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.2"}, {"created": "2017-05-31T21:31:06.512Z", "created_by_ref": "", "description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. \n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nAdministrator permissions are required to use PowerShell to connect to remote systems.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  PowerSploit, (Citation: Powersploit) and PSAttack. (Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015) (Citation: Microsoft PSfromCsharp APR 2014)", "external_references": [{"external_id": "T1086", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1086"}, {"description": "Microsoft. (n.d.). Windows PowerShell Scripting. Retrieved April 28, 2016.", "source_name": "TechNet PowerShell", "url": "https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx"}, {"description": "PowerSploit. (n.d.). Retrieved December 4, 2014.", "source_name": "Powersploit", "url": "https://github.com/mattifestation/PowerSploit"}, {"description": "Haight, J. (2016, April 21). PS>Attack. Retrieved June 1, 2016.", "source_name": "Github PSAttack", "url": "https://github.com/jaredhaight/PSAttack"}, {"description": "Warner, J.. (2015, January 6). Inexorable PowerShell \u2013 A Red Teamer\u2019s Tale of Overcoming Simple AppLocker Policies. Retrieved December 8, 2018.", "source_name": "Sixdub PowerPick Jan 2016", "url": "http://www.sixdub.net/?p=367"}, {"description": "Christensen, L.. (2015, December 28). The Evolution of Offensive PowerShell Invocation. Retrieved December 8, 2018.", "source_name": "SilentBreak Offensive PS Dec 2015", "url": "https://silentbreaksecurity.com/powershell-jobs-without-powershell-exe/"}, {"description": "Babinec, K. (2014, April 28). Executing PowerShell scripts from C#. Retrieved April 22, 2019.", "source_name": "Microsoft PSfromCsharp APR 2014", "url": "https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/"}, {"description": "Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.", "source_name": "Malware Archaeology PowerShell Cheat Sheet", "url": "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf"}, {"description": "Dunwoody, M. (2016, February 11). GREATER VISIBILITY THROUGH POWERSHELL LOGGING. Retrieved February 16, 2016.", "source_name": "FireEye PowerShell Logging 2016", "url": "https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "modified": "2020-03-09T13:51:06.334Z", "name": "PowerShell", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_contributors": ["Praetorian"], "x_mitre_detection": "If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.\n\nMonitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)\n\nIt is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). (Citation: Malware Archaeology PowerShell Cheat Sheet) PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features. (Citation: FireEye PowerShell Logging 2016) An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User", "Administrator"], "x_mitre_platforms": ["Windows"], "x_mitre_remote_support": true, "x_mitre_version": "1.1"}
{"created": "2020-10-01T02:17:46.086Z", "created_by_ref": "", "description": "Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.(Citation: Exploit Database)(Citation: TempertonDarkHotel)(Citation: NationsBuying)\n\nIn addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals.(Citation: PegasusCitizenLab)(Citation: Wired SandCat Oct 2019) In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).(Citation: TempertonDarkHotel)\n\nAn adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).", "external_references": [{"external_id": "T1588.005", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1588/005"}, {"description": "Offensive Security. (n.d.). Exploit Database. Retrieved October 15, 2020.", "source_name": "Exploit Database", "url": "https://www.exploit-db.com/"}, {"description": "Temperton, J. (2015, August 10). Hacking Team zero-day used in new Darkhotel attacks. Retrieved March 9, 2017.", "source_name": "TempertonDarkHotel", "url": "https://www.wired.co.uk/article/darkhotel-hacking-team-cyber-espionage"}, {"description": "Nicole Perlroth and David E. Sanger. (2013, July 12). Nations Buying as Hackers Sell Flaws in Computer Code. Retrieved March 9, 2017.", "source_name": "NationsBuying", "url": "https://www.nytimes.com/2013/07/14/world/europe/nations-buying-as-hackers-sell-computer-flaws.html"}, {"description": "Bill Marczak and John Scott-Railton. (2016, August 24). The Million Dollar Dissident: NSO Group\u2019s iPhone Zero-Days used against a UAE Human Rights Defender. Retrieved December 12, 2016.", "source_name": "PegasusCitizenLab", "url": "https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/"}, {"description": "Zetter, K. (2019, October 3). Researchers Say They Uncovered Uzbekistan Hacking Operations Due to Spectacularly Bad OPSEC. Retrieved October 15, 2020.", "source_name": "Wired SandCat Oct 2019", "url": "https://www.vice.com/en/article/3kx5y3/uzbekistan-hacking-operations-uncovered-due-to-spectacularly-bad-opsec"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "resource-development"}], "modified": "2021-04-15T03:14:01.255Z", "name": "Exploits", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the use of exploits (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["PRE"], "x_mitre_version": "1.0"}
{"created": "2020-02-11T19:01:56.887Z", "created_by_ref": "", "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).\n\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.", "external_references": [{"external_id": "T1556", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1556"}, {"description": "Bialek, J. (2013, September 15). Intercepting Password Changes With Function Hooking. Retrieved November 21, 2017.", "source_name": "Clymb3r Function Hook Passwords Sept 2013", "url": "https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/"}, {"description": "Chris Ross. (2018, October 17). Persistent Credential Theft with Authorization Plugins. Retrieved April 22, 2021.", "source_name": "Xorrior Authorization Plugins", "url": "https://xorrior.com/persistent-credential-theft/"}, {"description": "Dell SecureWorks. (2015, January 12). Skeleton Key Malware Analysis. Retrieved April 8, 2019.", "source_name": "Dell Skeleton", "url": "https://www.secureworks.com/research/skeleton-key-malware-analysis"}, {"description": "Metcalf, S. (2015, November 22). Dump Clear-Text Passwords for All Admins in the Domain Using Mimikatz DCSync. Retrieved November 15, 2021.", "source_name": "dump_pwd_dcsync", "url": "https://adsecurity.org/?p=2053"}, {"description": "Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.", "source_name": "TechNet Audit Policy", "url": "https://technet.microsoft.com/en-us/library/dn487457.aspx"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}, {"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2023-04-11T03:17:32.211Z", "name": "Modify Authentication Process", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_contributors": ["Chris Ross @xorrior"], "x_mitre_data_sources": ["Module: Module Load", "Windows Registry: Windows Registry Key Modification", "Application Log: Application Log Content", "File: File Modification", "Active Directory: Active Directory Object Modification", "User Account: User Account Authentication", "File: File Creation", "User Account: User Account Modification", "Windows Registry: Windows Registry Key Creation", "Logon Session: Logon Session Creation", "Process: Process Access", "Process: OS API Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference. \n\nPassword filters will also show up as an autorun and loaded DLL in lsass.exe.(Citation: Clymb3r Function Hook Passwords Sept 2013)\n\nMonitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).(Citation: Dell Skeleton) \n\nMonitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.\n\nMonitor for suspicious additions to the /Library/Security/SecurityAgentPlugins directory.(Citation: Xorrior Authorization Plugins)\n\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services. (Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\nMonitor property changes in Group Policy that manage authentication mechanisms (i.e. [Group Policy Modification](https://attack.mitre.org/techniques/T1484/001)). The Store passwords using reversible encryption configuration should be set to Disabled. Additionally, monitor and/or block suspicious command/script execution of -AllowReversiblePasswordEncryption $true, Set-ADUser and Set-ADAccountControl. Finally, monitor Fine-Grained Password Policies and regularly audit user accounts and group settings.(Citation: dump_pwd_dcsync)\n", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "Linux", "macOS", "Network", "Azure AD", "Google Workspace", "IaaS", "Office 365", "SaaS"], "x_mitre_version": "2.3"}, {"created": "2020-02-11T19:01:15.930Z", "created_by_ref": "", "description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001),  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n", "external_references": [{"external_id": "T1056.004", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1056/004"}, {"description": "Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I. Retrieved December 18, 2017.", "source_name": "Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017", "url": "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=TrojanSpy:Win32/Ursnif.gen!I&threatId=-2147336918"}, {"description": "Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.", "source_name": "Microsoft Hook Overview", "url": "https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx"}, {"description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.", "source_name": "Elastic Process Injection July 2017", "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"}, {"description": "Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks. Retrieved December 12, 2017.", "source_name": "Adlice Software IAT Hooks Oct 2014", "url": "https://www.adlice.com/userland-rootkits-part-1-iat-hooks/"}, {"description": "Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User Mode. Retrieved December 20, 2017.", "source_name": "MWRInfoSecurity Dynamic Hooking 2015", "url": "https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/"}, {"description": "Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved December 12, 2017.", "source_name": "HighTech Bridge Inline Hooking Sept 2011", "url": "https://www.exploit-db.com/docs/17802.pdf"}, {"description": "Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.", "source_name": "Volatility Detecting Hooks Sept 2012", "url": "https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html"}, {"description": "Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.", "source_name": "PreKageo Winhook Jul 2011", "url": "https://github.com/prekageo/winhook"}, {"description": "Satiro, J. (2011, September 14). GetHooks. Retrieved December 12, 2017.", "source_name": "Jay GetHooks Sept 2011", "url": "https://github.com/jay/gethooks"}, {"description": "Felici, M. (2006, December 6). Any application-defined hook procedure on my machine?. Retrieved December 12, 2017.", "source_name": "Zairon Hooking Dec 2006", "url": "https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/"}, {"description": "Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense against user-land. Retrieved December 12, 2017.", "source_name": "EyeofRa Detecting Hooking June 2017", "url": "https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/"}, {"description": "GMER. (n.d.). GMER. Retrieved December 12, 2017.", "source_name": "GMER Rootkits", "url": "http://www.gmer.net/"}, {"description": "Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved December 12, 2017.", "source_name": "Microsoft Process Snapshot", "url": "https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx"}, {"description": "Stack Exchange - Security. (2012, July 31). What are the methods to find hooked functions and APIs?. Retrieved December 12, 2017.", "source_name": "StackExchange Hooks Jul 2012", "url": "https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "collection"}, {"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}], "modified": "2020-11-10T18:29:31.138Z", "name": "Credential API Hooking", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Process: OS API Execution", "Process: Process Metadata"], "x_mitre_detection": "Monitor for calls to the `SetWindowsHookEx` and `SetWinEventHook` functions, which install a hook procedure.(Citation: Microsoft Hook Overview)(Citation: Volatility Detecting Hooks Sept 2012) Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools(Citation: Volatility Detecting Hooks Sept 2012)(Citation: PreKageo Winhook Jul 2011)(Citation: Jay GetHooks Sept 2011) or by programmatically examining internal kernel structures.(Citation: Zairon Hooking Dec 2006)(Citation: EyeofRa Detecting Hooking June 2017)\n\nRootkits detectors(Citation: GMER Rootkits) can also be used to monitor for various types of hooking activity.\n\nVerify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes(Citation: Microsoft Process Snapshot) to compare the in-memory IAT to the real addresses of the referenced functions.(Citation: StackExchange Hooks Jul 2012)(Citation: Adlice Software IAT Hooks Oct 2014)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "SYSTEM"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.0"}
{"created": "2019-04-12T18:28:15.451Z", "created_by_ref": "", "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.(Citation: Symantec Chernobyl W95.CIH) Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.\n\nIn general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.(Citation: dhs_threat_to_net_devices)(Citation: cisa_malware_orgs_ukraine) Depending on the device, this attack may also result in [Data Destruction](https://attack.mitre.org/techniques/T1485). ", "external_references": [{"external_id": "T1495", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1495"}, {"description": "CISA. (2022, April 28). Alert (AA22-057A) Update: Destructive Malware Targeting Organizations in Ukraine. Retrieved July 29, 2022.", "source_name": "cisa_malware_orgs_ukraine", "url": "https://www.cisa.gov/uscert/ncas/alerts/aa22-057a"}, {"description": "U.S. Department of Homeland Security. (2016, August 30). The Increasing Threat to Network Infrastructure Devices and Recommended Mitigations. Retrieved July 29, 2022.", "source_name": "dhs_threat_to_net_devices", "url": "https://cyber.dhs.gov/assets/report/ar-16-20173.pdf"}, {"description": "Upham, K. (2014, March). Going Deep into the BIOS with MITRE Firmware Security Research. Retrieved January 5, 2016.", "source_name": "MITRE Trustworthy Firmware Measurement", "url": "http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research"}, {"description": "Yamamura, M. (2002, April 25). W95.CIH. Retrieved April 12, 2019.", "source_name": "Symantec Chernobyl W95.CIH", "url": "https://web.archive.org/web/20190508170055/https://www.symantec.com/security-center/writeup/2000-122010-2655-99"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "impact"}], "modified": "2022-08-31T17:30:05.440Z", "name": "Firmware Corruption", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Firmware: Firmware Modification"], "x_mitre_deprecated": false, "x_mitre_detection": "System firmware manipulation may be detected.(Citation: MITRE Trustworthy Firmware Measurement) Log attempts to read/write to BIOS and compare against known patching behavior.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_impact_type": ["Availability"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows", "Network"], "x_mitre_version": "1.2"}, {"created": "2019-04-02T13:54:43.136Z", "created_by_ref": "", "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) Furthermore, adversaries may disable recovery notifications, then corrupt backups.(Citation: disable_notif_synology_ransom)\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* vssadmin.exe can be used to delete all volume shadow copies on a system - vssadmin.exe delete shadows /all /quiet\n* [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies - wmic shadowcopy delete\n* wbadmin.exe can be used to delete the Windows Backup Catalog - wbadmin.exe delete catalog -quiet\n* bcdedit.exe can be used to disable automatic Windows recovery features by modifying boot configuration data - bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no\n* REAgentC.exe can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n\nOn network devices, adversaries may leverage [Disk Wipe](https://attack.mitre.org/techniques/T1561) to delete backup firmware images and reformat the file system, then [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nAdversaries may also delete \u201conline\u201d backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services.(Citation: ZDNet Ransomware Backups 2020) In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.(Citation: Dark Reading Code Spaces Cyber Attack)(Citation: Rhino Security Labs AWS S3 Ransomware)", "external_references": [{"external_id": "T1490", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1490"}, {"description": " Brian Prince. (2014, June 20). Code Hosting Service Shuts Down After Cyber Attack. Retrieved March 21, 2023.", "source_name": "Dark Reading Code Spaces Cyber Attack", "url": "https://www.darkreading.com/attacks-breaches/code-hosting-service-shuts-down-after-cyber-attack"}, {"description": "Berry, A., Homan, J., and Eitzman, R. (2017, May 23). WannaCry Malware Profile. Retrieved March 15, 2019.", "source_name": "FireEye WannaCry 2017", "url": "https://www.fireeye.com/blog/threat-research/2017/05/wannacry-malware-profile.html"}, {"description": "Mercer, W. and Rascagneres, P. (2018, February 12). Olympic Destroyer Takes Aim At Winter Olympics. Retrieved March 14, 2019.", "source_name": "Talos Olympic Destroyer 2018", "url": "https://blog.talosintelligence.com/2018/02/olympic-destroyer.html"}, {"description": "Spencer Gietzen. (n.d.). AWS Simple Storage Service S3 Ransomware Part 2: Prevention and Defense. Retrieved March 21, 2023.", "source_name": "Rhino Security Labs AWS S3 Ransomware", "url": "https://rhinosecuritylabs.com/aws/s3-ransomware-part-2-prevention-and-defense/"}, {"description": "Steve Ranger. (2020, February 27). Ransomware victims thought their backups were safe. They were wrong. Retrieved March 21, 2023.", "source_name": "ZDNet Ransomware Backups 2020", "url": "https://www.zdnet.com/article/ransomware-victims-thought-their-backups-were-safe-they-were-wrong/"}, {"description": "TheDFIRReport. (2022, March 1). Disabling notifications on Synology servers before ransom. Retrieved October 19, 2022.", "source_name": "disable_notif_synology_ransom", "url": "https://twitter.com/TheDFIRReport/status/1498657590259109894"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "impact"}], "modified": "2023-05-04T18:05:57.725Z", "name": "Inhibit System Recovery", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_contributors": ["Yonatan Gotlib, Deep Instinct", "Austin Clark, @c2defense", "Pallavi Sivakumaran, WithSecure"], "x_mitre_data_sources": ["Process: Process Creation", "Command: Command Execution", "Snapshot: Snapshot Deletion", "Windows Registry: Windows Registry Key Modification", "Cloud Storage: Cloud Storage Deletion", "Service: Service Metadata", "File: File Deletion"], "x_mitre_deprecated": false, "x_mitre_detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in inhibiting system recovery, such as vssadmin, wbadmin, bcdedit and REAgentC. The Windows event logs, ex. Event ID 524 indicating a system catalog was deleted, may contain entries associated with suspicious activity.\n\nMonitor the status of services involved in system recovery. Monitor the registry for changes associated with system recovery features (ex: the creation of HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\PreviousVersions\\DisableLocalPage).\n\nFor network infrastructure devices, collect AAA logging to monitor for `erase`, `format`, and `reload` commands being run in succession.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_impact_type": ["Availability"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "macOS", "Linux", "Network", "IaaS"], "x_mitre_version": "1.2"}, {"created": "2020-01-24T14:26:51.207Z", "created_by_ref": "", "description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.(Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh.\n\nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence)", "external_references": [{"external_id": "T1546.007", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1546/007"}, {"description": "Demaske, M. (2016, September 23). USING NETSHELL TO EXECUTE EVIL DLLS AND PERSIST ON A HOST. Retrieved April 8, 2017.", "source_name": "Demaske Netsh Persistence", "url": "https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html"}, {"description": "Microsoft. (n.d.). Using Netsh. Retrieved February 13, 2017.", "source_name": "TechNet Netsh", "url": "https://technet.microsoft.com/library/bb490939.aspx"}, {"description": "Smeets, M. (2016, September 26). NetshHelperBeacon. Retrieved February 13, 2017.", "source_name": "Github Netsh Helper CS Beacon", "url": "https://github.com/outflankbv/NetshHelperBeacon"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2022-04-20T17:09:17.363Z", "name": "Netsh Helper DLL", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Matthew Demaske, Adaptforward"], "x_mitre_data_sources": ["Module: Module Load", "Process: Process Creation", "Windows Registry: Windows Registry Key Modification", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the HKLM\\SOFTWARE\\Microsoft\\Netsh registry key for any new or suspicious entries that do not correlate with known system files or benign software.(Citation: Demaske Netsh Persistence)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "SYSTEM"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.0"}
{"created": "2020-03-02T19:24:00.951Z", "created_by_ref": "", "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\n\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.", "external_references": [{"external_id": "T1566.003", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1566/003"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "initial-access"}], "modified": "2023-03-30T21:01:50.401Z", "name": "Spearphishing via Service", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_data_sources": ["Network Traffic: Network Traffic Content", "Application Log: Application Log Content", "Network Traffic: Network Traffic Flow"], "x_mitre_detection": "Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. \n\nAnti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203) or usage of malicious scripts.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "2.0"}, {"created": "2020-03-14T23:08:20.244Z", "created_by_ref": "", "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.", "external_references": [{"external_id": "T1090.001", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1090/001"}, {"description": "Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.", "source_name": "Trend Micro APT Attack Tools", "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/"}, {"description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "source_name": "University of Birmingham C2", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "modified": "2020-03-15T00:46:26.598Z", "name": "Internal Proxy", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Network Traffic: Network Connection Creation", "Network Traffic: Network Traffic Content", "Network Traffic: Network Traffic Flow"], "x_mitre_detection": "Analyze network data for uncommon data flows between clients that should not or often do not communicate with one another. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.0"}
{"created": "2018-04-18T17:59:24.739Z", "created_by_ref": "", "description": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.(Citation: LOLBAS Project) This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)", "external_references": [{"external_id": "T1216", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1216"}, {"description": "Moe, O. (2018, March 1). Ultimate AppLocker Bypass List. Retrieved April 10, 2018.", "source_name": "GitHub Ultimate AppLocker Bypass List", "url": "https://github.com/api0cradle/UltimateAppLockerByPassList"}, {"description": "Oddvar Moe et al. (2022, February).  Living Off The Land Binaries, Scripts and Libraries. Retrieved March 7, 2022.", "source_name": "LOLBAS Project", "url": "https://github.com/LOLBAS-Project/LOLBAS#criteria"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2022-04-18T14:43:46.045Z", "name": "System Script Proxy Execution", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Praetorian", "Wes Hurd"], "x_mitre_data_sources": ["Script: Script Execution", "Command: Command Execution", "Process: Process Creation"], "x_mitre_defense_bypassed": ["Application control", "Digital Certificate Validation"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows"], "x_mitre_version": "2.0"}, {"created": "2017-05-31T21:31:10.314Z", "created_by_ref": "", "description": "Adversaries may communicate using a custom command and control protocol instead of encapsulating commands/data in an existing [Application Layer Protocol](https://attack.mitre.org/techniques/T1071). Implementations include mimicking well-known protocols or developing custom protocols (including raw sockets) on top of fundamental protocols provided by TCP/IP/another standard network stack.", "external_references": [{"external_id": "T1094", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1094"}, {"description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "source_name": "University of Birmingham C2", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "modified": "2020-03-20T19:03:04.295Z", "name": "Custom Command and Control Protocol", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_contributors": ["Ryan Becwar"], "x_mitre_detection": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nMonitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.0"}
{"created": "2020-03-14T22:24:21.841Z", "created_by_ref": "", "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).", "external_references": [{"external_id": "T1102.001", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1102/001"}, {"description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "source_name": "University of Birmingham C2", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "modified": "2020-03-26T23:12:30.499Z", "name": "Dead Drop Resolver", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Network Traffic: Network Traffic Content", "Network Traffic: Network Traffic Flow"], "x_mitre_detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.0"}
{"created": "2017-05-31T21:31:27.510Z", "created_by_ref": "", "description": "InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) InstallUtil is located in the .NET directories on a Windows system: C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe. InstallUtil.exe is digitally signed by Microsoft.\n\nAdversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute [System.ComponentModel.RunInstaller(true)]. (Citation: LOLBAS Installutil)", "external_references": [{"external_id": "T1118", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1118"}, {"description": "Microsoft. (n.d.). Installutil.exe (Installer Tool). Retrieved July 1, 2016.", "source_name": "MSDN InstallUtil", "url": "https://msdn.microsoft.com/en-us/library/50614e95.aspx"}, {"description": "LOLBAS. (n.d.). Installutil.exe. Retrieved July 31, 2019.", "source_name": "LOLBAS Installutil", "url": "https://lolbas-project.github.io/lolbas/Binaries/Installutil/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}, {"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "modified": "2020-01-31T18:59:38.256Z", "name": "InstallUtil", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_contributors": ["Casey Smith", "Travis Smith, Tripwire"], "x_mitre_defense_bypassed": ["Process whitelisting", "Digital Certificate Validation"], "x_mitre_detection": "Use process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.2"}, {"created": "2020-03-15T00:30:25.444Z", "created_by_ref": "", "description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters. ", "external_references": [{"external_id": "T1001.001", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1001/001"}, {"description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "source_name": "University of Birmingham C2", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "modified": "2020-03-15T00:30:25.444Z", "name": "Junk Data", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Network Traffic: Network Traffic Content"], "x_mitre_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.0"}
{"created": "2020-10-02T17:08:07.742Z", "created_by_ref": "", "description": "Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.(Citation: ThreatPost Social Media Phishing) These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.", "external_references": [{"external_id": "T1598.001", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1598/001"}, {"description": "O'Donnell, L. (2020, October 20). Facebook: A Top Launching Pad For Phishing Attacks. Retrieved October 20, 2020.", "source_name": "ThreatPost Social Media Phishing", "url": "https://threatpost.com/facebook-launching-pad-phishing-attacks/160351/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "reconnaissance"}], "modified": "2021-04-15T03:43:12.843Z", "name": "Spearphishing Service", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["Robert Simmons, @MalwareUtkonos"], "x_mitre_data_sources": ["Application Log: Application Log Content", "Network Traffic: Network Traffic Content", "Network Traffic: Network Traffic Flow"], "x_mitre_detection": "Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).\n\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.\n\nDetection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["PRE"], "x_mitre_version": "1.0"}
{"created": "2017-05-31T21:30:42.657Z", "created_by_ref": "", "description": "**This technique has been deprecated. Please use [Non-Standard Port](https://attack.mitre.org/techniques/T1571) where appropriate.**\n\nAdversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n\n* TCP/UDP:135 (RPC)\n* TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)", "external_references": [{"external_id": "T1043", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1043"}, {"description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "source_name": "University of Birmingham C2", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "modified": "2022-07-22T18:51:42.238Z", "name": "Commonly Used Port", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_deprecated": true, "x_mitre_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.0"}