**作者：麦兜  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
# 前言
上周网上爆出Spring框架存在RCE漏洞，野外流传了一小段时间后，Spring官方在3月31日正式发布了漏洞信息，漏洞编号为CVE-2022-22965。本文章对该漏洞进行了复现和分析，希望能够帮助到有相关有需要的人员进一步研究。
# 一、前置知识
## 1.1 SpringMVC参数绑定
为了方便编程，SpringMVC支持将HTTP请求中的的请求参数或者请求体内容，根据`Controller`方法的参数，自动完成类型转换和赋值。之后，`Controller`方法就可以直接使用这些参数，避免了需要编写大量的代码从`HttpServletRequest`中获取请求数据以及类型转换。下面是一个简单的示例：
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.ResponseBody;
    @Controller
    public class UserController {
        @RequestMapping("/addUser")
        public @ResponseBody String addUser(User user) {
            return "OK";
        }
    }
    public class User {
        private String name;
        private Department department;
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public Department getDepartment() {
            return department;
        }
        public void setDepartment(Department department) {
            this.department = department;
        }
    }
    public class Department {
        private String name;
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
    }
当请求为`/addUser?name=test&department.name=SEC`时，`public String addUser(User
user)`中的`user`参数内容如下：
可以看到，`name`自动绑定到了`user`参数的`name`属性上，`department.name`自动绑定到了`user`参数的`department`属性的`name`属性上。
注意`department.name`这项的绑定，表明SpringMVC支持多层嵌套的参数绑定。实际上`department.name`的绑定是Spring通过如下的调用链实现的：
    User.getDepartment()
        Department.setName()
假设请求参数名为`foo.bar.baz.qux`，对应`Controller`方法入参为`Param`，则有以下的调用链：
    Param.getFoo()
        Foo.getBar()
            Bar.getBaz()
                Baz.setQux() // 注意这里为set
SpringMVC实现参数绑定的主要类和方法是`WebDataBinder.doBind(MutablePropertyValues)`。
## 1.2 Java Bean `PropertyDescriptor`
`PropertyDescriptor`是JDK自带的`java.beans`包下的类，意为属性描述器，用于获取符合Java
Bean规范的对象属性和get/set方法。下面是一个简单的例子：
    import java.beans.BeanInfo;
    import java.beans.Introspector;
    import java.beans.PropertyDescriptor;
    public class PropertyDescriptorDemo {
        public static void main(String[] args) throws Exception {
            User user = new User();
            user.setName("foo");
            BeanInfo userBeanInfo = Introspector.getBeanInfo(User.class);
            PropertyDescriptor[] descriptors = userBeanInfo.getPropertyDescriptors();
            PropertyDescriptor userNameDescriptor = null;
            for (PropertyDescriptor descriptor : descriptors) {
                if (descriptor.getName().equals("name")) {
                    userNameDescriptor = descriptor;
                    System.out.println("userNameDescriptor: " + userNameDescriptor);
                    System.out.println("Before modification: ");
                    System.out.println("user.name: " + userNameDescriptor.getReadMethod().invoke(user));
                    userNameDescriptor.getWriteMethod().invoke(user, "bar");
                }
            }
            System.out.println("After modification: ");
            System.out.println("user.name: " + userNameDescriptor.getReadMethod().invoke(user));
        }
    }
    userNameDescriptor: java.beans.PropertyDescriptor[name=name; values={expert=false; visualUpdate=false; hidden=false; enumerationValues=[Ljava.lang.Object;@5cb9f472; required=false}; propertyType=class java.lang.String; readMethod=public java.lang.String cn.jidun.User.getName(); writeMethod=public void cn.jidun.User.setName(java.lang.String)]
    Before modification: 
    user.name: foo
    After modification: 
    user.name: bar
从上述代码和输出结果可以看到，`PropertyDescriptor`实际上就是Java Bean的属性和对应get/set方法的集合。
## 1.3 Spring `BeanWrapperImpl`
在Spring中，`BeanWrapper`接口是对Bean的包装，定义了大量可以非常方便的方法对Bean的属性进行访问和设置。
`BeanWrapperImpl`类是`BeanWrapper`接口的默认实现，`BeanWrapperImpl.wrappedObject`属性即为被包装的Bean对象，`BeanWrapperImpl`对Bean的属性访问和设置最终调用的是`PropertyDescriptor`。
    import org.springframework.beans.BeanWrapper;
    import org.springframework.beans.BeanWrapperImpl;
    public class BeanWrapperDemo {
        public static void main(String[] args) throws Exception {
            User user = new User();
            user.setName("foo");
            Department department = new Department();
            department.setName("SEC");
            user.setDepartment(department);
            BeanWrapper userBeanWrapper = new BeanWrapperImpl(user);
            userBeanWrapper.setAutoGrowNestedPaths(true);
            System.out.println("userBeanWrapper: " + userBeanWrapper);
            System.out.println("Before modification: ");
            System.out.println("user.name: " + userBeanWrapper.getPropertyValue("name"));
            System.out.println("user.department.name: " + userBeanWrapper.getPropertyValue("department.name"));
            userBeanWrapper.setPropertyValue("name", "bar");
            userBeanWrapper.setPropertyValue("department.name", "IT");
            System.out.println("After modification: ");
            System.out.println("user.name: " + userBeanWrapper.getPropertyValue("name"));
            System.out.println("user.department.name: " + userBeanWrapper.getPropertyValue("department.name"));
        }
    }
    userBeanWrapper: org.springframework.beans.BeanWrapperImpl: wrapping object [cn.jidun.User@1d371b2d]
    Before modification: 
    user.name: foo
    user.department.name: SEC
    After modification: 
    user.name: bar
    user.department.name: IT
从上述代码和输出结果可以看到，通过`BeanWrapperImpl`可以很方便地访问和设置Bean的属性，比直接使用`PropertyDescriptor`要简单很多。
## 1.4 Tomcat `AccessLogValve` 和 `access_log`
Tomcat的`Valve`用于处理请求和响应，通过组合了多个`Valve`的`Pipeline`，来实现按次序对请求和响应进行一系列的处理。其中`AccessLogValve`用来记录访问日志access_log。Tomcat的`server.xml`中默认配置了`AccessLogValve`，所有部署在Tomcat中的Web应用均会执行该`Valve`，内容如下：
下面列出配置中出现的几个重要属性： \- directory：access_log文件输出目录。 \- prefix：access_log文件名前缀。 \-pattern：access_log文件内容格式。 \- suffix：access_log文件名后缀。 \-fileDateFormat：access_log文件名日期后缀，默认为`.yyyy-MM-dd`。
# 二、漏洞复现
## 2.1 复现环境
  * 操作系统：Ubuntu 18
  * JDK：11.0.14
  * Tomcat：9.0.60
  * SpringBoot：2.6.3
## 2.2 复现过程
  1. 创建一个maven项目，pom.xml内容如下：
        4.0.0
            org.springframework.boot
            spring-boot-starter-parent
            2.6.3
        com.example
        CVE-2022-22965
        0.0.1-SNAPSHOT
        war
                org.springframework.boot
                spring-boot-starter-web
                org.springframework.boot
                spring-boot-starter-tomcat
                provided
                    org.springframework.boot
                    spring-boot-maven-plugin
  1. 项目中添加如下代码，作为SpringBoot的启动类：
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.boot.builder.SpringApplicationBuilder;
    import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;