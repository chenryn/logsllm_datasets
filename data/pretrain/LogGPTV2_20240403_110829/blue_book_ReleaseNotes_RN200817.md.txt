## 200817 (AzSK v.4.12.0)
### Feature updates
*	Security scanner for Azure DevOps (ADO)/ADO Security Scanner extension:
    *   Introducing an Azure-based continuous assurance scanning solution for ADO. The scanning infrastructure of this containerized model will be hosted in an Azure resource group.
    *	Added support for creating workbook-based dashboards in Log Analytics to support alerting and monitoring for ADO resources across the organization.
    *	Introduced Get-AzSKADOInfo command to provide overall information about the ADO security scanner which includes security controls information (severity, description, rationale, baseline etc.) and host information (ADO scanner settings/configuration, logged-in ADO user context etc.).
        ```Powershell
         Get-AzSKADOInfo –InfoType ControlInfo
         Get-AzSKADOInfo –InfoType HostInfo
        ```   
    *	Added support for auto-updating the scanner module whenever a new version is available.
    *	Added 17 new security controls at organization, project, user, pipeline (build & release), service connection and agent pool scope.
* Security Verification Tests (SVTs):
    *	N/A.
* In-cluster security scans for ADB, AKS, HDI Spark:
    * N/A.
* Log Analytics:
    * N/A.
* ARM Template Checker:
    * N/A.
* Org policy/external user updates (for non-CSEO users):
    * N/A.
Note: The next few items mention features from recent releases retained for visibility in case you missed those release announcements:
*	Management of DevOps Kit-based AAD applications:
    *	You can list all the DevOps Kit-based service principals (used in continuous assurance) that are owned by you via the Get-AzSKInfo cmd marking those that are actively used for CA scans.
    ```Powershell
        Get-AzSKInfo –InfoType SPNInfo
    ```
*	Security Scanner for Azure DevOps (ADO) 
    *	You can try the scan cmdlet using:
    ```Powershell
    #ADO scan cmdlet is in a separate module called AzSK.AzureDevOps!
    Install-Module AzSK.AzureDevOps -Scope CurrentUser -AllowClobber    
    Get-AzSKAzureDevOpsSecurityStatus -OrganizationName "MicrosoftIT"`
                                        -ProjectNames "OneITVSO"`
                                        -BuildNames "build_name_here"`
                                        -ReleaseNames "release_name_here"  
    ```
*	Credential Hygiene helper cmdlets  
    * ```New-AzSKTrackedCredential``` to onboard a credential for tracking via DevOps Kit. You can set the reminder period (in days) for the credential.
    * ```Get-AzSKTrackedCredential``` to list the onboarded credential(s).
    * ```Update-AzSKTrackedCredential``` to update the credential settings and reset the last updated timestamp.
    * ```Remove-AzSKTrackedCredential``` to deboard a credential from AzSK tracking.
*	Privileged Identity Management (PIM) helper cmdlets (from last sprint)  
    * ```Set-AzSKPIMConfiguration``` (alias ```setpim```) for configuring/changing PIM settings
    * ```Get-AzSKPIMConfiguration``` (alias ```getpim```) for querying various PIM settings/status
    * Activating your PIM role is now as simple as this:
      ``` setpim -ActivateMyRole -SubscriptionId $sub -RoleName Owner -DurationInHours 8 -Justification 'ad hoc test'  ```
    * See docs [here](https://github.com/azsk/DevOpsKit-docs/blob/master/01-Subscription-Security/Readme.md#azsk-privileged-identity-management-pim-helper-cmdlets-1) for more.
*	(Preview) Security Scan for Azure Active Directory (AAD)
    *	You can scan security controls for your AAD tenant (as either an admin or even as a regular user) using the DevOps Kit AAD Security Scan module.
    *	Use following steps:
        ```Powershell
        # AAD scan cmdlets are packaged as a separate module (AzSK.AAD)
        Install-Module AzSK.AAD -Scope CurrentUser -AllowClobber
        Import-Module AzSK.AAD
        Get-AzSKAADSecurityStatusTenant    # check the tenant (admin)
        Get-AzSKAADSecurityStatusUser      # check objects you own (user)
        ``` 
    *	Caveats: 
        * Do not run these in the same PS session as AzSK. Start a new PS console.
        * Az- modules require .Net Framework v4.7.2.
        * By default, the current cmdlets will scan just 3 objects of each type (Apps/SPNs/Groups, etc.). This is until we work out how best to group/batch scans when scanning the entire tenant. If you want to scan more objects you can use the '-MaxObj' switch in the cmdlets.
### Other improvements/bug fixes
* Subscription Security:
    *	Behavior of subscription control to validate security contacts setup in Azure Security Center (ASC) has been updated to check the following configurations:
        *	At least one contact email should be configured. 
        *	Alert notifications should be configured to be sent at least to Owner and Service Admin roles.
        *	Notifications should be enabled with a minimum severity of medium.
* Privileged Identity Management (PIM):
   *	-ExtendExpiringAssignments flag in setpim cmdlet has been updated to use -RoleName as the only parameter to specify the role name for which expiring assignments need to be extended. Earlier, -RoleNames was also allowed as a valid parameter in some scenarios.
        ```Powershell
         setpim -ExtendExpiringAssignments –SubscriptionId $sub -RoleName Reader -DurationInDays 60 -ExpiringInDays 10
        setpim -ExtendExpiringAssignments –SubscriptionId $sub -RoleName Reader -DurationInDays 60 -PrincipalNames 'PI:EMAIL'
         ```
*	CICD: 
    *	DevOps Kit CICD SVT extension task will now exclude controls that require either owner access or role-based access control (RBAC) information from its scan by default.
* SVTs: 
   * 	Azure Databricks controls will be skipped in local scan mode unless a personal access token (PAT) is provided as described [here](https://aka.ms/azsk/scanadbresource). 
    *	Fixed an issue related to control attestation where earlier difference in character casing of resource id between attested and current state was causing attestation drift.  
* Controls:
    *	Behavior of Azure_CDN_DP_Enable_Https control has now been enhanced to allow both HTTP and HTTPS protocols for CDN endpoints (via an additional check to configure HTTP to HTTPS redirect rule).
    *	Fixed a bug to evaluate the diagnostics setting control of automation account correctly when multiple Log Analytics workspaces are configured.
    *	Disk encryption control will not be evaluated for VMs with ephemeral OS disk (these disks do not support disk encryption).
* ARM Template Checker:
    * N/A.
* CA:
    *	Added an extra check in Get-AzSKContinuousAssurance command to warn users if the CA certificate is about to expire in seven days. 
    *	CA will now periodically (every 30 days) purge index entries for resources from the attestation history which do not exist anymore. This done to improve performance and reduce execution time in all scan modes.
* In-cluster CA:
    * N/A. 
* Log Analytics:
    * N/A.
* Others:
    * 	Detailed security data for each evaluated control (SecurityEvaluationData.json) will not be generated by default after scan completion. If organizations wish to generate this file, organization policy owner need to update their server-based control settings by adding GenerateSecurityEvaluationJsonFile flag with its value set to true.