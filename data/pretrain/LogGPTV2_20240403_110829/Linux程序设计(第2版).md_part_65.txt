pause{};
printf(*done\n*);
exit (0) :
当我们运行这个程序的时候，它会暂停5s，等待阔钟的闹响。如下所示：
alarm application starting
S./alara
waiting for alarm to go off
Ding!
done
这个程序里用到了一个新函数pause，它的作用很简单，就是把执行挂起直到有一个信号出
现为止。当它接收到一个信号的时候，预设好的处理器都将开始运行，程序的运行也将像正常
情况一样继续前进。它的定义如下所示：
include cunistd.h>
int pause (void);
如果它自己被一个信号中断了，就会返回“-1”（如果接收到的下一个信号没有让程序结束
加入jaVa编程群：524621833
---
## Page 337
第10章进程和信号
319
的话）并把errmo设置为EINTR。等待信号时更常见的办法是使用我们马上就要介绍的sigsuspend
函数。
操作注释：
制钟模仿程序通过fork启动了个新进程。这个子进程休眠5s后向自已的父进程发送-个
SIGALARM信号。父进程在安排好辅提SIGALARM信号后暂停运行，直到接收到一个信号为止。
我们没有在信号处理器里直接调用printf，我们的微法是设置了一个标志，然后在父进程里检查
这个标志并完成消息的输出。
使用信号和挂起进程的执行是UNIX程序设计的重要组成部分。它意味着一个程序不必总是
在执行着。程序不必在一个循环里无休止地检查某个事件是否已经发生，相反，它可以等待事
件的发生。这在一个多用户环境里是极其重要的、进程们共享着一个处理器，而繁忙的等待会
对系统的整体性能造成极大的影响。但使用信号又会面临这样一个特殊的问题：“如果一个信号
你只需考虑那些比较“慢”的系统调用，比如从终端读数据等一一如果在这个系统调用等待数据
的时候出现了一个信号，它就会返回一个错误：如果你决定在自已的程序里使用信号，就必须
想不到的件事。
象。比如说，如果你想调用pause来等待--个信号，可信号却出现在你调用pausc之前，就会使你
的程序无限期地等待一个不会发生的事件。这些竞争现象都是一些对时间先后很挑剔的问题，
许多初出茅庐的程序员都吃过苦头。检查信号代码时一定要认真仔细。
一个健壮的信号接口
我们已经对使用signal及其有关函数引发和捕捉信号做了比较深入的讨论，因为它们是
UNIX程序里比较常见的。但x/Open和UNIX技术规范为我们推荐了个更新更健壮的信号程序
设计接口，这就是sigaction。请看它的定义：
#include 
int sigaction (int sig.const struct sigaction *act,struet sigaction *oact 1:
sigaction结构是在signal.h文件里定义的，它被用来定义在接收到sig指定的信号时将要采取
的操作动作，至少应该包含以下儿个成员：
void(*)(int)sa_handler
/function, SIG_DFL or SIG_IGN
1gset_t sa_mask
signals to block in sa_handler
lnt sa_flags
signal action nodifiers
sigaction函数的作用是设置与信号sig关联着的操作动作。如果oact不是null，sigaction就将
把前一个信号动作写到它指向的地方去。如果act是null，sigaction写好oact就没事了；可如果act
不是null，对应于给定信号的动作就将被设置。
在对信号进行处理的时候，sigaction会在成功时返间“0"，失败时返回“-1"。如果给出的
信号不合法，或者如果试图对一个不允许被捕提或屏蔽的信号进行辅提或屏蔽，错误变量errmo
加入jaVa编程群：524621833
---
## Page 338
320
Linux程序设计
将被设置为EINVAL。
G
在参数act指向的sigaction结构里，函数指针sa_handler指向一个将在接收到信号sig时被调用
的函数。它相当于我们前面见过的传递到signal调用中去的函数func。我们可以在sa_handler域里
用特殊值SIG_1GN和SIG_DFL分别表明该信号将被屏或者将把动作恢复为它的默认行为
sa_mask域给出的是在调用由参数sa_handler指定的函数之前将被添加到该进程的信号掩码
里去的一组信号。这是组将被阻塞且不会被发送给该进程的信号。这可以防止出现信号先于
它处理器的运行结束而被接收到的情况，我们在前面遇见过这样的问题。使用sa_mask域可以消
除这一竞争现象。
但是，由sigaction设置的处理器所捕提到的信号在默认的情况下是不会被重置的：如果我们
希望获得类似于前面见过的用第二次signal调用对信号进行重置的效果，就必须在sa_flags域里包
含上标志值SA_RESETHAND。在深人学习sigaction的细节之前，我们先把程序ctrlc.c重写一遍，
用sigaction替换掉signal。
动手试试：sigaction函数
按照下面给出的代码清单修改程序，用sigaction来截获SIGINT信号。我们给新程序起名为
ctrlc2.c
#include 
include 
tinclude 
void ouch(int sig)
printf(*oucH! - I got signal $d\n*. sig):
int main ()
struct sigaction act;
act.sa_handier α ouch;
act.sa_flags = 0;
sigeaptyset (kact .sa_mask) :
sigaction(SIGINT,sact,0);
while(11(
printf (*Hello World:\n*) ;
当我们运行这个新版程序的时候，只要按下了“Ctrl-C”组合键，就会看到预定的输出信息。
这是因为sigaction能够对连续到来的多个SIGINT信号做连续的处理。如果想结束这个程序，就
必须按下“CtrI-”组合键，这个组合键的默认动作是产生SIGQUIT信号。
Hello World!
5./ctrlc2
Hello We: id
Helio ko1d
OUCH! - Iqot signa1 >
加入jaVa编程群：524621833
---
## Page 339
第10章进程和信号
321
He1lo Wor1d!
Hello World!
OUCR- J got signal 2
C
He:lo Worid:
He1lo Wor1d:
Quit
操作注释：
数ouch。我们需要先设置一个sigaction结构，里面包含着处理器名称、一个信号掩码和适当的标
志。我们的例子不需要使用任何标志，而空白的信号掩码是用sigemptyset函数创建出来的。
运行完这个程序之后，你将发现新创建出一个名为core的文件。你可以安全地删除掉它。
10.4.2信号集
头文件signal.h定义了sigset_t类型和用来处理信号集的函数，sigaction和其他函数将利用这
些信号集来修改进程在接收到信号时的行为。
#include 
int sigaddset{sigset_t *set. int signo);
int sigemptyeet(sigset_t *set);
int sigdelset(sigset_t *set, int signo);
int sigfillset(sigset_t *set1:
这些函数所完成的操作从它们的名字就能看出来。sigemptyset把一个信号集初始化为空
、
白。sigfillset把一个信号集初始化为包含有全部的已定义信号。sigaddset和sigdelset的作用
都会返回“-1”并设置errno。人们只为它们定义了一个错误，那就是在给定信号不合法时的
EINVAL。
函数sigismember的作用是判定一个给定的信号是否是一个信号集的成员。如果该信号是该
集合的个成员，它就返回“1”；如果不是，返回“0”：如果信号不合法，返回“-1”并把
errno设置为EINVAL。
include 
int sigistenber (sigset_t *set, int signo 1;
信号掩码的设置和检查工作是由sigprocmask函数完成的。信号掩码是当前被阻塞的一组信
号，因此，当前进程将接收不到出现在掩码里的那些信号。
#include csignal.h>
int sigprocnask(int hov, const sigset_t *set, aigset_t *oset };
sigprocmask可以依据how参数指定的方法对信号掩码进行修改。信号掩码的新值（如果它
不为空）由参数set传递，而以前的信号掩码将被写到信号集oset里去。
how参数的取值可以是表10-5中的一个。
加入jaVa编程群：524621833
---
## Page 340
322
Linux程序设计
表10-5
SIG_BLOCK
把ser中的信号缘加到信号掩码理
SIG_SETMASK
把信号掩码设置为set中的信号
SIG_LNBLOCK
从信号掩码里去掉ser中的信号
如果set参数是一个空指针，bow的值就没有用处，这个调用的惟一作用就是把当前信号掩码
的值取到oset里。
如果sigprocmask操作成功，它将返同“0”；如果how参数是无效的，它将返回“1”并把
ermno设置为EINVAL。
如果一个信号被个进程阻塞，就不会到达这个进程，但是会停留在待处理状态。程序可
以通过调用sigpending函数查看其阻寨信号里有哪些个正停留在待处理状态。
include - signa1.h>
int slgpenaing (sigset_t *set ):
这个函数的作用是把因阻塞面没有发送但又停留在待处理状态的一组信号写到set指向的信
号集里去。成功时它将返回“0"，否则返回“-1”并设置errno指示错误的原因。如果程序需要
对信号进行处理，但又需要控制处理函数的调用时间，这个函数就有用了。
进程可以通过调用sigsuspend函数挂起自已的执行，直到信号集里的个信号到达为止。这
是我们前面见过的pause函数更具普遍意义的形式。
incl:de 
int sizsuspend (const sigset_t *rignask );
sigsuspend函数的作用是先用参数sigmask给出的信号掩码替换掉进程当前的信号掩码，然后
把执行挂起。它将在一个信号处理函数执行完毕之后重新开始执行。如果-个接收到的信号结
束了程序，sigsuspend就不会返国。如果一个接收到的信号不结束程序，sigsuspend就返回“-1”
并且把errno设置为EINTR。
1.sigaction标志
用在sigaction函数里的sigaction结构中的sa_flags城可以包含下列取值，它们的作用是改变信
号的行为见表10-6：
表10-6
SA_NOCLDSTOP
当子进程停止时不产生SIGCHLD信号
SA_RESETHAND
把信号动作设置为SIG_DFL
SA_RESTART
重新启动可中断函数而不是给出EINTR错误
SA_NODEFER
播获时不把信号添加到信号掩码里去
当捕捉到一个信号的时候，SA_RESETHAND标志可以用来自动清除一个信号函数，我们在
前面已经见过它的用法了。
用在程序中的许多函数都是可以被中断的，也就是说，当接收到一个信号的时候，它们会
返间--个错误并把errno设置为EINTR以表明函数是因为一个信号面返回的。使用了信号的软件
必须特别注意这--行为。如果sigaction调用里的sa_flags域中的SA_RESTART标志被置位，那么
加入jaVa编程群：524621833
---
## Page 341
第10章进程和信号
323
在该信号的处理函数执行完毕之后，会刻重新启动一个函数，新启动的函数在SA_RESTART
标志没有被置位的情况下是可以被一个信号中断的。
普通的做法是：当信号处理函数止在执行的时候，又新接收到的信号将在该处理函数的执
行期间被添加到该进程的信号掩码里去。这就预防了同一信号不断出现情况的发生，那样会使
信号处理函数再次运行。如果这个函数不是可重人的，在它结束对第一个信号的处理之前又让
第二个同样的信号再次调用它就有可能引起问题。但如果SA_NODEFER标志被置位，它接收到
这个信号的时候就不会改变信号掩码
一个信号处理函数可以在其执行期间被其他事件中断并再次被调用。当你回到第一个调用
里的时候，它能否继续正确操作是很关键的。这可不是递归（调用自身），而是重人（可以安全
地重新进人和执行）。操作系统内核中同时负责多个设备的中断性服务例程就需要是可重入的，
因为·个优先级更高的中断可能会在同一段代码的执行期间“夹塞”进来。
下面列出的是一些能够在信号处理器内部安全使用的函数，它们或者是可重人的，或者它
们本身不会再产生信号，X/Open技术规范可以保证这一点。
所有没有列在下表里的其他函数在涉及到信号问题时都被认为是不安全的
acccss
alarm
cfgetispeed
cfgetospeed
cfsetispeed
cfsetospeed
chdir
chmod
chown
close
creat
dup2
dup
execle
execve
_exit
fcntl
fork
fstat
getegid
geteuid
getgid
getgroups
getpgrp
getpid
getppid
getuid
kill
link
Iseek
mkfifo
open
pathconf
pause
pipe
read
rename
rmdir
setgid