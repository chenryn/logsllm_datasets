title:Protecting browsers from dns rebinding attacks
author:Collin Jackson and
Adam Barth and
Andrew Bortz and
Weidong Shao and
Dan Boneh
Protecting Browsers from DNS Rebinding Attacks
Collin Jackson
Stanford University
PI:EMAIL
Adam Barth
Stanford University
PI:EMAIL
Andrew Bortz
Stanford University
PI:EMAIL
Weidong Shao
Stanford University
PI:EMAIL
ABSTRACT
DNS rebinding attacks subvert the same-origin policy of
browsers and convert them into open network proxies. We
survey new DNS rebinding attacks that exploit the inter-
action between browsers and their plug-ins, such as Flash
and Java. These attacks can be used to circumvent ﬁre-
walls and are highly cost-eﬀective for sending spam e-mail
and defrauding pay-per-click advertisers, requiring less than
$100 to temporarily hijack 100,000 IP addresses. We show
that the classic defense against these attacks, called “DNS
pinning,” is ineﬀective in modern browsers. The primary
focus of this work, however,
is the design of strong de-
fenses against DNS rebinding attacks that protect modern
browsers: we suggest easy-to-deploy patches for plug-ins
that prevent large-scale exploitation, provide a defense tool,
dnswall, that prevents ﬁrewall circumvention, and detail
two defense options, policy-based pinning and host name
authorization.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms
Security, Design, Experimentation
Keywords
Same-Origin Policy, DNS, Firewall, Spam, Click Fraud
1.
INTRODUCTION
Users who visit web pages trust their browser to prevent
malicious web sites from leveraging their machines to attack
others. Organizations that permit JavaScript and other ac-
tive content through their ﬁrewall rely on the browser to
protect internal network resources from attack. To achieve
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010 ...$5.00.
Dan Boneh
Stanford University
PI:EMAIL
these security goals, modern browsers implement the same-
origin policy that attempts to isolate distinct “origins,” pro-
tecting sites from each other.
DNS rebinding attacks subvert the same-origin policy by
confusing the browser into aggregating network resources
controlled by distinct entities into one origin, eﬀectively con-
verting browsers into open proxies. Using DNS rebinding,
an attacker can circumvent ﬁrewalls to spider corporate in-
tranets, exﬁltrate sensitive documents, and compromise un-
patched internal machines. An attacker can also hijack the
IP address of innocent clients to send spam e-mail, commit
click fraud, and frame clients for misdeeds. DNS rebinding
vulnerabilities permit the attacker to read and write directly
on network sockets, subsuming the attacks possible with ex-
isting JavaScript-based botnets [24], which can send HTTP
requests but cannot read back the responses.
To mount a DNS rebinding attack, the attacker need only
register a domain name, such as attacker.com, and attract
web traﬃc, for example by running an advertisement.
In
the basic DNS rebinding attack, the attacker answers DNS
queries for attacker.com with the IP address of his or her
own server with a short time-to-live (TTL) and serves vis-
iting clients malicious JavaScript. To circumvent a ﬁrewall,
when the script issues a second request to attacker.com, the
attacker rebinds the host name to the IP address of a tar-
get server that is inaccessible from the public Internet. The
browser believes the two servers belong to the same origin
because they share a host name, and it allows the script to
read back the response. The script can easily exﬁltrate the
response, enabling the attacker to read arbitrary documents
from the internal server, as shown in Figure 1.
To mount this attack, the attacker did not compromise
any DNS servers. The attacker simply provided valid, au-
thoritative responses for attacker.com, a domain owned by
the attacker. This attack is very diﬀerent from “pharm-
ing” [34], where the attacker must compromise a host name
owned by the target by subverting a user’s DNS cache or
server. DNS rebinding requires no such subversion. Conse-
quently, DNSSEC provides no protection against DNS re-
binding attacks: the attacker can legitimately sign all DNS
records provided by his or her DNS server in the attack.
DNS rebinding attacks have been known for a decade [8,
36]. A common defense implemented in several browsers is
DNS pinning: once the browser resolves a host name to an
IP address, the browser caches the result for a ﬁxed dura-
tion, regardless of TTL. As a result, when JavaScript con-
nects to attacker.com, the browser will connect back to the
attacker’s server instead of the internal server.
421Technology
LiveConnect (JVM loaded)
Flash 9
Internet Explorer 6 (no plug-ins)
Internet Explorer 7 (no plug-ins)
Firefox 1.5 and 2 (no plug-ins)
Safari 2 (no plug-ins)
LiveConnect
Opera 9 (no plug-ins)
Attack Time
47.8 ± 10.3 ms
192 ± 5.7 ms
1000 ms
1000 ms
1000 ms
1000 ms
1294 ± 37 ms
4000 ms
Table 1: Time Required for DNS Rebinding Attack
by Technology (95% Conﬁdence)
3. We propose two options for protecting browsers from
DNS rebinding: smarter pinning that provides better
security and robustness, and a backwards-compatible
use of the DNS system that ﬁxes rebinding vulnerabil-
ities at their root (which we implemented as a 72-line
patch to Firefox 2).
The remainder of the paper is organized as follows. Sec-
tion 2 describes existing browser policy for network access.
Section 3 details DNS rebinding vulnerabilities, including
standard DNS rebinding and current multi-pin vulnerabili-
ties. Section 4 explains two classes of attacks that use these
vulnerabilities, ﬁrewall circumvention and IP hijacking, and
contains our experimental results. Section 5 proposes de-
fenses against both classes of attacks. Section 6 describes
related work. Section 7 concludes.
2. NETWORK ACCESS IN THE BROWSER
To display web pages, browsers are instructed to make
network requests by static content such as HTML and by
active content such as JavaScript, Flash, Java, and CSS.
Browsers restrict this network access in order to to prevent
web sites from making malicious network connections.
The same-origin policy provides partial resource isolation
by restricting access according to origin, specifying when
content from one origin can access a resource in another ori-
gin. The policy applies to both network access and browser
state such as the Document Object Model (DOM) interface,
cookies, cache, history, and the password database [20]. The
attacks described in this paper circumvent the same origin-
policy for network access.
Access Within Same Origin. Within the same origin,
both content and browser scripts can read and write net-
work resources using the HTTP protocol. Plug-ins, such as
Flash and Java, can access network sockets directly, allow-
ing them to make TCP connections and, in some cases, send
and receive UDP packets as well. Java does not restrict ac-
cess based on port number, but Flash permits access to port
numbers less than 1024 only if the machine authorizes the
connection in an XML policy served from a port number
less than 1024.
Access Between Diﬀerent Origins. In general, content
from one origin can make HTTP requests to servers in an-
other origin, but it cannot read responses, eﬀectively re-
stricting access to “send-only.” Flash permits its movies to
read back HTTP responses from diﬀerent origins, provided
the remote server responds with an XML policy authorizing
the movie’s origin. Flash also permits reading and writing
Figure 1: Firewall Circumvention Using Rebinding
Pinning is no longer an eﬀective defense against DNS re-
binding attacks in current browsers because of vulnerabil-
ities introduced by plug-ins. These plug-ins provide addi-
tional functionality, including socket-level network access,
to web pages. The browser and each plug-in maintain sep-
arate pin databases, creating a new class of vulnerabilities
we call multi-pin vulnerabilities that permit an attacker to
mount DNS rebinding attacks. We demonstrate, for exam-
ple, how to exploit the interaction between the browser and
Java LiveConnect to pin the browser to one IP address while
pinning Java to another IP address, permitting the attacker
to read and write data directly on sockets to a host and
port of the attacker’s choice despite strong pinning by each
component.
Our experiments show how an attacker can exploit multi-
pin vulnerabilities to cheaply and eﬃciently assemble a tem-
porary, large-scale bot network. Our ﬁndings suggest that
nearly 90% of web browsers are vulnerable to rebinding at-
tacks that only require a few hundreds of milliseconds to
conduct (see Table 1). These attacks do not require users
to click on any malicious links: users need only view an at-
tacker’s web advertisement. By spending less than $100 on
advertising, an attacker can hijack 100,000 unique IP ad-
dress to send spam, commit click fraud, or otherwise misuse
as open network proxies.
The bulk of our work focuses on designing robust defenses
to DNS rebinding attacks that protect current and future
browsers and plug-ins:
1. To combat ﬁrewall circumvention, we recommend or-
ganizations deploy DNS resolvers that prevent external
names from resolving to internal addresses. We pro-
vide an open-source implementation of such a resolver
in 300 lines of C called dnswall [15].
2. For Flash, Java, and LiveConnect, we suggest speciﬁc,
easy-to-deploy patches to prevent multi-pin vulnera-
bilities, mitigating large-scale exploitation of DNS re-
binding for ﬁrewall circumvention and IP hijacking.
AttackerwebserverTargetserverBrowserclientattacker.comat time t1attacker.comat time t0data on TCP connections to arbitrary port numbers, again
provided the remote server responds with a suitable XML
policy on an appropriate port.
By convention, certain types of web content are assumed
to be public libraries, such as JavaScript, CSS, Java applets,
and Flash movies. These ﬁles may be included across do-
mains. For example, one origin can include a CSS ﬁle from
another origin and read its text. Scripts can also read cer-
tain properties of other objects loaded across domains, such
as the height and width of an image.
Prohibited Access. Some types of network access are pro-
hibited even within the same origin.
Internet Explorer 7
blocks port numbers 19 (chargen), 21 (FTP), 25 (SMTP),
110 (POP3), 119 (NNTP), and 143 (IMAP), Firefox 2 blocks
those plus 51 additional port numbers, but Safari 2 does not
block any ports. Some of these port restrictions are designed
to prevent malicious web site operators from leveraging vis-
iting browsers to launch distributed denial of service or to
send spam e-mail, whereas others prevent universal cross-
site scripting via the HTML Form Protocol Attack [41].
Origin Deﬁnition. Diﬀerent deﬁnitions of “origin” are
used by diﬀerent parts of the browser. For network access,
browsers enforce the same-origin policy [38] based on three
components of the Uniform Resource Locator (URL) from
which it obtained the content. A typical URL is composed
of the below components:
scheme://hostname:port/path
Current browsers treat two objects as belonging to the same
origin if, and only if, their URLs contain the same scheme,
host name, and port number (e.g., http://amazon.com/ is
a diﬀerent origin than http://amazon.co.uk/, even though
the two domains are owned by the same company). Other
resources use fewer components of the URL. For example,
cookies use only the host name.
Objects on the Internet, however, are not accessed by host
name. To connect to a server, the browser must ﬁrst trans-
late a host name into an IP address and then open a socket
to that IP address. If one host name resolves to multiple IP
addresses owned by multiple entities, the browser will treat
them as if they were the same origin even though they are,
from an ownership point-of-view, diﬀerent.
3. DNS REBINDING VULNERABILITIES
The network access policy in web browsers is based on
host names, which are bound by the Domain Name Sys-
tem (DNS) to IP addresses. An attacker mounting a DNS
rebinding attack attempts to subvert this security policy by
binding his or her host name to both the attack and target
server’s IP addresses.
3.1 Standard Rebinding Vulnerabilities
A standard rebinding attack uses a single browser technol-
ogy (e.g. JavaScript, Java, or Flash) to connect to multiple
IP addresses with the same host name.
Multiple A Records. When a client resolves a host name
using DNS, the authoritative server can respond with mul-
tiple A records indicating the IP addresses of the host. The
ﬁrst attack using DNS rebinding [8] in 1996 leveraged this
property to confuse the security policy of the Java Virtual
Machine (JVM):
1. A client visits a malicious web site, attacker.com, con-
taining a Java applet. The attacker’s DNS server binds
attacker.com to two IP addresses: the attacker’s web
server and the target’s web server.
2. The client executes the attacker’s applet, which opens
a socket to the target. The JVM permits this connec-
tion, because the target’s IP address is contained in
the DNS record for attacker.com.
Current versions of the JVM are not vulnerable to this at-
tack because the Java security policy has been changed. Ap-
plets are now restricted to connecting to the IP address from
which they were loaded. (Current attacks on Java are de-
scribed in Section 3.2.)
In the JavaScript version of this attack, the attacker sends
some JavaScript to the browser that instructs the browser
to connect back to attacker.com. The attacker’s server
refuses this second TCP connection, forcing the browser to
switch over to the victim IP address [21]. By using a RST
packet to refuse the connection, the attacker can cause some
browsers to switch to the new IP address after one second.
Subsequent XMLHttpRequests issued by the attacker’s code
will connect to the new IP address.
Time-Varying DNS. In 2001, the original attack on Java
was extended [36] to use use time-varying DNS:
1. A client visits a malicious web site, attacker.com,
containing JavaScript. The attacker’s DNS server is
conﬁgured to bind attacker.com to the attacker’s IP
address with a very short TTL.
2. The attacker rebinds attacker.com to the target’s IP
address.
3. The malicious script uses frames or XMLHttpRequest
to connect to attacker.com, which now resolves to the
IP address of the target’s server.
Because the connection in Step 3 has the same host name
as the original malicious script, the browser permits the at-
tacker to read the response from the target.
Pinning in Current Browsers. Current browsers defend
against the standard rebinding attack by “pinning” host
names to IP address, preventing host names from referring
to multiple IP addresses.