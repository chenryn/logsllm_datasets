### Table 3: Redundancy Factors for Various Values of \( \beta \)

| \( \beta \) | \( \lambda = 1.05 \) | \( \lambda = 1.03 \) | \( \lambda = 1.0 \) | \( \lambda = 2.0 \) |
|------------|---------------------|---------------------|--------------------|--------------------|
| 0.1        | 1.05                | 1.03                | 1.0                | 2.0                |
| 0.2        | 1.11                | 1.06                | 1.2                | 2.0                |
| 0.3        | 1.18                | 1.09                | 1.4                | 2.0                |
| 0.4        | 1.25                | 1.13                | 1.6                | 2.0                |
| 0.5        | 1.33                | 1.17                | 1.8                | 2.0                |
| 0.6        | 1.43                | 1.23                | 2.0                | 2.0                |
| 0.7        | 1.54                | 1.29                | 2.2                | 2.0                |
| 0.8        | 1.67                | 1.38                | 2.4                | 2.0                |
| 0.9        | 1.82                | 1.52                | 2.6                | 2.0                |
| 1.0        | 2.0                 | 2.0                 | 2.8                | 2.0                |

Table 3 shows the redundancy factors required for \( \lambda = 1 \) and \( \lambda = 2 \) with various values of \( \beta \).

### Advantages and Disadvantages

**Advantages:**
- **Reduced Task Compute Cycles:** This strategy requires significantly fewer task compute cycles compared to simple redundancy.
- **No Precomputation Required:** Similar to our seeding strategy for non-sequential tasks (except Monte Carlo simulations), there is no need for the supervisor to precompute any values.
- **Collusion Resistance:** The method is resistant to collusion, as returned results are permuted and reassigned, making it difficult for a group of colluding nodes to manipulate the results.
- **Tunable Security Levels:** A supervisor can set security levels by varying the redundancy factor.
- **Applicability to Non-Sequential Computations:** The technique can be applied to non-sequential computations as well.

**Disadvantages:**
- **Increased Supervisor Workload:** The supervisor experiences an increase in both coordination and communication costs due to node synchronization requirements.
- **Time Cost:** The need for synchronization increases the time cost of a computation, which can be particularly expensive if many volunteer PCs are connected via modems or operate sporadically.
- **Security Against One-Time Cheaters:** The strategy does not protect well against a malicious adversary who decides to cheat just once.
- **Magnified Damage:** Incorrect results that are not caught can become input values in subsequent segments of the computation, magnifying the damage a cheater can do.

### Related Work

The current problem relates to the validation of code execution, with historical roots in result-checking and self-correcting programs. Wasserman and Blum [22] provide an excellent survey of this area. However, much of the work is limited to specific arithmetic functions and checking is limited to verifying function behavior on a single input rather than all inputs. Result checkers for general computations remain elusive.

Several recent implementations of distributed computing platforms address fault-tolerance but assume a fault model where errors are not the result of malicious intent. These solutions typically combine redundancy with voting and spot checking. Minsky et al. [12] found that replication and voting schemes alone are insufficient for solving the problem and assert that cryptographic support is also required.

Efforts have been made to protect mobile agents from malicious hosts. Vigna [21] proposes using cryptographic traces to detect tampering with agents. Sanders and Tschudin [16] discuss the idea of providing security for mobile agents by computing with encrypted functions. Abadi and Feigenbaum [1] present an encryption function for a general boolean circuit, but their method requires frequent interaction between the communicating parties.

Golle and Stubblebine [10] present a security-based administrative framework for commercial distributed computations, relying on selective redundancy to increase the probability of detecting cheaters. Monrose, Wyckoff, and Rubin [13] deal with the problem of ensuring host participation, assuming the goal is to maximize profit by minimizing resources. Their method involves recording traces of task execution, but this approach requires re-computing results, which is undesirable.

### Conclusions

We have presented two strategies for hardening large-scale distributed computations against malicious behavior by participating hosts. The first strategy, applicable to many non-sequential computations (such as optimization problems), involves seeding task data with ringers in a manner that prevents participants from distinguishing the ringers from genuine results. The second strategy, applicable to sequential computations (such as GIMPS), advocates sharing the work of computing \( n \) tasks among \( m > n \) nodes. While there is a small increase in the average execution time of a modified task, the overall computing costs are significantly decreased compared to redundantly assigning entire tasks. Both strategies provide supervisors protection against participants who fail to complete assigned tasks and offer a measure of assurance of the validity of returned results.

### Acknowledgments

We would like to thank the anonymous reviewers whose comments helped us in preparing the final version of the paper.

### References

[1] M. Abadi and J. Feigenbaum. Secure circuit evaluation: A protocol based on hiding information from an oracle. Journal of Cryptology, 2(1):1–12, 1990.

[2] J. Baldeschwieler, R. Blumofe, and E. Brewer. Atlas: An infrastructure for global computing. In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, 1996.

[3] A. Baratloo, M. Karaul, Z. M. Kedem, and P. Wyckoff. Charlotte: Metacomputing on the web. In Proc. of the 9th Int’l Conf. on Parallel and Distributed Computing Systems (PDCS-96), 1996.

[4] T. Brecht, H. Sandhu, M. Shan, and J. Talbot. Paraweb: Towards world-wide supercomputing. In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, 1996.

[5] J. Bruce. A really trivial proof of the Lucas-Lehmer test. American Mathematical Monthly, 100:370–371, 1993.

[6] P. Capello, B. Christiansen, M. Ionescu, M. Neary, K. Schauser, and D. Wu. Javelin: Internet-based parallel computing using Java. Concurrency: Practice and Experience, 9(11):1139–1160, 1997.

[7] The Folding@home Project. Stanford University. http://www.stanford.edu/group/pandegroup/cosm/.

[8] The Great Internet Mersenne Prime Search. http://www.mersenne.org/prime.htm.

[9] P. Golle and I. Mironov. Uncheatable distributed computations. In Proceedings of the RSA Conference 2001, Cryptographers’ Track, pages 425–441, San Francisco, CA, 2001. Springer.

[10] P. Golle and S. Stubblebine. Secure distributed computing in a commercial environment. 2001. http://crypto.stanford.edu/~pgolle/papers/payout.html.

[11] A. Law and W. Kelton. Simulation Modeling and Analysis. McGraw-Hill, 3rd edition, 2000.

[12] Y. Minsky, R. van Renesse, F. Schneider, and S. Stoller. Cryptographic support for fault-tolerant distributed computing. In Seventh ACM SIGOPS European Workshop, pages 109–114, Connemara, Ireland, 1996.

[13] F. Monrose, P. Wyckoff, and A. Rubin. Distributed execution with remote audit. In Proceedings of the 1999 ISOC Network and Distributed System Security Symposium, pages 103–113, 1999.

[14] N. Nisan, S. London, O. Regev, and N. Camiel. Globally distributed computing over the internet—the Popcorn project. In Proceedings of the International Conference on Distributed Computing Systems, pages 592–601, Amsterdam, Netherlands, May 1998.

[15] R. Rivest, L. Adleman, and M. Dertouzos. On data banks and privacy homomorphisms. In R. D. Millo, D. Dobkin, A. Jones, and R. Lipton, editors, Foundations of Secure Computation, pages 169–179. Academic Press, New York, 1978.

[16] T. Sander and C. F. Tschudin. Protecting Mobile Agents Against Malicious Hosts. In G. Vigna, editor, Mobile Agent Security, pages 44–60. Springer-Verlag: Heidelberg, Germany, 1998.

[17] L. Sarmenta and S. Hirano. Bayanihan: Building and studying web-based volunteer computing systems using Java. Future Generation Computer Systems, 15(5/6), 1999.

[18] The Search for Extraterrestrial Intelligence project. University of California, Berkeley. http://setiathome.berkeley.edu/.

[19] T. Stein. A cycle built for few. In Red Herring magazine, December 2000.

[20] P. Syverson. Weakly secret bit commitment: Applications to lotteries and fair exchange. In PCSFW: Proceedings of The 11th Computer Security Foundations Workshop. IEEE Computer Society Press, 1998.

[21] G. Vigna. Cryptographic Traces for Mobile Agents. In G. Vigna, editor, Mobile Agent Security, pages 137–153. Springer-Verlag: Heidelberg, Germany, 1998.

[22] H. Wasserman and M. Blum. Software reliability via runtime result-checking. Journal of the ACM, 44(6):826–849, 1997.

Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP'03) 1081-6011/03 $17.00 © 2003 IEEE