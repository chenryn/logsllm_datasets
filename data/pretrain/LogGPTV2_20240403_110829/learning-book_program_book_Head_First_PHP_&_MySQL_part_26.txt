空，Soutput_sotm变量
别指示哪个表
THENecho输出错误消息，设置Soutput_form为true
设置为tuue，不过……….
单域为空。
前尚未显示表单！
IFSubject非空ANDBody为空
THENecho输出错误消息，设置Soutput_form为true
IFSubject非空ANDBody非空
如果两个表单域
THEN发出邮件
都包含数据，则
继续发出邮件。
IF$output_form为true
THEN显示表单
K
最后一个工作.检查Soutput_otm变量.奎看
是否需要显示表单。不论怎样，只需要HTNC
代码出现一次。
194
第4章
---
## Page 231
现实的实际应用
只编写一次HTML表单代码
要把以上验证逻辑转换为PHP代码，需要创建和初始化新的Soutput_form变
让HTML代码依
量，然后通过验证代码设置这个变量。最重要的是代码最后的if语句，它仅在
赖于一个IF语
$output_form设置为true时才显示表单。
句，可以避免
';
Soutput_form =true;
如果Ssubject和Stext都为空，将变量设
置为tzue，相应地金显示表单。
if （empty($subject)&&(!empty($text))）(
echo'You forgot the email subject.';
$output form=true;
如果Ssubject为空也将变量设置为
tiue。
if ((!empty($subject))&& empty($text))(
echo 'You forgot the
email body text.';
Soutput form=true;
如果Stext为空，同样将变量设
盖为ttue。
if ((!empty($subject))&&(!empty($text))){
//Code to send the email
这个i语句检叠Soutput_som变量
已经退出PHP代码，但是在结束）之前的所有
/
代码仍认为是证动作的一部分，在这里就是
K
并且当该变量为tuue时显示表单。
对应表单的HTML代码。
if（$output form）(
？>
Subjectofemail:
Body of email:
标记的action属性将一个表单与处
理该表单的一个PHP脚本相连接。将Elmer表单的动作设置为指向
sendemail.php，这样就能允许它自我处理，这是实现表单粘性的
第一步。实际上，表单已经将其action属性设置为这个脚本：
标记的action属性将一个表单与处理该表单的一个脚本相通
接，在这里正是包含该表单的同一个sendemail.php脚本。
个
个
这是一个标准的标记.使用
POST向脚本提交表单数据。
只要你对脚本重命名后没有忘记更新代码，这个代码都可以很好地工
作。不过还有一种更好的办法能确保正常工作，因为它不依赖于特定的
脚本文件名。这就是利用内置的PHP超级全局变量$_SERVER【'PHP
SELF']，其中存储了当前脚本的名字。可以将表单动作中的脚本URL
替换为SSERVER['PHPSELF']，这样一来就不用操心需要重命名脚
本时考虑对代码做哪些更新。
唯一要注意的是，$SERVER['PHPSELF']是PHP代码，这说明必须
用echo回显输出它的值作为HTML代码的一部分，如下所示：
并非硬编码写入脚本名，可以使
用S_SERVER[‘PHP_SELF']超级全
届变量告诉它引用自身。
"method="post">
必须承认，使用S_SERVER['PHP_SELF']取代脚本名并不
是一个惊天动地的改进，不过利用这样一些小技巧确实可以
让你的脚本更易于维护。
$_SERVER['PHP_SELF']
存储当前脚本的名。
200
第4章
---
## Page 237
现实的实际应用
运行测试
这个新的自引用脚本提供了改进的表单验证逻辑，请尝试运行这个脚本。
修改sendemail.php中的代码，使用soutput_form变量选择性地显示表单
（如几页前所示）。并修改标记的action属性，使表单是自引l用的。
Web服务器上不再需要sendemail.html页面，所以完全可以将它删除。然
后将sendemail.php脚本的新版本上传到你的Web服务器，并在一个Web浏
览器中打开这个脚本。看上去怎么样？
不知什么原因，脚本显示
了一个错误消息，尽管此
000
时表单尚未提交.这可
MakEMEELviS.COM
不太好。
Private:FoElmer's vse ONLY
Body of email
不仅如此，这仍然
不是粘性的。工作
尚未宪成！
首先要解决的问题，精后
再考虑粘性问题：
你认为脚本为什么第一次显示表单时就会显示一个错误消息，请
写出原因：
你现在的位置
201
---
## Page 238
检查$_POST[submit
查着表单是否已经提交
问题在于脚本未能区分表单是首次显示，还是表单提交时未能提供完备的数据。
所以脚本第一次显示表单时也会报告缺少数据，这会让人莫名其妙。现在的问
题是，如何查看表单是否提交？如果了解这一点，就可以确保只在表单提交时
才验证数据。
还记得吗？使用POST方法提交表单时，其数据存储在SPOST数组中。如果表
单尚未提交，那么S_POST数组未填入任何数据。或者换种说法来讲，$_POST
数组尚未设置。能猜出可以调用哪个函数来查看S_POST数据是否设置吗？
isset()函数查看一个安量
这必须与Submit按钰的标记
是否已经设置。
名医配。
L
if（isset（S_PoST['submit'])）(
这里的所有代码仅在表单
$_POST超级
提交时才金执行。
全局变量允许
由于每个表单都有一个Submit按钮，查看表单是否提交的一种简单做法就是检
查看一个表单
查对应Submit按钮的S_POST数据是否存在。这个数据就是按钮上的标签，当
是否提交。
然这并不重要。重要的是s_POST['submit']是否存在，由此可以得知表单
是否已经提交。一定要确保'submit'与表单代码中Submit按钮的id属性匹配。
thereareno
DumbQuestions
问：
错误消息？
是查看Submit按钮？
区分已经提交的脚本和首次显示的脚本。所以我们需要一也完全可以，但这种做法只适用于这个特定的表单。由于
种方法来区别表单是否是第一次显示，如果是第一次显示，每个表单都有一个Submit按钮，而且很可能都一致地命名
那么表单域为空就是完全合理的，这不是错误。应当只是为submit，所以检查S_POST['submit'1可以提供一种
在表单提交时才验证表单域，所以能够检测表单是否提交在所有脚本中检查表单提交的可靠方法。
非常重要。
202
---
## Page 239
现实的实际应用
SendEmail脚本剖折
';
Soutput_form =true;
if (empty($subject）&& （!empty($text)))
echo'You forgot the email subject.';
$output_form =true;
if （(!empty（Ssubject))&& empty（$text)）(
echo'You forgot the email body text.';
$output_form =true;
if （(!empty（$subject))&& （!empty($text))){
//Code to send the email
这个大括号结束第一个i话
对应表单已经提交的情况。
else(
$output_form=true;
如果表单从未提交，那公
肯定常要显示表单！
if （Soutput_form)(
?>
">
Subject of email:
Body of email:
dude>
1
?>
你现在的位置
203
---
## Page 240
使表单域“有粘性”
太好了。这样我们现在就可以检测表
单提交并正确地显示错误消息。但是
还没有保证表单域有粘性，对不对？
没错。检测表单提交很重要，不过我们还需要把粘性的表单数据插回到表单。
了解表单是否已提交是使之有粘性的一个重要部分，但是这并不是全部。还需
要取得已经提交的所有表单数据并在表单输出时将其插回到表单中。可以使
用HTML标记的value属性设置输人表单域。例如，以下代码使用
value属性预置了一个输入域的值：
这个值是硬继码的，每次显示表单时它
都是一样的。
不过我们并不希望硬编码一个特定的值。我们希望从一个PHP变量插入数据。
可以做到吗？应该记得，之前一直使用echo从PHP动态生成HTML代码。在这
里，也可以使用echo从一个PHP变量为value属性生成一个值，如下：
变量使用我们熟悉的echo语句
由于要切换到PHP回显输出变量，所以必须使用一
回显输出。
个<：php标记。
要返回到HTML，需要使