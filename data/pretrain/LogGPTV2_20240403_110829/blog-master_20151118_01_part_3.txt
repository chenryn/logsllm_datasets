duration: 10 s  
number of transactions actually processed: 355  
latency average: 284.995 ms  
latency stddev: 98.065 ms  
tps = 34.391873 (including connections establishing)  
tps = 34.442359 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.005192        \setrandom id 1 50000000  
        284.989341      delete from test where id=:id;  
```  
delete 并发性能分析  
使用1个连接或多个连接，最终的TPS几乎一致。和GP在处理delete SQL的锁有关。  
delete也是持有表锁。  
## 并发插入测试  
insert，单进程基准性能  
```  
digoal=# create table t(id int, info text, crt_time timestamp) distributed by (id);  
CREATE TABLE  
Time: 156.959 ms  
digoal=# insert into t values (1);  
INSERT 0 1  
Time: 113.875 ms  
digoal=# insert into t values (1);  
INSERT 0 1  
Time: 25.633 ms  
digoal=# insert into t values (1);  
INSERT 0 1  
Time: 21.263 ms  
```  
insert 并发性能测试  
```  
$vi test.sql  
\setrandom id 1 50000000  
insert into t values (:id);  
$./pgsql9.5/bin/pgbench -M simple -n -r -f ./test.sql -P 1 -c 10 -j 10 -T 10  
progress: 1.0 s, 249.0 tps, lat 38.180 ms stddev 50.487  
progress: 2.0 s, 366.0 tps, lat 27.815 ms stddev 16.822  
progress: 3.0 s, 296.0 tps, lat 33.613 ms stddev 34.803  
progress: 4.0 s, 296.0 tps, lat 33.725 ms stddev 10.792  
progress: 5.0 s, 274.0 tps, lat 36.624 ms stddev 17.423  
progress: 6.0 s, 280.0 tps, lat 35.980 ms stddev 35.385  
progress: 7.0 s, 356.0 tps, lat 28.166 ms stddev 7.185  
progress: 8.0 s, 333.0 tps, lat 29.745 ms stddev 9.597  
progress: 9.0 s, 257.9 tps, lat 32.871 ms stddev 24.897  
progress: 10.0 s, 338.1 tps, lat 34.008 ms stddev 31.587  
transaction type: Custom query  
scaling factor: 1  
query mode: simple  
number of clients: 10  
number of threads: 10  
duration: 10 s  
number of transactions actually processed: 3056  
latency average: 32.815 ms  
latency stddev: 26.684 ms  
tps = 302.610331 (including connections establishing)  
tps = 303.090986 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.004006        \setrandom id 1 50000000  
        32.810048       insert into t values (:id);  
$./pgsql9.5/bin/pgbench -M prepared -n -r -f ./test.sql -P 1 -c 10 -j 10 -T 10  
progress: 1.0 s, 236.0 tps, lat 41.008 ms stddev 56.402  
progress: 2.0 s, 310.0 tps, lat 32.330 ms stddev 29.544  
progress: 3.0 s, 376.0 tps, lat 26.737 ms stddev 4.911  
progress: 4.0 s, 348.0 tps, lat 28.565 ms stddev 9.450  
progress: 5.0 s, 112.0 tps, lat 89.650 ms stddev 132.283  
progress: 6.0 s, 362.0 tps, lat 27.394 ms stddev 6.078  
progress: 7.0 s, 368.0 tps, lat 27.373 ms stddev 6.049  
progress: 8.0 s, 364.0 tps, lat 27.397 ms stddev 6.315  
progress: 9.0 s, 356.0 tps, lat 28.029 ms stddev 9.189  
progress: 10.0 s, 322.0 tps, lat 31.181 ms stddev 28.778  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 10 s  
number of transactions actually processed: 3164  
latency average: 31.609 ms  
latency stddev: 34.630 ms  
tps = 315.497708 (including connections establishing)  
tps = 315.990969 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003991        \setrandom id 1 50000000  
        31.604701       insert into t values (:id);  
```  
## 小结  
1\. 查询，使用绑定变量会产生分布式提交，效率很低；所以查询使用simple query效率(响应时间更快)更高，增加并发可以提高tps。  
2\. 更新，持有表级排他锁，是否绑定变量效率都差不多。根据键值更新不会产生分布式事务，但是如果更新的是一个范围，会自动使用分布式事务提交。因为是表级排他锁，所以增加并发不能提高tps。  
3\. 删除，持有表级排他锁，是否绑定变量效率都差不多。根据键值删除不会产生分布式事务，但是如果删除的是一个范围，会自动使用分布式事务提交。因为是表级排他锁，所以增加并发不能提高tps。  
4\. 插入，是否绑定变量效率都差不多，没有表级排他锁，因此增加并发可以提高tps。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")