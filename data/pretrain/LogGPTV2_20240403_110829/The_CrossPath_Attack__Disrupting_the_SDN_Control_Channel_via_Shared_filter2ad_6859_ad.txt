### Probability Distribution of Delay Variations and Reconnaissance Accuracy

**Figure 7: Probability Distribution of Delay Variations.**

**Figure 8: Accuracy of Reconnaissances with Different Parameters.**

- **Throughput (packets/second)**
  - 1000
  - 800
  - 600
  - 400
  - 200
  - 0
- **Delay (seconds)**
  - 10^5
  - 10^4
  - 10^3
  - 10^2
  - 10^1
  - 10^0
- **Time (s)**
  - 0
  - 20
  - 40
  - 60
  - 80
  - 100

**Figure 9: Throughput of Control Packets.**

**Figure 10: Delays of Control Packets.**

The delay variations between target data paths and non-target data paths can be easily identified according to the delay distributions.

We then calculate the accuracy of our reconnaissance by conducting 1,000 repeated experiments with different settings of η and α. Here, η denotes the number of measured delays for each data path, which is also the size of each group in the t-test used to identify a target path. α is the significance level used in the t-test. As shown in Figure 8, the accuracy increases with the increase of η. Moreover, we observe that the accuracy increases with the increase of α when η is smaller, e.g., 10 or 20. However, the accuracy tends to stabilize when η becomes large. The reason is that two different groups will statistically differ from each other, and two similar groups will be statistically closer to each other with more data. It is easier to distinguish the two types of paths if we have enough data, which is not significantly impacted by the setting of α. The accuracy always reaches more than 90% with different settings of α when η is 40 or 50.

### Effectiveness of the Attack

To evaluate the impact of the attack on the control packets, we configure the controller to generate 1,000 control packets per second to the switch s2. Figure 9 shows the throughput of control packets. The throughput can achieve 1,000 packets per second. However, it almost drops to 0 under the attack, although there are short-term peaks of throughput. The reason is that our attack triggers TCP of control flows to periodically enter the retransmission timeout phase. In this case, no packets will be sent within the retransmission timeout. Figure 10 shows the delay of control packets. The median value of delays for control packets under the attack is 687 ms, which is more than about 100 times higher than that in the absence of the attack. Moreover, the delays under the attack vary within a large range, from below 10 ms to more than 10,000 ms. Note that most delays without the attack are less than 10 ms. These results demonstrate that our attack can significantly degrade the throughput of control packets and incur high delays.

### Robustness of the Attack

As background traffic may affect the reconnaissances and attack effects, we inject different background traffic into our network using TCPReplay [16]. This traffic comes from two Data Centers (DC1 and DC2) [3], an Internet Backbone (IB) [8], a University (UNIV) [18], and our Laboratory (LAB). Due to the limited flow table capacity in switches, we randomly choose flows from the trace to ensure that the number of rules generated by flows does not exceed the table capacity.

**Figure 11a: Accuracy of Reconnaissances with Different Background Traffic.**

**Figure 11b: Degradation Ratio of Control Traffic.**

- **Accuracy of Reconnaissances (α = 0.01, η = 50)**
  - Without background traffic: 93%
  - With background traffic: 85% to 89%

- **Degradation Ratio of Control Packets**
  - Without attack: 100%
  - With attack: More than 90%

The parameters of reconnaissances, α and η, are set to 0.01 and 50, respectively, which are the best parameters to get the highest accuracy (93%) without background traffic. When background traffic is injected, the accuracy drops to below 90%, ranging from 85% to 89%. However, such accuracy is still satisfactory for an attacker to conduct reconnaissances. The attack always causes more than 90% degradation ratio with different background traffic. These results demonstrate that our attack achieves high robustness.

### Attack Impacts on Network Functionalities

In this section, we perform a systematic study on the impacts of the attack on various network functionalities. We first review the common core services enabled in SDN controllers that generate different types of OpenFlow control messages and are used by various SDN applications. We then study four typical SDN applications, which use these common core services, so that we measure the impacts of the attack on SDN functionalities.

#### 5.1 Core Services of SDN

SDN controllers can be abstracted as a two-layer architecture, though different controllers have different implementations. Applications can be deployed in the top layer to enable different network functionalities, while the lower layer provides different core services that interact with switches and provide basic functionalities for the top-tier applications. As shown in Figure 12, there are four major core services:

- **Packet Service**: Manages packets exchanged between the control and data planes.
- **Flow Rule Service**: Manages flow rules and installs or updates rules in switches.
- **Topology Service**: Maintains the topology of end hosts, links, and switches.
- **Flow Metrics Service**: Collects flow statistics and provides various statistics to applications.

Almost all applications enabling network functionalities in SDN are built on at least one of the four services. Our attack can affect various SDN functionalities by disrupting the transmission of control messages exchanged between these core services and switches.

#### 5.2 ARP Proxy

SDN enables the Address Resolution Protocol (ARP), which finds the association between a destination IP address and its corresponding hardware (MAC) address so that hosts can correctly send and receive IP packets. In IP networks, layer two switches flood an ARP request sent from a host to get an ARP reply. If the target IP address in the ARP request is not in the local network, a router acts as an ARP proxy to send back an ARP reply with the hardware address of its own interface. In SDN, ARP packets are handled by an ARP proxy application in the SDN controller. When an ARP request sent by a host arrives at a switch, it will be sent to the controller via packet-in messages. The packet service extracts the ARP request packet from packet-in messages and dispatches the packet to the ARP proxy application. The application extracts the sender IP address and the source MAC address to store them into the ARP table. Meanwhile, it finds an entry that matches the target IP address in the ARP request. A corresponding ARP reply packet is created and will be sent back to the ingress switch via packet-out messages. Thus, the original host obtains an ARP reply.

Our attack can completely disrupt the functionality of the ARP proxy by interfering with the exchange of messages between the packet service and switches. Figure 13a shows the ARP throughput. The ARP reply rate is proportional to the ARP request rate in the absence of the attack. However, under the attack, the ARP reply rate falls below 10 pps when the ARP request rate exceeds 100 pps. The reason is that the TCP flows of control traffic frequently enter the retransmission timeout phase under the attack due to congestion. Figure 13b shows the CDF of ARP delays. More than 90% of delays are less than 10 ms without the attack, while more than 70% of delays are higher than 10 ms and more than 50% of delays are higher than 1,000 ms with the attack. Delays under attacks significantly increase. Particularly, some delays exceed 10,000 ms, which can cause connection failures between two hosts because hosts cannot get MAC addresses.

**Figure 13a: ARP Throughput.**

**Figure 13b: CDF of ARP Query Delay.**

- **Throughput (packets/second)**
  - 300
  - 250
  - 200
  - 150
  - 100
  - 50
  - 0
- **Delay (ms)**
  - 10
  - 100
  - 1,000
  - 10,000