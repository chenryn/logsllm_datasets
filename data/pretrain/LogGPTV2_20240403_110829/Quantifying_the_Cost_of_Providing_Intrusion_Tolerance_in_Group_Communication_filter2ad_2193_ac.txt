### Performance Analysis of Reliable Multicast and Total Ordering

#### Figure 2: Performance Results for Reliable Multicast and Total Ordering

- **(c) Overhead of Extra Messages in Reliable Multicast**
- **(d) Cost of Cryptography in Reliable Multicast**

**Observations:**
- For all key sizes, there is a sharp increase in the time required for completion when the group size reaches 7 and 10. This is because 7 and 10 are of the form \(3f + 1\), where \(f\) is the number of faults tolerated. When the group size changes from 6 to 7, the number of faults tolerated increases from 1 to 2. Consequently, the number of replies the sender must collect before sending the message (i.e., \(2f + 1\)) increases from 3 to 5. A similar change occurs when the group size increases from 9 to 10.
- Increasing the key size also results in additional overheads, which become more pronounced with larger group sizes due to the increased message traffic.

**Efficiency of Total-Ordering Protocol:**
- The efficiency of the total-ordering protocol depends on how well the chosen sequence-number-generating functions match the actual traffic. In the measurement application, the default generating function (Section 2.3) is well-suited, resulting in low overhead as shown in Figure 2(b).
- The total-ordering protocol slows down message delivery by forcing faster processes to wait for slower ones. If a process is significantly slower, null messages are exchanged, causing additional overhead. Additionally, every delivered message must go through an extra protocol in the stack, leading to some slowdown.

**Cost Breakdown of Reliable Multicast:**
- The cost of reliable multicast can be divided into two parts:
  1. **Cryptography Functions:** To isolate this overhead, we compared the application's performance using the `mnak-no-total` stack and the `reliable-no-total-dummy-crypt` stack. We expected the increase in cost to be less than threefold due to the small size and lower delivery guarantees of the two additional control messages needed for authentication (Figure 2(c)).
  2. **Extra Message Exchange:** This overhead was quantified by comparing the application's performance with and without 1024-bit RSA cryptography (Figure 2(d)). The results show a 1 to 2 orders of magnitude difference in performance depending on the group size, which is expected due to the high computational costs of public-key cryptography.

### Group Membership Results

This section presents the cost of excluding corrupt members from the group when faults occur. Faults were injected at one or more group members, and the following types of faults were considered:

1. **Crash:** The corrupted process kills itself.
2. **Mutant Message:** The corrupted process sends two messages with the same sequence number but different contents.
3. **Impede Total Ordering:** The total-ordering layer in the corrupted process does not send the required null messages when application-level multicasts are stopped.

**Fault Detection and View Installation:**
- Faults are detected in various ways, such as heartbeat messages for crash faults and the reliable multicast protocol for mutant messages.
- A group with more than 6 processes can tolerate two simultaneous faults (double faults). For groups larger than 9, three simultaneous faults (triple faults) can be tolerated.
- Figure 3 shows the view installation times for three protocol stacks:
  - **gmp-reliable-total:** Uses normal cryptography functions.
  - **gmp-reliable-total-dummy-crypt:** Includes the same microprotocols but with a dummy cryptographic library, providing no intrusion tolerance.
  - **C-Ensemble:** Original C version of Ensemble, tolerant only to crash faults.

**Comparison of View Installation Times:**
- Figures 3(a) and 3(b) compare the view installation times for single and double crash faults. The time difference between C-Ensemble and gmp-reliable-total stacks is two orders of magnitude and increases with group size due to multiple rounds of message exchange and the use of public-key cryptography.
- The increase in view installation time with group size is minimal in the C-Ensemble stack (a few milliseconds), moderate in the gmp-reliable-total-dummy-crypt stack (a few tens of milliseconds), and significant in the gmp-reliable-total stack, especially when moving from group sizes 6 to 7 and 9 to 10.

### Conclusion

The performance analysis highlights the trade-offs between fault tolerance and performance in reliable multicast and total ordering protocols. The overhead introduced by cryptographic functions and extra message exchanges is significant, particularly for larger group sizes. The choice of protocol stack and the type of faults tolerated play a crucial role in determining the overall system performance.