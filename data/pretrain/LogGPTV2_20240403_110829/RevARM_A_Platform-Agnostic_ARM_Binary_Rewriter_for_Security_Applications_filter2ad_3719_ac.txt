executed depending on the condition specified in the IT instruction.
We found that it is critical to correctly handle all of IT instructions
as an incorrect handling of IT instruction may cause an erroneous
control flow at run-time. However, handling IT is challenging due
to its dynamic and complex nature, and, unfortunately, existing
works do not address the problem. In this section, we describe how
to handle IT instructions.
IT consists of an opcode and two fields: firstcond and mask.
firstcond indicates which conditions will be enforced on the fol-
lowing instructions. mask determines how many instructions that
follow the IT instruction will become conditional, namely an IT
block. According to mask values, conditions of executed instructions
can be reversed if these instructions belong to the IT block.
To handle IT, we set the IT condition flag in the IR representing
each instruction and insert an IT at every fourth instruction in the
IT block. However, there are two more complications that RevARM
needs to consider. First, each IT can maximally cover only the
following four instructions. Second, the first condition cannot be
reversed. This situation is described in Fig. 5. In Steps 1 and 2 (the
target of the two LDR instructions are unreachable after instruction
insertion. In this case, one more IT must be inserted because the
IT instruction cannot cover five instructions due to the length
limitation. Therefore, SUB must belong to a new IT block at Step
Figure 5: Handling IT instructions.
3. Then, firstcond should be reversed because the first condition
must always be true and IT condition of SUB is a reversed value.
There are two cases which lead to the above case. First, instruc-
tions whose reference range is short belonging to an IT block. Even
with small code insertions within their reference ranges, their refer-
ence ranges may be violated. Second, some instructions are inserted
into an existing IT block. In this case, inserted instructions are en-
forced by the IT condition at the inserted address. However, we
should consider two IT restrictions before insertions. The first re-
striction is that any instructions within IT block cannot set the
condition flags except CMP, CMN, and TST. These behave differently
from traditional branch instructions. Therefore, we must not re-
place IT with branch instructions such as B, BL, BLX, BX. In
addition, some instructions such as B cannot be inserted into an
IT block. In this case, RevARM rejects the insertion because such
trials are invalid, resulting in unpredictable results when they are
executed [6]. Finally, some branch instructions such as BX can be
inserted with location limitation to the end of an IT block.
3.5 Branch Table Instructions
In x86, a switch statement in C/C++ is often implemented using
conditional jump instructions (e.g., JE). In contrast, ARM provides
special branch instructions for switch statements: Table Branch
Byte (TBB) and Table Branch Halfword (TBH). These branch in-
structions dereference the jump table location first and then select
the target address for the chosen case. Unfortunately, the branch
instructions have limited reference distances and this limits the
size of inserted instruction/data in ARM binary rewriting. To over-
come this limitation, we handle the branch table instructions dif-
ferently based on the reference distances that the instrumentation
requires: short switch with TBB, medium switch with TBH, and
long switch with LDR.
In Fig. 6a, we show an example of the short switch with TBB.
The jump table is referenced by PC because the current PC value
plus four which indicate the next PC value is the jump table location.
Then, the value of R2 determines which case will be selected. TBB
DATA CODE IT:EQ LDR LDR T E T 1.Pre-InsertionREACHABLE:YDATA SUB SUB IT:EQ ADD ADD LDRLDRIT:NET T T TT 4.Revise ITREACHABLE:YDATA CODE DATA DATAIT:EQ LDR LDR T E T 2.Post-InsertionREACHABLE:NCODEDATASUB DATA CODE SUB IT:EQ ADD TTT ET 3.Extend InstructionREACHABLE:YDATA LDRADDLDRIT:EQ: Partially Reachable Space: Reachable Space: Unreachable : Reference : Unreachable Space(a) Before insertion.
(b) Insertion failure due to the limited
reachable distance.
(c) 8-byte instruction insertion.
(d) More than 200-byte instruction in-
sertion.
Figure 6: An example of making unreachable switch statement reachable via instruction/data replacement.
basically reaches only 0x22 relative address because only one byte
is assigned to it. In other words, it can maximally reach 0x8E82.
Therefore, the default case located at 0x8E84 is unreachable if 8
bytes of instructions are inserted as described in Fig. 6b. In order
to resolve this problem, RevARM replaces the short switch with
medium switch consisting of TBH and two-byte relative address
values as illustrated in Fig. 6c.
However, when more than 200 bytes of instructions are inserted,
even medium switch cannot reach the default case since TBH’s
maximum reachable distance is 0x202. In this case, RevARM re-
places medium switch with long switch as described in Fig. 6d.
Unlike both TBB and TBH, long switch relies on LDR and absolute
addresses which cover the whole address space. In order to jump to
the right location, ADR resolves the jump table location by adding
the next PC value and relative jump table address via ADR. Then,
LDR dereferences the jump table address stored in R4, selects one of
absolute addresses using R2 and then updates the PC value with the
selected jump address. We note that the last bit of each absolute
address should be set if referenced instructions are thumb-mode
instructions as described in §3.7. Also, each absolute address should
be word aligned as illustrated in §3.8.
3.6 Direct Access to the Program Counter
The ARM architecture handles the PC register as a general register.
This allows many instructions (e.g., LDR, MOV, ADD and etc) to directly
read from and write to PC. Such access to PC involves dereferencing
the target address before control transitions or referencing data,
which occurs frequently in position independent code (PIC). In order
to properly instrument the binary, RevARM dereferences the target
address. Such dereference requires backward slicing [66] to figure
out which instructions (e.g., LDR to load pointer values and ADD
to modify a referenced address value) involve reading or writing
PC. This is because most PC register accesses are performed via
multi-staged address dereferences. After finding sliced instructions,
RevARM dereferences the target address and modifies the correct
address value on instructions or code pointer values to keep code
and data dereference correct.
Fig. 7a presents an example of code address dereference. Deref-
erence is done by executing two instructions: LDR and ADD. In this
case, the target function (PC-relative address at 0x8CB8) is loaded
by LDR. Then, ADD adds the PC value to resolve the target address.
(a) Relative code address dereference.
(b) Relative data address dereference.
Figure 7: Examples of the address dereference using the PC.
After that, BLX will be executed to jump to 0x8CB8. In the case of
the data address dereference, both MOVW and MOVT puts the relative
address of data in R2. Then, PC is added to R2 via ADD. This derefer-
enced data address is used as a parameter of objc_msgSend which
is a typical iOS function call.
3.7 Run-time Instruction Mode Switching
32-bit ARM architecture provides two interchangeable instruction
mode (ARM and Thumb). Unlike conventional architectures, ARM
allows a program to switch the instruction mode even at run-time.
This adds new challenges to ARM binary rewriting because many
real-world ARM binaries are written in both ARM and Thumb
instructions to reduce the binary sizes. In order to properly han-
dle the instruction mode switching while keeping control flows
correct, RevARM must abide by the branch rule of run-time instruc-
tion mode switching. There are three branch instructions capable
of changing the instruction mode: BLX, BXJ, and BX. When they
triggers branch operations, they have both target address and in-
struction mode bit. Such instruction mode bit is always located at
the lowest bit of the address value. If the lowest value is set to 1 then
the jump target executes in the Thumb mode. Otherwise, it will
be executed in the ARM mode. Designed to be aware of the mode
switching, RevARM separately handles direct and indirect branch
instructions. In terms of the direct branch, RevARM simply set or
clear the instruction mode bit according to the instruction mode
of the referenced instruction. On the other hand, RevARM should
perform backward slicing to dereference code pointer values. Then,
it modifies pointer values in instructions or data. Further, when
inserting instructions into the binary, RevARM makes sure that
instrumented program uses the correct instruction mode before
executing the inserted instructions. For example, RevARM ensures
that the CPU switches to the Thumb mode whenever the inserted
0x8E60   TBB [PC,R2] 0x8E64   DCB 0x2         case00x8E65   DCB 0x6case10x8E66   DCB 0xAcase20x8E67   DCB 0xCdefault-----------------------------0x8E68   LDR  R4,[R1]   case00x8E7C   LDR  R4,[R3] default----------------------------------------------------------…………0x8E60   TBB [PC,R2] 0x8E64   DCB 0x2         case00x8E65   DCB 0xAcase10x8E66   DCB 0xEcase20x8E67   DCB0x10?default-----------------------------0x8E68   LDR  R4,[R1]   case00x8E84   LDR  R4,[R3] default---------------------------------------------------------…………Fail to inserting 8bytes0x8E60   TBH  [PC,R2,LSL#1] 0x8E64   DCW 0x04         case00x8E66   DCW 0x0Ccase10x8E68   DCW 0x10case20x8E6A   DCW 0x12default-----------------------------0x8E6C   LDR  R4,[R1]   case00x8E84   LDR  R4,[R3] default---------------------------------------------------------…………8bytes were inserted0x8E68   DCD 0x8E78+1         case00x8E6C   DCD 0x8E80+1case10x8E70   DCD 0x8E88+1case20x8E74   DCD 0x908C+1default----------------------------------------------------------0x8E78   LDR  R4,[R1]   case00x908C   LDR  R4,[R3] default----------------------------…………0x8E60   ADR R4,PC,#0x80x8E62   LDR PC,[R4,R2,LSL#2]0x8E64   ALIGN 4         200 bytes were inserted2)Code AddressDereference1)Relative Address Load.....0x8982 BLX      R10x8980 ADD      R1,PC ; sub_8C780x897A STR      R7,[SP,#0xC8+var_2C]0x8978 LDR      R1,=(sub_8C78-0x8984)0x897C STR      SP,[SP,#0xC8+var_24]--------------------------------------0x8CB8 DCDsub_8C78-0x8984 Data Address Dereference0xA018 MOVW     R2,#(WiFi_pass-0xA026)0xA01E MOVT     R2,#(WiFi_pass-0xA026)0xA026 BLX      objc_msgSend....0xA01C MOV      R4,R50xA020 STR      R4,[SP,#0x30+var_30]0xA022 ADD      R2,PC ; "WiFi_pass"Thumb instructions are executed while the instrumented program
is running in the ARM mode.
3.8 Alignment
In this section, we described the three alignment cases which
RevARM must correct: code, data, and reference address alignment.
Code Alignment: Since the instruction mode can be switched dy-
namically in ARM, all ARM mode functions (i.e., functions written
in ARM instructions) and Thumb mode functions (i.e., functions
written in Thumb instructions) must be aligned to a word (4 bytes)
and a half-word (2 bytes), respectively. However, after the instru-
mentation, the stretched binary may not have the correct alignment,
especially when the binary contains both ARM and Thumb mode
functions. In such a case, RevARM re-align the code by inserting
or removing NOP instructions before each function affected by the
instrumentation, similar to how a compiler handles code alignment
while generating the machine code.
Data Alignment: ARM allows instructions to load data in a code
section in alignments of byte, half-word, word and double-word.
From our observation, such data are aligned to word or double-
word. Even if there are byte and half-word data, they will be word
aligned by compilers. Therefore, RevARM aligns word data in 4
bytes and double word in 8 by inserting or removing NOP.
Reference Address Alignment: The Thumb mode supports half-
word aligned addressing. However, there are several instructions
that cannot access half-word aligned addresses. For example, VLDR,
half-word-sized LDR and ADR — because their two lowest address-
ing bits are ignored. These mostly reference data in a text section
due to their short reference ranges. Except data referenced by TBB
and TBH, they are aligned to word or double-word. Therefore, it is
not necessary to add additional logic to reference data in a code
section. However, ADR sometimes needs to reference half-word
aligned addresses. RevARM handles these by reordering indepen-
dent instructions or replacing them with half-word-addressable
instructions while such cases rarely happen.
3.9 Code Pointers
Data and metadata sections contain code pointers which must be
adjusted with respect to the new address space layout modified by
our instrumentation. However, it is challenging to identify code
pointers in binaries because semantic information for those code
pointers has been removed by the compiler. In order to solve this
problem, RevARM adopts similar approaches proposed in previous
work [62, 69] to recognizing pointer-like data. Specifically, RevARM
checks whether pointers reference an instruction start address in a
certain section. Note that we must also consider the branch rule of
the Thumb instruction mode. As illustrated in §3.7, the lowest bit
of the Thumb instruction address have to be set. Therefore, we can
filter out code pointer-like data if it refers to Thumb instructions
without setting the instruction mode bit.
3.10 Mach-O Metadata
Metadata handling is critical for Mach-O binaries since the validity
of the metadata is checked by Apple’s vetting process in order for bi-
naries to appear in the App Store. We note that RevARM is designed
to handle other popular binary formats (e.g., executable and link-
able format (ELF)). Although the ELF format is well-documented
[1] and supported by other binary rewriters, the official document
which describes the Mach-O format only covers a few parts, leav-
ing many other parts uncertain. Below we describe these uncertain
parts, which can often lead to an incorrect binary transformation.
To handle the Mach-O binaries, RevARM should revise load
commands and metadata sections. Load commands let the loader
identify how to load an input binary in specified addresses. On the
other hand, metadata sections contain symbols and other informa-
tion that the linker uses.
For load commands, RevARM modifies file offsets, virtual ad-
dresses and sizes of the file and virtual address space for modified
segments, sections and function start addresses to adjust the new bi-
nary layout. For metadata sections, RevARM also modifies identical
types of information described for the load commands.
More importantly, variable-length addresses are also stored in
the metadata sections. Such addresses are encoded with uleb128 as
the DWARF format stores them. For example, the dynamic loader’s
information consists of a set of nodes which respectively encoded
symbols and other nodes absolute or relative addresses. Function
start addresses are encoded in the same way. Hence, RevARM must
increase the sizes of encoded addresses because of the stretched
values of addresses between functions and symbols, which lead
to larger encoded address values. As a result, RevARM stores the
original data and reconstructs it after instrumentation.
4 EVALUATION
We tested RevARM on two commodity target systems: a mobile
system and an embedded system. Our target mobile system is iOS
version 10.0.2. For our target embedded system, we selected a 3DR
IRIS+ [27], a popular quad-copter UAV based on the 3DR Pixhawk
micro-controller [20]. Pixhawk contains an ARM Cortex-M4 pro-
cessor with 256KB SRAM, and a 2MB flash memory, which is quite
representative of a resource-constrained environment. The UAV is
controlled by ArduPilot [12], a robotic vehicle controller program.
ArduPilot supports many different types of unmanned vehicles
(UxVs), such as copters and planes, as well as ground and underwa-
ter vehicles. For any UxV based on the Pixhawk micro-controller,
ArduPilot runs the NuttX [29] real-time operating system (RTOS)
along with many other operational components, including device
drivers, libraries, and applications. In addition, ArduPilot relies
on MAVLink [18] which is responsible for communicating with a
ground control station (GCS) for the UAV. The GCS sends control
commands abiding by the MAVLink protocol. We tested RevARM
on such large-scale firmware to show that our approach is effective
on complex ARM binary programs. In addition, we instrumented
Mach-O binaries and stripped/non-stripped firmware binaries us-
ing RevARM to test the effectiveness of the binary rewriting on
our iOS and UAV target devices, respectively.
In order to verify the correctness of RevARM’s instrumented
binaries, we conduct an experiment that inserts NOP instructions
in between every instruction in the binaries. Then, we run the
instrumented binaries with various workloads. Specifically, for bi-
naries on ArduPilot, we run all flight missions provided by the
vendor (127 missions) on the instrumented binaries. Moreover, we
Table 3: Instrumentation APIs of RevARM
Table 4: Fine-grained code diversification with NOP insertion.
Description
Responsible for all preprocessing procedures
Prototype
preproc
instrument Main instrumentation function
rearrange
flush
Control flow rearrangement to keep control flows intact
Write an instrumented binary to a binary form
Program
Twitter
Gmail
Amazon
Firmware
PerformanceTest
Code size Diversified code size
12KB
3,973KB
191KB
16,995KB
1,024KB
7KB
2,367KB
117KB
9,950KB
596KB
# of inserted NOPs
2,448
786,909
35,688
3,372,547
201,678
Space overhead
1.39%
1.78%
2.1%
2.77%
3.26%
manually trigger all possible operations supported by ArduPilot
(77 operations). For the instrumented iOS apps such as Twitter,
Gmail, Amazon, and PerformanceTest, we exercise all functionali-
ties displayed on the screen (e.g., click all buttons, explore all menu
items).
RevARM is built upon an IDA-Pro 6.8 Plug-in which is respon-
sible for disassembling the ARM binaries and identifying func-
tions [16]. However, the RevARM technique is generic enough to
be directly ported to other disassembly libraries (e.g., Capstone
[24] or Radare2 [31]). In addition, we thoroughly evaluate the com-
patibility of RevARM on binaries generated by different compilers.
Specifically, we analyzed binaries generated by popular compilers
on three different platforms: GCC 4.9.3 for embedded systems (e.g.,
ArduPilot), GCC 4.8.2 on top of Linux, and Clang on iOS. Our result
shows that RevARM is able to instrument binaries from all these
compilers/platforms, without breaking any of the binaries. Finally,
RevARM provides a set of APIs in order to facilitate instrumenta-
tion and functional extension on ARM binaries. We summarized
these APIs in Table 3. In this section, we show that RevARM can
be used in various security applications: fine-grained code diversi-
fication, vulnerable function patching, private API call prevention
via SFI [56, 59, 67], and control system status monitoring. Then, we
show run-time and space overhead.
4.1 Case Study I: Fine-grained Code