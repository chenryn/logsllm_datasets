6https://publicsufﬁx.org/
7https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-02
particular, if the Host- preﬁx is not used, any compromisable
host on a related domain would be enough for the attack.
More precisely, given a host h, we let related (h) note the
set of the hosts whose domain is related to the domain of h.
Technically, this implies that any host h(cid:2) ∈ related (h) can set
a cookie c such that h ∈ hosts(c), which means that c might
be eventually received by h and harm its security. Notice that,
although h(cid:2)
may not be able to directly overwrite host-only
cookies set by h, it could still obtain the same effect by cookie
shadowing, i.e., by setting domain cookies with the same name
of host-only cookies so that the target website is fooled into
accessing the former [94]. Also, the domain cookies may be
set before the host-only cookies are ever issued, which makes
cookie shadowing attempts undetectable in general.
Deﬁnition 7 (Low Integrity Cookie). A cookie c set by the
host h has low integrity if and only if any of the following
conditions holds:
1) h is compromisable;
2) c does not have the
compromisable host h(cid:2) ∈ related (h).
Host- preﬁx and there exists a
B. Experimental Results
We ﬁrst isolated from the 10,000 crawled websites the 4,018
websites with a private area, i.e., supporting the establishment
of authenticated sessions. This was assessed heuristically by
checking any of the following two conditions:
1) the page includes a login form, i.e., a form with both a
text/email ﬁeld and a password ﬁeld;
2) the page includes a single sign-on library from a list of
popular identity providers.
Out of the 4,018 websites with a private area, we found 404
cases where password conﬁdentiality was not ensured (10.0%),
either because the password was sent over a leaky channel or
because the page with the login form was compromisable.
Attacks against these pages would allow an attacker to imper-
sonate legitimate users and start new sessions on their behalf.
We then turned our attention to the security analysis of
cookies. The left portion of Table III reports the number
of low conﬁdentiality and low integrity cookies collected
from the full set of 10,000 websites. In total, 19.1% of
all cookies have low conﬁdentiality, while 18.7% have low
integrity, which suggests that
the risks of cookie leakage
and cookie tampering in the wild are far from remote. The
most interesting observation is that ensuring conﬁdentiality
for domain cookies is much harder than for host-only cookies:
21.6% of the domain cookies have low conﬁdentiality, while
this percentage decreases to 12.5% for host-only cookies. The
reason is that the attack surface for domain cookies is much
larger, because it is enough to ﬁnd one related domain which
suffers from conﬁdentiality issues to leak them; yet, 73.1% of
the collected cookies are domain cookies. As to integrity, the
difference between domain cookies and host-only cookies is
almost negligible and the most concerning observation there
is that only one of the 10,000 websites we crawled makes use
of cookie preﬁxes to improve cookie integrity.
(cid:19)(cid:26)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
COOKIE CONFIDENTIALITY AND INTEGRITY ISSUES
TABLE III
Low conﬁdentiality
Low integrity
Host-only (11,784)
1,469 (12.5%)
2,093 (17.8%)
All cookies
Domain (31,998)
6,903 (21.6%)
6,116 (19.1%)
Total (43,782)
8,372 (19.1%)
8,209 (18.7%)
Host-only (3,942)
425 (10.8%)
694 (17.6%)
Session cookies
Domain (7,818)
1,633 (20.1%)
1,435 (18.3%)
Total (11,760)
2,058 (17.5%)
2,129 (18.1%)
To better understand the import of these numbers on web
session security, we restricted our attention just to the session
cookies set from the 4,018 websites featuring a private area.
Session cookies were identiﬁed using a heuristic proposed in
previous work [16], which was shown to be fairly accurate
in practice and nicely ﬁts our large-scale investigation. The
right portion of Table III presents the results of such analysis,
which shows that
the high-level picture does not change
signiﬁcantly when we focus just on session cookies. Moreover,
we observed that 412 websites (10.2%) may leak all their
session cookies due to cryptographic ﬂaws, which may allow
network attackers to impersonate legitimate users of these
websites. It is worth noticing that, if all these cookies could
be marked as HttpOnly without breaking the functionality of
the websites, the number of websites vulnerable to this threat
would reduce to 207 (5.1%). This shows that a complete
deployment of the HttpOnly attribute would be quite effective,
yet not sufﬁcient to fully protect honest users against session
hijacking, since session cookies could still be sent over par-
tially leaky channels.
Finally, we found 543 websites (13.5%) whose session
cookies all have low integrity, which may allow the attacker
to force honest users into attacker-controlled sessions (cookie
forcing). In all cases, the cookie integrity problems were due
to the presence of a vulnerability in a related domain, but we
also found 404 cases where also the base domain suffers from
integrity ﬂaws. The Host- cookie preﬁx would be useful to
improve session security in the 139 cases (25.6%) where the
integrity vulnerabilities are conﬁned to related domains, but
unfortunately only one of the crawled websites (dropbox.com)
uses cookie preﬁxes. Remarkably, we observe that 22 out of
these 139 cases (15.8%) could safely introduce the Host-
preﬁx without compatibility problems, as none of their session
cookies is a domain cookie.
C. Detected Attacks
Since the numbers in the previous section may have been
affected by the use of heuristics to detect private areas
and session cookies, we report on a selected set of manual
experiments to conﬁrm the existence of credential stealing
and session hijacking attacks on prominent websites in the
wild. For ethical reasons, we did not tamper with websites
to test concrete attacks. Rather, we carefully checked all the
conditions required to mount attacks against the targets and
employed a local proxy to simulate the attack.
One notable example where password conﬁdentiality is not
ensured is Myspace. The login page and the endpoint where
the password is sent are both served on myspace.com, that is
directly vulnerable to ROBOT. Thus, an attacker could either
sniff the password from a tainted channel or actively inject a
script in the page to leak access credentials from the DOM.
Session hijacking has been identiﬁed as a realistic threat on
the yandex.com web portal. In this case the main host itself
is secure, but the presence of a partially leaky channel on
api.developer.store.yandex.com makes possible for an attacker
to disclose all domain cookies by forcing the victim’s client
to iterate requests against that speciﬁc host from an attacker’s
controlled origin. All cookies set by the website after logging
in are domain cookies, including Session_id that is used to
authenticate user sessions, proving the attack to be practical.
Finally, cookie forcing has been found on the Microsoft
webmail live.com. Our large-scale assessment found that the
host exchange.backcountry.com is vulnerable to ROBOT and
presents a certiﬁcate valid also for outlook.live.com. Since the
host of one of the related domains of live.com is compromis-
able, an attacker could mount a MITM to overwrite the cookies
of a honest user, forcing her into the attacker’s session.
VII. WEB TRACKING
In this section, we discuss how leaky and tainted channels
can be abused to track navigation behaviours of web users and
breach privacy at scale.
A. Security Analysis
Online tracking is pervasive on the Web and has signiﬁcant
privacy implications [68], [34]. Third-party tracking is partic-
ularly dangerous for user privacy, because it allows trackers
to reconstruct a cross-site navigation proﬁle of online users
at scale. In this form of tracking, the tracker is embedded on
external websites in a third-party position, i.e., using iframes,
so that it is able to set a tracker-owned cookie containing a
unique identiﬁer in the user’s browser. Every time the user
accesses a website where the tracker is present, her browser
will automatically send a request including the cookie to the
tracker: since this request also includes the Referer header,
which tracks the page from which the request was sent, the
tracker becomes able to reconstruct the navigation proﬁle of
the user identiﬁed by the cookie.
Network attackers can easily disclose a lot of information
about navigation patterns just because they are in control of
the network. For instance, they can link a given IP address to
all the domain names requested from it. However, this does
not necessarily allow the attacker to build a navigation proﬁle
of the target user, e.g., because the same IP address is shared
by multiple users (in case of NATs) or because the same user
is assigned different IP addresses upon different connections.
(cid:19)(cid:26)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
TOP TRACKERS INTRODUCING PRIVACY FLAWS
TABLE IV
Tracker
snap.licdn.com
l.betrad.com
hbopenbid.pubmatic.com
kraken.rambler.ru
ads.pubmatic.com
simage2.pubmatic.com
counter.rambler.ru
tag.1rx.io
fw-sync.nuggad.net
t.pubmatic.com
Including Websites
126
100
76
66
47
30
25
20
18
17
Still, it is known that network attackers may become able to
build cross-site navigation proﬁles of users by monitoring the
presence of tracking cookies in the HTTP trafﬁc [35]. Here we
discuss a similar attack, which exploits existing conﬁdentiality
issues in the HTTPS implementations of web trackers.
Assume the attacker wants to learn whether a user identiﬁed
by the tracking cookie c has ever accessed the page p. If the
page p includes sub-resources from a tracker-controlled host
h ∈ hosts(c) over a leaky channel, the attacker may be able
to associate the value of c to the page p via the Referer header.
However, even if p does not include anything from the tracker,
the attacker can force such leaky content inclusion when p
itself is compromisable, thus amplifying the privacy risks. This
leads to the following deﬁnition.
Deﬁnition 8 (Proﬁling). A tracking cookie c allows proﬁling
on the page p if and only if there exists a host h ∈ hosts(c)
which allows for the establishment of leaky channels and any
of the following conditions holds:
1) p sends a request to h;
2) p is compromisable.
B. Experimental Results
We downloaded a list of 2,399 prominent tracking domains
provided by Disconnect8 and we checked for content inclu-
sions from them in the 10,000 websites taken from Alexa. In
particular, we focused on inclusions from any sub-domain of
the trackers, because domain cookies could be used to perform
tracking when including contents (of any type) from them. By
doing this, we managed to identify a set of 4,226 tracker-
controlled hosts which may potentially be abused to perform
user proﬁling on the Alexa websites. We then analyzed these
hosts, checking whether they allow the establishment of leaky
channels, and it turned out that 82 (1.9%) of them suffer from
this security issue.
We report in Table IV the list of the most popular vulnerable
tracker-controlled hosts, along with the number of websites
from Alexa which included contents from them. These vul-
nerable hosts are controlled by different companies basing
their business on web tracking and analytics. By checking
against Cookiepedia,9 we conﬁrmed that at least four of these
8https://github.com/disconnectme/disconnect-tracking-protection
9https://cookiepedia.co.uk/
companies rely on the practice of setting long-lived domain
cookies for third-party tracking: PubMatic, Rambler, Rhyth-
mOne and nugg.ad. To understand the privacy implications
of these security issues, we focused on the hosts controlled
by PubMatic, which are the most numerous: attacking the
vulnerable hosts of PubMatic would allow one to reconstruct
navigation proﬁles over 142 websites which include contents
from them. Moreover, by injecting references to these hosts in
any of the 898 compromisable homepages from our dataset,
this privacy attack could be further ampliﬁed to track naviga-
tion behaviors across 968 websites (9.7%).
VIII. CLOSING REMARKS
A. Related Work
Novel attacks against TLS were often released with the
analysis of their impact in the wild, by measuring the number
of vulnerable servers in scans of the IPv4 address space or
the most popular websites ranked by Alexa. This was true for
RSA keys factorable by Batch GCD algorithm [42] and attacks
like DROWN [4] or Logjam [1]. Small subgroup attacks
against Difﬁe-Hellman were measured by Valenta et al. [84].
Dorey et al. [28] measured misconﬁgured DH key parameters
that potentially contain backdoors. The prevalence of several
attacks against the Elliptic Curve DH key establishment in
TLS was measured by Valenta et al. [85]. Some vulnerability
measurements were revisited to track the progress of patching,
such as Heartbleed [33] and the Batch GCD method [39].