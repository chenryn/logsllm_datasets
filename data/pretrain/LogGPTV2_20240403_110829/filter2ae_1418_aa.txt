# 设备指纹指南：下篇
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
**[设备指纹指南：上篇](https://www.anquanke.com/post/id/216259)**
## 五、设备指纹向量
用设备指纹需要考虑很多特性，在身份验证的需求下，准确率要求很高。广告营销在80%或90%的准确率可能就够了，但安全领域显然不行。
为提高准确性，设备指纹采用了多个指纹向量。前面说的所有向量都可自由组合，但整体受限于用户体验和验证成本。第一到第三类涉及用户端JavaScript，会产生非零但较小的开销。为了帮助比较向量，并提供组合可能，还需要提供可识别性的预测值。
### 5.1 稳定性
实际上设备指纹的所有组成部分都会发生变化，但有些组成（如台式机或很少移动设备的时区）的变化频率可能比其他组成（如浏览器版本）低得多。设备指纹的重大变化可能要求服务器对用户的认证降级，通过二次短信重新验证。因此从可用性的角度来看，最好是结合一个随时间稳定的指纹方法，即在给定时间内，有足够多稳定向量。通过结合多个向量实现变化的评分机制，可以提高整体指纹的稳定性。在Eckersley的实证研究中，提到的算法在65%的设备中正确地将新旧指纹关联，准确率达到99.1%。如果这样的算法用于身份验证，误报仍然很大。
第一类到第三类的向量大多比较稳定，但也有个别例外：
1(a)如果用户升级操作系统、切换浏览器、安装或删除浏览器插件等，主要的软硬件细节会偶尔发生变化。
1(d)电池信息会发生变化，因为电池会老化。
2(a)HTML5画布渲染细节会随着浏览器、操作系统或显卡驱动更新而变化。
2(e)CSS功能检测和2(f)JavaScript标准一致性会随着浏览器更新而改变。
相比之下，第四类的向量一般不太稳定：
4(a)IP地址、4(b)地理位置和4(f)DNS解析会随着用户从不同地点登录而改变。
4(c,d)
TCP/IP协议栈指纹会随着路由变化，这些变化会影响到用户和服务器之间的往返延迟和跳数等。如果用户从不同的网络位置登录，则可以观察到额外的变化，例如，网络链路的MTU，或者由于不同的防火墙规则对探测数据包的响应。
4(e)协议指纹会随着浏览器或SSL/TLS库的更新而变化。
4(h)随着时间的推移，NAT后面主机是不稳定的，设备可能会进入和离开网络。
例外的是4(i)广告拦截器检测和4(g)时钟偏移，TCP时间戳反映的是CPU时钟偏移，相对稳定。哪怕是在长时间内不稳定的向量，如果只在短时间内进行识别，例如在一天、一小时或一个会话中，则仍然有用。
### 5.2 可重复性
可重复性定义为：如果设备软硬件和网络配置不变，那么一个向量就会产生相同的结果，而稳定性主要涉及设备配置的变化。除了以下这些例外，大多数向量都是可重复的。
2(b) 系统性能因设备任务负担有所不同。对于移动设备来说也可能取决于温度，移动芯片组在高温下会降低速度。  
2(c)、4(g) 温度会影响硬件传感器数据和时钟偏移。
2(d)滚轮指纹要求用户使用滚轮，如果用户没用滚轮，那么该向量不可重复。
2(h) 可用 VRAM 会根据设备当前使用的数量而变化。
4(f) 由于DNS解析服务器的负载均衡，使用的DNS解析服务器可能不同。
4(h)计算NAT后面的主机会因网络上存在其他设备而不同。
如果在整个设备指纹中使用了很多向量，并且使用了适当评分机制，那么不可靠指纹向量则仍然有价值。
### 5.3 资源使用
指纹向量需要系统资源CPU、内存或I/O，会带来性能消耗和电池成本。对于每次认证过程只给设备打一次指纹的网站来说，这一点并不太重要，但对于在整个会话中反复打指纹来检测会话劫持的网站来说，这一点很重要。
大多数向量开销都较小，在毫秒范围内的处理时间，但少数可能需要秒级的时间:1(d)电池信息，2(b)系统性能，2(c)硬件传感器，和2(h)显卡RAM检测。而2(b)消耗CPU，2(h)消耗
GPU内存，1(d)和2(c)需要时间收集足够的数据，因此速率降低一半。
### 5.4 抗欺骗性
攻击者会伪造相似设备指纹，因此需要抗欺骗性。第一类到第三类的向量，浏览器运行JavaScript，并将输出返回到服务器，这样攻击者很容易拦截响应，但有三种情况下例外：
1(e)Evercookies是有状态的，可以使用例如Flash
cookies和HTML5本地存储来存储全局标识符，这些标识符受到同源策略的保护。与其说是欺骗，不如说是evercookies可能被攻击者窃取并重放，不过这需要利用漏洞。
2(c)硬件传感器，可以通过从用户端获取传感器数据并重放来进行欺骗，但首先获取这些数据需要用户配合，浏览器在访问麦克风之前需要询问用户许可。
3(c)如果插件被设计成只与安装该插件的网站进行通信，则攻击者需要更多方法才能获得这个信息，例如硬件标识符。
相比之下，第四类的抗欺骗性更强，但没有一个可完全免疫。以下向量具有较强的抗欺骗性：
4(a)
由于整个互联网的源地址验证不足，IP源地址欺骗是可以做到的，而且经常用来发动DoS攻击。但是，使用欺骗源地址与主机建立双向通信就困难了，因为服务器总是会向欺骗地址发送响应数据包。
4(g)时钟偏移指纹可用于识别无线传感器和802.11无线局域网中的接入点，这两种技术都依赖于各自MAC协议中使用的时间戳。Arackaparambil的论文说明，时钟偏移可以被欺骗，但可通过分析检测到不规则性，使用较小的801.11信标帧传输间隔(通常为100ms)会使不规则性更明显，从而更容易检测到。与MAC协议的时间戳相比，从TCP时间戳中得出的时钟偏移结果更粗糙，但仍然可被检测到。
4(i)广告拦截器检测和4(e)协议指纹检测，可以通过使用与目标设备相同浏览器和版本很容易欺骗，除此之外其余的第四类向量中属于部分抗欺骗：
4(b)位置验证，使用代理，浏览器位置 API 的地理定位可以很容易被欺骗，但这属于第一类。
4(c,d) 欺骗操作系统TCP/IP协议栈可以通过各种现成的工具，伪造网络或链路相关的信息，如跳数、延迟和MTU，需要一些成本。
4(f) 如果用户使用运营商的DNS服务器，则攻击者需要篡改DNS指向。
4(h)欺骗NAT后面的主机数量的难度根据技术实现有所不同，基于IPv4 ID字段的简单技术比较容易欺骗，但基于时钟偏移的技术则比较困难。
因此，可以通过策略增加防御能力。例如对于2(a)HTML5画布指纹，当设备首次与账户关联时，服务器可以发送多个挑战，让其渲染不同文本和图形，用户端返回相应的结果。然后，服务器可以在每次认证时随机选择挑战子集。提高对简单重放的防御能力可提高抗欺骗性，但攻击者资源可能比较丰富，尤其黑产，能够为任何挑战配置模仿。不同策略可能会增强其他向量的抗欺骗性，例如对于2(b)系统性能，可以用用用户端数学题的方法，即服务器向用户端发送数学题，测量每次计算的时间变化。
### 5.5 被动客户端
被动客户端不需要设备的明确支持，第一到第三类的所有向量都需要浏览器执行JavaScript并将输出返回，这些都不是被动的。第四类向量在某种程度上都是被动的，因为不需要明确的客户端合作授权。
4(b)地理定位可以是被动的，主要取决于机制，例如基于IP的地理定位是被动的，不需要用户端JavaScript的向量。  
4(c)主动式TCP/IP协议栈指纹需要向用户端发送额外的探针包来观察响应，发送探测数据包不需要用户合作。