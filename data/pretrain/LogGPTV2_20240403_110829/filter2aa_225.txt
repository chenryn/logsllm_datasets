1
Acquiring .NET Objects from the Managed Heap
Topher Timzen
Southern Oregon University Cybersecurity Research Lab
F
ABSTRACT
This paper will describe how to use instantiated
objects on the .NET CLR Managed Heap as if
they were declared locally. It will be shown
that by referencing an object pointer from the
Managed Heap, an attacker can take control
over any object being used in an application.
Reﬂective techniques will be discussed and a
signature will be introduced to ﬁnd objects on
the Managed Heap.
1
INTRODUCTION
The .NET Framework uses the Common Lan-
guage Runtime, CLR, to manage the execution
of .NET programs. There are 4 major versions of
the CLR available and multiple .NET versions
within each [2].
| CLR Version
|
.NET Version
|
|−−−−−−−−−−−−−|−−−−−−−−−−−−−−−|
|
1.0
|
1.0
|
|
1.1
|
1.1
|
|
2.0
|
2 . 0 ,
3 . 0 ,
3.5
|
|
4.0
|
4 . 0 ,
4.5
|
For the purpose of this paper, only CLR
versions 2.0 and 4.0 will be discussed as the
author feels 1.0 and 1.1 are not relevant for
attacking modern applications.
Using Reﬂection [4] key information about
an object can be discovered. A plethora of
information in objects is useful for attacking
or reverse engineering such as a list of ﬁelds,
instance methods, static methods and variables
that an object contains. Furthermore, once an
object is locally accessible an attacker can ma-
nipulate it in any way they want.
Any object can be instantiated using reﬂec-
tion. While that local reference is not neces-
sarily usable by an attacker, it can be used to
reveal both the signature of all objects of that
class and the memory location of the Managed
Heap, bypassing any Address Space Layout
Randomization, ASLR. All instantiated objects
from a speciﬁc class share the same Method
Table (MT) pointer, which will be used later to
locate objects on the Managed Heap.
Once the MT for a speciﬁc class is known
and the Managed Heap discovered, an attacker
can scan through the Managed Heap to locate
all objects instantiated from a speciﬁc class and
use them locally. To showcase this technique
a sample application written in .NET will be
utilized and compiled in x86 and x64 with both
the 2.0 and 4.0 CLR.
2
FINDING OBJECTS WITH WINDBG
In order to understand what objects look like
in memory WinDbg was used frequently in the
author’s analysis. Using the SOS Debugging
Extension (SOS.dll), WinDbg allows the user to
debug managed applications (programs using
the CLR)[3]. The most useful extensions to lo-
cate and understand objects are dumpheap and
dumpobj. The following WinDbg results are for
the 2.0 CLR in x86, but the same techniques
apply for all runtimes and x64.
2
Running dumpheap will show all of the ob-
jects on the Managed Heap, where each object
lives on the heap, the size of the object and
its MT pointer. Most of the addresses from
dumpheap for the following example are within
the range 0x02721000 to 0x0284f35c with a few
appearing from 0x03721000 to 0x037f0578. So
far, objects of concern have appeared within
the lesser range as newly created objects are
allocated there.
0:009 >!dumpheap
Address
MT
Size
[ snip ]
0284 c1b8 6e3da388
36
0284 c1dc 6b2b390c
72
0284 c224 6b2b3ba0
16
0284 c234 6e3da4f8
16
0284 c244 6e3d9fb4
32
0284 c264 6b2b3ba0
16
[ snip ]
t o t a l
25237
objects
Furthermore, this extension will show the
statistics for each object instantiated which in-
cludes the number of them present on the Man-
aged Heap.
0:009 >!dumpheap
[ snip ]
S t a t i s t i c s :
MT
Count
TotalSize
Class Name
[ snip ]
6db6ce80
1
100 System . Diagnostics . FileVersionInfo
6b2aa3e4
5
100 System . Windows . Forms . RichTextBox+
OleCallback
6 af488e8
5
100 System . Configuration .
ConfigurationSchemaErrors
007 c078c
5
100 GrayStorm . shellcode . dataBox
All objects of the same type share the same
Method Table, which provides metadata about
Object Instances [1]. Using the -mt parameter
on dumpheap and giving it an MT address from
above, all objects using that Method Table are
shown.
0:008>
! dumpheap −mt 007 c078c
Address
MT
Size
027 fb5b0 007 c078c
20
027 fb5e4 007 c078c
20
027 fb5f8
007 c078c
20
027 fb60c 007 c078c
20
027 fbf84
007 c078c
20
t o t a l
5
objects
S t a t i s t i c s :
MT
Count TotalSize
Class Name
007 c078c 5
100 GrayStorm . shellcode . dataBox
Total 5 obje cts
Now
all
objects
instantiated
from
GrayStorm.shellcode.dataBox
are
shown
as
they all pointed back to the MT at 0x007c078c.
dumpobj can now be used on the address of an
object to show its ﬁelds and more information
about it.
0:008>
! dumpobj 027 fb5b0
Name:
GrayFrost . shellcode . dataBox
MethodTable :
007 c078c
EEClass :
00336 fd4
Size :
20(0 x14 )
bytes
(C:\ bin\GrayFrost . exe )
Fields :
MT
Field
Offset
Type
VT Attr
Value
Name
6e3e0d48
40001 ac
4
System . String
0 instance
027 fb45c name
6e3e37b8
40001ad
8
System . Byte [ ]
0 instance
027 fae0c
data
6 e3e2f94
40001 ae
c
System . Int32
1 instance 0
indexToStartCleaning
The ﬁrst four bytes of the above object hold
a pointer back to its Method Table.
0:008> db 027 fb5b0
027 fb5b0
8c 07 7c 00 5c b4 7 f 02−0c ae 7 f 02
00 00 00 00
. . | . \ . . . . . . . . . . .
Reconstructing the whole Method Table and
Object Instance is not important because once
a reference object is available in a local scope
reﬂection can be used and anything about that
object can be seen. The size of an Object In-
stance is necessary to create a robust scanner
and the size is the second four byte block of a
MT as shown by Kommalapati and Christian
[1].
Using the knowledge that an instance ob-
ject’s ﬁrst four bytes are the Method Table and
all like objects share the same one, an attacker
can ﬁnd the location of the heap in memory and
brute force it by looking for a Method Table
reference they require to obtain local object
references.
3
FINDING OBJECTS AT RUNTIME
In order to ﬁnd objects at runtime, the exact
location of the Managed Heap needs to be
discovered. To discover this location a signa-
ture for the speciﬁc kind of object for which
one is searching needs to be instantiated. Once
instantiated, the Managed Heap location can
be found as well as the MT for the object.
Utilizing Reﬂection the constructor of a class
can be called to instantiate a local reference.
3
Type re fc = typeof ( GrayFrost . testMethods ) ;
ConstructorInfo
ctor = r ef c . GetConstructor
( Type . EmptyTypes ) ;
object
wantedObject = ctor . Invoke (new object
[ ] { } ) ;
Once we have a local reference we are able
to discover its raw memory address by manip-
ulating a method’s stack frame (Keep in mind
that the details of obtaining the raw IntPtr to
an object differs between x86 and x64 assembly
because of how they handle argument passing).
For both architectures, unsafe code will be uti-
lized in C# (which is still usable in a target
application compiled disallowing unsafe code)
to obtain a raw object pointer.
3.1
x86
In order to obtain the object pointer, an IntPtr
will be declared locally and then dereferenced
to obtain the objects pointer in memory by
traversing through the current stack frame.
public
s t a t i c
IntPtr
getObjectAddr ( object
wantedObject )
{
IntPtr
objPtr = IntPtr . Zero ;
unsafe
{
objPtr = ⇤(& objPtr − 3) ;
}
return
objPtr ; //0x260a4c8
}
objPtr will now contain the address of the
wantedObject. In the .NET CLR Object In-
stances are pointers back to their Object Table
on the Managed Heap, which means we now
know the location of the heap.
0:008>
! do 260 a4c8
Name:
GrayFrost . testMethods
MethodTable :
00286d34
EEClass :
00382348
Size :
12(0 xc )
bytes
(C:\ bin\GrayFrost . exe )
Fields :
MT
Field
Offset Type
VT Attr
Value
Name
6e0437b8
4000002 8
System . Byte [ ]
0
s t a t i c
0260 a3fc
obj ectP tr
Now that the address of the object table is
known and there is a reference to the Method
Table location, the ﬁrst four bytes in memory
of the object at memory location 0x260a4c8, the
Managed Heap can be brute-forced for other
objects matching that signature. The below
pseudocode is the author’s approach to brute
forcing the Managed Heap. For searching at a
negative offset the size ﬁeld (from the Method
Table) cannot be utilized and the addresses are
read linearly.
While valid memory at
positive
o f f s e t
from
object
Obtain
object
size and jump to
next
object
Check
f i r s t
four
bytes
for
matching Method
Table
IF Method Tables match
Add object
IntPtr
to
l i s t
While valid memory at
negative
o f f s e t
from
object
Check each 4 byte MT address
to
see
i f
i t s
address
i s
the same as the wantedObjects
IF MethodTables match
Add object
IntPtr
to
l i s t
Once the brute forcing is ﬁnished a listing of
all object IntPtrs of GrayFrost.testMethods are
present and need to be converted back into the
object type. Again utilizing stack manipulation
.NET can be tricked into placing an IntPtr into
an object pointer because as previously shown
objects are IntPtrs. The below code will take an
IntPtr and place it into a local object.
public
s t a t i c
object
GetInstance ( IntPtr
ptrIN )
{
object
r e f e r = ptrIN . GetType ( ) ;
IntPtr
objPtr = ptrIN ;
unsafe
{
⇤(& objPtr − clrSub ) = ⇤(& objPtr ) ;
}
return
r e f e r ;
}
3.1.1
CLR 2.0 vs CLR 4.0
I discovered for both the 2.0 and 4.0 CLR on x86
the wantedObject parameter was at a negative
stack offset of 3 from objPtr. Also, the clrSub
offset is 1 for CLR 2.0 and 2 for CLR 4.0 to place
an IntPtr into an object.
4
3.2
x64
By placing three local variables in a method,
see below, I discovered that the address of the
object will become present. If there are less than
three local arguments, the CLR does not place
the object pointer in a reachable range.
public
s t a t i c
IntPtr
getObjectAddr64 ( object
wantedObject )
{
IntPtr
objPtr = ( IntPtr ) 4;
object
r e f e r = wantedObject ;
IntPtr
objPtr2 = ( IntPtr ) 8;
unsafe
{
objPtr = ⇤(& objPtr + clrSub ) ;
}
return
objPtr ;
}
Once the objPtr is known, the x86 pseudo
code for ﬁnding objects will also work. For
getting an object back from an IntPtr, the below
code can be used.
public
s t a t i c
object
GetInstance64 ( IntPtr
wantedObject )
{
IntPtr
objPtr = wantedObject ;
object
r e f e r = wantedObject . GetType ( ) ;
IntPtr
objPtr2 = ( IntPtr ) 8;
unsafe
{
⇤(& objPtr + 1) = ⇤(& objPtr ) ;
}
return
r e f e r ;
}
3.2.1
CLR 2.0 vs CLR 4.0
There are no differences in the above methods
for CLR 2.0 and 4.0 for x64 assembly.
4
CONCLUSION
An attacker now has the ability to instantiate
any object of their choice, brute-force the Man-
aged Heap for other objects instantiated from
the same class, and use them as if they were de-
clared locally. Using Reﬂection, all of the ﬁelds
and properties of an object can be viewed and
altered and instance methods can be called. The
underlying power for .NET attack chains using
constructed objects is massive as attackers can
instantiate any object, ﬁnd all other objects on
the heap that match it and do anything with
them.
REFERENCES
[1] Hanu Kommalapati and Tom Christian, Drill Into .NET
Framework Internals.
[2] Microsoft
Corporation.
Common
Language
Runtime
(CLR).
[3] Microsoft Corporation. SOS.dll (SOS Debugging Extension)
[4] Jon. Reﬂections Hidden Power. May 2002.