User: I am running a Qt application on Linux using the qt4reactor
The application sends and receives bytes on the serial port.
This works very well on Linux with the QtReactor
However when I port the application to windows then I have a problem.
On windows I use the SerialPort class from _win32SerialPort.
The doc string in _win32SerialPort is quite clear:

Requires PySerial and win32all, and needs to be used with win32eventreactor.

I assume the need to use win32eventreactor is because the addReader, addWriter methods are written for windows.
When the QtReactor is used, as soon as loseConnection is called on the transport, this calls loseConnection in twisted.internet.abstract which eventually calls the qt4reactor addWriter method (to flush the output).
This then creates a qt4reactor.TwistedSocketNotifier which tries to get a file descriptor number for select().  The abstract.fileno method is not overwritten by _win32SerialPort, so -1 is always returned and I get a 

QSocketNotifier: Invalid Socket specified

I've seen many posts about multiple reactors not allowed in twisted, however I think I am correct here to assume that I need QtReactor for the Qt application and the win32eventreactor for the windows serial port.
Or is there some other workaround I can use ?
NOTE 1: when using QtReactor on windows, the serial ports work fine i.e. they can send and receive data.  It is only when I close the application that I get "Invalid Socket specified"
Note 2: Now I found a workaround.  I use the QtReactor, but when closing my application I do

serial.connectionLost(failure.Failure(Exception))

where serial is an instance of _win32serialport.SerialPort
This way abstract.loseConnection is never called which means that QtReactor addWriter is never called to flush the output.  I suspect though that the best solution involves calling loseConnection and getting the output flushed properly.
Assistant: Call the Qt message checking/handling functions in the idle event of the Win32 reactor.