# 背景
尽管官方文档（`man capabilities`）和《Linux内核安全模块深入剖析》第六章对“能力”有详细的描述，但我在实际工作中遇到了两个与“能力”相关的案例，这些问题在现有文档中并没有明确的解释。因此，我通过猜测原因并从源码中确认结论来解决这些问题。本文将记录这两个特殊案例，以加深我对“能力”概念的理解，并希望对感兴趣的读者有所帮助。

第一个案例是普通用户执行 `dumpcap` 时可以正常运行，但在使用 `strace dumpcap` 时会提示权限不足。更详细的问题背景可以在正文中找到，或者参考我提出的 issue。

第二个案例是我对 root 用户执行 `su - test` 后变为非 root 用户时所拥有的能力感到好奇。

接下来，我们先来看第一个案例。

# 普通用户执行 `strace dumpcap` 时提示权限不足

## 研究这个问题的起因

在我阅读《基于netfilter的后门》一文时，最初使用 `dumpcap -i nflog:2333` 代替 `tcpdump -i nflog:2333` 进行抓包。在安装了 `wireshark` 并为 `dumpcap` 添加了执行权限后，我发现非 root 用户也可以使用 `dumpcap` 抓取整个主机上的数据包。例如：

```sh
[root@instance-h9w7mlyv ~]# yum install wireshark -y  # 安装 dumpcap 命令
[root@instance-h9w7mlyv ~]# chmod +x /usr/bin/dumpcap  # 添加执行权限
[test@instance-h9w7mlyv ~]$ dumpcap -i eth0  # 抓取 eth0 网卡的数据包
Capturing on 'eth0'
File: /var/tmp/wireshark_eth0_20220907165305_9Quu6X.pcapng
Packets captured: 17
Packets received/dropped on interface 'eth0': 17/0 (pcap:0/dumpcap:0/flushed:0/ps_ifdrop:0) (100.0%)
```

一个普通用户能够获取主机上的所有流量，这显然存在安全隐患。为了探究为什么非 root 用户可以使用 `dumpcap` 监听网卡流量，我查看了 `dumpcap` 的文件能力：

```sh
[test@instance-h9w7mlyv ~]$ getcap /usr/bin/dumpcap
/usr/bin/dumpcap = cap_net_admin,cap_net_raw+ep
```

可以看到 `dumpcap` 具有 `cap_net_raw` 文件能力。如果线程具有 `cap_net_raw` 能力，则可以使用 `socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL))` 创建套接字进行抓包。因此，我猜测 `dumpcap` 也是通过 `AF_PACKET socket` 抓包的，并尝试使用 `strace dumpcap` 查看系统调用是否创建了 `AF_PACKET socket`。然而，我发现普通用户执行 `strace dumpcap` 时会提示权限不足：

```sh
[test@instance-h9w7mlyv ~]$ strace -o strace.log dumpcap
Capturing on 'eth0'
dumpcap: The capture session could not be initiated on interface 'eth0' (You don't have permission to capture on that device).
Please check to make sure you have sufficient permissions.
...
```

这种情况让我感到困惑：为什么普通用户可以直接执行 `dumpcap` 时一切正常，而在使用 `strace dumpcap` 时却提示权限不足？

> 类似的现象还有：普通用户执行 `strace ping www.baidu.com` 也会提示权限不足。

## 为什么普通用户执行 `strace dumpcap` 时提示权限不足？

查阅 `man execve` 文档发现以下内容：

```sh
The aforementioned transformations of the effective IDs are not performed (i.e., the set-user-ID and set-group-ID bits are ignored) if any of the following is true:
 *  the no_new_privs attribute is set for the calling thread (see prctl(2));
 *  the underlying filesystem is mounted nosuid (the MS_NOSUID flag for mount(2)); or
 *  the calling process is being ptraced.   // 进程正在被ptrace
The capabilities of the program file (see capabilities(7)) are also ignored if any of the above are true.
```

再查阅 `man capabilities` 文档发现：

```sh
Note: the capability transitions described above may not be performed (i.e., file capabilities may be ignored) for the same reasons that the set-user-ID and set-group-ID bits are ignored; see execve(2).
```

从这些文档中得出结论：只要进程被 `ptrace`，那么在 `execve` 时就会忽略文件能力和 set-uid/set-gid 等。因为 `strace` 底层就是 `ptrace`，所以这个结论似乎可以解释我遇到的现象。

但是，当用 root 用户给 `strace` 文件添加能力后，普通用户运行 `strace dumpcap` 又可以正常工作，上面的结论就无法解释这一现象。例如：

```sh
[root@instance-h9w7mlyv ~]# setcap cap_net_admin,cap_net_raw+ep /usr/bin/strace  # 给 strace 文件添加能力
[root@instance-h9w7mlyv ~]#
[root@instance-h9w7mlyv ~]# su - test  # 切换到普通用户
...
[test@instance-h9w7mlyv ~]$ getcap /usr/bin/strace
/usr/bin/strace = cap_net_admin,cap_net_raw+ep
[test@instance-h9w7mlyv ~]$ getcap /usr/bin/dumpcap
/usr/bin/dumpcap = cap_net_admin,cap_net_raw+ep
[test@instance-h9w7mlyv ~]$ strace -o strace.log dumpcap  # strace dumpcap 现在可以抓包
Capturing on 'eth0'
File: /var/tmp/wireshark_eth0_20220908182215_A7Uikl.pcapng
Packets captured: 11
Packets received/dropped on interface 'eth0': 11/0 (pcap:0/dumpcap:0/flushed:0/ps_ifdrop:0) (100.0%)
```

因此，看起来普通用户执行 `strace dumpcap` 后，`dumpcap` 进程的有效能力集是 `strace` 文件能力和 `dumpcap` 文件能力的交集。

那么，实际情况是否如此呢？

## 是否为交集？

在 `strace dumpcap` 时，从用户态角度看 `strace` 的原理大致如下：

```c
// fork 后，strace 子进程的能力集和 strace 进程相同
pid_t pid = fork();
// 子进程
if (pid == 0) {
    ptrace(PTRACE_TRACEME, 0, NULL, NULL);
    // 加载被调试的程序
    execve("/usr/bin/dumpcap", NULL, NULL);
}
```

内核在执行 `execve` 时，会调用 `cap_bprm_set_creds` 函数，函数栈如下：

```sh
[root@instance-h9w7mlyv ~]# bpftrace -e 'kprobe:cap_bprm_set_creds {printf("%s\n", kstack)}'
Attaching 1 probe...
        cap_bprm_set_creds+1
        security_bprm_set_creds+34
        prepare_binprm+299
        do_execveat_common.isra.37+1274
        __x64_sys_execve+50   // execve 系统调用入口
        do_syscall_64+91
        entry_SYSCALL_64_after_hwframe+101
```

代码位置在 `cap_bprm_set_creds` 函数中，可以看到该函数会对能力做交集处理：

```c
int cap_bprm_set_creds(struct linux_binprm *bprm) {
    const struct cred *old = current_cred();
    struct cred *new = bprm->cred;
    ...
    ret = get_file_caps(bprm, &effective, &has_fcap);  // 会从文件扩展属性中找到能力集合，赋值给 brpm->cred 相应字段
    ...
    if ((is_setid || __cap_gained(permitted, new, old)) && ...)
```

综上所述，普通用户执行 `strace dumpcap` 时，`dumpcap` 进程的有效能力集确实是 `strace` 文件能力和 `dumpcap` 文件能力的交集。