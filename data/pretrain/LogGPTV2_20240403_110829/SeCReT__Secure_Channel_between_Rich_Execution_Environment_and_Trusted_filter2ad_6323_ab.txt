to the REE memory area, it is still accessible by the TEE.
The process that volunteers to use the resources in the TEE
places arguments, such as the identity number of the TEE
services, in the shared memory before opening the TrustZone
device driver to invoke the SMC instruction [10]. Once the
SMC instruction is executed, the processor mode is switched
to monitor mode and the address for the shared memory is
delivered as a parameter of the SMC instruction. The code
that runs in monitor mode retrieves the address of the shared
memory from this parameter value and maps the address to
the page table in the TEE. The arguments procured from the
shared memory might contain the information that is required
to dispatch the request to the proper service in the TEE. As a
motivation for this paper, we focused on some weaknesses of
the channel established under the compromised kernel in the
REE. We state these weaknesses as follows.
First, it is difﬁcult to verify whether the request from the
REE — equivalent to invoking an SMC instruction with param-
eters — originated from authenticated processes. An attacker
with kernel privileges is free to call the SMC instruction with
maliciously crafted parameters.
3
translating the address. SeCReT uses TTBR0 exclusively by
setting the TTBCR.N to 0. This setting is unchangeable in the
REE on account of TrustZone’s active monitoring. The session
key’s value and the VA for the memory page that stores the
key in the REE are also elements of the APC. The value of the
session key is randomly generated on demand. The APC also
provides a link to the information concerning critical resources
that are accessible in the TEE. The deﬁnition of a critical
resource, which is a topic beyond the scope of this paper,
depends on the developers’ design criteria in implementing
TrustZone-based applications.
To protect
the session key, SeCReT maintains some
ﬂags, whitelist and shadow stacks in the APC as well. The
key request ﬂag indicates whether the access to the session
key is legitimate. The mode switch ﬂag and shadow stack are
updated and veriﬁed to enforce the coarse-grained control-ﬂow
of the process using the session key. The whitelist sighand
registers addresses of the signal handlers that are exempted
from shadow-stack veriﬁcation. We explain the usage of those
elements in depth in Section IV-D1 and IV-D2.
C. Session Key Lifecycle
Secure Boot Maintaining the session key entails con-
secutive interactions between the REE process and SeCReT.
During boot time, our SeCReT prototype temporally loads the
process that is granted access to the resources in the TEE, and
calculates the hash of the code based on the granularity of
the small page, which is 4KB in ARMv-7. The hash values
are transferred to SeCReT M, and saved in the TEE. This
is adequately safe, because we assume that Secure Boot is
enabled. However, calculating the hash at boot time might
lead to performance degradation. Therefore, as an alternative
design, the pre-calculated hash values from REE processes can
be stored in the TEE in advance, along with security-sensitive
services that run in the TEE. This might be accomplished
during the manufacturing of the device.
New Process Execution During the system’s runtime,
SeCReT veriﬁes whether newly executed processes in the REE
have permission to access the resources in the TEE. To this
end, SeCReT simply refers to the process descriptor (e.g.,
task struct in Linux) to check the name of the currently loaded
process. However, an attacker can easily modify the values in
the task descriptor. Thus, alternatively, as with Patagonix [24],
we can set the Non-Executable (NX) bit for all page descriptors
of the newly executed process and check the hash from the ﬁrst
code-page when the fault occurs due to the execution of the
process. However, in our prototype for SeCReT, immediately
prior to assigning the session key, the hashes for all code-pages
that are present in the memory are computed and compared
with the whitelist in the TEE. This method is simple, but it
is comparatively faster than a hash-check to verify the new
process. If the new process is found in the whitelist, SeCReT
creates an APC for the process and updates it with information
such as the TTBR and the link to the pre-calculated hash
information corresponding to the process.
Key-Assignment Request The REE process must send a
request to SeCReT for the creation of the session key. The
key is used to authenticate the communication. Once SeCReT
receives a request for the creation of a key, it ﬁrst traverses
the APL to ﬁnd the APC corresponding to the process asking
for the key. Because each REE process is assigned a unique
TTBR, the TTBR is used as a key to search for the proper
APC in the APL. If the APC is found, SeCReT allocates
a page-aligned small page for storing the session key. The
virtual address (VA) for the allocated page in the REE is
stored in the session key address element of the APC. The
access permission for the page is set to No Access (NA),
which is neither writable nor readable. The session key is also
created and stored in the session key value element of the
APC. However, the key is not written to the allocated page in
the REE at this time because SeCReT makes the key visible
only at the moment when the process accesses the page to use
the key.
Session-Key Protection Access control to the session key
is based on the occurrence of a data-abort exception and
SeCReT’s handling of it. Access to the page that is allocated
in the step prior to the key’s creation causes the data-abort
exception because the access permission for the page is set
to NA by default. When the exception occurs, the processor
mode is changed to kernel, and the control ﬂow for the current
process is redirected to an exception handler for data abort.
The SeCReT T — that is, the trampoline code inserted to the
starting point of the exception handlers — causes the control
ﬂow to jump to SeCReT M. SeCReT M ﬁrst retrieves the
REE process’ APC from the APL. Based on the information
in the APC, SeCReT determines whether an exception has
occurred from a legitimate process’ attempt to use the key.
The integrity of the code and the control ﬂow is also
checked for the process. If no intervention from an attacker is
found, SeCReT writes the session key to the page in the REE
and changes the access permission for the page to readable.
Additionally, SeCReT changes the control ﬂow, returning to
user mode directly without executing the remaining exception
handler routines in the REE kernel. Therefore, the process
can obtain the key by re-executing the instruction that failed
because of the page’s initial NA permission. To conceal the
session key from an attacker, the key is ﬂushed from the page
when the processor mode switches to kernel. The details for the
access-control mechanism relating to session-key protection
are described in Section IV-D1.
Process Termination Every process-termination event also
triggers SeCReT. If the process being terminated has the
APC, SeCReT frees the memory page that was allocated for
the session key. The APC containing the information for the
process is also removed from the APL. An attacker might reuse
SeCReT T, the trampoline code, to remove the victim process’
APC from the APL. This would constitute a DoS, but DoS
attacks are exempted from our attack model.
D. Session-Key Protection Mechanism
1) Access Control for the Session Key: The session key is
readable only when a legitimate process runs in user mode
and that process accesses the page allocated to contain the
key. This amounts to an exclusive key assignment at moment
the process requires it. One effective way to acquire the key
synchronously might be for the user process to make a direct
request to SeCReT that the session key be made readable
on the page. However, this is not possible because the only
5
assigned the session key beforehand. This additional switch in
modes causes performance degradation to the entire system.
However, SeCReT cannot selectively switch the mode only
for the process that assigned the key because the information
for the session key is only accessible in the TEE. Thus, as
an alternative solution, we enable SeCReT’s access control
and key-ﬂush mechanism only if the process assigned with
the session key exists in the REE. To this end, in addition to
the normal exception vector, we create the SeCReT exception
vector (SeCReT EXV).
In Linux, early in the boot time, a 4KB page is allocated for
locating an exception vector with other handler codes such as
sigreturn. The virtual address for the page that is equivalent
to the address of the exception vector is ﬁxed at 0xffff0000
in Linux for ARM processors. However, the address can be
changed based on the setting in the System Control Register
(SCTLR). We utilized this feature to dynamically remap the
exception vectors.
The exception-vector remapping and the change of the
control ﬂow due to the remapping are described in Figure 4.
The remapping is triggered with the occurrence of events
such as process executions and terminations. The remapping
from normal to SeCReT EXV is done when the ﬁrst process
is executed that has permission to access the resources in
the TEE. Subsequently, the SeCReT EXV remains enabled
until the last process granted this permission is terminated.
With every process termination, SeCReT not only deletes
the APC corresponding to the terminated process, but also
checks whether the APC is the ﬁnal one in the APL. If it
is, SeCReT remaps the exception vector back to the original
exception vector. When the SeCReT EXV is enabled, perfor-
mance degradation from the additional mode switching for
every process remains a problem. However, we believe that
the overall degradation is alleviated by this remapping process
at least when no process is running with access to the resources
in the TEE.
F. Trusted-Computing Base for SeCReT
SeCReT depends on active monitoring as part of its Trusted
Computing Base (TCB). Active monitoring protects the kernel
code in REE kernel’s static region. This ensures the immutabil-
ity of SeCReT T, which is inserted to the part of the kernel
code in the REE containing exception vectors and handlers.
In addition to protecting the kernel code, active monitoring
protects the registers that play a signiﬁcant role such as
traversing the APL and distinguishing exception types. The
TTBR is used as an identiﬁer to retrieve the APC from the APL
because each process has a unique TTBR. SeCReT checks the
value of the Data Fault Status Register (DFSR) and the Data
Fault Address Register (DFAR) to demarcate a normal data
abort from a data abort speciﬁcally occurring because of the
demand for the session key. The Vector Base Address Register
(VBAR) contains the address of the SeCReT EXV selectively
enabled based on the existence of a process with permission
to access the TEE. To change the values of those registers,
an attacker must run privileged instructions the execution of
which is prevented by active monitoring.
Fig. 5. Hardware page-table descriptor and Linux page-table descriptor
V.
IMPLEMENTATION
We implemented a prototype for the SeCReT framework
on Arndale board, offering a Cortex-A15 dual-core processor.
We used Linux version 3.9.1 as an REE OS and Sierra
TEE software [11] as a PoC in the TEE. For the SeCReT
components in the REE, 140 LoC were added to the Linux
kernel code. In monitor code, approximately 900 LoC were
added to implement the SeCReT components in the TEE.
In this section, we describe the implementation details for
SeCReT based on each domain.
A. SeCReT Components in the REE
In ARM architecture, the exception vector that holds the
address for each exception can be located ﬂexibly. The V-bit
for SCTLR selects the base address for the exception vector.
For example, if the value of the bit is set, the address is ﬁxed
at 0xffff0000. Otherwise, it is at 0x00000000. However, if a
security extension such as TrustZone is enabled and the V-
bit is cleared, the exception vector can be re-mapped to the
address held by the Vector Base Address Register (VBAR).
In this case, each exception handler is invoked by branching
to the address that is computed by adding predeﬁned offsets
for each exception to the address in the VBAR. We utilized
the VBAR to hold the base address for the SeCReT EXV.
To enable the SeCReT EXV, the V-bit for SCTLR is cleared
when the ﬁrst process with permission to access the TEE
is executed. Moreover, the bit is set to enable the normal
exception vector again when the last APC is deleted, signaling
that
there are no processes remaining with permission to
access the TEE. Because conﬁguring the SCTLR requires the
privileged instructions that are restricted from execution in the
REE by active monitoring, only SeCReT M in the TEE can
dynamically change the SCTLR’s conﬁguration.
The SeCReT EXV is a newly created exception vector
that provides addressing for the exception handlers patched
with SeCReT T. The normal exception vector is created dur-
ing the boot time. To create the SeCReT EXV, we inserted
SeCReT T to the exception handlers in the entry-armv.S and
entry-common.S ﬁles. Furthermore, we patched the mmu.c
and traps.c ﬁles to allocate a small page (4KB) where we
composed the SeCReT EXV. Therefore, new vector code that
branches to the exception handlers patched with SeCReT T
is copied from the entry* ﬁles and placed into the new
page during the boot time. In our prototype for SeCReT, the
SeCReT EXV is mapped to 0xfffe8000 arbitrarily, and we
assume that it is protected by active monitoring.
Furthermore, SeCReT T is statically inserted to the kernel
code that handles process execution and termination. To run
9
AP[2]AP[1:0]Small Page Base Address, PA[31:12]XN311211Hardware PTEDIRTYYOUNGSmall Page Base Address, PA[31:12]PRESENTRDONLYUSERLinux PTEAP: Access Permission bits     XN: Execute-never bit 109876543210TABLE II.
SECRET’S ATTACK SURFACE AND DEFENSE MECHANISM
TABLE III.
LMBENCH LATENCY MICROBENCHMARK RESULTS (IN
MICROSECONDS.)
Attack Surfaces
Process-code modiﬁcation
Control-ﬂow manipulation
Reusing SeCReT T for shadow-stack manipulation
- mimicking sigaction system call
- Decoy switch to kernel mode
Trampoline bypass when switches to user mode
Memory snapshot for key exﬁltration
Defense Mechanisms
Hash check for present code pages
Shadow-stack veriﬁcation
mode switch ﬂag veriﬁcation
mode switch ﬂag veriﬁcation
Memory page ﬂushing coordinating
with active monitoring
SeCReT M with every execution of a new process, we invoked
SeCReT T after execve is complete. With this invocation,
SeCReT M can check the task struct of the current process to
decide whether a new APC must be created for the process. In
our prototype, we simply compare the value of comm, which
contains the name of the executable, in task struct with the
whitelist which deﬁnes the legitimate processes that have per-
mission to access the resources in the TEE. With every process
termination that invokes a do exit system call, SeCReT T
is also invoked in order for SeCReT M to delete the APC
corresponding to the process that is currently terminated.
B. SeCReT Components in the TEE
When SeCReT T invokes the SMC instruction, it creates
an SMC exception. At the same time, monitor mode is entered,
and the exception is handled by the SMC exception handler
in monitor mode. Similar to the REE, there are several excep-
tions, such as FIQ, IRQ, data abort, and SMC, that can occur
in monitor mode. The Monitor Vector Base Address Register
(MVBAR) holds the base address for the exception vector.
Therefore, to handle each exception, the control ﬂow branches
to the address corresponding to the MVBAR value added by
predeﬁned offsets for each exception.
Because in our prototype every entry to monitor mode
happens synchronously by invoking the SMC instruction, every
implementation for SeCReT M is limited by the SMC excep-
tion handler. SeCReT T not only invokes the SMC instruction,
it administers parameters through the general-purpose registers
— parameters such as the current event type. According to the
Procedure Call Standard for the ARM Architecture (AAPCA),
four general-purpose registers from r0 to r3 can be used to
input arguments [13]. Of the four registers, we utilized two
registers, r0 and r1, to pass parameters to SeCReT M.
The r0 register delivers the current event types such as
process execution, key-assignment requests, and process termi-
nation. Based on the event type in r0, the subroutine to handle
each event is invoked in the SMC exception handler. The r1
register has the virtual address for the kernel-stack pointer in
the REE to validate the control ﬂow integrity during switches
to the mode. With a switch to kernel mode, SeCReT M
retrieves the LR U and the return address from the kernel
stack and pushes them into the shadow stack maintained in
the APC. Moreover, with the execution of the process, the
r1 register can offer the address for the process descriptor
— that is, task struct in Linux — to refer to the name of
currently loaded executable. The value of other registers, such
as the TTBR, DFSR, and DFAR can be queried by invoking a
privileged instruction in monitor mode. Thus, we did not pass
them as parameters of the SMC instruction. It should be noted
Null
Open/Close
Read
Write
Fork
Fork/Exec
Linux
0.27
5.43
0.33
0.42