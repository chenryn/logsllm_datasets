# Context and Rationale

Currently, the `flutter create --template=plugin` command (reference) defaults to using Objective-C for iOS and Java for Android. I propose that we change the default languages to Swift for iOS and Kotlin for Android.

Kotlin is a first-class language supported by Android and is officially preferred over Java by the Android team (reference), despite the slight overhead it introduces (reference).

The case for Swift is even more compelling. While Kotlin is officially endorsed and preferred by the Android team, it is still developed by JetBrains, an external entity. On the other hand, Swift is developed by Apple specifically for iOS, macOS, and tvOS development. In the first quarter of 2018, Swift surpassed Objective-C in popularity (reference). Additionally, according to WWDC 2018, the runtime overhead will no longer be an issue with Swift 5:

> "We also have another release coming up for you in the language, Swift 5. The focus of Swift 5 is greater adoption by delivering Swift as part of the OS. Apps will no longer need to include the Swift runtime when delivering on our newer OS releases, resulting in smaller downloads and faster launches. We're very excited about this, and we have made great progress toward this goal. You'll see it in a release coming early next year."

# Proposed Actions

1. **Update Default Language in Flutter Tools:**
   - Modify the `create.dart` file in the `flutter_tools` package to set the default language to Swift for iOS and Kotlin for Android.
     - Update the corresponding `flutter-intellij` repository accordingly.
     - Example: [Screenshot](https://user-images.githubusercontent.com/358585/50044829-24a2a000-00bc-11e9-9495-bfe80f3637e2.png)

2. **Convert First-Party Plugins:**
   - Convert all first-party plugins in the `flutter/plugins` repository to use Swift for iOS and Kotlin for Android.
   - Write platform-specific unit tests in Swift (Issue #10141) and Kotlin (Issue #10140).

By making these changes, we can align the default settings with the most modern and officially preferred languages, enhancing the developer experience and ensuring better performance and support.