# Predicting Vulnerable Software Components

**Authors:**
- Stephan Neuhaus\*
- Thomas Zimmermann+
- Christian Holler\*
- Andreas Zeller\*

**Affiliations:**
- \* Department of Computer Science, Saarland University, Saarbrücken, Germany
  - {neuhaus, holler, zeller}@st.cs.uni-sb.de
- + Department of Computer Science, University of Calgary, Calgary, Alberta, Canada
  - thomas.zimmermann@ucalgary.ca

## Abstract

Where do most vulnerabilities occur in software? Our Vulture tool automatically mines existing vulnerability databases and version archives to map past vulnerabilities to components. The resulting ranking of the most vulnerable components serves as a foundation for further investigations into what makes components vulnerable.

In our investigation of Mozilla's vulnerability history, we found that components with a single past vulnerability were generally not likely to have further vulnerabilities. However, components with similar imports or function calls were more likely to be vulnerable.

Based on this observation, we extended Vulture with a simple predictor that correctly identifies about half of all vulnerable components, with two-thirds of its predictions being accurate. This allows developers and project managers to focus their efforts where they are needed most: "We should look at nsXPInstallManager because it is likely to contain yet unknown vulnerabilities."

**Categories and Subject Descriptors:**
- D.2.4 [Software Engineering]: Software/Program Verification—Statistical methods
- D.2.5 [Software Engineering]: Testing and Debugging—Testing tools
- D.4.6 [Operating Systems]: Security and Protection—Invasive software

**General Terms:**
- Security, Experimentation, Measurement

**Keywords:**
- Software Security, Prediction

## 1. Introduction

Many software security problems are instances of general patterns, such as buffer overflows or format string vulnerabilities. Some issues, however, are specific to a single project or problem domain, such as JavaScript programs escaping their sandboxes, which is a problem only in web browsers. To improve software security, we must not only look for general problem patterns but also learn specific patterns that apply to the software at hand.

Modern software development usually does a good job of tracking past vulnerabilities. For example, the Mozilla project maintains a vulnerability database that records all incidents. However, these databases do not show how vulnerabilities are distributed across the codebase. Our Vulture tool automatically mines a vulnerability database and associates the reports with the change history to map vulnerabilities to individual components (Figure 1). Vulture's result is a distribution of vulnerabilities across the entire codebase (Figure 2).

The distribution is very uneven: only 4% of the 10,452 components were involved in security fixes. This raises the question: Are there specific code patterns that occur only in vulnerable components?

In our investigation, we did not find code features such as complexity or buffer usage that correlate with the number of vulnerabilities. Instead, we found that vulnerable components shared similar sets of imports and function calls. For instance, of the 14 components importing `nsNodeUtils.h`, 13 (93%) had to be patched due to security leaks. The situation is even worse for the 15 components that import `nsIContent.h`, `nsIInterfaceRequestorUtils.h`, and `nsContentUtils.h` together—they all had vulnerabilities. This observation can be used to predict whether a new component will be vulnerable: "Tell me what you import or what you call, and I’ll tell you how vulnerable you are."

After discussing the scope of this work (Section 2), the remainder of this paper details our original contributions, which can be summarized as follows:
- We present a fully automatic way of mapping vulnerabilities to components (Section 3).
- We provide empirical evidence that vulnerabilities correlate with component imports (Section 4).
- We show how to build fully automatic predictors that predict vulnerabilities of new components based on their imports and function calls (Section 5).
- Our evaluation on the Mozilla project shows that these predictors are accurate (Section 6).

After discussing related work (Section 7), we close with conclusions and future work (Section 8).

## 2. Scope of This Work

Our work is empirical and statistical: we look at correlations between vulnerabilities and imports or function calls, but we do not claim that these are cause-effect relationships. Programmers writing import statements or function calls generally have no choice in the matter; they need the service provided by some import or function and therefore must use it, whether they want to or not.

Our hypothesis is that the cause of the vulnerability is the import's or function's domain, i.e., the range of services it uses or implements. It appears that some domains are more risky than others, and being associated with a particular domain increases the risk of having a vulnerability. Different projects might have different risky domains, which would lead Vulture to mine project-specific vulnerability patterns.

We have identified the following circumstances that could affect the validity of our study:
- **Study Size:** The correlations we see with Mozilla could be artifacts specific to Mozilla. They might not be as strong in other projects, or the correlations might disappear altogether. From our own work analyzing Java projects, we think this is highly unlikely.
- **Bugs in the Database or Code:** The code to analyze the CVS or import the Security Advisories into the database could be buggy. The inputs to the machine-learning methods or the code that assesses the effectiveness of these methods could be wrong. These risks were mitigated by sampling small subsets and checking them manually for correctness, or by implementing the functionality a second time from scratch and comparing the results.
- **Bugs in the R Library:** We rely on a third-party R library for the actual computation of the SVM and the predictions. This library was written by experts in the field and has undergone cross-validation.
- **Wrong or Noisy Input Data:** It is possible that the Mozilla source files contain many "noisy" import relations, or the Security Advisories could contain wrong information. Our models do not incorporate noise, but from manually checking some of the data, we believe the influence of noise to be negligible.
- **Yet Unknown Vulnerabilities:** Our predictions are evaluated against known vulnerabilities in the past. Finding future vulnerabilities in flagged components would improve precision and recall; finding them in unflagged components would decrease recall.

## 3. Components and Vulnerabilities

### 3.1 Components

For our purposes, a component is an entity in a software project that can have vulnerabilities. For Java, components would be `.java` files because they contain both the definition and the implementation of classes. In C++ and C, the implementation of a component is usually separated from its interface: a class is declared in a header file, and its implementation is contained in a source file. A vulnerability reported for one file of a two-file component is a vulnerability of the entire component. Therefore, we combine equally-named pairs of header and source files into one component.

In C, libraries are often built around abstractions different from classes. Typically, there is one header file that declares a number of structures and functions, and several files that contain those functions' implementations. Without a working build environment, it is impossible to determine which source files implement the concepts of which header file. Since we want to apply Vulture to projects without a working build environment, we treat files with no equally-named counterpart as components containing just that file. We will subsequently refer to components without any filename extensions.

Some components may naturally be self-contained. For example, a component may consist only of a header file that includes all the necessary implementation as inline functions. Templates must be defined in header files. A component may also not have a header file, such as the file containing a program's main function, which usually does not have an associated header file. These components then consist of only one file.

### 3.2 Mapping Vulnerabilities to Components

A vulnerability is a defect in one or more components that manifests as a violation of a security policy. Vulnerabilities are announced in security advisories that provide users with workarounds or pointers to fixed versions and help them avoid security problems. In the case of Mozilla, advisories also refer to a bug report in the Bugzilla database. We use this information to map vulnerabilities to components through the fixes that remove the defect.

First, we retrieve all advisories from the Web to collect the defects, in the case of Mozilla from the "Known Vulnerabilities in Mozilla Products" page. We then search for references to the Bugzilla database, which typically take the form of links to its web interface. The number at the end of this URL is the bug identifier of the defect that caused the vulnerability. We collect all bug identifiers and use them to identify the corresponding fixes in the version archive. In version archives, every change is annotated with a message that describes the reason for that change. To identify the fixes for a particular defect, we search these messages for bug identifiers such as "362213", "Bug #362213", and "fix 362213". Once we have identified the fixes of vulnerabilities, we can easily map the names of the corrected files to components.

It is important to note that we do not analyze binary patches to programs, but source code repository commits. Binary patches usually address multiple bugs at once, which are not necessarily vulnerabilities, or contain functionality enhancements. In contrast, commits are very specific, fixing only one vulnerability at a time. This is why we can determine the affected components with confidence.

### 3.3 Vulnerable Components in Mozilla

As of January 4, 2007, Mozilla contains 1,799 directories and 13,111 C/C++ files, combined into 10,452 components. There were 134 vulnerability advisories, pointing to 302 bug reports. Of all 10,452 components, only 424 (4.05%) were vulnerable.

Security vulnerabilities in Mozilla are announced through Mozilla Foundation Security Advisories (MFSAs) since January 2005 and are available through the Mozilla Foundation's website. These advisories describe the vulnerability and provide assorted information, such as Bugzilla bug identification numbers. Of all 302 vulnerability-related bug reports, 280 (92.7%) could be assigned to components using the techniques described above.

If a component has a vulnerability-related bug report associated with it, we call it vulnerable. In contrast, a neutral component has had no vulnerability-related bug reports associated with it so far.

The distribution of the number of MFSAs can be seen in Figure 4. The most important result from this histogram is that it directly contradicts the security folklore that says components with past vulnerabilities will likely have future vulnerabilities. If that were true, the histogram should show ascending numbers of components with ascending numbers of reports. In fact, the opposite is true: there were twice as many components with one MFSA (292) than all components with two or more MFSAs combined (132).

One consequence of this empirical observation is that the number of past vulnerability reports is not a good predictor for future reports, as it would miss all the components that have only one report. Indeed, when we take the CVS from July 24, 2007—encompassing changes due to MFSAs 2007-01 through 2007-25—we find that 149 components were changed in response to MFSAs. Of these newly fixed components, 81 were repeat offenders, having at least one vulnerability-related fix before January 4. The remaining 68 components had never had a security-related fix.

As for using other metrics such as lines of code to predict vulnerabilities, studies by Nagappan et al. have shown that there is no single metric that correlates with failures across all considered projects.

The top ten most vulnerable components in Mozilla are listed in Table 1. The four most vulnerable components all deal with scripting in its various forms:

1. `nsGlobalWindow`, with fixes for 14 MFSAs and 14 bug reports, has, among others, a method to set the status bar, which can be called from JavaScript and which will forward the call to the browser chrome.
2. `jsobj` (13 MFSAs; 24 bug reports) contains support for JavaScript objects.
3. `jsfun` (11 MFSAs; 15 bug reports) implements support for JavaScript functions.
4. `nsScriptSecurityManager` (11 MFSAs; 15 bug reports) implements access controls for JavaScript programs.

In the past, JavaScript programs have shown an uncanny ability to break out of their sandboxes, which manifests as a high number of security-related changes to these components.

## Figures and Tables

### Figure 1: How Vulture Works
Vulture mines a vulnerability database (e.g., a Bugzilla subset), a version archive (e.g., CVS), and a code base, and maps past vulnerabilities to components. The resulting predictor predicts the future vulnerabilities of new components, based on their imports or function calls.

### Figure 2: Distribution of Vulnerabilities within Mozilla’s Codebase
A component’s area is proportional to its size; its shade of gray is proportional to its number of vulnerabilities. A white box means no vulnerabilities, as is the case for 96% of the components.

### Figure 3: Mapping Mozilla Vulnerabilities to Changes
We extract bug identifiers from security advisories, search for the fix in the version archive, and from the corrected files, we infer the component(s) affected by the vulnerability.

### Table 1: The Top Ten Most Vulnerable Components in Mozilla
| Rank | Component | SAs | BRs |
|------|-----------|-----|-----|
| 1    | dom/src/base/nsGlobalWindow | 14 | 14 |
| 2    | js/src/jsobj | 13 | 24 |
| 3.5  | js/src/jsfun | 11 | 15 |
| 3.5  | caps/src/nsScriptSecurityManager | 11 | 15 |
| 5    | js/src/jsscript | 10 | 14 |
| 6    | dom/src/base/nsDOMClassInfo | 9 | 10 |
| 7    | docshell/base/nsDocShell | 9 | 9 |
| 8    | js/src/jsinterp | 8 | 14 |
| 9    | content/base/src/nsGenericElement | 7 | 10 |
| 10   | layout/base/nsCSSFrameConstructor | 6 | 17 |

Components with equal numbers of SAs get an averaged rank.

### Figure 4: Distribution of Mozilla Foundation Security Advisories (MFSAs)
The y-axis is logarithmic.