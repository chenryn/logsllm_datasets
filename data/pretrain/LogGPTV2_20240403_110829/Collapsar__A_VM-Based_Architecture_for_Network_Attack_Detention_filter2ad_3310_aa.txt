title:Collapsar: A VM-Based Architecture for Network Attack Detention
Center
author:Xuxian Jiang and
Dongyan Xu
USENIX Association
Proceedings of the
13th USENIX Security Symposium
San Diego, CA, USA
August 9–13, 2004
© 2004 by The USENIX Association
Phone: 1 510 528 8649
All Rights Reserved
FAX: 1 510 548 5738
Rights to individual papers remain with the author or the author's employer.
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Collapsar: A VM-Based Architecture for Network Attack Detention Center
Xuxian Jiang, Dongyan Xu
Center for Education and Research in Information Assurance
and Security (CERIAS) and Department of Computer Sciences
Purdue University
West Lafayette, IN 47907, USA
fjiangx, PI:EMAIL
Abstract
1 Introduction
The honeypot has emerged as an effective tool to provide
insights into new attacks and current exploitation trends.
Though effective, a single honeypot or multiple indepen-
dently operated honeypots only provide a limited local
view of network attacks. Deploying and managing a
large number of coordinating honeypots in different net-
work domains will not only provide a broader and more
diverse view, but also create potentials in global net-
work status inference, early network anomaly detection,
and attack correlation in large scale. However, coordi-
nated honeypot deployment and operation require close
and consistent collaboration across participating network
domains, in order to mitigate potential security risks as-
sociated with each honeypot and the non-uniform level
of security expertise in different network domains. It is
challenging, yet desirable, to provide the two conﬂicting
features of decentralized presence and uniform manage-
ment in honeypot deployment and operation.
To address these challenges, this paper presents Col-
lapsar, a virtual-machine-based architecture for network
attack detention. A Collapsar center hosts and manages
a large number of high-interaction virtual honeypots in
a local dedicated network. These honeypots appear, to
potential intruders, as typical systems in their respective
production networks. Decentralized logical presence of
honeypots provides a wide diverse view of network at-
tacks, while the centralized operation enables dedicated
administration and convenient event correlation, elimi-
nating the need for honeypot experts in each production
network domain. We present the design, implementation,
and evaluation of a Collapsar testbed. Our experiments
with several real-world attack incidences demonstrate the
effectiveness and practicality of Collapsar.
Recent years have witnessed a phenomenal increase in
network attack incidents [16]. This has motivated re-
search efforts to develop systems and testbeds for captur-
ing, monitoring, analyzing, and, ultimately, preventing
network attacks. Among the most notable approaches,
the honeypot [9] has emerged as an effective tool for
observing and understanding intruder’s toolkits, tactics,
and motivations. A honeypot’s nature is to suspect every
packet transmitted to/from it, giving it the ability to col-
lect highly concentrated and less noisy datasets for net-
work attack analysis.
However, honeypots are not panacea and suffer from
a number of limitations. In this paper, we will focus on
the following limitations of independently operated hon-
eypots:
(cid:15) A single honeypot or multiple independently oper-
ated honeypots only provide a limited local view of
network attacks. There is a lack of coordination
among honeypots running in different networks,
causing them to miss the opportunity to form a wide
diverse view for global network attack monitoring,
correlation, and trend prediction.
(cid:15) Honeypot deployment has inherent security risks
and requires non-trivial efforts in monitoring and
interpreting honeypot status. Strong security exper-
tise is needed for safe and effective honeypot oper-
ations. However, such expertise is not likely to be
available everywhere. Lack of judicious and con-
sistent governance of honeypots calls for a central-
ized honeypot management scheme backed by spe-
cial expertise and strict regulations.
It is challenging, yet desirable, to accommodate two
conﬂicting features in honeypot deployment and oper-
ation: decentralized presence and centralized manage-
ment. To address these challenges, this paper presents
Collapsar, a virtual machine (VM) based architecture for
a network attack detention center. A Collapsar center
hosts and manages a large number of honeypots in a lo-
cal dedicated physical network. However, to the intrud-
ers, these honeypots appear to be in different network
domains. These two seemingly conﬂicting features are
achieved by Collapsar. On one hand, honeypots are log-
ically present in different physical production networks,
providing a more distributed diverse view of network at-
tacks. On the other hand, the centralized physical loca-
tion gives security experts the ability to locally manage
honeypots and collect, analyze, and correlate attack data
pertaining to multiple production networks.
There are two types of components in Collapsar: func-
tional components and assurance modules. Functional
components are integral parts of Collapsar, responsible
for creating decentralized logical presence of honeypots.
Through the functional components, suspicious trafﬁc
will be transparently redirected from different produc-
tion networks to the Collapsar center (namely the physi-
cal detention center) where honeypots accept trafﬁc and
behave, to the intruders, like authentic hosts. Assurance
modules are pluggable and are responsible for mitigat-
ing the risks associated with honeypots and collecting
tamper-proof log information for attack analysis.
In summary, Collapsar has the following advantages
over conventional honeypot systems: (1) distributed vir-
tual presence, (2) centralized management, and (3) con-
venient attack correlation and data mining. The rest of
this paper is organized as follows: Section 2 presents
background information about conventional honeypots
and describes the Collapsar vision and challenges. The
architecture of Collapsar is presented in Section 3, while
the implementation details of Collapsar are described in
Section 4. Section 5 evaluates Collapsar’s performance.
Section 6 presents several real-world attack incidents
captured by our Collapsar prototype. Related work is
presented in Section 7. Finally, we conclude this paper
in Section 8.
2 Honeypots and Collapsar
According to Lance Spitzner’s deﬁnition [37], a hon-
eypot is a “security resource whose value lies in being
probed, attacked, or compromised.” The resource can be
actual computer systems, scripts running emulated ser-
vices [36], or honeytokens [40]. This paper focuses on
honeypots in the form of actual computer systems.
Honeypots can be classiﬁed based on level of inter-
action with intruders. The typical classiﬁcations are:
high-interaction honeypots, medium-interaction honey-
pots, and low-interaction honeypots. High-interaction
honeypots allow intruders to access a full-ﬂedged op-
erating system with few restrictions, although, for se-
curity reason, the surrounding environment may be re-
stricted to conﬁne any hazardous impact of honeypots.
This is highly valuable because new attack tools and vul-
nerabilities in real operating systems and applications
can be brought to light [13]. However, such a value
comes with high risk and increased operator responsibil-
ity. Medium-interaction honeypots involve less risk but
more restrictions than high-interaction honeypots. One
example of medium-interaction is the use of jail or chroot
in a UNIX environment. Still, medium-interaction hon-
eypots provide more functionalities than low-interaction
honeypots, which are, on the contrary, easier to install,
conﬁgure, and maintain. Low-interaction honeypots can
emulate a variety of services that the intruders can (only)
interact with.
Another classiﬁcation criteria differentiates between
physical honeypots and virtual honeypots. A physical
honeypot is a real machine in a network, while a vir-
tual honeypot is a virtual machine hosted in a physical
machine. For example, honeyd [36] is an elegant and ef-
fective low-interaction virtual honeypot framework. In
recent years, advances in virtual machine enabling plat-
forms have allowed for development and deployment of
virtual honeypots. Virtual machine platforms such as
VMware [11] and User-Mode Linux (UML) [24] enable
high-ﬁdelity emulation of physical machines, and have
been increasingly adopted to host virtual honeypots [9].
2.1 Collapsar: Vision and Challenges
Honeypots in Collapsar can be categorized as high-
interaction and virtual. More importantly, Collapsar
honeypots are physically located in a dedicated local
network but are logically dispersed in multiple network
domains. This property reﬂects the vision of Honey-
farm [39] proposed by Lance Spitzner. However, to
the best of our knowledge, there has been no prior real-
ization of Honeyfarm using high-interaction honeypots,
with detailed design, implementation, and real-world ex-
periments. Furthermore, we demonstrate that by using
high-interaction honeypots, the Honeyfarm vision can
be more completely realized than using low-interaction
honeypots or passive trafﬁc monitors. Meanwhile, we
identify new challenges associated with high-interaction
honeypots in mitigating risks and containing attacks.
The development of Collapsar is more challenging
than the deployment of a stand-alone decoy system. Sys-
tem authenticity requires honeypots to behave, from an
intruder’s point of view, as normal hosts in their associ-
ated network domains. From the perspective of Collap-
sar operators, the honeypots should be easily conﬁgured,
monitored, and manipulated for system manageability.
To realize a full-ﬂedged Collapsar, the following prob-
lems need to be addressed:
Figure 1: Architecture of Collapsar: a VM-based network attack detention center
(cid:15) How to redirect trafﬁc? Trafﬁc toward a honey-
pot should be transparently redirected from the tar-
get network to the Collapsar center without the in-
truder being aware of the redirection. Trafﬁc redi-
rection can be performed by network routers or by
end-systems. While the end-system-based approach
adds additional delay to the attack packets and intro-
duces extra trafﬁc to the target production network,
the router-based approach requires network admin-
istration privileges in every target network domain.
Moreover, a virtual honeypot in the Collapsar center
is expected to exhibit similar network conﬁguration
and behavior as the regular hosts in the same target
network. Such requirements add to the complexity
of redirection mechanisms.
(cid:15) What trafﬁc to redirect? To achieve high authen-
ticity, all trafﬁc to a honeypot needs to be redi-
rected, even if some trafﬁc (such as broadcast) is
not bound exclusively for the honeypot. However,
redirection of all related trafﬁc will incur consid-
erable overhead. More seriously, some trafﬁc may
contain sensitive or private information that the in-
truder should not be given access to. Such informa-
tion should be ﬁltered before redirection. While ju-
dicious trafﬁc redirection is necessary to create au-
thentic environments for trapping highly motivated
intruders, it could be somewhat relaxed for captur-
ing self-propagating computer worms.
(cid:15) When to stop an intrusion? Honeypots are designed
to exhibit vulnerability and are likely to be com-
promised. However, the vulnerability may cascade.
A compromised honeypot can be used in another
round of worm propagation or DDoS attack. Col-
lapsar should detect and prevent such attacks before
any real damage is done. However, simply blocking
all outgoing trafﬁc is not a good solution, because it
will curtail the collection of evidence of the attacks,
such as communication with other cohorts and the
downloading of rootkits. The challenge is to decide
the right time to say ‘Freeze!’ to the intruder.
This paper presents our solutions to the ﬁrst problem.
For the second and the third problems, we have devel-
oped Collapsar components and mechanisms for the en-
forcement of different trafﬁc ﬁltering and attack curtail-
ing policies speciﬁed by Collapsar operators and network
administrators. This paper does not address any speciﬁc
policy and its impact. Instead, it focuses on the architec-
tural and functional aspects of Collapsar.
3 Architecture of Collapsar
The architecture of Collapsar is shown in Figure 1. Col-
lapsar is comprised of three main functional compo-
nents: the redirector, the front-end, and the virtual hon-
eypot (VM). These components work together to achieve
authenticity-preserving trafﬁc redirection. Collapsar also
includes the following assurance modules in order to
capture, contain, and analyze the activities of intruders:
the logging module, the tarpitting module, and the corre-
lation module.
3.1 Functional Components
3.1.1 Redirector
The redirector is a software component running on a des-
ignated machine in each target production network. Its
purpose is to forward attack-related trafﬁc to virtual hon-
eypots in the Collapsar center which will accept trafﬁc
and behave like normal hosts under attack. A redirec-
tor has three main functions: trafﬁc capture, trafﬁc ﬁl-
tering, and trafﬁc diversion. Trafﬁc capture involves the
interception of all packets (including unicast and mul-
ticast packets) toward a honeypot. Since the captured
packets may contain sensitive information, trafﬁc ﬁlter-
ing needs to be performed according to rules speciﬁed
by the network administrator. Finally, packets that have
gone through the ﬁlter will be encapsulated and diverted
to the Collapsar center by the trafﬁc diversion function.
3.1.2 Front-end
The front-end is a gateway to the Collapsar center.
It
receives encapsulated packets from redirectors in differ-
ent production networks, decapsulates the packets, and
dispatches them to the intended virtual honeypots in the
Collapsar center. To avoid becoming a performance bot-
tleneck, multiple front-ends may exist in a Collapsar cen-
ter.
In the reverse direction, the front-end accepts response
trafﬁc from the honeypots, and scrutinizes all packets
with the help of assurance modules (to be described in
Section 3.2) for attack stoppage. If necessary, the front-
end will curtail the interaction with the intruder to pre-
vent a compromised honeypot from attacking other hosts
on the Internet. If a policy determines that continued in-
teraction is allowed, the front-end will forward the pack-
ets back to their original redirectors which will then redi-
rect the packets into the network, such that the packets
appear to the remote intruder as originating from the tar-
get network.
3.1.3 Virtual Honeypot
Honeypots accept packets coming from redirectors and
behave as if they are hosts in the targeted production net-
work being probed. Physically, the trafﬁc between the in-
truder and the honeypot follows the path from intruder’s
machine to redirector to Collapsar front-end to honey-
pot. Logically, the intruder interacts directly with the
honeypot. To achieve authenticity, the honeypot has the
same network conﬁguration as other hosts in the produc-
tion network including the default router, DNS servers,
and mail servers. Honeypots in Collapsar are virtual ma-
chines hosted by physical machines in the Collapsar cen-
ter. Virtualization not only achieves resource-efﬁcient
honeypot consolidation, but also adds powerful capabili-
ties to network attack investigation such as tamper-proof