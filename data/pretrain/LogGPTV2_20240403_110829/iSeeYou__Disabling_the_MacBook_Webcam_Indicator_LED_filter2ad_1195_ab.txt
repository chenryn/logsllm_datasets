The ﬁrst byte of the 16 byte EEPROM controls whether
the EZ-USB loads its ﬁrmware from USB or from the
EEPROM itself. When set to load ﬁrmware from USB, as
the iSight does, the EEPROM contains the USB vendor
Table 1: Relation between the PD3 GPIO, the STANDBY
signal, and the LED.
STANDBY
LED
PD3
High Asserted
Off
Low Deasserted On
Indicator LED
ID (VID), product ID (PID), device release number, and
a conﬁguration byte for the initial device enumeration.
Once the EZ-USB has enumerated using the VID, PID,
and release values, software on the host computer can load
the ﬁrmware. The iSight initially enumerates with vendor
ID 0x05ac (Apple, Inc.) and product ID 0x8300 (Built-
in iSight (no ﬁrmware loaded)).
3.4
Since the purpose of the indicator LED is to illuminate
whenever the camera is capturing video, a LED driver
circuit is connected directly to the STANDBY input of the
image sensor (see Figure 2). In this way, whenever PD3
is high — that is, STANDBY is asserted — the LED is off
and whenever PD3 is low — so STANDBY is deasserted
and the image sensor is producing output — the LED
is on. Since the LED is controlled by the same output
that controls STANDBY, there is no danger that ﬁrmware
on the EZ-USB could deassert STANDBY and turn the
LED off (see Table 1). However, as we demonstrate
in Section 4, we can bypass the STANDBY signal such
that changing PD3 allows us to control the LED without
affecting the operation of the image sensor.
4 Disabling the indicator LED
Disabling the indicator LED on the iSight entails two re-
quirements. First, as described in Section 3, the indicator
LED is directly connected to the STANDBY pin on the
image sensor. In order to disable the LED, we need to
keep STANDBY asserted. Since asserting STANDBY will
disable the image sensor output, we need to conﬁgure the
image sensor to ignore STANDBY before we assert this
signal. Second, we need a way to modify the ﬁrmware on
the EZ-USB to in order to conﬁgure the image sensor ap-
propriately as well as keep STANDBY asserted whenever
we want the LED to stay off.
4.1 Bypassing the STANDBY signal
The Micron image sensor has a 16 bit conﬁguration regis-
ter, RESET (which is distinct from the #RESET power-
on-reset signal). RESET is addressable from the I2C
interface at address 0x0D in register page 0 [37]. The
most signiﬁcant 8 bits control hardware clocks and how
bad frames should be handled which are of no interest to
us and can be left as 0. The least signiﬁcant 8 bits have the
following functionality as described in the image sensor
340  23rd USENIX Security Symposium 
USENIX Association
4
data sheet [37, Table 13]:
Bit 7. Prevent STANDBY from affecting entry to or
exit from the low-power state if set.
Bit 6. Prevent STANDBY from contributing to output
enable control if set.
Bit 5. Reset the SOC (but not the sensor) if set.
Bit 4. Disable pixel data output if set.
Bit 3. Chip enable. Normal operation if set, no sensor
Bit 2. Software standby if set, otherwise normal oper-
readout otherwise.
ation.
Bit 1. Restart reading an image frame.
Bit 0. Reset the sensor to its default state if set, normal
operation otherwise.
Bits 0, 1, and 5 are of no interest and can be set to 0 but
the remaining 5 bits enable us to bypass the STANDBY
signal while still maintaining normal operation. This
includes entering a (software) standby state and disabling
output when appropriate.
When the iSight is ﬁrst powered up (or, more pre-
cisely, when #RESET becomes deasserted), the RESET
register has value 0x0008; that is, normal operation and
STANDBY affects the low-power state and output enable.
If RESET is set to 0x00c8, then the camera has normal
operation but STANDBY is effectively bypassed. When
it becomes desirable for the camera to enter the standby
state, RESET can be set to 0x00d4 which disables out-
put and enters the software standby state.
With RESET set to either 0x00c8 or 0x00d4, the
hardware STANDBY signal is ignored. This enables the
use of the EZ-USB PD3 output to control the LED inde-
pendent of the standby state of the image sensor.
4.2 Programming the EZ-USB
When the iSight is ﬁrst powered, it checks the con-
ﬁguration EEPROM and then waits for programming
over USB (see Section 3.3). The AppleUSBVideo-
Support I/O Kit driver matches the vendor ID (VID)
and product
loads and the
AppleUSBCamera::start() function downloads
the camera’s ﬁrmware (stored in the gTheFirmware
array) to the EZ-USB using a series of vendor-speciﬁc
USB “Firmware Load” device requests [13, Section 3.8].
The camera will then reenumerate and function as a web-
cam.
ID (PID). The driver
One approach to change the ﬁrmware on the camera is
to modify the AppleUSBVideoSupport driver to contain
different ﬁrmware. A second approach would be to pro-
vide a new driver that matches the VID/PID and provides
a higher probe score [2]. The new driver would run at
system start up instead of Apple’s driver and download
the new ﬁrmware to the camera. These approaches have
two major drawbacks. The ﬁrst drawback is that they
rely on programming the iSight when it is in its unpro-
grammed state which only happens when the camera is
ﬁrst powered by the USB bus. The second drawback is
that root access is required in order to modify the existing
driver or load a new driver.
A third approach overcomes both drawbacks by letting
the iSight be programmed with the legitimate ﬁrmware
when it is ﬁrst powered. Once the ﬁrmware has been
loaded onto the camera, it can be reprogrammed at any
time using “Firmware Load” requests. Furthermore, it
can be reprogrammed from any user space process.
5 Finding the vulnerability
The information described in Sections 3 and 4 was dis-
covered by a combination of reverse engineering, experi-
mentation, and reading data sheets once individual com-
ponents were identiﬁed. We started by ordering camera
modules from a variety of Apple computers on eBay. Co-
incidentally, the modules were all from the original iSight
camera, although the camera boards for the MacBook and
iMac had different forms. Figure 1 shows the MacBook
board.
A cursory examination of the board reveals that the
camera microprocessor is a Cypress EZ-USB. The EZ-
USB Technical Reference Manual [13] describes the pro-
cedure to download code to EZ-USB. We reverse engi-
neered the AppleUSBVideoSupport driver using IDA [25]
to determine the format of the ﬁrmware stored in the
driver. (Section 6.1 describes the ﬁrmware in more de-
tail.) We then extracted the ﬁrmware as it would appear
in memory and analyzed it using IDA.
Our initial hypothesis was that the LED would be con-
trolled by one of the EZ-USB GPIO pins via the ﬁrmware.
To test this, we mapped out the connections on the board
using a digital multimeter with a speciﬁc focus on con-
nections from the microcontroller to the indicator LED. A
connection was found between the microcontroller, image
sensor, and the LED driver circuit. Since the microcon-
troller pin connected to the LED was set as an output,
we constructed new ﬁrmware to toggle this output and
examined the results. When the LED was turned on, the
camera functioned correctly. When the LED was turned
off, the camera ceased operating (see Table 1).
Since the output controlling the LED was also con-
nected to the image sensor, we examined it next. When
the legitimate camera ﬁrmware is downloaded to the cam-
era, it identiﬁes itself as “Apple, Inc. Built-in iSight [Mi-
cron]” suggesting that the image sensor was manufactured
by Micron Technology. There is no visible part number
that can be used to identify the model (see Figure 1).
Rather than decapping the chip, we used the Wayback
Machine3 to view the Micron website for 2005, the year
the camera board was copyrighted. Data sheets for the
3https://archive.org/web/
USENIX Association  
23rd USENIX Security Symposium  341
5
image sensors that matched the publicly known specs for
the iSight camera on Micron’s website indicate that the
image sensor communicates over an I2C bus. One of the
I2C-addressable registers identiﬁes the chip version. We
identiﬁed the I2C bus and read the register which revealed
the particular image sensor.
We examined the relevant data sheet for the image sen-
sor and noticed the STANDBY pin with functionality con-
sistent with our experiments toggling the LED-controlling
output pin. After reading the data sheet in more detail, we
discovered the I2C-addressable register which enables a
software override for the STANDBY pin. Further exper-
iments with modiﬁed ﬁrmware were performed to ver-
ify that the LED driver circuit was indeed connected to
STANDBY and that it could be bypassed.
6 Proof of concept
The discussion in Section 4 shows that, in principle, it is
possible to modify the legitimate ﬁrmware to disable the
LED. In this section, we describe the proof-of-concept
application, iSeeYou we created which reprograms the
iSight to add the capability to enable or disable the LED
using a new vendor-speciﬁc USB device request.
6.1 Modifying the ﬁrmware
Although one could reimplement the camera functionality,
we opted to create new ﬁrmware by appending new binary
code to the legitimate ﬁrmware and patching it to call
our new code. The ﬁrst step is to extract the legitimate
ﬁrmware from the AppleUSBVideoSupport device driver.4
The ﬁrmware consists of an 8 byte header followed by
a sequence of triples: a 2 byte size, a 2 byte address, and
size-bytes of data. This format corresponds exactly to the
“C2 Load” format of the EEPROM for loading ﬁrmware
directly from the EEPROM [13, Table 3-6]. Each triple
speciﬁes the data that should be written to the EZ-USB’s
main memory at a given address. By stripping off the
header and the ﬁnal triple,5 we can construct the “raw”
ﬁrmware image. The raw ﬁrmware can then be analyzed
using IDA.
The raw ﬁrmware is structured similarly to sample code
provided in the Cypress EZ-USB FX2LP Development
Kit [14] including a hardware initialization function and
USB events that are serviced by a main loop based on
state bits set by interrupt handlers.
To the legitimate ﬁrmware, we add two bits of state,
“is the sensor in software standby or running” and “is
the LED enabled or disabled,” as well as four new func-
4There are several open source tools to perform this task, e.g., iSight
Firmware Tools [7], several of which include binary patching to ﬁx bugs
in the USB interface descriptors.
5The ﬁnal triple stores a single 0x00 byte to address 0xE600
which takes the Intel 8051 core out of reset so that it can begin executing
instructions.
tions, reset_sensor, enter_standby, exit_
standby, and handle_led_control.
When the LED is enabled, the behavior of the camera
is indistinguishable from the normal behavior. That is,
when the camera is in its standby state the LED is off and
when the camera is in its running state, the LED is on.
The legitimate ﬁrmware contains a function to reset
and conﬁgure the image sensor. This is called both from
the hardware initialization function and the handler for
the USB set interface request. It begins by deasserting
the STANDBY signal and asserting the #RESET. After
a short spin loop, it deasserts #RESET and, depending
on the function argument, deasserts STANDBY. It then
proceeds to conﬁgure the image sensor. We patch the
ﬁrmware to call reset_sensor instead of this conﬁg-
uration function in both locations. The reset_sensor
function reimplements the reset functionality but adds a
call to the function which writes to the I2C bus to program
the RESET register to bypass the STANDBY signal (see
Section 4.1). At this point, if the LED has been disabled
or the argument indicates that it should enter the standby
state, the STANDBY signal is asserted to turn off the LED
which will have momentarily illuminated during the reset
sequence. Otherwise, the sensor is left running and the
LED is enabled so STANDBY remains deasserted and the
LED stays on. Finally, the reset_sensor function
jumps into the middle of the conﬁguration function, just
past the #RESET and STANDBY manipulating code, in
order to perform the rest of the conﬁguration.
The enter_standby and exit_standby func-
tions update the bit of state which records if the image
sensor is running or in standby. Then, based on whether
the LED is enabled or not, they deassert (resp. assert)
STANDBY as needed to turn the LED on (resp. off). Fi-
nally, these functions use I2C to program the RESET reg-
ister to enter or exit software standby. Each location in the
legitimate ﬁrmware which sets the state of the STANDBY
signal is patched to call its new, corresponding standby
function instead.
The ﬁnal function, handle_led_control is re-
sponsible for handling a new vendor-speciﬁc USB de-
vice request. The main loop in the legitimate ﬁrmware
which handles USB device request “setup” packets is
patched to instead call handle_led_control. If the
bRequest ﬁeld of the request does not match the new
vendor-speciﬁc value, then it jumps to the legitimate han-
dler. Otherwise, based on the wValue ﬁeld of the request,
the LED is enabled or disabled. As with the other func-
tions, the LED is then turned on if it has been enabled and
the image sensor is running. Otherwise, it is turned off.
6.2 Demonstration application: iSeeYou
iSeeYou is a simple, native OS X application; see Fig-
ure 3. When iSeeYou starts, it checks for the presence of
342  23rd USENIX Security Symposium 
USENIX Association
6
Figure 3: iSeeYou running on a white MacBook “Core 2 Duo” capturing video from the internal iSight with the LED (the
black dot to the right of the square camera at the top, center of the display bezel) unilluminated.
a built-in iSight using the appropriate vendor and product
IDs. If the iSight is found, iSeeYou initiates the repro-
gramming process using the modiﬁed ﬁrmware described
above. Once the camera has been reprogrammed and
has reenumerated, the start/stop button begins/ends cap-
turing and displaying video. The LED Enable/LED
Disable control sends USB device requests with the
new vendor-speciﬁc value to enable/disable the indicator
LED while video is being captured. Finally, when the
user quits iSeeYou, the camera is reprogrammed with the
legitimate ﬁrmware.
7 Defenses
There are several approaches one can envision to defend
the iSight against the attacks described in the previous sec-
tions. One can change (1) the hardware, (2) the ﬁrmware
on the EZ-USB (unfortunately this is not effective, see be-
low), or (3) the software on the host system. See Table 2
for an overview of possible defenses and their efﬁcacy.
The most comprehensive defense would be to change
the hardware used in the iSight. See Section 8 for sev-
eral secure hardware designs. Of course, changing the
hardware is not a deployable solution for existing de-
vices.
Table 2: Overview of possible defenses.
Defense
Change hardware No
Change ﬁrmware Yes
Yes
App Sandbox
iSightDefender
Yes
Root
Deployable User
Yes
Yes