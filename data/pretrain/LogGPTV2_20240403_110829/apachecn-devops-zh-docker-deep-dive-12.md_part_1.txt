## 十二、Docker 覆盖网络
覆盖网络是许多云原生微服务应用的心脏。在本章中，我们将介绍本机 Docker 覆盖网络的基础知识。
Windows 上的 Docker 覆盖网络具有与 Linux 相同的功能。这意味着我们将在本章中使用的示例都将在 Linux 和 Windows 上工作。
我们将把这一章分成通常的三个部分:
*   TLDR
*   深潜
*   命令
让我们做一些网络魔术。
### Docker 覆盖网络-TLDR
在现实世界中，容器能够可靠、安全地相互通信至关重要，即使它们位于不同网络上的不同主机上。这就是叠加网络发挥作用的地方。它允许您创建跨越多台主机的平坦、安全的第 2 层网络。容器连接到这个，可以直接通信。
Docker 提供本地覆盖网络，默认情况下配置简单且安全。
在幕后，它建立在`libnetwork`和司机之上。`libnetwork`是容器网络模型(CNM)的规范实现，驱动程序是实现不同网络技术和拓扑的可插拔组件。Docker 提供本地驱动程序，包括`overlay`驱动程序。
### Docker 覆盖网络-深潜
2015 年 3 月，Docker，Inc .收购了一家名为 *Socket Plane* 的容器网络初创公司。收购背后的两个原因是将*真正的网络*带到 Docker，并使容器网络足够简单，甚至开发人员也可以做到。
他们在这两方面都做得太好了。
然而，隐藏在简单网络命令后面的是许多移动部件。在进行生产部署和尝试解决问题之前，您需要了解的内容。
本章的其余部分将分为两部分:
*   第 1 部分:我们将构建和测试一个 Docker 覆盖网络
*   第 2 部分:我们将解释使它工作的魔力
#### 在 Swarm 模式下构建和测试 Docker 覆盖网络
对于以下示例，我们将在两个独立的第 2 层网络上使用两台 Docker 主机，通过路由器连接。请参见图 12.1，并注意每个节点所在的不同网络。
![Figure 12.1](img/figure12-1.png)
Figure 12.1
您可以使用 Linux 或 Windows Docker 主机。Linux 应该至少有一个 4.4 Linux 内核(更新的总是更好的)，Windows 应该是安装了最新修补程序的 Windows Server 2016 或更高版本。你也可以在你的苹果电脑或视窗电脑上使用 Docker Desktop。但是，您不会看到全部好处，因为它们只支持单个 Docker 主机。
##### 建立一个群体
首先要做的是将两台主机配置成一个双节点群。这是因为群模式是覆盖网络的先决条件。
我们在**节点 1** 上运行`docker swarm init`命令使其成为*经理*，然后在**节点 2** 上运行`docker swarm join`命令使其成为*工人*。这不是生产级设置，但对于学习实验室来说已经足够了。我们鼓励你与更多的经理和员工一起进行测试，并扩展示例。
如果您在自己的实验室中进行实验，您需要根据您的环境用正确的值来交换 IP 地址等。
在**节点 1** 上运行以下命令。
```
$ docker swarm init \
  --advertise-addr=172.31.1.5 \
  --listen-addr=172.31.1.5:2377
Swarm initialized: current node (1ex3...o3px) is now a manager. 
```
 `在**节点 2** 上运行下一个命令。您需要确保在任何防火墙上都启用了以下端口:
*   `2377/tcp`用于管理平面通信
*   `7946/tcp`和`7946/udp`用于控制平面通信(基于 SWIM 的八卦)
*   `4789/udp`用于 VXLAN 数据平面
```
$ docker swarm join \
  --token SWMTKN-1-0hz2ec...2vye \
  172.31.1.5:2377
This node joined a swarm as a worker. 
```
 `我们现在有一个双节点 Swarm，其中**节点 1** 作为管理人员，**节点 2** 作为工作人员。
##### 创建新的覆盖网络
现在让我们创建一个新的*叠加网络*，称为**超级网络**。
从**节点 1** (管理器)运行以下命令。
```
$ docker network create -d overlay uber-net
c740ydi1lm89khn5kd52skrd9 
```
 `就这样。您刚刚创建了一个全新的覆盖网络，可供 Swarm 中的所有主机使用，并使用 TLS(GCM 模式下的 AES，密钥每 12 小时自动轮换一次)对其控制平面进行加密。如果要加密数据平面，只需在命令中添加`-o encrypted`标志即可。但是，由于性能开销，默认情况下不启用数据平面加密。强烈建议您在启用数据平面加密之前广泛测试性能。但是，如果您启用了它，它会在带有密钥轮换的 GCM 模式下受到相同的 AES 保护。
如果您不确定诸如*控制平面*和*数据平面*等术语，控制平面流量是集群管理流量，而数据平面流量是应用流量。默认情况下，Docker 覆盖网络加密集群管理流量，但不加密应用流量。您必须显式启用应用流量加密。
您可以使用`docker network ls`命令列出每个节点上的所有网络。
```
$ docker network ls
NETWORK ID      NAME              DRIVER     SCOPE
ddac4ff813b7    bridge            bridge     local
389a7e7e8607    docker_gwbridge   bridge     local
a09f7e6b2ac6    host              host       local
ehw16ycy980s    ingress           overlay    swarm
2b26c11d3469    none              null       local
c740ydi1lm89    uber-net          overlay    swarm 
```
 `在 Windows 服务器上，输出看起来更像这样:
```
NETWORK ID      NAME             DRIVER      SCOPE
8iltzv6sbtgc    ingress          overlay     swarm
6545b2a61b6f    nat              nat         local
96d0d737c2ee    none             null        local
nil5ouh44qco    uber-net         overlay     swarm 
```
 `新创建的网络位于名为**超网**的列表底部。其他网络是在安装 Docker 和集群初始化时自动创建的。
如果你在**节点 2** 上运行`docker network ls`命令，你会发现它看不到**超网**网络。这是因为新的覆盖网络仅在工作节点负责在其上运行容器时才扩展到工作节点。这种扩展覆盖网络的惰性方法通过减少网络闲言碎语来提高网络的可扩展性。
##### 将服务附加到覆盖网络
现在您有了一个覆盖网络，让我们创建一个新的 *Docker 服务*并将其连接到网络。该示例将创建带有两个副本(容器)的服务，一个在**节点 1** 上运行，另一个在**节点 2** 上运行。这将自动将**超网**覆盖扩展到**节点 2**
从**节点 1** 运行以下命令。
Linux 示例:
```
$ docker service create --name test \
   --network uber-net \
   --replicas 2 \
   ubuntu sleep infinity 
```
 `Windows 示例:
```
> docker service create --name test `
  --network uber-net `
  --replicas 2 `
  mcr.microsoft.com\powershell:nanoserver pwsh.exe -Command Start-Sleep 3600 
```
 `> **注意:**Windows 示例使用 backtick 字符将参数拆分为多行，使命令更具可读性。反斜杠是 PowerShell 如何转义换行。
该命令创建一个名为 **test** 的新服务，将其连接到 **uber-net** 覆盖网络，并基于所提供的映像创建两个副本(容器)。在这两个例子中，您向容器发出了睡眠命令，以保持它们运行并阻止它们退出。
因为我们正在运行两个副本(容器)，而 Swarm 有两个节点，所以将在每个节点上调度一个副本。
使用`docker service ps`命令验证操作。
```
$ docker service ps test
ID          NAME    IMAGE   NODE    DESIRED STATE  CURRENT STATE
77q...rkx   test.1  ubuntu  node1   Running        Running
97v...pa5   test.2  ubuntu  node2   Running        Running 
```
 `当 Swarm 在覆盖网络上启动一个容器时，它会自动将该网络扩展到运行该容器的节点。这意味着**超级网络**网络现在可以在**节点 2** 上看到。
不属于群组服务的独立容器不能连接到覆盖网络，除非它们具有`attachable=true`属性。以下命令可用于创建独立容器也可连接的可连接覆盖网络。
```
$ docker network create -d overlay --attachable uber-net 
```
 `恭喜你。您已经创建了一个新的覆盖网络，它跨越独立物理底层网络上的两个节点。你还在上面装了两个容器。那是多么容易啊！
#### 测试覆盖网络
让我们用 ping 命令测试覆盖网络。
如图 12.2 所示，我们在不同的网络上有两个 Docker 主机，一个覆盖网络横跨这两个网络。我们在每个节点上都有一个连接到覆盖网络的容器。让我们看看他们是否能互相 ping 通。
![Figure 12.2](img/figure12-2.png)
Figure 12.2
您可以通过按名称 ping 远程容器来运行测试。然而，示例将使用 IP 地址，因为它给了我们一个学习如何找到容器 IP 地址的借口。
运行`docker network inspect`查看分配给覆盖的子网和分配给`test`服务中两个容器的 IP 地址。
```
$ docker network inspect uber-net
[
    {
        "Name": "uber-net",
        "Id": "c740ydi1lm89khn5kd52skrd9",
        "Scope": "swarm",
        "Driver": "overlay",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",