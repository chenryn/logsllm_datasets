standard TX chain. The frequency synthesizer is turned
on/off by the micro-controller so that the resulting sine-
wave has the proper duration of the e-toll query.
• Replacing FFT with the Sparse FFT: As mentioned
in §6, Caraoke operates on the response signal in the fre-
quency domain after taking an FFT. At any time, the num-
ber of transponders that respond to the query is typically
much smaller than the FFT size. In fact in most cases only
a handful of transponders respond. Remember that each
transponder creates a peak at the output of the FFT. Thus,
the output of Fourier transform is sparse. For such sparse
signals, one can compute the Fourier transform in sub-
linear time [32, 31]. To do so, we use the sFFT algorithm
in [33, 11], which is both simple and has low computa-
tion complexity. This directly translates into reduction in
power consumption and speedup in the computation.
• Duty Cycling: Caraoke reader has two operating modes:
active mode and sleep mode. In the active mode, the reader
transmits queries, receives responses, and processes the
signals. In the sleep mode, the query generator and re-
ceiver are turned off by the micro-controller by shutting
off their power supply. All peripheral blocks are also de-
activated. However, the master clock continues to run.
A timer (typically called sleep timer) uses this clock to
wake the micro-controller up at a speciﬁc time. The micro-
controller controls the scheduling of the active and sleep
modes to satisfy a desired power budget. Since each query
takes about 1ms, we expect the average duration of the ac-
tive mode to last for 10ms, allowing for a maximum of 10
queries. By controlling the duration of the sleep mode, the
total power consumption can be dramatically reduced as
we show in §12.5.
11. EVALUATION SETUP
Implementation: We implemented Caraoke reader on a
printed circuit board (PCB) using off-the-shelf compo-
nents. For the RF front-ends we use Maxim Integrated
MAX2117 [41] and Analog Device AD7356 [15], and the
Calliope LTE modem [50]. For the micro-controller, we use
an Arduino Due board. The power management circuit in-
cludes regulator to regulate the voltage from the solar panel.
For the solar panel, we use OSEPP SC10050 [47]. The
RF chains share the same clock for accurate synchroniza-
tion. The antennas are omni-directional and separated by
λ
2 = 6.5 inches. The ADC resolution is 12 bits. Also, the
ADCs have differential inputs, and hence higher robustness
to noise and interference. The total cost of the components
is less than $40, making the device amenable to large scale
deployment. Further, this cost can be signiﬁcantly reduced
in mass production.
305Street A
B
t
e
e
r
t
S
C
t
e
e
r
t
S
)
%
(
y
c
a
r
u
c
c
A
102
100
98
96
94
5
10
15
20
25
30
35
40
45
50
Number of Trasnponders
Figure 11—Counting Accuracy: Plot of Caraoke’s count-
ing accuracy as the number of colliding transponders in-
creases.
12.1 Counting Accuracy
In the ﬁrst experiment, we aim to evaluate Caraoke’s abil-
ity to count transponders based on their CFOs. If we ran this
experiment directly on collision signals, we would not know
the ground truth. Hence, we needed ﬁrst to estimate the CFO
of each transponder in the absence of collisions. We col-
lected signals from 155 different transponders in one of our
campus parking lots. We used a directional antenna to ob-
tain the response of each transponder without collisions. For
each transponder, we took the FFT of its signal and noted
the FFT bin of its CFO. We then create collisions in post-
processing by summing up the time signals from a subset
of the transponders. We change the number of transponders
in the subset to obtain collisions with different numbers of
colliding transponders. Finally, we take an FFT of each col-
lision signal and estimate the number of colliding transpon-
ders using the approach described in §5. We have considered
collisions of 5, 10, . . . , 50 transponders, and for each case
performed 1000 runs.
Fig. 11 plots the average accuracy in counting colliding
transponders. The ﬁgure shows that when the number of
transponders in a collision is relatively small, Caraoke accu-
racy is very close to optimal. In particular, given the empiri-
cal CFO values of e-toll transponders, Caraoke can maintain
an accuracy higher than 99% when the colliding transpon-
ders are fewer than 40. Note that the overall counting accu-
racy depends on how often the reader would experience 40-
transponder collisions vs. 5-transponder collisions, or other
numbers. This depends on the intersection and the amount of
trafﬁc. Overall, the results show that Caraoke is effective at
counting vehicles using e-toll transponder collisions.
In our second experiment, we deployed Caraoke at the in-
tersection of Street A and Street C in Fig. 10(a), and used
it to track the ﬂow of trafﬁc on the two streets. In this ex-
periment, we do not know the ground truth since we do not
know which cars have transponders; despite this limitation
the results can indicate the ratio of trafﬁc between the two
streets and how it relates to the timing of their green-light
and red-light.
Fig. 12 plots the number of cars observed by Caraoke as a
function of time for both streets. The ﬁgure is marked with
the green-yellow-red times for the trafﬁc lights on each of the
streets. The ﬁgure shows how a backlog of cars accumulates
during a red-light and clears during a green light. Further,
Street D
Figure 10—Experimental Setup. We ran our experiments
on four streets in our campus, marked as streets A, B and C
in the top ﬁgure and street D in the bottom ﬁgure. All streets
have two-way trafﬁc and most have parking spots on one or
both sides.
We note that for our setup, we extract the data using the
USB port as this does not require an LTE subscription and
has no impact on counting, localization, or speed estimation.
Experimental Setup: We conducted our experiments on
four campus streets, A, B, C, and D, which are shown in
Figs. 10(a) and (b). All streets have 2-way trafﬁc. Streets A,
B, and D have street parking one or both sides of the road.
Street C is the busiest street on campus, and is a major street
in our city. In all of our experiments, the Caraoke reader was
placed on a 12.5-feet pole. We used a total of 4 such poles.
The poles are portable and hence allow us to experiment with
various conﬁgurations, as detailed in §12.2.
All experiments were conducted with standard E-ZPass
transponders attached to the cars’ windshields. We tried to
limit our experiments to transponders and cars owned by the
authors. However, certain experiments require investigating
the distribution of transponder CFOs and its impact on our
ability to count vehicles. For that experiment, we collected
transponder responses from random cars. We measured only
the CFO of the transponders and did not decode the bits. Af-
ter processing the signals to extract and count the CFOs, we
stored only the CFO values with no reference to the ids of
the car. We do not believe that the values of the CFOs can be
mapped to the owners or used to infer any private informa-
tion about them. Finally, we note that our transmissions of a
sine-wave in the band used by E-ZPass is in accordance with
the FCC rules Part 15 [27].
12. EMPIRICAL EVALUATION OF CARAOKE
We evaluate the various functions of Caraoke using out-
door experiments performed with E-ZPass transponders.
306)
e
e
r
g
e
d
n
i
(
r
o
r
r
E
n
o
i
t
a
z
i
l
a
c
o
L
8
6
4
2
0
1
2
3
4
Parking Space
5
6
Figure 13—Transponder’s Localization Accuracy. Figure
shows the accuracy of localization for cars parked in differ-
ent parking spaces where the spot 1 is closest and spot 6 is
the furthest spot to Caraoke pole. Caraoke enables enough
accuracy to detect occupied versus available spots
1.0
0.75
0.50
r
e
w
o
P
0.25
0
-100 -80
-60
-40
-20
0
20
40
60
80
100
Angle of Arrival (degree) 
Figure 14—Multipath Proﬁle. Caraoke readers have strong
line-of-sight paths to the transponders. Therefore, multipath
effects which occur in standard indoor environments are sig-
niﬁcantly weaker.
away from the pole. This is because the two antennas used
for computing the AoA create a 60o angle with the plane of
the road. As explained in §6, without this tilt the error in
AoA for the farthest spot, i.e., spot 6, would be signiﬁcantly
larger than the closer spots. The results show that our deci-
sion of positioning the antennas at 60o angle with the street
produces a relatively balanced error across spots.
One may be surprised that Caraoke’s AoA accuracy is
high despite that it uses a simple two-antenna array. Large
antenna arrays are typically needed in multipath scenarios
to separate signals that travel along different paths from
source to destination. While multipath effect has been a big
challenge for indoor localization, it becomes less prominent
in Caraoke’s design, primarily because Caraoke reader is
mounted on a several meter high pole in an outdoor environ-
ment, and hence, has a prominent line-of-sight path between
transmitter and receiver. To ascertain that this setting indeed
has low multipath, we augmented Caraoke with an antenna
attached to a rotating arm of radius 70cm. Like past work
[37], we use this design to emulate a large antenna array
(Synthetic Aperture Radar) and obtain the multipath proﬁle
of the signal coming from the car’s transponder. As the an-
tenna rotates, we continuously measure the wireless channel
of the transponder’s signal and then use the measured chan-
nels to reconstruct the multipath proﬁle of the transponder’s
signal using standard phased array processing algorithm and
the MUSIC algorithm [60].
A representative multipath proﬁle obtained using this
setup is shown in Fig. 14. As expected, the multipath pro-
Figure 12—Trafﬁc Monitoring at an Intersection. The
ﬁgure shows the number of cars counted by Caraoke at an
intersection over two periods of green-red lights.
road C is much busier than road A (10 times on average),
but its green light is only 3 times longer than that of road
A. This shows that Caraoke can help the city understand the
relative congestion on various streets, and potentially adapt
the timing of the trafﬁc light to reduce car waiting time.
12.2 Localization Accuracy
In this experiment, we focus on localizing cars to park-
ing spots. We ran our experiments on streets A and B, which
have parking spots on one or both sides of the road, for a
total of 36 spots. We use 4 poles, two deployed on street A
and one at the intersection of A and B, and one on street B.
We use two cars equipped with E-ZPass transponders, which
we move between different parking spots to experiment with
different conﬁgurations. There are other cars parked on the
street, whose transponders collide with our two cars. We
ran over 175 localization tests which span 35 conﬁgurations
for the cars, and 5 runs per conﬁguration which differ by
the number and identity of the colliding transponders due
to other parked cars and trafﬁc dynamics on the streets. In
our processing, we ignore the FFT spikes corresponding to
other cars and focus on localizing our transponders using
the method described in §6. To measure the ground truth we
use a Bosch GLM50 laser distance measurement tool [17],
which can measure distances to within a few millimeters. We
then measure the ground truth angle using our knowledge of
the transponder’s distance from the pole, the pole’s height,
and the transponder’s elevation.14
Fig. 13 plots the error in the angle of arrival measurement
computed by Caraoke. The errors are plotted as a function
of the location of the parking spot with respect to the pole
carrying the Caraoke reader. The bar graph shows the aver-
age and standard deviation of the measurements from all four
poles. The ﬁgure shows that the average localization error is
about 4 degrees. Interestingly the error is the largest at the
two ends, i.e., when the car is only 1 spot away or 6 spots
14Measuring the ground truth for 3D angles is difﬁcult. How-
ever, since the car is parked to the side of the road, the
transponder, the pole and the two antennas are approxi-
mately in the same plane. Hence, knowing the distances we
can measure the ground-truth angle with simple geometry
rules. Note that this approximation means that our results are
conservative –i.e., Caraoke’s actual errors could be slightly
smaller.
30750
40
30
20
10
d
e
e
p
S
d
e
t
c