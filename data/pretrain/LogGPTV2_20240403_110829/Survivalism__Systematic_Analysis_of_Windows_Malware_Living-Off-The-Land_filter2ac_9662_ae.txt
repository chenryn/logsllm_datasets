### Instance of Kaspersky's Detection Implementation
Kaspersky implemented detections resulting from our responsible disclosure process, including Trojan.Win32.Lolbas.btad.exec and Trojan-Spy.Win32.Agent.ftps, among others. Additionally, we release Yara rules to aid in the detection of Living off the Land (LotL) techniques. Our study reveals differences in execution purposes between benign and malicious samples, providing a vector for the development of detection algorithms. Recent research [71, 21] explores this promising line of inquiry to overcome the limitations of existing security products.

### Scope and Prevalence of LotL Techniques
In some descriptions, LotL techniques are exclusively associated with methods that achieve antivirus evasion. However, in this paper, we adopt a broader scope. We observed that within a balanced dataset of malware, 9.6% of malware used a native system binary to perform a malicious action.

### Execution Purposes of LotL Binaries
Regarding execution purposes, we found that LotL binaries were not only used for proxied execution or evasion but also to implement common malicious routines such as delaying execution, modifying system configuration, ensuring persistence, or stopping security services.

### Variability Among Malware Families
There was significant variability in the prevalence of LotL techniques among different families, as reported by the AVClass tool. While most families showed a low prevalence, a minority used these techniques with much higher frequency. This indicates that these techniques are common enough to be adopted by certain malware authors but are not the primary method for implementing malicious functionality in all malware.

### Comparison with Legitimate Software
Legitimate software uses LotL binaries less frequently than malware. Although the purposes differ, the prevalence is significant enough to make accurate detection of malicious usage challenging for security vendors. Conversely, Advanced Persistent Threat (APT) malware leverages LotL binaries at twice the rate of commodity malware. This evidence suggests that LotL techniques have significant adoption in current, state-of-the-art malware and represent a challenge for the security industry from a detection perspective. This paper aims to shed light on this phenomenon and raise awareness within the research community about this open problem.

### Contributions to the LOLBAS Project
As an example of modern malware techniques, we identified and documented two new Windows system binaries and added them to the LOLBAS project repository [46]:
- **At.exe**: Executes scheduled tasks at a future time, used to stealthily maintain persistence on infected systems. For instance, the SoftCell threat group [30] uses At.exe for persistence. Many other threat groups use Schtasks.exe for similar purposes.
- **Netsh.exe**: Typically used to alter firewall configurations. We document a use case where Netsh.exe can be used to load malicious .dlls.

### Limitations and Future Work
#### Intended or Unexpected Functionality
Our measurement results do not differentiate between standard and non-standard uses of binaries. Some cases are documented in the LOLBAS project [46]. For example, Netsh.exe is used to modify firewall rules (standard usage), while an unintended usage would be to run .dlls. We measure whether parameters from executed samples match these usage patterns. Malware binaries in our dataset do employ these techniques, but they make up less than 2% of total measured LotL binary usage. Therefore, we do not include a comparison of intent in our measurement results.

#### Anti-VM Malware
Due to data originating from dynamic analysis sandboxes hosted in the cloud, anti-VM evasion techniques may affect data quality. We mitigate this by excluding malware samples that have minimal execution or crash during sandbox analysis. Evasive malware using anti-VM techniques may not demonstrate actual behavior, potentially underestimating the number of samples using LotL binaries. Nevertheless, our numbers provide a lower bound of the prevalence of this technique, indicating it is a significant phenomenon that should not be ignored.

#### Human Operators
Many threat actors using LotL techniques are human operators executing them from remote shells, offensive security tools, PowerShell, Visual Basic, or Batch scripts [30]. While there is anecdotal evidence, it is challenging to generalize and conduct a comprehensive measurement study. We narrowed our focus to the usage of LotL binaries by malware, showing that this phenomenon is not negligible and that malware authors leverage these techniques in their binaries, not just in post-exploitation scripts.

#### Linux LotL
A future research direction is to explore the use of these techniques on Linux systems, known as GTFObins [19]. Similar to Windows, these binaries can achieve malicious functionality. Although Linux malware is less prevalent than Windows malware, it is a worthy subject due to the rise of IoT botnets running lightweight Linux systems [12].

#### Detection
Another future direction is the deployment of detection technologies, such as Endpoint Detection and Response (EDR) systems, to accurately capture the identified patterns of LotL techniques. Future research should leverage recent work [71, 21] on data provenance analysis for process execution chains to model legitimate process relationships and identify suspicious behavioral patterns.

### Availability
Research artifacts are available at:
- https://livingoffthe.land
- https://github.com/ssloxford/livingofftheland

### Acknowledgements
We thank Paul Pearce for shepherding this paper. We also thank Bernardo Quintero and Emiliano Martinez of VirusTotal and Sunil Potti of Google Cloud Security for access to VirusTotal process execution data.

### References
[References listed as provided, with URLs and details included for each reference.]

---

This revised version aims to improve clarity, coherence, and professionalism, making the text more accessible and structured.