title:A Learning-Based Approach for IP Geolocation
author:Brian Eriksson and
Paul Barford and
Joel Sommers and
Robert D. Nowak
A Learning-Based Approach for IP Geolocation
Brian Eriksson1, Paul Barford1, Joel Sommers2, and Robert Nowak1,(cid:2)
1 University of Wisconsin - Madison
2 Colgate University
PI:EMAIL, PI:EMAIL, PI:EMAIL,
PI:EMAIL
Abstract. The ability to pinpoint the geographic location of IP hosts is
compelling for applications such as on-line advertising and network at-
tack diagnosis. While prior methods can accurately identify the location
of hosts in some regions of the Internet, they produce erroneous results
when the delay or topology measurement on which they are based is lim-
ited. The hypothesis of our work is that the accuracy of IP geolocation
can be improved through the creation of a ﬂexible analytic framework
that accommodates diﬀerent types of geolocation information. In this
paper, we describe a new framework for IP geolocation that reduces to
a machine-learning classiﬁcation problem. Our methodology considers a
set of lightweight measurements from a set of known monitors to a tar-
get, and then classiﬁes the location of that target based on the most
probable geographic region given probability densities learned from a
training set. For this study, we employ a Naive Bayes framework that
has low computational complexity and enables additional environmen-
tal information to be easily added to enhance the classiﬁcation process.
To demonstrate the feasibility and accuracy of our approach, we test
IP geolocation on over 16,000 routers given ping measurements from 78
monitors with known geographic placement. Our results show that the
simple application of our method improves geolocation accuracy for over
96% of the nodes identiﬁed in our data set, with on average accuracy
70 miles closer to the true geographic location versus prior constraint-
based geolocation. These results highlight the promise of our method
and indicate how future expansion of the classiﬁer can lead to further
improvements in geolocation accuracy.
1 Introduction
There are many ways in which the structural and topological characteristics of
the Internet can be considered. One way that has signiﬁcant implications for
advertisers, application developers, network operators and network security an-
alysts is to identify the geographic location of Internet devices (e.g., routers or
(cid:2) This work was supported in part by the National Science Foundation (NSF) grants
CCR-0325653, CCF-0353079, CNS-0716460 and CNS-0905186, and AFOSR grant
FA9550-09-1-0140. Any opinions, ﬁndings, conclusions or other recommendations
expressed in this material are those of the authors and do not necessarily reﬂect the
view of the NSF or the AFOSR.
A. Krishnamurthy and B. Plattner (Eds.): PAM 2010, LNCS 6032, pp. 171–180, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
172
B. Eriksson et al.
end hosts). Geographic location can mean the precise latitude/longitude coordi-
nates of a device or a somewhat more coarse-grained location such as within a
zip code, city, county or country.
There are a number of challenges in ﬁnding the geographic location of a given
Internet device. The most obvious is that there is no standard protocol that pro-
vides the position of any device on the globe (although DNS entries can include
a location record). Furthermore, Internet devices are not typically equipped with
location identiﬁcation capability (e.g., GPS, although this may change in the fu-
ture), and even if they did, some would consider this information private. Prior
methods have focused on identifying the geographic location of an Internet device
based on its position relative to a set of active measurements from landmarks
with known positions. While these methods have been shown to be capable of
producing relatively accurate geographic estimates in some areas, inaccuracies
remain for a variety of reasons. Principal among these is the fact of inconsistent
density of speciﬁc measurements across the globe.
The goal of our work is to broadly improve IP geolocation accuracy over prior
methods. Our hypothesis is that the large estimation errors caused by imperfect
measurements, sparse measurement availability, and irregular Internet paths can
be addressed by expanding the scope of information considered in IP geolocation.
The estimation framework that we develop to test this hypothesis is to cast IP
geolocation as a machine learning-based classiﬁcation problem. This extensible
approach enables information from multiple datasets to be fused such that areas
that have low information content from one measurement can be compensated
with better information content from other measurements.
To ﬂesh out this framework in order to test our hypothesis, we must select
both a classiﬁcation method and a set of measurements that can be used to
estimate IP geolocation. We develop a Naive Bayes estimation method that as-
signs a given IP target to a geographic partition based on a set of measurements
associated with that IP target. Given the potentially large number of measure-
ments to an IP target, probability likelihood estimation is simpliﬁed by a Naive
Bayes approach. The network measurement data considered in this framework
includes latency and hop count from a set of landmarks to an IP target. We
also include population density in the framework as a demonstration of a non-
network measurement that can help reﬁne the estimates. The selection of this
classiﬁer/measurement combination was made to demonstrate the potential of
this new approach, but is not meant to be deﬁnitive nor comprehensive.
To test and evaluate the capabilities of this initial instance of our learning-
based approach, we consider geographic partitioning at the level of counties in
the continental United States1. While considerable Internet topology lies out-
side the continental United States, the initial validation on this dataset will
motivate future work on end hosts located outside the United States. We iden-
tiﬁed a target set of 114,815 spatially diverse nodes in the Internet through full
1 Finer-grained partitioning on the order of zip codes or city blocks is certainly feasible
in our framework, but county-level was selected due to the availability of data for
test and evaluation.
A Learning-Based Approach for IP Geolocation
173
mesh traceroute probing from Planetlab nodes, supplemental data from the
iPlane [1] project, and careful alias resolution. For ground truth on the geo-
graphic location of these target nodes, we used the Maxmind database [2] as
a validation set for our methodology. Of the 114,815 IP target nodes identiﬁed
in our measurements, 16,874 were identiﬁed in the Maxmind database as being
within the United States with known city locations. Due to its use as a com-
mercial product, the exact underlying methodology for the Maxmind database
is not available, although extensive use of user-survey geolocation information
is known to be used.2 For that set of 16K target nodes, we then gathered hop
count and latency measurements from 78 PlanetLab nodes located in the United
States, which were the starting point for our assessment.
We selected a subset of target nodes3 for training our classiﬁer, with the
training set nodes having both known measurements to the monitors and known
geolocation. With the remaining nodes, we compare the geolocation estimates of
both our learning-based approach and Constraint-Based Geolocation (CBG) [3]
(the current state-of-the-art geolocation algorithm using ping measurements)
validated against the locations found using the Maxmind database. We ﬁnd
that our estimator is able to provide better location estimates than CBG for
96% of the nodes and on average provide an estimate that is 70 miles closer to
the true location. We believe that these results make a compelling case for future
development of learning-based methods for IP geolocation.
2 Learning-Based IP Geolocation
Given a single target IP address, can we determine the geographic location of the
target IP? Consider a single target IP address with a set of measurements from
a set of monitors with known geolocation to this target IP address. For the pur-
poses of this work, the measurement set M (= {m1, m2, ..., mM}) is the collection
of both latency and hop count values going from the monitor set. Without loss of
generality, now consider a set of possible counties in the continental United States
(C), such that the target is located in some county c ∈ C. This changes the under-
lying problem to, Given the measurement set M, can we estimate which county
c ∈ C the target IP is located in? The best classiﬁer would choose the county
((cid:2)c) that the target is most probably located in given the measurement set, (cid:2)c =
), therefore
arg max
P (M| c) P (c).
we can restate the classiﬁer as (cid:2)c = arg max
Where the value P (M), the probability of observing the set of measurements,
can be ignored due to this value being constant across any choice of county c.
P (c| M). Using Bayes Theorem [4] (P (A|B) = P (B|A)P (A)
c∈C
c∈C
P (B)
P (c| M) = arg max
c∈C
2 Due to its dependence on user generated data, updating the Maxmind database re-
quires extensive user surveying that is not needed with our learning-based method-
ology.
3 We consider IP addresses and nodes to be equivalent in this paper since even if alias
resolution on routers is imperfect, it should not aﬀect our empirical results.
174
B. Eriksson et al.
Next, we expand our estimation framework to consider features other than
measurements from monitors to IP targets. Given that the targets in this paper
are routers, we can use the work in [5] to inform where these routers should be
geographically located. Speciﬁcally, the value P (c), the probability of classifying
a target in county c, will be chosen using the results showing that the number
of routers in a speciﬁc geographic location is strongly correlated with the pop-
ulation of that geographic location. Therefore, we can estimate the probability
of classifying into a given county to be the population of that county divided by
the total population in all the counties under consideration.
(cid:2)P (ci) =
(cid:3)
Population of ci
j∈C Population of cj
(1)
If all of
the values of M were statistically independent
How can we estimate the value P (M| c), the probability likelihood of a mea-
surement set M being observed given the target is located in county c? Given
a set of training data, a set of IP addresses with known measurement sets M
and locations c, we could use oﬀ-the-shelf techniques (kernel density estimators,
histograms, etc.) to estimate the multivariate likelihood density P (M| c). A
problem is that the set M is most likely of high dimensions (with dimensional-
ity equal to the number of hop count and latency measurements observed to this
target, in this case, on the order of 100), and most density estimator techniques
have an error rate that increases quickly with the dimension of the problem [4].
from each
then the likelihood density could be restated as: P (M| c) =
other,
P ({m1, m2, ..., mM} | c) ≈ P (m1 | c) P (m2 | c) ...P (mM | c) This converts the
problem from estimating one M-dimensional density to estimating M one-
dimensional densities. However, it should be assumed that there is a large degree
of correlation between measurements, with prior work in [6] showing correlation
between hop count measurements, and work in [7] showing correlation between
latency measurements. The risk of assuming statistical independence between
measurements is informed by empirical studies on highly dependent data in
[8]. That work shows that for classiﬁcation, there is little penalty for assuming
statistical independence even when the measurements are highly statistically de-
pendent. This is due to classiﬁcation performance depending only on the most-
probable class (in this case, county region) likelihood probability being greater
than other class likelihood probabilities, not the goodness-of-ﬁt of our estimated
likelihood probability to the true likelihood probability.
The next step in our learning-based framework is to estimate the one-
dimensional densities, P (mi | c), the probability of the measurement value mi be-
ing observed given that the target is located in county c. Consider a set of training
data, where for each training target, both the measurement set M and the ge-
olocation county c is known. Given the known monitor placement, for the entire
training set we can determine the distance vector d = {d1, d2, ..., dM}, where di is
the distance between the monitor associated with measurement mi and county c.
These measurements with distance ground truth can then be used to learn the
A Learning-Based Approach for IP Geolocation
175
density (the probability of observing measurement mi given that the target is lo-
cated di distance away from the monitor associated with measurement mi).
Simple density estimators, such as histograms, can be used and will assure that
measurement outliers do not signiﬁcantly contribute to the density estimation.
One drawback to histogram estimators is that the lack of smoothness in the
estimated density can hurt performance. Instead, we will look to use Kernel
Density Estimators [4], which use the summation of smooth kernel functions to
estimate the density. This smoothness in the estimated density allows improved
estimation of the true density given the limited size of our training set.
For hop count measurements, a one-dimensional density will be estimated at
each hop count value ranging from one hop away from a monitor to ten hops away
(it is assumed that any distance longer than ten hops will not help in estimating
distance). For latency measurements, due to the limited amount of training data,
the measurements are aggregated together separated by 10ms, with a single es-
timated one-dimensional density for 0-9ms, a separate one-dimensional density
for 10-19 ms, 20-29ms, etc. An example of a kernel estimated density for latency
measurements can be seen in Figure 1 along with the resulting probability dis-
tribution across the US counties for observing this latency measurement to a
monitor with known geolocation.
Fig. 1. (Left) - Probability for latency measurements between 10-19ms being observed
given a target’s distance from a monitor. Stem plot - Histogram density estimation,
Solid line - Kernel density estimation. (Right) - The kernel estimated probability of
placement in each county given latency observation between 10-19ms from a single
monitor marked by ’x’.
The amount of location information from latency measurements is likely to
be of more use than the location information derived from hop count measure-
ments or population data. Therefore we introduce two weights λhop and λpop
as the weights on the hop count measurements and the population density data
respectively. Informed by the geolocation improvement by using measurement
weights in the Octant framework [9], the ordering of the measurements should
also imply some degree of importance, as the location of the monitor with the
shortest latency measurement to the target should inform the classiﬁer more
than the monitor with the 30-th closest latency measurement. Therefore, we will