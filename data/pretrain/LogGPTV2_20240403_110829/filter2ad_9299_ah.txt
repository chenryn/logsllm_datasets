    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5b7:
    63a468d7 6a00            push    0                                              ; skip_cch,需要跳过的字符数
    0:008:x86> p
    eax=0508c7bc ebx=0508cb38 ecx=1d02f020 edx=00000003 esi=0508ca08 edi=0000fdef
    eip=63a468d9 esp=0508c7a0 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5b9:
    63a468d9 e890b1fbff      call    MSHTML!Tree::TextData::GetText (63a01a6e)     
    0:008:x86> p
    eax=1d02f028 ebx=0508cb38 ecx=1d02f020 edx=0508c7bc esi=0508ca08 edi=0000fdef
    eip=63a468de esp=0508c7a8 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5be:
    63a468de 8b7c2414        mov     edi,dword ptr [esp+14h] ss:002b:0508c7bc=0267ffff
    0:008:x86> dd eax-0x8 l10       ; 返回值为文本字符串的指针,Tree::TextData对象偏移8字节处
    1d02f020  00000002 0267ffff 002c002c 002c002c
    1d02f030  002c002c 002c002c 002c002c 002c002c
    1d02f040  002c002c 002c002c 002c002c 002c002c
    1d02f050  002c002c 002c002c 002c002c 002c002c
    0:008:x86> dd 0508c7bc l1
    0508c7bc  0267ffff              ; 实际获得的文本长度,未截断文本长度,0x0267ffff = 40370176 - 1
    0:008:x86> p
    eax=1d02f028 ebx=0508cb38 ecx=1d02f020 edx=0508c7bc esi=0508ca08 edi=0267ffff
    eip=63a468e2 esp=0508c7a8 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5c2:
    63a468e2 8b4c2424        mov     ecx,dword ptr [esp+24h] ss:002b:0508c7cc=00000003
    0:008:x86> p
    eax=1d02f028 ebx=0508cb38 ecx=00000003 edx=0508c7bc esi=0508ca08 edi=0267ffff
    eip=63a468e6 esp=0508c7a8 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5c6:
    63a468e6 8b54241c        mov     edx,dword ptr [esp+1Ch] ss:002b:0508c7c4=00680003
    0:008:x86> p
    eax=1d02f028 ebx=0508cb38 ecx=00000003 edx=00680003 esi=0508ca08 edi=0267ffff
    eip=63a468ea esp=0508c7a8 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5ca:
    63a468ea 57              push    edi                                            ; edi,源文本字符串长度,未截断文本长度
    0:008:x86> p
    eax=1d02f028 ebx=0508cb38 ecx=00000003 edx=00680003 esi=0508ca08 edi=0267ffff
    eip=63a468eb esp=0508c7a4 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5cb:
    63a468eb 50              push    eax                                            ; eax,源文本字符串内存地址
    0:008:x86> p
    eax=1d02f028 ebx=0508cb38 ecx=00000003 edx=00680003 esi=0508ca08 edi=0267ffff
    eip=63a468ec esp=0508c7a0 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5cc:
    63a468ec 8b465c          mov     eax,dword ptr [esi+5Ch] ds:002b:0508ca64=21d4e020
    0:008:x86> p
    eax=21d4e020 ebx=0508cb38 ecx=00000003 edx=00680003 esi=0508ca08 edi=0267ffff
    eip=63a468ef esp=0508c7a0 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5cf:
    63a468ef 2bd1            sub     edx,ecx                                        ; edx,目的内存大小,截断文本长度
    0:008:x86> p
    eax=21d4e020 ebx=0508cb38 ecx=00000003 edx=00680000 esi=0508ca08 edi=0267ffff
    eip=63a468f1 esp=0508c7a0 ebp=0508c9f0 iopl=0         nv up ei pl nz na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5d1:
    63a468f1 8d0c48          lea     ecx,[eax+ecx*2]                                ; ecx,目的内存地址
    0:008:x86> p
    eax=21d4e020 ebx=0508cb38 ecx=21d4e026 edx=00680000 esi=0508ca08 edi=0267ffff
    eip=63a468f4 esp=0508c7a0 ebp=0508c9f0 iopl=0         nv up ei pl nz na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5d4:
    63a468f4 e8b8852500      call    MSHTML!wmemcpy_s (63c9eeb1)
    0:008:x86> dd esp l2
    0508c7a0  1d02f028 0267ffff
    0:008:x86> p
    Invalid parameter passed to C runtime function.
    eax=00000022 ebx=0508cb38 ecx=8cccdfa3 edx=00000000 esi=0508ca08 edi=0267ffff
    eip=63a468f9 esp=0508c7a0 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x5d9:
    63a468f9 8b4c2418        mov     ecx,dword ptr [esp+18h] ss:002b:0508c7b8=04a849f0
    0:008:x86> g
    (638.ad8): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=21d4e020 ebx=0508cb38 ecx=04aae5c4 edx=02680002 esi=0508ca08 edi=0000fdef
    eip=63a46809 esp=0508c7a8 ebp=0508c9f0 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010202
    MSHTML!CSpliceTreeEngine::RemoveSplice+0x4e9:
    63a46809 66893c50        mov     word ptr [eax+edx*2],di  ds:002b:26a4e024=????     ; Crash
下面是存在漏洞的函数CSpliceTreeEngine::RemoveSplice()的关键部分代码(逆向所得)：
    HRESULT __thiscall CSpliceTreeEngine::RemoveSplice(CSpliceTreeEngine *this)
    {
        // 初始DOM流,_ptpSourceL(),_ptpSourceR(CTreeDataPos(Pointer,04b152f0))
        //  ->  -> CTreeDataPos(Pointer,04b15320) ->  ->  ->  -> CTreeDataPos(Text,04b151a0) 
        // ->  -> CTreeDataPos(Pointer,04b152f0) ->  -> 
        ...
        // pSpliceAnchor._pTreePos = _ptpSourceL->_pLeft
        // 执行完第一个CSpliceTreeEngine::CSpliceAnchor::AnchorAt()后的DOM流
        //  ->  -> CTreeDataPos(Pointer,04b15320) ->CTreeDataPos(Pointer,04b15350) ->  ->  ->  
        // -> CTreeDataPos(Text,04b151a0) ->  -> CTreeDataPos(Pointer,04b152f0) ->  -> 
        hr1 = CSpliceTreeEngine::CSpliceAnchor::AnchorAt(&pSpliceAnchorL, ptpSourceL, 1, 0);
        // pSpliceAnchor1._pTreePos = _ptpSourceR->_pRight
        // 执行完第二个CSpliceTreeEngine::CSpliceAnchor::AnchorAt()后的DOM流
        //  ->  -> CTreeDataPos(Pointer,04b15320) ->CTreeDataPos(Pointer,04b15350) ->  ->  ->  
        // -> CTreeDataPos(Text,04b151a0) ->  -> CTreeDataPos(Pointer,04b152f0) -> CTreeDataPos(Pointer,04b15380) ->  -> 
        if ( hr1 || (hr1 = CSpliceTreeEngine::CSpliceAnchor::AnchorAt(&pSpliceAnchorR, this->_ptpSourceR, 0, 1)) != 0 )// ？不满足
        {
    LABEL_156:
            hr = hr1;
            goto LABEL_157;
        }
        // _ptpSourceL != _ptpSourceR->NextTreePos()
        if ( this->_ptpSourceR->_pRight != this->_ptpSourceL )// ？必须满足,CSpliceTreeEngine,CTreePos
        {
            ...
            if ( HIBYTE(v179) && (this->field_54 & 4) != 0 )// CSpliceTreeEngine,CMarkUp,this->field_54=0x4
            {
                ptpSourceL_cchLeft = 1 - CTreePos::GetCp(this->_ptpSourceL);// 1-2=-1,_ptpSourceL()
                ptpSourceR_cchLeft = CTreePos::GetCp(this->_ptpSourceR);// 0x00680005,_ptpSourceR(CTreeDataPos(Pointer,04b152f0))
                ptpSourceR = this->_ptpSourceR;
                fNotText = (ptpSourceR->_cElemLeftAndFlags & 4) == 0;
                ptpSourceR_to_ptpSourceL_cch = ptpSourceL_cchLeft + ptpSourceR_cchLeft;
                if ( !fNotText )                          // fNotText = True
                {
                    TextLength = CTreeDataPos::GetTextLength(ptpSourceR);
                    ptpSourceR_to_ptpSourceL_cch = TextLength + ptpSourceR_to_ptpSourceL_cch - 1;
                }
                LOBYTE(ptpSourceR) = HIBYTE(v179);        // ptpSourceR = v179 = 1
                v11 = cch;                                // v173 = 0
            }
            ...
            if ( ptpSourceR )                           // ？必须满足
            {
                if ( (this->field_54 & 4) != 0 )
                {
                    ptpSourceL_cchLeft = 1 - CTreePos::GetCp(this->_ptpSourceL);// 1-2=-1,_ptpSourceL()
                    ptpSourceR_cchLeft = CTreePos::GetCp(this->_ptpSourceR);// 0x00680005,_ptpSourceR(CTreeDataPos(Pointer,04b152f0))
                    ptpSourceR = this->_ptpSourceR;
                    fNotText = (ptpSourceR->_cElemLeftAndFlags & 4) == 0;
                    ptpSourceR_to_ptpSourceL_cch1 = ptpSourceL_cchLeft + ptpSourceR_cchLeft;//CTreePos,Cp
                    if ( !fNotText )
                    {
                        TextLength = CTreeDataPos::GetTextLength(ptpSourceR);
                        ptpSourceR_to_ptpSourceL_cch1 = TextLength + ptpSourceR_to_ptpSourceL_cch1 - 1;
                    }
                }
            }
            ...
        }
        ...
        // 去除边界上带有cling的指针。这样做是为了让_ptpSourceL/R可以在非指针位置上重新定位。我们这样做是为了让元素能够在退出树通知中进行选择。
        while ( 1 )
        {
            ptpSourceL = this->_ptpSourceL;             // _ptpSourceL()
            // Pointer=0x8,_ptpSourceL->IsPointer()
            if ( (ptpSourceL->_cElemLeftAndFlags & 8) == 0 || ptpSourceL == this->_ptpSourceR )// ？必须满足,CTreePos
                break;  // _ptpSourceL(),退出循环
            // _ptpSourceL->NextTreePos()
            ptpSourceL_Right = ptpSourceL->_pRight;
            if ( (ptpSourceL->dptp.p._dwPointerAndGravityAndCling & 2) != 0 )// Cling = 0x2
                Tree::TreeWriter::Remove(ptpSourceL, &this->_pMarkupSource->_tpRoot, &this->_pMarkupSource->_ptpFirst);
            this->_ptpSourceL = ptpSourceL_Right;
        }
        while ( 1 )
        {