goal. In short, we ﬁrst demonstrate the need for code per-
sistence by building code reuse payloads from shared library
code that can be unloaded and reloaded by the adversary on
demand through scripting or creating a new process. We also
explore the need for code singularity by demonstrating that
958958
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
an adversary can load similar copies of JIT-compiled code
that contains ﬁxed usable gadgets. Lastly, we detail a more
concerning attack that entails implicit reading of code, thus
avoiding code destruction altogether. This attack turned out to
be more powerful than we ﬁrst envisioned, and motivates the
need for a stronger dis-association property that is not present
in any binary-compatible ﬁne-grained randomization scheme
we are aware of.
A. Code Cloning via JIT Script Engines
The ﬁrst strategy for defeating destructive code reads (which
we refer to as code cloning) targets the weak assumption of
code singularity. That is, the strategy of destroying code after it
is read only provides a beneﬁt if multiple copies of the target
code can not co-exist in memory. This assumption holds in
most cases (e.g., program code sections are unique, only one
copy of shared libraries are loaded in a process), but when it
does not, attackers can disclose and destroy one copy of the
code while using the second copy of the code to execute their
just-in-time payload.
Unfortunately, there exists at least one ubiquitous practice
that breaks the code singularity assumption—just-in-time (JIT)
compilation. Web browsers and document readers provide
JIT compilers for JavaScript (as well as ActionScript and
Java). Worse yet, the JIT-compilation process can be precisely
controlled by the adversary through scripts embedded in web
pages or documents [36, 9]. To this end, we designed and
implemented a JavaScript JIT code cloner that enables an
adversary to create two native code regions from the same
source JavaScript code, then to disclose gadgets from the ﬁrst
code region which are immediately destroyed, and ﬁnally to
execute those same gadgets using a payload that references
the gadgets still available in the second code region.
(cid:26)(cid:35)(cid:37)(cid:46)(cid:1)(cid:41)(cid:21)(cid:37)(cid:46)(cid:29)(cid:46)(cid:10)(cid:46)(cid:5)(cid:8)(cid:46)(cid:29)(cid:46)(cid:9)(cid:46)(cid:34)(cid:40)(cid:33)(cid:12)(cid:35)(cid:36)(cid:29)(cid:25)(cid:38)(cid:8)(cid:46)(cid:29)(cid:3)(cid:3)(cid:2)(cid:46)(cid:44)
(cid:46)(cid:46)(cid:25)(cid:41)(cid:21)(cid:32)(cid:1)(cid:18)(cid:21)(cid:37)(cid:27)(cid:25)(cid:17)(cid:38)(cid:12)(cid:35)(cid:24)(cid:25)(cid:12)(cid:28)(cid:40)(cid:34)(cid:31)(cid:2)(cid:8)
(cid:45)
(cid:20)(cid:26)(cid:26)(cid:38)(cid:25)(cid:39)(cid:6)(cid:4)(cid:46)(cid:20)(cid:26)(cid:26)(cid:38)(cid:25)(cid:39)(cid:7)(cid:46)(cid:10)(cid:46)(cid:19)(cid:21)(cid:36)(cid:17)(cid:29)(cid:39)(cid:18)(cid:35)(cid:23)(cid:21)(cid:39)(cid:29)(cid:35)(cid:34)(cid:38)(cid:1)(cid:2)(cid:8)
(cid:13)(cid:25)(cid:38)(cid:39)(cid:37)(cid:35)(cid:43)(cid:25)(cid:24)(cid:46)(cid:10)(cid:46)(cid:13)(cid:29)(cid:38)(cid:23)(cid:32)(cid:35)(cid:38)(cid:25)(cid:15)(cid:21)(cid:24)(cid:27)(cid:25)(cid:39)(cid:38)(cid:1)(cid:20)(cid:26)(cid:26)(cid:38)(cid:25)(cid:39)(cid:6)(cid:2)(cid:8)
(cid:11)(cid:41)(cid:21)(cid:29)(cid:32)(cid:21)(cid:22)(cid:32)(cid:25)(cid:46)(cid:10)(cid:46)(cid:11)(cid:24)(cid:30)(cid:40)(cid:38)(cid:39)(cid:15)(cid:21)(cid:24)(cid:27)(cid:25)(cid:39)(cid:38)(cid:1)
(cid:46)(cid:46)(cid:13)(cid:25)(cid:38)(cid:39)(cid:37)(cid:35)(cid:43)(cid:25)(cid:24)(cid:4)(cid:46)(cid:20)(cid:26)(cid:26)(cid:38)(cid:25)(cid:39)(cid:7)(cid:2)(cid:8)
(cid:16)(cid:29)(cid:30)(cid:21)(cid:23)(cid:31)(cid:12)(cid:35)(cid:34)(cid:39)(cid:37)(cid:35)(cid:32)(cid:14)(cid:32)(cid:35)(cid:42)(cid:1)(cid:11)(cid:41)(cid:21)(cid:29)(cid:32)(cid:21)(cid:22)(cid:32)(cid:25)(cid:2)(cid:8)
Create
Disclose &
Destroy
Execute
Gadgets
Native JIT 
Code
(Copy 1)
Native JIT 
Code
(Copy 2)
...
Fig. 5. Countering destructive code reads with JavaScript JIT cloning.
The high-level work ﬂow is depicted in Figure 5. The
adversary ﬁrst
triggers compilation of a large segment of
JavaScript code using an eval statement. After the code is
generated, loaded in memory, and protected by destructive
reads, the adversary must identify the location of these JIT-
compiled code regions.
For pedagogical reasons, the sample code shown in Figure 5
was used to create an abundance of JIT-compiled copies to aid
our understanding of how an adversary can initially navigate
to the JIT-compiled regions using a memory disclosure vul-
nerability. In short, we found that in both Internet Explorer
and Firefox, the global data section of a shared library related
to JavaScript functionality contains a pointer (at a ﬁxed offset)
to a heap region that in turn points to the JIT-compiled code
region(s). Thus, an adversary would simply use the memory
disclosure vulnerability to follow a series of data pointers to
eventually arrive at the beginning of each JIT-compiled region.
Once there, the attack continues with a full code disclosure
of one of these regions, which triggers the destruction of the
code that was read. After disclosing enough code, the learned
knowledge of gadgets from the destroyed section is used by
adjusting their address by a ﬁxed offset (the difference in the
JIT-compiled code region base addresses) and executing the
payload in the code region clone. In Section V, we elaborate
on the gadgets that can be generated and discovered via
JIT-cloning, as well as the effects of existing JIT-spraying
mitigations.
B. Code Non-Persistence via Shared Library Reloading
The JIT-cloning attack subverts destructive code reads based
on the observation that program code regions are not always
unique. We now turn our attention to whether the assumption
of code persistence holds in practice. That is, we consider
which techniques one might apply to modify (or restore) code
that has previously been destroyed. Unfortunately, we need not
look far, as during our preliminary explorations we observed
shared libraries being dynamically loaded and unloaded during
normal program operation. Indeed,
the dynamic load and
unload capability of shared libraries provides programs with
several beneﬁts, such as the ability to support third-party plug-
ins and the ability to transiently leverage infrequently used
features, which minimizes the application memory footprint.
The problem, of course, is that if one can load and unload
libraries on demand, destructive code reads are immediately
subverted. To see why, consider an adversary that ﬁrst loads a
library of interest, then discloses and destroys the library code,
triggers the unloading of the library, and ﬁnally triggers the
loading of a fresh copy once again. Practically, however, one
cannot directly load and unload libraries within the context of
an embedded script. Nevertheless, there exist a multitude of
opportunities for indirectly reloading shared libraries.
(cid:7)(cid:15)(cid:25)(cid:31)(cid:15)(cid:28)(cid:34)(cid:5)(cid:34)(cid:7)(cid:27)(cid:19)(cid:15)(cid:29)(cid:19)(cid:14)(cid:19)(cid:16)(cid:10)(cid:12)(cid:13)(cid:16)(cid:22)(cid:19)(cid:17)(cid:29)(cid:1)(cid:2)(cid:4)
(cid:8)(cid:19)(cid:28)(cid:29)(cid:27)(cid:26)(cid:33)(cid:19)(cid:18)(cid:34)(cid:5)(cid:34)
(cid:34)(cid:34)(cid:8)(cid:21)(cid:28)(cid:17)(cid:24)(cid:26)(cid:28)(cid:19)(cid:10)(cid:15)(cid:18)(cid:20)(cid:19)(cid:29)(cid:28)(cid:1)(cid:12)(cid:19)(cid:15)(cid:23)(cid:19)(cid:18)(cid:8)(cid:24)(cid:24)(cid:6)(cid:15)(cid:28)(cid:19)(cid:2)(cid:4)
(cid:7)(cid:15)(cid:25)(cid:31)(cid:15)(cid:28)(cid:34)(cid:5)(cid:34)(cid:25)(cid:30)(cid:24)(cid:24)(cid:4)
(cid:24)(cid:26)(cid:17)(cid:15)(cid:29)(cid:21)(cid:26)(cid:25)(cid:3)(cid:27)(cid:19)(cid:24)(cid:26)(cid:15)(cid:18)(cid:1)(cid:29)(cid:27)(cid:30)(cid:19)(cid:2)(cid:4)
(cid:7)(cid:15)(cid:25)(cid:31)(cid:15)(cid:28)(cid:34)(cid:5)(cid:34)(cid:7)(cid:27)(cid:19)(cid:15)(cid:29)(cid:19)(cid:14)(cid:19)(cid:16)(cid:10)(cid:12)(cid:13)(cid:16)(cid:22)(cid:19)(cid:17)(cid:29)(cid:1)(cid:2)(cid:4)
(cid:11)(cid:21)(cid:22)(cid:15)(cid:17)(cid:23)(cid:7)(cid:26)(cid:25)(cid:29)(cid:27)(cid:26)(cid:24)(cid:9)(cid:24)(cid:26)(cid:32)(cid:1)(cid:8)(cid:19)(cid:28)(cid:29)(cid:27)(cid:26)(cid:33)(cid:19)(cid:18)(cid:2)(cid:4)
Load
Disclose &
Destroy
Unload
Load
Execute
Gadgets
Shared
Library
(Instance 1)
(Instance 2)
Fig. 6. Countering destructive reads with shared library reloading via
embedded JavaScript.
959959
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
Without much effort, we were able to identify an instance
of indirect library reloading by launching a web benchmark
suite in a browser while monitoring all library loading and un-
loading operations. The benchmark tests a number of auxiliary
features, including an analysis of how well the browser renders
a WebGL graphic canvas using JavaScript by dynamically
writing the WebGL object to the rendered HTML. During that
test, we observed that Microsoft Internet Explorer 11 loads the
graphics library d3d10warp.dll to handle rendering, and
then unloads that library when the benchmark proceeds to the
next test (via a page refresh).
We leverage this observation in the attack depicted in
Figure 6. The behavior is not unique to IE, as we found
that Firefox (version 41) transiently loads a number of li-
braries, including urlmon.dll, to handle the download of
a compressed ﬁle. The download action can be automatically
and transparently invoked via a snippet of JavaScript code
embedded in a web page controlled by the adversary. These
libraries are also unloaded when the page is refreshed, and
thus enable one to disclose, destroy, refresh, and then execute
those disclosed gadgets.
Library reloading enables the disclosure of gadgets from
one library at a time, but an even more direct approach that
allows the reloading of all program code at once exists. The
strategy for doing so is explored next.
C. Code Non-Persistence via Process Reloads
Modern applications, such as web browsers, empower the
adversary with a startling level of control over their target
system, even prior to hijacking control-ﬂow. As previously
shown, we can load and unload speciﬁc libraries in the
target process. We can also create new processes on the
target system, for example, by embedding a small snippet
of JavaScript code (e.g.,window.open(url)) in a web page,
which renders the target web page in a new browser tab.
Modern browsers attempt to strongly enforce the same-origin
policy and sandbox potential exploits by launching these tabs
in completely separate processes.2 In countering destructive
reads, one can view these adversary-created tabs as disposable
sources for gadget disclosure.
The high-level work ﬂow of an attack that takes advantage
of multiple processes is presented in Figure 7. First,
the
attacker triggers a new process (Process 3) by creating a
separate browser tab via JavaScript, then discloses gadgets
in all accessible code regions, destroying that code in the
process and relaying the gadget
information on-the-ﬂy to
the original process. This can be achieved either using an
adversary-controlled web server as an intermediary, or locally
by leveraging capabilities of the HTML5 local storage API [1].
the payload is built and executed in the original
process whose code has not been destroyed. The challenge is
in taking care to avoid disclosing and destroying code in the
tabbed process that is necessarily executed in the work ﬂow
Next,
2In practice, some browsers heuristically decide when a tab should be
created as a separate process.
of relaying the disclosed gadget information. However, that
can be easily overcome by recording the requisite code paths
ofﬂine, prior to deploying the exploit, and then simply skipping
disclosing any code bytes in that path during the just-in-time
disclosure phase. As binary compatible ﬁne-grained ASLR
(i.e., in-place randomization) is assumed, we can accurately
blacklist byte ranges to avoid those that remain consistent
across different instances of the same randomized library.
GET Landing Page
JS: open new tab
GET Leak Page
JS: JIT-ROP attack
POST Gadget(s) Leaked
XMLHttpRequest(s) for
Gadgets Leaked
JS: ROP payload &
control-ﬂow exploit
Landing
Tab
(Process 2)
New Tab
(Process 3)
Gadgets
Destroyed
Gadgets
Available
Web Browser Broker
(Process 1)
Gadget 
Disclosure 
Page
(Server 2)
Landing
Page
(Server 1)
Gadget
Store
Adversary Controlled Servers
Fig. 7. Countering destructive code reads with process reloading using
multiple browser tabs.
We later show in Section V that even when avoiding the
disclosure of code in the work ﬂow execution path, one can
identify gadgets of all the requisite types needed to just-in-
time compile a code reuse payload. However, before doing
so, we present a more insidious attack that takes advantage
of speciﬁc limitations of the combination of destructive code
reads with binary-compatible code randomization.
D. Code Association via Implicit Reads
To allow for precise differentiation between code and data
embedded within code segments, execute-only memory us-
ing destructive reads is enforced at a byte-level granularity.
Although this approach effectively prevents the execution of
code that has been previously read, its implications regarding
an attacker’s ability to infer the layout of code that follows
already disclosed bytes requires careful consideration. It is
conceivable that depending on the applied code randomization
strategy, reading only a few bytes of existing code might be
enough for making an informed guess about the instructions
that follow the disclosed code without actually reading them.
This issue is particularly pertinent for binary-only defenses
that rely on speciﬁc, ﬁne-grained code randomization tech-
niques due to the imprecision of code disassembly and static
analysis. In-place code randomization [35], for instance, em-
ploys a set of narrow-scoped code transformations that proba-
bilistically alter the functionality of short instruction sequences
that can be used as gadgets. In what follows, we discuss how
an attacker can infer the particular randomized instance of a
gadget for each of the four code transformations used by in-
place code randomization [35], as well as the recent instruction
960960
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
(cid:72)
(cid:88)
(cid:74)
(cid:82)
(cid:82)
(cid:85)
(cid:51)
(cid:79)
(cid:72)
(cid:88)
(cid:74)
(cid:82)
(cid:79)
(cid:76)
(cid:83)
(cid:40)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:69)(cid:91)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:86)(cid:76)
(cid:80)(cid:82)(cid:89)(cid:3)(cid:3)(cid:72)(cid:69)(cid:91)(cid:15)(cid:72)(cid:70)(cid:91)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:71)(cid:76)
(cid:80)(cid:82)(cid:89)(cid:3)(cid:3)(cid:72)(cid:86)(cid:76)(cid:15)(cid:72)(cid:71)(cid:91)
(cid:17)(cid:17)(cid:17)
(cid:83)(cid:82)(cid:83)(cid:3)(cid:3)(cid:72)(cid:71)(cid:76)
(cid:83)(cid:82)(cid:83)(cid:3)(cid:3)(cid:72)(cid:86)(cid:76)
(cid:83)(cid:82)(cid:83)(cid:3)(cid:3)(cid:72)(cid:69)(cid:91)
(cid:85)(cid:72)(cid:87)
(cid:50)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:68)(cid:79)
(cid:39)(cid:76)(cid:86)(cid:70)(cid:79)(cid:82)(cid:86)(cid:88)(cid:85)(cid:72)
(cid:44)(cid:81)(cid:73)(cid:72)(cid:85)(cid:72)(cid:81)(cid:70)(cid:72)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:71)(cid:76)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:69)(cid:91)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:86)(cid:76)