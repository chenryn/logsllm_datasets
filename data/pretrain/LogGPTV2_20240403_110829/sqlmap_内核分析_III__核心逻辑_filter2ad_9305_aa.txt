# sqlmap 内核分析 III: 核心逻辑
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者： [@v1ll4n](https://www.zhihu.com/people/af8bd4cc442c1349ed0f46baff19e3fd)
安全研发工程师，现就职于长亭科技，喜欢喵喵
本文的内容可能是大家最期待的部分，但是可能并不推荐大家直接阅读本篇文章，因为太多原理性和整体逻辑上的东西散见前两篇文章，直接阅读本文可能会有一些难以预料的困难。：）
## 0x00 前言
上一篇文章，我们介绍了页面相似度算法以及 sqlmap 对于页面相似的判定规则，同样也跟入了 sqlmap
的一些预处理核心函数。在接下来的部分中，我们会直接开始 sqlmap 的核心检测逻辑的分析，主要涉及到以下方面：
  * heuristicCheckSqlInjection 启发式 SQL 注入检测（包括简单的 XSS FI 判断）
  * checkSqlInjection SQL 注入检测
## 0x01 heuristicCheckSqlInjection
这个函数位于 controller.py 的 start() 函数中，同时我们在整体逻辑中也明确指明了这一个步骤：
这标红的两个步骤其实就是本篇文章主要需要分析的两个部分，涉及到 sqlmap 检测 sql 注入漏洞的核心逻辑。其中
heuristicCheckSqlInjection 是我们本节需要分析的问题。这个函数的执行位置如下：
再上图代码中，2标号为其位置。
### 启发式 sql 注入检测整体逻辑
通过分析其源代码，笔者先行整理出他的逻辑：
根据我们整理出的启发式检测流程图，我们做如下补充说明。
  1. 进行启发式 sql 注入检测的前提条件是没有开启 nullConnection 并且页面并不是 heavilyDynamic。关于这两个属性，我们在第二篇文章中都有相关介绍，对于 nullConnection 指的是一种不需要知道他的具体内容就可以知道整个内容大小的请求方法；heavilyDynamic 指的是，在不改变任何参数的情况下，请求两次页面，两次页面的相似度低于 0.98。
  2. 在实际的代码中，决定注入的结果报告的，主要在于两个标识位，分别为：casting 与 result。笔者在下方做代码批注和说明：
  1. casting 这个标识位主要取决于两种情况：第一种在第一个请求就发现存在了特定的类型检查的迹象；第二种是在请求小数情况的时候，发现小数被强行转换为整数。通常对于这种问题，在不考虑 tamper 的情况下，一般很难检测出或者绕过。
  2. result 这个标识位取决于：如果检测出 DBMS 错误，则会设置这个标识位为 True；如果出现了数据库执行数值运算，也置为 True。
### XSS 与 FI
实际上在启发式 sql 注入检测完毕之后，会执行其他的检测：
  1. 检测 XSS 的方法其实就是检查 “”，是否出现在了结果中。作为扩展，我们可以在此检查是否随机字符串还在页面中，从而判断是否存在 XSS 的迹象。
  2. 检测 FI（文件包含），就是检测结果中是否包含了 include/require 等报错信息，这些信息是通过特定正则表达式来匹配检测的。
## 0x02 checkSqlInjection
这个函数可以说是 sqlmap 中最核心的函数了。在这个函数中，处理了 Payload 的各种细节和测试用例的各种细节。
大致执行步骤分为如下几个大部分：
  1. 根据已知参数类型筛选 boundary
  2. 启发式检测数据库类型 heuristicCheckDbms
  3. payload 预处理（UNION）
  4. 过滤与排除不合适的测试用例
  5. 对筛选出的边界进行遍历与 payload 整合
  6. payload 渲染
  7. 针对四种类型的注入分别进行 response 的响应和处理
  8. 得出结果，返回结果
下图是笔者折叠无关代码之后剩余的最核心的循环和条件分支，我们发现他关于 injectable 的设置完全是通过 if method ==
PAYLOAD.METHOD.[COMPARISON/GREP/TIME/UNION] 这几个条件分支去处理的，同时这些条件显然是 sqlmap
针对不同的注入类型的 Payload 进行自己的结果处理逻辑饿和判断逻辑。
### 数据库类型检测 heuristicCheckDbms
我们在本大节刚开始的时候，就已经说明了第二步是确定数据库的类型，那么数据库类型来源于用户设定或者自动检测，当截止第二步之前还没有办法确定数据库类型的时候，就会自动启动
heuristicCheckDbms 这个函数，利用一些简单的测试来确定数据库类型。
其实这个步骤非常简单，核心原理是利用简单的布尔盲注构造一个 (SELECT “[RANDSTR]” [FROM_DUMMY_TABLE.get(dbms)]
)=”[RANDSTR1]” 和 (SELECT ‘[RANDSTR]’ [FROM_DUMMY_TABLE.get(dbms)]
)='[RANDSTR1]’ 这两个 Payload 的请求判断。其中
    FROM_DUMMY_TABLE = {
        DBMS.ORACLE: " FROM DUAL",
        DBMS.ACCESS: " FROM MSysAccessObjects",
        DBMS.FIREBIRD: " FROM RDB$DATABASE",
        DBMS.MAXDB: " FROM VERSIONS",
        DBMS.DB2: " FROM SYSIBM.SYSDUMMY1",
        DBMS.HSQLDB: " FROM INFORMATION_SCHEMA.SYSTEM_USERS",
        DBMS.INFORMIX: " FROM SYSMASTER:SYSDUAL"
    }
例如，检查是否是 ORACLE 的时候，就会生成
    (SELECT 'abc' FROM DUAL)='abc' 
    (SELECT 'abc' FROM DUAL)='abcd'
这样的两个 Payload，如果确实存在正负关系（具体内容参见后续章节的布尔盲注检测），则表明数据库就是 ORACLE。
当然数据库类型检测并不是必须的，因为 sqlmap 实际工作中，如果没有指定 DBMS 则会按照当前测试 Payload 的对应的数据库类型去设置。
实际上在各种 Payload 的执行过程中，会包含着一些数据库的推断信息()，如果 Payload
成功执行，这些信息可以被顺利推断则数据库类型就可以推断出来。
### 测试数据模型与 Payload 介绍
在实际的代码中，checkSqlInjection
是一个接近七百行的函数。当然其行为也并不是仅仅通过我们上面列出的步骤就可以完全概括的，其中涉及到了很多关于 Payload
定义中字段的操作。显然，直到现在我们都并不是特别了解一个 Payload
中存在着什么样的定义，当然也不会懂得这些操作对于这些字段到底有什么具体的意义。所以我们没有办法在不了解真正 Payload 的时候开始之后的步骤。
因此在本节中，我们会详细介绍关于具体测试 Payload 的数据模型，并且基于这些模型和源码分析 sqlmap 实际的行为，和 sql 注入原理的细节知识。
·
###  通用模型
关于通用模型其实在 sqlmap 中有非常详细的说明，位置在
xml/payloads/boolean_blind.xml中，我们把他们分隔开分别来讲解具体字段对应的代码的行为。
首先我们必须明白一个具体的 testcase 对应一个具体的 xml 元素是什么样子：
关于上面的一个  标签内的元素都是实际上包含的不只是一个 Payload 还包含
    Sub-tag: 
        Title of the test. 测试的名称，这些名称就是我们实际在测试的时候输出的日志中的内容
上图表示一个  中的 title 会被输出作为调试信息。
除非必要的子标签，笔者将会直接把标注写在下面的代码块中，
    Sub-tag: 
        SQL injection family type. 表示注入的类型。
    ​
        Valid values:
            1: Boolean-based blind SQL injection
            2: Error-based queries SQL injection
            3: Inline queries SQL injection
            4: Stacked queries SQL injection
            5: Time-based blind SQL injection
            6: UNION query SQL injection
    ​
    Sub-tag: 
        From which level check for this test. 测试的级别
    ​
        Valid values:
            1: Always (1000 requests)
    ​
    Sub-tag: 
        Likelihood of a payload to damage the data integrity.这个选项表明对目标数据库的损坏程度，risk 最高三级，最高等级代表对数据库可能会有危险的•操作，比如修改一些数据，插入一些数据甚至删除一些数据。
    ​
        Valid values:
            1: Low risk
            2: Medium risk