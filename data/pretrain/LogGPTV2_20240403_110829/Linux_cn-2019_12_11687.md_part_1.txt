---
author: David Both
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 5972
date: '2019-12-17 17:36:00'
editorchoice: false
excerpt: 学习逻辑操作符和 shell 扩展，本文是三篇 Bash 编程系列的第二篇。
fromurl: https://opensource.com/article/19/10/programming-bash-logical-operators-shell-expansions
id: 11687
islctt: true
largepic: /data/attachment/album/201912/17/173459pxhz0aiicimzd1m2.jpg
permalink: /article-11687-1.html
pic: /data/attachment/album/201912/17/173459pxhz0aiicimzd1m2.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11552
- displayorder: 0
  raid: 11714
reviewer: wxy
selector: lujun9972
summary: 学习逻辑操作符和 shell 扩展，本文是三篇 Bash 编程系列的第二篇。
tags:
- 脚本
- bash
thumb: false
title: 怎样用 Bash 编程：逻辑操作符和 shell 扩展
titlepic: true
translator: lxbwolf
updated: '2019-12-17 17:36:00'
---
> 
> 学习逻辑操作符和 shell 扩展，本文是三篇 Bash 编程系列的第二篇。
> 
> 
> 
![](/data/attachment/album/201912/17/173459pxhz0aiicimzd1m2.jpg)
Bash 是一种强大的编程语言，完美契合命令行和 shell 脚本。本系列（三篇文章，基于我的 [三集 Linux 自学课程](http://www.both.org/?page_id=1183)）讲解如何在 CLI 使用 Bash 编程。
[第一篇文章](/article-11552-1.html) 讲解了 Bash 的一些简单命令行操作，包括如何使用变量和控制操作符。第二篇文章探讨文件、字符串、数字等类型和各种各样在执行流中提供控制逻辑的的逻辑运算符，还有 Bash 中的各类 shell 扩展。本系列第三篇也是最后一篇文章，将会探索能重复执行操作的 `for` 、`while` 和 `until` 循环。
逻辑操作符是程序中进行判断的根本要素，也是执行不同的语句组合的依据。有时这也被称为流控制。
### 逻辑操作符
Bash 中有大量的用于不同条件表达式的逻辑操作符。最基本的是 `if` 控制结构，它判断一个条件，如果条件为真，就执行一些程序语句。操作符共有三类：文件、数字和非数字操作符。如果条件为真，所有的操作符返回真值（`0`），如果条件为假，返回假值（`1`）。
这些比较操作符的函数语法是，一个操作符加一个或两个参数放在中括号内，后面跟一系列程序语句，如果条件为真，程序语句执行，可能会有另一个程序语句列表，该列表在条件为假时执行：
```
if [ arg1 operator arg2 ] ; then list
或
if [ arg1 operator arg2 ] ; then list ; else list ; fi
```
像例子中那样，在比较表达式中，空格不能省略。中括号的每部分，`[` 和 `]`，是跟 `test` 命令一样的传统的 Bash 符号：
```
if test arg1 operator arg2 ; then list
```
还有一个更新的语法能提供一点点便利，一些系统管理员比较喜欢用。这种格式对于不同版本的 Bash 和一些 shell 如 ksh（Korn shell）兼容性稍差。格式如下：
```
if [[ arg1 operator arg2 ]] ; then list
```
#### 文件操作符
文件操作符是 Bash 中一系列强大的逻辑操作符。图表 1 列出了 20 多种不同的 Bash 处理文件的操作符。在我的脚本中使用频率很高。
| 操作符 | 描述 |
| --- | --- |
| `-a filename` | 如果文件存在，返回真值；文件可以为空也可以有内容，但是只要它存在，就返回真值 |
| `-b filename` | 如果文件存在且是一个块设备，如 `/dev/sda` 或 `/dev/sda1`，则返回真值 |
| `-c filename` | 如果文件存在且是一个字符设备，如 `/dev/TTY1`，则返回真值 |
| `-d filename` | 如果文件存在且是一个目录，返回真值 |
| `-e filename` | 如果文件存在，返回真值；与上面的 `-a` 相同 |
| `-f filename` | 如果文件存在且是一个一般文件，不是目录、设备文件或链接等的其他的文件，则返回 真值 |
| `-g filename` | 如果文件存在且 `SETGID` 标记被设置在其上，返回真值 |
| `-h filename` | 如果文件存在且是一个符号链接，则返回真值 |
| `-k filename` | 如果文件存在且粘滞位已设置，则返回真值 |
| `-p filename` | 如果文件存在且是一个命名的管道（FIFO），返回真值 |
| `-r filename` | 如果文件存在且有可读权限（它的可读位被设置），返回真值 |
| `-s filename` | 如果文件存在且大小大于 0，返回真值；如果一个文件存在但大小为 0，则返回假值 |
| `-t fd` | 如果文件描述符 `fd` 被打开且被关联到一个终端设备上，返回真值 |
| `-u filename` | 如果文件存在且它的 `SETUID` 位被设置，返回真值 |
| `-w filename` | 如果文件存在且有可写权限，返回真值 |
| `-x filename` | 如果文件存在且有可执行权限，返回真值 |
| `-G filename` | 如果文件存在且文件的组 ID 与当前用户相同，返回真值 |
| `-L filename` | 如果文件存在且是一个符号链接，返回真值（同 `-h`） |
| `-N filename` | 如果文件存在且从文件上一次被读取后文件被修改过，返回真值 |
| `-O filename` | 如果文件存在且你是文件的拥有者，返回真值 |
| `-S filename` | 如果文件存在且文件是套接字，返回真值 |
| `file1 -ef file2` | 如果文件 `file1` 和文件 `file2` 指向同一设备的同一 INODE 号，返回真值（即硬链接） |
| `file1 -nt file2` | 如果文件 `file1` 比 `file2` 新（根据修改日期），或 `file1` 存在而 `file2` 不存在，返回真值 |
| `file1 -ot file2` | 如果文件 `file1` 比 `file2` 旧（根据修改日期），或 `file1` 不存在而 `file2` 存在 |
*图表 1：Bash 文件操作符*
以测试一个文件存在与否来举例：
```
[student@studentvm1 testdir]$ File="TestFile1" ; if [ -e $File ] ; then echo "The file $File exists." ; else echo "The file $File does not exist." ; fi
The file TestFile1 does not exist.
[student@studentvm1 testdir]$
```
创建一个用来测试的文件，命名为 `TestFile1`。目前它不需要包含任何数据：
```
[student@studentvm1 testdir]$ touch TestFile1
```
在这个简短的 CLI 程序中，修改 `$File` 变量的值相比于在多个地方修改表示文件名的字符串的值要容易：
```
[student@studentvm1 testdir]$ File="TestFile1" ; if [ -e $File ] ; then echo "The file $File exists." ; else echo "The file $File does not exist." ; fi
The file TestFile1 exists.
[student@studentvm1 testdir]$
```
现在，运行一个测试来判断一个文件是否存在且长度不为 0（表示它包含数据）。假设你想判断三种情况：
1. 文件不存在；
2. 文件存在且为空；
3. 文件存在且包含数据。
因此，你需要一组更复杂的测试代码 — 为了测试所有的情况，使用 `if-elif-else` 结构中的 `elif` 语句：
```
[student@studentvm1 testdir]$ File="TestFile1" ; if [ -s $File ] ; then echo "$File exists and contains data." ; fi
[student@studentvm1 testdir]$
```
在这个情况中，文件存在但不包含任何数据。向文件添加一些数据再运行一次：
```
[student@studentvm1 testdir]$ File="TestFile1" ; echo "This is file $File" > $File ; if [ -s $File ] ; then echo "$File exists and contains data." ; fi
TestFile1 exists and contains data.
[student@studentvm1 testdir]$
```
这组语句能返回正常的结果，但是仅仅是在我们已知三种可能的情况下测试某种确切的条件。添加一段 `else` 语句，这样你就可以更精确地测试。把文件删掉，你就可以完整地测试这段新代码：
```
[student@studentvm1 testdir]$ File="TestFile1" ; rm $File ; if [ -s $File ] ; then echo "$File exists and contains data." ; else echo "$File does not exist or is empty." ; fi
TestFile1 does not exist or is empty.
```
现在创建一个空文件用来测试：
```
[student@studentvm1 testdir]$ File="TestFile1" ; touch $File ; if [ -s $File ] ; then echo "$File exists and contains data." ; else echo "$File does not exist or is empty." ; fi
TestFile1 does not exist or is empty.
```
向文件添加一些内容，然后再测试一次：
```
[student@studentvm1 testdir]$ File="TestFile1" ; echo "This is file $File" > $File ; if [ -s $File ] ; then echo "$File exists and contains data." ; else echo "$File does not exist or is empty." ; fi
TestFile1 exists and contains data.
```
现在加入 `elif` 语句来辨别是文件不存在还是文件为空：
```
[student@studentvm1 testdir]$ File="TestFile1" ; touch $File ; if [ -s $File ] ; then echo "$File exists and contains data." ; elif [ -e $File ] ; then echo "$File exists and is empty." ; else echo "$File does not exist." ; fi
TestFile1 exists and is empty.
[student@studentvm1 testdir]$ File="TestFile1" ; echo "This is $File" > $File ; if [ -s $File ] ; then echo "$File exists and contains data." ; elif [ -e $File ] ; then echo "$File exists and is empty." ; else echo "$File does not exist." ; fi
TestFile1 exists and contains data.
[student@studentvm1 testdir]$
```
现在你有一个可以测试这三种情况的 Bash CLI 程序，但是可能的情况是无限的。
如果你能像保存在文件中的脚本那样组织程序语句，那么即使对于更复杂的命令组合也会很容易看出它们的逻辑结构。图表 2 就是一个示例。 `if-elif-else` 结构中每一部分的程序语句的缩进让逻辑更变得清晰。
```
File="TestFile1"
echo "This is $File" > $File
if [ -s $File ]
   then
   echo "$File exists and contains data."
elif [ -e $File ]
   then
   echo "$File exists and is empty."
else
   echo "$File does not exist."
fi
```
*图表 2: 像在脚本里一样重写书写命令行程序*
对于大多数 CLI 程序来说，让这些复杂的命令变得有逻辑需要写很长的代码。虽然 CLI 可能是用 Linux 或 Bash 内置的命令，但是当 CLI 程序很长或很复杂时，创建一个保存在文件中的脚本将更有效，保存到文件中后，可以随时运行。
#### 字符串比较操作符
字符串比较操作符使我们可以对字符串中的字符按字母顺序进行比较。图表 3 列出了仅有的几个字符串比较操作符。
| 操作符 | 描述 |
| --- | --- |
| `-z string` | 如果字符串的长度为 0 ，返回真值 |
| `-n string` | 如果字符串的长度不为 0 ，返回真值 |
| `string1 == string2` 或 `string1 = string2` | 如果两个字符串相等，返回真值。处于遵从 POSIX 一致性，在测试命令中应使用一个等号 `=`。与命令 `[[` 一起使用时，会进行如上描述的模式匹配（混合命令）。 |
| `string1 != string2` | 两个字符串不相等，返回真值 |
| `string1  string2` | 如果对 `string1` 和 `string2` 按字母顺序进行排序，`string1` 排在 `string2` 后面 |
*图表 3: Bash 字符串逻辑操作符*
首先，检查字符串长度。比较表达式中 `$MyVar` 两边的双引号不能省略（你仍应该在目录 `~/testdir` 下 ）。
```
[student@studentvm1 testdir]$ MyVar="" ; if [ -z "" ] ; then echo "MyVar is zero length." ; else echo "MyVar contains data" ; fi
MyVar is zero length.
[student@studentvm1 testdir]$ MyVar="Random text" ; if [ -z "" ] ; then echo "MyVar is zero length." ; else echo "MyVar contains data" ; fi
MyVar is zero length.
```
你也可以这样做：
```
[student@studentvm1 testdir]$ MyVar="Random text" ; if [ -n "$MyVar" ] ; then echo "MyVar contains data." ; else echo "MyVar is zero length" ; fi
MyVar contains data.
[student@studentvm1 testdir]$ MyVar="" ; if [ -n "$MyVar" ] ; then echo "MyVar contains data." ; else echo "MyVar is zero length" ; fi
MyVar is zero length
```
有时候你需要知道一个字符串确切的长度。这虽然不是比较，但是也与比较相关。不幸的是，计算字符串的长度没有简单的方法。有很多种方法可以计算，但是我认为使用 `expr`（求值表达式）命令是相对最简单的一种。阅读 `expr` 的手册页可以了解更多相关知识。注意表达式中你检测的字符串或变量两边的引号不要省略。
```
[student@studentvm1 testdir]$ MyVar="" ; expr length "$MyVar"
0
[student@studentvm1 testdir]$ MyVar="How long is this?" ; expr length "$MyVar"
17
[student@studentvm1 testdir]$ expr length "We can also find the length of a literal string as well as a variable."
70
```
关于比较操作符，在我们的脚本中使用了大量的检测两个字符串是否相等（例如，两个字符串是否实际上是同一个字符串）的操作。我使用的是非 POSIX 版本的比较表达式：