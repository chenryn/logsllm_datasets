        kp->dummy.pre_handler = NULL;  
        rc = register_kprobe (& kp->dummy);  
        if (rc == 0) {  
          rc = register_kprobe (& kp->u.kp);  
          if (rc != 0)  
            unregister_kprobe (& kp->dummy);  
        }  
        #else  
        rc = register_kprobe (& kp->u.kp);  
        #endif  
      }  
      if (rc == 0) sdp->registered_p = 1;  
    } else if (sdp->registered_p == 1 && relocated_addr == 0) {  
      if (sdp->return_p) {  
        unregister_kretprobe (&kp->u.krp);  
        atomic_add (kp->u.krp.nmissed, & skipped_count);  
        #ifdef STP_TIMING  
        if (kp->u.krp.nmissed)  
          _stp_warn ("Skipped due to missed kretprobe/1 on '%s': %d\n", sdp->probe->pp, kp->u.krp.nmissed);  
        #endif  
        atomic_add (kp->u.krp.kp.nmissed, & skipped_count);  
        #ifdef STP_TIMING  
        if (kp->u.krp.kp.nmissed)  
          _stp_warn ("Skipped due to missed kretprobe/2 on '%s': %lu\n", sdp->probe->pp, kp->u.krp.kp.nmissed);  
        #endif  
      } else {  
        unregister_kprobe (&kp->u.kp);  
        atomic_add (kp->u.kp.nmissed, & skipped_count);  
        #ifdef STP_TIMING  
        if (kp->u.kp.nmissed)  
          _stp_warn ("Skipped due to missed kprobe on '%s': %lu\n", sdp->probe->pp, kp->u.kp.nmissed);  
        #endif  
      }  
      #if defined(__ia64__)  
      unregister_kprobe (&kp->dummy);  
      #endif  
      sdp->registered_p = 0;  
    }  
  }  
}  
static void systemtap_module_exit (void) {  
  int holdon;  
  int i=0, j=0;  
  int cpu;  
  unsigned long hold_start;  
  int hold_index;  
  (void) i;  
  (void) j;  
  if (atomic_read (&session_state) == STAP_SESSION_STARTING)  
    return;  
  if (atomic_read (&session_state) == STAP_SESSION_RUNNING)  
    atomic_set (&session_state, STAP_SESSION_STOPPING);  
  #if defined(STAPCONF_UNREGISTER_KPROBES)  
  j = 0;  
  for (i=0; iregistered_p) continue;  
    if (!sdp->return_p)  
      stap_unreg_kprobes[j++] = &kp->u.kp;  
  }  
  unregister_kprobes((struct kprobe **)stap_unreg_kprobes, j);  
  j = 0;  
  for (i=0; iregistered_p) continue;  
    if (sdp->return_p)  
      stap_unreg_kprobes[j++] = &kp->u.krp;  
  }  
  unregister_kretprobes((struct kretprobe **)stap_unreg_kprobes, j);  
  #ifdef __ia64__  
  j = 0;  
  for (i=0; iregistered_p) continue;  
    stap_unreg_kprobes[j++] = &kp->dummy;  
  }  
  unregister_kprobes((struct kprobe **)stap_unreg_kprobes, j);  
  #endif  
  #endif  
  for (i=0; iregistered_p) continue;  
    if (sdp->return_p) {  
    #if !defined(STAPCONF_UNREGISTER_KPROBES)  
      unregister_kretprobe (&kp->u.krp);  
      #endif  
      atomic_add (kp->u.krp.nmissed, & skipped_count);  
      #ifdef STP_TIMING  
      if (kp->u.krp.nmissed)  
        _stp_warn ("Skipped due to missed kretprobe/1 on '%s': %d\n", sdp->probe->pp, kp->u.krp.nmissed);  
      #endif  
      atomic_add (kp->u.krp.kp.nmissed, & skipped_count);  
      #ifdef STP_TIMING  
      if (kp->u.krp.kp.nmissed)  
        _stp_warn ("Skipped due to missed kretprobe/2 on '%s': %lu\n", sdp->probe->pp, kp->u.krp.kp.nmissed);  
      #endif  
    } else {  
    #if !defined(STAPCONF_UNREGISTER_KPROBES)  
      unregister_kprobe (&kp->u.kp);  
      #endif  
      atomic_add (kp->u.kp.nmissed, & skipped_count);  
      #ifdef STP_TIMING  
      if (kp->u.kp.nmissed)  
        _stp_warn ("Skipped due to missed kprobe on '%s': %lu\n", sdp->probe->pp, kp->u.kp.nmissed);  
      #endif  
    }  
    #if !defined(STAPCONF_UNREGISTER_KPROBES) && defined(__ia64__)  
    unregister_kprobe (&kp->dummy);  
    #endif  
    sdp->registered_p = 0;  
  }  
  #ifdef STAPCONF_SYNCHRONIZE_SCHED  
  synchronize_sched();  
  #endif  
  hold_start = jiffies;  
  hold_index = -1;  
  do {  
    int i;  
    holdon = 0;  
    for_each_possible_cpu(i)  
      if (contexts[i] != NULL && atomic_read (& contexts[i]->busy)) {  
        holdon = 1;  
        if (time_after(jiffies, hold_start + HZ) && (i > hold_index)) {  
          hold_index = i;  
          printk(KERN_ERR "%s context[%d] stuck: %s\n", THIS_MODULE->name, i, contexts[i]->probe_point);  
        }  
      }  
    #ifdef STAP_OVERRIDE_STUCK_CONTEXT  
    if (time_after(jiffies, hold_start + HZ*10)) {   
      printk(KERN_ERR "%s overriding stuck context to allow module shutdown.", THIS_MODULE->name);  
      holdon = 0;  
    }  
    #else  
    msleep (250);  
    #endif  
    yield ();  
  } while (holdon);  
  atomic_set (&session_state, STAP_SESSION_STOPPED);  
  #ifdef STAPCONF_SYNCHRONIZE_SCHED  
  synchronize_sched();  
  #endif  
  for_each_possible_cpu(cpu) {  
    if (contexts[cpu] != NULL) {  
      _stp_kfree(contexts[cpu]);  
      contexts[cpu] = NULL;  
    }  
  }  
  #ifdef STAP_NEED_GETTIMEOFDAY  
   _stp_kill_time();  
  #endif  
  preempt_disable();  
  #if defined(STP_TIMING) || defined(STP_ALIBI)  
  _stp_printf("----- probe hit report: \n");  
  for (i = 0; i alibi));  
    if (alibi)  
      _stp_printf ("%s, (%s), hits: %d,%s\n",  
          p->pp, p->location, alibi, p->derivation);  
    #endif  
    #ifdef STP_TIMING  
    if (likely (p->timing)) {  
      struct stat_data *stats = _stp_stat_get (p->timing, 0);  
      if (stats->count) {  
        int64_t avg = _stp_div64 (NULL, stats->sum, stats->count);  
        _stp_printf ("%s, (%s), hits: %lld, cycles: %lldmin/%lldavg/%lldmax,%s\n",  
            p->pp, p->location, (long long) stats->count,  
            (long long) stats->min, (long long) avg, (long long) stats->max,  
            p->derivation);  
      }  
      _stp_stat_del (p->timing);  
    }  
    #endif  
  }  
  _stp_print_flush();  
  #endif  
  if (atomic_read (& skipped_count) || atomic_read (& error_count) || atomic_read (& skipped_count_reentrant)) {  
    _stp_warn ("Number of errors: %d, skipped probes: %d\n", (int) atomic_read (& error_count), (int) atomic_read (& skipped_count));  
    #ifdef STP_TIMING  
    {  
      int ctr;  
      ctr = atomic_read (& skipped_count_lowstack);  
      if (ctr) _stp_warn ("Skipped due to low stack: %d\n", ctr);  
      ctr = atomic_read (& skipped_count_reentrant);  
      if (ctr) _stp_warn ("Skipped due to reentrancy: %d\n", ctr);  
      ctr = atomic_read (& skipped_count_uprobe_reg);  
      if (ctr) _stp_warn ("Skipped due to uprobe register failure: %d\n", ctr);  
      ctr = atomic_read (& skipped_count_uprobe_unreg);  
      if (ctr) _stp_warn ("Skipped due to uprobe unregister failure: %d\n", ctr);  
    }  
    #endif  
    _stp_print_flush();  
  }  
  preempt_enable_no_resched();  
}  
#include "stap-symbols.h"  
MODULE_DESCRIPTION("systemtap-generated probe");  
MODULE_LICENSE("GPL");  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")