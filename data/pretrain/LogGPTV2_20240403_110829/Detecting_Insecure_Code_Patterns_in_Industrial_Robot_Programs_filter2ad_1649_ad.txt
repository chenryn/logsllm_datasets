3
2
1
1
1
1
1
1,878 External move
672 Experimental code
Integration server
634
628
Integration server
537 Remote control
460 External move
453 External move
Integration server
397
Integration server
338
106
Integration server
111 Educational code
76
Integration server
60 Code snippet
No vulnerability found
32
5
6
2
5
1
Palletizer
Integration server
Integration server
Integration server
7,165
1,038
337
199
165 Example code
70 Code snippet
2
2
5
RAPID 2 %late binding instruction%
RAPID 2 %late binding instruction%
RAPID 2 Open, 2 FileSize, 1 OpenDir
51
9
52
52
6
26
26
4
9
5
5
1
1
0
0
0
0
0
0
RAPID 18 MoveC, 12 MoveAbsJ, 21 MoveL
KRL
5 lin, 4 ptp
RAPID 25 MoveL, 16 MoveAbsJ, 5 MoveJ, 6 MoveC
RAPID 25 MoveL, 16 MoveAbsJ, 5 MoveJ, 6 MoveC
RAPID 4 MoveL, 2 MoveAbsJ
RAPID 10 MoveL, 10 MoveAbsJ, 6 MoveC
RAPID 10 MoveL, 10 MoveAbsJ, 6 MoveC
KRL
KRL
KRL
KRL
KRL
2 lin, 1 ptp, 1 lin_rel
2 circ, 5 ptp, 2 lin
2 ptp, 1 lin, 1 ptp_rel, 1 lin_rel
2 ptp, 1 lin, 1 ptp_rel, 1 lin_rel
1 ptp
RAPID 1 MoveJ
KRL
-
RAPID -
RAPID -
RAPID -
-
RAPID -
KRL
Errors
9 False Positives
3 False Negatives
the sensitive sources we consider in our analysis—other programs
cannot contain any vulnerable patterns according to our definition.
Overall, we collected 91 task-program files using at least a source,
divided into 14 RAPID projects (39 files) and 8 KRL projects (52
files), totaling 16, 551 lines of source code excluding comments.
Representativeness. We are aware that it is very hard to find
production code among public resources, because it contains in-
tellectual property, developers are likely bound to non-disclosure
agreements, and so are not allowed to share all of their artifacts
with the community. However, being our work the first step in
this research direction, this dataset is the only publicly-available
resource. In terms of reproducibility, we argue that it is the only
available research dataset to assess the correctness and the perfor-
mance of tools such as ours. Alarmingly, in this humble dataset
we found zero cases of properly implemented input validation: In
other words, if a sensitive primitive was used, it would always be
used insecurely. We believe that this result is useful to make our
point and raise security awareness in the automation and robotics
communities, which we believe would benefit from our findings.
Vulnerable Code Samples. We highlight that our dataset includes
adapter code for ROS-Industrial—the reference open-source middle-
ware for industrial robotics [3]. Although we cannot conclude about
the actual adoption of such adapters, anyone searching online for
sample implementations would unavoidable find these resources.
Interestingly, recent research [26] showed that publicly available,
vulnerable code snippets end up in real-world, popular code bases—
even with modifications, yet still vulnerable. In other words, it is
undeniable that developers use public resources to learn and, un-
fortunately, when lacking the necessary security awareness, they
tend to propagate vulnerable code.
5.2 Detection Capabilities
According to the results of the automated analysis that we per-
formed with our tool, 45.4% and 12.2% of programs (RAPID and
KRL respectively) present sensitive patterns. If we count in only
those programs with sensitive sources, 71.4% of the RAPID pro-
grams and 75.0% of the KRL programs have sensitive patterns that
may lead to vulnerabilities.
Summary of Findings. A summary of our findings is in Table 5.
The table shows the number of patterns identified for each pro-
gram12. By pattern we mean an instance of a variable that “flows”
into a sink and is tainted by data flowing from a sensitive source.
Multiple tainted variables passed as parameters to the same sink are
12We consider only those programs with sensitive sources
9
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
M. Pogliani et al.
counted as different patterns. For example, if a movement command
is issued with both the target position and the velocity parameters
tainted by a sensitive source, we count two patterns.
ABB’s RAPID Programs. Out of the 14 RAPID programs reported
in Table 5, 8 had a flow from the string parameter (Str) of the
SocketReceive function towards the parameters of one of the
robot movement functions e.g. Move; 1 program had a flow from
SocketReceive to the late binding construct; 1 program (the web
server mentioned in Section 3.2) had a flow from SocketReceive
to the filename of multiple file handling functions, among which
Open), leading to a path-traversal vulnerability.
KUKA’s KRL Programs. Out of the 8 KRL programs with sensi-
tive sources, 6 had at least one sensitive pattern that lead to arbitrary
movement control (5 programs from the KUKA.Ethernet KRL ex-
tension and 1 from the KUKA.Ethernet KRL XML package). We did
not find instances of KRL program with different sinks, such as file
handling; late binding is not supported by KRL.
True Negatives. We also manually analyzed the 41 remaining KRL
programs that did not have sensitive sources. Interestingly, 15 and
13 of them use either the RSI and the FRI interface, respectively.
RSI and FRI allow external sources (e.g., sensors) to influence the
movements of the robot. Unlike the KRL-based interfaces, the KRL
program does not explicitly read data from the network and move
the robot according to it; instead, the robot’s controller automat-
ically receives data—via UDP—and moves the robot accordingly.
Hence, there is no explicit (i.e., visible) information flow in the KRL
program: the KRL program just needs to set up the RSI and/or FRI
interface and issue a start command, much like Mitsubishi’s move
external (Mxt) command. Using these interfaces allows a precise
and fine-grained robot control with real-time requirements. Instead,
the RAPID programs without sensitive sources did not implement
any other technique to acquire external input.
5.3 Discussion and Limitations
According to our analysis, unsafe patterns are unfortunately a recur-
ring case in robotic applications, especially for socket-controlled
robot movement—not to mention the KRL programs using real-
time external control interfaces. Our results justify the needs of
more secure development platforms and languages, as well as major
awareness on the security implications of the sensitive patterns we
reported. We hope that our work will contribute in this direction.
The Case of Network Adapters. The majority of the detected
patterns are for network-controlled robot movements. Network
adapters are the most widely found category of publicly-available
task programs as they represent an important component for plat-
form integration. All the network adapters we found were vulnera-
ble: The developers put no constraints on the allowed trajectories to
be commanded, and they implemented no authentication. To exploit
this, a network attacker needs only to send unexpected coordinates,
resulting in the robot arbitrarily following the instructions.
False Positives and False Negatives Our tool reported two
5.3.1
incorrect results, both related to ABB’s RAPID programs and due to
limitations of the current implementation. We manually analyzed
both cases and discuss them in the remainder of this section
Figure 3: Performance of our tool (executed on a laptop
with an Intel i5-6287U processor and 16GB RAM). Bins are
equally sized, obtained with quantile-based quantization.
False Positives due to Context Insensitivity. In one program,
our tool wrongly reported a flow from a network socket to a move-
ment instruction. This false positive is due to the lack of context
sensitivity in the data flow analysis that we implemented. More pre-
cisely, when propagating the taint across ICFG’s edges of different
functions (i.e., across an edge representing a call or a return), the
analyzer fails in “linking” the call edge with the correct return edge;
hence, it computes an over-approximation by propagating the data
flow towards all the return edges of a function. This problem arises
particularly in the case of small functions heavily used throughout
the program (e.g., utility functions such as logging functions).
Future work could overcome this limitation by context-sensitive
dataflow analysis, such as by framing the problem as an inter-
procedural, finite, distributive subset problem and solving it through
state-of-the-art graph reachability algorithms suggested by the code
optimization community [21].
False Negatives due to Indirect Flows. The second error con-
sists of a false negative in the ROS adapter for ABB’s RAPID. This
adapter is organized as two concurrently running tasks (similar to
threads in conventional programming languages) and synchronized
using shared memory and interrupts. A task manages the network
communication, stores the received trajectory into a shared vari-
able, and signals the event by asserting a boolean flag that triggers
an interrupt; the second task handles the interrupt and manages the
robot’s movement. When the interrupt is triggered, the program
reads the new trajectory from the shared variable. Here, the data
flow between the two threads is not reflected in the two distinct
control flow graphs, but by the fact that the two threads run concur-
rently and use the same shared variables; hence, a classic dataflow
analysis cannot handle this case, as the taint is not propagated
through the control flow. We leave this as future work.
5.4 Performance
Figure 3 shows the performance of our analysis tool. Despite our
analyzer is implemented in an interpreted language (Python) and is
10
≤17.75≤29.00≤50.00≤74.00≤125.00≤186.25≤283.88≤1758.00Cyclomaticcomplexity02468101214Averagetime±standarddeviation[s]ParsingCFGGenerationAnalysisDetecting Insecure Code Patterns in Industrial Robot Programs
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
not necessarily optimized for performance, it is able to perform the
analysis of thousands of lines of code in few seconds, proving to be
an clear improvement with respect to performing a manual analysis.
This also shows that this approach can be use to automatically scan
for vulnerable or malicious programs before they are uploaded to
the robot, or to software repositories.
6 Remediation and Future Research
The security issues that we identified and discussed can be miti-
gated. In the long term, for example, potential actions include the
redesign of IRPLs, security-aware runtime environments (e.g., to
support privilege separation or permission systems), and hardened
operating systems for robots. However, these changes are foresee-
able in the long term only. In the short term, we recommend a
program-level mitigation in which tools like that one we proposed
can aid developers in improving their software, and vendors and
system integrators to verify the programs that they deploy.
Input Validation. As for general-purpose programming languages,
an effective way to mitigate taint-style vulnerabilities is proper in-
put validation. For instance, when parsing untrusted data to obtain
motion commands or coordinates, programmers should verify that
the requested values fall within application-specific boundaries, so
to avoid unsafe conditions. When untrusted data is used as filename
to open files, programmers should disallow path separator charac-
ters or implement whitelisting mechanisms. When using user input
to compose the name of a late-bound function to call, programmers
should whitelist the allowed function names (partially hindering
the programming convenience of using late binding). We believe
that, like in general-purpose programming languages, developers
of IRPL programs should adopt these well-known best-practices;
most of the surveyed IRPLs include basic functionalities (e.g., string
manipulation) needed to build input-validation procedures.
Secure Communication. Network communication between ro-
bot programs typically occur between trusted parties. Because of
this, IRPLs do not to support authenticated or encrypted commu-
nication. To the best of our knowledge, we are not aware of IRPL
libraries that provide strong network encryption schemes (like TLS).
Therefore, it’s hard for developers to implement secure communi-
cation protocols, and custom solutions are often failing strategies.
We believe that, in the long term, robot vendors should offer SDKs
backed by OS-level support for authentication and encryption.
Secure External-move Commands. Several of the analyzed pro-
grams leverage external movement functionalities to remotely con-
trol industrial robots. Given the popularity of this use case, vendors
should provide the programmers with high-level external move-
ment functionalities that are authenticated and secure.
Privilege Separation and Permission Systems. Another impor-
tant system-level recommendation is privilege separation, and the
implementation of permission systems in general: The patterns
listed in Table 1 and 3 may lead to security issues primarily because
they require access to low-level, privileged resources. Ideally, like
in mobile development, IRPL programs that access privileged re-
sources must declare so in a “manifest”. This would allow to design
privilege separation or fine-grained permission systems, such that
11
to prompt for resource access at runtime. This is a challenging path,
because each vendor has complex sets of primitives, with various
degrees of “impact” on the underlying resources.
Code Signing. Unwanted or malicious code patterns can be miti-
gated through tools like that one we propose. This should be com-
plemented with code-signing mechanisms, like in mobile software-
distribution ecosystems, which guarantee integrity and authenticity
of the code running on each device, preventing, for example, back-
doored code to run—under the assumption that the attacker who
places the backdoor hasn’t compromised the private key.
7 Related Work
This work relates to (a) the security implications of IRPLs and (b)
IRPL program analysis to infer security properties. Although static
analysis techniques are common to detect vulnerabilities in general-
purpose languages, to the best of our knowledge, we are the first
to extend them to find vulnerabilities and malicious code in IRPLs.
Security of Industrial Domain-specific Languages. The use of
domain-specific languages as an attack vector for industrial con-
trol systems has been actively investigated, especially for PLCs.