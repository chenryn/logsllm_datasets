next ﬁeld is word aligned.
Again, our speciﬁcation is limited by the input that
For example, since we always use the
we observe.
same type of authentication mechanism, the ﬁeld “VER-
IFIER LENGTH” is recognized as a constant 0, and we
do not detect it as a length ﬁeld. The reason is that since
the length is always zero, our length ﬁeld detection algo-
rithm has no loop iterations to work on. Also, the values
in the RPC part of the protocol are all ﬁxed and represent
a NFS message (which is reasonable in this case, but pro-
vides very limited information about the general format of
RPC). Nevertheless, using this grammar, we could parse a
set of additional messages, created from looking up differ-
ent ﬁles, without problems.
In the NFS Getattr and NFS Create test cases, our tool
similarly misses the “VERIFIER LENGTH” length ﬁeld.
In the NFS Write test case, another length ﬁeld is missed
by our system, which is the “total count” ﬁeld. In this case,
the length ﬁeld is redundant because it always holds the
same value as the “data length” ﬁeld. Therefore, the server
does not actually use it in a loop to parse the target ﬁeld
(it uses “data length” instead), and later just veriﬁes that
the two values are equal. Similarly, our parser could suc-
cessfully use the speciﬁcation produced to parse other NFS
write messages, despite this missing ﬁeld.
Server Message Block protocol (SMB). For our exper-
iments with SMB, we selected a current version of the
Samba server (version 3.0.26a). To generate messages, we
used the smbclient program (which is part of the Samba
distribution) to connect to shared folders and then per-
formed some ﬁle operations. Results for three types of
SMB messages are listed in Tables 2 and 3.
The speciﬁcation extracted for the SMB tree connect
andX request messages is shown in Appendix A. This is
the message used by SMB to connect to a share once a ses-
sion has been established. It is quite interesting because it
contains almost all of the types of ﬁelds our tool is capa-
ble of detecting: length, target, and pointer ﬁelds, which
are typically found only in binary protocols, but also de-
limiter and keyword ﬁelds which are typically found in
text-based protocols. Both “0x00” and “0x0000” are de-
tected as delimiters, used for ASCII and Unicode strings,
respectively. The “SERVICE” is an alternative of the two
keywords “IPC” and “?????”, which are the only types of
services we connected to in our tests. It is also interest-
ing to note that several parts of the message are unused,
meaning that the corresponding taint labels never appear as
operands of anything but move instructions. This includes
the “PROCESS ID” and “MULTIPLEX ID” ﬁelds that are
echoed back to the client without using their values.
The main imperfection of the speciﬁcation is that
we did not recognize “BYTE COUNT” as length ﬁeld,
which holds the length of the target ﬁelds “PASSWORD”,
“PATH”, and “SERVICE”. As for the NFS Write test case,
the server does not use this ﬁeld in a loop to parse the
target ﬁeld. Again, it is redundant because the length
of those three ﬁelds can be determined from the “PASS-
WORD LENGTH” ﬁeld, the “0x0000” delimiter, and the
“0x00” delimiter. Tree connect messages can therefore be
parsed using the speciﬁcation produced by our tool.
Results for the SMB Tree test case have the exact same
issue, missing the “BYTE COUNT” ﬁeld. In the SMB Ne-
gotiate test case, the only imperfection is that our tool fails
to detect the sequence of ”dialects” as a repetition. As for
HTTP headers, this is because each dialect node contains
a different keyword, and our repetition detection does not
detect repetitions of non-matching nodes.
6 Related work
Protocol reverse engineering. So far, protocol reverse
engineering has mostly been a tedious and labor-intensive
manual task. Such tasks have often been undertaken to
analyze popular, but proprietary protocols with the goal
to provide free, open source alternatives. For example,
Samba [27] is a project that offers a free re-implementation
of the SMB/CIFS networking protocol (a closed protocol
used by Microsoft for their network ﬁle system). Other re-
verse engineering efforts are targeting popular instant mes-
senger protocols (such as the OSCAR protocol, used by
ICQ and AIM [12]) or ﬁle sharing protocols (such as Fast-
Track [13]).
One of the ﬁrst attempts to perform automated proto-
col analysis was aimed at application session replay.
In
the context of honeypots, researchers require modules that
can correctly respond to connection attempts initiated by
malicious code (e.g., worms) and maintain an application
dialog long enough until the malware sends its payload.
To generate these modules automatically, systems such as
RolePlayer [10] and ScriptGen [16, 17] analyze network
trafﬁc and attempt to generalize the traces so that correct
replies can be generated to new requests. These systems
only focus on the protocol format to the extent necessary
for replay, in particular, on the recognition of ﬁelds that
contain cookie values or IP addresses. In [21], the authors
propose to use static as well as dynamic binary analysis
(but not dynamic taint analysis) and program veriﬁcation
techniques to provide a sound solution to the replay prob-
lem. That is, the system can guarantee to answer correctly
to a request, provided that the analysis terminates. Unfor-
tunately, the scalability is limited, and the system was not
tested on any real-world program.
In addition to techniques for replaying application di-
alogs, systems were proposed that attempt to discover the
complete protocol format. One such system was developed
by the “Protocol Informatics Project” [1]. In their work, the
authors propose to apply bio-informatics techniques (such
as sequencing algorithms) to network trafﬁc. The goal is to
identify protocol structure and ﬁelds with different seman-
tics. A related, but improved technique extends the byte-
wise alignment with recursive clustering and type-based
clustering [9]. While these systems show some success
in extracting protocol formats, the precision of the analy-
sis is often limited and heavily relies on (protocol-speciﬁc)
heuristics. Because of the lack of information present in
network traces, messages of the same type are sometimes
considered as being different, and data artifacts are recog-
nized as protocol keywords.
Independently and concurrently to our work, the authors
of Polyglot [4] and AutoFormat [18] propose to extract
protocol information by observing the execution of a pro-
gram while it processes execution traces to detect the ﬁelds
which compose a message. Polyglot can, like our sys-
tem, infer some ﬁeld semantics, such as detecting keyword
ﬁelds and “direction” ﬁelds (which can be either length or
pointer ﬁelds). AutoFormat, on the other hand, leverages
execution contexts (i.e., call stack information) to infer hi-
erarchical relationships between ﬁelds, but it does not ex-
tract any ﬁeld semantics. Both of these systems analyze
only single messages and split them into ﬁelds; we go a
step further and consider multiple messages of the same
type and automatically produce a grammar which can be
used to parse other messages of that type. Analyzing mul-
tiple messages allows us to extract additional semantics
such as identifying alternative and optional ﬁelds, and sets
of keywords. Finally, we employ static binary analysis to
improve the quality of length ﬁeld and keyword ﬁeld de-
tection.
Dynamic taint analysis. The idea of dynamically moni-
toring the execution of a program, and tracking the ways in
which it processes and propagates information using taint
analysis, has been applied to a number of security prob-
lems. For example, in [5], the authors use taint informa-
tion to track the lifetime of data. The goal is to determine
the use of sensitive information by the operating system
and large applications. Other researchers used taint anal-
ysis to monitor program execution for the use of tainted
data as arguments to control ﬂow instructions or systems
calls [7, 8, 22, 26]. The aim of these systems is to iden-
tify memory corruption exploits at run-time, and, in some
cases, to create signatures for detected attacks. Finally,
taint analysis has also been used to detect malicious soft-
ware based on their characteristic information ﬂow behav-
ior. In [11], spyware is detected by ﬁnding programs that
leak sensitive user information, while in [31], a system is
presented that can identify a number of malware classes by
observing suspicious information access and propagation
patterns.
7 Conclusion
Protocol reverse engineering is the process of extract-
ing application-level protocol speciﬁcations. With respect
to security, having a detailed knowledge of protocol speci-
ﬁcations is important for a number of tasks (e.g., intrusion
detection, protocol fuzzing, service discovery). Unfortu-
nately, current approaches of determining a speciﬁcation
typically involve a signiﬁcant amount of manual analysis
or yield results with limited accuracy. To address these
problems, we introduced a novel approach to automatic
protocol reverse engineering. This approach works by dy-
namically monitoring the execution of an application and
analyzing how protocol messages are processed. To this
end, we ﬁrst extract information about the ﬁelds of indi-
vidual messages and then derive more general speciﬁca-
tions by aggregating the information collected for multiple
messages. Our experiments with real-world protocols and
server applications demonstrate that we are able to extract
the format speciﬁcation for different types of messages.
Using these speciﬁcations, we then automatically gener-
ate appropriate parser code. We believe that the techniques
that we introduce in this paper will be useful for security
practitioners and researchers who need to deal with closed,
proprietary protocols.
Acknowledgments
This work has been supported by the Austrian Science
Foundation (FWF) and by Secure Business Austria (SBA)
under grants P-18764, P-18157, and P-18368. Paolo Mi-
lani’s work was funded by Telecom Italia S.p.A. under a
Ph.D. program.
References
[1] M. Beddoe. The Protocol Informatics Project. In Toorcon,
2004.
[2] N. Borisov, D. Brumley, H. J. Wang, J. Dunagan, P. Joshi,
and C. Guo. A generic application-level protocol analyzer
and its language. In 14h Symposium on Network and Dis-
tributed System Security (NDSS), 2007.
[3] D. Brumley, J. Caballero, Z. Liang, J. Newsome, and
D. Song. Towards Automatic Discovery of Deviations in
Binary Implementations with Applications to Error Detec-
tion and Fingerprint Generation. In Usenix Security Sym-
posium, 2007.
[4] J. Caballero and D. Song. Polyglot: Automatic Extraction
of Protocol Format using Dynamic Binary Analysis.
In
ACM Conference on Computer and Communications Se-
curity (CCS), 2007.
[5] J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and
M. Rosenblum. Understanding Data Lifetime via Whole
System Simulation. In Usenix Security Symposium, 2004.
[6] C. Cifuentes and M. V. Emmerik. Recovery of Jump Ta-
ble Case Statements from Binary Code. Technical Report
Technical Report 444, The University of Queensland, 1998.
[7] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou,
L. Zhang, and P. Barham. Vigilante: End-to-End Contain-
ment of Internet Worms. In 20th ACM Symposium on Op-
erating Systems Principles (SOSP), 2005.
[8] J. Crandall and F. Chong. Minos: Control Data Attack Pre-
In 37th Interna-
vention Orthogonal to Memory Model.
tional Symposium on Microarchitecture (MICRO), 2004.
[9] W. Cui, J. Kannan, and H. Wang. Discoverer: Automatic
In
Protocol Reverse Engineering from Network Traces.
16th Usenix Security Symposium, 2007.
[10] W. Cui, V. Paxson, N. Weaver, and R. Katz. Protocol-
Independent Adaptive Replay of Application Dialog.
In
13th Symposium on Network and Distributed System Secu-
rity (NDSS), 2006.
[11] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dy-
namic Spyware Analysis. In Usenix Annual Technical Con-
ference, 2007.
[12] A. Fritzler. UnOfﬁcial AIM/OSCAR Protocol Speciﬁca-
tion. http://www.oilcan.org/oscar/, 2007.
[13] Open Source FastTrack P2P Protocol.
gift-fasttrack.berlios.de/, 2007.
http://
[14] P. Haffner, S. Sen, O. Spatscheck, and D. Wang. ACAS:
In
Automated Construction of Application Signatures.
ACM Workshop on Mining Network Data, 2005.
[15] C. Kruegel, F. Valeur, W. Robertson, and G. Vigna. Static
Analysis of Obfuscated Binaries. In Usenix Security Sym-
posium, 2004.
[16] C. Leita, M. Dacier, and F. Massicotte. Automatic Handling
of Protocol Dependencies and Reaction to 0-Day Attacks
with ScriptGen-based Honeypots. In Symposium on Recent
Advances in Intrusion Detection (RAID), 2006.
[17] C. Leita, K. Mermoud, and M. Dacier. ScriptGen: An Au-
In 21st An-
tomated Script Generation Tool for Honeyd.
nual Computer Security Applications Conference (ACSAC),
2005.
[18] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic Proto-
col Format Reverse Engineering through Conectect-Aware
Monitored Execution. In 15th Symposium on Network and
Distributed System Security (NDSS), 2008.
[19] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and
G. Voelker. Unexpected Means of Protocol Inference. In
Internet Measurement Conference (IMC), 2006.
[20] S. Needleman and C. Wunsch. A General Method Ap-
plicable to the Search for Similarities in the Amino Acid
Sequence of Two Proteins. Journal of Molecular Biology,
48(3), 1970.
[21] J. Newsome, D. Brumley, J. Franklin, and D. Song. Re-
player: Automatic Protocol Replay by Binary Analysis. In
13th ACM Conference on Computer and Communications
Security (CCS), 2006.
[22] J. Newsome and D. Song. Dynamic Taint Analysis for Au-
tomatic Detection, Analysis, and Signature Generation of
In Network and Dis-
Exploits on Commodity Software.
tributed System Security Symposium (NDSS), 2005.
[23] P. Oehlert. Violating Assumptions with Fuzzing.
IEEE
Security and Privacy, 3(2), 2005.
[24] R. Pang, V. Paxson, R. Sommer, and L. Peterson. binpac:
a yacc for writing application protocol parsers. In Internet
Measurement Conference (IMC), 2006.
[25] V. Paxson. Bro: A System for Detecting Network Intruders
in Real-Time. In Usenix Security Symposium, 1998.
[26] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an
In ACM
Emulator for Fingerprinting Zero-Day Attacks.
SIGOPS EUROSYS, 2006.
[27] How Samba Was Written. http://samba.org/ftp/
tridge/misc/french_cafe.txt, 2007.
[28] V. Sreedhar, G. Gao, and Y. Lee. Identifying loops using
DJ graphs. ACM Transactions on Programming Languages
and Systems (TOPLAS), 18(6), 1996.
[29] S. Venkataraman, J. Caballero, P. Poosankam, M. Kang,
and D. Song. Fig: Automatic Fingerprint Generation. In
Symposium on Network and Distributed System Security
(NDSS), 2007.
[30] Wireshark: The World’s Most Popular Network Protocol
Analyser. http://www.wireshark.org.
[31] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda.
Panorama: Capturing System-wide Information Flow for
Malware Detection and Analysis. In 14th ACM Conference
on Computer and Communications Security (CCS), 2007.
Appendix A: Message format speciﬁcations
In the following subsections, we present the complete
format speciﬁcations that our system extracted from differ-
ent messages by analyzing four real-world protocols. To
improve the readability of the results, we assigned mean-
ingful names to the symbols based on their protocol se-
mantics. For example, for HTTP, our system would denote
the “GETLINE” non-terminal as “scope ﬁeld delimited by
space”. However, all characters and strings that are en-
closed in quotes (such as the HTTP keyword “GET” or the
delimiter ’/’) are directly extracted by our system. Also,
when using these grammars to generate parsing code, no
modiﬁcations to the output of our system were necessary.
Finally, the grammar contains annotations that show the
semantics of certain ﬁelds (e.g., indication that a ﬁeld is
a ﬁle name, a ﬁeld that is being echoed back to the host,
etc.). These annotations are produced automatically by our
system and are shown in angle brackets.
HTTP
REQUEST = GETLINE
HOSTHDR
[UNUSEDHDR]
[ACCEPTHDR]
(XACCEPTHDR)*
[UNUSEDHDR]
[CONHDR]
CRLF
GETLINE = "GET"
" "
FILENAME
" "
"HTTP/1.1"
CRLF
FILENAME
PATHELEM
SUFFIXELEM
= (PATHELEM)+ [SUFFIXELEM]
= "/" (TEXT)+
= "." (TEXT)+
HOSTHDR