User:  company needs to develop a unified code specification and code review process, please provide a reasonable specification and process.
Assistant: Code specification: 1. Naming specification 1.1 Variable names, constant names, module names, and method names adopt the camel case naming method, with the first letter lowercase and the first letter of pinyin capitalized, such as: firstName, fullTime. 1.2 The class name adopts the Pascal-style naming method, and the first letter of each word is capitalized, such as: ClassName. 1.3 The interface name starts with "I", followed by the name according to the rules, such as: IInterfaceName. 2. Indentation and spaces 2.1 The indentation is 4 spaces. 2.2 The length of each line of code shall not exceed 120 characters. 2.3 There must be a space around the operator. 3. Comment specification 3.1 Comments must be in Chinese and start with "//". 3.2 The variables and methods of the code must be commented so that other developers can understand it. 3.3 For particularly complex or important codes, a design document description must be added above the codes. 3.4 Commented-out code shall not appear in the code. 4. Code specification 4.1 The code logic is clear, the structure is clear, and there are no incomprehensible codes. 4.2 Pinyin comments or mixed English comments are not allowed in the code. 4.3 Global variables are not allowed in the code. If they must be used, they must be limited to the scope of the current page. 4.4 There must be no repeated code in the code, and function or module encapsulation is required. Code review process: 1. Code review begins 1.1 Code review is started by the project supervisor or development manager together with the developers. 1.2 Before starting, reviewers need to prepare a code review checklist and explain the standards in the checklist. 2. Code review 2.1 Review code specifications, clear logic, and precise semantics. 2.2 If a problem is found, it is necessary to mark the code segment where the problem is located in the checklist. 2.3 Developers need to modify the marked problems one by one. 3. Code modification 3.1 Modify the code after fully understanding the problem. 3.2 After the modification is completed, the code needs to be resubmitted to the repository. 3.3 After modification, the developer needs to self-test the modified code and record the self-test results. 4. Completion of code approval 4.1 After the developer submits the code, the project supervisor or development manager re-examines the modified code and marks it as passed in the checklist. After 4.2 is passed, the code is uploaded online, and the code version is completed.