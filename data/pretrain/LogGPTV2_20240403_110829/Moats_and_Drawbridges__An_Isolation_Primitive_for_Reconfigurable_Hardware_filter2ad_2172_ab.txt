DSP
Application
Soft
P Core
µ
C Code
EDK
Soft
µP Core
C Code
gcc
Executable
PPP
M
A
R
B
M
A
R
B
M
A
R
B
M
A
R
B
l
k
c
o
B
M
A
R
S
M
A
R
B
M
A
R
B
M
A
R
B
M
A
R
B
Soft
AES
Core
Hard
µP Core
PPP
DRAM
DRAM
DRAM
DRAM
DRAM
DRAM
DRAM
DRAM
DRAM
DRAM
DRAM
DRAM
FPGA Chip
SDRAM (off-chip)
Figure 1. A Modern FPGA-based Embedded System: Distinct cores with different pedigrees and
varied trust requirements ﬁnd themselves occupying the same silicon. Reconﬁgurable logic, hard
and soft processor cores, blocks of SRAM, and other soft IP cores all share the FPGA and the same
off-chip memory. How can we ensure that the encryption key for one of the processors cannot be
obtained by the other processor by either reading the key from external memory or directly from the
encryption core itself?
reading the key from external memory or directly from the
encryption core itself.
Aviation – Both military and commercial sectors rely
on commercial off-the-shelf (COTS) reconﬁgurable com-
ponents to save time and money. Consider the example
of avionics in military aircraft in which sensitive target-
ing data is processed on the same device as less sensitive
maintenance data. In such military hardware systems, cer-
tain processing components are “cleared” for different lev-
els of data. Since airplane designs must minimize weight, it
is impractical to have a separate device for every function.
Our security primitives can facilitate the design of military
avionics by providing separation of modules that must be
integrated onto a single device.
security guards vs. maintenance technicians). FPGAs are
a natural choice for any streaming application because they
can provide deep regular pipelines of computation, with no
shortage of parallelism. Implementing such a system would
require at least three cores on the FPGA: a video interface
for decoding the video stream, a redaction mechanism for
blurring faces in accordance with a policy, and a network
interface for sending the redacted video stream to the se-
curity guard’s station. Each of these modules would need
buffers of off-chip memory to function, and our methods
could prevent sensitive information from being shared be-
tween modules improperly (e.g. directly between the video
interface and the network). While our techniques could not
verify the correct operation of the redaction core, they could
ensure that only the connections necessary for legal com-
munication between cores are made.
Computer Vision –
In the commercial world, consider a
video surveillance system that has been designed to protect
privacy.
Intelligent video surveillance systems can iden-
tify human behavior that is potentially suspicious, and this
behavior can be brought to the attention of a human op-
erator to make a judgment [40] [21]. IBM’s PeopleVision
project has been developing such a video surveillance sys-
tem [46] that protects the privacy of individuals by blurring
their faces depending on the credentials of the viewer (e.g.,
Now that we have described a high level picture of the
problem we are attempting to address, we present our two
concepts, moats and drawbridges, along with the details of
how each maps to a modern reconﬁgurable device. In par-
ticular, for each approach we specify the threats that it ad-
dresses, the details of the technique and its implementation,
and the overheads involved in its use. Finally, in Section 5,
we show how these low-level protection mechanisms can be
used in the implementation of a higher-level memory pro-
tection primitive.
3 Physical Isolation with Moats
As discussed in Section 2, a strong notion of isolation
is lacking in current reconﬁgurable hardware design ﬂows,
yet one is needed to be certain that cores are not snooping
on or interfering with each other. Before we can precisely
describe the problem that moats attempt to solve, we need
to begin with a brief description of how routing works (and
the function it serves) in a modern FPGA.
On a modern FPGA, the vast majority of the actual sili-
con area is taken up by interconnect (approximately 90%).
The purpose of this interconnect is to make it easy to con-
nect logical elements together so that any circuit can be re-
alized. For example, the output of one NAND gate may be
routed to the input of another, or the address wires from a
soft-processor may be routed to an I/O pad connected to ex-
ternal memory. The routing is completely static: a virtual
wire is created from input to output, but that signal may be
routed to many different places simultaneously (e.g., one
output to many inputs or vice versa).
The rest of the FPGA is a collection of programmable
gates (implemented as small lookup-tables called LUTs),
ﬂip-ﬂops for timing and registers, and I/O blocks (IOB) for
transferring data into and out of the device. A circuit can
be mapped to an FPGA by loading the LUTs and switch-
boxes with a conﬁguration, a method that is analogous to
the way a traditional circuit might be mapped to a set of
logical gates. An FPGA is programmed using a bitstream.
This binary data is loaded into the FPGA to execute a partic-
ular task. The bitstream contains all the information needed
to provide a functional device, such as the conﬁguration in-
terface and the internal clock cycle supported by the device.
Without an isolation primitive, it is very difﬁcult to pre-
vent a connection between two cores from being estab-
lished. Place-and-route software uses performance as an
objective function in its optimization strategy, which can
result in the logical elements and the interconnections of
two cores to be intertwined. Figure 3 makes the scope of
the problem more clear. The left hand of Figure 3 shows
the ﬂoor plan of an FPGA with two small cores (soft pro-
cessors) mapped onto it. The two processors overlap sig-
niﬁcantly in several areas of the chip. Ensuring that the
two never communicate requires that we trace every single
wire to ensure that only the proper connections are made.
Such veriﬁcation of a large and complex design requires
reverse engineering, which is highly impractical because
many companies keep the necessary details about their bit-
streams secret. With moats, fewer proprietary details about
the bitstream are needed to accomplish this veriﬁcation.
The difﬁculty of this problem is made more clear by the
zoom-in on the right of Figure 3. The zoom-in shows a
single switch box, the associated LUTs (to the right of the
switch box), and all the wires that cross through that one
small portion of the chip. A modern FPGA contains on the
order of 20,000 or more such boxes.
Isolation is required in order to protect the conﬁdential-
ity and integrity of a core’s data, and helps to prevent inter-
ference with a core’s functionality. Our technique allows a
very simple static check to verify that, at least at the routing
layer, the cores are sufﬁciently isolated.
3.1 Building Moats
Moats are a novel method of enhancing the security of
FPGA systems via the physical isolation of cores. Our
approach involves surrounding each core with a “moat”
that blocks wiring connectivity from the outside. The core
can only communicate with the outside world via a “draw-
bridge”, which is a precisely deﬁned path to the outside
world.
One straightforward way to accomplish this is to align
the routing tracks used by each of these modules and simply
disable the switches near the moat boundaries. The prob-
lem with this simple approach is that, for the purposes of
improving area and timing efﬁciency, modern FPGA archi-
tectures often support staggered, multiple track segments.
For example, the Virtex platform supports track segments
with lengths 1, 2 and 6, where the length is determined
by measuring the number of Conﬁguration Logic Blocks
(CLBs) the segment crosses. For example, a length 6 seg-
ment will span 6 CLBs, providing a more direct connec-
tion by skipping unnecessary switch boxes along the rout-
ing path. Moreover, many platforms such as Virtex support
“longline” segments, which span the complete row or col-
umn of the CLB array.
Figure 4 illustrates our moat architecture. If we allow the
design tool to make use of segment lengths of one and two,
the moat size must be at least two segments wide in order
to successfully isolate two cores (otherwise signals could
hop the moats because they would not require a switch box
in the moat). To statically check that a moat is sound, the
following properties are sufﬁcient.
1. The target core is completely surrounded by moat of
width at least w
2. The target core does not make any use of routing seg-
ments longer than length w
In fact, both of these properties are easy to inspect on
an FPGA. We can tell if a switch box is part of a moat by
simply checking that it is completely dead (i.e., all the rout-
ing transistors are conﬁgured to be disconnected). We can
check the second property by examining all of the long line
switch boxes to ensure that they are unused. These are easy
Switchbox
Soft
AES
Core
Soft
µP Core
Soft
µP Core
FPGA Fabric
FPGA Chip Floor Plan
Figure 2. A simpliﬁed representation of an FPGA fabric is on the left. Conﬁgurable Logic Blocks
(CLBs) perform logic level computation using Lookup Tables (LUTs) for bit manipulations and ﬂip-
ﬂops for storage. The switch boxes and routing channels provide connections between the CLBs.
SRAM conﬁguration bits are used throughout the FPGA (e.g., to program the logical function of the
LUTs and connect a segment in one routing channel to a segment in an adjacent routing channel).
The FPGA ﬂoor plan on the right shows the layout of three cores – notice how they are intertwined.
to ﬁnd because they are tied to the physical FPGA design
and are not a function of the speciﬁc core on the FPGA.
3.2 A Performance/Area Trade-oﬀ
On an FPGA, the delay of a connection depends on the
number of switch boxes it must pass through rather than the
total length. Although large moats consume a great deal of
chip area (because they reserve switch boxes without mak-
ing use of them to perform an operation), they allow the
design tools to make use of longer segments, which helps
with the area and performance of each individual core. On
the other hand, small moats require less chip area (for the
moat itself), but having to use small segments negatively
affects the area and performance of the cores.
A set of experiments is needed to understand the trade-
offs between the size of the moats, the number of cores that
can be protected using moats, and the performance and area
implications for moat protection.
3.3 The Eﬀect of Constrained Routing
We begin by quantifying the effect of constraining the
tools to generate only conﬁgurations that do not use any
routing segments longer than length w. The width of the
moat could be any size, but the optimal sizes are dictated by
the length of the routing segments. As mentioned before,
FPGAs utilize routing segments of different sizes, most
commonly 1, 2, 6 and long lines.
If we could eliminate
the long lines, then we would require a size 6 moat for pro-
tecting a core. By eliminating long lines and hex lines, we
only need a moat of size 2, and so on.
In order to study the impact of eliminating certain long
length segments on routing quality, we compare the routing
quality of the MCNC benchmarks [32] on different segment
conﬁgurations. We use the Versatile Placement and Rout-
ing (VPR) toolkit developed by the University of Toronto
for such experiments. VPR provides mechanisms for exam-
ining trade-offs between different FPGA architectures and
is popular within the research community [3]. Its capabili-
ties to deﬁne detailed FPGA routing resources include sup-
port for multiple segment routing tracks and the ability for
the user to deﬁne the distribution of the different segment
lengths. It also includes a realistic cost model which pro-
vides a basis for the measurement of the quality of the rout-
ing result.
The effect of the routing constraints on performance and
area can vary across different cores. Therefore, we route the
20 biggest applications from the MCNC benchmark set [32]
(the de facto standard for such experiments) using four dif-
ferent conﬁgurations. The baseline conﬁguration supports
segments with length 1, 2, 6 and longlines. The distribu-
tion of these segments on the routing tracks are 8%, 20%,
60% and 12% respectively, which is similar to the Xilinx
Virtex II platform. The other three conﬁgurations are de-
rived from the baseline conﬁgurations by eliminating the
segments with longer lengths. In other words, conﬁguration
1-2-6 will have no longlines, conﬁguration 1-2 will support
segments of length 1 and 2, and conﬁguration 1 will only
support segments of length 1.
After performing placement and routing, we measure the
Core A
Core B
one set of logic blocks and associated routing
small FPGA design with 2 cores
Core A and B significantly overlapping
long interconnects
switchbox
Figure 3. A simple two-core system mapped onto a small FPGA. The zoom-in to the right shows
the wiring complexity at each and every switch-box on the chip. To statically analyze a large FPGA
with 10s of cores and millions of logical gates, we need to restrict the degrees of freedom. Static
veriﬁcation of a large, complex design involving intertwined cores requires reverse engineering,
which is highly impractical because many companies keep the necessary details about their bit-
streams a closely guarded trade secret.
quality of the routing results by collecting the area and the
timing performance based on the critical path of the mapped
application. To be fair, all the routing tracks are conﬁg-
ured using the same tri-state buffered switches with Wilton
connection patterns [52] within the switch box. A Wilton
switch box provides a good trade-off between routability
and area, and is commonly used in FPGA routing architec-