 _[I still consider this somewhat incomplete, and I feel the suggestions for
'Declined' (hardest one) are not varied enough, but I felt it was valuable
enough to post. I also subtly changed my mind on some of these during the
weeks since this was written, but within the time constraints I feel this is
the best I could do]_
I've made my best to come up with alternative terms for the current labels.
For inspiration I used the Roslyn, F#, Go and Rust issue trackers, and some
originals of my own. The toughest one (by far) was _Declined_ \- It was so
difficult I had to resort to opening a question on the 'English language and
usage' stack exchange.
## Examples of current best alternative label sets through the various stages
of an issue
**Positive outcome :-)**
  1. _Feature Suggestion_ , _Needs More Info_
  2. _Feature Suggestion_ , _Needs Specification_
  3. _Feature Suggestion_ , _Under Consideration_
  4. _Feature Suggestion_ , _Planned_
  5. _Feature Suggestion_ , _In Development_
  6. _Feature Suggestion_ , _Implemented_
**Negative outcome :-(**
  1. _Feature Suggestion_ , _Needs More Info_
  2. _Feature Suggestion_ , _Needs Specification_
  3. _Feature Suggestion_ , _Under Consideration_
  4. _Feature Suggestion_ , _No Foreseeable Plans_ , _Not Enough Value_
**Positive outcome :-)**
  1. _Enhancement Suggestion_ , _Needs More Info_
  2. _Enhancement Suggestion_ , _Under Consideration_
  3. _Enhancement Suggestion_ , _Accepting Community Contributions_
  4. _Enhancement Suggestion_ , _Implemented_
**Negative outcome :-(**
  1. _Feature Request_
  2. _Feature Request_ , _Outside Design Goals_ , _Auxiliary Tooling Candidate_
**Positive outcome :-)**
  1. _Bug Report_
  2. _Bug Report_ , _Confirmed_
  3. _Bug Report_ , _Confirmed_ , _Fix Planned_
  4. _Bug Report_ , _Confirmed_ , _Fixed_
**Negative outcome :-(**
  1. _Bug Report_
  2. _Bug Report_ , _Needs Further Investigation_
  3. _Bug Report_ , _External: Edge_
**Negative outcome :-(**
  1. _Enhancement Suggestion_
  2. _Enhancement Suggestion_ , _Needs More Detail_
  3. _Enhancement Suggestion_ , _No Foreseeable Plans_ , _Taken As Information_
**Neutral outcome :-|**
  1. _Feature Suggestion_
  2. _Feature Suggestion_ , _Needs Specification_
  3. _Feature Suggestion_ , _Subsumed_ , _Taken As Information_
## Initial stage
  * _Suggestion_ : 
    * Intended meaning: "Any suggestion"
    * Problem: too broad, sometimes covers enhancements as well (which may also be seen as 'bugs' sometimes by the issuer), doesn't separate between "requests", "suggestions", and "specifications".
    * Suggestions: Split to possibly (or include as a secondary label) 
      * _Feature Request_
      * _Feature Suggestion_
      * _Feature Specification_
      * _Implementation Proposal_
      * _Enhancement Request_
      * _Enhancement Suggestion_
  * _Bug_ : 
    * Intended meaning: "Confirmed Bug"
    * Problem: No way to label an unconfirmed bug.
    * Suggestions: 
      * _Bug Report_ , followed by
      * _Bug Report_ and _Confirmed_
  * _Needs More Info_ : 
    * Intended meaning: "The team needs more information about this suggestion or bug in order to understand what's going on. Generally, Suggestions will start out as Needs More Info, graduate to Needs Proposal, then finally go to In Discussion"
    * Problem: doesn't separate "more info" from "further investigation".
    * Suggestions: split to 
      * _Needs More Info_ or _Needs More Details_
      * _Needs Further Investigation_ (for bugs)
      * and possibly _Under Investigation_.
  * _Needs Proposal_ : 
    * Intended meaning: "A suggestion that has a well-understood use case and a plausible outline of a solution, but lacks a formal definition of how exactly the problem will be solved".
    * Problem: may be read as "please write a complete, detailed, formal implementation proposal or else this will not be considered".
    * Suggestions: _Needs Specification_ , _Requires Specification_.
## Review stage
  * _In Discussion_ : 
    * Intended meaning: "The suggestion is ready to be discussed at a Design Meeting or Suggestion Backlog Slog".
    * Actual usage: includes suggestions that are continuously discussed for relatively long periods of time.
    * Problem: could be interpreted as just being just "discussed" or as a "community discussion" or debate about a problem (my initial interpretation).
    * Suggestions: _Under Consideration_ (inspired by the Edge platform status terminology), _Under Review_ , _In Review_ , _Candidate Proposal_ , _Candidate Suggestion_.
  * _Revisit_ : 
    * Intended meaning: "A suggestion or bug that can't be adequately addressed today, but will probably be able to be addressed in the future (e.g. we need to wait for the ECMAScript committee to make up its mind)"
    * Problem: could be interpreted as referring to an old suggestion being "revisited" in the sense of it being "reconsidered' or 're-examined' (my initial interpretation).
    * Suggestions: _For Future Review_ , _For Future Consideration_.
## Outcome stage
  * _Committed_ : 
    * Intended meaning: "Someone from the TypeScript team will fix this bug or implement this feature"
    * Problem: highly ambiguous with Git 'Commit', could be read as "Implemented" (which was my initial interpretation and I still suspect I was right.. :) ).
    * Suggestions: Split to 
      * _Planned_ ( _Approved_ may also fit in some cases), for bugs maybe _Fix Planned_.
      * _In Development_
  * _Fixed_ : 
    * Intended meaning: "Was a planned bug-fix or feature but now implemented"
    * Problem: frequently applied to feature requests or enhancements as well.
    * Suggestions: Split to 
      * _Fixed_ for bugs
      * _Implemented_ for features or enhancements (also, use _Implements #####_ instead of _Fixes #####_ in PRs to make it clear it is not actually a bug).
      * _Addressed_ could cover cases that don't fit either one of them, like correcting a mistake in the specification or documentation.
  * _Accepting PRs_
    * Intended meaning: "We are accepting pull requests to implement this feature or fix this bug."
    * Problem: Is not clear on whether this also include pull requests from Microsoft team members?
    * Problem: not everyone knows what a "PR" is (Public Relations?)..
    * Suggestions: keep as-is or _Accepting Pull Requests_ (if it includes Microsoft members as well) or _Community Contributions Accepted_ (if not).
  * _Declined_ : 
    * Intended meaning: "For reasons explained in the issue, we are not going to accept this suggestion"
    * Actual usage: occasionally applied to ideas that are not really suggestions or specifications, or requests that were not originally presented as formal proposals.
    * Problems: 
      * Excessively highlights the 'act' of proposing, or the personal 'appeal' of the issuing person, rather the interest of the design team in the idea at hand.
      * Could be seen as inappropriate for suggestions that have valid use cases but did not provide a good-enough solution (or not at all) or wide-enough set of applications.
      * Could be unconditionally interpreted as "we think this suggestion is bad or exhibits poor design therefore we reject it".
      * Too 'final' and 'verdict-like'. Doesn't really leave enough room for future reconsideration.
      * Doesn't feel very 'friendly' and may create a somewhat harsh atmosphere.
    * Suggestions (this was the toughest one by far): Split to: 
      * _No Foreseeable Plans_ : (or _No Prospective Plans_ ) for sound suggestions or proposals that have reasonable merit but for some reason were not deemed as appropriate or suitable for the language. This may be paired an additional label such as _Not Enough Value_ or _Auxiliary Tooling Candidate_ , described below.
      * _Taken As Information_ : for suggestions that had valuable content but did not provide a solution that was seen as conforming to high enough standards (thanks to the StackExchange member who suggested this).
      * ... Other ideas...
    * Other alternatives: _No Team Interest_ , _No Team Approval_ , or _No Team Consensus_ for borderline ones (see the C# 7 feature work list for some inspiration.
  * _By Design_ : 
    * Intended meaning: "This is an intentional behavior of TypeScript"
    * Actual usage, includes: 
      * Aspects of the language that were purposely designed with the belief they are good practices.
      * Design compromises or are known to be sub-optimal in some way.
      * Aspects that could have been done differently but are not possible or worthwhile to change due to it being a breaking change.
      * Aspects that are simply known to the designers, regardless of it being desirable or not, or being worthwhile to change or not.
    * Suggestions: Split to 
      * _Intended Behavior_ and
      * _Design Limitation_ (other possible terms: _Design Constraint_ , or _Design Compromise_.)
  * _Out of Scope_ : 
    * Intended meaning: "A suggestion that is outside the design parameters of TypeScript, either because it is a poor fit (e.g. make TypeScript look exactly like C#), is outside the constraints of the language (e.g. asm.js compilation), or better belongs to another tool or process (e.g. a built-in Collections library, or a runtime language feature that should start in the ECMAScript committee)".
    * Suggestions: Split to more specific cases: 
      * _Outside Design Goals_
      * _Requires ECMAScript Approval_ ,
      * _Auxiliary Tooling Candidate_ (or _Third-party Tooling Candidate_ )
      * _Externally Scoped_
  * _Duplicate_ : 
    * Intended meaning: "This issue is the same, or has the same root cause, as another issue."
    * Problem: sometimes applied to somewhat different suggestions or enhancements that solve mostly the same problem set, but are simply preferred one over the other.
    * Suggestions: split to: 
      * _Duplicate_ for exact duplicates.
      * _Converged_ , _Subsumed_ or _Assimilated_ for intersecting suggestions or enhancements.
  * _Too Complex_ : 
    * Intended meaning: "Relative to the complexity required to implement or understand it, the suggestion does not provide enough value."
    * Problem: could be read as "too difficult to implement" (my initial interpretation).
    * Suggestions: _Not Enough Value_ , _Not Worthwhile_.
  * _Won't Fix_ : 
    * Intended meaning: "While the behavior described is agreed to be incorrect, the cost (in time, complexity, performance, etc.) is too high to justify taking a fix relative to the cost of simply living with the bug"
    * Problem: may be perceived to demonstrate an un-constructive or un-friendly attitude..
    * Suggestions: _Not Enough Value_ , _No Fix Planned_ , _Not Enough Team Interest_ , _No Foreseeable Plans_.
  * _External_ : 
    * Intended meaning: "Catch-all bucket when an issue reported is not an issue with TypeScript, but rather an external tool, library, website, person, or situation".
    * Suggestions: leave as-is or consider extending the label to include the particular external entity referenced, e.g.: 
      * _External: Internet Explorer_
      * _External: ECMAScript_
      * _External: VS Code_
      * _External: Node_
## Questions and discussions
  * _Question_ : 
    * Intended meaning: "The issue is (intentionally or otherwise) simply asking a question about TypeScript. Answers to Questions, if provided, will generally be to-the-point because we do not have time to be a support community for all TypeScript users; please use Stack Overflow for TypeScript questions."
    * No alternative suggestions.
  * _Discussion_ : 
    * Intended meaning "This issue is a discussion with no defined outcome. The TypeScript team may weigh in on these issues, but they are not regularly reviewed".
    * Problem: a bit vague, can be confused with _In Discussion_.
    * Suggestions: leave as-is and rename _In Discussion_ (see suggestions below) or use _Community Discussion_.
  * _Canonical_ : 
    * Intended meaning: "This issue contains a lengthy explanation of a common question or misconception".
    * Problem: unconventional usage of the term 'canonical' when applied to the issue itself. I'm not sure what the exact intention was but I believe it should mean 'recognized', 'well known', or alternatively 'authoritative'? (here's the dictionary entry for 'canonical').
    * Suggestions: Use a combination of two separate labels: _Common Query_ (or _Common Question_ ) and _Contains Reference Answer_.
## Misc and auxiliary labels
  * _Infrastructure_ : 
    * Intended meaning: "Technical debt associated with the TypeScript project".
    * Problem: could be read as meaning to do with things like the JS runtime, Node runtime, Chakra/V8 engine etc (my initial interpretation).
    * Suggestions: _Technical Task_ , _Technical Enhancement_ , _Implementation Task_ , _Implementation Enhancement_.
  * Effort: Easy/Moderate/Difficult: 
    * Intended meaning: "For issues Accepting PRs, these are an approximation of how difficult we think fixing the bug or implementing the feature will be. As a rough guide, fixing typos or modifying lib.d.s are generally Easy; work that requires understanding the basics of the codebase is Moderate; things marked Difficult will require an understanding that is rare outside the core TypeScript team."
    * Problem: 'Effort' does not naturally refer to a level of difficulty.
    * Suggestions: 
      * Change to _Effort: Low/Moderate/High_ or
      * _Difficulty: Easy/Intermediate/High_
  * High Priority: 
    * Intended meaning: "Issues affecting runtime behavior or high-occurrence crashes"
    * Suggestions: leave as-is or use a granular label for each priority level like: 
      * _Priority: Low/Medium/High_
  * ES6 / ES7 / ES Next: 
    * Intended meaning: "Refers to issues related to features found in these specific ECMAScript versions".
    * Suggestions: consider updating to newer terminology and using more literal labels like: 
      * _Domain: ES2015/ES2016/ES2017_
_Notes: Some of these may be used in a complementary way, together, or
sometimes in addition to the existing label. Some are two or three word long,
which may seem a bit excessive, but that seemed inevitable to successfully
convey clearer semantics._