cation (Viden) [9] that learns the voltage output of the transmitters
as the fingerprints of them. Cho et al. assumed there is a perfect
underlying IDS that detects intrusions in the first place. Once an
intrusion is detected, the suspicious messages are submitted to
CIDS [8]. CIDS tries to identify the source of these messages. If
CIDS fails, these messages are then submitted to the voltage-based
identification model.
Viden is detailed in Algorithm 1. Whenever κ dominant voltage
values are sampled, Viden derives the voltage instance v1...6 from
the latest κR samples (Line 5 through Line 10), representing the
momentary voltage output character. Then, Viden uses the latest
voltage instance to update the voltage profile ϒ (Line 11 through
(13a)
(13b)
(13c)
(13d)
(13e)
(13f)
(13g)
(13h)
(14a)
(14b)
Oacc
Oacc[k]
Oacc[k − 1]
Step k
e[k]
O[k]
S[k − 1]
t[k − 1]
0
t[k]
t
Figure 12: Accumulated clock offsets Oacc. From time 0 to
t[k − 1], ECU A sends messages mA. Its Oacc is plotted in red
solid line. Meanwhile, ECU B sends messages mB, plotted in
blue solid line. From t[k − 1] to t[k], the adversary mounts
a masquerade attack, where B is suspended and A is pro-
grammed to send mB instead. mB’s new Oacc is plotted in red
solid line, which is different from the norm clock behavior
(the blue dash line). The identification error e[k] indicates
how far the accumulated clock offset deviates from CIDS’s
expectation at t[k]. Based on e[k], CIDS decides whether the
intrusion exists or not. Furthermore, the slopes of two red
solid segments being similar, provides the identification in-
formation. In other words, this tells CIDS that the attack
messages are sent by ECU A.
Algorithm 1: Update the voltage profile ϒ at step k
1 function UpdateDispersion(V , Λ, P∗):
)3
2
3 while # of dominant voltage samples collected ≥ κ do
return Λ ← Λ + α(P∗ − #(V  1 do
3
4
5
6
7
8
9
Detect all low-to-high/high-to-low transitions in the line voltage
goto upper/lower level sample points Alg. 3.
i ← the i th sample points after the nth transition
S n
Fi ← mean{S 1
i }
i , . . . , S N
F ← {F1, F2, . . . , F8}
Apply FDA to features and find W
F ← W × F
i , S 2
Algorithm 4: Training, Testing, and Real-time Identifica-
tion
1 Training and testing for each ECU
2 Training
3 for Each ECU i do
F ← goto feature extraction Alg. 2.
4
F ← F ∪ F
5
1 Testing:
2 for Each legitimate ECU i do
3
4
5
Fi ← goto feature extraction Alg. 2.
for Each ECU j do
thr esholds ← Binary search to find EERs for the scores
Scor e ← Mahalanobis distance of Fi from Fj
6
1 Real-time Identification: decision making procedure:
2 F ← extract features for the target CAN frame, Alg. 2
3 MahDis ← Mahalanobis distance of F from the templates generated at
Training
4 if MahDis < threshold then
5
6
7 else
8
Malicious Frame
Valid Frame
Update the template of the origin of the frame
8
6
4
2
0
−2
6
4
2
0
m
u
c
c
a
Ψ
m
u
c
c
a
Ψ
374: 0.215195
375: 0.210913
644: 0.192477
645: 0.191701
646: 0.191699
386: -0.001630
533: -0.024445
534: -0.030792
849: -0.067624
386: 11746.63
849: 826.87
534: 384.48
533: 380.85
375: 159.55
374: 156.90
644: 40.44
646: 38.35
645: 35.15
)
s
/
s
m
(
S
,
w
e
k
S
k
c
o
l
C
600
400
200
0
0
5
10
20
15
Steps
25
30
35
0
5
10
Steps
15
(a) Viden on Nissan
(b) CIDS on Nissan
561: 0.190905
562: 0.186621
849: 0.181845
850: 0.169847
595: 0.044260
817: -0.009161
818: -0.013652
819: -0.017119
561: 359.85
562: 359.32
849: 156.44
850: 154.27
595: 34.94
819: 25.73
818: 25.45
817: 16.05
)
s
m
(
c
c
a
O
,
t
e
s
ff
O
d
e
t
a
l
u
m
u
c
c
A
20
15
10
5
0
0
5
10
20
15
Steps
25
30
35
0
5
10
Steps
15
(c) Viden on Subaru
(d) CIDS on Subaru
Figure 13: Identification results of the data from Nissan Sen-
tra and Subaru Outback. Legends are sorted by profiles for
clustering.
When voltage samples from two ECUs are mixed, the mixed
profile can be approximated as the linear combination of the two
profiles under the assumption that the variants of voltage outputs
from all ECUs are close. Specifically, let us suppose ECU A’s VH
distribution follows N(cid:0)µA, σ 2(cid:1) and B follows N(cid:0)µB, σ 2(cid:1). In the
the mixed samples’ distribution is N(cid:0)r µA + (1 − r)µB, σ 2(cid:1). The
mixed samples, r of them are from A and the rest are from B, then
feature vi (for i = 1..6) of the mixed samples can be calculated as:
vi = [0.68 − µ]/σ
= [0.68(1 + r − r) − (r µA + (1 − r)µB)]/σ
= [r (0.68 − µA) + (1 − r)(0.68 − µB)]/σ
= rv
i + (1 − r)v
B
i .
A
(16)
Similar derivations can be applied to all the other features, in-
cluding v1 and v2 because they are basically the 50th percentiles
for CANH and CANL, respectively.
Viden also uses a machine classifier based on random forest to
defeat against the time-voltage-aware adversary who attempts to
tune its voltage output to mimic the legitimate ECU. Since the weak
adversary we assumed in the Hill-climbing attack does not attempt
to do so, the machine classifier will not be triggered. As a result,
we omit the details of the classifier here.
Viden’s reliance on multiple messages can be seen by the fact
that deriving a voltage instance needs the latest κR voltage samples,
which means the minimal number of messages required is
n =
=
# of voltage samples needed (κ · R)
(% of dominant bit)×(CAN frame max size)
transmission rate
15 · 10 Samples
50%·108 bit/msg
500 Kbps
· 50 Ksamples/sec
× (sample rate)
≈ 28 messages.
(17)
In [9], the authors claimed 2 to 3 messages would be enough to
derive a voltage instance. That is because they did not consider the
R = 10.
B SIMPLE’S ALGORITHMS
See Algorithms 2, 3 and 4 for a better understanding of SIMPLE.
C GROUND TRUTH ESTABLISHMENT
RESULTS
See Fig. 13 for the results.