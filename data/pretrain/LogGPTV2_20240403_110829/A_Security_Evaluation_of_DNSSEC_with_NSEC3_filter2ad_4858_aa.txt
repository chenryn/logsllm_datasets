title:A Security Evaluation of DNSSEC with NSEC3
author:Jason Bau and
John C. Mitchell
A Security Evaluation of DNSSEC with NSEC3
Jason Bau
Stanford University
Stanford, CA, USA
PI:EMAIL
Abstract
Domain Name System Security Extensions (DNSSEC) with
Hashed Authenticated Denial of Existence (NSEC3) is a
protocol slated for adoption by important parts of the
DNS hierarchy, including the root zone, as a solution to
DNS security vulnerabilities such as “cache-poisoning”
attacks. We study the security goals and operation of
DNSSEC/NSEC3 and use Murϕ, a ﬁnite-state enumera-
tion tool, to analyze its security guarantees and shortcom-
ings. By checking DNSSEC/NSEC3 security properties in
the presence of a network attacker, we uncover several
weaknesses in the DNSSEC protocol, including incorrect
temporal dependencies in the DNSSEC signature attesta-
tion chain and NSEC3 options that allow a forged name
to be inserted into a DNSSEC domain. We demonstrate
the exploitability of the NSEC3 vulnerability by a browser
cookie-stealing attack on a realistic laboratory DNSSEC
domain. We offer implementation and conﬁguration advice
which minimize the exploitability of the uncovered vulnera-
bilities. After re-incorporating the advised repairs into the
Murϕ DNSSEC model, we demonstrate the updated proto-
col no longer contains vulnerabilities exploitable within our
threat model.
1
Introduction
Domain Name System Security Extensions, or DNSSEC
[4, 5, 6], with Hashed Authenticated Denial-of-Existence
(NSEC3) [7] is a security standard for DNS that has been in
development since at least 1999 [1]. Brieﬂy, DNSSEC adds
cryptographic signatures to standard DNS records to pro-
vide origin authentication and cryptographic integrity, but
not secrecy or improved availability, for those records. Re-
cently, DNS security has garnered quite a lot of interest,
due to the highly publicized DNS “cache-poisoning” vul-
nerability discovered by Dan Kaminsky [14, 21], and sev-
eral actual exploits of this vulnerabilities on ISP-run DNS
John Mitchell
Stanford University
Stanford, CA, USA
PI:EMAIL
servers that resulted in the redirection of popular websites to
attack sites for customers of these ISPs [17]. Though initial
software patches were issued which made cache-poisoning
attacks much less likely to succeed, DNSSEC is proposed
as a long-term solution to DNS data integrity [16] against
cache-poisoning as well as in-path “man-in-the-middle” at-
tackers. As of August 2009, the operators of the .org, .com,
and .net Top Level Domains (TLDs) as well as the oper-
ators of the DNS root zone have all announced plans to
deploy DNSSEC/NSEC3 on their servers. Given so much
current interest in DNSSEC/NSEC3, we feel it worthwhile
to perform a thorough security analysis of the protocol in
order to understand its characteristic guarantees and short-
comings.
In this paper, we review standard DNS and Kaminsky-
style cache-poisoning attacks. We then examine the se-
curity goals and limitations of DNSSEC/NSEC3, explain
its operations, and consider its effectiveness against cache-
poisoning. We perform ﬁnite-state model checking of the
DNSSEC/NSEC3 protocol against safety invariants derived
from its stated security goals. By identifying the parts
of DNSSEC packet content possessing cryptographic in-
tegrity, we deﬁne the capabilities of network attackers ex-
ecuting a man-in-the-middle attack on DNSSEC packets.
Our model exposes several protocol vulnerabilities, such as
incorrect temporal dependencies in the signature attestation
chain and NSEC3 options that allow forged name insertion
into a DNSSEC domain. To demonstrate the seriousness of
the NSEC3 vulnerability, we implemented an actual attack
on a realistic laboratory DNSSEC domain, exploiting the
vulnerability to steal user browser cookies. We also incor-
porate protocol conﬁguration repairs into the Murϕ model
and verify that there are no longer exploitable vulnerabili-
ties. Finally, we provide recommendations to domain op-
erators, DNSSEC software implementors, and website de-
signers that minimize the exploitability of the discovered
vulnerabilities.
During the process of writing up this work, a presenta-
tion was given by Daniel Bernstein at WOOT ’09 [11] re-
garding DNSSEC vulnerabilities. While Bernstein points
Vulnerability Found
Resource Record remains valid in local resolver
cache after expiration of signatures or key
rollover (revocation) higher in attestation chain
Prevent At
Resolver Software
Glue records may be forged to direct next
recursive query to attack DNS server
RFC
Domain Operator
Resolver Software
NSEC3 opt-out may be used to prepend falsiﬁed
owner name in domain, resulting in vulnerability
to cookie-theft and pharming
Domain Operator
Website Designer
Replay of still valid A+RRSIG after IP-address
move (Bernstein [11])
NSEC3 salt is ineffectual
Inter-operation with standard-DNS child zones
means insecure answer returned by DNSSEC re-
solver
Lack of user-interface indicator of secure vs.
insecure DNSSEC query result exposes end-user
to exploitable insecure DNSSEC query result
Network attacker can arbitrarily manipulate
DNSSEC reply header and status bits
Domain Operator
Domain Operator
Domain Operator
User Software
RFC
Resolver Software
ISP
Network attacker can arbitrarily add / subtract /
mangle RRs in DNSSEC reply
Resolver Software
Prevention Advice
Resolver software sets RR TTL to depend
on all signatures in attestation chain to trust
anchor
Resolver software periodically re-acquires
zone keys to re-validate cached attestation
chains
Propagate changes to RFC
Use all secure delegations
If forgery is suspected, query supposed au-
thoritative zone to obtain signed version of
glue records. (Even if no action is taken, this
vulnerability cannot result in acceptance of
forged RR as ﬁnal query answer)
Do
set NSEC3
not
opt-out
ﬂag
relinquish IP-address until all
Do not use overly coarse cookie “domain”
setting
Do not
A+RRSIGs have expired
Do not use salt.
iterations.
Adoption of DNSSEC; Do not interoperate
DNSSEC with DNS
Increase number of hash
Provide DNS security indicators
Disallow insecure answers from DNSSEC
resolvers once DNSSEC adoption ramps up
Do not trust header bits. Resolver validates
reply only using internal state and signed
RRs.
Cannot trust remote server’s DNSSEC val-
idation. Must request all DNSSEC RRs to
validate at local resolver.
Build attested cache for answering user
queries using only authoritative signed RRs
contained in DNSSEC replies.
Section
4.5.1
5.1.1
5.1.3
5.1.4
5.4
5.1.2
3.1.2
5.3.1
5.3.1
Table 1. Summary of Contributions
out possible vulnerabilities in DNSSEC, our work goes
farther expose the mechanisms behind the vulnerabilities
and thereby provide conﬁguration/operation advice which
eliminate exposure to attacks. For the replay vulnerabil-
ity caused by signature-expiration mismanagement reported
by Bernstein, we provide simple operational guidelines that
prevent possible attacks. His main overlap with our work is
the relatively minor observation of forgeable glue NS and
A records within DNSSEC response packets. While Bern-
stein correctly concludes this forgery raises security con-
cerns, we explain why this forgery does not actually add
any capabilities for the network attacker and thus does not
create additional exploitable attacks. Also, we found and
experimentally conﬁrmed an attack using NSEC3 opt-out,
overlooked by Bernstein, the does not require cryptoanal-
ysis. In fact, our entire work assumes unforgeable crypto-
graphic signatures in order to study attacks possible even
with adequate cryptography, orthogonally complementing
Bernstein’s thoughts on breaking DNSSEC cryptography.
A summary of the contributions of this work, in terms of
vulnerabilities discovered and attack prevention advice, is
listed in Table 1.
The remainder of this paper is organized as follows. Section
2 reviews standard DNS and cache-poisoning attacks. Sec-
tion 3 gives an overview of the security limitations, goals,
and mechanisms of DNSSEC/NSEC3 and demonstrates its
effectiveness against cache-poisoning. Section 4 presents
our ﬁnite-state model of DNSSEC/NSEC3, the network at-
tacker model, and also the inconsistency in DNSSEC at-
testation chain temporal dependencies that we found. Sec-
RFC
1034, 1035
2671
3833
2845
2931
DNS
Relevance
DNS Deﬁnition
EDNS0 longer packets (used by
DNSSEC)
Threat analysis of DNS
TSIG Channel Security
SIG(0) Channel Security
RFC
4033, 4034, 4035
5155
DNSSEC
Relevance
DNSSEC Deﬁnition (NSEC)
NSEC3 Deﬁnition
4641
2535
3757
DNSSEC operational guidlines
DNSSEC initial proposal (AD, CD header
bits)
Key Signing Keys (KSKs) and Zone Sign-
ing Keys (ZSKs)
Table 2. Relevant DNS and DNSSEC RFCs
tion 5 presents the rest of the uncovered vulnerabilities as
well as the repairs which cause model-checking completion
without vulnerabilities. Section 6 details our experiment
conﬁrming the exploitability of the discovered NSEC3 vul-
nerabilities. Finally, Section 7 presents our vulnerability-
minimization advice and concludes.
2 Background: DNS Protocol
2.1 DNS Basics
We ﬁrst review the relevant background information on
DNS. Table 2 lists the relevant RFCs deﬁning DNS. DNS is
a hierarchical distributed database that translates alphanu-
meric domain names, such as www1.example.com, into
(most commonly) IPv4 and IPv6 addresses. DNS lookups
are ubiquitous as they must be performed before any net-
work resource, such as a website or a mail server, is ac-
cessed by its alphanumeric domain name. The domain
names may be thought of as database keys that are used to
lookup a variety of values, called Resource Records (RRs),
associated with the key. (The “key” domain name is called
the RR’s “owner name” in DNS parlance). The most com-
mon RRs are IPv4 addresses (the A RR), IPv6 addresses
(the AAAA RR), mail servers associated with a domain (the
MX RR), and name servers associated with a domain (the
NS RR). The values associated with the MX and NS RRs
are in name and not IP address form. The set of all RRs
of the same type belonging to the same owner name, e.g.
multiple NS or A RRs, is termed a RRSet.
We now use the domain name www.example.com as an ex-
ample to explain DNS terminology as well as its hierarchi-
cal operations. The name www.example.com has a canoni-
cal DNS form of www.example.com.. Each successive la-
bel (“www”, “example”, “com”) in this form corresponds
to a level within the DNS hierarchy (a zone), and the extra
trailing dot (“.”) at the end of the canonical DNS form is in-
serted to signify the presence of the root zone, the top level
of the DNS hierarchy.
A DNS zone is named by zero or more labels, e.g. “ex-
ample.com.” and consists of a set of RRs over which the
zone is authoritative. The concept of authority is best
illustrated by example. For instance, a zone is authori-
tative for all RRs whose owner name is the zone name
– the .com zone is authoritative over the NS and MX
records for .com. A zone server is also authoritative over
RRs where 1) the owner name contain the zone name
as a sufﬁx and 2) no “longer sufﬁx” of the RR’s owner
name is also a authoritative zone. For example, the ex-
ample.com zone is usually authoritative over the A record
for www.example.com., except when www.example.com is
conﬁgured as its own zone, (possibly to support a domain
name such as www1.www.example.com).
In addition to authoritative RRs, a zone may also store
glue records that aid in delegation. Glue records are RRs,
typically A and NS, under the authority of child zones
but copied to parent zones for the purpose of “gluing” to-
gether a delegation. For instance, the .com server may
store both the the NS record for example.com, with a value
of ns.example.com, and the A record for ns.example.com,
so that a single query response may contain all the infor-
mation needed to follow a delegation. However, the .com
zone would not be authoritative over either glue record; the
glue records fall under the authority of the example.com
server.
Figure 1 illustrates a typical DNS lookup process, which
involves two types of DNS resolvers, a stub resolver and
a recursive resolver. Consider the name resolution pro-
cess that occurs after a user types www.example.com into
the browser address bar. This triggers the DNS resolution
process of the stub resolver on the user’s PC, which then
issues a query (“www.example.com A?”) to the local ISP-
run DNS server. This server now becomes a local DNS
recursive resolver: it ﬁrst queries the DNS root server for
the A RR of www.example.com. The root server is not
authoritative for this information, so it issues a delegation
response, pointing the local recursive resolver towards the
Reply
3
5
7
8
RRSets in DNS Reply
“com. NS a.gtld.net.”
“a.gtld.net. A 192.5.6.30”
“example.com. NS a.iana.net.”
“a.iana.net. A 192.0.34.43”
“www.example.com. A 1.2.3.4”
“www.example.com. A 1.2.3.4”
RRSets added by DNSSEC
“com. DS”