### Blaze 和 Bazel

Blaze 的开源版本为 Bazel，更多信息请参见网站上的“Bazel FAQ”（<http://bazel.io/faq.html>）。Blaze 是 Google 内部使用的构建工具，支持多种编程语言，如 C++、Java、Python、Go 和 JavaScript。工程师使用 Blaze 定义构建目标，即构建的输出结果，并指定依赖关系。在实际构建过程中，Blaze 会自动构建目标及其所有依赖。

### Rapid 发布系统

Google 开发了一个自动化的发布系统：Rapid。该系统利用一系列内部技术执行持续构建与部署，确保发布流程是可扩展的、密闭的和可靠的。以下几节将描述 Google 内部的软件生命周期。

#### 软件生命周期

1. **源代码提交**：几乎所有对源代码的修改都需要进行代码评审。
2. **构建**：
   - 构建过程使用指定版本的构建工具（编译器）和依赖库（第三方类库）。
   - 编译过程是自包含的，不依赖于外部服务。
3. **测试**：一个持续测试系统会在每个主分支改动提交后运行单元测试，以快速检测构建错误和测试错误。
4. **发布**：
   - 批准初始的集成请求（基于某个源代码仓库版本的构建请求）。
   - 创建新的发布版本。
   - 指定发布流程中需要执行的具体动作。
   - 批准源代码改动——通过源代码仓库中的配置文件决定。
   - 修改某个项目的构建配置文件。
   - 执行后续的 cherry picking 请求。

#### Cherry Picking

当修复生产环境中的 Bug 时，可能需要重新构建之前的发布版本。此时，可以使用 cherry picking 方法，从主分支中选择特定的改动并应用到发布分支上。这种方法可以明确每个发布版本中包含的所有改动，降低引入无关改动的风险。

#### 配置管理

配置管理是发布工程师与 SRE 紧密合作的一个区域。尽管初看起来配置管理可能很简单，但它其实是不稳定性的一个重要来源。我们的发布流程和系统运维与配置管理紧密结合，以确保系统的稳定性和可靠性。

- **配置文件存储**：配置文件可以存放在 Chubby、Bigtable 或 Google 自己的基于源代码仓库的文件系统中。
- **配置文件更新**：配置文件的修改经过代码评审后应用到正在运行的系统上。这样做的结果是，二进制文件的发布与配置文件的更新是同步的。
- **MPM 包标签**：可以给 MPM 包加标签，标记其在整个发布过程中的位置（如 dev、canary 或 production 等）。

#### 典型的发布流程

1. **创建发布分支**：Rapid 使用集成版本号创建新的发布分支。
2. **编译和测试**：Rapid 利用 Blaze 编译所有的二进制文件并执行所有单元测试。
3. **系统级测试**：构建结果用于运行系统级集成测试和测试部署。
4. **部署**：Rapid 可以直接驱动简单的部署流程，也可以利用 Sisyphus 执行更复杂的部署任务。

#### 部署策略

- **面向用户的服务**：每小时构建一次，在所有测试通过后自动发布更新。
- **敏感基础设施服务**：发布可能扩展到几天内完成，根据实例所在的地理位置交替进行。
- **集群更新**：先更新一个集群，再以指数速度更新其他集群直到全部完成。

### 小结

本章讨论了 Google 的发布工程特有方法，以及发布工程师与 SRE 共同合作的实践。项目负责人在分发和管理配置文件时有多种选择，可以根据需求决定最适合的方法。总之，这些实践不仅适用于 Google 内部，也适用于更广阔的范围。