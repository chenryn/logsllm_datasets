In general, Mach IPC interfaces are more powerful and flexible than the socket interfaces.
When we talk of a message being sent to a task, we mean that the message is sent to a port that the
recipient task has receive rights to. The message is dequeued by a thread within the recipient task.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 6 of 153
Integration of IPC with virtual memory allows messages to be mappedcopy-on-write, if possible and
appropriateinto the receiving task's address space. In theory, a message could be as large as the size of a
task's address space.
Although the Mach kernel itself does not include any explicit support for distributed IPC, communication
can be transparently extended over the network by using external (user-level) tasks called Network
Servers, which simply act as local proxies for remote tasks. A message sent to a remote port will be sent
to a local Network Server, which is responsible for forwarding it to a Network Server on the remote
destination machine. The participant tasks are unaware of these details, hence the transparency.
Although the xnu kernel retains most of the semantics of Mach IPC, network-transparent Mach IPC is not
used on Mac OS X.
9.2.1.2. Port Rights
The following specific port right types are defined on Mac OS X.
 MACH_PORT_RIGHT_SEND A send right to a port implies that the right's holder can send messages to
that port. Send rights are reference counted. If a thread acquires a send right that the task already
holds, the right's reference count is incremented. Similarly, a right's reference count is decremented
when a thread deallocates the right. This mechanism prevents race conditions involving premature
deallocation of send rights, as the task will lose the send right only when the right's reference count
becomes zero. Therefore, several threads in a multithreaded program can use such rights safely.
 MACH_PORT_RIGHT_RECEIVE A receive right to a port implies that the right's holder can dequeue
messages from that port. A port may have any number of senders but only one receiver. Moreover,
if a task has a receive right to a port, it automatically has a send right to it too.
 MACH_PORT_RIGHT_SEND_ONCE A send-once right allows its holder to send only one message, after
which the right is deleted. Send-once rights are used as reply ports, wherein a client can include a
send-once right in a request message, and the server can use that right to send a reply. A send-once
right always results in exactly one message being senteven if it is destroyed, in which case a send-
once notification is generated.
 MACH_PORT_RIGHT_PORT_SET A port set name can be considered as a receive right encompassing
multiple ports. A port set represents a group of ports to which the task has a receive right. In other
words, a port set is a bucket of receive rights. It allows a task to receive a message, the first that is
available, from any of the member ports of a set. The message identifies the specific port it was
received on.
 MACH_PORT_RIGHT_DEAD_NAME A dead name is not really a right; it represents a send or send-once
right that has become invalid because the corresponding port was destroyed. As a send right
transforms into a dead name on invalidation, its reference count also carries over to the dead name.
Attempting to send a message to a dead name results in an error, which allows senders to realize
that the port is destroyed. Dead names prevent the port names they take over from being reused
prematurely.
A port is considered to be destroyed when its receive right is deallocated. Although existing send or send-
once rights will transform into dead names when this happens, existing messages in the ports queue are
destroyed, and any associated out-of-line memory is freed.
The following are some noteworthy aspects of port rights.
Rights are owned at the task level. For example, although the code to create a port executes in a
thread, the associated rights are granted to the thread's task. Thereafter, any other thread within that
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 7 of 153
task can use or manipulate the rights.
The namespace for ports is per-task privatethat is, a given port name is valid only within the IPC
space of a task. This is analogous to per-task virtual address spaces.
If a task holds both the send right and receive right for a port, the rights have the same name.
No two send-once rights held by the task have the same name.
Rights can be transferred through message passing. In particular, the frequent operation of gaining
access to a port involves receiving a message containing a port right.
After a task has sent a message containing one or more port rights, and before the message is
dequeued by the receiver, the rights are held by the kernel. Since a receive right can be held by only
one task at any time, there is the possibility of messages being sent to a port whose receive right is
being transferred. In such a case, the kernel will enqueue the messages until the receiver task
receives the rights and dequeues the messages.
9.2.1.3. Ports as Objects
The Mach IPC facility is a general-purpose object-reference mechanism that uses ports as protected access
points. In semantic terms, the Mach kernel is a server that serves objects on various ports. This kernel
server receives incoming messages, processes them by performing the requested operations, and, if
required, sends a reply. This approach allows a more general and useful implementation of several
operations that have been historically implemented as intraprocess function calls. For example, one Mach
task can allocate a region of virtual memory in another task's address spaceif permittedby sending an
appropriate message to the port representing the target task.
Note that the same model is used for accessing both user-level and kernel services. In either case, a task
accesses the service by having one of its threads send messages to the service provider, which can be
another user task or the kernel.
Besides message passing, little Mach functionality is exposed through Mach traps. Most Mach services
are provided through message-passing interfaces. User programs typically access these services by
sending messages to the appropriate ports.
We saw earlier that ports are used to represent both tasks and threads. When a task creates another task or
a thread, it automatically gets access to the newly created entity's port. Since port ownership is task-level,
all per-thread ports in a task are accessible to all threads within that task. A thread can send messages to
other threads within its tasksay, to suspend or resume their execution. It follows that having access to a
task's port implicitly provides access to all threads within that task. The converse does not hold, however:
Having access to a thread's port does not give access to its containing task's port.
9.2.1.4. Mach Port Allocation
A user program can acquire a port right in several ways, examples of which we will see later in this
chapter. A program creates a new port right through the mach_port_allocate family of routines, of
which mach_port_allocate() is the simplest:
int
mach_port_allocate(ipc_space_t task, // task acquiring the port right
mach_port_right_t right, // type of right to be created
mach_port_name_t *name); // returns name for the new right
We will discuss details of port allocation in Section 9.3.5.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 8 of 153
9.2.2. Mach IPC Messages
Mach IPC messages can be sent and received through the mach_msg family of functions. The fundamental
IPC system call in Mac OS X is a trap called mach_msg_overwrite_trap() [osfmk/ipc/mach_msg.c],
which can be used for sending a message, receiving a message, or both sending and receiving (in that
orderan RPC) in a single call.
// osfmk/ipc/mach_msg.c
mach_msg_return_t
mach_msg_overwrite_trap(
mach_msg_header_t *snd_msg, // message buffer to be sent
mach_msg_option_t option, // bitwise OR of commands and modifiers
mach_msg_size_t send_size, // size of outgoing message buffer
mach_msg_size_t rcv_size, // maximum size of receive buffer (rcv_msg)
mach_port_name_t rcv_name, // port or port set to receive on
mach_msg_timeout_t timeout, // timeout in milliseconds
mach_port_name_t notify, // receive right for a notify port
mach_msg_header_t *rcv_msg, // message buffer for receiving
mach_msg_size_t scatterlist_sz); // size of scatter list control info
The behavior of mach_msg_overwrite_trap() is controlled by setting the appropriate bits in the option
argument. These bits determine what the call does and how it does it. Some bits cause the call to use one
or more of the other arguments, which may be unused otherwise. The following are some examples of
individual bits that can be set in option.
 MACH_SEND_MSG If set, send a message.
 MACH_RCV_MSG If set, receive a message.
 MACH_SEND_TIMEOUT If set, the timeout argument specifies the timeout while sending.
 MACH_RCV_TIMEOUT If set, timeout specifies the timeout while receiving.
 MACH_SEND_INTERRUPT If set, the call returns MACH_SEND_INTERRUPTED if a software interrupt
aborts the call; otherwise, an interrupted send is reattempted.
 MACH_RCV_INTERRUPT This bit is similar to MACH_SEND_INTERRUPT, but for receiving.
 MACH_RCV_LARGE If set, the kernel will not destroy a received message even if it is larger than the
receive limit; this way, the receiver can reattempt to receive the message.
The header file osfmk/mach/message.h contains the full set of modifiers that can be used with the
mach_msg family of functions.
Another Mach trap, mach_msg_trap(), simply calls mach_msg_overwrite_trap() with zeros as the last
two argumentsit uses the same buffer when the call is used for both sending and receiving, so the rcv_msg
argument is not needed.
The scatterlist_sz argument is used when the receiver, while receiving an out-of-line message (see
Section 9.5.5), wants the kernel not to dynamically allocate memory in the receiver's address space but to
overwrite one or more preexisting valid regions with the received data. In this case, the caller describes
which regions to use through out-of-line descriptors in the ingoing rcv_msg argument, and
scatterlist_sz specifies the size of this control information.
The system library provides user-level wrappers around the messaging traps (Figure 91). The wrappers
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 9 of 153
handle possible restarting of the appropriate parts of IPC operations in the case of interruptions.
Figure 91. System library wrappers around Mach messaging traps
// system library
#define LIBMACH_OPTIONS (MACH_SEND_INTERRUPT|MACH_RCV_INTERRUPT)
mach_msg_return_t
mach_msg(msg, option, /* other arguments */)
{
mach_msg_return_t mr;
// try the trap
mr = mach_msg_trap(msg, option &~ LIBMACH_OPTIONS, /* arguments */);
if (mr == MACH_MSG_SUCCESS)
return MACH_MSG_SUCCESS;
// if send was interrupted, retry, unless instructed to return error
if ((option & MACH_SEND_INTERRUPT) == 0)
while (mr == MACH_SEND_INTERRUPTED)
mr = mach_msg_trap(msg, option &~ LIBMACH_OPTIONS, /* arguments */);
// if receive was interrupted, retry, unless instructed to return error
if ((option & MACH_RCV_INTERRUPT) == 0)
while (mr == MACH_RCV_INTERRUPTED)
// leave out MACH_SEND_MSG: if we needed to send, we already have
mr = mach_msg_trap(msg, option &~ (LIBMACH_OPTIONS|MACH_SEND_MSG),
/* arguments */);
return mr;
}
mach_msg_return_t
mach_msg_overwrite(...)
{
...
// use mach_msg_overwrite_trap()
...
}
User programs normally use mach_msg() or mach_msg_overwrite() to perform IPC operations. Variants
such as mach_msg_receive() and mach_msg_send() are other wrappers around mach_msg().
The anatomy of a Mach message has evolved over time, but the basic layout consisting of a fixed-size
header[4] and other variable-size data has remained unchanged. Mach messages in Mac OS X contain the
following parts:
[4] Note that unlike an Internet Protocol packet header, the send- and receive-side headers are
not identical for a Mach IPC message.
A fixed-size message header (mach_msg_header_t).
A variable-size, possibly empty, body containing kernel and user data (mach_msg_body_t).
A variable-size trailerone of several typescontaining message attributes appended by the kernel
(mach_msg_trailer_t). A trailer is only relevant on the receive side.
A message can be either simple or complex. A simple message contains a header immediately followed
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 10 of 153
by untyped data, whereas a complex message contains a structured message body. Figure 92 shows how
the parts of a complex Mach message are laid out. The body consists of a descriptor count followed by
that many descriptors, which are used to transfer out-of-line memory and port rights. Removing the body
from this picture gives the layout of a simple message.
Figure 92. The layout of a complex Mach message
[View full size image]
9.2.2.1. Message Header
The meanings of the message header fields are as follows.
 msgh_bits contains a bitmap describing the properties of the message. The
MACH_MSGH_BITS_LOCAL() and MACH_MSGH_BITS_REMOTE() macros can be applied on this field to
determine how the local port (msgh_local_port) and remote port (msgh_remote_port) fields will
be interpreted. The MACH_MSG_BITS() macro combines the remote and local bits to yield a single
value that can be used as msgh_bits. In particular, the presence of the MACH_MSGH_BITS_COMPLEX
flag in msgh_bits marks the message as a complex message.
// osfmk/mach/message.h
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 11 of 153
#define MACH_MSGH_BITS(remote, local) ((remote | ((local) << 8))
 msgh_size is ignored while sending because the send size is provided as an explicit argument. In a
received message, this field specifies the combined size, in bytes,[5] of the header and the body.
[5] It is rather common for Mach routines to deal with sizes in units of natural_t
instead of bytes. To avoid mysterious errors, be sure to verify the units that a given
routine uses.
 msgh_remote_port specifies the destination porta send or send-once rightwhile sending.
msgh_local_portcan be used to specify the reply port that the recipient will use to send a reply. It
can be a valid send or send-once right but can also be MACH_PORT_NULL or MACH_PORT_DEAD.
 msgh_id contains an identifier that can be used to convey the meaning or format of the message, to
be interpreted by the recipient. For example, a client can use this field to specify an operation to be
performed by the server.
The msgh_remote_port and msgh_local_port values are swapped (reversed with respect to the sender's
view) in the message header seen by the recipient. Similarly, the bits in msgh_bits are also reversed.
9.2.2.2. Message Body
A nonempty message body may contain data that is passive (uninterpreted by the kernel), active
(processed by the kernel), or both. Passive data resides inline in the message body and is meaningful only
to the sender and the recipient. Examples of active data include port rights and out-of-line memory
regions. Note that a message that carries anything but inline passive data is a complex message.
As noted earlier, a complex message body contains a descriptor count followed by that many descriptors.
Figure 93 shows some descriptor types that are available for carrying different types of content.
Figure 93. Descriptors for sending ports and out-of-line memory in Mach IPC messages
// osfmk/mach/message.h
// for carrying a single port
typedef struct {
mach_port_t name; // names the port whose right is being sent
mach_msg_size_t pad1;
unsigned int pad2 : 16;
mach_msg_type_name_t disposition : 8; // what to do with the right
mach_msg_descriptor_type_t type : 8; // MACH_MSG_PORT_DESCRIPTOR
} mach_msg_port_descriptor_t;
// for carrying an out-of-line data array
typedef struct
{
void *address; // address of the out-of-line memory
#if !defined(__LP64__)
mach_msg_size_t size; // bytes in the out-of-line region
#endif
boolean_t deallocate : 8; // deallocate after sending?
mach_msg_copy_options_t copy : 8; // how to copy?
unsigned int pad1 : 8;
mach_msg_descriptor_type_t type : 8; // MACH_MSG_OOL_DESCRIPTOR
#if defined(__LP64__)
mach_msg_size_t size; // bytes in the out-of-line region
#endif
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 12 of 153
} mach_msg_ool_descriptor_t;
// for carrying an out-of-line array of ports
typedef struct
{
void *address; // address of the port name array
#if !defined(__LP64__)
mach_msg_size_t count; // number of port names in the array
#endif
boolean_t deallocate : 8;
mach_msg_copy_options_t copy : 8; // how to copy?
mach_msg_type_name_t disposition : 8; // what to do with the rights?
mach_msg_descriptor_type_t type : 8; // MACH_MSG_OOL_PORTS_DESCRIPTOR
#if defined(__LP64__)
mach_msg_size_t count; // number of port names in the array
#endif
} mach_msg_ool_ports_descriptor_t;
A mach_msg_port_descriptor_t is used for passing a port right. Its name field specifies the name of the
port right being carried in the message, whereas the disposition field specifies the IPC processing to be
performed for the right, based on which the kernel passes the appropriate right to the recipient. The
following are examples of disposition types.
 MACH_MSG_TYPE_PORT_NONE The message carries neither a port name nor a port right.
 MACH_MSG_TYPE_PORT_NAME The message carries only a port name and no rights. The kernel does
not interpret the name.
 MACH_MSG_TYPE_PORT_RECEIVE The message carries a receive right.
 MACH_MSG_TYPE_PORT_SEND The message carries a send right.
 MACH_MSG_TYPE_PORT_SEND_ONCE The message carries a send-once right.
A mach_msg_ool_descriptor_t is used for passing out-of-line memory. Its address field specifies the
starting address of the memory in the sender's address space, whereas the size field specifies the
memory's size in bytes. If the deallocate Boolean value is true, the set of pages containing the data will
be deallocated in the sender's address space after the message is sent. The copy field is used by the sender
to specify how the data is to be copiedeither virtually (MACH_MSG_VIRTUAL_COPY) or physically
(MACH_MSG_PHYSICAL_COPY). The recipient uses the copy field to specify whether to dynamically allocate
space for the received out-of-line memory regions (MACH_RCV_ALLOCATE) or to write over existing
specified regions of the receiver's address space (MACH_MSG_OVERWRITE). As far as possible, and unless
explicitly overridden, memory transferred in this manner is shared copy-on-write between senders and
recipients.
Once a send call returns, the sender can modify the message buffer used in the send call without affecting
the message contents. Similarly, the sender can also modify any out-of-line memory regions transferred.
A mach_msg_ool_ports_descriptor_t is used to pass an out-of-line array of ports. Note that such an
array is always physically copied while being sent.
9.2.2.3. Message Trailer
A received Mach message contains a trailer after the message data. The trailer is aligned on a natural
boundary. The msgh_size field in the received message header does not include the size of the received
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007