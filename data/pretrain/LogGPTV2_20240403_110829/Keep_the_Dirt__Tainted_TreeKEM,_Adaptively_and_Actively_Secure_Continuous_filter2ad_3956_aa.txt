**Title: Keep the Dirt: Tainted TreeKEM, Adaptively and Actively Secure Continuous Group Key Agreement**

**Authors:**
- Karen Klein
- Guillermo Pascual-Perez
- Michael Walter
- Chethan Kamath
- Margarita Capretto
- Miguel Cueto
- Ilia Markov
- Michelle Yeo
- Joël Alwen
- Krzysztof Pietrzak

**Affiliations:**
- IST Austria: Karen Klein, Guillermo Pascual-Perez, Michael Walter, Ilia Markov, Michelle Yeo, Krzysztof Pietrzak
- Universidad Nacional del Rosario: Guillermo Pascual-Perez
- Wickr Inc.: Chethan Kamath, Margarita Capretto, Joël Alwen

**Abstract:**
While messaging systems with strong security guarantees are widely used in practice, designing a protocol that scales efficiently to large groups while maintaining similar security guarantees remains an open challenge. The two existing proposals to date are ART (Cohn-Gordon et al., CCS18) and TreeKEM (IETF, The Messaging Layer Security Protocol, draft). TreeKEM is the current candidate under consideration by the IETF MLS working group, but it can suffer from efficiency issues during dynamic group operations, such as adding and removing users.

In this paper, we formalize and analyze a variant of TreeKEM, which we term Tainted TreeKEM (TTKEM for short). This version, suggested by Millican (MLS mailing list, February 2018), is more efficient than TreeKEM for certain natural distributions of group operations, as quantified through simulations.

Our second contribution is the provision of two security proofs for TTKEM, establishing post-compromise and forward secrecy even against adaptive attackers. The security loss (to the underlying Public Key Encryption, PKE) in the Random Oracle Model is a polynomial factor, and a quasipolynomial one in the Standard Model. Our proofs can also be adapted to TreeKEM. Prior to our work, no security proof for any TreeKEM-like protocol had established tight security against an adversary who could adaptively choose the sequence of operations. We are also the first to prove (or even formalize) active security where the server can arbitrarily deviate from the protocol specification. Proving fully active security, where users can also arbitrarily deviate, remains an open problem.

**I. Introduction**

Messaging systems facilitate asynchronous communication, allowing parties to communicate without being online simultaneously. Messages are buffered by an untrusted delivery server and relayed to the receiving party when they come online. Secure messaging protocols, such as Open Whisper Systems' Signal Protocol, provide end-to-end privacy and authenticity. These protocols also offer stronger security guarantees like forward secrecy (FS) and post-compromise security (PCS). FS ensures that even if a party is compromised, previously delivered messages remain private. PCS guarantees that after a compromise, normal protocol execution will eventually restore the privacy and authentication of future messages.

Most existing protocols were originally designed for two-party communication and do not scale well to larger groups. Group messaging protocols are typically built on top of a complete network of two-party channels, leading to message sizes that grow linearly with the group size. Constructing messaging schemes that provide strong security (especially FS and PCS) while scaling efficiently to larger groups is an important and challenging open problem. The IETF working group Message Layer Security (MLS) [1] is focused on addressing this issue.

A modular approach seems more natural for constructing such protocols. Alwen et al. [2] proposed this for the two-party case. In this paper, we consider the concept of Continuous Group Key Agreement (CGKA), a generalization of their Continuous Key Agreement (CKA) for groups. A CGKA primitive can be used to build a group messaging protocol, as demonstrated in [2].

**A. Continuous Group Key Agreement (CGKA)**

Informally, in a CGKA protocol, any party ID1 can initialize a group G = (ID1, ..., IDn) by sending a message to all group members, enabling each member to compute a shared group key. ID1 must know the public key pki of each invitee IDi, which can be managed by a key-server where parties deposit their keys. This key management is largely orthogonal to the construction of a CGKA, so we assume such an infrastructure exists.

Beyond initializing a group, CGKA allows any group member IDi to update its key. After an Update operation, the state of IDi is secure even if its previous state was completely leaked to an adversary. Additionally, any group member can add a new party or remove an existing one. These operations (Update, Add, Remove) require sending a message to all group members. Since parties may not be online simultaneously, all protocol messages are exchanged via an untrusted delivery server. Although the server can prevent communication, the shared group key in the CGKA protocol and the messages encrypted in the messaging system built upon it must remain private.

Operations must be performed in the same order by all parties to maintain a consistent state. Even if the delivery server is honest, simultaneous operations by two parties can cause conflicts. To resolve this, the delivery server enforces an ordering. When a party initiates an Update/Remove/Add operation, it sends the message to the server and waits for a confirmation. If confirmed, it updates its state and deletes the old one. If rejected, it deletes the new state and keeps the old one. If a party is corrupted while waiting for confirmation, both the old and new states are leaked.

The formalization of CGKA is relatively recent, first introduced in [3]. The MLS working group predates this formalization, complicating the development account. As of this writing, the MLS protocol has seen nine versions, incorporating two different CGKA protocols: ART and TreeKEM. ART was removed in the second version, with TreeKEM (which has undergone several modifications) remaining the current candidate. We refer to the CGKA construction underlying version X of the MLS draft as TreeKEMvX and use the term TreeKEM generally when there is no ambiguity.

**1. Asynchronous Ratcheting Tree (ART)**

The first proposal for a simplified variant of a CGKA is the Asynchronous Ratcheting Tree (ART) by Cohn-Gordon et al. [4]. This protocol, along with TreeKEM and the protocol formalized in this paper, identifies the group with a binary tree where edges are directed from the leaves to the root. Each party IDi in the group is assigned a leaf labeled with an ElGamal secret key xi (known only to IDi) and a corresponding public value gxi. The values of internal nodes are defined recursively: an internal node whose two children have secret values a and b has the secret value gab and public value gι(gab), where ι is a map to the integers. The secret value of the root is the group key.

As illustrated in Figure 1, a party can update its secret key x to a new key x' by computing a new path from x' to the (new) root and then sending the public values on this new path to everyone in the group. The number of values that must be shared equals the depth of the tree, which is logarithmic in the group size. The authors prove the ART protocol secure even against adaptive adversaries, but their reduction loses a super-exponential factor in the group size. To achieve meaningful security, the ElGamal scheme's security parameter must be super-linear in the group size, resulting in large messages and defeating the purpose of the tree structure.

**2. TreeKEM**

The TreeKEM proposal [5], [6] is similar to ART, mapping a group to a balanced binary tree where each node is assigned a public and secret value. In TreeKEM, these values are the public/secret key pair for an arbitrary public-key encryption scheme. Each leaf is assigned to a party, and only this party should know the secret key of its leaf, while the secret key of the root is the group key. Unlike in ART, TreeKEM does not require any relation between the secret key of a node and the secret keys of its parents.