values corresponding to other input wire labels. Using eCom (sample epp with trapdoor t1, t2), create
c as a commitment to a dummy value (Incase of Naor-based NICOM, set c to the speciﬁc commitment
supporting equivocation). Set Bi (i ∈ [2]) to include C, the set of commitments computed with respect
3(cid:96)+α}α∈[(cid:96)], m2) on
to ppi and c. Send Bi on behalf of Pi. Send ({omα
behalf of P1, P2 to P ∗
3 .
2(cid:96)+α}α∈[(cid:96)], m1), ({omα
(cid:96)+α, oxα
α , oxα
32
32
1
31
2
R4 Suppose on behalf of some Pi (i ∈ [2], j ∈ [2] \ i) received (Y = Ev(C, X), r(cid:48)
3 in Round 3
such that H(r(cid:48)
3 (where x3 is computed as
x3 = x31 ⊕ x32) to obtain output y. Run (C, X, d(cid:48)) ← Spriv(1κ, C, y) where Spriv refers to the privacy
simulator of the garbling scheme. Send o to P ∗
j) = hj. Then invoke FFair with (Input, x3) on behalf of P ∗
3 on behalf of Pi where o = Equiv(c, d(cid:48), t1, t2).
j) from P ∗
R4 Else invoke FFair with (Input, abort) on behalf of P ∗
3 .
(b) S 1
f3PC (P ∗
1 is corrupt)
R1 Send a random share x31 and pp on behalf of P3. Choose r2 uniformly at random to compute h2 = H(r2).
Send (epp2, h2) to P ∗
1 on behalf of P2 according to the protocol.
R1 Receive (s, h1, epp1) on behalf of P2 and (h1, r1) on behalf of P3. Compute B on behalf of P2 as per
protocol.
R2 Invoke FFair with (sid, Input, abort) on behalf of P ∗
1 and set y = ⊥ if (a) h1 received on behalf of
P2, P3 does not match or H(r1) (cid:54)= h1 or (b) B received from P ∗
1 on behalf of P3 does not match the B
computed on behalf of P2 or (c) any of the decommitments corresponding to encoded inputs sent by P ∗
to P3 opens to something other than what was originally committed (known on behalf of P2).
1
R2 Else, extract P ∗
1 ’s input as x1 = m1 ⊕ p1, where p1, m1 is known on behalf of P2, P3 respectively. Invoke
FFair with (sid, Input, x1) to get output y.
R3 Compute Y such that De(Y, d) = y (d known on behalf of P2). Send (Y, r2) to P ∗
R4 If y (cid:54)= ⊥, send (y, r1) to P ∗
1 on behalf of P2.
1 on behalf of P3.
Since HYB4 := IDEALFFair,Sf3PC, we show that every two consecutive hybrids are computationally indistin-
guishable which concludes the proof.
34
c≈ HYB1: The difference between the hybrids is that P1, P2 use uniform randomness in HYB1 rather than
HYB0
pseudorandomness as in HYB0. The indistinguishability follows via reduction to the security of the PRG G.
c≈ HYB2: The difference between the hybrids is that some of commitments of the input labels in HYB1 that
HYB1
will not be opened are replaced with commitments of dummy values in HYB2. The indistinguishability follows via
reduction to the hiding property of Com that holds even though pp was chosen by corrupt P3.
c≈ HYB3.1: The difference between the hybrids is in the way (C, X) is generated when the execution re-
HYB2
sults in abort. In HYB2, (C, e, d) ← Gb(1κ, C(cid:48)) is run, which gives (C, En(x, e)). In HYB3.1, it is generated as
(C(cid:48), X) ← Sobv(1κ, C(cid:48)). Additionally, the commitment to the decoding information is created for a dummy value
in HYB3.1. The indistinguishability follows via reduction to the obliviousness of garbling and the hiding property
of eCom.
c≈ HYB3.2: The difference between the hybrids is in the way (C, X, d) is generated. In HYB2, (C, e, d) ←
HYB2
Gb(1κ, C(cid:48)) is run, which gives (C, En(x, e), d). In HYB3.2, it is generated as (C(cid:48), X, d(cid:48)) ← Sprv(1κ, C(cid:48), y). Ad-
ditionally, the commitment to the decoding information is created for a dummy value and later equivocated to d(cid:48)
using o computed via o ← Equiv(c, d(cid:48), t1, t2). The indistinguishability follows via reduction to the privacy of the
garbling scheme and the hiding property of eCom.
c≈ HYB4: The difference between the hybrids is that in HYB3, the protocol results in abort if neither P1 nor
HYB3
P2 receive Y such that De(Y, d) (cid:54)= ⊥ from P3; while in HYB4, the protocol results in abort if neither P1 nor P2
receive the Y that P3 obtained upon GC evaluation. Due to authenticity of the garbling scheme, P3 could have
sent Y such that Y (cid:54)= Ev(C, X) but De(Y, d) (cid:54)= ⊥ only with negligibility probability. Therefore, the hybrids are
indistiguishable.
Security against corrupt P ∗
views are shown to be indistinguishable via a series of intermediate hybrids.
1 We now argue that IDEALFFair,S1
c≈ REALf3PC,A, when A corrupts P1. The
f3PC
– HYB0: Same as REALf3PC,A.
– HYB1: Same as HYB0, except that P3 aborts if it accepts any decommitment that opens to a value other than
what was originally committed.
HYB0
– HYB2: Same as HYB1, except that Y is computed via De(Y, d) = y rather that Y = Ev(C, X).
– HYB3: Same as HYB2, except that P2 outputs ⊥ if GC could not be evaluated by P3 successfully.
Since HYB3 := IDEALFFair,Sfair3PC, we show that every two consecutive hybrids are computationally indistinguish-
able which concludes the proof.
c≈ HYB1: The difference between the hybrids is that in HYB0, P3 aborts if the decommitments sent by
P1 output ⊥ while in HYB1, P3 aborts if the decommitments sent by P1 opens to any value other than what was
originally committed. Since the commitment scheme Com is binding and pp was chosen uniformly at random by
P3, in HYB0, P1 could have decommitted successfully to a different input label than what was originally committed,
only with negligible probability.
c≈ HYB2: The difference between the hybrids is that in HYB1, P3 computes Y via Ev(C, X), while in HYB2,
HYB1
Y is computed such that De(Y, d) = y. Due to the correctness of the garbling scheme, the equivalence of Y
computed via Ev(C, X) or such that De(Y, d) = y holds.
c≈ HYB3: The difference between the hybrids is that in HYB2, P2 may output non-⊥ if it receives a valid
HYB2
‘proof’ from P1 even though P3 was unable to evaluate the GC successfully, while in HYB3, P2 outputs ⊥ in this
scenario. Due to the preimage resistance property of Hash H, P1 could have been able to compute a valid proof i.e
r(cid:48)
2 such that H(r(cid:48)
2) = h2 only with negligible probability.
35
D Security Proof for g4PC
In this section, we present the complete security proof of the Theorem. 4.9 that states the security of g4PC relative
to its ideal functionality.
Proof. We describe the simulator Sg4PC for the case when P1, P3 and P4 is corrupt. The simulator acts on
behalf of all the honest parties in the execution. The corruption of P2 is symmetric to the case when P1 is cor-
rupt. For better clarity, we separate out the simulation for the subroutine InputCommiti. Speciﬁcally, we describe
the simulator corresponding to InputCommit1 (simulation of InputCommit2, InputCommit3, InputCommit4 fol-
low analogously) for the case of corrupt P1 and P2. The cases of P3, P4 being corrupt during InputCommit1 is
symmetric to the case of P2. Figures 13-15 describes the simulator with R1, R2, R3, R4, R5 depicting simulation
for rounds 1, 2, 3, 4 and 5 respectively.
We ﬁrst give brief overview of the main technicalities of the simulator. During simulation of InputCommiti
corresponding to corrupt Pi, it is possible for the simulator acting on behalf of the honest parties to extract the
committed input of the corrupt in the ﬁrst round itself based on whether Pi had sent consistent messages to at least
majority of the honest parties (else a default value is used). Thus, the extracted input can be used to obtain output
y via FGOD at the end of Round 1 of simulation. The main technicality arises with respect to simulation in case of
corrupt P3. In this case, either the oblivious simulator of the garbling scheme Sobv (Ref. [BHR12]) or the privacy
simulator Sprv (can be invoked with output y obtained) is invoked based on whether corrupt P3 would get access to
input labels corresponding to any of his non-committed input shares or not respectively in Round 2. This is known
by the simulator acting on behalf of both the honest garblers since the committed input of the corrupt P3 is known
to simulator at end of Round 1. Finally in the former case when GC returned by Sobv is used, the commitment on
hash of decoding information is dummy (never has to be opened); while in the latter case when GC returned by
Sprv is used, commitment on hash of decoding information is done on the value d returned by the simulator. With
this background, we now proceed to the formal description.
Security against corrupt P ∗
P3. The views are shown to be indistinguishable via a series of intermediate hybrids.
3 We now argue that IDEALFGOD,S3
c≈ REALg4PC,A, when an adversary A corrupts
g4PC
– HYB0: Same as REALg4PC,A.
– HYB1: Same as HYB0, except that when the execution does not result in P3 getting access to the opening of
commitment cij (i ∈ ind(P3), j /∈ ind(Pi3)) sent by Pi, the commitment is replaced with commitment of
dummy value.
– HYB2: Same as HYB1 except that P3 is added to Ck (k ∈ ind(P3)) if the opening forwarded by P3 to Pk
during InputCommiti corresponding to Pi’s committed share (i ∈ ind(P3k)) is anything other than what
was originally committed.
– HYB3: Same as HYB2, except that P1, P2 use uniform randomness rather than pseudo-randomness.
– HYB4: Same as HYB3, except that some of the commitments of input wire labels sent on behalf of P1, P2, which
will not be opened are replaced with commitments of dummy values.
– HYB5: Same as HYB4, except the following:
– HYB5.1: When the execution results in P3 getting access to labels corresponding to its non-committed input
for the garbled circuit, the GC is created as (C(cid:48), X) ← Sobv(1κ, C) and the commitment to the hash of the
decoding information is created for a dummy value.
– HYB5.2: When the execution results in P3 getting access to labels corresponding to its committed input, the
GC is created as (C(cid:48), X, d(cid:48)) ← Sprv(1κ, C, y). The commitment c is computed on decoding information
H(d(cid:48)).
36
Figure 13: Description of SInputCommit1
S 1
InputCommit1
(P ∗
1 is corrupt)
R1 Receive commitments c12, c13, c14 on behalf of each among P2, P3, P4. Receive o12 on behalf of P3, P4;
o13 on behalf of P2, P4 and o14 on behalf of P2, P3.
R1 Set Ck = P1 on behalf of Pk (k ∈ {2, 3, 4}) if sOpen(pp1, c1j, o1j) (j ∈ ind(P1k)) received from P ∗
1
results in ⊥.
R1 If there does not exist majority in the versions of (pp1, c12, c13, c14) received on behalf of P2, P3, P4 from
P ∗
1 , assume a default value for P1’s input share and add P ∗
1 to Ck, where k ∈ {2, 3, 4}.
R1 Else, set (pp1, c12, c13, c14) as the majority value and (o12, o13, o14) as the corresponding opening. Com-
pute x1 = x12 ⊕ x13 ⊕ x14 where x1j = sOpen(pp1, c1j, o1j) for j ∈ {2, 3, 4}. Invoke FGOD with
(Input, x1) on behalf of P ∗
1 to obtain output y.
R1 If received different versions of (pp1, c12, c13, c14) on behalf of Pα, Pβ (where α, β ∈ {2, 3, 4}), add
(P1, Pα) in Fβ and (P1, Pβ) in Fα.
S 2
InputCommit1
(P ∗
2 is corrupt)
R1 On behalf of P1: Sample pp1 and compute c1j as commitments on randomly chosen x1j for j ∈ ind(P12)
2 ) and commitment of dummy value corresponding to j /∈
(input shares of P1 available to corrupt P ∗
ind(P12). Send (pp1, c12, c13, c14) and openings (o13, o14) to P ∗
2 .
R2 Send (pp1, c12, c13, c14) and o14 to P ∗
2 on behalf of P3. Send (pp1, c12, c13, c14) and o13 to P ∗
2 on behalf
of P4 .
R2 Receive (pp(cid:48)
1, c(cid:48)
14) from P ∗
2 on behalf of Pk (k ∈ {3, 4}). Add (P1, P2) to Fk if the version
13, c(cid:48)
12, c(cid:48)
received from P ∗
2 is not identical to the one sent on behalf of P1 in Round 1. Additionally, receive o(cid:48)
13,
14 on behalf of P4 and P3 respectively. Add P2 to Ck (k ∈ {3, 4}) if the opening received on behalf of
o(cid:48)
Pk is anything other than what was originally sent on behalf of P1 in Round 1.
– HYB6: Same as HYB5, except that P3 does not receive y in Round 4 if neither P1 nor P2 receive Y obtained
upon GC evaluation from P3 in Round 3.
– HYB7: Same as HYB6 except that the TTP assigned by P3 sends y only if the view O3 sent by P3 comprises of
decommitments that opens to the input shares of the parties that were originally committed.
g4PC
HYB0
, we show that every two consecutive hybrids are computationally indistinguish-
Since HYB7 := IDEALFGOD,S3
able which concludes the proof.
c≈ HYB1: The difference between the hybrids is that when the execution does not result in P3 getting
access to the opening of commitment cij (i ∈ ind(P3), j /∈ ind(Pi3)) sent by Pi, cij corresponds to the actual
input share xij in HYB0 while it corresponds to dummy value in HYB1. The indistinguishability follows from the
hiding property of sCom.
c≈ HYB2: The difference between the hybrids is that while in HYB1, P3 is added to Ck (k ∈ ind(P3)) if
the opening forwarded by P3 to Pk during InputCommiti (i ∈ ind(P3k)) corresponding to Pi’s committed share
HYB1
37
Figure 14: Description of Sg4PC
3 is corrupt)
S 3
g4PC (P ∗
(α ∈ [4]) (Fig. 13). Let y denote the output computed.
InputCommitα
3 and pp2
(α ∈ [4]) (Fig. 13).
InputCommitα
3 on behalf of P1 and P2 respectively.
R1 Simulation of Round 1 of S 3
3 from P ∗
R1 Receive pp1
R2 Simulation of Round 2 of S 3
R2 If P3 ∈ Ci (i ∈ {1, 2}) or (P1, P3) ∈ F2 or (P2, P3) ∈ F1 (i.e an honest garbler may
not have access to P3’s committed share at end of Round 1), use uniform randomness r on be-