0.50(0.0000)
0.50(0.0000)
0.45(0.0364)
0.33(0.0502)
attacker can perform targeted attacks or random attacks
using strokes collected in any of the ﬁve settings. Recall
that RA-xy (or TA-xy) denotes the random attacks (or tar-
geted attacks) that use strokes collected in the setting sy
to authentication systems that use the setting sx, where
x, y ∈ {a, b, c, d, e}. Note that the attacker does not know
which setting (or classiﬁer) is currently used by our authen-
tication system at a given time point.
To attack the baseline authentication system that uses
the setting sx (i.e., S-Baseline-x), the attacker can choose to
perform the best random attacks (i.e., max{RA -xy} for y ∈
{a, b, c, d, e}) or same-setting targeted attacks (i.e., TA-xx)
that achieve the highest EERs, where x ∈ {a, b, c, d, e}. This
is because the attacker can know the used screen setting.
To attack S-Baseline-improved or S-ATCA, the attacker
does not know the setting of the authentication system1 and
thus it randomly selects a setting and replays strokes col-
lected in the selected setting. As a result, the 25 possible
attacks RA-xy for x, y ∈ {a, b, c, d, e} are performed with an
equal probability of 1
25 in the random attacks, and TA-xy
for x, y ∈ {a, b, c, d, e} are performed with an equal proba-
bility of 1
25 in the targeted attacks. Table 6 summarizes the
possible attacks to diﬀerent authentication systems.
EER of authentication systems: For an authentication
system and an attack scenario (e.g., random attacks or tar-
geted attacks), we compute an EER via averaging the EERs
of the possible attacks to the authentication system, and
this average EER is used to measure the resilience of the
authentication system to the attacks.
1Note that we assume the attacker cannot access the set-
tings of the authentication system at runtime, because such
access requires high privileges (e.g., root access to the op-
erating system) and an attacker that has already obtained
these high privileges already compromised the device.
Figure 6: EERs of targeted attacks to our authentication
system as a function of the number of screen settings for
both scenarios and both horizontal and vertical strokes. We
observe that our system can better defend against forgery
attacks with more screen settings.
Results: Table 7 shows the mean EERs over all subjects
for each authentication system and attack scenario for hor-
izontal strokes and vertical strokes.
Overall, we ﬁnd that our adaptive authentication system
achieves the smallest EERs for both random attacks and tar-
geted attacks. Speciﬁcally, the EER of adaptive authentica-
tion system is 2% to 9% smaller than those of the baseline
and improved baseline authentication systems for random
attacks. For targeted attacks, our improved baseline au-
thentication system (i.e., S-Baseline-improved) is 5% to 6%
smaller than that of the baseline authentication systems,
and our adaptive authentication system further decreases
the EER by 12% for both horizontal and vertical strokes.
6.5
Impact of the number of screen settings
We show that the EERs of our authentication system de-
crease when we use more appropriate screen settings. To-
wards this goal, we vary the number of screen settings and
compare the corresponding EERs.
Considering the inﬂuence of the diﬀerence between two
screen settings, we consider two scenarios, in which the num-
ber of screen settings increases in diﬀerent fashions. The two
scenarios are:
• Scenario I: The new screen settings are out of the
range that is covered by the existing screen settings.
Speciﬁcally, we consider two screen settings consist of
{sa, sb}, three settings consist of {sa, sb, sc}, four set-
tings consist of {sa, sb, sc, sd}, and ﬁve settings consist
of {sa, sb, sc, sd, se}.
• Scenario II: The new screen settings are in the range
that is covered by the existing screen settings. Specif-
ically, we consider that two screen settings consist of
{sa, se}, three settings consist of {sa, sc, se}, four set-
tings consist of {sa, sb, sc, se},2 and ﬁve settings consist
of {sa, sb, sc, sd, se}.
Since EERs of random attacks are all small, we focus
on targeted attacks. Figure 6 shows EERs of targeted at-
tacks to our system for diﬀerent number of screen settings.
We observe that our authentication system achieves smaller
EERs as the number of settings increases for both horizon-
2We
also
tried
four-screen-settings
{sa, sc, sd, se}, and we found that the two four-screen-
settings achieve similar EERs.
other
the
2345Numberofscreensettings0.320.340.360.380.40EERsofS-ATCAScenarioI,verticalstrokesScenarioI,horizontalstrokesScenarioII,verticalstrokesScenarioII,horizontalstrokes(a) Random attacks
(b) Targeted attacks
Figure 7: EERs of various attacks as a function of the time spent on collecting training horizontal strokes. The classiﬁer is
C-ATCA-e. EERs of targeted attacks (TA) in the screen setting se are always 0.5, and thus we do not show them in (b) to
better contrast the diﬀerences of EERs in other screen settings. We ﬁnd that learning our classiﬁer is fast, i.e., the EERs are
stable or slightly ﬂuctuate after two minutes (around 30 strokes) spent on collecting training strokes.
tal strokes and vertical strokes and for both scenarios. This
is because, with less screen settings, the performance of our
authentication system is dominated by the same-setting tar-
geted attacks whose EERs are high. However, with more set-
tings, the impact of same-setting targeted attacks is smaller,
and the performance of our authentication system gets im-
In fact, the probability of same-setting targeted
proved.
attacks is 1
n , where n is the number of settings used.
6.6 Learning our classiﬁers is fast
To learn our classiﬁers for a user, we need to collect his/her
touch strokes. To study the eﬀect of time spent on collect-
ing training strokes from a new user on the performance
of our classiﬁers, we sample a user and one of the ﬁve tri-
als/folds. In the selected trial, we keep the test dataset and
attack datasets the same while increasing the positive train-
ing dataset (the negative training dataset is ﬁxed). Figure 7
shows the EERs of various attacks as a function of time
spent on collecting positive training horizontal strokes. The
classiﬁer is C-ATCA-e. EERs of the targeted attacks us-
ing strokes collected in the setting se (i.e., ‘TA, se’) are all
close to 50%, and thus are ignored to better contrast the
diﬀerences of other EERs.
We ﬁnd that EERs converge very fast. In particular, after
2 minutes (around 30 strokes), EERs are stable or slightly
ﬂuctuate. Moreover, after collecting strokes, training a clas-
siﬁer is ﬁnished within 1 second.
6.7 Summary
Our observations can be summarized as follows:
• Users can subconsciously adapt their behavior to dif-
ferent screen settings, i.e., transitions between settings
do not aﬀect user experiences.
• Our authentication mechanism achieves much smaller
EERs than previous work for both random attacks and
targeted attacks.
• Our authentication system achieves smaller EERs with
• Learning our classiﬁers is fast, i.e., strokes collected
more screen settings.
within two minutes are enough to stabilize EERs.
7. DISCUSSION
Training human attackers: To mimic the targeted user’s
touch behavior, a human attacker needs to be trained to
produce touch strokes whose features are close to those of
the targeted user. We note that Meng et al. [22] proposed an
interactive system to train a human attacker to reproduce
keystroke dynamics of the targeted user for a given short
password. Speciﬁcally, they consider features of keystroke
dynamics are constructed from 2-grams, and thus changing
the keystroke timing of a character only inﬂuences features
of the local two 2-grams. For instance, suppose we have a
password with three characters ABC, changing the keystroke
timing of B only inﬂuences the features of AB and BC. Thus,
it is possible to train a human attacker to reproduce the
keystroke dynamics of a given short password via greedily
changing the keystroke timings of characters one by one.
However, reproducing touch strokes could be much harder
than reproducing keystroke dynamics. This is because 1) we
have around 30 touch features, 2) changing one touch point
could result in changes of a few features, and 3) the human
attacker needs to learn how the targeted user would adapt
to diﬀerent screen settings. Nevertheless, it is an interest-
ing future work to explore the possibility/impossibility of
training human attackers to mimic a targeted user.
Fixing one screen setting to perform targeted at-
tacks: A robot can keep replaying touch data collected in
a ﬁxed screen setting to attack our authentication system.
The expected number of tries until the robot is using the
correct screen setting would then be the total number of
screen settings. Once the robot gets the correct setting, the
robot can use the mobile device for a time interval during
which the setting is unchanged.
However, this attack can be blocked with a high probabil-
ity by combing our touch-based authentication with PINs.
Speciﬁcally, once we detect suspicious touch data, we ask
the user to type in the backup PIN.
Detecting screen settings with specialized intelligent
robots: An intelligent robot that is equipped with spe-
cialized sensors could potentially detect the screen settings
using some Artiﬁcial Intelligence (AI) algorithms, and de-
50100150200250Numberofsecondsoncollectingtrainingstrokes0.050.100.150.200.250.300.350.40EERRA,saRA,sbRA,scRA,sdRA,se50100150200250Numberofsecondsoncollectingtrainingstrokes0.100.150.200.250.300.350.400.45EERTA,saTA,sbTA,scTA,sdtecting the screen settings could enable the attacker (e.g.,
a friend or spouse of the targeted user) to perform better
targeted attacks. For instance, a robot with a camera could
possibly detect the screen settings by using computer vi-
sion algorithms to compare its raw touch data (collected via
the camera) on the screen and the movements (again, col-
lected via the camera) of the running application. However,
the robot still needs to generate a few touch strokes (these
strokes may be from a screen setting that is diﬀerent from
the one used by our authentication system) before the screen
setting is detected, during which our authentication scheme
might already successfully reject the attacker. Moreover, it
might not be easy for the attacker to get such a specialized
robot, which is true at least for now, given the current state
of AI. Therefore, we focus on robots that are commercialized
and easy to get.
Leveraging sloppiness and jitter: Screen settings could
also adjust sloppiness and jitter other than the distortions
along the X axis and the Y axis studied in this paper. Slop-
piness controls how far the user has to move the ﬁnger on
the screen to send a movement to the applications and jitter
controls what distortions from a straight line on the screen
are still considered as a movement by the applications. It
is an interesting future work to explore the impact of slop-
piness and jitter on the performance of defending against
forgery attacks in our authentication system.
8. CONCLUSION AND FUTURE WORK
In this work, we design a new touch-based continuous au-
thentication system to defend against forgery attacks by
leveraging the impact of screen settings on a user’s touch
behaviors. First, we ﬁnd that, when screen settings are
discretized properly, a user’s touch behaviors in two diﬀer-
ent settings are both stable and sensitive. Second, based
on these ﬁndings, we design a new authentication system
called adaptive touch-based continuous authentication. The
key idea is to randomly sample a predeﬁned screen setting
in each time interval. The attacker cannot know the screen
setting at the time of attacks. Third, we evaluate our sys-
tem by collecting data from 25 subjects in ﬁve screen set-
tings. We ﬁnd that users can subconsciously adapt their
touch behavior to diﬀerent screen settings, i.e., transitions
between settings do not interrupt users nor aﬀect user expe-
riences. Moreover, we observe that our system signiﬁcantly
outperforms previous work at defending against both ran-
dom forgery attacks and targeted forgery attacks, the regis-
tration phase of our system takes a short period of time, and
our system can better defend against forgery attacks with
more screen settings.
Future work includes performing a large-scale study about
our authentication system in the wild, investigating more
types of screen settings, and exploring more advanced at-
tacks to touch-based authentication systems.
9. REFERENCES
[1] Attacking Android Face Authentication.
https://www.youtube.com/watch?v=BwfYSR7HttA.
[2] Attacking Android Liveness Check.
https://www.youtube.com/watch?v=zYxphDK6s3I.
[3] Bee. http://www.usvigilant.com/bee/.
[4] C. Bo, L. Zhang, X.-Y. Li, Q. Huang, and Y. Wang.
Silentsense: silent user identiﬁcation via touch and
movement behavioral biometrics. In MobiCom, 2013.
[5] D. V. Bruggen, S. Liu, M. Kajzer, A. Striegel, C. R.
Crowell, and J. D’Arcy. Modifying smartphone user
locking behavior. In SOUPS, 2013.
[6] C.-C. Chang and C.-J. Lin. Libsvm: a library for
support vector machines. ACM TIST, 2(3), 2011.
[7] C. Cortes and V. Vapnik. Support-vector networks. In
Machine Learning, volume 20, pages 273–297, 1995.
[8] CSDN passwork leak. goo.gl/hn0Cr6.
[9] A. De Luca, A. Hang, F. Brudy, C. Lindner, and
H. Hussmann. Touch me once and i know it’s you!:
Implicit authentication based on touch screen
patterns. In CHI, 2012.
[10] S. Egelman, S. Jain, R. S. Portnoﬀ, K. Liao,
S. Consolvo, and D. Wagner. Are you ready to lock?
understanding user motivations for smartphone
locking behaviors. In CCS, 2014.
[11] Fogery Attacks to Fingerprint. http://www.ccc.de/en/
updates/2013/ccc-breaks-apple-touchid.
[12] M. Frank, R. Biedert, E. Ma, I. Martinovic, and
D. Song. Touchalytics: On the applicability of
touchscreen input as a behavioral biometric for
continuous authentication. IEEE Transactions on
Information Forensics and Security, 8(1):136–148,
2013.
[13] L. Li, X. Zhao, and G. Xue. Unobservable
reauthentication for smart phones. In NDSS, 2013.
[14] Nest Thermostat. https://nest.com/.
[15] Rockyou password leak. goo.gl/hGwU5k.
[16] N. Sae-Bae, K. Ahmed, K. Isbister, and N. Memon.
Biometric-rich gestures: a novel approach to
authentication on multi-touch devices. In CHI, 2012.
[17] N. Sae-Bae, N. Memon, and K. Isbister. Investigating
multi-touch gestures as a novel biometric modality. In
IEEE BTAS, 2012.
[18] N. Sae-Bae, N. Memon, K. Isbister, and K. Ahmed.
Multitouch gesture-based authentication. IEEE
transactions on information forensics and security,
9(3-4):568–582, 2014.
[19] A. Serwadda and V. V. Phoha. When kids’ toys
breach mobile phone security. In CCS, 2013.
[20] M. Sherman, G. Clark, Y. Yang, S. Sugrim, A. Modig,
J. Lindqvist, A. Oulasvirta, and T. Roos.
User-generated free-form gestures for authentication:
security and memorability. In MobiSys, 2014.
[21] Sophos Naked Security blog. Survey says 70% don’t
password-protect mobiles: download free Mobile
Toolkit. http://nakedsecurity.sophos.com/2011/08/
09/free-sophos-mobile-security-toolkit/. Published
Aug 9, 2011.
[22] C. M. Tey, P. Gupta, and D. Gao. I can be you:
Questioning the use of keystroke dynamics as
biometrics. In NDSS, 2013.
[23] The Smartphone Market is Bigger Than the PC
Market. http://www.businessinsider.com/
smartphone-bigger-than-pc-market-2011-2.
[24] H. Xu, Y. Zhou, and M. R. Lyu. Towards continuous
and passive authentication via touch biometrics: An
experimental study on smartphones. In SOUPS, 2014.