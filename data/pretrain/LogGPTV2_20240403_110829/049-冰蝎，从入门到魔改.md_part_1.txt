冰蝎，从⼊⻔到魔改
这是 酒仙桥六号部队 的第 49 篇⽂章。
全⽂共计 3251 个字，预计阅读时⻓ 11 分钟。
0x01 什么是冰蝎？
"冰蝎" 是⼀个动态⼆进制加密⽹站管理客户端。在实战
中，第⼀代 webshell 管理⼯具 "菜⼑" 的流量特征⾮常
明显，很容易就被安全设备检测到。基于流量加密的
webshell 变得越来越多，"冰蝎" 在此应运⽽⽣。
"冰蝎" 客户端基于 JAVA，所以可以跨平台使⽤，最新版
本为 v2.0.1，兼容性较之前的版本有较⼤提升。主要功能
为：基本信息、命令执⾏、虚拟终端、⽂件管理、Socks
代理、反弹 shell、数据库管理、⾃定义代码等，功能⾮
常强⼤。
0x02 加密原理
我们以 PHP 版本为例，"冰蝎" 在服务端⽀持 open_ssl
时，使⽤ AES 加密算法，密钥⻓度 16 位，也可称为
AES-16。此在软件及硬件 (英特尔处理器的 AES 指令集
包含六条指令) 上都能快速地加解密，内存需求低，⾮常
适合流量加密。
加密流程⼤致如下图所示：
⾸先客户端以 Get 形式发起带密码的请求。
服务端产⽣随机密钥，将密钥写⼊ Session 并将密钥返
回客户端。
客户端获取密钥后，将 payload ⽤ AES 算法加密，⽤
POST 形式发送请求。
服务端收到请求，⽤ Session 中的密钥解密请求的 Body
部分，之后执⾏ Payload，将直接结果返回到客户端。
客户端获取返回结果，显示到 UI 界⾯上。
我们看到在图中，"冰蝎" 在执⾏ Payload 之后的返回，
并没有显示加密，这点我们可以从⾃带的 webshell 中看
出。
这个问题需要解密⼀下 "冰蝎" 的流量，才能知道答案。
0x03 通信过程
我们⽤ wireshark 来抓包看下 "冰蝎" 通信过程：
从抓包结果上粗略来看，加密效果是不错的，全程基本没
有可读的执⾏代码。
我们⽤服务端返回的密钥，对客户端发送的报⽂内容进⾏
解密。
解密结果为如下代码：
我们发现核⼼内容只是⼀个简单的 JSON 格式的
success 的返回，但是会将结果使⽤ AES 包装⼀层加
密，所以我们看到 webshell 中没有加密，⽽流量却是加
密的。
0x04 时过境迁
攻防技术⼀直都在不断发展的，要想保证攻防的持续有
效，就需要不断地更新⾃我。"冰蝎" 的最新版本
在发布于 之后就没有进⾏过更新 ⽽各
v2.0.1，在发布于 2019.2 之后就没有进⾏过更新。⽽各
⼤⼚商的检测系统及 WAF 均已经对其特征进⾏分析并加
⼊规则。
各路分析其流量规则的⽂章也层出不穷。
原版 "冰蝎" 已经不能满⾜攻防对战的要求了，这时我们
需要⾃⼰动⼿。
0x05 魔改准备
⾸先⽤ JD-GUI 等反编译⼯具，反编译 JAR 包获得源
码。可以从中可以看到 UI ⽂件引⼊的包名看到，"冰蝎"
使⽤了 SWT 框架作为 UI。
既然这样我们直接⽤ Eclipse 安装 WindowsBuilder，来
直接创建 SWT 项⽬。
直接创建 项⽬。
安装 WindowsBuilder
在 Eclipse 的 Marketplace ⾥搜索 WindowsBuilder，
点击 Install 即可安装。
之后我们直接创建基于 SWT 项⽬，即可避免因 swt 包
缺失导致的报错问题。
我们将反编译之后的源码和 JAR 包导⼊项⽬，在通过搜
索源码和修复报错（会有⼀⼤波报错等待你修复，可以多
种反编译⼯具对⽐结果来修改）等⽅式尝试将源码跑起
来。
来。
最终我们终于成功跑起来了反编译之后的代码。
可以看到项⽬结构⽐较简单清晰，主要逻辑都在 net 包
下，Main.java 为程序⼊⼝。这⾥简单介绍下各个模块代
码的作⽤：
出于对原作者的瑞思拜，不会放出任何项⽬⽂件。
0x06 特征擦除
经过对⽹上多篇对 "冰蝎" 特征的资料参考，总结出⼏条
特征并将其特征给予修改擦除。以 PHP 版本为例，其他
语⾔版本异曲同⼯。
1. 密钥交换时的 URL 参数
⾸当其冲的就是密钥交换时的参数，⽤ GET 请求⽅式，
默认 webshell 的密码为 pass，并且参数值为 3 位随机
数字。
从 webshell 上看，参数值的随机数字并没有任何实际作
⽤：
客户端代码上看也只是随机数：
我们来看下⼀般对此情况的检测规则：
\.(php|jsp|asp|aspx)\?(\w){1,10}=\d{2,3} HTTP/1.1
该规则可以匹配 1-10 位密码的 webshell，并且参数值为
2-3 位的数字。
修改思路：
增加随机数量的随机参数和随机值（随机值不为全数
字），并且密码参数不能固定为第⼀个。
修改后的效果：
2.header 中的 Content-Type
默认在 header 中的 Content-type 字段，在⼀般情况下
的 GET 形式访问是没有该字段的，只有 POST 形式的访
问才会有。但 "冰蝎" 不论是 GET 形式还是 POST 形式
的访问均包含此字段。此处露出了较⼤破绽，⽽且该字段
的⼤⼩写有点问题，所以基于这个规则基本可以秒杀。
我们来看下这块相关的的代码：
ShellService 代表⼀个 Shell 服务，在其构造函数中 31
⾏判断了，如果类型是 php 则在 header 中加⼊
Content-type 头。但在 35 ⾏的 getKeyAndCookie 向
服务端发送 GET 请求获取密钥时，也将此 header 头带
⼊其中，所以发送 GET 请求包时也会携带此参数。
修改思路：
GET 形式访问时在 header 中去掉此字段，POST 形式
访问时将值改为 Content-Type 值改为 "text/html;
charset=utf-8" 以规避安全检测（值也可以不改）。
修改后的效果：
GET 请求：
POST 请求：
3.header 中的 User-Agent
User-Agent 是指⽤户代理，会包含浏览器和操作系统等
信息标志。在 "冰蝎" 的早期版本存在 User-Agent 特例