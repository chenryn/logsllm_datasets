### 3.5.1 Employee Compensation Counting Example

The following PL/SQL block counts the number of employees based on their yearly compensation and prints the results.

```plsql
v_75K_100K := v_75K_100K + 1;
ELSE
v_ge_100K := v_ge_100K + 1;
END IF;
END LOOP;
CLOSE emp_cursor;

DBMS_OUTPUT.PUT_LINE('Number of employees by yearly compensation');
DBMS_OUTPUT.PUT_LINE('Less than 25,000 : ' || v_lt_25K);
DBMS_OUTPUT.PUT_LINE('25,000 - 49,999 : ' || v_25K_50K);
DBMS_OUTPUT.PUT_LINE('50,000 - 74,999 : ' || v_50K_75K);
DBMS_OUTPUT.PUT_LINE('75,000 - 99,999 : ' || v_75K_100K);
DBMS_OUTPUT.PUT_LINE('100,000 and over : ' || v_ge_100K);
END;
```

**Output:**
```
Number of employees by yearly compensation
Less than 25,000 : 2
25,000 - 49,999 : 5
50,000 - 74,999 : 6
75,000 - 99,999 : 0
100,000 and over : 1
```

---

### 3.5.2 RETURN Statement

The `RETURN` statement is used to terminate a function, procedure, or anonymous block and return control to the caller. There are two forms of the `RETURN` statement:

1. **Terminating a Procedure or Function with Void Return Type:**
   ```plsql
   RETURN;
   ```

2. **Returning a Value to the Caller:**
   ```plsql
   RETURN expression;
   ```
   The `expression` must evaluate to the same data type as the return type of the function.

**Example:**
```plsql
CREATE OR REPLACE FUNCTION emp_comp (
    p_sal NUMBER,
    p_comm NUMBER
) RETURN NUMBER
IS
BEGIN
    RETURN (p_sal + NVL(p_comm, 0)) * 24;
END emp_comp;
```

---

### 3.5.3 GOTO Statement

The `GOTO` statement causes the point of execution to jump to the statement with the specified label. The syntax is:
```plsql
GOTO label;
```

- **Labeling a Statement:**
  ```plsql
  <<label>> statement;
  ```

- **Restrictions:**
  - A `GOTO` statement cannot jump to a declaration.
  - A `GOTO` statement cannot transfer control to another function or procedure.
  - A label should not be placed at the end of a block, function, or procedure.

**Example:**
```plsql
CREATE OR REPLACE PROCEDURE verify_emp (
    p_empno NUMBER
)
IS
    v_ename emp.ename%TYPE;
    v_job emp.job%TYPE;
    v_hiredate emp.hiredate%TYPE;
BEGIN
    SELECT ename, job, hiredate
    INTO v_ename, v_job, v_hiredate
    FROM emp
    WHERE empno = p_empno;

    IF v_ename IS NULL THEN
        GOTO invalid_emp;
    END IF;

    IF v_job IS NULL THEN
        GOTO invalid_emp;
    END IF;

    IF v_hiredate IS NULL THEN
        GOTO invalid_emp;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Employee ' || p_empno || ' validated without errors.');
    RETURN;

<<invalid_emp>>
    DBMS_OUTPUT.PUT_LINE('Employee ' || p_empno || ' is not a valid employee.');
END;
```

---

### 3.5.4 CASE Expression

The `CASE` expression returns a value that is substituted where the `CASE` expression is located within an expression. There are two formats of the `CASE` expression: the selector `CASE` and the searched `CASE`.

#### 3.5.4.1 Selector CASE Expression

The selector `CASE` expression attempts to match an expression called the selector to the expression specified in one or more `WHEN` clauses.

**Syntax:**
```plsql
CASE selector-expression
    WHEN match-expression THEN result
    [ WHEN match-expression THEN result
      [ WHEN match-expression THEN result ] ...]
    [ ELSE result ]
END;
```

**Example:**
```plsql
DECLARE
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    v_deptno emp.deptno%TYPE;
    v_dname dept.dname%TYPE;
    CURSOR emp_cursor IS SELECT empno, ename, deptno FROM emp;
BEGIN
    OPEN emp_cursor;
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME DEPTNO DNAME');
    DBMS_OUTPUT.PUT_LINE('----- ------- ------ ----------');

    LOOP
        FETCH emp_cursor INTO v_empno, v_ename, v_deptno;
        EXIT WHEN emp_cursor%NOTFOUND;

        v_dname :=
            CASE v_deptno
                WHEN 10 THEN 'Accounting'
                WHEN 20 THEN 'Research'
                WHEN 30 THEN 'Sales'
                WHEN 40 THEN 'Operations'
                ELSE 'unknown'
            END;

        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) || ' ' || v_deptno || ' ' || v_dname);
    END LOOP;

    CLOSE emp_cursor;
END;
```

**Output:**
```
EMPNO ENAME DEPTNO DNAME
----- ------- ------ ----------
7369 SMITH 20 Research
7499 ALLEN 30 Sales
7521 WARD 30 Sales
7566 JONES 20 Research
7654 MARTIN 30 Sales
7698 BLAKE 30 Sales
7782 CLARK 10 Accounting
7788 SCOTT 20 Research
7839 KING 10 Accounting
7844 TURNER 30 Sales
7876 ADAMS 20 Research
7900 JAMES 30 Sales
7902 FORD 20 Research
7934 MILLER 10 Accounting
```

#### 3.5.4.2 Searched CASE Expression

A searched `CASE` expression uses one or more Boolean expressions to determine the resulting value to return.

**Syntax:**
```plsql
CASE
    WHEN boolean-expression THEN result
    [ WHEN boolean-expression THEN result
      [ WHEN boolean-expression THEN result ] ...]
    [ ELSE result ]
END;
```

**Example:**
```plsql
DECLARE
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    v_deptno emp.deptno%TYPE;
    v_dname dept.dname%TYPE;
    CURSOR emp_cursor IS SELECT empno, ename, deptno FROM emp;
BEGIN
    OPEN emp_cursor;
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME DEPTNO DNAME');
    DBMS_OUTPUT.PUT_LINE('----- ------- ------ ----------');

    LOOP
        FETCH emp_cursor INTO v_empno, v_ename, v_deptno;
        EXIT WHEN emp_cursor%NOTFOUND;

        v_dname :=
            CASE
                WHEN v_deptno = 10 THEN 'Accounting'
                WHEN v_deptno = 20 THEN 'Research'
                WHEN v_deptno = 30 THEN 'Sales'
                WHEN v_deptno = 40 THEN 'Operations'
                ELSE 'unknown'
            END;

        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) || ' ' || v_deptno || ' ' || v_dname);
    END LOOP;

    CLOSE emp_cursor;
END;
```

**Output:**
```
EMPNO ENAME DEPTNO DNAME
----- ------- ------ ----------
7369 SMITH 20 Research
7499 ALLEN 30 Sales
7521 WARD 30 Sales
7566 JONES 20 Research
7654 MARTIN 30 Sales
7698 BLAKE 30 Sales
7782 CLARK 10 Accounting
7788 SCOTT 20 Research
7839 KING 10 Accounting
7844 TURNER 30 Sales
7876 ADAMS 20 Research
7900 JAMES 30 Sales
7902 FORD 20 Research
7934 MILLER 10 Accounting
```

---

### 3.5.5 CASE Statement

The `CASE` statement executes a set of one or more statements when a specified search condition is TRUE. There are two formats of the `CASE` statement: the selector `CASE` and the searched `CASE`.

#### 3.5.5.1 Selector CASE Statement

The selector `CASE` statement attempts to match an expression called the selector to the expression specified in one or more `WHEN` clauses.

**Syntax:**
```plsql
CASE selector-expression
    WHEN match-expression THEN statements
    [ WHEN match-expression THEN statements
      [ WHEN match-expression THEN statements ] ...]
    [ ELSE statements ]
END CASE;
```

**Example:**
```plsql
DECLARE
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    v_deptno emp.deptno%TYPE;
    v_dname dept.dname%TYPE;
    v_loc dept.loc%TYPE;
    CURSOR emp_cursor IS SELECT empno, ename, deptno FROM emp;
BEGIN
    OPEN emp_cursor;
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME DEPTNO DNAME LOC');
    DBMS_OUTPUT.PUT_LINE('----- ------- ------ ---------- ---------');

    LOOP
        FETCH emp_cursor INTO v_empno, v_ename, v_deptno;
        EXIT WHEN emp_cursor%NOTFOUND;

        CASE v_deptno
            WHEN 10 THEN
                v_dname := 'Accounting';
                v_loc := 'New York';
            WHEN 20 THEN
                v_dname := 'Research';
                v_loc := 'Dallas';
            WHEN 30 THEN
                v_dname := 'Sales';
                v_loc := 'Chicago';
            WHEN 40 THEN
                v_dname := 'Operations';
                v_loc := 'Boston';
            ELSE
                v_dname := 'unknown';
                v_loc := '';
        END CASE;

        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) || ' ' || v_deptno || ' ' || RPAD(v_dname, 14) || ' ' || v_loc);
    END LOOP;

    CLOSE emp_cursor;
END;
```

**Output:**
```
EMPNO ENAME DEPTNO DNAME LOC
----- ------- ------ ---------- ---------
7369 SMITH 20 Research Dallas
7499 ALLEN 30 Sales Chicago
7521 WARD 30 Sales Chicago
7566 JONES 20 Research Dallas
7654 MARTIN 30 Sales Chicago
7698 BLAKE 30 Sales Chicago
7782 CLARK 10 Accounting New York
7788 SCOTT 20 Research Dallas
7839 KING 10 Accounting New York
7844 TURNER 30 Sales Chicago
7876 ADAMS 20 Research Dallas
7900 JAMES 30 Sales Chicago
7902 FORD 20 Research Dallas
7934 MILLER 10 Accounting New York
```

#### 3.5.5.2 Searched CASE Statement

A searched `CASE` statement uses one or more Boolean expressions to determine the resulting set of statements to execute.

**Syntax:**
```plsql
CASE
    WHEN boolean-expression THEN statements
    [ WHEN boolean-expression THEN statements
      [ WHEN boolean-expression THEN statements ] ...]
    [ ELSE statements ]
END CASE;
```

**Example:**
```plsql
-- Example code for a searched CASE statement
```

---

Copyright Â© 2007 - 2018 EnterpriseDB Corporation. All rights reserved.