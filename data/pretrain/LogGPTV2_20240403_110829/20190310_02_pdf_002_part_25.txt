v_75K_100K := v_75K_100K + 1;
ELSE
v_ge_100K := v_ge_100K + 1;
END IF;
END LOOP;
CLOSE emp_cursor;
DBMS_OUTPUT.PUT_LINE('Number of employees by yearly compensation');
DBMS_OUTPUT.PUT_LINE('Less than 25,000 : ' || v_lt_25K);
DBMS_OUTPUT.PUT_LINE('25,000 - 49,9999 : ' || v_25K_50K);
DBMS_OUTPUT.PUT_LINE('50,000 - 74,9999 : ' || v_50K_75K);
DBMS_OUTPUT.PUT_LINE('75,000 - 99,9999 : ' || v_75K_100K);
DBMS_OUTPUT.PUT_LINE('100,000 and over : ' || v_ge_100K);
END;
The following is the output from this program.
Number of employees by yearly compensation
Less than 25,000 : 2
25,000 - 49,9999 : 5
50,000 - 74,9999 : 6
75,000 - 99,9999 : 0
100,000 and over : 1
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 213
Database Compatibility for Oracle® Developers Guide
3.5.2 RETURN Statement
The RETURN statement terminates the current function, procedure or anonymous block
and returns control to the caller.
There are two forms of the RETURN Statement. The first form of the RETURN statement is
used to terminate a procedure or function that returns void. The syntax of the first form
is:
RETURN;
The second form of RETURN returns a value to the caller. The syntax of the second form
of the RETURN statement is:
RETURN expression;
expression must evaluate to the same data type as the return type of the function.
The following example uses the RETURN statement returns a value to the caller:
CREATE OR REPLACE FUNCTION emp_comp (
p_sal NUMBER,
p_comm NUMBER
) RETURN NUMBER
IS
BEGIN
RETURN (p_sal + NVL(p_comm, 0)) * 24;
END emp_comp;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 214
Database Compatibility for Oracle® Developers Guide
3.5.3 GOTO Statement
The GOTO statement causes the point of execution to jump to the statement with the
specified label. The syntax of a GOTO statement is:
GOTO label
label is a name assigned to an executable statement. label must be unique within the
scope of the function, procedure or anonymous block.
To label a statement, use the syntax:
> statement
statement is the point of execution that the program jumps to.
You can label assignment statements, any SQL statement (like INSERT, UPDATE,
CREATE, etc.) and selected procedural language statements. The procedural language
statements that can be labeled are:
 IF
 EXIT
 RETURN
 RAISE
 EXECUTE
 PERFORM
 GET DIAGNOSTICS
 OPEN
 FETCH
 MOVE
 CLOSE
 NULL
 COMMIT
 ROLLBACK
 GOTO
 CASE
 LOOP
 WHILE
 FOR
Please note that exit is considered a keyword, and cannot be used as the name of a label.
GOTO statements cannot transfer control into a conditional block or sub-block, but can
transfer control from a conditional block or sub-block.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 215
Database Compatibility for Oracle® Developers Guide
The following example verifies that an employee record contains a name, job description,
and employee hire date; if any piece of information is missing, a GOTO statement transfers
the point of execution to a statement that prints a message that the employee is not valid.
CREATE OR REPLACE PROCEDURE verify_emp (
p_empno NUMBER
)
IS
v_ename emp.ename%TYPE;
v_job emp.job%TYPE;
v_hiredate emp.hiredate%TYPE;
BEGIN
SELECT ename, job, hiredate
INTO v_ename, v_job, v_hiredate FROM emp
WHERE empno = p_empno;
IF v_ename IS NULL THEN
GOTO invalid_emp;
END IF;
IF v_job IS NULL THEN
GOTO invalid_emp;
END IF;
IF v_hiredate IS NULL THEN
GOTO invalid_emp;
END IF;
DBMS_OUTPUT.PUT_LINE('Employee ' || p_empno ||
' validated without errors.');
RETURN;
> DBMS_OUTPUT.PUT_LINE('Employee ' || p_empno ||
' is not a valid employee.');
END;
GOTO statements have the following restrictions:
 A GOTO statement cannot jump to a declaration.
 A GOTO statement cannot transfer control to another function or procedure.
 A label should not be placed at the end of a block, function or procedure.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 216
Database Compatibility for Oracle® Developers Guide
3.5.4 CASE Expression
The CASE expression returns a value that is substituted where the CASE expression is
located within an expression.
There are two formats of the CASE expression - one that is called a searched CASE and
the other that uses a selector.
3.5.4.1 Selector CASE Expression
The selector CASE expression attempts to match an expression called the selector to the
expression specified in one or more WHEN clauses. result is an expression that is type-
compatible in the context where the CASE expression is used. If a match is found, the
value given in the corresponding THEN clause is returned by the CASE expression. If there
are no matches, the value following ELSE is returned. If ELSE is omitted, the CASE
expression returns null.
CASE selector-expression
WHEN match-expression THEN
result
[ WHEN match-expression THEN
result
[ WHEN match-expression THEN
result ] ...]
[ ELSE
result ]
END;
match-expression is evaluated in the order in which it appears within the CASE
expression. result is an expression that is type-compatible in the context where the
CASE expression is used. When the first match-expression is encountered that equals
selector-expression, result in the corresponding THEN clause is returned as the
value of the CASE expression. If none of match-expression equals selector-
expression then result following ELSE is returned. If no ELSE is specified, the CASE
expression returns null.
The following example uses a selector CASE expression to assign the department name to
a variable based upon the department number.
DECLARE
v_empno emp.empno%TYPE;
v_ename emp.ename%TYPE;
v_deptno emp.deptno%TYPE;
v_dname dept.dname%TYPE;
CURSOR emp_cursor IS SELECT empno, ename, deptno FROM emp;
BEGIN
OPEN emp_cursor;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 217
Database Compatibility for Oracle® Developers Guide
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME DEPTNO DNAME');
DBMS_OUTPUT.PUT_LINE('----- ------- ------ ----------');
LOOP
FETCH emp_cursor INTO v_empno, v_ename, v_deptno;
EXIT WHEN emp_cursor%NOTFOUND;
v_dname :=
CASE v_deptno
WHEN 10 THEN 'Accounting'
WHEN 20 THEN 'Research'
WHEN 30 THEN 'Sales'
WHEN 40 THEN 'Operations'
ELSE 'unknown'
END;
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) ||
' ' || v_deptno || ' ' || v_dname);
END LOOP;
CLOSE emp_cursor;
END;
The following is the output from this program.
EMPNO ENAME DEPTNO DNAME
----- ------- ------ ----------
7369 SMITH 20 Research
7499 ALLEN 30 Sales
7521 WARD 30 Sales
7566 JONES 20 Research
7654 MARTIN 30 Sales
7698 BLAKE 30 Sales
7782 CLARK 10 Accounting
7788 SCOTT 20 Research
7839 KING 10 Accounting
7844 TURNER 30 Sales
7876 ADAMS 20 Research
7900 JAMES 30 Sales
7902 FORD 20 Research
7934 MILLER 10 Accounting
3.5.4.2 Searched CASE Expression
A searched CASE expression uses one or more Boolean expressions to determine the
resulting value to return.
CASE WHEN boolean-expression THEN
result
[ WHEN boolean-expression THEN
result
[ WHEN boolean-expression THEN
result ] ...]
[ ELSE
result ]
END;
boolean-expression is evaluated in the order in which it appears within the CASE
expression. result is an expression that is type-compatible in the context where the
CASE expression is used. When the first boolean-expression is encountered that
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 218
Database Compatibility for Oracle® Developers Guide
evaluates to TRUE, result in the corresponding THEN clause is returned as the value of
the CASE expression. If none of boolean-expression evaluates to true then result
following ELSE is returned. If no ELSE is specified, the CASE expression returns null.
The following example uses a searched CASE expression to assign the department name
to a variable based upon the department number.
DECLARE
v_empno emp.empno%TYPE;
v_ename emp.ename%TYPE;
v_deptno emp.deptno%TYPE;
v_dname dept.dname%TYPE;
CURSOR emp_cursor IS SELECT empno, ename, deptno FROM emp;
BEGIN
OPEN emp_cursor;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME DEPTNO DNAME');
DBMS_OUTPUT.PUT_LINE('----- ------- ------ ----------');
LOOP
FETCH emp_cursor INTO v_empno, v_ename, v_deptno;
EXIT WHEN emp_cursor%NOTFOUND;
v_dname :=
CASE
WHEN v_deptno = 10 THEN 'Accounting'
WHEN v_deptno = 20 THEN 'Research'
WHEN v_deptno = 30 THEN 'Sales'
WHEN v_deptno = 40 THEN 'Operations'
ELSE 'unknown'
END;
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) ||
' ' || v_deptno || ' ' || v_dname);
END LOOP;
CLOSE emp_cursor;
END;
The following is the output from this program.
EMPNO ENAME DEPTNO DNAME
----- ------- ------ ----------
7369 SMITH 20 Research
7499 ALLEN 30 Sales
7521 WARD 30 Sales
7566 JONES 20 Research
7654 MARTIN 30 Sales
7698 BLAKE 30 Sales
7782 CLARK 10 Accounting
7788 SCOTT 20 Research
7839 KING 10 Accounting
7844 TURNER 30 Sales
7876 ADAMS 20 Research
7900 JAMES 30 Sales
7902 FORD 20 Research
7934 MILLER 10 Accounting
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 219
Database Compatibility for Oracle® Developers Guide
3.5.5 CASE Statement
The CASE statement executes a set of one or more statements when a specified search
condition is TRUE. The CASE statement is a stand-alone statement in itself while the
previously discussed CASE expression must appear as part of an expression.
There are two formats of the CASE statement - one that is called a searched CASE and the
other that uses a selector.
3.5.5.1 Selector CASE Statement
The selector CASE statement attempts to match an expression called the selector to the
expression specified in one or more WHEN clauses. When a match is found one or more
corresponding statements are executed.
CASE selector-expression
WHEN match-expression THEN
statements
[ WHEN match-expression THEN
statements
[ WHEN match-expression THEN
statements ] ...]
[ ELSE
statements ]
END CASE;
selector-expression returns a value type-compatible with each match-
expression. match-expression is evaluated in the order in which it appears within
the CASE statement. statements are one or more SPL statements, each terminated by a
semi-colon. When the value of selector-expression equals the first match-
expression, the statement(s) in the corresponding THEN clause are executed and
control continues following the END CASE keywords. If there are no matches, the
statement(s) following ELSE are executed. If there are no matches and there is no ELSE
clause, an exception is thrown.
The following example uses a selector CASE statement to assign a department name and
location to a variable based upon the department number.
DECLARE
v_empno emp.empno%TYPE;
v_ename emp.ename%TYPE;
v_deptno emp.deptno%TYPE;
v_dname dept.dname%TYPE;
v_loc dept.loc%TYPE;
CURSOR emp_cursor IS SELECT empno, ename, deptno FROM emp;
BEGIN
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 220
Database Compatibility for Oracle® Developers Guide
OPEN emp_cursor;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME DEPTNO DNAME '
|| ' LOC');
DBMS_OUTPUT.PUT_LINE('----- ------- ------ ----------'
|| ' ---------');
LOOP
FETCH emp_cursor INTO v_empno, v_ename, v_deptno;
EXIT WHEN emp_cursor%NOTFOUND;
CASE v_deptno
WHEN 10 THEN v_dname := 'Accounting';
v_loc := 'New York';
WHEN 20 THEN v_dname := 'Research';
v_loc := 'Dallas';
WHEN 30 THEN v_dname := 'Sales';
v_loc := 'Chicago';
WHEN 40 THEN v_dname := 'Operations';
v_loc := 'Boston';
ELSE v_dname := 'unknown';
v_loc := '';
END CASE;
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) ||
' ' || v_deptno || ' ' || RPAD(v_dname, 14) || ' ' ||
v_loc);
END LOOP;
CLOSE emp_cursor;
END;
The following is the output from this program.
EMPNO ENAME DEPTNO DNAME LOC
----- ------- ------ ---------- ---------
7369 SMITH 20 Research Dallas
7499 ALLEN 30 Sales Chicago
7521 WARD 30 Sales Chicago
7566 JONES 20 Research Dallas
7654 MARTIN 30 Sales Chicago
7698 BLAKE 30 Sales Chicago
7782 CLARK 10 Accounting New York
7788 SCOTT 20 Research Dallas
7839 KING 10 Accounting New York
7844 TURNER 30 Sales Chicago
7876 ADAMS 20 Research Dallas
7900 JAMES 30 Sales Chicago
7902 FORD 20 Research Dallas
7934 MILLER 10 Accounting New York
3.5.5.2 Searched CASE statement
A searched CASE statement uses one or more Boolean expressions to determine the
resulting set of statements to execute.
CASE WHEN boolean-expression THEN
statements
[ WHEN boolean-expression THEN
statements