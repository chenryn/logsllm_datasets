currval($1::regclass);
$function$;
The multi-master replication system is created with the Replicate Publication Schema and
the Perform Initial Snapshot options selected when creating the additional master nodes,
mmrnode_b and mmrnode_c.
The resulting master nodes are shown in the xDB Replication Console. Note that the
Default Value property of the id column uses the mmr_sequence_nextval function.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 292
EDB Postgres Replication Server User’s Guide
Figure 6-27 – Publication table with MMR-ready sequence
The following INSERT commands are invoked on mmrnode_a:
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 1');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 2');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 3');
The following INSERT commands are invoked on mmrnode_b:
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_b - Row 1');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_b - Row 2');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_b - Row 3');
The following INSERT commands are invoked on mmrnode_c:
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_c - Row 1');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_c - Row 2');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_c - Row 3');
A synchronization replication is performed.
No uniqueness conflicts occur as a unique value is generated for the id primary key
column as shown by the following results on mmrnode_a:
mmrnode_a=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
-------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
9007199254740993 | mmrnode_b - Row 1
9007199254740994 | mmrnode_b - Row 2
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 293
EDB Postgres Replication Server User’s Guide
9007199254740995 | mmrnode_b - Row 3
13510798882111489 | mmrnode_c - Row 1
13510798882111490 | mmrnode_c - Row 2
13510798882111491 | mmrnode_c - Row 3
(9 rows)
The same query on mmrnode_b shows the same set of rows:
mmrnode_b=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
-------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
9007199254740993 | mmrnode_b - Row 1
9007199254740994 | mmrnode_b - Row 2
9007199254740995 | mmrnode_b - Row 3
13510798882111489 | mmrnode_c - Row 1
13510798882111490 | mmrnode_c - Row 2
13510798882111491 | mmrnode_c - Row 3
(9 rows)
The same results are present on mmrnode_c:
mmrnode_c=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
-------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
9007199254740993 | mmrnode_b - Row 1
9007199254740994 | mmrnode_b - Row 2
9007199254740995 | mmrnode_b - Row 3
13510798882111489 | mmrnode_c - Row 1
13510798882111490 | mmrnode_c - Row 2
13510798882111491 | mmrnode_c - Row 3
(9 rows)
6.6.6.3 Converting a Standard Sequence to an MMR-Ready Sequence
If you have an existing application with tables that use a standard sequence such as with
the SERIAL data type, these tables can be modified to use the MMR-ready sequence for
incorporation into a multi-master replication system.
The basic conversion process is the following:
 Update the sequence values in the existing rows with MMR-ready sequence
compatible values.
 Alter the column definition to be compatible with the MMR-ready sequence
including modification or addition of the DEFAULT clause to use the MMR-ready
sequence function to supply the default values for subsequent inserts.
To perform the conversion of existing sequence values, first, create the unique database
identifier as described in Step 1 of Section 6.6.6.1.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 294
EDB Postgres Replication Server User’s Guide
Use the following function to update the existing primary key and foreign key values that
are required to be converted.
CREATE OR REPLACE FUNCTION mmr_sequence_convert (
old_seq_value bigint
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
(SELECT current_setting('cluster.unique_db_id'))::bigint
<< 52)::bigint + $1;
$function$;
The function input argument is the old sequence value and the function returns the new
MMR-ready sequence value.
The function input and return arguments are data type BIGINT so the existing sequence
columns must be altered accordingly before using the function.
Finally, the sequence columns must include the clauses BIGINT NOT NULL DEFAULT
mmr_sequence_nextval('seq_name') to supply MMR-ready sequence values for
future inserts.
See Section 6.6.6.1 for information on creating the objects required for an MMR-ready
sequence.
6.6.6.4 Conversion to an MMR-Ready Sequence Example
This section describes a basic example of how two tables with standard sequences used as
primary keys as well as a parent-child relationship by a foreign key constraint can be
converted to use the MMR-ready sequence, then employed in a multi-master replication
system.
The tables are defined as follows:
CREATE TABLE mmr_seq_tbl (
id SERIAL PRIMARY KEY,
field VARCHAR2(20)
);
CREATE TABLE mmr_seq_child_tbl (
id SERIAL PRIMARY KEY,
field VARCHAR2(20),
parent_id INTEGER CONSTRAINT mmr_seq_tbl_fk
REFERENCES mmr_seq_tbl(id)
);
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 295
EDB Postgres Replication Server User’s Guide
Note the foreign key constraint between columns mmr_seq_child_tbl.parent_id
and mmr_seq_tbl.id.
The tables are populated with an initial set of rows:
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 1');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 2');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 3');
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 1-1', 1);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 1-2', 1);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 2-1', 2);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 2-2', 2);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 3-1', 3);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 3-2', 3);
The resulting table content is the following:
edb=# SELECT * FROM mmr_seq_tbl;
id | field
----+-------------------
1 | mmrnode_a - Row 1
2 | mmrnode_a - Row 2
3 | mmrnode_a - Row 3
(3 rows)
edb=# SELECT * FROM mmr_seq_child_tbl;
id | field | parent_id
----+---------------------+-----------
1 | mmrnode_a - Row 1-1 | 1
2 | mmrnode_a - Row 1-2 | 1
3 | mmrnode_a - Row 2-1 | 2
4 | mmrnode_a - Row 2-2 | 2
5 | mmrnode_a - Row 3-1 | 3
6 | mmrnode_a - Row 3-2 | 3
(6 rows)
Prior to performing the conversion, obtain the current, maximum sequence value of the
sequence to be converted to an MMR-ready sequence. In this example the value is 6 as
seen in the id column of table mmr_seq_child_tbl.
This value is needed to set a newly created sequence that is to be used for the MMR-
ready sequence, to a large enough starting value to avoid uniqueness conflict with the
converted sequence values of the existing rows.
Converting Existing Standard Sequence Values
In order to convert the existing sequence values in columns mmr_seq_tbl.id,
mmr_seq_child_tbl.id, and mmr_seq_child_tbl.parent_id the following steps
are performed.
Permit deferred updates to the foreign key constraint.
ALTER TABLE mmr_seq_child_tbl ALTER CONSTRAINT mmr_seq_tbl_fk DEFERRABLE
INITIALLY DEFERRED;
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 296
EDB Postgres Replication Server User’s Guide
Create the function to perform the sequence conversion.
CREATE OR REPLACE FUNCTION mmr_sequence_convert (
old_seq_value bigint
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
(SELECT current_setting('cluster.unique_db_id'))::bigint
<< 52)::bigint + $1;
$function$;
Change the sequence columns to data type BIGINT so they are large enough for the
MMR-ready sequence.
ALTER TABLE mmr_seq_tbl ALTER COLUMN id SET DATA TYPE BIGINT;
ALTER TABLE mmr_seq_child_tbl ALTER COLUMN id SET DATA TYPE BIGINT;
ALTER TABLE mmr_seq_child_tbl ALTER COLUMN parent_id SET DATA TYPE BIGINT;
Set the unique database identifier to be used by the MMR-ready sequence.
ALTER DATABASE mmrnode_a SET cluster.unique_db_id TO 1;
SET cluster.unique_db_id TO 1;
Update the primary key and foreign key values with the mmr_sequence_convert
function.
The updates affecting the foreign key constraint must be performed within the same
transaction to avoid a foreign key violation error.
BEGIN TRANSACTION;
UPDATE mmr_seq_tbl SET id = mmr_sequence_convert (id);
UPDATE mmr_seq_child_tbl SET parent_id = mmr_sequence_convert (parent_id);
UPDATE mmr_seq_child_tbl SET id = mmr_sequence_convert (id);
COMMIT;
Reset the foreign key constraint back to its original setting – for example:
ALTER TABLE mmr_seq_child_tbl ALTER CONSTRAINT mmr_seq_tbl_fk NOT DEFERRABLE;
After the conversion to the MMR-ready sequence, the table content is as follows:
edb=# SELECT * FROM mmr_seq_tbl;
id | field
------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
(3 rows)
edb=# SELECT * FROM mmr_seq_child_tbl;
id | field | parent_id
------------------+---------------------+------------------
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 297
EDB Postgres Replication Server User’s Guide
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
(6 rows)
The parent-child foreign key relationship between columns
mmr_seq_child_tbl.parent_id and mmr_seq_tbl.id is maintained.
The primary key id values incorporate the old sequence values, but are increased by the
addition of the 52-bit shifted, database identifier value.
Setting Up the MMR-Ready Sequence
The steps as described in Section 6.6.6.1 are now performed on the databases to be used
as master nodes.
For database mmrnode_a that contains the converted tables, a new sequence is created
with a starting value of 7 to avoid a primary key uniqueness conflict with the existing
rows. In the original tables, the maximum used sequence value was 6.
When a sequence number is transformed to an MMR-ready sequence value, the same
result is returned if the same database identifier is used with the same original number.
CREATE SEQUENCE mmr_seq START WITH 7 INCREMENT BY 1 NO CYCLE;
Create the function to return the MMR-ready sequence value.
CREATE OR REPLACE FUNCTION mmr_sequence_nextval (
seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
(SELECT current_setting('cluster.unique_db_id'))::bigint
<< 52)::bigint +
nextval($1::regclass);
$function$;
Alter the primary key columns to use the function to return the default value.
ALTER TABLE mmr_seq_tbl ALTER COLUMN id SET DEFAULT mmr_sequence_nextval('mmr_seq');
ALTER TABLE mmr_seq_child_tbl ALTER COLUMN id SET DEFAULT
mmr_sequence_nextval('mmr_seq');
Repeat the MMR-ready sequence setup process for the other master nodes.
ALTER DATABASE mmrnode_b SET cluster.unique_db_id TO 2;
SET cluster.unique_db_id TO 2;
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 298
EDB Postgres Replication Server User’s Guide
CREATE SEQUENCE mmr_seq START WITH 1 INCREMENT BY 1 NO CYCLE;
CREATE OR REPLACE FUNCTION mmr_sequence_nextval (
seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
(SELECT current_setting('cluster.unique_db_id'))::bigint
<< 52)::bigint +
nextval($1::regclass);
$function$;
Repeat the process for mmrnode_c.
ALTER DATABASE mmrnode_c SET cluster.unique_db_id TO 3;
SET cluster.unique_db_id TO 3;
CREATE SEQUENCE mmr_seq START WITH 1 INCREMENT BY 1 NO CYCLE;
CREATE OR REPLACE FUNCTION mmr_sequence_nextval (
seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
(SELECT current_setting('cluster.unique_db_id'))::bigint
<< 52)::bigint +
nextval($1::regclass);
$function$;
Tables After Initial Multi-Master Replication System Creation
The multi-master replication system is created using databases mmrnode_a, mmrnode_b,
and mmrnode_c in a similar manner as described in Section 6.6.6.2.
After the system is created with the initial snapshot, mmrnode_a, mmrnode_b, and
mmrnode_c all contain identical content. The following is the table content:
mmrnode_a=# SELECT * FROM mmr_seq_tbl;
id | field
------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
(3 rows)
mmrnode_a=# SELECT * FROM mmr_seq_child_tbl;
id | field | parent_id
------------------+---------------------+------------------
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 299
EDB Postgres Replication Server User’s Guide
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
(6 rows)
Subsequent Row Insertions and Synchronization
The following rows are inserted on mmrnode_a:
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 4');
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 4-
1', 4503599627370503);
mmrnode_a=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
4503599627370503 | mmrnode_a - Row 4
(4 rows)