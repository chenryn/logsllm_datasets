### Multi-Master Replication System Setup

The multi-master replication system is created with the "Replicate Publication Schema" and "Perform Initial Snapshot" options selected when adding the additional master nodes, `mmrnode_b` and `mmrnode_c`. The resulting master nodes are displayed in the xDB Replication Console. Note that the `id` column's "Default Value" property uses the `mmr_sequence_nextval` function.

#### Copyright Information
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 292
EDB Postgres Replication Server User’s Guide

### Example: Publication Table with MMR-Ready Sequence

The following `INSERT` commands are executed on `mmrnode_a`:
```sql
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 1');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 2');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 3');
```

The following `INSERT` commands are executed on `mmrnode_b`:
```sql
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_b - Row 1');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_b - Row 2');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_b - Row 3');
```

The following `INSERT` commands are executed on `mmrnode_c`:
```sql
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_c - Row 1');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_c - Row 2');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_c - Row 3');
```

After performing a synchronization replication, no uniqueness conflicts occur as unique values are generated for the `id` primary key column, as shown by the following results on `mmrnode_a`:
```sql
mmrnode_a=# SELECT * FROM mmr_seq_tbl ORDER BY id;
 id | field
-------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
9007199254740993 | mmrnode_b - Row 1
9007199254740994 | mmrnode_b - Row 2
9007199254740995 | mmrnode_b - Row 3
13510798882111489 | mmrnode_c - Row 1
13510798882111490 | mmrnode_c - Row 2
13510798882111491 | mmrnode_c - Row 3
(9 rows)
```

The same query on `mmrnode_b` and `mmrnode_c` shows the same set of rows.

### Converting a Standard Sequence to an MMR-Ready Sequence

If you have an existing application with tables using a standard sequence such as `SERIAL`, these tables can be modified to use the MMR-ready sequence for incorporation into a multi-master replication system. The basic conversion process includes:

1. **Update the sequence values** in the existing rows with MMR-ready sequence compatible values.
2. **Alter the column definition** to be compatible with the MMR-ready sequence, including modifying or adding the `DEFAULT` clause to use the MMR-ready sequence function for subsequent inserts.

To perform the conversion of existing sequence values, first, create the unique database identifier as described in Section 6.6.6.1.

Use the following function to update the existing primary key and foreign key values that need to be converted:
```sql
CREATE OR REPLACE FUNCTION mmr_sequence_convert (
    old_seq_value bigint
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
    (SELECT current_setting('cluster.unique_db_id'))::bigint
    << 52
)::bigint + $1;
$function$;
```

The function input argument is the old sequence value, and it returns the new MMR-ready sequence value. The function input and return arguments are of data type `BIGINT`, so the existing sequence columns must be altered accordingly before using the function.

Finally, the sequence columns must include the clauses `BIGINT NOT NULL DEFAULT mmr_sequence_nextval('seq_name')` to supply MMR-ready sequence values for future inserts.

### Conversion to an MMR-Ready Sequence Example

This section describes a basic example of converting two tables with standard sequences used as primary keys and a parent-child relationship via a foreign key constraint to use the MMR-ready sequence, then employing them in a multi-master replication system.

#### Table Definitions
```sql
CREATE TABLE mmr_seq_tbl (
    id SERIAL PRIMARY KEY,
    field VARCHAR2(20)
);

CREATE TABLE mmr_seq_child_tbl (
    id SERIAL PRIMARY KEY,
    field VARCHAR2(20),
    parent_id INTEGER CONSTRAINT mmr_seq_tbl_fk REFERENCES mmr_seq_tbl(id)
);
```

Note the foreign key constraint between `mmr_seq_child_tbl.parent_id` and `mmr_seq_tbl.id`.

#### Populating Tables
```sql
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 1');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 2');
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 3');

INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 1-1', 1);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 1-2', 1);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 2-1', 2);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 2-2', 2);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 3-1', 3);
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 3-2', 3);
```

#### Resulting Table Content
```sql
edb=# SELECT * FROM mmr_seq_tbl;
 id | field
----+-------------------
  1 | mmrnode_a - Row 1
  2 | mmrnode_a - Row 2
  3 | mmrnode_a - Row 3
(3 rows)

edb=# SELECT * FROM mmr_seq_child_tbl;
 id | field | parent_id
----+---------------------+-----------
  1 | mmrnode_a - Row 1-1 | 1
  2 | mmrnode_a - Row 1-2 | 1
  3 | mmrnode_a - Row 2-1 | 2
  4 | mmrnode_a - Row 2-2 | 2
  5 | mmrnode_a - Row 3-1 | 3
  6 | mmrnode_a - Row 3-2 | 3
(6 rows)
```

#### Converting Existing Standard Sequence Values

1. **Permit deferred updates** to the foreign key constraint:
   ```sql
   ALTER TABLE mmr_seq_child_tbl ALTER CONSTRAINT mmr_seq_tbl_fk DEFERRABLE INITIALLY DEFERRED;
   ```

2. **Create the function** to perform the sequence conversion:
   ```sql
   CREATE OR REPLACE FUNCTION mmr_sequence_convert (
       old_seq_value bigint
   )
   RETURNS bigint
   LANGUAGE sql
   AS
   $function$
   SELECT (
       (SELECT current_setting('cluster.unique_db_id'))::bigint
       << 52
   )::bigint + $1;
   $function$;
   ```

3. **Change the sequence columns** to data type `BIGINT`:
   ```sql
   ALTER TABLE mmr_seq_tbl ALTER COLUMN id SET DATA TYPE BIGINT;
   ALTER TABLE mmr_seq_child_tbl ALTER COLUMN id SET DATA TYPE BIGINT;
   ALTER TABLE mmr_seq_child_tbl ALTER COLUMN parent_id SET DATA TYPE BIGINT;
   ```

4. **Set the unique database identifier** to be used by the MMR-ready sequence:
   ```sql
   ALTER DATABASE mmrnode_a SET cluster.unique_db_id TO 1;
   SET cluster.unique_db_id TO 1;
   ```

5. **Update the primary key and foreign key values** with the `mmr_sequence_convert` function within the same transaction:
   ```sql
   BEGIN TRANSACTION;
   UPDATE mmr_seq_tbl SET id = mmr_sequence_convert(id);
   UPDATE mmr_seq_child_tbl SET parent_id = mmr_sequence_convert(parent_id);
   UPDATE mmr_seq_child_tbl SET id = mmr_sequence_convert(id);
   COMMIT;
   ```

6. **Reset the foreign key constraint** back to its original setting:
   ```sql
   ALTER TABLE mmr_seq_child_tbl ALTER CONSTRAINT mmr_seq_tbl_fk NOT DEFERRABLE;
   ```

#### After Conversion

The table content after the conversion is as follows:
```sql
edb=# SELECT * FROM mmr_seq_tbl;
 id | field
------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
(3 rows)

edb=# SELECT * FROM mmr_seq_child_tbl;
 id | field | parent_id
------------------+---------------------+------------------
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
(6 rows)
```

#### Setting Up the MMR-Ready Sequence

1. **For database `mmrnode_a`**, create a new sequence with a starting value of 7 to avoid a primary key uniqueness conflict with the existing rows:
   ```sql
   CREATE SEQUENCE mmr_seq START WITH 7 INCREMENT BY 1 NO CYCLE;
   ```

2. **Create the function** to return the MMR-ready sequence value:
   ```sql
   CREATE OR REPLACE FUNCTION mmr_sequence_nextval (
       seq_id VARCHAR
   )
   RETURNS bigint
   LANGUAGE sql
   AS
   $function$
   SELECT (
       (SELECT current_setting('cluster.unique_db_id'))::bigint
       << 52
   )::bigint + nextval($1::regclass);
   $function$;
   ```

3. **Alter the primary key columns** to use the function to return the default value:
   ```sql
   ALTER TABLE mmr_seq_tbl ALTER COLUMN id SET DEFAULT mmr_sequence_nextval('mmr_seq');
   ALTER TABLE mmr_seq_child_tbl ALTER COLUMN id SET DEFAULT mmr_sequence_nextval('mmr_seq');
   ```

4. **Repeat the MMR-ready sequence setup process** for the other master nodes, `mmrnode_b` and `mmrnode_c`.

#### Tables After Initial Multi-Master Replication System Creation

The multi-master replication system is created using databases `mmrnode_a`, `mmrnode_b`, and `mmrnode_c` in a similar manner as described in Section 6.6.6.2. After the system is created with the initial snapshot, all three nodes contain identical content.

#### Subsequent Row Insertions and Synchronization

The following rows are inserted on `mmrnode_a`:
```sql
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_a - Row 4');
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_a - Row 4-1', 4503599627370503);
```

The updated table content on `mmrnode_a` is:
```sql
mmrnode_a=# SELECT * FROM mmr_seq_tbl ORDER BY id;
 id | field
------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
4503599627370503 | mmrnode_a - Row 4
(4 rows)
```

### Conclusion

This guide provides a detailed step-by-step process for converting standard sequences to MMR-ready sequences and integrating them into a multi-master replication system. By following these steps, you can ensure that your application is ready for multi-master replication without encountering uniqueness conflicts.