下面，让我们在 `class  John said hello.
```
在 `class` 上下文中使用 `self` 时，引用的对象是该类本身，因此，我们可以使用 `class  John said hello.
```
同样，只要是在 `class` 上下文中，这种形式下也可以像下面的例子那样使用 `self`。
```ruby
class HelloWorld
  def self.hello(name)
    puts "#{name} said hello."
  end
end
```
> `class  "1.0"
```
**类变量**
以 `@@` 开头的变量称为类变量。类变量是该类所有实例的共享变量，这一点与常量类似，不同的是我们可以多次修改类变量的值。另外，与实例变量一样，从类的外部访问类变量时也需要存取器。不过，由于 `attr_accessor` 等存取器都不能使用，因此需要直接定义。
```ruby
class HelloCount
  @@count = 0           # 调用hello 方法的次数
  def HelloCount.count  # 读取调用次数的类方法
    @@count
  end
  def initialize(myname="Ruby")
    @name = myname
  end
  def hello
    @@count += 1        # 累加调用次数
    puts "Hello, world. I am #{@name}.\n"
  end
end
bob = HelloCount.new("Bob")
alice = HelloCount.new("Alice")
ruby = HelloCount.new
p HelloCount.count      #=> 0
bob.hello
alice.hello
ruby.hello
p HelloCount.count      #=> 3
```
**限制方法的调用**
到目前为止，我们定义的方法，都能作为实例方法被任意调用，但是有时候我们可能并不希望这样。例如，只是为了汇总多个方法的共同处理而定义的方法，一般不会公开给外部使用。
Ruby 提供了 3 种方法的访问级别，我们可以按照需要来灵活调整。
- `public` ……以实例方法的形式向外部公开该方法
- `private` ……在指定接收者的情况下不能调用该方法（只能使用缺省接收者的方式调用该方法，因此无法从实例的外部访问）
- `protected` ……在同一个类中时可将该方法作为实例方法调用
在修改方法的访问级别时，我们会为这 3 个关键字指定表示方法名的符号。
首先来看看使用 `public` 和 `private` 的例子
```ruby
class AccTest
  def pub
    puts "pub is a public method."
  end
  public :pub   # 把pub 方法设定为public（可省略）
  def priv
    puts "priv is a private method."
  end
  private :priv # 把priv 方法设定为private
end
acc = AccTest.new
acc.pub
acc.priv
```
`AccTest` 类的两个方法中，`pub` 方法可以正常调用，但是在调用 `priv` 方法时程序会发生异常，并出现以下错误信息 :
```
> ruby acc_test.rb
pub is a public method.
acc_test.rb:17:in `': private method `priv' called for
# (NoMethodError)
```
希望统一定义多个方法的访问级别时，可以使用下面的语法 :
```ruby
class AccTest
  public # 不指定参数时，
         # 以下的方法都被定义为public
  def pub
    puts "pub is a public method."
  end
  private # 以下的方法都被定义为private
  def priv
    puts "priv is a private method."
  end
end
```
> 没有指定访问级别的方法默认为 `public`，但 `initialize` 方法是个例外，它通常会被定义为 `private`。
定义为 `protected` 的方法，在同一个类（及其子类）中可作为实例方法使用，而在除此以外的地方则无法使用。
```ruby
class Point
  attr_accessor :x, :y   # 定义存取器
  protected :x=, :y=     # 把x= 与y= 设定为protected
  def initialize(x=0.0, y=0.0)
    @x, @y = x, y
  end
  def swap(other)        # 交换x、y 值的方法
    tmp_x, tmp_y = @x, @y
    @x, @y = other.x, other.y
    other.x, other.y = tmp_x, tmp_y   # 在同一个类中
                                      # 可以被调用
    return self
  end
end
p0 = Point.new
p1 = Point.new(1.0, 2.0)
p [ p0.x, p0.y ]         #=> [0.0, 0.0]
p [ p1.x, p1.y ]         #=> [1.0, 2.0]
p0.swap(p1)
p [ p0.x, p0.y ]         #=> [1.0, 2.0]
p [ p1.x, p1.y ]         #=> [0.0, 0.0]
p0.x = 10.0              #=> 错误（NoMethodError）
```
定义了拥有 X、Y 坐标的 `Point` 类。在这个类中，实例中的坐标可以被外部读取，但不能被修改。为此，我们可以利用 `protected` 来实现交换两个坐标值的方法 `swap`。
# 扩展类
**在原有类的基础上添加方法**
Ruby 允许我们在已经定义好的类中添加方法。下面，我们来试试给 `String` 类添加一个计算字符串单词数的实例方法 `count_word`
```ruby
class String
  def count_word
    ary = self.split(/\s+/) # 用空格分割接收者
    return ary.size         # 返回分割后的数组的元素总数
  end
end
str = "Just Another Ruby Newbie"
p str.count_word            #=> 4
```
**继承**
利用继承，我们可以在不对已有的类进行修改的前提下，通过增加新功能或重定义已有功能等手段来创建新的类。
定义继承时，在使用 `class` 关键字指定类名的同时指定父类名。
```ruby
class 类名 "土"
p wday[11]  #=> "木"
p wday[15]  #=> "月"
p wday[-1]  #=> "土"
```
创建一个继承了 `Array` 类的 `RingArray` 类。`RingArray` 类只是重定义了读取数组内容时使用的 `[]` 运算符。该程序通过 `super` 关键字调用父类中同名的方法（在本例中也就是 `Array#[]`）。
对 `RingArray` 类指定了超过数组长度的索引时，结果就会从溢出部分的开头开始重新计算索引
利用继承，我们可以把共同的功能定义在父类，把各自独有的功能定义在子类。
定义类时没有指定父类的情况下，Ruby 会默认该类为 `Object` 类的子类。
`Object` 类提供了许多便于实际编程的方法。但在某些情况下，我们也有可能会希望使用更轻量级的类，而这时就可以使用 `BasicObject` 类。
`BasicObject` 类只提供了组成 Ruby 对象所需的最低限度的方法。类对象调用 `instance_methods` 方法后，就会以符号的形式返回该类的实例方法列表。下面我们就用这个方法来对比一下 `Object` 类和 `BasicObject` 类的实例方法。
```ruby
> irb --simple-prompt
>> Object.instance_methods
=> [:nil?, :===, :=~, :!~, :eql?, :hash, :, :class, :singleton_class, :clone,
:dup, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze,
:frozen?, :to_s, ...... 等众多方法名......]