cam_ife_mgr_acuire_hw
cam_sensor_core_power_up
msm_camera_power_down
Basic
blocks
disabled
by Talos
141
2
2
91
37
785
71
109
52
Basic blocks
disabled by Talos
& covered by
bowknots
129
2
2
82
35
459
45
67
32
Table 5: Bowknots vs. code disabling (Talos) for fuzzing.
our approach in improving the fuzzing efﬁciency with Talos.
To do this, we apply Talos to buggy functions in our fuzzing
experiments. Our analysis shows that Talos, as a result, dis-
ables a large number of basic blocks, effectively lowering the
code coverage. Moreover, our analysis shows that bowknots,
when applied to the kernel, allow the fuzzer to cover a large
part of the basic blocks that Talos disables. Table 5 shows the
results. The results are insightful. Talos’ approach disables the
code unconditionally resulting in disabling 1290 basic blocks
overall. However, bowknots only undo the syscall when they
are triggered. Therefore, they allow the code to be executed
with good inputs, i.e., those that do not result in triggering
the bug. This proves to be critical for achieving good code
coverage when fuzzing. As a result, bowknots help cover 66%
of the basic blocks disabled by Talos.
Faster and more effective bug detection. By eliminating
reboots with bowknots, we manage to ﬁnd bugs faster. Fig-
ure 8 shows the list of all the bugs found in the two drivers. It
shows on average the time it takes to ﬁnd the bug in drivers
with and without bowknots. As the results show, bowknots
help us ﬁnd all these bugs faster. On average, we ﬁnd the same
bugs faster by 42.6 minutes. This speed-up varies between 6
minutes to 162 minutes for different bugs.
USENIX Association
30th USENIX Security Symposium    2393
 0 1 2 3 4 5 6N. 5X Cam.Pixel3 Cam.Total executed programs (millions)Unmodified driverDriver with bowknots0246810N. 5X Cam.Pixel3 Cam.Covered basic blocks (Hundreds)11.64%14.38%12.70%23.52%Unmodified driverDriver with bowknots 0 100 200 300 400 500 600 1 2 3 4 5 6 7 8 9Detection time (minutes)Unmodified driverDriver with bowknots8 Other Related Work
Automatic fault recovery. FGFT provides ﬁne-grained re-
covery for faults in device drivers [21]. To do so, it check-
points the memory and I/O device state on select entry points
and restores them when a fault is detected. FGFT’s key tech-
nique is to checkpoint and restore device state using existing
power management code in device drivers. There are two
important limitations that make this solution unsuitable to
be used as a generic kernel bug workaround solution. First,
checkpointing the state of an I/O device using power manage-
ment facilities is not feasible for all I/O devices. In fact, some
of the devices that we tested in our evaluation (e.g., the cam-
era of Nexus 5X smartphone) do not support this. Moreover,
a checkpointing solution for the kernel memory is difﬁcult to
integrate into existing kernels. Virtual machine checkpointing
exists; however, that does not apply to the kernels of real sys-
tems. Second, checkpointing the state of the system before
every syscall is costly.
ASSURE uses rescue points for automatic recovery from
faults in an application [39]. Rescue points are sites within
an application that handle known errors. When faced with an
unknown error, ASSURE restores the state of the application
to a suitable and close rescue point, which then returns an
error. However, ASSURE requires checkpointing the state at
rescue points, which is expensive for syscalls and not feasible
for all the hardware state.
Akeso uses recovery domains to undo a syscall or interrupt
upon a fault [24]. Recovery domains log modiﬁcations to the
kernel state and commit only upon successful execution. This
allows the domains to undo the effects when facing a fault.
Similar to Hecaton, Akeso can undo a syscall that ends up in
a bug trigger. However, Akeso’s approach is not suitable for
a bug workaround either. First, Akeso has signiﬁcant perfor-
mance overhead (1.08× to 5.6×). Second, Akeso does not
support “code that write directly to external devices”, which
includes important parts of device drivers.
RCV automatically recovers from null pointer dereference
and divide-by-zero errors [27]. It does so by handling the
corresponding signals, repairs the execution by performing
a default operation (e.g., return zero to a read from a zero
address), monitors the effects of the repair in order to contain
its effects within the application process, and detaches from
the application when the effects are ﬂushed. RCV is suitable
for deployed applications as it helps them survive otherwise
fail-stop errors. However, it does change the behavior of the
application (even if slightly) and hence is not appropriate as a
workaround solution.
Input ﬁltering. Another possible approach to work around
a bug in the kernel is to ﬁlter those syscalls that trigger it.
For example, VSEF uses execution-based ﬁlters to detect and
then prevent exploits of a known vulnerability [29]. Sweeper
monitors the execution of programs to detect attacks, analyzes
the attack, deploys an antibody to prevent future exploits, and
recovers the execution using the checkpoint/restore mecha-
nism [43]. Vigilante generates a ﬁlter for preventing worms
from exploiting vulnerable services [16]. However, there are
important limitations for this approach to be used as a bug
workaround. First, evaluating every syscall against a ﬁlter
causes performance overhead. Second, discovering the exact
condition and inputs under which a syscall triggers a bug is
challenging. Third, there is currently no syscall ﬁltering so-
lution that can perform complex checks on the syscall input.
Seccomp provides kernel syscall ﬁltering but does not allow
to maintain any state nor does it allow to check the arguments
passed in memory.
Automated patching. The goal of this line of work is to gen-
erate a correct patch for a bug automatically. Recent efforts
do so by using simulated genetic processes to ﬁx program
faults [46], leveraging static analysis to patch race condi-
tions [20], policing invariants to curb heap buffer overﬂows
and control ﬂow hijacks [33], utilizing the semantic analysis
of test suites to correct program states [30], and using code
annotations (contracts) to generate patch candidates [45]. In
contrast, we focus on a workaround for a bug. Our goal is
not to properly patch the bug, rather to provide a temporary
solution until a patch is ready. Hence, our work is orthogonal
to this line of work.
Hot-patching is a method for changing the behavior of bina-
ries at runtime, commonly used for delivering patches without
the need to reboot [41]. Linux kernel and kernel extensions
implement hot-patching by modifying the impacted functions
and redirecting the execution ﬂows [3] [2]. Recently, the ur-
gent need for delivering security patches to fragmented An-
droid devices has become a hot research topic. KARMA [15],
VULMET [47], Instaguard [14], and Embroidery [48] extract
rules and speciﬁcations from existing patches, and generate
hot-patches for the fragmented Android kernel or user space
binaries that are poorly maintained. These hot-patching mech-
anisms work assuming that the patches are available. In con-
trast, a workaround tries to mitigate a bug before a patch is
available. Hence, our work is orthogonal to this line of work.
Error handling analysis. Several efforts have attempted
to identify defective error handlers. For example, CheQ [28]
locates security checks and error handlers in the kernel by
searching certain patterns, and leverages this information to
catch unhandled errors and other bugs. APEx [22] identi-
ﬁes the error handlers based on the characteristics of error
paths. EPEx [19] symbolically executes the test programs
and explores error paths to ﬁnd the mishandled exceptions.
ErrDoc [42] leverages both symbolic execution and func-
tion pair matching to identify error handlers, and it automat-
ically detects and then ﬁxes incorrect or missing handlers.
Hector [35] walks the control graph to identify the miss-
ing release statements in the error handlers based on a list
of acquisition-release function pairs. EIO [17] and Rubio-
González, et al. [34] present a method that uses data-ﬂow
analysis to detect unchecked errors as they propagate in the
2394    30th USENIX Security Symposium
USENIX Association
ﬁle system code.
Hecaton identiﬁes function pairs using a method similar to
PF-Miner [26] and ErrDoc [42], which utilize string matching
and path heuristics. However, there are two differences. First,
PF-ﬁnder uses Longest Common Substring (LCS) as a metric
as opposed to Hecaton’s string similarity score discussed in
§5.1. Second, PF-ﬁnder discards the paired functions with
the exact same name, which can result in errors. For example,
regulator_set_voltage function is used to both turn on
and turn off a device.
9 Other Limitations
Undetected corruptions. Bowknots’ effectiveness depends
on catching the errors before they corrupt the system and undo
the effect of the system call that causes the error. In some
cases, a crash as a result of a bug (e.g., out of bound write/read
to/from a non-allocated address) triggers the execution of
bowknots. However, in cases that the same bug does not result
in a crash, bowknots rely on kernel sanitizers (e.g., KASAN)
to catch the error before it corrupts the kernel. In cases where
there is no crash, kernel sanitizers do not catch the error, or
they are not enabled in the kernel for performance reasons, the
analyst needs to provide the check for triggering the bowknot,
otherwise the bowknots might not be secure and effective.
Bugs in clean-up paths. Bowknots are workarounds for
bugs designed based on the idea of undoing the effect of
partially executed syscalls. However, undoing the effect of
syscalls that are themselves designed for clean-up is not pos-
sible. Consider a syscall designed to destroy a few kernel
objects and free all the allocated memories. If a crash happens
in the middle of this syscall, where half of the kernel objects
are destroyed, no bowknot could re-create the exact objects
and undo the effect of this partially executed syscall. We stud-
ied the latest 100 bugs of Linux upstream kernel reported by
Syzbot (as of October 2020). Our study showed that 28% of
the bugs are located in clean-up paths and hence were not
amenable to bowknots.
10 Conclusions
We presented workarounds for kernel bugs, called bowknots,
which undo the in-ﬂight syscall that triggers a bug. Bowknots
maintain the functionality of the system even when bugs
are triggered, are applicable to many kernel bugs, do not
cause noticeable performance overhead, and have a small
kernel footprint. Moreover, to simplify bowknots generation,
we introduced Hecaton, a static analysis tool that generates
bowknots automatically. Our evaluations show that bowknots
are effective in mitigating bugs and security vulnerabilities
and preserve the system functionality in most cases. More-
over, bowknots generated by Hecaton are complete in 64.6%
of the cases.
Acknowledgments
The work was supported in part by NSF Awards #1953932,
#1953933, #1846230, #1617481, and #1617513. We thank
the anonymous reviewers for their insightful comments.
References
[1] iPerf - The ultimate speed test tool for TCP, UDP and
SCTP. https://iperf.fr/.
[2] Livepatch.
https://www.kernel.org/doc/
Documentation/livepatch/livepatch.txt.
[3] Oracle Ksplice. https://ksplice.oracle.com.
[4] The ultimate, open-source X86 and X86-64 decoder-
disassembler library. https://zydis.re/.
[5] american fuzzy lop. http://lcamtuf.coredump.cx/
afl/README.txt, 2015.
[6] Android vs iPhone boot times tested: which one is
the fastest? https://www.phonearena.com/news/
Android-vs-iPhone-boot-times-tested-which
-one-is-the-fastest_id69582, 2015.
[7] Qualcomm
launches
bug
for
Snapdragon
gram
https://www.zdnet.com/article/
qualcomm-launches-hardware-bug-bounty-program/,
2016.
bounty
pro-
chips, modems.
[8] How syzkaller works. https://github.com/google/
syzkaller/blob/master/docs/internals.md,
2017.
[9] What’s New in Android Security (Google I/O ’17)
- Video. https://www.youtube.com/watch?v=C9_
ytg6MUP0, 2017.
[10] Bugs and Vulnerabilities Founds by Syzkaller in Linux
Kernel. https://github.com/google/syzkaller/
blob/master/docs/linux/found_bugs.md, 2018.
[11] The Kernel Address Sanitizer (KASAN). https://
github.com/google/kasan/wiki, 2018.
[12] syzbot.
https://syzkaller.appspot.com/
upstream, 2019.
[13] Syzkaller: an unsupervised, coverage-guided Linux sys-
tem call fuzzer. https://opensource.google.com/
projects/syzkaller, 2019.
[14] Y. Chen, Y. Li, L. Lu, Y. Lin, H. Vijayakumar, Z. Wang,
and X. Ou. Instaguard: Instantly deployable hot-patches
for vulnerable system programs on android. In Proc.
Internet Society NDSS, 2018.
USENIX Association
30th USENIX Security Symposium    2395
[15] Y. Chen, Y. Zhang, Z. Wang, L. Xia, C. Bao, and T. Wei.
Adaptive android kernel live patching. In Proc. USENIX
Security Symposium, 2017.
[16] M. Costa, J. Crowcroft, M. Castro, A. Rowstron,
L. Zhou, L. Zhang, and P. Barham. Vigilante: End-
to-end Containment of Internet Worms. In Proc. ACM
SOSP, 2005.
[17] H. S. Gunawi, C. Rubio-González, A. C. Arpaci-
Dusseau, R. H. Arpaci-Dusseau, and B. Liblit. Eio:
Error handling is occasionally correct. In Proc. FAST,
2008.
[18] Z. Huang, M. D’Angelo, D. Miyani, and D. Lie. Talos:
Neutralizing Vulnerabilities with Security Workarounds
In Proc. IEEE Symposium on
for Rapid Response.
Security and Privacy (S&P), 2016.
[19] S. Jana, Y. Kang, S. Roth, and B. Ray. Automatically De-
tecting Error Handling Bugs Using Error Speciﬁcations.
In Proc. USENIX Security Symposium, 2016.
[20] G. Jin, L. Song, W. Zhang, S. Lu, and B. Liblit. Auto-
mated Atomicity-violation Fixing. In Proc. ACM PLDI,
2011.
[21] A. Kadav, M. J. Renzelmann, and M. M. Swift. Fine-
Grained Fault Tolerance using Device Checkpoints. In