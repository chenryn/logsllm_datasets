title:Preventing Privilege Escalation
author:Niels Provos and
Markus Friedl and
Peter Honeyman
USENIX Association
Proceedings of the
12th USENIX Security Symposium
Washington, D.C., USA
August 4–8, 2003
© 2003 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Preventing Privilege Escalation
Niels Provos
Markus Friedl
Peter Honeyman
CITI, University of Michigan
GeNUA
CITI, University of Michigan
Abstract
Many operating system services require special priv-
ilege to execute their tasks. A programming error in a
privileged service opens the door to system compromise
in the form of unauthorized acquisition of privileges. In
the worst case, a remote attacker may obtain superuser
privileges. In this paper, we discuss the methodology
and design of privilege separation, a generic approach
that lets parts of an application run with diﬀerent levels
of privilege. Programming errors occurring in the un-
privileged parts can no longer be abused to gain unau-
thorized privileges. Privilege separation is orthogonal
to capability systems or application conﬁnement and
enhances the security of such systems even further.
Privilege separation is especially useful for system
services that authenticate users. These services exe-
cute privileged operations depending on internal state
not known to an application conﬁnement mechanism.
As a concrete example, the concept of privilege sep-
aration has been implemented in OpenSSH. However,
privilege separation is equally useful for other authen-
ticating services. We illustrate how separation of priv-
ileges reduces the amount of OpenSSH code that is ex-
ecuted with special privilege. Privilege separation pre-
vents known security vulnerabilities in prior OpenSSH
versions including some that were unknown at the time
of its implementation.
1 Introduction
Services running on computers connected to the In-
ternet present a target for adversaries to compromise
their security. This can lead to unauthorized access to
sensitive data or resources.
Services that require special privilege for their op-
eration are critically sensitive. A programming error
here may allow an adversary to obtain and abuse the
special privilege.
The degree of the escalation depends on which priv-
ileges the adversary is authorized to hold and which
privileges can be obtained in a successful attack. For
example, a programming error that permits a user to
gain extra privilege after successful authentication lim-
its the degree of escalation because the user is already
authorized to hold some privilege. On the other hand,
a remote adversary gaining superuser privilege with no
authentication presents a greater degree of escalation.
For services that are part of the critical Internet
infrastructure is it particularly important to protect
against programming errors. Sometimes these services
need to retain special privilege throughout their life-
time. For example, in SSH, the SSH daemon needs to
know the private host key during re-keying to authenti-
cate the key exchange. The daemon also needs to open
new pseudo-terminals when the SSH client so requests.
These operations require durable special privilege as
they can be requested at any time during the lifetime
of a SSH connection. In current SSH implementations,
therefore, an exploitable programming error allows an
adversary to obtain superuser privilege.
Several approaches to help prevent security prob-
lems related to programming errors have been pro-
posed. Among them are type-safe languages [30] and
operating system mechanisms such as protection do-
mains [11] or application conﬁnement [18, 21, 28].
However, these solutions do not apply to many exist-
ing applications written in C running on generic Unix
operating systems. Furthermore, system services that
authenticate users are diﬃcult to conﬁne because ex-
ecution of privileged operations depends on internal
state not known to the sandbox.
Instead, this paper discusses the methodology and
design of privilege separation, a generic approach to
limit the scope of programming bugs. The basic prin-
ciple of privilege separation is to reduce the amount of
code that runs with special privilege without aﬀecting
or limiting the functionality of the service. This nar-
rows the exposure to bugs in code that is executed with
privileges. Ideally, the only consequence of an error in
a privilege separated service is denial of service to the
adversary himself.
The principle of separating privileges applies to any
privileged service on Unix operating systems. It is es-
pecially useful for system services that grant authenti-
cated users special privilege. Such services are diﬃcult
to conﬁne because the internal state of a service is not
USENIX Association
12th USENIX Security Symposium 
231
known to an application conﬁnement system and for
that reason it cannot restrict operations that the ser-
vice might perform for authenticated users. As a result,
an adversary who gains unauthorized control over the
service may execute the same operations as any authen-
ticated user. With privilege separation, the adversary
controls only the unprivileged code path and obtains
no unauthorized privilege.
Privilege separation also facilitates source code au-
dits by reducing the amount of code that needs to be
inspected intensively. While all source code requires
auditing, the size of code that is most critical to secu-
rity decreases.
In Unix, every process runs within its own protec-
tion domain, i.e., the operating system protects the ad-
dress space of a process from manipulation and control
by unrelated users. Using this feature, we accomplish
privilege separation by spawning unprivileged children
from a privileged parent. To execute privileged oper-
ations, an unprivileged child asks its privileged parent
to execute the operation on behalf of the child. An
adversary who gains control over the child is conﬁned
in its protection domain and does not gain control over
the parent.
In this paper, we use OpenSSH as an example of
a service whose privileges can be separated. We show
that bugs in OpenSSH that led to system compromise
are completely contained by privilege separation. Priv-
ilege separation requires small changes to existing code
and incurs no noticeable performance penalty.
The rest of the paper is organized as follows. In Sec-
tion 2, we discuss the principle of least privilege. We
introduce the concept of privilege separation in Sec-
tion 3 and describe a generic implementation for Unix
operating system platforms. We explain the implemen-
tation of privilege separation in OpenSSH in Section 4.
In Section 5, we discuss how privilege separation im-
proves security in OpenSSH. We analyze performance
impact in Section 6. Section 7 describes related work.
Finally, we conclude in Section 8.
proaches to application design that help prevent unan-
ticipated consequences from such errors: defensive pro-
gramming, language enforced protection, and protec-
tion mechanisms supported by the operating system.
The latter two approaches are not applicable to
many Unix-like operating systems because they are de-
veloped in the C language which lacks type-safety or
other protection enforcement. Though some systems
have started to support non-executable stack pages
which prevent many stack overﬂows from being ex-
ploitable, even this simple mechanism is not available
for most Unix platforms.
Furthermore, the Unix security model is very coarse
grained. Process privileges are organized in a ﬂat tree.
At the root of the tree is the superuser. Its leaves are
the users of the system. The superuser has access to
every process, whereas users may not control processes
of other users. Privileges that are related to ﬁle sys-
tem access have ﬁner granularity because the system
grants access based on the identity of the user and his
group memberships. In general, privileged operations
are executed via system calls in the Unix kernel, which
diﬀerentiates mainly between the superuser and every-
one else.
This leaves defensive programming, which attempts
to prevent errors by checking the integrity of param-
eters and data structures at implementation, compile
or run time. For example, defensive programming pre-
vents buﬀer overﬂows by checking that the buﬀer is
large enough to hold the data that is being copied into
it. Improved library interfaces like strlcpy and strlcat
help programmers avoid buﬀer overﬂows [17].
Nonetheless, for complex applications it is still in-
evitable that programming errors remain. Further-
more, even the most carefully written application can
be aﬀected by third-party libraries and modules that
have not been developed with the same stringency. The
likelihood of bugs is high, and an adversary will try to
use those bugs to gain special privilege. Even if the
principle of least privilege has been followed, an adver-
sary may still gain those privileges that are necessary
for the application to operate.
2 Least Privilege
We refer to a privilege as a security attribute that
is required for certain operations. Privileges are not
unique and may be held by multiple entities.
The motivation for this eﬀort is the principle of least
privilege: every program and every user should oper-
ate using the least amount of privilege necessary to
complete the job [23]. Applying the principle to appli-
cation design limits unintended damage resulting from
programming errors. Linden [15] suggests three ap-
3 Privilege Separation
This section presents an approach called privilege
separation that cleaves an application into privileged
and unprivileged parts. Its philosophy is similar to the
decomposition found in micro-kernels or in Unix com-
mand line tools. Privilege separation is orthogonal to
other protection mechanisms that an operating system
might support, e.g., capabilities or protection domains.
232
12th USENIX Security Symposium 
USENIX Association
We describe an implementation of privilege separation
that does not require special support from the operat-
ing system kernel and as such may be implemented on
almost any Unix-like operating system.
The goal of privilege separation is to reduce the
amount of code that runs with special privilege. We
achieve this by splitting an application into parts. One
part runs with privileges and the others run without
them. We call the privileged part the monitor and the
unprivileged parts the slaves. While there is usually
only one slave, it is not a requirement. A slave must
ask the monitor to perform any operation that requires
privileges. Before serving a request from the slave, the
monitor ﬁrst validates it.
If the request is currently
permitted, the monitor executes it and communicates
the results back to the slave.
In order to separate the privileges in a service, it is
necessary to identify the operations that require them.
The number of such operations is usually small com-
pared to the operations that can be executed without
special privilege. Privilege separation reduces the num-
ber of programming errors that occur in a privileged
code path. Furthermore, source code audits can focus
on code that is executed with special privilege, which
can further reduce the incidence of unauthorized priv-
ilege escalation.
Although errors in the unprivileged code path can-
not result in any immediate privilege escalation,
it
might still be possible to abuse them for other attacks
like resource starvation. Such denial of service attacks
are beyond the scope of this paper.
In the remainder of this section, we explain the Unix
mechanisms that allow us to implement a privilege sep-
arated service. Processes are protection domains in
a Unix system. That means that one process cannot
control another unrelated process. To achieve privilege
separation, we create two entities: a privileged parent
process that acts as the monitor and an unprivileged
child process that acts as the slave. The privileged par-
ent can be modeled by a ﬁnite-state machine (FSM)
that monitors the progress of the unprivileged child.
The parent accepts requests from the child for actions
that require privileges. The set of actions that are per-
mitted changes over time and depends on the current
state of the FSM. If the number of actions that re-
quire privileges is small, most of the application code
is executed by the unprivileged child.
The design of the interface is important as it pro-
vides a venue of attack for an adversary who manages
to compromise the unprivileged child. For example, the
interface should not provide mechanisms that allow the
export of sensitive information to the the child, like a
private signing key. Instead, the interface provides a
request that allows the child to request a digital signa-
ture.
A privilege separated service can be in one of two
phases:
(cid:127) Pre-Authentication Phase: A user has contacted
a system service but is not yet authenticated. In
this case, the unprivileged child has no process
privileges and no rights to access the ﬁle system.
(cid:127) Post-Authentication Phase: The user has success-
fully authenticated to the system. The child has
the privileges of the user including ﬁle system ac-
cess, but does not hold any other special privilege.
However, special privilege are still required to cre-
ate new pseudo-terminals or to perform other priv-
ileged operations. For those operations, the child
must request an action from the privileged parent.
The unprivileged child is created by changing
its user identiﬁcation (UID) and group identiﬁca-
tion (GID) to otherwise unused IDs. This is achieved
by ﬁrst starting a privileged monitor process. It forks
a slave process. To prevent access to the ﬁle system,
the child changes the root of its ﬁle system to an empty
directory in which it is not allowed to create any ﬁles.
Afterwards, the slave changes its UID and GID to lose
its process privileges.
To enable slave requests to the monitor, we use inter-
process communication (IPC). There are many diﬀer-
ent ways to allow communication between processes:
pipes, shared memory, etc. In our case, we establish
a socket between the two processes using the socket-
pair system call. The ﬁle descriptor is inherited by the
forked child.
A slave may request diﬀerent types of privileged op-
erations from the monitor. We classify them depending
on the result the slave expects to achieve: Information,
Capabilities, or Change of Identity.
A child issues an informational request if acquir-
ing the information requires privileges. The request
starts with a 32-bit length ﬁeld followed by an 8-bit
number that determines the request type. In general,
the monitor checks every request to see if it is al-
lowed. It may also cache the request and result. In the
pre-authentication phase, challenge-response authenti-
cation can be handled via informational requests. For
example, the child ﬁrst requests a challenge from the
privileged monitor. After receiving the challenge, the
child presents it to the user and requests authentica-
tion from the monitor by presenting the response to
it. In this case, the monitor remembers the challenge
that it created and veriﬁes that the response matches.
The result is either successful or unsuccessful authen-
tication. In OpenSSH, most privileged operations can
USENIX Association
12th USENIX Security Symposium 
233
cmsg = CMSG_FIRSTHDR(&msg);
cmsg->cmsg_len = CMSG_LEN(sizeof(int));
cmsg->cmsg_level = SOL_SOCKET;
cmsg->cmsg_type = SCM_RIGHTS;
*(int *)CMSG_DATA(cmsg) = fd;
mm_master_t *mm_create(mm_master_t *, size_t);
void mm_destroy(mm_master_t *);
void *mm_malloc(mm_master_t *, size_t);
void mm_free(mm_master_t *, void *);
void mm_share_sync(mm_master_t **, mm_master_t **)
Figure 1: File descriptor passing enables us to send a
ﬁle descriptor to another process using a special control
message. With ﬁle descriptor passing, the monitor can
grant an unprivileged child access to a ﬁle that the child
is not allowed to open itself.
Figure 2: These functions represent the interface for
shared memory allocation. They allow us to export dy-
namically allocated data from a child process to its parent
without changing address space references contained in
opaque data objects.
be implemented with informational requests.
Ordinarily, the only capability available to a process
in a Unix operating systems is a ﬁle descriptor. When
a slave requests a capability, it expects to receive a ﬁle
descriptor from the privileged monitor that it could not
obtain itself. A good example of this is a service that
provides a pseudo-terminal to an authenticated user.
Creating a pseudo-terminal involves opening a device
owned by the superuser and changing its ownership to
the authenticated user, which requires special privilege.
Modern Unix operating systems provide a mecha-
nism called ﬁle descriptor passing. File descriptor pass-
ing allows one process to give access to an open ﬁle to
another process [25]. This is achieved by sending a con-
trol message containing the ﬁle descriptor to the other
process; see Figure 1. When the message is received,
the operating system creates a matching ﬁle descriptor
in the ﬁle table of the receiving process that permits
access to the sender’s ﬁle. We implement a capability
request by passing a ﬁle descriptor over the socket used
for the informational requests. The capability request
is an informational request in which the slave expects
the monitor to answer with a control message contain-
ing the passed ﬁle descriptor.
The change of identity request is the most diﬃcult
to implement. The request is usually issued when a ser-
vice changes from the pre-authentication to the post-
authentication phase. After authentication, the service
wants to obtain the privileges of the authenticated user.
Unix operating systems provide no portable mechanism
to change the user identity1 a process is associated with
unless the process has superuser privilege. However, in
our case, the process that wants to change its identity
does not have such privilege.
One way to eﬀect a change of identity is to terminate
the slave process and ask the monitor to create a new
process that can then change its UID and GID to the
desired identities. By terminating the child process all
1To our knowledge, Solaris is the only Unix operating system
to provide such a mechanism.
the state that has been created during its life time is
lost. Normally a meaningful continuation of the session
is not possible without retaining the state of the slave
process. We solve this problem by exporting all state
of the unprivileged child process back to the monitor.
Exporting state is messy. For global structures, we
use XDR-like [16] data marshaling which allows us
to package all data contained in a structure includ-
ing pointers and send it to the monitor. The data is
unpacked by the newly forked child process. This pre-
vents data corruption in the exported data from aﬀect-
ing the privileged monitor in any way.
For structures that are allocated dynamically, e.g.,