    __sanitizer_cov_trace_pc_guard(uint32_t* guard);
如果是一个较大的函数则只会插入`__sanitizer_cov_trace_pc_guard(uint32_t*
guard);`。在IDA中看起来像下面这样。`__sanitizer_cov_trace_pc_guard`函数中一般会先double
check一下`*guard`的值，如果为0就直接返回了。
编译器还会在模块的构造函数中插入下面的代码，guard的范围在start和stop之间，`__sanitizer_cov_trace_pc_guard_init`函数中一般会从1开始设置`*guard`的值。
    __sanitizer_cov_trace_pc_guard_init(uint32_t* start, uint32_t* stop)
在IDA中看起来像下面这样。
来做个简单的实验。首先准备下面的代码。
example.cc:
trace-pc-guard.cc:
编译链接之后分别带命令行参数和不带命令行参数执行程序观察输出结果。
    clang++ -g  -fsanitize-coverage=trace-pc-guard example.cc -c
    clang++ trace-pc-guard.cc example.o -fsanitize=address
honggfuzz中的`__sanitizer_cov_trace_pc_guard_init`函数首先将`guards_initialized`标记为true，如果`feedback->pcGuardMap[*guard]`标记为true说明该边界已经命中，将`*guard`设置为0。
`__sanitizer_cov_trace_pc_guard`函数中对于android系统如果`guards_initialized`为false则强制`*SAN`初始化。如果`feedback->pcGuardMap[*guard]`标记为false说明该边界还没有被命中过，`feedback->pidFeedbackEdge[my_thread_no]`加1，并将`feedback->pcGuardMap[*guard]`标记为true。
###  -fsanitize-coverage=indirect-calls
如果编译源代码时含有`-fsanitize-coverage=indirect-calls`标志，编译器在每个非间接跳转之前插入下面的代码。
    __sanitizer_cov_trace_pc_indir(void *callee)
我们接着实验。修改一下原来的代码。
example.cc:
trace-pc-indir.cc:
运行程序观察输出结果。
honggfuzz中的`__sanitizer_cov_trace_pc_indir`函数首先取`__sanitizer_cov_trace_pc_indir返回地址bbMapPc[addr]`，每个地址对应1位。取出对应的位中的值，和1做或运算并更新。如果该值为0说明这里的非间接跳转还没有执行，`feedback->pidFeedbackPc[my_thread_no]`加1。
###  -fsanitize-coverage=trace-cmp
如果含有`-fsanitize-coverage=trace-cmp`标志，编译器在比较指令之前和switch指令之前插入下面的代码。
    void __sanitizer_cov_trace_(const)_cmp1(uint8_t Arg1, uint8_t Arg2);
    void __sanitizer_cov_trace_(const)_cmp2(uint16_t Arg1, uint16_t Arg2);
    void __sanitizer_cov_trace_(const)_cmp4(uint32_t Arg1, uint32_t Arg2);
    void __sanitizer_cov_trace_(const)_cmp8(uint64_t Arg1, uint64_t Arg2);
    // Val是switch操作数
    // Cases[0]是case常量的数目
    // Cases[1]是Val的位数
    // Cases[2:]是case常量
    void __sanitizer_cov_trace_switch(uint64_t Val, uint64_t *Cases);
instrument.c中的回调函数如下。`__builtin_popcount(x)`会计算x中1的位数，所以v的值表示Arg1和Arg2有多少位相同。和memorycmp.c基本含义是相同的。
还有一些标志用的不多或者原理类似，就不再赘述了。
## fuzz流程
说完了关于SanitizerCoverage的问题我们从honggfuzz.c的main函数开始分析fuzz流程。经过一系列初始化之后调用了`fuzz_threadsStart`函数。
hfuzz是一个包含各种fuzz所需信息的结构体，各个结构体的含义根据名称应该很容易理解。
在前面解析命令行参数的cmdlineParse函数中，`hfuzz.feedback.dynFileMethod`默认设置为`_HF_DYNFILE_SOFT`，即基于软件的反馈驱动fuzz。如果命令行中有-x选项，表示采用static/dry mode，即不采用反馈驱动。
`fuzz_threadsStart`函数中不是static/dry
mode设置当前state为`_HF_STATE_DYNAMIC_DRY_RUN`，进入第一阶段Dry Run。
接下来调用了`subproc_runThread`->`pthread_create`->`fuzz_threadNew`->`fuzz_fuzzLoop`函数。`fuzz_fuzzLoop`函数如下所示。
`fuzz_fuzzLoop`函数首先调用了`fuzz_fetchInput`函数，因为当前的state是`_HF_STATE_DYNAMIC_DRY_RUN`，所以接着调用了`input_prepareStaticFile`函数取得一个文件并返回。
接下来调用了`subproc_Run`函数。
`subproc_Run`函数首先调用了`subproc_New`函数，在`subproc_New`函数中clone出一个子进程调用`arch_launchChild`函数，在`arch_launchChild`函数中运行了被fuzz的程序。
`subproc_New`函数返回后调用`arch_reapChild`函数，`arch_reapChild`函数中调用了`arch_checkWait`函数。`arch_checkWait`函数等待子进程返回并调用`arch_traceAnalyze`函数。如果子进程返回状态为暂停，并且是我们感兴趣的信号时，如果是fuzz进程则调用`arch_traceSaveData`函数(`fuzz_fuzzLoop`函数调用`subproc_Run`函数的情况，下文同)；如果是其它进程则调用`arch_traceAnalyzeData`函数(`fuzz_fuzzLoop`函数调用`fuzz_runVerifier`函数的情况，下文同)。前者进行的是完整的分析，后者仅仅栈回溯然后计算stack
hash。
如果子进程返回状态为退出，并且是sanitizer中定义的exitcode时，调用`arch_traceExitAnalyze`函数。在`arch_traceExitAnalyze`函数中如果是fuzz进程调用`arch_traceExitSaveData`函数；如果是其它进程调用`arch_traceExitAnalyzeData`函数。在`arch_traceExitSaveData`函数中首先增加全局crash计数，调用`arch_parseAsanReport`函数解析asan报告。
如果设置ignoreAddr，忽略crash地址小于ignoreAddr的情况。
计算stack hash和crash PC，忽略stack hash在黑名单上的情况。
根据得到的信息将crash保存为固定文件名的格式，生成报告。在`arch_traceExitAnalyzeData`函数中只会解析asan报告和计算stack
hash。
回到`fuzz_fuzzLoop`函数，最后调用`fuzz_perfFeedback`函数更新代码覆盖率相关信息，`fuzz_runVerifier`函数指示是否应该使用当前验证的crash更新report。在`fuzz_perfFeedback`函数中如果当前的文件增加了代码覆盖率调用`fuzz_addFileToFileQ`函数将它加到语料库中。
经过多次调用，当`fuzz_fetchInput`函数调用`input_prepareStaticFile`函数无法再得到新的文件返回false之后调用`fuzz_setDynamicMainState`函数设置当前state为`_HF_STATE_DYNAMIC_SWITCH_TO_MAIN`，进入第二阶段Switching
to Dynamic Main(Feedback Driven
Mode)。当所有的线程都进入第二阶段以后设置当前state为`_HF_STATE_DYNAMIC_MAIN`，进入第三阶段Dynamic
Main(Feedback Driven Mode)。
返回到`fuzz_fetchInput`函数，调用`input_prepareDynamicInput`函数准备输入数据并变异。文件的来源为之前`fuzz_addFileToFileQ`函数添加的。
至此honggfuzz的fuzz流程我们就大致分析完了。作者水平有限，文章若有不当之处还望各位指正。
## 参考资料
1.[Clang 9 documentation](https://clang.llvm.org/docs/SanitizerCoverage.html)  
2.[honggfuzz漏洞挖掘技术深究系列](https://bbs.pediy.com/thread-247954.htm)