two approaches. Channel idle time is the time during which
there is no radio activity in the channel, and thus represents
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:00 UTC from IEEE Xplore.  Restrictions apply. 
previous
frame
current frame
Data
ACK
ACK
RTS
CTS
Data
ACK
Tdata
Tack
Tdifs
Tcontent
Trts
Tcts
Tdata
Tack
Tsifs
ion
Tsifs
(a) RTS/CTS access mechanism
Tsifs Tsifs
previous
frame
Data
ACK
ACK
current frame
Data
ACK
Tdata
Tack
Tsifs
Tdifs
Tcontent
ion
Tdata
Tack
Tsifs
(b) Basic access mechanism
Figure 2. The frame timings of the 802.11 stan-
dard in RTS/CTS access mode (ﬁgure (a)) and
in basic access mode (ﬁgure (b)).
the available resource in that channel. In addition to being
an accurate load indicator, this metric also makes it easier
for the proposed WLAN AP array to co-exist with other
non-cooperative APs. Since a WLAN AP array may use up
all non-overlapped channels, neighboring non-cooperative
APs may be forced to use some of the same channels. By
using the channel idle time as the trafﬁc load indicator, a
WLAN AP array is able to borrow and return shared chan-
nel resource from/to neighboring APs on demand.
The WLB in Figure 1 performs the channel idle time
measurement by using a WLAN card that operates in the RF
monitor mode. The WLB hops among the channels that the
APs currently use to sample their channel idle time, as well
as the load of each STA. In addition, the WLB also records
the current associations between STAs and APs. Because
most WLAN frames contain both the STA’s MAC address
and the AP’s MAC address, the AP-STA association infor-
mation can be deduced from one of these frames. For STAs
that are completely idle, the WLB may not be able to iden-
tify their associated APs using this approach, but then again
it may not need to care about these STAs since they do
not generate any trafﬁc. Security measures such as WEP
is not an issue for association relationship discovery since
the MAC address is not encrypted.
3.2. Measuring Channel Idle Time
In 802.11, a channel is busy when there are frames be-
ing transmitted in that channel, or when some stations have
data to send but hold off the transmission because they
are in the contention window. A channel’s idle time is
the time in which it is not busy. Most if not all exist-
ing APs work in the DCF (Distributed Coordination Func-
tion) mode. Based on IEEE 802.11-1999 [16], there are
two ways to access a radio channel, the RTS/CTS access
mode as shown in Figure 2(a) and the basic access mode
as shown in Figure 2(b). In the RTS/CTS access mode, a
STA or AP needs to ﬁrst wait for a period of time of Tdifs
after the end of the last frame in the air, and then wait for
its contention timer to expire before sending, which is set
to a random value R between 0 and CW , where CW is
between CWmin and CWmax. The actual time-out value
is Tcontention = R ∗ Tslot if the channel is idle. Each
transmission failure doubles CW until it reaches CWmax
and each successful transmission resets CW to CWmin.
When the contention timer expires, the sender sends a RTS
frame, which reserves the channel for a period of time
Tsifs +Tcts +Tsifs +Tdata +Tsifs +Tack. The receiver then
responds with a CTS frame, which also reserves the channel
for a period of time Tsifs + Tdata + Tsifs + Tack. Finally
the sender sends a data frame and reserves the channel for a
period of time Tsifs + Tack. All reservation information is
stored in the duration ﬁeld of each frame’s header. In the ba-
sic access mode, the timing is exactly the same except that
the RTS/CTS procedure is removed. After its contention
timer expires, the sender sends a data frame directly with-
out sending a RTS. Broadcast and multicast frames can only
be sent in the basic access mode. No reservation is needed
for these frames as they don’t require ACKs. Management
frames are transmitted in the same way as data frames. The
channel reservation method used by fragmented frames is
handled in a similar way as RTS/CTS procedure.
Based on the above analysis, WLB computes channel
busy time (Tchannel−busy), AP busy time (Tap−busy), STA
busy time (Tsta−busy) as follows:
• If it is a RTS frame, ignore the subsequent CTS, data
(or management), and ACK frame. Tf rame = Tdifs +
Trts + Drts, where Drts is the value in the duration
ﬁeld of the RTS frame.
• If it is a data (or management) frame and it does not
have associated RTS/CTS, ignore its subsequent ACK
frame. Tf rame = Tdifs + Tdata + Ddata, where Ddata
is the value in the duration ﬁeld of the data frame.
• Tchannel−busy =
(cid:1)
in a particular channel.
Tf rame, for all frames that appear
(cid:1)
• Tap−busy =
particular AP.
• Tsta−busy =
particular STA.
(cid:1)
Tf rame for all frames that involve a
Tf rame for all frames that involve a
Here we skip the discussion of fragmented frames be-
cause of limited space. It can be handled in a similar way as
RTS frames. In IEEE 802.11b, Tdifs is 50 µsec. Tdata and
Trts can be computed from the frame monitor header, in
particular from the data transfer rate (T R) and frame length
(LEN). Tdata (or Trts) = Tpreamble + LEN
T R . Tpreamble is
the transmission time for the frame preamble (PLCP pream-
ble and PLCP header), which needs to be calculated sepa-
rately because it is not included in LEN. In IEEE 802.11b,
Tpreamble can be 192 µsec or 96 µsec, depending on the ca-
pability ﬁeld of the beacon, probe, and association frames.
It is difﬁcult, if not impossible, to estimate the other
element of channel busy time,
the contention delay
(Tcontention) because there is no way to deduce the exact
value of the contention timer in STAs or APs, and how they
overlap in time. Moreover, each transmission failure poten-
tially doubles the contention timer value. There have been
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:00 UTC from IEEE Xplore.  Restrictions apply. 
several previous efforts [15] that attempt to develop an ana-
lytical model for a WLAN’s effective channel capacity. Un-
fortunately, they have not yet been fully validated. Given
these difﬁculties, instead of estimating Tcontention directly
at run time, we choose a calibration approach to solve this
problem.
Under full load with TCP bulk data transfers, we mea-
sure the average channel busy time for n STAs within a unit
of time. The channel busy time in this condition is called
Tchannel−f ull−load,n which represents the channel capac-
ity when there are n STAs that are actively sending data.
At run time, the effective channel idle time, Tchannel−idle,
is calculated as Tchannel−idle = Tchannel−f ull−load,n −
Tchannel−busy, where n is set to the average number of ac-
tive STAs at that instant.
3.3. To Balance or Not to Balance
Because moving a STA from one AP to another AP in-
curs a non-negligible handoff latency, which could be as
high as 1.3 second, it should be triggered only when the
degree of load imbalance within an AP array exceeds a cer-
tain threshold. Assume there are n APs, AP1, . . . , APn,
and m STAs, STA1, . . . , STAm. The measured channel
capacity (Tchannel−full−load,n) and the channel idle time
(Tchannel−idle) that APi uses are Ci and Ii, respectively.
The measured AP busy time or trafﬁc load (Tap−busy) of
APi is RAi, and the measured STA busy time or trafﬁc
load (Tsta−busy) of STAi is RS i. Let D be the degree
of load imbalance among APs, α be an empirical constant,
Dthreshold be the imbalance threshold that triggers a load
balancing action. They they are related as follows:
D = max(I1, . . . , In) − min(I1, . . . , In)
Dthreshold = α ∗ max(C1, . . . , Cn)
Only when the trafﬁc load difference D is greater than
the threshold Dthreshold is the load balancing procedure
triggered. Constant α is introduced to accommodate the
ﬂuctuation of Ii, which varies because of TCP probing,
wireless channel interference, etc. These temporary traf-
ﬁc load ﬂuctuations should not trigger any load balancing
actions, as they could reduce the throughput of TCP con-
nections due to handoff latency.
When all APs are fully loaded and thus balanced, there
is no need to change STA-to-AP association from the per-
spective of load balancing. But it is desirable to give each
STA a fair share of bandwidth. It can happen that a lot of
STAs share one AP while few STAs share another AP. To
provide fairness to STAs, WLB will balance the number of
STAs of APs when all APs are fully loaded.
3.4. Computing STA-to-AP Mapping
It is desirable to minimize the number of STA move-
ments in a load balancing adjustment because each STA
move requires a handoff, which potentially leads to tempo-
rary throughput degradation. Ideally, the new load on APi
after a perfect load balancing action, Li, should be
sort APs based on their balance B_i in decending order and put them in
AP[]. The left side of AP[] will be low load APs
sort STAs of each AP_i based on STAs' traffic rate RS_j in asending order
and put them in AP[i].STA[]. The left side of STA[] will be low load STAs.
for (i = 0; i =0; j--) // move away "from" this AP
    {
        if(AP[j].balance >= 0)
        {
            continue; // not possible to find from this one
        }
        for(k = AP[j].num_of_sta - 1; k >=0 ; k --)
        { // scan all STAs in "from" AP
            if(AP[j].STA[k].rate <= AP[i].balance)
            {
                // this one can be moved, mark its new AP as AP_i
                AP[i].balance -= AP[j].STA[k].rate;
                AP[j].balance += AP[j].STA[k].rate;
                goto recheck_balance;
            }
        } //if no one can be found in this "from", we will move to next "from"
    } // search all "from" for this "to". if no "from" can be found, we move to
next "to"
} //fit all "to"
Figure 3. The pseudo-code to ﬁnd STAs which
can be moved to balance the load of APs.
(cid:1)n
Bi = Ii −
i=1(Ii)
n
Li = RAi + Bi
Bi is the difference between the load of APi and the
array-wide average load, and thus represents the balance of
APi. When it is positive, it means APi is less loaded than
the average, and it can take additional trafﬁc of Bi from
other APs. When it is negative, |Bi| of APi’s trafﬁc needs
to be moved to other APs.
In practice, because a STA’s load is not divisible, we
could only attempt to push the new load of APi to be as
close to Li as possible. Even without the additional con-
straint of minimizing the number of STA moves, this prob-
lem is already weakly NP-complete since it is simply the
subset sum problem [17]. Therefore, we propose a simple
heuristic algorithm to this problem. We call it largest ﬁt
algorithm.
This algorithm, shown in Figure 3, starts by sorting APs
according to their Bi in order of increasing load and putting
the result in an array, AP[], and sorting the STAs associated
with APi in order of increasing load and putting the result
in AP[i].STA[]. Then the algorithm attempts to bring each
positive balance to as close to zero as possible.
It starts
with the AP whose positive balance is the largest (the least
loaded), and moves on to APs that are more loaded. To
use up the balance, the algorithm moves the most loaded
STAs associated with the most loaded AP, but in each move
it ensures that the injected load of the moved STA must be
smaller than the balance of the AP to which it moves. With
this heuristic, more heavily loaded STAs are more likely to
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:00 UTC from IEEE Xplore.  Restrictions apply. 
ﬁll up the balance of lightly loaded APs, and thus the total
number of STA moves tends to be minimized.
If a STA’s trafﬁc load is static, this STA assignment al-
gorithm is stable and can indeed achieve load balance. But
a STA’s trafﬁc load most likely will not be static because of
TCP’s probing. The most likely scenario after a load balanc-
ing adjustment is that all the STAs increase their bandwidth
demands such that the previously heavily loaded APs con-
tinue to be heavily loaded and the previously lightly loaded
APs now become heavily loaded. The proposed algorithm
is stable in this case because the load among the APs is still
balanced. However, if the load of previously lightly loaded
APs increases more than what was moved to them while
the load of the heavily loaded APs decreases by as much as
what is moved away. This can happen when the remaining
trafﬁc on the heavily loaded APs is constant bit rate-based,
whereas the trafﬁc on the lightly loaded APs is TCP-based.
In this scenario, if the parameter α cannot accommodate the
imbalance among APs, the algorithm may move the STAs
back and forth and becomes unstable. This instability arises
because the algorithm cannot predict the change in injected
load from STAs after they are reassigned. To solve this
problem, the algorithm counts the number of consecutive
moves for each STA. Whenever a STA’s counter reaches a
threshold, this STA will stay associated with its current AP
for a conﬁgurable period of time.
3.5. Changing STA-to-AP Association
To change a STA’s associated AP, WLB needs to con-
vince the STA to move to the new AP without requiring
any modiﬁcations to APs or STAs. Toward this end, we
exploit the MAC address ﬁltering feature of commercial
APs to force a STA to change its association. MAC ad-
dress ﬁltering allows a AP to control which STAs can ac-
cess the AP. APs typically implement this feature using a
black list. STAs in an AP’s black list cannot access this AP.
To move a STA from APsource to APdestination, WLB puts
the MAC address of this STA in the black list of all APs ex-
cept APdestination. Consequently the STA will ﬁnd there is
only one AP, APdestination, that is accessible and move to
it. In this scheme, all APs use the same SSID.
For this scheme to work, WLB needs to communicate
with the APs to change their black lists. However, commer-
cial APs rarely provide any direct APIs for such communi-
cations. Fortunately, most APs do support a web-based user
interface for entering system conﬁguration information, and
the underlying communication mechanism for this web-
based control is CGI interface. WLB directly exploits this