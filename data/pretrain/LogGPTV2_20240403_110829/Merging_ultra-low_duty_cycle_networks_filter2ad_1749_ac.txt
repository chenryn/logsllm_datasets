### V. EXPERIMENTAL SETUP

We conducted our simulations using the MiXiM extensions to the OMNET++ simulation environment. For more details about our simulator, GMAC, and the MyriaNed nodes we simulated, please refer to [1].

#### A. Clocks
We designed custom OMNET++ modules to represent the clocks found in our sensor nodes. OMNET++ keeps track of the global simulation time, \( T_{\text{sim}} \), while each individual node maintains its own local time, \( T_x \). The local time is computed based on the node's clock frequency multiplier, \( F_x \), and phase offset, \( P_x \), using the formula:
\[ T_x = (T_{\text{sim}} \times F_x) + P_x \]

Unless otherwise specified, all clocks use a random frequency multiplier within the range of 0.99998 ± 20 parts per million. This means that a node's clock can run slightly faster or slower than the global simulation time.

#### B. GMAC Configurations
To facilitate discussion of GMAC's behavior with various improvements, we defined several specific combinations, called configurations. These configurations include:

- **Default Configuration**: As described in Section III.
- **Cluster IDs**: The same as the default configuration, but using cluster IDs for consistent merge decisions.
- **Passive Detection**: Purely passive detection with \( P_I = 0.4\% \), using cluster IDs. We explain our choice for this value below.
- **Delayed Join**: The same as the passive detection configuration, but nodes wait one frame before joining newly discovered clusters to send merge messages.
- **Full Frame Listening**: The same as the delayed join configuration, but nodes listen for an entire frame to discover merging opportunities.

#### C. Topology
To better assess the strengths and weaknesses of the various configurations, we investigated different network topologies. Specifically, we looked at networks where nodes are deployed in a regular matrix pattern. Table I shows the dimensions and node spacing for the networks we examined.

| Nodes | Dimensions    |
|-------|---------------|
| 64    | 640m x 640m   |
| 256   | 1280m x 1280m |
| 1024  | 2560m x 2560m |
| 4096  | 5120m x 5120m |

In all our experiments, \( N^2 \) nodes were deployed in an \( N \times N \) grid, with rows (and columns) placed 80 meters apart. It is important that the networks are connected, as otherwise, complete synchronization would be impossible. Although not the most representative of real-world deployments, matrix topologies allow us to directly observe the effects of node density with a regular topology.

We set the transmit power for all nodes in the network on a per-run basis to vary the density of a given topology. By increasing the node's transmit power, the simulator effectively decreases the diameter of the network and increases its density. Our default setting uses a transmit power that results in a range of 80 meters, and unless otherwise specified, we use 20mW as the default power level.

#### D. Measurements
Each simulated node logs the global simulation time, \( T_{\text{sim},i} \), and its local time, \( T_{x,i} \), at the beginning of each new round \( i \). Using this data, we can determine which nodes are synchronized and how tightly they are synchronized (i.e., how much their active periods overlap).

We simulate two variations of the singleton scenario: 
- **Singleton Worst**: A singleton cluster with an inferior ID detecting and merging into an established cluster.
- **Singleton Best**: A singleton cluster with a superior ID detecting and merging into an established cluster.

To evaluate synchronization, we consider groups of nodes whose reported start times for round \( i \) differ by less than some \( \epsilon \) (about 65 ticks, or just over 2 slots) to be part of a synchronized cluster. For each cluster, we compute its size and the standard deviation of the start times. We consider a network to be synchronized when the standard deviation of start times drops below 1000 μs, or 1 ms.

#### E. Scenarios
We utilize different scenarios to evaluate various aspects of the merge behavior:

1. **Asynchronous Start**: All nodes start up at a random time between 0 and 15 seconds. In this state, they will continuously broadcast HELLO messages and search for a cluster. After a message is heard, they enter the CAUGHT state and try to synchronize with the node (and cluster) that they heard. If no message is heard within a certain period, they switch back to continuous listening mode.

2. **Singleton**: This scenario involves a single node with a high or low ID detecting and merging into an established cluster. We investigate how the distance (hops) that the synchronization information must travel affects the convergence of the network.

3. **Cluster Merge**: This scenario involves multiple synchronized clusters merging. For example, in a 32x32 (1024-node) grid, the right-hand side begins as one synchronized cluster, and the left-hand side begins as another. At \( T_{\text{sim}} = 5 \) seconds, a third cluster starts up. We examine how the size, topology, and distribution of the clusters affect the merge behavior.

### VI. EVALUATION

We look at three different scenarios to evaluate different aspects of the merge behavior:

1. **Asynchronous Start**: To examine the initial synchronization process.
2. **Singleton**: To investigate how the size and topology of the network affect the merge behavior.
3. **Cluster Merge**: To study the behavior of multiple synchronized clusters merging.

In Figure 4, we see the performance of the default configuration for increasing network sizes. This scenario is particularly demanding, and the severity of the problem is dependent on the size of the network, making it challenging for very large networks.