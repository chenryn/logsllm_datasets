User: 如何使用Python编写一个能够自动监控服务器状态并发送报警邮件的脚本？
Assistant: 以下是一个简单的 Python 脚本，可以自动监控服务器状态并发送报警邮件：

```python
import psutil
import smtplib
from email.mime.text import MIMEText

# 设置邮件参数
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
SMTP_USERNAME = 'your-gmail-username'
SMTP_PASSWORD = 'your-gmail-password'
EMAIL_FROM = 'your-email-address'
EMAIL_TO = 'recipient-email-address'
EMAIL_SUBJECT = 'Server Status Report'

# 定义获取服务器 CPU 使用率的函数
def get_cpu_usage():
    cpu_usage = psutil.cpu_percent()
    return cpu_usage

# 定义获取服务器内存使用率的函数
def get_memory_usage():
    memory_usage = psutil.virtual_memory().percent
    return memory_usage

# 检查服务器状态
if get_cpu_usage() > 80 or get_memory_usage() > 80:
    # 发送报警邮件
    msg = MIMEText('Server CPU or memory usage is too high!')
    msg['Subject'] = EMAIL_SUBJECT
    msg['From'] = EMAIL_FROM
    msg['To'] = EMAIL_TO

    smtp_server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
    smtp_server.ehlo()
    smtp_server.starttls()
    smtp_server.login(SMTP_USERNAME, SMTP_PASSWORD)
    smtp_server.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string())
    smtp_server.quit()
```

以上代码使用了 psutil 库来获取服务器 CPU 和内存使用率并进行监控。如果监测到使用率超过了设定的阈值（这里是 80%），则会发送一封报警邮件到设定的收件人邮箱。请注意，为了能够发送邮件，需要提供一个有效的 SMTP 服务器和对应的用户名和密码。

可以将此脚本设为定时任务，比如每 5 分钟检查一次服务器状态，并在必要时发送报警邮件。