10. Add the following statements shown in bold to the body of the
dateCompare method:
Click here to view code image
private int dateCompare(DateTime leftHandSide, DateTime
rightHandSide)
{
    int result = 0;
Download from finelybook PI:EMAIL
187
    if (leftHandSide.Year  rightHandSide.Year)
    {
        result = 1;
    }
}
Note Don’t try to build the application yet. The dateCompare
method is not complete, and the build will fail.
If the expression leftHandSide.Year  rightHandSide.Year is true, the date in
leftHandSide must be later than the date in rightHandSide, and the
program sets the result variable to 1.
If the expression leftHandSide.Year  rightHandSide.Year is also false, the
Year property of both dates must be the same, so the program needs to
compare the months in each date.
11. Add the following statements shown in bold to the body of the
dateCompare method. Type them immediately after the code you
entered in the preceding step:
Click here to view code image
private int dateCompare(DateTime leftHandSide, DateTime
rightHandSide)
{
    ...
    else if (leftHandSide.Month  rightHandSide.Month)
    {
        result = 1;
    }
}
These statements compare months following a logic similar to that used
to compare years in the preceding step.
If the expression leftHandSide.Month  rightHandSide.Month is also
false, the Month property of both dates must be the same, so the program
finally needs to compare the days in each date.
12. Add the following statements shown in bold to the body of the
dateCompare method after the code you entered in the preceding two
steps. Also, remove the return 42 statement that you added earlier:
Click here to view code image
private int dateCompare(DateTime leftHandSide, DateTime
rightHandSide)
{
    ...
    else if (leftHandSide.Day  rightHandSide.Day)
    {
        result = 1;
    }
    else
    {
       result = 0;
    }
    return result;
}
You should recognize the pattern in this logic by now.
If leftHandSide.Day 
rightHandSide.Day both are false, the value in the Day properties in
both variables must be the same. The Month values and the Year values
must also be identical, respectively, for the program logic to have
Download from finelybook PI:EMAIL
189
reached this point, so the two dates must be the same, and the program
sets the value of result to 0.
The final statement returns the value stored in the result variable.
13. On the Debug menu, click Start Debugging to rebuild and run the
application.
14. Click Compare.
The following text appears in the text box:
Click here to view code image
firstDate == secondDate : True
firstDate != secondDate : False
firstDate   secondDate: False
firstDate >= secondDate: True
These are the correct results for identical dates.
15. Use the DatePicker controls to select a later date for the second date and
then click Compare.
The following text appears in the text box:
Click here to view code image
firstDate == secondDate: False
firstDate != secondDate: True
firstDate   secondDate: False
firstDate >= secondDate: False
Again, these are the correct results when the first date is earlier than the
second date.
16. Test some other dates, and verify that the results are as you would
expect. Return to Visual Studio 2017 and stop debugging when you
have finished.
Comparing dates in real-world applications
Download from finelybook PI:EMAIL
190
Now that you have seen how to use a rather long and complicated
series of if and else statements, I should mention that this is not the
technique you would employ to compare dates in a real-world
application. If you look at the dateCompare method from the
preceding exercise, you will see that the two parameters,
leftHandSide and rightHandSide, are DateTime values. The logic
you have written compares only the date part of these parameters,
but they also contain a time element that you have not considered
(or displayed). For two DateTime values to be considered equal,
they should have not only the same date but also the same time.
Comparing dates and times is such a common operation that the
DateTime type actually has a built-in method called Compare for
doing just that: it takes two DateTime arguments and compares
them, returning a value indicating whether the first argument is
less than the second, in which case the result will be negative;
whether the first argument is greater than the second, in which case
the result will be positive; or whether both arguments represent the
same date and time, in which case the result will be 0.
Using switch statements
Sometimes when you write a cascading if statement, each of the if statements
look similar because they all evaluate an identical expression. The only
difference is that each if compares the result of the expression with a different
value. For example, consider the following block of code that uses an if
statement to examine the value in the day variable and work out which day of
the week it is:
Click here to view code image
if (day == 0)
{
    dayName = "Sunday";
}
else if (day == 1)
{
    dayName = "Monday";
}
Download from finelybook PI:EMAIL
191
else if (day == 2)
{
    dayName = "Tuesday";
}
else if (day == 3)
{
    ...
}
else
{
    dayName = "Unknown";
}
Often in these situations, you can rewrite the cascading if statement as a
switch statement to make your program more efficient and more readable.
Understanding switch statement syntax
The syntax of a switch statement is as follows (switch, case, and default are
keywords):
Click here to view code image
switch ( controllingExpression )
{
    case constantExpression :
        statements
        break;
    case constantExpression :
        statements
        break;
    ...
    default :
        statements
        break;
}
The controllingExpression, which must be enclosed in parentheses, is
evaluated once. Control then jumps to the block of code identified by the
constantExpression whose value is equal to the result of the
controllingExpression. (The constantExpression identifier is also called a
case label.) Execution runs as far as the break statement, at which point the
switch statement finishes and the program continues at the first statement that
follows the closing brace of the switch statement. If none of the
constantExpression values is equal to the value of the controllingExpression,
the statements below the optional default label run.
Download from finelybook PI:EMAIL
192
Note Each constantExpression value must be unique so that the
controllingExpression will match only one of them. If the value of the
controllingExpression does not match any constantExpression value
and there is no default label, program execution continues with the first
statement that follows the closing brace of the switch statement.
So, you can rewrite the previous cascading if statement as the following
switch statement:
Click here to view code image
switch (day)
{
    case 0 :
        dayName = "Sunday";
        break;
    case 1 :
        dayName = "Monday";
        break;
    case 2 :
        dayName = "Tuesday";
        break;
    ...
    default :
        dayName = "Unknown";
        break;
}
Following the switch statement rules
The basic switch statement is very useful, but unfortunately, you can’t always
use it when you might like to. Any switch statement you write must adhere to
the following rules:
You can use switch only on certain data types, such as int, char, or
string. With any other types (including float and double), you must use
an if statement.
The case labels must be constant expressions, such as 42 if the switch
Download from finelybook PI:EMAIL
193
data type is an int, ‘42’ if the switch data type is a char, or “42” if the
switch data type is a string. If you need to calculate your case label
values at runtime, you must use an if statement.
The case labels must be unique expressions. In other words, two case
labels cannot have the same value.
You can specify that you want to run the same statements for more
than one value by providing a list of case labels and no intervening
statements, in which case the code for the final label in the list is
executed for all cases in that list. However, if a label has one or more
associated statements, execution cannot fall through to subsequent
labels; in this case, the compiler generates an error. The following code
fragment illustrates these points:
Click here to view code image
switch (trumps)
{
    case Hearts :
    case Diamonds :       // Fall-through allowed - no code between
labels
        color = "Red";    // Code executed for Hearts and Diamonds
        break;
    case Clubs :
        color = "Black";
    case Spades :         // Error - code between labels
        color = "Black";
        break;
}
Note The break statement is the most common way to stop fall-through,
but you can also use a return statement to exit from the method
containing the switch statement or a throw statement to generate an
exception and abort the switch statement. The throw statement is
described in Chapter 6, “Managing errors and exceptions.”
Download from finelybook PI:EMAIL
194
switch fall-through rules
Because you cannot accidentally fall through from one case label to the
next if there is any intervening code, you can freely rearrange the
sections of a switch statement without affecting its meaning (including
the default label, which by convention is usually—but does not have to
be—placed as the last label).
C and C++ programmers should note that the break statement is
mandatory for every case in a switch statement (even the default case).
This requirement is a good thing—it is common in C or C++ programs
to forget the break statement, allowing execution to fall through to the
next label and leading to bugs that are difficult to spot.
If you really want to, you can mimic C/C++ fall-through in C# by
using a goto statement to go to the following case or default label.
Using goto, in general, is not recommended, though, and this book does
not show you how to do it.
In the following exercise, you will complete a program that reads the
characters of a string and maps each character to its XML representation. For
example, the left angle bracket character (), ampersand (&), single quotation mark (‘), and double
quotation mark (“) characters. You will write a switch statement that tests the
value of the character and traps the special XML characters as case labels.
Write switch statements
1. Start Visual Studio 2017, if it is not already running.
2. Open the SwitchStatement solution, which is located in the \Microsoft
Press\VCSBS\Chapter 4\SwitchStatement folder in your Documents
folder.
Download from finelybook PI:EMAIL
195
3. On the Debug menu, click Start Debugging.
Visual Studio 2017 builds and runs the application. The application
displays a form containing two text boxes separated by a Copy button.
4. Type the following sample text into the upper text box:
Click here to view code image
inRange = (lo = number);
5. Click Copy.
The statement is copied verbatim into the lower text box, and no
translation of the  characters occurs, as shown in the following
screen shot.
6. Return to Visual Studio 2017 and stop debugging.
7. Display the code for MainPage.xaml.cs in the Code and Text Editor
window and locate the copyOne method. It currently looks like this:
Click here to view code image
private void copyOne(char current)
Download from finelybook PI:EMAIL
196
{
    switch (current)
    {
        default:
            target.Text += current;
            break;
    }
}
The copyOne method copies the character specified as its input
parameter to the end of the text displayed in the lower text box. At the
moment, copyOne contains a switch statement with a single default
action. In the following few steps, you will modify this switch statement
to convert characters that are significant in XML to their XML mapping.
For example, the  ' :
    target.Text += "&gt;";
    break;
case '&' :
    target.Text += "&amp;";
    break;
case '\"' :
    target.Text += "&#34;";
Download from finelybook PI:EMAIL
197
    break;
case '\'' :
    target.Text += "&#39;";
    break;
Note The single quotation mark (‘) and double quotation mark (“)
have a special meaning in C#—they are used to delimit character
and string constants. The backslash (\) in the final two case labels
is an escape character that causes the C# compiler to treat these
characters as literals rather than as delimiters.
10. On the Debug menu, click Start Debugging.
11. Type the following text into the upper text box:
Click here to view code image
inRange = (lo = number);
12. Click Copy.
The statement is copied into the lower text box. This time, each
character undergoes the XML mapping implemented in the switch
statement. The target text box displays the following text:
Click here to view code image
inRange = (lo &lt;= number) &amp;&amp; (hi &gt;= number);
13. Experiment with other strings and verify that all special characters (,
&, “ , and ‘ ) are handled correctly.
14. Return to Visual Studio and stop debugging.
Summary
In this chapter, you learned about Boolean expressions and variables. You
saw how to use Boolean expressions with the if and switch statements to
Download from finelybook PI:EMAIL
198
make decisions in your programs, and you combined Boolean expressions by
using the Boolean operators.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 5, “Using compound assignment and
iteration statements.”
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Determine whether two values are
equivalent
Use the == operator or the !=
operator. For example:
answer == 42
Compare the value of two expressions
Use the , or >= operator.
For example:
age >= 21
Declare a Boolean variable
Use the bool keyword as the
type of the variable. For
example:
bool inRange;
Create a Boolean expression that is true
only if two conditions are both true
Use the && operator. For
example:
Click here to view code image
inRange = (lo <= number) &&
(number <= hi);
Create a Boolean expression that is true
if either of two conditions is true
Use the || operator. For example:
Click here to view code image
outOfRange = (number < lo) ||
(hi < number);
Download from finelybook PI:EMAIL
199
Run a statement if a condition is true
Use an if statement. For
example:
Click here to view code image
if (inRange)
    process();
Run more than one statement if a
condition is true
Use an if statement and a block.