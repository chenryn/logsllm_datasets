# 四、监控容器的传统方法
到目前为止，我们只关注了一些监控容器的技术，因此在本章中，我们将更多地关注用于监控服务的传统工具。到本章结束时，您应该知道如何使用 Zabbix 以及监控容器的各种方法。我们将在本章中讨论以下主题:
*   如何使用容器运行 Zabbix 服务器
*   如何在流浪机器上启动 Zabbix 服务器
*   如何使用 Zabbix 代理为监控容器准备我们的主机系统
*   如何在 Zabbix 网络界面中找到自己的路
# zabix
首先，什么是 Zabbix，为什么要用它？
我个人从 1.2 版本就开始使用了；Zabbix 网站对其描述如下:
> *“有了 Zabbix，就有可能从网络中收集几乎无限的数据类型。高性能实时监控意味着可以同时监控数万台服务器、虚拟机和网络设备。除了存储数据之外，可视化功能也是可用的(概图、地图、图表、屏幕等)，并且可以非常灵活地分析数据以发出警报。*
> 
> *Zabbix 为数据收集提供了出色的性能，并且可以扩展到非常大的环境。使用 Zabbix 代理可以获得分布式监控选项。Zabbix 具有基于 web 的界面、安全的用户身份验证和灵活的用户权限模式。支持轮询和捕获，本地高性能代理从几乎任何流行的操作系统收集数据；无代理监控方法也是可用的。”*
在我开始使用 Zabbix 的时候，唯一真正可行的选择如下:
*   纳吉奥斯:[https://www.nagios.org/](https://www.nagios.org/)
*   zabix:[http://www . zabix . com/](http://www.zabbix.com/)
*   Zeno ss:【http://www . Zeno ss . org/
在这三个选项中，扎比克斯似乎是当时最直白的一个。它做了足够的工作来管理我要监控的几百台服务器，而不必额外学习设置 Nagios 或 Zenoss 的复杂性；毕竟，考虑到软件的任务，我需要能够相信我已经正确设置了它。
在这一章中，虽然我将详细介绍使用 Zabbix 的设置和基础知识，但我们将只涉及其中的一些功能，这些功能不仅仅是监视您的容器。更多信息，我推荐以下作为好的起点:
*   zabix 博客:[http://blog . zabix . com](http://blog.zabbix.com)
*   zabix 2.4 手册:https://www . zabix . com/documentation/2.4/manual
*   进一步阅读:[https://www.packtpub.com/all/?search=zabbix](https://www.packtpub.com/all/?search=zabbix)
# 安装 Zabbix
从上一节的链接中你可能已经注意到了，Zabbix 中有很多移动的部分。它利用了几种开源技术，一个生产就绪的安装需要比我们在这一章中讨论的更多的计划。正因为如此，我们将快速查看安装 Zabbix 的两种方法，而不是过多地讨论细节。
## 使用容器
在撰写本文时，Docker Hub([https://hub.docker.com](https://hub.docker.com))上有超过 100 张提到 Zabbix 的 Docker 图片。从完整的服务器安装到不同的部分，如 Zabbix 代理或代理服务。
在列出的这些中，有一个是 Zabbix 自己推荐的。所以，我们来看看这个；可以在以下网址找到:
*   Docker 枢纽:【https://hub . docker . com/u/zabix/
*   项目页面:https://github . com/zabix/zabix 社区 Docker
要启动并运行`ZabbixServer`容器，我们必须首先启动一个数据库容器。让我们通过运行以下命令来重新开始我们的流浪实例:
```
[russ@mac ~]$ cd ~/Documents/Projects/monitoring-docker/vagrant-centos/
[russ@mac ~]$ vagrant destroy
default: Are you sure you want to destroy the 'default' VM? [y/N] y
==>default: Forcing shutdown of VM...
==>default: Destroying VM and associated drives...
==>default: Running cleanup tasks for 'shell' provisioner...
[russ@mac ~]$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==>default: Importing base box 'russmckendrick/centos71'...
==>default: Matching MAC address for NAT networking...
==>default: Checking if box 'russmckendrick/centos71' is up to date...
.....
==>default: => Installing docker-engine ...
==>default: => Configuring vagrant user ...
==>default: => Starting docker-engine ...
==>default: => Installing docker-compose ...
==>default: => Finished installation of Docker
[russ@mac ~]$ vagrantssh
```
现在，我们有了一个干净的环境，是时候启动我们的数据库容器了，如下所示:
```
docker run \
 --detach=true \
 --publish=3306 \
 --env="MARIADB_USER=zabbix" \
 --env="MARIADB_PASS=zabbix_password" \
 --name=zabbix-db \
million12/mariadb
```
这将从[https://hub.docker.com/r/million12/mariadb/](https://hub.docker.com/r/million12/mariadb/)下载`million12/mariadb`映像，并启动名为`zabbix-db`的容器，运行 Mariadb 10([https://mariadb.org](https://mariadb.org))用户名为`zabbix`，拥有密码`zabbix_password`。我们还在容器上打开了 MariaDB 端口`3306`，但是因为我们将从链接的容器连接到它，所以没有必要在主机上公开该端口。
现在，我们已经启动并运行了数据库容器，我们现在需要启动我们的 Zabbix 服务器容器:
```
docker run \
 --detach=true \
 --publish=80:80 \
 --publish=10051:10051 \
 --link=zabbix-db:db \
 --env="DB_ADDRESS=db" \
 --env="DB_USER=zabbix" \
 --env="DB_PASS=zabbix_password" \
 --name=zabbix \
zabbix/zabbix-server-2.4
```
这个下载映像，在编写时超过 1 GB，所以这个过程可能需要几分钟，这取决于您的连接，并启动一个名为`zabbix`的容器。它将主机上的 web 服务器(端口`80`)和 Zabbix Server 进程(端口`10051`)映射到容器，创建到我们的数据库容器的链接，设置别名`db`，并将数据库凭证作为环境变量注入，以便在容器启动时启动的脚本可以填充数据库。
您可以通过检查容器上的日志来验证一切是否按预期运行。为此，输入`docker logs zabbix`。这将在屏幕上打印容器启动时发生的详细情况:
![Using containers](img/00026.jpeg)
现在，一旦容器启动并运行，就到了我们第一次体验网络界面的时候了。在浏览器中转到`http://192.168.33.10/`，会出现欢迎页面；在开始使用 Zabbix 之前，我们需要完成安装。
在欢迎页面，点击**下一步**进入第一步。这将验证我们运行 Zabbix 服务器所需的一切都已安装。由于我们已经在一个容器中启动了它，您应该会在所有先决条件旁边看到 **OK** 。点击**下一步**进入下一步。
现在，我们需要为 web 界面配置数据库连接。在这里，您应该拥有与启动容器时相同的细节，如下图所示:
![Using containers](img/00027.jpeg)
一旦您输入了详细信息，点击**测试连接**，您应该会收到一条**确定**的信息；在此测试成功完成之前，您将无法继续。一旦您输入详细信息并有**确定**信息，点击**下一步**。
接下来，是网络接口需要连接的 Zabbix 服务器的细节；点击**下一步**这里。接下来，您将收到安装摘要。要继续，点击**下一步**，您将确认`/usr/local/src/zabbix/frontends/php/conf/zabbix.conf.php`文件已经创建。点击**完成**进入登录页面。
## 使用游民
在写这一章的时候，我想了很多关于为 Zabbix Server 服务提供另一组安装说明的事情。虽然这本书完全是关于监控 Docker 容器的，但是让一个像 Zabbix 这样的服务在一个容器内运行，感觉有点违背直觉。正因为如此，有一个流浪机器使用 Puppet 引导 Zabbix 服务器的工作安装:
```
[russ@mac ~]$ cd ~/Documents/Projects/monitoring-docker/vagrant-zabbix/
[russ@mac ~]$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==>default: Importing base box 'russmckendrick/centos71'...
==>default: Matching MAC address for NAT networking...
==>default: Checking if box 'russmckendrick/centos71' is up to date...
.....
==>default: Debug: Received report to process from zabbix.media-glass.es
==>default: Debug: Evicting cache entry for environment 'production'
==>default: Debug: Caching environment 'production' (ttl = 0 sec)
==>default: Debug: Processing report from zabbix.media-glass.es with processor Puppet::Reports::Store
```
您可能已经注意到，有大量输出流至终端，那么刚才发生了什么？首先，启动了一个 CentOS 7 游民实例，然后安装了一个 Puppet 代理。安装完成后，安装工作交给了 Puppet。使用沃纳·迪吉克曼的扎比克斯木偶模块，安装了扎比克斯服务器；有关该模块的更多详细信息，请参见其位于[https://forge.puppetlabs.com/wdijkerman/zabbix](https://forge.puppetlabs.com/wdijkerman/zabbix)的傀儡锻造页面。
与容器化版本的 Zabbix Server 不同，不需要额外的配置，因此您应该可以在[http://zabbix.media-glass.es/](http://zabbix.media-glass.es/)访问 Zabbix 登录页面(配置中硬编码了`192.168.33.11`的 IP 地址)。
## 准备我们的主机
对于本章的剩余部分，我将假设您使用的是运行在自己的流浪实例上的 Zabbix 服务器。这有助于确保您的环境与我们将要查看的 Zabbix 代理的配置一致。
为了将统计数据从我们的容器传递到 Zabbix 代理，然后再将它们暴露给 Zabbix 服务器，我们将使用 Jan Garaj 开发的`Zabbix-Docker-Monitoring` Zabbix 代理模块进行安装。有关该项目的更多信息，请参见以下网址:
*   项目页面:[https://github . com/Monitoring artist/Zabbix-Docker-Monitoring/](https://github.com/monitoringartist/Zabbix-Docker-Monitoring/)