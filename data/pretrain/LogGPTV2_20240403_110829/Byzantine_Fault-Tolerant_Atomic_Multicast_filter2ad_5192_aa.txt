title:Byzantine Fault-Tolerant Atomic Multicast
author:Paulo R. Coelho and
Tarcisio Ceolin Junior and
Alysson Bessani and
Fernando Lu&apos;ıs Dotti and
Fernando Pedone
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Byzantine Fault-Tolerant Atomic Multicast
Paulo Coelho
∗†
, Tarcisio Ceolin Junior
‡§
, Alysson Bessani
¶
§
, Fernando Dotti
∗
and Fernando Pedone
∗
Universit`a della Svizzera italiana - Switzerland
†
Universidade Federal de Uberlˆandia - Brazil
Universidade Federal de Santa Maria - Brazil
‡
§
¶
Escola Polit´ecnica, Pontif´ıcia Universidade Cat´olica do Rio Grande do Sul - Brazil
LaSIGE, Faculdade de Ciˆencias, Universidade de Lisboa - Portugal
Abstract—Atomic multicast is an important building block in
the architecture of scalable and highly available services. Atomic
multicast reliably propagates and orders messages addressed to
one or more groups of processes. Despite the large body of
literature on atomic multicast, existing protocols target benign
failures. This paper presents ByzCast, the ﬁrst Byzantine Fault-
Tolerant atomic multicast. Byzantine Fault Tolerance has become
increasingly appealing as services can be deployed in inexpensive
hardware (e.g., cloud environments) and new applications (e.g.,
blockchain) become more sensitive to malicious behavior. ByzCast
has two important characteristics: it was designed to use existing
BFT abstractions and it scales with the number of groups,
for messages addressed to a single group. We discuss the
design of ByzCast and how it can be optimized for particular
workloads. Besides proposing a novel atomic multicast protocol,
we extensively assess its performance experimentally.
I. INTRODUCTION
Modern online services are expected to be always available
and scalable. High demand for services that can tolerate
failures and sustain ever-increasing load has led to different
designs and tradeoffs. According to the guarantees provided
to service users, two classes of solutions exist. Systems that
provide weak consistency (e.g., [1], [2], [3], [4]) can typically
deliver high performance at the cost of exposing non-intuitive
application behavior to the users. Systems that focus on strong
consistency (e.g., linearizability [5]) provide more intuitive
service behavior but require requests to be ordered across the
system before they can be executed by the servers [6], [7].
Atomic multicast is a fundamental communication abstrac-
tion in the design space of strongly consistent distributed
systems. Atomic multicast abstracts the complexity involved
in reliably propagating and ordering requests, and in doing
so it provides stronger communication guarantees than “best-
effort” network-level communication (e.g., IP multicast). With
atomic multicast, processes can multicast messages to different
groups of destination processes (e.g., different shards) with the
guarantee that destinations will reliably deliver these messages
in acyclic order. Acyclic order implies that destinations deliver
common messages consistently. As a result, application pro-
grammers can focus on the inherent complexity of a service
and rely on atomic multicast to handle communication that
scales (with the number of destinations) and tolerates failures.
Although research on efﬁcient atomic multicast protocols
is relatively mature [8], [9], [10], [11], to date all existing
protocols target benign failures (e.g., crash failures) [12],
[13], [14], [15]. In this paper, we introduce ByzCast, the
ﬁrst Byzantine Fault-Tolerant (BFT) atomic multicast protocol.
Byzantine fault tolerance has become increasingly appealing
as service providers can deploy their systems in increasingly
inexpensive hardware (e.g., cloud environments) and new
applications become more and more sensitive to malicious
behavior (e.g., blockchain [16]).
ByzCast’s design was motivated by two driving forces:
(i) The desire to reuse existing BFT tools and libraries,
instead of coming up with protocols that would require an
implementation from scratch. (ii) The perception that
the
usefulness of atomic multicast lies in its ability to deliver
scalable performance. On the one hand, much effort has been
put into designing, implementing, debugging and performance-
tuning BFT atomic broadcast protocols (i.e., a special case
of atomic multicast in which messages always address the
same set of destinations) [17], [18], [19], [20], [21]. We
would like to build on these solutions and thereby shorten
the development cycle of our BFT atomic multicast protocol.
On the other hand, it would not be difﬁcult to achieve the
ﬁrst goal above with a naive atomic multicast protocol that
trivially relies on atomic broadcast. For example, one could
use a ﬁxed group of processes to order all multicast messages
(using atomic broadcast) and then relay the ordered messages
to their actual destinations. Instead, one should aim at atomic
multicast protocols that are genuine, that is, only the message
sender and the message destinations should communicate to
order multicast messages [22]. A genuine atomic multicast is
the foundation of scalable systems, since it does not depend
on a ﬁxed group of processes and does not involve processes
unnecessarily.
the resulting protocol
ByzCast conciliates these goals with a compromise between
reusability and scalability:
is more
complex than the naive variant described above and partially
genuine. ByzCast is partially genuine in that messages atom-
ically multicast to a single group of processes only require
coordination between the message sender and the destination
group; messages addressed to multiple groups of processes,
however, may involve processes that are not part of the destina-
tion (i.e., these processes help order the messages though). We
motivate partially genuine atomic multicast protocols with the
observation that when sharding a service state for performance,
service providers strive to maximize the number of requests
that can be served by a single shard alone.
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00017
39
ByzCast is a hierarchical protocol. It uses an overlay tree
where a node in the tree is a group of processes. Each group
of processes runs an instance of atomic broadcast that encom-
passes the processes in the group. Hence, ordering messages
multicast to a single group is easy enough: it sufﬁces to use
the atomic broadcast instance implemented by the destination
group. Ordering messages that address multiple groups is
trickier. First, it requires ordering such a message in the lowest
common ancestor group of the message’s destinations (in the
worst case the root). Then, the message is successively ordered
by the lower groups in the tree until it reaches the message’s
destination groups. The main invariant of ByzCast is that the
lower groups in the tree preserve the order induced by the
higher groups.
In addition to proposing a partially genuine atomic multicast
protocol that builds on multiple instances of atomic broadcast
(one instance per group of processes), we also consider the
problem of building an efﬁcient overlay tree. The structure
of the overlay tree is mostly important for messages that
address multiple groups. In its simplest form, one could have
a two-level tree: any messages that address more than one
destination would be ﬁrst ordered by the root group and
then by the destination groups, the leaves of the tree. In this
simple tree, however, the root could become a performance
bottleneck. More efﬁcient solutions, based on more complex
trees, are possible if one accounts for the workload when
computing ByzCast’s overlay tree. We frame this discussion
as an optimization problem.
This paper makes the following contributions:
• We present a partially genuine atomic multicast protocol
that builds on multiple instances of atomic broadcast, a
problem that has been extensively studied and efﬁcient
libraries exist (e.g. [23], [24], [25], [18]).
• We deﬁne the problem of building an overlay tree as an
optimization problem. Our optimization model takes into
account the frequency of messages per destination and
the performance of a group alone.
• We describe a prototype of ByzCast developed using
BFT-SMaRt [18], a well-established library that imple-
ments BFT atomic broadcast.
• We provide a detailed experimental evaluation of ByzCast
and compare it to a naive atomic multicast solution.
The rest of the paper is organized as follows. Section II in-
troduces the system model and deﬁnitions. Section III presents
ByzCast, its performance optimizer, and correctness proof.
Section IV details our prototype. Section V describes our
experimental evaluation. Section VI surveys related work and
Section VII concludes the paper.
II. SYSTEM MODEL AND DEFINITIONS
In this section, we detail our system model (§II-A) and recall
the deﬁnitions of atomic multicast (§II-B), atomic broadcast
(§II-C), and state machine replication (§II-D).
A. Processes, groups, and communication
We consider a distributed system with an unbounded set of
client processes C = {c1, c2, ...} and a bounded set of server
processes S = {p1, ..., pn
}, where clients and servers are
disjoint. Processes communicate by exchanging messages and
do not have access to a shared memory or a global clock. The
system is asynchronous: messages may experience arbitrarily
large (but ﬁnite) delays and there is no bound on relative
process speeds.
Client and server processes can be correct or faulty. A
correct process follows its speciﬁcation whilst a faulty process
can present arbitrary (i.e., Byzantine) behavior. We deﬁne Γ =
} as the set of server process groups in the system.
{g1, ..., gm
g∈Γ g = S. We
Groups are disjoint, non-empty, and satisfy
assume each group contains 3f + 1 processes, where f is the
maximum number of faulty server processes per group [26],
[27].
(cid:2)
We use cryptographic techniques for authentication, and
digest calculation. We assume that adversaries (and Byzantine
processes under their control) are computationally bound so
that they are unable, with very high probability, to subvert
the cryptographic techniques used. Adversaries can coordinate
Byzantine processes and delay correct processes in order to
cause the most damage to the system. Adversaries cannot,
however, delay correct processes indeﬁnitely.
B. Atomic Multicast
For every message m, m.dst denotes the groups to which m
is multicast. If |m.dst| = 1 we say that m is a local message;
if |m.dst| > 1 we say that m is a global message.
A process atomically multicasts a message m by invoking
primitive a-multicast(m) and delivers m with a-deliver(m). We
deﬁne the relation < on the set of messages correct processes
a-deliver as follows: m < m(cid:3) iff there exists a correct process
that a-delivers m before m(cid:3).
Atomic multicast satisﬁes the following properties [28]:
• Validity: If a correct process p a-multicasts a message
m, then eventually all correct processes q ∈ g, where
g ∈ m.dst , a-deliver m.
• Agreement: If a correct process p a-delivers a message
m, then eventually all correct processes q ∈ g, where
g ∈ m.dst , a-deliver m.
• Integrity: For any correct process p and any message m, p
a-delivers m at most once, and only if p ∈ g, g ∈ m.dst ,
and m was previously a-multicast.
• Preﬁx order: For any two messages m and m(cid:3) and any
two correct processes p and q such that p ∈ g, q ∈ h
and {g, h} ⊆ m.dst ∩ m(cid:3).dst , if p a-delivers m and q
a-delivers m(cid:3), then either p a-delivers m(cid:3) before m or q
a-delivers m before m(cid:3).
• Acyclic order: The relation < is acyclic.
An atomic multicast algorithm A is genuine if and only if
for any admissible run R of A and for any correct process p
in R, if p sends or receives a message, then some message m
is a-multicast, and either (a) p is the process that a-multicasts
m or (b) p ∈ g and g ∈ m.dst [22].
40
C. Atomic Broadcast
B. Protocol
Atomic broadcast is a special case of atomic multicast in
which there is a single group of server processes. In this
paper, we assume that each group implements FIFO atomic
broadcast, which in addition to the properties presented above,
also ensures the following property.
• FIFO order: If a correct process broadcasts a message
m before it broadcasts a message m(cid:3), no correct process
delivers m(cid:3) unless it has previously delivered m.
D. State machine replication
State machine replication is a well-established approach to
fault tolerance [6], [7]. The idea is that by executing service
requests deterministically in the same order, correct replicas
will transition through the same sequence of state changes
and produce the same output for every request. In a system
with f Byzantine replicas, a client knows that a request was
successfully executed when it receives f +1 identical responses
from the servers. Atomic broadcast can be used to guarantee
that replicas deliver requests in the same order.
With state machine replication, every server has a full copy
of the service state. Several approaches have proposed to shard
the service state and handle each shard as a replicated state
machine (e.g., [29], [30], [31], [32]). Atomic multicast is a
natural abstraction to order requests in a sharded replicated
system. Requests that can be entirely executed within a shard
are multicast to the required shard; requests that involve data
in multiple shards must be consistently multicast to all target
shards.
State machine replication provides linearizability, a consis-
tency criteria. A system is linearizable if it satisﬁes the follow-
ing requirements [5]: (i) It respects the real-time ordering of
requests across all clients. There exists a real-time order among
any two requests if one request ﬁnishes at a client before the
other request starts at a client. (ii) It respects the semantics of
the requests as deﬁned in their sequential speciﬁcation.
III. BYZANTINE FAULT TOLERANT ATOMIC MULTICAST
In this section, we explain the rationale behind the design of
ByzCast (§III-A), present the protocol in detail (§III-B), show
how to optimize ByzCast for different workloads (§III-C), and
then argue about its correctness (§III-D).
A. Rationale
The design of ByzCast was guided by two high-level goals:
1) Building on existing solutions: Research on Byzantine
Fault Tolerant agreement protocols is mature (see §VI). One
of our main goals was to devise an atomic multicast protocol
that could reuse existing BFT software, instead of designing
a protocol that would require an implementation completely
from scratch.
2) Striving for scalable protocols: Genuineness is the prop-
erty that best captures scalability in atomic multicast. By
requiring only the groups in the destination of a message to
coordinate to order the message, a genuine atomic multicast
protocol can scale with the number of groups while saving
resources.
For clarity, we describe a version of ByzCast that uses
additional groups of servers to help order messages. Hereafter,
we refer to the groups in Γ = {g1, ..., gm
} as target groups and
} as auxiliary
the additional server groups in Λ = {h1, ..., hn
groups. As with target groups, each auxiliary group has 3f +1
processes, with at most f faulty processes.
Each group x in ByzCast (both target and auxiliary) im-
plements a FIFO atomic broadcast. The atomic broadcast in
group x is implemented by x’s members and independent from
the atomic broadcast of other groups. We distinguish between
the primitives of atomic multicast, denoted as a-multicast and
a-deliver, and the primitives of the atomic broadcast of group
x, denoted as x-broadcast and x-deliver.
ByzCast arranges groups in a tree overlay where the leaves
of the tree are target groups and the inner nodes of the tree are
auxiliary groups. We deﬁne the reach of a group x, reach(x),
as the set of target groups that can be reached from x by walk-
ing down the tree. In Fig. 1 (a), reach(h1) = {g1, g2, g3, g4},
reach(h2) = {g1, g2}, and reach(h3) = {g3, g4}. We denote
the children of a group x in the tree as children(x).
To a-multicast a message m to a set of target groups in
m.dst (see Algorithm 1), a process ﬁrst x0-broadcasts m in the
lowest common ancestor group x0 of (the groups in) m.dst,
denoted lca(m.dst).
Alg. 1 ByzCast
1: Initialization
2:
3: A-delivered ← ∅
T is an overlay tree with groups Γ ∪ Λ
4: To a-multicast message m:
5:
x0 ← lca(m.dst)
x0-broadcast(m)
6:
{lowest common ancestor of m.dst}
7: Each server process p in group xk executes as follows:
8:
when xk-deliver(m)
if k = 0 or xk-delivered m (f + 1) times then
for each xk+1 ∈ children(xk
) such that
m.dst ∩ reach(xk+1) (cid:8)= ∅ do
9:
10:
11:
12:
13:
14:
xk+1-broadcast(m)
if xk
∈ m.dst and m (cid:8)∈ A-delivered then
a-deliver(m)
A-delivered ← A-delivered ∪ {m}
When m is xk-delivered by processes in xk, each process
xk+1-broadcasts m in xk’s child group xk+1 if xk+1’s reach
intersects m.dst. This procedure continues until target groups
in m.dst xk-deliver m, which triggers the a-deliver of m.
To account for Byzantine processes in group xk, processes
in xk+1 only handle m once they xk+1-deliver m f + 1 times.
This ensures that m was xk+1-broadcast by at least one correct
process in xk and, by inductive reasoning, m was a-multicast
by a client (and not fabricated by a malicious server).
Intuitively, ByzCast atomic order is a consequence of two
invariants:
41