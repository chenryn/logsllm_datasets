to κ bits. Speciﬁcally, each garbler Pi (i (cid:54)= 1) sends zi = H({M1[ti
M1[t1
w] :=(cid:76)
(cid:76)
we have that (cid:76)
From the almost-universal property, we have(cid:76)
w] = t1
P1 computes z1 := H({M1[t1
(cid:0)K1[ti
w](cid:1) =(cid:76)
w∆1 ⊕(cid:76)
w]}w∈W ), and then checks that(cid:76)
w]}w∈W ) = H({(cid:76)
i∈[n] zi =(cid:76)
i∈[n] H({M1[ti
i(cid:54)=1
i∈[n] M1[ti
w]}w∈W ) = 0.
w,Λw
w,Λw
i∈[n] M1[ti
To prevent the attack mentioned above, we let P1 send hi = H({Li
w] = 0 for w ∈ W. We can use a polynomial
hash based on GMAC to instantiate the linear hash function H, whose computation is blazing fast given
hardware-instruction support.
}w∈W ) to every garbler Pi who
checks that hi = H({Li
w,0⊕Λw∆i}w∈W ). Through the approach, every garbler Pi can check the correctness
of the public values sent by P1, because evaluator P1 can learn only one garbled label for each wire and
garbled label Li
can be viewed as an MAC on bit Λw. After the circuit authentication procedure, all
parties can obtain the correct public values, which allows our protocol to support multi-output functions in
a straightforward way. We give the detailed protocol in Section 4 and the full proof in Appendix E.
2.7 Other Optimization
In the WRK protocol [WRK17b], the input bits are masked with authenticated shares. However we ob-
serve that this is not necessary and that an extended form of authenticated bits is already sufﬁcient. In-
tuitively, since every party can arbitrarily choose its input, and thus the shares from all other parties can
be set to 0. We deﬁne a useful operation called Bit2Share, which takes as input an authenticated bit
(cid:1) with bit λ known by Pi, and extends it to an authenticated share (cid:104)λ(cid:105) as
[λ]i =(cid:0)λ,{Mk[λ]}k(cid:54)=i,{Kk[λ]}k(cid:54)=i
– Set [λi]i := [λ]i: Pi sets λi := λ and(cid:8)Mk[λi] := Mk[λ](cid:9)
k(cid:54)=i, Pk sets Kk[λi] := Kk[λ] for each k (cid:54)= i;
follows:
– Set [λj]j := [0]j for each j (cid:54)= i: Pj sets λj := 0 and {Mk[λj] := 0}k(cid:54)=j, and Pk deﬁnes Kk[λj] := 0 for
each k (cid:54)= j.
In our protocol, the circuit-input wires are processed using the above procedure instead of a full-ﬂedged
authenticated shares. This is partially effective when the input is large (See Section 5). A similar idea is
used in the semi-honest MPC protocol [BLO16], where the MACs need not to be considered.
3 Improved Preprocessing Protocols
In this section, we present the details of our optimizations for faster authenticated AND triple generation.
Since we have discussed the key insights and high-level ideas of the preprocessing protocols in Section 2,
here we will focus on detailed description of the protocols and their proofs of security.
In Section 3.1, we will present our improved multi-party authenticated bit protocol with a detailed proof
of security. Then in Section 3.2, we will show the authenticated share protocol with an improved global-
key consistency check. We defer the detailed description and security proof of the improved protocol for
authenticated AND triples to Appendix D.
Our protocols for authenticated bits, shares and AND triples jointly implement the preprocessing func-
tionality Fprep as shown in Figure 1. In functionality Fprep, we allow the adversary to make multiple (leak)
queries on the same index i /∈ A. Each bit guess of ∆i made by the adversary will be caught with probabil-
ity 1/2. For each (leak) query, the adversary needs to provide a subset S ⊆ [κ] representing the positions
in which the guessed bits locate. Our MPC protocol with improved authenticated garbling as shown in
Section 4 will work in the Fprep-hybrid model.
12
Functionality Fprep
This functionality runs with parties P1, . . . , Pn. Let A ⊂ [n] be the set of corrupt parties.
Initialize: Upon receiving (init) from all parties, sample ∆i ← {0, 1}κ for i /∈ A and receive ∆i ∈ {0, 1}κ from
the adversary for i ∈ A. Store ∆i for i ∈ [n] and send ∆i to party Pi.
Macro AuthBit(i, x) (this is an internal subroutine only)
1. If Pi is corrupted, receive an MAC Mj[x] ∈ {0, 1}κ from the adversary and compute Kj[x] := Mj[x] ⊕ x∆j
for each j (cid:54)= i.
2. Otherwise, sample honest parties’ keys Kj[x] ← {0, 1}κ for j /∈ A, j (cid:54)= i. Receive keys Kj[x] for j ∈ A from
the adversary. Compute the MACs Mj[x] := Kj[x] ⊕ x∆j for j (cid:54)= i.
3. Output (x,{Mj[x]}j(cid:54)=i) to Pi and Kj[x] to Pj for j (cid:54)= i.
Authenticated bits/shares/triples: This functionality generates random authenticated bits, shares and triples as
follows:
1. Upon receiving (aBit, i) from all parties, sample x ← {0, 1} if Pi is honest and receive x ∈ {0, 1} otherwise,
and then generate a (random) authenticated bit [x]i by executing AuthBit(i, x).
2. Upon receiving (aShare) from all parties, sample x ← {0, 1}, and then execute the following macro
AuthShare(x) to generate a random authenticated share (cid:104)x(cid:105):
– Receive xi ∈ {0, 1} from the adversary for i ∈ A ; sample xi ← {0, 1} for i /∈ A such that(cid:76)
i∈[n] xi = x.
– For each i ∈ [n], execute AuthBit(i, xi).
3. Upon receiving (aAND) from all parties, sample random bits a, b ← {0, 1}, compute c := a ∧ b, and generate
a random authenticated AND triple ((cid:104)a(cid:105),(cid:104)b(cid:105),(cid:104)c(cid:105)) via running AuthShare(x) for each x ∈ {a, b, c}.
Selective failure leakage: Wait for the adversary to input (leak, i, S,{∆(cid:48)[k]}k∈S). If Pi is honest, this function-
ality executes the macro GKleak(i, S,{∆(cid:48)[k]}k∈S) deﬁned as follows:
– If there exists some k ∈ S such that ∆(cid:48)[k] (cid:54)= ∆i[k], this functionality sends fail to all parties and aborts.
– Otherwise, it sends success to the adversary and proceeds as if nothing has happened.
Figure 1: The multi-party preprocessing functionality.
3.1 Optimized Multi-Party Authenticated Bits
We propose a new protocol ΠaBit to generate authenticated bits in the multi-party malicious setting. Our
protocol uses a correlated OT with errors functionality FCOTe [KOS15] shown in Figure 2. In functionality
FCOTe, if a receiver PR is honest, it will input a “monochrome” vector xi = xi · (1, . . . , 1) for i ∈ [(cid:96)] and
xi ∈ {0, 1}, which results in the correct correlation, i.e., M[xi] = K[xi] + xi · ∆. If PR is malicious, it may
input a “polychromatic” vector xi (cid:54)= xi · (1, . . . , 1) for i ∈ [(cid:96)], which results in M[xi] = K[xi] + xi ∗ ∆,
where xi ∗ ∆ = (xi[1] · ∆[1], . . . , xi[κ] · ∆[κ]). We can rewrite xi = xi · (1, . . . , 1) + ei, and get M[xi] =
K[xi]+xi·∆+ei∗∆, where ei ∈ Fκ
2 is an error vector counting the number of positions in which PR cheated.
An efﬁcient protocol, which implements the functionality FCOTe, has been described in [Nie07, KOS15].
This protocol is the same as the IKNP OT extension protocol [IKNP03, ALSZ13], except that it terminates
before hashing the output with the random oracle to break the correlation and executing the ﬁnal round of
communication. Nielsen [Nie07] has shown that the protocol securely realizes the functionality FCOTe.
We present the details of our protocol ΠaBit in Figure 4, where ΠaBit works in the (FCOTe,FRand)-
hybrid model. The bits sampled by a party Pi in our protocol are authenticated by weak global keys, where
13
Functionality FCOTe
Initialize: Upon receiving (init, ∆) from a sender PS where global key ∆ ∈ Fκ
store ∆ and ignore all subsequent (init) commands.
Extend: Upon receiving (extend, (cid:96), x1, . . . , x(cid:96)) from PR where xi ∈ Fκ
ality does the following:
1. For each i ∈ [(cid:96)], sample K[xi] ← Fκ
2. Compute M[xi] := K[xi] + xi ∗ ∆ ∈ Fκ
3. If PR is corrupted, receive M[xi] ∈ Fκ
4. For each i ∈ [(cid:96)], output K[xi] to PS and M[xi] to PR.
2. If PS is corrupted, instead receive K[xi] ∈ Fκ
2 for each i ∈ [(cid:96)], where ∗ denotes component-wise product.
2 from the adversary and recompute K[xi] := M[xi] + xi ∗ ∆.
2, and (init) from a receiver PR,
2, and (extend, (cid:96)) from PS, this function-
2 from the adversary.
Figure 2: Functionality for correlated OT with errors.
Functionality FaBit
This functionality generates random bits known by a party Pi and authenticated to all other parties.
Initialize: Upon receiving (init, i) from Pi and (init, i, ∆j) from Pj for j (cid:54)= i where ∆j ∈ {0, 1}κ, store ∆j for
j (cid:54)= i and ignores all subsequent (init) commands.
Authentication: Upon receiving (aBit, i, (cid:96)) from all parties, sample x1, . . . , x(cid:96) ← {0, 1} if Pi is honest, and
receive bits {xk}k∈[(cid:96)] from the adversary otherwise. Generate (cid:96) authenticated bits {[xk]i}k∈[(cid:96)] by running
AuthBit(i, xk) deﬁned in Figure 1 for k ∈ [(cid:96)].
Selective failure leakage: If Pi is corrupted, wait for the adversary to input (leak, j, S,{∆(cid:48)[k]}k∈S). If Pj is
honest, this functionality executes GKleak(j, S,{∆(cid:48)[k]}k∈S) as deﬁned in Figure 1.
Figure 3: Functionality for multi-party authenticated bits.
the adversary is allowed to guess a few bits on the global keys of honest parties. We use a functionality
FaBit shown in Figure 3 to deﬁne authenticated bits with selective failure leakage of global keys. In the
(init) command of FaBit, an honest party Pj will input a random global key ∆j, while a corrupt party Pj
allows to send an arbitrary string ∆j ∈ {0, 1}κ. By the (leak) command of FaBit, the adversary may guess
a few bits of global key ∆j for j /∈ A. A correct guess keeps undetected, while an incorrect guess will
be caught. In particular, while the adversary succeeds to leak cj bits of ∆j with probability 2−cj for some
cj ∈ [κ] ∪ {0}, the remaining κ − cj bits of ∆j are still uniform and unknown from the adversary’s view.
Security of our authenticated bit protocol. We ﬁrst analyze the checking procedure (Steps 5−7) of pro-
tocol ΠaBit shown in Figure 4 and give several important lemmas. The analysis and lemmas can be found in
Appendix B.1. Then, we prove the security of our authenticated bit protocol ΠaBit in the following theorem.
The full formal proof of the theorem is postponed to Appendix B.2.
Theorem 1. Protocol ΠaBit shown in Figure 4 securely realizes functionality FaBit with statistical error
max{1/2ρ, 8/2κ} in the (FCOTe,FRand)-hybrid model.
Optimization and communication complexity. We ﬁrst optimize the generation of random coefﬁcients
in Step 5 of protocol ΠaBit described in Figure 4. Speciﬁcally, instead of calling functionality FRand, the
parties can use the Fiat-Shamir heuristic to compute the random coefﬁcients {χk}k∈[(cid:96)(cid:48)] by hashing the
transcript during the authenticated bit generation procedure, which is secure in the random oracle model.
This optimization reduces the communication rounds of protocol ΠaBit by two rounds.
14
Protocol ΠaBit
Let (cid:96)(cid:48) = (cid:96) + (κ + ρ). A party Pi generates (cid:96) bits authenticated by all other parties.
Initialize: All parties initialize the protocol as follows:
1. For each j (cid:54)= i, Pj picks a random global key ∆j ← {0, 1}κ.
2. For j (cid:54)= i, Pj sends (init, ∆j) to FCOTe; Pi sends (init) to FCOTe.
Generate authenticated bits: The parties generate (cid:96)(cid:48) authenticated bits without correctness guarantee as follows:
3. Pi picks random bits x1, . . . , x(cid:96)(cid:48) ← {0, 1}, and then sets a monochrome vector xk := xk · (1, . . . , 1) ∈ Fκ
2
for each k ∈ [(cid:96)(cid:48)].
4. For each j (cid:54)= i, Pj and Pi call FCOTe on respective inputs (extend, (cid:96)(cid:48)) and (extend, (cid:96)(cid:48), x1, . . . , x(cid:96)(cid:48)), which
returns the keys {Kj[xk]}k∈[(cid:96)(cid:48)] to Pj and the MACs {Mj[xk]}k∈[(cid:96)(cid:48)] to Pi.
Check correlation and consistency: The parties check the correlation of their outputs from FCOTe and the
consistency of Pi’s inputs in multiple calls of FCOTe as follows:
5. The parties call coin-tossing functionality FRand to obtain (cid:96)(cid:48) random coefﬁcients χ1, . . . , χ(cid:96)(cid:48) ∈ F2κ.
6. Pi locally computes over F2κ the value yi := (cid:80)(cid:96)(cid:48)
7. For each j (cid:54)= i, Pj computes Kj[yi] :=(cid:80)(cid:96)(cid:48)
broadcasts yi to all parties. For each j (cid:54)= i, Pi also sends Mj[yi] to Pj.
k=1χk · xk, and(cid:8)Mj[yi] := (cid:80)(cid:96)(cid:48)
k=1 χk · Mj[xk](cid:9)
j(cid:54)=i and
check fails, Pj aborts.
8. The parties output (cid:96) authenticated bits [x1]i, . . . , [x(cid:96)]i with [xk]i = (xk, Mj[xk], Kj[xk]) for k ∈ [(cid:96)].
k=1χk · Kj[xk], and checks that Mj[yi] = Kj[yi] + yi · ∆j. If the
Figure 4: Protocol for generating multi-party aBits.
Improved Multi-Party Authenticated Shares
Now, we analyze the rounds and communication cost of protocol ΠaBit with the above optimization,
including the rounds and cost of the IKNP OT extension protocol [ALSZ13] realizing FCOTe. When ignoring
the communication rounds in the initialization phase, our protocol ΠaBit needs only one round. If we adopt
the base OT protocols such as [PVW08, CO15, CSW20] to implement the initialization procedure, the whole
protocol has three rounds. We ignore the communication cost of global keys setup in the initialization phase
(Step 1 and Step 2), as the setup needs to be run only once, and the one-time setup cost depends on which
base OT protocol is used and is minor for the efﬁciency of the whole protocol. The communication cost of
protocol ΠaBit is about (n − 1)((cid:96) + κ + ρ)κ bits.
3.2
We propose an efﬁcient protocol ΠaShare, which allows n parties to compute authenticated shares of secret
bits. One straightforward approach is to call FaBit n times, where in the j-th call, the parties obtain a
random authenticated bit [xj]j for a random bit xj known only by Pj. However, a malicious party Pi may
use inconsistent global keys in multiple calls of FaBit. This results in that two authenticated bits [xj0]j0
and [xj1]j1 are authenticated by two different global keys ∆i and ∆(cid:48)
i respectively. Based on a similar
observation [WRK17b], we note that the two-party functionality FCOTe has already guaranteed that Pi uses
the same global key ∆i, when Pi and Pj generate the MACs on multiple bits. Therefore, if one authenticated
share has the consistent global keys, then all authenticated shares have the consistent global keys. In our
construction, we let all parties additionally generate κ authenticated shares, and then open them to check the
consistency of global keys.
κ ∈
h · X h−1 is uniformly random over F2κ. In the following
{0, 1} are sampled at random, then yi =(cid:80)κ
The detailed construction of authenticated share protocol ΠaShare is described in Figure 5. If ri
1, . . . , ri
h=1 ri
15
Protocol ΠaShare
Initialize: All parties initialize the protocol as follows:
1. For each i ∈ [n], Pi picks a random global key ∆i ← {0, 1}κ.
2. For each i ∈ [n], for each j (cid:54)= i, Pj sends (init, i, ∆j) to FaBit.
Generate authenticated shares: All parties generate (cid:96) + κ authenticated shares without consistency guarantee
by calling FaBit.
3. For each i ∈ [n], all parties send (aBit, i, (cid:96) + κ) to FaBit, which samples xi
h]i}h∈[κ] to the parties.
sends random authenticated bits {[xi
If receiving fail from functionality FaBit, the parties abort.
k]i}k∈[(cid:96)] and {[ri
κ ← {0, 1} and
1, . . . , xi
1, . . . , ri
(cid:96), ri
Consistency check: The parties check the consistency of global keys.
4. Each party Pi locally computes over F2κ the following values:
κ(cid:88)
κ(cid:88)
κ(cid:88)
h=1
X h−1 · Ki[rj
h] for j (cid:54)= i.
over a private channel as follows:
– For each i ∈ [n] and j (cid:54)= i, Pi picks a random element ui,j ← F2κ and privately sends it to Pj.
yi :=
h · X h−1, Mj[yi] :=
ri
X h−1 · Mj[ri
h] for j (cid:54)= i, Ki[yj] :=
h=1
h=1
5. Every party Pi obtains a random zero-share ui ∈ F2κ such that(cid:80)n
(cid:0)ui,j + uj,i(cid:1) over F2κ.
– Every party Pi computes ui :=(cid:80)
computes y :=(cid:80)n
i :=(cid:80)
7. Each party Pi computes zi
i=1 ˜yi.
j(cid:54)=i
by calling the (Commit) command of FCom.
j(cid:54)=i Ki[yj] + (yi + y) · ∆i, and commits to
6. Every party Pi computes ˜yi := yi + ui, and then broadcasts it to all parties. Then, for each i ∈ [n], Pi
(cid:16)(cid:8)zi
j := Mj[yi](cid:9)