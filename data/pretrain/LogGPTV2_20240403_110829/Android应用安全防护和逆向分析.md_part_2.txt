然后用"1234"原文密码去生成加密之后的信息：
::: bodypic-c
![](OEBPS/Images/007-2-i.jpg){.calibre20}
:::
运行结果如图1-3所示。
::: bodypic-c
![](OEBPS/Images/1a3-i.jpg){.calibre21}
:::
图1-3 运行结果
可以发现内容和上面的password.key内容完全一致，也就验证了上面的分析完全正确。到这里就分析完了输入密码的加密算法，总结一点就是：MD5（输入明文密码+设备的salt）.Hex+SHA1（输入明文密码+设备的salt）.Hex就是最终的加密内容。而这里最重要的是如何获取设备的salt值，可以用反射机制进行获取，新建一个简单的Android项目：
::: bodypic-c
![](OEBPS/Images/007-3-i.jpg){.calibre22}
:::
这样就不用去查看数据库获取salt值了，方便快捷，打印的日志信息如下：
::: bodypic-c
![](OEBPS/Images/007-4-i.jpg){.calibre23}
:::
这是数据库中的long类型值转化成hex之后的值。
##### 1.2.2 手势密码算法分析 {.bodycontent-title3}
下面来分析手势密码，代码依然在LockPatternUtils.java中：
::: bodypic-c
![](OEBPS/Images/007-5-i.jpg){.calibre24}
:::
::: bodypic-c
![](OEBPS/Images/008-i.jpg){.calibre25}
:::
这个算法比较简单，就是九宫格图案转化成字节数组，然后用SHA1加密即可。关于九宫格不再多说了，从0开始顺时针计数到8，类似图1-4所示。
::: bodypic-c
![](OEBPS/Images/1a4-i.jpg){.calibre26}
:::
图1-4 九宫格\
看一下代码，有行和列之分。比如L形状的手势密码应该是00 03 06 07
08，这样组成五个字节。这里为了验证手势密码是否正确，设置一个简单的手势密码，如图1-5所示。
::: bodypic-c
![](OEBPS/Images/1a5-i.jpg){.calibre26}
:::
图1-5 简单的手势密码\
然后在/data/system目录下生成一个密码文件/data/system/gesture.key，取出来用二进制工具查看，不然可能看到的是乱码，这里用的是010Editor工具查看，如图1-6所示。
::: bodypic-c
![](OEBPS/Images/1a6-i.jpg){.calibre27}
:::
图1-6 手势密码加密内容
为了最大化地还原算法，依然把源码拷贝出来，然后定义一个手势九宫格类，构造出这个手势的点数据：
::: bodypic-c
![](OEBPS/Images/008-2-i.jpg){.calibre28}
:::
::: bodypic-c
![](OEBPS/Images/009-i.jpg){.calibre29}
:::
这是源码的加密算法，下面再构造出手势点数据：
::: bodypic-c
![](OEBPS/Images/009-2-i.jpg){.calibre30}
:::
手势点数据应该是00 01 02 05 08，打印看结果，如图1-7所示。
::: bodypic-c
![](OEBPS/Images/1a7-i.jpg){.calibre31}
:::
图1-7 运行结果
从运行结果发现，一模一样，这样就完美地分析完了手势密码加密算法。
这里再总结一下两种方式锁屏密码算法。
[第一种：输入密码算法]{.yanse}
对输入的明文密码+设备的salt值进行MD5和SHA1操作，之后转化成hex值进行拼接即可，最终加密信息保存到本地目录/data/system/password.key。
[第二种：手势密码算法]{.yanse}
将九宫格手势密码中的点数据转化成对应的字节数组，然后直接进行SHA1加密即可。最终加密信息保存到本地目录/data/system/gesture.key。
[]{#009.xhtml}
#### 1.3 本章小结 {.bodycontent-title2}
读完本章是不是迫不及待地想动手尝试一下？在操作之前一定要记住，先得到设备的salt值，然后要注意源码版本。
[]{#010.xhtml}
### 第2章 Android中NDK开发 {.bodycontent-title4}
本章主要介绍Android中的NDK开发技术相关知识，因为后续章节特别是在介绍安全应用防护和逆向应用的时候，会涉及NDK的相关知识，而且考虑到项目的安全性开发，把一些重要的代码放到底层也是很重要的，同时能提高执行效率。
[]{#011.xhtml}
#### 2.1 搭建开发环境 {.bodycontent-title2}
在搭建环境之前必须先去官网下载NDK工具包，官网地址是[http://wear.techbrood.com/tools/sdk/ndk/](http://wear.techbrood.com/tools/sdk/ndk/){.calibre32
.pcalibre}，选择相应平台的NDK版本即可。
##### 2.1.1 Eclipse环境搭建 {.bodycontent-title3}
[第一步：]{.yanse}配置NDK路径，如图2-1所示。
::: bodypic-c
![](OEBPS/Images/2a1-i.jpg){.calibre33}
:::
图2-1 配置NDK路径
[第二步：]{.yanse}新建Android项目，如图2-2所示。
::: bodypic-c
![](OEBPS/Images/2a2-i.jpg){.calibre34}
:::
图2-2 新建Android项目
点击Add Native Support，出现如图2-3所示的lib命令。
点击"Finish"，再次观察项目多了jni文件夹，如图2-4所示。
::: bodypic-c
![](OEBPS/Images/2a3-i.jpg){.calibre35}
:::
图2-3 命令lib
::: bodypic-c
![](OEBPS/Images/2a4-i.jpg){.calibre36}
:::
图2-4 添加了jni文件夹
在jni下面就可以开始编写native层的代码。
[第三步：]{.yanse}使用javah生成native的头文件，如图2-5所示。
::: bodypic-c
![](OEBPS/Images/2a5-i.jpg){.calibre37}
:::
图2-5 生成native头文件
[注意：]{.yanse}javah执行的目录，必须是类包名路径的最上层，然后执行：
::: bodypic-c
![](OEBPS/Images/012z-i.jpg){.calibre38}
:::
注意没有后缀名java。
[第四步：]{.yanse}运行项目，点击工具栏中的小锤子图标如图2-6所示。
::: bodypic-c
![](OEBPS/Images/2a6-i.jpg){.calibre39}
:::
图2-6 运行项目
运行结果如图2-7所示。
::: bodypic-c
![](OEBPS/Images/2a7-i.jpg){.calibre40}
:::
图2-7 运行结果
##### 2.1.2 Android Studio环境搭建 {.bodycontent-title3}
去官网下载NDK工具，然后使用Android
Studio中进行新建一个简单项目，然后创建JNI即可，如图2-8所示。
::: bodypic-c
![](OEBPS/Images/2a8-i.jpg){.calibre41}
:::
图2-8 创建jni
[第一步：]{.yanse}在项目中新建jni目录，如图2-9所示。
[第二步：]{.yanse}用javah命令生成native的头文件，如图2-10所示。
[第三步：]{.yanse}配置项目的NDK目录，如图2-11所示。
::: bodypic-c
![](OEBPS/Images/2a9-i.jpg){.calibre42}
:::
图2-9 新建jni目录
::: bodypic-c
![](OEBPS/Images/2a10-i.jpg){.calibre37}
:::
图2-10 生成native头文件
::: bodypic-c
![](OEBPS/Images/2a11-i.jpg){.calibre43}
:::
图2-11 配置NDK目录
选择模块的设置选项Open Module Settings，如图2-12所示。
::: bodypic-c
![](OEBPS/Images/2a12-i.jpg){.calibre44}
:::
图2-12 模块的设置选项
在其中设置NDK目录即可。
[第四步：]{.yanse}配置Gradle中的ndk选项，如图2-13所示。
::: bodypic-c
![](OEBPS/Images/2a13-i.jpg){.calibre45}
:::
图2-13 配置gradle
这里只需要设置编译之后的模块名，即so文件的名称，以及产生哪几个平台下的so文件，需要用到的lib库，这里用到了Android中打印log的库文件。
[第五步：]{.yanse}编译运行生成so文件
在build目录下生成指定的so文件，拷贝到项目的libs目录下即可，如图2-14所示。
::: bodypic-c
![](OEBPS/Images/2a14-i.jpg){.calibre46}
:::
图2-14 项目的libs目录\
[]{#012.xhtml}
#### 2.2 第一行代码：HelloWorld {.bodycontent-title2}
本节开始介绍JNI技术，先输出一个Hello
World。具体流程如下，在Java中定义一个方法，在C++中实现这个方法，在方法内部输出"Hello
World"，然后再回到Java中进行调用。
[第一步：]{.yanse}在Eclipse中建立一个类：JNIDemo。
命令如下：
::: bodypic-c
![](OEBPS/Images/014-i.jpg){.calibre47}
:::
::: bodypic-c
![](OEBPS/Images/015-i.jpg){.calibre48}
:::
其中sayHello就是要在C++中实现的方法。
[第二步：]{.yanse}使用javah命令将JNIDemo生成.h的头文件。
命令如下：
::: bodypic-c
![](OEBPS/Images/015-2-i.jpg){.calibre49}
:::
[注意：]{.yanse}
·首先要确保配置了Java的环境变量，不然javah命令不能用。
·案例的Java项目是放在E：\\workspace中的，所以首先进入项目的bin目录中，然后使用javah命令生成头文件。
·javah后面的类文件格式是类的全名（包名+class文件名），同时不能有.class后缀。
命令执行成功后会在bin目录中生成头文件com_jni_demo_JNIDemo.h，参见图2-15。
::: bodypic-c
![](OEBPS/Images/2aa15-i.jpg){.calibre50}