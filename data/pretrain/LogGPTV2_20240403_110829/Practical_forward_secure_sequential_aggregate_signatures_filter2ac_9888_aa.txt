# Practical Forward Secure Sequential Aggregate Signatures

**Author:** Di Ma  
**Affiliation:** Computer Science Department, University of California, Irvine  
**Email:** [Your Email Address]

## Abstract
A forward-secure sequential aggregate (FssAgg) signature scheme allows a signer to iteratively combine signatures generated in different time intervals with different keys into a single, constant-size signature. This scheme offers forward security, storage/communication efficiency, and overall integrity of the signed messages. FssAgg schemes are suitable for data-intensive applications on untrusted or unattended devices, such as logging systems.

The first FssAgg signature scheme, based on bilinear maps, is computationally expensive. In this paper, we propose two more practical FssAgg1 signature schemes. An FssAgg1 signature scheme is a special type of FssAgg scheme where exactly one message can be signed at each time interval, and key updates are invoked immediately after each signature generation. Both new schemes are derived from existing forward-secure signature schemes. Unlike the scheme in [21], each new scheme has constant-size public and private keys, constant-size signatures, and constant-time key update and signature generation complexity. We demonstrate how these proposed schemes can be applied in secure logging applications.

**Categories and Subject Descriptors:** H.4 [Information Systems Applications]: Miscellaneous  
**General Terms:** Security  
**Keywords:** Forward-secure sequential aggregate authentication, MAC, signature, quality of forward security

## 1. Introduction
Forward-secure sequential aggregate (FssAgg) signatures aim to balance minimal storage/communication overhead with mitigating potential key exposure. They allow the signer to incrementally and sequentially combine signatures generated in different intervals under different secret keys, forming a layered "onion-like" structure with the first signature innermost in the aggregate. The verifier uses a single public key to verify the entire aggregate. Unlike general (non-forward-secure) aggregate signature schemes, which aggregate signatures from multiple signers, an FssAgg scheme aggregates signatures from a single signer.

FssAgg authentication was first introduced in [21] for non-networked, unattended sensor scenarios where a collector periodically gathers data from individual sensors. In such settings, forward security mitigates the effects of potential sensor compromise, while aggregation reduces storage and communication overhead. FssAgg authentication is also relevant to logging systems, where forward-secure authentication of multiple log entries is needed, and compromise is possible. A FssAgg scheme provides forward security, storage/communication efficiency, and stream integrity for the entire log. Any modification, insertion, deletion, or reordering of pre-compromise log entries renders the aggregate signature unverifiable. Overall, a FssAgg scheme is ideal for applications requiring forward-secure stream integrity.

In a secure logging system, the signer (log server) typically has no storage or bandwidth limitations. However, resistance to truncation attacks, where an adversary deletes a contiguous subset of tail-end messages, is crucial. Existing secure logging schemes, such as [7] and [24], are vulnerable to truncation attacks due to the lack of a single tag protecting the integrity of the entire log. A FssAgg authentication scheme, with its all-or-nothing (aggregate and forward-secure) signature verification, is well-suited for secure logging applications.

Two FssAgg schemes, one MAC-based and one signature-based, were proposed in [21]. The MAC-based scheme is near-optimal in terms of efficiency but does not offer non-repudiation and public (transferable) verification. The FssAgg signature scheme (BLS-FssAgg) is derived from the BLS/BGLS signature schemes [8, 9]. It is signer-efficient but not verifier-friendly, as the latter requires O(T) space to store the public key, and aggregate verification is expensive due to costly pairing operations.

The BLS-FssAgg scheme was designed for sensor applications where efficient signer computation and storage are preferred. Although verifiers are powerful machines, and sensors generate data at a very low frequency, it is not suitable for data-intensive applications like databases. This motivates us to construct more practical schemes with compact public keys and lower verification complexity.

We propose two practical FssAgg1 signature schemes, BM-FssAgg1 and AR-FssAgg1, which have constant public key size and efficient aggregate verification. These schemes are superior to the BLS-FssAgg scheme in almost all parameters. Table 1 summarizes the asymptotic performance of our schemes compared to the BLS-FssAgg signature scheme. Our experiments show that aggregate verification in BM-FssAgg1 and AR-FssAgg1 is 16 and 4 times faster, respectively, than in BLS-FssAgg.

**Contributions:**
1. We identify a new feature called the quality of forward security for FssAgg schemes.
2. We point out that any application scenario using a FssAggm scheme can, with no loss of security or functionality, use a FssAgg1 scheme.
3. We construct two practical and provably secure FssAgg1 schemes that perform better than prior art.
4. We show how the new FssAgg1 schemes can be used in secure logging applications to provide forward-secure stream integrity.
5. We evaluate the performance of the proposed schemes.

**Organization:**
- Section 2: Related Work
- Section 3: Definitions
- Section 4: Quality of Forward Security
- Section 5: BM-FssAgg1 Scheme
- Section 6: AR-FssAgg1 Scheme
- Section 7: Secure Logging Applications
- Section 8: Performance Evaluation
- Section 9: Related Issues

## 2. Related Work
The concept of forward security was introduced in the context of key-exchange protocols [12] and later adapted to signature schemes to address the key exposure problem of ordinary signature schemes. Forward-secure signatures were first proposed by Anderson [4] and formalized by Bellare and Miner [5]. Bellare and Yee examined forward security in conventional cryptography [7].

In a forward-secure signature scheme, the forward-security property is achieved by dividing time into T discrete intervals, each with a different secret key. Each subsequent key is computed from the current key via a special key update process. It must be computationally hard for an adversary to compute a prior interval's key from the current key, ensuring that the compromise of the current key does not invalidate or allow forgery of past signatures.

Current forward-secure signature schemes can be divided into two categories:
1. **Generic Constructions:** These can use any arbitrary base signature scheme [4, 5, 17, 22]. They have provable security and are further divided into tree [5, 22] and non-tree [4, 5, 17] constructions. Non-tree constructions are simple but have linear complexity in T. Tree-based constructions have constant-size public keys and signatures, with O(log T) secret key size and signing/verifying time. Merkle trees reduce the complexity to O(log(T)) hashes [22].
2. **Standard Signature Schemes:** These achieve better dependence on T, typically with constant-size parameters. The first such scheme is based on the Fiat-Shamir signature scheme [5]. Abdalla and Reyzin [3] shortened the secret and public keys at the expense of signing and verifying time. Itkis and Reyzin [15] achieved optimal signing and verifying time but with expensive key updates. Kozlov and Reyzin [16] constructed a scheme with fast key updates. Boyen et al. [10] proposed a forward-secure signature scheme with untrusted updates, where the secret key is encrypted with a second factor (e.g., a user's password).

This paper is also relevant to aggregate signature schemes, which combine k signatures generated by n signers (k â‰¥ n) into a single, compact aggregate. Several aggregate signature schemes have been proposed, starting with Boneh et al. [8] based on the BLS scheme [9] with efficient bilinear maps. Lysyanskaya et al. [20] and Lu et al. [19] proposed sequential RSA-based and more efficient sequential aggregate signature schemes, respectively.

Unlike general aggregate signature schemes, a FssAgg scheme aggregates signatures from the same signer, computed within different intervals and thus with different keys. This implies incremental and sequential aggregation, similar to [20] and [19], rather than simultaneous aggregation of multiple signatures as in [8].

## 3. Definitions
A FssAgg scheme is a key-evolving sequential aggregate signature scheme. As messages are generated sequentially in time, sequential (incremental) aggregation of signatures on these messages is performed. Like sequential aggregate signatures, it has Key Generation, Aggregate Signing, and Aggregate Verification algorithms. Like key-evolving schemes, it divides operations into intervals, each using a different (but related) secret key to sign messages. The public key remains unchanged throughout the scheme's lifetime, while a Key Update algorithm evolves the secret keys.

A FssAgg scheme is defined by four algorithms:

1. **FssAgg.Kg (Key Generation):** Takes a security parameter k and the total number of intervals T, and returns a pair (SK1, PK), where SK1 is the initial private key and PK is the public key.
2. **FssAgg.Asig (Sign-and-Aggregate):** Takes a private key, a message to be signed, and a signature-so-far (an aggregate signature computed up to this point). It computes a new signature on the input message and combines it with the signature-so-far to produce a new aggregate signature.
3. **FssAgg.Aver (Aggregate Verification):** Takes a putative aggregate signature, a set of allegedly signed messages, and a public key, and outputs a binary value indicating whether the aggregate is valid.
4. **FssAgg.Upd (Key Update):** Takes the private key for the current interval and returns a new private key for the next interval (provided the current interval does not exceed T âˆ’ 1).

Any aggregate signature produced with FssAgg.Asig must be accepted by FssAgg.Aver. This definition applies to both FssAggm and FssAgg1 signature schemes. A FssAggm scheme places no restriction on the number of messages to be signed in each interval, allowing the frequency of key updates to be chosen based on the perceived level of compromise possibility. A FssAgg1 scheme, as mentioned earlier, allows at most one message to be signed in each interval, with key updates part of the sign-and-aggregate algorithm invoked immediately after each message is signed and aggregated.

The security of a FssAgg scheme is defined as the non-existence of an adversary capable of existential forgery of a FssAgg signature, even in the event of the current secret key exposure. FssAggm and FssAgg1 signature schemes are examined under different games that capture the notions of existential unforgeability, forward security, and aggregation security.