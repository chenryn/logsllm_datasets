title:Practical forward secure sequential aggregate signatures
author:Di Ma
Practical Forward Secure Sequential Aggregate Signatures
Di Ma
Computer Science Department
University of California, Irvine
PI:EMAIL
ABSTRACT
A forward secure sequential aggregate (F ssAgg) signature
scheme allows a signer to iteratively combine signatures gen-
erated in diﬀerent time intervals – and with diﬀerent keys –
into a single constant-size signature. Such a signature oﬀers
forward security, storage/communication eﬃciency, as well
as overall integrity of the signed messages. F ssAgg schemes
are therefore suitable for data-intensive applications on un-
trusted and/or unattended devices, e.g., logging systems.
The ﬁrst F ssAgg signature scheme [21] is based on bilinear
maps and is thus rather costly. In this paper, we propose two
more practical F ssAgg1 signature schemes. A F ssAgg1 sig-
nature scheme is a special F ssAgg signature scheme where
exactly ONE message can be signed at each time interval
and key update is invoked immediately after each signature
generation. Both new schemes are derived from existing for-
ward secure signature schemes. Unlike the scheme in [21],
each new scheme has constant-size public and private keys,
constant-size signatures as well as constant-time key update
and signature generation complexity. We show how to apply
proposed schemes in secure logging applications.
Categories and Subject Descriptors
H.4 [Information Systems Applications]: Miscellaneous
General Terms
Security
Keywords
Forward secure sequential aggregate authentication, MAC,
signature, quality of forward security
1.
INTRODUCTION
Forward secure sequential aggregate (F ssAgg) signatures
are proposed to reconcile minimal storage/communication
overhead with mitigating potential key exposure. It allows
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’08, March 18-20, Tokyo, Japan
Copyright 2008 ACM 978-1-59593-979-1/08/0003 ...$5.00.
the signer to combine signatures generated in diﬀerent in-
tervals under diﬀerent secret keys incrementally and sequen-
tially in a layered “onion-like” fashion with the ﬁrst signature
innermost in the aggregate. In a F ssAgg scheme, the ver-
iﬁer uses a single public key to verify the entire aggregate.
In contrast with general (not forward-secure) aggregate sig-
nature schemes [8, 19, 20] which aggregate signatures from
multiple signers, a F ssAgg scheme aggregates signatures of
a single signer.
F ssAgg authentication was ﬁrst introduced in [21] and
the original motivation stemming from non-networked unat-
tended sensor scenario where a collector visits periodically
and gathers accumulated data from individual sensors. In
that setting, forward security mitigates eﬀects of potential
sensor compromise, while aggregation reduces storage and
communication overhead. F ssAgg authentication is also
relevant to logging systems where forward-secure authen-
tication of multiple log entries is needed and compromise is
possible. A F ssAgg scheme provides forward security, stor-
age/communication eﬃciency as well as stream integrity for
the entire log, i.e., any modiﬁcation, insertion, deletion or
reordering of pre-compromise log entries renders the aggre-
gate signature unveriﬁable. Overall, a F ssAgg scheme is a
perfect match for applications where forward secure stream
integrity is needed [6]. In a secure logging system, the signer
(log server) has no storage or bandwidth limitations. How-
ever, resistance to so-called truncation attacks is important.
Informally, a truncation attack occurs when the adversary
succeeds in deleting a contiguous subset of tail-end messages.
Unfortunately secure logging schemes such as [7] and [24] are
vulnerable to truncation attacks because of the lack of a sin-
gle tag protecting integrity of the entire log. A F ssAgg au-
thentication scheme is well-suited for secure logging applica-
tions – it resists truncation attacks due to its all-or-nothing
(aggregate and forward-secure) signature veriﬁcation.
Two F ssAgg schemes, one MAC-based and one signature-
based, are proposed in [21]. The MAC-based scheme is near-
optimal in terms of eﬃciency. However it (naturally) does
not oﬀer non-repudiation and public (transferrable) veriﬁca-
tion. The F ssAgg signature scheme (hereafter we refer it as
BLS-F ssAgg) was derived from the BLS/BGLS signature
schemes [8, 9]. It is signer-eﬃcient, but not veriﬁer-friendly
as the latter needs O(T ) (T is the maximum number of
allowed intervals) space to store the public key. Also, ag-
gregate veriﬁcation is expensive because of costly pairing
operations.
The BLS-F ssAgg scheme was designed for sensor applica-
tions where eﬃcient signer computation and storage are pre-
341
ferred. A sensor’s limited onboard storage prevents it from
accumulating many data entries between successive visits of
the sink. Therefore, although veriﬁcation is expensive, it
is justiﬁable given that: (1) the veriﬁer (who is the data
collector) is a powerful machine and (2) sensors only gener-
ate data at a very low frequency and only limited number
of data entries are accumulated during each collection in-
terval. However apparently it is not suitable to be used in
data-intensive applications like databases. Hence, although
the proposed signature scheme can be useful, it is not prac-
tical for many other applications in its current form.
This motivates us to construct more practical schemes –
with either (or both) compact public keys or lower veriﬁca-
tion complexity. Intuitively, there are two ways to construct
a F ssAgg signature scheme: either by extending an aggre-
gate signature scheme to be forward-secure, or by extend-
ing a forward-secure signature scheme to be aggregatable.
The work in [21] takes the former approach and this pa-
per explores the latter. We propose two practical F ssAgg
signature schemes with a special feature: exactly one can
be signed and aggregated per each key evolution interval
(whereas, the BLS-F ssAgg scheme allows signatures and
aggregations within an interval). To this end, we use the
notation F ssAgg1 and F ssAggm to distinguish between the
sign-once and sign-many schemes. The notation F ssAgg
is used when this distinction is unnecessary. We also ar-
gue that, most relevant applications require only F ssAgg1
schemes.
The two new F ssAgg1 schemes (BM-F ssAgg1 and AR-
F ssAgg1, respectively) are superior to the BLS-F ssAgg sch-
eme in almost all parameters, e.g., constant public key size
and eﬃcient aggregate veriﬁcation. Table 1 summarizes the
asymptotic performance of our schemes in comparison with
the BLS-F ssAgg signature scheme. (Detailed evaluation is
in Section 8.) Our experiments show that aggregate veri-
ﬁcation in BM-F ssAgg1 and AR-F ssAgg1 is (respectively)
16 and 4 times faster than that in BLS-F ssAgg.
Contributions: We identify a new feature termed qual-
ity of forward security for F ssAgg schemes and point out
that, in practice, any application scenario using a F ssAggm
scheme can – with no loss of security or functionality – use
a F ssAgg1 scheme. We construct two practical and prov-
ably secure F ssAgg1 schemes that perform better than prior
art. We show how new F ssAgg1 schemes can be used in se-
cure logging applications to provide forward secure stream
integrity. Finally we evaluate the performance of proposed
schemes.
Organization: The rest of this paper is organized as fol-
lows. In Section 2 we summarize related work. Section 3
deﬁnes F ssAgg schemes. Section 4 discusses the quality of
forward security feature. Next, we present the BM-F ssAgg1
scheme in Section 5 and the AR-F ssAgg1 scheme in Section
6. We then describe secure logging applications in Section 7
and evaluate the performance of both schemes in Section 8.
Related issues are discussed in Section 9.
2. RELATED WORK
The notion of forward security was introduced in the con-
text of key-exchange protocols [12] and later adapted to sig-
nature schemes to address the key exposure problem of or-
dinary signature schemes. Forward-secure signatures were
ﬁrst proposed by Anderson [4] and subsequently formalized
by Bellare and Miner in [5]. Bellare and Yee examined for-
ward security in the context of conventional cryptography
in [7]. In a forward-secure signatures scheme, the forward-
security property is attained by dividing time into T discrete
intervals, and using a diﬀerent secret key within each inter-
val. Each subsequent key is computed from the current key
via a special key update process. It must be computation-
ally hard for an adversary to compute a prior interval’s key
from the current key; therefore, compromise of the current
key does not invalidate (or allow forgery of) signatures gen-
erated in before compormise. The main challenge in design-
ing forward-secure signature schemes is eﬃciency: an ideal
scheme must have constant (public and secret) key sizes,
constant signature size as well as constant signing, veriﬁca-
tion, and (public and secret) key update operations.
Current forward-secure signature schemes can be divided
into two categories. The ﬁrst is comprised of generic con-
structions that can use any arbitrary base signature scheme
[4,5,17,22]. The main advantage of such schemes is that they
have provable security. Schemes in this category are further
divided into tree [5, 22] and non-tree [4, 5, 17] constructions.
Non-tree constructions are simple but have one or more pa-
rameters with size/complexity linear in T [4, 5]. The ﬁrst
tree-based construction [5] has constant-size public key and
signatures, while the secret key size, signing and verifying
time are O(log T ). Later Merkle trees are applied so that
signing and verifying require O(log(T )) hashes (instead of
signing or verifying operations) [22].
The other category is comprised of schemes built upon
standard signature schemes [3, 5, 15, 16]. The main advan-
tage of these schemes is that they achieve better dependence
on T . In particular, they typically have constant size param-
eters. The ﬁrst such scheme is based on the Fiat-Shamir
signature scheme [5]. Abdalla and Reyzin scheme [3] short-
ens secret and public keys of [5] at the expense of signing
and verifying time. Itkis and Reyzin scheme [15] has opti-
mal signing and verifying time derived from the underlying
Guillou-Quisquater signature scheme. However, it has ex-
pensive key update. Finally, Kozlov and Reyzin construct
a scheme with fast key update [16]. Recently, Boyen, et al.
proposed a forward-secure signature scheme with untrusted
update [10]. In it, the secret key is encrypted with a “sec-
ond factor”, e.g., a user’s password. The secret key can be
updated in its encrypted form. The second factor and the
encrypted secret must be present in order to sign a message.
The present paper is also relevant to aggregate signature
schemes. An aggregate signature scheme combines k signa-
tures generated by n signers (k ≥ n) into a single and com-
pact aggregate that, if veriﬁed, simultaneously veriﬁes every
component signature. Several aggregate signature schemes
have been proposed in the literature, starting with the initial
seminal result by Boneh, et al. [8] based, in turn, on the BLS
scheme [9] operating in groups with eﬃcient bilinear maps.
Aggregate veriﬁcation of this scheme is very expensive re-
quiring n + 1 pairing operations. Subsequently, Lysyan-
skaya, et al. proposed a sequential RSA-based aggregate
scheme [20]. In such a scheme, the signature is constructed
sequentially in a layered fashion. Next, Lu, et al. [19] pro-
posed another sequential aggregate signature scheme with
more eﬃcient veriﬁcation.
We note that, unlike general aggregate signature scheme, a
F ssAgg scheme aggregates signatures from the same signer.
However, these signatures are computed within diﬀerent in-
tervals and thus with diﬀerent keys. It implies incremental
342
Table 1: Performance of diﬀerent schemes. T denotes the maximum of intervals over which the public key is
valid.
BM-F ssAgg1 AR-F ssAgg1 BLS-F ssAgg
O(1)
O(1)
O(1)
O(1)
O(T )
O(T )
O(1)
O(1)
O(1)
O(1)
O(1)
O(T )
Parameters
Signature Size
Private Key Size
Key Update Time
Asig Time
Public Key Size
Aver Time
O(1)
O(1)
O(1)
O(1)
O(1)
O(T )
and sequential aggregation as in [20] or [19], instead of si-
multaneous aggregation of multiple signatures as in [8].
3. DEFINITIONS
A F ssAgg scheme is a key-evolving sequential aggregate
signature scheme. As messages are generated sequentially in
time, sequential (incremental) aggregation of signatures on
these messages are performed. Like sequential aggregate sig-
natures, it has Key Generation, Aggregate Signing and Ag-
gregate Veriﬁcation algorithms. Like key-evolving schemes,
it has its operation divided into interverals, each of which
use a diﬀerent (but related) secret key to sign messages. The
public key is left unchanged throughout the lifetime of the
scheme while a Key Update algorithm is used to evolve the
secret keys.
We now brieﬂy deﬁne a F ssAgg signature scheme as fol-
lows.
Deﬁnition 1. A F ssAgg scheme is made up of four algo-
rithms:
FssAgg.Kg - key generation algorithm which takes as
input a security parameter k, the total number of in-
tervals T and returns a pair (SK1, P K) where SK1 is
the initial private key and P K the public key.
FssAgg.Asig - sign-and-aggregate algorithm which ta-
kes as input a private key, a message to be signed and
a signature-so-far (an aggregate signature computed
up to this point). It computes a new signature on the
input message and combines it with the signature-so-
far to produce a new aggregate signature.
FssAgg.Aver - aggregate veriﬁcation algorithm, which,
on input of: a putative aggregate signature, a set of
allegedly signed messages and a public key, outputs a
binary value indicating whether the aggregate is valid.
FssAgg.Upd - key update algorithm which takes as in-
put the private key for the current interval and returns
a new private key for the next interval (provided that
the current interval does not exceed T − 1.)
Any aggregate signature produced with FssAgg.Asig must
be accepted by FssAgg.Aver.
This deﬁnition applies to both F ssAggm and F ssAgg1
signature schemes. A F ssAggm scheme places no restriction
on the number of messages to be signed in each interval.
Therefore, the frequency of key update can be chosen based
on the perceived level of compromise possibility. It can be
based on time (e.g., every hour), volume of activity (e.g.,
every 10 data entries) or some combination thereof.
A F ssAgg1 scheme, as mentioned earlier, allows at most
one message to be signed in each interval. Ma and Tsudik
[21] indeed deﬁne a F ssAgg1 signature scheme where key
update is part of the sign-and-aggregate algorithm invoked
immediately after each message is signed and aggregated.
The security of a FssAgg scheme is deﬁned as the non-
existence of an adversary capable, within the rules of a
certain game, of existentially forgery of a FssAgg signa-
ture, even in the event of the current secret key exposure.
F ssAggm and F ssAgg1 signature schemes are examined un-
der diﬀerent games which capture the notions of existen-
tial unforgeability, forward security and aggregation secu-