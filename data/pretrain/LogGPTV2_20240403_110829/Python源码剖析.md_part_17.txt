8
---
## Page 120
Python源码剖析
06
确实都调用了insertdicta
Python代码，代码清单5-5的[1]处理第三行Python代码。
insertdict完全可以适应这两种情况，在insertdict中，代码清单5-5的[2]处理第二行
第三行是在PyDictobject对象中已经有这个entry的情况下重新设置元素。可以看到，
所示。
entry，只需要简单地替换me_value值就可以了；而对于Unused或Dummy的entry
那么插入操作对应不同的entry，所需要进行的动作显然也是不一样的。对于Acuive的
败时会返回两种不同的结果：一是处于Unused态的entry：二是处于Dummy态的entry。
在inserndict中，正是根据搜索的结果采取了不同的动作，如代码清单5-5中的[1]、[2]
第5章
当这两行设置pyDictobject对象元素的Python代码被Python虚拟机执行时，并不
第二行Python代码是在PyDictobject对象中没有这个entry的情况下插入元素
在Python中，对PyDictObject对象插入或设置元素有两种情况，如下面的代码所示：
搜索失败，返回Unused或Dummy的entry，完整设置me_key、me_hash和me_value。
搜索成功，
前面我们提到，搜索操作在成功时，返回相应的处于Acive态的entry，而在搜索失
77[2]：搜索失败
通
euma_used++;.
eP-
else
Py_DECREF(key);
一深度探索动态语言核心技术
Python中的Dict 对象
Py_DECREF(ep->me_key);
yalue
lookup（mp, key,hash);
value;
实际上，
，这两行Python代码也
---
## Page 121
SetItem中，有如下的代码：
所以装载率是否大于或等于2/3就是判断是否需要改变table大小的准则。在PyDict
它会检查是否需要改变ryDictobject内部ma_table所维护的内存区域的大小，在以后
insertaict进行元素的插入或设置。
例子中，也就是一个pyIntobject对象1的hash值。然后代码清单5-6的[2）处通过
代码清单5-6
会调用RyDict_SetItem（见代码清单5-6）。
调用参数，那这个hash值是在什么地方获得的呢？实际上，在调用nsertdict之前，还
是直接就调用insertalct，因为观察代码可以看到，insertaie需要一个hash值作为
(mp=>ma_fi111/(mp=>ma_mask+1）>=2/3
我们说过，如果table的装载率大于2/3时，后续的插入动作遭遇到冲突的可能性会非常大。
的叙述中，我们将这块内存称为“table”。那么什么时候需要改变table的大小呢？在前面
[dictobject.c]
PyDict_SetItem在插入或设置元素的动作结束之后，并不会草草返回了事。接下来。
经过转换，实际上可以得到：
在PyDict_SetItem中，会首先在代码清单5-6的[1]处获得key的hash值，在上面的
PyDict_SetItem(register Pyobfect op,Pyobject *key, Pyobject value)
if
return dictresize(mp,
insertdict(mp,
else
if
register
/13]：必要时调整dict的内存空间
register
[218
[1]：计算hash值
return 0;
ob_shashi
=PyObject_Hash(key)/
key,hash,value）;
value）元素对
used:
-1
nuged&&mp->ma_fi11*3>=（mp->ma_mask+1）*2）)
（（000opasneu-u）pan-d
Python源码剖析
5.3PyDictObject 的创建和维护
一深度探索动态语言核心技术
---
## Page 122
Python源码剖析
92
代码清单5-7
定在50000。如此一来，各得其所，万事大吉。
倍的空间，这次又是以执行速度来交换内存空间。Pyhon2.5将这个“非常大”的标准划
程序会有意见的。所以当table中Acive态的entry数量非常大时，Pyhon只会要求2
器的内存是有限的，Pyhon总不能没心没肺地在任何时候都要求4倍空间，这样做，别的
的分布更加稀疏，减少插入元素时的冲突概率。当然，这是以内存空间为代价的。由于机
table中Active态entry数量的4倍，选用4倍是为了使table中处于Active态的entry
entry都处于Dummy态，那么改变table大小的结果显然就是减小了table的空间大小。
改table的大小时，新的table的空间为：
usea是否改变，就可以知道是否有Unused态或Dummy态的entry被填充。
态或Dummy态entry，是通过下面的条件判断完成的：
标时，才会进行改变table大小的动作。而判断在insertaict的过程中是否填充了Unused
态的entry，insertaict会对这个entry进行填充。只有当这种情况发生并且装载率超
或Dummy态的entry。前面我们说过，在搜索失败时，会返回一个Dummy态或Unused
[dietobject,c]
mp=>ma_used*（mp->maused>50000?2:4）
mp->ma_used>n_used
一个标准，还有另一个标准是在irisertdict的过程中，是否使用了一个处于Unused态
在确定新的table的大小时，通常选用的策略是时新的table中entry的数量是现在
在改变table时，并不一定是增加table的大小，同样也可能是减小table的大小。更
其中的n_used就是进行insertdict操作之前的mp->ma_used。通过观察mp->ma
这个等式左边的表达式正是装载率。然而装载率只是判定是否需要改变table大小的
第5章Python中的Dict对象
至于具体改变table大小的重任，则交到了dictresze一人的肩上（见代码清单5-7）。
如果一个PyDictobject对象的table中只有儿个entry处于Active态，而大多数
//[21:新的table可以使用mp-ma_smal1table
is_oldtable_malloced  (oldtable1=mp->ma_smalltable):
oldtable
for(newsize = PyDict_MINsIzE;newsize O;newsizema_table;
*newtable,*ep
---
## Page 123
[3][4]、[5]、[6]所示。
我们看一看在改变cE的内存空间时所发生的动作，如代码清单5-7中的[1]、[2]
return 0:
if(is_oldtable_malloced)
//6]：必要时释放旧tab1e所维护的内寿空间
1/151:
-
//[4]：设置新table
else
4131:
dictresize首先会确定新的table的大小，很显然，
elseif
newtable =mo->ma_smalltable
(newsizePyDict MTNsIZE）
工减料。dictresize从8开始，以指数方式增加大小，直到超过了minused为
调用dictresize时要求aictresize必须保证的内存空间，只许超出，不许偷
的参数minused，这个minused的确定我们在前面已经看到了，这是Python在
(ep
处理旧table中的entry:
新的table不能使用mp->masmalltable，需要在系统堆上中请
assert(ep->me_key==
insertdict(mp,
Lep-
memcpy(small
//将旧table拷贝，进行备份
if
Dummy 态entry
mp-
return 0;
0:
08
sizeof(dictentry)
fi1l
oldtable)
-copy,oldtable,sizeof（small_copy))i
ep->me_key,
NULE)
调整key的引用计数，
0:
(pasnuk-om
dummy）
(ttdia
Python源码剖析
ep->me_hash, ep->me_value);
5.3
newsize):
PyDictObject的创建和维护
丢弃该entY
这个大小一定要大于传入
一深度探索动态语言核心技术
8
---
## Page 124
Python源码剖析
[dictobject.c]
样操作呢？
int PyDietDelltem(Pyobiect
old_key
7//[3]：删除entry 所维护的元素；将entry的状态转为dummy态
司
7/11:获得hash值
Pyobject
register
registen
register
现在，
第5章Python中的Dict对象
[2]、
return -1:
一深度探索动态语言核心技术
，利用我们对PyDictobject的认识，
内存空间，防止内存泄露。
如果之前旧的table指向了一片系统堆中的内存空间，那么我们还需要释放这片
(dictobject
entryT
插入新的table中，它们会形成一条新的探测序列，不再需要这些Dummy态的
由就是为了不使搜索时的探测链中断。现在所有Acive态的entry都重新依次
数。之所以能将Dummy态entry丢弃，是因为Dummy态entry存在的唯一理
Dummy态的entry，则将该entry丢弃，当然，要调整entry中key的引用计
要将其插入到新的table中，这个动作由前面考察过的insertdict完成：而对于
对原来table中的非Unused态entry进行处理。对于Active态entry，
情况的变量。
对新的table进行初始化，并调整原来pyDictobject对象中用于维护table使用
[3]
ertry数量的4倍。
止。
return -1;
(hash==
。所以实际上新的table的大小在大多数情况下至少是原来table中Active态
Pyobject_Hash(key):
*old_value
dictentry
配空间，直接使用ma_smal1table就可以了：否则，则需要在堆上分配空
如果在代码清单5-7的[1]中获得的新的table大小为8，则不需要在堆上分
eP-
onghash
CheckExact(key)
key:
)op;
*epi
*old_key:
key.
do
hash):
Pyobject *key)
key)->ob_shash)
想象一下从able中删除一个元素应该怎
-10
显然需
---
## Page 125
5.3.4
的entry了，所以最后返回的ep会指向一个处于Unused态的entry，如图5-8所示：
所示：
14的entry现在处于Dummy态，所以freeslots会指向这个可用的entry，如图5-6
我们向table中插入新的元素对（104，104），则在搜索的过程中，由于原来位置#5处维护
14）,（24,
线性探测，且探测函数为x=x+1。假设向table中依次加入了以下元素对：（4：4），（14
略不同，这里只是从观念上展示对tabl的维护过程。在下面的图中，白色背景元素代表
要提醒的是，这里采用的散列函数和探测函数都与Python中PyDictobject实际采用的策
护table使用情况的变量。
元素，并将entry从Active态变换为Dummy态，同时还将调整pyDictobjecE对象中维
然后，
搜索完成后，填充reeslot所指向的entry，其结果如图5-7所示：
现在删除元素对（14，14），位置#5处的entry将从Acive态进入Dummy态。然后
操作示例
下面我们用一个简单的例子来动态地展示对PyDictobject中 table的维护过程，需
流程非常清晰，先计算hash值，然后搜索相应的entry，最后删除entry 中维护的
return o:
Py_DECREF(old_value)f
DECREF(old _key);
再向table中插入元素对（14，14），这时由于探测序列上已经没有Dummy态
24），（34，34），则加入元素后的entry的act如图5-5所示：
#1
#1
#2
#2
#2
图5-7插入与删除示例图之三
图5-6插入与删除示例图之二
图5-5插入与删除示例图之一
#3
#3
#3
#4#5
410424
#5
freeslot
14
Python源码剖析
6
24
#6
24
5.3PyDictObject的创建和维护
#7
34
34
34
#8#9
#8
#8
#9