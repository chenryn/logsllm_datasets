However, you will typically want to have a separate staging area for each build. The trick, then, is to
configure Maven to use a unique HTTP User-Agent for the deployment process. You can do this by
configuring the settings.xml file on your build server to contain something along the following lines
(the ID must match the ID for the release repository in the deployment section of your project):
nexus
my_login
my_password
User-Agent
288
Maven m2Release (java:20.1-b02-383 ${env.BUILD_TAG }
10.7.2. Copying Artifacts
During a build process involving several build jobs, such as the one illustrated in Figure 10.33, “A more
complicated build job dependency graph”, it can sometimes be useful to reuse artifacts produced by one
build job in a subsequent build job. For example, you may want to run a series of web tests in parallel
on separate machines, using local application servers for improved performance. In this case, it makes
sense to retrieve the exact binary artifact that was produced in the previous build, rather than rebuilding
it each time or, if you are using Maven, relying on a SNAPSHOT build deployed to your enterprise
repository. Indeed, both these approaches may run the risk of inconsistent build results: if you use a
SNAPSHOT from the enterprise repository, for example, you will be using the latest SNAPSHOT build,
which may not necessarily be the one built in the upstream build job.
The Copy Artifact plugin lets you copy artifacts from an upstream build and reuse them in your current
build. Once you have installed this plugin and restarted Jenkins, you will be able to add a new type of
build step called “Copy artifacts from another project” to your freestyle build jobs (see Figure 10.39,
“Adding a “Copy artifacts from another project” build step”).
Figure 10.39. Adding a “Copy artifacts from another project” build step
This new build step lets you copy artifacts from another project into the workspace of the current project.
You can specify any other project, though most typically it will be one of the upstream build jobs. And
of course you can specify, with a great deal of flexibility and precision, the exact artifacts that you want
to copy.
You need to specify where to find the files you want in the other build job’s workspace, and where
Jenkins should put them in your current project’s workspace. This can be a flexible regular expression
289
(such as **/*.war, for any WAR file produced by the build job), or it can be much more precise
(such as gameoflife-web/target/gameoflife.war). Note that by default, Jenkins will copy the
directory structure along with the file you retrieve, so if the WAR file you are after is nested inside
the target directory of the gameoflife-web module, Jenkins will place it inside the gameoflife-
web/target directory in your current workspace. If this is not to your tastes, you can tick the “Flatten
directories” option to tell Jenkins to put all of the artifacts at the root of the directory you specify (or,
by default, in your project workspace).
In many cases, you will simply want to retrieve artifacts from the most recent successful build. However,
sometimes you may want more precision. The “Which builds” field lets you specify where to look for
artifacts in a number of other ways, including the latest saved build (builds which have been marked to
“keep forever”), the latest successful build, or even a specific build number.
If you have installed the Build Promotion plugin (see Section 10.7.3, “Build Promotions”), you can
also select the latest promoted artifact in a particular promotion process. To do this, choose “Specify by
permalink”, then choose the appropriate build promotion process. This is an excellent way of ensuring
a consistent and reliable build pipeline. For example, you can configure a build promotion process to
trigger a build that copies a generated WAR file from the latest promoted build and deploys it to a
particular server. This ensures that you deploy precisely the right binary file, even if other builds have
occurred since.
If you are copying artifacts from a multimodule Maven build job, Jenkins will, by default, copy all of
the artifacts from that build. However often times you are only interested in one specific artifact (such
as the WAR artifact in a web application, for example.
This plugin is particularly useful when you need to run functional or performance tests on your web
application. It is often a useful strategy to place these tests in a separate project, and not as part of your
main build process. This makes it easier to run these tests against different servers or run the subsets of
the tests in parallel, all the while using the same binary artifact to deploy and test.
For example, imagine that you have a default build job called gameoflife that generates a WAR file, and
you would like to deploy this WAR file to a local application server and run a series of functional tests.
Furthermore, you want to be able to do this in parallel on several distributed machines.
One way to do this would be to create a dedicated Maven project designed to run the functional tests
against an arbitrary server. Then, you would set up a build job to run these functional tests. This build
job would use the Copy Artifact plugin to retrieve the latest WAR file (or even the latest promoted WAR
file, for more precision), and deploy it to a local Tomcat instance using Cargo. This build job could
then be set up as a configurable (“matrix”) build job, and run in parallel on several machines, possibly
with extra configuration parameters to filter the tests run by each build. Each build run would then be
using its own copy of the original WAR file. An example of a configuration like this is illustrated in
Figure 10.40, “Running web tests against a copied WAR file”.
290
Figure 10.40. Running web tests against a copied WAR file
The Copy Artifact plugin is not limited to fetching files from conventional build jobs. You can also
copy artifacts from multiconfiguration build jobs (see Section 10.4, “Multiconfiguration Build Jobs”).
Artifacts from each executed configuration will be copied into the current workspace, each in its own
directory. Jenkins will build a directory structure using the axes that were used in the multiconfiguration
build. For example, imagine we need to produce a highly-optimized version of our product for a number
of different targeted databases and application servers. We could do this with a multiconfiguration build
job like the one illustrated in Figure 10.41, “Copying from a multiconfiguration build”.
291
Figure 10.41. Copying from a multiconfiguration build
The Copy Artifacts plugin can duplicate any and all of the artifacts produced by this build job. If you
specify a multiconfiguration build as the source of your artifacts, the plugin will copy artifacts from all
of the configurations into the workspace of the target build job, using a nested directory structure based
on the multiconfiguration build axes. For example, if you define the target directory as multi-config-
artifacts, Jenkins will copy artifacts into a number of subdirectories in the target directory, each with
a name corresponding to the particular set of configuration parameters. So, using the build job illustrated
in Figure 10.41, “Copying from a multiconfiguration build”, the JAR file customized for Tomcat and
MySql would be copied to the $WORKSPACE/multi-config-artifacts/APP_SERVER/tomcat/
DATABASE/mysql directory.
10.7.3. Build Promotions
In the world of Continuous Integration, not all builds are created equal. For example, you may want to
deploy the latest version of your web application to a test server, but only after it has passed a number
of automated functional and load tests. Or you may want testers to be able to flag certain builds as being
ready for UAT deployment, once they have completed their own testing.
The Promoted Builds plugin lets you identify specific builds that have met additional quality criteria,
and to trigger actions on these builds. For example, you may build a web application in on build job,
run a series of automated web tests in a subsequent build, and then deploy the WAR file generated to
the UAT server for further manual testing.
Let’s see how this works in practice. In the project illustrated above, a default build job (phoenix-
default) runs unit and some integration tests, and produces a WAR file. This WAR file is then reused
for more extensive integration tests (in the phoenix-integration-tests build job) and then for a
series of automated web tests (in the phoenix-web-test build job). If the build passes the automated
web tests, we would like to deploy the application to a functional testing environment where it can be
tested by human testers. The deployment to this environment is implemented in the phoenix-test-
deploy build job. Once the testers have validated a version, it can be promoted into UAT, and then
292
into production. The full promotion strategy is illustrated in Figure 10.42, “Build jobs in the promotion
process”.
Figure 10.42. Build jobs in the promotion process
This strategy is easy to implement using the Promoted Builds plugin. Once you have installed this in
the usual way, you will find a new “Promote builds when” checkbox on the job configuration page.
You use this option to set up build promotion processes. You define one or more build promotion
processes in the initial build job of process (phoenix-default in this example), as illustrated in
Figure 10.43, “Configuring a build promotion process”. A build job may be the starting point of several
build promotion processes, some automated, and some manual. In Figure 10.43, “Configuring a build
promotion process”, for example, there is an automated build promotion process called promote-to-
test and a manual one called promote-to-uat. Automated build promotion processes are triggered by the
results of downstream build jobs. Manual promotion processes (indicated by ticking the ‘Only when
manually approved’ checkbox) can only be triggered by user intervention.
293
Figure 10.43. Configuring a build promotion process
Let’s look at configuring the automated promote-to-test build process.
The first thing you need to define is how this build promotion process will be triggered. Build promotion
can be either automatic, based on the result of a downstream build job, or manually activated by a user.
In Figure 10.43, “Configuring a build promotion process”, the build promotion for this build job will
be automatically triggered when the automated web tests (executed by the phoenix-web-tests build
job) are successful.
You can also have certain build jobs that can only be promoted manually, as illustrated in Figure 10.44,
“Configuring a manual build promotion process”. Manual build promotion is used for cases where
human intervention is needed to approve a build promotion. Deployment to UAT or production are
common examples of this. Another example is where you want to temporarily suspend automatic build
promotions for a short period, such as nearing a release.
Manual builds, as the name suggests, need to be manually approved to be executed. If the promotion
process is to trigger a parameterized build job, you can also provide parameters that the approver will
need to enter when approving. In some cases, it can also be useful to designate certain users who are
allowed to activate the manual promotion. You can do this by specifying a list of users or groups in
the Approvers list.
294
Figure 10.44. Configuring a manual build promotion process
Sometimes, it is useful to give some context to the person approving a promotion. When you set up
a manual promotion process, you can also specify other conditions which must be met, in particular
downstream (or upstream) build jobs which must have been built successfully (see Figure 10.45,
“Viewing the details of a build promotion”). These will appear in the “Met Qualifications” (for the
successful build jobs) and in “Unmet Qualifications” (for the build jobs that failed or have not been
executed yet).
295
Figure 10.45. Viewing the details of a build promotion
Next you need to tell Jenkins what to do when the build is promoted. You do this by adding actions, just
like in a freestyle build job. This makes build promotions extremely flexible, as you can add virtually
any action available to a normal freestyle build job, including any additional steps made available by
the plugins installed on your Jenkins instance. Common actions include invoking Maven or Ant scripts,
deploying artifacts to a Maven repository, or triggering another build job.
One important thing to remember here is that you cannot rely on files in the workspace when promoting
your build. Indeed, by the time you promote the build, either automatically or manually, other build jobs
may have deleted or rewritten the files you need to use. For this reason, it is unwise, for example, to
deploy a WAR file directly from the workspace to an application server from within a build promotion
process. A more robust solution is to trigger a separate build job and to use the Copy Artifacts plugin
(see Section 10.7.2, “Copying Artifacts”) to retrieve precisely the right file. In this case, you will be
copying artifacts that you have configured Jenkins to conserve, rather than copying the files directly
from the workspace.
For build promotion to work correctly, Jenkins needs to be able to precisely link downstream build jobs
to upstream ones. The more accurate way to do this is by using fingerprints. In Jenkins, a fingerprint is
the MD5 checksum a file produced by or used in a build job. By matching fingerprints, Jenkins is able
to identify all of the builds which use a particular file.
296
In the context of build promotion, a common strategy is to build your application once, and then to run
tests against the generated binary files in a series of downstream build jobs. This approach works well
with build promotion, but you need to ensure that Jenkins fingerprints the files that are shared or copied
between build jobs. In the example shown in Figure 10.43, “Configuring a build promotion process”, for
instance, we need to do two things (Figure 10.46, “Using fingerprints in the build promotion process”).
First, we need to archive the generated WAR file so that it can be reused in the downstream project.
Secondly, we need to record a fingerprint of the archived artifacts. You do this by ticking the “Record
fingerprints of files to track usage” option, and specifying the files you want to fingerprint. A useful
shortcut is simply to fingerprint all archived files, since these are the files that will typically be retrieved
and reused by the downstream build jobs.
Figure 10.46. Using fingerprints in the build promotion process
This is all you need to do to configure the initial build process. The next step is to configure the
integration tests executed in the phoenix-integration build job. Here, we use the Copy Artifact
plugin to retrieve the WAR file generated by the phoenix-default build job (see Figure 10.47,
“Fetching the WAR file from the upstream build job”). Since this build job is triggered immediately after
the phoenix-default build job, we can simply fetch the WAR file from the latest successful build.
Figure 10.47. Fetching the WAR file from the upstream build job
This is not quite all we need to do for the integration tests, however. The phoenix-integration build
job is followed by the phoenix-web build job, which executes the automated web tests. To ensure that
the same WAR file is used at each stage of the build process, we need to retrieve it from the upstream
297
phoenix-integration build job, and not from the original phoenix-default build job (which may
have been executed again in the meantime). So we also need to archive the WAR file in the phoenix-
integration build job (see Figure 10.48, “Archiving the WAR file for use in the downstream job”).
Figure 10.48. Archiving the WAR file for use in the downstream job
In the phoenix-web build job, we then fetch the WAR file from the phoenix-integration build
job, using a configuration very similar to the one shown above (see Figure 10.49, “Fetching the WAR
file from the integration job”).
Figure 10.49. Fetching the WAR file from the integration job
For the build promotion process to work properly, there is one more important thing we need to
configure in the phoenix-web build job. As we discussed earlier, Jenkins needs to be able to be sure
that the WAR file used in these tests is the same one generated by the original build. We do this
by activating fingerprinting on the WAR file we fetched from the phoenix-integration build job
(which, remember, was originally built by the phoenix-default build job). Since we have copied
this WAR file into the workspace, a configuration like the one in Figure 10.50, “We need to determine
the fingerprint of the WAR file we use” will work just fine.
Figure 10.50. We need to determine the fingerprint of the WAR file we use
The final step is to configure the phoenix-deploy-to-test build job to retrieve the last promoted
WAR file (rather than just the last successful one). To do this, we use the Copy Artifact plugin again, but
this time we choose the “Specified by permalink” option. Here Jenkins will propose, among other things,
298
the build promotion processes configured for the build job you are copying from. So, in Figure 10.51,
“Fetching the latest promoted WAR file”, we are fetching the last promoted WAR file build by the
phoenix-default job, which is precisely what we want.
Figure 10.51. Fetching the latest promoted WAR file
Our promotion process is now ready for action. When the automated web tests succeed for a particular
build, the original build job will be promoted and the corresponding WAR file deployed to the test
environment. Promoted builds are indicated by a star in the build history (see Figure 10.52, “Promoted
builds are indicated by a star in the build history”). By default, the stars are yellow, but you can configure
the color of the star in the build promotion setup.
Figure 10.52. Promoted builds are indicated by a star in the build history
299
You can also use the “Promotion Status” menu entry (or click on the colored star in the build history)
to view the details of a particular build promotion, and even to rerun a promotion manually (see
Figure 10.45, “Viewing the details of a build promotion”). Any build promotion can be triggered
manually, by clicking on “Force promotion” (if this build job has never been promoted) or “Re-execute
promotion” (if it has).
10.7.4. Aggregating Test Results
When distributing different types of tests across different build jobs, it is easy to loose a global vision
about the overall test results. Test results are scattered among the various build jobs, without a central
place to see the total number of executed and failing tests.
A good way to avoid this problem is to use the Aggregated Test Results feature of Jenkins. This will
retrieve any test results recorded in the downstream jobs, and aggregate them in the upstream build job.
You can configure this in the initial (upstream) build job by ticking the “Aggregate downstream test
results” option (see Figure 10.53, “Reporting on aggregate test results”).
Figure 10.53. Reporting on aggregate test results
The aggregate test results can be seen in the build details page (see Figure 10.54, “Viewing aggregate
test results”). Unfortunately, these aggregate test results do not appear in the overall test results, but you
can display the full list of tests executed by clicking on the Aggregate Test Result link on the individual
build page.
300
Figure 10.54. Viewing aggregate test results
For this to work correctly, you need to ensure that you have configured fingerprinting for the binary
files you use at each stage. Jenkins will only aggregate downstream test results from builds containing
an artifact with the same fingerprint.
10.7.5. Build Pipelines
The final plugin we will be looking at in this section is the Build Pipeline plugin. The Build Pipelines
plugin takes the idea of build promotion further, and helps you design and monitor deployment pipelines.
A deployment pipeline is a way of orchestrating your build through a series of quality gates, with
automated or manual approval processes at each stage, culminating with deployment into production.
The Build Pipeline plugin provides an alternative way to define downstream build jobs. A build pipeline,
unlike conventional downstream dependencies, is considered to be a linear process, a series of build
jobs executed in sequence.
To use this plugin, start by configuring the downstream build jobs for each build job in the pipeline,
using the “Build other projects” field just as you would normally do. The Build Pipelines plugin uses
the standard upstream and downstream build configurations, and for automatic steps this is all you need
to do. However the Build Pipeline plugin also supports manual build steps, where a user has to manually
approve the next step. For manual steps, you also need to configure In the Post-build Actions of
your upstream build job: just tick the “Build Pipeline Plugin -> Specify Downstream Project” box, select
301