input parameters).4
Expressions can be constants, l-values, unary and bi-
nary operations, and type casts. The deﬁnition of l-
values is worth mentioning because in addition to vari-
ables and function parameters, we include a named sub-
script operation to give limited support to the array and
hash table accesses used extensively in PHP programs.
A statement can be an assignment, function call, re-
turn, exit, or include. The ﬁrst four statement types re-
quire no further explanation. The include statement is
a commonly used feature unique to scripting languages,
which allows programmers to dynamically insert code
into the program.
In our language, include evaluates
its string argument, and executes the program ﬁle des-
ignated by the string as if it is inserted at that program
point (e.g., it shares the same scope). We describe how
we simulate such behavior in Section 3.1.6.
3.1.3 State
Figure 4(a) gives the deﬁnition of values and states dur-
ing simulation. The simulation state maps memory loca-
tions to their value representations, where a memory lo-
cation is either a program variable (e.g. x), or an entry in
a hash table accessed via another location (e.g. x[key]).
Note the deﬁnition of locations is recursive, so multi-
level hash dereferences are supported in our algorithm.
4In general, in a dynamically typed language, a more precise static
approximation in this case would be a sum (aka. soft typing) [1, 20].
We have not found it necessary to use type sums in this work.
182
Security ’06: 15th USENIX Security Symposium
USENIX Association
4
Value Representation
Loc (l) ::= x | l[string] | l[>]
Init-Values (o) ::= l0
Segment (β) ::= string | contains(σ) | o | ⊥
String (s) ::= hβ1, . . . , βni
Boolean (b) ::= true | false | untaint(σ0, σ1)
Loc-set(σ) ::= {l1, . . . , ln}
Integer (i) ::= k
Value (v) ::= s | b | i | o | >
Simulation State
State (Γ) : Loc → Value
(a) Value representation and simulation state.
Locations
var
Γ ` x Lv⇒ x
Γ ` e E⇒ l
Γ ` e0 E⇒ v0
Γ ` e[e0] Lv⇒nl[α]
v00 = cast(v0, str)
if v00 = h“α”i
l[>] otherwise
Γ ` Arg#n Lv⇒ Arg#n
arg
dim
(b) L-values.
Expressions
Type casts:
cast(k, bool) =ntrue
if k 6= 0
false otherwise
cast(true, str) = h“1”i
cast(false, str) = hi
On entry to the function, each location l is implicitly
initialized to a symbolic initial value l0, which makes up
the initial state of the simulation. The values we rep-
resent in the state can be classiﬁed into three categories
based on type:
Strings: Strings are the most fundamental type in many
scripting languages, and precision in modeling strings
directly determines analysis precision. Strings are typ-
ically constructed through concatenation. For example,
user inputs (via HTTP get and post methods) are often
concatenated with a pre-constructed skeleton to form an
SQL query. Similarly, results from the query can be con-
catenated with HTML templates to form output. Model-
ing concatenation well enables an analysis to better un-
derstand information ﬂow in a script. Thus, our string
representations is based on concatenation. String val-
ues are represented as an ordered concatenation of string
segments, which can be one of the following: a string
constant, the initial value of a memory location on entry
to the current block (l0), or a string that contains initial
values of zero or more elements from a set of memory
locations (contains(σ)). We use the last representation to
model return values from function calls, which may non-
deterministically contain a combination of global vari-
ables and input parameters. For example, in
1 function f($a, $b) {
if (. . .) return $a;
2
else return $b;
3
4 }
5 $ret = f($x.$y, $z);
the
represent
as
we
contains({x, y, z}) to model the fact that it may con-
tain any element in the set as a sub-string.
return
value
on
line
5
cast(v = hβ1, . . . , βni, bool)
(true
false
>
if (v 6= h“0”i) ∧ Wn
if (v = h“0”i) ∨ Vn
i=1
i=1
otherwise
=
. . .
¬is empty(βi)
is empty(βi)
Evaluation Rules:
Γ ` lv Lv⇒ l
Γ ` lv E⇒ Γ(l)
Γ ` e1
Γ ` e2
E⇒ v1
E⇒ v2
Γ ` e1 concat e2
cast(v1, str) = hβ1, . . . , βni
cast(v2, str) = hβn+1, . . . , βmi
E⇒ hβ1, . . . , βmi
Γ ` e E⇒ v cast(v, bool) = v0
true
false
untaint(σ1, σ0)
>
if v0 = false
if v0 = true
if v0 = untaint(σ0, σ1)
otherwise
Γ ` ¬e E⇒
(c) Expressions.
Figure 4: Intrablock simulation algorithm.
L-val
concat
not
The string representation described above has the fol-
lowing beneﬁts:
First, we get automatic constant folding for strings
within the current block, which is often useful for re-
solving hash keys and distinguishing between hash ref-
erences (e.g., in $key = “key”; return $hash[$key];).
Second, we can track how the contents of one input
variable ﬂow into another by ﬁnding occurrences of ini-
tial values of the former in the ﬁnal representation of the
latter. For example, in: $a = $a . $b, the ﬁnal represen-
tation of $a is ha0, b0i. We know that if either $a or $b
contains unsanitized user input on entry to the current
block, so does $a upon exit.
Finally, interprocedural dataﬂow is possible by track-
ing function return values based on function summaries
using contains(σ). We describe this aspect in more detail
in Section 3.3.
Booleans: In PHP, a common way to perform input val-
idation is to call a function that returns true or false de-
pending on whether the input is well-formed or not. For
example, the following code sanitizes $userid:
USENIX Association
Security ’06: 15th USENIX Security Symposium
183
$ok = is safe($userid);
if (!$ok) exit;
3.1.5 Expressions
The value of Boolean variable $ok after the call
is
undetermined, but it is correlated with the safety of
$userid. This motivates untaint(σ0, σ1) as a represen-
tation for such Booleans: σ0 (resp. σ1) represents the
set of validated l-values when the Boolean is false (resp.
In the example above, $ok has representation
true).
untaint({}, {userid}).
Besides untaint, representation for Booleans also in-
clude constants (true and false) and unknown (>).
Integers: Integer operations are less emphasized in our
simulation. We track integer constants and binary and
unary operations between them. We also support type
casts from integers to Boolean and string values.
3.1.4 Locations and L-values
In the language deﬁnition in Figure 3, hash references
may be aliased through assignments and l-values may
contain hash accesses with non-constant keys. The same
l-value may refer to different memory locations depend-
ing on the value of both the host and the key, and there-
fore, l-values are not suitable as memory locations in the
simulation state.
Figure 4(b) gives the rules we use to resolve l-values
into memory locations. The var and arg rules map each
program variable and function argument to a memory lo-
cation identiﬁed by its name, and the dim rule resolves
hash accesses by ﬁrst evaluating the hash table to a loca-
tion and then appending the key to form the location for
the hash entry.
These rules are designed to work in the presence of
simple aliases. Consider the following program:
1 $hash = $ POST;
2 $key = ’userid’;
3 $userid = $hash[$key];
The program ﬁrst creates an alias ($hash) to hash ta-
ble $ POST and then accesses the userid entry using that
alias. On entry to the block, the initial state maps every
location to its initial value:
Γ = {hash ⇒ hash0, key ⇒ key0, POST ⇒ POST0,
POST[userid] ⇒ POST[userid]0}
According to the var rule, each variable maps to its own
unique location. After the ﬁrst two assignments, the state
is:
Γ = {hash ⇒ POST0, key ⇒ h‘userid’i, . . .}
We use the dim rule to resolve $hash[$key] on line 3:
$hash evaluates to POST0, and $key evaluates to con-
stant string ’userid’. Therefore, the l-value $hash[$key]
evaluates to location POST[userid], and thus the analysis
assigns the desired value POST[userid]0 to $userid.
We perform abstract evaluation of expressions based on
the value representation described above. Because PHP
is a dynamically typed language, operands are implicitly
cast to appropriate types for operations in an expression.
Figure 4(c) gives a representative sample of cast rules
simulating cast operations in PHP. For example, Boolean
value true, when used in a string context, evaluates to
“1”. false, on the other hand, is converted to the empty
string instead of “0”. In cases where exact representation
is not possible, the result of the cast is unknown (>).
Figure 4(c) also gives three representative rules for
evaluating expressions. The ﬁrst rule handles l-values,
and the result is obtained by ﬁrst resolving the l-value
into a memory location, and then looking up the location
in the evaluation context (recall that Γ(l) = l0 on entry
to the block).
The second rule models string concatenation. We ﬁrst
cast the value of both operands to string values, and the
result is the concatenation of both.
The ﬁnal rule handles Boolean negation. The in-
teresting case involves untaint values. Recall
that
untaint(σ0, σ1) denotes an unknown Boolean value that
is false (resp. true) if l-values in the set σ0 (resp. σ1)
are sanitized. Given this deﬁnition,
the negation of
untaint(σ0, σ1) is untaint(σ1, σ0).
The analysis of an expression is > if we cannot deter-
mine a more precise representation, which is a potential
source of false negatives.
3.1.6 Statements
We model assignments, function calls, return, exit, and
include statements in the program. The assignment rule
resolves the left-hand side to a memory location l, and
evaluates the right-hand side to a value v. The updated
simulation state after the assignment maps l to the new
value v:
Γ ` lv Lv⇒ l
Γ ` e E⇒ v
Γ ` lv ← e S⇒ Γ[l 7→ v]
assignment
Function calls are similar. The return value of a function
call f (e1, . . . , en) is modeled using either contains(σ)
(if f returns a string) or untaint(σ0, σ1) (if f returns a
Boolean) depending on the inferred summary for f. We
defer discussion of the function summaries and the re-
turn value representation to Sections 3.2 and 3.3. For the
purpose of this section, we use the uninterpreted value
f (v1, . . . , vn) as a place holder for the actual representa-
tion of the return value:
Γ ` lv Lv⇒ l Γ ` e1
E⇒ v1 . . . Γ ` en
E⇒ vn
fun
Γ ` lv ← f (e1, . . . , en) S⇒ Γ[l 7→ f (v1, . . . , vn)]
In addition to the return value, certain functions have
pre- and post-conditions depending on the operation they
184
Security ’06: 15th USENIX Security Symposium
USENIX Association
6
if (!is numeric($x)) exit;
return;
global $db;
mysql db query($db, $q);
perform. Pre- and post-conditions are inferred and stored
in the callee’s summary, which we describe in detail in
Sections 3.2 and 3.3. Here we show two examples to
illustrate their effects:
1 function validate($x) {
2
3
4 }
5 function my query($q) {
6
7
8 }
9 validate($a.$b);
10 my query("SELECT. . .WHERE a = ’$a’ AND c = ’$c’");
The validate function tests whether the argument is a
number (and thus safe) and aborts if it is not. There-
fore, line 9 sanitizes both $a and $b. We record this fact
by inspecting the value representation of the actual pa-
rameter (in this case ha0, b0i), and remembering the set
of non-constant segments that are sanitized.
The second function my query uses its argument as a
database query string by calling mysql db query. To pre-
vent SQL injection attacks, any user input must be sani-
tized before it becomes part of the ﬁrst parameter. Again,
we enforce this requirement by inspecting the value rep-
resentation of the actual parameter. We record any un-
sanitized non-constant segments (in this case $c, since $a
is sanitized on line 9) and require they be sanitized as
part of the pre-condition for the current block.
Sequences of assignments and function calls are sim-
ulated by using the output environment of the previous
statement as the input environment of the current state-
ment:
Γ ` s1
S⇒ Γ0 Γ0 ` s2
S⇒ Γ00
Γ ` (s1; s2) S⇒ Γ00
seq
The ﬁnal simulation state is the output state of the ﬁnal
statement.
The return and exit statements terminate control ﬂow5
and require special treatment. For a return, we evalu-
ate the return value and use it in calculating the function
summary. In case of an exit statement, we mark the cur-
rent block as an exit block.
Finally, include statements are a commonly used fea-
ture unique to scripting languages allowing programmers
to dynamically insert code and function deﬁnitions from
another script.
In PHP, the included code inherits the
variable scope at the point of the include statement. It
may introduce new variables and function deﬁnitions,
and change or sanitize existing variables before the next
statement in the block is executed.
We process include statements by ﬁrst parsing the in-
cluded ﬁle, and adding any new function deﬁnitions to
the environment. We then splice the control ﬂow graph of
5So do function calls that exits the program, in which case we re-
move any ensuing statements and outgoing edges from the current CFG
block. See Section 3.3.
the included main function at the current program point
by a) removing the include statement, b) breaking the
current basic block into two at that point, c) linking the
ﬁrst half of the current block to the start of the main
function, and all return blocks (those containing a return
statement) in the included CFG to the second half, and d)
replacing the return statements in the included script with
assignments to reﬂect the fact that control ﬂow resumes
in the current script.
3.1.7 Block summary
The ﬁnal step for the symbolic simulator is to charac-
terize the behavior of a CFG block into a concise sum-
mary. A block summary is represented as a six-tuple
hE, D, F , T , R, Ui:
• Error set (E): the set of input variables that must be
sanitized before entering the current block. These
are accumulated during simulation of function calls