BackButtonManager中定义。如果框架实例的CanGoBack属性返回true，那么构造函数的实
现代码使后退按钮可见。如果堆栈可用，就实现OnBackRequested方法，返回页面堆栈
（代码文件ApplicationLifetimeSample/Utilities/ BackButtonManager.cs）：
      public class BackButtonManager: IDisposable
      {
        private SystemNavigationManager _navigationManager;
        private Frame _frame;
        public BackButtonManager(Frame frame)
        {
          _frame = frame;
          _navigationManager = SystemNavigationManager.GetForCurrentView();
          _navigationManager.AppViewBackButtonVisibility = frame.CanGoBack ?
          AppViewBackButtonVisibility.Visible:
            AppViewBackButtonVisibility.Collapsed;
          _navigationManager.BackRequested += OnBackRequested;
        }
        private void OnBackRequested(object sender, BackRequestedEventArgs e)
        {
          if (_frame.CanGoBack) _frame.GoBack();
          e.Handled = true;
        }
        public void Dispose()
        {
          _navigationManager.BackRequested -= OnBackRequested;
        }
      }
在所有的页面中，通过在OnNavigatedTo方法中传递Frame来实例化
BackButtonManager，它在OnNavigatedFrom方法中销毁（代码文件
ApplicationLifetimeSample / MainPage.xaml.cs）：
    private BackButtonManager _backButtonManager;
    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
      base.OnNavigatedTo(e);
      _backButtonManager = new BackButtonManager(Frame);
    }
    protected override void OnNavigatingFrom(NavigatingCancelEventArgs e)
    {
      base.OnNavigatingFrom(e);
      _backButtonManager.Dispose();
    }
有了所有这些代码，用户可以在3个不同的页面之间后退和前进。下一步需要记住页
面和页面堆栈，把应用程序导航到用户最近一次访问的页面上。
33.4 导航状态
为了存储和加载导航状态，类NavigationSuspensionManager定义了方法
SetNavigationStateAsync和GetNavigationStateAsync。导航的页面堆栈可以在字符串中表
示。这个字符串写入本地缓存文件中，用一个常数给它命名。如果应用程序以前运行时文
件已经存在，就覆盖它。不需要记住应用程序多次运行之间的页面导航（代码文件
ApplicationLifetimeSample/Utilities/NavigationSuspensionManager.cs）：
    public class NavigationSuspensionManager
    {
      private const string NavigationStateFile = "NavigationState.txt";
      public async Task SetNavigationStateAsync(string navigationState)
      {
        StorageFile file = await
        ApplicationData.Current.LocalCacheFolder.CreateFileAsync(
          NavigationStateFile, CreationCollisionOption.ReplaceExisting);
        Stream stream = await file.OpenStreamForWriteAsync();
        using (var writer = new StreamWriter(stream))
        {
        await writer.WriteLineAsync(navigationState);
        }
      }
      public async Task GetNavigationStateAsync()
      {
        Stream stream = await
        ApplicationData.Current.LocalCacheFolder.OpenStreamForReadAsync(
          NavigationStateFile);
        using (var reader = new StreamReader(stream))
        {
        return await reader.ReadLineAsync();
        }
      }
    }
 注意： 
NavigationSuspensionManager类利用Windows运行库API和.NET的
Stream类读写文件的内容。这两个功能详见第23章。
33.4.1 暂停应用程序
为了在暂停应用程序时保存状态，在OnSuspending事件处理程序中设置App类的
Suspending事件。当应用程序进入暂停模式时触发事件（代码文件
ApplicationLifetimeSample / App.xaml.cs）：
    public App()
    {
      this.InitializeComponent();
      this.Suspending += OnSuspending;
    }
OnSuspending是一个事件处理程序方法，因此声明为返回void。这有一个问题。只要
方法完成，应用程序就可以终止。然而，因为方法声明为void，所以不可能等待方法完
成。因此，收到的SuspendingEventArgs参数定义了一个SuspendingDeferral，通过调用
GetDeferral方法可以检索它。一旦完成代码的异步功能，需要调用Complete方法来延迟。
这样，调用者知道方法已完成，应用程序可以终止（代码文件ApplicationLifetimeSample /
App.xaml.cs）：
    private async void OnSuspending(object sender, SuspendingEventArgs e)
    {
      var deferral = e.SuspendingOperation.GetDeferral();
      //...
      deferral.Complete();
    }
  注意： 异步方法参见第15章。
在OnSuspending方法的实现中，页面堆栈写入临时缓存。使用Frame的BackStack属性
可以在页面堆栈上检索页面。这个属性返回PageStackEntry对象的列表，其中每个实例代
表类型、导航参数和导航过渡信息。为了用SetNavigationStateAsync方法存储页面跟踪，
只需要一个字符串，其中包含完整的页面堆栈信息。这个字符串可以通过调用Frame的
GetNavigationState方法来检索（代码文件ApplicationLifetimeSample/App.xaml.cs）：
    private async void OnSuspending(object sender, SuspendingEventArgs e)
    {
      var deferral = e.SuspendingOperation.GetDeferral();
      var frame = Window.Current.Content as Frame;
      if (frame? .BackStackDepth >= 1)
      {
      var suspensionManager = new NavigationSuspensionManager();
      string navigationState = frame.GetNavigationState();
      if (navigationState ! = null)
      {
        await suspensionManager.SetNavigationStateAsync(navigationState);
      }
      }
      //...
      deferral.Complete();
    }
在Windows 8中，在应用程序终止前，只暂停几秒钟。在Windows 10中，可以延长这
个时间，以进行网络调用，从服务中检索数据，给服务上传数据，或跟踪位置。为此，只
需要在OnSuspending方法内创建一个ExtendedExecutionSession，设置理由，比如
ExtendedExecutionReason.SavingData。调用RequestExecutionAsync来请求扩展。只要没有
拒绝延长应用程序的执行，就可以继续扩展的任务。
33.4.2 激活暂停的应用程序
GetNavigationState返回的字符串用逗号分隔，列出了页面堆栈的完整信息，包括类型
信息和参数。不应该解析字符串，获得其中的不同部分，因为在Windows运行库的更新实
现中，这可能会改变。仅仅使用这个字符串恢复状态，用SetNavigationState恢复页面堆栈
是可行的。如果字符串格式在未来的版本中有变化，这两个方法也会改变。
在启动应用程序时，为了设置页面堆栈，需要更改OnLaunched方法。这个方法在
Application基类中重写，在启动应用程序时调用。参数LaunchActivatedEventArgs给出了应
用程序启动方式的信息。Kind属性返回一个ActivationKind枚举值，通过它可以读取应用
程序的启动方式：由用户单击磁贴，启动一个语音命令，或在Windows中启动，例如把它
启动为一个共享目标。这个场景需要PreviousExecutionState，它返回一个
ApplicationExecutionState枚举值，来提供之前应用程序结束方式的信息。如果应用程序用
ClosedByUser值结束，就不需要特殊操作；应用程序应重新开始。然而，如果应用程序之
前是被终止的，PreviousExecutionState就包含Terminated值。这个状态可用于将应用程序
返回到之前用户退出时的状态。这里，页面堆栈从NavigationSuspensionManager中检索，
给方法SetNavigationState传递以前保存的字符串，来设置根框架（代码文件
ApplicationLifetimeSample /App.xaml.cs）：
    protected override async void OnLaunched(LaunchActivatedEventArgs e)
    {
      Frame rootFrame = Window.Current.Content as Frame;
      if (rootFrame == null)
      {
        rootFrame = new Frame();
        rootFrame.NavigationFailed += OnNavigationFailed;
        if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
        {
        var suspensionManager = new NavigationSuspensionManager();
        string navigationState =
          await suspensionManager.GetNavigationStateAsync();
        rootFrame.SetNavigationState(navigationState);
        // etc.
      }
      // Place the frame in the current Window
      Window.Current.Content = rootFrame;
    }
    if (rootFrame.Content == null)
    {
      rootFrame.Navigate(typeof(MainPage), e.Arguments);
    }
    Window.Current.Activate();
    }
33.4.3 测试暂停
现在启动该应用程序（参见图33-1），导航到另一个页面，然后打开另一个应用程
序，并等待前一个应用程序终止。如果将Status Values选项设为“Show Suspended Status”，
可以在任务管理器的Details视图中看到暂停的应用程序。但是，在测试暂停时，这不是一
个简单的方法（因为应用程序可能在很久之后才暂停），但可以调试不同的状态。
图33-1
使用调试器则不同。如果应用程序一旦失去焦点就会暂停，那么每到达一个断点就会
暂停，因此在调试器中运行时，暂停是被禁用的，正常的暂停机制不会起作用。但是，模
拟暂停很容易。打开Debug 
Location工具栏，可以看到3个按钮：Suspend、Resume和
Suspend and shutdown（参见图33-2）。如果选择Suspend and shutdown，然后再次启动应
用程序，那么应用程序将从前一个状态ApplicationExecutionState.Terminated继续运行，因
此会打开用户之前打开的页面。
图33-2
33.4.4 页面状态
用户输入的任何数据也应该恢复。为了进行演示，在Page1上创建两个输入字段（代
码文件ApplicationLifetimeSample/Page1.xaml）：
这个输入字段的数据表示由DataManager类定义，从Data属性中返回，如下面的代码
片段所示（代码文件ApplicationLifetimeSample / Page1.xaml.cs）：
    public DataManager Data { get; } = DataManager.Instance;
DataManager类定义了属性Session1和Session2，其值存储在Dictionary中（代码文件
Application-LifetimeSamlple / Services / DataManager.cs）：
      public class DataManager: INotifyPropertyChanged
      {
        private const string SessionStateFile = "TempSessionState.json";
        private Dictionary _state = new Dictionary()
        {
          [nameof(Session1)] = string.Empty,
          [nameof(Session2)] = string.Empty
        };
        private DataManager()
        {
        }
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(
          [CallerMemberName] string propertyName = null)
        {
          PropertyChanged? .Invoke(this, new PropertyChangedEventArgs(propertyNam
e));
        }
        public static DataManager Instance { get; } = new DataManager();
        public string Session1
        {
          get { return _state[nameof(Session1)]; }
          set
          {
          _state[nameof(Session1)] = value;
          OnPropertyChanged();
          }
        }
        public string Session2
        {
          get { return _state[nameof(Session2)]; }
          set
          {
        _state[nameof(Session2)] = value;
        OnPropertyChanged();
          }
        }
为了加载和存储会话状态，定义了SaveTempSessionAsync和LoadTempSessionAsync方
法。其实现代码使用Json.Net把字典序列化为JSON格式。但是，可以使用任何序列化（代
码文件ApplicationLifetimeSample / Services / DataManager.cs）:
      public async Task SaveTempSessionAsync()
      {
        StorageFile file =
          await ApplicationData.Current.LocalCacheFolder.CreateFileAsync(
          SessionStateFile, CreationCollisionOption.ReplaceExisting);
        Stream stream = await file.OpenStreamForWriteAsync();
        var serializer = new JsonSerializer();
        using (var writer = new StreamWriter(stream))
        {
          serializer.Serialize(writer, _state);
        }
      }
      public async Task LoadTempSessionAsync()
      {
        Stream stream = await
          ApplicationData.Current.LocalCacheFolder.OpenStreamForReadAsync(
          SessionStateFile);
        var serializer = new JsonSerializer();
        using (var reader = new StreamReader(stream))
        {
          string json = await reader.ReadLineAsync();
          Dictionary state =
          JsonConvert.DeserializeObject>(json);
          _state = state;
          foreach (var item in state)
          {
          OnPropertyChanged(item.Key);
          }
        }
      }
  注意： XML和JSON的序列化参见第27章。
剩下的就是调用SaveTempSessionAsync和LoadTempSessionAsync方法，暂停、激活应
用程序。这些方法添加到OnSuspending和OnLaunched方法中读写页面堆栈的地方（代码
文件Application-LifetimeSample / App.xaml.cs）：
      private async void OnSuspending(object sender, SuspendingEventArgs e)
      {
        var deferral = e.SuspendingOperation.GetDeferral();
        //...
        await DataManager.Instance.SaveTempSessionAsync();
        deferral.Complete();
      }
      protected override async void OnLaunched(LaunchActivatedEventArgs e)
      {
        Frame rootFrame = Window.Current.Content as Frame;
        if (rootFrame == null)
        {
          rootFrame = new Frame();
          rootFrame.NavigationFailed += OnNavigationFailed;
          if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
          {
          //...
          await DataManager.Instance.LoadTempSessionAsync();
          }
          // Place the frame in the current Window
          Window.Current.Content = rootFrame;
        }