###  控制功能请求分析
登录后，要控制特斯拉汽车，先会获取账户所属的车辆。在APP中如果只有一辆车则直接现实车辆信息和控制界面，如果有两辆及以上，则会先选择要控制的车辆。
我们登录成功后，只要我们在当前APP界面中，在Burp中会收到多次请求。这里还可以看到关于发送log的请求，这在自己实现api时则可以跳过这个记录。
1、 **车辆列表**
根据burp的历史记录，或者在拦截的时候拦截其相应内容来进行分析。通过分析可以看到获取vin，id号的请求是`/api/1/products`，因为返回的格式为json，其信息都在因为返回内容在键，返回的内容中包含id号（id）、用户id（user_id）、vin、显示名字（display_name）、状态（state）等信息。这里id号后面会用到，对汽车进行的操作都是通过这里的id号。如果有两辆车以上，则遍历即可。
2、 **车辆详细信息**
通过记录可以看到获取车辆详细信息的api地址为`/api/1/vehicles/{vehicle_id}/vehicle_data`
，通过抓取停止状态和行驶状态下的数据，可以看到由`endpoints`参数控制，值分别为`drive_state`(行驶中)、`climate_state%3Bgui_settings`、`climate_state%3Bcharge_state%3Bdrive_state%3Bgui_settings%3Bvehicle_state`。
对于行驶中的状态，通过api可以获取当前驾驶速度。
这里根据返回的json进行分析即可。这里不做详细描述。
3、 **温度控制**
采用同样的方式，在app中操作，在burp中进行拦截或者从sitemap，历史记录里去分析。
要先调整温度，需要先开启，然后设置温度。也可以关闭温度控制。
api地址为：
       /api/1/vehicles/{vehicle_id}/command/auto_conditioning_start //开启温度控制
       /api/1/vehicles/{vehicle_id}/command/auto_conditioning_stop  //关闭温度控制
       /api/1/vehicles/{vehicle_id}/command/set_temps                    //设置温度
开启和关闭使用空的json即可，或者去掉Content-Type头。
设置温度的请求如下：
       POST /api/1/vehicles/{vehicle_id}/command/set_temps HTTP/1.1
       user-agent: Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5 Build/MOB31E; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/44.0.2403.117 Mobile Safari/537.36
       x-tesla-user-agent: TeslaApp/3.10.8-421/adff2e065/android/6.0.1
       authorization: Bearer *****
       Content-Type: application/json; charset=utf-8
       Content-Length: 42
       Host: owner-api.teslamotors.com
       Connection: close
       {"driver_temp":22.5,"passenger_temp":22.5}
在分析过程中还会出现响应头尾304的情况，一般出现在GET请求中，我们只需要去掉If-None-Match请求头即可。
4、 **其他**
对于其他功能，分析方法都大致类似，了解了方法后，可以去分析其他的部分，然后对比已经公布的api文档来确认。
###  召唤功能控车
特斯拉在2016年推出了召唤功能，2019年推出了智能召唤功能。智能召唤功能支持车辆自主行驶避让障碍物，并能到达车主面前或者车主指定的位置，无需驾驶员在车内控制。当然这项功能对场地有一定要求，仅限于在“私家停车区域和行车道”使用，无法在公路上使用该功能。
召唤功能不是使用的`owner-api.teslamotors.com`，而是websocket通信，通信服务器为`streaming.vn.teslamotors.com`。由于特殊原因，此次召唤功能将在下篇内容中介绍。
###  分析结果
根据截获的流量信息，总结一下Telsa api的几个技术点：
1、Tesla的大多数功能调用的是`owner-api.teslamotors.com`的api接口；
2、使用了oAuth 2 标准；APP采用jwt方式来获取api接口的token信息，其jwt加密方式为RS256；
3、发起的请求除登录、找回密码功能外需要`Authorization: Bearer` 请求头，后面内容为token，token具有有效期；
4、召唤功能使用的是websocket的方式，其服务器地址`wss://streaming.vn.teslamotors.com/`。
## 0x03 编程实现
这里开发语言选择Python3，其版本使用的是3.8。为了实现高效的群控，采用异步编程，这里会选择使用aiohttp库。编程实现将在下篇内容中来详细说明。
对于大多数人来说，没有车是分析的最大问题？
我也面临同样的问题，每天上下班路上看着从自己身边路过的特斯拉，彷佛它在无情的嘲笑着我，心中不免泛起淡淡的忧伤。
抱怨改变不了现实，于是借助搜索大法，几分钟后，成功获取到一个韩国人的账号，此刻我露出了久违的微笑。
本着负责任的态度，Tiger Team第一时间向泄漏账号的人发送了邮件。截止到目前，Tiger Team仍未收到回复的邮件。Tiger
Team会持续跟进该事情进展，并会及时更新至本文。注：本文分析是利用自己的账号进行，意外获取他人账号只是一个小惊喜。
## 0x04 总结
本文通过对Tesla
app逆向、抓包的方式分析出其api接口。通过本文的研究可以发现，汽车越来越智能化、方便的同时，却也引入了新的安全风险。尽管运用了很多复杂的技术来提高和保证其安全性。但是一旦黑客获取到用户名密码，就可以把Tesla开走。而获取用户名和密码的手段还是可以通过传统的方式来获得。在下一篇的文章中将尝试通过python编程实现利用API来批量控制特斯拉。
## 0x05 参考