client would also indicate what type of connection was served – for example, the
RDP server component uses a speciﬁc signing key pair with the identiﬁer
“TSSecKeySet1,” a reference to “Terminal Services.” For the client cache, in
addition to the information available from the public certiﬁcate, the Session ID can
also possibly give information on whether the host on the other end of the
connection was a Windows server.
Finally, the methods employed do not rely on proprietary functions to
extract credentials, meaning that the extraction is analysis environment agnostic.
This enables the possibility of transparently decrypting connections retroactively
through the use of virtual machines and memory introspection. One could
transparently monitor connections inside of a Windows virtual machine, when those
connections leverage Schannel.
95
5.3 Anecdotes
• Leveraging Microsoft’s provided code to execute
“BCryptEnumContextFunctions” and return cipher suites in order of
preference, all examined systems returned ephemeral suites ﬁrst, contrary to
the cited Schannel documentation.
• Previous research in the literature review focused either heavily or solely on
the process itself and not on the underlying data structures. The methodology
employed in this research took the reverse approach, which seems to have
illuminated overlooked, but valuable structures like the “KPSK” Key storage
structure that points to the private key, which other research indirectly
touched via some of the Microsoft cryptographic functions.
• The author noted that, in the limited samples observed, a symbol for an
“CSchannelTelemetryContext” existed in Windows 10, which did not exist in
symbols for the Schannel versions observed in Windows 8 and Windows 7,
though these versions were admittedly delimited from the study.
• An open-source python AES implementation was brieﬂy employed to compare
the key schedule to the ﬁxed-length 448 byte ﬁeld in the “MSSK” structure,
verifying that, in the case of AES 256, the ﬁrst 240 bytes match the key
schedule, but the remaining bytes are unaccounted.
5.4 Future Work
Given these ﬁndings, there are still more questions to be answered and work
to be done. This technique developed is self-validating in that, if it fails or is
erroneous, it will not correctly decrypt the session. Still, it should be more
rigorously evaluated by other practitioners to identify any ﬂaws or acknowledged
gaps in the implementation and meet the standards required of a forensic tool. A
list of future work the author has identiﬁed follows:
96
• Identify any relationship between the client random values and the master key
in order to process session tickets in a way that is suitable for use with
Wireshark
• Set up a rigorous testing paradigm for evaluating the current method
thoroughly across platforms and cipher suites to identify edge cases
• Examine the functions identiﬁed as related to the numbered SSL magic values
to gain further insight about the ssl7 structure
• Write a Rekall plug-in that leverages symbols for eﬃciency and accuracy over
the current method
• Further explore extracting private keys from memory alone using DPAPI-NG
• Add functionality to the plug-in to scan all processes with Schannel loaded for
session key structures
• Identify ticket encryption scheme and add functionality to the LSASSLKey
plug-in to decrypt session tickets
LIST OF REFERENCES
97
LIST OF REFERENCES
Bhargavan, K., Delignat-Lavaud, A., Pironti, A., Langley, A., & Ray, M. (2015,
September). Transport Layer Security (TLS) session hash and extended
master secret extension (RFC No. 7627). 48377 Fremont Blvd., Suite 117,
Fremont, California 94538, USA: Internet Engineering Task Force. Internet
Requests for Comments. Retrieved from http://www.ietf.org/rfc/rfc5246.txt
Checkoway, S., Niederhagen, R., Everspaugh, A., Green, M., Lange, T., Ristenpart,
T., . . . Fredrikson, M. (2014). On the practical exploitability of Dual EC in
TLS implementations. In 23rd USENIX security symposium (USENIX
security 14) (pp. 319–335).
Cohen, M. (2015a). Rekall memory forensics framework.
http://www.rekall-forensic.com/about.html.
Cohen, M. (2015b). Rekall memory forensics framework.
http://www.rekall-forensic.com/index.html.
Daigniere, F. (2013). TLS ‘secrets’ [Conference].
https://media.blackhat.com/us-13/US-13-Daigniere-TLS-Secrets-WP.pdf.
(Presentation at BlackHat USA 2013)
Delphy, B. (2013). Windbg et l’extension de mimikatz! (Blog No. November 25).
http://blog.gentilkiwi.com/securite/mimikatz/windbg-extension.
Delphy, B. (2016a). Mimikatz. https://github.com/gentilkiwi/mimikatz.
Delphy, B. (2016b). Mimikatz. https://github.com/gentilkiwi/mimikatz/tree/
master/mimikatz/modules/sekurlsa/crypto/kuhl\ m\ sekurlsa\ nt6.c.
Dierks, T., & Allen, C. (1999, January). The TLS protocol version 1.0 (RFC No.
2246). 48377 Fremont Blvd., Suite 117, Fremont, California 94538, USA:
Internet Engineering Task Force. Internet Requests for Comments. Retrieved
from http://www.ietf.org/rfc/rfc2246.txt
Dierks, T., & Rescorla, E. (2008, August). The Transport Layer Security (TLS)
protocol version 1.2 (RFC No. 5246). 48377 Fremont Blvd., Suite 117,
Fremont, California 94538, USA: Internet Engineering Task Force. Internet
Requests for Comments. Retrieved from http://www.ietf.org/rfc/rfc5246.txt
(http://www.rfc-editor.org/rfc/rfc5246.txt)
Diﬃe, W., Van Oorschot, P. C., & Wiener, M. J. (1992). Authentication and
authenticated key exchanges. Designs, Codes and cryptography, 2(2),
107–125.
98
Dolan-Gavitt, B. (2007). The VAD tree: A process-eye view of physical memory.
Digital Investigation, 4, 62–64.
Dreijer, J., & Rijs, S. (2013, December). Perfect forward not so secrecy.
https://os3.nl/ media/2013-2014/courses/ssn/projects/
perfect forward not so secrecy report.pdf.
Elliot, S. (2014). RDP Replay (Blog No. October 30).
http://www.contextis.com/resources/blog/rdp-replay/.
Freier, A., Karlton, P., & Kocher, P. (2011, August). The Secure Sockets Layer
(SSL) protocol version 3.0 (RFC No. 6101). 48377 Fremont Blvd., Suite 117,
Fremont, California 94538, USA: Internet Engineering Task Force. Internet
Requests for Comments. Retrieved from http://www.ietf.org/rfc/rfc6101.txt
Garﬁnkel, S. L. (2013). Digital media triage with bulk data analysis and
bulk extractor. Computers & Security, 32, 56–72.
Ge↵ner, J. (2011). Exporting non-exportable RSA keys [Conference].
https://media.blackhat.com/bh-eu-11/Ge↵ner/
BlackHat\ EU\ 2011\ Ge↵ner\ Exporting\ RSA\ Keys-WP.pdf.
(Presentation at BlackHat Europe 2011)
Goh, E.-J., & Boneh, D. (2001, October). SSLv3/TLS Sni↵er (proxy server):
Documentation page [Tool Documentation].
https://crypto.stanford.edu/⇠eujin/sslsni↵er/documentation.html.
Halderman, J. A., Schoen, S. D., Heninger, N., Clarkson, W., Paul, W., Calandrino,
J. A., . . . Felten, E. W. (2008). Lest we remember: Cold-boot attacks on
encryption keys. In 17th USENIX security symposium (USENIX security 08)
(pp. 45–60).
Huppert, P. (2015). Volatility. https://github.com/volatilityfoundation/
community/blob/master/PhilipHuppert/rsakey.py. (RSAKey community
plugin)
Inman, K., & Rudin, N. (2002). The origin of evidence. Forensic Science
International, 126(1), 11–16.
Intel Corporation. (2015, December). Intel R
⃝ 64 and IA-32 Architectures software
developer’s manual (Computer software manual No. 325462-057US).
Jaqueme, L. (2015). Volatility. https://github.com/volatilityfoundation/
community/blob/master/Lo%C3%AFcJaquemet/vol haystack.py. (HayStack
community plugin)
Klein, T. (2006, February). All your private keys are belong to us. extracting RSA
private keys and certiﬁcates from process memory.
http://www.trapkit.de/research/sslkeyﬁnder/keyﬁnder v1.0 20060205.pdf.
Kornblum, J. (2011). Finding aes keys (Blog No. January 18).
http://jessekornblum.livejournal.com/269749.html.
99
Ligh, M. H., Case, A., Levy, J., & Walters, A. (2014). The art of memory forensics:
Detecting malware and threats in Windows, Linux, and Mac memory. John
Wiley & Sons.
Microsoft. (n.d.-a). Certiﬁcate ﬁle formats (Technet Article No. cc770735). One
Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://technet.microsoft.com/en-us/library/cc770735.aspx.
Microsoft. (n.d.-b). Coding style conventions (Developer Network Article No.
378932). One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft
Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/aa378932.aspx.
Microsoft. (n.d.-c). Common data types (Document No. cc230309). One Microsoft
Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/cc230309.aspx.
Microsoft. (n.d.-d). Cryptographic primitives (Document No. bb204776). One
Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/bb204776.aspx.
Microsoft. (n.d.-e). Memory limits for Windows and Windows Server releases
(Developer Network Article No. aa36677). One Microsoft Way, Redmond,
WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/aa366778.aspx.
Microsoft. (n.d.-f). Memory pools (Document No. aa965226). One Microsoft Way,
Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/aa965226.aspx.
Microsoft. (n.d.-g). Names of classes, structs, and interfaces (Document No.
ms299040). One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft
Corporation. https://msdn.microsoft.com/en-us/library/ms299040.aspx.
Microsoft. (n.d.-h). PEB structure (Document No. aa813706). One Microsoft Way,
Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/aa813706.aspx.
Microsoft. (n.d.-i). s (search memory) (WinDbg Document No. ↵558855). One
Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/hardware/↵558855.aspx.
Microsoft. (2003a, July). How TLS/SSL works (Document No. cc783349). One
Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://technet.microsoft.com/en-us/library/cc783349.aspx.
Microsoft. (2003b, March). TLS/SSL tools and settings (Document No. cc776467).
One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://technet.microsoft.com/en-us/library/cc776467.aspx.
Microsoft. (2010, July). How to create a user-mode process dump ﬁle in Windows
Vista and in Windows 7 (Knowledge Base Article No. 931673). One
Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://support.microsoft.com/en-us/kb/931673.
100
Microsoft. (2014a, July). CNG features (Document No. bb204775). One Microsoft
Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/bb204775.aspx.
Microsoft. (2014b, July). Key storage and retrieval (Document No. bb204778). One
Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/bb204778.aspx.
Microsoft. (2014c, July). Prioritizing Schannel cipher suites (Document No.
bb870930). One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft
Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/bb870930.aspx.
Microsoft. (2014d, July). Transport Layer Security protocol (Document No.
dn786441). One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft
Corporation. https://technet.microsoft.com/en-us/library/
dn786441.aspx#BKMK SessionResumption.
Microsoft. (2015a, July). DER encoding of ASN.1 types (Document No. bb648640).
One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/desktop/bb648640.aspx.
Microsoft. (2015b, November). Public and private symbols (Document No. ↵553493).
One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://msdn.microsoft.com/en-us/library/windows/hardware/↵553493.aspx.
Microsoft. (2015c). Remote Desktop Connection: frequently asked questions. http://
windows.microsoft.com/en-us/windows/remote-desktop-connection-faq.
(Question “Which PCs can I connect to using Remote Desktop
Connection?”)
Microsoft. (2015d, July). Schannel SSP overview (Document No. dn786429). One
Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://technet.microsoft.com/en-us/library/dn786429.aspx.
Microsoft. (2015e, November). TLS/SSL settings (Document No. dn786418). One
Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft Corporation.
https://technet.microsoft.com/en-us/library/dn786418.aspx.
Microsoft. (2015f). Upgrade to Windows 10: Faq. http://windows.microsoft.com/
en-us/windows-10/upgrade-to-windows-10-faq. (Question “What is the free
upgrade to Windows 10”)
miTLS. (n.d.). Cross-layer protocol attacks. https://mitls.org/pages/attacks/VHC.
Mozilla. (2015). NSS key log format. Mozilla Developer Network. Retrieved from
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/
Key Log Format
101
Myerson, T. (2015). Windows 10: Preparing to upgrade one billion devices (Blog
No. July 2). https://blogs.windows.com/windowsexperience/2015/07/02/
windows-10-preparing-to-upgrade-one-billion-devices/.
NIST. (2001, November). Announcing the Advanced Encryption Standard (AES)
(FIPS Publication No. 197). 100 Bureau Drive, Stop 1070, Gaithersburg,
MD 20899-1070, USA: National Institute of Standards and Technology
(NIST). Federal Information Processing Standards (FIPS) Publication.
Retrieved from http://csrc.nist.gov/publications/ﬁps/ﬁps197/ﬁps-197.pdf
Petroni, N. L., Jr., Walters, A., Fraser, T., & Arbaugh, W. A. (2006, December).
Fatkit: A framework for the extraction and analysis of digital forensic data
from volatile system memory. Digit. Investig., 3(4), 197–210. Retrieved from
http://dx.doi.org/10.1016/j.diin.2006.10.001 doi: 10.1016/j.diin.2006.10.001
Picasso, F. (2015). Happy dpapi! (Blog No. January 13).
http://blog.digital-forensics.it/2015/01/happy-dpapi.html.
Picod, J.-M. (2016). Dpapick. https://bitbucket.org/jmichel/dpapick/src/
37a929678b0c5d6a6f025e26d262fbfcebaeebb7/DPAPI/Probes/certiﬁcate.py.
(Certiﬁcate Probe python ﬁle)
Polk, T., McKay, K., & Chokhani, S. (2014). Guidelines for the selection,
conﬁguration, and use of Transport Layer Security (TLS) implementations
(SP No. 800-52 Revision 1). 100 Bureau Drive, Stop 1070, Gaithersburg, MD
20899-1070, USA: National Institute of Standards and Technology (NIST).
NIST Special Publication. Retrieved from
http://dx.doi.org/10.6028/NIST.SP.800-52r1 doi:
10.6028/NIST.SP.800-52r1
Russinovich, M. E., Solomon, D. A., & Allchin, J. (2005). Microsoft Windows
internals: Microsoft Windows Server 2003, Windows XP, and Windows 2000
(Vol. 4). One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft
Press Redmond.
Russinovich, M. E., Solomon, D. A., & Ionescu, A. (2012). Windows internals
(Vol. 6). One Microsoft Way, Redmond, WA 98052-7329, USA: Microsoft
Press Redmond.
Salowey, J., Zhou, H., Eronen, P., & Tschofenig, H. (2008, January). Transport
Layer Security (TLS) session resumption without server-side state (RFC No.
5077). 48377 Fremont Blvd., Suite 117, Fremont, California 94538, USA:
Internet Engineering Task Force. Internet Requests for Comments. Retrieved
from http://www.ietf.org/rfc/rfc5077.txt
Shamir, A., & van Someren, N. (1998). Playing ‘hide and seek’ with stored keys. In
Financial cryptography (pp. 118–124).
Shirey, R. (2007, August). Internet security glossary, version 2 (RFC No. 4949).
48377 Fremont Blvd., Suite 117, Fremont, California 94538, USA: Internet
Engineering Task Force. Internet Requests for Comments. Retrieved from
http://www.ietf.org/rfc/rfc4949.txt
102
Taubert, T. (2014). Botching forward secrecy. the sad state of server-side TLS
session resumption implementations (Blog No. November).
https://timtaubert.de/blog/2014/11/
the-sad-state-of-server-side-tls-session-resumption-implementations/.
Volatility. (2015). Volatility. https://github.com/volatilityfoundation/volatility/
blob/master/volatility/plugins/dumpcerts.py. (DumpCerts plugin)
Walters, A., & Petroni, N. L. (2007). Volatools: Integrating volatile memory into the
digital investigation process [Conference]. https://www.blackhat.com/
presentations/bh-dc-07/Walters/Presentation/bh-dc-07-Walters-up.pdf.
(Presentation at BlackHat DC 2007)
Warren, T. (2015). Why Microsoft is calling Windows 10 ‘the last version of
Windows’ (No. May 7). http://www.theverge.com/2015/5/7/8568473/
windows-10-last-version-of-windows.
Wireshark. (2015). Wireshark. https://github.com/wireshark/wireshark/blob/
master/epan/dissectors/packet-ssl-utils.c.