-   将由文件、卷、本地 SCSI 设备或者 RAM
    磁盘支持的本地存储资源导出到远程系统。
:::
`targetcli`{.literal}
工具具有基于树的布局，包括内置的标签页完成、自动完成支持和内联文档。
::: section
::: titlepage
# []{#getting-started-with-iscsi_managing-storage-devices.html#adding-an-iscsi-target_getting-started-with-iscsi}添加 iSCSI 目标 {.title}
:::
作为系统管理员，您可以使用 `targetcli`{.literal} 工具添加 iSCSI 对象。
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#installing-targetcli_adding-an-iscsi-target}安装 targetcli {.title}
:::
安装 `targetcli`{.literal} 工具来添加、监控和删除 iSCSI 存储间的连接。
::: orderedlist
**流程**
1.  安装 `targetcli`{.literal}:
    ``` screen
    # yum install targetcli
    ```
2.  启动目标服务：
    ``` screen
    # systemctl start target
    ```
3.  将目标配置为在引导时启动：
    ``` screen
    # systemctl enable target
    ```
4.  在防火墙中打开端口 `3260`{.literal} 并重新载入防火墙配置：
    ``` screen
    # firewall-cmd --permanent --add-port=3260/tcp
    Success
    # firewall-cmd --reload
    Success
    ```
5.  查看 `targetcli`{.literal} 布局：
    ``` screen
    # targetcli
    /> ls
    o- /........................................[...]
      o- backstores.............................[...]
      | o- block.................[Storage Objects: 0]
      | o- fileio................[Storage Objects: 0]
      | o- pscsi.................[Storage Objects: 0]
      | o- ramdisk...............[Storage Objects: 0]
      o- iscsi...........................[Targets: 0]
      o- loopback........................[Targets: 0]
    ```
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#creating-an-iscsi-target_adding-an-iscsi-target}创建 iSCSI 目标 {.title}
:::
创建 iSCSI 目标可让客户端的 iSCSI
发起程序访问服务器中的存储设备。目标和发起方都有唯一的标识名称。
::: itemizedlist
**先决条件**
-   已安装并运行 `targetcli`{.literal}。更多信息请参阅 ["安装
    targetcli"一节](#getting-started-with-iscsi_managing-storage-devices.html#installing-targetcli_adding-an-iscsi-target "安装 targetcli"){.xref}。
:::
::: orderedlist
**流程**
1.  进入 iSCSI 目录：
    ``` screen
    /> iscsi/
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `cd`{.literal} 命令用于更改目录以及列出要移动到的路径。
    :::
2.  使用以下选项之一创建 iSCSI 对象：
    ::: orderedlist
    1.  使用默认目标名称创建 iSCSI 对象：
        ``` screen
        /iscsi> create
        Created target
        iqn.2003-01.org.linux-iscsi.hostname.x8664:sn.78b473f296ff
        Created TPG1
        ```
    2.  使用特定名称创建 iSCSI 对象：
        ``` screen
        /iscsi> create iqn.2006-04.com.example:444
        Created target iqn.2006-04.com.example:444
        Created TPG1
        Here iqn.2006-04.com.example:444 is target_iqn_name
        ```
        将 [*iqn.2006-04.com.example:444*]{.emphasis}
        替换为特定目标名称。
    :::
3.  验证新创建的目标：
    ``` screen
    /iscsi> ls
    o- iscsi.......................................[1 Target]
        o- iqn.2006-04.com.example:444................[1 TPG]
            o- tpg1...........................[enabled, auth]
               o- acls...............................[0 ACL]
                o- luns...............................[0 LUN]
               o- portals.........................[0 Portal]
    ```
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#iscsi-backstore_adding-an-iscsi-target}iSCSI Backstore {.title}
:::
iSCSI 后端存储支持将导出的 LUN
数据存储在本地计算机上的不同方法。创建存储对象定义了后端存储使用的资源。管理员可以选择
Linux-IO(LIO)支持的以下后端存储设备：
::: itemizedlist
-   `fileio`{.literal}
    后端存储（backstore）：如果您在本地文件系统中将常规文件用作磁盘镜像，请创建一个
    `fileio`{.literal} 存储对象。有关创建 `fileio`{.literal}
    后端存储，请参阅 ["创建 fileio
    存储对象"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-a-fileio-storage-object_adding-an-iscsi-target "创建 fileio 存储对象"){.xref}。
-   `block`{.literal}
    后端存储：如果您使用任何本地块设备和逻辑设备，创建一个
    `block`{.literal} 存储对象。有关创建 `block`{.literal}
    后端存储，请参阅
    ["创建块存储对象"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-a-block-storage-object_adding-an-iscsi-target "创建块存储对象"){.xref}。
-   `pscsi`{.literal} 后端存储：如果您的存储对象支持直接通过 SCSI
    命令，请创建一个 `pscsi`{.literal} 存储对象。有关创建
    `pscsi`{.literal} 后端存储，请参阅 ["创建 pscsi
    存储对象"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-a-pscsi-storage-object_adding-an-iscsi-target "创建 pscsi 存储对象"){.xref}
-   `ramdisk`{.literal} 后端存储：如果您想创建一个临时 RAM
    支持设备，请创建一个 `ramdisk`{.literal} 存储对象。有关创建
    `ramdisk`{.literal} 后端存储，请参阅 ["创建内存副本 RAM
    磁盘存储对象"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-a-memory-copy-ram-disk-storage-object_adding-an-iscsi-target "创建内存副本 RAM 磁盘存储对象"){.xref}。
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#creating-a-fileio-storage-object_adding-an-iscsi-target}创建 fileio 存储对象 {.title}
:::
`fileio`{.literal} 存储对象可以支持 `write_back`{.literal} 或
`write_thru`{.literal} 操作。`write_back`{.literal}
操作启用本地文件系统缓存。这提高了性能，但会增加数据丢失的风险。建议使用
`write_back=false`{.literal} 来禁用 `write_back`{.literal} 操作，而使用
`write_thru`{.literal} 操作。
::: itemizedlist
**先决条件**
-   已安装并运行 `targetcli`{.literal}。更多信息请参阅 ["安装
    targetcli"一节](#getting-started-with-iscsi_managing-storage-devices.html#installing-targetcli_adding-an-iscsi-target "安装 targetcli"){.xref}。
:::
::: orderedlist
**流程**
1.  进入 backstores 目录：
    ``` screen
    /> backstores/
    ```
2.  创建一个 `fileio`{.literal} 存储对象：
    ``` screen
    /> backstores/fileio create file1 /tmp/disk1.img 200M write_back=false
    Created fileio file1 with size 209715200
    ```
3.  验证创建的 `fileio`{.literal} 存储对象：
    ``` screen
    /backstores> ls
    ```
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#creating-a-block-storage-object_adding-an-iscsi-target}创建块存储对象 {.title}
:::
块驱动程序允许使用 `/sys/block/`{.literal} 目录中显示的任何块设备与
Linux-IO(LIO)一起使用。这包括物理设备（如
HDD、SSD、CD、DVD）和逻辑设备（如软件或硬件 RAID 卷或 LVM 卷）。
::: itemizedlist
**先决条件**
-   已安装并运行 `targetcli`{.literal}。更多信息请参阅 ["安装
    targetcli"一节](#getting-started-with-iscsi_managing-storage-devices.html#installing-targetcli_adding-an-iscsi-target "安装 targetcli"){.xref}。
:::
::: orderedlist
**流程**
1.  进入 backstores 目录：
    ``` screen
    /> backstores/
    ```
2.  创建 `block`{.literal} 后端存储：
    ``` screen
    /> backstores/block create name=block_backend dev=/dev/sdb
    Generating a wwn serial.
    Created block storage object block_backend using /dev/vdb.
    ```
3.  验证创建的 `block`{.literal} 存储对象：
    ``` screen
    /backstores> ls
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您还可以在逻辑卷中创建块后备存储。
    :::
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#creating-a-pscsi-storage-object_adding-an-iscsi-target}创建 pscsi 存储对象 {.title}
:::
您可以将任何支持直接传递 SCSI 命令的存储对象配置为没有 SCSI
模拟的后端存储，并带有一个底层 SCSI 设备，它出现在
`/proc/scsi/scsi`{.literal} 的 `lsscsi`{.literal} （如一个 SAS
硬盘）。这个子系统支持 SCSI-3 及更高系统。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
`pscsi`{.literal} 应该只供高级用户使用。设备固件中通常不实施高级 SCSI
命令，如非对称逻辑单元分配(ALUA)或持久保留（例如，VMware ESX 和 vSphere
使用的命令），并可能导致故障或崩溃。当有疑问时，在生产环境中使用
`block`{.literal} 后端存储。
:::
::: itemizedlist
**先决条件**
-   已安装并运行 `targetcli`{.literal}。更多信息请参阅 ["安装
    targetcli"一节](#getting-started-with-iscsi_managing-storage-devices.html#installing-targetcli_adding-an-iscsi-target "安装 targetcli"){.xref}。
:::
::: orderedlist
**流程**
1.  进入 backstores 目录：
    ``` screen
    /> backstores/
    ```
2.  为物理 SCSI 设备创建一个 `pscsi`{.literal}
    后端存储，在这个示例中是使用 `/dev/sr0`{.literal} 的 TYPE_ROM 设备：
    ``` screen
    /> backstores/pscsi/ create name=pscsi_backend dev=/dev/sr0
    Generating a wwn serial.
    Created pscsi storage object pscsi_backend using /dev/sr0
    ```
3.  验证创建的 `pscsi`{.literal} 存储对象：
    ``` screen
    /backstores> ls
    ```
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#creating-a-memory-copy-ram-disk-storage-object_adding-an-iscsi-target}创建内存副本 RAM 磁盘存储对象 {.title}
:::
内存复制 RAM 磁盘(`ramdisk`{.literal})为 RAM 磁盘提供完整的 SCSI
模拟和独立的内存映射，使用内存副本作为启动器。这为多会话提供了功能，在用于生产目的的快速和可变量存储中特别有用。
::: itemizedlist
**先决条件**
-   已安装并运行 `targetcli`{.literal}。更多信息请参阅 ["安装