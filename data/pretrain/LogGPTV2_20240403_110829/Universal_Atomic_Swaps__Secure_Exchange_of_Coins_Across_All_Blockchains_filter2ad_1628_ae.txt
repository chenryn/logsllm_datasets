k
k , sk (1)
k , T1
frz,k, pk (10)
k
frz,k, σ(1)
.
, sk (10)
1,k , C (1)
k , π(1)
k
.
pk (1)
swpd,i, sk (1)
• Party P1 generates
• Party P1 generates swap transaction tx (1)
• Party P0 generates
• Party P0 generates swap transaction tx (0)
swpd,k, sk (0)
pk (0)
swpd,k
swpd,i
3) For i ∈ [n], parties P0 and P1 run a 2PC protocol ΓSIG
swp,i, Y
• The 2PC protocol takes as common input
tx (1)
swp,i := tx
(cid:17) ← ΠSIG
(cid:17) ← ΠSIG
(cid:16)
swp,k := tx
(cid:16)
(cid:16)
pk (01)
DS .KGen(1λ) for i ∈ [n].
swpd,i, v(0)
DS .KGen(1λ) for k ∈ [˜n].
swpd,k, v(1)
, pk (1)
k
i
i
(cid:17)
(cid:17)
k
, pk (0)
pk (10)
AdpSg that does the following:
for i ∈ [n] and sends it to party P0.
and sends it to party P1.
from the parties, and as private input sk (01)
0,i
from party P0, and as
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
.
(cid:17)
(cid:17)
i
i
:=
:=
(cid:16)
sk (01)
private input sk (01)
1,i
from party P1.
• If SIG = Schnorr, compute sk (01)
mod q.
(cid:17)
· sk (01)
sk (01)
0,i
swp,i ← ΠSIG
• It computes ˜σ(1)
• Both parties check if ΠSIG
• In the end, both parties P0 and P1 obtain
AS .pSign
AS .pVf
i
pk (01)
sk (01)
(cid:16)
(cid:16)
1,i
i
sk (01)
0,i + sk (01)
1,i
mod q, and if SIG = ECDSA, compute
and outputs ˜σ(1)
swp,i ﬁrst to P0 and then to P1.
= 1, and abort otherwise.
4) After the above step is successful, for all k ∈ [˜n], party P0 and P1 run the 2PC protocol ΓSIG
• The 2PC protocol takes as common input
tx (0)
swp,k, Y
from the parties, and as private input sk (10)
AdpSg that does the following:
0,k from party P0, and
(cid:16)
(cid:16)
(cid:17)
(cid:111)
(cid:17)
, tx (1)
swp,i, Y
swp,i, Y ; ˜σ(1)
, tx (1)
˜σ(1)
swp,i
swp,i
.
i∈[n]
(cid:110)
(cid:16)
(cid:17)
(cid:17)
(cid:17)
(cid:17)
(cid:17)
k
k
:=
(cid:16)
sk (10)
as private input sk (10)
1,k from party P1.
:=
• If SIG = Schnorr, compute sk (10)
mod q
(cid:17)
0,k · sk (10)
sk (10)
swp,k ← ΠSIG
• It computes ˜σ(0)
• Both parties check if ΠSIG
• In the end, both parties P0 and P1 obtain
AS .pSign
AS .pVf
k
pk (10)
sk (10)
(cid:16)
(cid:16)
1,k
k
(cid:17)
, tx (0)
(cid:110)
swp,k, Y
, tx (0)
swp,k, Y ; ˜σ(0)
˜σ(0)
swp,k
(cid:111)
swp,k
.
k∈[˜n]
sk (10)
0,k + sk (10)
1,k
mod q, and, if SIG = ECDSA, compute
and outputs ˜σ(0)
swp,k to both parties ﬁrst to P0 and then to P1.
= 1, and abort otherwise.
Fig. 5: Atomic Swap protocol run between parties P0 and P1 where SIG = {Schnorr, ECDSA}
verify that the i-th key is correctly generated. While knowing
the secret key sk, the party can derive sk i := sk · H(r||i).
We can also parallelise the computation of different instances
of the 2PC protocol ΓSIG
AdpSg. In practice, it would be possible to
use the multi-core architecture available at current commodity
machines to perform this paralellization for moderate amount
of coin swaps.
Performance. With the aforementioned implementation-level
optimizations, we do a back-of-the-envelope calculation of
the performance of our protocol by extracting the number
12
Swap Complete Phase
(cid:16)
(cid:17)
AS .Adapt
˜σ(0)
swp,k, y
, and posts
(cid:16)
tx (0)
swp,k, σ(0)
swp,k
(cid:17)
(cid:16)
on the blockchain B.
(cid:17)
σ(0)
swp,j, ˜σ(0)
˜σ(1)
swp,i, y
for all i ∈ [n] on the blockchain B (corresponding to currency of i-th coin).
, and for all i ∈ [n], compute σ(1)
swp,i ← ΠSIG
AS .Adapt
Swap Timeout Phase
1) If party P0 fails to post
for any j ∈ [˜n] on chain before time T1, party P1 does the following:
swp,k ← ΠSIG
1) For all k ∈ [˜n] party P0 computes σ(0)
(cid:17)
2) Party P1 picks j ∈ [˜n], and does the following:
(cid:16)
• Compute y ← ΠSIG
swp,i, σ(1)
• It posts
tx (1)
AS .Ext
swp,i
swp,j, Y
(cid:16)
(cid:17)
(cid:17)
(cid:16)
(cid:16)
0,j ← ΠVTD.ForceOp
(cid:17)
sk (10)
(cid:16)
swp,j, σ(0)
tx (0)
swp,j
j
(cid:16)
• Finish computing sk (10)
• If SIG = Schnorr, compute sk (10)
mod q.
pk (1)
rfnd,i, sk (1)
· sk (10)
1,j
• Generate fresh key pairs
sk (10)
0,j
sk (10)
:=
:=
j
rfnd,j
(cid:17)
, pk (1)
rfnd,j, v(1)
.
(cid:16)
rfnd,j ← ΠSIG
coins by posting
j
tx (1)
rfnd,j := tx
pk (10)
j
• Generate a signature σ(1)
• Reclaim the v(1)
j
(cid:16)
(cid:17)
0,j + sk (10)
1,j
j
.
C (1)
(cid:17)
(cid:16)
(cid:17) ← ΠSIG
(cid:16)
(cid:17)
(cid:17)
DS .Sign
tx (1)
sk (10)
rfnd,j, σ(1)
j
rfnd,j
, tx (1)
rfnd,j
mod q, else if SIG = ECDSA, compute
DS .KGen(1λ), and generate redeem transaction
2) Similarly, if party P1 fails to post a valid transaction-signature pair
T0, party P0 follows steps analogous to above and reclaims the v(0)
for any j ∈ [n] on chain before time
on the blockchain B.
tx (0)
Fig. 6: Swap complete and timeout phase of the atomic swap protocol between P0 and P1 where SIG = {Schnorr, ECDSA}
swp,j
coins by posting
rfnd,j, σ(0)
swp,j, σ(1)
tx (1)
rfnd,j
j
on the redeem transaction.
on the blockchain B (corresponding to currency of j-th coin).
(cid:16)
(cid:17)
(cid:16)
(cid:17)
of invocations to the underlying building blocks, namely (i)
adaptor signatures ΠSIG
AS ; (ii) VTD commit and verify; and
(iii) standard digital signature scheme ΠDS.Sign. We show
our results in Table III. Overall we observe that the protocol
uses several operations only once. The costliest operation is
AdpSg since it requires interaction between the two participants.
ΓSIG
Yet, each instance of ΓSIG
AdpSg requires only 267ms for ECDSA
and 5ms for Schnorr as reported in Section VI-B. The rest
of operations that need to be repeated n + ˜n times can be
performed locally by each participant.
Comparison with HTLC. We have taken the HTLC imple-
mentation in Solidity available at [71] and calculated the gas
costs to compute the three operations required in a swap: (i)
create the HTLC contract; (ii) redeem the contract with a valid
hash preimage; and (iii) refund the contract in case the timeout
expires. The gas costs are shown in Table IV.
We observe that in the case of universal swap, we only
require a standard transfer of ETH between two accounts, an
TABLE III: Operations required in our atomic swap protocol.
Complete Phase
Setup Phase
Lock Phase
Op type
Joint key generation
Key generation
Signing
Signature verify
VTD commit