NTSTATUS RegistryNotificationCallback(
PVOID pCallbackContext,
PVOID pRegNotifyClass,
PVOID pInfo)
Evading EDR (Early Access) © 2023 by Matt Hand
96   Chapter 5
{
NTSTATUS status = STATUS_SUCCESS;
1 switch (((REG_NOTIFY_CLASS)(ULONG_PTR)pRegNotifyClass))
{
case RegNtPostCreateKey:
{
 2 PREG_POST_OPERATION_INFORMATION pPostInfo =
(PREG_POST_OPERATION_INFORMATION)pInfo;
--snip--
break;
}
case RegNtPostSetValueKey:
{
--snip--
break;
}
default:
break;
}
return status;
}
Listing 5-16: Scoping a registry callback notification routine to work with specific 
 operations only
In this example, the driver first casts the pRegNotifyClass input param-
eter to a REG_NOTIFY_CLASS structure for comparison 1 using a switch case. 
This is to make sure it’s working with the correct structure. The driver then 
checks whether the class matches one that it supports (in this case, key cre-
ation and the setting of a value). If it does match, the pInfo member is cast 
to the appropriate structure 2 so that the driver can continue to parse the 
event notification data.
An EDR developer may want to limit its scope even further to lessen the 
performance hit the system will take. For instance, if a driver wants to moni-
tor service creation via the registry, it would need to check for registry-key 
creation events in the HKLM:\SYSTEM\CurrentControlSet\Services\ path only.
Evading Registry Callbacks
Registry callbacks have no shortage of evasion opportunities, most of which 
are due to design decisions aimed at improving system performance. When 
drivers reduce the number of registry events they monitor, they can intro-
duce blind spots in their telemetry. For example, if they’re only monitoring 
events in HKLM, the hive used for the configuration of items shared across 
the system, they won’t detect any per-user registry keys created in HKCU or 
HKU, the hives used to configure items specific to a single principal. And if 
they’re monitoring registry-key creation events only, they’ll miss registry-key 
restoration events. EDRs commonly use registry callbacks to help protect 
unauthorized processes from interacting with registry keys associated with 
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   97
its agent, so it’s safe to assume that some of the allowable performance over-
head is tied up in that logic.
This means that there are likely coverage gaps in the sensor that attack-
ers can abuse. For example, Listing 5-17 contains the disassembly of a popu-
lar endpoint security product’s driver to show how it handles a number of 
registry operations.
switch(RegNotifyClass) {
case RegNtDeleteKey:
pObject = *RegOperationInfo;
local_a0 = pObject;
1 CmSetCallbackObjectContext(pObject, &g_RegistryCookie), NewContext, 0);
default:
goto LAB_18000a2c2;
case RegNtDeleteValueKey:
pObject = *RegOperationInfo;
local_a0 = pObject;
2 NewContext = (undefined8 *)InternalGetNameFromRegistryObject(pObject);
CmSetCallbackObjectContext(pObject, &g_RegistryCookie, NewContext, 0);
goto LAB_18000a2c2;
case RegNtPreEnumerateKey:
iVar9 = *(int *)(RegOperationInfo + 2);
pObject = RegOperationInfo[1];
iVar8 = 1;
local_b0 = 1;
local_b4 = iVar9;
local_a0 = pObject;
break;
--snip--
Listing 5-17: Registry callback routine disassembly
The driver uses a switch case to handle notifications related to dif-
ferent types of registry operations. Specifically, it monitors key-deletion, 
value-deletion, and key-enumeration events. On a matching case, it 
extracts certain values based on the operation type and then processes 
them. In some cases, it also applies a context to the object 1 to allow for 
advanced processing. In others, it calls an internal function 2 using the 
extracted data.
There are a few notable gaps in coverage here. For instance, 
RegNtPostSetValueKey, the operation of which the driver is notified when-
ever the RegSetValue(Ex) API is called, is handled in a case much later in 
the switch statement. This case would detect an attempt to set a value in a 
registry key, such as to create a new service. If the attacker needs to create 
a new registry subkey and set values inside it, they’ll need to find another 
method that the driver doesn’t cover. Thankfully for them, the driver 
doesn’t process the RegNtPreLoadKey or RegNtPostLoadKey operations, which 
would detect a registry hive being loaded from a file as a subkey. So, the 
operator may be able to leverage the RegLoadKey API to create and popu-
late their service registry key, effectively creating a service without being 
detected.
Evading EDR (Early Access) © 2023 by Matt Hand
98   Chapter 5
Revisiting the post-notification call RegNtPostSetValueKey, we can see that 
the driver exhibits some interesting behavior common among most prod-
ucts, shown in Listing 5-18.
--snip--
case RegNtPostSetValueKey:
 1 RegOperationStatus = RegOperationInfo->Status;
 2 pObject = RegOperationInfo->Object;
iVar7 = 1;
local_b0 = 1;
pBuffer = puVar5;
p = puVar5;
local_b4 = RegOperationStatus;
local_a0 = pObject;
}
if ((RegOperationStatus < 0 || (pObject == (PVOID)0x0)) { 3
LAB_18000a252:
if (pBuffer != (undefined8 *)0x0) {
4 ExFreePoolWithTag(pBuffer, 0);
NewContext = (undefined8 *)0x0;
}
}
else {
if ((pBuffer != (undefined8 *)0x0 ||
5 (pBuffer = (undefined8 *)InternalGetNameFromRegistryObject((longlong)pObject),
NewContext = pBuffer, pBuffer != (undefined8 *)0x0) {
uBufferSize = &local_98;
if (local_98 == 0) {
uBufferSize = (ushort *)0x0;
}
local_80 = (undefined8 *)FUN_1800099e0(iVar7, (ushort *)pBuffer, uBufferSize);
if (local_80 != (undefined8 *)0x0) {
FUN_1800a3f0(local_80, (undefined8 *)0x0);
local_b8 = 1;
}
goto LAB_18000a252;
}
}
Listing 5-18: Registry-notification processing logic
This routine extracts the Status 1 and Object 2 members from the 
associated REG_POST_OPERATION_INFORMATION structure and stores them as local 
variables. Then it checks that these values aren’t STATUS_SUCCESS or NULL, 
respectively 3. If the values fail the check, the output buffer used for relay-
ing messages to the user-mode client is freed 4 and the context set for the 
object is nulled. This behavior may seem strange at first, but it relates to the 
internal function renamed InternalGetNameFromRegistryObject() for clarity 5. 
Listing 5-19 contains the decompilation of this function.
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   99
void * InternalGetNameFromRegistryObject(longlong RegObject)
{
NTSTATUS status;
NTSTATUS status2;
POBJECT_NAME_INFORMATION pBuffer;
PVOID null;
PVOID pObjectName;
ulong pulReturnLength;
ulong ulLength;
null = (PVOID)0x0;
pulReturnLength = 0;
 1 if (RegObject != 0) {
status = ObQueryNameString(RegObject, 0, 0, &pulReturnLength);
ulLength = pulReturnLength;
pObjectName = null;
if ((status = -0x3ffffffc) &&
(pBuffer = (POBJECT_NAME_INFORMATION)ExAllocatePoolWithTag(
PagedPool, (ulonglong)pReturnLength, 0x6F616D6C),
 pBuffer != (POBJECT_NAME_INFORMATION)0x0)) {
  memset(pBuffer, 0, (ulonglong)ulLength);
 2 status2 = ObQueryNameString(RegObject, pBuffer, ulLength, &pulReturnLength);
  pObjectName = pBuffer;
  if (status2 < 0) {
ExFreePoolWithTag(pBuffer, 0);
pObjectName = null;
  }
}
return pObjectName;
}
return (void *)0x0;
}
Listing 5-19: The InternalGetNameFromRegistryObject() disassembly
This internal function takes a pointer to a registry object, which is 
passed in as the local variable holding the Object member of the REG_POST 
_OPERATION_INFORMATION structure, and extracts the name of the registry key 
being acted on using nt!ObQueryNameString() 2. The problem with this flow is 
that if the operation was unsuccessful (as in the Status member of the post-
operation information structure isn’t STATUS_SUCCESS), the registry object 
pointer is invalidated and the call to the object-name-resolution function 
won’t be able to extract the name of the registry key. This driver contains 
conditional logic to check for this condition 1.
N O T E 
This specific function isn’t the only API affected by this problem. We often see similar 
logic implemented for other functions that extract key-name information from registry 
objects, such as nt!CmCallbackGetKeyObjectIDEx().
Operationally, this means that an unsuccessful attempt to interact with 
the registry won’t generate an event, or at least one with all the relevant 
details, from which a detection can be created, all because the name of the 
Evading EDR (Early Access) © 2023 by Matt Hand
100   Chapter 5
registry key is missing. Without the name of the object, the event would 
effectively read “this user attempted to perform this registry action at this 
time and it was unsuccessful”: not very actionable for defenders.
But for attackers, this detail is important because it can change the risk 
calculus involved in performing certain activities. If an action targeting the 
registry were to fail (such as an attempt to read a key that doesn’t exist or to 
create a new service with a mistyped registry path), it would likely go unno-
ticed. By checking for this logic when a driver is handling post-operation 
registry notifications, attackers can determine which unsuccessful actions 
would evade detection.
Evading EDR Drivers with Callback Entry Overwrites
In this chapter as well as Chapters 3 and 4, we covered many kinds of call-
back notifications and discussed various evasions geared at bypassing them. 
Due to the complexity of EDR drivers and their different vendor imple-
mentations, it isn’t possible to entirely evade detection using these means. 
Rather, by focusing on evading specific components of the driver, operators 
can reduce the likelihood of triggering an alert.
However, if an attacker either gains administrator access on the host, 
has the SeLoadDriverPrivilege token privilege, or encounters a vulnerable 
driver that allows them to write to arbitrary memory, they may choose to 
target the EDR’s driver directly.
This process most commonly involves finding the internal list of callback 
routines registered on the system, such as nt!PspCallProcessNotifyRoutines in 
the context of process notifications or nt!PsCallImageNotifyRoutines for image-
load notifications. Researchers have publicly demonstrated this technique in 
many ways. Listing 5-20 shows the output of Benjamin Delpy’s Mimidrv.
mimikatz # version
Windows NT 10.0 build 19042 (arch x64)
msvc 150030729 207
mimikatz # !+
[*] 'mimidrv' service not present
[*] 'mimidrv' service successfully registered
[*] 'mimidrv' service ACL to everyone
[*] 'mimidrv' service started
mimikatz # !notifProcess
[00] 0xFFFFF80614B1C7A0 [ntoskrnl.exe + 0x31c7a0]
[00] 0xFFFFF806169F6C70 [cng.sys + 0x6c70]
[00] 0xFFFFF80611CB4550 [WdFilter.sys + 0x44550]
[00] 0xFFFFF8061683B9A0 [ksecdd.sys + 0x1b9a0]
[00] 0xFFFFF80617C245E0 [tcpip.sys + 0x45e0]
[00] 0xFFFFF806182CD930 [iorate.sys + 0xd930]
[00] 0xFFFFF806183AE050 [appid.sys + 0x1e050]
[00] 0xFFFFF80616979C30 [CI.dll + 0x79c30]
[00] 0xFFFFF80618ABD140 [dxgkrnl.sys + 0xd140]
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   101
[00] 0xFFFFF80619048D50 [vm3dmp.sys + 0x8d50]
[00] 0xFFFFF80611843CE0 [peauth.sys + 0x43ce0]
Listing 5-20: Using Mimidrv to enumerate process-notification callback routines
Mimidrv searches for a byte pattern that indicates the start of the array 
holding the registered callback routines. It uses Windows build–specific 
offsets from functions inside ntoskrnl.exe. After locating the list of callback 
routines, Mimidrv determines the driver from which the callback originates 
by correlating the address of the callback function to the address space 
in use by the driver. Once it has located the callback routine in the target 
driver, the attacker can choose to overwrite the first byte at the entry point 
of the function with a RETN instruction (0xC3). This would cause the function 
to immediately return when execution is passed to the callback, preventing 
the EDR from collecting any telemetry related to the notification event or 
taking any preventive action.
While this technique is operationally viable, deploying it comes with 
significant technical hurdles. First, unsigned drivers can’t be loaded onto 
Windows 10 or later unless the host is put into test mode. Next, the technique 
relies on build-specific offsets, which introduces complexity and unreliability 
to the tooling, as newer versions of Windows could change these patterns. 
Lastly, Microsoft has heavily invested in making Hypervisor-Protected Code 
Integrity (HVCI) a default protection on Windows 10 and has enabled it by 
default on secured-core systems. HVCI reduces the ability to load malicious 
or known-vulnerable drivers by protecting the code-integrity decision-making 
logic, including ci!g_CiOptions, which is commonly temporarily overwritten to 
allow an unsigned driver to be loaded. This drives up the complexity of over-
writing a callback’s entry point, as only HVCI-compatible drivers could be 
loaded on the system, reducing the potential attack surface.
Conclusion
While not as straightforward as the previously discussed callback types, 
image-load and registry-notification callbacks provide just as much informa-
tion to an EDR. Image-load notifications can tell us when images, whether 
they be DLLs, executables, or drivers, are being loaded, and they give the 
EDR a chance to log, act, or even signal to inject its function-hooking DLL. 
Registry notifications provide an unparalleled level of visibility into actions 
affecting the registry. To date, the strongest evasion strategies an adversary 
can employ when facing these sensors is either to abuse a gap in coverage or 
logical flaw in the sensor itself or to avoid it entirely, such as by proxying in 
their tooling.
Evading EDR (Early Access) © 2023 by Matt Hand
Evading EDR (Early Access) © 2023 by Matt Hand
While the drivers covered in previous chap-
ters can monitor many important events on 
the system, they aren’t able to detect a par-
ticularly critical kind of activity: filesystem opera-
tions. Using filesystem minifilter drivers, or minifilters for 
short, endpoint security products can learn about the 
files being created, modified, written to, and deleted.
These drivers are useful because they can observe an attacker’s interac-
tions with the filesystem, such as the dropping of malware to disk. Often, 
they work in conjunction with other components of the system. By integrat-
ing with the agent’s scanning engine, for example, they can enable the EDR 
to scan files.
Minifilters might, of course, monitor the native Windows filesystem, 
which is called the New Technology File System (NTFS) and is imple-
mented in ntfs.sys. However, they might also monitor other important 
filesystems, including named pipes, a bidirectional inter-process communi-
cation mechanism implemented in npfs.sys, and mailslots, a unidirectional 
6
F IL E S Y S T E M M IN IF ILT E R 
DR I V E R S
Evading EDR (Early Access) © 2023 by Matt Hand
104   Chapter 6
inter-process communication mechanism implemented in msfs.sys. 
Adversary tools, particularly command-and-control agents, tend to make 
heavy use of these mechanisms, so tracking their activities provides crucial 
telemetry. For example, Cobalt Strike’s Beacon uses named pipes for task-
ing and the linking of peer-to-peer agents.
Minifilters are similar in design to the drivers discussed in the previous 
chapters, but this chapter covers some unique details about their implemen-
tations, capabilities, and operations on Windows. We’ll also discuss evasion 
techniques that attackers can leverage to interfere with them.
Legacy Filters and the Filter Manager
Before Microsoft introduced minifilters, EDR developers would write legacy 
filter drivers to monitor filesystem operations. These drivers would sit on 
the filesystem stack, directly inline of user-mode calls destined for the file-
system, as shown in Figure 6-1.
I/O manager
User request to interact
with a ﬁle
Legacy ﬁlter driver A
Legacy ﬁlter driver B
User mode
Kernel mode
Filesystem driver
(for example, ntfs.sys)
Figure 6-1: The legacy filter driver architecture
These drivers were notoriously difficult to develop and support in 
production environments. A 2019 article published in The NT Insider, 
titled “Understanding Minifilters: Why and How File System Filter Drivers 
Evolved,” highlights seven large problems that developers face when writing 
legacy filter drivers:
Confusing Filter Layering
In cases when there is more than one legacy filter installed on the 
system, the architecture defines no order for how these drivers 
should be placed on the filesystem stack. This prevents the driver 
developer from knowing when the system will load their driver in 
relation to the others.
A Lack of Dynamic Loading and Unloading
Legacy filter drivers can’t be inserted into a specific location on 
the device stack and can only be loaded at the top of the stack. 
Additionally, legacy filters can’t be unloaded easily and typically require 