assume that PD is a perfect decoder, namely it correctly
decrypts well-formed ciphertexts. The t keys at the adver-
sary’s disposal correspond to t words in the ﬁngerprinting
code Γ ⊆ {0, 1}(cid:2). Let C ⊆ {0, 1}(cid:2) be the set containing
these t words. Now, consider a particular j ∈ {1, . . . , (cid:3)} and
consider the invalid ciphertext
`
´
:=
j, Eenc(pk [j, 0], m ), Eenc
pk [j, 1], 0 )
`
c∗
Here m is some message not equal to 0. This ciphertext is
invalid since the message encrypted under pk [j, 0] is diﬀerent
from the message encrypted under pk [j, 1]. Let us consider
what happens when we run PD on c∗
. We are interested in
two cases.
• Case 1: Suppose all t codewords in C contain a 1 in
position j. Then the adversary does not have sk [j, 0]
and therefore PD(c∗
) will return a quantity diﬀerent
than m with high probability.
• Case 2: Suppose all t codewords in C contain a 0 in
position j. Now the adversary does not have sk [j, 1]
and therefore PD cannot distinguish c∗
from a well-
formed ciphertext. Consequently, PD(c∗
) will return
m (otherwise PD is not a perfect pirate decoder).
To make use of these two observations, let us deﬁne (cid:3) exper-
iments, denoted by TRj for j = 1, . . . , (cid:3). Experiment TRj is
deﬁned as follows:
´
´
,
pk [j, 0], m
pk [j, 1], 0
`
m R← M
`
R← Eenc
c0
R← Eenc
c1
c∗ ← (j, c0, c1)
ˆm ← PD(c∗
)
Deﬁne wj ∈ {0, 1} as follows:
(
wj :=
0 if m = ˆm, and
1 otherwise.
(1)
¯w(i)
0
1
0
...
0
sk i
sk [1, 1]
sk [2, 1]
sk [3, 1]
sk [1, 0]
sk [2, 0]
sk [3, 0]
...
sk [(cid:3), 0]
sk [(cid:3), 1]
Figure 1: An example secret key: the key consists of the shaded boxes
The argument in Case 1 suggests that if all words in C have
a 1 is position j then wj = 1. The argument in Case 2 sug-
gests that if all words in C have a 0 is position j then wj = 0.
It follows that the word
¯w∗
:= w1 . . . w(cid:2) ∈ {0, 1}(cid:2)
(2)
is in the feasible set F (C). But then running the tracing
algorithm Ttt of the collusion resistant code on input ¯w∗
will output the identity of at least one of the words in C,
which is also the identity of one of the keys in the pirate’s
possession.
The tracing algorithm
To make the intuition above rigorous, we spell out the trac-
ing algorithm. The tracing algorithm TracePD (tk ) works as
follows:
1. For each j in {1, . . . , (cid:3)} run experiment TRj once.
2. Deﬁne the word ¯w∗
3. Output Ttt ( ¯w∗, tk ).
as in equations (1) and (2).
Overall, the tracing algorithm makes a total of O((cid:3)) calls
to the pirate decoder PD. Using Tardos’s t-collusion resis-
tant code we have (cid:3) = O(t2 log(n/)) = O(t2λ log n) and
therefore the total number of queries to PD is
`
´
# PD queries = O
t2λ log(n)
We note that this tracing algorithm is minimal access as
deﬁned at the end of appendix A. That is, the tracing algo-
rithm does not need access to the decrypted message from
PD. It only needs to know whether the ciphertext was de-
crypted correctly. This is a useful property when tracing
pirate music players in practice — one only gets to observe
whether the player plays the music or not.
3.1 Security
The following theorem shows that the traitor tracing sys-
tem TT is t-collusion resistant, namely it satisﬁes the secu-
rity deﬁnition in Appendix A. For the public-key system E
and a semantic security adversary B we use SS Adv[B, E ] to
denote B’s advantage in winning the semantic security game
against E .
Theorem 1. Suppose E = (Genc, Eenc, Denc) is semanti-
cally secure and (Gtt , Ttt ) is a t-collusion resistant ﬁnger-
printing code. Then TT is a t-collusion resistant traitor-
tracing system.
In particular, using the notation of Appendix A, for all
t > 0, n > t, and all polynomial time adversaries A, there
exist polynomial time semantic security adversaries B1 and
B2 attacking E such that
MH Adv[A, TT (n)](λ) ≤ (2(cid:3)) · SS Adv[B1,E ](λ)
TR Adv[A, TT (n, t)](λ) ≤ (cid:3) · SS Adv[B2,E ](λ) +  +
(cid:3)
|M|
where (cid:3) = O(t2λ log n) and  = 1/(2λ).
The semantic security property (namely the bound on
MH Adv[A, TT (n)] deﬁned in Appendix A, Game 1) is im-
mediate. We bound the adversary’s advantage in winning
the tracing game, namely TR Adv[A, TT (n, t)] deﬁned in
Appendix A, Game 2. This will follow from Lemma 2 be-
low. For an adversary A in Game 2 we let ¯w∗
(A) denote
the random variable representing the word ¯w∗
constructed
in step 2 in the tracing algorithm while tracing a pirate de-
coder PD created by A.
Lemma 2. With the notation as in Theorem 1, let C ⊆
Γ ⊆ {0, 1}(cid:2) be the set of words corresponding to the set of pri-
vate keys in the adversary’s possession. Then for any adver-
sary A in the tracing game (game 2) there exists a semantic
security adversary B attacking E = (Genc, Eenc, Denc) such
that
Pr[ ¯w∗
(A) (cid:8)∈ F (C)] ≤ (cid:3) · SS Adv[B, E ] + ((cid:3)/|M|)
Proof. Consider a modiﬁed tracing algorithm that pro-
(A) as follows. For all j = 1, . . . , (cid:3) run
j deﬁned in Figure 2 and deﬁne qj ∈ {0, 1}
duces a word ¯q∗
experiment TR(cid:4)
as:
(
0 if m = ˆm, and
1 otherwise.
qj :=
(A) := q1 . . . q(cid:2).
and ¯q∗
We say that position j is critical for A if all words in
C contain the same symbol at position j. We claim that
Pr[wj (cid:8)= qj] must be negligible at all critical positions. In
particular, for all critical positions j ∈ {1, . . . , (cid:3)} there is a
polynomial time semantic security adversary B for E such
that
Pr[wj (cid:8)= qj ] ≤ SS Adv[B, E ]
(3)
´
To see why, notice that when all bits at position j in C are
1 then A does not have sk [j, 0]. However, if Pr[wj (cid:8)= qj] is
´
non-negligible then A is able to distinguish Eenc
pk [j, 0], 0
, which breaks semantic security of E .
from Eenc
A similar argument applies when all bits at position j are 0.
pk [j, 0], m
`
`
m R← M
if all words in C have a 1 in position j do:
R← Eenc
R← Eenc
pk [j, 0], 0
´
´
pk [j, 0], m
`
`
c1
c1
,
,
`
`
´
´
pk [j, 1], 0
pk [j, 1], m
c0
else do:
c0
R← Eenc
R← Eenc
ˆc∗ ← (j, c0, c1)
ˆm ← PD(ˆc∗
)
Figure 2: Experiment TR(cid:4)
j for 1 ≤ j ≤ (cid:3)
Let bad be the event that there exists some critical co-
ordinate j for which wj (cid:8)= qj . It follows from (3) and the
union bound that
Pr[bad ] ≤ (cid:3) · SS Adv[B, E ]
(A)
¯w∗
(A) ∈ F (C) if and
(A) ∈ F (C). Hence, we obtain that
When event bad does not happen (i.e.
match at all critical positions) then ¯w∗
only if ¯q∗
(A) and ¯q∗
˛˛ Pr[ ¯w∗
(A) (cid:8)∈ F (C)] − Pr[¯q∗
˛˛
(A) (cid:8)∈ F (C)]
≤ Pr[bad ] ≤ (cid:3) · SS Adv[B, E ]
(4)
To complete the proof we argue that
Pr[¯q∗
There are two cases
(A) (cid:8)∈ F (C)] ≤ (cid:3)/|M|.
• Consider a bit position j where all words in C have a
1 at position j. We argue that qj = 1 with high proba-
bility. For this j, the ciphertext ˆc∗
does not depend on
m and therefore running PD(ˆc∗
) will output m with
probability at most 1/|M|. We conclude that for this
j the probability that qj (cid:8)= 1 is at most 1/|M|.
• Consider a bit position j where all words in C have
a 0 in position j. We argue that qj = 0. For this j,
the ciphertext ˆc∗
is a valid encryption of m and, since
PD is a perfect decoder, PD(ˆc∗
) will output m with
probability 1. Hence, qj will always equal 0.
Summing over all bit positions we see that the probability
(A) is inconsistent with C in any critical position is
that ¯q∗
at most (cid:3)/|M|. It follows that
Pr[¯q∗
(A) (cid:8)∈ F (C)] ≤ (cid:3)/|M|
(5)
Putting together equations (4) and (5) proves the lemma.
To complete the proof of Theorem 1 observe that when
(A) ∈ F (C) then Ttt ( ¯w∗
(A), tk ) outputs a member of C
¯w∗
with probability at least . Hence,
TR Adv[A, TT ] ≤ (cid:3) · SS Adv[B, E ] +  + ((cid:3)/|M|)
as required.
4. TRACING IMPERFECT DECODERS
Our deﬁnition of secure traitor tracing in Appendix A
requires that the adversary produce a perfect pirate de-
coder PD, namely a decoder that correctly decrypts all well-
formed ciphertexts.
In reality, the pirate may be content
with a decoder PD than works only a fraction of the time,
say decrypts only 10% of well-formed ciphertexts (this may
be useful for content that is repeated frequently). When
the tracing algorithm from Section 3 interacts with such a
decoder it may produce a word ¯w∗
that is not in the adver-
sary’s feasible set F (C) and consequently the ﬁngerprinting
code may fail to trace.
For a given broadcast key bk , let δ be the probability that
PD fails to decrypt well-formed ciphertexts:
δ := Pr[m R← M, c R← Encrypt(bk , m) : PD(c) (cid:8)= m]
We call δ the error-rate of PD. Until now we focused on
perfect pirates, namely when δ = 0.
In this section we consider imperfect decoders. We as-
sume that the broadcaster ﬁxes an upper bound on δ and
is not interested in tracing decoders with error-rate higher
than δ since their usefulness is limited. Hence, we need only
trace decoders PD whose error-rate is less than some ﬁxed δ.
Formally, the Setup algorithm for the traitor tracing system
takes δ as a third input.
4.1 Robust ﬁngerprinting codes
To address imperfect decoders we need a more sophis-
ticated tracing algorithm as well as more powerful ﬁnger-
printing codes. We start with the requirements on the ﬁn-
gerprinting codes. When tracing an imperfect decoder PD
there may be several coordinates where we fail to determine
which keys are in the adversary’s possession. Our traitor
tracing algorithm (described in Section 4.3) will place a ‘?’
in these coordinates. Consequently, unlike Section 3, the
interaction with PD results in a “noisy” codeword
¯w∗ ∈ {0, 1, ?}(cid:2) .
PD can cause a ‘?’ to appear in any coordinate in ¯w∗
long as the overall number of ‘?’ in ¯w∗
is bounded.
, as
To trace noisy codewords we extend the deﬁnition of col-
lusion resistant ﬁngerprinting from Section 2. First, for a set
of words W ⊆ {0, 1}(cid:2) we say that a word ¯w ∈ {0, 1, ?}(cid:2) is
feasible for W if it is feasible for W when one considers only
the non-‘?’ coordinates. That is, ¯w ∈ {0, 1, ?}(cid:2) is feasible
for W = { ¯w(1), . . . , ¯w(t)} if for all i = 1, . . . , (cid:3) either ¯wi =?
or there is a j ∈ {1, . . . , t} such that ¯wi = ¯w(j)
. We say that
the extended feasible set for W , denoted F?(W ), is the
set of all feasible words for W in {0, 1, ?}(cid:2).
Informally, we say that a ﬁngerprinting code is δ-robust if
the tracing algorithm can trace a word ¯w∗ ∈ {0, 1, ?}(cid:2) that is
feasible for a subset C and contains at most δ·(cid:3) symbols ‘?’,
back to a member of C. More precisely, we modify step 2 in
i
8>>>:
wj :=
the game used in Deﬁnition 1 as follows:
2. The adversary outputs a word ¯w∗ ∈ F?(W ) that con-
tains at most δ · (cid:3) symbols ‘?’.
We let CR Adv[(G(n, , δ), T, C),A] be the probability that
A wins the game and we use this quantity in Deﬁnition 1 as
follows.
Deﬁnition 2. We say that a ﬁngerprinting code (G, T ) is
δ-robust fully collusion resistant if for all adversaries A,
all n > 0, all  ∈ (0, 1), and all subsets C ⊆ {1, . . . , n}, we
have that
CR Adv[(G(n, , δ), T, C),A] < 
We say that (G, T ) is δ-robust t-collusion resistant if for