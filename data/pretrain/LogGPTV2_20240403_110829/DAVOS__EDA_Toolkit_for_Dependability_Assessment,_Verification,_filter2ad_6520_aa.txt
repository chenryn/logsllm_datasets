# Title: DAVOS: EDA Toolkit for Dependability Assessment, Verification, Optimization, and Selection of Hardware Models

## Authors
Ilya Tuzov, David de Andrés, and Juan-Carlos Ruiz  
ITACA, Universitat Politècnica de València, Campus de Vera s/n, 46022, Spain  
Email: {tuil, ddandres, jcruizg}@disca.upv.es

## Abstract
The increasing complexity of modern hardware designs, coupled with the pressure to reduce time-to-market, has made design reuse a central aspect of the semi-custom hardware design flow. Consequently, current Electronic Design Automation (EDA) toolchains support a wide range of hardware description languages, third-party EDA tools, intellectual property (IP) cores, and implementation technologies. However, integrating dependability requirements into these toolchains remains a significant challenge. This paper introduces DAVOS, an EDA toolkit designed to support the assessment, verification, optimization (design space exploration), and selection (benchmarking) processes for dependability-aware hardware implementations. DAVOS automates these processes efficiently and flexibly, allowing for customization of the underlying implementation and analysis phases to consider alternative off-the-shelf languages, tools, components, and technologies from a dependability perspective. The toolkit is demonstrated through three different embedded processor models.

## 1. Introduction
The complexity of modern hardware designs necessitates the use of highly flexible Electronic Design Automation (EDA) tools [1], which are typically part of commercial suites, rather than single monolithic tools. Due to design reuse concerns [2], these hardware designs often consist of a hierarchical combination of third-party IP cores described in various Hardware Description Languages (HDLs) at different abstraction levels. Synthesis tools must support these heterogeneous models to translate them into technology-independent netlists in Electronic Design Interchange Format (EDIF) for interoperability. The technology mapping process then realizes these generic netlists in a specific technology using a library of primitive components from different technology vendors. Technology-dependent netlists are subsequently placed (assigning physical locations for each element) and routed (adding connection, power, and clock lines) to obtain a fully routed physical netlist that can be translated into a tapeout (for standard cells) or bitstream (for Field-Programmable Gate Arrays (FPGAs)) file. Simulation tools are essential to verify the functional and timing behavior of the resulting circuit after any implementation stage. Netlists are translated into HDL models to enable their simulation, and after mapping, the libraries of simulation primitives provided by technology vendors and resulting timing parameters in Standard Delay Format (SDF) files are also required.

The quality of the final implementation is typically evaluated based on performance, power, and area (PPA) metrics. However, dependability-related attributes are often overlooked because existing commercial tools do not directly support their consideration [3]. Various strategies have been proposed from a research perspective to enhance the dependability of the final implementation by acting at different stages of the semi-custom design flow, such as design entry [4], synthesis [5], and place and route [6]. These techniques, except those applied at the design entry, are challenging to implement as they usually involve modifying processes embedded within off-the-shelf tools, which are rarely accessible. Additionally, it is difficult to determine the effectiveness of the deployed strategy or to select the best among available options, as there is no standardized method to quantify the dependability of the system and compare the resulting solutions.

Therefore, fault injection procedures that enable the dependability assessment of final implementations and the verification of non-functional strategies must be at the core of any dependability-driven approach integrated into the semi-custom design flow. These approaches should seamlessly integrate into the flow, allowing the use of any existing HDL, off-the-shelf EDA tools, manufacturer libraries, and implementation technologies in a transparent manner.

Several tools are available for injecting faults during the simulation of HDL models, but most of them have limitations. For example, MEFISTO [7] can only handle VHDL, while ALIEN [11] targets only Register Transfer Level (RTL) designs and not implementation-level designs. VFIT [10] requires a specific simulator (Mentor Graphics’ ModelSim), and VERIFY [9] uses a custom VHDL compiler and a non-standard simulator. ASPHALT [8] is specifically tailored for processor models. Furthermore, these tools cannot easily be extended to support new fault models, provide basic analysis and reporting, and lack flexibility. Table I summarizes the characteristics of DAVOS compared to other well-known simulation-based fault injection tools.

| Tool | HDL Support | Fault Models | Intrusiveness | Speed-up Strategies | Analysis Capabilities |
|------|-------------|--------------|---------------|---------------------|----------------------|
| MEFISTO [7] | VHDL | Limited | High | None | Basic |
| ASPHALT [8] | VHDL | Limited | High | None | Basic |
| VERIFY [9] | VHDL | Limited | High | Custom | Basic |
| VFIT [10] | VHDL | Limited | High | Specific Simulator | Basic |
| ALIEN [11] | VHDL | Limited | High | RTL Only | Basic |
| **DAVOS** | Multiple | Extensive | Low | Flexible | Comprehensive |

In summary, DAVOS addresses the limitations of existing tools by providing a comprehensive and flexible solution for dependability assessment, verification, optimization, and selection of hardware models.