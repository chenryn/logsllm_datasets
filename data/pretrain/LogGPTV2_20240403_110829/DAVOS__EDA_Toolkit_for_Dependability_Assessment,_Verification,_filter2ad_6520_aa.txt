title:DAVOS: EDA Toolkit for Dependability Assessment, Verification,
Optimisation and Selection of Hardware Models
author:Ilya Tuzov and
David de Andr&apos;es and
Juan Carlos Ruiz
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
DAVOS: EDA toolkit for dependability assessment,
veriﬁcation, optimisation and selection of hardware
models
Ilya Tuzov, David de Andr´es and Juan-Carlos Ruiz
ITACA, Universitat Polit`ecnica de Val`encia, Campus de Vera s/n, 46022, Spain
Email: {tuil, ddandres, jcruizg}@disca.upv.es
Abstract—The high complexity of new designs and time-to-
market pressure have caused design reuse to be at the heart
of the common semi-custom hardware design ﬂow. Accordingly,
current Electronic Design Automation (EDA)
toolchains are
developed to support a wide range of hardware description
languages, third-party EDA tools, intellectual property cores, and
implementation technologies and goals. However, the seamless
integration of dependability requirements into such toolchains
remains today an open challenge. This paper presents DAVOS, an
EDA toolkit supporting assessment, veriﬁcation, optimisation (de-
sign space exploration), and selection (benchmarking) processes
for dependability-aware hardware implementations. This toolkit
fully automates these processes with efﬁciency and ﬂexibility in
mind, so underlying implementation and analysis phases can be
customized to consider alternative off-the-self languages, tools,
components and technologies from a dependability perspective.
Three different embedded processor models exemplify the design
scenarios supported by DAVOS.
I. INTRODUCTION
The sheer complexity of modern hardware designs makes
that the common semi-custom hardware design ﬂow should
rely on the interoperability of highly ﬂexible Electronic Au-
tomation Design (EDA) tools [1], usually part of commercial
suites, rather than on single monolithic tools. Due to design
reuse concerns [2], these hardware designs usually consist of a
hierarchical amalgamation of third party intellectual property
(IP) cores described in different Hardware Description Lan-
guages (HDLs) at different abstraction levels. Synthesis tools
must support these heterogeneous models to translate them
into technology-independent netlists (list of interconnected
generic basic components) in Electronic Design Interchange
Format (EDIF) for tools interoperability. The technology map-
ping process realizes these generic netlists in a speciﬁc tech-
nology, using a library of primitive components available from
different technology vendors. Technology-dependent netlists
are then placed (assigning physical locations for each element)
and routed (adding connection, power, and clock lines) to
obtain a fully routed physical netlist that can be translated
into a tapeout (for standard cells) or bitstream (for Field-
Programmable Gate Arrays (FPGAs)) ﬁle. Simulation tools
are required to verify the functional and timing behaviour of
the resulting circuit after any of the implementation stages.
Netlists are translated into HDL models to enable their simu-
lation and, after mapping, the libraries of simulation primitives
provided by technology vendors and resulting timing param-
eters in Standard Delay Format (SDF) ﬁles are also required.
The goodness of the ﬁnal implementation is computed at-
tending to whether it meets the design requirements in terms of
performance, power, and area (PPA), whereas dependability-
related attributes are often ignored since existing commercial
tools provide no direct support for their consideration [3]. Sev-
eral strategies have been devised, from a research perspective,
to enhanced the dependability of the ﬁnal implementation by
acting at different stages of the semi-custom design ﬂow, like
the design entry [4], the synthesis process [5], or the place and
route process [6]. On the one hand, these techniques (except
those applied at the design entry) are extremely difﬁcult to
apply, as they usually involve the modiﬁcation of processes
embedded within off-the-shelf tools that can be very rarely
accessed. On the other hand, it is very difﬁcult to determine the
correctness of the deployed strategy or which strategy should
be selected among those available, since there is not any means
to quantify the dependability of the system and thus enable the
comparison of resulting solutions.
Hence, fault injection procedures enabling the dependability
assessment of ﬁnal implementations, and the veriﬁcation of
deployed non-functional strategies, must be at the core of
any dependability-driven approach integrated into the semi-
custom design ﬂow. Likewise, all these approaches should
seamlessly integrate into this ﬂow, enabling the use of any
existing HDL, off-the-shelf EDA tools, manufacturer libraries,
and implementation technologies in a transparent way.
There exist several tools aimed at injecting faults during
the simulation of HDL models and, thus, could be considered
for its integration into the semi-custom design ﬂow under the
stated conditions. However, as Table I shows, most of them can
only deal with a single HDL, like MEFISTO [7] that can just
handle VHDL; some can only target designs described at the
Register Transfer Level (RTL) and not at the implementation
level, like ALIEN [11]; others require a particular simulator,
like VFIT [10] which uses Mentor Graphics’ ModelSim, or
custom tools, like VERIFY [9] which uses a custom VHDL
compiler and a non-standard simulator; and some are specif-
ically tailored for a given type of design, like ASPHALT [8]
which speciﬁcally targets processor models. Furthermore, they
cannot be easily extended to support new fault models, provide
very basic analysis and reporting facilities, and do not take
2158-3927/18/$31.00 ©2018 IEEE
DOI 10.1109/DSN.2018.00042
322
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:28:39 UTC from IEEE Xplore.  Restrictions apply. 
HDL
Tool
L
D
H
V
g
o
l
i
r
e
V
g
o
l
i
r
e
V
m
e
t
s
y
S
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
s
r
u
e
t
o
b
a
S
(cid:2)
(cid:2)
d
a
e
r
h
t
i
t
l
u
M
/
e
r
o
c
i
t
l
u
M
d
i
r
G
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
t
x
e
t
c
i
t
a
t
S
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
s
r
e
h
t
O
(cid:2)
(cid:2)
e
v
i
t
c
a
r
e
t
n
I
d
e
s
a
b
-
b
e
w
(cid:2)
TABLE I: Characterization of DAVOS against the most well-known simulation-based fault injection tools
Abstraction level
netlists
Fault
models
Intrusiveness
High
Low
Speed-up
strategies
Analysis1
C
m
e
t
s
y
S
L
T
R
-
y
g
o
l
o
n
h
c
e
T
t
n
e
d
n
e
p
e
d
n
i
-
y
g
o
l
o
n
h
c
e
T
t
n
e
d
n
e
p
e
d
d
e
t
u
o
r
y
l
l
u
F
e
u
l
a
V
g
n
i
m
T
i
g
n
i
t
u
o
R
s
d
n
a
m
m
o
c
r
o
t
a
l
u
m
i
S
s
t
n
a
t
u
M
(cid:2)3
(cid:2)
MEFISTO [7]
ASPHALT [8]
VERIFY [9]
VFIT [10]
ALIEN [11]
DAVOS
1 All tools provide failure mode analysis and latencies estimations.
2 Synthesisable RTL models usually consider timing just at a clock-cycle granularity.
3 Saboteurs enable the emulation of routing-related problems at RTL models from a high level perspective.
(cid:2)2 (cid:2)3
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)