title:A Serial Combination of Anomaly and Misuse IDSes Applied to HTTP
Traffic
author:Elvis Tombini and
Herv&apos;e Debar and
Ludovic M&apos;e and
Mireille Ducass&apos;e
A Serial Combination of Anomaly and Misuse IDSes Applied to
HTTP Traﬃc
Elvis Tombini, Herv´e Debar
Ludovic M´e
Mireille Ducass´e
{elvis.tombini|herve.debar}@francetelecom.com
PI:EMAIL
PI:EMAIL
France T´el´ecom
Caen - France
Sup´elec
Rennes - France
IRISA/INSA
Rennes - France
Abstract
Combining an “anomaly” and a “misuse” IDSes of-
fers the advantage of separating the monitored events be-
tween normal, intrusive or unqualiﬁed classes (ie not
known as an attack, but not recognize as safe either).
In this article, we provide a framework to systemati-
cally reason about the combination of anomaly and mis-
use components. This framework applied to web servers
lead us to propose a serial architecture, using a drastic
anomaly component with a sensitive misuse component.
This architecture provides the operator with better qual-
iﬁcation of the detection results, raises lower amount of
false alarms and unqualiﬁed events.
1. Introduction
Intrusion Detection Systems (IDS) aim at discover-
ing if intruders try to break into a system or if users
try to abuse their privileges. There are two main classes
of intrusion detection techniques, misuse detection and
anomaly detection. Misuse detection components use a
set of attack signatures to detect traces of attacks in a
given set of events. This method may work well with
known attacks, but it is unable to detect unknown at-
tacks. Furthermore, a compromise has to be made be-
tween the sensitivity of the signatures and the risk of
false alarms. Very sensitive signatures result in high
false alarm rate. Very selective signature increase the
risk of missing attack variants. Anomaly detection com-
ponents are based on a model of acceptable behaviors.
This model is obtained either through a learning pro-
cess [3, 5], or given a priori [10, 12]. The incoming
events are then compared with the model. If they de-
viate from the model, they are considered anomalous.
The structure of the model is critical to this method.
If the detector is too sensitive it raises a high num-
ber of false alarms and if its conﬁguration is too lax it
misses attacks.
Each method reveals only partial information about
the events it monitors. Misuse detection is only able to
determine if a set of events corresponds to known at-
tacks. If no attack is discovered, it does not mean that
the corresponding events are safe. They may contain
attacks for which no signature exist, thus these events
are unqualiﬁed. Likewise, anomaly detection can only
recognize a behavior as safe. If not, it does not reveal
an attack, but an unknown behavior.
Combining anomaly and misuse detection enables a
better qualiﬁcation of the analyzed events. However,
as no component so far can be considered 100% cor-
rect and complete, qualiﬁcation conﬂicts arise. EMER-
ALD [9] explicitly handles these conﬂicts through a
correlation component. This, however, means that the
events are analyzed twice, even when it can be known
beforehand that some events are intrusive or safe.
The contribution of this article is twofold. It pro-
vides a framework to systematically reason about the
combination of anomaly and misuse components. This
should help designers of IDS in other contexts than
ours to decide which architecture is the more accurate.
We also propose an IDS sensor architecture for ana-
lyzing HTTP traﬃc: the events not qualiﬁed by a sim-
ple anomaly detection component are sent to a very
sensitive misuse component. The experimental proto-
type shows that the approach drastically reduces the
amount of unqualiﬁed events and false alarms without
missing critical attacks.
In the following, Section 2 describes WIDS, the mis-
use detector we used to perform our experimentations
and the targeted web servers. Section 3 proposes a for-
malism to describe anomaly and misuse intrusion de-
tection results. Section 4 justiﬁes an architecture where
an anomaly component and a very sensitive misuse
component are connected in sequence. Section 5 de-
scribes the experimental validation of the proposed ar-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:21 UTC from IEEE Xplore.  Restrictions apply. 
chitecture. Section 6 discusses related approaches.
2. Misuse analysis of web server log ﬁles
Analyzing web server log ﬁles is an important issue,
as web servers and proxies provide an universal gate-
way to the information system. We have been using
a web intrusion detection system (WIDS) inspired by
the work of Almgren et al. [1] to analyze in batch mode
web server log ﬁles to detect compromise attempts and
worm infections. In a few instances, the tool has also
been run in real-time mode to analyze on the ﬂy logs as
they are produced by the target server or proxy. CLF-
or ECLF-formatted ﬁles are understood by the tool, al-
though the extended information provided by ECLF is
considered unsafe and is ignored, as it is provided by
the web browser.
2.1. Focus of the tool
Our WIDS tool distinguishes itself from [1] in sev-
eral areas. We have chosen to implement three cascaded
modules, a normalization module that cleans and seg-
ments the input log lines, a pattern matching engine
and a prolog engine. As such, we do not use the false
alarm ﬁltering and host analysis modules described
in [1]. The false alarm ﬁltering module is partially re-
placed by prolog signatures. The host analysis module
requires state tracking. Assuming that each monitored
server interact with more than 100k clients per day (a
conservative estimate for production servers), the ad-
ditional memory required for tracking cannot be taken
for granted on production web servers and proxies.
We also distinguish our work from [11] as we need
to be able to run both oﬀ-line and on-line, on multi-
ple web servers and proxies on multiple hardware ar-
chitectures and operating systems. As such, the only
reliable and archivable data source is the web server
log trail and we cannot capture system level or net-
work level information. Moreover, HTTP is a stateless
protocol; partial state information may be rebuilt from
the server logs, using a combination of client IP address
and CGI script parameters. Our current focus excludes
this capability, although we plan to work on HTTP ses-
sion reconstruction and modeling in a future version of
WIDS.
We understand that information is lost in this pro-
cess, and as such not all attacks will be detected by
WIDS. We consider that the ease of installation and use
gained at the same time provide more beneﬁt to the dif-
fusion of the tool than the number of attacks missed.
A rough estimate of this is given in table 1, which sum-
marizes the number of bugtraq-referenced vulnerabili-
ties relevant to Apache and IIS web servers during the
last 18 months, ordered by decreasing severity.
Criticality
Detectable
Invisible
IIS Apache
1
0
IIS
0
Apache
2
6
8
2
2
1
8
18
12
30
Easy R2U,
Remote2R
Diﬃcult R2U,
Remote DoS
Easy U2R
Local DoS,
Diﬃcult U2R
Total
Full total
0
2
4
6
1
8
11
20
26
Table 1. Distribution of web-related vulnerabilities in
2003/S1-2004 (18 months)
Table 1 shows that more than half of the vulnerabili-
ties relevant to our intrusion-detection system and pub-
lished by CVE or bugtraq during the last 18 months
can be detected by our tool. Moreover, all critical vul-
nerabilities (i.e. resulting in remote attack of any ef-
fect) by all kinds of attackers are detectable. This jus-
tiﬁes our focus as the tool will only miss local attacks
by insiders. As these persons already have full access
to the servers, breach of security becomes more a hu-
man resources issue than a technical issue.
2.2. Description of the WIDS tool
WIDS is implemented entirely in C++, with the
adjunction of the pcre library for regular expression
matching and SWI prolog for rule support. It is sup-
ported by a simple yet powerful signature language
that conﬁgures the 3 modules using the same syntax.
Signatures are grouped in sections, the section type in-
dicating the module that should understand the syn-
tax of the active component of the signature. The active
component is either a regular expression or a prolog-
like rule; it returns a T RU E boolean value to indicate
a match of the signature, F ALSE otherwise.
Sections also have a notion of ﬂow control, that will
make the analysis follow diﬀerent paths according to
the previous ﬁndings. As such, an essential originality
of WIDS is that signatures are cumulative, and that
it will try (depending on the control statements) to
match as many signatures as possible. This makes it
possible to write speciﬁc signatures that take into ac-
count diﬀerent aspects of an attack. It is then the role
of the prolog engine to evaluate the set of matched sig-
natures, and modulate the diagnostic according to a
set of rules. The main goal of this set of rules is to en-
sure that any request that could result in a possible
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:21 UTC from IEEE Xplore.  Restrictions apply. 
compromise of the server is rated higher than failed or
irrelevant attempts.
The current ruleset has 652 signatures split in 30
sections (including one normalization and one rule sec-
tion). 5 signatures cover error cases related to the op-
eration of the analysis engine. 6 signatures cover the
operation of the prolog engine; these signatures ex-
pressed as Prolog rules are here mostly as examples,
since they tend to need site-speciﬁc tuning to eﬀec-
tively reduce false positives. 62 signatures aim at pro-
viding contextual information, such as the type of re-
quest, the status code or the various encodings used.
28 signatures implement the detection of generic attack
methods, such as frequent patterns observed in cross-
site scripting. 348 signatures implement the detection
of CGI script attacks. Finally, 203 signatures imple-
ment the detection of interesting targets; this is partic-
ularly interesting because while the number of vulner-
able CGI scripts is constantly increasing, the targets
open to an attacker remain few. As such, we success-
fully detect attacks against newly-announced CGI vul-
nerabilities, because of the usage of UNIX commands,
Windows or Unix system ﬁles, or other simple charac-
teristics.
2.3. Log Analysis using WIDS alone
We have measured the HTTP traﬃc of two web
servers: an academic one (Sup´elec) during 92 consecu-
tive days in 2003, and an industrial one (FT) during
30 consecutive days, in 2001. The Sup´elec web server
hosts resources in two manners. A part of these re-
sources is freely available from everywhere, while an-
other part is only reachable from the Sup´elec intranet.
The resources hosted by the Sup´elec web server are
composed of 99% of static resources and 1% of dynamic
resources. The dynamic resources are PHP scripts, such
as a local search engine, and some CGI scripts, such as
counters. The logged events are composed 91.5% of re-
quests toward static resources and 8.5% of requests to-
ward dynamic resources. The publishing process is not
totally centralized since a part of the web site is man-
aged by a webmaster and academics manage their own
pages themselves. The FT web server hosts resources
for professional purposes. These resources are available
from everywhere. The resources hosted by the FT web
server are composed of 98.5% of static resources and
1.5% of dynamic resources. The dynamic resources are
java servlets. The logged events are composed 98% of
requests toward static resources and 2% of requests to-
ward dynamic resources The publishing process is un-
der the responsibility of a few persons.
Table 2 presents the results obtained when applying
WIDS to log ﬁles of the two previously described web
days
logged events
resources
Severity
0
1
2
3
4
5
6
7
8
9
> 9
Sup´elec
FT
92
2,402,749
27,801
30
3,008,842
2,670
Percentage Percentage
89.1331
1.9027
8.9494
0.0134
0.0014
0
0
0
0
0
0
79.1372
11.9839
7.5018
0.7427
0.5948
0.0200
0.0134
0.0010
0.0005
0.0002
0.0145
Table 2. Web server log ﬁle analysis by a WIDS mis-
use component. The percentages are rounded oﬀ to
the fourth ﬁgure after the dot.
servers. For our purpose, we only used the step of anal-
ysis with the signature sets previously described with-
out any re-evaluation done by the prolog engine.
The Sup´elec log ﬁle contains around 2,5 mil-
lions events targeting around 28 thousand diﬀerent
resources. More than 79% of the events are of sever-
ity 0, namely for them no signature at all match. The