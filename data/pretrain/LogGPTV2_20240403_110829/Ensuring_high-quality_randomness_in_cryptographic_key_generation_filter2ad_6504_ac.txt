q ← y + y′ + δy
are distinct primes,
gcd(p − 1, e) = 1, and
gcd(q − 1, e) = 1
abort if no such δx, δy exist
let n ← pq
Cp ← Cxgx′+δx
Cq ← Cygy′+δy
π ← MulProve(n, Cp, Cq)
send n, δx, δy, π
✲
Step 4
Cp ← Cxgx′+δx
Cq ← Cygy′+δy
abort if δx, δy /∈ [0, ∆) or
n /∈ [22k+2, 22k+4) or
MulVer(π, n, Cp, Cq) 6= 1
σ ← SignEA(n)
send σ
✛
Step 5
abort if
VerifyEA(σ, n) 6= 1
public key is (n, e, σ)
Figure 2: RSA Key Generation Protocol
Picking the size of ∆ requires some care: if ∆ is too small,
then there may be no suitable prime p in the range [x+x′, x+
x′ + ∆), and the device will have to run the protocol many
times before it ﬁnds suitable primes p and q. The value ∆
should be large enough that the protocol will succeed with
overwhelming probability, but not so large that the device
can pick n = pq arbitrarily.
Following Juels and Guajardo [30], if the density of primes
is dprime and the density of these special primes (with gcd(p−
1, q −1, e) = 1 is dspecial, we conjecture that dspecial/dprime =
(e − 1)/e, where e is the RSA encryption exponent (a small
odd prime constant). Under this conjecture and the Hardy-
Littlewood [28] conjecture, Juels and Guajardo demonstrate
that the probability that there is no suitable prime in the
interval [x + x′, x + x′ + ∆) is at most exp(−λ) when ∆ =
λ ln(x + x′)( e
e−1 ) as (x + x′) → ∞. To make this conjecture
if we take (x + x′) ≈ 21024, the RSA encryption
concrete:
exponent e = 65537, and require a failure probability of at
most 2−80, then we should set ∆ ≈ 216. In the very unlikely
case that the device fails to ﬁnd primes p and q in the right
range, the device aborts and re-runs the protocol from the
beginning.
3.2.2 Eliminating Information Leakage
The values δx and δy sent to the entropy authority in
Step 3 of the protocol leak some information about p and q
to the entropy authority. In particular, the authority learns
that the prime gap before p (resp. q) has a width of at least
δx (resp. δy). We argue in Section 4.1 the entropy authority
cannot use this leakage to help it factor the modulus n.
Even so, it is possible to modify the protocol to completely
eliminate this information leakage at some performance cost.
One way to modify the protocol is to require that δx = δy =
0 in Step 3 of the protocol. If the values x + x′ and y + y′
are not prime, the device aborts the protocol and restarts
it from the beginning. Since the probability that a random
k-bit number is a suitable prime is near 1/k for large k, the
device will have to run the protocol approximately k2 times
before it succeeds.
To reduce the number of communication rounds required
for this revised protocol, the device could run the k2 protocol
iterations in parallel. The device would send k2-length vec-
tors of commitments to random values ~x, ~y in Step 1 of the
protocol and the entropy authority would return two vec-
tors ~x′, ~y′ in Step 2 of the protocol, with each vector having
length k2. The device would then iterate over the vectors
until it ﬁnds an i such that p ← xi + x′
i are
distinct primes and gcd(p−1, q −1, e) = 1. If the device fails
to ﬁnd such primes, it would abort and repeat the process.
i and q ← yi + y′
3.3 DSA Key Generation
The DSA key generation protocol, which we present in
Figure 3, takes place between a device and the entropy au-
thority.
Parameters. We assume that, before the start of the
protocol, participants have agreed upon an order-q group
G used in the DSA signing process. If the device uses the
elliptic-curve variant of DSA (EC-DSA), then the group G
will be an elliptic curve group selected, for example, from
one of the NIST standard curves [25]. Participants must
also agree upon two public generators, g and h, of the group
G such that no one knows the discrete logarithm logg h.
While we expect most new devices to primarily use EC-
DSA keys, even new devices may also need to generate
ﬁnite-ﬁeld DSA keys for interoperability with legacy devices.
When using the ﬁnite-ﬁeld variant of DSA, the device may
have to generate the parameters of the ﬁnite-ﬁeld DSA group
(a prime modulus p, a group order q, and a generator g)
in addition to its keypair. To do this, the device and en-
tropy authority could agree on a domain parameter seed us-
ing a coin-ﬂipping protocol [3] and then use this shared seed
to generate DSA parameters using the veriﬁable generation
method speciﬁed in the Digital Signature standard [25, Ap-
pendix A].
690Device
Step 1
choose x, rx
Cx ← Commit(x; rx)
R←− Zq
✛
Step 3
a ← x + x′ mod q
A ← ga
Entropy Authority
✲
Step 2
choose x′ R←− Zq
send Cx
send x′
send A, rx
✲
Step 4
abort if Ahrx 6= Cxgx′
σ ← SignEA(A)
Step 5
abort if VerifyEA(σ, A) 6= 1
✛
send σ
public key is (A, σ)
Figure 3: DSA Key Generation Protocol
Protocol Description.
To begin the key generation
process depicted in Figure 3, the device picks a random value
x ∈ Zq and generates a randomized commitment to x. In the
event that the device has a strong entropy source, the use of
a randomized commitment prevents the entropy authority
from learning the device’s secret x. The device sends this
commitment to the entropy authority.
Upon receiving the device’s commitment, the entropy au-
thority chooses a random value x′ ∈ Zq and returns this
value to the device. The device sets its private key a ← x+x′
mod q and sets its public key to A ← ga. The device then
sends its public key A along with the randomness rx used
in the commitment to x to the entropy authority.
The entropy authority conﬁrms that Ahrx = Cxgx′
, which
convinces the entropy authority that A is equal to gx+x′
.
The entropy authority then signs the device’s public key A
and returns it to the device.
4. SECURITY ANALYSIS
This section presents proofs that the RSA and DSA key
generation protocols satisfy the security properties described
in Section 2.
4.1 RSA Protocol
PrimeGen(k, pmin):
choose a random x in [2k, 2k+1]
ﬁnd the smallest prime p s.t. p ≥ pmin + x
output p
RSAKeyGen(k, pmin, qmin):
p ← PrimeGen(k, pmin) , q ← PrimeGen(k, qmin)
output n ← p · q
We say that a modulus generator outputs a secure dis-
tribution of RSA moduli n if the resulting family of RSA
functions x → xe mod n is a family of trapdoor one-way
functions (where e is the RSA encryption exponent, a small
prime constant). A secure modulus generator is suﬃcient for
use in standard RSA encryption and RSA signature systems.
We use the following RSA assumption about algorithm
RSAKeyGen above: algorithm RSAKeyGen(k, pmin, qmin) out-
puts a secure distribution of RSA moduli for all pmin and
qmin in the interval [2k, 2k+1).
The following theorem shows that even when interacting
with a malicious EA, the RSA key generation protocol in
Figure 2 outputs a secure distribution of RSA moduli. Fur-
thermore, the protocol leaks at most O(log k) bits of infor-
mation about the prime factors to the EA. This small leak
does not harm security since if it were possible to invert the
RSA function given the few leaked bits then it would also
be possible to do it without, simply by trying all possible
values for the leaked bits. Moreover, if desired this small
leak can be eliminated at the cost of more computation, as
explained in Section 3.2.2.
Theorem 4.1. Suppose the device has a strong entropy
source (i.e., the device can repeatedly sample independent
uniform bits in {0, 1}). Then for all EA, the protocol in
Figure 2 generates a secure distribution of RSA moduli as-
suming the RSA assumption above. Furthermore, EA’s view
of the protocol can be simulated with at most O(log k) advice
bits with high probability.
Proof. Let A be a malicious EA that, given random
commitments Cx, Cy, outputs (x′, y′) ← A(Cx, Cy). Then,
since Pedersen commitments are information theoretically
hiding, the protocol in Figure 2 outputs a modulus n sam-
pled from the following distribution:
choose random Cx, Cy
(pmin, qmin) ← A(Cx, Cy)
output RSAKeyGen(k, pmin, qmin)
R←− ZQ
Therefore, by the RSA assumption about algorithm RSAKeyGen
the protocol generates secure distribution of RSA moduli.
Next, to argue that the protocol leaks at most O(log k)
bits of information about the prime factors with high prob-
ability, we construct a simulator S that simulates the tran-
script of a successful run of the protocol with A given only n
and an additional O(log k) bits of information. This will
prove that given n, the protocol leaks only O(log k) addi-
tional bits. The protocol transcript consists of
4.1.1 Protects Device from a Malicious EA
We ﬁrst show that when the device has a strong entropy
source a malicious EA learns no useful information about
the device’s resulting RSA secret key.
First, let us deﬁne a standalone RSA modulus genera-
tion algorithm which does not interact with an EA. The key
generator takes as input a security parameter k and lower
bounds pmin and qmin on the RSA primes p and q.
(Cx, Cy, x′, y′, n, δx, δy, π, σ)
where n = pq and p = x + x′ + δx,
q = y + y′ + δy for
some x, y. For a prime p let pre(p) be the prime immedi-
ately preceding p. The simulator S takes three arguments
as input: the modulus n = pq produced by a successful run
of the protocol and the quantities
∆p = min(p − pre(p), ∆)
; ∆q = min(q − pre(q), ∆)
691The simulator works as follows:
S(n, ∆p, ∆q):
repeat:
R←− ZQ
choose random Cx, Cy
generate (x′, y′) ← A(Cx, Cy)
until n ∈ (cid:2)(x′ + 2k)(y′ + 2k), (x′ + 2k+1)(y′ + 2k+1) (cid:1)
choose random δx in [0, ∆p)
choose random δy in [0, ∆q)
use the ZK simulator for Pedersen products to
simulate a proof π that n = (x + x′ + δx)(y + y′ + δy)
where x and y are the values committed in Cx, Cy.
run A giving it n, δx, δy, π and obtain σ
output the simulated transcript:
(Cx, Cy, x′, y′, n, δx, δy, π, σ)
The simulator S properly simulates the Pedersen commit-
ments Cx, Cy and the quantities x′, y′, given that the proto-
col generated the modulus n. Similarly, given that n = pq
was the output we know that the random variable x + x′
is uniformly distributed in the interval (pre(p), p] whenever
p − pre(p) < ∆ and is uniform in (p − ∆, p] otherwise. Ei-
ther way, the value of δx is uniform in [0, ∆p). Hence S
properly simulates δx and similarly δy. Finally, π is prop-
erly simulated using the ZK knowledge simulator for a proof
of Pedersen products.
We explained in Section 3.2 that ∆p and ∆q are O(k) in
size with high probability, and therefore the protocol leaks
at most O(log k) bits of information
4.1.2 Protects Device from the CA and Client
Having established that the protocol protects a high-entropy
device from the entropy authority, we demonstrate that an
honest device interacting with an honest entropy authority
holds a strong key at the end of a protocol run, even if the
device has a weak entropy source.
Theorem 4.2. When interacting with an honest EA, the
RSA protocol in Figure 2 generates a secure distribution of
RSA moduli assuming the RSA assumption about algorithm
RSAKeyGen.
Proof. Let A be a device honestly following the protocol,
but one that may have a weak entropy source. We let A()
denote the x, y chosen by the device in Step 1. Given an
honest EA, the protocol in Figure 2 outputs a modulus n
sampled from the following distribution:
(pmin, qmin) ← A()
output RSAKeyGen(k, pmin, qmin)
By the RSA assumption about algorithm RSAKeyGen the
protocol generates secure RSA moduli.
4.1.3 Protects EA from a Malicious Device
Suppose the device is dishonest and its goal is to discredit
the entropy authority. The device may try to cause the EA
to sign a modulus n in Step 4 of the protocol where n is
sampled from a low entropy distribution. For example, the
two prime factors of n = pq may look non-random (e.g. their
binary representation may end in many 1’s) or n may have
a non-trivial GCD with another public RSA modulus. The
EA’s signature would then serve as incriminating evidence
that the “random” values x′ and y′ the EA contributed to
the protocol in Step 2 were not sampled from the uniform
distribution over [2k, 2k+1).
Note, however, that if the modulus n output by the device
is an ill-formed RSA modulus—say n is not a product of two
primes—then clearly the EA is not at fault since the device
did not properly generate n. Therefore the EA need not
worry about invalid moduli. It only cares about not signing
low-entropy moduli.
The following theorem shows that an honest EA will never
sign a low-entropy modulus.
Theorem 4.3. Consider an honest entropy authority in-
teracting with a malicious polynomial-time device. Suppose
that the RSA modulus n signed by an honest entropy au-
thority in Step 4 is a product of two distinct primes n = pq
each in the range [2k+1, 2k+2). Then each of the primes is
sampled from a distribution with at least k − 2 − d log(k)
bits of min-entropy for some absolute constant d, even when
conditioned on the other prime.
Proof sketch. We ﬁrst show that n must be sampled
In
from a distribution with suﬃciently high min-entropy.