[18]. Implementations of reduction will be discussed in detail
in Sections 5 and 6.
The (cid:12)rst step of a squaring operation, which is a special
case of polynomial multiplication, does not require a full
multiplication. When squaring a polynomial a 2 GF (2m),
all mixed terms aiajtk; k = 1 : : : 2(m − 1); k = i + j; i 6=
j occur twice cancelling each other out. Therefore, a2 =
am−1t2(m−1) +am−2t2(m−2) +(cid:1)(cid:1) (cid:1)+a1t2 +a0 can be computed
by inserting zeros into the corresponding bit string. For
example, squaring (t3 + t2 + t + 1) results in (1111)2 =
1010101.
b ; a; b 2 GF (2m) is de(cid:12)ned as a multiplication of
Division a
the dividend a with the multiplicative inverse of the divisor
b. Algorithms for (cid:12)nding the inverse element include the ex-
tended Euclidean algorithm [3] and methods using Fermat’s
theorem such as the one proposed by Itoh and Tsujii [13]. A
method for e(cid:14)ciently implementing division was proposed
by Shantz [7].
5. REDUCTION
Field multiplication and squaring operations require re-
duction by an irreducible polynomial M . Rather than com-
puting a full polynomial division, reduction can be done by
executing a sequence of polynomial multiplications and ad-
ditions based on the congruency
u (cid:17) u + vM mod M
(3)
for arbitrary polynomials u and v over GF (2). A special
case of Equation (3), used for reduction, is
m (cid:17) M − t
t
m
mod M
(4)
Reduction of a product c0 = a (cid:3) b, a; b 2 GF (2m), deg(a)  m − k :
deg(cj;h) + k − m
if deg(cj;h) (cid:20) m − k :
8>>>>>:
0
(8)
(9)
The minimum number of iterations i is given by
e
m − 1 − i(m − k) (cid:20) 0 , i (cid:21) d m − 1
m − k
To enable e(cid:14)cient implementations, M is often chosen to be
either a trinomial Mt or pentanomial Mp:
Mt = t
m
+ t
k3 + 1
k3 + t
Mp = t
m
+ t
k2 + t
m > k3 > k2 > k1 (cid:21) 1
k1 + 1
2
Choosing M such that k3 (cid:20) m−1
apparently limits the
number of reduction iterations to two. This is the case for
all irreducible polynomials recommended by NIST [19] and
SECG [6]. As we will show in Section 7.1, the multipli-
cations cj;h (cid:3) (M − tm) can be optimized if (M − tm) is a
constant sparse polynomial, i.e. if M is (cid:12)xed and contains
only few terms.
6. PARTIAL REDUCTION
For all c 2 GF (2m), deg(c) < m there exist congruent
polynomials over GF (2) of a degree greater or equal to m.
The use of congruent polynomials in non-canonical form is
the idea underlying partial reduction. Instead of reducing
c0 = a (cid:3) b; a; b 2 GF (2m), deg(a) < m, deg(b) < m to a
polynomial of degree less than m, c0 is only partially re-
duced resulting in a congruent polynomial of degree less
than a chosen integer n with n (cid:21) m. For hardware imple-
mentations, n could, for example, be the maximum operand
size of a multiplier. Addition and multiplication of con-
gruent polynomials again result in a congruent polynomial.
For arithmetic operations on polynomials a; b 2 GF (2m),
deg(a) < m, deg(b) < m and congruent polynomials over
0 (cid:17) b mod M , the
GF (2) a
following properties can be used:
0 (cid:17) a mod M and b
, i.e. a
; b
0
0
0
a
+ b
0 (cid:3) b
a
0 (cid:17) a + b mod M
0 (cid:17) a (cid:3) b mod M
(10)
(11)
Consequently, all computations for a point multiplication in
GF (2m) can be executed on congruent polynomials, whose
degree may be greater or equal to m. Reduction of the
results to polynomials in canonical form only needs to be
done in a last step of the point multiplication.
For a multiplication c0 = a (cid:3) b with a; b 2 GF (2m),
deg(a) < m, deg(b) < m, c0 can be partially reduced to
c (cid:17) c0 mod M , deg(c) < n as follows: For an integer
n (cid:21) m, c0 can be split up into two polynomials c0;h and
c0;l with
deg(c0;l) < n
deg(c0;h) < 2m − n − 1;
c0;h = 0;
if n < 2m − 1
if n (cid:21) 2m − 1
such that similar to (5)
c0 = a (cid:3) b = c0;h (cid:3) t
= c0;h (cid:3) t
n
+ c0;l
n−m (cid:3) t
m
+ c0;l
(12)
Applying (4), a congruent polynomial c1 can be computed
with
c1 = c0;h (cid:3) t
n−m (cid:3) (M − t
m
) + c0;l
(cid:17) c0 mod M
(13)
(14)
Given that deg(c0;h) < 2m − n − 1 and deg((M − tm) (cid:3)
tn−m) < n, it follows that deg(c1) < 2m − 2. cj can again
be iteratively split up into polynomials cj;h and cj;l such
that
cj+1 = cj;h (cid:3) t
n−m (cid:3) (M − t
m
) + cj;l
(15)
To compute a congruent polynomial of degree less than n,
the termination condition is
cj;h = 0 , deg(cj) < n
(16)
The result c = ci can be computed in at most i (cid:20) 2m− n− 1
reduction steps.
Given M as de(cid:12)ned in (7), deg(cj) gradually decreases as
stated by Equation (8). The minimum number of iterations
i is given by
2m − n − 1 − i(m − k) (cid:20) 0
, i (cid:21) d 2m − n − 1
m − k
For polynomials over GF (2) a
) < n and
can be partially reduced to c (cid:17) c0
deg(b
mod M , deg(c) < n as follows: c0 can be split up into c0;h
and c0;l with deg(c0;h) < n − 1 and deg(c0;l) < n. Formulas
(12), (14), (15), (16) and (8) can be applied for arbitrary
n (cid:21) m. Therefore, the minimum number of reduction steps
i is
) < n, c0 = a
with deg(a
0 (cid:3) b
e
0
(17)
; b
0
0
0
0
n − 1 − i(m − k) (cid:20) 0 , i (cid:21) d n − 1
m − k
e
(18)
7. APPLICATIONS OF PARTIAL REDUC-
TION
NIST and SECG speci(cid:12)ed named curves over (cid:12)elds GF (2m)
with m being a prime number. Examples are m = 113, 131,
163, 193, 233, 239, 283, 409 and 571. On computer systems,
polynomials of these (cid:12)elds can be e(cid:14)ciently represented by
bit strings. The size of the bit strings is preferably a power
of 2, i.e. n bits with n = 2u (cid:21) m for a positive integer u, or
multiples of a power of 2, i.e. n = v (cid:3) w with w = 2u bits
for positive integers u; v; w and n (cid:21) m. For general purpose
processor architectures, w corresponds to the word size and
v to the number of words. For example, on a 32-bit proces-
sor a polynomial a 2 GF (2163) could be represented with
v = 6 words each w = 32 bit wide, i.e. n = 6 (cid:3) 32 = 192.
Partial reduction allows for a single implementation that can
handle curves over any GF (2m) with m (cid:20) n.
1117.1 ECC Hardware Accelerators
To e(cid:14)ciently support ECC in hardware, GF (2m) arith-
metic needs to be implemented for large operands. Design
choices depend on the number of supported elliptic curves
and irreducible polynomials. For a single (cid:12)eld GF (2m) with
a given (cid:12)eld degree m and a (cid:12)xed irreducible polynomial
M , the reduction steps of (cid:12)eld multiplications and squar-
ings can be optimized. Referring to Equation (6), the mul-
tiplications cj;h (cid:3) (M − tm) constitute multiplications with a
constant (M − tm). In addition, choosing M as a trinomial
or pentanomial reduces the cost of a full multiplication to
two, respectively four additions. An example of a reduction
iteration for a pentanomial Mp = tm + tk3 + tk2 + tk1 + 1 is
shown in Figure 1. The simpli(cid:12)ed multiplication typically
   cj,l
+ cj,h
+ cj,h* tk1
+ cj,h* tk2
+ cj,h* tk3
= cj+1
cj+1,h
cj+1,l
[m-1..0]
[m-2..0]
[m-2..0]
[m-2..0]
[m-2..0]
[m+k3-2..0]
Figure 1: Reduction for a Fixed Pentanomial Mp.
a
b
[m-1..0]
[2m-2..0]
c0
mod M
c
[m-1..0]
Figure 2: Multiplier with Reduction Circuitry for a Fixed
M .
allows for implementing circuitry that can perform reduc-
tion in a single clock cycle as illustrated in Figure 2. After
multiplying a and b, c0 is reduced to a congruent polynomial
c 2 GF (2m), deg(c) < m. Note that the register widths of
a; b and c correspond to the (cid:12)eld degree m.
In the case of squaring, both polynomial multiplication
and reduction can typically be combined and executed in a
single clock cycle. Since squaring only requires the insertion
of zeros, no intermediate result c0 needs to be computed
making it possible to perform squaring and reduction in the
same cycle.
For implementations of a small number of (cid:12)elds GF (2m)
with given irreducible polynomials fM1; M2; : : : ; Mrg it is
a viable solution to add dedicated reduction logic for each
irreducible polynomial. As shown in Figure 3, the register
size n needs to be chosen according to the largest (cid:12)eld de-
a
b
c0
mod M
1
mod M
2 mod M
...
r
c
[n-1..0]
[n-1..0]
[2n-2..0]
Figure 3: Multiplier with Reduction Circuitry for a Set
fM1; M2; : : : ; Mrg.
gree m. Depending on the underlying (cid:12)eld, the appropriate
reduction logic can be selected by a multiplexer.
In the case of arbitrary curves, however, M is unknown,
i.e. the multiplications cj;h (cid:3) (M − tm) cannot be optimized.
In addition, for an n (cid:2) n-bit multiplier returning a 2n − 1-
bit result, data word c0 may span both n-bit result regis-
ters depending on m as shown in Figure 4. Extracting c0;h


