We can view packet scheduling as an event-driven system
in which the events are the arrivals and departures of the
packets. Since all sessions are backlogged at time 0, the fol-
lowing is the only possible way that session i may become
unbacklogged at time t: a packet departs from session i at
time t, and its next packet does not arrive until time τ > t
(τ = ∞ if there is no such arrival). Let t
be the time that
∗
> t
. By the deﬁnition of t
∗
, and session i
the earliest such packet departure event happens. Suppose
∗
this happens to session i
does not become
∗
backlogged until τ
, all sessions
∗
are continuously backlogged between [0, t
]. So, under the
GPS scheduler, the amount of service each session receives
∗
∗
during this period is the same, which is r
n t
> t
= ∞). Then the amount of service ses-
(to avoid the case τ
(cid:4)
∗
sion i
, which
violates the second part of the CBFS condition.
receives during the interval [0, t
] is r
n t
 t
(cid:4)
∗
∗
∗
∗
Since our lower bounds are on the computational com-
plexity in the worst case, the general lower bounds can only
be higher than or equal to the bounds derived under the
CBFS condition (i.e., we don’t “gain”’ from this condition).
The signiﬁcance of this condition is profound:
• First, computing the GPS virtual ﬁnish time of a packet
p becomes an O(1) operation (see remark after Propo-
sition 2). So CBFS condition allows us to “naturally
exclude” the cost of tracking GPS clock.
• Second, we will show that under the CBFS condition,
many existing scheduling algorithms such as Virtual
Clock (V C) [20], Frame-based Fair Queuing (F F Q)
[14] and W F 2Q+ [3] are equivalent to either W F Q
or W F 2Q (Proposition 3). So whenever we need to
relate our results to these scheduling algorithms, we
only need to study W F Q and W F 2Q.
• Third, the complexity lower bounds that are proved
under this condition are still tight enough.
In other
words, we are not “losing” too much ground on com-
plexity lower bounds when restricted by this condition.
In our later proofs, we assume that the size of a packet can
take any real number between Lmin and Lmax, which denote
the minimum and the maximum packet sizes respectively.
This is, in general, not true for packet networks. However,
it can be shown that if we remove part one (fair sharing)
of the CBFS condition and instead allow weighted sharing
(with part two adjusted accordingly), we do not need to
insist on such freedom in packet size.
In fact, our proofs
will work even for ATM networks where ﬁxed packet size is
used. Since this proof is less interesting, we omit it here to
save space.
For simplicity of discussion in our later proofs, we further
assume that Lmin = 0, i.e., the minimum packet size can be
as small as zero. It can be shown that all later proofs remain
true when Lmin > 0, with adjustments on the constants used
in the proofs. The proof of this claim is also omitted due to
space limitations.
In the following, we prove two important results (Proposi-
tion 2 and 3) concerning the equivalence between scheduling
algorithms under the CBFS condition.
Definition 1. We say that two scheduling algorithms are
equivalent under a condition C if given any arrival instance
conforming to condition C, these two algorithms will gener-
ate the same packet service schedule.
Notation 1. For the k’th packet in session i, let Li,k,
Ti,k, and Fi,k denote its length, arrival time, and GPS vir-
tual ﬁnish time, respectively. Let V (t) denote the GPS vir-
tual time as a function of real time t.
281Proposition 2. Under the CBFS condition,
• (a) Fi,k = Fi,k−1 +
ri , 1 ≤ i ≤ n and k > 0. Here
Li,k
we let Fi,0 = 0 by deﬁnition.
• (b) V (t) ≡ t
Proof. (a) In GPS,
Fi,k = max(Fi,k−1, Ti,k) +
(3)
It is clear that Ti,k ≤ Fi,k−1, since otherwise, during the
time period [Fi,k−1, Ti,k] the session i is idle under GPS, vi-
olating the continuously backlogged (Proposition 1) property
of CBFS. So the formula (3) becomes Fi,k = Fi,k−1 +
.
Li,k
ri
Li,k
ri
(b) Recall that V (t) is deﬁned as follows:
V (0) = 0
V (t + τ ) = V (t) + rτ /( X
i∈B(t)
ri)
(4)
(5)
where B(t) is the set of sessions that are active during the
interval [t, t + τ ]. Here t + τ can be anytime before the
occurrence of the ﬁrst event (the arrival or departure of a
packet) after t. Since all sessions are backlogged all the
time under GPS (Proposition 1), B(t) is exactly the set of
all sessions. Therefore, i∈B(t) ri = r and consequently (5)
becomes V (t + τ ) = V (t) + τ . This, combined with (4),
implies that V (t) ≡ t.
Remark: It is clear from (a) that the calculation of GPS
virtual ﬁnish time is an O(1) operation (under the CBFS
condition) per packet, as the program can store the result
of Fi,k−1 from the prior computation.
Proposition 3. Under the CBFS condition, Virtual Clock
(V C) [20] and Frame-based Fair Queuing (F F Q) [14] are
equivalent to W F Q, and W F 2Q+ [3] is equivalent to W F 2Q.
Proof. Note that a scheduling algorithm is determined
by the following two components: (a) the calculation of the
estimated virtual ﬁnish time of a packet and (b) the policy
in selecting the next packet for service. Our ﬁrst step is to
show that, under the CBFS condition, ˜Fi,k, the estimated
virtual ﬁnish time, agrees with Fi,k, the actual one, in V C,
F F Q, and W F 2Q+ (i.e., the equivalence of (a) part). The
equivalence of (b) part is shown in the second step.
To show Fi,k ≡ ˜Fi,k, it suﬃces to show that (I) ˜Fi,k =
Li,k
˜Fi,k−1 +
ri due to
Proposition 2a. Here ˜Fi,0 = 0 by deﬁnition. Let ˜V (t) be
the estimation of the virtual time as a function of real time
It also suﬃces to show (II) ˜V (t) ≡ t, since V (t) ≡ t
t.
under CBFS (Proposition 2b), and V (t) ≡ ˜V (t) implies (I).
In the following, we show in all three algorithms, either the
assertion (I) or (II) holds:
. This is because Fi,k = Fi,k−1 +
Li,k
ri
• V C: ˜V (t) ≡ t (aforementioned assertion (II)) by deﬁ-
nition [20].
• F F Q: In FFQ, the approximation of GPS virtual time
is based on a concept called frame, which represents
the maximum amount of service any ﬂow may receive
during a frame period. A frame period ends when
all traﬃc belonging to the frame has been serviced
and the next frame period immediately starts. This
maximum can be reached if and only if the ﬂow is
continuously backlogged during the frame period. All
packets within a frame period will be served based on
the increasing order of their estimated GPS virtual ﬁn-
ish time, and packets belonging to the future frames
will be served only after all packets within the current
frame ﬁnish service. In the following, the virtual time
estimation function in FFQ is denoted as P (instead
of ˜V (t)), following the notations used in [14]. There
are two program statements in FFQ that will change
the value of P :
(a) P ← P + length(j)/f (line 1 in Fig. 3 of [14])
(b) P ← max(F rame, P ) (line 9 in Fig. 3 of [14])
It can be shown that under the CBFS condition, F rame
≤ P as always, using similar arguments as used in the
W F 2Q+ proof below. The rigorous proof of this re-
quires a detailed description of the algorithm and in-
volved invariant-based induction steps, which is omit-
ted here. So statement (b) above never changes the
value of P . Therefore, all the changes to P come from
(a), which is equivalent to the aforementioned asser-
tion (I).
∗
∗
∗
∗
∗
∗
∗
∗
+τ ) = t
, t
+ τ ] and Si(t
) + τ, mini∈B(t∗) Si(t
∗
) = t
∗
+τ , in which t
• W F 2Q+: We would like to show the aforementioned
assertion (II) ˜V (t) ≡ t. We prove this by induction on
the packet arrival and departure events, since the vir-
tual time estimation is triggered only by and for these
events. Note that ˜V (t) ≡ t at the time the 0’th event
happens (i.e., t=0). Suppose at (real) time t
when the
j’th event (j ≥ 0) happens, ˜V (t
. We need to
show that ˜V (t
+τ is the time
when the (j+1)’th event happens. In W F 2Q+, ˜V (t
+
∗
τ ) = max( ˜V (t
)), where B(t
)
is the set of backlogged sessions during the interval
[t
) is the virtual start time of (back-
logged) session i’s head-of-line (HOL) packet at time
∗
t
),
since this implies ˜V (t
) + τ , which com-
bined with the induction hypothesis, implies ˜V (t
+
+ τ . We prove (a) by contradiction. Sup-
τ ) = t
pose (b) t
) holds. Due to
the CBFS condition, each session i is continuously re-
ceiving service up to the virtual time Si(t
). Since
Si(t
) > t + τ for any i according to (b), this implies
that the amount of service rendered during the period
∗
i=1 Si(t
+ τ )r.
[0, t
However, (t
+ τ )r is the maximum possible amount
of service rendered within t
)+τ ≥ mini∈B(t∗) Si(t
∗
. It suﬃces to show (a) ˜V (t
+ τ  n
∗
+ τ ] is n
∗
+ τ ) = ˜V (t
i=1 (t
+ τ )ri = (t
+ τ seconds.
∗
∗
∗
∗
∗
∗
∗
∗
∗
∗
∗
∗
∗
∗
Finally, note that that the policy of selecting next packet
for service is the same in FFQ and VC as in WFQ: choosing
the one with the smallest estimated virtual ﬁnish time. Also,
such policy is the same in W F 2Q+ as in W F 2Q, since both
select the packet that has the lowest timestamp among those
that should have started service in GPS.
2.2 Decision tree models
We adopt a standard and commonly-used computational
model in proving lower bounds: the decision tree. A de-
cision tree program in general takes as input a list of real
282variables {xi}1≤i≤n. Each internal and external (leaf) node
of the tree is labeled with a predicate of these inputs. The
algorithm starts execution at the root node.
In general,
when control is centered at any internal node, the predicate
labeling that node is evaluated, and the program control
is passed to its left or right child when the value is “yes”
or “no” respectively. Before the control is switched over,
the program is allowed to execute unlimited number of se-
quential operations such as data movements and arithmetic
operations.
In particular, the program is allowed to store
all results (i.e., no constraint on storage space) from prior
computations. When program control reaches a leaf node
the predicate there is evaluated and its result is considered
as the output of the program. The complexity of such an
algorithm is deﬁned as the depth of the tree, which is sim-
ply the number of predicates that needs to be evaluated in
the worst case. Fig. 3 shows a simple decision tree with six
nodes. Each Pi (1 ≤ i ≤ 6) is a predicate of the inputs.
Input x = 
P1(x)
Y
N