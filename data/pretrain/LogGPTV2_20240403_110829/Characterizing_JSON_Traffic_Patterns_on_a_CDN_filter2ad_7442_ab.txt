for generalized JSON characterization in §4. The long-term dataset is
collected from all machines in three CDN vantage points in Seattle,
WA to record requests to objects from a subset of domains for a
longer period of time. Since this dataset covers long periods of time,
we use this dataset to analyze patterns in §5.
3.2 JSON Traffic Taxonomy
As a first step, we define a taxonomy for JSON traffic to more easily
study the traffic. We categorize the traffic based on the traffic source,
request type, and response type. Figure 2 shows this taxonomy.
Below we define each property of the taxonomy and explain how
CDN request logs data captures the properties.
Identifying Content Type: First, we use the HTTP mime type
header field to identify the content-type of traffic. Content-type
values are standardized by the IANA and follow a specific format
[7]. Applications, such as browsers, rely upon the content-type of
a request to determine what type of content is being downloaded
197
(cid:9)(cid:15)(cid:12)(cid:11)(cid:1)(cid:16)(cid:34)(cid:18)(cid:23)(cid:23)(cid:26)(cid:20)(cid:1)(cid:16)(cid:18)(cid:40)(cid:31)(cid:30)(cid:31)(cid:29)(cid:41)
(cid:15)(cid:31)(cid:37)(cid:34)(cid:20)(cid:22)
(cid:8)(cid:37)(cid:29)(cid:18)(cid:30)(cid:1)
(cid:16)(cid:34)(cid:26)(cid:24)(cid:24)(cid:22)(cid:34)(cid:22)(cid:21)(cid:1)(cid:31)(cid:34)(cid:1)
(cid:10)(cid:18)(cid:20)(cid:25)(cid:26)(cid:30)(cid:22)(cid:1)
(cid:7)(cid:22)(cid:30)(cid:22)(cid:34)(cid:18)(cid:36)(cid:22)(cid:21)
(cid:6)(cid:29)(cid:19)(cid:22)(cid:21)(cid:21)(cid:22)(cid:21)(cid:1)
(cid:5)(cid:22)(cid:38)(cid:26)(cid:20)(cid:22)(cid:43)(cid:1)(cid:2)(cid:32)(cid:32)(cid:43)(cid:1)
(cid:3)(cid:34)(cid:31)(cid:39)(cid:35)(cid:22)(cid:34)(cid:43)(cid:1)(cid:31)(cid:34)(cid:1)
(cid:17)(cid:30)(cid:27)(cid:30)(cid:31)(cid:39)(cid:30)
(cid:14)(cid:22)(cid:33)(cid:37)(cid:22)(cid:35)(cid:36)
(cid:17)(cid:32)(cid:28)(cid:31)(cid:18)(cid:21)(cid:1)
(cid:44)(cid:13)(cid:12)(cid:15)(cid:16)(cid:45)(cid:1)(cid:31)(cid:34)(cid:1)
(cid:5)(cid:31)(cid:39)(cid:30)(cid:28)(cid:31)(cid:18)(cid:21)(cid:1)
(cid:44)(cid:7)(cid:6)(cid:16)(cid:45)
(cid:14)(cid:22)(cid:35)(cid:32)(cid:31)(cid:30)(cid:35)(cid:22)
(cid:17)(cid:30)(cid:20)(cid:18)(cid:20)(cid:25)(cid:22)(cid:18)(cid:19)(cid:28)(cid:22)(cid:43)(cid:1)
(cid:4)(cid:18)(cid:20)(cid:25)(cid:22)(cid:1)(cid:8)(cid:26)(cid:36)(cid:43)(cid:1)
(cid:4)(cid:18)(cid:20)(cid:25)(cid:22)(cid:1)(cid:10)(cid:26)(cid:35)(cid:35)
(cid:15)(cid:26)(cid:42)(cid:22)
Figure 2: JSON traffic taxonomy.
[8]. To filter for JSON traffic, we only include HTTP requests that
contain "application/json" in the HTTP mime type header.
Traffic Source: Traffic source describes the initiator of a JSON re-
quest. Two properties of traffic source are 1) human-triggered vs.
machine-generated traffic and 2) device type.
Human-triggered traffic is traffic produced as a direct interaction
between a human with a system. For example, in the case of a hu-
man interaction that opens a news app on a smartphone and loads
an article which triggers the JSON traffic in Table 1, this traffic is
considered human-triggered JSON traffic. All other JSON traffic is
considered machine-generated traffic, such as traffic that is automat-
ically generated from a script. We use timing information to analyze
this traffic in §5.1.
Another property of the JSON traffic is device type and application
type. For device type, we consider the following categories: mobiles,
desktops/laptops, and embedded devices. Embedded devices are non-
mobile, non-desktop devices, such as game consoles, IoTs, smart TVs,
etc. We use the user-agent HTTP header field to identify devices and
applications that generate traffic similar to previous work [18, 33].
To identify device type, we group by system identifiers in the user-
agent field, such as "Android", "iPhone", "Windows", etc. Note, since
the user-agent field is not standardized across many platforms and
other applications, there may be false positives and negatives as well
as missing values when identifying device-type using the user-agent
field. To reduce misclassification, we use Akamai’s EDC database
to further extract device characteristics [2]. We also label the traffic
source as Unknown when a user-agent is missing or is unidentifiable.
To separate between browser and non-browser traffic, we use a
database of browser user agents [11] since browsers use well-formed
user-agent strings.
Request Type: In the taxonomy, we outline two types of JSON
requests, uploads and downloads. Upload requests are used to send
data from a device to a server, and downloads retrieve data from a
server. To distinguish between upload and download requests, we
use the HTTP method header of a request. By convention the GET
method, as the name suggests, does not send data and is used to
download content. Likewise, the POST method uploads data and
also receives JSON object responses. Though clients can deviate
in behavior, this study assumes conventional client behavior of
GET and POST methods for uploads and downloads respectively as
specified by the IETF [15].
Response Type: There are 2 aspects of the response type: size and
cacheability. Response size relates to the number of bytes served
per each response and directly affects the CDN’s costs of serving
JSON requests. For cacheability, CDN cache logs give insights on the
type of traffic that is being served. CDN customers decide whether a
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Vargas et al.
Figure 3: Categorization by device type.
response is cacheable and provide this information to Akamai’s edge
cache system for use in serving responses from cache or customer
servers. If JSON traffic is not cacheable, then it is dynamic content
and/or personalized. If traffic is either not cacheable or a miss on
the CDN, then the response is provided by the CDN customer’s own
infrastructure.
4 Characterizing JSON Traffic
We analyze and categorize the JSON traffic according to the taxon-
omy in Figure 2.
Traffic Source: Figure 3 shows the breakdown of JSON requests in
terms of traffic source. Mobile smartphones and embedded devices
account for at least 55% and 12% of all JSON traffic respectively.
Within the embedded devices, we observe smart watches, game
console, and smart TVs. Finally, 24% of traffic is Unknown, meaning
that the traffic either does not contain a user agent (most of the
traffic) or the user agent cannot be linked to a platform. We also
find that the distribution of user agent strings is as follows: 73% of
UA strings are Mobile, 17% are Embedded, 3% are Desktop, and the
remaining 7% are Unknown.
Interestingly, 88% of the JSON traffic is non-browser traffic (not
shown in figure). If we specifically look at mobile traffic, mobile
browser-based traffic is 2.5% of all requests. No browser traffic is
detected on embedded devices. The takeaway is that a large portion
of the traffic includes native applications on mobiles and embedded
devices. Browser traffic has a well known pattern that is derived
from the HTML template; the result is they can be optimized using
prioritized push strategies [13] or prefetching [27]. However, mobile
applications are independent entities that tends to have varied traffic
patterns.
Request Type: In the taxonomy, we identify two types of JSON
requests, uploads and downloads based on the GET and POST HTTP
methods. We find that 84% of requests are GET requests meaning
that the majority of JSON traffic is download traffic. 96% of the
remaining requests are POST traffic, which uploads data values to
the server. We further explore the impact of uploads vs. downloads
as they relate to cacheability in the next section.
Response Type: The CDN allows customers to configure cacheabil-
ity of each individual request. If a request is for an uncacheable
object, the request must propagate from the edge server through
the CDN to origin content servers in order to obtain a response.
Then, the response object is returned to the original edge server to
be returned to the requesting client.
Figure 4: Heatmap of domain cacheability by category.
Nearly 55% of all JSON traffic is not cacheable. This means that
more than over half of the JSON requests, the most popular CDN
content-type, are tunneled through the CDN to origin servers. An-
other interesting aspect is that the average size of JSON responses
has decreased by around 28% since 2016 (not shown in figure). JSON
objects are also 24% and 87% smaller than HTML responses at the
median and 75th percentiles respectively. Reduced response sizes
increase the CPU cost-per-byte of serving JSON traffic, since a large
chunk of the total request cost (CPU, network, IO, etc...) is tied
to CPU request processing, which must be taken into account by
network operators when provisioning the network.
We further categorize the domains in our dataset according to the
industry associated with the domain using a commercial service [10].
Figure 4 shows a heatmap of domain cacheability grouped by the
associated domain category for the top 11 domain categories. First,
nearly 50% of domains serve content that is never cacheable and
another 30% serve content that is always cacheable. Therefore, many
CDN customers that serve JSON do not cache on the CDN and
instead use Akamai for traffic performance, security, and analytics [4,
6, 22].
Second, our categorization shows that specific segments of indus-
try generally hold similar business patterns. For example, Financial
Service, Streaming, and Gaming domains are not cacheable since
these services serve one-time use or personalized content. Con-
versely, the majority of News/Media, Sports, and Entertainment
domains are mostly cacheable since their content is highly static.
5 JSON Request Patterns
We observe two patterns in JSON requests that have implications
on optimizing JSON and discuss them below.
5.1 Periodicity
We first study periodicity in the JSON traffic. The difficulty in finding
periodicity in network traffic is noise in traffic signals. Because of
network and program delays, one cannot rely on cleanly receiving a
script period. Instead, we extend existing previous signal processing
techniques [29] that only show the significant periods. The key idea
is to use a combination of autocorrelation (on the time domain) and
fourier transform (on the frequency domain) to extract key periods
and randomness to filter noisy periods.
198
Characterizing JSON Traffic Patterns on a CDN
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Figure 5: Histogram of JSON object periods.
Figure 6: CDF of the percent of periodic clients across objects.
Let an object flow be the sequence of requests made by all clients
to a specific object, identified by a unique URL in the dataset. Let a
client-object flow, COf low, be a subsequence of object flow requests
from one client, identified by a user agent and anonymized client
IP pair. To obtain significant results, we filter out client-object flows
with less than 10 requests as well as object flows with less than 10
clients, resulting in flows containing the top 25% of objects requested.
We extend the signal processing algorithm [29] to our dataset as
follows:
(1) Calculate the autocorrelation and fourier transform for each
COf low.
(2) Randomly permute COf low a total of x times and calculate
autocorrelation and fourier transform for each permutation,
recording the max period and frequency of autocorrelation
and fourier transform respectively.
(3) Of all max periods and frequencies, take the (x −1)th largest
period and frequency as thresholds for autocorrelation and
fourier transform of the original unpermuted COf low.
(4) Using the thresholds to discard insignificant periods and fre-
quencies, line up autocorrelation and fourier transform of
COf low to find the most significant frequency and period as
the overall COf low period.
Note, the above algorithm either returns the most significant period
(i.e., largest peak in autocorrelation) or no period for the flow, due to
noise thresholding. As a result, we assume a flow only contains one
significant period and leave multi-period analysis for future work.
Choosing Parameters: We run the above algorithm on all object
and client-object flows to determine a flow period. Note the above
algorithm is parameterized by x, where larger values of x provide
higher accuracy at the expense of computation. We empirically
find that values of x greater than 100 do not produce significantly
different results in our dataset. Therefore, we use x = 100 in our
experiments. For autocorrelation and fourier transform, we also
set sampling rates of 1 second assuming that accurate detection of
periods less than this sampling rate is difficult due to network jitter.
Results: If both object and client-object have periods and these peri-
ods match, we label the client flow as periodic with respect to its
object. We run the above analysis on our long-term dataset, since
we do not want to limit the analysis to short periods, and find that
6.3% of JSON requests are periodic. This translates to a significant
share of Akamai’s requests given that JSON is the most requested
content type. Figure 5 shows that the object flow periods detected by
the above algorithm are largely on even time intervals. For example,
there are spikes are 30s, 1m, 2m, 3m, 10m, 15m, and 30m. Figure
6 quantifies how many clients-object flows share the same object
flow period (ie. how many clients all request the same periodicity).
Highlighted in the figure, we see that 20% of periodic objects have a
majority (>50%) of clients that make periodic requests. Using the
metrics from Section 4, we find that periodic traffic is 56.2% un-
cacheable and 78% upload traffic. Therefore, a large amount of this
traffic flows through the CDN to customer infrastructure.
Since these objects are highly requested periodically and the
majority of clients share the same period, these objects are likely
not requested by humans and are instead programmatic machine-
to-machine traffic. Though these requests are not definitively
machine-generated, they are most likely machine-to-machine re-
quests since it is highly unlikely for a large group of humans to
accurately send many request in periodic intervals over sustained
periods of time. Understanding this traffic as machine-to-machine
allows network operators to isolate and investigate these requested
objects in order to apply further management policies and improve
user QoE. One possible optimization is for CDN operators to de-
prioritize machine-to-machine traffic since a human is not waiting
for the response. Periodic information can also be used for anomaly
detection when an object is requested at a different period than it is
intended to be requested.
5.2 Request Prediction
The second application pattern shows that JSON requests are amenable
to prefetching, since given a request, we can predict the subsequent
JSON requests. This usage pattern is similar to other web and mo-
bile app dependencies where previous approaches have used static
and dynamic program analysis to discover resource dependencies
[14, 20].