destination, R(r, d). It must ensure, for every packet, that
this end-to-end latency is noticeably less than lowest possi-
ble round-trip time for any path that also traverses F . Con-
cretely, in order to ensure that the packet did not traverse F ,
we must also demonstrate that both of the following inequal-
ities hold:
{R(s, f ) + R(f, r)}
R(s, r) (cid:28) min
f∈F
R(s, r) + R(r, d) (cid:28) R(s, r) + min
f∈F
{R(r, f ) + R(f, d)}
(1)
By “x (cid:28) y”, we mean “x is noticeably less than y,” or
more formally, that for some δ ≥ 0: (1 + δ) · x < y. Thus,
the ﬁrst inequality states that, if a packet goes through any f
in the forbidden region on the path between the relay and the
destination, then the increase in latency will be noticeable.
The second inequality says the same for the path between the
source and the relay. Note that s can compute both inequali-
ties locally, without synchronized clocks: the min terms are
estimates (based on the speed of light, §4), and though s
cannot directly measure R(r, d) in the ﬁrst inequality, it can
measure the end-to-end RTT, R(s, r) + R(r, d), and its RTT
to r, R(s, r).
Suppose a relay has signed a packet (proving the packet
traversed that relay), and it satisﬁes the timing constraints in
Eq. (1) for any possible f ∈ F . These events are mutually
exclusive to the packet traversing F , and thus we have our
proof: the packet could not have possibly traversed F .
FsdfrFsdrf(a) R(s,r) + R(r,d) ≪      minf {R(s, f ) + R( f ,r)} + R(r,d)(b) R(s,r) + R(r,d) ≪       R(s,r) + minf {R(r, f ) + R( f ,d)}613is that, the user trusts all peers that are provably outside F
to follow the protocol correctly.2.
The limitation is that it places the onus on users to deter-
mine where in the world their attackers are. As such, we ex-
pect Alibi Routing to be used mostly for avoiding large, very
powerful adversaries [34, 37]. For example, Alibi Routing
would be well-suited to avoid China’s ﬁrewall, which ap-
pears to be run strictly within its borders [5, 4]. Attack-
ers in our model can be routing-capable adversaries [37],
i.e., we assume them to be capable of choosing how pack-
ets in their networks are routed, and of inﬂuencing routes to
cause others’ trafﬁc to be routed through them. Fortunately,
there has been signiﬁcant work in identifying countries who
launch such attacks, and ongoing efforts regularly identify
new sources of misbehavior or malfeasance [33, 27, 7].
Even such powerful adversaries are faced with limitations,
which Alibi Routing exploits. First, we make standard cryp-
tographic assumptions; any scheme wherein an attacker can-
not forge a MAC from a non-colluding peer sufﬁces. Sec-
ond, we make use of the fact that, while an attacker can lie
about having greater latency to a victim, it cannot lie about
having lower latency than it really has. This observation is
commonly used in secure network coordinate systems [38,
43]. Finally, we apply the fact that information cannot travel
faster than the speed of light, and that in fact most transmis-
sion media (especially ﬁber optic cables) peak at approxi-
mately 2
3 c. As we will demonstrate, these standard appar-
ent impossibilities are sufﬁcient for allowing many source-
destination pairs to provably avoid various countries.
4.2 Query components
When a source node s wishes to ﬁnd alibis, it constructs
and forwards a query message, (cid:104)s, d, F, T(cid:105). Most of these
are deﬁned above: s and d are the source’s and destination’s
IP addresses and ports, and F is the forbidden regions, rep-
resented by one or more ordered sets of (lat, lon) pairs. The
forbidden regions are included in the query so that interme-
diate hops can determine which next-hop neighbors are safe
to forward to.
The ﬁnal component, T , is a set of what we call “target re-
gions,” which represent locations where alibis might reside.
Target regions are included in queries to help guide routing
towards parts of the network that make the most progress to-
wards an alibi. Here, we describe how forbidden and target
regions are represented; we then describe how peers forward
them when routing.
4.2.1 User-speciﬁed forbidden regions
A forbidden region consists of a set of (possibly disjoint)
polygons speciﬁed over a set of geographic (lat, lon) coor-
dinates. A user wishing to avoid a particular country, for
instance, can specify the country’s borders. These are read-
ily available in high precision online [13], but even an ap-
proximate circumscribing polygon can be calculated with a
reasonably accurate map.
2This particular assumption need apply only to our protocol
for ﬁnding alibis, and not to the proofs of avoidance (§3).
Figure 2: Example target regions, with end-hosts in Italy and
Norway who seek to avoid Germany. The contours represent
different values of δ in Eq. (2).
Each user can specify his or her own forbidden regions;
Alibi Routing is agnostic to what these regions represent.
This has the beneﬁt that it supports a wide range of policies—
users may choose to avoid cities where data logging facilities
are expected to reside [29], an entire country, a UN voting
bloc, and so on. Moreover, users can specify these policies
without having to understand the underlying network topol-
ogy: they only need to know where in the world those they
do not trust reside.
4.2.2 Computed target regions
The ﬁnal component of an Alibi Routing query is a set of
target regions: geographic regions wherein alibis may exist.
When a peer processes a query, its task is to choose next-
hop neighbors who get the query closer to a target region
(we describe this process in Section 4.4.2). As a result, the
crucial property of a target region is that it include as many
alibis as possible.
Similar to forbidden regions, target regions are represented
by polygons of GPS coordinates. A node at GPS coordinate
g is included in the target region if it satisﬁes the alibi condi-
tions from Section 3. That is, if D(·,·) represents the great-
circle distance between two points, then g is in the target
region if and only if:
(1 + δ) · D(s, g) < min
f∈F
(1 + δ) · D(g, d) < min
f∈F
{D(s, f ) + D(f, g)} , and
{D(g, f ) + D(f, d)}
(2)
for some suitably large constant δ: this is the same “noticeably-
larger-than” relationship as captured in Eq. (1)3.
For an arbitrary set of forbidden regions, we do not know
of a closed form solution to represent all GPS points in T .
Instead, we segment the globe into a grid of points (in our
implementation, we take (lat, lon) points at 2◦ intervals).
For each such point g, we use Snell’s law [12] to determine
the r.h.s. of Eq. (2). If three contiguous grid points are in the
target region and form a triangle, we add the entire triangle
to T and take their union, forming a smaller set of polygons.
3The formulations of these two equations are slightly dif-
ferent; this is because s can accurately estimate the dis-
tance between relay and destination, D(g, d), required in
Eq. (2), but can directly measure only the full end-to-end
RTT, R(s, r) + R(r, d), required by Eq. (1).
614Figure 2 illustrates the target region for a peer in Italy
wishing to communicate with a peer in Norway while avoid-
ing Germany. Note that larger values of δ result in smaller
target regions; when δ = 0, nearly the entire world has the
potential of hosting an alibi, but when δ = 0.2, alibis can
only possibly be located in the Middle East, extending east-
ward to India.
The grid interval spacing represents a trade-off between
efﬁciency and accuracy. With larger grids, the computation
is faster and the target region’s polygons can be represented
with fewer points, thereby decreasing query size. However,
larger grids can be inaccurate: they may miss viable relays,
and, if left unchecked, could include portions of the forbid-
den region. To alleviate this second concern, we include
each triangle in T only if it does not intersect the forbidden
region. We have found grid intervals of 2◦ to be safe and
efﬁcient for all single-country forbidden regions we tested.
Target regions may (and often do) also include peers who
are not viable relays. Consider for example a peer who has a
satellite link with extremely high latencies: such a peer may
never satisfy the alibi conditions, regardless of the path his
or her packets take. In other words, a benevolent relay whose
packets never traverse the forbidden region might never be
viable simply because it has poor connectivity. With respect
to safety, this is not a concern: target regions are used only
to guide queries toward potential alibis, and Alibi Routing
peers check the alibi conditions (Eq. (1)) to verify a relay’s
actions for each packet. We evaluate how likely a node is to
be an alibi given that it is inside a target region in Section 6.
4.3 Neighbor maintenance
Every peer in the system maintains a constant-sized set
of neighbors (32 in our implementation). Our primary re-
quirement is that these neighbors are diverse in terms of both
latency and geography, so as to increase the likelihood that
peers can route queries towards a given target region (and
away from the corresponding forbidden region).
To maintain as diverse a set of neighbors as possible, each
peer p maintains two sets of peers: (1) a set of m known-
active peers, whom p has heard from recently, and (2) a set
of n neighbors, which p uses when processing queries, The
known-active set is larger (4× in our implementation), and
is used for populating the neighbor set as follows:
Latency diversity. Peers regularly obtain round-trip time
(RTT) measurements to peers in their known-active set: they
actively ping peers when they ﬁrst meet (and periodically
thereafter), and record the RTTs from routing messages. When
a peer obtains a new RTT measurement, it updates its known-
active set of peers, and decides whether or not its neighbor
set should be updated. To maintain a diverse set of neigh-
bors, the invariant we would like to maintain is that, at any
point in time, a peer’s relative differences in latencies to its
neighbors are maximized. We approximate this with the fol-
lowing simple heuristic:
Periodically, each peer p determines his most redundant
neighbor in terms of RTT. Suppose ri represents neighbor
i’s RTT to p, and that ri ≤ ri+1 for all i. Neighbor i’s
ri
(cid:17)
.
ri+1−ri−1
“redundancy” is captured by the inverse of its relative dif-
ference to its neighboring values:
(for notational
convenience, let r−1 = −∞ and rn+1 = ∞). Peer p then
removes the neighbor i with the greatest redundancy, and
adds a random peer from its known-active set4.
Geographic diversity. A geographically diverse set of neigh-
bors is also important in Alibi Routing; it increases the likeli-
hood that each relay has a neighbor outside of a given forbid-
den region. In Alibi Routing, when peers exchange entries
from their known-active set with one another, they share not
only a list of peers they know, but also those peers’ GPS
coordinates (including their own). Sharing geographic in-
formation is important for processing queries (§4.4), so we
leverage them for achieving diverse neighbors, as well.
its GPS coordinate and qi’s, that is, θi = tan−1(cid:16) p.lat−qi.lat
To achieve geographic diversity, we apply a similar heuris-
tic as with latencies: Peer p computes the bearing θi between
p.lon−qi.lon
p sorts these bearings (w.l.o.g., suppose θ1 ≤ ··· ≤ θM ),
and removes the “most redundant” bearing from the list. θi
is considered the most redundant if it has the smallest aver-
age difference with its predecessor θi−1 and successor θi+1.
These measures of diversity guide an Alibi Routing peer’s
decisions as to what neighbors to add or drop. Adding new
neighbors is done as follows:
Joining. To join, n ﬁrst contacts a peer p it knows, and ob-
tains p’s known-active set (this contains but is not limited to
p’s neighbor set). n then pings these nodes with a random
nonce, asks them for their GPS coordinates, adds them to his
known-active set, and uses them to construct his own neigh-
bor set, as described above. Note that the neighbor set of a
new node is likely to be different from the node that boot-
strapped it (unless they are extremely close to one another).
This process is trivial to bootstrap—any peer can initiate its
own instance of a Alibi Routing overlay—and permits incre-
mental deployment.
Establishing neighbors. When a peer p decides to add peer
q as a neighbor, p ﬁrst pings q with a random nonce, and
records the RTT. All pings in Alibi Routing have such an un-
predictable nonce; without it, q could under-report his RTT
by constructing and sending a response before receiving p’s
ping5. The peers then exchange their GPS coordinates—
precise locations would be a violation of the users’ privacy,
but fortunately, as Figure 2 indicates, even relatively coarse-
grained GPS coordinates (city- or often even country-level)
often sufﬁce. Finally, the peers establish a shared symmet-
ric key, which they use to compute and verify MACs on the
packets they forward for one another. This same process ap-
plies when establishing a connection between a source node
s and an alibi peer a: the MACs provide the proof that a
indeed forwarded the packet, as described in Section 3.
4We considered alternative schemes such as Meridian’s ex-
panding rings [44], but, in our setting, we found their differ-
ence to be statistically insigniﬁcant in evaluation.
5Such an attack, which seeks to under-represent one’s RTT,
is similar in spirit to the TCP OptAck attack [39].
615Figure 3: Choosing a set of next-hop neighbors when processing a query, with target region T and avoidance region F .
Properties. Note that our neighbor maintenance protocol
does not explicitly invoke user trust assumptions, nor does it
make use of forbidden regions. Peers can lie about the data
they share—they can arbitrarily inﬂate latencies and com-
pletely forge GPS coordinates. However, as we will see,
Alibi Routing uses the fact that attackers cannot lie about
having lower latencies in order to ﬁlter out false information
from potentially forbidden peers. We demonstrate in Sec-
tion 5 that these mechanisms ensure that Alibi Routing is
safe regardless of any peer’s neighbor set.
4.4 Query processing
When a peer obtains a query message, its task is to de-
termine the next-hop neighbor who has the greatest chance
of locating an alibi. Because of its adversarial setting, we
can think of query processing as having to satisfy two con-
ditions: safety and progress. First, the next-hop neighbor
must be safe, i.e., the neighbor must not reside in a forbid-
den region nor can communication with the neighbor tra-
verse a forbidden region. Second, each hop must make as
much progress as possible towards a target region. We next
describe how a peer checks both of these conditions.
4.4.1 Safety: Determining trustworthy neighbors
Suppose peer q is processing a query (cid:104)s, d, F, T(cid:105). How
does q determine with certainty that one of its neighbors, n,
is not in F ?
The insight is that the latency between two nodes cannot
be lower than the speed of light (c) would permit. So long
as peer q knows its own latitude and longitude, it can com-
pute d = ShortestDistance(q, F ): the great-circle distance
between itself and the closest point in F .
It can then use
this distance to estimate what the minimum possible RTT is
between itself and any node in the forbidden region. We de-