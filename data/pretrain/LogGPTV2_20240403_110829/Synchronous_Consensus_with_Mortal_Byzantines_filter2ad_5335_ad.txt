sections) may be overly optimistic.
In particular, detect-
ing symmetric faults requires knowledge about the correct-
ness of the contents of a message, which may be beyond the
scope of a simple monitor. Therefore, we should also con-
sider systems in which only asymmetric faults are lethal,
whereas symmetric faults are non-lethal.
Note that the non-lethal failure model is formally not
comparable to the mortal Byzantine model of Sect. 3 to
Sect. 5. Under this section’s assumption, on the one hand,
faulty processes may be alive forever, given that they do not
behave two-faced (i.e., send out different values to differ-
ent processes in the same round). On the other hand, after
behaving two-faced, a faulty process must crash within a
ﬁxed number of rounds. We will show that again n > 2t is
necessary and sufﬁcient to solve consensus.
Lemma 7.1. Under (O) or (R), if all communication is done
via ft fme(v) and symmetric faults are non-lethal, then
if two correct processes deliver the messages m and m0 re-
spectively in any round r then m = m0.
Proof. From Lemma 6.4 we know that if all faults are
lethal, a faulty process can appear send omission faulty or
crashed. Let us again assume that correct processes p and q
both deliver a value for faulty process pf . Since asymmetric
faults are still lethal, we again ﬁnd that p resp. q has received
k = x+ y +1 equal values rcvpropp[pf ] resp. rcvpropq[pf ],
and that rcvpropp[pf ] = rcvpropq[pf ]. However, as sym-
metric faults are now non-lethal, the value delivered by the
correct processes may now be value faulty. Again, some
correct processes may not deliver a value for pf at all.
The previous lemma ascertains that faulty processes only
appear crashed, send omission faulty, symmetric faulty, or
a combination of send omission and symmetric faulty.
Theorem 7.2. There is no algorithm that solves consensus
in the presence of t ≥ n/2 symmetric faulty processes.
Proof. The proof is omitted since it is similar to the proof
of Theorem 5.3 as no two-faced behavior was required to
derive the result.
Corollary 7.3. If symmetric faults are non-lethal, consen-
sus with at most t faulty processes requires at least n > 2t
processes.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20073:
Algorithm 3 Synchronous, Mortal Byzantine Tolerant Con-
sensus under model (O) and non-lethal symmetric faults
Code for processes (for process p):
1: variables
vp ∈ {0, 1}
// current value
2:
rp ← 0
// current round
rcvpropp[i] ∈ {0, 1, ⊥} // value received from i, 1 ≤ i ≤ n, . . .
// . . . in the current round
decisionp ∈ {0, 1}
// decision value
rp ← rp + 1
ft fme(vp)
for all i ∈ Π do
5:
6: repeat
7:
4:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
else
vp = 1
vp = min{rcvpropp[i]}
20: until rp = x · t + 1
21: decide vp
22: halt
if received (vi) by i then
else
rcvpropp[i] ← vi
rcvpropp[i] ← ⊥
if |{i : rcvpropp[i] = 0}| > |{i : rcvpropp[i] = 1}| then
else if |{i : rcvpropp[i] = 0}|  2t is necessary and sufﬁcient to solve
consensus. In general, it should be possible to devise more
efﬁcient solutions (e.g., regarding synchrony assumptions
or required number of processes) by replacing the static
fault model with a model where the behavior of faulty pro-
cesses converges towards some benign fault. We consid-
ered only the extreme case where faulty processes may start
to exhibit the most general failure mode (Byzantine) and
eventually converge to a very benign fault, i.e., they crash.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007[13] D. Dolev, R. Reischuk, and H. R. Strong. Early stopping in
Byzantine agreement. Journal of the ACM, 37(4):720–741,
Oct. 1990.
[14] A. Doudou, B. Garbinato, and R. Guerraoui. Encapsulat-
ing failure detection: From crash to byzantine failures. In
Reliable Software Technologies - Ada-Europe 2002, LNCS
2361, pages 24–50, Vienna, Austria, June 2002. Springer.
[15] A. Doudou, B. Garbinato, R. Guerraoui, and A. Schiper.
Muteness failure detectors: Speciﬁcation and implementa-
tion. In Proceedings 3rd European Dependable Computing
Conference (EDCC-3), volume 1667 of LNCS 1667, pages
71–87, Prague, Czech Republic, September 1999. Springer.
[16] C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in
Journal of the ACM,
the presence of partial synchrony.
35(2):288–323, Apr. 1988.
[17] M. Fischer and L. Lamport. Byzantine generals and trans-
action commit protocols. Technical Report 62, SRI Interna-
tional, 1982.
[18] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility
of distributed consensus with one faulty process. Journal of
the ACM, 32(2):374–382, Apr. 1985.
[19] J.-F. Hermant and G. Le Lann. Fast asynchronous uniform
consensus in real-time distributed systems. IEEE Transac-
tions on Computers, 51(8):931–944, Aug. 2002.
[20] L. Lamport, R. Shostak, and M. Pease. The Byzantine gen-
erals problem. ACM Transactions on Programming Lan-
guages and Systems, 4(3):382–401, July 1982.
[21] N. Lynch. Distributed Algorithms. Morgan Kaufman Pub-
lishers, Inc., San Francisco, USA, 1996.
[22] D. Malkhi and M. Reiter. Unreliable intrusion detection in
distributed computations. In Proceedings of the 10th Com-
puter Security Foundations Workshop (CSFW97), pages
116–124, Rockport, MA, USA, June 1997.
[23] J.-P. Martin and L. Alvisi.
Fast Byzantine consensus.
IEEE Transactions on Dependable and Secure Computing,
3(3):202–215, July 2006.
[24] M. Nesterenko and A. Arora. Dining philosophers that tol-
In Proceedings of the 22nd In-
erate malicious crashes.
ternational Conference on Distributed Computing Systems
(ICDCS’02), pages 191–198, Vienna, Austria, July 2002.
[25] K. J. Perry and S. Toueg. Distributed agreement in the pres-
ence of processor and communication faults. IEEE Trans-
actions on Software Engineering, SE-12(3):477–482, March
1986.
[26] P. M. Thambidurai and Y. K. Park. Interactive consistency
In Proceedings 7th Reliable
with multiple failure modes.
Distributed Systems Symposium, Oct. 1988.
[27] J. Widder, G. Gridling, B. Weiss, and J.-P. Blanquart. Syn-
chronous consensus despite mortal byzantines. Research
Report 13/2006, Technische Universit¨at Wien, Institut f¨ur
Technische Informatik, 2006.
We also considered intermediate models where pro-
cesses may exhibit a certain (bounded) number of faults
without ever crashing, but if they do exceed this bound, they
crash within a known number of rounds. We have shown
that in these cases, n > t is necessary and sufﬁcient to
solve consensus. If, however, only asymmetric faults count
towards the bound, the n > 2t result cannot be improved.
Many other forms of such trajectory may turn out to be
useful in applications or may be encountered as natural be-
havior of certain components.
References
[1] M. Abd-El-Malek, G. R. Granger, G. R. Goodson, M. K. Re-
iter, and J. J. Wylie. Fault-scalable Byzantine fault-tolerant
In 20th ACM Symposium on Operating Systems
services.
Principles (SOSP’05), pages 59–74, Oct. 23–26, 2005.
[2] M. K. Aguilera, C. Delporte-Gallet, H. Fauconnier, and
S. Toueg. Consensus with byzantine failures and little sys-
tem synchrony. In Proceedings of the International Confer-
ence on Dependable Systems and Networks (DSN’06), pages
147–155, 2006.
[3] E. Anceaume, C. Delporte-Gallet, H. Fauconnier, M. Hurﬁn,
and G. Le Lann. Designing modular services in the scattered
byzantine failure model. In 3rd International Symposium on
Parallel and Distributed Computing (ISPDC 2004), pages
262–269. IEEE Computer Society, 2004.
[4] H. Attiya and J. Welch. Distributed Computing. John Wiley
& Sons, 2nd edition, 2004.
[5] M. H. Azadmanesh and R. M. Kieckhafer. New hybrid fault
IEEE
models for asynchronous approximate agreement.
Transactions on Computers, 45(4):439–449, 1996.
[6] M. Biely. An optimal Byzantine agreement algorithm
In Proc. 15th An-
with arbitrary node and link failures.
nual IASTED International Conference on Parallel and Dis-
tributed Computing and Systems (PDCS’03), pages 146–
151, Marina Del Rey, California, USA, Nov. 3–5, 2003.
[7] M. Biely. On the optimal resilience for omissive process and
link faults. private communication, 2005.
[8] M. Castro and B. Liskov. Practical byzantine fault tolerance.
In 3rd Symposium on Operating Systems Design and Imple-
mentation, Feb. 1999.
[9] B. Charron-Bost and A. Schiper. Uniform consensus is
harder than consensus. J. Algorithms, 51(1):15–37, 2004.
[10] M. Correia, N. F. Neves, L. C. Lung, and P. Ver´ıssimo.
Low complexity Byzantine-resilient consensus. Distributed
Computing, 17:237–249, 2005.
[11] M. Correia, N. F. Neves, and P. Ver´ıssimo. From consensus
to atomic broadcast: Time-free Byzantine-resistant proto-
cols without signatures. The Computer Journal, 49(1):82–
96, 2006.
[12] C. Delporte-Gallet, H. Fauconnier, S. L. Horn, and S. Toueg.
In PODC ’05:
Fast fault-tolerant agreement algorithms.
Proceedings of the twenty-fourth annual ACM SIGACT-
SIGOPS symposium on Principles of distributed computing,
pages 169–178, New York, NY, USA, 2005. ACM Press.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007