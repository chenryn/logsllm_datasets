these operations and without physical access to the home.
Our empirical analysis, coupled with a set of security design
lessons we distilled, serves as the ﬁrst critical piece in the
effort towards secure smart homes.
DISCLOSURE AND RESPONSE
We disclosed the vulnerabilities identiﬁed in this paper to
SmartThings on December 17, 2015. We received a response
on January 12, 2016 that their internal team will be looking
to strengthen their OAuth tokens by April 2016 based on
the backdoor pin code injection attack, and that other attack
vectors will be taken into consideration in future releases.
We also contacted the developer of the Android app that
had the OAuth client ID and secret present
in bytecode.
The developer told us that he was in communication with
SmartThings to help address the problem. A possible approach
being considered was for a developer to provide a whitelist
of redirect URI possibilities for the OAuth ﬂow to prevent
arbitrary redirection. The SmartThings security team sent us
a followup response on April 15, 2016. Please see Appendix
D for details.
ACKNOWLEDGEMENTS
We thank the anonymous reviewers and Stephen Checkoway
for their insightful feedback on our work. We thank the
user study participants. We also thank Kevin Borders, Kevin
Eykholt, Bevin Fernandes, Mala Fernandes, Sai Gouravajhala,
Xiu Guo, J. Alex Halderman, Jay Lorch, Z. Morley Mao,
Bryan Parno, Amir Rahmati, and David Tarditi for providing
feedback on earlier drafts. Earlence Fernandes thanks the
Microsoft Research OSTech group for providing a stimulating
environment where this work was initiated. This material is
based in part upon work supported by the National Science
Foundation under Grant No. 1318722. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this material
are those of the authors and do not necessarily reﬂect the views
of the National Science Foundation.
REFERENCES
[1] “Vera Smart Home Controller,” http://getvera.com/controllers/vera3/,
Accessed: Oct 2015.
[2] Allseen Alliance, “AllJoyn Data Exchange,” https://allseenalliance.org/
framework/documentation/learn/core/system-description/data-exchange,
Accessed: Nov 2015.
[3] Allseen Alliance, “AllJoyn Framework,” https://allseenalliance.org/
framework, Accessed: Oct 2015.
[4] AllSeen Alliance,
2.0 Feature: High-level
https://allseenalliance.org/framework/documentation/learn/
“AllJoyn Security
Design,”
core/security2 0/hld, Accessed: Nov 2015.
[5] Apple, “App Security,
iOS Security Guide,” http://www.apple.com/
business/docs/iOS Security Guide.pdf, Accessed: Nov 2015.
Reference,”
“HMAccessoryDelegate
Protocol
[6] Apple,
https:
//developer.apple.com/library/ios/documentation/HomeKit/
Reference/HMAccessoryDelegate Protocol/index.html#//
apple ref/occ/intfm/HMAccessoryDelegate/accessory:service:
didUpdateValueForCharacteristic:, Accessed: Oct 2015.
[7] Apple, “HomeKit,” http://www.apple.com/ios/homekit/, Accessed: Oct
2015.
[8] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “Pscout: Analyzing
the android permission speciﬁcation,” in Proceedings of the 2012 ACM
Conference on Computer and Communications Security, ser. CCS ’12.
New York, NY, USA: ACM, 2012, pp. 217–228. [Online]. Available:
http://doi.acm.org/10.1145/2382196.2382222
[9] Behrang Fouladi and Sahand Ghanoun, “Honey, I’m Home!!, Hacking
ZWave Home Automation Systems,” Black Hat USA 2013.
[10] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague, “Oauth
demystiﬁed for mobile application developers,” in Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’14. New York, NY, USA: ACM, 2014, pp. 892–903.
[Online]. Available: http://doi.acm.org/10.1145/2660267.2660323
[11] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing
Inter-application Communication in Android,” in Proceedings of the 9th
International Conference on Mobile Systems, Applications, and Services,
ser. MobiSys ’11. New York, NY, USA: ACM, 2011, pp. 239–252.
[Online]. Available: http://doi.acm.org/10.1145/1999995.2000018
[12] T. Denning, T. Kohno, and H. M. Levy, “Computer security and the
modern home,” Commun. ACM, vol. 56, no. 1, pp. 94–103, Jan. 2013.
[Online]. Available: http://doi.acm.org/10.1145/2398356.2398377
[13] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
permissions demystiﬁed,” in Proceedings of the 18th ACM Conference
on Computer and Communications Security, ser. CCS ’11. New
York, NY, USA: ACM, 2011, pp. 627–638.
[Online]. Available:
http://doi.acm.org/10.1145/2046707.2046779
[14] A. P. Felt, S. Egelman, M. Finifter, D. Akhawe, and D. Wagner,
“How to ask for permission,” in Proceedings of
the 7th USENIX
Conference on Hot Topics in Security, ser. HotSec’12. Berkeley,
CA, USA: USENIX Association, 2012, pp. 7–7. [Online]. Available:
http://dl.acm.org/citation.cfm?id=2372387.2372394
[15] A. P. Felt, S. Egelman, and D. Wagner, “I’ve got 99 problems,
but vibration ain’t one: A survey of smartphone users’ concerns,”
in Proceedings of
the Second ACM Workshop on Security and
Privacy in Smartphones and Mobile Devices, ser. SPSM ’12. New
York, NY, USA: ACM, 2012, pp. 33–44.
[Online]. Available:
http://doi.acm.org/10.1145/2381934.2381943
[16] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner,
“Android permissions: User attention, comprehension, and behavior,” in
Proceedings of the Eighth Symposium on Usable Privacy and Security,
ser. SOUPS ’12. New York, NY, USA: ACM, 2012, pp. 3:1–3:14.
[Online]. Available: http://doi.acm.org/10.1145/2335356.2335360
[17] D.
Fisher,
“Pair
of
Bugs
Up
Controllers
pair-of-bugs-open-honeywell-home-controllers-up-to-easy-hacks/
113965/, Accessed: Oct 2015.
Easy
to
Open
Hacks,”
Honeywell
Home
https://threatpost.com/
[18] Google, “Project Weave,” https://developers.google.com/weave/, Ac-
cessed: Oct 2015.
[19] A. Hesseldahl, “A Hackers-Eye View of the Internet of Things,” http:
//recode.net/2015/04/07/a-hackers-eye-view-of-the-internet-of-things/,
Accessed: Oct 2015.
[20] Kohsuke Kawaguchi,
“Groovy Sandbox,”
http://groovy-sandbox.
kohsuke.org/, Accessed: Oct 2015.
[21] N.
Lomas,
Home
critical-ﬂaw-ided-in-zigbee-smart-home-devices/,
2015.
Flaw identiﬁed
In
Smart
http://techcrunch.com/2015/08/07/
Oct
Accessed:
ZigBee
“Critical
Devices,”
[22] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “CHEX: Statically vetting
Android apps for component hijacking vulnerabilities,” in Proceedings
of
the 2012 ACM Conference on Computer and Communications
Security, ser. CCS ’12. New York, NY, USA: ACM, 2012, pp. 229–
240. [Online]. Available: http://doi.acm.org/10.1145/2382196.2382223
[23] T. Oluwafemi, T. Kohno, S. Gupta, and S. Patel, “Experimental Security
Analyses of Non-Networked Compact Fluorescent Lamps: A Case Study
of Home Automation Security,” in Proceedings of the LASER 2013
(LASER 2013). Arlington, VA: USENIX, 2013, pp. 13–24. [Online].
Available: https://www.usenix.org/laser2013/program/oluwafemi
[24] F. Roesner and T. Kohno, “Securing embedded user interfaces: Android
and beyond.” in USENIX Security, 2013.
[25] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and
C. Cowan, “User-driven access control: Rethinking permission granting
in modern operating systems,” in Proceedings of
the 2012 IEEE
Symposium on Security and Privacy, ser. SP ’12. Washington, DC,
USA: IEEE Computer Society, 2012, pp. 224–238. [Online]. Available:
http://dx.doi.org/10.1109/SP.2012.24
[26] Samsung, “SmartApp Location object,” http://docs.smartthings.com/en/
latest/ref-docs/location-ref.html#location-ref, Accessed: Oct 2015.
[27] Samsung, “SmartThings,” http://www.smartthings.com/, Accessed: Nov
2015.
651651
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
1 definition(
2
name: "BatteryLevelMonitor",
namespace: "com.batterylevel.monitor",
author: "IoTPaper",
description: "Monitor battery level and send
push messages " +
"when a battery is low",
category: "Utility")
8
9 preferences {
10
true
section("Select Battery-powered devices") {
input "bats", "capability.battery", multiple:
input "thresh", "number", title: "If the
battery goes below this level, " +
"send me a push
notification"
}
14
15 }
16
17 def initialize() {
18
19 }
20
21 def setup() {
22
setup()
[28] Samsung,
“SmartThings OAuth
Documentation,”
Protocol
Smart-
http://docs.smartthings.com/en/latest/
Flow –
Things
smartapp-web-services-developers-guide/tutorial-part2.html#
appendix-just-the-urls-please, Accessed: Oct 2015.
[29] B. Ur, J. Jung, and S. Schechter, “The current state of access control
for smart devices in homes,” in Workshop on Home Usable Privacy
and Security (HUPS). HUPS 2014, July 2013. [Online]. Available:
http://research.microsoft.com/apps/pubs/default.aspx?id=204947
[30] B. Ur, E. McManus, M. Pak Yong Ho, and M. L. Littman, “Practical
trigger-action programming in the smart home,” in Proceedings of the
SIGCHI Conference on Human Factors in Computing Systems, ser.
CHI ’14. New York, NY, USA: ACM, 2014, pp. 803–812. [Online].
Available: http://doi.acm.org/10.1145/2556288.2557420
[31] R. Vall´ee-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan,
“Soot - a java bytecode optimization framework,” in Proceedings of the
1999 Conference of the Centre for Advanced Studies on Collaborative
Research, ser. CASCON ’99.
IBM Press, 1999, pp. 13–. [Online].
Available: http://dl.acm.org/citation.cfm?id=781995.782008
[32] Veracode,
“The
Internet of Things: Security Research Study,”
https://www.veracode.com/sites/default/ﬁles/Resources/Whitepapers/
internet-of-things-whitepaper.pdf, Accessed: Oct 2015.
APPENDIX A: DISGUISED BATTERY MONITOR
Listing 4 shows our battery monitor SmartApp’s source
code. The app is designed to monitor battery values (and only
requests that capability), but it can also steal lock pin codes.
The exact behavior of the SmartApp depends on commands
received from a Web service that claims to offer a battery
level charting service. Line 60 is used in the attack. It can be
made to perform an httpPost or an smsSend depending
upon the conﬁguration received from the remote service. An
attacker can use this SmartApp to intercept and leak a pin
code.
APPENDIX B: OAUTH TOKEN STEALING DETAILS
We detail
the OAuth token stealing process here. We
disassembled an Android counterpart app for a WebService
SmartApp using apkstudio and smali. We found that
the
Android app developer hard-coded the client ID and secret
values in the app’s bytecode. Using the client ID and secret,
an attacker can complete the OAuth ﬂow independently
of the Android app. Our speciﬁc attack involves crafting
an attack URL with the redirect_uri portion replaced
with an attacker controlled domain. Our attack URL was:
https://graph.api.smartthings.com/oauth/authorize?response
type=code&client id=REDACTED&scope=app&redirect
uri=http%3A%2F%2Fssmartthings.appspot.com (we
tested
this URL in Dec 2015). Note that we have redacted the client
ID value to protect the Android counterpart app.
There are a few things to notice about this URL. First, it
uses HTTPS. When the URL is clicked, the user is taken to the
authentic SmartThings login form, where a green lock icon is
displayed (Figure 6). Second, the redirect URI is an attacker
controlled domain but crafted to have the word ‘smartthings’
in it. Third, the URL is fairly long and the redirect URI portion
is URL-encoded, decreasing readability.
SmartThings documentation recommends that the client ID
and secret values are to be stored on a separate server, outside
the smartphone app. But, that would have required a separate
authentication of users to the Android app. There is nothing
3
4
5
6
7
11
12
13
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
58
59
60
61
62
63
64
65
66
67
68
69
//pull configuration from web service
def params = [
uri: "http://ssmartthings.appspot.com",
path: ""
]
try {
httpGet(params) { resp ->
def jsonSlurper = new JsonSlurper()
def jsonString = resp.data.text
def configJson =
jsonSlurper.parseText(jsonString)
//store config in state
//the "battery" level state change
state.serverUpdateValue =
configJson[’serverUpdateValue’]
//method used to transmit data to
//charting service, httpPost for now
state.method = configJson[’method’]
//our graphing webservice URL
state.destIP = configJson[’destIP’]
//event data to inspect
state.data = configJson[’data’]
}
} catch (e) {
log.error "something went wrong: $e"
}
bats.each { b ->
subscribe(b, state.serverUpdateValue, handler)
}
52