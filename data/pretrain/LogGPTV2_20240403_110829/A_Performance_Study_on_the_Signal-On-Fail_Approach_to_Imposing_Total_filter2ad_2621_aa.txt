**Title: A Performance Study on the Signal-On-Fail Approach to Imposing Total Order in the Streets of Byzantium**

**Authors: Qurat-ul-Ain Inayat and Paul Devadoss Ezhilchelvan**

**School of Computing Science, University of Newcastle, Newcastle upon Tyne, UK**
**Email: {q.inayat, paul.ezhilchelvan}@ncl.ac.uk**

**Abstract:**
This paper explores the well-known FLP impossibility result, which states that paired processes cannot achieve total order in an asynchronous environment without some form of failure detection. We investigate the performance gains when this impossibility is addressed through the use of abstract processes with special failure semantics. Specifically, we construct signal-on-fail processes by (i) pairing a subset of Byzantine-prone processes to check each other's computational outputs and (ii) assuming they do not fail simultaneously. Using these signal-on-fail processes, we develop coordinator-based total-order protocols that allow less than one-third of the processes to fail in a Byzantine manner. Through a LAN-based implementation, we measure both failure-free order latencies and fail-over latencies, demonstrating that our approach achieves smaller latencies compared to the protocol by Castro and Liskov, which is generally considered to perform exceptionally well in best-case scenarios.

**1. Introduction**
Managing service or state machine replication in the presence of faults requires non-faulty replicas to determine an identical order for client requests. This ordering requirement becomes particularly challenging when nodes can fail in a malicious, Byzantine manner and are connected by an asynchronous network, such as the Internet, where message transfer delays cannot be bounded by a known constant. The well-known FLP impossibility result [5] states that deterministic ordering cannot be achieved if the network is asynchronous and if replicas can fail even by simply crashing.

Several order protocols have been proposed to circumvent the FLP impossibility, including the Byzantine Fault-Tolerant (BFT) protocol by Castro and Liskov [2], which has shown outstanding performance, especially in failure-free scenarios. BFT is a coordinator-based deterministic protocol that requires a partially synchronous network, where message delays eventually stabilize within an estimated bound for a sufficiently long period.

The protocols developed in this paper are shown to perform faster and with lower message overhead in failure-free scenarios compared to BFT. Additionally, they allow most replicas to be connected by an asynchronous network. Our approach to addressing the FLP impossibility involves dynamically constructing an abstract process with signal-on-crash semantics, which fails only by crash and signals its imminent failure. When failures are signaled, the impossibility result no longer applies, and a simplified protocol structure with lower message overhead can be used. This construction requires additional assumptions about the failure behavior of grouped processes, specifically that paired processes do not fail simultaneously.

We consider two alternative assumptions: (1) given that one process in a pair has failed, the other remains non-faulty for a specified minimum amount of time (1_after_1), or (2) the other process remains non-faulty forever (never_2_Fail). The paired processes construct an abstract, signal-on-crash process, operating in parallel and endorsing each other's outputs if they are consistent. If a process suspects a failure in its counterpart, it stops all activities related to the signal-on-crash process and signals this stopping.

To ensure failure detection within a process pair, we make assumptions about communication and processing delays, considering both the synchronous (Sync) and partially synchronous (PSync) models. We develop and study the performance of protocols for the combinations {1_after_1, Sync} and {never_2_Fail, PSync}.

**2. System Model**
We assume a service, constructed as a deterministic state machine, is replicated over \(2f + 1\) nodes, where \(f \geq 1\), connected by a reliable but asynchronous network. Each sent message is delivered uncorrupted, and message transfer delays are finite but unbounded. The replica nodes can fail independently, and up to \(f_r\) of them can fail in a Byzantine manner, where \(0 \leq f_r \leq f\). Despite this, the service must be made fault-tolerant by meeting the state machine replication requirements, with the primary focus being to ensure that non-faulty replicas process identical sequences of client requests.

At least \(f\) nodes are supplemented with shadow nodes to achieve fault-tolerant ordering of client requests over an asynchronous network. These shadow nodes are part of the Asynchrony-Byzantine (AB) order supplement scheme, distinct from the Byzantine fault-tolerant service replication scheme.

We denote the order process in the \(i\)-th replica node as \(p_i\), and the shadow node as \(p'_i\). Paired processes \(\{p_i, p'_i\}\) may implement the signal-on-crash process, and their host nodes are connected by a fast, reliable network. Communication between any \(p'_i\) and \(p_j\) or \(p'_j\) (where \(i \neq j\)) is over the reliable, asynchronous network at the service level.

**2.1. Assumptions**
1. **Shadow Nodes**: Shadow nodes fail independently and in a Byzantine manner. The total number of failed shadow nodes does not exceed \(f_s\), where \(0 \leq f_s \leq f\), and the total number of failed nodes in the system never exceeds \(f\): \(f_r + f_s \leq f\). When exactly \(f\) service replica nodes are paired with a shadow, the optimal requirement for Byzantine fault-tolerant ordering is \(n = 3f + 1\), where \(n\) is the total number of nodes in the system.
   
2. **Cryptography**: We assume that cryptographic techniques, such as public-key RSA signatures and message authentication codes, are robust enough to prevent message spoofing, replays, and detect message corruption. Non-faulty processes' signatures cannot be forged, and any attempt to alter a signed message will be detected. Hash functions are assumed to be one-way and collision-resistant. A trusted dealer initializes the system and nodes with cryptographic keys and hash functions.

**2.1.1. Assumptions Specific to Signal-On-Crash Approach**
For paired order processes \(p\) and \(p'\) implementing a signal-on-crash process, each checks the otherâ€™s output from both value and timing perspectives, endorsing it if deemed correct or emitting a fail-signal otherwise. Constructing a signal-on-crash process requires assumptions about two timing-related aspects:
1. **Differential Delay Bound**: Accurately estimating a differential delay bound within which one process can expect its counterpart to produce an output, if operating timely. If this bound cannot be guaranteed, correct processes might falsely suspect each other, leading to false signaling.
2. **Non-Simultaneous Failures**: Ensuring that paired processes do not fail simultaneously by defining a minimum time interval during which one node remains non-faulty while the other has failed.