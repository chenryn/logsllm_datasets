# Power Consumption Overheads

Mirage, with its larger tag store, experiences higher static leakage power when idle and consumes more energy per read/write access. Table 9 illustrates the static and dynamic power consumption for Mirage in 32nm technology, estimated using CACTI-6.0 [34]. This tool provides the energy per access and static leakage power for different cache organizations.

Our observations indicate that the Last-Level Cache (LLC) power is primarily influenced by static leakage power rather than dynamic power, consistent with previous CPU power modeling studies [16]. According to CACTI, the static power in Mirage increases by 3.5-4.1W (18%-21%) relative to the storage overheads. The dynamic power, calculated by multiplying the energy per access (from CACTI) by the total LLC accesses per second (from our simulations), shows a negligible increase of 0.02W on average. Overall, the increase in LLC power consumption of 4W (21%) in Mirage is relatively small compared to the overall chip power budget. Modern 8-core Intel/AMD CPUs have power budgets ranging from 95-140W [2].

**Table 9: Energy and Power Consumption for Mirage**

| Design       | Baseline | Mirage  | Mirage-Lite |
|--------------|----------|---------|-------------|
| **Energy / Access (nJ)** | 0.61     | 0.78    | 0.73        |
| **Dynamic Power (W)**    | 0.06     | 0.08    | 0.08        |
| **Static Leakage Power (W)** | 19.2    | 23.3   | 22.7        |
| **Total Power (W)**      | 19.3     | 23.4    | 22.8        |

# Logic Overheads

Mirage introduces additional logic for set-index computation using a randomizing hash function and FPTR-indirection during cache lookups. It also includes load-aware skew-selection and RPTR-indirection for tag invalidation on cache misses. Our synthesis results in 15nm technology show that the PRINCE-based randomizing hash function occupies an area of 5460 μm² or 27766 Gate-Equivalents (GE - number of equivalent 2-input NAND gates). The FPTR-indirection based lookup circuit requires 132 μm² or 670 GE. The load-aware skew-selection circuit, which counts the 1s among valid bits of 14 tags from the indexed set in each skew followed by a 4-bit comparison, requires 60 μm² or 307 GE. The RPTR-lookup circuit has a similar complexity to the FPTR-lookup. In total, all the extra logic, including the additional control state-machine, can fit in less than 35,000 GE, occupying a negligible area compared to the several million gates required for the LLC.

# Related Work

Cache design for reducing conflicts (for performance or security) has been an active area of research. In this section, we compare and contrast Mirage with closely related proposals.

## Secure Caches with High Associativity

The concept of cache location randomization for protecting against cache attacks was introduced almost a decade ago with RPCache [54] and NewCache [55], designed for L1 caches. These designs use an indirection table consulted on each cache access to map addresses to any cache location. While such designs are feasible for L1-Caches, they face practical challenges when extended to large shared LLCs. For instance, the indirection tables themselves need protection from conflicts if shared among different processes. RPCache mitigates this by maintaining per-process tables for the L1 cache, but this approach does not scale to the LLC, which may be used by hundreds of processes simultaneously. NewCache avoids conflicts among table entries by using a Content-Addressable-Memory (CAM) for a fully-associative design. However, this is impractical for LLCs with tens of thousands of lines due to high power overheads.

Phantom-Cache [51] installs an incoming line in one of eight randomly chosen sets in the cache, each with 16 ways, effectively increasing associativity to 128. This design, however, requires accessing 128 locations on each cache access, leading to a 67% power overhead [51]. Additionally, it is potentially vulnerable to future eviction set discovery algorithms as it selects a victim line from only a subset of the cache lines. In contrast, Mirage provides the security of a fully-associative cache where any eviction-set discovery is futile, with practical overheads.

HybCache [12] offers fully-associative mapping for a subset of the cache (1–3 ways) to make a subset of processes immune to eviction-set discovery. However, the authors note that "applying such a design to an LLC or a large cache in general is expensive" [12]. For example, implementing a fully-associative mapping in one way of the LLC would require parallel access to over 2000 locations per cache-lookup, significantly increasing cache power and access latency. Mirage, on the other hand, provides the security of a fully-associative design for the LLC with practical overheads, accessing only 24–28 locations per lookup.

## Cache Associativity for Performance

V-Way Cache [41], which inspired our design, uses pointer-based indirection and extra tags to reduce set-conflicts but does not eliminate them. V-Way Cache uses a set-associative tag-store, making it vulnerable to set-conflict-based attacks, similar to a traditional set-associative cache. Mirage builds on this design and incorporates skewed associativity and load-balancing skew-selection to ensure set-conflicts do not occur over the system's lifetime.

Z-Cache [45] increases associativity by generating a larger pool of replacement candidates using a tag-store walk and performing a sequence of line-relocations to evict the best victim. However, this design still selects replacement candidates from a small number of resident lines (up to 64), limited by the number of relocations it can perform at a time. As a result, a few lines can still form an eviction set, which could be learned by attacks. Mirage, however, selects victims globally from all lines in the cache, eliminating eviction-sets.

Indirect Index Cache [21] is a fully-associative design that uses indirection to decouple the tag-store from data-blocks and has a tag-store designed as a hash-table with chaining to avoid tag-conflicts. However, this design introduces variable latency for cache-hits and is not secure. Mirage also uses indirection but leverages extra tags and power-of-two choices based load-balancing to provide security by eliminating tag-conflicts and retaining constant hit latency.

Cuckoo Directory [15] enables high associativity for cache-directories by over-provisioning entries and using cuckoo-hashing to reduce set-conflicts. SecDir [62] also applies cuckoo-hashing to protect directories from conflict-based attacks [61]. However, cuckoo-hashing alone is insufficient for conflict-elimination. Such designs impose a limit on the maximum number of cuckoo relocations they attempt (e.g., 32), beyond which they still incur a Set-Associative Eviction (SAE). In comparison, load-balancing skew selection, the primary mechanism for conflict-elimination in Mirage, is more robust at eliminating conflicts as it can ensure no SAE is likely to occur over the system's lifetime with 75% extra tags.

## Isolation-based Defenses for Set-Conflicts

Isolation-based defenses aim to preserve victim lines in the cache and prevent conflicts with attacker lines. Previous approaches have partitioned the cache by sets [10, 42] or ways [26, 28, 54, 64] to isolate security-critical processes from potential adversaries. However, these approaches result in suboptimal usage of cache space and are unlikely to scale as the number of cores on a system grows (e.g., a 16-way cache for a 64-core system). Other mechanisms explicitly lock security-critical lines in the cache [25, 54] or leverage hardware transactional memory [17] or replacement policy [59] to preserve security-critical lines. These approaches require classification of security-critical processes by the user or the Operating System. In contrast, Mirage provides robust and low-overhead security through randomization and global evictions without relying on partitioning or OS-intervention.

# Conclusion

Shared LLCs are vulnerable to conflict-based attacks. Existing randomized LLC defenses continue to be broken with advances in eviction-set discovery algorithms. We propose Mirage as a principled defense against such attacks. Mirage provides the illusion of a fully-associative cache with random replacement, guaranteeing the eviction of a random line on every cache-fill that leaks no address information, for 10^4 to 10^17 years. Mirage achieves this strong security with a 2% slowdown and a modest area overhead of 17-20%, compared to a non-secure set-associative LLC. Thus, Mirage provides a significant safeguard against current eviction-set discovery algorithms and potentially against future advances.

# Acknowledgments

We thank Ananda Samajdar for help in setting up the RTL synthesis tool-chain. We also thank the anonymous reviewers and members of the Memory Systems Lab at Georgia Tech for their feedback. This work was supported in part by SRC/DARPA Center for Research on Intelligent Storage and Processing-in-memory (CRISP) and a gift from Intel. Gururaj Saileshwar is partly supported by an IISP Cybersecurity PhD Fellowship.

# References

[1] David H Albonesi. An architectural and circuit-level approach to improving the energy efficiency of microprocessor memory structures. In VLSI: Systems on a Chip, pages 192–205. Springer, 2000.
[2] AnandTech. Intel 9th Generation Power Consumption. https://www.anandtech.com/show/13400/intel-9th-gen-core-i9-9900k-i7-9700k-i5-9600k-review/21.
[3] Roberto Avanzi. The qarma block cipher family. Almost MDS matrices over rings with zero divisors, nearly symmetric even-mansour constructions with non-involutory central rounds, and search heuristics for low-latency s-boxes. IACR Transactions on Symmetric Cryptology, pages 4–44, 2017.
[4] Yossi Azar, Andrei Z Broder, Anna R Karlin, and Eli Upfal. Balanced allocations. SIAM journal on computing, 29(1):180–200, 1999.
[5] Daniel J. Bernstein. Cache-timing attacks on AES. 2005.
[6] David Biancolin, Sagar Karandikar, Donggyu Kim, Jack Koenig, Andrew Waterman, Jonathan Bachrach, and Krste Asanovic. FASED: FPGA-accelerated simulation and evaluation of DRAM. In Proceedings of the 2019 ACM/SIGDA International Symposium on Field-Programmable Gate Arrays, pages 330–339, 2019.
[7] Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K Reinhardt, Ali Saidi, Arkaprava Basu, Joel Hestness, Derek R Hower, Tushar Krishna, Somayeh Sardashti, et al. The gem5 simulator. ACM SIGARCH computer architecture news, 39(2):1–7, 2011.
[8] Rahul Bodduna, Vinod Ganesan, Patanjali SLPSK, Kamakoti Veezhinathan, and Chester Rebeiro. Brutus: Refuting the security claims of the cache timing randomization countermeasure proposed in CEASER. IEEE Computer Architecture Letters, 19(1):9–12, 2020.
[9] Julia Borghoff, Anne Canteaut, Tim Güneysu, Elif Bilge Kavun, Miroslav Knezevic, Lars R Knudsen, Gregor Leander, Ventzislav Nikov, Christof Paar, Christian Rechberger, et al. PRINCE—a low-latency block cipher for pervasive computing applications. In International conference on the theory and application of cryptology and information security, pages 208–225. Springer, 2012.
[10] Thomas Bourgeat, Ilia Lebedev, Andrew Wright, Sizhuo Zhang, and Srinivas Devadas. Mi6: Secure enclaves in a speculative out-of-order processor. In MICRO, 2019.
[11] Samira Briongos, Pedro Malagón, José M Moya, and Thomas Eisenbarth. Reload+ refresh: Abusing cache replacement policies to perform stealthy cache attacks. In 29th USENIX Security Symposium (USENIX Security 20), 2020.
[12] Ghada Dessouky, Tommaso Frassetto, and Ahmad-Reza Sadeghi. HybCache: Hybrid side-channel-resilient caches for trusted execution environments. In 29th USENIX Security Symposium (USENIX Security 20), 2020.
[13] Craig Disselkoen, David Kohlbrenner, Leo Porter, and Dean Tullsen. Prime+ abort: A timer-free high-precision L3 cache attack using Intel TSX. In 26th USENIX Security Symposium (USENIX Security 17), pages 51–67, 2017.
[14] John H. Edmondson, Paul I. Rubinfeld, Peter J. Bannon, Bradley J. Benschneider, Debra Bernstein, Ruben W. Castelino, Elizabeth M. Cooper, Daniel E. Dever, Dale R. Donchin, Timothy C. Fischer, et al. Internal organization of the Alpha 21164, a 300-MHz 64-bit quad-issue CMOS RISC microprocessor. Digital Technical Journal, 7(1), 1995.
[15] Michael Ferdman, Pejman Lotfi-Kamran, Ken Balet, and Babak Falsafi. Cuckoo directory: A scalable directory for many-core systems. In 2011 IEEE 17th International Symposium on High Performance Computer Architecture, pages 169–180. IEEE, 2011.
[16] Bhavishya Goel and Sally A McKee. A methodology for modeling dynamic and static power consumption for multicore processors. In 2016 IEEE International Parallel and Distributed Processing Symposium (IPDPS), pages 273–282. IEEE, 2016.
[17] Daniel Gruss, Julian Lettner, Felix Schuster, Olya Ohrimenko, Istvan Haller, and Manuel Costa. Strong and efficient cache side-channel protection using hardware transactional memory. In 26th USENIX Security Symposium (USENIX Security 17), pages 217–233, 2017.
[18] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and Stefan Mangard. Prefetch side-channel attacks: Bypassing SMAP and kernel ASLR. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 368–379, 2016.
[19] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. Flush+ flush: A fast and stealthy cache attack. In DIMVA, 2016.
[20] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. Cache template attacks: Automating attacks on inclusive last-level caches. In 24th USENIX Security Symposium (USENIX Security 15), pages 897–912, 2015.
[21] Erik G Hallnor and Steven K Reinhardt. A fully associative software-managed cache design. In Proceedings of 27th International Symposium on Computer Architecture, pages 107–116. IEEE, 2000.
[22] Julian Harttung. PRINCE Cipher VHDL implementation. https://github.com/huljar/prince-vhdl.
[23] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar.