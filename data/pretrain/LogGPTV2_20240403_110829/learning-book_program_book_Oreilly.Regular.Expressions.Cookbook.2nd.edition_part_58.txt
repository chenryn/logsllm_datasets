>
Regexoptions: ~ and S match at line breaks
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
This regex may look a bit cryptic, but it is very straightforward.  cannot be
matched. We do not need a word boundary before the word, because  to match the text. Either way, the question mark makes
the asterisk lazy, telling it to match as few characters as possible. The here document
should end at the first occurrence of the terminating word rather than the last occur-
rence. The file may have muliple here documents using the same terminating word,
and the lazy quantifier makes sure we match each here document separately.
(^> matches at the start of any line because we turmed on the option to make the caret
and dollar match at line breaks. Ruby does not have this option. Because the caret and
dollar always match at line breaks in Ruby, this does not change our solution. There is
just one less option to set.
2 is a backreference to the second capturing group. This group holds the word we
matched at the start of the here document. Because the here document syntax of our
scripting language is case sensitive, our regex needs to be case sensitive too. That’s why
tuming on case insensitivity. Backreferences also become case insensitive when the case
we used  or  and
insensitivity option is turned on.
Finally, another word boundary b) makes sure that the regex stops only if ′ match-
ed the word on its own, rather than as part of a longer word. We do not need a word
boundary before ?b>, as the caret has already made sure the word is at the start of the
line. Whenever \2) or the final \b) fail to match, the regex engine will backtrack and
let , *?> match more characters.
SeeAlso
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.4 explains that the dot matches any
character. Recipe 2.5 explains anchors such as the caret. Recipe 2.6 explains word
boundaries. Recipe 2.9 explains capturing groups, and Recipe 2.10 explains backre-
ferences. Recipe 2.12 explains repetition, and Recipe 2.13 explains how to make them
match as few characters as needed.
7.12 Common LogFormat
Problem
You need a regular expression that matches each line in the log files produced by a web
server that uses the Common Log Format.3 For example:
426 | Chapter 7: Source Code and Log Files
---
## Page 443
x13[0+90] -0
200 2326
The regular expression should have a capturing group for each field, to allow the ap-
plication using the regular expression to easily process the fields of each entry in the log.
Solution
^(?\5+)=\5+(?\5+)=\[(?[^\]]+)\]
+[6-0]/a11H（+[])（+[z-v]2)
*(?[0-9]{3})(?[0-9]+| -)
Regexoptions: ^~ and $ match at line breaks
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
^(?P\S+)=\S+(?P\S+)=\[(?P[^\]]+)]
”(?P[A-Z]+)(?P[^]+)?HTTP/[o-9.]+”
*(?P[0-9]{3})(?P[0-9]+1-)
Regexoptions: ^~ and $ match at line breaks
Regexflavers: PCRE 4, Perl 5.10, Python
(\S+)=S+(\S+)=[([^]]+)\]([A-Z]+)([]+)?HTTP/[0-9.]+”
（x[])([])=(-|+[6-0])=({}[6-0]）
Regexoptions: ^ and S match at line breaks
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Creating a regular expressions to match any entry in a log file generally is very straight
forward. It certainly is when the log format puts the same information in each entry,
just with different values. This is true for web servers that save access logs using the
Common Log Format, such as Apache. Each line in the log file is one log entry, and
each entry consists of seven fields, delimited with spaces:
1. IP address or hostname of the client that made the request.
2. RFC 1413 client ID. Rarely used. A hyphen indicates the client ID is not available.
3. The usermame when using HTTP authentication, and a hyphen when not using
HTTP authentication.
4. The time the request was received, between square brackets. Usually in the format
[day/month/year:hour:minute:second timezone] on a 24-hour clock.
5. The request, berween double quotes, with three pieces of information, delimited
by spaces:
a. The request method,4 such as GET, POST, or HEAD.
3. htrp/itpd.apuche.org/docs/carren/ogs.html
4. htp:/www.w.3.org/Protocolsrfc2616/fc2616-sc9.hnml
7.12 Commen Log Format | 427
---
## Page 444
b. The requested resource, which is the part of the URL. after the hostname used
for the request.
c. The protocol version, which is either HTTP/1.0 or HTTP/1.1.
6. The status code, which is a three-digit number such as 2oo (meaning *OK") or
404 (*not found°).
7. The size of the data retumed to the client, excluding the headers. This can be a
hyphen or zero if no response was returmned.
We don’t really need to know all these details to create a regular expression that suc-
cessfully matches each entry. We can assume that the web server will write only valid
information to the log. Our regular expression doesn’t need to filter the log by matching
only entries with certain values, because the application that uses the regular expression
wili do that.
So we really only need to know how the entries and fields are delimited. Then we can
match each field separately into its own capturing group. Entries are delimited by line
breaks, and fields are delimited by spaces. But the date and request fields can contain
spaces, so we'll need to handle those two with a bit of extra care.
The first three fields cannot contain spaces. We can easily match them with the short-
hand character class *^5+), which matches one or more characters that are not spaces
or line breaks. Because the client ID is rarely used, we do not grab it with a capturing
group.
The date field is always surrounded by square brackets, which are metacharacters in a
regular expression. To match literal brackets, we escape them: \[> and ^]. Strictly
speaking, the closing bracket does not need to be escaped outside of a character class
But since we will put a character class berween the literal brackets, escaping the closing
bracket makes the regex easier to read. The negated character class [^\]]+ matches
one or more characters that are not closing brackets. In JavaScript, the closing bracket
must be escaped to include it as a literal in a character class. The other flavors do not
require the closing bracket to be escaped when it immediately follows the opening
bracket or negating caret, but we escape it anyway for clarity. W'e put the parentheses
around the negated character class, between the escaped literal brackets: . The
data size is a number or a hyphen, easily matched with [o-9]+|. The capturing group
takes care of grouping the rwo alternatives.
match after line breaks, to make sure that we start matching each log entry at the start
We put a caret at the start of the regular expression and turm on the option to make it
of the line. This willsignificantly improve the performance of the regular expression in
the off chance that the log file contains some invalid lines. The regex will attempt to
match such lines only once, at the start of the line, rather than at every position in the
line.
We did not put a dollar at the end of the line to force each log entry to end at the end
of a line. If a log entry has more information, the regex simply ignores this. This allows
our regular expression to work equally well on extended logs such as the Combined
Log Format, described in the next recipe.
Our final regular expression has eight capturing groups. To make it easy to keep track
of the groups, we use named capture for the flavors that support it. JavaScript (without
XRegExp) and Ruby 1.8 are the only rwo flavors in this book that do not support named
capture. For those flavors, we use numbered groups instead.
Variations
^(?\S+)=\5+(?\5+)=\[(?[0-9]{2})/(?
[A-Za-z]+)/(?[0-9]{4}):(?[0-9]{2}) : (?[0-9]{2}) : 
(?[0-9]{2})=(?[-+][0-9]{4})\]="(?[A-Z]+)
*+[6-0]/d1IH(][#]）(+[#])
?[0-9]{3}) (?[0-9]+|-)
Regexoptions: ~ and S match at line breaks
Regexflarer: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
(?P\S+)=\S+=(?P\5+)=\[(?P[0-9]{2})/(?P
[A-Za-z]+)/(?P[0-9]{4}) : (?P[0-9]{2}) : (?P[0-9]{2}): 
(?P[0-9]{2}）=(?P[-+][0-9]{4})\]="(?P[A-Z]+)
*+[*6-o]/1H([][#]）(+[#]<>)
?P[0-9]{3})=(?P[0-9]+|-)
Regexoptions: ^~ and $ match at line breaks
Regexflavers: PCRE 4, Perl 5.10, Python
(\S+) \S+(\S+) \[{[0-9]{2})/([A-Za-z]+)/([0-9]{4}):([0-9]{2}):
([#][*]*)？ HTTP/[0-9.]+”([0-9]{3})([0-9]+|-)
（+[。#]）（+[z-v]).[\5+)=\5+(?\5+)=\[(?[^\]]+)\]
”(?[A-Z]+) (?[^*]+)?HTTP/[o-9. ]+”
([])(-|+[6-0])({}[6-0]）
(*[])
Regexoptions: ~ and S match at line breaks
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
^(?P\S+)\S+(?P\S+)=\[(?P[^\]]+)\]
”(?P[A-Z]+)(?P[^"]+)?HTTP/[o-9.]+”
(?P[0-9]{3})=(?P[0-9]+|-)="(?P[^]*)*
(x[]d）
6. bsrpv/fetpd.apuc/e.org/docs/carrent/ogs.html
sa bonpue apo aunos agdeup 10
---
## Page 447
Regexoptions: ^ and $ match at line breaks
Regexflaver: PCRE 4, Perl 5.10, Python
+[6-0]/LIH（+[])=（+[z-])=[\（+[[\])]（+s）+s\（+s\）
（x[]).（]）（x[]）（x[]）（-1+[6-0]）=（{∈}[6-0]）
Regexoptions: ~ and $S match at line breaks
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
The Combined Log Format is the same as the Common Log Format, but with two extra
fields added at the end of each entry, and the first extra field is the referring URL. The
second extra field is the user agent. Both appear as double-quoted strings. We can easily
0s ([] aq punoe dno8 Buumdeo e nd  “ ]> m suas asou qpeu
that we can easily retrieve the referrer or user agent without the enclosing quotes.
See Also
The previous recipe explains how to match each entry in a Common Log Format web
server log.
7.14Broken Links Reported in Web Logs
Problem
You have a log for your website in the Combined Log Format. You want to check the
log for any errors caused by broken links on your own website.
Solution
“(?:GET|P0ST)(?[^#?*]+)(?:[#][^"]*)?HTTP/[0-9-]+404
? : [0-9]+| -)=*(?http: //ww\-yoursite\-con[^"]*)*
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
"(?:GET |P0ST) (?P[^#?"]+)(?:[#?][^]*)?HTTP/[0-9. ]+”404
(Jusno\/ /:dd)(1+[6])
Regex options: None
Regexflavers: PCRE 4, Perl 5.10, Python
*0++[6-0]/d1IH（[][\S+)=\5+(?\5+)\[(?[^\]]+)\]
(ot)+[*6-0]/d1IH(+[]）=(+[z-]）
([]usxno// :)(+[6-o])
（*[])
Regexoptions: ^ and S match at line breaks
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
The regular expression just shown already solves the problem. But it is not as efficient
as it could be. It matches the entire log entry, but we only need the *request,* *status,
and *referrer” groups. The “useragent” group does not affect the match at all, so we
can easily cut that off:
^(?\S+)=\S+(?\S+)=\[(?[^\]]+)\]
*(+ot)+[*6-o]/d1IH(+[])(+[z-v])
([usxno//:）(1+[6-0]）
Regexoptions: ~ and S match at line breaks
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
We cannot cut off the groups *client” through *method* so easily. These groups anchot
the regex to the start of the line, making sure that the *request” through “referrer"
432 | Chapter 7: Source Code and Log Files
---
## Page 449
groups match the rightfields in the log. If we want to remove some of the groups at the