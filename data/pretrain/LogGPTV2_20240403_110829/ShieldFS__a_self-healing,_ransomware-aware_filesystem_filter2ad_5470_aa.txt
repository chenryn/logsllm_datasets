title:ShieldFS: a self-healing, ransomware-aware filesystem
author:Andrea Continella and
Alessandro Guagnelli and
Giovanni Zingaro and
Giulio De Pasquale and
Alessandro Barenghi and
Stefano Zanero and
Federico Maggi
ShieldFS: A Self-healing, Ransomware-aware Filesystem
Andrea Continella
PI:EMAIL
Alessandro Guagnelli
PI:EMAIL
Giovanni Zingaro
PI:EMAIL
Giulio De Pasquale
PI:EMAIL
Alessandro Barenghi
PI:EMAIL
Stefano Zanero
PI:EMAIL
Federico Maggi
PI:EMAIL
DEIB, Politecnico di Milano, Milan, Italy
ABSTRACT
1
INTRODUCTION
Preventive and reactive security measures can only partially
mitigate the damage caused by modern ransomware attacks.
Indeed, the remarkable amount of illicit proﬁt and the cyber-
criminals’ increasing interest in ransomware schemes suggest
that a fair number of users are actually paying the ransoms.
Unfortunately, pure-detection approaches (e.g., based on
analysis sandboxes or pipelines) are not suﬃcient nowadays,
because often we do not have the luxury of being able to
isolate a sample to analyze, and when this happens it is
already too late for several users! We believe that a forward-
looking solution is to equip modern operating systems with
practical self-healing capabilities against this serious threat.
Towards such a vision, we propose ShieldFS, an add-on
driver that makes the Windows native ﬁlesystem immune to
ransomware attacks. For each running process, ShieldFS
dynamically toggles a protection layer that acts as a copy-on-
write mechanism, according to the outcome of its detection
Internally, ShieldFS monitors the low-level
component.
ﬁlesystem activity to update a set of adaptive models that
proﬁle the system activity over time. Whenever one or
more processes violate these models, their operations are
deemed malicious and the side eﬀects on the ﬁlesystem are
transparently rolled back.
We designed ShieldFS after an analysis of billions of
low-level, I/O ﬁlesystem requests generated by thousands of
benign applications, which we collected from clean machines
in use by real users for about one month. This is the ﬁrst
measurement on the ﬁlesystem activity of a large set of
benign applications in real working conditions.
We evaluated ShieldFS in real-world working conditions
on real, personal machines, against samples from state of the
art ransomware families. ShieldFS was able to detect the
malicious activity at runtime and transparently recover all
the original ﬁles. Although the models can be tuned to ﬁt
various ﬁlesystem usage proﬁles, our results show that our
initial tuning yields high accuracy even on unseen samples
and variants.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
© 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991110
Ransomware [20] is a class of malware that encrypts valuable
ﬁles found on the victim’s machine and asks for a ransom to
release the decryption key(s) needed to recover the plaintext
ﬁles. The requested ransom payment is typically in the
order of a few hundreds US dollars [13] (or equivalent in
crypto or otherwise untraceable currency [15]). Clearly, the
success of these attacks depends on whether most of the
victims agree to pay (e.g., because of the fear of losing
their data). Unfortunately, according to a thorough survey
dated November 2015 [2], about 50 percent of ransomware
victims had surrendered to the extortion scheme, resulting in
million of dollars of illicit revenue. In March 2014, Symantec
estimated that the Cryptowall gang has earned more than
$34,000 in its ﬁrst month of activity. In June 2015, the FBI’s
Internet Crime Complaint Center [3] reportedly received
992 Cryptowall-related complaints between April 2014 and
June 2015, totaling $18M worth of losses. In the ﬁrst three
months of 2016, according to a recent analysis [11], more
than $209 million in ransomware payments were made in
the US alone. From a technical viewpoint, ransomware
families are now quite advanced. While ﬁrst-generation
ransomware were cryptographically weak, the recent families
encrypt each ﬁle with a unique symmetric key protected
by public-key cryptography. Consequently, the chances of
a successfully recovery (without paying the ransom) have
drastically decreased [16, 8].
Problem Statement and Vision. Kharraz et al. [7] were
the ﬁrst to analyze a large corpus of ransomware samples.
The authors suggest that the ﬁlesystem is a strategic point
for monitoring the typical ransomware activity. In this pa-
per, we set the next research objective: Creating a forward-
looking ﬁlesystem that transparently prevents the eﬀects of
ransomware attacks on the data. We make a step toward
such vision by proposing, implementing and evaluating an
approach that combines automatic detection and transparent
ﬁle-recovery capabilities at the ﬁlesystem level, all combined
in a ready-to-use Windows driver.
Preliminary Feasibility Assessment. Our ﬁrst goal is
to understand how ransomware compares to benign soft-
ware from the ﬁlesystem’s viewpoint. We start by analyzing
in-depth how benign software typically interacts with the
ﬁlesystem on real-world computers. We use the I/O request
packets (IRPs) as the focal point of our analysis, as IRPs
are the basic data units originating from high-level opera-
tions (e.g., read ﬁle, open ﬁle). In practice, we performed
the ﬁrst large-scale data collection of IRPs from real-world,
ransomware-free machines, to proﬁle the low-level ﬁlesystem
activity in normal conditions. To this end, we developed
IRPLogger, a data-collection agent that we installed on 11
machines used by volunteers for their typical day-to-day tasks
(i.e., personal, oﬃce, and development). We anonymized and
collected about a month worth of data, gathering more than
1.7 billion IRPs generated by 2,245 distinct applications (we
will made this data available to other researchers). Using this
collected data as a reference, we populated a set of analysis
machines with ﬁles and directory trees such that they resem-
ble the typical ﬁlesystem organization and content observed
in the 11 real-world machines. This step is essential to create
a realistic environment such that to trigger the ransomware
attacks. We then used IRPLogger to monitor the ﬁlesystem
on such machines infected by state of the art ransomware
samples.
Proposed Approach. Our preliminary assessment guided
us to design a detection system based on the combined
analysis of entropy of write operations, frequency of read,
write, and folder-listing operations, dispersion of per-ﬁle
writes, fraction of ﬁles renamed, and the ﬁle-type usage
statistics. Our approach is to automatically create detection
models that distinguish ransomware from benign processes
at runtime ShieldFS adapts these models to the ﬁlesystem
usage habits observed on the protected system. Additionally,
ShieldFS looks for indicators of the use of cryptographic
primitives. In particular, ShieldFS scans the memory of
any process considered as “potentially malicious,” searching
for traces of the typical block cipher key schedules.
A distinctive aspect of ShieldFS is how it copes with code
injection, a common technique used by modern ransomware
(as well as other malware). With code injection, a perfectly
legitimate process suddenly executes malicious code. Our
detection mechanism takes into account both the long- and
the short-term history of each process, and of the entire
system. Indeed, we are agnostic with respect to how the
infection has bootstrapped (e.g., malicious executable, remote
code execution) and on the availability of the executable.
Rather, we focus on the runtime eﬀects on the target system.
In fact, as observed in [19], the activity of modern malware
can span across multiple process and OS facilities, and, more
importantly, an isolated sample to analyze is a luxury in early
stage of spreading campaigns. Therefore, detection systems
should not assume that a binary executable is available.
We apply our detection approach in a real-time, self-healing
virtual ﬁlesystem that shadows the write operations. Thus,
if a ﬁle is surreptitiously altered by one or more malicious
processes, the ﬁlesystem presents the original, mirrored copy
to the user space applications. This shadowing mechanism
is dynamically activated and deactivated depending on the
outcome of the aforementioned detection logic. Figure 1
depicts the logical activity of ShieldFS in comparison with
a traditional ﬁlesystem.
Experimental Results Summary. We evaluated ShieldFS
on 688 samples from 11 distinct families, showing that it
can successfully protect user data from real-world attacks
performed by recent, state-of-the-art malware families. The
system exhibited remarkable accuracy and generalization
capabilities even when evaluated via cross-validation on the
large dataset that we collected from the 11 real-world ma-
chines. Also, we installed ShieldFS on the personal machines
in use by 3 volunteers, on which it correctly identiﬁed ran-
somware processes, and successfully reverted their eﬀects.
Figure 1: On the right ShieldFS shadowing a ﬁle oﬀended
by ransomware malicious write (MW), in comparison to
standard ﬁlesystems (on the left).
The performance impact of our prototype implementation is
such that ShieldFS is applicable in real-world settings.
Summary of Original Contributions.
• We performed the ﬁrst, large-scale data collection of
I/O request packets generated by benign applications in
real-world conditions. Our dataset contains about 1.7
billion IRPs produced by 2,245 diﬀerent applications.
• We propose a ransomware-detection approach that en-
ables a modern operating system to recognizing the
typical signs of ransomware behaviors.
• We propose an approach that makes a modern ﬁlesys-
tem resilient to malicious encryption, by dynamically
reverting the eﬀects of ransomware attacks.
• We implemented these approaches as a drop-in, Win-
dows kernel module that we showed capable of success-
fully protecting from current ransomware attacks.
In the spirit of open science, we release our datasets and the
source code of ShieldFS at http://shieldfs.necst.it.
2 LOW-LEVEL I/O DATA COLLECTION
To understand how ransomware typically interact with the
ﬁlesystem in comparison to benign applications, the main
challenge is to be able to observe them in their usual working
conditions (e.g., on a victim’s machine). Since there is no
such recent data for this purpose, we collected it from real,
operational desktop computers for several weeks. First, this
provided us with a real-world reference “picture” of how ﬁles
and folders are organized in a typical computer, which is
useful to reproduce an environment that triggers the ran-
somware activity. Secondly, this approach provided us with
a large dataset of ﬁlesystem access patterns originating from
benign applications while exercised by real-user interactions.
This is essential to verify whether ransomware and benign
applications interact with the ﬁlesystem in a signiﬁcantly
diﬀerent way that could be leveraged for detection.
To carry out our analysis, we developed IRPLogger, a low-
level I/O ﬁlesystem sniﬀer, which we installed on real-world
machines in use by 11 volunteers. We can categorize the
participants as “home,” “developer,” or “oﬃce” users. As
summarized in Table 1, we collected 28.2 GB of compressed
and anonymized data, corresponding to 1,763 million IRPs.
2.1 Filesystem Sniffer Details
At the ﬁrst boot, IRPLogger traverses the directory tree
of each mounted drive to collect metadata including total
Ransom-wareApp 2App 1File 1FSFile 2offendedfileWRWRencrypteddataRansom-wareApp 2App 1File 1ShieldFSFile 2offendedfileBWRMW Rdecoy1decoy2File 2copynumber of ﬁles, number of ﬁles per extension, and direc-
tory depth. The core of IRPLogger is a miniﬁlter driver [5]
that intercepts the I/O requests generated for each ﬁlesys-
tem primitive invoked by userland code (e.g., CreateFile,
WriteFile, ReadFile). IRPLogger enriches the raw IRPs
with data including timestamp, writes entropy, and PID. An
example log entry (before anonymization) is as follows (a
longer version is in Appendix A):
When run on the participants’ machines, IRPLogger mini-
mizes and hashes any privacy-sensitive data such as the ﬁle
names and paths. We keep the extension of the accessed ﬁles
in clear, as this detail is needed for computing per-type ﬁle
statistics and features. Before collection, the logs are split
into sessions and compressed for space eﬃciency.
2.2 Ransomware Activity Data Collection
We leveraged IRPLogger also to collect ransomware activity
data. During December 2015 we used the VirusTotal Intelli-
gence API to obtain the most recent Windows executables
consistently labeled with the main ransomware families (i.e.,
CryptoWall, TeslaCrypt, Critroni, CryptoDefense, Crowti).
We manually ran each sample to ensure that it was fully and
properly working (e.g., some samples did not receive instruc-
tions and public encryption keys from the attacker’s control
servers), so obtaining the 383 active ransomware samples
summarized in Table 2.
Then, we prepared a set of virtual machines on which we ac-
tivated IRPLogger running on top of Windows 7 (64-bit). We
installed common utilities such as Adobe Reader, Microsoft
Oﬃce, alternative Web browsers, and media players. To
create a legitimate-looking system, we included typical user
data such as saved credentials, browser history, and realistic
decoy ﬁles (e.g., images, documents), such that to trigger the
samples. We used real ﬁles—collected by randomly crawling
web search-engines results—reﬂecting ﬁle-type and directory
tree distribution of the aforementioned 11 clean machines.
At runtime, our analysis environment emulates basic user
activity (e.g., moving the mouse, launching applications).
Following the best practices for malware experiments sug-
gested by [12], (1) we let the malware executables run for 90
minutes, (2) we allowed the samples to communicate with
their control servers, and (3) denied any potentially harmful
traﬃc (e.g., spam) during the experiments. For the sake
of scientiﬁc repeatability, we are open to provide access to
(or the implementation details of) our analysis environment.
After each execution, we saved the IRP logs and rolled back
each virtual machine to a clean snapshot.
Table 1: Statistics of the collected low-level I/O data
from 11 real-world machines during normal usage.
User Win. Usage Data #IRPs #Procs Apps Period Data Rate
[MB/min]
[GB]
ver.
Mln.
Mln.
[hrs]
1 10
2 8.1
3 10
4 7
5 7
6 10
7 8.1
8 8.1
9 8.1
10 7
11 7
dev
home
oﬃce
home
home
dev
dev
home
home
home
oﬃce
Total
3.4
2.4
0.9
4.7
2.2
1.8
0.8
0.8
7.7
0.9
2.6
230.8
132.1
54.2
279.9
138.1
100.4
49.0
43.9
501.8
57.6
175.2
16.60 317
9.67 132
5.56 225
18.70 255
5.04 141
10.30 225
3.28 166
6.33 148
24.20 314
2.63 151
4.69 171
28.2 1,763.0
107.00 2245
34
87
17
122
47
35
8
32
215
18
28
643
7.85
2.04
0.83
5.18
4.10
2.42
5.62