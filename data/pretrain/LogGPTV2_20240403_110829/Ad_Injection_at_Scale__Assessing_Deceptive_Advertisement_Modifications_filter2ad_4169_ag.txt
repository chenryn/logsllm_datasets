10%
10%
5%
4%
4%
68%
Avg
Hops
3.3
2.9
2.9
5.1
4.3
3.8
10.5
9.4
10.4
10.9
10.5
8.7
2.2
5.8
1.1
4.2
5.4
5.4
Distinct
Intermediaries
3
6
3
13
11
4,613
13
18
15
11
18
7,146
60
30
6
15
15
10,692
Table X: Top 5 advertisers terminating our revenue chains, broken
down per injected ad domain.
advertisers. Sears and Walmart, whom we observe impacted
by all three top injected ad domains, receive 8–29% of our
synthetic trafﬁc from each injector. Other popular brands that
are impacted include Ebay, Target, Wayfair, and Overstock—
all online retailers that specialize in selling consumer products.
Although the remaining set of over 3,000 advertisers is heavy-
tailed, the top 20 advertisers represent a signiﬁcant bottleneck,
receiving 50% of advertising clicks. Our results highlight that
major brands are negatively impacted by ad injection, of which
our results only reveal a subset. In particular, our current
coverage is biased towards businesses whose product catalogs
heavily overlap with Amazon, Walmart, and Google due to
the popular product queries we evaluate.
C. Awareness of Advertisers and Intermediaries
We examine the degree of information that advertisers and
intermediaries receive about
the provenance of ad trafﬁc.
To conduct our analysis, we automatically extract encoded
“afﬁliate IDs” embedded in each URL tied to injected ad
trafﬁc for the top ﬁve advertisers and intermediaries. These
afﬁliate IDs indicate which ad network acquired trafﬁc for
which advertiser (facilitating payment and auditing in the ad
ecosystem).
We observe that all of the top ﬁve advertisers in our dataset
have knowledge of their immediate ad relationships (e.g., the
previous referrer in revenue chains). Beyond this previous
hop visibility, we ﬁnd only one set of revenue chains that
include more granular provenance information. target.com and
other brands who syndicate advertisements to channelintelli-
gence.com are provided sub-syndication afﬁliate parameters
such as “pronto df” and “pricegrabber df”. These values
reveal that trafﬁc previously originated from pronto.com and
pricegrabber.com before arriving at channelintelligence.com.
Beyond this exception, we never ﬁnd evidence that advertisers
obtain ﬁner-grained provenance information that could help
them ﬁlter trafﬁc deceptively sourced from ad injection. There
is always at least one intermediary between the ad injector and
advertiser that omits afﬁliate IDs tied to injectors.
The story for the top intermediaries in our dataset
is
different. In particular, we ﬁnd that intermediaries that share
an immediate connection to ad injectors frequently assign
a consistent afﬁliate ID that uniquely indicates an injection
library. For some intermediaries this afﬁliate ID even includes
the injection library’s domain name. This consistent label-
ing suggests these early intermediaries have formal business
relationships with ad injection entities, or at the very least,
awareness of when trafﬁc originates from an ad injector. As a
result, programs like DealTime, PriceGrabber, and ShopZilla
(detailed previously in Table IX) are best positioned to detect
and disincentivize deceptively sourced ads. They serve as the
single critical bottleneck before ad injection trafﬁc enters the
ad ecosystem and becomes indistinguishable from legitimate
consumer interest. Following our analysis, we have begun to
reach out to these major intermediaries as well as the brands
impacted by ad injection to alert them of the possibility of
receiving ad injection trafﬁc.
VII. CASE STUDIES OF NOVEL AD INJECTORS
We conclude our analysis of the ad injection ecosystem with
several in-depth case studies that highlight the ﬁnancial incen-
tives and novel technical capabilities of individual injectors.
Superﬁsh: Superﬁsh is a VC-backed startup located in Palo
Alto with research and development in Israel. The company
reported earnings of $135K in 2010 and $35M in 2013 [16].
The company focuses on visual search offerings with the goal
of displaying advertisements for similar products as clients
browse the web. Superﬁsh runs its afﬁliate program via simi-
larproducts.net, which provides a single line of JavaScript that
afﬁliates embed in browser trafﬁc for drop-in monetization.
164164
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
The script has code to support injection into 16,925 web-
sites, presenting additional product advertisements for each
supported page. On Google, this yields a bar of images that
appears above organic search results. For Amazon, Superﬁsh
displays additional products at the bottom of the visible screen
area. For other pages, Superﬁsh displays ads as ﬂy-in banners.
In order to fetch advertisements, the Superﬁsh script sends
a request to superﬁsh.com along with a merchantName that
indicates the domain the request originates from (e.g., Google);
documentTitle and pageUrl that reports every site a user
visits; and language, country, and ip parameters. In re-
sponse, superﬁsh.com returns a list of images, prices, and
URLs that the script then injects into the client’s DOM. Per
our clickchain analysis, we ﬁnd these ads are predominantly
supported by pgpartners.com, bizrate.com, and dealtime.com.
Visadd: Visadd, registered at visadd.com under an anonymiza-
tion service Domains By Proxy, steadily rose in prominence
from 0.5% of page views at the start of our measurement to
1.4% at the time of writing. Like other ad injectors, Visadd
maintains a blacklist of properties it avoids tampering with, in-
cluding google.com, facebook.com and ads.yahoo.com.9 Out-
side these safezones, the script scans for speciﬁc keywords
including “add to basket”, “free shipping”, and “product
review” in multiple languages. If found, the script fetches
additional payloads to inject advertisements. Beyond Visadd’s
injection capabilities, we found the script adds event listeners
to every link on a page to remotely report user clicks and
surﬁng behavior. When we visited the Visadd website, we
came upon an option to uninstall the Visadd injector. However,
at the time of writing, all that happens is a call to function
donothing(){};.
Jsutils, Jscripts, & Webpagescripts: Not all of the ad injection
scripts we observe belong to a single identiﬁable company. In
fact, we observe at least four scripts whose sole purpose is to
provide drop-in support for several ad injectors simultaneously.
We refer to these scripts as meta-injectors. Examples in
our dataset
jscripts.org and
webpagescripts.net. Each of these scripts deliver support for
17 distinct ad injection afﬁliate programs, including jollywal-
let.com, tfxiq.com, visadd.com and adultadworld.com; some of
the most popular programs we encounter in tampered DOMs.
These meta-injectors maximize the value of injected traf-
ﬁc by supporting both cost-per-click and cost-per-acquisition
models. On top of that, the presence of pornographic-oriented
injection libraries makes up for other injection libraries that
blacklist sexually explicit websites to adhere to commercial ad
exchange policies. This proﬁt maximization has many levels,
where we ﬁnd that tfxiq.com is conﬁgured to fall back onto
yet another round of intermediaries, including adcash.com and
viglink.com, if Tfxiq’s primary ad relationships fail to provide
ad content. The end result is a browsing experience where
essentially no matter what action a user takes, ad injectors
can proﬁt.
include jsutils.net,
jsutils.com,
9We note that Visadd scripts still appear in client trafﬁc on google.com and
other sites; they merely remain dormant and avoid injecting ads.
165165
VIII. RELATED WORK
Fraud and Abuse in the Ad Ecosystem: Prior work has exten-
sively explored the problem of outright fraud and abuse in ad
networks. In particular, research has focused on the evolution
of botnets towards ad related clickfraud monetization [1], [25]
and the impact of botnet interventions on abusive ad trafﬁc [6],
[26]. Other forms of abuse include the failures of current
ad exchanges to detect distributed clickfraud [33], the ability
for compromised routers and opportunistic ISPs to inject ads
into users’ trafﬁc [29], [34], and the market for impression
fraud via ads hidden underneath other content or served in
invisible windows [32]. In response, researchers have proposed
an array of solutions that attempt to detect fraudulent ad trafﬁc
via bluff ads or anomaly detection [9], [10], [15], [17]. We
believe future research should pay similar attention to the
ad injection afﬁliate ecosystem in the event malware authors
become afﬁliates (of which we ﬁnd initial evidence in our
work) and the possibility of ad injectors serving pop-under or
hidden ads that defraud exchanges.
A sister problem to ad fraud is the emergence of mali-
cious advertisements that leverage ad trafﬁc to fuel malware
installs [14]. Of the Alexa Top 90,000, Li et al. found 1% of
pages served malicious advertisements [24]. While Dong et al.
proposed browser conﬁnement schemes that allow publishers
to load ads in restricted sandboxes [11], it falls on publishers
to adopt such technologies, which are not yet readily available.
Furthermore, while publishers can selectively source creatives
from trustworthy ad exchanges to protect their brand, the
presence of ad injectors in a user’s browsing session place
all such discretion solely into the hands of the injector.
Detecting Website Content Modiﬁcations: Our approach for
detecting ad injection draws on a history of proposed remote
veriﬁcation and enforcement techniques. In the closest work
to our own, Reis et al. propose a technique for client-side
veriﬁcation of a webpage’s integrity called “web tripwires”
[29]. The core idea is for publishers to include an additional
piece of JavaScript in their webpages that checks if the client-
rendered DOM content matches what publishers expect on
their website. In both our and Reis’s solution, it remains up to
developers to contend with highly dynamic content. Similarly,
both schemes suffer from a lack of a trusted communication
channel; as a result, adversaries with sufﬁcient privileges
can strip out integrity veriﬁcation code and spoof a valid
response. Seshadri et al. proposed a technique for untampered
code execution on legacy systems [31], but whether such
a technique can be extended to browser kernels to protect
execution in the presence of malicious extensions (as well as
malicious binaries) remains an open challenge.
IX. CONCLUSION
In this paper we presented a detailed investigation into the
negative impact of ad injection and the ecosystem that supports
it. We found that ad injection has entrenched itself as a cross-
browser monetization platform impacting more than 5% of
unique daily IP addresses accessing Google—tens of millions
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
of users around the globe. Injected ads arrive on a client’s
machine through multiple unwanted and malicious vectors,
with our measurements identifying 50,870 Chrome extensions
and 34,407 Windows binaries, 38% and 17% of which are
explicitly malicious. As part of our analysis, we alerted the
Chrome Web Store of 192 deceptive ad injection extensions
with 14 million user; the Chrome Web Store has since disabled
the extensions. Finally, we determined that ad injectors ulti-
mately derive a proﬁt by delivering deceptively sourced trafﬁc
to over 3,000 brands. This trafﬁc enters the ad ecosystem
through a small bottleneck of e-commerce networks. We have
since reached out and alerted the advertisers and intermediaries
impacted by ad injectors.
In closing, we argue there is no simple solution for combat-
ing deceptive ad injection. Intermediaries, website owners, and
browser developers all share an important role. In particular,
the handful of e-commerce sites who share relationships with
ad injectors are the best positioned to prohibit deceptively
sourced trafﬁc and disincentivize the ad injection ecosystem as
a whole. For example, Google’s ad exchanges expressly pro-
hibit sourcing trafﬁc from ads inserted into websites without
the site owner’s consent [12]. For website owners, developers
can measure their own ad injection levels by executing our
client-side measurement, or go one step further and pre-
vent or revert DOM modiﬁcations produced by ad injectors.
Equally important, if websites switched to HSTS it would
prevent network providers and HTTP-only binary proxies
from intercepting and tampering with client trafﬁc. Finally,
browser developers must harden their environments against
side-loading extensions or modifying the browser environment
without user consent. Combined, these strategies represent a
breadth of technical and ﬁnancial countermeasures to combat
deceptive ad injection.
X. ACKNOWLEDGEMENTS
We thank Petr Marchenko and Aaseesh Marina for in-
sightful feedback and support in developing our ad injection
analysis pipeline. This work was supported in part by the
National Science Foundation under grants 1213157, 1237265,
and 1237076; by the Ofﬁce of Naval Research MURI grant
N000140911081 and N000141210165; by the U.S. Army
Research Ofﬁce MURI grant W911NF0910553; and by a
gift from Google. Any opinions, ﬁndings, and conclusions
or recommendations expressed in this material are those of
the authors and do not necessarily reﬂect the views of the
sponsors.
REFERENCES
[1] Sumayah A Alrwais, Alexandre Gerber, Christopher W Dunn, Oliver
Spatscheck, Minaxi Gupta, and Eric Osterweil. Dissecting Ghost Clicks:
Ad Fraud via Misdirected Human Clicks. In Proceedings of the 28th
Annual Computer Security Applications Conference, pages 21–30. ACM,
2012.
[2] Amazon. Best Sellers Amazon Best Sellers. http://www.amazon.com/
Best-Sellers/zgbs, 2014.
[3] Adam Barth, Adrienne Porter Felt, Prateek Saxena, and Aaron Boodman.
Protecting Browsers from Extension Vulnerabilities. In NDSS. Citeseer,
2010.
[4] Nico Black. Superﬁsh Afﬁliate Summit East. https://www.linkedin.com/
groups/Superﬁsh-Afﬁliate-Summit-East-4376214.S.263442122, 2014.
[5] Juan Caballero, Pongsin Poosankam, Christian Kreibich, and Dawn
Song. Dispatcher: Enabling Active Botnet Inﬁltration Using Automatic
Protocol Reverse-Engineering. In Proceedings of the ACM Conference
on Computer and Communications Security, Chicago, IL, November
2009.
[6] Chia Yuan Cho, Juan Caballero, Chris Grier, Vern Paxson, and Dawn
Song. Insights From the Inside: A View of Botnet Management from
Inﬁltration. In USENIX Workshop on Large-Scale Exploits and Emergent
Threats (LEET), 2010.
[7] Devin Coldewey.
Marriott
Injection
Ad
marriott-puts-an-end-to-shady-ad-injection-service/, 2014.
Service.
Puts An
Shady
http://techcrunch.com/2012/04/09/
End
To
[8] Neil Daswani and Michael Stoppelman. The Anatomy of Clickbot. A.
In Proceedings of the ﬁrst conference on First Workshop on Hot Topics
in Understanding Botnets, 2007.
[9] Vacha Dave, Saikat Guha, and Yin Zhang. Measuring and ﬁngerprinting
click-spam in ad networks. In Proceedings of the ACM SIGCOMM 2012
conference on Applications, technologies, architectures, and protocols
for computer communication, pages 175–186. ACM, 2012.
[10] Vacha Dave, Saikat Guha, and Yin Zhang. ViceROI: Catching Click-
spam in Search Ad Networks. In Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security, pages 765–776.
ACM, 2013.
[11] Xinshu Dong, Minh Tran, Zhenkai Liang, and Xuxian Jiang. Ad-
Sentry: Comprehensive and Flexible Conﬁnement of JavaScript-based
Advertisements. In Proceedings of the 27th Annual Computer Security
Applications Conference, pages 297–306. ACM, 2011.
[12] DoubleClick. Google DoubleClick Ad Exchange (AdX) Seller Program
http://www.google.com/doubleclick/adxseller/guidelines.
Guidelines.
html, 2014.
[13] George W. Dunlap, Samuel T. King, Sukru Cinar, Murtaza Basrai, and
Peter M. Chen. ReVirt: Enabling Intrusion Analysis through Virtual-
Machine Logging and Replay. In Proceedings of the 2002 Symposium
on Operating Systems Design and Implementation (OSDI), pages 211–
224, December 2002.
[14] Sean Ford, Marco Cova, Christopher Kruegel, and Giovanni Vigna.
Analyzing and detecting malicious ﬂash advertisements. In Computer
Security Applications Conference, 2009. ACSAC’09. Annual, pages 363–
372. IEEE, 2009.
[15] Hamed Haddadi. Fighting online click-fraud using bluff ads. ACM
SIGCOMM Computer Communication Review, 40(2):21–25, 2010.
[16] Inc. Meet
the 2014 Inc. 5000: America’s Fastest-Growing Private
Companies. http://www.inc.com/proﬁle/superﬁsh, 2014.
[17] Ari Juels, Sid Stamm, and Markus Jakobsson. Combating click fraud
via premium clicks. In USENIX Security, 2007.
[18] Alexandros Kapravelos, Chris Grier, Neha Chachra, Christopher
Kruegel, Giovanni Vigna, and Vern Paxson. Hulk: Eliciting Malicious
Behavior in Browser Extensions.
In Proceedings of the 23rd Usenix
Security Symposium, 2014.
[19] Erik Kay. Keeping chrome extensions simple. http://blog.chromium.org/
2013/12/keeping-chrome-extensions-simple.html, 2013.
Kay.
[20] Erik
cious
protecting-chrome-users-from-malicious.html, 2014.
mali-
http://chrome.blogspot.com/2014/05/
extensions.
Protecting
Chrome
users
from
[21] David Kravets. Ad-injecting trojan targets Mac users on Safari,
http://arstechnica.com/apple/2013/03/
Firefox,
ad-injecting-trojan-targets-mac-users-on-safari-ﬁrefox-and-chrome/,
2013.
and Chrome.
[22] David Kravets.
Comcast Wi-Fi serving self-promotional ads via
JavaScript
http://arstechnica.com/tech-policy/2014/09/
why-comcasts-javascript-ad-injections-threaten-security-net-neutrality/,
2014.
injection.
[23] Lenovo.
Superﬁsh Vulnerability.
http://support.lenovo.com/us/en/
product security/superﬁsh, February 2015.
[24] Zhou Li, Kehuan Zhang, Yinglian Xie, Fang Yu, and XiaoFeng Wang.
Knowing your enemy: understanding and detecting malicious web
advertising. In Proceedings of the 2012 ACM conference on Computer
and Communications Security, pages 674–686. ACM, 2012.
[25] Brad Miller, Paul Pearce, Chris Grier, Christian Kreibich, and Vern
Paxson. What’s clicking what? techniques and innovations of today’s
clickbots.
In Detection of Intrusions and Malware, and Vulnerability
Assessment, pages 164–183. Springer, 2011.
166166
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
[26] Paul Pearce, Vacha Dave, Chris Grier, Kirill Levchenko, Saikat Guha,
Damon McCoy, Vern Paxson, Stefan Savage, and Geoffrey M Voelker.
Characterizing Large-Scale Click Fraud in ZeroAccess. In Proceedings
of the 21st ACM Conference on Computer and Communications Security
(CCS), 2014.
[27] Niels Provos, Panayiotis Mavrommatis, Moheeb Abu Rajab, and Fabian
Monrose. All your iFRAMEs point to us. In Proceedings of the 17th
Usenix Security Symposium, 2008.
[28] Moheeb Abu Rajab, Lucas Ballard, No´e Lutz, Panayiotis Mavrommatis,
and Niels Provos. CAMP: Content-Agnostic Malware Protection.
In
Symposium on Network and Distributed System Security (NDSS), 2013.
[29] Charles Reis, Steven D Gribble, Tadayoshi Kohno, and Nicholas C
Weaver. Detecting In-Flight Page Changes with Web Tripwires.
In
Usenix Symposium on Networked Systems Design and Implementation
(NSDI), 2008.
[30] Sambreel Holdings, LLC vs. Facebook, Inc. http://www.kotchen.com/
Sambreel-v-Facebook/PI Declaration Miller.pdf, 2012.
[31] Arvind Seshadri, Mark Luk, Elaine Shi, Adrian Perrig, Leendert van
Doorn, and Pradeep Khosla. Pioneer: Verifying Integrity and Guaran-
teeing Execution of Code on Legacy Platforms. In Proceedings of ACM
Symposium on Operating Systems Principles (SOSP), 2005.
[32] Kevin Springborn and Paul Barford.
advertising via pay-per-view networks.
Symposium, 2013.
Impression fraud in on-line
In 22nd USENIX Security
[33] Brett Stone-Gross, Ryan Stevens, Apostolis Zarras, Richard Kemmerer,
Chris Kruegel, and Giovanni Vigna. Understanding Fraudulent Activities
in Online Ad Exchanges. In Proceedings of the 2011 ACM SIGCOMM
conference on Internet measurement conference, pages 279–294. ACM,
2011.
[34] Nevena Vratonjic, Julien Freudiger, and Jean-Pierre Hubaux. Integrity
of the web content: The case of online advertising. In CollSec, 2010.
http://www.walmart.com/c/
Popular Products - Walmart.
[35] Walmart.
popular/, 2014.
[36] WC3. Content Security Policy 1.0. http://www.w3.org/TR/CSP/, 2012.
167167
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply.