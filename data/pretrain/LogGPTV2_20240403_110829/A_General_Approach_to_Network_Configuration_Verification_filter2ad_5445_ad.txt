decides to forward tra(cid:28)c to an iBGP peer, we lookup the actual IGP
forwarding behavior from the copy of the network corresponding
to that neighbor’s next hop destination IP address.
Route re(cid:30)ectors. Route re(cid:30)ectors help scalably disseminate iBGP
information among BGP routers by acting as an intermediary. To
model route re(cid:30)ectors, we use a slightly modi(cid:27)ed scheme from that
described above for iBGP. Each symbolic record includes a variable
(originatorId) indicating the router that initially sent the advertise-
ment. Routes are then exported according the the route-re(cid:30)ector
semantics (e.g., route re(cid:30)ectors re(cid:30)ect routes with a Non-Client
originatorId to Clients). Client routers then lookup next-hop for-
warding reachability based on the copy of the network correspond-
ing to the value of originatorId. Loops (e.g., those prevented with
the CLUSTER_ID attribute) are handled similarly to BGP (see §6).
Multi-exit discriminator (MED). The MED attribute of BGP
routes allows an AS to indicate preferences for paths for incom-
ing tra(cid:28)c (i.e., “cold potato” routing). There are multiple ways in
which MEDs may be used by a router depending on the con(cid:27)gu-
ration options and router vendor. In one usage, the MED values
are compared independent of the next-hop AS. We model this case
by ensuring that MEDs are compared when computing the best
route (e.g., bestBGP.med ≤ in1.med). In another usage, the MED
values are compared only for routes with the same next hop AS.
To model this case, we (cid:27)rst add a variable to each symbolic control
plane record that “remembers" what neighboring AS the route was
learned from. The import function from an external neighbor will
set the value of the next hop AS. The best route constraints then
only compare the MED when the AS is the same. For example, we
generate the constraint:
(bestBGP.asn (cid:44) in1.asn) ∨ (bestBGP.med ≤ in1.med)
In yet another usage, the age of a route determines the route com-
parison order, which means that routes with worse MED values may
be chosen over those with better values even when the routes have
the same next hop AS. Rather than model the age of each route, we
overapproximate this behavior by selecting any best route without
comparing MEDs.
MEDs are also non-transitive, i.e., the AS that receives them does
not export them to other ASes. We model non-transitivity similarly
to iBGP. We add a variable indicating whether a MED was learned
from an external peer, or set within the current AS. Routes with
MEDs learned from a peer are not exported to other ASes.
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
Ryan Becke(cid:29), Aarti Gupta, Ratul Mahajan, and David Walker
Design Decisions and Limitations. Our veri(cid:27)cation approach is
general and (cid:30)exible, but it does have limitations. The most critical
design choice involves the fact that our system describes the stable
solutions to which the control plane will converge; it does not
simulate the execution of the control plane as a message-passing
system. This choice improves performance, but it also means we
give up the possibility of verifying properties about transient states
of the network, prior to convergence. Other veri(cid:27)cation tools such
as ERA [11] and ARC [14] share this limitation.
A second important design decision is that we only consider
elements of the control plane that in(cid:30)uence the forwarding deci-
sions pertaining to a single symbolic packet at a time. As a result,
it is more expensive to model a few features that introduce depen-
dencies among destinations. For example, it is possible for static
routes to specify a next hop IP address that does not belong to a
directly-connected interface, thereby requiring the model to under-
stand how to route to that next hop. In this case, we must create
a separate copy of every control plane variable to determine the
forwarding for a second packet corresponding to the next hop ad-
dress. Likewise, modeling iBGP requires one additional copy of
every control plane variable for every router con(cid:27)gured with iBGP.
This additional complexity appears inherent since such features
introduce cross-destination dependencies. We are not aware of any
other veri(cid:27)cation tool that models them at all.
5 PROPERTIES
As noted earlier, our model allows us to express a range of properties
using SMT constraints. We now show how to encode some common
properties of interest.
Reachability and Isolation. We focus on answering reachability
queries for a (cid:27)xed destination port and set of source routers. To an-
swer such a query, each router x is instrumented with an additional
variable canReachx representing the fact that the router can reach
the destination port. We then add constraints as in §3. Isolation is
checked by asserting that a collection of routers are not reachable.
One bene(cid:27)t of the graph-based encoding is that queries can
involve many routers at once and the solver will analyze their
joint impact. For example, to check if two routers r1 and r2 can
both either reach or not reach the destination, one would assert
canReachr1 ⇐⇒ canReachr2. Similarly, the user can check if all
routers from a set S can reach the destination in a single query by
checking:(cid:86)
s∈S canReachs.
In contrast, in existing data plane and control plane veri(cid:27)cation
tools, to answer questions about reachability between all pairs of n
devices, one is often required to run n2 separate queries, which can
be very expensive [27].
Waypointing. Suppose we want to verify that tra(cid:28)c will traverse
a chain of devices m1, . . . , mk. Rather than adding one variable for
each router as with reachability, instead we add k variables for each
router to indicate how much of the service chain has been matched.
If a router forwards to neighbor mj and its (j − 1)th variable is true,
then the jth variable must be true for that router. Routers where
the kth variable is true will send tra(cid:28)c through the service chain.
Bounded or Equal Path Length. In many settings, it is desirable
to guarantee that tra(cid:28)c follows paths of certain length. For example,
Figure 6: Example networks for encoding (a) multipath con-
sistency, and (b) load balancing.
for a data center with a folded-Clos topology, an operator may wish
to ensure that tra(cid:28)c never traverses a path longer than four hops.
A violation of such an invariant likely indicates a con(cid:27)guration
bug. Similarly, the operator may want to ensure that all top-of-rack
routers in a pod use equal length paths to the destination.
Similar to reachability, path length is easily instrumented in
the model by adding a new integer variable for each router in
the network. Each router has path length n to the destination if it
forwards to some neighbor with path length n − 1.
Disjoint Paths. It is possible to ensure that two di(cid:29)erent routers
use edge-disjoint paths to a destination. Given two routers, we add
two bits to each edge indicating whether either router ever forwards
through that edge. A constraint then states that both bits are never
set for any edge. A similar approach can be used to guarantee that
paths do not share nodes or other shared-risk elements (e.g., (cid:27)ber
conduits), by introducing a variable for each risk factor.
Forwarding Loops. Forwarding loops in the network can arise
from con(cid:27)guration errors when using features like route redistri-
bution and static routes. To detect forwarding loops for a particular
router r, we add a single control bit to say whether each other
router will eventually send tra(cid:28)c through r. If r sends tra(cid:28)c to any
neighbor with this bit true, then there will be a forwarding loop.
As an optimization, we analyze con(cid:27)gurations to identify routers
where a forwarding loop is possible (e.g., due to the presence of
static routes). We then add control bits only for these routers.
Black Holes. Black holes occur when tra(cid:28)c is dropped because it
arrives at a router that does not have a corresponding forwarding
entry. This behavior may be intentional (e.g., in the case of ACLs)
or unintentional. We can (cid:27)nd black holes by checking if any router
has a neighbor that forwards to it, yet the router itself does not
forward to any neighbor.
Multipath Consistency. Bat(cid:27)sh [13] introduced a property called
multipath consistency, which ensures that tra(cid:28)c along all paths
from a source is treated the same. A violation of multipath consis-
tency occurs when tra(cid:28)c is dropped along one path but not the
other. Consider the example in Figure 6(a). Router R1 is con(cid:27)gured
to use multipath routing, yet an ACL on router R3 prevents tra(cid:28)c
from using the link to R5. We encode multipath consistency as
A General Approach to Network Configuration Verification
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
follows.
canReachR1
canReachR3
=⇒ (cid:86)
=⇒ . . .
R∈{R2,R3}
(controlfwdR1,R =⇒
datafwdR1,R ∧ canReachR )
The (cid:27)rst constraint says that if R1 can reach the destination
S at all, then forwarding to R2 (R3) in the control plane implies
that R2 (R3) should also be able to reach the destination, and this
also aligns with forwarding in the data plane to R2 (R3). In the
example presented in Figure 6(a) this constraint will fail since R3
cannot reach the destination, due to the bad ACL to R5. Suppose
now that R3 can also use multipath routing, and can therefore reach
the destination via R4 (shown as the dotted edge). Now the (cid:27)rst
constraint at R1 will succeed, but the second constraint for R3 will
fail, because R3 can forward through R4 but not through R5.
Neighbor or Path Preferences. Operators often want to enforce
preferences among external neighbors based on commercial rela-
tionships. For example it is common to prefer routes learned from
customers over peers over providers. Given a router R with three
edges to neighbors n1, n2, and n3 with import records e1, e2, and
e3, we can verify that n1 is preferred over n2 over n3 in the follow-
ing way. For each neighbor, we add a constraint that, if a message
survives the import (cid:27)lter, and all other more preferred neighbor
advertisements do not, then the presence of the message implies
that we will choose that neighbor in the selection process:
=⇒ controlfwdR, N 1
=⇒ controlfwdR, N 2
=⇒ controlfwdR, N 3
e1.valid
¬e1.valid ∧ e2.valid
¬e1.valid ∧ ¬e2.valid ∧ e3.valid
This type of reasoning can be lifted to entire paths. For example
suppose we want to verify that the network prefers to use path1 =
x1, . . . , xm over path2 = y1, . . . , yn. What we want to check is that
if the less preferred path is used, then the more preferred path was
not available:
n−1(cid:94)
i =1
controlfwdyi,yi +1 =⇒ m−1(cid:95)
i =1
depends on the forwarding behavior.
out1
out2
totalR1 = out1 + out2
= if datafwdR1,R4 then x else 0.0
= if datafwdR1,R2 then x else 0.0
Each interface’s load is equal to the (same) value de(cid:27)ned by a single
new variable x if tra(cid:28)c is forwarded out the interface, otherwise it
is 0. This new variable x ensures the loads are all equal.4 The total
at non-source routers is simply the sum of their incoming totals:
totalR2 = out2 + out3
Now we can ask questions about the load on each node/edge. For
example, we can check that the di(cid:29)erence between the loads on R2
and R4 is always within some threshold k:
−k ≤ totalR2 − totalR4 ≤ k
Aggregation and Leaking Pre(cid:27)xes. We can ensure that pre(cid:27)xes
are aggregated properly (e.g., a /32 is not leaked to an external
network) by checking: whenever the network advertises record e
to an external neighbor, then e.length = l where l is pre(cid:27)x length
after aggregation.
Local Equivalence. In many networks (e.g., data centers), several
devices will perform a similar “role" (e.g., aggregation router) and
have similar con(cid:27)gurations. Checks for equivalence can help de-
tect inconsistencies. For example, we might want to know that a
particular community value is always attached to advertisements
sent to external neighbors.
Because we fully model each router’s interactions with all of its
neighbors, we can check if two routers are behaviorally equivalent
for some notion of equivalence. In particular, we ask if given equal
environments (i.e., peer advertisements), the routers will make the
same forwarding decisions and export the same new advertisements.
For example, if two routers R1 and R2 both have the same two peers
P1 and P2 with import records in1 and in2, and output records out1
and out2, then we check the following:
¬ei .valid
in1 = in2
=⇒ (out1 = out2) ∧
(datafwdR1,P1 = datafwdR2,P1) ∧
(datafwdR1,P2 = datafwdR2,P2)
That is, whenever tra(cid:28)c (cid:30)ows along path2 it is because path1 is
not available due the advertisement being rejected along one of
the edges. A straightforward generalization of the above can help
enforce preferences over classes of neighbors, instead of individual
neighbors.
Load Balancing. Consider the example network in Figure 6b. Sup-
pose router R1 is con(cid:27)gured to use ECMP to send tra(cid:28)c to R2 and
R4. We can roughly model the e(cid:29)ect of load distribution with the
following steps. First, for each router R in the network we intro-
duce a symbolic real number called totalR representing the portion
of tra(cid:28)c going through R. For each source router of interest (e.g.,
R1 and R3), we set the load to some initial value based on tra(cid:28)c
measurements (e.g., 1.0 in this example):
totalR1 = 1.0 ∧ totalR3 = 1.0
Full Equivalence. It is also possible to check full equivalence be-
tween two sets of router con(cid:27)gurations. This is done in a similar