kinds of vulnerabilities, it is effective only if developers use appropriate regular
expressions when extracting clean data from tainted input. If an expression is
too liberal and extracts data that may cause problems in the context in which it
cc1199..iinndddd 773399 88//1199//22001111 1122::1188::3388 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 740
740 Chapter 19 n Finding Vulnerabilities in Source Code
will be used, the taint mode protection fails, and the application is still vulner-
able. In effect, the taint mode mechanism reminds programmers to perform
suitable validation on all input before using it in dangerous operations. It cannot
guarantee that the input validation implemented will be adequate.
JavaScript
Client-side JavaScript can, of course, be accessed without requiring any privi-
leged access to the application, enabling you to perform a security-focused
code review in any situation. A key focus of this review is to identify any
vulnerabilities such as DOM-based XSS, which are introduced on the client
component and leave users vulnerable to attack (see Chapter 12). A further
reason for reviewing JavaScript is to understand what kinds of input valida-
tion are implemented on the client, and also how dynamically generated user
interfaces are constructed.
When reviewing JavaScript, you should be sure to include both .js fi les and
scripts embedded in HTML content.
The key APIs to focus on are those that read from DOM-based data and that
write to or otherwise modify the current document, as shown in Table 19-12.
Table 19-12: JavaScript APIs That Read from DOM-Based Data
API DESCRIPTION
document.location Can be used to access DOM data that may be
controllable via a crafted URL, and may there-
document.URL
fore represent an entry point for crafted data to
document.URLUnencoded attack other application users.
document.referrer
window.location
document.write() Can be used to update the document’s con-
tents and to dynamically execute JavaScript
document.writeln()
code. If attacker-controllable data is passed to
document.body.innerHtml any of these APIs, this may provide a way to
execute arbitrary JavaScript within a victim’s
eval() browser.
window.execScript()
window.setInterval()
window.setTimeout()
cc1199..iinndddd 774400 88//1199//22001111 1122::1188::3388 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 741
Chapter 19 n Finding Vulnerabilities in Source Code 741
Database Code Components
Web applications increasingly use databases for much more than passive data
storage. Today’s databases contain rich programming interfaces, enabling substan-
tial business logic to be implemented within the database tier itself. Developers
frequently use database code components such as stored procedures, triggers,
and user-defi ned functions to carry out key tasks. Therefore, when you review
the source code to a web application, you should ensure that all logic imple-
mented in the database is included in the scope of the review.
Programming errors in database code components can potentially result in
any of the various security defects described in this chapter. In practice, how-
ever, you should watch for two main areas of vulnerabilities. First, database
components may themselves contain SQL injection fl aws. Second, user input
may be passed to potentially dangerous functions in unsafe ways.
SQL Injection
Chapter 9 described how prepared statements can be used as a safe alternative
to dynamic SQL statements to prevent SQL injection attacks. However, even if
prepared statements are properly used throughout the web application’s own
code, SQL injection fl aws may still exist if database code components construct
queries from user input in an unsafe manner.
The following is an example of a stored procedure that is vulnerable to SQL
injection in the @name parameter:
CREATE PROCEDURE show_current_orders
(@name varchar(400) = NULL)
AS
DECLARE @sql nvarchar(4000)
SELECT @sql = ‘SELECT id_num, searchstring FROM searchorders WHERE ‘ +
‘searchstring = ‘’’ + @name + ‘’’’;
EXEC (@sql)
GO
Even if the application passes the user-supplied name value to the stored
procedure in a safe manner, the procedure itself concatenates this directly into
a dynamic query and therefore is vulnerable.
Different database platforms use different methods to perform dynamic
execution of strings containing SQL statements. For example:
n MS-SQL — EXEC
n Oracle — EXECUTE IMMEDIATE
cc1199..iinndddd 774411 88//1199//22001111 1122::1188::3399 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 742
742 Chapter 19 n Finding Vulnerabilities in Source Code
n Sybase — EXEC
n DB2 — EXEC SQL
Any appearance of these expressions within database code components should
be closely reviewed. If user input is being used to construct the SQL string, the
application may be vulnerable to SQL injection.
NOTE On Oracle, stored procedures by default run with the permissions of
the defi ner, rather than the invoker (as with SUID programs on UNIX). Hence,
if the application uses a low-privileged account to access the database, and
stored procedures were created using a DBA account, a SQL injection fl aw
within a procedure may enable you to escalate privileges and perform arbi-
trary database queries.
Calls to Dangerous Functions
Customized code components such as stored procedures are often used to per-
form unusual or powerful actions. If user-supplied data is passed to a potentially
dangerous function in an unsafe way, this may lead to various kinds of vulner-
abilities, depending on the nature of the function. For example, the following
stored procedure is vulnerable to command injection in the @loadfile and
@loaddir parameters:
Create import_data (@loadfile varchar(25), @loaddir varchar(25) )
as
begin
select @cmdstring = “$PATH/firstload “ + @loadfile + “ “ + @loaddir
exec @ret = xp_cmdshell @cmdstring
...
...
End
The following functions may be potentially dangerous if invoked in an
unsafe way:
n Powerful default stored procedures in MS-SQL and Sybase that allow
execution of commands, registry access, and so on
n Functions that provide access to the fi lesystem
n User-defi ned functions that link to libraries outside the database
n Functions that result in network access, such as through OpenRowSet in
MS-SQL or a database link in Oracle
cc1199..iinndddd 774422 88//1199//22001111 1122::1188::3399 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 743
Chapter 19 n Finding Vulnerabilities in Source Code 743
Tools for Code Browsing
The methodology we have described for performing a code review essentially
involves reading the source code and searching for patterns indicating the
capture of user input and the use of potentially dangerous APIs. To carry out
a code review effectively, it is preferable to use an intelligent tool to browse the
codebase. You need a tool that understands the code constructs in a particular
language, provides contextual information about specifi c APIs and expressions,
and facilitates your navigation.
In many languages, you can use one of the available development studios,
such as Visual Studio, NetBeans, or Eclipse. In addition, various generic code-
browsing tools support numerous languages and are optimized for viewing
of code rather than development. The authors’ preferred tool is Source Insight,
shown in Figure 19-1. It supports easy browsing of the source tree, a versatile
search function, a preview pane to display contextual information about any
selected expression, and speedy navigation through the codebase.
Figure 19-1: Source Insight being used to search and browse the source code for a
web application
cc1199..iinndddd 774433 88//1199//22001111 1122::1188::3399 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 744
744 Chapter 19 n Finding Vulnerabilities in Source Code
Summary
Many people who have substantial experience with testing web applications
interactively, exhibit an irrational fear of looking inside an application’s codebase
to discover vulnerabilities directly. This fear is understandable for people who
are not programmers, but it is rarely justifi ed. Anyone who is familiar with
dealing with computers can, with a little investment, gain suffi cient knowledge
and confi dence to perform an effective code audit. Your objective in review-
ing an application’s codebase need not be to discover “all” the vulnerabilities
it contains, any more than you would set yourself this unrealistic goal when
performing hands-on testing. More reasonably, you can aspire to understand
some of the key processing that the application performs on user-supplied input
and recognize some of the signatures that point toward potential problems.
Approached in this way, code review can be an extremely useful complement
to the more familiar black-box testing. It can improve the effectiveness of that
testing and reveal defects that may be extremely diffi cult to discover when you
are dealing with an application entirely from the outside.
Questions
Answers can be found at http://mdsec.net/wahh.
1. List three categories of common vulnerabilities that often have easily
recognizable signatures within source code.
2. Why can identifying all sources of user input sometimes be challenging
when reviewing a PHP application?
3. Consider the following two methods of performing a SQL query that
incorporates user-supplied input:
// method 1
String artist = request.getParameter(“artist”).replaceAll(“’”, “’’”);
String genre = request.getParameter(“genre”).replaceAll(“’”, “’’”);
String album = request.getParameter(“album”).replaceAll(“’”, “’’”);
Statement s = connection.createStatement();
s.executeQuery(“SELECT * FROM music WHERE artist = ‘” + artist +
‘” AND genre = ‘” + genre + ‘” AND album = ‘” + album + “’”);
// method 2
String artist = request.getParameter(“artist”);
String genre = request.getParameter(“genre”);
String album = request.getParameter(“album”);
Statement s = connection.prepareStatement(
“SELECT * FROM music WHERE artist = ‘” + artist +
“’ AND genre = ? AND album = ?”);
cc1199..iinndddd 774444 88//1199//22001111 1122::1188::3399 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 745
Chapter 19 n Finding Vulnerabilities in Source Code 745
s.setString(1, genre);
s.setString(2, album);
s.executeQuery();
Which of these methods is more secure, and why?
4. You are reviewing the codebase of a Java application. During initial recon-
naissance, you search for all uses of the HttpServletRequest.getParameter
API. The following code catches your eye:
private void setWelcomeMessage(HttpServletRequest request) throws
ServletException
{
String name = request.getParameter(“name”);
if (name == null)
name = “”;
m_welcomeMessage = “Welcome “ + name +”!”;
}
What possible vulnerability might this code indicate? What further code
analysis would you need to perform to confi rm whether the application
is indeed vulnerable?
5. You are reviewing the mechanism that an application uses to generate
session tokens. The relevant code is as follows:
public class TokenGenerator
{
private java.util.Random r = new java.util.Random();
public synchronized long nextToken()
{
long l = r.nextInt();
long m = r.nextInt();
return l + (m << 32);
}
}
Are the application’s session tokens being generated in a predictable way?
Explain your answer fully.
cc1199..iinndddd 774455 88//1199//22001111 1122::1188::3399 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 746
cc1199..iinndddd 774466 88//1199//22001111 1122::1188::3399 PPMM
Stuttard c20.indd V3 - 08/16/2011 Page 747
CHAPTER
20
A Web Application
Hacker’s Toolkit
Some attacks on web applications can be performed using only a standard web
browser; however, the majority of them require you to use some additional tools.
Many of these tools operate in conjunction with the browser, either as exten-
sions that modify the browser’s own functionality, or as external tools that run
alongside the browser and modify its interaction with the target application.
The most important item in your toolkit falls into this latter category. It oper-
ates as an intercepting web proxy, enabling you to view and modify all the
HTTP messages passing between your browser and the target application. Over
the years, basic intercepting proxies have evolved into powerful integrated tool
suites containing numerous other functions designed to help you attack web
applications. This chapter examines how these tools work and describes how
you can best use their functionality.
The second main category of tool is the standalone web application scanner.
This product is designed to automate many of the tasks involved in attacking a
web application, from initial mapping to probing for vulnerabilities. This chapter
examines the inherent strengths and weaknesses of standalone web application
scanners and briefl y looks at some current tools in this area.
Finally, numerous smaller tools are designed to perform specifi c tasks when
testing web applications. Although you may use these tools only occasionally,
they can prove extremely useful in particular situations.
747
cc2200..iinndddd 774477 88//1199//22001111 1122::2211::0044 PPMM
Stuttard c20.indd V3 - 08/16/2011 Page 748
748 Chapter 20 n A Web Application Hacker’s Toolkit
Web Browsers
A web browser is not exactly a hack tool, as it is the standard means by which
web applications are designed to be accessed. Nevertheless, your choice of
web browser may have an impact on your effectiveness when attacking a web
application. Furthermore, various extensions are available to different types of
browsers, which can help you carry out an attack. This section briefl y exam-
ines three popular browsers and some of the extensions available for them.
Internet Explorer
Microsoft’s Internet Explorer (IE) has for many years been the most widely
used web browser. It remains so by most estimates, capturing approximately
45% of the market. Virtually all web applications are designed for and tested
on current versions of IE. This makes IE a good choice for an attacker, because
most applications’ content and functionality are displayed correctly and can be
used properly within IE. In particular, other browsers do not natively support
ActiveX controls, making IE mandatory if an application employs this technol-
ogy. One restriction imposed by IE is that you are restricted to working with
the Microsoft Windows platform.
Because of IE’s widespread adoption, when you are testing for cross-site
scripting and other attacks against application users, you should always try to
make your attacks work against this browser if possible (see Chapter 12).
NOTE Internet Explorer 8 introduced an anti-XSS fi lter that is enabled by
default. As described in Chapter 12, this fi lter attempts to block most standard
XSS attacks from executing and therefore causes problems when you are test-
ing XSS exploits against a target application. Normally you should disable the
XSS fi lter while testing. Ideally, when you have confi rmed an XSS vulnerability,
you should then reenable the fi lter and see whether you can fi nd a way to
bypass the fi lter using the vulnerability you have found.
Various useful extensions are available to IE that may be of assistance when
attacking web applications, including the following:
n HttpWatch, shown in Figure 20-1, analyzes all HTTP requests and responses,
providing details of headers, cookies, URLs, request parameters, HTTP
status codes, and redirects.
n IEWatch performs similar functions to HttpWatch. It also does some
analysis of HTML documents, images, scripts, and the like.
cc2200..iinndddd 774488 88//1199//22001111 1122::2211::0044 PPMM
Stuttard c20.indd V3 - 08/16/2011 Page 749
Chapter 20 n A Web Application Hacker’s Toolkit 749
Figure 20-1: HttpWatch analyzes the HTTP requests issued by Internet Explorer
Firefox
Firefox is currently the second most widely used web browser. By most esti-
mates it makes up approximately 35% of the market. The majority of web
applications work correctly on Firefox; however, it has no native support for
ActiveX controls.
There are many subtle variations among different browsers’ handling of
HTML and JavaScript, particularly when they do not strictly comply with the
standards. Often, you will fi nd that an application’s defenses against bugs
such as cross-site scripting mean that your attacks are not effective against
every browser platform. Firefox’s popularity is suffi cient that Firefox-specifi c
XSS exploits are perfectly valid, so you should test these against Firefox if you