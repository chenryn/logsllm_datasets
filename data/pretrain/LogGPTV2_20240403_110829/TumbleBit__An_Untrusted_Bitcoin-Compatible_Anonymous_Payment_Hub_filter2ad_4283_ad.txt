(1) Because the Payment Phase is off-blockchain,
transaction Tpuzzle from Figure 3 is not posted to the
blockchain. Instead, Alice A forms and signs transaction
Tpuzzle and sends it to the Tumbler T . Importantly,
Tumbler T does not sign or post this transaction yet.
(2) Transaction Tpuzzle points to the escrow trans-
action Tescr(A,T ); Tpuzzle changes its balance so that T
holds i bitcoin and Alice A holds Q− i bitcoins. Tpuzzle
is timelocked to time window tw 1 and stipulates the
same condition in Figure 3: “the fulﬁlling transaction is
signed by T and has preimages of hj∀j ∈ R.”
(Suppose that T deviates from this protocol, and
instead immediately signs and post Tpuzzle. Then the
bitcoins in Tescr(A,T ) would be transferred to Tpuzzle.
However, these bitcoins would remain locked in Tpuzzle
until either (a) the timelock tw expired, at which point
Alice A could reclaim her bitcoins, or (b) T signs and
posts a transaction fulﬁlling the condition in Tpuzzle,
which allows Alice to obtain the solution to her puzzle.)
(3) Instead of revealing the preimages kj∀j ∈ R in
an on-blockchain transaction Tsolve as in Figure 3, the
Tumbler T just sends the preimages directly to Alice.
(4) Finally, Alice A checks that the preimages open
a valid puzzle solution. If so, Alice signs a regular cash-
out transaction Tcash(A,T ) (per Section III-B). Tcash(A,T )
points to the escrow transaction Tescr(A,T ) and reﬂects
the new balance between A and T .
At the end of the ith payment, the Tumbler T should
have two new signed transactions from Alice: Tpuzzle(i)
and Tcash(A,T )(i), each reﬂecting the (same) balance of
bitcoins between T (holding i bitcoins) and A (holding
Q−i bitcoins). However, Alice A already has her puzzle
solution at this point (step (4) modiﬁcation above). What
if she refuses to sign Tcash(A,T )(i)?
In this case, the Tumbler immediately begins to
cash out, even without waiting for the Cash-Out Phase.
Speciﬁcally, Tumbler T holds transaction Tpuzzle(i),
signed by A, which reﬂects a correct balance of i
bitcoins to T and Q − i bitcoins to A. Thus, T signs
Tpuzzle(i) and posts it to the blockchain. Then, T claims
the bitcoins locked in Tpuzzle(i) by signing and posting
transaction Tsolve. As in Figure 3, Tsolve fulﬁlls Tpuzzle
by containing the m preimages kj∀j ∈ R. The bitcoin
in Tescr(A,T ) will be transferred to Tpuzzle and then to
Tsolve and thus to the Tumbler T . The only harm done is
that T posts two longer transactions Tpuzzle(i), Tsolve(i)
(instead of just Tcash(A,T )), which require higher fees
to be conﬁrmed on the blockchain. (Indeed, this is why
we have introduced the Tcash(A,T )(i) transaction.)
Cash-Out Phase. Alice has j puzzle solutions once
the the Payment Phase is over and the Cash-Out Phase
begins. If the Tumbler T has a transaction Tcash(A,T )(j)
signed by Alice, the Tumbler T just signs and post this
transaction to the blockchain, claiming its j bitcoins.
9
VI. PUZZLE-PROMISE PROTOCOL
that
We present
the goal of this protocol
the puzzle-promise protocol run be-
tween B and T in the Escrow Phase. Recall from
is to
Section III-A,
provide Bob B with a puzzle-promise pair (c, z). The
“promise” c is an encryption (under key ) of the
Tumbler’s ECDSA-Secp256k1 signature σ on the trans-
action Tcash(T ,B) which transfers the bitcoin escrowed
in Tescr(T ,B) from T to B. Meanwhile the RSA-puzzle
z hides the encryption key  per equation (1).
If Tumbler T just sent a pair (c, z) to Bob, then
Bob has no guarantee that the promise c is actually
encrypting the correct signature, or that z is actually
hiding the correct encryption key. On the other hand, T
cannot just reveal the signature σ directly, because Bob
could use σ to claim the bitcoin escrowed in Tescr(T ,B)
without actually being paid (off-blockchain) by Alice A
during TumbleBit’s Payment Phase.
To solve this problem, we again use cut and choose:
we ask T to compute many puzzle-promise pairs
(ci, zi), and have Bob B test that some of the pairs are
computed correctly. As in Section V-A, we use “fake”
transactions (that will be “opened” and used only to
check if the other party has cheated) and “real” trans-
actions (that remain “unopened” and result in correctly-
formed puzzle-promise pairs). Cut-and-choose guaran-
tees that B knows that at least one of the unopened pairs
is correctly formed. However, how does B know which
puzzle zi is correctly formed? Importantly, B can only
choose one puzzle zi that he will ask Alice A to solve
during TumbleBit’s Payment Phase (Section III-A). To
deal with this, we introduce an RSA quotient-chain
technique that ties together all puzzles zi so that solving
one puzzle zj1 gives the solution to all other puzzles.
In this section, we assume that B wishes to obtain
only a single payment of denomination 1 bitcoin; the
protocol as described in Figure 4 and Section VI-A
sufﬁces to run TumbleBit as a classic tumbler. We
discuss its security properties in Section VI-B and im-
plementation in Section VIII-B. In the full version [20],
we show how to modify this protocol so that it allows
B to receive arbitrary number of Q off-blockchain
payments using only two on-blockchain transactions.
A. Protocol Walk Through
B prepares µ distinct “real” transactions and η
“fake” transactions, hides them by hashing them with
H(cid:48) (Step 2-3), permutes them (Step 4), and ﬁnally sends
them to T as β1, ..., βm+n. T the evaluates each βi to
obtain a puzzle-promise pair (ci, zi) (Step 5).
Next, B needs to check that the η “fake” (ci, zi)
pairs are correctly formed by T (Step 8). To do this,
B needs T to provide the solutions i to the puzzles
zi in fake pairs. T reveals these solutions only after
B has proved that the η pairs really are fake (Step 7).
probability less than 1/(cid:0)µ+η
(cid:1).
Once this check is done, B knows that T can cheat with
η
Tumbler T chooses fresh ephemeral ECDSA-Secp256k1 key, i.e., bitcoin address (SK ephT , PK ephT ).
π proves validity of (e, N) in a one-time-only setup phase.
Public input: (e, N, PK ephT , π).
Bob B
Tumbler T . Secret input: d
Now we need our new trick. We want to ensure that
if at least one of the “real” (ci, zi) pairs opens to a valid
ECDSA-Secp256k1 signature σi, then just one puzzle
solution i with i ∈ R, can be used to open this pair.
(We need this because B must decide which puzzle zi
to give to the payer A for decryption without knowing
which pair (ci, zi) is validly formed.) We solve this by
having T provide B with µ− 1 quotients (Step 9). This
solves our problem since knowledge of  = j1 allows
B to recover of all other ji, since
ji = 1 · q2·, . . . ,·qi
On the ﬂip side, what if B obtains more than one valid
ECDSA-Secp256k1 signatures by opening the (ci, zi)
pairs? Fortunately, however, we don’t need to worry
about this. The escrow transaction Tescr(T ,B) offers 1
bitcoin in exchange for a ECDSA-Secp256k1 signature
under an ephemeral key PK ephT
used only once during
this protocol execution with this speciﬁc payee B. Thus,
even if B gets many signatures, only one can be used
to form the cash-out transaction Tcash(T ,B) that redeems
the bitcoin escrowed in Tescr(T ,B).
B. Security Properties
We again capture the security requirements of the
puzzle-promise protocol using real-ideal paradigm [16].
The ideal functionality Fpromise-sign is presented the
full version [20]. Fpromise-sign is designed to guarantee
the following properties: (1) Fairness for T : Bob B
learns nothing except signatures on fake transactions.
(2) Fairness for B: If T agrees to complete the protocol,
then Bob B obtains at least one puzzle-promise pair. To
do this, Fpromise-sign acts a trusted party between B and
T . Bob B sends the “real” and “fake” transactions to
Fpromise-sign. Fpromise-sign has access to an oracle that can
compute the Tumbler’s T signatures on any messages.
(This provides property (2).) Then, if Tumbler T agrees,
Fpromise-sign provides Bob B with signatures on each
“fake” transaction only. (This provides property (1).)
The following theorem is proved the full version [20]:
Theorem 2: Let λ be the security parameter. If
RSA trapdoor function is hard in Z∗
N , if H, H(cid:48), H shk
are independent random oracles, if ECDSA is strong
existentially unforgeable signature scheme,
then the
puzzle-promise protocol in Figure 4 securely realizes
the Fpromise-sign functionality. The security for T is
1 − ν(λ) while security for B is 1 − 1
(µ+η
η )
− ν(λ).
VII. TUMBLEBIT SECURITY
We discuss TumbleBit’s unlinkability and balance
properties. See Section III-C for DoS/Sybil resistance.
10
1. Set up Tescr(T ,B)
Sign but do not post transaction Tescr(T ,B)
timelocked for tw 2 offering one bitcoin
under the condition: “the fulﬁlling transaction
must be signed under key PK ephT
under key PK B.”
and
5. Evaluation.
For i = 1, . . . , µ + η:
ECDSA sign βi to get σi = Sig(SK ephT , βi)
Randomly choose i ∈ ZN .
Create promise ci = H shk(i) ⊕ σi
Create puzzle zi=fRSA(i, e, N )
i.e., zi = (i)e mod N
7. Check Fake Set.
Check hR = H(salt||R) and hF = H(salt||F )
For all i ∈ F :
verify βi = H(cid:48)(FakeFormat||ri).
Abort if any check fails
9. Prepare Quotients.
For R = {j1, ..., jµ}:
set q2 = j2
j1
, ..., qµ =
jµ
jµ−1
11. Post transaction Tescr(T ,B) on blockchain
←−−−−−−
Tescr(T ,B)
β1...βµ+η
−−−−−−→
hR,hF−−−−→
(c1,z1),...(cµ+η,zµ+η)
←−−−−−−−−−−−−−−
R,F−−→
ri ∀i∈F
−−−−−→
salt−−→
i ∀i∈F←−−−−−
q2,...,qµ←−−−−−
2. Prepare µ Real Unsigned Tcash(T ,B).
For i ∈ 1, . . . , µ:
Choose random pad ρi ← {0, 1}λ
Set Tcash(T ,B)
hti = H(cid:48)(Tfulﬁll
i = CashOutTFormat(ρi)
i).
3. Prepare Fake Set.
For i ∈ 1, . . . , η:
Choose random pad ri ← {0, 1}λ
f ti = H(cid:48)(FakeFormat||ri).
{f t1, ..., f tη, ht1, ..., htµ}
4. Mix Sets.
Randomly permute
to obtain {β1, ...βµ+η}
Let R be the indices of the hti
Let F be the indices of the f ti
Choose salt ∈ {0, 1}λ
Compute: hR = H(salt||R)
hF = H(salt||F )
6. Identify Fake Set.
8. Check Fake Set.
For all i ∈ F
- Validate that i < N
- Validate RSA puzzle zi = (i)e mod N
- Validate promise ci:
(a) Decrypt σi = H prg(i) ⊕ ci
(b) Verify σi, i.e.,
ECDSA-Ver(PK ephT , H(cid:48)(f ti), σi) = 1
Abort if any check fails
10. Quotient Test.
For R = {j1, ..., jµ} check equalities:
zj2 = zj1 · (q2)e mod N
...
zjµ = zjµ−1 · (qµ)e mod N
Abort if any check fails
12. Begin Payment Phase.
Set z = zj1. Send ¯z = z · (r)e to Payer A
Fig. 4.
Puzzle-promise protocol when Q = 1. (d, (e, N )) are
the RSA keys for the tumbler T . (Sig, ECDSA-Ver) is an ECDSA-
Secp256k1 signature scheme. We model H, H(cid:48) and H shk as random
oracles. In our implementation, H is HMAC-SHA256 (keyed with
salt) . H(cid:48) is ‘Hash256’, i.e., SHA-256 cascaded with itself, which
is the hash function used in Bitcoin’s “hash-and-sign” paradigm with
ECDSA-Secp256k1. H shk is SHA-512. CashOutTFormat is shorthand
for the unsigned portion of a transaction that fulﬁlls Tescr(T ,B). The
protocol uses ρi to ensure the output of CashOutTFormat contains
sufﬁcient entropy. FakeFormat is a distinguishable public string.
A. Balance
The balance was deﬁned, at high-level,
in Sec-
tion III-C. We analyze balance in several cases.
Tumbler T ∗ is corrupt. We want to show that all the
bitcoins paid to T by all Aj’s can be later claimed
by the Bi’s. (That is, a malicious T ∗ cannot refuse a
payment to Bob after being paid by Alice.) If Bi suc-
cessfully completes the puzzle-promise protocol with
T ∗, fairness for this protocol guarantees that Bi gets
a correct “promise” c and puzzle z. Meanwhile, the
fairness of the puzzle-solver protocol guarantees that
each Aj gets a correct puzzle solution in exchange for
i
i
i
j and B∗
than min(t,(cid:80)
her bitcoin. Thus, for any puzzle z solved, some Bi
can open promise c and form the cash-out transaction
Tcash(T ,B) that allows Bi to claim one bitcoin. Moreover,
transaction Tescr(A,T ) has timelock tw 1 and transaction
Tescr(T ,B) has timelock tw 2. Since tw 1 < tw 2,
it
follows that either (1) T ∗ solves A’s puzzle or (2)
A reclaims the bitcoins in Tescr(A,T ) (timelock tw 1),
before T can (3) steal a bitcoin by reclaiming the
bitcoins in Tescr(T ,B) (timelock tw 2).
Case A∗
i are corrupt. Consider colluding payers
B∗
i and payees A∗
j . We show that the sum of bitcoins
cashed out by all B∗
is no more than the number of
puzzles solved by T in the Payment Phase with all A∗
j .
First, the fairness of the puzzle-promise protocol
guarantees that any B∗
learns only (c, z) pairs; thus,
by the unforgeability of ECDSA signatures and the
hardness of solving RSA puzzles, B∗ cannot claim
any bitcoin at the end of the Escrow Phase. Next, the
fairness of the puzzle-solver protocol guarantees that
if T completes SPj successful puzzle-solver protocol
executions with A∗
j , then A∗
j gets the solution to exactly
SPj puzzles. Payees B∗
i use the solved puzzles to
claim bitcoins from T . By the unforgeability of ECDSA
signatures (and assuming that the blockchain prevents
double-spending), all colluding B∗
i cash-out no more
j SPj) bitcoin in total, where t is the
total number of bitcoins escrowed by T across all B∗
i .
Case B∗
i and
T ∗ collude to harm Aj. Fairness for Aj still follows
directly from the fairness of the puzzle-solver protocol.
This follows because the only interaction between Aj
and B∗