## PostgreSQL earth distance module  
### 作者             
digoal              
### 日期              
2015-06-26                                        
### 标签                                                                                                                              
PostgreSQL , cube , 地球 , earth , 插件    
----              
## 背景      
PostgreSQL提供了一个扩展模块earthdistance，实际上是将地球构造为一个标准的圆球体（实际上是扁球体），利用cube或point来表示地球上的点。  
其中cube是用来记录球坐标的，通过坐标来表示地球上的点。（实际上是做了一定约束的cube, 即域类型earth）  
```  
-- Define domain for locations on the surface of the earth using a cube  
-- datatype with constraints. cube provides 3D indexing.  
-- The cube is restricted to be a point, no more than 3 dimensions  
-- (for less than 3 dimensions 0 is assumed for the missing coordinates)  
-- and that the point must be very near the surface of the sphere  
-- centered about the origin with the radius of the earth.  
```  
有三个约束  
```  
CREATE DOMAIN earth AS cube  
  CONSTRAINT not_point check(cube_is_point(value))  
  CONSTRAINT not_3d check(cube_dim(value)  1 THEN pi()*earth() ELSE 2*earth()*asin($1/(2*earth())) END';  
CREATE FUNCTION gc_to_sec(float8)  
RETURNS float8  
LANGUAGE SQL  
IMMUTABLE STRICT  
AS 'SELECT CASE WHEN $1  pi() THEN 2*earth() ELSE 2*earth()*sin($1/(2*earth())) END';  
```  
计算两个坐标的球面距离：  
例如北京和杭州的球面距离，约1123公里。  
```  
postgres=# select earth_distance(ll_to_earth(39.9,116.4),ll_to_earth(30.3,120.2));  
-[ RECORD 1 ]--+----------------  
earth_distance | 1122999.5704515  
```  
算法，用到了CUBE的cube_distance函数，先计算直线距离，再转换为球体表面距离：  
```  
CREATE FUNCTION earth_distance(earth, earth)  
RETURNS float8  
LANGUAGE SQL  
IMMUTABLE STRICT  
AS 'SELECT sec_to_gc(cube_distance($1, $2))';  
```  
最后一个例子是范围，用户提供球体表面的一个坐标，以及一个半径信息，用来表示球体表面的一个以这个坐标为中心辐射的半径范围，但实际测试发现有一定的偏差，可能和cube的计算方法有关系。  
```  
earth_box(earth, float8) return cube	  
Returns a box suitable for an indexed search using the cube @> operator for points within a given great circle distance of a location.   
Some points in this box are further than the specified great circle distance from the location, so a second check using earth_distance should be included in the query.  
```  
算法，还是要用到CUBE提供的cube_enlarge函数，这个函数是将多维坐标的每个坐标都延展一个半径的距离，实际上已经不是球体了，而是立方体：  
```  
CREATE FUNCTION earth_box(earth, float8)  
RETURNS cube  
LANGUAGE SQL  
IMMUTABLE STRICT  
AS 'SELECT cube_enlarge($1, gc_to_sec($2), 3)';  
```  
第一个参数是坐标，第二个参数是直线距离（球面距离转换为直线距离），第三个参数是第一个参数的维度，这里是3维。所以用3表示。  
```  
cube_enlarge(cube c, double r, int n) returns cube	  
Increases the size of a cube by a specified radius in at least n dimensions.   
If the radius is negative the cube is shrunk instead. This is useful for creating bounding boxes around a point for searching for nearby points.   
All defined dimensions are changed by the radius r. LL coordinates are decreased by r and UR coordinates are increased by r.   
If a LL coordinate is increased to larger than the corresponding UR coordinate (this can only happen when r = 0) then 0 is used as the base for the extra coordinates.  
```  
例子：  
将一个平面坐标(1,1)的每个方向扩展1个距离单位，得到(0, 0),(2, 2)。你在纸上画一下就知道怎么回事了。  
```  
postgres=# select cube_enlarge('(1,1)',1,2);  
 cube_enlarge    
---------------  
 (0, 0),(2, 2)  
(1 row)  
```  
现在回到earthdistance的例子，例如我们前面计算得到杭州到北京的球面距离是1123公里，那么我以杭州为中心，辐射多少距离才能包含北京呢？如果是圆的话，辐射半径应该要达到1123公里才能包含北京。但是实际上使用earth_box得到的结果并非如此。  
先看看扩展10米得到的BOX，每个坐标方向正反各延展了10米，得到2个点，即一个BOX：  
```  
postgres=# select ll_to_earth(30.3,120.2);  
                       ll_to_earth                         
---------------------------------------------------------  
 (-2770071.42546437, 4759459.23949754, 3217961.94533299)  
(1 row)  
postgres=# select earth_box(ll_to_earth(30.3,120.2), 10);  
                                                    earth_box                                                      
-----------------------------------------------------------------------------------------------------------------  
 (-2770081.42546437, 4759449.23949754, 3217951.94533299),(-2770061.42546437, 4759469.23949754, 3217971.94533299)  
(1 row)  
postgres=# select earth_box(ll_to_earth(30.3,120.2), 1122999.5704515);  
                                                    earth_box                                                      
-----------------------------------------------------------------------------------------------------------------  
 (-3891620.99816939, 3637909.66679251, 2096412.37262797),(-1648521.85275934, 5881008.81220257, 4339511.51803802)  
(1 row)  
```  
这个BOX是否包含北京呢？  
```  
postgres=# select earth_box(ll_to_earth(30.3,120.2), 1122999.5704515) @> ll_to_earth(39.9,116.4);  
 ?column?   
----------  
 t  
(1 row)  
postgres=# select ll_to_earth(39.9,116.4);  
                      ll_to_earth                         
--------------------------------------------------------  
 (-2175648.05107066, 4382814.5785906, 4091273.51368619)  