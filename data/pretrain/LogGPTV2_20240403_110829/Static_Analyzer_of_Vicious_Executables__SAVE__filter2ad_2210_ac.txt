? 
′
)
(cid:57)
′
,
′
,
()
()
()
(
(
(
′
,
uVsV
′
)
? 
0.9656 
0.6832 
(cid:56)
(cid:56)
0.2097 
0.0204 
(cid:57)
(cid:56)
1.0000 
1.0000 
(cid:56)
(cid:57)
′
(),
uV
sV
(
(1,2,3,4,5,6), 
(1,2,3,9,5,6) 
(1,2,1,2,1,2), 
(8,9,8,9,8,9) 
(1,1,1,1,1,2), 
(1,1,1,1,1,100) 
Table 2: Polymorphic malware detection using different scanners 
W32.Mydoom.A 
W32.Mydoom.A V1 
W32.Mydoom.A V2 
W32.Mydoom.A V3 
W32.Mydoom.A V4 
W32.Mydoom.A V5 
W32.Mydoom.A V6 
W32.Mydoom.A V7 
W32.Bika 
W32.Bika V1 
W32.Bika V2 
W32.Bika V3 
W32.Beagle.B 
W32.Beagle.B V1 
W32.Beagle.B V2 
W32. Blaster.Worm 
W32. Blaster.Worm V1 
W32. Blaster.Worm V2 
W32. Blaster.Worm V3 
W32. Blaster.Worm V4 
N 
(cid:57)
(cid:56)
(cid:57)
(cid:56)
(cid:56)
(cid:56) 
(cid:56)
(cid:56)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
(cid:57)
(cid:56)
M1  M2 
(cid:57)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
? 
(cid:56)
(cid:56)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
D 
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
(cid:56)
P 
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
(cid:56)
K 
(cid:57)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
F 
(cid:57)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
(cid:57)
A 
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:56)
(cid:56)
(cid:57)
(cid:56)
(cid:56)
(cid:56)
(cid:56)
SAVE 
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
(cid:57)
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply. 
N  –  Norton,  M1 – McAfee  UNIX  Scanner,  M2 –
McAfee, D – Dr. Web, P – Panda, K – Kaspersky, F – 
F-Secure,  A  –  Anti  Ghostbusters,  SAVE  –  NMT 
developed Static Analyzer for Vicious Executables. 
The  obfuscation  techniques  used  to  produce  the 
polymorphic versions of different malware tested in the 
experiments  include  control  flow  modification  (e.g. 
Mydoom  V2,  Beagle  V2),  data  segment  modification 
(e.g.,  Mydoom  V1,  Beagle  V1),  and  insertion  of  dead 
code  (e.g.,  Bika  V1).  Our  ongoing  experiments  also 
include investigation of metamorphic versions. As can 
be seen from the last column of table 1, NMT’s SAVE,
a  signature  based  detection  algorithm,  performs  the 
most accurate detection. 
5. Conclusions and future work 
Because  malware  can  conceivably  become  more 
lethal  (so-called  “3rd  generation”  worms  use  multiple 
attack  vectors  to  exploit  both  known  and  unknown 
vulnerabilities, and spread even faster by attacking pre-
scanned targets with lightning speed) in the future, it is 
important  that  the  scanners  are  capable  of  detecting 
polymorphic (obfuscated, or variant) and metamorphic 
(mutated  or  evolved  versions)  versions  of  known 
malware.  The  currently  available  scanners,  however, 
are  inadequate  since  they  are  not  able  to  detect  even 
slightly obfuscated versions of known malware. 
Our  results  differ  significantly  from  other  groups’ 
recent results: 
1. Our  analysis  is  based  on  static  scanning  (no 
sandboxing, proxy testing, or code de-obfuscation 
is  involved);  so  it  runs  at  least  an  order  of 
magnitude faster. 
2. Our  obfuscation  is  based  on  executables  (and  not 
on assembly code or high-level source code that is 
usually not available). 
3. Our  results  are  based  on  some  of  the  latest 
malware targeting current OS platforms−not dated 
malware intended for now legacy systems. 
The  presented  results  clearly  reveal  the  alarming 
deficiency  of  current  scanning  techniques  and  the 
tremendous  potential  of  our  approach.  In  view  of  the 
serious  looming  threat  of  future  generation  malware, 
the following topics will need to be investigated, 
1. Development  of  signatures  for  different  types 
of  malware: even thought  the sequence of  API 
system  calls  provides  a  potentially  effective 
basis 
signature,  more 
sophisticated  (statically  constructed)  signatures 
for  defining 
the 
must  be  investigated  to  deal  with  polymorphic 
versions of known malware. 
2. Development  of  tools  for  malware  scanning: 
since  for  each  malware 
is 
different,  it  is  useful  to  have  a  tool  that  assists 
in the (static and dynamic) analysis of malware 
code  and 
the  development  of  effective 
signatures. 
the  signature 
3. Metamorphic  malware:  mutated  or  evolved 
versions  of  malware  are  even  more  difficult  to 
detect  since  their  functionality  has  changed 
from  the  original.  Signature  based  detection 
again  provides  the  best  hope  and  we  will 
investigate static techniques for detection. 
6. Acknowledgments 
Support  for 
this  research  received  from  ICASA 
(Institute  for  Complex  Additive  Systems  Analysis,  a 
division  of  New  Mexico  Tech),  a  Department  of 
Defense  IASP  Capacity  Building  grant,  and  an  NSF 
SFS  Capacity  Building 
gratefully 
acknowledged. We would also like to acknowledge the 
assistance 
of  Authonis  Suliman,  Karthikeyan 
Ramamoorthy  and  Xie  Tao  in  carrying  out  the 
numerous experiments. 
grant, 
is 
7. References 
[1] N. Weaver, V. Paxson, S. Staniford, and R. 
Cunningham,  “A  Taxonomy  of  Computer 
Worms”, First Workshop on Rapid Malcode 
(WORM), 2003, pp. 11-18. 
and 
Subcommittee 
Policy, 
[2] G.  Eschelbeck,  “Worm  and  Virus  Defense: 
How  Can  We  Protect 
the  Nation’s 
Computers  From  These  Threats?”,  Before 
on 
the 
Technology, 
Information 
Intergovernmental 
Relations 
the  Census  House 
Government Reform Committee, September 
10, 2003 . 
F.  Cohen,  “Computer  viruses:  Theory  and 
experiments”, Computers and Security, Vol. 
6, 1987, pp. 22-35. 
Chess  and  S.  White,  “An  Undetectable 
Computer 
Bulletin 
Conference, September 2000. 
J. Bergeron, M. Debbabi, M. M. Erhioui and 
B. Ktari, “Static Analysis of Binary Code to 
Isolate  Malicious 
In
Proceedings  of  the  IEEE  4th  International 
Workshops 
Security 
(WETICE'99),
University, 
California, USA, 1999, IEEE Press. 
Behaviors”,
Enterprise 
Stanford 
Virus”, 
Virus 
[3]
[4]
[5]
on 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply. 
[6] M.  Christodorescu  and  S.  Jha,  “Static 
Analysis of Executables to Detect Malicious 
Patterns”,  Usenix  Security  Symposium, 
2003, pp. 169-186. 
Symantec Cooperation 
http://securityresponse.symantec.com/avcen
ter/.
[7]
[8] Virus Library 
[9]
and 
C. 
http://www.viruslibrary.com/virusinfo/Win3
2.Bika.htm. 
Thomborson, 
Collberg 
and 
“Watermarking,  Tamper-Proofing, 
Obfuscation 
Software 
Protection”, IEEE Transactions on Software 
Engineering Vol. 28:8, 2002, pp. 735-746. 
-  Tools 
for 
16th  Annual  Computer  Security 
(ACSAC'00), 
of 
Applications  Conference 
2000, pp.308-316. 
[11] Hackman 
Hex 
editor, 
http://www.technologismiki.com/en/index-
h.html. 
[12] W.C. Wilson, “Activity Pattern Analysis by 
means  of  Sequence-Alignment  Methods”, 
Journal  of  Environment and  planning,  Vol. 
30, 1998, pp. 1017-1038. 
[13] Strehl and J. Ghosh, “Value-based customer 
grouping  from  large  retail  data-sets”,  In  the 
Proceedings  of  SPIE  Conference  on  Data 
Mining  and  Knowledge  Discovery,  Vol. 
4057, 2000, pp. 32-40. 
[10] S.  Krishnaswamy,  M.  Kwon,  D.  Ma,  Q. 
Shao,  and  Y.  Zhang,  “Experience  with 
software watermarking”, In the Proceedings 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply.