User: 请解答这个和日志有关的问题Is Chrome completely secure against Reflected XSS? I notice that Chrome does not execute scrips that are part of the web request,

http://vulnerable_site?pageTitle=&lt;script&gt;alert('xss')&lt;/script&gt;

With such links since the script is as part of the web request, Chrome does not execute the script. Does that prevent all kinds of Reflected XSS attacks with Chrome browser ?

Edit:
I've already read this thread; although the title seems similar, the contents are different.

Assistant: No, because the XSS filter only looks whether it sees XSS code in the input back in the HTML outputted by your server.

For example, if Chrome sees your web page is accessed with an URL that contains the following: 


?q=&lt;script&gt;alert("XSS!")&lt;/script&gt;


and if the HTML returned by the server contains this:

&lt;p&gt;You have searched for &lt;b&gt;&lt;script&gt;alert("XSS!")&lt;/script&gt;


it knows that this code is most likely the result of it being included in the request, and neutralizes it.

However, if the code is not found in the request, for example if the application accepts input that is encoded in some way, the filter may not be able to figure out that the code is the result of some XSS code embedded in the request.

As seen in the commit log for WebKit, until it was forked recently  the rendering engine in Chrome, they are trying to address the most common bypasses, where the XSS-code in the URL and the resulting XSS-code in the HTML look slightly different.

If none of these rules for special cases apply, the XSS will be left through. For example, if they aren't decoding Base64-encoded data in the URL, if the web application were to accept input encoded with Base64, it may be possible to XSS a web application.

An example:

?q=PHNjcmlwdD5hbGVydCgnWFNTIScpPC9zY3JpcHQ+


(PHNjcmlwdD5hbGVydCgnWFNTIScpPC9zY3JpcHQ+ is &lt;script&gt;alert("XSS!")&lt;/script&gt; encoded in Base-64), if not filtered, would result in response HTML like this:

&lt;p&gt;You have searched for &lt;b&gt;&lt;script&gt;alert("XSS!")&lt;/script&gt;


Additionally, it won't stop XSS occurring with data that is not embedded in the HTML unencoded, but is treated in an unsafe way by JavaScript.

For example, consider a page which contains the following JavaScript:


eval(location.hash.substring(1))


This will execute any code trailing the # in the URL, but it is not filtered out by Chrome.

↪ You can see this example in action here

↪ Another example, which uses Base64