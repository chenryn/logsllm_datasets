### 5. Overhead Analysis
The observed overhead corresponds to an increase of approximately 201%. Although this overhead is significant, it is only experienced during the app compilation on the developer's computer and does not affect the end user.

### 6. Related Work
In this section, we discuss relevant related work in the context of Android permission systems and related tools.

#### Android Permission System
Prior to Android M, the system used an "ask-on-install" model for requesting permissions. Numerous studies have highlighted the ineffectiveness of this approach and the need for better permission management. Research has shown that few users review permission requests, and even fewer can correctly understand how permissions are mapped to sensitive resources [15, 22, 26, 44]. The problem of apps abusing sensors and permissions has been well-documented [36, 42].

Various techniques have been proposed to help users manage permissions more effectively:
- **Stowaway** [14] determines the set of API calls an app uses and maps these to permissions to detect privilege escalation.
- **Ismail et al.** [23] proposed using crowdsourcing to find minimal sets of permissions for apps.
- **Liu et al.** [10] developed a personal assistant to help manage permissions.
- **TaintDroid** [12] performs dynamic taint analysis to uncover potential permission misuse.
- **Livshits et al.** [28] provided an automated way of inserting prompts before sensitive API calls.
- A field study by **Wijesekera et al.** [47] found that apps often abuse permissions once granted, and users desire greater control over sensitive information.

Dynamic permissions (such as those in Android M and iOS) address some of these concerns, but once granted, permissions are rarely revoked in practice. This highlights the need for finer-grained, more intelligent permission management.

#### Android M
**Andriotis et al.** [2] conducted a study on users' adaptation to Android M and found that users generally prefer the new model over the old one. The study also emphasized the need for developers to migrate their apps to the new permission model. **revDroid** [13] analyzed how often app crashes occur due to permission revocation in off-the-shelf Android applications targeting Android M, highlighting the importance of proper permission revocation handling.

#### Annotations
Google [11] has developed a set of annotations for permissions in Android, primarily used in code inspection tools like lint. **APE** [29] uses an annotation language and middleware service to facilitate the development of energy-efficient Android apps. In Java, Aspect-Oriented Programming (AOP) is used by frameworks like Spring [6] to provide declarative enterprise services and allow users to implement custom aspects. Our work automatically annotates Android code to help developers adopt the new permission model.

### 7. Discussion

#### Automated Annotation Extraction
Currently, Droid M+ cannot automatically generate the functionality, reason, and feedback within the annotations, as it requires contextual reasoning. However, researchers have shown that natural language processing (NLP) can infer app functionalities from their descriptions [33]. We plan to explore using NLP to extract context information directly from target apps in the future.

#### Per-Functionality Permission
While the new Android permission model is an improvement, it still has limitations. Specifically, once a user grants a permission, it is shared across all functionalities requiring that permission. For example, granting the Location permission to a map app for finding the current location can also be used by third-party libraries, potentially violating the user's privacy [48]. A recent study [47] found that for the "ask-on-first-use" strategy employed by Android M and iOS, participants' subsequent decisions to grant a permission matched their first decision only about half the time (51.3%).

To quantify the extent to which permissions are shared across functionalities, we analyzed 1638 apps with revocable permissions. Table 2 shows the results: 51% of the apps share at least one permission across multiple functionalities. In 60% of these cases, the permission is shared by up to 5 functionalities; in the remaining cases, it is shared between 5 and 20 functionalities.

We propose two improvements to address this issue:
1. **Aggregated Explanation Messages**: Under the current Android M permission model, providing more education to the user with aggregated explanation messages from multiple functionalities can offer transparency. Droid M+ implements this solution, as shown in Fig. 10.
2. **Per-Functionality Permission Model**: Extending the "ask-on-first-use" strategy to work on a triplet  instead of the pair  would allow permissions to be approved per functionality. Droid M+ can help port existing apps to this new model by identifying and annotating different functionalities, identifying required permissions, and generating permission request code.

#### Unpredictable App Behaviors
Since Droid M+ introduces non-trivial changes in the source code, it is important to ensure that these changes do not break the app or induce unpredictable behaviors. We tested most apps in our dataset to ensure they worked as expected. If requested permissions are always granted, Droid M+ will not change app behavior, as it simply adds permission checks. However, denied execution branches are more problematic. Droid M+ helps by inserting checks for needed permissions and indicating where the permission-denied callback should be implemented. By default, Droid M+ displays an error message and exits if a permission is denied to prevent inconsistent states. Alternatively, depending on the nature of the denied permissions, more graceful handlers can be generated.

#### Other Issues
As discussed in ยง3, the manual process of checking whether permissions are legitimately asked upfront is subjective. Techniques such as crowdsourcing [27] can alleviate this subjectivity. Additionally, there is little work on understanding the privacy implications of normal permissions as defined by Google. We defer the study of these issues to future work.

### 8. Conclusions
Given the criticisms of Android's permission models, Google revamped the model in Android 6.0. Our in-depth measurement study found that many apps from the Google Play store have either not migrated to the new model or do not follow Google's guidelines effectively. We believe this is partly due to the lack of tools that make it easy for developers to adopt the new model. To address this, we designed and implemented Droid M+, a tool that helps developers refactor their code to adopt the new model. Case studies and general app evaluations show that Droid M+ can help developers evolve their legacy code to adhere to Google's guidelines.

### 9. Acknowledgments
This research was partially sponsored by the Army Research Laboratory under Cooperative Agreement Number W911NF-13-2-0045 (ARL Cyber Security CRA). The views and conclusions in this document are those of the authors and do not represent the official policies of the Army Research Laboratory or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes. The work was also partially supported by NSF Award 1617481. We thank our shepherd and the anonymous reviewers for their constructive feedback.

### References
[References listed here as in the original text]