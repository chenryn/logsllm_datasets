# 容器介绍
> 原文：
## 什么是容器
下面是一个流行的容器引擎 Docker 对容器的流行定义:
> 容器是一个标准的软件单元，它将代码及其所有依赖项打包，以便应用能够快速可靠地从一个计算环境运行到另一个计算环境
我们来分析一下。容器是与整个运行时环境捆绑在一起的代码。这包括运行应用所需的系统库、二进制文件和配置文件。
## 为什么是容器
您可能想知道为什么我们需要将您的应用与其依赖项打包在一起。这就是定义的第二部分，
> ...因此，应用可以快速可靠地从一个计算环境运行到另一个计算环境。
开发人员通常在他们的开发环境(或本地机器)中编写代码，在将代码投入生产之前，在一个或两个测试环境中进行测试。理想情况下，为了在推向生产之前可靠地测试应用，我们需要所有这些环境都统一到一个 tee(底层操作系统、系统库等)。
当然，这种理想很难实现，尤其是当我们混合使用本地(完全控制)和云基础架构提供商(在硬件控制和安全选项方面更具限制性)时，这种情况在今天更为常见。
这就是为什么我们不仅需要打包代码，还需要打包依赖项；以便您的应用能够可靠地运行，而不管它运行在哪个基础结构或环境上。
我们可以在一台主机上运行几个容器。由于容器的实现方式，每个容器在同一个主机中都有自己的隔离环境。这意味着一个单一的应用可以被分解成微服务并打包到容器中。每个微服务都在隔离环境中的主机上运行。这是使用容器的另一个原因:*关注点分离*。
提供隔离的环境不会让一个容器中的一个应用的故障影响到另一个。这被称为*故障隔离*。由于容器中进程的有限可见性，隔离还提供了增加安全性的额外好处。
由于大多数容器化解决方案的实施方式，我们还可以选择限制容器内运行的应用消耗的资源量。这叫做*资源限制*。Will 将在 cgroups 一节中更详细地讨论这个特性。
## 虚拟机和容器的区别
让我们稍微跑题一下，进入一些历史。在上一节中，我们讨论了容器如何帮助我们实现关注点的分离。在广泛使用容器之前，虚拟化用于在同一主机上的隔离环境中运行应用(在某些情况下，今天仍在使用)。
简单来说，虚拟化就是我们将软件与运行该软件的操作系统副本打包在一起。这个包称为虚拟机(VM)。捆绑在虚拟机中的操作系统映像称为来宾操作系统。一个名为 Hypervisor 的组件位于来宾操作系统和主机操作系统之间，负责促进来宾操作系统对底层操作系统硬件的访问。您可以在此了解有关虚拟机管理程序[的更多信息。](https://searchservervirtualization.techtarget.com/definition/bare-metal-hypervisor)
![Virtual Machine Architecture](img/7b8c93ac1b9f6216d462ede911abe6b5.png)
与在一台主机上运行多个容器类似，多台虚拟机可以在一台主机上运行，这样，就可以在一台单独的虚拟机上运行应用(或每个微服务),并实现关注点的分离。
这里主要关注虚拟机和容器的大小。虚拟机带有客户操作系统的副本，因此与容器相比重量更大。如果您对虚拟机和容器的比较更感兴趣，您可以查看来自 [Backblaze](https://www.backblaze.com/blog/vm-vs-containers/) 和 [NetApp](https://blog.netapp.com/blogs/containers-vs-vms/) 的这些文章。
虽然可以使用虚拟机管理程序(例如 CentOS 7 上的 Windows 10 虚拟机)在具有不兼容内核的主机上运行操作系统，但在内核可以共享的情况下(例如 CentOS 7 上的 Ubuntu)，由于大小因素，容器优于虚拟机。共享内核，正如您将在后面看到的，也为容器提供了许多优于虚拟机的性能优势，比如更快的启动。让我们看看容器如何工作的图表。
![Containers Architecture](img/a9907fe1d4544a94da3ca809514fd7be.png)
比较这两个图，我们注意到两件事:
*   容器没有单独的(客户)操作系统
*   容器引擎是容器和主机操作系统之间的中介。它用于促进主机操作系统上容器的生命周期(然而，这不是必需的)。
下一节将详细解释容器如何与主机共享相同的操作系统(准确地说是内核),同时为应用的运行提供隔离的环境。
## 容器是如何实现的
我们已经讨论了容器如何与虚拟机不同，与主机操作系统共享相同的内核，并为应用运行提供隔离的环境。这是在没有在主机操作系统上运行客户操作系统的开销的情况下实现的，这要归功于 linux 内核的两个特性:cgroups 和内核名称空间。
既然我们已经触及了容器的内部，那么从技术上更准确地描述它们是什么是合适的。容器是一个 linux 进程或一组 linux 进程，它被限制在- **对容器外进程的可见性**(使用名称空间实现)——**它可以使用的资源数量**(使用 cgroups 实现)以及- **可以从容器进行的系统调用**。如果有兴趣了解更多信息，请参考 [seccomp](https://docs.docker.com/engine/security/seccomp/) 。
这些限制使得容器化的应用与运行在同一主机上的其他进程保持隔离。
现在让我们更详细地讨论一下名称空间和 cgroup。
## 名称空间
容器内部流程的可见性应该被限制在容器内部。这就是 linux 名称空间的作用。这个想法是命名空间中的进程不能影响那些它不能“看到”的进程。共享单个命名空间的进程具有对它们所在的命名空间唯一的身份、服务和/或接口。以下是 linux 中的名称空间列表:
*   *挂载*
共享一个挂载名称空间的进程组共享一组单独的、私有的挂载点和文件系统视图。对这些命名空间挂载点的任何修改在命名空间之外都是不可见的。例如，装载命名空间中的/var 可能与主机中的/var 不同。
*   *PID*
pid 命名空间中的进程具有仅在命名空间中唯一的进程 id。一个进程可以是它自己的 pid 名称空间中的根进程(pid 1 ),并且在它下面有整个进程树。
*   *网络*
每个网络名称空间都有自己的网络设备实例，可以用单独的网络地址进行配置。同一网络命名空间中的进程可以有自己的端口和路由表。
*   *用户*
用户名称空间可以有自己的用户和组 id。主机中使用非特权用户的进程可能在用户名称空间中拥有根用户身份。
*   *Cgroup*
允许创建只能在 cgroup 命名空间中使用的 cgroup。下一节将更详细地介绍 Cgroups。
*   *UTS*
这个名称空间有自己的主机名和域名 IPC。每个 IPC 名称空间都有自己的 System V 和 POSIX 消息队列。
尽管看起来很复杂，但在 linux 中创建名称空间非常简单。让我们看一个创建 PID 名称空间的快速演示。你需要一个基于 linux 的操作系统，并得到 sudoers 的许可。