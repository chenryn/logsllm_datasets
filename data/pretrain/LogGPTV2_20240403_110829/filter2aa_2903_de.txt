上面这个信息来自以下代码。
if (obj->stolen)
    seq_printf(m, " (stolen: %08llx)", obj->stolen->start);
也就是说，如果这个内存块的stolen指针不为空，就输出stolen信
息，后面的数字是这个内存块相对于显存基地址的偏移量。
11.9.2 PPGTT
与CPU上每个进程有自己的地址空间类似，GPU上的每个任务也可
以有自己的地址空间，PPGTT就是为这个目的而设计的。在今天的GPU
软件栈中，一般用GPU上下文来管理GPU的任务，每个上下文结构中，
一般定义一个字段指向它对应的PPGTT。比如，在i915驱动中，可以通
过下面这样的代码获取ppgtt指针。
struct i915_hw_ppgtt *ppgtt = ctx->ppgtt;
PPGTT的格式也是与Gen版本有关的，从Gen8开始，通常使用的是
与x64类似的4级页表格式。4个级别的页表有时用L4、L3这样的方式描
述，有时用专门的名字，分别叫叶映射表、页目录指针表、页目录表和
页表，对应的表项经常简写为PML4E（页映射表项）、PDPE（页目录
指针表项）、PDE（页目录表项）和PTE（页表表项）。
在Ubuntu系统下，可以通过i915的虚拟文件来观察PPGTT。方法依
然是先切换到/sys/kernel/debug/dri/0目录，然后执行cat i915_ppgtt_info命
令。
命令结果中包含所有使用PPGTT的进程，以及每个进程的PPGTT信
息。例如，下面是Xorg进程的信息。
proc: Xorg
  default context:
  context 1:
    PML4E #0
   PDPE #0
        0x0 [000,000,0000]: = 23a13f083 23a140083 23a141083 23a142083
        0x4000 [000,000,0004]: = 23a143083 23a144083 23a145083 23a146083
上述信息来自gen8_dump_pdp函数（i915_gem_gtt.c）。这个函数会
依次遍历PPGTT的4级页表，上面第4行和第5行表示0号页映射表项和0
号页指针表项，接下来本应该有PDE #0这样的页目录表项信息，但是目
前代码没有输出，而是直接输出PTE了。输出PTE的方法是从0号表项开
始每行输出4个表项，以等号分隔成左右两个部分。
左侧的第一个数字是GPU的虚拟地址，也就是4个连续页中第一页
的起始地址，是映射后的虚拟地址。上面倒数第2行对应的是0号PML4E
的0号PDPE的0号PDE的0号PTE，所以其虚拟地址就是0。方括号中的三
个数字分别是PDPE、PDE和PTE编号，依然描述的是该行4项中第一项
的情况。
等号右侧是4个PTE的原始数据，其格式与CPU的非常类似，低12
位表示页属性，高位部分是该页的物理地址。很容易看出，上面显示的
两行一共映射了8个物理页，8个页的物理地址是连续的，页框号从
23a13f到23a146。
11.9.3 I915和GMMLIB
全面介绍GPU的GTT格式和虚拟内存机制超出了本书的范围。上面
的简单介绍只是为了给读者打个基础，为解决调试时遇到的有关问题做
一点准备。对于希望深入学习这部分内容的读者，i915驱动是很好的资
源。此外，英特尔还通过GitHub站点公开了一套名为gmmlib的源代码，
这也是很宝贵的资源。
11.10 异常
与英特尔CPU的异常机制类似，GEN GPU也有异常机制。考虑到
异常机制与调试设施关系密切，本节根据公开的PRM文档，对其作简单
介绍。
11.10.1 异常类型
根据来源和用途的不同，Gen的异常分为多种类型（见表11-4），
这个信息来自公开PRM的EU部分。
表11-4 GEN架构定义的异常类型
类  型
触发或者来源
识 别 方
式
软件异常
GPU线程的代码
同步
断点
指令字中的断点位 IP匹配断点命中 操作码匹配断点
命中
同步
非法指令
硬件
同步
暂停（halt）
写MMIO寄存器
异步
上下文保存和恢
复
抢先调度中断（preemption interrupt）
异步
表11-4中，最后一列是指GPU响应异常的方式，也称为识别
（recognition）方式，它分为同步和异步两种。所谓同步方式是指GPU
在执行过程中“自己意识”到异常并立刻中断当前执行的程序去处理异
常。异步方式的异常都来自GPU外部，当时GPU可能在忙于执行其他任
务，因此它可能不能立刻检测到异常。
上述异常是可以屏蔽的，ARF寄存器中cr0.1的低16位用来禁止或者
启用异常。
当GPU检测到异常后，会设置cr0.1中高16位中的对应位。值得说明
的是，即使某个异常被禁止了，当GPU检测到异常条件时，仍然会设置
对应的异常位。
11.10.2 系统过程
与CPU遇到异常会跳转到软件设计的异常处理函数类似，当GPU遇
到异常时，会跳转到一个特殊的函数，名叫系统过程（system
routine）。简单理解，系统过程就是部署给GPU的异常处理函数。
在跳转到系统过程之前，GPU会把当时的程序指针（Application
IP，AIP）保存到c0.2寄存器中。然后把系统过程的起始地址赋给程序指
针（IP）寄存器。
当执行系统过程后，GPU可以通过s0.2中保存的AIP信息返回应用
程序。当再有异常时，再跳转到系统过程。
在Gen的手册中，经常把系统过程的入口位置称为SIP。在创建GPU
任务时，可以通过STATE_SIP字段来指定系统过程的位置。在使用
Code-Builder等工具调试OpenCL程序时，OpenCL运行时会通过驱动向
GPU部署一个支持调试的系统过程。如果因为运行时或者驱动版本等原
因导致这个动作失败，那么调试工具就可能报告如下错误。
igfxdcd: failed to locate the system routine[9].
这个错误是致命的，一旦发生就意味着很多调试功能都不能工作
了。
11.11 断点支持
断点是非常常用而且基本的调试功能，Gen提供了三种形式的断点
支持。本节将分别介绍相关内容。
11.11.1 调试控制位
在Gen的长指令中，有一位专门用于支持调试，名叫调试控制
（DebugCtrl）位。当Gen的EU执行指令时，会先检查这个控制位，一
旦发现其为1就会报告断点异常，跳转到系统过程。这意味着，当算核
函数中的断点命中时，断点所在位置的指令还没有执行。
为了帮助调试器“走出”断点，在Gen的控制寄存器CR0.0中有个断点
抑制（breakpoint suppress）标志，调试器软件可以通过系统过程设置这
个标志，这样恢复执行后，GPU会重新执行有断点的指令，但不会再报
告断点异常。这样做的一个好处是不会影响其他线程命中断点。
在公开的文档中，没有详细描述调试控制位的定义，通过调试跟
踪，很可能第Bit位为DebugCtrl位。调试辅助驱动通常用0x40000041与
目标指令做“或”操作来置位。
11.11.2 操作码匹配断点
GEN还支持所谓的操作码匹配断点。当EU执行程序时，一旦遇到
包含指定操作码的指令，就触发断点异常。
调试工具可以通过MMIO寄存器设置这类断点。在G965 PRM的卷4
中，可以找到两个有关的寄存器，分别叫ISC_L1CA_BP_OPC1（地址
为8294h～8297h）和ISC_L1CA_BP_OPC2（地址为8298h～829Ch）。
二者格式和用法相同，第16～23位用于指定要设置的操作码，第0位用
于启用和禁止。
11.11.3 IP匹配断点
除了按操作码设置断点之外，也可以通过指定代码地址来设置断
点，Gen将其称为IP匹配断点。
与上面的操作码断点类似，调试工具也通过MMIO寄存器来设置IP
匹配断点，仍然可以在G965 PRM的卷4中找到两个寄存器，分别名叫
ISC_L1CA_BP_ADR1（地址为8288h～828Ch）和
ISC_L1CA_BP_ADR2（地址为8290h～8293h）。两个寄存器的用法和
格式相同，第4～31位用来指定地址的高28位。因为Gen指令的地址都是
8字节对齐的，所以没有必要指定低3位。第0位用于临时禁止和启用。
如此看来，可以最多设置两个IP匹配断点。
值得说明的是，上面介绍的三种方式中，后两种是基于前一种的。
当调试工具通过MMIO寄存器设置后两种断点时，GPU内部的取指单元
会得到这个信息，并在获取指令时执行匹配逻辑。匹配成功后，会修改
对应的指令，设置调试控制位，并把修改后的指令写到L1指令缓存中。
因此，设置后两种断点的MMIO寄存器名字中都包含L1CA字样，这里
L1CA是L1 Cache的缩写。
11.11.4 初始断点
在Gen的MMIO寄存器中，有一个名叫TD_CTL的寄存器，其地址
为8000h～8003h。这个寄存器也叫调试控制（Debug Control）寄存器，
包含了多个与调试有关的控制标志，它的第4位用于启用强制线程断点
（Force Thread Breakpoint Enable）。这一位设置后，每个新的线程开始
执行时都会产生一个断点异常，目的是中断到调试器（break into
debugger）。这个断点称为GPU线程的初始断点。TD_CTL中的TD代表
EU的线程分发器（Thread Dispatcher）。简单理解，一旦启用强制线程
断点后，每当线程分发器分发新的线程时就会触发断点异常。
11.12 单步执行
单步跟踪堪称与断点并列的常用调试功能。无论是源代码级别的单
步跟踪还是汇编指令集级别的单步跟踪都离不开处理器的硬件支持。与
断点设施一样，在经典的G965中就有单步跟踪支持。
简单来说，Gen的单步设施主要依靠cr0.1控制寄存器中的“断点异常
状态和控制”（breakpoint exception status and control）位。
通常，单步跟踪都是先通过断点让目标程序中断到调试器。中断之
后，EU会自动设置cr0.1中的断点异常状态和控制位。之后，当用户选
择单步执行时，调试器故意不清除断点异常状态和控制位，并设置断点
抑制位，这样EU在准备执行指令时，看到断点抑制标志，自动将其复
位，但不报告异常。当EU执行这条指令后，如果检查到断点异常状态
位，就会报告新的断点异常。于是便又中断到调试器中，而在这个过程
中，刚好执行完了一条指令。
当用户直接恢复目标执行并且不再单步跟踪时，调试器只要清除掉
cr0.1中的断点异常状态和控制位就可以了。
11.13 GT调试器
与Nvidia的CUDA GDB、AMD的ROCm GDB类似，英特尔也为自
己的GEN GPU开发了一个调试器，并且也是基于 GDB 的。目前发布的
版本把这个调试器叫GT 调试器（GT Debugger），GT是英特尔对Gen
GPU技术的一种模糊称呼，比如GT2、GT3等。其实，既然是基于GDB
的，叫Gen GDB不是很好吗？
11.13.1 架构
与其他跨进程的GPU调试模型类似，GT调试器的架构也是多进程
的。图11-16画出了在Visual Studio环境下调试OpenCL算核函数时的架
构示意图。图中画出了参与调试过程的主要软件，左侧的软件在CPU
端，右侧的软件在GPU端。
图11-16 GT调试器架构示意图
需要说明的是，对于目前发布的GT调试器和OpenCL SDK，如果要
调试在GPU上运行的算核函数，必须使用远程调试方式。其中的一个原
因是为了防止GPU在算核函数中断或者处理其他调试任务时无暇处理图
形显示而导致GUI死锁。
当在Visual Studio中开始调试时，Visual Studio的组件msvsmon会创
建被调试进程。被调试进程初始化OpenCL运行时，运行时模块内的调
试支持会通过显卡驱动部署用于调试的系统过程（SR）。
在启动被调试进程后，安装在Visual Studio中的Code-Builder插件
（OpenCL SDK的一部分）会得到消息，然后根据配置启动
GdbServer（这是可以禁止的，配置项在Visual Studio菜单栏的
Tools→Code-Builder下）。GdbServer启动后会附加到被调试进程中，并
在控制台窗口显示如下信息（删除了空行）。
Executing: C:\Intel\OpenCL\debugger\target\bin\gdbserver.exe :2530 --attac
h 6480
Started gdbserver, listening on localhost:2530
上述信息中的6480是被调试算核函数宿主进程的进程ID。
GdbServer会加载名为Igfxdbg的动态库模块，这个模块内包含了大
多数用于GPU调试的函数，其作用与Nvidia和AMD的GPU调试SDK核心
模块相当，英特尔将其称为调试支持库（Debug Support Library，