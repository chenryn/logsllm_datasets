---
author: Seth Kenlon
category: 软件开发
comments_data:
- date: '2021-05-25 12:42:41'
  message: 抗费搁；昧磕；妹氪因斯道
  postip: 216.24.188.76
  username: 来自美国的 Chrome 90.0|GNU/Linux 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5026
date: '2021-05-24 18:35:39'
editorchoice: false
excerpt: CMake 是一个跨平台的编译、测试和打包软件，即使你以前从来没有使用过构建系统，也可以轻松上手。
fromurl: https://opensource.com/article/21/5/cmake
id: 13419
islctt: true
largepic: /data/attachment/album/202105/24/183520grnp3821rmmpg1ug.jpg
permalink: /article-13419-1.html
pic: /data/attachment/album/202105/24/183520grnp3821rmmpg1ug.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: CMake 是一个跨平台的编译、测试和打包软件，即使你以前从来没有使用过构建系统，也可以轻松上手。
tags:
- CMake
- make
- Autotools
thumb: false
title: 抛弃 Autotools 向 CMake 迈进吧
titlepic: true
translator: amwps290
updated: '2021-05-24 18:35:39'
---
> 
> CMake 是一个跨平台的编译、测试和打包软件，即使你以前从来没有使用过构建系统，也可以轻松上手。
> 
> 
> 
![](/data/attachment/album/202105/24/183520grnp3821rmmpg1ug.jpg "Someone wearing a hardhat and carrying code ")
在我以前的文章 [Autotools 入门](https://opensource.com/article/19/7/introduction-gnu-autotools) 一文中，我说明了如何使用 Autotools 来管理和打包代码。这是一个强大且通用的平台，可轻松集成到许多打包系统中，包括 RPM、APT、[pkgsrc](https://opensource.com/article/19/11/pkgsrc-netbsd-linux) 等等。它的语法和结构可能会令人困惑，但幸运的是，我们还有其他选择，开源的 [CMake](http://cmake.org) 就是其中一个。
CMake 是一个用于构建、测试和打包软件的跨平台套件。它使用简单而清晰的语法，因此即使你以前从未使用过构建系统，也很容易开始使用。
### 安装 CMake
CMake 可能已经安装在你的 Linux 系统上。如果没有，你可以使用发行版的程序包管理器进行安装：
```
$ sudo dnf install cmake
```
在 Debian 或者其他相似的系统上：
```
$ sudo apt install cmake
```
在 Mac 上，你可以使用 [MacPorts](https://opensource.com/article/20/11/macports) 或者 [Homebrew](https://opensource.com/article/20/6/homebrew-linux) 来安装:
```
$ sudo port install cmake
```
在 Windows 上，你可以使用 [Chocolatey](https://opensource.com/article/20/3/chocolatey) 或者直接从 [CMake 网站](https://cmake.org/download) 下载二进制来安装。
### 使用 CMake
对于想要从源代码构建软件的开发人员或用户来说，CMake 是一种快速简便的编译和安装方法。 CMake 分阶段工作：
1. 首先，在 `cmake` 步骤中，CMake 扫描计算机查看一些默认设置。默认设置包括库的位置以及在系统上安装软件的位置。
2. 接下来，使用系统上的 `make` 命令（在 Linux 上是 GUN Make，在 [NetBSD](https://opensource.com/article/19/3/netbsd-raspberry-pi) 上是 NetBSD Make）来编译程序。这个过程通常是将人类可读的源代码转换成机器语言。
3. 最后，在 `make install` 一步中，那些编译过的文件将被拷贝到（在 `cmake` 步骤中扫描出来的）计算机上合适的位置。
这看起来很简单，当你使用 CMake 时就是这样。
### CMake 的可移植性
CMake 在设计时就考虑了可移植性。虽然它不能使你的项目在所有 POSIX 平台上都能正常工作（这取决于作为开发者的你），但它可以确保将标记为要安装的文件安装到已知平台上最合适的位置。而且由于有了 CMake 之类的工具，对于高级用户而言，根据其系统需求自定义和覆盖任何不合适的选项都很容易。
使用 CMake，你只需要知道将哪些文件安装到哪个常规位置即可。它会照顾其他一切。不再需要自定义安装脚本，它们有可能在任何未经测试的操作系统上失败。
### 打包
像 Autotools 一样，CMake 也得到了很好的打包支持。无论它们是打包成 RPM 还是 DEB 或 TGZ（或其他任何东西），将带有 CMake 的项目交给打包者，他们的工作既简单又直接。打包工具支持 CMake，因此可能不需要进行任何修补或者调整。在许多情况下，可以自动将 CMake 项目整合到工作流中。
### 如何使用 CMake
要在项目中使用 CMake，只需在项目目录中创建 `CMakeLists.txt` 文件。首先，声明最低要求的 CMake 版本以及项目名称和版本。CMake 会努力在尽可能长时间内保持兼容性，但是随着你使用的时间越长，并且关注它最新的开发动态，你就会知道哪些特性是你所依赖的。
```
cmake_minimum_required(VERSION 3.10)
project(Hello VERSION 1.0)
```
如你可能已经看到的那样，CMake 的语法是一个带有括号和参数的命令。大写的 `VERSION` 字符串不是任意的，也不只是格式。它们是 `project` 命令中的有效参数。
在继续之前，先写一个简单的 C 或者 C++ 的 `hello world` 程序。为了简单，我就写了六行 C 代码，并把它保存在 `hello.c` 中（为了匹配我在 `CMakeLists.txt` 中可执行文件的名字）。
```
#include 
int main() {
   printf("Hello open source\n");
   return 0;
}
```
不过，不要搞错了，CMake 不仅适用于 C 和 C++。它可以处理任意文件，并且有许多可用的命令，因此它可以帮助你维护许多不同形式的项目。
CMake 网站中记录了所有有效的内置命令及其可用参数，因此无论你要做什么，都可以轻松发现所需的功能。不过，这是一个简单的示例，因此，你需要的下一个命令是必不可少的 —— 你必须为 CMake 定义要构建的代码：
```
add_executable(Hello hello.c)
```
这个命令指定了你编译后的二进制文件的名字为 `Hello`。因此，它与你在终端中执行带有 `-o Hello` 的 `gcc` 命令是一样的。
在一些比较复杂的项目中，你可能还需要使用库文件，你可以使用 `add library` 命令来链接库文件。
在你设置了你想要构建和标记为安装的文件之后，你必须要告诉 CMake 一旦用户安装了程序，最终的应用程序应该在哪个位置。
在这个简单的例子里，你仅需要做的一件事就是在你的 `CMakeLists.txt` 文件里添加 `install` 命令。`install` 命令接受几个参数。但是在这个例子中，你仅需要使用 `TARGET` 命令来指定你要安装文件的名字。
```
install(TARGETS Hello)
```
### 向 CMake 工程添加一些文件
一个软件项目向用户交付的往往不仅仅只有代码，还有一些其他的文件数据，例如手册或者是信息页、示例项目，或者是配置文件。你可以使用与包含编译文件时类似的工作流程，将任意数据包含在 CMake 项目中：在 `CMakelists.txt` 文件中使用 `file` 命令，然后说明一下这些文件要安装在哪里。
例如，你可以在这个项目中包含一个 `assets` 目录，你可以使用 `file` 命令，后面跟上 `COPY` 和 `DESTINATION` 参数来告诉 CMake 将这些额外的文件复制到你的分发包中。
```
file(COPY assets DESTINATION "${CMAKE_CURRENT_BINARY_DIR}")
```
这个 `${CMAKE_CURRENT_BINARY_DIR}` 变量是一个特殊的 CMake 内置变量，表示 CMake 正在处理的目录。换句话说，你的任何文件都会被复制到编译目录（在你运行 `cmake` 命令后，这个过程会更加清晰，到时候回过头来看一下）。
因为这些额外的数据文件有些杂乱不堪（如果你不信的话，可以看一下 `/usr/share` 这个目录）。对于你自己的项目创建一个子文件夹对谁都有好处。最好也带上版本名字。你可以通过在 `CMAKE_CURRENT_BINARY_DIR` 中指定一个新的目录，使用你选择的项目名称，后面跟一个为你的项目命名的特殊变量和你在项目声明中为它设置的 `VERSION`。