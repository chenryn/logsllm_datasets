My issue is about to solve a sparse linear system is much slower in Scipy than
in Matlab.
### Reproducing code example:
I tried the following script in python
    import numpy as np
    import scipy.sparse.linalg
    import time
    N = 6 
    diagonals = np.zeros((3, N))   # 3 diagonals
    diagonals[0,:] = np.linspace(-1, -N, N)
    diagonals[1,:] = -2
    diagonals[2,:] = np.linspace(1, N, N)
    time1 = time.time()
    A = scipy.sparse.spdiags(diagonals, [-1,0,1], N, N, format='csc')
    print "spdiags takes " + str(time.time()-time1)
    x = np.linspace(-1, 1, N)  # choose solution
    b = A.dot(x)               # sparse matrix vector product
    time1 = time.time()
    x = scipy.sparse.linalg.spsolve(A, b)
    print "solve a linear system takes" + str(time.time()-time1)
    print x
Result:
    spdiags takes 0.000300168991089
    solve a linear system takes0.000184059143066
    [-1.  -0.6 -0.2  0.2  0.6  1. ]
I also tried the following code in Matlab:
    N = 6;
    diagonals = zeros(N, 3);
    diagonals(:,1) = linspace(-1, -N, N);
    diagonals(:,2) = -2;
    diagonals(:,3) = linspace(1, N, N);
    tic
    A = spdiags(diagonals, -1:1,N,N);
    toc
    x = linspace(-1, 1, N)';
    b = A * x;           
    tic
    x = A\b;
    toc
    x
Result:
    Elapsed time is 0.000452 seconds.
    Elapsed time is 0.000073 seconds.
    x =
       -1.0000
       -0.6000
       -0.2000
        0.2000
        0.6000
        1.0000
It only takes 0.000073 seconds in Matlab while 0.000184059143066 in Scipy.
### Scipy/Numpy/Python version information:
    import sys, scipy, numpy; print(scipy.__version__, numpy.__version__, sys.version_info)
    ('1.1.0', '1.13.3', sys.version_info(major=2, minor=7, micro=14, releaselevel='final', serial=0))