set of functionalities; (2) trace programs with the training
inputs and debloat them with none, zCode, zCall, zLib, and
zFunc heuristics; (3) run debloated binaries on testing in-
puts and record the failed cases. The setting of evaluating
PathFinder is given in Table 7 of Appendix A. We use the
same options for training inputs and testing inputs to make
sure that the debloated binaries are tested for the same func-
tionalities as those triggered by the training inputs. The dif-
ference is the concrete value for each option or the file to
process. For example, when creating folders with mkdir, we
use various parameters of the option -m for different file mode
sets. For program bzip2 and gzip, we use different files for
training and testing.
Figure 8 presents our evaluation result, including the code
reduction (the top half) and the number of failed test cases
(the bottom half) under different heuristics. We can see that
debloating with a more aggressive heuristic leads to more
successful executions. All binaries generated without any
heuristic fail on some testing inputs. grep fails on all 38 test-
ing inputs, while chown and rm fail more than half of all tests.
The zCode heuristic helps mitigate the crash problem, like
making grep work on 19 test cases. However, all generated
binaries still fail some inputs. The zCall heuristic further
improves the debloating quality. For program sort, tar, and
uniq, it avoids all previous crashes. With the zLib heuristic,
only two programs (i.e., chown and rm) still have a small num-
ber of failures. In the end, debloating with the zFunc heuristic
1742    28th USENIX Security Symposium
USENIX Association
if (...) ...
if (minsize length - 1UL;
blen = b->length - 1UL;
if (alen == 0UL) {
1 int compare(line *a,line *b) {
2
3
4
5
6
7
8
9
10 }}
Figure 11: A crash case reduced
by applying zCall heuristic.
if (blen == 0UL) {
} else { ... }
} else {
diff = 1;
fail = make_dir(..);
if (!fail) {
if (!create_parents) {
if (!dir_created) {
1 int main(...) { ...
2
3
4
5
6
7
8
9
10 }}}}
Figure 12: A crash case reduced
by applying zLib heuristic.
tmp_7=gettext("error");
error(0,17,tmp_7,tmp_6);
fail = 1;
...
reduces all crashes in all programs.
Interestingly, although aggressive heuristics introduce more
code to the debloated binary (shown in the top of Figure 8),
they do not significantly decrease the code reduction. Without
any heuristic, the average code reduction rate of 10 programs
is 78.7%. The number is reduced by −0,4%, 3.8%, 8.8%,
and 12.6% when applying zCode, zCall, zLib, and zFunc
heuristics, respectively. Therefore, even with the most aggres-
sive zFunc heuristic, the code reduction does not decrease
heavily. At the same time, all crashes are resolved, showing
the benefits of applying heuristics. Note that the zCode heuris-
tic slightly increases the code reduction over the no heuristic
case, as it enables more branches of conditional jumps, which
in turn reduces the instrumentation of failed branches.
We investigated the failed cases mitigated by different
heuristics and show some case studies as follows:
(1) The zCode heuristic enables the non-taken branch for
executed conditional jumps. Figure 9 shows part of the func-
tion fillbuf of program grep that fails if we do not use the
zCode heuristic. The training inputs always trigger the true
branch of the condition at line 2 and jump to line 3, which
in turn reach line 4. However, in the execution of testing
inputs, the conditional at line 2 takes the false branch (i.e.,
minsize > maxsize_off) and triggers the jump from line 2
to line 4. This branch is not allowed from execution traces.
The zCode heuristic enables this branch, as line 4 has been
reached in the previous execution.
(2) The zCall heuristic includes alternative paths that do not
trigger any call instructions. Figure 11 shows an example
where the zCall heuristic helps include necessary code in the
debloated binary. Function compare in program sort uses
a sequence of comparisons to find whether two text lines
are different. Since the training inputs have no empty lines,
the condition at line 4 and line 7 always fails. However, the
testing inputs contain empty lines, which makes these two
conditional jumps take the true branches. The zCode heuris-
Program
bzip2-1.0.5
CVE
CVE-2010-0405
CVE-2011-4089*
CVE-2008-1372
CVE-2005-1260
Orig
✓
✗
✗
✗
chown-8.2
date-8.21
CVE-2017-18018*
CVE-2014-9471*
grep-2.19
gzip-1.2.4
mkdir-5.2.1
rm-8.4
sort-8.16
tar-1.14
uniq-8.16
CVE-2015-1345*
CVE-2012-5667
CVE-2005-1228*
CVE-2009-2624
CVE-2010-0001
CVE-2005-1039*
CVE-2015-1865*
CVE-2013-0221*
CVE-2016-6321*
CVE-2013-0222*
✓
✓
✓
✗
✓
✓
✓
✓
✓
✗
✓
✗
Chisel
Razor
✘
✘
✘
✘
✔
✔
✘
✘
✘
✔
✘
✘
✘
Table 3: Vulnerabilities before and after debloating by RAZOR and
CHISEL. ✓ means the binary is vulnerable to the CVE, while ✗
mean it is not vulnerable. CVEs with ∗ are evaluated in [15].
tic adds lines 5 and 8 and related branches to the debloated
program, which effectively avoids this crash.
(3) The zLib heuristic allows extra calls to native functions
or library functions if they have been used in traces. It helps
avoid a crash in program mkdir when we use the debloated
binary to change the file mode of an existing directory. Fig-
ure 12 shows the related code, which crashes because of the
missing code from line 6 to line 9. Since mkdir does not
allow changing the file mode of an existing directory, the
code first invokes function gettext to get the error message
and then calls library function error to report the error. The
zLib heuristic includes this path in the binary because both
gettext and error are invoked by some training inputs.
(4) The zFunc heuristic includes alternative paths that invoke
similar library functions. Figure 10 shows the code that causes
rm to fail without this heuristic. When rm deletes a folder that
contains both files and folders, it triggers the code at line 3 to
check whether it is traversing to the parent directory. Since the
training inputs never call strcmp, the debloated binary fails
even with the zLib heuristic. However, the training inputs
ever invoke function strncmp, which has the functionality
similar to strcmp (i.e., string comparison). Therefore, the
zFunc heuristic adds this code in the debloated binary.
The results show that PathFinder effectively identifies
related-code that completes the functionalities triggered by
training inputs. It enhances the robustness of the debloated
binaries while retaining the effectiveness of code reduction.
5.4 Security Benefits
We count the number of reduced bugs to evaluate the se-
curity benefit of our debloating. For each program in the
CHISEL benchmark, we collected all its historical vulnera-
USENIX Association
28th USENIX Security Symposium    1743
bilities, including the ones shown in the current version and
the ones only in earlier versions. For the former bugs, we
check whether the buggy code has been removed by the de-
bloating process. If so, the debloating process helps avoid
related attacks. For the latter bugs, we figure out whether
their patches are retained in the debloated binary. If not, the
debloated process makes the program vulnerable again. Ta-
ble 3 shows our evaluation result, including 16 CVEs related
to CHISEL benchmarks. 13 bugs are shown in the current
version, and 10 of them are evaluated in [15] (followed by *).
Three bugs only exist in older versions (i.e., CVE-2010-0405,
CVE-2009-2624, and CVE-2010-0001).
RAZOR successfully removes four CVEs from the original
binaries and does not introduce any new bugs. Specifically,
CVE-2017-18018 in chown, CVE-2015-1345 in grep, CVE-
2005-1228 and CVE-2010-0001 in gzip are removed in the
debloated binaries. Six vulnerabilities from bzip, date, gzip,
mkdir, rm, and tar remain, as the test cases execute related
vulnerable code. Another six vulnerabilities are not caused by
the binary itself. For example, CVE-2011-4089 is caused by
the race condition of the bash script bzexe, not by the bzip2
binary. Therefore, RAZOR will not disable such bugs.
With a more aggressive code removal policy, CHISEL dis-
ables two more CVEs than RAZOR, but unfortunately brings
three old bugs to the debloated binaries. Specifically, CHISEL
removes the vulnerable code of CVE-2014-9471 from date
and the code of CVE-2016-6321 from tar. Meanwhile, it re-
moves the patches of CVE-2008-1372 and CVE-2005-1260 in
bzip2, and CVE-2012-5667 in grep, rendering the debloated
binaries vulnerable to these already-fixed bugs.
Compared to CHISEL, RAZOR removes the bloated code
in a conservative way. Although such strategy may hinder
removing more bugs, but it also helps avoid new bugs in the
debloated binary. This result is consistent with our findings
in §5.2, where CHISEL achieves higher code reduction but
fails some expected functionalities.
Reduction of ROP gadgets. We also measured the reduc-
tion of ROP gadgets. Once the attacker is able to divert the
control-flow, the number of reusable ROP gadgets indicate
the vulnerability of the program to control-flow hijacking
attacks. Figure 7c show that RAZOR reduces 61.9% ROP gad-
gets, while CHISEL reduces 85.1% ROP gadgets. Although
RAZOR achieves less ROP gadget reduction, this result is
expected. In the design of RAZOR, we intentionally pay more
attention on preventing forward-edge control-flow attacks,
where attackers corrupt function pointers, instead of return
addresses, to diver the control-flow. As shadow stack tech-
nique are getting deployed in compilers [24] and even hard-
ware [19], our technique of indirect call/jump concretization
(§3.3.2) complements existing practical return-protections to
achieve complete control-flow integrity.
16%
8%
6%
4%
2%
0%
Razor
-2%
p
d
3
milc
M
cs
ess
p
waves
cf
usm
m
a
D
leslie
m
m
ctusA
ga
gro
e
z
b
c
c
g
2
h
zip
c
n
e
b
ulix
d
wrf
4ref
p
m
k
nto
k
3
plex
alII
er
g
y
m
astar
D
E
m
etp
m
m
x
n
vra
G
T
m
lb
ntu
hin
sje
a
b
to
b
A
D
e
m
alc
6
so
n
n
o
o
c
d
R
msF
a
2
m
n
p
g
sp
h
u
h
E
c
ala
o
q
V
lib
e
A
x
G
erlb
Figure 13: Performance overhead by RAZOR on SPEC CPU R⃝2006
benchmarks. The average overhead is 1.7%.