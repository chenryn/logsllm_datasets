### 4. Peering Point Bypass Analysis

Nodes can switch their peering points away from the default. We assume that a node only tries ten tags to stress the design. The fraction we compute is the likelihood that a node can bypass its default peering point if it considers the default faulty. This probability depends on both the number of peering points and the specific points chosen.

To obtain an overall estimate, for each simulation, we fix the number of peering points \( |P| \) and choose 100 random sets (or as many combinations as exist, if fewer). We record the fraction of nodes that can change their peering points for each set \( P \), and average the results over all sets. As before, the final results are averaged over 10 simulation runs to reduce the effect of the pseudo-random ordering of deflection neighbors.

The "Peering Bypassed" column in Table 1 summarizes the results. We only show the results for 2 and 5 peering points, respectively. The sub-column "All" shows the fraction of nodes that can bypass a peering point if all tags are tried. Figure 10 presents the results for 2, 3, 4, and 5 peering points in our example networks. The x-axis represents the number of peering points, and the y-axis shows the fraction of nodes that can use a different peering point after 10 tag tries.

Rules 2 and 3 consistently provide more peering choices than Rule 1. With these rules, a significant fraction of nodes can change their peering points after only 10 tag tries. When the number of peering points is larger, this fraction increases. For two peering points, more than 67% of nodes in all simulated topologies can use the alternative peering point. For five peering points, most topologies have more than 90% of nodes that can choose a different peering point. We also note that trying all tags helps to bypass a peering point somewhat more effectively than bypassing a faulty node or link on the default routing path.

### 5. Summary

Overall, our results show that it is possible to construct deflection rules that provide good path diversity. Specifically, Rules 2 and 3 are significantly better than the straightforward Rule 1. Greater levels of diversity are available in designed networks that are larger in size and in random networks with higher average degree. Path diversity via deflections allows a peering point or a faulty node (or link) to be avoided most of the time, even in small networks. Moreover, tags are effective in accessing path diversity. A deflection that bypasses one fault can usually be found by trying a single tag, with a small number of faults requiring more tries.

### 6. Related Work

Our work is motivated by results showing the benefits of variants of source routing. RON [1], Detour [17], and SOSR [7] demonstrate that overlay routing can improve end-to-end reliability, throughput, latency, and loss rate. In early work, Perlman used source routing as an essential means to avoid Byzantine failures [13]. Clark et al. [5] argue that end-user control over provider-level routes has the potential to create a competitive ISP marketplace.

Much research addresses the difficulties of implementing source routes. To handle scaling issues, many schemes use a link-state-like routing protocol to provide end systems with a map of the network [27, 15, 28, 6, 4, 3]. In contrast, we build on the existing shortest-path machinery to capture ISP policy and eliminate the need for sources to obtain any map. Additionally, we do not require end-systems to forward packets for each other, as do overlays, nor install path-specific state at routers, as do schemes such as packet reflection [9]. As a tradeoff, the region of the network over which a source can deflect its packets is restricted. Nevertheless, our results show that most node and link failures can be bypassed in practice.

Other routing and forwarding schemes use short, fixed-length labels to represent multiple paths. MPLS [16] is widely used by backbone ISPs to split traffic along multiple paths. Bananas [10] uses a 32-bit hash of an AS path as a label. NIRA [27] uses hierarchically allocated IPv6 addresses to represent provider-level routes. Unlike deflections, all these mechanisms map a label to a unique path and require additional signaling messages to establish the mapping.

Similar to deflections, some multi-path routing formulations allow a router to choose among multiple next hops to reach a destination without looping. OSPF and ISIS permit multi-path routing among next hops with equal cost to a destination [22]. Vutukury et al. propose a multi-path scheme similar to Rule 1, where a router can choose any neighbor with a cost less than itself as the next hop [23, 24]. Our rules construct larger sets of paths.

Finally, work on local route repair explores the use of alternate next hops to bypass faults before new routes have converged. Ongoing work in the IETF [19] studies well-known Rule 1 and variants similar to our Rule 2. The main distinction is that this work targets a single fault and may result in loops if there are multiple faults, whereas our deflections can be used safely at multiple locations. This IETF work is similar to earlier work by Wang and Crowcroft [25]. More recently, Iyer [8] studied re-routings equivalent to Rule 1 and similar to Rule 2 but places restrictions on intra- versus inter-POP weights to avoid loops, while we do not.

### 7. Conclusions

We have presented a practical system that provides the benefits of source-controlled routes in the Internet without the problems associated with explicit source routes. It is a tag-based routing architecture that uses routing deflections to provide path diversity. Users tag packets with hints rather than explicit source routes, and ISPs use these hints to select among alternative paths. These tags can be encoded in a way compatible with common IP usage. ISPs generate the underlying path diversity with the routing deflections we have introduced. This mechanism is scalable, compatible with ISP policies, and easily incrementally deployable. To evaluate the overall system, we performed simulations with real, measured, and random network topologies. We found that deflections provide a high level of path diversity and tags make effective use of this diversity. With our rules, a source can avoid most single node or link faults by trying only a handful of tags, with better results for larger networks.

We consider the routing deflection rules we have defined to be the most interesting aspect of our work. We were surprised to realize that such a large set of non-shortest path neighbors could be used to reach the destination without the danger of loops and that this could be done robustly without any coordination between neighboring routers. It is likely that there exist other, perhaps more powerful, deflection rules, as we have not yet systematically explored the design space. We have also restricted our attention to deflection rules that are incrementally deployable with existing shortest path routers. Easing this restriction, say by signaling path information on packets, would permit other deflections. We are also interested in exploring the use of deflections in other settings, the most immediate of which is to locally repair routes and minimize transient loops during routing convergence.

### 8. Acknowledgements

Wetherall gratefully acknowledges the support of a Sloan Research Fellowship. We thank Minas Gjoka for converting the input topologies to the format needed by our simulator, and the anonymous reviewers, our shepherd Bruce Davie, Nick Feamster, Jinyang Li, Xin Liu, and Junfeng Yang for providing useful feedback.

### 9. References

[1] D. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. Morris. Resilient Overlay Networks. In SOSP, Oct. 2001.
[2] P. Baran. On Distributed Communications, vol. I. RAND Technical Report RM-3420-PR, Aug. 1964.
[3] I. Castineyra, N. Chiappa, and M. Steenstrup. The Nimrod Routing Architecture. IETF RFC 1992, Aug. 1996.
[4] D. Clark. Policy Routing in Internetworks. Internetworking: Research and Experience, 1, 1990.
[5] D. Clark, J. Wroclawski, K. Sollins, and R. Braden. Tussle in Cyberspace: Defining Tomorrowâ€™s Internet. In SIGCOMM, Aug. 2002.
[6] D. Estrin, Y. Rekhter, and S. Hotz. Scalable Inter-Domain Routing Architecture. In ACM SIGCOMM, 1992.
[7] K. P. Gummadi, H. V. Madhyastha, S. D. Gribble, H. M. Levy, and D. Wetherall. Improving the Reliability of Internet Paths with One-Hop Source Routing. In OSDI, Dec. 2004.
[8] S. Iyer, S. Bhattacharyya, N. Taft, and C. Diot. An Approach to Alleviate Link Overload as Observed on an IP Backbone. In INFOCOM, 2003.
[9] J. Jannotti. Network Layer Support for Overlay Networks. In IEEE OPENARCH, June 2002.
[10] H. T. Kaur, S. Kalyanaraman, A. Weiss, S. Kanwar, and A. Gandhi. Bananas: An Evolutionary Framework for Explicit and Multipath Routing in the Internet. In ACM SIGCOMM FDNA workshop, Aug. 2003.
[11] N. Maxemchuk. Routing in the Manhattan Street Network. IEEE Trans. on Communication, COM-35(5), May 1987.
[12] A. Medina, I. Matta, and J. Byers. BRITE: A Flexible Generator of Internet Topologies. Technical Report BU-CS-TR-2000-005, Boston University, 2000.
[13] R. Perlman. Network Layer Protocols with Byzantine Robustness. Technical report, MIT, Oct. 1988. MIT-LCS-TR-429.
[14] R. Perlman. Routing with Byzantine Robustness. Technical report, Sun Labs, Aug. 2005. TR-2005-146.
[15] B. Raghavan and A. C. Snoeren. A System for Authenticated Policy-Compliant Routing. In ACM SIGCOMM, 2004.
[16] E. C. Rosen, A. Viswanathan, and R. Callon. Multiprotocol Label Switching Architecture. IETF RFC3031, Jan. 2001.
[17] S. Savage, A. Collins, E. Hoffman, J. Snell, and T. Anderson. The End-to-End Effects of Internet Path Selection. In SIGCOMM, Aug. 1999.
[18] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practical Network Support for IP Traceback. In SIGCOMM, Aug. 2000.
[19] M. Shand and S. Bryant. IP Fast Reroute Framework. IETF Routing Working Group, work in progress, Mar. 2006.
[20] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP Topologies with Rocketfuel. In SIGCOMM, Aug. 2002.
[21] I. Stoica, S. Shenker, and H. Zhang. Core-Stateless Fair Queueing: A Scalable Architecture to Approximate Fair Bandwidth Allocations in High Speed Networks. In SIGCOMM, 1998.
[22] D. Thaler and C. Hopps. Multipath Issues in Unicast and Multicast Next-Hop Selection. IETF RFC 2991, Nov. 2000.
[23] S. Vutukury and J. Garcia-Luna-Aceves. MDVA: A Distance-Vector Multipath Routing Protocol. In IEEE Infocom, 2001.
[24] S. Vutukury and J. Garcia-Luna-Aceves. Mpath: A Loop-Free Multipath Routing Algorithm. Journal of Microprocessors and Microsystems, 2001.
[25] Z. Wang and J. Crowcroft. Shortest Path First with Emergency Exits. In SIGCOMM, 1990.
[26] A. Yaar, A. Perrig, and D. Song. Pi: A Path Identification Mechanism to Defend Against DDoS Attacks. In IEEE Symposium on Security and Privacy, 2003.
[27] X. Yang. NIRA: A New Internet Routing Architecture. In ACM SIGCOMM FDNA workshop, 2003.
[28] D. Zhu, M. Gritter, and D. R. Cheriton. Feedback Based Routing. In Proc. of HotNets-I, 2002.

### Appendix

We prove that each rule provides paths that are loop-free and reach their destinations, even when shortest-path routers are present in the network.

#### A. Rule 1 (One Hop Down)

Let the sequence of nodes on the forwarding path be \( n_i \) for \( i \geq 0 \). Consider the sequence \( \text{cost}(n_i) \) for \( i \geq 0 \). By Rule 1, it strictly decreases. Hence, each node in the sequence must correspond to a different node, ensuring the path is loop-free. To reach the destination, it suffices to show that the deflection set is not empty. This is true because shortest-path neighbors are always valid choices, as they have lower costs than the current node by definition. This further implies that shortest-path routers make valid deflections and can be freely mixed with Rule 1 routers.

#### B. Rule 2 (Two Hops Down)

To show loop-freedom, we prove that no directional link will repeat in the forwarding path. Define the cost of a directional link \( u_i \) that connects \( n_i \) and \( n_{i+1} \) to be the maximum cost of its endpoints. We now show that the cost of adjacent links is non-increasing. To do this, we state the link cost and substitute Rule 2 expressed in succinct form as a maximum operator that combines its two clauses:

\[
\text{cost}(u_{i+1}) = \max(\text{cost}(n_{i+1}), \text{cost}(n_{i+2}))
\]
\[
\leq \max(\text{cost}(n_{i+1}), \max(\text{cost}(n_{i+1}), \text{cost}(n_i)))
\]
\[
= \max(\text{cost}(n_i), \text{cost}(n_{i+1}))
\]
\[
= \text{cost}(u_i)
\]

Next, we show that the cost of every other link along a path is strictly decreasing:

\[
\text{cost}(n_{i+3}) < \text{cost}(n_{i+1})
\]

Therefore, any link \( u_{i+k} \) with \( k > 1 \) cannot be the same as link \( u_i \). It remains to show that the adjacent link \( u_{i+1} \) cannot be the same as \( u_i \). This is true because these two links start at different nodes. Thus, no directional link can be revisited on the forwarding path; there are no link-level loops.

To see compatibility with shortest-path routers, observe that the shortest path neighbor is always a valid deflection choice because it satisfies the downhill clause. Liveness follows from this too, as the deflection set is non-empty, and a packet will eventually reach its destination.

#### C. Rule 3 (Two Hops Forward)

Observe that removing links from the graph can only increase the cost of paths that would otherwise use it, i.e.:

\[
\text{cost}(G, n_i) \leq \text{cost}(G \setminus l_j, n_i) \quad \forall \text{nodes } n_i, \text{links } l_j
\]

We now restate Rule 3 compactly and substitute the above inequality for the bidirectional incoming link \( l_i \) (that connects \( n_{i-1} \) and \( n_i \)):

\[
\text{cost}(G \setminus l_{i+1}, n_{i+1}) < \max(\text{cost}(G \setminus l_i, n_i), \text{cost}(G, n_{i-1}))
\]
\[
\leq \max(\text{cost}(G \setminus l_i, n_i), \text{cost}(G \setminus l_{i-1}, n_{i-1}))
\]

This has the same form we saw in Rule 2 when we consider the sequence \( \text{cost}(G \setminus l_i, n_i) \) instead of \( \text{cost}(n_i) \). Hence, we can show loop-freedom in precisely the same manner, by defining an analogous directional link cost and showing that no directional link is repeated. (We omit this to avoid repetition.)

To show that Rule 3 reaches destinations, it suffices to show that the deflection set is not empty before the destination is reached. To do this, we will show that the shortest-path neighbor in \( G \setminus l_i \) is always an allowed choice. Let this shortest-path neighbor be node \( n_{i+1} \) so that by definition we have \( \text{cost}(G \setminus l_i, n_{i+1}) < \text{cost}(G \setminus l_i, n_i) \).

Next, we show that \( \text{cost}(G \setminus l_{i+1}, n_{i+1}) < \text{cost}(G \setminus l_i, n_{i+1}) \). This is because \( n_{i+1} \) is \( n_i \)'s shortest path neighbor. Its shortest path in the graph \( G \setminus l_i \) cannot go back across the last incoming link \( l_{i+1} \). Hence, the cost of \( n_{i+1} \) in the graph that excludes both links \( l_i \) and \( l_{i+1} \), i.e., \( G \setminus (l_i, l_{i+1}) \), is the same as \( \text{cost}(G \setminus l_i, n_{i+1}) \). Then, using the above inequality, we can upper bound \( \text{cost}(G \setminus l_{i+1}, n_{i+1}) \):

\[
\text{cost}(G \setminus l_{i+1}, n_{i+1}) \leq \text{cost}(G \setminus (l_i, l_{i+1}), n_{i+1})
\]
\[
= \text{cost}(G \setminus l_i, n_{i+1})
\]
\[
< \text{cost}(G \setminus l_i, n_i)
\]

This inequality satisfies Rule 3 because it is simply the downhill clause. So the shortest-path neighbor in \( G \setminus l \) is in the deflection set as required.

Finally, to show compatibility with shortest-path routes, it suffices to show that the shortest path neighbor of \( n_i \) in \( G \) is an allowable deflection choice. By definition of the shortest neighbor \( n_{i+1} \), \( \text{cost}(G, n_{i+1}) < \text{cost}(G, n_i) \). In addition, the shortest path from \( n_{i+1} \) will not go back across the incoming link, \( l_{i+1} \). Therefore, the cost of \( n_{i+1} \) in the graph \( G \setminus l_{i+1} \) is the same as in \( G \). Combining these facts, we have \( \text{cost}(G \setminus l_{i+1}, n_{i+1}) < \text{cost}(G, n_i) \). Applying the above inequality, we obtain \( \text{cost}(G \setminus l_{i+1}, n_{i+1}) < \text{cost}(G \setminus l_i, n_i) \). This is simply the downhill clause of Rule 3. Thus, shortest path forwarding satisfies Rule 3, as required.