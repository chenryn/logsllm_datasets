can switch their peering points away from their defaults. We as-
sume a node only tries ten tags to stress the design. The fraction
we compute is the likelihood that a node can bypass its default peer-
ing point if it considers the default faulty. It depends on both the
number of peering points and the speciﬁc points we choose. To
obtain an overall estimate, for each simulation, we ﬁx the number
of peering points |P|, and choose 100 random sets (or as many
combinations as exist, if that is smaller). We record the fraction of
nodes that can change their peering points for each peering set P ,
and average the results over all peering sets. As before, the ﬁnal
results are averaged over 10 simulation runs to reduce the effect of
the pseudo-random ordering of deﬂection neighbors.
The Peering Bypassed column of Table 1 summarizes the results.
We only show the results when the number of peering points is
2 and 5, respectively. The sub-column All shows the fraction of
nodes that can bypass a peering point if all tags are tried. Figure 10
shows the results for 2, 3, 4, and 5 peering points for our example
networks. The x-axis shows the number of peering points. The
y-axis shows the fraction of nodes that can use a different peering
points after 10 tag tries.
Rule 2 and 3 consistently provide more peering choices than
Rule 1. With them, a signiﬁcant fraction of nodes can change their
peering points after only 10 tag tries. When the number of peering
points is larger, this fraction is higher. When there are only two
peering points, more than 67% of nodes for all simulated topolo-
gies can use the alternative peering point. When there are ﬁve peer-
ing points, most topologies have more than 90% of nodes that can
choose a different peering point. We also note that trying all tags
helps to bypass a peering point somewhat more than to bypass a
faulty node or link that lies on the default routing path.
6.5 Summary
Overall, our results show that it is possible to construct deﬂection
rules that provide good path diversity. In particular, our Rules 2 and
3 are signiﬁcantly better than the straightforward Rule 1. Greater
levels of diversity are available in designed networks that are larger
in size as well as random networks that have higher average degree.
Path diversity via deﬂections allows a peering point or a faulty node
(or link) to be avoided most of the time, even in small networks.
Moreover, tags are effective to access path diversity. A deﬂection
that bypasses one fault can be found by trying a single tag most of
the time, with a small number of faults requiring more tries.
7. RELATED WORK
Our work is motivated by results that show variants of source
routing to be beneﬁcial. RON [1], Detour [17], and SOSR [7] show
that overlay routing can improve end-to-end reliability, throughput,
latency, and loss rate. In early work, Perlman used source routing
as an essential means to avoid Byzantine failures [13]. Clark et
al. [5] argue that end user control over provider-level routes has the
potential to create a competitive ISP marketplace.
Much work addresses the difﬁculties of implementing source
routes. In particular, to handle scaling issues, many schemes use a
link-state like routing protocol to provide end systems with a map
of the network [27, 15, 28, 6, 4, 3]. In contrast, we build on the ex-
isting shortest-path machinery to capture ISP policy and eliminate
the need for sources to obtain any map. Further, we do not require
end-systems to forward packets for each other, as do overlays, nor
install path-speciﬁc state at routers, as do schemes such as packet
reﬂection [9]. As a tradeoff, the region of the network over which a
source can deﬂect its packets is restricted. Nevertheless, our results
show most node and link failures can be bypassed in practice.
Other routing and forwarding schemes use short, ﬁxed-length la-
bels to represent multiple paths. MPLS [16] is widely used by back-
bone ISPs to split trafﬁc along multiple paths. Bananas [10] uses a
32-bit hash of an AS path as a label. NIRA [27] uses hierarchically
allocated IPv6 addresses to represent provider-level routes. Unlike
deﬂections, all these mechanisms map a label to a unique path and
so require additional signaling messages to establish the mapping.
Similar to deﬂections, some multi-path routing formulations al-
low a router to choose among multiple next hops to reach a desti-
nation without looping. OSPF and ISIS permit multi-path routing
among next hops with equal cost to a destination [22]. Vutukury
et al. propose a multi-path scheme similar to Rule 1 in which a
router can choose any neighbor with a cost less than itself as the
next hop [23, 24]. Our rules construct larger sets of paths.
Finally, work on local route repair explores the use of alternate
next hops to bypass faults before new routes have converged. On-
going work in the IETF [19] studies the well-known Rule 1 and
Rule 1
Rule 2
Rule 3
 1
 0.8
 0.6
 0.4
 0.2
n
o
i
t
c
a
r
f
e
g
a
r
e
v
A
Rule 1
Rule 2
Rule 3
 1
 0.8
 0.6
 0.4
 0.2
n
o
i
t
c
a
r
f
e
g
a
r
e
v
A
Rule 1
Rule 2
Rule 3
 1
 0.8
 0.6
 0.4
 0.2
n
o
i
t
c
a
r
f
e
g
a
r
e
v
A
 0
 0
 1
 2
 3
 4
 5
 6
Number of peering points
 0
 0
 1
 2
 3
 4
 5
 6
Number of peering points
 0
 0
 1
 2
 3
 4
 5
 6
Number of peering points
(a) Abilene
(b) Exodus
(c) Sprint
Figure 10: The fraction of nodes that can switch peering points after 10 tag tries. The x-axis shows the number of peering points, which are
randomly chosen. The short vertical bars show the standard deviation across different peering sets. We see that Rule 2 and Rule 3 consistently
provide more peering choices.
variants that are similar to our Rule 2. The main distinction is that
this work targets a single fault and may result in loops if there are
multiple faults, whereas our deﬂections can be used safely at mul-
tiple locations. This IETF work is similar to earlier work by Wang
and Crowcroft [25]. More recently, Iyer [8] studied re-routings that
are equivalent to Rule 1 and similar to Rule 2. However, that work
places restrictions on the intra- versus inter-POP weights to avoid
loops while we do not.
8. CONCLUSIONS
We have presented a practical system that provides the beneﬁts
of source-controlled routes in the Internet without the problems as-
sociated with explicit source routes. It is a tag-based routing archi-
tecture that uses routing deﬂections to provide path diversity. Users
tag packets with hints, rather than explicit source routes, and ISPs
use these hints to select among alternative paths. These tags can be
encoded in a way that is compatible with common IP usage. ISPs
generate the underlying path diversity with the routing deﬂections
that we have introduced. This mechanism is scalable, compatible
with ISP policies and easily incrementally deployable. To evaluate
the overall system, we performed simulations with real, measured
and random network topologies. We found that deﬂections provide
a high-level of path diversity and tags make effective use of this di-
versity. With our rules, a source can avoid most single node or link
faults by trying only a handful of tags, with better results for larger
networks.
We consider the routing deﬂections rules we have deﬁned to be
the most interesting aspect of our work. We were surprised to
realize that such a large set of non-shortest path neighbors could
be used to reach the destination without the danger of loops, and
that this could be done robustly without any coordination between
neighboring routers. It is likely that there exist other, perhaps more
powerful, deﬂection rules, since we have not yet systematically ex-
plored the design space. We have also restricted our attention to
deﬂection rules that are incrementally deployable with the exist-
ing shortest path routers. Easing this restriction, say by signaling
path information on packets, would permit other deﬂections. We
are also interested in exploring the use of deﬂections in other set-
tings, the most immediate of which is to locally repair routes and
minimize transient loops during routing convergence.
9. ACKNOWLEDGEMENTS
Wetherall gratefully acknowledges the support of a Sloan Re-
search Fellowship. We thank Minas Gjoka for converting the input
topologies to the format needed by our simulator, and the anony-
mous reviewers, our shepherd Bruce Davie, Nick Feamster, Jinyang
Li, Xin Liu, and Junfeng Yang for providing useful feedback.
10. REFERENCES
[1] D. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. Morris. Resilient
overlay networks. In SOSP, Oct. 2001.
[2] P. Baran. On distributed communications, vol. i. RAND Technical Report
RM-3420-PR, Aug. 1964.
[3] I. Castineyra, N. Chiappa, and M. Steenstrup. The Nimrod Routing
Architecture. IETF RFC 1992, Aug. 1996.
[4] D. Clark. Policy Routing in Internetworks. Internetworking: Research and
Experience, 1, 1990.
[5] D. Clark, J. Wroclawski, K. Sollins, and R. Braden. Tussle in cyberspace:
Deﬁning tomorrow’s Internet. In SIGCOMM, Aug. 2002.
[6] D. Estrin, Y. Rekhter, and S. Hotz. Scalable Inter-Domain Routing Architecture.
In ACM SIGCOMM, 1992.
[7] K. P. Gummadi, H. V. Madhyastha, S. D. Gribble, H. M. Levy, and
D. Wetherall. Improving the reliability of internet paths with one-hop source
routing. In OSDI, Dec. 2004.
[8] S. Iyer, S. Bhattacharyya, N. Taft, and C. Diot. An approach to alleviate link
overload as observed on an IP backbone. In INFOCOM, 2003.
[9] J. Jannotti. Network layer support for overlay networks. In IEEE OPENARCH,
June 2002.
[10] H. T. Kaur, S. Kalyanaraman, A. Weiss, S. Kanwar, and A. Gandhi. Bananas:
An evolutionary framework for explicit and multipath routing in the Internet. In
ACM SIGCOMM FDNA workshop, Aug. 2003.
[11] N. Maxemchuk. Routing in the manhattan street network. IEEE Trans. on
Communication, COM-35(5), May 1987.
[12] A. Medina, I. Matta, and J. Byers. BRITE: A ﬂexible generator of Internet
toplogies. Technical Report BU-CS-TR-2000-005, Boston University, 2000.
[13] R. Perlman. Network layer protocols with byzantine robustness. Technical
report, MIT, Oct. 1988. MIT-LCS-TR-429.
[14] R. Perlman. Routing with byzantine robustness. Technical report, Sun Labs,
Aug. 2005. TR-2005-146.
[15] B. Raghavan and A. C. Snoeren. A System for Authenticated Policy-Compliant
Routing. In ACM SIGCOMM, 2004.
[16] E. C. Rosen, A. Viswanathan, and R. Callon. Multiprotocol label switching
architecture. IETF RFC3031, Jan. 2001.
[17] S. Savage, A. Collins, E. Hoffman, J. Snell, and T. Anderson. The end-to-end
effects of Internet path selection. In SIGCOMM, Aug. 1999.
[18] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practical network support
for IP traceback. In SIGCOMM, Aug. 2000.
[19] M. Shand and S. Bryant. IP Fast Reroute Framework. IETF Routing Working
Group, work in progress, Mar. 2006.
[20] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP topologies with
Rocketfuel. In SIGCOMM, Aug. 2002.
[21] I. Stoica, S. Shenker, and H. Zhang. Core-stateless fair queueing: A scalable
architecture to approximate fair bandwidth allocations in high speed networks.
In SIGCOMM, 1998.
[22] D. Thaler and C. Hopps. Multipath issues in unicast and multicast next-hop
selection. IETF RFC 2991, Nov. 2000.
[23] S. Vutukury and J. Garcia-Luna-Aceves. MDVA: A distance-vector multipath
routing protocol. In IEEE Infocom, 2001.
[24] S. Vutukury and J. Garcia-Luna-Aceves. Mpath: a loop-free multipath routing
algorithm. Journal of Microprocessors and Microsystems, 2001.
[25] Z. Wang and J. Crowcroft. Shortest path ﬁrst with emergency exits. In
SIGCOMM, 1990.
[26] A. Yaar, A. Perrig, and D. Song. Pi: A path identiﬁcation mechanism to defend
against ddos attacks. In IEEE Symposium on Security and Privacy, 2003.
[27] X. Yang. NIRA: A new Internet routing architecture. In ACM SIGCOMM
FDNA workshop, 2003.
[28] D. Zhu, M. Gritter, and D. R. Cheriton. Feedback Based Routing. In Proc. of
HotNets-I, 2002.
APPENDIX
We prove that each rule provides paths that are loop-free and reach
their destinations, even when shortest-path routers are present in
the network.
A. RULE 1 (ONE HOP DOWN)
Let the sequence of nodes on the forwarding path be ni for i ≥ 0.
Consider the sequence cost(ni) for i ≥ 0. By Rule 1 it strictly
decreases. Hence each node in the sequence must correspond to a
different node so that the path is loop-free. To reach the destination,
it sufﬁces to show that the deﬂection set is not empty. This is so
because shortest-path neighbors are always valid choices because
they have lower cost than the current node by the deﬁnition. This
further implies that shortest-path routers make valid deﬂections and
can be freely mixed with Rule 1 routers.
B. RULE 2 (TWO HOPS DOWN)
To show loop-freedom, we prove that no directional link will re-
peat in the forwarding path. Deﬁne the cost of a directional link ui
that connects ni and ni+1 to be the maximum cost of its endpoints.
We now show that the cost of adjacent links is non-increasing. To
do this we state link cost and substitute Rule 2 expressed in succinct
form as a maximum operator that combines its two clauses:
cost(ui+1) = max(cost(ni+1), cost(ni+2))
≤ max(cost(ni+1), max(cost(ni+1), cost(ni)))
= max(cost(ni), cost(ni+1))
= cost(ui)
Next we show that the cost of every other link along a path is
strictly decreasing:
cost(ni+3)  1 is strictly less than ui. Therefore, any link ui+k with k > 1
cannot be the same as link ui. It remains to show that the adja-
cent link ui+1 cannot be the same as ui. This is true because these
two links start at different nodes. Thus, no directional link can be
re-visited on the forwarding path; there are no link-level loops.
To see compatibility with shortest-path routers, observe that the
shortest path neighbor is always valid deﬂection choice because it
satisﬁes the downhill clause. Liveness follows from this too, as the
deﬂection set is non-empty, and a packet will eventually reach its
destination.
C. RULE 3 (TWO HOPS FORWARD)
Observe that removing links from the graph can only increase
the cost of paths that would otherwise use it, i.e.:
cost(G, ni) ≤ cost(G\lj, ni) ∀ nodes ni, links lj
(3)
We now restate Rule 3 compactly and substitute (3) for the bidi-
rectional incoming link li (that connects ni−1 and ni):
cost(G\li+1, ni+1) < max(cost(G\li, ni), cost(G, ni−1))
≤ max(cost(G\li, ni), cost(G\li−1, ni−1))
This has the same form we saw in Rule 2 when we consider
the sequence cost(G\li, ni) instead of cost(ni). Hence we can
show loop-freedom in precisely the same manner, by deﬁning an
analogous directional link cost and showing that no directional link
is repeated. (We omit this to avoid repetition.)
To show that Rule 3 reaches destinations, it sufﬁces to show that
the deﬂection set is not empty before the destination is reached.
To do this, we will show that the shortest-path neighbor in G\li is
always an allowed choice. Let this shortest-path neighbor be node
ni+1 so that by deﬁnition we have cost(G\li, ni+1) < cost(G\li, ni).
Next we show that cost(G\li+1, ni+1) < cost(G\li, ni+1). This
is because ni+1 is ni’s shortest path neighbor. Its shortest path in
the graph G\li cannot go back across the last incoming link li+1.
Hence, the cost of ni+1 in the graph that excludes both links li
and li+1, i.e., G\(li, li+1), is the same as cost(G\li, ni+1). Then
by using inequality (3), we can upper bound cost(G\li+1, ni+1).
With these steps we have:
cost(G\li+1, ni+1) ≤ cost(G\(li, li+1), ni+1)
= cost(G\li, ni+1)
< cost(G\li, ni)
(4)
This inequality (4) satisﬁes Rule 3 because it is simply the down-
hill clause. So the shortest-path neighbor in G\l is in the deﬂection
set as required.
Finally, to show compatibility with shortest-path routes, it suf-
ﬁces to show that the shortest path neighbor of ni in G is an allow-
able deﬂection choice. By deﬁnition of the shortest neighbor ni+1,
cost(G, ni+1) < cost(G, ni). In addition, the shortest path from
ni+1 will not go back across the incoming link, li+1. Therefore, the
cost of ni+1 in the graph G\li+1 is the same as in G. Combining
these facts we have cost(G\li+1, ni+1) < cost(G, ni). Applying
(3) we obtain cost(G\li+1, ni+1) < cost(G\li, ni). This is sim-
ply the downhill clause of Rule 3. Thus shortest path forwarding
satisﬁes Rule 3, as required.