laying auxiliaries.
G2: Prefer auxiliaries with better connectivity to the destination.
G3: Limit the expected number of relayed transmissions.
The ﬁrst two guidelines are easily motivated, but the third one
is not immediately obvious. Should the number of relayed trans-
missions be low or be such that at least one of them reaches the
destination? We use the former in ViFi, but we also considered
a formulation based on the latter. We outline this formulation in
§5.5.1, and show that it leads to too many relayed transmissions.
Similarly, we study formulations that do not adhere to the other
two guidelines and show that they do not perform well either.
Let B1,··· , BK be the current set of auxiliary BSes. Let node
s be the source of a packet and node d be its destination, where a
node is a vehicle or anchor BS depending on the packet’s direction.
Let pab represents the probability that b correctly receives a trans-
mission from a, for a, b ∈ {s, d, B1, ..., BK}. ViFi estimates and
disseminates the pab using periodic beacons (§4.6).
When some auxiliary Bx hears a packet but not an acknowledg-
ment, it must use a locally computed probability to decide whether
to relay. The overall strategy is to compute relaying probabilities
so that the expected number of packets relayed across all auxiliary
BSes is equal to 1. Within this constraint, auxiliary BSes that are
better connected to the destination are preferred.
We reﬂect the constraint on the expected number of packets re-
layed using
KX
i=1
ciri = 1
(1)
Here ci is the probability that auxiliary Bi is contending on this
packet, that is, that Bi has heard the packet but not an acknowledg-
ment, and ri is Bi’s relay probability. Strictly speaking, however,
ri is the number of times Bi should relay the packet. Except in
pathological cases, ri evaluates to less than one. We do not allow
an auxiliary BS to relay a packet more than once.
We compute the ci using an approach described below. We then
pick ri satisfying Eq. 1 in a way that favors auxiliaries that are
better connected to the destination node d. Speciﬁcally, we choose
ri such that
ri
rj
= pBid
pBj d
(2)
implying that ri = r · pBid for some r. Each contending auxiliary
Bx solves Eq. 1 uniquely for r, and then relays the packet with
probability min(r · pBxd, 1).
A contending relay Bx computes ci for each Bi, including itself,
as the unconditional probability:
ci = psBi (1 − psdpdBi )
(3)
Here the ﬁrst term, psBi , is the probability that Bi receives the orig-
inal packet, the second is the probability that Bi does not hear an
acknowledgment. We have assumed that the two are independent.
The probability computation method described above is but one
of the possibly many that adhere to the guidelines above. We use
it because it is simple and works well in our experiments. It strikes
a balance between false positives, i.e., relaying packets that are al-
ready at the destination, and false negatives, i.e., no relaying for
packets that are lost at the destination.
In practice, false positives are also reduced because relay at-
tempts of auxiliary BSes are not synchronized. Each auxiliary BS
has a timer that ﬁres periodically. When that happens, the auxiliary
BS uses the equations above to decide whether it needs to relay
any unacknowledged packet. In some cases, an acknowledgment
arrives at the auxiliary BS even before its timer ﬁres. Such an event
prevents the BS from relaying unnecessarily, even if the equations
indicate that the packet should be relayed.
The combination of ViFi’s relaying probability computation method,
asynchronous relaying timers, and suppression based on overheard
acknowledgments means that we do not need to explicitly, tempo-
rally order the relaying BSes based on their proximity to the desti-
nation; such ordering has been used in the past in both wired and
wireless settings [5, 15].
4.5 Salvaging
Sometimes a vehicle moves out of range before the anchor BS
can deliver packets from the Internet. Application performance,
especially that of TCP, can suffer if such groups of back-to-back
packets are lost frequently.
To avoid this problem in ViFi, newly designated anchors salvage
packets by contacting the previous anchor over the backplane. The
new anchor learns the identity of the previous anchor from the
beacons. Upon contact, the old anchor transfers any unacknowl-
edged packets that were received from the Internet within a certain
time threshold. We set the threshold to one second in our exper-
iments, based on the minimum TCP retransmission timeout. The
new anchor treats these packets as if they arrived directly from the
Internet. Our salvaging mechanism is inspired by DTN routing and
DSR [21], but it is based on pulling data rather than pushing.
4.6 Estimating packet reception probabilities
using beacons
As WiFi BSes do today, ViFi nodes send periodic beacons. The
beacons are used to disseminate information about the packet recep-
tion probabilities needed by auxiliary BSes, which include those
between the other auxiliary BSes and the anchor and between the
other auxiliary BSes and the vehicle.
A ViFi node estimates the reception probability from another
node to itself using the number of beacons received in a given time
interval divided by the number that must have been sent. Incom-
ing reception probabilities are maintained as exponential averages
(α=0.5) over per-second beacon reception ratio. In their beacons,
nodes embed the current incoming reception probability from all
nodes that they heard from in the last interval. They also embed the
packet reception probability from them to other nodes, which they
learn from the beacons of those other nodes. This embedded infor-
mation sufﬁces for an auxiliary BS to learn all the packet reception
probabilities that it needs.
4.7 Retransmission timers
In the current 802.11 standard, acknowledgments are sent im-
mediately after packet transmission, so the source knows when to
retransmit an unacknowledged packet. But acknowledgments in
ViFi may be delayed if they are generated in response to a relayed
packet. The delay depends on the time for relayed packets to reach
the destination, and thus retransmission timers must be set based
on current network conditions.
The ViFi source sets the retransmit timer adaptively based on the
observed delays in receiving acknowledgments. The source keeps
track of the delays in receiving acknowledgments for its transmis-
sions. Each packet carries a unique identiﬁer so that acknowledg-
ments are not confused with an earlier transmission. The source
then picks as the minimum retransmission time the 99th percentile
of measured delays. Picking this high percentile means that sources
err towards waiting longer when conditions change rather than re-
transmitting spuriously.
Transmission opportunities can arise for the source before the
retransmission time for the earliest packet in the queue elapses. In
such an event, instead of leaving the medium idle, the source sends
the earliest queued packet that is ready for transmission. This can
cause some amount of reordering when a later packet reaches the
destination ﬁrst. In our experiments, we ﬁnd that the amount of
reordering is small and does not hurt TCP performance. Hence,
our current implementation does not attempt to order packets. If
need be, it is straightforward to order packets using a sequencing
buffer at anchor BSes and vehicles.
4.8 System Implementation
We have implemented ViFi on the Windows operating system.
Almost all of our implementation sits in user space. A special in-
kernel network driver receives outgoing packets from the OS and
hands it to our process. This process then sends it back down to the
wireless interface after adding appropriate headers. Upon receiving
incoming packets from the wireless interface, this process strips the
headers and hands the packet to the special driver which then passes
it on to the OS. We embed our own sequence numbers as identiﬁers
in transmitted packets, though it should be possible to use 802.11
sequence numbers with a tighter integration with the device driver.
Our current implementation uses broadcast transmissions at the
MAC layer because this lets us disable the automatic retransmis-
sion behavior of the NIC. Instead, a ViFi node retransmits unac-
knowledged packets as described in §4.3. The ViFi node also send
acknowledgments for received packets, since broadcast transmis-
sions in 802.11 are not acknowledged. However, broadcast trans-
missions disable exponential backoff in response to losses which
is intended to reduce collisions. Given that many losses in the ve-
hicular environment will not be due to collisions but due to poor
radio links, it is unclear if the standard 802.11 exponential backoff
behavior is appropriate. To reduce collisions, our implementation
relies on carrier sense. The implementation also ensures that there
is no more than one packet pending at the interface, to prevent a
node from sending multiple back-to-back broadcast packets.
As an optimization, ViFi packets carry a 1-byte bitmap that sig-
nals which of the last eight packets before the current packet were
not received by the sender. This helps save some spurious retrans-
missions of data packets that are otherwise made due to loss of
acknowledgment packets.
Our implementation of ViFi has been deployed on VanLAN, where
it ran successfully for more than two months.
5. EVALUATION
several criteria. We show the following:
In this section, we evaluate the performance of ViFi according to
• The link-layer performance of ViFi is close to ideal (§5.2).
• ViFi improves application performance two-fold compared to
• It does that without placing little additional load on the vehicle-
• Its coordination mechanism has low false positive and false
current handoff methods (§5.3).
BS wireless medium (§5.4).
negative rates (§5.5).
In addition to the experiments presented in this paper, we have
conducted a broader study of the performance of ViFi across a range
of environmental factors. These factors include the density of BSes
and the speed of the vehicle, which we could not control for either
of our testbeds. Our results, which are presented in a separate tech-
nical report [3], show that ViFi performs well across these factors.
5.1 Methodology
Our evaluations use the deployment of ViFi on VanLAN and
a trace-driven simulation based on measurements from DieselNet.
The ﬁrst approach provides results in the context of complete real-
world complexities. The second approach allows us to verify that
the results are not due to characteristics speciﬁc to our deployment
on VanLAN. Below, results that are marked with VanLAN, are
deployment-based and those marked with DieselNet, are based on
trace-driven simulations.
The trace-driven simulations are based on beacons logged by the
buses in DieselNet. The beacon loss ratio from a BS to the vehicle
in each one-second interval is used as the packet loss rate from that
BS to the vehicle and from the vehicle to the BS. This assumption
ignores any asymmetry or ﬁner-timescale behavior of packet loss.
For inter-BS loss rates, we assume that BS pairs that are never si-
multaneously within the range of a bus cannot reach one another.
For other pairs, we assign loss ratios between 0 and 1 uniformly at
random. Our results are based on multiple trials and random seeds.
We use a QualNet-based implementation of ViFi to analyze per-
formance. The loss rates are instantiated in the QualNet simula-
tor by mapping them to the corresponding path loss values. This
method allows us to program loss rates found in a real vehicular
environment and therefore includes losses due to mobility and mul-
tipath fading, while still losing packets to events such as collisions.
)
s
(
n
e
l
n
o
i
s
s
e
s
200
150
100
50
0
1
10
interval (s)
(a) Reception ratio=50%
200
150
100
50
0
0
AllBSes
ViFi
BestBS
BRR
60
80 100
40
20
reception ratio (%)
(b) Interval=1 sec
(a) BRR
(b) ViFi
Figure 7: The median session length in VanLAN as a function
of the reception ratio threshold and time interval used to deﬁne
adequate connectivity. The curves for AllBSes and BestBS are
identical to those in Figure 4.
Figure 8: The behavior of BRR and ViFi along a path segment
in VanLAN. Black lines represent regions where the reception
ratio was more than 50% in 1-second intervals. Dark circles
represent interruptions.
We validate our trace-driven simulation method by collecting the
same measurements from VanLAN and comparing its results to the
deployment, i.e., we conﬁgure the loss rate for each one-second in-
terval to be the beacon loss ratio between the vehicle and the BS
in that one second. Because we have inter-BS beacon loss ratios
in VanLAN, unlike DieselNet, we conﬁgure the inter-BS loss rates
also as the inter-BS beacon loss ratio at each one-second interval.
We ﬁnd that the simulation results match the deployment results.
For instance, the VoIP session lengths in the simulations are within
ﬁve seconds of the session lengths observed for the deployed proto-
type. We omit details of this validation from this paper but include
them in a technical report [3].
We compare the performance of ViFi against BRR, the practical,
hard handoff protocol that we studied previously. To ensure a fair
comparison, we implement BRR within the same framework as ViFi
but with the auxiliary BS functionality switched off. Like ViFi,
BRR uses broadcast transmissions without exponential backoff re-
strictions and uses bitmap acknowledgments. We omit experiments
that show that BRR performs worse with unicast transmissions. The
poor performance is because of backoffs in response to losses. In
VoIP experiments, for instance, the length of disruption-free calls
were 25% shorter.
Our experiments are based on a ﬁxed 802.11b transmission rate
of 1 Mbps to maximize range. Rate adaptation in vehicular net-
works is an open problem as current algorithms assume an environ-
ment that is less dynamic [19, 14].
Unless otherwise speciﬁed, results for VanLAN are based on at
least three days of data for each protocol and workload conﬁgura-
tion. Details for the data we use for the DieselNet simulations are
provided in §2.2. All errors bars in the graphs below represent 95%
conﬁdence intervals.
5.2 Link-layer performance
We start by evaluating the basic link-layer connectivity provided
by ViFi. This analysis is based on the VanLAN deployment and
uses a methodology similar to §3.
Figure 7 quantiﬁes the performance of ViFi in comparison to the
BRR, BestBS, and AllBSes handoff policies. In this experiment, the
van and a remote computer attached to the wired network send a
500-byte packet to each other every 100 ms. Since we focus on
basic link-layer quality provided by each protocol, link-layer re-
transmissions are disabled. The ﬁgure plots the median uninter-
rupted session length for various deﬁnitions of interruptions, as in
Figure 4. The performance of ViFi is even better than BestBS and
)
s
(
e
m
i
t
r
e
f
s
n
a
r
t
1.0
0.8
0.6
0.4
0.2
0.0
y
t
i
s
r
e
v
i
D
y
l
n
O
R
R
B
i
i
F
V
n
o
i
s
s
e
s
/
s
r
e
f
s
n
a
r
t
100
80
60
40