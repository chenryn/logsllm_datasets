    When you run `find . -exec ls {} \;` even if the command run in the `exec` returns a status code different than 0 [you'll get an overall status code of 0](https://serverfault.com/questions/905031/how-can-i-make-find-return-non-0-if-exec-command-fails) which makes difficult to catch errors in bash scripts.
    You can instead use `xargs`, for example:
    ```bash
    find /tmp/ -iname '*.sh' -print0 | xargs -0 shellcheck
    ```
    This will run `shellcheck file_name` for each of the files found by the `find` command.
### [Gancio](gancio.md)
* New: [Add radar squat.](gancio.md#references)
    https://radar.squat.net
### [Hard drive health](hard_drive_health.md)
* New: [Check the disk health with smartctl.](hard_drive_health.md#check-the-health-of-a-disk-with-smartctl)
    Start with a long self test with `smartctl`. Assuming the disk to test is
    `/dev/sdd`:
    ```bash
    smartctl -t long /dev/sdd
    ```
    The command will respond with an estimate of how long it thinks the test will
    take to complete.
    To check progress use:
    ```bash
    smartctl -A /dev/sdd | grep remaining
    smartctl -c /dev/sdd | grep remaining
    ```
    Don't check too often because it can abort the test with some drives. If you
    receive an empty output, examine the reported status with:
    ```bash
    smartctl -l selftest /dev/sdd
    ```
    If errors are shown, check the `dmesg` as there are usually useful traces of the error.
* New: [Check the health of a disk with badblocks.](hard_drive_health.md#check-the-health-of-a-disk-with-badblocks)
    The `badblocks` command will write and read the disk with different patterns, thus overwriting the whole disk, so you will loose all the data in the disk.
    This test is good for rotational disks as there is no disk degradation on massive writes, do not use it on SSD though.
    WARNING: be sure that you specify the correct disk!!
    ```bash
    badblocks -wsv -b 4096 /dev/sde | tee disk_analysis_log.txt
    ```
    If errors are shown is that all of the spare sectors of the disk are used, so you must not use this disk anymore. Again, check `dmesg` for traces of disk errors.
### [Vim](vim.md)
* New: [Concealment.](vim.md#concealment)
    Some plugins allow the conceal of some text, for example in orgmode you will only see the text of the description of a link and not the content, making it more pleasant to read. To enable it set in your config:
    ```lua
    -- Conceal links
    -- https://github.com/nvim-orgmode/orgmode#links-are-not-concealed
    -- Use visual mode to navigate through the hidden text
    vim.opt.conceallevel = 2
    vim.opt.concealcursor = 'nc'
    ```
    Where:
    - `conceallevel`: Determine how text with the "conceal" syntax attribute is shown:
      - `0`: Text is shown normally
      - `1`: Each block of concealed text is replaced with one character. If the syntax item does not have a custom replacement character defined the character defined in 'listchars' is used (default is a space). It is highlighted with the "Conceal" highlight group.
      - `2`: Concealed text is completely hidden unless it has a custom replacement character defined.
      - `3`: Concealed text is completely hidden.
    - `concealcursor`: Sets the modes in which text in the cursor line can also be concealed. When the current mode is listed then concealing happens just like in other lines.
      - `n`: Normal mode
      - `v`: Visual mode
      - `i`: Insert mode
      - `c`: Command line editing, for 'incsearch'
      A useful value is `nc`. So long as you are moving around text is concealed, but when starting to insert text or selecting a Visual area the concealed text is displayed, so that you can see what you are doing.
### [yq](yq.md)
* New: Introduce yq.
    [yq](https://github.com/mikefarah/yq) is a portable command-line YAML, JSON, XML, CSV, TOML and properties processor. It uses `jq` like syntax but works with yaml files as well as json, xml, properties, csv and tsv. It doesn't yet support everything `jq` does - but it does support the most common operations and functions, and more is being added continuously.
* New: [Find and update items in an array.](yq.md#find-and-update-items-in-an-array)
    We have an array and we want to update the elements with a particular name.
    Given a `sample.yaml` file of:
    ```yaml
    - name: Foo
      numBuckets: 0
    - name: Bar
      numBuckets: 0
    ```
    Then `yq '(.[] | select(.name == "Foo") | .numBuckets) |= . + 1' sample.yaml` will output:
    ```yaml
    - name: Foo
      numBuckets: 1
    - name: Bar
      numBuckets: 0
    ```
* New: [Iterate over the elements of a query with a bash loop.](yq.md#iterate-over-the-elements-of-a-query-with-a-bash-loop)
    ```bash
    readarray dependencies < <(yq e -o=j -I=0 '.roles[]' requirements.yaml)
    for dependency in "${dependencies[@]}"; do
        source="$(echo "$dependency" | yq e '.src' -)"
    done
    ```
## Android
### [HappyCow](happycow.md)
* New: Introduce Happycow.
    [Happycow](https://www.happycow.net/) is a web application and android app to search vegan restaurants nearby.
    The android app requires google services to work :(.
# Arts
## Dancing
### [Lindy Hop](lindy.md)
* New: [Add Hellzapopping videos.](lindy.md#charleston)
    [Short version](https://www.youtube.com/watch?v=ahoJReiCaPk)
    [Long version](https://www.youtube.com/watch?v=aQia-42W-v8)
## Video Gaming
### [Age of Empires](age_of_empires.md)
* New: [Added references.](age_of_empires.md#references)
    - [Hera channel](https://www.youtube.com/@HeraAgeofEmpires2): Awesome to learn to play
    - [Hera gameplay channel](https://www.youtube.com/@Hera-Gameplay): Good 1st person point of view games
    - [Tatoh channel](https://www.youtube.com/@TaToHAoE): Good spanish content.
# Science
## [Math](math.md)
* New: [Add 3Blue1Brown videos.](math.md#videos)
    [3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw). Recomended by [Nicky Case](https://ncase.me/)
# Other
* New: Ansible retry a failed job.
    ```yaml
    - command: /usr/bin/false
      retries: 3
      delay: 3
      register: result
      until: result.rc == 0
    ```
* New: Introduce Bookwyrm.
    [Bookwyrm](https://joinbookwyrm.com/) is a social network for tracking your reading, talking about books, writing reviews, and discovering what to read next. Federation allows BookWyrm users to join small, trusted communities that can connect with one another, and with other ActivityPub services like Mastodon and Pleroma.
* New: Introduce Elastic security.
    [Elastic security](https://www.elastic.co/security) is a program to protect, investigate, and respond to complex threats by unifying the capabilities of SIEM, endpoint security, and cloud security.
* New: Introduce RSS.
    Note: This post is a shameless direct copy of [Nicky beautiful post, read it there as it has beautiful illustrations](https://ncase.me/rss/)
    **[What is RSS (Really Simple Syndication)?](https://ncase.me/rss/)**
    Imagine an open version of Twitter or Facebook News Feed, with no psy-op ads, owned by no oligopoly, manipulated by no algorithm, and all under your full control.
    Imagine a version of the newsletter where you don't have to worry about them selling your email to scammers, labyrinth-like unsubscribe pages, or stuffing your inbox with ever more crap.
    Now imagine this existed and was extremely popular 15 years ago. Then we got suckered by the shiny walled gardens.
    Well, it's time to make like a tree and go back to the future, baby!
    **[How does RSS work?](https://ncase.me/rss/)**
    Unlike newsletters where give each publisher your email (and they may abuse that trust), RSS works on a "don't call me, I'll call you" policy.
    An RSS feed is a text file on a website. It's just a bunch of posts – no tracking or "personalization" – like a printed newspaper:
    Then, whatever RSS reader app you use – you can use any app made by anyone – it'll call the websites for the feeds you specifically opted into, no more or less. The websites can't force it in the other direction.
    Your app then shows you your posts in good ol' reverse chronological order. (Some apps let you add extra filters, but unlike social media algorithms, you control 'em.) Apps also make the posts prettier than raw text:
    Really Simple, indeed!
    **[Cool, how do I get started?](https://ncase.me/rss/)**
    First, you need a reader app. Such as the minimalist [Inoreader](https://www.inoreader.com/), but [Feedly](https://feedly.com/) is the most popular, and folks use [The Old Reader](https://theoldreader.com/). See this [list of readers](https://zapier.com/blog/best-rss-feed-reader-apps/).
    To add a feed to your app, just paste a link to the blog/site, and your app will automatically find the feed! RSS also lets you follow creators on YouTube, Substack, Medium, and more.
    **[Tips for using RSS wisely](https://ncase.me/rss/)**
    - Beware the hoarder instinct. No algorithm can save you from hoarding feeds "just in case", then being overwhelmed. The only cure is to ruthlessly Marie Kondo that crap – if a feed doesn't consistently enrich your life, cut it.
    - Some feeds only give you the excerpt of a post, with a link to see the full post at their site. Don't follow those: they break you out of the RSS reading experience, and trick you into losing time on their site. (This is a harsh rule: I used to follow Quanta Magazine's feed, but they switched from full-text to excerpts, so I unsubscribed.)
    - Don't follow feeds that update more than once a day. Go for daily digests, or better yet, weekly digests.
    **[If RSS Was So Great, Why'd It Die In The First Place](https://ncase.me/rss/)**
    Well, Google killed Google Reader in 2013, the #1 RSS reader at the time. This was to make way for Google Plus, which failed. The sacrificial lamb was for nothing.
    But Google only did what nearly everyone – including yours truly – did in 2013: leave the open, decentralized Web 1.0 for the shiny new Web 2.0 platforms. Why? Well, it was more fun & convenient.
    But now in 2021, for most of us, social media is very not fun and not convenient. That's why I went back to the future with RSS, and wrote this post encouraging you to do the same!
    (Ok, RSS had two more problems: 1) Getting overwhelmed with feeds. As said above, the only cure is to trim ruthlessly. 2) RSS lets you serve text/link/image ads, but not the creepy user-tracking ads. In 2013 that was the "best" way make money on the web, but these days ad revenue is dying, and subscriptions like Patreon/Substack are thriving.)
    And that's all, folks! Now you know how to escape the attention-draining, empathy-killing, critical-thought-suffocating siren song of the algorithms. And get your inbox less cluttered with newsletters.
    Here's to a renaissance for a kinder, better web. <3