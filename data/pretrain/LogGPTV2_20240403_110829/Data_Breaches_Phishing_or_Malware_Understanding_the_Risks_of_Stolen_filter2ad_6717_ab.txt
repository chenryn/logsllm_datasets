### Table 3: Top 20 Largest Credential Leaks in Our Dataset and the Fraction of Inverted (or Existing Plaintext) Passwords

| Number of Credentials | Source          | Plaintext after Inversion |
|-----------------------|-----------------|---------------------------|
| 558,862,722           | Unknown p       | 100.0%                    |
| 322,014,681           | MySpace p       | 100.0%                    |
| 125,322,081           | Badoo           | 33.0%                     |
| 123,947,902           | Adobe⋄         | 0.0%                      |
| 112,322,695           | LinkedIn        | 85.6%                     |
| 76,865,954            | VK p            | 99.6%                     |
| 73,355,694            | Tumblr∗         | 0.0%                      |
| 68,669,208            | Dropbox†        | 0.0%                      |
| 57,085,529            | Zoosk           | 68.2%                     |
| 51,283,424            | IMesh‡          | 0.0%                      |
| 41,631,844            | LastFM          | 85.4%                     |
| 40,724,332            | Fling p         | 100.0%                    |
| 35,822,980            | Neopets p       | 100.0%                    |
| 27,383,966            | Mate1 p         | 100.0%                    |
| 26,351,372            | Unknown p       | 99.8%                     |
| 15,249,241            | 000webhost p    | 100.0%                    |
| 15,051,549            | Taobao p        | 100.0%                    |
| 6,759,631             | NexusMods p     | 100.0%                    |
| 5,728,163             | Unknown p       | 99.7%                     |
| 4,901,088             | Unknown p       | 100.0%                    |
| 1,922,609,265         | Total           | 76.0%                     |

**Legend:**
- **p**: Password leak acquired in plaintext format; no dictionary attack required.
- **⋄**: Adobe passwords were encrypted and could not be reversed.
- **∗**: Tumblr passwords were salted SHA-1. Salt was not present in the leak acquired.
- **†**: Dropbox passwords were a mixture of bcrypt and salted SHA-1. Salt was not present in the leak acquired.
- **‡**: IMesh passwords were salted MD5. Salt was not present in the leak acquired.

### Classification and Verification

After identifying and applying the optimal parser for a document, we scan the produced columns to determine if they correspond to a credential leak. All leaks must contain a column with email addresses and a column with passwords (or password hashes). We use regular expressions to identify the column containing email addresses. Additionally, we detect IP addresses using regular expressions and User-Agent strings and mailing addresses based on a keyword dictionary (e.g., Mozilla, France).

Verifying whether a candidate document contains a password is more challenging. To handle the possibility of MD5 and SHA-1 hashed passwords, we detect columns of fixed-length strings consisting entirely of hexadecimal characters. For plaintext passwords, which lack this typical structure, we use a logistic regression model that considers character n-grams to identify likely password columns. This learning approach takes into account every string in a column simultaneously rather than operating on a row-by-row basis.

To train our password classifier, we manually parsed and labeled the columns of plaintext credential leaks in our private forum dataset. We used all password columns as positive samples and all other columns (e.g., usernames and other data) as negative examples. Each column was featurized into a binary vector of character n-grams. We determined the size of the n-grams and a threshold on the quantity of n-grams to include by running a grid search using 10-fold cross-validation on the training data. Our search considered n-grams of length 1 to 10 and feature vectors that included the top 1,000 to 100,000 most frequent n-grams, excluding common n-grams shared by both classes. The final classifier consists of n-grams of length 2 to 5 and a feature vector of the top 10,000 such n-grams per class.

To test our classifier, we manually labeled 230 candidate documents: 157 contained stolen credentials, and 73 did not. Our classifier correctly classified 93.9% of the test documents. It favors precision over recall, failing to identify an existing password column in 8.3% of leaks and misidentifying a password column in 3.1% of documents.

In the application phase, we apply our classifier to every candidate document and discard any document that fails to contain an email and potential hashed password or a password detected by the classifier. Table 2 presents a breakdown of confirmed credential leaks per collection source. In total, our automated collection identifies 3,527 documents from public sources, which combined contain 123,055,697 emails and passwords. In comparison, we managed to acquire 1.7 billion passwords from just 258 leaks on private forums, indicating a significant gap between public and private sets.

### Inverting Passwords

Based on the character length and distribution of passwords in each confirmed leak, we estimate that 14.8% of all passwords in our dataset are hashed using MD5 and 9.8% are SHA-1. We attempt to invert these passwords using a dictionary of 3,416,701,663 keywords, sourced by combining non-hashed passwords identified in previous stages of our pipeline with supplemental dictionaries curated by Weakpass3 and Crackstation.4. In total, we successfully inverted 35.8% of hashed passwords. The low hit rate may result from two reasons: black-market actors may have previously inverted credential leaks and uploaded new files with both discovered plaintext passwords and remaining uninverted hashes, or the approach fails when applied to salted passwords (as was the case for Dropbox, Tumblr, and IMesh). Table 3 summarizes our final dataset post-inversion, and Table 4 lists the most popular passwords.

### Phishing Kits & Victims

Through an undisclosed source, we obtained a sample of 10,037 phishing kits (including PHP and HTML source code) and 3,779,664 usernames and passwords belonging to victims of those kits, along with the time they were phished. Both the kits and victims were identified over the course of March 2016 to March 2017. Leveraging this data, we developed a pipeline to understand the lifecycle of phishing kits and the volume of potential victims they deceive, as shown in Figure 2.

Our pipeline hinges on the observation that phishing kits frequently use email as a mechanism for reporting stolen credentials. Using our phishing kit corpus, we first statically analyze the source code of each kit to extract its email template used to report stolen credentials. We then develop rules to match the subject and body of these messages and adapt Gmail’s anti-abuse classification pipeline to identify all inbound messages containing stolen credentials.

#### Template Extraction

All phishing kits in our corpus use PHP’s `mail()` command to report stolen credentials to an exfiltration point. We provide an example in Figure 3. This particular kit prompts a victim for their username and password before populating a message template containing the stolen information, which is then mailed to a hardcoded email. Using static analysis, we automatically identify calls to `mail()` and determine the string values supplied to each variable of the call. This search handles all include operations and nested variable instantiations. In the end, we output a template that includes the target email (e.g., exfiltration point), the message’s subject, and the message’s body stripped of variables the kit determines at runtime. Table 5 provides a breakdown of email providers for 7,780 unique exfiltration points hardcoded into kits, of which 72.3% relate to gmail.com. This heavy use indicates our pipeline should detect a significant amount of all messages related to stolen credentials.

#### Rule Generation

The next phase of our pipeline tokenizes the message templates and outputs a set of rules to match the subject and body of inbound emails that contain stolen credentials, along with a maximum expected message size. We opt for rules rather than identifying the exfiltration points in our kit corpus because a single kit may be re-configured to use multiple exfiltration points (potentially by multiple actors). For the sample kit in Figure 3, a message would match the template if its subject contained "Result from Gmail," while its body contained "Username," "Vict!m Info," and all other strings from the template’s `$message` that are not runtime variables. In total, we generated 7,325 rules covering our 10,037 kits. As an initial trial to evaluate false positives, we applied these rules to a corpus of 100,000 messages unrelated to phishing kit templates, resulting in 0 false positives.

#### Email Flagging

We modified Gmail’s anti-abuse detection systems to apply our rules to all inbound messages over the course of March 2016 to March 2017 (the same period over which the kits were collected) to identify the exfiltration points receiving stolen credentials, the volume of messages each account receives, and the volume of messages per kit template. We required any exfiltration point to receive at least 20 stolen credentials before including it in our study. In total, we flagged 12,449,036 messages (excluding 0.8% filtered due to lacking at least 20 credentials) sent to 19,311 exfiltration points. We caution that this is a strict underestimate of messages generated by phishing kits, as our coverage of kits is non-exhaustive, and kits may use non-Gmail addresses or even non-SMTP mechanisms to report stolen credentials.

### Figures and Tables

**Figure 2:** Framework for identifying inbound messages that contain credentials stolen by phishing kits and keyloggers.

**Figure 3:** Sample phishing kit that collects a victim’s user-credentials and sends them to an exfiltration point.

**Table 4:** Top 10 passwords across all plaintext leaks.

| Rank | Password   | Number of Credentials | Percent of Credentials |
|------|------------|-----------------------|------------------------|
| 1    | 123456     | 6,387,184             | 0.35%                  |
| 2    | password   | 2,759,747             | 0.15%                  |
| 3    | 123456789  | 2,249,344             | 0.12%                  |
| 4    | abc123     | 985,709               | 0.10%                  |
| 5    | password1  | 888,836               | 0.05%                  |
| 6    | homelesspa | 855,477               | 0.05%                  |
| 7    | 111111     | 855,257               | 0.05%                  |
| 8    | qwerty     | 829,835               | 0.05%                  |
| 9    | 12345678   | 828,848               | 0.05%                  |
| 10   | 1234567    | 740,464               | 0.04%                  |

*Note: "homelesspa" was the most common password in the MySpace credential leak but appears to be automatically generated as all email addresses begin with "msmhomelessartist."*

**Table 5:** Breakdown of the top five email providers used by miscreants as exfiltration points to receive stolen credentials.

| Mail Provider | Phishing Kits Popularity | Keyloggers Popularity |
|---------------|--------------------------|-----------------------|
| Gmail         | 72.3%                    | 39.0%                 |
| Yahoo         | 6.8%                     | -                     |
| Yandex        | 5.1%                     | 12.3%                 |
| Hotmail       | 4.2%                     | 3.6%                  |
| Outlook       | 2.2%                     | -                     |
| Other         | 9.4%                     | 35.3%                 |

*Note: The "Other" category includes various smaller email providers.*

This optimized text is more structured, clear, and professional, making it easier to read and understand.