# Pluggable Storage in PostgreSQL

## Presenter
- **Andres Freund**
  - **Role**: PostgreSQL Developer & Committer
  - **Email**: [PI:EMAIL]
  - **Twitter**: @AndresFreundTec
  - **Talk Link**: [anarazel.de/talks/2018-10-25-pgconfeu-pluggable-storage/pluggable.pdf](anarazel.de/talks/2018-10-25-pgconfeu-pluggable-storage/pluggable.pdf)

## Contributors
- Haribabu Kommi
- Alvaro Herrera
- Alexander Korotkov
- Ashutosh Bapat
- Amit Khandekar

## What is "Storage" in PostgreSQL?
- **Content of a TABLE or MATERIALIZED VIEW** (not indexes)
- **Not just an I/O layer change**
- **Code Name**: 'tableam' - Table Access Method

## Architecture Overview
### Current Architecture
- **Client**
- **Parser**
- **Catalog**
- **Planner**
- **Executor (DDL)**
- **Postgres (Heap)**
- **Buffer Manager (Buffers)**
- **Storage Manager (I/O)**
- **Page Cache**
- **Disk**
- **Kernel**

### Proposed Architecture
- **Client**
- **Parser**
- **Catalog**
- **Planner**
- **Executor (DDL)**
- **Table Access Manager (HeapAM, ZHeapAM, WhatAM)**
- **Buffer Manager (Buffers)**
- **Storage Manager (I/O)**
- **Page Cache**
- **Disk**
- **Kernel**

## What is "Pluggable" in Pluggable Storage?
- **CREATE EXTENSION magic_storage;**
- **CREATE TABLE something (…) USING magic_storage;**
- **SET default_table_access_method = 'magic_storage';**
- **CREATE TABLE else (…);** -- still uses `magic_storage`

## Motivation
- **ZHeap**: UNDO-based storage to address bloat and write amplification.
- **Columnar Storage**: For efficient data retrieval.
- **Experiments**: To explore new storage methods.

## Challenges
- **Proliferation of half-baked storage engines** instead of one good one.
- **Closed and commercial storage engines**.
- **Architectural impact** on the system.

## Key Features
- **Multiple table AMs** should coexist at compile time.
- **New table AMs** can be added at runtime (e.g., `CREATE EXTENSION new_am;`).
- **Indexes** should work across different table AMs.
- **Planner** should function largely unmodified with different AMs.
- **Non-heap catalog tables** are not supported.
- **Fully extensible WAL logging** is not provided.
- **Executor/Planner magic** to make every storage method superfast is not included.

## Comparison with Foreign Data Wrapper (FDW) API
- **FDWs** hook in at the planner level.
- **FDWs** are not intended for local data storage.
- **DDL support** is limited.
- **Foreign Keys** are not supported.
- **Different goals**, but some overlap exists.

## TupleTableSlots
- **Historic name**: "Tuple Holder"
- **Function**: Holds various forms of tuples, making column access cheaper.
- **Extensibility**:
  ```c
  typedef struct TupleTableSlotOps {
      size_t base_slot_size;
      void (*init)(TupleTableSlot *slot);
      void (*getsomeattrs)(TupleTableSlot *slot, int natts);
      HeapTuple (*copy_heap_tuple)(TupleTableSlot *slot);
      // ...
  }
  struct TupleTableSlot {
      NodeTag type;
      uint16 tts_flags;
      AttrNumber tts_nvalid;
      const TupleTableSlotOps *const tts_cb;
      Datum *tts_values; /* current per-attribute values */
      bool *tts_isnull; /* current per-attribute isnull flags */
  }
  ```

## Table AM Handlers
```sql
SELECT * FROM pg_am WHERE amtype = 't';
```
| amname | amhandler | amtype |
|--------|-----------|--------|
| heap   | heap_tableam_handler | t |

```sql
\df heap_tableam_handler
```
| Schema | Name | Result data type | Argument data types | Type |
|--------|------|------------------|---------------------|------|
| pg_catalog | heap_tableam_handler | table_am_handler | internal | func |

### Implementation
```c
Datum heap_tableam_handler(PG_FUNCTION_ARGS) {
    PG_RETURN_POINTER(&heapam_methods);
}

static const TableAmRoutine heapam_methods = {
    .type = T_TableAmRoutine,
    .slot_callbacks = heapam_slot_callbacks,
    // ...
};
```

## TupleTableSlots #2
```c
extern PGDLLIMPORT const TupleTableSlotOps TTSOpsVirtual;
extern PGDLLIMPORT const TupleTableSlotOps TTSOpsHeapTuple;
extern PGDLLIMPORT const TupleTableSlotOps TTSOpsMinimalTuple;
extern PGDLLIMPORT const TupleTableSlotOps TTSOpsBufferTuple;

// Functions to create and manage TupleTableSlots
extern TupleTableSlot *MakeTupleTableSlot(TupleDesc tupleDesc, const TupleTableSlotOps *tts_cb);
extern TupleTableSlot *ExecAllocTableSlot(List **tupleTable, TupleDesc desc, const TupleTableSlotOps *tts_cb);
extern TupleTableSlot *MakeSingleTupleTableSlot(TupleDesc tupdesc, const TupleTableSlotOps *tts_cb);
// ...
```

## Table AM API – DML & DDL
```c
typedef struct TableAmRoutine {
    // DML functions
    TupleInsert_function tuple_insert;
    TupleInsertSpeculative_function tuple_insert_speculative;
    TupleCompleteSpeculative_function tuple_complete_speculative;
    TupleUpdate_function tuple_update;
    TupleDelete_function tuple_delete;
    MultiInsert_function multi_insert;
    TupleLock_function tuple_lock;
    // DDL functions
    RelationVacuum_function relation_vacuum;
    RelationScanAnalyzeNextBlock_function scan_analyze_next_block;
    RelationScanAnalyzeNextTuple_function scan_analyze_next_tuple;
    RelationCopyForCluster_function relation_copy_for_cluster;
    RelationSync_function relation_sync;
    // Index functions
    IndexBuildRangeScan_function index_build_range_scan;
    IndexValidateScan_function index_validate_scan;
} TableAmRoutine;
```

## Table AM API – Scans
```c
typedef struct TableAmRoutine {
    // Scan functions
    ScanBegin_function scan_begin;
    ScanRescan_function scan_rescan;
    ScanEnd_function scan_end;
    ScanGetnextSlot_function scan_getnextslot;
    BeginIndexFetchTable_function begin_index_fetch;
    EndIndexFetchTable_function reset_index_fetch;
    EndIndexFetchTable_function end_index_fetch;
    TupleFetchFollow_function tuple_fetch_follow;
    BitmapPagescan_function scan_bitmap_pagescan;
    BitmapPagescanNext_function scan_bitmap_pagescan_next;
} TableAmRoutine;
```

## Infrastructure Changes
- **Rote changes** to using slots and new scan APIs.
  - DDL
  - Many executor nodes
- **Complex slot changes**:
  - Triggers
  - EvalPlanQual
  - Fix discrepancies between declared and actual slot types
  - Analyze
  - COPY
- **Complex executor changes**:
  - Bitmap Scan
  - Sample Scan
- **Other changes**:
  - Error checks in extensions like pageinspect

## Problems
- **Indexes** only have space for a 6-byte tuple-identifier.
  - Good enough for now, but may need generalization.
- **Planner/Executor improvements** needed for efficiency with some storage types (e.g., columnar).
  - Can be addressed via planner hooks and custom executor nodes.
- **Unnecessary conversions** to/from `HeapTuple`.
- **WAL logging** not as extensible as desired.