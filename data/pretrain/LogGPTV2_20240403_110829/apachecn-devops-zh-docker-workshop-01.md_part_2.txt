    在输出中，您应该看到这个容器映像的第二个实例已经完成了它的执行并进入了停止状态，如输出的`STATUS`列中的`Exit (0)`所示:
    ```
    CONTAINER ID     IMAGE           COMMAND       CREATED
      STATUS                      PORTS               NAMES
    e86277ca07f1     hello-world     "/hello"      2 minutes ago
      Exited (0) 2 minutes ago                        awesome_euclid
    24c4ce56c904     hello-world     "/hello"      20 minutes ago
      Exited (0) 20 minutes ago                       inspiring_moser
    ```
    现在，您的输出中显示了这个容器的第二个实例。每次执行`docker run`命令时，Docker 将创建一个包含属性和数据的容器的新实例。您可以在系统资源允许的情况下运行尽可能多的容器实例。20 分钟前，您在本例中创建了一个实例。你两分钟前创建的第二个实例。
7.  Check the base image again by executing the `docker images` command once more:
    ```
    $ docker images
    ```
    返回的输出将显示 Docker 从中创建两个运行实例的单个基本映像:
    ```
    REPOSITORY     TAG       IMAGE ID        CREATED         SIZE
    hello-world    latest    bf756fb1ae65    3 months ago    13.3kB
    ```
在本练习中，您使用`docker run`启动`hello-world`容器。为了实现这一点，Docker 从 Docker Hub 注册表下载了映像，并在 Docker 引擎中执行它。一旦基本映像被下载，你就可以使用后续的`docker run`命令创建任意多个容器实例。
Docker 容器管理比简单地启动和查看在您的开发环境中运行的容器的状态更复杂。Docker 还支持许多其他操作，这些操作有助于深入了解 Docker 主机上运行的应用的状态。在下一节中，我们将学习如何使用不同的命令来管理 Docker 容器。
# ma〔t0〕naging Docker 容器
在我们的容器之旅中，我们将经常从本地环境中拉出、启动、停止和移除容器。在生产环境中部署容器之前，我们首先要在本地运行容器，以了解它是如何工作的以及正常行为是什么样子，这一点非常重要。这包括启动容器、停止容器、获取关于容器如何运行的详细信息，当然，还包括访问容器日志以查看关于容器内运行的应用的关键细节。这些基本命令概述如下:
*   `docker pull`:该命令将容器镜像下载到本地缓存
*   `docker stop`:此命令停止正在运行的容器实例
*   `docker start`:该命令启动不再处于运行状态的容器实例
*   `docker restart`:这个命令重启一个正在运行的容器
*   `docker attach`:该命令允许用户访问(或附加)正在运行的 Docker 容器实例的主进程
*   `docker exec`:该命令在运行的容器内执行一个命令
*   `docker rm`:该命令删除一个停止的容器
*   `docker rmi`:该命令删除一个容器映像
*   `docker inspect`:该命令显示容器状态的详细信息
容器生命周期管理是生产环境中有效容器管理的重要组成部分。在评估容器化基础设施的健康状况时，了解如何调查运行中的容器至关重要。
在下面的练习中，我们将分别使用这些命令，深入了解它们的工作原理，以及如何利用它们来了解您的容器化基础架构的运行状况。
## Ex ercise 1.02:管理容器生命周期
在开发和生产环境中管理容器时，了解容器实例的状态至关重要。许多开发人员使用包含特定基线配置的基本容器映像，在此基础上可以部署他们的应用。Ubuntu 是用户用来打包应用的常用基础映像。
与完整的操作系统映像不同，Ubuntu 基本容器映像非常小，并且有意省略了完整操作系统安装的许多包。大多数基本映像都有软件包系统，允许您安装任何丢失的软件包。
请记住，在构建容器映像时，您希望尽可能保持基本映像的精简，只安装最必要的包 s。这确保了 Docker 主机可以快速拉出和启动容器映像。
在本练习中，您将使用官方的 Ubuntu 基本容器映像。此映像将用于启动容器实例，这些实例将用于测试各种容器生命周期管理命令，如`docker pull`、`docker start`和`docker stop`。这个容器映像很有用，因为默认的基本映像允许我们在长时间运行的会话中运行容器实例，以了解容器生命周期管理命令是如何工作的。在本练习中，您还将拉出`Ubuntu 18.04`容器映像，并将其与`Ubuntu 19.04`容器映像进行比较:
1.  In a new terminal or PowerShell window, execute the `docker pull` command to download the `Ubuntu 18.04` container image:
    ```
    $ docker pull ubuntu:18.04
    ```
    您应该会看到以下输出，表明 Docker 正在下载基础映像的所有层:
    ```
    5bed26d33875: Pull complete 
    f11b29a9c730: Pull complete 
    930bda195c84: Pull complete 
    78bf9a5ad49e: Pull complete 
    Digest: sha256:bec5a2727be7fff3d308193cfde3491f8fba1a2ba392
            b7546b43a051853a341d
    Status: Downloaded newer image for ubuntu:18.04
    docker.io/library/ubuntu:18.04
    ```
2.  Use the `docker pull` command to download the `Ubuntu 19.04` base image:
    ```
    $ docker pull ubuntu:19.04
    ```
    当 Docker 下载`Ubuntu 19.04`基础映像时，您将看到类似的输出:
    ```
    19.04: Pulling from library/ubuntu
    4dc9c2fff018: Pull complete 
    0a4ccbb24215: Pull complete 
    c0f243bc6706: Pull complete 
    5ff1eaecba77: Pull complete 
    Digest: sha256:2adeae829bf27a3399a0e7db8ae38d5adb89bcaf1bbef
            378240bc0e6724e8344
    Status: Downloaded newer image for ubuntu:19.04
    docker.io/library/ubuntu:19.04
    ```
3.  Use the `docker images` command to confirm that the container images are downloaded to the local container cache:
    ```
    $ docker images
    ```
    本地容器缓存的内容将显示`Ubuntu 18.04`和`Ubuntu 19.04`基础映像，以及我们之前练习中的`hello-world`映像:
    ```
    REPOSITORY     TAG        IMAGE ID         CREATED         SIZE
    ubuntu         18.04      4e5021d210f6     4 weeks ago     64.2MB
    ubuntu         19.04      c88ac1f841b7     3 months ago    70MB
    hello-world    latest     bf756fb1ae65     3 months ago    13.3kB
    ```
4.  Before running these images, use the `docker inspect` command to get verbose output about what makes up the container images and how they differ. In your terminal, run the `docker inspect` command and use the image ID of the `Ubuntu 18.04` container image as the main argument:
    ```
    $ docker inspect 4e5021d210f6
    ```
    `inspect`输出将包含定义该容器的所有属性的大列表。例如，您可以看到容器中配置了哪些环境变量，容器是否在上次更新映像时设置了主机名，以及定义该容器的所有层的详细信息。该输出包含重要的调试细节，这些细节在计划升级时可能很有价值。以下是`inspect`命令的截断输出。在`Ubuntu 18.04`映像中，`"Created"`参数应提供容器映像的创建日期和时间:
    ```
    "Id": "4e5021d210f6d4a0717f4b643409eff23a4dc01c4140fa378b1b
           f0a4f8f4",
    "Created": "2020-03-20T19:20:22.835345724Z",
    "Path": "/bin/bash",
    "Args": [],
    ```
5.  Inspecting the `Ubuntu 19.04` container, you can see that this parameter is different. Run the `docker inspect` command in the `Ubuntu 19.04` container image ID:
    ```
    $ docker inspect c88ac1f841b7
    ```
    在显示的输出中，您将看到该容器映像是在与`18.04`容器映像不同的日期创建的:
    ```
    "Id": "c88ac1f841b74e5021d210f6d4a0717f4b643409eff23a4dc0
           1c4140fa"
    "Created": "2020-01-16T01:20:46.938732934Z",
    "Path": "/bin/bash",
    "Args": []
    ```
    如果您知道 Ubuntu 基础映像中可能存在安全漏洞，这可能非常重要。这些信息对于帮助您确定要运行的容器版本也是至关重要的。
6.  在检查了两个容器映像后，很明显，您最好的选择是坚持使用 Ubuntu 长期支持 18.04 版本。从前面的输出可以看出，18.04 版本比 19.04 版本更新。这是意料之中的，因为 Ubuntu 通常会为长期支持版本提供更稳定的更新。
7.  Use the `docker run` command to start an instance of the Ubuntu 18.04 container:
    ```
    $ docker run -d ubuntu:18.04
    ```
    请注意，这次我们使用带有`-d`标志的`docker run`命令。这告诉 Docker 在守护模式下(或在后台)运行容器。如果我们忽略`-d`标志，容器将接管我们当前的 Docker，直到容器内的主要流程终止。
    注意
    成功调用`docker run`命令通常只会返回容器标识作为输出。Docker 的某些版本不会返回任何输出。
8.  Check the status of the container using the `docker ps -a` command:
    ```
    $ docker ps -a
    ```
    这将显示类似如下的输出:
    ```
    CONTAINER ID     IMAGE           COMMAND        CREATED
      STATUS                     PORTS         NAMES
    c139e44193de     ubuntu:18.04    "/bin/bash"    6 seconds ago
      Exited (0) 4 seconds ago                 xenodochial_banzai
    ```
    如您所见，您的容器被停止并退出。这是因为容器内部的主要过程是`/bin/bash`，是一个壳。Bash shell 不能在没有以交互模式执行的情况下运行，因为它需要用户输入和输出文本。
9.  再次运行`docker run`命令，传入`-i`标志使会话交互(期待用户输入)，传入`-t`标志给容器分配一个**伪 tty** 处理程序。`pseudo-tty` handler 本质上将用户终端链接到容器内部运行的交互式 Bash shell。这将允许 Bash 正常运行，因为它将指示容器在交互模式下运行，期望用户输入。您也可以通过传入`--name`标志给容器一个人类可读的名称。在您的 Bash 终端中键入以下命令:
    ```
    $ docker run -i -t -d --name ubuntu1 ubuntu:18.04
    ```
10.  Execute the `docker ps -a` command again to check the status of the container instance:
    ```
    $ docker ps -a 
    ```
    现在，您应该看到新实例正在运行，以及刚才未能启动的实例:
    ```
    CONTAINER ID    IMAGE          COMMAND         CREATED
      STATUS            PORTS               NAMES
    f087d0d92110    ubuntu:18.04   "/bin/bash"     4 seconds ago
      Up 2 seconds                          ubuntu1
    c139e44193de    ubuntu:18.04   "/bin/bash"     5 minutes ago
      Exited (0) 5 minutes ago              xenodochial_banzai
    ```
11.  You now have an Ubuntu container up and running. You can run commands inside this container using the `docker exec` command. Run the `exec` command to access a Bash shell, which will allow us to run commands inside the container. Similar to `docker run`, pass in the `-i` and `-t` flags to make it an interactive session. Also pass in the name or ID of the container, so that Docker knows which container you are targeting. The final argument of `docker exec` is always the command you wish to execute. In this case, it will be `/bin/bash` to start a Bash shell inside the container instance:
    ```
    docker exec -it ubuntu1 /bin/bash
    ```
    您应该立即看到您的提示更改为根外壳。这表明您已经成功地在 Ubuntu 容器中启动了一个外壳。容器的主机名`cfaa37795a7b`取自容器标识的前 12 个字符。这允许用户确定他们正在访问哪个容器，如以下示例所示:
    ```
    root@cfaa37795a7b:/#
    ```
12.  从容器内部来看，您可以使用的工具非常有限。与虚拟机映像不同，就预装的软件包而言，容器映像非常少。然而`echo`命令应该是可用的。使用`echo`给文本文件写一条简单的消息:
    ```
    root@cfaa37795a7b:/# echo "Hello world from ubuntu1" > hello-world.txt
    ```
13.  Run the `exit` command to exit from the Bash shell of the `ubuntu1` container. You should return to your normal terminal shell:
    ```
    root@cfaa37795a7b:/# exit
    ```
    该命令将返回如下输出。请注意，对于运行该命令的每个用户，输出可能会有所不同: