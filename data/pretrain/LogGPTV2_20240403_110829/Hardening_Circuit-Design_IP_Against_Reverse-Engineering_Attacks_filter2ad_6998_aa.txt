title:Hardening Circuit-Design IP Against Reverse-Engineering Attacks
author:Animesh Chhotaray and
Thomas Shrimpton
4
3
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Hardening Circuit-Design IP Against
Reverse-Engineering Attacks
Animesh Chhotaray
University of Florida
chho58@uﬂ.edu
Thomas Shrimpton
University of Florida
teshrim@uﬂ.edu
Abstract—Design-hiding techniques are a central piece of
academic and industrial efforts to protect electronic circuits
from being reverse-engineered. However, these techniques have
lacked a principled foundation to guide their design and security
evaluation, leading to a long line of broken schemes. In this paper,
we begin to lay this missing foundation.
We establish formal syntax for design-hiding (DH) schemes,
a cryptographic primitive that encompasses all known design-
stage methods to hide the circuit that is handed to a (potentially
adversarial) foundry for fabrication. We give two security notions
for this primitive: function recovery (FR) and key recovery (KR).
The former is the ostensible goal of design-hiding methods to
prevent reverse-engineering the functionality of the circuit, but
most prior work has focused on the latter. We then present the
ﬁrst provably (FR,KR)-secure DH scheme, OneChaffhd.
A side-beneﬁt of our security proof
is a framework for
analyzing a broad class of new DH schemes. We ﬁnish by
unpacking our main security result, to provide parameter-setting
guidance.
Index Terms—cryptography; provable security; design hiding;
hardware obfuscation; logic locking; logic encryption; IC cam-
ouﬂaging
I. INTRODUCTION
Modern integrated-circuits (ICs, or “chips”) are the product
of a globally distributed supply-chain [1]. Much of this is
driven by economics: the cost of building and operating a
chip fabrication facility is exorbitant, so circuit designers are
forced to send their digital intellectual property (IP) to external
foundries for fabrication. In 2018, just ten foundries accounted
for more than 95% of the chip-fabrication market [2].
Given the lack of choice they have concerning who will
fabricate and package their IP into chips, IP authors are
motivated to protect their high-value circuit designs from being
reverse-engineered and stolen by untrusted foundries. Along
with IP theft, inserting difﬁcult-to-detect malicious implants
(or trojans) into ICs and producing out-of-contract, counterfeit
ICs are the three major security issues in the IC supply chain.
We focus on the threat of IP theft because (intuitively)
trojan insertion and IC counterfeiting are more
successful
difﬁcult tasks when the adversary is denied access to the
original circuit design. What’s more, there are reports that
estimate the cost of IP theft, and subsequent counterfeiting to
be more than a hundred billion dollars in 2011 alone [3], [4].
Note that while there are legal restrictions for the foundries to
not steal the circuit design of IP authors, the fact that they can
steal and sell counterfeit chips in the black market without
Fig. 1: Simpliﬁed view of the setting for Design-Hiding
schemes. The IP author is involved in hiding (a) and restoring
(c) chips. The (potentially malicious) foundry controls fabri-
cation (b) of chips.
getting caught gives them incentive to fabricate counterfeit
chips.
IP theft by the foundry is enabled when it obtains (effec-
tively) the gate-and-wire layout for the circuit to be fabricated.
Thus, the last decade has seen a surge in research on methods
to “hide” the circuit IP [5]. We refer to such methods as
design-hiding (DH) schemes. An important constraint on DH
schemes is that the IP author still needs the foundry to fabricate
something useful; simply applying traditional encryption to
the gate-and-wire layout and handing the resulting ciphertext
to the foundry does not sufﬁce. (We discuss relation to other
cryptographic primitives like program obfuscation, multi-party
computation and function secret-sharing in Section B.)
Framing the problem. Fig. 1 gives a simpliﬁed picture of
the setting in which DH techniques are typically deployed.
An IP author attempts to hide (Fig. 1(a)) the underlying func-
tionality F that its plaintext circuit computes by presenting
the foundry with an opaque version of the circuit. Upon
receiving the opaque circuit, the foundry is meant to fabricate
it (Fig. 1(b)) into physical chips that compute whatever the
opaque circuit does. These chips will likely not compute F , but
this functionality can be restored (Fig. 1(c)) by the IP author.
Intuitively, the IP author’s security goal is that only they can
produce a chip that correctly computes F , i.e., the IP author’s
restoration mechanism is required, and only they can execute
it properly. Chips that have been restored may enter the market
and are available for purchase by the end-user.
Characterizing prior approaches. Broadly speaking, prior
© 2022, Animesh Chhotaray. Under license to IEEE.
DOI 10.1109/SP46214.2022.00023
1672
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
work on DH schemes falls into three categories: logic locking
[6]–[8], IC camouﬂaging [8]–[10], and split manufacturing
[11], [12]. Logic-locking1 techniques are employed when an
IP author must outsource the entire fabrication process to an
untrusted, third-party foundry. Here, the foundry is provided
a complete circuit description (modulo, perhaps, a small
block of uninitialized write-once, tamper-resistant memory)
to fabricate. This is the setting most commonly considered
in the literature on circuit-design hiding. Split manufacturing
primarily aims to prevent an untrusted foundry from inserting
hardware-trojans into the IP author’s circuit [13]; as the name
suggests, the fabrication of chips is spread across multiple par-
ties, one of which is (typically) the IP author or a trusted proxy.
When the trust model is altered, so that the IP author trusts the
foundry but not the end user, IC camouﬂaging methods [10],
[14] can be employed. Here, the foundry fabricates an opaque
circuit that contains several “camouﬂaged” logic cells. An end
user that purchases fabricated chips from the market does not
know the functionality of these camouﬂaged cells and hence
will fail to recover the hidden design.
Our focus will be on adversarial foundries. As such, IC
camouﬂaging is out of scope. Split manufacturing targets
adversarial foundries, but it requires (effectively) that the IP
author has fabrication capabilities. This is most often not the
case, in practice.
Thus, we drill down on the logic-locking approach to hiding
IP from untrusted foundries, and building DH schemes that
are provably secure in the attack model assumed by logic-
locking schemes. Here, the foundry has unrestricted access2
to the opaque circuit and full control over the entire fabrication
process, making this a challenging setting. We note that the
foundry may also play the role of an end-user by purchasing
packaged (restored) chips from the market. By running the
chips on inputs of its choosing, it may learn the value of the
original circuit design on a subset of inputs. Finally, we note
that although our focus is on the logic-locking setting, our
syntax also covers IC camouﬂaging and split manufacturing
techniques. Please see Section A to get a historical context of
logic-locking schemes.
Advancing the state of the art. The design of logic-locking
schemes (2008–2021) yielded schemes that were efﬁcient,
in terms of power, performance and area overhead of the
opaque circuit, but ultimately insecure. We attribute this to
a myopic view of what it means for a scheme to be secure,
combined with a natural eagerness to focus upon efﬁciency.
We are not alone in this belief:
in their 2019 paper that
broke the “provably secure” SFLL-HD scheme [15], Sirone
and Subramanyan state
“Our results reinforce the observation that all logic
locking schemes appear to be vulnerable to attack.
1This is one of several monikers used in the hardware community, oth-
ers include hardware obfuscation, logic encryption, design withholding and
encryption.
2We use the racially neutral term “unrestricted access” instead of “whitebox
access” to a circuit/function. Similarly, we use “oracle access” instead of
“blackbox access.”
We assert this is because the logic locking commu-
nity has not adopted notions of provable security
from cryptography.” [16]
Indeed, the paper that presented SFLL-HD claimed provable
security because it (provably) resisted three prominent attacks;
but not Sirone and Subramanyan’s FALL attack. This provides
a clear reminder that a scheme should claim security —
explicitly scoped by a principled and well deﬁned security
notion— only if it provably thwarts all (suitably efﬁcient)
attacks that are admitted by that notion.
In response to this state of affairs, we give a principled,
provable-security foundation to the area. Our main contribu-
tions are as follows:
1) First, we formalize DH schemes as an abstract, syntactic
object, i.e., a deﬁnition of what a DH scheme is. A DH
scheme will be deﬁned by two component algorithms,
Hide and Restore,
that correspond to the hiding and
restoration phases discussed, above. In addition, we el-
evate the fabrication step, of turning circuit descriptions
(necessarily visible to the foundry) into fully packaged
chips (which require considerable resources and expertise
to “open” and analyze), to an explicit algorithm Fab.
This has important implications for security that have not
previously been surfaced.
2) We establish two security notions that capture the capa-
bilities, and goals (KR and FR), of an adversarial foundry.
These notions make formal the attack model considered
in prior works, and attends to details that have sometimes
been quietly elided, e.g., a priori knowledge about the
hidden function F that the foundry may have.
We note that
the SAT attack [17], and other key-
recovery attacks [16]–[26], are admitted by our formal
KR-security notion. (Some of these attacks are against
DH schemes [15], [27]–[32] that were designed (post
2015) to thwart SAT attack.) The KR-security notion and
our formal FR-security notion share the same abstract
attack model, and Theorem 1 shows that KR insecurity
immediately implies FR insecurity. Thus, the existence
of these attacks implies that prior logic-locking schemes
cannot achieve our notion of FR security.
3) We give the ﬁrst DH scheme, OneChaffhd, that provably