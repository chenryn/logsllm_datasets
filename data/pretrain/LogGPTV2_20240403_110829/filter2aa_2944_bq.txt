 A more general approach is to implement the GeneralCaveatVerifier interface,
which allows you to implement arbitrary conditions to satisfy a caveat. Listing 9.17
shows an example verifier to check that the since query parameter to the find-
Messages method is after a certain time, allowing you to restrict a client to only view
messages since yesterday. The class parses the caveat and the parameter as Instant
objects and then checks that the request is not trying to read messages older than the
caveat using the isAfter method. Open the MacaroonTokenStore.java file again and
add the contents of listing 9.17 as an inner class.
private static class SinceVerifier implements GeneralCaveatVerifier {
    private final Request request;
    private SinceVerifier(Request request) {
        this.request = request;
    }
    @Override
    public boolean verifyCaveat(String caveat) {
        if (caveat.startsWith("since > ")) {                    
            var minSince = Instant.parse(caveat.substring(8));  
            var reqSince = Instant.now().minus(1, ChronoUnit.DAYS);      
            if (request.queryParams("since") != null) {                  
                reqSince = Instant.parse(request.queryParams("since"));  
            }
            return reqSince.isAfter(minSince);     
        }
        return false;   
    }
}
You can then add the new verifier to the read method by adding the following line
    verifier.satisfyGeneral(new SinceVerifier(request));
next to the lines adding the other caveat verifiers. The finished code to construct the
verifier should look as follows:
var verifier = new MacaroonsVerifier(macaroon);
verifier.satisfyGeneral(new TimestampCaveatVerifier());
verifier.satisfyExact("method = " + request.requestMethod());
verifier.satisfyGeneral(new SinceVerifier(request));
ADDING CAVEATS
To add a caveat to a macaroon, you can parse it using the MacaroonsBuilder class and
then use the add_first_party_caveat method to append caveats, as shown in list-
ing 9.18. The listing is a standalone command-line program for adding caveats to a
Listing 9.17
A custom caveat verifier
Check the 
caveat matches 
and parse the 
restriction.
Determine the
“since” parameter
value on the request.
Satisfy the caveat if the 
request is after the earliest 
message restriction.
Reject all 
other caveats.
327
Macaroons: Tokens with caveats
macaroon. It first parses the macaroon, which is passed as the first argument to the
program, and then loops through any remaining arguments treating them as caveats.
Finally, it prints out the resulting macaroon as a string again. Navigate to the src/main/
java/com/manning/apisecurityinaction folder and create a new file named Caveat-
Appender.java and type in the contents of the listing.
package com.manning.apisecurityinaction;
import com.github.nitram509.jmacaroons.MacaroonsBuilder;
import static com.github.nitram509.jmacaroons.MacaroonsBuilder.deserialize;
public class CaveatAppender {
    public static void main(String... args) {
        var builder = new MacaroonsBuilder(deserialize(args[0]));    
        for (int i = 1; i < args.length; ++i) {       
            var caveat = args[i];                     
            builder.add_first_party_caveat(caveat);   
        }                                             
        System.out.println(builder.getMacaroon().serialize());     
    }
}
IMPORTANT
Compared to the server, the client needs only a few lines of code
to append caveats and doesn’t need to store any secret keys. 
To test out the program, use the Natter API to create a new social space and receive a
capability URI with a macaroon token. In this example, I’ve used the jq and cut utili-
ties to extract the macaroon token, but you can manually copy and paste if you prefer:
MAC=$(curl -u demo:changeit -H 'Content-Type: application/json' \
  -d '{"owner":"demo","name":"test"}' \
  https://localhost:4567/spaces | jq -r '.["messages-rw"]' \
  | cut -d= -f2)
You can then append a caveat, for example setting the expiry time a minute or so into
the future:
NEWMAC=$(mvn -q exec:java \
  -Dexec.mainClass= com.manning.apisecurityinaction.CaveatAppender \
  -Dexec.args="$MAC 'time < 2020-08-03T12:05:00Z'")
You can then use this new macaroon to read any messages in the space until it expires:
curl -u demo:changeit -i \
  "https://localhost:4567/spaces/1/messages?access_token=$NEWMAC"
After the new time limit expires, the request will return a 403 Forbidden error, but the
original token will still work (just change $NEWMAC to $MAC in the query to test this).
Listing 9.18
Appending caveats
Parse the macaroon and
create a MacaroonsBuilder.
Add each caveat to 
the macaroon.
Serialize the macaroon
back into a string.
328
CHAPTER 9
Capability-based security and macaroons
This demonstrates the core advantage of macaroons: once you’ve configured the
server it’s very easy (and fast) for a client to append contextual caveats that restrict the
use of a token, protecting those tokens in case of compromise. A JavaScript client run-
ning in a web browser can use a JavaScript macaroon library to easily append caveats
every time it uses a token with just a few lines of code.
9.3.4
Third-party caveats
First-party caveats provide considerable flexibility and security improvements over tra-
ditional tokens on their own, but macaroons also allow third-party caveats that are ver-
ified by an external service. Rather than the API verifying a third-party caveat directly,
the client instead must contact the third-party service itself and obtain a discharge mac-
aroon that proves that the condition is satisfied. The two macaroons are cryptographi-
cally tied together so that the API can verify that the condition is satisfied without
talking directly to the third-party service.
DEFINITION
A discharge macaroon is obtained by a client from a third-party ser-
vice to prove that a third-party caveat is satisfied. A third-party service is any
service that isn’t the client or the server it is trying to access. The discharge
macaroon is cryptographically bound to the original macaroon such that the
API can ensure that the condition has been satisfied without talking directly
to the third-party service.
Third-party caveats provide the basis for loosely coupled decentralized authorization
and provide some interesting properties:
 The API doesn’t need to directly communicate with the third-party service.
 No details about the query being answered by the third-party service are dis-
closed to the client. This can be important if the query contains personal infor-
mation about a user.
 The discharge macaroon proves that the caveat is satisfied without revealing any
details to the client or the API.
 Because the discharge macaroon is itself a macaroon, the third-party service
can attach additional caveats to it that the client must satisfy before it is granted
access, including further third-party caveats.
For example, a client might be issued with a long-term macaroon token to performing
banking activities on behalf of a user, such as initiating payments from their account. As
well as first-party caveats restricting how much the client can transfer in a single trans-
action, the bank might attach a third-party caveat that requires the client to obtain
authorization for each payment from a transaction authorization service. The transac-
tion authorization service checks the details of the transaction and potentially con-
firms the transaction directly with the user before issuing a discharge macaroon tied
to that one transaction. This pattern of having a single long-lived token providing gen-
eral access, but then requiring short-lived discharge macaroons to authorize specific
transactions is a perfect use case for third-party caveats.
329
Macaroons: Tokens with caveats
CREATING THIRD-PARTY CAVEATS
Unlike a first-party caveat, which is a simple string, a third-party caveat has three com-
ponents:
 A location hint telling the client where to locate the third-party service.
 A unique unguessable secret string, which will be used to derive a new HMAC
key that the third-party service will use to sign the discharge macaroon.
 An identifier for the caveat that the third-party can use to identify the query.
This identifier is public and so shouldn’t reveal the secret.
To add a third-party caveat to a macaroon, you use the add_third_party_caveat
method on the MacaroonsBuilder object:
    macaroon = MacaroonsBuilder.modify(macaroon)     
        .add_third_party_caveat("https://auth.example.com",  
            secret, caveatId)                                
        .getMacaroon();
The unguessable secret should be generated with high entropy, such as a 256-bit value
from a SecureRandom:
var key = new byte[32];
new SecureRandom().nextBytes(key);
var secret = Base64.getEncoder().encodeToString(key);
When you add a third-party caveat to a macaroon, this secret is encrypted so that only
the API that verifies the macaroon will be able to decrypt it. The party appending the
caveat also needs to communicate the secret and the query to be verified to the third-
party service. There are two ways to accomplish this, with different trade-offs:
 The caveat appender can encode the query and the secret into a message and
encrypt it using a public key from the third-party service. The encrypted value is
then used as the identifier for the third-party caveat. The third-party can then
decrypt the identifier to discover the query and secret. The advantage of this
approach is that the API doesn’t need to directly talk to the third-party service,
but the encrypted identifier may be quite large.
 Alternatively, the caveat appender can contact the third-party service directly
(via a REST API, for example) to register the caveat and secret. The third-party
service would then store these and return a random value (known as a ticket)
that can be used as the caveat identifier. When the client presents the identifier
to the third-party it can look up the query and secret in its local storage based
on the ticket. This solution is likely to produce smaller identifiers, but at the
cost of additional network requests and storage at the third-party service.
There’s currently no standard for either of these two options describing what the API
for registering a caveat would look like for the second option, or which public key
encryption algorithm and message format would be used for the first. There is also no
Modify an existing 
macaroon to add a caveat.
Add the third-
party caveat.
330
CHAPTER 9
Capability-based security and macaroons
standard describing how a client presents the caveat identifier to the third-party ser-
vice. In practice, this limits the use of third-party caveats because client developers
need to know how to integrate with each service individually, so they are typically only
used within a closed ecosystem.
Answers to pop quiz questions
1
a, e, f, or g are all acceptable places to encode the token. The others are likely
to interfere with the functioning of the URI.
2
c, d, and e.
3
b and e would prevent tokens filling up the database. Using a more scalable
database is likely to just delay this (and increase your costs).
4
e. Without returning links, a client has no way to create URIs to other resources.
5
d. If the server redirects, the browser will copy the fragment to the new URL
unless a new one is specified. This can leak the token to other servers. For
example, if you redirect the user to an external login service, the fragment com-
ponent is not sent to the server and is not included in Referer headers.
6
a and d.
7
b, c, and e.
Summary
 Capability URIs can be used to provide fine-grained access to individual resources
via your API. A capability URI combines an identifier for a resource along with
a set of permissions to access that resource.
 As an alternative to identity-based access control, capabilities avoid ambient
authority that can lead to confused deputy attacks and embrace POLA.
Pop quiz
6
Which of the following apply to a first-party caveat? Select all that apply.
a
It’s a simple string.
b
It’s satisfied using a discharge macaroon.
c
It requires the client to contact another service.
d
It can be checked at the point of use by the API.
e
It has an identifier, a secret string, and a location hint.
7
Which of the following apply to a third-party caveat? Select all that apply.
a
It’s a simple string.
b
It’s satisfied using a discharge macaroon.
c
It requires the client to contact another service.
d
It can be checked at the point of use by the API.
e
It has an identifier, a secret string, and a location hint.
331
Summary
 There are many ways to form capability URIs that have different trade-offs. The
simplest forms encode a random token into the URI path or query parameters.
More secure variants encode the token into the fragment or userinfo compo-
nents but come at a cost of increased complexity for clients.
 Tying a capability URI to a user session increases the security of both, because it
reduces the risk of capability tokens being stolen and can be used to prevent
CSRF attacks. This makes it harder to share capability URIs.
 Macaroons allow anybody to restrict a capability by appending caveats that can
be cryptographically verified and enforced by an API. Contextual caveats can be
appended just before a macaroon is used to secure a token against misuse.
 First-party caveats encode simple conditions that can be checked locally by an
API, such as restricted the time of day at which a token can be used. Third-party
caveats require the client to obtain a discharge macaroon from an external ser-
vice proving that it satisfies a condition, such that the user is an employee of a
certain company or is over 18 years old.
Part 4
Microservice APIs
in Kubernetes
The Kubernetes project has exploded in popularity in recent years as the
preferred environment for deploying server software. That growth has been
accompanied by a shift to microservice architectures, in which complex applica-
tions are split into separate components communicating over service-to-service
APIs. In this part of the book, you’ll see how to deploy microservice APIs in
Kubernetes and secure them from threats.
 Chapter 10 is a lightning tour of Kubernetes and covers security best prac-
tices for deploying services in this environment. You’ll look at preventing com-
mon attacks against internal APIs and how to harden the environment against
attackers.
 After hardening the environment, chapter 11 discusses approaches to
authentication in service-to-service API calls. You’ll see how to use JSON Web
Tokens and OAuth2 and how to harden these approaches in combination with
mutual TLS authentication. The chapter concludes by looking at patterns for
end-to-end authorization when a single user API request triggers multiple inter-
nal API calls between microservices.
335
Microservice APIs
in Kubernetes
In the chapters so far, you have learned how to secure user-facing APIs from a vari-
ety of threats using security controls such as authentication, authorization, and
rate-limiting. It’s increasingly common for applications to themselves be structured
as a set of microservices, communicating with each other using internal APIs intended
to be used by other microservices rather than directly by users. The example in fig-
ure 10.1 shows a set of microservices implementing a fictional web store. A single
user-facing API provides an interface for a web application, and in turn, calls sev-
eral backend microservices to handle stock checks, process payment card details,
and arrange for products to be shipped once an order is placed.
DEFINITION
A microservice is an independently deployed service that is a
component of a larger application. Microservices are often contrasted with
This chapter covers
 Deploying an API to Kubernetes
 Hardening Docker container images
 Setting up a service mesh for mutual TLS
 Locking down the network using network policies
 Supporting external clients with an ingress 
controller
336
CHAPTER 10
Microservice APIs in Kubernetes
monoliths, where all the components of an application are bundled into a sin-
gle deployed unit. Microservices communicate with each other using APIs
over a protocol such as HTTP.
Some microservices may also need to call APIs provided by external services, such as a
third-party payment processor. In this chapter, you’ll learn how to securely deploy
microservice APIs as Docker containers on Kubernetes, including how to harden con-
tainers and the cluster network to reduce the risk of compromise, and how to run TLS
at scale using Linkerd (https://linkerd.io) to secure microservice API communications.
10.1
Microservice APIs on Kubernetes
Although the concepts in this chapter are applicable to most microservice deploy-
ments, in recent years the Kubernetes project (https://kubernetes.io) has emerged as
a leading approach to deploying and managing microservices in production. To keep
Users
Stock
Authentication
Inventory
Shipping
Payment
processing
Web frontend
API
Frontend services may call
many backend services.
Each backend service may
have a different database.
Some microservices may
call external APIs to get
their jobs done.
Figure 10.1
In a microservices architecture, a single application is broken into loosely 
coupled services that communicate using remote APIs. In this example, a fictional web 
store has an API for web clients that calls to internal services to check stock levels, 
process payments, and arrange shipping when an order is placed.
337
Microservice APIs on Kubernetes
things concrete, you’ll use Kubernetes to deploy the examples in this part of the book.
Appendix B has detailed instructions on how to set up the Minikube environment for
running Kubernetes on your development machine. You should follow those instruc-
tions now before continuing with the chapter.
 The basic concepts of Kubernetes relevant to deploying an API are shown in fig-
ure 10.2. A Kubernetes cluster consists of a set of nodes, which are either physical or
virtual machines (VMs) running the Kubernetes software. When you deploy an app to
the cluster, Kubernetes replicates the app across nodes to achieve availability and scal-
ability requirements that you specify. For example, you might specify that you always
require at least three copies of your app to be running, so that if one fails the other
two can handle the load. Kubernetes ensures these availability goals are always satis-
fied and redistributing apps as nodes are added or removed from the cluster. An app
is implemented by one or more pods, which encapsulate the software needed to run
that app. A pod is itself made up of one or more Linux containers, each typically run-
ning a single process such as an HTTP API server.
DEFINITION
A Kubernetes node is a physical or virtual machine that forms part
of the Kubernetes cluster. Each node runs one or more pods that implement
Node
Node
Pod
Pod
Pod
Container
Container
Container
Container
Container
Service A
Service B
A node is a machine that can
run containers. It might be a
physical machine or a VM.
A service is implemented by a
collection of pods, all running
the same containers.
Related containers are
grouped together into pods.
A container is typically
a single process.
Figure 10.2
In Kubernetes, an app is implemented by one or more identical pods 
running on physical or virtual machines known as nodes. A pod itself is a collection 
of Linux containers, each of which typically has a single process running within it, 