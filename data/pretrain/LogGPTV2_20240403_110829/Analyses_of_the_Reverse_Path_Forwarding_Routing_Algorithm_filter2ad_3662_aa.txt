# Analyses of the Reverse Path Forwarding Routing Algorithm

**Authors: Christie Bolton and Gavin Lowe**

**Affiliation:**
Oxford University Computing Laboratory
Wolfson Building
Parks Road
Oxford OX1 3QD
{christie, gavinl}@comlab.ox.ac.uk

## Abstract
The reverse path forwarding (RPF) algorithm is a protocol for distributing messages throughout networks. The goal is to ensure correctness—messages sent will eventually be received by all nodes in the originator’s connected component—while minimizing the number of message propagations.

We employ various analysis techniques to identify necessary additional constraints and to prove the protocol's correctness under these conditions. Specifically, we present counterexamples discovered using the model-checkers FDR and the Alloy Analyzer, which demonstrate that the protocol is incorrect if the cost of links depends on the node using that link. We then examine the case where the cost of links is independent of the node using the link, using a special-purpose network sampling program to increase confidence in the correctness of this stricter protocol. We follow this with a manual proof to verify its correctness. The paper concludes with a discussion on the suitability of these techniques for reasoning about protocols of this complexity.

## 1. Introduction
In network communication, nodes must determine the optimal path for routing messages to other nodes. To achieve this, nodes exchange information about network links, enabling the calculation of the best route. Ensuring correctness—that every message sent will eventually be received by all nodes in the originator’s connected component—is crucial. However, as communication networks grow larger and more pervasive, efficiency—minimizing the number of message propagations—becomes increasingly important.

This study focuses on the reverse path forwarding (RPF) routing algorithm, a technique for distributing information about the state of network links, often used as part of larger distributed network protocols. In RPF, each node maintains a record of its perception of the system state and continually broadcasts this information. Each piece of information is time-stamped, and a node updates its routing tables only when it receives more recent link-state information.

The RPF protocol, as typically described, is underspecified and open to different interpretations. While it is clear that packets are dropped if they are not sent along the reverse path, the method for calculating such paths is left undefined. Our initial objective was to identify and explore the correctness of different interpretations of the RPF algorithm and to evaluate the effectiveness of two existing model-checkers for performing such analyses.

RPF is similar to the link state routing algorithm, where each node maintains a map of its belief about the network state. The key difference is that, instead of flooding, nodes in RPF may choose to ignore messages. Specifically, a node \( n \) accepts a packet from node \( p \) initiated by node \( i \) only if \( n \) believes that \( p \) is the first node on \( n \)'s shortest path to \( i \); we call \( p \) the provider for \( i \) in this case (Figure 1).

Under stable network conditions, RPF works correctly, with each broadcast being accepted exactly once by every node in the originator’s connected component. However, if routing tables change, a broadcast message might never be accepted by a node.

This paper investigates the hypothesis that if the link state eventually stabilizes and the algorithm is correctly applied, the system will stabilize into a state where every node has correct information about every link in its connected component, and all subsequent messages are correctly received. Various tools and techniques are used in this investigation.

Our results show that the hypothesis is false: we present counterexamples found using FDR and the Alloy Analyzer, demonstrating that the protocol is incorrect if the cost of links depends on the node using that link. We then use a special-purpose network sampling program to increase confidence in the correctness of the protocol under additional constraints and perform a manual proof to verify correctness under these conditions.

The main contributions are: exploring different interpretations of the RPF protocol, identifying an error in a reasonable interpretation that can lead to incorrect link information in a stable network, proving the correctness of a stricter variant where the cost of links is independent of the node, and discussing the suitability of these techniques for reasoning about protocols of this complexity.

The paper begins with a detailed description of the RPF algorithm and its complexities, followed by a discussion of our chosen tools and techniques. The next three sections describe our tool-based analysis using FDR, the Alloy Analyzer, and a special-purpose Java program. Section 6 presents a manual proof of the algorithm's validity, and Section 7 concludes with a discussion of our findings. The code for the automatic analyses is included in [7].

## 2. The Reverse Path Forwarding Algorithm and Chosen Verification Techniques

In distributed networks, an efficient and reliable protocol is essential for passing packets between nodes. Various routing algorithms have been proposed to achieve this. A routing algorithm should ensure that, provided the source and destination nodes are connected, each packet sent should eventually reach its destination. If the source and destination nodes are not directly connected, multiple hops are required. The problem becomes more complex if the network is dynamic, with links that can be made or broken.

Simple algorithms like flooding forward every incoming packet that has not reached its destination on every path except the one it arrived on. Although this satisfies the correctness condition, it is highly inefficient.

The RPF routing algorithm is an adaptive routing algorithm: the path on which a node sends a packet is determined by that node’s current perception of the system state, whether it be the network topology or the number of packets on each link. Beliefs about the system state are regularly updated as messages about changes are propagated. Hence, the choice of path for sending messages and packets is also regularly updated.

RPF is similar to the link state routing algorithm in that every node maintains a map of its belief about the network state. Each node determines the distance to each of its direct neighbors and regularly distributes packets containing this information. The main difference is that, instead of flooding all messages, nodes take responsibility for determining whether messages are redundant.

Specifically, the originator of a message broadcasts it to all its neighbors. A node \( id \) accepts a message from node \( p \) initiated by node \( i \) only if \( p \) is the first node on the route \( id \) would use to send messages to \( i \). If routing is symmetric, \( id \) normally receives from \( p \) messages that originate from \( i \). If \( id \) accepts a message, it broadcasts it to all its neighbors except \( p \). Note that a node \( i \) need not generally be a provider for itself to another node \( id \), even if there is a direct link between them.

There are two aspects of the protocol: choosing routes based on link state information and broadcasting given those routes. As noted in Section 1, the method for choosing routes from link state information is underspecified; in this paper, we adopt and explore the correctness of several different interpretations.

### 2.1. Complexity

The complexity of the system arises from the fact that each link can be either up or down, and knowledge about any link can be either "old" or "recent." Each node can have any one of four beliefs about the state of any link. In a network with \( n \) possible links, each node can have any one of \( 4^n \) beliefs. For a network with \( m \) nodes and \( n \) links, there are \( 4^{mn} \) belief sets.

The number of networks to be considered is exponential in both the number of nodes and links. For a four-node ring, we need to consider \( 4^{16} \approx 4 \times 10^9 \) possible states, close to the limit of current technology for explicit state exploration.

### 2.2. Choice of Verification Techniques

Various tools and techniques are available for automatically verifying the correctness of protocols. Model-checkers are excellent at identifying flaws but can only handle finite systems. Other techniques, such as theorem provers, are useful for proving results correct even for large or infinite systems but do not provide guidance on how to adapt conditions if they are not quite right.

Part of our project was to compare the model checkers FDR and the Alloy Analyzer, associated with CSP and the state-based specification language Alloy, respectively. The results of these analyses are presented in Sections 3 and 4, with a comparison in Section 7.3.

The number of possible networks is exponential in both the number of nodes and links. Both tools found an error—an inconsistency in beliefs between connected nodes about the status of a link in a stable network—in a small network, indicating necessary additional constraints. Even a four-node ring pushed them to their limits. To be confident that there were no errors for larger systems, alternative proof techniques were necessary.

Before attempting a manual proof, we needed to be confident that our constraints were sufficient. We used a specially built tool that generated large numbers of networks satisfying these constraints and checked for errors (discussed in detail in Section 5). The manual proof is presented in Section 6.

## 3. CSP-based Analysis

Model-checking is an increasingly important technique for verifying the correctness of systems, as observed by Clarke et al. in [8] and Steiner et al. in [9]. CSP [4, 5] is a mathematical language for capturing system behavior by recording events or message exchanges between components. Analysis is performed by using the model-checker FDR to compare a formal specification—a simple process capturing desired properties—with the process describing the model itself.

### 3.1. Features Common to Both Models

The key events in modeling the RPF algorithm represent the making and breaking of links and the propagation of information about link status. The events `make.{i,j}` and `break.{i,j}` represent the making and breaking of the link connecting nodes \( i \) and \( j \). The event `send.i.j.k.l.s.t` represents node \( i \) telling node \( j \) that \( t \) time units ago, node \( k \) said the link between it and node \( l \) had status \( s \) (either Up or Down).

We also need an event that represents the selection or re-selection by a node of the provider for another node to which it is connected. For example, if the information about the status of a link connecting nodes \( k \) and \( l \) received by node \( j \) from node \( i \) in the message `send.i.j.k.l.s.t` is more recent than \( j \)'s current belief, \( j \) will update its routing tables and may need to reset its providers. The event `setProvider.i.j.k` represents node \( i \) selecting node \( k \) as its provider for node \( j \).

Since `send` messages require a time stamp, we need an event `tock` representing the passage of time. An abstraction of our model is that whenever a `tock` event occurs, all information about non-adjacent links becomes old. We only require the time-stamps 0 and 1, indicating whether the information is recent.

Finally, for our validity checks, we need an event that communicates a node’s belief about the status of a link: the event `signal.i.{j,k}.s` indicates that node \( i \) believes the link connecting nodes \( j \) and \( k \) has status \( s \).

For each model, we verify correctness by performing a refinement check to determine whether any node can signal an incorrect belief about the status of a link in its connected component when the network is stable. We assume the network is initially fully connected, and every node has recent and correct information about the status of every link.

### 3.2. First CSP Interpretation

In the first CSP interpretation of the RPF algorithm, we abstract away from the costs of edges so that a node’s choice of provider for one node is independent of its selection of provider for all other nodes. The provider is chosen nondeterministically from all feasible nodes. Specifically, each node \( id \) chooses providers for each other node \( n \) by picking the first node \( p \) on some cycle-free path from \( id \) to \( n \) along only those edges it believes to be up.

As depicted in Figure 2, FDR finds an error in this interpretation when considering a three-node ring. This occurs because the cost of links is dependent on the node using that link, leading to inconsistencies in beliefs.