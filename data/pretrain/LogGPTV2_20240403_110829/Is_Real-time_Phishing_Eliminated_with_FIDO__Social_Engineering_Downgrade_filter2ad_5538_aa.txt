title:Is Real-time Phishing Eliminated with FIDO? Social Engineering Downgrade
Attacks against FIDO Protocols
author:Enis Ulqinaku and
Hala Assal and
AbdelRahman Abdou and
Sonia Chiasson and
Srdjan Capkun
Is Real-time Phishing Eliminated with FIDO? 
Social Engineering Downgrade Attacks against 
FIDO Protocols
Enis Ulqinaku, ETH Zürich; Hala Assal, AbdelRahman Abdou, and 
Sonia Chiasson, Carleton University; Srdjan Capkun, ETH Zürich
https://www.usenix.org/conference/usenixsecurity21/presentation/ulqinaku
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Is Real-time Phishing Eliminated with FIDO?
Social Engineering Downgrade Attacks against FIDO Protocols ∗
Enis Ulqinaku∗, Hala Assal†, AbdelRahman Abdou‡, Sonia Chiasson‡, Srdjan Capkun∗
∗Department of Computer Science, ETH Zürich, Switzerland
†Department of Systems and Computer Engineering, Carleton University, Canada
‡School of Computer Science, Carleton University, Canada
Abstract
FIDO’s U2F is a web-authentication mechanism designed
to mitigate real-time phishing—an attack that undermines
multi-factor authentication by allowing an attacker to relay
second-factor one-time tokens from the victim user to the
legitimate website in real-time. A U2F dongle is simple to
use, and is designed to restrain users from using it incorrectly.
We show that social engineering attacks allow an adversary to
downgrade FIDO’s U2F to alternative authentication mech-
anisms. Websites allow such alternatives to handle dongle
malfunction or loss. All FIDO-supporting websites in Alexa’s
top 100 allow choosing alternatives to FIDO, and are thus po-
tentially vulnerable to real-time phishing attacks. We crafted
a phishing website that mimics Google login’s page and im-
plements a FIDO-downgrade attack. We then ran a carefully-
designed user study to test the effect on users. We found that,
when using FIDO as their second authentication factor, 55%
of participants fell for real-time phishing, and another 35%
would potentially be susceptible to the attack in practice.
1 Introduction
Fast Identity Online (FIDO) is driven by an industry alliance
with the goal of reinforcing web authentication by “reducing
the world’s over-reliance on passwords” [5]. The alliance
now comprises 42 members including Amazon, Apple, Arm,
Google, Microsoft, PayPal, as well as ﬁnancial corporations
like American Express, Mastercard, Visa, and Wells Fargo.
FIDO’s U2F standard deﬁnes cryptographic challenge-
response protocols where a dongle with a private key can
prove its identity to a pre-registered website. The dongle inter-
acts with a user’s device through a Universal Serial Bus (USB)
port, or wirelessly using Near-Field Communication (NFC)
or Bluetooth (BLE). Such dongles are now manufactured by
many companies, including Yubico and Feitian Technologies.
The technology resists exposing the secret key, comparable
to some Physically Unclonable Function (PUF) technolo-
gies [3]. The challenge-response computations are performed
on the dongle itself, and the private key never leaves the don-
gle. U2F thus enjoys relatively high resistance to the common
cases of malware that run on the user’s machine. Physical
theft of the dongle compromises its defence, however, such
attacks are not scalable and cannot be performed remotely.
In U2F, the domain (string) in the browser’s address bar is
a function of the challenge-response protocol. The browser1
sends that string to the dongle. In case of phishing [85, p.269],
the domain will be that of the attacker’s website. Thus, an
attacker relaying the result of the challenge-response from the
browser to the legitimate website does not gain access; the re-
sponse will not match the website’s expectation. U2F is there-
fore a strong defender against phishing attacks [60], including
the devastating real-time phishing attacks that undermine var-
ious Two-factor Authentication (2FA) alternatives [50, 57]. In
real-time phishing, attackers relay the One-Time Password
(OTP) (generated on the user’s phone or sent over SMS) on
the ﬂy to the legitimate website. The FIDO alliance highlights
the abilities of its suite of technologies in handling phish-
ing [4]: “This security model eliminates the risks of phishing,
all forms of password theft and replay attacks”, “[the] built-
in phishing resistance and ease-of-use give it the potential to
drive widespread adoption”.
We show that FIDO could nonetheless be downgraded to
weaker options, enabled by websites that allow users to setup
second-factor alternatives to FIDO. These are typically con-
ﬁgured to account for, e.g., dongle loss, malfunction, or other
reasons where a user simply wants to avoid using the dongle
(e.g., grant access to a remote spouse). Despite extensive de-
sign efforts to empower users with a complete mental model,
and previous literature showing the high usability and like-
ability of FIDO [30], we show how clever social engineering
tactics enable a real-time phishing attacker to impersonate
FIDO users, requiring neither malware nor dongle theft.
We construct a real-time phishing attack which targets
FIDO users and works as follows. When the legitimate web-
∗An extended version of this work is available in [83].
1FIDO assumes a trusted browser.
USENIX Association
30th USENIX Security Symposium    3811
site prompts the adversary to insert the U2F dongle, the adver-
sary likewise prompts the user on their phishing website. As
the user inserts their dongle, the adversary asks the legitimate
website to use an alternative method, and prompts the user
to submit the OTP of that method on its phishing website.
We posit that users can perceive this as an additional, third
authentication factor, on top of the dongle they just inserted,
thus interpreting more steps as higher security [51,91]. On the
phishing website, the adversary simply ignores the dongle’s
response, and relays the user-submitted OTP of the alternative
method to the legitimate website, hence gaining access.
We inspected Alexa’s Top 100 websites to verify if they
allow choosing alternatives to FIDO during login. We found
that all websites that support FIDO (23 out of 100) allow
choosing weaker alternatives. Hence, their users remain po-
tentially vulnerable to real-time phishing despite using FIDO.
Ironically, most of these websites force users to ﬁrst register an
alternative 2FA method before being able to register FIDO as
a second factor. Google’s Advanced Protection [32] program
accepts logins only with security keys, however recovery at
scale remains challenging for such accounts (Sec. 8.1).
In this paper we approach two research questions. (RQ1)
How susceptible are users to phishing attacks when using
FIDO? (RQ2) How do users detect phishing attacks when
using FIDO? By implementing a website that mimics real-
time phishing of Google’s login form, and through a carefully-
designed user study of 51 participants, we found that only 10%
of participants are unlikely to fall for (general) phishing in
practice. They detected our phishing attempts early in the
study, e.g., from the phishing email or the phishing URL,
before reaching our downgrading FIDO part. Had they missed
the regular phishing indicators, it is unclear whether these
participants would detect our downgrade attack in practice.
Contributions. This paper contributes new social engineer-
ing attacks that allow an adversary to downgrade FIDO to
weaker 2FA alternatives. Such alternatives are vulnerable to
real-time phishing, which is the primary attack that FIDO is
designed to exhaust. By allowing such downgrade, FIDO’s
defence against real-time phishing is only partial. The pre-
sented methodology of evaluating the effectiveness of the new
attacks can be of independent interest to future researchers.
None of our attacks exploit weaknesses in the FIDO stan-
dards, APIs, or cryptographic protocols themselves. The core
enabler is rather the availability of authentication alternatives.
So long as users are allowed to login using weaker alterna-
tives, attackers also can always leverage them. In general,
it is necessary to either allow alternative login methods to
hardware tokens, or implement non-weaker account-recovery
mechanisms to account for token losses/malfunctions. Manual
recovery is costly [61]. And with adversaries now capitaliz-
ing on an ongoing pandemic [41], and a global work-from-
home pattern, it becomes increasingly important to make sure
promising defences like FIDO are not undermined.
2 Background
Two-Factor Authentication. 2FA is a widely deployed
strategy to strengthen password authentication. It usually
requires users to enroll a second factor (e.g., smartphone
or special hardware) to their accounts during registration.
Afterwards, upon submitting the correct password for lo-
gin, the user is asked to prove possession of the second
factor. To do so, most 2FA schemes require the user to
submit an OTP displayed, or conﬁrm a prompt, on their
phone [11, 48, 50, 57, 58, 82]. To enhance user experience
(reduce inconvenience of a method) and availability (access
to the user’s account), online services typically allow users to
enroll more than one 2FA alternative per account.
Threat Model: Real-time phishing. Existing 2FAs protect
users from password compromise but they largely remain vul-
nerable to real-time phishing. In real-time phishing, the user
interacts with the malicious page posing as the genuine web-
site, while the adversary authenticates simultaneously on the
real website by relaying victim’s credentials. The attack is
relatively easy from a technical perspective, and very effec-
tive in practice [19]. However, it is very challenging to be
prevented because it mostly exploits human mistakes. Prompt
notiﬁcations enhance user experience, however, they put the
burden onto users to detect ongoing attacks and risk user
habituation [7]. Automated tools, e.g., Evilginx [34], make
real-time phishing easy to deploy and largely scalable.
FIDO Speciﬁcation. FIDO alliance aims to reduce the re-
liance on passwords, while preserving usability. FIDO as-
sumes three trusted and cooperating components: i) relying
party, which is the server where the user authenticates; ii)
client, which typically is the browser; and iii) authenticator,
which is the device the user possesses. The key advantage of
FIDO compared to other 2FA schemes is that the browser pro-
vides the authenticator with the domain of the visited website.
Therefore, if the user falls for phishing, the browser communi-
cates the malicious domain to the authenticator, which signs
a message that is invalid to the honest server.
The alliance published three speciﬁcations [5]: (1) U2F
covers use cases where the authenticator is used as a second
factor; (2) UAF, which is known as “passwordless authentica-
tion”; (3) FIDO2, which is the latest speciﬁcations covering
use cases of both U2F and UAF. Unless speciﬁed, “FIDO”
herein refers to all three speciﬁcations described above.
FIDO2 includes WebAuthn API and the Client to Authenti-
cator Protocol (CTAP2). CTAP2 triggers browsers to display
a prompt window, which includes the domain name, when
a website tries to communicate with the dongle. CTAP2 is
backward compatible and supports U2F functionalities, which
do not trigger the prompt. An attacker can use the latter to
avoid the browser prompt, or even exploit it to their favor (see
Sec. 4.1).
3812    30th USENIX Security Symposium
USENIX Association
Table 1: All 23 FIDO-enabled websites in Alexa’s top 100 al-
low weaker 2FA alternatives to be registered alongside FIDO.
Support FIDO
allow
alternatives
do not allow
alternatives
Do not
support FIDO
FIDO partner
Others
Total
14
9
23
0
0
0
15
62
77
Total
29
71
100
3 Problem Statement
Different login means affect the security of users’ ac-
counts [11,37]. Reports from Google [20] and Microsoft [62]
show that multiple 2FA schemes are widely deployed as alter-
native logins (users select the 2FA challenge in every login
attempt), or recovery mechanisms. Except FIDO, none of the
common 2FA is secure against real-time phishing. Previous
work on FIDO focused on its usability [14,24,30,73]; limited
work questioned its security in real-world deployments, where
alternative 2FA and secure recovery are necessary. In prac-
tice, account recovery is an expensive operation for service
providers [61], and remains vulnerable to social engineering
attacks [29, 76]. FIDO speciﬁcations focus on authentication,
but provide only general recommendations for recovery [31].
To measure the extent by which weaker 2FA alternatives
to FIDO are used, we manually inspected Alexa’s top 100
websites, reviewing documentation for websites’ FIDO au-
thentication policy (when available), and creating accounts
on those websites that offer public access to test their policy
in practice. Results are shown in Table 1; 23 websites (10
organizations) allow choosing alternatives to FIDO. Users of
these sites are thus potentially vulnerable to real-time phish-
ing, even when using FIDO. More disturbing, most of these
sites force users to ﬁrst register an alternative 2FA before
enrolling their FIDO dongle, and as we show this practice
undermines the added security of FIDO.
Google’s Advanced Protection [32] is the only known pro-
gram where weaker 2FA alternatives are not supported. The
program is opt-in (and account recovery does not scale easily
to millions of users, see Sec. 8.1), thus not included in Table 1.
4 Downgrading FIDO via Social Engineering
Our attack starts as a typical real-time phishing (see Fig. 1),
with the user on the phishing website and the attacker on the
legitimate website at the same time. After relaying the user’s
credentials (Step 2 in Fig. 1), the attacker is presented with
the FIDO-prompt page from the legitimate site (Step 3), and
in turn displays a FIDO-prompt page to the user (Step 4).
At this point, the attacker waits until the user authorizes
their FIDO token to interact with the attacker’s page through
Figure 1: Downgrading FIDO via social engineering. Dashes
indicate longer time stretches, reﬂecting when the user acts.
the browser (Step 5).2 The attacker can leverage standard
API functions (e.g., u2f.register and u2f.sign for U2F),
so that the attacker is notiﬁed when such an authorization-
for-interaction occurs. When the browser communicates the
result of the challenge-response, the attacker ignores the result
of this interaction because all they need to know is that the
user has inserted the token. The attacker then chooses, on the
legitimate website, to use an alternative second factor method
from the list pre-conﬁgured by the (victim) user on the website
(Steps 6–9), and displays a page prompting the user for that
same method (Step 10). Depending on the website, this step
can simply be presented to the user without any indication
as to whether her FIDO-trial was successful. In our phishing
implementation below (Sec. 4.1), we show how Google’s
default message to users helps our (attacker’s) cause. Upon
getting the token from the user (Step 11), the attacker forwards
it on to the legitimate website (Step 12), hence gaining access.
Timing and ordering notes. In Fig. 1, Steps 6–9 can vary
between websites; some present the user with options; others
may choose for the user. These four steps (i.e., 6–9) must
however occur quickly so that the page in Step 10 is displayed
to the user right after the user’s FIDO authorization in Step 5.
To speed-up displaying the OTP prompt to the user (Step 10),
the attacker can initiate Steps 6–9 before 5, so that the OTP
prompt (Step 10) is ready immediately after the user’s autho-
rization. However, the delay between Steps 9 and 12 must
also be kept small before the website’s OTP token expires. All
such steps can be automated, thus delays can be kept minimal.
Reﬂections on Step 10. A key element in this attack oc-
2Some models require a button press; others a touch.
USENIX Association
30th USENIX Security Symposium    3813
Google’s login page. Details of the user study, including ethi-
cal considerations, are discussed in Sec. 5.
Our complete phishing pages are available in [83, Fig. 5].