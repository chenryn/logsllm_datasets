### Scenarios and Rate Limiting
In scenarios where we anticipate a sufficient number of instances for this attack to be practical, it is necessary to rate-limit the number of ledger posts included in a given block that the enclave will accept results from.

### Ethereum and Smart Contract Systems
A natural realization of our ledger system is through smart contract systems such as Ethereum [47], [6]. Smart contract systems enable distributed public computation on the blockchain. Typically, a program is posted to a specific address on the blockchain. When a user submits a transaction to the associated address, the code is executed, and the appropriate state is updated. As previously noted, our system allows for smart contracts with private data, which is not possible in current implementations of smart contract systems.

### Computation Section
| Operation | Running Time (µs) | Percentage |
| --- | --- | --- |
| Bitcoin Operations | 7764 | 100% |
| Proof Preparation | 7094 | 92.8% |
| Proof Verification | 550 | 7.2% |
| Protocol Operations | 2006 | 100% |
| Ciphertext Decryption | 4 | 0.2% |
| JavaScript Invocation | 1920 | 95.7% |
| Ciphertext Encryption | 82 | 4.0% |
| SGX Overhead | 1153348 | 100% |
| Enclave Initialization | 1153308 | 100.0% |
| Ecall Entry and Exit | 40 | 0.0% |

**Figure 3.** Measured computation overhead for different elements of our ELI experiment using a simple string concatenation program \( P \). Because SGX does not support internal time calls, these times were measured by the application code. The table above shows averaged results over 100 runs on a local Bitcoin regtest network.

### Private Blockchains
Many recent systems, such as Hyperledger [31], implement private smart contracts by constructing a shared blockchain among a set of dedicated nodes. In some cases, the parties forgo the use of proof-of-work in favor of digital signatures and trusted hardware to identify the party who writes the next block [33]. Private blockchains represent a compromise between centralized systems like CT and proof-of-work blockchains. They can use digital signatures to produce ledger authentication tags, making security non-economic. Additionally, the ledger can be constructed to provide efficient rules for state updates, enabling an efficient realization of our model in §II-B.

### Prototype Implementation
To validate our approach, we implemented our ELI construction using Intel SGX [5], [45], [34], [10], [15], [53], [32] to implement the enclave and the Bitcoin blockchain to implement the ledger. We embedded a lightweight JavaScript engine called Duktape [4] into our enclave, similar to previous projects [46]. Source code can be found at https://github.com/JHU-ARC/state for the stateless implementation.

The host application communicates with a local Bitcoin node via RPC to receive blockchain (ledger) fragments for delivery to the enclave and to send transactions when requested by the enclave. The enclave requires an independent (partial) Bitcoin implementation to verify proof-of-work tags used as ledger authenticators, based on the C++ SGX-Bitcoin implementation in the Obscuro project [60].

At startup, the host application loads the JavaScript program from a file, initializes the protocol values as in Algorithms 1, 2, and 3, and launches the SGX enclave. During the first initialization, the enclave generates a random, long-term master key \( K \), which can be sealed to the processor using SGX’s data sealing interface, protecting the key from power fluctuations.

In each iteration of the protocol, the untrusted application code prompts the user for the next desired input. It then generates a transaction \( T \) using the `bitcoin-tx` RPC. The first "input" \( T.vin[0] \) is set to be an unspent transaction in the local wallet. The first "output" \( T.vout[0] \) spends the majority of the input transaction to a new address belonging to the local wallet. The second output \( T.vout[1] \) embeds \( \text{SHA256}(i || I_i || S_i || P || CID || r_i) \) in an OP_RETURN script. The third output \( T.vout[2] \) embeds the public output \( \text{Pub} \) emitted by the previous step. This transaction is signed by a secret key in the local wallet and submitted for confirmation.

The host application monitors the blockchain until \( T \) has been confirmed by 6 blocks. The host then sets:
1. \( \text{post}_i.\text{Data} \leftarrow T.vout \)
2. \( \text{post}_i.\text{PrevHash} \leftarrow T.vin[0].\text{Hash} \)
3. \( \text{post}_i.\text{CID} \leftarrow \) chain of transactions from \( T \) back to the transaction with hash \( \text{post}_0.\text{PrevHash} \)
4. \( \text{post}_i.\text{Hash} \leftarrow T.\text{Hash} \)
5. \( \sigma_i \leftarrow \) 6 blocks confirming \( T \)

The host then submits \( (\text{post}_i, \sigma_i) \) to the enclave, which performs the following checks:
1. Verifies that \( \sigma_i \) is valid and has sufficiently high block difficulty.
2. Ensures the blocks in \( \sigma_i \) are consecutive.
3. Confirms \( T.vout[0] \) and \( T.vout[1] \) embed the correct data.
4. Validates that the transactions in \( \text{post}_i.\text{CID} \) are well formatted.

If \( i = 0 \) and there is no input state, the enclave generates a zero initial state. Otherwise, it generates the decryption key as described in the protocol using C-MAC to implement the PRF. The state, along with the inputs and random coins, are passed to the JavaScript interpreter. All hashes computed in the enclave are computed using SHA256. Instead of hashing all of \( \text{CID} \) into the ciphertext, only \( \text{post}_0.\text{PrevHash} \) is included, keeping \( \text{CID} \) constant throughout the rounds.

### Implementation Limitations
We chose to use Intel SGX to implement our enclave because it is a widely accepted, secure execution environment. However, SGX is significantly more powerful than the enclaves we model, including access to trusted time and monotonic counters. Although we use SGX, we do not leverage any of these additional features to ensure our implementation matches our model. Our Bitcoin implementation of the ledger is slow and would likely not be suitable for production release. Finally, we implement our applications in JavaScript so the JavaScript virtual machine will insulate the enclave code from host tampering.

### Measurements
To avoid significant costs on the Bitcoin main network, we tested our implementation on a private regression testnet. This also allows us to control the rate at which blocks are mined. The most time-consuming part of an implementation using the mainnet or testnet is waiting for blocks to be confirmed; blocks on the main Bitcoin network take an average of 10 minutes to be mined, or an average of 70 minutes to mine a block and its 6 confirmation blocks. If an application requires faster execution, alternative blockchains can be used, such as Litecoin (2.5 minutes per block) or Ethereum (approximately 10-19 seconds).

Our experiments used a simple string concatenation program \( P \). For our experiments, we measured three specific operations: (1) the execution time of the Bitcoin operations (on the host, enclave, and regtest network), (2) ELI protocol execution time, and (3) the time overhead imposed by Intel SGX operations. Figure 3 shows the running times of these parts of our implementation. Note that SGX does not provide access to a time interface, and there is no way for an SGX enclave to get trustworthy time from the operating system. The times in Figure 3 were measured from the application code.

### Discussion
Note that initializing an SGX enclave is a one-time cost that must be paid when the enclave is first loaded into memory. It is a comparatively expensive operation because the SGX driver must verify the code integrity and perform other bookkeeping operations. An additional computationally expensive operation is obtaining the proof-of-publication to be delivered to the enclave. This process relies on `bitcoin-cli` to retrieve the proper blocks, which can be slow depending on the status of the `bitcoind` daemon. We note that these tests were run using the regression blockchain regtest, and retrieving blocks from testnet or mainnet may produce different results.

### Conclusion
In this work, we considered the problem of constructing secure stateful computation from limited computing devices. This work leaves several open questions. First, while we discussed the possibility of using cryptographic obfuscation schemes to construct the enclave, we did not evaluate the specific assumptions and capabilities of such a system. Additionally, there may be other capabilities that the enclave-ledger combination can provide that are not realized by this work. Finally, while we discussed a number of applications of the ELI primitive, we believe that there may be many other uses for these systems.

### Acknowledgments
This work was supported in part by: the National Science Foundation under awards CNS-1653110 and CNS-1801479.

### References
[1] Namecoin. Available: https://namecoin.org/
[2] Bitcoin Wiki: Script. Available at: https://en.bitcoin.it/wiki/Script
[3] Certificate Transparency. Available at: https://www.certificate-transparency.org/
[4] Duktape. Available at: http://duktape.org
[5] Intel Software Guard Extensions (Intel SGX). Available at: https://software.intel.com/en-us/sgx
[6] The Ethereum Project. Available at: https://www.ethereum.org/
[7] TPM Reset Attack. Available at: http://www.cs.dartmouth.edu/~pkilab/sparks/
[8] Advanced Microchip Devices. Available at: https://developer.amd.com/sev/
[9] AWS Step Functions. Available at: https://aws.amazon.com/step-functions/
[10] I. Anati, S. Gueron, S. Johnson, and V. Scarlata, “Innovative technology for CPU based Attestation and Sealing,” in Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, vol. 13, 2013.
[11] Android Project. File-based encryption for Android. Available at: https://source.android.com/security/encryption/file-based
[12] Apple Computer. iOS Security: iOS 9.3 or later. Available at: https://www.apple.com/business/docs/iOS_Security_Guide.pdf
[13] Apple Computer. Answers to your questions about Apple and security. Available at: http://www.apple.com/customer-letter/answers/
[14] ARM Consortium. ARM TrustZone. Available at: https://www.arm.com/products/security-on-arm/trustzone
[15] A. B. Introduction to Intel SGX Sealing. Available at: https://software.intel.com/en-us/blogs/2016/05/04/introduction-to-intel-sgx-sealing
[16] B. Barak, O. Goldreich, R. Impagliazzo, S. Rudich, A. Sahai, S. Vadhan, and K. Yang, “On the (im)possibility of obfuscating programs,” Cryptology ePrint Archive, Report 2001/069, 2001. Available at: http://eprint.iacr.org/2001/069
[17] M. Bellare, M. Fischlin, S. Goldwasser, and S. Micali, “Identification protocols secure against reset attacks,” in EUROCRYPT ’01, B. Pfitzmann, Ed. Berlin, Heidelberg: Springer Berlin Heidelberg, 2001, pp. 495–511. Available at: https://doi.org/10.1007/3-540-44987-6_30
[18] J. Bonneau, “The science of guessing: Analyzing an anonymized corpus of 70 million passwords,” in IEEE S&P (Oakland) ’12, ser. SP ’12. Washington, DC, USA: IEEE Computer Society, 2012, pp. 538–552. Available at: http://dx.doi.org/10.1109/SP.2012.49
[19] M. Bowman, A. Miele, M. Steiner, and B. Vavala, “Private Data Objects: an Overview,” ArXiv e-prints, Jul. 2018.
[20] R. Canetti, O. Goldreich, S. Goldwasser, and S. Micali, “Resettable zero-knowledge (extended abstract),” in Proceedings of the Thirty-second Annual ACM Symposium on Theory of Computing, ser. STOC ’00. New York, NY, USA: ACM, 2000, pp. 235–244. Available at: http://doi.acm.org/10.1145/335305.335334
[21] R. Cheng, F. Zhang, J. Kos, W. He, N. Hynes, N. M. Johnson, A. Juels, A. Miller, and D. Song, “Ekiden: A platform for confidentiality-preserving, trustworthy, and performant smart contract execution,” CoRR, vol. abs/1804.05141, 2018. Available at: http://arxiv.org/abs/1804.05141
[22] A. R. Choudhuri, M. Green, A. Jain, G. Kaptchuk, and I. Miers, “Fairness in an unfair world: Fair multiparty computation from public bulletin boards,” in CCS ’17, 2017. Available at: https://eprint.iacr.org/2017/1091
[23] N. Döttling, T. Mie, J. Müller-Quade, and T. Nilges, “Basing obfuscation on simple tamper-proof hardware assumptions,” in TCC ’11. Springer, 2011.
[24] Ethereum White Paper. Available at: https://github.com/ethereum/wiki/wiki/White-Paper
[25] Apache Hadoop. Hadoop Key Management Server (KMS) - Documentation Sets. Available at: https://hadoop.apache.org/docs/stable/hadoop-kms/index.html
[26] S. Garg, C. Gentry, S. Halevi, M. Raykova, A. Sahai, and B. Waters, “Candidate indistinguishability obfuscation and functional encryption for all circuits,” Cryptology ePrint Archive, Report 2013/451, 2013. Available at: http://eprint.iacr.org/2013/451
[27] B. Giller, “Implementing Practical Electrical Glitching Attacks,” in BlackHat ’15, 2015.
[28] Google Cloud Functions. Available at: https://cloud.google.com/functions/
[29] R. Goyal and V. Goyal, “Overcoming cryptographic impossibility results using blockchains,” Cryptology ePrint Archive, Report 2017/935, 2017. Available at: https://eprint.iacr.org/2017/935
[30] Handshake. Handshake Protocol. Available at: https://handshake.org/
[31] Hyperledger. Hyperledger Architecture, Volume 1. Available at: https://www.hyperledger.org/wp-content/uploads/2017/08/Hyperledger_Arch_WG_Paper_1_Consensus.pdf
[32] Intel Corporation. Product Licensing FAQ. Available at: https://software.intel.com/en-us/sgx/product-license-faq
[33] Intel Corporation. Hyperledger Sawtooth. Available at: http://hyperledger.org/projects/sawtooth
[34] S. Johnson, V. Scarlata, C. Rozas, E. Brickell, and F. McKeen, “Intel Software Guard Extensions: EPID Provisioning and Attestation Services,” 2016.
[35] A. Juels, A. Kosba, and E. Shi, “The Ring of Gyges: Investigating the future of criminal smart contracts,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’16. New York, NY, USA: ACM, 2016, pp. 283–295. Available at: http://doi.acm.org/10.1145/2976749.2978362
[36] M. Kan, “Paying the WannaCry ransom got you nothing. Here’s why.” Available at: https://www.pcworld.com/article/3196880/security/