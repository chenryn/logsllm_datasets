## PostgreSQL 多值列的选择性 - Statistics, Cardinality, Selectivity, Estimate  
### 作者                                                             
digoal                                                             
### 日期                                                             
2018-06-25                                                           
### 标签                                                             
PostgreSQL , 多值列 , 选择性评估 , Statistics , Cardinality , Selectivity , Estimate    
----                                                             
## 背景    
基于成本的优化器，选择性估算是重要的环节，对于单值列，通过表的行数，数据分布柱状图、高频值、唯一值比例、空值比例等统计信息（pg_class, pg_stats），以及用户输入的条件，可以估算得到输入条件的选择性。  
对于多个条件的估算，之前PG给了比较暴力的AND,OR的叠加选择性计算。  
PG 10开始，支持多列统计信息定义，从而提高了多列条件的选择性评估精准度。  
[《PostgreSQL 10 黑科技 - 自定义统计信息》](../201709/20170902_02.md)    
但是对于多值列，以及一些特殊的类型或操作符条件，过滤性的评估依旧有改进空间。  
例如：  
JSON类型的操作，范围类型的操作，空间类型的评估等。  
例如用于计算“包含”的选择性如下：  
```  
postgres=# select oprname,oprleft::regtype,oprright::regtype,oprresult::regtype,oprrest from pg_operator where oprrest::text ~ 'contsel';  
 oprname | oprleft  | oprright | oprresult |   oprrest      
---------+----------+----------+-----------+--------------  
       | polygon  | polygon  | boolean   | contsel  
       | box      | box      | boolean   | contsel  
       | box      | point    | boolean   | contsel  
       | polygon  | point    | boolean   | contsel  
       | circle   | point    | boolean   | contsel  
       | circle   | circle   | boolean   | contsel  
 &&      | anyarray | anyarray | boolean   | arraycontsel  
 @>      | anyarray | anyarray | boolean   | arraycontsel  
       | tsquery  | tsquery  | boolean   | contsel  
       | jsonb    | jsonb    | boolean   | contsel  
 ?       | jsonb    | text     | boolean   | contsel  
 ?|      | jsonb    | text[]   | boolean   | contsel  
 ?&      | jsonb    | text[]   | boolean   | contsel  
 , &&, " and "constisnull)  
        {  
                ReleaseVariableStats(vardata);  
                PG_RETURN_FLOAT8(0.0);  
        }  
        /*  
         * If var is on the right, commute the operator, so that we can assume the  
         * var is on the left in what follows.  
         */  
        if (!varonleft)  
        {  
                if (operator == OID_ARRAY_CONTAINS_OP)  
                        operator = OID_ARRAY_CONTAINED_OP;  
                else if (operator == OID_ARRAY_CONTAINED_OP)  
                        operator = OID_ARRAY_CONTAINS_OP;  
        }  
        /*  
         * OK, there's a Var and a Const we're dealing with here.  We need the  
         * Const to be an array with same element type as column, else we can't do  
         * anything useful.  (Such cases will likely fail at runtime, but here  
         * we'd rather just return a default estimate.)  
         */  
        element_typeid = get_base_element_type(((Const *) other)->consttype);  
        if (element_typeid != InvalidOid &&  
                element_typeid == get_base_element_type(vardata.vartype))  
        {  
                selec = calc_arraycontsel(&vardata, ((Const *) other)->constvalue,  
                                                                  element_typeid, operator);  
        }  
        else  
        {  
                selec = DEFAULT_SEL(operator);  
        }  
        ReleaseVariableStats(vardata);  
        CLAMP_PROBABILITY(selec);  
        PG_RETURN_FLOAT8((float8) selec);  
}  
```  
## 原文  
https://blog.anayrat.info/en/2017/11/26/postgresql---jsonb-and-statistics/  
## 正文  
### Table of Contents  
- Statistics, cardinality, selectivity  
- Search on JSONB  
  - Dataset  
  - Operators and indexing for JSONB  
  - Selectivity on JSONB  
  - Diving in the code  
- Functional indexes  
  - Creating the function and the index  
  - Search using a function  
  - Another example and selectivity calculation  
- Consequences of a bad estimate  
- Last word  
### Statistics, cardinality, selectivity  
SQL is a declarative language. It is a language where the user asks what he wants. Without specifying how the computer should proceed to get the results.  
It is the DBMS that must find “how” to perform the operation by ensuring:  
- Return the right result  
- Ideally, as soon as possible  
“As soon as possible” means:  
- Minimize disk access  
- Give priority to sequential readings (especially important for mechanical disks)  
- Reduce the number of CPU operations  
- Reduce memory footprint  
To do this, a DBMS has an optimizer whose role is to find the best execution plan.  
PostgreSQL has an optimizer based on a cost mechanism. Without going into details, each operation has a unit cost (reading a sequential block, CPU processing of a record …). Postgres calculates the cost of several execution plans (if the query is simple) and chooses the least expensive.  
How can postgres estimate the cost of a plan? By estimating the cost of each node of the plan based on statistics. PostgreSQL analyzes tables to obtain a statistical sample (this operation is normally performed by the autovacuum daemon).  
Some words of vocabulary:  
Cardinality: In set theory, it is the number of elements in a set. In databases, it will be the number of rows in a table or after applying a predicate.  
Selectivity: Fraction of records returned after applying a predicate. For example, a table containing people and about one third of them are children. The selectivity of the predicate ```person = 'child'``` will be 0.33.  
If this table contains 300 people (this is the cardinality of the “people” set), we can estimate the number of children because we know that the predicate ```person = 'child'``` is 0.33:  
```  
300 * 0.33 = 99  
```  
These estimates can be obtained with ```EXPLAIN``` which displays the execution plan.  
Example (simplified):  
```  
explain (analyze, timing off) select * from t1 WHERE c1=1;  
                                  QUERY PLAN  
------------------------------------------------------------------------------  
 Seq Scan on t1  (cost=0.00..5.75 rows=100 ...) (actual rows=100 ...)  
   Filter: (c1 = 1)  
   Rows Removed by Filter: 200  
(cost=0.00..5.75 rows=100 …) : Indicates the estimated cost and the estimated number of records (rows).  
```  
(actual rows=100 …) : Indicates the number of records obtained.  
PostgreSQL documentation provides examples of estimation calculations : [Row Estimation Examples](https://www.postgresql.org/docs/current/static/row-estimation-examples.html)  
It is quite easy to understand how to obtain estimates from scalar data types.  
How are things going for particular types? For example JSON?  
### Search on JSONB  
#### Dataset  
As in previous articles, I used the stackoverflow dataset. I created a new table by aggregating data from multiple tables into a JSON object:  
```  
CREATE TABLE json_stack AS  
SELECT t.post_id,  
       row_to_json(t,  
                   TRUE)::jsonb json  
FROM  
  (SELECT posts.id post_id,  
          posts.owneruserid,  