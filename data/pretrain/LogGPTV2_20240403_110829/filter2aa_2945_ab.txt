Defining an enumerator for the Tree class by
using an iterator
Summary
Quick reference
Chapter 20 Decoupling application logic and handling events
Understanding delegates
Examples of delegates in the .NET Framework class
library
The automated factory scenario
Implementing the factory control system without using
delegates
Implementing the factory by using a delegate
Declaring and using delegates
Lambda expressions and delegates
Creating a method adapter
Enabling notifications by using events
Declaring an event
Subscribing to an event
Unsubscribing from an event
Raising an event
Understanding user interface events
Using events
Summary
Quick reference
Chapter 21 Querying in-memory data by using query expressions
What is LINQ?
Using LINQ in a C# application
Download from finelybook PI:EMAIL
19
Selecting data
Filtering data
Ordering, grouping, and aggregating data
Joining data
Using query operators
Querying data in Tree objects
LINQ and deferred evaluation
Summary
Quick reference
Chapter 22 Operator overloading
Understanding operators
Operator constraints
Overloaded operators
Creating symmetric operators
Understanding compound assignment evaluation
Declaring increment and decrement operators
Comparing operators in structures and classes
Defining operator pairs
Implementing operators
Understanding conversion operators
Providing built-in conversions
Implementing user-defined conversion operators
Creating symmetric operators, revisited
Writing conversion operators
Summary
Quick reference
PART IV    BUILDING UNIVERSAL WINDOWS PLATFORM
APPLICATIONS WITH C#
Download from finelybook PI:EMAIL
20
Chapter 23 Improving throughput by using tasks
Why perform multitasking by using parallel processing?
The rise of the multicore processor
Implementing multitasking by using the Microsoft .NET
Framework
Tasks, threads, and the ThreadPool
Creating, running, and controlling tasks
Using the Task class to implement parallelism
Abstracting tasks by using the Parallel class
When not to use the Parallel class
Canceling tasks and handling exceptions
The mechanics of cooperative cancellation
Using continuations with canceled and faulted tasks
Summary
Quick reference
Chapter 24 Improving response time by performing asynchronous
operations
Implementing asynchronous methods
Defining asynchronous methods: The problem
Defining asynchronous methods: The solution
Defining asynchronous methods that return values
Asynchronous method gotchas
Asynchronous methods and the Windows Runtime APIs
Tasks, memory allocation, and efficiency
Using PLINQ to parallelize declarative data access
Using PLINQ to improve performance while iterating
through a collection
Canceling a PLINQ query
Synchronizing concurrent access to data
Locking data
Download from finelybook PI:EMAIL
21
Synchronization primitives for coordinating tasks
Canceling synchronization
The concurrent collection classes
Using a concurrent collection and a lock to implement
thread-safe data access
Summary
Quick reference
Chapter 25 Implementing the user interface for a Universal Windows
Platform app
Features of a Universal Windows Platform app
Using the Blank App template to build a Universal Windows
Platform app
Implementing a scalable user interface
Applying styles to a UI
Summary
Quick reference
Chapter 26 Displaying and searching for data in a Universal Windows
Platform app
Implementing the Model–View–ViewModel pattern
Displaying data by using data binding
Modifying data by using data binding
Using data binding with a ComboBox control
Creating a ViewModel
Adding commands to a ViewModel
Searching for data using Cortana
Providing a vocal response to voice commands
Summary
Quick reference
Chapter 27 Accessing a remote database from a Universal Windows
Download from finelybook PI:EMAIL
22
Platform app
Retrieving data from a database
Creating an entity model
Creating and using a REST web service
Inserting, updating, and deleting data through a REST web
service
Reporting errors and updating the UI
Summary
Quick reference
Index
Download from finelybook PI:EMAIL
23
Acknowledgments
Well, here we are again, in what appears to have become a biennial event;
such is the pace of change in the world of software development! As I glance
at my beloved first edition of Kernighan and Ritchie describing The C
Programming Language (Prentice Hall), I occasionally get nostalgic for the
old times. In those halcyon days, programming had a certain mystique, even
glamour. Nowadays, in one form or another, the ability to write at least a
little bit of code is fast becoming as much a requirement in many workplaces
as the ability to read, write, or add up. The romance has gone, to be replaced
by an air of “everyday-ness.” Then, as I start to hanker after the time when I
still had hair on my head and the corporate mainframe required a team of full-
time support staff just to pander to its whims, I realize that if programming
were restricted to a few elite souls, then the market for C# books would have
disappeared after the first couple of editions of this tome. Thus cheered, I
power up my laptop, my mind mocking the bygone era when such processing
power could have navigated many hundreds of Apollo spacecraft
simultaneously to the moon and back, and get down to work on the latest
edition of this book!
Despite the fact that my name is on the cover, authoring a book such as
this is far from a one-man project. I’d like to thank the following people who
have provided unstinting support and assistance throughout this exercise.
First, Trina MacDonald at Person Education, who took on the role of
prodding me into action and ever-so-gently tying me down to well-defined
deliverables and hand-off dates. Without her initial impetus and cajoling, this
project would not have got off the ground.
Next, Rick Kughen, the tireless copy editor who ensured that my grammar
remained at least semi-understandable, and picked up on the missing words
and nonsense phrases in the text.
Download from finelybook PI:EMAIL
24
Then, David Franson, who had the unenviable task of testing the code and
exercises. I know from experience that this can be a thankless and frustrating
task at times, but the hours spent and the feedback that results can only make
for a better book. Of course, any errors that remain are entirely my
responsibility, and I am happy to listen to feedback from any reader.
As ever, I must also thank Diana, my better half, who keeps me supplied
with caffeine-laden hot drinks when deadlines are running tight. Diana has
been long-suffering and patient, and has so far survived my struggle through
nine editions of this book; that is dedication well beyond the call of duty. She
has recently taken up running. I assumed it was to keep fit, but I think it is
more likely so she can get well away from the house and scream loudly
without my hearing her!
And lastly, to James and Frankie, who have both now flown the nest.
James is trying to avoid gaining a Yorkshire accent while living and working
in Sheffield, but Frankie has remained closer to home so she can pop in and
raid the kitchen from time to time.
Download from finelybook PI:EMAIL
25
About the Author
John Sharp is a principal technologist for CM Group Ltd, a software
development and consultancy company in the United Kingdom. He is well
versed as a software consultant, developer, author, and trainer, with more
than 35 years of experience, ranging from Pascal programming on CP/M and
C/Oracle application development on various flavors of UNIX to the design
of C# and JavaScript distributed applications and development on Windows
10 and Microsoft Azure. He also spends much of his time writing courseware
for Microsoft, focusing on areas such as Data Science using R and Python,
Big Data processing with Spark and CosmosDB, and scalable application
architecture with Azure.
Download from finelybook PI:EMAIL
26
Introduction
Microsoft Visual C# is a powerful but simple language aimed primarily at
developers who create applications built on the Microsoft .NET Framework.
Visual C# inherits many of the best features of C++ and Microsoft Visual
Basic but few of the inconsistencies and anachronisms, which results in a
cleaner and more logical language.
C# 1.0 made its public debut in 2001.
C# 2.0, with Visual Studio 2005, provided several important new
features, including generics, iterators, and anonymous methods.
C# 3.0, which was released with Visual Studio 2008, added extension
methods, lambda expressions, and most famously of all, the Language-
Integrated Query facility, or LINQ.
C# 4.0 was released in 2010 and provided further enhancements that
improved its interoperability with other languages and technologies.
These features included support for named and optional arguments and
the dynamic type, which indicates that the language runtime should
implement late binding for an object. An important addition to the
.NET Framework, and released concurrently with C# 4.0, were the
classes and types that constitute the Task Parallel Library (TPL). Using
the TPL, you can build highly scalable applications that can take full
advantage of multicore processors.
C# 5.0 added native support for asynchronous task-based processing
through the async method modifier and the await operator.
C# 6.0 was an incremental upgrade with features designed to make life
simpler for developers. These features include items such as string
interpolation (you need never use String.Format again!), enhancements
to the ways in which properties are implemented, expression-bodied
methods, and others.
Download from finelybook PI:EMAIL
27
C# 7.0 adds further enhancements to aid productivity and remove some
of the minor anachronisms of C#. For example, you can now
implement property accessors as expression-bodied members, methods
can return multiple values in the form of tuples, the use of out
parameters has been simplified, and switch statements have been
extended to support pattern- and type-matching. There are other
updates as well, which are covered in this book.
It goes without saying that Microsoft Windows 10 is an important
platform for running C# applications, but now you can also run code
developed by using C# on other operating systems, such as Linux, through
the .NET Core runtime. This opens up possibilities for writing code that can
run in multiple environments. Additionally, Windows 10 supports highly
interactive applications that can share data and collaborate as well as connect
to services running in the cloud. The key notion in Windows 10 is Universal
Windows Platform (UWP) apps—applications designed to run on any
Windows 10 device, whether a fully fledged desktop system, a laptop, a
tablet, or even an IoT (Internet of Things) device with limited resources.
Once you have mastered the core features of C#, gaining the skills to build
applications that can run on all these platforms is important.
Voice activation is another feature that has come to the fore, and Windows
10 includes Cortana, your personal voice-activated digital assistant. You can
integrate your own apps with Cortana to allow them to participate in data
searches and other operations. Despite the complexity normally associated
with natural-language speech analysis, enabling your apps to respond to
Cortana’s requests is surprisingly easy; I cover this in Chapter 26. Also, the
cloud has become such an important element in the architecture of many
systems—ranging from large-scale enterprise applications to mobile apps
running on portable devices—that I decided to focus on this aspect of
development in the final chapter of the book.
The development environment provided by Visual Studio 2017 makes
these features easy to use, and the many new wizards and enhancements
included in the latest version of Visual Studio can greatly improve your
productivity as a developer. I hope you have as much fun working through
this book as I had writing it!
Download from finelybook PI:EMAIL
28
Who should read this book
This book assumes that you are a developer who wants to learn the
fundamentals of programming with C# by using Visual Studio 2017 and the
.NET Framework version 4.6.1. By the time you complete this book, you will
have a thorough understanding of C# and will have used it to build
responsive and scalable applications that can run on the Windows 10
operating system.
Who should not read this book
This book is aimed at developers new to C# but not completely new to
programming. As such, it concentrates primarily on the C# language. This
book is not intended to provide detailed coverage of the multitude of
technologies available for building enterprise-level and global applications
for Windows, such as ADO.NET, ASP.NET, Azure, or Windows
Communication Foundation. If you require more information on any of these
items, you might consider reading some of the other titles available from
Microsoft Press.
Organization of this book
This book is divided into four sections:
Part I, “Introducing Microsoft Visual C# and Microsoft Visual Studio
2017,” provides an introduction to the core syntax of the C# language
and the Visual Studio programming environment.
Part II, “Understanding the C# object model,” goes into detail on how
to create and manage new types in C# and how to manage the
resources referenced by these types.
Part III, “Defining extensible types with C#,” includes extended
coverage of the elements that C# provides for building types that you
can reuse across multiple applications.
Part IV, “Building Universal Windows Platform applications with C#,”
describes the universal Windows 10 programming model and how you
Download from finelybook PI:EMAIL
29
can use C# to build interactive applications for this model.
Finding your best starting point in this book
This book is designed to help you build skills in a number of essential areas.
You can use this book if you are new to programming or if you are switching
from another programming language such as C, C++, Java, or Visual Basic.
Use the following table to find your best starting point.
If you are
Follow these steps
New to object-oriented
programming
1. Install the practice files as described in the
upcoming section, “Code samples.”
2. Work through the chapters in Parts I, II, and
III sequentially.
3. Complete Part IV as your level of
experience and interest dictates.
Familiar with procedural
programming languages,
such as C, but new to C#
1. Install the practice files as described in the
upcoming section, “Code samples.”
2. Skim the first five chapters to get an
overview of C# and Visual Studio 2017, and
then concentrate on Chapters 6 through 22.
3. Complete Part IV as your level of
experience and interest dictates.
Migrating from an
object-oriented language
such as C++ or Java
1. Install the practice files as described in the
upcoming section, “Code samples.”
2. Skim the first seven chapters to get an
overview of C# and Visual Studio 2017, and
then concentrate on Chapters 8 through 22.
3. For information about building Universal
Windows Platform applications, read Part
IV.
Switching from Visual
Basic to C#
1. Install the practice files as described in the
upcoming section, “Code samples.”
Download from finelybook PI:EMAIL
30
2. Work through the chapters in Parts I, II, and
III sequentially.
3. For information about building Universal
Windows Platform applications, read Part
IV.
4. Read the Quick Reference sections at the
end of the chapters for information about
specific C# and Visual Studio 2017
constructs.
Referencing the book
after working through the
exercises
1. Use the index or the table of contents to find
information about particular subjects.
2. Read the Quick Reference sections at the
end of each chapter to find a brief review of
the syntax and techniques presented in the
chapter.
Most of the book’s chapters include hands-on samples that let you try out
the concepts you just learned. No matter which sections you choose to focus
on, be sure to download and install the sample applications on your system.
Conventions and features in this book
This book presents information by using conventions designed to make the
information readable and easy to follow.
Each exercise consists of a series of tasks, presented as numbered steps
(1, 2, and so on) listing each action you must take to complete the
exercise.
Boxed elements with labels such as “Note” provide additional
information or alternative methods for completing a step successfully.
Text that you type (apart from code blocks) appears in bold.
A plus sign (+) between two key names means that you must press
those keys at the same time. For example, “Press Alt+Tab” means that
you hold down the Alt key while you press the Tab key.
Download from finelybook PI:EMAIL
31
System requirements
You will need the following hardware and software to complete the practice
exercises in this book:
Windows 10 (Home, Professional, Education, or Enterprise) version
1507 or higher.
The most recent build of Visual Studio Community 2017, Visual
Studio Professional 2017, or Visual Studio Enterprise 2017 (make sure
that you have installed any updates). As a minimum, you should select
the following workloads when installing Visual Studio 2017:
• Universal Windows Platform development
• .NET desktop development
• ASP.NET and web development
• Azure development
• Data storage and processing
• .NET Core cross-platform development
Note All the exercises and code samples in this book have been
developed and tested using Visual Studio Community 2017. They
should all work, unchanged, in Visual Studio Professional 2017 and
Visual Studio Enterprise 2017.
A computer that has a 1.8 GHz or faster processor (dual-core or better
recommended)
2 GB RAM (4 GB RAM recommended, add 512 MB if running in a
virtual machine)
10 GB of available hard disk space after installing Visual Studio
5400 RPM hard-disk drive (SSD recommended)
A video card that supports a 1024 × 768 or higher resolution display
Download from finelybook PI:EMAIL
32
Internet connection to download software or chapter examples
Depending on your Windows configuration, you might require local
Administrator rights to install or configure Visual Studio 2017.
You also need to enable developer mode on your computer to be able to
create and run UWP apps. For details on how to do this, see “Enable Your
Device for Development,” at
https://msdn.microsoft.com/library/windows/apps/dn706236.aspx.
Code samples
Most of the chapters in this book include exercises with which you can
interactively try out new material learned in the main text. You can download
all the sample projects, in both their pre-exercise and post-exercise formats,
from the following page:
https://aka.ms/VisCSharp9e/downloads
Note In addition to the code samples, your system should have Visual
Studio 2017 installed. If available, install the latest service packs for
Windows and Visual Studio.
Installing the code samples
Follow these steps to install the code samples on your computer so that you
can use them with the exercises in this book:
1. Unzip the CSharpSBS.zip file that you downloaded from the book’s
website, extracting the files into your Documents folder.
2. If prompted, review the end-user license agreement. If you accept the
terms, select the Accept option and then click Next.
Download from finelybook PI:EMAIL
33
Note If the license agreement doesn’t appear, you can access it from the
same webpage from which you downloaded the CSharpSBS.zip file.
Using the code samples
Each chapter in this book explains when and how to use the code samples for